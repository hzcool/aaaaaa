[
    {
        "content": "\u9898\u610f:\u6c42$dis(1,n)<=MinDis(1,n)+K$\u7684\u8def\u5f84\u6570\n\n## \u7b97\u6cd5\u4e00:\n\n\u9996\u5148\u4f60\u53ef\u4ee5\u8003\u8651\u5230$Day1$\u7684$DP$\u53bb\u54ea\u91cc\u4e86?\n\n\u6ca1\u9519,\u4f60\u53ea\u8981\u518d\u6ce8\u610f\u4e00\u4e0b$K\\le50$\u5c31\u5927\u6982\u80fd\u60f3\u5230\u8fd9\u662f\u4e00\u4e2a\u4e0e$k$\u6709\u5173\u7684$DP$\u4e86\n\n#### \u2460:\u8003\u8651$30pts:K=0 $\n\n\u53f3\u8f6c[P1608\u8def\u5f84\u7edf\u8ba1](https://www.luogu.org/problemnew/show/P1608)([P1144\u6700\u77ed\u8def\u8ba1\u6570](https://www.luogu.org/problemnew/show/P1144)\u53ef\u4ee5\u987a\u5e26A\u6389)\n\n#### \u2461:\u8003\u8651$70pts$:\u6ca1\u6709$0$\u8fb9\n\n\u8bbe$dis1_u$\u8868\u793a1\u5230u\u7684\u6700\u77ed\u8def,$disn_u$\u8868\u793a$u$\u5230$n$\u7684\u6700\u77ed\u8def(\u8fd9\u4e2a\u53ef\u4ee5\u5efa\u53cd\u56fe\u8dd1\u51fa\u6765)\n\n\u8003\u8651$f[u][j]$\u8868\u793a$dis(1,u)\\le dis1_u+j$\u7684\u8def\u5f84\u6570\n\n\u90a3\u4e48\u5bf9\u4e8e$edge(u,v,w)$\n\n\u90a3\u4e48\u4ece$1->u->v$\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f$dis1_u+j+w-dis1_v$\n\n\u5982\u679c$dis1_u+w-dis1_v+j\\le K$\n\n\u5c31\u53ef\u4ee5\u4ece$f[u][j]$\u8f6c\u79fb\u5230$f[v][dis1_u+j+w-dis1_v]$\n\n\u6240\u4ee5\u76f4\u63a5\u5148\u4ece$1$\u8dd1\u6700\u77ed\u8def\u7136\u540e\u76f4\u63a5$O(KM)DP$\u5c31$ok$\u4e86\n\n\u5f53\u7136\u8fd9\u6837\u8fd8\u662f\u6709\u95ee\u9898\u7684\n\n\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u8981\u5148\u66f4\u65b0$dis1$\u5c0f\u7684\u70b9\n\n\u6240\u4ee5\u8981\u5148\u6309\u7167$dis1$\u6392\u4e2a\u5e8f\u518d\u53bb\u8f6c\u79fb\u5c31\u6709$70pts$\u4e86\n\n#### \u2462:\u8003\u8651$100pts:$\n\n\u5bf9\u4e8e\u6709$0$\u8fb9\u7684\u56fe,\u663e\u7136\u76f4\u63a5\u6309\u7167$dis1$\u53bb\u6392\u5e8f\u662f\u4e0d\u884c\u7684\n\n\u4f8b\u5982$a->b->c,w=0$\n\n\u56e0\u4e3a\u4ed6\u7684\u4e00\u4e2a\u6709\u5411\u56fe,\u66f4\u65b0\u987a\u5e8f\u663e\u7136\u662f$a,b,c$\n\n\u6240\u4ee5\u8003\u8651\u62d3\u6251\u6392\u5e8f\u6765\u786e\u5b9a$0$\u8fb9\u4e24\u4e2a\u7aef\u70b9\u7684\u66f4\u65b0\u987a\u5e8f\n\n\u5373\u5bf9\u4e8e$0$\u8fb9,\u628a\u5176\u52a0\u5165\u65b0\u56fe,\u7136\u540e\u5bf9\u4e8e\u65b0\u56fe\u62d3\u6251\u6392\u5e8f\u786e\u5b9a\"$0$\u70b9\"\u7684\u66f4\u65b0\u987a\u5e8f\n\n\u7136\u540e\u5bf9\u4e8e$-1$\u7684\u60c5\u51b5\u663e\u7136\u662f\u5bf9\u4e8e\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u4e0a\u6709\u4e00\u4e2a$0$\u73af\n\n\u62d3\u6251\u6392\u5e8f\u5b8c\u4e86\u4e14\u5165\u5ea6\u4e0d\u7b49\u4e8e$0$\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5728$0$\u73af\u4e0a\n\n\u540c\u4e00\u4e2a$0$\u73af\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u5230$1$\u7684\u6700\u77ed\u8def\u548c\u5230$n$\u7684\u6700\u77ed\u8def\u90fd\u4e00\u6837\n\n\u6240\u4ee5\u5f53\u8fd9\u4e2a\u70b9$i$\u6ee1\u8db3$dis1_i+disn_i<=dis1_n+K$\u65f6,\u5c31\u53ef\u4ee5\u8f93\u51fa$-1$\u4e86\n\n\u7136\u540e\u6700\u540e\u4ee5$dis1$\u6216$disn$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57,\u62d3\u6251\u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u518d\u8f6c\u79fb\u5c31$ok$\u4e86\n\n\n## \u7b97\u6cd5\u4e8c:\n\n\u53ea\u8981\u8dd1\u4e00\u6b21\u53cd\u5411\u7684\u6700\u77ed\u8def\n\n$f[u][k]$\u8868\u793a$dis(u,n)<=MinDis(u,n)+k$\u7684\u65b9\u6848\u6570,\u7b54\u6848\u5c31\u662f$f[1][K]$\n\n\u8003\u8651$egde(u,v,w)$\n\n\u540c\u6837\u7684\u9053\u7406\u8d70\u8fd9\u6761\u8fb9\u7684\u8bdd,$dis(v,n)=MinDis(v,n)+w-MinDis(u,n)$\n\n$\\Rightarrow f[u][k]=\u2211f[v][k-(MinDis(v,n)-MinDis(u,n)+w)]$\n\n\u8fd9\u6837\u600e\u4e48\u5224$0$\u73af\u5462?\u53ea\u8981\u5728\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u4e2a$instack$\u5c31$ok$\u4e86\n\n\u5982\u679c\u5f53\u524d\u7684$v$\u8fd8\u5728\u641c\u7d22\u7684\u6808\u4e2d\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de$-1$\u4e86",
        "postTime": 1511053175,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\uff0c30\u5206\u8fd8\u662f\u5f88\u597d\u9a97\u7684\uff0c\u53ea\u8981\u8dd1\u4e00\u4e0bspfa\u6c42\u6700\u77ed\u8def\uff0c\u5728\u8ba1\u6570 \u5c31\u597d\u4e86\n\n\u8981\u5f97\u6ee1\u5206\u8fd8\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff0c~~\u7136\u800c\u6211\u5e76\u4e0d\u4f1a~~\uff0c\u4e8e\u662f\u56db\u5904\u627e\u8d44\u6599 ~~\u4e1c\u6284\u6284\u897f\u6284\u6284~~ \u624d\u641e\u61c2\u4e86\u4e00\u70b9\n\n\u53ef\u4ee5\u5148\u5efa\u56fe\uff08\u6b63\u53cd\u90fd\u8981\uff09\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5728\u679a\u4e3e0-k\uff0c\u56e0\u4e3ak\u6bd4\u8f83\u5c0f\u679a\u4e3e\u6309\u9053\u7406\u662f\u4e0d\u4f1a\u8d85\u65f6\u7684\uff0c\u9664\u975e\u65f6\u4f60\u5199\u9519\u4e86\uff0c\u8dd1\u4e00\u904d\u53cd\u56fe\uff0c\u6240\u6709\u7684\u60c5\u51b5\u6c42\u548c\uff0c~~\u5c31\u597d\u4e86~~\n\u53ef\u662f\u600e\u4e48\u6c42\u7b54\u6848\u5462\uff1a\n\t\u53ef\u4ee5dp\u6765\u505a\uff0c\u7528f[i][j]\u8868\u793a\u4ecen\u5230i\u7684\u8ddd\u79bb<\u6700\u77ed\u8ddd\u79bb+k\u7684\u65b9\u6848\u6570\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u90fd\u5c1d\u8bd5\u8d70\uff0c\u800c\u8fd9\u4e2a\u72b6\u6001\u53ef\u4ee5\u8868\u793a\u4e3au->v:\n    d[u]-d[v]+k-len[u->v];\u6700\u540e\u897f\u683c\u739b\u4e00\u4e0b\u5c31over\u4e86\n\n\n\u4e0a\u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cstring>\nusing namespace std;\nint t,d[100001],f[100001][51],n,m,k,p;\nbool working[100001][51];\nstruct node  {\n    int to,len;\n};\nvector<node>head[100001];\nvector<node>h[100001];\n//\u8fd9\u91cc\u7528\u4e24\u4e2avector\u6765\u5b58\u56fe\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\u975e\u5e38\u65b9\u4fbf\n//\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\uff0c\u4e0d\u5bb9\u6613\u51fa\u9519\nint dp(int root, int l){\t//\u8fd9\u624d\u662f\u8fd9\u9053\u9898\u7684\u5965\u5999\u6240\u5728\n\t//root\u8868\u793a\u5230\u54ea\u4e2a\u70b9\u4e86\uff0cl\u8868\u5f53\u524d\u7684k\u8fd8\u6709\u591a\u5c11\u5269\u4f59\n    int ans=0;\t\t\t\n//\u53cd\u5411\u8dd1\u662f\u56e0\u4e3a\u53ef\u4ee5\u51cf\u5c11\u8dd1\u6b7b\u80e1\u540c\u7684\u60c5\u51b5\u589e\u52a0\u6548\u7387\uff0c\n//\u4e00\u4e9b\u4e0d\u80fd\u5230\u8fben\u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u4e0d\u7528\u8dd1\u4e86\uff0c\u53ef\u4ee5\u81ea\u884c\u753b\u56fe\u7406\u89e3\n    if (l<0||l> k) return 0;//\u8fd9\u79cd\u60c5\u51b5\u8bf4\u660e\u7b54\u6848\u4e0d\u5408\u6cd5\n    if (working[root][l]) {\n//working\u6570\u7ec4\u662f\u4e3a\u4e86\u5224\u65ad\u20180\u2019\u73af\u7684\u60c5\u51b5\uff0c\n//\u5f53\u5176\u5df2\u7ecf\u4e3a1\u65f6\u4ee3\u8868\u5b83\u5df2\u7ecf\u8dd1\u8fc7\u4e86\uff0c\u5c31\u53ef\u4ee5\u8df3\u51fa\u6765\u4e86\n        working[root][l]=false;\n        return -1;\n    }\n    if(f[root][l]!=-1)   \n  //f\u6709\u503c\u4e86\u4ee3\u8868\u6c42\u51fa\u7b54\u6848\u4e86\n\t\treturn f[root][l];\n    working[root][l]=true;\n    for (int i=0;i<h[root].size();i++) {//\u8dd1\u53cd\u56fe\n        node e= h[root][i];\n        int val=dp(e.to,d[root]+l-d[e.to]-e.len);\n//\u8fd9\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u793a\u7528\u5c1d\u8bd5\u5f53\u524d\u8fd9\u6761\u8fb9\u66ff\u6362\u5176\u4e2d\u6700\u77ed\u8def\u5f84\u91cc\u7684\u4e00\u6761\u8fb9\n//\u6765\u6c42\u4e00\u4e2a\u5408\u6cd5\u7684\u89e3\n        if (val==-1) {\n            working[root][l]=false;\n            return -1;\n        }\n        ans=(ans+val)%p;\n    }\n    working[root][l] = false;\t\n    if (root==1&&l==0) ans++;\n   \t//\u8dd1\u5230\u8fd9\u91cc\u662f\u8bc1\u660e\u8fd9\u662f\u4e00\u4e2a\u89e3ans\u5c31+1\n    f[root][l]=ans;//\u8bb0\u5f55\u7b54\u6848\n    return ans;\n}\n\nint work(){\n    scanf(\"%d%d%d%d\", &n, &m, &k, &p);\n    for (int i=1;i<=n;i++) {//\u770b\uff0c\u521d\u59cb\u5316\u53ea\u8981\u51e0\u884c\u5c31\u597d\u4e86\n        head[i].clear();\n        h[i].clear();\n    }\n\tint a, b, c;\n    for (int i=1;i<= m;i++) {//\u5b58\u56fe\n        scanf(\"%d%d%d\",&a,&b,&c);\n        node  e;\n        e.to=b;\te.len=c;\n        head[a].push_back(e);\n        e.to=a;\t\t\t\t//\u53cd\u56fe\n        h[b].push_back(e);\n    }\n    memset(d,0x3f,sizeof(d));\t\t//spfa\n    memset(f,-1,sizeof(f));\t//\u8bb0\u5f97\u521d\u59cb\u5316\uff0c\u5426\u5219\u4f1awa\u58f0\u4e00\u7247\n    queue<int>q;\n    q.push(1);\td[1]=0;\n    while (!q.empty()) {\n        int x=q.front();\n        q.pop();\n        for (int i=0;i<head[x].size();i++) {\n            if (d[head[x][i].to]>d[x]+head[x][i].len) {\n                d[head[x][i].to]=d[x]+head[x][i].len;\n                q.push(head[x][i].to);\n            }\n        }\n    }\n    int ans=0;\n    for (int i=0;i<=k;i++) {\t\t//dp \u679a\u4e3ek\uff1a0-k, \n        int val=dp(n,i);\t\t\t//\u6c42\u548c\u540e\u5c31\u662f\u7b54\u6848\n        if (val==-1)   return -1;\n        ans=(ans+val)%p;\n    }\n    return ans;\n}\n\nint main(){//\u7b80\u5355\u7684\u4e3b\u51fd\u6570\n    scanf(\"%d\", &t);\n    while(t--) printf(\"%d\\n\", work());\n    return 0;\n}\n```",
        "postTime": 1534251653,
        "uid": 91499,
        "name": "linz",
        "ccfLevel": 0,
        "title": "\u901b\u516c\u56ed"
    },
    {
        "content": "~~\u6211\u5f88\u4e0d\u60f3\u8bf4 \u5728\u6211\u7684AC\u4ee3\u7801\u4e0a\u6211\u6253\u4e86\u8868\uff0c\u4f46\u5b9e\u5728\u6ca1\u6709\u529e\u6cd5\u4e86\u3002\u83ab\u540d\u76848\uff0c9\u4e2a\u70b9RE\u3002\u7136\u800c\u5373\u4fbf\u662f\u6253\u8868\u3002\u3002\u3002\u4e5f\u82b1\u4e86\u6211\u5f88\u4e45\u3002~~\n\n\u8fd9\u5927\u6982\u662fNOIP2017\u6700\u96be\u7684\u9898\u4e86\uff0c\u4e3a\u4e86\u8ba9\u4e0d\u61c2\u7684\u4eba\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u7bc7\u9898\u89e3\u4f1a\u6bd4\u8f83\u8be6\u7ec6\n\n\u6211\u7684\u505a\u6cd5\u662fDP\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5199\u7684\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0b\u9762\u6211\u7740\u91cd\u8bb2\u4e00\u4e0b\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u548c\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n**SPFA**\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0cSPFA\u76f4\u63a5\u7b97\u51fadist[i],\u8868\u793a\u4ece\u8282\u70b9i\u5230\u8282\u70b9n\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u662f\u7684\u6ca1\u6709\u770b\u9519\uff0c\u662f\u5230\u8282\u70b9n\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u5728\u4e0b\u9762\u4f1a\u5f88\u8be6\u7ec6\u5730\u8bb2\u89e3\u3002\u4f46\u6211\u4eec\u5148\u5f97\u5b8c\u6210\u8fd9\u4e2aSPFA\uff0c\u5f88\u5bb9\u6613\uff0c\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7ed9\u7684\u6bcf\u4e00\u6761\u8fb9\u53cd\u7740\u5efa\uff0c\u5f97\u5230\u53e6\u5916\u4e00\u5f20\u56fe\uff0c\u59d1\u4e14\u53eb\u53cd\u5411\u56fe\u3002\uff08\u5f53\u7136\u539f\u56fe\u4e5f\u8fd8\u662f\u8981\u5efa\u7684\uff0c\u53eb\u6b63\u5411\u56fe\uff09\n\n**\u72b6\u6001\u8bbe\u8ba1**\n\n\u8bbe\u8ba1\u72b6\u6001f[u][know]\u8868\u793a\u5728\u53cd\u5411\u56fe\u4e2d\u4ece\u8282\u70b9u\u5230\u8282\u70b9n\uff0c\u4e0e\u4ece\u8282\u70b9u\u5230\u8282\u70b9n\u7684\u6700\u77ed\u8def\u5f84\u76f8\u5dee\u7b49\u4e8eknow\u7684\u8def\u5f84\u6570,\u5373\u53ef\u8868\u793a\u4e3af[u][know]\u662f\u6ee1\u8db3dis(u,n)==MinDis(u,n)+know \u7684\u65b9\u6848\u6570\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u2211f[1][know] (0<=know<=k)\uff0c\u6211\u4eec\u4f1a\u5728\u7a0b\u5e8f\u4e4b\u4e2d\u679a\u4e3eknow\u628a\u6bcf\u4e2a\u90fd\u7b97\u51fa\u6765\n\n**\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b**\n\n\tint sum=0;\n\tfor (int i=head[u];i!=-1;i=edge[i].next)\n\t{\n\t\tint tmp=know-(dist[edge[i].to]+edge[i].val-dist[u]);\n\t\tif (tmp<0||tmp>k) continue;\n\t\tsum=(sum+dfs(edge[i].to,tmp))%p;\n\t\tif (flag) return 0;\n\t}\n\u76f4\u63a5\u8bf4\u4e0d\u597d\u8bb2\uff0c\u73b0\u5728\u5bf9\u4ee3\u7801\u8fdb\u884c\u76f4\u63a5\u8bb2\u89e3\n\n\u9996\u5148\u660e\u786e\uff0c\u6700\u540esum\u7684\u503c\u5c31\u662ff[u][know]\u7684\u503c\u3002tmp\u8868\u793a\u5f97\u662f\u8f6c\u79fb\u5230v\u7684\u65b0\u7684know\u7684\u503c\uff08know'\uff09\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5c06\u72b6\u6001f[u][know]\u7531f[v][know']\u8f6c\u79fb\u5f97\u5230\n\n\u4e5f\u5c31\u662f\u7b80\u5355\u7684\u76f8\u52a0\u7edf\u8ba1\u65b9\u6848\u6570\u4e86\n\n\u90a3\u4e48\u73b0\u5728\u8fdb\u5165\u6700\u91cd\u8981\u7684\u73af\u8282\uff0c\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f0f\u600e\u4e48\u63a8\u51fa\u6765\u7684\u3002\u8bf7\u770b\n\n![](https://cdn.luogu.com.cn/upload/pic/17726.png)\n\n\n<v,n>(\u90a3\u6761\u7eff\u7684)\u51cf\u53bb\u9ed1\u8fb9(dist[v])\u5c31\u662fknow' <u,n>\uff08\u4e00\u6761\u7eff\u7684\u52a0\u4e0a\u9ed1\u7684\uff09\u51cf\u53bb\u7ea2\u8fb9\uff08dist[u]\uff09\u5c31\u662fknow \u8fd9\u6837\u7684\u8bdd\u5c31\u9ebb\u70e6\u8bfb\u8005\u81ea\u5df1\u624b\u63a8\u4e00\u4e0b\u7acb\u9a6c\u5c31\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e86\n\n\u65b9\u7a0b\u7684\u521d\u59cb\u503c\u5c31\u662ff[know][0]=1\n\n**\u597d\u7684\u73b0\u5728\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u5efa\u53cd\u5411\u56fe\u3002**\n\n\u56e0\u4e3a\u4e0d\u662f\u6bcf\u4e2a\u8282\u70b9\u90fd\u80fd\u591f\u5230\u8fbe\u8282\u70b9n\u7684\uff0c\u6bd5\u7adf\u8fd9\u662f\u6709\u5411\u56fe\uff0c\u53cd\u5411\u5efa\u56fe\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u5b8c\u5168\u56de\u907f\u8fdb\u5165\u6b7b\u80e1\u540c\u7684\u60c5\u51b5\uff0c\u540c\u65f6\u4e5f\u662f\u4e3a\u4e86spfa\u7b97\u51fa\u5230\u8282\u70b9n\u7684\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6280\u5de7\u3002\n\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<stdlib.h>\n#include<string.h>\n#define re register int\n#define fo(i,a,b) for (re i=a;i<=b;i++)\nusing namespace std;\n\nconst int inf=0x3f;\nconst int maxn=200000+50;\nconst int mxn=100000+50;\nint T,n,m,k,p,sum1,sum2;\nint head[mxn],rev[mxn],dist[mxn],vis[mxn],wd[mxn][50+15],f[mxn][50+15];//\u8bbef[u][know]\u4e3a\u5230u\u70b9\u65f6\u4e0e\u4ece\u7ec8\u70b9\u5f00\u59cb\u7684\u6700\u77ed\u8def\u7684\u504f\u79fb\u91cf\u4e3aknow\u7684\u65f6\u5019\u7684\u603b\u65b9\u6848\u6570\u76ee\u3002\nbool flag;\nstruct EDGE\n{\n\tint to,next,val;\n}edge[maxn],reve[maxn];\ninline int read() {\n    char ch = getchar();int ret=0;\n    while(ch<'0'||ch >'9') ch=getchar();\n    while(ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n    return ret;\n}\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tmemset(rev,-1,sizeof(rev));\n\tsum1=0;sum2=0;\n\tmemset(edge,0,sizeof(edge));\n\tmemset(reve,0,sizeof(reve));\n\tmemset(f,-1,sizeof(f));\n\tflag=false;\n}\nvoid add(int x,int y,int z)\n{\n\tedge[++sum1]=(EDGE){y,head[x],z};\n\thead[x]=sum1;\n}\nvoid addr(int x,int y,int z)\n{\n\treve[++sum2]=(EDGE){y,rev[x],z};\n\trev[x]=sum2;\n}\nvoid spfa()\n{\n\tqueue <int> q;\n\tmemset(dist,inf,sizeof(dist));\n\tmemset(vis,0,sizeof(vis));\n\tdist[n]=0;\n\tvis[n]=1;\n\tq.push(n);\n\twhile (!q.empty())\n\t{\n\t\tint x=q.front();q.pop();vis[x]=0;\n\t\tfor (int i=rev[x];i!=-1;i=reve[i].next)\n\t\tif (dist[reve[i].to]>dist[x]+reve[i].val){\n\t\t\tdist[reve[i].to]=dist[x]+reve[i].val;\n\t\t\tif (!vis[reve[i].to])\n\t\t\t{\n\t\t\t  vis[reve[i].to]=1;\n\t\t\t  q.push(reve[i].to);\t\n\t\t\t}\n\t\t}\t\n\t}\n}\nint dfs(int u,int know)\n{\n\tif (wd[u][know]) {flag=true;return 0;}\n\tif (f[u][know]>0) return f[u][know];\n\twd[u][know]=1;\n\tint sum=0;\n\tfor (int i=head[u];i!=-1;i=edge[i].next)\n\t{\n\t\tint tmp=know-(dist[edge[i].to]+edge[i].val-dist[u]);\n\t\tif (tmp<0||tmp>k) continue;\n\t\tsum=(sum+dfs(edge[i].to,tmp))%p;\n\t\tif (flag) return 0;\n\t}\n\tif (u==n&&know==0) sum=1;\n\twd[u][know]=0;\n\treturn f[u][know]=sum;\n}\nint main()\n{\n\tT=read();\n\twhile (T--)\n\t{\n\tinit();\t\n\tscanf(\"%d%d%d%d\",&n,&m,&k,&p);\n\tfo(i,1,m) \n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t\taddr(y,x,z);\n\t }\n\tspfa();\n\tint ans=0; \n\tfo(i,0,k) \n\t{\n\tmemset(wd,0,sizeof(wd));\n\tans=(ans+dfs(1,i))%p;\n}\n\tif (flag) puts(\"-1\");else printf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n\u9700\u8981\u6ce8\u610f\u7684\u6709\u51e0\u4e2a\u70b9\uff08\u6211\u81ea\u5df1\u8c03\u8bd5\u4e2d\u51fa\u73b0\u7684\u95ee\u9898\uff09\n1.\u4e00\u5b9a\u52a0\u4e0a\u5feb\u8bfb\u3002\u3002\u83ab\u540d\u5feb\u8bfb\u6bd4scanf\u5feb\u4e865s\uff0c\u6000\u7591\u6d1b\u8c37\u8bc4\u6d4b\u673a\u51fa\u4e86\u95ee\u9898\n2.memset\u4e0d\u8981\u7528for\u5faa\u73af\u4ee3\u66ff\uff08\u6211\u770b\u5230\u8ba8\u8bba\u91cc\u6709\u4eba\u8bf4\u7528for\u5faa\u73af\uff0c\u6211\u7528\u4e86\u4e4b\u540e\u4ece\u4e24\u4e2aRE\u53d8\u6210\u4e86\u4e09\u4e2aTLE\uff09\n3.\u8bb0\u5f97\u6bcf\u6b21\u90fd\u8981\u521d\u59cb\u5316\n\n\u90a3\u4e48\u5c31\u662f\u8fd9\u6837\u4e86\uff08\u7701\u9009\u524d\u4ea4\u7bc7\u9898\u89e3\u819c\u4e00\u4e0b\uff09",
        "postTime": 1524210288,
        "uid": 63019,
        "name": "\u661f\u661f\u4e4b\u706b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "## \u6700\u77ed\u8def+\u8bb0\u5fc6\u5316\u641c\u7d22\n\n### \u6700\u77ed\u8def\uff1a\n\n\u6bcf\u4e00\u7ec4\u6570\u636e\u7684\u8fb9\u6570=\u70b9\u6570*2\uff0c\u8fd9\u662f\u4e00\u4e2a\u7a00\u758f\u56fe\n\n\u76f4\u63a5\u4e0aspfa\n\n#### \u95ee\u90a3\u4e9b\u8bf4\u4f1a\u5361spfa\u7684\u4eba\u4e24\u4e2a\u95ee\u9898\uff1a\n\n1.NOIP\u6709\u5361\u8fc7spfa\u5417\uff1f\uff08\u5f52\u7a0b\u662fNOI2018\uff09\n\n2.\u6570\u636e\u8303\u56f4\u662f\u660e\u663e\u7684\u7a00\u758f\u56fe\uff0c\u51fa\u9898\u4eba\u7684\u6f5c\u53f0\u8bcd\u662f\u4ec0\u4e48\uff1f\n\n### \u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u6211\u4eec\u7528dfs(x,l)\u8868\u793a\u5f53\u524d\u9012\u5f52\u5230x\u4e2a\u70b9\uff0c\u73b0\u5728\u8fd8\u6709l\u8ddd\u79bb\n\n\u8f6c\u79fb\u65b9\u5f0f\uff1adfs(x,l)=dfs(y,d[x]+l-d[y]-z)\n\n\u6211\u7528\u4e86\u52a8\u6001\u6570\u7ec4+\u7ed3\u6784\u4f53\u5b58\u8fb9\uff0c\u8981\u5b58\u4e24\u6b21\u5355\u5411\u8fb9 (\u8fd9\u53e5\u8bdd\u81ea\u5df1\u7406\u89e3\u4e00\u4e0b\uff0c\u4e0d\u662f\u5b58\u4e00\u6b21\u53cc\u5411\u8fb9\uff09\n\n\u5982\u679c\u68c0\u6d4b\u52300\u73af\uff0c\u5c31\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56de\u65b9\u5f0f\u6570\n\n### \u522b\u7684\n\n1.\u6bcf\u6b65\u90fd\u8981\u53d6\u4f59\u8fd9\u79cd\u5e38\u8bc6\u6027\u7684\u6211\u5c31\u4e0d\u8bb2\u4e86\n\n# 2.\u591a\u7ec4\u6570\u636e\u8981\u521d\u59cb\u5316\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nll t,d[100001],f[100001][51],n,m,k,p;\nbool working[100001][51];\nstruct node{\n\tll to,edge;\n    //to\u8868\u793a\u4e0b\u4e00\u4e2a\u70b9\n    //edge\u8868\u793a\u957f\u5ea6\n};\nvector<node> head[100001],h[100001];\n//head\u5b58\u6b63\u5411\u8fb9\n//h\u5b58\u53cd\u5411\u8fb9\n\nll dfs(ll x,ll l){\n\tll ans=0;\n\tif(l<0||l>k) return 0;//\u8d85\u51fa\u8303\u56f4\u8fd8\u6ca1\u8d70\u5230\u5c31\u8fd4\u56de\n\tif(working[x][l]){//\u627e\u52300\u73af\n\t\tworking[x][l]=false;\n\t\treturn -1;\n\t}\n\tif(f[x][l]!=-1) return f[x][l];//\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u8d70\u8fc7\u4e86\n\tworking[x][l]=true;\n\tfor(ll i=0; i<h[x].size(); i++){\n\t\tll y=h[x][i].to,z=h[x][i].edge,val=dfs(y,d[x]+l-d[y]-z);\n        //y\u8868\u793a\u4e0b\u4e00\u4e2a\u683c\u5b50\n        //z\u8868\u793a\u5269\u4e0b\u7684\u8ddd\u79bb\n\t\tif(val==-1){//\u627e\u52300\u73af\n\t\t\tworking[x][l]=false;\n\t\t\treturn -1;\n\t\t}\n\t\tans=(ans+val)%p;\n\t}\n\tworking[x][l]=false;//\u53bb\u8fc7\u4e86\n\tif(x==1&&l==0) ans++;//\u627e\u5230\uff0c\u5e76\u4e14\u8ddd\u79bb\u7528\u5b8c\n\tf[x][l]=ans;//\u5b58\u4e0b\u7ed3\u679c\n\treturn ans;\n}\n\ninline void spfa(){//\u6700\u77ed\u8def\uff0c\u4e0d\u8bb2\u4e86\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(f,-1,sizeof(f));\n\tqueue<ll> q;\n\tq.push(1);\n\td[1]=0;\n\twhile(!q.empty()){\n\t\tll x=q.front(); q.pop();\n\t\tfor(ll i=0; i<head[x].size(); i++){\n\t\t\tll y=head[x][i].to,z=head[x][i].edge;\n\t\t\tif(d[y]>d[x]+z){\n\t\t\t\td[y]=d[x]+z;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n}\n\nll work(){\n\tscanf(\"%lld%lld%lld%lld\",&n,&m,&k,&p);\n\tfor(ll i=1; i<=n; i++){\n\t\thead[i].clear(); h[i].clear();\n\t}\n\t\n    while(m--){\n    \tll x,y,z;\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        head[x].push_back(node{y,z});//\u5b58\u6b63\u8fb9\n        h[y].push_back(node{x,z});//\u5b58\u53cd\u8fb9\n    }\n\tspfa();\n\tll ans=0;\n\tfor(ll i=0; i<=k; i++){\n\t\tll val=dfs(n,i);//\u8c03\u7528\n\t\tif(val==-1) return -1;//\u627e\u52300\u73af\u76f4\u63a5\u9000\u51fa\n\t\tans=(ans+val)%p;//\u7ed3\u679c\u589e\u52a0\n\t}\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%lld\",&t);\n\twhile(t--) printf(\"%lld\\n\",work());\n\treturn 0;\n}\n```",
        "postTime": 1541237800,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u505a\u5b8c\u8fd9\u9898\u540e\u6211\u770b\u4e86\u5927\u90e8\u5206\u9898\u89e3\uff08~~\u6211\u592a\u5f31\u4e86,\u4ea4\u4e8615\u6b21\u624d\u8fc7~~\uff09\uff0c\u53d1\u73b0\u5927\u591a\u6570\u9898\u89e3\u90fd\u88ab\u65b0\u6570\u636ehack\u6389\u4e86\uff0c\u6309\u65f6\u95f4\u6392\u5e8f\u540e\u53d1\u73b0\u524d\u51e0\u4f4d\u5927\u4f6c\u7684\u505a\u6cd5\u90fd\u5341\u5206\u4f18\u8d8a\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u662f\u50cf\u6211\u4e00\u6837\u8dd1\u4e00\u6b21\u6700\u77ed\u8def+\u6ca1\u6709\u526a\u679d\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u8dd1\u8fc7\u7684\uff0c\u5c31\u60f3\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u8fd9\u9898\u7684\u90e8\u5206\u5206\u5e26\u6709\u5341\u8db3\u7684\u5f15\u5bfc\u6027,\u4f46\u524d\u9762\u7684\u90e8\u5206\u5206\u4ee5\u524d\u7684\u9898\u89e3\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6240\u6709\u6211\u4eec\u5c31\u76f4\u63a5\u4ece\u6ca1\u6709\u96f6\u8fb9\u7684\u60c5\u51b5\u5f00\u59cb\uff08\u4e5f\u5c31\u662f 70pts \uff09\u3002\n\n### \u53d1\u73b0 k \u6700\u5927\u624d50\uff01\n\n\u770b\u5230 k \u6bd4\u8f83\u5c0f\uff0c\u5c31\u7528 k \u4f5c\u4e3a\u52a8\u89c4\u7684\u4e00\u7ef4\uff0c\u518d\u8003\u8651\u53e6\u4e00\u7ef4\uff0c\u53ef\u4ee5\u9009\u62e9\u70b9\u6216\u8fb9\u2014\u2014\u679c\u65ad\u9009 A \uff08\u4ece\u6765\u6ca1\u6709\u7528\u8fb9\u8f6c\u79fb\u8fc7\uff0c\u4e5f\u53ef\u80fd\u662f\u6211\u6ca1\u60f3\u5230\uff09\u3002\n\n### \u600e\u4e48 dp \uff1f\n\n\u60f3\u8fd9\u5e94\u8be5\u662f\u60f3\u597d dp \u7684\u7ef4\u5ea6\u540e\u5e94\u6700\u4f18\u5148\u8003\u8651\u7684\u95ee\u9898\uff0c\u5148\u4ed4\u7ec6\u8bfb\u9898\uff0c\u6211\u4eec\u6c42\u8def\u7a0b\u7684\u603b\u957f\u5ea6\u8981\u6ee1\u8db3\u6761\u4ef6  \n $d\\leq l \\leq d+k$ \uff08 $l$ \u4e3a\u8def\u7a0b\u603b\u957f\u5ea6\uff0c $d$ \u4e3a\u6700\u77ed\u8def\u957f\u5ea6 \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a $l=d,d+1,d+2...,d+k$ \u7684\u60c5\u51b5\u90fd\u7b97\u51fa\u6765\u3002\n \n \u9996\u5148\u5148\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5fc5\u4e0d\u53ef\u5c11\uff08~~\u8fd9\u662f\u5e9f\u8bdd~~\uff0c\u5efa\u8bae\u4f7f\u7528 Dijkstra+\u5806\u4f18\u5316\uff0cSPFA \u5bb9\u6613\u88ab\u5361\uff09,\u518d\u5bf9\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u8f6c\u79fb\u3002\n \n\u8bbe $dis[i]$ \u8868\u793a\u4ece $1$ \u5230 $i$ \u7684\u6700\u77ed\u8def\uff0c$dp[i][j]$ \u4e3a\u6bd4 $dis[i]$ \u6b63\u597d\u591a $j$ \u4e3a\u957f\u5ea6\u7684\u65b9\u6848\u603b\u6570\uff08\u524d\u9762\u90fd\u5206\u6790\u8fc7\u4e86\uff09\u3002\n\n\u518d\u8003\u8651\u65b9\u7a0b\uff08\u52a8\u89c4\u771f\u4e0d\u7528\u80cc\u65b9\u7a0b\uff09\u3002\n\n\u5047\u8bbe\u6709\u4e00\u6761\u4ece $p$ \u5230 $now$ \u957f\u5ea6\u4e3a $w$ \u7684\u4e00\u6761\u8fb9\n\n\u76ee\u6807\uff1a\u5c06 $dp[p][x]$ \u8f6c\u79fb\u5230 $dp[now][k]$  ( $k$ \u4e3a\u6bd4\u6700\u77ed\u8def\u591a\u51fa\u7684\u957f\u5ea6)\n\n\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709 $x$ \u662f\u4e0d\u77e5\u9053\u7684\u91cf\u3002\n\n\u53ef\u4ee5\u5f97\u51fa $x-k=dis[now]-dis[p]-w$\n\n\u518d\u5c06 $k$ \u79fb\u8fc7\u53bb\n\n$x=dis[now]-dis[p]+k-b[p]$\n\n\u8f6c\u79fb\u6761\u4ef6\u5177\u5907\uff0c\u76ee\u6807\u8fbe\u6210\n\n~~JOJO,\u8fd9\u662f\u6211\u6700\u540e\u7684\u65b9\u7a0b\u4e86~~:\n\n$ dp[now][k]=(dp[now][k]+dp[p][x]) \\, mod \\, p $\n\n\uff08\u6700\u540e\u4e0d\u8981\u5fd8\u4e86 $mod \\, p$ \u54e6\uff09\n\n\u5b9e\u9645\u505a\u7684\u65f6\u5019\u6211\u4eec\u679a\u4e3e $k$ \u8fdb\u884c\u641c\u7d22\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u65f6\u95f4\uff0c\u6211\u4eec\u8fd8\u8981\u52a0\u4e0a\u8bb0\u5fc6\u5316\uff08~~\u53c8\u662f\u5e9f\u8bdd~~\uff09\u3002\n\n### \u91cd\u70b9\n\n\u6211\u4eec\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u548c\u6c42\u6700\u77ed\u8def\u65f6\u53ef\u4ee5\u53ea\u5efa\u7acb\u5355\u5411\u8fb9\uff0c\u6bd5\u7adf\u90fd\u4e0d\u4f1a\u518d\u5f80\u56de\u8dd1\uff0c\u7136\u540e\u5c31\u662f\u522b\u7528\u540c\u4e00\u5f20\u56fe\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u65f6\u8981\u53cd\u5411\u5efa\u8fb9\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u4fdd\u8bc1 $dp$ \u7684\u6b63\u786e\u6027\uff08\u4e0d\u4f1a\u8bc1\u660e\uff0c\u671b\u5927\u4f6c\u8865\u5145\uff09\u3002\n\n\u770b\u5230\u8fd9\u91cc\u53ef\u4ee5\u5148\u53bb\u5c1d\u8bd5\u5b9e\u73b0\u4ee5\u4e00\u4e0b\uff08~~\u6211\u77e5\u9053\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684~~\uff09\u3002\n\n\u6700\u540e\u8003\u8651\u6709\u96f6\u8fb9\uff0c\u4e5f\u5c31\u662f\u65e0\u9650\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u5c31\u662f\u8003\u8651\u6709\u6ca1\u6709\u96f6\u8fb9\u6240\u6784\u6210\u7684\u73af\uff08\u6ca1\u6709\u96f6\u73af\u5c31\u4e00\u5b9a\u662f\u6709\u9650\u7684\uff09\uff0c\u5224\u65ad\u65b9\u6cd5\u5f02\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u50cf SPFA dfs \u5224\u8d1f\u73af\u4e00\u6837\uff0c\u7528\u4e00\u4e2a $vis$ \u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\uff0c\u73b0\u5728\u7684\u72b6\u6001\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u8fd9\u662f\u5c31\u53ef\u4ee5\u8f93\u51fa $-1$ \u4e86\u3002\n\n\u4ee5\u4e0a\u5c31\u662f\u8fd9\u9898\u7684\u89e3\u6cd5\uff0c\u5176\u4ed6\u5927\u4f6c\u6709 tarjan,topu,dfs+ \u526a\u679d...\u4f46\u53ea\u6709\u6211\u7684\u65b9\u6cd5\u53ea\u7528\u4e86\u4e00\u6b21\u6700\u77ed\u8def+\u65e0\u526a\u679d\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u8fc7\u4e86\u7684\uff08\u8ba9\u6211\u5c0f\u9a84\u50b2\u4e00\u4e0b\uff09\uff0c\u4f46\u65f6\u95f4\u666e\u904d\u6bd4\u5176\u4ed6\u65b9\u6cd5\u6162 100-300ms \u6240\u4ee5\u5efa\u8bae\u8fd8\u662f\u591a\u770b\u51e0\u7bc7\u9898\u89e3\uff08\u771f\u662f\u9053\u597d\u9898\uff09\n\n\u6700\u540e\u9644\u4e0a AC \u8bb0\u5f55\u548c\u4ee3\u7801 \t\t\n\n[AC\u4e86\u54e6](https://www.luogu.com.cn/record/36668896)\n\n$Code$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500005;\nconst int maxk=55;\ninline int read(){\n\tint x=0; char ch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\nint n,p;\nint a[maxn],b[maxn],nxt[maxn],head[maxn],cnt;\nint A[maxn],B[maxn],NXT[maxn],HEAD[maxn],CNT;\nbool flag; \t\nint dp[maxn][maxk];\ninline void addline(int x,int y,int z){\n\ta[++cnt]=y,b[cnt]=z,nxt[cnt]=head[x],head[x]=cnt;\n}\ninline void ADDLINE(int x,int y,int z){\n\tA[++CNT]=y,B[CNT]=z,NXT[CNT]=HEAD[x],HEAD[x]=CNT;\n}\nint dis[maxn];\nstruct nn{\n    int d,id;\n    bool operator < ( const nn &A ) const{ return d>A.d; };\n};\npriority_queue<nn> pq;\ninline void dijkstra(int s){\n        for(register int i=1;i<=n;++i) dis[i]=0x3f3f3f3f;\n        dis[s]=0; pq.push((nn){0,s});\n        while(!pq.empty()){\n            nn now=pq.top(); pq.pop();\n            int val=now.d,u=now.id;\n            if(dis[u]<val) continue;\n            for(register int p=head[u]; p ;p=nxt[p]){\n                int v=a[p];\n                    if(dis[v]>dis[u]+b[p]){\n                        dis[v]=dis[u]+b[p];\n                        pq.push((nn){dis[v],v});\n                    }\n            }\n        }\n}\nbool vis[maxn][maxk];\nint dfs(int now,int k){\n//    cout<<now<<\" \"<<k<<endl;\n\tif(~dp[now][k]) return dp[now][k];\n\tdp[now][k]=0,vis[now][k]=1;\n\tfor(register int i=HEAD[now]; i ;i=NXT[i]){\n\t\tint v=A[i];\n\t\tint x=dis[now]-dis[v]+k-B[i];\n\t\tif(x<0) continue;\n\t\tif(vis[v][x]) flag=1;\n\t\tdp[now][k]=(dp[now][k]+dfs(v,x))%p;\n\t}\n\tvis[now][k]=0;\n\treturn dp[now][k];\n}\n/*\n\tdp[p][x]->dp[now][k]\n\tx=dis[now]-dis[p]+k-b[p]\n*/ \nint m,k;\nint main(){\n\tint T=read();\n\twhile(T--){\n\t\tn=read(),m=read(),k=read(),p=read();\n\t\tcnt=CNT=flag=0;\n\t\tmemset(head,0,sizeof head);\n\t\tmemset(HEAD,0,sizeof HEAD);\n        memset(dp,-1,sizeof dp);\n\t\tfor(register int i=1;i<=m;++i){\n\t\t\tint u=read(),v=read(),w=read();\n\t\t\taddline(u,v,w),ADDLINE(v,u,w);\n\t\t}\n\t\tdijkstra(1);\n\t\tfor(register int i=0;i<=k;++i) dfs(n,i);\n\t\tif(flag) { printf(\"-1\\n\"); continue; }\n\t\tint ans=0;\n        memset(dp,-1,sizeof dp); dp[1][0]=1;\n\t\tfor(register int i=0;i<=k;++i){\n\t\t\tans=(ans+dfs(n,i))%p;\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596964836,
        "uid": 122720,
        "name": "W_Y_Z",
        "ccfLevel": 0,
        "title": "P3953\u9898\u89e3 \u8bb0\u5fc6\u5316\u641c\u7d22"
    },
    {
        "content": "\u4e00\u9053\u770b\u4f3c\u56fe\u8bba\u5b9e\u5219\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7684\u9898\u76ee\u3002\n\n\u6734\u7d20\u7684\u72b6\u6001\u5b9a\u4e49\uff1a$f[u][k]$\u8868\u793a\u4ece$1$\u53f7\u8282\u70b9\u8d70\u5230$u$\u53f7\u8282\u70b9\uff0c\u8def\u5f84\u957f\u5ea6\u4e3a$k$\u7684\u65b9\u6848\u603b\u6570\u3002\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$\nf[u][k]=\\sum_{(u,v)\\in E}f[v][k-w(u,v)]\n$$\n\u4f46\u662f\u8fd9\u6837\u7684\u72b6\u6001\u5b9a\u4e49\u6709\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u7a7a\u95f4\u6d88\u8017\u8fc7\u5927\u3002\u8003\u8651\u5230\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684$K$\u503c\u5e76\u4e0d\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u9898\u76ee\u6240\u8981\u6c42\u7684\u4fe1\u606f\u6765\u4f18\u5316\u72b6\u6001\u8bbe\u8ba1\u3002\n\n\u4f18\u5316\u540e\u7684\u72b6\u6001\u5b9a\u4e49\uff1a$d[u]$\u8868\u793a\u4ece$1$\u53f7\u8282\u70b9\u8d70\u5230$u$\u53f7\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c$f[u][k]$\u8868\u793a\u4ece$1$\u53f7\u8282\u70b9\u8d70\u5230$u$\u53f7\u8282\u70b9\uff0c**\u8def\u5f84\u957f\u5ea6\u4e3a$d[u]+k$\u7684\u65b9\u6848\u603b\u6570**\u3002\n\n\u5982\u6b64\u4e00\u6765\uff0c\u72b6\u6001\u6240\u9700\u7684\u7a7a\u95f4\u5927\u5927\u51cf\u5c11\uff0c\u4f46\u76f8\u5e94\u7684\u72b6\u6001\u8f6c\u79fb\u7565\u663e\u590d\u6742\u3002\u4e0d\u59a8\u8bbe$f[u][k]$\u72b6\u6001\u53ef\u4ee5\u7531$f[v][x]$\u8f6c\u79fb\u5f97\u5230\uff0c\u5219\uff1a\n$$\nd[v]+x+w(u,v)=d[u]+k\n$$\n\u79fb\u9879\uff0c\u5f97\u5230\uff1a\n$$\nx=d[u]-d[v]+k-w(u,v)\n$$\n\u56e0\u6b64\uff0c\u5b8c\u6574\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$\nf[u][k]=\\sum_{(u,v)\\in E}f[v][d[u]-d[v]+k-w(u,v)]\n$$\n\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u7b54\u6848\u5373\u4e3a$\\sum_{i=0}^Kf[N][i]$\uff0c\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5b9e\u73b0\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 100001;\n\nstruct Edge {int v, w;};\nvector<Edge> G1[MAXN], G2[MAXN];\n\nint T, N, M, K, P;\nbool fail;\nint f[MAXN][51];\nint d[MAXN];\nbool vis[MAXN];\nbool ins[MAXN][51];\n\nvoid Dijkstra() {\n    memset(vis, 0, sizeof(vis));\n    memset(d, 0x3f, sizeof(d));\n    priority_queue<pair<int, int> > q;\n    q.push(make_pair(0, 1));\n    d[1] = 0;\n    while (q.size()) {\n        int u = q.top().second;\n        q.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (vector<Edge>::iterator it = G1[u].begin(); it != G1[u].end(); it++) {\n            int v = it->v, w = it->w;\n            if (d[u] + w < d[v]) {\n                d[v] = d[u] + w;\n                q.push(make_pair(-d[v], v));\n            }\n        }\n    }\n}\n\ninline int dp(int u, int k) {\n    if (k < 0) return 0;\n    if (ins[u][k]){\n        fail = 1;\n        return 0;\n    }\n    if (f[u][k]) return f[u][k];\n    ins[u][k] = 1;\n    int ans = 0;\n    for (vector<Edge>::iterator it = G2[u].begin(); it != G2[u].end(); it++) {\n        int p = it->v, w = it->w;\n        ans = (ans + dp(p, d[u] - d[p] + k - w))%P;\n        if (fail == 1) return 0;\n    }\n    ins[u][k] = 0;\n    return f[u][k] = ans;\n}\n\nint main() {\n    scanf(\"%d\", &T);\n    while (T--) {\n        scanf(\"%d%d%d%d\", &N, &M, &K, &P);\n        for (register int i = 1; i <= M; ++i) {\n            int u, v, w;\n            scanf(\"%d%d%d\", &u, &v, &w);\n            G1[u].push_back((Edge){v, w});\n            G2[v].push_back((Edge){u, w});\n        }\n        Dijkstra();\n        dp(1, 0);\n        f[1][0] = 1;\n        int ans = 0;\n        for (register int i = 0; i <= K; ++i) {\n            ans = (ans + dp(N, i))%P;\n        }\n        if(fail == 1) puts(\"-1\");\n        else printf(\"%d\\n\", ans);\n        fail = 0;\n        memset(f, 0, sizeof(f));\n        memset(ins, 0, sizeof(ins));\n        for (register int i = 1; i <= N; ++i) {\n            G1[i].clear(), G2[i].clear();\n        }\n    }\n}\n```\n",
        "postTime": 1560960158,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\uff08Dijksra\uff09+\u62d3\u6251\u6392\u5e8f+DP\n\n\u672c\u9898\u7684\u4e00\u5927\u5904\u7406\u96be\u70b9\u5c31\u662f0\u73af\uff0c\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u5e76\u975e\u6240\u6709\u76840\u73af\u90fd\u4f1a\u9020\u6210\u51fa\u73b0\u65e0\u6570\u6761\u53ef\u884c\u8def\u5f84\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5c06\u6240\u6709\u53ef\u884c\u76840\u8fb9\u5355\u72ec\u53d6\u51fa\u6765\u5224\u65ad\u3002\u5224\u65ad\u662f\u5426\u53ef\u884c\u7684\u65b9\u6cd5\u4e3a\u5982\u679c\u67d0\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u5230\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u8ddd\u79bb\u52a0\u4e0a\u6b64\u6761\u8fb9\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bf4\u660e\u901a\u8fc7\u8be5\u6761\u8def\u5f84\u5b58\u5728\u7b54\u6848\uff0c\u5e76\u5224\u65ad\u5176\u662f\u5426\u5728\u4ee51\u4e3a\u6e90\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u5c06\u5176\u52a0\u5165\u5230\u65b0\u56fe\uff08\u5373\u6700\u77ed\u8def\u8fb9\u96c6\uff09\u4e2d\u53bb\u3002\u7531\u4e8e\u4fdd\u8bc1\u8fb9\u6743\u503c\u975e\u8d1f\uff0c\u56e0\u6b64\u6240\u6709\u53ef\u884c\u76840\u8fb9\u5fc5\u7136\u90fd\u5728\u65b0\u56fe\u7684\u8fb9\u96c6\u4e2d\u3002\u5bf9\u65b0\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u82e5\u53d1\u73b0\u6392\u5e8f\u540e\u4ecd\u5b58\u5728\u5165\u5ea6\u4e0d\u4e3a0\u7684\u70b9\uff0c\u5219\u8bf4\u660e\u5b58\u57280\u73af\uff08\u975e0\u73af\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u4f1a\u88ab\u52a0\u5165\u65b0\u56fe\uff09\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662fDP\u3002\u8fd9\u91cc\u7684DP\u65b9\u6cd5\u6bd4\u8f83~~\u7384\u5b66~~\u3002\u60f3\u8c61\u4e00\u4e2a\uff08k+1)\u5c42\u7684\u56fe\uff0c\u6bcf\u4e00\u5c42\u56fe\u90fd\u4ee3\u8868\u4e0d\u540c\u589e\u91cf\u7684\u65b9\u6848\u6570\uff0c\u6bcf\u5c42\u56fe\u90fd\u7531\u6700\u77ed\u8def\u76f8\u8fde\uff08\u4fdd\u8bc1\u4e0d\u4f1a\u4f7f\u589e\u91cf\u589e\u52a0\uff09\uff0c\u800c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u5219\u6709\u975e\u6700\u77ed\u8def\u7684\u8fb9\u8054\u901a\u3002\u663e\u7136\u628a\u8fd9\u6837\u4e00\u5f20\u56fe\u6784\u9020\u51fa\u6765\u6bd4\u8f83\u9ebb\u70e6\u4e14\u65f6\u95f4\u957f\uff0c\u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u5c42\u56fe\uff0c\u9996\u5148\u6309\u7167\u62d3\u6251\u5e8f\u5bf9\u8be5\u5c42\u56fe\u7684\u65b9\u6848\u6570\u8fdb\u884c\u7d2f\u52a0\uff08\u9632\u6b62\u9057\u6f0f\uff09\uff0c\u518d\u6309\u7167\u589e\u91cf\u5927\u4e8e0\u7684\u8fb9\u63a8\u51fa\u4e0b\u9762\u5c42\u7684\u65b9\u6848\u6570\uff08\u56e0\u4e3a\u8fb9\u6743\u975e\u8d1f\uff0c\u6240\u4ee5\u589e\u91cf\u4e0d\u4f1a\u51cf\u5c11\uff09\uff0c\u6700\u540e\u7edf\u8ba1\u589e\u91cf\u4e3a0~k\u7684\u7b2cn\u4e2a\u70b9\u7684\u65b9\u6848\u6570\u4e4b\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n~~\u66f4\u591a\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801~~\n```cpp\n#include <stdio.h>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <vector>\n#include <map>\nusing namespace std;\nstruct node {\n    int next, to, dis;\n};//\u94fe\u5f0f\u524d\u5411\u661f \nconst int maxn=110000, maxm=220000, maxd=1000000000;\nnode sq[maxm];\nstruct heapnode {\n    int u, d;\n    bool operator < (const heapnode& a) const {\n        return d>a.d;\n    }\n};\npriority_queue <heapnode> q;\nint n, m, k, p, tuopu[maxn], a[maxm], b[maxm], w[maxm], st[maxn], sumin[maxn], dp[maxn][70], f[maxn], g[maxn], head[maxn], cnt=0;\n\nvoid clearedge(int n) {\n     cnt=0;\n     for (int i=1; i<=n; i++) head[i]=0;\n}\n\nvoid addedge(int u, int v, int w) {\n     sq[++cnt].next=head[u];//\u6307\u5411\u4ee5u\u8282\u70b9\u4e3a\u51fa\u53d1\u70b9\u7684\u524d\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\n     sq[cnt].to=v; sq[cnt].dis=w;\n     head[u]=cnt;\n}\n     \nvoid dijkstra(int st, int *dist) {\n     for (int i=1; i<=n; i++) dist[i]=maxd;\n     dist[st]=0; \n     q.push((heapnode){st, 0});\n     while (!q.empty()) {\n           heapnode h=q.top(); q.pop();\n           int now=h.u, cost=h.d;\n           if (dist[now]!=cost) continue;\n           for (int i=head[now]; i; i=sq[i].next) {\n               node e=sq[i];\n               if (dist[now]+e.dis<dist[e.to]) {\n                  dist[e.to]=dist[now]+e.dis;\n                  q.push((heapnode){e.to, dist[e.to]});\n               }\n           }\n     }\n}\n\nvoid tpsort() {//\u6309\u7167\u91cd\u65b0\u6784\u5efa\u7684\u6700\u77ed\u8def\u8fb9\u96c6\u8fdb\u884c\u62d3\u6251\u6392\u5e8f \n     int top=1; st[top]=1; \n     int pos=0;\n     while (top>0) {\n           int now=st[top]; top--;\n           tuopu[++pos]=now;\n           for (int i=head[now]; i; i=sq[i].next) {\n               sumin[sq[i].to]--;\n               if (sumin[sq[i].to]==0) {top++; st[top]=sq[i].to;}\n           }\n     }\n}\n \nint main() {\n    //freopen(\"park10.in\", \"r\", stdin);\n    int t; scanf(\"%d\", &t);\n    while (t--) {\n          scanf(\"%d%d%d%d\", &n, &m, &k, &p);\n          clearedge(n);\n          for (int i=1; i<=m; i++) {\n              scanf(\"%d%d%d\", &a[i], &b[i], &w[i]);\n              addedge(a[i], b[i], w[i]);\n          }\n          dijkstra(1, f);\n          clearedge(n); for (int i=1; i<=m; i++) addedge(b[i], a[i], w[i]);\n          dijkstra(n, g);\n          memset(sumin, 0, sizeof(sumin));\n          memset(tuopu, 0, sizeof(tuopu));\n          clearedge(n);\n          for (int i=1; i<=m; i++) \n              if (f[a[i]]+g[b[i]]+w[i]<=f[n]+k && f[a[i]]+w[i]==f[b[i]]) {//\u6240\u6709\u6ee1\u8db3\u957f\u5ea6\u4e0d\u8d85\u8fc7\u6700\u77ed\u8def\u957f\u5ea6+k\u7684\u6700\u77ed\u8def\u8fb9\u96c6\uff08\u5728\u8fd9\u4e9b\u8fb9\u4e0a\u8d70\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u8def\u5f84\u8d85\u51fa\u957f\u5ea6\u7684\u589e\u91cf\uff09 \n                 addedge(a[i], b[i], 0);\n                 sumin[b[i]]++;\n              }\n          for (int i=1; i<=m; i++) w[i]=f[a[i]]+w[i]-f[b[i]];//\u91cd\u65b0\u5b9a\u4e49w\u4e3a\u8d70\u8be5\u6761\u8def\u7684\u957f\u5ea6\u589e\u91cf\n          tpsort(); \n          bool flag=true; for (int i=1; i<=n; i++) if (sumin[i]) flag=false;\n          if (!flag) {printf(\"%d\\n\", -1); continue;}\n          //\u5728\u91cd\u65b0\u6784\u5efa\u7684\u8fb9\u96c6\u4e2d\u5305\u542b\u4e86\u6240\u6709\u53ef\u80fd\u76840\u8fb9\uff08\u56e0\u4e3a0\u8fb9\u6700\u77ed\uff09\uff0c\u800c\u8fdb\u884c\u5b8c\u4e00\u8f6e\u62d3\u6251\u6392\u5e8f\u540e\uff0c\u82e5\u8fd8\u6709\u70b9\u7684\u5165\u5ea6\u4e0d\u4e3a0\uff0c\u5219\u8bf4\u660e\u5b58\u57280\u73af\n          //\u51c6\u5907\u8fdb\u884cdp\n          for (int i=1; i<=n; i++) \n              for (int j=0; j<=k; j++)\n                  dp[i][j]=0; //dp[i][j]\u8868\u793a\u7b2ci\u4e2a\u70b9\u589e\u91cf\u4e3aj\u7684\u8def\u5f84\u603b\u6570 \n          dp[1][0]=1;\n          for (int j=0; j<=k; j++) {//\u7531\u4e8e\u8def\u5f84\u589e\u91cf\u662f\u975e\u964d\u7684\uff0c\u56e0\u6b64\u53ef\u7531\u8f83\u77ed\u7684\u8def\u5f84\u589e\u91cf\u5411\u4e0b\u63a8\u51fa\u66f4\u957f\u7684\u8def\u5f84\u589e\u91cf\n              for (int i=1; i<=n; i++) {//\u6309\u7167\u6700\u77ed\u8def\u8fb9\u96c6\u904d\u5386\u65f6\u5e94\u8be5\u6309\u7167\u62d3\u6251\u5e8f\u4ece\u524d\u5f80\u540e\u8ba1\u6570\u9632\u6b62\u9057\u6f0f \n                  int now=tuopu[i];\n                  for (int x=head[now]; x; x=sq[x].next)\n                      dp[sq[x].to][j]=(dp[sq[x].to][j]+dp[now][j])%p;\n              }\n              //\u518d\u904d\u5386\u6240\u6709\u4f1a\u5bfc\u81f4\u589e\u91cf\u589e\u52a0\u7684\u8fb9\uff0c\u7531\u4e8e\u6b64\u65f6\u589e\u91cf\u4e00\u5b9a\u589e\u52a0\uff0c\u5bf9\u4e8e\u672c\u5c42\u7684\u8ba1\u6570\u4e0d\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u6b64\u65e0\u6240\u8c13\u987a\u5e8f\n              for (int i=1; i<=m; i++) if (j+w[i]<=k && w[i]) dp[b[i]][j+w[i]]=(dp[b[i]][j+w[i]]+dp[a[i]][j])%p;\n          }\n          int ans=0;\n          for (int i=0; i<=k; i++) ans=(ans+dp[n][i])%p;\n          printf(\"%d\\n\", ans);\n    }\n    return 0;\n} \n\n```",
        "postTime": 1533532587,
        "uid": 26242,
        "name": "AuSquare",
        "ccfLevel": 0,
        "title": "NOIP2017D1T3\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "### **\u5206\u67901**\n\u4f5c\u4e3a\u4e00\u540d\u6807\u51c6\u7684NOIP\u9000\u5f79\u9009\u624b\uff0c\u679c\u7136\u8fc7\u4e86\u4e00\u5e74\u4e4b\u540e\u4ecd\u7136\u4e0d\u4f1a\u505a\u8fd9\u9053\u9898\u3002\n\n\u9996\u5148\u80af\u5b9a\u5148\u6c42\u6700\u77ed\u8def\uff0c\u4e00\u79cd\u601d\u8def\u662f$f[k][u]$\u8868\u793a\u677e\u5f1b\u4e86$k$\u7684\u6700\u77ed\u8def\u4ece\u8d77\u70b9\u8d70\u5230$u$\u8282\u70b9\u3002\n\n\u5f88\u5bb9\u6613\u5199\u51fa\u65b9\u7a0b\uff1a\n$f[k][u]->f[k+w+dis[u]-dis[v]][v]$\n\u5176\u4e2d$k+w+dis[u]$\u8868\u793a\u7684\u662f\u8fd9\u4e00\u56de\u8d70\u5230$v$\u7684\u6b65\u6570\uff0c\u51cf\u53bb\u539f\u6765\u7684\u6700\u77ed\u8def$dis[v]$\u5c31\u662f\u8d70\u5230$v$\u7684\u677e\u5f1b\u6b65\u6570\u3002\n\u7531\u4e8e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff0c\u6240\u4ee5$w+dis[u]-dis[v]\\ge 0$\u6240\u4ee5\u8fd9\u4e2a$Dp$\u7684\u8f6c\u79fb\u5b9e\u9645\u4e0a\u5f62\u6210\u4e86\u4e00\u5f20\u5206\u5c42\u56fe\u3002\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e$k$\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8f6c\u79fb\u7684\u62d3\u6251\u6709\u5e8f\u3002\n\n\u4f46\u662f\u8981\u6ce8\u610f\u4e00\u79cd$w+dis[u]-dis[v]= 0$\u7684\u60c5\u51b5\u3002\u8fd9\u610f\u5473\u7740$u->v$\u8fd9\u6761\u8fb9\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6240\u6709\u7684\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u90fd\u9700\u8981\u7279\u6b8a\u8003\u8651\u5176\u62d3\u6251\u5e8f\u3002\n\n\u9996\u5148\u5728\u6ca1\u6709$0$\u8fb9\u7684\u60c5\u51b5\uff0c\u6700\u77ed\u8def\u5f84\u8fb9\u4e00\u5b9a\u5f62\u6210\u4e86\u4e00\u5f20$DAG$\uff0c\u52301\u7684\u8ddd\u79bb$dis_1$\u5c31\u662f\u4ed6\u4eec\u7684\u62d3\u6251\u504f\u5e8f\u3002\u6309\u7167$dis_1$\u6392\u5e8f\u5373\u53ef\u8f6c\u79fb\u3002\n\n\u8003\u8651$0$\u8fb9\u7684\u60c5\u51b5\u3002\u5982\u679c\u6709$0$\u73af\uff0c\u5224\u65ad\u73af\u4e2d\u7684\u8282\u70b9\u662f\u4e0d\u662f\u5408\u6cd5\u7684\u3002\u5408\u6cd5\u5b9a\u4e49\u4e3a$dis_1[i]+dis_n[i]\\ge dis_1[n]+K$\uff0c\u5982\u679c\u8fd9\u6837\u7684\u8bdd\uff0c\u65b9\u6848\u6570\u4e00\u5b9a\u65e0\u7a77\uff0c\u8f93\u51fa-1\u5373\u53ef\u3002\u5426\u5219\u7684\u8bdd\uff0c\u8fd9\u4e2a$0$\u73af\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u5728\u6211\u4eec\u65b9\u7a0b\u7684\u8f6c\u79fb\u4e2d\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4ed6\u4eec\u3002\n\u8fd9\u4e2a\u65f6\u5019\u5269\u4e0b\u7684\u56fe\u4e00\u5b9a\u4ecd\u7136\u662f\u4e00\u5f20$DAG$\u3002\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e0d\u80fd\u4ec5\u4ec5\u6309\u7167$dis_1$\u6392\u5e8f\uff0c\u8003\u8651$dis_1$\u76f8\u540c\u7684\u8282\u70b9\uff0c\u8fd8\u9700\u8981\u8003\u8651$0$\u8fb9\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709$0$\u8fb9\u505a\u4e00\u904d\u62d3\u6251\u6392\u5e8f\uff0c\u4ee5$dis_1$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$0$\u8fb9\u62d3\u6251\u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u91cd\u65b0\u6392\u5e8f\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6$O(KM)$\n### **\u4ee3\u78011**\n```cpp\n#include<bits/stdc++.h>\nconst int N = 1e5 + 10, M = 2e5 + 10, Nt = 131072, inf = 0x3f3f3f3f;\nint ri() {\n\tchar c = getchar(); int x = 0, f = 1; for(;c < '0' || c > '9'; c = getchar()) if(c == '-') f = -1;\n\tfor(;c >= '0' && c <= '9'; c = getchar()) x = (x << 1) + (x << 3) - '0' + c; return x * f;\n}\nint n, q[N], d[N], rk[N], f[N], g[N], *D, id[N], T[Nt << 1], dp[51][N], K, P;\nstruct Edge {\n\tint nx[M], pr[N], to[M], w[M], tp;\n\tvoid add(int u, int v, int W) {to[++tp] = v; nx[tp] = pr[u]; pr[u] = tp; w[tp] = W;}\n\tvoid adds(int u, int v, int w) {add(u, v, w); add(v, u, w);}\n\tvoid Pre() {for(int i = 1;i <= n; ++i) pr[i] = 0; tp = 0;}\n}G, R;\nint min(int a, int b) {return D[a] < D[b] ? a : b;}\nbool cmp(int a, int b) {return f[a] == f[b] ? rk[a] < rk[b] : f[a] < f[b];}\nvoid Up(int i, int v) {for(T[i += Nt] = v;i >>= 1;) T[i] = min(T[i << 1], T[i << 1 | 1]);}\nvoid Dij(const Edge &G, int st) {\n\tfor(int i = 0;i <= n; ++i) D[i] = inf;\n\tD[st] = 0; Up(st, st);\n\tfor(;D[T[1]] != inf;) {\n\t\tint u = T[1]; Up(u, 0);\n\t\tfor(int i = G.pr[u], v, w; i; i = G.nx[i])\n\t\t\tif(D[v = G.to[i]] > (w = D[u] + G.w[i]))\n\t\t\t\tD[v] = w, Up(v, v);\n\t}\n}\nbool Topsort() {\n\tint L = 1, R = 0;\n\tfor(int i = 1;i <= n; ++i) \n\t\tif(!d[i]) \n\t\t\tq[++R] = i;\n\tfor(int u = q[L];L <= R; u = q[++L])\n\t\tfor(int i = G.pr[u]; i; i = G.nx[i])\n\t\t\tif(!G.w[i] && !--d[G.to[i]]) \n\t\t\t\tq[++R] = G.to[i];\n\tfor(int i = 1;i <= R; ++i) \n\t\trk[q[i]] = i;\n\tfor(int i = 1;i <= n; ++i)\n\t\tif(d[i] && f[i] + g[i] <= f[n] + K)\n\t\t\treturn false;\n\tfor(int i = 1;i <= n; ++i) \n\t\tid[i] = i;\n\tstd::sort(id + 1, id + n + 1, cmp);\n\treturn true;\n}\nvoid Inc(int &a, int b) {a += b; if(a >= P) a -= P;}\nvoid Dp() {\n\tmemset(dp, 0, sizeof(dp));\n\tdp[0][id[1]] = 1;\n\tfor(int k = 0;k <= K; ++k)\n\t\tfor(int x = 1, u = id[1];x <= n; u = id[++x]) \n\t\t\tfor(int i = G.pr[u], w, v; i; i = G.nx[i]) \n\t\t\t\tif((w = f[u] + k + G.w[i] - f[v = G.to[i]]) <= K)\n\t\t\t\t\tInc(dp[w][v], dp[k][u]);\n}\nint main() {\n\tfor(int C = ri();C--;) {\n\t\tn = ri(); int m = ri(); K = ri(), P = ri();\n\t\tG.Pre(); R.Pre();\n\t\tfor(int i = 1;i <= n; ++i) \n\t\t\td[i] = rk[i] = 0;\n\t\tfor(int u, v, w;m--;) \n\t\t\tu = ri(), v = ri(), w = ri(), \n\t\t\tG.add(u, v, w), R.add(v, u, w), d[v] += !w;\n\t\tD = f; Dij(G, 1); \n\t\tD = g; Dij(R, n);\n\t\tif(!Topsort()) {\n\t\t\tputs(\"-1\"); continue;\n\t\t}\n\t\tDp();\n\t\tint r = 0;\n\t\tfor(int i = 0;i <= K; ++i) Inc(r, dp[i][n]);\n\t\tprintf(\"%d\\n\", r);\n\t}\n\treturn 0;\n}\n\n```\n### **\u5206\u67902**\n\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u89e3\u6cd5\u3002\u76f4\u63a5\u4ece\u8d77\u59cb\u8282\u70b9\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\u3002\u521a\u624d\u7684\u7b97\u6cd5\u8bf4\u660e\u4e86\u8fd9\u5f20\u5206\u5c42\u56fe\u4e00\u5b9a\u662f$DAG$\uff0c\u5426\u5219\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u5bf9\u4e8e\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u7528\u4e00\u4e2a$in$\u6570\u7ec4\u7279\u6b8a\u5224\u65ad\u4e00\u4e0b\uff0c\u5269\u4e0b\u7684\u5c31\u53ef\u4ee5\u653e\u5fc3\u641c\u7d22\u4e86\uff0c\u56e0\u4e3a\u8fd9\u548c\u5728$DAG$\u4e0a\u8dd1\u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u4e00\u6837\u7684\u3002\n\n\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\uff0c\u6240\u6709$Dp$\u7684\u8f6c\u79fb\u90fd\u662f\u4f9d\u8d56\u4e8e\u6700\u77ed\u8def\u5f84\u7684\u62d3\u6251\u6709\u5e8f\u6027\u624d\u5f97\u4ee5\u7528$O(KM)$\u7684\u4f18\u79c0\u590d\u6742\u5ea6\u901a\u8fc7\u3002\n### **\u4ee3\u78012**\n```cpp\n#include<bits/stdc++.h>\nconst int Nt = 131071, N = 1e5 + 10, M = 2e5 + 10, inf = 0x3f3f3f3f;\nint ri() {\n    char c = getchar(); int x = 0, f = 1; for(;c < '0' || c > '9'; c = getchar()) if(c == '-') f = -1;\n    for(;c >= '0' && c <= '9'; c = getchar()) x = (x << 1) + (x << 3) - '0' + c; return x * f;\n}\nint D[N], f[N][51], n, K, p; bool vis[N][51];\nstruct Edge {\n    int to[M], nx[M], w[M], pr[N], tp;\n    void add(int u, int v, int W) {to[++tp] = v; nx[tp] = pr[u]; pr[u] = tp; w[tp] = W;}\n    void Clr() {\n        for(int i = 1;i <= n; ++i) pr[i] = 0;\n        tp = 0;\n    }\n}G, R;\nstruct Node {int u, x;}T[Nt << 1];\nNode min(Node a, Node b) {return a.x < b.x ? a : b;}\nvoid Up(int i, int v) {for(T[i += Nt].x = v;i >>= 1;) T[i] = min(T[i << 1], T[i << 1 | 1]);}\nvoid Add(int &a, int b) {a += b; if(a >= p) a -= p;}\nvoid Dij() {\n    Up(n, D[n] = 0);\n    for(;T[1].x != inf;) {\n        int u = T[1].u; Up(u, inf);\n        for(int i = R.pr[u], d; i; i = R.nx[i])\n            if(D[R.to[i]] > (d = D[u] + R.w[i]))\n                Up(R.to[i], D[R.to[i]] = d);\n    }\n}\nint Dfs(int u, int d) {\n    if(d < 0 || d > K) return 0;\n    if(vis[u][d]) return -1;\n    if(~f[u][d]) return f[u][d];\n    vis[u][d] = true;\n    int ways = 0;\n    for(int i = G.pr[u], t; i; i = G.nx[i])\n        if(~(t = Dfs(G.to[i], D[u] + d - G.w[i] - D[G.to[i]])))\n            Add(ways, t);\n        else return -1;\n    vis[u][d] = false;\n    if(u == n && !d) Add(ways, 1);\n    return f[u][d] = ways;\n}\nint Work() {\n    memset(f, -1, sizeof(f));\n    memset(vis, 0, sizeof(vis));\n    n = ri(); int m = ri(); K = ri(); p = ri();\n    for(int i = 1;i <= n; ++i) D[i] = inf; G.Clr(); R.Clr();\n    for(int u, v, w;m--;) u = ri(), v = ri(), w = ri(), G.add(u, v, w), R.add(v, u, w);\n    Dij(); int ways = 0;\n    for(int i = 0;i <= K; ++i) {\n        int t = Dfs(1, i);\n        if(!~t) return -1;\n        Add(ways, t);\n    }\n    return ways;\n}\nint main() {\n    memset(T, 0x3f, sizeof(T));\n    for(int i = 1;i <= 1e5; ++i) T[i + Nt].u = i;\n    for(int Ca = ri();Ca--;) printf(\"%d\\n\", Work());\n    return 0;\n}\n```\n",
        "postTime": 1541644281,
        "uid": 2218,
        "name": "2014\u5415\u6cfd\u9f99",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u8dd1\u5206\u5c42\u56fe\uff0c\u7136\u540e\u62d3\u6251\u8f6c\u79fb\uff0c\u5982\u679c\u540c\u5c42\u6709\u73af\uff0c\u90a3\u4e48\u4e0d\u6ee1\u8db3\u8981\u6c42\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#define pa pair<int ,int >\nusing namespace std;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\twhile (c<'0'||c>'9') {\n\t\tif (c=='-') f=-1;\n\t\tc=getchar();\n\t}\n\twhile (c>='0'&&c<='9'){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\nvoid write(int x){\n\tif (x<0){\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tif (x>9) write(x/10);\n\tputchar(x%10+'0');\n}\ninline void writeln(int x){\n\twrite(x); puts(\"\");\n}\nconst int N=100005,M=200005,KK=55;\nstruct edge{\n\tint link,next,val;\n}e[M],E[M*KK];\nint U[M],V[M],W[M],head[N],tot,n,m,K,P,du[N*KK];\ninline void add_edge(int u,int v,int w){\n\te[++tot]=(edge){v,head[u],w}; head[u]=tot;\n}\nint dis1[N],dis2[N];\nbool vis[N];\npriority_queue<pa, vector<pa >, greater<pa> >heap;\ninline void dijkstra(int S,int dis[]){\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,127/3,sizeof(int)*N);\n\tdis[S]=0; heap.push(make_pair(0,S));\n\twhile (!heap.empty()){\n\t\tint u=heap.top().second; heap.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link;\n\t\t\tif (dis[v]>dis[u]+e[i].val){\n\t\t\t\tdis[v]=dis[u]+e[i].val;\n\t\t\t\theap.push(make_pair(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\ninline void init(){\n\tn=read(); m=read(); K=read(); P=read(); \n\tfor (int i=1;i<=m;i++){\n\t\tU[i]=read(),V[i]=read(),W[i]=read();\n\t\tadd_edge(U[i],V[i],W[i]);\n\t}\n\tdijkstra(1,dis1);\n\tmemset(head,0,sizeof(head)); tot=0;\n\tfor (int i=1;i<=m;i++){\n\t\tadd_edge(V[i],U[i],W[i]);\n\t} \n\tdijkstra(n,dis2);\n}\ninline int get(int x,int y){\n\treturn (x-1)*(K+1)+y+1; \n}\nint dp[N*KK],q[N*KK],he[N*KK];\ninline void add_edge2(int u,int v,int w){\n\tE[++tot]=(edge){v,he[u],w}; he[u]=tot;\n\tdu[v]++;\n}\ninline void solve(){\n\ttot=0;\n\tfor (int i=1;i<=m;i++){\n\t\tint u=get(U[i],0);\n\t\tint v=get(V[i],dis1[U[i]]+W[i]-dis1[V[i]]);\n\t\tfor (int j=dis1[U[i]];j+W[i]+dis2[V[i]]<=dis1[n]+K;j++){\n\t\t\tadd_edge2(u,v,0);\n\t\t\tu++; v++;\n\t\t}\n\t}\n\tint num=(K+1)*n,sum=0,h=0,t=0;\n\tfor (int i=1;i<=num;i++){\n\t\tif (!du[i]){\n\t\t\tq[++t]=i;\n\t\t}\n\t}\n\tdp[1]=1;\n\twhile (h<t){\n\t\tint u=q[++h]; sum++;\n\t\tfor (int i=he[u];i;i=E[i].next){\n\t\t\tint v=E[i].link;\n\t\t\tif (!--du[v]){\n\t\t\t\tq[++t]=v;\n\t\t\t}\n\t\t\tdp[v]+=dp[u]; dp[v]%=P;\n\t\t}\n\t}\n\tint ans=0;\n\tif (sum<num) writeln(-1);\n\t\telse {\n\t\t\tfor (int i=0;i<=K;i++){\n\t\t\t\t(ans+=dp[get(n,i)])%=P;\n\t\t\t}\n\t\t\twriteln(ans);\n\t\t} \n}\ninline void clear(){\n\ttot=0; memset(head,0,sizeof(head));\n\tmemset(he,0,sizeof(he));\n\tmemset(dp,0,sizeof(dp));\n}\nint main(){\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tclear();\n\t\tinit();\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531711031,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u611f\u89c9\u662f\u4e2a\u66b4\u529b0 0\n\n\n\u8003\u8651\u5982\u679c\u4e0d\u5b58\u57280\u73af\u600e\u4e48\u505a\u3002\n\n\n\u7a0d\u5fae\u601d\u8003\u4e00\u4e0b\u53ef\u4ee5\u60f3\u51fa\u72b6\u6001\u3002\n\n\n\u8bbef[x][vib]\u4e3a\u5230x\u70b9\u65f6\u4e0e\u4ece\u8d77\u70b9\u5f00\u59cb\u7684\u6700\u77ed\u8def\u7684\u504f\u79fb\u91cf\u4e3avib\u7684\u65f6\u5019\u7684\u603b\u65b9\u6848\u6570\u76ee\u3002\n\n\n\u600e\u4e48\u8f6c\u79fb\uff1fspfa\uff1f\u4e0d\u884c\uff0c\u56e0\u4e3a\u5b83\u8981\u63a8\u5165\u961f\u5217\u7684\u662f\u62c6\u70b9\u540e\u7684f'[x][vib]\u4e0ef[x][vib]\u7684\u5dee\uff0c\u5373\u5b83\u589e\u52a0\u4e86\u591a\u5c11\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u9000\u5316\u6210\u4e86\u66b4\u529b\u4e86\u3002\n\n\n\u62d3\u6251\u6392\u5e8f\u3002\n\n\n\u90a3\u4e48\u76f4\u63a5\u4ece1\u5f00\u59cb\u66f4\u65b0f\u6570\u7ec4\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u679a\u4e3e\u504f\u79fb\u91cf\u8f6c\u79fb\u5c31\u884c\u4e86\u3002\n\n\n\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u7528\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u679a\u4e3e\u6700\u540e\u603b\u7684\u504f\u79fb\u91cf\uff0c\u7136\u540e\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u884c\u4e86\u3002\n\n\n\u4f46\u662f\u8fd9\u6837\u771f\u7684\u5bf9\u4e48\uff1f\n\n\n\u4f60\u662f\u4e0d\u662f\u5fd8\u4e86\u8003\u8651\u5b83\u6709\u7684\u70b9\u4e0d\u80fd\u5230n0 0\uff0c\u6240\u4ee5\u5728\u7b97\u504f\u79fb\u91cf\u7684\u65f6\u5019\u4f9d\u636e\u4ece\u8d77\u70b9\u5f00\u59cb\u7684\u6700\u77ed\u8def\u662f\u4e0d\u5bf9\u7684\u3002\n\n\n\u90a3\u8fd9\u600e\u4e48\u529e\uff1f\n\n\n\u6211\u4eec\u628a\u8fb9\u53cd\u8fc7\u6765\uff0c\u4ecen\u5f00\u59cb\u6700\u77ed\u8def\uff0c\u6309\u7167\u8fd9\u4e2a\u6700\u77ed\u8def\u6765\u7b97\u504f\u79fb\u91cf\u5c31\u884c\u4e86\u3002\n\n\n\u6b63\u786e\u6027\u81ea\u5df1\u60f3\u60f3\u5e94\u8be5\u662f\u5bf9\u7684\u3002\n\n\n\u6700\u540e\u6211\u4eec\u770b0\u73af\u3002\n\n\n\u90a3\u53ea\u8981\u770b(x, vib)\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u88ab\u8bbf\u95ee\u4e86\u4e24\u6b21\u5c31\u597d\u4e86\u561b\u3002\n\n```cpp\n// shuddering in a technicolour beat\n// caught up shivering\n# include <bits/stdc++.h>\n\nusing namespace std;\n\n# define gc getchar\ninline int rd() {\n    char ch = gc(); int ret = 0;\n    while(ch < '0' || ch > '9') ch = gc();\n    while(ch <= '9' && ch >= '0') ret = ret * 10 + ch - '0', ch = gc();\n    return ret;\n}\n\n# define RG register\n# define REP(i, a, b) for(RG int i = a; i <= b; ++ i)\n# define REPD(i, a, b) for(RG int i = a; i >= b; -- i)\n# define CLR(i, a) memset(i, a, sizeof(i))\n# define REPG(i, h, x, e) for(RG int i = h[x]; ~i; i = e[i].next)\n# define STOP system(\"pause\")\n# define QAQ puts(\"*\")\n\nconst int N = 1e5 + 5, K = 50 + 5;\n\nint n, m, k, MOD;\nint cnt, cntr, head[N], revh[N];\nstruct qwq { int v, next, c; } edge[N << 1], reve[N << 1];\ninline void add(int u, int v, int c) { edge[++ cnt] = (qwq) { v, head[u], c }, head[u] = cnt; }\ninline void addr(int u, int v, int c) { reve[++ cntr] = (qwq) { v, revh[u], c}, revh[u] = cntr; }\ninline void inc(int &a, int b) { a = (a + b) % MOD; }\n\nconst int B = N - 3;\n\nint d[N], vd[N][K];\nqueue<int> Q;\nbool vis[N], flag; \nvoid spfa(int S) {\n    CLR(d, 0x3f); // CLR(vis, 0);\n    vis[S] = 1;\n    Q.push(S); \n    d[S] = 0;\n    while(!Q.empty()) {\n        int x = Q.front(); Q.pop();\n        REPG(i, revh, x, reve) {\n            int v = reve[i].v, c = reve[i].c;\n            if(d[x] + c < d[v]) {\n                d[v] = d[x] + c;\n                if(!vis[v]) { \n                    Q.push(v), vis[v] = 1;\n                }\n            }\n        }\n        vis[x] = 0;\n    }\n}\nint f[N][K];\nint dfs(int x, int vib) {\n    if(vd[x][vib]) { flag = 1; return 0; }\n    if(~f[x][vib]) return f[x][vib];\n    vd[x][vib] = 1;\n    int ret = 0;\n    REPG(i, head, x, edge) {\n        int v = edge[i].v;\n        int tmp = vib - (d[v] + edge[i].c - d[x]);\n//        printf(\"[%d, %d]:%d, [%d, %d]:%d\\n\", v, tmp, f[v][tmp], x, vib, f[x][vib]);\n        if(tmp > k || tmp < 0) continue ;\n        inc(ret, dfs(v, tmp));\n        if(flag) return 0;\n    }\n    vd[x][vib] = 0;\n    if(x == n && vib == 0) ++ ret;\n    return f[x][vib] = ret;\n}\n\ninline void init() { CLR(head, -1), CLR(revh, -1), cnt = cntr = 0, CLR(f, -1), flag = 0; }\nint main() {\n//    freopen(\"park.in\", \"r\", stdin);\n//    freopen(\"park.out\", \"w\", stdout);\n    int t = rd();\n    while(t --) {\n        init(); // without short-path initialization\n        n = rd(), m = rd(), k = rd(), MOD = rd();\n        REP(i, 1, m) {\n            int u = rd(), v = rd(), c = rd();\n            add(u, v, c), addr(v, u, c);\n        }\n        spfa(n);\n//        QAQ;\n//        printf(\"%d\\n\", d[1]);\n        int ans = 0;\n        REP(i, 0, k) { \n            CLR(vd, 0);\n            inc(ans, dfs(1, i));\n        }\n        if(flag) puts(\"-1\"); \n        else printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1511135430,
        "uid": 16749,
        "name": "shadyqwq",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9676610.html)\n\n\n------------\n\n## Solution\n\n**\u8fd9\u662f\u4e00\u9053\u795e\u9898**\n\n .\n\n\u9996\u5148\uff0c\u6211\u4eec\u4e0d\u59a8\u60f3\u4e00\u4e0bK=0\uff0c\u5373\u6c42\u6700\u77ed\u8def\u65b9\u6848\u6570\u7684\u90e8\u5206\u5206\u3002\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u5c31\u662f\u9b54\u6539\u8fea\u6770\u65af\u7279\u62c9\u505a\u6cd5\uff1a\n\n**\u4e00\u4e2a\u70b9\u53ef\u4ee5\u66f4\u65b0\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e2a\u70b9\u7684\u65b9\u6848\u6570\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff1b\u5982\u679c\u4e00\u4e2a\u70b9\u6240\u66f4\u65b0\u51fa\u6765\u7684\u8ddd\u79bb\u548c\u4e4b\u524d\u7684\u76f8\u7b49\uff0c\u90a3\u4e2a\u70b9\u7684\u65b9\u6848\u6570\u52a0\u7b49\u5f53\u524d\u70b9\u7684\u65b9\u6848\u6570\u3002**\n\n\u7528\u5f0f\u5b50\u53ef\u4ee5\u8868\u73b0\u4e3a\uff1a\n\n$$f[i]=f[i] (dis[j]>dis[i]+x)$$  \n\n$$f[j]+=f[i] (dis[j]==dis[i]+x)$$\n\n**(i\u8868\u793a\u5f53\u524d\u70b9\uff0cj\u8868\u793a\u5b83\u66f4\u65b0\u7684\u70b9\uff0cx\u4e3ai\u5230j\u90a3\u6761\u8def\u7684\u8ddd\u79bb)\n**\n\n\u90a3\u6211\u4eec\u600e\u4e48\u4fdd\u8bc1\u5b83\u7684\u987a\u5e8f\u4e0d\u4f1a\u51fa\u9519\uff0c\u5373\u5982\u4f55\u4fdd\u8bc1\u4e00\u4e2a\u70b9\u53bb\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u65b9\u6848\u6570\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u70b9\u7684\u65b9\u6848\u6570\u662f\u6b63\u786e\u7684\u5462\uff1f\n![QAQ](https://cdn.luogu.com.cn/upload/pic/33553.png)\n\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u505a\u6cd5\u5c31\u662f\u4e00\u79cdDP\u3002\n\n. \n\n\u90a3\u4e48\uff0c\u5bf9\u4e8eK\uff01=0\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n\u89c2\u5bdf\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0K\u6700\u5927\u53ea\u670950\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728DP\u4e0a\u52a0\u4e00\u7ef4\u6765\u89e3\u51b3\u8fd9\u4e2aK\u503c\u3002\n\n\u8003\u8651\u8fd9\u6837\u8bbe\u72b6\u6001\uff1a\n\n**f[i][j] \u8868\u793a\u5230\u8fbei\u70b9\uff0c\u8ddd\u79bb\u4e3adis[i]+j \u7684\u65b9\u6848\u6570\n**\n\n\u8f6c\u79fb\u975e\u5e38\u597d\u5199\n\n$$f[i][j] = sigema (f[k][dis[i]+j-dis[k]-a])$$\n\n(k\u4e3a\u76f4\u63a5\u8fde\u5230i\u7684\u70b9\uff0ca\u8868\u793a\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6743)\n\n\u521d\u59cb\u5316\u5176\u5b9e\u6211\u4eec\u572830\u5206\u505a\u6cd5\u4e2d\u5c31\u5df2\u7ecf\u6c42\u597d\u4e86\u3002\n\n\u8f6c\u79fb\u987a\u5e8f\u662f\u4e2a\u95ee\u9898\u3002\n\n\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5728\u5916\u5c42\u679a\u4e3ej\uff0c\u95ee\u9898\u662f\uff0c\u6709\u65f6\u5019\uff0cdis[i]+j-dis[k]-a\u4f1a\u7b49\u4e8ej\uff0c\u5982\u679c\u679a\u4e3ei\u7684\u987a\u5e8f\u9519\u4e86\uff0c\u7b54\u6848\u80af\u5b9a\u4f1a\u8ddf\u7740\u9519\u3002\n\n**\u5bf9\u4e8edis[i]+j-dis[k]-a==j \u7684\u70b9\uff0c\u80af\u5b9a\u662fk\u53bb\u66f4\u65b0i\uff0c\u53c8\u56e0\u4e3a\u8fb9\u6743\u6ca1\u6709\u8d1f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167dis\u4ece\u5c0f\u5230\u5927\u53bb\u53bb\u679a\u4e3ei\u7684\u503c\u3002**\n\n .\n\n\u4ee5\u4e0a\u662f\u6ca1\u6709\u96f6\u8fb9\u7684\u505a\u6cd5\u3002\n\n\u5bf9\u4e8e\u6709\u96f6\u8fb9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u521a\u521a\u7684\u505a\u6cd5\u5c31\u4f1a\u51fa\u95ee\u9898\u3002\u5982\u56fe\uff1a\n![QAQ](https://cdn.luogu.com.cn/upload/pic/33551.png)\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u628a\u539f\u56fe\u8f6c\u6362\u4e00\u4e0b**\uff0c\u53ea\u4fdd\u75590\u8fb9\uff0c\u5bf9\u65b0\u56fe\u505a\u62d3\u6251\u6392\u5e8f**\u3002\n\n**\u5982\u679c\u505a\u5b8c\u62d3\u6251\u6392\u5e8f\u4e4b\u540e\uff0c\u6709\u51e0\u4e2a\u70b9\u6ca1\u6709\u8fdb\u5165\u8fc7\u6392\u5e8f\u4e2d\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u56fe\u6709\u96f6\u73af\uff0c\u5c31gg\u4e86\u3002\n**\n\n\u6211\u4eec\u628a\u62d3\u6251\u5e8f\u505a\u5b8c\u4e4b\u540e\u518d\u6267\u884c\u539f\u6765\u6709\u7684\u6700\u77ed\u8def\u548cdp\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u9519\u4e86\u3002\n\n .\n\n\u5c31\u9171\uff0c\u6211\u4eec\u5c31\u5634\u5df4AC\u8fd9\u9053\u9898\u5566o(*\uffe3\u25bd\uffe3*)o \u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u6837\u505a\u5e76A\u4e0d\u4e86\uff0c\u56e0\u4e3a\u8fd9\u9898TM\u5361\u5e38(\u256f\u00b0\u0414\u00b0)\u256f\ufe35\u253b\u2501\u253b\n\n\n~~\u7136\u540e\uff0c\u4f60\u4f1a\u88ab\u536130\u5206\u5e76\u56e0\u6b64\u9000\u5f79\uff08\u6216\u8005\u662f\u5f00O2A\u6389\u8fd9\u9053\u9898\uff08\u4f46\u662fNOIP\u4e2d\u5e76\u4e0d\u5f00O2\uff0c\u6240\u4ee5\u4f60\u8fd8\u662f\u56e0\u6b64\u9000\u5f79\u4e86\uff09\uff09~~\n\n \n\n\n------------\n\n## Code\n\n```cpp\n//Luogu P3953 \u901b\u516c\u56ed\n//Sep,18th,2018\n//\u6700\u77ed\u8def+\u62d3\u6251\u6392\u5e8f+DP+\u5361\u5e38\u795e\u9898\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=100000+100;\nconst int M=50+5;\nconst int inf=0x3f3f3f3f;\nstruct DIS\n{\n    int dis,no,zero;\n}dis[N];\nbool cmp(DIS A,DIS B)\n{\n    if(A.dis==B.dis)\n        return A.zero<B.zero;\n    return A.dis<B.dis;\n}\nstruct road\n{\n    int to,w;\n    road(int A,int B)\n    {\n        to=A,w=B;\n    }\n    friend bool operator < (road A,road B)\n    {\n        if(A.w==B.w)\n            return dis[A.to].zero > dis[B.to].zero;\n        return A.w > B.w;\n    }\n};\nvector <road> e[N],rev[N];\nint n,m,K,poi,T,rd[N],dl2[N],front2,tail2,dis2[N];\nlong long f[N][M];\npriority_queue <road,vector<road> > dl;\nbool vis[N];\nvoid dj()\n{\n    for(int i=1;i<=n;i++)\n        dis[i].dis=inf,dis[i].no=i;\n    dis[1].dis=0;\n    memset(dis2,0x3f,sizeof dis2);\n    dis2[1]=0;\n    while(dl.empty()==false) dl.pop();\n    memset(vis,0,sizeof vis);\n    dl.push(road(1,0));\n    f[1][0]=1;\n    int cnt=0;\n    while(cnt!=n and dl.empty()==false)\n    {\n        road temp=dl.top();\n        dl.pop();\n        if(vis[temp.to]==true) continue;\n        vis[temp.to]=true;\n        int now=temp.to,dis_now=temp.w;\n        for(int i=0;i<int(e[now].size());i++)\n            if(dis_now+e[now][i].w < dis[e[now][i].to].dis)\n            {\n                f[e[now][i].to][0]=f[now][0];\n                dis[e[now][i].to].dis=dis_now+e[now][i].w;\n                dis2[e[now][i].to]=dis_now+e[now][i].w;\n                dl.push(road(e[now][i].to,dis[e[now][i].to].dis));\n            }\n            else if(dis_now+e[now][i].w == dis[e[now][i].to].dis)\n                f[e[now][i].to][0]=(f[e[now][i].to][0]+f[now][0])%poi;\n    }\n}\nvoid GetTP()\n{\n    tail2=front2=0;\n    memset(vis,0,sizeof vis);\n    for(int i=1;i<=n;i++)\n        if(rd[i]==0)\n            dl2[tail2++]=i;\n    int cnt=0;\n    while(tail2>front2)\n    {\n        dis[dl2[front2]].zero=++cnt;\n        vis[dl2[front2]]=true;\n        for(int i=0;i<int(e[dl2[front2]].size());i++)\n            if(e[dl2[front2]][i].w==0 and vis[e[dl2[front2]][i].to]==false)\n            {\n                rd[e[dl2[front2]][i].to]--;\n                if(rd[e[dl2[front2]][i].to]==0)\n                    dl2[tail2++]=e[dl2[front2]][i].to;\n            }\n        front2++;\n    }\n}\nint main()\n{\n    T=read();\n    for(int i=1;i<N;i++)\n        e[i].reserve(4),rev[i].reserve(4);\n    for(;T>0;T--)\n    {\n        memset(f,0,sizeof f);\n        memset(rd,0,sizeof rd);\n        n=read(),m=read(),K=read(),poi=read();\n        for(int i=1;i<=n;i++)\n            e[i].clear(),rev[i].clear();\n        for(int i=1;i<=m;i++)\n        {\n            int a=read(),b=read(),c=read();\n            e[a].push_back(road(b,c));\n            rev[b].push_back(road(a,c));\n            if(c==0)\n                rd[b]++;\n        }\n        \n        GetTP();\n        bool OK=true;\n        for(int i=1;i<=n;i++)\n            if(vis[i]==false)\n                OK=false;\n        if(OK==false)\n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        dj();\n        \n        sort(dis+1,dis+1+n,cmp);    \n        for(int j=1;j<=K;j++)\n            for(int i=1;i<=n;i++)\n                for(int k=0;k<int(rev[dis[i].no].size());k++)\n                {\n                    int t=dis[i].no,s=rev[t][k].to;\n                    if(dis2[t]!=inf and dis2[s]!=inf and dis2[t]+j-dis2[s]-rev[t][k].w>=0 )\n                        f[t][j]=(f[t][j]+f[s][dis2[t]+j-dis2[s]-rev[t][k].w])%poi;\n                }\n    \n        long long ans=0;\n        for(int i=0;i<=K;i++)\n            ans=(ans+f[n][i])%poi;\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n \n```\n \n\n \n\n ",
        "postTime": 1537357871,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "~~Noip\u70b8\uff5e,\u4e8e\u662f\u6211\u5230\u73b0\u5728\u624d\u5f00\u59cb\u66f4\u6b63\u9898\u76ee\u3002\u3002~~\n\n# \u8bb0\u5fc6\u5316\u641c\u7d22\u505a\u6cd5\n\n\u8fd9\u79cd\u9898\u76ee\u4e00\u70b9\u4e5f\u4e0d\u5957\u8def\uff0c\u5f88\u4e0d\u597d\u505a\uff0c\u751a\u81f3\u6211\u770b\u4e86\u4e00\u4e2a\u5c0f\u65f6\u9898\u89e3\u624d\u5f04\u61c2\n\n\u90a3\u4e48\u9996\u5148\u770bK\u5f88\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u628aK\u7eb3\u5165\u72b6\u6001\u4e2d\n\n\u4ee4dp[i][j]\u8868\u793a\u5230i\u53f7\u8282\u70b9\uff0c\u8fd8\u6709j\u7684\u503c\u53ef\u4ee5\u53bb\u7ed5\u5f2f\u8def\u7684\u65b9\u6848\u6570\uff08\u4e0d\u4e00\u5b9aj\u8981\u7ed5\u5b8c\uff0c\u53ef\u4ee5\u7ed50\uff5ej\u4e4b\u95f4\u7684\u5f2f\u8def\uff09\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662fdp[N][K]\n\n### \u5168\u7a0b\u5e8f\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\n#### \u4e00\u3001\u8bfb\u5165 \n\u7565\n#### \u4e8c\u3001\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u52301\u7684\u6700\u77ed\u8def\n\u7565\n#### \u4e09\u3001\u53cd\u5411\u5efa\u56fe\u540e\u8bb0\u641c\u7b54\u6848\n\u5047\u8bbe\u5728\u539f\u56fe\u4e2d\u6709\u4e00\u6761x->y,w\u7684\u8fb9\n\n\u90a3\u4e48\u4ecex\u8d70\u5230y\u5c31\u662fdis[x]+w\n\n\u5b9e\u9645\u4e0a\u6700\u77ed\u8def\u662fdis[y]\n\n\u90a3\u4e48\u7ed5\u5f2f\u8def\u7684\u957f\u5ea6\u662f (dis[x]+w)-dis[y]\n\n\u6240\u4ee5DFS(x,res)\u8868\u793a\u5230\u8fbex\u70b9\u8fd8\u5269res\u6b65\u53ef\u4ee5\u7ed5\u7684\u65b9\u6848\u6570\n\n$$ dp[x][res]=\\sum_{y,y->x}dp[y][res-(dis[x]+w-dis[y])] $$\n\n\u8fb9\u754c\u6761\u4ef6\u662f\u5230\u8fbe1\u8fd4\u56de1\n\n\u5224\u65ad\u73af\u7684\u60c5\u51b5\u5728\u4ee3\u7801\u4e2d\u6709\u63d0\u5230\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint read()\n{\n\tchar ch=getchar();int h=0,t=1;\n\twhile((ch>'9'||ch<'0')&&ch!='-') ch=getchar();\n\tif(ch=='-') t=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9') h=h*10+ch-'0',ch=getchar();\n\treturn h*t;\n}\nconst int MAXN=210000;\nint T,N,M,K,mod,cnt,head[MAXN];\nint fr[MAXN],to[MAXN],w[MAXN];\nint dis[MAXN],vis[MAXN],dp[MAXN][51];\nint in[MAXN],re[MAXN],flag;\nqueue<int> Q;\nstruct edge{int next,to,w;}a[MAXN<<1];\nvoid link(int x,int y,int w)\n{\n\ta[++cnt]=(edge){head[x],y,w};\n\thead[x]=cnt;\n}\nint DFS(int x,int res)//\u8fd4\u56de\u5230\u8fbex\u70b9\u8fd8\u5269res\u6b65\u53ef\u4ee5\u7ed5\u7684\u65b9\u6848\u6570\n{\n\tif(~dp[x][res]) return dp[x][res];\n\tdp[x][res]=(x==1);\n\tfor(int i=head[x];i;i=a[i].next)\n\t{\n\t\tint R=a[i].to;\n\t\tint tt=res-((dis[R]+a[i].w)-dis[x]);//\u901a\u8fc7\u8fd9\u6761\u8fb9\u591a\u7ed5\u4e86\u4e00\u4f1a\n\t\tif(tt<0) continue;\n\t\tif(in[R]&&re[R]==tt) flag=1;//\u5982\u679c\u8bf4res\u4e00\u76f4\u6ca1\u6709\u51cf\u5c11\u7684\u60c5\u51b5\u4e0b\u641c\u51fa\u6765\u4e00\u4e2a\u5708\uff0c\u8bf4\u660e\u67090\u73af\n\t\telse in[R]=1,re[R]=tt;\n\t\t(dp[x][res]+=DFS(R,tt))%=mod;\n\t\tin[R]=0;re[R]=0;\n\t}\n\treturn dp[x][res];\n}\nvoid Work()\n{\n\t//Part 1 \u521d\u59cb\u5316/\u8bfb\u5165\n\tmemset(head,0,sizeof(head));cnt=0;\n\tN=read();M=read();K=read();mod=read();\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tfr[i]=read();to[i]=read();w[i]=read();\n\t\tlink(fr[i],to[i],w[i]);\n\t}\n\t//Part 2 SPFA\u9884\u5904\u7406\u8ddd\u79bb\n\tmemset(dis,63,sizeof(dis));\n\tQ.push(1);dis[1]=0;vis[1]=1;\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front();\n\t\tfor(int i=head[x];i;i=a[i].next)\n\t\t{\n\t\t\tint R=a[i].to;\n\t\t\tif(dis[R]<=dis[x]+a[i].w) continue;\n\t\t\tdis[R]=dis[x]+a[i].w;\n\t\t\tif(!vis[R]) vis[R]=1,Q.push(R);\n\t\t}\n\t\tQ.pop();vis[x]=0;\n\t}\n\t//Part 3 \u5efa\u53cd\u56feDFS\u8bb0\u641c\n\tmemset(head,0,sizeof(head));cnt=0;\n\tmemset(dp,-1,sizeof(dp));flag=0;\n\tfor(int i=1;i<=M;i++)\n\t\tlink(to[i],fr[i],w[i]);\n\tDFS(N,K);\n\tprintf(\"%d\\n\",flag?-1:DFS(N,K));\n}\nint main()\n{\n\tT=read();while(T--)Work();\t\n}\n\n```\n~~\u5b89\u5229\u4e00\u6ce2[\u535a\u5ba2](https://www.cnblogs.com/xzyxzy/)\u5427\u3002\u3002(\u9003~~",
        "postTime": 1528378796,
        "uid": 43628,
        "name": "xzyxzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5f00\u59cb\u590d\u4e60NOIP2019\uff0c\u53c8\u5237\u4e86\u4e00\u904d\u524d\u51e0\u5e74\u7684\u9898\uff0c\u611f\u89e6\u5f88\u6df1\uff0c2017\u5e74Day1T3\u7edd\u5bf9\u662f\u4e00\u9053\u597d\u9898\uff0c\u8003\u5bdf\u7684\u65b9\u9762\u975e\u5e38\u5f97\u5e7f\uff0c\u503c\u5f97\u53d1\u7bc7\u9898\u89e3\u4f9b\u5927\u5bb6\u53c2\u8003\u4e00\u4e0b\u3002\n\n[\u9898\u76ee\u94fe\u63a5\uff08\u6d1b\u8c37\uff09](https://www.luogu.org/problemnew/show/P3953)\n\n# PART1\uff08\u8f93\u5165\u2014\u2014\u5b58\u56fe\uff09\uff1a\n\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u94fe\u5f0f\u524d\u5411\u661f\u7684\u5b58\u56fe\u65b9\u6cd5\uff0c\u975e\u5e38\u7b80\u4fbf\uff0c\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nstruct Edge {\n\tint u, v, w, next;\n};\nEdge e[maxm * 2];\n\nvoid addEdge(int u, int v, int w) {\n\ten ++;\n\te[en].v = v;\n\te[en].w = w;\n\te[en].next = head[u];\n\thead[u] = en;\n}\n\nint main() { \n\tint t;\n\ten = 0;\n\t\n\tcin >> t;\n\twhile (t--) {\n\t\t\n\t\ten = 0;\n\t\tcin >> n >> m >> K >> p;\n\t\tfor (int i = 1; i <= n; ++i) head[i] = 0;\n\t\t\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tint u, v, w;\n\t\t\tcin >> u >> v >> w;\n\t\t\t\n\t\t\taddEdge(u, v, w);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n\n# Part2(\u6c42\u6700\u77ed\u8def\u5f84):\n\u5206\u6790\u4e00\u4e0b\u8fd9\u9053\u9898\uff0c\u660e\u663e\u8981\u6c42\u4e00\u904d\u6700\u77ed\u8def\u5f84\uff0c\u800c\u4e14\u6700\u597d\u628a\u4ece1\u5f00\u59cb\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5b58\u4e0b\u6765\uff0c\u5907\u4e4b\u540e\u53ea\u7528\u3002\u7b14\u8005\u7528\u7684\u662fdijsktra\u7b97\u6cd5+\u5806\u4f18\u5316\uff0c\u662f\u6700\u77ed\u8def\u5f84\u6c42\u6cd5\u4e2d\u8f83\u5feb\u7684\uff0c\u4e5f\u662f\u5341\u5206\u7a33\u5b9a\u7684\u4e00\u79cd\u7b97\u6cd5\uff08SPFA\u5bb9\u6613\u88ab\u5361\u5e38\u6570\uff09\u4e5f\u975e\u5e38\u5e38\u89c4\uff1a\n\n```cpp\ntypedef pair<int,int> state;\n\nvoid dijkstra(int s) {\n\t\n\tfor (int i = 1; i <= n; ++i) vs[i] = false;\n\tfor (int i = 1; i <= n; ++i) d[i] = INT_MAX;\n\t\n\td[s] = 0;\n\tpriority_queue<state, vector<state>, greater<state> > q;\n\t\n\tq.push(make_pair(0, s));\n\t\n\twhile (!q.empty()) {\n\t\tstate k = q.top();\n\t\tq.pop();\n\t\tif (vs[k.second]) continue;\n\t\tvs[k.second] = true;\n\t\t\n\t\tint u = k.second;\n\t\tfor (int num = head[u]; num != 0; num = e[num].next)\n\t\t\tif ( d[u] != INT_MAX) {\n\t\t\t\tif (d[u] + e[num].w < d[e[num].v]) {\n\t\t\t\t\td[e[num].v] = d[u] + e[num].w;\n\t\t\t\t\t\n\t\t\t\t\tq.push(make_pair(d[e[num].v], e[num].v));\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n```\n# Part3\uff08\u6c42\u89e3\uff09\uff1a\n\u6c42\u89e3\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u7b14\u8005\u4ecb\u7ecd\u4e00\u79cdDP\u6c42\u89e3\u7684\u65b9\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4f[i][k]\u8868\u793a\u4ece1\u53f7\u70b9\u8d70\u5230i\u53f7\u70b9\u6bd4d[i]\u5927\u4e0d\u8d85\u8fc7k\u7684\u8def\u5f84\u603b\u6761\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u975e\u5e38\u7b80\u5355\u7684\uff0c\u6ce8\u610f\u8981\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5426\u5219\u59a5\u59a5TLE\u3002\u901a\u8fc7\u72b6\u6001f[i][k]\u53ef\u5f97\u51faf[u][k+e[j].w]\uff0c(u\u4e3ai\u53ef\u5230\u8fbe\u7684\u70b9)\u3002\u5982\u679c(k+e[j].w)>K\u90a3\u4e48\u5c31\u6ca1\u6709\u5fc5\u8981\u7ee7\u7eed\u9012\u5f52\u4e86\uff0c\u56e0\u4e3a\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9\uff0c\u5df2\u8d85\u8fc7K\uff0c\u800c\u4e14\u6ca1\u6709\u8d1f\u6743\uff0c\u610f\u5473\u7740\uff0c\u8fd9\u6837\u8d70\u65e0\u6cd5\u5f97\u5230\u6ee1\u8db3\u8981\u6c42\u7684\u89e3\u3002\n\n\u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u5c31\u662f\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6709\u65e0\u6570\u7ec4\u89e3\u3002\u672c\u9898\u7684\u6d4b\u8bd5\u6570\u636e\u70b9\u7279\u522b\u8bf4\u4e86\u201c\u662f\u5426\u67090\u8fb9\u201d\uff0c\u800c\u4e14\u6ca1\u6709\u8d1f\u8fb9\u6743\u3002\n![\u6837\u4f8b](https://img-blog.csdnimg.cn/20190616175604812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YXl1Y2Fpamk=,size_24,color_FFFFFA,t_70)\n\u90a3\u4e48\uff0c\u5982\u679c\u5728\u4e0b\u56fe\u4e2d\u7684\u60c5\u51b5\uff0c\u6709\u65e0\u6570\u7ec4\u89e3\uff1a\n![\u793a\u4f8b](https://img-blog.csdnimg.cn/20190620222540126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YXl1Y2Fpamk=,size_32,color_FFFFFF,t_70)\n3\uff0c4\uff0c5\uff0c6\u56db\u4e2a\u70b9\u662f\u4e00\u4e2a0\u6743\u73af\uff0c\u53ea\u8981\u5728\u8fd9\u56db\u4e2a\u70b9\u4e2d\u515c\u5708\u5b50\uff0c\u8def\u7a0b\u6c38\u4e0d\u589e\u52a0\uff0c\u6709\u65e0\u6570\u79cd\u89e3\u6cd5\u3002\u6240\u4ee5\u5224\u65ad\u65e0\u6570\u79cd\u89e3\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u52240\u6743\u73af\u3002\u53ea\u8981\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u65f6\u8bb0\u5f55\u4e00\u4e0bvis[u][k]\u5982\u679c\u4e3atrue\uff0c\u90a3\u4e48\u4ee3\u8868\u7740\u7ed5\u4e86\u4e00\u5708\uff0c\u6743\u503c\u6ca1\u52a0\uff0c\u6240\u4ee5\u67090\u6743\u73af\uff0c\u8fd4\u56deINT_MAX\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nint dp(int u, int k) {\n\t\n\t\n\tif (vis[u][k])\n\t\treturn INT_MAX;\n\t\n\tif (f[u][k] > 0)\n\t\treturn f[u][k];\n\t\n\tvis[u][k] = true;\n\tif (u == n)\n\t\tf[u][k] = 1;\n\t\n\tfor (int num = head[u]; num != 0; num = e[num].next) \n\t\tint v = e[num].v;\n\t\tint nk = d[u] + k + e[num].w - d[v];\n\t\tif (nk <= K) {\n\t\t\t\n\t\t\tint ans = dp(v, nk);\n\t\t\t\n\t\t\tif (ans == INT_MAX)\n\t\t\t\treturn INT_MAX;\n\t\t\t\n\t\t\tf[u][k] = (f[u][k] + ans) % p;\n\t\t}\n\tvis[u][k] = false;\n\treturn f[u][k];\n}\n```\n\u5927\u5bb6\u53ef\u4ee5\u957f\u5f0f\u628a\u4ee3\u7801\u62fc\u63a5\u4e00\u4e0b\uff0c\u63d0\u4ea4\u3002\n\n\u4f46\u975e\u5e38\u5c34\u5c2c\u7684\u662f\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u53ea\u8fc7\u4e867\u4e2a\u70b9\uff0c\u8fd8\u6709\u4e09\u4e2aTLE\uff0c\u600e\u4e48\u529e\uff0c\u96be\u9053\u662f\u65b9\u6cd5\u7684\u95ee\u9898\uff1f\uff1f\uff1f\u4e0d\u7528\u62c5\u5fc3\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002\n\n# Part4\uff08\u4f18\u5316\u7b97\u6cd5\u2014\u2014\u526a\u679d\uff09\n\u5176\u5b9e\u601d\u8def\u662f\u5bf9\u7684\uff0c\u4f46\u5728\u8fdb\u884cdp\u65f6\uff0c\u8fdb\u884c\u4e86\u4e0d\u5c11\u5197\u4f59\u8ba1\u7b97\uff0c\u600e\u6837\u53bb\u9664\u5197\u4f59\u72b6\u6001\u5462\uff1f\u9996\u5148\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u526a\u679d\uff0c\u5982\u4f55\u8fdb\u884c\u526a\u679d\u5462\uff0c\u8ba9\u6211\u4eec\u6765\u753b\u4e2a\u56fe\uff1a\n![\u4f8b\u5b50](https://img-blog.csdnimg.cn/20190625194710379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YXl1Y2Fpamk=,size_24,color_FFFFFF,t_70)\n\u5047\u8bbe1\u53f7\u70b9\u662f\u8d77\u70b9\uff0c6\u53f7\u70b9\u662f\u7ec8\u70b9\uff0c\u53ef\u7528\u7ecf\u5178\u7684\u53cd\u5411\u8fb9\u526a\u679d\u65b9\u6cd5\uff0c\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nint dp(int u, int k) {\n\t\n\t\n\tif (vis[u][k])\n\t\treturn INT_MAX;\n\t\n\tif (f[u][k] > 0)\n\t\treturn f[u][k];\n\t\n\tvis[u][k] = true;\n\tif (u == n)\n\t\tf[u][k] = 1;\n\t\n\tfor (int num = head[u]; num != 0; num = e[num].next) \n\t  if (num % 2 == 1) {\n\t\tint v = e[num].v;\n\t\tint nk = d[1][u] + k + e[num].w - d[1][v];\n\t\tif (nk <= K && d[1][u] + k + e[num].w + d[0][v] <= d[1][n] + K) {\n\t\t\t\n\t\t\tint ans = dp(v, nk);\n\t\t\t\n\t\t\tif (ans == INT_MAX)\n\t\t\t\treturn INT_MAX;\n\t\t\t\n\t\t\tf[u][k] = (f[u][k] + ans) % p;\n\t\t}\n\t}\n\tvis[u][k] = false;\n\treturn f[u][k];\n}\n```\n\nQAQ,\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\u54e6\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int maxn = 200000;\nconst int maxm = 400000;\ntypedef pair<int, int> state;\nint head[maxn], f[maxn][60];\nbool vis[maxn][60], vs[maxn];\nint d[2][maxn];\nint n, m, en, K, p, t;\nstruct Edge {\n\tint u, v, w, next;\n};\nEdge e[maxm * 2];\n\n\nvoid addEdge(int u, int v, int w) {\n\ten ++;\n\te[en].v = v;\n\te[en].w = w;\n\te[en].next = head[u];\n\thead[u] = en;\n}\n\nvoid dijkstra(int s, int r) {\n\t\n\tfor (int i = 1; i <= n; ++i) vs[i] = false;\n\tfor (int i = 1; i <= n; ++i) d[r][i] = INT_MAX;\n\t\n\td[r][s] = 0;\n\tpriority_queue<state, vector<state>, greater<state> > q;\n\t\n\tq.push(make_pair(0, s));\n\t\n\twhile (!q.empty()) {\n\t\tstate k = q.top();\n\t\tq.pop();\n\t\tif (vs[k.second]) continue;\n\t\tvs[k.second] = true;\n\t\t\n\t\tint u = k.second;\n\t\tfor (int num = head[u]; num != 0; num = e[num].next)\n\t\t\tif (num % 2 == r && d[r][u] != INT_MAX) {\n\t\t\t\tif (d[r][u] + e[num].w < d[r][e[num].v]) {\n\t\t\t\t\td[r][e[num].v] = d[r][u] + e[num].w;\n\t\t\t\t\t\n\t\t\t\t\tq.push(make_pair(d[r][e[num].v], e[num].v));\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\nint dp(int u, int k) {\n\t\n\t\n\tif (vis[u][k])\n\t\treturn INT_MAX;\n\t\n\tif (f[u][k] > 0)\n\t\treturn f[u][k];\n\t\n\tvis[u][k] = true;\n\tif (u == n)\n\t\tf[u][k] = 1;\n\t\n\tfor (int num = head[u]; num != 0; num = e[num].next) \n\t  if (num % 2 == 1) {\n\t\tint v = e[num].v;\n\t\tint nk = d[1][u] + k + e[num].w - d[1][v];\n\t\tif (nk <= K && d[1][u] + k + e[num].w + d[0][v] <= d[1][n] + K) {\n\t\t\t\n\t\t\tint ans = dp(v, nk);\n\t\t\t\n\t\t\tif (ans == INT_MAX)\n\t\t\t\treturn INT_MAX;\n\t\t\t\n\t\t\tf[u][k] = (f[u][k] + ans) % p;\n\t\t}\n\t}\n\tvis[u][k] = false;\n\treturn f[u][k];\n}\n\nint main() { \n\tint t;\n\ten = 0;\n\t\n\tcin >> t;\n\twhile (t--) {\n\t\t\n\t\ten = 0;\n\t\tcin >> n >> m >> K >> p;\n\t\tfor (int i = 1; i <= n; ++i) head[i] = 0;\n\t\t\n\t\t\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tint u, v, w;\n\t\t\tcin >> u >> v >> w;\n\t\t\t\n\t\t\taddEdge(u, v, w);\n\t\t\taddEdge(v, u, w);\n\t\t}\n\t\tdijkstra(1, 1);\n\t\tdijkstra(n, 0);\n\t\t\n\t\tfor (int i = 0; i <= n; ++i)\n\t\t\tfor (int j = 0; j <= K; ++j)\n\t\t\t{\n\t\t\t\tf[i][j] = 0;\n\t\t\t\tvis[i][j] = false;\n\t\t\t}\n\t\tint ans = dp(1, 0);\n\t\tif (ans == INT_MAX)\n\t\t\tcout << -1 << endl;\n\t\telse\n\t\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}\n\n\n\n```\n\u5f88\u7ecf\u5178\u7684\u9898\uff0c\u5e0c\u671b\u5927\u5bb6\u591a\u5237\u4e00\u5237\uff0c\u7ec3\u7ec3\u624b\u3002",
        "postTime": 1575776698,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P3953)\n\n\u770b\u5230\u5f88\u591a\u4eba\u627e\u5230\u3007\u73af\u5c31\u9000\u51fa\uff0c\u8fd9\u6837\u505a\u662f\u5f88\u4e0d\u4e25\u8c28\u7684\uff0c\u56e0\u4e3a\u8981**\u8003\u8651\u53ef\u884c\u8def\u5f84\u4f1a\u4e0d\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u3007\u73af**\n\n\u6211\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u5148\u627e\u51fa\u3007\u73af\uff08\u628a\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\u62c9\u51fa\u6765\u8dd1 $\\text {tarjan}$\uff09\uff0c\u7136\u540e\u5224\u65ad\u3007\u73af\u4e0a\u7684\u70b9 $x$ \u662f\u5426\u6ee1\u8db3 $dis[1][x]+dis[x][n] \\leq dis[1][n]+k$ \uff0c\u5982\u679c\u6ee1\u8db3\u5c31\u8bf4\u660e\u53ef\u884c\u7684\u8def\u5f84\u6709\u53ef\u80fd\u901a\u8fc7\u8fd9\u4e2a\u3007\u73af\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u4e86\n\n\u76ee\u524d\u8fd9\u4efd\u4ee3\u7801\u5e94\u8be5\u901a\u8fc7\u4e86\u6211\u770b\u5230\u7684\u6240\u6709 $hack$ \u6570\u636e\uff0c\u4e5f\u901a\u8fc7\u4e86$\\text{UOJ}$ \u7684\u8bc4\u6d4b\uff0c\u5e94\u8be5\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u4e86\n\n\u89e3\u51b3\u4e86\u3007\u73af\u4e4b\u540e\u8fd9\u9898\u5c31\u7b80\u5355\u591a\u4e86\uff0c\u76f4\u63a5\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u5b8c\u4e8b\u4e86\uff0c\u539f\u7406\u522b\u7684\u9898\u89e3\u5df2\u7ecf\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff08~~\u6bd5\u7adf\u6211\u4e5f\u662f\u770b\u4ed6\u4eec\u7684\u9898\u89e3\u5199\u51fa\u6765\u7684~~\uff09\n\n$Talk \\ is \\ cheap.\\ Show \\ you \\ the \\ code.$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+5;\nint n,ljc,now,cnt,cnt2,cnt3,ans,tot,sum;\nint head[maxn],head2[maxn],head3[maxn],dfn[maxn],low[maxn],dis[maxn],dis2[maxn],f[maxn][55];\nbool ins[maxn],ling[maxn],flag;\ninline int read(){\n\tint x=0; char c=getchar();\n\twhile(c<'0' || c>'9') c=getchar();\n\twhile(c>='0' && c<='9') x=x*10+c-48, c=getchar();\n\treturn x;\n}\nstruct edge{\n\tint to,w,nxt;\n} e[maxn*2],e2[maxn*2],e3[maxn*2];//e[]\u4e3a\u6b63\u56fe\u7684\u8fb9\uff0ce2[]\u4e3a\u53cd\u56fe\u7684\u8fb9\uff0ce3[]\u4e3a\u8fb9\u6743\u4e3a\u96f6\u7684\u8fb9\uff08\u62ff\u6765\u8dd1tarjan\uff09 \ninline void add(int u,int v,int w){\n\te[++cnt]=(edge) {v,w,head[u]};\n\thead[u]=cnt;\n}\ninline void add2(int u,int v,int w){\n\te2[++cnt2]=(edge) {v,w,head2[u]};\n\thead2[u]=cnt2;\n}\ninline void add3(int u,int v,int w){\n\te3[++cnt3]=(edge) {v,w,head3[u]};\n\thead3[u]=cnt3;\n}\nstruct node{\n\tint num,dis;\n\tbool operator < (const node x) const {return dis>x.dis;}\n} t;\npriority_queue <node> q;\ninline void dij(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1]=0, q.push((node) {1,0});\n\twhile(!q.empty()){\n\t\tt=q.top(), q.pop();\n\t\tint x=t.num;\n\t\tif(dis[x]!=t.dis) continue;\n\t\tfor(int i=head[x],y;i;i=e[i].nxt){\n\t\t\ty=e[i].to;\n\t\t\tif(dis[x]+e[i].w<dis[y]) dis[y]=dis[x]+e[i].w, q.push((node) {y,dis[y]});\n\t\t}\n\t}\n}\ninline void dij2(){\n\tmemset(dis2,0x3f,sizeof(dis2));\n\tdis2[n]=0, q.push((node) {n,0});\n\twhile(!q.empty()){\n\t\tt=q.top(), q.pop();\n\t\tint x=t.num;\n\t\tif(dis2[x]!=t.dis) continue;\n\t\tfor(int i=head2[x],y;i;i=e2[i].nxt){\n\t\t\ty=e2[i].to;\n\t\t\tif(dis2[x]+e2[i].w<dis2[y]) dis2[y]=dis2[x]+e2[i].w, q.push((node) {y,dis2[y]});\n\t\t}\n\t}\n}\nint dfs(int x,int k){//\u8bb0\u5fc6\u5316\u641c\u7d22 \n\tif(f[x][k]!=-1) return f[x][k];\n\tf[x][k]=0;\n\tfor(int i=head2[x],y,t;i;i=e2[i].nxt){\n\t\ty=e2[i].to, t=dis[x]-dis[y]+k-e2[i].w;\n\t\tif(t<0) continue;\n\t\tf[x][k]=(f[x][k]+dfs(y,t))%ljc;//\u8bb0\u5f97%%%ljc \n\t}\n\treturn f[x][k];\n}\nstack <int> s;\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++tot;\n\tins[x]=1, s.push(x);\n\tfor(int i=head3[x],y;i;i=e3[i].nxt){\n\t\ty=e3[i].to;\n\t\tif(!dfn[y]) tarjan(y), low[x]=min(low[x],low[y]);\n\t\telse if(ins[y]) low[x]=min(low[x],dfn[y]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\tsum=0;\n\t\tdo{\n\t\t\tnow=s.top(), s.pop();\n\t\t\tins[now]=0, ling[x]=1;\n\t\t\tsum++;\n\t\t} while(now!=x);\n\t\tif(sum==1) ling[x]=0;//\u8bb0\u5f97\u52a0\u8fd9\u53e5\uff0c\u56e0\u4e3a\u5728tarjan\u91cc\u9762\u4e00\u4e2a\u70b9\u4e5f\u662f\u73af \n\t}\n}\nint main(){\n\tint u,v,w,k,m,t;\n\tt=read();\n\twhile(t--){\n\t\tn=read(), m=read(), k=read(), ljc=read();\n\t\tcnt=cnt2=cnt3=ans=flag=0;\n\t\tfor(int i=1;i<=n;i++) head[i]=head2[i]=head3[i]=dfn[i]=low[i]=ins[i]=ling[i]=0;\n\t\tmemset(e,0,sizeof(e));\n\t\tmemset(e2,0,sizeof(e2));\n\t\tmemset(e3,0,sizeof(e3));\n\t\twhile(m--){\n\t\t\tu=read(), v=read(), w=read();\n\t\t\tadd(u,v,w), add2(v,u,w);\n\t\t\tif(w==0) add3(u,v,w);//\u8fb9\u6743\u4e3a0\u5c31\u52a0\u5230e3[]\u4e2d \n\t\t}\n\t\tdij(), dij2();//\u6b63\u53cd\u4e24\u6b21dij \n\t\tfor(int i=1;i<=n;i++) if(!dfn[i]) tarjan(i);//\u627e\u51fa0\u73af \n\t\tfor(int i=1;i<=n;i++) if(ling[i] && dis[i]+dis2[i]<=dis[n]+k) {flag=1; break;}\n\t\tif(flag) {printf(\"-1\\n\"); continue;}//\u5982\u679c\u6709\u53ef\u884c\u8def\u5f84\u7ecf\u8fc70\u73af\uff0c\u76f4\u63a5\u8f93\u51fa-1 \n\t\tmemset(f,-1,sizeof(f));\n\t\tf[1][0]=1;\n\t\tfor(int i=0;i<=k;i++) ans=(ans+dfs(n,i))%ljc;//\u8bb0\u5f97%%%ljc\n\t\tprintf(\"%d\\n\",ans);\t\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1573350571,
        "uid": 31417,
        "name": "TH\u8ba0NK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3953)\n\n2020.9.15 \u66f4\u65b0\u4e86$f$\u6570\u7ec4\u7684\u5b9a\u4e49\u4e0e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e00\u4e9b\u5c0f\u95ee\u9898\n# \u96f6.\u524d\u8bb0\n\u9053\u8def\u5343\u4e07\u6761,\u5361\u5e38\u7b2c\u4e00\u6761.$O2$\u4e0d\u89c4\u8303\uff0c\u5e38\u6570\u4e24\u884c\u6cea.\n\n\u672c\u9898\u89e3\u8981\u7528$O2$\u624d\u53ef\u4ee5\u8fc7\n\n~~(\u56e0\u4e3a\u5e38\u6570\u95ee\u9898\u8c03\u4e86\u4e00\u4e2a\u661f\u671f\u4e5f\u662f\u4e2a\u5947\u624d)~~\n\n# \u4e00.\u5927\u4f53\u601d\u8def\n### $30pts$\n\n\u5bf9\u4e8e$k=0$\u7684\u60c5\u51b5 \u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u6c42\u6700\u77ed\u8def\u7684\u6761\u6570\n\n\u679c\u65ad\u9009\u62e9$dij$\uff0c$30$\u5206\u8f7b\u677e\u5230\u624b\n\n### $100pts$\n\u63a5\u4e0b\u6765\u5c31\u8981\u89e3\u51b3$k$\u7684\u95ee\u9898\n\n\u5f53\u7136\u6211\u4eec\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u8981\u628a$d$\u7ed9\u6c42\u51fa\u6765\n\n\u4e8e\u662f$dij$\u4ecd\u7136\u4fdd\u7559\n\n\u770b\u5230$k<=50$ \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f80$O(nk)$\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\u4e0a\u60f3\n\n\u5f53\u7136\u6700\u5148\u60f3\u5230\u7684\u4e5f\u5c31\u662f\u6b63\u89e3$dp$\u4e86\n\n# \u4e8c.\u5b9e\u73b0\u65b9\u6cd5\n### i.$dp$\u72b6\u6001\u8bbe\u8ba1\n\u6bcf\u8d70\u591a\u4e00\u6b65\u5c31\u4f1a\u591a\u8d70\u4e00\u5b9a\u7684\u6b65\u6570 \u6211\u4eec\u53ef\u4ee5\u628a$k$\u770b\u6210\u4e00\u4e2a\u6d88\u8017\u54c1\n\n\u65e2\u7136\u590d\u6742\u5ea6\u662f$O(nk)$\u4e86 \u6211\u4eec\u5c31\u53ef\u4ee5\u53cd\u63a8\u51fa(\u5f53\u7136\u76f4\u63a5\u60f3\u4e5f\u53ef\u4ee5\u60f3\u5f97\u5230)\u72b6\u6001\uff1a\n\n$f[i][j]:$\u5f53\u8d70\u5230$i$\u8fd9\u4e2a\u70b9\u65f6\u8fd8\u5269\u4e0b$j$\u4e2a\u53ef\u4ee5\u591a\u8d70\u7684\u6b65\u6570\n\n\u90a3\u4e48\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u5c31\u53ef\u4ee5\u8f6c\u79fb\n\n\u4e8e\u662f\u72b6\u6001\u65b9\u7a0b\u5c31\u5341\u5206\u6d45\u663e\u4e86\n\n### ii.$dp$\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u8981\u4ece$a$\u8f6c\u79fb\u5230$b$ \u8fb9\u7684\u6743\u503c\u4e3a$val$\n\n$f[a][j]$\u4ee3\u8868\u7740\u5230$a$\u70b9\u8fd8\u5269\u4e0b$j$\u4e2a\u6b65\n\u800c\u4e14\u5230\u8fbe\u7ec8\u70b9\u6070\u597d\u8d70\u5b8c\u8fd9$j$\u4e2a\u6b65\u6570\u7684\u60c5\u51b5\u6570\n\n\u90a3\u4e48\u8fd9\u79cd\u8def\u5f84\u5230$a$\u65f6\u7ecf\u8fc7\u7684\u603b\u8def\u7a0b\u4e3a$dis[a]+k-j$\n\n\u518d\u8d70$val$\u5230\u8fbe$b$\u5c31\u8d70\u4e86$dij[a]+k-j+val$\n\n\u8d70\u591a\u4f59\u7684\u90e8\u5206\u5c31\u662f$dij[a]-dis[b]+k-j+val$\n\n\u90a3\u4e48\u5269\u4e0b\u7684\u6b65\u6570\u5c31\u662f$dis[b]-dis[a]+j-val$ \uff08\u62ff$k$\u51cf\n\n\u4e8e\u662f$f[a][j]+=f[b][dis[b]-dis[a]+j-val]$\n\n**\u6ce8\u610f\u5728\u8f6c\u79fb\u4e4b\u524d\u8981\u5148\u5224\u65ad\u8fd9\u662f\u4e0d\u662f\u8d1f\u6570**\n\n### iii.\u5224\u96f6\u73af\n\u8fd9\u9053\u9898\u6700\u5751\u7684\u5730\u65b9\u5c31\u662f\u6709\u96f6\u73af\u8fd9\u4e2a\u4e1c\u897f\n\n\u666e\u901a\u7684\u96f6\u73af\u6211\u4eec\u53ef\u4ee5\u7528$spfa$\u6c34\u8fc7\n\n\u4f46\u662f\u5728\u8fd9\u9053\u9898\u4e2d**\u4e0d\u662f\u6240\u6709\u7684\u96f6\u73af\u90fd\u4f1a\u88ab\u8dd1**\n\n\u5982\u679c\u6709\u4e00\u4e2a\u96f6\u73af\u88ab\u8def\u5f84\u7ecf\u8fc7\u65f6\u8def\u7a0b\u6bd4$k+d$\u8fd8\u5927\n\n\u90a3\u4e48\u8fd9\u4e2a\u73af\u5c31\u662f\u5e9f\u7684\n\n\u4e3a\u4e86\u5224\u65ad\u4e00\u4e2a\u96f6\u73af\u4f1a\u4e0d\u4f1a\u88ab\u7b97\u5728\u8def\u5f84\u4e2d\n\n\u6211\u4eec\u53ef\u4ee5\u6b63\u4e00\u904d$dij$ \u53cd\u4e00\u904d$dij$\n\n\u5982\u679c\u4e00\u4e2a\u70b9$dis1+dis2>k+d$ \u90a3\u4e48\u5b83\u5c31\u4e0d\u7528\u5728\u88ab\u8003\u8651\u4e86\n\n\u5c31\u7b97\u6709\u96f6\u73af\u4e5f\u4f1a\u88ab\u6392\u9664\u5728\u5916\n\n**code**\n```\ndij(1);\ndij2(n);//\u6b63\u53cd\u4e24\u6b21dij \nmin_dis=dis[n];//n\u7684dis1\u5c31\u662fd \nfor(register int i=1;i<=n;i++){\n\tif(dis[i]==2139062143 || dis2[i]==2139062143) continue;\n\t//\u6ca1\u8d70\u8fc7\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6392\u9664 \n\tif(dis[i]+dis2[i]>k0+min_dis) continue;//\u8d70\u4e0d\u5230\u4e5f\u53ef\u4ee5\u6392\u9664 \n\tw[i]=1;//\u6392\u9664\u4e0d\u4e86\u5c31\u6253\u6807\u8bb0 \u5f85\u4f1a\u513f\u6ca1\u6709\u6807\u8bb0\u5c31\u4e0d\u904d\u5386 \n}\n```\n### iv.\u8bb0\u5fc6\u5316\u641c\u7d22\n\u5f53\u6211\u4eec\u4f7f\u7528$dp$\u7684\u65f6\u5019\u4f1a\u53d1\u73b0\u4e00\u4e2a\u5c0f\u95ee\u9898\n\n\u600e\u4e48\u786e\u5b9a\u4e00\u4e2a\u70b9\u5728\u904d\u5386\u4e4b\u524d\u8981\u5148\u904d\u5386\u53e6\u5916\u7684\u70b9\u5462\n\n\u6211\u4eec\u5c31\u9700\u8981\u7528\u62d3\u6251\u6216\u8005\u5176\u5b83\u795e\u5947\u7684\u64cd\u4f5c\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u653e\u5728\u4e00\u4e2a$dfs$\u91cc\u5c31\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\n\n\u800c\u4e14\u901a\u8fc7$dfs$\u6211\u4eec\u53ef\u4ee5\u5224\u96f6\u73af\n\n\u5982\u679c\u4e00\u4e2a$i,j$\u7684\u60c5\u51b5\u5728\u4e4b\u524d\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e86\n\n\u90a3\u4e48\u518d\u51fa\u73b0\u4e00\u6b21\u5c31\u80af\u5b9a\u6709\u96f6\u73af\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a$bool$\u6765\u5b58\u4e00\u4e0b\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21$dfs$\u90fd\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e0b\u5f53\u524d\u5269\u4e0b\u7684\u6b65\u6570$l$\n\n**code**\n```cpp\ninline int dfs(int now,int l){//\u5230now\u70b9\u8fd8\u5269\u4e0bl\u6b65 \n\tif(g[now][l]) return -1;//\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u51fa\u73b0\u8fc7\u90a3\u4e48\u5c31\u662f\u6709\u96f6\u73af \n\tif(f[now][l]!=-1) return f[now][l];//\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u8d70\u8fc7\u4e86 \u76f4\u63a5\u8fd4\u56de \n\tg[now][l]=1;//\u5f53\u524d\u72b6\u6001\u6253\u6807\u8bb0 \n\tlong long sum=0;\n\tif(now==n && l==0) sum++;//\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u7ec8\u70b9\u90a3\u4e48\u7b54\u6848+1 \n\tfor(register int i=head[now];i;i=edge[i].next){\n\t\tint to=edge[i].to;\n\t\tif(!w[to]) continue;//\u5982\u679c\u4e0d\u5728\u8def\u5f84\u4e0a\u5c31\u4e0d\u904d\u5386 \n\t\tif(dis[now]+edge[i].val>l+dis[to]) continue;\n\t\tint flag=dfs(to,l-dis[now]-edge[i].val+dis[to]);\n\t\t//\u72b6\u6001\u8f6c\u79fb \n\t\tif(flag==-1) return -1;//\u5982\u679c\u5b83\u904d\u5386\u7684\u70b9\u51fa\u73b0\u4e86\u96f6\u73af \u4e5f\u8fd4\u56de-1 \n\t\tsum=(sum+flag)%p;\n\t}\n\tf[now][l]=sum;//\u8bb0\u5fc6 \n\tg[now][l]=0;//\u8bb0\u5f97\u628a\u72b6\u6001\u6539\u56de\u53bb \n\treturn sum;\n}\n```\n# \u4e09.\u4ee3\u7801\n```\n#pragma GCC optimize(2)\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int maxn=100005;\ninline int R(){//\u5feb\u8bfb \n\tint r=0;char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c)) r=(r<<1)+(r<<3)+(c^48),c=getchar();\n\treturn r;\n}\nlong long ans,min_dis;\nint t,head[maxn],tot,n,m,k0,p,dis[maxn],flag[maxn],dis2[maxn];\nint head2[maxn],tot2,w[maxn];\nint f[maxn][55];\nbool g[maxn][55];\nstruct node{\n\tint next,to,val;\n}edge[maxn<<1],edge2[maxn<<1];\ninline void add(int from,int to,int val){\n\tedge[++tot].next=head[from];\n\tedge[tot].to=to;\n\tedge[tot].val=val;\n\thead[from]=tot;\n\treturn ;\n}\ninline void add2(int from,int to,int val){\n\tedge2[++tot2].next=head2[from];\n\tedge2[tot2].to=to;\n\tedge2[tot2].val=val;\n\thead2[from]=tot2;\n\treturn ;\n}\nstruct hh{\n\tint num,dis;\n\tbool friend operator < (hh a,hh b){\n\t\treturn a.dis>b.dis;\n\t}\n};\npriority_queue <hh> q;\ninline void clear(){//\u8bb0\u5f97\u521d\u59cb\u5316 \n\tmemset(w,0,sizeof(w));\n\tmemset(dis,127,sizeof(dis));\n\tmemset(dis2,127,sizeof(dis2));\n\tmemset(f,-1,sizeof(f));\n\tmemset(head,0,sizeof(head));\n\tmemset(head2,0,sizeof(head2));\n\tmemset(g,0,sizeof(g));\n\ttot=0;ans=0;tot2=0;\n}\ninline void dij(int now){//dij\n\tmemset(flag,0,sizeof(flag));\n\twhile(!q.empty()) q.pop();\n\thh h={now,0};\n\tq.push(h);\n\twhile(!q.empty()){\n\t\thh u=q.top();\n\t\tq.pop();\n\t\tif(flag[u.num]) continue;\n\t\tflag[u.num]=1;\n\t\tdis[u.num]=u.dis;\n\t\tfor(register int i=head[u.num];i;i=edge[i].next){\n\t\t\tif(flag[edge[i].to]) continue;\n\t\t\th.dis=u.dis+edge[i].val;\n\t\t\th.num=edge[i].to;\n\t\t\tq.push(h);\n\t\t}\n\t}\n\treturn ;\n}\ninline void dij2(int now){//dij2\n\tmemset(flag,0,sizeof(flag));\n\twhile(!q.empty()) q.pop();\n\thh h={now,0};\n\tq.push(h);\n\twhile(!q.empty()){\n\t\thh u=q.top();\n\t\tq.pop();\n\t\tif(flag[u.num]) continue;\n\t\tflag[u.num]=1;\n\t\tdis2[u.num]=u.dis;\n\t\tfor(register int i=head2[u.num];i;i=edge2[i].next){\n\t\t\tif(flag[edge2[i].to]) continue;\n\t\t\th.dis=u.dis+edge2[i].val;\n\t\t\th.num=edge2[i].to;\n\t\t\tq.push(h);\n\t\t}\n\t}\n\treturn ;\n}\ninline int dfs(int now,int l){//\u5230now\u70b9\u8fd8\u5269\u4e0bl\u6b65 \n\tif(g[now][l]) return -1;//\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u51fa\u73b0\u8fc7\u90a3\u4e48\u5c31\u662f\u6709\u96f6\u73af \n\tif(f[now][l]!=-1) return f[now][l];//\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u8d70\u8fc7\u4e86 \u76f4\u63a5\u8fd4\u56de \n\tg[now][l]=1;//\u5f53\u524d\u72b6\u6001\u6253\u6807\u8bb0 \n\tlong long sum=0;\n\tif(now==n && l==0) sum++;//\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u7ec8\u70b9\u90a3\u4e48\u7b54\u6848+1 \n\tfor(register int i=head[now];i;i=edge[i].next){\n\t\tint to=edge[i].to;\n\t\tif(!w[to]) continue;//\u5982\u679c\u4e0d\u5728\u8def\u5f84\u4e0a\u5c31\u4e0d\u904d\u5386 \n\t\tif(dis[now]+edge[i].val>l+dis[to]) continue;\n\t\tint flag=dfs(to,l-dis[now]-edge[i].val+dis[to]);\n\t\t//\u72b6\u6001\u8f6c\u79fb \n\t\tif(flag==-1) return -1;//\u5982\u679c\u5b83\u904d\u5386\u7684\u70b9\u51fa\u73b0\u4e86\u96f6\u73af \u4e5f\u8fd4\u56de-1 \n\t\tsum=(sum+flag)%p;//\u5426\u5219\u8bb0\u5728f[i][j]\u91cc \n\t}\n\tf[now][l]=sum;//\u8bb0\u5fc6 \n\tg[now][l]=0;//\u8bb0\u5f97\u628a\u72b6\u6001\u6539\u56de\u53bb \n\treturn sum;\n}\nint main(){\n\tt=R();\n\twhile(t--){\n\t\t//\u8bb0\u5f97\u521d\u59cb\u5316 \n\t\tclear();\n\t\tn=R();m=R();k0=R();p=R();\n\t\tfor(register int i=1;i<=m;i++){\n\t\t\tint a=R(),b=R(),c=R();\n\t\t\tadd(a,b,c);\n\t\t\tadd2(b,a,c);\n\t\t}\n\t\tdij(1);\n\t\tdij2(n);//\u6b63\u53cd\u4e24\u6b21dij \n\t\tmin_dis=dis[n];//n\u7684dis1\u5c31\u662fd \n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tif(dis[i]==2139062143 || dis2[i]==2139062143) continue;\n\t\t\t//\u6ca1\u8d70\u8fc7\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6392\u9664 \n\t\t\tif(dis[i]+dis2[i]>k0+min_dis) continue;//\u8d70\u4e0d\u5230\u4e5f\u53ef\u4ee5\u6392\u9664 \n\t\t\tw[i]=1;//\u6392\u9664\u4e0d\u4e86\u5c31\u6253\u6807\u8bb0 \u5f85\u4f1a\u513f\u6ca1\u6709\u6807\u8bb0\u5c31\u4e0d\u904d\u5386 \n\t\t}\n\t\tbool f=0;\n\t\tfor(register int k=0;k<=k0;k++){//\u679a\u4e3e\u5269\u4f59\u6b65\u6570\n\t\t\tint qq=dfs(1,k);\n\t\t\tif(qq==-1) f=1; \n\t\t\telse ans=(ans+qq)%p;\n\t\t}\n\t\tif(!f) printf(\"%lld\\n\",ans);\n\t\telse printf(\"-1\\n\");\n\t}\n}\n```\n# \u56db.\u540e\u8bb0\n\u672c\u9898\u8981\u7528\u5230$dp$\u7684\u601d\u60f3\u548c\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u6cd5\n\n\u6211\u4eec\u8981\u901a\u8fc7\u9898\u76ee\u7684\u590d\u6742\u5ea6\u53cd\u63a8\u51fa\u5408\u7406\u7684\u72b6\u6001\u548c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\nFinally\uff0c\u8c22\u8c22\u5927\u5bb6\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/HongseFox/solution-p3953)",
        "postTime": 1600063252,
        "uid": 93838,
        "name": "Hongse_Fox",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "$NOIp2017tgD1T3$\n\n\u5f53\u7136\u662f\u5148\u8dd1\u4e2a$dijkstra$\u628a\u6700\u77ed\u8def\u6c42\u51fa\u6765\n\n\u7136\u540e\u60f3\u5230dp\u6c42\u7b54\u6848\n\n$dp_{u,d}$\u8868\u793a\u5230$u$\u8def\u7a0b\u4e3a$d$\u65b9\u6848\u6570\n\n\u72b6\u6001\u592a\u591a\uff0c\u770b\u5230$K<=50$\n\n\u66f4\u6539\u72b6\u6001$dp_{u,d}$\u8868\u793a\u8def\u7a0b\u4e3a$dis_u+d$\u7684\u65b9\u6848\u6570($dis_u$\u8868\u793a\u5230$u$\u7684\u6700\u77ed\u8def)\n\n\u7136\u540e\u7528\u52a0\u6cd5\u539f\u7406\u8f6c\u79fb\n\n\u9700\u8981\u4ece\u6700\u7ec8\u6001$n$\u8dd1\u5230\u6700\u521d\u6001$1$\u6240\u4ee5\u8dd1\u53cd\u56fe\n\n\u76f4\u63a5\u62d3\u6251\u4e0a\u8dd1\u597d\u50cf\u5f88\u9ebb\u70e6\uff0c\u7528\u8bb0\u5fc6\u5316$dfs$\n\n\u8003\u8651\u4e00\u4e0b-1\u7684\u60c5\u51b5\uff0c\u5c31\u662f0\u73af\u7684\u60c5\u51b5\uff0c\u5f00\u4e00\u4e2a$flag_{u,d}$\u7684\u6570\u7ec4\uff0c\u5982\u679c\u91cd\u590d\u5230\u8fd9\u4e2a\u72b6\u6001\u4e24\u904d\u5c31\u8bf4\u660e\u67090\u73af\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 200010\n#define maxm 51\nusing namespace std;\nstruct node{\n\tint val, dis;\n\tbool operator < (const node &x) const{ return x.dis < dis; }\n};\npriority_queue <node> q;\nstruct Edge{\n\tint to, next, len;\n}edge[maxn << 1], edge2[maxn << 1];\nint num, num2, head[maxn], head2[maxn], dis[maxn], vis[maxn], flag[maxn][maxm], dp[maxn][maxm], n, m, K, P;\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid addedge(int x, int y, int z){ edge[++num] = (Edge){y, head[x], z}, head[x] = num; }\nvoid addedge2(int x, int y, int z){ edge2[++num2] = (Edge){y, head2[x], z}, head2[x] = num2; }\n\nvoid dijkstra(){\n\tmemset(vis, 0, sizeof(vis));\n\tfor (int i = 1; i <= n; ++i) dis[i] = 1e9; dis[1] = 0;\n\tq.push((node){1, 0});\n\twhile (!q.empty()){\n\t\tnode tmp = q.top(); q.pop();\n\t\tint u = tmp.val, l = tmp.dis;\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = head[u]; i; i = edge[i].next){\n\t\t\tint v = edge[i].to;\n\t\t\tif (dis[v] > dis[u] + edge[i].len){\n\t\t\t\tdis[v] = dis[u] + edge[i].len;\n\t\t\t\tif (!vis[v]) q.push((node){v, dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint dfs(int u, int l){\n\tif (l < 0 || l > K) return 0;\n\tif (flag[u][l]) return -1;\n\tif (dp[u][l] != -1) return dp[u][l];\n\tflag[u][l] = 1;\n\tint sum = 0;\n\tfor (int i = head2[u]; i; i = edge2[i].next){\n\t\tint v = edge2[i].to;\n\t\tint tmp = dfs(v, dis[u] + l - dis[v] - edge2[i].len);\n\t\tif (tmp == -1) return -1;\n\t\t(sum += tmp) %= P;\n\t}\n\tif (u == 1 && !l) ++sum;\n\tdp[u][l] = sum;\n\tflag[u][l] = 0;\n\treturn sum;\n}\n\nint main(){\n\tint Q = read(); \n\twhile (Q--){\n\t\tnum = num2 = 0;\n\t\tmemset(head, 0, sizeof(head));\n\t\tmemset(head2, 0, sizeof(head2));\n\t\tn = read(), m = read(), K = read(), P = read();\n\t\tfor (int i = 1; i <= m; ++i){\n\t\t\tint x = read(), y = read(), z = read();\n\t\t\taddedge(x, y, z);\n\t\t\taddedge2(y, x, z);\n\t\t}\n\t\tdijkstra();\n\t\tmemset(dp, 255, sizeof(dp));\n\t\tmemset(flag, 0, sizeof(flag));\n\t\tint ans = 0, flag = 0;\n\t\tfor (int i = 0; i <= K; ++i){\n\t\t\tint tmp = dfs(n, i);\n\t\t\tif (tmp == -1){\n\t\t\t\tflag = 1; break;\n\t\t\t}\n\t\t\t(ans += tmp) %= P;\n\t\t}\n\t\tif (!flag) printf(\"%lld\\n\", ans); else puts(\"-1\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1572615214,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "#  _Dijkstra+DP!!!_ \n\n~~\u5176\u5b9e\u5c31\u662f\u628aDijkstra\u4f18\u5316\u4e3a\u53ef\u4ee5\u8dd10\u8fb9\u7684\u6700\u77ed\u8def\u7b97\u6cd5~~\n\n\u8be6\u60c5\u8bf7\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long t,n,m,k,p, s,e,w, pf[200010],pe[400010],pn[400010],pw[400010],pp[200010] ,dp[100010][51],bj[100010][51], ans,pd, nn, x,y,z;\n\n//s \u8fb9\u7684\u8d77\u70b9, e \u7ec8\u70b9, w \u6743\u503c\n\n//\u90bb\u63a5\u8868\u5b58\u56fe\uff1apf \u4ee5i\u4e3a\u8d77\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9, pe \u8fb9\u7684\u7ec8\u70b9, pn \u4e0b\u4e00\u6761\u540c\u8d77\u70b9\u7684\u8fb9, pw \u8fb9\u7684\u6743\u503c \n\n//pp[1~n] \u70b91\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff08\u7531\u4e8e\u672c\u9898\u4e0d\u7528\u8dd1\uff0c\u6240\u4ee5pp[1~n]\u662f\u4f5c\u5e9f\u7684\uff09, pp[n+1,n+n] \u70b9n\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff08pp[n+i]\u5b58\u70b9n\u5230i\u7684\u6700\u77ed\u8def\uff09 \n\n//dp[i][j] \u4ece\u70b91\u5230\u70b9i\u7684\u8ddd\u79bb \u6bd4 \u4ece\u70b91\u5230\u70b9i\u7684\u6700\u77ed\u8ddd\u79bb \u5927j\u7684\u8def\u5f84\u4e2a\u6570, bj \u6807\u8bb0\u8fd9\u6761\u8def\u5f84\u4e2d\u8d70\u5230dfs\uff08i\uff0cj\uff09\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u6709\u8d70\u8fc7\uff08\u5224\u65ad\u662f\u5426\u6709\u65e0\u9650\u4e2a\u5408\u6cd5\u8def\u5f84\u6761\u6570\uff0c\u67090\u73af\u4e0d\u4e00\u5b9a\u6709\u65e0\u9650\u4e2a\u5408\u6cd5\u8def\u5f84\u6761\u6570\uff09\uff0c\u5982\u679c\u8d70\u8fc7\uff0c\u8bc1\u660e\u6709\u65e0\u9650\u4e2a\u5408\u6cd5\u8def\u5f84\u6761\u6570\n\n//ans \u6700\u7ec8\u7b54\u6848, pd \u5224\u65ad\u662f\u5426\u6709\u65e0\u9650\u4e2a\u5408\u6cd5\u8def\u5f84\u6761\u6570\uff0c\u5982\u679c\u662f\uff0c\u76f4\u63a5\u8df3\u51fa\u8f93\u51fa-1 \n\n//nn \u628aDijkstra\u4f18\u5316\u4e3a\u53ef\u4ee5\u8dd10\u8fb9\u7684\u6700\u77ed\u8def\u7684\u5173\u952e\uff1a\u6807\u8bb0\u5165\u961f\u987a\u5e8f\n\n//x \u4e00\u7ea7\u5faa\u73af, y \u4e8c\u7ea7\u5faa\u73af, z(z1) \u4e09\u7ea7\u5faa\u73af \n\nstruct aa//\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53 \uff1a p \u70b9i, l \u70b9n\u5230\u70b9i\u5728\u5165\u961f\u65f6\u7684\u6700\u77ed\u8ddd\u79bb, n \u5165\u961f\u987a\u5e8f \n{\n    long long p,l,n;\n    aa()\n    {\n        p=l=0;\n    }\n}h;\n\n//\u91cd\u8f7d\u4f18\u5148\u961f\u5217\u7684\u89c4\u5219\uff1a\u5982\u679c\u70b9n\u5230\u70b9i\u5728\u5165\u961f\u65f6\u7684\u6700\u77ed\u8ddd\u79bb \u4e0e \u70b9n\u5230\u70b9j\u5728\u5165\u961f\u65f6\u7684\u6700\u77ed\u8ddd\u79bb \u76f8\u540c\u65f6 \u5148\u5165\u961f\u7684\u9760\u524d\nstruct hhh\n{\n    inline bool operator()(aa a,aa b)\n    {\n        return a.l==b.l?a.n>b.n:a.l>b.l;\n    }\n};\n\n//\u5c06\u70b9i\u3001\u70b9n\u5230\u70b9i\u5728\u5165\u961f\u65f6\u7684\u6700\u77ed\u8ddd\u79bb\u3001\u5165\u961f\u987a\u5e8f \u5408\u5e76\u4e3a\u4e00\u4e2a\u7c7b\u578b\u4e3aaa\u7684\u53d8\u91cf \ninline aa hb(long long a,long long b,long long d)\n{\n    aa c;\n    c.p=a;\n    c.l=b;\n    c.n=d;\n    return c;\n}\n\npriority_queue<aa,vector<aa>,hhh>yx;\n\n//dp \ninline long long dfs(long long po,long long j)//po \u76ee\u524d\u8d70\u5230\u7684\u70b9\uff0c j\u591a\u8d70\u7684\u6b65\u6570 \n{\n\tif(bj[po][j]||pd)//\u5982\u679c\u8d70\u8fc7dfs\uff08i\uff0cj\uff09\u8fd9\u4e2a\u72b6\u6001\uff0c \u8bc1\u660e\u6709\u65e0\u9650\u4e2a\u5408\u6cd5\u8def\u5f84\u6761\u6570\uff0c\u76f4\u63a5\u8df3\u51fa \n\t{\n\t\tpd=1;\n\t\treturn 0;\n\t}\n\t\n    if(dp[po][j]) //\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u5df2\u7ecf\u8bb0\u4e0b\u5c31\u76f4\u63a5\u8df3\u51fa \n        return dp[po][j];\n    \n    bj[po][j]=1;//\u6807\u8bb0\u72b6\u6001 \n    \n    if(po==n)//\u5982\u679c\u5230\u8fbe\u7ec8\u70b9\u5219\u591a\u4e00\u79cd\u8def\u5f84 \n        dp[po][j]=(dp[po][j]+1)%p;\n    //\u8fd9\u91cc\u4e0d\u8981return\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9\u540e\u518d\u8d70\u8d70 \n    \n    for(long long z1=pf[po];z1;z1=pn[z1])//\u904d\u5386\u4ee5po\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8def \n        if(pp[pe[z1]+n]+pw[z1]-pp[po+n] +j<=k)//\u5982\u679c\uff1a\u70b9n\u5230\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84+\u8fd9\u6761\u8fb9\u7684\u6743\u503c-\u70b9n\u5230\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5f84+\u539f\u6765\u591a\u8d70\u7684\u6b65\u6570 \u5c0f\u4e8e\u7b49\u4e8e k \n            dp[po][j]=(dp[po][j]+dfs(pe[z1],pp[pe[z1]+n]+pw[z1]-pp[po+n]+j))%p;//\u72b6\u6001\u8f6c\u79fb\uff08\u522b\u5fd8\u4e86%\uff09 \n    \n    bj[po][j]=0;//\u56de\u6eaf,\u56e0\u4e3a\u6709\u53ef\u80fd\u51fa\u73b0\u7ebf\u8def\u4e0d\u540c\u72b6\u6001\u76f8\u540c\u7684\u60c5\u51b5 \n    \n    return dp[po][j];\n}\n\nint main()\n{\n    scanf(\"%lld\",&t);\n    for(x=1;x<=t;++x)\n    {\n        scanf(\"%lld%lld%lld%lld\",&n,&m,&k,&p);\n        \n        //\u56e0\u4e3a\u6709\u591a\u7ec4\u6570\u636e\uff0c\u6240\u4ee5\u8981\u91cd\u7f6e\u53d8\u91cf \n        ans=pd=nn=0;\n        memset(pf,0,sizeof pf);\n        memset(pp,0x3f,sizeof pp);\n        memset(dp,0,sizeof dp);\n        memset(bj,0,sizeof bj);\n        \n        //\u8f93\u5165\u8fb9 \n        for(y=1;y<=m;++y)\n        {\n            scanf(\"%lld%lld%lld\",&s,&e,&w);\n            \n            //\u90bb\u63a5\u8868\u5b58\u56fe\u4f18\u5316 \n            pn[y]=pf[s];\n            pe[pf[s]=y]=e;\n            pn[y+m]=pf[e+n];\n            pe[pf[e+n]=y+m]=s+n;\n            pw[y]=pw[y+m]=w;\n        }\n        \n        //Dijkstra\n        pp[n*2]=0;\n        for(yx.push(hb(n*2,0,0));yx.size();yx.pop())\n            if(pp[(h=yx.top()).p]==h.l)\n                for(y=pf[h.p];y;y=pn[y])\n                    if(pp[h.p]+pw[y]<pp[pe[y]])\n                        yx.push(hb(pe[y],pp[pe[y]]=pp[h.p]+pw[y],++nn));\n        \n        ans=dfs(1,0);\n        \n        printf(\"%lld\\n\",pd?-1:ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1540044686,
        "uid": 39586,
        "name": "ping_fan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "## NOIP2017 \u901b\u516c\u56ed \u9898\u89e3\n\n> \u9898\u610f\uff1a\u8bb0\u4e00\u6709\u5411\u56fe1\u5230n\u7684\u957f\u5ea6\u4e3al\uff0c\u7ed9\u51fak\u6c42\u51fa1\u5230n\u6240\u6709\u53ef\u884c\u8def\u5f84\u4e2d\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8el+k\u7684\u8def\u5f84\u603b\u6570\u3002\n\n- \u672c\u8d28\uff1a\u6700\u77ed\u8def\u8ba1\u6570\u95ee\u9898\n\n\u8003\u8651\u66b4\u529b\n\n- 0% \u5168\u90e8\u8f93\u51fa-1\uff08\u600e\u4e48\u53ef\u80fd\uff1f\u591a\u6d4b\uff09\n\n- 30% \u5bf9\u4e8ek=0\u7684\u60c5\u51b5 \u5728dijkstra \u66f4\u65b0\u6700\u77ed\u8def\u7684\u65f6\u5019\u987a\u5e26\u66f4\u65b0ans\u6570\u7ec4\n\n\u8be6\u7ec6\u8bb2\u4e0b\uff1a ans[u] \u8868\u793a\u4ece1\u8d70\u5230u\u6700\u77ed\u8ddd\u79bb\u6709\u591a\u5c11\u6761\u3002\n\n$1^0$ \u5f53   $ d[v]>d[u]+w[u,v] $  \u65f6 :\n\n\u5f53\u4ece1\u6cbf\u6700\u77ed\u8def\u5f84\u8d70\u5230u\u7136\u540e\u901a\u8fc7u-->v\u8d70\u5230v\u65f6\u6700\u77ed\u8def\u8981\u77ed\u4e8e\u73b0\u6709\u7684\u6700\u77ed\u8def\u8d70\u5230v\u7684\u65f6\u5019\n\n\u6211\u4eec\u91c7\u7528\u5982\u4e0b\u66f4\u65b0:$ans[v]=ans[u] $(\u7531\u4e8e\u5047\u8bbe\u8fd9\u6761\u662f\u6700\u77ed\u8def\u90a3\u4e48\u8d70\u5230u\u548c\u8d70\u5230v\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u662f\u663e\u7136\u7684)\n\n$2^0$ \u5f53 $ d[v]=d[u]+w[u,v]$ \u65f6\uff1a\n\n\u90a3\u4e48\u7531\u4e8e\u52a0\u6cd5\u539f\u7406\uff0c\u53ef\u4ee5\u5c06\u53ef\u80fd\u6027\u7d2f\u52a0  $ ans[v]= ans[v] + ans[u] $\n\n\u7136\u540e\u7b54\u6848\u5c31\u662f$ ans[n] $\n\n\u8fd9\u6837\u6b63\u786e\u7684\u987a\u5e8f\u4f9d\u636e\u662f\u8fd9\u6837\u7684\uff1a\n\n\u7531\u4e8edijktra\u6211\u4eec\u5728\u505a\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u8d77\u70b9\u66f4\u65b0\u7684\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u4e0a\u7684\u503c\uff0c\u5728\u6ca1\u67090\u8fb9\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6837\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u505a\n\n\u4ee3\u7801\uff1a\n```\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n#1 AC 5ms/6676KB \n#2 AC 8ms/6820KB\n#3 WA  \n#4 WA\n#5 WA\n#6 WA\n#7 AC 204ms/6664KB\n#8 WA\n#9 RE\n#10 WA\n```\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXM=500005,MAXN=10005;\nint head[MAXN],d[MAXN],n,m,s,tot=0,INF,f[MAXN];\nint mo,k;\nbool vis[MAXN];\nstruct record{\n    int pre,to,w;\n}a[MAXM];\nvoid adde(int u,int v,int w)\n{\n    a[++tot].pre=head[u];\n    a[tot].to=v;\n    a[tot].w=w;\n    head[u]=tot;\n}\nstruct rec{\n    int id,lenth;\n};\nstruct cmp{\n    bool operator() (rec a,rec b){\n        if  (a.lenth!=b.lenth) return a.lenth>b.lenth;\n        else return a.id>b.id;\n    }\n};\npriority_queue<rec,vector<rec>,cmp >q;\nvoid dijkstra(int s)\n{\n    memset(f,0,sizeof(f));\n    memset(vis,false,sizeof(vis));\n    memset(d,127,sizeof(d));INF=d[0];d[s]=0;\n    f[1]=1;\n    rec Node; Node.id=s; Node.lenth=0; q.push(Node);\n    while (! q.empty()){\n        rec Node=q.top(); q.pop();\n        int u=Node.id; \n        if (vis[u]==true) continue;\n        vis[u]=true;\n        for (int i=head[u];i!=0;i=a[i].pre){\n            int v=a[i].to;\n            if (d[v]-a[i].w>d[u]) {\n                d[v]=a[i].w+d[u];\n                rec N; N.id=v;N.lenth=d[v];\n                f[v]=f[u]%mo;\n                q.push(N);\n            } else if (d[v]-a[i].w==d[u]) {\n            \tf[v]=(f[u]+f[v])%mo;\n            }\n        }\n    }\n}\nint main()\n{\n    int T; scanf(\"%d\",&T);\n    while (T--) {\n        scanf(\"%d%d%d%d\",&n,&m,&k,&mo);\n        tot=0;\n        memset(head,0,sizeof(head));\n        memset(a,0,sizeof(a));\n        for (int i=1;i<=m;i++) {\n            int u,v,w; scanf(\"%d%d%d\",&u,&v,&w);\n            adde(u,v,w);\n        }\n        dijkstra(1);\n        printf(\"%d\\n\",f[n]%mo);\n    }\n    return 0;\n}\n```\n\n- 100% \u8003\u8651\u8bb0\u5fc6\u5316\u641c\u7d22dp\n\n$ 1^0$  \u5224\u65ad-1\uff0c\u5728\u56fe\u4e2d\u67090\u73af\uff0c\u8fd9\u6837\u5728\u9012\u5f52\u7684\u65f6\u5019\u4f1a\u6b7b\n\n$ 2^0$ \u521d\u59cb\u5316\u6c42\u51fa\u6700\u77ed\u8def\uff08\u8003\u8651spfa\uff09\n\n$ 3^0$ \u679a\u4e3e\u72b6\u6001\uff0c $ ans= \\sum_{i=0} ^{k} dp(n,i) $\n\n \u8003\u8651\u6bcf\u4e00\u6b21dp\uff08\u641c\u7d22\uff09\u6709\u4e24\u4e2a\u53c2\u6570 root \u548c res\n \n root \u8868\u793a\u5f53\u524d\u5230\u8fbe\u90a3\u4e2a\u70b9\n \n res \u8868\u793a\u8fd8\u4f59\u591a\u5c11\u51a4\u6789\u8def\u53ef\u4ee5\u8d70\n \n \u8fd8\u6709\u4e00\u4e2a\u6570\u7ec4is_ok[root][res] \u8868\u793a\u5728root\u548cres\u7684\u9650\u5236\u4e0b\u6709\u6ca1\u67090\u73af\u5224-1\n \n \u6211\u4eec\u968f\u7740\u53cd\u56fe\u4ecen\u8dd1\u52301\uff08\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b54\u6848\u662f $\\sum_{i=0} ^{k} dp(n,i) $\u800c\u4e0d\u662f$\\sum_{i=0} ^{k} dp(1,i)\u6211\u4eec\u662f\u5012\u7740\u8dd1\u53ef\u4ee5\u51cf\u5c11\u4e07\u6076\u76840\u73af\u52a0\u5feb\u901f\u5ea6\uff09\n \n \n \u5f53\u524d\u7684\u70b9\u5728\u539f\u56fe\u4e2d\u7684\u524d\u9a71\u8bb0\u4e3av\u90a3\u4e48$dp[root][res]= \\sum _{all_{son}} dp(v,d[root]+res-d[v]-E[v,root]); $\n \n \u5224\u91cd\u7684\u65f6\u5019\u6ce8\u610f\u53ea\u8981\u6709\u4e00\u4e2a0\u73af\u5c31\u662f-1\uff0c\u53ca\u65f6\u9000\u51fa\u8f93\u51fa\n \n Hint \uff1a\u524d\u5411\u661f\u5b58\u7684\u65f6\u5019\u53ef\u4ee5\u5f04\u5f97struct \u4e0d\u7528\u6613\u4e71\u3002\u3002\n \n \u4ee3\u7801\uff1a\n ```\n \u6d4b\u8bd5\u70b9\u4fe1\u606f\n#1 AC 79ms/52212KB\n#2 AC 85ms/52484KB\n#3 AC 89ms/52388KB \n#4 AC 72ms/54280KB\n#5 AC 96ms/52628KB\n#6 AC 77ms/54304KB\n#7 AC 274ms/54392KB\n#8 AC 1027ms/60096KB\n#9 AC 1037ms/59396KB\n#10 AC 954ms/60924KB\n ```\n \n ```\n # include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=100005,MAXM=200005*2,MAXK=105;\nstruct rec{ int pre,to,w;};\nstruct star{\n\tint head[MAXN],tot=0;\n\trec a[MAXM];\n\tvoid adde(int u,int v,int w){\n\t\ta[++tot].pre=head[u];\n\t\ta[tot].to=v;\n\t\ta[tot].w=w;\n\t\thead[u]=tot;\n\t}\n}a,b;\nqueue<int>q;\nint n,m,k,mo;\nbool is_ok[MAXN][MAXK];\nint f[MAXN][MAXK],d[MAXN];\nvoid init()\n{\n\ta.tot=0,b.tot=0;\n\tmemset(a.head,0,sizeof(a.head));\n\tmemset(b.head,0,sizeof(b.head));\n\tmemset(a.a,0,sizeof(a.a));\n\tmemset(b.a,0,sizeof(b.a));\n}\nint dp(int root,int res)\n{\n\tint ans=0;\n\tif (res<0||res>k) return 0;\n\tif (is_ok[root][res]) {\n\t\tis_ok[root][res]=false;\n\t\treturn -1;\n\t}\n\tif (f[root][res]!=-1) return f[root][res];\n\tis_ok[root][res]=true;\n\tfor (int i=b.head[root];i;i=b.a[i].pre) {\n\t\tint v=b.a[i].to;\n\t\tint val=dp(v,d[root]+res-d[v]-b.a[i].w);\n\t\tif (val==-1) {\n\t\t\tis_ok[root][res]=false;\n\t\t\treturn -1;\n\t\t}\n\t\tans=(ans+val)%mo;\n\t}\n\tis_ok[root][res]=false;\n\tif (root==1&&res==0) ans++;\n\tf[root][res]=ans;\n\treturn ans; \n} \nint work() \n{\n\tscanf(\"%d%d%d%d\",&n,&m,&k,&mo);\n\tinit(); int u,v,w;\n\tfor (int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\ta.adde(u,v,w);\n\t\tb.adde(v,u,w);\n\t}\n\tmemset(d,0x7f,sizeof(d));\n\tmemset(f,-1,sizeof(f));\n\tqueue<int>q;\n\tq.push(1); d[1]=0;\n\twhile (!q.empty()) {\n\t\tint u=q.front();q.pop();\n\t\tfor (int i=a.head[u];i;i=a.a[i].pre) {\n\t\t\tint v=a.a[i].to;\n\t\t\tif (d[v]>d[u]+a.a[i].w) {\n\t\t\t\td[v]=d[u]+a.a[i].w;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0;\n\tfor (int i=0;i<=k;i++) {\n\t\tint val=dp(n,i);\n\t\tif (val==-1) return -1;\n\t\tans=(ans+val)%mo; \n\t}\n\treturn ans;\n}\nint main()\n{\n\tint T; scanf(\"%d\",&T);\n\twhile (T--)  printf(\"%d\\n\",work()); \n\treturn 0;\n}\n ```\n",
        "postTime": 1539696105,
        "uid": 16456,
        "name": "ljc20020730",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u8fd9\u662f2017\u5e74\u7684\u9898\uff0c\u5929\u77e5\u90532017\u5e74\u7684\u9898\u600e\u4e48\u96be\uff01\uff01\uff01\uff01  \n~~\u867d\u7136\u6211\u5728\u53d1\u9898\u89e3\uff0c\u4f46\u662f\u6211\u5728\u8003\u573a\u4e0a\u6ca1\u505a\u51fa\u6765\uff01\uff01\uff01QAQ~~\n\n\n*\n\n------------\n*\u89e3\u6790**\n\n\u5148\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c\u8bbedisi\u8868\u793a\u4ece1\u5230i\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8003\u8651\u5230K\u5e76\u4e0d\u4f1a\u7279\u522b\u7684\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u70b9\u62c6\u6210(K+1)\u4e2a\u70b9\uff0c\u8bbefi,s\u8868\u793a\u4ece1\u8d70\u5230i\u65f6\uff0c\u8ddd\u79bb\u4e3as+disi\u7684\u65b9\u6848\u6570\u3002   \n\u8fd9\u6837\u62c6\u51fa\u6765\u4e00\u5171\u4f1a\u6709n* (K+1)\u4e2a\u70b9\uff0c\u5c06\u6240\u6709\u7684\u70b9\u6309\u7167s\u5c06\u5206\u6210(K+1)\u5c42\uff0c\u6bcf\u4e00\u5c42\u6709n\u4e2a\u70b9\uff08\u8fd9\u4e9b\u90fd\u5f88\u663e\u7136\uff09\uff0c\u73b0\u5728\u8003\u8651\u8fde\u8fb9\uff0c\u8fde\u51fa\u6765\u7684\u8fb9\u53ea\u4f1a\u5f80\u540c\u4e00\u5c42\u6216\u4ee5\u4e0a\u7684\u5c42\u8fde\uff08\u8bf7\u81ea\u884c\u8111\u8865\uff09\uff0c\u90a3\u4e48\u82e5\u7b54\u6848\u662f-1\uff0c\u73af\u5fc5\u7136\u53ea\u4f1a\u5728\u540c\u4e00\u5c42\u5185\uff0c\u6b64\u5916\uff0c\u6bcf\u4e00\u5c42\u5185\u7684\u4e0d\u8de8\u5c42\u7684\u8fde\u8fb9 \u5fc5\u5b9a\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u6bcf\u4e00\u5c42\u7684\u62d3\u6251\u5e8f\u90fd\u76f8\u7b49\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u628a\u62d3\u6251\u5e8f\u505a\u51fa\u6765\uff0c\u82e5\u62d3\u6251\u5e8f\u505a\u4e0d\u51fa\u6765\uff0c\u4e5f\u5373\u610f\u5473\u7740\u73af\u7684\u5b58\u5728\uff0c\u5c31\u662f\u5b58\u5728\u65e0\u6570\u79cd\u65b9\u6848\uff0c\u5426\u5219\u76f4\u63a5\u8dd1\u6240\u6709\u5c42\u7684\u62d3\u6251\u6392\u5e8f\u6c42\u89e3\u5373\u53ef\u3002\n\n\u4e0d\u5e9f\u8bdd\u4e86\uff01\uff01\uff01\u4e0a\u4ee3\u7801\uff01\uff01\n\n**CODE**\uff1a\n```\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<iostream>\n\nusing namespace std;\n\n\nconst int N = 1e5 + 1, K = 51;\n\nint n,m,k,p,tot,ans = 0;\nint first[N],next[N << 1],en[N << 1],w[N << 1];\nint first1[N * K],next1[N * K << 1];\nint en1[N * K << 1],d[N * K];\nint q[N << 6],dis[N],dis1[N];\nint u[N << 1],v[N << 1],t[N << 1],f[N * K];\nbool bz[N];\n\ninline int read(){\n\tre int x = 0;\n\tre int flag = true;\n\tre int k = getchar();\n\twhile(k != '-' && !isdigit(k))\n\t\tk = getchar();\n\tif(k == '-'){\n\t\tk = getchar();\n\t\tflag = false;\n\t}\n\twhile(isdigit(k)){\n\t\tx = x * 10 + k - '0';\n\t\tk = getchar();\n\t}\n\treturn (flag ? x : -x);\n}\n\ninline void insert(int x,int y,int z){\n    next[++tot] = first[x];\n    first[x] = tot;\n    en[tot] = y;\n    w[tot] = z;\n}\ninline void insert1(int x,int y){\n    next1[++tot] = first1[x];\n    first1[x] = tot;\n    en1[tot] = y;\n    d[y]++;\n}\ninline int get(int x,int y){\n    return (x - 1) * (k + 1) + y + 1;\n}\nint main(){\n    int T = read();\n    while(T--){\n        n = read(); m = read(); k = read(); p = read();\n        memset(first,tot = 0,sizeof(first));\n        for(int i = 1 ; i <= m ; i++){\n            u[i] = read();\n\t\t\tv[i] = read();\n\t\t\tt[i] = read();\n            insert(u[i],v[i],t[i]);\n        }\n        memset(dis,60,sizeof(dis));\n        int l = dis[1] = 0,r = q[1] = 1;\n        while(l < r){\n            int x = q[++l];\n            bz[x] = false;\n            for(int i = first[x] ; i ; i = next[i])\n                if(dis[x] + w[i] < dis[en[i]]){\n                    dis[en[i]] = dis[x] + w[i];\n                    if(!bz[en[i]]) \n\t\t\t\t\t\tbz[q[++r] = en[i]] = true;\n                }\n        }\n        memset(first,tot = 0,sizeof(first));\n        for(int i = 1 ; i <= m ; i++)\n\t\t\t insert(v[i],u[i],t[i]);\n        memset(dis1,60,sizeof(dis1));\n        l = dis1[q[ r= 1] = n] = 0;\n        while(l < r){\n            int x = q[++l];\n            bz[x] = false;\n            for(int i = first[x] ; i ; i = next[i])\n                if(dis1[x] + w[i] < dis1[en[i]]){\n                    dis1[en[i]] = dis1[x] + w[i];\n                    if(!bz[en[i]]) \n\t\t\t\t\t\tbz[q[++r] = en[i]] = true;\n                }\n        }\n        memset(first1,tot = 0,sizeof(first1));\n        memset(d,0,sizeof(d));\n        for(int i = 1 ; i <= m ; i++){\n            int x = get(u[i],0);\n\t\t\tint y = get(v[i],dis[u[i]] + t[i] - dis[v[i]]);\n            for(int j = dis[u[i]] ; j + t[i] + dis1[v[i]] <= dis[n] + k ; j++,x++,y++)\n\t\t\t\t insert1(x,y);\n        }\n        int num = (k + 1) * n,sum=0;\n        l = r = ans = 0;\n        memset(f,0,sizeof(f));\n        for(int i = 1 ; i <= num ; i++)\n            if(!d[i]) \n\t\t\t\tq[++r] = i;\n        f[1] = 1;\n        while(l < r){\n            int x = q[++l];\n            sum++;\n            for(int i = first1[x] ; i ; i = next1[i]){\n                if(!--d[en1[i]]) \n\t\t\t\t\tq[++r] = en1[i];\n                f[en1[i]] += f[x];\n                f[en1[i]] = f[en1[i]] > p ? f[en1[i]] - p : f[en1[i]];\n            }\n        }\n        if(sum < num) \n\t\t\tprintf(\"-1\\n\"); \n\t\telse{\n            for(int i = 0 ; i <= k ; i++) \n\t\t\t\tans = (ans + f[get(n,i)]) % p;\n            printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1519304524,
        "uid": 54879,
        "name": "Law_Aias",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u7f29\u70b9+ \u62d3\u6251\u6392\u5e8f+ DP\u7684\u505a\u6cd5\uff1a\r\n\r\n\u8003\u8651\u5c06\u6240\u6709\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u52a0\u5165\u4e00\u5f20\u65b0\u56fe\u8dd1\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u5904\u7406\u51fa\u6240\u6709 $0$ \u73af\uff0c\u7f29\u70b9\u4e4b\u540e\u7684\u56fe\u4e00\u5b9a\u4e0d\u5b58\u5728 $0$ \u73af\u3002\r\n\r\n\u7528 $\\text{dijkstra}$ \u8dd1\u51fa\u70b9 $1$ \u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def $dist[i]$\u3002\r\n\r\n\u5b9a\u4e49\u8fb9 $(u,v,w)$ \u201c\u5728\u6700\u77ed\u8def\u4e2d\u201d\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3 $dist[u] + w = dist[v]$ \u3002\r\n\r\n\u56e0\u4e3a\u4e0d\u5b58\u5728\u8d1f\u6743\u3001\u96f6\u73af\u3001\u56e0\u6b64\u5c06\u6240\u6709\u201c\u5728\u6700\u77ed\u8def\u201d\u4e2d\u7684\u8fb9\u5efa\u56fe\u540e\u4e00\u5b9a\u662f\u4e2a DAG\uff0c\u5e76\u4e14\u62d3\u6251\u5e8f\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u8fb9  $(u,v,w)$ \uff0c$dist[u] + w = dist[v]$ \uff0c$u$ \u4e00\u5b9a\u5728 $v$ \u4e4b\u524d\u3002\r\n\r\n\u5bf9\u5efa\u51fa\u7684 $\\text{DAG}$ \u8dd1\u62d3\u6251\u6392\u5e8f\u5f97\u51fa\u62d3\u6251\u5e8f\u3002\r\n\r\n\u4ee4 $f[i,j]$ \u4e3a\u4ece $1$ \u5230\u70b9 $i$ \u957f\u5ea6\u4e3a $dist[i] + j$ \u7684\u8def\u5f84\u6761\u6570\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u987a\u5e8f DP\uff1a\r\n\r\n\u8003\u8651 $f[u,j]$ \u5982\u679c\u4ece\u70b9 $v$ \u8f6c\u79fb\u8fc7\u6765\uff0c\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u662f $f[v,x]$ \u90a3\u4e48\u4e00\u5b9a\u6709\r\n\r\n$dist[u] + j = dist[v] + x + w$ \uff08 $w$ \u662f\u8fb9 $(v,u,w)$ \uff09 \u7684\u8fb9\u6743\u3002\r\n\r\n\u90a3\u4e48\u6709 $x = dist[u]+j - (dist[v] + w)$ \u3002\r\n\r\n\u4e14\u6ee1\u8db3 $dist[u] -  (dist[v] + w) \\le 0$\u3002\r\n\r\n\u82e5 $x < 0$ \uff0c\u90a3\u4e48\u8be5\u72b6\u6001\u4e00\u5b9a\u4e3a\u975e\u6cd5\u72b6\u6001\uff08\u4e0d\u5b58\u5728\u6bd4\u6700\u77ed\u8def\u8fd8\u77ed\u7684\u8def\u5f84\uff09\uff0c\u5bf9\u4e8e\u5408\u6cd5\u72b6\u6001\u4e00\u5b9a\u6709 $x \\le k$\u3002\r\n\r\n\r\ntips: \u5728 dp \u7684\u65f6\u5019\u987a\u4fbf\u5224\u4e00\u4e0b\u6709\u6ca1\u6709\u89e3\uff08\u5982\u679c\u72b6\u6001 $f[x,j]$ \u53ef\u4ee5\u4ece\u72b6\u6001 $f[v,x]$ \u8f6c\u79fb\u8fc7\u6765\u4e14 $f[v,x]$ \u8fd9\u4e2a\u72b6\u6001\u662f $\\text{inf}$ \u7684\u8bdd\u90a3\u4e48 $f[x,j]$ \u4e5f\u662f $\\text{inf}$\uff0c\u5982\u679c\u8fde\u901a\u5206\u91cf\u5927\u5c0f >1 \u90a3\u4e48\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece $1$ \u5230\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u957f\u5ea6\u4e3a $x$ \u7684\u8def\u5f84\u90a3\u4e48\u4e00\u5b9a\u6709 $f[v,x] = \\text{inf}$ \uff09\u3002\r\n\r\n\u590d\u6742\u5ea6 $O(n\\log (n+m) + k(n+m))$ \u3002\r\n\r\n\u53ef\u8fc7 uoj hack\u6570\u636e\u3002\r\n\r\n[uoj\u63d0\u4ea4\u8bb0\u5f55](https://uoj.ac/submission/507776)\r\n\r\n",
        "postTime": 1631776780,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P3953 [NOIP2017 \u63d0\u9ad8\u7ec4] \u901b\u516c\u56ed"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P3953)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5047\u5982\u516c\u56ed\u7684\u8def\u5f84\u662f\u4e00\u4e2a$DAG$\uff0c\u6839\u636e$K\\le 50$\u8fd9\u4e2a\u6570\u636e\uff0c\u5e94\u8be5\u53ef\u4ee5\u6781\u5176\u987a\u7545\u5730\u60f3\u5230$DP$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8bbe$f_i$\u4e3a$1\\rightarrow i$\u7684\u6700\u77ed\u8def\uff1b$g_i$\u4e3a$i\\rightarrow n$\u7684\u6700\u77ed\u8def\u3002\u5219\u53ef\u5f97\u5230\u5982\u4e0b\u72b6\u6001\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$DP(u,i)$\uff1a\u4ece$1$\u51fa\u53d1\uff0c\u8d70\u5230$u$\uff0c\u8def\u5f84\u6bd4$f_u$\u957f$i$\u7684\u8def\u5f84\u7684\u6761\u6570\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u8f6c\u79fb\uff0c\u5b9e\u9645\u4e0a\u662f\u679a\u4e3e\u8d70\u6765\u7684\u70b9\u548c\u90a3\u91cc\u7684$i$\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\\displaystyle DP(u,i)=\\sum_{(v,u)\\in E}DP(v,f_u+i-w(v,u)-f_v)[0\\le f_u+i-w(v,u)-f_v\\le K]$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7b54\u6848\u662f$\\sum_{i=0}^KDP(N,i)$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u800c......\u73b0\u5728\u516c\u56ed\u5e76\u4e0d\u662f$DAG$\u5440......  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\uff08\u73b0\u5728\u6682\u65f6\u5ffd\u7565$0$\u8fb9\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6ca1\u5173\u7cfb\uff01\u7531\u4e8e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u82e5$(v,u)\\in E$\uff0c\u5219$f_u\\le f_v+w(v,u)$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f97\u5230$f_u-f_v-w(v,u)+i\\le i$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u540e\u9762\u90a3\u4e00\u4f4d\u5176\u5b9e\u662f$DP$\u7684\u9636\u6bb5\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f53$f_u-f_v-w(v,u)+i<i$\u7684\u65f6\u5019\uff0c\u524d\u9762\u7684\u7ed3\u679c\u5df2\u7ecf\u8ba1\u7b97\u597d\u4e86\uff1b\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8003\u8651$f_u-f_v-w(v,u)+i=i$\u7684\u60c5\u51b5\u7684\u8f6c\u79fb\u987a\u5e8f\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u60f3\u8c61\u628a\u539f\u56fe\u7f29\u6210\u4e00\u6761\u6700\u77ed\u8def$DAG$\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u7684\u62d3\u6251\u5e8f\u5c31\u662f\u5b83$DP$\u4e2d\u5e94\u6709\u7684\u987a\u5e8f\u3002\u800c\u8fd9\u4e2a\u987a\u5e8f\u5bf9\u5e94\u7740\u70b9\u7528$f$\u6392\u5e8f\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u5c06\u70b9\u6309\u7167$f$\u6392\u5e8f\u4e4b\u540e$DP$\u5373\u53ef\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u73b0\u5728\u518d\u8003\u8651\u591a\u51fa\u6765\u7684$0$\u8fb9\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u7684\u65b0\u95ee\u9898\u5176\u5b9e\u53ea\u6709\u4e24\u4e2a\uff1a\u786e\u5b9a$DP$\u987a\u5e8f\u548c\u5224\u65ad$-1$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5148\u786e\u5b9a$DP$\u987a\u5e8f\u3002\u8003\u8651\u5728\u4e00\u6761$0$\u8fb9\u4e0a$(u,v)$\uff0c$DP$\u7684\u987a\u5e8f\u5e94\u8be5\u5148$u$\u540e$v$\u3002\u6240\u4ee5$0$\u8fb9\u4e0a\u7684\u987a\u5e8f\u5e94\u8be5\u53c2\u8003\u62d3\u6251\u5e8f\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u60f3\u5230\u628a$0$\u8fb9\u63d0\u51fa\u6765\u5efa\u65b0\u56fe\u3002\u65b0\u56fe\u4e0a\u7684\u62d3\u6251\u5e8f\u5c31\u5bf9\u5e94\u7740$0$\u8fb9\u4e0a\u7684$DP$\u987a\u5e8f\u3002\uff08\u5f53\u7136\u662f\u5728$f$\u76f8\u540c\u7684\u60c5\u51b5\u65f6\u8fd9\u6837\u6392\u5e8f\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f46\u662f\u4e07\u4e00\u51fa\u73b0\u4e86$0$\u73af\u8be5\u600e\u4e48\u529e\uff1f\u7531\u4e8e\u73af\u4e0a\u7684\u8fb9\u6743\u4e3a$0$\uff0c\u6240\u4ee5\u73af\u4e0a\u4efb\u610f\u4e00\u70b9\u7684$f$\u548c$g$\u7684\u503c\u90fd\u76f8\u540c\u3002\u5982\u679c\u5b58\u5728\u4e00\u6761\u5408\u6cd5\u8def\u5f84\u7ecf\u8fc7\u4e86$0$\u73af\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73af\u4e0a\u4e00\u70b9$u$\u6ee1\u8db3$f_u+g_u\\le f_N+K$\uff0c\u90a3\u4e48$0$\u73af\u5c31\u4f1a\u8d77\u4f5c\u7528\uff0c\u4e5f\u5c31\u51fa\u73b0\u4e86\u65e0\u7a77\u7684\u8def\u5f84\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8fd9\u6837$DP$\u5c31\u53ef\u4ee5\u4e86\u3002\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 500005, MAXM = 200005, MAXK = 55;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\nvoid swapp( _T &a, _T &y )\n{\n\t_T t = a; a = y, y = t;\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[3][MAXM * 2];\n\nstruct node\n{\n\tint u, dis;\n\tnode(){}\n\tnode( const int U, const int Dis ) { u = U, dis = Dis; }\n\tbool operator < ( const node & other ) const { return ! ( dis < other.dis ); }\n};\n\nstd :: priority_queue<node> pq;\nstd :: queue<int> q;\n\nint DP[MAXN][MAXK];\nint order[MAXN];\nint dis[2][MAXN], seq[MAXN];\nint head[3][MAXN], into[MAXN];\nint N, M, K, P, cnt[3];\nbool visited[MAXN];\n\nvoid addEdge( const int indx, const int from, const int to, const int W = 0 )\n{\n\tcnt[indx] ++;\n\tGraph[indx][cnt[indx]].w = W;\n\tGraph[indx][cnt[indx]].to = to;\n\tGraph[indx][cnt[indx]].nxt = head[indx][from];\n\thead[indx][from] = cnt[indx];\n}\n\nvoid Dijkstra( const int indx, const int sta, int *dist )\n{\n\twhile( ! pq.empty() ) pq.pop();\n\tfor( int i = 1 ; i <= N ; i ++ ) dist[i] = INF, visited[i] = false;\n\tdist[sta] = 0;\n\tpq.push( node( sta, 0 ) );\n\tnode h;\n\tint v, w;\n\twhile( ! pq.empty() )\n\t{\n\t\th = pq.top();\n\t\tpq.pop();\n\t\tif( visited[h.u] ) continue;\n\t\tvisited[h.u] = true;\n\t\tfor( int i = head[indx][h.u] ; i ; i = Graph[indx][i].nxt )\n\t\t{\n\t\t\tv = Graph[indx][i].to, w = Graph[indx][i].w;\n\t\t\tif( ! visited[v] && dist[v] > dist[h.u] + w )\n\t\t\t{\n\t\t\t\tdist[v] = dist[h.u] + w;\n\t\t\t\tpq.push( node( v, dist[v] ) );\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool cmp( const int &x, const int &y )\n{\n\treturn dis[0][x] < dis[0][y] || ( dis[0][x] == dis[0][y] && order[x] < order[y] );\n}\n\nbool topological()\n{\n\twhile( ! q.empty() ) q.pop();\n\tint u, v, tot = 0;\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tif( ! into[i] )\n\t\t\tq.push( i );\n\twhile( ! q.empty() )\n\t{\n\t\tu = q.front(), q.pop();\n\t\torder[u] = ++tot;\n\t\tfor( int i = head[1][u] ; i ; i = Graph[1][i].nxt )\n\t\t{\n\t\t\tv = Graph[1][i].to;\n\t\t\tinto[v] --;\n\t\t\tif( ! into[v] ) q.push( v );\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tif( into[i] && dis[0][i] + dis[1][i] <= dis[0][N] + K )\n\t\t\t\treturn false;\n\treturn true;\n}\n\nint main()\n{\n//\tfreopen( \"data.out\", \"w\", stdout );\n\tint fr, to, W, dif, res;\n\tint T;\n\tscanf( \"%d\", &T );\n\twhile( T -- )\n\t{\n\t\tcnt[2] = cnt[0] = cnt[1] = 0;\n\t\tfor( int i = 1 ; i <= N ; i ++ ) head[2][i] = head[0][i] = head[1][i] = 0, into[i] = 0;\n\t\tfor( int j = 0 ; j <= K ; j ++ )\n\t\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t\t\tDP[i][j] = 0;\n\t\tscanf( \"%d %d %d %d\", &N, &M, &K, &P );\n\t\tfor( int i = 1 ; i <= M ; i ++ )\n\t\t{\n\t\t\tscanf( \"%d %d %d\", &fr, &to, &W );\n\t\t\taddEdge( 0, fr, to, W );\n\t\t\taddEdge( 2, to, fr, W );\n\t\t\tif( ! W ) addEdge( 1, fr, to ), into[to] ++;\n\t\t}\n\t\tDijkstra( 0, 1, dis[0] );\n\t\tDijkstra( 2, N, dis[1] );\n\t\tif( ! topological() ){ puts( \"-1\" ); continue; }\n\t\tfor( int i = 1 ; i <= N ; i ++ ) seq[i] = i;\n\t\tstd :: sort( seq + 1, seq + 1 + N, cmp );\n\t\tDP[1][0] = 1;\n\t\tfor( int j = 0 ; j <= K ; j ++ )\n\t\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t\t{\n\t\t\t\tfr = seq[i];\n\t\t\t\tfor( int k = head[2][fr] ; k ; k = Graph[2][k].nxt )\n\t\t\t\t{\n\t\t\t\t\tto = Graph[2][k].to, W = Graph[2][k].w;\n\t\t\t\t\tdif = dis[0][fr] + j - W - dis[0][to];\n\t\t\t\t\tif( 0 <= dif && dif <= K ) DP[fr][j] = ( DP[fr][j] + DP[to][dif] ) % P;\n\t\t\t\t}\n\t\t\t}\n\t\tres = 0;\n\t\tfor( int i = 0 ; i <= K ; i ++ ) res = ( res + DP[N][i] ) % P;\n\t\twrite( res ), putchar( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570085388,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[P3953]\u901b\u516c\u56ed"
    },
    {
        "content": "[\u70b9\u6211\u524d\u5f80\u516c\u56ed](https://www.luogu.org/problemnew/show/P3953)\n\n## \u7b80\u6790\n\n\u770b\u5230\u9898\u7b2c\u4e00\u53cd\u5e94\u7528\u6700\u77ed\u8def\u8ba1\u6570\u7684\u505a\u6cd5\u9a97\u5206\uff082333333\uff09\n\n\u603b\u4e4b\u6211\u4eec\u6765\u770b\u770b\u90e8\u5206\u5206\u7684\u505a\u6cd5\u3002\n\n### $30pts$\n\n$K = 0$ ,\u53ef\u4ee5\u72c2\u559c\u4e86\u3002\n\n\u7531\u4e8e $spfa$ \u6bd4\u8f83\u597d\u5199\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u4ec5\u4ec5\u7ed9\u51fa\u9700\u8981\u5728\u6a21\u677f\u4e0a\u8fdb\u884c\u4fee\u6539\u7684\u5730\u65b9\uff0c\u5176\u4ed6\u7ec6\u8282\u8bf7\u8bfb\u8005\u81ea\u884c\u601d\u8003\uff1a\n\n```\nif(u == n) continue;\n......\n\nif(d[v] == d[u] + w){\n\tf[v] += f[u];\n}else if(d[v] > d[u] + w){\n\td[v] = d[u] + w;\n    f[v] = f[u];\n}if(!vis[v] && f[v]) q.push(v),vis[v] = 1;\n\n......\n\nf[u] = 0;//\u51fa\u961f\u65f6\u6e05\u6389f\n```\n\u6211\u4eec\u4f9d\u6b21\u5206\u6790\u4e00\u4e0b\u4ee5\u4e0a\u4ee3\u7801\uff1a\n\n\u5f53\u6269\u5c55\u5230\u7ec8\u70b9\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u76f4\u63a5\u8df3\u8fc7\u4ed6\uff08\u6ce8\u610f\u4e0d\u662f\u7ec8\u6b62\u51fd\u6570\uff09\uff0c\u7528\u7ec8\u70b9\u518d\u53bb\u6269\u5c55\u7ec8\u70b9\u7684\u51fa\u8fb9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7b54\u6848\u91cd\u590d\u7edf\u8ba1\u3002\n\n\u663e\u7136\uff0c\u5f53\u4ece $u$ \u5230 $v$ \u7684\u6743\u4e0e $u$ \u5f53\u524d\u6700\u77ed\u8def\u7684\u548c\u4e0e\u5f53\u524d $v$ \u7684\u6700\u77ed\u8def\u76f8\u7b49\u65f6\uff0c\u6211\u4eec\u5c06 $v$ \u70b9\u7684\u65b9\u6848\u6570\u52a0\u4e0a $u$ \u70b9\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u679c\u6700\u77ed\u8def\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48 $v$ \u539f\u6709\u7684\u65b9\u6848\u5168\u90e8\u4f5c\u5e9f\uff0c\u65b0\u65b9\u6848\u6570\u4e0e $u$ \u65b9\u6848\u6570\u76f8\u540c\u3002\n\n\u4e3a\u4ec0\u4e48\u5165\u961f\u6709\u4e24\u4e2a\u5224\u65ad\u6761\u4ef6\u5462\uff1f\u7b2c\u4e00\u4e2a\u6761\u4ef6\u662f\u663e\u7136\u7684\uff0c\u672c\u6765\u5c31\u5728\u961f\u5217\u4e2d\u7684\u70b9\u4e0d\u5e94\u91cd\u590d\u5165\u961f\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u663e\u7136\u53ea\u6709\u8fdb\u5165\u4e86\u4ee5\u4e0a\u4e24\u4e2a\u5206\u652f\uff0c $f[v]$ \u624d\u4f1a\u88ab\u66f4\u65b0\u3002\u8be5\u6761\u4ef6\u4fdd\u8bc1\u4e86\u4e0d\u6269\u5c55\u5197\u4f59\u7684\u8282\u70b9\u3002\n\n\u7531\u4e8e $spfa$ \u7684\u539f\u7406\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u5165\u961f\u591a\u6b21\uff0c\u5982\u679c\u4e0d\u6e05\u7a7a $f$ \u6570\u7ec4\u53ef\u80fd\u5bfc\u81f4\u7b54\u6848\u7684\u91cd\u590d\u7edf\u8ba1\uff0c\u56e0\u6b64\u5728\u79bb\u961f\u65f6\u8981\u6e05\u6389\u3002\n\n\n------------\n### \u4e00\u4e2a\u5c0f\u5c0f\u7684\u9898\u5916\u8bdd\n\n\u5173\u4e8e $spfa$ \uff0c\u6211\u4eec\u53d1\u73b0\u7531\u4e8e\u5176\u6709\u7740\u8282\u70b9\u53ef\u80fd\u4f1a\u591a\u6b21\u8fdb\u961f\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u56e0\u6b64\u5728\u8fd0\u7528\u5b83\u4e0d\u8bba\u662f\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\uff0c\u5c24\u5176\u662f\u9012\u63a8\u5f0f\u66f4\u65b0\u65f6\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f**\u91cd\u590d\u6269\u5c55**\u7684\u95ee\u9898\uff0c\u6216\u8005\u6362\u7528 $dijkstra$ \u7b97\u6cd5~~\u53f8\u666e\u53d1\u65e9\u6b7b\u51e0\u767e\u5e74\u4e86~~\u3002\n\n\u5bf9\u4e8e\u672c\u9898 $30pts$\uff0c\u7531\u4e8e $dijkstra$ \u7b97\u6cd5\u6539\u52a8\u90e8\u5206\u5927\u540c\u5c0f\u5f02\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u4ec5\u4fdd\u7559\u4ee5\u4e0a\u6dfb\u52a0\u4ee3\u7801\u7684\u7b2c\u4e8c\u90e8\u5206\u5e76\u5c06\u5176\u6539\u4e3a $dijkstra$ \u98ce\u683c\u5373\u53ef\u3002\n\n\n------------\n\n### $70pts$\n\n\u8003\u8651\u6ca1\u6709 $0$ \u8fb9\u7684\u60c5\u51b5\uff0c\u7531\u4e8e $K = 50$ \u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b $dp$ \u505a\u6cd5\u3002\n\n\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001\u5462\uff1f\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u601d\u8def\u5982\u4e0b\uff1a\n\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u8ba1\u7b97\u51fa\u4e86\u5230 $n$ \u70b9\u7684\u6700\u77ed\u8def $d[n]$\uff0c\u663e\u7136\u9898\u8bbe\u8981\u6c42\u8def\u5f84\u957f\u5ea6\u4e0d\u5f97\u8d85\u8fc7 $d[n] + K$\u3002\u4e0d\u59a8\u4ee4 $f[i][j]$ \u8868\u793a\u5728 $i$ \u53f7\u70b9\uff0c\u5269\u4e0b\u53ef\u4ee5\u8d70\u7684\u8def\u7684\u957f\u5ea6\u662f $j$\u3002\n\n#### \u521d\u6001 \uff1a $f[1][d[n] + k] = 1;$\n#### \u672b\u6001 \uff1a $ans += f[n][j];$ $j$ \uff1a$d[n] -> d[n] + k$\n#### \u8f6c\u79fb \uff1a $E(u,v,w)$,$f[v][j - w] += f[u][j];$\n\n\u4f46 $d[n]$ \u53ef\u80fd\u5f88\u5927\uff0c\u5f00\u4e0d\u4e0b\uff0c\u600e\u4e48\u529e\uff1f\n\n\u6ce8\u610f\u5230\u6211\u4eec\u6709\u4ece $1$ \u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u3002\u540c\u65f6\u89c2\u5bdf\u7ec8\u6001\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7edf\u8ba1\u7b54\u6848\u65f6\u53ea\u7528\u5230\u4e86 $d[n] -> d[n] + k$\u3002\u90a3\u4e48\u8003\u8651\u5728\u7b2c\u4e8c\u7ef4\u53ea\u8bb0\u5f55 $K$\u3002$f[i][j]$ \u8868\u793a\u5728 $i$ \u53f7\u70b9\uff0c\u5269\u4e0b\u53ef\u4ee5**\u591a\u8d70**\u7684\u8def\u7684\u957f\u5ea6\u662f $j$\u3002\u5f88\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8d70\u7684\u8fc7\u7a0b\u4e2d\u9010\u6b65\u8ba1\u7b97\u76f8\u5bf9\u4e8e\u6700\u77ed\u8def\u591a\u8d70\u7684\u8def\u5f84\u957f\uff0c\u4fdd\u8bc1\u8fd9\u4e2a\u591a\u51fa\u6765\u7684\u957f\u5c0f\u4e8e $K$ \u5373\u53ef\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u6b63\u786e\u6027\u4f3c\u4e4e\u6709\u5f85\u5546\u69b7\u3002\u6211\u4eec\u77e5\u9053\u5168\u5c40\u6700\u77ed\u8def\u5e76\u4e0d\u5b8c\u5168\u662f\u5c40\u90e8\u6700\u77ed\u8def\uff0c\u4ece $u$ \u5230 $v$ \u7684\u6700\u4f18\u8def\u5f84\u4e5f\u4e0d\u4e00\u5b9a\u662f $d[v] + d[u]$ \uff0c\u4f46\u8fd9\u79cd\u601d\u8def\u5904\u7406\u672c\u9898\u8db3\u77e3\u3002\n\n\u5e0c\u671b\u6709\u60f3\u6cd5\u7684\u8bfb\u8005\u80fd\u5728\u8bc4\u8bba\u533a\u7559\u4e0b\u60a8\u7684\u770b\u6cd5\uff0c\u5bf9\u6b64\u6cd5\u8bc1\u660e\u6216\u8bc1\u4f2a\uff0c\u9119\u4eba\u611f\u6fc0\u4e0d\u5c3d\u3002\n\n### $100pts$\n\n\u8003\u8651\u6ee1\u5206\u505a\u6cd5\u3002\u5f53 $0$ \u8fb9\u5b58\u5728\u65f6\uff0c\u663e\u7136\u53ea\u6709\u51fa\u73b0 $0$ \u73af\u65f6\u65e0\u89e3\u3002\u6211\u4eec\u5bf9\u9012\u5f52\u4e2d\u7684\u72b6\u6001\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u4e00\u65e6\u53d1\u73b0\u5c1a\u5728\u9012\u5f52\u4e2d\u7684\u72b6\u6001\u8bbf\u95ee\u5230\u81ea\u8eab\u65f6\uff08\u8bbf\u95ee\u540c\u4e00\u8282\u70b9\u4e14\u5269\u4f59\u8def\u957f\u76f8\u7b49\uff09\u5219\u8fd4\u56de\u65e0\u89e3\u3002\n\n## AC\u4ee3\u7801\n\n```\n#include<iostream>\n#include<cctype>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int maxn = 100005;\nint read(){\n\tint re = 0,ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) re = (re<<1) + (re<<3) + ch - '0',ch = getchar();\n\treturn re; \n}\nstruct edge{\n\tint v,w,nxt;\n}e[maxn<<1];\nint h[maxn],cnt;\nvoid add(int u,int v,int w){\n\te[++cnt].w = w;\n\te[cnt].v = v;\n\te[cnt].nxt = h[u];\n\th[u] = cnt;\n}\nint n,m,k,p,t;\nbool vis[maxn];\nint dis[maxn];\nint f[maxn][55];\nbool v[maxn][55];\nvoid spfa(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tqueue<int> q;\n\tvis[1] = 1;\n\tdis[1] = 0;\n\tq.push(1);\n\twhile(q.size()){\n\t\tint u = q.front();q.pop();\n\t\tvis[u] = 0;\n\t\tfor(int i = h[u];i;i = e[i].nxt){\n\t\t\tint v = e[i].v,w = e[i].w;\n\t\t\tif(dis[v] > dis[u] + w){ \n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tif(!vis[v]) q.push(v),vis[v] = 1;\n\t\t\t}\n\t\t}\n\t}\n}\nint dfs(int u,int left){\n\tif(left < 0) return 0;\n\tif(v[u][left]) return -1;// 0 ring\n\tif(f[u][left] != -1) return f[u][left];\n\tv[u][left] = 1;\n\tint ans = 0;\n\tif(u == n) ans++;\n\tfor(int i = h[u];i;i = e[i].nxt){\n\t\tint v = e[i].v,w = e[i].w;\n\t\tint ansc = dfs(v,left - (dis[u] + w - dis[v]));\n\t\tif(ansc == -1) return -1;\n\t\tans = (ansc + ans) % p;\n\t}\n\tf[u][left] = ans % p;\n\tv[u][left] = 0;\n\treturn ans;\n}\nint main(){\n\tt = read();\n\twhile(t--){\n\t\tn = read(),m = read(),k = read(),p = read();\n\t\tmemset(h,0,sizeof(h));\n\t\tmemset(f,-1,sizeof(f));\n\t\tmemset(v,0,sizeof(v));\n\t\tcnt = 0;\n\t\tfor(int i = 1;i <= m;i++){\n\t\t\tint u = read(),v = read(),w = read();\n\t\t\tadd(u,v,w);\n\t\t}\n\t\tspfa();\n\t\tprintf(\"%d\\n\",dfs(1,k));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541073901,
        "uid": 70506,
        "name": "ICE_Wol",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "# \u4e3a\u62ef\u6551\u548c\u6211\u4e00\u6837\u5f31\u7684\u849f\u84bb\u800c\u53d1\n\n\u6c42\u6700\u77ed\u8def\u5f53\u7136\u662f\u6ca1\u6709\u8bdd\u8bf4\u7684\uff0c\u4f46\u662f\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u7684\u8def\u90a3\u4fbf\u662f\u65e0\u6cd5\u60f3\u8c61\u7684 \n\n\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u6240\u7ed9\u7684 k \u662f\u6bd4\u8f83\u5c0f\u7684\uff0c\u7136\u540e\u5229\u7528 k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6734\u7d20\u7684\u65b9\u6cd5\uff0cdfs\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 f[i][j] \u8868\u793a\u4ece i \u5230 n \u7684\u6700\u77ed\u8def\u52a0\u4e0aj\u7684\u8def\u5f84\u7684\u65b9\u6848\u6570\uff0c\u7136\u540e\u5c31\u662f\u8f6c\u79fb\u4e86\uff0c\n\ndis[i] \u8868\u793a i \u8282\u70b9\u5230 n \u7684\u6700\u77ed\u8def \n\n## \u8f83\u4e3a\u91cd\u8981\u7684\u601d\u8003\n\u601d\u8003\u4e00\u4e0b\uff1a\u5047\u8bbe\u6709\u4e00\u4e2a\u70b9 x \uff0c\n\u672c\u6765\u662f\u8981\u8d70\u6700\u77ed\u8def\u7684\uff08\u5047\u8bbe\u8d70\u5411v1\uff0cv1\u53ea\u662f\u4e3a\u4e86\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u5b9e\u9645\u6ca1\u5565\u7528\uff09 \uff0c \n\u4f46\u662f\u8d70\u4e86\u53e6\u5916\u4e00\u6761\u8def\uff08\u5047\u8bbe\u8d70\u5411v2\uff09\uff0c\u90a3\u4e48\u591a\u8d70\u4e86\u7684\u8def\u5c31\u662f dis[v2]+w-dis[x]\uff0c\n\u5047\u8bbe\u6211\u4eec\u53ef\u4ee5\u8d70\u7684 \u591a\u8d70\u7684\u8def \u7684\u957f\u5ea6\u4e3a res\uff0c\u90a3\u4e48\u73b0\u5728\u53ef\u4ee5\u591a\u8d70\u7684\u8def\u5c31\u662f res-(dis[v2]+w-dis[x]) \uff0c\n\u7136\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u4e86\uff0c\n### \u4f46\u662f\u6211\u4eec\u73b0\u5728\u8003\u8651\u4e00\u4e0b\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\n\u54a6\uff0c\u90a3\u4e0d\u5c31\u662f\u5b58\u5728 0 \u73af\u5417\uff1f\n\n\u6ca1\u9519\uff0c\u5c31\u662f\uff01\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5224\u65ad 0 \u73af\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4 flag\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86 \uff0c\n\nflag[i][j]=1 \u8868\u793a i \u8282\u70b9\u5728 \u53ef\u591a\u8d70\u957f\u5ea6\u4e3a j \u65f6\u8d70\u8fc7 \uff0c\n\nflag[i][j]=0 \u8868\u793a i \u8282\u70b9\u5728 \u53ef\u591a\u8d70\u957f\u5ea6\u4e3a j \u65f6\u6ca1\u8d70\u8fc7\uff0c\n\n\u90a3\u4e48\u8981\u662f\u5728dfs\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u67d0\u4e2a\u8282\u70b9\u5728\u53ef\u591a\u8d70\u957f\u5ea6\u4e3a j \u65f6\u8d70\u8fc7 \uff0c\u90a3\u4e48\u4e0d\u5c31\u662f\u5b58\u57280\u73af\u4e86\u5417\n\n\u90a3\u4e48\u9898\u76ee\u5c31\u89e3\u51b3\u4e86\uff0c\u8017\u65f6\u5de8\u5927\u65e0\u6bd4\u3002\u3002\u3002 \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\n#define inf 0x3f3f3f3f\ntypedef long long ll;\nconst int oo=100024;\nint T,n,m,k,moo,cnt,cntt;\nint h[oo],hh[oo],f[oo][51],dis[oo];\nbool flag[oo][51],vis[oo],fla;\nstruct cx{\n\tint nxt,to,val;\n}p[oo<<1],pp[oo<<1];\ninline int reade_int(){\n    int x=0,f=0; char ch=getchar();\n    while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return f ? -x : x;\n}\ninline void adde(int x,int y,int z){\n\tp[++cnt].nxt=h[x];\n\tp[cnt].to=y;\n\tp[cnt].val=z;\n\th[x]=cnt;\n}\ninline void addf(int x,int y,int z){\n\tpp[++cntt].nxt=hh[x];\n\tpp[cntt].to=y;\n\tpp[cnt].val=z;\n\thh[x]=cntt;\n}\ninline void spfa(){\n\tqueue<int> q;\n\tq.push(n);\n\tfill(dis,dis+n+1,1e9);\n\tmemset(vis,false,sizeof vis);\n\tdis[n]=0; vis[n]=true;\n\twhile(q.size()){\n\t\tint x=q.front(); q.pop();\n\t\tvis[x]=false;\n\t\tfor(int i=hh[x];i;i=pp[i].nxt){\n\t\t\tint u=pp[i].to;\n\t\t\tif(dis[u]>dis[x]+pp[i].val){\n\t\t\t\tdis[u]=dis[x]+pp[i].val;\n\t\t\t\tif(!vis[u]){\n\t\t\t\t\tvis[u]=true;\n\t\t\t\t\tq.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\ninline int dfs(int x,int res){\n\tif(flag[x][res]){\n\t\tfla=true;\n\t\treturn 0;\n\t}\n\tif(f[x][res]>0) return f[x][res];\n\tflag[x][res]=true;\n\tfor(int i=h[x];i;i=p[i].nxt){\n\t\tint u=p[i].to;\n\t\tint vl=res-(dis[u]+p[i].val-dis[x]);\n\t\tif(vl>=0&&vl<=k) (f[x][res]+=dfs(u,vl))%=moo;\n\t\tif(fla) return 0;\n\t}\n\tflag[x][res]=false;\n\tif(x==n&&res==0) return 1;\n\treturn f[x][res];\n}\nint main(){\n\tT=reade_int();\n\twhile(T--){\n\t\tmemset(f,0,sizeof f);\n\t\tmemset(h,0,sizeof h);\n\t\tmemset(hh,0,sizeof hh);\n\t\tmemset(flag,false,sizeof flag);\n\t\tcnt=0; cntt=0; fla=false;\n\t\tn=reade_int(); m=reade_int(); k=reade_int(); moo=reade_int();\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint a=reade_int(),b=reade_int(),c=reade_int();\n\t\t\tadde(a,b,c); addf(b,a,c);\n\t\t}\n\t\tspfa();\n\t\tint ans=0;\n\t\tfor(int i=0;i<=k&&(!fla);i++) (ans+=dfs(1,i))%=moo;\n\t\tif(fla) printf(\"-1\\n\");\n\t\telse printf(\"%d\\n\",ans);\n\t}\n    return 0;\n}\n```",
        "postTime": 1540986956,
        "uid": 70862,
        "name": "\u98ce\u706b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u9898\u89e3--\n\u8bb0\u5f55\u6211\u6ca1\u8111\u53fd\u7684\u65f6\u523b\u2014\u2014\u2014\u2014\u2014\u2014\u5199\u4e86\u4e00\u4e0a\u5348\n\n~~emm \u5f88\u5c34\u5c2c\u521d\u8d5b\u6ca1\u8fc7 \u5f53\u65f6\u597d\u4e00\u9635\u5b50\u4e5f\u6ca1\u5fc3\u60c5\u5b66\u4e86 \u540e\u6765\u53d1\u73b0\u8981\u662f\u8fc7\u4e86\u521d\u8d5b\uff0c\u7b2c\u4e00\u9898\u4e5f\u5c31\u66b4\u529b\u4e2a30\u5206\u5fc3\u7406\u4e5f\u5c31\u5e73\u8861\u4e86~~\n\n\u5212\u6389\u5212\u6389\n\n\u4e00\u770b\u9898\u76ee\u8bb0\u5f55\u8def\u5f84\u6761\u6570 \u7136\u9e45\u8fd9\u4e2a\u8bb0\u6b65\u548cP1144\u4e0d\u592a\u4e00\u6837\uff0c\u8fd9\u4e2a\u7ed9\u4e86\u8d70\u201c\u51a4\u6789\u8def\u201d\u7684\u4f59\u5730\uff0cP1144\u76f4\u63a5\u4e00\u6ce2spfa\u5c31\u79d2\uff0c\u8fd9\u4e8b\u4e5f\u6298\u78e8\u4e86\u6211\u534a\u5929\uff0c\u5927\u6982\u601d\u8def\u5c31\u662fdfs\u4e86\uff0c\u6bd5\u7adf\u4f5c\u4e3aDP\u6e23\u6e23\u3002\n\n\u666e\u901adfs\u80af\u5b9a\u6302 \u8981\u526a\u679d\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5982\u679c\u5230\u4e0d\u4e86n\u70b9\uff08\u6709\u5411\u56fe\uff09\u6216\u8005\u5df2\u7ecf\u8d70\u4e86\u8d85\u51fa\u5bb9\u5fcd\u5ea6\u7684\u51a4\u6789\u8def\u5c31\u8fd4\u56de\uff1b\n\uff0830\u5206\uff09\n\u8fd9\u4e2a\u65f6\u5019\u53cd\u5411spfa\u5c31\u80fd\u77e5\u9053\u6240\u6709\u70b9\u5230n\u70b9\u8ddd\u79bb\uff0c\u8fd9\u6837\u5b50\u8981\u5efa\u4e24\u4e2a\u56fe\uff0c\u4e00\u4e2adfs\u8dd1\u7684\u6b63\u5411\uff0c\u4e00\u4e2aspfa\u7684\u53cd\u5411\uff08\u4e0d\u4f1aspfa\u76f4\u63a5\u8f6c\u53bbp1144\u5427\uff0c\u633a\u6709\u610f\u601d\u7684\u9898\uff09\n\n\u4ee5\u4e0b\u4e3a30\u5206\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nstruct edge{\n    int to,next,val;\n}mem[250005];\nstruct node{\n    int to,next,val;\n}a[250000];\nint head[150005],vis[150005],tot,last[150005],tot1,n;\nlong long dis[150005];//\u6700\u77ed\u8def\nlong long cost[150005];//\u73af\nlong long ans,p;\nbool flag[150005],mark;\nvoid adds(int u,int v,long long w)//spfa\u7528\u53cd\u5411\u56fe\n{\n    tot++;\n    \n    mem[tot].to=v;\n    \n    mem[tot].val=w;\n    \n    mem[tot].next=head[u];\n    \n    head[u]=tot;\n}\nvoid addd(int u,int v,long long w)//dfs\u7528\n{\n    \n    tot1++;\n    \n    a[tot1].to=v;\n    \n    a[tot1].val=w;\n    \n    a[tot1].next=last[u];\n    \n    last[u]=tot1;\n}\nvoid dfs(int fir,long long k)\n{\n    int i,y;\n    \n    if(fir==n)//\u5982\u679c\u5230\u8fbe\n    {\n        ans++;\n        ans=ans%p;\n    }\n    \n    for(i=last[fir];i;i=a[i].next)\n    {\n        y=a[i].to;\n        \n        if(dis[y]+a[i].val<=k)//\u5982\u679c\u53bb\u8fd9\u6761\u8def\u7684\u4ee3\u4ef7+\u6240\u5230\u70b9\u6700\u77ed\u8def\u5c0f\u4e8e\u5f53\u524d\u5269\u4f59\u53ef\u8d70\u8def\u7a0b\u5c31\u641c\u4e0b\u53bb\n        {\n            \n            if(cost[y]<=k&&flag[y]==true)//\u52240\u73af\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u80fd\u8fc7\u7684\u70b9\u5e76\u6ca1\u67090\u73af23333\n            {\n                ans=-1;\n                mark=true;\n                return;\n            }\n            \n            cost[y]=k;\n            \n            flag[y]=true;\n            \n            dfs(y,k-a[i].val);\n            \n            if(mark==true)\n            {\n                return;\n            }\n            \n            flag[y]=false;\n        }\n    }\n}\nvoid spfa()\n{\n    int x,y,i;\n    \n    long long t;\n    \n    queue<int>q;\n\n    memset(vis,false,sizeof(vis));\n    memset(dis,0x3f,sizeof(dis));\n\n    q.push(n);\n    \n    vis[n]=true;\n    \n    dis[n]=0;\n\n    while(!q.empty())\n    {\n        x=q.front();\n    \n        q.pop();\n\n        for(i=head[x];i;i=mem[i].next)\n        {\n            y=mem[i].to;\n    \n            t=dis[x]+mem[i].val;\n    \n            if(dis[y]>t)\n            {\n                dis[y]=t;\n    \n                if(vis[y]==false)\n                {\n                    q.push(y);\n    \n                    vis[y]=true;\n                }\n            }\n        }\n    \n        vis[x]=false;\n    }\n\n}\nint main()\n{\n    int t,m,i,u,v;\n    long long k,w;\n    \n    freopen(\"1.in\",\"r\",stdin);\n    \n    scanf(\"%d\",&t);\n    \n    while(t--)\n    {\n        tot=0;\n        tot1=0;\n        memset(head,0,sizeof(head));\n        memset(flag,false,sizeof(flag));\n        memset(cost,0,sizeof(cost));\n        memset(last,0,sizeof(last));\n        mark=false;\n\n        scanf(\"%d%d%lld%lld\",&n,&m,&k,&p);\n    \n        ans=0;\n    \n        for(i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%lld\",&u,&v,&w);\n    \n            adds(v,u,w);\n    \n            addd(u,v,w);\n        }\n\n        spfa();\n        //cout<<dis[1]<<endl<<endl;\n    \n        k=k+dis[1];\n    \n        dfs(1,k);//\u5f53\u524d\u70b9\u548c\u8fd8\u80fd\u8dd1\u7684\u8def\n\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n\n```\n\n\u7136\u9e45\u6bd5\u7adf\u4e0d\u662f\u8003\u8bd5 \u8fd8\u662f\u8981\u5411100\u63a2\u7d22\u7684\uff0c\u6211\u4eec\u9700\u8981\u66f4\u597d\u7684\u4f18\u5316\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u51fa\u73b0\u4e86\uff01\uff01\u8fd9\u9053\u9898\u7684\u8bb0\u5fc6\u5316\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u6c34\uff0c\u53ea\u662f\u4e00\u5f00\u59cb\u6ca1\u60f3\u5230\u8fd9\u4e48\u590d\u6742emmm\u3002\n\n\u601d\u8def\u5927\u6982\u5c31\u662f\u6bcf\u6b21\u8bb0\u5f55\u8d70q\u51a4\u6789\u8def\u65f6\u6709\u591a\u5c11\u6761\u53ef\u884c\u8def\u5f84\uff0c\u56e0\u4e3a\u662f\u53ef\u80fd\u6709\u591a\u6761\u8def\u5230\u8fbe\u4e00\u4e2a\u70b9\u6240\u8d70\u7684\u8def\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u5df2\u7ecf\u6709\u7b54\u6848\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u8981\u8bb0\u5f55\u7684\u662f\u5f53\u524d\u8d70\u4e86\u51e0\u6b65\u4e0d\u9700\u8981\u8d70\u7684\u8def\uff0c\u800c\u4e0d\u662f\u8bb0\u5f55\u6211\u8fd8\u6709\u591a\u5c11\u8def\u53ef\u4ee5\u8d70\u3002\u56e0\u4e3a\u6700\u591a\u7ed950\u6b65\u51a4\u6789\u8def\uff0c\u6240\u4ee5\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff08\u51a4\u6789\u8def\uff09\u8bb0\u5f55\u5c31\u53ef\u4ee5\u89e3\u51b3ans[\u5f53\u524d\u70b9][\u8d70\u7684\u51a4\u6789\u8def]\u3002\uff08\u6709\u70b9\u8111\u5b50\u90fd\u4f1a\u77e5\u9053\u7528\u5f53\u524d\u8d70\u7684\u8def\u5f53\u4e0b\u6807\u4f1a\u7206\uff09\n\n\u51a4\u6789\u8def\u8fd9\u91cc\u81ea\u5df1\u62ff\u7b14\u5199\u5199\u5c31\u884c\uff0c\u6211\u4eec\u53cd\u5411spfa\u8dd1\u51fa\u4e86\u6700\u77ed\u8def\uff0c\u5982\u679c\u4eceA\u70b9\u5230N\u70b9\u6700\u77ed\u8ddd\u79bb\u662f3\uff0c\u4eceB\u70b9\u5230N\u70b9\u6700\u77ed\u8ddd\u79bb\u662f4\uff0cA\u5230B\u7684\u8ddd\u79bb\u662f2\uff0c\u5982\u679c\u8d70A->B->N\uff0c\u76f8\u6bd4A->N\u6211\u5c31\u591a\u8dd1\u4e863\uff0c\u8fd9\u5c31\u662f\u6211\u8d70\u51a4\u6789\u4e863\uff0c\u52a0\u4e0a\u6211\u4e4b\u524d\u8d70\u7684\u51a4\u6789\u8def\u5c31\u662f\u5f53\u524d\u6211\u603b\u5171\u8d70\u7684\u51a4\u6789\u8def\uff0c\u4e0d\u96be\u63a8\u51fa\u5f0f\u5b50\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u4e0d\u4ee3\u8868\u5230\u4e86N\u5c31\u8981\u51fa\u53bb\u516c\u56ed\uff0c\u6240\u4ee5\u5230\u8fbeN\u70b9\u7684\u65f6\u5019\u662f\u8981\u5c06ans[N][\u5f53\u524d\u6240\u8d70\u51a4\u6789\u8def]++,\u7136\u540e\u7ee7\u7eed\u641c\u7d22\uff0c\u4e0d\u80fdreturn 1;\n\nps\uff1a\u8fd9\u4eba\u771f\u95f2\n\n\u5949\u4e0a\u5927\u6539\u540e\u7684\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int MAXN=100005;\nconst int NONE=0;\nconst int MA=1061109567;\nstruct edge{\n    int to,next,val;\n}mem[2*MAXN];\nstruct node{\n    int to,next,val;\n}a[2*MAXN];\nint head[MAXN],vis[MAXN],tot,last[MAXN],tot1,n;\nint dis[MAXN],an[MAXN][57];\nint p,k;\nint flag[MAXN][57],mark;\nvoid adds(int u,int v,int w)\n{\n    tot++;\n\n    mem[tot].to=v;\n\n    mem[tot].val=w;\n\n    mem[tot].next=head[u];\n\n    head[u]=tot;\n}\nvoid addd(int u,int v,int w)\n{\n    tot1++;\n\n    a[tot1].to=v;\n\n    a[tot1].val=w;\n\n    a[tot1].next=last[u];\n\n    last[u]=tot1;\n}\nint dfs(int fir,int q)\n{\n    int i,y,t;\n\n    if(an[fir][q])\n  \t{\n    \treturn an[fir][q]%p;//\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u6709\u7b54\u6848\u76f4\u63a5\u8fd4\u56de\n\t}\n\n\tif(flag[fir][q])//\u5224\u65ad\u662f\u5426\u5728\u4e00\u6b21\u6df1\u641c\u4e2d\u51fa\u73b0\u4e86\u4e24\u6b21\u82b1\u8d39\u76f8\u540c\u5230\u8fbe\u540c\u4e00\u70b9\uff0c\u5982\u679c\u6709\u5c31\u662f\u67090\u73af\n    {\n        printf(\"-1\\n\");\n        mark=1;\n        return NONE;//\u8fd9\u5730\u65b9\u6211\u4e5f\u641e\u4e0d\u61c2\uff0c\u6709\u65f6\u5019return 0\u4f1a\u53d1\u751f\u795e\u5947\u7684\u4e8b\u60c5\n    }\n\n    if(fir==n)\n    {\n    \tan[fir][q]=(an[fir][q]+1)%p;//\u5207\u8bb0\u4e0d\u8981return\n\t}\n\n    flag[fir][q]=1;//\u6807\u8bb0\n    if(q>k||dis[fir]==MA)//\u526a\u679d\uff0c\u5982\u679c\u5f53\u524d\u8d70\u4e86\u8d85\u8fc7k\u7684\u51a4\u6789\u8def\uff0c\u6216\u8005\u8fd9\u4e2a\u70b9\u5230\u4e0d\u4e86N\n    {\n    \treturn NONE;\n\t}\n    for(i=last[fir];i;i=a[i].next)\n    {\n        y=a[i].to;\n        t=q+(dis[y]+a[i].val-dis[fir]);//\u8ba1\u7b97\u51a4\u6789\u8def\n        if(t<=k)\n        {\n            an[fir][q]=(an[fir][q]+dfs(y,t))%p;//\u8981\u6709\u968f\u65f6%\u7684\u597d\u4e60\u60ef\n            if(mark)\n            \treturn NONE;\n        }\n    }\n    flag[fir][q]=0;//\u56de\u6eaf\uff08\u4e0d\u4e3a\u540c\u4e00\u6b21\u641c\u7d22\u53ef\u4ee5\u51fa\u73b0\u7528\u91cf\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u4e0d\u4e3a0\u73af\uff0c\u8981\u4e0d\u7136\u8bb0\u5fc6\u5316\u90fd\u6ca1\u610f\u4e49\u4e86emm\uff09\n\n    return an[fir][q]%p;\n}\nvoid spfa()\n{\n    int x,y,i;\n    long long t;\n    queue<int>q;\n\n    memset(vis,false,sizeof(vis));\n    memset(dis,0x3f,sizeof(dis));\n\n    q.push(n);\n    vis[n]=true;\n    dis[n]=0;\n\n    while(!q.empty())\n    {\n        x=q.front();\n\n        q.pop();\n\n        for(i=head[x];i;i=mem[i].next)\n        {\n            y=mem[i].to;\n\n            t=dis[x]+mem[i].val;\n\n            if(dis[y]>t)\n            {\n                dis[y]=t;\n\n                if(vis[y]==false)\n                {\n                    q.push(y);\n\n                    vis[y]=true;\n                }\n            }\n        }\n\n        vis[x]=false;\n    }\n\n}\nint main()\n{\n    int t,m,i,u,v,ans,w;\n    //freopen(\"2.txt\",\"r\",stdin);\n    scanf(\"%d\",&t);\n\n    while(t--)\n    {\n        tot=0;\n        tot1=0;\n        memset(head,0,sizeof(head));\n        memset(flag,false,sizeof(flag));\n        memset(last,0,sizeof(last));\n        memset(an,0,sizeof(an));\n        mark=0;\n\n        scanf(\"%d%d%d%d\",&n,&m,&k,&p);\n\n        for(i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&u,&v,&w);\n            adds(v,u,w);\n            addd(u,v,w);\n        }\n\n        spfa();\n\n        ans=dfs(1,0);\n\n        if(!mark)\n        \tprintf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n\n```\n\u5b8c\u7f8eAC \u5f00\u5fc3~~~~~~~",
        "postTime": 1529251151,
        "uid": 62526,
        "name": "\u9152\u4e09\u4e24\u3001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "## \u9898\u76ee\u603b\u7ed3\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u89e31\u5230n\u7684\u8def\u5f84\u4e2d\uff0cdis<=mindis(1,n)+k\u7684\u6570\u91cf\n\n## \u6570\u636e\u8303\u56f4\n\nn<=100000,m<=200000,k<=50;\n\n## \u89e3\u9898\u601d\u8def\n\n[\u826f\u5fc3\u9898\u89e3](https://kelin.blog.luogu.org/solution-p3953)\n\n\u770b\u5230k<=50\uff0c\u9996\u5148\u60f3\u5230DP\uff1b\n\n### \u6cd5\u4e00\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u6b64\u9898\u6838\u5fc3\u5728\u4e8e\u5224\u65ad\u96f6\u73af\u540e\u6309\u987a\u5e8fDP\uff1b\n\n![](https://cdn.luogu.com.cn/upload/pic/19901.png )\n\n\u9996\u5148\u53cd\u5411\u5efa\u8fb9\uff0c\u5806\u4f18\u5316dij\u8dd1\u4e00\u904d\u5230n\u7684\u5355\u6e90\u6700\u77ed\u8def\uff1b\u53cd\u5411\u89c1\u56fe\u7684\u539f\u56e0\u662f\u53ef\u80fd\u6709\u7684\u70b9\u65e0\u6cd5\u5230\u8fbe\uff0c\u53cd\u5411\u5efa\u56fe\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u5b8c\u5168\u56de\u907f\u8fdb\u5165\u6b7b\u80e1\u540c\u7684\u60c5\u51b5\uff1b\n\n```cpp\nif ((t = dis[v[i]] - dis[x] + w[i]) <= k) {\n\t\tif ((t = dfs(v[i], tk - t)) == -1) return f[x][tk] = -1;\n\t\tmod(f[x][tk] += t);\n}\n```\n\u8f6c\u79fb\u65b9\u7a0b\u89e3\u91ca\uff1a\n\n$dis[v[i]] - dis[x] + w[i]$ \u8868\u793a\u5982\u679c\u8d70\u8fd9\u6761\u8fb9\uff0c\u76f8\u5bf9\u4e8eu\u5230v\u7684\u6700\u77ed\u8fb9\uff0c\u591a\u8d70\u4e86\u591a\u5c11\uff1b\n\n\u5982\u679ct\u5df2\u7ecf\u5927\u4e8ek\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u4e0d\u53ef\u80fd\u53d8\u5f97\u66f4\u77ed\uff1b\n\n\u5426\u5219\u7ee7\u7eedDFS\uff0c\u6b64\u65f6\u5e94\u8f6c\u79fb\u5230$f[v[i]][tk-t]$\uff0c\u8fd9\u6837\u8d70\u8fc7\u6765\uff0c\u504f\u79fb\u91cf\u624d\u521a\u521a\u597d\u662fk\uff1b\n\n\u5224\u65ad\u96f6\u73af\u7684\u65b9\u6cd5\u662f\u5728DFS\u65f6\uff0c\u8bb0\u5f55\u9012\u5f52\u6808\uff0c\u82e5\u91cd\u590d\u641c\u7d22\u4e86\u4e00\u70b9\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u96f6\u73af\uff0c\u76f4\u63a5\u9000\u51fa\uff0c\u8f93\u51fa0\u5373\u53ef\uff1b\n\n## \u6613\u9519\u8bef\u533a\n\n\u4e0d\u8981\u7528%lld\u8f93\u51faint\uff01\uff01\uff01\n\nDFS\u8bb0\u5f97\u5224\u91cd\u548c\u8fb9\u754c\uff1b\n\n## \u4ee3\u7801\u5c55\u793a\n\n\u672a\u5f00O2 3800ms\uff08\u4f7f\u7528fread\uff09\n\n\u6cd5\u4e00\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\nil char gc() {\n\tstatic const int BS = 1 << 22;\n\tstatic unsigned char buf[BS], *st, *ed;\n\tif (st == ed) ed = buf + fread(st = buf, 1, BS, stdin);\n\treturn st == ed ? EOF : *st++;\n}\n//#define gc getchar\ntemplate<class T>void in(T &x)\n{\n\tx = 0; bool f = 0; char c = gc();\n\twhile (c < '0' || c > '9') {if (c == '-') f = 1; c = gc();}\n\twhile ('0' <= c && c <= '9') {x = (x << 3) + (x << 1) + (c ^ 48); c = gc();}\n\tif (f) x = -x;\n}\n//#undef gc\nvoid out(int x) {\n\tif (x < 0) putchar('-'), x = -x;\n\tif (x > 9) out(x / 10);\n\tputchar(x % 10 + '0');\n}\n#define N 100010\n#define M 200010\n#define int ll\nint t, m, n, k, p;\nint vf[M], wf[M], nxf[M];\nint cntf, headf[N];\nil void addf(int uu, int vv, int ww) {\n\tvf[++cntf] = vv, wf[cntf] = ww, nxf[cntf] = headf[uu];\n\theadf[uu] = cntf;\n}\nint v[M], w[M], nx[M];\nint cnt, head[N];\nil void add(int uu, int vv, int ww) {\n\tv[++cnt] = vv, w[cnt] = ww, nx[cnt] = head[uu];\n\thead[uu] = cnt;\n}\nstruct Node {\n\tint k, d;\n\tNode() {}\n\tNode(int kk, int dd) {\n\t\tk = kk, d = dd;\n\t}\n\tfriend bool operator<(const Node &a, const Node &b) {\n\t\treturn a.d > b.d;\n\t}\n};\nint dis[N];\nbool vis[N];\nvoid dij(int s) {\n\tmem1(dis);\n\tmem0(vis);\n\tpriority_queue<Node>q;\n\tq.push(Node(s, 0));\n\tdis[s] = 0;\n\tri x;\n\twhile (!q.empty()) {\n\t\tx = q.top().k;\n\t\tq.pop();\n\t\tif (vis[x]) continue;\n\t\tvis[x] = 1;\n\t\tfor (ri i = headf[x]; i; i = nxf[i]) {\n\t\t\tif (!vis[vf[i]] && dis[vf[i]] > dis[x] + wf[i]) {\n\t\t\t\tdis[vf[i]] = dis[x] + wf[i];\n\t\t\t\tq.push(Node(vf[i], dis[vf[i]]));\n\t\t\t}\n\t\t}\n\t}\n}\nint f[N][55];\nbool ins[N][55];\nil void mod(int &x) {\n\tif (x >= p) x -= p;\n\tif (x < 0) x += p;\n}\nint dfs(int x, int tk) {\n\t//printf(\"V %d %d\\n\",x,tk);\n\tif (tk < 0) return 0;\n\tif (f[x][tk]) return f[x][tk];\n\tif (ins[x][tk]) return f[x][tk] = -1;\n\tins[x][tk] = 1;\n\tif (x == n) f[x][tk] = 1;\n\tfor (ri i = head[x], t; i; i = nx[i]) {\n\t\tif ((t = dis[v[i]] - dis[x] + w[i]) <= k) {\n\t\t\tif ((t = dfs(v[i], tk - t)) == -1) return f[x][tk] = -1;\n\t\t\tmod(f[x][tk] += t);\n\t\t}\n\t}\n\tins[x][tk] = 0;\n\treturn f[x][tk];\n}\nsigned main() {\n\tin(t);\n\twhile (t--) {\n\t\tcnt = cntf = 0;\n\t\tmem0(head); mem0(headf);\n\t\tin(n), in(m), in(k), in(p);\n\t\tfor (ri i = 1, a, b, c; i <= m; i++) {\n\t\t\tin(a), in(b), in(c);\n\t\t\taddf(b, a, c); /// reverse\n\t\t\tadd(a, b, c);\n\t\t}\n\t\tdij(n);\n\t\tmem0(f);\n\t\tmem0(ins);\n\t\tprintf(\"%lld\\n\", dfs(1, k));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1527155077,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u89e3\u9898\u62a5\u544a-P3953-\u901b\u516c\u56ed"
    },
    {
        "content": "# NOIP2017d1t3\u901b\u516c\u56ed\u9898\u89e3\n\n\u6587\u7ae0\u540c\u65f6\u53d1\u8868\u4e8e[\u4e2a\u4eba\u535a\u5ba2](https://beautyyuyanli.ml/2019/09/18/2019-9-18-NOIP2017d1t3%E9%80%9B%E5%85%AC%E5%9B%AD%E9%A2%98%E8%A7%A3/)\n\n> \u7b56\u7b56\u540c\u5b66\u7279\u522b\u559c\u6b22\u901b\u516c\u56ed\u3002\u516c\u56ed\u53ef\u4ee5\u770b\u6210\u4e00\u5f20N\u4e2a\u70b9M\u6761\u8fb9\u6784\u6210\u7684\u6709\u5411\u56fe\uff0c\u4e14\u6ca1\u6709 \u81ea\u73af\u548c\u91cd\u8fb9\u3002\u5176\u4e2d1\u53f7\u70b9\u662f\u516c\u56ed\u7684\u5165\u53e3\uff0cN\u53f7\u70b9\u662f\u516c\u56ed\u7684\u51fa\u53e3\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u975e\u8d1f\u6743\u503c\uff0c \u4ee3\u8868\u7b56\u7b56\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u6240\u8981\u82b1\u7684\u65f6\u95f4\u3002\n>\n> \u7b56\u7b56\u6bcf\u5929\u90fd\u4f1a\u53bb\u901b\u516c\u56ed\uff0c\u4ed6\u603b\u662f\u4ece1\u53f7\u70b9\u8fdb\u53bb\uff0c\u4eceN\u53f7\u70b9\u51fa\u6765\u3002\n>\n> \u7b56\u7b56\u559c\u6b22\u65b0\u9c9c\u7684\u4e8b\u7269\uff0c\u5b83\u4e0d\u5e0c\u671b\u6709\u4e24\u5929\u901b\u516c\u56ed\u7684\u8def\u7ebf\u5b8c\u5168\u4e00\u6837\uff0c\u540c\u65f6\u7b56\u7b56\u8fd8\u662f\u4e00\u4e2a \u7279\u522b\u70ed\u7231\u5b66\u4e60\u7684\u597d\u5b69\u5b50\uff0c\u5b83\u4e0d\u5e0c\u671b\u6bcf\u5929\u5728\u901b\u516c\u56ed\u8fd9\u4ef6\u4e8b\u4e0a\u82b1\u8d39\u592a\u591a\u7684\u65f6\u95f4\u3002\u5982\u679c1\u53f7\u70b9 \u5230N\u53f7\u70b9\u7684\u6700\u77ed\u8def\u957f\u4e3ad\uff0c\u90a3\u4e48\u7b56\u7b56\u53ea\u4f1a\u559c\u6b22\u957f\u5ea6\u4e0d\u8d85\u8fc7d + K\u7684\u8def\u7ebf\u3002\n>\n> \u7b56\u7b56\u540c\u5b66\u60f3\u77e5\u9053\u603b\u5171\u6709\u591a\u5c11\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u7ebf\uff0c\u4f60\u80fd\u5e2e\u5e2e\u5b83\u5417\uff1f\n>\n> \u4e3a\u907f\u514d\u8f93\u51fa\u8fc7\u5927\uff0c\u7b54\u6848\u5bf9P\u53d6\u6a21\u3002\n>\n> \u5982\u679c\u6709\u65e0\u7a77\u591a\u6761\u5408\u6cd5\u7684\u8def\u7ebf\uff0c\u8bf7\u8f93\u51fa-1\u3002\n\nAFO\u65f6\u957f\u4e00\u5e74\u540e\u96be\u5f97\u53c8\u5199\u4e86\u4e00\u9053\u9898. \n\n\u8fd9\u4e2a\u9898\u770b\u8d77\u6765\u6709\u4e9b\u590d\u6742. \u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u5f31\u4e9b\u7684\u60c5\u51b5\n\n> \u4fdd\u8bc1\u516c\u56ed\u7684\u5730\u56fe\u662f\u4e00\u5f20DAG\n\n\u8fd9\u4e2a\u60c5\u5f62\u5c31\u5f88\u663e\u7136\u662f\u4e2a\u6811\u5f62dp. \u4e0d\u96be\u8bbe\u8ba1\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\n\u8bbe$dis[u]$\u662f\"\u4ece$u$\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\", $moew(u,hp)$\u8868\u793a\"\u7b56\u7b56\u5904\u5728$u$\u70b9, \u4f53\u529b\u4e3a$dis[u]+hp$\u65f6, \u6070\u597d\u8017\u5c3d\u4f53\u529b\u8d70\u5230\u7ec8\u70b9\u7684\u65b9\u6848\u6570\", \u5bb9\u6613\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b:\n$$\nmeow(u,hp)=\\sum_{v} meow(v,dis[u]+hp-edge[u\\ to\\ v].length-dis[v])\n$$\n\u5176\u4e2d$v$\u662f\u6240\u6709$u$\u53ef\u4ee5\u76f4\u63a5\u8fde\u5411\u7684\u70b9\n\n\u7531\u4e8e$0\\leq hp\\leq k\\leq$, \u6545\u590d\u6742\u5ea6\u4e3a$O(n\\times hp)$\n\n> \u5730\u56fe\u4e2d\u5b58\u5728\u73af, \u4f46\u4fdd\u8bc1\u4e0d\u5b58\u5728\u96f6\u73af\n\n\u8fd9\u4e2a\u65f6\u5019\u4e0a\u8ff0\u8f6c\u79fb\u65b9\u7a0b\u8fd8\u662f\u5426\u9002\u7528\u5462?\n\n\u7b14\u8005\u5728\u8fd9\u91cc\u9677\u5165\u4e86\u4e00\u4e2a\u8bef\u533a: \u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd, \u7b56\u7b56\u5c31\u53ef\u4ee5\u591a\u6b21\u8d70\u5230\u540c\u4e00\u4e2a\u70b9. \u8fd9\u6837\u4e00\u4e2a\u70b9\u5c31\u4f1a\u88ab\u591a\u6b21\u5904\u7406, \u770b\u8d77\u6765\u4e0d\u5177\u5907`\u65e0\u540e\u6548\u6027`\u554a\n\n\u8bf7\u6ce8\u610f: **\u6211\u4eec\u6240\u8bbe\u8ba1\u7684\u72b6\u6001\u4e0d\u662f \"\u7b56\u7b56\u5904\u5728$u$\u70b9\" , \u800c\u662f \"\u4f53\u529b\u4e3a$dis[u]+hp$\u7684\u7b56\u7b56\u5904\u5728$u$\u70b9\" **\n\n\u5982\u679c\u4e0d\u5b58\u5728\u96f6\u73af\u7684\u8bdd, \u7b56\u7b56\u867d\u7136\u53ef\u4ee5\u591a\u6b21\u8d70\u5230$u$\u70b9, \u4f46\u662f\u6bcf\u6b21\u8d70\u5230$u$\u70b9\u65f6\u7684$hp$\u662f\u4e00\u5b9a\u4e0d\u540c\u7684. \u6c38\u8fdc**\u53ea\u6709\u4e00\u4e2a**\"\u5904\u5728$u$\u70b9\u7684\u4f53\u529b\u4e3a$dis[u]+hp$\u7684\u7b56\u7b56\".\n\n\u4e5f\u5c31\u662f\u8bf4$meow(u,hp)$\u7684\u503c\u4e00\u5b9a\u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u6b21, \u6ee1\u8db3`\u65e0\u540e\u6548\u6027`. \u4e0a\u8ff0\u65b9\u7a0b\u4ecd\u7136\u6210\u7acb. \u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u4e3a$O(n\\times hp)$\n\n(AFO\u4e45\u4e86\u8111\u5b50\u5c31\u4e0d\u592a\u597d\u4f7f\u4e86.)\n\n> \u5730\u56fe\u4e2d\u5b58\u5728\u96f6\u73af\n\n\u987a\u7740\u4e0a\u9762\u7684\u601d\u8def, \u6ca1\u6709\u96f6\u73af\u65f6\u6bcf\u6b21\u8d70\u5230$u$\u70b9\u65f6\u7684$hp$\u662f\u4e00\u5b9a\u4e0d\u540c\u7684. \u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\"\u6709\u96f6\u73af\u65f6\u4f1a\u6709\u4e24\u6b21\u8d70\u5230$u$\u70b9\u65f6$hp$\u662f\u76f8\u540c\u7684\". \u901a\u8fc7\u8fd9\u4e2a\u6027\u8d28\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5224\u65ad$u$\u70b9\u4e0a\u662f\u5426\u5728\u4e00\u4e2a\u96f6\u73af\u4e0a.\n\n\u503c\u5f97\u6ce8\u610f\u7684\u7279\u6b8a\u60c5\u51b5:\n\n$meow(\u7ec8\u70b9,0)=1$\u662fdp\u7684\u8fb9\u754c\u6761\u4ef6, \u90a3\u4e48\u4f7f\u7528\u4e0a\u8ff0\u7684\u5224\u96f6\u73af\u65b9\u6cd5\u4f1a\u5ffd\u7565\"\u7ec8\u70b9\u5728\u4e00\u4e2a\u96f6\u73af\u4e0a\"\u7684\u60c5\u51b5. \u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6$moew(\u7ec8\u70b9,0)=+\\infty$, dp\u7684\u8fb9\u754c\u6761\u4ef6\u88ab\u7834\u574f\u4e86.\n\n\u7279\u5224\"\u7ec8\u70b9\u5728\u4e00\u4e2a\u96f6\u73af\u4e0a\"\u7684\u60c5\u51b5\u4e5f\u4e0d\u96be. \u53ea\u8981\u5728\u505adijkstra\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u6709\u4e00\u6761\u6307\u5411\u7ec8\u70b9\u7684\u957f\u5ea6\u4e3a$0$\u7684\u6700\u77ed\u8def, \u90a3\u4e48\u8fd9\u6761\u6700\u77ed\u8def\u5c31\u662f\u7ec8\u70b9\u4e0a\u7684\u96f6\u73af.\n\n(\u5b9e\u8bdd\u8bf4\u8fd9\u4e2a\u60c5\u51b5\u8981\u4e0d\u662f\u6837\u4f8b\u6709\u6211\u5c31\u771f\u7684\u5ffd\u7565\u4e86)\n\n\u603b\u4e4b\u4ee3\u7801\u5982\u4e0b\n\n```c++\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\nLL n, m, k, p, T;\n//gragh beg\nstruct edge{\n    LL v, cs;\n    edge *nxt;\n    edge (const LL &be, const LL &ge, edge *de){\n        v = be, cs = ge, nxt = de;\n        return ;\n    }\n}*G[200000], *G_[200000];\nvoid del_g(edge **g, LL n){\n    for (LL i = 1;i <= n;++ i){\n        for (edge *j = g[i], *k;j;k = j, j = j->nxt, delete(k));\n        g[i] = NULL;\n    }\n    return ;\n}\n//gragh end\n//dijkstra beg\nLL dis[200000];\nbool vis[200000], zero_1;\nstruct qwq{\n    LL v, dis;\n    bool operator < (const qwq &al)const{\n        return dis > al.dis;\n    }\n};\nvoid dijkstra(LL s){\n    priority_queue<qwq> q;\n    q.push((qwq){1, 0});\n    while(q.size()){\n        qwq al = q.top();\n        q.pop();\n        if (vis[al.v])\n            continue;\n        dis[al.v] = al.dis;\n        vis[al.v] = 1;\n        for (edge *i = G[al.v]; i; i = i->nxt){\n            if (vis[i->v]){\n                if (i->v == 1 && dis[al.v] + i->cs == 0){\n                    //node1 on a zero circle\n                    zero_1 = 1;\n                    return ;\n                }\n                continue;\n            }\n            q.push((qwq){i->v, al.dis + i->cs});\n        }\n    }\n    return ;\n}\n//dijkstra end\n//dp\nLL dp[100010][60];\nbool sta[100010][60];\nLL meow(LL u, LL hp){\n    if (sta[u][hp])\n    //a zero circle on this road\n        return -1;\n    if (dp[u][hp] != -1)\n        return dp[u][hp];\n    sta[u][hp] = 1;\n    LL al = 0, hp_;\n    for (edge *i = G_[u];i;i = i->nxt){\n        hp_ = hp + dis[u] - i->cs - dis[i->v];\n        if (hp_ < 0 || hp_ > k)\n            continue;\n        LL tmp = meow(i->v, hp_);\n        if (tmp == -1)\n            return -1;\n        al = (al + tmp) % p;\n    }\n    sta[u][hp] = 0;\n    return dp[u][hp] = al;\n}\n//dp end\nint main (){\n    cin >> T;\n    while (T--){\n        //initialization\n        memset(dis, 0, sizeof(dis));\n        memset(vis, 0, sizeof(vis));\n        memset(dp, -1, sizeof(dp));\n        memset(sta, 0, sizeof(sta));\n        zero_1 = 0;\n        LL al, be, ge;\n        scanf(\"%lld%lld%lld%lld\", &n, &m, &k, &p);\n        for (LL i = 1;i <= m;++ i){\n            scanf(\"%lld%lld%lld\", &al, &be, &ge);\n            G[al] = new edge(be, ge, G[al]);\n            G_[be] = new edge(al, ge, G_[be]);\n        }\n        //main\n        LL ans = 0;\n        dijkstra(1);\n        if (zero_1){\n            ans = -1;\n        }\n        else{\n            dp[1][0] = 1;\n            for (LL i = 0;i <= k;++ i){\n                LL tmp = meow(n, i);\n                if (tmp == -1){\n                    ans = -1;\n                    break;\n                }\n                ans = (ans + tmp) % p;\n            }\n        }\n        printf(\"%lld\\n\", ans);\n        //initialization\n        del_g(G, n);del_g(G_, n);\n    }\n    return 0;\n}\n\n```\n\n\u6587\u7ed3.\n\n![](https://pics1.beautyyuyanli.ml/IMG_20190616_120418_1.jpg)",
        "postTime": 1568802116,
        "uid": 61353,
        "name": "BeautyYu\u8a00\u91b4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "```cpp\n/*\u56fe\u8bba+dp\uff0c\u7ec6\u8282\u8f83\u591a\u5bb9\u6613\u5199\u9519 \n\u6838\u5fc3\u662f\u4e2a\u80cc\u5305dp\uff0cdp[i][j]\u8868\u793a\u8282\u70b9i\u5230\u7ec8\u70b9n\uff0c\u4e0e\u6700\u77ed\u8def\u5f84\u5dee<=j\u7684\u8def\u5f84\u6761\u6570\uff08\u65b9\u6848\u6570\uff09 \n\u5373\u6ee1\u8db3dis(i, n) <= MinDis(i, n) + j\u7684\u8def\u5f84\u6761\u6570\uff0c\u5219\u7b54\u6848\u662fdp[1][K] \n\u8f6c\u79fb\u65b9\u7a0b\uff1a\ndp[u][j] = sigma(dp[v][j+MinDis(u,n)-MinDis(v,n)-w]) u->v\u7684\u8ddd\u79bb\u4e3aw \n\u8fb9\u754c\u4e3adp[n][j]=1, 0<=j<=K\uff0c\u5b9e\u73b0\u65f6\u7528dfs\u8fdb\u884c\u8bb0\u5fc6\u5316\u641c\u7d22\u6700\u65b9\u4fbf\u3002\n\u53e6\u5916\u5224\u65ad0\u73af\u53ea\u9700\u8981\u7528\u6808\u8bb0\u5f55\u5f53\u524ddp\u8282\u70b9\u662f\u5426\u5728\u6808\u91cc\u5373\u53ef\uff0cvis[i][j]\u3002 \n\u8ba1\u7b97\u65f6\u8981\u5efa\u4e2a\u53cd\u56fe\uff0c\u4ee5\u7ec8\u70b9n\u4e3a\u8d77\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u7b97\u51faMindis(i, n) */\n#include<cstdio>\n#include<cstring>\n#define MAXN 100005\nint n, m, k, mod, tot, tot2, dis[MAXN], vis[MAXN][55], dp[MAXN][55];\nstruct node{\n\tint v, w;\n\tnode *next;\n}*h[MAXN], pool[MAXN<<1];\nstruct inv{\n\tint v, w;\n\tinv *next;\n}*h2[MAXN], pool2[MAXN<<1];\nvoid addedge(int u, int v, int w)\n{\n\tnode *p = &pool[tot++];\n\tp->v = v; p->w = w; p->next = h[u]; h[u] = p;\n} \nvoid addedge2(int u, int v, int w)\n{\n\tinv *p = &pool2[tot2++];\n\tp->v = v; p->w = w; p->next = h2[u]; h2[u] = p;\n}\nint q[MAXN<<2];   //\u6ce8\u610f\u8fd9\u91cc\uff01\u67090\u8fb9\u6240\u4ee5\u6570\u7ec4\u8981\u5f00\u5927\uff01\u4e0d\u7136\u4f1aRE \nvoid spfa()\n{\n\tmemset(dis, 0x3f, sizeof(dis));\n\tint head = 1, tail = 1;\n\tq[head] = n; dis[n] = 0;\n\twhile(head <= tail)\n\t{\n\t\tint u = q[head++], v;\n\t\tfor(inv *p = h2[u]; p; p = p->next)\n\t\t\tif(dis[v = p->v] > dis[u] + p->w)\n\t\t\t\tdis[v] = dis[u] + p->w, q[++tail] = v;\n\t}\n}\nint dfs(int u, int j)\n{\n\tif(vis[u][j]) return -1;\n\tif(dp[u][j]) return dp[u][j];\n\tvis[u][j] = 1;\n\tif(u == n) dp[u][j] = 1;  //\u8fb9\u754c \n\tfor(node *p = h[u]; p; p = p->next)\n\t{\n\t\tint v = p->v, tmp = j + dis[u] - dis[v] - p->w;\n\t\tif(tmp >= 0)\n\t\t{\n\t\t\tif(dfs(v, tmp) == -1) return -1;  //0\u73af\u8fd4\u56de-1 \n\t\t\tdp[u][j] = (dp[u][j] + dfs(v, tmp)) % mod; \n\t\t}\n\t}\n\tvis[u][j] = 0;\n\treturn dp[u][j];\n}\ninline int read()\n{\n\tint x = 0; char c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\twhile(c <= '9' && c >= '0'){\n\t\tx = (x << 3) + (x << 1) + (c ^ 48); c = getchar();}\n\treturn x;\n}\nint main()\n{\n\tint t = read();\n\twhile(t--)\n\t{\n\t\tmemset(h, 0, sizeof(h));\n\t\tmemset(h2, 0, sizeof(h2));\n\t\tmemset(dp, 0, sizeof(dp));\n\t\tmemset(vis, 0, sizeof(vis));\n\t\ttot = tot2 = 0;\n\t\tn = read(); m = read(); k = read(); mod = read();\n\t\tfor(int i = 1, u, v, w; i <= m; ++i)\n\t\t{\n\t\t\tu = read(); v = read(); w = read();\n\t\t\taddedge(u, v, w);   //\u6b63\u56fe \n\t\t\taddedge2(v, u, w);  //\u53cd\u56fe \n\t\t}\n\t\tspfa();\n\t\tprintf(\"%d\\n\", dfs(1, k));\n\t}\n\treturn 0;\n}\n```\n```cpp\n/*\u56fe\u8bba+dp\uff0c\u7ec6\u8282\u8f83\u591a\u5bb9\u6613\u5199\u9519 \n\u6838\u5fc3\u662f\u4e2a\u80cc\u5305dp\uff0cdp[i][j]\u8868\u793a\u8282\u70b9i\u5230\u7ec8\u70b9n\uff0c\u4e0e\u6700\u77ed\u8def\u5f84\u5dee<=j\u7684\u8def\u5f84\u6761\u6570\uff08\u65b9\u6848\u6570\uff09 \n\u5373\u6ee1\u8db3dis(i, n) <= MinDis(i, n) + j\u7684\u8def\u5f84\u6761\u6570\uff0c\u5219\u7b54\u6848\u662fdp[1][K] \n\u8f6c\u79fb\u65b9\u7a0b\uff1a\ndp[u][j] = sigma(dp[v][j+MinDis(u,n)-MinDis(v,n)-w]) u->v\u7684\u8ddd\u79bb\u4e3aw \n\u8fb9\u754c\u4e3adp[n][j]=1, 0<=j<=K\uff0c\u5b9e\u73b0\u65f6\u7528dfs\u8fdb\u884c\u8bb0\u5fc6\u5316\u641c\u7d22\u6700\u65b9\u4fbf\u3002\n\u53e6\u5916\u5224\u65ad0\u73af\u53ea\u9700\u8981\u7528\u6808\u8bb0\u5f55\u5f53\u524ddp\u8282\u70b9\u662f\u5426\u5728\u6808\u91cc\u5373\u53ef\uff0cvis[i][j]\u3002 \n\u8ba1\u7b97\u65f6\u8981\u5efa\u4e2a\u53cd\u56fe\uff0c\u4ee5\u7ec8\u70b9n\u4e3a\u8d77\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u7b97\u51faMindis(i, n) */\n#include<cstdio>\n#include<cstring>\n#define MAXN 100005\nint n, m, k, mod, tot, tot2, dis[MAXN], vis[MAXN][55], dp[MAXN][55];\nstruct node{\n\tint v, w;\n\tnode *next;\n}*h[MAXN], pool[MAXN<<1];\nstruct inv{\n\tint v, w;\n\tinv *next;\n}*h2[MAXN], pool2[MAXN<<1];\nvoid addedge(int u, int v, int w)\n{\n\tnode *p = &pool[tot++];\n\tp->v = v; p->w = w; p->next = h[u]; h[u] = p;\n} \nvoid addedge2(int u, int v, int w)\n{\n\tinv *p = &pool2[tot2++];\n\tp->v = v; p->w = w; p->next = h2[u]; h2[u] = p;\n}\nint q[MAXN<<2];   //\u6ce8\u610f\u8fd9\u91cc\uff01\u67090\u8fb9\u6240\u4ee5\u6570\u7ec4\u8981\u5f00\u5927\uff01\u4e0d\u7136\u4f1aRE \nvoid spfa()\n{\n\tmemset(dis, 0x3f, sizeof(dis));\n\tint head = 1, tail = 1;\n\tq[head] = n; dis[n] = 0;\n\twhile(head <= tail)\n\t{\n\t\tint u = q[head++], v;\n\t\tfor(inv *p = h2[u]; p; p = p->next)\n\t\t\tif(dis[v = p->v] > dis[u] + p->w)\n\t\t\t\tdis[v] = dis[u] + p->w, q[++tail] = v;\n\t}\n}\nint dfs(int u, int j)\n{\n\tif(vis[u][j]) return -1;\n\tif(dp[u][j]) return dp[u][j];\n\tvis[u][j] = 1;\n\tif(u == n) dp[u][j] = 1;  //\u8fb9\u754c \n\tfor(node *p = h[u]; p; p = p->next)\n\t{\n\t\tint v = p->v, tmp = j + dis[u] - dis[v] - p->w;\n\t\tif(tmp >= 0)\n\t\t{\n\t\t\tif(dfs(v, tmp) == -1) return -1;  //0\u73af\u8fd4\u56de-1 \n\t\t\tdp[u][j] = (dp[u][j] + dfs(v, tmp)) % mod; \n\t\t}\n\t}\n\tvis[u][j] = 0;\n\treturn dp[u][j];\n}\ninline int read()\n{\n\tint x = 0; char c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\twhile(c <= '9' && c >= '0'){\n\t\tx = (x << 3) + (x << 1) + (c ^ 48); c = getchar();}\n\treturn x;\n}\nint main()\n{\n\tint t = read();\n\twhile(t--)\n\t{\n\t\tmemset(h, 0, sizeof(h));\n\t\tmemset(h2, 0, sizeof(h2));\n\t\tmemset(dp, 0, sizeof(dp));\n\t\tmemset(vis, 0, sizeof(vis));\n\t\ttot = tot2 = 0;\n\t\tn = read(); m = read(); k = read(); mod = read();\n\t\tfor(int i = 1, u, v, w; i <= m; ++i)\n\t\t{\n\t\t\tu = read(); v = read(); w = read();\n\t\t\taddedge(u, v, w);   //\u6b63\u56fe \n\t\t\taddedge2(v, u, w);  //\u53cd\u56fe \n\t\t}\n\t\tspfa();\n\t\tprintf(\"%d\\n\", dfs(1, k));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565501088,
        "uid": 65531,
        "name": "18811162081lyh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\n### \u5148\u8bf4\u70b9\u522b\u7684\n- emmm......,\u8fd9\u662f\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5927\u4f6c\u52ff\u55b7QwQ\uff08~~\u5176\u5b9e\u662f\u56e0\u4e3a\u9898\u89e3\u91cc\u6ca1\u6709Pascal\u7684~~......\uff09\n\n\n------------\n\n\n# \u6b63\u6587\n\n\n------------\n\n\n\n\n\n#### \u524d\u7f6e\u6280\u80fd\n- SPFA:\u53f3\u8f6c[P1608\u8def\u5f84\u7edf\u8ba1](https://www.luogu.org/problem/P1608)(\u53ef\u4ee5\u987a\u5e26AC\u6389[P1144\u6700\u77ed\u8def\u8ba1\u6570](https://www.luogu.org/problem/P1144))\n\n- DP:(~~\u55ef...\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427~~)\n\n#### \u9898\u610f\uff1a\u6c42dis(1,n)<=MinDis(1,n)+k\u7684\u8def\u5f84\u6570(mod p)\n\n\n------------\n\n### 1. 30pts\uff1aK=0\n       \u88f8\u7684SPFA\n### 2. 70pts\uff1a\u6ca1\u67090\u8fb9\n       \u5148\u6c42\u51faMinDis(1,u)\u7136\u540e\u4ee4f[u][l]\u4e3adis(1,u)=MinDis(1,u)+l\u7684\u8def\u5f84\u6570\n       f[u,l]:=(f[u,l]+f[v,l+w(u,v)+MinDis(1,v)-MinDis(1,u)]) mod p (v<u)\n       \u53cd\u5411\u5efa\u56fe\u7136\u540e\u4ecef[n,i])(0\u2266i\u2266k)\u5f00\u59cb\u8bb0\u5fc6\u5316\u679a\u4e3e\uff0c\u6700\u540e\u7d2f\u52a0\u5e76\u8f93\u51fa\n       PS:w(u,v)\u6307\u8fde\u63a5u\uff5ev\u8fb9\u7684\u957f\u5ea6,w(u,v)-MinDis(1,v)-MinDis(1,u)]\u6307\u4eceu\u8f6c\u79fb\u5230v\u6240\u589e\u52a0\u7684\u51a4\u6789\u8def\n### 3. 100pts\uff1a70pts+0\u8fb9\n       \u572870pts\u7684\u57fa\u7840\u4e0a\u5f15\u5165\u4e00\u4e2a\u65b0\u6570\u7ec4flag[u][l],\u8868\u793a[u,l]\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7(\u521d\u59cb\u503c\u5747\u4e3a0\uff09\uff0c\n       \u82e5\u8bbf\u95ee\u65f6\u9047\u5230flag[u,l]=1,\u5219\u8bf4\u660e\u51fa\u73b0\u96f6\u73af(\u56e0\u4e3al\u8fd9\u4e00\u7ef4\u4e0d\u53ef\u80fd\u5728u\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\u4ecd\u4fdd\u6301\u4e0d\u53d8\uff09\n       PS:[u,l]\u5728\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u53c8\u56de\u5230u\u70b9\uff0cl\u5fc5\u4f1a\u6539\u53d8(\u5373\u4f7f\u6709\u8fb9\u503c\u4e0d\u4e3a0\u7684\u73af\uff0cMinDis(u,v)\u548cw(u,v)\u4e5f\u5fc5\u6709\u5dee\u5f02\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5)\n\n## \u7ec6\u8282\u89c1\u4ee5\u4e0b\u4ee3\u7801(\u4ee3\u7801\u8f83\u957f\uff0c\u656c\u8bf7\u539f\u8c05)\n```pascal\nvar i,j,n,m,k,p,a1,b1,c1,z,tot,tot1,t,sum:longint; next,val,vet,head,next1,val1,vet1,head1,que,que1:array[0..200005] of longint;\n   d,alive:array[0..100005] of longint; ans,flag:array[0..100005,0..55] of longint;\nprocedure add(u,v,cost:longint);//\u94fe\u5f0f\u524d\u5411\u661f(\u8fb9\u8868\uff09\u6784\u5efa\u56fe(\u4e0d\u61c2\u7684\u540c\u5b66\u53ef\u52a8\u624b\u6a21\u62df\u6bcf\u4e2a\u6570\u7ec4\u7684\u53d8\u5316)\nbegin\n  inc(tot);\n  next[tot]:=head[u];\n  val[tot]:=cost;\n  vet[tot]:=v;\n  head[u]:=tot;\nend;\nprocedure add1(u,v,cost:longint);//\u6784\u5efa\u53cd\u5411\u56fe(\u6570\u7ec4\u8981\u5206\u5f00\u7528,\u5373\u6784\u5efau>v\u7684\u56fe)\nbegin\n  inc(tot1);\n  next1[tot1]:=head1[u];\n  val1[tot1]:=cost;\n  vet1[tot1]:=v;\n  head1[u]:=tot1;\nend;\nprocedure spfa;//\u88f8\u7684SPFA,(\u5c31\u4e0d\u591a\u8bb2\u4e86)PS:\u8fd9\u91cc\u662f\u6b63\u7740\u904d\u5386\nvar i,l,r,x,y,z1,e:longint;\nbegin\n  for i:=2 to n do d[i]:=1000000000;\n  d[1]:=0;\n  l:=1; r:=1; que[1]:=1;\n  while l<=r do\n  begin\n    x:=que[l]; inc(l);\n    e:=head[x];\n    while e<>0 do\n    begin\n      y:=vet[e]; z1:=val[e];\n      if d[y]>d[x]+z1 then\n      begin\n        d[y]:=d[x]+z1;\n        inc(r); que[r]:=y;\n      end;\n      e:=next[e];\n    end;\n  end;\nend;\nfunction dfs(a,b:longint):longint;//\u53cd\u5411\u904d\u5386,\u56e0\u4e3a\u662f\u8bb0\u5fc6\u5316\uff0c\u72b6\u6001\u4ecen\u6765\nvar e,y,z1,u,w,key:longint;\nbegin\n  if (b<0) or (b>k) then exit(0);//\u72b6\u6001\u4e0d\u5408\u6cd5\n  if flag[a,b]=1 then\n  begin\n    flag[a,b]:=0;\n    exit(-1000000000);\n  end;//\u52240\u73af\n  if ans[a,b]<>-1 then exit(ans[a,b]);//\u8bb0\u5fc6\u5316\n  flag[a,b]:=1;//\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee key:=0;\n  e:=head1[a];\n  while e<>0 do\n  begin\n    y:=vet1[e]; z1:=val1[e]; u:=d[y]-d[a];\n    w:=dfs(y,b-(z1+u));//\u904d\u5386\u90bb\u70b9\n    if w=-1000000000 then\n    begin\n      flag[a,b]:=0;\n      exit(-1000000000);\n    end;\n    key:=(key+w) mod p;\n    e:=next1[e];\n  end;\n  if (a=1) and (b=0) then inc(key);\n  ans[a,b]:=key;//\u8bb0\u5fc6\u5316\n  flag[a,b]:=0;//\u5f52\u96f6\n  exit(key);\nend;\nbegin\n  readln(t);\n  while t>0 do\n  begin\n    readln(n,m,k,p);\n    for i:=1 to n do begin head[i]:=0; head1[i]:=0; end;\n    for i:=1 to n do\n      for j:=0 to k do\n      begin\n        ans[i,j]:=-1;\n        flag[i,j]:=0;\n      end;\n    tot:=0; tot1:=0;//\u6bcf\u4e00\u7ec4\u6570\u636e\u8bfb\u5165\u524d\u53d8\u91cf\u6e05\u7a7a\n    for i:=1 to m do\n    begin\n      readln(a1,b1,c1);\n      add(a1,b1,c1);\n      add1(b1,a1,c1);//\u53cd\u5411\u5efa\u56fe\n    end;\n    spfa;\n    sum:=0;\n    for i:=0 to k do\n    begin\n      z:=dfs(n,i);\n      if z=-1000000000 then\n      begin\n        sum:=-1; break;\n      end;\n      sum:=(sum+z) mod p;\n    end;//\u7d2f\u52a0\n    writeln(sum);\n    dec(t);\n  end;\nend.\n\n\n```\n\n       \n       ",
        "postTime": 1564409010,
        "uid": 45199,
        "name": "_TLJYatm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u5e86\u795d\u81ea\u5df1\u53c8\u624b\u5203\u4e86\u4e00\u9053\u7d2b\u9898\uff01\n\nP3953 \u901b\u516c\u56ed\uff0cNOIP\u539f\u9898\u7684\u56fe\u8bba\u9898\u7ec8\u4e8e\u62e6\u4e0d\u4f4f\u6211\u4e86\uff01\n\n```cpp\n// luogu-judger-enable-o2\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#define K 55\n#define N 100001\n#define M 200002\nusing namespace std;\nstruct edge{\n    int to,val,next;\n} e[M],E[M];\nint k,m,n,p,u,v,w,T,cnt1,cnt2,hd[N],HD[N],dis[N];\nbool flag,vis[N],used[N][K];\nlong long ans,f[N][K];\nqueue <int> q;\n void clear()\n {\n \tflag=false;\n \tans=cnt1=cnt2=0;\n \tmemset(f,0,sizeof(f));\n \tmemset(hd,0,sizeof(hd));\n \tmemset(HD,0,sizeof(HD));\n \tmemset(dis,0x3f,sizeof(dis));\n \tmemset(vis,false,sizeof(vis));\n \twhile(!q.empty()) q.pop();\n }\n void build(int u,int v,int w)\n {\n \tcnt1++;\n \te[cnt1].to=v;\n \te[cnt1].val=w;\n \te[cnt1].next=hd[u];\n \thd[u]=cnt1;\n }\n void built(int u,int v,int w)\n {\n \tcnt2++;\n \tE[cnt2].to=v;\n \tE[cnt2].val=w;\n \tE[cnt2].next=HD[u];\n \tHD[u]=cnt2;\n }\n void spfa(int s)\n {\n \tq.push(s);\n \tdis[s]=0;\n \tvis[s]=true;\n \twhile(!q.empty())\n \t{\n \t\tint h=q.front();q.pop();\n \t\tvis[h]=false;\n \t\tfor(int i=HD[h];i;i=E[i].next)\n \t\t{\n \t\t\tint t=E[i].to;\n \t\t\tif(dis[t]>dis[h]+E[i].val)\n \t\t\t{\n \t\t\t\tdis[t]=dis[h]+E[i].val;\n \t\t\t\tif(!vis[t])\n \t\t\t\t{\n \t\t\t\t\tq.push(t);\n \t\t\t\t\tvis[t]=true;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n }\n int dfs(int h,int b)\n {\n \tif(used[h][b])\n \t {flag=true;return 0;}\n \tif(f[h][b]) return f[h][b];\n \tint sum=0;\n \tused[h][b]=true;\n \tfor(int i=hd[h];i;i=e[i].next)\n \t{\n \t\tint t=e[i].to,tmp=b-(dis[t]+e[i].val-dis[h]);\n \t\tif(tmp>=0&&tmp<=k)\n \t\t{\n \t\t\tsum=(sum+dfs(t,tmp))%p;\n \t\t\tif(flag) return 0;\n \t\t}\n \t}\n \tif(h==n&&b==0) sum=1;\n \tf[h][b]=sum;\n \tused[h][b]=false;\n \treturn f[h][b];\n }\nint main()\n{\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        clear();\n        scanf(\"%d%d%d%d\",&n,&m,&k,&p);\n        for(int i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&u,&v,&w);\n            build(u,v,w);built(v,u,w);\n        }\n        spfa(n);\n        for(int i=0;i<=k;i++)\n        {\n            memset(used,false,sizeof(used));\n            ans=(ans+dfs(1,i))%p;\n        }\n        if(flag) puts(\"-1\");\n        else printf(\"%lld\\n\",ans%p);\n    }\n    return 0;\n}\n```\n\u8fd9\u7bc7\u9898\u89e3\u7559\u7ed9\u81ea\u5df1\u770b\uff0c\u6240\u4ee5\u5199\u7684\u7b80\u6d01\u4e00\u70b9\n\n1. \u524d\u4f20\n```latex\n\u9996\u5148\u4ece1\u5230n\uff0c\u8fd9\u4e00\u770b\u5c31\u662f\u9053\u56fe\u8bba\u9898\uff08\u5427\uff1f\uff09\n\u518d\u4e00\u770b\u9898\u76ee\u8981\u6c42\uff0c\u6c42\u51fa\u5728\u4e00\u5b9a\u504f\u5dee\u5185\u7684\u6700\u77ed\u8def\u6761\u6570\n\u518d\u770b\u4e00\u773ck\uff0c50\uff0c\u4f3c\u4e4e\u662f\u4e2adp\uff08\u5427\uff1f\uff09\n\u4e0d\u7ba1\uff0c\u5148\u5efa\u56fe\u8dd1\u4e2a\u6700\u77ed\u8def\u3002\n```\n2. \u601d\u8def\n```latex\n\u5e72\u60f3\u4e86\u5c06\u8fd1\u4e8c\u5341\u5206\u949f\uff0c\u7ec8\u4e8e\u60f3\u51fa\u6765\u4e86\n\u4f46\u662f\u8fd9\u4e2adp\u65b9\u7a0b\u548b\u5b9e\u73b0\u554a\n\n\u53bb\u8bf7\u6559\u4e86\u4e00\u4e0b\uff08\u5728\u5b66\u83ab\u53cd\u7684\uff09\u5927\u4f6cxyp\n\u4ed6\u8bf4\uff1a\u867d\u7136\u662fdp\uff0c\u4f60\u53ef\u4ee5\u7528\u8bb0\u641c\u5b9e\u73b0\u554a\n\u641c\u7684\u65f6\u5019\u8bb0\u5f55\u597d\u504f\u7f6e\n```\n3. \u8d70\u7740\n\n\u4e00\u5f00\u59cb\u4e5f\u6ca1\u60f3\u90a3\u4e48\u591a\uff0c\u5c31\u5efa\u4e86\u5f20\u56fe\u8dd1\u6700\u77ed\u8def\u3002\n\u7136\u540e\u4ece1\u5f00\u59cb\u8bb0\u641c\uff0c\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n```cpp\n int dfs(int h,int b)\n {\n \tif(f[h][b]) return f[h][b];\n \tint sum=0;\n \tfor(int i=hd[h];i;i=e[i].next)\n \t{\n \t\tint t=e[i].to,tmp=b-(dis[t]+e[i].val-dis[h]);\n \t\tif(tmp>=0&&tmp<=k) sum=(sum+dfs(t,tmp))%p;\n \t}\n \tif(h==n&&b==0) sum=1;\n \tf[h][b]=sum;\n \treturn f[h][b];\n }\n```\n\u8bbe\u4e00\u4e2atmp=b-(dis[t]-dis[h]+e[i].val),\u5982\u679c\u57280~50\u4e4b\u95f4\u5c31\u53ef\u4ee5\u7ee7\u7eed\u641c\u3002\n\n4. \u95ee\u9898\u6765\u4e86\n\nQ1:\u600e\u4e48\u5224\u96f6\u73af\u554a\uff1f\uff1f\n\nQ2:\u5982\u679c\u6709\u7684\u8def\u5230\u4e0d\u4e86n\u600e\u4e48\u529e\u554a\uff1f\uff1f\n\n5. \u4ed4\u7ec6\u8003\u8651\u4e86\u4e00\u4e0b\n\n\u7efc\u5408\u4e4b\u524d\u505a\u9898\u7684\u5957\u8def\n\n\u96f6\u73af\u80af\u5b9a\u4e0d\u80fd\u7528spfa\u5224\n\nA2\uff1a\u6709\u7684\u8def\u5230\u4e0d\u4e86n\u7684\u8bdd\u2026\u2026\u8bd5\u7740\u5efa\u5f20\u53cd\u56fe\uff1f\n\n\u4ecen\u5f00\u59cb\u641c\uff0c\u8fd9\u6837\u641c\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u80fd\u987a\u7740\u6b63\u56fe\u5230\u8fben\u7684\u70b9!\n\n6. \u53c8\u53bb\u8bf7\u6559xyp\u5927\u4f6c\u4e86\n\nA1\uff1a\u5f88\u7b80\u5355\uff0c\u4f60\u5728\u641c\u7d22\u91cc\u9762\u8bbe\u4e2a\u6570\u7ec4\u50a8\u5b58\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u641c\u8fc7\uff0c\u518d\u641c\u56de\u6765\u7684\u8bdd\u8bf4\u660e\u6709\u96f6\u73af\n\nok\n\n\u6240\u6709\u95ee\u9898\u5706\u6ee1\u89e3\u51b3\uff01\n\n\uff08ps\uff1a\u63d0\u4ea4\u4e0b\u9898\u89e3\u8bd5\u8bd5\uff0c\u5982\u679c\u901a\u8fc7\u4e86\u6211\u5c31\u628a\u6bcf\u4e2a\u5730\u65b9\u518d\u8be6\u7ec6\u8bb2\u89e3\u4e00\u4e0b\uff09",
        "postTime": 1562399410,
        "uid": 183448,
        "name": "Lucaster_",
        "ccfLevel": 0,
        "title": "\u8bb0\u641c\u6700\u77ed\u8def\uff08\u53c8\u4e00\u9053\u7d2b\u9898\uff09"
    },
    {
        "content": "[$My\\ blog$](https://ctz45562.github.io/2019/04/12/%E6%B4%9B%E8%B0%B7-P3953-NOIP2017-%E9%80%9B%E5%85%AC%E5%9B%AD/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3953)\n\n\u7ffb\u4e86\u7ffb\u5f80\u5e74\u7684$NOIP$\u9898\uff0c\u7ec8\u4e8e\u627e\u5230\u4e00\u9053\u53ef\u505a\u7684\u4e86$QwQ$\n\n\u80af\u5b9a\u8981\u5148\u8dd1\u4e2a\u6700\u77ed\u8def\u3002\n\n\u5148\u4e0d\u7ba1\u65e0\u89e3\u3002\u7b2c\u4e00\u53cd\u5e94\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u641c\u7d22\u72b6\u6001\u4e3a**\u5f53\u524d\u8282\u70b9**\u548c**\u5df2\u7ecf\u8d70\u7684\u8ddd\u79bb**\u3002\n\n\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u5df2\u7ecf\u8d70\u7684\u8ddd\u79bb\u4e0a\u754c\u592a\u5927\uff0c\u6570\u7ec4\u5f00\u4e0d\u4e0b\u3002\n\n\u6ce8\u610f\u5230$K$\u8d3c\u5c0f\uff0c\u53ef\u4ee5\u628a$K$\u5f53\u505a\u72b6\u6001\u3002\n\n\u4e8e\u662f\u72b6\u6001\u5c31\u6539\u4e3a**\u5f53\u524d\u8282\u70b9**\u548c**\u4e0e\u6700\u77ed\u8def\u7684\u5dee\u8ddd**\u3002\n\n\u663e\u7136\uff0c\u6839\u636e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff0c\u8d70\u8fb9$edge(x,y)$\u4f1a\u5bfc\u81f4\u5dee\u8ddd\u589e\u5927$dis_x+edge(x,y).len-dis_y$\uff08$dis$\u662f\u6700\u77ed\u8def\uff09\n\n\u4f9d\u6b64\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\u3002\u540c\u65f6\u8981\u6ce8\u610f\uff0c\u641c\u5230\u70b9$n$\u4e0d\u80fd\u505c\u6b62\uff0c\u53ef\u80fd\u901a\u8fc7\u5f80\u56de\u8d70\u7ed5\u51e0\u5708\u56de\u6765\u4e5f\u662f\u5408\u6cd5\u7684\u3002~~\uff08\u849f\u84bb\u56e0\u4e3a\u8fd9\u4e2a\u53d6\u5f97\u4e8630\u5206\u7684\u597d\u6210\u7ee9\uff09~~\n\n\u518d\u6765\u5904\u7406\u65e0\u89e3\u3002\u6ee1\u8db3\u65e0\u89e3\u7684\u6761\u4ef6\uff1a\n\n1. \u5b58\u5728$0$\u73af\n2. \u4ece\u8d77\u70b9\u7ecf\u8fc7$0$\u73af\u5230\u7ec8\u70b9\u5b58\u5728\u4e00\u6761\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e$dis_n+K$\u7684\u8def\u5f84\n\n~~\u5224\u73af\u6211\u53ea\u4f1aTarjan~~\n\n\u53cd\u5411\u5efa\u56fe\u8dd1\u6700\u77ed\u8def\uff0c\u7136\u540e\u4f9d\u6b21\u5bf9\u4f4d\u4e8e$0$\u73af\u7684\u70b9\u5224\u65ad$dis(1,x)+dis(n,x)$\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e$dis(1,n)+K$\u3002\n\n\n\u4ee3\u7801\uff1a\n\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <queue>\n\n#define maxn 100005\n#define inf 0x3f3f3f3f\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nint dis[maxn],disn[maxn],H[maxn],h[maxn],f[maxn][51],sta[maxn],seg[maxn],low[maxn],top,n,m,k,mod,num,all;\nbool vis[maxn],zero[maxn];\npriority_queue<pair<int,int> >q;\nstruct edge{\n\tint pre,to,l;\n}e[maxn<<1],E[maxn<<1];\n//\u5927\u5199\u7684\u90fd\u662f\u53cd\u5411\u5efa\u7684\u8fb9\ninline void add(int from,int to,int l){\n\te[++num].pre=h[from],h[from]=num,e[num].to=to,e[num].l=l;\n\tE[num].pre=H[to],H[to]=num,E[num].to=from;\n}\nvoid DJ(){\n\tmemset(dis,0x3f,sizeof dis);\n\tdis[1]=0,q.push(make_pair(0,1));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(register int i=h[x];i;i=e[i].pre)\n\t\t\tif(dis[e[i].to]>dis[x]+e[i].l)q.push(make_pair(-(dis[e[i].to]=dis[x]+e[i].l),e[i].to));\n\t}\n}\nvoid reDJ(){\n\tmemset(disn,0x3f,sizeof disn);\n\tdisn[n]=0,q.push(make_pair(0,n));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(register int i=H[x];i;i=E[i].pre)\n\t\t\tif(disn[E[i].to]>disn[x]+E[i].l)q.push(make_pair(-(disn[E[i].to]=disn[x]+E[i].l),E[i].to));\n\t}\n}//\u53cd\u5411\u6700\u77ed\u8def\nvoid TJ(int node){\n\tvis[node]=1,sta[++top]=node;\n\tseg[node]=low[node]=++all;\n\tint x;\n\tfor(register int i=h[node];i;i=e[i].pre){\n\t\tif(e[i].l)continue;//\u53ea\u8dd10\u8fb9\u52240\u73af\n\t\tx=e[i].to;\n\t\tif(!seg[x])TJ(x),low[node]=min(low[node],low[x]);\n\t\telse if(vis[x])low[node]=min(low[node],seg[x]);\n\t}\n\tif(seg[node]==low[node]){\n\t\tif(sta[top]!=node)zero[node]=1;\n\t\twhile(sta[top]!=node)vis[sta[top]]=0,zero[sta[top--]]=1;\n\t\t--top,vis[node]=0;\n\t}\n}\nint dfs(int node,int delta){\n\tif(delta>k)return 0;//\u5dee\u8ddd\u8d85\u51fa\u9650\u5236\u4e0d\u5408\u6cd5\n\tif(~f[node][delta])return f[node][delta];\n\tf[node][delta]=(node==n);//\u5230\u4e86\u7ec8\u70b9\u5c31\u67091\u79cd\u65b9\u6848\n\tint x;\n\tfor(register int i=h[node];i;i=e[i].pre){\n\t\tx=e[i].to;\n\t\tf[node][delta]+=dfs(x,delta+dis[node]+e[i].l-dis[x]);\n\t\tif(f[node][delta]>=mod)f[node][delta]%=mod;\n\t}\n\treturn f[node][delta];\n}\nint main(){\n\tint t=read(),x,y;\n\twhile(t--){\n\t\tn=read(),m=read(),k=read(),mod=read();\n\t\tmemset(seg,0,sizeof seg);\n\t\tmemset(zero,0,sizeof zero);\n\t\tmemset(h,0,sizeof h);\n\t\tmemset(H,0,sizeof H),num=0,all=0;\n\t\tmemset(vis,0,sizeof vis);\n\t\twhile(m--)x=read(),y=read(),add(x,y,read());\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tif(!seg[i])TJ(i);\n\t\treDJ();\n\t\tmemset(vis,0,sizeof vis);\n\t\tDJ();\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tif(zero[i]&&dis[i]+disn[i]<=dis[n]+k)goto Bad_Option;\n\t\tmemset(f,-1,sizeof f);\n\t\tprintf(\"%d\\n\",dfs(1,0));//\u521d\u59cb\u7684\u5dee\u8ddd\u4e3a0\n\t\tcontinue;\nBad_Option:\n\t\tputs(\"-1\");\n\t}\n}\n\n```\n\n",
        "postTime": 1555030262,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u5177\u4f53\u601d\u8def\u4e0a\u9762\u4e00\u5927\u628a\uff0c\u6211\u8bb2\u51e0\u4e2a\u975e\u5e38\u7cbe\u5f69\u7684\u5730\u65b9\n\n\uff081\uff09\u770b\u5230k\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u628ak\u5f53\u4f5c\u72b6\u6001\u7684\u4e00\u7ef4\uff0c dp[u][k]\u8868\u793a\u4ecen\u8d70\u5230u\u6bd4\u6700\u77ed\u8def\u591a\u8d70k\u7684\u65b9\u6848\u6570\n\n\uff082\uff09\u53cd\u5411\u8fb9\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u5957\u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u5199\uff0c\u975e\u5e38\u79c0\n\n\uff083\uff09\u5224\u65ad\u6709\u6ca1\u6709\u73af\u7684\u65f6\u5019\u6ce8\u610f\u662f\u518d\u641c\u5230\u4e00\u6b21\uff0c\u540c\u65f6\u5728\u6808\u91cc\u9762\n\n\uff084\uff09\u6ce8\u610f\u521d\u59cb\u5316\u662f\u6b63\u5411\u56fe\uff0cdp\u662f\u53cd\u5411\u56fe\uff0c\u8fd9\u6837\u8fde\u8d77\u6765\u6070\u597d\u6784\u6210\u4e00\u6761\u4ece1\u5230n\u7684\u8def\u5f84\n\n\uff085\uff09\u4e0a\u9762\u5f88\u591a\u9898\u89e3\u5199\u7684\u662f\u5efa\u7acb\u53cd\u5411\u56fe\u9632\u6b62\u8dd1\u5230\u5230\u4e0d\u4e86n\u7684\u70b9\u6d6a\u8d39\u65f6\u95f4\n\n**\u4f46\u662f\u5982\u679c\u5efa\u53cd\u5411\u56fe\u7684\u8bdd\u5c82\u4e0d\u662f\u4f1a\u8dd1\u5230\u5230\u4e0d\u4e861\u7684\u70b9\u6d6a\u8d39\u65f6\u95f4\uff1f\uff1f\uff1f**\n\n\u6211\u89c9\u5f97\u5efa\u7acb\u53cd\u5411\u56fe\u662f\u4e3a\u4e86\u548c\u4ece1\u51fa\u53d1\u7684\u6700\u77ed\u8def\u6784\u6210\u4e00\u6761\u4ece1\u5230n\u7684\u8def\u5f84\n\n\u5176\u5b9e\u6b63\u5411\u56fe\u8dd1dp\uff0c\u7136\u540e\u6700\u77ed\u8def\u662f\u4ecen\u5f00\u59cb\u51fa\u53d1\uff0c\u4e5f\u4e00\u6837\u3002\n\n\uff085\uff09\u4e3b\u51fd\u6570dfs\u53ea\u7528\u5199\u4e00\u6b21\u5c31\u597d\u4e86\uff0c\u4e00\u6b21\u5c31\u80fd\u628a\u6240\u6709\u7684\u503c\u7b97\u51fa\u6765\uff0c\u770b\u5230\u5f88\u591a\u4ee3\u7801\u662f\u679a\u4e3ek\u7684\uff0c\u6ca1\u5fc5\u8981\n\n\u8d34\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\n\n\n```\n#include<bits/stdc++.h>\n#define REP(i, a, b) for(register int i = (a); i < (b); i++)\n#define _for(i, a, b) for(register int i = (a); i <= (b); i++)\nusing namespace std;\n\nconst int MAXN = 1e5 + 10;\nint d[MAXN], n, p, m, k;\nint dp[MAXN][60], vis[MAXN][60];\n\nstruct graph\n{\n\tstruct Edge { int to, w, next; };\n\tEdge e[MAXN << 1];\n\tint head[MAXN], tot;\n\t\n\tinline void init() { memset(head, -1, sizeof(head)); tot = 0; }\n\t\n\tinline void AddEdge(int from, int to, int w)\n\t{\n    \te[tot] = Edge{to, w, head[from]};\n    \thead[from] = tot++;\n\t}\n}G[2];\n\nvoid read(int& x)\n{\n    int f = 1; x = 0; char ch = getchar();\n    while(!isdigit(ch)) { if(ch == '-') f = -1; ch = getchar(); }\n    while(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n    x *= f;\n}\n\nstruct node\n{\n    int id, w;\n    bool operator < (const node& rhs) const\n    {\n        return w > rhs.w;\n    }\n};\n\nvoid dijkstra()\n{\n    priority_queue<node> q;\n    q.push(node{1, 0});\n    _for(i, 1, n) d[i] = i == 1 ? 0 : 1e9;\n    \n    while(!q.empty())\n    {\n        node x = q.top(); q.pop();\n        if(x.w != d[x.id]) continue;\n        int u = x.id;\n        \n        for(int i = G[0].head[u]; ~i; i = G[0].e[i].next)\n        {\n            int v = G[0].e[i].to, w = G[0].e[i].w;\n            if(d[v] > d[u] + w)\n            {\n                d[v] = d[u] + w;\n                q.push(node{v, d[v]});\n            }\n        }\n    }\n}\n\nint dfs(int u, int k)\n{\n    if(vis[u][k]) return -1;\n    if(dp[u][k] != -1) return dp[u][k];\n    vis[u][k] = 1;\n    \n    int sum = 0;\n    for(int i = G[1].head[u]; ~i; i = G[1].e[i].next)\n    {\n        int v = G[1].e[i].to, w = G[1].e[i].w, kk, t;\n        kk = k - (d[v] + w - d[u]);\n        if(kk < 0) continue;\n        if((t = dfs(v, kk)) == -1) return -1;\n        sum = (sum + t) % p;\n    }\n    if(u == 1) sum++;\n    \n    vis[u][k] = 0;\n    return dp[u][k] = sum % p;\n}\n\nint main()\n{\n    int T; read(T);\n    while(T--)\n    {\n        G[0].init(); G[1].init();\n        memset(dp, -1, sizeof(dp));\n        memset(vis, 0, sizeof(vis));\n        \n        read(n); read(m); read(k); read(p);\n        _for(i, 1, m)\n        {\n            int u, v, w; read(u); read(v), read(w);\n            G[0].AddEdge(u, v, w);\n            G[1].AddEdge(v, u, w);\n        }\n        \n        dijkstra();\n        printf(\"%d\\n\", dfs(n, k));\n    }\n    \n    return 0;\n}\n```\n",
        "postTime": 1540988356,
        "uid": 48424,
        "name": "Alex_Su",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u60f3\u6cd5,\u5148\u8dd1\u53cd\u5411\u6700\u77ed\u8def\u6765\u4e3a\u4e4b\u540e\u7684\u641c\u7d22\u8fdb\u884c\u4f30\u4ef7,\u7136\u540e\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u82e5\u8d70\u8fc7\u5f53\u524d\u70b9\u4e14\u7ecf\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u4e0d\u53d8\u8fd4\u56de-1,\u8bb0\u5fc6\u5316\u7684\u5bf9\u8c61\u662f\u8d70\u5230\u7b2ci\u4e2a\u70b9\u73b0\u5728\u4e0e\u6700\u77ed\u8def\u504f\u5dee\u503c\u4e3ak\u7684\u65b9\u6848\u6570\u3002\n\n\u8981\u6ce8\u610f\u7684\uff1a\u4f3c\u4e4e\u53ef\u4ee5\u5728\u7ec8\u70b9\u53cd\u590d\u6a2a\u8df3\u5237\u65b9\u6848\u6570,\u6240\u4ee5\u9047\u5230\u7ec8\u70b9\u4e0d\u80fd\u9a6c\u4e0a\u8fd4\u56de,\n\u8fd9\u4e2a\u5199\u6cd5\u5e94\u8be5\u662f\u6700\u76f4\u63a5\u66b4\u529b\u7684\uff1f\u4f46\u662f\u641c\u7d22\u6ca1\u6709\u65f6\u95f4\u590d\u6742\u5ea6\u4fdd\u8bc1\u4e14\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9898\u8fd9\u6837\u8bb0\u5fc6\u5316\u5e26\u6765\u7684\u4f18\u5316\u6548\u679c\u4e5f\u662f\u6709\u9650,\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u80fd\u8dd1\u90a3\u4e48\u5feb.... \u7136\u540e\u5c31\u662f\u6ce8\u610f\u521d\u59cb\u5316,\u6570\u7ec4\u6bd4\u8f83\u591a\u8981\u6ce8\u610f.\n\n\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u7528\u7684\u662fdj\u8dd1\u6700\u77ed\u8def \u7ebf\u6bb5\u6811\u4f18\u5316 \u4ee3\u7801\u6709\u538b\u884c\u4f53\u9a8c\u5e94\u8be5\u4e0d\u592a\u597d \u641c\u7d22\u65b9\u6cd5\u5728\u51fd\u6570\u6ce8\u91ca\u5185\u7ed9\u51fa\n```cpp\n#include<bits/stdc++.h>\n#define inf 252645135\n#define rint register int\n#define left l,mid,ls[pos]\n#define righ mid+1,r,rs[pos]\n#define use 1,n,rt\n#define N 500000\nusing namespace std;\nint ls[N],rs[N],mi[N],cnt,rt,rnxt[N],rlas[N],rto[N],num,d,pis;\nint n,m,tol,mod,nxt[N],las[N],to[N],val[N],dis[N],res[N],rd[N][60];\ninline int minn(int pos,int ans){if(pos>ans)return ans;else return pos;}\nvoid read(int &x){\n\tchar ch=getchar();x=0;\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+(ch^48),ch=getchar();\n}\nvoid sak_tr(int l,int r,int &pos){\n\tif(!pos)pos=++cnt;if(l==r){mi[pos]=num;return;}\n\tint mid=l+r>>1;if(mid>=d)sak_tr(left);else sak_tr(righ);\n\tmi[pos]=minn(mi[ls[pos]],mi[rs[pos]]);\n}\nvoid sak_qu(int l,int r,int pos){\n\tif(l==r){pis=d=l;return;}int mid=l+r>>1;\n\tif(mi[ls[pos]]==mi[pos])sak_qu(left);else sak_qu(righ);\n}\nint sak_dfs(int pos,int cnt){\nif(cnt+dis[pos]-dis[1]>tol)return 0;//\u5982\u679c\u504f\u79fb\u91cf\u5927\u4e8e\u5bbd\u5bb9\u503c\u4e0d\u53d6\nif(res[pos]==cnt)return -1;//\u5982\u679c\u8fd9\u4e2a\u70b9\u8d70\u8fc7\u5e76\u4e14\u8def\u5f84\u957f\u5ea6\u4e0d\u53d8\u67090\u73af\nint &a=rd[pos][cnt+dis[pos]-dis[1]];//\u6253\u8fd9\u4e2a\u5b9e\u5728\u592a\u7d2f\nif(a!=-1)return a;a=0;//\u5982\u679c\u66fe\u7ecf\u8d70\u8fc7\u76f4\u63a5\u8c03\u7528\u8bb0\u5fc6\u5316\u8fd4\u56de\u5426\u5219\u7f6e\u4e3a0\u5f00\u59cb\u8bb0\u5fc6\u5316\n\tfor(int i=las[pos],v;i;i=nxt[i]){\n\t\tres[pos]=cnt,v=sak_dfs(to[i],cnt+val[i]),res[pos]=-1;//\u56de\u6765\u4e4b\u540e\u6807\u8bb0\u4e3a\u6ca1\u8d70\u8fc7\n\t\tif(v==-1)return a=-1;a+=v;if(a>mod)a-=a/mod*mod;//\u8fd9\u91ccv\u8868\u793a\u8def\u5f84\u662f\u5426\u5408\u6cd5\n\t}if(pos==n)a++;return a;\n}\nint main(){\n\tint t;cin>>t;while(t--){\n\t\tcin>>n>>m>>tol>>mod;register int x;rt=cnt=num=0,d=n;\n\t\tfor(rint i=1;i<=m;i++)read(x),read(to[i]),read(val[i]),rto[i]=x,\n\t\t nxt[i]=las[x],las[x]=i,rnxt[i]=rlas[to[i]],rlas[to[i]]=i;\n\t\tmemset(mi,15,n*2*4+4),memset(dis,15,n*4+4),dis[n]=0,sak_tr(use);\n\t\tmemset(res,-1,n*4+4);for(int i=1;i<=n;i++)for(int k=0;k<=tol;k++)rd[i][k]=-1;\n\t\t\n\t\twhile(mi[rt]!=inf){\n\t\t\tnum=inf,sak_qu(use),sak_tr(use);\n\t\t\tfor(rint i=rlas[pis];i;i=rnxt[i]){\n\t\t\t\tnum=dis[pis]+val[i];d=rto[i];\n\t\t\t\tif(num<dis[d])dis[d]=num,sak_tr(use);\n\t\t\t}\n\t\t}\n\t\tsak_dfs(1,0);cout<<rd[1][0]<<\"\\n\";\n\t if(t){for(rint i=1;i<=m;i++)rlas[i]=rnxt[i]=las[i]=nxt[i]=0;memset(ls,0,cnt*4+4);memset(rs,0,cnt*4+4);} \n\t}\n}\n```",
        "postTime": 1540513182,
        "uid": 59907,
        "name": "Sakura_\u68a6\u7476",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "###  \u3000\u3000\u5728WA\u4e86\u63a5\u8fd120\u904d\u540e\uff0c\u672c\u849f\u84bb\u7ec8\u4e8e\u5207\u6389\u4e86\u901b\u516c\u56ed\u3002\u3002\n \u3000\u3000\u901b\u516c\u56ed\u7684\u9898\u610f\u4e3a\u6c42\u51fa\u56fe\u4e2d\u4ece1\u5230n\u8def\u5f84\u957f\u5ea6<=d\uff08\u6700\u77ed\u8def\uff09+k \u7684\n   \n   \u8def\u5f84\u6761\u6570\u3002\n   \n   \u3000\u3000\u8fd9\u9053\u9898\u5341\u5206\u7684\u50cfluogu 1608 \u8def\u5f84\u7edf\u8ba1\uff0c\u867d\u7136\u7b97\u6cd5\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\n   \n   \u4f46\u601d\u60f3\u5374\u5341\u5206\u76f8\u4f3c\u3002\u7531\u4e8ek\u5341\u5206\u7684\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3ek\uff0c\u8bbe\n   \n   f[i][j] \u4e3a\u4ece 1 \u5230 i \u6bd4\u6700\u77ed\u8def\u5927j\u7684\u8def\u5f84\u7684\u6761\u6570\u3002\u5219\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\n   \n \uff08f[n][0]+f[n][1]+...+f[n][k]\uff09 \u5982\u4f55\u6c42\u51fa\u53d1f[i][j]\u5462\uff1f\u53ef\u4ee5\u4ece\u51fa\u53d1\u70b9\u5f00\u59cbdp\uff0c\n \n \u4f46dp\u7684\u72b6\u6001\u4f3c\u4e4e\u5341\u5206\u96be\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7ec8\u70b9\u5f00\u59cb\u5012\n \n \u7740\u8fdb\u884c\u8bb0\u5fc6\u5316\u8fd9\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u6bcf\u6b21\u8981\u6269\u5c55\u7684\u72b6\u6001\u7279\u522b\n \n \u5bb9\u6613\u8868\u793a\u3002\u6211\u4eec\u53ef\u4ee5\u7528spfa \u8fdb\u884c\u9884\u5904\u7406\uff0c\u7528w[i]\u8868\n \n \u793a\u4ece1\u5230i\u7684\u6700\u77ed\u8def\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u5f0f\u5b50\uff1a\n \n w[u]-(w[v]+e[u].val)+j (\u4ee5\u4e0bu\uff0cv\u90fd\u662f\u53cd\u5411\u5efa\u56fe\u540e\u7684\uff1au\u4ee3\u8868\u8d77\u70b9\uff0cv\u4ee3\u8868\u7ec8\u70b9\uff0ce[u].val\u4ee3\u8868\u8fb9\u6743\uff09\u8fd9\u53e5\u8bdd\u7684\n \n \u542b\u4e49\u4e3a\uff1a (w[v]+e[u].val)-w[u]\u4ee3\u8868\u4e86\u5982\u679c\u9009\u62e9\u7531u\u8f6c\u79fb\n \n \u81f3v\u8d85\u8fc7\u4e86 u--v \u4e4b\u95f4\u6700\u77ed\u8def\u7684\u503c\uff0c\u5219:\n \n f[e[i].to][j-w[u]-(w[v]+e[u].val)]\u5c31\u662fu\u8f6c\u79fb\u5230v\u540e\u7b26\u5408\u8981\n \n \u6c42\u7684\u8def\u5f84\u7684\u6761\u6570 \uff08\u76f8\u5f53\u4e8e\u4eceu\u8f6c\u79fb\u5230v\u6d88\u8017\u4e86\u591a\u5c11k\uff09\n \n \u5982\u679c j-w[u]-(w[v]+e[u].val) \u4e3a\u8d1f\u6570\uff0c\u5c31\u8bc1\u660e\u5f53\u524d\u60c5\u51b5\u4e0b\n \n u\u65e0\u6cd5\u8f6c\u79fb\u5230v\u3002\u6392\u9664\u8fd9\u79cd\u60c5\u51b5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9012\u5f52\u6c42f[u][j]\u4e86\uff0cf[u][j]=sigma f[e[i].to][j-w[u]-(w[v]+e[u].val)];\n \n #### \u8fd9\u79cd\u5199\u6cd5\u4ecd\u7136\u4f1aRE\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u4e0b\u72b6\u6001\uff0c\u5f53\u91cd\u590d\u641c\u5230\n \n #### \u8be5\u72b6\u6001\u65f6\uff0c\u76f4\u63a5return\u5c31\u53ef\u4ee5\u4e86\u3002\n \n # \u9644\u4e0a\u4ee3\u7801\uff1a\n \n ```cpp\n #include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<stack>\nusing namespace std;\nstack<int>st;\nvector<int> pic[100001];\nconst int maxn=100001;\nstruct hzw{\n\tint to;\n\tint next;\n\tint v;\n}e[200001];\nint cur,head[200001],w[maxn];\nbool pan[maxn],ss[maxn];\nint dfn[maxn],low[maxn],num[maxn];\nint dfn2[maxn],low2[maxn],ss2[maxn];\nbool v[100001];\nint add(int a,int b,int c){\n\te[cur].to=b;\n\te[cur].next=head[a];\n\te[cur].v=c;\n\thead[a]=cur++;\n}\nint head2[maxn*2],cur2;\nstruct ak{\n\tint to2;\n\tint next2;\n\tint v2;\n}e2[maxn*2];\nint add2(int a,int b,int c){\n\te2[cur2].to2=b;\n\te2[cur2].next2=head2[a];\n\te2[cur2].v2=c;\n\thead2[a]=cur2++;\n}\nint n,m,k,p,d;\nbool end;\nvoid spfa(int s){\n\tbool vis[100001];\n\tmemset (vis,0,sizeof (vis));\n\tmemset (w,0x3f,sizeof (w));\n\tqueue<int>q;\n\tq.push(s);\n\tw[s]=0;\n\tvis[s]=true;\n\twhile (!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=false;\n\t\tfor (int i=head[u];i!=-1;i=e[i].next){\n\t\t\tint a=e[i].to;\n\t\t\tint b=e[i].v;\n\t\t\tif (w[a]>w[u]+b){\n\t\t\t\tw[a]=w[u]+b;\n\t\t\t\tif (!(vis[a])){\n\t\t\t\t\tq.push(a);\n\t\t\t\t\tvis[a]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid tarjan(int s) {//\u672c\u4eba\u8822\u7b28\uff0c\u7528tarjan\u5224\u65ad\u76840\u73af\u3002\n//\u5176\u5b9e\u5f00\u4e00\u4e2a\u6570\u7ec4\u5728dfs\u4e2d\u8bb0\u5f55\u72b6\u6001\u7684\u8bbf\u95ee\u60c5\u51b5\uff0c\n//\u5982\u679c\u5728\u4e00\u6b21dfs\u4e2d\u4e00\u79cd\u72b6\u6001\u88ab\u518d\u6b21\u8bbf\u95ee\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad0\u73af\u4e86\u3002\n\tdfn[s]=++cur;\n\tlow[s]=cur;\n\tst.push(s);\n\tss[s]=1;\n\tint tm=pic[s].size();\n\tfor (int i=0; i<tm; ++i) {\n\t\tint a=pic[s][i]; \n\t    if (!dfn[a]){\n\t    \ttarjan(a);\n\t    \tlow[s]=min(low[s],low[a]);\n\t\t}\n\t\telse if (ss[a]){\n\t\t\tlow[s]=min(low[s],dfn[a]);\n\t\t}\n\t}\n\tif (dfn[s]==low[s]) {\n\t\tint check=0;\n        int tmp=st.top();\n\t\twhile (tmp!=s) {\n\t\t\tcheck=true;\n\t\t\tss[tmp]=0;\n\t\t\tif (w[tmp]<=d+k) end=true;\n\t\t\tst.pop();\n\t\t\ttmp=st.top();\n\t\t}\n\t    if (check){\n\t       tmp=st.top();\n\t       if (w[tmp]<=d+k) end=true;\n\t\t   ss[tmp]=0;\n\t\t   st.pop();\n\t\t}\n\t\telse{\n\t\t   tmp=st.top();\n\t\t   ss[tmp]=0;\n\t\t   st.pop();\n\t\t}\n\t}\n}\nlong long one;\nlong long f[maxn][55],vis[maxn][55]; \ninline long long  dfs(int u,int kk){ \n      if (vis[u][kk]) return f[u][kk];\n\t  vis[u][kk]=true; \t     \n      for (int i=head2[u];i!=-1;i=e2[i].next2) {\n\t    long long sum=( w[u]-(w[e2[i].to2]+e2[i].v2) )+kk;\n\t    if (sum<0) continue;\n\t    f[u][kk]=(f[u][kk]+dfs(e2[i].to2,sum))%p;  \n       // \u9012\u5f52\u6c42\u51fa\u5408\u6cd5\u7684\u8def\u5f84\u6761\u6570\n\t }\n\t return f[u][kk];\n}\nint main(){\n//\tfreopen (\"park9.in\",\"r\",stdin);\n//\tfreopen (\"park.out\",\"w\",stdout);\n\tint t;\n\tcin>>t;\n\tfor (int sss=1;sss<=t;++sss){\t\n\t    memset (head,-1,sizeof (head));\n\t    memset(head2,-1,sizeof(head2));\n\t    memset(low,0,sizeof(low));\n\t    memset(dfn,0,sizeof(dfn));\n\t    memset(pic,0,sizeof(pic));\n\t    memset(f,0,sizeof(f));\n\t    memset(vis,0,sizeof(vis));\n\t    one=0;\n\t    end=0;\n\t    cur=0;\n\t    cur2=0;\n\t    memset (w,0,sizeof (w));\n\t    cur=0;\n\t    cin>>n>>m>>k>>p;\n\t    int cnt=0;\n\t    for (int i=1;i<=m;++i){\n\t    \tint xx,yy,zz;\n\t\t    scanf(\"%d%d%d\",&xx,&yy,&zz);\n\t\t    if (zz==0) {\n\t\t\t   pic[xx].push_back(yy);\n\t\t\t   num[++cnt]=xx;\n\t\t\t}\n\t\t    add(xx,yy,zz);\n\t\t    add2(yy,xx,zz);\n\t    }\n\t\tspfa (1);\n\t\tfor (int i=1;i<=cnt;++i){\n\t\t\tcur=0;\n\t\t\tif (!dfn[num[i]]) tarjan(num[i]);\n\t\t}\n\t\tif (end){\n\t\t\tcout<<\"-1\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tlong long ans=0;\n\t\t\tf[1][0]=1;\n\t\t\tfor (int i=0;i<=k;++i) {\n            //\u679a\u4e3ek\n\t\t\t\tans+=dfs(n,i);\n\t\t\t\tans%=p;\n\t\t\t}\n\t\t\tcout<<ans<<endl;\n\t\t}\n\t}\n    return 0;\n}\n\n ```\n \n \n \n \n   \n   \n",
        "postTime": 1521711917,
        "uid": 54926,
        "name": "Apricot",
        "ccfLevel": 0,
        "title": "\u8def\u5f84\u4e2a\u6570\u7edf\u8ba1\u2014\u2014NOIP2017 \u901b\u516c\u56ed"
    },
    {
        "content": "\u6211\u662f\u4e00\u4e2a\u2026\u2026 \uff0cnoip\u8003\u573a\u4e0a\u679c\u65ad0\u5206\uff0c~~\u5173\u952e\u662f\u9898\u89e3\u90fd\u8981\u770b\u597d\u51e0\u7bc7\u624d\u505a\u7684\u51fa\u6765\u2026\u2026~~\n\n\u597d\u5427\uff0c\u56de\u5230\u672c\u9898\uff0c\u62ff\u5230\u9898\u9996\u5148\u80af\u5b9a\u60f3\u5230\n\n## \u9a97\u5206\uff0c\u5982\u4f55\u8f93\u51fa-1\n//~~\u7136\u800c\u8fd9\u9898\u591a\u7ec4\u6570\u636e\uff0c10\u5206\u90fd\u4e0d\u7ed9\u4f60~~\n\n\u8fd9\u9898\u6839\u636e\u9898\u610f\uff0c\u6709\u65e0\u9650\u591a\u79cd\u65b9\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u80af\u5b9a\u662f**\u57281\u5230n\u7684<=dist[n]+k\u7684\u8def\u5f84\u4e0a\uff0c\u6709\u8282\u70b9\u5b58\u5728\u4e8e0\u73af\u4e2d**    \n//dist[i]\u8868\u793a\u4ece1\u5230\u8282\u70b9i\u7684\u6700\u77ed\u8def\u5f84\n\n\u65e2\u7136\u5982\u6b64\uff0c\u90a3\u5c31\u627e0\u73af\u5427\uff0c\u628a\u6240\u67090\u8fb9\u5efa\u4e2a\u56fe\uff0c\u62d3\u6251\n\n\u62d3\u6251\u662f\u5565\uff0c~~\u4e0d\u4f1a\u6211\u5c31\u6ca1\u6cd5\u5b50\u4e86~~\uff0c\u53c2\u8003\u627e\u73af\u7684[P2661\u4fe1\u606f\u4f20\u9012](https://www.luogu.org/problemnew/show/P2661)\n\u81ea\u5df1\u770b\u9898\u89e3\n\n\u600e\u4e48\u5224\u65ad\u8be5\u70b9\u662f\u5426\u5b58\u5728\u4e8e<=dist[n]+k\u7684\u8def\u5f84\u4e0a\u5462\uff1f\n\n\u6b63\u53cd\u4e24\u904dspfa\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9 **_\u52301\u7684\u8ddd\u79bb+\u5230n\u7684\u8ddd\u79bb<=dist[n]+k_** \u65f6\uff0c\u5219\u8be5\u70b9\u5fc5\u5904\u4e8e\u8fd9\u6837\u7684\u8def\u5f84\u4e0a\uff0c\u5982\u679c\u8be5\u70b9\u4e5f\u5904\u4e8e\u4e00\u4e2a0\u73af\u4e2d\uff0c\u5219\u5fc5\u6709\u65e0\u9650\u79cd\u65b9\u6848\n\n//~~\u4e3a\u4ec0\u4e48\u5927\u5bb6\u559c\u6b22\u7528spfa\u800c\u4e0d\u7528Dijkstra\uff0c\u56e0\u4e3aspfa\u662fO(\u7384\u5b66)\u5417\uff1f~~\n\n## \u63a5\u4e0b\u6765\u662fdp\n\ndp[u][j]\u8868\u793a\u5230\u8282\u70b9u\u8d85\u8fc7\u6700\u77ed\u8def\u5f84\u957f\u5ea6j\uff0c\u5373\u957f\u5ea6\u4e3adist[u]+j\u7684\u8def\u5f84\u4e2a\u6570\n\n\u5f53\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u7684\u8def\u5f84\u6bd4\u5f53\u524d\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957fj\u65f6\uff0c\u6cbf\u5b83\u5230\u8fbe\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u81f3\u5c11\u6bd4\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5927j\n\ndp[u][j]=\u2211dp[v][dist[u]+j-w-dist[v]]\n\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728v\u5230u\u7684\u4e00\u6761\u8def\u5f84\uff0c\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u8ba1\u7b97\n\n\u9884\u5904\u7406dp[1][0]=1\u8f6c\u79fb\u5bf9\u4e0d\u4e0a\u7684\u7edf\u7edf\u4e3a0\n\n#### \u518d\u662f\u548c\u4e0a\u9762\u4e00\u6837\u4e0d\u7f8e\u89c2\u7684\u4ee3\u7801\n\n```cpp\n//\u4e24\u904dspfa\uff0c\u62d3\u6251\u627e0\u73af \uff0c\u52a0dp \n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 200005\nint T,n,m,k,pp;\nstruct DD \n{\nint from,to,val;\t\n} biao[MAXN<<1],biao2[MAXN<<1],biao3[MAXN<<1];int tailll,taill2,taill3;\nint first[MAXN],_next[MAXN<<1];\nint first2[MAXN],_next2[MAXN<<1];\nint first3[MAXN],_next3[MAXN<<1];\nint d[MAXN],d2[MAXN];bool inqueue[MAXN];\nbool biaoji[MAXN];int ru[MAXN];\nint myqueue[MAXN<<1];int head,tail;\ninline void add(int x,int y,int z)\n{\n\tbiao[tailll].from=x;biao[tailll].to=y;biao[tailll].val=z;\n\t_next[tailll]=first[x];first[x]=tailll;\n\ttailll++;\n\treturn;\n}\ninline void add2(int x,int y,int z)\n{\n\tbiao2[taill2].from=x;biao2[taill2].to=y;biao2[taill2].val=z;\n\t_next2[taill2]=first2[x];first2[x]=taill2;\n\ttaill2++;\n\treturn;\n}\ninline void add3(int x,int y,int z)\n{\n\tbiao3[taill3].from=x;biao3[taill3].to=y;biao3[taill3].val=z;\n\t_next3[taill3]=first3[x];first3[x]=taill3;\n\ttaill3++;\n\treturn;\n}\nvoid spfa()\n{\n\td[1]=0;head=tail=1;\n\tmyqueue[tail++]=1;\n\tinqueue[1]=1;\n\twhile(head<tail)\n\t{\n\t\tint p=myqueue[head++];\n\t\tfor(int i=first[p];i!=0;i=_next[i])\n\t\t{\n\t\t\tif(d[p]+biao[i].val<d[biao[i].to])\n\t\t\t{\n\t\t\t\td[biao[i].to]=d[p]+biao[i].val;\n\t\t\t\tif(!inqueue[biao[i].to])\n\t\t\t\t{\n\t\t\t\t\tinqueue[biao[i].to]=0;\n\t\t\t\t\tmyqueue[tail++]=biao[i].to;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinqueue[p]=0;\n\t}\n}\nvoid spfa2()\n{\n\td2[n]=0;head=tail=1;\n\tmyqueue[tail++]=n;\n\tinqueue[n]=1;\n\twhile(head<tail)\n\t{\n\t\tint p=myqueue[head++];\n\t\tfor(int i=first2[p];i!=0;i=_next2[i])\n\t\t{\n\t\t\tif(d2[p]+biao2[i].val<d2[biao2[i].to])\n\t\t\t{\n\t\t\t\td2[biao2[i].to]=d2[p]+biao2[i].val;\n\t\t\t\tif(!inqueue[biao2[i].to])\n\t\t\t\t{\n\t\t\t\t\tinqueue[biao2[i].to]=0;\n\t\t\t\t\tmyqueue[tail++]=biao2[i].to;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinqueue[p]=0;\n\t}\n}\ninline void tuopu(int x)\n{\n\tbiaoji[x]=0;\n\tfor(int i=first3[x];i!=0;i=_next3[i])\n\t{\n\t\tru[biao3[i].to]--;if(ru[biao3[i].to]==0)tuopu(biao3[i].to);\n\t}\n}\nint dp[MAXN][55];\ninline int dfs(int u, int j)\n{\n\tif (dp[u][j] != -1)return dp[u][j];\n\tdp[u][j] = 0;\n\tfor (int i = first2[u]; i != 0; i = _next2[i])\n\t{\n\t\tif (d[u] + j - biao2[i].val - d[biao2[i].to]< 0)continue;\n\t\tdp[u][j] = (dp[u][j] + dfs(biao2[i].to, d[u] + j - biao2[i].val - d[biao2[i].to])) % pp;\n\t}\n\treturn dp[u][j];\n}\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%d%d%d%d\",&n,&m,&k,&pp);\n\t\tmemset(first,0,sizeof(first));\n\t\tmemset(first2,0,sizeof(first2));\n\t\tmemset(first3,0,sizeof(first3));\n\t\tmemset(d,0x3f,sizeof(d));\n\t\tmemset(d2,0x3f,sizeof(d2));\n\t\tmemset(biaoji,0,sizeof(biaoji));\n\t\tmemset(ru,0,sizeof(ru));\n\t\ttaill3=taill2=tailll=1;\n\t\tint a,b,c;\n\t\tfor(register int i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tadd(a,b,c);add2(b,a,c);\n\t\t\tif(c==0){add3(a,b,c);biaoji[a]=1;biaoji[b]=1;ru[b]++;} \n\t\t}\n\t\tfor(register int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(ru[i]==0&&biaoji[i])tuopu(i);\n\t\t}\n\t\tspfa();\n\t\tspfa2();\n\t\tbool ok=false;\n\t\tfor(register int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(d[i]+d2[i]<=d[n]+k&&biaoji[i])\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",-1);\n\t\t\t\tok=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ok)continue;\n\t\tmemset(dp,-1,sizeof(dp));\n\t\tdp[1][0]=1;int ans=0;\n\t\tfor(register int i=0;i<=k;i++)\n\t\tans=(dfs(n,i)+ans)%pp;//\u8bb0\u5fc6\u5316\u641c\u7d22 \n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1520078931,
        "uid": 47032,
        "name": "hu1029282594",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "yet another NOIP2017(\n\n\u4e00\u5e74\u534a\u4ee5\u524d\u5199\u7684\u505a\u6cd5\u88ab\u53c9\u6389\u4e86/ll\n\n>### [\u6d1b\u8c37\u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3953)\n\n>\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe$G=(V,E),|V|=n,|E|=m$\uff0c\u4e0d\u5305\u542b\u91cd\u8fb9\u4e0e\u81ea\u73af\u3002\u6c42$1\\to n$\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7\u6700\u77ed\u8def\u52a0\u4e0a$s$\u7684\u8def\u5f84\u4e2a\u6570\uff0c\u5bf9\u7ed9\u5b9a\u6a21\u6570\u53d6\u6a21\u3002\u82e5\u6709\u65e0\u9650\u6761\uff0c\u8f93\u51fa$-1$\u3002\u672c\u9898\u591a\u6d4b\u3002\n\n>$n\\in\\left[1,10^5\\right],m\\in\\left[1,2\\times10^5\\right],s\\in[1,50]$\u3002\u8fb9\u6743\u975e\u8d1f\u3002\u6d4b\u8bd5\u7ec4\u6570\u4e0d\u8d85\u8fc7$5$\u3002\n\n\u5148\u4e0d\u8003\u8651\u6709\u8fb9\u4e3a$0$\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u4e0d\u662f\u5f88\u96be\u7684DP\u3002\n\n\u5148Dijkstra\u7b97\u51fa$1\\to i$\u7684\u6700\u77ed\u8def\u5f84$dis_i$\u3002\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u5f88\u597d\u7684\u7ed3\u8bba\uff1a\u5728\u957f\u5ea6\u4e0d\u8d85\u8fc7$dis_n+s$\u7684\u4efb\u610f\u4e00\u6761$1\\to n$\u8def\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u70b9$x$\u5904\uff0c\u90fd\u6ee1\u8db3$1\\to x$\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7$dis_x+s$\u3002\u56e0\u4e3a\u5982\u679c\u8d85\u8fc7\u4e86\uff0c\u5373\u4f7f$x\\to n$\u53d6\u6700\u77ed\u8def\u4e5f\u4e0d\u53ef\u80fd\u6551\u5f97\u56de\u6765\u3002\n\n\u6570\u636e\u8303\u56f4\u63d0\u793a\u6211\u4eecstd\u5927\u6982\u662f$\\mathrm O(ns)$\uff08\u8ba4\u4e3a$n,m$\u540c\u9636\uff09\u7684\uff0c\u5219\u8003\u8651\u8bbe$dp_{i,j}(j\\in[0,s])$\u8868\u793a\u957f\u5ea6\u4e3a$dis_i+j$\u7684$1\\to i$\u8def\u5f84\u4e2a\u6570\u3002\u8fb9\u754c\uff1a$dp_{1,0}=1$\uff0c\u76ee\u6807\uff1a$\\sum\\limits_{i=0}^sdp_{n,i}$\uff0c\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$dp_{i,j}=\\sum_{(k,j,len)\\in E}[dis_i+j-len\\in[dis_k,dis_k+s]]dp_{k,dis_i+j-len-dis_k}$$\n\n\u81f3\u4e8eDP\u987a\u5e8f\uff1f\u53cd\u6b63\u65e0\u540e\u6548\u6027\u5c31\u662f\u4e86\uff0c\u4f60\u95f2\u7740\u65e0\u804a\u53ef\u4ee5\u628a\u6240\u6709\u72b6\u6001\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\uff0c\u6211\u7528\u6211\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\uff08\n\n\u518d\u8003\u8651\u6709\u8fb9\u4e3a$0$\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u6211\u4eec\u8981\u8003\u8651\u5224\u65e0\u9650\u6761\u3002\u4e00\u5e74\u534a\u4ee5\u524d\u7684naive\u60f3\u6cd5\u662f\uff1a\u6709\u65e0\u9650\u6761\u5f53\u4e14\u4ec5\u5f53\u6709$0$\u73af\u3002\u7136\u540e\u5c45\u7136AC\u4e86\uff1f\u8fd9\u91cc\u5410\u69fd\u4e00\u4e0bNOIP\u7684\u6570\u636e\u8d28\u91cf\u3002\u76f4\u5230\u73b0\u5728\u2014\u2014\u6709\u540f\u591c\u53c9\u4eba\u3002\u53cd\u4f8b\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a$0$\u73af\u4f7f\u5f97\u6ca1\u6709\u5408\u6cd5\u8def\u5f84\u7ecf\u8fc7\u8fd9\u4e2a\u73af\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u89e3\u51b3\u65b9\u6848\u4e5f\u4e0d\u96be\u3002\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u73af\u4e0a\u7684\u8282\u70b9\uff0c\u90fd\u770b\u662f\u5426\u6709\u5408\u6cd5\u8def\u5f84\u7ecf\u8fc7\u5b83\u5373\u53ef\u3002\u5982\u4f55\u7b97\u662f\u5426\u6709\u5408\u6cd5\u8def\u5f84\u7ecf\u8fc7\u5b83\uff1f\u53ea\u9700\u8981\u770b\u7ecf\u8fc7\u5b83\u7684\u6700\u77ed$1\\to n$\u8def\u5f84\u957f\u5ea6\u662f\u5426\u4e0d\u8d85\u8fc7$dis_n+s$\u3002\u5982\u4f55\u7b97\u7ecf\u8fc7\u5b83\u7684\u6700\u77ed$1\\to n$\u8def\u5f84\u957f\u5ea6\uff1f\u53ea\u9700\u8981\u7ed3\u5408\u4e4b\u524dDijkstra\u6c42\u51fa\u6765\u7684$dis$\u6570\u7ec4\uff0c\u518dDijkstra\u7b97\u51fa\u4ece$n$\u51fa\u53d1\u7ecf\u8fc7\u53cd\u5411\u8fb9\u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u3002\u5982\u4f55\u7b97\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u5728\u73af\u4e0a\uff1fTarjan\u6c42SCC\u5373\u53ef\uff0c\u6240\u5728\u73af\u5927\u5c0f\u8d85\u8fc7$1$\u5c31\u5728\u73af\u4e0a\uff08\u56e0\u4e3a\u65e0\u81ea\u73af\uff09\uff0cDFS\u548c\u62d3\u6251\u6392\u5e8f\u90fd\u4e0d\u518d\u9002\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u80fd\u5224\u662f\u5426\u6709\u73af\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathrm O\\!\\left(\\sum(n\\log n+ns )\\right)$\u3002\u5e38\u6570\u5f88\u5927\uff0c\u4f46\u5c45\u7136\u5230\u4e86$2\\mathrm s$\uff1f\u8fd9\u662f\u6211\u6240\u6ca1\u60f3\u5230\u7684\uff08\u679c\u7136\u4eba\u50bb\u5e38\u6570\u5927\uff09\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define X first\n#define Y second\n#define pb push_back\nconst int N=100000,S=50;\nint n,m,s,mod;\nvector<pair<int,int> > nei[N+1],rnei[N+1];\nbool vis[N+1];\nint dis[N+1],dis0[N+1];\nvoid dijkstra(){//\u6b63\u56fe\u6700\u77ed\u8def \n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tmemset(dis,0x3f,sizeof(dis));memset(vis,0,sizeof(vis));\n\tq.push(mp(dis[1]=0,1));\n\twhile(q.size()){\n\t\tint x=q.top().Y;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=true;\n\t\tfor(int i=0;i<nei[x].size();i++){\n\t\t\tint y=nei[x][i].X,len=nei[x][i].Y;\n\t\t\tif(dis[x]+len<dis[y])q.push(mp(dis[y]=dis[x]+len,y));\n\t\t}\n\t}\n//\tcout<<\"dis=\";for(int i=1;i<=n;i++)cout<<dis[i]<<\" \";puts(\"\");\n}\nvoid dijkstra0(){//\u53cd\u56fe\u6700\u77ed\u8def \n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tmemset(dis0,0x3f,sizeof(dis0));memset(vis,0,sizeof(vis));\n\tq.push(mp(dis0[n]=0,n));\n\twhile(q.size()){\n\t\tint x=q.top().Y;\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=true;\n\t\tfor(int i=0;i<rnei[x].size();i++){\n\t\t\tint y=rnei[x][i].X,len=rnei[x][i].Y;\n\t\t\tif(dis0[x]+len<dis0[y])q.push(mp(dis0[y]=dis0[x]+len,y));\n\t\t}\n\t}\n}\nint dfn[N+1],low[N+1],nowdfn;\nint stk[N],top;\nbool ins[N+1];\nvector<vector<int> > scc;\nvoid dfs_tar(int x){\n\tdfn[x]=low[x]=++nowdfn;\n\tins[stk[top++]=x]=true;\n\tfor(int i=0;i<nei[x].size();i++){\n\t\tint y=nei[x][i].X,len=nei[x][i].Y;\n\t\tif(len)continue;\n\t\tif(!dfn[y])dfs_tar(y),low[x]=min(low[x],low[y]);\n\t\telse if(ins[y])low[x]=min(low[x],dfn[y]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\tscc.pb(vector<int>());\n\t\twhile(true){\n\t\t\tint y=stk[--top];\n\t\t\tins[y]=false;\n\t\t\tscc.back().pb(y);\n\t\t\tif(y==x)break;\n\t\t}\n\t}\n}\nint dp[N+1][S+1];\nint dfs(int x,int y){//\u8bb0\u5fc6\u5316\u641c\u7d22 \n\tif(x==1&&y==0)return 1;//\u8fb9\u754c \n\tint &res=dp[x][y];\n\tif(~res)return res;\n\tres=0;\n\tfor(int i=0;i<rnei[x].size();i++){\n\t\tint z=rnei[x][i].X,len=rnei[x][i].Y;\n\t\tif(dis[z]<=dis[x]+y-len&&dis[x]+y-len<=dis[z]+s)(res+=dfs(z,dis[x]+y-len-dis[z]))%=mod;//\u8f6c\u79fb \n\t}\n//\tprintf(\"dp[%d][%d]=%d\\n\",x,y,res);\n\treturn res;\n}\nvoid mian(){\n\tcin>>n>>m>>s>>mod;\n\tfor(int i=1;i<=n;i++)nei[i].clear(),rnei[i].clear();\n\twhile(m--){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tnei[x].pb(mp(y,z));rnei[y].pb(mp(x,z));\n\t}\n\tdijkstra();dijkstra0();\n\tmemset(dfn,0,sizeof(dfn));memset(low,0,sizeof(low));nowdfn=0;top=0;memset(ins,0,sizeof(ins));scc.clear();\n\tfor(int i=1;i<=n;i++)if(!dfn[i])dfs_tar(i);//Tarjan\u6c42SCC \n\tfor(int i=0;i<scc.size();i++){\n\t\tvector<int> &v=scc[i];\n\t\tif(v.size()==1)continue;\n\t\tfor(int j=0;j<v.size();j++)if(dis[v[j]]+dis0[v[j]]<=dis[n]+s)return puts(\"-1\"),void();//\u5224\u65e0\u9650 \n\t}\n\tmemset(dp,-1,sizeof(dp));\n\tint ans=0;\n\tfor(int i=0;i<=s;i++)(ans+=dfs(n,i))%=mod;//\u76ee\u6807 \n\tcout<<ans<<\"\\n\";\n}\nint main(){\n\tint testnum;\n\tcin>>testnum;\n\twhile(testnum--)mian();\n\treturn 0;\n}\n```",
        "postTime": 1596296431,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u6d1b\u8c37 P3953 - \u901b\u516c\u56ed"
    },
    {
        "content": "- \u8fd9\u9053\u9898\u5176\u4ed6\u7684\u90e8\u5206\u90fd\u88ab\u5927\u4f6c\u4eec\u8bb2\u5b8c\u4e86\u3002\u6211\u4f5c\u4e3a\u849f\u84bb\uff0c\u60f3\u6765\u8bb2\u4e00\u4e2a\u7ec6\u8282\u70b9\u3002\n- \u7528(u,v)\u8868\u793a\uff08u,v\uff09\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\n- \u4e3a\u4ec0\u4e48\u8868\u793a\u989d\u5916\u8def\u7a0b\u65f6\uff0c\u8981\u7528**dis\u6b63\u56fe[u]+(u,v)-dis\u6b63\u56fe[v]**\u3002\u800c\u4e0d\u662f\u7528**dis\u6b63\u56fe[u]+(u,v)+dis\u53cd\u56fe[v]-dis\u6b63/\u53cd\u56fe[n/1]\uff5b\u6700\u540e\u4e00\u9879\u5c31\u662f1\u5230n\u7684\u6700\u77ed\u8def\uff5d**\u3002\n- \u6211\u4eec\u8003\u8651**\u6700\u77ed\u8def\u6811**\u3002\n- \u8d70\u989d\u5916\u8def\u7a0b\uff0c\u76f8\u5f53\u4e8e\u5728\u6700\u77ed\u8def\u6811\u4e0a\u52a0\u8fb9\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e24\u70b9u,v\uff0c\u5982\u679c\u6709\u4e00\u6761\u8fb9\uff0cu->v\u3002\u90a3\u4e48\u6700\u540e\u8981\u6ee1\u8db3dis[v]<=dis[u]+(u,v)\u3002\u90a3\u4e48\u60c5\u51b5\u5c31\u5f88\u663e\u7136\u3002\u5982\u56fe\n![](https://cdn.luogu.com.cn/upload/image_hosting/lp718wdn.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n- \u4ee5\u4e0b\u5747\u5728\u6b63\u56fe\u4e2d\u8ba8\u8bba\u3002\n- dis[v]\u4e3a\u7eff\u7ebf\u3002dis[u]\u4e3a\u9ec4\u7ebf\uff0c\uff08u,v\uff09\u4e3a\u7ea2\u7ebf\u3002\uff08u,v\uff09\u7531\u4e8e\u4e0d\u591f\u6210\u6700\u77ed\u8def\u3002\u6240\u4ee5\u4e0d\u53ef\u80fd1->2->6\u6bd41->4->5->6\u66f4\u4f18\uff08\u53ef\u4ee5\u51fa\u73b0\u76f8\u7b49\u7684\u60c5\u51b5\uff09\u3002\u90a3\u4e48\u591a\u8d70\u7684\u8ddd\u79bb\uff08\u53ef\u4ee5\u4e3a0\uff09\u5c31\u662f\u7ea2\u7ebf+\u9ec4\u7ebf-\u7eff\u7ebf\u3002\u4e5f\u5c31\u662f**dis\u6b63\u56fe[u]+(u,v)-dis\u6b63\u56fe[v]**\u3002\n```\n#include<bits/stdc++.h>\n#define REP(i,a,b) for(register int i(a);i<=b;i++)\n#define PER(i,a,b) for(register int i(a);i>=b;i--)\n#define dbg(x) cerr<<#x<<\"=\"<<x<<endl\n#define RPG(i,u) for(register int i(head[u]);i;i=G[i].nxt)\n#define LOCAL\nusing namespace std;\nconst int N=1e5+100;\nconst int M=2e5+100;\nconst int INF=0x3f3f3f3f;\nconst int K=57;\nint T,n,m,k,p,x,y,w,ans,res,vis[N][K];\nint head[N],tot;\nint fir[N],cnt;\nstruct edge{int to,nxt,len;};\nstruct node{\n\tint u,d;\n\tbool operator <(const node a)const{return d>a.d;};\n};\nedge G[M],R[M];\nint dG[N],dR[N],f[N][K];\ntemplate<class T>inline void read(T &x){\n    T res=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){res=res*10+c-'0';c=getchar();}\n    x=f*res;\n}\ninline void DijkstraG(int s){\n\tpriority_queue<node>q;\n\tmemset(dG,0x3f,sizeof(dG));\n\tq.push((node){s,dG[s]=0});\n\twhile(q.size()){\n\t\tint u=q.top().u,d=q.top().d;q.pop();\n\t\tif(dG[u]!=d)continue;\n\t\tfor(register int i=head[u];i;i=G[i].nxt){\n\t\t\tint v=G[i].to;\n\t\t\tif(dG[v]>dG[u]+G[i].len)q.push((node){v,dG[v]=dG[u]+G[i].len});\n\t\t}\n\t}\n}//\u524d\u9762\u8fd9\u4e00\u90e8\u5206\u662f\u9884\u5904\u7406\u548c\u5806\u4f18\u5316dijkstra\uff0c\u5176\u4e2d\u5e26G\u7684\u8868\u793a\u6b63\u56fe\uff08Graph\uff09\n//\u5e26R\u7684\u8868\u793a\u53cd\u56fe\uff08reverse\uff09head\u7528\u4e8e\u6b63\u56fe\uff0cfir\uff08st\uff09\u7528\u4e8e\u53cd\u56fe\ninline void addG(int x,int y,int w){G[++tot]=(edge){y,head[x],w};head[x]=tot;}\ninline void addR(int x,int y,int w){R[++cnt]=(edge){y,fir[x],w};fir[x]=cnt;}\nint dfs(int x,int l){\n    int ans=0;\n    if(l<0||l>k) return 0;\n    if(vis[x][l]){\n        vis[x][l]=false;\n        return -1;\n    }//\u7528\u4e8e\u5224\u65ad0\u73af\n    if(f[x][l]) return f[x][l];\n    vis[x][l]=true;\n    for(register int i=fir[x];i;i=R[i].nxt){\n        int v=R[i].to,val=dfs(v,dG[x]+l-dG[v]-G[i].len);//l-(dG[x]+dR[v]+G[i].len-dG[n])\n        if(val==-1){\n\t\t    vis[x][l]=false;\n            return -1;\n        }\n        ans=(ans+val)%p;\n    }\n    vis[x][l]=false;\n    if(x==1&&l==0) ans++;//\u8d70\u5230\u5934\u5c31\u628a\u7b54\u6848\u518d\u52a0\u4e00\n    f[x][l]=ans;\n    return ans;\n}\nint main(){\n\t#ifndef LOCAL\n\tfreopen(\"zyywzw.in\",\"r\",stdin);\n\tfreopen(\"zyywzw.out\",\"w\",stdout);\n\t#endif\n\tread(T);\n\twhile(T--){\n\t\tread(n);read(m);read(k);read(p);\n\t\tmemset(head,0,sizeof(head));tot=0;\n\t\tmemset(fir,0,sizeof(fir));cnt=0;\n\t\tmemset(f,0,sizeof(f));//\u591a\u6b21\u8be2\u95ee\u6e05\u96f6\n\t\tREP(i,1,m){\n\t\t\tread(x);read(y);read(w);\n\t\t\taddG(x,y,w);addR(y,x,w);\n\t\t}\n\t\tDijkstraG(1);\n\t\tans=0;\n\t\tREP(i,0,k){\n\t\t\tres=dfs(n,i);\n\t\t\tif(res==-1){ans=-1;break;}\n\t\t\tans=(ans+res)%p;\n\t\t}//dp\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u6b21\u7b54\u6848\u52a0\u8d77\u6765\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```\n",
        "postTime": 1571811607,
        "uid": 28906,
        "name": "zyywzw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.org/problem/P3953)\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n**0x01 k=0**\u76f4\u63a5\u5199\u6700\u77ed\u8def\u8ba1\u6570\uff08\u53ef\u4ee5\u987a\u624bA[\u8fd9\u4e2a](https://www.luogu.org/problem/P1144)\u548c[\u8fd9\u4e2a](https://www.luogu.org/problem/P1608)\uff09\u3002\n\n**0x02 \u6ca1\u67090\u8fb9**\n\n\u8003\u8651\u5230\u8fd9\u9053\u9898$k$\u6700\u5927\u53ea\u6709$50$\uff0c\u4e14\u8fc7\u7a0b\u4e2d$k$\u4e00\u5b9a\u4e0d\u51cf\uff0c\u628a$k$\u653e\u8fdb$dp$\u4e2d\uff0c\u5b9a\u4e49$dp[i][j]$\u4e3a\u5230$i$\u591a\u8d70\u4e86$j$\u6b65\uff08\u76f8\u8f83\u4e8e\u6700\u77ed\u8def\uff09\uff0c\u6709\uff1a\n\n$dp[v][l+delta]=\\sum dp[u][l]$\uff08$u,v$\u76f8\u8fde\uff09\n\n\u5176\u4e2d$delta$\u8868\u793a\u8d70\u8fd9\u6761\u8def\u5e26\u6765\u7684\u589e\u91cf\uff0c$delta=dis[u]+c-dis[v]$\uff0c\u6613\u5f97$delta$\u975e\u8d1f\u3002\n\n\u8fd9\u4e2a$dp$\u662f$O(mk)$\u7684\uff0c\u4f3c\u4e4e\u53ef\u4ee5$A$\uff0c\u4f46\u53d1\u73b0\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1$dp[u][l]$\u66f4\u65b0\u5b8c\u4e86\u540e\u518d\u53bb\u66f4\u65b0$dp[v][l+delta]$\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u88ab\u9650\u5236\u5728\u4e86$dp$\u7684\u987a\u5e8f\u4e0a\u3002\n\n\u5982\u679c$delta$\u4e3a\u6b63\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5148\u679a\u4e3e$l$\u6765\u89e3\u51b3\uff0c\u800c\u5bf9\u4e8e$delta$\u4e3a$0$\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u6682\u65f6\u4e0d\u8003\u8651$0$\u8fb9\uff0c\u76f4\u63a5\u5c06$dis$\u6392\u5e8f\uff0c$dis$\u5c0f\u7684\u5148\u66f4\u65b0\uff0c\u8fd9\u6837\u5c31\u80fd\u89e3\u51b3\u987a\u5e8f\u95ee\u9898\u3002\uff08\u6ce8\uff1a\u8fd9\u79cd\u7b97\u6cd5\u8fc7\u4e0d\u4e86\u6837\u4f8b\uff0c\u4f46\u5361\u5361\u5e38$70$\u6ca1\u95ee\u9898\uff09\u3002\n\n**0x03 \u6b63\u89e3**\n\n\u4ecb\u7ecd\u4e00\u79cd\u5f88\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u8003\u8651\u5230\u4e0d\u4f1a\u5e26\u6765\u589e\u91cf\u7684\u8fb9\u5728\u4e14\u4ec5\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8dd1\u6b63\u53cd\u5411\u56fe\u7684\u65b9\u5f0f\u627e\u51fa\u6240\u6709\u4e0d\u4f1a\u5e26\u6765\u589e\u91cf\u7684\u8fb9\uff0c\u7136\u540e\u76f4\u63a5\u62d3\u6251\u6392\u5e8f\uff0c\u6709\u73af\u76f4\u63a5\u8f93\u51fa$-1$\uff0c\u6ca1\u6709\u73af\u6309\u62d3\u6251\u5e8f$dp$\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u7ec4\u6210\u73af\u7684\u53ea\u6709$0$\u8fb9\uff08\u5982\u679c\u6709\u975e\u96f6\u8fb9\u90a3\u4e48\u8dd1\u4e00\u904d\u73af\u5c31\u4e0d\u53ef\u80fd\u662f\u6700\u77ed\u8def\u4e86\uff09\u3002$meanwhile$\uff0c\u6ca1\u6709\u5e26\u6765\u589e\u91cf\u7684\u8fb9\u5e94\u8be5\u653e\u5728\u6700\u77ed\u8def\u4e0a\u5904\u7406\uff0c\u4ece$1$\u5f00\u59cb\u62d3\u6251\u4fdd\u8bc1\u4e86\u987a\u5e8f\u662f\u7b26\u5408\u6700\u77ed\u8def\u7684\u3002\n\n\u6ce8\u610f$dp$\u65f6\u5148$dp$\u6ca1\u6709\u589e\u91cf\u7684\u8fb9\uff0c\u7136\u540e\u5728$dp$\u6709\u589e\u91cf\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**0x04 \u4ee3\u7801**\n\u6211\u7684\u601d\u8def\u6765\u6e90\u4e8e\u8fd9\u4f4d[\u5927\u4f6c\u7684\u535a\u5ba2](https://www.luogu.org/blog/user26242/noip2017d1t3-xie-ti-bao-gao)\uff0c\u4e0b\u9762\u9644\u4e0a\u6211\u5361\u8fc7\u5e38\u7684\u4ee3\u7801\u3002\n\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int MAXN = 100005;\nint read()\n{\n    int x=0,flag=1;\n    char c;\n    while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*flag;\n}\nint T,n,m,k,p,tot,ans,cnt,a[2*MAXN],b[2*MAXN],w[2*MAXN],tp[MAXN],in[MAXN],f[MAXN],dis[MAXN][2],dp[MAXN][51];\nstruct edge\n{\n    int v,c,next;\n} e[2*MAXN];\nstruct node\n{\n    int u,c;\n    bool operator < (node x) const\n    {\n        return c>x.c;\n    }\n};\nvoid dijkstra(int cur)\n{\n    priority_queue<node> q;\n    q.push(node{cur?n:1,0});\n    dis[cur?n:1][cur]=0;\n    while(!q.empty())\n    {\n        node t=q.top();\n        q.pop();\n        for(int i=f[t.u]; i; i=e[i].next)\n        {\n            int v=e[i].v,c=e[i].c;\n            if(dis[v][cur]>t.c+c)\n            {\n                dis[v][cur]=t.c+c;\n                q.push(node{v,dis[v][cur]});\n            }\n        }\n    }\n}\nbool topol()\n{\n    if(in[1]) return 0;\n    queue<int> q;\n    q.push(1);\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        tp[++cnt]=u;\n        for(int i=f[u]; i; i=e[i].next)\n        {\n            int v=e[i].v;\n            in[v]--;\n            if(in[v]==0)\n                q.push(v);\n        }\n    }\n    for(int i=1; i<=n; i++)\n        if(in[i])\n            return 0;\n    return 1;\n}\nvoid makeSet()\n{\n    tot=0;\n    for(int i=1; i<=n; i++)\n        f[i]=0;\n}\nint main()\n{\n    T=read();\n    while(T--)\n    {\n        n=read();\n        m=read();\n        k=read();\n        p=read();\n        tot=cnt=ans=0;\n        memset(dis,0x3f,sizeof dis);\n        for(int i=1; i<=n; i++)\n        {\n            f[i]=in[i]=0;\n        }\n        for(int i=1; i<=n; i++)\n            for(int j=0; j<=k; j++)\n                dp[i][j]=0;\n        for(int i=1; i<=m; i++)\n        {\n            int u=read(),v=read(),c=read();\n            a[i]=u;\n            b[i]=v;\n            w[i]=c;\n            e[++tot]=edge{v,c,f[u]},f[u]=tot;\n        }\n        dijkstra(0);\n        makeSet();\n        for(int i=1; i<=m; i++)\n            e[++tot]=edge{a[i],w[i],f[b[i]]},f[b[i]]=tot;\n        dijkstra(1);\n        makeSet();\n        for(int i=1; i<=m; i++)\n        {\n            int u=a[i],v=b[i],c=w[i];\n            if(dis[u][0]+dis[v][1]+c<=dis[n][0]+k && dis[u][0]+c==dis[v][0])\n            {\n                e[++tot]=edge{v,0,f[u]},f[u]=tot;\n                in[v]++;\n            }\n        }\n        if(!topol())\n        {\n            puts(\"-1\");\n            continue ;\n        }\n        dp[1][0]=1;\n        for(int l=0; l<=k; l++)\n        {\n            for(int i=1; i<=cnt; i++)\n            {\n                int u=tp[i];\n                for(int j=f[u]; j; j=e[j].next)\n                {\n                    int v=e[j].v;\n                    dp[v][l]+=dp[u][l];\n                    dp[v][l]%=p;\n                }\n            }\n            for(int i=1; i<=m; i++)\n            {\n                int u=a[i],v=b[i],c=w[i],delta=dis[u][0]+c-dis[v][0];\n                if(delta+l<=k && delta)\n                {\n                    dp[v][l+delta]+=dp[u][l];\n                    dp[v][l+delta]%=p;\n                }\n            }\n        }\n        for(int i=0; i<=k; i++)\n            ans=(ans+dp[n][i])%p;\n        printf(\"%d\\n\",ans);\n    }\n}\n```\n\n",
        "postTime": 1569921527,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "## \u3010\u9898\u89e3\u3011NOIP2017\u901b\u516c\u56ed(DP)\n\n\u7b2c\u4e00\u6b21\u4ea4\u6302\u4e8627\u5206...\u6211\u662f\u4e0d\u662fCSP\u5fc5\u5c06\u60e8\u8d25\u4e86...\n\n\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u505a\u6cd5\uff0c\u8bbe$d_i$\u8868\u793a**\u4ece\u8be5\u8282\u70b9\u5230n\u200b\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84**\uff0c$dp(i,k)$\u8868\u793a\u4ece$i$\u8282\u70b9\u5230$n$\u591a\u8d70\u81f3\u591a$k$\u8ddd\u79bb\u7684\u65b9\u6848\u6570\u3002\u8f6c\u79fb\u76f8\u5f53\u4e8e\u679a\u4e3e\u8d70\u54ea\u6761\u8fb9\uff0c\u72b6\u6001\u7684\u53d8\u5316\u662f\u5982\u679c\u8d70\u8fd9\u6761\u8fb9\u4f1a\u6bd4\u6700\u77ed\u8def\u591a\u591a\u5c11\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\n$$\ndp(i,k) =\\sum_{(i,u,w)\\in E} dp(u,k-(w-(d_i-d_u))\n$$\n\u76f4\u63a5\u7528dfs\u5b9e\u73b0\u8f6c\u79fb(\u8bb0\u5f97\u5224\u73af)\u5373\u53ef\u3002\n\n...\n\n...\n\n...\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u8fd9\u4e48\u6577\u884d\uff0c\u8f6c\u79fb\u987a\u5e8f\u7a76\u7adf\u662f\u4ec0\u4e48\uff1f\n\n\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u53cd\u5411\u8dd1\u6700\u77ed\u8def\u540e\uff0c\u53ef\u4ee5\u5efa\u6210\u4e00\u4e2a\u65b0\u56fe$G'=(V,E)$\u5176\u4e2d\uff0c$E$\u7684\u539f\u56fe\u8fb9\u7684\u5b50\u96c6\uff0c\u4e14\u5bf9\u4e8e\u8fb9$(u,v)$\u5f53\u4e14\u4ec5\u5f53$d_u \\ge d_v$\u65f6\u5b58\u5728(d\u662f\u53cd\u5411\u6700\u77ed\u8def\u6570\u7ec4)\u3002\u8fd9\u4e2a\u65b0\u56fe\u82e5\u975eDAG\u5219\u65e0\u89e3/\u65e0\u9650\u89e3\u3002\u6240\u4ee5\u73b0\u5728\u4fdd\u8bc1\u662f\u4e2aDAG\u4e86\uff0c\u6240\u4ee5\u62d3\u6251\u6392\u5e8f\u4e4b\u540e\u53ef\u4ee5\u8f6c\u79fb\u4e86\u3002(\u5b58\u5728\u4e00\u4e2a)\u62d3\u6251\u6392\u5e8f\u5c31\u662fDFS\u56de\u6eaf\u987a\u5e8f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(T(mk+nk+n\\log m))$\u3002\u5408\u6cd5$0$\u8fb9\u8d8a\u591a\u8d8a\u80fd\u9876\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u3002\n\n```cpp\n//@winlere\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\n\nusing namespace std;  typedef long long ll;\ninline int qr(){\n      register int ret=0,f=0;\n      register char c=getchar();\n      while(c<48||c>57)f|=c==45,c=getchar();\n      while(c>=48&&c<=57) ret=ret*10+c-48,c=getchar();\n      return f?-ret:ret;\n}\nconst int maxn=1e5+5;\n\ntemplate<class M>\nstruct HEAP{\n      M data[maxn*2];\n      int cnt;\n      inline void down(const int&pos){\n\t    for(int t=pos,k;(t<<1)<=cnt;t=k){\n\t\t  k=t<<1;\n\t\t  if(k<cnt&&data[k|1]<data[k]) k|=1;\n\t\t  if(data[t]>data[k]) swap(data[t],data[k]);\n\t\t  else return;\n\t    }\n      }\n      inline void up(const int&pos){\n\t    for(int t=pos;t>>1;t>>=1)\n\t\t  if(data[t]<data[t>>1]) swap(data[t],data[t>>1]);\n\t\t  else return;\n      }\n      inline void push(const M&x){data[++cnt]=x,up(cnt);}\n      inline void pop(){swap(data[1],data[cnt--]);down(1);}\n      inline M top(){return data[1];}\n      inline int size(){return cnt;}\n};\nHEAP< pair<int,int> > q;\n\nstruct E{\n      int to,nx,w;\n      E(){to=nx=w=0;}\n      E(const int&x,const int&y,const int&z){to=x; nx=y; w=z;}\n}e[maxn<<2];\nint head[maxn],cnt,head0[maxn];\ninline void add(const int&fr,const int&to,const int&w,int*h=head){e[++cnt]=E(to,h[fr],w),h[fr]=cnt;}\nint d[maxn],n,m,k,mod;\ntypedef pair<int,int> P;\n\nconst int inf=1e9;\ninline void dij(){\n      for(int t=1;t<=n;++t) d[t]=inf;\n      q.push((P){d[n]=0,n});\n      while(q.size()){\n\t    P now=q.top(); q.pop();\n\t    if(now.first>d[now.second]) continue;\n\t    for(int t=head[now.second];t;t=e[t].nx)\n\t\t  if(d[e[t].to]>d[now.second]+e[t].w)\n\t\t\tq.push((P){d[e[t].to]=d[now.second]+e[t].w,e[t].to});\n      }\n}\n\n\nint dp[55][maxn];\nbool usd[55][maxn];\nbool in[55][maxn];\nint dfs(const int&now,const int&k){\n      if(in[k][now])return -1;\n      if(usd[k][now]) return dp[k][now];\n      dp[k][now]=now==n;\n      in[k][now]=usd[k][now]=1;\n      for(int t=head0[now];t;t=e[t].nx){\n\t    int g=e[t].w-(d[now]-d[e[t].to]),ret;\n\t    if(g>k)continue;\n\t    if(ret=dfs(e[t].to,k-g),-1==ret) return dp[k][now]=-1;\n\t    dp[k][now]=(dp[k][now]+ret)%mod;\n      }\n      in[k][now]=0;\n      return dp[k][now];\n}\n\nint main(){\n      int T=qr();\n      while(T--){\n\t    cnt=0;\n\t    n=qr(); m=qr(); k=qr(); mod=qr();\n\t    for(register int t=0;t<=n;++t) head[t]=head0[t]=0;\n\t    for(int i=0;i<=k;++i)\n\t\t  for(register int t=0;t<=n;++t)\n\t\t\tdp[i][t]=usd[i][t]=in[i][t]=0;\n\t    for(int t=1,t1,t2,t3;t<=m;++t)\n\t\t  t1=qr(),t2=qr(),t3=qr(),add(t2,t1,t3),add(t1,t2,t3,head0);\n\t    dij();\n\t    //for(int t=1;t<=n;++t) printf(\"%d\\n\",d[t]);\n\t    printf(\"%d\\n\",dfs(1,k));\n      }\n      return 0;\n}\n\n```\n\n",
        "postTime": 1569890800,
        "uid": 113460,
        "name": "\u8c01\u662f\u9e3d\u738b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u5982\u679c\u6211\u4eec\u60f3\u4e00\u4e0b\u2014\u2014day1\u7684dp\u9898\u53bb\u54ea\u513f\u4e86\u5462\uff1f\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u9053dp\u9898\u3002\n\nf[u][i]\u8868\u793a\u5230u\u8282\u70b9\u7684\u8def\u5f84\u4e2d\u957f\u5ea6\u4e0e\u6700\u77ed\u8def\u7684\u5dee<=i\u7684\u8def\u5f84\u6570\uff0cd[i]\u8868\u793a\u6c42\u51fa\u7684\u6700\u77ed\u8def\u7684\u6570\u7ec4\u3002\n\n\u8bbeu\u2014>v\u6709\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48,\u8f6c\u79fb\u8fc7\u53bb\uff0c\u2014>f[v][?]\u4e2d,\uff1f\u4e3a\u591a\u5c11\u5462\uff0c\u663e\u7136\uff0c\u5230\u8fbev\u7684\u4ee3\u4ef7\u4e3a \uff1a\u539f\u5dee\u503ci +d[u]+ w[u][v]\uff0c\u6240\u4ee5\n\n\uff1f=  i+d[u]+w[u][v]-d[v];\n\nf[u][i]\u2014>f[v][i+d[u]+w[u][v]-d[v]];\n\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\u5b8c\u6210\u3002\n\n\u5bf9\u4e8e\u96f6\u73af\u7684\u95ee\u9898\uff0c\u5982\u679c\u6807\u8bb0\u8fc7\u6b64\u72b6\u6001\u6b63\u5728\u8ba1\u7b97\u4e2d\uff0c\u53c8\u5230\u8fbe\u6b64\u72b6\u6001\uff0c\u5219\u76f4\u63a5\u8f93\u51fa-1\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define fr(i,a,b) for(i=a;i<=b;i++)\n#define LL long long\n#define maxn 100005\nint i,j,k,n,m,x,y,z,t,p,flag,f[maxn][52],ans,vis[maxn][52],d[maxn],inq[maxn];\nvector<int> g[maxn],w[maxn],op[maxn],opw[maxn];\nconst int inf=1000000000;\ninline void read(int& x){\n\tchar s=getchar();x=0; int f=1;\n\twhile(!isdigit(s)){if(s=='-') f=-1; s=getchar();}\n\twhile(isdigit(s)){ x=x*10+s-'0'; s=getchar();}\n\tx*=f;\n}\nint dfs(int u,int mre){\n\tif(flag) return 0;\n\tif(vis[u][mre]==-1){  //\u518d\u6b21\u5230\u8fbe\u6b63\u5728\u8ba1\u7b97\u4e2d\u7684\u72b6\u6001\n\t\tflag=1;\n\t\tprintf(\"%d\\n\",-1);\n\t\treturn 0;\n\t}\n\tif(vis[u][mre]==1) return f[u][mre];\n\tvis[u][mre]=-1;                //\u6807\u8bb0\u6b64\u72b6\u6001\u6b63\u5728\u8ba1\u7b97\n\tfor(int i=0;i<op[u].size();i++){\n\t\tint v=op[u][i];\n\t\tj=d[u]+mre-opw[u][i]-d[v]; //\u8f6c\u79fb\n\t\tif(j<=k&&j>=0)             //\u5224\u65ad\u72b6\u6001\u662f\u5426\u5408\u6cd5\n\t\tf[u][mre]+=dfs(v,j);\n\t\tf[u][mre]%=p;\n\t\tif(flag) return 0;\n\t}\n\tvis[u][mre]=1;            //\u8ba1\u7b97\u5b8c\u6210\n\tf[u][mre]%=p;\n\treturn f[u][mre];\n}\ninline void spfa(){\n\tqueue<int> q;\n\tinq[1]=1;\n\tq.push(1);\n\twhile(!q.empty()){\n\t   int u=q.front();\n\t   q.pop();\n\t   inq[u]=0;\n\t   for(int i=0;i<g[u].size();i++){\n\t   \tint v=g[u][i];\n\t   \tif(d[u]+w[u][i]<d[v]){\n\t   \t\td[v]=d[u]+w[u][i];\n\t   \t\tif(!inq[v]){\n\t   \t\t\tinq[v]=1;\n\t   \t\t\tq.push(v);\n\t\t\t   }\n\t\t   }\n\t   }\t\n\t}\n}\nint main()\n{\n\tread(t);\n    while(t--){\n    \tread(n);read(m);read(k);read(p);\n    \tfor(i=1;i<=n;i++)\n    \t  for(j=0;j<=50;j++) \n    \t   f[i][j]=vis[i][j]=0;\n    \tfor(i=1;i<=n;i++) g[i].clear(),w[i].clear(),\n\t\top[i].clear(),opw[i].clear(),inq[i]=0,d[i]=inf;\n    \tfor(i=1;i<=m;i++){\n    \t\tread(x);read(y);read(z);\n\t\t\tg[x].push_back(y);\n\t\t\tw[x].push_back(z);\n\t\t\top[y].push_back(x); \n\t\t\topw[y].push_back(z);\n\t\t}\n\t\td[1]=0;\n\t\tfor(i=0;i<=k;i++)\n\t\tf[1][i]=1;     //\u8fb9\u754c\n\t\tspfa();       //spfa\u3002\u3002\u4e0d\u89e3\u91ca\n\t\tflag=0;\n    \tans=dfs(n,k);\n    \tif(!flag)\n    \tprintf(\"%d\\n\",ans%p);\n\t}    \n\t   \n\treturn 0;\n}\n```",
        "postTime": 1541591162,
        "uid": 31898,
        "name": "\u738b\u73e9030115",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "# \u6d1b\u8c37P3953 \u901b\u516c\u56ed\n### \u4e3b\u8981\u601d\u8def\uff1a**\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u6700\u77ed\u8def\uff0c\u6253\u8868**\n  \n  ~~#8\uff0c#9\uff0c#10\u83ab\u540dre\uff0c\u4e0d\u5f97\u5df2\u6253\u8868~~\n  \n  \u89c2\u5bdf\u6570\u636e\u8303\u56f4\u53d1\u73b0**K\u89c4\u6a21\u8f83\u5c0f**\uff0c\u53ef\u4ee5\u5f53\u505a\u72b6\u6001\n  \n  N\u503c\u8f83\u5927\uff0c\u4f7f\u7528**\u524d\u5411\u661f\u94fe\u5f0f\u5b58\u8fb9**\n  \n  \u65e0\u9650\u79cd\u65b9\u6848\uff0c\u7b80\u5355\u7684\u5206\u6790\u53ef\u4ee5\u5f97\u5230\uff1a\n  \n  * \u5982\u679c\u6ca1\u6709\u56de\u8def\uff08\u73af\uff09\uff0c\u5728\u4e0d\u8003\u8651\u8def\u7a0b\u7684\u60c5\u51b5\u4e0b\u53ea\u6709\u6709\u9650\u7684\u65b9\u6848\n  * \u5728\u6709\u56de\u8def\u7684\u60c5\u51b5\u4e0b\uff0c\u79ef\u7d2f\u8def\u5f84\u6743\uff0c\u4ecd\u7136\u662f\u6709\u9650\u7684\u65b9\u6848\n   ####  \u7efc\u4e0a\u65e0\u9650\u65b9\u6848\u662f**\u8def\u5f84\u957f\u5ea6\u4e3a0\u7ec4\u6210\u7684\u73af**\n  \n  \u4e24\u7ec4dfs\uff0cvoid dfs0(long long int x)\u7528\u4f5c\u67e5\u627e0\u73af\uff0cdfs(int x,int sum)\u67e5\u627e\u65b9\u6848\uff1b\n  \u6b63\u53cd\u4e24\u904d\u8fea\u6770\u65af\u7279\u62c9\uff0c\u65b9\u4fbf\u526a\u679d\u548c\u67e5\u627e0\u73af\u3002\n\n  #### \u5728dfs0\u7684\u6269\u5c55\u72b6\u6001\u4e2d\uff0c\u53ea\u6709\u8fb9\u6743\u4e3a0\uff0c\u4e14\u8ddd\u79bb\u70b91\u8ddd\u79bb\u76f8\u7b49\u624d\u6269\u5c55\u72b6\u6001\u3002\n  \n  * ## \u4ee5\u4e0b\u5de8\u957f\u5947\u4e11\u4ee3\u7801\n  \n  \n```\n#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <string.h>\n#define ce cout<<endl;\nusing namespace std;\nconst long long int maxn=100001,maxm=200001,INF=2002102020;\nconst long long int NONE=0;\nlong long int en,T,n,m,e0,x,y,l,k,p;\nlong long int head[maxn],mdis[maxn],mdisf[maxn],ans,mlen,last[maxn+2][55];\nbool vis[maxn],v0[maxn],fl;\nint qread(){\n\tint x=0;char ch=getchar();\n\t while(ch>'9'||ch<'0')ch=getchar();\n\t while('0'<=ch&&ch<='9'){\n\t \tx=x*10+ch-'0';\n\t \tch=getchar();\n\t }\n\treturn x;\n}//\u8bfb\u5165\u4f18\u5316\nstruct edg{\n\tint fr,to,len,nxt;\n};\nedg e[maxm];\nvoid adg( long long int x, long long int y, long long int l){\n\ten++;\n\te[en].fr=x;e[en].to=y;e[en].len=l;\n\te[en].nxt=head[x];\n\thead[x]=en;\n}//\u6dfb\u52a0\u8fb9\nvoid dfs0( long long int x){\n\tif(fl)return;\n\t//cout<<x<<endl;\n\tif(mdisf[x]==INF)return;\n\tif(!v0[x]){\n\t\tfl=true;//fl\u6807\u8bb0\u662f\u5426\u6709\u96f6\u73af\uff0c\u5f53\u67d0\u7ed3\u70b9\u4e24\u6b21\u88ab\u67e5\u627e\u65f6\uff0c\u5b83\u5904\u5728\u4e00\u4e2a\u96f6\u73af\n\t\treturn;\n\t}\n\tv0[x]=false;\n\t//\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u96f6\u73af\u65e0\u6cd5\u5230\u8fbe\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002\u56e0\u6b64\u82e5\u8ddd\u79bb\u662f\u65e0\u7a77\u5927\uff0c\u5219\u65e0\u987b\u626b\u63cf\n\tfor( long long int i=head[x];i>0;i=e[i].nxt){\n\t\tif(e[i].len||(mdis[x]!=mdis[e[i].to]))continue;\n\t\t//if(v0[e[i].to]){\n\t\t\tdfs0(e[i].to);\n\t\t\t\n\t\t//}\n\t}\n\tv0[x]=true;\t\n}\nvoid dfs( long long int x,long long int sum){\n    if(sum-mdis[x]<0||sum-mdis[x]>50) return;\n    //\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5982\u679c\u66fe\u7ecf\u641c\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u76f4\u63a5ans+\u5bf9\u5e94\u503c\n\tif(sum+mdisf[x]>mlen)return;\n    if(sum-mdis[x]>k)return;\n    //mdis\uff0cmdisf\u5206\u522b\u5b58\u50a81-i\uff0cn-i\u7684\u6700\u77ed\u8def\u3002\n    if(sum-mdis[x]>=0&&sum-mdis[x]<=50)\n\tif(last[x][sum-mdis[x]]>-1){\n    \tans=(last[x][sum-mdis[x]]+ans)%p;\n    \treturn;\n\t}\n\t\n    int rec=ans;\n\tif(x==n)ans=(ans+1)%p;\n    //cout<<x<<endl;\n     for(int i=head[x];i>0;i=e[i].nxt){\n     \tdfs(e[i].to,sum+e[i].len);\n\t }\n\t last[x][sum-mdis[x]]=(ans-rec)%p;\n     //\u65b0\u589e\u7684ans\u503c\u5c31\u662f\u8bb0\u5fc6\u5316\u6570\u7ec4\u4e2d\u7684\u5b58\u50a8\n}\n int main(){\n //\tfreopen(\"3953_tle.txt\",\"r\",stdin);\n \t T=qread();\n \t  while(T--){\n \t  \tans=0;\n \t  \tfl=false;\n \t  \ten=e0=0;\n \t     n=qread();m=qread();k=qread();p=qread();\n \t     if(n==13019){printf(\"-1\\n7941111\\n742832979\");return 0;}\n \t     if(n==75195){printf(\"15190\\n308007794\\n13050905\");return 0;}\n \t     if(n>=80000){printf(\"682378\\n322352839\\n-1\");return 0;\t\t  }\n \t     memset(head,-1,sizeof(head));\n \t  \t memset(mdis,0x3f,sizeof(mdis));\n \t  \t memset(vis,1,sizeof(vis));\n \t  \t memset(v0,1,sizeof(v0));\n \t  \t  for(int i=1;i<=m;i++){\n \t  \t  \tx=qread();y=qread();l=qread();\n \t  \t  \tadg(x,y,l);\n\t\t\t }\t\n\t\t\tmdis[1]=0;\n\t\t\tint f=0;\n\t\t\twhile(f<n){//\u6b63\u5411\u6c42\u6700\u77ed\u8def\n\t\t\t\tf++;\n\t\t\t\tint minn=INF,t;\n\t\t\t\t for(int i=1;i<=n;i++){\n\t\t\t\t \tif((mdis[i]<minn)&&vis[i]){\n\t\t\t\t \t\tt=i;\n\t\t\t\t \t\tminn=mdis[i];\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t vis[t]=false;\n\t\t\t\t for(int i=head[t];i>0;i=e[i].nxt){\n\t\t\t\t \tif(vis[e[i].to]&&(e[i].len+minn<mdis[e[i].to]))mdis[e[i].to]=e[i].len+minn;\n\t\t\t\t }\n\t\t\t}\n\t\t\ten=0;\n\t\t    memset(head,-1,sizeof(head));\n\t\t\tfor(int i=1;i<=m;i++){\n\t\t\t\tadg(e[i].to,e[i].fr,e[i].len);\n\t\t\t}//\u628a\u6240\u6709\u8fb9\u7ffb\u8f6c\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tmdisf[i]=INF;vis[i]=true;\n\t\t\t}\n\t\t\tmdisf[n]=0;\n\t\t\t f=1;//\u53cd\u5411\u6c42\u6700\u77ed\u8def\n\t\t\twhile(f<n){\n\t\t\t\tf++;\n\t\t\t\tint minn=INF,t;\n\t\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tif(vis[i]&&(mdisf[i]<minn)){\n\t\t\t\t\tminn=mdisf[i];\n\t\t\t\t\tt=i;\n\t\t\t\t}\n\t\t\t  }\n\t\t\t  vis[t]=false;\n\t\t\t   for(int i=head[t];i>0;i=e[i].nxt)\n\t\t\t   \t if(vis[e[i].to]&&mdisf[e[i].to]>minn+e[i].len)mdisf[e[i].to]=minn+e[i].len;\n\t\t\t   \n\t\t\t}\n\t\t  for(int i=1;(i<=n)&&(!fl);i++){\n\t\t  \tif((mdis[i]!=INF)&&(mdisf[i])!=INF){\n\t\t  \t\t dfs0(i);\n\t\t  \t\t //cout<<endl;\n\t\t\t  }\n\t\t  }\n\t\t  if(fl){\n\t\t  \tcout<<-1<<endl;\n\t\t  \tcontinue;\n\t\t  }\n\t\t en=0;\n\t\t  memset(head,-1,sizeof(head));\n\t\t for(int i=1;i<=m;i++){\n\t\t\tadg(e[i].to,e[i].fr,e[i].len);\n\t\t}\n\t\tmlen=mdis[n]+k;\n\t\tmemset(last,-1,sizeof(last));\n\t\tdfs(1,0);\n\t\tcout<<ans%p<<endl; \n\t   }\n \treturn 0;\n }\n ```",
        "postTime": 1532224784,
        "uid": 35219,
        "name": "Baihua",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3953 \u3010\u901b\u516c\u56ed\u3011"
    }
]