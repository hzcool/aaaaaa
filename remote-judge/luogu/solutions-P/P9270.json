[
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u884c\uff0c\u53eb cff \u884c\u3002\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u884c\u603b\u662f cff \u884c\uff0c\u800c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u884c\uff0c\u5982\u679c\u5b83\u6709\u4e00\u4e2a\u6216\u4e24\u4e2a\u5ea7\u4f4d\u88ab\u5360\u7528\uff0c\u5b83\u4e5f\u662f cff \u884c\u3002\n\n\u5982\u679c\u884c $r_1$ \u548c $r_2$ \u4e4b\u95f4\u6ca1\u6709\u5176\u4ed6 cff \u884c\uff0c\u5219\u5b83\u4eec\u5b9a\u4e49\u4e86 cff \u533a\u95f4 $[r_1,r_2]$\u3002cff \u533a\u95f4\u662f\u95ed\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a cff \u884c\u53ef\u80fd\u5c5e\u4e8e\u4e24\u4e2a cff \u533a\u95f4\uff0c\u5373\u8fd9\u4e9b\u533a\u95f4\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u5728\u6bcf\u4e2a cff \u533a\u95f4\u4e2d\uff0c**\u6700\u591a**\u6709\u56db\u4e2a\u5360\u636e\u7684\u5ea7\u4f4d\uff0c\u4e5f\u5c31\u662f $(r_1,1),(r_1,2),(r_2,1)$ \u6216 $(r_2,2)$\uff08\u56e0\u4e3a\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u5176\u4ed6 cff \u884c\uff09\u3002\u800c\u8981\u662f\u65b0\u7684\u4e58\u5ba2\u8981\u5728\u8fd9\u4e2a\u533a\u95f4\u9009\u5ea7\u4f4d\uff0c\u53ea\u6709\u4e0b\u9762\u516b\u4e2a\u4e2d\u7684\u5176\u4e00\u662f\u6700\u597d\u7684\u9009\u62e9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a8n398he.png)\n\n\u6bcf\u6b21\u4e58\u5ba2\u8fdb\u5165\uff0c\u5224\u65ad\u8fd9\u516b\u4e2a\u6700\u597d\u7684\u90a3\u4e2a\u5c31\u884c\u4e86\u3002\n\n\u5f53\u4e00\u4e2a\u4eba\u8fdb\u6765\u65f6\uff0c\u5e94\u8be5\u9009\u62e9\u54ea\u4e2a cff \u533a\u95f4\u5462\uff1f\u5e94\u8be5\u9009\u62e9\u5177\u6709\u6700\u5927\u8ddd\u79bb\uff08\u6309\u4e0a\u8ff0\u65b9\u6cd5\u8ba1\u7b97\u800c\u6765\uff09\u7684\u90a3\u4e2a cff \u533a\u95f4\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684 cff \u533a\u95f4\uff0c\u90a3\u4e48\u5e94\u8be5\u9009\u62e9\u6700\u9760\u8fd1\u5165\u53e3\u7684\u6700\u4f73\u5ea7\u4f4d\u6240\u5728\u7684 cff \u533a\u95f4\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6309\u7167\u8fd9\u4e9b\u6807\u51c6\u8fdb\u884c\u6392\u5e8f\u7684\u4f18\u5148\u961f\u5217\u6765\u4fdd\u5b58 cff \u533a\u95f4\u3002\n\n\u5f53\u4e00\u4e2a\u4eba\u8fdb\u5165\u6216\u79bb\u5f00\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u66f4\u65b0\u67d0\u4e9b cff \u533a\u95f4\uff1a\u66f4\u65b0\u4e00\u4e2a cff \u533a\u95f4\uff0c\u6216\u5c06\u4e00\u4e2a cff \u533a\u95f4\u5206\u6210\u4e24\u4e2a cff \u533a\u95f4\uff0c\u6216\u5c06\u4e24\u4e2a cff \u533a\u95f4\u8fde\u63a5\u6210\u4e00\u4e2a cff \u533a\u95f4\u3002\u5728\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5220\u6389\u4e00\u4e2a\uff08\u6216\u4e24\u4e2a\uff09cff \u533a\u95f4\u5e76\u63d2\u5165\u4e00\u4e2a\uff08\u6216\u4e24\u4e2a\uff09\u65b0\u7684 cff \u533a\u95f4\u3002\n\n\u4e3a\u4e86\u7ef4\u62a4 cff \u884c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u51e0\u4e2a\u6570\u7ec4\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u8bb0\u5f55\u8c01\u5750\u5728\u90a3\u91cc\uff0c\u5982\u679c\u8fd9\u4e00\u884c\u662f cff \u884c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u4e0b\u524d\u4e00\u4e2a\u548c\u540e\u4e00\u4e2a cff \u884c\uff0c\u4ee5\u53ca\u5b83\u5c5e\u4e8e\u54ea\u4e9b\u533a\u95f4\u3002\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u627e\u5230\u6240\u6709 cff \u533a\u95f4\uff0c\u5e76\u6210\u529f\u5730\u66f4\u65b0\u5b83\u4eec\u3002\u7a0b\u5e8f\u53ea\u8981\u5728\u4e00\u4f4d\u4e58\u5ba2\u8fdb\u5165\u7684\u65f6\u5019\u50cf\u4e0a\u9762\u90a3\u6837\u5224\u65ad\u548c\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u5b98\u65b9\u9898\u89e3\u4ee3\u7801\uff1a\n\n```cpp\n// CEOI 2013 - Task: Tram - Solution\n// Author: Luka Kalinovcic\n\n#include <cstdio>\n#include <map>\n#include <set>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long llint;\n\nllint const oo = 1000000000000000000LL;\n\nstruct Point {\n  int r, c;\n  Point() : r(0), c(0) {}\n  Point(int r, int c) : r(r), c(c) {}\n};\n\nllint Dist(Point const& A, Point const& B) {\n  llint dr = A.r - B.r;\n  llint dc = A.c - B.c;\n  return dr * dr + dc * dc;\n}\n\nstruct Candidate {\n  Point point;\n  llint dist;\n};\n\nbool operator<(Candidate const& A, Candidate const& B) {\n  if (A.dist != B.dist) return A.dist > B.dist;\n  if (A.point.r != B.point.r) return A.point.r < B.point.r;\n  return A.point.c < B.point.c;\n}\n\nstruct Segment;\n\nstruct Row {\n  int r;\n  bool c1_occupied;\n  bool c2_occupied;\n  Segment *up, *down;\n\n  Row(int r)\n      : r(r), c1_occupied(false), c2_occupied(false),\n        up(NULL), down(NULL) {}\n};\n\nstruct Segment {\n  Row* row1, *row2;\n  Candidate best_seat;\n\n  Segment(Row* row1, Row* row2)\n      : row1(row1),\n        row2(row2) {\n    ResetBestSeat();\n    row1->down = this;\n    row2->up = this;\n  }\n\n  void ResetBestSeat() {\n    best_seat.point = Point(row1->r, 1);\n    best_seat.dist = 0;\n  }\n\n  void FindBestSeat() {\n    ResetBestSeat();\n    vector<Point> occupied;\n    int r1 = row1->r;\n    int r2 = row2->r;\n    if (row1->c1_occupied) occupied.push_back(Point(r1, 1));\n    if (row1->c2_occupied) occupied.push_back(Point(r1, 2));\n    if (row2->c1_occupied) occupied.push_back(Point(r2, 1));\n    if (row2->c2_occupied) occupied.push_back(Point(r2, 2));\n    vector<Point> candidates;\n    candidates.push_back(Point(r1, 1));\n    candidates.push_back(Point(r1, 2));\n    candidates.push_back(Point((r1 + r2) / 2, 1));\n    candidates.push_back(Point((r1 + r2) / 2, 2));\n    candidates.push_back(Point((r1 + r2 + 1) / 2, 1));\n    candidates.push_back(Point((r1 + r2 + 1) / 2, 2));\n    candidates.push_back(Point(r2, 1));\n    candidates.push_back(Point(r2, 2));\n    for (int i = 0; i < (int)candidates.size(); ++i) {\n      Candidate seat;\n      seat.point = candidates[i];\n      seat.dist = oo;\n      for (int j = 0; j < (int)occupied.size(); ++j) {\n        llint dist = Dist(candidates[i], occupied[j]);\n        if (dist < seat.dist) seat.dist = dist;\n      }\n      if (seat < best_seat) best_seat = seat;\n    }\n  }\n};\n\nstruct BestSeatCmp {\n  bool operator()(Segment* seg1, Segment* seg2) {\n    if (seg1->best_seat < seg2->best_seat) return true;\n    if (seg2->best_seat < seg1->best_seat) return false;\n    return seg1->row1->r < seg2->row1->r;\n  }\n};\n\nmap<int, Row*> rows;\n\nset<Segment*, BestSeatCmp> segments;\n\nvoid UpdateSegment(Segment* seg) {\n  if (!seg) return;\n  segments.erase(seg);\n  seg->FindBestSeat();\n  segments.insert(seg);\n}\n\nvoid DeleteSegment(Segment* seg) {\n  if (!seg) return;\n  segments.erase(seg);\n  delete seg;\n}\n\nint cff_0102[542457];\n\nint main() {\n  int N, M;\n  scanf(\"%d%d\", &N, &M);\n  rows[1] = new Row(1);\n  rows[N] = new Row(N);\n  segments.insert(new Segment(rows[1], rows[N]));\n  UpdateSegment(rows[1]->down);\n\n  vector<Point> points(M);\n  for (int i = 0; i < M; ++i) {\n    char op;\n    scanf(\" %c\", &op);\n    if (op == 'E') {\n      Segment* seg = *segments.begin();\n      points[i] = seg->best_seat.point;\n      int r = points[i].r;\n      int c = points[i].c;\n      printf(\"%d %d\\n\", r, c);\n      Row* row;\n      if (rows.count(r)) {\n        row = rows[r];\n      } else {\n        Row* row1 = seg->row1;\n        Row* row2 = seg->row2;\n        DeleteSegment(seg);\n        row = new Row(r);\n        rows[r] = row;\n        segments.insert(new Segment(row1, row));\n        segments.insert(new Segment(row, row2));\n      }\n      if (c == 1) {\n        row->c1_occupied = true;\n      } else {\n        row->c2_occupied = true;\n      }\n      UpdateSegment(row->up);\n      UpdateSegment(row->down);\n    } else {\n      int x;\n      scanf(\"%d\", &x); --x;\n      int r = points[x].r;\n      int c = points[x].c;\n      Row* row = rows[r];\n      if (c == 1) {\n        row->c1_occupied = false;\n      } else {\n        row->c2_occupied = false;\n      }\n      if (r != 1 && r != N && !row->c1_occupied && !row->c2_occupied) {\n        Row* row1 = row->up->row1;\n        Row* row2 = row->down->row2;\n        DeleteSegment(row->up);\n        DeleteSegment(row->down);\n        rows.erase(r);\n        delete row;\n        segments.insert(new Segment(row1, row2));\n        UpdateSegment(row1->down);\n      } else {\n        UpdateSegment(row->up);\n        UpdateSegment(row->down);\n      }\n    }\n  }\n  return 0;\n}\n```\n\n\u5b98\u65b9\u9898\u89e3\u4e2d\u4f7f\u7528\u4e86 `set` \u6765\u641e\u4f18\u5148\u961f\u5217\u3002\u53e6\u5916\uff0c\u5b98\u65b9\u4ee3\u7801\u4e2d\u7684 `oo` \u8868\u793a\u65e0\u9650\uff08$\\infty$\uff09\u3002\u5f88\u8f7b\u677e\u5730 A \u4e86\u8fd9\u9898\u3002",
        "postTime": 1682525992,
        "uid": 542457,
        "name": "cff_0102",
        "ccfLevel": 4,
        "title": "P9270 [CEOI2013] Tram \u9898\u89e3"
    }
]