[
    {
        "content": "[${\\color{#00cc77}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.com.cn/blog/Wendigo/)\n\n[P3261 \u3010\\[JLOI2015\\]\u57ce\u6c60\u653b\u5360\u3011](https://www.luogu.com.cn/problem/P3261)\n\n### \u6b64\u9898\u7b97\u6cd5:\u5de6\u504f\u6811-\u53ef\u5e76\u5806+\u6807\u8bb0\u4e0b\u4f20\n\n\u8c03\u4e86$3$\u5929\uff0c\u5e73\u5747\u6bcf\u5929$1$\u5c0f\u65f6\u3002\n\n\u4e0d\u8981\u770b\u6211\u4ee3\u7801\u957f\uff0c\u5904\u5904\u90fd\u662f**\u9519\u70b9**\u554a\uff01\n\n![knight.jpg](https://i.loli.net/2019/12/18/9Ovmny2C1HgZ87B.jpg)\n\n**\u770b\u5230\u8fd9\u9898\uff0c\u5c31\u77e5\u9053\u8be5\u8fd9\u4e48\u505a\uff1a**\n\n\u4ece\u4e0b\u5230\u4e0a\u904d\u5386\u6811\uff0c\u4e00\u76f4\u62ff\u5355\u524d\u8282\u70b9\u4e0a\u7684\u9a91\u58eb\u56e2\u4e2d\u6700\u84bb\u7684\u770b\u770b\u4f1a\u4e0d\u4f1a\u6b7b\u5728\u8fd9\u91cc\uff0c\u518d\u628a\u6ca1\u6b7b\u7684\u653e\u5230\u7236\u4eb2\u8282\u70b9\u4e0a\u53bb\uff0c\u5e76\u6539\u53d8\u4ed6\u4eec\u7684\u6218\u6597\u529b\u3002\n\n**\u6240\u4ee5\u53ef\u4ee5\u5f97\u51fa\u6b64\u9898\u7b97\u6cd5\u662f\uff1a**\n\n**~~luogu\u6807\u7b7e~~$+$\u6700\u84bb$+$\u653e\u5230\u7236\u4eb2\u8282\u70b9$=$\u5de6\u504f\u6811**\n\n\u53ef\u662f\u9a91\u58eb\u7684\u80fd\u529b\u662f\u4f1a\u53d8\u7684\uff0c\u51e1\u662f**\u6811\u4e0a\u6279\u91cf\u4fee\u6539**\u9700\u8981**\u6807\u8bb0\u4e0b\u4f20**\n\n**\u5927\u81f4\u601d\u8def\uff1a**\n\n\u5148**\u5f00\u6570\u7ec4(\u771fQwQ\u591a)\uff1a**\n\n```cpp\nint fa[N],c[N],a[N],rt[N]; //\u6811\u4e0a\u7236\u4eb2,\u51fa\u751f\u5730,\u57ce\u6c60\u80fd\u529b\u6539\u53d8\u65b9\u5f0f,\u6bcf\u4e2a\u57ce\u6c60\u4e0a\u9a91\u58eb\u56e2\u5de6\u504f\u6811\u7684\u6839\nlng h[N],v[N],s[N]; //\u57ce\u6c60\u9632\u5fa1\u529b,\u57ce\u6c60\u80fd\u529b\u6539\u53d8\u503c,\u9a91\u58eb\u80fd\u529b\u521d\u59cb\u503c\nint ls[N],rs[N],dep[N]; //\u5806\u4e2d\u5de6\u5b50,\u53f3\u5b50,\u6811\u9ad8\nint Dep[N],die[N],ans[N]; //\u6811\u4e0a\u6df1\u5ea6,\u9a91\u58eb\u6b7b\u4ea1\u4f4d\u7f6e,\u57ce\u6c60\u6b7b\u4ea1\u9a91\u58eb\u6570\nlng add[N],tim[N]; //\u9a91\u58eb\u80fd\u529b\u53d8\u5316\u6807\u8bb0(+,*)\n```\n\u518d**\u64cd\u4f5c\uff1a**\n\n\u5148\u5c06**\u540c\u51fa\u751f\u57ce\u6c60**\u7684\u9a91\u58eb\u5408\u5e76\u4e3a\u4e00\u5806\u3002\n\n\u518d\u4ece$n$\u5230$1$\u904d\u5386\u6811\u4e0a\u57ce\u6c60\uff0c\u4e0d\u505c\u53d6\u5355\u524d\u57ce\u6c60\u8282\u70b9**\u5c0f\u6839\u5806**\u9876\u3002\n\n\u5982\u679c**\u5c0f\u4e8e\u57ce\u6c60\u9632\u5fa1\u529b**\u5c31\u5224\u4e4b\u6b7b\uff0c\u53bb\u9664\u5806\u9876\u3002\n\n\u5426\u5219\u8df3\u51fa\u5bfb\u627e\uff0c**\u5982\u679c\u8be5\u5806\u5df2\u7ecf\u4e3a\u7a7a\uff0c\u53bb\u627e\u4e0b\u4e00\u4e2a\u8282\u70b9**\u3002\n\n\u5982\u679c\u5806\u4e0d\u7a7a\uff0c\u5229\u7528**\u6807\u8bb0**\u6539\u53d8\u8be5\u5806\u9a91\u58eb\u80fd\u529b\u503c\u3002\n\n\u5e76\u5c06\u9a91\u58eb\u56e2\u5408\u5e76\u5230\u7236\u4eb2\u8282\u70b9\u9a91\u58eb\u56e2\u3002\n\n\n\n```cpp\nfor(int i=n;i>=1;i--){ //\u4ece\u4e0b\u5230\u4e0a\n\twhile(rt[i]!=-1){ //\u53ea\u8981\u5355\u524d\u5806\u4e0d\u7a7a\n\t\tif(s[rt[i]]<h[i]){ //\u5c0f\u4e8e\u57ce\u6c60\u9632\u5fa1\u503c\n\t\t\tdie[rt[i]]=i; //\u5224\u4e4b\u6b7b\n\t\t\tpushdown(rt[i]); //\u4e00\u65f6pushdown\u4e00\u65f6\u723d\n\t\t\tif(!ls[rt[i]]) rt[i]=-1; \n\t\t\telse rt[i]=merge(ls[rt[i]],rs[rt[i]]); //\u53bb\u9664\u5806\u9876\n\t\t} else break; //\u5269\u4e0b\u7684\u4e0d\u6b7b\n\t}\n\tif(i==1) break; //\u6839\u7279\u5224\n\tif(rt[i]==-1) continue; //\u5426\u5219MLE\n\tif(a[i]) tim[rt[i]]*=v[i],add[rt[i]]*=v[i],s[rt[i]]*=v[i];\n\telse add[rt[i]]+=v[i],s[rt[i]]+=v[i];\n\t//\u5229\u7528\u6807\u8bb0\uff0c\u4fee\u6539\u8be5\u5806\u9a91\u58eb\u80fd\u529b\u503c\n\tpushdown(rt[i]); //\u4e00\u76f4pushdown\u4e00\u76f4\u723d\n\tif(rt[fa[i]]==-1) rt[fa[i]]=rt[i];\n\telse rt[fa[i]]=merge(rt[fa[i]],rt[i]); //\u7236\u4eb2\u57ce\u6c60\u7b49\u5f85\u7740\u5e78\u5b58\u7684\u9a91\u58eb\n}\n```\n**$pushdown()$\uff1a\u6839\u636e\u5355\u524d\u6807\u8bb0\uff0c\u5148\u6539\u5de6\u53f3\u5b50\u6811\u80fd\u529b\u503c\uff0c\u518d\u6539\u5de6\u53f3\u5b50\u6811\u6807\u8bb0\u503c\uff0c\u6700\u540e\u6e05\u7a7a\u5355\u524d\u8282\u70b9\u6807\u8bb0\u3002**\n\n**\u5408\u5e76\u5806$merge()$\uff1a\u8fd9\u662f\u5de6\u504f\u6811\u7684~~\u5168\u90e8~~\u7cbe\u534e\uff0c\u4e0d\u4f1a\u53bb\u6a21\u677f\u9898\u5b66\u3002**\n\n**\u6e05\u7a7a\u6807\u8bb0\uff1a\u52a0\u6807\u8bb0\u4e3a$0$\uff0c\u4e58\u6807\u8bb0\u4e3a$1$\u3002**\n\n\n\u8fd9\u4e4b\u540e\uff0c\u518d\u4ee4\u6bcf\u4e2a$ans[die[i]]++$\uff0c\u5c31\u53ea\u5269\u8f93\u51fa\u4e86\u3002\n\n**\u5148\u8f93\u51fa$n$\u4e2a$ans[i]$\uff0c\u518d\u8f93\u51fa$m$\u4e2a$Dep[c[i]]-Dep[die[i]]$\u3002**\n\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define lng long long\nconst int N=3e5+10; //It's turly fat\nint n,m;\nint fa[N],c[N],a[N],rt[N]; //\u6811\u4e0a\u7236\u4eb2,\u51fa\u751f\u5730,\u57ce\u6c60\u80fd\u529b\u6539\u53d8\u65b9\u5f0f,\u6bcf\u4e2a\u57ce\u6c60\u4e0a\u9a91\u58eb\u56e2\u5de6\u504f\u6811\u7684\u6839\nlng h[N],v[N],s[N]; //\u57ce\u6c60\u9632\u5fa1\u529b,\u57ce\u6c60\u80fd\u529b\u6539\u53d8\u503c,\u9a91\u58eb\u80fd\u529b\u521d\u59cb\u503c\nint ls[N],rs[N],dep[N]; //\u5806\u4e2d\u5de6\u5b50,\u53f3\u5b50,\u6811\u9ad8\nint Dep[N],die[N],ans[N]; //\u6811\u4e0a\u6df1\u5ea6,\u9a91\u58eb\u6b7b\u4ea1\u4f4d\u7f6e,\u57ce\u6c60\u6b7b\u4ea1\u9a91\u58eb\u6570\nlng add[N],tim[N]; //\u9a91\u58eb\u80fd\u529b\u53d8\u5316\u6807\u8bb0(+,*)\nvoid pushdown(int x){ //\u6807\u8bb0\u4e0b\u4f20\n\tif(add[x]==0&&tim[x]==1)\n\t\treturn;\n\tif(ls[x]){\n\t\ttim[ls[x]]*=tim[x];\n\t\tadd[ls[x]]*=tim[x];\n\t\tadd[ls[x]]+=add[x];\n\t\ts[ls[x]]*=tim[x];\n\t\ts[ls[x]]+=add[x];\n\t} \n\tif(rs[x]){\n\t\ttim[rs[x]]*=tim[x];\n\t\tadd[rs[x]]*=tim[x];\n\t\tadd[rs[x]]+=add[x];\n\t\ts[rs[x]]*=tim[x];\n\t\ts[rs[x]]+=add[x];\n\t}\n\tadd[x]=0,tim[x]=1;\n}\nint merge(int x,int y){ //\u5408\u5e76\u5806\n\tif(!x||!y) return x^y;\n\tpushdown(x),pushdown(y);\n\tif(s[x]>s[y]) swap(x,y);\n\trs[x]=merge(rs[x],y);\n\tif(dep[ls[x]]<dep[rs[x]])\n\t\tswap(ls[x],rs[x]);\n\tdep[x]=dep[ls[x]]+1;\n\treturn x;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld\",h+i);\n\t\trt[i]=-1; //\u8bbe\u4e3a\u7a7a\n\t}\n\tDep[1]=1,dep[0]=-1;\n\tfor(int i=2;i<=n;i++){\n\t\tscanf(\"%d%d%lld\",fa+i,a+i,v+i);\n\t\tDep[i]=Dep[fa[i]]+1; //\u4e0d\u7528dfs\u6c42Dep\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%lld%d\",s+i,c+i);\n\t\ttim[i]=1; //It's very important!\n\t\tif(rt[c[i]]==-1) rt[c[i]]=i;\n\t\telse rt[c[i]]=merge(rt[c[i]],i); //\u5408\u5e76\u540c\u57ce\u9a91\u58eb\n\t}\n\tfor(int i=n;i>=1;i--){ //\u4ece\u4e0b\u5230\u4e0a\n\t\twhile(rt[i]!=-1){ //\u53ea\u8981\u5355\u524d\u5806\u4e0d\u7a7a\n\t\t\tif(s[rt[i]]<h[i]){ //\u5c0f\u4e8e\u57ce\u6c60\u9632\u5fa1\u503c\n\t\t\t\tdie[rt[i]]=i; //\u5224\u4e4b\u6b7b\n\t\t\t\tpushdown(rt[i]); //\u4e00\u65f6pushdown\u4e00\u65f6\u723d\n\t\t\t\tif(!ls[rt[i]]) rt[i]=-1;\n\t\t\t\telse rt[i]=merge(ls[rt[i]],rs[rt[i]]);\n\t\t\t} else break; //\u5269\u4e0b\u7684\u4e0d\u6b7b\n\t\t}\n\t\tif(i==1) break; //\u6839\u7279\u5224\n\t\tif(rt[i]==-1) continue; //\u5426\u5219MLE\n\t\tif(a[i]) tim[rt[i]]*=v[i],add[rt[i]]*=v[i],s[rt[i]]*=v[i];\n\t\telse add[rt[i]]+=v[i],s[rt[i]]+=v[i];\n\t\t//\u5229\u7528\u6807\u8bb0\uff0c\u4fee\u6539\u8be5\u5806\u9a91\u58eb\u80fd\u529b\u503c\n\t\tpushdown(rt[i]); //\u4e00\u76f4pushdown\u4e00\u76f4\u723d\n\t\tif(rt[fa[i]]==-1) rt[fa[i]]=rt[i];\n\t\telse rt[fa[i]]=merge(rt[fa[i]],rt[i]); //\u7236\u4eb2\u57ce\u6c60\u7b49\u5f85\u7740\u5e78\u5b58\u7684\u9a91\u58eb\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tans[die[i]]++; \n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans[i]); //\u8f93\u51fa\uff0c\u7ed3\u675f\n\tfor(int i=1;i<=m;i++)\n\t\tprintf(\"%d\\n\",Dep[c[i]]-Dep[die[i]]);\n\treturn 0;\n}\n\n```\n\n**\u51e0\u4e2a\u6050\u6016\u7684\u9519\u8bef\uff1a**\n\n**top 4** $tim[]$\u6570\u7ec4\u5728$1-n$\u7684\u5faa\u73af\u4e2d\u521d\u59cb\u5316\u3002\n\n**top 3** \u4e0d\u521d\u59cb\u5316$dep[0]=-1$\u3002\n\n**top 2** \u4e0d\u5728\u52a0\u6807\u8bb0\u7684\u540c\u65f6\u6539$s[]$\u6570\u7ec4\u3002\n\n**top 1** \u4e0d\u7279\u5224\u9a91\u58eb\u6b7b\u5149\u7684\u60c5\u51b5(\u83ab\u540dMLE\u6781\u5176\u6050\u6016)\u3002\n\n**\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u5feb\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6 ! !\n",
        "postTime": 1576671837,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "# \u4f18\u5148\u961f\u5217\u542f\u53d1\u5f0f\u5408\u5e76\n\n~~STL\u5927\u6cd5\u597d~~\n\n\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u81ea\u7136\u662f\u4e0d\u4f1a\u5de6\u504f\u6811\u8fd9\u79cd\u4e1c\u897f\u7684\uff0c\u4e8e\u662f\u5c31\u7528 $c++$ \u81ea\u5e26\u7684 $priority$_$queue$ \u6c34\u8fc7\u53bb\u4e86\u3002\n\n\u9996\u5148\u6bcf\u4e2a\u8282\u70b9\u90fd\u5f00\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u961f\u5217\u662f\u54ea\u4e00\u4e2a($rt$ \u6570\u7ec4)\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5982\u679c $size$ \u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u76f4\u63a5\u4ea4\u6362 $rt$ \u7684\u503c\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u540c\u6837\u7684\uff0c\u5f00\u4e24\u4e2a\u6807\u8bb0\u6570\u7ec4 $Mul,Add$ \u3002\n\n\u90a3\u4e48\u6807\u8bb0\u600e\u4e48\u4e0b\u653e\u5462\uff1f\n\n**\u6211\u4eec\u4e0d\u4e0b\u653e\uff01**\n\n\u6bcf\u4e2a\u6807\u8bb0\u5c31\u8ddf\u7740\u5b83\u7684\u4f18\u5148\u961f\u5217\u4e00\u76f4\u8ddf\u4e0b\u53bb\uff01\n\n**\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff1a**\n\n\u5728 $merge$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628a $r2$ \u63d2\u5230 $r1$ \u91cc\u9762\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765 $r2$ \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c $x$\u3002\u4e3a\u4e86\u53bb\u9002\u5e94 $r1$ \u7684\u6807\u8bb0\uff0c\u5c31\u628a $(x-Add[r1])/Mul[r1]$ \u8fd9\u4e2a\u503c\u63d2\u5230 $r1$ \u91cc\u9762\u5c31\u884c\u4e86\u3002\n\n\u56e0\u4e3a\u8981\u6709\u9664\u6cd5\uff0c\u6240\u4ee5\u4f18\u5148\u961f\u5217\u8981\u5f00$long \\;double$\u7c7b\u578b\u7684\uff08$double$ \u53ea\u670980\u5206\uff09\n\n\u8fd8\u6709\u4e2a\u7ec6\u8282\u5c31\u662f $get$ \u51fd\u6570\uff0c\u662f\u56db\u820d\u4e94\u5165\u7528\u7684\uff0c\u8fd9\u6837\u5bf9\u7cbe\u5ea6\u6709\u5f88\u5927\u5e2e\u52a9\uff08\u6216\u8bb8\u5427\uff09\u3002\n\n\u56e0\u4e3a\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u88ab\u63d2\u5165 $log$ \u6b21\uff0c\u6bcf\u6b21\u662f $log$ \u7684\uff0c\u6240\u4ee5\u603b**\u65f6\u95f4\u590d\u6742\u5ea6**:$O(nlog^2n)$\u3002\n\n\u7531\u4e8e\u8fbe\u4e0d\u5230\u4e0a\u754c\uff0c\u8dd1\u7684\u8fd8\u662f\u5f88\u5feb\u7684\uff0c\u53ea\u7528\u4e86 $600ms$\n```cpp\n#include<bits/stdc++.h>\n#define N 300005\n#define int long long\n#define double long double\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;int w=0;char ch=0;\n    while(!isdigit(ch))w|=ch=='-',ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    X=w?-X:X;\n}\n\nint n,m;\nint head[N],cnt;\nint rt[N],Add[N],Mul[N];\nint h[N],fa[N],a[N],v[N];\nint fx[N],ex[N],d[N],ans[N];\nstruct pr{double val;int id;};\nstruct nd{int nxt,to;}e[N];\npriority_queue<pr> q[N];\n#define For(x) for(int y,i=head[x];(y=e[i].to);i=e[i].nxt)\n\nbool operator < (pr a,pr b){\n\treturn a.val>b.val;\n}\ninline void add(int x,int y){\n\te[++cnt]=(nd){head[x],y};head[x]=cnt;d[y]=d[x]+1;\n}\nint get(double x){\n\treturn x-(int)x<0.5 ? (int)x : (int)x+1;\n}\nint merge(int r1,int r2){\n\tif(q[r1].size()<q[r2].size()) swap(r1,r2);\n\twhile(q[r2].size()){\n\t\tint now=get(q[r2].top().val*Mul[r2]+Add[r2]);\n\t\tint ID=q[r2].top().id; q[r2].pop();\n\t\tq[r1].push((pr){(double)(now-Add[r1])/Mul[r1],ID});\n\t}\n\treturn r1;\n}\nvoid dfs(int x){\n\t\n\tFor(x) dfs(y),rt[x]=merge(rt[x],rt[y]);\n\twhile(q[rt[x]].size()){\n\t\tint now=get(q[rt[x]].top().val*Mul[rt[x]]+Add[rt[x]]),ID=q[rt[x]].top().id;\n\t\tif(now<h[x]) q[rt[x]].pop(),ex[ID]=x;\n\t\telse break;\n\t}\n\tif(!a[x]) Add[rt[x]]+=v[x];\n\telse Mul[rt[x]]*=v[x],Add[rt[x]]*=v[x];\n}\nsigned main(){\n\trd(n);rd(m);d[1]=1;\n\tfor(int i=1;i<=n;i++) \n\t\trd(h[i]),rt[i]=i,Mul[i]=1;\n\tfor(int i=2;i<=n;i++)\n\t\trd(fa[i]),rd(a[i]),rd(v[i]),add(fa[i],i);\n\tfor(int v,i=1;i<=m;i++)\n\t\trd(v),rd(fx[i]),q[fx[i]].push((pr){v,i});\n\tdfs(1);\n\tfor(int i=1;i<=m;i++)\n\t\tans[ex[i]]++;\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%lld\\n\",ans[i]);\n\tfor(int i=1;i<=m;i++)\n\t\tprintf(\"%lld\\n\",d[fx[i]]-d[ex[i]]);\n}\n```\n\n\u5982\u679c\u6b64\u7bc7\u9898\u89e3\u5e2e\u52a9\u5230\u4f60\u4e86\uff0c\u8bb0\u5f97\u70b9\u8d5e\u54e6\uff01\u2044(\u2044 \u2044\u2022\u2044\u03c9\u2044\u2022\u2044 \u2044)\u2044",
        "postTime": 1542253940,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[JLOI2015]\u57ce\u6c60\u653b\u5360\u2014\u2014\u542f\u53d1\u5f0f\u5408\u5e76"
    },
    {
        "content": "\u8003\u8651dfs\u540e\u4ece\u53f6\u5b50\u5f80\u6839\u9012\u63a8\u3002\u5bf9\u4e8e\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u65f6\uff0c\u9996\u5148\u8981\u628a\u4ece\u6240\u6709\u5b69\u5b50\u722c\u4e0a\u6765\u7684\u4e00\u5927\u5768\u58eb\u5175\u6574\u5408\u6210\u4e00\u5768\uff0c\u7136\u540e\u628a\u91cc\u9762\u5c0f\u4e8eh\u7684\u5168\u90e8\u6311\u51fa\u6765\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u8981\u7528\u53ef\u5e76\u5806\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5b69\u5b50\u722c\u4e0a\u6765\u7684\u58eb\u5175\u7684\u653b\u51fb\u529b\u6700\u5c0f\u503c\u3002\n\n\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u5efa\u4e00\u9897\u5de6\u504f\u6811\uff0c\u521d\u59cb\u65f6\u628a\u6240\u6709\u5728\u90a3\u91cc\u7684\u58eb\u5175\u585e\u8fdb\u53bb\uff0c\u6bcf\u6b21\u5904\u7406\u65f6\u4e00\u76f4pop\uff0c\u66f4\u65b0\u5728\u8fd9\u4e2a\u8282\u70b9\u6b7b\u6389\u7684\u58eb\u5175\u548c\u8fd9\u4e2a\u58eb\u5175\u722c\u7684\u5c42\u6570\uff0c\u76f4\u5230\u5806\u9876\u2265h\u3002\u66f4\u65b0\u8fd9\u4e9b\u58eb\u5175\u80fd\u529b\u503c\u65f6\uff0c\u5728\u6839\u8282\u70b9\u4e0a\u6253\u4e00\u4e2a\u4e58\u6cd5tag\u548c\u4e00\u4e2a\u52a0\u6cd5tag\u5c31\u884c\u4e86\u3002\u8bb0\u5f97pushdown\u7684\u65f6\u5019\u52a0\u6cd5tag\u4e5f\u8981\u4e58\u4e0a\u7236\u4eb2\u7684\u4e58\u6cd5tag\u3002\n\n\u590d\u6742\u5ea6\uff1a\u521d\u59cb\u63d2\u5165\u6240\u6709\u58eb\u5175\u4e3amlogm\u3002\u6bcf\u4e2a\u58eb\u5175\u6700\u591a\u88ab\u5e26\u4e0an\u5c42\uff0c\u4e3anm\u3002\u6bcf\u4e2a\u58eb\u5175\u53ea\u4f1a\u88ab\u5f39\u51fa\u4e00\u6b21\uff0cmlogm\u3002\u6240\u4ee5\u603b\u590d\u6742\u5ea6O(mn+mlogm)\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\ntypedef long long ll;\nconst int maxn=300005,maxe=300005;\nint lc[maxn],rc[maxn],dis[maxn],ans1[maxn],ans2[maxn],head[maxn],to[maxe],next[maxe],rt[maxn],dep[maxn],c[maxn],n,m,cnt,f,a,ch;\nll v[maxn],add[maxn],mul[maxn],h[maxn],val[maxn];\nbool Mul[maxn];\nvoid swap(int&a,int&b){int c=a;a=b,b=c;}\nvoid insert(int a,int b){to[cnt]=b,next[cnt]=head[a];head[a]=cnt++;}\nll read()\n{\n    ll x=0;int f=1;ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nvoid cov(int x,ll c,ll j)\n{\n    if(!x)return;\n    v[x]*=c,v[x]+=j;\n    mul[x]*=c;add[x]*=c;add[x]+=j;\n}\nvoid pushdown(int x)\n{\n    cov(lc[x],mul[x],add[x]);\n    cov(rc[x],mul[x],add[x]);\n    mul[x]=1;add[x]=0;\n}\nint merge(int a,int b)\n{\n    if(!a||!b)return a+b;\n    pushdown(a);pushdown(b);\n    if(v[a]>v[b])swap(a,b);\n    rc[a]=merge(rc[a],b);\n    if(dis[lc[a]]<dis[rc[a]])swap(lc[a],rc[a]);\n    dis[a]=dis[rc[a]]+1;\n    return a;\n}\nvoid dfs(int u,int fa)\n{\n    dep[u]=dep[fa]+1;\n    for(register int i=head[u],V=to[i];~i;V=to[i=next[i]])dfs(V,u),rt[u]=merge(rt[u],rt[V]);\n    while(rt[u]&&v[rt[u]]<h[u])\n    {\n        pushdown(rt[u]);\n        ++ans1[u];ans2[rt[u]]=dep[c[rt[u]]]-dep[u];\n        rt[u]=merge(lc[rt[u]],rc[rt[u]]);\n    }\n    if(Mul[u])cov(rt[u],val[u],0);\n    else cov(rt[u],1,val[u]);\n}\nint main()\n{\n    memset(head,-1,sizeof head);\n    dis[0]=-1;\n    n=read(),m=read();\n    for(register int i=1;i<=n;++i)h[i]=read();\n    for(register int i=2;i<=n;++i)\n    {\n        f=read(),a=read(),val[i]=read();\n        Mul[i]=a;insert(f,i);\n    }\n    for(register int i=1;i<=m;++i)\n    {\n        v[i]=read();c[i]=read();\n        mul[i]=1;\n        rt[c[i]]=merge(rt[c[i]],i);\n    }\n    dfs(1,0);\n    while(rt[1])pushdown(rt[1]),ans2[rt[1]]=dep[c[rt[1]]],rt[1]=merge(lc[rt[1]],rc[rt[1]]);\n    for(register int i=1;i<=n;++i)printf(\"%d\\n\",ans1[i]);\n    for(register int i=1;i<=m;++i)printf(\"%d\\n\",ans2[i]);\n    return 0;\n}\n\n```",
        "postTime": 1482654350,
        "uid": 13180,
        "name": "amazingOZR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u7adf\u7136\u6ca1\u6709\u500d\u589e\u7684\u9898\u89e3\uff0c\u90a3\u4e48\u6211\u6765\u53e3\u80e1\u4e00\u4efd\n\n\u9996\u5148\u53d1\u73b0\u4e58\u7684\u65f6\u5019 \u7cfb\u6570\u4e0d\u4f1a\u4e3a\u8d1f\uff0c\u6240\u4ee5\u80fd\u5f97\u5230\u4e00\u4e2a\u5173\u952e\u6761\u4ef6\uff1a\u53d8\u5316\u540e\u7684\u6218\u6597\u529b\u968f\u53d8\u5316\u524d\u7684\u6218\u6597\u529b\u5927\u5c0f\u5355\u8c03\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u500d\u589e\n\n\u8bbehp[x][i]\u662f\u4ecex\u5f00\u59cb\u4e00\u8def\u653b\u514b$2^i$\u4e2a\u57ce\u6c60\u6240\u9700\u8981\u6700\u5c0f\u7684\u521d\u59cb\u751f\u547d\u503c\n\n\u8bbetrans[x][i][0/1]\u662f\u653b\u514b\u4e86$2^i$\u4e2a\u57ce\u6c60\u540e\u653b\u51fb\u529b\u7684\u53d8\u5316\u91cf\uff0c0\u8868\u793a\u4e58\uff0c1\u8868\u793a\u52a0\uff0c\u5148\u4e58\u540e\u52a0\n\n\u6ce8\u610f\u4e58\u7684\u7cfb\u6570\u521d\u59cb\u5316\u62101\n\n~~\u7136\u540e\u5c31\u53ef\u4ee5\u500d\u589e\u4e86~~\n\n\u7136\u800c\u7a7a\u95f4\u5927\u5c0f\u6076\u610f\u5361\u500d\u589e\n\n\u4f46\u662f\u6211\u4eec\u8fd9\u4e2a\u500d\u589e\u53ef\u4ee5\u6362\u6210\u4e09\u8fdb\u5236\u76842333\n\n\u5c31\u662f\u628a\u5b9a\u4e49\u91cc\u7684$2^i$\u90fd\u6362\u6210$3^i$\n\n\u4e8e\u662f$log_3300000=10$\uff0c\u7a7a\u95f4\u5c31\u53d8\u6210\u4e86\u539f\u6765\u7684\u4e00\u534a\n\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6700\u540e\u5728\u8df3\u500d\u589e\u7684\u65f6\u5019\uff0c\u540c\u4e00\u4e2a\u957f\u5ea6\u53ef\u4ee5\u8df3\u4e24\u6b21\uff08\u56e0\u4e3a\u662f\u4e09\u8fdb\u5236\u561b\uff09\uff0c\u5faa\u73af\u7684\u65f6\u5019\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define pa pair<ll,ll>\n#define CLR(a,x) memset(a,x,sizeof(a))\n#define MP make_pair\nusing namespace std;\ntypedef long long ll;\nconst int maxn=3e5+5;\n\ninline char gc(){\n\treturn getchar();\n\tstatic const int maxs=1<<16;static char buf[maxs],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,maxs,stdin),p1==p2)?EOF:*p1++;\n}\ninline ll rd(){\n    ll x=0;char c=gc();bool neg=0;\n    while(c<'0'||c>'9'){if(c=='-') neg=1;c=gc();}\n    while(c>='0'&&c<='9') x=(x<<1)+(x<<3)+c-'0',c=gc();\n    return neg?(~x+1):x;\n}\n\nint N,M,fa[maxn][11];\nll hp[maxn][11],trans[maxn][11][2];\nint ans1[maxn],ans2[maxn];\nint pw3[11];\n\nint main(){\n    //freopen(\"\",\"r\",stdin);\n    int i,j,k;\n    pw3[0]=1;for(i=1;i<=10;i++) pw3[i]=pw3[i-1]*3;\n    N=rd(),M=rd();\n    for(i=1;i<=N;i++) hp[i][0]=rd();\n    fa[1][0]=N+1;\n    for(i=2;i<=N;i++){\n    \tfa[i][0]=rd();\n    \tll x=rd(),y=rd();\n    \ttrans[i][0][0]=1;\n    \ttrans[i][0][!x]=y;\n    \tfor(j=0;j<10;j++){\n    \t\tint f=fa[i][j],ff=fa[f][j];\n    \t\tif(!f||!ff||!fa[ff][j]) break;\n    \t\tfa[i][j+1]=fa[ff][j];\n    \t\tll hp1=max(hp[f][j],(ll)ceil(1.0*(hp[ff][j]-trans[f][j][1])/trans[f][j][0]));\n    \t\thp[i][j+1]=max(hp[i][j],(ll)ceil(1.0*(hp1-trans[i][j][1])/trans[i][j][0]));\n    \t\ttrans[i][j+1][1]=trans[i][j][1]*trans[f][j][0]+trans[f][j][1];\n    \t\ttrans[i][j+1][0]=trans[i][j][0]*trans[f][j][0];\n    \t\ttrans[i][j+1][1]=trans[i][j+1][1]*trans[ff][j][0]+trans[ff][j][1];\n    \t\ttrans[i][j+1][0]=trans[i][j+1][0]*trans[ff][j][0];\n    \t}\n    }\n    for(i=1;i<=M;i++){\n    \tll s=rd();int x=rd(),n=0;\n    \tfor(j=10;j>=0&&x!=-1;j--){\n    \t\tif(fa[x][j]&&hp[x][j]<=s){\n    \t\t\ts=s*trans[x][j][0]+trans[x][j][1];\n    \t\t\tx=fa[x][j];\n    \t\t\tn+=pw3[j];j++;\n    \t\t}\n    \t}\n    \tif(x!=-1) ans1[x]++;\n    \tans2[i]=n;\n    }\n    for(i=1;i<=N;i++)\n    \tprintf(\"%d\\n\",ans1[i]);\n    for(i=1;i<=M;i++)\n    \tprintf(\"%d\\n\",ans2[i]);\n    \n    return 0;\n}\n```",
        "postTime": 1543238329,
        "uid": 57266,
        "name": "__Ressed__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "$how ~to~ do~ it?$\n\n--------------\n\n#### \u4e00\u3001\u6bd4\u8f83$naive$\u7684\u60f3\u6cd5\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u4eba\u6a21\u62df\uff0c\u8fd9\u4e2a\u505a\u6cd5\u590d\u6742\u5ea6$O(nm)$\uff0c\u96be\u4ee5\u5229\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\n\n---------------------------\n\n#### \u6240\u4ee5\u6211\u4eec\u4e3a\u4f55\u4e0d\u8f6c\u53d8\u4e00\u4e0b\u601d\u8def\u5462\uff1f\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6811\u4e0a\u7684\u8282\u70b9\u8003\u8651\uff0c\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a\u9a91\u58eb\u73b0\u5728\u88ab\u5361\u5728\u5b83\u8fd9\u91cc\u3002\u4ee5\u53ca\u8fd9\u4e9b\u9a91\u58eb\u5230\u8fbe\u8fd9\u91cc\u65f6\u7684\u6743\u503c\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u9a91\u58eb\u4e0d\u80fd\u518d\u8d70\u8bf4\u660e\u5176\u6743\u503c\u5c0f\u4e8e\u6b64\u8282\u70b9\u7684$h$\u503c\uff0c\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e0b\u88ab\u5361\u5728\u5f53\u524d\u8282\u70b9\u7684\u9a91\u58eb\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u5179\u5a03\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u5982\u679c\u6700\u5c0f\u503c\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9$h$\u6211\u4eec\u5c31\u5c06\u5b83\u5f39\u51fa\u597d\u4e86\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u6bcf\u6b21\u5c06\u4e4b\u4e0e\u901a\u8fc7\u5176\u513f\u5b50\u7684\u9a91\u58eb\u96c6\u5408\u5e76\uff0c\u8fd9\u6837\u770b\u6765\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u5408\u5e76\u548c\u67e5\u8be2\u6700\u5c0f\u503c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u5e76\u5806-\u5de6\u504f\u6811\u597d\u4e86\u3002\n\n\uff08\u4e0a\u8ff0\u8fc7\u7a0b\u901a\u8fc7\u505a\u4e00\u904ddfs\u5b9e\u73b0\uff09\n\n\u7136\u800c\u8fd9\u9053\u6bd2\u7624\u7684\u9898\u76ee\u8fd8\u6709\u4fee\u6539\uff0c\u6bcf\u6b21\u90fd\u8981\u7ed9\u901a\u8fc7\u8fd9\u91cc\u7684\u6240\u6709\u9a91\u58eb\u7559\u4e0b\u4e00\u9053\u574e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u7ed9\u6574\u4e2a\u5806\u6253\u4e0a\u6807\u8bb0\u597d\u4e86\uff0c\u7ef4\u62a4\u4e00\u4e2a\u4e58\u6cd5\u6807\u8bb0\u548c\u52a0\u6cd5\u6807\u8bb0\u3002\n\n\u6ce8\u610f\u7279\u5224\u6807\u8bb0\u4e0b\u4f20\u7684\u987a\u5e8f\u548c\u901a\u8fc7\u4e00\u53f7\u70b9\u7684\u70b9\u96c6\n\n---------------------\n\n#### \u590d\u6742\u5ea6\u76f8\u5173\uff1f\n\n\u6ce8\u610f\u5230\u6bcf\u4e2a\u9a91\u58eb\u6700\u591a\u5f39\u5165\u548c\u5f39\u51fa\u4e00\u6b21\uff0c\u6240\u4ee5\u5f39\u51fa\u9a91\u58eb\u7684\u603b\u590d\u6742\u5ea6\u662f$O(m\\log m)$\n\n\u6bcf\u4e2a\u8282\u70b9\u4f1a\u88ab\u4e14\u4ec5\u88ab\u5176\u7236\u4eb2\u5408\u5e76\u4e00\u6b21\uff0c\u6240\u4ee5\u5408\u5e76\u7684\u603b\u590d\u6742\u5ea6$O(n \\log m)$\n\n\u590d\u6742\u5ea6$O((n+m)\\log m)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next ) \n#define re register\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\n#define int long long\nint read() {\n    char cc = getchar(); int cn = 0, flus = 1;\n    while(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n    while(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n    return cn * flus;\n}\nconst int N = 300000 + 5  ;\nstruct Tr {\n    int son[2], val, dis, fr, add, mul ;\n} t[N]; \nstruct E { \n    int to, next ; \n} e[N * 2]; \nint n, m, cnt ; \nint h[N], rt[N], a[N], v[N], head[N], s[N], dis[N], ans[N], num[N] ;\nvoid add( int x, int y ) {\n    e[++ cnt] = (E){ y, head[x] }, head[x] = cnt ; \n}\nvoid col( int x, int ad, int mu ) {\n\tif( !x ) return ; \n\tt[x].val *= mu, t[x].val += ad ; \n\tt[x].mul *= mu, t[x].add *= mu, t[x].add += ad ; \n}\nvoid pushup( int x ) {\n    col( ls(x), t[x].add, t[x].mul ) ;\n    col( rs(x), t[x].add, t[x].mul ) ; \n    t[x].add = 0, t[x].mul = 1 ; \n}\nint merge( int x, int y ) {\n    if( !x || !y ) return x + y ; \n    pushup(x), pushup(y) ; \n    if( t[x].val > t[y].val ) swap( x, y ) ; \n    rs(x) = merge( rs(x), y ) ; \n    if( t[rs(x)].dis > t[ls(x)].dis ) swap( ls(x), rs(x) ) ; \n    t[x].dis = t[rs(x)].dis + 1 ; return x ; \n} \nint Del( int x ) {\n    pushup(x); return merge( ls(x), rs(x) ) ; \n}\nvoid solve( int x ) {\n    while( t[rt[x]].val < h[x] && rt[x] ) {\n        ans[rt[x]] = dis[t[rt[x]].fr] - dis[x] ; \n        rt[x] = Del( rt[x] ), ++ num[x] ; \n    }\n}\nvoid input() {\n    n = read(), m = read() ; int x; t[0].dis = -1 ;\n    rep( i, 1, n ) h[i] = read() ; \n    rep( i, 2, n ) x = read(), add( x, i ), a[i] = read(), v[i] = read() ; \n    rep( i, 1, m ) t[i].val = read(), t[i].fr = x = read(), t[x].mul = 1, \n                   rt[x] = merge( rt[x], i ), t[i].dis = 1;\n}\nvoid dfs( int x, int f ) {\n    dis[x] = dis[f] + 1 ;\n    Next( i, x ) {\n        int v = e[i].to ;\n        dfs( v, x ), rt[x] = merge( rt[x], rt[v] ) ;\n    }\n    solve(x) ;\n    if( a[x] ) col( rt[x], 0, v[x] ) ;\n    else col( rt[x], v[x], 1 ) ; \n}\nvoid output() {\n\twhile( rt[1] ) ans[rt[1]] = dis[t[rt[1]].fr], rt[1] = Del( rt[1] );\n    rep( i, 1, n ) printf(\"%d\\n\", num[i] ) ;\n    rep( i, 1, n ) printf(\"%d\\n\", ans[i] ) ; \n}\nsigned main()\n{\n    input(), dfs( 1, 1 ), output() ;\n    return 0;\n}\n```",
        "postTime": 1563279387,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u5de6\u504f\u6811 + dfs + \u7ebf\u6bb5\u6811\u61d2\u6807\u7b7e\u601d\u60f3\n\n\u524d\u7f6e\u829d\u58eb\uff1a\u9700\u8981\u638c\u63e1\u7ebf\u6bb5\u6811\u540c\u65f6\u7ef4\u62a4\u52a0\u6cd5\u548c\u4e58\u6cd5\n\n\u6bcf\u4e2a\u57ce\u5e02\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5305\u62ec\u4e58\u6cd5\u4e0e\u52a0\u6cd5\u6807\u7b7e\uff0c\u548c\u9a91\u58eb\u5f53\u524d\u7684\u6218\u6597\u529b\n\n\u9996\u5148\uff0c\u5c06\u6bcf\u4e2a\u9a91\u58eb\u52a0\u5165\u5230\u4ed6\u7684\u8d77\u59cb\u57ce\u5e02\u6240\u5728\u7684\u5806\u4e2d  \n\u63a5\u7740\uff0cdfs \u904d\u5386\u6240\u6709\u57ce\u5e02  \n\u5bf9\u4e8e\u57ce\u5e02 $x$\uff0c\u5408\u5e76\u6240\u6709\u5728\u4ed6\u5b50\u6811\u4e2d\u7684\u5806\uff08\u5305\u62ec\u57ce\u5e02 $x$\uff09\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5408\u5e76\u540e\u7684\u5927\u5806\u6210\u4e3a \u201c\u57ce\u5e02 $x$ \u7684\u5806\u201d  \n\u7136\u540e\uff0c\u5c06\u6240\u6709\u653b\u9677\u4e0d\u4e86\u57ce\u5e02 $x$ \u7684\u9a91\u58eb\u5f39\u51fa\uff08$v(i)<h[i]$\uff09\u3002\u5f39\u51fa\u65f6\u8bb0\u5f55\u5728\u6bcf\u4e00\u4e2a\u57ce\u5e02\u727a\u7272\u7684\u9a91\u58eb\u7684\u4e2a\u6570\u548c\u6bcf\u4e2a\u9a91\u58eb\u653b\u9677\u7684\u57ce\u5e02\u4e2a\u6570\n\u6700\u540e\uff0c\u5c06\u5f53\u524d\u5806\u7684\u6839\u8282\u70b9\u6253\u4e0a\u76f8\u5e94\u5730 \u52a0\u6cd5\u6216\u4e58\u6cd5\u6807\u8bb0\uff0c\u5373\u5728\u653b\u9677\u57ce\u5e02 $x$ \u540e\u589e\u52a0\u7684\u6218\u6597\u529b\n\n\u5728\u9000\u51fa dfs \u540e\uff0c\u57ce\u5e02 $1$ \u7684\u5806\u4e2d\u6709\u53ef\u80fd\u4f1a\u5269\u4e0b\u4e00\u4e9b\u9a91\u58eb\uff0c\u4e5f\u5c31\u662f\u653b\u9677\u4e86\u57ce\u5e02 $1$ \u7684\u9a91\u58eb\u3002\u6211\u4eec\u4e5f\u9700\u8981\u628a\u4ed6\u4eec\u5f39\u51fa\u5806\uff0c\u5e76\u8bb0\u5f55\u7b54\u6848\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst long long Maxn=300000+10,inf=0x3f3f3f3f;\nstruct node{\n\tlong long ls,rs,fa,dis,val,add,mul;\n\t#define ls(x) g[x].ls // \u5de6\u53f3\u513f\u5b50\n\t#define rs(x) g[x].rs\n\t#define f(x) g[x].fa // \u7236\u4eb2\u63a5\u5730\u90a3\n\t#define dis(x) g[x].dis\n\t#define v(x) g[x].val // \u9a91\u58eb\u7684\u6218\u6597\u529b\n\t#define add(x) g[x].add // \u52a0\u6cd5\u4e0e\u4e58\u6cd5\u6807\u8bb0\n\t#define mul(x) g[x].mul\n}g[Maxn];\nbool flag[Maxn]; //cities\nlong long h[Maxn],val[Maxn],c[Maxn];\nlong long s[Maxn],id[Maxn],d[Maxn];\nlong long a[Maxn],cnt[Maxn],pos[Maxn];// knights\nlong long n,m;\nvector <long long> e[Maxn];\ninline long long read()\n{\n\tlong long s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\nvoid init()\n{\n\tfor(long long i=1;i<=m;++i)\n\tf(i)=i,v(i)=a[i],mul(i)=1;\n\tdis(0)=-1;\n}\ninline void upd_mul(long long x,long long v)// \u4e58\u6cd5\u66f4\u65b0\n{\n\tadd(x)*=v;\n\tmul(x)*=v;\n\tv(x)*=v;\n}\ninline void upd_add(long long x,long long v) // \u52a0\u6cd5\u66f4\u65b0\n{\n\tadd(x)+=v;\n\tv(x)+=v;\n}\ninline void push_down(long long x) // \u6807\u8bb0\u4e0b\u653e\uff0c\u4e0e\u7ebf\u6bb5\u6811\u7c7b\u4f3c\n{\n\tif(mul(x)!=1)\n\t{\n\t\tif(ls(x))upd_mul(ls(x),mul(x));\n\t\tif(rs(x))upd_mul(rs(x),mul(x));\n\t\tmul(x)=1;\n\t}\n\tif(add(x))\n\t{\n\t\tif(ls(x))upd_add(ls(x),add(x));\n\t\tif(rs(x))upd_add(rs(x),add(x));\n\t\tadd(x)=0;\n\t}\n}\nlong long merge(long long x,long long y) // \u5408\u5e76\u5806\n{\n\tif(!x || !y)return x|y;\n\tif(v(x)>v(y))swap(x,y);\n\tpush_down(x); \n\trs(x)=merge(rs(x),y);\n\tif(dis(ls(x))<dis(rs(x)))swap(ls(x),rs(x));\n\tpush_down(ls(x)),push_down(rs(x));\n\tif(!ls(x) || !rs(x))dis(x)=0;\n\telse dis(x)=dis(rs(x))+1;\n\tpush_down(x);\n\treturn x;\n}\nlong long del(long long x)// \u5220\u9664\u5806\u9876\u5143\u7d20\n{\n\tpush_down(x);\n\tlong long l=ls(x),r=rs(x);\n\tf(l)=l,f(r)=r;\n\tpush_down(l),push_down(r);\n\tdis(x)=ls(x)=rs(x)=0;\n\treturn merge(l,r);\n}\nvoid dfs(long long x,long long fa)\n{\n\td[x]=d[fa]+1;\n\tfor(long long i=0;i<e[x].size();++i)\n\t{\n\t\tlong long y=e[x][i];\n\t\tdfs(y,x);\n\t\tpush_down(id[x]),push_down(id[y]);\n\t\tid[x]=merge(id[x],id[y]);\n\t\ts[x]+=s[y];\n\t}\n\twhile(s[x] && v(id[x])<h[x])\n\t{\n\t\tpush_down(id[x]);\n\t\tcnt[id[x]]=d[pos[id[x]]]-d[x];\n\t\t++c[x],--s[x];\n\t\tid[x]=del(id[x]);\n\t}\n\tif(!flag[x])upd_add(id[x],val[x]);\n\telse upd_mul(id[x],val[x]);\n}\nint main()\n{\n//\tfreopen(\"in.txt\",\"r\",stdin);\n//\tfreopen(\"out.txt\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(long long i=1;i<=n;++i)\n\th[i]=read();\n\tfor(long long i=2;i<=n;++i)\n\t{\n\t\tlong long x=read();\n\t\tflag[i]=read(),val[i]=read();\n\t\te[x].push_back(i);\n\t}\n\tfor(long long i=1;i<=m;++i)\n\ta[i]=read(),pos[i]=read();\n\tinit();\n\t\n\tfor(long long i=1;i<=m;++i)\n\tid[pos[i]]=merge(id[pos[i]],i),++s[pos[i]];\n\tdfs(1,0);\n\t\n\twhile(s[1])\n\t{\n\t\tpush_down(id[1]);\n\t\tcnt[id[1]]=d[pos[id[1]]];\n\t\t--s[1];\n\t\tid[1]=del(id[1]);\n\t}\n\t\n\tfor(long long i=1;i<=n;++i)\n\tprintf(\"%lld\\n\",c[i]);\n\tfor(long long i=1;i<=m;++i)\n\tprintf(\"%lld\\n\",cnt[i]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1587011399,
        "uid": 120362,
        "name": "Priori_Incantatem",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u53d1\u73b0\u6ca1\u6709**\u6570\u7ec4\u914d\u5bf9\u5806**\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u6765\u8865\u4e00\u53d1\u6570\u7ec4\u914d\u5bf9\u5806\u3002\n\n------------\n\n### \u653e\u5728\u6700\u524d\u9762\n\u8fd9\u4e2a\u9898\u7684\u505a\u6cd5\u5176\u4ed6\u9898\u89e3\u90fd\u8be6\u7ec6\u8bb2\u4e86\uff0c\u663e\u7136\u7528\u4e00\u4e2a\u53ef\u5e76\u5806\u7ef4\u62a4\uff0c\u6253\u4e0a\u4e58\u6cd5 tag \u548c\u52a0\u6cd5 tag\uff0c\u6545\u672c\u9898\u89e3\u4e0d\u518d\u8d58\u8ff0\u505a\u6cd5\uff0c\u53ea\u63d0\u4f9b\u5176\u4ed6\u9898\u89e3\u6ca1\u6709\u7684\u53e6\u5916\u4e00\u79cd\u53ef\u5e76\u5806\u2014\u2014\u914d\u5bf9\u5806\u7684\u5199\u6cd5\uff0c\u5e76\u70b9\u51fa\u4e0e\u5de6\u504f\u6811\u5199\u6cd5\u7684\u4e0d\u540c\u70b9\u548c\u5751\uff0c\u4f9b\u53c2\u8003\uff08\u8c03\u4e86 10 \u4e2a\u5c0f\u65f6\u624d\u8c03\u51fa\u6765\uff09\u3002\n\n--------\n### \u6ce8\u610f\u70b9\u4e00\n\u8f93\u5165\u70b9\u65f6\u662f\u4ece $2$ **\u53f7\u7ed3\u70b9\u5f00\u59cb\u7684**\uff0c\u6240\u4ee5\u5faa\u73af\u5e94\u4ece $2$ \u5f00\u59cb\u3002\n\n------------\n\n### \u6ce8\u610f\u70b9\u4e8c\n  \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5728\u5806\u4e2d\u5b58\u7684\u5143\u7d20\u662f\u9a91\u58eb\uff08\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u7b54\u6848\uff0c\u6211\u4eec\u9664\u4e86\u5b58\u4e00\u4e2a $\\text{val}$ \u57df\u8868\u793a\u9a91\u58eb\u7684\u6218\u6597\u529b\uff0c\u518d\u989d\u5916\u5b58\u4e00\u4e2a $\\text{num}$ \u57df\u8868\u793a\u9a91\u58eb\u7684\u7f16\u53f7\uff09\uff0c\u521d\u59cb\u65f6\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6709\u9a91\u58eb\u5f00\u59cb\u7684\u8282\u70b9\u65b0\u5efa\u4e00\u4e2a\u5806\uff0c\u5728\u5bf9\u6811\u904d\u5386\u65f6\uff0c\u5806\u7ef4\u62a4\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u7684\u9a91\u58eb\u96c6\u3002\n\n\u6ce8\u610f\uff1a**\u5806\u7684\u7f16\u53f7\u4e0e\u8282\u70b9\u7684\u7f16\u53f7\u4e0d\u540c\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u53ef\u4ee5\u6df7\u6dc6\u4e8c\u8005\uff08\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff01\uff01\uff09**\u3002\n\n---------\n \n### \u6ce8\u610f\u70b9\u4e09\n\n\u56e0\u4e3a\u914d\u5bf9\u5806\u7ed3\u6784\u7684\u7279\u6b8a\u6027\uff0c\u5176\u5199\u6cd5\u4e0e\u5de6\u504f\u6811\u6700\u5927\u7684\u4e0d\u540c\u5728\u4e8e  $\\text{Pushdown}$  \u64cd\u4f5c\uff0c\u5728 $\\text{Pushdown}$ \u65f6\uff0c\u4e3a\u4e86\u5c06\u6807\u8bb0\u5168\u90e8\u4f20\u5230\u4e0b\u4e00\u5c42\uff0c\u6211\u4eec\u8981\u5bf9\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u8fdb\u884c\u904d\u5386\uff0c\u7528\u7c7b\u4f3c\u914d\u5bf9\u5806\u5220\u9664\u65f6\u5408\u5e76\u7684\u64cd\u4f5c\uff0c$O(\\log n)\\ $ \u7684\u8fdb\u884c\u4e0b\u4f20\uff0c\u5199\u6cd5\u5982\u4e0b\uff08**\u6ce8\u610f $\\text{while}$ \u4e2d\u662f $\\ \\text{y}$**\uff09\uff1a\n\n```\ninline void Pushdown(rint x){\n\trint y=t[x].ls;\n\twhile(y)\n\t{\n\t\tif(t[x].mul!=1){\n\t\t\tt[y].mul*=t[x].mul,t[y].add*=t[x].mul;\n\t\t\tt[y].val*=t[x].mul;\n\t\t}\n\t\tif(t[x].add){\n\t\t\tt[y].add+=t[x].add;\n\t\t\tt[y].val+=t[x].add;\n\t\t}\n\t\ty=t[y].bro;\n\t}\n\tt[x].mul=1;t[x].add=0;\n}\n```\n\n--------------\n\n### \u6ce8\u610f\u70b9\u56db\n\n\u5728\u4e0b\u4f20\u6807\u8bb0\u4e4b\u524d\uff0c**\u8981\u4fdd\u8bc1\u7236\u8282\u70b9\u7684\u7b54\u6848\u548c\u4e24\u4e2a\u6807\u8bb0\u90fd\u5df2\u7ecf\u88ab\u66f4\u65b0\u5b8c\u4e86**\uff0c\u5426\u5219\u5176\u513f\u5b50\u5c31\u66f4\u65b0\u4e86\u4e2a\u5bc2\u5bde\u3002\n\n------\n### \u6ce8\u610f\u70b9\u4e94\n\u5728 $\\text{dfs}$ \u7ed3\u675f\u540e\uff0c**\u4e0d\u8981\u5fd8\u4e86\u5904\u7406\u51fa\u6218\u80dc\u4e86 $1$ \u53f7\u7ed3\u70b9\uff08\u6839\uff09\u7684\u9a91\u58eb\u7684\u7b54\u6848**\u3002\n\n--------\n### \u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define awa 2147483647\n#define zhale exit(0)\n#define re register\n#define rint re int\n#define int long long\n#define SY system(\"pause\")\n\nusing namespace std;\n/*Shioiri Kukuri*/\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double qwq;\ntypedef pair<int,int> P;\ntypedef pair<ll,ll> llP;\n#define rll re ll\n#define rqwq re qwq\n\n/*Otho Ai*/\n\ntemplate<class T>\nvoid Swap(T &x,T &y)\n{\n\tT z=x;\n\tx=y;\n\ty=z;\n}\n\n//#define PairOP\n#ifdef PairOP\ntemplate<class T1,class T2>\ninline const pair<T1,T2> operator + (const pair<T1,T2> &p1,const pair<T1,T2> &p2){\n\treturn pair<T1,T2>(p1.first+p2.first,p1.second+p2.second);\n}\n\ntemplate<class T1,class T2>\ninline const pair<T1,T2> operator - (const pair<T1,T2> &p1,const pair<T1,T2> &p2){\n\treturn pair<T1,T2>(p1.first-p2.first,p1.second-p2.second);\n}\n#endif\n\n#define FastIO\n#ifdef FastIO\n\tchar buf[1<<21],*p1,*p2;\n\t#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\n\ntemplate<class T>\nT Read()\n{\n\tT x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(ch^'0');\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\n//int (*read)()=Read<int>;\nll (*readll)()=Read<ll>;\n#define read Read<int>\n\nconst int N=3e5+5;\nint n,m,tot,head[N],nxt[N<<1],ver[N<<1],fa[N];\nll h[N];\ninline void add(rint x,rint y)\n{\n\tver[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nclass Tag{\n\tpublic:\n\t\tint a;ll v;\n\t\tinline void In(){\n\t\t\ta=read(),v=readll();\n\t\t}\n}tg[N];\n\nclass Knight{\n\tpublic:\n\t\tint c;ll s;\n}k[N];\n\nclass PairingHeap{\n\tprivate:\n\t\tclass Node{\n\t\t\tpublic:\n\t\t\t\tll val,add,mul;\n\t\t\t\tint ls,bro,num;\n\t\t\t\tNode():ls(0),bro(0){}\n\t\t}t[N];\n\t\tint cnt;\n\t\tinline int New(rll x,rint i){\n\t\t\tt[++cnt].val=x;\n\t\t\tt[cnt].num=i;\n\t\t\treturn cnt;\n\t\t}\n\t\tinline void Pushdown(rint x){\n\t\t\trint y=t[x].ls;\n\t\t\twhile(y)\n\t\t\t{\n\t\t\t\tif(t[x].mul!=1){\n\t\t\t\t\tt[y].mul*=t[x].mul,t[y].add*=t[x].mul;\n\t\t\t\t\tt[y].val*=t[x].mul;\n\t\t\t\t}\n\t\t\t\tif(t[x].add){\n\t\t\t\t\tt[y].add+=t[x].add;\n\t\t\t\t\tt[y].val+=t[x].add;\n\t\t\t\t}\n\t\t\t\ty=t[y].bro;\n\t\t\t}\n\t\t\tt[x].mul=1;t[x].add=0;\n\t\t}\n\tpublic:\n\t\tPairingHeap():cnt(0){}\n\t\tinline void Update(rint x,re bool op,rll val){\n\t\t\tif(op) t[x].val*=val,t[x].mul*=val,t[x].add*=val;\n\t\t\telse t[x].val+=val,t[x].add+=val;\n\t\t}\n\t\tinline int Merge(rint x,rint y){\n\t\t\tif(!x||!y) return x|y;\n\t\t\tif(t[x].val>t[y].val) Swap(x,y);\n\t\t\tPushdown(x),Pushdown(y);\n\t\t\tt[y].bro=t[x].ls,t[x].ls=y;\n\t\t\treturn x;\n\t\t}\n\t\tinline int Del(rint x){\n\t\t\tif(!x||!t[x].bro) return x;\n\t\t\trint b1=t[x].bro,b2=t[b1].bro;\n\t\t\tt[x].bro=t[b1].bro=0;\n\t\t\treturn Merge(Merge(x,b1),Del(b2));\n\t\t}\n\t\tinline void Push(rint &rt,rll val,rint i){\n\t\t\trt=Merge(rt,New(val,i));\n\t\t}\n\t\tinline void Pop(rint &x){\n\t\t\tPushdown(x);\n\t\t\tx=Del(t[x].ls);\n\t\t}\n\t\tinline ll TopVal(rint x){\n\t\t\treturn t[x].val;\n\t\t}\n\t\tinline int TopNum(rint x){\n\t\t\treturn t[x].num;\n\t\t}\n}t;\nint Root[N],cnt,d[N];\nint win[N],die[N];\n\ninline void dfs(rint x,rint dep)\n{\n\tfor(rint i=head[x];i;i=nxt[i])\n\t{\n\t\trint y=ver[i];\n\t\tif(y==fa[x]) continue;\n\t\td[y]=d[x]+1,dfs(y,dep+1);\n\t\tRoot[x]=t.Merge(Root[x],Root[y]);\n\t}\n\twhile(233)\n\t{\n\t\trint val=t.TopVal(Root[x]),num=t.TopNum(Root[x]);\n\t\tif(!num) break;\n\t\tif(val<h[x]) die[x]++,win[num]=d[k[num].c]-dep,t.Pop(Root[x]);\n\t\telse break;\n\t}\n\tt.Update(Root[x],tg[x].a,tg[x].v);\n}\n\ninline int True()\n{\n//#define Freopen\n#ifdef Freopen\n\tfreopen(\".in\",\"r\",stdin);\n\tfreopen(\".out\",\"w\",stdout);\n#endif\n\n//#define Clock\n#ifdef Clock\n\trint STR=clock();\n#endif\n\n\tn=read(),m=read();\n\tfor(rint i=1;i<=n;++i)\n\th[i]=readll();\n\tfor(rint i=2,f;i<=n;++i)\n\tf=read(),add(f,i),tg[i].In(),fa[i]=f;\n\tfor(rint i=1;i<=m;++i)\n\t{\n\t\tk[i].s=readll(),k[i].c=read();\n\t\tt.Push(Root[k[i].c],k[i].s,i);\n\t}\n\tdfs(1,0);\n\twhile(233)\n\t{\n\t\trint val=t.TopVal(Root[1]),num=t.TopNum(Root[1]);\n\t\tif(!num) break;\n\t\twin[num]=d[k[num].c]+1,t.Pop(Root[1]);\n\t}\n\tfor(rint i=1;i<=n;++i) printf(\"%d\\n\",die[i]);\n\tfor(rint i=1;i<=m;++i) printf(\"%d\\n\",win[i]);\n\n#ifdef Clock\n\trint END=clock();\n\tprintf(\"Time:%dms\\n\",int((END-STR)/(qwq)CLOCKS_PER_SEC*1000));\n\tprintf(\"Time:%ds\\n\",int((END-STR)/(qwq)CLOCKS_PER_SEC));\n#endif\n\treturn (0-0);//q(0-0)p q(>-<)p\n}\n\nint Love=True();\n\nsigned main(){;}",
        "postTime": 1629269184,
        "uid": 105833,
        "name": "\u6a31\u6d1bCHANGE",
        "ccfLevel": 0,
        "title": "P3261\u9898\u89e3"
    },
    {
        "content": "### \u5de6\u504f\u6811\n\n\u9996\u5148\uff0c\u6bcf\u4e2a\u57ce\u6c60\u5efa\u4e00\u68f5\u5de6\u504f\u6811\uff0c\u628a\u8d77\u70b9\u5728\u8be5\u57ce\u6c60\u7684\u58eb\u5175\u5b58\u8fdb\u53bb\uff0c\u7ef4\u62a4\u58eb\u5175\u7684\u8840\u91cf\u7684\u5c0f\u6839\u5806\u3002\u7136\u540e\u4ece\u53f6\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u5408\u5e76\u3002\u6ce8\u610f\u6bcf\u4e2a\u5806\u7ef4\u62a4\u7684\u662f\u5728\u8fd9\u4e2a\u57ce\u6c60\u7684\u58eb\u5175\u7684\u5269\u4f59\u8840\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5148\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\u628a\u513f\u5b50\u5408\u5e76\u8fc7\u6765\uff0c\u518d\u628a\u4f1a\u5728\u8fd9\u4e2a\u57ce\u6c60\u6b7b\u7684\u58eb\u5175\u5f39\u51fa\u53bb\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e2a\u70b9\u9700\u8981\u505a\u7684\u5904\u7406\uff08\u5373\u6218\u6597\u529b\u53d8\u5316\u7cfb\u6570\uff09\u5f04\u5230\u61d2\u6807\u8bb0\u4e0a\u3002\n\n\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5806\u6709\u4e14\u4ec5\u6709\u6839\u7684\u503c\u80fd\u4fdd\u8bc1\u662f\u6b63\u786e\u7684\u5269\u4f59\u8840\u91cf\uff0c\u5176\u4ed6\u7684\u56e0\u4e3a\u61d2\u6807\u8bb0\u7684\u5b58\u5728\u53ef\u80fd\u8fd8\u6ca1\u66f4\u65b0\u3002\u4f46\u6211\u4eec\u6bcf\u6b21\u53ea\u7528\u5806\u9876\uff0c\u6240\u4ee5\u8db3\u591f\u4e86\uff0c\u8981\u662f\u60f3\u8981\u5f39\u51fa\u5806\u9876\u5c31\u7528\u61d2\u6807\u8bb0\u66f4\u65b0\u4e00\u4e0b\u513f\u5b50\u7684\u503c\u3002\n\n\u4ee3\u7801\u5c3d\u91cf\u7ed9\u4e86\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define in long long\nusing namespace std;\nconst int amou=3e5+90;\nin h[amou],multag[amou],addtag[amou],bl[amou],v[amou];//h\u8868\u793a\u57ce\u6c60\u7684\u6743\u503c\uff0cmultag\u548caddtag\u662f\u61d2\u6807\u8bb0\uff0cbl\u662f\u8840\u91cf\uff0c\u5373\u5de6\u504f\u6811\u91cc\u7684\u70b9\u6743\uff0cv\u4e3a\u6218\u6597\u529b\u53d8\u5316\u53c2\u6570\u91cc\u7684v\nint root[amou],dist[amou],l[amou],r[amou];//\u5de6\u504f\u6811\u6807\u914d\u53d8\u91cf\nint nxt[amou],cnt,ver[amou],head[amou];//\u5b58\u56fe\u53d8\u91cf\nint n,m,opt[amou],dep[amou],fa[amou],s[amou],death[amou],num[amou];//opt\u4e3a\u6218\u6597\u529b\u53d8\u5316\u53c2\u6570\u91cc\u7684a\uff0cdep\u662f\u57ce\u6c60\u5728\u6811\u4e2d\u7684\u6df1\u5ea6\uff08\u662f\u57ce\u6c60\u7ec4\u6210\u7684\u539f\u6811\uff09\uff0cs\u662f\u6218\u58eb\u7684\u8d77\u70b9\u800c\u5df2\u53ea\u7528\u4e86\u4e00\u6b21\uff0cdeath\u662f\u5728\u67d0\u57ce\u6c60\u6b7b\u53bb\u7684\u4eba\u6570\uff0cnum\u662f\u67d0\u58eb\u5175\u653b\u7565\u7684\u57ce\u6c60\u6570\n\nvoid pushdown(int i){\n\tin mul=multag[i],ad=addtag[i];\n\tif(l[i])\n\t{\n\t\tmultag[l[i]]*=mul,addtag[l[i]]*=mul,addtag[l[i]]+=ad;\n\t\tbl[l[i]]=bl[l[i]]*mul+ad;\n\t}\n\tif(r[i])\n\t{\n\t\tmultag[r[i]]*=mul,addtag[r[i]]*=mul,addtag[r[i]]+=ad;\n\t\tbl[r[i]]=bl[r[i]]*mul+ad;\n\t}\n\tmultag[i]=1,addtag[i]=0;\n}\n\nint merg(int a,int b){\n\tif(!a||!b) return a+b;\n\tpushdown(a);pushdown(b);//\u56e0\u4e3a\u7528\u5230\u4e86\u5de6\u53f3\u513f\u5b50\u6240\u4ee5\u9700\u8981\u66f4\u65b0\u4e3a\u771f\u6b63\u7684\u503c\n\tif(bl[a]>bl[b]) swap(a,b);\n\tr[a]=merg(r[a],b);\n\tif(dist[l[a]]<dist[r[a]]) swap(l[a],r[a]);\n\tdist[a]=dist[r[a]]+1;\n\treturn a;\n}\n\nvoid add(int a,int b){\n\tnxt[++cnt]=head[a],head[a]=cnt,ver[cnt]=b;\n}\n\nvoid dfs(int i){\n\tdep[i]=dep[fa[i]]+1;\n\tfor(int io=head[i];io;io=nxt[io])\n\t{\n\t\tint v=ver[io];\n\t\tdfs(v);\n\t\troot[i]=merg(root[i],root[v]);//\u5148\u5168\u90e8\u5408\u5e76\n\t}\n\twhile(bl[root[i]]<h[i]&&root[i])//\u5f39\u51fa\u4f1a\u5728\u8fd9\u6b7b\u53bb\u7684\u58eb\u5175\n\t{\n\t\tpushdown(root[i]);\n\t\tdeath[i]++;\n\t\tnum[root[i]]=dep[s[root[i]]]-dep[i];\n\t\troot[i]=merg(l[root[i]],r[root[i]]);\n\t}\n\tif(opt[i])\n\t{\n\t\tmultag[root[i]]*=v[i];\n\t\taddtag[root[i]]*=v[i];\n\t\tbl[root[i]]*=v[i];\n\t}\n\telse\n\t{\n\t\taddtag[root[i]]+=v[i];\n\t\tbl[root[i]]+=v[i];\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&h[i]);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%lld\",&fa[i],&opt[i],&v[i]);\n\t\tadd(fa[i],i);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%d\",&bl[i],&s[i]);\n\t\troot[s[i]]=merg(root[s[i]],i);\n\t\tmultag[i]=1;\n\t}\n\tdfs(1);\n\twhile(root[1])//\u6709\u53ef\u80fd\u6709\u5230\u4e861\u53f7\u8fd8\u6ca1\u6b7b\u7684\u58eb\u5175\uff0c\u6240\u4ee5\u9700\u8981\u7ee7\u7eed\u5904\u7406\n\t{\n\t\tpushdown(root[1]);\n\t\tnum[root[1]]=dep[s[root[1]]];\n\t\troot[1]=merg(l[root[1]],r[root[1]]);\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%lld\\n\",death[i]);\n\tfor(int i=1;i<=m;i++) printf(\"%lld\\n\",num[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1616914142,
        "uid": 280519,
        "name": "Yaha",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3261\u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "## \u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011\n\n### \u3010[\u9898\u610f](https://www.luogu.com.cn/problem/P3261)\u3011\n\n\u6709$m$\u4e2a\u9a91\u58eb\u8981\u53bb\u5206\u522b\u653b\u6253$n$\u4e2a\u57ce\u6c60\uff0c\u8c01\u7684\u653b\u51fb\u529b\uff08\u6216\u9632\u5fa1\u529b\uff09\u5927\u5c31\u83b7\u80dc\uff0c\u5982\u679c\u9a91\u58eb\u8d62\u4e86\uff0c\u4ed6\u7684\u653b\u51fb\u529b\u5c31\u4f1a\uff08\u6309\u9898\u9762\uff09\u53d8\u5316\uff0c\u5e76\u4e14\u653b\u6253\u4e0b\u4e00\u4e2a\u57ce\u6c60\u3002\u95ee\u6bcf\u4e2a\u57ce\u6c60\u80fd\u5f04\u6b7b\u51e0\u4e2a\u9a91\u58eb\uff0c\u6bcf\u4e2a\u9a91\u58eb\u80fd\u6253\u4e0b\u51e0\u4e2a\u57ce\u6c60\uff1f\n\n### \u3010\u5206\u6790\u3011\n\n\u9996\u5148\u66b4\u529b\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u9a91\u58eb\u6211\u4eec\u4ece\u4e0b\u5f80\u4e0a\u63a8\uff0c\u662f $O(nm)$ \u7684\uff0c\u663e\u7136\u7206\u70b8\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u57ce\u6c60\uff0c\u53ea\u8981\u9a91\u58eb\u7684\u653b\u51fb\u529b\u5c0f\u4e8e\u8fd9\u4e2a\u57ce\u6c60\u7684\u9632\u5fa1\u529b\uff0c\u5c31\u90fd\u4f1a\u88ab\u79d2\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7edf\u8ba1\uff1a\u5728\u8fd9\u4e2a\u57ce\u6c60\u4e2d\u6709\u591a\u5c11\u9a91\u58eb\u7684\u653b\u51fb\u529b\u5c0f\u4e8e\u57ce\u6c60\u7684\u9632\u5fa1\u529b\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u57ce\u6c60\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53bb\u5806\u9876\uff0c\u5982\u679c\u5c0f\u4e8e\u5c31 pop \u6389\uff0c\u5426\u5219\u8df3\u51fa\u3002\u4f46\u662f\uff0c\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u5c0f\u6839\u5806\u8981\u4e0e\u513f\u5b50\u8282\u70b9\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981**\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09**\u6765\u5b9e\u73b0\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8fd8\u8981\u4fee\u6539\u6bcf\u4e00\u4e2a\u9a91\u58eb\u7684\u653b\u51fb\u529b\u3002\u5bf9\u4e8e\u8fd9\u79cd\u6279\u91cf\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6253\u4e0a\u61d2\u6807\u8bb0\uff0c\u518d\u4e0b\u63a8\u5373\u53ef\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u7edf\u8ba1\u7b54\u6848\u3002\u5bf9\u4e8e \u201c\u6bcf\u4e2a\u57ce\u6c60\u80fd\u5f04\u6b7b\u51e0\u4e2a\u9a91\u58eb\u201d \u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u8981\u5728\u6bcf\u6b21 pop \u65f6\uff0c\u628a\u7b54\u6848$+1$\u5373\u53ef\u3002\u5bf9\u4e8e \u201c\u6bcf\u4e2a\u9a91\u58eb\u80fd\u6253\u4e0b\u51e0\u4e2a\u57ce\u6c60\u201d\uff0c\u6211\u4eec\u53ea\u9700\u8bb0\u5f55\u4ed6\u51fa\u53d1\u57ce\u6c60\u7684\u6df1\u5ea6\u548c\u7ed3\u675f\u57ce\u6c60\u7684\u6df1\u5ea6\uff0c\u518d\u8fdb\u884c\u76f8\u51cf\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\uff1a\n\n```cpp\n/*\nluogu P3261\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n\nint n,m,a[300005],v[300005],defend[300005],c[300005];\nint ans1[300005],ans2[300005];\nint ee,h[300005],nex[300005<<1],to[300005<<1];\nint root[300005],dep[300005];\nstruct leftree{\n\tint l,r;\n\tint v,dis;\n\tint laz1,laz2;\n}t[300005];\n\nvoid addedge(int x,int y)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\th[x] = ee;\n}\n\nvoid pushdown(int x)\n{\n\tif(t[x].l)\n\t{\n\t\tt[t[x].l].v = t[t[x].l].v*t[x].laz1+t[x].laz2;\n\t\tt[t[x].l].laz1 *= t[x].laz1;\n\t\tt[t[x].l].laz2 = t[t[x].l].laz2*t[x].laz1+t[x].laz2;\n\t}\n\tif(t[x].r)\n\t{\n\t\tt[t[x].r].v = t[t[x].r].v*t[x].laz1+t[x].laz2;\n\t\tt[t[x].r].laz1 *= t[x].laz1;\n\t\tt[t[x].r].laz2 = t[t[x].r].laz2*t[x].laz1+t[x].laz2;\n\t}\n\tt[x].laz1 = 1, t[x].laz2 = 0;\n}\n\nint merge(int x,int y)\n{\n\tif(!x || !y)\n\t\treturn x+y;\n\tpushdown(x), pushdown(y);\n\tif(t[x].v>t[y].v)\n\t\tswap(x,y);\n\tt[x].r = merge(t[x].r,y);\n\tif(t[t[x].l].dis<t[t[x].r].dis)\n\t\tswap(t[x].l,t[x].r);\n\tt[x].dis = t[t[x].r].dis+1;\n\treturn x;\n}\n\nvoid dfs(int x,int pre)\n{\n\tdep[x] = dep[pre]+1;\n\tfor(int i=h[x];i;i=nex[i])\n\t{\n\t\tdfs(to[i],x);\n\t\troot[x] = merge(root[x],root[to[i]]);\n\t}\n\twhile(root[x] && t[root[x]].v<defend[x])\n\t{\n\t\tpushdown(root[x]);\n\t\tans1[x]++;\n\t\tans2[root[x]] = dep[c[root[x]]]-dep[x];\n\t\troot[x] = merge(t[root[x]].l,t[root[x]].r);\n\t}\n\tif(a[x]==1)\n\t{\n\t\tt[root[x]].v *= v[x];\n\t\tt[root[x]].laz1 *= v[x];\n\t\tt[root[x]].laz2 *= v[x];\n\t}\n\telse if(a[x]==0)\n\t{\n\t\tt[root[x]].v += v[x];\n\t\tt[root[x]].laz2 += v[x];\n\t}\n}\n\nsigned main()\n{\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(int i=1;i<=n;scanf(\"%lld\",&defend[i]),i++);\n\tfor(int i=2,fa;i<=n&&scanf(\"%lld %lld %lld\",&fa,&a[i],&v[i]);i++)\n\t\taddedge(fa,i);\n\tfor(int i=1;i<=m;t[i].laz1=1,i++);\n\tfor(int i=1;i<=m&&scanf(\"%lld %lld\",&t[i].v,&c[i]);i++)\n\t\troot[c[i]] = merge(root[c[i]],i);\n\tdfs(1,0);\n\twhile(root[1])\n\t{\n\t\tpushdown(root[1]);\n\t\tans2[root[1]] = dep[c[root[1]]];\n\t\troot[1] = merge(t[root[1]].l,t[root[1]].r);\n\t}\n\tfor(int i=1;i<=n;printf(\"%lld\\n\",ans1[i]),i++);\n\tfor(int i=1;i<=m;printf(\"%lld\\n\",ans2[i]),i++);\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff01",
        "postTime": 1582266018,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u601d\u8def\u548c\u697c\u4e0a\u7684\u54e5\u4eec\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\n\n\u6211\u4eec\u53d1\u73b0\u6811\u662f\u56fa\u5b9a\u7684\uff0c\u8def\u7ebf\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u4e00\u5f00\u59cb\u5c31\u5f00n\u9897bst\uff0c\u4ece\u53f6\u8282\u70b9\u5f00\u59cb\u5220\u70b9\uff0c\u5220\u5b8c\u7684\u5c31\u548c\u7236\u4eb2\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bcf\u4e2a\u6700\u591a\u5408\u5e76logn\u6b21\uff0c\u6bcf\u6b21\u5408\u5e76logn\u65f6\u95f4\uff0c\u6240\u4ee5\u4e00\u5171\u662fnlogn^2\u7684\u590d\u6742\u5ea6\u3002\n\n\u53e6\u5916\u4e00\u5f00\u59cb\u5199\u7684\u662fsbt\uff0c\u4f46\u662f\u53ea\u80fd\u8fc71e5\uff0c\u6211\u5bf9splay\u590d\u6742\u5ea6\u4e00\u76f4\u4e0d\u89e3\uff0c\u8fd9\u9053\u9898sbt\u7684\u5199\u6cd5\u7684tle\u66f4\u4f7f\u6211\u8ff7\u60d1\uff0c\u865a\u5fc3\u6c42\u6559\u5927\u4f6c\u8bb2\u89e3\u3002\n\n\u800c\u4e14sbt\u7684\u5199\u6cd5\u5982\u679c\u5728\u542f\u53d1\u5f0f\u5408\u5e76\u8fc7\u7a0b\u4e2dsplay\u63d2\u5165\u7684\u70b9\u5230\u63d2\u5165\u7684\u6811\u7684\u6839\u8282\u70b9\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u603b\u4f53\u4e0a\u5347\uff08\u5c11\u90e8\u5206\u6570\u636e\u66f4\u5feb\uff09\n\n\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u7684\u6574\u4f53\u6846\u67b6\u76f8\u540c\uff0c\u53ea\u6709\u65cb\u8f6c\u4e0d\u540c\u3002\n\n\u7b2c\u4e00\u5757\u4ee3\u7801\u662fbst\u7684\u6ee1\u5206\u4ee3\u7801\uff0c\u7b2c\u4e8c\u5757\u662fstb\u768460\u5206\u4ee3\u7801\n```c\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#define LL long long\nusing namespace std;\nconst int maxn=3e5+7;\nqueue<int>q;stack<int>qq;\nint n,m,id[maxn*4],rudu[maxn],fa[maxn*4],rt[maxn],son[maxn*4]\n,t[maxn*4][2],cnt=0,die[maxn],peo[maxn],li[maxn*4],laz[maxn*4]\n,pos[maxn*4];\nLL h[maxn],fi[maxn],ai[maxn],vi[maxn],w[maxn*4],\nadd[maxn*4],mul[maxn*4];\ninline LL read()\n{\n    LL x=0,w=1;char ch=' ';\n    while(ch>'9'||ch<'0')\n    {\n        if(ch=='-') w=-1;ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n    }\n    return x*w;\n}\nvoid downit(int x)\n{\n    int l=t[x][0],r=t[x][1];\n    if(mul[x]==1&&!add[x]&&!laz[x]) return ;\n    if(mul[x]!=1)\n    {\n        if(l) {mul[l]*=mul[x];add[l]*=mul[x];w[l]*=mul[x];}\n        if(r) {mul[r]*=mul[x];add[r]*=mul[x];w[r]*=mul[x];}\n        mul[x]=1;\n    }\n    if(l) {add[l]+=add[x];w[l]+=add[x];laz[l]+=laz[x];li[l]+=laz[x];}\n    if(r) {add[r]+=add[x];w[r]+=add[x];laz[r]+=laz[x];li[r]+=laz[x];}\n    add[x]=0;laz[x]=0;\n}\nvoid up(int x)\n{\n    son[x]=son[t[x][0]]+son[t[x][1]]+1;\n}\nvoid rotate(int &x,int r)\n{\n    int k=t[x][r];\n    t[x][r]=t[k][r^1];t[k][r^1]=x;up(x);up(k);x=k;\n}\nvoid Insert(int &x,LL v,int ID,int gou)\n{\n    if(!x)\n    {\n        x=++cnt;w[x]=v;id[x]=ID;son[x]=1;\n        mul[x]=1;li[x]=gou;pos[x]=rand();return ;\n    }\n    downit(x);\n    if(v<=w[x]) \n    {\n        Insert(t[x][0],v,ID,gou);\n        if(pos[x]<pos[t[x][0]]) rotate(x,0);\n    }\n    else \n    {\n        Insert(t[x][1],v,ID,gou);\n        if(pos[x]<pos[t[x][1]]) rotate(x,1);\n    }\n    up(x);\n}\nvoid cd(int x)\n{\n    if(!x) return ;\n    rudu[x]--;\n    if(!rudu[x]) q.push(x);\n}\nvoid add_tree(int x,int y)\n{\n    if(!x) return ;downit(x);\n    Insert(rt[y],w[x],id[x],li[x]);\n    if(t[x][0]) add_tree(t[x][0],y);\n    if(t[x][1]) add_tree(t[x][1],y);\n}\nvoid merge(int x,int z)\n{\n    int gen=z;\n    if(son[rt[x]]>son[rt[z]]) swap(x,z);\n    add_tree(rt[x],z);\n    rt[gen]=rt[z];\n}\nint del(int &x,LL v)\n{\n    if(!x) return 0;int ans=0;downit(x);\n    if(w[x]>=v) \n    {\n        ans=del(t[x][0],v);up(x);return ans;\n    }\n    else \n    {\n        ans+=del(t[x][0],v);\n        peo[id[x]]=li[x];\n        ans+=del(t[x][1],v);\n        if(t[x][1]) {fa[t[x][1]]=fa[x];x=t[x][1];}\n        else x=0;\n        return ans+1;\n    }\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;++i) h[i]=read();\n    for(int i=2;i<=n;++i)\n    {\n        fi[i]=read();ai[i]=read();vi[i]=read();rudu[fi[i]]++;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int x=read(),y=read();Insert(rt[y],x,i,0);\n    }\n    for(int i=1;i<=n;++i)\n    if(!rudu[i]) q.push(i);\n    while(q.size())\n    {\t\n        int x=q.front();q.pop();\n        int z=fi[x];if(z) cd(z);\n        die[x]=del(rt[x],h[x]);\n        int y=rt[x];if(!y) continue;\n        if(!ai[x]) {w[y]+=vi[x];add[y]+=vi[x];}\n        else {w[y]*=vi[x];mul[y]*=vi[x];add[y]*=vi[x];}\n        laz[y]+=1;li[y]+=1;\n        if(z) merge(x,z);\n    }\n    del(rt[1],(LL)1e18+3);\n    for(int i=1;i<=n;++i) printf(\"%d\\n\",die[i]);\n    for(int i=1;i<=m;++i) printf(\"%d\\n\",peo[i]);\n    return 0; \n}\n```\n\n\u7b2c\u4e8c\u5757\u4ee3\u7801\uff0csbt\uff0c60\u5206\n```\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#define LL long long\nusing namespace std;\nconst int maxn=3e5+7;\nqueue<int>q;stack<int>qq;\nint n,m,id[maxn*4],rudu[maxn],fa[maxn*4],rt[maxn],son[maxn*4]\n,t[maxn*4][2],cnt=0,die[maxn],peo[maxn],li[maxn*4],laz[maxn*4];\nLL h[maxn],fi[maxn],ai[maxn],vi[maxn],w[maxn*4],\nadd[maxn*4],mul[maxn*4];\ninline LL read()\n{\n    LL x=0,w=1;char ch=' ';\n    while(ch>'9'||ch<'0')\n    {\n        if(ch=='-') w=-1;ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n    }\n    return x*w;\n}\nvoid downit(int x)\n{\n    int l=t[x][0],r=t[x][1];\n    if(mul[x]==1&&!add[x]&&!laz[x]) return ;\n    if(mul[x]!=1)\n    {\n        if(l) {mul[l]*=mul[x];add[l]*=mul[x];w[l]*=mul[x];}\n        if(r) {mul[r]*=mul[x];add[r]*=mul[x];w[r]*=mul[x];}\n        mul[x]=1;\n    }\n    if(l) {add[l]+=add[x];w[l]+=add[x];laz[l]+=laz[x];li[l]+=laz[x];}\n    if(r) {add[r]+=add[x];w[r]+=add[x];laz[r]+=laz[x];li[r]+=laz[x];}\n    add[x]=0;laz[x]=0;\n}\nvoid up(int x)\n{\n    son[x]=son[t[x][0]]+son[t[x][1]]+1;\n}\nvoid Insert(int &x,LL v,int ID,int gou)\n{\n    if(!x)\n    {\n        x=++cnt;w[x]=v;id[x]=ID;son[x]=1;\n        mul[x]=1;li[x]=gou;return ;\n    }\n    downit(x);\n    if(v<=w[x]) Insert(t[x][0],v,ID,gou);\n    else Insert(t[x][1],v,ID,gou);\n    up(x);fa[t[x][1]]=fa[t[x][0]]=x;\n}\nvoid rotate(int x,int &k)\n{\n    int y=fa[x],z=fa[y],d=t[y][1]==x;\n    if(y==k) k=x;\n    else t[z][t[z][1]==y]=x;\n    fa[t[x][d^1]]=y;t[y][d]=t[x][d^1];fa[x]=z;\n    fa[y]=x;t[x][d^1]=y;up(y);up(x);\n}\nvoid splay(int x,int &k)\n{\n    while(x!=k)\n    {\n        int y=fa[x],z=fa[y];\n        if(y!=k)\n        {\n            if((t[z][0]==y)^(t[y][0]==x)) rotate(x,k);\n            else rotate(y,k);\n        }\n        rotate(x,k);\n    }\n}\nvoid cd(int x)\n{\n    if(!x) return ;\n    rudu[x]--;\n    if(!rudu[x]) q.push(x);\n}\nvoid add_tree(int x,int y)\n{\n    if(!x) return ;downit(x);\n    Insert(rt[y],w[x],id[x],li[x]);\n    if(t[x][0]) add_tree(t[x][0],y);\n    if(t[x][1]) add_tree(t[x][1],y);\n}\nvoid merge(int x,int z)\n{\n    int gen=z;\n    if(son[rt[x]]>son[rt[z]]) swap(x,z);\n    add_tree(rt[x],z);\n    rt[gen]=rt[z];\n}\nint del(int &x,LL v)\n{\n    if(!x) return 0;int ans=0;downit(x);\n    if(w[x]>=v) \n    {\n        ans=del(t[x][0],v);up(x);return ans;\n    }\n    else \n    {\n        ans+=del(t[x][0],v);\n        peo[id[x]]=li[x];\n        ans+=del(t[x][1],v);\n        if(t[x][1]) {fa[t[x][1]]=fa[x];x=t[x][1];}\n        else x=0;\n        return ans+1;\n    }\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;++i) h[i]=read();\n    for(int i=2;i<=n;++i)\n    {\n        fi[i]=read();ai[i]=read();vi[i]=read();rudu[fi[i]]++;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int x=read(),y=read();\n        Insert(rt[y],x,i,0);splay(cnt,rt[y]);\n    }\n    for(int i=1;i<=n;++i)\n    if(!rudu[i]) q.push(i);\n    while(q.size())\n    {\t\n        int x=q.front();q.pop();\n        int z=fi[x];if(z) cd(z);\n        die[x]=del(rt[x],h[x]);\n        int y=rt[x];if(!y) continue;\n        if(!ai[x]) {w[y]+=vi[x];add[y]+=vi[x];}\n        else {w[y]*=vi[x];mul[y]*=vi[x];add[y]*=vi[x];}\n        laz[y]+=1;li[y]+=1;\n        if(z) merge(x,z);\n    }\n    del(rt[1],(LL)1e18+3);\n    for(int i=1;i<=n;++i) printf(\"%d\\n\",die[i]);\n    for(int i=1;i<=m;++i) printf(\"%d\\n\",peo[i]);\n    return 0; \n}\n```\n\n\n\n",
        "postTime": 1522311876,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u770b\u5f97\u51fa\u6765\u2026\u2026\u9898\u76ee\u5c31\u662f\u8981\u8ba9\u6211\u4eec\u6279\u91cf\u5feb\u901f\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u9a91\u58eb\u6700\u591a\u80fd\u6740\u5230\u54ea\n\n\u8bbe\u9a91\u58eb\u7684\u6218\u6597\u529b\u4e3a $x$\uff0c\u9a91\u58eb\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u7ed3\u70b9\u540e\u6218\u6597\u529b $y=kx+b$ \u662f\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u56e0\u4e3a\u8981\u6ee1\u8db3\u6bcf\u4e00\u523b\u7684\u6218\u6597\u529b\u90fd\u8981\u5927\u4e8e\u57ce\u6c60\u7684\u751f\u547d\u503c\uff0c\u6240\u4ee5\u8fd8\u8981\u6ee1\u8db3 $x\\geq p$\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4e00\u6b21\u51fd\u6570\u4ee5\u53ca $p$\uff0c\u800c\u8fd9\u73a9\u610f\u662f\u6709\u533a\u95f4\u53ef\u52a0\u6027\u7684\n \n\u9759\u6001\u5728\u7ebf\u7acb\u9a6c\u60f3\u5230\u500d\u589e\uff0c\u53ef\u662f\u5185\u5b58\u9650\u5236\u4e86\u6211\u4eec\u7684\u60f3\u8c61\uff08\u7a7a\u95f4 $O(n\\log n)$ \u4f1a\u70b8\uff09\n\n\u628a\u500d\u589e\u6539\u6210\u6811\u5256\u4e5f\u4e0d\u884c\uff0c\u56e0\u4e3a\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u4e8c\u5206\u9700\u8981\u5feb\u901f\u8ba1\u7b97\u51fa\u4e24\u70b9\u95f4\u7684\u4e00\u6b21\u51fd\u6570\u4e0e $p$\uff0c\u7528\u7ebf\u6bb5\u6811 $O(m \\log^2 n)$\uff08\u5b9e\u9645\u4e0a\u5361\u5f97\u8fc7\u4e86\uff09\uff0c\u7528 $O(1)$ \u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff08\u5982\u732b\u6811\uff09\u7a7a\u95f4\u8ddf\u500d\u589e\u4e00\u6837\u4f1a\u6302\n\n\u7531\u4e8e\u6211\u5de6\u504f\u6811\u8001\u662f\u5199\u6302\uff0c\u611f\u89c9\u4e09\u8fdb\u5236\u7684\u500d\u589e\u53c8\u6709\u4e9b\u6295\u673a\u53d6\u5de7\uff0c\u4e8e\u662f\u6211\u7528\u6811\u5206\u5757\u7ed9\u6c34\u8fc7\u4e86 qwq ~~\u4f60\u8fd9\u4e0d\u662f\u66f4\u6295\u673a\u53d6\u5de7~~\n\n\u9009\u53d6\u4e00\u4e2a\u5757\u957f $S$\uff0c\u5f53\u7ed3\u70b9\u7684\u6df1\u5ea6 $d$ \u4e3a $S$ \u6574\u6570\u500d\u65f6\u5212\u5206\u4e00\u4e0b\uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u8981\u8df3\u5230\u5934\u9876\u4e0a\u7b2c\u4e00\u4e2a\u5212\u5206\u4f4d\u65f6\u7684\u4e00\u6b21\u51fd\u6570\u4e0e $p$\uff0c\u80fd\u8df3\u6574\u5757\u8df3\u6574\u5757\uff0c\u4e0d\u80fd\u8df3\u6574\u5757\u5c31\u4e00\u6b65\u6b65\u66b4\u8df3\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u7b97\u4e0b\u6765\u662f\n\n$$ O(mS+\\sum_{i=1}^m \\frac{d_i}{S}) $$\n\n\u8bbe $ x=mS+\\sum_{i=1}^m \\frac{d_i}{S} $\uff0c\u5219\n\n$$ mS^2-xS+\\sum_{i=1}^m d_i=0 $$\n\n\u8fd9\u4e2a\u5173\u4e8e $S$ \u7684\u4e8c\u6b21\u51fd\u6570\n\n$$ \\triangle=x^2-4m\\sum_{i=1}^m d_i $$\n\n$$ x_{min}=2\\sqrt{m\\sum_{i=1}^m d_i} $$\n\n$$ argmin \\space S=\\sqrt{\\frac{\\sum_{i=1}^m d_i}{m}} $$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $ O(x)=O(m\\sqrt{n}) $\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u7406\u8bba\u4e0a\u8fc7\u4e0d\u4e86\u4f46\u662f\u590d\u6742\u5ea6\u8dd1\u4e0d\u6ee1\uff0c\u672c\u4eba\u8dd1\u4e86 962ms ~~\u4e22\u8138\u8fd8\u4e0d\u5982\u542f\u53d1\u5f0f\u5408\u5e76~~\n\n\u63d0\u9192\u4e00\u70b9\uff0c\u5982\u679c\u5efa\u5757\u7684\u65f6\u5019\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u90fd\u66b4\u529b\u5efa\u7684\u8bdd\u4f1a\u88ab\u5361\u6210 $O(n\\sqrt{n})$ \u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u6709\u53ef\u80fd\u4f1a\u6302\uff0c\u6b63\u786e\u505a\u6cd5\u662f\u81ea\u5df1\u4e0e\u7236\u4eb2\u7684\u4fe1\u606f\u5408\u5e76\uff0c\u9884\u5904\u7406\u5c31\u662f $O(n)$ \u7684\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN=3e5;\nconst ll MINV=-1e18;\n\nstruct Rule\n{\n\tll K,B,Low;int Head;\n\tll VAL(ll x) {return K*x+B;}\n\tvoid Print() {printf(\"%lld %lld %lld %d\\n\",K,B,Low,Head);}\n};\n\nstruct Tree\n{\n\tint father;\n\tint depth,Bloc;\n\tint A;ll H,V;\n\tRule Skip;\n\tvoid Scan() {scanf(\"%d %d %lld\",&father,&A,&V);}\n\tvector<int> Son;\n}node[MAXN+5];\n\nRule Merge(Rule a,Rule b)//\u5148\u901a\u8fc7 a \u518d\u901a\u8fc7 b\n{\n\tRule cnt;\n\tcnt.Head=b.Head;\n\tcnt.Low=max(a.Low,(ll)ceil((double)(b.Low-a.B)/a.K));\n\tcnt.K=a.K*b.K;\n\tcnt.B=a.B*b.K+b.B;\n\treturn cnt;\n}\n\nRule Sing(int x)\n{\n\tif(node[x].A) return Rule{node[x].V,0,node[x].H,node[x].father};\n\treturn Rule{1,node[x].V,node[x].H,node[x].father};\n}\n\nint n,m;\nint block_size;\nll S[MAXN+5],Hsum;int C[MAXN+5];\nint ans[2][MAXN+5];\n\nvoid Build(int now,Rule cnt)\n{\n\tnode[now].depth%=block_size;\n\tif(node[now].depth==1) node[now].Bloc=1;\n\telse node[now].Bloc=node[node[now].father].Bloc+1;\n\tnode[now].Skip=Merge(Sing(now),cnt);\n\tfor(int i=0;i<node[now].Son.size();i++)\n\t\tBuild(node[now].Son[i],(node[now].depth ? node[now].Skip : Rule{1,0,MINV,now}));\n}\n\nvoid Query(int x)\n{\n\twhile(C[x])\n\t{\n\t\tif(S[x]>=node[C[x]].Skip.Low)\n\t\t{\n\t\t\tS[x]=node[C[x]].Skip.VAL(S[x]);\n\t\t\tans[1][x]+=node[C[x]].Bloc;\n\t\t\tC[x]=node[C[x]].Skip.Head;\n\t\t}\n\t\telse if(S[x]>=node[C[x]].H)\n\t\t{\n\t\t\tif(node[C[x]].A) S[x]*=node[C[x]].V;\n\t\t\telse S[x]+=node[C[x]].V;\n\t\t\t++ans[1][x]; \n\t\t\tC[x]=node[C[x]].father;\n\t\t}\n\t\telse break;\n\t}\n\t++ans[0][C[x]];\n}\n\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&node[i].H);\n\tnode[1].depth=1;\n\tfor(int i=2;i<=n;i++) \n\t{\n\t\tnode[i].Scan();\n\t\tnode[i].depth=node[node[i].father].depth+1;\n\t\tnode[node[i].father].Son.push_back(i);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld %d\",&S[i],&C[i]);\n\t\tHsum+=node[C[i]].depth;\n\t}\n\tblock_size=ceil(sqrt((double)Hsum/m));\n\tBuild(1,Rule{1,0,MINV,0});\n\tfor(int i=1;i<=m;i++) Query(i);\n\tfor(int i=1;i<=n;i++) printf(\"%d\\n\",ans[0][i]);\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[1][i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1604051048,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p1110-zjoi2007%E6%8A%A5%E8%A1%A8%E7%BB%9F%E8%AE%A1/)\n\n---\n# Solution\n\u6211\u4eec\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u60f3**\u628a\u5904\u4e8e\u540c\u4e00\u4e2a\u70b9\u7684\u9a91\u58eb\u5168\u90e8\u4e22\u5230\u4e00\u4e2a\u5c0f\u6839\u5806\u5de6\u504f\u6811\u91cc\u9762**\u3002\u8fd9\u6837\u5b50\uff0c\u6211\u4eec**\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76\uff0c\u5408\u5e76\u5b8c\u5c31\u53bb\u68c0\u67e5\u4e00\u4e0b\u6839\u662f\u5426\u6ee1\u8db3\u5f53\u524d\u57ce\u5e02\u7684\u8981\u6c42\uff0c\u4e00\u76f4\u5f39\u6839\u5f39\u5230\u6ee1\u8db3\u8981\u6c42\u4e3a\u6b62**\u3002\n\n\u81f3\u4e8e\u80fd\u529b\u7684\u53d8\u5316\uff0c\u8fd9\u91cc\u7684\u64cd\u4f5c\u8981\u6c42\u65e0\u5916\u4e4e\u4e58\u6cd5\u548c\u52a0\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u7ebf\u6bb5\u6811II\u90a3\u9053\u9898\u90a3\u6837\u505a\u4e24\u4e2a\u6807\u8bb0\uff0c\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u3002\u6bcf\u6b21\u5408\u5e76\u3001\u5f39\u6839\u4e4b\u524d\u90fdpushdown\u6807\u8bb0\u3002\n\n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u5207\u6389\u5566~(*\u00b4\uff9f\u2200\uff9f\uff40)\uff89 \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogm)$\n\n---\n# Code\n### \u6570\u636e\u751f\u6210\u5668\n[\u5728\u8fd9\u91cc](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p1110-zjoi2007%E6%8A%A5%E8%A1%A8%E7%BB%9F%E8%AE%A1/)\n\n### \u6b63\u89e3\n~~\u6211\u56e0\u4e3a\u7528\u4e86vector\u5b58\u8fb9\u5e38\u6570\u7206\u5927\uff0c\u4e0d\u5438\u6c27\u4f1aT\u4e00\u4e2a\u70b9~~\n\n```cpp\n//Luogu P3261 [JLOI2015]\u57ce\u6c60\u653b\u5360\n//Mar,8th,2019\n//\u5de6\u504f\u6811+\u7ebf\u6bb5\u6811II\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=300000+1000;\nstruct LST\n{\n\tlong long plus[N],take[N],w[N],son[N][2],dis[N],fa[N];\n\tinline void pushdown(int x)//\u4f20\u5165\u4f4d\u7f6e\n\t{\n\t\tif(son[x][0]!=0)\n\t\t{\n\t\t\tw[son[x][0]]=w[son[x][0]]*take[x]+plus[x];\n\t\t\ttake[son[x][0]]*=take[x];\n\t\t\tplus[son[x][0]]=plus[son[x][0]]*take[x]+plus[x];\n\t\t}\n\t\tif(son[x][1]!=0)\n\t\t{\n\t\t\tw[son[x][1]]=w[son[x][1]]*take[x]+plus[x];\n\t\t\ttake[son[x][1]]*=take[x];\n\t\t\tplus[son[x][1]]=plus[son[x][1]]*take[x]+plus[x];\n\t\t}\n\t\tplus[x]=0,take[x]=1;\n\t}\n\tint findFather(int x)//\u4f20\u5165\u4f4d\u7f6e\n\t{\n\t\tif(fa[x]==0) return x;\n\t\treturn fa[x]=findFather(fa[x]);\n\t}\n\tint Merge(int x,int y)//\u4f20\u5165\u6839\u7684\u4f4d\u7f6e\n\t{\n\t\tif(x==0 or y==0) return x+y;\n\t\tif(w[x]<w[y]) swap(x,y);\n\t\tpushdown(x),pushdown(y);\n\t\tson[y][1]=Merge(x,son[y][1]),fa[son[y][1]]=y;\n\t\tif(dis[son[y][0]]<dis[son[y][1]]) \n\t\t\tswap(son[y][0],son[y][1]);\n\t\tdis[y]=dis[son[y][1]]+1;\t\n\t\treturn y;\n\t}\n\tint Pop(int x)//\u8fd4\u56de\u65b0\u7684\u6839\u7684\u4f4d\u7f6e\n\t{\n\t\tpushdown(x);\n\t\tfa[x]=Merge(son[x][0],son[x][1]);\n\t\treturn fa[x];\n\t}\n\tvoid Mark(int x,long long ntake,long long nplus)\n\t{\n\t\tpushdown(x);\n\t\tw[x]=w[x]*ntake+nplus;\n\t\ttake[x]=ntake,plus[x]=nplus;\n\t}\n}lst;\nint n,m,root[N],ans1[N],ans2[N];\nlong long a[N],v[N],h[N];\nvector <int> e[N];\nint depth[N],from[N];\nvoid dfs(int now)\n{\n\tfor(int i=0;i<int(e[now].size());i++)\n\t{\n\t\tdepth[e[now][i]]=depth[now]+1;\n\t\tdfs(e[now][i]);\n\t\tif(root[e[now][i]]!=0)\n\t\t\troot[now]=lst.Merge(root[now],root[e[now][i]]);\n\t}\n\twhile(root[now]!=0 and lst.w[root[now]]<h[now])\n\t{\n\t\tans1[now]++,ans2[root[now]]=depth[from[root[now]]]-depth[now];\n\t\troot[now]=lst.Pop(root[now]);\n\t}\n\tif(v[now]==0)\n\t\tlst.Mark(root[now],1,a[now]);\n\telse\n\t\tlst.Mark(root[now],a[now],0);\n}\nint main()\n{\n\tint t=clock();\n\tfreopen(\"3261.in\",\"r\",stdin);\n\tfreopen(\"3261.out\",\"w\",stdout);\n\t\n\tint size = 256 << 20;\n    char *p = (char*)malloc(size) + size;\n    __asm__(\"movl %0, %%esp\\n\" :: \"r\"(p));\n\t\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\th[i]=read();\n\tfor(int i=1;i<=n;i++)\n\t\te[i].reserve(4);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\te[read()].push_back(i);\n\t\tv[i]=read(),a[i]=read();\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tlong long w=read();\n\t\tfrom[i]=read();\n\t\tlst.w[i]=w;\n\t\tif(root[from[i]]==0)\n\t\t\troot[from[i]]=i;\n\t\telse\n\t\t\troot[from[i]]=lst.Merge(root[from[i]],i);\n\t}\n\t\n\tdepth[1]=1;\n\tdfs(1);\n\twhile(root[1]!=0)\n\t{\n\t\tans2[root[1]]=depth[from[root[1]]];\n\t\troot[1]=lst.Pop(root[1]);\n\t}\n\t\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d\\n\",ans1[i]);\n\tfor(int i=1;i<=m;i++)\n\t\tprintf(\"%d\\n\",ans2[i]);\n\tcerr<<clock()-t;\n\treturn 0;\n}\n\n\n```\n\n\n\n\n",
        "postTime": 1552018306,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u57fa\u4e8e\u5de6\u504f\u6811+\u61d2\u6807\u8bb0push_down\u7684\u89e3\u6cd5\u5df2\u7ecf\u6709\u5f88\u591a\u795e\u7287\u8bb2\u4e86\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528\u4efb\u610f\u53ef\u5e76\u5806\uff08\u6211\u7528\u7684\u662f\u914d\u5bf9\u5806\uff09+\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u89e3\u3002\n\n\u6211\u4eec\u77e5\u9053\u5728\u6bcf\u4e2a\u8282\u70b9\u5904\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u6765\u7ef4\u62a4\u6240\u6709\u5728\u8be5\u4f4d\u7f6e\u5b58\u6d3b\u7684\u6218\u58eb\u3002\u6211\u4eec\u7ed9\u6bcf\u4e2a\u5806\u4f5c\u4e3a\u6574\u4f53\u6253\u4e24\u4e2a\u6807\u8bb0$m$\u548c$a$\uff0c\u8868\u793a\u5806\u4e2d\u6240\u6709\u6218\u58eb\u7684\u5b9e\u9645\u6218\u529b\u7b49\u4e8e _\u5806\u4e2d\u5b58\u50a8\u7684\u6218\u529b\u503c_ $\\times m+a$\u3002\n\n\u5728\u5408\u5e76\u4e24\u4e2a\u5806\u65f6\uff0c\u6839\u636e\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u8f83\u5c0f\u7684\u5806\u5408\u5e76\u5230\u8f83\u5927\u7684\u5806\u91cc\u8fb9\u3002\u9996\u5148\u6211\u4eec\u8981\u7edf\u4e00\u4e24\u4e2a\u5806\u7684\u6807\u8bb0\uff0c\u8bbe\u5c0f\u5806\u7684\u6807\u8bb0\u4e3a$m_0$\u548c$a_0$\uff0c\u5927\u5806\u7684\u6807\u8bb0\u4e3a$m_1$\u548c$a_1$\uff0c\u90a3\u4e48\u5728\u5408\u5e76\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u628a\u5c0f\u5806\u91cc\u5b58\u50a8\u7684\u6240\u6709\u7684\u6218\u529b\u503c$x_i$\u6539\u4e3a$ \\frac{(m_0x_i+a_0)-a_1}{m_1} $\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002\n\n\u5355\u6b21\u5408\u5e76\u7684\u590d\u6742\u5ea6\u4e3aO(\u5c0f\u5806\u7684\u5927\u5c0f)\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u603b\u7684\u590d\u6742\u5ea6\u4e3a$O(NlogN)$\u3002\u5982\u679c\u7528\u4e8c\u53c9\u5806\u66b4\u529b\u5408\u5e76\u7684\u8bdd\uff08\u4ece\u5c0f\u5806\u9010\u4e2apop\u7136\u540e\u52a0\u5230\u5927\u5806\u91cc\u8fb9\uff09\uff0c\u603b\u590d\u6742\u5ea6\u4e3a$O(Nlog^2N)$\uff0c\u5bf9\u4e8e30W\u7684\u6570\u636e\u4f3c\u4e4e\u6709\u4e9b\u5371\u9669\u3002\n\n\u8fd9\u4e2a\u89e3\u6cd5\u6709\u4e2a\u81f4\u547d\u7684\u7f3a\u70b9\u5c31\u662f\u4f9d\u8d56\u6d6e\u70b9\u6570\u8fd0\u7b97\uff0c\u8fc7\u7a0b\u4e2d\u4f1a\u4ea7\u751f\u8bef\u5dee\u3002\u56e0\u4e3along long\u6700\u5927\u53ef\u4ee5\u5b5819\u4f4d\u6570\uff0c\u800cdouble\u7684\u6709\u6548\u6570\u5b57\u53ea\u670915\u4f4d\uff0c\u56e0\u6b64\u7cbe\u5ea6\u635f\u5931\u8fd8\u662f\u6bd4\u8f83\u4e25\u91cd\u7684\u3002\u7ecf\u5b9e\u6d4b\u7528double\u53ef\u4ee5\u62ff80\u5206\uff0c\u6539\u6210long double\u4e4b\u540e\u53ef\u4ee5AC\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u6c42\u4e0d\u8981\u5410\u69fd\u5199\u6cd5\u548c\u957f\u5ea6\uff08\u624b\u52a8\u5141\u60b2\uff09\n\nupd:\u4fee\u6539\u4e86Buffer\u548cPtr\u7684\u63a5\u53e3\u8bbe\u8ba1\uff0c\u5b9e\u73b0\u4e86\u4e0e\u539f\u751f\u6307\u9488\u51e0\u4e4e\u65e0\u7f1d\u7684\u5207\u6362\n\n```cpp\n#include <algorithm>\n#include <cassert>\n#include <functional> //PairingHeap::Comp\n#include <memory> //Buffer::get\n#include <queue> //PairingHeap::for_each\n#include <type_traits> //Buffer::get\n\n#define USE_BUFFER\n#define check(expr, note) assert(expr ? \"note\" : 0)\n\n#ifdef USE_BUFFER\ntemplate <class T> struct Ptr;\n\n//\u8bbe\u7f6e\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff08bytes\uff09\nconstexpr int buffer_size = /*\u9898\u76ee\u5141\u8bb8\u7684\u5185\u5b58\u4f7f\u7528\u91cf\uff08MB\uff09*/ 100 * 1024 * 1024;\nclass Buffer\n{\n\tchar a[buffer_size]; int p = -1;\n\ttemplate <class T> T* vis(int x) { return (T*)(a + x); }\n\ttemplate <class T> friend class Ptr;\npublic:\n\tvoid init() { p = 0; } //\u521d\u59cb\u5316\uff0c\u591a\u7ec4\u6570\u636e\u65f6\u6ce8\u610f\u8c03\u7528\n\t//\u4e3aT\u7c7b\u578b\u7533\u8bf7\u4e00\u5757\u5185\u5b58\uff0c\u5e76\u7528args...\u539f\u5730\u6784\u9020\uff0c\u8fd4\u56de\u5185\u5b58\u7684\u8d77\u59cb\u4e0b\u6807\n\ttemplate <class T, class... Args> Ptr<T> get(Args&&... args)\n\t{\n\t\tstatic_assert(std::is_trivially_destructible<T>::value, \"\");\n\t\tcheck(p >= 0, \"Please init the buffer for each test case!\");\n\t\t::new(a + p) T(args...); //\u8fd9\u91cc\u5fc5\u987b\u8981#include <memory>\n\t\tint r = p; p += sizeof(T); return {r};\n\t}\n\t//\u8f85\u52a9\u51fd\u6570\uff0c\u7f13\u51b2\u533a\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2aT\u7c7b\u578b\u5143\u7d20\n\ttemplate <class T> int capacity() const { return buffer_size / sizeof(T); }\n} buffer;\n//\u7528\u4e8e\u8bbf\u95ee\u7f13\u51b2\u533a\u7684\u201c\u6307\u9488\u201d\u7c7b\u578b\ntemplate <class T> struct Ptr\n{\n\tint p = -1; //p < 0\u65f6\u8868\u793a\u201c\u7a7a\u6307\u9488\u201d\n\tPtr(int x): p(x) {}\n\tfriend Buffer;\npublic:\n\tPtr() = default;\n\tPtr<T>& operator = (std::nullptr_t) { p = -1; return *this; }\n\tT& operator * () {\n\t\tcheck(p >= 0, \"Access null pointer!\");\n\t\treturn *buffer.vis<T>(p);\n\t}\n\tT* operator -> () {\n\t\tcheck(p >= 0, \"Access null pointer!\");\n\t\treturn buffer.vis<T>(p);\n\t}\n\t//\u9002\u7528\u4e8econst\u5bf9\u8c61\u7684\u91cd\u8f7d\n\tconst T& operator * () const {\n\t\tcheck(p >= 0, \"Access null pointer!\");\n\t\treturn *buffer.vis<T>(p);\n\t}\n\tconst T* operator -> () const {\n\t\tcheck(p >= 0, \"Access null pointer!\");\n\t\treturn buffer.vis<T>(p);\n\t}\n\toperator bool () const { return p >= 0; } //\u82e5\u4e0d\u4e3a\u201c\u7a7a\u6307\u9488\u201d\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\n\tbool operator == (Ptr<T> rhs) const {\n\t\treturn p == rhs.p;\n\t}\n\tbool operator != (Ptr<T> rhs) const {\n\t\treturn p != rhs.p;\n\t}\n};\n#else\nstruct Buffer {\n\ttemplate <class T, class... Args> T* get(Args&&... args) {\n\t\treturn new T(args...);\n\t}\n\tvoid init() {}\n} buffer;\ntemplate <class T> using Ptr = T*;\n#endif\n\n//\u914d\u5bf9\u5806\u6a21\u677f\uff0c\u9ed8\u8ba4\u4e3a\u5927\u6839\u5806\uff08\u4e0eSTL\u884c\u4e3a\u4e00\u81f4\uff09\ntemplate <class T, class Comp = std::less<T>> class PairingHeap\n{\n\tstruct Node {\n\t\tT v; Ptr<Node> pre, next, ch;\n\t\tNode(const T& x): v(x) {}\n\t};\n\tusing P = Ptr<Node>;\n\n\tP root; Comp comp; int cnt = 0;\n\tP merge_trees(P x, P y)\n\t{\n\t\tif (!y) return x;\n\t\tif (comp(x->v, y->v)) std::swap(x, y);\n\t\ty->next = x->ch;\n\t\tif (x->ch) x->ch->pre = y;\n\t\ty->pre = x; x->ch = y;\n\t\treturn x;\n\t}\n\tvoid merge_children(P x)\n\t{\n\t\tif (!x->ch) return;\n\t\tP last = x, cur = x->ch, p1, p2;\n\t\tfor (; cur && cur->next; last = cur, cur = p2) {\n\t\t\tp1 = cur->next, p2 = p1->next;\n\t\t\tcur = merge_trees(cur, p1); cur->pre = last;\n\t\t}\n\t\tif (cur) { cur->pre = last; last = cur; }\n\t\tfor (cur = last; cur->pre != x; ) {\n\t\t\tp2 = cur->pre->pre;\n\t\t\tcur = merge_trees(cur, cur->pre); cur->pre = p2;\n\t\t}\n\t\tcur->next = nullptr; x->ch = cur;\n\t}\npublic:\n\tstruct Handle {\n\t\tconst P p;\n\t\tconst T& value() const { return p->v; }\n\t};\n\t//\u8fd4\u56de\u63d2\u5165\u4f4d\u7f6e\u7684\u6307\u9488\uff0cdecrease_key\u7684\u65f6\u5019\u4f1a\u9700\u8981\uff08\u6ce8\u610f\u4e0d\u8981\u4fee\u6539\u8fd4\u56de\u6307\u9488\u7684\u5185\u5bb9\uff01\uff01\uff01\uff09\n\tHandle push(const T& x) {\n\t\tP c = buffer.get<Node>(x);\n\t\troot = merge_trees(c, root); cnt += 1; return {c};\n\t}\n\tvoid pop() {\n\t\tcheck(cnt > 0, \"Pop empty heap!\");\n\t\tmerge_children(root); root = root->ch; cnt -= 1;\n\t}\n\t//\u4e0e\u53e6\u4e00\u4e2a\u914d\u5bf9\u5806rhs\u5408\u5e76\uff0c\u5408\u5e76\u540erhs\u88ab\u6e05\u7a7a\n\tvoid merge(PairingHeap<T, Comp>& rhs)\n\t{\n\t\tif (!root) { root = rhs.root; cnt = rhs.cnt; }\n\t\telse { root = merge_trees(root, rhs.root); cnt += rhs.cnt; }\n\t\trhs.root = nullptr; rhs.cnt = 0;\n\t}\n\t//\u5c06p\u5bf9\u5e94\u7684\u503c\u4fee\u6539\u4e3ax\uff0c\u4f7f\u8be5\u8282\u70b9\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\u63d0\u5347\u3002\u9700\u4fdd\u8bc1p\u5c5e\u4e8e\u8be5\u914d\u5bf9\u5806\uff08\u6b63\u786e\u6027\u672a\u9a8c\u8bc1\uff09\n\tvoid decrease_key(Handle& h, const T& x)\n\t{\n\t\tP p = h.p; if (comp(x, p->v)) return;\n\t\tp->v = x; if (p == root) return;\n\t\tif (p->next) p->next->pre = p->pre;\n\t\t(p->pre->ch == p) ? (p->pre->ch = p->next) : (p->pre->next = p->next);\n\t\tp->next = p->pre = nullptr;\n\t\troot = merge_trees(p, root);\n\t}\n\t//\u5bf9\u4e8e\u5806\u4e2d\u7684\u6bcf\u4e2a\u503c\uff0c\u8c03\u7528\u51fd\u6570\u5bf9\u8c61func\n\t//\u6ce8\u610f\u5229\u7528func(T&)\u4fee\u6539\u5806\u5185\u5143\u7d20\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u4fee\u6539\u540e\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\uff01\uff01\uff01\n\ttemplate <class F> void for_each(F func)\n\t{\n\t\tif (!root) return;\n\t\tstd::queue<P> que; que.push(root);\n\t\tfor (; !que.empty(); que.pop())\n\t\t{\n\t\t\tP cur = que.front(); func(cur->v);\n\t\t\tif (cur->next) que.push(cur->next);\n\t\t\tif (cur->ch) que.push(cur->ch);\n\t\t}\n\t}\n\tconst T& top() const {\n\t\tcheck(cnt > 0, \"Access top of empty heap!\");\n\t\treturn root->v;\n\t}\n\tint size() const { return cnt; }\n\tbool empty() const { return cnt == 0; }\n};\n\n#include <cmath>\n#include <cstdio>\n\nstruct Warrior\n{\n\tlong double strength;\n\tint id;\n\tbool operator < (const Warrior& rhs) const {\n\t\treturn strength > rhs.strength;\n\t}\n};\n\nusing Heap = PairingHeap<Warrior>;\nusing LL = long long;\n\nstruct Group\n{\n\tHeap heap;\n\tLL multi = 1, add = 0;\n};\n\nvoid merge_groups(Group& dest, Group& src) //src to dest\n{\n\tif (src.heap.size() < dest.heap.size())\n\t{\n\t\tsrc.heap.for_each([&dest, &src] (Warrior& x) {\n\t\t\tx.strength = x.strength * src.multi + src.add;\n\t\t\tx.strength = (x.strength - dest.add) / dest.multi;\n\t\t});\n\t}\n\telse\n\t{\n\t\tdest.heap.for_each([&dest, &src] (Warrior& x) {\n\t\t\tx.strength = x.strength * dest.multi + dest.add;\n\t\t\tx.strength = (x.strength - src.add) / src.multi;\n\t\t});\n\t\tdest.multi = src.multi;\n\t\tdest.add = src.add;\n\t}\n\tdest.heap.merge(src.heap);\n}\n\nconst int maxN = (int)3e5 + 10;\nGroup group[maxN];\nint N, M, F[maxN], A[maxN];\nLL H[maxN], V[maxN];\n\nint depth[maxN];\nint ans_city[maxN];\nint start_depth[maxN], die_at_depth[maxN];\n\nvoid input()\n{\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i = 1; i <= N; i++)\n\t\tscanf(\"%lld\", H + i);\n\n\tF[1] = 0; depth[0] = 0;\n\tdepth[1] = 1;\n\tfor (int i = 2; i <= N; i++)\n\t{\n\t\tscanf(\"%d%d%lld\", F + i, A + i, V + i);\n\t\tdepth[i] = depth[F[i]] + 1;\n\t}\n\tLL S; int C;\n\tfor (int i = 1; i <= M; i++)\n\t{\n\t\tscanf(\"%lld%d\", &S, &C);\n\t\tstart_depth[i] = depth[C];\n\t\tgroup[C].heap.push({(long double)S, i});\n\t}\n}\n\ninline LL actual_strength(long double x, Group& g) {\n\treturn llround(x * g.multi + g.add);\n}\n\nvoid solve()\n{\n\tfor (int i = N; i >= 1; i--) //Actually BFS\n\t{\n\t\tHeap& h = group[i].heap;\n\t\twhile (!h.empty() && actual_strength(h.top().strength, group[i]) < H[i])\n\t\t{\n\t\t\tdie_at_depth[h.top().id] = depth[i];\n\t\t\th.pop();\n\t\t\tans_city[i] += 1;\n\t\t}\n\t\tif (A[i] == 0) //Add\n\t\t\tgroup[i].add += V[i];\n\t\telse {\n\t\t\tgroup[i].multi *= V[i];\n\t\t\tgroup[i].add *= V[i];\n\t\t}\n\t\tmerge_groups(group[F[i]], group[i]);\n\t}\n\n\tfor (int i = 1; i <= N; i++)\n\t\tprintf(\"%d\\n\", ans_city[i]);\n\tfor (int i = 1; i <= M; i++)\n\t\tprintf(\"%d\\n\", start_depth[i] - die_at_depth[i]);\n}\n\nint main() { buffer.init(); input(); solve(); return 0; }\n\n```",
        "postTime": 1537674027,
        "uid": 49526,
        "name": "Orina_zju",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "\u8868\u793a\u8c03\u8fd9\u9053\u9898\u5df2\u7ecf\u8c03\u5230\u5931\u667a\u4e86\u3002\u3002\u3002\n\u56e0\u4e3a\u6628\u5929\u521a\u5199\u5b8c\u7ebf\u6bb5\u68112\uff0c\u6240\u4ee5pushdown\u5c31\u5199\u5f97\u548c\u7ebf\u6bb5\u68112\u4e00\u6a21\u4e00\u6837\uff0c\uff0c\uff0c\uff0c\u4e8e\u662f\uff0c\uff0c\uff0c\u6210\u529f\u7684\u5728pushdown\u7684\u5730\u65b9\uff0c\uff0c\uff0c\u5404\u79cd\u9519\n\n\u4e0b\u9762\u8bb2\u505a\u6cd5\uff1a\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u6bcf\u4e2a\u9a91\u58eb\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u57ce\u6c60\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u5806\uff0c\u5806\u4e2d\u7ef4\u62a4\u7684\u662f\u5728\u8fd9\u4e2a\u57ce\u6c60\u7684\u9a91\u58eb\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u5982\u679c\u5806\u9876\u7684\u9a91\u58eb\u653b\u51fb\u529b\u4e0d\u591f\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5pop\u6389\uff0c\u5e76\u4e14\u7ed9\u57ce\u6c60\u6b7b\u4ea1\u4eba\u6570\u7edf\u8ba1++\uff08dead\uff09\uff0c\u8fd9\u6837\u7528while pop\u5b8c\u540e\uff0c\u5806\u91cc\u7684\u9a91\u58eb\u5c31\u90fd\u662f\u53ef\u4ee5\u5360\u9886\u8fd9\u4e2a\u57ce\u6c60\u7684\u4e86\uff0c\n\n\u7531\u4e8e\u4e0b\u9762\u7684\u9a91\u58eb\u53ef\u4ee5\u4e0a\u6765\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5806\u8981\u652f\u6301\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5de6\u504f\u6811\n\n\u56e0\u4e3apop\u5b8c\u540e\u5269\u4e0b\u7684\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5269\u4e0b\u7684\u9a91\u58eb\u8fdb\u884c\u4fee\u6539\u4e86\u3002\u4f46\u662f\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u9a91\u58eb\u5f88\u591a\uff0c\u57ce\u6c60\u4e5f\u5f88\u591a\uff0c\u76f4\u63a5\u4fee\u6539\u663e\u7136\u4e0d\u592a\u59a5\u5f53\u3002\u4e8e\u662f\u6211\u4eec\u501f\u9274\u7ebf\u6bb5\u6811\u7684lazy\u6807\u8bb0\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u91cc\u6709\u4e58\u6cd5\u4e5f\u6709\u52a0\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6807\u8bb0\uff0c\u4e00\u4e2amul\uff08\u4e58\u6cd5\u6807\u8bb0\uff09,\u4e00\u4e2alazy(\u52a0\u6cd5\u6807\u8bb0\uff09\uff0c\n\n\u7531\u4e8e(x+h)*q=x*q+h*q,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628ah\u5f53\u505alazy\uff0cx\u5f53\u505a\u5f53\u524d\u503c\uff0cq\u662fmul,\u6240\u4ee5\u6211\u4eec\u66f4\u6539\u548c\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u8981\u540c\u65f6\u628alazy\u4e5f*=mul\uff0c\n\n\u8fd9\u65f6lazy==h*q,mul==q,\u56e0\u6b64\u6211\u4eec\u8981\u5f97\u5230x*q+h*q\u8fd9\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e58\u540e\u52a0\n\ndeadin[i]\u4ee3\u8868\u9a91\u58ebi\u6b7b\u5728\u54ea\u91cc\u4e86\uff0cdead\u4ee3\u8868\u6b7b\u5728\u8fd9\u4e2a\u57ce\u6c60\u7684\u4eba\u6570\uff0ckeep\u662f\u57ce\u5e02\u7684\u751f\u547d\u503c\uff0c\u5176\u4ed6\u6570\u7ec4\u5e94\u8be5\u90fd\u597d\u61c2\u4e86\n\n\u56e0\u4e3a\u6211\u4eec\u89c2\u5bdf\u5230\u5982\u679c\u8fd8\u8981\u4e0b\u4f20\u4e00\u4e2a\u6807\u8bb0won\u6765\u6807\u8bb0\u9a91\u58eb\u53c8\u5360\u9886\u4e86\u4e00\u4e2a\u57ce\u6c60\u7684\u8bdd\u663e\u7136\u662f\u4e0d\u5212\u7b97\u7684\uff0c\u56e0\u4e3amul\u548clazy\u4e4b\u6240\u4ee5\u6709\u5fc5\u8981\u5c31\u662f\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u8981\u7528\u5230\uff0c\u800cwon\u6807\u8bb0\u4ec5\u4ec5\u662f\u6700\u540e\u8981\u7528\u800c\u5df2\uff0c\u5e76\u4e14\u7531\u4e8e\u9a91\u58eb\u7684\u524d\u8fdb\u8def\u5f84\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7528\u6b7b\u4ea1\u57ce\u5e02\u6df1\u5ea6-\u51fa\u53d1\u57ce\u5e02\u6df1\u5ea6\u5c31\u53ef\u4ee5\u5f97\u5230\u653b\u5360\u51e0\u5ea7\u57ce\u4e86\uff0c\u5982\u679c\u6ca1\u6b7b\u7684\u8bdd\u6b7b\u4ea1\u57ce\u5e02\u5c31\u662f0\uff0c\u56e0\u6b64\u4e3a\u4e86\u7ef4\u62a4\u6b7b\u4ea1\u57ce\u5e02-\u51fa\u53d1\u57ce\u5e02\u8fd9\u4e2a\u5f0f\u5b50\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u7684deep\u7edf\u8ba1\u4ece1\u5f00\u59cb\n\n\u5982\u679c\u8fd8\u6709\u4e0d\u61c2\u7684\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u8fd8\u662f\u6709\u5c11\u91cf\u6ce8\u91ca\u7684\n\n\u63a8\u8350\u5199\u4e4b\u524d\u5148\u5199\u7ebf\u6bb5\u68112\uff0c\u6709\u5229\u4e8e\u7406\u89e3\u5982\u4f55\u540c\u65f6\u7ef4\u62a4\u4e58\u6cd5\u548c\u52a0\u6cd5\u6807\u8bb0\uff0c\u8fd9\u91cc\u7684\u6807\u8bb0\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6ce8\u610f\u4e0d\u8981\u50cf\u6211\u4e00\u6837\uff0c\u5199\u5b8c\u7ebf\u6bb5\u68112\uff0cpushdown\u5c31\u5168\u5199\u6210\u7ebf\u6bb5\u6811\u7248\u672c\u7684\uff0c\uff0c\uff0c\uff0c\u4e8e\u662f\u5c31\u5404\u79cd\u9519\uff0c\uff0c\uff0c\n\n\u4e0b\u9762\u7684\u8f93\u51fa\u683c\u5f0f\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u8c03\u8bd5\u6539\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u76f4\u63a5\u4ea4\u4e0a\u53bb\u53d1\u73b0too many or too few lines,,,\u90a3\u4e0d\u662f\u6211\u7684\u7a0b\u5e8f\u9519\u4e86\u3002\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define R register int\n#define AC 300050\n#define LL long long\n#define D printf(\"line in %d\\n\",__LINE__);\nint n,m;\nint date[AC],Next[AC],Head[AC],tot,cnt;//\u524d\u5411\u661f\nLL v[AC],keep[AC];int deep[AC],a[AC];//\u57ce\u6c60\u5c5e\u6027\nint dead[AC],deadin[AC];//\u7b54\u6848\nint b[AC],root[AC];\n\ninline LL read()\n{\n\tLL x=0;char c=getchar();bool z=false;\n\twhile(c>'9' || c<'0') \n\t{\n\t\tif(c=='-') z=true;\n\t\tc=getchar();\n\t}\n\twhile(c>='0' && c<='9') x=x*10+c-'0',c=getchar();\n\tif(!z) return x;\n\telse return -x;\n}\n\ninline void add(int f,int w)\n{\n\tdate[++tot]=w , Next[tot]=Head[f] , Head[f]=tot;\n}\n\nstruct left_heap\n{\n\tLL s[AC],mul[AC],lazy[AC];//\u9a91\u58eb\u5c5e\u6027\u548c\u6807\u8bb0,error!!!\u6807\u8bb0\u4e5f\u8981LL\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\uff0c\u56e0\u4e3a\u6807\u8bb0\u4e5f\u53ef\u80fd\u4e58\u5230\u5f88\u5927\u554a\uff0c\u6bd4\u5982lazy\u548cmul\u5404\u79cd\u4e58\u4e4b\u7c7b\u7684\n\tint l[AC],r[AC],num[AC];\n\t\n\tinline void pushdown(int x)\n\t{\n\t\tint ll=l[x],rr=r[x];//error!!!\u8fd9\u53c8\u4e0d\u662f\u7ebf\u6bb5\u6811\u554a\uff01\uff01\uff01\uff01\u5e72\u561b\u4e582\u554a\t\n\t\tif(!mul[x]) return ;//\u5982\u679cmul\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u6709\u8fd9\u4e2a\u5806\uff0c\u6240\u4ee5\n\t\tif(mul[x] != 1)\n\t\t{\n\t\t\ts[ll]*=mul[x];\n\t\t\tmul[ll]*=mul[x];\n\t\t\tlazy[ll]*=mul[x];//error!!!\u52a0\u6cd5\u6807\u8bb0\u4e5f\u8981\u4e58\u554a\uff01\uff01\uff01\n\t\t\ts[rr]*=mul[x];\n\t\t\tmul[rr]*=mul[x];\n\t\t\tlazy[rr]*=mul[x];\n\t\t\tmul[x]=1;\n\t\t}\n\t\tif(lazy[x])\n\t\t{\n\t\t\ts[ll]+=lazy[x];//error!!!\u4e0d\u662f\u7ebf\u6bb5\u6811\u554a\uff0c\uff0c\uff0c\uff0cr,l\u4e0d\u662f\u533a\u95f4\u4e86\n\t\t\tlazy[ll]+=lazy[x];\n\t\t\ts[rr]+=lazy[x];\n\t\t\tlazy[rr]+=lazy[x];\n\t\t\tlazy[x]=0;\n\t\t}\n\t}\n\t\n\tinline void change_add(int x,int k)\n\t{\n\t\tif(!x) return ;\n\t\ts[x]+=k;\n\t\tlazy[x]+=k;\n\t}\n\t\n\tinline void change_mul(int x,int k)\n\t{\n\t\tif(!x) return ;\n\t\ts[x]*=k;\n\t\tlazy[x]*=k;\n\t\tmul[x]*=k;\n\t}\n\t\n\tint merge(int x,int y)\n\t{\n\t\tpushdown(x),pushdown(y);\n\t\tif(!x || !y) return x+y;\n\t//\tpushdown(x),pushdown(y);\n\t\tif(s[x] > s[y]) swap(x,y);\n\t\tr[x]=merge(r[x],y);\n\t\tswap(l[x],r[x]);\n\t\treturn x;\n\t}\n\t\n\tvoid pop(int &x)\n\t{\n\t\tx=merge(l[x],r[x]);\n\t}\n\t\n\tinline void insert(int x,int k)\n\t{\n\t\ts[++cnt]=x;\n\t\tnum[cnt]=k;\n\t\tmul[cnt]=1;\n\t\troot[b[k]]=merge(cnt,root[b[k]]);\n\t}\n}heap;\n\nvoid DFS(int x)\n{\n/*\tif(a[x]) heap.change_mul(root[x],v[x]);\n\telse heap.change_add(root[x],v[x]);\n\tif(!Head[x]) return ;//\u5982\u679c\u5230\u53f6\u8282\u70b9\u5c31\u8fd4\u56de\uff0c\u56e0\u4e3a\u6ca1\u6709\u513f\u5b50\u7ed9\u5b83\u4e86\n\t*/\n\tR now;\n\tfor(R i=Head[x]; i ;i=Next[i])\n\t{\n\t\n\t\tnow=date[i];\n\t\tdeep[now]=deep[x]+1;\n\t\tDFS(now);\n\t\troot[x]=heap.merge(root[now],root[x]);\n\t}\n\twhile(root[x] && heap.s[root[x]] < keep[x])\n\t{\n\t\tdead[x]++;\n\t\tdeadin[heap.num[root[x]]]=x;\n\t\theap.pop(root[x]);\n\t}\n\tif(a[x]) heap.change_mul(root[x],v[x]);\n\telse heap.change_add(root[x],v[x]);\n}\n\nvoid pre()\n{\n\tint aa;\n\tn=read(),m=read();\n\tdeep[1]=1;\n\tfor(R i=1;i<=n;i++) keep[i]=read(),heap.mul[i]=1;\n\tfor(R i=2;i<=n;i++)\n\t{\n\t\taa=read(),a[i]=read(),v[i]=read();\n\t\tadd(aa,i);\n\t}\n\tfor(R i=1;i<=m;i++)\n\t{\n\t\taa=read(),b[i]=read();\n\t//\tprintf(\"%d %d\\n\",aa,b[i]);\n\t\tif(aa >= keep[b[i]])//\u5982\u679c\u7b2c\u4e00\u5ea7\u57ce\u6c60\u6253\u5f97\u4e0b\u624d\u5efa\u5806\n\t\t{\n\t\t\tif(!root[b[i]])\n\t\t\t{\n\t\t\t\troot[b[i]]=++cnt;//\u5e94\u8be5\u8981\u7ed9\u57ce\u6c60\u5f00\u5806,\u5806\u91cc\u5b58\u58eb\u5175\uff0c\u4e0d\u7136\u58eb\u5175\u5728\u54ea\u4e2a\u57ce\u5e02\u6709\u4e0a\u9762\u533a\u522b\n\t\t\t\theap.num[cnt]=i;//\u56e0\u4e3a\u662f\u7ed9\u57ce\u6c60\u5f00\u7684\u5806\uff0c\u6240\u4ee5\u5c31\u8981\u5b58\u7f16\u53f7\u4e86\n\t\t\t\theap.s[cnt]=aa;\n\t\t\t\theap.mul[cnt]=1;\n\t\t\t\t//printf(\"%d\\n\",i);\n\t\t\t}\n\t\t\telse heap.insert(aa,i);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tdead[b[i]]++;//\u4e0d\u7136\u5c31\u522b\u6765\u4e86\n\t\t\tdeadin[i]=b[i];\n\t\t}\n\t}\n}\n\nvoid work()\n{\n\tfor(R i=1;i<=n;i++) printf(\"%d\\n\",dead[i]);\n\tprintf(\"\\n\");\n\tfor(R i=1;i<=m;i++)\n\t\tprintf(\"%d\\n\",deep[b[i]] - deep[deadin[i]]);\n}\n\nint main()\n{\n\tfreopen(\"in.in\",\"r\",stdin);\n\tpre();\n\tDFS(1);\n\twork();\n\tfclose(stdin);\n\treturn 0;\n}\n```",
        "postTime": 1522754299,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    },
    {
        "content": "[$My$ $blog$](https://www.cnblogs.com/Spring-Araki/p/14502657.html)\n\n[\u9898\u76ee\u94fe\u63a5~](https://www.luogu.com.cn/problem/P3261)\n\n**\u5de6\u504f\u6811\u4ee5\u53ca\u61d2\u6807\u8bb0\u7684\u5e94\u7528\u3002**\n\n## Desprition\n\n\u6bcf\u4e2a\u6709**\u521d\u59cb\u6218\u6597\u529b**\u548c**\u51fa\u53d1\u70b9**\u7684\u58eb\u5175\uff0c\u5728\u4e00\u68f5\u6709\u6839\u6811\u4e0a\u5728**\u6ee1\u8db3\u6218\u6597\u529b\u5927\u4e8e\u8be5\u70b9\u9632\u5fa1\u529b**\u7684\u6761\u4ef6\u4e0b\u4e0d\u65ad\u6cbf**\u8282\u70b9\u7236\u4eb2\u5411\u4e0a**\u8fdb\u653b\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u9635\u4ea1\u5728\u8be5\u8282\u70b9\u3002\u6c42\u5bf9\u4e8e\u6bcf\u4e2a\u57ce\u6c60\uff0c\u8f93\u51fa\u6709\u591a\u5c11\u4e2a\u9a91\u58eb\u5728\u8fd9\u91cc\u727a\u7272\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u9a91\u58eb\uff0c\u8f93\u51fa\u4ed6\u653b\u5360\u7684\u57ce\u6c60\u6570\u91cf\u3002\n\n## Solution\n\n\u56e0\u4e3a\u8003\u8651\u5230\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u56fa\u5b9a\u7684\u9632\u5fa1\u503c\uff0c\u800c\u4efb\u610f\u4e00\u4e2a\u58eb\u5175\u7684\u884c\u52a8\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u4eba\u4e14\u653b\u6253\u540c\u4e00\u4e2a\u8282\u70b9\u7684\u58eb\u5175\u53ef\u4ee5\u4e3a\u591a\u4eba\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u6240\u6709\u5f53\u524d\u653b\u6253\u540c\u4e00\u4e2a\u70b9\u7684\u58eb\u5175\u653e\u8fdb\u540c\u4e00\u4e2a\u7ec4\u5408\u91cc\uff0c\u6309**\u4ece\u5c0f\u5230\u5927**\u7684\u987a\u5e8f\u6392\u5217\uff0c\n\n\u5982\u679c\u5176\u4e2d\u6700\u5c0f\u7684\u90fd\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u9632\u5fa1\u503c\u7684\u6761\u4ef6\uff0c\u90a3\u5c31\u8bf4\u660e\u7ec4\u5408\u91cc\u6240\u6709\u58eb\u5175\u90fd\u80fd\u7ee7\u7eed\u5411\u4e0a\u8d70\uff0c\u5c31\u5c06\u8be5\u7ec4\u5408\u7684\u58eb\u5175\u4e0e\u8282\u70b9\u7236\u4eb2\u7684\u7ec4\u5408**\u5408\u5e76**\uff1b\n\n\u5982\u679c\u6700\u5c0f\u7684\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8bf4\u660e\u4ed6\u5728\u8fd9\u91cc\u6b7b\u4e86\uff0c\u5c31\u5b58\u4e0b\u4ed6\u7684\u6b7b\u4ea1\u8bb0\u5f55\uff0c\u5c06\u4ed6\u8e22\u51fa\u7ec4\u5408\uff0c\u7ee7\u7eed\u5224\u65ad\uff0c\u76f4\u5230\u7ec4\u5408\u5185\u4e3a\u7a7a\u65f6\u505c\u6b62\u3002\n\n\u54a6\uff0c\u6ce8\u610f\u5230\u4e0d\u65ad\u5408\u5e76\uff0c\u5220\u9664\uff0c\u627e\u6700\u5c0f\u503c\u5f97\u64cd\u4f5c\u4e86\u5417\uff1f \n\n**\u5de6\u504f\u6811**\uff1a\u90a3\u4e0d\u5c31\u662f\u672c\u5927\u7237\u7684\u4e3b\u573a\u5417\uff1f\uff01\u653e\u5f00\u90a3\u9053\u9898\uff0c\u8ba9\u6211\u6765\uff01(\n\n\u4f46\u662f\uff0c\u9898\u76ee\u4e2d\u4e5f\u8bf4\u5f97\u5f88\u660e\u767d\uff0c\u6bcf\u6b21\u653b\u6253\u6210\u529f\u540e\uff0c\u58eb\u5175\u7684\u6218\u6597\u529b\u4f1a**\u53d1\u751f\u53d8\u5316**\u3002\u6bcf\u6b21\u90fd\u4fee\u6539\u6240\u6709\u58eb\u5175\u7684\u503c\u80af\u5b9a\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528\u61d2\u6807\u8bb0\u5904\u7406\u3002\u6807\u8bb0\u4e0b\u4f20\u7684\u64cd\u4f5c\u5176\u5b9e\u8ddf\u7ebf\u6bb5\u6811\u7684\u5dee\u4e0d\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bb2\u4e86\u3002\u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u5c31\u662f\uff0c**\u6bcf\u6b21\u5e94\u8be5\u5148\u4fee\u6539\u4e58\u6cd5\u61d2\u6807\u8bb0\uff0c\u518d\u4fee\u6539\u52a0\u6cd5\u61d2\u6807\u8bb0\uff0c\u800c\u4e14\u5982\u679c\u5f53\u524d\u53d8\u5316\u662f\u4e58\u6cd5\uff0c\u8282\u70b9\u5bf9\u5e94\u7684\u52a0\u6cd5\u6807\u8bb0\u4e5f\u8981\u4fee\u6539\u54e6~**\n\n\u6240\u4ee5\uff0c\u6700\u540e\u7684\u7b54\u6848\uff0c\u90fd\u662f\u901a\u8fc7\u58eb\u5175\u7684\u6b7b\u4ea1\u5730\u548c\u51fa\u53d1\u5730\u6c42\u5f97\u7684\u3002\n\n- > \u6709\u591a\u5c11\u4e2a\u9a91\u58eb\u5728\u8fd9\u91cc\u727a\u7272\uff1f\n\n\u53ea\u8981\u5faa\u73af\u4e00\u904d\uff0c\u5728\u6bcf\u4e2a\u58eb\u5175\u7684\u6b7b\u4ea1\u5730\u52a0\u4e00\u5c31\u597d\u4e86\u3002\n\n- > \u6bcf\u4e2a\u58eb\u5175\u653b\u5360\u7684\u57ce\u6c60\u6570\u91cf\uff1f\n\n\u5c31\u662f\u8be5\u58eb\u5175\u51fa\u53d1\u8282\u70b9\u7684\u6df1\u5ea6\u51cf\u53bb\u6b7b\u4ea1\u5730\u7684\u6df1\u5ea6\u3002\u5f88\u7b80\u5355\u5427~\n\n\u5177\u4f53\u8bb2\u89e3\u90fd\u5728\u4ee3\u7801\u91cc\u4e86~\n\n## Code\n\n```cpp\n\n#include<cstdio>\n#include<cstring> \n#include<algorithm>\nusing namespace std;\n#define il inline\n#define int long long\nconst int N = 3e5 + 5;\nint n,m,h[N],fa[N],a[N],v[N],c[N],rt[N],s[N],ls[N],rs[N],dis[N];\nint dep[N],d[N],siz[N],tag[N],tag2[N];\nil void read(int &x) {\n\tx = 0; int f = 1; char s = getchar();\n\twhile(s < '0' || s > '9') {if(s == '-') f = -1; s = getchar();}\n\twhile(s <= '9' && s >= '0') x = x * 10 + s - '0', s = getchar();\n\tx *= f;\n}\nil void write(int x) {\n\tif(x < 0) x = -x, putchar('-');\n\tif(x > 9) write(x / 10), x %= 10;\n\tputchar(x + '0');\n}\nil void pushdown(int x) {\n\tif(!tag[x] && tag2[x] == 1) return;\n\tif(ls[x]) {\n\t\ts[ls[x]] *= tag2[x], s[ls[x]] += tag[x];\n\t\ttag[ls[x]] *= tag2[x], tag[ls[x]] += tag[x];\n\t\ttag2[ls[x]] *= tag2[x];\n\t}\n\tif(rs[x]) {\n\t\ts[rs[x]] *= tag2[x], s[rs[x]] += tag[x];\n\t\ttag[rs[x]] *= tag2[x], tag[rs[x]] += tag[x];\n\t\ttag2[rs[x]] *= tag2[x];\n\t}\n\ttag[x] = 0, tag2[x] = 1;\n}\nil int merge(int x,int y) {\n\tif(!x || !y) return x + y;\n\tpushdown(x), pushdown(y);\n\tif(s[x] > s[y]) swap(x,y);\n\trs[x] = merge(rs[x],y);\n\tif(dis[rs[x]] > dis[ls[x]]) swap(ls[x],rs[x]);\n\tdis[x] = dis[rs[x]] + 1;\n\treturn x;\n}\nsigned main() {\n\tint i;\n\tread(n), read(m);\n\tdep[1] = 1, dis[0] = -1;\n\tfor(i = 1; i <= n; i ++) read(h[i]), rt[i] = -1; \n\tfor(i = 2; i <= n; i ++) read(fa[i]), read(a[i]), read(v[i]), dep[i] = dep[fa[i]] + 1;//\u56e0\u4e3a\u9898\u4e2d\u89c4\u5b9a\u4e86f[i] < i, \u6240\u4ee5\u5728 fi\u7684\u6df1\u5ea6\u5728i\u4e4b\u524d\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e0b\u6765\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u7b97i\u7684\u6df1\u5ea6 \n\tfor(i = 1; i <= m; i ++) {\n\t\ttag2[i] = 1;\n\t\tread(s[i]), read(c[i]);\n\t\tif(~rt[c[i]]) rt[c[i]] = merge(rt[c[i]],i);//\u5408\u5e76\u653b\u51fb\u540c\u4e00\u8282\u70b9\u7684\u58eb\u5175 \n\t\telse rt[c[i]] = i;\n\t}\n\tfor(i = n; i; i --) {\n\t\twhile(rt[i] != -1) {\n\t\t\tif(s[rt[i]] < h[i]) {//\u5982\u679c\u6253\u4e0d\u4e0b\u6765 \n\t\t\t\td[rt[i]] = i, pushdown(rt[i]);//\u8be5\u58eb\u5175\u9635\u4ea1\uff0c\u8bb0\u5f97\u6807\u8bb0\u4e0b\u4f20 \n\t\t\t\tif(!ls[rt[i]]) rt[i] = -1;/*\u5de6\u504f\u6811\u7684\u6027\u8d28:\u91cd\u5fc3\u5411\u5de6\uff0c\u5de6\u8fb9\u7684\u8282\u70b9\u6570\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u53f3\u8fb9\n\t\t\t\t\t\t\t\t\t\t \t\u56e0\u6b64\uff0c\u5982\u679c\u5de6\u8fb9\u90fd\u6ca1\u6709\u4e86\uff0c\u53f3\u8fb9\u80af\u5b9a\u4e5f\u6ca1\u6709\uff0c\u8df3\u51fa\u3002 */\n\t\t\t\telse rt[i] = merge(ls[rt[i]],rs[rt[i]]);//\u5426\u5219\uff0c\u5408\u5e76\u5de6\u53f3\u513f\u5b50\uff0c\u4ea7\u751f\u65b0\u7684\u9876\u70b9\u4ee3\u66ff\u5f53\u524d\u9876\u70b9\uff0c\u7ee7\u7eed\u6bd4\u8f83 \n\t\t\t}\n\t\t\telse break;//\u5982\u679c\u9876\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u6574\u68f5\u5b50\u6811\u90fd\u6ee1\u8db3 \n\t\t} \n\t\tif(i == 1) break;//\u7279\u5224\uff0c\u5982\u679c\u5df2\u7ecf\u5230\u6811\u6839\uff0c\u5c31\u65e0\u6cd5\u518d\u5411\u4e0a\u4e86 \n\t\tif(rt[i] == -1) continue;//\u5982\u679c\u4e3a\u7a7a\u4e86\uff0c\u76f4\u63a5\u8df3\u51fa \n\t\tif(!a[i]) s[rt[i]] += v[i], tag[rt[i]] += v[i];\n\t\telse s[rt[i]] *= v[i], tag[rt[i]] *= v[i], tag2[rt[i]] *= v[i];\n\t\tpushdown(rt[i]);\n\t\tif(rt[fa[i]] == -1) rt[fa[i]] = rt[i];\n\t\telse rt[fa[i]] = merge(rt[fa[i]],rt[i]);//\u6574\u4f53\u4e0a\u8d70 \n\t}\n\tfor(i = 1; i <= m; i ++) siz[d[i]] ++;\n\tfor(i = 1; i <= n; i ++) write(siz[i]), puts(\"\");\n\tfor(i = 1; i <= m; i ++) write(dep[c[i]] - dep[d[i]]), puts(\"\");\n\treturn 0;\n}\n\n\n\n```",
        "postTime": 1615271091,
        "uid": 140643,
        "name": "crescentic",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3261 \u3010[JLOI2015]\u57ce\u6c60\u653b\u5360\u3011"
    }
]