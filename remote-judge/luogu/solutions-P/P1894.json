[
    {
        "content": "\u4e24\u4e2a\u6708\u524d\u8fc7\u7684\u4e8c\u5206\u56fe\u6a21\u677f\uff0c\u6ca1\u60f3\u5230\u4e24\u4e2a\u6708\u540e\u53c8\u80fd\u5728\u8fd9\u91cc\u9082\u9005\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u9898\uff08\u53cd\u6b63\u6211\u6ca1\u770b\u51fa\u533a\u522b\uff09\uff0c\u90a3\u5c31\u53d1\u7bc7\u9898\u89e3\u7eaa\u5ff5\u5427\n\n\u4e8c\u5206\u56fe\u538b\u538b\u884c\u771f\u7684\u5f88\u77ed\uff08~~\u81f3\u5c11\u6bd4SPFA\u3001BSGS\u77ed\u591a\u4e86~~\uff09\n### \u5c31\u50cf\u8fd9\u6837\uff1a\n```cpp\n#include<bits/stdc++.h>\nconst int N=201;\nint n,m,lk[N],g[N][N],v[N],ans;\nbool dfs(int now){\n\tfor(int i=1;i<=n;i++)\n\t\tif(!v[i]&&g[now][i]&&(v[i]=1))//\u5176\u5b9e\u5728&&\u4e2d\u4fee\u6539\u53d8\u91cf\u8fd8\u662f\u633a\u65b9\u4fbf\u7684\n\t\t\tif((!lk[i]||dfs(lk[i]))&&(lk[i]=now))return 1;//\u4e0e\u6216\u975e\u4f18\u5148\u7ea7\u61d2\u5f97\u7b97\u4e86\uff0c\u4e8e\u662f\u641e\u4e86\u4e00\u5806\u62ec\u53f7\n\treturn false;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,s,x;i<=n;i++){\n\t\tscanf(\"%d\",&s);\n\t\twhile(s--)scanf(\"%d\",&x),g[i][x]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tmemset(v,0,sizeof(v)),ans+=dfs(i);\n\treturn 0*printf(\"%d\",ans);\n}\n```\n\u5f00\u5b66\u540e\u53d1\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff08~~\u770b\u6211\u591a\u61d2~~\uff09",
        "postTime": 1571318695,
        "uid": 109401,
        "name": "\u5b81_\u7f3a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\uff08\u6628\u5929\u5b66\u957f\u4e0a\u8bfe\uff0c\u8bb2\u4e86\u4e00\u822c\u56fe\u7684\u5339\u914d\u548c\u7ebf\u6027\u89c4\u5212\uff0c\u7136\u800c\u6211\u8fd9\u4e2a\u8fde\u4e8c\u5206\u56fe\u5339\u914d\u90fd\u4e0d\u4f1a\u7684\u849f\u84bb\u6574\u8282\u8bfe\u90fd\u5728\u53d1\u5446\uff0c\u8868\u793a\u4ec0\u4e48\u4e5f\u542c\u4e0d\u61c2\uff0c\u6240\u4ee5\u4eca\u5929\u7279\u5730\u627e\u4e86\u4e8c\u5206\u56fe\u5339\u914d\u7684\u9898\u6765\u505a\u3002\uff08\u7136\u800c\u5e76\u6ca1\u4ec0\u4e48\u7528\uff0c\u8fd8\u662f\u770b\u4e0d\u61c2PPT\uff09\uff09\n\n\n\u8fd9\u662f\u4e00\u9053\u633a\u6c34\u7684**\u4e8c\u5206\u56fe\u5339\u914d**\uff0c\u4f46\u5bf9\u6e23\u6e23\u7684\u6211\u6765\u8bf4\u5df2\u7ecf\u5f88\u96be\u4e86\uff0c\u7406\u89e3\u5308\u7259\u5229\u7b97\u6cd5\u662f\u5173\u952e\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u7b97\u662f**\u5308\u7259\u5229\u7b97\u6cd5**\u7684\u6a21\u677f\uff08\u542c\u697c\u4e0b\u5927\u4f6c\u8bf4\u53ef\u4ee5\u7528**\u7f51\u7edc\u6d41**\u505a\uff0c\u4f46\u6211\u4e0d\u4f1a\uff0c\u53ea\u80fd\u7528\u5308\u7259\u5229\u7b97\u6cd5\uff09\n\n\n**\u4e8c\u5206\u56fe\uff1a**\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u6240\u6709\u7684\u8fb9\u7684\u7aef\u70b9\u90fd\u5728\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u6ca1\u6709\u5947\u6570\u8fb9\u7684\u73af\uff0c\u8fd9\u9898\u5c31\u53ef\u4ee5\u628a\u725b\u770b\u505a\u4e00\u4e2a\u96c6\u5408\uff0c\u628a\u725b\u680f\u770b\u505a\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u4e00\u5934\u725b\u559c\u6b22\u67d0\u4e2a\u725b\u680f\u8bf4\u660e\u8fd9\u4e24\u70b9\u4e4b\u95f4\u6709\u8fb9\u3002\n\n\n**\u5308\u7259\u5229\u7b97\u6cd5\uff1a**\u4e2a\u4eba\u611f\u89c9\u7c7b\u4f3c**\u641c\u7d22**\uff0c\u6240\u4ee5\u5728\u4ee3\u7801\u4e2d\u5c31\u76f4\u63a5\u7528**DFS**\u5b9e\u73b0\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528**BFS**\uff08\u7a00\u758f\u56fe\u8dd1\u7684\u8fd8\u662f\u5bbd\u641c\u5feb\uff0c\u4e0d\u8fc7\u7a20\u5bc6\u56fe\u5dee\u4e0d\u591a\uff0c\u4f46DFS\u5b9e\u73b0\u65b9\u4fbf\uff09\u5308\u7259\u5229\u7b97\u6cd5\u6838\u5fc3\u662f\u5bfb\u627e**\u589e\u5e7f\u8def**\uff0c\u5728\u627e\u4e00\u4e2a\u725b\u7684\u725b\u680f\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\u6ca1\u6709\u725b\u7684\u725b\u680f\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5426\u5219\u5c31**\u53d6\u53cd**\uff0c\u5047\u8bbe\u8fd9\u5934\u725b\u5148\u8fdb\u8fd9\u4e2a\u725b\u680f\uff0c\u7136\u540e\u672c\u6765\u7684\u725b\u5728\u8fdb\u884c\u4e00\u6b21\u5339\u914d\uff0c\u6210\u529f\u4e86\u8bf4\u660e\u627e\u5230\u589e\u5e7f\u8def\uff0c\u5426\u5219\u8fd9\u5934\u725b\u5c31\u6ce8\u5b9a\u6ca1\u6709\u725b\u680f\u4e86\u3002\n\n[\u5728\u7f51\u4e0a\u627e\u5230\uff0c\u5199\u7684\u633a\u597d\u7684\uff0c\u8bb2\u5308\u7259\u5229\u548c\u4e8c\u5206\u56fe\u5339\u914d](http://blog.csdn.net/thundermrbird/article/details/52231639)\n\n\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,ans,cow[1000];//cow[i]\u4ee3\u8868\u7b2ci\u4e2a\u725b\u680f\u7684\u725b\nbool vis[1000],k[1000][1000];//vis\u8bb0\u5f55\u662f\u5426\u641c\u8fc7\ninline int read(){//\u5feb\u8bfb\uff0c\u633a\u597d\u7528\u7684\u6a21\u677f\n    int k=0,f=1;char ch=getchar();//\u5b57\u7b26\u8bfb\u5165\uff0c\u6bd4\u8f83\u5feb\uff0c\u5927\u6570\u636e\u4f1a\u5f88\u6709\u7528\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){k=k*10+ch-'0';ch=getchar();}\n    return k*f;\n}\ninline void write(int x){//\u5feb\u8f93,\u540c\u6837\u662f\u6a21\u677f\n    if(x<0)x=-x,putchar('-');//\u8f93\u51fa\u8d1f\u53f7\n    if(x>9)write(x/10);putchar(x%10+'0');//\u9012\u5f52\u8f93\u51fa\n}\ninline void writeln(int x){\n    write(x);puts(\"\");//\u5b66\u8fc7Pascal\u7684\u5e94\u8be5\u90fd\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\uff08\u6362\u884c\u8f93\u51fa\uff09\n}\nbool dfs(int x){//\u5308\u7259\u5229\u7b97\u6cd5\u4e3b\u4f53\n    for(int i=1;i<=m;i++){\n        if(!vis[i]&&k[x][i]){//\u5982\u679c\u8fd9\u4e2a\u725b\u680f\u6ca1\u6709\u641c\u8fc7\u5e76\u4e14\u725b\u559c\u6b22\u8fd9\u4e2a\u680f\n            vis[i]=true;//\u5148\u5047\u8bbe\u8fd9\u5934\u725b\u4f4f\u8fdb\u4e86\u8fd9\u4e2a\u725b\u680f\n            if(cow[i]==0||dfs(cow[i])){//\u5982\u679ccow[i]=0\u8bf4\u660e\u672c\u6765\u6ca1\u6709\u725b\n                cow[i]=x;//\u5426\u5219\u628a\u539f\u6765\u7684\u725b\u8d76\u51fa\u53bb\uff0c\u91cd\u65b0\u8fdb\u884c\u5339\u914d\n                return true;//\u6709\u725b\u680f\u53ef\u4ee5\u4f4f\u8fdb\uff0c\u8fd4\u56de\u771f\n            }\n        }\n    }\n    return false;//\u6ca1\u6709\u725b\u680f\u53ef\u4ee5\u4f4f\u8fdb\uff0c\u8fd4\u56de\u5047\n}\nint main(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        int l=read();\n        while(l--){\n            k[i][read()]=true;//\u8fd9\u91cc\u7528\u5feb\u8bfb\u5c31\u4f1a\u663e\u5f97\u7b80\u6d01\u4e00\u70b9\n        }\n    }\n    for(int i=1;i<=n;i++){\n        memset(vis,false,sizeof vis);//\u4e00\u5f00\u59cb\u6240\u6709\u725b\u680f\u90fd\u6ca1\u6709\u641c\u8fc7\n        if(dfs(i))ans++;//\u5982\u679c\u53ef\u4ee5\u4f4f\u8fdb\u725b\u680f\u7b54\u6848\u52a0\u4e00\n    }\n    writeln(ans);//\u8f93\u51fa\u7b54\u6848\n    return 0;\n}\n```",
        "postTime": 1516676129,
        "uid": 27884,
        "name": "zhaotiensn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u6c34\u7684\u4e00\u9053\u4e8c\u5206\u56fe\u5339\u914d\n\n\u6838\u5fc3\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\n\uff08[\u521d\u5b66\u8005\u8bf7\u770b](https://blog.csdn.net/sunny_hun/article/details/80627351)\uff09\n\n\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u628a\u725b\u548c\u725b\u680f\u5206\u6210\u4e24\u4e2a\u96c6\u5408\n\u6bcf\u53ea\u725b\u53ef\u4ee5\u5339\u914d\u81f3\u5c11\u4e00\u4e2a\u725b\u680f\u3002\n\u5148\u904d\u5386\u725b\uff0c\u628a\u7b2c\u4e00\u53ea\u725b\u5339\u914d\u4e0a\u7b2c\u4e00\u4e2a\u725b\u680f\uff0c\u7136\u540e\u518d\u5bf9\u7b2c\u4e8c\u53ea\u725b\u8fdb\u884c\u5339\u914d\u3002\n\u5982\u679c\u7b2c\u4e8c\u53ea\u725b\u53ef\u4ee5\u5339\u914d\u5230\u7b2c\u4e00\u4e2a\u725b\u680f\uff0c\u800c\u8fd9\u65f6\u7b2c\u4e00\u53ea\u725b\u53c8\u6709\u53e6\u4e00\u79cd\u5339\u914d\u9009\u62e9\uff0c\u90a3\u4e48\u7b2c\u4e8c\u53ea\u725b\u5c31\u5339\u914d\u4e0a\u7b2c\u4e00\u4e2a\u725b\u680f\uff0c\u7b2c\u4e00\u53ea\u725b\u53bb\u627e\u53e6\u4e00\u4e2a\u725b\u680f\u6765\u5339\u914d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nint n,m,t,ans=0,x_[10001],y_[10001];\nbool flag[1001][1001],vis[10001];\n//flag\u8bb0\u5f55\u6bcf\u53ea\u725b\u53ef\u4ee5\u5339\u914d\u7684\u725b\u680f\n\ninline bool find(int x)\n{\n\tint i;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tif(flag[x][i]&&!vis[i])\n\t\t{//\u5982\u679c\u8fd9\u53ea\u725b\u80fd\u5339\u914d\u4e0a\u8fd9\u4e2a\u725b\u680f\u5e76\u4e14\u8fd9\u4e2a\u725b\u680f\u6ca1\u6709\u88ab\u5176\u4ed6\u725b\u5360\u636e\n\t\t\tvis[i]=true;\n\t\t\tif(y_[i]==-1||find(y_[i]))\n            //\u5982\u679c\u8fd9\u4e2a\u725b\u680f\u6ca1\u6709\u88ab\u5360\u636e\u6216\u8005\u8fd9\u4e2a\u725b\u680f\u53ef\u4ee5\u817e\u51fa\u6765\uff0c\u5373\u539f\u6765\u5360\u636e\u7684\u725b\u53ef\u4ee5\u627e\u5230\u53e6\u4e00\u4e2a\u725b\u680f\n            //\u8fd9\u91cc\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0\u5339\u914d\n\t\t\t{\n\t\t\t\tx_[i]=i;\n\t\t\t\ty_[i]=x;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\ninline void match()\n{\n\tint i;\n\tmemset(x_,-1,sizeof(x_));\n\tmemset(y_,-1,sizeof(y_));\n\t\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tmemset(vis,false,sizeof(vis));\n\t\tans+=find(i);\n  \t  //\u5982\u679c\u5339\u914d\u6210\u529f\uff0cfind(i)\u7684\u503c\u4e3a\u771f\uff0c\u5373\u4e3a1\n\t}\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tint i,j;\n\tcin>>n>>m;\n\t\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tcin>>t;\n\t\tfor(j=1;j<=t;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\tflag[i][x]=true;\n  \t\t\t//\u7b2ci\u53ea\u725b\u53ef\u4ee5\u5339\u914d\u7b2cx\u4e2a\u725b\u680f\n\t\t}\n\t}\n\t\n\tmatch();\n\t\n\tcout<<ans;\n  \n\treturn 0;\n}\n\n```\n",
        "postTime": 1562990404,
        "uid": 178906,
        "name": "Wind_yu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "## \u4e00\u4e2a\u5e26\u5f53\u524d\u5f27\u4f18\u5316\u7684$ISAP$\u9898\u89e3\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709$n$\u4e2a\u725b\uff0c$m$\u4e2a\u725b\u68da\uff0c\u6bcf\u5934\u725b\u6709\u591a\u4e2a\u53ef\u9009\u62e9\u7684\u725b\u68da\uff0c\u6c42\u51fa\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u725b\u4f4f\u8fdb\u725b\u68da\n\n### \u524d\u7f6e\u77e5\u8bc6\uff1aISAP\u7b97\u6cd5\n\n\u53ef\u4ee5\u770b~~pica~~\u5b66\u957f\u7684[\u535a\u5ba2](https://www.cnblogs.com/ubospica/p/9974285.html)\n\n### \u601d\u8def\n\n\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u53ef\u4ee5\u7528\u6700\u5927\u6d41\uff0c\u6211\u9009\u62e9\u7528$ISAP$\u8dd1\u6700\u5927\u6d41\uff0c\u901f\u5ea6\u5feb\n\n### \u5efa\u56fe\n\n(1) \u628a$0$\u5f53\u505a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5411\u4ece$1$\u5230$n$\u6240\u6709\u70b9\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\uff0c\u628a$n + m + 1$\u5f53\u505a\u8d85\u7ea7\u6c47\u70b9\uff0c\u4ece$n + 1$\u5230$n + m$\u5411\u5b83\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n(2) \u5bf9\u4e8e\u725b$i$\u7684\u6240\u6709\u9009\u62e9$x_1$\u5230$x_s$\uff0c\u4ece$i$\u5230$n + x_j$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n### \u8f93\u51fa\n\n\u8dd1$ISAP$\uff0c\u76f4\u63a5\u8f93\u51fa\u6700\u5927\u6d41\n\n### \u4ee3\u7801\uff08\u6709\u5f53\u524d\u5f27\u4f18\u5316\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nusing std::queue;\n\nconst int MAXN = 205;\nconst int MAXM = 205;\nconst int INF = 0x3f3f3f3f;\n\nint n, m;\n\nstruct Edge{\n    int to, val;\n    Edge *next, *opps;\n    Edge(int to, int val, Edge* next):to(to), val(val), next(next){}\n};\n\nEdge *head[MAXN + MAXM];\n\nvoid AddEdge(int from, int to, int val) {\n    head[from] = new Edge(to, val, head[from]);\n    head[to] = new Edge(from, 0, head[to]);\n    head[to]->opps = head[from]; head[from]->opps = head[to];\n}\n\nnamespace ISAP{\n    Edge *cur[MAXN + MAXM];\n    int dep[MAXN + MAXM], gap[MAXN + MAXM];\n    int s, t, maxflow = 0;\n\n    void Bfs() {\n        memset(dep, -1, sizeof(dep));\n        memset(gap, 0, sizeof(gap));\n        dep[t] = 0; gap[dep[t]]++;\n        queue<int> q;\n        q.push(t);\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (Edge *e = head[u]; e; e = e->next) {\n                int v = e->to;\n                if (dep[v] != -1) continue;\n                dep[v] = dep[u] + 1;\n                gap[dep[v]]++;\n                q.push(v);\n            }\n        }\n    }\n\n    int Dfs(int u, int flow) {\n        if (u == t) {\n            maxflow += flow;\n            return flow;\n        }\n        int used = 0;\n        for (Edge *&e = cur[u]; e; e = e->next) {//\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u9700\u8981\u53d6\u5740\u4fee\u6539\u5f53\u524d\u5f27\n            int v = e->to;\n            if (dep[v] == dep[u] - 1 && e->val) {\n                int mi = Dfs(v, std::min(flow - used, e->val));\n                if (mi) {\n                    used += mi;\n                    e->val -= mi;\n                    e->opps->val += mi;\n                    if (used == flow) return flow;\n                }\n            }\n        }\n        gap[dep[u]]--;\n        if (gap[dep[u]] == 0) dep[s] = n + 1;\n        dep[u]++;\n        gap[dep[u]]++;\n        cur[u] = head[u];//\u590d\u539f\u5f53\u524d\u5f27\n        return used;\n    }\n\n    void Work() {\n        for (int i = 0; i <= n + m + 1; i++) cur[i] = head[i];\n        maxflow = 0;\n        Bfs();\n        while (dep[s] < n) Dfs(s, INF);\n    }\n}\n\nint main() {\n    memset(head, 0, sizeof(head));\n    scanf(\"%d %d\", &n, &m);\n    ISAP::s = 0; ISAP::t = n + m + 1;\n    for (int i = 1; i <= n; i++) AddEdge(0, i, 1);\n    for (int i = 1; i <= m; i++) AddEdge(n + i, n + m + 1, 1);\n    for (int i = 1, p; i <= n; i++) {\n        scanf(\"%d\", &p);\n        for (int j = 1, x; j <= p; j++) {\n            scanf(\"%d\", &x);\n            AddEdge(i, n + x, 1);\n        }\n    }\n    ISAP::Work();\n    printf(\"%d\\n\", ISAP::maxflow);\n    return 0;\n}\n/*\n5 5\n2 2 5\n3 2 3 4\n2 1 5\n3 1 2 5\n1 2\n*/\n```\n\n\u7531\u4e8e\u6211\u662f\u4e2a\u61d2\u4eba\uff0c\u4e0d\u613f\u610f\u7b97\u6700\u591a\u6709\u591a\u5c11\u6761\u8fb9\uff0c\u6240\u4ee5\u4f7f\u7528\u4e86\u6781\u5176\u62d6\u6162\u65f6\u95f4\u7684$new$\u51fd\u6570\u52a8\u6001\u5f00\u7a7a\u95f4\u5efa\u8fb9\u3002\u4f46\u662f\u5373\u4f7f\u8fd9\u6837\uff0c\u4e5f\u53ea\u8dd1\u4e86$26ms$\uff0c\u8bf4\u660e$ISAP$\u7684\u6548\u7387\u5f88\u9ad8",
        "postTime": 1549186357,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u786e\u53ef\u4ee5\u7528\u4e8c\u5206\u56fe\u5339\u914d\u6765\u505a\uff0c\u4f46\u662f\u505a\u5b8c[P2740](https://www.luogu.org/problemnew/show/P2740)\u7f51\u7edc\u6d41\u88f8\u9898\u4e4b\u540e\uff0c\u61d2\u5f97\u518d\u5199\u592a\u591a\u4ee3\u7801\uff0c\u4e8e\u662f\u5c31\u5728\u8fd9\u57fa\u7840\u4e0a\u6539\u4e86\u6539\u3002\n\n\u5982\u679c\u4e0d\u77e5\u9053\u7f51\u7edc\u6d41\u600e\u4e48\u5199\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u4eba\u4e8c\u5206\u56fe\u5339\u914d\u6cd5\u7684\u9898\u89e3~~\u6216\u8005\u968f\u4fbf\u641c\u4e00\u7bc7\u7f51\u7edc\u6d41\u6a21\u677f\u9898\u7684\u9898\u89e3~~\u3002\n\n\u5728\u539f\u56fe\u57fa\u7840\u4e0a\u591a\u5efa\u4e00\u4e2a\u8d77\u70b9$1$\u53f7\u70b9\u548c\u7ec8\u70b9$n+m+2$\u53f7\u70b9\uff0c\u4e8e\u662f\u539f\u56fe\u70b9\u7684\u4e2a\u6570\u4ece$n+m$\u589e\u52a0\u5230\u4e86$n+m+2$\u3002\n\n\u7136\u540e\u4ece$1$\u53f7\u70b9\u5411$2$ ~ $n+1$\u53f7\u70b9\u5404\u8fde\u4e00\u6761\u8fb9\uff0c\u518d\u4ece$n+2$ ~ $n+m+1$\u53f7\u70b9\u5411$n+m+2$\u53f7\u70b9\u5404\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u7f51\u7edc\u6d41\u5c31\u53ef\u4ee5\u5566\u3002\n\n\u7531\u4e8e\u672c\u4eba\u592a\u61d2\uff0c\u53ea\u5199\u4e86EK\uff0c\u6ca1\u52a0\u4f18\u5316\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\u4f7f\u7528\u6548\u679c\u3002\n\n\u76f4\u63a5\u8d34\u4ee3\u7801\uff1a\uff08\u5df2\u505a\u9632\u6284\u88ad\u5904\u7406\uff09\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nint a[maxn][maxn], pre[maxn], flow[maxn];\n\nint bfs(){\n\tqueue<int> q;\n\twhile(!q.empty()) q.pop();\n\tq.push(1);\n\tpre[1] = 0;\n\tfor(int i = 2; i <= m; i++) pre[i] = -1;\n\tflow[1] = inf;\n\twhile(!q.empty()){\n\t\tint h = q.front();\n\t\tq.pop();\n\t\tfor(int i = 1; i <= m; i++){\n\t\t\tif(i == h) continue;\n\t\t\tif(pre[i] + 1) continue;\n\t\t\tif(a[h][i] == 0) continue;\n\t\t\tflow[i] = min(flow[h], a[h][i]);\n\t\t\tpre[i] = h;\n\t\t\tq.push(i);\n\t\t\tif(i == m) return flow[i];\n\t\t}\n\t}\n\treturn -1;\n}\n\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++){\n\t\ta[1][i + 1] = 1;//\u4ece1\u53f7\u70b9\u54112 ~ n+1\u53f7\u70b9\u8fde\u8fb9\n\t\tint s, x;\n\t\tscanf(\"%d\", &s);\n\t\tfor(int j = 1; j <= s; j++){\n\t\t\tscanf(\"%d\", &x);\n\t\t\ta[i + 1][x + n + 1] = 1;//\u6b63\u5e38\u8fde\u8fb9\n\t\t}\n\t}\n\tfor(int i = n + 2; i <= n + m + 1; i++)\n\t\ta[i][n + m + 2] = 1;//\u4ecen+2 ~ n+m+1\u53f7\u70b9\u5411n+m+2\u53f7\u70b9\u8fde\u8fb9\n\tm += n + 2;//\u6b64\u5904\u662f\u6211\u672c\u6765\u5c31\u9ed8\u8ba4m\u4e3a\u70b9\u7684\u4e2a\u6570\uff0c\u4f46\u8fd9\u9053\u9898\u6211\u4e00\u5171\u521b\u5efa\u4e86n+m+2\u4e2a\u70b9\uff0c\u6240\u4ee5\u8981\u5728m\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0an+2\n\tint ans = 0, inc = 0;\n    //\u7f51\u7edc\u6d41\u6838\u5fc3\u4ee3\u7801\n\twhile((inc = bfs()) + 1){//\u6ce8\u610f\u62ec\u53f7\u987a\u5e8f\n\t\tint x = m;\n\t\twhile(x != 1){//\u4ece\u540e\u5f80\u524d\u627e\uff0c\u5e76\u8fde\u53cd\u5411\u8fb9\n\t\t\ta[pre[x]][x] -= inc;\n\t\t\ta[x][pre[x]] += inc;\n\t\t\tx = pre[x];\n\t\t}\n\t\tans += inc;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1564497598,
        "uid": 54055,
        "name": "ytm2004",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\t# \u7b2c\u4e00\u773c\u770b\u662f\u5308\u7259\u5229\u7b97\u6cd5\u6ca1\u9519\n    \n    ## \u4e0d\u52a0\u4f18\u5316\u7684\u5308\u7259\u5229\u80fd\u79d2A\uff0c\u4f46\u8fd8\u662f\u60f3\u7528\u7f51\u7edc\u6d41\n\n\t**\u7f51\u7edc\u6d41\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u8d85\u7ea7\u6e90\u70b9\u4e0e\u6bcf\u5934\u725b\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u6bcf\u5934\u725b\u4e0e\u5176\u559c\u6b22\u7684\u725b\u680f\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u6bcf\u4e2a\u725b\u680f\u518d\u4e0e\u8d85\u7ea7\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u3002\u8fd9\u6837\u56fe\u5c31\u5efa\u597d\u4e86\u3002**\n\n\t\u7136\u540e\u6211\u662f\u7528dinic\u8dd1\u4e86\u4e00\u904d\u6700\u5927\u6d41\u3002\n    \n    \u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1000005;\nint n,m,s,t,cnt,x,y,z,head[maxn],dis[maxn],q[maxn];\nstruct node{\n    int next;\n    int to;\n    int w;\n}edge[maxn];\nvoid add(int x,int y,int z){\n    cnt++;\n    edge[cnt].to=y;\n    edge[cnt].next=head[x];\n    edge[cnt].w=z;\n    head[x]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u661f\n\nint dfs(int d,int ll){\n    if (d==t) return ll;\n    for (int i=head[d];i!=-1;i=edge[i].next){\n        if (dis[edge[i].to]==dis[d]+1 && edge[i].w!=0){\n            int ans=dfs(edge[i].to,min(ll,edge[i].w));\n            if (ans>0){\n                edge[i].w-=ans;\n                edge[i^1].w+=ans;\n                return ans;\n            }\n        }\n    }\n    return 0;\n}\nint bfs(){\n    memset(dis,0,sizeof(dis));\n    queue<int> q;\n    while (!q.empty()) q.pop();\n    dis[s]=1;\n    q.push(s);\n    while (!q.empty()) {\n    int p=q.front();\n    q.pop();\n    for (int i=head[p];i!=-1;i=edge[i].next){\n        if (edge[i].w>0 && dis[edge[i].to]==0){\n            dis[edge[i].to]=dis[p]+1;\n            q.push(edge[i].to);\n        }\n    }\n    }\n    if (dis[t]!=0) return 1;\n    else return 0;\n}\nint dinic(){\n    int anss=0;\n    while (bfs()){\n        int f=-1;\n        while (f!=0) {\n            f=dfs(s,maxn);\n            anss+=f;\n            \n        } \n    }\n    return anss;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    s=0;\n    t=n+m+1;\n    cnt=0;\n    memset(head,-1,sizeof(head));\n    for (int i=1;i<=n;++i) {\n        add(s,i,1);\n        add(i,s,0);\n    }\n    for (int i=1;i<=m;++i){\n        scanf(\"%d\",&x);\n        for (int j=1;j<=x;++j){\n            scanf(\"%d\",&y);\n            add(i,y+n,1);\n            add(y+n,i,1);\n        }\n    }\n    for (int i=1;i<=m;++i){\n        add(n+i,t,1);\n        add(t,n+i,1);\n    }//\u5efa\u8fb9\n    printf(\"%d\\n\",dinic());//dinic\u8dd1\u6700\u5927\u6d41\n    return 0;\n}\n```",
        "postTime": 1531969105,
        "uid": 56903,
        "name": "\u7b19\u6b4c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u3002\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\uff0c\u4f46\u662f\u63a8\u8350\u7528\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4ee3\u7801\u5f88\u77ed\uff0c\u800c\u4e14\u6548\u7387\u5f88\u9ad8\u3002\u4e8c\u5206\u5339\u914d\u7528\u7f51\u7edc\u6d41\u505a\u5c31\u6ca1\u5fc5\u8981\u7528Dijkstra \u4e86\uff0c\u96be\u5199\u53c8\u8d85\u65f6\u3002\u6700\u7b80\u5355\u7684\u641c\u51fa\u4e00\u6761\u8def\u5c31\u884c\u4e86\uff0c\u88f8\u7684\u5308\u7259\u5229\u4e0d\u52a0\u4f18\u5316\u5373\u53ef\uff0c\u65f6\u95f4\u8db3\u591f\u4f18\u3002\u4e0b\u9644C++\u4ee3\u7801\u3002\u5f53\u7136\u4e00\u4e9bNOIP\u9009\u624b\u8be5\u7528Djikstra\u5c31\u7528\u5427...\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint p,i,j,k,m,n,ans=0;\nbool a[205][205];\nint cow[205],look[205];\nint efpp(int x){\n    int j;\n    for(j=1;j<=m;j++)\n       if(a[x][j]&&!look[j]){\n          look[j]=1;\n          if(cow[j]==0||efpp(cow[j]))\n             { cow[j]=x; return 1; }\n       }\n    return 0;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++){\n        scanf(\"%d\",&k);\n        for(j=1;j<=k;j++){ \n            scanf(\"%d\",&p);\n            a[i][p]=1;\n        }                  \n    }\n    for(i=1;i<=n;i++){\n       memset(look,0,sizeof(look));\n       efpp(i);\n    }\n    for(i=1;i<=m;i++)\n       if(cow[i]>0)\n          ans++;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1504276522,
        "uid": 39922,
        "name": "vinvor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "### \u9898\u76ee\n[\u6821\u5185OJ](http://222.180.160.110:1024/problem/5744)\n[\u6d1b\u8c37](https://www.luogu.com.cn/problem/P1894)\n\n### \u5206\u6790\n##### 1.\u8003\u70b9\n\u4e8c\u5206\u56fe\n##### 2.\u601d\u8def\n\u663e\u7136\u8fd9\u9053\u9898\u662f\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\u5c06\u725b\u680f\u548c\u725b\u770b\u505a\u4e24\u4e2a\u70b9\u96c6\uff0c\u5c31\u53ef\u4ee5\u7528\u5308\u7259\u5229\u7b97\u6cd5\u4e86\uff1a\n\n\u5728\u679a\u4e3e\u7b2c$i$\u53ea\u725b\u5339\u914d\u7684\u725b\u680f\uff0c\u5bf9\u5b83\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u6210\u529f\uff0c\u5219\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6211\u4eec\u5728\u4e3a\u7b2c$i$\u53ea\u725b\u5339\u914d\u65f6\uff0c\u901a\u8fc7\u679a\u4e3e\u5339\u914d\u725b\u680f\u3002 \n\n\u5982\u679c\u5339\u914d\u7684\u7b2c$j$\u4e2a\u725b\u680f\u5df2\u7ecf\u88ab\u7b2c$k$\u53ea\u725b\u5339\u914d\uff0c\u5c1d\u8bd5\u5c06\u7b2c$k$\u53ea\u725b\u6362\u4e00\u4e2a\u725b\u680f\u3002 \n\n\u82e5\u7b2c$k$\u53ea\u725b\u65e0\u6cd5\u53e6\u884c\u5339\u914d\uff0c\u7b2c$i$\u53ea\u725b\u679a\u4e3e\u4e0b\u4e00\u4e2a\u725b\u680f\u8fdb\u884c\u5339\u914d\u3002\n\n\u53ef\u4ee5\u7528\u6570\u7ec4\u7ef4\u62a4\u6bcf\u53ea\u725b\u73b0\u5339\u914d\u7684\u725b\u680f\u3002\n\n### \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int MAXN = 1005;\nint n, m, ans, cow[MAXN];\nbool vis[MAXN], G[MAXN][MAXN];\nbool dfs(int x){\n    for(int i = 1; i <= m; i++){\n        if(G[x][i] && !vis[i]){\n            vis[i] = true;\n            if(!cow[i] || dfs(cow[i])){\n                cow[i] = x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 1, t, k; i <= n; i++){\n        scanf(\"%d\", &k);\n        while(k--) {\n        \tscanf(\"%d\", &t);\n            G[i][t] = true;\n\t\t}\n    }\n    for(int i = 1; i <= n; i++){\n        memset(vis, false, sizeof(vis));\n        if(dfs(i)) ans++;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1578702696,
        "uid": 106459,
        "name": "lztmdrclht",
        "ccfLevel": 0,
        "title": "[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680f"
    },
    {
        "content": "\u5178\u578b\u7684**\u4e0d\u5e26\u6743\u4e8c\u5206\u56fe\u5339\u914d**\uff08~~\u5957\u6a21\u677f\u5c31\u597d~~\uff09\n\n\u5bf9\u4e8e\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\uff0c\u6709\u4e24\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\uff0c**\u7f51\u7edc\u6d41**\u548c**\u5308\u7259\u5229**\uff08\u7f51\u7edc\u6d41\u8981\u5feb\u7684\u591a\u4e14\u80fd\u89e3\u51b3\u7684\u95ee\u9898\u66f4\u591a\uff0c\u66f4\u7075\u6d3b\uff0c\u4f46\u5308\u7259\u5229\u66f4\u65b9\u4fbf\u597d\u5199\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u3002\uff09\n\n### \u5308\u7259\u5229 (\u7565)\uff1a\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u5bfb\u627e\u5339\u914d\u548c\u8c26\u8ba9\u7684\u8fc7\u7a0b\uff0c\u6548\u7387\u4e0d\u9ad8,\u4e2a\u4eba\u8ba4\u4e3a\u53ef\u4ee5\u8df3\u8fc7\u76f4\u63a5\u5b66\u7f51\u7edc\u6d41\u3002\n\n\u5177\u4f53\u7684\u770b\u7740\u5427\uff1a[\u4e8c\u5206\u56fe\u5339\u914d---\u5308\u7259\u5229\u7b97\u6cd5](https://blog.csdn.net/sunny_hun/article/details/80627351)\n\n\u8be6\u89c1\u4ee3\u7801\uff08\u79c1\u4ee5\u4e3a\u7801\u98ce\u8fd8\u884c\uff09\uff1a\n\n```\n#include<bits/stdc++.h>\n#define maxn 1005\nusing namespace std;\nint n,m,x,y,e,Ans,Now[maxn],tot,k;\nbool vis[maxn],a[maxn][maxn];\ninline int read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-f;ch=getchar();}\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\ninline bool Dfs(int x){\n\tfor (int i=1;i<=m;i++)\n\t  if (!vis[i]&&a[x][i]){\n\t     vis[i]=1;\n\t     if (!Now[i]||Dfs(Now[i])){Now[i]=x;return 1;}\n          }\n\treturn 0;\n}\nint main(){\n   n=read(),m=read();\n   for (int i=1;i<=n;i++){\n\tk=read();\n\tfor (int j=1;j<=k;j++) x=read(),a[i][x]=1;\n   }\n   for (int i=1;i<=n;i++) Ans+=Dfs(i),memset(vis,0,sizeof vis);\n   printf(\"%d\",Ans);\n   return 0;\n}\n```\n\n## \u7f51\u7edc\u6d41\uff1a\n\n\u7f51\u7edc\u6d41\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7b97\u6cd5\uff0c\u80fd\u89e3\u51b3\u5f88\u591a\u590d\u6742\u7684\u95ee\u9898\u3002\n\n\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22Dinic\uff0c\u65f6\u95f4\u590d\u6742\u5ea6n * k * k\uff08EK\u662fn * n * k\uff0c\u7a00\u758f\u56fe\u5dee\u4e0d\u591a\uff0c\u4f46\u7a20\u5bc6\u56feDinic\u8981\u5feb\u7684\u591a\uff0c\u800c\u4e14\u4ee3\u7801\u91cf\u4e5f\u5dee\u4e0d\u591a\uff09\n\nDinic\u7684\u7b97\u6cd5\u8fc7\u7a0b\u53ef\u4ee5\u76f4\u63a5\u5957\u6a21\u677f\uff0c\u6211\u4eec\u8981\u638c\u63e1\u7684\u5c31\u662f\u56fe\u8bba\u6700\u91cd\u8981\u7684\u4e00\u73af **\u5982\u4f55\u5efa\u8fb9**\n\n\u56e0\u4e3a\u6709\u591a\u4e2a\u6e90\u70b9\u548c\u591a\u4e2a\u6c47\u70b9\uff0c\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u90fd\u662f\u5efa\u4e00\u4e2a**\u865a\u62df\u7684\u8d85\u7ea7\u6e90\u70b9**\u548c\u4e00\u4e2a**\u865a\u62df\u7684\u8d85\u7ea7\u6c47\u70b9**\uff0c\u8d85\u7ea7\u6e90\u70b9\u5411\u6240\u6709\u725b\u5efa\u4e00\u6761**\u8fb9\u957f\u4e3a1**\u7684\u8fb9\uff0c\u6240\u6709\u725b\u680f\u5411\u8d85\u7ea7\u6c47\u70b9\u7684\u4e00\u6761**\u8fb9\u957f\u4e3a1**\u7684\u8fb9\uff0c\u518d\u5237\u4e00\u8d9f\u8d85\u7ea7\u6e90\u70b9\u5230\u8d85\u7ea7\u6c47\u70b9\u7684Dinic\u5c31\u597d\u4e86\n\n\u4e0d\u4f1aDinic\u7684\u770b\u8fd9\u91cc\uff1a[Dinic](https://baijiahao.baidu.com/s?id=1612179096991409044&wfr=spider&for=pc)\n\n\u4ee3\u7801\uff08\u4ec5\u4f9b\u53c2\u8003\uff09\uff1a\n\n```\n#include<bits/stdc++.h>\n#define maxn 5005\nusing namespace std;\nint n,m,Q[maxn],e,lnk[maxn],nxt[maxn*maxn],S,k,T,son[maxn*maxn],w[maxn*maxn],tot=1,x,y,Dep[maxn];\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\ninline void add(int x,int y,int z){nxt[++tot]=lnk[x];lnk[x]=tot;son[tot]=y;w[tot]=z;}\ninline bool Bfs(){\n\tint hed=0,til=1;\n\tmemset(Dep,0,sizeof Dep);\n\tQ[1]=S;Dep[S]=1;\n\twhile (hed!=til){\n\t\thed++;\n\t\tfor (int i=lnk[Q[hed]];i;i=nxt[i])\n\t\t  if (!Dep[son[i]]&&w[i]>0){\n\t\t  \tDep[son[i]]=Dep[Q[hed]]+1;\n\t\t  \tQ[++til]=son[i];\n\t\t  }\n\t}\n\treturn Dep[T];\n}\ninline int Dfs(int x,int flow){\n\tif (x==T) return flow;\n\tint sum=0;\n\tfor (int i=lnk[x];i&&sum<flow;i=nxt[i])\n\t  if (Dep[son[i]]==Dep[x]+1&&w[i]){\n\t  \tint Now=Dfs(son[i],min(w[i],flow-sum));\n\t  \tw[i]-=Now,w[i^1]+=Now;\n\t  \tsum+=Now;\n\t  }\n\t  return sum;\n}\ninline int Dinic(){\n\tint Ans=0;\n\twhile (Bfs()) Ans+=Dfs(S,1<<30);\n    return Ans;\n}\nint main(){\n\tn=read(),m=read();S=1,T=n+m+2;\n\tfor (int i=1;i<=n;i++){\n    \tk=read();\n    \tfor (int j=1;j<=k;j++) x=read()+n+1,add(i+1,x,1),add(x,i+1,0);\n    }\n\tfor (int i=1;i<=n;i++) add(S,i+1,1),add(i+1,S,0);\n\tfor (int i=1;i<=m;i++) add(i+n+1,T,1),add(T,i+n+1,0);\n\tprintf(\"%d\",Dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1565782792,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "# \u5c0f\u849f\u84bb\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\u6709\u70b9\u7d27\u5f20... ...\n--------------------------\u5206\u5272\u7ebf--------------------------\n\n\u8fd9\u9053\u9898\u561b...\u5f88\u660e\u663e\u4e00\u9053\u6bd4\u8f83\u6c34\u7684\n## \u4e8c\u5206\u56fe\u5339\u914d\u6a21\u7248\u9898~~\n\n\u4e8e\u662f\u5c31\u80fd\u5341\u5206\u6109\u5feb\u7684\u7528\u5308\u7259\u5229\u7b97\u6cd5\u8dd1\u4e86 ~~\u53ef\u60dc\u4e0d\u4f1a\u7f51\u7edc\u6d41~~\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstring>\n#include<iostream>\nusing namespace std;\nint y[210]={0},n,m,ans=0;\nbool used[210]={0},line[210][210]={false};\n\nbool find(int x)//dfs\u672c\u4f53\n{\n\tfor(int i=1;i<=m;i++)\n\t\tif(line[x][i]&&!used[i])\n\t\t{\n\t\t\tused[i]=true;\n\t\t\tif(y[i]==0||find(y[i]))\n\t\t\t{\n\t\t\t\ty[i]=x;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\treturn false;\n}\n\nvoid solve()//\u5308\u7259\u5229\u7b97\u6cd5\u6a21\u7248\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmemset(used,0,sizeof(used));\n\t\tif(find(i))ans++;\n\t}\n}\n\nvoid input()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint n,x;\n\t\tcin>>n;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>x;\n\t\t\tline[i][x]=true;\n\t\t} \n\t}\n}\n\nint main()\n{\n\tinput();\n\tsolve();\n\tcout<<ans;\n\treturn 0;\n}\n```\n\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\u8c22\u8c22\u5179\u74f7~\n\n\u819c\u62dc\u5927\u4f6c\u4eecorz",
        "postTime": 1545372108,
        "uid": 40796,
        "name": "wohohohoho",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "## \u5f15\u5bfc\uff1a\n\n\u9996\u5148\u6211\u4eec\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u660e\u767d\u4e00\u4e2a\u4e1c\u897f\u53eb\u505a\u5308\u7259\u5229\u7b97\u6cd5\uff01\n\n\u5728\u8fd9\u91cc\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u3002\u3002\n\n\u795e\u5947\u7684\u4f20\u9001\u95e8\n\n[\u6253\u5f00\u4e8c\u5206\u56fe\u7684\u4e16\u754c\uff08\u57fa\u672c\u7b97\u6cd5\uff09](https://blog.csdn.net/Dark_Scope/article/details/8880547)\n\n[\u6253\u5f00\u4e8c\u5206\u56fe\u7684\u4e16\u754c\uff08\u57fa\u672c\u6982\u5ff5\uff09](https://blog.csdn.net/qq_36345036/article/details/76977294)\n\n------------\n\n## \u601d\u8def\uff1a\n\n\u90a3\u4e48\u7406\u89e3\u5308\u7259\u5229\u7b97\u6cd5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u660e\u767d\u7684\u8fd9\u9053\u9898\u65e0\u975e\u5c31\u662f\u6c42**\u6700\u5927\u5339\u914d\u96c6**\u3002\u8fd9\u65f6\u91cd\u70b9\u6765\u4e86\uff1a\u6211\u4eec\u8981\u660e\u767d\u5982\u4f55\u653e\u7f6e\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5176\u65b9\u4fbf\u6211\u4eec\u6c42**\u6700\u5927\u5339\u914d\u96c6**\u3002\u6839\u636e\u9898\u610f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u5976\u725b\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u725b\u68da\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u3002\u7136\u540e\u5c31\u662f\u7528\u5308\u7259\u5229\u7b97\u6cd5\u8dd1\u51fa**\u6700\u5927\u5339\u914d\u96c6**\u3002\n\n\n\n------------\n\n### **\u4e2a\u4eba\u5efa\u8bae**\uff1a\u8ddf\u7740\u4ee3\u7801\u8d70\u4e00\u904d\uff0c\u81ea\u5df1\u5728\u8349\u7a3f\u7eb8\u4e0a\u753b\u753b\u3002\n\n\u8be6\u89e3\u89c1\u4ee3\u7801\uff1a\n\n```c\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\nusing namespace std;\nint n, m, e;\nvector<int> v[2009];\nbool bi[2009];  // \u6807\u8bb0\u4e00\u6b21 dfs \u8fc7\u7a0b\u4e2d\uff0cY \u96c6\u5408\u4e2d\u7684\u9876\u70b9\u662f\u5426\u5df2\u8bbf\u95ee\nint ans[2009]; // \u6807\u8bb0 Y \u96c6\u5408\u4e2d\u7684\u9876\u70b9\u5339\u914d\u7684 X \u96c6\u5408\u4e2d\u7684\u9876\u70b9\u7f16\u53f7\n\nbool dfs(int x)\n{\n\tfor (int i = 0; i < v[x].size(); i++){\n\t\tint mmp = v[x][i];      // \u4e0d\u8981\u592a\u5728\u610f\u53d8\u91cf\u540d\uff0c\u8fd9\u662f\u53ea\u662f\u6765\u63a7\u8bc9\u4e00\u4e0b\u6211\u4ee5\u524d\u5728\u957f\u6c99\u5b66\u8fd9\u4e2a\u7684\u7edd\u671b\u3002 \n\t\tif (!bi[mmp]){ // \u5982\u679c Y \u96c6\u5408\u4e2d\u7684 x \u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\n\t\t\tbi[mmp] = 1;\n\t\t\tif (ans[mmp] == -1 || dfs(ans[mmp])){  // \u5982\u679c mmp \u6ca1\u6709\u5339\u914d\u70b9\uff0c\u6216 mmp \u7684\u5339\u914d\u70b9\u80fd\u627e\u5230\u4e00\u6761\u5230\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u7684\u589e\u5e7f\u8def\uff0c\u5219\u5c06 mmp \u7684\u5339\u914d\u70b9\u8bbe\u4e3a x \n\t\t\t\tans[mmp] = x;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0; // \u5982\u679c\u6ca1\u6709\u627e\u5230\u589e\u5e7f\u8def \n } \n\nint main()\n{\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= n; i++){\n\t\tint a; scanf(\"%d\", &a);\n\t\tfor (int j = 1; j <= a; j++){\n\t\t\tint b; scanf(\"%d\", &b);\n\t\t\tv[i].push_back(b);\n\t\t}\n\t}\n\t\n\tint ansx = 0;\n\tmemset(ans, -1, sizeof(ans)); // \u521d\u59cb\u5c06\u6240\u6709 Y \u96c6\u5408\u4e2d\u9876\u70b9\u7684\u5339\u914d\u7f16\u53f7\u8bbe\u4e3a -1\n\t\n\tfor (int i = 1; i <= n; i++){\n\t\tmemset(bi, 0, sizeof(bi));// \u8fdb\u884c dfs \u524d\uff0c\u5c06 bi \u6e05\u7a7a\n\t\tif (dfs(i))\tansx++; // \u5982\u679c\u627e\u5230\u589e\u5e7f\u8def\uff0c\u5219\u5c06 ansx\u7d2f\u52a0 1\n\t}\n\t\n\tprintf(\"%d\", ansx); // ansx\u5c31\u662f \u6700\u5927\u5339\u914d\u6570 \n\treturn 0;\n    //\u529f\u5fb7\u5706\u6ee1\n}\n```",
        "postTime": 1541298836,
        "uid": 114633,
        "name": "\u8d1e\u767d\u5468\u9038\u6c11",
        "ccfLevel": 0,
        "title": "P1894 \u5b8c\u7f8e\u7684\u725b\u680f"
    },
    {
        "content": "## \u9898\u9762\n\n\u519c\u592b\u7ea6\u7ff0\u4e0a\u4e2a\u661f\u671f\u521a\u521a\u5efa\u597d\u4e86\u4ed6\u7684\u65b0\u725b\u68da\uff0c\u4ed6\u4f7f\u7528\u4e86\u6700\u65b0\u7684\u6324\u5976\u6280\u672f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u5de5\u7a0b\u95ee\u9898\uff0c\u6bcf\u4e2a\u725b\u680f\u90fd\u4e0d\u4e00\u6837\u3002\u7b2c\u4e00\u4e2a\u661f\u671f\uff0c\u519c\u592b\u7ea6\u7ff0\u968f\u4fbf\u5730\u8ba9\u5976\u725b\u4eec\u8fdb\u5165\u725b\u680f\uff0c\u4f46\u662f\u95ee\u9898\u5f88\u5feb\u5730\u663e\u9732\u51fa\u6765\uff1a\u6bcf\u5934\u5976\u725b\u90fd\u53ea\u613f\u610f\u5728\u5979\u4eec\u559c\u6b22\u7684\u90a3\u4e9b\u725b\u680f\u4e2d\u4ea7\u5976\u3002\u4e0a\u4e2a\u661f\u671f\uff0c\u519c\u592b\u7ea6\u7ff0\u521a\u521a\u6536\u96c6\u5230\u4e86\u5976\u725b\u4eec\u7684\u7231\u597d\u7684\u4fe1\u606f\uff08\u6bcf\u5934\u5976\u725b\u559c\u6b22\u5728\u54ea\u4e9b\u725b\u680f\u4ea7\u5976\uff09\u3002\u4e00\u4e2a\u725b\u680f\u53ea\u80fd\u5bb9\u7eb3\u4e00\u5934\u5976\u725b\uff0c\u5f53\u7136\uff0c\u4e00\u5934\u5976\u725b\u53ea\u80fd\u5728\u4e00\u4e2a\u725b\u680f\u4e2d\u4ea7\u5976\u3002\n\n\u7ed9\u51fa\u5976\u725b\u4eec\u7684\u7231\u597d\u7684\u4fe1\u606f\uff0c\u8ba1\u7b97\u6700\u5927\u5206\u914d\u65b9\u6848\u3002\n\n## \u9898\u610f\n\n\u5982\u9898\u9762\u3002\n\n## \u9898\u89e3\n\n1. \u6bcf\u53ea\u5976\u725b\u53ea\u559c\u6b22\u5728\u81ea\u5df1\u559c\u6b22\u7684\u725b\u68da\u91cc\u9762\u4ea7\u5976\u3002\uff08\u5339\u914d\uff09\n\n2. \u4e00\u4e2a\u725b\u68da\u53ea\u80fd\u5bb9\u7eb3\u4e00\u5934\u5976\u725b\u3002\n\n3. \u6700\u5927\u7684\u5206\u914d\u65b9\u6848\u3002\n\n\u5308\u7259\u5229\u7b97\u6cd5(\u5339\u914d\u7b97\u6cd5)\uff0c\u4e2a\u4eba\u611f\u89c9\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2aDFS\u7684\u5339\u914d\u7b97\u6cd5\u3002\n\n\u4f2a\u4ee3\u7801\uff1a\n```\nbool dfs(int x)\n{\n\twhile(\u627e\u5230Xi\u7684\u5173\u8054\u9876\u70b9Yj){\n          if(\u9876\u70b9Yj\u4e0d\u5728\u589e\u5e7f\u8def\u5f84\u4e0a){\n                \u5c06Yj\u52a0\u5165\u589e\u5e7f\u8def\n               if(Yj\u662f\u672a\u8986\u76d6\u70b9\u6216\u8005Yj\u7684\u539f\u5339\u914d\u70b9Xk\u80fd\u627e\u5230\u589e\u5e7f\u8def\u5f84){ //\u6269\u5145\u96c6\u5408M\n                      \u5c06Yj\u7684\u5339\u914d\u70b9\u6539\u4e3aXi;\n                      \u8fd4\u56detrue;\n           }\n      }\n               \u8fd4\u56defalse;\n}\n```\n\n\u6839\u636e\u9898\u610f\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u5308\u7259\u5229\u7b97\u6cd5\u7684\u6a21\u677f\u9898\u3002\u4e8e\u662f\u5f00\u59cb\u6839\u636e\u4f2a\u4ee3\u7801\u6765\u9020\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n\n### \u4ee3\u78011(my code)\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 10010;\nconst int maxm = 10010;\nint n,m,tong[maxm],ans;\nbool vis[maxn],love[maxn][maxm];\n\ninline int read(){\n    int k=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){k=k*10+ch-'0';ch=getchar();}\n    return k*f;\n}\n\ninline void init()\n{\n    cin >> n >> m;\n    for(int i=1;i<=n;i++){\n        int l=read();\n        while(l--){\n            love[i][read()]=true;\n        }\n    }\n}\n\nbool dfs(int x)\n{\n    for(int i = 1;i <= m;++i)\n    {\n        if(!vis[i] && love[x][i])\n        {\n            vis[i] = true;\n            if(tong[i]==0 || dfs(tong[i]))\n            {\n                tong[i] = x;\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nint main(int argc, char const *argv[])\n{\n    init();\n    \n    for(int i = 1;i <= n;++i)\n    {\n        memset(vis,0,sizeof(vis));\n        if(dfs(i)) ans++;\n    }\n\n    cout << ans;\n\n    return 0;\n}\n```\n\n### \u4ee3\u78012(rank 1)\n\n```\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n#define M(x) memset(x, false, sizeof(x))\nconst int maxn = 205;\nint N, M, ans, link[maxn];\nbool vis[maxn], A[maxn][maxn];\nbool dfs(int x){\n    for(int i = 1; i <= N; i++)\n        if(A[x][i] && !vis[i]){\n            vis[i] = true;\n            if(!link[i] || dfs(link[i])){\n                link[i] = x;\n                return true;\n            }\n        }\n    return false;\n}\ninline int GetInt(){\n    char x;\n    int ret;\n    while((x = getchar()) < '0' || x > '9');\n    ret = x - '0';\n    while((x = getchar()) >= '0' && x <= '9') ret = ret * 10 + x - '0';\n    return ret;\n}\nint main(){\n    N = GetInt(), M = GetInt();\n    for(int i = 1; i <= N; i++){\n        int sum;\n        sum = GetInt();\n        for(int j = 1, OP; j <= sum; j++){\n            OP = GetInt();\n            A[i][OP] = true;\n        } \n    }\n    for(int i = 1; i <= N; i++){\n        M(vis);\n        if(dfs(i)) ans++;\n    } \n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1540819267,
        "uid": 88197,
        "name": "Chicago_01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u91c7\u7528\u5308\u7259\u5229\u7b97\u6cd5\u6765\u505a\n\n\u5308\u7259\u5229\u7b97\u6cd5\u89e3\u91ca\u5728http://caioj.cn/problem.php?id=1122\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint x,y,next;//\u8bb0\u5f55\u8fb9 \n}a[41000];int len,last[210];\ninline void ins(int x,int y)//\u5efa\u8fb9 \n{\n\tlen++;\n\ta[len].x=x;a[len].y=y;\n\ta[len].next=last[x];last[x]=len;\n}\nint match[210];//\u725b\u680fi\u7684\u725b \nbool v[210];//\u7b2ci\u4e2a\u725b\u680f\u662f\u5426\u88ab\u67e5\u627e\u8fc7 \nbool find_niulang(int x)//\u6838\u5fc3\u90e8\u5206 \n{\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(v[y]==true)//\u5982\u679c\u6ca1\u6709\u88ab\u627e\u8fc7 \n\t\t{\n\t\t\tv[y]=false;//\u8bbe\u7f6e\u4e3a\u627e\u8fc7 \n\t\t\t//\u4e24\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u8fd9\u4e2a\u725b\u680f\u6ca1\u6709\u725b \n\t\t\t//\u6216\u8005\u8ba9\u725b\u680f\u91cc\u9762\u7684\u725b\u91cd\u65b0\u627e\u725b\u680f\u5e76\u4e14\u80fd\u627e\u5230\u725b\u680f \n\t\t\tif(match[y]==0 || find_niulang(match[y])==true) \n\t\t\t{\n\t\t\t\tmatch[y]=x;//\u5339\u914d\u6210\u529f\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tint n,m,x,y,t,i,ans;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(x=1;x<=n;x++)\n\t{\n\t\tscanf(\"%d\",&t);//\u5efa\u7acb\u8fb9 \n\t\twhile(t--)\n\t\t{\n\t\t\tscanf(\"%d\",&y);\n\t\t\tins(x,y);\n\t\t}\n\t}\n\tans=0;\n\tfor(i=1;i<=n;i++)//\u679a\u4e3e\u725b \n\t{\n\t\tif(ans==m) break;//\u5982\u679c\u627e\u5230\u4e86m\u4e2a\u725b\u680f\uff0c\u5c31\u4e0d\u7528\u7ba1\u4e86 \n\t\tmemset(v,true,sizeof(v));//\u628a\u725b\u680f\u5168\u90e8\u8bbe\u7f6e\u4e3a\u6ca1\u6709\u627e\u8fc7 \n\t\tif(find_niulang(i)==true) ans++;//\u5982\u679c\u80fd\u6210\u529f\u5339\u914d\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1526621357,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "~~\u5176\u5b9e\u5199\u8fd9\u4e2a\u9898\u89e3\u662f\u6015\u81ea\u5df1\u4ee5\u540e\u5fd8\u8bb0\u7f51\u7edc\u6d41\u600e\u4e48\u6253\u4e86\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u968f\u65f6\u56de\u6765\u770b\u4e00\u770b~~\n\n\u597d\u7684\u5207\u5165\u6b63\u9898\u3002\n\n\u6211\u7f51\u7edc\u6d41\u662f\u770b\u89c6\u9891\u5b66\u7684dinic\u7b97\u6cd5~~\uff08\u8bf7\u5141\u8bb8\u6211\u6765\u4e00\u6ce2\u5e7f\u544a\uff0c[\u5c31\u662f\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u5b66\u7684](http://caioj.cn/)\uff09~~\uff0cOK\uff0c\u56e0\u4e3a\u6709\u5730\u5740\u4e86\uff0c\u5c31\u4e0d\u591a\u903c\u903c\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9898\u548c\u7f51\u7edc\u6d41\u6a21\u677f\u6709\u4e00\u4e1d\u4e0d\u540c\uff0c\u8fd9\u9898\u7684\u539f\u70b9\u548c\u6c47\u70b9\u5904\u7406\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u3002\u6240\u4ee5\u53ef\u4ee5\u53bb\u505a\u4e00\u505a[\u8fd9\u9053\u9898](http://caioj.cn/problem.php?id=1116)\uff0c\u505a\u5b8c\u5c31\u4f1a\u7528\u522b\u6837\u7684\u6536\u83b7~~\uff08\u8c8c\u4f3c\u5e7f\u544a\u6253\u592a\u591a\u4e86\u3002\u3002\u3002\uff09~~\n\n\u597d\uff0c\u90a3\u5c31\u4e0a\u4ee3\u7801\u5427\u3002\u3002\u3002\n```\n/*\nID:zhangji78\nLANG:C++\nTASK:stall4\n*/\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int inf=99999999;\nstruct node\n{\n\tint x,y,c,next,other;\n}a[21000];int len,last[21000];\nint st,ed,n,m;\nvoid ins(int x,int y,int c)\n{\n\tint k1,k2;\n\tlen++;k1=len;\n\ta[len].x=x;a[len].y=y;a[len].c=c;\n\ta[len].next=last[x];last[x]=len;\n\tlen++;k2=len;\n\ta[len].x=y;a[len].y=x;a[len].c=0;\n\ta[len].next=last[y];last[y]=len;\n\ta[k1].other=k2;\n\ta[k2].other=k1;\n}\nint list[2100],head,tail,h[2100];\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));h[st]=1;\n\tlist[1]=st;head=1;tail=2;\n\twhile(head<tail)\n\t{\n\t\tint x=list[head];\n\t\tfor(int k=last[x];k;k=a[k].next)\n\t\t{\n\t\t\tint y=a[k].y;\n\t\t\tif(h[y]==0&&a[k].c>0)\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tlist[tail]=y;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t\thead++;\n\t}\n\tif(h[ed]==0)return false;\n\telse return true;\n}\nint findflow(int x,int f)\n{\n\tif(x==ed)return f;\n\tint s=0;\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(h[y]==(h[x]+1)&&a[k].c>0&&s<f)\n\t\t{\n\t\t\tint t=findflow(y,min(f-s,a[k].c));\n\t\t\ts+=t;a[k].c-=t;a[a[k].other].c+=t;\n\t\t}\n\t}\n\tif(s==0)h[x]=0;\n\treturn s;\n}\nint main()\n{\n\t//freopen(\"stall4.in\",\"r\",stdin);\n\t//freopen(\"stall4.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tlen=0;memset(last,0,sizeof(last));\n\tst=0;ed=n+m+1;\n\tfor(int i=1;i<=n;i++)ins(st,i,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint ss;scanf(\"%d\",&ss);\n\t\tfor(int j=1;j<=ss;j++)\n\t\t{\n\t\t\tint y;scanf(\"%d\",&y);\n\t\t\tins(i,n+y,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)ins(n+i,ed,1);\n\tint ans=0;\n\twhile(bfs()==true)ans+=findflow(st,inf);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u662f\u4e00\u904dAC\u7684~~\n\n\u4f5c\u4e3a\u5c0f\u849f\u84bb\u8868\u793a\u975e\u5e38\u5f00\u5fc3\n\n~~\uff08\u867d\u7136\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff09~~",
        "postTime": 1524622182,
        "uid": 44157,
        "name": "zhangjianweivv",
        "ccfLevel": 0,
        "title": "[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall"
    },
    {
        "content": "\u53d1\u73b0\u4e00\u9053\u7f51\u7edc\u6d41\u6c34\u9898\uff08\u6a21\u677f\uff09\u3002\n\n\u8bbe\u6e90\u70b9S=0\uff0c\u6c47\u70b9T=n+m+1\u3002\n\n\u4eceS\u5411\u6bcf\u5934\u725b\u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\u3002\n\n\u4ece\u6bcf\u5934\u725b\u5411\u5b83\u4eec\u559c\u6b22\u7684\u725b\u680f\u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\u3002\n\n\u4ece\u725b\u680f\u5411T\u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n(*^\u25bd^*)\n[\u5141\u8bb8\u6211\u5237\u4e00\u6ce2\u8bbf\u95ee\u91cf](http://www.cnblogs.com/adelalove/p/8525545.html)",
        "postTime": 1520430615,
        "uid": 83546,
        "name": "\u4f9d\u4f9d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "~~\u6628\u5929\u521a\u4f1a\u5199\u7684\u4e8c\u5206\u56fe\u5339\u914d~~\n\n\u4e8c\u5206\u56fe\u5339\u914d\u5165\u95e8\u9898\n\n\u56e0\u4e3a\u725b\u559c\u6b22\u5728\u67d0\u4e9b\u725b\u680f\u5185\u6324\u5976\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fb9\u6765\u8868\u793a\n\n\u5f88\u663e\u7136\u725b\u548c\u725b\u4e4b\u95f4\u6216\u725b\u680f\u548c\u725b\u680f\u4e4b\u95f4\u4e0d\u53ef\u80fd\u8fde\u8fb9\n\n\u800c\u4e00\u4e2a\u725b\u680f\u53ea\u80fd\u5bb9\u7eb3\u4e00\u5934\u725b\n\n\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u4e8c\u5206\u56fe\u5339\u914d\n\n\u8fd9\u91cc\u6211\u7528\u4e86\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u6700\u5927\u5339\u914d\u6570\n\n\u5308\u7259\u5229\u7b97\u6cd5\u901a\u8fc7\u4e0d\u65ad\u627e\u589e\u5e7f\u8def\u6765\u627e\u5230\u6700\u5927\u5339\u914d\uff08\u589e\u5e7f\u8def\u5b9a\u7406\uff1a\u4e0d\u65ad\u5bfb\u627e\u589e\u5e7f\u8def\u5c31\u53ef\u4ee5\u627e\u5230\u6700\u5927\u5339\u914d\uff09\n\n\u9700\u8981\u8fd9\u65b9\u9762\u8be6\u7ec6\u4ecb\u7ecd\u7684\u53ef\u4ee5\u51fa\u95e8\u5de6\u8f6c\u53bb\u6a21\u7248\u9898\u9898\u89e3\u533a\uff1a\n\nhttps://www.luogu.org/problemnew/solution/P3386\n\n\u4ee5\u4e0b\u662fC++\u4ee3\u7801\uff08\u524d\u5411\u661f\u5b58\u56fe\uff09\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\nconst int N=10005;\nconst int M=500005;\nint tot,head[N];\nint num_nodes;\nint num_left;\nint num_right;\nint num_edges;\nint matching_Left[N],matching_Right[N];\nbool check[M];\n\nstruct Edge{\n    int u,v,next;\n}G[M];\n\ninline void addedge(int u,int v){\n    G[++tot].u=u;\n    G[tot].v=v;\n    G[tot].next=head[u];\n    head[u]=tot;\n}//\u524d\u5411\u661f\u5b58\u56fe\n\nbool dfs(int u){\n    for(int i=head[u];i;i=G[i].next){\n        int v=G[i].v;\n        if(!check[v]){\n            check[v]=true;\n            if(matching_Left[v]==-1||dfs(matching_Left[v]))//\u662f\u672a\u76d6\u70b9\n              {\n                matching_Left[v]=u;\n                matching_Right[u]=v;//\u4ea4\u6362\u8def\u5f84\n                return 1;//\u8fd4\u56de\u6210\u529f\n            }\n        }\n    }\n    return 0;//\u6ca1\u6709\u589e\u5e7f\u8def\uff0c\u8fd4\u56de\u5931\u8d25\n}\n\nint hungarian(){\n    int ans=0;\n    memset(matching_Left,-1,sizeof(matching_Left));\n    memset(matching_Right,-1,sizeof(matching_Right));\n    for(int u=1;u<=num_left;++u){//\u4ece\u5de6\u8fb9\u7684\u70b9\uff08\u725b\uff09\u4e00\u4e2a\u4e00\u4e2a\u5bfb\u627e\n        memset(check,0,sizeof(check));\n        if(dfs(u))\n            ans++;\n    }\n    return ans;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&num_left,&num_right);\n    num_nodes=num_left+num_right;\n    for(int i=1;i<=num_left;i++){\n        int x;\n        scanf(\"%d\",&x);\n        for(int j=1;j<=x;j++){\n            int y;\n            scanf(\"%d\",&y);\n            addedge(i,y);\n        }\n    }\n    printf(\"%d\",hungarian());\n    return 0; \n}\n```",
        "postTime": 1516196584,
        "uid": 45443,
        "name": "codesonic",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u8fd9\u4e2a\u9898\u663e\u7136\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\n\n\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8dd1\u5308\u7259\u5229\u6216\u7f51\u7edc\u6d41\u3002\n\n\u7b2c\u4e8c\u7f51\u7edc\u6d41\u66f4\u5feb\n\n**\u6240\u4ee5\u6211\u9009\u62e9\u7f51\u7edc\u6d41\u3002(\u5f88\u68d2\u7684\u7406\u7531)**\n\n\u5efa\u56fe\uff1aS\u8fde\u6bcf\u5934\u725b\uff0c\u6743\u503c\u4e3a1\uff1b\u6bcf\u5934\u725b\u8fde\u5bf9\u5e94\u725b\u680f\uff0c\u6743\u503c\u4e3a1\uff1b\u6bcf\u4e2a\u680f\u8fdeT\uff0c\u6743\u503c\u4e3a1\uff1b\n\n\u6b64\u65f6\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u5177\u4f53\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,s=0,t,num_e=1,m,l,ss;\nconst int maxn=10005;\nconst int inf=2147483647;\nint head[maxn],dis[maxn];\nstruct edge{\n    int to,rest,next;\n}e[maxn];\ninline void add_edge(int x,int y,int z){\n    e[++num_e].to=y;e[num_e].rest=z;e[num_e].next=head[x];head[x]=num_e;\n    e[++num_e].to=x;e[num_e].rest=0;e[num_e].next=head[y];head[y]=num_e;\n}\nbool bfs(){\n    memset(dis,0,sizeof(dis));\n    queue<int> q;\n    while(!q.empty()) q.pop();\n    q.push(s);\n    dis[s]=1;\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for(int i=head[x];i;i=e[i].next){\n            if(e[i].rest&&!dis[e[i].to]){\n                dis[e[i].to]=dis[x]+1;\n                q.push(e[i].to);\n            }\n        }\n    }\n    if(dis[t]) return true;\n    return false;\n}\nint dfs(int x,int minn){\n    if(x==t) return minn;\n    int sum=0,qq=0;\n    for(int i=head[x];i;i=e[i].next){\n        int y=e[i].to;\n        if(e[i].rest&&dis[y]==dis[x]+1){\n            qq=dfs(y,min(e[i].rest,minn-sum));\n            e[i].rest-=qq;\n            e[i^1].rest+=qq;\n            sum+=qq;\n            if(sum==minn) return sum;\n        }\n    }\n    if(!sum) dis[x]=0;\n    return sum;\n}\nint dinic(){\n    int anss=0;\n    while(bfs()) anss+=dfs(s,inf);\n    return anss;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    t=m+n+1;\n    for(int i=1;i<=n;i++) add_edge(s,i,1);\n    for(int i=1;i<=m;i++) add_edge(n+i,t,1);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&ss);\n        for(int k=1;k<=ss;k++){\n            scanf(\"%d\",&l);\n            add_edge(i,l+n,1);\n        }\n    }\n    cout<<dinic();\n\n\n}\n\n```",
        "postTime": 1504618147,
        "uid": 55530,
        "name": "Alcohol_C",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u589e\u5e7f\u8def\uff1a\u521d\u59cb\u65f6\uff0c\u8bbeM\u4e3a\u7a7a\u96c6\uff0c\u7136\u540e\u53cd\u590d\u5728\u4e8c\u5206\u56fe\u4e2d\u627e\u4e00\u6761\u5173\u4e8eM\u7684\u589e\u5e7f\u8defP\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u4ee5\u589e\u52a0\u4e00\u4e2a\u5339\u914d\uff0c\u76f4\u5230\u4e8c\u5206\u56fe\u4e2d\u4e0d\u518d\u5b58\u5728\u4e8c\u5206\u56fe\u7684\u589e\u5e7f\u8def\u3002\n\n\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5308\u7259\u5229\u7b97\u6cd5\u9002\u7528\u4e8e\u8fb9\u8f83\u591a\u7684\u7a20\u5bc6\u56fe\uff0c\u56e0\u4e3a\u8fb9\u591a\u6240\u4ee5\u67e5\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u901f\u5ea6\u5f88\u5feb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N^3)\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n#define M(x) memset(x, false, sizeof(x))\nconst int maxn = 205;\nint N, M, ans, link[maxn];\nbool vis[maxn], A[maxn][maxn];\nbool dfs(int x){\n    for(int i = 1; i <= N; i++)\n        if(A[x][i] && !vis[i]){\n            vis[i] = true;\n            if(!link[i] || dfs(link[i])){\n                link[i] = x;\n                return true;\n            }\n        }\n    return false;\n}\ninline int GetInt(){\n    char x;\n    int ret;\n    while((x = getchar()) < '0' || x > '9');\n    ret = x - '0';\n    while((x = getchar()) >= '0' && x <= '9') ret = ret * 10 + x - '0';\n    return ret;\n}\nint main(){\n    N = GetInt(), M = GetInt();\n    for(int i = 1; i <= N; i++){\n        int sum;\n        sum = GetInt();\n        for(int j = 1, OP; j <= sum; j++){\n            OP = GetInt();\n            A[i][OP] = true;\n        } \n    }\n    for(int i = 1; i <= N; i++){\n        M(vis);\n        if(dfs(i)) ans++;\n    } \n    printf(\"%d\", ans);\n    return 0;\n}\n\n```",
        "postTime": 1503487318,
        "uid": 17318,
        "name": "Cet6_427",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u4eca\u5929\u8001\u5e08\u521a\u8bb2\u4e86\u7f51\u7edc\u6d41\u7684\u505a\u6cd5\uff0c\u624b\u6253\u7adf\u7136\u8fc7\u4e86\uff0c\u4e8e\u662f\u6765\u4e00\u53d1\u9898\u89e3\n\n\u5efa\u56fe\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u8981\u5efa\u7acb\u4e00\u4e2a\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u6b63\u5982\u697c\u4e0b\u6240\u8bf4\uff0c\u7136\u540e\u628a\u6e90\u70b9\u7684\u524d\u9a71\u8d4b\u503c\u4e3a-1\uff0c\u5177\u4f53\u770b\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint n,m,x,y,c[405][405],f[405][405],num,vis[405],pre[405],ans;\nbool YYY=1;\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n;++i){\n        cin>>num;\n        c[0][i]=1;\n        for(int j=1;j<=num;++j){\n            cin>>x;\n            c[i][n+x]=1;//n+x\u662f\u4e3a\u4e86\u4e0d\u8ba9\u7b2c\u4e8c\u7ef4\u4e0e\u7b2c\u4e00\u7ef4\u4ea7\u751f\u76f8\u7b49\u7684\u60c5\u51b5\u3002    \n        }\n    }\n    for(int i=n+1;i<=n+m+1;++i)\n        c[i][n+m+1]=1;//\u6211\u4eec\u628a\u6e90\u70b9\u8bbe\u4e3ac[0],\u6c47\u70b9\u8bbe\u4e3ac[n+m+1]\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5efa\u597d\u56fe\u4e86\n    while(YYY){\n        YYY=0;\n        memset(vis,0,sizeof(vis));\n        queue<int> q;\n        q.push(0);\n        vis[0]=1;\n        pre[0]=-1;\n        while(!q.empty()){\n            int u=q.front();\n            q.pop();\n            for(int i=1;i<=n+m+1;++i)\n                if(!vis[i] && c[u][i]>f[u][i]){\n                    q.push(i);\n                    vis[i]=1;\n                    pre[i]=u;\n                    if(i==n+m+1){\n                        YYY=1;    \n                        break;\n                    }\n                }\n            if(YYY)break;\n        }\n        int k=n+m+1,pj=1000000000;\n        while(pre[k]!=-1){\n            int u=pre[k],v=k;\n            pj=min(pj,c[u][v]-f[u][v]);\n            k=u;\n        }\n        k=n+m+1;\n        while(pre[k]!=-1){\n            int u=pre[k],v=k;\n            f[u][v]+=pj;\n            c[v][u]+=pj;//\u53cd\u5411\u5f27\u662f\u4e3a\u4e86\u7ed9\u6211\u4eec\u6709\u64a4\u56de\u7684\u4f59\u5730\uff0c\u5373\u5bfb\u627e\u589e\u5e7f\u8def\n            k=u;\n        }\n    }\n    for(int i=1;i<=n+m+1;++i)ans+=f[0][i];//\u8f93\u51fa\uff0c\u8981\u8f93\u51fa\u6240\u6709\u4ece0\u51fa\u53bb\u7684\u6d41\u7684\u603b\u548c\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1502886975,
        "uid": 47202,
        "name": "cheeseYang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u6211\u4eec\u8001\u5e08\u8bf4\u4e86\uff0c\u6240\u6709\u4e8c\u5206\u5339\u914d\u7684\u9898\u90fd\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u505a\u3002\n\n\u5e76\u4e14\uff0c\u8fd9\u9898\u662f\u5728\u7f51\u7edc\u6d41\u9898\u76ee\u4e2d\u95f4\u7684\u3002\n\n# \u6240\u4ee5\uff0c\u8fd9\u9898\u600e\u4e48\u80fd\u4e0d\u7528\u7f51\u7edc\u6d41\u505a\u5462\uff1f\n\n\u53ea\u8981\u521b\u9020\u4e00\u4e2a\u6e90\u70b9\u5e76\u8fde\u63a5\u6240\u6709\u7684\u725b\uff0c\u5728\u521b\u9020\u4e00\u4e2a\u6c47\u70b9\u5e76\u8fde\u63a5\u6240\u6709\u725b\u680f\uff0c\u8fd9\u9053\u9898\u4fbf\u8f6c\u5316\u4e3a\u6c42\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u5927\u6d41\u95ee\u9898\u3002\n\n\u6211\u7684\u505a\u6cd5\u662fDinic\u3002\n\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<ctype.h>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<algorithm>\n#include<stack>\n#define For(i,a,b) for((i)=(a);(i)<=(b);++(i))\n#define Forward(i,a,b) for((i)=(a);(i)>=(b);--(i))\nusing namespace std;\ninline void read(int &x)\n{\n    int s=0,f=1;\n    char k=getchar();\n    while(!isdigit(k)&&k!='-')k=getchar();\n    if(k=='-')\n    {\n        f=-1;\n        k=getchar();\n    }\n    while(isdigit(k))\n    {\n        s=(s<<3)+(s<<1)+(k^'0');\n        k=getchar();\n    }\n    x=s*f;\n}\nstruct edge\n{\n    int v,w,nex;\n}p[200*200+100];\nint n,m,level[500],he[500],e=1;\nvoid add(int u,int v,int w)\n{\n    p[++e].v=v;\n    p[e].w=w;\n    p[e].nex=he[u];\n    he[u]=e;\n}\nqueue<int>G;\nbool bfs()\n{\n    memset(level,0,sizeof(level));\n    level[1]=1;\n    G.push(1);\n    while(!G.empty())\n    {\n        int u=G.front(),v=he[u];\n        G.pop();\n        while(v)\n        {\n            if(p[v].w&&!level[p[v].v])\n            {\n                level[p[v].v]=level[u]+1;\n                G.push(p[v].v);\n            }\n            v=p[v].nex;\n        }\n    }\n    return level[n+m+2];\n}\nint dfs(int x,int flow)\n{\n    if(x==m+n+2||!flow)return flow;\n    int v=he[x],sum=0;\n    while(v)\n    {\n        if(p[v].w&&level[p[v].v]==level[x]+1)\n        {\n            int f=dfs(p[v].v,min(p[v].w,flow));\n            p[v].w-=f;\n            p[v^1].w+=f;\n            sum+=f;\n            flow-=f;\n        }\n        v=p[v].nex;\n    }\n    return sum;\n}\nint Dinic(void)\n{\n    int ans=0;\n    while(bfs())ans+=dfs(1,1);\n    return ans;\n}\nint main(void)\n{\n    int s,v,w,i,j;\n    read(n);\n    read(m);\n    For(i,1,n)\n    {\n        read(s);\n        For(j,1,s)\n        {\n            read(v);\n            add(i+1,v+n+1,1);\n            add(v+n+1,i+1,0);\n        }\n    }\n    For(i,1,n)\n    {\n        add(1,i+1,1);\n        add(i+1,1,0);\n    }\n    For(i,1,m)\n    {\n        add(i+n+1,n+m+2,1);\n        add(n+m+2,i+n+1,0);\n    }\n    printf(\"%d\\n\",Dinic());\n    return 0;\n}\n```",
        "postTime": 1499259571,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u677f\u9898\u3002\u8fd9\u91cc\u4f7f\u7528\u5308\u7259\u5229\u7b97\u6cd5\u89e3\u51b3\u3002\n\n\n\u5bf9\u4e8e\u4e00\u53ea\u725b\u548c\u5176\u559c\u6b22\u7684\u725b\u68da\uff0c\u6211\u4eec\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\u6211\u4eec\u5b9a\u4e49\u5bf9\u4e8e\u725b\u68dau\uff0cMatch[u]\u4e3a\u5176\u5339\u914d\u7684\u725b\u7684\u7f16\u53f7\u3002\n\n\n\u6211\u4eec\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u53ea\u725bu\u6765\u4fee\u6539\u5339\u914d\u3002\u5f53\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u5339\u914d\u7684\u7a7a\u725b\u68da\u65f6\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5c06\u8be5\u7a7a\u725b\u68da\u7684Match\u503c\u7f6e\u4e3a\u8be5\u725bu\u3002\u82e5\u8be5\u725b\u68da\u5df2\u7ecf\u88ab\u5339\u914d\uff0c\u90a3\u4e48\u6211\u4eec\u5411\u4e0bdfs\u8be5\u725b\u68da\u4e4b\u524d\u5bf9\u5e94\u7684\u90a3\u53ea\u725bv\uff0c\u770b\u770b\u80fd\u5426\u8ba9\u5176\u66f4\u6539\u5339\u914d\uff0c\u5bf9\u4e8e\u725bv\u7684\u64cd\u4f5c\u4e0e\u725bu\u7c7b\u4f3c\uff0c\u4f46\u8981\u6ce8\u610f\u4e0d\u8981dfs\u91cd\u590d\u7684\u725b\u3002\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u76f4\u5230\u4e3a\u725bu\u817e\u51fa\u4f4d\u7f6e\uff0c\u5219\u628a\u8be5\u725b\u68da\u7684Match\u7f6e\u4e3a\u725bu\uff0c\u6216\u4e0d\u5b58\u5728\u89e3\u5219\u8fd4\u56de0\u3002\n\n\n\u901a\u4fd7\u70b9\u6765\u8bf4\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u770b\u524d\u9762\u7684\u725b\u80fd\u5426\u901a\u8fc7\u8c03\u6574\u5339\u914d\u7684\u725b\u68da\u6765\u201c**\u8ba9**\u201d\u51fa\u73b0\u5728\u9700\u8981\u7a7a\u51fa\u53bb\u7684\u725b\u68da\u4f7f\u5f97\u65b0\u7684\u725b\u53ef\u4ee5\u5339\u914d\u3002\uff08\u6709\u70b9\u7ed5\u53e3\uff0c\u591a\u8bfb\u51e0\u904d\u5c3d\u91cf\u7406\u89e3\uff0c\u8fd9\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7cbe\u9ad3\u6240\u5728\uff09\n\n\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u770b\u4ee3\u7801\u3002\uff08\u6ce8\u91ca\u5f88\u8be6\u7ec6\u7684\u5566\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nconst int maxN=300;\nconst int inf=2147483647;\n\nint n,m;\nvector<int> E[maxN];//\u5b58\u8fb9\nbool vis[maxN];//\u725b\u68da\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u907f\u514d\u91cd\u590d\nint Match[maxN];//\u5b58\u4e0b\u725b\u68da\u5339\u914d\u7684\u725b\u7684\u7f16\u53f7\uff0c-1\u8868\u793a\u8fd8\u672a\u5339\u914d\n\nbool dfs(int u);\n\nint main()\n{\n    cin>>n>>m;\n    for (int i=1;i<=n;i++)\n    {\n        int S;\n        cin>>S;\n        for (int j=1;j<=S;j++)\n        {\n            int x;\n            cin>>x;\n            E[i].push_back(x);//\u8fde\u8fb9\n        }\n    }\n\n    memset(Match,-1,sizeof(Match));\n    int cnt=0;\n    for (int i=1;i<=n;i++)\n    {\n        memset(vis,0,sizeof(vis));//\u6bcf\u4e00\u6b21\u8fdb\u884c\u5339\u914d\u4e4b\u524d\u90fd\u8981\u6e05\u7a7a\n        if (dfs(i))//\u82e5\u6210\u529f\u5339\u914d\uff0c\u5219\u6700\u5927\u5339\u914d\u6570+1\uff0c\u56e0\u4e3a\u591a\u6709\u4e00\u4e2a\u70b9\u80fd\u591f\u5339\u914d\n            cnt++;\n    }\n    cout<<cnt<<endl;\n    return 0;\n}\n\nbool dfs(int u)//1\u8868\u793a\u5339\u914d\u6210\u529f\uff0c0\u8868\u793a\u4e0d\u6210\u529f\n{\n    for (int i=0;i<E[u].size();i++)\n    {\n        int v=E[u][i];\n        if (vis[v]==0)\n        {\n            vis[v]=1;\n            if ((Match[v]==-1) || dfs(Match[v]))//\u82e5\u5f53\u524d\u725b\u68da\u53ef\u4ee5\u5339\u914d\uff0c\u6216\u662fdfs\u8fd4\u56de1\uff08\u8bf4\u660e\u5728dfs\u4e2d\u6210\u529f\u5339\u914d\u4e86\uff09\uff0c\u5219\u6b64\u65f6\u8981\u5c06\u65b0\u7684\u503c\u66f4\u65b0\u8fdb\u53bb\uff0c\u540c\u65f6\u5411\u4e0a\u4e00\u7ea7dfs\u4f20\u503c1\n            {\n                Match[v]=u;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n```\n\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u535a\u5ba2\uff1ahttp://blog.csdn.net/songyuchen0001/article/details/74339575\n",
        "postTime": 1499160016,
        "uid": 21377,
        "name": "songyuchen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1894 \u3010[USACO4.2]\u5b8c\u7f8e\u7684\u725b\u680fThe Perfect Stall\u3011"
    }
]