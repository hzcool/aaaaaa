[
    {
        "content": "\u8fd9\u4e00\u9898\u5176\u5b9e\u662f\u4e00\u9898\u5f88\u6709\u610f\u601d\u7684\u5927\u7efc\u5408\u9898\uff0c\u5c3d\u7ba1\u7b97\u6cd5\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u601d\u8003\u8d77\u6765\u8fd8\u662f\u6709\u96be\u5ea6\u7684\uff0c\u7531\u4e8e\u9898\u89e3\u4e2d\u5927\u90e8\u5206\u7684\u539f\u7406\u6ca1\u6709\u8bf4\u51fa\u6216\u8005\u4e0d\u5b8c\u5584\uff0c\u6211\u5c31\u5199\u4e00\u7bc7\u9898\u89e3\u5427\u3002\n\n\u5148\u770b\u9898\u9762\uff0c\u7531\n\n>\u4ed6\u4eec\u76f8\u8ddd\u591a\u8fdc\u3002\u800c\u53ea\u901a\u8fc7\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u901a\u8bdd\u7684\u54e8\u6240\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u80fd\u8d85\u8fc7 D\uff0c\u8fd9\u662f\u53d7\u6536\u53d1\u5668\u7684\u529f\u7387\u9650\u5236\u3002\u6536\u53d1\u5668\u7684\u529f\u7387\u8d8a\u9ad8\uff0c\u901a\u8bdd\u8ddd\u79bb D \u4f1a\u66f4\u8fdc\uff0c\u4f46\u540c\u65f6\u4ef7\u683c\u4e5f\u4f1a\u66f4\u8d35\u3002\n\n>\u6536\u53d1\u5668\u9700\u8981\u7edf\u4e00\u8d2d\u4e70\u548c\u5b89\u88c5\uff0c\u6240\u4ee5\u5168\u90e8\u54e8\u6240\u53ea\u80fd\u9009\u62e9\u5b89\u88c5\u4e00\u79cd\u578b\u53f7\u7684\u6536\u53d1\u5668\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u7684\u901a\u8bdd\u8ddd\u79bb\u90fd\u662f\u540c\u4e00\u4e2a D\u3002\u4f60\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6536\u53d1\u5668\u5fc5\u987b\u7684\u6700\u5c0f\u901a\u8bdd\u8ddd\u79bb D\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u901a\u8bdd\u8def\u5f84\uff08\u76f4\u63a5\u7684\u6216\u8005\u95f4\u63a5\u7684\uff09\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u9898\u6c42[\u74f6\u9888\u751f\u6210\u6811](https://baike.baidu.com/item/%E7%93%B6%E9%A2%88%E7%94%9F%E6%88%90%E6%A0%91/2397900)\u7684\u9898\u76ee\u3002\n\n\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u74f6\u9888\u751f\u6210\u6811\u6307\u7684\u662f\u5728\u4e00\u4e2a\u56fe$(E,V)$\u4e2d\u4e00\u4e2a$T \\in E$\u4f7f\u5f97$card(T) = G - 1 $\u4e14$T.max$\u662f\u6700\u5c0f\u7684\u3002\n\n\u5b9a\u7406\uff1a \u74f6\u9888\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u7684\u5173\u7cfb\u662f\u6700\u5c0f\u751f\u6210\u6811\u662f\u74f6\u9888\u751f\u6210\u6811\u7684\u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6\u3002\n\n\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528[\u56fe\u62df\u9635](https://en.wikipedia.org/wiki/Matroid)\u8fdb\u884c\u8bc1\u660e\uff0c\u4f46\u662f\u62df\u9635\u8fc7\u4e8e\u590d\u6742\uff0c\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u5f15\u5165\uff0c\u4f60\u53ea\u9700\u8981\u8111\u8865\u4e00\u904dkruskal\u7b97\u6cd5\u7684\u8fc7\u7a0b\u5c31\u5e94\u8be5\u77e5\u9053\u8fd9\u662f\u5bf9\u7684\u4e86\u3002\n\n\u9009\u7528\u6700\u5c0f\u751f\u6210\u6811\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff1a\n\n- \u6700\u5c0f\u751f\u6210\u6811\u65b9\u4fbf\u5728\u56fe\u53d1\u751f\u53d8\u5316\u65f6\u7ef4\u62a4\u5176\u6027\u8d28\u3002\n- \u6211\u4e5f\u4e0d\u4f1a\u522b\u7684\u7b97\u6cd5\u6c42\u74f6\u9888\u751f\u6210\u6811\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6c42\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5176\u4e2d\u7684\u6700\u5927\u8fb9\u5c31\u662f\u6ca1\u6709\u6240\u8c13\u7684\u201c\u536b\u661f\u7535\u8bdd\u201d\u65f6\u7684\u7b54\u6848\u4e86\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u600e\u4e48\u505a\u5462\uff1f \u536b\u661f\u7535\u8bdd\u7684\u5f71\u54cd\u7a76\u7adf\u662f\u4ec0\u4e48\uff1f\u5176\u4ed6\u9898\u89e3\u4e2d\u5927\u90e8\u5206\u8bf4\u4e86\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u201c\u8054\u901a\u5757\u201d\u201c\u5220\u8fb9\u201d\u7684\u4e1c\u897f\uff0c\u5f15\u8d77\u4e86\u5927\u89c4\u6a21\u7684\u4e89\u8bba\uff0c\u4f46\u4e3a\u4ec0\u4e48\u7b54\u6848\u662f\u6b63\u786e\u7684\u5462\uff1f\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fb9\u4ece\u6765\u6ca1\u6709\u88ab\u5220\u9664\u8fc7\uff0c\u800c\u4e14\u4e5f\u6ca1\u6709\u65b0\u7684\u8054\u901a\u5757\u51fa\u73b0\u3002\uff08\u4f46\u4ecd\u7136\u4e0d\u6392\u9664\u6709\u65b9\u4fbf\u601d\u8003\u7684\u53ef\u80fd\uff09\u3002\n\n\u90a3\u5230\u5e95\u8be5\u600e\u4e48\u60f3\uff1f\n\n\u6ce8\u610f\u4e00\u4ef6\u4e8b\uff1a\n\n## \u7531\u4e8e\u8ddd\u79bb\u662f\u5ba2\u89c2\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u672c\u9898\u4e2d\u7684\u56fe\u4e3a\u5b8c\u5168\u56fe\u3002\n\n\u8fd9\u4e2a\u53d1\u73b0\u5c06\u4e0d\u65ad\u4f34\u968f\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\u3002\n\n\u597d\uff0c\u5df2\u7ecf\u626f\u4e86\u8fd9\u4e48\u591a\u5e9f\u8bdd\u4e86\uff0c\u90a3\u4e48\u4e0d\u5982\u518d\u626f\u4e00\u70b9\u5427\uff1a\n\n\u53e4\u4eba\u4e91\uff1a\n\n>\u4e00\u751f\u4e8c\uff0c\u4e8c\u751f\u4e09\uff0c\u4e09\u751f\u5929\u4e0b\u3002\n\n\u8fd9\u662f\u5f88\u6709\u9053\u7406\u7684\u3002\n\n- \u4e00\u8868\u8fbe\u4e8b\u7269\u7684\u672c\u8eab\uff0c\u5728\u6b64\u5904\u5bf9\u4e8e\u4e00\u4e2a\u201c\u536b\u661f\u7535\u8bdd\u201d\u70b9\u6765\u8bf4\uff0c\u5b83\u5230\u5176\u4ed6\u536b\u661f\u7535\u8bdd\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff0c\u800c\u4e0d\u662f\u8fb9\u88ab\u5220\u9664\u4e86\u3002\n\n- \u4e8c\u8868\u8fbe\u4e8b\u7269\u5185\u90e8\u7684\u8054\u7cfb\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u4e00\u5bf9\u536b\u661f\u7535\u8bdd\u70b9\u7684\u8ddd\u79bb\u4e3a0\n\n- \u4e09\u8868\u8fbe\u4e8b\u7269\u548c\u5916\u90e8\u7684\u8054\u7cfb\uff0c\u8fd9\u70b9\u6bd4\u8f83\u590d\u6742\u6211\u4eec\u7a0d\u540e\u4ecb\u7ecd\u3002\n\n\u5f53\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\u51fa\u73b0\u65f6\uff0c\u6ca1\u6709\u4ec0\u4e48\u8868\u73b0\uff0c\u8df3\u8fc7\u3002\n\n\u5f53\u4e00\u5bf9\u536b\u661f\u7535\u8bdd\u51fa\u73b0\u65f6\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\n\n- \u6ca1\u6709\u65e0\u8fb9\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u672c\u56fe\u662f\u5b8c\u5168\u56fe\n\n- \u82e5\u8fd9\u4e00\u5bf9\u70b9\u4e4b\u95f4\u8fb9\u4e3a\u6811\u8fb9\uff0c\u5219\u4ed6\u4eec\u7684\u8fb9\u6743\u4e3a0\u540e\u82e5\u5176\u4e3a\u6811\u4e0a\u6700\u5927\u8fb9\uff0c\u5219\u7b54\u6848\u53d8\u4e3a\u6811\u4e0a\u7b2c\u4e8c\u5927\u8fb9\uff0c\u5426\u5219\u4e0d\u53d8\u3002\n\n- \u82e5\u8fd9\u4e00\u5bf9\u70b9\u4e4b\u95f4\u4e3a\u975e\u6811\u8fb9\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35873.png)\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35874.png)\n\n\n\u90a3\u4e48**\u4ea4\u6362**\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u6700\u5927\u8fb9\uff08a. k. a. \u8fb9\u4ea4\u6362\uff09(\u4e00\u6837\uff0c\u81ea\u5df1\u8111\u8865kruskal\u5427)\u3002\u56e0\u4e3a\u4fdd\u8bc10\u8ddd\u79bb\u662f\u6700\u5c0f\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u8fd9\u662f\u5426\u8bf4\u660e\u53ef\u4ee5\u968f\u65f6\u79fb\u9664\u5f53\u524d\u6700\u5927\u7684\u8fb9\u5417\uff1f\n\n\u90a3\u8fd8\u5f97\u770b\u5f15\u5165\u65b0\u7684\u70b9\u662f\u5426\u6709\u5f71\u54cd\u3002\n\n\u5f53\u7b2c\u4e09\u4e2a\u70b9\u51fa\u73b0\u65f6\uff0c\u5982\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35879.png)\n\n\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u7531\u4e8e\u591a\u5bf9\u70b9\u4ea7\u751f\u5176\u4ed6\u5f71\u54cd\u5462\uff1f\n\n\u9996\u5148\u524d\u4e24\u4e2a\u70b9\u4ea4\u6362\u4e86\u4e00\u6761\u8fb9\uff0c\u5047\u5b9a\u662f\u6807\u4e3a\u865a\u7ebf\u7684\u8fd9\u4e00\u6761\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35880.png)\n\n\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u65b0\u5f97\u5230\u7684\u751f\u6210\u6811\u662f\u5b9e\u7ebf\u6807\u8bc6\u7684\u8fd9\u4e00\u6761\u201cM\u201d\u5f62\u7684\u6298\u7ebf\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c1d\u8bd5\u7528\u65b0\u70b9\u5bf9\u5176\u4ed6\u4e24\u70b9\u8fde\u8fb9\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35881.png)\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35882.png)\n\n\u54a6\uff1f\u56fe2\u4e2d\u4e24\u70b9\u8def\u5f84\u53ea\u6bd4\u56fe1\u591a\u5305\u542b\u4e86\u4e00\u67610\u6743\u8fb9\uff01\n\n\u662f\u5de7\u5408\u5417\uff1f\u663e\u7136\u4e0d\u662f\u3002\u8fd9\u662f\u56e0\u4e3a\u5f530\u6743\u8fb9\u4ea7\u751f\u65f6\u4e24\u8fb9\u7684\u536b\u661f\u7535\u8bdd\u70b9\u65e9\u5df2\u8fde\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u5411\u4ed6\u4eec\u8fdb\u884c\u8fde\u8fb9\u65f6\u6240\u80fd\u4ea7\u751f\u7684\u51fa\u5165\u53ea\u6709\u4e00\u6761\u6216\u4e00\u4e9b0\u6743\u8fb9\u800c\u5df2\uff01\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6837\u4e00\u7ec4\u536b\u661f\u70b9\u7f29\u5728\u4e00\u8d77\uff0c\u6784\u6210\u201c\u536b\u661f\u7535\u8bdd\u7ec4\u201d\uff0c\u5373\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/pic/35885.png)\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u8fde\u63a5\u7ec4\u5185\u7ec4\u5916\u4efb\u610f\u4e24\u70b9\uff0c\u5c06\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u75280\u8fb9\u66f4\u6362\u6389\u3002\n\n\u5f88\u660e\u663e\u5c31\u77e5\u9053\u8fd9\u6837\u4e00\u5171\u80fd\u8fdb\u884c$(S-1)$\u6b21\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u591f\u901a\u8fc7\u8fde\u63a5\u5728\u751f\u6210\u6811\u4e0a\u5c3d\u91cf\u8fdc\u7684\u4e24\u70b9\u8fbe\u5230\u4e0d\u65ad\u5c06\u751f\u6210\u6811\u4e2d\u7684\u6700\u5927\u8fb9\u66f4\u6362\u6389\u7684\u76ee\u7684\u3002\n\n\u7efc\u4e0a\uff0c\u751f\u6210\u6811\u4e2d\u524d$[P-1 - (S-1)]$\u6761\u8fb9(i.e., P-S)\u4e2d\u7684\u6700\u5927\u8fb9\u5c31\u662f\u7b54\u6848\uff01\n\n\u4e3a\u4e86\u51d1\u4e2a\u9898\u89e3\u7684\u6837\u5b50\uff0c\u4e0b\u9762\u8fd8\u662f\u7ed9\u51fa\u6211\u7684C++11\u4ee3\u7801\uff0c\u4f46\u662f\u5efa\u8bae\u4ee3\u7801\u8fd8\u662f~~\u6284~~\u501f\u9274\u522b\u4eba\u7684\uff0c\u6211\u7684\u4ee3\u7801\u53ef\u80fd\u6bd4\u8f83\u5c0f\u4f17\u3002\n\n```cpp\n#include <iostream>\n#include <list>\n#include <algorithm>\n#include <tuple>\n#include <cmath>\n#include <iomanip>\n#include <vector>\n#include <numeric>\n\n#ifdef DEBUG\n#include <sstream>\nstd::stringstream stin(R\"__(2 4\n0 100\n0 300\n0 600\n150 750\n)__\");\n#else\n#define stin std::cin\n#endif // DEBUG\n\nusing edge = std::tuple<double, int, int>;\nconstexpr int maxn = 505;\nint S, P;\nstd::vector<edge> gra, tree;\nint p[maxn];\nstd::pair<double, double> pos[maxn];\n\nconstexpr double EuclidDistance(std::pair<int, int> p1, std::pair<int, int> p2)\n{\n\treturn std::sqrt((p1.first - p2.first)*(p1.first - p2.first)+(p1.second - p2.second)*(p1.second - p2.second));\n}\n\nint find(int pos)\n{\n\treturn p[pos] == pos ? pos : p[pos] = find(p[pos]);\n}\n\nint main()\n{\n\tstin >> S >> P;\n\tfor(int i = 1; i <= P; i++)\n\t\tstin >> pos[i].first >> pos[i].second;\n\tstd::iota(p+1, p+1+P, 1);\n\tfor(int i = 1; i <= P - 1; i++)\n\t\tfor(int j = i+1; j <= P; j++)\n\t\t{\n\t\t\tauto dis = EuclidDistance(pos[i], pos[j]);\n\t\t\tgra.emplace_back(dis, i, j);\n\t\t\tgra.emplace_back(dis, j, i);\n\t\t}\n\tstd::sort(gra.begin(), gra.end());\n\tint count = 0;\n\tfor(auto& i : gra)\n\t{\n\t\tif(find(std::get<1>(i))!=find(std::get<2>(i)))\n\t\t{\n\t\t\tp[p[std::get<1>(i)]] = p[std::get<2>(i)];\n\t\t\tcount++;\n\t\t}\n\t\tif(count == P - S)\n\t\t{\n\t\t\tstd::cout << std::fixed << std::setprecision(2) << std::get<0>(i) << std::ends;\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n```",
        "postTime": 1538645014,
        "uid": 56461,
        "name": "constructor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "# \u65e0\u7ebf\u901a\u8baf\u7f51\n\n**\u9898\u76ee\u63cf\u8ff0**\n\n\u56fd\u9632\u90e8\u8ba1\u5212\u7528\u65e0\u7ebf\u7f51\u7edc\u8fde\u63a5\u82e5\u5e72\u4e2a\u8fb9\u9632\u54e8\u6240\u30022 \u79cd\u4e0d\u540c\u7684\u901a\u8baf\u6280\u672f\u7528\u6765\u642d\u5efa\u65e0\u7ebf\u7f51\u7edc\uff1b\n\n\u6bcf\u4e2a\u8fb9\u9632\u54e8\u6240\u90fd\u8981\u914d\u5907\u65e0\u7ebf\u7535\u6536\u53d1\u5668\uff1b\u6709\u4e00\u4e9b\u54e8\u6240\u8fd8\u53ef\u4ee5\u589e\u914d\u536b\u661f\u7535\u8bdd\u3002\n\n\u4efb\u610f\u4e24\u4e2a\u914d\u5907\u4e86\u4e00\u6761\u536b\u661f\u7535\u8bdd\u7ebf\u8def\u7684\u54e8\u6240\uff08\u4e24\u8fb9\u90fd\u1915\u6709\u536b\u661f\u7535\u8bdd\uff09\u5747\u53ef\u4ee5\u901a\u8bdd\uff0c\u65e0\u8bba\u4ed6\u4eec\u76f8\u8ddd\u591a\u8fdc\u3002\u800c\u53ea\u901a\u8fc7\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u901a\u8bdd\u7684\u54e8\u6240\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u80fd\u8d85\u8fc7 D\uff0c\u8fd9\u662f\u53d7\u6536\u53d1\u5668\u7684\u529f\u7387\u9650\u5236\u3002\u6536\u53d1\u5668\u7684\u529f\u7387\u8d8a\u9ad8\uff0c\u901a\u8bdd\u8ddd\u79bb D \u4f1a\u66f4\u8fdc\uff0c\u4f46\u540c\u65f6\u4ef7\u683c\u4e5f\u4f1a\u66f4\u8d35\u3002\n\n\u6536\u53d1\u5668\u9700\u8981\u7edf\u4e00\u8d2d\u4e70\u548c\u5b89\u88c5\uff0c\u6240\u4ee5\u5168\u90e8\u54e8\u6240\u53ea\u80fd\u9009\u62e9\u5b89\u88c5\u4e00\u79cd\u578b\u53f7\u7684\u6536\u53d1\u5668\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u7684\u901a\u8bdd\u8ddd\u79bb\u90fd\u662f\u540c\u4e00\u4e2a D\u3002\u4f60\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6536\u53d1\u5668\u5fc5\u987b\u7684\u6700\u5c0f\u901a\u8bdd\u8ddd\u79bb D\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u901a\u8bdd\u8def\u5f84\uff08**\u76f4\u63a5\u7684\u6216\u8005\u95f4\u63a5\u7684**\uff09\u3002\n\n------------\n\u770b\u4e00\u773c\uff0c\u8fd9\u4e0d\u5c31\u662f\u8d64\u88f8\u88f8\u7684**\u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f**\u5417\uff1f\n\n\u4e5f\u8bb8\u4f60\u4f1a\u95ee:\"s\u662f\u5e72\u561b\u7684\uff1f\"\n\n\u6211\u6765\u544a\u8bc9\u4f60\u2014\u2014s\uff01\u6ca1\u7528\uff01\n\n\u4e4b\u524d\u6211\u4eec\u505a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u65f6\uff0c\u662f\u4e0d\u662f\u6709n - 1\u6761\u8fb9\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\uff0c\u8fd9\u91cc\u5176\u5b83\u7684\u6ca1\u53d8\uff0c\u5c31\u9000\u51fa\u6761\u4ef6\u53d8\u4e86\u3002\u8fd9\u91ccs\u53ef\u80fd\u6392\u4e0a\u4e00\u70b9\u70b9\u7528\u573a\u4e86\uff0c\u9000\u51fa\u6761\u4ef6\u53d8\u6210\u4e86**p - s**(p\u548c\u4e4b\u524d\u7684n\u662f\u51e0\u4e4e\u4e00\u6837\u7684)\u3002\n\n\u65e2\u7136\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\uff0c\u90a3\u5fc5\u7136\u4f1a\u6709\u4e24\u5927\u7ecf\u5178\u7b97\u6cd5\u2014\u2014**Kruskal**\uff0c**Prim**\n\n\u6a21\u677f\u90fd\u4e0d\u4f1a\u7684\u540c\u5fd7\u53ef\u4ee5\u5148\u770b\u770b[\u9898\u89e3Kruskal\u6a21\u677f](https://www.luogu.org/blog/qqq1112/zui-xiao-sheng-cheng-shu-kruskal-mu-ban)\uff0c[\u9898\u89e3Prim\u6a21\u677f](https://www.luogu.org/blog/qqq1112/zui-xiao-sheng-cheng-shu-prim-mu-ban)\uff08\u6a21\u677f\u9898\u76ee\u4e24\u4e2a\u9898\u89e3\u91cc\u90fd\u6709\u94fe\u63a5\uff09\n\n\u53ef\u60dcPrim\u51fa\u53bb\u65c5\u6e38\u53bb\u4e86\uff0c\u9519\u8fc7\u4e86\u8fd9\u573a\u597d\u620f\uff0c\u56e0\u6b64\u8fd9\u7bc7\u9898\u89e3\u7684\u4e3b\u89d2\u5c31\u53d8\u6210\u4e86**Kruskal**\n\n\u5982\u679c\u6709\u4eba\u70ed\u70c8\u652f\u6301Prim\uff0c\u90a3\u5c31\u901a\u8fc7\u4e0a\u9762\u7684Prim\u6a21\u677f\u6539\u7f16\u4e00\u4e0b\u5427\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u80fd\u884c\u7684\uff01\n\n\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4f4d\u4e3b\u4eba\u516c\u5427\n\n## 2.Kruskal\u7b97\u6cd5\uff08\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff09\n\n**Kruskal\u7b97\u6cd5\u662f\u901a\u8fc7\u5e76\u67e5\u96c6\uff0c\u6309\u7167\u8fb9\u7684\u6743\u91cd\u987a\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u5c06\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u4f46\u662f\u82e5\u52a0\u5165\u8be5\u8fb9\u4f1a\u4e0e\u751f\u6210\u6811\u5f62\u6210\u73af\u5219\u4e0d\u52a0\u5165\u8be5\u8fb9,\u9009\u5176\u6b21\u3002\u76f4\u5230\u6811\u4e2d\u542b\u6709n - 1\u6761\u8fb9\u4e3a\u6b62\u3002**\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08E log E\uff09\uff08E\u4e3a\u8fb9\u6570\uff09**\n\n\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u5e76\u67e5\u96c6\u4e86\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u5148\u770b\u4e00\u4e0b[\u3010\u6a21\u677f\u3011\u5e76\u67e5\u96c6](https://www.luogu.org/problemnew/show/P3367)\n\n\u8fd9\u662f\u5e76\u67e5\u96c6\u7684\u9898\u89e3----->[\u5e76\u67e5\u96c6\u9898\u89e3](https://www.luogu.org/blog/qqq1112/solution-p3367)\n\n\u6700\u540e\u5c31\u662fcode\uff1a\n\n```cpp\n#include <bits/stdc++.h>//\u4e07\u80fd\u5934 \nusing namespace std;\nint fa[100001], a[100001], b[100001], s, p, n, k;\ndouble ans;\nstruct node\n{\n\tdouble x, y, z;\n}stu[1000001];\nbool cmp(node a, node b)//\u7ed3\u6784\u4f53\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n{\n\treturn a.z < b.z;\n}\nint find(int x)//\u5e76\u67e5\u96c6 \n{\n\tif(x != fa[x])\n\t{\n\t\tfa[x] = find(fa[x]);\n\t}\n\treturn fa[x];\n}//\u67e5\u627e \nvoid unity(int x, int y)\n{\n\tint r1 = find(x);\n\tint r2 = find(y);\n\tfa[r1] = r2;\n}//\u5408\u5e76 \nint main()\n{\n\tscanf(\"%d %d\", &s, &p);\n\tfor(int i = 1; i <= p; i++)\n\t{\n\t\tscanf(\"%d %d\", &a[i], &b[i]);\n\t\tfor(int j = 1; j < i; j++)\n\t\t{\n\t\t\tn++;//\u5b58\u56fe(\u4e5f\u5c31\u8fd9\u4e2a\u610f\u601d\u5427...) \n\t\t\tstu[n].z = sqrt((a[i] - a[j]) * (a[i] - a[j]) + (b[i] - b[j]) * (b[i] - b[j]));//\u8ba1\u7b97\u957f\u5ea6(\u4e0d\u61c2\u5f97\u53ef\u4ee5\u67e5\u4e00\u4e0b\u52fe\u80a1\u5b9a\u7406) \n\t\t\tstu[n].x = i;\n\t\t\tstu[n].y = j;\n\t\t}\n\t}\n\tfor(int i = 1; i <= p; i++)\n\t{\n\t\tfa[i] = i;//\u81ea\u5df1\u7684\u7236\u4eb2\u4e00\u5f00\u59cb\u7b49\u4e8e\u81ea\u5df1\u672c\u8eab \n\t}\n\tsort(stu + 1, stu + n + 1, cmp);//\u6392\u5e8f \n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(find(stu[i].x) != find(stu[i].y))//\u7956\u5148\u4e0d\u540c \n\t\t{\n\t\t\tunity(stu[i].x, stu[i].y);//\u5408\u5e76 \n\t\t\tans = stu[i].z;//\u53d6\u6700\u5c0f\u503c(\u6392\u8fc7\u5e8f\u4e86)\n\t\t\tk++;\n\t\t\tif(k >= p - s)//\u6ee1\u8db3\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u6709\u4e00\u6761\u901a\u8bdd\u8def\u5f84\uff08\u76f4\u63a5\u7684\u6216\u8005\u95f4\u63a5\u7684\uff09\n\t\t\t{\n\t\t\t\tprintf(\"%.2lf\", ans);\n\t\t\t\treturn 0;//\u9000\u51fa \n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n# finish\uff01\uff01\uff01(\uff5e\uffe3\u25bd\uffe3)\uff5e",
        "postTime": 1556613194,
        "uid": 143681,
        "name": "Strong_Jelly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n\n[P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011](https://www.luogu.org/problem/P1991)\n\n### \u6b64\u9898\u7b97\u6cd5:\u4e8c\u5206+\u5e76\u67e5\u96c6\n\n\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u8f93\u5165\u70b9\uff0c\u7b97\u51fa\u4e8c\u5206$D$\u7684\u5e73\u65b9(\u5fc5\u5b9a\u4e3a\u6574\u6570)\u7684\u8fb9\u754c\u3002$l=0$\uff0c$r$\u4e3a\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u957f\u8ddd\u79bb\u3002\n\n>2.$ $\u4e8c\u5206\u3002\u82e5\u4e24\u70b9\u95f4\u8ddd\u79bb\u7684\u5e73\u65b9$<=mid$\u5c31\u5408\u5e76\u4e3a\u4e00\u5757\u3002\u4e8c\u5206\u6761\u4ef6\uff1a\u5757\u6570\u662f\u5426$<=s$\u3002\n\n>3.$ $\u6700\u540e\u5f97\u51fa\u6574\u6570\u7b54\u6848$l$\uff0c$\\sqrt l$\u5c31\u662f\u7b54\u6848\u3002\n\n![](https://s2.ax1x.com/2019/09/22/uSOj76.jpg)\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define f(v) (v)*(v)\nconst int N=510;\nint s,p,xt,yt,l,r,mid,sum; //\u5e73\u65b9\u5fc5\u5b9a\u4e3a\u6574\u6570\nstruct point{\n\tint x,y;\n}P[N];\nstruct Un{ //\u5e76\u67e5\u96c6\n    int f[N];\n    void clear(int x){\n        for(int i=1;i<=x;i++)\n            f[i]=i;\n    } int find(int x){\n        if(f[x]==x) return x;\n        return f[x]=find(f[x]);\n    } void merge(int x,int y){\n        x=find(x);\n        y=find(y);\n        f[y]=x;\n    } bool same(int x,int y){\n        return (find(x)==find(y));\n    } \n}BCJ;\nint dis(point a,point b){//\u8ddd\u79bb\n\treturn f(a.x-b.x)+f(a.y-b.y);\n} int main(){\n\tscanf(\"%d%d\",&s,&p);\n\tfor(int i=1;i<=p;i++){\n\t\tscanf(\"%d%d\",&xt,&yt);\n\t\tP[i]=(point){xt,yt};\n\t} for(int i=1;i<=p;i++)\n\t\tfor(int j=i+1;j<=p;j++)\n\t\t\tr=max(dis(P[i],P[j]),r); //\u6c42\u51fal\u548cr\n\twhile(l<r){\n\t\tmid=(l+r)>>1;\n\t\tBCJ.clear(p); sum=p;\n\t\tfor(int i=1;i<=p;i++){\n\t\t\tfor(int j=i+1;j<=p;j++){\n\t\t\t\tif(!BCJ.same(i,j)&&\n\t\t\t\tdis(P[i],P[j])<=mid){\n\t\t\t\t\tBCJ.merge(i,j);\n\t\t\t\t\tsum--; //\u5408\u5e76\n\t\t\t\t}\n\t\t\t}\n\t\t} if(sum<=s)\n\t\t\tr=mid;\n\t\telse l=mid+1;\n\t} printf(\"%.2lf\\n\",sqrt(l)); //\u5f97\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n\n\u4e3a\u6211\u70b9\u4e2a\u8d5e\u5427\uff0c\u795d\u4f60\u540d\u540e\u6302\u91d1\u94a9!\n\n\u8c22\u8c22\u5927\u5bb6! !\n",
        "postTime": 1569120859,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u505a\u672c\u9898\u9996\u5148\u5e94\u8be5\u77e5\u9053\u4e00\u5171\u6709p\u4e2a\u70b9\u5c31\u662f\u6811\u6709p-1\u6761\u8fb9\uff0c\u6709s\u4e2a\u536b\u661f\u7535\u8bdd\u5c31\u662f\u4e0d\u7528\u8fde\u63a5\u6700\u5927\u7684s-1\u6761\u8fb9\u3002\n\n\u56e0\u4e3a\u6570\u636e\u8303\u56f4\u5c0f\uff0c\u672c\u9898\u9002\u7528kruskal\u3002\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u548c\u4e24\u7aef\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u4f46\u672c\u9898\u6700\u91cd\u8981\u7684\u90e8\u5206\u662f\u536b\u661f\u7535\u8bdd\uff0c\u7531\u524d\u6587\u4fbf\u53ef\u53ea\u672c\u9898\u4e00\u5171\u53ea\u9700\u8981\u6811\u4e2d\u524d\uff08p-s\uff09\u6761\u8fb9\u91cc\u7684\u6700\u5927\u8fb9\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u8fb9\u7528\u536b\u661f\u7535\u8bdd\u3002\n\nac\u4ee3\u7801\uff1a\n\n```cpp\n    #include<bits/stdc++.h>\n    #define reint register int\n    using namespace std;\n    const int N=505;\n    struct P1{\n        int t1,t2;double v;\n    }line[N*N];\n    struct po{\n        double x,y;\n    }st[N];\n    int s,p,num,fa[N];double ans;\n    inline double dis(int x1,int y1){\n        return sqrt((st[x1].x-st[y1].x)*\n                    (st[x1].x-st[y1].x)+\n                    (st[x1].y-st[y1].y)*\n                    (st[x1].y-st[y1].y));\n    }\n    inline bool cmp(P1 x,P1 y){\n        return x.v<y.v;\n    }\n    int find(int x){\n        if(x!=fa[x])fa[x]=find(fa[x]);\n        return fa[x];\n    }\n    inline void unionn(int x,int y)  {  \n        fa[find(x)]=find(y);  \n    }\n    int main(){\n        scanf(\"%d%d\",&s,&p);\n        for(reint i=1;i<=p;i++)fa[i]=i;\n        for(reint i=1;i<=p;i++){\n            scanf(\"%lf\",&st[i].x);\n            scanf(\"%lf\",&st[i].y);\n        }\n        for(reint i=1;i<=p;i++)\n        for(reint j=i+1;j<=p;j++){\n            num++;\n            line[num].t1=i;\n            line[num].t2=j;\n            line[num].v=dis(i,j);\n        }\n        sort(line+1,line+num+1,cmp);\n        int a,b;s=p-s;\n        for(reint i=1;i<=num,s>0;i++){\n            a=line[i].t1;b=line[i].t2;\n            if(find(a)!=find(b)){\n                unionn(a,b);s--;\n                ans=max(ans,line[i].v);    \n            }\n        }\n        printf(\"%.2lf\",ans);\n        return 0;\n}\n```",
        "postTime": 1516461796,
        "uid": 52605,
        "name": "\u6765\u65e5\u65b9\u957f",
        "ccfLevel": 4,
        "title": "P1991 \u65e0\u7ebf\u901a\u8baf\u7f51"
    },
    {
        "content": "\u5176\u5b9e\u4e0d\u5fc5\u60f3\u5220\u8fb9\u7684\u95ee\u9898\uff0c\u592a\u9ebb\u70e6\u3002\n\n\u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u8bbe\u7535\u8bdd\u6570\u4e3ax\uff0c\u5219\u53ef\u901a\u8fc7\u7535\u8bdd\u628ax\u4e2a\u8054\u901a\u5feb\u8fde\u63a5\u8d77\u6765\u3002\u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u65e0\u7ebf\u7535\u8fde\u63a5\u8282\u70b9\uff0c\u4f7f\u56fe\u4e2d\u4ec5\u5269x\u4e2a\u8054\u901a\u5757\u3002\u7136\u540e\u5c31\u662f\u8d2a\u5fc3\u7b56\u7565\uff0c\u628a\u8fb9\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5c1d\u8bd5\uff0c\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\uff0c\u76f4\u5230\u56fe\u4e2d\u4ec5\u5269x\u4e2a\u8054\u901a\u5757\u3002\u5177\u4f53\u770b\u4ee3\u7801\n\n```cpp\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n\nusing namespace std;\n\nstruct edge {//\u8fb9\n    int u;\n    int v;\n    double d;\n};\n\nint set[600], set_num;//\u96c6\u5408\uff0c\u96c6\u5408\u7684\u4e2a\u6570\nint s, p;\nedge e[300000];//\u8fb9\n\nint findset(int x)//\u5e76\u67e5\u96c6\uff0c\u641c\u5bfb\u6839\u8282\u70b9\u5e76\u538b\u7f29\u8def\u5f84\n{\n    int root, i;\n\n    root = x;\n    while (set[root] != root)\n    {\n        root = set[root];\n    }\n    i = x;\n    while (set[i] != root)\n    {\n        int j = set[i];\n        set[i] = root;\n        i = j;\n    }\n    return root;\n}\n\nvoid merge(int x, int y)//\u96c6\u5408\u5408\u5e76\n{\n    set[findset(y)] = findset(x);\n}\n\nedge temp[300000];//\u5f52\u5e76\u6392\u5e8f\u7684\u8f85\u52a9\u6570\u7ec4\n\nvoid msort(edge *a, int l, int r)//\u5f52\u5e76\u6392\u5e8f\n{\n    if (l == r)\n        return;\n    if (l + 1 == r)\n    {\n        if (a[l].d > a[r].d)\n        {\n            edge t = a[l];\n            a[l] = a[r];\n            a[r] = t;\n        }\n        return;\n    }\n    int i = l;\n    int mid = (l + r) / 2;\n    int j = mid + 1;\n    int k = l;\n\n    msort(a, l, mid);\n    msort(a, mid + 1, r);\n\n    while (i <= mid || j <= r)\n    {\n        if (j > r || i <= mid&&a[i].d < a[j].d)\n            temp[k++] = a[i++];\n        else\n            temp[k++] = a[j++];\n    }\n    for (i = l; i <= r; i++)\n        a[i] = temp[i];\n}\n\nint main()\n{\n    int i, j;\n    int x[600], y[600];//\u5750\u6807\n\n    scanf(\"%d %d\", &s, &p);\n    set_num = p;//\u96c6\u5408\u6570\u4e00\u5f00\u59cb\u7b49\u4e8e\u7ed3\u70b9\u6570\n\n    for (i = 0; i < p; i++)\n    {\n        set[i] = i;//\u521d\u59cb\u5316\u96c6\u5408\n        scanf(\"%d %d\", &x[i], &y[i]);\n    }\n\n    int k = 0;\n    for (i = 0; i < p; i++)//\u5904\u7406\u8fb9\n    {\n        for (j = 0; j < p; j++)\n        {\n            e[k].u = i;\n            e[k].v = j;\n            e[k++].d = sqrt((x[i] - x[j])*(x[i] - x[j]) + \n                (y[i] - y[j])*(y[i] - y[j]));\n        }\n    }\n\n    msort(e, 0, k - 1);//\u6392\u5e8f\n\n    for (i = 0; i < k; i++)//\u8d2a\u5fc3\u7b56\u7565\n    {\n        if (findset(e[i].u) != findset(e[i].v))\n        {\n            merge(e[i].u, e[i].v);\n            set_num--;//\u6210\u529f\u5408\u5e76\u96c6\u5408\u5219\u96c6\u5408\u6570\u51cf\u4e00\n        }\n        if (set_num <= s)\n            break;//\u82e5\u96c6\u5408\u6570\u5df2\u7ecf\u7b26\u5408\u8981\u6c42\uff0c\u8df3\u51fa\u5faa\u73af\n    }\n\n    printf(\"%.2lf\", e[i].d);//\u7b2ci\u6761\u8fb9\u7684\u957f\u5ea6\u5373\u4e3a\u6700\u5c0f\u503c\n\n    system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1513168934,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u7528prim\u4ee3\u7801\u8d85\u7ea7\u77ed\u7684\u3002\n\n\u5148\u89e3\u91ca\u4e00\u4e0b\u4e3a\u5565\u7b54\u6848\u5c31\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2cn\u5927\u8fb9\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\u6700\u5c0f\u751f\u6210\u6811\u80af\u5b9a\u6ee1\u8db3\u6700\u5927\u8fb9\u6700\u5c0f\u7684\u6027\u8d28\n\n\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5220\u6389\u8fd9\u4e2a\u6811\u91cc\u7684n-1\u6761\u8fb9\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u5220\u8fb9\u7684\u65f6\u5019\u4e0d\u662f\u628a\u8fd9\u4e2a\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u52a0\u4e0a\u536b\u661f\u7535\u8bdd\uff0c\n\n\u800c\u662f\u5229\u7528\u4e86\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff0c\u4e00\u4e2a\u6811\u91cc\uff0c\u5220\u6389n\u6761\u8fb9\u4e00\u5b9a\u51fa\u73b0n+1\u4e2a\u8fde\u901a\u5757\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u8054\u901a\u5757\u91cc\u6709\u4e14\u53ea\u6709\u4e00\u53f0\u7535\u8bdd\u5373\u53ef\uff0c\n\n\u6240\u4ee5\u4e00\u5b9a\u00b7\u80fd\u5220n-1\u6761\u8fb9\uff0c\u7b54\u6848\u5c31\u662f\u7b2cn\u5927\u7684\u8fb9\n\n\u7136\u540e\u6211\u7528prim\u5199\u7684\u8fd9\u9053\u9898\uff0c\u6bd4\u514b\u9c81\u65af\u5361\u5c14\u597d\u5199\u591a\u4e86\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<stdio.h>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nint x[510];int y[510];\ndouble dis[510][510];\ndouble d[510];\ndouble res[510];int cnt;\nint now;int p;int n;\nbool book[510];\nbool cmp(double a,double b)\n{\n return a>b;\n}\nint main()\n{\n    scanf(\"%d%d\",&p,&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&x[i],&y[i]);\n        d[i]=0x3f3f3f3f;\n    }\n    for(int i=1;i<=n;i++)//\u5904\u7406\u4e24\u4e2a\u70b9\u95f4\u7684\u8ddd\u79bb\n    {\n        for(int j=1;j<i;j++)\n        {\n            double a=x[i]-x[j];double b=y[i]-y[j];\n            a*=a;b*=b;\n            dis[i][j]=sqrt(a+b);dis[j][i]=dis[i][j];\n        }\n    }\n    d[1]=0;\n    for(int i=1;i<=n;i++)//prim\u819c\u677f\n    {\n        double minval=0x3f3f3f3f;\n        for(int j=1;j<=n;j++)//\u627e\u5230d\u503c\u6700\u5c0f\u7684\u70b9\n        {\n            if(minval>d[j]&&book[j]==false)\n            {\n                minval=d[j];now=j;\n            }\n        }\n        book[now]=true;res[++cnt]=minval;\n        for(int j=1;j<=n;j++)//\u52a0\u5165\u751f\u6210\u6811\u4e2d\n        {\n            if(book[j]==false)\n            {\n                d[j]=min(d[j],dis[now][j]);\n            }\n        }\n    }\n    sort(res+1,res+n+1,cmp);//\u6392\u5e8f\n    printf(\"%.2lf\",res[p]);\n    return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n```",
        "postTime": 1509796130,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "1. #### \u9898\u9762\uff1a\n\u5317\u6781\u7684\u67d0\u533a\u57df\u5171\u6709 n \u5ea7\u6751\u5e84\uff0c\u6bcf\u5ea7\u6751\u5e84\u7684\u5750\u6807\u7528\u4e00\u5bf9\u6574\u6570 (x,y) \u8868\u793a\u3002\u4e3a\u4e86\u52a0\u5f3a\u8054\u7cfb\uff0c\u51b3\u5b9a\u5728\u6751\u5e84\u4e4b\u95f4\u5efa\u7acb\u901a\u8baf\u7f51\u7edc\u3002\u901a\u8baf\u5de5\u5177\u53ef\u4ee5\u662f\u65e0\u7ebf\u7535\u6536\u53d1\u673a\uff0c\u4e5f\u53ef\u4ee5\u662f\u536b\u661f\u8bbe\u5907\u3002\u6240\u6709\u7684\u6751\u5e84\u90fd\u53ef\u4ee5\u62e5\u6709\u4e00\u90e8\u65e0\u7ebf\u7535\u6536\u53d1\u673a\uff0c \u4e14\u6240\u6709\u7684\u65e0\u7ebf\u7535\u6536\u53d1\u673a\u578b\u53f7\u76f8\u540c\u3002\u4f46\u536b\u661f\u8bbe\u5907\u6570\u91cf\u6709\u9650\uff0c\u53ea\u80fd\u7ed9\u4e00\u90e8\u5206\u6751\u5e84\u914d\u5907\u536b\u661f\u8bbe\u5907\u3002\n\n\u4e0d\u540c\u578b\u53f7\u7684\u65e0\u7ebf\u7535\u6536\u53d1\u673a\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u53c2\u6570 d\uff0c\u4e24\u5ea7\u6751\u5e84\u4e4b\u95f4\u7684\u8ddd\u79bb\u5982\u679c\u4e0d\u8d85\u8fc7 d \u5c31\u53ef\u4ee5\u7528\u8be5\u578b\u53f7\u7684\u65e0\u7ebf\u7535\u6536\u53d1\u673a\u76f4\u63a5\u901a\u8baf\uff0cd \u503c\u8d8a\u5927\u7684\u578b\u53f7\u4ef7\u683c\u8d8a\u8d35\u3002\u62e5\u6709\u536b\u661f\u8bbe\u5907\u7684\u4e24\u5ea7\u6751\u5e84\u65e0\u8bba\u76f8\u8ddd\u591a\u8fdc\u90fd\u53ef\u4ee5\u76f4\u63a5\u901a\u8baf\u3002\n\n\u73b0\u5728\u6709 k \u53f0\u536b\u661f\u8bbe\u5907\uff0c\u8bf7\u4f60\u7f16\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8ba1\u7b97\u51fa\u5e94\u8be5\u5982\u4f55\u5206\u914d\u8fd9 k \u53f0\u536b\u661f\u8bbe\u5907\uff0c\u624d\u80fd\u4f7f\u6240\u62e5\u6709\u7684\u65e0\u7ebf\u7535\u6536\u53d1\u673a\u7684 d \u503c\u6700\u5c0f\uff0c\u5e76\u4fdd\u8bc1\u6bcf\u4e24\u5ea7\u6751\u5e84\u4e4b\u95f4\u90fd\u53ef\u4ee5\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u901a\u8baf\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0b\u9762\u4e09\u5ea7\u6751\u5e84\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/65088.png)\n\n\n\n##### \u5176\u4e2d |AB|=10,|BC|=20,|AC|=10\u221a5\u224822.36\n\n\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u536b\u661f\u8bbe\u5907\u6216\u53ea\u6709 1 \u53f0\u536b\u661f\u8bbe\u5907 (k=0 \u6216 k=1)\uff0c\u5219\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7684 d=20\uff0c\u56e0\u4e3a A \u548c B\uff0cB \u548c C \u53ef\u4ee5\u7528\u65e0\u7ebf\u7535\u76f4\u63a5\u901a\u8baf\uff1b\u800c A \u548c C \u53ef\u4ee5\u7528 B \u4e2d\u8f6c\u5b9e\u73b0\u95f4\u63a5\u901a\u8baf (\u5373\u6d88\u606f\u4ece A \u4f20\u5230 B\uff0c\u518d\u4ece B \u4f20\u5230 C)\uff1b\n\n\u5982\u679c\u6709 2 \u53f0\u536b\u661f\u8bbe\u5907 (k=2)\uff0c\u5219\u53ef\u4ee5\u628a\u8fd9\u4e24\u53f0\u8bbe\u5907\u5206\u522b\u5206\u914d\u7ed9 B \u548c C \uff0c\u8fd9\u6837\u6700\u5c0f\u7684 d \u53ef\u53d6 10\uff0c\u56e0\u4e3a A \u548c B \u4e4b\u95f4\u53ef\u4ee5\u7528\u65e0\u7ebf\u7535\u76f4\u63a5\u901a\u8baf\uff1bB \u548c C \u4e4b\u95f4\u53ef\u4ee5\u7528\u536b\u661f\u76f4\u63a5\u901a\u8baf\uff1bA \u548c C \u53ef\u4ee5\u7528 B \u4e2d\u8f6c\u5b9e\u73b0\u95f4\u63a5\u901a\u8baf\u3002\n\n\u5982\u679c\u6709 3 \u53f0\u536b\u661f\u8bbe\u5907\uff0c\u5219 A,B,C \u4e24\u4e24\u4e4b\u95f4\u90fd\u53ef\u4ee5\u76f4\u63a5\u7528\u536b\u661f\u901a\u8baf\uff0c\u6700\u5c0f\u7684 d \u53ef\u53d6 0\u3002\n\n~~\u4e0a\u9762\u6765\u81ea\u67d0\u7206\u96f6\u4e00\u672c\u901a~~\n\n### \u5176\u5b9e\u8fd9\u4e48\u4e00\u5927\u5806\u9898\u9762\u53ea\u662f\u544a\u8bc9\u6211\u4eec\uff1a\u6c42\u4e00\u5f20\u56fe\uff0c\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53bb\u6389K\u6761\u6700\u957f\u8fb9\uff0c\u5269\u4e0b\u7684\u7b2cK+1\u957f\u7684\u8fb9.\n\n\u5f53\u6b63\u5411\u601d\u8003\u53d7\u963b\u65f6\uff0c\u9006\u5411\u601d\u7ef4\u53ef\u80fd\u6709\u5947\u6548\u3002\u672c\u9898\u5c31\u662f\u8fd9\u6837\u3002\u77e5\u9053\u536b\u661f\u8bbe\u5907\u7684\u6570\u91cf\uff0c\u6c42\u6700\u5c0f\u7684\u6536\u53d1\u8ddd\u79bb\uff0c\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\uff1b\n\n\u4f46\u5982\u679c\u77e5\u9053\u8ddd\u79bb\u6c42\u6570\u91cf\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u628a\u6240\u6709\u53ef\u4ee5\u4e92\u76f8\u901a\u8baf\u7684\u6751\u5e84\u8fde\u63a5\u8d77\u6765\uff0c\u6784\u6210\u4e00\u4e2a\u56fe\u3002\u536b\u661f\u8bbe\u5907\u7684\u53f0\u6570\u5c31\u662f\u56fe\u7684\u8fde\u901a\u652f\u7684\u4e2a\u6570\u3002\n\n \n\n       \u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684d\uff0c\u4f7f\u5f97\u628a\u6240\u6709\u6743\u503c\u5927\u4e8ed\u7684\u8fb9\u53bb\u6389\u4e4b\u540e\uff0c\u8fde\u901a\u652f\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8ek\u3002\n\n       \u5148\u770b\u4e00\u4e2a\u5b9a\u7406\u3002\u5b9a\u74062\uff1a\u5982\u679c\u53bb\u6389\u6240\u6709\u6743\u503c\u5927\u4e8ed\u7684\u8fb9\u540e\uff0c\u6700\u5c0f\u751f\u6210\u6811\u88ab\u5206\u5272\u6210\u4e3ak\u4e2a\u8fde\u901a\u652f\uff0c\u56fe\u4e5f\u88ab\u5206\u5272\u6210\u4e3ak\u4e2a\u8fde\u901a\u652f\u3002\n\n       \u8bc1\u660e\uff1a\u7528\u53cd\u8bc1\u6cd5\u3002\u5047\u8bbe\u539f\u56fe\u88ab\u5206\u5272\u6210k\u2019 (k'\u2260k)\u4e2a\u8fde\u901a\u652f\uff0c\u663e\u7136\u4e0d\u53ef\u80fdk\u2019>k\uff0c\u6240\u4ee5k\u2019<k\u3002\u56e0\u6b64\u5728\u67d0\u4e00\u56fe\u7684\u8fde\u901a\u652f\u4e2d\uff0c\u6700\u5c0f\u751f\u6210\u6811\u88ab\u5206\u6210\u4e86\u81f3\u5c11\u4e24\u90e8\u5206\uff0c\u4e0d\u59a8\u8bbe\u5176\u4e3aT1,T2\u3002\u56e0\u4e3aT1\u548cT2\u540c\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u652f\uff0c\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728x\u2208T1\uff0cy\u2208T2\uff0cw(x,y)\u2264d\u3002\u53c8\u56e0\u4e3a\u5728\u6574\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6240\u4ee5x\u5230y\u7684\u8def\u5f84\u4e2d\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u6743\u503c\u5927\u4e8ed\u7684\u8fb9(u,v)\uff08\u5426\u5219x\u548cy\u5c31\u4e0d\u4f1a\u5206\u5c5e\u4e8eT1\u548cT2\u4e86\uff09\uff0cw(x,y)\u2264d<w(u,v)\uff0c\u6240\u4ee5\u628a(x,y)\u52a0\u5165\uff0c\u628a(u,v)\u53bb\u6389\uff0c\u5c06\u5f97\u5230\u4e00\u68f5\u603b\u6743\u503c\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u8fd8\u5c0f\u7684\u751f\u6210\u6811\u3002\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u6240\u4ee5\uff0c\u539f\u547d\u9898\u6210\u7acb\u3002\uff08\u8bc1\u6bd5\uff09\n\n       \u6709\u4e86\u8fd9\u4e2a\u5b9a\u7406\uff0c\u5f88\u5bb9\u6613\u5f97\u5230\u4e00\u4e2a\u6784\u9020\u7b97\u6cd5\uff1a\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2ck\u957f\u8fb9\u5c31\u662f\u95ee\u9898\u7684\u89e3\u3002\n\n \n\n       \u9996\u5148\uff0cd\u53d6\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7b2ck\u957f\u7684\u8fb9\u662f\u53ef\u884c\u7684\u3002\u5982\u679cd\u53d6\u7b2ck\u957f\u7684\u8fb9\uff0c\u6211\u4eec\u5c06\u53bb\u6389\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u524dk-1\u957f\u7684\u8fb9\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5c06\u88ab\u5206\u5272\u6210\u4e3ak\u90e8\u5206\u3002\u7531\u5b9a\u74062\uff0c\u539f\u56fe\u4e5f\u5c06\u5206\u5272\u6210\u4e3ak\u90e8\u5206\u3002\uff08\u53ef\u884c\u6027\uff09\n\n       \u5176\u6b21\uff0c\u5982\u679cd\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7b2ck\u957f\u7684\u8fb9\u5c0f\u7684\u8bdd\uff0c\u6700\u5c0f\u751f\u6210\u6811\u81f3\u5c11\u88ab\u5206\u5272\u6210\u4e3ak+1\u90e8\u5206\uff0c\u539f\u56fe\u4e5f\u81f3\u5c11\u88ab\u5206\u5272\u6210\u4e3ak+1\u90e8\u5206\u3002\u4e0e\u9898\u610f\u4e0d\u7b26\u3002\uff08\u6700\u4f18\u6027\uff09\n\n       \u7efc\u4e0a\u6240\u8ff0\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7b2ck\u957f\u7684\u8fb9\u662f\u4f7f\u5f97\u8fde\u901a\u652f\u4e2a\u6570\u2264k\u7684\u6700\u5c0f\u7684d\uff0c\u5373\u95ee\u9898\u7684\u89e3\u3002\n       \n       \n \u4e0b\u9762\u4e0d\u54c6\u55e6\u4e86\uff0c\u8d34\u4ee3\u7801\uff08\u6211\u76f8\u4fe1\u5404\u4f4d\u5927\u4f6c\u90fd\u4e0d\u9700\u8981\u4ee3\u7801\uff09\uff1a\n \n ```\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\n\nusing namespace std;\n\nint n,T,k,m,f[505],cnt;\ndouble x[505],y[505],ans[505*505];\nstruct node\n{\n\tint x,y; \n\tdouble d;\t\n}p[505*505];\n\ndouble dist(double x1,double y1,double x2,double y2)\n{\n\treturn sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));//\u52fe\u80a1\u5b9a\u7406\u6c42\u8ddd\u79bb\n}\n\nbool cmp(node a,node b)\n{\n\treturn a.d<b.d;\n}\n\nint getf(int x)\n{\n\treturn x==f[x]?x:f[x]=getf(f[x]);\n}\n\nint main()\n{\n\t\tscanf(\"%d%d\",&k,&n);\n\t\tif(k>=n) \n\t\t{\n\t\t\tprintf(\"0.00\\n\");\n\t\t\treturn 0;\n\t\t} \n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tcin>>x[i]>>y[i];\n\t\t\tf[i]=i;\n\t\t}\n\t\t\n\t\tfor(int i=1;i<=n;i++)\n\t\t  for(int j=i+1;j<=n;j++)\n\t\t    p[++m]=(node){i,j,dist(x[i],y[i],x[j],y[j])};\n\t\t    \n\t\tsort(p+1,p+m+1,cmp);\n\t\t\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint fa=getf(p[i].x),fb=getf(p[i].y);\n\t\t\tdouble d=p[i].d;\n\t\t\tif(fa!=fb)\n\t\t\t{\n\t\t\t\tf[fa]=fb;\n\t\t\t\tans[++cnt]=d;\n\t\t\t}\n\t\t}//KRUSKAL\u6a21\u677f\n\t\t\n\t\tprintf(\"%.2lf\\n\",ans[cnt-k+1]);\n\t\t\n\treturn 0;\n}\n```\n\n ",
        "postTime": 1563782033,
        "uid": 126136,
        "name": "Plus_Ultra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u505a\u8fd9\u9053\u9898\u548c\u53d1\u9898\u89e3\u7684\u4eba\u633a\u591a\uff0c\u4f46\u662f\u4f3c\u4e4e\u6ca1\u6709\u7ecf\u8fc7\u4e25\u683c\u8bc1\u660e\u7684\n\n\u4e0b\u9762\uff0c\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u505a\u6cd5\u4ee5\u53ca\u5229\u7528\u5b9a\u7406\u8bc1\u660e\n\n---\n\n\u8f6c\u5316\u9898\u610f\uff0c\u6211\u4eec\u77e5\u9053\u536b\u661f\u8bbe\u5907\u7684\u6570\u91cf\uff0c\u8981\u6c42\u6700\u5c0f\u7684\u6536\u53d1\u8ddd\u79bb\uff1f\uff1f\uff1f   \n\u5982\u679c\u6211\u4eec\u77e5\u9053\u8ddd\u79bb\u6c42\u6570\u91cf\u5c31\u597d\u4e86\uff0c\u76f4\u63a5\u628a\u6240\u6709\u80fd\u591f\u4e92\u76f8\u901a\u8baf\u7684\u6751\u5e84\u8fde\u63a5\u8d77\u6765\u6784\u6210\u4e00\u4e2a\u56fe\uff0c\u6c42\u56fe\u4e2d\u7684\u8054\u901a\u652f\u4e2a\u6570\uff08\u4e5f\u5c31\u662f\u536b\u661f\u8bbe\u5907\u7684\u53f0\u6570\uff09\u5c31\u5b8c\u4e86\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u4e2a\u5c3d\u91cf\u5c0f\u7684$d$\uff0c\u4f7f\u5f97\u628a\u5927\u4e8e$d$\u7684\u4fbf\u5168\u90e8\u53bb\u6389\uff0c\u4f7f\u5f97\u8054\u901a\u652f\u4e2a\u6570\u5c0f\u4e8e$S$\n\n\u5728\u8fd9\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u77e5\u9053\u4e00\u4e2a\u5b9a\u7406\uff1a\u53bb\u6389\u6240\u6709\u6743\u503c\u5927\u4e8e$d$\u7684\u8fb9\u4e4b\u540e\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4f1a\u88ab\u5212\u5206\u4e3a$k$\u4e2a\u8054\u901a\u652f\uff0c\u56fe\u4e5f\u5c31\u88ab\u5206\u4e3a\u4e86$k$\u4e2a\u8054\u901a\u652f\u2014\u2014\u5b9a\u74061\n\n#### \u8bc1\u660e\uff1a\n\n\u6211\u4eec\u5047\u8bbe\u539f\u56fe\u88ab\u5206\u4e3a\u4e86$k'$\u4e2a\u8054\u901a\u652f\uff08$k' \\not = k$\uff09\u663e\u7136$k' < k$\uff0c\u56e0\u6b64\u67d0\u4e00\u4e2a\u56fe\u7684\u8054\u901a\u652f\u4e2d\uff0c\u6700\u5c0f\u751f\u6210\u6811\u88ab\u5206\u6210\u4e86\u81f3\u5c11\u4e24\u90e8\u5206\uff0c\u628a\u4ed6\u4eec\u8bbe\u6210$G_1,G_2$\uff0c\u56e0\u4e3a$G_1$\u4e0e$G_2$\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u652f\uff0c\u6240\u4ee5$x \\in G_1,y \\in G_2,w(x,y)\\leq d$\u3002\u53c8\u56e0\u4e3a\u5728\u6574\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u56e0\u6b64$x,y$\u4e4b\u95f4\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u6743\u503c\u5927\u4e8e$d$\u7684\u8fb9$(u,v)$\uff08\u56e0\u4e3a\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c$x,y$\u5c31\u4e0d\u4f1a\u5b58\u5728\u4e8e$G_1,G_2$\u4e86\uff09\uff0c$w(x,y) \\leq d <w(u,v)$\uff0c\u6240\u4ee5\u52a0\u5165$(x,y)$\u800c\u53bb\u6389$(u,v)$\uff0c\u5c06\u5f97\u5230\u4e00\u68f5\u603b\u6743\u503c\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u8fd8\u8981\u5c0f\u7684\u6811\uff0c\u663e\u7136\u4e0d\u6210\u7acb\u3002\n\n\u6211\u4eec\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u4e86\u5b9a\u74061\n\n\u8fd9\u4e2a\u5b9a\u7406\u88ab\u8bc1\u660e\u6210\u7acb\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6784\u9020\uff0c\u5f97\u5230\n\n> \u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2c$k$\u957f\u8fb9\u5373\u662f\u6211\u4eec\u7684\u7b54\u6848\n\n#### \u8bc1\u660e\uff1a\n\n$d$\u53d6\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2c$k$\u957f\u8fb9\u53ef\u884c\u3002\u5982\u679c$d$\u4e3a\u7b2c$k$\u957f\u8fb9\uff0c\u6211\u4eec\u5c06\u53bb\u6389\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u524d$k-1$\u957f\u7684\u8fb9\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4f1a\u88ab\u5206\u5272\u6210$k$\u90e8\u5206\uff0c\u6839\u636e\u6211\u4eec\u7684\u5b9a\u74061\uff0c\u5f97\u5230\u539f\u56fe\u4e5f\u88ab\u5206\u5272\u6210\u4e3a$k$\u90e8\u5206\uff0c\u6211\u4eec\u8bc1\u660e\u4e86\u8fd9\u662f\u53ef\u884c\u7684\n\n\u6211\u4eec\u8981\u8bc1\u660e\u7b54\u6848\u662f\u6700\u4f18\u7684\uff0c\u6211\u4eec\u5047\u8bbe$d$\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2c$k$\u8fb9\u8fd8\u8981\u5c0f\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5c31\u81f3\u5c11\u88ab\u5206\u5272\u6210\u4e3a$k+1$\u90e8\u5206\uff0c\u539f\u56fe\u4e5f\u81f3\u5c11\u88ab\u5206\u5272\u6210\u4e3a$k+1$\u90e8\u5206\uff0c\u4e0e\u9898\u610f\u4e0d\u7b26\n\n\u6240\u4ee5\u8bf4\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2c$k$\u957f\u8fb9\u5373\u662f\u6211\u4eec\u7684\u7b54\u6848\n\n\u8bc1\u6bd5\n\n\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint fa[505],px[505],py[505];\ndouble ans[505];\nint m,n,k,cnt;\nstruct ff{\n\tint x,y;\n\tdouble d;\n}p[250000];\ndouble dist(int ax,int ay,int bx,int by){return sqrt((ax-bx)*(ax-bx)+(ay-by)*(ay-by));}\nint find(int x)\n{\n\tif(fa[x]!=x)\tfa[x]=find(fa[x]);\n\treturn fa[x];\n}\nbool cmp(ff a,ff b){return a.d<b.d;}\nint main(){\n\tscanf(\"%d %d\",&k,&n);\n\tif(k>=n)\treturn puts(\"0.00\")&0;\n\tfor(int i=1;i<=n;++i)\tfa[i]=i,scanf(\"%d %d\",&px[i],&py[i]);\n\tfor(int i=1;i<=n;++i)\tfor(int j=i+1;j<=n;++j)\tp[++m]=(ff){i,j,dist(px[i],py[i],px[j],py[j])};\n\tsort(p+1,p+1+m,cmp);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint x=find(p[i].x),y=find(p[i].y);\n\t\tif(x!=y)\n\t\t{\n\t\t\tfa[x]=y;\n\t\t\tans[++cnt]=p[i].d;\n\t\t}\n\t}\n\tprintf(\"%.2lf\",ans[cnt-k+1]);\n\treturn 0;\n}\n```",
        "postTime": 1571401790,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u5176\u5b9e,\u53ef\u4ee5\u4e8c\u5206 + \u5e76\u67e5\u96c6\u505a\n\n\u679a\u4e3eans, \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u628aans\u8303\u56f4\u5185\u7684\u70b9\u8fde\u6210\u4e00\u4e2a\u8054\u901a\u5757, \u5982\u679c\u5269\u4e0b\u7684\u8054\u901a\u5757\u6570\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u536b\u661f\u6570\u91cf, \u5c31\u8bf4\u660e\u53ef\u4ee5\u4e86\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define dis(a, b, c, d) (sqrt((a - c) * (a - c) + (b - d) * (b - d)))\n#define INF 0x3f3f3f3f\n#define eps 1e-10\nusing namespace std;\nconst int N = 505;\nint x[N], y[N], deep[N], fa[N];\ndouble map[N][N];\nint n, m;\ninline int dcmp(double x) {\n    if (fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\ninline int find(int x) {\n    int o = x;\n    while (fa[x] != x) x = fa[x];\n    while (o != x) {\n        int &t = fa[o];\n        o = t;\n        t = x;\n    }\n    return x;\n}\ninline void merge(int u, int v) {\n    if (deep[u] < deep[v]) fa[u] = v;\n    else {\n        fa[v] = u;\n        if (deep[u] == deep[v]) deep[u]++;\n    }\n}\nvoid Init() {\n    for (int i = 1; i <= n; i++) {\n        fa[i] = i;\n        deep[i] = 0;\n    }\n}\nbool check(double d) {\n    Init();\n    int cnt = n;\n    for (int i = 1; i <= n; i++) {\n        for (int j = i + 1; j <= n; j++) {\n            if (dcmp(map[i][j] - d) <= 0) {\n                int u = find(i);\n                int v = find(j);\n                if (u != v) merge(u, v), cnt--;\n            }\n        }\n    }\n    if (cnt <= m) return true;\n    return false;\n}\ndouble find(double l, double r) {\n    while (dcmp(r - l)) {\n        double m = (l + r) / 2;\n        if (check(m)) r = m;\n        else l = m;\n    }\n    return (r + l) / 2;\n}\nint main() {\n    scanf(\"%d %d\", &m, &n);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d %d\", &x[i], &y[i]);\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            map[i][j] = dis(x[i], y[i], x[j], y[j]);\n        }\n    }\n    double ans = find(0.0, 20000.0);\n    printf(\"%.2lf\", ans);\n    return 0;\n}\n\n```",
        "postTime": 1509075905,
        "uid": 49078,
        "name": "acfox",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "**\u4e0a\u5348\u6a21\u62df\u8d5b\u8fd9\u9053\u9898\u88ab\u5751\u60e8**\n\n\u53d1\u9898\u89e3\u7eaa\u5ff5\uff1a\n\n\u8003\u8651\u8d2a\u5fc3\uff1b\n\n\u8fd9\u9053\u9898\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\n\n\n\u5148\u9884\u5904\u7406\u51fa\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1b\n\n\u7136\u540e\u5efa\u8fb9\uff0c \u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff1b\n\n\u7528\u6570\u7ec4\u8bb0\u5f55\u751f\u6210\u6811\u7684\u8fb9\uff1b\n\n\u91cd\u70b9\uff01\uff01\n\n\u56e0\u4e3a\u6709S\u4e2a\u7535\u8bdd\uff0c \u6700\u591a\u80fd\u8fdeS-1\u6761\u8fb9\uff1b\n\n\u6240\u4ee5\u8d2a\u5fc3\u7684\u6765\u60f3\uff0c \u53bb\u6389\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6700\u5927\u7684S-1\u6761\u8fb9\uff1b\n\n\u5269\u4e0b\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\uff01\n\n\uff01\uff01\uff01\n\n\uff08\u6572\u9ed1\u677f\uff09\n\n\u751f\u6210\u6811\u7684\u8fb9\u7684\u8ba1\u6570\u5fc5\u987b\u4ece0\u5f00\u59cb\uff01\uff01\n\n\u5c31\u662f\u4ee3\u7801\u91cc\u7684k\uff1b\n\n\u624b\u6b8b\u6a21\u62df\u8d5b\u7206\u96f6\uff01\uff01\u5207\u8bb0\uff01\uff01\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\nint s, p;\n\ninline int read()\n{\n    int X=0,w=0; char ch=0;\n    while(!isdigit(ch)) {w|=ch=='-';ch=getchar();}\n    while(isdigit(ch)) X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    return w?-X:X;\n}\n\ninline void write(int x)\n{\n     if(x<0) putchar('-'),x=-x;\n     if(x>9) write(x/10);\n     putchar(x%10+'0');\n}\n\nint x[510], y[510];\n\ndouble dist(int x, int y, int i, int j)\n{\n\treturn sqrt((abs(x - i) * abs(x - i)) + ((abs(y - j)) * (abs(y - j))));\n}\n\ndouble dis[510][510];\n\nstruct Edge\n{\n\tint x;\n\tint y;\n\tdouble v;\n}ed[500010];int cnt;\n\nbool cmp(Edge a, Edge b)\n{\n\treturn a.v < b.v;\n}\n\nint f[50010];\nint find(int x)\n{\n\tif(x == f[x]) return x;\n\treturn f[x] = find(f[x]);\n}\n\nint line[500010];\n\nint main()\n{\n//\tfreopen(\"wireless.in\",\"r\",stdin);\n//\tfreopen(\"wireless.out\",\"w\",stdout);\n\ts = read(), p = read();\n\tfor(register int i=1;i<=p;i++)\n\t{\n\t\tx[i] = read(), y[i] = read();\n\n\t}\n\tfor(register int i=1;i<=p;i++)\n\t{\n\t\tfor(register int j=1;j<=p;j++)\n\t\t{\n\t\t\tif(i == j) dis[i][j]/* = dis[j][i] */= 0x7fffff;\n\t\t\telse dis[i][j] /*= dis[j][i]*/ = dist(x[i], y[i], x[j], y[j]);\n\t\t\t//cout<<dis[i][j]<<\" \";\n\t\t\tcnt++;\n\t\t\ted[cnt].x = i;\n\t\t\ted[cnt].y = j;\n\t\t\ted[cnt].v = dis[i][j];\n\t\t}\n\t}\n\tfor(register int i=1;i<=p;i++) f[i] = i;\n\t\n\tsort(ed+1, ed+1+cnt, cmp);\n\t\n\t\n\tint k = 0;///////\u6ce8\u610f\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tint x = ed[i].x , y = ed[i].y ;\n\t\tif(find(x) != find(y))\n\t\t{\n\t\t\tf[find(x)] = find(y);\n\t\t\tk++;\n\t\t\tline[k] = i;\n\t\t}\n\t\tif(k == p - 1)break;\n\t}\n\t//cout<<line[k - s/2];\n\t//cout<<ed[line[k-s+1]].v;\n\tprintf(\"%.2lf\",ed[line[p-s]].v);\n//\tfclose(stdin);\n//\tfclose(stdout);\n\treturn 0;\n\t\n}\n```\n",
        "postTime": 1519798050,
        "uid": 56756,
        "name": "BriMon",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "## \u663e\u7136\uff0c\u8fd9\u9898\u662f\u4e00\u9053\u74f6\u9888\u751f\u6210\u6811\uff0c\u4f46\u662f\u7531\u4e8e\u6709\u4e86\u536b\u661f\u7535\u8bdd\u7684\u8fd9\u4e2a\u9ebb\u70e6\u64cd\u4f5c\uff0c\u5bfc\u81f4\u6211\u4eec\u9700\u8981\u614e\u91cd\u601d\u8003\uff0c\u6b63\u786e\u7b54\u6848\u5230\u5e95\u662f\u7b2c\u51e0\u5927\u7684\u90a3\u4e00\u6761\u8fb9\uff01\n\n### \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u60f3\u4ecb\u7ecd\u4e00\u4e0b\u6211\u7684\u60f3\u6cd5\u3002\n### 1.\u9996\u5148\uff0c\u5982\u679c\u629b\u5f00\u536b\u661f\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u662f\u8fden-1\u6761\u8fb9\uff0c\u4f46\u662f\u73b0\u5728\u6709\u4e86\u536b\u661f\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fb9\u7684\u4e2a\u6570\u80af\u5b9a\u8981\u51cf\u5c11\u3002\n### 2.\u81f3\u4e8e\u5230\u5e95\u8981\u51cf\u5c11\u591a\u5c11\uff0c\u8fd9\u91cc\u8fd9\u6837\u7406\u89e3\uff1a\u6709s\u4e2a\u536b\u661f\u70b9\uff0c\u90a3\u4e48\u8fd9s\u4e2a\u536b\u661f\u70b9\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u8fd9\u4e2a\u8054\u901a\u5757\u4e2d\u6709\u7528\u7684\u8fb9\u6709s-1\u6761\uff0c\u6240\u4ee5\uff0c\u8981\u8fde\u7684\u8fb9\u5c31\u662f n-1-\uff08s-1\uff09\u6761\u3002        \n### 3.\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\uff0c\u6700\u957f\u7684\u90a3\u51e0\u6761\u8fb9\uff0c\u90fd\u5728\u8fd9\u4e2a\u8054\u901a\u5757\u4e2d\uff0c\u4e0d\u5c31\u51fa\u73b0bug\u4e86\u5417\uff1f\u5176\u5b9e\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u5b58\u5728\u7684\u3002\u56e0\u4e3a\u6839\u636e\u7b97\u6cd5 \uff0c\u5982\u679c\u5f53\u524d\u8fde\u4e86\u8fb9\uff0c\u90a3\u4e48\u5c06\u4f1a\u901a\u8fc7\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\u7684\u72b6\u6001\uff0c\u800c\u5982\u679c\u5f53\u524d\u7684\u8fb9\u8fde\u7684\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u662f\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u90a3\u4e48\u5c31\u4f1a\u5ffd\u7565\u8fd9\u6761\u8fb9\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6ca1\u6709\u4e86\u8fd9\u79cd\u60c5\u51b5\u3002\n\n## \u5bf9\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\u5206\u6790\uff0c\u5c31\u4e0d\u518d\u8fc7\u591a\u5730\u4ecb\u7ecd\uff0c\u6bd5\u7adf\uff0c\u5982\u679c\u641e\u6e05\u695a\u4e86\u8981\u6c42\u7684\u7b54\u6848\u662f\u54ea\u4e00\u6761\u8fb9\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u74f6\u9888\u751f\u6210\u6811\u7684\u88f8\u9898\u4e86\u3002\n\n```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=5e2;\nint n,s,i,j,cnt,now,xx,yy;\nint f[N],x[N],y[N];\ndouble ans;\n\nstruct number{\nint x,y;\ndouble w;\n}num[N*N];\n\ninline bool cmp(number a,number b){return a.w<b.w;}\ninline int get(int x){\nif (f[x]==x) return x;\t\nreturn f[x]=get(f[x]);\n} \n\nint main(){\nscanf(\"%d%d\",&s,&n);\nfor (i=1; i<=n; i++) scanf(\"%d%d\",&x[i],&y[i]);\n\tfor (i=1; i<=n-1; i++)\n\tfor (j=i+1; j<=n; j++)\n\t{\n\tcnt++;\n\tnum[cnt].x=i,num[cnt].y=j;\n\tnum[cnt].w=sqrt((double)(x[i]-x[j])*(x[i]-x[j])+(double)(y[i]-y[j])*(y[i]-y[j]));\n\t}\nsort(num+1,num+cnt+1,cmp);\t\n\nfor (i=1; i<=n; i++) f[i]=i;\nnow=0;\n\tif (now!=n-1-(s-1))\n\tfor (i=1; i<=cnt; i++)\n\t{\n\tif (now==n-1-(s-1)) {printf(\"%.2lf\\n\",ans); return 0;}\t\n\txx=get(num[i].x); yy=get(num[i].y);\n\tif (xx!=yy)\n\tf[xx]=yy,now++,ans=num[i].w;\t\n\t}\n\t\nprintf(\"%.2lf\\n\",ans);\nreturn 0;\t\n}\n\n```\n",
        "postTime": 1551108209,
        "uid": 73436,
        "name": "\u8bf4\u597d\u4e0d\u54ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u5bf9\u6211\u6709\u5386\u53f2\u6027\u7684\u610f\u4e49\uff0c\u56e0\u4e3a\u6211\u6df1\u523b\u610f\u8bc6\u5230\uff1a\n\n\u4e0d\u8981\u7528namespace!\n\n\u4e0d\u8981\u7528namespace!\n\n\u4e0d\u8981\u7528namespace!\n\n\u5199\u6b64\u9898\u89e3\uff0c\u4ee5\u793a\u4ed6\u4eba\u3002\n\n~~\uff08\u641e\u9519\u91cd\u70b9\u4e86\u5427\u5582\uff01\uff09~~\n\n------------\n\n\u597d\uff0c\u56de\u5f52\u6b63\u9898\uff1a\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u662f\u8fd9\u6837\uff1a\n\n\u9996\u5148\uff0c\u7528Kruskal\u7b97\u6cd5\u3002\n\n\uff08\u5efa\u8bae\u5148\u628a \u5e76\u67e5\u96c6\u6a21\u677f\u4e0e \u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f \u6253\u4e86\u518d\u7ee7\u7eed\u770b\uff09\n\n\u6211\u4eec\u56de\u987e\u4e00\u4e0bKruskal\u7b97\u6cd5\u7684\u8fc7\u7a0b\uff1a\n\n\u628a\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u4e00\u6761\u6761\u6392\u597d\uff0c\u7136\u540e\u518d\u4ece\u672a\u9009\u62e9\u7684\u70b9\u4e2d\u6dfb\u52a0\u8fb9\uff0c\u4e00\u76f4\u6dfb\u52a0\u5230**\u8282\u70b9\u6570-1**\u4e3a\u6b62\u3002\n\n\u91cd\u70b9\uff1a\u4e3a\u4ec0\u4e48\u662f\u8282\u70b9\u6570-1\uff1f\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u8981\u8ba9\u56fe\u8fde\u901a\u3002\n\n**\u53ef\u4e0d\u53ef\u4ee5\u4e0d\u8fde\u901a\uff1f** \n\n\u53ef\u4ee5\uff01\n\n\u8be5\u9898\u4e2d\uff0c\u536b\u661f\u7535\u8bdd\u7684\u5b58\u5728\uff0c\u5c31\u662f\u4e3a\u4e86\u53ef\u4ee5\u8ba9\u56fe\u65ad\u5f00\u3002\u800c\u6700\u540e\u6c42\u7684\u6700\u5927\u8fb9\uff0c\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u6dfb\u52a0\u5230\u56fe\u4e2d\u7684\u8fb9\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 200005\nint node,edgenum=0,ans=0,k=0,s;\nint fat[MAXN],siz[MAXN];\n//\u5750\u6807 \nstruct pair\n{\n\tint first,second;\n}\ta[MAXN];\n//\u56fe \nstruct EDGE\n{\n\tint from,to;double cost;\n}\te[MAXN];\n//\u6bd4\u8f83\u5668 \nbool cmp(EDGE a,EDGE b)\t{return a.cost<b.cost;}\n//\u5e76\u67e5\u96c6 + \u8def\u5f84\u538b\u7f29 + \u542f\u53d1\u5f0f\u641c\u7d22 \nint Find(int x){ return (fat[x]==x)? x : fat[x]=Find(fat[x]); }\nvoid unionn(int x,int y){\n\tx=Find(x); y=Find(y);\n\tif(siz[x]>siz[y])\tstd::swap(x,y);\n\tfat[x]=y;\tsiz[y]+=siz[x]; \n}\n//\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u516c\u5f0f \ndouble distance(pair m , pair n)\n{\n\tdouble ans=std::sqrt( (m.first-n.first)*(m.first-n.first) + (m.second-n.second)*(m.second-n.second) );\n\treturn ans;\n}\n\nint main()\n{\n\tdouble d;\n\tstd::scanf(\"%d%d\",&s,&node);\n\tfor(int i=1;i<=node;++i)\tscanf(\"%d%d\",&a[i].first,&a[i].second);\n\tfor(int i=1;i<=node;++i)\t{fat[i]=i;\tsiz[i]=1;}\t//\u521d\u59cb\u5316 \n\tfor(int i=1;i<=node;++i)\t//\u6784\u56fe \n\t{\n\t\tfor(int j=i+1;j<=node;++j)\n\t\t{\n\t\t\te[ ++edgenum ].from=i;\te[ edgenum ].to=j;\n\t\t\te[ edgenum ].cost=distance(a[i],a[j]);\n\t\t}\n\t}\n\t//\tKurskal \n\tstd::sort(e+1,e+edgenum+1,cmp);\n\tfor(int i=1;i<=edgenum;++i)\n\t{\n\t\tif(k==node-s) break;//\u8282\u70b9\u6570-\u536b\u661f\u7535\u8bdd\u6570\n\t\tif(Find(e[i].from) != Find(e[i].to))\n\t\t{\n\t\t\tunionn(e[i].from,e[i].to); \n\t\t\td=e[i].cost;\t++k; \n\t\t}\n\t}\t\t\n\tstd::printf(\"%.2lf\",d);\n\treturn 0;\n}\n```\n\n\u5176\u5b9e\u8fd9\u9898\u7684\u6570\u636e\u6709\u70b9\u5f31\u3002\n\n\u6211\u7684\u4ee3\u7801\u662f\u6709\u7f3a\u9677\u7684\uff0c\u53ef\u662fAC\u4e86\u3002\n\n\u5e94\u8be5\u8fd8\u8981\u518d\u6dfb\u52a0\u4e00\u4e9b\u7279\u5224\u3002\n\n\u6bd4\u5982\uff0c\u5f53\u536b\u661f\u7535\u8bdd\u6570\u5927\u4e8e\u8282\u70b9\u6570\u65f6\uff0cd\u5e94\u8be5\u4e3a0\u3002\n\n\u5f53\u536b\u661f\u7535\u8bdd\u6570\u4e3a0\u65f6\uff0c\u5e94\u8be5\u4e0e\u536b\u661f\u7535\u8bdd\u4e3a1\u65f6\u7684\u60c5\u51b5\u76f8\u7b49\u3002\n\n",
        "postTime": 1584977341,
        "uid": 128451,
        "name": "x_miracle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011 \n\u6700\u5c0f\u751f\u6210\u6811 + \u514b\u9c81\u65af\u5361\u5c14    \n\n### \u3010\u9898\u76ee\u5927\u610f\u3011\n\u6709\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u548c\u536b\u661f\u7535\u8bdd\u4e24\u79cd\u5de5\u5177    \n\u536b\u661f\u7535\u8bdd\u4e0d\u9700\u8981\u8003\u8651\u8ddd\u79bb    \n\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u6709\u4f20\u64ad\u8ddd\u79bb\u7684\u9650\u5236    \n\u6c42\u8fd9\u4e2a\u9650\u5236\u6700\u5c0f\u662f\u591a\u5c11    \n\n### \u3010\u9898\u76ee\u5206\u6790\u3011\n\u536b\u661f\u7535\u8bdd\u53ef\u4ee5\u5f53\u505a\u514d\u8d39\u7684    \np\u4e2a\u54e8\u6240\u9700\u8981p-1\u6761\u8fb9\u8fde\u63a5\u8d77\u6765   \n\u800cs\u4e2a\u536b\u661f\u7535\u8bdd\u53ef\u4ee5\u514d\u53bbs-1\u6761\u8fb9   \n\u6240\u4ee5\u5c31\u53ea\u5269\u4e0b\u4e86p-s\u6761\u8fb9\u9700\u8981\u627e   \n\u627e\u6700\u5c0f\u7684    \n\u6240\u4ee5\u6700\u5c0f\u751f\u6210\u6811\u5c31\u5f88\u663e\u7136\u4e86   \n\n### \u3010\u6838\u5fc3\u601d\u8def\u3011\n\u5c06\u4e24\u4e24\u4e4b\u95f4\u7684\u5339\u914d\u65b9\u5f0f\u7528\u7ed3\u6784\u56fe\u50a8\u5b58\u4e00\u4e0b   \n\u7136\u540esort\u6392\u5e8f\u4ece\u6700\u77ed\u7684\u8fb9\u5f00\u59cb\u8bd5    \n\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u6ca1\u6709\u88ab\u63a5\u8d77\u6765   \n\u90a3\u5c31\u8fde\u8d77\u6765\u5c31\u597d\u4e86   \n\u8fd9\u6837\u77e5\u9053\u7528\u5b8cp-s\u6761\u8fb9    \n\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u6392\u7684\u5e8f   \n\u6240\u4ee5\u6700\u540e\u7528\u7684\u90a3\u4e00\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u6700\u5927\u7684   \n\u8f93\u51fa\u5c31\u597d\u4e86      \n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm> \n#include<cmath>\n\nusing namespace std;\n\nint read()\n{\n\tint sum = 0,fg = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9')\n\t{\n\t\tif(c == '-')fg = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9')\n\t{\n\t\tsum = sum * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn sum * fg;\n}\nconst int Max = 503;\nint x[Max],y[Max];\nint father[Max];\nstruct node\n{\n\tint xx,yy;\n\tdouble l;\n}a[Max * Max];\n\nbool cmp(const node aa,const node bb)\n{\n\treturn aa.l < bb.l;\n}\n\nint find(int xz)\n{\n\tif(father[xz] != xz)father[xz] = find(father[xz]);\n\treturn father[xz];\n}\n\nvoid hebing(int xz,int yz)\n{\n\txz = find(xz);\n\tyz = find(yz);\n\tif(yz != xz)\n\t\tfather[xz] = yz;\n}\n\nint main()\n{\n\tint s = read(),p = read();\n\tfor(register int i = 1;i <= p;++ i)\n\t\tfather[i] = i;\n\tfor(register int i = 1;i <= p;++ i)\n\t\tx[i] = read(),y[i] = read();\n\tint jj = 0;\n\tfor(register int i = 1;i <= p;++ i)\n\t{\n\t\tfor(register int j = i + 1;j <= p;++ j)\n\t\t{\n\t\t\ta[++ jj].xx = i;\n\t\t\ta[jj].yy = j;\n\t\t\ta[jj].l = double(sqrt((x[i] - x[j]) * (x[i] - x[j]) * 1.0 + (y[i] - y[j]) * (y[i] - y[j]) * 1.0));\n\t\t}\n\t}\n\tsort(a + 1,a + jj + 1,cmp);\n\tint tot = p - s;\n\tint js = 0;\n\tdouble M = 0;\n\tfor(register int i = 1;i <= jj;++ i)\n\t{\n\t\tif(find(a[i].xx) != find(a[i].yy))\n\t\t{\n\t\t\tjs ++;\n\t\t\tM = a[i].l;\n\t\t\thebing(a[i].xx,a[i].yy);\n\t\t}\n\t\tif(js == tot)\n\t\t\tbreak;\n\t}\n\tprintf(\"%.2lf\\n\",M);\n\treturn 0;\n}\n```",
        "postTime": 1573216429,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u662f\u5178\u578b\u7684\u4e00\u4e2a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6211\u7528\u7684\u662fkruskar\u7b97\u6cd5\uff0c\u5e76\u67e5\u96c6\u90a3\u91cc\u7528\u4e86\u4e00\u4e2a\u8def\u5f84\u538b\u7f29\u7684\u5c0f\u4f18\u5316\u3002\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint father[1000005],n,m,s,p,x[10001],y[10001];\nstruct Edge {\n\tint u,v;\n\tdouble w;\n} edge[1000005];\nint GetFather(int num) { //\u5e76\u67e5\u96c6\u7684\u67e5\u627e\u7236\u4eb2\u64cd\u4f5c\n\tif(father[num]==num) return num;\n\treturn father[num]=GetFather(father[num]); //\u8def\u5f84\u538b\u7f29\n}\nvoid merge(int x,int y) { //\u5408\u5e76\u4e24\u4e2a\u70b9\u7684\u64cd\u4f5c\n\tint x_father=GetFather(x);\n\tint y_father=GetFather(y);\n\tif(x_father!=y_father)\n\t\tfather[y_father]=x_father;\n\treturn;\n}\nbool cheak(int x,int y) { //\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\n\treturn GetFather(x)==GetFather(y);\n}\nbool cmp(Edge k,Edge x) { //STL sort\u7684\u6bd4\u8f83\u5668\n\treturn k.w<x.w;\n}\ndouble kruskar() { //kruskal\u6a21\u677f\n\tint cnt=0;\n\tdouble ret=0,maxx=0;\n\tsort(edge+1,edge+1+m,cmp);\n\tfor(int i=1; i<=m-s; i++) {\n\t\tif(cnt==p-s) break;     //\u7531\u9898\u610f\u53ef\u5f97\uff0c\u53ea\u9700\u8981\u9009x-s\u6761\u8fb9\n\t\tif(cheak(edge[i].u,edge[i].v)) continue;\n\t\telse {\n\t\t\tret+=edge[i].w;\n\t\t\tmerge(edge[i].u,edge[i].v);\n\t\t\tcnt++;\n\t\t\tmaxx=max(maxx,edge[i].w);\n\t\t}\n\t}\n\treturn maxx;\n}\ndouble pf(double k) {\n\treturn k*k;\n}\nint main() {\n\tcin>>s>>p;\n\tfor(int i=1; i<=p; i++)\n\t\tcin>>x[i]>>y[i];\n\tfor(int i=1; i<=p; i++)\n\t\tfor(int j=1; j<=p; j++)  //\u7b97\u51fa\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\t\t\tif(i!=j) {\n\t\t\t\tm++;\n\t\t\t\tedge[m].u=i;\n\t\t\t\tedge[m].v=j;\n\t\t\t\tedge[m].w=sqrt(pf(x[i]-x[j])+pf(y[i]-y[j]));\n\t\t\t}\n\tfor(int i=1; i<=p; i++) father[i]=i;\n\tprintf(\"%.2lf\",kruskar());\n\treturn 1;\n}\n```\n\u5e0c\u671b\u5927\u5bb6\u591a\u591a\u70b9\u8d5e\uff08\u590d\u5236\u4ee3\u7801\u4e0d\u662f\u597d\u4e60\u60ef\u54df\uff01\uff09",
        "postTime": 1568005601,
        "uid": 112275,
        "name": "Gloaming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "### \u9898\u76ee\n[P1991 \u65e0\u7ebf\u901a\u8baf\u7f51](https://www.luogu.org/problem/P1991)\n### \u9898\u76ee\u5927\u610f\n\u6211\u4e00\u5f00\u59cb\u5728\u9898\u610f\u4e0a\u7406\u89e3\u6709\u95ee\u9898\u5148\u8bf4\u4e00\u4e0b\u9898\u610f\u3002\u4f60\u8981\u8ba9$p$\u4e2a\u54e8\u6240\u90fd\u53ef\u4ee5\u4e92\u76f8\u901a\u8bdd\uff08\u53ef\u4ee5\u662f\u95f4\u63a5\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7`\u65e0\u7ebf\u7535\u6536\u53d1\u5668`\u4e5f\u53ef\u4ee5\u901a\u8fc7`\u536b\u661f\u7535\u8bdd`\u3002\u8fd9\u4e2a`\u536b\u661f\u7535\u8bdd`\u5b83\u7279\u522b\u6d41\u5564\uff0c\u6ca1\u6709\u8ddd\u79bb\u9650\u5236\uff0c\u53ea\u8981\u4e24\u4e2a\u54e8\u6240\u90fd\u6709`\u536b\u661f\u7535\u8bdd`\u5c31\u53ef\u4ee5\u901a\u8bdd\u800c`\u65e0\u7ebf\u7535\u6536\u53d1\u5668`\u6709\u4e00\u5b9a\u7684\u8ddd\u79bb\u9650\u5236\uff0c\u53ea\u6709\u4e24\u4e2a\u54e8\u6240\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c0f\u4e8e$D$\u624d\u53ef\u4ee5\u901a\u8bdd\u3002\u73b0\u5728\u7ed9\u4f60$s$\u4e2a`\u536b\u661f\u7535\u8bdd`\uff0c\u8ba9\u4f60\u5c06\u7740$s$\u4e2a\u7535\u8bdd\u5206\u914d\u4e00\u4e0b\uff0c\u4f7f\u5f97\u6700\u540e$D$\u6700\u5c0f\u3002\uff08\u53ef\u80fd\u63cf\u8ff0\u7684\u4e5f\u4e0d\u597d\uff0c\u89c1\u8c05\u3002\u3002\u3002\uff09\n### \u601d\u8def\n\u5e76\u67e5\u96c6\u3002\u7b97\u51fa\u6ca1\u4e24\u4e2a\u54e8\u6240\u4e4b\u95f4\u7684\u8ddd\u79bb\u5b58\u8d77\u6765\uff0c\u6309\u8ddd\u79bb\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u7531\u5c0f\u5230\u5927\u679a\u4e3e\u8fd9\u4e9b\u8fb9\uff0c\u5982\u679c\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u54e8\u6240\u4e0d\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\u5c31\u8fde\u8d77\u6765\uff0c\u8fde\u901a\u5757\u6570\u91cf\u51cf\u4e00\uff08\u4e00\u5f00\u59cb\u8fde\u901a\u5757\u6570\u91cf\u4e3a$p$\uff09\uff0c\u76f4\u5230\u8fde\u901a\u5757\u6570\u91cf\u4e3a$s$\uff08\u5269\u4e0b\u7684\u4e0d\u8fde\u901a\u7684\u7528`\u536b\u661f\u7535\u8bdd`\uff09\uff0c\u56e0\u4e3a$s$\u4e2a`\u536b\u661f\u7535\u8bdd`\u53ef\u4ee5\u514d\u8d39\u8fde\u63a5$s-1$\u4e2a\u54e8\u6240\uff0c\u6240\u4ee5\u53ea\u8981\u8fde\u901a\u5757\u6570\u91cf\u4e3a$s$\u5c31\u53ef\u4ee5\u505c\u6b62\u4e86\u3002\n\n### $Code$\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<iomanip>\n#include<algorithm>\n#include<string>\n#include<cmath>\n#define MAXN 501\nint s,p,fa[MAXN],size[MAXN];\nint a[MAXN],b[MAXN];\nstruct info{\n\tint u,v;\n\tdouble w;\n}qwq[250001];\nbool cmp(info a,info b){\n\treturn a.w<b.w;\n}\nint find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid Union(int x,int y){\n\tint rootx=find(x),rooty=find(y);\n\tif(rootx==rooty) return;\n\tif(size[rootx]>size[rooty]){\n\t\tfa[rooty]=rootx;\n\t\tsize[rootx]+=size[rooty];\n\t}else{\n\t\tfa[rootx]=rooty;\n\t\tsize[rooty]+=size[rootx];\n\t}\n}\ninline void read(int &T){\n\tint x=0;bool f=0;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=!f;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\tT=f?-x:x;\n}\n\nint main(){\n\tread(s),read(p);\n\tfor(int i=1;i<=p;++i) fa[i]=i;\n\tfor(int i=1;i<=p;++i) read(a[i]),read(b[i]);\n\tint sum=0;\n\tfor(int i=1;i<=p;++i){\n\t\tfor(int j=1;j<=p;++j){\n\t\t\tif(i!=j){\n\t\t\t\tdouble jl=sqrt((a[i]-a[j])*(a[i]-a[j])+(b[i]-b[j])*(b[i]-b[j]));\n\t\t\t\tsum++;\n\t\t\t\tqwq[sum].u=i,qwq[sum].v=j,qwq[sum].w=jl;\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(qwq+1,qwq+sum+1,cmp);\n\tint stop=1+(s-1);\n\tint ub=p;\n\tfor(int i=1;i<=sum;++i){\n\t\tif(ub==stop){\n\t\t\tstd::cout<<std::fixed<<std::setprecision(2)<<qwq[i-1].w;\n\t\t\treturn 0;\n\t\t}\n\t\tif(find(qwq[i].u)!=find(qwq[i].v)){\n\t\t\tUnion(qwq[i].u,qwq[i].v);\n\t\t\tub--;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1567846397,
        "uid": 142110,
        "name": "yu__xuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u5927\u90e8\u5206\u90fd\u662f\u6bd4\u8f83\u7eaf\u7cb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u505a\u6cd5\u8bf6\n\n\u8fd9\u91cc **\u5e76\u67e5\u96c6+\u4e8c\u5206\u7b54\u6848** \u7684\u505a\u6cd5\u611f\u89c9\u4e5f\u662f\u5f88\u7b80\u660e\u7684\n\n\u9898\u76ee\u8981\u6211\u4eec\u6c42\u7684**\u6700\u5c0f\u901a\u8bdd\u8ddd\u79bb $D$** \u5fc5\u987b\u6ee1\u8db3**\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u901a\u8bdd\u8def\u5f84\uff08\u76f4\u63a5\u7684\u6216\u8005\u95f4\u63a5\u7684\uff09** \u8fd9\u4e2a\u6761\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbe\u5b9a\u7cbe\u5ea6\u8981\u6c42\u6765\u4e8c\u5206 $D$ ,\u5e76\u5224\u5b9a\u8fd9\u4e2a $D$ \u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u5c06\u54e8\u6240\u770b\u6210\u70b9\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u8fb9 $(i,j,k)$ \u5e76\u6839\u636e $k$ \u6392\u5e8f \u3010$(i,j,k)$ \u8868\u793a\u4ece\u70b9 $i$ \u5230\u70b9 $j$ \u7684\u8fb9\uff0c\u8fb9\u957f\u4e3a\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb $k$ \u3011\u3002\n\n\u6b64\u65f6\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5224\u5b9a\u4e00\u4e2a $D$ \u662f\u5426\u6ee1\u8db3\u6761\u4ef6,\u90a3\u4e48\u6211\u4eec\u4ec5\u8003\u8651\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $D$ \u7684\u8fb9\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6b64\u65f6\u56fe\u4e2d\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5757\u3002\u663e\u7136\u5982\u679c\u8fde\u901a\u5757\u6570\u91cf\u5982\u679c\u5927\u4e8e $1$ \uff0c\u90a3\u4e48\u4e0d\u540c\u8fde\u901a\u5757\u4e4b\u95f4\u5c31\u9700\u8981\u536b\u661f\u7535\u8bdd\u6765\u8fde\u63a5\u3002\u82e5\u536b\u661f\u7535\u8bdd\u6570\u91cf $s$ \u5927\u4e8e\u7b49\u4e8e\u8fde\u901a\u5757\u6570\u91cf\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u3002\n\n>\u6ce8 \uff1a\u5bf9\u8fb9\u6392\u5e8f\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u4e8c\u5206\u5f97\u5230\u54ea\u4e9b\u8fb9\u9700\u8981\u8003\u8651\u3002\n\n\u8bbe\u7b54\u6848\u503c\u57df\u4e3a $V$ (\u672c\u9898 $V$ \u6700\u5927\u4e3a$10^8$) , \u4e8c\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log_2V)$ \u3002\n\n\u5224\u5b9a\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u5e76\u67e5\u96c6(\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29\u4e0e\u6309\u79e9\u5408\u5e76\u4f18\u5316)\uff0c\u4e3a $O(p\u03b1(p))$\n\n\u90a3\u4e48\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(p\u03b1(p)log_2V)$\n\n\u4ee3\u7801\u91cc\u9762\u6709\u4e00\u4e9b\u6ce8\u91ca\uff0c\u53ef\u4ee5\u7ed3\u5408\u7406\u89e3\u3002\n>\u6ce8 \uff1a \u8fd9\u91cc $\u03b1(p)$ \u8868\u793a $p$ \u7684\u53cd\u963f\u514b\u66fc\u51fd\u6570\u503c\u3002\n\n$Code:$\n```cpp\n\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\n#define eps (0.0001)\n//\u56db\u820d\u4e94\u5165\uff0c\u6240\u4ee5\u8981\u4fdd\u8bc1\u524d\u4e09\u4f4d\u7cbe\u786e\nstruct edge\n{\n    int u,v;\n    double w;\n    bool operator<(const edge q) const//\u8fd0\u7b97\u7b26\u91cd\u8f7d\n    {\n        return w<q.w; \n    }\n}a[250010];\n\nint s,p,tot,f[510],dep[510];\ndouble pos[510][2],tmp[250010];\nbool vis[510];//\u4e3a\u4e86\u8ba1\u7b97\u8fde\u901a\u5757\u6570\u91cf\u6dfb\u52a0\u7684\u6807\u8bb0\u6570\u7ec4\n\ninline double dis(int i,int j)//\u8ba1\u7b97\u4e24\u70b9\u95f4\u8ddd\u79bb\n{\n    return sqrt((pos[i][0]-pos[j][0])*(pos[i][0]-pos[j][0])+(pos[i][1]-pos[j][1])*(pos[i][1]-pos[j][1]));\n}\n\nint getfa(int x)//\u5b9e\u73b0\u5e76\u67e5\u96c6\n{\n    if(f[x]==x)\n        return x;\n    return f[x]=getfa(f[x]);\n}\n\ninline bool check(double v)//\u5224\u5b9a\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n{\n    int bound=(upper_bound(tmp+1,tmp+1+tot,v)-tmp)-1,cnt=0;//1~bound \u5c31\u662f\u9700\u8981\u8003\u8651\u7684\u8fb9\u4e86; cnt\u4e3a\u8fde\u901a\u5757\u8ba1\u6570\u5668\n    memset(vis,0,sizeof(vis));\n    for(register int i=1;i<=p;i++)//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n        f[i]=i,dep[i]=1;\n    for(register int i=1;i<=bound;i++)//\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\n    {\n        int x=a[i].u,y=a[i].v;\n        int fx=getfa(x),fy=getfa(y);\n        if(fx!=fy)\n        {\n            if(dep[fx]>dep[fy])\n                f[fy]=fx;\n            else if(dep[fx]<dep[fy])\n                f[fx]=fy;\n            else\n                f[fy]=fx,dep[fx]++;\n        }\n    }\n    for(register int i=1;i<=p;i++)//\u8ba1\u7b97\u8fde\u901a\u5757\u6570\u91cf\n    {\n        int temp=getfa(i);\n        if(!vis[temp])\n            vis[temp]=true,cnt++;\n    }\n    if(cnt==1)//\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u5219\u4e0d\u9700\u8981\u8003\u8651\u536b\u661f\u7535\u8bdd\n        return true;\n    return (s>=cnt) ;//\u5224\u65ad\u536b\u661f\u7535\u8bdd\u591f\u4e0d\u591f\u7528\n\n}\n\nint main()\n{\n    scanf(\"%d%d\",&s,&p);\n    for(register int i=1;i<=p;i++)\n        scanf(\"%lf%lf\",&pos[i][0],&pos[i][1]);\n    for(register int i=1;i<=p;i++)\n        for(register int j=i+1;j<=p;j++)\n            a[++tot].u=i,a[tot].v=j,a[tot].w=dis(i,j);\n    sort(a+1,a+1+tot);\n    for(register int i=1;i<=tot;i++)\n        tmp[i]=a[i].w;\n    double l=0.0,r=100000000.0,mid;\n    while((r-l)>eps)//\u4e8c\u5206\u7b54\u6848\n    {\n        mid=(l+r)/2;\n        if(check(mid))\n            r=mid;\n        else\n            l=mid+eps;\n    }\n    printf(\"%.2lf\",mid);\n    return 0;\n}\n```",
        "postTime": 1580560975,
        "uid": 68975,
        "name": "\u5b66\u65e0\u6b62\u5883",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "## \u9996\u5148\u6211\u4eec\u8981\u5148\u60f3\u4e00\u4e0b\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e00\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u6240\u6709\u751f\u6210\u6811\u4e2d\uff0c\u6700\u5927\u8fb9\u6743\u503c\u6700\u5c0f\u7684  \n\u8bc1\u660e\u561b\uff1a\u60f3\u4e00\u4e0bkrusal\u662f\u600e\u6837\u7684\uff0c\u662f\u4e0d\u662f\u4e00\u70b9\u4e00\u70b9\u5f80\u4e0a\u52a0\u6700\u5c0f\u7684\u8fb9\uff0c\u5bf9\u4e8e\u53ef\u4ee5\u66ff\u6362\u8fb9\u7684\uff08\u4e5f\u5373\u662f\u5728\u73af\u91cc\u9762\uff09\u6211\u4eec\u9009\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u90a3\u4e2a\u5148\u8fde\u8d77\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5c31\u662f\u6700\u5927\u8fb9\u6743\u503c\u6700\u5c0f  \n### **\u8fd9\u4e2a\u7ed3\u8bba\u975e\u5e38\u91cd\u8981\uff01\uff01\uff01**  \n\u7136\u540e\u5462\uff0c\u56de\u5230\u539f\u9898\uff0c\u5047\u5982\u8bf4\u6211\u4eec\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\u90fd\u6ca1\u6709\uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5927\u8fb9\u5c31\u662f\u7b54\u6848\u4e86\uff0c\u56e0\u4e3a\u4f60\u8fd8\u8981\u8ba9\u8fd9\u4e00\u6761\u8fb9\u4e5f\u8fde\u4e0a\u624d\u80fd\u6ee1\u8db3\u6bcf\u4e00\u4e2a\u54e8\u6240\u90fd\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u5176\u4ed6\u7684\u8054\u7cfb    \n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u6709m\u6761\u536b\u661f\u7535\u8bdd\u9053\u7684\u5462\uff0c\u8fd9\u4e2a\u5982\u679c\u524d\u9762\u770b\u5f97\u61c2\u7684\u8bdd\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\uff1a\u53ea\u8981\u628a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u5927\u7684\u90a3\u4e9b\u8fb9\u90fd\u8fde\u4e0a\u536b\u661f\u9053\u5c31\u53ef\u4ee5\u4e86\uff08\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u6c42\u7684\u65f6\u5019\u5148\u628a\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u90fd\u53d8\u62100\u7136\u540e\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u56e0\u4e3a\u8bf4\u8fd9\u6837\u7b49\u4ef7\u540e\u524d\u9762\u7684\u8fb9\u5728\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u4f9d\u7136\u4f1a\u8fde\u63a5\u4e0a\uff0c\u7c7b\u4f3c\u4e8e\u524d\u9762\u5206\u6790\u7684\u60c5\u51b5  \n\u6240\u4ee5\u8fd9\u6837\u6c42\u89e3\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u89e3  \n\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\uff0c\u8ddd\u79bb\u91c7\u7528\u5148\u5e73\u65b9\u540e\u5f00\u65b9\u5904\u7406\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include <bits/stdc++.h> \nusing namespace std;\ntypedef long long ll;\nconst int maxn=5e5+10;\nstruct edge{\n\tint from,to,val;\n\tint nxt;\n\tbool operator < (edge &rhs)const{\n\t     return val < rhs.val;\n\t}\n}e[maxn];\nstruct a{\n\tint x,y;\n}lp[maxn];\nint last[maxn],cnt,n,s,ans;\nvoid inc(int x,int y,int v)\n{\n\te[++cnt].from=x;\n\te[cnt].to=y;\n\te[cnt].val=v;\n\te[cnt].nxt=last[x];\n\tlast[x]=cnt;\n}\nint f[maxn];\nvoid init(void)\n{\n\tfor(register int i=1;i<=n;i++) f[i]=i;\n}\nint finds(int x)\n{\n\tif(f[x] == x) return x;\n\treturn f[x]=finds(f[x]);\n}\nvoid uni(int x,int y)\n{\n\tx=finds(x),y=finds(y);\n\tif(x != y) f[x]=y;\n}\nint dis(int r1,int r2)\n{\n    int xx=(lp[r1].x-lp[r2].x)*(lp[r1].x-lp[r2].x);\n    int yy=(lp[r1].y-lp[r2].y)*(lp[r1].y-lp[r2].y);\n    return xx+yy;\n}\nvoid kru(void)\n{\n\tint u=0;\n\tif(n-s==0) {ans=0;return;}\n\tfor(register int i=1;i<=cnt;i++)\n\t{ \n\t\tif(finds(e[i].from) != finds(e[i].to)) \n\t\t{\n\t\t\tuni(e[i].from,e[i].to);\n\t\t\tu++;\n\t\t\tif(n-s==u) {ans=e[i].val;break;}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%i%i\",&s,&n);\n\tfor(register int i=1;i<=n;i++)  scanf(\"%i%i\",&lp[i].x,&lp[i].y);\n\tfor(register int i=1;i<=n;i++)\n\t   for(register int j=1;j<=n;j++)\n\t     if(i!=j) \n\t     {\n\t     \tint d=dis(i,j);\n\t     \tinc(i,j,d);\n\t     \tinc(j,i,d); \n\t\t }\n    init();\n    sort(e+1,e+cnt+1);\n    kru();\n    printf(\"%.2f\",sqrt(ans));\nreturn 0;\n}\n\n```\n\u4ee3\u7801\u4e2d\u7684(n-s==u)\u662f\u7531u==(n-1-(s-1))\u5f97\u5230\u7684\uff0c\u5176\u4e2du\u662f\u5df2\u7ecf\u8fde\u4e0a\u7684\u8fb9\u7684\u6570\u91cf  \n~~\u5e76\u67e5\u96c6\u8ddf\u6700\u5c0f\u751f\u6210\u6811\u5e94\u8be5\u6ca1\u6709\u4eba\u770b\u4e0d\u61c2\u5427~~\n",
        "postTime": 1572698288,
        "uid": 185855,
        "name": "\u5ff5\u53e4\u5170",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "~~\u6211\u6709\u70b9\u795e\u5fd7\u4e0d\u6e05\u6240\u6709\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3~~\u3002\n\n\u8fd9\u9053\u9898\u7684\u5927\u610f\u662f\u6709\u70b9\u96be\u7406\u89e3\u7684\u81f3\u5c11\u6211\u76f4\u63a5\u7406\u89e3\u9519\u4e86\uff0c\n\u4ee5\u4e3a\u662f\u4e00\u4e2a\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u7136\u540e\u76f4\u63a5\u6807\u8bb0\u70b9\u7684\u4e2a\u6570\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4f46\u4e8b\u5b9e\u4e0a\u5e76\u975e\u5982\u6b64 \u539f\u56e0\u662f \u8fd9\u9053\u9898\u7684\u672c\u610f\u662f\u4e00\u4e2a\u74f6\u9888\u751f\u6210\u6811\n\u74f6\u9888\u751f\u6210\u6811\u662f \u5bf9\u4e8e\u8fd9\u6837\u7684\u4e00\u68f5\u6811 \u5176\u6700\u5927\u7684\u8fb9\u6743\u5c0f\u4e8e<=x\u3002\n\n\u5f15\u7406\uff1a\n\n- \u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u74f6\u9888\u751f\u6210\u6811\n- \u74f6\u9888\u751f\u6210\u6811\u5e76\u975e\u6700\u5c0f\u751f\u6210\u6811\n\n\u7b2c\u4e8c\u6761\u663e\u7136\u4e0d\u9700\u8981\u8bc1\u660e\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u6761\u6027\u8d28 \n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\u5982\u679c\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u662f\u74f6\u9888\u751f\u6210\u6811\u90a3\u5176\u4e00\u8fb9\u4e00\u5b9a\u662f>x\u7684\u4f46\u662f\u5bf9\u4e8e\u8fd9\u6837\u4e00\u6761\u8fb9\u8fde\u5728\u4e86\u6811\u4e0a\u90a3\u4e48\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u66f4\u6539\u6210<=x\u7684\u8fb9\u8fde\u5728\u8fd9\u9897\u6811\u4e0a\uff0c\u6784\u6210\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811 \u8fd9\u548c\u6700\u5c0f\u751f\u6210\u6811\u51b2\u7a81 \u6545\u539f\u547d\u9898\u6210\u7acb\u3002\n\n\u8bba\u8fd9\u9053\u9898\u7684\u8bdd\u5176\u5b9e\u6c42\u7684\u662f\u8fd8\u662f\u6700\u5c0f\u751f\u6210\u6811 \u9898\u76ee\u7684\u610f\u601d\u7684\u8bdd\u662f\u8ba9\u6211\u4eec\u53bb\u6389m-1\u6761\u8fb9\u540e\u6700\u5927\u7684\u90a3\u6761\u8fb9\u7684\u503c\u3002\n\n\u6211wa\u8fc760\u4ed4\u7ec6\u601d\u8003\u662f \u4e0d\u80fd\u6a21\u62df\u70b9\u88ab\u5b89\u88c5\u7535\u8bdd\u7684\u8fc7\u7a0b \u539f\u56e0\u662f\n\n\u6211\u4eec\u662f\u5728\u81ea\u5df1\u751f\u6210\u7684\u6811\u4e2d\u5b89\u88c5\u7684\u7535\u8bdd \u800c\u8fd9\u6837\u5e76\u975e\u6700\u4f18\uff0c\u53bb\u6389m-1\u6761\u8fb9\u7684\u539f\u56e0\u662f m\u4e2a\u70b9\u8fde\u8d77\u6765\u6700\u591a\u521b\u9020m-1\u6761\u8fb9\u3002\u8fd9\u65f6\u7b54\u6848\u600e\u4e48\u7edf\u8ba1\u5176\u5b9e\u53ef\u4ee5\u514b\u9c81\u65af\u5361\u5c14\u7684\u65f6\u5019\u76f4\u63a5\u7edf\u8ba1\u5373\u53ef\u3002\n\n```\nsort(s+1,s+1+top);\n    for(int i=1;i<=top;++i)\n    {\n        int xx=getfather(s[i].x);\n        int yy=getfather(s[i].y);\n        if(xx==yy)continue;\n        f[xx]=yy;++w;\n        if(n-w==m){printf(\"%.2lf\",s[i].z);break;}\n     }\n```\n\u5bf9\u4e8e\u5f53\u524d\u5df2\u7ecf\u751f\u6210\u4e86w\u6761\u8fb9 \u603b\u5171\u8981\u751f\u6210n-1\u6761\u8fb9 \u6211\u4eec\u53ef\u4ee5\u642d\u5efa\u7684\u53ea\u6709m-1\u6761\u8fb9 \u6545\u5f53 n-1-w==m-1\u540e\u9762\u7684\u8fb9\u90fd\u53ef\u4ee5\u88ab\u7701\u6389\u3002\n\u7b54\u6848\u4e5f\u5c31\u662f\u4e0a\u4e00\u6761\u751f\u6210\u7684\u8fb9\u3002\n\n~~\u6211\u4e5f\u4e0d\u77e5\u9053\u81ea\u5df1\u8111\u62bd\u4e86\u4e00\u76f4\u8bc1\u660e\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u3002~~",
        "postTime": 1556256504,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u9996\u5148\u5206\u6790\u9898\u610f\uff1aP\u4e2a\u54e8\u6240\u90fd\u6709\u76f4\u63a5\u6216\u95f4\u63a5\u8def\u5f84\u76f8\u8fde\uff0c\u4e14\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u5c3d\u53ef\u80fd\u6700\u5c0f\u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86**\u6700\u5c0f\u751f\u6210\u6811**\n\n\u7531\u4e8e\u662f\u91cd\u70b9\u5bf9\u8fb9\u8fdb\u884c\u5904\u7406\u3002\u4e14\u8fd9\u9898\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u6240\u4ee5\u9009\u62e9**kruskal**\n\n\u8fd9\u9898\u5e76\u975e\u5168\u88f8\u6a21\u677f\u9898\uff0c\u4f46\u662f\u4e86\u89e3\u4e00\u4e0b\u610f\u601d\uff0c\u663e\u7136\u5c31\u662f\u6700\u957f\u7684\u90a3**S**\u6761\u8fb9\u6211~~\u4e0d\u8981~~\u4e86\n\n\u56e0\u4e3a\u536b\u661f\u7535\u8bdd\u7684\u8ddd\u79bb\u4e0d\u9650\uff0c\u6240\u4ee5\u518d\u957f\u7684\u8fb9\u90fd\u53ef\u4ee5\u4e0d\u7528\u65e0\u7ebf\u7535\u76f8\u8fde\uff0c\u4e8e\u662f\u628a\u7528\u536b\u661f\u7535\u8bdd\u8fde\u8d77\u6765\u7684\u8fb9\u53bb\u6389\u4e4b\u540e\uff0c\u5c31\u662f\u5e94\u8be5\u7528\u65e0\u7ebf\u7535\u901a\u8bdd\u8fde\u8d77\u6765\u7684\u4e86\n\n\u56e0\u4e3a\u8981**\u7edf\u4e00\u91c7\u8d2d**\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u5269\u4e0b\u8fb9\u5f53\u4e2d\u6743\u503c\u6700\u5927\u7684\n\n\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\n\n\n------------\n\n\n\u5177\u4f53\u5b9e\u65bd\u53c2\u89c1\u4ee3\u7801\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n#define MAXN 505\nusing namespace std;\nstruct edge {\n\tint u, v;\n\tdouble w;\n}g[MAXN*MAXN];  //\u4e00\u5b9a\u8981\u5f00MAXN*MAXN\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u8981\u5efa\u4efb\u610f\u4e24\u70b9\u76f8\u8fde\u7684\u56fe\uff0c\u4e3aP*P \nint s, p, father[MAXN], x[MAXN], y[MAXN];\nint findFa(int v);\nvector<double> kruskal(int n, int m);  //kruskal\u8fd4\u56de\u4e00\u4e2avector\uff0c\u91cc\u9762\u5168\u662fdouble\uff0c\u5b58\u7684\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u8fb9 \nbool cmp(edge a, edge b) {return a.w<b.w;} //\u8868\u793a\u8fb9\u6743\u5c0f\u7684\u5e94\u6392\u5728\u524d\u9762 \n\nint main()\n{\n\tcin>>s>>p;\n\tfor(int i=1; i<=p; ++i)\tcin>>x[i]>>y[i];\n\tint num=0;\n\tfor(int i=1; i<=p; ++i) {\n\t\tfor(int j=1; j<=p; ++j) {\n\t\t\tg[num].u=i;  g[num].v=j;\n\t\t\tg[num].w=sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n\t\t\tnum++;\n\t\t}\t  //\u5efa\u7acb\u4e00\u4e2a\u4efb\u610f\u4e24\u70b9\u76f8\u8fde\u7684\u56fe \n\t}\n\tvector<double> tree=kruskal(p, p*p); //\u62ff\u5230\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u8fb9 \n\tsort(tree.begin(), tree.end());      //\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5217 \n\tprintf(\"%.2lf\\n\", tree[p-s-1]);      //\u8f93\u51fa\u5269\u4e0b\u7684\u8fb9\u4e2d\u6700\u5927\u7684 \n\treturn 0;\t\n}\n\nint findFa(int v)\n{\n\tif(v==father[v])\treturn v;\n\tint f=findFa(father[v]);\n\tfather[v]=f;\n\treturn f;       //\u5e76\u67e5\u96c6\u627e\u7238\u7238\u51fd\u6570 \n}\n\nvector<double> kruskal(int n, int m)\n{\n\tvector<double> ans;\n\tsort(g+1, g+1+m, cmp);\n\tfor(int i=1; i<=n; ++i) father[i]=i;  //\u653e\u5728\u8fd9\u91cc\u521d\u59cb\u5316\u4e00\u4e0b\u7238\u7238\u6570\u7ec4 \n\tfor(int i=1; i<=m; ++i) {\n\t\tint fau=findFa(g[i].u);\n\t\tint fav=findFa(g[i].v);\n\t\tif(fau!=fav) {\n\t\t\tfather[fau]=fav;\n\t\t\tans.push_back(g[i].w);   //\u8fd9\u91cc\u7684\u64cd\u4f5c\u5e76\u975e\u548c\u4e00\u822ckruskal\u4e00\u6837\uff0c\u662f\u5c06g[i].w\u653e\u5165ans\u8fd9\u4e2avector\u4e2d \n\t\t}\n\t}\n\treturn ans;\n}\n```\n ",
        "postTime": 1533518166,
        "uid": 36517,
        "name": "ForwarDer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u7531\u4e8e\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6211\u5c31\u641e\u4e86\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u4e00\u70b9\uff0c\u4f46\u4ee3\u7801\u7b80\u6d01\u7684\u65b9\u6cd5\uff1aPrim+\u4f18\u5148\u961f\u5217\uff1b\n\n\u601d\u8def\u4e0eKruskal\u76f8\u7c7b\u4f3c\uff0c\u4f46\u597d\u5904\u662f\u4e0d\u9700\u8981\u628a\u6240\u6709\u8fb9\u6c42\u51fa\u6765\uff0c\u7528\u54ea\u6761\u6c42\u90a3\u6761\u3002\u90a3\u6240\u6709\u7684\u8fb9\u6c42\u51fa\u6765\u4e4b\u540e\u90fdpush\u8fdb\u4f18\u5148\u961f\u5217\uff0c\u7136\u540e\u5904\u7406\u4e00\u4e0b\uff0c\u628a\u524ds-1\u5927\u7684pop\u51fa\uff0c\u8f93\u51fatop\u3002\uff08\u4e0d\u8981\u6c42\u5230\u7b2cp-s\u6761\u8fb9\u5c31break\uff0c\u6709\u6bdb\u75c5\uff09\n\n\u00b7\u00b7\u00b7\n\n\n\n\n\n    \n```cpp\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#define Min(a,b) a<b?a:b\n#define N 502\n#define INF 1e8\nusing namespace std;\nint s,p,x[N],y[N],v[N];\npriority_queue<float> ans;\nfloat d[N];\ninline float dis(int a,int b){\n    return sqrt((x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]));\n}\nint main(){\n    scanf(\"%d%d\",&s,&p);\n    for(int i=1;i<=p;i++){\n        scanf(\"%d%d\",&x[i],&y[i]);\n        d[i]=dis(i,1);\n    }\n    v[1]=1;\n    int now=1;\n    while(1){   //Prime\n        float mi=INF;\n        for(int i=1;i<=p;i++){\n            if(v[i]==0&&mi>d[i]){\n                now=i;\n                mi=d[i];\n            }\n        }\n        if(mi==INF)break;\n        ans.push(mi);\n        v[now]=1;\n        for(int i=1;i<=p;i++)if(v[i]==0){\n            d[i]=Min(d[i],dis(now,i));\n        }\n    }\n    for(int i=1;i<s;i++)ans.pop();//\u4f18\u5148\u961f\u5217\u5904\u7406\u7b54\u6848 \n    printf(\"%.2f\\n\",ans.top());\n    return 0;\n}\n```\n\u00b7\u00b7\u00b7\n\u9644\u4e11\u4ee3\u7801\u2026\u2026\n",
        "postTime": 1501585732,
        "uid": 23421,
        "name": "pisceskkk",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u76f4\u63a5Kruskal\n\n\u7136\u540e\u7531\u4e8e\u6709S\u4e2a\u536b\u661f\u53d1\u5c04\u7ad9\n\n\u5c31\u4f1a\u6709S-1\u6761\u8fb9\u6743\u4e3a0\u5f97\u8fb9\n\n\u7136\u540e\n\u6211\u6bd4\u8f83\u7b28= =\n\n\u5728Kruskal\u7684\u65f6\u5019\u628a\u9009\u4e86\u7684\u8fb9\u8bb0\u5f55\u4e0b\u6765\n\n\u6700\u540e\u6392\u5e8f\n\n\u8dd1\u5f97\u6709\u70b9\u6162  \u4e5f\u8bb8\u662fvector\u7684\u7f18\u6545\n\n\u7136\u540e\u8f93\u51fa\u7b2cS\u5927\u7684\uff08\u697c\u4e0b\u65b9\u6cd5\u5176\u5b9e\u66f4\u597d\uff09\n\n\u4ee3\u7801\n```cpp\n\n#include<cmath>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define repn(i) for(int i=1;i<=n;i++)\n#define repm(i) for(int i=1;i<=tot;i++)\n\nusing namespace std;\nconst int maxn=500+5;\nstruct Post{\n    int x,y;\n    Post(){}\n    Post(int x,int y):x(x),y(y){}\n    void input(){\n        scanf(\"%d%d\",&x,&y);\n    }\n    double dis_to(const Post &rhs)const{\n        double dx=rhs.x-x,dy=rhs.y-y;\n        return sqrt(dx*dx+dy*dy);\n    }\n}p[maxn];\nint m,n;\ndouble d[maxn][maxn],u[maxn*maxn],v[maxn*maxn],w[maxn*maxn];\nint init_data()\n{\n    int tot=0;\n    cin>>m>>n;\n    repn(i) p[i].input(); \n    repn(i) repn(j) if(i!=j)\n    {\n        u[++tot]=i;     v[tot]=j;\n        w[tot]=p[i].dis_to(p[j]);\n    }\n    return tot;\n}\n\nvector<double>vv;\nint id[maxn*maxn],f[maxn];\n\nint cmp(int a,int b){return w[a]<w[b];}\nint cmp1(double a,double b){return a>b;}\nint findset(int x){return f[x]==x?x:f[x]=findset(f[x]);}\nvoid Kruskal(int tot)\n{\n    repn(i) f[i]=i;\n    repm(i) id[i]=i;\n    sort(id+1,id+tot+1,cmp);\n    repm(i)\n    {\n        int e=id[i];\n        int x=findset(u[e]);\n        int y=findset(v[e]);\n        if(x!=y)\n        {\n            f[x]=y;\n            vv.push_back(w[e]);\n        }\n    }\n    sort(vv.begin(),vv.end(),cmp1);\n}\n\nint main()\n{\n    Kruskal(init_data());\n    int x=vv.size();\n    printf(\"%.2f\",vv[m-1]);\n    return 0;\n}\n\n\n```",
        "postTime": 1452145673,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u989d\u3002\u3002\u3002\u611f\u89c9\u8fd9\u4e2a\u9898\uff0c\u9898\u89e3\u533a\u7684\u505a\u6cd5\u6709\u70b9\u8ff7\u5427\u3002\u3002\u3002\u3002~~\uff08\u8bb2\u9053\u7406\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u9898\u8ddf\u6700\u5c0f\u74f6\u9888\u6811\u6ca1\u4ec0\u4e48\u5173\u7cfb\u554a\u3002\u3002\u3002\u3002\u3002\u3002\uff09~~\n\n\u561b\uff0c\u4f60\u628a\u8fd9\u4e2a\u56fe\u5efa\u6210\u5b8c\u5168\u56fe\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5f88\u96be\u6ee1\u8db3\u9898\u76ee\u7ed9\u5b9a\u7684\u5c0f\u4e8e\u7b49\u4e8eS\u4e2a\u536b\u661f\u70b9\u3002\u3002\u3002\n\n\u8fd9\u65f6\u5019\u5e94\u8be5\u5f15\u5165\u8d85\u7ea7\u6e90\u70b9\n\u5c31\u662f\u8bf4\uff0c\u662f\u5426\u51b3\u5b9a\u8981\u653e\u536b\u661f\uff08\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u6765\u8bf4\uff09\n\n\n\u7136\u540e\u53c8\u53d1\u73b0\uff0c\u9898\u76ee\u6c42\u5f97\u7684\u7c7b\u4f3c\u4e0e\u6700\u5c0f\u74f6\u9888\u7684\u8fd9\u7c7b\u4e1c\u897f\u3002\u3002\u3002\u3002\u3002\n\n\u4e8e\u662f\u4e4e\u5c31\u8981\u4e8c\u5206\u5566\u3002\u3002\u3002\n\n\u4e8c\u5206\u7b54\u6848\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u5927\u4e8e\u7b54\u6848\uff0c\u8df3\u8fc7\n\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6765\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\n\u5982\u679c\u5f53\u524d\u8fde\u63a5\u8d85\u7ea7\u70b9\u7684\u6570\u91cf\u5927\u4e8eS\n\u663e\u7136\u7b54\u6848\u662f\u5c0f\u7684\n\n\u4e0d\u7136\u5c31\u662f\u5408\u6cd5\uff0c\u53ef\u4ee5\u53d8\u5927\u3002\u3002\u3002\n\n\n~~\u53ef\u80fd\u6700\u5c0f\u74f6\u9888\u6811\u7684\u90a3\u4e2a\u4e5f\u662f\u6b63\u89e3\uff08\u539f\u8c05\u6211\u77e5\u8bc6\u6d45\u8584\uff09~~\n\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 505\nusing namespace std;\n\nint s,p; \nint h[MAXN],fa[MAXN],tot;\ndouble l = 0 , r = 40000 , mid , best;\n\nstruct node{\n\tint x,y;\n}tu[MAXN];\n\nstruct node2{\n\tint from,to,next;\n\tdouble cost;\n}e[MAXN*MAXN+50];\n\nvoid add(int x , int y , double z){\n\ttot++;\n\te[tot].from = x;\n\te[tot].to = y;\n\te[tot].cost = z;\n\te[tot].next = h[x];\n\th[x] = tot;\n}\n\ndouble cal(int a , int b){\n\treturn sqrt( (tu[a].x - tu[b].x) * (tu[a].x - tu[b].x) + (tu[a].y - tu[b].y) * (tu[a].y - tu[b].y) );\n}\n\nbool cmp(node2 a , node2 b){\n\treturn a.cost < b.cost;\n}\n\nint found(int x){\n\tif(fa[x] == x)return x;\n\tfa[x] = found(fa[x]);\n\treturn fa[x];\n}\n\nvoid init(){\n\tmemset(h , -1 , sizeof(h));\n\ttot = 0;\n\tcin>>s>>p;\n\tfor(int i = 1 ; i <= p ; i++)cin>>tu[i].x>>tu[i].y;\n\tfor(int i = 1 ; i <= p ; i++)for(int j = i + 1 ; j <= p ; j++)add(i , j , cal(i , j));\n\tsort(e + 1 , e + 1 + tot , cmp);\n}\n\nint check(){\n\tfor(int i = 1 ; i <= p + 1 ; i++)fa[i] = i;\n\tfor(int i = 1 ; i <= tot ; i++){\n\t\tif(e[i].cost > mid)break; \n\t\tif(found(e[i].from) != found(e[i].to)){\n\t\t\t\tfa[found(e[i].from)] = found(e[i].to);\n\t\t}\n\t}\n\tint sum = 0;\n\tfor(int i = 1 ; i <= p ; i++){\n\t\tif(found(p + 1) != found(i)){\n\t\t\t\tsum++;\n\t\t\t\tfa[found(i)] = found(p + 1);\n\t\t}\n\t\tif(sum > s)return 2;\n\t}\n\treturn 1;\n\t\n}\n\nint main(){\n\tinit();\n\twhile((r - l) > 0.0001){\n\t\tmid = (l + r) / 2;\n\t\tif(check() == 2)l = mid + 0.0001;\n\t\telse r = mid - 0.0001 , best = mid;\n\t}\n\tprintf(\"%.2f\\n\" , r);\n}\n```\n",
        "postTime": 1584597198,
        "uid": 100226,
        "name": "After__rain",
        "ccfLevel": 6,
        "title": "P1991 \u65e0\u7ebf\u901a\u8baf\u7f51\u9898\u89e3"
    },
    {
        "content": "## \u601d\u8def\n\u8981\u6c42\u6bcf\u4e2a\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u8054\u901a\uff0c\u90a3\u4e48\u4fbf\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\n$k$\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u5b9e\u8d28\u4e0a\u53ef\u4ee5\u770b\u6210\u6811\u4e2d\u6709$k$\u4e2a\u70b9\u53ef\u4ee5\u88ab\u770b\u505a\u4e3a\u4e00\u4e2a\u201c\u70b9\u201d\uff0c\u628a\u8fd9$k$\u4e2a\u70b9\u4ece\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6316\u51fa\u6765\uff0c\u5e76\u4e14\u4f7f\u5f97\u8fd9$k$\u4e2a\u70b9\u6784\u6210\u7684\u4e00\u4e2a\u201c\u70b9\u201d\u4ecd\u7136\u4e0e\u539f\u6765\u7684\u751f\u6210\u6811\u76f8\u8fde\u3002\n\n\u7531\u4e8e\u8981\u6c42\u7684\u662f\u6700\u5c0f\u7684\u901a\u8baf\u8ddd\u79bb\uff0c\u90a3\u4e48\u88ab\u6316\u51fa\u6765\u7684\u70b9\u5728\u539f\u6765\u751f\u6210\u6811\u4e2d\u542b\u6709\u7684\u8fb9\u5f53\u7136\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u4e8e\u662f\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u5c06\u8fb9\u6309\u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\uff0c\u88ab\u6316\u51fa\u7684$k$\u4e2a\u70b9\u8ddd\u79bb\u539f\u751f\u6210\u6811\u7684\u8ddd\u79bb\u5176\u5b9e\u5c31\u662f\u8fd9$k$\u4e2a\u70b9\u5728\u539f\u6765\u751f\u6210\u6811\u4e2d\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u5373\u4e3a\u7b2c$k$\u5927\u7684\u8fb9\u3002\u90a3\u4e48\u6392\u5e8f\u540e\u8f93\u51fa\u7b2c$k$\u5927\u7684\u8fb9\u5373\u53ef\u3002\n## \u4ee3\u7801\uff08prim\uff09\n```cpp\n#include<bits/stdc++.h>\n#define INF 0xfffffff\nusing namespace std;\n\nint s,p,point=1;\nbool vh[510];\ndouble x[510],y[510],dist[510],edge[510];\n\ndouble distan(int a,int b) {\n\treturn sqrt((x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]));\n}\n\nbool cmp(double p,double q) {\n\treturn p>q;\n}\n\nvoid prim() {\n\tfor(int i=1;i<=p;i++) dist[i]=1e9;\n\tdist[1]=0;\n\twhile(point<=p) {\n\t\tdouble mind=INF;\n\t\tint mint;\n\t\tfor(int i=1;i<=p;i++) {\n\t\t\tif(!vh[i]&&dist[i]<mind&&dist[i]!=-1) {\n\t\t\t\tmind=dist[i];\n\t\t\t\tmint=i;\n\t\t\t}\n\t\t}\n\t\tvh[mint]=1;\n\t\tedge[point-1]=dist[mint];\n\t\tfor(int i=1;i<=p;i++) {\n\t\t\tif(!vh[i]) {\n\t\t\t\tdist[i]=min(dist[i],distan(i,mint));\n\t\t\t}\n\t\t}\n\t\tpoint++;\n\t}\n}\t\t\n\nint main() {\n\tcin>>s>>p;\n\tfor(int i=1;i<=p;i++) cin>>x[i]>>y[i];\n\t\n\tprim();\n\tsort(edge+1,edge+point+1,cmp);\n\tcout<<fixed<<setprecision(2)<<edge[s]<<endl;\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1571488998,
        "uid": 71936,
        "name": "HoshiuZ",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "### \u9898\u76ee\u4f20\u9001\u95e8\n\n[\u6233\u8fd9\u91cc](https://www.luogu.org/problem/P1991)\n\n### \u9898\u610f\u5206\u6790\n\n\u5176\u5b9e\u4ed4\u7ec6\u770b\u4e00\u4e0b\u8fd9\u9898\uff0c\u6211\u4eec\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5c06\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u6c42\u51fa\u6765\u3002\u4e8e\u662f\u6211\u5c31\u5199\u4e86\u4e00\u4e2a```clac```\u51fd\u6570\u6765\u6c42\uff1a\n\n```cpp\ndouble clac(int xa, int ya, int xb, int yb)\n{\n    double now=sqrt((xa-ya)*(xa-ya) + (xb-yb)*(xb-yb));\n    return now;\n}\n```\n\n\u7136\u540e\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7684 $D$ \u3002\u56e0\u4e3a $D$ \u662f\u5728\u4e00\u4e2a\u56fe\u4e2d\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u7528\u6700\u5c0f\u751f\u6210\u6811\u6765\u6c42\u3002\u540c\u65f6\uff0c\u53c8\u56e0\u4e3a\u6709 $s$ \u4e2a\u70b9\u6709\u536b\u661f\u7535\u8bdd\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u6709 $s-1$ \u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $0$\u3002\n\n\u90a3\u4e48\u5f53\u6211\u4eec\u6c42\u5b8c\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u56fe\u4e2d\u6709 $n-1$ \u6761\u8fb9\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u8d2a\u5fc3\u7684\u601d\u7ef4\uff0c\u5c06\u8fd9 $n-1$ \u6761\u8fb9\u4e2d\u6700\u5927\u7684 $s-1$ \u6761\u8fb9\u5168\u90e8\u90fd\u53d8\u6210 $0$ \u3002\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684 $D$ \u5c31\u662f\u751f\u6210\u6811\u4e2d\u5269\u4e0b\u7684\u8fb9\u4e2d\u6700\u5927\u7684\u90a3\u6761 $QwQ$ \n\n### \u4ee3\u7801\u5c31\u770b\u8fd9\u91cc\u5427\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define Inf 0x3f3f3f3f\n#define int long long\n#define M 1001000\nusing namespace std;\n\nint n, m, s;\nint jx[M], jy[M], fa[M];\nstruct Node{\n    int f, t; double d;\n}a[M];                   //Kruskal \u6700\u5c0f\u751f\u6210\u6811\u5efa\u8fb9\n\ninline int read()\n{\n    int re=0, f=1; char ch=getchar();\n    while(ch<'0' || ch>'9') {if(ch=='-') f=-1; ch=getchar();}\n    while(ch>='0' && ch<='9') {re=re*10+(ch-'0'); ch=getchar();}\n    return re*f; \n}\n\ndouble clac(int xa, int ya, int xb, int yb)\n{\n    double now=sqrt((xa-ya)*(xa-ya) + (xb-yb)*(xb-yb));\n    return now;\n}                        //\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb\n\ndouble cmp(Node x,Node y)\n{\n    return x.d<y.d;\n}\n\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\t\t\t\t\t\t//Kruskal\u9700\u8981\u7684\u51fd\u6570\n\nvoid Kruskal()\n{\n    for(int i=1;i<=n;++i) fa[i]=i;\n    int tot=0;\n    for(int i=1;i<=m;++i)\n    {\n        int fau=find(a[i].f), fav=find(a[i].t);\n        if(fau==fav) continue;\n        fa[fau]=fav;\n        tot++;\n        if(tot==n-s)\n        {\n            printf(\"%.2lf\\n\",a[i].d);\n            return ;\n        }\n        if(tot==n-1) break;\n    }\n    return ;\n}\n\nsigned main()\n{\n    s=read(); n=read();\n    for(int i=1;i<=n;++i) jx[i]=read(), jy[i]=read();\n    m=0;\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=i+1;j<=n;++j)\n        {\n            a[++m].f=i;\n            a[m].t=j;\n            a[m].d=clac(jx[i],jx[j],jy[i],jy[j]);\n        }\n    }\n    sort(a+1,a+m+1,cmp);\n    Kruskal();\n    return 0;\n}\n```\n\n",
        "postTime": 1568539772,
        "uid": 73362,
        "name": "Believe_R_",
        "ccfLevel": 5,
        "title": "P1991 \u65e0\u7ebf\u901a\u8baf\u7f51 \u9898\u89e3"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1ahttps://cn.vjudge.net/problem/17341/origin\n\n## \u3010\u9898\u76ee\u5927\u610f\u3011\n\u7ed9\u4f60\u5f88\u591a\u4e2a\u70b9\uff0c\u8981\u60f3\u5c06\u8fd9\u4e9b\u70b9\u8fde\u8d77\u6765\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u7b2c\u4e00\uff0c\u7ed9\u4f60\u536b\u661f\u7684\u6570\u91cf\uff0c\u4efb\u610f\u8ddd\u79bb\u7684\u4e24\u4e2a\u70b9\u53ef\u4ee5\u7528\u536b\u661f\u8054\u7cfb\u4e14\u4e0d\u7b97\u8ddd\u79bb\uff0c\u7b2c\u4e8c\uff0c\u7ed9\u4f60\u70b9\u7684\u5750\u6807\uff0c\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53ef\u4ee5\u7528\u65e0\u7ebf\u7535\u8054\u7cfb\uff0c\u4f46\u662f\u8981\u6d88\u8017\u8ddd\u79bb\uff0c\u8ba9\u4f60\u627e\u5230\u4e00\u6761\u7ebf\u5c06\u8fd9\u4e9b\u70b9\u8fde\u8d77\u6765\u5e76\u8f93\u51fa\u5176\u4e2d\u9664\u4e86\u7528\u536b\u661f\u8054\u7cfb\u7684\u8fb9\u7684\u6700\u5c0f\u503c\n\n\n## \u3010\u6837\u4f8b\u8f93\u5165\u3011\n1   \n2 4       \n0 100        \n0 300       \n0 600          \n150 750                               \n\n\n## \u3010\u6837\u4f8b\u8f93\u51fa\u3011\n212.13       \n\n\n## \u3010\u89e3\u9898\u7b14\u8bb0\u3011\n\u6700\u5c0f\u751f\u6210\u6811\u88f8\u9898\uff0c\u7528Prim\u7b97\u6cd5\u627e\u5230\u6240\u6709\u6700\u5c0f\u8fb9\u540esort\u4e00\u4e0b\uff0c\u8f93\u51fa\u6700\u5927\u8fb9\u7f16\u53f7\u51cf\u53bb\u536b\u661f\u6570\u76ee\u51cf\u4e00\u7684\u6743\u503c\u3002\n\n\n## \u3010AC\u4ee3\u7801\u3011\n```cpp\n//\u90bb\u63a5\u77e9\u9635  63ms  4108KB  AC;\n#include <cstring>\n#include <cstdio>\n#include <iostream>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nint s, p;\ndouble x[1010], y[1010];  //\u6ce8\u610f\u8ddf\u6570\u636e\u6709\u5173\u7684\u6570\u7ec4\u6700\u597d\u5168\u7528double\u578b\u514d\u5f97WA\uff08\u3002\u3002\u3002\uff09\ndouble G[1010][1010];\ndouble dis[1010];\ndouble temp[1010];\nint vis[1010];\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile (t--)\n\t{\n\t\tscanf(\"%d%d\", &s, &p);\n\t\tfor (int i = 1; i <= p; i++)\n\t\t{\n\t\t\tscanf(\"%lf%lf\", &x[i], &y[i]);\n\t\t}\n\t\tfor (int i = 1; i <= p; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= p; j++)\n\t\t\t{\n\t\t\t\tif (i == j)\n\t\t\t\t\tG[i][j] = 0;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tG[i][j] = G[j][i] = (sqrt((x[i] - x[j]) * (x[i] - x[j]) / 1.00 + (y[i] - y[j]) * (y[i] - y[j]) / 1.00));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= p; i++)\n\t\t{\n\t\t\tdis[i] = G[1][i];\n\t\t\tvis[i] = 0;\n\t\t}\n\t\tint sum = 0, k = 0;\n\t\tint t = 0;\n\t\tvis[1] = 1;\n\t\tfor (int i = 1; i <= p - 1; i++)\n\t\t{\n\t\t\tdouble Min = INF / 1.00;\n\t\t\tfor (int j = 1; j <= p; j++)\n\t\t\t{\n\t\t\t\tif (!vis[j] && dis[j] < Min)\n\t\t\t\t{\n\t\t\t\t\tMin = dis[j];\n\t\t\t\t\tk = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvis[k] = 1;\n\t\t\ttemp[i] = Min;  //temp\u4e34\u65f6\u6570\u7ec4\u5b58\u653e\u6700\u5c0f\u8fb9\n\t\t\tfor (int j = 1; j <= p; j++)\n\t\t\t{\n\t\t\t\tif (!vis[j] && dis[j] > G[k][j])\n\t\t\t\t{\n\t\t\t\t\tdis[j] = G[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsort(temp + 1, temp + p);  //sort\u4e00\u4e0b\n\t\tprintf(\"%.2f\\n\", temp[p - s]);  //\u4e00\u5171\u6709p-1\u6761\u8fb9\u518d\u51cf\u53bbs\u518d\u51cf\u53bb1\u7684\u8fb9\u5c31\u662f\u7b54\u6848\n\t}\n\treturn 0;\n}\n```\n\n## \u3010\u8865\u3011\n\n\u540e\u6765\u6211\u7528Kruscal\u53c8\u5199\u4e86\u4e00\u4e0b\uff0c\u8fd9\u9898\u679c\u7136\u8fd8\u662fPrim\u7b97\u6cd5\u66f4\u4f18\n\n## \u3010AC\u4ee3\u7801\u3011\n```cpp\n//Kruscal \u90bb\u63a5\u8868  719ms 7952KB AC;\n#include <cstring>\n#include <cstdio>\n#include <iostream>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nint s, p;\nint cnt = 0;\ndouble x[1010], y[1010];\ndouble dis[1010];\nint pre[1010];\nstruct node\n{\n\tint from;\n\tint to;\n\tdouble w;\n\tbool operator < (const node& x)const\n\t{\n\t\treturn w < x.w;\n\t}\n}edge[500005];\nvoid insert(int u, int v, double w)\n{\n\tcnt++;\n\tedge[cnt].from = u;\n\tedge[cnt].to = v;\n\tedge[cnt].w = w;\n}\nint find(int r)\n{\n\tif (pre[r] != r)\n\t\treturn pre[r] = find(pre[r]);\n\treturn pre[r];\n}\nvoid join(int a, int b)\n{\n\tint fa = find(a);\n\tint fb = find(b);\n\tif (fa != fb)\n\t{\n\t\tpre[fa] = fb;\n\t}\n}\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile (t--)\n\t{\n\t\tscanf(\"%d%d\", &s, &p);\n\t\tfor (int i = 1; i <= p; i++)\n\t\t{\n\t\t\tscanf(\"%lf%lf\", &x[i], &y[i]);\n\t\t\tpre[i] = i;\n\t\t}\n\t\tcnt = 0;\n\t\tfor (int i = 1; i <= p; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= p; j++)\n\t\t\t{\n\t\t\t\tif (i == j)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdouble d = double(sqrt((x[i] - x[j]) * (x[i] - x[j]) / 1.00 + (y[i] - y[j]) * (y[i] - y[j]) / 1.00));\n\t\t\t\t\tinsert(i, j, d);  //md\u6211\u5fd8\u4e86\u8fd9\u662f\u4e2a\u53cc\u5411\u8fde\u901a\u56fe\uff0c\u5173\u952e\u662f\u4ed6\u7adf\u7136\u63d0\u793a\u6211RE\u4e86\uff0c\u6211\u68c0\u67e5\u534a\u5929\u53cd\u5411\u8fb9\u8fde\u4e0a\u5c31A\u4e86\uff0c\u6211\u60ca\u4e86\n\t\t\t\t\tinsert(j, i, d);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsort(edge + 1, edge + cnt + 1);\n\t\tint k = 0;\n\t\tfor (int i = 1; i <= cnt; i++)\n\t\t{\n\t\t\tif (k == p - 1)\n\t\t\t\tbreak;\n\t\t\tif (find(edge[i].from) != find(edge[i].to))\n\t\t\t{\n\t\t\t\tjoin(edge[i].from, edge[i].to);\n\t\t\t\tdis[++k] = edge[i].w;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%.2f\\n\", dis[p - s]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566310599,
        "uid": 226316,
        "name": "YZL11111",
        "ccfLevel": 0,
        "title": "POJ 2349 Arctic Network\u89e3\u9898\u62a5\u544a\uff08Prim\u7b97\u6cd5\uff09"
    },
    {
        "content": "### \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8003\u5bdf\u751f\u6210\u6811\u7684\u7406\u89e3\u5427\n\n**\u6b63\u6587\uff1a**\n\n\u89e3\u9898\u601d\u8def:\n\n1. \u9898\u76ee\uff1a  \n   \u536b\u661f\u7535\u8bdd\uff08\u9690\u542b\u610f\u601d\uff09\uff1a\u53ef\u4ee5**\u4f7f\u67d0\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53d8\u4e3a0**,  \n   \u6700\u5c0f\u901a\u8bdd\u8ddd\u79bb D\uff1a\u6240\u6784\u6210\u7684min\u4ee3\u4ef7\u8054\u901a\u8def\u4e2d\uff0c\u6c42\u8fb9\u6743\u7684max\n\n2. \u8fdb\u4e00\u6b65\u5206\u6790\uff1a  \n   \u6bcf\u4e2a\u70b9\uff0c\u76f4\u63a5\u6216\u95f4\u63a5\u8054\u901a\uff1f  \n   \u90a3\u4e48\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u8fb9\u6743\u8d8a\u5c0f\uff0c\u6700\u597d**\u8fd1\u70b9\u76f8\u8fde**\u3002  \n   \u5373\uff1a\u653e\u5f03\u6389**\u8de8\u8d8a\u4e2d\u95f4\u70b9\u7684\u8fde\u63a5\u65b9\u5f0f**\u3002\n\n3. \u7b97\u6cd5\uff1a  \n   \u8fde\u901a\u6027\uff1a\u53ea\u9700n-1\u5373\u53ef\u6240\u6709\u70b9\uff08\u95f4\u63a5\uff09\u76f8\u8fde-->\u6811\u5f62  \n   -->\u6700\u5c0f\u751f\u6210\u6811\uff1aKruskal\u3001Prim  \n   ```cpp\n   \u53ef\u884c\u6027\uff1a\u5728\u627e\u5bfb\u6700\u5c0f\u751f\u6210\u6811\u65f6\uff0c\u5373\u53ef\u8bbf\u95ee\u5230\u8fb9\u6743\u7684max\uff0c\u6b32\u4f7f\u5176\n   \t\u6240\u6784\u6210\u7684min\u4ee3\u4ef7\uff0c\u90a3\u5c31\u53ef\u4ee5\u628a\u8fb9\u6743\u7684max\u6539\u4e3a0\u5566\uff01\uff01\uff01\n   ```\n   **\u6838\u5fc3\uff1a\u4e8e\u662f\u6b64\u95ee\u9898\u8f6c\u4e3a\uff1a\u6c42\u8fb9\u53ea\u6709p-s\u4e2a\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u6700\u5927\u8fb9\u6743**\n   \n4. \u5173\u4e8e\u672c\u9898\uff1a\u4e24\u79cd\u65b9\u5f0f(Krus,Prim)\u7686\u53ef\u3002  \n   \u53ea\u662f\uff1aKruskal\u5904\u7406\u66f4\u65b9\u4fbf\uff0c\u4e14\u5728\u70b9\u5c11\u7684\u56fe\uff08\u7a00\u758f\u56fe\uff09\u66f4\u5feb\uff0c\u6240\u4ee5\u7528\u7684\u662f\u5b83\u3002\uff08~~\u624d\u4e0d\u662f\u56e0\u4e3aPrim\u6a21\u677f\u4e0d\u591f\u719f\uff0c\u624d\u6ca1\u6253\u7684\uff0c\u54fc\u256d(\u256f^\u2570)\u256e\uff01~~\uff09\n\n**Code:**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define db double\nconst int maxn=125005;//\u4e00\u5b9a\u5f97\u5f00\u5927\uff0c\u4e0b\u65b9\u9884\u5904\u7406\u4e86\u6bcf\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\nint s,n,f[maxn],cnt,tot;\ndb ans;\nstruct node{\n\tint x,y;\n\tdb dis;\n\tfriend bool operator <(node a,node b){\n\t\treturn a.dis<b.dis;\n\t}\n}num[maxn],e[maxn];//\u8fd9\u91cc\u5077\u4e86\u4e2a\u61d2\uff0c\u5177\u4f53\u770b\u4e0b\u65b9\u8d4b\u503c\n\ninline db count(int a,int b){\n\treturn sqrt( (db)(num[a].x-num[b].x)*(db)(num[a].x-num[b].x) + (db)(num[a].y-num[b].y)*(db)(num[a].y-num[b].y) );\n}\n\nint find(int x){//\u5e76\u67e5\u96c6\n\treturn x==f[x] ? x : f[x]=find(f[x]);\n}\n\nvoid Kruskal(){\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\tfor(int i=1;i<=tot;++i){\n\t\tint x=find(e[i].x),y=find(e[i].y);\n\t\tif(x==y) continue;\n\t\tans=max(ans,e[i].dis);//\u6bd4\u8f83\u8fb9\u6743\n\t\tf[x]=y;\n\t\tif(++cnt==n-s) return;//\u4e0a\u65b9\u63a8\u5bfc\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6ee1\u8db3\u6761\u4ef6\u7684\u524dn-s\uff08\u5373:n-1-\uff08s-1\uff09\uff09\u6761\u8fb9\uff0c\u5269\u4e0bs-1\u89c6\u4e3a0\u4e86\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&s,&n);\n\tfor(int i=1;i<=n;++i)\n\tscanf(\"%d%d\",&num[i].x,&num[i].y);//\u5750\u6807\n\tfor(int i=1;i<=n;++i)\n\tfor(int j=i+1;j<=n;++j){//\u4ecej=i+1\u7684\u8bdd\uff0c\u9632\u6b62\u91cd\u590d\u8ba1\u7b97\uff0c\u6bcf\u4e24\u4e2a\u70b9\u53ea\u9700\u8981\u8ba1\u7b97\u4e00\u6b21\n\t\te[++tot].x=i;e[tot].y=j;//\u5077\u61d2\uff0c\u5c06\u5c31\u4e00\u4e0b\u5427\n\t\te[tot].dis=count(i,j);//\u8ddd\u79bb\n\t}\n\tsort(e+1,e+1+tot);//\u9009\u5c0f\u7684\n\tKruskal();\n\tprintf(\"%.2lf\",ans);\n\treturn 0;\n}\n```\nrp++",
        "postTime": 1565786542,
        "uid": 109381,
        "name": "Mosher",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": ">\u76f4\u5230\u6572\u5b8c\u8fd9\u4e2a\u9898\uff0c\u6211\u624d\u53d1\u73b0\u539f\u6765prim\u5982\u679c\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\u5373\u4f7f\u52a0\u4e0a\u5806\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662fO(n2)qwq\u2026\u2026\n\n\u9996\u5148\uff0c\u7531\u4e8e\u4e24\u4e2a\u70b9\u53ea\u9700\u8981\u95f4\u63a5\u8054\u901a\u5c31\u53ef\u4ee5\u4e92\u76f8\u901a\u8baf\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6700\u5c0f\u751f\u6210\u6811\u53bb\u505a\u3002\u8fd9\u4e00\u6b65\u6bd4\u8f83\u597d\u5b8c\u6210\u3002  \n### \u95ee\u9898\u5728\u4e8e\u600e\u4e48\u53bb\u52a0\u536b\u661f\u7535\u8bdd\u3002  \n\u7531\u4e8e\u4e24\u4e2a\u70b9\u53ea\u8981\u95f4\u63a5\u8054\u901a\u5c31\u53ef\u4ee5\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u7528\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u8fde\u6210\u7684\u5b50\u56fe\u53ea\u9700\u8981\u6709\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\u5373\u53ef\u4e0e\u5176\u5b83\u7684\u70b9\u8054\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5220\u8fb9\u7684\u65f6\u5019\u9700\u8981\u5148\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u70b9\u5220\u5b8c\u8fb9\u4ee5\u540e\u662f\u4e0d\u662f\u4ecd\u7136\u8054\u901a\u800c\u4e0d\u662f\u50bb\u50bb\u5730\u7ed9\u8fd9\u4e24\u4e2a\u70b9\u90fd\u5b89\u88c5\u4e0a\u536b\u661f\u7535\u8bdd\uff08\u88ab\u8fd9\u4e2a\u5361\u4e86\u597d\u4e45qwq\uff09\n\n ![](http://47.92.113.238/qxiangya/wp-content/uploads/2019/06/QQ\u622a\u56fe20190619092553.png)    \n\u5982\u56fe\u6240\u793a\uff0c\u7531\u4e8e2\u30014\u53f7\u70b9\u90fd\u5b89\u88c5\u4e86\u7535\u8bdd\uff0c\u6240\u4ee5\u5220\u6389\u8fb91-3\u540e\uff0c1\u30013\u53f7\u70b9\u4e4b\u95f4\u5c31\u4e0d\u9700\u8981\u5b89\u88c5\u7535\u8bdd\u7684\u3002    \n\n\u518d\u6765\u770b\u5982\u4f55\u5b89\u88c5\u7535\u8bdd\u3002  \n![](http://47.92.113.238/qxiangya/wp-content/uploads/2019/06/QQ\u622a\u56fe20190619093110.png)  \n\u5982\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u524d\u4e24\u4e2a\u70b9\u5b89\u88c5\u5b8c\u536b\u661f\u7535\u8bdd\u4ee5\u540e\uff0c\u6bcf\u4e00\u4e2a\u5b50\u56fe\u90fd\u4f1a\u62e5\u6709\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\u3002\u5f53\u6211\u4eec\u7ee7\u7eed\u5220\u8fb9\u65f6\uff0c\u5206\u6210\u7684\u4e24\u4e2a\u65b0\u7684\u5b50\u56fe\u90fd\u662f\u4e00\u4e2a\u6709\u536b\u661f\u7535\u8bdd\uff0c\u4e00\u4e2a\u6ca1\u6709\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u7b2c\u4e8c\u6b21\u5f00\u59cb\u6bcf\u6b21\u5220\u8fb9\u53ea\u9700\u8981\u589e\u52a0\u4e00\u90e8\u536b\u661f\u7535\u8bdd\u5373\u53ef\u3002\u6240\u4ee5\u6700\u7ec8\u7559\u4e0b\u7684\u6700\u5927\u7684\u8fb9\u662f\u7b2c`s`\u5927\u7684\u8fb9\uff08\u7531\u4e8e\u7b2c\u4e00\u6b21\u5220\u8fb9\u4f60\u9700\u8981\u5b89\u88c5\u4e24\u53f0\u536b\u661f\u7535\u8bdd\uff0c\u6240\u4ee5\u4f60\u6700\u591a\u53ea\u80fd\u5220`s - 1`\u6761\u8fb9\uff09  \n\u9644\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define INF 0x7fffffff\n#define re register\n\nusing namespace std;\n\nint read()\n{\n    register int x = 0,f = 1;register char ch;\n    ch = getchar();\n    while(ch > '9' || ch < '0'){if(ch == '-') f = -f;ch = getchar();}\n    while(ch <= '9' && ch >= '0'){x = x * 10 + ch - 48;ch = getchar();}\n    return x * f;\n}\n\nstruct NODE{\n\tint x, y, num;\n\tdouble minn;\n}a[1000];\n\nint s,p,vis[1000],del[1000],fa[1000],f[1000];\n\nstruct node{\n\tint k;\n\tdouble dis;\n\tbool operator < ( const node &x )const{return x.dis < dis;}\n};\n\npriority_queue <node> que;\n\nint mysort(NODE a, NODE b){return a.minn > b.minn;}\n\nint main()\n{\n\ts = read(); p = read();\n\tfor(re int i = 1; i <= p; i++)\n\t{\n\t\ta[i].x = read();\n\t\ta[i].y = read();\n\t\ta[i].num = i;\n\t}\n\tfor(re int i = 1; i <= p; i++) a[i].minn = INF;\n\tque.push((node){1,0});\n\tvis[1] = 1;a[1].minn = 0;\n\twhile(!que.empty())\n\t{\n\t\tnode now = que.top();\n\t\tque.pop();\n\t\tvis[now.k] = 1;\n\t\tfor(re int i = 1; i <= p; i++)\n\t\t{\n\t\t\tif(!vis[i] && sqrt((a[now.k].x - a[i].x) * (a[now.k].x - a[i].x) + ((a[now.k].y - a[i].y) * (a[now.k].y - a[i].y))) < a[i].minn)\n\t\t\t{\n\t\t\t\ta[i].minn = sqrt((a[now.k].x - a[i].x) * (a[now.k].x - a[i].x) + ((a[now.k].y - a[i].y) * (a[now.k].y - a[i].y)));\n\t\t\t\tque.push((node){i,a[i].minn});\n\t\t\t\tfa[i] = now.k;\n\t\t\t}\n\t\t}\n\t}\n\tsort(a + 1, a + p + 1, mysort);\n\tint j = 1;\n\tdouble Min = a[j].minn;\n\tMin = a[s].minn;\n\tprintf(\"%.2lf\\n\",Min);\n    return 0;\n}\n```",
        "postTime": 1560909408,
        "uid": 150821,
        "name": "Azuree",
        "ccfLevel": 6,
        "title": "\u65e0\u7ebf\u901a\u8baf\u7f51-\u9898\u89e3"
    },
    {
        "content": "### Note\n1. \u672c\u9898\u89e3\u91cd\u70b9\uff1a\n- \u6cd5\u4e00\uff08\u4e8c\u5206\u7b54\u6848\uff09\n- \u5806\u4f18\u5316prim\uff08\u9898\u89e3\u4e2d\u5927\u591aKruskal\uff0c\u5c11\u6570\u666e\u901aprim\uff09\n- \u201c\u4f18\u5316\u201d\u90e8\u5206\n2. \u975e\u91cd\u70b9\u90e8\u5206\u4e0d\u4f1a\u8d58\u8ff0\uff0c\u8be6\u89c1\u5df2\u6709\u9898\u89e3\n### \u89e3\u6cd5\u5206\u6790\n\u6700\u5c0f\u751f\u6210\u6811\u6ee1\u8db3\u6700\u5927\u8fb9\u6700\u5c0f\uff0c\u6240\u4ee5\u6709\u5982\u4e0b\u65b9\u6cd5\uff1a\n#### \u6cd51\n\u7531\u9898\u610f\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c$d$\u6ee1\u8db3\u9898\u610f\u4f46\u4e0d\u662f\u6700\u5c0f\uff0c\u5219\u4e00\u5b9a\u6709$ans<d$\uff1b\u5982\u679c$d$\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u4e00\u5b9a\u6709$ans>d$\u3002\n\n\u7531\u6b64\u53ef\u89c1\uff0c\u53ef\u4ee5\u4f7f\u7528**\u4e8c\u5206\u7b97\u6cd5**\u3002\n\n\u81f3\u4e8e\u68c0\u67e5\u51fd\u6570check\u5982\u4f55\u5199\uff1f\u5927\u5bb6\u80fd\u60f3\u8d77prim\u6a21\u677f\u662f\u8fd9\u6837\u5199\u7684\uff1a\n```cpp\ninline int prim(){\n\tint ans=0;\n\tmemset(flag,1,sizeof flag);\n\tmemset(dst,0x3f,sizeof dst),dst[1]=0;\n\tQ.push(Node{1,0});\n\twhile(!Q.empty()){\n\t\tNode now=Q.top();Q.pop();\n\t\tint k=now.v;\n\t\tif(!flag[k])continue;\n\t\tflag[k]=0;\n\t\tans+=dst[k];\n\t\tfor(reg int i=head[k];i;i=eg[i].nxt){\n\t\t\tint v=eg[i].v,w=eg[i].w;\n\t\t\tif(flag[v]&&w<dst[v])dst[v]=w,Q.push(Node{v,w});\n\t\t}\n\t}return ans;\n}\n```\n\u9898\u610f\u9650\u5236\u53ea\u80fd\u6709s\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u56e0\u6b64\u5728\u4e8c\u5206\u65f6\uff0c\u5982\u679c\u5f53\u524d\u7684\u7b54\u6848\u662fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u6700\u5c0f\u751f\u6210\u6811\u5927\u4e8ed\u7684\u8fb9\u6570\uff0c\u5982\u679c\u5c0f\u4e8e\u7b49\u4e8es\uff0c\u5219\u536b\u661f\u7535\u8bdd\u662f\u591f\u7528\u7684\u3002\u5426\u5219\u4e0d\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a```ans+=dst[k];```\u4e00\u53e5\u6539\u4e3a```ans+=dst[k]>d;```\u540c\u65f6\u8981\u7ed9prim\u51fd\u6570\u4f20\u5165\u4e00\u4e2a\u53c2\u6570d\u3002\n\n\u7136\u540echeck\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\u4e86\uff1a```return prim(d)<=s;```\n#### \u6cd52\n\u6cd51\u7684\u6548\u7387\u8f83\u4f4e\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e00\u6b21prim\u662f\u5426\u80fd\u51fa\u7b54\u6848\u3002\n\n\u4e8c\u5206\u662f\u4ece\u5df2\u77e5d\u7684\u89d2\u5ea6\u8003\u8651\u5224\u65ad\uff0c\u6211\u4eec\u6362\u4e00\u79cd\u601d\u8def\uff0c\u5df2\u77e5s\uff0c\u6c42\u662f\u5426\u80fd\u628a\u56fe\u5206\u4e3as\u4e2a\u8054\u901a\u5206\u91cf\u3002\u4e8b\u5b9e\u4e0a\u5220\u6389\u6700\u5927\u7684s-1\u6761\u8fb9\u53ef\u4ee5\u5b8c\u7f8e\u6ee1\u8db3\u9898\u610f\uff0c\u7b54\u6848\u5373\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7b2cs\u5927\u8fb9\u3002\u8fd9\u5728\u5176\u4ed6\u9898\u89e3\u4e2d\u6709\u4e25\u683c\u8bc1\u660e\u3002\n### \u4f18\u5316\n\u672c\u9898\u5927\u91cfdouble\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fb9\u6743\u6269\u592710000\u500d\uff0c\u5728\u4fdd\u6301\u7cbe\u5ea6\u7684\u60c5\u51b5\u4e0b\u8f6c\u5c0f\u6570\u4e3a\u6574\u6570\uff0c\u8f93\u51fa\u65f6\u4e58\u4ee50.0001\u5373\u53ef\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5bf9\u63d0\u901f\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002\n\n\u53e6\u5916\u672c\u9898\u4e3a\u5b8c\u5168\u56fe\uff0c\u662f\u4e00\u4e2a\u5178\u578b\u7a20\u5bc6\u56fe\uff0c\u6545\u5806\u4f18\u5316Prim\u6548\u7387\u9ad8\u4e8eKruskal\u3002\n### \u4ee3\u7801\uff08\u6cd52\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define IOSIZE 10000000\n#define ll long long\nstatic char in[IOSIZE],*p=in;\ninline int read(){\n\treg int x=0;\n\twhile(*p<48)++p;\n\twhile(*p>47)x=(x<<1)+(x<<3)+(*p++^48);\n\treturn x;\n}\nstatic char flag[501];\nstatic int n,s,tot,head[501];\nstatic ll dst[501];\nstruct Edge{\n\tint v,w,nxt;\n}eg[250001];\ninline void addedge(int u,int v,int w){\n\teg[++tot]=Edge{v,w,head[u]},head[u]=tot;\n}\nstruct pnt{\n\tint x,y;\n}pts[501];\nstatic ll dis(int i,int j){\n\tpnt a=pts[i],b=pts[j];\n\treturn sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y))*10000;\n}\nstruct Node{\n\tll v,dst;\n\tfriend inline bool operator<(Node a,Node b){return a.dst>b.dst;}\n};\npriority_queue<Node>Q;\ninline void prim(){\n\tll ans=0;\n\tmemset(flag,1,sizeof flag);\n\tmemset(dst,0x3f,sizeof dst),dst[1]=0;\n\tQ.push(Node{1,0});\n\twhile(!Q.empty()){\n\t\tNode now=Q.top();Q.pop();\n\t\tint k=now.v;\n\t\tif(!flag[k])continue;\n\t\tflag[k]=0;\n\t\tfor(reg int i=head[k];i;i=eg[i].nxt){\n\t\t\tint v=eg[i].v,w=eg[i].w;\n\t\t\tif(flag[v]&&w<dst[v])dst[v]=w,Q.push(Node{v,w});\n\t\t}\n\t}\n}\ninline bool cmp(ll a,ll b){return a>b;}\nint main(){\n\tfread(in,1,IOSIZE,stdin);\n\ts=read(),n=read();\n\tfor(reg int i=1;i<=n;++i)pts[i]=pnt{read(),read()};\n\tfor(reg int i=2;i<=n;++i)\n\t\tfor(reg int j=1,ds;j<i;++j)\n\t\t\tds=dis(i,j),addedge(i,j,ds),addedge(j,i,ds);\n\tprim();\n\tsort(dst+1,dst+n+1,cmp);\n\tprintf(\"%.2lf\",dst[s]*0.0001);\n\treturn 0;\n}\n```\n## \u70b9\u8d5e\u662f\u4e00\u79cd\u7f8e\u5fb7",
        "postTime": 1559823336,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "# \u53ef\u4ee5\u7528\u4e8c\u5206\n\n\n------------\n\n~~\u4f46\u662f\u8981\u6c42\u5bf9\u4e8c\u5206\u5f88\u4e0d\u53cb\u597d\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8f93\u51fa\u5e94\u8be5\u4fdd\u8bc1\u53ef\u884c~~\n```c\nstruct type\n{\n\tint x;int y;\n}\uff1b\ntype s[MAXN];//\u7ed3\u6784\u4f53\u5b58\u4f4d\u7f6e\n```\n\u56e0\u4e3a\u8981\u7cbe\u786e\u52302\u4f4d\uff0c\u6240\u4ee5\u5728\u8f93\u5165\u65f6\u6269\u5927 1000 \u500d\uff0c\u6ce8\u610f\u7528long long\u505a\uff0c\u4e0d\u7136\u540e\u671f\u7684\u6c42\u8ddd\u79bb\u4f1a\u7206int\n\n- ### \u5224\u65ad\u94fe\u63a5\u6761\u4ef6 \u6ce8\u610flong long\n```c\ninline int Correct(type a,type b,int D)\n{\n\tlong long ax=a.x,bx=b.x,ay=a.y,by=b.y,DD=D;\n\tif((DD*DD)>=((ax-bx)*(ax-bx))+((by-ay)*(by-ay)))\n    return 1;//\u8ddd\u79bb\u516c\u5f0f\n\telse return 0;\n}\n```\n- ### \u7528BFS\u6c42\u51fa\u67d0\u4e00D\u4ea7\u751f\u7684\u8fde\u901a\u5757\n```\nint ASC(int D)\n{\n\tmemset(v,0,sizeof(v));//\u521d\u59cb\u5316\u8bbf\u95ee\u6570\u7ec4\n\tint blocks=0;queue<int>q;\n\tfor(int con=1;con<=N;con++)\n\t{\n\t\tif(v[con]==0)\n\t\t{\n\t\t\tblocks++;//\u8fde\u901a\u5757\u8ba1\u6570\u5668\n\t\t\tv[con]=1;q.push(con);\n\t\t\twhile(q.size()>0)//\u5feb\u4e50BFS\n\t\t\t{\n\t\t\t\tint now=q.front();q.pop();\n\t\t\t\tfor(int i=1;i<=N;i++)\n\t\t\t\t{\n\t\t\t\t\tif(Correct(s[now],s[i],D)==1&&v[i]==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tq.push(i);v[i]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn blocks;//\u8fd4\u56de\u8fde\u901a\u5757\u6570\u91cf\n}\n```\n## \u536b\u661f\u7535\u8bdd\u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e\u8fde\u901a\u5757\u6570\u91cf\u624d\u53ef\u4fdd\u8bc1\u8054\u901a\u6210\u7acb\n### ~~\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86~~\n\n- ### \u63a5\u4e0b\u6765\u5c31\u662f\u6109\u5feb\u7684\u4e8c\u5206+\u7ed3\u679c\u5904\u7406\u4e86\n```\n\tint l=1,r=MAXD,mid;\n\twhile(r>l+1)\n\t{\n\t\tint mid=(r+l)/2;\n\t\tif(ASC(mid)<=SP)r=mid;\n        //\u5224\u65ad\u6761\u4ef6\uff0cSP\u4e3a\u536b\u661f\u6570\u91cf\n\t\telse l=mid;\n\t}//\u4e8c\u5206\u5f97\u5230\u5927\u6574\u6570\n\t\n    int mod=l,remain=l,t=0;//\u5927\u6574\u6570\u8f6c\u5206\u6570\u8f93\u51fa\n\tmod=mod%1000;\n\tint mod_r=mod%10;mod=mod/10;\n\tif(mod_r>=5)mod++;//\u8bb0\u5f97\u56db\u820d\u4e94\u5165\n\tremain=remain/1000;\n\tcout<<remain<<\".\"<<mod<<\" \";\n```\n- ### \u9644\u4e0aMAXD\uff1a \n```\n#define MAXD 10010000\n```",
        "postTime": 1550198226,
        "uid": 133794,
        "name": "LEGION",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u90fd\u7528Kruskal\uff0c\u672c\u849f\u84bb\u745f\u745f\u53d1\u6296\u2026\u2026\n\n# Prim\u7b97\u6cd5\n\nPrim\u7b97\u6cd5\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u96c6$V$\uff0c\u6bcf\u6b21\u627e\u52a0\u5165\u4ee3\u4ef7\u6700\u5c0f\u7684\u70b9\uff0c\u628a\u5b83\u52a0\u5230\u8fd9\u4e2a\u70b9\u96c6\u91cc\u9762\u3002\u76f4\u89c2\u5730\u60f3\u8c61\u5c31\u662f\u8054\u901a\u5757\u7684\u6269\u5c55\u8fc7\u7a0b\u3002\n\n\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0cPrim\u7b97\u6cd5\u548cDijkstra\u7b97\u6cd5\u60ca\u4eba\u5730\u76f8\u4f3c\uff0c\u53ea\u6709\u677e\u5f1b\u64cd\u4f5c\u4e0d\u4e00\u6837\u3002Prim\u7684\u677e\u5f1b\u64cd\u4f5c\u662f`dist[ed[p]] = min(dist[ed[p]],len[p]);`\uff0c\u5176\u4e2d`p`\u8868\u793a\u6b63\u5728\u679a\u4e3e\u7684\u8fb9\uff0c`dist[i]`\u8868\u793a\u70b9i\u7684\u4ee3\u4ef7\u3002\n\n# \u672c\u9898\u89e3\u6cd5\n\n\u6211\u9996\u5148\u662f\u628a\u536b\u661f\u7535\u8bdd\u60f3\u8c61\u6210\u4e00\u4e2a\u865a\u70b9\uff0c\u5ea6\u4e3aS\uff0c\u8fde\u7740\u5b83\u7684\u8fb9\u6743\u4e3a0\u3002\u8fd9\u6837\u5904\u7406\u4e4b\u540e\uff0c\u865a\u70b9\u672c\u8eab\u8fde\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u4ee3\u4ef7\u5c31\u662f0\uff0c\u5e76\u4e14\u8fd8\u4f59$S-1$\u6761\u8fb9\u3002\u800c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9i\uff0c\u5f53\u865a\u70b9\u4e0e\u4ed6\u6709\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u4ed6\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u4ee3\u4ef7\u5373\u4e3a0\u3002\n\n\u7531\u4e8e\u8fd9\u91cc\u6240\u6c42\u7684D\u5373\u4e3a\u6700\u5927\u7684\u4ee3\u4ef7\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u53bb\u6389\u6700\u5927$S-1$\u4e2a\u4ee3\u4ef7\uff0c\u7136\u540e\u53d6\u5269\u4e0b\u7684\u6700\u5927\u503c\u5c31\u597d\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(n^2logn+nlogn) = \\Theta(n^2logn)$\n\n```cpp\n#include <queue>\n#include <cmath>\n#include <cstdio>\nusing namespace std;\n\nint n;\nint xi[505];\nint yi[505];\n\nint sqr(int x)\n{\n\treturn x*x;\n}\n\ndouble dis(int a,int b)\n{\n\treturn sqrt(sqr(xi[a]-xi[b])+sqr(yi[a]-yi[b]));\n}\n\ndouble dist[505];\nint visited[505];\n\nvoid prim()\n{\n\tfor(int i=2; i<=n; ++i)\n\t{\n\t\tdist[i] = 2139062143;\n\t}\n\n\tpriority_queue<pair<double,int> > pq;\n\tpq.push(make_pair(-dist[1],1));\n\n\twhile(!pq.empty())\n\t{\n\t\tint th = pq.top().second;\n\t\tpq.pop();\n\t\twhile(visited[th])\n\t\t{\n\t\t\tif(pq.empty()) break;\n\t\t\tth = pq.top().second;\n\t\t\tpq.pop();\n\t\t}\n\n\t\tvisited[th] = 1;\n\n\t\tfor(int i=1; i<=n; ++i)\n\t\t{\n\t\t\tif(!visited[i])\n\t\t\t{\n\t\t\t\tif(dis(th,i) < dist[i])\n\t\t\t\t{\n\t\t\t\t\tdist[i] = dis(th,i);\n\t\t\t\t\tpq.push(make_pair(-dist[i],i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint s;\n\tscanf(\"%d%d\",&s,&n);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tscanf(\"%d%d\",xi+i,yi+i);\n\t}\n\n\tprim();\n\n\tpriority_queue<pair<double,int> > pq;\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tpq.push(make_pair(dist[i],i));\n\t}\n\tfor(int i=1; i<s; ++i)\n\t{\n\t\tpq.pop();\n\t}\n\n\tprintf(\"%.2lf\\n\",pq.top().first);\n\n\treturn 0;\n}\n```",
        "postTime": 1549166209,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u51e0\u9875\u4e5f\u6ca1\u6709\u7528\u6307\u9488\u7684~~\uff08\u4e5f\u53ef\u80fd\u662f\u6211\u778e\uff09~~\uff0c\u6765\u4e00\u6ce2\u6307\u9488\u5e76\u67e5\u96c6\u7684kruskal\n```cpp\n#include <cstdio> \n#include <cstring>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nconst int nc=500;\n\nstruct crime\n{\n    int x,y,n;\n};\nstruct unionfind\n{\n    int x;\n    unionfind* f;\n    void init(const int &a)\n    {\n        x=a;\tf=this;\n    }\n    unionfind* find()\n    {\n        return x==f->x ? this : f=f->find();\n    }\n    void join(unionfind &a)\n    {\n        a.find();\tfind();\n        a.f->f=f;\n    }\n};\nstruct edge\n{\n    int s,e;\n    double v;\n    bool operator < (const edge &a) const\n    {\n        return v < a.v;\n    }\n    bool operator > (const edge &a) const\n    {\n        return v > a.v;\n    }\n};\n\nint s,p;\n\ncrime c[nc+2];\n\nvoid frint(int &);\nvoid frcrime(crime &);\n\nint k;\nedge e[(nc*nc-nc)/2+2];\nvoid add(const crime &,const crime &);\n\nunionfind u[nc+2];\ndouble kruskal();\n\nint main()\n{\n    frint(s);\tfrint(p);\n    for(int i=1;i<=p;i++)//\u521d\u59cb\u5316\u57ce\u5e02\u6570\u636e \n    {\n        frcrime(c[i]);\n        c[i].n=i;\n    }\n    for(int i=1;i<p;i++)//\u521d\u59cb\u5316\u8fb9\u5173\u7cfb \n        for(int j=i+1;j<=p;j++)\n            add(c[i],c[j]);\n    sort(e+1,e+k+1);//\u5bf9\u8fb9\u6392\u5e8f\u4ee5\u4fbf\u8fdb\u884ckruskal \n    for(int i=1;i<=p;i++)//\u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n        u[i].init(i);\n    printf(\"%.2lf\",kruskal());\n    return 0;\n}\n\nvoid frint(int &a)\n{\n    int v=0,f=1;\tchar c=getchar();\n    while(c<'0'||c>'9')c=='-'?f=-1,c=getchar():c=getchar();\n    while(c>='0'&&c<='9')v=(v<<3)+(v<<1)+c-'0',c=getchar();\n    a=v*f;\n}\n\nvoid frcrime(crime &a)\n{\n    int v=0,f=1;\tchar c=getchar();\n    while(c<'0'||c>'9')c=='-'?f=-1,c=getchar():c=getchar();\n    while(c>='0'&&c<='9')v=(v<<3)+(v<<1)+c-'0',c=getchar();\n    a.x=v*f;\tv=0,f=1;\tc=getchar();\n    while(c<'0'||c>'9')c=='-'?f=-1,c=getchar():c=getchar();\n    while(c>='0'&&c<='9')v=(v<<3)+(v<<1)+c-'0',c=getchar();\n    a.y=v*f;\n}\n\nvoid add(const crime &a,const crime &b)\n{\n    k++;\n    e[k].s=a.n;\n    e[k].e=b.n;\n    double tx=a.x>b.x ? a.x-b.x : b.x-a.x;\n    double ty=a.y>b.y ? a.y-b.y : b.y-a.y;\n    e[k].v=sqrt(tx*tx+ty*ty);\n}\n\ndouble kruskal()\n{\n    int j=0;\tdouble r=0;\n    for(int i=1;i<=k;i++)\n    {\n        if(u[e[i].s].find()!=u[e[i].e].find())\n        {\n            j++;\n            r=max(e[i].v,r);\n            u[e[i].s].join(u[e[i].e]);\n            if(j==p-s)\n                return r;\n        }\n    }\n    return -1;\n}\n```",
        "postTime": 1541122356,
        "uid": 41551,
        "name": "WalkingSeason",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "**\u89e3\u6cd5\uff1a**\n\n**\u627e\u8fd9\u5f20P\u4e2a\u70b9\u7684\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c**\n\n**\u7136\u540e\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7b2cs\u5927\u7684\u8fb9\u7684\u8fb9\u6743\uff1b****\n\n**\u7ec6\u8282\uff1a**\n\n**1.\u4e24\u70b9\u95f4\u7684\u8fb9\u6743\u53ef\u4ee5\u5148\u4ee5\u5e73\u65b9\u7684\u5f62\u5f0f\u5b58\u4e0b\u6765\uff0c\u5230\u6700\u540e\u518d\u5f00\u65b9**\n\n**2.\u53ef\u4ee5\u4f7f\u7528priority_queue\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u65b9\u4fbf\u6bd4\u8f83**\n\n~~**\u65f6\u95f4\u7684\u8bdd\uff0c\u6700\u6162\u7684\u572880ms**~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\ndouble ans;\nint s,p,cc=1,cnt=1,x[100001],y[100001],fa[100001];\npriority_queue<int >q;\nstruct lxx\n{\n\tint a,b,v;\n}e[252525];\nbool cmp(lxx a,lxx b)\n{\n\treturn a.v<b.v;\n}\nint find(int k)\n{\n\tif(fa[k]==k)return k;\n\treturn fa[k]=find(fa[k]);\n}\nvoid kruskal()\n{\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tint x=find(e[i].a),y=find(e[i].b);\n\t\tif(x!=y)\n\t\t{\n\t\t\tfa[x]=y;\n\t\t\tq.push(e[i].v);\n\t\t\tcc++;\n\t\t\tif(cc==p)return ;\n\t\t}\n\t}\n}\nint main()\n{\n\ts=read(),p=read();\n\tfor(int i=1;i<=p;i++)fa[i]=i;\n\tfor(int i=1;i<=p;i++)x[i]=read(),y[i]=read();\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tfor(int j=1;j<=p;j++)\n\t\t{\n\t\t\te[cnt].a=i;\n\t\t\te[cnt].b=j;\n\t\t\te[cnt].v=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);\n\t\t\tcnt++;\n\t\t}\n\t}\n\tsort(e+1,e+1+cnt,cmp);\n\tkruskal();\n\tfor(int i=1;i<s;i++)q.pop();\n\tans=q.top();\n\tans=sqrt(ans);\n\tprintf(\"%.2lf\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1541027565,
        "uid": 36260,
        "name": "KDL_\u6a59\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\n\u9996\u5148\u5bf9\u9898\u76ee\u7684\u610f\u601d\u8fdb\u884c\u7406\u89e3\u4e00\u4e0b\uff0c\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a\n\n \n\n    \u7ed9\u51fa\u4e00\u4e2a\u6709p\u4e2a\u70b9\u7684\u56fe\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u4f60\u53ef\u4ee5\u5bf9s\u4e2a\u70b9\u8fdb\u884c\u6807\u8bb0\uff0c \u4e24\u7aef\u70b9\u90fd\u88ab\u6807\u8bb0\u7684\u8fb9\u8fb9\u6743\u4e3a0\uff0c \u6700\u540e\u6c42\u51fa\u5728\u8be5\u56fe\u8054\u901a\u65f6\u6700\u957f\u8fb9\u7684\u6700\u5c0f\u503c\n\n \n\n\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u9898\u76ee\n\n \n\n\n1.\u6211\u4eec\u5728\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u4e00\u5b9a\u4ece\u5c0f\u5230\u5927\u9009\u62e9\u6700\u4f18\u7684\u51e0\u6761\u8fb9\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8981\u4f7f\u9009\u51fa\u7684\u8fb9\u6700\u77ed\uff0c\u8be5\u8fb9\u4e00\u5b9a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\n\n \n\n2.\u6211\u4eec\u53ef\u4ee5\u5bf9s\u4e2a\u70b9\u8fdb\u884c\u6807\u8bb0\uff0c\u8ba9\u8fde\u63a5\u4ed6\u4eec\u7684\u8fb9\u8fb9\u6743\u4e3a0\uff0c\u6b64\u65f6\uff0c\u5f88\u663e\u7136\u5220\u53bb\u8fb9\u7684\u6570\u91cf\u8d8a\u591a\u8d8a\u4f18\uff0c\u5bf9\u4e8es\u4e2a\u70b9\u800c\u8a00\uff0c\u5b83\u4eec\u6700\u591a\u53ef\u4ee5\u8fdes-1\u4e2a\u8fb9\n\n \n\n\u6839\u636e\u5206\u6790 \u8fd9\u4e2a\u9898\u76ee\u7684\u9898\u610f\u53ef\u4ee5\u88ab\u518d\u4e00\u6b21\u7b80\u5316\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0ap-s+1\u77ed\u8fb9\n\n \n\n\u5269\u4e0b\u5c31\u5f88\u7b80\u5355\u4e86\n\n ```cpp\n#include<bits/stdc++.h>\nusing namespace std; \nconst int Maxn = 1100;\nconst int MAxn = 250010;\n\nint s, p, m = 0, cntt = 0 , fa[Maxn]; \n\ndouble choose[MAxn];\n\nstruct stt {\n    int x, y;\n} node[Maxn]; \n\nstruct st {\n    int u, v;\n    double w;\n} edge[MAxn];\n\nint find ( int x ) {\n    return fa[x] == x ? x :fa[x] = find( fa[x] ); \n}\n\ninline double comp (const st &a, const st &b) {\n    return a.w < b.w ;\n}\n\ninline double dis ( int a, int b ) {\n    double xd = ( node[a].x - node[b].x ); \n    double yd = ( node[a].y - node[b].y );\n    double anss = sqrt ( xd * xd + yd * yd );\n    return anss;\n}\n\ninline void add_edge ( int u, int v ) {\n     edge[++m].u = u;\n     edge[m].v = v;\n     edge[m].w = dis( u, v );    \n}\n\ninline void kruscal () {\n    int cnt = 0 ;\n    sort(edge + 1, edge + 1 + m, comp);\n    for ( int i = 1; i <= m; ++i ) {\n        int uu = find ( edge[i].u );\n        int vv = find ( edge[i].v );\n        if( uu == vv ) continue ;\n        fa[uu] = vv;\n        choose[++cntt] = edge[i].w;\n        if( ++cnt == p - 1 ) break ;\n    }\n}\n\nint main () {\n    scanf ( \"%d %d\", &s, &p );\n    for ( int i = 1; i <= p; ++i ) fa[i] = i;\n    for ( int i = 1; i <= p; ++i )\n        scanf( \"%d %d\", &node[i].x, &node[i].y );\n    for ( int i = 1; i <= p; ++i )\n      for ( int j = i + 1; j <= p; ++j )\n        add_edge ( i, j );\n    kruscal () ;\n    if ( cntt <= s ) printf ( \"0.00\" );  \n    else  printf ( \"%.2f\", choose[cntt - s + 1] );\n    return 0;\n}\n```\n\n\u6700\u540e\u5e0c\u671b\u5927\u5bb6\u770b\u770b\u6211[\u535a\u5ba2\u56ed](https://www.cnblogs.com/Hadesa/)\u548c\u6d1b\u8c37\u535a\u5ba2\uff0c\u53cc\u8fb9\u66f4\u65b0\n",
        "postTime": 1537940887,
        "uid": 106632,
        "name": "Rbrq",
        "ccfLevel": 0,
        "title": "P1991 \u65e0\u7ebf\u901a\u8baf\u7f51"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u51e0\u4e2a\u6708\u524d\u505a\u7684\uff0c\u601d\u8def\u6709\u4e00\u4e9b\u95ee\u9898\uff0c\u5f88\u591a\u8ba8\u8bba\u91cc\u90fd\u6709\u8bf4\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u5927\u591a\u9898\u89e3\u8bf4\u7684\u5f88\u7c97\u7cd9\uff0c\u8ba9\u4eba\u7591\u60d1\n\n\u8fd9\u91cc\u5148\u611f\u8c22@\u4e09\u9152\u9152\u9152 \u5bf9\u8be5\u95ee\u9898\u7684\u8bb2\u89e3\u3002\n\n\u9519\u8bef\u7684\u601d\u8def\uff1a\u6c42\u51fa\u6240\u6709\u8fb9\u7684\u8ddd\u79bb\uff0c\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u629b\u5f03\u539f\u56fe\uff0c\u5927\u8111\u76f4\u63a5\u8fdb\u5165\u751f\u6210\u6811\u72b6\u6001\uff0c\u7136\u540e\u8d2a\u5fc3\u5220\u53bb\u6700\u5927\u7684\u8fb9\uff0c\u5220\u53bb\u4e00\u6761\u8fb9\u9700\u89812\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u90a3\u4e48\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0bn\u4e2a\u536b\u661f\u7535\u8bdd\u53ea\u80fd\u5220\u53bbn/2\u6761\u8fb9\n\n\u8fd9\u662f\u4e0d\u5bf9\u7684\uff0c\u4e00\u5207\u7684\u539f\u5219\u548c\u601d\u8def\u5e94\u8be5\u5728\u539f\u56fe\u4e2d\u5c55\u5f00\uff0c\u5373\u4efb\u610f\u4e24\u4e2a\u70b9\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\n\n\u90a3\u4e48\u4f60\u5220\u7b2c\u4e00\u6761\u8fb9\uff0c\u6beb\u65e0\u7591\u95ee\u9700\u89812\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u4f46\u5bf9\u4e8e\u5220\u9664\u7684\u540e\u9762\u7684\u8fb9\uff0c\u4f60\u53ea\u9700\u8981\u8bbe\u7f6e1\u4e2a\u536b\u661f\u7535\u8bdd\u5373\u53ef\n\n\u8bc1\u660e\uff1a1.\u7b2c\u4e8c\u6761\u5220\u9664\u7684\u8fb9\u4e00\u7aef\u5df2\u7ecf\u6709\u536b\u661f\u7535\u8bdd\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\n\n2.\u53e6\u4e00\u7aef\u6ca1\u6709\u536b\u661f\u7535\u8bdd\uff0c\u90a3\u4e48\u4f60\u5728\u8fd9\u4e00\u7aef\u52a0\u4e0a\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u53ef\u4ee5\u548c\u5df2\u7ecf\u5b89\u88c5\u7684\u536b\u661f\u7535\u8bdd\u7684\u70b9\u8ddd\u79bb\u4e3a0\uff0c\u70b9\u8f6c\u5316\uff0c\u5b89\u88c5\u8fc7\u536b\u661f\u7535\u8bdd\u7684\u70b9\u5230\u6700\u5927\u8fb9\u7684\u53e6\u5916\u4e00\u70b9\u8ddd\u79bb\u4e00\u5b9a\u5c0f\u4e8e\u6700\u5927\u8fb9\uff0c\u5982\u679c\u5927\u4e8e\u90a3\u4e48\u6700\u5927\u8fb9\u7684\u7aef\u70b9\u4e00\u5b9a\u6709\u536b\u661f\u7535\u8bdd\uff0c\u8f6c\u4e3a1\n\n\u81f3\u6b64\uff0c\u4ee3\u7801\u8bf7\u770b\u697c\u4e0b\u7684\u5927\u4f6c\u4eec\u5427\u3002\n",
        "postTime": 1510056243,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u770b\u5230\u4e0b\u9762\u6709\u5f88\u591a\u60f3\u6cd5\uff0c\u6709\u4e8c\u5206\u7684\uff0c\u6709\u514b\u9c81\u65af\u5361\u5c14\u7684\u3002\u3002\u3002\u5176\u5b9e\u4e5f\u5c31\u662f\u4e00\u4e2a\u8fd1\u4f3c\u88f8\u7684\u514b\u9c81\u65af\u5361\u5c14\u3002\u3002\u3002\n\n\u91cd\u8981\u7684\u662f\uff0c**\u4e0b\u9762\u6ca1\u6709pascal\u7684\uff0c\u4f5c\u4e3ap\u515a\uff0c**\u6709\u70b9\u60f3\u51fa\u624b\u3002\u3002\u3002\n\n\u81f3\u4e8e\u7a0b\u5e8f\uff0c\u4e0d\u96be\u7406\u89e3\uff0c\u7b54\u6848\u5c31\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b2cn\u5927\u8fb9\u3002\u3002\u3002\n\n\u52a0\u6cb9\uff01\u4f60\u53ef\u4ee5\u7684\uff01\n\n\u7279\u522b\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u5f97\u4e8640\u5206\u3002\u3002\u3002\n\n=====================================================================================\n\n```cpp\nvar\n  f,a,b,x,y:array[0..250000]of longint;\n  c,ans:array[0..1000000] of double;\n  n,i,s,f1,f2,m,ss,j:longint;\nfunction fr(x:longint):longint;\nbegin\n if f[x]=x then exit(x) else\n begin f[x]:=fr(f[x]);exit(f[x]);end;\nend;\nprocedure qsort(l,r:longint);\nvar i,j,y1:longint;x1,xx:double;\nbegin\n i:=l;j:=r;x1:=c[(l+r) div 2];\n repeat\n  while c[i]<x1 do inc(i);\n  while x1<c[j] do dec(j);\n  if not(i>j) then\n   begin\n   y1:=a[i];a[i]:=a[j];a[j]:=y1;\n   y1:=b[i];b[i]:=b[j];b[j]:=y1;\n   xx:=c[i];c[i]:=c[j];c[j]:=xx;\n   inc(i);dec(j);\n   end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nbegin\n  readln(s,n);\n  for i:=1 to n do\n   readln(x[i],y[i]);\n  for i:=1 to n do\n   for j:=1 to n do\n    if (i<>j) then\n     begin inc(m);a[m]:=i;b[m]:=j;c[m]:=sqrt(sqr(x[i]-x[j])+sqr(y[i]-y[j]));end;\n  for i:=1 to n do f[i]:=i;\n  qsort(1,m);//\u514b\u9c81\u65af\u5361\u5c14\n  ss:=0;\n  for i:=1 to m do\n    begin\n    f1:=fr(a[i]);\n    f2:=fr(b[i]);\n    if f1<>f2 then begin\n      f[f1]:=f2;\n      inc(ss);\n      ans[ss]:=c[i];\n      end;\n    end;\n  writeln(ans[ss-s+1]:0:2);\nend.\n```",
        "postTime": 1509802992,
        "uid": 24997,
        "name": "cenbinbin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u5927\u6982\u610f\u601d\u5c31\u662f \u73b0\u5728\u8981\u8dd1\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811 \u4f60\u53ef\u4ee5\u514d\u6389S-1\u6761\u8fb9\u7684\u8fb9\u6743\n\n\u5c31\u5148\u6b63\u5e38\u8dd1 \u7136\u540e\u628a\u8fb9\u6743\u8bb0\u5f55\u4e00\u4e0b \u80fd\u514d\u6389\u51e0\u4e2a\u5c31\u4ece\u5927\u5230\u5c0f\u514d\u6389\u5c31\u53ef\u4ee5\u5566\n\n\u7136\u540e\u8f93\u51fa\u5c31\u4f1aac\u4e86 \u795e\u4e0d\u795e\u5947\uff01\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<functional>\n#include<cmath>\n#include<algorithm>\n#define MAXN 250100//\u4e00\u5b9a\u8981\u5f00\u7684\u591f\u5927\uff01\uff01\uff01\u4e0d\u7136\u4f1a40 \u540e\u4e09\u4e2a\u70b9RE \nusing namespace std;\nint father[MAXN];\ndouble ans[MAXN];\nint flag[MAXN];\npriority_queue<int>q;\nstruct edge{\n    int from,to;\n    double value;\n};edge Edge[MAXN];\nstruct poin{\n    double x;\n    double y;\n}; poin point[520];\nbool cmp(edge x,edge y)\n{\n    return x.value<y.value;//\u6bd4\u8f83\u51fd\u6570 \n}\nint Find(int x)\n{\n    if(father[x]!=x)\n    {\n        father[x]=Find(father[x]);//\u8def\u5f84\u538b\u7f29 \n    }\n    return father[x];\n}\nvoid Union(int x,int y)\n{\n    int fx=Find(x),fy=Find(y);\n    if(fx!=fy)\n    {\n        father[fx]=fy;\n    }\n}\nint main()\n{\n    memset(flag,1,sizeof(flag));\n    int n,m,cnt=0;\n    double aa,bb;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        father[i]=i;\n        cin>>point[i].x>>point[i].y;//\u9884\u5904\u7406 \n    }\n    for(int i=1;i<=m;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(i==j)continue;//\u7279\u5224 \n            Edge[++cnt].from=i;\n            Edge[cnt].to=j;\n            Edge[cnt].value=sqrt((point[i].x-point[j].x)*(point[i].x-point[j].x)+(point[i].y-point[j].y)*(point[i].y-point[j].y));//\u9884\u5904\u7406\u4e00\u4e0b \n        }\n    }\n    sort(Edge+1,Edge+cnt+1,cmp);\n    int cut=0;\n    for(int i=1;i<=cnt;i++)\n    {\n        int a=Edge[i].from,b=Edge[i].to;\n        if(Find(a)!=Find(b)) \n        {\n            Union(a,b);\n            ans[cut]=Edge[i].value;\n            cut++;//\u628a\u6240\u6709\u7684\u8fb9\u8bb0\u5f55\u4e00\u4e0b \u7136\u540e\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019 \u628a\u8981\u5228\u6389\u7684\u8fb9\u5228\u53bb \u76f4\u63a5\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\n        }\n    }\n    printf(\"%.2f\",ans[cut-n]);//\u8f93\u51fa\u8981\u8bb0\u5f97.2f \u50cf\u6211 \u76f4\u63a5\u7528cout\u8f93\u51fa \u5c310\u5206\u5f88\u96be\u53d7 \n    return 0;\n}\n```",
        "postTime": 1506346323,
        "uid": 18875,
        "name": "\u53f8\u5f92stuart",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u7684\u60f3\u6cd5\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n\u536b\u661f\u7535\u8bdd\u662f\u4e2a\u597d\u4e1c\u897f\u554a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2akruskal\uff0c\u8ba9\u540e\u628a\u524d\uff08s-1\uff09\u957f\u7684\u8def\u7528\u536b\u661f\u7535\u8bdd\u4ee3\u66ff\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u6700\u957f\u8def\u5373\u4e3a\u7b54\u6848\uff1b\n\n\u90a3\u4e48\uff0c\u73b0\u5728\u6211\u4eec\u8fd9\u6837\u505a\uff0c\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u70b9\u96c6\u7684\u8bdd\uff0c\u536b\u661f\u7535\u8bdd\u80fd\u628as\u4e2a\u70b9\u53d8\u4e3a\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u96c6\u5408\u6570\u53d8\u6210\uff08p-s+1\uff09\u4e2a\uff0c\u8fd9\u6837\u518d\u7528kruskal\uff0c\u540c\u65f6\u8bb0\u5f55\u6700\u540e\u7528\u7684\u8fb9\u957f\u5c31\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u6b63\u786e\u6027\u660e\u663e233\uff08\u53cd\u6b63ac\u8fa3\uff01\uff09\n\n\u76f8\u4fe1\u5927\u5bb6\u7684kruskal\u5df2\u7ecf\u5f88\u719f\u7ec3\u5566\uff08\u4e0d\u7136\u7684\u8bdd\u53ef\u4ee5\u53bb\u590d\u4e60\u524d\u4e24\u9898\uff09\n\n\n\n\n       \n\n```cpp\n#include <iostream>\n#include <queue>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\nusing namespace std;\nstruct stu\n{\n    int fr;\n    int to;\n    double dis;\n    friend bool operator < (const stu& a,const stu& b)\n    {\n        return a.dis>b.dis;//\u5806\u9876\u6700\u5c0f\u7684\u4f18\u5148\u961f\u5217\n    }\n};\nint s,p;\ndouble loc[2][505];//\u8bb0\u5f55\u70b9\u7684\u4f4d\u7f6e\ndouble ans;//\u7b54\u6848\nint fa[505];//\u5e76\u67e5\u96c6\npriority_queue <stu> q;\nvoid add(int a,int b)\n{\n    stu temp;\n    temp.fr=a;\n    temp.to=b;\n    temp.dis=sqrt(abs((loc[0][a]-loc[0][b])*(loc[0][a]-loc[0][b]))+abs((loc[1][a]-loc[1][b])*(loc[1][a]-loc[1][b])));\n    //cout<<temp.dis<<endl;\n    q.push(temp);\n}\nint findset(int x)\n{\n    if(fa[x]==x) return x;\n    return findset(fa[x]);//\u627e\u6839\uff0c\u5e76\u4e14\u628a\u8def\u5f84\u53d8\u77ed\uff0c1-2-3-4\u53d8\u62101-2\uff0c1-3\uff0c1-4\uff0c\u5927\u6982\u662f\u8fd9\u6837\n}\nvoid unionset(int x,int y)\n{\n    int fx=findset(x);\n    int fy=findset(y);\n    if(fx!=fy)    fa[fx]=fy;//\u5408\u5e76\n    return ;\n}\nvoid kruskal()\n{\n    for(int i=1;i<=p;i++)\n        fa[i]=i;\n    int nos=p-s+1;//\u7528\u536b\u661f\u7535\u8bdd\u5904\u7406\u540e\u7684\u96c6\u5408\u6570\n    for(;;)\n    { \n        if(nos==1) return ;//\u96c6\u5408\u6570\u4e3a1\u5c31\u5168\u8fde\u901a\u55bd\n        stu t;\n        t=q.top();\n        q.pop();\n        if(findset(t.fr)==findset(t.to)) continue;\n        unionset(t.fr,t.to);//\u8fde\u70b9\n        ans=t.dis;//\u8bb0\u5f55\u7b54\u6848\n        nos--;\n    }\n}\nint main()\n{\n    cin>>s>>p;\n    for(int i=1;i<=p;i++)\n    {\n        cin>>loc[0][i]>>loc[1][i];//\u8bb0\u5f55\u4f4d\u7f6e\n    }//         x           y\n    for(int i=1;i<=p;i++)\n        for(int j=i+1;j<=p;j++)\n        {\n            add(i,j);//\u81ea\u5df1\u9020\u51fa\u8fb9\n        }\n    kruskal();\n    printf(\"%.2lf\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1505486983,
        "uid": 13994,
        "name": "panzheng1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u5148\u7ffb\u8bd1\u4e00\u4e0b\u9898\u76ee\u5427\u3002\n\n\u9996\u5148\u5c31\u662f\u8981\u6839\u636e\u7ed9\u5b9a\u7684\u70b9\u5efa\u56fe\uff0c\u4e5f\u5c31\u662f\u628a\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u7b97\u51fa\u6765\uff0c\u8fd9\u6837\u4ee5\u540e\u5c31\u4e0d\u7528\u6bcf\u4e00\u6b21\u8981\u7528\u7684\u65f6\u5019\u90fd\u7b97\u5230\u3002\n\n\u7136\u540e\u8bf4\u4e0b\u601d\u8def\uff0c\u601d\u8003\u7684\u65f6\u5019\u5148\u5047\u8bbe\u4e00\u4e2a\u536b\u661f\u7535\u8bdd\u90fd\u4e0d\u8ba9\u5efa\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u6700\u7b80\u5355\u7684\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\uff0c\u53ea\u8981\u628a\u9898\u7ed9\u7684\u70b9\u8f6c\u6362\u4e3a\u8fb9\u518d\u8d70\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u5373\u53ef\u89e3\u51b3\u3002\n\n\u518d\u8003\u8651\u536b\u661f\u7535\u8bdd\uff0c\u65e2\u7136\u662f\u6700\u5927\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u536b\u661f\u7535\u8bdd\u80af\u5b9a\u5f97\u7ed9\u5230\u6700\u5927\uff0c\u7b2c\u4e8c\u5927\u4e00\u76f4\u5230\u7b2cS\u5927\u7684\u7535\u4e0a\u624d\u5212\u7b97\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u5728\u521b\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u4e2d\u628a\u6811\u4e0a\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u8dd1\u5b8c\u6700\u5c0f\u751f\u6210\u6811\u540e\u8f93\u51fa\u8bb0\u5f55\u7684\u957f\u5ea6\u4e2d\u7684\u5012\u6570\u7b2cS\u4e2a\u5373\u53ef\u3002\n\n\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u9898\uff0c\u601d\u8def\u7a0d\u5fae\u8f6c\u4e2a\u5f2f\u5c31\u548c\u6700\u5c0f\u751f\u6210\u6811\u65e0\u5f02\u4e86\u3002\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n\n    \n    \n    \n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nstruct edge {\n    int start;\n    int end;\n    float value;\n    bool operator < (struct edge t) const {\n        return value<t.value;\n    }\n} edgea[250005];\nstruct point{\n    float x;\n    float y;\n}pointa[505];\nint fa[505];\nfloat pastroute[505];\nint findset(int goal) {\n    return fa[goal]==goal?goal:fa[goal]=findset(fa[goal]);\n}\nvoid mergea(int x,int y) {\n    fa[findset(x)]=fa[findset(y)];\n}\nint main() {\n    #ifdef LOCAL\n    freopen(\"test.in\",\"r\",stdin);\n    #endif\n    int s,p;\n    scanf(\"%d%d\",&s,&p);\n    for(int i=1;i<=p;i++) fa[i]=i;\n    for(int i=1;i<=p;i++){\n        float tx,ty;\n        scanf(\"%f%f\",&tx,&ty);\n        pointa[i].x=tx;\n        pointa[i].y=ty;\n    }\n    int cus=0;\n    for(int i=1;i<=p;i++){\n        for(int k=1;k<=p;k++){\n            if(i!=k){\n                float tfar=sqrt((pointa[i].x-pointa[k].x)*(pointa[i].x-pointa[k].x)+(pointa[i].y-pointa[k].y)*(pointa[i].y-pointa[k].y));\n                edgea[cus].start=i;\n                edgea[cus].end=k;\n                edgea[cus].value=tfar;\n                cus++;            \n            }\n        }\n    }\n    sort(edgea,edgea+p*(p-1));\n    cus=0;\n    for(int i=0;i<p*(p-1);i++){\n        if(findset(edgea[i].start)!=findset(edgea[i].end)){\n            mergea(edgea[i].start,edgea[i].end);\n            pastroute[cus]=edgea[i].value;\n            cus++;\n        }\n    }\n    printf(\"%.2f\\n\",pastroute[cus-s]);\n    return 0;\n}\n```",
        "postTime": 1504171259,
        "uid": 48842,
        "name": "geek\u75d5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u697c\u4e0b\u7684\u9898\u89e3\u5199\u7684\u4e0d\u5927\u8be6\u7ec6\uff0c\u4e8e\u662f\u4fbf\u6709\u4eba\u53d1\u4e86\u4e2a\u95ee\u9898\u5728\u8ba8\u8bba\u91cc\n\n\u8fd9\u9053\u9898\u7ed9\u4e86\u6211\u4eecS\u4e2a\u536b\u661f\u7535\u8bdd\uff0c\u5171\u6709P\u4e2a\u54e8\u5854\uff0c\u56e0\u6b64\u53ea\u7528\u536b\u661f\u7535\u8bdd\u53ef\u8fde\u63a5S-1\u4e2a\u54e8\u5854\n\n\u4e3a\u4e86\u628a\u5269\u4e0b\u7684P-S-1\u4e2a\u54e8\u5854\u548c\u524dS-1\u4e2a\u54e8\u5854\u8fde\u8d77\u6765\uff0c\u6211\u4eec\u9700\u8981\u8fde\u63a5P-S\u6761\u8fb9\uff0c\u534a\u5f84\u8bbe\u6210\u8fd9P-S\u6761\u8fb9\u4e2d\u6700\u957f\u7684\u8fb9\n\n\u4e8e\u662f\u4e4e\u8dd1\u4e2aKruskal/Prim\u5c31\u884c\u4e86\n\n\u6211\u5199\u7684Kruskal\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nstruct dot {\n    int x,y;\n} d[510];\nstruct edge {\n    int fr,to;\n    double v;\n} E[250010];\nint t,n,m=0,pre[510]={};\ndouble ans=0;\nbool cmp(edge a,edge b) {\n    return a.v<b.v;\n}\nint Find(int x) {\n    if(pre[x]!=x) return pre[x]=Find(pre[x]);\n    else return x;\n}\nint main() {\n    scanf(\"%d%d\",&t,&n);\n    for(int i=1;i<=n;i++) scanf(\"%d%d\",&d[i].x,&d[i].y);\n    for(int i=1;i<=n-1;i++) for(int j=i+1;j<=n;j++) E[++m].fr=i,E[m].to=j,E[m].v=std::sqrt(std::abs(d[i].x-d[j].x)*std::abs(d[i].x-d[j].x)+std::abs(d[i].y-d[j].y)*std::abs(d[i].y-d[j].y));\n    std::sort(&E[1],&E[m+1],cmp);\n    for(int i=1;i<=n;i++)  pre[i]=i;\n    for(int i=1,j=0;i<=m&&j<n-t;++i) {\n        int x=Find(E[i].fr),y=Find(E[i].to);\n        if(x!=y) {\n            pre[x]=y;\n            ans=E[i].v;\n            ++j;\n        }\n    }\n    printf(\"%.2lf\",ans);\n    return 0;\n}\n```",
        "postTime": 1503815724,
        "uid": 24397,
        "name": "__\u4e16\u754c\u7b2c\u4e00\u5f31__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2aPJ\u96be\u5ea6   \u5229\u7528\u63d0\u4f9b\u7684\u7535\u8bdd\u51cf\u53bb\u6700\u957f\u8fb9  n\u4e2a\u7535\u8bdd\u53ef\u4ee5\u51cf\u53bbn-1\u4e2a\u8f83\u957f\u8fb9 \u6240\u4ee5\u5229\u7528kruskal\u53ea\u9700\u8981\u6dfb\u52a0p-s\u6761\u8fb9\n\n\u8fd8\u6709\u4e00\u4e2a\u6838\u5fc3 \u5c31\u662f\u8981\u81ea\u5df1\u751f\u6210\u8fb9  \u611f\u89c9\u6570\u636e\u6709\u70b9\u5f31 \u81ea\u5df1\u7684\u66b4\u529b\u65b9\u6cd5\u4e5f\u662f\u8fc7\u4e86\u7684\n\n    \n    \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<queue>\nusing namespace std;\nint s,p;\nint fx[10010];\nint fy[10010];\nint f[10010];\nstruct P\n{\n    int x;\n    int y;\n    double v;\n};\nP e[1000010];\ndouble d;\nint cmp(P a,P b)\n{\n    return a.v<b.v;\n}\nint find(int x)\n{\n    if(f[x]!=x)\n    {\n        return f[x]=find(f[x]);\n    }\n    return x;\n}\nint main()\n{\n    for(int i=1;i<=10009;i++)\n    {\n        f[i]=i;\n    }\n    cin>>s>>p;\n    for(int i=1;i<=p;i++)\n    {\n        cin>>fx[i]>>fy[i];\n    }\n    int t=1;\n    for(int i=1;i<=p;i++)\n    {\n        for(int j=(i+1);j<=p;j++)\n        {\n            if(i!=j)\n            {\n                double tmp=sqrt((fx[i]-fx[j])*(fx[i]-fx[j])+(fy[i]-fy[j])*(fy[i]-fy[j]));\n                e[t].v=tmp;\n                e[t].x=i;\n                e[t].y=j;\n                t++;\n            }\n        }\n    }\n    t--;\n    int cs=0;\n    double maxn;\n    int c=(p-s);\n    sort(e+1,e+1+t,cmp);\n    for(int i=1;i<=t;i++)\n    {\n        P temp=e[i];\n        int sx=find(f[e[i].x]);\n        int sy=find(f[e[i].y]);\n        if(sx!=sy)\n        {\n            f[sx]=find(f[sy]);\n            cs++;\n            if(cs==c)\n            {\n                printf(\"%.2lf\",e[i].v);\n                return 0;\n            }\n        }\n    }\n}\n```",
        "postTime": 1503803094,
        "uid": 35804,
        "name": "KEIONG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "##[http://blog.csdn.net/Fine\\_rose/article/details/77054314](http://blog.csdn.net/Fine\\_rose/article/details/77054314)\n\n\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u4f7f\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u7684\u4f20\u8f93\u8ddd\u79bb\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u536b\u661f\u7535\u8bdd\u7684\u4f20\u8f93\u8ddd\u79bb\u3002\u57fa\u4e8e\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u536b\u661f\u7535\u8bdd\u4ee3\u66ff\u4f20\u8f93\u8ddd\u79bb\u6700\u957f\u7684\u51e0\u4e2a\u65e0\u7ebf\u7535\u7ebf\u8def\u3002\u90a3\u4e48\u5f97\u5230\u7684\u6700\u5927\u7684\u4f20\u8f93\u8ddd\u79bb\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\n\n\u4f7f\u7528 Kruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811\u65f6\uff0c\u4e5f\u662f\u5229\u7528\u4e86\u8d2a\u5fc3\u7684\u601d\u60f3\u3002\u5c06\u5404\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u4f9d\u6b21\u6dfb\u52a0\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u7531\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u6709 n \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5176\u4e2d\u4e00\u5b9a\u6709 n - 1 \u6761\u8fb9\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u536b\u661f\u7535\u8bdd\u4ee3\u66ff\u4e86\u6700\u957f\u7684\u65e0\u7ebf\u7535\u7ebf\u8def\uff0c\u90a3\u4e48\u6700\u540e\u6dfb\u52a0\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u7684\u7ebf\u8def\u4e00\u5b9a\u4f1a\u7528\u536b\u661f\u7535\u8bdd\u4ee3\u66ff\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6dfb\u52a0 n - m (m \u536b\u661f\u7535\u8bdd\u7684\u6570\u91cf) \u6761\u8fb9\uff0c\u6700\u540e\u6dfb\u52a0\u7684\u8fb9\u5c31\u662f\u6700\u5927\u7684\u4f20\u8f93\u8ddd\u79bb\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <stack>\nusing namespace std;\nint n, m; // n \u4e2a\u536b\u661f\u7535\u8bdd  m \u4e2a\u54e8\u6240\nint f[5005]; // \u5e76\u67e5\u96c6\nstruct Edge {\n    int from;\n    int to;\n    double value;\n} edges[1000005]; // \u8bb0\u5f55\u6240\u6709\u7684\u8fb9\nstack <Edge> ans; // \u8bb0\u5f55\u6dfb\u52a0\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\nint edge_len; // \u8fb9\u7684\u6570\u91cf\nstruct Node {\n    int x;\n    int y;\n} nodes[5005]; // \u8bb0\u5f55\u5df2\u7ecf\u8f93\u5165\u7684\u54e8\u6240\u5750\u6807\nvoid add(int from, int to, double value) { // \u6dfb\u52a0\u8fb9\n    edge_len++;\n    edges[edge_len].from = from;\n    edges[edge_len].to = to;\n    edges[edge_len].value = value;\n}\nbool cmp(Edge a, Edge b) {\n    return a.value < b.value;\n}\nint getFrom(int id) { // \u83b7\u53d6\u6240\u5c5e\u96c6\u5408\n    if (id == f[id])\n        return id;\n    return f[id] = getFrom(f[id]);\n}\nvoid Union(int a, int b) { // \u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\n    f[getFrom(a)] = getFrom(b);\n}\nbool check(int a, int b) { // \u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\n    return (getFrom(a) == getFrom(b));\n}\nint main() {\n    freopen(\"in.txt\", \"r\", stdin);\n    cin >> n >> m;\n    for (int i = 1; i <= m; i++)\n        f[i] = i;\n    for (int i = 1; i <= m; i++) {\n        cin >> nodes[i].x >> nodes[i].y;\n        for (int j = 1; j < i; j++) // \u5c06\u65b0\u8f93\u5165\u7684\u70b9\u4e0e\u5df2\u7ecf\u8f93\u5165\u7684\u6240\u6709\u70b9\u5efa\u7acb\u8fb9\n            add(j, i, sqrt(((long long)nodes[i].x - nodes[j].x) * ((long long)nodes[i].x - nodes[j].x) +\n            ((long long)nodes[i].y - nodes[j].y) * ((long long)nodes[i].y - nodes[j].y)));\n    }\n    sort(edges + 1, edges + 1 + edge_len, cmp); // \u6392\u5e8f\u6240\u6709\u7684\u8fb9\n    int cnt = 0; // \u8bb0\u5f55\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u7684\u6570\u91cf\uff0c\u4e5f\u53ef\u4ee5\u7528 ans.size() \u4ee3\u66ff\n    for (int i = 1; i <= edge_len && cnt < m - n; i++) { // Kruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811\n        Edge &edge = edges[i];\n        if (!check(edge.from, edge.to)) { // \u5982\u679c\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\n            Union(edge.from, edge.to); // \u5408\u5e76\u4e24\u4e2a\u70b9\u6240\u4f4d\u4e8e\u7684\u96c6\u5408\n            ans.push(edge); //\u6dfb\u52a0\u8fdb\u6700\u5c0f\u751f\u6210\u6811\n            cnt++;\n        }\n    }\n    printf(\"%.2f\", ans.top().value); // \u7531\u4e8e\u4f7f\u7528\u6808\u5b58\u50a8\u7684\u8fb9\uff0c\u6240\u4ee5\u6808\u9876\u662f\u5f53\u524d\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u5927\u7684\u8fb9\n    return 0;\n}\n```",
        "postTime": 1502352646,
        "uid": 25845,
        "name": "Snitro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e0b\u597d\u50cf\u6ca1\u6709\u9760\u8c31\u7684\u4e8c\u5206\u9898\u89e3\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206d\u7136\u540e\u5728\u5224\u65ad\u662f\u5426\u53ef\u884c\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u3002\n\n\u7531\u4e8e\u6570\u636e\u8303\u56f4\u975e\u5e38\u5c0f\uff0c\u6211\u4eec\u66b4\u529bn2\u904d\u5386\u6bcf\u4e2a\u70b9\u5bf9\uff0c\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u7b54\u6848\u5c31\u5408\u5e76\u3002\n\n\u6700\u540e\u7edf\u8ba1\u8054\u901a\u5757\u4e2a\u6570\uff0c<s\u5c31\u5408\u6cd5\u3002\n\n\n>#include<cstdio>\n```cpp\n#include<cmath>\nconst int MAXV=610;\nconst double D=1e-5;\nstruct P{double x,y;}poi[MAXV];\ninline double sqr(double a){return a*a;}\ninline double dis(P& a,P& b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\nint n,m,p[MAXV];\ndouble l=0,r=20000,mid;\nint find(int x){return x==p[x]?x:p[x]=find(p[x]);}\nbool check(){\n    for(int i=1;i<=n;i++) p[i]=i;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++) if(i!=j&&dis(poi[i],poi[j])<=mid){\n            int x=find(i),y=find(j);\n            if(x!=y) p[x]=y;\n        }\n    }\n    int cnt=0;\n    for(int i=1;i<=n;i++) cnt+=p[i]==i;\n    return cnt<=m;\n}\nint main(){\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=n;i++) scanf(\"%lf%lf\",&poi[i].x,&poi[i].y);\n    while(r-l>D){\n        mid=(l+r)/2;\n        if(check()) r=mid;\n        else l=mid;\n    }\n    mid=(l+r)/2;\n    printf(\"%.2lf\",mid);\n}\n```",
        "postTime": 1474214734,
        "uid": 15183,
        "name": "Rapiz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u770b\u9898\u89e3\uff08\u91cc\u7a0b\u5e8f\uff09\u6bd4\u8f83\u5c11\u4e8e\u662f\u5fc3\u8840\u6765\u6f6e\u5c31\u53d1\u4e86\u4e00\u4e0b\n\n\uff08\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\u6700\u4e0b\u9762\u7684\u4e24\u4f4d\u662f\u4ec0\u4e48\u9b3c\u554a\n\n\u5927\u81f4\u601d\u60f3\u662f\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5  \u7b49\u5230\u63a5\u4e0a\u7b2c\uff08p-s\uff09\u6761\u8fb9\u65f6\u7ec8\u6b62\u7a0b\u5e8f\uff08\u56e0\u4e3a\u4e4b\u540e\u7684\u53ef\u4ee5\u7528\u536b\u661f\uff09\n\n\uff08\u521a\u5f00\u59cb\u56e0\u4e3a\u6570\u636e\u8303\u56f4\u6ca1\u4ed4\u7ec6\u770b\u6570\u7ec4\u5f00\u5c0f\u4e86\u770b\u4e86\u597d\u4e45\u6240\u4ee5\u73b0\u5728\u6570\u7ec4\u5927\u5f97\u4e0d\u5fc5\u8981\uff09\n\n```cpp\n\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint xx[1005],yy[1005],s,p,i,j,t,f[1000005],total;\ndouble ans;\nstruct xxy\n{\n    double x,y,cost;\n}a[1000005];\nbool cmp(xxy p,xxy q)\n{\n    return p.cost<q.cost;\n}\nint search(int p)\n{\n    if (f[p]==p) return p;\n    return search(f[p]);\n}\nbool judge(int p,int q)\n{\n    if (search(p)==search(q)) return true;\n    return false;\n}\nvoid hebing(int p,int q)\n{\n    int e,r;\n    e=search(p);\n    r=search(q);\n    f[e]=r;\n    return;\n}\nint main()\n{\n    scanf(\"%d%d\",&s,&p);\n    for (i=1; i<=p; i++)\n    {\n        scanf(\"%d%d\",&xx[i],&yy[i]);\n        for (j=1; j<=i-1; j++)\n        {\n            t++;\n            a[t].cost=sqrt((xx[i]-xx[j])*(xx[i]-xx[j])+(yy[i]-yy[j])*(yy[i]-yy[j]));\n            a[t].x=i;\n            a[t].y=j;\n        }\n    }\n    for (i=1; i<=p; i++)\n        f[i]=i;\n    sort(a+1,a+t+1,cmp);\n    for (i=1; i<=t; i++)\n    {\n        if (judge(a[i].x,a[i].y)) continue;\n        hebing(a[i].x,a[i].y);\n        ans=a[i].cost;\n        total++;\n        if (total>=p-s)\n        {\n            printf(\"%.2lf\",ans);\n            return 0;\n        }\n    }\n    return 0;\n}\n\n```\n\u7136\u540eOrz\u4e00\u4e0b\u4e0b\u9762\u7528\u4e8c\u5206\u505a\u7684\u5927\u795e\n",
        "postTime": 1454503544,
        "uid": 9193,
        "name": "a526955194",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u697c\u4e0b\u7684\u9898\u89e3\u4e3a\u4ec0\u4e48\u597d\u8be1\u5f02\u2192\\_\u2192  \u8fd9\u9898\u6362\u8fc7\u9898\u5e72\u5427\u3002\u3002\u3002\n\n\n\u597d\u4e86\u8bf4\u6b63\u7ecf\u7684\u3002\u3002\u3002\n\n\n\u56e0\u4e3ap\u4e2a\u70b9\u4efb\u610f\u8054\u901a\uff0c\u53ef\u4ee5\u5f00\u90bb\u63a5\u77e9\u9635\u8bb0\u5f55p^2-p\u6761\u8fb9\u3002\u3002\u3002\n\n\n\u8fd9\u9898\u8d2a\u5fc3\u8c8c\u4f3c\u662f\u4e0d\u884c\u7684\u301023333\u3011\n\n\u6700\u5f00\u59cb\u672c\u6765\u60f3Prim\u505a\uff0c\u7136\u540e\u7528\u5806\u7ef4\u62a4s\u4e2a\u6700\u957f\u8fb9\uff0c\u8fd9s\u4e2a\u8fb9\u81f3\u5c11\u4f1a\u6d89\u53cas+1\u4e2a\u70b9\uff0c\u81f3\u591a\u4f1a\u6d89\u53ca2\\*s\u4e2a\u70b9\uff0c\u6309\u8fb9\u4ece\u957f\u5230\u77ed\u9009\u51fa\u6709\u5173\u7684s\u4e2a\u70b9\u5e76\u8bb0\u5f55\uff0c\u7136\u540e\u628a\u8fd9m\u4e2a\u70b9\u4e4b\u95f4s^2-s\u6761\u8fb9\u957f\u8bbe\u4e3a0\n\n\u7136\u540eprim\u3002\u3002\u3002[color=#FF0000]\u7ed3\u679cWA\u4e86\u4e24\u4e2a\u70b9\u3002\u3002\u3002[/color]\n\n\n\u6709\u795e\u7287\u8bf4\u7528**\u5e76\u67e5\u96c6**\u3002\u3002\u3002\n\n\u5e76\u67e5\u96c6&\u4e8c\u5206\u4f18\u5316\n\n\u6570\u636e\u8303\u56f4\u770b\u8c8c\u4f3c\u4e0d\u4f1aTLE\n\n\u7528\u4e8c\u5206\u627e\u6700\u77ed\u8ddd\u79bb\uff0c\u7136\u540e\u5e76\u67e5\u96c6\u770b\u6709\u591a\u5c11\u8fde\u901a\u70b9\uff0c\u82e5\u5c0f\u4e8es\u5219\u8bb0\u5f55\uff0c\u8fd8\u662f\u6700\u540e\u628a\u8bb0\u5f55\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6e05\u96f6\uff0c\u7136\u540ekruskal\n\n\u679c\u7136\u4e0d\u4f1aTLE\u3002\u3002\u3002\n",
        "postTime": 1426411428,
        "uid": 3925,
        "name": "TMXi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    },
    {
        "content": "\u4e00\u9053\u5e76\u67e5\u96c6~~\u677f\u5b50~~\u6c34\u9898\n\n\n\u6838\u5fc3\u5728\u4e8e\uff0c \u6211\u4eec\u5c06G\u6570\u7ec4\uff08\u8fb9\uff09\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\u53d6\uff0c\u76f4\u5230\u53d6\u5230\uff08p-s\uff09\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u6bcf\u4e2a\u70b9\u914d\u5907\u536b\u661f\u7535\u8bdd\u5373\u53ef\u3002\n\nAns \u5c31\u662f\u8fde\u63a5\u7684\u8fb9\u91cc\u9762\u6700\u957f\u7684\u90a3\u6761\uff0c\u56e0\u4e3aG\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u6bcf\u6b21\u76f4\u63a5\u8986\u76d6Ans\u5373\u53ef\n\n\u5f00\u59cb\u8fd8\u4ee5\u4e3a\u8981\u7279\u5224s == 1\u7684\u567b\uff0c\u53d1\u73b0\u5e76\u4e0d\u7528\n\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm> \nusing namespace std;\ninline int Read()\n{\n\tint s = 0,w = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9'){\n\t\tif(ch == '-') w = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9')\n\t\ts = (s << 3)+(s << 1) + ch - '0',ch = getchar();\n\treturn w * s;\n}\nint p,s,fa[505],a[505],b[505],tot = 0; \nstruct Edge{\n\tint x,y;\n\tdouble val;\n}G[505*505];\ndouble RT(int x1,int y1,int x2,int y2){    \n    //\u8fb9\u6743\u7528\u52fe\u80a1\u5b9a\u7406\uff0c\u4ec0\u4e48\uff1f\u4f60\u8bf4\u4e0d\u4f1a\uff1f\u6253\u54ed\u4f60\u4fe1\u4e0d\u4fe1\uff08\u624b\u52a8\u6572\u4f60\u8111\u58f3\uff09\n\treturn sqrt(pow(double(x1-x2),2) + pow(double(y1-y2),2));\n}\nint find(int x){\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]); \n}\nbool cmp(Edge A, Edge B){\n\treturn A.val < B.val;\n}\nint main()\n{\n\ts = Read(), p = Read();\n\tfor(int i = 1; i <= p; ++i)\t{\n\t\tfa[i] = i;\n\t\ta[i] = Read();\n\t\tb[i] = Read();\n\t}\n\tfor(int i = 1; i <= p; ++i)\n\t\tfor(int j = i + 1; j <= p; ++j) {\n\t\t\tG[++tot].x = i;\n\t\t\tG[tot].y = j;\n\t\t\tG[tot].val = RT(a[i],b[i],a[j],b[j]); \n\t\t} \n\tdouble Ans = 0;\n\tint cnt = 0;\n\tsort(G + 1, G + 1 + tot, cmp);\n\tfor(int i = 1; i <= tot; ++i){\n\t\tint x = find(G[i].x);\n\t\tint y = find(G[i].y);\t\n\t\tif(x != y)\n\t\t{\n\t\t\t++cnt;\n\t\t\tfa[x] = y;\n\t\t\tAns = G[i].val;  \t//\u6bcf\u6b21\u66f4\u65b0Ans\n\t\t}\n\t\tif(cnt == p - s)   //\u53d6\u5230p-s\u5373\u53ef\n        \tbreak;\n\t}\n\tprintf(\"%.2f\",Ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1533450423,
        "uid": 44650,
        "name": "SpXace",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1991 \u3010\u65e0\u7ebf\u901a\u8baf\u7f51\u3011"
    }
]