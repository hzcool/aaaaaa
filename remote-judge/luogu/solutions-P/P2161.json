[
    {
        "content": "### \u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684STL\u505a\u6cd5\uff08\u975e\u5e38\u597d\u60f3\uff0c\u4ee3\u7801\u5f88\u77ed\uff09\n\n\u9898\u610f\u5df2\u7ecf\u6697\u793a\u7684\u5f88\u660e\u786e\u8981\u4f60\u4f7f\u7528\u5e73\u8861\u6811\u4e86\uff0c\u4f46\u672c\u849f\u84bb\u592a\u61d2\uff0c\u4e0d\u60f3\u6253\u5e73\u8861\u6811\uff0c\u4e8e\u662f\u4fbf\u8003\u8651\u5077\u61d2\u7528STL~~\uff08\u8fd8\u4e0d\u662f\u662f\u56e0\u4e3a\u592a\u5f31\uff09~~\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58\u4e00\u4e2a\u9884\u7ea6\uff0c\u5982\u4e0b\uff1a\n```cpp\nstruct Plan{\n\tint l,r; //l,r\u5206\u522b\u8868\u793a\u9884\u7ea6\u5f00\u59cb,\u7ed3\u675f\u7684\u65f6\u95f4\n};\n```\n\n\u9996\u5148\u8003\u8651A\u64cd\u4f5c\uff0c\u7531\u4e8eSTL\u7684set\u6709**\u76f8\u540c\u5143\u7d20\u53ea\u4fdd\u7559\u4e00\u4e2a**\u7684\u7279\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4ee4\u6709\u51b2\u7a81\u7684\u9884\u7ea6\u76f8\u7b49\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7528.find()\u8fd9\u4e2a\u51fd\u6570\u6765\u5b8c\u6210A\u64cd\u4f5c\u4e86\u3002\n\n#### \u600e\u4e48\u4ee4\u5b83\u4eec\u76f8\u7b49\u5462\uff1f\n\n\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u7531\u4e8e\u4f7f\u7528\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u7684set\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\uff1a\n```cpp\nstruct Plan{\n\tint l,r;\n\tbool operator <(const Plan &rhs)const{\n\t\treturn r<rhs.l;\n\t}\n};\n```\n\u8fd9\u6837\u5bf9\u4e8e\u4e24\u4e2aPlan\u7c7b\u578b\u7684\u7ed3\u6784\u4f53a,b\u6765\u8bf4\uff0ca<b\u5c31\u4ee3\u8868a\u5b8c\u5168\u5728b\u7684\u5de6\u8fb9\uff0ca>b\u5c31\u4ee3\u8868a\u5b8c\u5168\u5728b\u7684\u53f3\u8fb9\uff0ca==b\u5c31\u4ee3\u8868a\u4e0eb\u6709\u51b2\u7a81(\u6709\u91cd\u53e0\u90e8\u5206)\n\n\u5bf9\u4e8eB\u64cd\u4f5c\uff0c\u76f4\u63a5\u8f93\u51faset\u91cc\u5143\u7d20\u7684\u4e2a\u6570\u5c31\u597d\u4e86\n\n~~\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u4e50\u7684A\u6389\u8fd9\u9053\u9898\u4e86~~\n\n\u6709\u4e86\u4e0a\u9762\u7684\u601d\u8def\uff0c\u4ee3\u7801\u4e5f\u4e0d\u96be\u5199\u51fa:\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<set>\nusing namespace std;\nstruct Plan{\n\tint l,r;\n\tbool operator <(const Plan &rhs)const{\n\t\treturn r<rhs.l;\n\t}\n};\nint T;\nset<Plan> s;\nint main(){\n\tcin>>T;\n\twhile(T--){\n\t\tchar c; scanf(\" %c\",&c); //\u7a7a\u683c\u53ef\u4ee5\u9632\u6b62\u8bfb\u5165\u65e0\u6548\u5b57\u7b26\n\t\tif(c=='A'){\n\t\t\tint l,r,cnt=0; scanf(\"%d %d\",&l,&r);\n\t\t\tPlan tmp=(Plan){l,r};\n            //\u5220\u6389\u4e0e\u8be5\u9884\u7ea6\u51b2\u7a81\u7684\u9884\u7ea6\uff0c\u5e76\u7edf\u8ba1\u4e2a\u6570\n\t\t\tset<Plan>::iterator it=s.find(tmp);\n\t\t\twhile(it!=s.end()){\n\t\t\t\t++cnt; s.erase(it);\n\t\t\t\tit=s.find(tmp);\n\t\t\t}\n\t\t\ts.insert(tmp);\n\t\t\tprintf(\"%d\\n\",cnt);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d\\n\",s.size());\n\t\t}\n\t}\n\treturn 0;\n}\n```\nAC\u8bb0\u5f55\uff1a[R14872282 \u8bc4\u6d4b\u8be6\u60c5](https://www.luogu.org/recordnew/show/14872282)",
        "postTime": 1545398306,
        "uid": 69426,
        "name": "Nartsam",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u770b\u8bd5\u70bc\u573a\u7684\u6811\u72b6\u6570\u7ec4\u8fdb\u6765\u7684\uff0c\u4f46\u53d1\u73b0\u9898\u89e3\u4ee3\u7801\u6e05\u4e00\u8272\u7684\u90fd\u662f\u5e73\u8861\u6811\u3001\u7ebf\u6bb5\u6811\n\n\u8fd9\u91cc\u52a0\u4e2a\u5c0f\u6e05\u65b0\u7684\u6811\u72b6\u6570\u7ec4\u4ee3\u7801\uff0c\u539f\u7406\u89c1\u6700\u524d\u9762\u7684\u9898\u89e3\n\n\u56e0\u4e3a\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u8fdb\u961f\u4e00\u6b21\u3001\u51fa\u961f\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662fO(nlognlogn)\n\n```cpp\n#include<cstdio>\nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\n#define go(a,b,c) for(int a=b;a>=c;a--)\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nint min(int a,int b){return a<b?a:b;}\nint max(int a,int b){return a>b?a:b;}\nconst int N=100001;\nint tree[N],end[N];\nvoid add(int x,int c){\n    for(;x<N;x+=x&-x)tree[x]+=c;\n}//\u6570\u7ec4\u6570\u7ec4\u52a0\nint ask(int x){\n    int sum=0;\n    for(;x;x&=x-1)sum+=tree[x];\n    return sum;\n}//\u6570\u7ec4\u6570\u7ec4\u6c42\u548c\nint main(){\n    int n=read(),ans=0;\n    fo(i,1,n){\n        scanf(\"\\n\");\n        if(getchar()=='A'){\n            int del=0,st=read(),ed=read();\n            for(int p;p=ask(ed);){\n                int l=0,r=ed;\n                for(;l<r;){\n                    int m=(l+r)>>1;\n                    if(ask(m)+1<=p)l=m+1;\n                    else r=m;\n                }//\u4e8c\u5206\u627e\u5230\u6700\u540e\u53ef\u80fd\u4ea4\u53c9\u7684\u533a\u95f4\n                if(end[l]>=st)add(l,-1),del++,ans--;\n                else break;\n            }\n            add(st,1);end[st]=ed;ans++;\n            printf(\"%d\\n\",del);\n        }\n        else printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1507562195,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "https://www.luogu.org/problemnew/solution/P2161\n\n\u8fd9\u91cc\u6709\u4e00\u79cd**\u4e0d\u7528\u4e8c\u5206\uff0c\u4e0d\u7528\u6c42\u8d21\u732e\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u8981\u5b582\u4e2a\u4fe1\u606f**\u7684\u7ebf\u6bb5\u6811\u4ee3\u7801\u3002\u5e38\u6570\u8fd8\u7b97\u53ef\u4ee5\uff08\u5f00/\u4e0d\u5f00O2\uff1a588ms/908ms\uff09\uff0c\u957f\u5ea6\u4e0e\u5176\u4ed6\u7ebf\u6bb5\u6811\u9898\u89e3\u6bd4\u4e5f\u633a\u77ed\u7684\uff0876\u884c\uff09\u3002\n\n## \u8fdb\u5165\u6b63\u9898\n\n\u5148\u628a\u9898\u76ee\u770b\u6210\u4e00\u4e2a\u4ec5\u5b9e\u73b0**\u533a\u95f4\u4fee\u6539**\u7684\u7ebf\u6bb5\u6811\uff0c\u7528$tag$\u6570\u7ec4\u6253\u6253\u6807\u8bb0\u5373\u53ef ~~\u8fd9\u662f\u57fa\u7840\u554a\u5bf9\u5427qwq~~\n\n\u4e3a\u4e86\u65b9\u4fbf~~\u6211\u63cf\u8ff0~~\u7406\u89e3\uff0c\u4ee5\u4e0b\u628a**\u9884\u7ea6\u5e8f\u53f7**\u770b\u6210**\u989c\u8272**\n\n------\nA\u64cd\u4f5c\u7684\u771f\u5b9e\u76ee\u7684\uff1a\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u4e2d\u6709\u591a\u5c11\u79cd\u989c\u8272\uff0c\u7136\u540e\u6e05\u7a7a\u6570\u5217\u4e2d\u6240\u6709\u5728\u8be5\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u989c\u8272\uff0c\u6700\u540e\u628a\u8fd9\u4e2a\u533a\u95f4\u4fee\u6539\u6210\u53e6\u4e00\u79cd\u989c\u8272\n\uff08\u5148\u522b\u6025\u7740\u770bB\u64cd\u4f5cqwq\uff09\n\n\u7b80\u800c\u8a00\u4e4b\u5c31\u662f**\u67e5\u8be2->\u6e05\u7a7a->\u4fee\u6539**\n\n\u5bf9\u4e8e**\u67e5\u8be2**\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165$find$\u51fd\u6570\u548c$same$\u6570\u7ec4\u3002$find$\u51fd\u6570\u7684\u804c\u80fd\u662f**\u904d\u5386**\u7ed9\u5b9a\u533a\u95f4\u3002\u5f53$same[o]==1$\u65f6\uff0c\u8be5\u533a\u95f4\u5185\u53ea\u6709\u4e00\u79cd\u989c\u8272\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5f97\u77e5\u8be5\u533a\u95f4\u7684\u989c\u8272\u4e86\uff1b\u5426\u5219\u7ee7\u7eed\u5411\u4e0b\u904d\u5386\u3002\n\n\u5bf9\u4e8e**\u6e05\u7a7a**\u64cd\u4f5c\uff1a\u5176\u5b9e\u4e0d\u7528\u771f\u7684\u6e05\u7a7a\uff0c\u53ea\u9700\u8981\u5f15\u5165\u4e00\u4e2a$del$\u6570\u7ec4\uff0c\u5b58\u50a8\u8be5\u989c\u8272\u662f\u5426\u5df2\u88ab\u5220\u9664\u5373\u53ef\n\n\u5bf9\u4e8e**\u4fee\u6539**\uff0c\u4e0d\u5728\u8bdd\u4e0b~~\u8fd9\u662f\u57fa\u7840\u554a\u5bf9\u5427qwq~~\n\n------\n\u5bf9\u4e8eB\u64cd\u4f5c.....\uff0c\u7528\u4e00\u4e2a$ans$\u50a8\u5b58\u8fd8\u5269\u51e0\u79cd\u989c\u8272\u672a\u88ab\u5220\u9664\uff0c~~\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86~~\n\n-----\n\u5e94\u8be5\u5728\u7ebf\u79bb\u7ebf\u90fd\u652f\u6301\uff0c\u4e0d\u8fc7\u79bb\u7ebf\u7684\u8bdd\u53ef\u4ee5\u7528$st,ed$\u5b58\u7ebf\u6bb5\u6811\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u5efa\u7684\u6811\u5c0f\uff08\u5f53\u7136\u5728\u7ebf\u7684\u8bdd\u76f4\u63a5\u5f00\u5230\u6700\u5927\u5bf9\u5427\uff09\n\n\u590d\u6742\u5ea6\u5927\u6982$O(nlogn)$\u5427~~\u539f\u8c05\u6211\u4e0d\u592a\u4f1a\u7b97\uff08\u9003~~\n\ntips\uff1a\u6570\u636e\u6709\u9505\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528\u8bfb\u5165/\u8f93\u51fa\u4f18\u5316\uff0c\u8bfb\u5165\u5b57\u7b26\u7528\u5b57\u7b26\u4e32\uff08\u9664\u975e\u4f60\u5f88\u6709\u81ea\u4fe1\uff09~~TLE\u7684\u5207\u8eab\u7ecf\u5386QAQ~~\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u6211\u4e5f\u77e5\u9053\u6211\u8bb2\u7684\u4e0d\u6e05\u695aQAQ\u6240\u4ee5\u8fd8\u662f\u770b\u5427\uff09\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\ninline int min(const int &a,const int &b) {return a<b ?a:b;}\ninline int max(const int &a,const int &b) {return a>b ?a:b;}\n\nconst int maxn=400002;\nstruct data{\n\tchar opt[2]; int l,r;\n}a[200002];\nint tag[maxn];\nbool del[maxn],same[maxn];\nint st=1e9,ed,n,x0,y0,v,ans,era;\n\ninline void pushdown(int o,int l,int r) //\u6807\u8bb0\u4e0b\u4f20\n{\n\tsame[o]=0; //\u80fd\u4e0b\u4f20\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u4e0d\u662f\u540c\u8272\n\tif(!tag[o]) return ;\n\tint lc=o<<1,rc=o<<1|1;\n\ttag[lc]=tag[rc]=tag[o];\n\ttag[o]=0; \n}\ninline void build(int o,int l,int r)//\u666e\u901a\u7684\u5efa\u6811\n{\n\tsame[o]=1; tag[o]=0; //\u8bb0\u5f97\u521d\u59cb\u5316\uff1a\u521a\u5f00\u59cb\u7684\u6811\u65e0\u4fee\u6539\u6807\u8bb0\u4e14\u6574\u68f5\u6811\u90fd\u53ea\u6709\u4e00\u4e2a\u989c\u8272\uff08\u65e0\u8272==0\uff09\n\tif(l==r) return ;\n\tint lc=o<<1,rc=o<<1|1,mid=l+((r-l)>>1);\n\tbuild(lc,l,mid); build(rc,mid+1,r);\n}\ninline void find(int o,int l,int r)\n{\n\tif(same[o]==1)\n\t{\n\t\tif(!del[tag[o]]&&tag[o]) --ans,++era; //\u7528ans\u8bb0\u5f55\u8fd8\u5269\u51e0\u79cd\u989c\u8272\uff0cera\u8bb0\u5f55\u8fd9\u6b21\u5220\u9664\u4e86\u51e0\u79cd\u989c\u8272\uff08\u6ce8\u610f\u5224\u65e0\u8272\uff09\n\t\tdel[tag[o]]=1; //\u5220\u9664\n\t\ttag[o]=v;\n\t\treturn ;\n\t}\n\tint lc=o<<1,rc=o<<1|1,mid=l+((r-l)>>1);\n\tfind(lc,l,mid); find(rc,mid+1,r);\n\ttag[o]=v; same[o]=1; //\u8be5\u533a\u95f4\u5185\u90fd\u662f\u540c\u8272\n}\ninline void modify(int o,int l,int r)//\u666e\u901a\u7684\u533a\u95f4\u4fee\u6539\n{\n\tif(x0<=l&&r<=y0) {find(o,l,r); return ;} //\u52a0\u5165\u4e00\u4e2afind\u51fd\u6570\u5bf9\u6240\u6c42\u533a\u95f4\u8fdb\u884c\u66f4\u6df1\u4e00\u5c42\u7684\u904d\u5386\n\tpushdown(o,l,r);\n\tint lc=o<<1,rc=o<<1|1,mid=l+((r-l)>>1);\n\tif(x0<=mid) modify(lc,l,mid);\n\tif(y0>mid) modify(rc,mid+1,r);\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%s\",a[i].opt);\n\t\tif(a[i].opt[0]=='B') continue;\n\t\tscanf(\"%d%d\",&a[i].l,&a[i].r);\n\t\tst=min(st,a[i].l); ed=max(ed,a[i].r);\n\t}\n\tbuild(1,st,ed);\n\tint cnt=0; //cnt\uff1a\u5f53\u524d\u989c\u8272\u7684\u6807\u53f7\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(a[i].opt[0]=='A')\n\t\t{\n\t\t\t++ans; x0=a[i].l; y0=a[i].r; v=++cnt; era=0;\n\t\t\tmodify(1,st,ed); \n\t\t\tprintf(\"%d\\n\",era);\n\t\t}else printf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1534162546,
        "uid": 21679,
        "name": "\u9999\u98ce\u667a\u4e43",
        "ccfLevel": 7,
        "title": "P2161 [SHOI2009]\u4f1a\u573a\u9884\u7ea6"
    },
    {
        "content": "[http://www.cnblogs.com/Melacau/p/luogu2161.html](http://www.cnblogs.com/Melacau/p/luogu2161.html)\n\n\n# ** fhq treap \u65e0\u65cbtreap **\n\n\n##\u89e3\u9898\u601d\u8def\n\n\n\u9898\u610f\u5c31\u662f\u53eb\u4f60\u7ef4\u62a4\u4e00\u6761\u65f6\u95f4\u8f74\uff0c\u652f\u63012\u79cd\u64cd\u4f5c:\n\n\n1)\u5220\u9664\u5f53\u524d\u65f6\u95f4\u8f74\u4e0a\u6240\u6709\u4e0e\u65b0\u533a\u95f4\u6709\u4ea4\u7684\u533a\u95f4\u8f93\u51fa\u5220\u9664\u4e2a\u6570\uff0c\u7136\u540e\u63d2\u5165\u65b0\u533a\u95f4\u3002\n\n\n2)\u67e5\u8be2\u5f53\u524d\u65f6\u95f4\u8f74\u4e0a\u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n\u5f88\u5bb9\u6613\u8003\u8651\u5230\u5c06\u6240\u6709\u7684\u533a\u95f4\u6309\u7167\u4e24\u4e2a\u7aef\u70b9\u53cc\u5173\u952e\u5b57\u6392\u5e8f(\u5148\u5de6\u8fd8\u662f\u53f3\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd)\u3002\n\n\n\u5f53\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\u65f6\uff0c\u548c\u4e4b\u524d\u7684\u51e0\u4f4ddalao\u6240\u8bf4\u7684\u4e00\u6837\uff0c\u6211\u4eec\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5728\u65b0\u533a\u95f4\u4e4b\u524d\u4e0e\u65b0\u533a\u95f4\u65e0\u4ea4\u7684\u533a\u95f4\u4e0e\u7b2c\u4e00\u4e2a\u5728\u65b0\u533a\u95f4\u540e\u4e0e\u65b0\u533a\u95f4\u65e0\u4ea4\u7684\u533a\u95f4\uff0c\u7136\u540e\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u95f4\u4e2a\u6570\uff0c\u8fd4\u56de\u540e\u5220\u9664\uff0c\u518d\u63d2\u5165\u65b0\u533a\u95f4\u3002\n\n\n\u67e5\u8be2\u5c31\u76f4\u63a5\u67e5\u8be2\u65f6\u95f4\u8f74\u4e0a\u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n## \u65e0\u65cbtreap(fhq treap)\u5b9e\u73b0\u65b9\u6cd5\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u67e5\u627e\u524d\u9a71\u548c\u67e5\u627e\u540e\u7ee7\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u5e73\u8861\u6811\u57fa\u7840\u64cd\u4f5c\uff0c\u4e0d\u591a\u8d58\u8ff0\u3002\u63a5\u4e0b\u6765\u5bf9\u4e8e\u627e\u5230\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5728\u6b64\u6267\u884csplit\u64cd\u4f5c\uff0c\u5c06\u6574\u68f5treap\u5206\u4e3a3\u90e8\u5206\uff0c\u5373\u4e3a\u5220\u53bb\u7684\u5404\u533a\u95f4\u4e4b\u524d\uff0c\u5220\u53bb\u7684\u533a\u95f4\uff0c\u5220\u53bb\u7684\u533a\u95f4\u4e4b\u540e\uff0c\u7136\u540e\u8fd4\u56de\u7684\u4e2a\u6570\u76f4\u63a5\u5c31\u662f\u5220\u53bb\u533a\u95f4\u8fd9\u4e00\u90e8\u5206\u7684root\u7684size\uff0c\u7136\u540e\u518d\u63d2\u5165\u65b0\u533a\u95f4\u540e\u76f4\u63a5\u4e0e\u5220\u53bb\u533a\u95f4\u4e4b\u524d\u4e0e\u5220\u53bb\u533a\u95f4\u4e4b\u540e\u5408\u5e76\u5373\u53ef\u3002\n\n\n\u64cd\u4f5c2\u5c31\u76f4\u63a5\u8fd4\u56de\u6574\u68f5treap\u7684root\u7684size\u5373\u53ef\u3002\n\n\n\u56e0\u4e3a\u65f6\u95f4\u6548\u7387\u662f\u7a33\u5b9a\u7684\\(  O( n \\log n ) \\)\uff0c\u6240\u4ee5\u76f8\u5bf9\u6bd4\u7528set\u7684\u5feb\u4e9b\u3002\u76ee\u524d\u662fRank1\n\n```cpp\n#include <stdio.h>\n#define r register\n#define getchar() (S==TT&&(TT=(S=BB)+fread(BB,1,1<<15,stdin),TT==S)?EOF:*S++)\nchar BB[1<<15],*S=BB,*TT=BB;\ninline int in(){\n    r int x=0; r bool f=0; r char c;\n    for (;(c=getchar())<'0'||c>'9';f=c=='-');\n    for (x=c-'0';(c=getchar())>='0'&&c<='9';x=(x<<3)+(x<<1)+c-'0');\n    return f?-x:x;\n}  \nnamespace Treap{\n    inline int Rand(){\n        static int x=23333;\n        return x^=x<<13,x^=x>>17,x^=x<<5;\n    }\n    struct task{int lt,rt;};\n    struct node{\n        node *ls,*rs;task v;int pri,sz;\n        node(task a):v(a){ls=rs=NULL;pri=Rand();sz=1;}\n        inline void up(){sz=(ls?ls->sz:0)+(rs?rs->sz:0)+1;}\n    }*root;\n    struct Droot{node *a,*b;};\n    inline int Size(node *x){return x?x->sz:0;}\n    node *merge(node *a,node *b){\\\\\u5408\u5e76\u64cd\u4f5c\n        if (!a) return b;\n        if (!b) return a;\n        if (a->pri<b->pri){\n            a->rs=merge(a->rs,b);\n            a->up();return a;\n        }else{\n            b->ls=merge(a,b->ls);\n            b->up();return b;\n        }\n    }\n    Droot split(node *a,int k){\\\\\u5206\u79bb\u64cd\u4f5c\n        if (!a) return (Droot){NULL,NULL};\n        r Droot y;if (Size(a->ls)>=k){\n            y=split(a->ls,k);\n            a->ls=y.b;a->up();y.b=a;\n        }else{\n            y=split(a->rs,k-Size(a->ls)-1);\n            a->rs=y.a;a->up();y.a=a;\n        }return y;\n    }\n    int find_pre(node *x,task a){\\\\\u67e5\u627e\u524d\u9a71\n        if (!x) return 0;\n        if (x->v.rt<a.lt) return find_pre(x->rs,a)+Size(x->ls)+1;\n        return find_pre(x->ls,a);\n    }\n    int find_nxt(node *x,task a){\\\\\u67e5\u627e\u540e\u7ee7\n        if (!x) return 0;\n        if (x->v.lt>a.rt) return find_nxt(x->ls,a);\n        return find_nxt(x->rs,a)+Size(x->ls)+1;\n    }\n    inline int new_task(){\n        r task a;a.lt=in(),a.rt=in();\n        r int L=find_pre(root,a),R=find_nxt(root,a);\n        r Droot y=split(root,R);r Droot x=split(y.a,L);\n        r int ans=Size(x.b);r node *newd=new node(a);\n        root=merge(merge(x.a,newd),y.b);return ans;\n    }\n    inline int Get_Ans(){return Size(root);}\n}\nint main(){\n    int q=in();while(q--){\n        char op=getchar(); while(op!='A'&&op!='B') op=getchar();\n        if (op=='A') printf(\"%d\\n\",Treap::new_task());\n        else printf(\"%d\\n\",Treap::Get_Ans());\n    }\n}\n```",
        "postTime": 1494788573,
        "uid": 28867,
        "name": "Melacau",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "## \u8fd9\u662f\u89e3\u91ca\u6811\u72b6\u6570\u7ec4\u9898\u89e3\u7684\n\u56e0\u4e3a\u5927\u4f6c\u6ca1\u6709\u5199\u6ce8\u91ca\uff0c\u6240\u4ee5\u770b\u7684\u633a\u8499\u7684\uff0c\u4f46\u662f\u5176\u5b9e\u601d\u8def\u662f\u6bd4\u8f83\u6e05\u695a\u7684\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5cA\uff0c\u9700\u8981\u77e5\u9053\u4e2d\u95f4\u6709\u591a\u5c11\u533a\u95f4\u662f\u9700\u8981\u5220\u9664\u7684\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u6765\u7ef4\u62a4\uff0c\u7528\u6811\u72b6\u6570\u7ec4$c[i]$,\u7ef4\u62a4\u4ee5i\u4e3a\u5de6\u7aef\u70b9\u7684\u533a\u95f4\u4e2a\u6570\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u5bf9\u4e8e\u4e00\u4e2a\u9700\u8981\u63d2\u5165\u7684\u533a\u95f4$[l,r]$\u6bcf\u4e00\u6b21\u4e8c\u5206\u67e5\u8be2\u5230\u5de6\u7aef\u70b9\u5728$0-r$\u6700\u53f3\u7684\u7aef\u70b9\uff0c\u7136\u540e\u5224\u65ad\u5f53\u524d\u7684\u7684\u533a\u95f4\u662f\u5426\u6709\u5305\u542b\u5728\u6211\u4eec\u8981\u63d2\u5165\u7684\u5927\u533a\u95f4\u7684\u90e8\u5206\uff0c\u5982\u679c\u6ca1\u6709\u5305\u542b\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u533a\u95f4\u4e00\u5b9a\u4e5f\u6ca1\u6709\u5305\u542b\u5927\u533a\u95f4\u7684\u90e8\u5206\u5185\u3002\n- \u8fd9\u4e2a\u662f\u53ef\u4ee5\u8bc1\u660e\u7684\uff0c\u5982\u679c\u5f53\u524d\u7684\u5de6\u7aef\u70b9\u6700\u53f3\u7684\u533a\u95f4$[l1,r1]$\u5982\u679c\u5728\u5de6\u4fa7\uff08\u5982\u679c\u4e0d\u5305\u542b\u5927\u533a\u95f4\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u5728\u5927\u533a\u95f4\u7684\u5de6\u7aef\uff0c\u56e0\u4e3a\u6211\u4eec\u679a\u4e3e\u7684\u5de6\u7aef\u70b9\u662f\u4ece$0-r$\u7684\uff09\uff0c\u5373$r1<l$,\u5047\u8bbe\u8fd8\u6709\u4e00\u4e2a\u533a\u95f4$[l2,r2]$,$l2<l1$\u5e76\u4e14$r2>l$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4$[l2,r2]$\u4e0d\u53ef\u80fd\u548c$[l1,r1]$\u540c\u65f6\u5b58\u5728\uff08$l1>l2$\u4e14$r1<r2$\uff09\u3002\n- \u6211\u4eec\u6bcf\u4e00\u6b21\u67e5\u8be2\u6700\u53f3\u8fb9\u7684\u7aef\u70b9\u53ea\u9700\u8981\u5bfb\u627e$ask(mid)==ask(r)$\u7684\u8282\u70b9\uff0c\u5373\u6700\u53f3\u8fb9\u7684\u7aef\u70b9\uff08\u5982\u679c\u4ee5$0-mid$\u4e3a\u5de6\u7aef\u70b9\u7684\u533a\u95f4\u4e2a\u6570\u521a\u597d\u7b49\u4e8e$0-r$\u4e3a\u5de6\u7aef\u70b9\u7684\u53d6\u533a\u95f4\u7684\u4e2a\u6570\uff0c\u90a3\u4e00\u5b9a\u662f\u6700\u53f3\u8fb9\u7684\uff09\u3002\u7136\u540e\u5220\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u5220\u53bb\u53ea\u9700\u8981\u7528\u6811\u72b6\u6570\u7ec4$add(mid,-1)$\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u4e00\u8fb9\u7edf\u8ba1\u5220\u53bb\u7684\u533a\u95f4\u6570\u3002\n- \u8bb0\u5f97\u8bb0\u5f55\u4e00\u4e2a\u5168\u5c40\u53d8\u91cfans\uff0c\u5b58\u50a8\u5f53\u524d\u5269\u4f59\u7684\u533a\u95f4\u6570\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint n,c[200010],ans=0,righ[200010];\nconst int N=200010;\nvoid add(int x,int y)\n{\n        for(;x<=N;x+=(x&-x))\n            c[x]+=y;\n}\nint ask(int x)\n{\n        int as=0;\n        for(;x;x-=(x&-x))\n            as+=c[x];\n        return as;\n}\nint main()\n{\n        cin>>n;\n        for(int i=1;i<=n;i++)\n        {\n            char temp;\n            cin>>temp;\n            if(temp=='A')\n            {\n                int st,ed,anss=0;\n                cin>>st>>ed;\t\t\t\n                while(1)\n                {\n                    int l=0,r=ed;\n                    while(l<r)\n                    {\n                        int mid=(l+r)>>1;\n                        if(ask(mid)<ask(ed))\n                            l=mid+1;\n                        else\n                            r=mid;\n                    }\n                    if(righ[l]>=st)\n                    {\n                        add(l,-1);\n                        anss++;\n                        ans--;\n                    }\n                    else\n                        break;\n                }\n                add(st,1);\n                righ[st]=ed,ans++;\n                cout<<anss<<endl;\n            }\n            else\n                cout<<ans<<endl;\n        }\t\n        return 0;\n}\n```\n\n",
        "postTime": 1569594899,
        "uid": 67886,
        "name": "\u5730\u8868\u6700\u5f3a\u7537\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u770b\u5230\u597d\u591a\u5e73\u8861\u6811\u7684\u9898\u89e3\u849f\u84bb\u5185\u5fc3\u662f\u5d29\u6e83\u7684\uff0c\u770b\u5230\u8fd9\u9053\u9898\u5b8c\u5168\u4e0d\u4f1a\u7528\u5e73\u8861\u6811\u53ea\u4f1a\u7528\u7ebf\u6bb5\u6811\u67d3\u8272\u2026\u2026\u2026\u2026\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9884\u8ba2\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\u9700\u8981\u5c06\u8fd9\u4e00\u6bb5\u533a\u95f4\u5185\u539f\u6709\u7684\u9884\u7ea6\u53bb\u6389\uff0c\u5e76\u4e14\u5c06\u8fd9\u6b21\u9884\u5b9a\u7684\u533a\u95f4\u67d3\u4e0a\u8272\u3002\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u77e5\u9053\u8fd9\u6837\u4e00\u4e2a\u4fe1\u606f\uff1a\u5bf9\u4e8e\u8fd9\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u6240\u6709\u9884\u7ea6\uff0c\u6700\u65e9\u662f\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u7684\uff08\u8bb0\u4e3aml\uff09 \u4ee5\u53ca \u6700\u665a\u5728\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\uff08\u8bb0\u4e3amr\uff09\u3002\u8fd9\u6837\u5b50\u6bcf\u6b21\u64cd\u4f5c\u6211\u4eec\u5148\u628aml~mr\u533a\u95f4\u67d3\u4e0a0\u7684\u989c\u8272\u6807\u8bb0\u4e3a\u6ca1\u6709\u8bbe\u7f6e\u9884\u7ea6\uff0c\u518d\u628a\u8fd9\u4e00\u6b21\u9884\u5b9a\u7684\u533a\u95f4\u67d3\u6210\u8fd9\u4e00\u6b21\u9884\u7ea6\u7684\u989c\u8272\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u8bb0\u5f55\u4e94\u4e2a\u4fe1\u606f\uff1a\u533a\u95f4\u5185\u9884\u7ea6\u4e2a\u6570cnt\uff0c\u533a\u95f4\u9884\u7ea6\u6700\u65e9\u5f00\u59cb\u65f6\u95f4ml\uff0c\u533a\u95f4\u9884\u7ea6\u6700\u665a\u7ed3\u675f\u65f6\u95f4mr\uff0c\u533a\u95f4\u5de6\u7aef\u70b9\u989c\u8272lc\uff0c\u533a\u95f4\u53f3\u7aef\u70b9\u989c\u8272rc\uff08\u7528\u4ee5\u533a\u95f4\u5408\u5e76\u65f6\u6c42\u89e3\u9884\u7ea6\u4e2a\u6570\uff09\u3002\n\n\u7531\u4e8e\u6211\u7684\u5199\u6cd5\u4e2d \u989c\u82720\u8868\u793a\u4e3a\u7a7a\u7f6e\u3001\u6ca1\u6709\u9884\u5b9a\u9884\u7ea6\uff0c\u8fd9\u6837\u5728\u7ebf\u6bb5\u6811\u6253\u6807\u8bb0\u7684\u65f6\u5019\u9700\u8981\u5206\u7c7b\u8ba8\u8bba \u672c\u6b21\u64cd\u4f5c\u4e3a\u67d3\u62100\u8272 \u8fd8\u662f \u9884\u5b9a\u9884\u7ea6\u3002\u4ee5\u53ca\u5728\u5408\u5e76\u533a\u95f4\u7684\u65f6\u5019\u662f\u5426\u4e3a0\u8272\u7684\u5c0f\u7ec6\u8282\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\u3002\n```cpp\n#include<cstdio>\n#define N 100200\n#define ls i<<1\n#define rs i<<1|1\nint min(int a,int b) {return a>b?b:a;}\nint max(int a,int b) {return a>b?a:b;}\nstruct data{\n\tint cnt,ml,mr,lc,rc;\n\tdata operator + (const data &b) {return (data){(cnt&&b.cnt)?cnt+b.cnt-(rc&&(rc==b.lc)):cnt+b.cnt,min(ml,b.ml),max(mr,b.mr),lc,b.rc};}\n\tvoid clear() {ml=mr=lc=rc=cnt=-1;}\n};\nstruct segmenttree{\n\tdata tree[N<<3],tag[N<<3];\n\tvoid pushdown(int i)\n\t{\n\t\tif (!~tag[i].cnt) return;\n\t\ttree[ls].lc=tree[ls].rc=tree[rs].lc=tree[rs].rc=tag[i].cnt;\n\t\tif (tag[i].cnt)\n\t\t{\n\t\t\ttree[rs].cnt=tree[ls].cnt=1;\n\t\t\ttree[rs].ml=tree[ls].ml=tag[i].ml;\n\t\t\ttree[rs].mr=tree[ls].mr=tag[i].mr;\n\t\t\ttag[ls]=tag[rs]=tag[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(tag[i].ml+tag[i].mr)>>1;\n\t\t\ttree[rs].cnt=tree[ls].cnt=0;\n\t\t\ttree[ls].ml=tag[i].ml;\n\t\t\ttree[rs].ml=mid+1;\n\t\t\ttree[rs].mr=tag[i].mr;\n\t\t\ttree[ls].mr=mid;\n\t\t\ttag[ls]=tag[rs]=tag[i];\n\t\t\ttag[ls].mr=mid;tag[rs].ml=mid+1;\n\t\t}\n\t\ttag[i].clear();\n\t}\n\tvoid update(int i,int l,int r,int L,int R,int c)\n\t{\n\t\tif (L<=l&&r<=R)\n\t\t{\n\t\t\ttree[i].lc=tree[i].rc=c;\n\t\t\ttag[i].cnt=c;\n\t\t\tif (c)\n\t\t\t{\n\t\t\t\ttree[i].cnt=1;\n\t\t\t\ttree[i].ml=L;tree[i].mr=R;\n\t\t\t\ttag[i].ml=L;tag[i].mr=R;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttree[i].cnt=0;\n\t\t\t\ttree[i].ml=l;tree[i].mr=r;\n\t\t\t\ttag[i].ml=l;tag[i].mr=r;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tpushdown(i);\n\t\tif (L<=mid) update(ls,l,mid,L,R,c);\n\t\tif (mid<R) update(rs,mid+1,r,L,R,c);\n\t\ttree[i]=tree[ls]+tree[rs];\n\t}\n\tdata query(int i,int l,int r,int L,int R)\n\t{\n\t\tif (L<=l&&r<=R) return tree[i];\n\t\tpushdown(i);\n\t\tint mid=(l+r)>>1;\n\t\tif (mid<L) return query(rs,mid+1,r,L,R);\n\t\tif (mid>=R) return query(ls,l,mid,L,R);\n\t\treturn query(ls,l,mid,L,mid)+query(rs,mid+1,r,mid+1,R);\n\t}\n\tvoid build(int i,int l,int r)\n\t{\n\t\ttag[i].clear();\n\t\tif (l==r)\n\t\t{\n\t\t\ttree[i].cnt=0;\n\t\t\ttree[i].lc=tree[i].rc=0;\n\t\t\ttree[i].ml=tree[i].mr=l;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ls,l,mid);build(rs,mid+1,r);\n\t\ttree[i]=tree[ls]+tree[rs];\n\t}\n}cof;\nint main()\n{\n\tint n,l,r;char a;\n\tscanf(\"%d\",&n);\n\tcof.build(1,1,100000);\n\twhile(n--)\n\t{\n\t\twhile(a=getchar()) if (a=='A'||a=='B') break;\n\t\tif (a=='A')\n\t\t{\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tdata tmp=cof.query(1,1,100000,l,r);\n\t\t\tprintf(\"%d\\n\",tmp.cnt);\n\t\t\tcof.update(1,1,100000,tmp.ml,tmp.mr,0);\n\t\t\tcof.update(1,1,100000,l,r,n);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdata tmp=cof.query(1,1,100000,1,100000);\n\t\t\tprintf(\"%d\\n\",tmp.cnt);\n\t\t} \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1523776174,
        "uid": 45876,
        "name": "\u51c4\u9b49",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "#### \u7ebf\u6bb5\u6811\u67d3\u8272~~\u677f\u5b50\u9898~~\n##### \u524d\u9762\u7684dalao\u4eec\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\n\u2018A\u2019\u64cd\u4f5c\u8981\u6267\u884c\u4e24\u4e2a\u52a8\u4f5c\uff1a\u67e5\u8be2\u533a\u95f4[x,y]\u5185\u7684\u989c\u8272\u4e2a\u6570\uff0c\u5c06\u533a\u95f4[x,y]\u67d3\u8272\uff0c\u5206\u522b\u5bf9\u5e94\u7740query\u548cupdate\u51fd\u6570\n\n\u2018B'\u64cd\u4f5c\u5219\u662f\u8fd4\u56de\u6574\u4e2a\u533a\u95f4\u7684\u989c\u8272\u4e2a\u6570\uff0c\u76f4\u63a5\u8f93\u51fa\u5c31\u884c\u4e86\n\n#### \u8bf4\u4e00\u4e0b\u53d8\u91cf\n##### t\uff1a\u5b83\u662f\u7528\u6765\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff0c\u6709\u4e09\u79cd\u4e0d\u540c\u72b6\u6001\n\n-1\uff1a\u7ba1\u8f96\u533a\u95f4\u5185\u6709\u591a\u4e2a\u4e0d\u51b2\u7a81\u7684\u9884\u7ea6\u6216\u8005\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u9884\u7ea6\u4f46\u5176\u6ca1\u6709\u8986\u76d6\u6574\u4e2a\u533a\u95f4\uff1b\n\n0\uff1a\u65e0\u9884\u7ea6\uff1b\n\nk(k>=1)\uff1a\u6709\u4e00\u4e2a\u6807\u53f7\u662fk\u7684\u9884\u7ea6\n\n##### ans\uff1a \u6574\u4e2a\u533a\u95f4\u6709\u6548\u7684\u9884\u7ea6\u4e2a\u6570\n\n##### cnt\uff1a \u6bcf\u6b21 'A' \u64cd\u4f5c\u8981\u5220\u9664\u6389\u7684\u9884\u7ea6\u4e2a\u6570\n\n##### vis\uff1a vis[i]\u8868\u793a\u6807\u53f7\u4e3ai\u7684\u9884\u7ea6\u88ab\u62d2\u7edd\u4e86,\u9632\u6b62\u52a0\u4e0a\u8981\u62d2\u7edd\u7684\u9884\u7ea6\n\n\n~~\u7136\u540e\u5c31\u6ca1\u4e86~~\n```cpp\n//\u5934\u6587\u4ef6\u592a\u957f\uff0c\u5220\u4e86qwq\n#define mid (s+e>>1)\n#define ls(x) x<<1\n#define rs(x) x<<1|1\nusing namespace std;\nconst int N = 200010;\nint t[N << 2];\nint tag[N << 2];\nbitset<N> vis;\nint ans, cnt;\ninline void pushdown(int p, int s, int e)\n{\n\tif (!tag[p])return;\n\ttag[ls(p)] = tag[rs(p)] = tag[p];\n\tt[ls(p)] = t[rs(p)] = tag[p], tag[p] = 0;\n}\nvoid update(int p, int s, int e, int l, int r, int v)\n{\n\tif (l <= s && e <= r)\n\t\ttag[p] = t[p] = v;\n\telse\n\t{\n\t\tpushdown(p, s, e);\n\t\tif (l <= mid)\n\t\t\tupdate(ls(p), s, mid, l, r, v);\n\t\tif (r > mid)\n\t\t\tupdate(rs(p), mid + 1, e, l, r, v);\n\t\tif (t[ls(p)] == t[rs(p)]) //\u5de6\u53f3\u513f\u5b50\u4e0d\u7ba1\u4ec0\u4e48\u989c\u8272\uff0c\u53ea\u8981\u4e0d\u540c\u5c31\u662f-1\uff1b\n\t\t\tt[p] = t[ls(p)];//\u76f8\u540c\u5c31\u968f\u4fbf\u9009\u4e00\u4e2a\n\t\telse\n\t\t\tt[p] = -1;\n\t}\n}\nvoid query(int p, int s, int e, int l, int r)\n{\n\tif (l <= s && e <= r)\n\t{\n\t\tif (!t[p])return;\n\t\tif (t[p] < 0)//\u533a\u95f4\u5185\u5b58\u5728\u591a\u4e2a\u9884\u7ea6\u5c31\u7ee7\u7eed\u4e0b\u4f20\u6807\u8bb0\n\t\t{\n\t\t\tpushdown(p, s, e);\n\t\t\tif(l<=mid)query(ls(p), s, mid, l, r);\n\t\t\tif (r > mid)query(rs(p), mid + 1, e, l, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!vis[t[p]])\n\t\t\t\tans--, vis[t[p]] = 1, cnt++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tpushdown(p, s, e);\n\t\tif (l <= mid)query(ls(p), s, mid, l, r);\n\t\tif (r > mid)query(rs(p), mid + 1, e, l, r);\n\t}\n}\nint main()\n{\n\tint n, tmp, m, len;\n\tint x, y;\n\tchar op;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\" %c\", &op);\n\t\tif (op == 'A')\n\t\t{\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tquery(1, 1, 200000, x, y);\n\t\t\tprintf(\"%d\\n\", cnt);\n\t\t\tcnt = 0;//\u8bb0\u5f97\u91cd\u7f6e\n\t\t\tupdate(1, 1, 200000, x, y, i);\n\t\t\tans++;//\u56e0\u4e3a\u521a\u521a\u53c8\u5bf9[x,y]\u67d3\u4e86\u8272\uff0c\u6240\u4ee5\u8981+1\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n\n",
        "postTime": 1573207669,
        "uid": 208668,
        "name": "alicealice",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u4eba\u751f\u7b2c\u4e00\u6b21\u4e0d\u770b\u9898\u89e3\u8fc7\u7d2b\u9898\uff08\u6109\u60a6\uff09\n\n# ~~\u4f20\u64ad\u5206\u5757\u90aa\u6076\u601d\u60f3~~\n\n~~\u5176\u5b9e\u53ea\u662f\u7ebf\u6bb5\u6811\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6253\u554a\u6454~~\n\n\u56e0\u4e3a\u4e0d\u77e5\u9053\u8f93\u5165startend\u7684\u6700\u5927\u4f4d\u7f6e\uff0c\u6240\u4ee5\u76f4\u63a5\u628a100000\u4e2a\u4f4d\u7f6e\u5206\u6210316\u4e2a\u5757\u5757\uff08\u4e5f\u5c31\u662fsqrt(100000)\uff09\n\n### \u73b0\u5728\u9700\u8981\u4e00\u4e9b\u8bb0\u5f55\u91cd\u8981\u4fe1\u606f\u7684\u6570\u7ec4\u548c\u53d8\u91cf\uff1a\n\nb[i]\uff1a\u7b2ci\u53f7\u4f4d\u7f6e\u5c5e\u4e8eb[i]\u53f7\u5757\u5757\n\nf[i]\uff1a\u7b2ci\u53f7\u5757\u5757\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u662ff[i]\n\n**c[i]\uff1a\u5982\u679ci\u53f7\u4e3a\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684\u5f00\u5934\uff0c\u90a3\u4e48c[i]\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u5c3e\uff0c\u5426\u5219c[i]=0**\n\n**h[i]\uff1a\u7b2ci\u53f7\u5757\u5757\u4e2dc[i]!=0\u7684i\u7684\u6570\u91cf\uff0c\u5c31\u662f\u7b2ci\u53f7\u5757\u5757\u5305\u542b\u7684\u8d77\u70b9\u4e2a\u6570**\n\nans\uff1a\u6bcf\u4e00\u6b21A\u64cd\u4f5c\u5220\u9664\u4f1a\u8bae\u8ba1\u6570\n\ntot\uff1a\u5269\u4f59\u6709\u6548\u4f1a\u8bae\u8ba1\u6570\uff0c\u7528\u4e8eB\u64cd\u4f5c\n\nl\uff1a~~\u6bd2\u7624\u4f18\u5316~~\u76ee\u524d\u7528\u5230\u7684\u6700\u5de6\u7684\u5757\u5757\n\n## \u6d41\u7a0b\n\n\u5173\u4e8e\u4e00\u4e2aA\u64cd\u4f5c\uff0c\u4f1a\u8f93\u5165x,y\u8868\u793a\u5f00\u59cb\u548c\u7ed3\u675f\n\n\u5982\u679cx,y\u5c5e\u4e8e\u4e00\u4e2a\u5757\u5757\uff0c\u90a3\u4e48i\u76f4\u63a5\u4ecex\u5230y\u66b4\u529b\u626b\u6709\u6ca1\u6709c[i]!=0\uff0c\u6709\u5c31\u5220\u6389\n\n~~\u5426\u5219\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86~~\n\n\u9996\u5148\u88abx,y\u6240\u5939\u7684\u5b8c\u6574\u5757\u5757\u90fd\u4e0d\u80fd\u5b58\u6d3b\uff0c\u4f7f\u7528memset\u6e05\u9664\u4e4b\u95f4\u7684c[i]\uff0c\u5728i\u4eceb[x]+1\u5230b[y]-1\u626b\u6389\u6240\u6709\u7684h[i]\n\n\u7136\u540e\u66b4\u529b\u626bx\u6240\u5728\u5757\u5757\u4e2dx\u5230\u6700\u540e\u6e05\u9664c[i]\uff0cy\u6240\u5728\u5757\u5757\u4e2d\u5f00\u5934\u5230y\u6e05\u9664c[i]\u5373\u53ef\n\n### \u4e0d\u8fd8\u6ca1\u6709\u7ed3\u675f\n\n\u4e07\u4e00\u51fa\u73b0\u5f00\u59cb\u6bd4x\u65e9\uff0c\u7ed3\u675f\u53c8\u6bd4x\u665a\u7684\u4f1a\u8bae\u600e\u4e48\u529e\u5462\n\n\u6839\u636e\u9898\u610f\u4e0d\u80fd\u6709\u51b2\u7a81\u4f1a\u8bae\n\n\u6240\u4ee5\u53ea\u9700\u4ecex\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2ac[i]!=0\uff0c\u7136\u540e\u5224\u65adc[i]\u662f\u5426>=0\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u4e0d\u7528\u7ba1\n\n## \u4ee3\u7801\n\n\u51fd\u6570clr(i)\u6e05\u9664c[i]\u5e76\u8bb0\u5f55\u7b54\u6848\n```cpp\ninline void clr(int i){--h[b[i]],c[i]=0,++ans,--tot;}\n```\n\n\u51fd\u6570wrk()\u5904\u7406x\u5de6\u8fb9c[i]\u60c5\u51b5\n```cpp\ninline void wrk(){\n\tif(h[b[x]]){\n\t\tFrn_(i,x-1,f[b[x]])if(c[i]){\n    \t\tif(c[i]>=x)clr(i);\n            return;\n\t\t}\n\t}\n\tFrn_(i,b[x]-1,l)if(h[i])Frn_(j,f[i+1]-1,f[i])if(c[j]){\n\t\tif(c[j]>=x)clr(j);\n\t\treturn;\n\t}\n}\n```\n\u5b8c\u6574\u4ee3\u7801\n```cpp\n//This program is written by Bring.\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define Rd(a) (a=read())\ninline int read(){\n    register int x;register char c(getchar());register bool k;\n    while((c<'0'||c>'9')&&c^'-')if((c=getchar())==EOF)exit(0);\n    if(c^'-')x=c&15,k=1;else x=0,k=0;\n    while(c=getchar(),c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c&15);\n    return k?x:-x;\n}\nvoid wr(register int a){\n    if(a<0)putchar('-'),a=-a;\n    if(a<=9)putchar(a|'0');\n    else wr(a/10),putchar((a%10)|'0');\n}\n#define Ps putchar(' ')\n#define Pe putchar('\\n')\n#define Frn0(i,a,b) for(register int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(register int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(register int i(a);i>=(b);--i)\n#define Fre(a,i) for(register int i(hd[a]);i;i=nxt[i])\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define INF signed(0x3f3f3f3f)\n#define NINF signed(0xc3c3c3c3)\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (100001)\n#define T (316)\nint n,x,y,l,tot,b[N]{-1},c[N],f[N/T+10],h[N/T+10],ans;\nchar o;\ninline void clr(int i){--h[b[i]],c[i]=0,++ans,--tot;}\ninline void wrk();\nsigned main(){\n    Frn0(i,1,N)if((b[i]=i/T)!=b[i-1])f[l=b[i]]=i;\n    f[++l]=N,Rd(n);\n    while(n--){\n        while(o=getchar(),o^'A'&&o^'B');\n        if(o=='A'){\n            Rd(x),Rd(y),ans=0;\n            if(b[x]==b[y]){Frn1(i,x,y)if(c[i])clr(i);}\n            else{\n            \tmemset(c+f[b[x]+1],0,sizeof(int)*(f[b[y]]-f[b[x]+1]));\n            \tFrn0(i,b[x]+1,b[y])ans+=h[i],tot-=h[i],h[i]=0;\n            \tFrn0(i,x,f[b[x]+1])if(c[i])clr(i);\n\t\t\t\tFrn1(i,f[b[y]],y)if(c[i])clr(i);\n\t\t\t}\n\t\t\tif(l<=b[x])wrk();else l=b[x];\n\t\t\twr(ans),Pe,c[x]=y,++h[b[x]],++tot;\n        }else wr(tot),Pe;\n    }\n    exit(0);\n}\ninline void wrk(){\n\tif(h[b[x]]){\n\t\tFrn_(i,x-1,f[b[x]])if(c[i]){\n    \t\tif(c[i]>=x)clr(i);\n            return;\n\t\t}\n\t}\n\tFrn_(i,b[x]-1,l)if(h[i])Frn_(j,f[i+1]-1,f[i])if(c[j]){\n\t\tif(c[j]>=x)clr(j);\n\t\treturn;\n\t}\n}\n```\n\u65f6\u95f4O(n*sqrt(n))\uff0c\u7a7a\u95f4O(n)\n\n\u8bc4\u6d4b\uff1a\u7528\u65f6: 635ms / \u5185\u5b58: 1412KB\uff08\u597d\u50cf\u6bd4\u7ebf\u6bb5\u6811\u8fd8\u5feb~~\u795e\u5947~~\uff09",
        "postTime": 1552651414,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "##Splay \u4f38\u5c55\u6811\n\n\u697c\u4e0b\u601d\u8def\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u56e0\u4e3a\u7528\u4e86Splay\uff08\u849f\u84bb\u8868\u793a\u4e0d\u4f1afhq Treap\uff09\u3002\n\n**A \u64cd\u4f5c\uff1a**\n\nSplay\u7684\u67e5\u524d\u9a71\u540e\u7ee7\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5220\u9664\u4e0e\u5f53\u524d\u533a\u95f4\u76f8\u4ea4\u7684\u6240\u6709\u533a\u95f4\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u63d0\u53d6\u5e8f\u5217\u533a\u95f4\u7684\u65b9\u6cd5\u6765\u641e\uff1a\n\n\u5148\u628a\u524d\u9a71\u65cb\u5230\u6839\u8282\u70b9\uff0c\u518d\u628a\u540e\u7ee7\u65cb\u5230\u6839\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u540e\u7ee7\u7684\u5de6\u5b50\u6811\u5373\u4e3a\u88ab\u5220\u9664\u6240\u6709\u533a\u95f4\u7684\u96c6\u5408\uff0c\u7136\u540e\u76f4\u63a5\u780d\u6389\u8fd9\u6761\u8fb9\uff0c\u5e76\u8fd4\u56de\u540e\u7ee7\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n**B \u64cd\u4f5c\uff1a**\n\n\u548cfhq Treap \u4e00\u6837\uff0c\u8fd4\u56de\u5f53\u524d\u5e73\u8861\u6811\u7684\u5927\u5c0f\u3002\n\n\u6700\u540e\u9644\u4e0a**\u4ee3\u7801**\uff0cSplay\u76ee\u524d379ms\uff08\u5947\u8ff9\u822cRank1\uff09\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 2e5 + 5;\nint lc[N], rc[N], fa[N], sze[N], fl[N], fr[N];\nint rt, Q, T;\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline bool Wrt(const int x) {return rc[fa[x]] == x;}\ninline void Push(const int x) {sze[x] = sze[lc[x]] + sze[rc[x]] + 1;}\ninline void Rot(const int x)\n{\n    int y = fa[x], z = fa[y];\n    int b = (lc[y] == x ? rc[x] : lc[x]);\n    fa[x] = z; fa[y] = x;\n    if (b) fa[b] = y;\n    if (z) (lc[z] == y ? lc[z] : rc[z]) = x;\n    if (lc[y] == x) rc[x] = y, lc[y] = b;\n     else lc[x] = y, rc[y] = b;\n    Push(y);\n}\ninline void Splay(const int x, const int tar)\n{\n    while (fa[x] != tar)\n    {\n        if (fa[fa[x]] != tar)\n         Wrt(x) == Wrt(fa[x]) ? Rot(fa[x]) : Rot(x);\n        Rot(x);\n    }\n    Push(x);\n    if (!tar) rt = x;\n}\ninline void Ins(const int str, const int edt)\n{\n    int x = rt, y = 0, dir;\n    while (x)\n    {\n        ++sze[y = x];\n        if (str < fl[x]) x = lc[x], dir = 0;\n         else x = rc[x], dir = 1;\n    }\n    fl[x = ++T] = str; fr[x] = edt; sze[x] = 1; fa[x] = y;\n    if (y) (dir == 0 ? lc[y] : rc[y]) = x;\n    Splay(x, 0);\n}\ninline int Pre(const int str)\n{\n    int x = rt, pr;\n    while (x)\n    {\n        if (fr[x] < str) pr = x, x = rc[x];\n         else x = lc[x];\n    }\n    return pr;\n}\ninline int Suf(const int edt)\n{\n    int x = rt, sf;\n    while (x)\n    {\n        if (fl[x] > edt) sf = x, x = lc[x];\n         else x = rc[x];\n    }\n    return sf;\n}\ninline int Que(const int str, const int edt)\n{\n    int tx = Pre(str), ty = Suf(edt);\n    Splay(tx, 0); Splay(ty, tx); int tz = lc[ty];\n    lc[ty] = fa[tz] = 0; Push(ty); Push(tx);\n    return sze[tz];\n}\nint main()\n{\n    Ins(-Maxn, -Maxn); Ins(Maxn, Maxn); \n    // \u6811\u4e2d\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u8981\u8bbe\u7acb\u9996\u5c3e\u54e8\u5175 \n    Q = get(); char tp;\n    while (Q--)\n    {\n        while ((tp = getchar()) != 'A' && tp != 'B');\n        if (tp == 'A') \n        {\n            int u = get(), v = get();\n            put(Que(u, v)), putchar('\\n');\n            Ins(u, v);\n        }\n        else put(sze[rt] - 2), putchar('\\n');\n        // \u6700\u540e\u8ba1\u7b97\u7684\u65f6\u5019\u5f53\u7136\u4e5f\u8981\u6263\u9664\u54e8\u5175 \n    }\n    return 0;\n}\n```",
        "postTime": 1498741580,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u9898\u89e3\u662f\u7528vector\u505a\u7684\uff0c\u6240\u4ee5\u5c31\u6765\u53d1\u4e2a\u9898\u89e3\n\n\n\u9898\u5916\u8bdd\uff1a\u6211\u7684\u4ee3\u7801\u6682\u65f6\u6700\u4f18\u89e3\u7b2c\u4e09  ~~\uff08\u6211\u7b11\u7206\uff09~~\n\n\u8bf4\u662f\u7528vector\u5176\u5b9e\u662fvector\u5145\u5f53\u5e73\u8861\u6811\n\n\u5373\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u4e0d\u964d\u7684vector\n\n\u4ee3\u7801\u4e0d\u50cf\u81ea\u5df1\u5199\u7684\u90a3\u4e48\u957f\uff0c\u4e5f\u6ca1\u6709set\u90a3\u4e48\u65e0\u8111\n\n### \u6b63\u9898\n\n\u56e0\u4e3a\u8981\u5148\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u4e0d\u964d\u7684vector,\u6240\u4ee5\u6211\u4eec\u91cd\u8f7d\u5c0f\u4e8e\u53f7,\u6211\u4eec\u5b9a\u4e49\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4 $X,Y$\uff0c\u5982\u679c\u6709$X.r<Y.l$ \uff08\u4e24\u4e2a\u533a\u95f4\u6ca1\u6709\u4ea4\u70b9,\u4e14$Y$\u5728$X$\u7684\u53f3\u8fb9\uff09\u5219$X<Y$\n\n\u4ee3\u7801:\n\n```cpp\nstruct Range\n{\n\tint l,r;\n\tbool operator <(const Range &x)const\n\t{\n        return r<x.l;\n    }\n};\n```\n\n\u663e\u7136 \u82e5$X>Y$ \u4e0e$X<Y$\u540c\u65f6\u4e0d\u6210\u7acb,\u90a3\u4e48$X$\u4e0e$Y$\u6709\u4ea4\u96c6\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6211\u4eec\u6bcf\u6b21\u5220\u9664\u4e0e$X$\u6709\u4ea4\u70b9\u7684\n\n\u5373\u5220\u9664\u533a\u95f4$X$\u7684\u524d\u9a71\uff08\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e$X$\u7684\uff09\u5230$X$\u7684\u540e\u7ee7\n\n(\u7b2c\u4e00\u4e2a\u5927\u4e8e$X$\u7684)\u7684\u524d\u4e00\u4e2a\n\n\u5373\n```cpp\na.erase(lower_bound(a.begin(),a.end(),X),\n\tupper_bound(a.begin(),a.end(),X));//erase\u5de6\u95ed\u53f3\u5f00\n```\n\n\u7136\u540e\u5c06\u8fd9\u4e2a\u533a\u95f4\u63d2\u5230vector\u91cc\n\n```cpp\na.insert(lower_bound(a.begin(),a.end(),X),X);\n```\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5c31\u76f4\u63a5\u8f93\u51fa$a.size()$\u5c31\u597d\u4e86\n\n---\n\n\u4ee3\u7801\uff08\u4e5f\u8bb8\u6709\u70b9\u4e11\uff0c\u4f46\u597d\u7406\u89e3\uff09~~\u522b\u5fd8\u8bb0\u70b9\u8d5e~~\n\n```cpp\n#include<bits/stdc++.h>\n#define Wl(x) {W(x);puts(\"\");}\nusing namespace std;\ninline int R()\n{\n\tchar c;int res;\n\twhile((c=getchar())>'9'||c<'0');res=c-'0';\n\twhile((c=getchar())>='0'&&c<='9') res=res*10+c-'0';\n\treturn res;\n}\nvoid W(int x)\n{\n\tif(x>9) W(x/10);\n\tputchar('0'+x%10);\n}//\u4ee5\u4e0a\u4e3a\u8bfb\u5165\u8f93\u51fa\u4f18\u5316 \nstruct Range\n{\n\tint l,r;\n\tbool operator <(const Range &x)const\n\t{\n        return r<x.l;\n    }\n}A;//\u5b9a\u4e49\u7ed3\u6784\u4f53 \nvector<Range>a;int n;\nint main()\n{\n\tn=R();char op;int l,r;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\twhile((op=getchar())!='A'&&op!='B');\n\t\tif(op=='A')\n\t\t{\n\t\t\tA.l=R();A.r=R();\n\t\t\tl=lower_bound(a.begin(),a.end(),A)-a.begin();//\u524d\u9a71 \n\t\t\tr=upper_bound(a.begin(),a.end(),A)-a.begin();//\u540e\u7ee7 \n\t\t\tWl(r-l); \n\t\t\ta.erase(a.begin()+l,a.begin()+r);\n\t\t\ta.insert(a.begin()+l,A);\n\t\t}\n\t\telse Wl(a.size());\n\t}\n}\n```\n",
        "postTime": 1576891793,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\u4f20\u9001\u95e8:[P2161](http://www.cnblogs.com/GoldenPotato/p/8981895.html)\n\n\n------------\n\n##   splay\n\n\n~~\u7684\u786e\u6709\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5,\u4f46\u6211\u505a\u7684\u65f6\u5019\u8111\u6b8b\u6ca1\u60f3\u5230~~\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5199\u4e00\u4e2a\u7c7b\u4f3cNOIP2017D2T3\u5217\u961f\u90a3\u9053\u9898\u90a3\u6837\u7684\u5e26\u5206\u88c2\u7684\u5e73\u8861\u6811\n\n\u8003\u8651\u7528splay\u7ef4\u62a4\u6bcf\u4e00\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\n\n\u56e0\u4e3a\u6211\u4eec\u9898\u76ee\u7684\u610f\u601d\u4fdd\u8bc1\u4e86\u5728\u5e73\u8861\u6811\u91cc\u7684\u7ebf\u6bb5\u4e0d\u76f8\u4ea4,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u7684\u6027\u8d28\n\n \n\n\u6bcf\u4e00\u6761\u7ebf\u6bb5\u4f5c\u4e3a\u4e00\u4e2a\u70b9\u653e\u5165\u5e73\u8861\u6811\u4e2d,\u7ef4\u62a4\u5176L,R,\u5e76\u8bb0\u5f55\u5b83\u662f\u7a7a\u767d\u7ebf\u6bb5\u8fd8\u662f\u6709\u9884\u7ea6\u7684\u7ebf\u6bb5\n\n\u6211\u4eec\u8981\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4,\u8bbe\u8fd9\u4e2a\u533a\u95f4\u4e3aLX,RX\n\n\u6211\u4eec\u76ee\u7684\u662f\u5c06\u4e0e[LX,RX]\u8fd9\u4e2a\u7ebf\u6bb5\u76f8\u4ea4\u7684\u7ebf\u6bb5\u63d0\u53d6\u51fa\u6765\n\n#### \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u63d0\u53d6\u53f3\u7aef\u70b9<LX\u7684\u7ebf\u6bb5\u5230\u6839,\u5de6\u7aef\u70b9>RX\u7684\u7ebf\u6bb5\u5230\u6839\u7684\u4e0b\u9762\n\n\u6839\u636e\u6211\u4eec\u5e73\u8861\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u7ecf\u9a8c,\u6839\u7684\u53f3\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5373\u4e3a\u88ab\u5305\u62ec\u7684\u7ebf\u6bb5\n\n\u56fe\u793a\u5982\u4e0b\n\n![\u56fe\u793a](https://cdn.luogu.com.cn/upload/pic/18444.png)\n\n \n\n \n\n \u63a5\u4e0b\u6765\u7684\u5c31\u5f88\u66b4\u529b\u4e86\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u4e00\u904d\u88ab\u5305\u62ec\u7684\u5b50\u6811,\u7edf\u8ba1\u4e00\u4e0b\u6709\u591a\u5c11\u6761\u7ebf\u6bb5\u662f\u5df2\u7ecf\u9884\u7ea6\u8fc7\u7684\n\n#### \u56e0\u4e3a\u6211\u4eec\u4f1a\u628a\u4e00\u6574\u9897\u5b50\u6811\u6362\u62103\u4e2a\u70b9,\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a\u610f\u4e49\u4e0b\u8fd8\u662fnlogn\u7684\n\n \n\n\u7136\u540e\u76f4\u63a5\u628a\u4e00\u6574\u9897\u5b50\u6811\u5220\u6389,\u6362\u4e0a\u6211\u4eec\u65b0\u7684\u7ebf\u6bb5:\n\n#### [\u524d\u9a71+1,LX-1],\u7a7a\u767d\n\n#### [LX,RX],\u6709\u9884\u7ea6\n\n#### [RX+1,\u540e\u7ee7-1],\u7a7a\u767d\n\n\u6ce8\u610f\u8ba8\u8bba\u662f\u5426\u5b58\u5728\u90a3\u4e24\u6761\u7a7a\u767d\u5c31\u597d\n\n \n\n#### \u9884\u5904\u7406\u52a0\u5165[0,LEN-MAX]\u5c31OK\u4e86\n\n\n------------\n\n\n### Code\n[\u66b4\u529b\u53ca\u6570\u636e\u751f\u6210\u5668](http://www.cnblogs.com/GoldenPotato/p/8981895.html)\n```cpp\n//Luogu P2161 [SHOI2009]\u4f1a\u573a\u9884\u7ea6\n//May,2ed,2018\n//splay\u7ef4\u62a4\u7c7b\u533a\u95f4\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=800000+1000;\nconst int inf=0x3f3f3f3f;\nconst int TMAX=100000;\nstruct SPLAY\n{\n\t#define root son[0][1]\n\tint son[N][2],fa[N],l[N],r[N],tot;\n\tbool used[N];\n\tinline void rotate(int x,int type)\n\t{\n\t\tint y=fa[x],z=fa[y];\n\t\tfa[x]=z,son[z][y==son[z][1]]=x;\n\t\tfa[son[x][type]]=y,son[y][!type]=son[x][type];\n\t\tfa[y]=x,son[x][type]=y;\n\t}\n\tvoid splay(int x,int to)\n\t{\n\t\twhile(fa[x]!=to)\n\t\t{\n\t\t\tif(x==son[fa[x]][fa[x]==son[fa[fa[x]]][1]] and fa[fa[x]]!=to)\n\t\t\t\trotate(fa[x],x==son[fa[x]][0]),\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t\telse\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t}\n\t}\n\tinline void Init()\n\t{\n\t\troot=++tot,fa[root]=0;\n\t\tson[root][1]=++tot,fa[tot]=root;\n\t\tl[tot]=1,r[tot]=TMAX;\n\t\tson[tot][1]=++tot,fa[tot]=son[root][1];\n\t\tl[tot]=r[tot]=TMAX+1;\n\t}\n\tint FindPre(int x)//\u8fd4\u56de\u4f4d\u7f6e\n\t{\n\t\tint now=root,ans=-inf,p=0;\n\t\twhile(now!=0)\n\t\t\tif(r[now]>=x)\n\t\t\t\tnow=son[now][0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(r[now]>ans)\n\t\t\t\t\tans=r[now],p=now;\n\t\t\t\tnow=son[now][1];\n\t\t\t}\n\t\treturn p;\n\t}\n\tint FindNxt(int x)//\u8fd4\u56de\u4f4d\u7f6e\n\t{\n\t\tint now=root,ans=inf,p=0;\n\t\twhile(now!=0)\n\t\t\tif(l[now]>x)\n\t\t\t{\n\t\t\t\tif(l[now]<ans)\n\t\t\t\t\tans=r[now],p=now;\n\t\t\t\tnow=son[now][0];\n\t\t\t}\n\t\t\telse\n\t\t\t\tnow=son[now][1];\n\t\treturn p;\n\t}\n\tint Count(int x)\n\t{\n\t\tif(x==0) return 0;\n\t\tint ans=0;\n\t\tif(used[x]==true) ans++;\n\t\tans+=Count(son[x][0]);\n\t\tans+=Count(son[x][1]);\n\t\treturn ans;\n\t}\n\tint Change(int L,int R)\n\t{\n\t\tsplay(FindPre(L),0);\n\t\tsplay(FindNxt(R),root);\n\t\tint now=son[son[root][1]][0],ans=Count(now);\n\t\tnow=++tot,son[son[root][1]][0]=now,fa[now]=son[root][1];\n\t\tl[now]=L,r[now]=R,used[now]=true;\n\t\tif(r[root]<L-1)\n\t\t{\n\t\t\tfa[++tot]=now,son[now][0]=tot;\n\t\t\tl[tot]=r[root]+1,r[tot]=L-1;\n\t\t}\n\t\tif(l[son[root][1]]>R+1)\n\t\t{\n\t\t\tfa[++tot]=now,son[now][1]=tot;\n\t\t\tl[tot]=R+1,r[tot]=r[son[root][1]]-1;\n\t\t}\n\t\treturn ans;\n\t}\n\t#undef root\n}s;\nint n,ans;\nint main()\n{\n\t//freopen(\"appointment.in\",\"r\",stdin);\n\t//freopen(\"appointment.out\",\"w\",stdout);\n\tn=read();\n\ts.Init();\n\tchar OP[2];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",OP+1);\n\t\tif(OP[1]=='A')\n\t\t{\n\t\t\tint l=read(),r=read(),temp=s.Change(l,r);\n\t\t\tans=ans+1-temp;\n\t\t\tprintf(\"%d\\n\",temp);\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n\n\n```",
        "postTime": 1525259168,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "**\n\u4e3b\u8981\u662flogn\u63d2\u5165 logn\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e \u4f7f\u5f97\u603b\u590d\u6742\u5ea6\u5728nlogn\n\n\u6211\u89c9\u5f97C++\u7684STL\u6765\u7684\u6bd4\u8f83\u5feb\uff0c\u4f46\u662f\u8c01\u77e5\u9053\u6211\u5bf9\u4e8eset\u786e\u5b9e\u662f\u7528\u4e0d\u6765QAQ\n\n\u56e0\u4e3a\u8986\u76d6\u4e86\u7684\u9884\u5b9a\u80af\u5b9a\u8981\u5f39\u51fa\u53bb\uff0c\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u8986\u76d6\u4e86\u7684\u9884\u5b9a\uff08\u7528\u53f3\u7aef\u70b9\u6392\u5e8f\u518d\u4e8c\u5206\u67e5\u627e\uff09\n\n\u770b\u770b\u5de6\u53f3\u4e24\u4e2a\u9884\u5b9a\u6709\u6ca1\u6709\u8986\u76d6\uff0c\u8986\u76d6\u4e86\u7684\u5c31\u5f39\u51fa\u53bb\n\n\u5bf9\u4e8eset\u5c31\u662ferase\u51fd\u6570\n\n\u4f46\u662f\u6211\u53d1\u73b0\u4e00\u4e2a\u626f\u6de1\u7684\u60c5\u51b5\uff0cerase\uff08\\*it\uff09\u540e\\*it\u8fd8\u662f\u539f\u6765\u90a3\u4e2a\u503c\uff0c\u4e0d\u80fd\u81ea\u52a8\u5f80\u540e\u79fb\u52a8\uff0c\uff08\u4e00\u5b9a\u662fset\u5185\u90e8\u5947\u7279\u7684\u7ea2\u9ed1\u6811\u6211\u4e0d\u61c2\uff09\uff0c\u6240\u4ee5\u8981it++\u518dit--\u624d\u80fd\u5b9e\u73b0\u79fb\u52a8\uff1b\u4f46\u662fit++\u53ef\u80fd\u8981\u8d8a\u754c\uff1b\u800c\u4e14\u4f60\u8fd8\u4e0d\u77e5\u9053\u8981\u8d8a\u754c\uff01\uff01\uff01\u7528if\uff08it==s.end()\uff09\u7279\u5224\u90fd\u4e0d\u884c\uff01\uff01\uff01\n\n\u6211\u771f\u662f\u6ca1\u6709\u529e\u6cd5\u4e86 = =\u4e0d\u7ba1it\u5148\u81ea\u589e\u540e\u81ea\u51cf\u8fd8\u662f\u6362\u4e00\u4e0b\u987a\u5e8f\uff0c\u90fd\u4f1aRE\uff0c\u6211\u4e00\u5f00\u59cbRE\u4e867\u7ec4\uff01\uff01[delete]233\u8fd8\u67093\u7ec4WA\u4e86[/delete]\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\u9b3c\n\n\u6240\u4ee5\u5462 = =\u53ea\u597d\u501f\u7528\u697c\u4e0b\u7684\u529e\u6cd5\n\n\u6211\u4e00\u5f00\u59cb\u8fd8\u5f88\u5947\u602a\u4e3a\u4ec0\u4e48\u8981\u5199\u4e2a\u6b7b\u5faa\u73af\u800c\u4e0d\u662f\u5148\u628a\u5de6\u8fb9\u5f39\u5b8c\u518d\u628a\u53f3\u8fb9\u5f39\u5b8c= =\n\n\u539f\u6765\u662f\u8fd9\u6837\n\n\u7136\u540e\u64cd\u4f5c\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\n\n\u987a\u4fbf\u8bf4\u4e00\u53e5\u7528set\u88c5\u7ed3\u6784\u4f53\u9700\u8981\u91cd\u8f7d\u5c0f\u4e8e\u7b26\u53f7 \u800c\u4e14\u5c0f\u4e8e\u7b26\u53f7\u53c2\u6570\u5fc5\u987b\u52a0const\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u4ec0\u4e48\u9b3c\uff0c\u7f16\u8bd1\u5668\u5c31\u662f\u8981\u62a5\u9519\uff09\n\n**\n\n\n```cpp\n#include<set>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct Node{\n    int l,r;\n    Node(){}\n    Node(int l,int r):l(l),r(r){}\n    bool operator < (const Node &rhs)const{\n        return r<rhs.r;\n    }\n};\nint read()\n{\n    int ret=0;char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    for(;ch>='0'&&ch<='9';ch=getchar()) ret=ret*10+ch-'0';\n    return ret;\n}\nset<Node>a;\nint main()\n{\n    freopen(\"std.in\",\"r\",stdin);\n    int Q;cin>>Q;\n    char ins[2];\n    int l,r;\n    while(Q--)\n    {\n        scanf(\"%s\",ins);\n        if(ins[0]=='A')\n        {\n            l=read();r=read();\n            Node t=Node(l,r);\n            int cnt=0;\n            while(1)\n            {\n                set<Node>::iterator it=a.lower_bound(t);\n                if(it->l<=r&&it->r>=l)  //\u5f80\u540e\u5220\n                {\n                    a.erase(*it);cnt++;continue;  //\u8fd9\u91cc\u52a0continue\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u9632RE\uff0c\u867d\u7136\u597d\u50cf\u6ca1\u4ec0\u4e48\u7528\uff1f\n                }\n                it=a.lower_bound(t);\n                if(it!=a.begin())             //\u5f80\u524d\u5220\n                {\n                    it--;\n                    if(it->l<=r&&it->r>=l){a.erase(*it);cnt++;continue;}\n                }\n                break;\n            }\n            a.insert(t);\n            printf(\"%d\\n\",cnt);\n        }\n        else printf(\"%d\\n\",a.size());\n    }\n    return 0;\n}\n\n```",
        "postTime": 1456466157,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u5f53\u8bfb\u5165\u4e00\u4e2a\u65b0\u7684\u9884\u7ea6\u65f6\uff0c\u4e0d\u65ad\u67e5\u627e\u5df2\u7ecf\u5b58\u5728\u7684\u9884\u7ea6\u4e2dend\u503c\u5927\u7b49\u4e8e\u65b0\u9884\u7ea6start\u503c\uff0c\u5e76\u4e14\u6700\u63a5\u8fd1\u8be5start\u503c\u7684\u9884\u7ea6\uff0c\u627e\u5230\u4e00\u4e2a\u5220\u9664\u4e00\u4e2a\uff0c\u76f4\u5230\u4e0d\u80fd\u5220\u9664\u4e3a\u6b62\u3002\u56e0\u4e3a\u4e0d\u51b2\u7a81\u7684\u9884\u7ea6\u90fd\u662f\u4e0d\u76f8\u4e92\u8986\u76d6\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u7684start\u503c\u4e0eend\u503c\u5fc5\u7136\u662f\u9012\u589e\u5e8f\u5217\uff0c\u6240\u4ee5\u4e00\u65e6\u4e00\u4e2a\u9884\u7ea6\u4e0d\u80fd\u5220\u9664\uff0c\u540e\u9762\u7684\u9884\u7ea6\u4e5f\u4e0d\u80fd\u5220\u9664\u3002\n\n\u8fd9\u6837\uff0c\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\uff1a\u5bfb\u627e\u6700\u5c0f\u7684\u6bd4\u7ed9\u5b9a\u7684\u6570x\u5927\u7684\u6570\u3002\u8be5\u95ee\u9898\u89e3\u6cd5\u975e\u5e38\u591a\uff0c\u8fd9\u91cc\u5199\u5f97\u975e\u5e38\u4e0d\u9519\uff1ahttp://www.cnblogs.com/wuyiqi/archive/2011/12/25/2301071.html\n\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u9664\u4e86\u7528\u6811\u72b6\u6570\u7ec4\u4ee5\u53ca\u5e73\u8861\u6811\uff0c\u7ebf\u6bb5\u6811\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002\u601d\u60f3\u4ecd\u7136\u662f\u4e8c\u5206\u3002\u672c\u9898\u53ef\u4ee5\u505a\u4e3ak\u5927\u6570\u7684\u6a21\u7248\u9898\u3002\n",
        "postTime": 1437473168,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u6211\u548c\u5927\u5bb6\u7684\u505a\u6cd5\u611f\u89c9\u6709\u4e00\u4e9b\u533a\u522b\uff0c\u7136\u540e\u5c31\u6765\u53d1\u9898\u89e3\u4e86QAQ\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0c\u6ee1\u8db3\u4ec0\u4e48\u6027\u8d28\u7684\u7ebf\u6bb5\uff0c\u624d\u4e0e\u5f53\u524d\u8fd9\u4e2a\u63d2\u5165\u7684\u7ebf\u6bb5\u6709\u4ea4\u96c6\u5462\uff1f\n\n\u90a3\u5c31\u662f\uff1a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5728[1,R]\uff0c\u4f46\u662f\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u5927\u4e8eL\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5f53\u6210\u4e0b\u6807\uff0c\u503c\u5f53\u6210R\uff0c\u63d2\u5165\u5230\u7ebf\u6bb5\u6811\u5f53\u4e2d\u5373\u53ef\u3002\u7136\u540e\u5220\u9664\u64cd\u4f5c\uff1a\u53ea\u8981\u5728\u533a\u95f4[1,R]\uff0c\u5e76\u4e14\u533a\u95f4max\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u63d2\u5165\u7684\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u5c31\u53bb\u5220\u9664\u5373\u53ef\u3002\n\n\u540c\u65f6\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5143\u7d20\u4e2a\u6570\u3002\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(\"-Ofast\",\"-funroll-all-loops\")\n#include<bits/stdc++.h>\n//#define int long long\nusing namespace std;\nconst int N=1e5+10;\nint n,m=1e5,mx[N<<2],sum[N<<2],s;\tchar op[5];\ninline void push_up(int p){\n\tmx[p]=max(mx[p<<1],mx[p<<1|1]);\n\tsum[p]=sum[p<<1]+sum[p<<1|1];\n}\nvoid change(int p,int l,int r,int x,int v){\n\tif(l==r){mx[p]=v,sum[p]=1;\treturn ;}\n\tint mid=l+r>>1;\n\tif(x<=mid)\tchange(p<<1,l,mid,x,v);\n\telse change(p<<1|1,mid+1,r,x,v);\n\tpush_up(p);\n}\nvoid del(int p,int l,int r,int ql,int qr,int v){\n\tif(mx[p]<v)\treturn ;\n\tif(l==r){mx[p]=sum[p]=0;\treturn ;}\n\tint mid=l+r>>1;\n\tif(qr<=mid)\tdel(p<<1,l,mid,ql,qr,v);\n\telse if(ql>mid)\tdel(p<<1|1,mid+1,r,ql,qr,v);\n\telse del(p<<1,l,mid,ql,mid,v),del(p<<1|1,mid+1,r,mid+1,qr,v);\n\tpush_up(p);\n}\nsigned main(){\n\tcin>>n;\n\tfor(int i=1,l,r;i<=n;i++){\n\t\tscanf(\"%s\",op);\n\t\tif(op[0]=='A'){\n\t\t\tscanf(\"%d %d\",&l,&r);\ts=sum[1];\tdel(1,1,m,1,r,l);\n\t\t\tprintf(\"%d\\n\",s-sum[1]);\tchange(1,1,m,l,r);\n\t\t}else printf(\"%d\\n\",sum[1]);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1584927612,
        "uid": 133654,
        "name": "\u9752\u70df\u7ed5\u6307\u67d4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u600e\u4e48\u53c8\u662f\u6076\u610f\u8bc4\u5206\uff1f\uff1f\uff1f\u6a59\u9898\u4e00\u9053\u3002\n\n\u8fd9\u9898\u662f\u5e73\u8861\u6811\uff0c\u4e0d\u8fc7\u2026\u2026\n\n## \u5982\u679c\u4e00\u9898\u8003\u4e86\u5e73\u8861\u6811\uff0c\u5148\u60f3\u60f3set\u80fd\u4e0d\u80fd\u7528\uff01\n\n\u8fd9\u9898\u80fd\u7528\uff01\n\n\u601d\u8def\uff1a\n\n\u8f93\u5165\u7684\u662fA\u64cd\u4f5c\uff1a\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u4e00\u4e2a\u53f3\u7aef\u70b9\u4e0e\u53e6\u4e00\u4e2a\u7684\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u6709\u95ee\u9898\u7684\u76f4\u63a5\u62cd\u6389\n\n\u8f93\u5165\u7684\u662fB\u64cd\u4f5c\uff1a\u8f93\u51fa\u96c6\u5408\u7684\u957f\u5ea6\n\n\u4ee3\u7801\u8fde\u6ce8\u91ca\u90fd\u7701\u4e86\uff0c\u76f4\u767d\u7684\u5f88\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\n#define it iterator\nusing namespace std;\n\nstruct node{\n    ll l,r;\n    inline bool operator <(const node &x) const{\n        return r<x.l;\n    }\n};\nll n;\nset<node> s;\n\nint main(){\n    cin>>n;\n    while(n--){\n        string op;\n        cin>>op;\n        if(op==\"A\"){\n            ll l,r,ans=0;\n            scanf(\"%lld %lld\",&l,&r);\n            node x=(node){l,r};\n            set<node>::it i=s.find(x);\n            while(i!=s.end()){\n                ans++;\n                s.erase(i);\n                i=s.find(x);\n            }\n            s.insert(x);\n            printf(\"%lld\\n\",ans);\n        }\n        else printf(\"%lld\\n\",(ll)s.size());\n    }\n    return 0;\n}\n```",
        "postTime": 1551831533,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u975e\u6307\u9488\u7248\u672c\u3002\u601d\u8def\u548c\u697c\u4e0b\u540c\u6837\u7528fhqtreap\u7684\u9898\u89e3\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u4ed6\u7528\u7684\u662f\u6307\u9488\u6211\u8fd9\u4e2a\u6ca1\u7528\u6307\u9488\uff0c\u5e76\u4e14\u5199\u6cd5\u7684\u7ec6\u8282\u5904\u6709\u5f88\u591a\u4e0d\u540c\u3002\n\n[\u540c\u6b65\u4e8e$blog$](https://www.cnblogs.com/henry-1202/p/10465543.html)\n\n\u7528fhqtreap\u5bf9\u533a\u95f4\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u53ef\u4ee5\u6ce8\u610f\u5230\u7684\u662f\uff0c\u5bf9\u4e8e\u5f53\u524d\u5b58\u5728\u7684\u9884\u7ea6\uff0c\u4ed6\u4eec\u4e00\u5b9a\u662f\u5347\u5e8f\u6392\u5217\u7684\uff08\u6709\u91cd\u53e0\u7684\u90fd\u88ab\u5220\u4e86\uff09\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u6309\u7167\u4f4d\u7f6e\u5206\u88c2\u7684fhqtreap\u641e\u4e86\uff08\u9884\u7ea6\u65e0\u8bba\u6309l\u8fd8\u662f\u6309r\u90fd\u5fc5\u5b9a\u662f\u5347\u5e8f\u7684\uff09\u3002\n\n\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5\u627e\u51fa\u4e92\u4e0d\u91cd\u53e0\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u90a3\u4e48\u9700\u8981\u5220\u9664\u7684\u5c31\u662f\u4e2d\u95f4\u7684\u90a3\u4e00\u6bb5\u4e86(\u56e0\u4e3a\u533a\u95f4\u5347\u5e8f)\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2aA\u7684\u7b54\u6848\u5c31\u662f\u4e2d\u95f4\u90a3\u6bb5\u7684siz\uff0c\u5408\u5e76\u7684\u65f6\u5019\u6ce8\u610f\u4e00\u4e0b\u987a\u5e8f\u5c31\u597d\uff0c\u522b\u628a\u987a\u5e8f\u98a0\u5012\u4e86\uff08\u65e0\u8bba\u662fmerge\u8fd8\u662fsplit\uff09\u3002\n\n\u5bf9\u4e8eB\u8be2\u95ee\uff0c\u7b54\u6848\u5c31\u662froot\u7684siz\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n#define ll long long\nusing namespace std;\n\nconst int N = 200010;\n\nstruct task { int l, r; };\nstruct fhq { int l, r, siz, rnd; task v; }t[N];\nint tot, root;\n\n#define lc (t[rt].l)\n#define rc (t[rt].r)\nvoid up(int rt) { t[rt].siz = t[lc].siz + t[rc].siz + 1; } \nvoid split(int rt, int &l, int &r, int k) {\n\tif(!k) l = 0, r = rt;\n\telse if(t[rt].siz == k) l = rt, r = 0;\n\telse if(k <= t[lc].siz) r = rt, split(lc, l, lc, k), up(rt);\n\telse l = rt, split(rc, rc, r, k - t[lc].siz - 1), up(rt);\n}\nvoid merge(int &rt, int l, int r) {\n\tif(!l || !r) rt = l + r;\n\telse if(t[l].rnd < t[r].rnd) rt = l, merge(rc, rc, r), up(rt);\n\telse rt = r, merge(lc, l, lc), up(rt);\n}\nint pre(int rt, task a) {\n\tif(!rt) return 0;\n\tif(t[rt].v.r < a.l) return pre(rc, a) + t[lc].siz + 1;\n\telse return pre(lc, a);\n}\nint nxt(int rt, task a) {\n\tif(!rt) return 0;\n\tif(t[rt].v.l > a.r) return nxt(lc, a);\n\telse return nxt(rc, a) + t[lc].siz + 1;\n}\nint new_node(task a) {\n\tt[++tot].v = a;\n\tt[tot].siz = 1;\n\tt[tot].rnd = rand()<<15|rand();\n\tt[tot].l = t[tot].r = 0;\n\treturn tot;\n}\nint build(task a) {\n\tint l = pre(root, a), r = nxt(root, a), x, y, z, k;\n\tsplit(root, x, y, r); split(x, z, k, l);\n\tint ans = t[k].siz, t = new_node(a);\n\tmerge(t, z, t); merge(root, t, y); return ans;\n}\n#undef lc\n#undef rc\n\nint main() {\n#ifndef ONLINE_JUDGE\nfreopen(\"test.in\",\"r\",stdin);\nfreopen(\"t.out\",\"w\",stdout);\n#endif\n\tsrand((unsigned)time(0));\n\tint T; task a; char ch[10];\n\tscanf(\"%d\", &T);\n\twhile(T--) {\n\t\tscanf(\"%s\", ch);\n\t\tif(ch[0] == 'A') scanf(\"%d%d\", &a.l, &a.r), printf(\"%d\\n\", build(a));\n\t\telse printf(\"%d\\n\", t[root].siz);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1551594398,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u6d1b\u8c37\u4e0a\u7684\u7b97\u6cd5\u6807\u7b7e\u662f\u8fd9\u4e48\u8d34\u7684: \u9ad8\u7cbe\u5ea6,\u5e73\u8861\u6811,\u6811\u72b6\u6570\u7ec4\n\n????????????\u4f60\u770b\u89c1\u6211\u5934\u4e0a\u7684\u95ee\u53f7\u4e86\u5417??????????????\n\n\u8fd9\u9898\u6211\u662f\u8fd9\u6837\u5199\u7684,\u7528\u4e00\u4e2a vector \u7ef4\u62a4\u6240\u9009\u7684\u6240\u6709\u4f1a\u8bae\u7684\u96c6\u5408, vector\u50a8\u5b58\u7684\u662f\u7ed3\u6784\u4f53, \u5305\u542b\u4e86\u67d0\u6d3b\u52a8\u7684\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4.\n\n\u56e0\u4e3a\u8fd9\u662f\u5df2\u7ecf\u5b89\u6392\u597d\u7684\u6240\u6709\u6d3b\u52a8,\u6240\u4ee5\u4fdd\u8bc1\u4e86\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\u4e0d\u91cd\u53e0,\u540c\u65f6\u4fdd\u8bc1\u4e86,**\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u6392\u5e8f\u5c31\u662f\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f**\n\n**\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u6392\u5e8f\u5c31\u662f\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f**\n\n**\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u6392\u5e8f\u5c31\u662f\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f**\n\n\u90a3\u4e48\u5c31\u7b80\u5355\u4e86. \n\u9996\u5148\u7528 lower_bound\u67e5\u627e\u65b0\u6d3b\u52a8\u7684\u5f00\u59cb\u65f6\u95f4, \u8fd9\u4e2a\u8fed\u4ee3\u5668\u662f it1\n\n\u7136\u540e\u7528 lower_bound\u67e5\u627e\u65b0\u6d3b\u52a8\u7684\u7ed3\u675f\u65f6\u95f4, \u8fd9\u4e2a\u8fed\u4ee3\u5668\u662f it2\n\n\u8fd9\u6837 `[it1, it2)` \u80af\u5b9a\u90fd\u662f\u8981\u62b9\u6389\u7684\u533a\u95f4\n\n\u7136\u540e\u518d\u770b, \u5982\u679c it2 \u7684\u5f00\u59cb\u65f6\u95f4\u4e5f\u5728\u65b0\u6d3b\u52a8\u7ed3\u675f\u65f6\u95f4\u4e4b\u524d, \u90a3\u4e48 it2 \u4e5f\u8981\u62b9\u6389\n\nit2-it1 \u5c31\u662f\u8981\u62b9\u6389\u7684\u6570\u91cf\n\n\u672c\u9898\u7ed3\u675f\n\n\n```cpp\n/*\nZhangBinjie@Penguin\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 1e5+5;\n\nstruct node {\n\tint starts;\n\tint endt;\n\tbool operator < (const int et) const {\n\t\treturn endt < et;\n\t}\n};\n\nvector<node>v;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    int n;\n    cin >> n;\n    char c;\n    int st, et;\n    int ans = 0;\n    while (n--) {\n\t\tcin >> c;\n\t\tif (c == 'A') {\n\t\t\tcin >> st >> et;\n\t\t\tauto it1 = lower_bound(v.begin(), v.end(), st);\n\t\t\tauto it2 = lower_bound(v.begin(), v.end(), et);\n\t\t\tif (it2 != v.end()) {\n\t\t\t\tif (it2->starts <= et)\n\t\t\t\t\tit2++;\n\t\t\t}\n\t\t\tint nums = it2 - it1;\n\t\t\tcout << nums << endl;\n\t\t\tv.erase(it1, it2);\n\t\t\tans -= nums;\n\t\t\tv.insert(it1, {st, et});\n\t\t\tans++;\n\t\t} else {\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n    return 0;\n}\n\n```",
        "postTime": 1542426073,
        "uid": 114753,
        "name": "PenguinZhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u79bb\u7ebf+\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u7ebf\u6bb5\u4f1a\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\n\u5bf9\u4e8eA\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u90a3\u663e\u7136\u5c31\u662f\u53ea\u4f1a\u5bf9\u64cd\u4f5c\u7f16\u53f7\u79bb\u5b83\u6700\u8fd1\u4e14\u5728\u5b83\u540e\u9762\u52a0\u5165\u4e0e\u5b83\u76f8\u4ea4\u7684\u7ebf\u6bb5\u4ea7\u751f1\u7684\u8d21\u732e\u3002\n\n\u5bf9\u4e8eB\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u90a3\u5c31\u4f1a\u5bf9\u4e24\u8005\u4e4b\u95f4\u6240\u6709\u7684B\u64cd\u4f5c\u4ea7\u751f1\u7684\u8d21\u732e\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4min\u6765\u5b9e\u73b0\u4e0a\u9762\u7684\u601d\u8def\u3002\n\n\u5409\u5229\u7ebf\u6bb5\u6811\uff1f\n\n\u5176\u5b9e\u4e0d\u7528\uff0c\u6211\u4eec\u53d1\u73b0\u4ece\u540e\u5f80\u524d\u505a\u7684\u8bdd\uff0c\u5f53\u524d\u7684\u64cd\u4f5c\u7f16\u53f7\u5f88\u80af\u5b9a\u662f\u6700\u5c0f\u7684\u3002\u90a3\u4e0d\u5c31\u662f\u533a\u95f4\u67d3\u8272\u4e86\u5417\u3002\n\n```\n//by zykykyk\n#include<cstdio>\n#include<ctime>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<string>\n#define rg register\n#define il inline\n#define vd void\n#define ll long long\n#define N 200010\n#define INF 2147483647\n#define For(i,x,y) for (rg int i=(x);i<=(y);i++)\n#define Dow(i,x,y) for (rg int i=(x);i>=(y);i--)\n#define cross(i,k) for (rg int i=first[k];i;i=last[i])\nusing namespace std;\nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll read(){\n    ll x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m,opt[N],l[N],r[N],ans[N],sum[N];\nchar c[20];\n\nint v[N<<2],lazy[N<<2];\nil vd Build(int u,int l,int r){\n\tv[u]=lazy[u]=INF;\n\tif (l==r) return;\n\tint mid=l+r>>1;\n\tBuild(u<<1,l,mid),Build(u<<1^1,mid+1,r);\n}\nil vd push_down(int u){\n\tif (lazy[u]!=INF){\n\t\tint lson=u<<1,rson=u<<1^1;\n\t\tlazy[lson]=lazy[rson]=v[lson]=v[rson]=lazy[u];lazy[u]=INF;\n\t}\n}\nil vd push_up(int u){\n\tv[u]=min(v[u<<1],v[u<<1^1]);\n}\nil vd update(int u,int l,int r,int ql,int qr,int x){\n\tif (l>=ql&&r<=qr){\n\t\tv[u]=lazy[u]=x;push_down(u);\n\t\treturn;\n\t}\n\tint mid=l+r>>1;push_down(u);\n\tif (qr<=mid) update(u<<1,l,mid,ql,qr,x);\n\telse if (ql>mid) update(u<<1^1,mid+1,r,ql,qr,x);\n\telse update(u<<1,l,mid,ql,qr,x),update(u<<1^1,mid+1,r,ql,qr,x);\n\tpush_up(u);\n}\nil int Query(int u,int l,int r,int ql,int qr){\n\tif (l>=ql&&r<=qr) return v[u];\n\tint mid=l+r>>1;push_down(u);\n\tif (qr<=mid) return Query(u<<1,l,mid,ql,qr);\n\telse if (ql>mid) return Query(u<<1^1,mid+1,r,ql,qr);\n\telse return min(Query(u<<1,l,mid,ql,qr),Query(u<<1^1,mid+1,r,ql,qr)); \n}\n\nint main(){\n\tn=read();\n\tFor(i,1,n){\n\t\tscanf(\"%s\",c);\n\t\tif (c[0]=='A') opt[i]=1,l[i]=read(),r[i]=read(),m=max(m,r[i]);\n\t\t\telse opt[i]=2;\n\t}\n\tBuild(1,1,m);\n\tDow(i,n,1){\n\t\tif (opt[i]==2) continue;\n\t\tint q=Query(1,1,m,l[i],r[i]);\n\t\tif (q==INF) sum[i]++;\n\t\t\telse sum[i]++,sum[q]--,ans[q]++;\n\t\tupdate(1,1,m,l[i],r[i],i);\n\t}\n\tint Ans=0;\n\tFor(i,1,n){\n\t\tAns+=sum[i];\n\t\tif (opt[i]==2) ans[i]=Ans;\n\t}\n\tFor(i,1,n) printf(\"%d\\n\",ans[i]);\n}\n\n```",
        "postTime": 1522842301,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u6211\u4e5f\u6765\u53d1\u4e00\u4e2a\u5e73\u8861\u6811\u9898\u89e3\uff0c\u4e3b\u8981\u601d\u60f3\u7528\u7684\u662f\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u533a\u95f4\u7ea2\u9ed1\u6811\uff0c\u4f46\u628a\u7ea2\u9ed1\u6811\u6362\u6210\u4e86\u66f4\u597d\u5199\u7684treap\u3002\u7b2c\u4e00\u90e8\u5206\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5c06\u4e00\u822c\u5e73\u8861\u6811\u6269\u5c55\u4e3a\u533a\u95f4\u6811\uff0c\u7b2c\u4e8c\u90e8\u5206\u5206\u6790\u89e3\u9898\u7b56\u7565\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6700\u540e\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\u3002\n\n\u4e00.\u533a\u95f4\u6811\n\n\u76f8\u6bd4\u666e\u901a\u5e73\u8861\u6811\uff0c\u533a\u95f4\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u9700\u8981\u7ef4\u62a4\u989d\u5916\u7684\u4e09\u4e2a\u4fe1\u606f\uff1alow\uff08\u4f4e\u7aef\u70b9\uff09\u3001high\uff08\u9ad8\u7aef\u70b9\uff09\u3001max\uff08\u5b50\u6811\u4e2d\u6700\u9ad8\u7684\u7aef\u70b9\uff09\u3002\u672c\u9898\u4e2d\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2asize\uff0c\u8fd9\u91cc\u4e0d\u591a\u89e3\u91ca\u3002\n\n\u533a\u95f4\u6811\u7684\u63d2\u5165\u4e0e\u5220\u9664\u7ed3\u70b9\u4e0e\u666e\u901a\u5e73\u8861\u6811\u5e76\u65e0\u592a\u5927\u5dee\u522b\uff0c\u53ea\u4e0d\u8fc7\u628a\u4f4e\u7aef\u70b9\u5f53\u4f5c\u6392\u5e8f\u7684\u5173\u952e\u5b57\u3002\u540c\u65f6\uff0c\u6dfb\u52a0\u4e0e\u5220\u9664\u65f6\u8981\u6cbf\u9014\u7ef4\u62a4max\u5c5e\u6027\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u666e\u901a\u5e73\u8861\u6811\u7ef4\u62a4size\u5c5e\u6027\uff0c\u8be6\u89c1\u4ee3\u7801\u3002\n\n\u533a\u95f4\u6811\u652f\u6301\u4e00\u4e2a\u989d\u5916\u7684search\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4ee5O(log n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd4\u56de\u6811\u4e2d\u4e0e\u7ed9\u5b9a\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u7684\u6307\u9488\uff0c\u82e5\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\u5219\u8fd4\u56de\u54e8\u5175nil\u7684\u5730\u5740\u3002search\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u662f\u53ef\u4ee5\u8bc1\u660e\u7684\uff0c\u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u8d44\u6599\u3002\u7ed9\u51fasearch\u7684\u4ee3\u7801\uff1a\n\n```cpp\n    node *search(const node aim)\n    {\n        node *p = root;\n        while (p != nil && (p->high < aim.low || p->low > aim.high))\n        {\n            if (p->l != nil&&p->l->max >= aim.low)\n                p = p->l;\n            else\n                p = p->r;\n        }\n        return p;\n    }\n```\n\u4e8c.\u9898\u76ee\u5206\u6790\n\n\u5f88\u660e\u663e\uff0c\u672c\u9898\u7684\u96be\u5ea6\u5c31\u5728\u4e8e\u5feb\u901f\u8fdb\u884c\u533a\u95f4\u7684\u67e5\u8be2\u3001\u5220\u9664\u4e0e\u63d2\u5165\u64cd\u4f5c\uff0c\u800c\u8fd9\u4e9b\u533a\u95f4\u6811\u90fd\u53ef\u4ee5\u5728O(log n)\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002\n\n\u9898\u76ee\u4e2d\u7684A\u64cd\u4f5c\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u6b65\uff1a\n\n1.\u53cd\u590d\u67e5\u8be2\u5e76\u5220\u9664\u4e0e\u7ed9\u5b9a\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u533a\u95f4\uff0c\u76f4\u5230search\u8fd4\u56denil\u3002\u8f93\u51fa\u5220\u9664\u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n2.\u5c06\u7ed9\u5b9a\u533a\u95f4\u63d2\u5165\u6811\u4e2d\u3002\n\nB\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\uff0c\u53ea\u9700\u5728O(1)\u65f6\u95f4\u5185\u8fd4\u56de\u6839\u7ed3\u70b9\u7684size\u503c\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4f1a\u8be6\u7ec6\u5206\u6790\u8fd9\u79cd\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4ee5\u8bf4\u660e\u5b83\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\u8bbeA\u64cd\u4f5c\u6570\u4e3aN\uff0cB\u64cd\u4f5c\u6570\u4e3aM\u3002\n\n\u9996\u5148\u5206\u6790\u5355\u4e2a\u6b65\u9aa4\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u82e5\u8fdb\u884c\u7b2cN\u4e2aA\u64cd\u4f5c\u65f6\uff0c\u6811\u4e2d\u5b58\u5728N-1\u4e2a\u533a\u95f4\uff0c\u4e14\u5373\u5c06\u63d2\u5165\u7684\u533a\u95f4\u4e0e\u5b83\u4eec\u90fd\u6709\u4ea4\u96c6\uff0c\u5219\u6b64\u65f6\u4e00\u5171\u9700\u8fdb\u884cN\u6b21search\u64cd\u4f5c\uff0cN-1\u6b21\u5220\u9664\u64cd\u4f5c\uff0c1\u6b21\u63d2\u5165\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(Nlog N)\u3002\u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4e0a\u754cO(N^2log N)\u3002\u4f46\u663e\u7136\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u786e\u754c\u3002\n\n\u7ecf\u8fc7\u66f4\u6df1\u5165\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u672c\u9898\u4e2d\u6700\u591a\u8fdb\u884cN\u6b21\u63d2\u5165\u64cd\u4f5c\uff0cN\u6b21\u5220\u9664\u64cd\u4f5c\uff0c2N\u6b21\u67e5\u8be2\u64cd\u4f5c\u3002\u6240\u4ee5\uff0cN\u6b21A\u64cd\u4f5c\u7684\u603b\u4ee3\u4ef7\u81f3\u591a\u4e3aO\uff084Nlog N\uff09==O(Nlog N)\u3002\u800cB\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aMO\uff081\uff09==O\uff08M\uff09\uff0c\u4e8c\u8005\u76f8\u52a0\u5373\u4e3a\u603b\u65f6\u95f4\u590d\u6742\u5ea6O(Nlog N + M)\uff0c\u5b8c\u5168\u53ef\u4ee5\u5e94\u4ed8\u672c\u9898\u7684\u6570\u636e\u89c4\u6a21\u3002\n\n\n\u4e09.\u4ee3\u7801\uff1a\n\n\u5148\u6765\u4e2a\u6570\u636e\u751f\u6210\u5668\n\n```cpp\nvoid main()//\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u751f\u6210\u5668\n{\n    freopen(\"XXXXXXXXX\", \"w\", stdout);\n\n    srand(time(NULL));\n    int n = rand();\n    int i, a, b;\n    char c;\n\n    printf(\"%d\\n\", n);\n    for (i = 0; i < n; i++)\n    {\n        c = 'A' + rand() % 2;\n        if (c == 'A')\n        {\n            a = rand() % 100;\n            b = a + rand() % 100;\n            printf(\"%c %d %d\\n\", c, a, b);\n        }\n        else\n            printf(\"%c\\n\", c);\n    }\n}\n```\n\u4e3b\u4ee3\u7801\n\n```cpp\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n\nstruct node {\n    int low;\n    int high;\n    int max;\n    int size;\n    int w;\n    node *l;\n    node *r;\n    node *p;\n    node()//\u4e00\u90e8\u5206\u7684\u521d\u59cb\u5316\uff0c\u53e6\u4e00\u90e8\u5206\u5728newnode\u51fd\u6570\u4e2d\n    {\n        size = 0;\n        max = 0;\n        w = 0;\n    }\n};\nconst node Nil;//\u5b9a\u4e49\u54e8\u5175\uff0c\u907f\u514d\u4e00\u4e9b\u9ebb\u70e6\nnode *nil = (node*)&Nil;\n\nnode *newnode()\n{\n    node *p = new(node);\n    p->size = 1;\n    p->l = nil;\n    p->r = nil;\n    p->p = nil;\n    p->w = rand();//\u8d4b\u4e88\u7ed3\u70b9\u968f\u673a\u7684\u4f18\u5148\u7ea7\n    return p;\n}\n//\u51e0\u4e2a\u6807\u51c6\u7684\u51fd\u6570\nvoid left_rotate(node *&root, node *x);//\u5b9a\u4e49\u5728\u4e0b\u9762\nvoid right_rotate(node *&root, node *x);\nbool cmp(node *a, node *b)\n{\n    return a->low < b->low;\n}\nint max(int a, int b)\n{\n    if (a > b)\n        return a;\n    return b;\n}\n\nstruct interval_tree {//\u767e\u5ea6\u7ffb\u8bd1\u7ba1\u533a\u95f4\u6811\u53eb\u8fd9\u4e2a\u540d\n    node *root;\n\n    interval_tree()\n    {//\u6811\u7684\u521d\u59cb\u5316\n        root = nil;\n    }\n    void insert(node *p)\n    {\n        node *x = root;\n        node *y = nil;\n        while (x != nil)\n        {\n            y = x;\n            x->max = max(x->max, p->max);\n            x->size++;//\u6cbf\u9014\u7ef4\u62a4\n            if (cmp(p, x))\n                x = x->l;\n            else\n                x = x->r;\n        }\n\n        p->p = y;//\u5148\u662f\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\n        if (y == nil)\n            root = p;\n        else if (cmp(p, y))\n            y->l = p;\n        else\n            y->r = p;\n\n        while (p->w < p->p->w)\n        {//\u7ef4\u62a4\u4f18\u5148\u7ea7\n            if (p == p->p->l)\n                right_rotate(root, p->p);\n            else\n                left_rotate(root, p->p);\n        }\n    }\n    void Delete(node *&p)\n    {\n        while (p->l != nil || p->r != nil)\n        {//\u5c06\u8981\u5220\u9664\u7684\u7ed3\u70b9\u8f6c\u4e3a\u53f6\u5b50\u7ed3\u70b9\n            if (p->l == nil)\n                left_rotate(root, p);\n            else if (p->r == nil)\n                right_rotate(root, p);\n            else if (cmp(p->l, p->r))\n                right_rotate(root, p);\n            else\n                left_rotate(root, p);\n        }\n\n        if (p->p == nil)\n            root = nil;\n        else if (p == p->p->l)\n            p->p->l = nil;\n        else\n            p->p->r = nil;\n\n        node *t = p->p;\n        while (t != nil)\n        {//\u5411\u4e0a\u7ef4\u62a4\n            t->max = max(t->high, max(t->l->max, t->r->max));\n            t->size--;\n            t = t->p;\n        }\n        delete(p);\n        p = nil;\n    }\n    node *search(const node aim)\n    {\n        node *p = root;\n        while (p != nil && (p->high < aim.low || p->low > aim.high))\n        {\n            if (p->l != nil&&p->l->max >= aim.low)\n                p = p->l;\n            else\n                p = p->r;\n        }\n        return p;\n    }\n    int size()\n    {//\u8fd4\u56de\u6811\u7684\u89c4\u6a21\n        return root->size;\n    }\n};\nvoid left_rotate(node *&root, node *x)\n{//\u5f88\u666e\u901a\u7684\u5de6\u53f3\u65cb\u8f6c\n    node *y = x->r;\n    y->p = x->p;\n    if (x->p == nil)\n        root = y;\n    else if (x == x->p->l)\n        x->p->l = y;\n    else if (x == x->p->r)\n        x->p->r = y;\n    x->r = y->l;\n    if (y->l != nil)\n        y->l->p = x;\n    y->l = x;\n    x->p = y;\n    y->max = x->max;\n    x->max = max(x->high, max(x->l->max, x->r->max));\n    y->size = x->size;\n    x->size = x->l->size + x->r->size + 1;\n}\nvoid right_rotate(node *&root, node *x)\n{\n    node *y = x->l;\n    y->p = x->p;\n    if (x->p == nil)\n        root = y;\n    else if (x == x->p->r)\n        x->p->r = y;\n    else if (x == x->p->l)\n        x->p->l = y;\n    x->l = y->r;\n    if (y->r != nil)\n        y->r->p = x;\n    y->r = x;\n    x->p = y;\n    y->max = x->max;\n    x->max = max(x->high, max(x->l->max, x->r->max));\n    y->size = x->size;\n    x->size = x->l->size + x->r->size + 1;\n}\n\nint main()\n{\n    srand(time(0));//\u7528\u65f6\u95f4\u505arand\u7684\u79cd\u5b50\n\n    int i, n;\n    char c[2];//\u7528\u5b57\u7b26\u4e32\u8f93\u5165\uff0c\u5bf9\u4ed8\u8f93\u5165\u5947\u5947\u602a\u602a\u7684\u683c\u5f0f\n    interval_tree T;\n\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++)\n    {\n        scanf(\"%s\", c);\n        if (c[0] == 'A')\n        {\n            int cnt = 0;\n            node *p = newnode();\n            scanf(\"%d %d\", &p->low, &p->high);\n            p->max = p->high;\n            node *t = T.search(*p);\n            while (t != nil)\n            {\n                T.Delete(t);\n                cnt++;\n                t = T.search(*p);\n            }\n            printf(\"%d\\n\", cnt);\n            T.insert(p);\n        }\n        else\n            printf(\"%d\\n\", T.size());\n    }\n\n    system(\"pause\");//\u8bb0\u5f97\u6ce8\u91ca\u6389\n    return 0;\n}\n```\n",
        "postTime": 1514747496,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u677f\u5b50\u9898\u3002\u9ed8\u9ed8\u6c34\u4e00\u6ce2FHQ...\n\nFHQ \u5f88\u4e0d\u9519\u554a\uff01\uff08\u7a33\u7a33T\u4e86\u4e09\u4e2a\u70b9\uff09\uff0c\u4e8e\u662f\u4e00\u6ce2 O2 \u5f3a\u884c\u6c34\u8fc7\uff0c\u7136\u540e\u51c6\u5907\u8865\u7ebf\u6bb5\u6811\u3002\n\n\u57fa\u672c\u64cd\u4f5c\uff0cmerge \u3001split \u8db3\u77e3\u3002\n\n\u987a\u4fbf\u6253\u4e2a\u5e7f\u544a\uff1a[FHQ treap \u8be6\u89e3](https://www.cnblogs.com/Judge/p/9506980.html)\n\n```cpp\n//by Judge\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int M=2e5+111;\n///////////////////////////////////// \u975e\u5e38\u957f\u7684\u8bfb\u4f18\u8f93\u4f18\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline int cread(){ char c=getchar(); while(!isupper(c)) c=getchar(); return c=='A'; }\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\n////////////////////////////////////////\u7136\u540e\u662f\u677f\u5b50\nint cnt,root;\nstruct node{ int key,val[2],ch[2],siz; }t[M];\ninline int Rand(){ int seed=703; return seed=int(seed*48271ll%(~0u>>1)); }\ninline void update(int u){ t[u].siz=t[t[u].ch[0]].siz+t[t[u].ch[1]].siz+1; }\ninline int newnode(int L,int R){ t[++cnt].siz=1,t[cnt].val[0]=L,t[cnt].val[1]=R,t[cnt].key=Rand(); return cnt; }\nint merge(int u,int v){\n\tif(!u || !v) return u|v;\n\tif(t[u].key<t[v].key) {t[u].ch[1]=merge(t[u].ch[1],v),update(u); return u; }\n\telse {t[v].ch[0]=merge(u,t[v].ch[0]),update(v); return v; }\n} void split(int now,int k,int& x,int& y,int opt){ //\u660e\u660e\u5c31\u4e0d\u7528\u67e5\u524d\u9a71\u540e\u7ee7\u7684\u5440\uff0c\u6743\u503csplit\n\tif(!now) return (void)(x=y=0);\n\tif(t[now].val[opt]<k) split(t[x=now].ch[1],k,t[now].ch[1],y,opt);\n\telse split(t[y=now].ch[0],k,x,t[now].ch[0],opt); update(now);\n}\nsigned main(){\n\tfor(int n=read(),opt,x,y,a,b,c;n;--n){ opt=cread(); //\u5f3a\u884c\u9a9a\u538b\u884c\n\t\tif(opt) x=read(),y=read(),split(root,y+1,a,c,0),split(a,x,a,b,1),\n\t\t\tprint(t[b].siz),b=newnode(x,y),root=merge(merge(a,b),c);\n\t\telse print(t[root].siz);\n\t}Ot(); return 0;\n}\n```",
        "postTime": 1536065630,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u63d0\u4f9b set \u7684\u4e00\u79cd\u5199\u6cd5\uff0c\u96be\u70b9\u5728\u4e8e lower\\_bound\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u5e94\u7528\u3002\u672c\u5199\u6cd5\u76f8\u5bf9\u6765\u8bf4\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u5e0c\u671b\uff0c\u5927\u5bb6\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8ddf\u8e2a\u7406\u89e3\u3002\n\n```cpp\n#include <cstdio>\n#include <set>\nusing namespace std;\nstruct node{\n    int left,right;\n    bool operator<(const node &v)const{//1 \u6b64\u5904\u5199\u6210 bool operator<(const node &v)\n        if(right==v.right)\n            return left<v.left;\n        return right<v.right;\n    }\n};\nset<node> s;\nint main(){\n    int n,i,cnt,left,right;\n    char cmd[5];\n    set<node>::iterator it;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++){\n        scanf(\"%s\",cmd);\n        if(cmd[0]=='A'){\n            scanf(\"%d%d\",&left,&right);\n            cnt=0;\n            while(1){\n                it=s.lower_bound((node){0,left});//\u5efa\u8bae\u8bfb\u8005\u753b\u56fe\u7406\u89e3\u8be5\u53e5\uff0c\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u6700\u6838\u5fc3\u7684\u4ee3\u7801\uff0c\u4e5f\u662f\u6700\u96be\u5199\u5f97\u4ee3\u7801//1 \u6b64\u5904\u5199\u6210  it=s.lower_bound(node{0,left});\n                if(it!=s.end()&&right>=it->left){\n                    s.erase(it);\n                    cnt++;\n                    continue;\n                }\n                s.insert((node){left,right});//1 \u6b64\u5904\u5199\u6210 s.insert(node{left,right});\n                break;\n            }\n            printf(\"%d\\n\",cnt);\n        }else\n            printf(\"%d\\n\",s.size());\n    }\n    return 0;\n}\n\n```",
        "postTime": 1500774752,
        "uid": 34143,
        "name": "mrwalking",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "stl set\u7684\u5199\u6cd5\n\n\u601d\u60f3\u524d\u9762\u7684\u4eba\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5f53\u524d\u96c6\u5408\u4e2d\u7684\u533a\u95f4\u4e00\u5b9a\u662f\u4e0d\u60f3\u4ea4\u7684\uff0c\u6bcf\u6b21\u627e\u6700\u8fd1\u7684\u70b9\u5f39\u6389\u5373\u53ef\n\n\u7136\u540e\u5c31\u6210\u4e86\u627e\u5f53\u524d\u8282\u70b9\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n\n\u7528\u7ebf\u6bb5\u6811\u6216\u5e73\u8861\u6811\u5199\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\n\n\u4e0d\u8fc7set\u7528\u8d77\u6765\u65b9\u4fbf\u591a\u4e86\n\n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <set>\nusing namespace std;\n\nstruct Node\n{\n    int l,r;\n    bool operator<(const Node &v)const{if (l==v.l)return r<v.r;return l<v.l;}\n};\n\nset<Node> f;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=0;i<n;i++)\n    {\n        char c[2];int ql,qr;\n        scanf(\"%s\",c);\n        if (c[0]=='A')\n        {\n            scanf(\"%d%d\",&ql,&qr);\n            Node a=(Node){ql,qr};\n            int dc=0;\n            while (1)\n            {\n                set<Node>::iterator it=f.lower_bound(a); //\u627e\u5927\u4e8e\u5de6\u7aef\u70b9\u7684\u7b2c\u4e00\u4e2a\u503c \n                if (it->l<=a.r && a.l<=it->r) //\u5982\u679c\u533a\u95f4\u88ab\u8986\u76d6 \n                {\n                    dc++;\n                    f.erase(it); //\u5220\u9664\n                    continue;\n                }\n                it=f.lower_bound(a);\n                if (it!=f.begin())\n                {\n                    it--; //\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u7aef\u70b9 \n                    if (it->l<=a.r && a.l<=it->r)\n                    {\n                        dc++;\n                        f.erase(it);\n                        continue;\n                    }\n                }\n                break;\n            }\n            f.insert(a); //\u63d2\u5165\n            printf(\"%d\\n\",dc);\n        }\n        else\n            printf(\"%d\\n\",f.size());//\u5f53\u524d\u4e2a\u6570\u5c31\u662f\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\n    }\n    return 0;\n}\n\n```",
        "postTime": 1449751690,
        "uid": 9059,
        "name": "fffasttime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u4f7f\u7528\u7684\u662f$multset$\u89e3\u51b3\u7684\u8fd9\u9053\u9898\u3002\n\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u51fa\u73b0\u4e86\u4e00\u5bf9\u5de6\u53f3\u7aef\u70b9\u3002\u9700\u8981\u5220\u9664\u7684\u60c5\u51b5\uff1a\n\n1\u3001\u5b8c\u5168\u5305\u542b\u4f60\u65b0\u52a0\u5165\u7684\u70b9\u3002\n\n2\u3001\u6216\u8005\u4f60\u5305\u542b\u5f88\u591a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9(\u53ef\u4ee5\u53ea\u5305\u542b\u4e00\u4e2a\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9)\n\n\u8fd9\u4e24\u4e2a\u60c5\u51b5\u663e\u7136\u662f\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u5904\u7406\u5462\uff0c\u628a\u7b2c$i$\u6b21\u64cd\u4f5c\u5f53\u505a\u662f\u67d3\u6210$i$\u989c\u8272\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u5b58\u50a8\u5f53\u524d\u5df2\u6709\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u8fdb\u884c\u6807\u8bb0\u662f\u5426\u88ab\u5220\u9664\u3002\n\n$multiset$\u91cc\u53ea\u7528\u5b58\u7aef\u70b9\uff0c\u7528\u6570\u7ec4\u5b58\u7aef\u70b9\u5bf9\u5e94\u989c\u8272\u7136\u540e\u5220\u53bb\u3002\n\n\u5982\u679c\u6ca1\u6709\u53ef\u5220\u7684\u8003\u8651\u662f\u5426\u51fa\u73b0\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define FOR(i,l,r) for(register int i=l;i<=r;i++)\nusing namespace std;\n\ntypedef long long ll;\n\nconst int maxn=5e5+2000;\n\nmultiset<int>mt;\nchar str[3];int l,r;\npair<int,int>color[maxn];\nint col[maxn];\nbool vis[maxn];\nvector<int>G;\n\nint main(){\n    int T;cin>>T;\n    while(T--){\n        scanf(\"%s\",str);\n        if(str[0]=='A'){\n            scanf(\"%d%d\",&l,&r);\n            auto itl=mt.lower_bound(l);\n            auto itr=mt.upper_bound(r);\n            for(auto it=itl;it!=itr;it++){\n                int c=col[(*it)];\n                if(vis[c])continue;vis[c]=true;\n                int L=color[c].first,R=color[c].second;\n                G.push_back(L);G.push_back(R);\n            }\n            if(G.size()==0){\n                if(itl==mt.begin()||itr==mt.end());\n                else{\n                    --itl;\n                    if(col[(*itl)]==col[(*itr)]){\n                        int c=col[(*itl)];\n                        vis[c]=true;\n                        int L=color[c].first,R=color[c].second;\n                        G.push_back(L);G.push_back(R);\n                    }\n                }\n\n            }\n            for(auto it:G)mt.erase(it);\n            printf(\"%d\\n\",G.size()/2);\n            G.clear();\n            mt.insert(l);mt.insert(r);\n            color[T]=make_pair(l,r);\n            col[l]=col[r]=T;\n        }\n        if(str[0]=='B'){\n            printf(\"%d\\n\",mt.size()/2);\n        }\n    }\n}\n\n```",
        "postTime": 1566492371,
        "uid": 117102,
        "name": "baby_lu0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "# P2161 [SHOI2009]\u4f1a\u573a\u9884\u7ea6\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problem/P2161)\n\n[Github\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n### \u4e8c\u53c9\u7d22\u641c\u6811\n\n\u6811\u7ed3\u70b9\u5b58\u50a8start\u53caend\uff0c\u8868\u793a\u4e00\u4e2a\u9884\u7ea6\n```c\ntypedef struct TNode {\n\tint start, end;\n\tstruct TNode * left;\n\tstruct TNode * right;\n} * Tree;\n```\n\n\u5bf9\u6bcf\u4e2a\u6811\u7ed3\u70b9\uff1a\n\n* start < end\n* \u5de6\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684start\u548cend\u90fd\u5c0f\u4e8estart\n* \u53f3\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684start\u548cend\u90fd\u5927\u4e8eend\n\n\u6811\u4e2d\u6240\u6709\u7684\u7ed3\u70b9\u7684(start, end)\u90fd\u4e0d\u5b58\u5728\u91cd\u53e0\u90e8\u5206\uff0c\u5373\u4e0d\u5b58\u5728\u51b2\u7a81\u7684\u9884\u7ea6\n\n### A\u64cd\u4f5c\n\n\u58f0\u660e\u51fd\u6570:\n```c\nTree insert(Tree tree, int start, int end);\n```\n\u5411tree\u4e2d\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9(start, end)\uff0c\u82e5\u4e0e\u5df2\u6709\u7ed3\u70b9\u5b58\u5728\u91cd\u53e0\uff0c\u5219\u5220\u9664\u5df2\u6709\u7ed3\u70b9\u3002\u8fd4\u56de\u63d2\u5165\u540e\u7684\u6811\u3002\n\n\u5bf9\u4e8c\u53c9\u7d22\u641c\u6811\u63d2\u5165\u7a0d\u5fae\u66f4\u6539\u5373\u53ef\uff1a\n\n* \u82e5tree\u4e3aNULL\uff0c\u65b0\u5efa\u7ed3\u70b9\u5e76\u8fd4\u56de\n* \u82e5end < tree->start\uff0c\u9012\u5f52\u63d2\u5165\u5de6\u5b50\u6811\n* \u82e5start > tree->end, \u9012\u5f52\u63d2\u5165\u53f3\u5b50\u6811\n* \u5426\u5219\u5f85\u63d2\u5165\u7684(start, end)\u4e0e(tree->start, tree->end)\u6709\u91cd\u53e0\uff0c`(tree->start, tree->end)\u8868\u793a\u7684\u9884\u7ea6\u88ab\u62d2\u7edd`\u3002\u6ce8\u610f\u6b64\u65f6`tree\u7684\u5b50\u6811\u4e2d\u53ef\u80fd\u4e5f\u5b58\u5728\u4e0e(start, end)\u91cd\u53e0\u7684\u7ed3\u70b9`\uff0c\u82e5\uff1a\n\t* `start < tree->start`\u3002\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684start\u548cend\u5747\u5c0f\u4e8etree->start\uff0c\u4f46\u82e5start < tree->start\uff0c\n\t\u5219tree\u7684\u5de6\u5b50\u6811\u4e2d\u53ef\u80fd\u5b58\u5728\u7ed3\u70b9subtree\uff0c\u4f7fsubtree->end > start\uff0c\u800csubtree->end < tree->start < end\uff0c\u5373`start < subtree->end < end`\uff0c\u5373subtree\u4e0e(start, end)\u91cd\u53e0\uff0c\n\t\u8c03\u7528```tree->left = leftOverlap(tree->left, start);```\u6d88\u9664tree\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u91cd\u53e0\uff0c`leftOverlap`\u51fd\u6570\u89c1\u4e0b\u6587\u3002\n\t*  `end > tree->end`\u3002\u53f3\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684start\u548cend\u5747\u5927\u4e8etree->end\uff0c\u4f46\u82e5end > tree->end\uff0c\n\t\u5219tree\u7684\u53f3\u5b50\u6811\u4e2d\u53ef\u80fd\u5b58\u5728\u7ed3\u70b9subtree\uff0c\u4f7fsubtree->start < end\uff0c\u800csubtree->start > tree->end > start\uff0c\u5373`start < subtree->start < end`\uff0c\u5373subtree\u4e0e(start, end)\u91cd\u53e0\uff0c\n\t\u8c03\u7528```tree->right = rightOverlap(tree->right, end);```\u6d88\u9664tree\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u91cd\u53e0\uff0c`rightOverlap`\u51fd\u6570\u89c1\u4e0b\u6587\u3002\n  \n  \u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u53ef\u80fd\u540c\u65f6\u53d1\u751f\u3002`\u6700\u540e\u4f7f\u7528(start, end)\u66ff\u6362(tree->start, tree->end)\uff0c\u5373\u63d2\u5165\u4e86\u65b0\u9884\u7ea6\u540c\u65f6\u62d2\u7edd\u6240\u6709\u51b2\u7a81\u7684\u9884\u7ea6`\n\n* leftOverlap\u51fd\u6570\n```c\nTree leftOverlap(Tree tree, int start);\n```\n\u5bf9tree\u4e2d\u6240\u6709\u7ed3\u70b9subtree\uff0c\u82e5subtree->end > start\uff0c\u5219\u5220\u9664\u6b64\u7ed3\u70b9\uff0c\u5373\u62d2\u7edd\u4e86\u51b2\u7a81\u7684\u9884\u7ea6\uff0c\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6811\n\n* \u82e5tree\u4e3aNULL\uff0c\u4e0d\u5b58\u5728\u51b2\u7a81\u7684\u9884\u7ea6\uff0c\u8fd4\u56de NULL\n* \u82e5tree->end < start\uff0c\u5219tree\u7ed3\u70b9\u5b58\u50a8\u7684\u9884\u7ea6\u4e0d\u51b2\u7a81\uff0c\u4e14tree\u7684\u5de6\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9\u4e5f\u4e00\u5b9a\u4e0d\u51b2\u7a81\u3002\u9012\u5f52\u53f3\u5b50\u6811\u3002\n* \u82e5tree->end >= start\uff0c\u5219tree\u7ed3\u70b9\u5b58\u50a8\u7684\u9884\u7ea6\u51b2\u7a81\uff0c\u4e14tree\u7684\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9\u4e5f\u4e00\u5b9a\u51b2\u7a81\uff0c\u5220\u9664\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9\uff0c\u7528left\u5b58\u50a8tree\u7684\u5de6\u5b50\u6811\uff0c\u7136\u540e\u5220\u9664tree\u7ed3\u70b9\u672c\u8eab\u3002\n   \u7528left\u53d6\u4ee3tree\uff0c\u6b64\u65f6\u8fd8\u8981\u9012\u5f52left\uff0c\u56e0\u4e3aleft\u4e2d\u53ef\u80fd\u8fd8\u5b58\u5728\u51b2\u7a81\u7684\u7ed3\u70b9\u3002\n\n* rightOverlap\u51fd\u6570\n\n\u4e0eleftOverlap\u5bf9\u79f0\u3002\n\n#### \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5168\u5c40\u53d8\u91cftree_size\u8868\u793a\u6811\u7684\u7ed3\u70b9\u6570\uff0cremoved_node_num\u8868\u793a\u56e0\u63d2\u5165\u800c\u5220\u9664\u7684\u51b2\u7a81\u7ed3\u70b9\u6570\u3002\n#### main\u4e2d\u5c06tree_size\u521d\u59cb\u5316\u4e3a0\uff0c\u6bcf\u6b21A\u64cd\u4f5c\u4e2d\u5427removed_node_num\u521d\u59cb\u5316\u4e3a0\uff0c\u7136\u540e\u8c03\u7528insert\u51fd\u6570\u3002\n#### \u65b0\u5efa\u7ed3\u70b9\u65f6 tree_size++\uff1b\u5220\u9664\u7ed3\u70b9\u65f6tree_size--\uff0cremoved_node_num++\uff1b\u66ff\u6362\u7ed3\u70b9\u65f6removed_node_num++(\u66ff\u6362\u540e\u6811\u7684\u7ed3\u70b9\u6570\u4e0d\u53d8\uff0c\u4f46\u88ab\u66ff\u6362\u7684\u7ed3\u70b9\u8981\u88ab\u7b97\u4f5c\u62d2\u7edd\u7684\u7ed3\u70b9)\n#### A\u64cd\u4f5c\u6700\u540e\u8f93\u51faremoved_node_num\u3002\n\n### B\u64cd\u4f5c  \u8f93\u51fatree_size\u5373\u53ef\n\n## \u4ee3\u7801 \n\n### C\n\n```c\n#include \"stdio.h\"\n#include \"stdlib.h\"\n\nint tree_size;\nint removed_node_num;\n\ntypedef struct TNode {\n\tint start, end;\n\tstruct TNode * left;\n\tstruct TNode * right;\n} * Tree;\n\nTree newTNode(int start, int end) {\n\tTree t = (Tree)malloc(sizeof(struct TNode));\n\tt->start = start;\n\tt->end = end;\n\tt->left = t->right = NULL;\n\treturn t;\n}\n\nTree insert(Tree tree, int start, int end);\nTree leftOverlap(Tree tree, int start);\nTree rightOverlap(Tree tree, int end);\nvoid deleteTree(Tree tree);\n\nTree insert(Tree tree, int start, int end) {\n\tif (tree == NULL) {\n\t\ttree_size++;\t\n\t\treturn newTNode(start, end);\n\t}\n\tif (end < tree->start) {\n\t\ttree->left = insert(tree->left, start, end);\n\t}\n\telse if (start > tree->end) {\n\t\ttree->right = insert(tree->right, start, end);\n\t}\n\telse {\n\t\tif (start < tree->start) {\n\t\t\ttree->left = leftOverlap(tree->left, start);\n\t\t}\n\t\tif (end > tree->end) {\n\t\t\ttree->right = rightOverlap(tree->right, end);\n\t\t}\n\t\ttree->start = start;\n\t\ttree->end = end;\n\t\tremoved_node_num++;\n\t}\n\treturn tree;\n}\n\nTree leftOverlap(Tree tree, int start) {\n\tif (tree == NULL) return NULL;\n\tif (tree->end < start) {\n\t\ttree->right = leftOverlap(tree->right, start);\n\t\treturn tree;\n\t}\n\telse {\n\t\tdeleteTree(tree->right);\n\t\ttree->right = NULL;\n\t\tTree left = tree->left;\n\t\tfree(tree);\n\t\tremoved_node_num++;\n\t\ttree_size--;\n\t\treturn leftOverlap(left, start);\n\t}\n}\n\nTree rightOverlap(Tree tree, int end) {\n\tif (tree == NULL) return NULL;\n\tif (tree->start > end) {\n\t\ttree->left = rightOverlap(tree->left, end);\n\t\treturn tree;\n\t}\n\telse {\n\t\tdeleteTree(tree->left);\n\t\ttree->left = NULL;\n\t\tTree right = tree->right;\n\t\tfree(tree);\n\t\tremoved_node_num++;\n\t\ttree_size--;\n\t\treturn rightOverlap(right, end);\n\t}\n}\n\nvoid deleteTree(Tree tree) {\n\tif (tree == NULL) return;\n\tif (tree->left) deleteTree(tree->left);\n\tif (tree->right) deleteTree(tree->right);\n\tfree(tree);\n\tremoved_node_num++;\n\ttree_size--;\n}\n\nint main() {\n\tTree tree = NULL;\n\ttree_size = 0;\n\tint n ,start, end;\n\tscanf(\"%d\", &n);\n\tchar cmd;\t\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\" %c\", &cmd);\n\t\tif (cmd == 'A') {\n\t\t\tscanf(\"%d %d\", &start, &end);\n\t\t\tremoved_node_num = 0;\n\t\t\ttree = insert(tree, start, end);\n\t\t\tprintf(\"%d\\n\", removed_node_num);\n\t\t}\n\t\telse {\n\t\t\tprintf(\"%d\\n\", tree_size);\n\t\t}\n\t}\n\tdeleteTree(tree);\n\treturn 0;\n}\n```",
        "postTime": 1564715000,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "[\u53cb\u94fe(\u4e0e\u6b64\u9898\u65e0\u5173)](ljf-cnyali.cn)\n\n## \u6a21\u62df\u82df\u8fc7\n\n\u968f\u673a\u8df3\u9898\u5c31\u627e\u5230\u8fd9\u9053\u9898\u4e86...\n\n\u89c2\u5bdf\u4e86\u4e00\u4e0btags\uff1a\u5e73\u8861\u6811/\u6811\u72b6\u6570\u7ec4/\u9ad8\u7cbe\uff0c\u7136\u540e\u662f\u7d2b\u9898\n\n\u6211\u4e00\u4e2a**\u849f\u84bb**\u5c31\u7279($bu$)\u522b($xiang$)\u614c($da$)\n\n\u6240\u4ee5\u51b3\u5b9a...\n\u6253**\u6a21\u62df**\u9a97\u5206\n\n\u89c9\u5f97\u9a97\u5b83\u4e8c\u4e09\u5341\u5dee\u4e0d\u591a\u4e86\uff0c\u8fd0\u6c14\u597d\u8fd8\u6709\u4e94\u516d\u5341\n\n----\n\n\u4ecb\u7ecd\u4e0b\u6c99\u96d5\u601d\u8def\uff1a\n\n**\u9700\u8981\u7528\u5230\u7684\u53d8\u91cf\uff1a**\n\n- $a$\u6570\u7ec4\n\n$a[i]$\u8868\u793a\u7b2c$i$\u5929\u5360\u7528\u4f1a\u573a\u7684\u4f1a\u8bae\u7f16\u53f7\n\n- $canc$\u6570\u7ec4\n\n$canc[i]$\u8868\u793a\u7b2c$i$\u4e2a\u4f1a\u8bae\u662f\u5426**\u88ab\u53d6\u6d88**\u8fc7($canc[i]==1$\u8868\u793a\u88ab\u53d6\u6d88\u8fc7\uff0c\u5426\u5219\u6ca1\u6709)\n\n- $cnt$\n\n\u8bb0\u5f55\u5f53\u524d\u4f1a\u8bae\u7f16\u53f7\n\n- $ans$\n\n\u8bb0\u5f55\u5f53\u524d\u5e78\u5b58(\u5f53\u524d\u6709\u6548\u9884\u7ea6)\u4f1a\u8bae\u6570\u91cf\n\n----\n\n\u7136\u540e...\u8be5\u5e72\u561b\u5e72\u561b\uff0c\u4e0a~~fake~~\u4ee3\u7801(\u7801\u98ce\u8d85\u4e11)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100000+10\nint a[maxn],cnt,n,ans;\nbool canc[maxn+maxn];\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin>>n;\n    for(register int i=1;i<=n;i++){\n        char c;\n        cin>>c;\n        if(c=='B'){\n            cout<<ans<<endl;\n        }\n        if(c=='A'){\n            int x,y,sum=0;\n            cin>>x>>y;\n            cnt++;//\u4f1a\u8bae\u7f16\u53f7+1\n            ans++;//\u5f53\u524d\u65b0\u589e\u52a0\u4f1a\u8bae\u4e3a\u5e78\u5b58\n            for(register int j=x;j<=y;j++){\n                if(a[j]){//\u82e5\u5f53\u524d\u65e5\u671f\u6709\u9884\u7ea6\u8fc7\u4f1a\u8bae\n                    if(canc[a[j]]==0){//\u4e14\u8be5\u4f1a\u8bae\u672a\u88ab\u53d6\u6d88\u8fc7\n                        ans--;//\u5f53\u524d\u5e78\u5b58\u4f1a\u8bae\u6570\u91cf-1\n                        canc[a[j]]=1;//\u53d6\u6d88\u8be5\u4f1a\u8bae\n                        sum++;//\u56e0\u5f53\u524d\u4f1a\u8bae\u9700\u8981\u800c\u53d6\u6d88\u7684\u4f1a\u8bae\u4e2a\u6570+1\n                    }\n                }\n                a[j]=cnt;//\u5f53\u524d\u65e5\u671f\u88ab\u5f53\u524d\u4f1a\u8bae\u5360\u7528\n            }\n            cout<<sum<<endl;\n        }\n    }\n    return 0;\n}\n```\n\u8fd9\u4e2a\u5c45\u7136\u6709[80](https://www.luogu.org/recordnew/show/19663867)-[90](https://www.luogu.org/recordnew/show/19663834)\uff01(\u6d4b\u4e86\u4e24\u6b21\uff0c\u770b\u8fd0\u6c14)\n\n\u7384\u5b66\u4f18\u5316\u5373\u5c06\u6765\u4e34\uff01(\u81ea\u5df1\u627e\u4e0d\u540c\u5416)\n\n\u7136\u9e45\u8fd9\u662f\u5e76\u6ca1\u6709\u6b63\u786e\u6027\u7684\n\n\u867d\u7136[\u53ef\u4ee5\u8fc7](https://www.luogu.org/recordnew/show/19597128)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100000+10\nint a[maxn],cnt,n,ans;\nbool canc[maxn+maxn];\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin>>n;\n    for(register int i=1;i<=n;i++){\n        char c;\n        cin>>c;\n        if(c=='B'){\n            cout<<ans<<endl;\n        }\n        if(c=='A'){\n            int x,y,sum=0;\n            cin>>x>>y;\n            cnt++;\n            ans++;\n            for(register int i=x;i<=y;i++){\n                if(a[i]){\n                    if(canc[a[i]]==0){\n                        ans--;\n                        canc[a[i]]=1;\n                        sum++;\n                    }\n                }\n                a[i]=cnt;\n            }\n            cout<<sum<<endl;\n        }\n    }\n    return 0;\n}\n```\n\n~~\u6240\u4ee5\u8fd9\u662f\u4e00\u7bc7\u9e21\u808b\u9898\u89e3~~\n\n\u672c\u9898\u89e3\u4ec5\u4f9b\u5a31\u4e50",
        "postTime": 1559808017,
        "uid": 18197,
        "name": "YaliKiWi",
        "ccfLevel": 4,
        "title": "LuoguP2161\u9898\u89e3"
    },
    {
        "content": "\u4e25\u683c\u76842qlogn\u590d\u6742\u5ea6\u7ebf\u6bb5\u6811,\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f\uff1alr\u4e4b\u95f4\u4e3a\u8d77\u70b9\u7684\u9884\u7ea6\u4e2a\u6570,lr\u4e4b\u95f4\u6700\u5927\u53f3\u7aef\u70b9\u7684\u5750\u6807.\n\n\n------------\n\n\u5bf9\u4e8e\u4e00\u6b21\u63d2\u5165 \u9996\u5148\u6e05\u7406lr\u4e4b\u95f4\u7684\u9884\u7ea6,\u666e\u901a\u7684\u533a\u95f4\u67e5\u8be2,\u5229\u7528\u4fe1\u606f1\u7edf\u8ba1\u7b54\u6848,\u7136\u540e\u76f4\u63a5\u5c06\u6839\u7f6e\u4e3anull\u5c31\u53ef\u4ee5\u5b8c\u6210\u6e05\u7406\u3002\n\n\u5176\u6b21\u518d\u627e\u5230\u5f53\u524dl\u7684\u540e\u7ee7\u53f3\u7aef\u70b9,\u7136\u540e\u5220\u6389\u90a3\u4e2a\u540e\u7ee7\u5c31\u884c.\u5bf9\u4e8eb\u8be2\u95eeo1\u56de\u7b54\u5373\u53ef.\n\n\n------------\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801 \u6709\u538b\u884c,\u51fd\u6570\u540d\u6bd4\u8f83\u4e2a\u6027,\u7528\u6237\u4f53\u9a8c\u5e94\u8be5\u4e0d\u592a\u597d\u3002\n```cpp\n#include<bits/stdc++.h>\n#define left l,mid,ls[p]\n#define righ mid+1,r,rs[p]\n#define use 1,1e5,rt\n#define reperb; if(ma[rs[p]])ma[p]=ma[rs[p]];else ma[p]=ma[ls[p]];\n#define N 1<<23\nusing namespace std;bool f;\nint ls[N],rs[N],num[N],ma[N],rt,cnt,ans,d,t,n;\nvoid sak_fi(int p){\n\tnum[p]--;if(ma[ls[p]]==ma[p])sak_fi(ls[p]);\n\telse if(ma[rs[p]]==ma[p])sak_fi(rs[p]);\n\telse{ma[p]=0;return;}reperb;\n}\nvoid sak_tr(int l,int r,int &p){\n\tif(!p)p=++cnt;num[p]++;if(l==r){ma[p]=t;return;}int mid=l+r>>1;\n\tif(mid>=d)sak_tr(left);else{sak_tr(righ);if(ma[ls[p]]>=d)sak_fi(ls[p]),f=0,ans++;}\n\tif(!f)num[p]--;reperb;\n}\nvoid sak_qu(int l,int r,int &p,int ql,int qr){\n\tif(ql==l&&qr==r){ans+=num[p],p=0;return;}int mid=l+r>>1;\n\tif(mid>=qr)sak_qu(left,ql,qr);else if(mid<ql)sak_qu(righ,ql,qr);\n\telse sak_qu(left,ql,mid),sak_qu(righ,mid+1,qr);\n\treperb;num[p]=num[ls[p]]+num[rs[p]];\n}\nint main(){\n\tcin>>n;for(int i=1,c;i<=n;i++){\n\t\tscanf(\" %c\",&c);if(c=='B')printf(\"%d\\n\",num[rt]);\n\t\telse f=1,ans=0,scanf(\"%d%d\",&d,&t),sak_qu(use,d,t),sak_tr(use),printf(\"%d\\n\",ans);\n\t}\n}\n```\n",
        "postTime": 1544069624,
        "uid": 59907,
        "name": "Sakura_\u68a6\u7476",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n## \u5206\u6790\uff1a\n### \u8fd9\u9053\u9898\u4e24\u79cd\u4e3b\u6d41\u7b97\u6cd5\u662f\u5e73\u8861\u6811\uff08\u6216\u8005set\uff09\u548c\u7ebf\u6bb5\u6811\u67d3\u8272\uff0c\u524d\u8005\u5927\u540c\u5c0f\u5f02\uff0c\u4e0d\u8fc7\u540e\u8005\u5c31\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5199\u6cd5\u4e86\u3002~~\u8c8c\u4f3c\u5927\u5bb6\u5199\u7684\u6709\u70b9\u590d\u6742\u6709\u597d\u591a\u6570\u7ec4~~\uff0c\u90a3\u6211\u8fd9\u8fb9\u5199\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u7684\uff1a\n\n------------\n## \u7b97\u6cd5\uff1a\n### \u6211\u4eec\u628a\u6bcf\u6b21$Ai$\u64cd\u4f5c\u770b\u6210\u5728\u7ebf\u6bb5\u6811\u4e0a$s$\u548c$t$\u4e4b\u95f4\u6d82\u4e0a\u989c\u8272i\uff0c\u5f00\u4e24\u4e2a\u6570\u7ec4$s[i]$\u548c$t[i]$\u8868\u793a\u7b2c$i$\u4e2a\u989c\u8272\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u4ee5\u4fbf\u4e8e\u6211\u4eec\u540e\u9762\u7684\u67e5\u8be2\n\n### \u7ebf\u6bb5\u6811\u4e0a\u53ea\u7528\u4e24\u4e2a\u6570\u7ec4\uff1a$color$\u4ee3\u8868\u533a\u95f4\u7684\u989c\u8272\uff0c$tag$\u662f\u61d2\u6807\u8bb0\u3002(\u5982\u679c\u4e00\u65f6\u6ca1\u6709\u660e\u767d\u53ef\u4ee5\u60f3\u6210\u6700\u666e\u901a\u7684\u533a\u95f4\u7ebf\u6bb5\u6811\u52a0\u6cd5\uff09\n\n### \u8fd9\u91cc\u7684color\uff0c\u6211\u4eec\u8bbe-1\u4e3a\u6742\u8272\uff0c0\u4e3a\u65e0\u8272\uff0c\u5927\u4e8e0\u4e3a\u989c\u8272\u3002\u5728PushUp\u7684\u65f6\u5019\uff0c\u5982\u679c$color[lson]==color[rson]$\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u662f\u5f53\uff1a\n\n\n------------\n\n### $color[lson]!=color[rson]$&&$color[lson]!=0$&&$color[rson]!=0$\n\uff08\u8bf4\u4eba\u8bdd\u5c31\u662f**\u5de6\u53f3\u513f\u5b50\u989c\u8272\u4e0d\u540c**\u4e14**\u4e24\u4e2a\u90fd\u662f\u6709\u989c\u8272**\u7684\uff0c**\u800c\u4e0d\u662f\u4e00\u4e2a\u662f\u767d\u8272**\uff09\n\n\n------------\n\n### \u65f6\uff0c\u6211\u4eec\u53ea\u9700\u518d\u5f80\u4e0b\u591a\u8d70\u4e00\u4e2a\u533a\u95f4\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u5f53\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\uff0c\u53ea\u6709\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u53ea\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u4e0d\u53ef\u80fd\u8fd8\u662f-1\u3002\n\n### \u6240\u4ee5\u5bf9\u4e8e$A$\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u8be2\u95ee\u7684\u533a\u95f4$[x,y]$\uff0c\u5e76\u5728\u67e5\u8be2\u7684\u65f6\u5019\u5728\u5168\u5c40\u5f00\u6570\u7ec4\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6709\u54ea\u51e0\u4e2a\u989c\u8272\uff08\u8bb0\u5f97\u5904\u7406\u8fc7\u7684\u989c\u8272\u6807\u8bb0\u4e00\u4e0b\uff0c\u56e0\u4e3a\u989c\u8272\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u4e5f\u4e0d\u80fd\u91cd\u590d\u5220\u9664\uff09\u3002\n\n### \u5bf9\u4e8e\u4e00\u4e2a\u989c\u8272$c$,\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u628a$s[c]->t[c]$\u5168\u90e8\u4fee\u6539\u62100\u5373\u53ef\uff0c\u8bb0\u5f97\u6253\u61d2\u6807\u8bb0\u3002\n\n### \u6dfb\u52a0\u7684\u533a\u95f4\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u6210\u5bf9\u5e94\u7684\u7f16\u53f7\u5373\u53ef\uff0c\u8fd9\u91cc\u7684\u4e24\u4e2a\u64cd\u4f5c\u662f\u53ef\u4ee5\u5171\u7528\u4e00\u4e2a\u51fd\u6570\u7684\uff08\u5728\u6211\u7684\u7a0b\u5e8f\u91cc\u5c31\u662fUpdate\u51fd\u6570\uff09\n\n------------\n## \u590d\u6742\u5ea6\u5206\u6790\uff1a\n### \u6bcf\u4e2a\u533a\u95f4\u53ea\u4f1a\u88ab\u63d2\u5165\u4e00\u6b21\u548c\u5220\u9664\u4e00\u6b21\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f$O(nlogn)$\n\n------------\n# CODE\n### \u7ebf\u6bb5\u6811\u76f4\u63a5\u5c01\u88c5\u597d\u4e86\uff0c\u6bd4\u8f83\u5bb9\u6613\u770b\u61c2XD\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nconst int MAXN = 1e5 + 5, MAXQ = 2e5 + 5, N = 1e5;\nint colors[MAXQ], colort[MAXQ];\nint queue[MAXQ], tail;\nbool tag[MAXQ];\nint n, sum = 0;\nchar opt[3];\n\n#define mid ((x + y) >> 1)\n#define lson (pst << 1)\n#define rson (pst << 1 | 1)\n\n//\u7ebf\u6bb5\u6811\nstruct SegmentTree \n{\n    int color[MAXN << 2], tag[MAXN << 2];\n\n    inline void PushUp(int pst)\n    {\n        if (color[lson] == color[rson])\n            color[pst] = color[lson];\n        else if (!color[lson] || !color[rson])\n            color[pst] = color[lson] + color[rson];//\u76f4\u63a5\u52a0\u8d77\u6765\u662f\u56e0\u4e3a\u4e00\u4e2a\u662f0\uff0c\u52a0\u8d77\u6765\u80af\u5b9a\u662f\u53e6\u5916\u4e00\u4e2a\uff08FHQ_TREAP\u7684\u5199\u6cd5\uff09\n        else\n            color[pst] = -1;\n\n        return;\n    }\n\n    inline void PushDown(int pst)//\u975e\u5e38\u666e\u901a\u7684\u4e0b\u653e\n    {\n        if (tag[pst])\n        {\n            color[lson] = color[rson] = tag[pst];\n            tag[lson] = tag[rson] = tag[pst];\n            tag[pst] = 0;\n        }\n\n        return;\n    }\n\n    inline void Query(int x, int y, int pst, int l, int r)\n    {\n        if (y < l || x > r)\n            return;\n\n        if (l <= x && y <= r && (~color[pst]))//\u4e0d\u662f\u6742\u8272\u4e14\u7b26\u5408\u533a\u95f4\n        {\n            if (color[pst])\n                queue[++tail] = color[pst];//queue\u662f\u7528\u6765\u8bb0\u5f55\u989c\u8272\u7684\n\n            return;\n        }\n\n        PushDown(pst);\n        Query(x, mid, lson, l, r), Query(mid + 1, y, rson, l, r);\n        PushUp(pst);\n\n        return;\n    }\n\n    inline void Update(int x, int y, int pst, int l, int r, int k)//\u975e\u5e38\u666e\u901a\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u548c\u533a\u95f4\u7ebf\u6bb5\u6811\u52a0\u6cd5\u6ca1\u4ec0\u4e48\u533a\u522b\n    {\n        if (y < l || x > r)\n            return;\n\n        if (l <= x && y <= r)\n        {\n            color[pst] = tag[pst] = k;\n\n            return;\n        }\n\n        PushDown(pst);\n        Update(x, mid, lson, l, r, k), Update(mid + 1, y, rson, l, r, k);\n        PushUp(pst);\n\n        return;\n    }\n} ST;\n\nsigned main(void)\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++)\n    {\n        scanf(\"%s\", opt);\n\n        if (opt[0] == 'A')\n        {\n            scanf(\"%d %d\", colors + i, colort + i);\n\n            tail = 0;//\u8bb0\u5f97\u8ba9tail\u5f520\n            ST.Query(1, N, 1, colors[i], colort[i]);\n\n            int cnt = 0;//\u5220\u9664\u7684\u4e2a\u6570\n            for (int i = 1; i <= tail; i++)\n                if (!tag[queue[i]])//tag\u7528\u6765\u6807\u8bb0\u989c\u8272\u662f\u5426\u88ab\u5220\u9664\n                {\n                    int s = colors[queue[i]], t = colort[queue[i]];\n                    ST.Update(1, N, 1, s, t, 0);\n                    tag[queue[i]] = true;\n                    cnt++;\n                }\n\n            ST.Update(1, N, 1, colors[i], colort[i], i);\n\n            printf(\"%d\\n\", cnt);\n            sum = sum - cnt + 1;\n        }\n\n        if (opt[0] == 'B')\n            printf(\"%d\\n\", sum);//sum\u5c31\u662f\u5f53\u524d\u8fd8\u6709\u7684\u533a\u95f4\u6570\u54af~\n    }\n\n    return 0;\n}\n```",
        "postTime": 1539762825,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u540c\u6837\u662f\u4ece\u8bd5\u70bc\u573a\u70b9\u8fdb\u6765\u7684\uff0c\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u9700\u8981\u8010\u5fc3\u7684\u9898\n\n\u4e0d\u8fc7\u660e\u660e\u5c31\u662f\u6211\u592a\u83dc\u4e86\uff0c\u771f\u6b63\u7684\u5927\u4f6c\u90fd\u662f\u4e00\u773c\u79d2\u5427\n\n\u9996\u5148\u6211\u4eec\u6709\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c4\u7684\u66b4\u529b\u601d\u8def\uff0c\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u8fde\u7eed\u5b50\u6bb5\u6570\uff0c\u800c\u62d2\u7edd\u6389\u6240\u6709\u4e0e\u5f53\u524d\u533a\u95f4\u76f8\u51b2\u7a81\u7684\u9884\u7ea6\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6765\u505a\uff0c\u6765\u67e5\u627e\u4ece\u6700\u5f00\u59cb\u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u9996\u7b2c\u4e00\u4e2a\u4e0e\u533a\u95f4\u9996\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u548c\u533a\u95f4\u5c3e\u5230\u6700\u540e\u6700\u9760\u540e\u7684\u4e00\u4e2a\u4e0e\u533a\u95f4\u5c3e\u76f8\u540c\u7684\u4f4d\u7f6e\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e8c\u5206\u5462\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u8981\u627e\u7684\u5b50\u6bb5\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e8e\u662f\u53ef\u4ee5\u4e8c\u5206\n\n\u7531\u4e8e\u6211\u4eec\u5728\u7ef4\u62a4\u533a\u95f4\u8fde\u7eed\u5b50\u6bb5\u6570\u548c\u8fdb\u884c\u4e8c\u5206\u7684\u65f6\u5019\u9700\u8981\u505a\u4e00\u4e2a\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlog^{2}n)$\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define re register\n#define maxn 200001\nusing namespace std;\nint l[maxn<<2],r[maxn<<2],sum[maxn<<2],d[maxn<<2],tag[maxn<<2];\n//sum[i]\u8868\u793ai\u5bf9\u5e94\u533a\u95f4\u5185\u8fde\u7eed\u5b50\u6bb5\u6570\nint n,m,tot;\nchar p[maxn];\nint x[maxn],y[maxn];\nvoid build(int x,int y,int i)\n{\n\tl[i]=x;\n\tr[i]=y;\n\ttag[i]=-1;\n\tif(x==y) return;\n\tint mid=x+y>>1;\n\tbuild(x,mid,i<<1);\n\tbuild(mid+1,y,i<<1|1);\n}\ninline void pushdown(int i)\n{\n\tif(tag[i]!=-1)\n\t{\n\t\ttag[i<<1]=tag[i];\n\t\ttag[i<<1|1]=tag[i];\n\t\td[i<<1|1]=tag[i];\n\t\td[i<<1]=tag[i];\n\t\tif(tag[i]) sum[i<<1|1]=sum[i<<1]=1;\n\t\telse sum[i<<1|1]=sum[i<<1]=0;\n\t\ttag[i]=-1;\n\t}\n}\nint ask(int x,int i)\n{\n\tif(l[i]==r[i]&&l[i]==x) return d[i];\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(x<=mid) return ask(x,i<<1);\n\treturn ask(x,i<<1|1);\n}//\u5355\u70b9\u67e5\u8be2\nvoid change(int x,int y,int i,int v)\n{\n\tif(x<=l[i]&&y>=r[i])\n\t{\n\t\tif(v) sum[i]=1;\n\t\telse sum[i]=0;\n\t\ttag[i]=v;\n\t\td[i]=v;\n\t\treturn;\n\t}\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) change(x,y,i<<1,v);\n\telse if(x>mid) change(x,y,i<<1|1,v);\n\telse change(x,y,i<<1|1,v),change(x,y,i<<1,v);\n\tint q1=ask(mid,1),q2=ask(mid+1,1);\n\tif(q1==q2&&q1) sum[i]=sum[i<<1]+sum[i<<1|1]-1;\n    //\u5728\u8fdb\u884cupdata\u64cd\u4f5c\u65f6\u6211\u4eec\u8981\u8fdb\u884c\u4e24\u6b21\u5355\u70b9\u67e5\u8be2\n    //\u5982\u679c\u5f53\u524d\u533a\u95f4\u5de6\u513f\u5b50\u7684\u6700\u53f3\u70b9\u548c\u53f3\u513f\u5b50\u7684\u6700\u5de6\u70b9\u76f8\u540c\u4e14\u5747\u4e0d\u4e3a0\n    //\u5219\u8bf4\u660e\u6709\u4e00\u4e2a\u5b50\u6bb5\u88ab\u5206\u5f00\u4e86\uff0csum[i]\u5e94\u8be5\u7b49\u4e8esum[i<<1]+sum[i<<1|1]-1;\n\telse sum[i]=sum[i<<1|1]+sum[i<<1];\n}\nint query(int x,int y,int i)\n{\n\tif(x<=l[i]&&y>=r[i]) return sum[i];\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) return query(x,y,i<<1);\n\tif(x>mid) return query(x,y,i<<1|1);\n\tint q1=ask(mid,1),q2=ask(mid+1,1);\n\tif(q1==q2&&q1) return query(x,y,i<<1)+query(x,y,i<<1|1)-1;\n\treturn query(x,y,i<<1)+query(x,y,i<<1|1);\n\td[i]=d[i<<1];\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n;\n\tint xx,yy;\n\tint maxx=0,minn=99999999;\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tcin>>p[i];\n\t\tif(p[i]=='A') cin>>x[i]>>y[i],maxx=max(maxx,y[i]),minn=min(minn,x[i]);\n\t}\n\tbuild(1,maxx,1);\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tif(p[i]=='B') cout<<m-tot<<endl;\n\t\tif(p[i]=='A')\n\t\t{\n\t\t\tint now=query(x[i],y[i],1);\n\t\t\tcout<<now<<endl;\n\t\t\ttot+=now;//tot\u4e3a\u603b\u64a4\u9500\u4e2a\u6570\uff0c\u65b9\u4fbf\u8fdb\u884cB\u64cd\u4f5c\n\t\t\tint now1=ask(x[i],1),now2=ask(y[i],1);\n\t\t\tint ans1,ans2;\n\t\t\tint ll=minn,rr=x[i];\n\t\t\tif(now1)//\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u6700\u5de6\u70b9\u4e3a0\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u4e8c\u5206\u4e86\n\t\t\t{\n\t\t\t\twhile(ll<=rr) \n\t\t\t\t{\n\t\t\t\t\tint mid=ll+rr>>1;\n\t\t\t\t\tif(ask(mid,1)==now1) ans1=mid,rr=mid-1;\n\t\t\t\t\telse ll=mid+1;\n\t\t\t\t}\n\t\t\t}//\u67e5\u627e\u4ece\u6700\u5f00\u59cb\u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u9996\u7b2c\u4e00\u4e2a\u4e0e\u533a\u95f4\u9996\u76f8\u540c\u7684\u4f4d\u7f6e\n\t\t\tif(now2)\n\t\t\t{\n\t\t\t\tll=y[i],rr=maxx;\n\t\t\t\twhile(ll<=rr)\n\t\t\t\t{\n\t\t\t\t\tint mid=ll+rr>>1;\n\t\t\t\t\tif(ask(mid,1)==now2) ans2=mid,ll=mid+1;\n\t\t\t\t\telse rr=mid-1;\n\t\t\t\t}\n\t\t\t}//\u533a\u95f4\u5c3e\u5230\u6700\u540e\u6700\u9760\u540e\u7684\u4e00\u4e2a\u4e0e\u533a\u95f4\u5c3e\u76f8\u540c\u7684\u4f4d\u7f6e\n\t\t\tif(now1&&x[i]!=ans1) change(ans1,x[i],1,0);\n\t\t\tif(now2&&y[i]!=ans2) change(y[i],ans2,1,0);\n\t\t\tchange(x[i],y[i],1,++m);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5f53\u7136\uff0c\u8fd9\u6837\u5199\u7406\u8bba\u4e0a\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(nlog^{2}n)$\uff0c\u4f46\u662f\u5e38\u6570\u592a\u5927\u4e86\uff0c\u6240\u4ee5\u5438\u6c27\u4e5f\u4e0d\u80fd\u62ef\u6551\u8fd9\u4efd\u4ee3\u7801\uff0c\u8fd9\u79cd\u5199\u6cd5\u5c31\u53ea\u670960\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u8fd9\u4efd\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c\u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a$log$\n\n\u9996\u5148\u6211\u4eec\u5728\u7ef4\u62a4sum\u7684\u65f6\u5019\uff0c\u53ea\u7528\u5230\u4e86\u533a\u95f4\u6700\u5de6\u548c\u6700\u53f3\u4f4d\u7f6e\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u518d\u5f00\u4e24\u4e2a\u6570\u7ec4$lc$\uff0c$rc$\uff0c\u5206\u522b\u7ef4\u62a4\u533a\u95f4\u6700\u5de6\u548c\u6700\u53f3\u7684\u4f4d\u7f6e\u7684\u72b6\u6001\n\n\u800c\u5bf9\u4e8e\u6211\u4eec\u4e8c\u5206\u67e5\u627e\u505a\u64a4\u9500\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u533a\u95f4\u7ef4\u62a4\u4e00\u4e0b\u64a4\u9500\u8fd9\u4e2a\u533a\u95f4\u65f6\u5e94\u8be5\u64a4\u9500\u7684\u5b9e\u9645\u533a\u95f4\u662f\u54ea\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u518d\u5f00\u4e24\u4e2a\u6570\u7ec4$ll$\uff0c$rr$\u6765\u8fdb\u884c\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u505a\u64a4\u9500\u64cd\u4f5c\u65f6\u5b9e\u9645\u5e94\u8be5\u5bf9\u54ea\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\n\n\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u901a\u8fc7\u6765\u6211\u4eec\u901a\u8fc7\u4e24\u6b21\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230\u4e86$O(nlongn)$\uff0c\u800c\u7a7a\u95f4\u4e0a\u5c3d\u7ba1\u591a\u5f00\u4e86\u51e0\u4e2a\u6570\u7ec4\uff0c\u4f46\u5185\u5b58\u4ecd\u7ef0\u7ef0\u6709\u4f59\n\n\u4e8e\u662f\u5c31\u662f\u4ee3\u7801\u4e86\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define re register\n#define maxn 200001\nusing namespace std;\nstruct node\n{\n\tint a,b,c;\n};\nint l[maxn<<2],r[maxn<<2],ll[maxn<<2],rr[maxn<<2];\nint rc[maxn<<2],lc[maxn<<2],sum[maxn<<2],tag[maxn<<2];\nint n,m,tot;\nchar p[maxn];\nint x[maxn],y[maxn];\nvoid build(int x,int y,int i)\n{\n\tll[i]=l[i]=x;\n\trr[i]=r[i]=y;\n\ttag[i]=-1;\n\tif(x==y) return;\n\tint mid=x+y>>1;\n\tbuild(x,mid,i<<1);\n\tbuild(mid+1,y,i<<1|1);\n}\ninline void pushdown(int i)\n{\n\tif(tag[i]==-1) return;\n\tif(tag[i])\n\t{\n\t\tsum[i<<1|1]=sum[i<<1]=1;\n\t\ttag[i<<1|1]=tag[i<<1]=tag[i];\n\t\tll[i<<1]=ll[i];\n        ll[i<<1|1]=ll[i];\n        //\u5de6\u53f3\u4e24\u4e2a\u513f\u5b50\u5411\u5de6\u6269\u5c55\u7684\u4f4d\u7f6e\u5e94\u8be5\u4e0ei\u5411\u5de6\u6269\u5c55\u7684\u4f4d\u7f6e\u4e00\u81f4\n\t\trr[i<<1|1]=rr[i];\n\t\trr[i<<1]=rr[i];\n        //\u5de6\u53f3\u4e24\u4e2a\u513f\u5b50\u5411\u53f3\u6269\u5c55\u7684\u4f4d\u7f6e\u5e94\u8be5\u4e0ei\u5411\u53f3\u6269\u5c55\u7684\u4f4d\u7f6e\u4e00\u81f4\n\t\trc[i<<1]=rc[i<<1|1]=lc[i<<1]=lc[i<<1|1]=tag[i];\n        //\u66f4\u65b0\u72b6\u6001\n\t}\n\tif(!tag[i])//\u64a4\u9500\u64cd\u4f5c\u7684\u4e0b\u4f20\u6807\u8bb0\n\t{\n\t\tsum[i<<1|1]=sum[i<<1]=0;\n\t\ttag[i<<1|1]=tag[i<<1]=0;\n\t\tll[i<<1]=l[i<<1];\n        ll[i<<1|1]=l[i<<1|1];\n\t\trr[i<<1]=r[i<<1];\n\t\trr[i<<1|1]=r[i<<1|1];\n        //\u7531\u4e8e\u53c8\u6062\u590d\u5230\u521d\u59cb\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u6269\u5c55\uff0c\u6240\u4ee5\u76f4\u63a5\u4fee\u6539\u6210\u533a\u95f4\u7684\u5b9e\u9645\u503c\u5c31\u597d\n\t\trc[i<<1]=rc[i<<1|1]=lc[i<<1]=lc[i<<1|1]=0;\n\t}\n\ttag[i]=-1;\n}\nvoid change(int x,int y,int i,int v)\n{\n\tif(x<=l[i]&&y>=r[i])\n\t{\n\t\tif(v)\n\t\t{\n\t\t\tsum[i]=1;\n\t\t\tll[i]=x;\n\t\t\trr[i]=y;\n\t\t}else\n\t\t{\n\t\t\tsum[i]=0;\n\t\t\tll[i]=l[i];\n\t\t\trr[i]=r[i];\n\t\t}\n\t\trc[i]=lc[i]=v;\n\t\ttag[i]=v;\n\t\treturn;\n\t}\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) change(x,y,i<<1,v);\n\telse if(x>mid) change(x,y,i<<1|1,v);\n\telse change(x,y,i<<1,v),change(x,y,i<<1|1,v);\n\tif(rc[i<<1]==lc[i<<1|1]&&rc[i<<1]) sum[i]=sum[i<<1]+sum[i<<1|1]-1;//\u540c\u4e0a\u4e00\u4efd\u4ee3\u7801\n\telse sum[i]=sum[i<<1|1]+sum[i<<1];\n\trc[i]=rc[i<<1|1];\n\tlc[i]=lc[i<<1];\n    //\u6700\u53f3\u8fb9\u7684\u72b6\u6001\u6765\u81ea\u4e8e\u53f3\u513f\u5b50\uff0c\u6700\u5de6\u8fb9\u7684\u72b6\u6001\u6765\u81ea\u4e8e\u5de6\u513f\u5b50\n\tll[i]=ll[i<<1];\n\trr[i]=rr[i<<1|1];\n    //\u66f4\u65b0\u6269\u5c55\u7684\u533a\u95f4\n}\nnode query(int x,int y,int i)\n{\n\tif(x<=l[i]&&y>=r[i]) return (node){sum[i],ll[i],rr[i]};\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) return query(x,y,i<<1);\n\tif(x>mid) return query(x,y,i<<1|1);\n\tnode q1=query(x,y,i<<1),q2=query(x,y,i<<1|1);\n\tif(rc[i<<1]==lc[i<<1|1]&&rc[i<<1]) return (node){q1.a+q2.a-1,min(q1.b,q2.b),max(q1.c,q2.c)};\n\treturn (node){q1.a+q2.a,min(q1.b,q2.b),max(q1.c,q2.c)};\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n;\n\tint xx,yy;\n\tint maxx=0,minn=99999999;\n\tfor(re int i=0;i<n;++i)\n\t{\n\t\tcin>>p[i];\n\t\tif(p[i]=='A') cin>>x[i]>>y[i],maxx=max(maxx,y[i]),minn=min(minn,x[i]);\n\t}\n\tbuild(minn,maxx,1);\n\tfor(re int i=0;i<n;++i)\n\t{\n\t\tif(p[i]=='B') cout<<m-tot<<endl;\n\t\tif(p[i]=='A')\n\t\t{\n\t\t\tnode now=query(x[i],y[i],1);\n\t\t\tcout<<now.a<<endl;\n\t\t\ttot+=now.a;\n\t\t\tif(now.a) change(now.b,now.c,1,0);\n\t\t\tchange(x[i],y[i],1,++m);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1529225413,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]\u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u5b9e\u9645\u4e0a\uff0c\u5927\u6982\u65b9\u6cd5\u697c\u4e0a\uff08\u697c\u4e0b\uff1f\uff09\u7684\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u662f\u5229\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u533a\u95f4\uff0c\u5176\u5b9e\u5c31\u662f\u533a\u95f4\u6811\u3002\u4f3c\u4e4e\u7ebf\u6bb5\u6811\u67d3\u8272\u4e5f\u80fd\u505a\uff1f\u4e0d\u8fc7\u6211\u4e0d\u4f1a\uff08\u9003\uff09\n\n\n\u6211\u7684\u4ee3\u7801\u4e3b\u8981\u662f\u6539\u8fdb\u4e86\u4e00\u4e0b\u641c\u7d22\u91cd\u590d\u533a\u95f4\u7684\u95ee\u9898\uff0c\u697c\u4e0a\u7684\u5927\u90fd\u662f\u6bcf\u6b21\u53ea\u627e\u5230\u4e00\u4e2a\u533a\u95f4\u4e0e\u76ee\u6807\u533a\u95f4\u91cd\u5408\uff0c\u7136\u540e\u9010\u6b21\u7edf\u8ba1\uff0c\u867d\u7136\u56e0\u4e3a\u6bcf\u4e2a\u533a\u95f4\u6700\u591a\u4f1a\u8fdb\u51fa\u4e00\u6b21\uff0c\u4f46\u662f\u4f9d\u65e7\u4f1a\u9020\u6210\u4e00\u5b9a\u7684\u6d6a\u8d39\uff0c\u800c\u6211\u7684\u662f\u4e00\u6b21\u904d\u5386\u4e86\u6574\u68f5\u6811\uff0c\u4e00\u8fb9\u67e5\u627e\uff0c\u4e00\u8fb9\u8ba1\u6570\uff0c\u4e00\u8fb9\u5220\u9664\u91cd\u53e0\u533a\u95f4\uff0c\u4ee3\u7801\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n\n```cpp\nstruct NODE{ \n    int L, R, fix, size, max;\n    NODE *ls, *rs;\n    NODE(int l, int r) { \n        L = l, max = R = r;\n        fix = rand(), size = 1;\n        ls = rs = NULL;\n    }\n    inline void Update(void);\n};\n\nNODE *root;\n\nint Find(NODE *&node, int L, int R) { \n    if(!node || node->max < L) return 0;\n    int cnt = 0;\n    bool flag = false; //\u505a\u4e2a\u6807\u8bb0\u5224\u65ad\u662f\u5426\u4e0e\u76ee\u6807\u533a\u95f4\u91cd\u53e0\n    if(L <= node->R && R >= node->L) cnt = 1, flag = true;\n    if(R >= node->L) cnt += Find(node->rs, L, R);\n    if(node->ls) cnt += Find(node->ls, L, R);\n    node->Update();\n    if(flag) Remove(node);\n    /* \u5982\u679c\u91cd\u53e0\u5c31\u5220\u9664\uff0c\u4e0d\u5728\u627e\u5230\u4e4b\u540e\u76f4\u63a5\u5220\u9664\u662f\u56e0\u4e3a\u8fd8\u8981\u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\n     * \u5982\u679c\u76f4\u63a5\u5220\u9664\u5728\u540e\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u5c31\u4f1a\u51fa\u73b0\u53d8\u5316\uff0c\u867d\u8bf4\u7279\u5224\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u8fd8\u4e0d\u5982\u5c06\u5220\u9664\u64cd\u4f5c\u653e\u5728\u540e\u9762\n     */\n    return cnt;\n}\n```\n\n-------\n\n\n\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <ctime>\nusing namespace std;\n\ninline char getc(void) { \n    static char buf[1 << 18], *fs, *ft;\n    return (fs == ft && (ft = (fs = buf) + fread(buf, 1, 1 << 18, stdin)), fs == ft) ? EOF : *fs++;\n}\n\ninline int read(void) { \n    char tmp = getc();\n    int res = 0;\n    for(; !isdigit(tmp); tmp = getc());\n    for(; isdigit(tmp); tmp = getc())\n        res = ((res + (res << 2)) << 1) + (tmp ^ 0x30);\n    return res;\n}\n\ninline int read(char *s) { \n    char *p = s;\n    while(!isgraph(*p = getc()));\n    while(isgraph(*(++p) = getc()));\n    *p = '\\0';\n    return p - s;\n}\n\nconst int INF = 0x7fffffff;\n\nstruct NODE{ \n    int L, R, fix, size, max;\n    NODE *ls, *rs;\n    NODE(int l, int r) { \n        L = l, max = R = r;\n        fix = rand(), size = 1;\n        ls = rs = NULL;\n    }\n    inline void Update(void);\n};\n\ninline void LeftRotate(NODE *&k2);\ninline void RightRotate(NODE *&k2);\nvoid Insert(NODE *&node, int L, int R);\nint Find(NODE *&node, int L, int R);\nvoid Remove(NODE *&node);\n\nNODE *root;\nint N, a, b;\nchar str[3];\n\nint main() { \n    srand(time(NULL));\n    N = read();\n    while(N--) { \n        read(str);\n        if(*str == 'A') { \n            a = read(), b = read();\n            printf(\"%d\\n\", Find(root, a, b));\n            Insert(root, a, b);\n        } else if(root == NULL) printf(\"0\\n\");\n        else printf(\"%d\\n\", root->size);\n    }\n    return 0;\n}\n\ninline void NODE::Update(void) { \n    size = 1 + (ls ? ls->size : 0) + (rs ? rs->size : 0);\n    max = ::max(R, ::max(ls ? ls->max : -INF, rs ? rs->max : -INF));\n    //\u66f4\u65b0\u7684\u65f6\u5019\u6ce8\u610f\u5de6\u53f3\u5b50\u6811\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u3002\n}\n\ninline void LeftRotate(NODE *&k2) { \n    NODE *k1 = k2->rs;\n    k2->rs = k1->ls;\n    k1->ls = k2;\n    k2->Update(), k1->Update();\n    k2 = k1;\n}\n\ninline void RightRotate(NODE *&k2) { \n    NODE *k1 = k2->ls;\n    k2->ls = k1->rs;\n    k1->rs = k2;\n    k2->Update(), k1->Update();\n    k2 = k1;\n}\n\nvoid Insert(NODE *&node, int L, int R) { \n    if(!node) node = new NODE(L, R);\n    else if(L < node->L) { \n        Insert(node->ls, L, R);\n        if(node->ls->fix < node->fix) RightRotate(node);\n        else node->Update();\n    } else { \n        Insert(node->rs, L, R);\n        if(node->rs->fix < node->fix) LeftRotate(node);\n        else node->Update();\n    }\n}\n\nint Find(NODE *&node, int L, int R) { \n    if(!node || node->max < L) return 0;\n    int cnt = 0;\n    bool flag = false;\n    if(L <= node->R && R >= node->L) cnt = 1, flag = true;\n    if(R >= node->L) cnt += Find(node->rs, L, R);\n    if(node->ls) cnt += Find(node->ls, L, R);\n    node->Update();\n    if(flag) Remove(node);\n    return cnt;\n}\n\nvoid Remove(NODE *&node) { \n    if(node->ls && node->rs) { \n        if(node->ls->fix < node->rs->fix)\n            RightRotate(node), Remove(node->rs);\n        else LeftRotate(node), Remove(node->ls);\n        node->Update();\n    } else { \n        NODE *t = node;\n        if(node->ls) node = node->ls;\n        else node = node->rs;\n        delete t;\n    }\n}\n```\n",
        "postTime": 1516838663,
        "uid": 24932,
        "name": "wanzzhehe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "\u672c\u9898\u5176\u5b9e\u5c31\u662f\u8ba9\u4f60\u7ef4\u62a4\u4e00\u4e2a\u7531\u4e0d\u76f8\u4ea4\u533a\u95f4\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e73\u8861\u6811\u6765\u7ef4\u62a4\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u4e0d\u65ad\u5220\u9664\u5b83\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\uff0c\u76f4\u5230\u5b83\u4e0e\u5b83\u7684\u524d\u9a71\u548c\u540e\u7ee7\u4e0d\u76f8\u4ea4\u4e3a\u6b62\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u533a\u95f4\u81f3\u591a\u88ab\u63d2\u5165\u4e00\u6b21\uff0c\u5220\u9664\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f\u5747\u644a$O(nlogn)$\u7684\u3002\n\n\u5b9e\u73b0\u4e0a\u9700\u8981\u6ce8\u610f\u7684\u662f\u5e73\u8861\u6811\u662f\u53ef\u4ee5\u5728\u63d2\u5165\u548c\u5220\u9664\u65f6\u7ef4\u62a4\u524d\u9a71\u548c\u540e\u7ee7\u800c\u4e0d\u5f71\u54cd\u5b83\u4eec$O(logn)$\u7684\u590d\u6742\u5ea6\u7684\uff0c\u6ca1\u6709\u5fc5\u8981\u6bcf\u6b21\u53bb\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\u3002\n\n\u53e6\u5916\u672c\u9898\u7531\u4e8e\u6bcf\u6b21\u67e5\u8be2\u90fd\u662f\u67e5\u8be2\u5168\u90e8\u533a\u95f4\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ef4\u62a4\u4e00\u4e2a$size$\u57df\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u7ef4\u62a4\u3002\n\n\u4f7f\u7528$Treap$\u5b9e\u73b0\u7684\u5e73\u8861\u6811\uff1a\n\n```cpp\nnamespace Treap {\n    struct Node {\n        int l, r, w;\n        Node *ch[2], *prec, *succ;\n        \n        int cmp(int a, int b) {\n            return a == l ? b == r ? -1 : b > r : a > l; \n        }\n    } node[MAXN], *null = &node[0], *root = node;\n    \n    int cnt;\n    \n#define newnode() &node[++ cnt]\n#define Rand() (rand() << 15 | rand())\n    inline Node *Find(int l, int r) {\n        int d;\n        Node *k = root;\n        \n        while (k != null) {\n            d = k->cmp(l, r);\n            if (d == -1)\n                return k;\n            k = k->ch[d];\n        }\n        return k;\n    }\n    \n    inline void Rotate(Node *&o, int d) {\n        Node *k = o->ch[d ^ 1];\n        o->ch[d ^ 1] = k->ch[d];\n        k->ch[d] = o;\n        o = k;\n    }\n    \n    Node *Insert(Node *&o, Node *p, Node *s, int l, int r) {\n        if (o == null) {\n            o = newnode();\n            o->ch[0] = o->ch[1] = null;\n            o->prec = p, o->succ = s;\n            p->succ = s->prec = o;\n            o->l = l, o->r = r;\n            o->w = Rand();\n            return o;\n        }\n        \n        int d = o->cmp(l, r);\n        Node *k;\n        if (d)\n            k = Insert(o->ch[d], o, s, l, r);\n        else\n            k = Insert(o->ch[d], p, o, l, r);\n        \n        if (o->ch[d]->w > o->w)\n            Rotate(o, d ^ 1);\n        return k;\n    }\n    \n    void Remove(Node *&o, int l, int r) {\n        int d = o->cmp(l, r);\n        if (d != -1) {\n            Remove(o->ch[d], l, r);\n            return;\n        }\n        \n        int m;\n        if (o->ch[0] != null && o->ch[1] != null) {\n            m = o->ch[0]->w > o->ch[1]->w;\n            Rotate(o, m);\n            Remove(o->ch[m], l, r);\n            return;\n        }\n        \n        o->prec->succ = o->succ;\n        o->succ->prec = o->prec;\n        if (o->ch[0] == null)\n            o = o->ch[1];\n        else\n            o = o->ch[0];\n    }\n};\n```\n\u4e3b\u7a0b\u5e8f\uff1a\n\n```cpp\nint main() {\n    srand(19260817);\n    init();\n    \n    int n = read_int(), dx, dy, num = 0, ans;\n    char com;\n    Node *m;\n    \n    For(i, 1, n) {\n        com = read_char();\n        \n        if (com == 'A') {\n            dx = read_int(), dy = read_int();\n            if (Find(dx, dy) != null) {\n                puts(\"1\");\n                continue;\n            }\n            \n            ans = 0;\n            m = Insert(root, null, null, dx, dy);\n            while (m->prec != null && m->prec->r >= m->l)\n                Remove(root, m->prec->l, m->prec->r), ++ ans;\n            while (m->succ != null && m->succ->l <= m->r)\n                Remove(root, m->succ->l, m->succ->r), ++ ans;\n            num += 1 - ans;\n            printf(\"%d\\n\", ans);\n        }\n        else\n            printf(\"%d\\n\", num);\n    }\n    return 0;\n}\n```",
        "postTime": 1514911963,
        "uid": 30043,
        "name": "sjkmost",
        "ccfLevel": 0,
        "title": "Luogu2161  [SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6"
    },
    {
        "content": "\u524d\u9762dalao\u7684gaoji\u7ebf\u6bb5\u6811\u95ea\u95ea\u53d1\u5149\n\n\u6211\uff1a\uff08\u611a\u8822\u7684\u840c\u65b0\u73a9\u5bb6-10000\uff09\n\n\u6211\u7684\u7ebf\u6bb5\u6811\u5199\u6cd5\u5982\u4e0b\uff1a\n\n\u7ef4\u62a4\u6b63\u5e38\u7684\u67d3\u8272\u7ebf\u6bb5\u6811\u6807\u8bb0\u4ee5\u53ca\u6b63\u5e38\u7684\u52a0\u548c\u6807\u8bb0\n\n\u6bcf\u6bb5\u989c\u8272\u5728\u5de6\u7aef\u70b9\u52a0\u4e0a1\n\n\u56e0\u4e3a\u80af\u5b9a\u662f\u5168\u90e8\u64e6\u9664\u7684\u6240\u4ee5\u5230\u65f6\u5019\uff08\u8be2\u95ee&\u64e6\u9664\uff09\u76f4\u63a5\u7edf\u8ba1\u548c\u5c31\u597d\u5566\n\n\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u770b\u4e00\u770b\u5de6\u53f3\u662f\u4e0d\u662f\u8fd8\u6709\u989c\u8272\uff08\u67e5\u8be2\uff09\uff0c\u6709\u7684\u8bdd\u53ef\u4ee5\u5411\u4e24\u8fb9\u62d3\u5c55\uff08\u4e00\u4e2a\u8f83\u5927\u7684\u533a\u95f4\uff09\n\n\u7136\u540e\u64e6\u9664\u5927\u533a\u95f4\uff0c\u67d3\u8272\u5c0f\u533a\u95f4\u5c31\u597d\u4e86\n\n\u5e94\u8be5\u662fO\uff08nlogn\uff09\u7684\uff0c\u4f46\u6211\u7684\u4ee3\u7801\u4e0d\u6e05\u771f\uff0c\u4e0d\u5f00O2\u4f1a\u88ab\u5361TAT\n\n\u4ee5\u4e0b\u662f\u4e0d\u6e05\u771f\u7684\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cstdlib>\n\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <string>\n\n#include <algorithm>\n#include <queue>\n#include <stack>\n\nusing namespace std;\nint N;\nstruct node\n{\n    int color,ctag,num,ntag;\n} T[100010<<3];\npair<int,int> req[200010];\nconst int maxn=100010;\n/**\ncolor: -1 multi-color 0 white\nctag: color to draw ,-1 invalid\nnum:number of the color(extra 1 added at left point)\nntag: number tag,-1 invalid;\n*/\n// code\nvoid build_tree(int L,int R,int id=1)\n{\n    if(L==R)\n        return;\n    int mid=(L+R)>>1;\n    T[id].ctag=-1;\n    T[id].ntag=-1;\n    build_tree(L,mid,id<<1);\n    build_tree(mid+1,R,id<<1|1);\n}\nvoid clean_mark(int id)\n{\n    if(T[id].ctag!=-1)\n    {\n        T[id].color=T[id].ctag;\n        T[id<<1].ctag=T[id<<1|1].ctag=T[id].ctag;\n        T[id].ctag=-1;\n    }\n    if(T[id].ntag!=-1)\n    {\n        T[id].num=T[id].ntag;\n        T[id<<1].ntag=T[id<<1|1].ntag=T[id].ntag;\n        T[id].ntag=-1;\n    }\n}\nvoid delete_tree(int B,int E,int L,int R,int id=1)\n{\n    if(L>E||R<B)\n        return;\n    //printf(\"delete_tree %d,%d,%d,%d,%d\\n\",B,E,L,R,id);\n    clean_mark(id);\n    if(L>=B&&R<=E)\n    {\n        memset(T+id,0,sizeof (node));\n        return;\n    }\n    if(L==R)\n        return;\n    int mid=(L+R)>>1;\n    delete_tree(B,E,L,mid,id<<1);\n    delete_tree(B,E,mid+1,R,id<<1|1);\n    ///push_up\n    clean_mark(id<<1);\n    clean_mark(id<<1|1);\n    if(T[id<<1].color==T[id<<1|1].color&&T[id<<1].color!=-1)\n        T[id].color=T[id<<1].color;\n    else\n        T[id].color=-1;\n    T[id].num=T[id<<1].num+T[id<<1|1].num;\n    T[id].ntag=T[id].ctag=-1;\n}\ninline int query_num()\n{\n    clean_mark(1);\n    return T[1].num;\n}\nvoid color_tree(int B,int E,int color,int L,int R,int id=1)\n{\n    if(L>E||R<B)\n        return;\n    //printf(\"color_tree %d,%d,%d,%d,%d\\n\",B,E,L,R,id);\n    clean_mark(id);\n    if(L>=B&&R<=E)\n    {\n        T[id].ctag=color;\n        if(L==B)\n            T[id].ntag=1;\n        return;\n    }\n    if(L==R)\n        return;\n    int mid=(L+R)>>1;\n    color_tree(B,E,color,L,mid,id<<1);\n    color_tree(B,E,color,mid+1,R,id<<1|1);\n    ///push_up\n    clean_mark(id<<1);\n    clean_mark(id<<1|1);\n    if(T[id<<1].color==T[id<<1|1].color&&T[id<<1].color!=-1)\n        T[id].color=T[id<<1].color;\n    else\n        T[id].color=-1;\n    T[id].num=T[id<<1].num+T[id<<1|1].num;\n    T[id].ntag=T[id].ctag=-1;\n}\nint query_color(int B,int E,int L,int R,int id=1)\n{\n    if(L>E||R<B)\n        return 0;\n    //printf(\"query_color %d,%d,%d,%d,%d\\n\",B,E,L,R,id);\n    clean_mark(id);\n    if(L>=B&&R<=E)\n    {\n        return T[id].color;\n    }\n    if(L==R)\n        return 0;\n    int mid=(L+R)>>1;\n    return query_color(B,E,L,mid,id<<1)+query_color(B,E,mid+1,R,id<<1|1);\n}\nint main()\n{\n    scanf(\"%d\",&N);\n    build_tree(1,maxn);\n    for(int i=1; i<=N; ++i)\n    {\n        char C;\n        int x,y;\n        int b,e,n1,n2;\n        scanf(\"%1s\",&C);\n        if(C=='B')\n        {\n            printf(\"%d\\n\",query_num());\n        }\n        else if(C=='A')\n        {\n            scanf(\"%d%d\",&x,&y);\n            req[i].first=x,req[i].second=y;\n            b=x,e=y;\n\n\n            int cl1=query_color(x,x,1,maxn),cl2=query_color(y,y,1,maxn);\n            if(cl1)\n                b=req[cl1].first;\n            if(cl2)\n                e=req[cl2].second;\n            //printf(\">: delete [%d,%d]\\n\",b,e);\n            n1=query_num();\n            delete_tree(b,e,1,maxn,1);\n            n2=query_num();\n            color_tree(x,y,i,1,maxn,1);\n\n            //printf(\"%d=%d-%d\\n\",n1-n2,n1,n2);\n            printf(\"%d\\n\",n1-n2);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1508232750,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    },
    {
        "content": "##ckw\u67d3\u8272\u7ebf\u6bb5\u6811 \u4ee5\u4e0b\u7b80\u79f0\u67d3\u8272\u6811\n\n[\u6342\u8138\u5212\u6389]\u7136\u800c\u5e76\u6ca1\u6709\u90a3\u4e48\u5389\u5bb3\u5404\u4f4d\u80af\u5b9a\u5728\u767e\u5ea6\u4e0a\u4ec0\u4e48\u7684\u67e5\u4e0d\u5230\n\n\u53ea\u4e0d\u8fc7\u662f\u849f\u84bb\u968f\u968f\u4fbf\u4fbf\u8d77\u4e86\u4e00\u4e2a\u540d\u5b57\n\n\u5176\u5b9e\u8d28\u662f\u849f\u84bb\u770b\u5230\u8fd9\u9053\u9898\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u60f3\u6cd5\n\n\u5c31\u968f\u4fbf\u4e71\u641e\u4e86\u4e00\u4e0b\u52a0\u4e2a\u4f18\u8bfb\u6b3a\u8d1f\u4e00\u4e0b\u6570\u636e\u5f31\uff08\u8868\u793a\u5df2\u7ecf\u7528\u8fd9\u4e2a\u67d3\u8272\u6811\u4e71\u641eA\u6389\u5f88\u591a\u9898\u4e86\u67d0\u4e2a\u9898\u8c8c\u4f3c\u8fd8\u6bd4\u6b63\u89e3\u5feb\u4f46\u662f\u5185\u5b58\u5927\u8bb8\u591a\uff09\n\n\u7136\u800c\u4f5c\u4e3a\u849f\u84bb\u7684\u7b2c\u4e8c\u9053\u7701\u9009 \u5c31\u7528\u8fd9\u4e2a\u540d\u79f0\u6765\u7eaa\u5ff5\u4e00\u4e0b\n\n\u5176\u5b9e\u8fd9\u4e2a\u6240\u8c13\u7684\u67d3\u8272\u6811\u5c31\u662f\u4e00\u4e2a\u652f\u6301\u5220\u9664\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u7528\u4e0b\u653e\u6807\u8bb0\u3002\n\n\u5982\u679c\u6309\u7167\u539f\u6765\u7684\u6a21\u677f\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n\u6574\u4e2a\u7ebf\u6bb5\u662f1---8\uff0c\u5df2\u7ecf\u67091---4\u88ab\u67d3\u8272\uff0c\u8fd9\u6b21\u8981\u67d3\u8272\u7684\u662f1---8\uff0c\u76f4\u63a5\u67d3\u6839\u8282\u70b9\u5373\u53ef\uff0c\u4f46\u662f1---4\u7531\u4e8e\u662f\u6839\u7684\u5de6\u5b50\u6811\uff0c\u5e76\u6ca1\u6709\u56e0\u4e3a\u76f8\u4ea4\u800c\u88ab\u8986\u76d6\u3002\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u6bd4\u4e00\u822c\u7ebf\u6bb5\u6811\u591a\u7684\u552f\u4e00\u4e00\u4e2a\u5c31\u662f\u9664\u4e86\u4fdd\u5b58\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u6709\u88ab\u5168\u90e8\u67d3\u8272(ctag)\u4ee5\u5916\uff0c\u8fd8\u8bb0\u5f55\u4e86\u5176\u5de6\u53f3\u5b50\u6811\u662f\u5426\u6709\u88ab\u67d3\u8272\u7684\u5b69\u5b50(ltag,rtag).\u8fd9\u6837\uff0c\u63d2\u5165\u64cd\u4f5c(insert\\_seg)\u5c31\u662f\uff1a\u5982\u679c\u5f53\u524d\u533a\u95f4\u5df2\u7ecf\u88ab\u67d3\u8272\uff0c\u672c\u6b21\u88ab\u5220\u9664\u989c\u8272+1\uff0c\u5220\u9664\u8fd9\u4e2a\u989c\u8272(delete\\_seg\u56e0\u4e3a\u6b64\u65f6\u8fd8\u6ca1\u6709\u6d82\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u4e4b\u524d\u88ab\u6d82\u4e0a\u7684\u88ab\u64e6\u6389)\uff1b\u7136\u540e\uff0c\u82e5\u88ab\u8986\u76d6\uff0c\n\n1\uff09\u82e5ltag=rtag=0\u5219\u76f4\u63a5\u6253\u6807\u8bb0(ctag=color,ltag=rtag=0)\u3002\n\n2\uff09\u82e5ltag\u6216\u8005rtag\u4e0d\u7b49\u4e8e\u96f6\uff0c\u5219\u5728\u5de6\u6216\u53f3\u5b50\u6811\u63d2\u5165\u4e00\u6761\u503c\u4e3a0\u7684\u7ebf\u6bb5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5de6\u53f3\u5b50\u6811\u6e05\u7a7a\u5e76\u5220\u9664\u76f8\u4ea4\u533a\u95f4\u3002\n\n\u7136\u540e\u9000\u51fa\u3002\n\n\u4e4b\u540e\uff0c\u5982\u679c\u8981\u67d3\u5de6\u5b50\u6811\uff0c\u5c31\u53bb\u67d3\uff0c\u5e76\u8ba9ltag=1\uff1b\u53f3\u5b50\u6811\u540c\u7406\u3002\n\n\u5220\u9664\u64cd\u4f5c\u662f\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u6bb5\u88ab\u8986\u76d6\uff0c\u5c31\u6e05\u96f6\u5e76\u9000\u51fa\u3002\n\n\u5982\u679c\u8981\u5728\u5de6\u5b50\u6811\u4e2d\u5220\u9664\uff0c\u5c31\u53bb\u5220\uff0c\u5e76\u66f4\u65b0ltag\uff0c\u53f3\u5b50\u6811\u540c\u7406\u3002\n\n\u5982\u679c\u5f53\u524d\u5b50\u6811\u53ca\u5176\u5b69\u5b50\u6ca1\u6709\u88ab\u67d3\u8272\u7684\u70b9(ltag==rtag==0) \u90a3\u4e48\u8fd4\u56de0\uff0c\u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u662f\u7a7a\u7684\uff0c\u5426\u5219\u8fd4\u56de1\u3002\u8fd9\u4e2a\u8fd4\u56de\u662f\u7528\u6765\u66f4\u65b0\u4e0a\u4e00\u7ea7\u7684ltag\u548crtag\u7684\u3002\n\n\u4e4b\u6240\u4ee5\u662f\u5bf9\u7684\uff08\u5e76\u4e14\u6ca1\u6709TLE\uff09\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u5728insert\\_seg\u4e2d\u63d0\u51fa\u8981\u5220\u9664\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u662f\u7b2c\u4e00\u6b21\u627e\u5230\uff0c\u5e76\u4e14\u5fc5\u7136\u8fd8\u6ca1\u6709\u67d3\u4e0a\u8fd9\u6b21\u8981\u67d3\u7684\u989c\u8272\uff0c\u90a3\u4e48\u5220\u9664\u540e\uff0c\u4e4b\u540e\u5c31\u4e0d\u4f1a\u518d\u5220\u9664\u4e86\u3002\u53e6\u5916\uff0c\u7531\u4e8e\u533a\u95f4\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u5220\u9664\u7684\u65f6\u5019\u53ea\u6709\u628a\u8fd9\u4e00\u533a\u95f4\u7684\u4e0d\u662f0\u7684\u989c\u8272\u90fd\u6e05\u96f6\u5373\u53ef\u3002\n\n\u597d\u5427\u849f\u84bb\u7684\u8bb2\u89e3\u80fd\u529b\u5b9e\u5728\u5dee\u7684\u8981\u6b7b\uff0c\u9644\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\uff08debug\u662f\u7528\u6765\u8f93\u51fa\u7ebf\u6bb5\u8c03\u8bd5\u7528\u7684\uff09\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxl 100000\n#define seg_cnt segment_count\n#define del_seg_cnt delete_segment_count\n#define del_cnt delete_count\nusing namespace std;\nstruct segment{\n    int left,right,ltag,rtag,ctag;\n    segment *tc,*rc;\n}*final_root;\nstruct segment_list{\n    int left,right;\n}list[200010];\nint segment_count,delete_count,delete_segment_count;\n        //seg_cnt,del_cnt,del_seg_cnt\nint get_num()\n{\n    char ch;\n    bool flag=false;\n    int num;\n    while((ch=getchar())==' '||ch=='\\r'||ch=='\\n');\n    if(ch=='-') flag=true;\n    else num=ch-'0';\n    while(isdigit(ch=getchar())) num=num*10+ch-'0';\n    return num;\n}\nint delete_seg(segment* &root,int s,int t)\n{\n    int l=root->left,r=root->right;\n    int &lt=root->ltag,&rt=root->rtag,&ct=root->ctag;\n    if(s<=l&&r<=t)\n    {\n        lt=rt=ct=0;\n        return 0;\n    }\n    int mid=(l+r)/2;\n    if(s<=mid) lt=delete_seg(root->tc,s,t);\n    if(mid<t) rt=delete_seg(root->rc,s,t);\n    if(lt==0&&rt==0) return 0;\n    else return 1;\n}\nint insert_seg(segment* &root,int s,int t,int color)\n{\n    int l=root->left,r=root->right;\n    int &lt=root->ltag,&rt=root->rtag,&ct=root->ctag;\n//    printf(\"l=%d r=%d lt=%d rt=%d ct=%d\\n\",l,r,lt,rt,ct);\n    if(ct!=0) delete_seg(final_root,list[ct].left,list[ct].right),del_cnt++;\n    if(s<=l&&r<=t)\n    {\n        if(lt!=0) insert_seg(root->tc,s,t,0);\n        if(rt!=0) insert_seg(root->rc,s,t,0);\n        lt=rt=0;ct=color;return 0;\n    }\n    int mid=(l+r)/2;\n    if(s<=mid) insert_seg(root->tc,s,t,color),lt=1;\n    if(mid<t) insert_seg(root->rc,s,t,color),rt=1;\n    return 0;\n}\nint build_seg(segment* &root,int s,int t)\n{\n    root=new segment;\n    root->left=s;\n    root->right=t;\n    root->ltag=root->rtag=root->ctag=0;\n    if(s==t)\n    {\n        root->tc=root->rc=NULL;\n        return 0;\n    }\n    int mid=(s+t)/2;\n    if(s<=mid) build_seg(root->tc,s,mid);\n    if(mid<t) build_seg(root->rc,mid+1,t);\n    return 0;\n}\nint debug(segment *root)\n{\n    if(root->ctag!=0)\n    {\n        for(int i=root->left;i<=root->right;i++)\n            cout<<root->ctag<<\" \";\n        return 0;\n    }\n    if(root->left==root->right){\n        cout<<root->ctag<<\" \";\n        return 0;\n    }\n    debug(root->tc);\n    debug(root->rc);\n    return 0;\n}\nint main()\n{\n    seg_cnt=del_seg_cnt=0;\n    int q;q=get_num();\n    build_seg(final_root,1,maxl);\n    while(q--)\n    {\n        char ch;\n        while((ch=getchar())==' '||ch=='\\r'||ch=='\\n');\n        if(ch=='A'){\n            int s,t;s=get_num();t=get_num();\n            del_cnt=0;\n            seg_cnt++;\n            list[seg_cnt].left=s;\n            list[seg_cnt].right=t;\n            insert_seg(final_root,s,t,seg_cnt);\n            printf(\"%d\\n\",del_cnt);\n            del_seg_cnt+=del_cnt;\n        }\n        else printf(\"%d\\n\",seg_cnt-del_seg_cnt);\n    }\n    return 0;\n}\n```",
        "postTime": 1476541697,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2161 \u3010[SHOI2009]Booking \u4f1a\u573a\u9884\u7ea6\u3011"
    }
]