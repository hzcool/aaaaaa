[
    {
        "content": "\u8fd9\u4e00\u9898\u975e\u5e38\u4e4b\u7ed5\u3002\u9996\u5148\u9700\u8981\u5f04\u6e05\u695a\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5\uff1a\n\n1. \u7267\u533a\uff1a \u5bf9\u5e94\u4e00\u4e2a\u70b9\u3002\n2. \u7267\u533a\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1a\u5b9e\u9645\u4e0a\u662f\u4e24\u70b9\u4e4b\u95f4\u7684 **\u6700\u77ed\u8def**\u3002 \u4e0d\u8981\u7406\u89e3\u6210\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u3002\u53ea\u6709 **\u76f4\u63a5\u8fde\u63a5** \u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u8ba1\u7b97\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u3002\n3. \u7267\u573a\uff1a \u4e00\u4e2a\u8fde\u901a\u5757\u3002\n4. \u7267\u573a\u76f4\u5f84\uff1a \u4e00\u4e2a\u7267\u573a\u7684\u76f4\u5f84\u662f\u8fd9\u4e2a\u7267\u573a\u6240\u6709\u7684\u7267\u533a\uff08\u70b9\uff09\u4e4b\u95f4 **\u8ddd\u79bb** \u7684\u6700\u5927\u503c\u3002 \u8bf4\u7684\u7ed5\u4e00\u70b9\u5c31\u662f **\u6700\u77ed\u8def**\u7684\u6700\u5927\u503c\u3002\n5. \u4f7f\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u7267\u573a\uff0c\u4f7f\u5f97\u5408\u6210\u7684\u4e00\u4e2a\u65b0\u7684\u7267\u573a\u7684\u76f4\u5f84\u6700\u5c0f\u3002\u610f\u601d\u662f\u52a0\u5165\u4e00\u6761\u8fb9\u4e4b\u540e\uff0c\u4f7f\u5f97\u65b0\u7684\u7267\u573a\u7684\u6240\u6709\u70b9\u5bf9\u4e4b\u95f4 **\u6700\u77ed\u8def** \u7684\u6700\u5927\u503c \u6700\u5c0f\u3002\n\n\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u601d\u8def\u662f\uff1a\n\n1. \u4f7f\u7528 DFS \u5bf9\u8fde\u901a\u5757\u67d3\u8272\u6807\u8bb0\uff1a\u533a\u5206\u7267\u573a\u3002$O(V + E) = O(n^2)$\n2. \u4f7f\u7528 Floyd-Warshall \u7b97\u6cd5\u8ba1\u7b97\u6240\u6709\u70b9\u5bf9\u4e4b\u95f4\u7684 **\u6700\u77ed\u8def**\u3002 $O(n^3)$\n3. \u8ba1\u7b97\u6bcf\u4e2a\u7267\u573a\u4e2d\uff0c\u6bcf\u4e2a\u7267\u533a\u70b9\u5230\u5176\u4ed6\u70b9\u7684 **\u6700\u77ed\u8def** \u7684\u6700\u5927\u503c\u3002\uff08\u540e\u9762\u52a0\u8fb9\u7684\u65f6\u5019\u8981\u7528\uff09\n4. \u8ba1\u7b97\u6bcf\u4e2a\u7267\u573a\u4e2d\uff0c\u6240\u6709\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\uff0c\u5373\u6bcf\u4e2a\u7267\u573a\u7684\u76f4\u5f84\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u4e0e 3 \u4e00\u8d77\u8ba1\u7b97\u3002 $O(n^2)$\n5. \u6700\u540e\u662f\u627e\u7b54\u6848\uff1a\u5bf9\u4efb\u610f\u4e24\u4e2a\u70b9\uff0c\u5148\u5224\u65ad\u662f\u5426\u540c\u4e00\u4e2a\u7267\u573a\u3002\u5982\u679c\u4e0d\u662f\uff0c\u8003\u8651\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7267\u573a\u3002\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u901a\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u4e0d\u4e00\u5b9a\u662f\u65b0\u7267\u573a\u7684\u6240\u6709\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u3002\u8fd9\u91cc\u9700\u8981\u6bd4\u8f83\u4e09\u4e2a\u503c\uff08\u7267\u573a A \u7684\u6240\u6709\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\uff1b \u7267\u573a B \u7684\u6240\u6709\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\uff0c \u52a0\u8fb9\u540e\u901a\u8fc7\u8fd9\u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\uff09\uff0c\u624d\u80fd\u5f97\u5230\u6b63\u786e\u7684\u65b0\u7267\u573a\u7684\u76f4\u5f84\u3002 \u904d\u5386\u6240\u6709\u70b9\u5bf9\uff08\u6216\u8005\u4e00\u534a\uff09\uff0c \u627e\u51fa \u201c\u65b0\u76f4\u5f84\u201d \u7684\u6700\u5c0f\u503c\u3002 $O(n^2)$\n\n\n\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^3)$\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u53ea\u662f $O(n^2)$\u3002\n\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point\n{\n    int x, y;\n    double distance(const Point &b)\n    {\n        return sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n    }\n};\n\nconst int MAX_N = 150;\nconst double INF = 1e20;\nint n;\nint field[MAX_N] = {0};\ndouble diameter[MAX_N + 1] = {0};\ndouble dist[MAX_N][MAX_N];\n\nvoid dfs(int i, int id)\n{\n    field[i] = id;\n    for (int j = 0; j < n; ++j)\n        if (!field[j] && dist[i][j] < INF)\n            dfs(j, id);\n}\n\nint main()\n{\n    int i, j, k;\n    Point a[MAX_N];\n    scanf(\"%d\\n\", &n);\n    for (i = 0; i < n; ++i)\n        scanf(\"%d %d\\n\", &a[i].x, &a[i].y);\n    \n    char s[MAX_N + 1];\n    for (i = 0; i < n; ++i)\n    {\n        scanf(\"%s\", s);\n        for (j = 0; j < n; ++j)\n        if (s[j] == '1' || i == j)\n            dist[i][j] = a[i].distance(a[j]);\n        else\n            dist[i][j] = INF;\n    }\n\n    // 1. DFS\n    int id = 0;\n    for (i = 0; i < n; ++i)\n        if (!field[i])\n            dfs(i, ++id);\n    \n    // 2. Floyd-Warshall\n    for (k = 0; k < n; ++k)\n        for (i = 0; i < n; ++i)\n            for (j = 0; j < n; ++j)\n                if (dist[i][k] + dist[k][j] < dist[i][j])\n                    dist[i][j] = dist[i][k] + dist[k][j];\n\n    // 3.4. max_sp: find max shortest path and diameter;\n    double max_sp[MAX_N];\n    for (i = 0; i < n; ++i)\n    {\n        max_sp[i] = 0.0;\n        for (j = 0; j < n; ++j)\n            if (dist[i][j] < INF)\n                max_sp[i] = max(max_sp[i], dist[i][j]);\n        diameter[field[i]] = max(diameter[field[i]], max_sp[i]);\n    }\n\n    // 5. find answer\n    double min_d = INF, max_d;\n    for (i = 0; i < n; ++i)\n        for (j = i + 1; j < n; ++j)\n            if (field[i] != field[j])\n            {\n                max_d = max(max(diameter[field[i]], diameter[field[j]]),\n                            max_sp[i] + a[i].distance(a[j]) + max_sp[j]);\n                min_d = min(min_d, max_d);\n            }\n\n    printf(\"%.6f\\n\", min_d);\n\n    return 0;\n}\n```\n",
        "postTime": 1536123139,
        "uid": 117330,
        "name": "heidoudou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1522 \u3010\u725b\u7684\u65c5\u884c Cow Tours\u3011"
    },
    {
        "content": "\u8bbe\u5c06\u8981\u5408\u5e76\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u4e3a $A,B$\uff0c\u65b0\u6dfb\u52a0\u7684\u8fb9\u4e3a $(i,j)$\uff08\u5176\u4e2d $i \\in A$\uff0c$j \\in B$\uff09\uff0c\u65b0\u8fde\u901a\u5757\u4e3a $S$\u3002\n\n\u8003\u8651\u8fde\u4e0a $(i,j)$ \u8fb9\u540e\uff0c$S$ \u8fde\u901a\u5757\u76f4\u5f84\u662f\u600e\u6837\u6784\u6210\u7684\u3002\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. $A$ \u8fde\u901a\u5757\u7684\u76f4\u5f84\uff1b\n2. $B$ \u8fde\u901a\u5757\u7684\u76f4\u5f84\uff1b\n3. $A$ \u8fde\u901a\u5757\u91cc\u4ece $i$ \u70b9\u51fa\u53d1\u7684\u6700\u8fdc\u8def\u5f84 + $(i,j)$ \u8fd9\u4e00\u6761\u8fb9 + $B$ \u8fde\u901a\u5757\u91cc\u4ece $j$ \u70b9\u51fa\u53d1\u7684\u6700\u8fdc\u8def\u5f84\u3002\n\n\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u56e0\u4e3a $n \\leq 150$\uff0c\u53ef\u4ee5\u7528 Floyd \u7b97\u6cd5\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u548c\u4ece\u4efb\u610f\u4e00\u70b9\u51fa\u53d1\u7684\u6700\u8fdc\u8def\u5f84\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u548c\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84\u3002\n\n\u968f\u540e\u679a\u4e3e\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u4e24\u4e2a\u70b9 $i,j$\uff0c\u53d6\u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\u4e2d\u7684\u6700\u5927\u503c\u4f5c\u4e3a\u65b0\u8fde\u901a\u5757\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e0d\u5c11\u505a\u6cd5\uff08\u5305\u62ec\u300a\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e00\u672c\u901a\u300b\uff08\u7b2c\u4e09\u7248\uff09\u4e0a\u4ecb\u7ecd\u7684\u505a\u6cd5\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u95ee\u9898\u5728\u540e\u9762\u518d\u7248\u7684\u65f6\u5019\u6709\u6ca1\u6709\u4fee\u6b63\uff09\u53ea\u8003\u8651\u4e86\u4e0a\u9762\u7684\u60c5\u51b5 3\uff0c\u7b80\u5355\u5730\u7528\u8fd9\u6761\u8def\u5f84\u4f5c\u4e3a\u65b0\u8fde\u901a\u5757\u7684\u76f4\u5f84\uff0c\u8fd9\u6837\u7684\u505a\u6cd5\u663e\u7136\u662f\u9519\u8bef\u7684\u3002\u4f46\u539f\u6570\u636e\u8f83\u5f31\uff0c\u8fd9\u79cd\u9519\u89e3\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u6570\u636e\u3002\n\n```cpp\n// Problem: P1522 [USACO2.4]\u725b\u7684\u65c5\u884c Cow Tours\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P1522\n// Memory Limit: 128 MB\n// Time Limit: 1000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\nusing namespace std;\nstruct dsu {\n  int fa[155], n;\n  void init(int n) {\n    this->n = n;\n    for (int i = 1; i <= n; i++) fa[i] = i;\n  }\n  int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\n  void merge(int x, int y) {\n    x = find(x);\n    y = find(y);\n    if (x == y) return;\n    fa[y] = x;\n  }\n  bool together(int x, int y) { return find(x) == find(y); }\n} ds;\nstruct point {\n  int x, y;\n} p[155];\nchar str[155];\ndouble d[155][155], maxd[155], ad[155];\ndouble dist(double x1, double y1, double x2, double y2) {\n  return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  ds.init(n);\n  for (int i = 1; i <= n; i++) scanf(\"%d%d\", &p[i].x, &p[i].y);\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= n; j++) {\n      int c;\n      scanf(\"%1d\", &c);\n      if (i == j)\n        d[i][j] = 0;\n      else if (c == 1) {\n        d[i][j] = dist(p[i].x, p[i].y, p[j].x, p[j].y);\n        ds.merge(i, j);\n      } else\n        d[i][j] = 1 << 30;\n    }\n  for (int k = 1; k <= n; k++)\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= n; j++) d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++)\n      if (ds.together(i, j)) maxd[i] = max(maxd[i], d[i][j]);\n    ad[ds.find(i)] = max(ad[ds.find(i)], maxd[i]);\n  }\n  double ans = 1 << 30;\n  for (int i = 1; i <= n; i++)\n    for (int j = i + 1; j <= n; j++)\n      if (!ds.together(i, j))\n        ans = min(ans,\n                  max(maxd[i] + maxd[j] + dist(p[i].x, p[i].y, p[j].x, p[j].y),\n                      max(ad[ds.find(i)], ad[ds.find(j)])));\n  printf(\"%.6lf\\n\", ans);\n  return 0;\n}\n```",
        "postTime": 1628522679,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1522 \u3010\u725b\u7684\u65c5\u884c Cow Tours\u3011"
    },
    {
        "content": "# \u9898\u9762\u5206\u6790\n\n\u7267\u533a\u5c31\u662f\u4e00\u4e2a\u70b9\uff0c\u7267\u573a\u662f\u591a\u4e2a\uff08\u6216\u4e00\u4e2a\uff09\u70b9\u6784\u6210\u7684\u8054\u901a\u5757\uff0c\u6bcf\u4e2a\u7267\u533a\u7684\u5750\u6807\u5c06\u4ee5$(x,y)$\u5750\u6807\u7684\u65b9\u5f0f\u7ed9\u51fa\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u901a\u6027\u5c06\u4ee5\u5bf9\u79f0\u7684$01$\u77e9\u9635\u7ed9\u51fa\uff0c\u6240\u4ee5\u53ef\u4ee5\u7406\u89e3\u4e3a\u65e0\u5411\u8fb9\u3002\n\n\u73b0\u5728\u8bf7\u5c06\u4e24\u4e2a\u4e0d\u8fde\u901a\u7684\u7267\u533a\u76f8\u8fde\uff0c\u5f62\u6210\u4e00\u4e2a\u5927\u7267\u573a\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5927\u7267\u573a\u7684\u76f4\u5f84\u6700\u5c0f\uff0c\u4e00\u4e2a\u7267\u573a\u7684\u76f4\u5f84\u5c31\u662f\u7267\u573a\u4e2d**\u6700\u8fdc\u7684\u4e24\u4e2a\u7267\u533a**\u7684\u8ddd\u79bb\n\n# \u7b97\u6cd5\u5206\u6790\n\n\u6700\u77ed\u8def\u597d\u9898\uff0c\u7ec6\u8282\u633a\u591a\u7684\uff0c\u56e0\u4e3a$N\\leq 150$\u5f88\u5c0f\uff0c\u6240\u4ee5\u8bf4\u5404\u4f4d\u90fd\u80fd\u60f3\u5230\u8981\u8dd1Floyd\n\n\u8dd1\u5b8cFloyd\u4e4b\u540e\u6211\u4eec\u600e\u4e48\u505a\u5462\n\n\u6211\u4eec\u5bb9\u6613\u60f3\u5230\u679a\u4e3e\u51fa\u6bcf\u4e00\u4e2a\u70b9\u80fd\u5230\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u5b58\u5230$Far[i]$\u91cc\n\n\u7136\u540e\u66b4\u529b\u679a\u4e3e\u4e0d\u8054\u901a\u7684\u4e24\u70b9$i,j$\uff0c\u6c42\u51fa\u7b54\u6848$Far[i]+Far[j]+Distance(i,j)$\n\n**\u7136\u800c\u8fd9\u662f\u9519\u7684**\uff0c\u53ef\u4ee5\u88ab\u4e0b\u9762\u8fd9\u4e2a\u5361\u6389\n\n```cpp\n    @@@\n    @1@\n    @@@\n     |   @@@\n     |   @4@\n 100 |   @@@\n     |  \n     |  \n    @@@          @@@\n    @2@----------@3@\n    @@@   100    @@@\n```\n\n\u5df2\u77e5$4$\u5230$2$\u8ddd\u79bb$w$\u663e\u7136\u5c0f\u4e8e$100$\n\n\u5982\u679c\u6211\u4eec\u8fd9\u4e2a\u65f6\u5019\u8fde$2,4$\u8fd9\u6837\u6309\u7167\u516c\u5f0f\u6211\u4eec\u4f1a\u5f97\u5230\u9519\u8bef\u7b54\u6848\n\n$Far[i]+Far[j]+Distance(i,j)=100+0+w<200$\n\n\u663e\u7136\u8fde$2,4$\u7684\u76f4\u5f84\u5e94\u8be5\u662f$1->2->3=200$\n\n\u6211\u4eec\u5c11\u8003\u8651\u4e86\u4e00\u70b9\uff1a\u65b0\u7684\u5927\u7267\u573a\u7684\u76f4\u5f84\u4e0d\u4e00\u5b9a\u6bd4\u539f\u6765\u7684\u4e24\u4e2a\u7267\u573a\u5927\n\n\u6240\u4ee5\u6211\u4eec\u9996\u5148\u7edf\u8ba1\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84$Blockd[i]$\uff0c\u5bf9\u4e8e\u5bfb\u627e\u8fde\u901a\u5757\uff0c\u76f4\u63a5dfs\u5c31\u884c\u4e86\n\n\u6240\u4ee5\u5bf9\u4e8e\u771f\u6b63\u7684\u7b54\u6848\u5e94\u8be5\u662f$max\\{Far[i]+Far[j]+Distance(i,j) ,Blockd[i],Blockd[j]\\}$\uff0c\u5176\u4e2d$i,j$\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\n\n# \u5584\u610f\u7684\u63d0\u9192\n\n- \u67d0\u4e9b\u53d8\u91cf\u3001\u51fd\u6570\u8bb0\u5f97\u7528double\u578b\n- \u6781\u5c0f\u503c\u3001\u6781\u5927\u503c\u7684\u8bbe\u7f6e\n- Floyd\u4e2d\u95f4\u8f6c\u79fb\u70b9\u7684\u5faa\u73af\u5fc5\u987b\u653e\u5728\u6700\u5916\u5c42\n- \u5bf9\u4e8e\u8bfb\u53d6\u4e00\u4f4d\u6570\uff0c\u7528scanf(\"%1d\" ,&x)\u5c31\u884c\u4e86\n\n# \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstdarg>\n#include<iostream>\n#include<cmath>\n\n#define rg register\n#define il inline\n#define MX (150 + 5)\n#define INF (123456789)\n\ndouble min(double x ,double y){return x < y ? x : y;}\ndouble max(double x ,double y){return x > y ? x : y;}\n//\u8bb0\u5f97double\n\nint n;\n\nstruct farm{\n\tint x ,y;\n\tdouble distance(const farm &b){\n\t\treturn sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t}\n}p[MX];\n\ndouble dis[MX][MX] ,farthest[MX];\n//dis\u662f\u6700\u77ed\u8def\n//farthest\u662f\u4e0a\u6587\u7684far\uff0c\u5373\u6bcf\u4e00\u4e2a\u70b9\u80fd\u5230\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\nvoid Floyd(){\n\tfor(rg int k = 1 ; k <= n ; ++k){\n\t\tfor(rg int i = 1 ; i <= n ; ++i){\n\t\t\tfor(rg int j = 1 ; j <= n ; ++j){\n\t\t\t\tdis[i][j] = min(dis[i][j] ,dis[i][k] + dis[k][j]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint linkcnt;\t//\u8fde\u901a\u5757\u7684\u4e2a\u6570\ndouble Blockmax[MX];\t//\u67d0\u4e2a\u8fde\u901a\u5757\u4e2d\u7684farthest\u6700\u5927\u503c\nint refer[MX];\t//\u8868\u793a\u67d0\u4e2a\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u7f16\u53f7\nvoid dfs(int x){\n\tif(refer[x])\treturn;\n\trefer[x] = linkcnt;\n\tfor(rg int i = 1 ; i <= n ; ++i)\n\t\tif(dis[x][i] < INF)\tdfs(i);\n        //dis < INF\u5373\u4ee3\u8868\u6709\u8fb9\n}\nint main(){\n\tscanf(\"%d\" ,&n);\n\tfor(rg int i = 1 ; i <= n ; ++i){\n\t\tscanf(\"%d%d\" ,&p[i].x ,&p[i].y);\n\t}\n\tfor(rg int i = 1 ,op ; i <= n ; ++i){\n\t\tfor(rg int j = 1 ; j <= n ; ++j){\n\t\t\tdis[i][j] = INF;\t//\u8bb0\u5f97\u8bbe\u521d\u59cb\u503cINF\n\t\t\tscanf(\"%1d\" ,&op);\n\t\t\tif(op){\n\t\t\t\tdis[i][j] = p[i].distance(p[j]);\n\t\t\t}\n\t\t\tif(i == j)\tdis[i][j] = 0;//\u81ea\u5df1\u5230\u81ea\u5df1dis\u662f0\n\t\t}\n\t}\n\tFloyd();\n\tfor(rg int i = 1 ; i <= n ; ++i)\t//\u5bfb\u627e\u8fde\u901a\u5757\n\t\tif(!refer[i]){++linkcnt;dfs(i);}\n\tfor(rg int i = 1 ; i <= n ; ++i){\t//\u6c42\u51fafarthest\n\t\tfor(rg int j = 1 ; j <= n ; ++j){\n\t\t\tif(dis[i][j] < INF){\t//dis < INF\u5373\u4ee3\u8868\u6709\u8fb9\n\t\t\t\tfarthest[i] = max(farthest[i] ,dis[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(rg int i = 1; i <= linkcnt ; ++i){\t//\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u6c42\u51fa\u76f4\u5f84\n\t\tdouble kuaimax = -INF;\t//\u8bb0\u5f97\u8bbe\u7f6e-INF\n\t\tfor(rg int j = 1 ; j <= n ; ++j){\n\t\t\tif(refer[j] == i)\tkuaimax = max(kuaimax ,farthest[j]);\n\t\t}\n\t\tBlockmax[i] = kuaimax;\n\t}\n\tdouble ans = INF;\t//\u8bb0\u5f97\u8bbe\u7f6eINF\n\tfor(rg int i = 1 ; i <= n ; ++i){\n\t\tfor(rg int j = 1 ; j <= n ; ++j){\n\t\t\tif(refer[i] != refer[j]){\t//\u4e24\u8005\u4e0d\u80fd\u5728\u540c\u4e00\u8fde\u901a\u5757\n\t\t\t\tans = min(ans ,max(p[i].distance(p[j]) + farthest[i] + farthest[j] ,max(Blockmax[refer[i]] ,Blockmax[refer[j]])));\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%.6lf \\n\" ,ans);\n\treturn 0;\n}\n```",
        "postTime": 1553927530,
        "uid": 47863,
        "name": "Imakf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1522 \u3010\u725b\u7684\u65c5\u884c Cow Tours\u3011"
    },
    {
        "content": "\u6bcf\u4e00\u4e2a\u7267\u573a\u90fd\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u6c42\u5c06\u4e24\u4e2a\u56fe\u8fde\u901a\u4e4b\u540e\u7684\u6700\u5c0f\u76f4\u5f84\u662f\u591a\u5c11\n\n\u5f53\u4e24\u7267\u573a\u4e2d\u7684i\uff0cj\u8fde\u4e0a\u4e00\u6761\u8fb9\u540e\uff0c\u65b0\u7267\u573a\u7684\u76f4\u5f84\u4e3amax\uff08\u7267\u573a1\u76f4\u5f84\uff0c\u7267\u573a2\u76f4\u5f84\uff0cij\u8ddd\u79bb+\u7267\u573a1\u4e2d\u79bbi\u6700\u8fdc\u7684\u8ddd\u79bb+\u7267\u573a2\u4e2d\u79bbj\u6700\u8fdc\u7684\u8ddd\u79bb\uff09\n\n\u4e3a\u4e86\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u89e3\u51b3\u8fd9\u9053\u95ee\u9898\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u5c06\u4e00\u4e9b\u6570\u636e\u9884\u5904\u7406\u51fa\u6765\u3002\u5148\u7528floyd\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u95f4\u8ddd\u79bb\uff0c\u518d\u901a\u8fc7\u679a\u4e3e\u6c42\u51fa\u4e00\u4e2a\u7267\u573a\u4e2d\u79bb\u6bcf\u4e2a\u70b9\u6700\u957f\u7684\u8ddd\u79bb\uff0c\u6700\u540e\u7528dfs\u5212\u5206\u8fde\u901a\u5757\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84\n\n\u8bb0\u5f97INF\u5f00\u5927\u4e00\u70b9\n\n\u5177\u4f53\u7ec6\u8282\u770b\u6ce8\u89e3\uff0c\u4e0a\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#include<string>\n#define a(a,b,c) for(int a=b;a<=c;a++)\n#define b(a,b,c) for(int a=b;a>=c;a--)\nusing namespace std;\ntypedef long long LL;\nconst int N=155,M=N*N,INF=1e10;\ndouble d[N][N],f[N],t[N];\nint a[N],ver[M],Next[M],head[N],x[N],y[N];\nint n,tot,s;\ndouble ans=INF;\nvoid add(int x,int y)\n{\n    ver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n    return;\n}\ndouble num(int i,int j)\n{\n    return sqrt(((LL)x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n}\nvoid dfs(int x)\n{\n    a[x]=s;\n    t[s]=max(t[s],f[x]);\n    //\u6c42\u51fa\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84\n    for(int i=head[x];i;i=Next[i])\n    if(!a[ver[i]])\n    dfs(ver[i]);\n    return;\n}\nbool cmp(double x,double y)\n{\n    return x>y;\n}\ndouble maxn(double a,double b,double c)\n{\n    double x[3];\n    x[0]=a,x[1]=b,x[2]=c;\n    sort(x,x+3,cmp);\n    return x[0];\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    a(i,1,n)\n    a(j,1,n)\n    d[i][j]=INF;\n    a(i,1,n) d[i][i]=0;\n    a(i,1,n)\n    scanf(\"%d%d\",&x[i],&y[i]);\n    a(i,1,n)\n    {\n        string s;\n        cin>>s;\n        a(j,1,s.size())\n        if(s[j-1]=='1') d[i][j]=num(i,j),add(i,j);\n    }\n    a(k,1,n)\n    a(i,1,n)\n    a(j,1,n)\n    d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n    //\u7528floyd\u7b97\u6cd5\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u95f4\u8ddd\u79bb\n    a(i,1,n)\n    a(j,1,n)\n    if(d[i][j]!=INF) f[i]=max(d[i][j],f[i]);\n    //\u6c42\u51fa\u7267\u573a\u4e2d\u79bb\u6bcf\u4e00\u4e2a\u70b9\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\n    a(i,1,n)\n    if(!a[i])\n    s++,dfs(i);\n    //\u5212\u5206\u8fde\u901a\u5757\n    a(i,1,n)\n    a(j,1,n)\n    if(a[i]!=a[j])\n    ans=min(ans,maxn(t[a[i]],t[a[j]],f[i]+f[j]+num(i,j)));\n    printf(\"%.6lf\",ans);\n    //ps\uff1a\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u7528printf\u56db\u820d\u4e94\u5165\u80fdA\uff0c\u4e0d\u56db\u820d\u4e94\u5165\u53cd\u800c\u4f1a\u9519\u2026\u2026\n    return 0;\n}\n```",
        "postTime": 1527855062,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1522 \u3010\u725b\u7684\u65c5\u884c Cow Tours\u3011"
    },
    {
        "content": "\u60e8\u906d\u6570\u636e Hack \u7684\u83dc\u9e21\u6765\u5199\u7bc7\u9898\u89e3 /kk\n\n\u9898\u610f\u5c31\u662f\u6709\u4e00\u4e2a\u4e0d\u8054\u901a\u7684\u56fe\uff0c\u4f60\u9700\u8981\u5728\u4e24\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u65b0\u5f62\u6210\u7684\u8fde\u901a\u5757\u76f4\u5f84\u5c3d\u53ef\u80fd\u5c0f\u3002\n\n\u8003\u8651\u5230\u8fde\u4e00\u6761\u8fb9 $(i,j)$ \u540e\u65b0\u7684\u8fde\u901a\u5757\u7684\u76f4\u5f84\u53ef\u80fd\u6709\u54ea\u51e0\u79cd\u60c5\u51b5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/76m4kul4.png)\n\n1. \u4ece $i$ \u70b9\u51fa\u53d1\u6700\u8fdc\u8ddd\u79bb + \u4ece $j$ \u70b9\u51fa\u53d1\u6700\u8fdc\u8ddd\u79bb + $(i,j)$ \u8fb9\u7684\u957f\u5ea6\uff1b\n2. $i$ \u6240\u5728\u8fde\u901a\u5757\u7684\u76f4\u5f84\uff1b\n3. $j$ \u6240\u5728\u8fde\u901a\u5757\u7684\u76f4\u5f84\u3002\n\n\u56e0\u6b64\uff0c\u7531\u4e8e\u6570\u636e\u8f83\u5c0f\uff0c\u53ea\u9700\u8dd1\u4e00\u904d Floyd \u5e76\u5904\u7406\u51fa\u4ece\u6bcf\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u4ece\u800c\u5229\u7528\u5e76\u67e5\u96c6\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u76f4\u5f84\uff1b\u7136\u540e\u66b4\u529b\u679a\u4e3e\u8fb9 $(i,j)$\uff08\u9700\u4fdd\u8bc1\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff09\u8ba1\u7b97\u65b0\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 200;\ninline int read() {\n\tint s = 0; char c = getchar();\n\twhile (!isdigit(c)) c = getchar();\n\twhile (isdigit(c)) s = s * 10 + c - '0', c = getchar();\n\treturn s;\n}\nclass dsu {\n    private:\n        int n;\n        int *fa;\n        void init(int n) {\n            fa = new int[n + 10];\n            for (int i = 0; i <= n; i++) fa[i] = i;\n        }\n    public:\n        dsu(int n):n(n) { init(n); }\n        int find(int x) {\n            if (fa[x] == x) return x;\n            return fa[x] = find(fa[x]);\n        }\n        bool together(int x, int y) { return find(x) == find(y); }\n        void merge(int x, int y) {\n            x = find(x), y = find(y);\n            if (x != y) fa[x] = y;\n        }\n};\nint n, x[N], y[N];\nchar s[N];\ndouble f[N][N], d[N], dd[N];\ndouble dis(int i, int j) {\n\treturn sqrt((x[j] - x[i]) * (x[j] - x[i]) + (y[j] - y[i]) * (y[j] - y[i]));\n}\nint main() {\n\tn = read();\n    dsu ds(n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tx[i] = read(), y[i] = read();\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%s\", s + 1);\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j] == '1') {\n\t\t\t\tf[i][j] = dis(i, j);\n                ds.merge(i, j);\n\t\t\t} else if (i != j) {\n\t\t\t\tf[i][j] = 1e10;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int k = 1; k <= n; k++) {\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tf[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\tdouble d1 = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (ds.together(i, j)) {\n\t\t\t\td[i] = max(d[i], f[i][j]);\n\t\t\t\td1 = max(d1, d[i]); // \u65e7\u505a\u6cd5\u7684\u75d5\u8ff9\uff08\n\t\t\t}\n\t\t}\n        dd[ds.find(i)] = max(dd[ds.find(i)], d[i]);\n\t}\n\tdouble d2 = 1e10;\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (!ds.together(i, j)) {\n\t\t\t\td2 = min(d2,\n                        max(d[i] + d[j] + dis(i, j), // \u60c5\u51b5 1\n                        max(dd[ds.find(i)], dd[ds.find(j)]))); // \u60c5\u51b5 2 & 3\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%.6f\\n\", d2);\n\treturn 0;\n}\n```\n\n-----------\n\n\u5173\u4e8e\u65e7\u505a\u6cd5\uff0c\u8fd9\u79cd\u505a\u6cd5\u53ea\u8003\u8651\u4e86\u60c5\u51b5 1\uff0c\u7136\u800c\u65e0\u6cd5\u901a\u8fc7 \\#7 \u6d4b\u8bd5\u70b9\u3002\u56e0\u6b64\u5c06\u5f97\u5230\u7684\u76f4\u5f84\u4e0e\u539f\u76f4\u5f84\u53d6\u6700\u5927\u503c\uff0c\u7136\u540e\u7531\u4e8e\u6570\u636e\u95ee\u9898\u901a\u8fc7\u3002\u663e\u7136\u8fd9\u4e24\u8005\u7406\u8bba\u4e0a\u4e0d\u53ef\u6bd4\u8f83\uff0c\u56e0\u4e3a\u65b0\u8fde\u901a\u5757\u7684\u76f4\u5f84\u53ef\u80fd\u4e0e\u539f\u6765\u7684\u6700\u5927\u76f4\u5f84\u65e0\u5173\u3002\u5728\u4ee3\u7801\u4e2d\u53ef\u4ee5\u627e\u5230\u65e7\u505a\u6cd5\u7684\u75d5\u8ff9\uff08\uff09\u3002",
        "postTime": 1628905197,
        "uid": 341650,
        "name": "_504",
        "ccfLevel": 6,
        "title": "P1522 [USACO2.4]\u725b\u7684\u65c5\u884c Cow Tours"
    },
    {
        "content": "## \u9898\u610f\n\n\u76f4\u5f84\uff1a\u4e00\u4e2a\u7267\u573a\uff08\u8fde\u901a\u5757\uff09\u4e2d\u4efb\u610f\u4e24\u70b9\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u3002\n\n\u7ed9\u4f60\u4e00\u5f20\u65e0\u5411\u5e26\u6743\u56fe\uff0c\u56fe\u4e2d\u6709\u4e00\u4e9b\u8fde\u901a\u5757\uff0c\u8bd5\u8fde\u63a5\u56fe\u4e2d\u4e24\u4e2a\u4e0d\u540c\u7684\u8fde\u901a\u5757\u4e2d\u7684\u4e00\u70b9\uff0c\u662f\u65b0\u7684\u8fde\u901a\u5757\u76f4\u5f84\u6700\u5c0f\u3002\n\n## \u5206\u6790\n\n- \u6211\u4eec\u9700\u8981\u628a\u56fe\u5b58\u4e0b\u6765\uff0c\u4e8e\u662f\u7528 $w_{i,j}=\\sqrt{(x_i-x_j)^2+(y_i-y_j)^2}$ \u4ee3\u8868\u8fb9\u6743\u3002\n\n- \u6211\u4eec\u9700\u8981\u627e\u51fa\u56fe\u4e2d\u7684\u8fde\u901a\u5757\uff0c\u4e8e\u662f $\\text{dfs}$ \u5bf9\u6bcf\u4e2a\u5757\u67d3\u8272\uff0c\u628a\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u653e\u8fdb\u5bf9\u5e94\u7684 $\\text{vector}\\ c2_{col}$ \u91cc\u3002\n\n- \u6211\u4eec\u9700\u8981\u77e5\u9053\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u4e8e\u662f\u8dd1\u4e86 ~~floyd~~ $n$ \u6b21 $\\text{Dijkstra}$ \u6c42\u6700\u77ed\u8def $d_{i,j}$\u3002\n\n- \u6211\u4eec\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84 $cz_{col}$\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u70b9\u5230\u5757\u4e2d\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u7684\u6700\u5927\u503c $mxd_{c2_{col,i}}$\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053 $cz_{col}=\\max\\{mxd_{c2_{col,i}}\\}$\u3002\n\n- \u6211\u4eec\u9700\u8981\u627e\u51fa\u7b54\u6848\uff0c\u4e8e\u662f\u66b4\u529b\u679a\u4e3e\u4e24\u4e2a\u70b9 $i,j$\uff0c\u5982\u679c $i,j$ \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u90a3\u4e48\u8fde\u63a5\u540e\u7684\u65b0\u76f4\u5f84\u53ef\u80fd\u5728\u4e24\u4e2a\u539f\u6765\u7684\u8fde\u901a\u5757\u5185\uff0c\u4e5f\u53ef\u80fd\u662f\u8fde\u63a5\u4e4b\u540e\u5f62\u6210\u7684\uff0c\u4e5f\u5c31\u662f $\\max(cz_{col_i},cz_{col_j},mxd_i+w_{i,j}+mxd_j)$\u3002\u7b54\u6848\u5c31\u662f\u6240\u6709\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002\n\n- \u6211\u4eec\u9700\u8981\u77e5\u9053\u8fd9\u6837\u5199\u4f1a\u4e0d\u4f1a\u9519\uff0c\u8fd8\u6ca1\u7b49\u4f60\u7b97\u51fa\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n)$\uff0c\u4f60\u7684\u7a0b\u5e8f\u5df2\u7ecf\u5728 $\\text{100ms}$ \u5185 [$\\text{AC}$](https://www.luogu.com.cn/record/56414131) \u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define qw first\n#define er second\nusing namespace std;\nconst int N=200;\nint n,c[N];//c[i]\u662fi\u6240\u5728\u7684\u8fde\u901a\u5757 \ndouble x[N],y[N],w[N][N],d[N][N],mxd[N],cz[N],mx=1e9;\nbool a[N][N],v[N];\nvector<int>c2[N];\npriority_queue<pair<double,int> >q;\npair<double,int>e;\nvoid dfs(int x,int col){\n\tif(v[x]) return;\n\tv[x]=1;c[x]=col;\n\tc2[col].push_back(x);\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[x][i])\n\t\t\tdfs(i,col);\n}\nvoid Dijkstra(int s){\n\tmemset(v,0,sizeof(v));\n\td[s][s]=e.qw=0;e.er=s;\n\tq.push(e);\n\twhile(q.size()){\n\t\tint x=q.top().er;\n\t\tq.pop();\n\t\tif(v[x])\n\t\t\tcontinue;\n\t\tv[x]=1;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(!a[x][i])\n\t\t\t\tcontinue;\n\t\t\tif(d[s][i]>d[s][x]+w[x][i]){\n\t\t\t\td[s][i]=d[s][x]+w[x][i];\n\t\t\t\te.qw=-d[s][i];e.er=i;\n\t\t\t\tq.push(e);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    \tfor(int j=1;j<=n;j++)\n    \t\td[i][j]=1e7;\n    for(int i=1;i<=n;i++)\n    \tcin>>x[i]>>y[i];\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tscanf(\"%1d\",&a[i][j]);\n\t\t\tw[i][j]=sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tDijkstra(i);\n\tmemset(v,0,sizeof(v));\n\tfor(int i=1,col=1;i<=n;i++){\n\t\tif(v[i]) continue;\n\t\tdfs(i,col);\n\t\tfor(int j=0;j<c2[col].size();j++){\n\t\t\tfor(int k=0;k<c2[col].size();k++){\n\t\t\t\tif(j==k||d[c2[col][j]][c2[col][k]]==1e7) continue;\n\t\t\t\tmxd[c2[col][j]]=max(mxd[c2[col][j]],d[c2[col][j]][c2[col][k]]);\n\t\t\t}\n\t\t\tcz[col]=max(cz[col],mxd[c2[col][j]]);\n\t\t}\n\t\tcol++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(c[i]==c[j]) continue;\n\t\t\tmx=min(mx,max(cz[c[i]],max(cz[c[j]],mxd[i]+w[i][j]+mxd[j])));\n\t\t}\n\tprintf(\"%.6lf\",mx);\n\treturn 0;\n}\n```\n",
        "postTime": 1629374829,
        "uid": 419144,
        "name": "chenjunxiu",
        "ccfLevel": 7,
        "title": "P1522 [USACO2.4]\u725b\u7684\u65c5\u884c Cow Tours"
    },
    {
        "content": "\u7528Floyd\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u5176\u5b83\u70b9\u7684\u8ddd\u79bb\uff08\u8fd9\u91cc\u8bf4\u7684\u90fd\u662f\u6700\u77ed\u8ddd\u79bb\uff09\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9x\uff0c\u627e\u51fa\u53ef\u4ee5\u5230\u8fbe\u5b83\u7684\uff0c\u5e76\u4e14\u4e0e\u5b83\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u8bb0\u4e3amaxdis(x)\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u679a\u4e3e\u6dfb\u52a0\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9a,b\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662fmin(maxdis(a)+maxdis(b)+dis(a,b))\uff08dis(a,b)\u8868\u793aa,b\u95f4\u7684\u8ddd\u79bb\uff09\u3002\u6ce8\u610f\uff0c\u539f\u6765\u4e24\u4e2a\u519c\u573a\u7684\u76f4\u5f84\u4e5f\u8981\u53c2\u4e0e\u7b54\u6848\u7684\u8003\u8651\u3002\r\n",
        "postTime": 1438089015,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1522 \u3010\u725b\u7684\u65c5\u884c Cow Tours\u3011"
    }
]