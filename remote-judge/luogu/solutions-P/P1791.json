[
    {
        "content": "[$$\\color{#0e90d2}\\huge{\\texttt{my blog}}$$](https://wxwoo.github.io/2019/04/19/solution-p1791)\n\n******\n\n[\u539f\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1791)\n\n\u9009\u4eba\u6709\u5229\u6da6\uff0c\u9009\u4e86\u8981\u4ed8\u51fa\u4ee3\u4ef7\uff1a~~\u660e\u663e\u7684~~\u6700\u5c0f\u5272\u6a21\u578b\n\n\u6211\u4eec\u5c06\u6bcf\u4e2a\u4eba\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5982\u4e0b\u5efa\u8fb9\uff1a\n\n> 1. \u6e90\u70b9\u5411\u6bcf\u4e2a\u4eba\u8fde\u6d41\u91cf\u4e3a\u5176\u603b\u6536\u76ca\u7684\u8fb9\uff08\u5373$\\sum\\limits_{j=1}^n E_{i,j}$\uff09\n>\n> 1. \u6bcf\u4e2a\u4eba\u5411\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a\u5176\u82b1\u8d39\u7684\u8fb9\n>\n> 1. $i$\u5411$j$\u8fde\u6d41\u91cf\u4e3a$E_{i,j} \\times 2$\u7684\u8fb9\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u601d\u8003\u8fd9\u6837\u5efa\u8fb9\u7684\u6b63\u786e\u6027\n\n\u524d\u4e24\u6761\u662f\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\n\n\u7b2c\u4e09\u6761\uff0c\u5982\u679c\u4e24\u4e2a\u4eba\u90fd\u9009\uff0c\u53ef\u4ee5\u83b7\u5f97$E_{i,j}$\u7684\u5229\u6da6\n\n\u5982\u679c\u6709\u4e00\u4e2a\u4e0d\u9009\uff0c\u4f1a\u4e8f\u635f$E_{i,j}$\u7684\u5229\u6da6\n\n\u5229\u6da6\u5dee\u4e3a$E_{i,j} \\times 2$\n\n\u8fd9\u6837\u8fde\u8fb9\uff0c\u4e00\u65e6\u4e24\u4e2a\u4eba\u4e2d\u6709\u4e00\u4e2a\u4eba\u6ca1\u9009\uff0c\u8fd9\u6761\u8fb9\u5c31\u4f1a\u65ad\u6389\uff0c\u9020\u6210\u5229\u6da6\u5dee\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\ntemplate<typename T> inline void read(T &x)\n{\n    char ch=getchar();\n    T f=1;\n    x=0;\n    while(!('0'<=ch&&ch<='9'))\n    {\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while('0'<=ch&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+ch-48;\n        ch=getchar();\n    }\n    x*=f;\n}\nconst int inf=1e9;\nconst int N=3e5+1;\nstruct edge\n{\n    int from,to,next,cap,flow;\n}e[N];\nint cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];\ninline int min(int i,int j)\n{\n    return i<j?i:j;\n}\ninline void add(int u,int v,int l)\n{\n    e[++cnt]=(edge){u,v,head[u],l,0};\n    head[u]=cnt;\n    e[++cnt]=(edge){v,u,head[v],0,0};\n    head[v]=cnt;\n}\ninline bool find()\n{\n    memset(l,0,sizeof(l));\n    int h=1,t=1;\n    q[1]=sour;\n    l[sour]=1;\n    while(h<=t)\n    {\n        int x=q[h++];\n        for(int i=head[x];i;i=e[i].next)\n            if(!l[e[i].to]&&e[i].cap>e[i].flow)\n            {\n                q[++t]=e[i].to;\n                l[e[i].to]=l[x]+1;\n                if(e[i].to==sink)\n                    return true;\n            }\n    }\n    return false;\n}\nint dfs(int x,int now)\n{\n    if(x==sink||!now)\n        return now;\n    int t=now,detla;\n    for(int i=head[x];i;i=e[i].next)\n    {\n        if(e[i].cap>e[i].flow&&l[e[i].to]==l[x]+1)\n        {\n            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));\n            if(!detla)\n                l[e[i].to]=0;\n            e[i].flow+=detla;\n            e[((i-1)^1)+1].flow-=detla;\n            t-=detla;\n            if(t==0)\n                break;\n        }\n    }\n    return now-t;\n}\ninline void dinic()\n{\n    while(find())\n        ans+=dfs(sour,inf);\n}\nint sum;\nint main()\n{\n    read(n);\n    sour=0;\n    sink=n+1;\n    int w,cost;\n    for(int i=1;i<=n;++i)\n    {\n        read(w);\n        add(i,sink,w);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        cost=0;\n        for(int j=1;j<=n;++j)\n        {\n            read(w);\n            if(w!=0)//\u4f18\u5316\uff1a\u5982\u679c\u662f0\u5c31\u4e0d\u8fde\u8fb9\n            {\n                cost+=w;\n                add(i,j,w<<1);\n            }\n        }\n        add(sour,i,cost);\n        sum+=cost;\n    }\n    dinic();\n    printf(\"%d\",sum-ans);\n    return 0;\n}\n\n```",
        "postTime": 1555686244,
        "uid": 116659,
        "name": "wxwoo",
        "ccfLevel": 6,
        "title": "P1791 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63 \u9898\u89e3"
    },
    {
        "content": "[P1791 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63](https://www.luogu.org/problemnew/show/P1791)\n\n\u5361\u5e38\u5361\u4e86\u597d\u4e45\u7ec8\u4e8e\u8fc7\u4e86\u3002\u3002\u3002\n\n\u4e8e\u662f\u8865\u4e00\u53d1\u9898\u89e3\uff0c\u7ed9\u540e\u6765\u4eba\u4e00\u4e2a\u501f\u9274\u3002\n\n\u8bb0\u4f4f\uff1a\n\n1. \u5982\u679c\u4f60\u7684$Dinic$\u5f00\u4e86$O2$\u5374$TLE$\uff0c\u8bf7\u4e0d\u8981\u5f00$O2$\u3002\u3002\u3002\n\n2. \u5982\u679c\u4f60\u7684$Dinic$\u4e0d\u5f00$O2$\u5374\u8fd8\u662f$TLE$\uff0c\u8bf7\u4f7f\u7528$ISAP$\u3002\u3002\u3002\n\n3. \u5982\u679c\u4f60\u7684$ISAP$\u5f00\u4e86$O2$\u5374$TLE$\uff0c\u8bf7\u4e0d\u8981\u5f00$O2$\u3002\u3002\u3002\n\n4. \u5982\u679c\u4f60\u7684$ISAP$\u4e0d\u5f00$O2$\u5374\u8fd8\u662f$TLE$\uff0c\u8bf7\u4f7f\u7528$HLPP$\u3002\u3002\u3002\uff08\u5f53\u7136\u6211\u6ca1\u7528\u3002\u3002\u3002\uff09\n\n\u4ee5\u4e0a\u662f\u6211\u7684\u4e2a\u4eba\u505a\u9898\u603b\u7ed3\u3002\u3002\u3002\n\n\u53ef\u4ee5\u4e0e\u770b\u4e00\u4e0b\u6211\u7684[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.org/recordnew/lists?uid=49998&pid=P1791&status=&sort=0)\u3002\n\n\u5728$BZOJ$\u4e0a$Dinic$\u662f\u53ef\u4ee5\u8fc7\u7684\u3002\n\n## \u4e0b\u9762\u8bf4\u89e3\u6cd5\uff1a\n\n\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u6a21\u578b\u3002\n\n\u7c7b\u4f3c\u7684\u9898\u76ee\u6709[\u8fd9\u9898](https://www.cnblogs.com/Yangrui-Blog/p/10465922.html)\u548c[\u8fd9\u9898](https://www.cnblogs.com/Yangrui-Blog/p/10464509.html)\u3002\n\n\u5bf9\u4e8e\u672c\u9898\uff0c\u6211\u4eec\u8bbe$<u,v,w>$\u8868\u793a\u4ece$u$\u5230$v$\uff0c\u6d41\u91cf\u4e3a$w$\u5f97\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5f53\u7136\u5305\u62ec\u6d41\u91cf\u4e3a\u96f6\u7684\u53cd\u5411\u8fb9\u3002\n\n\u5c06\u6e90\u70b9\u8bbe\u4e3a$S$\uff0c\u6c47\u70b9\u8bbe\u4e3a$T$\u3002\n\n\u4e8e\u662f\u8fde\u8fb9\uff1a$<S,x,\\sum_{i=1}^nE_{x,i}>,<x,T,A_x>$\n\n\u90a3\u4e2a\u654c\u5bf9\u516c\u53f8\u7684\u5f71\u54cd\u5148\u4e0d\u7ba1\u5b83\u3002\n\n\u8fd9\u6837\uff0c\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u4e5f\u5c31\u662f\uff1a\n\n\u5272\u6389$S$\u5230$x$\u7684\u8fb9\u8868\u793a\u4e0d\u96c7\u4f63\u8fd9\u4e2a\u4eba\u5e76\u4e14\u4e0d\u7ed9\u5b83\u5de5\u8d44\uff0c\u6536\u76ca\u4e5f\u88ab\u4e22\u6389\u3002\n\n\u5272\u6389$x$\u5230$T$\u7684\u8fb9\u8868\u793a\u96c7\u4f63\u8fd9\u4e2a\u4eba\u5e76\u4e14\u7ed9\u5b83\u5de5\u8d44\u3002\n\n\u7136\u540e\u7528\u603b\u6536\u76ca$Sum$\u51cf\u53bb\u6700\u5c0f\u5272$Ans$\u5373\u4e3a\u7b54\u6848\u3002\n\n\u7136\u540e\u8003\u8651\u654c\u5bf9\u516c\u53f8\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u9009\u8fd9\u4e00\u5bf9$i,j$\u548c\u4e0d\u9009$i,j$\u4e4b\u95f4\u7684\u6536\u76ca\u5dee\u6b63\u597d\u662f$E_{i,j}\\times 2$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u5bf9$i,j$\u8fde\u8fb9$<i,j,E_{i,j}\\times 2>$\u3002\n\n\u7136\u540e\u540c\u4e0a\uff0c\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u8bb0\u5f97\u5f00$long\\ long$\u3002\n\n$Dinic$\u7684\u4ee3\u7801\u5728[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/Yangrui-Blog/p/10502148.html)\u91cc\u3002\n\n\u5404\u4f4d\u5de8\u4f6c\u4e5f\u53ef\u4ee5\u5e2e\u5fd9\u770b\u770b\u6211\u7684$Dinic$\u54ea\u91cc\u5199\u4e11\u4e86\u3002\u3002\u3002\n\n\u9644\u4e0a$ISAP$\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#define MAXN 1010\n#define MAXM 2100000\n#define MAX (1LL<<60)\nusing namespace std;\nint n,c=2,s,t;\nint head[MAXN],num[MAXN],deep[MAXN],h[MAXN];\nlong long sum=0;\nstruct Edge{\n\tint next,to;\n\tlong long w;\n}a[MAXM];\ninline int read(){\n\tint date=0;char c=0;\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date;\n}\ninline long long min(long long x,long long y){return x<y?x:y;}\ninline void add(int u,int v,long long w){\n\ta[c].to=v;a[c].w=w;a[c].next=head[u];head[u]=c++;\n\ta[c].to=u;a[c].w=0;a[c].next=head[v];head[v]=c++;\n}\nlong long dfs(int x,long long limit){\n\tif(x==t)return limit;\n\tint v;\n\tlong long sum,cost=0;\n\tfor(int i=h[x];i;i=a[i].next){\n\t\tv=a[i].to;\n\t\tif(a[i].w&&deep[v]+1==deep[x]){\n\t\t\tsum=dfs(v,min(a[i].w,limit-cost));\n\t\t\ta[i].w-=sum;\n\t\t\ta[i^1].w+=sum;\n\t\t\tcost+=sum;\n\t\t\tif(cost==limit)return cost;\n\t\t\tif(a[i].w)h[x]=i;\n\t\t}\n\t}\n\t--num[deep[x]];\n\tif(!num[deep[x]])deep[s]=n+2;\n\tdeep[x]++;num[deep[x]]++;\n\th[x]=head[x];\n\treturn cost;\n}\nlong long ISAP(){\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++)h[i]=head[i];\n\twhile(deep[s]<n+2)ans+=dfs(s,MAX);\n\treturn ans;\n}\nvoid init(){\n\tint x;\n\tlong long y;\n\tn=read();\n\ts=n+1;t=n+2;\n\tfor(int i=1;i<=n;i++){\n\t\tx=read();\n\t\tadd(i,t,x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\ty=0;\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tx=read();\n\t\t\ty+=x;\n\t\t\tadd(i,j,x*2);\n\t\t}\n\t\tsum+=y;\n\t\tadd(s,i,y);\n\t}\n}\nint main(){\n\tinit();\n\tprintf(\"%lld\\n\",sum-ISAP());\n\treturn 0;\n}\n\n```\n",
        "postTime": 1552124106,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1791 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u5927\u5bb6\u90fd\u80fd\u770b\u51fa\u6765\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\uff0c\u5728\u6b64\u4e3b\u8981\u9610\u8ff0\u4e00\u4e0b\u8fde\u8fb9\u7684\u6b63\u786e\u6027\u3002\n\n[\u535a\u5ba2\u6b22\u8fce\u4f60\uff0c\u4e3a\u4f60\u5f00\u5929\u8f9f\u5730](https://www.cnblogs.com/LittleMoMol-kawayi/p/solution_LuoGu_P1791.html)\n\n## \u8fde\u8fb9\u65b9\u5f0f\n\n1. \u6e90\u70b9 $S$ \u5411\u6bcf\u4e2a\u70b9\uff08\u7ecf\u7406\uff09$i$\uff0c\u8fde\u5bb9\u91cf\u4e3a $\\sum\\limits_{k=1}^n E_{i,k}$ \u7684\u8fb9\u3002\n2. \u6bcf\u4e2a\u70b9\uff08\u7ecf\u7406\uff09$i$ \u5411\u6c47\u70b9 $T$\uff0c\u8fde\u5bb9\u91cf\u4e3a $A_i$ \u7684\u8fb9\u3002\n3. \u6bcf\u4e2a\u70b9\uff08\u7ecf\u7406\uff09$i$ \u5411\u5176\u4ed6\u70b9\uff08\u7ecf\u7406\uff09$j$\uff0c\u8fde\u5bb9\u91cf\u4e3a $2 E_{i, j}$ \u7684\u8fb9\u3002\n4. \u7b54\u6848\u4e3a $\\sum\\limits_{i=1}^n \\sum\\limits_{j=1}^n E(i,j) - \\operatorname{dinic}$\u3002\n\n## \u7406\u8bba\u57fa\u7840\n\n\u7b54\u6848\u6700\u5927\u662f\u591a\u5c11\uff1f\u81ea\u7136\u662f\u6240\u6709 $E$ \u76f8\u52a0\u3002\n\n\u6211\u4eec\u4ee4\u8fde\u5411 $S$ \u7684\u70b9\u4e3a\u96c7\u4f63\u8005\uff1b\u8fde\u5411 $T$ \u7684\u70b9\u4e3a\u4e0d\u96c7\u4f63\u8005\u3002\u90a3\u4e48\u5f53\u7b54\u6848\u6700\u5927\u65f6\uff0c\u56fe\u5c31\u957f\u8fd9\u6837\uff08\u5f53\u7136\uff0c\u5b83\u4e0d\u53ef\u80fd\u8fbe\u5230\u8fd9\u4e2a\u72b6\u6001\uff09\u3002\n\n[![v27vtS.png](https://s1.ax1x.com/2022/08/26/v27vtS.png)](https://imgse.com/i/v27vtS)\n\n\u8fd9\u4e2a\u56fe\u8bf4\u660e\u6bcf\u4e2a\u7ecf\u7406\u5373\u96c7\u4f63\u4e86\u53c8\u6ca1\u6709\u96c7\u4f63\uff0c~~\u5448\u4e00\u79cd\u859b\u5b9a\u8c14\u7684\u72b6\u6001~~\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u70b9\u6211\u4eec\u53ea\u53ef\u4ee5\u8fde $S$ \u548c $T$ \u7684\u5176\u4e2d\u4e00\u6761\u8fb9\uff01\n\n\u4e0d\u8003\u8651\u51b2\u7a81\uff0c\u5047\u5982\u6211\u4eec\u5272\u53bb\u67d0\u4e2a\u70b9\u4e0e $T$ \u7684\u8fde\u8fb9\uff0c\u8bf4\u660e\u6211\u4eec\u8981\u96c7\u4f63\u8be5\u7ecf\u7406\uff0c\u96c7\u4f63\u8be5\u7ecf\u7406\u5c31\u9700\u8981\u4e00\u4e9b\u8d39\u7528\uff0c\u800c\u8fd9\u4e9b\u8d39\u7528\u5c31\u8be5\u4f53\u73b0\u5728\u8fd9\u6761\u8fb9\u4e0a\uff0c\u7531\u6b64\u5f97\u77e5\u6bcf\u4e2a\u70b9\u8fde\u5411 $T$ \u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a $A_i$\u3002\n\n\u4e0d\u8003\u8651\u51b2\u7a81\uff0c\u5047\u5982\u6211\u4eec\u5272\u53bb $S$ \u4e0e\u67d0\u4e2a\u70b9\u7684\u8fde\u8fb9\uff0c\u8bf4\u660e\u6211\u4eec\u8981\u89e3\u96c7\u8be5\u7ecf\u7406\uff0c\u89e3\u96c7\u8be5\u7ecf\u7406\u5c31\u9020\u6210\u4e00\u5b9a\u635f\u5931\uff0c\u800c\u8fd9\u4e9b\u635f\u5931\u5c31\u8be5\u4f53\u73b0\u5728\u8fd9\u6761\u8fb9\u4e0a\uff0c\u635f\u5931\u5177\u4f53\u662f\u591a\u5c11\uff1f\u81ea\u7136\u662f\u6240\u6709\u7b2c $i$ \u884c\u7684 $E$\uff0c\u56e0\u4e3a\u6ca1\u4e86 $i$ \u8fd9\u4e2a\u7ecf\u7406\uff0c\u6240\u6709\u4e0e $i$ \u76f8\u5173\u7684\u4ef7\u503c\u90fd\u8981\u88ab\u5220\u53bb\uff0c\u7531\u6b64\u5f97\u77e5 $S$ \u8fde\u5411\u6bcf\u4e2a\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a $\\sum\\limits_{k=1}^n E_{i,k}$\u3002\n\n\u8003\u8651\u51b2\u7a81\uff0c\u4e3a\u4ec0\u4e48\u8981\u90a3\u6837\u8fde\u8fb9\uff1f\u5148\u4e0a\u56fe\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/q4o1jt5p.png)\n\n\u8fd9\u4e2a\u56fe\u7684\u60c5\u51b5\u662f\u9009 $i$ \u4f46\u662f\u4e0d\u9009 $j$\u3002\n\n\u9996\u5148\u5982\u679c\u4e24\u4e2a\u70b9\u90fd\u8fde\u63a5\u4e8e $S$ \u6216\u8005 $T$ \uff0c\u90a3\u4e48\u4e2d\u95f4\u7684\u8fb9\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a~~\u4f60\u4eec\u90fd\u5728\u4e00\u4e2a\u56e2\u961f\u91cc\u4e86\u8fd8\u4e92\u76f8\u6b8b\u6740~~\u5c31\u8bf4\u4e0d\u8fc7\u53bb\u4e86\u3002\n\n\u5f53 $i$ \u5728 $S$ \u4e2d\uff0c$j$ \u5728 $T$ \u4e2d\uff0c\u5bf9\u4e8e $i$ \u4ed6\u662f\u5bf9\u6240\u5728\u56e2\u961f\u6709 $\\sum\\limits_{k=1}^n E_{i,k}$ \u7684\u8d21\u732e\uff0c\u4f46\u662f\uff01\u4f46\u662f\uff01 $j$ \u548c $i$ \u8ba4\u8bc6\uff0c\u56e0\u4e3a $j$ \u77e5\u9053 $i$ \u7684\u5e95\u7ec6\uff0c\u6240\u4ee5 $i$ \u5bf9\u56e2\u961f\u505a\u51fa\u7684\u8d21\u732e\u4e2d $E_{i,j}$ \u767d\u642d\u4e86\uff01\u4e0d\u4ec5\u767d\u642d\uff01\u8fd8\u4f1a\u51cf\u5c11 $E_{i,j}$\uff01~~\u60ca\u4e0d\u60ca\u559c\uff1f\u610f\u4e0d\u610f\u5916\uff1f~~\uff0c\u6240\u4ee5\u56e2\u961f\u603b\u8d21\u732e\u4e00\u4e0b\u5b50\u5c11\u4e86 $2 E_{i,j}$\uff0c\u90a3\u4e48\u8fde\u7684\u8fb9\u7684\u6743\u503c\u81ea\u7136\u4e3a $2E_{i,j}$\u3002\n\n> \u8fd9\u544a\u8bc9\u6211\u4eec\u4e00\u4e2a\u771f\u7406\uff1a\u4e0d\u8981\u628a\u81ea\u5df1\u5b8c\u5168\u88f8\u9732\u5728\u5bf9\u65b9\u7684\u89c6\u91ce\u91cc\uff0c\u8981\u7559\u4e00\u624b\u5907\u957f\u5c40\uff0c\u6b65\u5165\u793e\u4f1a\u540e\u5c31\u662f\u8fd9\u6837\u3002\n\n\u6240\u4ee5\u8bf4\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u6c42\u6700\u5c0f\u5272\uff0c\u7528\u603b\u4ef7\u503c\u51cf\u53bb\u5b83\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 1010 * 1010, M = 2 * (N * 3);\nconst int INF = 0x3f3f3f3f;\n\nint n, S, T, sum;\nint maze[1010][1010];\nint h[N], e[M], f[M], ne[M], idx;\nint q[N], cur[N], depth[N];\n\nint read()\n{\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-') w = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\ts = s * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\t\n\treturn s * w;\n}\n\nvoid add(int a, int b, int c)\n{\n\te[idx] = b;\n\tf[idx] = c;\n\tne[idx] = h[a];\n\th[a] = idx ++ ;\n\t\n\te[idx] = a;\n\tf[idx] = 0;\n\tne[idx] = h[b];\n\th[b] = idx ++ ;\n\t\n\treturn;\n}\n\nbool bfs()\n{\n\tint hh = 0, tt = 0;\n\tmemset(depth, -1, sizeof depth);\n\tq[0] = S;\n\tdepth[S] = 0;\n\tcur[S] = h[S];\n\t\n\twhile (hh <= tt)\n\t{\n\t\tint t = q[hh ++ ];\n\t\tfor (int i = h[t]; ~i; i = ne[i])\n\t\t{\n\t\t\tint ver = e[i];\n\t\t\tif (depth[ver] == -1 && f[i] > 0)\n\t\t\t{\n\t\t\t\tdepth[ver] = depth[t] + 1;\n\t\t\t\tcur[ver] = h[ver];\n\t\t\t\tq[ ++ tt] = ver;\n\t\t\t\tif (ver == T) return true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\nint dfs(int u, int lmt)\n{\n\tif (u == T) return lmt;\n\tint flow = 0;\n\tfor (int i = cur[u]; ~i && flow < lmt; i = ne[i])\n\t{\n\t\tcur[u] = i;\n\t\tint ver = e[i];\n\t\tif (depth[ver] == depth[u] + 1 && f[i] > 0)\n\t\t{\n\t\t\tint t = dfs(ver, min(f[i], lmt - flow));\n\t\t\tif (!t) depth[ver] = -1;\n\t\t\tf[i] -= t;\n\t\t\tf[i ^ 1] += t;\n\t\t\tflow += t;\n\t\t}\n\t}\n\t\n\treturn flow;\n}\n\nint dinic()\n{\n\tint res = 0, flow = 0;\n\twhile (bfs())\n\t\twhile (flow = dfs(S, INF))\n\t\t\tres += flow;\n\treturn res;\n}\n\nint main()\n{\n\tn = read();\n\tS = 0, T = n + 1;\n\tmemset(h, -1, sizeof h);\n\tfor (int i = 1; i <= n; i ++ )\n\t{\n\t\tint a = read();\n\t\tadd(i, T, a);\n\t}\n\tfor (int i = 1; i <= n; i ++ )\n\t{\n\t\tint tot = 0;\n\t\tfor (int j = 1; j <= n; j ++ )\n\t\t{\n\t\t\tcin >> maze[i][j];\n\t\t\tsum += maze[i][j];\n\t\t\ttot += maze[i][j];\n\t\t}\n\t\tadd(S, i, tot);\n\t}\n\t\n\tfor (int i = 1; i <= n; i ++ )\n\t\tfor (int j = 1; j <= n; j ++ )\n\t\t{\n\t\t\tif (i == j) continue;\n\t\t\tadd(i, j, 2 * maze[i][j]);\n\t\t}\n\t\n\tcout << sum - dinic() << endl;\n\t\n\treturn 0;\n}\n```\n\n## \u540e\u8bed\n\n\u601d\u8003\u662f\u597d\u7684\uff0c\u5b8c\u7ed3\u6492\u82b1\uff01",
        "postTime": 1661502054,
        "uid": 590755,
        "name": "LittleMoMol",
        "ccfLevel": 0,
        "title": "P1791 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63 \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u62e5\u6709\u6bd4\u8f83\u8be6\u7ec6\u7684\u8bc1\u660e\u7684\u9898\u89e3\u3002\n\n[\u4eba\u5458\u96c7\u4f63](https://www.luogu.com.cn/problem/P1791)\n\n> \u7ed9\u51fa $n$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u7684\u96c7\u4f63\u8d39\u7528\u4e3a $a_i$\uff0c\u4e24\u4e2a\u4eba\u4e4b\u95f4\u6709\u4ef7\u503c\u5ea6 $E(i,j)$\u3002\n>\n> \u8981\u6c42\u9009\u62e9\u4e00\u4e9b\u4eba\uff0c\u5047\u8bbe\u9009\u62e9\u7684\u96c6\u5408\u4e3a $A$\uff0c\u90a3\u4e48\u603b\u5229\u76ca\u5c31\u662f $\\sum_{i,j\\in A} E(i,j)-\\sum_{i\\in A,j\\not\\in A} E(i,j)-\\sum_{i\\in A} a_i$\u3002\n>\n> \u6c42\u603b\u5229\u76ca\u7684\u6700\u5927\u503c\u3002\n\n\u9996\u5148\u901a\u8fc7\u8865\u96c6\u601d\u60f3\u8f6c\u5316\u4e00\u4e0b\uff1a\n\n$$\\sum_{i\\in A,j\\not\\in A} E(i,j)=\\sum_{i\\in A} C_i-\\sum_{i\\in A,j\\in A} E(i,j)$$\n\n\u5176\u4e2d $C_i$ \u8868\u793a\u4ece\u70b9 $i$ \u8fde\u51fa\u7684\u6240\u6709\u8fb9\uff0c\u8fd9\u663e\u7136\u662f\u6b63\u786e\u7684\u3002\u6240\u4ee5\u6709\uff1a\n\n$$W=2\\sum_{i\\in A,j\\in A} E(i,j)-\\sum_{i\\in A} a_i+C_i$$\n\n\u9898\u76ee\u8981\u6c42\u662f\u6700\u5927\u5316 $W$\uff0c\u800c\u5bf9\u4e8e\u70b9 $i$\uff0c$a_i,C_i$ \u4e00\u5b9a\u662f\u5b9a\u503c\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u3002\n\n\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u6bd4\u8f83\u6807\u51c6\u7684\u6700\u5c0f\u5272\u6a21\u578b\u4e86\uff0c\u5bb9\u6613\u60f3\u5230\uff1a\n\n1. \u8fde\u8fb9 $(S,i,C_i)$\u3002\n2. \u8fde\u8fb9 $(T,i,a_i)$\u3002\n3. \u5bf9\u4e8e $E(i,j)$\uff0c\u8fde\u8fb9 $(i,j,2\\times E(i,j))$\u3002\n\n\u7136\u540e\u7528 $\\sum_{i=1}^n \\sum_{j=1}^n E(i,j)$ \u51cf\u53bb\u6700\u5c0f\u5272\u5373\u53ef\uff0c\u4e0b\u9762\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\u8fd9\u6837\u5efa\u6a21\u7684\u6b63\u786e\u6027\u3002\uff08\u7406\u6027\u6109\u60a6\uff09\n\n\u9996\u5148\u662f\u5047\u8bbe\u5c06\u6240\u6709\u96c7\u5458\u5168\u90e8\u96c7\u4f63\uff0c\u7136\u540e\u8981\u4e48\u51cf\u53bb\u8d21\u732e\uff0c\u8981\u4e48\u51cf\u53bb\u96c7\u4f63\u8d39\u7528\u3002\n\n\u76f8\u540c\u7684\uff0c\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u8981\u4e48\u76f4\u63a5\u5272\u6389 $(S,i,C_i)$ \u7684\u8fb9\uff0c\u8868\u793a\u76f4\u63a5\u4e0d\u9009 $i$\uff0c\u5373\u51cf\u53bb\u8d21\u732e\u3001\n\n\u8981\u4e48\u76f4\u63a5\u5272\u6389 $(i,T,a_i)$\uff0c\u8868\u793a\u96c7\u4f63 $i$\uff0c\u5373\u51cf\u53bb\u96c7\u4f63\u8d39\u7528\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u7684\u60c5\u51b5\uff0c\u5b83\u8fd8\u662f\u6709\u53ef\u80fd\u4f7f\u539f\u56fe\u8fde\u901a\uff08\u5b58\u5728\u8fde\u8fb9 $3$\uff09\u3002\n\n\u6240\u4ee5\u8fd8\u9700\u8981\u5272\u6389\u6240\u6709 $(i,j,2\\times E(i,j))$\uff0c\u5176\u4e2d $j$ \u662f\u6240\u6709\u6ca1\u6709\u5272\u6389 $(j,T,a_j)$ \u7684\u8fb9\u3002\uff08\u5426\u5219\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 $S\\to i\\to j\\to T$ \u8fde\u901a\uff09\n\n\u8fd9\u6070\u597d\u5bf9\u5e94\u4e86\uff0c\u5982\u679c\u9009\u62e9 $i$ \u800c\u6ca1\u6709\u9009\u62e9 $j$ \u5c31\u9700\u8981\u51cf\u53bb $E(i,j)$ \u8fd9\u4e00\u6761\u4ef6\uff0c\u4e5f\u5c31\u662f\u53ea\u7edf\u8ba1 $2\\sum_{i\\in A,j\\in A} E(i,j)$\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u6ca1\u5fc5\u8981\u4f7f\u7528 `long long`\uff0c\u4f46\u4e4b\u524d\u4e3a\u4e86\u4fdd\u9669\u8fd8\u662f\u5f00\u4e86\uff0c\u5bfc\u81f4\u76f4\u63a5 T \u5230 50pts\uff0c\u6df1\u523b\u4f53\u4f1a\u5230 `long long` \u7684\u6548\u7387\u95ee\u9898\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\nconst int INF = 1 << 30;\nconst int N = 1010;\nconst int M = N * N * 2;\n\nint n, a[N], c[N], w[N][N];\nint S, T, cnt = 1, head[N], now[N], d[N];\nstruct Edge{int nxt, to, val;} ed[M];\nqueue<int> q;\n\nint read() {\n    int x = 0, f = 1; char c = getchar();\n    while (c < '0' || c > '9') f = (c == '-') ? -1 : 1, c = getchar();\n    while (c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n\nvoid add(int u, int v, int w){\n\ted[++ cnt] = (Edge){head[u], v, w}; head[u] = cnt;\n\ted[++ cnt] = (Edge){head[v], u, 0}; head[v] = cnt;\n}\n\nbool bfs(){\n\twhile(!q.empty()) q.pop();\n\tmemset(d, 0, sizeof(d));\n\td[S] = 1, now[S] = head[S]; q.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front(); q.pop();\n\t\tfor(int i = head[u]; i; i = ed[i].nxt){\n\t\t\tint v = ed[i].to, w = ed[i].val;\n\t\t\tif(w && !d[v]){\n\t\t\t\td[v] = d[u] + 1;\n\t\t\t\tnow[v] = head[v];\n\t\t\t\tif(v == T) return true;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint Dinic(int u, int flow){\n\tif(u == T) return flow;\n\tint rest = flow; int i;\n\tfor(i = now[u]; i && rest; i = ed[i].nxt){\n\t\tint v = ed[i].to, w = ed[i].val;\n\t\tif(d[v] == d[u] + 1 && w){\n\t\t\tint k = Dinic(v, min(rest, w));\n\t\t\tif(!k) d[v] = 0;\n\t\t\ted[i].val -= k;\n\t\t\ted[i ^ 1].val += k;\n\t\t\trest -= k;\n\t\t}\n\t}\n\tnow[u] = i;\n\treturn flow - rest;\n}\n\nint Max_Flow(){\n\tint Flow = 0, flow; \n\twhile(bfs())\n\t\twhile(flow = Dinic(S, INF)) Flow += flow;\n\treturn Flow;\n}\n\nint main(){\n\tn = read();\n\tfor(int i = 1; i <= n; i ++) a[i] = read();\n\tint ans = 0;\n\tfor(int i = 1; i <= n; i ++)\n\t\tfor(int j = 1; j <= n; j ++){\n\t\t\tw[i][j] = read();\n\t\t\tif(i == j || !w[i][j]) continue;\n\t\t\tc[i] += w[i][j]; ans += w[i][j];\n\t\t\tadd(i, j, 2 * w[i][j]);\n\t\t}\n\tS = n + 1, T = S + 1;\n\tfor(int i = 1; i <= n; i ++)\n\t\tadd(S, i, c[i]), add(i, T, a[i]);\n\tprintf(\"%d\\n\", ans - Max_Flow());\n\treturn 0;\n}\n```",
        "postTime": 1626338141,
        "uid": 117941,
        "name": "_LPF_",
        "ccfLevel": 9,
        "title": "P1791 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63"
    },
    {
        "content": "## \u505a\u6cd5\n\n\u6700\u5c0f\u5272\u3002\n\n\u9996\u5148\u8fd9\u79cd\u6709\u6536\u76ca\u6709\u635f\u5931\u7684\u9898\u7684\u505a\u6cd5\u4e00\u822c\u90fd\u662f\u7528\u603b\u7684\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u635f\u5931\u3002\u6240\u4ee5\u6211\u4eec\u7684**\u5927\u4f53\u601d\u8def\u5c31\u662f\u7528\u603b\u6536\u5165 $\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^n E_{i,j}$ \u51cf\u53bb\u6700\u5c0f\u635f\u5931\u6c42\u51fa\u7b54\u6848\uff0c\u6700\u5c0f\u635f\u5931\u7528\u6700\u5c0f\u5272\u6c42\u89e3**\u3002\n\n\u8003\u8651\u6c42\u89e3\u6700\u5c0f\u635f\u5931\uff0c**\u5148\u5efa\u51fa\u6e90\u70b9\u3001\u6c47\u70b9\u548c\u8868\u793a\u7ecf\u7406\u7684 $n$ \u4e2a\u70b9**\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u7ecf\u7406**\u5206\u4e3a\u4e24\u4e2a\u201c\u9635\u8425\u201d\uff1a\u88ab\u6211\u65b9\u96c7\u4f63\u548c\u88ab\u654c\u65b9\u96c7\u4f63**\u3002\u90a3\u4e48\u8003\u8651**\u7528\u6e90\u70b9\u8868\u793a\u6211\u65b9\u9635\u8425\uff0c\u6c47\u70b9\u8868\u793a\u5730\u65b9\u9635\u8425\uff0c\u90a3\u4e48\u6240\u6709\u548c\u6e90\u70b9\u76f8\u8fde\u7684\u70b9\u90fd\u52a0\u5165\u4e86\u6211\u65b9\uff0c\u6240\u6709\u548c\u6c47\u70b9\u76f8\u8fde\u7684\u70b9\u90fd\u52a0\u5165\u4e86\u654c\u65b9**\u3002\u56e0\u4e3a**\u52a0\u5165\u6211\u65b9\u7684\u82b1\u8d39\u662f $A_i$\uff0c\u52a0\u5165\u654c\u65b9\u7684\u82b1\u8d39\u5219\u662f $\\sum\\limits_{j=1}^nE_{i,j}$\uff0c\u6240\u4ee5\u4ece\u6e90\u70b9\u5411 $i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $\\sum\\limits_{j=1}^nE_{i,j}$ \u7684\u8fb9\uff0c\u4ece $i$ \u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $A_j$ \u7684\u8fb9**\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uhs7xpz4.png)\n\n\u63a5\u4e0b\u6765\u8003\u8651 $i,j$ \u4e24\u4eba\u5904\u5728\u4e0d\u540c\u9635\u8425\u65f6\u7684\u82b1\u8d39\u3002\u5047\u8bbe $i$ \u52a0\u5165\u4e86\u6211\u65b9\uff0c$j$ \u52a0\u5165\u4e86\u654c\u65b9\uff0c\u6b64\u65f6\u60c5\u51b5\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a4vyvmy9.png)\n\n\u90a3\u4e48**\u6b64\u65f6\u7684\u635f\u5931\u9700\u8981\u591a\u8ba1\u7b97 $2E_{i,j}$\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4ece $i$ \u5411 $j$ \u8fde\u6d41\u91cf\u4e3a $2E_{i,j}$ \u7684\u8fb9**\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qzan8flp.png)\n\n\u6240\u4ee5\u5efa\u56fe\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n- \u5efa\u51fa\u6e90\u70b9\u3001\u6c47\u70b9\u548c\u8868\u793a\u7ecf\u7406\u7684 $n$ \u4e2a\u70b9\n\n- \u4ece\u6e90\u70b9\u5411 $i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $\\sum\\limits_{j=1}^nE_{i,j}$ \u7684\u8fb9\uff0c\u4ece $i$ \u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $A_j$ \u7684\u8fb9\n\n- \u4ece\u6bcf\u4e00\u4e2a $i$ \u5411\u6bcf\u4e00\u4e2a $j$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $2E_{i,j}$ \u7684\u8fb9\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f $\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=1}^n E_{i,j}$ \u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n\n## AC \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst long long S=5000005,MS=2000005,MMS=1005;\n\nint n,s,t;\nlong long sum[MMS];\nint esum,to[S],nxt[S],h[MS];\nlong long c[S];\nint dep[MS];\n\ninline void init()\n{\n\tesum=1;\n\tmemset(h,0,sizeof(h));\n\ts=0;\n\tt=n+1;\n}\n\ninline void add(int x,int y,long long w)\n{\n\tc[++esum]=w;\n\tto[esum]=y;\n\tnxt[esum]=h[x];\n\th[x]=esum;\n}\n\ninline bool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int> q;\n\tq.push(s);\n\tdep[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(c[i]>0&&dep[v]==0)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=0;\n}\n\nlong long dfs(int u,long long w)\n{\n\tif(u==t)\n\t{\n\t\treturn w;\n\t}\n\tlong long sum=0;\n\tfor(int i=h[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(c[i]>0&&dep[v]==dep[u]+1)\n\t\t{\n\t\t\tlong long re=dfs(v,min(w,c[i]));\n\t\t\tc[i]-=re;\n\t\t\tc[i^1]+=re;\n\t\t\tsum+=re;\n\t\t\tw-=re;\n\t\t\tif(w==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(sum==0)\n\t{\n\t\tdep[u]=0;\n\t}\n\treturn sum;\n}\n\ninline long long dinic()\n{\n\tlong long ans=0;\n\twhile(bfs())\n\t{\n\t\tans+=dfs(s,1e17);\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tinit();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tlong long x;\n\t\tscanf(\"%lld\",&x);\n\t\tadd(i,t,x);\n\t\tadd(t,i,0);\n\t}\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tlong long x;\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tsum[i]+=x;\n\t\t\tadd(i,j,x*2);\n\t\t\tadd(j,i,0);\n\t\t\tans+=x;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(s,i,sum[i]);\n\t\tadd(i,s,0);\n\t}\n\tprintf(\"%lld\\n\",ans-dinic());\n\treturn 0;\n}\n```",
        "postTime": 1646220319,
        "uid": 251130,
        "name": "lovely_ckj",
        "ccfLevel": 0,
        "title": "P1791 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63 \u9898\u89e3"
    },
    {
        "content": "\u89e3\u6cd5\u5c31\u662f\u5f88\u7ecf\u5178\u7684\u4e8c\u5143\u5173\u7cfb\u7f51\u7edc\u6d41\uff0c\u5176\u4ed6\u7684\u9898\u89e3\u5df2\u7ecf\u8bf4\u7684\u5f88\u660e\u767d\u4e86\n\n\u4f46\u662f\u4f3c\u4e4e\u975e\u4f18\u5316\u5efa\u56fe\u5f88\u5bb9\u6613\u88ab\u5361\u5e38\u6765\u7740\n\n\u90a3\u4e48\u8fd9\u91cc\u5c31\u7ed9\u51fa\u4e00\u4efd\u66b4\u529b\u5efa\u56fe\u7684\u975eDinic\u548cISAP\u7684HLPP\u4ee3\u7801\n\nHLPP\u7684\u4f18\u5316\u62c9\u6ee1\u7684\u8bdd\u611f\u89c9\u4f18\u70b9\u8fd8\u662f\u6709\u4e2a\u5341\u5206\u4f18\u79c0\u7684\u4e0b\u754c\uff0c\u5e73\u5747\u901f\u5ea6\u5728\u52a0\u4f18\u5316\u4ee5\u540e\u5f88\u4e0d\u9519\uff0c\u57fa\u672c\u4e0a\u6ca1\u600e\u4e48\u88ab\u5361\u8fc7\uff0c\u5207\u9898\u624b\u611f++\n\nAC\u4ee3\u7801\uff1a\n```cpp\nusing namespace std;\nstruct node\n{\n\tlong long anti, flow, sign;\n\tnode(long a, long b, long long c)\n\t{\n\t\tanti = c, flow = b, sign = a;\n\t}\n};\nstruct rel    //relabel\n{\n\tlong long of, high, sign;  //overflow\n\tfriend bool operator<(rel a, rel b) { return a.of < b.of; }\n};\nstruct Highest_relabel_to_front\n{\n\tvector<rel> rel1;\n\tvector<vector<node>::iterator> parttt;\n\tvector<vector<node>> flow_map;\n\tlist<rel> ofc[13000]; //overflow_collection\n\tlong long node_sum, level, beginning1, ending1; //begin\uff0cend\u7ed9\u5b9as\uff0ct\n\tvector<long long> height;\n\tHighest_relabel_to_front(long s = 0, long a = 0, long b = 0) :beginning1(a), ending1(b), rel1(s + 1)\n\t{\n\t\tflow_map.resize(s + 1);\n\t\tparttt.resize(s + 1);\n\t\theight.resize(s * 2 + 2, 0);\n\t\tnode_sum = s;\n\t}\n\tvoid relabel(long node_sign)\n\t{\n\t\tlong long h = 101000;\n\t\tlong floor = rel1[node_sign].high;\n\t\tfor (auto &p : flow_map[node_sign])\n\t\t\tif (p.flow > 0)\n\t\t\t\th = min(rel1[p.sign].high, h);\n\t\trel1[node_sign].high = h + 1;\n\t\theight[floor]--, height[h + 1]++;\n\t\tif (h > level) level = h;\n\t}\n\tvoid sign_part()\n\t{\n\t\tfor (long s = 0; s < rel1.size(); ++s) rel1[s].sign = s;\n\t\tfor (auto &s : height) s = 0;\n\t\theight[node_sum] = 1;\n\t\theight[0] = node_sum - 1;\n\t}\n\tvoid initialize_preflow(long beginning)\n\t{\n\t\tfor (auto &s : rel1)\n\t\t{\n\t\t\ts.high = 0;\n\t\t\ts.of = 0;\n\t\t}\n\t\trel1[beginning].high = node_sum;\n\t\tfor (auto &p : flow_map[beginning])\n\t\t{\n\t\t\tflow_map[p.sign][p.anti].flow = p.flow;\n\t\t\trel1[p.sign].of = p.flow;\n\t\t\trel1[beginning].of -= p.flow;\n\t\t\tp.flow = 0;\n\t\t\tofc[rel1[p.sign].high].push_back(rel1[p.sign]);\n\t\t\tif (rel1[p.sign].high > level)\n\t\t\t\tlevel = rel1[p.sign].high;\n\t\t\theight[rel1[p.sign].high]++;\n\t\t}\n\t}\n\tvoid add_edge(long a, long b, long long c)\n\t{\n\t\tif (!flow_map[a].empty())\n\t\t\tfor (auto &s : flow_map[a])\n\t\t\t\tif (s.sign == b)\n\t\t\t\t{\n\t\t\t\t\ts.flow += c;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\tflow_map[a].push_back(node(b, c, flow_map[b].size()));\n\t\tflow_map[b].push_back(node(a, 0, flow_map[a].size() - 1));\n\t}\n\tvoid speed_up(long k)\n\t{\n\t\tfor (auto &s : rel1)\n\t\t\tif (s.high > k &&s.high < node_sum)\n\t\t\t\ts.high = node_sum + 1;\n\t}\n\tvoid push(int node_sign)\n\t{\n\t\twhile (rel1[node_sign].of > 0 && node_sign != beginning1 && node_sign != ending1)\n\t\t{\n\t\t\tauto s = parttt[node_sign];\n\t\t\tif (s == flow_map[node_sign].end())\n\t\t\t{\n\t\t\t\trelabel(node_sign);\n\t\t\t\tparttt[node_sign] = flow_map[node_sign].begin();\n\t\t\t}\n\t\t\telse if (s->flow > 0 && rel1[node_sign].high == rel1[s->sign].high + 1)\n\t\t\t{\n\t\t\t\tif (s->flow > rel1[node_sign].of)\n\t\t\t\t{\n\t\t\t\t\tflow_map[s->sign][s->anti].flow += rel1[node_sign].of;\n\t\t\t\t\ts->flow -= rel1[node_sign].of;\n\t\t\t\t\trel1[s->sign].of += rel1[node_sign].of;\n\t\t\t\t\trel1[node_sign].of = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tflow_map[s->sign][s->anti].flow += s->flow;\n\t\t\t\t\trel1[node_sign].of -= s->flow;\n\t\t\t\t\trel1[s->sign].of += s->flow;\n\t\t\t\t\ts->flow = 0;\n\t\t\t\t}\n\t\t\t\tif (s->sign != beginning1 && s->sign != ending1)\n\t\t\t\t\tofc[rel1[s->sign].high].push_back(rel1[s->sign]);\n\t\t\t}\n\t\t\telse\n\t\t\t\tparttt[node_sign]++;\n\t\t}\n\t}\n\tlong long max_flow()\n\t{\n\t\tsign_part();\n\t\tlevel = 0;\n\t\tfor (int i = 0; i < node_sum + 1; ++i)\n\t\t\tparttt[i] = flow_map[i].begin();\n\t\tinitialize_preflow(beginning1);\n\t\twhile (level >= 0)\n\t\t{\n\t\t\tint level2 = level;\n\t\t\tif (!ofc[level2].empty())\n\t\t\t{\n\t\t\t\tint s = ofc[level].back().sign;\n\t\t\t\tofc[level].pop_back(), push(s);\n\t\t\t\tif (height[level2] == 0) speed_up(level2);\n\t\t\t}\n\t\t\telse\n\t\t\t\tlevel--;\n\t\t}\n\t\treturn rel1[ending1].of;\n\t}\n\n};\nHighest_relabel_to_front hlpp(12000, 0, 11000);\nlong long w[1100][1100];\nlong long val[1100];\nconst int inf = 0x6fffffff;\nint32_t main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\tlong long ALLans = 0;\n\tint L = 1;\n\tlong long n, m, u, v, a, b, c;\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i)\n\t\tcin >> val[i];\n\tfor(int i=1;i<=n;++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t{\n\t\t\tcin >> w[i][j];\n\t\t\tALLans += w[i][j];\n\t\t\tif (j <= i)\n\t\t\t\tcontinue;\n\t\t\thlpp.add_edge(j, 11000, w[i][j]);\n\t\t\thlpp.add_edge(i, 11000, w[i][j]);\n\t\t\thlpp.add_edge(i, j, 2 * w[i][j]);\n\t\t\thlpp.add_edge(j, i, 2 * w[i][j]);\n\t\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\thlpp.add_edge(0, i, val[i]);\n\tcout << ALLans - hlpp.max_flow() << endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1564305272,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1791 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63\u3011"
    },
    {
        "content": "\uff08\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\uff0c\u5728\u8fde\u8fb9\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u662f\u4e0d\u662f0\uff0c\u662f\u5c31\u4e0d\u8fde\u8fb9\uff0c\u5c31\u53ef\u4ee5rank1\u3002\u3002\u3002\u3002\u3002\u3002\uff09\n\n\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u5728\u4e8c\u5143\u5173\u7cfb\u4e0b\u6c42\u6700\u5927\u503c\u7684\u9898\u3002\n\u5148\u628a\u77e9\u9635\u4e2d\u6240\u6709\u6570\u52a0\u8d77\u6765\u518d\u51cf\u53bb\u6211\u4eec\u6784\u9020\u7684\u6700\u5c0f\u5272\u5c31\u662f\u6700\u5927\u503c\u3002\n\u800c\u6700\u5c0f\u5272\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u4eba\u548cS\u548cT\u8fde\u8fb9\uff0c\u5272\u4e0eS\u76f8\u8fde\u7684\u8fb9\u8868\u793a\u8058\u7528\uff0c\u5426\u5219\u8868\u793a\u4e0d\u8058\u7528\u3002\u90a3\u4e48\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u4e0eS\u76f8\u8fde\u7684\u8fb9\u7684\u8fb9\u6743\u4e3ab\u3002\n\n\u7136\u540e\u6765\u8003\u8651\u4e8c\u5143\u5173\u7cfb\uff1b\n\n\u5bf9\u4e8ei\uff0cj\uff0c\u540c\u65f6\u9009\u7684\u4ee3\u4ef7\u662f0\uff08\u6211\u4eec\u4e00\u5f00\u59cb\u5c31\u52a0\u5165\u4e86\u8d21\u732e\uff09\u3002\n\n\u540c\u65f6\u4e0d\u9009\u7684\u4ee3\u4ef7\u662f$E_{ij}+E{ji}$\n\n\u4e00\u4e2a\u9009\u4e00\u4e2a\u4e0d\u9009\u7684\u4ee3\u4ef7\u662f$E_{ij}+E{ji}+E{ij}$(\u9700\u8981\u51cf\u53bb\u4e00\u5f00\u59cb\u52a0\u7684E)\n\n\u901a\u8fc7\uff08\u548c\u5176\u4ed6\u4e8c\u5143\u5173\u7cfb\u4e00\u6837\u7684\uff09\u89e3\u65b9\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230i\uff0cj\u4e0eS\u7684\u8fde\u8fb9\u6d41\u91cf\u4e3a0\uff0c\u4e0eT\u7684\u8fde\u8fb9\u6d41\u91cf\u4e3a$E_{ij}$\uff0ci\uff0cj\u4e4b\u95f4\u7684\u8fde\u8fb9\u6d41\u91cf\u4e3a$2*E_{ij}$ \u7136\u540e\u518d\u628ab\u52a0\u4e0a\u53bb\u5c31\u884c\u4e86\u3002\n\nAC Code(20190312 Rank1 72ms):\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1055\n#define maxm maxn * maxn * 5\n#define inf 0x3f3f3f3f\n#define LL long long\nusing namespace std;\n\nchar cb[1<<15],*cs=cb,*ct=cb;\n#define getc() (cs==ct && (ct = (cs = cb) + fread(cb , 1 , 1<<15 , stdin),cs==ct)?0:*cs++)\nvoid read(int &res)\n{\n\tchar ch;bool f=0;\n\tfor(;!isdigit(ch=getc());) if(ch=='-') f=1;\n\tfor(res=ch-'0';isdigit(ch=getc());res=res*10+ch-'0');\n\t(f) && (res = -res);\n}\n\nint n,S,T,tot;\nint b[maxn];\nLL sum[maxn],cap[maxm];\n\nint dis[maxn];\nint buf[maxn],info[maxn],Prev[maxm],to[maxm],cnt_e=1;\ninline void Node(int u,int v,LL c){ Prev[++cnt_e]=info[u],info[u]=cnt_e,to[cnt_e]=v,cap[cnt_e]=c; }\ninline void Line(int u,int v,LL c,LL d=0){ Node(u,v,c),Node(v,u,d); }\n\nLL aug(int now,LL Max)\n{\n    if(now == T) return Max;\n    LL inc , st = Max;\n    for(int &i=info[now];i;i=Prev[i])\n        if(cap[i] && dis[to[i]]+1 == dis[now])\n        {\n            inc = aug(to[i],min(cap[i] , st));\n            if(inc) st -= inc , cap[i] -= inc , cap[i^1] += inc;\n\t\t\telse dis[to[i]] = 0;\n            if(!st) break;\n        }\n    return Max - st;\n}\n\nbool BFS()\n{\n    static queue<int>q;\n    memset(dis,-1,sizeof dis);\n    q.push(T),dis[T]=0;\n    for(int now;!q.empty();)\n    {\n        now = q.front() , q.pop();\n        for(int i=info[now];i;i=Prev[i])\n            if(cap[i^1] && dis[to[i]]==-1)\n            {\n                dis[to[i]] = dis[now] + 1;\n                q.push(to[i]);\n            }\n    }\n    return dis[S] != -1;\n}\n\nint main()\n{\n\tread(n);\n\ttot = n;\n    S = ++tot , T = ++tot;\n    LL ans = 0;\n\tfor(int i=1;i<=n;i++) read(b[i]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tread(x);\n\t\t\tif(i<j && x)\n\t\t\t{\n\t\t\t\tans += x*2;\n\t\t\t\tsum[i] += x, sum[j] += x;\n\t\t\t\tLine(i,j,x*2ll,x*2ll);\n\t\t\t}\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tLine(S,i,b[i]),Line(i,T,sum[i]);\n\tmemcpy(buf,info,sizeof info);\n    for(;BFS();)\n        ans -= aug(S,inf),\n\t\tmemcpy(info,buf,sizeof buf);\n    printf(\"%lld\\n\",ans);\n}\n\n```\n",
        "postTime": 1552388163,
        "uid": 30037,
        "name": "Freopen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1791 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63\u3011"
    },
    {
        "content": "~~\u7adf\u7136\u6ca1\u6709\u8fd9\u9898\u7684\u9898\u89e3\uff0c\u6c34\u4e00\u53d1qwq~~\n## \u6700\u5c0f\u5272\u6a21\u578b\n#### 1.\u9898\u610f:\n\u3000a.\u9009\u62e9\u6bcf\u4e2a\u4eba\u6709\u4e00\u4e2a\u4ee3\u4ef7$A_i$\uff1b\n\n\u3000b.\u5982\u679c\u6709\u4e24\u4e2a\u4eba\u540c\u65f6\u9009\u62e9\u5c31\u53ef\u4ee5\u83b7\u5f97\u6536\u76ca$E_{i,j}$\n    \n\u3000c.\u5982\u679c\u4e00\u4e2a\u4eba\u9009\u62e9\u53e6\u4e00\u4e2a\u4e0d\u9009\u4f1a\u4ea7\u751f\u4ee3\u4ef7$E_{i,j}$\n \n#### 2.\u89e3\u6cd5\n\n\u3000\u3000a,b\u4e24\u6761\u5c31\u662f\u5178\u578b\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u4ece$S$\u5411\u6bcf\u4e2a\u4eba\u8fde\u8fb9\u6d41\u91cf\u4e3a\u8fd9\u4eba\u53ef\u4ee5\u5e26\u6765\u7684\u6536\u76ca$\\Sigma_{j=1}^{n} E_{i,j}$\uff0c\u7528$ans$\u8bb0\u5f55\u603b\u6536\u76ca\uff0c\u518d\u4ece\u4eba\u5411$T$\u8fde\u8fb9\u8868\u793a\u4ee3\u4ef7$A_i$\uff0c\u7528$ans-minc$\uff08\u8fd9\u6837\u5982\u679c\u5272\u6389\u4eba\u5230$T$\u7684\u8fb9\u4ee3\u8868\u9009\u8fd9\u4e2a\u4eba\u5e76\u652f\u4ed8\u4ee3\u4ef7\uff0c\u5982\u679c\u5272\u6389$S$\u5230\u4eba\u7684\u8fb9\u4ee3\u8868\u820d\u5f03\u6536\u76ca\uff0c\u4e0d\u652f\u4ed8\u4ee3\u4ef7\uff09\u5f97\u5230\u7684\u5c31\u662f\u6700\u5927\u7684\u6536\u76ca\n\n\u3000\u3000\u8003\u8651c\u6761\u4ef6\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u5bf9$i,j$\u90fd\u518d\u65b0\u5efa\u4e00\u6761\u4ece$i$\u5230$j$\u7684\u8fb9\uff0c\u6d41\u91cf\u4e3a$E_{i,j}<<1$\u8fd9\u6837\u5982\u679c\u9009\u4e00\u4e2a\u4e0d\u9009\u53e6\u4e00\u4e2a\u7684\u8bdd\u8fd9\u6761\u8fb9\u5c31\u4f1a\u65ad\u6389\uff08\u9020\u6210\u4ee3\u4ef7\uff09,c\u6761\u4ef6\u5c31\u80fd\u6ee1\u8db3\u4e86\n \n\u3000\u3000\u6700\u5c0f\u5272\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u5927\u6d41\uff0c\u6211\u7528\u7684$dinic$\u6781\u9650\u6570\u636e$942ms$~~\u6709\u70b9\u614c~~\n  \n\u3000\u3000~~\u8fd8\u6709\u5c31\u662f\u5343\u4e07\u522b\u5fd8\u5f00long long~~\n  \n#### 3.\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\nusing namespace std;\ninline long long read(){\n\tlong long ans=0,fh=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')\n\t\t\tfh=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t\tans=(ans<<1)+(ans<<3)+ch-'0',ch=getchar();\n\treturn ans*fh;\n}\nconst int maxn=1e4,maxm=5e6,inf=0x7fffffff;\nint n,m,a,b,c,cc[maxn],cur[maxn],head[maxn],nex[maxm],v[maxm],s,t;\nint num=1;\nlong long ans,siz[maxn],fee,w[maxm];\nqueue<int>q;\nint bh(int x,int y){return n+(x-1)*n+y;}\nvoid add(int x,int y,long long z){\n\tv[++num]=y;\n\tw[num]=z;\n\tnex[num]=head[x];\n\thead[x]=num;\n\tv[++num]=x;\n\tw[num]=0;\n\tnex[num]=head[y];\n\thead[y]=num;\n}\nbool bfs(){\n\tmemset(cc,0,sizeof(cc));\n\tcc[s]=1;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[now];i;i=nex[i])\n\t\t\tif(w[i]&&!cc[v[i]])\n\t\t\t\tcc[v[i]]=cc[now]+1,q.push(v[i]);\n\t}\n\treturn cc[t];\n}\nlong long dfs(int x,long long ll){\n\tif(x==t)\n\t\treturn ll;\n\tfor(int &i=cur[x];i;i=nex[i])\n\t\tif(w[i]&&cc[v[i]]==cc[x]+1){\n\t\t\tint pp=dfs(v[i],ll>w[i]?w[i]:ll);\n\t\t\tif(pp){\n\t\t\t\tw[i]-=pp;\n\t\t\t\tw[i^1]+=pp;\n\t\t\t\treturn pp;\n\t\t\t}\n\t\t}\n\treturn 0;\n}\nvoid dinic(){\n\tlong long maxl=0,ll;\n\twhile(bfs()){\n\t\tmemcpy(cur,head,sizeof(cur));\n\t\twhile(ll=dfs(s,inf))\n\t\t\tmaxl+=ll;\n\t}\n\tprintf(\"%d\\n\",ans-maxl);\n}\nint main(){\n\tn=read();s=0;t=n+1;\n\tfor(int i=1;i<=n;i++)\n\t\ta=read(),add(i,t,a);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tfee=read();\n\t\t\tsiz[i]+=fee;\n\t\t\tadd(i,j,fee*2);\n\t\t}\n\t\tadd(s,i,siz[i]);\n\t\tans+=siz[i];\n\t}\n\tdinic();\n\treturn 0;\n}\n```",
        "postTime": 1531537398,
        "uid": 53421,
        "name": "nianheng",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1791 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u4eba\u5458\u96c7\u4f63\u3011"
    }
]