[
    {
        "content": "\u8fd9\u91cc\u662f\u5b98\u65b9\u9898\u89e3\u3002\n\n**\u9898\u610f** \uff1a \u7ed9\u51fa $n$ \u4e2a\u5b57\u7b26\u4e32 $S_1,S_2,...S_n$\u3002\n\n\u5171\u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa $l,r$ \u6c42\u5b57\u7b26\u4e32 $S_l,S_{l+1},...S_r$ \u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002\n\n$n\\leq 2\\times 10^5,m\\leq 10^5,\\sum_{i=1}^nS_i\\leq 4\\times 10^5$ \uff0c\u65f6\u9650 $\\texttt{0.8s}$ \uff0c\u7a7a\u9650 $\\texttt{64Mb}$\u3002\n\n------------\n\n\u672c\u9898\u7684 SAM \u4e0a\u4e24\u4e2a\u81ea\u7136\u6839\u53f7\u505a\u6cd5\uff0c\u4ee5\u53ca\u4e00\u4e2a ${\\rm poly}(\\log)$ \u505a\u6cd5 /jy\u3002\n\n\u5173\u4e8e\u201c\u81ea\u7136\u6839\u53f7\u201d\u7ed3\u8bba\u8bf4\u660e\uff0c\u53ef\u89c1 \uff1a [\u5206\u5757\u76f8\u5173\u6742\u8c08](https://www.luogu.com.cn/blog/command-block/fen-kuai-xiang-guan-za-tan)\u3002\n\n\u5c0f\u58f0\u8bf4 \uff1a\u8fd9\u662f $\\rm CmdOI2019$ \u4e2d\u552f\u4e00\u4e00\u4e2a\u5148\u6709\u9898\u9762\u540e\u6709\u7b97\u6cd5\u7684\u9898\u76ee\u3002\n\n- ### **\u505a\u6cd5\u2460**\uff08std\uff09\uff1a \u5206\u6cbb\n\n\u5e7f\u544a : [\u540e\u7f00\u81ea\u52a8\u673a\u5b66\u4e60\u7b14\u8bb0(\u5e94\u7528\u7bc7)](https://www.luogu.com.cn/blog/command-block/hou-zhui-zi-dong-ji-xue-xi-bi-ji-ying-yong-pian-post)\n\n- \u524d\u7f6e\u77e5\u8bc6 A \uff1a \u7528 **SAM** \u505a [SP-LCS2](https://www.luogu.org/problem/SP1812)\n\n\u5047\u8bbe\u6709 $n$ \u4e2a\u4e32\uff0c\u603b\u957f\u4e3a $len$ \uff0c\u6211\u4eec\u628a\u67d0\u4e2a\u4e32 $S$ \u5f53\u505a\u57fa\u51c6\u5339\u914d\u4e32\uff0c\u5269\u4e0b\u7684\u662f\u6587\u672c\u4e32\u3002\n\n\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e2a\u5339\u914d\u4e32 $T$ \uff0c\u6c42 :\n\n$slen[i]$ \u8868\u793a $S$ \u4e2d $S[i-slen[i]+1,i]$ \u5728 $T$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u5373\u4ee5 $i$ **\u7ed3\u5c3e**\u7684\u4f4d\u7f6e\u7684**\u6700\u957f**\u5339\u914d\u957f\u5ea6\u3002\n\n\u8fd9\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u7528 $S$ \u5728 $T$ \u7684 SAM \u4e2d\u5339\u914d\u4e00\u6b21\u5373\u53ef\u6c42\u5f97\uff0c\u6545\u4e0d\u8d58\u8ff0\u3002\n\n\u6700\u540e\u5c06\u6240\u6709\u5339\u914d\u4e32\u6240\u5f97\u5230\u7684 $slen[i]$ \u53d6 $\\min$ \uff0c\u6700\u540e\u628a\u6574\u4e2a\u6570\u7ec4\u53d6 $\\max$ \u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u4e3a $O(|S|n+len)$ \uff0c\u5efa SAM \u7684\u603b\u590d\u6742\u5ea6 $O(len)$ \uff0c$S$ \u8981\u5728\u6bcf\u4e2a\u4e32\u4e0a\u8dd1\u5339\u914d\uff0c\u590d\u6742\u5ea6\u662f$O(|S|n)$\u3002\n\n\u5f88\u660e\u663e\uff0c\u9009\u62e9\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u957f\u5ea6\u6700\u77ed\u7684\u4e32\u505a\u57fa\u51c6\u4e32\uff0c\u8dd1\u7684\u6700\u5feb\u3002\n\n- \u524d\u7f6e\u77e5\u8bc6 B \uff1a\u732b\u6811\u5206\u6cbb\uff0c\u53c8\u79f0\u4e8c\u533a\u95f4\u5408\u5e76\u7b49\u3002\n\n\u53ef\u89c1 [P6240 \u597d\u5403\u7684\u9898\u76ee](https://www.luogu.com.cn/problem/P6240) \u53ca\u76f8\u5173\u9898\u89e3\u3002\n\n- \u539f\u95ee\u9898\n\n\u5e76\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u8003\u8651\u732b\u6811\u5206\u6cbb\u3002\n\n(\u9644 : \u628a\u5206\u6cbb\u6811\u5b58\u4e0b\u6765\uff0c\u7c7b\u4f3c\u4e8e\u732b\u6811\u5c31\u53ef\u4ee5\u505a\u5230\u5f3a\u5236\u5728\u7ebf\u4e86\u3002\u4f46\u662f\u6240\u9700\u7a7a\u95f4\u8f83\u5927\uff0c\u5e76\u4e0d\u5b9e\u7528)\n\n\u5f53\u5206\u6cbb\u5230\u67d0\u4e2a\u533a\u95f4\u65f6 $[l,r]$ \uff0c\u9009\u53d6\u5173\u952e\u4e32 $S_k,k\\in[l,r]$\u3002\u5904\u7406\u6240\u6709\u8de8\u8d8a $k$ \u7684\u8be2\u95ee\u3002\n\n\u4ee5 $S_k$ \u4e3a\u57fa\u51c6\u5339\u914d\u4e32\uff0c\u5206\u522b\u5411\u5de6\u5411\u53f3\u5339\u914d\uff0c\u6c42\u51fa\u5404\u4e2a $slen$ \u6570\u7ec4\u7684\u201c\u524d\u7f00 $\\min$\u201d\n\n\u5728\u6c42\u7b54\u6848\u65f6\uff0c\u5c06\u8be2\u95ee\u533a\u95f4\u7684\u4e24\u4e2a\u7aef\u70b9\u5904\u7684 $slen$ \u524d\u7f00 $\\min$ \u5408\u5e76\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u6570\u7ec4\u53d6 $\\max$ \u5373\u53ef\u3002\n\n\u8fd9\u6837\uff0c\u82e5\u5206\u6cbb\u65f6\u9009\u62e9\u7684 $S_k$ \u8f83\u957f\uff0c\u5219\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u3002\u76f4\u63a5\u4f7f\u7528\u53d6\u4e2d\u70b9\u7684\u666e\u901a\u5206\u6cbb\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8003\u8651\u8bbe\u8ba1\u66f4\u597d\u7684\u5206\u6cbb\u7b56\u7565 : **\u500d\u589e\u5206\u6cbb**\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u9608\u503c $x$ \uff0c\u79f0\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $2^x$ \u7684\u4e3a\u77ed\u4e32\uff0c\u957f\u5ea6\u5927\u4e8e $2^{x+1}$ \u7684\u4e3a\u957f\u4e32\u3002\u663e\u7136\u957f\u4e32\u7684\u4e2a\u6570\u4e3a $O(len/2^x)$\u3002\n\n\u5206\u6cbb\u5230\u67d0\u533a\u95f4\u4e4b\u540e\uff0c\u627e\u51fa\u6240\u6709\u77ed\u4e32\uff0c\u53d6\u5176\u4e2d\u95f4\u4f4d\u7f6e\u505a\u57fa\u51c6\u4e32\u3002\u8fd9\u6837\u5206\u6cbb\u76f4\u5230\u533a\u95f4\u91cc\u90fd\u662f\u957f\u4e32\uff0c\u5c06\u9608\u503c $x$ \u589e\u52a0 $1$\u3002\n\n\u63a5\u4e0b\u6765\u8ba1\u7b97\u8be5\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002\u9996\u5148\u8003\u8651\u6c42 $slen$ \u7684\u90e8\u5206\u3002\n\n\u89c2\u5bdf\u5206\u6cbb\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a $x$ \uff0c\u5bf9\u5e94\u7684\u77ed\u4e32\u5728 $O(\\log n)$ \u5c42\u5206\u6cbb\u540e\u5c31\u88ab\u8017\u5c3d\u3002\n\n\u800c\u9608\u503c\u4e3a $x$ \u65f6\uff0c\u5206\u6cbb\u533a\u95f4\u7684\u603b\u5927\u5c0f\u662f $O(len/2^x)$ \u7684\uff0c\u57fa\u51c6\u5339\u914d\u4e32\u7684\u957f\u5ea6\u4e3a $O(2^x)$ \uff0c\u6545\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a $O(2^x(len/2^x)\\log n)=O(len\\log n)$\u3002\n\n\u9608\u503c $x$ \u5171\u6709 $O(\\log len)$ \u4e2a\uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e3a $O(len\\log len\\log n)$ \u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5904\u7406\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u3002\n\n\u5206\u6cbb\u4e2d\u5408\u5e76\u7b54\u6848\u7684\u590d\u6742\u5ea6\u4e3a $O(\\text{\u5bf9\u5e94\u57fa\u51c6\u4e32\u957f\u5ea6})$\u3002\n\n\u89c2\u5bdf\u4e0a\u9762\u7684\u5206\u6cbb\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\u6240\u5bf9\u5e94\u7684\u57fa\u51c6\u4e32,\u4e0d\u4f1a\u8d85\u8fc7\u533a\u95f4\u4e2d\u6700\u77ed\u4e32\u7684 $2$ \u500d\u3002(\u56e0\u4e3a\u500d\u589e\u561b)\n\n\u7531\u6700\u5c0f\u503c\u5206\u6cbb\u7684\u7ed3\u8bba\uff0c\u8fd9\u91cc\u4f1a\u4ea7\u751f\u4e00\u4e2a\u81ea\u7136\u6839\u53f7\u3002\n\n\u5373 \uff1a \u5bf9\u8be2\u95ee\u8bb0\u5fc6\u5316\u540e\uff0c\u590d\u6742\u5ea6\u4e3a $O(len\\sqrt{m})$\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O\\big((len+m)\\log len\\log n+len\\sqrt{m}\\big)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n\u7531\u4e8e\u6240\u6709\u64cd\u4f5c\u5747\u4e3a\u66b4\u529b `for` \u548c\u53d6 $\\min$ \uff0c\u5e38\u6570**\u8f83\u5c0f**\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u3002\n\n**Code:**\n\n\u7279\u522b\u795e\u5947\u7684\u662f\uff0c\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u6211\u4e00\u904d\u5199\u5b8c\u5c31\u548c\u66b4\u529b\u62cd\u4e0a\u4e86\uff0c\u53ef\u559c\u53ef\u8d3a\u3002\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<map>\n#define MaxS 400500\n#define MaxM 100500\n#define MaxN 20500\nusing namespace std;\ninline int read()\n{\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nstruct Node\n{int t[2],f,len;}a[MaxS<<1];\nint tn;\nstruct SAM\n{\n  int las,root;\n  void add(int c)\n  {\n    int np=++tn,p=las; las=np;\n    a[np].len=a[p].len+1;\n    for (;p&&!a[p].t[c];p=a[p].f)a[p].t[c]=np;\n    if (!p)a[np].f=root;\n    else {\n      int v=a[p].t[c];\n      if (a[p].len+1==a[v].len)a[np].f=v;\n      else {\n        int nv=++tn; a[nv]=a[v];\n        a[nv].len=a[p].len+1;\n        for (;p&&a[p].t[c]==v;p=a[p].f)a[p].t[c]=nv;\n        a[v].f=a[np].f=nv;\n      }\n    }\n  }\n  void build(char *str,int len)\n  {\n    las=root=++tn;\n    for (int i=0;i<len;i++)\n      add(str[i]-'0');\n  }\n}t[MaxN];\nchar _str[MaxS],*sp=_str,*str[MaxN];\nint ans[MaxM],len[MaxN];\nstruct Data\n{int l,r,pos;}b[MaxM],bl[MaxM],br[MaxM];\nint _slen[MaxS<<3],*slen[MaxN],*lenp;\nint tp[MaxN];\nmap<pair<int,int>,int> sav;\nvoid solve(int l,int r,int tl,int tr,int lim)\n{\n  if (tl>tr)return ;\n  int tot=0;\n  while(1){\n    for (int i=l;i<=r;i++)\n      if (len[i]<=lim)tp[++tot]=i;\n    if (tot)break;\n    else lim<<=1;\n  }int mid=tp[(tot+1)/2];\n\n  lenp=_slen;\n  for (int i=l;i<=r;i++){\n    slen[i]=lenp;\n    lenp+=len[mid]+1;\n  }for (int i=0;i<len[mid];i++)slen[mid][i]=i+1;\n\n  for (int i=mid-1,p,plen;i>=l;i--){\n    p=t[i].root;plen=0;\n    for (int j=0,c;j<len[mid];j++){\n      c=str[mid][j]-'0';\n      if (!a[p].t[c]){\n        while(p!=t[i].root&&!a[p].t[c])p=a[p].f;\n        plen=a[p].len;\n      }\n      if (a[p].t[c]){\n        p=a[p].t[c];plen++;\n      }slen[i][j]=min(slen[i+1][j],plen);\n    }\n  }\n  \n  for (int i=mid+1,p,plen;i<=r;i++){\n    p=t[i].root;plen=0;\n    for (int j=0,c;j<len[mid];j++){\n      c=str[mid][j]-'0';\n      if (!a[p].t[c]){\n        while(p!=t[i].root&&!a[p].t[c])p=a[p].f;\n        plen=a[p].len;\n      }\n      if (a[p].t[c]){\n        p=a[p].t[c];plen++;\n      }slen[i][j]=min(slen[i-1][j],plen);\n    }\n  }\n  \n  int nl=0,nr=0;\n  for (int i=tl;i<=tr;i++){\n    if (b[i].l<=mid&&mid<=b[i].r){\n      pair<int,int> kk=make_pair(b[i].l,b[i].r);\n      if (sav.count(kk))\n        ans[b[i].pos]=sav[kk];\n      else {\n        int ret=0;\n        for (int j=0;j<len[mid];j++)\n          ret=max(ret,min(slen[b[i].l][j],slen[b[i].r][j]));\n        sav[kk]=ans[b[i].pos]=ret;\n      }\n    }else if (b[i].r<mid)bl[++nl]=b[i];\n    else br[++nr]=b[i];\n  }int tmid=tl+nl-1;\n  for (int i=1;i<=nl;i++)b[tl+i-1]=bl[i];\n  for (int i=1;i<=nr;i++)b[tl+nl+i-1]=br[i];\n  solve(l,mid-1,tl,tl+nl-1,lim);\n  solve(mid+1,r,tl+nl,tl+nl+nr-1,lim);\n}\nint n,m;\nint main()\n{\n  n=read();m=read();\n  for (int i=1;i<=n;i++){\n    scanf(\"%s\",str[i]=sp);\n    len[i]=strlen(sp);\n    t[i].build(str[i],len[i]);\n    sp+=len[i];\n  }\n  for (int i=1;i<=m;i++){\n    b[i].l=read();b[i].r=read();\n    b[i].pos=i;\n  }\n  solve(1,n,1,m,10);\n  for (int i=1;i<=m;i++)\n    printf(\"%d\\n\",ans[i]);\n  return 0;\n}\n```\n\n**\u9644** \uff1a \u5229\u7528 $slen$ \u6570\u7ec4\u4e5f\u53ef\u6c42\u51fa\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u516c\u5171\u5b50\u4e32\u6570\u76ee\u3002\u7559\u505a\u4e60\u9898\u3002\n\n- ### **\u505a\u6cd5\u2461** \uff1a \u5e7f\u4e49 SAM + \u626b\u63cf\u7ebf\n\n\u5bf9\u4e8e\u5e7f\u4e49 SAM \u4e0a\u7684\u8282\u70b9 $u$ \uff0c\u8bb0 $P_u$ \u4e3a\u5728 $parent$ \u6811\u4e2d $u$ \u5b50\u6811\u5185\u5b58\u5728\u7ec8\u6b62\u8282\u70b9\u7684\u4e32\u7684\u96c6\u5408\u3002\n\n\u5f53\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u65f6\uff0c\u82e5 $[l,r]\\subseteq P_u$ \uff0c\u5219\u70b9 $u$ \u53ef\u4ee5\u5411\u7b54\u6848\u8d21\u732e\u3002\n\n\u8003\u8651\u9010\u6b65\u589e\u5927 $r$ \uff0c\u7ef4\u62a4\u6bcf\u4e2a $l$ \u7684\u7b54\u6848\u3002\n\n\u5bf9\u4e8e SAM \u4e0a\u7684\u70b9 $u$ \uff0c\u8bb0 $P_u$ \u4e2d\u4ece $r$ \u5411\u524d\u7684\u6781\u957f\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9\u4e3a $l_u$\u3002\n\n\u5728\u8be2\u95ee $[l,r]$ \u65f6\uff0c\u82e5 $l_u\\leq l$ \u5219\u70b9 $u$ \u80fd\u8d21\u732e\u3002\n\n\u8fd9\u91cc\u53c8\u6709\u4e00\u4e2a\u81ea\u7136\u6839\u53f7 \uff1a \u5e7f\u4e49 SAM \u4e0a $\\sum_u |T_u|$ \u662f $O(len\\sqrt{len})$ \u7ea7\u522b\u7684\u3002\n\n\u4e8e\u662f\uff0c\u5728 $r$ \u589e\u52a0\u65f6\uff0c\u5bf9\u6240\u6709 $P_u$ \u4e2d\u542b $r$ \u7684\u70b9\u66b4\u529b\u66f4\u65b0\u5373\u53ef\u3002\n\n\u6709 $O(len\\sqrt{len})$ \u6b21\u5355\u70b9\u4fee\u6539\uff0c$O(m)$ \u6b21\u533a\u95f4\u67e5 $\\rm max$ \uff0c\u4f7f\u7528 $O(1)-O(\\sqrt{n})$ \u5206\u5757\uff0c\u590d\u6742\u5ea6\u4e3a $O(len\\sqrt{len}+m\\sqrt{n})$\u3002\n\n\u5361\u5e38\u540e\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n- ### **\u505a\u6cd5\u2462** \uff1a \u5e7f\u4e49 SAM + \u7ebf\u6bb5\u6811\n\n\u53ef\u89c1 [\uff08Mina\uff09\u3010\u9898\u89e3\u3011[CmdOI2019] \u53e3\u5934\u7985 \u5e7f\u4e49 SAM -\u6c38\u65e0\u5c9b](https://www.mina.moe/archives/13606)\n\n\u8fd9\u91cc\u4e5f\u7b80\u8981\u5730\u4ecb\u7ecd\u4e00\u4e0b\u8be5\u505a\u6cd5\u3002\n\n\u7528 `std::set` \u7ef4\u62a4 $P_u$ \u4e2d\u7684\u8fde\u7eed\u6bb5\uff0c\u7136\u540e\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u4e3a $O(len\\log len\\log n)$\u3002\n\n\u6309\u7167\u8282\u70b9\u7684 $len$ \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u7531\u4e8e $parent$ \u6811\u4e0a $len$ \u4ece\u6df1\u5230\u6d45\u9012\u51cf\uff0c\u6545\u6309\u8fd9\u4e2a\u987a\u5e8f\u4e5f\u53ef\u4ee5\u987a\u4fbf\u8fdb\u884c\u5408\u5e76\u3002\n\n\u6bcf\u6b21\u5408\u5e76\u540e\uff0c\u82e5\u4ea7\u751f\u65b0\u7684\u8fde\u7eed\u6bb5\uff08\u8be5\u4e8b\u4ef6\u6700\u591a\u4f1a\u53d1\u751f $O(len)$ \u6b21\uff09\uff0c\u56de\u7b54\u6240\u6709\u5f53\u524d\u8282\u70b9\u80fd\u591f\u8d21\u732e\u5230\u7684\u8be2\u95ee\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u8be2\u95ee\u5220\u9664\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8be2\u95ee\uff0c\u5c06\u8be2\u95ee $[l,r]$ \u6302\u5728\u4f4d\u7f6e $l$ \uff0c\u6743\u503c\u4e3a $r$\u3002\n\n\u9700\u8981\u5bfb\u627e $[L,R]$ \u5305\u542b\u7684\u6240\u6709\u8be2\u95ee\u65f6\uff0c\u67e5\u8be2 $[L,R]$ \u5185\u7684\u6743\u503c\u6700\u5c0f\u503c $c$ \uff0c\u82e5 $c\\leq R$ \uff0c\u5219\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5408\u9002\u7684\u533a\u95f4\u3002\n\n\u5219\u590d\u6742\u5ea6\u4e3a $O(len\\log len\\log n)$ \uff0c\u7a7a\u95f4\u4e5f\u662f\u7ebf\u6027\u3002\n\n\u6709\u7a7a\u8865\u4ee3\u7801\u3002",
        "postTime": 1570012348,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5576 \u3010[CmdOI2019]\u53e3\u5934\u7985\u3011"
    },
    {
        "content": "\n[\u535a\u5ba2\u5185\u67e5\u770b\u66f4\u9999](https://www.cnblogs.com/Hs-black/p/13121957.html)\n\n## \u540e\u7f00\u81ea\u52a8\u673a\u505a\u6cd5\n\n### \u540e\u7f00\u81ea\u52a8\u673a\n\n\u9996\u5148\u5148\u819c\u51fa\u9898\u4eba @command_block\n\n\u5f88\u795e\u5947\u7684\u601d\u8def\n\n\u9996\u5148\u8981\u4f1a\u7528\u540e\u7f00\u81ea\u52a8\u673a\u6765\u6c42\u591a\u4e32\u7684\u6700\u957f\u516c\u5171\u5b57\u4e32\n\n\u4e24\u4e2a\u505a\u6cd5\uff0c\u4e00\u4e2a\u662f\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u5efa\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u5c06\u5176\u4ed6\u4e32\u5728\u4e0a\u9762\u6253\u6807\u8bb0\uff0c\u8bb0\u5f55\u5339\u914d\u5230\u8282\u70b9 x \u7684\u6700\u957f\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u53e6\u4e00\u4e2a\u65b9\u6cd5\u662f\u9009\u4e00\u4e2a\u5b57\u7b26\u4e32 S\uff0c\u5269\u4e0b\u7684\u5206\u522b\u5efa\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5206\u522b\u5728\u5176\u4ed6\u4e32\u4e0a\u8dd1\uff0c\u8bb0\u5f55 $f[x]$ \u8868\u793a S[1...x] \u80fd\u591f\u5339\u914d\u7684\u6700\u957f\u540e\u7f00\u662f\u591a\u5c11\u3002\u672c\u9898\u4e24\u79cd\u65b9\u6cd5\u5747\u53ef\u3002\n\n\u90a3\u4e48\u795e\u4ed9\u7684\u5206\u6cbb\u5c31\u6765\u4e86\n\n### \u500d\u589e\u5206\u6cbb\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u5c06\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $2^x$ \u7684\u4e32\u63d0\u51fa\u6765\u8fdb\u884c\u5206\u6cbb\uff0c\u76f4\u5230\u5b50\u533a\u95f4\u6ca1\u6709\u8fd9\u6837\u7684\u4e32\u4e3a\u6b62\uff0c\u8fd9\u65f6\u5019\u6211\u4eec ++x \u7ee7\u7eed\u6b64\u8fc7\u7a0b\n\n\u663e\u7136\u6211\u4eec\u6709\u4e00\u4e2a x \u6700\u5927\u6df1\u5ea6\u662f $\\log N$ \u7684\uff0c\u53c8\u4e00\u5171\u6709 $\\log (Len)$ \u4e2a x\uff0c\u603b\u5206\u6cbb\u6df1\u5ea6\u662f $\\log N*\\log (Len)$\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u8dd1\u4e0d\u6ee1 (fixed by \u72ec\u79c0\u5e73\u5ddd,\u6362\u4e86\u66f4\u4e25\u8c28\u7684\u8bf4\u6cd5)\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5206\u6cbb\uff0c\u663e\u7136\u6211\u4eec\u4f7f\u7528\u540e\u7f00\u81ea\u52a8\u673a\u65f6\u9009\u51fa\u7684\u5b57\u7b26\u4e32\u5927\u5c0f\u8d8a\u5c0f\u8d8a\u597d\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u65b9\u4fbf\u7684\u8bb0\u5f55\u524d\u7f00\u4fe1\u606f\u548c\u540e\u7f00\u4fe1\u606f\uff0c\u5426\u5219\u7a7a\u95f4\u90fd\u5f00\u4e0d\u4e0b\n\n### \u8be2\u95ee\u7b54\u6848\n\n\u8003\u8651\u8de8\u8fc7\u533a\u95f4 mid \u7684\u7b54\u6848\uff0c\u8bb0\u5f55\u4ece mid \u5f00\u59cb\u7684\u524d\u7f00 f \u548c\u540e\u7f00 f\uff0c\u67e5\u8be2\u65f6\u5408\u5e76\u7b54\u6848\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\n\n\u8003\u8651\u533a\u95f4\u5b57\u7b26\u4e32\u957f\u5ea6\u603b\u548c\u4e3a len\uff0c\u533a\u95f4\u957f\u5ea6\u4e3a k\uff0c\u6700\u5c0f\u7684\u4e32\u957f\u5ea6\u5219\u4e0d\u8d85\u8fc7 $\\frac {len}k$\n\n\u626b\u4e00\u904d\u6b64\u533a\u95f4\u7684\u590d\u6742\u5ea6\u4e3a $\\Theta(k * \\frac {len}k) = \\Theta(len)$\uff0c\u6240\u4ee5\u5206\u6cbb\u626b\u6240\u6709\u7684\u533a\u95f4\u8bb0\u5f55\u524d\u7f00\u540e\u7f00\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\Theta(len\\log^2N)$\n\n\u5982\u679c\u4e32\u957f\u5c0f\u4e8e $\\frac {len}{\\sqrt m}$\uff0c\u6709\u590d\u6742\u5ea6 $\\Theta(len\\sqrt m)$\n\n\u5982\u679c\u4e32\u957f\u5927\u4e8e $\\frac {len}{\\sqrt m}$ \u5219\u65e0\u6cd5\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u4f46\u5f88\u597d\u7684\u53d1\u73b0 k \u5c0f\u4e8e $\\sqrt m$\uff0c\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff0c\u4e5f\u5c31\u662f\u672c\u8d28\u4e0d\u540c\u533a\u95f4\u6709 $k^2$ \u4e2a\uff0c\u8bb0\u5fc6\u5316\u4e00\u4e0b\u53ef\u4ee5\u5f97\u5230 $\\Theta(m\\log m+k^2*\\frac {len}{k}) = \\Theta(m\\log m+len*k)$\n\n\u4ee3\u7801\u5c31\u5148\u4e0d\u653e\u4e86\n\n## \u540e\u7f00\u6570\u7ec4\u505a\u6cd5\n\n\u8fd9\u9898 SA \u88ab\u5361\u7a7a\u95f4\u4e86\uff0c\u6240\u4ee5\u6211\u61d2\u4e86\u8fd8\u6ca1\u6709\u5199\uff0c\u4f46\u4e0d\u59a8\u4f5c\u4e3a\u4e00\u79cd\u542f\u53d1\uff0cdalao \u53d1\u73b0\u4e86\u4ec0\u4e48\u95ee\u9898\u6b22\u8fce\u6765\u8e29\u548c\u8ba8\u8bba\uff0c\u6bd5\u7adf\u6211\u53ea\u662f\u53e3\u80e1\n\n\u611f\u8c22 @z7z_eta \u7684\u5e2e\u52a9\n\n### SA\u6c42\u591a\u4e32\u6700\u957f\u516c\u5171\u5b50\u4e32\n\n\u770b\u5230\u8fd9\u9898\u4f60\u5e94\u8be5\u6709\u4e9b\u57fa\u7840\uff0c\u6211\u5c31\u7a0d\u5fae\u7b80\u7565\u4e9b\u5427\n\n\u5c06\u6240\u6709\u4e32\u9996\u5c3e\u76f8\u8fde\u62fc\u8d77\u6765\u6c42 SA \u6570\u7ec4\uff0c\u5c06 height \u6570\u7ec4\u770b\u6210\u9694\u677f\uff0c\u4ece\u5927\u5230\u5c0f\u62c6\uff0c\u76f4\u5230\u6240\u6709\u4e32\u7684\u540e\u7f00\u5747\u5728\u67d0\u4e00\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\uff0c\u8fd9\u4e2a height \u5c31\u662f\u7b54\u6848\n\n\u5982\u4f55\u770b\u6240\u6709\u4e32\u5747\u51fa\u73b0\u5728\u67d0\u4e00\u4e2a\u533a\u95f4\u5462\n\n### set \u542f\u53d1\u5f0f\u5408\u5e76\n\n\u6bcf\u4e2a\u4f4d\u7f6e\u5f00\u4e2a set\uff0c\u7ef4\u62a4\u5f53\u524d\u8054\u901a\u5757\u7684 \u201c\u989c\u8272\u201d \uff08\u6bcf\u4e2a\u539f\u4e32\u662f\u4e00\u79cd\u989c\u8272\uff09\u96c6\u5408\uff0c\u5f53\u7136\u6211\u4eec\u7ef4\u62a4\u533a\u95f4\u4f1a\u597d\u4e00\u4e9b\uff0c\u6bd4\u5982 2\uff0c3\uff0c4\uff0c5 \u989c\u8272\u53ef\u4ee5\u76f4\u63a5\u538b\u6210 [2\uff0c5]\uff0c\u5728\u7528\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u53ef\u4ee5 $\\Theta(N\\log^2N)$ \u7684\u7ef4\u62a4\u4e86\uff0c\u6ce8\u610f\u542f\u53d1\u5f0f\u5408\u5e76\u65f6\u4e0d\u8981\u770b set \u7684 size \u800c\u662f\u989c\u8272\u7684\u4e2a\u6570\n\n\u5728\u672c\u9898\u4e2d\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u989c\u8272\u533a\u95f4 [l, r] \u88ab\u67d0\u4e00\u6b21\u5305\u542b\u5c31\u662f\u7b54\u6848\u4e86\uff0c\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u5982\u4f55\u770b [l, r] \u6700\u65e9\u4ec0\u4e48\u65f6\u5019\u88ab\u5305\u542b\u5462\n\n### \u626b\u63cf\u7ebf\n\n\u4e0d\u59a8\u5c06\u533a\u95f4\u770b\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 \uff08L, R)\uff0c\u90a3\u4e48\u5728 set \u4e2d\u5408\u5e76\u65f6\u6bd4\u5982\u6709 $[1, 3], [5,6]$\uff0c\u8fd9\u65f6\u65b0\u63d2\u5165\u4e00\u4e2a\u533a\u95f4 $[4,4]$\uff0c\u4f1a\u4f7f set \u4e2d\u7684\u533a\u95f4\u878d\u5408 $[1,6]$\uff0c\u90a3\u4e48\u65b0\u7684\u5927\u533a\u95f4\u6240\u5305\u542b\u7684\u6240\u6709\u5c0f\u533a\u95f4\u7b54\u6848\u548c\u5f53\u524d\u7684\u7b54\u6848\u53d6 max \u5c31\u884c\u4e86\uff0c\u90a3\u4e48 $[1, 6]$ \u53ef\u4ee5\u770b\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u4e00\u4e2a\u77e9\u5f62 $[1,6],[1,6]$\uff0c\u5bf9\u91cc\u9762\u7684\u70b9\u53d6 max \u5373\u53ef\uff0c\u53d1\u73b0\u6240\u6709\u7684\u70b9\u90fd\u5728 $y = x$ \u7684\u4e0a\u65b9\uff0c\u77e9\u5f62\u53ef\u4ee5\u6362\u6210 $[1,+\\infty],[-\\infty,6]$\uff0c\u8fd9\u6837\u626b\u63cf\u7ebf\u52a0\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u7ef4\u62a4\uff0c\u5355\u72ec\u662f $\\Theta(n\\log n)$ \u7684\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4f1a\u4ea7\u751f $\\Theta(n\\log n)$ \u4e2a\u77e9\u5f62\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $\\Theta(n \\log^2n)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(len\\log len+len\\log^2 n+n \\log^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\Theta(n \\log n)$\n\n\u8fd9\u4e2a\u505a\u6cd5\u6bd4\u8f83\u597d\u60f3\uff0c\u4f46\u5e94\u8be5\u6ca1\u6709 sam \u5feb\uff0c\u4f46\u90a3\u4e2a\u592a\u96be\u60f3\u4e86\u554a",
        "postTime": 1592057454,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5576 \u3010[CmdOI2019]\u53e3\u5934\u7985\u3011"
    },
    {
        "content": "[Portal](https://www.luogu.com.cn/problem/P5576)\n\n\u8fd9\u4efd\u9898\u89e3\u4f7f\u7528\u7684\u662f\u5b98\u65b9\u9898\u89e3\u4e2d\u7ed9\u51fa\u7684\u7b97\u6cd53\uff0c\u5373\u5e7f\u4e49 SAM+\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u771f\u7684\u8d85\u8d85\u8d85\u597d\u5199\uff0c\u5e76\u4e14\uff08\u51e0\u4e4e\uff09\u4e0d\u5361\u5e38\uff01\n\n\u819c\u51fa\u9898\u4eba\uff01\n\n------------\n\n\u9996\u5148\u5efa\u51fa\u5e7f\u4e49 SAM\u3002\u7136\u540e\uff0c\u6211\u4eec\u628a\u6bcf\u6761\u5b57\u7b26\u4e32\u770b\u4f5c\u4e00\u79cd\u989c\u8272\uff0c\u5e76\u4e14\u5728\u63d2\u5165\u8be5\u5b57\u7b26\u4e32\u65f6\u5230\u8fbe\u7684\u6240\u6709\u70b9\u5904\u67d3\u4e0a\u8fd9\u79cd\u989c\u8272\uff08\u81ea\u7136\uff0c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u88ab\u591a\u6b21\u67d3\u8272\uff09\u3002\u56e0\u4e3a\u5728 parent tree \u4e2d\u5411\u513f\u5b50\u8d70\u7b49\u4ef7\u4e8e\u5728\u4e32\u524d\u52a0\u5b57\u7b26\uff0c\u6240\u4ee5\u4e00\u4e2a\u70b9\u540c\u65f6\u8fd8\u5177\u6709\u5176\u6240\u6709\u513f\u5b50\u7684\u989c\u8272\u3002\u90a3\u4e48\u95ee\u9898\u8f6c\u6362\u4e3a\u5bf9\u4e8e\u6240\u6709\u989c\u8272\u4e2d\u5305\u542b\u4e86 $[l,r]$ \u533a\u95f4\u4e2d\u6240\u6709\u989c\u8272\u7684\u70b9\uff0c\u6c42\u5b83\u4eec\u957f\u5ea6\u7684\u6700\u5927\u503c\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u70b9\u4e0a\u5230\u5e95\u6709\u54ea\u4e9b\u989c\u8272\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u5e38\u89c4\u64cd\u4f5c\u3002\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u4e0d\u597d\u56de\u7b54\u8be2\u95ee\uff08\u53ef\u80fd\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u4f46\u6211\u4e0d\u4f1a\uff09\u3002\u4e0d\u5982\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5982\u679c\u5c06\u6240\u6709\u70b9\u957f\u5ea6\u9012\u51cf\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u5373\u7528\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u513f\u5b50\u7684\u989c\u8272\u4e0e\u5176\u5408\u5e76\u3002\u660e\u663e\u513f\u5b50\u7684\u6df1\u5ea6\u80af\u5b9a\u5927\u4e8e\u8be5\u70b9\uff0c\u56e0\u6b64\u8fd9\u79cd\u6392\u5e8f\u540e\u5408\u5e76\u7684\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff09\uff0c\u7528 `set` \u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u6709\u51fa\u73b0\u7684\u8fde\u7eed\u989c\u8272\u6bb5\u3002\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u8be2\u95ee\u663e\u7136\u662f\u7b2c\u4e00\u6b21\u5408\u5e76\u51fa\u6765\u4e00\u4e2a\u5305\u542b\u5176\u7684\u989c\u8272\u6bb5\u65f6\u7b54\u6848\u6700\u4f18\uff08\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u9012\u51cf\u6392\u5e8f\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\u5bf9\u4e8e\u6bcf\u6b21\u5408\u5e76\uff0c\u627e\u5230\u90a3\u4e9b\u65b0\u4ea7\u751f\u7684\u8fde\u7eed\u989c\u8272\u6bb5\uff0c\u7528\u5b83\u6765\u56de\u7b54\u90a3\u4e9b\u53ef\u4ee5\u88ab\u5176\u56de\u7b54\u7684\u8be2\u95ee\u3002\n\n\u660e\u663e\u6bcf\u63d2\u5165\u4e00\u6bb5\u6700\u591a\u53ea\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u8fde\u7eed\u989c\u8272\u6bb5\uff0c\u6545\u603b\u4ea7\u751f\u7684\u8fde\u7eed\u989c\u8272\u6bb5\u6570\u5373\u4e3a\u63d2\u5165\u6b21\u6570\u3002\u56e0\u4e3a\u4f7f\u7528\u4e86\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6240\u4ee5\u63d2\u5165\u6b21\u6570\u5373\u4e3a $n\\log n$\u3002\n\n\u73b0\u5728\u8003\u8651\u4e00\u4e2a\u8fde\u7eed\u989c\u8272\u6bb5 $[L,R]$ \u80fd\u56de\u7b54\u54ea\u4e9b\u8be2\u95ee\u3002\u8fd9\u662f\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\u3002\u4f46\u662f\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\u540e\u5c31\u53ef\u4ee5\u7acb\u523b\u628a\u5b83\u5220\u9664\u3002\u56e0\u6b64\u6211\u4eec\u5f00\u4e00\u4e2a\u666e\u901a\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u8be2\u95ee $[l,r]$ \u5728\u53f6\u8282\u70b9 $l$ \u4e0a\u6302\u4e0a\u503c $r$\u200b\uff0c\u7136\u540e\u5728\u533a\u95f4 $[L,R]$\u200b \u8be2\u95ee\u6700\u5c0f\u503c\uff0c\u5982\u679c\u6700\u5c0f\u503c\u4e0d\u5927\u4e8e $R$ \u5219\u663e\u7136\u5c31\u6709\u8be2\u95ee\u53ef\u4ee5\u88ab\u56de\u7b54\uff0c\u90a3\u5c31\u56de\u7b54\u540e\u5220\u6389\u5373\u53ef\u3002\n\n\u73b0\u5728\u8003\u8651\u5206\u6790\u590d\u6742\u5ea6\u3002\u5b9a\u4e49 $S=\\sum|s|$\u200b\u200b\u200b\u200b\u200b\u3002\u5e7f\u4e49 SAM $O(|\\Sigma|S)$\u200b\u200b\u200b\u200b\u200b\uff08\u5176\u4e2d $|\\Sigma|$\u200b\u200b\u200b\u200b\u200b \u662f\u5b57\u7b26\u96c6\u5927\u5c0f\uff0c\u672c\u9898\u4e3a $2$\u200b\u200b\u200b\u200b\u200b\uff09\uff0c`set` \u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76 $O(S\\log^2S)$\u200b\u200b\u200b\u200b\u200b\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u5408\u5e76\u7684\u4e1c\u897f\u6254\u5230\u7ebf\u6bb5\u6811\u91cc\u8be2\u95ee\u662f $S\\log S\\log n$\u200b\u200b\u200b\u200b\u200b \u7684\uff0c\u4e00\u6b21\u8be2\u95ee\u88ab\u56de\u7b54\u65f6\u5fc5\u5b9a\u9700\u8981 $\\log n$\u200b\u200b\u200b\u200b\u200b\uff0c\u5219\u56de\u7b54\u6240\u6709\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u662f $m\\log n$\u200b\u200b\u200b\u200b\u200b\u3002\u56e0\u4e3a\u5fc5\u6709 $S\\geq n$\u200b\uff0c\u6240\u4ee5\u5408\u5e76\u540e\u603b\u8ba1\u590d\u6742\u5ea6 $O(|\\Sigma|S+S\\log^2S+m\\log n)$\u200b\u3002\n\n~~\u6240\u4ee5\u8be2\u95ee\u538b\u6839\u4e0d\u7b97\u4e8b\uff0c\u5b8c\u5168\u53ef\u4ee5\u95ee\u5f97\u66f4\u591a\uff0c\u74f6\u9888\u5b8c\u5168\u4e0d\u5728\u8fd9\u200b\u200b\u200b\u200b~~\n\n\u81f3\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6ca1\u5565\u597d\u8bf4\u5c31\u662f\u7ebf\u6027\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cnt=1,S;\nchar s[400100];\nstruct Suffix_Automaton{int ch[2],fa,len;}t[800100];\nint Add(int x,int c){\n\tif(t[x].ch[c]){\n\t\tint y=t[x].ch[c];\n\t\tif(t[y].len==t[x].len+1)return y;\n\t\tint yy=++cnt;t[yy]=t[y],t[y].fa=yy,t[yy].len=t[x].len+1;\n\t\tfor(;x&&t[x].ch[c]==y;x=t[x].fa)t[x].ch[c]=yy;\n\t\treturn yy;\n\t}\n\tint xx=++cnt;t[xx].len=t[x].len+1;\n\tfor(;x&&!t[x].ch[c];x=t[x].fa)t[x].ch[c]=xx;\n\tif(!x)return t[xx].fa=1,xx;\n\tint y=t[x].ch[c];\n\tif(t[y].len==t[x].len+1)return t[xx].fa=y,xx;\n\tint yy=++cnt;t[yy]=t[y],t[yy].len=t[x].len+1;\n\tt[y].fa=t[xx].fa=yy;\n\tfor(;x&&t[x].ch[c]==y;x=t[x].fa)t[x].ch[c]=yy;\n\treturn xx;\n}\nset<pair<int,int> >st[800100];\nint res[100100];\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1)\nvector<pair<int,int> >u[20100];\nint mn[80100];\nvoid pushup(int x){mn[x]=min(mn[lson],mn[rson]);}\nvoid build(int x,int l,int r){\n\tif(l==r){sort(u[l].rbegin(),u[l].rend()),mn[x]=(u[l].empty()?0x3f3f3f3f:u[l].back().first);return;}\n\tbuild(lson,l,mid),build(rson,mid+1,r),pushup(x);\n}\nvoid query(int x,int l,int r,int L,int R,int val){\n\tif(r<L||mn[x]>R)return;\n\tif(l==r){\n\t\twhile(!u[l].empty()&&u[l].back().first<=R)res[u[l].back().second]=val,u[l].pop_back();\n\t\tmn[x]=(u[l].empty()?0x3f3f3f3f:u[l].back().first);return;\n\t}\n\tquery(lson,l,mid,L,R,val),query(rson,mid+1,r,L,R,val),pushup(x);\n}\nint ord[800100];\nvoid INS(int x,int L,int R,bool upd){\n//\tprintf(\"%d[%d,%d]\\n\",x,L,R);\n\tauto it=st[x].upper_bound(make_pair(R+1,0x3f3f3f3f));\n\tif(it==st[x].begin())return void(st[x].emplace(L,R));\n\tit--;\n\tif(it->first<=L&&it->second>=R)return;\n\tbool en=false;\n\twhile(it->second+1>=L){\n\t\tif(it->second>R)en=true,R=it->second;\n\t\tif(it->first<L)en=true,L=it->first;\n\t\tit=st[x].erase(it);\n\t\tif(it==st[x].begin())break;\n\t\tit--;\n\t}\n\tif(en&&upd)query(1,1,n,L,R,t[x].len)/*,printf(\"%d<<%d,%d>>\\n\",t[x].len,L,R)*/;\n\tst[x].emplace(L,R);\n}\nvector<int>v[800100];\ninline void read(int&x){\n\tx=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\n}\ninline void print(int x){if(x<=9)putchar('0'+x);else print(x/10),putchar('0'+x%10);}\nint main(){\n\tread(n),read(m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s),S=strlen(s);\n\t\tfor(int j=0,las=1;j<S;j++)INS(las=Add(las,s[j]-'0'),i,i,false);\n\t}\n\tfor(int i=1,l,r;i<=m;i++)read(l),read(r),u[l].emplace_back(r,i);\n\tbuild(1,1,n);\n\tfor(int i=2;i<=cnt;i++)v[t[i].fa].push_back(i);\n\tfor(int i=1;i<=cnt;i++)ord[i]=i;\n\tsort(ord+1,ord+cnt+1,[](int x,int y){return t[x].len>t[y].len;});\n\tfor(int i=1;i<=cnt;i++){\n\t\tint x=ord[i];\n\t\tfor(auto j:st[x])if(j.first!=j.second)query(1,1,n,j.first,j.second,t[x].len);\n\t\tfor(auto y:v[x]){\n\t\t\tif(st[y].empty())continue;\n\t\t\tif(st[x].empty()){swap(st[x],st[y]);continue;}\n\t\t\tauto &L=st[x],&R=st[y];\n\t\t\tif(L.size()<R.size())swap(L,R);\n\t\t\twhile(!R.empty())INS(x,R.begin()->first,R.begin()->second,true),R.erase(R.begin());\t\t\t\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)print(res[i]),putchar('\\n');\n\treturn 0;\n}\n```\n\n",
        "postTime": 1627211207,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5576\u3010[CmdOI2019]\u53e3\u5934\u7985\u3011"
    },
    {
        "content": "\u770b\u5230\u9759\u6001\u533a\u95f4\u67e5\u8be2\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u8003\u8651\u732b\u6811\u5206\u6cbb\u3002\n\n\u5148\u8981\u89e3\u51b3\u7684\u57fa\u672c\u95ee\u9898\u662f\u5982\u4f55\u67e5\u8be2\u591a\u4e2a\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff0c\u4ece\u4e2d\u9009\u51fa\u4e00\u4e2a\u957f\u5ea6\u6700\u5c0f\u7684\u4e32 $S$\uff0c\u5bf9\u4e8e\u5176\u4ed6\u6bcf\u4e2a\u4e32\u5efa\u4e00\u4e2a SAM\uff0c\u7136\u540e\u5c06 $S$ \u653e\u5728 SAM \u4e0a\u5339\u914d\u3002\u6700\u540e\u4f1a\u5f97\u5230 $S$ \u7684\u6bcf\u4e2a\u524d\u7f00\u4e0e\u5176\u4ed6\u4e32\u7684 LCS\uff0c\u5408\u5e76\u5373\u53ef\u3002\u590d\u6742\u5ea6\u662f $\\mathcal O(len+|S|)$ \u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u732b\u6811\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff1a\n\n1. \u5206\u5272\u8be2\u95ee\u6570\u7ec4\u7684\u590d\u6742\u5ea6\u3002\u5728\u5206\u6cbb\u9014\u4e2d\u9700\u8981\u5206\u522b\u5f80\u5b50\u5206\u6cbb\u533a\u95f4\u653e\u8be2\u95ee\uff0c\u4ee5\u53ca\u627e\u51fa\u9700\u8981\u5728\u5f53\u524d\u533a\u95f4\u89e3\u51b3\u7684\u8be2\u95ee\uff0c\u8fd9\u4e2a\u53ea\u80fd\u5355\u6b21 $\\mathcal O(qcnt)$ \u7684\u590d\u6742\u5ea6\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5206\u6cbb\u6811\u7684\u9ad8\u5ea6\u4e0d\u80fd\u592a\u5927\u3002\n2. \u5bf9\u4e8e\u5206\u6cbb\u5230\u533a\u95f4 $[l,r]$ \u65f6\u627e\u5230\u7684\u5206\u5272\u70b9 $p$\uff0c\u5206\u522b\u8ba1\u7b97 $[l,p]$ \u540e\u7f00\u4e0e $[p,r]$ \u524d\u7f00\u7b54\u6848\u7684\u590d\u6742\u5ea6\u3002\n3. \u5408\u5e76\u524d\u7f00\u540e\u7f00\u7b54\u6848\u7684\u590d\u6742\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u5f53\u524d\u5206\u6cbb\u5230\u4e86\u533a\u95f4  $[l,r]$\u3002\u6839\u636e\u524d\u9762\u8ba1\u7b97\u516c\u5171\u5b50\u4e32\u5927\u5c0f\u7684\u7b97\u6cd5\uff0c\u663e\u7136\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u957f\u5ea6\u8f83\u5c0f\u7684\u4e32\u4f5c\u4e3a\u5206\u5272\u70b9\u3002\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u503c\u4f5c\u4e3a\u5206\u5272\u70b9\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6 $v$\uff0c\u4ee5\u5176\u4e3a\u6700\u5c0f\u503c\u7684\u533a\u95f4 $[l,r]$ \u81f3\u591a\u957f $\\mathcal O(\\dfrac{len}{v})$\uff0c\u5219\u5355\u5c42\u5206\u6cbb\uff08\u82e5\u5e72\u4e2a\u540c\u5c42\u5206\u6cbb\uff09\u8ba1\u7b97\u7528\u4e8e\u5408\u5e76\u7684\u4fe1\u606f\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal O(v\\times\\dfrac{len}{v})=\\mathcal O(len)$\u3002\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u9009\u53d6\u6240\u6709\u6700\u5c0f\u503c\u4e2d\u4e2d\u95f4\u90a3\u4e2a\u4f5c\u4e3a\u5212\u5206\u70b9\u5c31\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u6700\u5c0f\u503c\u53ea\u4f1a\u8d21\u732e $\\mathcal O(\\log n)$ \u5c42\u5206\u6cbb\u3002\u53c8\u6211\u4eec\u77e5\u9053\u81f3\u591a\u53ea\u6709 $\\mathcal O(\\sqrt{len})$ \u4e2a\u4e0d\u540c\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u8fd9\u6837\u5b50\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(len\\sqrt{len} \\log n)$\u3002\u5bf9\u4e8e\u5408\u5e76\u7b54\u6848\u7684\u90e8\u5206\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u8d21\u732e\u662f\u5176\u533a\u95f4\u4e2d\u7684\u957f\u5ea6\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u5728\u8bb0\u5fc6\u5316\u4fdd\u8bc1\u70b9\u5bf9\u4e0d\u91cd\u540e\u5c31\u81f3\u591a\u662f $\\mathcal O(Q\\sqrt{len}+len\\sqrt{len})$\u3002\n\n\u4e0a\u9762\u90a3\u4e2a\u7b97\u6cd5\u52a3\u7684\u539f\u56e0\u662f\u5206\u6cbb\u6811\u8fc7\u9ad8\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u8ba1\u7b97\u7528\u4e8e\u5408\u5e76\u7684\u4fe1\u606f\u7684\u590d\u6742\u5ea6\u6b63\u786e\u7684\u8bdd\u4e00\u5b9a\u8981\u4fdd\u8bc1\u6bcf\u8f6e\u5206\u6cbb\u91cc\u9009\u7684\u5212\u5206\u70b9\u662f\u4e00\u4e2a $\\mathcal O(minval)$ \u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\u8003\u8651\u500d\u589e\uff0c\u5728\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u6781\u5c0f\u7684\u9608\u503c $x$\uff0c\u7136\u540e\u5c06\u5206\u6cbb\u533a\u95f4\u4e2d\u7684\u6240\u6709\u5728 $[2^x,2^{x+1})$ \u91cc\u7684\u957f\u5ea6\u62ff\u51fa\u6765\u53d6\u4e2d\u70b9\u4e3a\u5212\u5206\u70b9\uff0c\u76f4\u5230\u4e0d\u5b58\u5728 $[2^x,2^{x+1})$ \u91cc\u7684\u957f\u5ea6\u540e\u5c06 $x$ \u52a0 $1$\u3002\u8fd9\u6837\u5b50\u5728\u5206\u6790\u8ba1\u7b97\u4fe1\u606f\u7684\u590d\u6742\u5ea6\u4e0e\u5355\u4e2a $x$ \u7684\u5206\u6cbb\u6df1\u5ea6\u65f6\u53ef\u4ee5\u5957\u7528\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u663e\u7136\u9009\u51fa\u6765\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u5176\u4e2d\u6700\u5c0f\u503c\u7684\u4e24\u500d\u3002\u4e0d\u540c\u7684\u662f\u53ea\u6709 $\\mathcal O(\\log len)$ \u4e2a $x$\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4f18\u5316\u4e3a $\\mathcal O(len \\log len \\log n+(Q+len) \\sqrt{len})$\u3002\n\n```cpp\n// by iodwad\n#include <cstdio>\n#include <iostream>\n#include <cassert>\n#include <string>\n#include <map>\n#include <numeric>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAXN = 2e4;\nconst int MAXM = 1e5;\nconst int MAXL = 4e5;\n\nint n, m, L[MAXM + 5], R[MAXM + 5], ans[MAXM + 5], len[MAXN + 5];\nmap<pair<int, int>, int> buc;\nstring str[MAXN + 5];\n\nconst int maxl = MAXL << 1 | 1;\nstruct SAM {\n  int len[maxl + 5], link[maxl + 5], trans[maxl + 5][2], Last, Size;\n  SAM() : Last(1), Size(1) {}\n  void extend(int c) {\n    c -= '0';\n    int cur = ++Size, p; \n    len[cur] = len[Last] + 1;\n    for (p = Last; p && !trans[p][c]; p = link[p]) trans[p][c] = cur;\n    if (!p) link[cur] = 1;\n    else {\n      int q = trans[p][c];\n      if (len[q] == len[p] + 1) link[cur] = q;\n      else {\n        int cln = ++Size;\n        len[cln] = len[p] + 1;\n        link[cln] = link[q];\n        memcpy(trans[cln], trans[q], sizeof(trans[q]));\n        for (; p && trans[p][c] == q; p = link[p]) trans[p][c] = cln;\n        link[cur] = link[q] = cln;\n      }\n    }\n    Last = cur;\n  }\n  vector<int> query(const string &s) {\n    int n = s.size();\n    vector<int> ans(n);\n    for (int i = 0, mlen = 0, p = 1; i < n; ++i) {\n      int c = s[i] - '0';\n      while (p != 1 && !trans[p][c]) p = link[p], mlen = len[p];\n      if (trans[p][c]) p = trans[p][c], ++mlen;\n      else mlen = 0;\n      ans[i] = mlen;\n    }\n    return ans;\n  }\n  void clear() {\n    memset(len, 0, sizeof(int) * (Size + 1));\n    memset(link, 0, sizeof(int) * (Size + 1));\n    memset(trans, 0, sizeof(int) * 2 * (Size + 1));\n    Last = Size = 1;\n  }\n} sam;\n\nvector<int> operator< (const vector<int> &lhs, const vector<int> &rhs) {\n  int n = lhs.size();\n  vector<int> ans(n);\n  for (int i = 0; i < n; ++i) ans[i] = min(lhs[i], rhs[i]);\n  return ans;\n}\n\nint idx[MAXM + 5];\nvoid solve(int al, int ar, int ql, int qr, int t) {\n  if (al > ar || ql > qr) return;\n  int tot0 = 0, tot1 = 0, tot2 = 0;\n  static int idx0[MAXM + 5], idx1[MAXM + 5], idx2[MAXM + 5];\n  static vector<int> mlen1[MAXN + 5], mlen2[MAXM + 5];\n  static vector<int> pos; pos.clear();\n  int lt = 1 << t, rt = (lt << 1);\n  for (int i = al; i <= ar; ++i) if (lt <= len[i] && len[i] < rt) pos.push_back(i);\n  if (pos.empty()) return solve(al, ar, ql, qr, t + 1);\n  int mid = pos[pos.size() >> 1];\n  for (int i = mid; i >= al; --i) {\n    sam.clear(); \n    for (int j = 0; j < len[i]; ++j) sam.extend(str[i][j]);\n    vector<int> tmp = sam.query(str[mid]);\n    if (i != mid) mlen1[i] = mlen1[i + 1] < tmp;\n    else mlen1[i] = tmp;\n  }\n  for (int i = mid; i <= ar; ++i) {\n    sam.clear();\n    for (int j = 0; j < len[i]; ++j) sam.extend(str[i][j]);\n    vector<int> tmp = sam.query(str[mid]);\n    if (i != mid) mlen2[i] = mlen2[i - 1] < tmp;\n    else mlen2[i] = tmp;\n  }\n  for (int i = ql; i <= qr; ++i) {\n    int l = L[idx[i]], r = R[idx[i]];\n    if (l <= mid && mid <= r) idx0[++tot0] = idx[i];\n    else if (r < mid) idx1[++tot1] = idx[i];\n    else idx2[++tot2] = idx[i];\n  }\n  for (int i = 1; i <= tot0; ++i) {\n    int id = idx0[i], l = L[id], r = R[id], res = 0;\n    if (buc.count(make_pair(l, r))) {\n      ans[id] = buc[make_pair(l, r)];\n      continue;\n    }\n    vector<int> tmp = mlen1[l] < mlen2[r];\n    for (int j : tmp) res = max(res, j);\n    ans[id] = buc[make_pair(l, r)] = res;\n  }\n  for (int i = 1; i <= tot1; ++i) idx[ql + i - 1] = idx1[i];\n  for (int i = 1; i <= tot2; ++i) idx[ql + tot1 + i - 1] = idx2[i];\n  solve(al, mid - 1, ql, ql + tot1 - 1, t);\n  solve(mid + 1, ar, ql + tot1, ql + tot1 + tot2 - 1, t);\n}\n\nint main() {\n  ios::sync_with_stdio(false); cin.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) cin >> str[i], len[i] = str[i].size();\n  for (int i = 1; i <= m; ++i) cin >> L[i] >> R[i];\n  iota(idx, idx + m + 1, 0);\n  solve(1, n, 1, m, 0);\n  for (int i = 1; i <= m; ++i) cout << ans[i] << \"\\n\";\n  return 0;\n}\n```",
        "postTime": 1642158816,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "P5576 \u9898\u89e3"
    },
    {
        "content": "**upd:** \u4fee\u6539\u4e86\u4e00\u4e9b\u601d\u8def\u7684\u8868\u8fbe\uff0c\u5e2e\u52a9\u7406\u89e3\u3002 \n\n\u9996\u5148\u819c\u62dc yyc \u5927\u4f6c\u51fa\u8fd9\u6837\u7684~~\u6bd2\u7624~~\u597d\u9898\u3002\u53e6\u5916\u611f\u8c22 \u6c38\u65e0\u5c9b\u3001xtx1092515503\u3001hs_black \u63d0\u4f9b\u7684\u601d\u8def\u3002\u8fd9\u91cc\u6574\u7406\u4e86\u4e00\u4e0b\u8fd9\u4e9b\u601d\u8def\uff0c\u53ef\u80fd\u4f1a\u6709\u6240\u542f\u53d1\u3002\n\n**\u9898\u610f\uff1a** \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6784\u6210\u7684\u5e8f\u5217\uff0c\u591a\u6b21\u67e5\u8be2\u7ed9\u5b9a\u533a\u95f4\u5185\u5404\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002\n\n\u63d0\u4f9b\u4e00\u79cd \u540e\u7f00\u6570\u7ec4 + \u7ebf\u6bb5\u6811\u5408\u5e76 \u7684\u5728\u7ebf\u5355 $\\log$ \u5b9e\u73b0\u3002\n\n## 1. \u601d\u8def\n\n\u7531\u4e8e\u672c\u9898\u662f\u533a\u95f4\u67e5\u8be2\u7248\u7684 [LCS2](https://www.luogu.com.cn/problem/SP1812) \u6240\u4ee5\u7b14\u8005\u9996\u5148\u627e\u5230\u4e86\u5728\u8be5\u9898\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u5c3a\u53d6\u505a\u6cd5\u3002\n\n\u4e0b\u6587\u4e2d\uff0c**\u6781\u957f**\u8868\u793a\u4e0d\u88ab\u4efb\u4f55\u6ee1\u8db3\u6761\u4ef6\u7684\u66f4\u5927\u533a\u95f4\u5b8c\u5168\u5305\u542b\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u8be2\u95ee $[l,r]$ \u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u65f6\uff0c\u5bf9\u4e8e\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u6ee1\u8db3\u5bf9\u4efb\u610f $[l,r]$ \u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u533a\u95f4\u81f3\u5c11\u5305\u542b\u5176\u4e00\u4e2a\u540e\u7f00\uff0c\u5219\u8be5\u533a\u95f4\u5305\u542b\u7684\u6240\u6709\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u663e\u7136\u662f\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a**\u6781\u957f**\u516c\u5171\u5b50\u4e32\u3002\u76f4\u63a5\u901a\u8fc7\u5c3a\u53d6\u6cd5\u627e\u5230\u5305\u542b $[l,r]$ \u4e2d\u6240\u6709\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a**\u6781\u957f**\u533a\u95f4\uff0c\u5219\u5bf9\u5e94\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u5373\u4e3a\u6240\u6709\u53d6\u51fa\u7684\u533a\u95f4\u5728\u9ad8\u5ea6\u6570\u7ec4\u4e0a\u5bf9\u5e94\u7684\u533a\u95f4 $\\min$\uff0c\u5bf9\u8fd9\u4e9b\u957f\u5ea6\u518d\u53d6 $\\max$ \u5373\u4e3a\u7b54\u6848\u3002\u5f88\u5bb9\u6613\u5c06\u4e00\u4e2a\u540e\u7f00\u5bf9\u5e94\u7684\u539f\u5b57\u7b26\u4e32\u7f16\u53f7\u8054\u60f3\u6210\u989c\u8272\uff0c\u90a3\u4e48\u5bf9\u4e8e\u627e\u5230\u6240\u6709\u5305\u542b $[l,r]$ \u4e2d\u6bcf\u4e2a\u989c\u8272\u7684\u4e32\u3002\n\n\u73b0\u5728\u6709\u591a\u6b21\u8be2\u95ee\uff0c\u7ed9\u5b9a\u989c\u8272\u533a\u95f4\uff0c\u8fd9\u79cd\u5c3a\u53d6\u6cd5\u6bcf\u6b21\u90fd\u9700\u8981 $O(len)$ \u65f6\u95f4\uff0c\u4e0d\u80fd\u4f7f\u7528\u3002\u8003\u8651\u5229\u7528\u9759\u6001\u548c\u79bb\u7ebf\u7684\u6761\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u9700\u8981\u5c3a\u53d6\u7684\u8fd9\u4e2a\u5e8f\u5217\uff08\u4e0b\u79f0\u5e8f\u5217 $a$\uff09\u4e2d\uff0c\u4efb\u4f55\u4e24\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684 $\\min$ \u503c\uff08\u7b54\u6848\uff09\u90fd\u53ef\u4ee5\u5feb\u901f\u5408\u5e76\uff1b\u5e76\u4e14\u4e24\u4e2a\u533a\u95f4\u5bf9\u5e94\u542b\u6709\u7684\u6240\u6709\u989c\u8272\u4e5f\u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6216\u7ebf\u6bb5\u6811\u5408\u5e76\u5feb\u901f\u5408\u5e76\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u6309\u7167**\u9ad8\u5ea6\u4ece\u5927\u5230\u5c0f**\u7684\u987a\u5e8f\uff0c\u5bf9 $a$ \u4e0a\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5408\u5e76\u5b83\u4e24\u8fb9\u7684\u6bd4\u5b83\u9ad8\u7684\u5143\u7d20\u6240\u5728\u7684\u6bb5\u3002\u8fd9\u6837\u6bcf\u6b21\u5408\u5e76\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u7684\u6bb5\u7684\u6700\u5c0f\u503c\u5c31\u662f\u8fd9\u4e2a\u5143\u7d20\u7684\u9ad8\u5ea6\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u6bb5\u5305\u542b\u7684\u6240\u6709\u989c\u8272\u533a\u95f4 $[l,r]$\u3002\u8fd9\u5c31\u53ef\u4ee5\u7528\u5b83\u7684\u9ad8\u5ea6 $h$ \u66f4\u65b0\u90a3\u4e9b\u88ab\u5176\u4e2d\u67d0\u4e2a\u533a\u95f4\u5b8c\u5168\u5305\u542b\u7684\u8be2\u95ee\u533a\u95f4\u7684\u7b54\u6848\u3002\u663e\u7136\uff0c\u8fd9\u91cc\u6211\u4eec\u4f9d\u6b21\u5408\u5e76\u51fa\u7684\u6240\u6709\u533a\u95f4\uff0c\u5176\u7b54\u6848**\u5355\u8c03\u4e0d\u589e**\u3002\n\n\u8fd9\u6837\uff0c\u8be2\u95ee\u662f\u5728\u7ebf\u5730\u627e\u5230**\u7b2c\u4e00\u6b21**\u5305\u542b\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u7684\u989c\u8272\u533a\u95f4\u7684\u5bf9\u5e94\u7b54\u6848\u3002\u8003\u8651\u628a\u5408\u5e76\u51fa\u7684\u6bcf\u4e2a\u989c\u8272\u533a\u95f4 $[x,y]$ \u7528\u4e8c\u5143\u7ec4 $(r,h)$ \u8868\u793a\u5176\u53f3\u7aef\u70b9\u53ca\u7b54\u6848\uff0c\u5b58\u50a8\u5728\u4f4d\u7f6e $x$ \u4e0a\uff0c\u5219\u95ee\u9898\u8f6c\u53d8\u4e3a\u67e5\u8be2 $[0,l]$ \u4e2d $y\\ge r$ \u7684\u4e8c\u5143\u7ec4\u4e2d $h$ \u7684\u6700\u5927\u503c\u3002\u5bf9\u8be5\u4e8c\u5143\u7ec4\u6309\u7167 $x$ \u9012\u589e\u987a\u5e8f\uff0c\u5efa\u7acb\u524d\u7f00\u503c\u57df\u4e3b\u5e2d\u6811\uff0c\u5728\u7b2c $x$ \u68f5\u4e0a\u7684\u4f4d\u7f6e $y$ \u63d2\u5165\u6570\u503c $h$\uff0c\u7ef4\u62a4\u503c\u57df\u4e0a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\u3002\n\n## 2. \u4f18\u5316\n\n\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u74f6\u9888\u5728\u8fd9\u91cc\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u5e26\u4e24\u4e2a $\\log$\uff0c\u4f46\u662f\u5f88\u5bb9\u6613\u5904\u7406\u51fa\u4e00\u4e2a\u6bb5\u7684\u6240\u6709\u989c\u8272\u533a\u95f4\u3002\u800c\u7ebf\u6bb5\u6811\u5408\u5e76\u4f3c\u4e4e\u96be\u4ee5\u5904\u7406\u3002\u4f46\u662f \u6c38\u65e0\u5c9b \u5927\u4f6c\u63d0\u51fa\u4e00\u79cd\u5904\u7406\u8de8\u8fc7\u7ebf\u6bb5\u6811\u8282\u70b9\u4e2d\u70b9\u7684\u533a\u95f4\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u80dc\u4efb\u8fd9\u79cd\u60c5\u51b5\u3002\u7136\u800c\u8fd9\u79cd\u505a\u6cd5\u6709\u5f88\u591a\u79cd\u5177\u4f53\u5b9e\u73b0\uff0c\u7b14\u8005\u4f7f\u7528\u7684\u662f\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u6e05\u6670\u7684\u505a\u6cd5\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u9996\u5148\u5b9a\u4e49\u201c\u8de8\u8d8a\u4e2d\u70b9\u201d\u6bb5\u662f\u6307\u5de6\u513f\u5b50\u7684\u540e\u7f00\u548c\u53f3\u513f\u5b50\u7684\u524d\u7f00\u62fc\u6210\u7684\u6bb5\uff08\u8fd9\u4e24\u8005\u4e2d\u4e5f\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u4e00\u4e2a\u4e32\u88ab\u5b83\u7684\u540e\u4ee3\u591a\u6b21\u5904\u7406\uff0c\u53ea\u6709\u8fd9\u4e2a\u6bb5\u6574\u4f53\u4e0d\u662f\u8be5\u8282\u70b9\u524d\u7f00\u6216\u540e\u7f00\u65f6\u624d\u5904\u7406\u3002\u663e\u7136\u4efb\u4f55\u6781\u957f\u989c\u8272\u6bb5\u5c31\u548c\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u5efa\u7acb\u4e86\u4e00\u4e2a\u53cc\u5c04\u3002\u90a3\u4e48\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u7f00\u6709\u989c\u8272\u6bb5\u548c\u540e\u7f00\u6709\u989c\u8272\u6bb5\u5373\u53ef\u3002\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5728\u5408\u5e76\u540e\u5b83\u5bf9\u5e94\u7684\u533a\u95f4\u957f\u5ea6\u6ca1\u6709\u53d8\u957f\uff0c\u90a3\u4e48\u4e0d\u7528\u8fd9\u4e2a\u533a\u95f4\u91cd\u590d\u66f4\u65b0\u7b54\u6848\u3002\n\n\u7efc\u4e0a\u53ef\u4ee5\u5f97\u5230\u590d\u6742\u5ea6\u4e3a $O((len + n + m)\\log{n})$\uff0c\u7a7a\u95f4\u4e3a $O((len + n)\\log n + m)$\u3002\u8fd9\u4e2a\u7a7a\u95f4\u662f\u65e0\u6cd5\u901a\u8fc7\u7684\uff0c\u4f46\u5982\u679c\u79bb\u7ebf\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u5230\u7a7a\u95f4 $O(n\\log n + len + m)$\u3002\n\n**\u66f4\u65b0\uff1a** \u5982\u679c\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u4e2d\uff0c\u5bf9\u4e8e\u53ea\u6709\u5305\u542b\u4e00\u4e2a\u503c\u7684\u503c\u57df\u533a\u95f4\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u6253\u4e0a\u6807\u8bb0\u800c\u76f4\u5230\u5408\u5e76\u65f6\u518d\u5efa\u51fa\u5b83\u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u5e76\u91cd\u590d\u5229\u7528\u88ab\u5220\u9664\u7684\u8282\u70b9\u7a7a\u95f4\uff0c\u53ef\u4ee5\u8fbe\u5230 $O(n\\log n + len + m)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n## 4. \u5b9e\u73b0\n\n**\u79bb\u7ebf\uff1a**\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Input\nint n, m, len, x, y, ans[100005], str[420005], sa[420005], ht[420005];\nint rt[420005], a[100005], b[420005], fa[420005], now;\npair<int, int> baf[420005];\nchar c;\nvector<pair<short, int>> u[20010];\n// Sa\nnamespace Sa {\nint n, m, rk[420005], x[420005], y[420005];\nvoid init() {\n    m = 20002;\n    for (int i = 1; i <= n; ++i) ++fa[x[i] = str[i]];\n    for (int i = 2; i <= m; ++i) fa[i] += fa[i - 1];\n    for (int i = n; i >= 1; --i) sa[fa[x[i]]--] = i;\n    for (int k = 1; k <= n; k <<= 1) {\n        int num = 0;\n        for (int i = n - k + 1; i <= n; ++i) y[++num] = i;\n        for (int i = 1; i <= n; ++i)\n            if (sa[i] > k) y[++num] = sa[i] - k;\n        for (int i = 1; i <= m; ++i) fa[i] = 0;\n        for (int i = 1; i <= n; ++i) ++fa[x[i]];\n        for (int i = 2; i <= m; ++i) fa[i] += fa[i - 1];\n        for (int i = n; i >= 1; --i) sa[fa[x[y[i]]]--] = y[i], y[i] = 0;\n        swap(x, y);\n        x[sa[1]] = 1;\n        num = 1;\n        for (int i = 2; i <= n; ++i)\n            x[sa[i]] = (y[sa[i]] == y[sa[i - 1]] && y[sa[i] + k] == y[sa[i - 1] + k]) ? num : ++num;\n        if (num >= n) break;\n        m = num;\n    }\n    int k = 0;\n    for (int i = 1; i <= n; ++i) rk[sa[i]] = i;\n    for (int i = 1; i <= n; ++i) {\n        if (rk[i] == 1) continue;\n        if (k) --k;\n        int j = sa[rk[i] - 1];\n        while (j + k <= n && i + k <= n && str[i + k] == str[j + k]) ++k;\n        ht[rk[i]] = k;\n    }\n}\n}\nnamespace Ans {\nint tot;\nstruct Node {\n    int l, r, x;\n} t[400010];\ninline int build(int l, int r) {\n    int p = ++tot;\n    if (l == r)\n        sort(u[l].rbegin(), u[l].rend()), t[p].x = (u[l].empty() ? 0x3f3f3f3f : u[l].back().first);\n    else {\n        int mid = (l + r) >> 1;\n        t[p].l = build(l, mid);\n        t[p].r = build(mid + 1, r);\n        t[p].x = min(t[t[p].l].x, t[t[p].r].x);\n    }\n    return p;\n}\ninline void query(int p, int l, int r, int x, int y) {\n    if (r < x || t[p].x > y) return;\n    int mid = (l + r) >> 1;\n    if (l == r) {\n        while (!u[l].empty() && u[l].back().first <= y) ans[u[l].back().second] = now, u[l].pop_back();\n        t[p].x = (u[l].empty() ? 0x3f3f3f3f : u[l].back().first);\n    } else {\n        query(t[p].l, l, mid, x, y), query(t[p].r, mid + 1, r, x, y);\n        t[p].x = min(t[t[p].l].x, t[t[p].r].x);\n    }\n}\n}\n// Segment Tree\nnamespace Seg {\nstruct Node {\n    int l, r;\n    short lv, rv;\n} t[8000001];\nint tot;\ninline void pushup(int p, int l, int r) {\n    int mid = (l + r) >> 1;\n    if (t[p].l) t[p].lv = t[t[p].l].lv;\n    if (t[p].r) t[p].rv = t[t[p].r].rv;\n    if (t[t[p].l].lv == mid - l + 1) t[p].lv += t[t[p].r].lv;\n    if (t[t[p].r].rv == r - mid) t[p].rv += t[t[p].l].rv;\n}\ninline int insert(int l, int r, int i) {\n    int p = ++tot;\n    if (l == r) t[p].lv = t[p].rv = 1;\n    else {\n        int mid = (l + r) >> 1;\n        if (i <= mid) t[p].l = insert(l, mid, i), t[p].lv = t[t[p].l].lv;\n        else t[p].r = insert(mid + 1, r, i), t[p].rv = t[t[p].r].rv;\n    }\n    return p;\n}\ninline int merge(int p, int q, int l, int r, int k = 0) {\n    if (p == q) return p;\n    if (!p || !q) return p ^ q;\n    int mid = (l + r) >> 1, lt = t[t[p].l].rv, rt = t[t[p].r].lv;\n    t[p].lv = max(t[p].lv, t[q].lv), t[p].rv = max(t[p].rv, t[q].rv);\n    t[p].l = merge(t[p].l, t[q].l, l, mid, 1), t[p].r = merge(t[p].r, t[q].r, mid + 1, r, 2);\n    pushup(p, l, r);\n    if (t[t[p].l].rv == lt && t[t[p].r].lv == rt) return p;\n    if ((t[t[p].l].rv || t[t[p].r].lv) &&\n        (!k || (k == 2 && t[t[p].l].rv < mid - l + 1) || (k == 1 && t[t[p].r].lv < r - mid)))\n        Ans::query(1, 1, n, mid - t[t[p].l].rv + 1, mid + t[t[p].r].lv);\n    return p;\n}\n};\ninline int read() {\n    char c = getchar();\n    int x = 0, f = 1;\n    while (!isdigit(c)) f = (c == '-' ? -1 : f), c = getchar();\n    while (isdigit(c)) x = (x << 3) + (x << 1) + c - '0', c = getchar();\n    return x * f;\n}\ninline int find(int x) {\n    if (fa[x] == x) return x;\n    return fa[x] = find(fa[x]);\n}\nint i, j, num;\nsigned main() {\n    n = read(), m = read();\n    for (i = 1; i <= n; ++i) {\n        while (!isdigit(c)) c = getchar();\n        while (isdigit(c)) str[++len] = c - '0' + 1, b[len] = i, c = getchar();\n        str[++len] = i + 2;\n    }\n    Sa::n = len, Sa::init();\n    for (i = 1; i <= len; ++i){\n        if(b[sa[i]]) baf[++num] = make_pair(-ht[i], i), fa[i] = i, rt[i] = Seg::insert(1, n, b[sa[i]]);\n        else fa[i] = i - 1;\n    } sort(baf + 2, baf + 1 + num);\n    for (int i = 1; i <= m; ++i) a[i] = read(), u[a[i]].emplace_back(read(), i);\n    Ans::build(1, n);\n    for (i = 2; i <= num; ++i) {\n        x = baf[i].second, now = -baf[i].first;\n        rt[find(x)] = Seg::merge(rt[find(x)], rt[find(x - 1)], 1, n), fa[find(x - 1)] = find(x);\n    }\n    for (int i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4e86\u53ef\u8bfb\u6027\u548c\u5728\u7ebf\uff0c\u6548\u7387\u8f83\u4f4e\uff08\u6b64\u9898\u7ebf\u6bb5\u6811\u5408\u5e76\u53ef\u80fd\u53ea\u6709\u7406\u8bba\u4e0a\u624d\u4f18\u4e8e\u542f\u53d1\u5f0f\u5408\u5e76\uff09\uff0c\u4e0d\u5f00 `O2` \u4e0d\u4fdd\u8bc1\u968f\u65f6\u90fd\u53ef\u4ee5\u901a\u8fc7\u3002\n\n**\u5728\u7ebf\uff1a**\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\n// Input\nint n, m, len, x, y, sa[500005], ht[500005];\npair<int, int> baf[500005];\nint rt[500005], b[500005], fa[500005], now;\nchar c;\nshort str[500005];\nvector<pair<short, short>> u[20010];\n// Sa\nnamespace Sa {\nint n, m, ans, rk[500005], c[500005], x[500005], y[500005];\nvoid init() {\n    m = 20002;\n    for (int i = 1; i <= n; ++i) ++c[x[i] = str[i]];\n    for (int i = 2; i <= m; ++i) c[i] += c[i - 1];\n    for (int i = n; i >= 1; --i) sa[c[x[i]]--] = i;\n    for (int k = 1; k <= n; k <<= 1) {\n        int num = 0;\n        for (int i = n - k + 1; i <= n; ++i) y[++num] = i;\n        for (int i = 1; i <= n; ++i)\n            if (sa[i] > k) y[++num] = sa[i] - k;\n        for (int i = 1; i <= m; ++i) c[i] = 0;\n        for (int i = 1; i <= n; ++i) ++c[x[i]];\n        for (int i = 2; i <= m; ++i) c[i] += c[i - 1];\n        for (int i = n; i >= 1; --i) sa[c[x[y[i]]]--] = y[i], y[i] = 0;\n        swap(x, y);\n        x[sa[1]] = 1;\n        num = 1;\n        for (int i = 2; i <= n; ++i)\n            x[sa[i]] = (y[sa[i]] == y[sa[i - 1]] && y[sa[i] + k] == y[sa[i - 1] + k]) ? num : ++num;\n        if (num >= n) break;\n        m = num;\n    }\n    int k = 0;\n    for (int i = 1; i <= n; ++i) rk[sa[i]] = i;\n    for (int i = 1; i <= n; ++i) {\n        if (rk[i] == 1) continue;\n        if (k) --k;\n        int j = sa[rk[i] - 1];\n        while (j + k <= n && i + k <= n && str[i + k] == str[j + k]) ++k;\n        ht[rk[i]] = k;\n    }\n    // for (int i = 1; i <= n; ++i) cout << sa[i] << \" \";\n    // cout << endl;\n    // for (int i = 1; i <= n; ++i) cout << ht[i] << \" \";\n    // cout << endl;\n}\n}\nnamespace Ans {\nint tot, rt[20010];\nstruct Node {\n    int l, r, x;\n} t[200010];\ninline int insert(int p, int l, int r, int i, int x) {\n    int tp = ++tot;\n    t[tp] = t[p], t[tp].x = max(t[tp].x, x);\n    if (l ^ r) {\n        int mid = (l + r) >> 1;\n        if (i <= mid)\n            t[tp].l = insert(t[p].l, l, mid, i, x);\n        else\n            t[tp].r = insert(t[p].r, mid + 1, r, i, x);\n    }\n    return tp;\n}\ninline int ask(int p, int pl, int pr, int l) {\n    if (pl >= l) return t[p].x;\n    int mid = (pl + pr) >> 1, ans = 0;\n    if (l <= mid) ans = max(ans, ask(t[p].l, pl, mid, l));\n    return max(ans, ask(t[p].r, mid + 1, pr, l));\n}\n}\n// Segment Tree\nnamespace Seg {\nstruct Node {\n    int l, r;\n    short lv, rv, lt, rt;\n} t[8000001];\nint tot, bk[8000001], top;\ninline void pushup(int p, int l, int r) {\n    int mid = (l + r) >> 1;\n    if (t[p].l) t[p].lv = t[t[p].l].lv;\n    if (t[p].r) t[p].rv = t[t[p].r].rv;\n    if (t[t[p].l].lv == mid - l + 1) t[p].lv += t[t[p].r].lv;\n    if (t[t[p].r].rv == r - mid) t[p].rv += t[t[p].l].rv;\n}\ninline int insert(int l, int r, int i) {\n    int p = ++tot;\n    if (l == r)\n        t[p].lv = t[p].rv = 1;\n    else {\n        int mid = (l + r) >> 1;\n        if (i <= mid)\n            t[p].l = insert(l, mid, i), t[p].lv = t[t[p].l].lv;\n        else\n            t[p].r = insert(mid + 1, r, i), t[p].rv = t[t[p].r].rv;\n    }\n    return p;\n}\ninline int merge(int p, int q, int l, int r, int k = 0) {\n    if (p == q) return p;\n    if (!p || !q) return p ^ q;\n    int mid = (l + r) >> 1, lt = t[t[p].l].rv, rt = t[t[p].r].lv;\n    t[p].lv = max(t[p].lv, t[q].lv), t[p].rv = max(t[p].rv, t[q].rv);\n    t[p].l = merge(t[p].l, t[q].l, l, mid, 1), t[p].r = merge(t[p].r, t[q].r, mid + 1, r, 2);\n    pushup(p, l, r);\n    t[q] = {}, bk[++top] = q;\n    if (t[t[p].l].rv == lt && t[t[p].r].lv == rt) return p;\n    if ((t[t[p].l].rv || t[t[p].r].lv) &&\n        (!k || (k == 2 && t[t[p].l].rv < mid - l + 1) || (k == 1 && t[t[p].r].lv < r - mid)))\n        u[mid - t[t[p].l].rv + 1].emplace_back(mid + t[t[p].r].lv, now);\n    return p;\n}\n};\ninline int read() {\n    char c = getchar();\n    int x = 0, f = 1;\n    while (!isdigit(c)) f = (c == '-' ? -1 : f), c = getchar();\n    while (isdigit(c)) x = (x << 3) + (x << 1) + c - '0', c = getchar();\n    return x * f;\n}\ninline int find(int x) {\n    if (fa[x] == x) return x;\n    return fa[x] = find(fa[x]);\n}\nint i, j, num;\nsigned main() {\n    n = read(), m = read();\n    for (i = 1; i <= n; ++i) {\n        while (!isdigit(c)) c = getchar();\n        while (isdigit(c)) str[++len] = c - '0' + 1, b[len] = i, c = getchar();\n        str[++len] = i + 2;\n    }\n    Sa::n = len, Sa::init();\n    for (i = 1; i <= len; ++i){\n        if(b[sa[i]]) baf[++num] = make_pair(-ht[i], i), fa[i] = i, rt[i] = Seg::insert(1, n, b[sa[i]]);\n        else fa[i] = i - 1;\n    } sort(baf + 2, baf + 1 + num);\n    for (i = 2; i <= num; ++i) {\n        x = baf[i].second, now = -baf[i].first;\n        // j = b[sa[x - 1]] ? x - 1 : x - 2;\n        rt[find(x)] = Seg::merge(rt[find(x)], rt[find(x - 1)], 1, n), fa[find(x - 1)] = find(x);\n    }\n    for (i = 1; i <= n; ++i) {\n        Ans::rt[i] = Ans::rt[i - 1];\n        for (j = 0; j < u[i].size(); j++)\n            Ans::rt[i] = Ans::insert(Ans::rt[i], 1, n, u[i][j].first, u[i][j].second);\n    }\n    while (m--) {\n        x = read(), y = read();\n        printf(\"%d\\n\", Ans::ask(Ans::rt[x], 1, n, y));\n    }\n    return 0;\n}\n```",
        "postTime": 1649499981,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P5576 [CmdOI2019]\u53e3\u5934\u7985 \u9898\u89e3"
    },
    {
        "content": "\u6807\u7b7e\uff1aSAM\uff0c\u968f\u673a\u5316\n## \u591a\u4e32\u6700\u957f\u516c\u5171\u5b50\u4e32\u505a\u6cd5\n\u9009\u53d6\u6700\u77ed\u7684\u4e32\u4f5c\u4e3a\u6a21\u677f\u5efa SAM \uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u4e32\u653e\u5728 SAM \u4e0a\u8dd1\u5339\u914d\uff0c\u5f00\u4e2a mx \u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5927\u5339\u914d\u957f\u5ea6\uff0c\u5bf9\u6bcf\u4e2a\u4e32\u7684 mx \u6570\u7ec4\u5728\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u53d6 mn \u5f97\u5230\u4e00\u4e2a mn \u6570\u7ec4\uff0cmn \u6570\u7ec4\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002  \n\u5728 SAM \u4e0a\u5339\u914d\u5927\u6982\u662f\u8fd9\u6837\u5199\u7684\uff1a\n```cpp\nfor(int i=0,mxlen=0,cur=1;i<s.length();++i){\n\t//cur:\u5f53\u524d\u5339\u914d\u5230\u7684\u6700\u6df1\u7684\u8282\u70b9  mxlen:\u6700\u5927\u957f\u5ea6\uff08\u6ce8\u610f\u6700\u5927\u957f\u5ea6\u4e0d\u4e00\u5b9a\u662fl[cur]) \n\tint c=s[i]-'0';\n\tfor(;cur&&!ch[cur][c];cur=fa[cur],mxlen=l[cur]) ;\n\tif(!cur) cur=1,mxlen=0;\n\telse cur=ch[cur][c],++mxlen;\n\tmx[cur]=max(mx[cur],mxlen);\t \n}\n```\n\u66f4\u65b0 mn \u6570\u7ec4\uff1a\n```cpp\nfor(int i=tot;i;--i){\n//p:\u6309l\u6392\u5e8f\u540e\u7684\u8282\u70b9\u987a\u5e8f\n\tmn[p[i]]=min(mn[p[i]],mx[p[i]]);\n\tif(fa[p[i]]&&mx[p[i]])mx[fa[p[i]]]=max(mx[fa[p[i]]],l[fa[p[i]]]);\n//\u5982\u679cp[i]\u80fd\u5339\u914d\u5230\uff0c\u90a3\u4e48parent\u6811\u4e0ap[i]\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u80fd\u5339\u914d\u5230\uff0c\u6240\u4ee5\u4e5f\u8981\u66f4\u65b0\u5b83\u4eec\u7684mx\u503c\u3002\n}\n```\n\u590d\u6742\u5ea6\u5206\u6790\uff1a  \n\u4ee4 $L=\\text{\u6a21\u677f\u4e32\u957f\u5ea6}$\uff0c$n=\\text{\u5b57\u7b26\u4e32\u6570\u91cf}$\uff0c$T=\\text{\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u548c}$\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(T+n*L)$\u3002\n## \u672c\u9898\u505a\u6cd5\n\n\u8003\u8651\u5206\u6cbb\u4f18\u5316\u4e0a\u9762\u8fd9\u4e2a\u66b4\u529b\u3002\n- \u8bbe $solve(l,r)$ \u8868\u793a\uff0c\u5f53\u524d\u8981\u5904\u7406\u88ab\u533a\u95f4 $[l,r]$ **\u5b8c\u5168\u5305\u542b** \u7684\u8be2\u95ee\u3002\n- \u5728 $[l,r]$ \u4e2d\u9009\u53d6\u4e00\u4e2a $mid$ \uff0c\u4ee5 $s[mid]$ \u4e3a\u6a21\u677f\u4e32\u5efa\u7acb SAM\uff0c\u8bbe\n$|s[mid]|=L$\u3002\n- \u5bf9$s[i...mid](l\\le i \\le mid)$ \u6c42\u51fa **\u540e\u7f00mn\u6570\u7ec4**\uff0c\u5bf9 $s[mid+1...i](mid+1\\le i \\le r)$ \u6c42\u51fa**\u524d\u7f00mn\u6570\u7ec4**\u3002\n- \u904d\u5386\u5f53\u524d\u8981\u5904\u7406\u7684\u8be2\u95ee\uff0c\u8bbe\u4e00\u4e2a\u8be2\u95ee\u4e3a $(ll,rr)$ \uff0c\u5982\u679c $rr\\le mid$ \u5206\u6cbb\u5230 $solve(l,mid)$ \uff0c\u5982\u679c $ll>mid$ \u5206\u6cbb\u5230 $solve(mid+1,r)$\uff0c\u5426\u5219\u8003\u8651\u56de\u7b54\u8fd9\u4e2a\u8be2\u95ee\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u9884\u5904\u7406\u4e86\u5de6/\u53f3\u8fb9\u7684\u540e/\u524d\u7f00mn\u6570\u7ec4\uff0c\u53ef\u4ee5 $\\Theta(L)$ \u5408\u5e76 $s[ll..mid]$ \u4e0e $s[mid+1,rr]$ \u5bf9\u5e94\u7684mn\u6570\u7ec4\uff0c\u5f97\u5230\u7b54\u6848\u3002\n- \u5047\u8bbe\u5f53\u524d\u5c42\u5171\u6709 $cnt$ \u4e2a\u8be2\u95ee\uff0c\u56de\u7b54\u4e86 $num$ \u4e2a\u8be2\u95ee\uff0c\u5219\u590d\u6742\u5ea6\u4e3a $\\Theta(cnt+num*L)$\u3002  \n\n\u663e\u7136\u5982\u4f55\u9009\u53d6 $mid$ \u662f\u5173\u952e\u3002\u4f46\u662f\u6211\u4eec\u9762\u4e34\u4e00\u4e2a\u5c34\u5c2c\u7684\u60c5\u51b5\uff0c\u9009\u6700\u77ed\u7684\u4e32\u4f5c\u4e3a $mid$ \u5462\uff0c\u53ef\u80fd $num$ \u4f1a\u5f88\u5c0f\u5bfc\u81f4\u9012\u5f52\u4e0b\u53bb\u7684 $cnt$ \u5f88\u5927\uff0c\u9009\u4f7f $num$ \u6700\u5927\u7684\u4e32\u5462\uff0c\u53c8\u53ef\u80fd $L$ \u8fc7\u5927\u5bfc\u81f4\u56de\u7b54\u8be2\u95ee\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002  \n\u8fd9\u4e2a\u65f6\u5019\u8003\u8651~~\u7384\u5b66~~\u968f\u673a\u5316\u3002\u591a\u6b21\u968f\u673a\u4f4d\u7f6e\uff0c\u53d6\u6700\u77ed\u7684\u4e32\u4f5c\u4e3a $mid$\u3002  \n\n\u7ecf\u8fc7\u591a\u6b21\u5b9e\u9a8c\uff0c\u6211\u53d1\u73b0\u968f\u673a\u6b21\u6570\u53d6 $\\log(r-l+1)*0.7$ \u6bd4\u8f83\u4f18\u3002\u7531\u4e8e\u6211\u7684\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u52a0\u4e86\u706b\u8f66\u5934\u90fd\u5361\u4e0d\u8fc7#13\u3002\u7b49\u5230\u665a\u4e0a\u4e5d\u70b9\u591a\u8bc4\u6d4b\u59ec\u98de\u5feb\u7684\u65f6\u5019\uff0c`srand(19260817)`\u4ee5763ms\u5361\u8fc7\u4e86[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.com.cn/record/38334845)\u3002  \n## \u4ee3\u7801\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u53bb\u6389\u4e86\u706b\u8f66\u5934\uff0c\u8bf7\u52a0\u4e0a\u706b\u8f66\u5934\u5e76\u5728\u665a\u4e0a\u98df\u7528\u3002\u4e0d\u4fdd\u8bc1\u968f\u65f6\u80fdAC\u3002~~\u4f9b\u6d4b\u8bd5\u968f\u673a\u79cd\u5b50\u73a9\u3002~~\n```cpp\n#include<bits/stdc++.h>\n#define mk make_pair\n#define pk push_back \nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> pi;\nconst int N=2e4+5,K=4e5+5,M=1e5+5,D=20;\nnamespace SAM{\n\tint tot,lst,ch[K<<1][2],fa[K<<1],l[K<<1];\n\tvoid init(){\n\t\tfor(int i=1;i<=tot;++i) ch[i][0]=ch[i][1]=fa[i]=l[i]=0;\n\t\ttot=lst=1;\n\t}\n\tvoid insert(int c){\n\t\tint p=lst,np=++tot;lst=np;l[np]=l[p]+1;\n\t\tfor(;p&&!ch[p][c];p=fa[p]) ch[p][c]=np;\n\t\tif(!p) fa[np]=1;\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(l[q]==l[p]+1) fa[np]=q;\n\t\t\telse{\n\t\t\t\tint nq=++tot;\n\t\t\t\tch[nq][0]=ch[q][0],ch[nq][1]=ch[q][1],fa[nq]=fa[q],l[nq]=l[p]+1;\n\t\t\t\tfor(;p&&ch[p][c]==q;p=fa[p]) ch[p][c]=nq;\n\t\t\t\tfa[q]=fa[np]=nq; \n\t\t\t}\n\t\t}\n\t}\n\tint c[K],p[K<<1],mx[K<<1],mn[K<<1];\n\tvoid prework(int len,vector<int> &f){\n\t\tfor(int i=0;i<=len;++i) c[i]=0;\n\t\tfor(int i=1;i<=tot;++i) ++c[l[i]],f.pk(l[i]),mn[i]=l[i];\n\t\tfor(int i=1;i<=len;++i) c[i]+=c[i-1];\n\t\tfor(int i=1;i<=tot;++i) p[c[l[i]]--]=i;\n\t}\n\tvoid setmin(){\n\t\tfor(int i=1;i<=tot;++i) mn[i]=l[i];\n\t}\n\tvoid match(string &s,vector<int> &f){\n\t\tfor(int i=1;i<=tot;++i)\tmx[i]=0;\n\t\tint mxlen=0,cur=1; \n\t\tfor(int i=0;i<s.length();++i){\n\t\t\tint c=s[i]-'0';\n\t\t\tfor(;cur&&!ch[cur][c];cur=fa[cur],mxlen=l[cur]) ;\n\t\t\tif(!cur) cur=1,mxlen=0;\n\t\t\telse cur=ch[cur][c],++mxlen;\n\t\t\tmx[cur]=max(mx[cur],mxlen);\n\t\t}\n\t\tfor(int i=tot;i;--i){\n\t\t\tmn[p[i]]=min(mn[p[i]],mx[p[i]]);\n\t\t\tif(fa[p[i]]&&mx[p[i]])mx[fa[p[i]]]=max(mx[fa[p[i]]],l[fa[p[i]]]); \n\t\t}\n\t\tfor(int i=1;i<=tot;++i) f.pk(mn[i]);\n\t}\n}\nstruct Query{\n\tint l,r,id;\t\n}q[M],t[M];\nint n,m,lg[N],ans[M];\nstring s[N]; \nvector<int> tl[N],tr[N];\nint merge(vector<int> &A,vector<int> &B){\n\tint ret=0;\n\tfor(int i=0;i<A.size();++i) ret=max(ret,min(A[i],B[i]));\n\treturn ret;\n}\nvoid solve(int l,int r,int ll,int rr){\n\tif(l>r||ll>rr) return ;\n\tif(l==r){\n\t\tfor(int i=ll;i<=rr;++i) ans[q[i].id]=s[l].length();\n\t\treturn ;\n\t}\n\tint mid=0,rep=max(1.0,lg[r-l+1]*0.7);\n\twhile(rep--){\n\t\tint t=l+rand()%(r-l+1);\n\t\tif(!mid||s[t].length()<s[mid].length()) mid=t; \n\t}\n\tSAM::init();\n\tfor(int i=0;i<s[mid].length();++i) SAM::insert(s[mid][i]-'0');\n\ttl[0].clear();SAM::prework(s[mid].length(),tl[0]);\n\tfor(int i=mid-1;i>=l;--i) tl[mid-i].clear(),SAM::match(s[i],tl[mid-i]);\n\tSAM::setmin();for(int i=mid+1;i<=r;++i) tr[i-mid].clear(),SAM::match(s[i],tr[i-mid]);\n\tint p1=ll,p2=rr;\n\tfor(int i=ll;i<=rr;++i) t[i]=q[i];\n\tfor(int i=ll;i<=rr;++i)\n\t\tif(t[i].r<=mid) q[p1++]=t[i];\n\t\telse if(t[i].l>mid) q[p2--]=t[i];\n\t\telse ans[t[i].id]=merge(tl[mid-t[i].l],tr[t[i].r-mid]);\n\tsolve(l,mid,ll,p1-1),solve(mid+1,r,p2+1,rr);\n} \nint main(){\n\tsrand(19260817);\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i) cin>>s[i];\n\tfor(int i=1;i<=m;++i) cin>>q[i].l>>q[i].r,q[i].id=i;\n\tlg[0]=-1;\n\tfor(int i=1;i<=n;++i) lg[i]=lg[i>>1]+1;\n\tsolve(1,n,1,m);\n\tfor(int i=1;i<=m;++i) cout<<ans[i]<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1599968273,
        "uid": 118092,
        "name": "\u9752\u541b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5576 \u3010[CmdOI2019]\u53e3\u5934\u7985\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/LaoMang-no-blog/p/16454997.html)\n\n---\n\n[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/P5576)\n\n\u4e00\u9053\u7efc\u5408\u6027\u76f8\u5f53\u5f3a\u7684\u9898\u76ee\uff0c\u7528\u5230\u4e86\u8bb8\u591a\u7b97\u6cd5\u3002\n\n\u9996\u5148\u770b\u5230\u516c\u5171\u5b50\u4e32\u53ef\u4ee5\u60f3\u5230\u5e7f\u4e49 SAM\uff0c\u5148\u5efa\u51fa\u5e7f\u4e49 SAM\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u5904\u8bb0\u5f55\u5b83\u88ab\u90a3\u4e9b\u4e32\u8986\u76d6\u8fc7\uff0c\u5f53\u8be2\u95ee $[l,r]$ \u65f6\uff0c\u5373\u67e5\u627e**\u81f3\u5c11**\u88ab $[l,r]$ \u533a\u95f4\u5185\u6240\u6709\u4e32\u8986\u76d6\u7684\u8282\u70b9\u7684 $\\mathrm{len}$ \u7684\u6700\u5927\u503c\uff0c\u95ee\u9898\u5c31\u662f\u5904\u7406\u6bcf\u4e2a\u5b57\u4e32\u88ab\u90a3\u4e9b\u533a\u95f4\u8986\u76d6\u4ee5\u53ca\u5feb\u901f\u67e5\u8be2\u3002\n\n\u56de\u5fc6\u6211\u4eec\u5efa\u5e7f\u4e49 SAM \u7684\u8fc7\u7a0b\uff0c\u4e00\u5171\u5206\u4e3a\u4e24\u6b65\uff0c\u9996\u5148\u662f\u5efa\u51fa\u5b57\u5178\u6811\uff0c\u7136\u540e\u518d\u8fde\u63a5 $\\textrm{fail}$\uff0c\u8003\u8651\u5728\u8fd9\u4e24\u90e8\u5206\u4e2d\u5206\u522b\u5904\u7406\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a `set` \u7528\u7c7b\u4f3c\u73c2\u6735\u8389\u6811\u7684\u65b9\u6cd5\u7ef4\u62a4\u533a\u95f4\u96c6\u5408\uff0c\u6b64\u65f6\u63d2\u5165\u5355\u4e2a\u533a\u95f4\u5e76\u5b8c\u6210\u5408\u5e76\u53ef\u4ee5\u505a\u5230\u5747\u644a $\\mathcal O\\left(\\log n\\right)$\uff0c\u5728\u5efa\u5b57\u5178\u6811\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7ed9\u6240\u6709\u7684\u5b57\u5178\u6811\u4e2d\u7684\u8282\u70b9\u7ef4\u62a4\u597d\uff0c\u4ee5\u4fbf\u6211\u4eec\u4e0b\u4e00\u6b65\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O\\left(\\sum|S|\\log n\\right)$\u3002\n\n\u4e0b\u4e00\u6b65\u5c31\u662f\u5efa $\\mathrm{fail}$ \u6307\u9488\uff0c\u76f4\u63a5\u8fb9\u5efa\u8fb9\u7ef4\u62a4\u663e\u7136\u4e0d\u592a\u5bf9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u4e2a\u70b9\u88ab\u8986\u76d6\u7684\u533a\u95f4\u662f $\\mathrm{fail}$ \u6811\u7684\u5b50\u5b59\u53ca\u81ea\u5df1\u7684\u533a\u95f4\u5e76\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u628a $\\mathrm{fail}$ \u6307\u9488\u5168\u90e8\u5efa\u597d\uff0c\u7136\u540e\u6cbf\u53f6\u5b50\u5230\u6839\u81ea\u5e95\u5411\u4e0a\u62d3\u6251\u7ef4\u62a4\uff0c\u4e00\u822c\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4f46\u662f\u8fd9\u91cc\u524d\u9762\u7528\u7684\u662f\u73c2\u6735\u8389\u6811\uff0c\u4e14\u6b64\u5904\u662f\u8981\u53d6\u51fa\u6240\u6709\u7684\u533a\u95f4\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0d\u597d\u7ef4\u62a4\uff0c\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5373\u6bcf\u6b21\u5c06\u5c0f\u7684\u5f80\u5927\u7684\u5408\u5e76\uff0c\u65e0\u975e\u4f1a\u7834\u574f\u513f\u5b50\u7684\u96c6\u5408\uff0c\u4e4b\u540e\u5904\u7406\u7684\u65f6\u5019\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u65e0\u6240\u8c13\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\u662f\u8001\u5957\u8def\uff0c\u6bcf\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u4e00\u6b21\u8d21\u732e\u5c31\u4f1a\u8ba9\u6240\u5728\u96c6\u5408\u5927\u5c0f\u7ffb\u500d\uff0c\u6ca1\u51e0\u6b21\u5c31\u5230\u4e0a\u754c\u4e86\uff0c\u5982\u679c\u5199 Splay \u65f6\u95f4\u590d\u6742\u5ea6\u4f3c\u4e4e\u80fd\u538b\u5230 $\\mathcal O\\left(\\sum|S|\\log n\\right)$\uff0c\u4f46\u662f\u56e0\u4e3a\u63d2\u5165\u7684\u64cd\u4f5c\u5173\u7cfb\u5230\u533a\u95f4\u5408\u5e76\uff0c\u76f4\u63a5\u7528 `set` \u66f4\u52a0\u7b80\u5355\uff0c\u6240\u4ee5\u7528 `set` \u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O\\left(\\sum|S|\\log^2n\\right)$\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u51b3\u53e6\u4e00\u4e2a\u96be\u9898\uff0c\u5373\u5feb\u901f\u67e5\u8be2\uff0c\u8003\u8651\u5c06\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5c06\u6240\u6709\u8be2\u95ee\u6309\u5de6\u7aef\u70b9\u653e\u5728\u7ebf\u6bb5\u6811\u53f6\u5b50\u7ed3\u70b9\u4e0a\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u6240\u6709\u8be2\u95ee\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u5e7f\u4e49 SAM \u4e0a\u81ea\u5e95\u5411\u4e0a\u7ef4\u62a4\u533a\u95f4\u96c6\u5408\u7684\u8fc7\u7a0b\u4e2d $\\mathrm{len}$ \u5355\u8c03\u9012\u51cf\uff0c\u5373\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u5305\u542b\u4e86\u4e00\u4e2a\u8be2\u95ee\uff0c\u5219\u8fd9\u4e2a\u8be2\u95ee\u53ef\u4ee5\u76f4\u63a5\u88ab\u56de\u7b54\uff0c\u57fa\u4e8e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6bcf\u6b21\u6211\u4eec\u5904\u7406\u5b8c\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u96c6\u5408\uff0c\u628a\u6bcf\u4e2a\u533a\u95f4\u6254\u5230\u7ebf\u6bb5\u6811\u4e0a\u8be2\u95ee\uff0c\u6211\u4eec\u4e0a\u9762\u7684\u7ef4\u62a4\u65b9\u6cd5\u4fdd\u8bc1\u4e86\u5728\u7ebf\u6bb5\u6811\u4e0a\u5f53\u524d\u533a\u95f4\u88ab\u8be2\u95ee\u533a\u95f4\u5305\u542b\u540e\uff0c\u53ea\u6709\u5f53\u5b50\u6811\u5185\u8be2\u95ee\u53f3\u7aef\u70b9\u6700\u5c0f\u503c\u6bd4\u8be2\u95ee\u533a\u95f4\u53f3\u7aef\u70b9\u5c0f\u65f6\u624d\u5f80\u4e0b\u7ee7\u7eed\u8d70\uff0c\u6bcf\u6b21\u8d70\u5230\u53f6\u5b50\u4e00\u5b9a\u80fd\u56de\u7b54\u81f3\u5c11\u4e00\u4e2a\u8be2\u95ee\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u4fdd\u8bc1\u3002\n\n\u6700\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal O\\left(\\sum|S|\\log^2n+m\\log n\\right)$\uff0c\u8bb0\u5f97\u56de\u6536 `set` \u7684\u7a7a\u95f4\uff0c\u7a0d\u5fae\u6709\u70b9\u5361\u5e38\uff0c\u5f00\u4e86 O2 \u540e\u53ef\u8fc7\u3002\n\n[\u4ee3\u7801](https://www.cnblogs.com/LaoMang-no-blog/p/16454997.html)",
        "postTime": 1657180651,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "[CmdOI2019] \u53e3\u5934\u7985 \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\uff1a\n\n1.\u76ee\u524d\u6ca1\u6709\u8fdb\u884c\u4ee3\u7801\u5b9e\u73b0\uff0c\u6240\u6709\u5185\u5bb9\u5747\u662f\u53e3\u80e1\uff0c\u5982\u6709\u9519\u8bef\u6216\u8005\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\u70e6\u8bf7\u6307\u51fa\uff0c\u8c22\u8c22\uff01\n\n2.\u7531\u4e8e\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4f1a\u540c\u65f6\u51fa\u73b0\u201c\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u201d\uff0c\u201cparent \u6811\u4e0a\u7684\u7ed3\u70b9\u201d\u7b49\u591a\u79cd\u70b9\uff0c\u4e3a\u4fbf\u4e8e\u7406\u89e3\uff0c\u7ef4\u62a4\u8fde\u7eed\u6bb5\u7684\u7ebf\u6bb5\u6811\u7684\u70b9\u7edf\u79f0\u201c\u8282\u70b9\u201d\uff0cparent \u6811\u7684\u70b9\u7edf\u79f0\u201c\u7ed3\u70b9\u201d\u3002\n\n\n3.\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u5bf9\u5e94/\u8868\u793a\u7684\u533a\u95f4\u6307\u7ebf\u6bb5\u6811\u51fd\u6570\u53c2\u6570\u4e2d\u7684 $l$\uff0c$r$\u3002\n\n\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u6b21\u8be2\u95ee\u533a\u95f4\u6700\u957f\u516c\u5171\u5b50\u4e32\u3002\n\n\u4e66\u63a5[\u4e0a\u56de](https://www.mina.moe/archives/13606)\uff0c\u4e0a\u4e00\u6b21\u901a\u8fc7\u5229\u7528\u79bb\u7ebf\u7684\u6027\u8d28\u6709\u4e86\u4e00\u4e2a $O(len\\,\\log n\\,\\log len\\,+\\,q\\,\\log n)$ \u7684\u505a\u6cd5\uff0c\u56de\u5fc6\u4e00\u4e0b\u662f\u600e\u4e48\u505a\u7684\uff1a\n\n1.\u901a\u8fc7 SAM \u5c06\u8fd9\u9053\u9898\u8f6c\u5316\u4e3a\u6570\u636e\u7ed3\u6784\u9898\uff1a\u4e00\u68f5\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u6709\u989c\u8272\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u4fdd\u8bc1\u4efb\u4f55\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u5927\u4e8e\u7236\u4eb2\u8282\u70b9\u7684\u6743\u503c\uff0c\u6bcf\u6b21\u8be2\u95ee\u5b50\u6811\u5185\u5305\u542b $[l,r]$ \u6240\u6709\u989c\u8272\u7684\u6240\u6709\u8282\u70b9\u4e2d\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n2.\u60f3\u5230\u53ef\u4ee5\u6309\u7167\u8282\u70b9\u6743\u503c\u5927\u5c0f\u5408\u5e76\u513f\u5b50\uff0c\u7ef4\u62a4\u989c\u8272\u8fde\u7eed\u6bb5\uff0c\u5f53\u4ea7\u751f\u65b0\u7684\u8fde\u7eed\u6bb5\u65f6\u67e5\u8be2\u6709\u6ca1\u6709\u53ef\u56de\u7b54\u7684\u8be2\u95ee\u3002\n\n\u4e4b\u6240\u4ee5\u7528\u4e86\u4e24\u4e2a $\\log$\uff0c\u74f6\u9888\u5728\u4e8e\u7ef4\u62a4\u8fde\u7eed\u6bb5\u7528\u7684\u662f set + \u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u60f3\u4e00\u60f3\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u53ef\u4ee51\u4e2a $\\log$ \u7684\u7ef4\u62a4\u76f8\u5173\u4fe1\u606f\uff1f\n\n\u4e0d\u5982\u8bd5\u8bd5\u7ebf\u6bb5\u6811\u5408\u5e76\uff1f( \u8fd9\u91cc\u662f\u53d7\u5230\u4e86 [NOI2018\u4f60\u7684\u540d\u5b57](https://www.luogu.com.cn/problem/P4770) \u7684\u542f\u53d1 )\n\n\u5982\u679c\u53ef\u4ee5\u505a\u5230\u521a\u597d\u5728\u4ea7\u751f\u65b0\u7684\u8fde\u7eed\u6bb5\u65f6\u53bb\u67e5\u627e\u6709\u6ca1\u6709\u65b0\u7684\u53ef\u56de\u7b54\u8be2\u95ee\uff0c\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u5b9e\u73b01\u4e2a $\\log$ \u7684(\u67e5\u8be2\u53ef\u56de\u7b54\u8be2\u95ee\u7684\u90e8\u5206\u53ef\u4ee5\u770b[\u8fd9\u9898\u6d1b\u8c37\u9898\u89e3\u4e2d\u7528\u6237\u201cxtx1092515503\u201d\u7684\u6587\u7ae0](https://www.luogu.com.cn/problem/solution/P5576?orderBy=weight&page=1) \uff0c\u8bb2\u7684\u6bd4\u8f83\u6e05\u6670\uff0c\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u5ba2\u4e2d\u53e3\u80e1\u7684\u90a3\u4e2a\u6709\u95ee\u9898)\u3002\n\n\u8fd9\u91cc\u53c8\u6709\u4e00\u4e2a\u7ecf\u5178\u5904\u7406\u65b9\u5f0f\uff0c\u53d7[\u3010\u7f8e\u56e2\u676f2020\u3011\u534a\u524d\u7f00\u8ba1\u6570](https://uoj.ac/contest/53/problem/523) \u542f\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u5728\u5b83\u7684\"\u6700\u540e\u51fa\u73b0\u65f6\u523b\"\u8ba1\u7b97 ( \u8fd9\u91cc\u7684\"\u6700\u540e\u51fa\u73b0\u65f6\u523b\"\u6bd4\u8f83\u62bd\u8c61\uff0c\u4e5f\u8bb8\u770b\u5230\u6700\u540e\u4f1a\u5e2e\u52a9\u7406\u89e3 )\uff0c\u5177\u4f53\u5230\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u8003\u8651\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u7eed\u6bb5\uff0c\u6211\u4eec\u4ee4\u201c\u7ebf\u6bb5\u6811\u4e0a\u80fd\u8986\u76d6\u6574\u4e2a\u8fde\u7eed\u6bb5\u7684\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u201d\u4e3a $x$\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n1.\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u8de8\u8fc7 $x$ \u5bf9\u5e94\u533a\u95f4\u7684\u6b63\u4e2d\u95f4 ( \u5426\u5219 $x$ \u7684\u5de6 / \u53f3\u513f\u5b50\u80fd\u8986\u76d6\u6574\u4e2a\u8fde\u7eed\u6bb5 )\u3002\n\n2.\u5bf9\u4e8e\u6811\u4e0a\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5b50\u6811\u5185\u7684\u6240\u6709\u8fde\u7eed\u6bb5\uff0c\u5bf9\u5e94\u7684 $x$ \u5404\u4e0d\u76f8\u540c ( \u75311\u53ef\u5f97 )\u3002\n\n\u79f0 $x$ \u548c\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u201c\u5bf9\u5e94\u201d\uff0c\u76f8\u5f53\u4e8e\u6784\u9020\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u548c\u8fde\u7eed\u6bb5\u7684\u53cc\u5c04\u3002\n\n\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u80fd\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\u7684\u7ef4\u62a4\u8fde\u7eed\u6bb5\u7684\u7ebf\u6bb5\u6811\u7684\u6240\u6709\u8282\u70b9\uff0c\u7ef4\u62a4\u8de8\u8fc7\u5176\u4e2d\u70b9\u7684\u8fde\u7eed\u6bb5\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u6240\u6709\u8fde\u7eed\u6bb5\u7684\u4fe1\u606f\u3002\n\n\u8fd9\u4e2a\u4fe1\u606f\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7 push_up \u6765\u7ef4\u62a4\u3002\u53ea\u8981\u8bb0 $f(id,0/1)$ \u8868\u793a\u7ebf\u6bb5\u6811\u8282\u70b9 $id$ \u8868\u793a\u533a\u95f4\u7684\u6700\u957f\u524d\u7f00\u8fde\u7eed\u6bb5\u548c\u6700\u957f\u540e\u7f00\u8fde\u7eed\u6bb5\u3002\n\n\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1.\u4e00\u4e2a\u8fde\u7eed\u6bb5\u5728\u5176\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u4e2d\u65e2\u4e0d\u662f\u524d\u7f00\u4e5f\u4e0d\u662f\u540e\u7f00\uff0c\u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5408\u5e76\u904d\u5386\u5230\u8fd9\u4e2a\u8282\u70b9\u65f6\u67e5\u8be2\u4e00\u4e0b\u8de8\u8fc7\u5176\u4e2d\u70b9\u7684\u8fde\u7eed\u6bb5\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef\uff0c\u5982\u679c\u548c\u5408\u5e76\u4e4b\u524d\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u90fd\u4e0d\u76f8\u540c ( \u8bf4\u660e\u4ea7\u751f\u4e86\u65b0\u7684\u8fde\u7eed\u6bb5 )\uff0c\u5c31\u53bb\u67e5\u8be2\u6709\u65e0\u65b0\u7684\u53ef\u56de\u7b54\u8be2\u95ee\u3002\n\n2.\u4e00\u4e2a\u8fde\u7eed\u6bb5\u5728\u5176\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u4e2d\u662f\u524d\u7f00\u6216\u540e\u7f00\uff0c\u5047\u8bbe\u662f\u524d\u7f00\uff0c\u540e\u7f00\u540c\u7406\u3002\u8fd9\u65f6\u5982\u679c\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u8de8\u8d8a\u4e2d\u70b9\u524d\u7f00\u8be2\u95ee\u590d\u6742\u5ea6\u4f1a\u591a\u51fa\u4e00\u4e2a $\\log$\u3002\u8fd9\u65f6\u8003\u8651\u5230\uff0c\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u5b58\u5728\u4e00\u5b9a\u4f1a\u5bfc\u81f4\u5728\u5176\u5bf9\u5e94\u7ebf\u6bb5\u6811\u8282\u70b9\u67d0\u4e2a\u7956\u5148 ( \u5176\u5b9e\u5c31\u662f\u6700\u8fd1\u7684\u662f\u5176\u7236\u4eb2\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u7956\u5148 ) \u7684\u5de6\u513f\u5b50\u7684\u540e\u7f00\u6700\u957f\u8fde\u7eed\u6bb5\u957f\u5ea6\u662f0( \u5426\u5219\u8fdd\u80cc\u5047\u8bbe )\uff0c\u53f3\u513f\u5b50\u524d\u7f00\u6700\u957f\u8fde\u7eed\u6bb5\u5c31\u662f\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u3002\u5b9e\u73b0\u7684\u65f6\u5019\u5728\u8fd9\u4e2a\u8282\u70b9\u8fdb\u884c\u60c5\u51b51\u7684\u8003\u8651\u5373\u53ef\u3002\u6216\u8005\u5728\u4e4b\u524d\u5b9a\u4e49\u5bf9\u5e94\u65f6\u5c31\u628a\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u5bf9\u5e94\u7ebf\u6bb5\u6811\u8282\u70b9\u4fee\u6539\u4e3a\u8fd9\u91cc\u63d0\u5230\u7684\u8fd9\u4e2a\u201c\u7956\u5148\u201d\u4e5f\u884c\uff0c\u4ecd\u7136\u662f\u6ee1\u8db3\u53cc\u5c04\u7684\u3002\n\n3.\u65e2\u662f\u524d\u7f00\u4e5f\u662f\u540e\u7f00\uff0c\u663e\u7136\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u989c\u8272\u5728\u5f53\u524d\u5b50\u6811\u5185\u90fd\u5b58\u5728\uff0c\u8fd9\u65f6\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u6837\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u8868\u793a\u533a\u95f4\u8fdb\u884c\u8be2\u95ee\uff0c\u8fd9\u90e8\u5206\u603b\u8be2\u95ee\u6b21\u6570\u4e0d\u8d85\u8fc7\u7ebf\u6bb5\u6811\u603b\u7ed3\u70b9\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f $2n$ \u7684\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u90e8\u5206\uff1aparent \u6811\u4e0a\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u63d2\u5165\u4e00\u79cd\u989c\u8272\uff0c\u603b\u63d2\u5165\u6b21\u6570\u4e0d\u8d85\u8fc7 $O(len)$\u3002\u5408\u5e76\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(len \\, \\log n)$\u3002\u5728\u5408\u5e76\u5230\u67d0\u4e2a\u8282\u70b9\u65f6\u540c\u65f6\u5904\u7406\u8fde\u7eed\u6bb5\u7684\u53d8\u5316(\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u64cd\u4f5c\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7\u5e38\u6570\u6b21)\uff0c\u4e0d\u5f71\u54cd\u590d\u6742\u5ea6\u3002\n\n\u5e7f\u4e49 SAM\uff1a$O(\\lvert \\Sigma \\lvert \\, len)$\u3002\n\n\u67e5\u8be2\u8be2\u95ee\uff1a $O(q\\,\\log n \\, + \\, len\\, \\log n\\, +n\\,\\log \\, n)$\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a$O(\\lvert \\Sigma \\lvert \\, len\\,+\\,q\\,\\log n \\, + \\, len\\, \\log n\\, +n\\,\\log \\, n)$\u3002\n",
        "postTime": 1646769611,
        "uid": 122846,
        "name": "\u6c38\u65e0\u5c9b",
        "ccfLevel": 6,
        "title": "P5576 [CmdOI2019]\u53e3\u5934\u7985"
    },
    {
        "content": "\u611f\u89c9\u5f88\u591a\u5b57\u7b26\u4e32\u95ee\u9898\u8f6c\u5316\u5b8c\u5c31\u53d8 DS \u9898\u4e86\n\n\u5148\u7279\u5224\u6389 $l = r$ \u7684\u60c5\u51b5\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u628a\u6240\u6709\u4e32\u62fc\u5728\u4e00\u8d77\uff0c\u4e2d\u95f4\u52a0\u4e0a\u5f7c\u6b64\u4e0d\u540c\u7684\u5206\u5272\u7b26\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u4e32\u5efa SAM\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff0c\u7ed9\u4e32 $i$ \u5bf9\u5e94\u7684\u6240\u6709\u7ec8\u6b62\u8282\u70b9\u67d3\u4e0a\u989c\u8272 $i$\uff0c\u8fd9\u6837\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\n\n\u7ed9\u5b9a\u4e00\u9897\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u989c\u8272\u548c\u6743\u503c\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u7ed9\u51fa $l,r$\uff0c\u8ba9\u4f60\u627e\u4e00\u4e2a\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u6ee1\u8db3\u5176\u5b50\u6811\u5185\u5305\u542b $[l,r]$ \u8fd9\u4e9b\u989c\u8272\n\n\u8003\u8651\u626b\u63cf $r$\uff0c\u52a8\u6001\u7ef4\u62a4\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f $x$\uff0c\u6ee1\u8db3\u5176\u5b50\u6811\u5185\u5305\u542b $[x,r]$ \u7684\u5168\u90e8\u989c\u8272\n\n\u7136\u540e\u8003\u8651\u52a0\u5165 $r$ \u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u4e86\u6240\u6709\u989c\u8272\u4e3a $r$ \u7684\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u8282\u70b9\u7684\u5e76\u4ee5\u5916\uff0c\u5176\u4ed6\u8282\u70b9\u7684 $x$ \u90fd\u4f1a\u53d8\u4e3a $r + 1$\uff0c\u5176\u4ed6\u4e0d\u5f71\u54cd\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u6811\u5256\u4e00\u4e0b\uff0c\u8fd9\u6837\u8def\u5f84\u76f4\u63a5\u8f6c\u5316\u4e3a\u533a\u95f4\uff0c\u53d8\u4e3a $r+1$ \u7684\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\n\n\u8fd9\u6837\u95ee\u9898\u53c8\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e00\u4e2a\u6743\u503c\u548c\u4e00\u4e2a\u65f6\u95f4\uff0c$n \\log n$ \u6b21\u628a\u4e00\u4e2a\u533a\u95f4\u7684\u65f6\u95f4\u4fee\u6539\u4e3a $x$\uff0c$q$ \u6b21\u67e5\u8be2\u65f6\u95f4 $\\le l$ \u7684\u4f4d\u7f6e\u4e2d\uff0c\u6743\u503c\u7684\u6700\u5927\u503c\n\n\u770b\u8d77\u6765\u8fd8\u662f\u6bd4\u8f83\u56f0\u96be\uff0c\u4f46\u6ce8\u610f\u5230\u5168\u662f\u533a\u95f4\u63a8\u5e73\uff0c\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u7528\u989c\u8272\u6bb5\u5747\u644a\uff0c\u663e\u7136\u4e00\u4e2a\u540c\u8272\u6bb5\u4e2d\u53ea\u8981\u4fdd\u7559\u6743\u503c\u6700\u5927\u7684\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u540e\u6211\u4eec\u518d\u7528\u4e00\u9897\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4 $\\max$ \u4e4b\u7c7b\u7684\uff0c\u5c31\u505a\u5b8c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(L \\log^2 n + q \\log n)$\uff0c$L$ \u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u548c\n\n\u5199\u4e86\u4efd\u4ee3\u7801\uff0c\u4f46\u662f\u56e0\u4e3a\u6ee5\u7528 STL \u4e4b\u7c7b\u7684\u88ab\u5361\u5e38\u4e86\uff0c\u5c31\u4e0d\u653e\u4e0a\u6765\u4e86\uff08\n\n\u603b\u4e4b\u5c31\u662f\u8bf4\u5b98\u65b9\u9898\u89e3\u91cc\u7684\u89e3\u6cd5\u4e8c\u53ef\u4ee5\u505a\u5230 poly log",
        "postTime": 1631533487,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "P5576 \u9898\u89e3"
    },
    {
        "content": "\u732b\u6811\u597d\u9898\uff01\uff011\n\n## Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u6a21\u5f0f\u4e32 $s_i$ \uff0c $q$ \u4e2a\u8be2\u95ee\uff0c\u6c42\u533a\u95f4\u5185\u6240\u6709\u5b57\u7b26\u4e32\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002\n\n$n \\leq 2 \\cdot 10 ^ 4,\\ \\ q\\leq 10 ^ 5,\\ \\ \\sum s_i \\leq 4 \\cdot 10 ^ 5$\n\n## Analysis\n\n\u533a\u95f4 [LCS2](https://www.luogu.com.cn/problem/SP1812 \"LCS2\") \uff0c\u5e76\u4e14\u6ca1\u6709\u4fee\u6539\u3002\n\n## Solution\n\n\u770b\u5230 LCS2 \u7684\u505a\u6cd5\uff0c\u597d\u50cf\u8fd9\u5e76\u4e0d\u592a\u80fd\u5feb\u901f\u5408\u5e76\uff0c\u4f3c\u4e4e\u5c31\u7528\u4e0d\u4e86\u7ebf\u6bb5\u6811\u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u53d1\u73b0\u6ca1\u6709\u4fee\u6539\u3002\n\n\u8003\u8651\u732b\u6811\u3002\n\n\u90a3\u5c31\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4 $[l,\\ r]$ \u91cc\u7684\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u4ee5\u4e2d\u70b9\u7684\u4e32\u4e3a\u57fa\u51c6\u4e32\uff0c\u5411\u4e24\u8fb9\u5904\u7406 LCS2 \u4e2d\u7684\u6211\u4eec\u8981\u5904\u7406\u7684\u524d\u7f00\u7b54\u6848\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4ee5\u4e2d\u70b9\u7684\u4e32\u4e3a\u57fa\u51c6\u4e32\u7684\u8bdd\uff0c\u4e00\u65e6\u5206\u5230\u4e86\u4e00\u4e2a\u6bd4\u8f83\u957f\u7684\u4e32\u65f6\u95f4\u4f1a\u9000\u5316\u7684\u6709\u70b9\u4e25\u91cd\uff0c\u6240\u4ee5\u53c8\u8981\u6709\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u3002\n\n\u500d\u589e\u5206\u6cbb\uff0c\u89c4\u5b9a\u4e00\u4e2a\u9608\u503c $x$ \uff0c\u628a\u533a\u95f4\u5185\u6240\u6709\u957f\u5ea6\u5728 $2^{x}$ \u5230 $2 ^ {x + 1}$ \u91cc\u7684\u6240\u6709\u5b57\u7b26\u4e32\u627e\u51fa\u6765\uff0c\u7136\u540e\u518d\u53d6\u4e2d\u70b9\u7684\u4e32\u4f5c\u4e3a\u57fa\u51c6\u4e32\u53bb\u7b97\u3002\n\n\u7136\u540e\u7ee7\u7eed\u5206\u6cbb\u3002\n\n\u770b\u8d77\u6765\u5f88\u65f6\u95f4\u5f88\u7384\u5b66\uff0c\u4f46\u662f\u56e0\u4e3a\u6709 $\\sum len$ \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u4e2a\u90e8\u5206\u7684\u4e32\u6570\u91cf\u662f $\\frac{\\sum len}{2 ^ x}$ \u7684\uff0c\u5e76\u4e14\u6574\u4e2a\u533a\u95f4\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u8d21\u732e $\\log n$ \u6b21\uff0c\u57fa\u51c6\u4e32\u957f\u5ea6\u662f $2 ^ x$ \uff0c\u6240\u4ee5\u603b\u4f53\u65f6\u95f4\u662f $O(2 ^ x \\cdot \\frac{\\sum len}{2 ^ x} \\cdot \\log n) = O(\\sum len \\cdot \\log n)$ \u7684\uff0c\u603b\u5171 $\\log \\sum len$ \u5c42\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u5c31\u662f $O(\\sum len \\cdot \\log n \\cdot \\log \\sum len)$ \u3002\n\n\u597d\u529e\u4e86\uff0c\u4f46\u662f\u7a7a\u95f4\u4e0d\u5141\u8bb8\uff0c\u6240\u4ee5\u6539\u4e00\u4e0b\uff0c\u6539\u6210\u732b\u6811\u5206\u6cbb\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u5728\u9884\u5904\u7406\u732b\u6811\u7684\u65f6\u5019\u5c31\u8981\u7b97\u597d\u5bf9\u5e94\u7684\u67e5\u8be2\u7b54\u6848\u3002\n\n\u76f4\u63a5\u6bcf\u6b21\u627e\u5bf9\u5e94\u7684\u533a\u95f4\u8ba1\u7b97\u57fa\u51c6\u4e32\u7684\u7b54\u6848\u5c31\u884c\u4e86\uff0c\u770b\u8d77\u6765\u5f88\u66b4\u529b\uff0c\u6240\u4ee5\u6765\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\uff1a\n\n\u6bcf\u4e2a\u533a\u95f4\u53ea\u4f1a\u88ab\u904d\u5386 $\\log n$ \u6b21\uff1b\n\n\u5176\u6b21\uff0c\u56de\u60f3\u732b\u6811\u67e5\u8be2\u7684\u505a\u6cd5\uff0c\u662f\u5bf9\u6240\u6709\u5de6\u7aef\u70b9\u5728\u5de6\u904d\u5386\u533a\u95f4\uff0c\u53f3\u7aef\u70b9\u5728\u53f3\u904d\u5386\u533a\u95f4\u7684\u533a\u95f4\u4eec\u6c42\u5f97\u7b54\u6848\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4e00\u4e2a\u533a\u95f4\u7684\u67e5\u8be2\u65f6\u95f4\u662f\u904d\u5386\u533a\u95f4\u7684\u57fa\u51c6\u4e32\u957f\u5ea6\uff08\u56e0\u4e3a\u662f\u5bf9\u4e8e\u57fa\u51c6\u4e32\u6bcf\u4e2a\u4f4d\u7f6e\u7b54\u6848\u6c42 $\\max$ \uff09\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u57fa\u51c6\u4e32\u5728\u8fd9\u4e2a\u904d\u5386\u533a\u95f4\u4e2d\u662f\u5c5e\u4e8e\u957f\u5ea6\u6700\u5c0f\u7684\u51e0\u4e2a\u5b57\u7b26\u4e32\u4e4b\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u9ed8\u8ba4\u4e3a $\\min_{i = l} ^ r len(s_i)$ \u3002\u6240\u4ee5\u52a0\u5165\u533a\u95f4\u6ca1\u6709\u91cd\u590d\u7684\u8bdd\uff0c\u8981\u6c42\u603b\u65f6\u95f4\u5c3d\u53ef\u80fd\u5927\u7684\u8bdd\uff08\u9700\u8981\u7a0d\u5fae\u610f\u4f1a\u4e00\u4e0b\uff09\uff0c\u8bbe\u603b\u64cd\u4f5c\u6570\u662f $q$ \uff0c\u5927\u6982\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5f0f\u5b50\uff08\u9ed8\u8ba4 $t_i$ \u662f $s_i$ \u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff09\uff1a\n\n$$\\sum_{i = 1} ^ {\\sqrt{q}} len(t_i) \\cdot i$$\n\n\u53c8\u56e0\u4e3a\u6709 $\\sum len$ \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u4e0a\u5f0f\u6700\u5927\u662f\u5728 $O(n \\cdot \\sqrt{q})$ \u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sum len \\cdot \\log n \\cdot \\log \\sum len + n \\cdot \\sqrt{q})$ \u3002\n\n## Code\n\n```cpp\n/*\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e4 + 10, M = 1e5 + 10, S = 3e6 + 10;\nint n, m, len[N], cnt, pos[N], p[M], k, ip[M], ans[M];\nchar sp[S], *str[N], *st = sp;\nint slen[S];\ninline int read() {\n\tchar ch = getchar();\n\tint s = 0, w = 1;\n\twhile (!isdigit(ch)) {if (ch == '-') w = -1; ch = getchar();}\n\twhile (isdigit(ch)) {s = (s << 3) + (s << 1) + (ch ^ 48); ch = getchar();}\n\treturn s * w;\n}\nstruct mdzz {int l, r;} q[M];\nstruct SAM_mdzz {int len, link, ch[2];} a[S];\nstruct SAM {\n\tint rt, las;\n\tinline void init() {rt = las = ++cnt; memset(a[cnt].ch, 0, sizeof(a[cnt].ch));}\n\tinline void SAM_stru(int c) {\n\t\tint cur = ++cnt, p = las;\n\t\tmemset(a[cur].ch, 0, sizeof(a[cur].ch));\n\t\tlas = cur;\n\t\ta[cur].len = a[p].len + 1;\n\t\twhile (p && !a[p].ch[c]) a[p].ch[c] = cur, p = a[p].link;\n\t\tif (!p) {a[cur].link = rt; return ;}\n\t\tint q = a[p].ch[c];\n\t\tif (a[p].len + 1 == a[q].len) {a[cur].link = q; return ;}\n\t\tint clo = ++cnt;\n\t\ta[clo] = a[q];\n\t\ta[clo].len = a[p].len + 1;\n\t\ta[q].link = a[cur].link = clo;\n\t\twhile (p && a[p].ch[c] == q) a[p].ch[c] = clo, p = a[p].link;\n\t}\n} s[N];\nstruct immortalCO {\n\t#define lson l, mid\n\t#define rson mid + 1, r\n\tint *f[N], *g;\n\tinline void solve(int it, int mid, int sig) {\n\t\tint v = s[it].rt, u = v, lth = 0;\n\t\tfor (int i = 0, c; i < len[mid]; ++i) {\n\t\t\tc = str[mid][i] - '0';\n\t\t\tif (!a[v].ch[c]) {\n\t\t\t\twhile (v != u && !a[v].ch[c]) v = a[v].link;\n\t\t\t\tlth = a[v].len;\n\t\t\t}\n\t\t\tif (a[v].ch[c]) v = a[v].ch[c], ++lth;\n\t\t\tf[it][i] = min(f[it + sig][i], lth);\n\t\t}\n\t}\n\tinline void build(int lim, int l, int r, int L, int R) {\n\t\tif (L > R) return ;\n\t\tint pk = 0, ik, mid;\n\t\twhile (2333) {\n\t\t\tfor (int i = l; i <= r; ++i) {\n\t\t\t\tif (len[i] <= lim) pos[++pk] = i;\n\t\t\t}\n\t\t\tif (pk) break;\n\t\t\tlim <<= 1;\n\t\t}\n\t\tmid = pos[(pk + 1) >> 1];\n\t\tg = slen;\n\t\tfor (int i = l; i <= r; ++i) {\n\t\t\tf[i] = g, g += len[mid] + 1;\n\t\t}//\n\t\tfor (int i = 0; i < len[mid]; ++i) f[mid][i] = i + 1;\n\t\tfor (int i = mid - 1; i >= l; --i) solve(i, mid, 1);\n\t\tfor (int i = mid + 1; i <= r; ++i) solve(i, mid, -1);\n\t\tpk = L - 1; ik = 0;\n\t\tfor (int i = L, u; i <= R; ++i) {\n\t\t\tu = p[i];\n\t\t\tif (q[u].r < mid) p[++pk] = u;\n\t\t\telse if (q[u].l > mid) ip[++ik] = u;\n\t\t\telse {\n\t\t\t\tint res = 0;\n\t\t\t\tfor (int j = 0; j < len[mid]; ++j) {\n\t\t\t\t\tres = max(res, min(f[q[u].l][j], f[q[u].r][j]));\n\t\t\t\t}\n\t\t\t\tans[u] = res;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= ik; ++i) p[i + pk] = ip[i];\n\t\tR = pk + ik;\n\t\tbuild(lim, l, mid - 1, L, pk); build(lim, mid + 1, r, pk + 1, R);\n\t}\n\t#undef lson\n\t#undef rson\n} ct;\nint main() {\n\tn = read(); m = read();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%s\", str[i] = st);\n\t\tlen[i] = strlen(str[i]);\n\t\ts[i].init();\n\t\tfor (int j = 0; j < len[i]; ++j)\n\t\t\ts[i].SAM_stru(str[i][j] - '0');\n\t\tst += len[i];//\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tq[i] = (mdzz) {read(), read()}; p[i] = i;\n\t}\n\tct.build(10, 1, n, 1, m);\n\tfor (int i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1647440598,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "[CmdOI2019]\u53e3\u5934\u7985 \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://blog.csdn.net/qq_42886072/article/details/105232088)\n# \u524d\u8a00\n\u6bd2\u7624\u9898 $and$ \u6bd2\u7624\u51fa\u9898\u4eba.\n\n\u65e0\u9650 $orz~~ cmd.$\n# \u524d\u7f6e\u77e5\u8bc6\n**\u5185\u5b58\u6c60\u5c0f\u6280\u5de7**:\u5f00\u4e00\u5927\u5757\u9759\u6001\u5185\u5b58,\u7136\u540e\u7528\u6307\u9488\u6807\u8bb0\u4f4d\u7f6e.\n\n(\u907f\u514d\u7528$vector$\u7b49\u5e38\u6570\u5de8\u5927\u7684$STL$).\n\n[**\u732b\u6811**](https://blog.csdn.net/qq_42886072/article/details/105200387):\u672c\u9898\u8fd0\u7528\u4e86\u7c7b\u4f3c\u7684\u601d\u60f3,\u4f46\u662f\u5e76\u6ca1\u6709\u7528\u7ebf\u6bb5\u6811.\n\n(\u6211\u79f0\u672c\u9898\u8fd0\u7528\u7684\u65b9\u6cd5\u4e3a\"**\u732b\u6811\u5206\u6cbb**).\n\n\u732b\u6811\u5206\u6cbb\u7684\u601d\u60f3:\n>\u628a\u533a\u95f4\u8be2\u95ee,\u8f6c\u5316\u4e3a\u4ee5\u4e2d\u95f4\u67d0\u4e2a\u72b6\u6001\u4e3a\u4e2d\u5fc3\u7684DP.\n>\u7ed3\u5408\u524d\u7f00/\u540e\u7f00\u6700\u503c,\u8fbe\u5230\u95ee\u9898\u7684\u8981\u6c42.\n\n# \u6b63\u9898\n\u8003\u8651\u66b4\u529b.\n\u5bf9\u4e8e$[l,r]$\u533a\u95f4,\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u4f4d\u7f6e$mid$.\n\n\u5b9a\u4e49$f[j]$\u8868\u793a$s[mid]$\u7684\u524d\u7f00$j$\u5728$s[l...r]$\u7684\u6700\u957f\u516c\u5171\u540e\u7f00.(\u5b50\u4e32\u4e00\u5b9a\u662f\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00)\n\n\u5bf9\u4e8e\u5176\u4ed6\u6240\u6709\u4f4d\u7f6e$i\\ne mid$,\u8ba9$s[mid]$\u5728$SAM[i]$\u4e0a\u8dd1,\u5047\u5982\u5df2\u52a0\u5165$j$\u4e2a\u5b57\u7b26,\u6210\u529f\u5339\u914d$len$\u4e2a\u540e\u7f00,\u90a3\u4e48$f[j]=min(f[j],len)$.\n\n\u6700\u540e$ans=\\max_{i=1}^{|s[mid]|} f[i]$.\n\n\n\u8bbe$len$\u4e3a\u603b\u5b57\u7b26\u6570,$S=s[mid]$.\n\u590d\u6742\u5ea6\u4e3a$O((r-l+1)|S|+len)$.\n\u663e\u7136,\u53d6\u8f83\u77ed\u7684\u6c42\u5f97\u66f4\u5feb.\n\n\u5f53\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u8be2\u95ee\u90fd\u662f\u8fd9\u6837\u5904\u7406,\u5b9e\u9645\u4e0a\u6211\u4eec\u5148\u5bf9$f$\u505a\u4ee5$mid$\u4e3a\u4e2d\u5fc3\u7684\u524d\u540e\u7f00\u5904\u7406,\u7136\u540e\u7528$O(|S|)$\u626b\u63cf\u6570\u7ec4\u5408\u5e76\u7b54\u6848.\n\n___\n\u6839\u636e\u4e0a\u9762\u7684\u601d\u60f3,\u6211\u4eec\u5148\u628a\u957f\u5ea6\u5c0f\u7684\u7528\u4e8e\u6c42\u89e3.\n\n\u6211\u4eec\u91c7\u53d6\u500d\u589e\u5206\u6cbb,\u6bcf\u6b21\u628a $\\le 2^x$ \u7684\u4e32\u7ed9 \u63d0\u53d6\u51fa\u6765\u505a\u8d21\u732e,\u4e4b\u540e$x++$.(\u8fd9\u6837\u7684\u597d\u5904\u5728\u4e8e,\u6bcf\u4e2a\u8be2\u95ee\u4ea7\u751f\u8d21\u732e\u7684$S$\u548c\u6700\u5c0f\u4e32\u7684\u5f88\u63a5\u8fd1)\n\n\n\u5355\u6b21(\u4e00\u4e2a$x$)\u6bcf\u4e2a\u4e32\u4f1a\u88ab\u904d\u5386$O(\\log n)$\u6b21,\u603b\u5171\u6709$\\log len$\u4e2a$x$.\u6240\u4ee5\u603b\u5171\u6bcf\u4e2a\u4e32\u4f1a\u88ab\u904d\u5386$O(\\log n\\log len)$.\n\n\u9996\u5148,\u5206\u6cbb\u9884\u5904\u7406(\u6c42$mid$\u4e3a\u4e2d\u5fc3\u7684\u524d\u540e\u7f00)\u7684\u590d\u6742\u5ea6\u4e3a$O(len\\log n\\log len)$.\n\n\u7136\u540e,\u8bbe\u533a\u95f4\u5185\u8de8$mid$\u7684\u8be2\u95ee\u6570\u6709$m$\u4e2a.\n\n\u5982\u679c$|S|\\le \\dfrac {len}{\\sqrt m}$,\u90a3\u4e48\u626b\u63cf\u7684\u590d\u6742\u5ea6\u5373\u4e3a$O(|S|\\sqrt m)=O(len\\sqrt m)$.\n\u5426\u5219,\u90a3\u4e48\u533a\u95f4\u7684\u957f\u5ea6$k=r-l+1\\le \\sqrt m$,\u672c\u8d28\u4e0d\u540c\u7684\u533a\u95f4\u4e3a$k^2$\u4e2a,\u8bb0\u5fc6\u5316\u4e00\u4e0b,\u603b\u590d\u6742\u5ea6\u4e3a$O(k^2\\cdot  \\dfrac{len}{k})=O(len\\sqrt m)$.\n\n\u603b\u590d\u6742\u5ea6\u4e3a$O(len(\\log n\\log len+\\sqrt m)+m\\log m)$.\n\n~~\u7801\u98ce\u597d\u8bc4~~\n\n```cpp\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define gc getchar()\n#define cmin(x,y) ((x)>(y)?x=y:0)\nusing namespace std;\nconst int N=20010,M=1e5+10,S=800010;\n\nvoid qr(int &x) {\n\tchar c=gc; x=0;\n\twhile(!isdigit(c))c=gc;\n\twhile(isdigit(c))x=x*10+c-'0',c=gc;\n}\nvoid qw(int x) {\n\tif(x/10) qw(x/10);\n\tputchar(x%10+'0');\n}\nvoid pr(int x) {qw(x); puts(\"\");}\n\nstruct node{int fa,len,v[2];}tr[S]; int tot;\nstruct SAM {\n\tint last,root;\n\tvoid add(int c) {\n\t\tregister int p=last,x=last=++tot; tr[x].len=tr[p].len+1;\n\t\tfor(\t;p&&!tr[p].v[c];p=tr[p].fa) tr[p].v[c]=x;\n\t\tif(!p) tr[x].fa=root;\n\t\telse {\n\t\t\tint q=tr[p].v[c],y;\n\t\t\tif(tr[p].len+1==tr[q].len) tr[x].fa=q;\n\t\t\telse {\n\t\t\t\ttr[y=++tot]=tr[q];\n\t\t\t\ttr[y].len=tr[p].len+1;\n\t\t\t\ttr[q].fa=tr[x].fa=y;\n\t\t\t\tfor(\t;p&&tr[p].v[c]==q;p=tr[p].fa) tr[p].v[c]=y;\n\t\t\t}\n\t\t}\n\t}\n\tvoid bt(char *s) {\n\t\tlast=root=++tot;\n\t\tfor(int i=0;s[i];i++) \n\t\t\tadd(s[i]-'0');\n\t}\n}t[N];\n\nint n,m;\nchar _str[S],*str[N],*spos=_str; int len[N];\nint _f[S],*f[N],*Fpos=_f;\n\n//\u8be2\u95ee \nstruct Q {\n\tint l,r,pos;\n\tbool operator <(Q b) const {\n\t\treturn l^b.l?l<b.l:r<b.r;\n\t}\n\tbool operator ==(Q b) const {\n\t\treturn l==b.l&&r==b.r;\n\t}\n}q[M],lq[M],rq[M];\nint ans[M];\n\nint sta[N],top;\n\nvoid solve(int l,int r,int L,int R,int lim) {//[l,r],[L,R]\u5206\u522b\u4e3a\u4e32\u8303\u56f4,\u8be2\u95ee\u8303\u56f4 \n\tif(L>R) return ;\n    do {\n        top=0;\n        for(int i=l;i<=r;i++) if(len[i]<=lim) sta[++top]=i;\n        if(top) break;\n        lim *= 2;\n    } while(1);\n    int mid=sta[top+1>>1];//\u53d6\u4e00\u4e2a\u8f83\u5c0f\u53c8\u5728\u4e2d\u95f4\u7684\u6570\n\tint tmp=len[mid];\n\t\n\tFpos=_f;\n\tfor(int i=l;i<=r;i++) f[i]=Fpos,Fpos+=tmp+1;//\u5206\u914d\u533a\u95f4 \n\tfor(int i=0;i<tmp;i++) f[mid][i]=i+1;//\u7c7b\u4f3c\u732b\u6811\u601d\u60f3\u8fdb\u884c\u5904\u7406\n\t\n\tfor(int i=mid-1;i>=l;i--) {\n\t\tint p=t[i].root,cnt=0;//\u5bf9\u5e94\u72b6\u6001,\u5339\u914d\u957f\u5ea6 \n\t\tfor(int j=0;j<tmp;j++) {\n\t\t\tint c=str[mid][j]-'0';\n\t\t\tif(!tr[p].v[c]) {\n\t\t\t\twhile(p!=t[i].root&&!tr[p].v[c]) \n\t\t\t\t\tp=tr[p].fa;\n\t\t\t\tcnt=tr[p].len;\n\t\t\t}\n\t\t\tif(tr[p].v[c]) p=tr[p].v[c],cnt++;\n\t\t\tf[i][j]=min(f[i+1][j],cnt);\n\t\t\t//f[i][j] \u8868\u793astr[mid] \u524d\u7f00j\u5728[i,mid]\u8fd9\u4e9b\u4e32\u4e2d\u7684\u6700\u957f\u516c\u5171\u540e\u7f00. \n\t\t}\n\t}\n\t\n\tfor(int i=mid+1;i<=r;i++) {\n\t\tint p=t[i].root,cnt=0;\n\t\tfor(int j=0;j<tmp;j++) {\n\t\t\tint c=str[mid][j]-'0';\n\t\t\tif(!tr[p].v[c]) {\n\t\t\t\twhile(p!=t[i].root&&!tr[p].v[c]) \n\t\t\t\t\tp=tr[p].fa;\n\t\t\t\tcnt=tr[p].len;\n\t\t\t}\n\t\t\tif(tr[p].v[c]) p=tr[p].v[c],cnt++;\n\t\t\tf[i][j]=min(f[i-1][j],cnt);\n\t\t}\n\t}\n\t\n\tint lt=0,rt=0;\n\tfor(int i=L;i<=R;i++) {\n\t\tint a=q[i].l,b=q[i].r;\n\t\tif(a<=mid&&mid<=b) {\n\t\t\tif(q[i]==q[i-1]) ans[q[i].pos]=ans[q[i-1].pos];\n\t\t\telse {\n\t\t\t\tint res=0;\n\t\t\t\tfor(int j=0;j<tmp;j++)\n\t\t\t\t\tres=max(res,min(f[a][j],f[b][j]));\n\t\t\t\tans[q[i].pos]=res;\n\t\t\t}\n\t\t}\n\t\telse if(b<mid) lq[++lt]=q[i];\n\t\telse rq[++rt]=q[i];\n\t}\n\t\n\tQ *g=q+L-1;\n\tfor(int i=1;i<=lt;i++) g[i]=lq[i];\n\tg+=lt;\n\tfor(int i=1;i<=rt;i++) g[i]=rq[i];\n\t\n\tsolve(l,mid-1,L,L+lt-1,lim);\n\tsolve(mid+1,r,L+lt,L+lt+rt-1,lim);\n}\n\nint main() {\n\tqr(n); qr(m);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%s\",str[i]=spos);\n\t\tlen[i]=strlen(str[i]);\n\t\tspos+=len[i];\n\t\tt[i].bt(str[i]);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tqr(q[i].l),qr(q[i].r),q[i].pos=i;\n\tsort(q+1,q+m+1);\n\tsolve(1,n,1,m,10);\n\tfor(int i=1;i<=m;i++) pr(ans[i]);\n\treturn 0;\n}\n\n```\n\n\n\n",
        "postTime": 1585661309,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5576 \u3010[CmdOI2019]\u53e3\u5934\u7985\u3011"
    }
]