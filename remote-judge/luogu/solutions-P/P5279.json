[
    {
        "content": "~~\u9ebb\u96c0\u3063\u3066\u3001\u697d\u3057\u3044\u306d\u3002~~\n\n\u663e\u7136\u6bd4zjoi2018d1t1\u7b80\u5355\u5e76\u4e14\u597d\u5199\u591a\u4e86\u2026\u2026\n\n\u867d\u7136\u9898\u610f\u5f88\u5947\u602a\u4f46\u662f\u505a\u6cd5\u8fd8\u662f\u5f88\u4f20\u7edf\u7684\n_______\n\n## \u524d\u7f6e\u829d\u58eb\uff1adp\u5957dp\n\n\u5176\u5b9e\u4e0d\u4f1a\u8fd9\u4e2a\u6280\u672f\u4e5f\u884c\u4e0d\u8fc7\u4f1a\u4e86\u6700\u597d\n\n# \u672c\u9898\u9898\u89e3\n\n\u663e\u7136\u7ed9\u51fa\u4e00\u4e2a\u724c\u7684\u96c6\u5408$S$,\u6211\u4eec\u4ec5\u4ec5\u5173\u5fc3\u6bcf\u4e00\u79cd\u724c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\n\n\u6362\u53e5\u8bdd\u8bb22333\u8fd9\u5e45\u724c\u548c3233\u8fd9\u5e45\u724c\u662f\u4e00\u6837\u7684\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u526f\u8868\u793a\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7b2ci\u4f4d\u8868\u793a\u7b2ci\u79cd\u724c\u51fa\u73b0\u4e86\u51e0\u6b21\n\n\u6bd4\u5982\u8bf42333556\u8fd9\u5e45\u724c\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\u5c31\u662f013021\n\n\u73b0\u5728\u6211\u4eec\u6210\u529f\u7684\u5c06\u4e00\u526f\u724c\u538b\u6210\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u8bc6\u522b\u4e00\u4e2a\u5b57\u7b26\u4e32\u80fd\u4e0d\u80fd\u80e1\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u9020\u4e2a\u81ea\u52a8\u673a\u51fa\u6765\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u81ea\u52a8\u673a\u53ef\u4ee5\u8bc6\u522b\u4e00\u526f\u80e1\u4e86\u7684\u724c,\u9020\u81ea\u52a8\u673a\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u5176\u4e2d\u4e00\u79cd\u5c31\u662f\u628adp\u5f3a\u884c\u6539\u6210\u81ea\u52a8\u673a\n\n\u90a3\u4e48\u6211\u4eec\u5c1d\u8bd5\u8bbe\u8ba1\u4e00\u4e2adp,\u6ce8\u610f\u5230\u6211\u4eec\u5c06\u4e00\u526f\u724c\u6620\u5c04\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u724c\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8bbe\u8ba1\u4e00\u4e2a$dp(i,j,k,0/1)$\u8868\u793a\u5904\u7406\u5b8c\u4e86\u7b2ci\u79cd\u7f16\u53f7\u7684\u724c\uff0c\u6211\u4eec**\u9884\u7559**\u4e86j\u5bf9\u5f62\u5982$i-1,i$\u7684\u724c\uff0c\u548c$k$\u4e2a\u7f16\u53f7\u4e3a$i$\u7684\u724c,$0/1$\u8868\u793a\u4e4b\u524d\u7684\u51b3\u7b56\u8fc7\u7a0b\u5f53\u4e2d\u6709\u6ca1\u6709**\u9884\u7559**\u8fc7\u5bf9\u5b50\uff0cdp\u5f53\u4e2d\u5b58\u50a8\u7684\u503c\u662f\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u9762\u5b50\u6570\n\n\u6ce8\u610f\u5230\u4e09\u4e2a\u76f8\u540c\u7684\u987a\u5b50\u53ef\u4ee5\u88ab\u7b97\u6210\u4e09\u4e2a\u8fde\u7eed\u7684\u523b\u5b50,\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0$j$\u548c$k$\u8fd9\u4e24\u7ef4\u90fd\u4e0d\u4f1a\u8d85\u8fc72\n\ndp\u7684\u8f6c\u79fb\u4e5f\u5341\u5206\u7b80\u5355,\u5047\u8bbe\u6765\u4e86$x$\u5f20$i+1$\u7f16\u53f7\u7684\u724c\uff0c\u9996\u5148\u539f\u6765\u7684$j,k$\u4e4b\u548c\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8ex,\u56e0\u4e3a\u8981\u6ee1\u8db3\u539f\u6765\u7684\u9884\u7559\u60c5\u51b5,\u5904\u7406\u5b8c\u9884\u7559\u60c5\u51b5\u4e4b\u540e\u6211\u4eec\u679a\u4e3e\u7559\u4e0b\u51e0\u5f20x\u4f5c\u4e3a\u65b0\u987a\u5b50\u7684\u5f00\u59cb,\u5269\u4e0b\u7684x\u5c1d\u8bd5\u53bb\u7ec4\u523b\u5b50,\u540c\u65f6\u4e00\u5f00\u59cb\u9884\u7559\u7684j\u5f20$(i-1,i)$\u53ef\u4ee5\u548c$i+1$\u51d1\u51fa$j$\u4e2a\u987a\u5b50\u6765,\u6309\u7167\u5b9a\u4e49\u8f6c\u79fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u5f53\u7136\u6211\u4eec\u8fd8\u8981\u679a\u4e3e\u9884\u7559\u8fd8\u662f\u4e0d\u9884\u7559\u5bf9\u5b50\uff0c\u8fd9\u4e2a\u90e8\u5206\u4e5f\u5f88\u7b80\u5355\n\n\u8fd9\u6837\u6211\u4eecdp\u6211\u4eec\u53ef\u4ee5dp\u51fa\u8fd9\u5f20\u724c\u662f\u4e0d\u662f\u4f20\u7edf\u80e1\u724c\u4e86\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5224\u5b9a\u4e03\u5bf9\u5b50\uff0c\u8fd9\u4e2a\u7279\u5224\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u5982\u679c\u67097\u4e2a\u53ca\u4ee5\u4e0a\u7684\u7f16\u53f7\u6709\u5bf9\u5b50\u5c31\u53ef\u4ee5\u51d1\u4e00\u4e2a\u4e03\u5bf9\u5b50\u51fa\u6765\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u9020\u81ea\u52a8\u673a\u5462?\n\n\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u628a$dp(j,k,0/1)$\u8fd9\u4e2a\u4e09\u7ef4\u6570\u7ec4\u76f4\u63a5\u5f53\u6210\u81ea\u52a8\u673a\u7684\u8282\u70b9\uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u5c31\u662f\u666e\u901adp\u7684\u8f6c\u79fb\uff0c\u4e3a\u4e86\u538b\u7f29\u8282\u70b9\u6570\u76ee\uff0c\u6211\u4eec\u8ba4\u4e3adp\u6570\u7ec4\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u503c\u90fd\u4e0d\u80fd\u8d85\u8fc7$4$\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u641e\u5b9a\u4f20\u7edf\u80e1\u724c\u4e86\uff0c\u52a0\u4e0a\u4e03\u5bf9\u5b50\u7684\u60c5\u51b5\u53ea\u9700\u8981\u5728\u8282\u70b9\u4e0a\u5355\u72ec\u8bb0\u4e00\u4e2a\u53d8\u91cf\u8868\u793a\u5bf9\u5b50\u7684\u6570\u76ee\u5373\u53ef\u4e86\n\n\u4e00\u4e2a\u8282\u70b9\u662f\u80e1\u7684\u5f53\u4e14\u4ec5\u5f53dp\u503c\u5f53\u4e2d\u6709\u5927\u4e8e\u7b49\u4e8e4\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u51fa\u73b0\u4e867\u4e2a**\u4e0d\u540c\u7684\u5bf9\u5b50**~~(\u542c\u8bf4\u6709\u4e9b\u5730\u65b9\u89c4\u5219\u4e03\u5bf9\u5b50\u5e26\u6760?)~~\n\n\u6700\u540e\u6211\u4eec\u4e3a\u80e1\u724c\u7684\u72b6\u6001\u5355\u5f00\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u65e0\u8bba\u8f93\u5165\u4ec0\u4e48\u90fd\u4f1a\u8d70\u56de\u81ea\u5df1\n\n\u5efa\u8fd9\u4e2a\u81ea\u52a8\u673a\u53ef\u4ee5\u7528map\u5b58\u50a8\u6bcf\u4e2a\u72b6\u6001\u7684\u7f16\u53f7,\u7136\u540e\u4f7f\u7528bfs\u6765\u6784\u5efa\u81ea\u52a8\u673a\n\n\u7531\u4e8e\u5c06\u6240\u6709\u80e1\u724c\u7684\u8282\u70b9\u7f29\u6210\u4e86\u4e00\u4e2a\u70b9,\u56e0\u6b64\u70b9\u6570\u4f1a\u6bd4\u7f51\u4e0a\u9898\u89e3\u7684\u70b9\u6570\u8981\u5c11\uff0c\u5177\u4f53\u6765\u8bb2\u662f$2092$\u4e2a\u8282\u70b9\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6570\u5b57\u6821\u9a8c\u4e00\u4e0b\u4f60\u7684\u641c\u7d22\u6709\u6ca1\u6709\u5199\u9519\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u81ea\u52a8\u59ec\u5c31\u53ef\u4ee5dp\u4e86\n\n\u6211\u4eec\u5e0c\u671b\u6c42\u51fa\u8fd9\u526f\u724c\u7684\u6700\u5c0f\u80e1\u724c\u5de1\u76ee\u6570\u7684\u671f\u671b\uff0c\u6839\u636e\u4e00\u4e2a\u671f\u671b\u9898\u4e0a\u7ecf\u5178\u7684\u8f6c\u5316\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7b97\u51fa\u5df2\u7ecf\u6478\u4e86$i$\u5f20\u724c\u8fd8\u662f\u4e0d\u80e1\u7684\u65b9\u6848\u6570\u52a0\u8d77\u6765\uff0c\u9664\u4ee5$(4n-13)!$\u6700\u540e\u628a\u7b54\u6848\u52a01\u5c31\u662f\u7b54\u6848\u4e86(\u52a01\u662f\u56e0\u4e3a\u672c\u6765\u7b97\u7684\u662f\u80e1\u724c\u65f6\u95f4\u5927\u4e8e\u7b49\u4e8ei\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u5f3a\u884c\u53d8\u6210\u4e86\u7b97\u80e1\u724c\u65f6\u95f4\u5927\u4e8ei-1\u7684\u65b9\u6848\u6570)\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe$f(i)$\u8868\u793a\u6478\u4e86i\u5f20\u724c\u4e4b\u540e\u8fd8\u4e0d\u80e1\u7684\u724c\u7684\u96c6\u5408\u6570\u76ee\n\n\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\n\n$$1+\\frac{\\sum_{i=1}^{4n-13}f(i)i!(4n-13-i)!}{(4n-13)!}$$\n\n\u73b0\u5728\u8003\u8651\u600e\u4e48\u7b97$f(i)$\u5c31\u884c\u4e86\n\n\u4e5f\u5f88\u7b80\u5355$dp(k,n,j)$\u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3ak,\u6478\u4e86n\u5f20\u724c\uff0c\u8d70\u5230\u81ea\u52a8\u59ec\u4e0a\u70b9j\u7684\u65b9\u6848\u6570\n\n\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\u679a\u4e3e\u5b57\u7b26\u4e32\u7684\u7b2c$k+1$\u4f4d\u662f\u4ec0\u4e48\uff0c\u5047\u5982\u7b2c$k+1$\u79cd\u724c\u8fd8\u5269$p$\u5f20,\u6211\u4eec\u653e\u4e86$t$\u5f20\uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019\u4e58\u4e00\u4e2a${p \\choose t}$\u7684\u7cfb\u6570\u5373\u53ef\n\n\u60f3\u5361\u4e00\u4e0b\u7a7a\u95f4\u7684\u8bdd\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u5b9e\u73b0\u8fd9\u4e2adp\n\n(\u5e94\u8be5\u6bd4\u76f4\u63a5dp\u6392\u5217\u7684\u505a\u6cd5\u597d\u5199\u5f88\u591a)\n\n\u590d\u6742\u5ea6$O(2092\u00d7n^2)$\u5e38\u6570\u4e0d\u5927\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<map>\n#include<queue>\nusing namespace std;const int N=4100;const int M=4100;\ntypedef unsigned long long ll;const ll mod=998244353;\nstruct data//\u8f6c\u79fb\u7528\u7684\u77e9\u9635\u7c7b \n{\n    int dp[3][3];\n    inline int* operator [](const int& x){return dp[x];} \n    data()\n    {\n        for(int i=0;i<3;i++)\t\n            for(int j=0;j<3;j++)dp[i][j]=-1;\n    }\n    friend bool operator <(data a,data b)\n    {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                if(a[i][j]!=b[i][j])return a[i][j]<b[i][j];\n        return false;\n    }\n    friend bool operator !=(data a,data b)\n    {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                if(a[i][j]!=b[i][j])return true;return false;\n    }\n    inline void trs(data& c,int del)\n    {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                if(dp[i][j]!=-1)\n                    for(int k=0,rem=del-i-j;k<3&&i+j+k<=del;k++,rem--)\n                        c[j][k]=max(c[j][k],min(i+dp[i][j]+rem/3,4));\n    }\n    inline bool ckhu()\n    {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                if(dp[i][j]>=4)return true;return false;\n    }\n};\nstruct nod//\u81ea\u52a8\u673a\u8282\u70b9 \n{\n    data is_pair[2];int cnt_pair;\n    friend bool operator <(nod a,nod b)\n    {\n        if(a.cnt_pair!=b.cnt_pair)return a.cnt_pair<b.cnt_pair;\n        if(a.is_pair[0]!=b.is_pair[0])return a.is_pair[0]<b.is_pair[0];\n        if(a.is_pair[1]!=b.is_pair[1])return a.is_pair[1]<b.is_pair[1];\n        return false;\n    }\n    inline void clear()\n    {is_pair[0]=data();is_pair[1]=data();cnt_pair=-2333;}\n    inline bool ckhu()\n    {\n        if(cnt_pair>=7){clear();return true;}\n        if(is_pair[1].ckhu()){clear();return true;}\n        return false;\n    }\n    friend nod operator +(nod a,int b)\n    {\n        if(a.cnt_pair==-2333)return a;\n        nod c;\n        if(b>=2)a.is_pair[0].trs(c.is_pair[1],b-2);\n        a.is_pair[0].trs(c.is_pair[0],b);\n        a.is_pair[1].trs(c.is_pair[1],b);\n        c.cnt_pair=a.cnt_pair+(b>=2);\n        c.ckhu();\n        return c;\n    }\n    \n};\ninline nod stat()\n{\n    nod res;res.clear();res.cnt_pair=0;res.is_pair[0][0][0]=0;\n    return res;\n}\nmap <nod,int> mrk;int tot;int mp[M][5];queue <nod> q;int ed;\ninline void bfs()//\u641c\u7d22 \n{\n    nod st=stat();\n    q.push(st);mrk[st]=++tot;\n    while(!q.empty())\n    {\n        st=q.front();q.pop();int nu=mrk[st];\n        for(int i=0;i<=4;i++)\n        {\n            nod tw=st+i;\n            if(mrk.count(tw))mp[nu][i]=mrk[tw];\n            else mp[nu][i]=mrk[tw]=++tot,q.push(tw);\n        }\n    }\n    st.clear();ed=mrk[st];\n}\nll fac[N];ll inv[N];ll ifac[N];\nll dp[2][440][M];ll* p1[440];ll* p2[440];\nll xs[N];int sum[N];int n;\ninline void pre()\n{\n    fac[0]=1;for(int i=1;i<N;i++)fac[i]=fac[i-1]*i%mod;\n    inv[0]=inv[1]=1;for(int i=2;i<N;i++)inv[i]=(mod-mod/i)*inv[mod%i]%mod;\n    ifac[0]=1;for(int i=1;i<N;i++)ifac[i]=ifac[i-1]*inv[i]%mod;\n}\ninline void calc()//dp\u4f7f\u7528\u4e86\u6eda\u52a8\u6570\u7ec4 \n{\n    int cap=n*4-13;\n    for(int i=0;i<=cap;i++)p1[i]=dp[0][i];\n    for(int i=0;i<=cap;i++)p2[i]=dp[1][i];p1[0][mrk[stat()]]=1;\n    for(int z=1;z<=n;z++)\n    {\n        for(int j=0;j<=4-sum[z];j++)xs[j]=fac[4-sum[z]]*ifac[4-sum[z]-j]%mod*ifac[j]%mod;\n        for(int i=cap;i>=0;i--)\n        {\n            for(int j=1;j<=tot;j++)p2[i][j]=0;\n            for(int j=1;j<=tot;j++)\n                if(p1[i][j]!=0)\n                    for(int tmp=0;tmp<=4-sum[z]&&i+tmp<=cap;tmp++)\n                        (p2[i+tmp][mp[j][tmp+sum[z]]]+=p1[i][j]*xs[tmp])%=mod;\n        }\n        for(int i=0;i<=cap;i++)swap(p1[i],p2[i]);\n    }\n}\nint main()\n{\n    bfs();pre();\n    scanf(\"%d\",&n);\n    for(int i=1,w,t;i<=13;i++)scanf(\"%d%d\",&w,&t),sum[w]++;\n    calc();\n    ll ans=0;\n    for(int p=1,q=4*n-14;p<=4*n-13;p++,q--)//\u8ba1\u7b97\u7b54\u6848 \n        for(int j=1;j<=tot;j++)\n            if(j!=ed)(ans+=p1[p][j]*fac[p]%mod*fac[q])%=mod;\n    printf(\"%lld\",ans*ifac[4*n-13]%mod+1);\n    return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1555062971,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/Luogu5279.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f6013\u5f20\u9ebb\u5c06\u724c\uff0c\u95ee\u4f60\u671f\u671b\u518d\u6478\u591a\u5c11\u5f20\u724c\u53ef\u4ee5\u6ee1\u8db3\u5b58\u5728\u4e00\u4e2a\u80e1\u7684\u5b50\u96c6\u3002\n\n~~\u4f3c\u4e4eZJOI2019Day1\u7684\u6700\u5927\u6536\u83b7\u662f\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u80e1\u724c\uff1f~~\n\n### \u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\uff0c\u5373\u5bf9\u4e8e\u4e00\u526f\u724c\uff0c\u6211\u4eec\u4ec5\u9700\u8981\u8003\u8651\u5176**\u6bcf\u5f20\u724c\u7684\u5f20\u6570**\uff0c\u800c\u987a\u5e8f\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u3002\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u4e00\u526f\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u4e3a$0\\sim4$\u7684\u5e8f\u5217\u3002\n\n\u8fd9\u6837\u5c31\u65b9\u4fbf\u64cd\u4f5c\u4e86\u8bb8\u591a\u3002\n\n### \u80e1\u724c\u81ea\u52a8\u673a\n\n\u5728\u524d\u9762\u6027\u8d28\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u6765\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e00\u526f\u724c\uff0c\u5373\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\u662f\u5426\u80fd\u80e1\u3002\n\n\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u5efa\u4e00\u4e2a**\u81ea\u52a8\u673a**\uff08~~\u53ef\u4ee5\u4ee5\u5176\u4f5c\u7528\u547d\u540d\u4e3a**\u80e1\u724c\u81ea\u52a8\u673a**~~\uff09\u53bb\u5904\u7406\u5b83\u3002\n\n### \u5efa\u81ea\u52a8\u673a\u7684\u524d\u594f\uff1a$DP$\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u53bb\u5efa\u8fd9\u4e2a\u81ea\u52a8\u673a\u5462\uff1f\n\n\u8003\u8651\u5982\u679c\u6211\u4eec\u80fd\u5f97\u51fa\u4e00\u4e2a\u5224\u65ad\u4e00\u526f\u724c\u662f\u5426\u80fd\u80e1\u7684$DP$\uff0c\u7136\u540e\u628a**\u6bcf\u4e2a\u72b6\u6001**\u770b\u4f5c\u81ea\u52a8\u673a\u7684\u70b9\uff0c**$DP$\u8f6c\u79fb**\u770b\u4f5c\u81ea\u52a8\u673a\u7684\u8fb9\uff0c\u5219\u4e00\u4e2a\u81ea\u52a8\u673a\u5c31\u5efa\u6210\u4e86\u3002\n\n\u4e8e\u662f\u95ee\u9898\u53c8\u53d8\u6210\u4e86\uff1a\u5982\u4f55\u7528$DP$\u6765\u5224\u65ad\u4e00\u526f\u724c\u662f\u5426\u80fd\u80e1\u3002\n\n\u8bbe$f_{0/1,i,j,k}$\u8868\u793a**\u5904\u7406\u5b8c\u524d$i$\u79cd\u724c\uff0c\u8fd8\u5269$j$\u7ec4$(i-1,i)$\u4ee5\u53ca$k$\u5f20$i$\uff0c\u4e14\u5b58\u5728\uff08$1$\uff09/\u4e0d\u5b58\u5728\uff08$0$\uff09\u5bf9\u5b50**\u65f6\u6700\u591a\u7684**\u9762\u5b50\u6570**\u3002\n\n\u7531\u4e8e$j\\ge3$\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$3$\u4e2a$i-1$\u548c$3$\u4e2a$i$\u5404\u81ea\u7ec4\u6210\u9762\u5b50\uff1b$k\\ge3$\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528$3$\u4e2a$i$\u7ec4\u6210\u9762\u5b50\u3002\n\n\u56e0\u6b64\uff0c$0\\le j,k\\le2$\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5efa\u4e00\u4e2a$3*3$\u7684\u77e9\u9635\u5b58\u4e0b$f_{0/1,i}$\u7684\u5168\u90e8\u7b54\u6848\u3002\n\n\u5047\u8bbe\u52a0\u5165\u4e86$x$\u5f20\u724c\uff0c\u5219\u6211\u4eec\u8fdb\u884c\u5982\u4e0b\u51e0\u79cd\u8f6c\u79fb\uff1a\n\n- \u5c06$f_{0,i}$\u4ece$f_{0,i-1}$\u52a0$x$\u5f20\u724c\u8f6c\u79fb\u8fc7\u6765\u3002\n- \u5c06$f_{1,i}$\u4ece$f_{1,i-1}$\u52a0$x$\u5f20\u724c\u8f6c\u79fb\u8fc7\u6765\u3002\n- \u5982\u679c$x>1$\uff0c\u5219\u5c06$f_{1,i}$\u4ece$f_{0,i-1}$\u52a0$x-2$\u5f20\u724c\u8f6c\u79fb\u8fc7\u6765\u3002\n\n\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u679a\u4e3e\u82e5\u5e72\u5f20\u724c\u548c\u4e4b\u524d\u7684$(i-2,i-1)$\u62fc\u9762\u5b50\uff0c\u4fdd\u7559\u82e5\u5e72\u7ec4$(i-1,i)$\u548c\u82e5\u5e72\u5f20$i$\uff0c\u7136\u540e\u62ff\u5269\u4e0b\u7684\u724c\u5c3d\u53ef\u80fd\u5730\u62fc\u9762\u5b50\uff0c\u8fd9\u6837\u5373\u53ef\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u82e5$f_{1,i}>3$\uff0c\u5219\u8fd9\u526f\u724c\u5c31\u80fd\u80e1\u4e86\u3002\n\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u6216\u8bb8\u4f60\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a$DP$\u4e2d\u5e76\u6ca1\u6709\u8003\u8651\u4e03\u5bf9\u5b50\u7684\u60c5\u51b5\uff0c\u8fd9\u5728\u540e\u9762\u4f1a\u7279\u5224\u5904\u7406\u3002\n\n### \u6b63\u5f0f\u5f00\u59cb\u5efa\u81ea\u52a8\u673a\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u5c06\u8fd9\u4e2a$DP$\u8f6c\u5316\u4e3a\u81ea\u52a8\u673a\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\uff08\u4e00\u5f20\u724c\u90fd\u6ca1\u6709\uff09\u3002\n\n\u7136\u540e\uff0c\u4ee5\u7c7b\u4f3c\u4e8e$BFS$\u7684\u65b9\u5f0f\uff0c\u627e\u5230\u672a\u5904\u7406\u8fc7\u7684\u8282\u70b9\uff0c\u679a\u4e3e\u65b0\u52a0\u5165\u7684\u724c\u6570\uff0c\u7136\u540e\u901a\u8fc7$DP$\u8f6c\u79fb\u7684\u65b9\u5f0f\u5f97\u51fa\u5b50\u8282\u70b9\u7684\u72b6\u6001\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u524d\u9762\u7684$i$\u5728\u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u53ef\u4ee5\u4e0d\u7528\u8bb0\u5f55\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u6bcf\u4e2a\u8282\u70b9\u4e00\u6b65\u6b65\u8f6c\u79fb\u7684\u3002\n\n\u800c$0/1$\u8fd9\u4e2a\u72b6\u6001\u8fd8\u662f\u5341\u5206\u5fc5\u8981\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u5bf9\u81ea\u52a8\u673a\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e24\u4e2a\u77e9\u9635$P_{0/1}$\uff0c\u6765\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u6b64\u5916\uff0c\u7531\u4e8e\u524d\u9762\u63d0\u5230\u8fc7\u7684\u4e03\u5bf9\u5b50\uff0c\u6211\u4eec\u518d\u5f00\u4e00\u4e2a\u53d8\u91cf$t$\u8bb0\u5f55\u51fa\u73b0\u7684\u5bf9\u5b50\u4e2a\u6570\u3002\n\n\u5219\u7efc\u4e0a\u6240\u8ff0\uff0c\u4e00\u4e2a\u8282\u70b9\u662f\u80e1\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176**$P_1$\u4e2d\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u5927\u4e8e$3$**\u6216**$t\\ge7$**\u3002\n\n\u800c\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u80e1\u7684\u8282\u70b9\u5168\u90e8\u538b\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee5\u5176$t=-1$\u4f5c\u4e3a\u7279\u6b8a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5176\u4ed6\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u4e2a$map$\u5224\u65ad\u4e00\u79cd\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff08\u6ce8\u610f\u8981\u5c06$t,P_{0/1}$\u5168\u90e8\u8fdb\u884c\u6bd4\u8f83\uff09\uff0c\u51fa\u73b0\u8fc7\u5219\u76f4\u63a5\u8fde\u8fb9\uff0c\u5426\u5219\u5148\u65b0\u5efa\u8282\u70b9\u7136\u540e\u518d\u8fde\u8fb9\u3002\n\n\u987a\u4fbf\u63d0\u4e00\u53e5\uff0c\u8fd9\u91cc\u7684$BFS$\u53ea\u8981\u6309\u8282\u70b9\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u5373\u53ef\uff0c\u65e0\u987b\u961f\u5217\u3002\n\n\u663e\u7136\u6309\u6b64\u65b9\u5f0f\u5efa\u51fa\u6765\u7684\u80e1\u724c\u81ea\u52a8\u673a\u5f62\u6001\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u5bf9\u4e8e\u4efb\u4f55\u6570\u636e\u957f\u5f97\u90fd\u4e00\u6837\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u4ee3\u7801\u3002\n\n### \u80e1\u724c\u81ea\u52a8\u673a\u4e0a$DP$\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5230\u4e86\u8fd9\u9053\u9898\u7684\u6700\u540e\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\uff0c\u80e1\u724c\u81ea\u52a8\u673a\u4e0a$DP$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe$g_i$\u8868\u793a**\u6478\u4e86$i$\u5f20\u724c\u540e\u4e0d\u80e1\u7684\u65b9\u6848\u6570**\uff0c\u5219\u7b54\u6848\u5c31\u4e3a\uff1a\n\n$$\\frac{\\sum_{i=1}^{4n-13}g_ii!(4n-13-i)!}{(4n-13)!}+1$$\n\n\u5176\u4e2d\u5206\u5b50\u4e2d\u7684$i!$\u548c$(4n-13-i)!$\u8868\u793a\u8fd9$i$\u5f20\u724c\u548c\u5269\u4e0b\u7684$4n-13-i$\u5f20\u724c\u653e\u7684\u987a\u5e8f\u4efb\u610f\uff0c\u53ef\u4ee5\u968f\u4fbf\u653e\uff1b\u5206\u6bcd\u4e2d\u7684$(4n-13)!$\u662f\u603b\u65b9\u6848\u6570\uff0c\u663e\u7136\u7b97\u671f\u671b\u5fc5\u987b\u8981\u9664\uff1b\u52a0$1$\u662f\u56e0\u4e3a\u6211\u4eec\u9009\u62e9$i$\u5f20\u724c\u540e\u4f9d\u7136\u4e0d\u80fd\u80e1\uff0c\u9700\u8981$+1$\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55$DP$\u3002\n\n\u8bbe$f_{i,j,k}$\u8868\u793a**\u5904\u7406\u5230\u7b2c$i$\u5f20\u724c\uff0c\u5171\u6478\u4e86$j$\u5f20\u724c\uff0c\u8d70\u5230\u4e86\u80e1\u724c\u81ea\u52a8\u673a\u4e0a\u7684$k$\u53f7\u8282\u70b9\u7684\u65b9\u6848\u6570**\u3002\n\n\u90a3\u4e48\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a\u6478\u7684\u724c\u6570$t$\uff08$0\u2264t\u22644-a_i$\uff0c\u5176\u4e2d$a_i$\u4e3a\u521d\u59cb$13$\u5f20\u724c\u4e2d$i$\u7684\u5f20\u6570\uff09\uff0c\u7136\u540e\u4ece$f_{i,j,k}$\u5411$f_{i+1,j+t,O_k.Son_{a_i+t}}$\u8f6c\u79fb\uff0c\u5176\u4e2d$O_k.Son_{a_i+t}$\u8868\u793a\u80e1\u724c\u81ea\u52a8\u673a\u4e0a$k$\u53f7\u8282\u70b9\u7684\u7b2c$a_i+t$\u4e2a\u513f\u5b50\u3002\n\n\u8fd8\u6709$4-a_i$\u5f20\u724c\u4e2d\u9009$t$\u5f20\u724c\u7684\u65b9\u6848\u6570$C_{4-a_i}^t$\u8981\u8bb0\u5f97\u4e58\u4e0a\u3002\n\n\u8fd9\u4e2a$DP$\u8f6c\u79fb\u5e94\u8be5\u662f\u6bd4\u8f83\u663e\u7136\uff0c\u4e5f\u6bd4\u8f83\u7b80\u5355\u7684\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 100\n#define M 400\n#define X 998244353\n#define Gmax(x,y) (x<(y)&&(x=(y)))\n#define Inc(x,y) ((x+=(y))>=X&&(x-=X))\n#define Qinv(x) Qpow(x,X-2)\nusing namespace std;\nint n,m,a[N+5],Fac[M+5],Inv[M+5];\nI int Qpow(RI x,RI y) {RI t=1;W(y) y&1&&(t=1LL*t*x%X),x=1LL*x*x%X,y>>=1;return t;}\nclass HuAutomation//\u80e1\u724c\u81ea\u52a8\u673a\n{\n    private:\n        #define SZ 2092//\u5b9e\u6d4b\u81ea\u52a8\u673a\u5927\u5c0f\n        #define C(x,y) (1LL*Fac[x]*Inv[y]%X*Inv[(x)-(y)]%X)//\u7ec4\u5408\u6570\n        #define Pos(x) (p.count(x)?p[x]:(O[p[x]=++tot]=x,tot))//\u6c42\u8282\u70b9\u7f16\u53f7\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\u4e00\u4e2a\n        #define Expend(x) for(j=0;j^5;++j) O[x].S[j]=Pos(O[x]+j);//\u6269\u5c55\n        class Mat//\u77e9\u9635\n        {\n            private:\n                #define CM Con Mat&\n                #define Rp for(RI i=0,j;i^3;++i) for(j=0;j^3;++j)\n                #define S (i+j+k)\n                int f[3][3];\n            public:\n                I Mat() {Rp f[i][j]=-1;}I int* operator [] (CI x) {return f[x];}\n                I bool operator != (Mat o) Con {Rp if(f[i][j]^o[i][j]) return 1;return 0;}//\u4e0d\u7b49\u4e8e\n                I bool operator < (Mat o) Con {Rp if(f[i][j]^o[i][j]) return f[i][j]<o[i][j];}//\u6bd4\u5927\u5c0f\uff0c\u7528\u4e8emap\n                I bool Check() Con {Rp if(f[i][j]>3) return 1;return 0;}//\u5224\u65ad\u662f\u5426\u80fd\u80e1\n                I void F5(Mat o,CI t)//\u66f4\u65b0\n                {\n                    Rp if(~o[i][j]) for(RI k=0;k^3&&S<=t;++k)//i,j,k\u5206\u522b\u679a\u4e3e\u7528\u4e8e\u62fc\u9762\u5b50\u3001\u7528\u4e8e\u4fdd\u7559(i-1,i)\u3001\u7528\u4e8e\u4fdd\u7559i\u548c\u76f4\u63a5\u62fc\u9762\u5b50\u7684\u724c\u6570 \n                        Gmax(f[j][k],min(i+o[i][j]+(t-S)/3,4));//\u8f6c\u79fb\u66f4\u65b0\u4fe1\u606f\uff08\u8981\u54114\u53d6\u6a21\u662f\u56e0\u4e3a\u5927\u4e8e4\u6ca1\u6709\u610f\u4e49\uff0c\u540c\u65f6\u63d0\u9ad8\u6548\u7387\uff09\n                }\n                #undef S\n        };\n        struct node//\u5b58\u50a8\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\n        {\n            int t,S[5];Mat P[2];I node() {t=S[0]=S[1]=S[2]=S[3]=S[4]=0,P[0]=P[1]=Mat();}\n            I bool operator < (Con node& o) Con//\u7528\u4e8emap\n            {\n                return t^o.t?t<o.t:(P[0]!=o.P[0]?P[0]<o.P[0]:(P[1]!=o.P[1]?P[1]<o.P[1]:0));\n            }\n            I node operator + (CI x) Con//\u52a0\u4e0ax\u5f20\u65b0\u724c\n            {\n                if(IsHu()) return Hu();node res;//\u5982\u679c\u5df2\u7ecf\u80e1\u4e86\u76f4\u63a5\u8fd4\u56de\n                res.P[0].F5(P[0],x),res.P[1].F5(P[1],x),x>1&&(res.P[1].F5(P[0],x-2),0),//\u8fdb\u884c\u8f6c\u79fb\n                res.t=t+(x>1),res.IsHu()&&(res=Hu(),0);return res;//\u7edf\u8ba1\u5bf9\u5b50\u6570\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u80e1\n            }\n            I bool IsHu() Con {return !~t||t>=7||P[1].Check();}//\u5df2\u7ecf\u80e1\u6216\u8005\u4e03\u5bf9\u5b50\u6216\u8005\u5b58\u57284\u4e2a\u9762\u5b50\u548c1\u4e2a\u5bf9\u5b50\n            I node Hu() Con {node x;return x.t=-1,x;}//\u80e1\u724c\u7684\u7279\u6b8a\u6807\u8bb0\n        }O[SZ+5];map<node,int> p;\n        I node Begin() {node x;return x.P[0][0][0]=0,x;}//\u521d\u59cb\u72b6\u6001\n        I node Hu() {node x;return x.t=-1,x;}//\u80e1\u724c\u7684\u7279\u6b8a\u6807\u8bb0\n    public:\n        int tot,f[N+5][M+5][SZ+5];\n        I void Build()//\u5efa\u81ea\u52a8\u673a\n        {\n            RI i,j;p[O[1]=Begin()]=1,p[O[2]=Hu()]=tot=2;//\u5efa\u7acb\u521d\u59cb\u72b6\u6001\u548c\u80e1\u724c\u72b6\u6001\n            Expend(1);for(i=3;i<=tot;++i) Expend(i);//\u5bf9\u9664\u7b2c2\u4e2a\uff08\u80e1\u724c\uff09\u4ee5\u5916\u7684\u5176\u4ed6\u72b6\u6001\u8fdb\u884c\u6269\u5c55\n        }\n        I void DP()//DP\u6c42\u89e3\u7b54\u6848\n        {\n            for(RI i=f[0][0][1]=1,j,k,t;i<=n;++i) for(j=m;~j;--j)//\u679a\u4e3e\u5f53\u524d\u662f\u7b2ci\u5f20\u724c\uff0c\u5171\u6478\u4e86j\u5f20\u724c\n                for(k=1;k<=tot;++k) if(f[i-1][j][k]) for(t=0;t<=4-a[i];++t)//\u679a\u4e3e\u5728\u80e1\u724c\u81ea\u52a8\u673a\u54ea\u4e2a\u8282\u70b9\u4e0a\uff0c\u4ee5\u53ca\u73b0\u5728\u6478\u7684\u724c\u6570\n                    Inc(f[i][j+t][O[k].S[a[i]+t]],1LL*f[i-1][j][k]*C(4-a[i],t)%X);//\u8f6c\u79fb\uff0c\u6ce8\u610f\u4e58\u4e0a\u7ec4\u5408\u6570\u7cfb\u6570\n        }\n}H;\nI void CInit(CI x)//\u521d\u59cb\u5316\n{\n    RI i;for(Fac[0]=i=1;i<=x;++i) Fac[i]=1LL*Fac[i-1]*i%X;//\u521d\u59cb\u5316\u9636\u4e58\n    for(Inv[x]=Qinv(Fac[x]),i=x-1;~i;--i) Inv[i]=1LL*Inv[i+1]*(i+1)%X;//\u521d\u59cb\u5316\u9636\u4e58\u9006\u5143\n}\n#define Calc(x,y) Inc(ans,1LL*H.f[n][x][y]*Fac[i]%X*Fac[m-i]%X)//\u7edf\u8ba1\u7b54\u6848\nint main()\n{\n    RI i,j,x,y,ans=0;for(H.Build(),scanf(\"%d\",&n),i=1;i<=13;++i) scanf(\"%d%d\",&x,&y),++a[x];//\u8bfb\u5165\u6570\u636e+\u9884\u5904\u7406\n    for(m=(n<<2)-13,CInit(m),H.DP(),i=1;i<=m;++i) for(Calc(i,1),j=3;j<=H.tot;++j) Calc(i,j);//\u7edf\u8ba1\u7b54\u6848\uff0c\u6ce8\u610f\u8df3\u8fc72\u53f7\u8282\u70b9\n    return printf(\"%lld\",1LL*ans*Inv[m]%X+1),0;//\u8f93\u51fa\u7b54\u6848\uff0c\u9664\u4ee5\u603b\u72b6\u6001\u6570\u7136\u540e\u52a01\n}\n```",
        "postTime": 1555320891,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "\u8003\u8651\u7ed9\u4f60\u4e00\u526f\u724c\uff0c\u5982\u4f55\u5224\u65ad\u8fd9\u526f\u724c\u662f\u5426\u662f\u80e1\u7684\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u76f8\u540c\u7684\u987a\u5b50\u4e0d\u4f1a\u9009\u4e09\u4e2a\u4ee5\u4e0a\uff0c\u4e8e\u662f\u8003\u8651\u82b1\u8272\u4ece\u5c0f\u5230\u5927\u8fdb\u884c$dp$\u3002\u4ee4$dp_{0/1, i, j, k}$\u8868\u793a\u662f\u5426\u6709\u5bf9\u5b50\uff0c\u8003\u8651\u4e86\u524d$i$\u79cd\u82b1\u8272\u7684\u724c\uff0c\u4ee5\u82b1\u8272$i - 1$\u7684\u724c\u4e3a\u5f00\u5934\u7684\u987a\u5b50\u51c6\u5907\u9009$j$\u4e2a\uff0c\u4ee5\u82b1\u8272$i$\u7684\u724c\u4e3a\u5f00\u5934\u7684\u987a\u5b50\u51c6\u5907\u9009$k$\u4e2a\uff0c\u6b64\u65f6\u80fd\u9009\u7684\u6700\u5927\u7684\u9762\u5b50\u6570\u3002\u8f6c\u79fb\u53ea\u8981\u679a\u4e3e\u4ee5\u82b1\u8272$i + 1$\u7684\u724c\u5f00\u5934\u7684\u987a\u5b50\u51c6\u5907\u9009\u51e0\u4e2a\uff0c\u5269\u4e0b\u7684\u724c\u7ec4\u6210\u523b\u5b50\u5c31\u884c\u4e86(\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801\u4e2d\u7ed3\u6784\u4f53$State$\u4e2d\u7684$Trans$\u51fd\u6570)\u3002\n\n\u5224\u5b9a\u80e1\u724c\u7684\u6761\u4ef6\u6709\u4e24\u79cd\uff1a$\\exists (j,k), dp_{1, n, j, k} \\ge 4$\uff1b\u8bb0$cnt$\u4e3a\u724c\u6570$\\ge 2$\u7684\u82b1\u8272\u6570\uff0c$cnt \\ge 7$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a$dp$\u548c\u72b6\u6001$i$\u8fd9\u4e00\u7ef4\u5173\u7cfb\u4e0d\u662f\u5f88\u5927\uff0c$dp_{0}$\u548c$dp_{1}$\u7684\u8f6c\u79fb\u65b9\u5f0f\u4e5f\u90fd\u662f\u4e00\u6837\u7684\u3002\u53ea\u8003\u8651\u6709$dp_{*,j,k}$\u8fd9\u4e2a$3 \\times 3$\u7684\u77e9\u9635\uff0c\u5176\u8f6c\u79fb\u672c\u8d28\u4e0a\u662f\u63a5\u6536\u4e00\u4e2a\u6570\u5b57\uff08\u8868\u793a\u4e0b\u4e00\u79cd\u82b1\u8272\u7684\u724c\u7684\u6570\u91cf\uff09\uff0c\u7136\u540e\u53d8\u6210\u4e86\u53e6\u4e00\u4e2a$3 \\times 3$\u7684\u77e9\u9635\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u81ea\u52a8\u673a\u7684\u6a21\u578b\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u6837\u7684$dp$\u72b6\u6001\uff08$3 \\times 3$\u7684\u77e9\u9635\uff09\u5e76\u4e0d\u5f88\u591a\u3002\u6211\u4eec\u7528\u7ed3\u6784\u4f53$State$\u6765\u5f62\u5bb9\u8fd9\u4e2a\u77e9\u9635\u3002\u4e3a\u4e86\u8868\u793a\u6574\u4e2a\u5f53\u524d\u80e1\u724c\u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u4e24\u4e2a$State$\u5206\u522b\u8868\u793a\u6709\u6ca1\u6709\u9009\u5bf9\u5b50\uff08\u5373$dp_0$\u548c$dp_1$\uff09\uff0c\u4ee5\u53ca$cnt$\u3002\u6211\u4eec\u628a\u8fd9\u4e09\u4e2a\u4e1c\u897f\u653e\u5230\u7ed3\u6784\u4f53$Mahjong$\u4e2d\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u53ef\u4ee5\u5f97\u5230$Mahjong$\u7684$Trans$\u5173\u7cfb\u3002\u7ecf\u641c\u7d22$Mahjong$\u7684\u72b6\u6001\u6570\u603b\u5171\u6709$3956$\u4e2a\u3002\n\n\u56de\u8fc7\u6765\u770b\u6211\u4eec\u8981\u7b97\u7684\u7b54\u6848\uff1a$ans = \\sum\\limits_{a = 13}^{4n} p(a)$\uff0c\u5176\u4e2d$p(a)$\u8868\u793a\u4f60\u603b\u5171\u6478\u4e86$a$\u5f20\u724c\u4e4b\u540e\u4ecd\u7136\u4e0d\u80fd\u80e1\u7684\u6982\u7387\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u7b97\u6478\u4e86$a$\u5f20\u724c\u4ecd\u7136\u4e0d\u80fd\u80e1\u7684\u6392\u5217\u6570\u5373\u53ef\u3002\u4ee4$f_{i, j, k}$\u8868\u793a\u6211\u4eec\u8003\u8651\u4e86\u524d$i$\u79cd\u82b1\u8272\u7684\u724c\uff0c\u5f53\u524d\u80e1\u724c\u72b6\u6001\u4e3a$j$\uff08$j$\u662f\u4e00\u4e2a$Mahjong$\u7c7b\uff09\uff0c\u5df2\u7ecf\u6478\u4e86$k$\u5f20\u724c\u7684\u6392\u5217\u6570\u6709\u591a\u5c11\u3002\u8f6c\u79fb\u679a\u4e3e\u6478\u4e86\u82b1\u8272$i + 1$\u7684\u724c\u6570$z$\uff0c\u5219\u7531$f_{i, j, k}$\u8f6c\u79fb\u5230$f_{i + 1, trans(j,z), k + z}$\uff0c\u4e58\u4e0a\u7684\u7cfb\u6570\u5c31\u662f$(4 - org_{i + 1})^{\\underline{z - org{i + 1}}} \\binom{k + z - sum_{i + 1}}{z - org_{i + 1}}$\u3002$org_i$\u8868\u793a\u539f\u6709\u7684$13$\u5f20\u724c\u4e2d\u82b1\u8272\u4e3a$i$\u7684\u6709\u51e0\u5f20\uff0c$sum$\u5219\u662f$org$\u7684\u524d\u7f00\u548c\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u7684\u610f\u601d\u5c31\u662f\u6211\u4eec\u9700\u8981\u5728\u6ca1\u88ab\u9009\u8fc7\u7684$4 - org_{i + 1}$\u5f20\u724c\u4e2d\u9009$z - org_{i + 1}$\u5f20\u7684\u6392\u5217\uff0c\u5e76\u4e14\u63d2\u5165\u5230\u4e4b\u524d\u7684\u6392\u5217\u4e2d\uff0c\u4f46\u524d$13$\u5f20\u724c\u7684\u987a\u5e8f\u662f\u56fa\u5b9a\u7684\u3002\n\n\u6700\u540e$p(a)$\u662f\u5f88\u597d\u7b97\u7684\uff0c$p(a) = \\frac{\\sum\\limits_{j \\; can \\; not \\; win } f_{n, j, a}}{ (4n - 13)^{\\underline{a - 13}} }$\u3002\n\n```cpp\n\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e2 + 5;\nconst int M = 4e3 + 5;\nconst int MOD = 998244353;\n\nnamespace {\n  int ch[M][5], fac[5];\n  int Add(int a, int b) { return (a += b) >= MOD? a - MOD : a; }\n  void Upd(int &a, int b) { a = Add(a, b); }\n  int Mul(int a, int b) { return (long long)a * b % MOD; }\n  int Inv(int x) { return (x == 1)? 1 : Mul(MOD - MOD / x, Inv(MOD % x)); }\n  void Math_init() {\n    for (int i = 0; i < M; ++i) {\n      ch[i][0] = 1;\n      for (int j = 1; j <= min(i, 4); ++j) {\n        ch[i][j] = Add(ch[i - 1][j - 1], ch[i - 1][j]);\n      }\n    }\n    fac[0] = 1;\n    for (int i = 1; i < 5; ++i) {\n      fac[i] = Mul(fac[i - 1], i);\n    }\n  }\n}\n\nbool Chkmax(int &a, int b) {\n  return (a < b)? (a = b, 1) : (0);\n}\n\nstruct State {\n  int dp[3][3]; // (last last bar, last bar)\n  State() {\n    memset(dp, -1, sizeof dp);\n  }\n  \n  friend bool operator < (State a, State b) {\n    for (int i = 0; i < 3; ++i)\n      for (int j = 0; j < 3; ++j)\n        if (a.dp[i][j] != b.dp[i][j])\n          return a.dp[i][j] < b.dp[i][j];\n    return 0;\n  }\n  \n  friend State Max(State a, State b) {\n    for (int i = 0; i < 3; ++i) \n      for (int j = 0; j < 3; ++j)\n        a.dp[i][j] = max(a.dp[i][j], b.dp[i][j]);\n    return a;\n  }\n  \n  friend State Trans(State a, int b) {\n    State c;\n    for (int i = 0; i < 3; ++i)\n      for (int j = 0; j < 3; ++j)\n        if (~a.dp[i][j])\n          for (int k = 0; k < 3 && i + j + k <= b; ++k)\n            Chkmax(c.dp[j][k], min(i + a.dp[i][j] + (b - i - j - k) / 3, 4));\n    return c;\n  }\n  \n};\n\nstruct Mahjong {\n  pair<State, State> god;\n  int cnt;\n  Mahjong() {\n    memset(god.first.dp, -1, sizeof god.first.dp);\n    memset(god.second.dp, -1, sizeof god.second.dp);\n    god.first.dp[0][0] = cnt = 0;\n  }\n  \n  friend bool operator < (Mahjong a, Mahjong b) {\n    return a.cnt != b.cnt? a.cnt < b.cnt : a.god < b.god;\n  }\n  \n  friend Mahjong Trans(Mahjong a, int b) {\n    a.cnt = min(a.cnt + (b >= 2), 7);\n    a.god.second = Trans(a.god.second, b);\n    if (b >= 2) {\n      a.god.second = Max(a.god.second, Trans(a.god.first, b - 2));\n    }\n    a.god.first = Trans(a.god.first, b);\n    return a;\n  }\n  \n  bool right() {\n    if (cnt == 7) return 1;\n    for (int i = 0; i < 3; ++i)\n      for (int j = 0; j < 3; ++j)\n        if (god.second.dp[i][j] == 4) return 1;\n    return 0;\n  }\n  \n} mahjong[M];\n\n\nint n, tot;\nmap<Mahjong, int> idx;\nbool win[M];\nint org[N], f[N][M][4 * N], trans[M][5];\n\nvoid Dfs_mahjong(Mahjong now) {\n  if (idx.find(now) != idx.end()) return;\n  mahjong[++tot] = now;\n  win[tot] = now.right();\n  idx[now] = tot;\n  for (int i = 0; i <= 4; ++i) {\n    Dfs_mahjong(Trans(now, i));\n  }\n}\n\nint main() {\n  Math_init();\n  Dfs_mahjong(Mahjong());\n\n  for (int i = 1; i <= tot; ++i) {\n    for (int j = 0; j <= 4; ++j) {\n      trans[i][j] = idx[Trans(mahjong[i], j)];\n    }\n  }\n\n  scanf(\"%d\", &n);\n  for (int i = 0, x; i < 13; ++i) {\n    scanf(\"%d%*d\", &x);\n    ++org[x];\n  }\n\n  f[0][1][0] = 1;\n  for (int i = 0, cp = 0; i < n; ++i) { // consider 1 ... i\n    cp += org[i + 1];\n    for (int j = 1; j <= tot; ++j) { // mahjong j\n      for (int l = org[i + 1]; l <= 4; ++l) { // trans\n        int *nf = f[i + 1][trans[j][l]], *ff = f[i][j];\n        int tmp = Mul(ch[4 - org[i + 1]][l - org[i + 1]], fac[l - org[i + 1]]);\n        for (int k = 0; k + l <= 4 * n; ++k) { // have chosen k cards\n          if (!ff[k]) continue;\n          Upd(nf[k + l], Mul(ff[k], Mul(ch[k + l - cp][l - org[i + 1]], tmp)));\n        }\n      }\n    }\n  }\n  \n  int ans = 0, dw = 1;\n  for (int i = 13; i <= 4 * n; ++i) {\n    int up = 0;\n    for (int j = 1; j <= tot; ++j) {\n      if (!win[j]) Upd(up, f[n][j][i]);\n    }\n    Upd(ans, Mul(up, Inv(dw)));\n    dw = Mul(dw, 4 * n - i);\n  }\n  printf(\"%d\\n\", ans);\n  \n  return 0;\n}\n```",
        "postTime": 1554633988,
        "uid": 20360,
        "name": "zj\u4f59\u80fd",
        "ccfLevel": 9,
        "title": "\u3010ZJOI2019\u3011\u9ebb\u5c06"
    },
    {
        "content": "[\u66f4\u68d2\u7684\u4f53\u9a8c /kel](https://www.cnblogs.com/zkyJuruo/p/13971518.html)\n\n\u8fd9\u9898\u975e\u5e38\u7684\u795e\u554a\u3002\u3002\u3002 \n\n## Solution\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u5224\u5b9a\u4e00\u526f\u724c\u662f\u5426\u662f \"\u80e1\" \u7684\u3002\n\n\u4e0d\u8981\u60f3\u7740\u7edf\u8ba1\u4e2a\u51e0\u4e2a\u503c $O(1)$ \u7b97\uff0c\u53ef\u4ee5\u8003\u8651\u590d\u6742\u5ea6\u5927\u4e00\u70b9\u7684\u3002\n\n\u9996\u5148\u5148\u628a $7$ \u4e2a\u5bf9\u5b50\u7684\u72b6\u6001\u5224\u6389\u3002\u7136\u540e\u8003\u8651 $4$ \u4e2a\u9762\u5b50\u548c $1$ \u4e2a\u5bf9\u5b50\u7684\u60c5\u51b5\u3002\n\n\u8bb0\u5f55\u4e00\u4e2a $dp_{i, j,k}$ : $i$ \u8868\u793a\u73b0\u5728\u6709\u6ca1\u6709\u7559\u51fa\u5bf9\u5b50\uff0c$j$ \u8868\u793a\u73b0\u5728\u5f62\u5982 $i, i - 1$ \u7684\u724c\u7684\u591a\u4f59\u7684\u4e2a\u6570\uff0c $k$ \u8868\u793a\u73b0\u5728\u5f62\u5982 $i$ \u7684\u724c\u5bf9\u7684\u4e2a\u6570\uff0c\u6574\u4e2a\u72b6\u6001\u7684\u503c\u8868\u793a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4ea7\u751f\u7684\u9762\u5b50\u6570\u91cf\u7684\u6700\u5927\u503c\u3002\n\n\u4f7f\u7528 **dp \u5957 dp**, \u5bf9\u4e8e\u8fd9\u4e2a $dp_{i, j, k}$ \u5206\u522b\u662f\u591a\u5c11\u7ed9\u538b\u7f29\u8d77\u6765\u3002\u8fd9\u4e2a\u72b6\u6001\u4ee5\u53ca\u8f6c\u79fb\u53ef\u4ee5 $bfs$ \u627e\u3002\n\n\u6700\u540e\u8fdb\u884c\u4e00\u4e2a\u671f\u671b $dp$\uff0c$f_{i, j, k}$ \u8868\u793a\u7b97\u4e86\u524d $i$ \u79cd\u724c\uff0c\u73b0\u5728\u603b\u5171\u6709 $j$ \u4e2a\u724c\uff0c\u76ee\u524d\u662f\u7b2c $j$ \u4e2a $dp$ \u72b6\u6001\u7684\u65b9\u6848\u6570\u3002\u6700\u540e\u62c6\u8d21\u732e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $j$ \u7b97\u6709\u591a\u5c11\u6982\u7387\u8fd8\u4f1a\u7ee7\u7eed\u52a0\u724c\u3002\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = j, i##E = k; i <= i##E; i++) \n#define R(i, j, k) for(int i = j, i##E = k; i >= i##E; i--)\n#define ll long long\n#define ull unsigned long long \n#define db double\n#define pii pair<int, int>\n#define mkp make_pair\nusing namespace std;\nconst int N = 405;\nconst int M = 2200;\nconst int mod = 998244353;\nint qpow(int x, int y) {\n\tif(x == 0) return 0;\n\tint res = 1;\n\tfor(; y; x = 1ll * x * x % mod, y >>= 1) if(y & 1) res = 1ll * res * x % mod;\n\treturn res;\n}\nint ny(int x) { return qpow(x, mod - 2); }\nint n, winid, ans;\nint max(int a, int b) { return a > b ? a : b; }\nvoid Max(int &a, int b) { a = max(a, b); } \nstruct DPAM { \n\tint f[3][3]; \n\tvoid clear() { L(i, 0, 2) L(j, 0, 2) f[i][j] = -1; }\n};\nDPAM operator + (DPAM aa, int bb) {\n\tDPAM res; res.clear(); \n\tL(i, 0, 2) L(j, 0, 2) if(aa.f[i][j] != -1) \n\t\tL(k, 0, 2) if(bb >= i + j + k) Max(res.f[j][k], min(aa.f[i][j] + i + (bb - i - j - k) / 3, 4));\n\treturn res;\n}\nvoid FMAX(DPAM &aa, DPAM bb) { \n\tL(i, 0, 2) L(j, 0, 2) Max(aa.f[i][j], bb.f[i][j]); \n}\nstruct node { \n\tint cnt; DPAM dp[2]; \n\tvoid clear() { cnt = 0; dp[0].clear(), dp[1].clear(); }\n};\nnode win() { node res; res.clear(), res.cnt = 114514; return res; }\nbool check(node aa) {\n\tif(aa.cnt >= 7) return 1;\n\tL(i, 0, 2) L(j, 0, 2) if(aa.dp[1].f[i][j] >= 4) return 1;\n\treturn 0;\n}\nbool operator < (node aa, node bb) {\n\tL(t, 0, 1) L(i, 0, 2) L(j, 0, 2) if(aa.dp[t].f[i][j] ^ bb.dp[t].f[i][j]) return aa.dp[t].f[i][j] < bb.dp[t].f[i][j];\n\treturn aa.cnt < bb.cnt;\n}\nnode operator + (node aa, int bb) {\n\tif(aa.cnt == 114514) return aa;\n\tnode res; \n\tres.clear(), res.cnt = aa.cnt + (bb >= 2);\n\tFMAX(res.dp[0], aa.dp[0] + bb);\n\tFMAX(res.dp[1], aa.dp[1] + bb);\n\tif(bb >= 2) FMAX(res.dp[1], aa.dp[0] + (bb - 2));\n\tif(check(res)) return win();\n\treturn res;\n}\nint tot, dp[2][N][M];\nmap<node, int> mp;\nint G[M][5], jc[N], njc[N];\nint C(int x, int y) { return 1ll * jc[x] * njc[x - y] % mod * njc[y] % mod; }\nvoid bfs() {\n\tqueue<node> q;\n\tnode gg; \n\tgg.clear(), gg.cnt = 0, gg.dp[0].f[0][0] = 0;\n\tmp[gg] = ++tot, q.push(gg);\n\twhile(!q.empty()) {\n\t\tnode u = q.front(); int id = mp[u];\n\t\tq.pop();\n\t\tL(i, 0, 4) {\n\t\t\tnode v = u + i;\n\t\t\tif(!mp.count(v)) {\n\t\t\t\tG[id][i] = mp[v] = ++tot, q.push(v);\n\t\t\t\tif(v.cnt == 114514) winid = tot;\n\t\t\t} \n\t\t\telse G[id][i] = mp[v];\n\t\t}\n\t}\n}\nint cnt[N];\nvoid work() {\n\tdp[0][0][1] = 1;\n\tL(i, 1, n) {\n\t\tint now = (i & 1);\n\t\tmemset(dp[now], 0, sizeof(dp[now]));\n\t\tL(j, 1, tot) L(k, 0, (i - 1) * 4) L(t, 0, 4 - cnt[i]) \n\t\t\t(dp[now][k + t][G[j][t + cnt[i]]] += 1ll * dp[now ^ 1][k][j] * C(4 - cnt[i], t) % mod) %= mod;\n\t}\n\tL(i, 0, n * 4 - 13) L(j, 1, tot) if(j != winid) (ans += 1ll * ny(C(4 * n - 13, i)) * dp[n & 1][i][j] % mod) %= mod;\n}\nint mian() {\n\tbfs(); \n\tscanf(\"%d\", &n);\n\tjc[0] = njc[0] = 1;\n\tL(i, 1, n * 4) jc[i] = 1ll * jc[i - 1] * i % mod, njc[i] = ny(jc[i]);\n\tL(i, 1, 13) {\n\t\tint x, y; \n\t\tscanf(\"%d%d\", &x, &y), cnt[x]++;\n\t}\n\twork();\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1605275546,
        "uid": 173660,
        "name": "zhoukangyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "ZJOI2019\u795e\u9898\uff0c\u95f4\u63a5\u9001\u6211\u9000\u5f79\u7684\u795e\u9898233\n\n\u8003\u573a\u4e0a\u7531\u4e8eT2\u5199\u6302\u53bb\u5199\u7206\u641c\u7684\u65f6\u5019\u5df2\u7ecf\u6ca1\u591a\u5c11\u65f6\u95f4\u4e86\uff0c\u6240\u4ee5\u5c31\u5199\u6302\u4e86233\n\n\u8fd9\u91cc\u4e0d\u591a\u5e9f\u8bdd\u76f4\u63a5\u5f00\u59cb\u8bb2\u6b63\u89e3\u5427\uff0c\u6211\u4eec\u628a\u7b97\u6cd5\u5206\u6210\u4e24\u90e8\u5206\n\n------\n\n### 1.\u5efa\u4e00\u4e2a\u201c\u80e1\u724c\u81ea\u52a8\u673a\u201d\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u8fd9\u9898\u4e0d\u80fd\u8f6c\u5316\u4e3a\u4e00\u822cDP\u95ee\u9898\u6c42\u89e3\u7684\u6700\u5927\u74f6\u9888\u5c31\u662f\u56e0\u4e3a\u5b83\u7684\u72b6\u6001\u5f88\u8be1\u5f02\n\n\u4f46\u662f\u6211\u4eec\u7ec6\u7ec6\u4e00\u60f3\uff0c\u5f62\u5982$\\{1,1,1,2,3,4,5,6,7,8,9,10,12,12\\}$\u548c$\\{3,3,3,5,6,7,9,10,11,14,15,16,20,20\\}$\u7684\u672c\u8d28\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff08\u90fd\u662f\u4e09\u4e2a\u987a\u5b50+\u4e00\u4e2a\u523b\u5b50+\u4e00\u4e2a\u96c0\u5934\u7684\u5f62\u5f0f\uff0c\u4e14**\u76f8\u5bf9\u5927\u5c0f**\u5206\u5e03\u76f8\u540c\uff09\n\n\u90a3\u4e48\u8003\u8651\u5230\u4e00\u5171\u53ea\u6709$13$\u5f20\u724c\uff0c\u90a3\u4e48\u6700\u540e\u7684\u6709\u6548\u96c6\u5408\u6570\u5fc5\u7136\u5f88\u5c11\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u8fd9\u4e9b\u96c6\u5408\u90a3\u4e48\u53ef\u4ee5\u5e2e\u52a9DP\u4e86\n\n\u5982\u679c\u4f60\u77e5\u9053**DP\u5957DP**\u7684\u59ff\u52bf\uff0c\u90a3\u4e48\u5c31\u4f1a\u5957\u8def\u5730\u660e\u767d\u5185\u5c42\u7684DP\u5e94\u8be5\u7528**\u81ea\u52a8\u673a**\u7684\u8f6c\u79fb\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u5927\u81f4\u7684\u76ee\u6807\u5c31\u51fa\u73b0\u4e86\uff1a\n\n\u5efa\u51fa\u4e00\u4e2a\u81ea\u52a8\u673a\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u72b6\u6001\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u5411\u5b50\u8282\u70b9\u8fde\u7684\u8fb9\u5c31\u662f\u6478\u724c\u4e4b\u540e\u80fd\u8f6c\u79fb\u5230\u7684\u72b6\u6001\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5148\u8003\u8651\u600e\u4e48\u5efa\u8fd9\u4e2a\u81ea\u52a8\u673a\uff0c\u8fd8\u662f\u8003\u8651DP\n\n\u6211\u4eec\u8bbe$f_{0/1,i,j,k}$\u8868\u793a\u76ee\u524d\u5904\u7406\u5b8c\u4e86\u524d$i$\u79cd\u724c\uff0c\u8fd8\u5269\u4e0b$j$\u7ec4$(i-1,i)$\u4ee5\u53ca$k$\u5f20$i$\uff0c\u4e14\u662f\u5426\uff08\u7528$0/1$\u8868\u793a\uff09\u5b58\u5728\u96c0\u5934\u65f6**\u6700\u591a\u7684\u9762\u5b50\u6570**\n\n\u7531\u4e8e\u5f53$j,k\\ge 3$\u65f6\u53ef\u4ee5\u76f4\u63a5\u7528$i-1,i$\u7ec4\u6210\u523b\u5b50\uff0c\u56e0\u6b64\u6211\u4eec\u72b6\u6001\u4e2d\u7684$j,k\\le 2$\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5f00\u4e00\u4e2a$3\\times3$\u7684\u77e9\u9635\u8868\u793a\u72b6\u6001\uff0c\u5355\u4e2a\u8f6c\u79fb\u7684\u65f6\u5019\u679a\u4e3e\u7528\u4e8e\u62fc\u9762\u5b50\uff0c\u4e0e$(i-1,i)$\u62fc\u987a\u5b50\uff0c\u4ee5\u53ca\u7528\u6765\u4fdd\u7559\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5c06\u591a\u4f59\u7684\u62ff\u6765\u62fc\u523b\u5b50\u5373\u53ef\n\n\u7136\u540e\u8003\u8651\u6bcf\u6b21\u591a\u51fa\u4e00\u4e2a\u6570\u503c\uff0c\u6211\u4eec\u76f4\u63a5\u8ba8\u8bba\u662f\u5426\u8981\u7559\u51fa\u4e00\u4e2a\u96c0\u5934\uff0c\u5206\u60c5\u51b5\u8f6c\u79fb\u5373\u53ef\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5e76\u6ca1\u6709\u8003\u8651\u4e03\u5bf9\u5b50\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u76f4\u63a5\u8bb0\u5f55\u96c0\u5934\u7684\u4e2a\u6570\uff0c\u7279\u5224\u4e86\u5373\u53ef\n\n\u56e0\u6b64\u5269\u4e0b\u7ec8\u6b62\u72b6\u6001\u7684\u5224\u65ad\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u628a\u80fd\u80e1\u7684\u70b9\u4f5c\u4e3a\u7ec8\u6b62\u8282\u70b9\u7ed3\u675f\u5373\u53ef\n\n\u5177\u4f53\u6784\u9020\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4e00\u4e2a```map```\u6765\u53bb\u91cd\uff0c\u7136\u540e\u7528**BFS**\u6765\u6269\u5c55\u72b6\u6001\uff0c\u8fd9\u4e2a\u5177\u4f53\u770b\u4ee3\u7801\n\n------\n\n### 2.\u671f\u671bDP\n\n\u5148\u8bf4\u4e00\u53e5\uff0c\u524d\u9762\u7531\u4e8e\u81ea\u52a8\u673a\u5bf9\u4e8e\u4efb\u610f\u6570\u636e\u6784\u9020\u76f8\u540c\uff0c\u6240\u4ee5\u603b\u70b9\u6570\u662f\u56fa\u5b9a\u7684$2092$\uff0c\u5982\u524d\u8a00\u6240\u8ff0\u4e0d\u5927\n\n\u90a3\u4e48\u8003\u8651DP\u6c42\u89e3\u6700\u540e\u7684\u95ee\u9898\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u7ecf\u5178\u5957\u8def\uff0c\u5c06\u6c42$\\ge$\u7684\u5316\u4e3a\u6c42$>$\u7136\u540e\u6700\u540e\u52a0\u4e0a\u7b49\u4e8e\u7684\u60c5\u51b5\u5373\u53ef\n\n\u5177\u4f53\u5230\u8fd9\u9053\u9898\u4e0a\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u51fa**$i$\u8f6e\u540e\u4e0d\u80e1\u7684\u65b9\u6848\u6570**\u7136\u540e\u4e58\u4e0a\u8d21\u732e\uff0c\u6700\u540e\u7684\u603b\u7b54\u6848\u52a0$1$\u5373\u53ef\n\n\u90a3\u4e48\u5927\u81f4\u7684DP\u65b9\u7a0b\u5c31\u6709\u4e86\uff0c\u6211\u4eec\u8bbe$f_{i,j,k}$\u8868\u793a\u9009\u4e86\u524d$i$\u79cd\u724c\uff0c\u4e00\u5171\u7528\u4e86$j$\u5f20\uff0c\u6b64\u65f6\u4f4d\u4e8e**\u81ea\u52a8\u673a\u4e0a$k$\u53f7\u70b9**\u7684\u65b9\u6848\u6570\n\n\u90a3\u4e48\u8f6c\u79fb\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u679a\u4e3e\u7b2c$i$\u79cd\u724c\u9009\u7684\u5f20\u6570$t$\uff0c$f_{i,j,k}$\u5411$f_{i+1,j+t,node_k.son_{a_i+t}}$\u8f6c\u79fb\uff0c\u6ce8\u610f\u4e0d\u8981\u5fd8\u8bb0\u4e58\u4e0a\u7ec4\u5408\u6570$C_{4-a_i}^t$\n\n\u6c42\u51fa$f$\u6570\u7ec4\u540e\u6700\u540e\u7684\u7b54\u6848\u7edf\u8ba1\u5c31\u5341\u5206\u7b80\u5355\u4e86\uff0c\u4ee4$m=4n-13$\uff1a\n\n$$ans=\\sum_{i=1}^m \\frac{f_i\\cdot i!\\cdot(m-i)!}{m!}+1$$\n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u524d\u540e\u90fd\u53ef\u4ee5\u968f\u4fbf\u9009\uff0c\u56e0\u6b64\u4e0d\u518d\u8d58\u8ff0\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u4e0a\u754c\u4e3a$2092\\cdot n^2$\u7684\u4f18\u79c0\u505a\u6cd5\uff0c\u56e0\u4e3a\u5e38\u6570\u5f88\u5c0f\u4e14\u8dd1\u4e0d\u6ee1\u56e0\u6b64\u8db3\u4ee5\u901a\u8fc7\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<map>\n#define RI register int\n#define CI const int&\nusing namespace std;\nconst int N=105,MX=2100,mod=998244353;\ninline void maxer(int& x,CI y)\n{\n    if (y>x) x=y;\n}\ninline int min(CI a,CI b)\n{\n    return a<b?a:b;\n}\nstruct Matrix\n{\n    int mat[3][3];\n    inline int* operator [] (CI x) { return mat[x]; }\n    inline Matrix(void)\n    {\n        memset(mat,-1,sizeof(mat));\n    }\n    friend inline bool operator != (Matrix A,Matrix B)\n    {\n        for (RI i=0;i<3;++i) for (RI j=0;j<3;++j)\n        if (A[i][j]!=B[i][j]) return 1; return 0;\n    }\n    friend inline bool operator < (Matrix A,Matrix B)\n    {\n        for (RI i=0;i<3;++i) for (RI j=0;j<3;++j)\n        if (A[i][j]!=B[i][j]) return A[i][j]<B[i][j];\n    }\n    inline bool Com_Hu(void)\n    {\n        for (RI i=0;i<3;++i) for (RI j=0;j<3;++j)\n        if (mat[i][j]>=4) return 1; return 0;\n    }\n    inline void flush(Matrix pre,CI num)\n    {\n        for (RI i=0;i<3;++i) for (RI j=0;j<3;++j)\n        if (~pre[i][j]) for (RI k=0;k<3&&i+j+k<=num;++k)\n        maxer(mat[j][k],min(i+pre[i][j]+(num-i-j-k)/3,4));\n    }\n};\nstruct Hu_Auto_Node\n{\n    Matrix p[2]; int cur,ch[5];\n    inline Hu_Auto_Node(void)\n    {\n        memset(ch,0,sizeof(ch)); cur=0; p[0]=p[1]=Matrix();\n    }\n    inline bool is_Hu(void)\n    {\n        if (cur>=7) return 1; return p[1].Com_Hu();\n    }\n    inline void Hu(void)\n    {\n        memset(ch,0,sizeof(ch)); cur=-1; p[0]=p[1]=Matrix();\n    }\n    friend inline bool operator < (Hu_Auto_Node A,Hu_Auto_Node B)\n    {\n        if (A.cur!=B.cur) return A.cur<B.cur;\n        if (A.p[0]!=B.p[0]) return A.p[0]<B.p[0];\n        if (A.p[1]!=B.p[1]) return A.p[1]<B.p[1]; return 0;\n    }\n    friend inline Hu_Auto_Node operator + (Hu_Auto_Node A,CI num)\n    {\n        if (A.is_Hu()) return A.Hu(),A; Hu_Auto_Node s;\n        s.p[0].flush(A.p[0],num); s.p[1].flush(A.p[1],num);\n        if (num>=2) s.p[1].flush(A.p[0],num-2);\n        s.cur=A.cur+(num>=2); if (s.is_Hu()) s.Hu(); return s;\n    }\n};\nclass Hu_Automation\n{\n    private:\n        map <Hu_Auto_Node,int> Hash;\n        inline void expand(CI id)\n        {\n            for (RI i=0;i<=4;++i)\n            {\n                Hu_Auto_Node son=node[id]+i;\n                if (!Hash.count(son)) node[Hash[son]=++tot]=son;\n                node[id].ch[i]=Hash[son];\n            }\n        }\n    public:\n        Hu_Auto_Node node[2100]; int tot;\n        inline Hu_Automation(void)\n        {\n            node[1].p[0][0][0]=0; node[tot=2].cur=-1;\n            Hash[node[1]]=1; Hash[node[2]]=2; expand(1);\n            for (RI i=3;i<=tot;++i) expand(i);\n        }\n        /*inline void check(void)\n        {\n            printf(\"%d\\n\",tot); for (RI i=1;i<=tot;++i,putchar('\\n'))\n            for (RI j=0;j<=4;++j) printf(\"%d \",node[i].ch[j]);\n        }*/\n}HA;\nint f[2][N<<2][MX],a[N],fact[N<<2],inv[N<<2],n,m,x,y,nw,ans;\ninline void inc(int& x,CI y)\n{\n    if ((x+=y)>=mod) x-=mod;\n}\ninline int quick_pow(int x,int p=mod-2,int mul=1)\n{\n    for (;p;p>>=1,x=1LL*x*x%mod) if (p&1) mul=1LL*mul*x%mod; return mul;\n}\ninline void init(CI n)\n{\n    RI i; for (fact[0]=i=1;i<=n;++i) fact[i]=1LL*fact[i-1]*i%mod;\n    for (inv[n]=quick_pow(fact[n]),i=n-1;~i;--i) inv[i]=1LL*inv[i+1]*(i+1)%mod;\n}\ninline int C(CI n,CI m)\n{\n    return 1LL*fact[n]*inv[m]%mod*inv[n-m]%mod;\n}\ninline void calc(CI x,CI y)\n{\n    inc(ans,1LL*f[nw][x][y]*fact[x]%mod*fact[m-x]%mod);\n}\nint main()\n{\n    RI i,j,k,t; for (scanf(\"%d\",&n),i=1;i<=13;++i) scanf(\"%d%d\",&x,&y),++a[x];\n    for (init(m=(n<<2)-13),f[0][0][1]=i=1;i<=n;++i)\n    for (nw=i&1,memset(f[nw],0,sizeof(f[nw])),j=m;~j;--j)\n    for (k=1;k<=HA.tot;++k) if (f[nw^1][j][k]) for (t=0;t<=4-a[i];++t)\n    inc(f[nw][j+t][HA.node[k].ch[a[i]+t]],1LL*f[nw^1][j][k]*C(4-a[i],t)%mod);\n    for (nw=n&1,i=1;i<=m;++i) for (calc(i,1),j=3;j<=HA.tot;++j) calc(i,j);\n    return printf(\"%d\",(1LL*ans*inv[m]%mod+1)%mod),0;\n}\n```",
        "postTime": 1555593529,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "# Solution\n\n\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u724c\u7684\u96c6\u5408\u662f\u80e1\u7684\u3002\n\n - \u9996\u5148\u7b2c\u4e00\u79cd\u724c\u578b\u53ea\u9700\u8bb0\u5f55\u6709\u591a\u5c11\u4e2d\u724c\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7$2$\u3002\n\n - \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u724c\u578b\uff0c\u53ef\u4ee5\u7528DP\u89e3\u51b3\u3002\u8bbe$f_{0/1,i,j,k}$\u5df2\u7ecf\u8003\u8651\u4e86\u524d$i$\u79cd\u5927\u5c0f\uff0c\u8868\u793a\u4e4b\u524d\u662f\u5426\u9884\u7559\u4e86\u5bf9\u5b50\uff0c\u4e4b\u524d\u9884\u7559\u4e86$j$\u5bf9$i-1,i$,\u4ee5\u53ca$k$\u4e2a$i$\u7528\u4e8e\u51d1\u987a\u5b50\uff08\u5927\u5c0f\u76f8\u90bb\u7684\u9ebb\u5c06\u724c\uff09\u3002\u6bcf\u6b21\u8f6c\u79fb\u53ea\u9700\u679a\u4e3e\u7b2c$i+1$\u79cd\u724c\u6709\u591a\u5c11\u5f20\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a$DP$\u6709\u6548\u72b6\u6001\u5f88\u5c11\uff0c\u53ea\u6709$2092$\u79cd\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u81ea\u52a8\u673a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bc6\u522b\u6240\u6709\u79cd\u7c7b\u7684\u80e1\u724c\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u89e3\u51b3\u672c\u95ee\u9898\uff0c\u4e00\u4e2a\u7ecf\u5178\u5957\u8def\u662f\u628a\u6bcf\u4e2a\u96c6\u5408\u7684\u8d21\u732e\u4e3a\u6bcf\u6b21\u6478\u724c\u540e\u68c0\u67e5\u6709\u662f\u5426\u80e1\u4e86\uff0c\u6709\u5219\u7ed3\u675f\uff0c\u6ca1\u6709\u5219\u52a0$1$\u3002\u4e5f\u5c31\u662f\u8bbe$f(i)$\u8868\u793a\u6478\u4e86$i$\u5f20\u724c\u8fd8\u6ca1\u80e1\u7684\u96c6\u5408\u6570\uff0c\u7b54\u6848\u4e3a\n\n$$\\frac{\\sum_{i=1}^{4n-13}f(i)\\cdot i! \\cdot (4n-13-i)!}{(4n-13)!}$$\n\n\u8bbe$f_{i,j,k}$\u8868\u793a\u5df2\u7ecf\u8003\u8651\u4e86\u5927\u5c0f\u4e3a$1..i$\u7684\u9ebb\u5c06\u724c\uff0c\u5df2\u7ecf\u6478\u4e86$j$\u5f20\u724c\uff0c\u5728\u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\u4e3a$k$\u3002\u6bcf\u6b21\u8f6c\u79fb\u65f6\u679a\u4e3e\u4e0b\u4e00\u79cd\u724c\u6709\u591a\u5c11\u4e58\u4e0a\u7ec4\u5408\u6570\u8f6c\u79fb\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline void chkmax(int &a, int b) {if (a < b) a = b;}\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\ntypedef long long ll;\nconst int maxn = 405, maxs = 2105, mod = 998244353;\n\nstruct node\n{\n\tint f[3][3];\n\n\tnode() {memset(f, -1, sizeof(f));}\n\n\tint* operator [] (const int a) {return f[a];}\n\tbool operator < (const node &a) const {\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t\tfor (int j = 0; j < 3; ++j)\n\t\t\t\tif (f[i][j] != a.f[i][j]) return f[i][j] < a.f[i][j];\n\t\treturn 0;\n\t}\n\n\tbool operator == (const node &a) const {\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t\tfor (int j = 0; j < 3; ++j)\n\t\t\t\tif (f[i][j] != a.f[i][j]) return 0;\n\t\treturn 1;\n\t}\n\t\n};\n\nstruct mahjong\n{\n\n\tnode f, g;\n\tint cnt;\n\n\tmahjong() {f[0][0] = cnt = 0;}\n\t\n\tbool operator < (const mahjong &a) const {\n\t\treturn f == a.f ? (g == a.g ? cnt < a.cnt : g < a.g) : f < a.f;\n\t}\n\n\tbool operator == (const mahjong &a) const {\n\t\treturn f == a.f && g == a.g && cnt == a.cnt;\n\t}\n\n\tmahjong trans(int x)\n\t{\n\t\tmahjong ans;\n\t\tans.cnt = min(7, cnt + (x >= 2));\n\t\tfor (int i = 0; i < 3; ++i)\n\t\t\tfor (int j = 0; j < 3; ++j) {\n\t\t\t\tif (~f[i][j]) {\n\t\t\t\t\tfor (int k = 0; i + j + k <= x && k < 3; ++k)\n\t\t\t\t\t\tchkmax(ans.f[j][k], min(4, f[i][j] + i + ((x - i - j - k) >= 3)));\n\t\t\t\t\tif (x >= 2)\n\t\t\t\t\t\tfor (int k = 0; i + j + k <= x - 2 && k < 3; ++k)\n\t\t\t\t\t\t\tchkmax(ans.g[j][k], min(4, f[i][j] + i));\n\t\t\t\t}\n\t\t\t\tif (~g[i][j]) {\n\t\t\t\t\tfor (int k = 0; i + j + k <= x && k < 3; ++k)\n\t\t\t\t\t\tchkmax(ans.g[j][k], min(4, g[i][j] + i + ((x - i - j - k) >= 3)));\n\t\t\t\t}\n\t\t\t}\n\t\treturn ans;\n\t}\n\t\n} ;\n\nmap<mahjong, int> Id;\nint tot, ch[maxs][5], h[maxs];\nint n, s[maxn];\nint fac[maxn], ifac[maxn], dp[2][maxn][maxs], *f[maxn], *g[maxn];\n\ninline bool check(mahjong &s)\n{\n\tif (s.cnt >= 7) return 1;\n\tfor (int i = 0; i < 3; ++i)\n\t\tfor (int j = 0; j < 3; ++j) if (s.g[i][j] >= 4) return 1;\n\treturn 0;\n}\n\nint dfs(mahjong s)\n{\n\tif (check(s)) return 0;\n\tint &t = Id[s];\n\tif (t) return t;\n\tt = ++tot;\n\tfor (int i = 0; i <= 4; ++i)\n\t\tch[t][i] = dfs(s.trans(i));\n\treturn t;\n}\n\ninline int C(int n, int m)\n{\n\treturn (ll)fac[n] * ifac[m] % mod * ifac[n - m] % mod;\n}\n\ninline int A(int n, int m)\n{\n\treturn (ll)fac[n] * ifac[n - m] % mod;\n}\n\nint main()\n{\n\tdfs(mahjong());\n\t\n\tn = gi();\n\tfor (int w, i = 1; i <= 13; ++i) w = gi(), gi(), ++s[w];\n\n\tfac[0] = 1; ifac[0] = ifac[1] = 1;\n\tfor (int i = 1; i <= (n << 2); ++i) fac[i] = (ll)fac[i - 1] * i % mod;\n\tfor (int i = 2; i <= (n << 2); ++i) ifac[i] = (ll)(mod - mod / i) * ifac[mod % i] % mod;\n\tfor (int i = 1; i <= (n << 2); ++i) ifac[i] = (ll)ifac[i - 1] * ifac[i] % mod;\n\n\tfor (int i = 0; i <= (n << 2); ++i) f[i] = dp[1][i], g[i] = dp[0][i];\n\n\tg[0][1] = 1;\n\tfor (int i = 0, sum = 0; i < n; ++i, sum += s[i]) {\n\t\tswap(f, g);\n\t\tfor (int j = 0; j <= (i << 2); ++j)\n\t\t\tfor (int k = 1; k <= tot; ++k) g[j][k] = 0;\n\t\tfor (int j = sum; j <= (i << 2); ++j)\n\t\t\tfor (int k = 1; k <= tot; ++k) {\n\t\t\t\tif (!f[j][k]) continue;\n\t\t\t\tfor (int t = s[i + 1]; t <= 4; ++t)\n\t\t\t\t\tif (ch[k][t]) g[j + t][ch[k][t]] = (g[j + t][ch[k][t]] + (ll)C(4 - s[i + 1], t - s[i + 1]) % mod * f[j][k]) % mod;\n\t\t\t}\n\t}\n\n\tint ans = 0;\n\tfor (int i = 1; i <= (n << 2) - 13; ++i) {\n\t\tint sum = 0;\n\t\tfor (int j = 1; j <= tot; ++j) sum = (sum + g[i + 13][j]) % mod;\n\t\tans = (ans + (ll)sum * fac[i] % mod * fac[4 * n - 13 - i]) % mod;\n\t}\n\tprintf(\"%lld\\n\", ((ll)ans * ifac[4 * n - 13] + 1) % mod);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1555405069,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5279)\n\n~~\u7a81\u7136\u60f3\u8d77\u67d0\u4e2a\u795e\u4ed9\u6559\u4e86\u6211\u8fd9\u9053\u795e\u4ed9\u9898qwq\u90a3\u5c31\u5de9\u56fa\u4e00\u4e0b\u5427~~\n\n## \u9898\u610f\u7b80\u8ff0\n\n- \u4f60\u670913\u5f20\u724c\uff0c\u8fd8\u6709 $4n-13$ \u5f20\u724c\u672a\u6478\u3002\n\n- \u5bf9\u4e8e\u672a\u6478\u7684\u6240\u6709\u6392\u5217\uff0c\u5b9a\u4e49 $P$ \u4e3a\u6700\u5c0f\u7684 $i$ \u6ee1\u8db3 $S_i$ \u5b58\u5728\u4e00\u4e2a\u5b50\u96c6\u662f\u80e1\u7684\u3002\n\n- \u6c42 $P$ \u7684\u671f\u671b\u3002\n\n# dp of dp\n\n\u5148\u8003\u8651\u6211\u4eec**\u6700\u540e**\u9700\u8981\u4ec0\u4e48\u3002\n\n\u5047\u8bbe\u6211\u4eec\u77e5\u9053 $g_i$ \u8868\u793a\u6478\u4e86 $i$ \u5f20\u724c\u540e**\u4e0d\u80e1**\u7684\u65b9\u6848\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u7b54\u6848\u8f6c\u5316\u6210\u4e0b\u5f0f\u3002\n\n$\\dfrac{\\sum_{i=1}^{4n-13}g_i*i!(4n-13-i)!}{(4n-13)!}+1$\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u7b54\u6848\u8f6c\u5316\u4e3a\u6478\u4e86 $i$ \u5f20\u724c**\u4e0d\u80e1**\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u4f55\u5224\u65ad\u4e00\u526f\u724c\u80e1\u6ca1\u80e1\u5462\uff08~~\u770b\u51fa\u6765~~\uff09\u3002\n\n\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u628a\u76f8\u540c\u7684\u4e09\u4e2a\u987a\u5b50\u89c6\u4e3a\u4e09\u4e2a\u523b\u5b50\uff0c\u8fd9\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\uff0c**\u76f8\u540c\u7684\u987a\u5b50\u6700\u591a\u53ea\u6709\u4e24\u4e2a**\u3002\n\n\u5148\u4e0d\u8003\u8651\u4e03\u5bf9\u5b50\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u8bbe $f_{i,k,l,x}$ \u8868\u793a\u53ea\u8003\u8651 $[1,i]$ \u4e4b\u95f4\u7684\u9ebb\u5c06\uff0c\u4ece $i-1$ \u5f00\u59cb\u7684**\u523b\u5b50**\u6709 $k$ \u5f20\uff0c\u4ece $i$ \u5f00\u59cb\u7684**\u523b\u5b50**\u6709 $l$ \u5f20\uff0c\u662f\u5426\u5df2\u7ecf\u9009\u51fa\u4e86\u4e00\u4e2a\u5bf9\u5b50\uff08\u5373 $x=0/1$\uff09\uff0c**\u6700\u591a**\u80fd\u7ec4\u6210\u591a\u5c11\u523b\u5b50\u3002\n\n\u90a3\u4e48\u80fd\u80e1\u724c\u7684\u6761\u4ef6\u5c31\u662f $f_n,k,l,1>3$\u3002\n\n\u4e03\u5bf9\u5b50\u6613\u7279\u5224\u3002\n\n\u6240\u4ee5\u628a18\u7ef4\u7684\u72b6\u6001\u5168\u538b\u8fdbdp\u91cc\u5c31\u597d\u5566\u3002\n\n\u4ee4 $dp_{i,j,k,S}$ \u8868\u793a\u7528\u4e86 $[1,i]$\uff0c\u4e00\u5171\u9009\u4e86 $j$ \u5f20\u724c\uff0c\u7528 $k$ \u79cd\u724c\u53ef\u4ee5\u7ec4\u6210**\u5bf9\u5b50**\uff0c\u4e1418\u7ef4dp\u7684\u72b6\u6001\u662f $S$ \u7684\u65b9\u6848\u6570\u3002\n\n\u8fd9\u4e2a $S$ \u770b\u8d77\u6765\u597d\u5927\u600e\u4e48\u529eqaq\uff0c\u53ef\u4ee5\u8003\u8651**\u63d0\u524d\u641c\u51fa\u6240\u6709\u53ef\u80fd**\u7684 $S$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5408\u6cd5\u7684\u72b6\u6001**\u7edf\u4e00**\u4e3a\u72b6\u6001 $T$\u3002\n\n~~\u66b4\u529b~~\u53d1\u73b0\u4e0d\u80e1\u7684\u72b6\u6001**\u4e0d\u8d85\u8fc73000**\uff0c\u53ef\u4ee5\u76f4\u63a5\u83bddpqwq\u3002\n\n\u9644\u4e0a\u4ee3\u7801qwq\u3002\n\n```cpp\n/*\n***\n\u8fd8\u8981\u7ee7\u7eed\u52aa\u529b\n\u6210\u4e3a\u4e00\u540d\u70e4\u5495\u5b66\u5bb6\u54e6\n***\n*/\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll Mo=998244353;\nll m,n,p,nxt[3005][5],tot,vis[105],C[5][5],fac[505],inv[505],dp[105][405][4005];\nmap<vector<ll>,ll>mp;\ntemplate <typename T> void rd(T &x){\n\tll fl=1;x=0;char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') fl=-fl;\n\tfor(;isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n\tx*=fl;\n}\nvoid wr(ll x){\n\tif(x<0) x=-x,putchar('-');\n\tif(x<10) putchar(x+'0');\n\tif(x>9) wr(x/10),putchar(x%10+'0');\n}\ninline void Max(ll &x,ll y){x=max(x,y);}\nll dfs(vector<ll> nw){\n\tif(mp.find(nw)!=mp.end()) return mp[nw];\n\tmp[nw]=++tot;\n\tll ID=tot;\n\tfor(ll i=0;i<=4;++i){\n\t\tvector<ll> temp; temp.clear();\n\t\tfor(ll j=0;j<19;++j) temp.push_back(-1);\n\t\ttemp[18]=nw[18]+(i>=2);\n\t\tfor(ll a=0;a<3;++a) for(ll b=0;b<3;++b) for(ll k=0;k<3&&a+b+k<=i;++k){\n\t\t\tif(nw[a+b*3]!=-1) Max(temp[b+k*3],nw[a+b*3]+a+(i-a-b-k)/3);\n\t\t\tif(nw[a+b*3+9]!=-1) Max(temp[b+k*3+9],nw[a+b*3+9]+a+(i-a-b-k)/3);\n\t\t\tif(a+b+k+2<=i&&nw[a+b*3]!=-1) Max(temp[b+k*3+9],nw[a+b*3]+a); \n\t\t}\n\t\tfor(ll j=0;j<18;++j) temp[j]=min(temp[j],4ll);\n\t\tif(temp[9]>=4||temp[18]>=7) nxt[ID][i]=0;\n\t\telse nxt[ID][i]=dfs(temp);\n\t}\n\treturn ID;\n}\nll pre(){\n\tvector<ll> nw;\n\tfor(ll i=0;i<18;++i) nw.push_back(-1); nw.push_back(0);\n\tnw[0]=0;\n\treturn dfs(nw);\n}\nll pw(ll x,ll y){\n\tll s=1;\n\twhile(y){\n\t\tif(y&1) s=1ll*s*x%Mo;\n\t\tx=1ll*x*x%Mo;y>>=1;\n\t}\n\treturn s;\n}\nint main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tdp[0][0][pre()]=1;\n\trd(n);\n\tfor(ll i=0;i<=4;++i){\n\t\tC[i][0]=1;\n\t\tfor(ll j=1;j<=i;++j) C[i][j]=(C[i-1][j]+C[i-1][j-1])%Mo;\n\t}\n\tfac[0]=1;\n\tfor(ll i=1;i<505;++i) fac[i]=1ll*fac[i-1]*i%Mo;\n\tfor(ll i=0;i<505;++i) inv[i]=pw(fac[i],Mo-2); \n\tfor(ll i=1,x,y;i<=13;++i){\n\t\trd(x),rd(y);\n\t\tvis[x]++; \n\t}\n\tll ans=0;\n\tfor(ll i=1;i<=n;++i)\n\t\tfor(ll j=0;j<=4*(i-1);++j)\n\t\t\tfor(ll k=1;k<=tot;++k)\n\t\t\t\tif(dp[i-1][j][k])\n\t\t\t\t\tfor(ll l=0;l<=4-vis[i];++l)\n\t\t\t\t\t\t(dp[i][j+l][nxt[k][vis[i]+l]]+=1ll*dp[i-1][j][k]*C[4-vis[i]][l]%Mo)%=Mo;\n\tfor(ll j=0;j<=4*n-13;++j) \n\t\tfor(ll k=1;k<=tot;++k)\n\t\t\tif(dp[n][j][k]) (ans+=1ll*fac[j]*fac[4*n-13-j]%Mo*dp[n][j][k]%Mo)%=Mo;\n\twr(1ll*ans*inv[4*n-13]%Mo);puts(\"\");\n\treturn 0;\n}\n```\n\n\u6b22\u8fce\u78be\u538bqaq\u3002\n\n~~\u6709\u6ca1\u6709\u5927\u795e\u5e26\u6211\u73a9awa\u3002~~",
        "postTime": 1585439658,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "[ZJOI2019]\u9ebb\u5c06\u9898\u89e3 dp of dp"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u4f7f\u7528$DP$  $of$  $DP$\u89e3\u51b3\u3002\n\n$DP$  $of$  $DP$\u662f\u4e00\u79cd\u53ef\u4ee5\u7528\u6765\u6c42\u89e3\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u80fd\u7528$DP$\u89e3\u51b3\u7684\u95ee\u9898\u7684\u7b54\u6848\u7684\u65b9\u5f0f\uff08\u6216\u79f0\u72b6\u6001\uff09\u6709\u51e0\u79cd\u7684\u624b\u6bb5\u3002\n\n\u5148\u6765\u8003\u8651\u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u5c40\u9762\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5982\u679c\u539f\u9898\u80fd\u7528$DP$  $of$  $DP$\u89e3\u51b3\uff0c\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u80fd\u7528$DP$\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n\u6bd4\u8f83\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u8bb0$dp[i][j][k][x][y]$\u4e3a\u9009\u4e86\u524d$i$\u79cd\u724c\uff0c\u7b2c$i-1$\u79cd\u724c\u6709$j$\u5f20\uff0c\u7b2c$i-2$\u79cd\u724c\u6709$k$\u5f20\uff0c\u5df2\u7ecf\u6709$x$\u4e2a\u987a\u5b50\u6216\u4e09\u5f20\uff0c$y$\u4e2a\u5bf9\u5b50\uff0c\u8fd9\u4e2a\u5c40\u9762\u662f\u5426\u5408\u6cd5\u3002\n\n\u4f46\u662f\u8fd9\u6837\u72b6\u6001\u592a\u591a\u4e86\uff0c\u8003\u8651\u4f18\u5316\uff0c\u4e3b\u8981\u6709\u4e24\u79cd\u624b\u6bb5\uff1a\n\n$(1)$\u518d\u4f7f\u7528$DP$  $of$  $DP$\u8bb0\u5f55\u80fd\u4f7f\u72b6\u6001\u5408\u6cd5\u7684\u6700\u5c0f\u7684$x$\u548c$y$.\n\n$(2)$\u53d1\u73b0\u4e09\u4e2a\u76f8\u540c\u7684\u987a\u5b50\u53ef\u4ee5\u53d8\u6210\u4e09\u4e2a\u4e09\u5f20\uff0c\u6240\u4ee5$j$\u548c$k$\u7684\u503c\u57df\u5c31\u4ece$4$\u53d8\u4e3a$2$\u3002\u7136\u540e$k$\u5982\u679c\u4e0d\u548c$j$&$i$\u7ec4\u6210\u987a\u5b50\uff0c\u5c31\u662f\u65e0\u7528\u7684\u3002\u6240\u4ee5\u8bb0$dp[i][j][k][y]$\u8868\u793a\u9009\u4e86\u524d$i$\u79cd\u724c\uff0c\u7b2c$i-1$\u79cd\u724c\u5f00\u5934\u7684\u987a\u5b50\u6709$j$\u4e2a\uff0c\u7b2c$i-2$\u79cd\u724c\u5f00\u5934\u7684\u987a\u5b50\u6709$k$\u4e2a\uff0c\u662f\u5426\u6709\u5bf9\u5b50\uff0c\u8fd9\u79cd\u72b6\u6001\u4e0b\u80fd\u62e5\u6709\u7684\u6700\u5927\u987a\u5b50/\u4e09\u5f20\u6570\u3002\n\n\u5bb9\u6613\u770b\u51fa\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u8f83\u6613\u5b9e\u73b0\u3002\u4e14\u72b6\u6001\u6570\u4e0d\u5230$4000$\u79cd\u3002\n\n\u6211\u4eec\u518d\u603b\u7ed3\u4e00\u4e0b\u4e00\u4e2a\u72b6\u6001\u8981\u8bb0\u5f55\u90a3\u4e9b\u503c\u3002\u9996\u5148\u662f$y=0$\u7684\u4e5d\u4e2a$dp[j][k]$\uff0c\u7136\u540e\u662f$y=1$\u7684\u4e5d\u4e2a$dp[j][k]$\u3002\u7531\u4e8e\u4e03\u4e2a\u5bf9\u5b50\u4e5f\u5408\u6cd5\uff0c\u8fd8\u8981\u8bb0\u5f55\u5f53\u524d\u5df2\u6709\u7684\u5bf9\u5b50\u6570\u3002\uff08\u6ce8\u610f\uff1a\u4e03\u4e2a\u5bf9\u5b50\u7684\u503c\u5e94\u5f53**\u4e24\u4e24\u4e0d\u540c**\u3002\uff09\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5f00\u59cb\u5916\u5c42\u7684$DP$\u4e86\u3002\u8bb0\u5f55$dp[i][j][k]$\u8868\u793a\u8003\u8651\u4e86\u524d$i$\u79cd\u724c\uff0c\u5df2\u7ecf\u9009\u4e86$j$\u5f20\uff0c\u5f53\u524d\u72b6\u6001\u4e3a$k$\u7684\u65b9\u6848\u6570\u3002\u8f6c\u79fb\u65f6\u679a\u4e3e\u7b2c$i+1$\u79cd\u724c\u9009\u4e86\u51e0\u5f20\u5373\u53ef\u3002\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u6211\u4eec\u77e5\u9053\u671f\u671b\u53ef\u4ee5\u7528\u6982\u7387\u7b97\u3002\u8bb0$P(i)$\u8868\u793a\u6070\u597d$i$\u6b65\u540e\u7ed3\u675f\u7684\u6982\u7387\uff0c\u5219\u6709\uff1a\n\n$E=\\sum_{i=0 \\to inf}P(i)*i$\n\n\u8bb0$Q(i)=\\sum_{j=i \\to inf}P(j)$\n\n\u5219$E=\\sum_{i=0 \\to inf}Q(i)$\n\n\u5bb9\u6613\u53d1\u73b0\uff0c$Q(i)$\u7684\u5b9e\u9645\u610f\u4e49\u662f$i-1$\u6b65\u540e\u5c1a\u672a\u7ed3\u675f\u7684\u6982\u7387\u3002\n\n\u4e8e\u662f\u6211\u4eec\u679a\u4e3e\u5f53\u524d\u5df2\u9009\u7684\u724c\u6570$j$\uff0c\u5373\u53ef\u7b97\u51fa\u5f53\u524d\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u6570\u548c\u603b\u65b9\u6848\u6570\u3002\u4e8c\u8005\u4e4b\u6bd4\u8bbe\u4e3a$f(j)$\u3002\n\n\u5219\u6709\uff1a\n\n$ans=\\sum_{i=13 \\to inf}f(i)$\n\n\u4ee3\u7801\uff1a\n\n```\n\n//ZJOI2019  Day1\n//MahJong\n//Author : HeWenKun\n//Solution : Dp of Dp\n\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<math.h>\n#include<map>\nusing namespace std;\n\nconst int N=105;\nconst int M=405;\nconst int S=4000;\nconst int mod=998244353;\n\nint n,cnt[N],dp[N][M][S];\nint ch[S][5],C[5][5];\n\nnamespace MATHEMATICS\n{\n\tint add(int x,int y)\n\t{\n\t\tint ret=x+y;\n\t\tif(ret>=mod) ret-=mod;\n\t\treturn ret;\n\t}\n\tint mi(int x,int y)\n\t{\n\t\tint ret=x-y;\n\t\tif(ret<0) ret+=mod;\n\t\treturn ret;\n\t}\n\t\n\tvoid inc(int &x,int y)\n\t{\n\t\tx+=y;\n\t\tif(x>=mod) x-=mod;\n\t}\n\tvoid dec(int &x,int y)\n\t{\n\t\tx-=y;\n\t\tif(x<0) x+=mod;\n\t}\n\t\n\tint mul(int x,int y)\n\t{\n\t\treturn 1LL*x*y%mod;\n\t}\n\tint F_p(int x,int y)\n\t{\n\t\tint bas=x,ret=1;\n\t\twhile(y)\n\t\t{\n\t\t\tif(y&1) ret=mul(ret,bas);\n\t\t\tbas=mul(bas,bas);\n\t\t\ty>>=1;\n\t\t}\n\t\treturn ret;\n\t}\n}\nusing namespace MATHEMATICS;\n\nnamespace prework_ch\n{\n\tstruct mat\n\t{\n\t\tint a[3][3];\n\t};\n\tmat fir,sec;\n\tstruct ddp\n\t{\n\t\tpair<mat,mat> d;\n\t\tint pcnt;\n\t};\n\t\n\tmap<ddp,int> M;int M_tot=0;\n\tddp lis[S];\n\tbool fi[S];\n\t\n\tbool operator < (mat x,mat y)\n\t{\n\t\tint i,j;\n\t\tfor(i=0;i<3;++i)\n\t\t\tfor(j=0;j<3;++j)\n\t\t\t{\n\t\t\t\tif(x.a[i][j]<y.a[i][j]) return true;\n\t\t\t\telse if(x.a[i][j]>y.a[i][j]) return false;\n\t\t\t}\n\t\treturn false;\n\t}\n\tbool operator < (ddp x,ddp y)\n\t{\n\t\tif(x.d.first<y.d.first) return true;\n\t\telse if(y.d.first<x.d.first) return false;\n\t\tif(x.d.second<y.d.second) return true;\n\t\telse if(y.d.second<x.d.second) return false;\n\t\tif(x.pcnt<y.pcnt) return true;\n\t\telse if(x.pcnt>y.pcnt) return false;\n\t\treturn false;\n\t}\n\t\n\tint max(int x,int y)\n\t{\n\t\treturn x>y?x:y;\n\t}\n\tmat max(mat x,mat y)\n\t{\n\t\tint i,j;mat ret;\n\t\tfor(i=0;i<3;++i)\n\t\t\tfor(j=0;j<3;++j)\n\t\t\t\tret.a[i][j]=max(x.a[i][j],y.a[i][j]);\n\t\treturn ret;\n\t}\n\t\n\tvoid prework()\n\t{\n\t\tint i,j;\n\t\tfor(i=0;i<3;++i)\n\t\t\tfor(j=0;j<3;++j)\n\t\t\t{\n\t\t\t\tif(!i&&!j) fir.a[i][j]=0,sec.a[i][j]=-1;\n\t\t\t\telse fir.a[i][j]=sec.a[i][j]=-1;\n\t\t\t}\n\t}\n\t\n\tint calc(int x)\n\t{\n\t\treturn (x>=3)?1:0;\n\t}\n\tmat transl(mat x,int cnt)\n\t{\n\t\tint i,j,k;mat ret=sec;\n\t\tfor(i=0;i<=2;++i)\n\t\t\tfor(j=0;j<=2;++j)\n\t\t\t{\n\t\t\t\tint tt=x.a[i][j];\n\t\t\t\tif(tt<0) continue;\n\t\t\t\tfor(k=0;k<=2;++k)\n\t\t\t\t\tif(i+j+k<=cnt)\n\t\t\t\t\t\tret.a[j][k]=max(ret.a[j][k],min(tt+i+calc(cnt-i-j-k),4));\n\t\t\t}\n\t\treturn ret;\n\t}\n\t\n\tddp trans(ddp x,int cnt)\n\t{\n\t\tmat xx=transl(x.d.first,cnt);\n\t\tmat yy;int zz=x.pcnt;\n\t\tif(cnt>=2) yy=max(transl(x.d.second,cnt),transl(x.d.first,cnt-2)),++zz;\n\t\telse yy=transl(x.d.second,cnt);\n\t\t\n\t\tddp ret;ret.d=make_pair(xx,yy);ret.pcnt=min(zz,7);\n\t\treturn ret;\n\t}\n\t\n\tvoid dfs(ddp x)\n\t{\n\t\tint i,j;\n\t\tif(M[x]) return;\n\t\tM[x]=++M_tot;\n\t\tlis[M_tot]=x;\n\t\tfor(i=0;i<=4;++i) dfs(trans(x,i));\n\t}\n\t\n\tbool ok(ddp x)\n\t{\n\t\tint i,j;\n\t\tif(x.pcnt>=7) return true;\n\t\tfor(i=0;i<3;++i)\n\t\t\tfor(j=0;j<3;++j)\n\t\t\t\tif(x.d.second.a[i][j]>=4)\n\t\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\t\n\tvoid work()\n\t{\n\t\tint i,j;ddp now;\n\t\tprework();now.d=make_pair(fir,sec),now.pcnt=0;dfs(now);\n\t\tfor(i=1;i<=M_tot;++i)\n\t\t{\n\t\t\tfi[i]=ok(lis[i]);\n\t\t\tfor(j=0;j<=4;++j)\n\t\t\t\tch[i][j]=M[trans(lis[i],j)];\n\t\t}\n\t}\n}\n\nvoid init()\n{\n\tint i,j;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=13;++i)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\t++cnt[x];\n\t}\n\t\n\tfor(i=0;i<=4;++i) C[i][i]=C[i][0]=1;\n\tfor(i=2;i<=4;++i)\n\t\tfor(j=1;j<i;++j)\n\t\t\tC[i][j]=C[i-1][j]+C[i-1][j-1];\n}\n\nvoid work()\n{\n\tint i,j,k,m=4*n,now,ans=0;\n\tdp[0][0][1]=1;\n\tfor(i=0;i<n;++i)\n\t\tfor(j=0;j<=m;++j)\n\t\t\tfor(k=1;k<=prework_ch::M_tot;++k)\n\t\t\t{\n\t\t\t\tint tt=dp[i][j][k];\n\t\t\t\tif(!tt) continue;\n\t\t\t\tfor(now=cnt[i+1];now<=4&&j+now<=m;++now)\n\t\t\t\t\tinc(dp[i+1][j+now][ch[k][now]],mul(tt,C[4-cnt[i+1]][now-cnt[i+1]]));\n\t\t\t}\n\t\n\tfor(j=13;j<=m;++j)\n\t{\n\t\tint tot=0,canreach=0;\n\t\tfor(k=1;k<=prework_ch::M_tot;++k)\n\t\t{\n\t\t\tinc(tot,dp[n][j][k]);\n\t\t\tif(prework_ch::fi[k]) inc(canreach,dp[n][j][k]);\n\t\t}\n\t\tinc(ans,mul(mi(tot,canreach),F_p(tot,mod-2)));\n\t}\n\t\n\tprintf(\"%d\\n\",ans);\n}\n\nint main()\n{\n\tprework_ch::work();init();work();\n\treturn 0;\n}\n\n\n```",
        "postTime": 1554298786,
        "uid": 31435,
        "name": "hwk0518",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5fc5\u987b\u5148\u8003\u8651\u4e00\u526f\u724c\u662f\u5426\u662f\u201c\u80e1\u201d\u7684\uff0c\u4e0d\u7136\u89e3\u51b3\u8fd9\u9053\u671f\u671b\u9898\u5c31\u662f\u65e0\u7a3d\u4e4b\u8c08\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u628a $7$ \u4e2a\u5bf9\u5b50\u7684\u7279\u6b8a\u60c5\u51b5\u5224\u6389\uff0c\u63a5\u4e0b\u6765\u7528 $\\text{DP}$ \u5224\u65ad $1$ \u4e2a\u5bf9\u5b50\u3001$4$ \u4e2a\u9762\u5b50\u7684\u60c5\u51b5\u3002\n\n\u7528 $f_{i,j,k,t}$ \u8868\u793a\u8003\u8651\u4e86\u524d $i$ \u79cd\u724c\uff0c\u662f\u5426\u5df2\u7ecf\u6709\u5bf9\u5b50\u4e86\uff08$j=0$ \u8868\u793a\u5426\uff0c$j=1$ \u8868\u793a\u662f\uff09\uff0c\u591a\u4f59\u7684\u50cf $i,i-1$ \u8fd9\u6837\u7684\u4e00\u7ec4\u724c\u6709 $k$ \u7ec4\uff0c\u591a\u4f59\u7684\u7b2c $i$ \u79cd\u724c\u6709 $t$ \u4e2a\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u4ea7\u751f\u7684\u9762\u5b50\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765\u6765\u56de\u5230\u8fd9\u9053\u9898\u3002\u8bbe $X$ \u8868\u793a\u6700\u65e9\u4ea7\u751f\u80e1\u724c\u7684\u8f6e\u6570\u7684\u968f\u673a\u53d8\u91cf\uff0c$p(x)$ \u8868\u793a\u6070\u597d $x$ \u8f6e\u65f6\u7b2c\u4e00\u6b21\u4ea7\u751f\u4e86\u80e1\u724c\u7684\u6982\u7387\u3002\n$$\nE(X)=\\sum_{x=0}^{4n-13} x \\times p(x)\n$$\n\n$$\nE(X)=\\sum_{x=0}^{4n-13} \\sum_{i=0}^{n-1} \\times p(x)\n$$\n\n$$\nE(X)=\\sum_{i=0}^{4n-13} \\sum_{x=i+1}^{4n-13} \\times p(x)\n$$\n\n$$\nE(X)=\\sum_{i=0}^{4n-13} P(\\text{x\u8f6e\u65f6\u8fd8\u6ca1\u6709\u80e1\u724c\u7684\u6982\u7387})\n$$\n\n$$\nE(x)=\\sum_{i=0}^{4n-13} \\frac{\\text{x\u8f6e\u65f6\u8fd8\u6ca1\u6709\u80e1\u724c\u7684\u65b9\u6848\u6570}}{C_{4n-13}^i}\n$$\n\n\u6240\u4ee5\u6211\u4eec\u7684\u91cd\u4e2d\u4e4b\u91cd\u5c31\u662f\u6c42\u51fa $x$ \u8f6e\u8fd8\u6ca1\u6709\u80e1\u724c\u7684\u65b9\u6848\u6570\u3002\n\n\u6211\u4eec\u4f7f\u7528 DDP \u89e3\u51b3\u6b64\u95ee\u9898\u3002\u6211\u4eec\u628a\u4e0a\u8ff0\u7b80\u6613 DP \u7684\u72b6\u6001\u548c\u5176\u5bf9\u5e94\u7684\u5bf9\u5b50\u6570\u91cf\u4f5c\u4e3a\u5185\u5c42 DP \u72b6\u6001\u7ed9\u538b\u7f29\u8d77\u6765\uff08\u6ce8\u610f $i$ \u90a3\u7ef4\u4e0d\u8981\u538b\u8fdb\u53bb\uff0c\u6211\u4eec\u5c06\u4f1a\u628a\u90a3\u4e00\u7ef4\u5355\u72ec\u5730\u653e\u5165 DDP \u7684\u72b6\u6001\u91cc\uff09\uff0c\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u6709\u7528\u7684\u72b6\u6001\u53ef\u80fd\u5f88\u5c11\uff0c\u6545\u800c\u7528\u641c\u7d22\u627e\u3002\u90a3\u4e48\u6211\u4eec DDP \u7684\u72b6\u6001\u5c31\u663e\u800c\u6613\u89c1\u4e86\uff1a$dp_{i,j,k}$ \u8868\u793a\u524d $i$ \u79cd\u724c\uff0c\u5185\u5c42\u72b6\u6001\u4e3a $j$\uff0c\u603b\u5171\u9009\u4e86 $k$  \u5f20\u7684\u65b9\u6848\u6570\u3002\n\n\u81f3\u4e8e\u67e5\u8be2\u6ca1\u6709\u80e1\u724c\u7684\u65b9\u6848\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u52a0\u6c42\u548c\u5c31\u884c\u4e86\u3002",
        "postTime": 1682688171,
        "uid": 341946,
        "name": "zac2010",
        "ccfLevel": 7,
        "title": "P5279 [ZJOI2019]\u9ebb\u5c06 \u9898\u89e3"
    },
    {
        "content": "[\u5f3a\u529b\u63a8\u5e7f\u535a\u5ba2](https://foreverlasting1202.github.io/)\n\n\u52a8\u6001\u89c4\u5212\u3002\n\n\u7ec8\u4e8e\u8865\u5b8cZJOI2019 Day1\u4e86\uff0c\u6709\u70b9\u8f9b\u82e6\u3002\n\n\u9996\u5148\u8fd9\u9053\u9898\u6211\u53ea\u4f1a$20$\u5206\uff0c\u540e\u6765\u542c\u8bf4\u80e1\u7684\u96c6\u5408\u5f88\u5c0f\uff1f\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6240\u6709\u80e1\u7684\u96c6\u5408\uff1f\u7136\u540e\u6211\u66b4\u641c\u4e86\u4e00\u53d1\uff0c\u53d1\u73b0$3956$\u79cd\u3002\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u80fd\u505a\u5b8c\u4e86\uff1f\uff1f\n\n\u5982\u679c\u6211\u4eec\u77e5\u9053\u6240\u6709\u80e1\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u8bbe\u8ba1$dp[i][j][S]$\u8868\u793a\u5f53\u524d\u5904\u7406\u5230\u4e86$i$\uff0c\u5171\u9009\u5b9a\u4e86$j$\u5f20\u724c\uff0c\u80e1\u724c\u72b6\u6001\u4e3a$S$\u7684\u65b9\u6848\u6570\u3002\u8fd9\u4e2a\u8f6c\u79fb\u53ea\u7528\u679a\u4e3e\u7b2c$i+1$\u5f20\u724c\uff0c\u8bb0\u5f55\u7b2c$i+1$\u5f20\u724c\u6709\u51e0\u5f20\uff0c\u7ec4\u5408\u6570\u8f6c\u79fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u679a\u4e3e\u62bd\u4e86$i$\u5f20\u724c\uff0c\u5047\u8bbe\u8fd9\u65f6\u5019\u4e0d\u80e1\u7684\u65b9\u6848\u6570\u662f$A$\uff0c\u603b\u65b9\u6848\u6570\u662f$B$\uff0c\u90a3\u4e48\u8fd9\u662f$\\frac {A}{B}$\u5c31\u662f\u5927\u4e8e$i$\u5f20\u7684\u6982\u7387\u3002\u7b54\u6848\u5c31\u662f$\\sum \\frac {A}{B}$\u3002\n\n\u4e3b\u8981\u662f\u5982\u4f55\u53bb\u66b4\u641c\u6240\u6709\u72b6\u6001\u3002\n\n\u5982\u4f55\u5224\u80e1\u5462\uff1f\u6211\u4eec\u53d1\u73b0\u5148\u53bb\u627e\u5230\u6700\u591a\u7684\u523b\u5b50\uff0c\u5728\u627e\u523b\u5b50\u7684\u65f6\u5019\u8bb0\u4e2a\u72b6\u6001\u987a\u5e26\u627e\u96c0\u5934\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u597d\u50cf\u662f\u67d0\u573a$codeforces$\u7684\u4e00\u9053\u9898\uff0c\u5177\u4f53\u54ea\u9053\u9898\u6211\u4e5f\u8bb0\u4e0d\u6e05\u4e86\u3002\u8fd9\u4e2a\u53ef\u4ee5$DP$\u51fa\u6765\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u66b4\u641c\u72b6\u6001\uff0c\u6bcf\u6b21$DP$\u5408\u5e76\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u7528$map$\u8bb0\u5f55\u4e00\u4e0b$DP$\u503c\u4e0e\u5408\u5e76\u7684\u503c\u3002\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u91cc\u66b4\u641c\u72b6\u6001\u6211\u662f\u6cbf\u9014\u542c\u8bf4\uff0c\u6211\u5b8c\u5168\u4e0d\u4f1a\uff09\n\ncode:\n```cpp\n//2019.4.4 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-5\n#define RG register\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void swap(res &x,res &y){\n    x^=y^=x^=y;\n}\nconst int kcz=998244353;\nconst int N=1e2+10;\nconst int M=3956+10;\nnamespace MAIN{\n    int used[N];\n    int n;\n    inline void add(res &x,const res &y){\n        x+=y,x>=kcz?x-=kcz:(x<0?x+=kcz:1);\n    }\n    inline int Add(const res &x,const res &y){\n        return x+y>=kcz?x+y-kcz:(x+y<0?x+y+kcz:x+y);\n    }\n    inline int mul(const res &x,const res &y){\n        return int(1LL*x*y%kcz);\n    }\n    inline int qpow(res x,res y){\n        res ret=1;\n        while(y){\n            if(y&1)ret=mul(ret,x);\n            x=mul(x,x),y>>=1;\n        }\n        return ret;\n    }\n    struct P{\n        int f[3][3];\n        P() {memset(f,-1,sizeof(f));}\n        inline bool operator < (const P &b) const {\n            for(res i=0;i<=2;i++)\n                for(res j=0;j<=2;j++){\n                    if(f[i][j]<b.f[i][j])return 1;\n                    if(f[i][j]>b.f[i][j])return 0;\n                }\n            return 0;\n        }\n    };\n    int px;\n    map<P,int> idP;\n    inline P operator + (const P &a,const P &b){\n        P ret;\n        for(res i=0;i<=2;i++)\n            for(res j=0;j<=2;j++)\n                ret.f[i][j]=max(a.f[i][j],b.f[i][j]);\n        return ret;\n    }\n    inline P operator + (const P &a,const res &num){\n        P ret;\n        for(res i=0;i<=2&&i<=num;i++)\n            for(res j=0;j<=2&&i+j<=num;j++){\n                if(a.f[i][j]==-1)continue;\n                res tmp=a.f[i][j];\n                for(res k=0;k<=2&&i+j+k<=num;k++)\n                    ret.f[j][k]=max(ret.f[j][k],min(tmp+i+(num-i-j-k)/3,4));\n            }\n        return ret;\n    }\n    void dfs(P x){\n        if(idP.count(x))return;\n        idP[x]=++px;\n        for(res i=0;i<=4;i++)\n            dfs(x+i);\n    }\n    typedef pair<P,P> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n    typedef pair<Pair,int> Ma;\n    Ma id[M];\n    int mx;\n    map<Ma,int> idM;\n    inline Pair operator + (const Pair &x,const res &num){\n        return num>=2?mp(x.fi+num,(x.se+num)+(x.fi+(num-2))):mp(x.fi+num,x.se+num);\n    }\n    inline Ma operator + (const Ma &x,const res &num){\n        return Ma(x.fi+num,min(x.se+(num>=2),7));\n    }\n    void dfs(Ma x){\n        if(idM.count(x))return;\n        idM[x]=++mx,id[mx]=x;\n        for(res i=0;i<=4;i++)\n            dfs(x+i);\n    }\n    inline bool check(const Ma &x){\n        if(x.se>=7)return 1;\n        for(res i=0;i<=2;i++)\n            for(res j=0;j<=2;j++)\n                if(x.fi.se.f[i][j]>=4)return 1;\n        return 0;\n    }\n    bool fl[M];\n    int trans[M][5];\n    inline void pre(){\n        RG P k,K;\n        k.f[0][0]=0;\n        RG Ma ko=mp(mp(k,K),0);\n        dfs(k),dfs(ko);\n        for(res i=1;i<=mx;i++){\n            fl[i]=check(id[i]);\n            for(res j=0;j<=4;j++)\n                trans[i][j]=idM[id[i]+j];\n        }\n    }\n    int C[5][5];\n    int dp[N][N<<2][M];\n    inline void MAIN(){\n        C[0][0]=1;\n        for(res i=1;i<=4;i++){\n            C[i][0]=1;\n            for(res j=1;j<=i;j++)\n                C[i][j]=C[i-1][j]+C[i-1][j-1];\n        }\n        n=read(),pre();\n        for(res i=1;i<=13;i++){\n            res w=read();\n            read(),used[w]++;\n        }\n        dp[0][0][1]=1;\n        for(res i=1;i<=n;i++)\n            for(res j=0;j<=4*i;j++)\n                for(res k=1;k<=mx;k++){\n                    if(!dp[i-1][j][k])continue;\n                    res tmp=dp[i-1][j][k];\n                    for(res t=used[i];t<=4;t++)\n                        add(dp[i][j+t][trans[k][t]],mul(tmp,C[4-used[i]][t-used[i]]));\n                }\n        res ans=0;\n        for(res i=13;i<=4*n;i++){\n            res sum=0,INV=0;\n            for(res j=1;j<=mx;j++){\n                add(INV,dp[n][i][j]);\n                if(!fl[j])add(sum,dp[n][i][j]);\n            }\n            add(ans,mul(sum,qpow(INV,kcz-2)));\n        }\n        printf(\"%d\\n\",ans);\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1554385033,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010ZJOI2019\u3011\u9ebb\u5c06"
    },
    {
        "content": "$$\\href{http://blog.chhokmah.cn/index.php/archives/33/}{\\Large\\texttt{My blog}}$$\n\n---\n## \u9898\u76ee\u94fe\u63a5\n[Luogu5279](https://www.luogu.com.cn/problem/P5279)\n\n## \u9898\u76ee\u63cf\u8ff0\n\u73b0\u5728\u6709\u4e00\u4e2a$4\\times n$\u7684\u4e00\u4e2a\u724c\u5806\u5e76\u968f\u673a\u6253\u4e71\u3002  \n\u4e00\u5f00\u59cb\u7ed9\u5b9a\u4f60$13$\u5f20\u724c\uff0c\u95ee\u518d\u6478\u82e5\u5e72\u5f20\u724c\uff0c\u724c\u96c6\u4e2d\u5b58\u5728\u4e00\u4e2a\u53ef\u4ee5\u80e1\u7684\u5b50\u96c6\u7684\u671f\u671b\u6b65\u6570\u3002  \n\u6570\u636e\u8303\u56f4\uff1a$n\\leq 100$  \n\n## \u601d\u8def\u8981\u70b9\n\u5148\u505a\u4e2a\u89e3\u91ca\uff1a\u987a\u5b50\u662f\u8fde\u7740\u7684\u4e09\u4e2a\uff0c\u523b\u5b50\u662f\u76f8\u540c\u7684\u4e09\u4e2a\uff0c$\\text{\u9762\u5b50}=\\text{\u987a\u5b50}+\\text{\u523b\u5b57}$\uff08~~\u6211\u4e0d\u73a9\u96c0\u9b42~~\uff09\n### \u5b50\u4efb\u52a1\u8ba8\u8bba\n\u9996\u5148\u9700\u8981\u89e3\u51b3\u4e00\u4e2a\u5b50\u95ee\u9898\u5c31\u662f\u600e\u6837\u5224\u65ad\u4e00\u4e2a\u724c\u96c6\u62e5\u6709\u4e00\u4e2a\u80fd\u591f\u80e1\u7684\u5b50\u96c6\u3002\n#### \u6761\u4ef6\u4e00\n\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff1a\u56db\u4e2a\u9762\u5b50+\u4e00\u4e2a\u5bf9\u5b50  \n\u6211\u4eec\u53c2\u8003[CodeForces Glogal Round 1 D](https://codeforces.com/contest/1110/problem/D)\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u8fd9\u7bc7\u535a\u5ba2\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0a\u7a0d\u6709\u4e0d\u540c\u3002  \n**\u4e00\u4e2a\u7ed3\u8bba\uff1a\u76f8\u540c\u82b1\u8272\u987a\u5b50\u6700\u591a$2$\u4e2a\uff0c\u56e0\u4e3a\u4e09\u4e2a\u76f8\u540c\u7684\u987a\u5b50\u53ef\u4ee5\u7b49\u4ef7\u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u523b\u5b50\uff0c\u800c\u4e14\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd**  \n\u9996\u5148\u4e0d\u8003\u8651\u5bf9\u5b50\u7684\u60c5\u51b5\uff0c\u5b9a\u4e49\u72b6\u6001$f[i][j][k]$\u8868\u793a\u5f53\u524d\u5904\u7406\u5b8c$[1,i]$\u82b1\u8272\uff0c\u5176\u4e2d$(i-1,i)$\u6709$j$\u5bf9\uff0c$i$\u5269\u4e0b\u6709$k$\u4e2a\u4e0b\u6700\u5927\u7684\u9762\u5b50\u6570  \n**\u6ce8\u610f\uff01\u6211\u4eec\u90fd\u662f\u5148\u6ee1\u8db3\u987a\u5b50\uff0c\u7136\u540e\u6ee1\u8db3\u523b\u5b50**  \n\u90a3\u4e48\u8003\u8651\u52a0\u5165$i+1$\uff0c\u6211\u4eec\u679a\u4e3e\u4e0b\u4e00\u4e2a\u72b6\u6001\u8fd8\u5269\u4e0b$t$\u4e2a$i+1$\uff0c\u56e0\u4e3a\u5148\u6ee1\u8db3\u987a\u5b50\uff0c\u6240\u4ee5\u8fd9\u91cc\u5047\u5b9a\u987a\u5b50\u5df2\u7ecf\u586b\u6ee1\u4e86\uff0c\u589e\u52a0\u4e86$i$\u7684\u8d21\u732e\uff0c\u6b64\u65f6\u8fd8\u5269\u4e0b\u7684\u82e5\u5e72\u4e2a\u76f8\u540c\u82b1\u8272\u7684\uff0c\u6211\u4eec\u5c31\u8003\u8651\u5168\u90e8\u8f6c\u5316\u6210\u523b\u5b50\u3002  \n\u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a$f[i+1][j][k]=Max\\{ i+f[i][j][k]+\\lfloor \\frac{remain}3\\rfloor\\}$  \n\u4f46\u662f\u9898\u76ee\u4e2d\u8fd8\u9700\u8981\u6709\u4e00\u4e2a\u5bf9\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u72b6\u6001\u5b9a\u4e49\u4e3a$f[0/1][i][j][k]$\uff0c\u5176\u4e2d\u7684$i,j,k$\u610f\u4e49\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u7ef4\u8868\u793a\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u5bf9\u5b50\u3002$f[0]$\u548c$f[1]$\u5185\u90e8\u7684\u8f6c\u79fb\u8fd8\u662f\u548c\u4e0a\u9762\u4e00\u6837\u3002\u8003\u8651$f[0]$\u548c$f[1]$\u4e4b\u95f4\u7684\u8f6c\u79fb\uff0c\u5982\u679c\u6211\u4eec\u5f53\u524d\u52a0\u5165\u82b1\u8272\u7684\u4e2a\u6570$\\geq 2$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u6d88\u8017\u4e24\u4e2a\u82b1\u8272\uff0c\u7136\u540e\u4ece$f[0]$\u8f6c\u79fb\u5230$f[1]$\u3002  \n#### \u6761\u4ef6\u4e8c\n\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff1a\u4e03\u4e2a\u5bf9\u5b50  \n\u56e0\u4e3a\u72b6\u6001\u76f8\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6761\u4ef6\u72ec\u7acb\uff0c\u6240\u4ee5\u76f4\u63a5\u8003\u8651\u65b0\u5f00\u4e00\u7ef4$cnt$\uff0c\u8868\u793a\u4e0d\u540c\u82b1\u8272\u7684\u5bf9\u5b50\u4e2a\u6570\u3002  \n**\u6ce8\u610f\uff01\u4e00\u5b9a\u662f\u82b1\u8272\u4e0d\u540c\uff0c\u5373\u4e00\u6b21\u4fee\u6539\u53ea\u80fd\u4fee\u6539$1$**  \n#### \u5b50\u4efb\u52a1\u5b9e\u73b0\n\u53ef\u4ee5\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u65b9\u4fbf\u5904\u7406\u3002\uff08\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7528$\\mathrm{map}$\u53bb\u91cd\uff09  \n\n### \u6784\u9020\u81ea\u52a8\u673a\n\u8003\u8651\u5230\u8fd9\u4e2a\u72b6\u6001\u7684\u603b\u6570\u5e94\u8be5\u4e0d\u4f1a\u592a\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u9884\u5904\u7406\u51fa\u81ea\u52a8\u673a\u3002  \n\u7a0d\u5fae\u79d1\u666e\u4e00\u4e0b\uff0c\u7b80\u5355\u70b9\u8bf4\uff0c\u81ea\u52a8\u673a\u5c31\u662f\u72b6\u6001\u4e3a\u8282\u70b9\uff0c\u8f6c\u79fb\u4e3a\u6709\u5411\u8fb9\u7684\u4e00\u4e2a\u4e1c\u897f\u3002  \n\u81ea\u52a8\u673a\u7684\u6784\u9020\uff0c\u56e0\u4e3a\u6709\u9650\u72b6\u6001\uff0c\u6240\u4ee5\u901a\u8fc7\u641c\u7d22\u6765\u5f97\u5230\u81ea\u52a8\u673a\u7684\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\u3002  \n\u6784\u9020\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5bf9\u4e8e\u5f53\u524d\u72b6\u6001\uff0c\u5fc5\u987b\u8981\u679a\u4e3e\u4e0b\u4e00\u4e2a\u724c\u653e\u591a\u5c11\u5f20$[0,4]$\u3002\uff08\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6211\u4eec\u4e0a\u9762\u7684$DP$\u7684\u6b63\u786e\u6027\uff09  \n\u8fd9\u91cc\u5b9e\u6d4b\uff1a\u672c\u8d28\u4e0d\u540c\u7684\u72b6\u6001\u6570\u6709$3956$\uff0c\u672c\u8d28\u4e0d\u540c\u7684**\u4e0d\u80e1\u72b6\u6001\u6570**\u6709$2092$\u3002  \n\u5177\u4f53\u6784\u9020\u7684\u65b9\u5f0f\u53ef\u4ee5\u53c2\u8003\u4e0b\u65b9\u4ee3\u7801  \n\n### DP\u7edf\u8ba1\u65b9\u6848\u6570\n\u6784\u9020\u4e86\u81ea\u52a8\u673a\u540e\uff0c\u6211\u4eec\u5c31\u8981\u7edf\u8ba1\u65b9\u6848\u6570\u4e86\u3002  \n\u5b9a\u4e49$f[i][j][k]$\u8868\u793a\u5f53\u524d\u8003\u8651\u524d$i$\u4e2a\u82b1\u8272\uff0c\u6478\u4e86$j$\u5f20\u724c\uff0c\u5f53\u524d\u7684\u80e1\u724c\u72b6\u6001\u4e3a$k$\u7684\u65b9\u6848\u6570\u3002  \n**\u8bf7\u6ce8\u610f\u8fd9\u91cc\u662f\u7ec4\u5408\u6570**  \n\u8003\u8651\u7b2c$i+1$\u5f20\u724c\u6478\u7684\u6570\u91cf$t$\u3002  \n$$f[i+1][j+t][nxtState(k,t)]+=f[i][j][k]\\times {all \\choose chooseCount}$$  \n\n### \u7edf\u8ba1\u7b54\u6848\n\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u539f\u9898\uff1a  \n* \u9898\u610f\uff1a\u6c42\u51fa\u5b58\u5728\u80fd\u80e1\u5b50\u96c6\u7684\u671f\u671b\u6b65\u6570\u3002  \n\n\u8bbe$P(i)$\u4e3a\u8d70\u4e86$i$\u5c31\u80e1\u4e86\u7684\u6982\u7387\uff0c\u5219\u7b54\u6848$Ans=\\sum_{i=0}^{\\infty} P(i)\\times i$  \n\u8f6c\u5316$P_1(i)=\\sum_{j=i}^{\\infty P(i)}$  \n\u4ee3\u5165\u539f\u5f0f\u5f97\u5230\u4e86$Ans=\\sum_{i=1}^{\\infty} P_1(i)$  \n\u91cd\u89c6\u4e00\u4e0b$P_1(i)$\u7684\u542b\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0$P_1(i)$\u5c31\u4ee3\u8868$i$\u53ca\u4ee5\u540e\u80e1\u7684\u6982\u7387\uff0c\u4e5f\u5c31\u662f\u524d$i-1$\u6b21\u4e0d\u80e1\u7684\u6982\u7387\uff08\u56e0\u4e3a\u540e\u9762\u5ef6\u4f38\u5230\u65e0\u9650\uff0c\u6240\u4ee5\u53ea\u8981\u6ee1\u8db3\u524d$i-1$\u6b21\u4e0d\u80e1\uff0c\u6839\u636e\u9898\u76ee\u4e2d\u6240\u8bf4**\u4e0d\u96be\u53d1\u73b0$P$\u7684\u6743\u503c\u5c31\u662f\u7406\u8bba\u4e0a\u7684\u6700\u65e9\u80e1\u724c\u5de1\u76ee\u6570**\uff0c\u90a3\u4e48\u540e\u9762\u4e00\u5b9a\u80fd\u80e1\uff09  \n\u6240\u4ee5\u9898\u76ee\u7684\u7b54\u6848\u53c8\u88ab\u8f6c\u5316\u6210\u4e86\u4e0d\u80fd\u80e1\u7684\u6982\u7387\u548c\u3002  \n\u6211\u4eec\u7528\u5f0f\u5b50\u6765\u8868\u793a  \n$$Ans=\\sum \\frac {g(i)}{sum(i)}$$  \n$g(i)$\u5c31\u662f\u624b\u4e2d\u4e00\u5171\u6709$i$\u5f20\u724c\uff0c\u8fd8\u4e0d\u80fd\u80e1\u7684\u65b9\u6848\u6570\u3002  \n$sum(i)$\u8868\u793a$i$\u5f20\u724c\u7684\u603b\u65b9\u6848\u6570\u3002  \n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f$\\mathcal O(3956\\times n\\times m)$  \n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <class T> \nvoid chkmax(T& x, T y) {\n  x = x > y ? x : y; \n}\n\ntemplate <class T> \nvoid chkmin(T& x, T y) {\n  x = x < y ? x : y;\n}\n\ntemplate <class T> \nvoid read(T& x) {\n  x = 0; char ch = 0; int f = 1;\n  for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;\n  for (; isdigit(ch); ch = getchar()) x = x * 10 + (ch ^ 48);\n  x *= f;\n}\n\ntemplate <class T> \nvoid write(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + 48);\n}\n\ntemplate <class T> \nvoid writeln(T x) {\n  write(x), puts(\"\");\n}\n\nconst int SIZE = 4000;\n\nstruct State {\n  int dp[3][3];\n  \n  State() {\n    memset(dp, -1, sizeof dp);\n  }\n  \n  friend bool operator < (State a, State b) {\n    for (int i = 0; i <= 2; i++) {\n      for (int j = 0; j <= 2; j++) {\n        if (a.dp[i][j] != b.dp[i][j]) {\n          return a.dp[i][j] < b.dp[i][j];\n        }\n      }\n    }\n    return 0;\n  }\n  \n  friend State operator + (State a, int num) {\n    State res;\n    for (int i = 0; i <= 2; i++) {\n      for (int j = 0; j <= 2; j++) {\n        if (~a.dp[i][j]) {\n          for (int k = 0; k <= 2 && i + j + k <= num; k++) {\n            chkmax(res.dp[j][k], min(4, a.dp[i][j] + i + (num - i - j - k) / 3));\n          }\n        }\n      }\n    }\n    return res;\n  } \n  \n  friend State operator + (State a, State b) {\n    for (int i = 0; i <= 2; i++) {\n      for (int j = 0; j <= 2; j++) {\n        chkmax(a.dp[i][j], b.dp[i][j]);\n      }\n    }\n    return a;\n  }\n};\n\nstruct Mahjong {\n  pair<State, State> s;\n  int cnt;\n  \n  Mahjong() {\n    memset(s.first.dp, -1, sizeof s.first.dp);\n    memset(s.second.dp, -1, sizeof s.second.dp);\n    s.first.dp[0][0] = cnt = 0;\n  }\n  \n  friend bool operator < (Mahjong a, Mahjong b) {\n    return a.cnt == b.cnt ? a.s < b.s : a.cnt < b.cnt;\n  }\n  \n  friend Mahjong operator + (Mahjong a, int num) {\n    a.cnt = min(7, a.cnt + (num >= 2));\n    a.s.second = a.s.second + num;\n    if (num >= 2) {\n      a.s.second = a.s.second + (a.s.first + (num - 2));\n    }\n    a.s.first = a.s.first + num;\n    return a;\n  }\n  \n  bool check() {\n    if (cnt >= 7) {\n      return 1;\n    }\n    for (int i = 0; i <= 2; i++) {\n      for (int j = 0; j <= 2; j++) {\n        if (s.second.dp[i][j] >= 4) {\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }\n};\n\nmap<Mahjong, int> idx;\nint tot;\nbool finish[SIZE];\nMahjong g[SIZE];\n\nvoid dfs(Mahjong sta) {\n  if (idx.count(sta)) {\n    return;\n  }\n  idx[sta] = ++tot;\n  finish[tot] = sta.check();\n  g[tot] = sta;\n  for (int i = 0; i <= 4; i++) {\n    dfs(sta + i);\n  }\n}\n\nconst int MOD = 998244353;\nconst int N = 105;\n\nint n;\nint a[N];\nint binom[5][5];\nint trans[SIZE][5];\nint dp[N][N << 2][4000];\n\nint mul(int x, int y) {\n  return (long long)x * y % MOD;\n}\n\nint add(int x, int y) {\n  return (x += y) >= MOD ? x -= MOD : x;\n}\n\nint power(int x, int y) {\n  int res = 1;\n  for (; y; y >>= 1, x = mul(x, x)) {\n    if (y & 1) {\n      res = mul(res, x);\n    }\n  }\n  return res;\n}\n\nint main() {\n  dfs(Mahjong());\n  for (int i = 1; i <= tot; i++) {\n    for (int j = 0; j <= 4; j++) {\n      trans[i][j] = idx[g[i] + j];\n    }\n  }\n  binom[0][0] = 1;\n  for (int i = 1; i <= 4; i++) {\n    binom[i][0] = binom[i][i] = 1;\n    for (int j = 1; j < i; j++) {\n      binom[i][j] = add(binom[i - 1][j], binom[i - 1][j - 1]);\n    }\n  }\n  read(n);\n  for (int i = 1; i <= 13; i++) {\n    int x, y;\n    read(x), read(y);\n    a[x]++;\n  }\n  dp[0][0][1] = 1;\n  for (int i = 0; i <= n - 1; i++) {\n    for (int j = 0; j <= 4 * i; j++) {\n      for (int k = 1; k <= tot; k++) {\n        for (int t = a[i + 1]; t <= 4; t++) {\n          dp[i + 1][j + t][trans[k][t]] = add(dp[i + 1][j + t][trans[k][t]], mul(dp[i][j][k], binom[4 - a[i + 1]][t - a[i + 1]]));\n        }\n      }\n    }\n  }\n  int ans = 0;\n  for (int i = 13; i <= n * 4; i++) {\n    int sum = 0, t = 0;\n    for (int j = 1; j <= tot; j++) {\n      sum = add(sum, dp[n][i][j]);\n      if (!finish[j]) {\n        t = add(t, dp[n][i][j]);\n      }\n    }\n    ans = add(ans, mul(t, power(sum, MOD - 2)));\n  }\n  writeln(ans);\n  return 0;\n}\n```",
        "postTime": 1582160175,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5279 \u3010[ZJOI2019]\u9ebb\u5c06\u3011"
    }
]