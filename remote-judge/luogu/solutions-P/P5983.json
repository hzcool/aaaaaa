[
    {
        "content": "##### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P5983)\n\n---\n\n\u8003\u8651\u7ef4\u62a4\u6700\u9760\u4e0a\u7684\u53ef\u884c\u8def\u5f84\u548c\u6700\u9760\u4e0b\u7684\u53ef\u884c\u8def\u5f84\u3002\n\n\u5176\u4e2d\uff0c\u6700\u9760\u4e0a\u7684\u8def\u5f84\u7684\u5b9a\u4e49\u662f\uff1a\u5728\u8def\u5f84\u53ef\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u8d2a\u5fc3\u5730\u4f18\u5148\u5f80 $y$ \u65b9\u5411\u8d70\u3002\n\n\u6700\u9760\u4e0b\u7684\u8def\u5f84\u5b9a\u4e49\u4ee5\u6b64\u7c7b\u63a8\uff0c\u8d2a\u5fc3\u5730\u5f80 $x$ \u65b9\u5411\u8d70\u3002\n\n\u8fd9\u6837\u5b9a\u4e49\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c $(x,y)$ \u540c\u65f6\u5904\u4e8e\u8fd9\u4e24\u6761\u8def\u5f84\u4e4b\u4e2d\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u6dfb\u52a0\u969c\u788d\uff0c\u5c31\u4f1a\u4f7f\u5408\u6cd5\u8def\u5f84\u4e0d\u5b58\u5728\u3002\n\n\u90a3\u4e48\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e24\u6761\u8def\u5f84\u5462\uff1f\n\n\u8fd9\u91cc\u5c55\u5f00\u6700\u9760\u4e0a\u7684\u8def\u5f84\u7684\u7ef4\u62a4\u65b9\u6cd5\uff0c\u6700\u9760\u4e0b\u7684\u8def\u5f84\u53ef\u4ee5\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u6211\u4eec\u8bb0\u5f55\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $y=i$\uff0c\u5728\u8fd9\u4e00\u5217\u4e2d\u8def\u5f84 $x$ \u7684\u6700\u5927\u4f4d\u7f6e $v_i$\u3002\u8fd9\u91cc\u7684\u6700\u5927\u4e0d\u662f\u4f7f\u8def\u5f84\u4f4d\u7f6e\u6700\u5927\u5316\uff0c\u800c\u662f\u627e\u5230\u8fd9\u6761\u8def\u5f84\u5f53\u524d\u5217\u7684\u6700\u9760\u4e0b\u7684\u70b9\u3002\n\n\u90a3\u4e48\u5728\u4e00\u5f00\u59cb\uff0c\u8fd9\u4e9b\u503c\u90fd\u662f $0$\uff0c\u7279\u522b\u7684\uff0c$v_{m-1}=n-1$\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u65b0\u70b9 $(x,y)$\u3002\n\n\u82e5 $(x,y)$ \u5728\u8def\u5f84\u4e0a\u65b9\uff0c\u5373 $x<v_{y-1}$\u3002\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u70b9\u3002\n\n\u82e5 $(x,y)$ \u5728\u8def\u5f84\u4e4b\u4e2d\uff0c\u5373 $v_{y-1}\\leq x\\leq v_y$\u3002\u6211\u4eec\u53d1\u73b0\u8981\u628a\u8def\u5f84\u7ed5\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u4e5f\u5c31\u8981\u628a $v_{y-1},v_y,\\cdots,v_{m-1}$ \u548c $x+1$ \u6765\u53d6 $\\max$\u3002\u8fd9\u4e00\u64cd\u4f5c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u7ed5\u8fc7\u8fd9\u4e2a\u70b9\u4ee5\u540e\uff0c\u53ef\u80fd\u53c8\u4f1a\u9047\u5230\u65b0\u7684\u969c\u788d\uff0c\u56e0\u6b64\u6211\u4eec\u9012\u5f52\u5730\u66f4\u65b0\u8def\u5f84\uff08\u5177\u4f53\u65b9\u6cd5\u89c1\u4e0b\u6587\uff09\u3002\n\n\u82e5 $(x,y)$ \u5728\u8def\u5f84\u4e0b\u65b9\uff0c\u5373 $x>v_y$\u3002\u6211\u4eec\u5f00\u4e24\u7ec4 `set`\uff0c\u628a\u5b83\u5206\u522b\u52a0\u5165\u5bf9\u5e94\u884c\u3001\u5217\u7684 `set` \u4e2d\u3002\n\n\u9012\u5f52\u66f4\u65b0\u8def\u5f84\u65f6\u5728\u65b0\u8def\u5f84\u6240\u4f4d\u4e8e\u7684\u884c\u5217\u7684 `set` \u91cc\u67e5\u4e00\u4e0b\u6709\u6ca1\u6709\u65b0\u969c\u788d\uff0c\u5982\u679c\u6709\uff0c\u9012\u5f52\u66f4\u65b0\u3002\n\n\u6211\u4eec\u66f4\u65b0\u8def\u5f84\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u548c\u8d2a\u5fc3\u7684\u8fc7\u7a0b\u662f\u4e00\u81f4\u7684\uff0c\u56e0\u6b64\u5728\u7b54\u6848\u4e0a\u5177\u6709\u6b63\u786e\u6027\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u4e0d\u4f1a\u88ab\u66f4\u65b0\u8def\u5f84\u4e24\u6b21\uff0c\u800c\u5bf9\u4e8e\u8f93\u51fa **TAK** \u7684\u9700\u8981\u64a4\u9500\u7684\u64cd\u4f5c\u53ea\u9700\u8981\u5224\u65ad\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\uff08\u5047\u8bbe $n$\u3001$k$ \u540c\u9636\uff09\u3002\n\n### Code\n\n```cpp\n#include<cstdio>\n#include<set>\n#include<cctype>\n#define lowbit(x) (x&-x)\ntypedef std::pair<int,int> pii;\nconst int SIZE=1e5+1;\ninline int read()\n{\n    int x=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=(x*10)+(ch^48),ch=getchar();\n    return x;\n}\ninline void TAK(){putchar('T'),putchar('A'),putchar('K'),putchar('\\n');}\ninline void NIE(){putchar('N'),putchar('I'),putchar('E'),putchar('\\n');}\nint n,m,k,r,c,z,v,X,Y,f1,f2,c1,c2;\nstd::set<int>lin[SIZE],cur[SIZE];\ninline void insert(const int x,const int y){lin[x].insert(y),cur[y].insert(x);}\ninline void erase(const int x,const int y){lin[x].erase(y),cur[y].erase(x);}\nnamespace FLOOR\n{\n    int t[SIZE];\n    inline void build(){for(int i=0;i<=m;i++)t[i]=1;}\n    inline void modify(int x,const int val){while(x<=m)t[x]=std::max(t[x],val),x+=lowbit(x);}\n    inline int query(int x){int res=0;while(x)res=std::max(res,t[x]),x-=lowbit(x);return res;}\n    void dfs(const int x,const int y)\n    {\n        if(x<query(y-1))return;\n        erase(x,y),modify(y-1,x+1);\n        std::set<int>::iterator tmp;\n        if(x^n)\n        {\n            tmp=lin[x+1].lower_bound(y-1);\n            if(tmp!=lin[x+1].end())dfs(x+1,*tmp);\n        }\n        if(y^1)\n        {\n            tmp=cur[y-1].lower_bound(x+1);\n            if(tmp!=cur[y-1].begin())dfs(*(--tmp),y-1);\n        }\n    }\n}\nnamespace CEIL\n{\n    int t[SIZE];\n    inline void build(){for(int i=0;i<=m;i++)t[i]=n;}\n    inline void modify(int x,const int val){while(x)t[x]=std::min(t[x],val),x-=lowbit(x);}\n    inline int query(int x){if(!x)return 1;int res=n+1;while(x<=m)res=std::min(res,t[x]),x+=lowbit(x);return res;}\n    void dfs(const int x,const int y)\n    {\n        if(x>query(y))return;\n        erase(x,y),modify(y,x-1);\n        std::set<int>::iterator tmp;\n        if(x^1)\n        {\n            tmp=lin[x-1].lower_bound(y+1);\n            if(tmp!=lin[x-1].begin())dfs(x-1,*(--tmp));\n        }\n        if(y^m)\n        {\n            tmp=cur[y+1].lower_bound(x-1);\n            if(tmp!=cur[y+1].end())dfs(*tmp,y+1);\n        }\n    }\n}\ninline void check(const int x,const int y)\n{\n    if(x==1&&y==1||x==n&&y==m)return v^=z,TAK();\n    f1=FLOOR::query(y-1),c2=CEIL::query(y);\n    if(x<f1||x>c2)return NIE();\n    f2=FLOOR::query(y),c1=CEIL::query(y-1);\n    if(c1<=x&&x<=c2&&f1<=x&&x<=f2)return v^=z,TAK();\n    NIE();\n    if(x<f1||x>c2)return;\n    if(c1<=x&&x<=c2)return CEIL::dfs(x,y);\n    if(f1<=x&&x<=f2)return FLOOR::dfs(x,y);\n    insert(x,y);\n}\nint main()\n{\n    n=read(),m=read(),k=read();\n    FLOOR::build(),FLOOR::modify(m,n),CEIL::build();\n    for(int i=1;i<=k;i++)\n    {\n        r=read(),c=read(),z=read();\n        X=(r^v)%n+1,Y=(c^v)%m+1;\n        if(lin[X].count(Y)){NIE();continue;}\n        check(X,Y);\n    }\n    return 0;\n}\n```",
        "postTime": 1668126538,
        "uid": 327355,
        "name": "FQ04gty",
        "ccfLevel": 0,
        "title": "[PA2019]Osady i warownie 2"
    }
]