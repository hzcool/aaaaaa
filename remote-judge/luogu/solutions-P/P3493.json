[
    {
        "content": "##  \u5206\u6790\n\n\u9996\u5148\u6211\u4eec\u753b\u4e0b\u6837\u4f8b\u7684\u56fe\uff1a\n\n![\u6837\u4f8b](https://cdn.luogu.com.cn/upload/image_hosting/y2lf64fs.png)\n\n\u53ef\u4ee5\u975e\u5e38\u660e\u663e\u5730\u770b\u51fa\u6700\u4f18\u8def\u5f84\u662f $A \\rightarrow G \\rightarrow H \\rightarrow F$\u3002\u4e5f\u5c31\u662f\u8bf4\u6700\u4f18\u8def\u5f84\u5c31\u662f\u6cbf\u7740\u5269\u4e0b\u7684 **\u6700\u5185\u4fa7** \u7684\u8fb9\u884c\u8d70\u3002\n\n~~\u5176\u5b9e\u4f5c\u4e3a\u4e00\u4e2a $\\text{OI}$ \u9009\u624b\u731c\u51fa\u7ed3\u8bba\u5c31\u53ef\u4ee5\u4e86\u3002~~\n\n## \u8bc1\u660e\n\n\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff0c\u5f52\u7eb3\u547d\u9898\u4e3a\uff1a\u6700\u5185\u4fa7\u8def\u5f84\u4e0a\u7684\u70b9\u6570\u7b49\u4e8e $n$(\u4e0d\u5305\u62ec $2$ \u4e2a\u7aef\u70b9) \u65f6\uff0c\u6700\u5185\u4fa7\u8def\u5f84\u662f\u6700\u77ed\u8def\u5f84\u3002\n\n\u2460 \u5f53 $n=0$ \u5373\u6700\u5185\u4fa7\u8def\u5f84\u4e3a\u4e00\u6761\u7ebf\u6bb5\u65f6\uff0c\u547d\u9898\u6210\u7acb\u3002\uff08\u4e24\u70b9\u95f4\u7ebf\u6bb5\u8ddd\u79bb\u6700\u77ed\uff09\n\n\u2461 \u4ee4\u5f53 $n = k$ \u65f6\u547d\u9898\u6210\u7acb\uff0c\u5f53 $n=k+1$ \u65f6\uff0c\u53d6\u51fa\u6700\u5185\u4fa7\u8def\u5f84\u548c\u4efb\u610f\u4e00\u6761\u5916\u4fa7\u8def\u5f84\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![\u8bc1\u660e\u56fe](https://cdn.luogu.com.cn/upload/image_hosting/f0rakpm7.png)\n\n\u5ef6\u957f\u5185\u4fa7\u8def\u5f84\u7b2c\u4e00\u6761\u8fb9\u5c06\u5916\u4fa7\u8def\u5f84\u5206\u4e3a\u4e24\u6bb5\uff0c\u5219\u6709\uff1a\n$$\nAE+EF+FG+GH+HD \\ge AI+IG+GH+HD = AB+BI+IG+GH+HD\n$$\n\u7531\u4e8e $B \\rightarrow I \\rightarrow G \\rightarrow G \\rightarrow D$ \u76f8\u5bf9\u4e8e $B \\rightarrow  C \\rightarrow D$ \u4e3a\u4e00\u4e2a\u5916\u4fa7\u8def\u5f84\u4e14\u5185\u4fa7\u8def\u5f84\u9664\u7aef\u70b9\u70b9\u6570\u4e3a $k$\uff0c\u6240\u4ee5\u6709\uff1a\n$$\nBI+IG+GH+HD \\ge BC+CD\n$$\n\u7efc\u4e0a\uff0c\u6709\uff1a\n$$\nAE+EF+FG+GH+HD \\ge AB+BC+CD\n$$\n\u5219\u5f53 $n=k+1$ \u65f6\u547d\u9898\u6210\u7acb\u3002\n\n\u7efc\u5408\u2460 \u2461 \u53ef\u77e5\u547d\u9898\u6210\u7acb\u3002\u7ed3\u8bba\u6210\u7acb\u3002\n\n\u53ef\u4ee5\u770b\u51fa\u6700\u77ed\u8def\u5f84\u5176\u5b9e\u53ef\u4ee5\u8dd1\u4e00\u4e2a\u534a\u5e73\u9762\u4ea4\u5f97\u51fa\uff0c\u5c31\u6837\u4f8b\u800c\u8a00\uff0c\u6240\u6c42\u6298\u7ebf $A \\rightarrow G \\rightarrow H \\rightarrow F$ \u5373\u53ef\u89c6\u4e3a\u56db\u8fb9\u5f62 $AGHF$ \u7684\u5468\u957f\u51cf\u53bb $AF$\u3002\u800c $AGHF$ \u5373\u53ef\u89c6\u4e3a\u662f $\\vec{AB},\\vec{AD},\\vec{BD},\\vec{BE},\\vec{DF},\\vec{EF}$ \u7684\u53f3\u4fa7\u534a\u5e73\u9762\u7684\u4ea4\u96c6\u3002\n\n## \u7b97\u6cd5\n\n\u6734\u7d20\u7b97\u6cd5\u5c31\u662f\u5c06\u6240\u6709\u5269\u4e0b\u7684\u8fb9\u76f4\u63a5\u66b4\u529b\u8dd1\u4e00\u6b21\u534a\u5e73\u9762\u4ea4\uff0c\u590d\u6742\u5ea6 $O((n^2-m)\\log(n^2-m))$\uff0c\u7531\u4e8e $n \\le 10^5$\uff0c\u663e\u7136\u8fd9\u79cd\u505a\u6cd5\u662f\u9700\u8981\u4f18\u5316\u7684\uff0c\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u5411\u91cf\u4e2d\u53ea\u6709\u6700\u5411\u5185\u504f\u7684\u5411\u91cf\u662f\u6709\u6548\u7684\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0 $m \\le 10^6$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5229\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u8fb9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u4ece\u540e\u5411\u524d\u904d\u5386\u627e\u51fa\u6700\u5185\u4fa7\u7684\u5408\u6cd5\u8fb9\u3002\u6700\u540e\u8dd1\u4e00\u904d\u534a\u5e73\u9762\u4ea4\uff0c\u7b97\u4e2a\u957f\u5ea6\u3002\u5b8c\u7ed3\u6563\u82b1\u3002\n\n### $\\text{AC CODE}$\n\n```c++\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<set>\n#include<bitset>\n#include<map>\n#include<algorithm>\n#include<ctime>\n#include<queue>\n#include<stack>\n#include<random>\n#define ll long long\n#define ui unsigned int\n#define ull unsigned long long\n#define il inline\nusing namespace std;\ntemplate<typename T>\nil void read(T &x)\n{\n    x=0;int f=1;char ch=getchar();\n    while(!isdigit(ch)) {if(ch=='-') f=-1; ch=getchar();}\n    while(isdigit(ch)) {x=(x<<1)+(x<<3)+(ch^48); ch=getchar();}\n    x*=f;\n}\ntemplate<typename T>\nil void write(T x)\n{\n    if(x<0) {putchar('-');x=-x;}\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\nconst int maxn=1e5+10,maxm=1e6+10;\nconst double eps=1e-12;//\u6ce8\u610f\u672c\u9898\u5361\u7cbe\u5ea6\nint n,m,cnt,tot,top,head[maxn],h=1,t;\ndouble ans;\nbool vis[maxn],flag;\nstruct Edge{\n    int to,next;\n}edge[maxm<<1];\nil void add(int u,int v)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    head[u]=cnt;\n}\nstruct point{\n    double x,y;\n    friend il point operator + (point a,point b) {return (point){a.x+b.x,a.y+b.y};}\n    friend il point operator - (point a,point b) {return (point){a.x-b.x,a.y-b.y};}\n    friend il point operator * (point a,double t) {return (point){t*a.x,t*a.y};}\n}p[maxn],a[maxn];\nil double d(point a,point b) {return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\nil double dot(point a,point b) {return a.x*b.x+a.y*b.y;}\nil double csp(point a,point b) {return a.x*b.y-b.x*a.y;}\nil int sign(double x) {return fabs(x)<=eps?0:(x>0?1:-1);}\nstruct line{\n    point p,v;\n    double ang;\n    friend il bool operator < (line a,line b)\n    {return sign(a.ang-b.ang)==0?csp(a.v-a.p,b.v-a.p)>0:sign(a.ang-b.ang)<0;}\n    il void getang() {ang=atan2(v.y-p.y,v.x-p.x);}\n}l[maxn],q[maxn];\nil point inter(line a,line b)\n{\n    point p1=a.p,p2=b.p,v1=a.v,v2=b.v,u=p2-p1;\n    v1=v1-p1;v2=v2-p2;\n    return p2+v2*(csp(u,v1)/csp(v1,v2));\n}\nil bool judge(line a,line b,line c)\n{\n    point p=inter(a,b);\n    return sign(csp(c.v-c.p,p-c.p))<=0;\n}\nint main()\n{\n    read(n);read(m);\n    for(int i=1;i<=n;++i) scanf(\"%lf%lf\",&p[n-i+1].x,&p[n-i+1].y);//\u4e2a\u4eba\u4e60\u60ef\u662f\u9006\u65f6\u9488\u5b58\u56fe\n    for(int i=1;i<=m;++i)\n    {\n        int u,v;read(u);read(v);\n        if((u==1 and v==n) or (u==n and v==1)) flag=false;\n        u=n-u+1;v=n-v+1;add(u,v);add(v,u);\n    }\n    if(flag) {cout<<d(p[1],p[n]); return 0;}//\u6ce8\u610f\u7279\u5224\n    for(int i=1;i<n;++i)\n    {\n        for(int j=head[i];j;j=edge[j].next)\n        {\n            int v=edge[j].to;\n            vis[v]=1;//\u5904\u7406\u51fa\u4e0d\u5408\u6cd5\u7684\u8fb9\n        }\n        for(int j=n;j>i;--j)\n        {\n            if(!vis[j])\n            {\n                l[++tot].p=p[i];l[tot].v=p[j];\n                l[tot].getang();break;\n            }\n        }\n        for(int j=head[i];j;j=edge[j].next) vis[edge[j].to]=0;\n    }\n    l[++tot].p=p[n]; l[tot].v=p[1]; l[tot].getang();\n    sort(l+1,l+tot+1);\n    cnt=0;\n    for(int i=1;i<=tot;++i)\n    {\n        if(i==1 or l[i].ang-l[i-1].ang>0) ++cnt;\n        l[cnt]=l[i];\n    }\n    q[++t]=l[1];\n    for(int i=2;i<=cnt;++i)\n    {\n        while(t>h and judge(q[t-1],q[t],l[i])) --t;\n        while(t>h and judge(q[h],q[h+1],l[i])) ++h;\n        q[++t]=l[i];\n    }\n    while(t>h and judge(q[t-1],q[t],q[h])) --t;\n    while(t>h and judge(q[h],q[h+1],q[t])) ++h;\n    tot=0;\n    q[t+1]=q[h];\n    for(int i=h;i<=t;++i) a[++tot]=inter(q[i],q[i+1]);\n    a[tot+1]=a[1];\n    for(int i=1;i<=tot;++i) ans+=d(a[i],a[i+1]);\n    ans-=d(p[1],p[n]);\n    printf(\"%.10lf\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1622041927,
        "uid": 446974,
        "name": "nawuxika",
        "ccfLevel": 0,
        "title": "\u8def\u5f84\u8be6\u89e3(\u5185\u542b\u8bc1\u660e)"
    },
    {
        "content": "## \u89e3\u6790\n\n\u8fd9\u9898\u5982\u679c\u4f5c\u4e00\u4e0b\u56fe\u5e94\u8be5\u5c31\u5f88\u597d\u7406\u89e3\u3002\n\n\u4ee5\u9898\u76ee\u6837\u4f8b\u4e3a\u8f93\u5165\uff0c\u5176\u56fe\u50cf\u662f\uff1a\n\n![\u51f8\u5305](https://cdn.luogu.com.cn/upload/image_hosting/blgoholf.png)\n\n\u5176\u4e2d\u9ed1\u8272\u7684\u7ebf\u6bb5\u4e3a\u5269\u4e0b\u7684\u9053\u8def\uff0c\u7ea2\u8272\u7684\u7ebf\u6bb5\u4e3a\u7b54\u6848\u8def\u5f84\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u53ea\u9700\u6cbf\u7740 \u201c\u6700\u5185\u4fa7\u7684\u201d \u9053\u8def\u8d70\u5373\u53ef\u6700\u4f18\uff1b\u800c\u53c8\u53ef\u4ee5\u53d1\u73b0\u6c42\u8fd9\u4e2a\u4e1c\u897f\u7684\u903b\u8f91\u548c\u534a\u5e73\u9762\u4ea4\u5f88\u76f8\u4f3c\uff0c\u4e8e\u662f\u9898\u76ee\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u534a\u5e73\u9762\u4ea4\u95ee\u9898\u3002\n\n~~\uff08\u8fd9\u4e25\u8c28\u8bc1\u660e\u6211\u4e0d\u4f1aqaq\uff08\u9003\uff09~~\n\n\u4e0d\u8fc7\u4e00\u5171 $n^2$ \u6761\u9053\u8def\u8fd8\u662f\u6709\u70b9\u5927\u3002\u6211\u4eec\u8003\u8651**\u6bcf\u4e2a\u70b9**\u5411\u7f16\u53f7\u6bd4\u5b83\u5927\u7684\u70b9\u8fde\u7684\u9053\u8def\uff0c\u53d1\u73b0\u5411\u7f16\u53f7\u5c3d\u53ef\u80fd\u5927\u7684\u70b9\u8fde\u7684\u9053\u8def\u4e00\u5b9a\u662f\u6700 \u201c\u5411\u5185\u4fa7\u201d \u7684\u3002\u4e8e\u662f\u9053\u8def\u7684\u6570\u91cf\u5c31\u7f29\u51cf\u5230\u4e86 $n$ \u7ea7\u522b\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u9053\u8def\uff0c\u6211\u4eec\u5c06\u5176\u8f6c\u5316\u4e3a\u5de6\u4fa7\uff08\u4ea4\uff09\u5305\u542b\u8d77\u70b9\u7ec8\u70b9\u7684\u6709\u5411\u76f4\u7ebf\uff0c\u5373\u4ece\u7f16\u53f7\u5927\u7684\u70b9\u8fde\u5411\u7f16\u53f7\u5c0f\u7684\u70b9\uff08\u6839\u636e\u51f8\u5305\u5355\u8c03\u6027\uff09\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u518d\u6dfb\u52a0\u4e00\u6761\u7531\u8d77\u70b9\u8fde\u5411\u7ec8\u70b9\u7684\u6709\u5411\u76f4\u7ebf\uff1a\u8fd9\u6837\u6700\u540e\u6c42\u51fa\u7684\u4ea4\u5c31\u4e00\u5b9a\u662f\u4e00\u4e2a\u51f8\u5305\uff0c\u6211\u4eec\u6c42\u5468\u957f\u5e76\u51cf\u53bb\u8fd9\u6761\u8fb9\u5c31\u53ef\u6c42\u5f97\u7b54\u6848\u4e86\u3002\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u7531\u4e8e\u8fd9\u6761\u8fb9\u7684\u52a0\u5165\uff0c\u5bf9\u4e8e\u8d77\u70b9\u5230\u7ec8\u70b9\u6709\u9053\u8def\u7684\u60c5\u51b5\u5982\u679c\u4e0d\u7279\u5224\u5c31\u4f1a\u51fa bug\uff08\u8bd5\u56fe\u6c42\u5e73\u884c\u7ebf\u7684\u4ea4\u70b9\uff09\u3002\n\n\u53e6\u5916\u867d\u7136\u9898\u76ee\u4fdd\u8bc1\u6709\u89e3\uff0c\u65e0\u89e3\u60c5\u51b5\u4e0b\u6211\u4eec\u5b9e\u9645\u4e0a\u4f1a\u6c42\u51fa\u4e00\u4e2a\u65e0\u7a77\u5927\u7684\u4ea4\uff0c\u8fd9\u65f6\u53ea\u9700\u56f4\u4e00\u4e2a\u8fb9\u754c\u5e76\u68c0\u67e5\u7b54\u6848\u662f\u5426\u51fa\u73b0\u8fb9\u754c\u76f4\u7ebf\u5373\u53ef\u3002\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\nusing std::sort;\nusing std::pair;\ntypedef pair<int, int> pad;\n\n/*------------------------------Computational geometry------------------------------*/\n\nconst double pi =acos(-1), eps =1e-6;\n\nstruct vect{\n\tdouble x, y;\n\tvect(){}\n\tvect(double xx, double yy):x(xx), y(yy){}\n\tvect operator + (vect v){ return vect(x+v.x, y+v.y); }\n\tvect operator - (vect v){ return vect(x-v.x, y-v.y); }\n\tvect operator * (double mu){ return vect(mu*x, mu*y); }\n\tdouble operator / (vect v){ return x*v.y-y*v.x; }/*\u53c9\u79ef*/\n};\n\nstruct line{\n\tvect u, v;\n\tdouble angle;\n\tline(){}\n\tline(vect uu, vect vv):u(uu), v(vv){ angle =atan2(vv.y-uu.y, vv.x-uu.x); }\n};\n\ninline short gtr(double a, double b){ return (a-b > eps); }\n\ninline bool eq(double a, double b){ return (a-b < eps && a-b > -eps); }\n\ninline bool onright(line f, vect w){ return (gtr((w-f.u)/(f.v-f.u), 0)); }\n\nvect getIntersection(line f, line g){\n\tdouble w =((g.u-f.u)/(f.u-f.v))/((f.u-f.v)/(g.u-g.v));\n\treturn g.u+(g.u-g.v)*w;\n}\n\nint cmp(line A, line B){\n\tif(eq(A.angle, B.angle)) return onright(B, A.u);/*\u6709\u5411\u76f4\u7ebf\u6700\u5de6\u7684\u5728\u6700\u540e\u9762\uff0c\u4f1a\u88ab\u4fdd\u7559*/\n\telse return (gtr(B.angle, A.angle));\n}\n\ninline pad getHPI(line ls[], int totl, line hull[]){\n\tsort(ls, ls+totl, cmp);\n\tint l =0, r =0;\n\tfor(int i =0; i < totl; ++i){\n\t\twhile(i < totl-1 && eq(ls[i].angle, ls[i+1].angle)) ++i;\n\t\twhile(r-l > 1 && onright(ls[i], getIntersection(hull[r-1], hull[r-2]))) --r;\n\t\tif(r > 0 && eq(ls[i].angle-hull[r-1].angle, pi)) return pad(0, 0);/*\u5224\u65b9\u5411\u76f8\u53cd\u7684\u5e73\u884c*/\n\t\thull[r++] =ls[i];\n\t}\n\twhile(r-l > 1){\n        if(onright(hull[r-1], getIntersection(hull[l], hull[l+1]))) ++l;\n        else if(onright(hull[l], getIntersection(hull[r-1], hull[r-2]))) --r;\n        else break;\n    }\n\tif(r-l < 3) return pad(0, 0);/*\u5176\u5b9e\u8fd9\u884c\u4e0d\u4f1a\u7528\u5230qwq*/\n\telse return pad(l, r);\n}\n\ninline double dist(vect x, vect y){ return sqrt((y.x-x.x)*(y.x-x.x)+(y.y-x.y)*(y.y-x.y)); }\n\ninline double getPerimeter(line hull[], int toth, vect res[]){\n\thull[toth++] =hull[0];\n\tfor(int i =0; i < toth-1; ++i) res[i] =getIntersection(hull[i], hull[i+1]);\n\t/*\u5077\u61d2\u76f4\u63a5\u7528 toth \u4e86*/\n\tres[toth-1] =res[0];\n\tdouble ret =0;\n\tfor(int i =0; i < toth-1; ++i) ret +=dist(res[i], res[i+1]);\n\treturn ret;\n}\n\n/*------------------------------Main------------------------------*/\n\nconst int MAXN =1e5+50, MAXM =1e6+50;\n\nline ls[MAXN], hull[MAXN];\nvect point[MAXN], res[MAXN];\npad ban[MAXM];\nint ban2[MAXN];\n\nint cmp2(pad a, pad b){ return a.first < b.first; }\n\ninline int read(){\n\tint x =0; bool f =0; char c =getchar();\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nint main(){\n\tint n =read(), m =read();\n\tfor(int i =0; i < n; ++i) point[i].x =read(), point[i].y =read();\n\tbool flg =1;\n\tfor(int i =0; i < m; ++i){\n\t\tint a =read()-1, b =read()-1;\n\t\tif(a > b) a ^=b ^=a ^=b;\n\t\tif(a == 0 && b == n-1) flg =0;\n\t\tban[i] =pad(a, b);\n\t}\n\t/*\u8fd9\u79cd\u60c5\u51b5\u4e0d\u5224\u4f1a\u51fa bug*/\n\tif(flg) return printf(\"%lf\", dist(point[0], point[n-1])) && 0;\n\tsort(ban, ban+m, cmp2);\n\tint totl =0;\n\tfor(int i =0, p =0; i < n-1; ++i){\n\t\tmemset(ban2, 0, sizeof(ban2));\n\t\twhile(p < m && ban[p].first == i) ban2[ban[p].second] =1, ++p;\n\t\tint j =n-1;\n\t\twhile(j > i && ban2[j]) --j;\n\t\tif(j == i) continue;\n\t\tls[totl++] =line(point[j], point[i]);\n\t}\n\tls[totl++] =line(point[0], point[n-1]);\n\tpad h =getHPI(ls, totl, hull);\n\t/*\u9898\u76ee\u6570\u636e\u8c8c\u4f3c\u4fdd\u8bc1\u6709\u8def\uff1b\u5982\u679c\u65e0\u8def\u7684\u8bdd\u6700\u540e\u4f1a\u6c42\u51fa\u65e0\u7a77\u4ea4*/\n\tprintf(\"%.10lf\", getPerimeter(hull+h.first, h.second-h.first, res)-dist(point[0], point[n-1]));\n}\n```",
        "postTime": 1592826733,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3493 \u3010[POI2009]WSP-Island\u3011"
    },
    {
        "content": "~~\u6765\u6c34\u4e00\u7bc7\u9898\u89e3~~\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6vz6e1ic.png)\n\n\u663e\u7136\u8def\u5f84 $A_1\\to A\\to B\\to A_6$ \u6700\u77ed\uff0c\u53ef\u4ee5\u60f3\u5230\u6700\u4f18\u8def\u5f84\u5c31\u662f\u6cbf\u7740\u201c\u6700\u5185\u4fa7\u201d\u7684\u8fb9\u8d70\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e09\u89d2\u5f62\u4e24\u8fb9\u4e4b\u548c\u5927\u4e8e\u7b2c\u4e09\u8fb9\u8fdb\u884c\u6d45\u6d45\u7684\u8bc1\u660e~~\u6211\u5c31\u4e0d\u8bc1\u4e86\uff08\u9003~~\u3002\n\n\u800c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u534a\u5e73\u9762\u4ea4\u6c42\u89e3\u201c\u6700\u5185\u4fa7\u201d\u591a\u8fb9\u5f62\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u94fe\u63a5 $A_1A_6$ \uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5c01\u95ed\u56fe\u5f62\u3002\u4f46\u662f $O(n^2)$ \u6761\u8fb9\u7565\u5fae\u6709\u8fa3\u4e48\u4ebf\u70b9\u70b9\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53c8\u53d1\u73b0\u4e86\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u201c\u6700\u5185\u4fa7\u201d\u7684\u8fb9\uff0c\u4e00\u5b9a\u662f\u4e0e\u5176\u76f8\u8fde\uff0c\u53e6\u4e00\u7aef\u7f16\u53f7\u6700\u5927\u7684\u8fb9\uff0c\u6240\u4ee5\u5f53\u52a0\u8fb9\u7684\u65f6\u5019\u53ef\u4ee5\u5148\u6392\u4e00\u4e0b\u5e8f\u3002\u7b54\u6848\u5c31\u662f\u4ea4\u5e73\u9762\u7684\u5468\u957f\u51cf\u53bb $A_1A_n$ \u3002\n\n\u8d34\u4e0a\u4ee3\u7801\n```cpp\nnamespace geometry {\n\tdouble pi = acos(-1);\n\tstruct point {\n\t\tdouble x, y;\n\t\tpoint(double _x = 0, double _y = 0)\n\t\t\t: x(_x), y(_y) {}\n\t\tinline void read() {\n\t\t\tcin >> x >> y;\n\t\t}\n\t\tinline friend double dist(point a, point b) {\n\t\t\tdouble sq1 = (a.x - b.x), sq2(a.y - b.y);\n\t\t\treturn sqrt(sqr(sq1) + sqr(sq2));\n\t\t}\n\t\tinline friend bool operator==(point a, point b) {\n\t\t\treturn a.x == b.x && a.y == b.y;\n\t\t}\n\t\tinline friend bool operator!=(point a, point b) {\n\t\t\treturn a.x != b.x || a.y != b.y;\n\t\t}\n\t\tinline friend point operator-(point a, point b) {\n\t\t\treturn point(a.x - b.x, a.y - b.y);\n\t\t}\n\t\tinline friend point operator+(point a, point b) {\n\t\t\treturn point(a.x + b.x, a.y + b.y);\n\t\t}\n\t\tinline friend double cross(point a, point b) {\n\t\t\treturn a.x * b.y - a.y * b.x;\n\t\t}\n\t\tinline friend double dot(point a, point b) {\n\t\t\treturn a.x * b.x + a.y * b.y;\n\t\t}\n\t\tinline friend point operator*(point a, double b) {\n\t\t\treturn point(a.x * b, a.y * b);\n\t\t}\n\t};\n\tusing line = pair<point, point>;\n\tdouble dist_sqr(point a, point b) {\n\t\treturn sqr(a.x - b.x) + sqr(a.y - b.y);\n\t}\n\tinline double len(point p, point l, point r) {\n\t\tpoint x1 = l - p, x2 = r - p;\n\t\treturn cross(x1, x2) / dist(l, r);\n\t}\n\tdouble c(double x) {\n\t\tif (x > 1)\n\t\t\treturn 1;\n\t\tif (x < -1)\n\t\t\treturn -1;\n\t\treturn x;\n\t}\n\tinline double angle(point a, point b, point rt = point()) {\n\t\treturn acos(c(dot(a - rt, rt - b) / dist(a, rt) / dist(b, rt)));\n\t}\n\tinline double check(point a1, point a2, point b1, point b2) {\n\t\treturn (a2.x - a1.x) * (b2.y - b1.y) - (b2.x - b1.x) * (a2.y - a1.y);\n\t}\n\tvector<point> convex_hull(vector<point> p) {\n\t\tpoint g = p[0];\n\t\tfor (int i = 1; i < p.size(); i++) {\n\t\t\tif (p[i].y < g.y || (p[i].y == g.y && p[i].x < g.x))\n\t\t\t\tg = p[i];\n\t\t}\n\t\tsort(p.begin(), p.end(), [&](point a, point b)->bool {\n\t\t\tdouble sum = cross(a - g, b - g);\n\t\t\tif (sum > 0)\n\t\t\t\treturn true;\n\t\t\tif (sum < 0)\n\t\t\t\treturn false;\n\t\t\treturn dist(a, g) < dist(b, g);\n\t\t\t});\n\t\tvector<point> res(p.size());\n\t\tint cnt = -1;\n\t\tres[++cnt] = p[0];\n\t\tfor (int i = 1; i < p.size(); i++) {\n\t\t\twhile (cnt > 0 && check(res[cnt - 1], res[cnt], res[cnt], p[i]) <= 0)\n\t\t\t\tcnt--;\n\t\t\tres[++cnt] = p[i];\n\t\t}\n\t\tres.resize(cnt + 1);\n\t\treturn res;\n\t}\n\tdouble diameter(vector<point> p) {\n\t\tint sz = p.size();\n\t\tif (sz < 3)\n\t\t\treturn dist_sqr(p[0], p[(1) % sz]);\n\t\tint j = 2;\n\t\tdouble res = 0;\n\t\tp.push_back(p[0]);\n\t\tfor (int i = 0; i < sz; i++) {\n\t\t\twhile (cross(p[i + 1] - p[i], p[(j + 1) % sz] - p[i]) > cross(p[i + 1] - p[i], p[j] - p[i]))\n\t\t\t\tj = (j + 1) % sz;\n\t\t\tres = max(res, dist_sqr(p[i], p[j]));\n\t\t}\n\t\treturn res;\n\t}\n\tpoint itsect(line a, line b) {\n\t\treturn a.first + a.second * (cross(b.second, a.first - b.first) / cross(a.second, b.second));\n\t}\n\tbool right(line a, point b) {\n\t\treturn cross(a.second, b - a.first) < EPS;\n\t}\n\tvector<point> plane(vector<line> v) {\n\t\tsort(v.begin(), v.end(), [&](line a, line b)->bool {\n\t\t\treturn atan2(a.second.y, a.second.x) < atan2(b.second.y, b.second.x);\n\t\t\t});\n\t\tint l = 0, r = 0;\n\t\tvector<point> t(v.size());\n\t\tvector<line> q(v.size());\n\t\tq[0] = v[0];\n\t\tfor (int i = 1; i < v.size(); i++) {\n\t\t\twhile (l < r && right(v[i], t[r]))\n\t\t\t\tr--;\n\t\t\twhile (l < r && right(v[i], t[l + 1]))\n\t\t\t\tl++;\n\t\t\tq[++r] = v[i];\n\t\t\tif (abs(cross(q[r].second, q[r - 1].second)) < EPS) {\n\t\t\t\tif (right(q[r], q[r - 1].first) && dot(q[r].second, q[r - 1].second) < EPS)\n\t\t\t\t\treturn vector<point>();\n\t\t\t\tr--;\n\t\t\t\tif (!right(q[r], v[i].first))\n\t\t\t\t\tq[r] = v[i];\n\t\t\t}\n\t\t\tif (l < r)\n\t\t\t\tt[r] = itsect(q[r], q[r - 1]);\n\t\t}\n\t\twhile (l < r && right(q[l], t[r]))\n\t\t\tr--;\n\t\tif (r - l <= 1)\n\t\t\treturn vector<point>();\n\t\tt[l] = itsect(q[l], q[r]);\n\t\treturn vector<point>(t.begin() + l, t.begin() + r + 1);\n\t}\n\tdouble area(vector<point> p) {\n\t\tif (p.size() <= 2)\n\t\t\treturn 0;\n\t\tdouble res = 0;\n\t\tfor (int i = 0; i < p.size() - 1; i++)\n\t\t\tres += cross(p[i], p[i + 1]);\n\t\tres += cross(p.back(), p[0]);\n\t\treturn res / 2;\n\t}\n\tdouble circumference(vector<point> p) {\n\t\tif (p.size() < 2)\n\t\t\treturn 0;\n\t\tif (p.size() == 2)\n\t\t\treturn dist(p[0], p[1]);\n\t\tdouble res = 0;\n\t\tfor (int i = 0; i < p.size() - 1; i++)\n\t\t\tres += dist(p[i], p[i + 1]);\n\t\tres += dist(p.back(), p[0]);\n\t\treturn res;\n\t}\n\tdouble area(point p1, point p2, point p3) {\n\t\treturn abs(cross(p1 - p3, p2 - p3)) / 2;\n\t}\n}\nusing namespace geometry;\nsigned main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint n, m; cin >> n >> m;\n\tvector<point> p(n);\n\tfor (int i = 0; i < n; i++)\n\t\tp[i].read();\n\tvector<line> l;\n\tvector<vector<int>> dn(n);\n\tfor (int i = 0; i < m; i++) {\n\t\tint x, y; cin >> x >> y;\n\t\t--x, --y;\n\t\tif (x < y)\n\t\t\tswap(x, y);\n\t\tdn[x].push_back(y);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t\tsort(dn[i].begin(), dn[i].end());\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = 0, k = 0;\n\t\tfor (j; j < i && k < dn[i].size(); j++, k++)\n\t\t\tif (dn[i][k] != j)\n\t\t\t\tbreak;\n\t\tif (j != i)\n\t\t\tl.push_back({ p[i], p[j] - p[i] });\n\t}\n\tl.push_back({ p.front(), p.back() - p.front() });\n\tvector<point> pla = plane(l);\n\tdouble ans = circumference(pla) - dist(p.front(), p.back());\n\tprintf(\"%.5llf\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1660184393,
        "uid": 404307,
        "name": "Toothless03",
        "ccfLevel": 0,
        "title": "[P3493 WSP-Island] \u9898\u89e3"
    }
]