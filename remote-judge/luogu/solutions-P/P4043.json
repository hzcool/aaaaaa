[
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u7684blog](http://www.cnblogs.com/dedicatus545/p/8729360.html)\n\n# \u6b63\u6587\n\n\u8f6c\u5316\u6a21\u578b\uff1a\u7ed9\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u6761\u8def\u5f84\u8d70\uff0c\u82b1\u8d39\u7684\u65f6\u95f4\u4e3a\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u603b\u548c\uff0c\u95ee\u8981\u4f7f\u6240\u6709\u8fb9\u90fd\u88ab\u8d70\u81f3\u5c11\u4e00\u904d\uff08\u53ef\u4ee5\u91cd\u590d\uff09\uff0c\u81f3\u5c11\u9700\u8981\u82b1\u8d39\u591a\u4e45\n\n\u8d70\u81f3\u5c11\u4e00\u904d\uff0c\u7b49\u4ef7\u4e8e\u8986\u76d6\u8fd9\u6761\u8fb9\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u627e\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u53ef\u91cd\u590d\u7684\u8def\u5f84\u8986\u76d6\n\n\u8def\u5f84\u8986\u76d6\u8ba9\u6211\u4eec\u60f3\u5230\u4ec0\u4e48\u7b97\u6cd5\u4e86\u5462\uff1f\n\n\u7f51\u7edc\u6d41\u554a\uff01\n\n\u6211\u4eec\u8003\u8651\u5efa\u7acb\u7f51\u7edc\u6d41\u56fe\u6a21\u578b\u3002\n\n\u8fd9\u9053\u9898\u91cc\u9762\u6709\u4e2a\u5173\u952e\uff1a\u8d70\u8fc7\u4e00\u6761\u8fb9\uff0c\u8d70\u51e0\u6b21\u5c31\u8981\u82b1\u51e0\u6b21\u7684\u8d39\u7528\uff0c\u8fd9\u60f3\u5230\u4ec0\u4e48\uff1f\n\n\u8d39\u7528\u6d41\u561b\uff01\n\n\u6211\u4eec\u5b9a\u4e49\u8d70\u4e00\u6b21\u8def\u5f84\u4f1a\u7ed9\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u589e\u52a01\u7684\u6d41\u91cf\uff0c\u518d\u7ed9\u6240\u6709\u8fb9\u8d4b\u4e00\u4e2a\u8d39\u7528\u7b49\u4e8e\u8fb9\u6743\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u8981\u8bbe\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u6709\u4e00\u4e2a1\u7684\u4e0b\u9650\uff0c\u4e0a\u9650\u4e3a\u65e0\u9650\u5927\uff0c\u5c31\u80fd\u505a\u4e86\n\n\u8fd8\u8981\u628a\u6240\u6709\u7684\u5267\u60c5\u7ed3\u675f\u70b9\uff08\u6ca1\u6709\u51fa\u8fb9\u7684\uff09\u8fde\u5230\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff0c\u6e90\u70b9\u5c31\u662f1\u53f7\u70b9\n\n\u8dd1\u4e00\u4e2a\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u5373\u53ef\n\n\u8fd9\u91cc\u9644\u4e0a\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u7684\u6559\u7a0b\n\n# \u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\n\n\u8003\u8651\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0c\u6bcf\u6761\u8fb9\u5b9a\u4e49\u4e3a(u,v,w,l,r)\uff0c\u4ee3\u8868\u4eceu\u5230v\u7684\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u8d39\u7528\u4e3aw\uff0c\u5bb9\u91cf\u4e3a\\[l,r\\]\u95ed\u533a\u95f4\uff0c\u6e90\u70b9s\u6c47\u70b9t\u5df2\u77e5\uff0c\u4e14\u4fdd\u8bc1\u6e90\u70b9\u6ca1\u6709\u5165\u8fb9\u3001\u6c47\u70b9\u6ca1\u6709\u51fa\u8fb9\n\n\u540c\u65f6\u5b9a\u4e49\u5e38\u89c4\u8d39\u7528\u6d41\u56fe\u7684\u8fb9\u4e3a(u,v,w,cap)\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff08\u5c31\u662f\u6ee1\u8db3\u6240\u6709\u8fb9\u7684\u6d41\u91cf\u4e0a\u4e0b\u9650\u5236\uff0c\u540c\u65f6\u8d39\u7528\u6700\u5c0f\uff09\n\n\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u5efa\u7acb\u9644\u52a0\u8fb9\u548c\u9644\u52a0\u70b9\uff1a\n\n1.\u5efa\u7acb\u9644\u52a0\u6e90\u70b9SS\uff0c\u548c\u9644\u52a0\u6c47\u70b9TT\n\n2.\u5bf9\u4e8e\u539f\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u70b9\uff08\u5305\u62ec\u6e90\u6c47\uff09u,\u4ee4d\\[u\\]\u4ee3\u8868u\u70b9\u7684\u6240\u6709\u5165\u8fb9\u7684\u6d41\u91cf\u4e0b\u754c\u51cf\u53bb\u51fa\u8fb9\u7684\u6d41\u91cf\u4e0b\u754c\n\n2.1.\u5982\u679cd\\[u\\]\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u4eceu\u8fde\u4e00\u6761\u8fb9(u,TT,0,-d\\[u\\])\u5230TT\n\n2.2.\u5982\u679cd\\[u\\]\u662f\u6b63\u6570\uff0c\u90a3\u4e48\u4eceSS\u8fde\u4e00\u6761\u8fb9(SS,u,0,d\\[u\\])\u5230u\n\n3.\u5bf9\u4e8e\u539f\u56fe\u4e2d\u6bcf\u4e00\u6761\u8fb9(u,v,w,l,r)\uff0c\u8fde\u8fb9(u,v,w,r-l)\n\n4.\u8fde\u8fb9(t,s,0,inf)\uff08\u6ce8\u610f\u8fd9\u91cc\u662f\u539f\u56fe\u7684\u6e90\u6c47\u70b9\uff01\u4e0d\u662f\u9644\u52a0\u7684\u6e90\u6c47\u70b9\uff01\uff01\uff09\n\n\u8fd9\u6837\u4ee5\u540e\uff0c\u4eceSS\u5230TT\u8dd1\u65b0\u56fe\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u518d\u52a0\u4e0a\u539f\u56fe\u4e2d\u6bcf\u6761\u8fb9\u7684\u4e0b\u754c\u6d41\u91cf\u4e58\u4ee5\u8d39\u7528\uff08\u5fc5\u987b\u8dd1\u7684\u90e8\u5206\uff09\uff0c\u5c31\u662f\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u7684\u8d39\u7528\u4e86\n\n# \u4e3a\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u70b9\uff0c\u6d41\u5165\u8fb9\u6d41\u91cf\u4e0b\u754c\u6bd4\u6d41\u51fa\u8fb9\u6d41\u91cf\u4e0b\u754c\u59271\uff0c\u5373d\\[u\\]==1\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u8981\u6709\u4e00\u4e2a\u201c\u8865\u6d41\u201d\u7684\u601d\u60f3\n\n\u6b64\u65f6\u51fa\u5c0f\u4e8e\u5165\uff0c\u90a3\u4e48\u51fa\u8fb9\u7684\u6d41\u91cf\u4e0b\u754c\u5c31\u4f1a\u6bd4\u5165\u8fb9\u7684\u5c0f1\n\n\u56e0\u4e3a\u4e0b\u754c\u4e00\u5b9a\u662f\u8981\u6ee1\u7684\uff0c\u800c\u6211\u4eec\u5982\u679c\u5e0c\u671b\u6d88\u9664\u4e0b\u754c\u5f71\u54cd\uff0c\u65b0\u56fe\u4e2d\u7684\u65e7\u56fe\u7684\u8fb9\uff0c\u6d41\u91cf\u4e0a\u5c4a\u4e00\u5b9a\u662f(r-l)\n\n\u90a3\u6211\u4eec\u52bf\u5fc5\u8981\u627e\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4ee4\u8fd9\u4e2a\u6bd4\u8f83\u5c0f\u7684\u6d41\u91cf\u6d41\u51fa\u4e0b\u754c\uff0c\u80fd\u4e0e\u6bd4\u8f83\u5927\u7684\u6d41\u91cf\u6d41\u5165\u4e0b\u754c\u201c\u5e73\u8d77\u5e73\u5750\u201d\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u5047\u5982\u6211\u4eec\u4ece\u8d85\u7ea7\u6e90\u88651\u7684\u6d41\u91cf\u8fc7\u6765\uff0c\u90a3\u662f\u4e0d\u662f\u76f8\u5f53\u4e8e\u201c\u5e2e\u4e86\u201d\u8f93\u51fa\u8fb9\u4e00\u628a\uff0c\u5e73\u8861\u4e86\u4e00\u4e0b\u201c\u5b9e\u529b\u5f3a\u5927\u201d\u7684\u8f93\u5165\u8fb9\u5462\uff1f\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u8865\u6d41\u8fc7\u7a0b\n\n### \u4e0a\u9762\u90a3\u6bb5\u662f\u611f\u6027\u7406\u89e3\uff0c\u5982\u679c\u60f3\u770b\u8bc1\u660e\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b\u795e\u7287\u7684\u535a\u5ba2\n\n[\u795e\u7287\u7684\u535a\u5ba2](https://blog.csdn.net/clove_unique/article/details/54884437)\n\n# Code:\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nint inf=1e9+7;\nusing namespace std;\ninline int read(){\n    int re=0,flag=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') flag=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n    return re*flag;\n}\nint n,ans,first[510],cnt=-1;\nint dis[510],vis[510],q[20010],head,tail;\nstruct edge{\n    int to,next,w,cap;\n}a[100010];\ninline void add(int u,int v,int w,int cap){\n    a[++cnt]=(edge){v,first[u],w,cap};first[u]=cnt;\n    a[++cnt]=(edge){u,first[v],-w,0};first[v]=cnt;\n}\nbool spfa(int s,int t){\n    int i,u,v,w;head=0,tail=1;\n    memset(dis,-1,sizeof(dis));memset(vis,0,sizeof(vis));\n    q[0]=t;dis[t]=0;vis[t]=1;\n    while(head<tail){\n        u=q[head++];vis[u]=0;\n        for(i=first[u];~i;i=a[i].next){\n            if(!a[i^1].cap) continue;\n            v=a[i].to;w=a[i].w;\n            if(dis[v]==-1||dis[v]>dis[u]-w){\n                dis[v]=dis[u]-w;\n                if(!vis[v]){\n                    vis[v]=1,q[tail++]=v;\n                }\n            }\n        }\n    }\n    return ~dis[s];\n}\nint dfs(int u,int t,int limit){\n    if(u==t){vis[t]=1;return limit;}\n    int i,v,f,flow=0;vis[u]=1;\n    for(i=first[u];~i;i=a[i].next){\n        v=a[i].to;\n        if((dis[v]==dis[u]-a[i].w)&&(a[i].cap)&&(!vis[v])){\n            f=dfs(v,t,min(limit,a[i].cap));\n            if(f){\n                flow+=f;limit-=f;\n                ans+=f*a[i].w;\n                a[i].cap-=f;a[i^1].cap+=f;\n                if(!limit) return flow;\n            }\n        }\n    }\n    return flow;\n}\nint costflow(int s,int t){//\u6211\u5199\u7684\u662f\u4ece\u67d0\u535a\u5ba2\u4e0a\u5b66\u7684\u6539\u8fdb\u7248zkw\u8d39\u7528\u6d41\n    int re=0;\n    while(spfa(s,t)){\n        vis[t]=1;\n        while(vis[t]){\n            memset(vis,0,sizeof(vis));\n            re+=dfs(s,t,inf);\n        }\n    }\n    return re;\n}\nint d[510];\nint main(){\n    memset(first,-1,sizeof(first));\n    n=read();int i,t1,t2,t3,j;\n    for(i=1;i<=n;i++){\n        t1=read();\n        for(j=1;j<=t1;j++){\n            t2=read();t3=read();\n            d[i]--;d[t2]++;ans+=t3;//\u6d41\u91cf\u4e0b\u754c\u5176\u5b9e\u90fd\u662f\u4e00\n            add(i,t2,t3,inf);\n        }\n    }\n    for(i=2;i<=n;i++){\n        add(i,n+1,0,inf);\n    }\n    for(i=1;i<=n;i++){//\u8865\u6d41\u8fc7\u7a0b\n        if(d[i]>0) add(0,i,0,d[i]);\n        if(d[i]<0) add(i,n+2,0,-d[i]);\n    }\n    add(n+1,1,0,inf);\n    costflow(0,n+2);\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1523027440,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4043 \u3010[AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u94fe\u63a5](https://blog.csdn.net/qq_43804974/article/details/107554692)\n\n\u8fd9\u9898\u7684\u5efa\u56fe\u65b9\u5f0f\u53ef\u4ee5\u7c7b\u6bd4[\u6d1b\u8c37P1251](https://www.luogu.com.cn/problem/P1251)\n\n\u6211\u662f\u7531\u90a3\u4e2a\u9898\u624d\u60f3\u5230\u8fd9\u4e48\u5efa\u7684\uff0c\u7531\u4e8e\u6bcf\u6761\u8fb9\u81f3\u5c11\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6211\u4eec\u53c8\u4e0d\u6e05\u695a\u9700\u8981\u8dd1\u591a\u5c11\u6b21\uff0c\u628a\u8fb9\u770b\u6210\u70b9\uff0c\u70b9\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u53ef\u662f\u6211\u4eec\u53c8\u4e0d\u77e5\u9053\u6700\u5927\u6d41\u5e94\u8be5\u662f\u591a\u5c11\uff0c\u76f4\u63a5\u8fd9\u4e48\u8fde\u4f1a\u53d1\u751f\u9519\u8bef\u3002\u5229\u7528\u90a3\u9053\u9898\u7684\u601d\u60f3\uff0c\u6bcf\u6761\u8fb9\u6700\u5c11\u9700\u8981\u4e00\u6b21\uff0c\u90a3\u4e48\u5c31\u6bcf\u6761\u8fb9\u770b\u505a\u4e24\u4e2a\u70b9\uff0c\u70b91\u548c\u70b92\uff0c\u70b91\u67091\u7684\u6d41\u91cf\u6d41\u5411\u6c47\u70b9\uff0c\u70b92\u63a5\u53d7\u6e90\u70b9\u76841\u7684\u6d41\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u8865\u6d41\u7684\u8fc7\u7a0b\u3002\u5229\u7528\u8865\u6d41\u7684\u8fc7\u7a0b\u548c\u628a\u8fb9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8dd1\u51fa\u6765\u6700\u5927\u6d41\u662f\u8fb9\u6570\u7684\u6700\u5c0f\u8d39\u7528\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/dise99ji.png)\n\u8fd9\u4e48\u505a\u5427\uff0c\u6bd4\u5176\u4ed6\u7684\u505a\u6cd5\u8dd1\u7684\u6162\u5f88\u591a\uff0c\u4f46\u662f\u8fd8\u53ef\u4ee5ac\u7684\uff0c\u53ea\u662f\u6700\u6162\u4e00\u4e2a\u70b9\u8fd8\u9700\u8981832ms(\u4e0d\u5f00O2)\n\n```cpp\n\nint head[max_], xiann = 2;\nstruct kk {\n\tint to, next, flow, val;\n\tkk() {}\n\tkk(int to, int next, int flow, int val) :to(to), next(next), flow(flow), val(val) {}\n}xian[max_ << 1];\nil void add(int a, int b, int c, int d) {\n\t/*if (c) {\n\t\tcout << a << \" \" << b << \" \" << c << endl;\n\t}*/\n\txian[xiann] = kk(b, head[a], c, d);\n\thead[a] = xiann;\n\txiann++;\n}\nint cur[max_], dis[max_], N = 0, que[max_], L, R;\nint S, T;\nbool vis[max_];\nbool spfa() {\n\tre int i, now, to;\n\tfor (i = 0; i <= N; i++) {\n\t\tcur[i] = head[i]; dis[i] = inf; vis[i] = 0;\n\t}\n\tL = 1, R = 0;\n\tque[++R] = S; vis[S] = 1; dis[S] = 0;\n\twhile (L <= R) {\n\t\tnow = que[L]; L++; vis[now] = 0;\n\t\tfor (i = head[now]; i; i = xian[i].next) {\n\t\t\tto = xian[i].to;\n\t\t\tif (xian[i].flow  && dis[to] > dis[now] + xian[i].val) {\n\t\t\t\tdis[to] = dis[now] + xian[i].val;\n\t\t\t\tif (!vis[to]) {\n\t\t\t\t\tvis[to] = 1;\n\t\t\t\t\tque[++R] = to;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] != inf;\n}\nint mincost, maxflow;\nint dfs(int now, int flow) {\n\tif (!flow || now == T)return flow;\n\tre int  to, tot = 0, f;\n\tvis[now] = 1;\n\tfor (int &i = cur[now]; i; i = xian[i].next) {\n\t\tto = xian[i].to;\n\t\tif (!vis[to] && xian[i].flow && dis[to] == dis[now] + xian[i].val && (f = dfs(to, min(flow - tot, xian[i].flow)))) {\n\t\t\ttot += f;\n\t\t\txian[i].flow -= f; xian[i ^ 1].flow += f;\n\t\t\tmincost += f * xian[i].val;\n\t\t\tif (tot == flow)break;\n\t\t}\n\t}\n\tvis[now] = 0;\n\treturn tot;\n}\nvoid dinic() {\n\twhile (spfa()) {\n\t\tmaxflow += dfs(S, inf);\n\t}\n}\nil void addEdge(int a, int b, int c, int d) {\n\t//cout << a << \" \"  << b <<\" \"<< c << endl;\n\tadd(a, b, c, d);\n\tadd(b, a, 0, -d);\n}\nvector<pair<int, int> > ask[700];\nmap<int, pair<int, int> >mp;\nil void ini() {\n\tre int n = read(),i,j,num,cost,to,idn,xianid = 0,nowxianid = 0,a,b;\n\tpair<int, int> temp;\n\tidn = n;\n\tfor(i = 1;i <= n;i++){\n\t\tnum = read();\n\t\tfor (j = 1; j <= num; j++) {\n\t\t\tto = read(); cost = read();\n\t\t\task[i].push_back(make_pair(to, cost));\n\t\t\t++xianid;\n\t\t\ta = ++idn; b = ++idn;\n\t\t\tmp[xianid] = make_pair(a, b);\n\t\t}\n\t}\n\tS = 0; N = T = ++idn;\n\taddEdge(S, 1, inf, 0);\n\tfor (i = 1; i <= n; i++) {\n\t\tfor (auto pa : ask[i]) {\n\t\t\tnowxianid++; \n\t\t\ttemp = mp[nowxianid];\n\t\t\taddEdge(temp.first, temp.second, inf, 0);\n\t\t\taddEdge(temp.first, T, 1, 0);\n\t\t\taddEdge(S,temp.second, 1, 0);\n\t\t\taddEdge(temp.second, pa.first, inf, 0);\n\t\t\taddEdge(i, temp.first, inf, pa.second);\n\t\t}\n\t}\n\tdinic();\n\tcout << mincost;\n}\nsigned main() {\n\tini();\n\treturn 0;\n}\n```\n",
        "postTime": 1595557267,
        "uid": 156874,
        "name": "Boxxxxxx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4043 \u3010[AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5\u3011"
    },
    {
        "content": "\u4e00\u9053\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u3002\n\n---\n\n#### \u5efa\u6a21\n\n\u89c2\u770b\u4e00\u4e2a\u652f\u7ebf\u5267\u60c5\u82b1\u8d39\u4e00\u5b9a\u65f6\u95f4\uff0c\u5e76\u4e14\u6bcf\u4e2a\u652f\u7ebf\u5267\u60c5\u81f3\u5c11\u89c2\u770b\u4e00\u6b21\uff0c\u5c06\u8fd9\u4e2a\u6761\u4ef6\u62bd\u8c61\u6210\u7f51\u7edc\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e0a\u754c\u4e3a $\\infty$\uff0c\u4e0b\u754c\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $t_i$ \u3002\n\n\u7531\u4e8e\u5728\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u9000\u51fa\u6e38\u620f\uff0c\u4e8e\u662f\u5c06\u6bcf\u4e2a\u70b9\u5411\u4e00\u4e2a\u865a\u62df\u7684\u6c47\u70b9 $t$ \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e0a\u754c\u4e3a $\\infty$\uff0c\u4e0b\u754c\u4e3a $0$\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u6c42\u89e3\u8fd9\u4e2a\u6e90\u70b9\u4e3a $s=1$\uff0c\u6c47\u70b9\u4e3a $t$ \u7684\u7f51\u7edc\u7684\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u5373\u53ef\u3002\n\n#### \u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\n\n\u5148\u4e86\u89e3\u65e0\u6e90\u65e0\u6c47\u4e0a\u4e0b\u754c\u53ef\u884c\u6d41\uff1a\n\n> \u7ed9\u5b9a\u65e0\u6e90\u6c47\u6d41\u91cf\u7f51\u7edc $G$\u3002\u8be2\u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u6807\u5b9a\u6bcf\u6761\u8fb9\u6d41\u91cf\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u6761\u8fb9\u6d41\u91cf\u6ee1\u8db3\u4e0a\u4e0b\u754c\u540c\u65f6\u6bcf\u4e00\u4e2a\u70b9\u6d41\u91cf\u5e73\u8861\u3002\n\n\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u6709\u6e90\u6709\u6c47\u7f51\u7edc\uff0c\u5176\u4e2d\u6e90\u70b9 $s$ \u4e0e\u6c47\u70b9 $t$ \u4e0d\u6ee1\u8db3\u6d41\u91cf\u5b88\u6052\u6027\u8d28\uff0c\u6240\u4ee5\u8fde\u8fb9 $t \\to s$ \u5c06\u5176\u8f6c\u5316\u4e3a\u65e0\u6e90\u65e0\u6c47\u7f51\u7edc\u3002\n\n\u5148\u8ba9\u6bcf\u4e00\u6761\u8fb9\u90fd\u6ee1\u8db3\u5b83\u7684\u5bb9\u91cf\u4e0b\u754c\uff0c\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6\u6709\u4e9b\u70b9\u5e76\u4e0d\u6ee1\u8db3\u6d41\u91cf\u5b88\u6052\u6027\u8d28\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u8865\u6d41\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $u$\uff0c\u8bb0\u5f55\u5b83\u6d41\u5165\u6d41\u91cf\u4e0e\u6d41\u51fa\u6d41\u91cf\u7684\u5dee\uff1a\n\n$$\nd_u=\\sum_{v \\in V}f(v,u)-\\sum_{v \\in V}f(u,v)\n$$\n\n\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9 $S$\uff0c\u4e0e\u8d85\u7ea7\u6c47\u70b9 $T$ \u7528\u4e8e\u8865\u6d41\u3002\u7136\u540e\u5bf9\u4e8e $d_u$ \u5206\u7c7b\u8ba8\u8bba\uff1a\n\n+ $d_u=0$\uff0c\u4e0d\u9700\u8981\u8865\u6d41\u3002\n\n+ $d_u>0$\uff0c\u6d41\u5165\u6d41\u91cf\u591a\u4e86\uff0c\u8fde\u8fb9 $u \\to T$\uff0c\u5bb9\u91cf\u4e3a $d_u$\uff0c\u5c06\u591a\u4f59\u6d41\u91cf\u9001\u5165\u8d85\u7ea7\u6c47\u70b9 $T$\u3002\n\n+ $d_u<0$\uff0c\u6d41\u5165\u6d41\u91cf\u4e0d\u591f\uff0c\u8fde\u8fb9 $S \\to u$\uff0c\u5bb9\u91cf\u4e3a $|d_u|$\uff0c\u8ba9\u8d85\u7ea7\u6e90\u70b9 $S$ \u5bf9\u5176\u8865\u6d41\u3002\n\n\u5728\u65b0\u5efa\u7684\u7f51\u7edc\u4e0a\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6700\u5f00\u59cb\u5f3a\u5236\u7ed9\u4e86\u6bcf\u6761\u8fb9 $1$ \u7684\u6d41\u91cf\uff0c\u6700\u5c0f\u8d39\u7528\u8fd8\u8981\u52a0\u4e0a\u8fd9\u4e2a\u64cd\u4f5c\u7684\u8d39\u7528\u624d\u662f\u7b54\u6848\u3002\n\n---\n\n$\\text{Code}:$\n\n\u7c7b $\\text{Dinic}$ \u7b97\u6cd5\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u4e5f\u53eb $\\text{zkw}$ ~~\u91cd\u53e3\u5473~~\u3002\n\n```cpp\n#pragma GCC target(\"avx\")\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#define maxn 3005\n#define maxm 300005\n#define R register\n#define INF 1000000007\nusing namespace std;\ntypedef long long lxl;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nstruct edge\n{\n\tint v,cp,w,next;\n}e[maxm<<1];\n\nint head[maxn],k;\n\ninline void add(int u,int v,int cp,int w)\n{\n\te[k]=(edge){v,cp,w,head[u]};\n\thead[u]=k++;\n\te[k]=(edge){u,0,-w,head[v]};\n\thead[v]=k++;\n}\n\nint n,mincost,maxflow;\nint dis[maxn],nxt[maxn];\nbool vis[maxn];\n\ninline bool SPFA(int s,int t)\n{\n\tqueue<int> q;\n\tfor(int i=1;i<=n+3;++i) dis[i]=-1,vis[i]=false;\n\tdis[s]=0;\n\tvis[s]=true;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tnxt[u]=head[u];\n\t\tfor(int i=head[u];~i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(!e[i].cp) continue;\n\t\t\tif(!~dis[v]||dis[v]>dis[u]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tif(!vis[v]) q.push(v),vis[v]=true;\n\t\t\t}\n\t\t}\n\t}\n\treturn ~dis[t];\n}\n\ninline int Dinic(int u,int t,int flow)\n{\n\tif(u==t||!flow) return flow;\n\tvis[u]=true;\n\tint rest=flow,i;\n\tfor(i=nxt[u];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(!e[i].cp||dis[v]!=dis[u]+e[i].w||vis[v]) continue;\n\t\tint k=Dinic(v,t,min(rest,e[i].cp));\n\t\tif(!k) continue;\n\t\tmincost+=k*e[i].w;\n\t\te[i].cp-=k;\n\t\te[i^1].cp+=k;\n\t\trest-=k;\n\t\tif(!rest) continue;\n\t}\n\tvis[u]=false;\n\tnxt[u]=i;\n\treturn flow-rest;\n}\n\nint d[maxn];\n\nint main()\n{\n\t// freopen(\"P4043.in\",\"r\",stdin);\n\tn=read();\n\tmemset(head,-1,sizeof(head));\n\tint s=1,t=n+1,S=n+2,T=n+3;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint ki=read();\n\t\tfor(int j=1;j<=ki;++j)\n\t\t{\n\t\t\tint v=read(),w=read();\n\t\t\t++d[v];--d[i];\n\t\t\tmincost+=w;\n\t\t\tadd(i,v,INF,w);\n\t\t}\n\t}\n\tfor(int i=2;i<=n;++i)\n\t\tadd(i,t,INF,0);\n\tadd(t,s,INF,0);\n\tfor(int i=1;i<=n+1;++i)\n\t{\n\t\tif(d[i]>0) add(S,i,d[i],0);\n\t\tif(d[i]<0) add(i,T,-d[i],0);\n\t}\n\t// for(int i=0;i<k;i+=2)\n\t// \tprintf(\"%d %d %d\\n\",e[i^1].v,e[i].v,e[i].cp);\n\twhile(SPFA(S,T))\n\t\tmaxflow+=Dinic(S,T,1<<30);\n\tprintf(\"%d\\n\",mincost);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1596078098,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4043 \u3010[AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5\u3011"
    },
    {
        "content": "\u6709\u6e90\u6c47\u6700\u5c0f\u53ef\u884c\u8d39\u7528\u6d41\u3002              \n\n~~\u6837\u4f8b\u5f88\u5f3a\u8c22\u8c22~~          \n\n\u6211\u4eec\u8003\u8651\u6bcf\u6761\u8fb9\u81f3\u5c11\u88ab\u8d70\u8fc7\u4e00\u6b21\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u76f4\u63a5\u94a6\u5b9a\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0a\u4e0b\u754c\u4e3a $[1,Inf]$ \u7136\u540e\u8dd1\u65e0\u6e90\u6c47\u6700\u5c0f\u8d39\u7528\u6d41\u5c31\u597d\u4e86\u554a\uff1f\u5f53\u4f60\u5f00\u5f00\u5fc3\u5fc3\u7801\u5b8c\u5c31\u4f1a\u53d1\u73b0\u57fa\u672c\u7684\u5c0f\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\u3002               \n\n\u9700\u8981\u6ce8\u610f\u70b9 $1$ \u7684\u6d41\u91cf\u4e0d\u9650\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u518d\u5efa\u4e2a\u865a\u70b9 $t$ \u8ba9\u9664 $1$ \u4ee5\u5916\u7684\u6240\u6709\u70b9\u7684\u6d41\u91cf\u90fd\u6d41\u8fc7\u53bb\uff0c\u8fd9\u6837\u8dd1\u4e00\u4e2a\u6709\u6e90\u6c47\u6700\u5c0f\u8d39\u7528\u6d41\u5c31\u597d\u4e86\u3002         \n\n\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a              \n\n1. \u6570\u7ec4\u5f00\u5230 $32$ \u500d\u5de6\u53f3\uff0c\u4e0d\u7136\u4f1a\u7384\u5b66 RE\uff0c\u4e0d\u8fc7\u6211\u4e2a\u4eba\u7b97\u51fa\u6765\u4e5f\u5c31 $8$ \u500d\u5de6\u53f3\uff0c\u4e0d\u77e5\u9053\u54ea\u91cc\u7b97\u6f0f\u4e86\u8fd8\u662f\u548b\u7684\uff1b            \n\n2. \u8bb0\u5f97\u5728\u8dd1\u6b8b\u4f59\u7f51\u7edc\u65f6\u6e05\u7a7a\u6700\u540e\u7ea6\u675f $s,t$ \u6d41\u91cf\u7684\u8fb9\u3002             \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e3 + 5 , M = 1.5e4 + 5;\nconst long long Inf = 1e12;\nint n,m,head[Len],cnt = 1,flag[Len],pre[Len],s,t,S,T;\nlong long val[Len],maxflow,mincost,dis[Len],aug[Len],sum,SUM;\nstruct node\n{\n\tint next,to;long long w,ww,www;\n\tinline void clear(){next = to = w = ww = www = 0;}\n}edge[Len << 5];\nvoid add(int from,int to,long long w,long long www)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w;\n\tedge[cnt].www = www;\n\thead[from] = cnt;\n}\nbool SPFA()\n{\n\tqueue<int> q;\n\tfor(int i = 1 ; i <= n + 3 ; i ++) dis[i] = Inf , flag[i] = pre[i] = aug[i] = 0;\n\taug[S] = Inf , dis[S] = 0 , flag[S] |= 1 , q.push(S);\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tflag[p] = 0;\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(dis[to] > dis[p] + edge[e].www && edge[e].w)\n\t\t\t{\n\t\t\t\tdis[to] = dis[p] + edge[e].www;\n\t\t\t\taug[to] = min(aug[p] , edge[e].w);\n\t\t\t\tpre[to] = e;\n\t\t\t\tif(!flag[to]) flag[to] |= 1 , q.push(to);\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[T] == Inf) return 0;\n\treturn 1;\n}\nvoid E_K()\n{\n\twhile(SPFA())\n\t{\n\t\tint x = T , E;\n\t\tmaxflow += aug[T];\n\t\tmincost += aug[T] * dis[T];\n\t\twhile(x != S)\n\t\t{\n\t\t\tE = pre[x];\n\t\t\tedge[E].w -= aug[T] , edge[E ^ 1].w += aug[T];\n\t\t\tx = edge[E ^ 1].to;\n\t\t}\n\t}\n}\nint BB,TT;\nint main()\n{\n\tscanf(\"%d\",&n);\n\ts = 1 , t = n + 1 , S = t + 1 , T = S + 1;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint k;scanf(\"%d\",&k);\n\t\twhile(k --)\n\t\t{\n\t\t\tscanf(\"%d %d\",&BB,&TT);\n\t\t\t//i -> BB [1 , Inf] TT\n\t\t\tedge[cnt + 1].ww = 1;\n\t\t\tval[BB] += 1 , val[i] -= 1 , SUM += TT;\n\t\t\tadd(i , BB , Inf - 1 , TT) , add(BB , i , 0 , -TT);\n\t\t}\n\t}\n\tfor(int i = 2 ; i <= n ; i ++) add(i , t , Inf , 0) , add(t , i , 0 , 0);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tif(val[i] > 0) add(S , i , val[i] , 0) , add(i , S , 0 , 0) , sum += val[i];\n\t\tif(val[i] < 0) add(i , T , -val[i] , 0) , add(T , i , 0 , 0);\n\t}\n\tadd(t , s , Inf , 0) , add(s , t , 0 , 0);\n\tE_K();\n\tedge[cnt ^ 1].clear() , edge[cnt].clear();\n\tS = s , T = t;\n\tE_K();\n\tprintf(\"%lld\\n\",mincost + SUM); \n\treturn 0;\n}\n```",
        "postTime": 1636370859,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4043 [AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5"
    },
    {
        "content": "\u7b80\u5355\u9898\u3002\u9898\u9762\u5199\u5565\u4f60\u5c31\u5e72\u5565\u3002\n\n\u770b\u5230\u9898\u9762\u60f3\u5230\u4ec0\u4e48\uff1f\u7f51\u7edc\u6d41\u3002\u8981\u6c42\u539f\u56fe\u4e2d\u6bcf\u6761\u8fb9\u81f3\u5c11\u7ecf\u8fc7\u4e00\u6b21\uff1f\u90a3\u4e48\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0a\u4e0b\u754c\u4e3a $[1,+\\infty)$\u3002\u7ecf\u8fc7\u6bcf\u4e00\u6b21\u9700\u8981\u82b1\u8d39 $t$ \u7684\u65f6\u95f4\uff1f\u90a3\u4e48\u8fb9\u7684\u8d39\u7528\u5c31\u662f $t$\u3002\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u56de\u5230\u70b9 $1$\uff1f\u90a3\u4e48\u6bcf\u4e2a\u70b9\u5411\u70b9 $1$ \u8fde\u4e00\u6761\u8d39\u7528\u4e3a $0$\uff0c\u4e0a\u4e0b\u754c\u4e3a $[0, +\\infty)$ \u7684\u8fb9\u3002\n\n\u4e8e\u662f\u6c42\u65e0\u6e90\u6c47\u6709\u4e0a\u4e0b\u754c\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define S (n + 1)\n#define T (n + 2)\nconst ll inf = 0x3f3f3f3f3f3f3f3f;\nint n;\nstruct Edge {\n\tint to, next;\n\tll w, c;\n} e[500005];\nint head[505], len;\nvoid Insert(int u, int v, ll w, ll c) {\n\te[++len].to = v;\n\te[len].next = head[u];\n\te[len].w = w;\n\te[len].c = c;\n\thead[u] = len;\n}\nvoid InsertF(int u, int v, ll w, ll c) {\n\tif (!len) len = 1;\n\tInsert(u, v, w, c);\n\tInsert(v, u, 0, -c);\n}\nll maxf, minc;\nll dis[505], fl[505];\nint pat[505];\nbool vis[505];\nbool SPFA() {\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(fl, 0x3f, sizeof(fl));\n\tqueue<int> q;\n\tq.push(S);\n\tvis[S] = true;\n\tdis[S] = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop(); vis[u] = false;\n\t\tfor (int i = head[u]; i; i = e[i].next) {\n\t\t\tif (!e[i].w) continue;\n\t\t\tint v = e[i].to;\n\t\t\tif (dis[v] > dis[u] + e[i].c) {\n\t\t\t\tdis[v] = dis[u] + e[i].c;\n\t\t\t\tfl[v] = min(fl[u], e[i].w);\n\t\t\t\tpat[v] = i;\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tvis[v] = true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] < 0x3f3f3f3f3f3f3f3f;\n}\nvoid EK() {\n\twhile (SPFA()) {\n\t\tmaxf += fl[T];\n\t\tminc += fl[T] * dis[T];\n\t\tfor (int i = T; i != S; i = e[pat[i] ^ 1].to) {\n\t\t\te[pat[i]].w -= fl[T];\n\t\t\te[pat[i] ^ 1].w += fl[T];\n\t\t}\n\t}\n}\nint inl[505];\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 2; i <= n; i++) {\n\t\tInsertF(i, 1, inf, 0);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tint k;\n\t\tscanf(\"%d\", &k);\n\t\twhile (k--) {\n\t\t\tint v; ll c;\n\t\t\tscanf(\"%d%lld\", &v, &c);\n\t\t\tminc += c;\n\t\t\tInsertF(i, v, inf, c);\n\t\t\tinl[v]++; inl[i]--;\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (inl[i] > 0) {\n\t\t\tInsertF(S, i, inl[i], 0);\n\t\t}\n\t\telse if (inl[i] < 0) {\n\t\t\tInsertF(i, T, -inl[i], 0);\n\t\t}\n\t}\n\tEK();\n\tprintf(\"%lld\\n\", minc);\n\treturn 0;\n}\n```",
        "postTime": 1682052096,
        "uid": 363415,
        "name": "251Sec",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4043 [AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5"
    },
    {
        "content": "\u8d39\u7528\u6d41\u5c45\u7136\u6ca1\u6709\u4eba\u5199 $\\operatorname{SSP-Dinic}$ \u3002\u7ffb\u904d\u5168\u7f51\u90fd\u662f $\\operatorname{SSP-EK}$ \u6216\u8005 $\\operatorname{MCMF}$ \u7684\u5199\u6cd5\u3002\n\n\u540d\u6b63\u8a00\u987a\u7684 $\\operatorname{SSP-Dinic}$ \u7684\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41\u5199\u6cd5\u3002\uff08\u751a\u81f3\u4ee5 $\\text{86ms}$ \u51b2\u8fdb\u4e86\u6700\u4f18\u89e3\uff09\u5176\u5b9e\u4e0e\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u65e0\u5f02\uff0c\u5c31\u662f\u5c06 `Bfs()` \u6362\u6210 `Spfa()` \u5373\u53ef\uff0c\u96be\u70b9\u4f9d\u7136\u5728\u5efa\u56fe\uff1a\n\n1. \u5bf9\u4e8e\u5267\u60c5 $i$ \u80fd\u591f\u5230\u8fbe $u$\uff0c\u94fe\u63a5 $(i,u)$\uff0c\u5bb9\u91cf\u4e3a $[1,inf]$\uff0c\u8d39\u7528\u4e3a $v$\u3002\n2. \u56e0\u4e3a\u9664\u4e86 $1$ \u53f7\u5267\u60c5\uff0c\u5176\u5b83\u6240\u6709\u5267\u60c5\u90fd\u5e94\u8be5\u80fd\u591f\u76f4\u63a5\u7ed3\u675f\uff0c\u6240\u4ee5\u94fe\u63a5 $(i,T)$\uff0c\u8fd9\u91cc\u7684 $T$ \u662f\u771f\u5b9e\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a $[0,inf]$\uff0c\u8d39\u7528\u4e3a $0$\uff1b\n3. \u5bf9\u4e8e\u6d41\u91cf\u4e0d\u5b88\u6052\u7684\u70b9\uff0c\u6839\u636e $A[i]$ \u7684\u6b63\u8d1f\uff0c\u94fe\u63a5\u865a\u62df\u6e90\u70b9\u6216\u8005\u865a\u62df\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a $\\mid A[i]\\mid$\uff0c\u8d39\u7528\u4e3a $0$\u3002\n4. \u94fe\u63a5 $(T,S)$\uff0c\u771f\u5b9e\u6e90\u6c47\u70b9\u3002\u5bb9\u91cf\u4e3a $[0,inf]$\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u5bf9\u5efa\u56fe\u8fdb\u884c\u4e00\u5b9a\u7684\u89e3\u91ca\uff1a\n\n* \u7b2c\u4e00\u6761\u4e0b\u754c\u4e3a $1$ \u662f\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u6240\u6709\u5267\u60c5\u90fd\u5fc5\u987b\u8981\u8fc7\u4e00\u904d\uff0c\u4f46\u8fc7\u591a\u5c11\u904d\u662f\u65e0\u6240\u8c13\u7684\uff1b\n* \u7b2c\u4e09\u6761\u548c\u7b2c\u56db\u6761\u90fd\u662f\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u7684\u5e38\u89c4\u64cd\u4f5c\uff0c\u5c31\u4e0d\u5fc5\u8981\u591a\u89e3\u91ca\u4e86\u3002\n\n\u56e0\u4e3a\u8fd9\u91cc\u53ea\u662f\u6c42\u53d6\u53ef\u884c\u6d41\uff0c\u6240\u4ee5\u8dd1\u4e00\u904d\u5373\u53ef\u3002\u4e5f\u4e0d\u9700\u8981\u8dd1\u7b2c\u4e8c\u6b21\u6c42\u6b8b\u6d41\u7f51\u7edc\u7684\u6d6e\u52a8\u6d41\u91cf\uff0c\u4e5f\u4e0d\u9700\u8981\u53bb\u5220\u8fb9\u3002\n\n[\u7f51\u7edc\u6d41\u4e00\u5c0f\u65f6\u901f\u901a](https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/network-flow/)\n\n``` c++\nconst int MAXN=1e3+10;\nconst int MAXM=1e6+10;\nconst int INF=0x3f3f3f3f;\nint N,M,S,T,ret;\nstruct Net\n{\n    int next,to,val,cost;\n}Edge[MAXM<<1];\n//\u7ed3\u6784\u4f53\u5185\u5b58\u7684\u662f\uff1a\u4e0b\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u8fb9\u7684\u6307\u5411\uff0c\u8fb9\u7684\u5bb9\u91cf\uff0c\u8fb9\u7684\u8d39\u7528\nint Head[MAXN],Cur[MAXN],Total=1;\n//\u7f51\u7edc\u6d41\u7279\u6027\uff1aTotal\u5f00\u59cb\u5fc5\u987b\u4e3a\u5076\u6570\n//Cur\u662fDinic\u7684\u5f53\u524d\u5f27\u4f18\u5316\ninline void addEdge(int u,int v,int w,int c)\n{\n    Edge[++Total]=(Net){Head[u],v,w,c};Head[u]=Total;\n    Edge[++Total]=(Net){Head[v],u,0,-c};Head[v]=Total;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u8fb9\u64cd\u4f5c\nint Dist[MAXN],A[MAXN];\nbool Vis[MAXN];\n//A\u7684\u542b\u4e49\uff1a\u70b9\u5bb9\u91cf\u5dee\uff0c\u5373\u8fdb\u5165\u7684\u5bb9\u91cf\u51cf\u53bb\u6d41\u51fa\u7684\u5bb9\u91cf\ninline bool Spfa()\n{\n    std::queue<int>Q;\n    memset(Dist,0x3f,sizeof(Dist));\n    memset(Vis,0,sizeof(Vis));\n    Q.push(S);\n    Dist[S]=0;\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        Vis[u]=0;\n        for(int e=Head[u];e;e=Edge[e].next)\n        {\n            int v=Edge[e].to;\n            if(Dist[v]>Dist[u]+Edge[e].cost&&Edge[e].val)\n            {\n                Dist[v]=Dist[u]+Edge[e].cost;\n                if(!Vis[v]) Vis[v]=1,Q.push(v);\n            }\n        }\n    }\n    return Dist[T]!=INF;\n}\n//\u8d39\u7528\u6d41\u7684\u589e\u5e7f\uff08\u4e5f\u53ef\u4ee5\u7528\u5176\u5b83\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff09\nint Dfs(int x,int inf)\n{\n    if(x==T) return inf;\n    int flow=0;Vis[x]=1;\n    for(int e=Cur[x],v;e&&flow<inf;e=Edge[e].next)\n    {\n        v=Edge[e].to,Cur[x]=e;\n        if(!Vis[v]&&Edge[e].val&&Dist[v]==Dist[x]+Edge[e].cost)\n        {\n            int k=Dfs(v,std::min(Edge[e].val,inf-flow));\n            if(k)\n            {\n                ret+=k*Edge[e].cost;\n                Edge[e].val-=k,Edge[e^1].val+=k,flow+=k;\n            }\n        }\n    }\n    Vis[x]=0;\n    //\u8fd9\u662f\u4e2a\u7591\u70b9\uff0c\u6211\u6ca1\u52a0\u8fd9\u53e5\u7684\u65f6\u5019\u4e5fA\u4e86\n    //\u52a0\u4e86\u4e4b\u540e\u76f4\u63a5\u8dd1\u8fdb\u6700\u4f18\u89e3\n    return flow;\n}\n//Dinic\u7684\u63a8\u6d41\u64cd\u4f5c\ninline int Dinic()\n{\n    int r=0,flow;\n    while(Spfa())\n    {\n        memcpy(Cur,Head,sizeof(Head));\n        while(flow=Dfs(S,INF)) r+=flow;\n    }\n    return r;\n}\n//Dinic\u5168\u5c40\u589e\u5e7f\nint main()\n{\n    // freopen(\"netflow.in\",\"r\",stdin);\n    // freopen(\"netflow.out\",\"w\",stdout);\n    read(N);\n    int rS=1,rT=N+1,vS=N+2,vT=N+3;\n    //\u771f\u5b9e\u6e90\u6c47\u70b9(Reality)\u548c\u865a\u62df\u6e90\u6c47\u70b9(virtual)\n    for(int i=1,k;i<=N;++i)\n    {\n        read(k);\n        for(int j=1,u,v;j<=k;++j)\n        {\n            read(u,v);\n            ++A[u],--A[i];\n            ret+=v;addEdge(i,u,INF-1,v);\n        }\n    }\n    for(int i=2;i<=N;++i) addEdge(i,rT,INF,0);\n    for(int i=1;i<=N;++i)\n    {\n        if(A[i]>0) addEdge(vS,i,A[i],0);\n        else if(A[i]<0) addEdge(i,vT,-A[i],0);\n    }\n    addEdge(rT,rS,INF,0);\n    S=vS,T=vT;\n    Dinic();\n    write(ret);\n    return 0;\n}\n/*\n6\n2 2 1 3 2\n2 4 3 5 4\n2 5 5 6 6\n0\n0\n0\n*/\n```",
        "postTime": 1659682068,
        "uid": 444040,
        "name": "_Eternal_",
        "ccfLevel": 0,
        "title": "P4043 [AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5 \u9898\u89e3"
    },
    {
        "content": "## \u6709\u6e90\u6c47\u70b9\u4e0a\u4e0b\u754c\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\n\n\u6309\u7167\u9898\u610f\uff0c\u5728 DAG \u4e0a\uff0c\u6bcf\u6761\u8fb9\u7684\u4e0b\u754c\u4e3a $1$ \uff0c\u4e0a\u754c\u662f $INF$ ,\u8d39\u7528\u4e3a\u65f6\u95f4\u3002\u6309\u7167\u8f93\u5165\u5efa\u8fb9\u5373\u53ef\u3002\n\n\u6309\u7167\u9898\u610f\uff0c\u6e90\u70b9\u4e3a $1$ \u8282\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5411\u6c47\u70b9\u8fde\u6d41\u91cf $INF$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u6e90\u6c47\u70b9\u7684\u6d41\u91cf\u53ef\u4ee5\u4e0d\u5b88\u6052\uff0c\u4e8e\u662f\u8981\u4ece\u6c47\u70b9\u5411\u6e90\u70b9\u8fde\u6d41\u91cf $INF$ \u7684\u8fb9\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210 **\u65e0\u6e90\u6c47\u70b9\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41**\u3002\n\n$ss$ \uff0c$tt$ \u662f\u9898\u610f\u6240\u8981\u6c42\u7684\u6e90\u6c47\u70b9\uff0c$s$ \uff0c$t$ \u662f\u8d85\u7ea7\u6e90\u6c47\u70b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define N 1005\n#define M 1000005\n#define INF 1e9\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;int w=0;char ch=0;\n    while(!isdigit(ch))w|=ch=='-',ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    X=w?-X:X;\n}\n\nint n,m,ans,s=N-2,t=s+1,ss,tt;\nint head[N],cnt=1,T[N];\nint d[N],mn[N],v[N],pre[N];\nstruct nd{int nxt,to,v,c,l,r,pd;}e[M];\n#define For(x) for(int y,i=head[x];(y=e[i].to);i=e[i].nxt)\n\ninline void add(int x,int y,int v,int c=0,int l=0,int r=0){\n\tif(!v) v=r-l;\n\te[++cnt]=(nd){head[x],y,v, c,l,r,-1};head[x]=cnt;\n\te[++cnt]=(nd){head[y],x,0,-c,l,r, 1};head[y]=cnt;\n}\nbool SPFA()\n{\n    memset(d,0x3f,sizeof d);d[s]=0;\n    queue<int> q;q.push(s);mn[s]=1<<29;\n    while(!q.empty()){\n        int x=q.front();q.pop();v[x]=0;\n        For(x) if(e[i].v&&d[y]>d[x]+e[i].c)\n        {\n            pre[y]=i; d[y]=d[x]+e[i].c;\n            mn[y]=min(mn[x],e[i].v);\n            if(!v[y]) v[y]=1,q.push(y);\n        }\n    }\n    return d[t]!=0x3f3f3f3f;\n}\nvoid up()\n{\n    ans+=d[t]*mn[t];\n    for(int i,x=t;x!=s;x=e[i^1].to)\n        i=pre[x],e[i].v-=mn[t],e[i^1].v+=mn[t];\n}\nvoid solve()\n{\n\tfor(int x=1;x<=n+1;x++)\n\t\tFor(x) T[x]+=e[i].pd*e[i].l,ans+=e[i].l*e[i].c*(e[i].pd<0);\n\tfor(int i=1;i<=n+1;i++)\n\t\tif(T[i]>0) add(s,i,T[i],0);\n\t\telse if(T[i]<0) add(i,t,-T[i],0);\n\twhile(SPFA()) up();\n}\nsigned main(){\n\trd(n);ss=1;tt=n+1;\n\tadd(tt,ss,INF);\n\tfor(int x,v,i=1;i<=n;i++){\n\t\trd(m);\n\t\twhile(m--) rd(x),rd(v),add(i,x,0,v,1,INF);\n\t}\n\tfor(int i=2;i<=n;i++)\n\t\tadd(i,tt,INF);\n\tsolve();cout<<ans;\n}\n\n```",
        "postTime": 1544796850,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5\u2014\u2014\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41"
    },
    {
        "content": "\u8fd9\u9898\u663e\u7136\u53ef\u4ee5\u5229\u7528\u5355\u7eaf\u5f62\u6cd5\u89e3\u51b3\uff08\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u592a\u61d2\u4e0d\u60f3\u5199\u8d39\u7528\u6d41\uff09\n\n\u6211\u4eec\u5bf9\u52a0\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u6807\u53f7\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u6d41\u5411\u5b83\u7684\u8fb9\u7684\u6d41\u91cf\u5927\u4e8e\u7b49\u4e8e\u5b83\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u7136\u540e\u6bcf\u4e00\u6761\u7ed9\u51fa\u7684\u8fb9\u7684\u4e0b\u754c\u4e3a $1$ \uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u4ece $1$ \u4ee5\u5916\u7684\u8282\u70b9\u8fde\u5411 $1$ \u7684\u8fb9\uff0c\u5b83\u4eec\u7684\u6d41\u91cf\u4e0b\u754c\u4e3a $0$ \u3002\n\n\u8003\u8651\u5c06\u6240\u6709\u6d41\u91cf\u81f3\u5c11\u4e3a $1$ \u7684\u8fb9\u7684\u6d41\u91cf\u8bbe\u4e3a $x_i+1 $\uff0c\u5176\u4f59\u4e3a $x_i$ \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b83\u5b58\u5728\u4e8e\u56fe\u4e0a\uff0c\u90a3\u4e48\u5c31\u5c06\u5b83\u7684\u6765\u6e90\u5bf9\u5e94\u7684\u5e38\u6570\u9879\u52a0\u4e0a $1$ \uff0c\u5b83\u7684\u7ec8\u70b9\u7684\u5e38\u6570\u9879\u51cf\u53bb $1$ \uff1b\u5426\u5219\u4e0d\u4fee\u6539\u5e38\u6570\u9879\u3002\n\n\u7136\u540e\u5229\u7528\u5bf9\u5076\u539f\u7406\u5c06\u6c42\u6700\u5c0f\u503c\u8f6c\u5316\u6210\u6c42\u6700\u5927\u503c\u8dd1\u4e00\u904d\u7ebf\u6027\u89c4\u5212\uff0c\u6700\u540e\u52a0\u4e0a\u56fe\u4e2d\u8fb9\u7684\u8fb9\u6743\u4e4b\u548c\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\n\nconst int N=5305,M=305;\nconst double eps=1e-8,INF=1e18;\n\nint n,m,k,b,c;\n\ndouble a[N][M];\n\ninline void pivot(int l,int e) {\n\tdouble t=a[l][e];a[l][e]=1;\n\tfor(int i=0 ; i<=m ; ++i) a[l][i]/=t;\n\tfor(int i=0 ; i<=n ; ++i)\n\t\tif(i!=l&&fabs(a[i][e])>eps) {\n\t\t\tt=a[i][e],a[i][e]=0;\n\t\t\tfor(int j=0 ; j<=m ; ++j) a[i][j]-=t*a[l][j];\n\t\t}\n}\n\ninline double simplex() {\n\tint l,e;\n\tdouble t,p;\n\twhile(1) {\n\t\te=m+1;\n\t\tfor(int i=1 ; i<=m ; ++i) if(a[0][i]>eps) {e=i;break ;}\n\t\tif(e==m+1) break ;\n\t\tt=INF;\n\t\tfor(int i=1 ; i<=n ; ++i)\n\t\t\tif(a[i][e]>eps&&t>(p=a[i][0]/a[i][e]))\n\t\t\t\tt=p,l=i;\n\t\tif(t==INF) return INF;\n\t\tpivot(l,e);\n\t}\n\treturn a[0][0];\n}\n\nint sum;\n\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1 ; i<=n ; ++i) {\n\t\tscanf(\"%d\",&k);\n\t\tfor(int j=1 ; j<=k ; ++j)\n\t\t\tscanf(\"%d%d\",&b,&c),sum+=c,a[++m][i]=-1,++a[0][i],a[m][b]=1,--a[0][b],a[m][0]=c;//\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\n\t\tif(i!=1) a[++m][i]=-1,a[m][1]=1;\n\t}\n\tswap(n,m);\n\tprintf(\"%.0lf\",-simplex()+sum);\n\treturn 0;\n}\n```",
        "postTime": 1623142559,
        "uid": 79075,
        "name": "mzgwty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4043 [AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5"
    },
    {
        "content": "\u6709\u6e90\u6c47\u6709\u5bb9\u91cf\u4e0b\u754c\u6700\u5c0f\u8d39\u7528\u6d41\n\n\u6bcf\u4e2a\u652f\u7ebf\u5267\u60c5\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7ec8\u7ed3\u8282\u70b9\uff0c\u8fde\u4e00\u6761INF\u7684\u8fb9\u5230\u8d77\u59cb\u70b91\uff0c\u8d39\u7528\u4e3a0\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u65e0\u6e90\u6c47\u6709\u5bb9\u91cf\u4e0b\u754c\u8d39\u7528\u6d41\u95ee\u9898\u3002\u5148\u5bf9\u5f27\u8fdb\u884c\u6539\u9020\uff0c\u5bb9\u91cf\u51cf\u53bb\u4e0b\u754c\uff0c\u7136\u540e\u5bf9\u70b9\u8fdb\u884c\u6539\u9020\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u51cf\u5c11\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\uff0c\u7f3a\u51fa\u5ea6\u7684\uff0c\u70b9\u8fde\u6743\u503c\u4e3a\u51fa\u5ea6\u7684\u8fb9\u5230\u6c47\u70b9\uff1b\u7f3a\u5165\u5ea6\u7684\uff0c\u6e90\u70b9\u8fde\u6743\u503c\u4e3a\u5165\u5ea6\u7684\u8fb9\u5230\u70b9\uff0c\u9644\u52a0\u8fb9\u7684\u8d39\u7528\u4e3a0\uff0c\u7136\u540e\u8dd1\u8d39\u7528\u6d41\uff0c\u8d39\u7528+\u9644\u52a0\u8fb9\u7684\u8d39\u7528\u4e3a\u6700\u5c0f\u8d39\u7528```\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int maxn = 310;\nconst int maxm = 40000;\nint n, k, b, t;\nint tot;\nint d[maxm];\n\nstruct Edge\n{\n    int to, next, cap, flow, cost;\n}edge[maxm];\nint head[maxn], tol;\nint pre[maxn], dis[maxn];\nbool vis[maxn];\nint N ;//\u8282\u70b9\u603b\u4e2a\u6570\uff0c\u8282\u70b9\u7f16\u53f7\u4ece0~N-1\nvoid init(int n)\n{\n    N = n;\n    tol = 0;\n    memset(head, -1, sizeof(head));\n}\nvoid addedge(int u, int v, int cap, int cost)\n{\n    edge[tol].to = v;\n    edge[tol].cap = cap;\n    edge[tol].cost = cost;\n    edge[tol].flow = 0;\n    edge[tol].next = head[u];\n    head[u] = tol++;\n    edge[tol].to = u;\n    edge[tol].cap = 0;\n    edge[tol].cost = -cost;\n    edge[tol].flow = 0;\n    edge[tol].next = head[v];\n    head[v] = tol++;\n}\n\nbool spfa(int s, int t)\n{\n    queue<int>q;\n    for(int i = 0; i < N; i++)\n    {\n        dis[i] = INF;\n        vis[i] = false;\n        pre[i] = -1;\n    }\n    dis[s] = 0;\n    vis[s] = true;\n    q.push(s);\n    while(!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        vis[u] = false;\n        for(int i = head[u]; i != -1; i = edge[i].next)\n        {\n            int v = edge[i].to;\n            if(edge[i].cap > edge[i].flow && dis[v] > dis[u] + edge[i].cost)\n            {\n                dis[v] = dis[u] + edge[i].cost;\n                    pre[v] = i;\n                if(!vis[v])\n                {\n                    vis[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    if(pre[t] == -1) return false;\n    else return true;\n}\n\nint minCostMaxflow(int s, int t, int &cost)\n{\n    int flow = 0;\n    cost = 0;\n    while(spfa(s,t))\n    {\n        int Min = INF;\n        for(int i = pre[t]; i != -1; i = pre[edge[i^1].to])\n        {\n            if(Min > edge[i].cap - edge[i].flow)\n                Min = edge[i].cap - edge[i].flow;\n        }\n        for(int i = pre[t]; i != -1; i = pre[edge[i^1].to])\n        {\n            edge[i].flow += Min;\n            edge[i^1].flow -= Min;\n            cost +=  edge[i].cost*Min;\n        }\n        flow += Min;\n    }\n    return flow;\n}\n\nint main()\n{\n    cin >> n;\n    tot = 0;\n    memset(d, 0, sizeof(d));\n    int st = 0, ed = n+1;\n    init(n+2);\n    addedge(ed, st, INF, 0);\n    for(int i = 1; i <= n; i++)\n    {\n        scanf(\"%d\", &k);\n        for(int j = 1; j <= k; j++)\n        {\n            scanf(\"%d%d\", &b, &t);\n            tot+=t;\n            addedge(i, b, INF, t);\n            d[i]--, d[b]++;\n        }\n    }\n    for(int i = 2; i <= n; i++)\n        addedge(i, 1, INF, 0);\n    for(int i = 1; i <= n; i++)\n    {\n        if(d[i]>0)\n            addedge(st, i, d[i], 0);\n        else if(d[i] < 0)\n            addedge(i, ed, -d[i], 0);\n    }\n    int c;\n    minCostMaxflow(st, ed, c);\n    cout << tot+c;\n    return 0;\n}\n```\n\n",
        "postTime": 1561702586,
        "uid": 205840,
        "name": "Mark_4396",
        "ccfLevel": 0,
        "title": "P4043&&BZOJ3876\u652f\u7ebf\u5267\u60c5"
    },
    {
        "content": "(http://www.elijahqi.win/2017/12/22/bzoj3876-ahoi2014jsoi2014%E6%94%AF%E7%BA%BF%E5%89%A7%E6%83%85/)\n\nDescription\n\nhttp://blog.csdn.net/elijahqi/article/details/78873474\n\n\u3010\u6545\u4e8b\u80cc\u666f\u3011\n\n\u5b85\u7537JYY\u975e\u5e38\u559c\u6b22\u73a9RPG\u6e38\u620f\uff0c\u6bd4\u5982\u4ed9\u5251\uff0c\u8f69\u8f95\u5251\u7b49\u7b49\u3002\u4e0d\u8fc7JYY\u559c\u6b22\u7684\u5e76\u4e0d\u662f\u6218\u6597\u573a\u666f\uff0c\u800c\u662f\u7c7b\u4f3c\u7535\u89c6\u5267\u4e00\u822c\u7684\u5145\u6ee1\u6069\u6028\u60c5\u4ec7\u7684\u5267\u60c5\u3002\u8fd9\u4e9b\u6e38\u620f\u5f80\u5f80\n\n\u90fd\u6709\u5f88\u591a\u7684\u652f\u7ebf\u5267\u60c5\uff0c\u73b0\u5728JYY\u60f3\u82b1\u8d39\u6700\u5c11\u7684\u65f6\u95f4\u770b\u5b8c\u6240\u6709\u7684\u652f\u7ebf\u5267\u60c5\u3002\n\n\u3010\u95ee\u9898\u63cf\u8ff0\u3011\n\nJYY\u73b0\u5728\u6240\u73a9\u7684RPG\u6e38\u620f\u4e2d\uff0c\u4e00\u5171\u6709N\u4e2a\u5267\u60c5\u70b9\uff0c\u75311\u5230N\u7f16\u53f7\uff0c\u7b2ci\u4e2a\u5267\u60c5\u70b9\u53ef\u4ee5\u6839\u636eJYY\u7684\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u800c\u7ecf\u8fc7\u4e0d\u540c\u7684\u652f\u7ebf\u5267\u60c5\uff0c\u524d\u5f80Ki\u79cd\u4e0d\u540c\u7684\u65b0\u7684\u5267\u60c5\u70b9\u3002\u5f53\u7136\u5982\u679c\u4e3a0\uff0c\u5219\u8bf4\u660ei\u53f7\u5267\u60c5\u70b9\u662f\u6e38\u620f\u7684\u4e00\u4e2a\u7ed3\u5c40\u4e86\u3002\n\nJYY\u89c2\u770b\u4e00\u4e2a\u652f\u7ebf\u5267\u60c5\u9700\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\u3002JYY\u4e00\u5f00\u59cb\u5904\u57281\u53f7\u5267\u60c5\u70b9\uff0c\u4e5f\u5c31\u662f\u6e38\u620f\u7684\u5f00\u59cb\u3002\u663e\u7136\u4efb\u4f55\u4e00\u4e2a\u5267\u60c5\u70b9\u90fd\u662f\u4ece1\u53f7\u5267\u60c5\u70b9\u53ef\u8fbe\u7684\u3002\u6b64\u5916\uff0c\u968f\u7740\u6e38\u620f\u7684\u8fdb\u884c\uff0c\u5267\u60c5\u662f\u4e0d\u53ef\u9006\u7684\u3002\u6240\u4ee5\u6e38\u620f\u4fdd\u8bc1\u4ece\u4efb\u610f\u5267\u60c5\u70b9\u51fa\u53d1\uff0c\u90fd\u4e0d\u80fd\u518d\u56de\u5230\u8fd9\u4e2a\u5267\u60c5\u70b9\u3002\u7531\u4e8eJYY\u8fc7\u5ea6\u4f7f\u7528\u4fee\u6539\u5668\uff0c\u5bfc\u81f4\u6e38\u620f\u7684\u201c\u5b58\u6863\u201d\u548c\u201c\u8bfb\u6863\u201d\u529f\u80fd\u635f\u574f\u4e86\uff0c\n\n\u6240\u4ee5JYY\u8981\u60f3\u56de\u5230\u4e4b\u524d\u7684\u5267\u60c5\u70b9\uff0c\u552f\u4e00\u7684\u65b9\u6cd5\u5c31\u662f\u9000\u51fa\u5f53\u524d\u6e38\u620f\uff0c\u5e76\u5f00\u59cb\u65b0\u7684\u6e38\u620f\uff0c\u4e5f\u5c31\u662f\u56de\u52301\u53f7\u5267\u60c5\u70b9\u3002JYY\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u523b\u9000\u51fa\u6e38\u620f\u5e76\u91cd\u65b0\u5f00\u59cb\u3002\u4e0d\u65ad\u5f00\u59cb\u65b0\u7684\u6e38\u620f\u91cd\u590d\u89c2\u770b\u5df2\u7ecf\u770b\u8fc7\u7684\u5267\u60c5\u662f\u5f88\u75db\u82e6\uff0cJYY\u5e0c\u671b\u82b1\u8d39\u6700\u5c11\u7684\u65f6\u95f4\uff0c\u770b\u5b8c\u6240\u6709\u4e0d\u540c\u7684\u652f\u7ebf\u5267\u60c5\u3002\n\nInput\n\u8f93\u5165\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\u3002\n\n\u63a5\u4e0b\u6765N\u884c\uff0c\u7b2ci\u884c\u4e3ai\u53f7\u5267\u60c5\u70b9\u7684\u4fe1\u606f\uff1b\n\n\u7b2c\u4e00\u4e2a\u6574\u6570\u4e3a\uff0c\u63a5\u4e0b\u6765\u4e2a\u6574\u6570\u5bf9\uff0cBij\u548cTij\uff0c\u8868\u793a\u4ece\u5267\u60c5\u70b9i\u53ef\u4ee5\u524d\u5f80\u5267\n\n\u60c5\u70b9\uff0c\u5e76\u4e14\u89c2\u770b\u8fd9\u6bb5\u652f\u7ebf\u5267\u60c5\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002\n\n\nOutput\n\n\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793aJYY\u770b\u5b8c\u6240\u6709\u652f\u7ebf\u5267\u60c5\u6240\u9700\u8981\u7684\u6700\u5c11\u65f6\u95f4\u3002\n\n\n\n\nSample Input\n\n6\n2 2 1 3 2\n\n2 4 3 5 4\n\n2 5 5 6 6\n\n0\n0\n0\nSample Output\n\n24\nHINT\n\nJYY\u9700\u8981\u91cd\u65b0\u5f00\u59cb3\u6b21\u6e38\u620f\uff0c\u52a0\u4e0a\u4e00\u5f00\u59cb\u7684\u4e00\u6b21\u6e38\u620f\uff0c4\u6b21\u6e38\u620f\u7684\u8fdb\u7a0b\u662f\n\n\n1->2->4\uff0c1->2->5\uff0c1->3->5\u548c1->3->6\u3002\n\n\n\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\u6ee1\u8db3N<=300,0<=Ki<=50,1<=Tij<=300,Sigma(Ki)<=5000\n\n\u8fd9\u9898\u5176\u5b9e\u53ef\u4ee5\u6709\u522b\u7684\u65b9\u6cd5 \u4f46\u662f\u4e3a\u4e86\u7ec3\u4e60\u4e0b\u677f\u5b50 \u8fd8\u662f\u5199\u4e86\u4e0a\u4e0b\u754c\u7684\u6700\u5c0f\u8d39\u7528\u6d41\n\n\u505a\u6cd5\u5927\u6982\u5c31\u662f\u9996\u5148\u6211\u5148\u628a\u6240\u6709\u6d41\u91cf\u7684\u4e0b\u754c\u90fd\u6d41\u4e0a \u7136\u540e\u540c\u65f6 \u8fd9\u4e9b\u7b54\u6848\u80af\u5b9a\u90fd\u662f\u6709\u4e86\u7684  \u800c\u4e14\u6211\u56e0\u4e3a\u8fd9\u4e2a\u56fe\u662f\u6240\u6709\u4e0b\u754c\u90fd\u662f1\u7684\u53ef\u884c\u6d41 \u90a3\u4e48\u4e00\u5b9a\u5b58\u5728 \u6240\u4ee5\u6211\u5efa\u4e00\u4e2a\u65e0\u6e90\u65e0\u6c47\u7684\u56fe \u7136\u540e\u53ea\u8981\u8fd9\u4e2a\u65b0\u56fe\u8dd1\u6ee1\u6d41 \u5c31\u4ee3\u8868\u6211\u539f\u56fe\u6d41\u91cf\u5e73\u8861\u4e86 \u90a3\u4e48\u6211\u53ea\u9700\u8981\u5728\u6ee1\u8db3\u4e0b\u754c\u7684\u60c5\u51b5\u4e0b\u4f7f\u5f97\u6d41\u91cf\u5e73\u8861 \u518d\u8dd1\u4e00\u4e0b\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\n\n```cpp\n\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 0x3f3f3f3f\n#define N 330\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0;char ch=gc();\n    while(ch<'0'||ch>'9') ch=gc();\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=gc();\n    return x;\n}\nint num=1,h[N],d[N],T,pre[N],path[N],n,flag[N],f[N];\nstruct node{\n    int y,z,next,c;\n}data[N*N*2];\ninline void insert1(int x,int y,int z,int c){\n    data[++num].y=y;data[num].z=z;data[num].next=h[x];h[x]=num;data[num].c=c;\n    data[++num].y=x;data[num].z=0;data[num].next=h[y];h[y]=num;data[num].c=-c;\n}\ninline bool spfa(){\n    queue<int> q;memset(flag,0,sizeof(flag));memset(f,0x3f,sizeof(f));memset(pre,-1,sizeof(pre));q.push(0);flag[0]=1;f[0]=0;\n    while(!q.empty()){\n        int x=q.front();q.pop();flag[x]=0;\n        for (int i=h[x];i;i=data[i].next){\n            int y=data[i].y,z=data[i].z,c=data[i].c;\n            if (f[x]+c<f[y]&&z){\n                f[y]=f[x]+c;pre[y]=x;path[y]=i;\n                if(!flag[y]) q.push(y),flag[y]=1;\n            }\n        }\n    }if (pre[T]==-1) return 0;else return 1;\n}\nint main(){\n    freopen(\"bzoj3876.in\",\"r\",stdin);\n    n=read();int ans=0,t=n+1;T=n+2;\n    for (int i=1;i<=n;++i){\n        int nm=read();d[i]-=nm;insert1(i,t,inf,0);\n        for (int j=1;j<=nm;++j){int y=read(),z=read();++d[y];insert1(i,y,inf,z);ans+=z;}\n    }\n    for (int i=1;i<=n;++i){if (d[i]<0) insert1(i,T,-d[i],0);if (d[i]>0) insert1(0,i,d[i],0);}insert1(t,1,inf,0);\n    while(spfa()){\n        int minn=inf,now=T;\n        while(now) minn=min(minn,data[path[now]].z),now=pre[now];now=T;\n        while(now){ans+=data[path[now]].c*minn;data[path[now]].z-=minn;data[path[now]^1].z+=minn;now=pre[now];}\n    }printf(\"%d\",ans);\n    return 0;\n}\n\n\n```",
        "postTime": 1515259667,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4043 \u3010[AHOI2014/JSOI2014]\u652f\u7ebf\u5267\u60c5\u3011"
    }
]