[
    {
        "content": "### Part1 \u524d\u8a00\n\n\u7edd\u5bf9\u4e0d\u662f\u523b\u610f\u5237 Ynoi\uff0c\u53ea\u662f\u611f\u5174\u8da3\u770b\u4e00\u770b\u7136\u540e\u79d2\u4e86\u3002\n\n### Part2 \u5bfb\u627e\u601d\u8def\n\n\u6211\u770b\u5230\u8fd9\u9053\u9898\u6700\u5148\u60f3\u5230\u7684\u662f [[Ynoi2012] \u68a6\u65ad SCOI2017](/problem/P5529)\uff0c\u7136\u800c\u8fd9\u9053\u9898\u6211\u5e76\u6ca1\u6709\u505a\u8fc7\uff0c\u672c\u9898\u989c\u8272\u6570\u5982\u6b64\u4e4b\u591a\uff0c\u4e5f\u80af\u5b9a\u4e0d\u80fd ETT\u3002\n\n\u524d\u51e0\u5929\u5199\u8fc7\u4e00\u9053\u4fae\u8fb1\u667a\u5546\u7684[\u9898\u76ee](/problem/P3302)\uff0c\u672c\u60f3\u7740\u6bcf $\\sqrt m$ \u6b21\u8be2\u95ee\u91cd\u6784\u4e00\u4e0b\uff0c\u5373\u53ef\u505a\u5230 $O(n\\sqrt m\\log_2n)$\uff0c\u7ed3\u679c\u53d1\u73b0\u53ea\u6709 Link \u800c\u65e0 Cut \u65f6\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4e8e\u662f\u8f7b\u677e\u505a\u5230\u4e86 $O(n\\log_2^2n)$\uff0c\u672c\u9898\u7531\u4e8e\u6bcf\u6b21\u8be5\u989c\u8272\u90fd\u662f\u6574\u4e2a\u8fde\u901a\u5757\u4e00\u8d77\u6539\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u5206\u88c2\u8fde\u901a\u5757\u7684\u60c5\u51b5\uff0c\u603b\u5171\u7684\u5408\u5e76\u6b21\u6570\u4e0d\u8d85\u8fc7 $n-1$\uff0c\u5f53\u7136\u5fc5\u8981\u65f6\u4e5f\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u8003\u8651\u4e00\u6b21\u6539\u8fde\u901a\u5757\u989c\u8272\u7684\u64cd\u4f5c\uff0c\u53ea\u53ef\u80fd\u5c06\u5b83\u4e0e\u5b83\u7236\u4eb2\uff0c\u6216\u8fde\u901a\u5757\u4e0b\u7684\u5176\u5b83\u8fde\u901a\u5757\u5408\u5e76\uff0c\u548c\u7236\u4eb2\u5408\u5e76\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u5c31\u53ef\u4ee5\uff0c\u4f46\u6211\u4eec\u9700\u8981\u5feb\u901f\u627e\u5230\u8fde\u901a\u5757\u4e0b\u7279\u5b9a\u989c\u8272\u7684\u8fde\u901a\u5757\u6709\u54ea\u4e9b\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u8fde\u901a\u5757\u6df1\u5ea6\u6700\u6d45\u70b9\u6765\u8868\u793a\u8fd9\u4e2a\u8fde\u901a\u5757\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u70b9\u5b58\u50a8\u8fde\u901a\u5757\u4e0b\u7684\u8fde\u901a\u5757\u6700\u6d45\u70b9\uff0c\u4e3a\u4e86\u5feb\u901f\u67e5\u627e\uff0c\u9700\u8981\u6309\u989c\u8272\u6392\u5e8f\uff08\u663e\u7136\u4e0d\u80fd\u76f4\u63a5 `sort`\uff09\u3002\n\n\u5728\u5c06\u8fde\u901a\u5757 $x$ \u5e76\u5230 $y$ \u4e2d\u65f6\uff0c\u8fde\u901a\u5757 $x$ \u4e0b\u7684\u8fde\u901a\u5757\u5c31\u90fd\u4f1a\u8fde\u5230\u8fde\u901a\u5757 $y$ \u4e0b\u9762\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u5408\u5e76\u3002\n\n\u5982\u4f55\u5bfb\u627e\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u901a\u5757\u6700\u6d45\u70b9\uff1f\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\uff0c\u8fd9\u90e8\u5206\u4e0d\u7528\u8fc7\u591a\u8d58\u8ff0\u3002\n\n### Part3 \u975e\u66b4\u529b\u4e0d\u53ef\u8fc7\u89e3\n\n\u6211\u6700\u5148\u60f3\u5230\u7684\u662f\u4f7f\u7528 `std::set` \u6765\u7ef4\u62a4\uff0c\u5f53\u7136\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u652f\u6301\u5728\u5408\u5e76\u8fde\u901a\u5757\u65f6\u5408\u5e76\u4e24\u4e2a `set`\uff0c\u9700\u8981\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2^2n+(m+n)\\alpha(n))$\uff0c\u7a7a\u95f4 $O(n)$\uff0c\u4e0d\u80fd\u901a\u8fc7\uff0c\u4f18\u70b9\u662f\u7801\u91cf\u5c0f\u3002\n\n### Part4 \u975e\u66b4\u529b\u53ef\u8fc7\u89e3\uff08\u6b63\u89e3\uff09\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u90fd\u60f3\u5230\u4e86\u4f7f\u7528 01trie \u5408\u5e76\u6765\u7ef4\u62a4\u8fd9\u4e2a\u201c\u8fde\u901a\u5757\u4e0b\u8fde\u901a\u5757\u6700\u6d45\u70b9\u6309\u989c\u8272\u6392\u5e8f\u201d\uff0c\u7531\u4e8e\u540c\u79cd\u989c\u8272\u7684\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u8fd9\u91cc\u6709\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6211\u4f7f\u7528\u7684\u662f\u94fe\u8868\uff0c\u7531\u4e8e\u94fe\u8868\u63d2\u5165\u3001\u5220\u9664\u3001\u5408\u5e76\u90fd\u662f $O(1)$ \u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u8fd9\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n+(m+n)\\alpha(n))$\uff0c\u7a7a\u95f4 $O(n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n### Part5 \u540e\u8bb0\n\n\u5f88\u591a\u8f83\u96be\u7684\u6570\u636e\u7ed3\u6784\u9898\u6216\u8bb8\u5e76\u4e0d\u9700\u8981\u591a\u4e48\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\uff0c\u66f4\u591a\u7684\u662f\u601d\u7ef4\u7684\u7ec3\u4e60\uff0c\u8981\u80fd\u591f\u60f3\u5230\u3002",
        "postTime": 1676169808,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "01trie \u5408\u5e76\u4e0e\u5e76\u67e5\u96c6"
    },
    {
        "content": "\u8c01\u544a\u8bc9\u4f60 Ynoi \u5c31\u8981\u624b\u5199\u6570\u636e\u7ed3\u6784\u4e86\uff1f\n\n\u7ef4\u62a4 `map<int, list<int>> C[N]`\uff0c$C_{i,j}$ \u8868\u793a\u4e0e $i$ \u70b9\u6240\u5728\u8fde\u901a\u5757\u76f8\u90bb\u7684 $j$ \u8272\u8fde\u901a\u5757\u5e8f\u5217\u3002\n\n$a_x\\gets y$ \u65f6\uff0c\u76f4\u63a5\u5bf9 $C_x$ \u548c $C_i|i\\in C_{x,y}$ \u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u7136\u540e\u53d1\u73b0 $\\forall v$ \u4e0e $x$ \u76f8\u90bb\uff0c\u8981\u66f4\u65b0 $C_{v,y}$\uff0c\u5047\u4e86\u3002\n\nlxl \u8bf4\u8fc7\uff0c\u8fd9\u79cd\u90bb\u57df\u4fe1\u606f\u7ef4\u62a4\u7236\u4eb2\u4e00\u5b9a\u6b7b\uff0c\u6240\u4ee5\u4ee4 $C_{i,j}$ \u8868\u793a\u5728 $i$ \u70b9\u6240\u5728\u8fde\u901a\u5757\u4e0b\u65b9\u7684 $j$ \u8272\u8fde\u901a\u5757\u5e8f\u5217\u3002\n\n$a_x\\gets y$ \u65f6\uff0c\u76f4\u63a5\u5bf9 $C_x$ \u548c $C_i|i\\in C_{x,y}$ \u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u7136\u540e\u53d1\u73b0\u53ea\u9700\u8981\u66f4\u65b0 $C_{\\text{fa}_x,y}$ \u4e86\u3002\n\n\u8fd9\u91cc\u6ca1\u5fc5\u8981\u4ece $C_{\\text{fa}_x,a_x}$ \u91cc\u5220\u6389 $x$\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u662f\u4e0d\u662f\u771f\u7684\u8981\u5408\u5e76\u5c31\u884c\u4e86\u3002\n\n`unordered_map` \u8dd1\u4e0d\u8fc7 `map`\u3002\n\n```cpp\n#include <map>\n#include <list>\n#include <cstdio>\nusing namespace std;\nstruct E\n{\n    int v, t;\n} e[1000050];\nmap<int, list<int>> C[1000050];\nint n, m, c, a[1000050], s[1000050], f[1000050], g[1000050], h[1000050];\nvoid A(int u, int v)\n{\n    e[++c] = {v, h[u]};\n    h[u] = c;\n}\nint F(int x) { return x == f[x] ? x : f[x] = F(f[x]); }\nvoid L(int u, int v)\n{\n    f[v = F(v)] = u = F(u);\n    s[u] += s[v];\n}\nvoid D(int u, int k)\n{\n    for (int i = h[u], v; i; i = e[i].t)\n        if ((v = e[i].v) != k)\n        {\n            g[v] = u;\n            if (a[v] == a[u])\n                L(u, v);\n            else\n                C[F(u)][a[v]].push_back(v);\n            D(v, u);\n        }\n}\nvoid M(int x, int y)\n{\n    if (C[x].size() < C[y].size())\n        swap(C[x], C[y]);\n    for (auto i : C[y])\n        C[x][i.first].splice(C[x][i.first].end(), i.second);\n    C[y].clear();\n}\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 2, x; i <= n; ++i)\n        scanf(\"%d\", &x), A(x, i);\n    for (int i = 1; i <= n; ++i)\n        scanf(\"%d\", a + i), s[f[i] = i] = 1;\n    D(1, 0);\n    for (int i = 0, o, x, y, z; i < m; ++i)\n    {\n        scanf(\"%d%d\", &o, &x);\n        x = F(x);\n        if (o & 1)\n        {\n            scanf(\"%d\", &y);\n            if (a[x] == y)\n                continue;\n            auto l = C[x][y];\n            for (auto i : l)\n                if (y == a[i] && x != F(i))\n                    L(x, i), M(x, i);\n            if (y == a[z = F(g[x])])\n                L(z, x), M(z, x);\n            else if (z)\n                C[z][y].push_back(x);\n            C[F(x)][a[x] = y].clear();\n        }\n        else\n            printf(\"%d\\n\", s[x]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1677552718,
        "uid": 388651,
        "name": "5k_sync_closer",
        "ccfLevel": 7,
        "title": "P9067 [Ynoi Easy Round 2022] \u865a\u7a7a\u5904\u5211 \u9898\u89e3"
    },
    {
        "content": "**[\u3010\u539f\u9898\u94fe\u63a5\u3011](https://www.luogu.com.cn/problem/P9067)**\n\n## \u9898\u76ee\u5206\u6790\n\n\u663e\u7136\u540c\u8272\u8fde\u901a\u5757\u7684\u5408\u5e76\u53ea\u4f1a\u53d1\u751f $O(n)$ \u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u6bcf\u6b21\u627e\u5230\u6709\u7528\u7684\u5408\u5e76\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\u800c\u8fde\u901a\u5757\u5927\u5c0f\u5bb9\u6613\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5bf9\u6bcf\u4e2a\u540c\u8272\u5757 $u$ \u5f00\u4e00\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u7d22\u5f15\u4e3a $i$ \u7684**\u53f6\u5b50**\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u50a8\u5b58 $u$ \u76f8\u90bb\u7684\u989c\u8272\u4e3a $i$ \u7684\u8fde\u901a\u5757\u3002\u8fd9\u6837\u6bcf\u6b21\u5bb9\u6613\u904d\u5386\u9700\u8981\u5408\u5e76\u7684\u8fde\u901a\u5757\uff0c\u5408\u5e76\u8fde\u901a\u5757\u7684\u65f6\u5019\u76f4\u63a5\u505a\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u5408\u5e76\u662f $O(1)$ \u7684\u3002\n\n\u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff0c\u66f4\u6539\u4e00\u4e2a\u540c\u8272\u5757\u65f6\u4e5f\u4f1a\u5f71\u54cd\u76f8\u90bb\u540c\u8272\u5757\u50a8\u5b58\u7684\u76f8\u90bb\u540c\u8272\u5feb\u4fe1\u606f\u3002\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u53bb\u66b4\u529b\u66f4\u6539\u5f71\u54cd\u3002\u4f46\u662f\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u505a\u6cd5\u6253\u4e00\u4e2a\u8865\u4e01\uff1a\u6bcf\u4e2a\u540c\u8272\u5757\u7ef4\u62a4**\u513f\u5b50**\u540c\u8272\u5757\u7684\u4fe1\u606f\uff0c\u7236\u4eb2\u540c\u8272\u5757\u7684\u5408\u5e76\u7279\u6b8a\u5904\u7406\u3002\u8fd9\u6837\u4e00\u6b21\u4fee\u6539\u5c31\u81f3\u591a\u5f71\u54cd\u7236\u4eb2\u7684\u4fe1\u606f\u4e86\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\u66f4\u6539\u989c\u8272\u65f6\u6ca1\u6709\u5fc5\u8981\u505a\u94fe\u8868\u5220\u9664\uff0c\u5728\u5408\u5e76\u65f6\u5224\u65ad\u662f\u5426\u771f\u6b63\u9700\u8981\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u4ee5\u53ca\u6ce8\u610f\u4e00\u4e0b\u94fe\u8868\u4e2d\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u7684\u95ee\u9898\u3002\u663e\u7136\u590d\u6742\u5ea6\u662f\u4e0d\u53d7\u5f71\u54cd\u7684\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\n\n// \u5feb\u8bfb\n\nusing namespace std;\nusing LL=long long;\nusing LD=long double;\nusing UI=unsigned int;\nusing ULL=unsigned long long;\n\nstruct ListNode{ int val,nxt; }__list_t[4000005];\nint __list_cnt;\nclass ListIter\n{\n private:\n\tint id;\n public:\n\tListIter(int _i=0): id(_i){}\n\tinline int operator *()const { return __list_t[id].val; }\n\tinline ListIter &operator ++() { return id=__list_t[id].nxt,*this; }\n\tinline bool operator !=(const ListIter &rhs)const { return id!=rhs.id; }\n};\nclass MyList\n{\n private:\n\tstatic constexpr ListNode *t=__list_t;\n\tfriend class ListIter;\n\tint hd,tl;\n public:\n\tusing iterator=ListIter;\n\tMyList(): hd(0),tl(0){}\n\tinline void push_back(int x) { t[++__list_cnt]=(ListNode){x,hd},hd=x=__list_cnt;if(!tl)tl=x; }\n\tinline void join(MyList &o) { if(o.hd) hd?(t[tl].nxt=o.hd,tl=o.tl):(hd=o.hd,tl=o.tl),o.hd=o.tl=0; }\n\tinline void clear() { hd=tl=0; }\n\tinline bool empty()const { return !hd; }\n\tinline iterator begin()const { return ListIter(hd); }\n\tinline iterator end()const { return ListIter(); }\n};\n\nint n,m,a[1000005];\n\nstruct TreeNode{ int lc,rc; };\nunion UnionNode{ MyList val;TreeNode ch;UnionNode(){} }t[40000005];\nint sgt_cnt,rt[1000005];\n#define LC t[i].ch.lc\n#define RC t[i].ch.rc\nvoid modify(int p,int x,int &i,int l=1,int r=n)\n{\n\tif(!i) i=++sgt_cnt;\n\tif(l==r) return (x?t[i].val.push_back(x):t[i].val.clear()),void();\n\tint mid=(l+r)>>1;\n\tif(mid>=p) modify(p,x,LC,l,mid);\n\telse modify(p,x,RC,mid+1,r);\n}\nMyList &query(int p,int i,int l=1,int r=n)\n{\n\tif(l==r) return t[i].val;\n\tint mid=(l+r)>>1;\n\tif(mid>=p) return query(p,LC,l,mid);\n\telse return query(p,RC,mid+1,r);\n}\nvoid merge(int &x,int &y,int l=1,int r=n)\n{\n\tif(!x || !y) return x|=y,y=0,void();\n\tif(l==r) return t[x].val.join(t[y].val),y=0,void();\n\tint mid=(l+r)>>1;\n\tmerge(t[x].ch.lc,t[y].ch.lc,l,mid);\n\tmerge(t[x].ch.rc,t[y].ch.rc,mid+1,r);\n\ty=0;\n}\n\nstruct Edge{ int to,nxt; }e[1000005];\nint cnt,head[1000005];\ninline void addEdge(int u,int v)\n\t{ e[++cnt]=(Edge){v,head[u]},head[u]=cnt; }\n\nint fa[1000005],siz[1000005],anc[1000005];\ninline int findFa(int x)\n\t{ return x!=fa[x]?fa[x]=findFa(fa[x]):x; }\ninline void link(int x,int y)\n\t{ x=findFa(x),y=findFa(y);if(x!=y)siz[x]+=siz[y],fa[y]=x; }\nvoid dfs(int u,int fa=0)\n{\n\tanc[u]=fa;\n\tif(a[u]==a[fa]) link(fa,u);\n\tfor(int i=head[u],v;(v=e[i].to);i=e[i].nxt) dfs(v,u);\n\tfor(int i=head[u],v;(v=e[i].to);i=e[i].nxt) if(a[u]!=a[v]) modify(a[v],v,rt[findFa(u)]);\n}\n\nint main()\n{\n\t// freopen(\"input.in\",\"r\",stdin);\n\t// freopen(\"output.out\",\"w\",stdout);\n\tqin>>n>>m;\n\tfor(int i=2,x;i<=n;i++) qin>>x,addEdge(x,i);\n\tfor(int i=1;i<=n;i++) qin>>a[i];\n\tiota(fa+1,fa+n+1,1),fill(siz+1,siz+n+1,1),dfs(1);\n\twhile(m--)\n\t{\n\t\tint opt,x,y;\n\t\tqin>>opt;\n\t\tif(opt==1)\n\t\t{\n\t\t\tqin>>x>>y,x=findFa(x);\n\t\t\tif(a[x]==y) continue;\n\t\t\ta[x]=y;\n\t\t\tauto &ls=query(y,rt[x]);\n\t\t\tfor(auto i: ls) if(a[i]==y) merge(rt[x],rt[i]),link(x,i);\n\t\t\tint z=findFa(anc[x]);\n\t\t\tif(a[z]!=y) (z&&(modify(y,x,rt[z]),0));\n\t\t\telse merge(rt[z],rt[x]),link(z,x);\n\t\t\tmodify(y,0,rt[findFa(x)]);\n\t\t}\n\t\telse qin>>x,qout.writeln(siz[findFa(x)]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1676541909,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011P9067 [Ynoi Easy Round 2022] \u865a\u7a7a\u5904\u5211"
    },
    {
        "content": "Ynoi Easy Round \uff0c\u4f46\u6211\u8fd9\u4e2a\u91c7\u8d2d\u8c03\u4e86\u4e00\u4e2a\u4e0a\u5348\u3002\n\n\u8003\u8651\u6734\u7d20\u7684\u505a\u6cd5\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6700\u5927\u540c\u8272\u8054\u901a\u5757\uff0c\u66f4\u6539\u989c\u8272\u65f6\uff0c\u5c06\u6240\u6709\u540c\u8272\u7684\u513f\u5b50\u5408\u5e76\u4e0a\u53bb\uff0c\u513f\u5b50\u7684\u513f\u5b50\u6210\u4e3a\u4e86\u65b0\u8fde\u901a\u5757\u7684\u513f\u5b50\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528 set \u7ef4\u62a4\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\u3002\u7136\u540e\u518d\u5c06\u81ea\u5df1\u5c1d\u8bd5\u5e76\u5230\u7236\u4eb2\u4e0a\u3002\u74f6\u9888\u5728\u4e8e\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u540c\u8272\u7684\u513f\u5b50\u3002\n\n\u8003\u8651\u4f18\u5316\u627e\u513f\u5b50\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u4f60\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u989c\u8272\u533a\u95f4\uff0c\u989c\u8272\u533a\u95f4\u7684\u53f6\u5b50\u4e0a\u5b58\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5b58\u8fd9\u4e2a\u989c\u8272\u7684\u513f\u5b50\u662f\u54ea\u4e9b\u3002\u90a3\u4f60\u53ef\u4ee5\u76f4\u63a5\u52a8\u6001\u5f00\u70b9\u4e3b\u5e2d\u6811\uff0c\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u9012\u5f52\u5408\u5e76\uff0c\u5982\u679c\u9012\u5f52\u5230\u53f6\u5b50\uff0c\u5c31\u628a\u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u8d77\u6765\u3002\u67e5\u8be2\u65f6\u76f4\u63a5\u627e\u5230\u5bf9\u5e94\u7684\u53f6\u5b50\uff0c\u5728\u94fe\u8868\u4e0a\u8df3\u5373\u53ef\u3002\u590d\u6742\u5ea6\u5747\u644a\u5e94\u8be5\u662f\u5bf9\u7684\u3002\n\n\u5b9e\u73b0\u7ec6\u8282\u6709\u70b9\u591a\uff0c\u53ef\u4ee5\u53bb\u770b\u4ee3\u7801\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u53ef\u4ee5\u79c1\u4fe1\u3002\n\n\u611f\u8c22 @[ExplodingKonjac](https://www.luogu.com.cn/user/279800) \u7ed9\u6211\u4eec\u5e26\u6765\u7684\u6bd2\u7624\u3002\n\n~~~cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e6+10;\nint fat[maxn],n,m;\nstruct edge{int to,next;}E[maxn];\nint head[maxn],TOT;\ninline void add(int u,int v)\n{\n    E[++TOT]={v,head[u]};\n    head[u]=TOT;\n}\nstruct node{int id,fr,to;}N[maxn*2];\nint cnt=0;\nint ls[maxn*30],rs[maxn*30],fir[maxn*30],ed[maxn*30];\nint tot;\nvoid update(int &i,int l,int r,int p,int v)\n{\n    if(!i)i=++tot;\n    if(l==r)\n    {\n        N[++cnt].id=v;\n        N[cnt].to=fir[i];\n        N[fir[i]].fr=cnt;\n        if(!fir[i])ed[i]=cnt;\n        fir[i]=cnt;\n        return;\n    }\n    int mid=l+r>>1;\n    if(p<=mid)update(ls[i],l,mid,p,v);\n    else update(rs[i],mid+1,r,p,v);\n}\nvoid print(int x){for(int h=fir[x];h;h=N[h].to)printf(\"%d \",N[h].id);putchar('\\n');}\nint merge(int i,int j,int l,int r)\n{\n    if(!i||!j)return i|j;\n    if(l==r)\n    {\n       // printf(\"I :\");print(i);\n       // printf(\"J :\");print(j);\n        if(!fir[i])\n        {\n        \tfir[i]=fir[j];\n        \ted[i]=ed[j];\n\t\t}\n\t\telse if(!fir[j]);\n\t\telse \n\t\t{\n\t        N[ed[i]].to=fir[j];\n\t        N[fir[j]].fr=ed[i];\n\t        ed[i]=ed[j];\n\t    }\n        return i;\n    }\n    int mid=l+r>>1;\n    ls[i]=merge(ls[i],ls[j],l,mid);\n    rs[i]=merge(rs[i],rs[j],mid+1,r);\n    return i;\n}\nint query(int i,int l,int r,int p)\n{\n    if(!i)return 0;\n    if(l==r)return i;\n    int mid=l+r>>1;\n    if(p<=mid)return query(ls[i],l,mid,p);\n    else return query(rs[i],mid+1,r,p);\n}\nint rt[maxn],col[maxn];\nint par[maxn],siz[maxn];\nint find(int x){return x==par[x]?x:par[x]=find(par[x]);}\nvoid dfs(int u)\n{\n    for(int i=head[u];i;i=E[i].next)\n    {\n        int v=E[i].to;\n        dfs(v);\n    }\n    vector<int> S,T;\n    for(int i=head[u];i;i=E[i].next)\n    {\n        int v=E[i].to;\n        v=find(v);\n        if(col[u]==col[v])\n           S.push_back(v);\n        else T.push_back(v);\n    }\n    u=find(u);\n    for(int v:S)rt[u]=merge(rt[u],rt[v],1,1000000),par[v]=u,siz[u]+=siz[v];\n    for(int v:T)update(rt[u],1,1000000,col[v],v);\n}\nint vis[maxn];\nint main()\n{\n\t//freopen(\"data3.in\",\"r\",stdin);\n\t//freopen(\"b3.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=2;i<=n;i++)\n        scanf(\"%d\",&fat[i]),add(fat[i],i);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&col[i]);\n    for(int i=1;i<=n;i++)par[i]=i,siz[i]=1;\n    dfs(1);\n    for(int t=1;t<=m;t++)\n    {\n        int opt,x,y;\n        scanf(\"%d\",&opt);\n        if(opt==2)\n        {\n            scanf(\"%d\",&x);\n            printf(\"%d\\n\",siz[find(x)]);\n        }   \n        else\n        {\n            scanf(\"%d%d\",&x,&y);\n            x=find(x);\n            if(col[x]==y)continue;\n            int now=query(rt[x],1,1000000,y);\n            if(now)\n            { \n                vector<int> son;\n                for(int h=fir[now];h;h=N[h].to)\n                {\n                    int s=N[h].id;\n                    s=find(s);\n                    if(col[s]==y&&vis[s]!=t&&s!=x)son.push_back(s),vis[s]=t;\n                }\n                fir[now]=ed[now]=0;\n                for(int s:son)\n                {\n                    //printf(\"!%d\\n\",s);\n                    rt[x]=merge(rt[x],rt[s],1,1000000);\n                    siz[x]+=siz[s];\n                    par[s]=x;\n                }\n            }\n            if(fat[x])\n            {\n                int F=find(fat[x]);\n                if(y==col[F])\n                {\n                    par[x]=F;\n                    siz[F]+=siz[x];\n                    //printf(\"?%d %d\\n\",F,x);\n                    merge(rt[F],rt[x],1,1000000);\n                }\n                else update(rt[F],1,1000000,y,x);\n            }\n            col[x]=y;\n        }\n    }\n    return 0;\n}\n~~~",
        "postTime": 1676437619,
        "uid": 343060,
        "name": "kkio",
        "ccfLevel": 7,
        "title": "P9076"
    }
]