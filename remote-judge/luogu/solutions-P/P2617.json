[
    {
        "content": "\u7c7b\u4f3c\u7b97\u6cd5\u603b\u7ed3\n\n**1\u3001\u9759\u6001\u6574\u4f53Kth**\n\n\u6ed1\u7a3d\u5427...sort\u4e00\u904d\u5c31\u597d\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$    \u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\n\n**2\u3001\u52a8\u6001\u6574\u4f53Kth**\n\n\u79bb\u6563\u5316\u540e\u5f00\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u90a3\u4e2a\u6570\uff08\u79bb\u6563\u5316\u540e\u7684\uff09\u6709\u591a\u5c11\u4e2a\uff0c\u5411\u4e0a\u7ef4\u62a4\u548c\uff1b\n\n\u67e5\u8be2\u65f6\u5148\u67e5\u8be2\u5de6\u5b50\u6811\u548csum\uff0c\u6bd4\u8f83k\u548csum\u7684\u5927\u5c0f\uff1a\u82e5k<=sum\u5219\u8bf4\u660e\u7b2ck\u5c0f\u6570\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u9012\u5f52\u67e5\u8be2\u5de6\u5b50\u6811\uff1b\n\n\u5426\u5219\uff0c\u8fd9\u4e2a\u6570\u5bf9\u5e94\u7684\u5c31\u662f\u53f3\u5b50\u6811\u4e2d\u7b2ck-sum\u5c0f\u7684\u6570\uff0ck-=sum\uff0c\u9012\u5f52\u67e5\u8be2\u53f3\u5b50\u6811\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$    \u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\n\n**3\u3001\u9759\u6001\u533a\u95f4Kth**\n\n\u5bf9\u6bcf\u4e2a\u70b9\u4ee5\u5176\u524d\u7f00\u5f00\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u4efb\u610f\u4e00\u6bb5\u533a\u95f4\u5747\u53ef\u4ee5\u8868\u793a\u6210\u4e3a\u4e24\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u4f5c\u5dee\uff0c\u5373R\u4f4d\u7f6e\u7684\u7ebf\u6bb5\u6811\u51cf\u53bbL-1\u4f4d\u7f6e\u4e0a\u7684\u7ebf\u6bb5\u6811\n\n\u6bcf\u4e2a\u70b9\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u7a7a\u95f4\u590d\u6742\u5ea6$O(n^2)$\uff0cMLE\uff0c\u8003\u8651\u5230\u540e\u4e00\u4e2a\u4f4d\u7f6e\u76f8\u6bd4\u4e8e\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u66f4\u6539\u53ea\u6709$logn$\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u4f7f\u7528\u4e3b\u5e2d\u6811\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$    \u7a7a\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n**4\u3001\u52a8\u6001\u533a\u95f4Kth**(\u5c31\u662f\u672c\u9898\u8fa3)\n\n\u8fd8\u662f\u8981\u60f3\u529e\u6cd5\u7ef4\u62a4\u524d\u7f00\u548c\u3002\u5982\u679c\u53ea\u662f\u540c3\u3001\u7684\u524d\u7f00\u548c\u7684\u8bdd\uff0c\u5c31\u8981\u5bf9\u524d\u7f00\u548c\u8fdb\u884c$O(nlogn)$\u7684\u5355\u6b21\u4fee\u6539\uff0c\u663e\u7136TLE\u3002\n\n\u8fd9\u91cc\u8003\u8651\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u548c\u3002\u4fee\u6539\u65f6\uff0c\u53ef\u4ee5\u53ea\u4fee\u6539$logn$\u4e2a\u4f4d\u7f6e\uff0c\u590d\u6742\u5ea6$O(log^2n)$\uff1b\n\n\u67e5\u8be2\u65f6\uff0c\u4f9d\u65e7\u662fR\u4f4d\u7f6e\u51cf\u53bbL-1\u4f4d\u7f6e\uff0c\u8fd9\u65f6\u5019\u4e0d\u518d\u662f\u4e24\u68f5\u7ebf\u6bb5\u6811\u4f5c\u5dee\uff0c\u800c\u662flog\u68f5\u7ebf\u6bb5\u6811\u4e0elog\u68f5\u7ebf\u6bb5\u6811\u4f5c\u5dee\uff1b\u8df3\u7684\u65f6\u5019\uff0clog\u4e2a\u8282\u70b9\u4e00\u8d77\u8df3\u5230\u5de6\u5b50\u6811/\u53f3\u5b50\u6811\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$    \u7a7a\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int MAX=10005;\nstruct segment_tree{int v;int ls,rs;}t[MAX*400];//\u7ebf\u6bb5\u6811\u5f00nlogn\u5927\u5c0f\nstruct operation{bool b;int l,r,k;int pos,t;}q[MAX];//\u56e0\u4e3a\u8981\u79bb\u6563\u82b1\u6240\u4ee5\u8981\u628a\u6240\u6709\u6570\u636e\u8f93\u8fdb\u6765\u79bb\u7ebf\u641e\nint n,m,a[MAX],o[MAX<<1],rt[MAX],len,tot,temp[2][20],cnt[2];\nchar opt;\nvoid Modify(int &now,int l,int r,int pos,int val)\n{\n    if (!now) now=++tot;\n    t[now].v+=val;\n    if (l==r) return;\n    int mid=l+r>>1;\n    if (pos<=mid) Modify(t[now].ls,l,mid,pos,val);\n    else Modify(t[now].rs,mid+1,r,pos,val);\n}\nvoid prepare_Modify(int x,int val)\n{\n    int k=lower_bound(o+1,o+len+1,a[x])-o;\n    for (int i=x;i<=n;i+=i&-i) Modify(rt[i],1,len,k,val);//\u5904\u7406\u51fa\u9700\u8981\u4fee\u6539\u54ealog\u68f5\u4e3b\u5e2d\u6811\n}\nint Query(int l,int r,int k)\n{\n    if (l==r) return l;\n    int mid=l+r>>1,sum=0;\n    for (int i=1;i<=cnt[1];i++) sum+=t[t[temp[1][i]].ls].v;\n    for (int i=1;i<=cnt[0];i++) sum-=t[t[temp[0][i]].ls].v;\n    if (k<=sum)\n    {\n        for (int i=1;i<=cnt[1];i++) temp[1][i]=t[temp[1][i]].ls;\n        for (int i=1;i<=cnt[0];i++) temp[0][i]=t[temp[0][i]].ls;\n        return Query(l,mid,k);\n    }\n    else\n    {\n        for (int i=1;i<=cnt[1];i++) temp[1][i]=t[temp[1][i]].rs;\n        for (int i=1;i<=cnt[0];i++) temp[0][i]=t[temp[0][i]].rs;\n        return Query(mid+1,r,k-sum);\n    }\n}\nint prepare_Query(int l,int r,int k)\n{\n    memset(temp,0,sizeof(temp));//\u540c\u4fee\u6539\uff0c\u5904\u7406\u51fa\u9700\u8981\u8fdb\u884c\u76f8\u51cf\u64cd\u4f5c\u7684\u662f\u54ealog\u68f5\u4e3b\u5e2d\u6811\n    cnt[0]=cnt[1]=0;\n    for (int i=r;i;i-=i&-i) temp[1][++cnt[1]]=rt[i];\n    for (int i=l-1;i;i-=i&-i) temp[0][++cnt[0]]=rt[i];\n    return Query(1,len,k);\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for (int i=1;i<=n;i++) cin>>a[i],o[++len]=a[i];\n    for (int i=1;i<=m;i++)\n    {\n        cin>>opt;\n        q[i].b=(opt=='Q');\n        if (q[i].b)    cin>>q[i].l>>q[i].r>>q[i].k;\n        else cin>>q[i].pos>>q[i].t,o[++len]=q[i].t;\n    }\n    sort(o+1,o+len+1);\n    len=unique(o+1,o+len+1)-o-1;//\u79bb\u6563 \u2014\u2014 \u6392\u5e8f + \u53bb\u91cd\n    for (int i=1;i<=n;i++) prepare_Modify(i,1);\n    for (int i=1;i<=m;i++)\n    {\n        if (q[i].b)    printf(\"%d\\n\",o[prepare_Query(q[i].l,q[i].r,q[i].k)]);\n        else\n        {\n            prepare_Modify(q[i].pos,-1);\n            a[q[i].pos]=q[i].t;\n            prepare_Modify(q[i].pos,1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1509719399,
        "uid": 47654,
        "name": "\u79df\u9165\u96e8",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Ranking\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u6574\u4f53\u4e8c\u5206\u7684\u597d\u9898\n\n\u60f3\u5fc5\u505a\u8fd9\u9053\u9898\u76ee\u7684\u4eba\u90fd\u77e5\u9053\u4e8c\u5206\u7b54\u6848\uff0c\u800c\u6574\u4f53\u4e8c\u5206\u76f8\u5f53\u4e8e\u4e00\u6b21\u6027\u4e8c\u5206\u6240\u6709\u7b54\u6848\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u9053\u9898\u76ee\u800c\u8a00\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fm log 1e9\uff0c\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u51cf\u53bb\u539f\u6765\u7684\u503c\uff0c\u52a0\u4e0a\u4fee\u6539\u6210\u7684\u503c\uff0c\u5305\u62ec\u8bfb\u5165\u539f\u5148\u5e8f\u5217ai\u4e5f\u53ef\u4ee5\u662f\u5982\u6b64\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u8981\u70b9\u662f\u7edf\u8ba1mb\u7684\u6392\u540d\u3002\u6700\u66b4\u529b\u7684\u65b9\u5f0f\u662f\u5f00\u4e00\u4e2a\u8ba1\u6570\u8868\u53bb\u4e00\u4e2a\u4e2a\u6570\u8fc7\u6765\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u6bd4\u5982mb=50\uff0c\u524d\u9762\u6709\u4e24\u4e2a\u6570\uff0c\u4e00\u4e2aa1=4\uff0c\u4e00\u4e2aa2=49\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6570\u7684\u503c\u662f\u6709\u5fc5\u8981\u8003\u8651\u7684\u5417\uff1f\u663e\u7136\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6bd450\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u90fd\u5f53\u6210\u4e24\u4e2a\u503c\u662f1\u7684\u6807\u8bb0\uff0c\u63a5\u4e0b\u6765\u7edf\u8ba1\u6392\u540d\u53ea\u8981\u8ba1\u7b97\u524d\u7f00\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u6b64\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u8981\u70b9\uff0c\u5c31\u662f\u5bf9\u4e8e\u810f\u6570\u636e\u7684\u5904\u7406\u3002\u810f\u6570\u636e\u4e5f\u5c31\u662f\u4f1a\u5bf9\u8ba1\u7b97\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd\u7684\u6570\u636e\u3002\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u503c\u5927\u4e8e\u7b49\u4e8emb\u7684\u64cd\u4f5c\u5728[lb,mb)\u4e2d\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u4f46\u662f\u5728[mb,ub)\u7684\u64cd\u4f5c\u4e2d\uff0c\u503c\u5c0f\u4e8emb\u7684\u64cd\u4f5c\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u4f46\u662f\u663e\u7136\u5982\u679c\u51cf\u53bb\u4e00\u4e2ak\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u8fd9\u4e2a\u5f71\u54cd\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u7a0b\u5e8f\u6709\u5f88\u6709\u8da3\u7684\u4e00\u70b9\u3002\u8fd9\u9053\u9898\u7684\u539f\u9898\u662fzoj2112\uff0c\u5728\u5927\u5b66OJ\u91cc\u9762\u662f\u6709\u591a\u7ec4\u6570\u636e\u7684\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u51e0\u4e4e\u53ef\u4ee5\u4e0d\u7528\u521d\u59cb\u5316\u76f4\u63a5\u63d0\u4ea4\u8fc7\u53bb\uff0c\u539f\u56e0\u5c31\u662f\u6bcf\u4e00\u7ec4\u6570\u636e\u6574\u4f53\u4e8c\u5206\u4e4b\u540e\uff0c\u6240\u6709\u53c2\u4e0e\u7684\u6570\u7ec4\u7684\u503c\u5168\u90e8\u90fd\u7a7a\u4e86\u3002\u5177\u4f53\u53ef\u4ee5\u81ea\u5df1\u8bc1\u660e\u4e00\u4e0b\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n\nusing namespace std;\n\nstruct op\n{\n    int type; \n    //type==0 Change i means position; j means ispositive; k means the number after change\n    //type==1 Query i means left; r means right; k means kth-number\n    int i,j,k;\n    int id;\n};\n\nint n,m,a[10050],ans[10050],f[50050];\n\nvector <op> q;\n\nint lowbit(int x)\n{\n    return x&-x;\n}\n\nvoid add(int x,int k)\n{\n    while (x<=n)\n    {\n        f[x]+=k;\n        x+=lowbit(x);\n    }\n}\n\nint query(int k)\n{\n    int ans=0;\n    while (k>0)\n    {\n        ans+=f[k];\n        k-=lowbit(k);\n    }\n    return ans;\n}\n\nvoid solve(int lb,int ub,vector <op> &q)\n{\n    vector <op> Left;\n    vector <op> Right;\n    int mb=(lb+ub)>>1;\n    //cout << lb << \" \" << mb << \" \" << ub << endl;\n    if (ub-lb==1)\n    { \n        for (int i=0;i<q.size();i++)\n        {\n            if (q[i].type==1)\n                ans[q[i].id]=lb;\n        }\n        return;\n    }\n    else if (q.empty())\n        return;\n    for (int i=0;i<q.size();i++)\n    {\n        op tmp=q[i];\n        if (tmp.type==0)\n        {\n            if (tmp.k<mb)\n            {\n                add(tmp.i,tmp.j);//i:pos j:num\n                Left.push_back(tmp);\n            }\n            else\n                Right.push_back(tmp);\n        }\n        else        \n        {\n            int kth=query(tmp.j)-query(tmp.i-1);\n            if (kth>=tmp.k)\n                Left.push_back(tmp);\n            else\n            {\n                tmp.k-=kth;\n                Right.push_back(tmp);\n            }\n        }\n    }\n    for (int x=0;x<Left.size();x++)\n        if(Left[x].type==0)\n            add(Left[x].i,-Left[x].j);\n    solve(lb,mb,Left);\n    solve(mb,ub,Right);\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        op tmp={0,i,1,a[i]};\n        q.push_back(tmp);\n    }\n    for (int x=0;x<m;x++)\n    {\n        char cmd;\n        int i;\n        scanf(\"%s%d\",&cmd,&i);\n        if (cmd=='C')\n        {\n            int t;\n            scanf(\"%d\",&t);\n            op tmp={0,i,-1,a[i],0};\n            q.push_back(tmp);\n            a[i]=t;\n            tmp={0,i,1,t,0};\n            q.push_back(tmp);\n        }\n        else\n        {\n            int j,k;\n            scanf(\"%d%d\",&j,&k);\n            op tmp={1,i,j,k,x};\n            q.push_back(tmp);\n        }\n    }\n    for (int i=0;i<m;i++)\n        ans[i]=-1;\n    solve(0,1e9,q);\n    for (int i=0;i<m;i++)\n        if (ans[i]!=-1)\n            printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\u7136\u800c\u6574\u4f53\u4e8c\u5206\u8fd8\u662f\u6bd4\u6811\u5957\u6811\u6162\uff0c\u4f46\u662f\u6574\u4f53\u4e8c\u5206\u7684\u4f18\u52bf\u5c31\u662f\u597d\u5199\u3002~~\u7279\u522b\u5bf9\u4e8e\u6211\u8fd9\u79cd\u5f31\u7701\u849f\u84bb\u800c\u8a00\u3002~~\n",
        "postTime": 1515225715,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Ranking\u3011"
    },
    {
        "content": "\u6015\u662f\u8fd8\u6ca1\u6709\u9898\u89e3\uff0c\u6240\u4ee5\u5148\u5199\u4e00\u7bc7\u3002\n\n\n\u8fd9\u9898\u5c31\u662f\u7ef4\u62a4\u5e26\u4fee\u6539\u7684\u4e3b\u5e2d\u6811\u3002\u9996\u5148\u6811\u5957\u6811\u80af\u5b9a\u662f\u80fd\u505a\u7684\uff0c\u65e2\u7136\u6811\u5957\u6811\u80fd\u505a\u90a3\u4e48\u6574\u4f53\u4e8c\u5206\u80af\u5b9a\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n\n\u7531\u4e8e\u6211\u5e76\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e24\u79cd\u505a\u6cd5\uff0c\u6240\u4ee5\u6b64\u5904\u4e0d\u4e88\u4ecb\u7ecd\u3002\n\n\n\u5927\u6982\u63cf\u8ff0\u4e0b\u4e3b\u5e2d\u6811\u7684\u601d\u8def\uff1a\n\n\n\u9996\u5148\u8bf4\u8bf4\u600e\u4e48\u641e\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\uff1f\n\n\n\u56de\u5fc6\u4e00\u822c\u7684kth\u95ee\u9898\uff0c\u6211\u4eec\u7684\u4e3b\u5e2d\u6811\u6c42\u7684\u662f\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u76ee\u6807\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u7684\u4e3b\u5e2d\u6811\u5dee\u5206\u4e0b\u5c31\u80fd\u6c42\u51fakth\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u652f\u6301\u4fee\u6539\u64cd\u4f5c\uff1f\n\n\n\u8003\u8651\u5230\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u4e3b\u5e2d\u6811\u6734\u7d20\u7684\u7ef4\u62a4\u533a\u95f4\u524d\u7f00\u548c\uff0c\u652f\u6301\u4fee\u6539\u7684\u8bdd\uff0c\u53ea\u8981\u628a\u524d\u7f00\u548c\u4ea4\u7ed9\u64c5\u957f\u5b83\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u4e3b\u5e2d\u6811\u53ea\u8981\u7ef4\u62a4\u4e0b\u4f4d\u7f6e\u5c31\u597d\u3002\n\n\n\u987a\u624b\u5e7f\u544a\uff1ahttp://www.cnblogs.com/zcysky/p/6832876.html\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 10005\nusing namespace std;\ninline int lowbit(int x){return x&-x;}\nint n,m,sz,totn,totx,toty,a[N],b[N<<1],ca[N],cb[N],cc[N];\nint xx[N],yy[N],rt[N],size[600\\*N],ls[600\\*N],rs[600\\*N];\nvoid ins(int &o,int l,int r,int x,int q,int v){\n    o=++sz;size[o]=size[x]+v;ls[o]=ls[x];rs[o]=rs[x];\n    if(l==r)return;int mid=(l+r)>>1;\n    if(q<=mid)ins(ls[o],l,mid,ls[x],q,v);\n    else ins(rs[o],mid+1,r,rs[x],q,v);\n}\nint query(int l,int r,int q){\n    if(l==r)return l;\n    int sum=0,mid=(l+r)>>1;\n    for(int i=1;i<=totx;i++)sum-=size[ls[xx[i]]];\n    for(int i=1;i<=toty;i++)sum+=size[ls[yy[i]]];\n    if(q<=sum){\n        for(int i=1;i<=totx;i++)xx[i]=ls[xx[i]];\n        for(int i=1;i<=toty;i++)yy[i]=ls[yy[i]];\n        return query(l,mid,q);\n    }\n    else{\n        for(int i=1;i<=totx;i++)xx[i]=rs[xx[i]];\n        for(int i=1;i<=toty;i++)yy[i]=rs[yy[i]];\n        return query(mid+1,r,q-sum);\n    }\n}\nvoid add(int x,int v){\n    int k=lower\\_bound(b+1,b+totn+1,a[x])-b;\n    for(int i=x;i<=n;i+=lowbit(i))ins(rt[i],1,totn,rt[i],k,v);\n}\ninline int read(){\n    int f=1,x=0;char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x\\*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f\\*x;\n}\nint main(){char s[20];\n    n=read();m=read();\n    for(int i=1;i<=n;i++)a[i]=read(),b[++totn]=a[i];\n    for(int i=1;i<=m;i++){\n        scanf(\"%s\",s);ca[i]=read();cb[i]=read();\n        if(s[0]=='Q')cc[i]=read();else b[++totn]=cb[i];\n    }\n    sort(b+1,b+totn+1);\n    totn=unique(b+1,b+totn+1)-b-1;\n    for(int i=1;i<=n;i++)add(i,1);\n    for(int i=1;i<=m;i++){\n        if(cc[i]){\n            totx=toty=0;\n            for(int j=ca[i]-1;j;j-=lowbit(j))xx[++totx]=rt[j];\n            for(int j=cb[i];j;j-=lowbit(j))yy[++toty]=rt[j];\n            printf(\"%d\\n\",b[query(1,totn,cc[i])]);\n        }\n        else{add(ca[i],-1);a[ca[i]]=cb[i];add(ca[i],1);}\n    }\n}\n\u00b7\u00b7\u00b7",
        "postTime": 1495185106,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Ranking\u3011"
    },
    {
        "content": "# \t\t       \u3010\u5e26\u4fee\u6539\u7684\u4e3b\u5e2d\u6811\u3011\u7406\u89e3\n\n## \u4e00:\u524d\u7f6e\u829d\u58eb:\n\n## 1.\u6811\u72b6\u6570\u7ec4(\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4\u6765\u6253\u8fd9\u4e2a?(\u5927\u96fe   )\n\n##   \t \t      2.\u4e3b\u5e2d\u6811\uff08\u4e0d\u4f1a\u4e3b\u5e2d\u6811\u6765\u6253\u8fd9\u4e2a?(\u5de8\u96fe   )\n\n## \t\t      3.\u524d\u7f00\u548c  (\u4e0d\u4f1a\u524d\u7f00\u548c\u6765\u6253\u8fd9\u4e2a?(\u795e\u96fe   \uff09\n\n## \t\t      4.\u6743\u503c\u7ebf\u6bb5\u6811 (\u4e0d\u4f1a\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u6253\u8fd9\u4e2a?(\u4ed9\u96fe)    )\n\n## \t\t      5.\u770b\u8fd9\u7bc7\u6587\u7ae0\u7684\u4f60\u9700\u8981\u7528\u4e3b\u5e2d\u6811\u5c06\u6c42\u533a\u95f4kth\u7ec3\u5f97\u6bd4\u8f83\u719f\uff0c\u5e76\u4e14\u8981\u7406\u89e3\u5176\u539f\u7406\u3002\n\n## \u4e8c:\u5206(che)\u6790(dan):\n\n\u9996\u5148,\u6211\u4eec\u77e5\u9053,\u4e3b\u5e2d\u6811\u5176\u5b9e\u662f\u4e00\u9897\u5177\u6709n\u4e2a\u6839\u7684\u6811(\u4ecb\u4e8e\u6811\u4e0e\u68ee\u6797\u4e4b\u95f4)\u3002\u7b2ci\u4e2a\u6839\u6240\u5f62\u6210\u7684\u6811(\u4e3a\u4e86\u7b80\u5199,\u6211\u4eec\u7528T(i)\u8868\u793a)\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5c06\u5e8f\u52171->i\u4f9d\u6b21\u6dfb\u52a0\u8fdb\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u6240\u5f62\u6210\u7684\u6811\u3002\n\n \u6211\u4eec\u53c8\u77e5\u9053\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u6240\u50a8\u5b58\u7684\u4fe1\u606f\u5176\u5b9e\u662f\u5b83\u6240\u7ba1\u7684\u533a\u95f4\u4e2d\u6570\u5b57\u7684\u6570\u91cf\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u533a\u95f4l->r\u6240\u5f62\u6210\u7684\u6743\u503c\u7ebf\u6bb5\u6811,\u5b83\u76f8\u5f53\u4e8e\u5c06T(r)\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0eT(l-1)\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u4f5c\u5dee\u6240\u884c\u6210\u7684\u6811\u3002\u7528\u4e00\u53e5\u8bdd\u6982\u62ec:\"\u5bf9\u4e8e1->i\u6240\u5f62\u6210\u7684\u6811,\u5b83\u662f\u53ef\u51cf\u7684\u3002\"\u8fd9\u4fbf\u662f\u4e3b\u5e2d\u6811\u7684\u6838\u5fc3\u5185\u5bb9\u3002\n\n#### \t\u7136\u540e\uff0cboss\u6765\u4e86\uff0c\u5982\u4f55\u4f7f\u4e3b\u5e2d\u6811\u8d44\u74f7\u4fee\u6539\u64cd\u4f5c\u5462\uff1f\n\n \u66b4\u529b\u7684\u505a\u6cd5:\u5982\u679c\u6211\u4eec\u4fee\u6539\u4e86\u8282\u70b9x\u7684\u503c(\u8bbe\u4e3aw[x])\u4e3ay\uff0c\u90a3\u4e48\u5305\u542b\u8282\u70b9x\u7684\u4e3b\u5e2d\u6811\u4e3aT(x)->T(n)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628aT(x)->T(n)\u90fd\u53bb\u51cf\u4e00\u4e2aw[x]\u7684\u503c,\u52a0\u4e00\u4e2ay\u3002\u5355\u6b21\u590d\u6742\u5ea6O(nlogn)\u3002\u4e8e\u662f\u5149\u8363\u5730\u8d85\u65f6\u4e86QwQ\n\n \u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n #### \u8fd9\u91cc\u7ed9\u51fa\u7b54\u6848:\u6211\u4eec\u77e5\u9053\uff0c\u5728\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06T(r)-T(l-1)\uff0c\u5176\u4e2dT(x)\u8868\u793a\u7684\u662f\u5c061-x\u5e8f\u5217\u6784\u6210\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u5373\u662f\u8bf4:T(x)=T(x-1)+w[x] (\u8fd9\u91cc\u7684\u2018+\u2019\u4ee3\u6307\u5c06w[x]\u6dfb\u52a0\u5230\u6811\u4e2d)\u3002\u73b0\u5728\u6709\u6ca1\u6709\u4ec0\u4e48\u611f\u89c9\uff1f\u6ca1\u9519\uff01T(x)\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u8bb0\u5f55\u7684\u524d\u7f00\u548c(\u6ce8:\u6b64\u524d\u7f00\u548c\u975e\u5f7c\u524d\u7f00\u548c)\uff01\u4e8e\u662f\uff0c\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u6c421->r,\u4e0e1->l-1\u7684\u4e00\u4e2a\u524d\u7f00\u548c\uff01\n\n#### \t\u73b0\u5728\uff0c\u6211\u4eec\u7b80\u5316\u4e0b\u9898\u76ee:\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217\uff0c\u8d44\u74f7\u5355\u70b9\u4fee\u6539\u548c\u6c42\u533a\u95f4\u548c\n\n \u770b\u5230\u8fd9\u91cc\uff0c\u662f\u4e0d\u662f\u604d\u7136\u5927\u609f\uff1f\u8fd9\u4e0d\u662f~~sb~~\u6811\u72b6\u6570\u7ec4(\u7ebf\u6bb5\u6811/\u5206\u5757)\u561b!\n\n ~~\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u5feb\uff0c\u53c8\u597d\u6253\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u6811\u72b6\u6570\u7ec4(\u62a0\u9f3b~~\n\n#### \t\u6ca1\u9519\uff01\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u50cf\u505a\u6811\u72b6\u6570\u7ec4\u90a3\u6837\uff0c\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\u5c31\u597d\u4e86\uff01\u53ea\u9700\u8981\u5c06\u6bcf\u6b21\u7684O(1)\u52a0\u6cd5\u66ff\u6362\u6210O(log n)\u7684\u4fee\u6539\u4e3b\u5e2d\u6811\u7684add\u64cd\u4f5c\u5373\u53ef\uff01\u590d\u6742\u5ea6O(nlognlogn)!\n\n \u6492\u82b1\uff01\uff01\uff01\n\n## \u4e09:\u5b9e\u73b0:\n\n \u7531\u4e8e\u67d0\u79cd\u795e\u5947\u7684\u7384\u5b66\u539f\u56e0\uff0c\u6211\u7684\u4ee3\u7801\u7684\u5e38\u6570\u5de8\u5927\uff0c\u4e0d\u9002\u7528\u4e8e\u5404\u4f4d\u540c\u5b66\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u7ed9\u53ea\u51fa[\u4ee3\u7801](https://www.luogu.org/paste/dlxstput)\u3002\u540c\u5b66\u4eec\u53ef\u4ee5\u81ea\u884c\u53bb\u7f51\u4e0a\u641c\u641c\u6a21\u677f\uff0c\u770b\u770b\u5927\u4f6c\u4eec\u7684\u5de8\u5feb\u5b9e\u73b0\uff01\n\n## \u56db:\u95f2\u8bdd:\n\n \u8bb2\u4e86\u8fd9\u4e48\u591a\uff0c\u611f\u89c9\uff0c\u8fd8\u662f\u81ea\u5df1\u8bb2\u5f97\u81ea\u5df1\u7406\u89e3\u5f97\u6bd4\u8f83\u597d\u554aQwQ\u3002\u6211\u611f\u89c9\u6211\u8bb2\u7684\u5176\u5b9e\u8fd8\u662f\u633a\u597d\u7684\u5427\uff1f\n\n",
        "postTime": 1547287438,
        "uid": 81847,
        "name": "ThinkofBlank",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c -> [\u63a8\u9500\u535a\u5ba2](https://nikaidou-shinku.github.io/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-Luogu2617-DynamicRankings/)\n\n---\n\n# \u524d\u8a00\n\n\u5728\u9898\u89e3\u533a\u770b\u89c1\u4e86\u4e00\u4e2a\u7528\u5206\u5757\u5199\u8fd9\u4e2a\u9898\u7684\uff0c\u4f46\u662f\u5728\u6570\u636e\u52a0\u5f3a\u5230 $10^5$ \u540e\u8c8c\u4f3c\u5df2\u7ecf\u8fc7\u4e0d\u53bb\u4e86\uff08\u6216\u8bb8\u5361\u5361\u5e38\u8fd8\u6709\u6551\uff09\uff0c\u96be\u9053\u5206\u5757\u771f\u7684\u5c31\u6bd4\u4e0d\u8fc7\u8fd9\u4e9b\u6811\u5957\u6811\u6574\u4f53\u4e8c\u5206\uff1f\u4e0d\u4e0d\u4e0d\uff0c\u5206\u5757\u7684\u6f5c\u529b\u8fdc\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff01\n\n\u5206\u5757\u65e0\u5feb\u8bfb\u65e0 $\\text{O2}$ [\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/record/22245870)\n\n---\n\n# \u6b63\u6587\n\n\u4e4b\u524d\u90a3\u7bc7\u5206\u5757\u9898\u89e3\u7684\u505a\u6cd5\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5757\u5185\u4e8c\u5206\u68c0\u9a8c\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt n\\log n\\log V)$ \u7684\uff0c\u5176\u4e2d $V$ \u662f\u503c\u57df\u3002\u7136\u800c\u4e8c\u5206\u8ddf\u5206\u5757\u5c31\u5f88\u4e0d\u642d\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u4e0d\u9700\u8981\u4e8c\u5206\u4e5f\u80fd\u6c42\u7b2c $k$ \u5c0f\u7684\u65b9\u6cd5\u3002\n\n\u5148\u79bb\u6563\u5316\uff0c\u5bf9\u5e8f\u5217\u5206\u5757\uff0c\u8003\u8651\u7ef4\u62a4\u5757\u5185\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u518d\u5c06\u503c\u57df\u5206\u5757\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5757\u5185\u6bcf\u4e2a\u503c\u57df\u5757\u4e2d\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002\u7136\u540e\u505a\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd $O(1)$ \u67e5\u8be2\u4e00\u6bb5\u5757\u4e2d\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4ee5\u53ca\u6bcf\u4e2a\u503c\u57df\u5757\u4e2d\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002\u8fd9\u90e8\u5206\u7684\u9884\u5904\u7406\u662f $O(n\\sqrt n)$ \u7684\u3002\n\n\u67e5\u8be2\u65f6\u8003\u8651\u5c06\u6563\u5757\u4e2d\u6bcf\u4e2a\u6570\u53ca\u503c\u57df\u5757\u4e2d\u6570\u7684\u51fa\u73b0\u6b21\u6570\u5148\u8bb0\u5f55\u4e0b\u6765\uff0c\u8fd9\u90e8\u5206\u662f $O(\\sqrt n)$ \u7684\uff0c\u7136\u540e\u8df3\u503c\u57df\u5757\uff0c\u8d85\u8fc7 $k$ \u4e86\u5c31\u8df3\u5757\u5185\u7684\u6570\uff0c\u76f4\u5230\u627e\u5230\u6b63\u597d\u8d85\u8fc7 $k$ \u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u53ef\u4ee5 $O(\\sqrt n)$ \u67e5\u8be2\u7b2c $k$ \u5c0f\u3002\n\n\u4fee\u6539\u65f6\u53ea\u8981\u8003\u8651\u5bf9\u9884\u5904\u7406\u7684\u4fe1\u606f\u7684\u5f71\u54cd\u5373\u53ef\uff0c\u7531\u4e8e\u6211\u4eec\u9884\u5904\u7406\u7684\u662f\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6bcf\u6b21\u4fee\u6539\u81f3\u591a\u4fee\u6539 $O(\\sqrt n)$ \u4e2a\u5757\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a $O(n\\sqrt n)$ \u7684\u4f18\u79c0\u7b97\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n---\n\n# \u6700\u540e\n\n\u8fd9\u4e2a\u505a\u6cd5\u662f\u53e6\u4e00\u4e2a\u9898\u7684 $trick$ \uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u8bd5\u4e00\u4e0b\uff1a[\u671b\u6708\u60b2\u53f9\u7684\u6700\u521d\u5206\u5757](https://www.luogu.org/problem/P4119)\u3002\n\n\u6700\u540e\u7ed9\u51fa\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing std::sort;\nusing std::unique;\nusing std::lower_bound;\n\n#define N 100010\n\ninline int min(int a,int b) {\n\treturn a<b?a:b;\n}\n\nstruct node{int opt,l,r,k;}q[N];\nint n,m,a[N],b[N<<1],tot,l,r,k;\nchar opt;\n\nint L[320],R[320];\nint siz,szv,num,numsz;\nint bl[N],blv[N<<1];\nint sumc[320][N<<1];\nint sums[320][450];\n\ninline void modify(int x,int y) {\n\tfor(int i=bl[x];i<=num;++i) {\n\t\t--sumc[i][a[x]];\n\t\t--sums[i][blv[a[x]]];\n\t\t++sumc[i][y];\n\t\t++sums[i][blv[y]];\n\t}\n\ta[x]=y;\n}\n\nint tmpa[N<<1],tmpc[450];\ninline int query(int l,int r,int k) {\n    int ans;\n\tif(bl[l]==bl[r]) {\n\t\tint vl,vr,tmp(0);\n\t\tfor(int i=l;i<=r;++i)\n\t\t\t++tmpa[a[i]],++tmpc[blv[a[i]]];\n\t\tfor(int i=1;i<=numsz;++i) {\n\t\t\ttmp+=tmpc[i];\n\t\t\tif(tmp>=k) {\n\t\t\t\ttmp-=tmpc[i];\n\t\t\t\tvl=(i-1)*szv+1;\n\t\t\t\tvr=i*szv;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor(int i=vl;i<=vr;++i) {\n\t\t\ttmp+=tmpa[i];\n\t\t\tif(tmp>=k) {\n\t\t\t    ans=b[i];\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t\tfor(int i=l;i<=r;++i)\n\t\t\ttmpa[a[i]]=0,tmpc[blv[a[i]]]=0;\n\t} else {\n\t\tint vl,vr,tmp(0);\n\t\tfor(int i=l;i<=R[bl[l]];++i)\n\t\t\t++tmpa[a[i]],++tmpc[blv[a[i]]];\n\t\tfor(int i=L[bl[r]];i<=r;++i)\n\t\t\t++tmpa[a[i]],++tmpc[blv[a[i]]];\n\t\tfor(int i=1;i<=numsz;++i) {\n\t\t\ttmp+=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i];\n\t\t\tif(tmp>=k) {\n\t\t\t\ttmp-=tmpc[i]+sums[bl[r]-1][i]-sums[bl[l]][i];\n\t\t\t\tvl=(i-1)*szv+1;\n\t\t\t\tvr=i*szv;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor(int i=vl;i<=vr;++i) {\n\t\t\ttmp+=tmpa[i]+sumc[bl[r]-1][i]-sumc[bl[l]][i];\n\t\t\tif(tmp>=k) {\n\t\t\t    ans=b[i];\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t\tfor(int i=l;i<=R[bl[l]];++i)\n\t\t\ttmpa[a[i]]=0,tmpc[blv[a[i]]]=0;\n\t\tfor(int i=L[bl[r]];i<=r;++i)\n\t\t\ttmpa[a[i]]=0,tmpc[blv[a[i]]]=0;\n\t}\n\treturn ans;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i) {\n\t\tscanf(\"%d\",a+i);\n\t\tb[++tot]=a[i];\n\t}\n\tfor(int i=1;i<=m;++i) {\n\t\tscanf(\"\\n%c%d%d\",&opt,&l,&r);\n\t\tif(opt=='Q') {\n\t\t\tscanf(\"%d\",&k);\n\t\t\tq[i]=(node){1,l,r,k};\n\t\t} else {\n\t\t\tq[i]=(node){2,l,r,0};\n\t\t\tb[++tot]=r;\n\t\t}\n\t}\n\tsort(b+1,b+tot+1);\n\ttot=unique(b+1,b+tot+1)-b-1;\n\tfor(int i=1;i<=n;++i)\n\t\ta[i]=lower_bound(b+1,b+tot+1,a[i])-b;\n\t\n\tsiz=ceil(sqrt(n));\n\tszv=ceil(sqrt(tot));\n\tfor(int i=1;i<=n;++i)\n\t\tbl[i]=(i-1)/siz+1;\n\tfor(int i=1;i<=tot;++i)\n\t\tblv[i]=(i-1)/szv+1;\n\tnum=bl[n],numsz=blv[tot];\n\tfor(int i=1;i<=num;++i) {\n\t\tL[i]=R[i-1]+1;\n\t\tR[i]=min(L[i]+siz-1,n);\n\t\tfor(int j=1;j<=tot;++j)\n\t\t\tsumc[i][j]=sumc[i-1][j];\n\t\tfor(int j=1;j<=numsz;++j)\n\t\t\tsums[i][j]=sums[i-1][j];\n\t\tfor(int j=L[i];j<=R[i];++j) {\n\t\t\t++sumc[i][a[j]];\n\t\t\t++sums[i][blv[a[j]]];\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=m;++i) {\n\t\tif(q[i].opt==1)\n\t\t\tprintf(\"%d\\n\",query(q[i].l,q[i].r,q[i].k));\n\t\telse modify(q[i].l,lower_bound(b+1,b+tot+1,q[i].r)-b);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565088152,
        "uid": 126486,
        "name": "yurzhang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "**\u535a\u5ba2\u98df\u7528\u4f53\u9a8c\u66f4\u4f73~~\u611f\u89c9\u6211\u5f88\u4e0d\u8981\u8138~~\uff1a[https://yjzoier.gitee.io/hexo/p/af72.html](https://yjzoier.gitee.io/hexo/p/af72.html)**\n\n\u8fd9\u662f\u849f\u84bb\u6211\u7b2c\u4e00\u6b21\u5199\u6811\u5957\u6811\u7684\u9898\uff0c\u6253\u7b97\u5199\u4e00\u7bc7**\u5bf9\u521d\u5b66\u8005\u53cb\u597d**\u7684\u9898\u89e3\u3002\n\n\u672c\u6587\u4ecb\u7ecd**\u6811\u5957\u6811**\u505a\u6cd5\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n\u9898\u76ee\u94fe\u63a5\uff1a<https://www.luogu.org/problemnew/show/P2617>\n\n\u672c\u95ee\u9898\u5176\u5b9e\u5c31\u662f **\u52a8\u6001\u533a\u95f4\u7b2c $k$ \u5c0f\u95ee\u9898**\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u521d\u59cb\u65f6\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 $a_i$\uff0c\u9700\u8981\u7ef4\u62a4 $2$ \u79cd\u64cd\u4f5c\uff1a\n\n1. \u67e5\u8be2 $a_l \\dots a_r$ \u4e2d\u7b2c $k$ \u5927\u7684\u5143\u7d20\n2. \u5c06 $a_i$ \u7684\u503c\u4fee\u6539\u4e3a $t$\n\n## \u9898\u89e3\n\n\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a **\u9759\u6001\u533a\u95f4\u7b2cK\u5c0f** \u95ee\u9898\uff0c\u5982\u679c\u6ca1\u6709\u505a\u8fc7\uff0c\u8bf7\u51fa\u95e8\u53f3\u8f6c \u2192 <https://www.luogu.org/problemnew/show/P3834>\n\n**\u9759\u6001\u533a\u95f4\u7b2cK\u5c0f** \u6700\u5e38\u7528\u7684\u505a\u6cd5\u662f\u4e3b\u5e2d\u6811\uff0c\u5373\u7ef4\u62a4\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u524d\u7f00\u548c\u3002\u6211\u4eec\u7528 $T(i)$ \u8868\u793a\u7b2c $i$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u4e3b\u5e2d\u6811\u5176\u5b9e\u5c31\u662f $T(i) = T(i-1) + a_i$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3b\u5e2d\u6811\u5c31\u662f\u66b4\u529b\u7684\u524d\u7f00\u548c\uff0c$T(i) = \\sum_{j=1}^i a_j$\u3002\u66b4\u529b\u7684\u524d\u7f00\u548c\u5982\u679c\u8981\u5355\u70b9\u4fee\u6539\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n)$\uff0c\u53c8\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u662f $O(\\log n)$ \u7684\uff0c\u6240\u4ee5\u66b4\u529b\u7ef4\u62a4\u4e3b\u5e2d\u6811\u5355\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\log n)$\u3002\u800c\u67e5\u8be2\u64cd\u4f5c\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8981\u6c42\u51fa\u9700\u8981\u67e5\u8be2\u7684\u533a\u95f4 $[l,r]$ \u5bf9\u5e94\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684 $O(\\log n)$ \u4e2a\u7ed3\u70b9\u7684\u6743\u503c\u3002\u6734\u7d20\u7684\u505a\u6cd5\u662f\u7528\u524d\u7f00\u548c\u8f6c\u5316\u4e3a $T(r) - T(l)$\u3002\n\n\u8fd9\u6837\u867d\u7136\u4f1a\u8d85\u65f6\uff0c\u4f46\u662f\u7ed9\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u5e26\u6765\u4e86\u601d\u8def\u3002\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86**\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\u7684\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4(\u6216\u7ebf\u6bb5\u6811)\u6765\u89e3\u51b3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u68f5\u6743\u503c\u7ebf\u6bb5\u6811 $T(i) = \\sum_{j = i - lowbit(i) + 1}^i a_j$\uff1b\u8fd9\u6837\u6bcf\u6b21\u4fee\u6539 $a_i$ \u7684\u65f6\u5019\u90fd\u8981\u4fee\u6539\u5bf9\u5e94\u7684 $O(\\log n)$ \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u67e5\u8be2\u524d\u7f00\u548c\u7684\u65f6\u5019\u90fd\u8981\u6c42\u51fa $O(\\log n)$ \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u5bf9\u5e94\u8282\u70b9\u7684\u548c\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(n \\log^2 n)$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6811\u5957\u6811\u95ee\u9898\u5206\u6790\u7684\u65f6\u5019\u9700\u8981\u628a**\u6bcf\u68f5\u6811\u770b\u6210\u4e00\u4e2a\u70b9**\uff0c\u7528*\u81ea\u9876\u5411\u4e0b*\u7684\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\uff0c\u8fd9\u6837\u4f1a\u66f4\u52a0\u5bb9\u6613\u5206\u6790\u3002\n\n### \u5b9e\u73b0\n\n```c++\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 100007;\n\nint n, m, num, n1, n2;\nint a[N], b[N << 1], c[N], d[N], e[N], t1[N], t2[N];\nint Top, Root[N], val[N * 400], ls[N * 400], rs[N * 400];\n\ninline int lowbit(int x) {\n    return x & (-x);\n}\n\nvoid Add(int &rt, int l, int r, int ind, int c) {\n    if (!rt) rt = ++Top; \n    val[rt] += c;\n    if (l == r) return;\n    int m = (l + r) >> 1;\n    if (ind <= m) Add(ls[rt], l, m, ind, c);\n    else Add(rs[rt], m+1, r, ind, c);\n}\n\nvoid Change(int ind, int val) {\n    int x = lower_bound(b + 1, b + 1 + num, a[ind]) - b;\n    for (int i = ind; i <= n; i += lowbit(i))\n        Add(Root[i], 1, num, x, val);\n}\n\nint Kth(int l, int r, int k) { //\u6c42\u7b2c k \u5927\n    // printf(\"%d %d %d\\n\", l, r, k);\n    if (l == r) return l;\n    int m = (l + r) >> 1, sum = 0;\n    for (int i = 1; i <= n2; ++i)\n        sum += val[ls[t2[i]]];\n    for (int i = 1; i <= n1; ++i)\n        sum -= val[ls[t1[i]]];\n    if (sum >= k) {\n        for (int i = 1; i <= n1; ++i) //\u6240\u6709\u6811\u7684\u8282\u70b9\u4fdd\u6301\u5bf9\u5e94\n            t1[i] = ls[t1[i]];\n        for (int i = 1; i <= n2; ++i)\n            t2[i] = ls[t2[i]];\n        return Kth(l, m, k);\n    } else {\n        for (int i = 1; i <= n1; ++i)\n            t1[i] = rs[t1[i]];\n        for (int i = 1; i <= n2; ++i)\n            t2[i] = rs[t2[i]];\n        return Kth(m+1, r, k - sum);\n    }\n}\n\nint Kth_pre(int l, int r, int k) { \n    n1 = n2 = 0;\n    for (int i = l - 1; i >= 1; i -= lowbit(i)) //\u5904\u7406\u51fa\u9700\u8981\u6c42\u548c\u7684 n1 \u68f5\u6811\n        t1[++n1] = Root[i];\n    for (int i = r; i >= 1; i -= lowbit(i)) \n        t2[++n2] = Root[i];\n    return Kth(1, num, k);\n}\n\nint main(){\n    //\u8bfb\u5165\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &a[i]);\n        b[++num] = a[i];\n    }\n    for (int i = 1; i <= m; ++i) {\n        char ch = getchar();\n        while (ch != 'Q' && ch != 'C') \n            ch = getchar();\n        if (ch == 'Q') \n            scanf(\"%d%d%d\", &c[i], &d[i], &e[i]);\n        else {\n            scanf(\"%d%d\", &c[i], &d[i]);\n            b[++num] = d[i]; //\u5bf9\u4e8e\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u503c\uff08\u5305\u62ec\u63d2\u5165\u64cd\u4f5c\u4e2d\u7684\u503c\uff09\u79bb\u6563\u5316\n        }\n    }\n    //\u79bb\u6563\u5316\n    sort(b + 1, b + 1 + num);\n    num = unique(b + 1, b + 1 + num) - b - 1;\n    //\u5efa\u6811\n    for (int i = 1; i <= n; ++i)\n        Change(i, 1);\n    //\u5904\u7406\u64cd\u4f5c&\u8be2\u95ee\n    for (int i = 1; i <= m; ++i) {\n        if (e[i]) {\n            printf(\"%d\\n\", b[Kth_pre(c[i], d[i], e[i])]);\n        } else {\n            Change(c[i], -1);\n            a[c[i]] = d[i];\n            Change(c[i], 1);\n        }\n    }\n    return 0;\n}\n```\n\n## \u53c2\u8003\u8d44\u6599\n\n1. ThinkofBlank - \u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011 <https://www.luogu.org/blog/KingofNight/solution-p2617>\n\n2. \u79df\u9165\u96e8 - \u9898\u89e3 P2617 \u3010Dynamic Ranking\u3011<https://www.luogu.org/blog/zhoushuyu/solution-p2617>",
        "postTime": 1549098869,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u6b63\u9898\n\n      \u8fd9\u9053\u9898\u6211\u7406\u89e3\u4e86\u534a\u5929\uff0c\u7f51\u4e0a\u597d\u7684\u9898\u89e3\u6211\u6ca1\u6709\u770b\u61c2\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u5c3d\u91cf\u5199\u5f97\u8be6\u7ec6\u7b80\u7565\u4e00\u4e9b\u3002\n\n      \u52a8\u6001\u7b2ck\u5927\u8981\u4e86\u89e3\u7684\u662f\u4e24\u4e2a\u4e1c\u897f\u3002\n\n      \u4e00\u4e2a\u662f\u6811\u72b6\u6570\u7ec4\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u662f\u4e3b\u5e2d\u6811\uff08\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff09\u3002\n\n     \u5148\u8bb2\u6811\u72b6\u6570\u7ec4;\n\n     1.\u5b9a\u4e49\u4e00\u4e2a\u70b9i\u7ef4\u62a4\u7684\u4fe1\u606f\u662f[i-lowbit(i)+1,i].lowbit()\u8fd9\u4e2a\u51fd\u6570\u7684\u610f\u4e49\u662fi\u5728\u4e8c\u8fdb\u5236\u4e0b\u672b\u5c3e\u96f6\u548c\u5012\u6570\u7b2c\u4e00\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u3002\u50cflowbit(7) = lowbit( (111)2 ) = (1)2 = 1 \u30022\u6307\u7684\u662f\u4e8c\u8fdb\u5236\u4e0b\u3002\n\n     2.\u90a3\u4e48\u5982\u4f55\u626f\u5230\u8fd9\u4e2a\u9898\u4e0a\u9762\u53bb\u5462\uff1f\n\n     \u518d\u8bb2\u4e3b\u5e2d\u6811\u3002\n\n     1.\u5728\u6c42\u9759\u6001\u7b2ck\u5927\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u7528\u524d\u7f00\u548c\u4e3b\u5e2d\u6811\u6765\u5904\u7406\u533a\u95f4\u95ee\u9898\uff0c\u7136\u540e\u5229\u7528\u201c\u6bcf\u6b21\u53ea\u52a0\u4e00\u6761\u94fe\u201d\u7684\u6027\u8d28\u8282\u7701\u7a7a\u95f4\u3002\n\n     2.\u4f46\u662f\u5728\u6b64\u9898\u4e2d\uff0c\u5982\u679c\u8fd8\u662f\u7528\u6839\u6765\u8868\u793a\u4f4d\u7f6e\uff0c\u7528\u5e95\u5c42\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u503c\u6765\u8868\u793a\u6743\u503c\u7684\u8bdd\uff0c\u90a3\u4e48\u4fee\u6539\u5fc5\u5c06\u5f88\u9ebb\u70e6\u3002\n\n     3.\u56e0\u4e3a\u5728\u8fd9\u65f6\uff0c\u66f4\u6539\u5f53\u524d\u70b9x\u7684\u503c\u662f\u4f1a\u5f71\u54cd\u5230x~n\u7684\u4e3b\u5e2d\u6811\u7684\u6784\u6210\u3002\n\n      \u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u91cc\u63d0\u51fa\u2014\u2014\u7528\u6811\u72b6\u6570\u7ec4\u5957\u4e00\u5957\n\n      \u6211\u4eec\u73b0\u5728\u5efa\u51fa\u6765\u7684\u4e3b\u5e2d\u6811\uff0c\u7b2ci\u4e2a\u6839\u7ef4\u62a4\u7684\u662f[i-lowbit(i)+1,i]\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u50cf\u4ee5\u524d\u7684\u524d\u7f00\u6811\u4e00\u6837\u3002\u4f46\u662f\u5f88\u591a\u4eba\u60f3\u95ee\uff0c\u524d\u7f00\u6811\u6709\u81ea\u5df1\u4f18\u5316\u7a7a\u95f4\u7684\u65b9\u6cd5\uff0c\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u6709\u81ea\u5df1\u7684\u4f18\u5316\u65b9\u6cd5\u5417\uff1f\n\n      \u6ca1\u6709\n\n      \u6240\u4ee5\u6211\u4eec\u8981\u66b4\u529b\u5f00\u7a7a\u95f4\n\n```cpp\nvoid update(int &now,int l,int r){//\u8fd9\u91cc\u7684now\u662f\u5f15\u7528\uff0c\u8868\u793a\u4e0a\u4e00\u5c42\u7684\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50  \n    if(now==0) now=++tot;//\u6211\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u513f\u5b50\uff0c\u65b0\u5efa\u51fa\u6765  \n    c[now]+=d;//\u52a0\u4e0a\u4e00\u4e2ad\uff0cd\u5728\u589e\u52a0\u7684\u65f6\u5019\u4e3a1\uff0c\u51cf\u7684\u65f6\u5019\u4e3a0  \n    if(l==r) return ;  \n    if(v<=(l+r)/2) update(ls[now],l,(l+r)/2);//\u5728\u5de6\u8fb9\uff0c\u5f80\u5de6\u8fb9\u627e  \n    else update(rs[now],(l+r)/2+1,r);//\u5728\u53f3\u8fb9\uff0c\u5f80\u53f3\u8fb9\u627e  \n}  \n```\n      \u4ee3\u7801\u7406\u89e3\u597d\u4e86\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\u4e8b\u3002\n\n      \u6700\u540e\u8981\u770b\u7684\u8fd8\u662f\u5168\u90e8\u3002\n```cpp\n#include<cstdio>  \n#include<cstdlib>  \n#include<cstring>  \n#include<iostream>  \nusing namespace std;  \n  \nint a[10010];  \nint n,m;  \nint root[10010],ls[2600010],rs[2600010],c[2600010];  \nint tot=0;  \nint xx[30],yy[30];  \nint v,d;  \n  \nint lowbit(int x){  \n    return x&-x;  \n}  \n  \nvoid update(int &now,int l,int r){  \n    if(now==0) now=++tot;  \n    c[now]+=d;  \n    if(l==r) return ;  \n    if(v<=(l+r)/2) update(ls[now],l,(l+r)/2);  \n    else update(rs[now],(l+r)/2+1,r);  \n}  \n  \nvoid change(){  \n    int x,b;  \n    scanf(\"%d %d\",&x,&b);  \n    d=-1;v=a[x];  \n    for(int i=x;i<=n;i+=lowbit(i))//\u628a\u539f\u6765\u7684\u5220\u6389  \n        update(root[i],0,1e9);  \n    d=1;v=b;  \n    for(int i=x;i<=n;i+=lowbit(i))//\u628a\u65b0\u7684\u52a0\u4e0a  \n        update(root[i],0,1e9);  \n    a[x]=b;  \n}  \n  \nint query(){  \n    int x,y,k;  \n    scanf(\"%d %d %d\",&x,&y,&k);  \n    x--;  \n    swap(x,y);  \n    int t1=0,t2=0;  \n    for(int i=x;i>=1;i-=lowbit(i)) xx[++t1]=root[i];//\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u662flog\u4e2a\u6839\u4e00\u8d77\u8dd1  \n    for(int i=y;i>=1;i-=lowbit(i)) yy[++t2]=root[i];  \n    int l=0,r=1e9;//\u4e8c\u5206\u6a21\u62df\u8fb9\u754c\u53d8\u5316  \n    while(l<r){  \n        int temp=0;//\u7b97\u51fa\u5de6\u513f\u5b50  \n        for(int i=1;i<=t1;i++) temp+=c[ls[xx[i]]];  \n        for(int i=1;i<=t2;i++) temp-=c[ls[yy[i]]];  \n        if(k<=temp){//\u5728\u5de6\u513f\u5b50\uff0c\u5f80\u5de6\u8d70\uff0c\u5168\u90e8\u5f80\u5de6\u8fb9\u8df3  \n            for(int i=1;i<=t1;i++) xx[i]=ls[xx[i]];  \n            for(int i=1;i<=t2;i++) yy[i]=ls[yy[i]];  \n            r=(l+r)/2;  \n        }  \n        else {//\u5728\u53f3\u8fb9\uff0c\u5168\u90e8\u5f80\u53f3\u8fb9\u8df3  \n            for(int i=1;i<=t1;i++) xx[i]=rs[xx[i]];  \n            for(int i=1;i<=t2;i++) yy[i]=rs[yy[i]];  \n            k-=temp;l=(l+r)/2+1;//\u8bb0\u4f4f\u5728\u53f3\u8fb9\u627e\u7684\u662f\u7b2ck-temp\u4e2a  \n        }  \n    }  \n    return l;  \n}  \n  \nint main(){  \n    scanf(\"%d %d\",&n,&m);  \n    for(int i=1;i<=n;i++){  \n        scanf(\"%d\",&v);  \n        a[i]=v;d=1;  \n        for(int j=i;j<=n;j+=lowbit(j))//\u5bf9\u4e8e\u6bcf\u4e2a\u503c\uff0c\u52a0\u5165\u65f6\u8981\u50cf\u6811\u72b6\u6570\u7ec4\u4e00\u6837\u8df3  \n            update(root[j],0,1e9);  \n    }  \n    char t[2];  \n    while(m--){  \n        scanf(\"%s\",t);  \n        if(t[0]=='Q') printf(\"%d\\n\",query());  \n        else change();  \n    }  \n}  \n```",
        "postTime": 1526984765,
        "uid": 29093,
        "name": "Deep_Kevin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u53ef\u80fd\u7f51\u4e0a\u90fd\u662fdalao\u5427\uff0c\u7ffb\u904d\u4e86CSDN\u548c\u535a\u5ba2\u56ed\u7adf\u7136\u6ca1\u6709\u4e00\u7bc7\u8be6\u7ec6\u7684\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff0c\u5168\u90e8\u662f4\u30015\u884c\u7b80\u7b80\u5355\u5355\u7684\u8bf4\u660e\u5c31\u6577\u884d\u8fc7\u53bb\u4e86\uff0c\u4e4b\u540e\u5c31\u662f\u4e00\u5806\u4e00\u5806\u7684\u4ee3\u7801\uff0c\u5bb3\u7684\u849f\u84bb\u6211\u770b\u4e86\u51e0\u5929QAQ...\n\n\u7ec8\u4e8e\u5728\u51e0\u4f4d\u5927\u725b\u7684\u6307\u5bfc\u4e0b\u548c\u81ea\u5df1\u7684\u63a2\u7d22\u4e2d\u6210\u529fA\u6389\u4e86\u672c\u9898\uff0c\u5e76\u4e14\u6709\u4e0d\u5f00O2 140ms\uff0c\u5f00O2 72ms\u7684\u4f18\u826f\u5e38\u6570\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u6765\u8c08\u8c08\u4e3b\u5e2d\u6811\u5427\u3002\u4e3b\u5e2d\u6811\u7684\u57fa\u672c\u6784\u6210\u662f\u4e00\u68f5\u68f5\u7ebf\u6bb5\u6811\uff0c\u4fdd\u5b58\u524d\u7f00\u4e2d\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u56e0\u4e3a\u4fdd\u5b58\u7684\u4e3a\u524d\u7f00\uff0c\u6240\u4ee5\u548c\u6bcf\u68f5\u5355\u72ec\u7684\u7ebf\u6bb5\u6811\u548c\u4e0a\u4e00\u68f5\u7ebf\u6bb5\u6811\u6709\u76f8\u4f3c\u7684\u7ed3\u6784\u548c\u4ec5\u4ec5\u4e00\u6761\u94fe\u7684\u5dee\u522b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u5efa\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u65f6\u5019\u5c06\u6ca1\u6709\u66f4\u6539\u8fc7\u7684\u8282\u70b9\u76f4\u63a5\u7528\u4e0a\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u4ee3\u66ff\uff0c\u5982\u6b64\u4e0b\u6765\u6bcf\u4e00\u68f5\u7ebf\u6bb5\u6811\u53ea\u4f1a\u591a\u5f00logn\u6761\u94fe\uff0c\u4e0d\u4f1aMLE\u3002\n\n\u65e2\u7136\u8bf4\u4e86\u4fdd\u5b58\u7684\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u603b\u4e0d\u53ef\u80fd\u4fdd\u5b581e9\u4e2a\u5427\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u64cd\u4f5c\u79bb\u7ebf\u5316\u5904\u7406\u4e00\u4e0b\uff0c\u5c06\u6240\u6709\u6d89\u53ca\u5230\u7684\u6570\u5b57\u5148\u8fdb\u884c\u53bb\u91cd\u4e0e\u6392\u5e8f\uff0c\u518d\u7528\u5e8f\u5217\u53f7\u6765\u4ee3\u8868\u5b83\uff0c\u8d77\u5230\u6620\u5c04\u7684\u4f5c\u7528\u3002\u6ce8\u610f\uff0c\u4fee\u6539\u64cd\u4f5c\u4e2d\u51fa\u60f3\u8fc7\u7684\u4fee\u6539\u503c\u4e5f\u8981\u5305\u542b\u5728\u5185\uff0c\u56e0\u4e3a\u4e3b\u5e2d\u6811\u4e0d\u53ef\u80fd\u4e34\u65f6\u5728\u67d0\u4e00\u68f5\u4e66\u4e0a\u591a\u5f00\u4e00\u4e2a\u70b9\u3002\n\n\u5982\u6b64\u5efa\u7acb\u4ee5\u540e\uff0c\u4e3b\u5e2d\u6811\u5c31\u6709\u4e86\u4e00\u4e2a\u4f18\u826f\u7684\u6027\u8d28\uff1a\u6811\u4e0e\u6811\u95f4\u53ef\u4ee5\u76f4\u63a5\u76f8\u51cf\uff0c\u90a3\u4e48\u533a\u95f4\u7b2ck\u5927\u95ee\u9898\u5c31\u53ef\u4ee5\u901a\u8fc7\u53f3\u7aef\u70b9\u51cf\u53bb\u5de6\u7aef\u70b9\u7684\u524d\u4e00\u4e2a\u6839\u8282\u70b9\u4e0b\u7684\u6811\u6765\u4ee3\u8868\u533a\u95f4\u5185\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u540c\u65f6\u7531\u4e8e\u6620\u5c04\u503c\u5df2\u6392\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6765\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u52a8\u6001\u533a\u95f4\u7b2ck\u5927\u3002\u5728\u539f\u6765\u7684\u4e3b\u5e2d\u6811\u4e0a\u76f4\u63a5\u4fee\u6539\u672a\u5c1d\u4e0d\u53ef\uff0c\u4f46\u7ecf\u5b9e\u6d4b\u5e38\u6570\u3001\u5185\u5b58\u7686\u5341\u5206\u7206\u70b8\uff0c\u800c\u4e14\u6211\u4eec\u53c8\u6709\u4e0b\u4e00\u4e2a\u76ee\u6807\uff1a\u53ef\u6301\u4e45\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u8fd0\u7528\u6811\u72b6\u6570\u7ec4\u7684\u601d\u60f3\uff0c\u5c06\u539f\u6570\u636e\u4fdd\u5b58\u5728\u9759\u6001\u4e3b\u5e2d\u6811\u4e2d\uff0c\u800c\u4fee\u6539\u5728\u53e6\u4e00\u68f5\u4e3b\u5e2d\u6811\u4e2d\u4fee\u6539\uff0c\u5e76\u50cf\u6811\u72b6\u6570\u7ec4\u4e00\u6837\u6bcf\u6b21\u5c06\u6240\u6709\u7ba1\u5236\u5f53\u524d\u8282\u70b9\u7684\u70b9\u90fd\u4fee\u6539\u4e00\u4e0b\u3002\u67e5\u8be2\u65f6\u56e0\u4e3a\u9759\u6001\u4e3b\u5e2d\u6811\u5df2\u4fdd\u5b58\u4e86\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u518d\u6c42\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\u4e2d\u66f4\u6539\u7684\u524d\u7f00\u548c\uff0c\u518d\u5c06\u4e24\u4e2a\u503c\u76f8\u52a0\u5373\u4e3a\u6240\u6c42\u533a\u95f4\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u5b9e\u73b0\uff0c\u7279\u5730\u5c01\u4e86\u4e24\u4e2anamespace\u65b9\u4fbf\u9605\u8bfb\u3002\n\n  \n  \n\n        \n    \n```cpp\n    #include<cstdio>\n    #include<cctype>\n    #include<iomanip>\n    #include<algorithm>\n    #include<cmath>\n    #include<cstdlib>\n    #include<cstring>\n    #define lowbit(a) a&(-a)//\u76f4\u63a5\u5b9a\u4e49\u5230\u8fd9\u91cc\u8c8c\u4f3c\u4f1a\u66f4\u5feb \n    #define W while\n    #define R register\n    #define IN inline \n    #define gc getchar()\n    #define MAX 20005\n    IN void in(int &x)//\u5feb\u8bfb \n    {\n        x=0;R char c=gc;\n        W(!isdigit(c))c=gc;\n        W(isdigit(c)){x*=10;x+=c-48;c=gc;}\n    }\n    namespace President_Tree//\u4e3b\u5e2d\u6811\u90e8\u5206 \n    {\n        int cnt,siz,dot,idx;\n        //\u5206\u522b\u4ee3\u8868\u5185\u5b58\u5206\u914d\u7684\u4e0b\u6807\uff0c\u4e0d\u540c\u6570\u503c\u70b9\u7684\u4e2a\u6570\uff0c\u603b\u5171\u7684\u70b9\u6570\uff0c\u4fee\u6539\u64cd\u4f5c\u7684\u4e0b\u6807 \n        struct order//\u56e0\u4e3a\u4e3b\u5e2d\u6811\u5fc5\u987b\u79bb\u7ebf\uff0c\u6240\u4ee5\u5c06\u6307\u4ee4\u5b58\u4e0b\u6765 \n        {\n            bool typ;//\u662f\u67e5\u8be2\u8fd8\u662f\u4fee\u6539 \n            int from,to,k;\n        }command[MAX];\n        struct node\n        {int son[2],sum;}tree[MAX*250];\n        //\u5185\u5b58\u4e00\u5b9a\u8981\u5f00\u7684\u8db3\u591f\u5927\uff0c\u56e0\u4e3a\u5728\u8fd9\u91cc\u9759\u6001\u4e3b\u5e2d\u6811\u548c\u6811\u72b6\u6570\u7ec4\u5171\u7528\u8fd9\u4e2a\u6570\u7ec4\u5185\u7684\u70b9 \n        int root[MAX],cpy[MAX],data[MAX];\n        //\u5206\u522b\u4fdd\u5b58\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u6839\u8282\u70b9\uff0c\u79bb\u6563\u5316\u540e\u7684\u6570\u636e\uff0c\u539f\u59cb\u6570\u636e \n        int build(int lef,int rig)//\u5efa\u7acb\u7a7a\u6811\uff0c\u548c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a \n        {\n            int now=cnt++;\n            tree[cnt].sum=0;\n            if(lef!=rig)\n            {\n                int mid=(lef+rig)>>1;\n                tree[now].son[0]=build(lef,mid);\n                tree[now].son[1]=build(mid+1,rig);\n            }\n            return now;\n        }\n        int updata(int last,int pos,int val)//\u66f4\u65b0\u865a\u62df\u8282\u70b9\u6216\u8005\u63d2\u5165\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u51fd\u6570\n        //\u4e3a\u4e86\u65b9\u4fbf\u5220\u9664\uff0c\u4f20\u5165val\u4ee3\u8868\u4fee\u6539\u7684\u91cf \n        {\n            int now=cnt++,tmp=now,mid;\n            int lef=0,rig=siz-1;//\u56e0\u4e3a\u662f\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u4fdd\u5b58\u7684\u662f\u79bb\u6563\u5316\u540e\u7684\u5bf9\u5e94\u7684\u6570\u7684\u7f16\u53f7 \n            tree[now].sum=tree[last].sum+val;\n            W(lef<rig)//\u975e\u9012\u5f52\u964d\u4f4e\u5e38\u6570 \n            {\n                mid=(lef+rig)>>1;\n                if(pos<=mid)//\u5f85\u63d2\u5165\u8282\u70b9\u5728\u5de6\u5b50\u6811 \n                {\n                    tree[now].son[1]=tree[last].son[1];//\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u6811\u8282\u70b9\u548c\u4e4b\u524d\u7684\u90a3\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u5171\u7528\u8282\u70b9 \n                    tree[now].son[0]=cnt++;//\u5411\u5de6\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9 \n                    now=tree[now].son[0];\n                    last=tree[last].son[0];\n                    rig=mid;\n                }\n                else//\u540c\u4e0a \n                {\n                    tree[now].son[0]=tree[last].son[0];\n                    tree[now].son[1]=cnt++;\n                    now=tree[now].son[1];\n                    last=tree[last].son[1];\n                    lef=mid+1;\n                }\n                tree[now].sum=tree[last].sum+val;\n            }\n            return tmp;\n        }\n        IN int ID(int now)//\u8fd4\u56de\u67d0\u4e2a\u6570\u5728\u79bb\u6563\u5316\u540e\u7684\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e \n        {\n            return std::lower_bound(cpy,cpy+siz,now)-cpy;\n        }\n    }\n    namespace Bit_Tree//\u6811\u72b6\u6570\u7ec4\u76f8\u5173 \n    {\n        using namespace President_Tree;\n        int vir[MAX],use[MAX];\n        //\u5206\u522b\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u8282\u70b9\uff0c\u8ba1\u7b97\u524d\u7f00\u548c\u65f6\u5411\u524d\u8d70\u7684\u8282\u70b9 \n        IN void add(int now,int pos,int val)\n        //\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u65b9\u4fbf\u7684\u67e5\u524d\u7f00\u548c\u7684\u529f\u80fd\uff0c\u6211\u4eec\u628a\u6539\u53d8\u91cf\u6bcf\u6b21\u4fee\u6539\u5728\u5bf9\u5e94\u7684\u8282\u70b9\u4e2d \n        {\n            W(now<=dot)\n            {\n                vir[now]=updata(vir[now],pos,val);\n                now+=lowbit(now);\n            }\n        }\n        IN int getsum(int now)//\u67e5\u8be2\u5f53\u524d\u70b9\u66f4\u6539\u503c\u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f \n        {\n            int ret=0;\n            W(now>0)\n            {\n                ret+=tree[tree[use[now]].son[0]].sum;\n                now-=lowbit(now);\n            }\n            return ret;\n        }\n        IN int query(int left,int right,int kth)\n        {\n            int left_root=root[left-1];//\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u4e24\u4e2a\u76f8\u51cf\u7684\u6839\u8282\u70b9 \n            int right_root=root[right];\n            int lef=0,rig=siz-1;//\u67e5\u8be2\u65f6\u5de6\u53f3\u8303\u56f4 \n            for(R int i=left-1;i;i-=lowbit(i))use[i]=vir[i];//\u521d\u59cb\u5316\u66f4\u6539\u503c\u7684\u67e5\u8be2\u8def\u5f84 \n            for(R int i=right;i;i-=lowbit(i))use[i]=vir[i];\n            W(lef<rig)\n            {\n                int mid=(lef+rig)>>1;\n                int now_sum=getsum(right)-getsum(left-1)+tree[tree[right_root].son[0]].sum-tree[tree[left_root].son[0]].sum;//\u67e5\u8be2\u5f53\u524d\u70b9\u7684\u5de6\u513f\u5b50\u662f\u5426\u6ee1\u8db3\u8fbe\u5230\u4e86k\u4e2a\n                //\u5728\u9759\u6001\u4e3b\u5e2d\u6811\u548c\u6811\u72b6\u6570\u7ec4\u4e0a\u4e00\u8d77\u7b97 \n                if(now_sum>=kth)//\u8fbe\u5230\u4e86 \n                {\n                    rig=mid;\n                    for(R int i=left-1;i;i-=lowbit(i))use[i]=tree[use[i]].son[0];//\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u67e5\u8be2\u8303\u56f4\u7f29\u5c0f\u81f3\u5de6\u5b50\u6811\u5185 \n                    for(R int i=right;i;i-=lowbit(i))use[i]=tree[use[i]].son[0];\n                    left_root=tree[left_root].son[0];//\u540c\u65f6\u9759\u6001\u4e3b\u5e2d\u6811\u4e5f\u8981\u5982\u6b64 \n                    right_root=tree[right_root].son[0];\n                }\n                else//\u6ca1\u8fbe\u5230\u5c31\u5728\u53f3\u5b50\u6811\u5185\u8303\u56f4\u7ee7\u7eed\u67e5\u627e \n                {\n                    lef=mid+1;\n                    kth-=now_sum;//\u56e0\u4e3a\u6709\u4e86\u5de6\u5b50\u6811\u7684\u4e00\u90e8\u5206\u70b9\uff0c\u6240\u4ee5\u8981\u51cf\u53bb \n                    for(R int i=left-1;i;i-=lowbit(i))use[i]=tree[use[i]].son[1];\n                    for(R int i=right;i;i-=lowbit(i))use[i]=tree[use[i]].son[1];\n                    left_root=tree[left_root].son[1];\n                    right_root=tree[right_root].son[1];\n                }\n            }\n            return lef;//\u8fd4\u56de\u662f\u7b2c\u51e0\u4e2a\u79bb\u6563\u51fa\u6765\u7684\u6570\u636e \n        }\n    }\n    using namespace President_Tree;\n    using namespace Bit_Tree;\n    using std::sort;\n    using std::unique;\n    using std::printf;\n    using std::scanf;\n    int main()\n    {\n        int num;\n        in(dot),in(num);\n        idx=dot;\n        for(R int i=1;i<=dot;++i)\n        {\n            in(data[i]);cpy[i-1]=data[i];//cpy\u4ece0\u5f00\u59cb\u5b58\u65b9\u4fbfunique\u548csort \n        }\n        char c[10];\n        for(R int i=1;i<=num;++i)//\u5c06\u6307\u4ee4\u79bb\u7ebf\u4e0b\u6765 \n        {\n            scanf(\"%s\",c);\n            if(c[0]=='Q')\n            {\n                command[i].typ=false;\n                in(command[i].from);in(command[i].to);in(command[i].k);\n            }\n            else\n            {\n                command[i].typ=true;\n                in(command[i].from);in(command[i].k);\n                cpy[idx++]=command[i].k;//\u5982\u679c\u662f\u4fee\u6539\u7684\u8bdd\u5b58\u5165cpy\u4e2d \n            }\n        }\n        sort(cpy,cpy+idx);\n        siz=unique(cpy,cpy+idx)-cpy;\n        root[0]=build(0,siz-1);//\u5efa\u7acb\u7a7a\u9759\u6001\u4e3b\u5e2d\u6811 \n        for(R int i=1;i<=dot;++i)\n        root[i]=updata(root[i-1],ID(data[i]),1);//\u5efa\u7acb\u6ee1\u7684\u9759\u6001\u4e3b\u5e2d\u6811 \n        for(R int i=1;i<=dot;++i)\n        vir[i]=root[0];//\u521d\u59cb\u5316\u6811\u72b6\u6570\u7ec4 \n        for(R int i=1;i<=num;++i)//\u5904\u7406\u6307\u4ee4 \n        {\n            if(!command[i].typ)\n            {\n                printf(\"%d\\n\",cpy[query(command[i].from,command[i].to,command[i].k)]);\n            }\n            else\n            {\n                add(command[i].from,ID(data[command[i].from]),-1);\n                add(command[i].from,ID(command[i].k),1);\n                data[command[i].from]=command[i].k;//\u8981\u5c06\u539f\u6570\u636e\u4fee\u6539\u81f3\u65b0\u6570\u636e\uff0c\u5426\u5219\u7ffb\u8f66 \n            }\n        }\n        return 0;\n}\n```",
        "postTime": 1516035139,
        "uid": 67492,
        "name": "LPA20020220",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Ranking\u3011"
    },
    {
        "content": "**\u770b\u4e0b\u9762\u90fd\u662f\u6811\u72b6\u6570\u7ec4+\u4e3b\u5e2d\u6811\uff0c\u6211\u6765\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4+01Trie**\n\n## \u4e3a\u4ec0\u4e48\u752801Trie\uff08\u53ef\u4ee5\u4e0d\u770b\uff09\n\n\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u7528\u4e00\u4e2a\u533a\u95f4\u6811\u5957\u4e00\u4e2a\u503c\u57df\u6811\u6765\u505a\u5230$\\Theta(\\log ^ 2(n))$\u64cd\u4f5c\u3002\u800c\u8fd9\u4e2a\u503c\u57df\u6811\u53ea\u9700\u8981\u6ee1\u8db3**\u53ef\u51cf\u6027**\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7528\u4e24\u4e2a\u524d\u7f00\u503c\u57df\u6811\u76f8\u540c\u5730\u4f4d\u7684\u8282\u70b9\u7684`size`\u76f8\u51cf\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u7684\u201c\u503c\u57df\u6811\u201d\u7684\u8be5\u8282\u70b9`size` \n\n\u6240\u4ee5\uff0c\u7531\u4e8e\u5e73\u8861\u6811\u6bcf\u6b21\u64cd\u4f5c\u5f62\u6001\u6539\u53d8\u8f83\u5927\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\uff0c\u53ea\u80fd\u7528\u503c\u57df\u7ebf\u6bb5\u6811\u548c01Trie\u6765\u4ee3\u66ff\u300201Trie\u7684\u7f16\u7801\u96be\u5ea6\u66f4\u52a0\u7b80\u5355\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b9e\u73b0\u6700\u5927\u5f02\u6216\u548c\u7b49\u5176\u4ed6\u64cd\u4f5c\uff0c\u6240\u4ee5\u672c\u4eba\u66f4\u52a0\u63a8\u8350\n\n## \u5b9e\u73b0\u65b9\u6cd5\n\n\u65e2\u7136\u662f\u52a8\u6001\u64cd\u4f5c\uff0c\u90a3\u4e48\u4fee\u6539\u65f6\u6211\u4eec\u5c06\u6811\u72b6\u6570\u7ec4\u4e0a\u5bf9\u5e94\u7684$\\log$\u4e2a\u6811\u5168\u90e8\u5220\u9664\u539f\u6570\u5e76\u52a0\u5165\u65b0\u6570\uff0c\u67e5\u8be2\u65f6\u7528$R$\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u5bf9\u5e94\u7684$\\log$\u4e2a\u6811\u7684\u8282\u70b9\u7684`size`\u548c\u51cf\u53bb$L - 1$\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u5bf9\u5e94\u7684$\\log$\u4e2a\u6811\u7684\u8282\u70b9\u7684`size`\u548c\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u548c\u8981\u6c42\u7684$kth$\u6bd4\u8f83\uff0c\u5168\u90e8\u8fdb\u5165\u5de6/\u53f3\u5b50\u6811\u5373\u53ef\n\n## \u7a0b\u5e8f\u5b9e\u73b0\n\n\u9700\u8981\u5438\u6c27\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\nconst int MAXN = 2e5 + 5;\n\nstruct Node{\n\tint siz;\n\tNode *ch[2];\n\t\n\tNode() {}\n}npool[50000000];\n\nint n, m;\nint a[MAXN];\nint ncnt;\nNode *rt[MAXN];\nNode *cur1[MAXN], *cur2[MAXN];\nint tot1, tot2;\n\nint LB(int x) {return x & -x;}\n\nvoid Insert(Node *&now, int bit, int k) {\n\tif (!now) now = &npool[ncnt++];\n\tnow->siz++;\n\tif (bit == 0) return;\n\tint f = (k & (1 << (bit - 1))) ? 1 : 0;\n\tInsert(now->ch[f], bit - 1, k);\n}\n\nvoid Remove(Node *now, int bit, int k) {\n\tif (!now) return;\n\tnow->siz--;\n\tif (bit == 0) return;\n\tint f = (k & (1 << (bit - 1))) ? 1 : 0;\n\tRemove(now->ch[f], bit - 1, k);\n}\n\nint Query(int k, int bit, int res) {\n\tif (bit == 0) return res;\n\tint ls = 0;\n\tfor (int i = 1; i <= tot1; i++) ls -= ((cur1[i] && cur1[i]->ch[0]) ? cur1[i]->ch[0]->siz : 0);\n\tfor (int i = 1; i <= tot2; i++) ls += ((cur2[i] && cur2[i]->ch[0]) ? cur2[i]->ch[0]->siz : 0);\n\tif (k <= ls) {\n\t\tfor (int i = 1; i <= tot1; i++) {\n\t\t\tif (cur1[i]) cur1[i] = cur1[i]->ch[0];\n\t\t}\n\t\tfor (int i = 1; i <= tot2; i++) {\n\t\t\tif (cur2[i]) cur2[i] = cur2[i]->ch[0];\n\t\t}\n\t\treturn Query(k, bit - 1, res);\n\t} else {\n\t\tfor (int i = 1; i <= tot1; i++) {\n\t\t\tif (cur1[i]) cur1[i] = cur1[i]->ch[1];\n\t\t}\n\t\tfor (int i = 1; i <= tot2; i++) {\n\t\t\tif (cur2[i]) cur2[i] = cur2[i]->ch[1];\n\t\t}\n\t\tres |= (1 << (bit - 1));\n\t\tk -= ls;\n\t\treturn Query(k, bit - 1, res);\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(NULL);\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t\tfor (int j = i; j <= n; j += LB(j)) Insert(rt[j], 30, a[i]);\n\t}\n\tchar op[2];\n\tint x, y, z, res;\n\tfor (int i = 1; i <= m; i++) {\n\t\tcin >> op;\n\t\tif (op[0] == 'Q') {\n\t\t\tcin >> x >> y >> z;\n\t\t\ttot1 = 0;\n\t\t\tfor (int j = x - 1; j >= 1; j -= LB(j)) cur1[++tot1] = rt[j];\n\t\t\ttot2 = 0;\n\t\t\tfor (int j = y; j >= 1; j -= LB(j)) cur2[++tot2] = rt[j];\n\t\t\tres = Query(z, 30, 0);\n\t\t\tcout << res << \"\\n\";\n\t\t} else {\n\t\t\tcin >> x >> y;\n\t\t\tfor (int j = x; j <= n; j += LB(j)) Remove(rt[j], 30, a[x]);\n\t\t\ta[x] = y;\n\t\t\tfor (int j = x; j <= n; j += LB(j)) Insert(rt[j], 30, a[x]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572499555,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "### \u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\uff08\u4e3b\u5e2d\u6811\u5957\u6811\u72b6\u6570\u7ec4\uff09\n\u8fd9\u9898\u8fd8\u662f\u6709\u70b9\u70e6\u4eba\u7684\uff0c\u4e3b\u8981\u662f\u79bb\u6563\u5316\u540e\u601d\u8def\u4f1a\u6bd4\u8f83\u4e71\uff0c\u5176\u4ed6\u90fd\u8fd8\u597d\u3002\n\n#### \u770b\u8fd9\u7bc7\u9898\u89e3\u4e4b\u524d\uff0c\u8bf7\u5148\u5237\u901a\uff1a\n\n##### [1\u3001\u6811\u72b6\u6570\u7ec4](https://www.luogu.org/problemnew/show/P3374)\n\n##### [2\u3001\u666e\u901a\u7ebf\u6bb5\u6811](https://www.luogu.org/problemnew/show/P3372)\n\n##### [3\u3001\u79bb\u6563\u5316&\u9759\u6001\u4e3b\u5e2d\u6811](https://www.luogu.org/problemnew/show/P3834)\n\n\u6ce8\u610f\uff0c\u79bb\u6563\u5316\u867d\u7136\u770b\u8d77\u6765\u4e0d\u96be\uff0c\u4f46\u662f\u66f4\u52a0\u9700\u8981\u6df1\u523b\u7406\u89e3\uff0c\u7f16\u7a0b\u65f6\u8981\u975e\u5e38\u6e05\u6670\u5730\u77e5\u9053\u6bcf\u4e00\u4e2a\u53d8\u91cf\u4ee3\u8868\u7684\u662f\u6570\u503c\u8fd8\u662f\u6392\u540d\uff0c\u4e0d\u7136\u5c31~~\u4f1a\u50cf\u6211\u4e00\u6837\u8c03\u4e00\u6574\u4e2a\u665a\u4e0a~~\u53ef\u80fd\u51fa\u9519\u3002\n\n#### \u89e3\u9898\u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u9759\u6001\u7684\u4e3b\u5e2d\u6811\u4e4b\u6240\u4ee5\u53ef\u4ee5\u67e5\u8be2\u533a\u95f4\u7b2cK\u5927\uff0c\u5c31\u662f\u56e0\u4e3a\u4e3b\u5e2d\u6811\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u5386\u53f2\u7248\u672c\uff08\u76f8\u5f53\u4e8e\u524d\u7f00\u548c\uff09\uff0c\u5229\u7528\u5dee\u5206\u7684\u601d\u60f3\u53d6\u51fal\uff5er\u7684\u533a\u95f4\uff0c\u4ece\u800c\u5229\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u7279\u6027\u67e5\u8be2\u7b2cK\u5927\u3002\n\n\u800c\u8fd9\u4e2a\u65b9\u6cd5\u8fd0\u7528\u5230\u5e26\u4fee\u6539\u7684\u9898\u76ee\u4e2d\u5c31\u5341\u5206\u5c34\u5c2c\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u524d\u7f00\u548c\u7684\u4fee\u6539\u662f\u9700\u8981O(n)\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u4e3b\u5e2d\u6811\u5c31\u53d8\u6210\u4e86\u5e38\u6570\u7801\u91cf\u90fd\u5f88\u5927\u7684\u66b4\u529b\u7b97\u6cd5\uff08\u9003\uff09\n\n\u4f46\u662f\u6211\u4eec\u6709\u66f4\u52a0\u9ad8\u6548\u7684\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u7684\u524d\u7f00\u548c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982~~\u5206\u5757\u5927\u6cd5\u543c\u554a~~\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u7b49\uff0c\u7ebf\u6bb5\u6811\u6211\u6ca1\u8bd5\u8fc7\uff0c\u4f46\u662f\u7801\u91cf\u3001\u5e38\u6570\u3001\u76f4\u89c2\u7a0b\u5ea6\uff08\u9700\u8981\u9012\u5f52\uff09\u90fd\u662f\u4e0d\u5982\u6811\u72b6\u6570\u7ec4\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5927\u591a\u6570\u65f6\u5019\u90fd\u4f1a\u9009\u62e9\u540e\u8005\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u6539\u53d8log\u4e2a\u6839\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\uff08log^2)\u7684\u4fee\u6539\u590d\u6742\u5ea6\u4e86\uff0c\u800c\u67e5\u8be2\u4e5f\u9700\u8981\u67e5\u8be2log\u4e2a\u6839\uff0c\u590d\u6742\u5ea6\u4e5f\u662fO\uff08log^n)\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6O(Nlog^2(N)),\u7a7a\u95f4\u590d\u6742\u5ea6O(Nlog^2(N))\uff08\u4e8e\u662f\u9898\u76ee\u6109\u5feb\u5730\u7ed9\u51fa\u4e861024M:)\n\n#### \u4ee3\u7801&\u6ce8\u91ca\uff08\u5e38\u6570\u7565\u5927\uff0c\u5f00O2\u8dd1\u4e867200ms\uff0c\u4ec5\u4f5c\u53c2\u8003\uff09\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define mid ((l+r)>>1)\n#define MN 200005\n#define Ls Tree[x].lson\n#define Rs Tree[x].rson\nstruct tree{\n    int lson,rson,sum;\n}Tree[MN*100];//\u4e3b\u5e2d\u6811\u57fa\u672c\u914d\u7f6e\uff1a\u5de6\u5b50\u6811\u7f16\u53f7\u3001\u53f3\u5b50\u6811\u7f16\u53f7\u3001\u533a\u95f4\u4e2d\u6570\u7684\u6570\u91cf\ninline int read(){\n    int a=0;\n    char c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while('0'<=c&&c<='9'){a=(a<<3)+(a<<1)+c-48;c=getchar();}\n    return a;\n}\ninline int getc(){\n    char c=getchar();\n    while(c!='Q'&&c!='C') c=getchar();\n    return c;\n}\n//int\u548cchar\u7684\u5feb\u8bfb(\u7b2c\u4e8c\u79cd\u5e94\u8be5\u6ca1\u4ec0\u4e48\u7528)\ninline int lowbit(int x){\n    return (x&(-x));\n}//lowbit\u64cd\u4f5c\nint root[MN],n,m,cnt,v[MN],a[MN],L,R,x[MN],y[MN],k[MN],now[MN],past[MN],N;\n//root\uff1a\u6839 cnt\uff1a\u70b9\u7684\u603b\u6570 a\uff1a\u8f93\u5165\u7684\u6570\uff0c\u540e\u53d8\u4e3a\u79bb\u6563\u5316\u540e\u7684\u6392\u540d\n//x,y\uff0ck:\u8be2\u95ee\u7684\u5de6\u53f3\u7aef\u70b9\u3001\u6392\u540d\uff0c\u6216x\u4e3a\u66ff\u6362\u7684\u7f16\u53f7\uff0cy\u4e3a\u66ff\u6362\u7684\u503c\n//past\u3001now\uff1a\u7528\u4e8e\u4ece0\u5230\u5de6\u53f3\u7aef\u70b9\u7684\u6c42\u548c\uff08\u6811\u72b6\u6570\u7ec4\uff09\nchar c[MN];//Q\u8fd8\u662fC\nvoid Discrete(){//\u79bb\u6563\u5316\n    sort(v+1,v+1+N);\n    N=unique(v+1,v+1+N)-v;//\u79bb\u6563\u5316\u540e\u7684\u6570\u91cf\n    for(int i=1;i<=n;i++){\n        int l=1,r=N;\n        while(l+1<r){\n            if(v[mid]<=a[i]) l=mid;\n                else r=mid;\n        }\n        a[i]=l;\n    }\n    for(int i=1;i<=m;i++)//\u6ce8\u610fy\u4e5f\u8981\u79bb\u6563\u5316\n        if(c[i]=='C'){\n            int l=1,r=N;\n            while(l+1<r)\n                if(v[mid]<=y[i]) l=mid;\n                    else r=mid;\n            y[i]=l;\n        }\n}\nvoid change(int num,int &x,int l,int r,int ad){\n    if(!x) x=++cnt;\n    Tree[x].sum+=ad;\n    if(l==r)return;\n    if(num<=mid) change(num,Ls,l,mid,ad);\n        else change(num,Rs,mid+1,r,ad);\n}//\u6b63\u5e38\u4e3b\u5e2d\u6811\u7684\u63d2\u5165\nint kth(int l,int r,int k){\n    if(l==r) return l;\n    int sum=0;\n    for(int i=1;i<=L;i++) sum-=Tree[Tree[past[i]].lson].sum;\n    for(int i=1;i<=R;i++) sum+=Tree[Tree[now[i]].lson].sum;\n    //\u7b97\u51fa\u5de6\u533a\u95f4\u7684\u6570\u7684\u6570\u91cf\n    if(sum>=k){\n        for(int i=1;i<=R;i++)now[i]=Tree[now[i]].lson;\n        for(int i=1;i<=L;i++)past[i]=Tree[past[i]].lson;\n        return kth(l,mid,k);\n        //\u5982\u679c\u7b2cK\u540d\u5728\u5de6\u533a\u95f4\uff0c\u5c31\u5411\u5de6\u627e\n    }\n    for(int i=1;i<=R;i++)now[i]=Tree[now[i]].rson;\n    for(int i=1;i<=L;i++)past[i]=Tree[past[i]].rson;\n    return kth(mid+1,r,k-sum);\n    //\u5426\u5219\u5728\u53f3\u533a\u95f4\u627e\n}\nint main(){\n    n=read();m=read();\n    cnt=1;\n    for(int i=1;i<=n;i++) \n        a[i]=read(),v[i]=a[i];\n    N=n;\n    for(int i=1;i<=m;i++){\n        c[i]=getc();\n        if(c[i]=='Q'){x[i]=read();y[i]=read();k[i]=read();}\n            else{x[i]=read();y[i]=read();v[++N]=y[i];}\n    }\n    //\u56e0\u4e3ay\u53ef\u80fd\u4e0e\u4e4b\u524d\u7684a\u4e0d\u540c\uff0c\u6240\u4ee5\u8981\u5148\u8f93\u5165\u6240\u6709\u95ee\u9898\uff0c\u8bb0\u5f55y\u7684\u503c\n    Discrete();\n    for(int i=1;i<=n;i++)\n        for(int x=i;x<=n;x+=lowbit(x))\n            change(a[i],root[x],1,N-1,1);\n        //\u6811\u72b6\u6570\u7ec4\u7684\u539f\u7406\uff0clog\u4e2a\u6839\u90fd\u6539\u53d8\n    for(int i=1;i<=m;i++)\n        if(c[i]=='Q'){\n            L=R=0;\n            for(int j=x[i]-1;j>0;j-=lowbit(j)) past[++L]=root[j];\n            for(int j=y[i];j>0;j-=lowbit(j)) now[++R]=root[j];\n            //\u8bb0\u5f55\u5404\u4e2a\u9700\u8981\u53c2\u4e0e\u6811\u72b6\u6570\u7ec4\u8fd0\u7b97\u7684\u6839\u8282\u70b9\n            printf(\"%d\\n\",v[kth(1,N-1,k[i])]);\n            //\u6ce8\u610f\uff01\u8fd9\u91cc\u8981\u8f93\u51fa\u539f\u503c\uff0c\u8303\u56f4\u6309\u79bb\u6563\u5316\u540e\u7684\u8303\u56f4\n        }\n        else{\n            for(int j=x[i];j<=n;j+=lowbit(j)) change(a[x[i]],root[j],1,N-1,-1);//\u6ce8\u610f\uff01\u8fd9\u91cc\u662f\u6392\u540d\uff01\n            for(int j=x[i];j<=n;j+=lowbit(j)) change(y[i],root[j],1,N-1,1);\n            //\u8303\u56f4\u540c\u6837\u662f\u6309\u7167\u79bb\u6563\u5316\u540e\u7684\u8303\u56f4\n            a[x[i]]=y[i];\n        }\n    return 0;\n}\n\n\n```\n",
        "postTime": 1552276030,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u5c45\u7136\u6ca1\u6709 $O(n\\sqrt{n})$ \u5206\u5757\u7684\u9898\u89e3\uff1f\u6211\u6765\u5199\u4e00\u7bc7\u597d\u4e86\u3002\n\n~~\u7ed3\u679c\u6211\u53d1\u73b0\u5206\u5757\u5f00\u4e2aO2\u6bd4\u6211\u7684\u4e3b\u5e2d\u6811\u5957BIT\u8fd8\u5feb~~\n\n\u5f3a\u5316\u7248\uff1a[[Ynoi2018]\u672a\u6765\u65e5\u8bb0](https://www.luogu.org/problemnew/show/P4119)\n\n~~Ynoi\u505a\u591a\u4e86\u5565\u90fd\u662f\u5206\u5757~~\n\n\u9996\u5148\u6211\u4eec\u79bb\u7ebf\uff0c\u5c06\u503c\u57df\u79bb\u6563\u5316\uff0c\u6613\u77e5\u6700\u591a\u53ea\u6709 $n+m$ \u4e2a\u4e0d\u540c\u7684\u6743\u503c\u3002\n\n\u6211\u4eec\u8003\u8651\u5c06\u5e8f\u5217\u548c\u503c\u57df\u90fd\u5206\u5757\u3002$sum1[i][j]$ \u8868\u793a\u5e8f\u5217\u524d $i$ \u5757\u503c\u57df\u7b2c $j$ \u5757\u7684\u5143\u7d20\u4e2a\u6570\uff0c$sum2[i][j]$ \u8868\u793a\u5e8f\u5217\u524d $i$ \u5757\u6743\u503c\u4e3a $j$ \u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u8bbe\u6709 $tot$ \u4e2a\u4e0d\u540c\u7684\u6743\u503c\u3002\u7531\u4e8e\u6211\u6bd4\u8f83\u61d2\uff0c\u6240\u4ee5\u5e8f\u5217\u7684\u5757\u957f\u8bbe\u4e3a $\\sqrt{n}$\uff0c\u503c\u57df\u7684\u5757\u957f\u8bbe\u4e3a $\\sqrt{tot}$\uff0c\u90a3\u4e48\u9884\u5904\u7406\u7684\u65f6\u95f4 $O(tot\\sqrt{n})$\n\n\u7531\u4e8e\u4fee\u6539\u64cd\u4f5c\u662f\u5355\u70b9\u4fee\u6539\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u904d\u5386\u524d\u7f00\u548c\uff0c\u65f6\u95f4 $O(\\sqrt{n})$\n\n\u8be2\u95ee\u64cd\u4f5c\u5219\u662f\u6b65\u6b65\u903c\u8fd1\u7b54\u6848\uff0c\u7c7b\u4f3c\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u627e\u7b2c $k$ \u5c0f\uff0c\u5148\u627e\u6574\u5757\u518d\u627e\u96f6\u6563\u7684\u90e8\u5206\u3002\u7531\u4e8e\u6211\u4eec\u8fd8\u8981\u5c06\u5e8f\u5217\u4e2d\u96f6\u6563\u7684\u90e8\u5206\u52a0\u8fc7\u6765\uff0c\u6240\u4ee5\u65f6\u95f4 $O(\\sqrt{n}+\\sqrt{tot})$\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=100000+10;\nconst int maxblo=317;\nint n,m,blo,a[maxn],mp[maxn<<1],tot,pos[maxn],bl[maxn<<1],L[maxn],R[maxn];\nint v1[maxn<<1],v2[maxn<<1],sum1[450][450],sum2[320][maxn<<1];\n\ninline int read(){\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\nstruct Query{\n\tint op,l,r,k;\n}q[maxn];\n\ninline void modify(int x,int y){\n    for(int i=pos[x];i<=pos[n];i++){\n    \tsum1[i][bl[a[x]]]--;\n    \tsum1[i][bl[y]]++;\n    \tsum2[i][a[x]]--;\n    \tsum2[i][y]++;\n\t}\n\ta[x]=y;\n}\n\ninline int query(int l,int r,int k){\n    if(pos[l]==pos[r]){\n        for(int i=l;i<=r;i++) v1[i]=a[i];\n        nth_element(v1+l,v1+l+k-1,v1+r+1);\n        int ans=v1[l+k-1];\n        for(int i=l;i<=r;i++) v1[i]=0;\n        return ans;\n    }\n    for(int i=l;i<=R[pos[l]];i++) v1[bl[a[i]]]++,v2[a[i]]++;\n    for(int i=L[pos[r]];i<=r;i++) v1[bl[a[i]]]++,v2[a[i]]++;\n    for(int i=1;i<=bl[tot];i++){\n        if(k>v1[i]+sum1[pos[r]-1][i]-sum1[pos[l]][i]) k-=v1[i]+sum1[pos[r]-1][i]-sum1[pos[l]][i];\n        else {\n            for(int j=(i-1)*blo+1;j<=i*blo;j++){\n                if(k>v2[j]+sum2[pos[r]-1][j]-sum2[pos[l]][j]) k-=v2[j]+sum2[pos[r]-1][j]-sum2[pos[l]][j];\n                else {\n                    for(int x=l;x<=R[pos[l]];x++) v1[bl[a[x]]]--,v2[a[x]]--;\n                    for(int x=L[pos[r]];x<=r;x++) v1[bl[a[x]]]--,v2[a[x]]--;\n                    return j;\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    n=read(),m=read();blo=sqrt(n)+1;\n    for(int i=1;i<=n;i++) a[i]=mp[++tot]=read();\n    char op;\n    for(int i=1;i<=m;i++){\n    \top=getchar();\n    \twhile(op!='Q'&&op!='C') op=getchar();\n    \tq[i].op=(op=='Q')?1:2;\n    \tif(q[i].op==1) q[i].l=read(),q[i].r=read(),q[i].k=read();\n\t\telse q[i].l=read(),q[i].k=mp[++tot]=read();\n\t}\n\tsort(mp+1,mp+tot+1);\n\ttot=unique(mp+1,mp+tot+1)-mp-1;\n\tfor(int i=1;i<=n;i++) a[i]=lower_bound(mp+1,mp+tot+1,a[i])-mp;\n    for(int i=1;i<=n;i++){\n        pos[i]=(i-1)/blo+1;\n        if(pos[i]!=pos[i-1]) L[pos[i]]=i,R[pos[i-1]]=i-1;\n    }\n    R[pos[n]]=n;blo=sqrt(tot)+1;\n    for(int i=1;i<=tot;i++) bl[i]=(i-1)/blo+1;\n    for(int x=1;x<=pos[n];x++){\n        for(int i=1;i<=bl[tot];i++) sum1[x][i]=sum1[x-1][i];\n        for(int i=1;i<=tot;i++) sum2[x][i]=sum2[x-1][i];\n        for(int i=L[x];i<=R[x];i++) sum1[x][bl[a[i]]]++,sum2[x][a[i]]++;\n    }\n    for(int i=1;i<=m;i++){\n    \tif(q[i].op==1) printf(\"%d\\n\",mp[query(q[i].l,q[i].r,q[i].k)]);\n\t\telse q[i].k=lower_bound(mp+1,mp+tot+1,q[i].k)-mp,modify(q[i].l,q[i].k);\n\t}\n    return 0;\n}\n```",
        "postTime": 1550538971,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "### \u771f\u00b7\u5728\u7ebf\u505a\u6cd5\uff1a\n\n\u51e0\u4e4e\u6240\u6709\u4f7f\u7528\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\u505a\u6cd5\u7684\u4ee3\u7801\u90fd\u662f\u8bfb\u5165\u6240\u6709\u8be2\u95ee\u4e4b\u540e\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u4f46\u5982\u679c\u8fd9\u9898\u662f\u5f3a\u5236\u5728\u7ebf\u5462\uff1f\u90a3\u6211\u4eec\u5c31\u65e0\u6cd5\u8bfb\u5165\u6240\u6709\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\u4e86\u3002\n\n\u6211\u4eec\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7684\u6280\u5de7\uff0c\u53ea\u6709\u5728\u7528\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u624d\u7ed9\u8fd9\u4e2a\u70b9\u5206\u914d\u7a7a\u95f4\uff0c\n\n\u8fd9\u6837\u6bcf\u6b21\u4fee\u6539\u81f3\u591a\u5efa\u7acb$log$(\u503c\u57df)\u4e2a\u70b9\u3002\n\n\u5f53\u7136\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u4f1a\u9ad8\u4e0a\u4e0d\u5c11\uff0c\u56e0\u4e3a$log(n)$\u53d8\u6210\u4e86$log(1e9)$\uff08\u503c\u57df\uff09\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int Read()\n{\n    int x = 0, f = 1; char s = getchar();\n    for(; !isdigit(s); s = getchar()) if(s == '-') f = -1;\n    for(; isdigit(s); s = getchar()) x = x * 10 + s - 48;\n    return x * f;\n}\n\ninline void Print(int x)\n{\n    if(x > 9) Print(x / 10);\n    putchar(x % 10 + 48);\n}\n\n#define lowbit(x) (x & (-x))\nconst int MAXN = 100010;\n\nstruct Node\n{\n    int ls, rs, cnt;\n}node[MAXN * 800];\nint cnt, root[MAXN];\n\nint n, m, cntx, cnty;\nint a[MAXN], cx[20], cy[20];\n\ninline void modify(int &o, int l, int r, int pos, int val)\n{\n    if(!o) o = ++cnt;\n    node[o].cnt += val;\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    if(pos <= mid) modify(node[o].ls, l, mid, pos, val);\n    else modify(node[o].rs, mid + 1, r, pos, val);\n}\n\ninline void update(int pos, int val, int x)\n{\n    for(register int i = pos; i <= n; i += lowbit(i))\n        modify(root[i], 0, 1e9, x, val);\n}\n\ninline int query(int l, int r, int k)\n{\n    if(l == r) return l;\n    int mid = (l + r) >> 1, sum = 0;\n    for(register int i = 1; i <= cntx; ++i) sum += node[node[cx[i]].ls].cnt;\n    for(register int i = 1; i <= cnty; ++i) sum -= node[node[cy[i]].ls].cnt;\n    if(k <= sum)\n    {\n        for(register int i = 1; i <= cntx; ++i) cx[i] = node[cx[i]].ls;\n        for(register int i = 1; i <= cnty; ++i) cy[i] = node[cy[i]].ls;\n        return query(l, mid, k);\n    }\n    else\n    {\n        for(register int i = 1; i <= cntx; ++i) cx[i] = node[cx[i]].rs;\n        for(register int i = 1; i <= cnty; ++i) cy[i] = node[cy[i]].rs;\n        return query(mid + 1, r, k - sum);\n    }\n}\n\nint main()\n{\n    char op[5]; int l, r, k;\n    n = Read(), m = Read();\n    for(register int i = 1; i <= n; ++i)\n    {\n        a[i] = Read();\n        update(i, 1, a[i]);\n    }\n    while(m--)\n    {\n        scanf(\"%s\", op);\n        if(op[0] == 'Q')\n        {\n            l = Read(), r = Read(), k = Read();\n            cntx = cnty = 0;\n            for(register int i = r; i; i -= lowbit(i)) cx[++cntx] = root[i];\n            for(register int i = l - 1; i; i -= lowbit(i)) cy[++cnty] = root[i];\n            Print(query(0, 1e9, k)), putchar('\\n');\t\n        }\n        else\n        {\n            l = Read(), k = Read();\n            update(l, -1, a[l]);\n            update(l, 1, k);\n            a[l] = k;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1554990838,
        "uid": 70076,
        "name": "Aegir",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u8fd9\u662f\u672c\u849f\u84bb\u5199\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5982\u6709\u4e0d\u8db3\u8bf7\u89c1\u8c05\u3002\n\n\u8fd9\u9898\u7684\u601d\u8def\u53ef\u4ee5\u7531P3834\u7684\u83ab\u961f\u7684\u601d\u8def\u5ef6\u4f38\u51fa\u6765\uff0c\u53d8\u6210\u5e26\u4fee\u83ab\u961f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u7531\u4e8e\u52a0\u5f3a\u6570\u636e\u540e\u4f20\u7edf\u7684sqrt(n)\u7684\u5206\u5757\u6700\u540e\u976210\u4e2a\u70b9\u8dd1\u4e0d\u8fc7\u53bb\uff0c\u672c\u849f\u84bb\u5c31\u7384\u5b66\u8c03\u4e86\u4e00\u4e0b\u5757\u7684\u5927\u5c0f\uff0c\u4e0d\u6210\u60f3\u5438\u53e3\u6c27\u7adf\u7136A\u4e86\u3002\n\n\u6ce8\u91ca\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<set>\n#include<bitset>\n#define inl inline\n#define re register int\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n    Read x = 0;\n    bool w = 0;\n    char c = getchar();\n    while (c > '9' || c < '0') {\n        if (c == '-')w = 1;\n        c = getchar();\n    }\n    while (c >= '0'&&c <= '9') {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = getchar();\n    }\n    return w ? -x : x;//\u5feb\u8bfb\n}\nint n, m, num;\nint s[200001], cnt[200001], a[200001], b[200001], mp[200001], sum[200001], ans[200001];\n//s:\u6bcf\u4e2a\u6570\u6240\u5c5e\u7684\u5757\uff0ccnt:\u5bf9\u503c\u57df\u5206\u5757\u540e\u90a3\u4e2a\u503c\u7684\u6570\u7684\u4e2a\u6570\uff0csum:\u6bcf\u4e2a\u5757\u7684\u6570\u7684\u4e2a\u6570\u548c\uff0cmp:\u539f\u6570\u636e\uff0c\u79bb\u6563\u5316\u540e\u8d77\u6620\u5c04\u4f5c\u7528,a:\u79bb\u6563\u5316\u540e\u6570\u636e,b:\u79bb\u6563\u5316\u6240\u7528\u6570\u7ec4;\nstruct modify {\n    int pos, id;\n}c[200001];\nstruct quiz {\n    int l, r, rank, k, id;\n    bool operator <(const quiz &poi)const {\n        if (s[l] ^ s[poi.l])return s[l] < s[poi.l];\n        if (s[r] ^ s[poi.r])return s[r] < s[poi.r];\n        return k < poi.k;\n        //\u5e26\u4fee\u83ab\u961f\u6b63\u5e38\u6392\u5e8f\n    }\n}q[200001];\ninl void add(int x) {\n    cnt[x]++, sum[s[x]]++;\n}\ninl void del(int x) {\n    cnt[x]--, sum[s[x]]--;\n}\ninl void change(int x, int i) {\n    if (c[x].pos >= q[i].l&&c[x].pos <= q[i].r) {\n        cnt[a[c[x].pos]]--, cnt[a[c[x].id + n]]++, sum[s[a[c[x].pos]]]--, sum[s[a[c[x].id + n]]]++;\n    }\n    swap(a[c[x].id + n], a[c[x].pos]);\n}\nsigned main() {\n    n = read<int>(), m = read<int>(), num = pow(n,2.0/3);//\u7384\u5b66\u8c03\u5757\u7684\u5927\u5c0f;\n    for (re i = 1; i <= n; i++)a[i] = b[i] = read<int>(), s[i] = (i - 1) / num + 1;\n    char cc[2];\n    re qnum = 0, cnum = 0;\n    for (re i = 1; i <= m; i++) {\n        scanf(\"%s\", cc);\n        if (cc[0] == 'Q') {\n            q[++qnum].l = read<int>(), q[qnum].r = read<int>(), q[qnum].k = cnum, q[qnum].rank = read<int>(), q[qnum].id = qnum;\n        }\n        else {\n            re cn = n + (++cnum);\n            c[cnum].pos = read<int>(), a[cn] = b[cn] = read<int>(), s[cn] = (cn - 1) / num + 1, c[cnum].id = cnum;\n        }\n    }//\u8bfb\u5165\n    sort(b + 1, b + 1 + n + cnum);\n    re k, l = 1, r = 0, res, now;\n    re siz = unique(b + 1, b + 1 + n + cnum) - b;\n    int cn = n + cnum;\n    for (re i = 1; i <= cn; i++) {\n        k = a[i];\n        mp[a[i] = lower_bound(b + 1, b + siz, a[i]) - b] = k;\n    }//\u79bb\u6563\u5316\n    sort(q + 1, q + 1 + qnum);\n    k = 0;\n    for (re i = 1; i <= qnum; i++) {\n        while (l > q[i].l)add(a[--l]);\n        while (r < q[i].r)add(a[++r]);\n        while (l < q[i].l)del(a[l++]);\n        while (r > q[i].r)del(a[r--]);\n        while (k < q[i].k)change(++k, i);\n        while (k > q[i].k)change(k--, i);\n        //\u5e26\u4fee\u83ab\u961f\u677f\u5b50\n        res = 0, now = 0;\n        while (res + sum[now] < q[i].rank)res += sum[now++];//\u7edf\u8ba1\u7b54\u6848\uff0c\u7531\u4e8e\u5bf9\u503c\u57df\u5206\u5757\uff0c\u5f53res>=\u8be2\u95ee\u7684k\u5927\u503c\u65f6\u5c31\u627e\u5230\u4e86\u7b54\u6848\u6240\u5728\u7684\u5757\uff1b\n        for (re j = (now - 1) * num + 1;; j++) {\n            if ((res += cnt[j]) >= q[i].rank) {\n                ans[q[i].id] = mp[j];\n                break;\n                //\u66b4\u529b\u7edf\u8ba1\u5c0f\u5757\u7684\u7b54\u6848;\n            }\n        }\n    }\n    for (re i = 1; i <= qnum; i++)printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1550324979,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P2617 Dynamic Rankings \u9898\u89e3\uff08\u5e26\u4fee\u83ab\u961f\uff09"
    },
    {
        "content": "\u5148\u8bf4\u9759\u6001\u7684\uff1a[P1533 \u53ef\u601c\u7684\u72d7\u72d7](https://www.luogu.com.cn/problem/P1533)\n\n\u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u5bf9\u4e8e\u5904\u7406\u7684\u8be2\u95ee\u533a\u95f4\uff08\u4e00\u5806\u8be2\u95ee\uff09\u8bb0\u4e3a$[l,r]$\uff0c\u4e00\u4e2a\u8be2\u95ee$p$\u67e5\u8be2\u7684\u662f$[v[p].left,v[p].right]$\uff0c\u503c\u57df\u7684\u533a\u95f4\u8bb0\u4e3a$[low,high]$\n\n\u9996\u5148\u539f\u5e8f\u5217\u8bb0\u4e3a$A$\u3002\u5bf9\u4e8e\u7b54\u6848\u533a\u95f4\u4e3a$[low,high]$\uff0c\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1\u3001\u5c06$A$\u5e8f\u5217\u4e2d\u503c\u5728$[l,mid]$\u7684\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u5355\u70b9\u4fee\u6539\uff08\u6811\u72b6\u6570\u7ec4\uff09\n\n2\u3001\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee$p$\n\n\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u67e5\u8be2$t[p].right$\u548c$t[p].left-1$\u7684\u524d\u7f00\u548c\uff0c$query(t[p].right)-query(t[p].left-1)$\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u4e2a\u6570$cnt$\u3002\n\n\u5982\u679c\u5f53\u524d\u8be2\u95ee$k[p]\\leq cnt$\uff0c\u90a3\u5c31\u628a\u8fd9\u4e2a\u8be2\u95ee\u5f52\u5230$[low,mid]$\u7684\u5c0f\u95ee\u9898\u4e2d\uff1b\u5982\u679c$k[p]>cnt$\uff0c\u5c31\u8ba9$k[p]-cnt \\to k[p]$\uff0c\u7136\u540e\u628a\u5b83\u5206\u5230$[mid+1,high]$\u8fd9\u4e2a\u5c0f\u95ee\u9898\u4e2d\uff08\u7c7b\u4f3c\u4e8e$CDQ$\u7684\u8fc7\u7a0b\uff09\n\n3\u3001\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\uff0c\u9012\u5f52\u5230$[low,mid],[mid+1,high]$\u4e2d\n\n\u5f53\u95ee\u9898\u89c4\u6a21$[low,high]$\uff0c$low=high$\u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u662f$low$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n\\,log_2^2n)$\uff0c\u53ea\u670960 QWQ\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N=3e5+10,M=5e4+10;\nint n,m;\nint val[N],tmp[N],turn[N],ans[M];\nstruct tree\n{\n\tint rt[N];\n\tinline int lowbit(int x)\n\t{\n\t\treturn x&(-x);\n\t}\n\tinline int query(int x)\n\t{\n\t\tint res=0;\n\t\tif(x==0) return 0;\n\t\tfor(register int i=x;i>=1;i-=lowbit(i))\n\t\t\tres+=rt[i];\n\t\treturn res;\n\t}\n\tinline void change(int x,int c)\n\t{\n\t\tfor(register int i=x;i<=n;i+=lowbit(i))\n\t\t\trt[i]+=c;\n\t}\n}t;\nstruct query\n{\n\tint left,right;\n\tint k,id;\n}v[M],w[M];\ninline void divide(int l,int r,int low,int high)\n{\n\tif(low==high)\n\t{\n\t\tfor(register int i=l;i<=r;i++)\n\t\t\tans[v[i].id]=low;\n\t\treturn;\n\t}\n\tint mid=(low+high)/2,p=l-1,q=r+1;\n\tfor(register int i=1;i<=n;i++)\n\t\tif(val[i]>=low&&val[i]<=mid) t.change(i,1);\n\tfor(register int i=l;i<=r;i++)\n\t{\n\t\tint cnt=t.query(v[i].right)-t.query(v[i].left-1);\n\t\tif(cnt>=v[i].k) w[++p]=v[i];\n\t\telse w[--q]=v[i],w[q].k-=cnt;\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t\tif(val[i]>=low&&val[i]<=mid) t.change(i,-1);\n\tfor(register int i=l;i<=r;i++)\n\t\tv[i]=w[i];\n\tif(l<=p) divide(l,p,low,mid);\n\tif(r>=q) divide(q,r,mid+1,high);\n}\ninline int read()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){ if(ch=='-') f=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9'){ x=(x<<1)+(x<<3)+(ch^48); ch=getchar(); }\n\treturn x*f;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tval[i]=read();\n\t\ttmp[i]=val[i];\n\t}\n\tsort(tmp+1,tmp+n+1);\n\tint tot=unique(tmp+1,tmp+n+1)-(tmp+1);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tint sub=lower_bound(tmp+1,tmp+tot+1,val[i])-tmp;\n\t\tturn[sub]=val[i],val[i]=sub;\n\t}\n\tfor(register int i=1;i<=m;i++)\n\t\tv[i].left=read(),v[i].right=read(),v[i].k=read(),v[i].id=i;\n\tdivide(1,m,1,tot);\n\tfor(register int i=1;i<=m;i++)\n\t\tprintf(\"%d\\n\",turn[ans[i]]);\n\treturn 0;\n}\n```\n\u65e2\u7136\u6574\u4f53\u4e8c\u5206\u8dd1\u90a3\u4e48\u6162\uff0c\u90a3\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5f53\u7136\u6709\u8fa3\uff0c\u5f53\u652f\u6301\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5c31\u6bd4\u5982[P2617 Dynamic Rankings](https://www.luogu.com.cn/problem/P2617)\n\n\u5f53\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u5199\u6811\u5957\u6811\uff0c\u4f46\u6574\u4f53\u4e8c\u5206\u6548\u7387\u5dee\u4e0d\u591a\uff0c\u53c8\u597d\u5199\uff0c\u4e3a\u4ec0\u4e48\u8981\u5199\u6bd2\u7624\u7684\u6811\u5957\u6811\u5462\uff1f\n\n\u73b0\u5728\uff0c\u652f\u6301\u66f4\u6539\u4e00\u4e2a\u6570\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u64cd\u4f5c\u62c6\u6210\u4e24\u4e2a\uff1a\u5728$x$\u5904\u5220\u53bb$a_x$\u5728$x$\u5904\u63d2\u5165$y$\u3002\u5bf9\u4e8e\u4e00\u4e2a\u975e\u67e5\u8be2\u64cd\u4f5c\uff0c\u5982\u679c\u5b83\u4fee\u6539\u7684\u503c\uff08\u4e0d\u8003\u8651\u6b63\u8d1f\uff09\u5927\u4e8e$mid$\uff0c\u5373\u4f7f\u5b83\u662f\u6392\u5728\u5de6\u534a\u90e8\u5206\u7684\u67e5\u8be2\u524d\u9762\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u67e5\u8be2\u9020\u6210\u5f71\u54cd\uff0c\u53ef\u4ee5\u76f4\u63a5\u6254\u5230\u53f3\u8fb9\u3002\u540c\u7406\uff0c\u5982\u679c\u5b83\u5c0f\u4e8e\u7b49\u4e8e$mid$\uff0c\u90a3\u4e48\u53ef\u4ee5\u63d0\u524d\u628a\u8d21\u732e\u7b97\u597d\uff0c\u6254\u5230\u5de6\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f:\n\n1\u3001\u6309\u7167\u4e0a\u4e00\u9898\u7684\u5199\u6cd5\uff0c\u4e24\u4e2a\u6307\u9488\u4e00\u4e2a\u4ece\u5934\uff0c\u4e00\u4e2a\u4ece\u5c3e\u90e8\u5f00\u59cb\uff0c\u4f46\u8fd9\u91cc\u56e0\u4e3a\u6709\u987a\u5e8f\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u53f3\u534a\u90e8\u5206\u8fd8\u6709\u628a\u5b83\u53cd\u8fc7\u6765\uff08\u56e0\u4e3a\u672c\u6765\u5b58\u8fdb\u53bb\u65f6\u5c31\u662f\u53cd\u7684\uff09\u3002\u4e00\u5f00\u59cb\u7684$n$\u4e2a\u6570\u53ef\u4ee5\u76f4\u63a5\u5f53\u505a\u63d2\u5165\u5c31\u884c\u4e86\u3002\n\n2\u3001\u4fee\u6539\u64cd\u4f5c\uff0c\u8981\u628a\u539f\u6570\u7ec4\u4e5f\u6539\u4e86\n\n3\u3001\u8fd9\u9898\u6574\u4f53\u4e8c\u5206\u4e0d\u7528\u5f00$O_2$\u662f\u53ef\u4ee5\u8fc7\u5f97\uff0c\u5982\u679c\u8d85\u65f6\u4e86\uff0c\u6709\u53ef\u80fd\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N=2e5+10;\nint n,m;\nint val[N],tmp[N],turn[N],ans[N];//tmp\u662f\u79bb\u6563\u5316\u7528\u7684\uff0cturn\u662f\u6620\u5c04\u56de\u539f\u6765\u7684\u6570\u5b57 \nstruct tree//\u6811\u72b6\u6570\u7ec4 \n{\n\tint rt[N];\n\tinline int lowbit(int x)\n\t{\n\t\treturn x&(-x);\n\t}\n\tinline int query(int x)\n\t{\n\t\tint res=0;\n\t\tif(x==0) return 0;\n\t\tfor(register int i=x;i>=1;i-=lowbit(i))\n\t\t\tres+=rt[i];\n\t\treturn res;\n\t}\n\tinline void change(int x,int c)\n\t{\n\t\tfor(register int i=x;i<=n;i+=lowbit(i))\n\t\t\trt[i]+=c;\n\t}\n}t;\nstruct opt\n{\n\tint type,k;//0 \u67e5\u8be2 1 \u63d2\u5165 -1 \u5220\u9664   \u67e5\u8be2\u65f6\u662f\u7b2ck\u5927\uff0c\u4fee\u6539\u65f6\u662f\u6743\u503c \n\tint left,right;//\u67e5\u8be2\u7684\u533a\u95f4\n\tint pos;//pos\u662f\u67e5\u8be2\u65f6\u7684\u7f16\u53f7\u6216\u8005\u4fee\u6539\u7684\u4f4d\u7f6e\uff1b\n}v[2*N],w[2*N];\ninline void rev(int l,int r)//\u53cd\u8f6c \n{\n\tif(l>r) return;\n\tfor(register int i=l;i<=(l+r)/2;i++)\n\t\tswap(w[i],w[r-i+l]);\n}\ninline void divide(int l,int r,int low,int high)\n{\n\tif(low==high)//\u5230\u5e95\u4e86\uff0c\u76f4\u63a5\u66f4\u65b0\u7b54\u6848 \n\t{\n\t\tfor(register int i=l;i<=r;i++)\n\t\t\tif(!v[i].type) ans[v[i].pos]=low;\n\t\treturn;\n\t}\n\tint mid=(low+high)/2,p=l-1,q=r+1;\n\tfor(register int i=l;i<=r;i++)\n\t{\n\t\tif(v[i].type)\n\t\t{\n\t\t\tif(v[i].k<=mid) t.change(v[i].pos,v[i].type),w[++p]=v[i];//\u5982\u679c\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8emid\uff0c\u76f4\u63a5\u6254\u5230\u5de6\u8fb9 \n\t\t\telse w[--q]=v[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint cnt=t.query(v[i].right)-t.query(v[i].left-1);\n\t\t\tif(cnt>=v[i].k) w[++p]=v[i];\n\t\t\telse w[--q]=v[i],w[q].k-=cnt;//\u6ce8\u610f\u8fd9\u91cc\u8981\u51cf\u53bbcnt \n\t\t}\n\t}\n\tfor(register int i=l;i<=r;i++)\n\t\tif(v[i].type&&v[i].k<=mid) t.change(v[i].pos,-v[i].type);//\u6811\u72b6\u6570\u7ec4\u6e05\u7a7a \n\trev(q,r);//\u53cd\u8f6c \n\tfor(register int i=l;i<=r;i++)//\u8986\u76d6 \n\t\tv[i]=w[i];\n\tif(l<=p) divide(l,p,low,mid);//\u5206\u6cbb\u4e0b\u53bb \n\tif(r>=q) divide(q,r,mid+1,high);\n}\ninline int read()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){ if(ch=='-') f=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9'){ x=(x<<1)+(x<<3)+(ch^48); ch=getchar(); }\n\treturn x*f;\n}\nint main()\n{\n\tchar ch[2];\n\tint tot=0,cnt=0,a,b,c;\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tval[i]=read();\n\t\ttmp[++tot]=val[i];\n\t\tv[++cnt]=(opt){1,val[i],0,0,i};//\u4e00\u5f00\u59cb\u90fd\u662f\u63d2\u5165 \n\t}\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",&ch);\n\t\tif(ch[0]=='Q')\n\t\t{\n\t\t\ta=read(),b=read(),c=read();\n\t\t\tv[++cnt]=(opt){0,c,a,b,i};//\u8be2\u95ee \n\t\t}\n\t\telse\n\t\t{\n\t\t\ta=read(),b=read();\n\t\t\tv[++cnt]=(opt){-1,val[a],0,0,a};//\u5220\u9664\u539f\u6709\u7684 \n\t\t\tv[++cnt]=(opt){1,b,0,0,a};//\u63d2\u5165\u65b0\u7684 \n\t\t\ttmp[++tot]=b;\n\t\t\tval[a]=b;//\uff01\uff01\uff01\uff01\uff01\u8bb0\u5f97\u4fee\u6539 \n\t\t}\n\t}\n\tsort(tmp+1,tmp+tot+1);\n\ttot=unique(tmp+1,tmp+tot+1)-(tmp+1);\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tif(!v[i].type) continue;\n\t\tint sub=lower_bound(tmp+1,tmp+tot+1,v[i].k)-tmp;//\u79bb\u6563\u5316 \n\t\tturn[sub]=v[i].k,v[i].k=sub;\n\t}\n\tdivide(1,cnt,1,tot);//\u6574\u4f53\u4e8c\u5206 \n\tfor(register int i=1;i<=m;i++)\n\t\tif(ans[i]) printf(\"%d\\n\",turn[ans[i]]);\n\treturn 0;\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/c5knhgmo.png)\n\n\u8fd9\u662f\u6574\u4f53\u4e8c\u5206\u548c\u6811\u5957\u6811\u7684\u5bf9\u6bd4\uff08\u53ef\u80fd\u6211\u5199\u7684\u6bd4\u8f83\u4e11\uff0cdalao\u52ff\u55b7\uff09\uff0c\u53d1\u73b0\u6574\u4f53\u4e8c\u5206\u8fd8\u662f\u5f88\u5feb\u7684\u3002\u5f85\u4fee\u6539\u7684\u6574\u4f53\u4e8c\u5206\u548c\u6ca1\u4fee\u6539\u7684\u5176\u5b9e\u5c31\u52a0\u4e86\u4e00\u70b9\u4e1c\u897f\uff0c\u4f46\u5982\u679c\u662f\u4e3b\u5e2d\u6811\u7684\u8bdd\uff0c\u5c31\u5957\u591a\u4e86\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff08\u6811\u72b6\u6570\u7ec4\uff1a\u6ca1\u4e8b\u5957\u6211\u5e72\u561b\uff1f\uff1f\uff1f\uff09\u3002\u6574\u4f53\u4e8c\u5206\u8fd8\u662f\u5f88\u68d2\u7684\u8fa3\u3002",
        "postTime": 1586090533,
        "uid": 81238,
        "name": "MCAdam",
        "ccfLevel": 7,
        "title": "\u6574\u4f53\u4e8c\u5206\u5b66\u4e60"
    },
    {
        "content": "\u90fd\u662f$O(log^3N)$\u7684\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff1f\n\n\u770b\u5230\u6ce5\u840c\u90fd\u662f\u4e8c\u5206+\u533a\u95f4rank\u8bf6...\n\n\u4f5c\u4e3a\u89e3\u51b3\u533a\u95f4\u52a8\u6001Kth\u6700\u57fa\u672c\u89e3\u6cd5\uff0c\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u80af\u5b9a\u4e0d\u80fd\u8fd9\u4e48\u5f31\n\n\u5176\u5b9e\u53ef\u4ee5$O(log^2N)$\u7684...\n\n\u79bb\u6563\u5316\u5e8f\u5217$A$\u4ee5\u53ca\u63a5\u4e0b\u6765\u8981\u4fee\u6539\u7684\u6570\n\n\u7136\u540e$build$\u4e00\u68f5\u53ef\u7231\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\n\n\u5728\u6ca1\u6709\u533a\u95f4\u8fd9\u4e2a\u9650\u5236\u65f6\uff0c\u6211\u4eec\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u7b2ck\u5c0f\u662f\u8fd9\u6837\u7684\n\n\u5b9a\u4e49$cnt[o]$\u4ee3\u8868$o$\u6240\u5bf9\u5e94\u7684\u503c\u57df\n\n\u5f53\u4f60\u7ad9\u5728$o$\u65f6\uff0c\u89c2\u671b\u5de6\u513f\u5b50$lc$\u4e0e\u53f3\u513f\u5b50$rc$\n\n\u5982\u679c$cnt[lc] > k$\uff0c\u90a3\u4e48\u6700\u7ec8\u7b54\u6848\u4e00\u5b9a\u5728$lc$\u6240\u5bf9\u5e94\u7684\u503c\u57df\u91cc\n\n\u5426\u5219\u5728$rc$\u6240\u5bf9\u7684\u503c\u57df\u91cc\uff0c\u5e76\u4e14$k-=cnt[lc]$\n\n\u90a3\u4e48\u73b0\u5728\u6709\u533a\u95f4\u9650\u5236\u5462\uff1f\n\n\u5176\u5b9e\u5c31\u662f$cnt[o]$\u5e76\u4e0d\u662f\u6240\u6709\u90fd\u6ee1\u8db3\u4e86\uff0c\u800c\u662f$cnt[o]$\u4e2d\u4e0b\u6807\u5728$l$\u4e0e$r$\u4e4b\u95f4\u7684\u6240\u6709\u6570\n\n\u6240\u4ee5\u5f88\u81ea\u7136\u60f3\u5230\u5c06$cnt[o]$\u66ff\u6362\u6210\u4e00\u68f5\u5e73\u8861\u6811$BST[o]$\n\n$BST[o]$\u5b58\u653e\u843d\u5728$o$\u6240\u5bf9\u5e94\u7684\u503c\u57df\u7684\u6570\u5728\u6570\u7ec4$A$\u7684\u4e0b\u6807\n\n\u7136\u540e\u65e0\u8111$rank$\n\n\u81f3\u4e8e\u4fee\u6539\u64cd\u4f5c\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86...\n\n\u76f4\u63a5\u627e\u5230\u8be5\u5220\u9664\u7684\u5220\u9664\uff0c\u8be5\u6dfb\u52a0\u7684\u6dfb\u52a0",
        "postTime": 1541766264,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2617)\n\n~~\u867d\u7136\u9898\u9762\u4e0a\u8bf4\u7528\u6811\u5957\u6811\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u6211\u4e0d\u8bba\u600e\u6837\u90fd\u6ca1\u6709\u5361\u8fdb\u3002\u3002\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u592a\u83dc\u5427~~\n\n\u52a8\u6001\u533a\u95f4\u7b2cK\u5c0f\u6a21\u677f\u9898\u3002\n\n\uff08\u6253\u4e3b\u5e2d\u6811\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fd\u7684\uff0c\u6811\u5957\u6811\u53c8\u8981T\u98de\uff0c\u53ea\u80fd\u9760\u6574\u4f53\u4e8c\u5206\u7ef4\u6301\u751f\u8ba1\u8fd9\u6837\u5b50\uff09\n\n\u8981\u70b9\uff1a\n\n1.\u628a\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u6539\u6210\u4e00\u4e2a\u5220\u9664\u548c\u4e00\u4e2a\u6dfb\u52a0\uff1b\n\n2.\u7528memset0\u7684\uff0c\u53ef\u4ee5\u83b7\u5f9750\u5206\u7684\u597d\u6210\u7ee9\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nstruct point{\n\tint opt,l,r,k,orig,add;\n}queue[400001],tem1[400001],tem2[400001];\nint c[200001],a[100001],n,m,all[200001],top,lim,ans[200001],l,r,k,proc,last[200001],change[400001][2],t;\nbool isquery[200001],cnt[200001];\nchar opt;\nvoid update(int ind,int num){for(;ind<=lim;ind+=ind&-ind)c[ind]+=num; }\nint query(int ind){int tot=0;for(;ind;ind-=ind&-ind)tot+=c[ind];return tot;}\nvoid binary(int l,int r,int el,int er){\n\tif(l>r)return;\n\tif(el==er){\n\t\tfor(int i=l;i<=r;i++)ans[queue[i].orig]=all[el];\n\t\treturn;\n\t}\n\tint mid=(el+er)>>1,i=0,j=0;\n\tfor(int K=l;K<=r;K++){\n\t\tif(queue[K].opt==1){\n\t\t\tif(queue[K].k<=mid){\n\t\t\t\tupdate(queue[K].l,queue[K].add);\n\t\t\t\tchange[++t][0]=queue[K].l,change[t][1]=queue[K].add;\n\t\t\t\ttem1[++i]=queue[K];\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttem2[++j]=queue[K];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint tem=query(queue[K].r)-query(queue[K].l-1);\n\t\t\tif(tem>=queue[K].k){\n\t\t\t\ttem1[++i]=queue[K];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tqueue[K].k-=tem;\n\t\t\t\ttem2[++j]=queue[K];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int K=1;K<=t;K++)update(change[K][0],-change[K][1]);\n\tt=0;\n\tfor(int K=1;K<=i;K++)queue[K+l-1]=tem1[K];\n\tfor(int K=1;K<=j;K++)queue[K+l+i-1]=tem2[K];\n\tbinary(l,l+i-1,el,mid);\n\tbinary(l+i,r,mid+1,er);\n}\nvoid get(){\n\topt=getchar();\n\twhile(opt!='C'&&opt!='Q')opt=getchar();\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",all+i);\n\t\tqueue[i]=(point){1,i,0,all[i],0,1};\n\t\tlast[i]=all[i];\n\t}\n\ttop=proc=n;\n\tfor(int i=1;i<=m;i++){\n\t\tget();\n\t\tisquery[i]=opt=='Q';\n\t\tif(opt=='C'){\n\t\t\tscanf(\"%d%d\",&l,&k);\n\t\t\tqueue[++proc]=(point){1,l,0,last[l],i,-1};\n\t\t\tqueue[++proc]=(point){1,l,0,k,i,1};\n\t\t\tall[++top]=k;\n\t\t\tlast[l]=k;\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%d%d\",&l,&r,&k);\n\t\t\tqueue[++proc]=(point){2,l,r,k,i};\n\t\t}\n\t}\n\tstd::sort(all+1,all+top+1);\n\tlim=std::unique(all+1,all+top+1)-all-1;\n\tfor(int i=1;i<=proc;i++)if(queue[i].opt==1)queue[i].k=std::lower_bound(all+1,all+lim+1,queue[i].k)-all;\n\tbinary(1,proc,1,lim);\n\tfor(int i=1;i<=m;i++)if(isquery[i])printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1537268948,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2617 Dynamic Rankings"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[\u5e26\u4fee\u83ab\u961f](https://oi-wiki.org/misc/modifiable-mo-algo/)\u3001[\u5206\u5757](https://oi-wiki.org/ds/decompose/)\r\n\r\n~~\u4e0d\u60f3\u6253\u6811\u5957\u6811\u7684\u849f\u84bb\u5c31\u53ea\u80fd\u9760\u5e26\u4fee\u83ab\u961f\u548c\u503c\u57df\u5206\u5757\u7ef4\u6301\u751f\u8ba1\u4e86 /kk~~\r\n\r\n\u770b\u5230\u533a\u95f4\u67e5\u8be2\uff0c\u5c31\u60f3\u5230\u4e86\u83ab\u961f\uff1b\u770b\u5230\u4fee\u6539\u64cd\u4f5c\uff0c\u5c31\u60f3\u5230\u4e86\u5e26\u4fee\u83ab\u961f\uff1b\u53d1\u73b0\u8fd9\u9053\u9898\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u53c8\u770b\u5230\u6570\u636e\u8303\u56f4 $1 \\leq n, m \\leq 10^5$\uff0c\u5c31\u80af\u5b9a\u53ef\u4ee5\u7528\u5e26\u4fee\u83ab\u961f~~\u6c34\u8fc7\u53bb~~\u3002\r\n\r\n\u6bcf\u6b21\u6307\u9488\u79fb\u52a8\u65f6\u5c06\u5f53\u524d\u6570\u7684\u51fa\u73b0\u6b21\u6570\u548c\u5176\u6240\u5728\u5757 $\\pm 1$\uff0c\u67e5\u8be2\u65f6\u5c06\u9898\u76ee\u4e2d\u51fa\u73b0\u7684 $a_i$ \u548c $y$ \u79bb\u6563\u5316\u540e\u4e8c\u5206 + \u5206\u5757\u67e5\u8be2\u3002\r\n\r\n\u5f53\u5757\u957f\u53d6 $\\frac{n}{\\sqrt[3]{m}}$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm^{\\frac{2}{3}} + m \\sqrt{n + m} \\log (n + m))$\u3002\r\n\r\n\u4ee3\u7801\uff1a\r\n```cpp\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\n\r\ntypedef struct {\r\n\tint pos;\r\n\tint val;\r\n} Modification;\r\n\r\ntypedef struct {\r\n\tint id;\r\n\tint l;\r\n\tint r;\r\n\tint time;\r\n\tint k;\r\n} Query;\r\n\r\nint block1;\r\nint a[100007], b[200007], belong[200007], lft[457], rt[457], cnt[200007], sum[457], ans[100007];\r\nModification modification[100007];\r\nQuery query[100007];\r\n\r\nbool operator <(const Query a, const Query b){\r\n\tif (a.l / block1 != b.l / block1) return a.l < b.l;\r\n\tif (a.r / block1 != b.r / block1) return a.r < b.r;\r\n\treturn a.time < b.time;\r\n}\r\n\r\ninline void add(int x){\r\n\tcnt[x]++;\r\n\tsum[belong[x]]++;\r\n}\r\n\r\ninline void del(int x){\r\n\tcnt[x]--;\r\n\tsum[belong[x]]--;\r\n}\r\n\r\ninline void modify(int x, int time){\r\n\tif (query[x].l <= modification[time].pos && modification[time].pos <= query[x].r){\r\n\t\tdel(a[modification[time].pos]);\r\n\t\tadd(modification[time].val);\r\n\t}\r\n\tswap(a[modification[time].pos], modification[time].val);\r\n}\r\n\r\ninline int brute_force_get_sum(int l, int r){\r\n\tint ans = 0;\r\n\tfor (register int i = l; i <= r; i++){\r\n\t\tans += cnt[i];\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\ninline int get_sum(int l, int r){\r\n\tint ans = brute_force_get_sum(l, min(r, rt[belong[l]]));\r\n\tif (belong[l] != belong[r]) ans += brute_force_get_sum(lft[belong[r]], r);\r\n\tfor (register int i = belong[l] + 1; i < belong[r]; i++){\r\n\t\tans += sum[i];\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\ninline int get_kth_number(int k, int n){\r\n\tint l = 1, r = n, ans;\r\n\twhile (l <= r){\r\n\t\tint mid = (l + r) >> 1;\r\n\t\tif (get_sum(1, mid) >= k){\r\n\t\t\tr = mid - 1;\r\n\t\t\tans = mid;\r\n\t\t} else {\r\n\t\t\tl = mid + 1;\r\n\t\t}\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nint main(){\r\n\tint n, m, block2, modification_cnt = 0, val_cnt, k, query_cnt = 0;\r\n\tcin >> n >> m;\r\n\tval_cnt = n;\r\n\tfor (register int i = 1; i <= n; i++){\r\n\t\tcin >> a[i];\r\n\t\tb[i] = a[i];\r\n\t}\r\n\tfor (register int i = 1; i <= m; i++){\r\n\t\tchar ch;\r\n\t\tcin >> ch;\r\n\t\tif (ch == 'C'){\r\n\t\t\tmodification_cnt++;\r\n\t\t\tcin >> modification[modification_cnt].pos >> modification[modification_cnt].val;\r\n\t\t\tb[++val_cnt] = modification[modification_cnt].val;\r\n\t\t} else {\r\n\t\t\tquery_cnt++;\r\n\t\t\tcin >> query[query_cnt].l >> query[query_cnt].r >> query[query_cnt].k;\r\n\t\t\tquery[query_cnt].id = query_cnt;\r\n\t\t\tquery[query_cnt].time = modification_cnt;\r\n\t\t}\r\n\t}\r\n\tblock1 = ceil(n / cbrt(query_cnt));\r\n\tsort(b + 1, b + val_cnt + 1);\r\n\tval_cnt = unique(b + 1, b + val_cnt + 1) - b - 1;\r\n\tblock2 = sqrt(val_cnt);\r\n\tk = (val_cnt - 1) / block2 + 1;\r\n\tfor (register int i = 1; i <= n; i++){\r\n\t\ta[i] = lower_bound(b + 1, b + val_cnt + 1, a[i]) - b;\r\n\t}\r\n\tfor (register int i = 1; i <= modification_cnt; i++){\r\n\t\tmodification[i].val = lower_bound(b + 1, b + val_cnt + 1, modification[i].val) - b;\r\n\t}\r\n\tfor (register int i = 1; i <= val_cnt; i++){\r\n\t\tbelong[i] = (i - 1) / block2 + 1;\r\n\t}\r\n\tfor (register int i = 1; i <= k; i++){\r\n\t\tlft[i] = (i - 1) * block2 + 1;\r\n\t\trt[i] = min(i * block2, val_cnt);\r\n\t}\r\n\tsort(query + 1, query + query_cnt + 1);\r\n\tfor (register int i = 1, j = 1, x = 0, y = 0; i <= query_cnt; i++){\r\n\t\twhile (j > query[i].l) add(a[--j]);\r\n\t\twhile (x < query[i].r) add(a[++x]);\r\n\t\twhile (j < query[i].l) del(a[j++]);\r\n\t\twhile (x > query[i].r) del(a[x--]);\r\n\t\twhile (y < query[i].time) modify(i, ++y);\r\n\t\twhile (y > query[i].time) modify(i, y--);\r\n\t\tans[query[i].id] = b[get_kth_number(query[i].k, val_cnt)];\r\n\t}\r\n\tfor (register int i = 1; i <= query_cnt; i++){\r\n\t\tcout << ans[i] << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1626093362,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\n\n[P2617 Dynamic Rankings](https://www.luogu.org/problem/P2617)\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u52a8\u6001\u533a\u95f4\u7b2c $k$ \u5c0f\u3002\n\n## \u89e3\u9898\u601d\u60f3\n\n\u8003\u8651\u9759\u6001\u89e3\u6cd5\uff0c\u5355\u70b9\u4fee\u6539\u540e\u5bf9\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u66b4\u529b\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u663e\u7136\u4f1aT\u3002\n\n\u8003\u8651\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u524d\u7f00\u548c\uff0c\u6211\u4eec\u53d1\u73b0\u95ee\u9898\u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002\n\n\u8fd9\u4e2a\u4e0d\u96be\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u89e3\u51b3\uff0c\u5355\u6b21\u4fee\u6539 $O(\\log^2n)$\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5fc5\u987b\u628a\u9884\u5904\u7406\u6240\u6709\u7684\u5f85\u4fee\u6539\u5143\u7d20\uff0c\u6240\u4ee5\u8fd9\u662f\u4e2a\u79bb\u7ebf\u7b97\u6cd5\u3002\n\n\u4fee\u6539\u53ef\u4ee5\u5c06\u6811\u72b6\u6570\u7ec4\u7684 `modify()` \u4e2d\u7684 `+=` \u76f4\u63a5\u6539\u6210\u4e3b\u5e2d\u6811 `modify()`\uff0c\u4f46\u662f\u67e5\u8be2\u9700\u8981 $O(\\log n)$ \u4e2a\u8282\u70b9\u4e00\u8d77\u5411\u4e0b\u79fb\u52a8\u3002\u6240\u4ee5\u8981\u5728\u4e3b\u5e2d\u6811 `modify()` \u7684\u5185\u90e8\u5904\u7406\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n\ninline int read() {\n    char ch = getchar(); int r = 0, w = 1;\n    while(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();}\n    while(isdigit(ch)) {r = r * 10 + ch - '0', ch = getchar();}\n    return r * w;\n}\n\nconst int N = 4e7 + 6;\n\nint n, m, sz, idx;\nint a[N], b[N], t[N], ls[N], rs[N], rt[N], cur1[N], cur2[N], q1[N], q2[N], q3[N];\nbool type[N];\n#define mid ((l + r) >> 1)\ninline void copy(int old, int o) {t[o] = t[old], ls[o] = ls[old], rs[o] = rs[old];}\ninline void upd(int o) {t[o] = t[ls[o]] + t[rs[o]];}\nvoid build(int &o, int l, int r) {o = ++idx; if(l == r) return; build(ls[o], l, mid); build(rs[o], mid + 1, r);}\nvoid modify(int old, int &o, int l, int r, int x, int k) {o = ++idx; copy(old, o); if(l == r) {t[o] += k; return;} if(x <= mid) modify(ls[old], ls[o], l, mid, x, k); else modify(rs[old], rs[o], mid + 1, r, x, k); upd(o);}\ninline int lowbit(int x) {return x & -x;}\ninline void modify(int o, int x, int k) {for(; o <= n; o += lowbit(o)) modify(rt[o], rt[o], 1, sz, x, k);}\ninline int query(int ll, int rr, int k) {\n    int l = 1, r = sz, sum1, sum2;\n    for(register int i = ll; i; i -= lowbit(i)) cur1[i] = rt[i];\n    for(register int i = rr; i; i -= lowbit(i)) cur2[i] = rt[i];\n    while(l < r) {\n        sum1 = sum2 = 0;\n        for(register int i = ll; i; i -= lowbit(i)) sum1 += t[ls[cur1[i]]];\n        for(register int i = rr; i; i -= lowbit(i)) sum2 += t[ls[cur2[i]]];\n        if(sum2 - sum1 >= k) {\n            for(register int i = ll; i; i -= lowbit(i)) cur1[i] = ls[cur1[i]];\n            for(register int i = rr; i; i -= lowbit(i)) cur2[i] = ls[cur2[i]];\n            r = mid;\n        }\n        else {\n            for(register int i = ll; i; i -= lowbit(i)) cur1[i] = rs[cur1[i]];\n            for(register int i = rr; i; i -= lowbit(i)) cur2[i] = rs[cur2[i]];\n            l = mid + 1, k -= sum2 - sum1;\n        }\n    }\n    return l;\n}\n\nbool isQ() {\n    char op = getchar();\n    while(op != 'Q' && op != 'C') op = getchar();\n    return op == 'Q';\n}\n\nint main() {\n    n = read(), m = read(), sz = n;\n    for(register int i = 1; i <= n; i++) a[i] = b[i] = read();\n    for(register int i = 1; i <= m; i++) {\n        type[i] = isQ();\n        q1[i] = read(), q2[i] = read();\n        if(type[i]) q3[i] = read();\n        else b[++sz] = q2[i];\n    }\n    std::sort(b + 1, b + sz + 1);\n    sz = std::unique(b + 1, b + sz + 1) - b - 1;\n    build(rt[0], 1, sz);\n    for(register int i = 1; i <= n; i++) modify(i, std::lower_bound(b + 1, b + sz + 1, a[i]) - b, 1);\n    for(register int i = 1; i <= m; i++) {\n        if(type[i]) printf(\"%d\\n\", b[query(q1[i] - 1, q2[i], q3[i])]);\n        else {\n            modify(q1[i], std::lower_bound(b + 1, b + sz + 1, a[q1[i]]) - b, -1);\n            a[q1[i]] = q2[i];\n            modify(q1[i], std::lower_bound(b + 1, b + sz + 1, a[q1[i]]) - b, 1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1569031410,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 Dynamic Rankings"
    },
    {
        "content": "\u770b\u4e86\u770b\u697c\u4e0b\u7684\u9898\u89e3\uff0c\u53d1\u73b0\u697c\u4e0b\u7684\u9898\u89e3\u6bcf\u6b21add\u90fd\u65b0\u5f00\u4e86\u4e00\u4e2a\u6811\uff0c\u4f46\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u800c\u4e14\u7a0b\u5e8f\u8fd8\u53d8\u6162\uff0c\u6240\u4ee5\u6211\u662f\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u4fee\u6539\u5c31\u884c\u4e86\n\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u9898\u7684\u6570\u636e\u662f\u4e0d\u662f\u52a0\u5f3a\u4e86\uff1f\uff1f\uff1f\u9898\u89e3\u5f88\u591aRE\uff0c\u6211\u5f00\u5230\u4e864e7\u624d\u8fc7\u7684\uff1a\n\u653e\u7801-\u3002-\n\n```cpp\n#include\"bits/stdc++.h\"\nusing namespace std;\n#define nn 40000000\n#define lowbit(x) ((x)&(-x))\n\nint rt[nn],b[nn],a[nn],ca[nn],cb[nn],cc[nn] ;\nint size[nn],xx[nn],yy[nn],l[nn],r[nn];\nint n,m;\nint totn;\nint tot,totx,toty;\n\ninline int read(){\n    int f=1,x=0;char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f*x;\n}\n\n\nvoid change(int &y,int L,int R,int pos,int v)\n{\n      if (!y)y=++tot; size[y]+=v;//,l[tot]=l[x],r[tot]=r[x];\n    if (L==R)return ;\n    int mid = R+L>>1;if (pos<=mid)change(l[y],L,mid,pos,v);\n    else change(r[y],mid+1,R,pos,v);\n}\n\ninline void add(int x,int v)\n{\n    int k = lower_bound(b+1,b+1+totn,a[x])-b;\n    for (int i=x;i<=n;i+=lowbit(i)) change(rt[i],1,totn,k,v);\n}\n\nint query(int L,int R,int p)\n{\n    if (L==R)return R; int sum=0; int mid = L+R>>1;\n    for (int i=1;i<=totx;i++)sum-=size[l[xx[i]]];\n    for (int i=1;i<=toty;i++)sum+=size[l[yy[i]]];\n\n    if (p<=sum)\n    {\n       for ( int i=1;i<=totx;i++)xx[i]=l[xx[i]];\n       for ( int i=1;i<=toty;i++)yy[i]=l[yy[i]];\n       return query(L,mid,p);\n    }\n     for ( int i=1;i<=totx;i++)xx[i]=r[xx[i]];\n       for ( int i=1;i<=toty;i++)yy[i]=r[yy[i]];\n      return query(mid+1,R,p-sum);\n}\n\nint main()\n{  char s;\n    n=read(),m=read();\n    for (int i=1;i<=n;i++)a[i]=read(),b[++totn]=a[i];\n\n    for (int i=1;i<=m;i++)\n    {\n        cin>>s; if (s=='Q') ca[i]=read(),cb[i]=read(),cc[i]=read();\n        else ca[i]=read(),cb[i]=read(),b[++totn]=cb[i];\n    }\n        sort(b+1,b+1+totn);\n    totn=unique(b+1,b+1+totn)-b-1;\n\n    for ( int i=1;i<=n;i++) add(i,1);\n    for ( int i=1;i<=m;i++)\n    {\n        if (cc[i])\n        {  totx=toty=0;\n            for ( int j=ca[i]-1;j;j-=lowbit(j))xx[++totx]=rt[j];\n            for ( int j=cb[i];j;j-=lowbit(j))yy[++toty]=rt[j];\n            printf(\"%d\\n\",b[query(1,totn,cc[i])]);\n        }\n        else\n        {\n            add(ca[i],-1),a[ca[i]]=cb[i],add(ca[i],1);\n        }\n    }\n\n}\n\n```",
        "postTime": 1547966970,
        "uid": 50852,
        "name": "zhangbubu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "## \u52a8\u6001Kth\u95ee\u9898\n\u5927\u81f4\u4e24\u4e2a\u601d\u8def\uff1a\n- BIT\u7ef4\u62a4\u591a\u9897\u6743\u503c\u7ebf\u6bb5\u6811\n- \u539f\u6570\u636e\u7684\u4e3b\u5e2d\u6811+BIT\u7ef4\u62a4\u7684\u4fee\u6539\u8def\u5f84\u4e3b\u5e2d\u6811\n\n\u901a\u5e38\u7b2c\u4e00\u79cd\u524d\u56db\u4e2a\u70b9\u80fd\u8fc7\uff0c\u540e\u9762\u7684n,m<=10000\u65f6\u5c31\u6808\u6ea2\u51fa\u4e86\uff0c\u5982\u679c\u591a\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u4e4b\u95f4\u5229\u7528\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u8282\u7ea6\u5efa\u6811\u7684\u6d88\u8017\uff0cAC\u5927\u6982600\u591ams\u3002\n\n\u7b2c\u4e8c\u79cd\u5c31\u53ef\u4ee5\u8dd1\u5230\u98de\u5feb\u3002\u4f46\u4e24\u8005\u6838\u5fc3\u90fd\u662f\u4e00\u6837\u7684\uff0c\u770b\u90a3\u4e2a\u65b9\u4fbf\u5199\u5427\u3002\n\uff08\u4ee5\u4e0b\u662f\u7b2c\u4e8c\u79cd\u601d\u8def:\uff09\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MN=10005;\n\nint n,m,cnt=0,len;\nint root[MN],a[MN],rem[MN];\nstruct node{int l,r,sum;}T[MN*600];\nvector<int> v;\nstruct queryList{int c,x,y,z;}qry[MN];//\u79bb\u7ebf\u3002\n\ninline int getid(int x){return lower_bound(v.begin(),v.end(),x)-v.begin()+1;}\ninline int lowBit(int x){return x&(-x);}\n\nvoid hjtTree(int l,int r,int &x,int y,int pos,int delt)\n{\n\t++cnt,T[cnt]=T[y],T[cnt].sum+=delt,x=cnt;\n\tif (l==r) return ;\n\tint mid=(l+r)/2;\n\tif (mid>=pos) hjtTree(l,mid,T[x].l,T[y].l,pos,delt);\n\telse hjtTree(mid+1,r,T[x].r,T[y].r,pos,delt);\n}\nvoid build(int l,int r,int &cur)\n{\n\tcur=++cnt;\n\tif (l==r) return ;\n\tint mid=(l+r)/2;\n\tbuild(l,mid,T[cur].l);\n\tbuild(mid+1,r,T[cur].r);\n}\nvoid change(int i,int now)\n{\n\tint pre=getid(a[i]);\n\twhile(i<=n)\n\t{\n\t\t//if (root[i]==0) build(1,len,root[i]);\n\t\t//\u4e0d\u80fd\u78b0\u5230\u4e00\u4e2a\u5c31\u5efa\u6811\uff0c\u53ef\u4ee5\u5229\u7528\u4e3b\u5e2d\u6811\u601d\u60f3\u3002\n\t\thjtTree(1,len,root[i],root[i],pre,-1);\n\t\thjtTree(1,len,root[i],root[i],now,1);\n\t\ti+=lowBit(i);\n\t}\n}\nint qx[MN],qy[MN];\nvoid queryTree(int x,int y)\n{\n\t//\u8bb0\u5f55BIT\u7684\u67e5\u8be2\u6811\u3002\n\tmemset(qx,0,sizeof(qx));\n\tmemset(qy,0,sizeof(qy));\n\tfor (;x;x-=lowBit(x)) qx[++qx[0]]=root[x];\n\tfor (;y;y-=lowBit(y)) qy[++qy[0]]=root[y];\n}\nint query(int l,int r,int x,int y,int k)\n{\n\tif (l==r) return l;\n\n\tint sumx=0,sumy=0;\n\tfor (int i=1;i<=qx[0];++i) sumx+=T[T[qx[i]].l].sum;\n\tfor (int i=1;i<=qy[0];++i) sumy+=T[T[qy[i]].l].sum;\n\t//\u4fdd\u5b58logn\u4e2a\u5408\u5e76\u3002\n\tint sum=sumy-sumx+T[T[y].l].sum-T[T[x].l].sum,mid=(l+r)/2;\n\n\tif (sum>=k)\n\t{\n\t\t//\u66f4\u65b0\u548c\u540c\u6b65\u3002\n\t\tfor (int i=1;i<=qx[0];++i) qx[i]=T[qx[i]].l;\n\t\tfor (int i=1;i<=qy[0];++i) qy[i]=T[qy[i]].l;\n\t\treturn query(l,mid,T[x].l,T[y].l,k);\n\t}\n\telse\n\t{\n\t\tfor (int i=1;i<=qx[0];++i) qx[i]=T[qx[i]].r;\n\t\tfor (int i=1;i<=qy[0];++i) qy[i]=T[qy[i]].r;\n\t\treturn query(mid+1,r,T[x].r,T[y].r,k-sum);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;++i) scanf(\"%d\",&a[i]),v.push_back(a[i]);\n\tfor (int i=1;i<=m;++i)\n\t{\n\t\tchar c[1]; //\u4e00\u5f00\u59cb\u8fd9\u91cc\u8bbe\u5927\u4e86\u8c03\u4e86\u597d\u4e45\u3002\n\t\tscanf(\"%s\",c);\n\t\tif (c[0]=='Q')\n\t\t{\n\t\t\tint x,y,z;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tqry[i]=(queryList){0,x,y,z};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x,t;\n\t\t\tscanf(\"%d%d\",&x,&t);\n\t\t\tqry[i]=(queryList){1,x,t,0};\n\t\t\tv.push_back(t);\n\t\t}\n\t}\n\t\n\tsort(v.begin(),v.end()),v.erase(unique(v.begin(),v.end()),v.end());\n\tlen=v.size();\n\t//\u5206\u4e24\u4e2a\uff0crem[1..n]\u8bb0\u539f\u59cb\u6570\u636e\uff0croot[1..n]\u8bb0\u4fee\u6539\u8def\u5f84\u3002\n\tfor (int i=1;i<=n;++i) hjtTree(1,len,rem[i],rem[i-1],getid(a[i]),1);\n\tfor (int i=1;i<=m;++i)\n\t{\n\t\tif (qry[i].c==0)\n\t\t{\n\t\t\tqueryTree(qry[i].x-1,qry[i].y);\n\t\t\t//\u6539\u7528getid\u7684\u65f6\u5019\u7528\uff0c\u4e0d\u6539\u7528\u7684\u65f6\u5019\u5343\u4e07\u4e0d\u8981\u7528\uff0c\u4e0d\u7136\u6837\u4f8b\u53ef\u80fd\u8fc7\u4e86\uff0c\u5176\u4ed6\u90fdWA\u3002\n\t\t\tprintf(\"%d\\n\",v[query(1,len,rem[qry[i].x-1],rem[qry[i].y],qry[i].z)-1]);\n\t\t}\n\t\telse change(qry[i].x,getid(qry[i].y)),a[qry[i].x]=qry[i].y;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1519462426,
        "uid": 31797,
        "name": "iyanhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": ">  [\u70b9\u51fb\u6b64\u5904](https://www.cnblogs.com/TaylorSwift13/p/11228276.html)\u83b7\u5f97\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u548c\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\n\n\u8fd9\u9053\u9898~~\u7b2c\u4e00\u6b21\u505a\u7684\u8bdd\u6709\u70b9\u96be\u7406\u89e3~~,\u6240\u4ee5\u672c\u849f\u84bb\u5199\u4e86\u4e00\u7bc7**\u9488\u5bf9\u521d\u5b66\u8005**\u7684\u8be6\u7ec6\u7684**\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811**\u7684\u9898\u89e3.\n\n## 1.\u524d\u7f6e\u77e5\u8bc6(\u90fd\u5b66\u5230\u6811\u5957\u6811\u4e86\u600e\u4e48\u53ef\u80fd\u4e0d\u4f1a)\n\n- \u524d\u7f00\u548c/\u6811\u72b6\u6570\u7ec4[LG3374**\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1**](https://www.luogu.org/problemnew/show/P3374)\n\n- \u666e\u901a\u7ebf\u6bb5\u6811[LG3372**\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1**](https://www.luogu.org/problemnew/show/P3372)/\u6743\u503c\u7ebf\u6bb5\u6811/\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n- \u4e3b\u5e2d\u6811\u6c42\u9759\u6001\u533a\u95f4K\u5c0f\u503c[LG3834**\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09**](https://www.luogu.org/problemnew/show/P3834)\n\n## 2.\u539f\u7406\n\n#### 2.1\u4ece\u4f4d\u7f6e\u5230\u503c\u57df\n\n\u5728\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e2a\u6570\u5217\u65f6,\u6211\u4eec\u901a\u5e38\u4f1a\u770b\u5230\u4e24\u79cd\u7ef4\u62a4\u65b9\u5f0f:\n\n##### 2.1.1\u7ef4\u62a4\u65b9\u5f0f$1$\n\n**\u4ee5\u4f4d\u7f6e\u4e3a\u4e0b\u6807,\u503c\u4e3a\u5185\u5bb9**,\u6bd4\u5982\u6700\u57fa\u7840\u7684\u7ebf\u6bb5\u6811,\u5f53\u6211\u4eec\u6267\u884c\u67e5\u8be2\u64cd\u4f5c,\u6bd4\u5982\u67e5\u8be2[3,8],\u5f97\u5230\u7684\u662f**\"\u539f\u6570\u5217\u4e2d\u7b2c3\u4e2a\u6570\u5230\u7b2c8\u4e2a\u6570\"**\u7684\u67d0\u4e9b\u4fe1\u606f(\u548c/\u6700\u503c)\u7b49.\n\n##### 2.1.2\u7ef4\u62a4\u65b9\u5f0f$2$\n\n**\u4ee5\u503c\u57df\u4e3a\u4e0b\u6807,\u503c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a\u5185\u5bb9**,\u6bd4\u5982\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9,\u5982\u679c\u67e5\u8be2[3,8],\u5f97\u5230\u7684\u7ed3\u679c\u662f**\u503c\u5728[3,8]\u5185\u7684\u6570\u7684\u51fa\u73b0\u6b21\u6570**.\n\n\u6211\u4eec\u628a\u91c7\u7528**\u7ef4\u62a4\u65b9\u5f0f$2$**\u7684\u7ebf\u6bb5\u6811\u53eb\u505a**\u6743\u503c\u7ebf\u6bb5\u6811**,\u6839\u636e**\u7ebf\u6bb5\u6811\u81ea\u5e26\u7684\"\u4e8c\u5206\"\u5c5e\u6027**(\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e8c\u5206\u4e3a\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9),\u6211\u4eec\u53ef\u4ee5\u7528**\u6743\u503c\u7ebf\u6bb5\u6811**\u6765\u6c42\u89e3**\u52a8\u6001\u5168\u5c40$K$\u5c0f\u503c**\u7684\u95ee\u9898.(~~\u4e0d\u77e5\u9053\u600e\u4e48\u6c42?\u590d\u4e60\u4e0b\u6743\u503c\u7ebf\u6bb5\u6811~~)\n\n#### 2.2\u4ece\u524d\u7f00\u548c\u5230\u6811\u72b6\u6570\u7ec4\n\n##### 2.2.1\u95ee\u9898$1$\n\n\u9996\u5148\u6765\u601d\u8003\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u95ee\u9898:\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217,**\u4e0d\u4fee\u6539**,\u591a\u6b21\u8be2\u95ee\u533a\u95f4\u548c,\u600e\u4e48\u505a?\n\n~~\u592a\u7b80\u5355\u4e86!\u524d\u7f00\u548c\u641e\u4e00\u641e\u5c31\u53ef\u4ee5\u4e86.~~\n\n\u5177\u4f53\u6765\u8bf4,\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4(\u8bb0\u4e3a$a$),$a_i$\u7ef4\u62a4\u7b2c$1$\u4e2a\u6570\u5b57\u5230\u7b2c$i$\u4e2a\u6570\u5b57\u7684\u548c,\u90a3\u4e48\u8981\u67e5\u8be2$[L,R]$\u8fd9\u4e2a\u533a\u95f4\u7684\u548c,\u53ea\u9700\u8981\u7528$a_R$\u51cf\u53bb$a_{L-1}$\u5c31\u53ef\u4ee5\u4e86.\n\n##### 2.2.2\u95ee\u9898$2$\n\n\u518d\u6765\u4e00\u4e2a\u95ee\u9898:\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217,**\u4e0d\u4fee\u6539**,\u591a\u6b21\u8be2\u95ee\u533a\u95f4\u7b2cK\u5c0f\u503c,\u600e\u4e48\u505a?\n\n\u6ca1\u9519!\u5c31\u662f\u9759\u6001\u533a\u95f4$K$\u5c0f,\u4e3b\u5e2d\u6811\u7684\u6a21\u677f\u9898!\n\n~~\u592a\u7b80\u5355\u4e86!~~\u4e3b\u5e2d\u6811\u641e\u4e00\u641e\u5c31\u53ef\u4ee5\u4e86!\n\n\u8fd9\u91cc\u5c31\u9700\u8981\u7406\u89e3**\u4e3b\u5e2d\u6811\u6c42\u9759\u6001\u533a\u95f4K\u5c0f\u503c**\u7684\u539f\u7406.\u5176\u5b9e\u5c31\u662f**\u524d\u7f00\u548c**\u7684\u601d\u60f3:\u5f00$n$\u9897**\u6743\u503c\u7ebf\u6bb5\u6811**,\u7b2c$i$\u9897\u7ef4\u62a4\u7b2c$1$\u4e2a\u6570\u5b57\u5230\u7b2c$i$\u4e2a\u6570\u5b57\u7684**\u503c\u57df**\u7684\u4fe1\u606f,\u90a3\u4e48\u8981\u67e5\u8be2$[L,R]$\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u7684$K$\u5c0f\u503c,\u53ea\u9700\u8981\u7528\u7b2c$R$\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u51cf\u53bb\u7b2c$L-1$\u9897\u6743\u503c\u7ebf\u6bb5\u6811,\u518d\u6309\u4e0a\u6587$2.1.2$\u7684\u601d\u8def\u6c42$[L,R]$\u533a\u95f4$K$\u5c0f\u503c.\n\n\u90a3\u5f00$n$\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u4f1a\u7206\u7a7a\u95f4\u600e\u4e48\u529e?\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\u5c31\u597d\u4e86.\n\n~~\u770b\u4e0d\u61c2?\u56de\u53bb\u590d\u4e60\u9759\u6001\u533a\u95f4$K$\u5c0f~~\n\n##### 2.2.3\u95ee\u9898$3$\n\n\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217,**\u8fb9\u4fee\u6539\u8fb9\u8be2\u95ee**,\u591a\u6b21\u8be2\u95ee\u533a\u95f4\u548c,\u600e\u4e48\u505a?\n\n~~\u592a\u7b80\u5355\u4e86!\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u548c\u641e\u4e00\u641e\u5c31\u53ef\u4ee5\u4e86.~~\n\n\u5177\u4f53\u6765\u8bf4,\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4(\u8bb0\u4e3a$c$),\u4e5f\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u7684\u90a3\u4e2a\u6570\u7ec4.\u5982\u679c\u8981\u67e5\u8be2$[1,i]$\u524d\u7f00\u548c,\u53ea\u9700\u8981\u628a\u4e0d\u591a\u4e8e$log_2i$\u4e2a$c$\u503c\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86.\u4fee\u6539\u65f6,\u4e5f\u53ea\u9700\u8981\u4fee\u6539\u4e0d\u591a\u4e8e$log_2i$\u4e2a$c$\u503c.\u590d\u6742\u5ea6$O(log_2n)$.\n\n~~\u770b\u4e0d\u61c2?\u56de\u53bb\u590d\u4e60\u6811\u72b6\u6570\u7ec4~~\n\n##### 2.2.4\u95ee\u9898$4$\n\n\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217,**\u8fb9\u4fee\u6539\u8fb9\u8be2\u95ee**,\u591a\u6b21\u8be2\u95ee\u533a\u95f4\u7b2cK\u5c0f\u503c,\u600e\u4e48\u505a?\n\n\u6ca1\u9519!\u5c31\u662f\u672c\u9898!\n\n\u7ed3\u5408$2.2.2$\u548c$2.2.3$\u7684\u601d\u60f3,\u6211\u4eec\u53ef\u4ee5\u5f00$n$\u9897\u6743\u503c\u7ebf\u6bb5\u6811,\u7528**\u6811\u72b6\u6570\u7ec4**\u7ef4\u62a4(**\u6743\u503c\u7ebf\u6bb5\u6811\u76f8\u5f53\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u8282\u70b9**).\n\n\u5982\u679c\u8981**\u67e5\u8be2**\u533a\u95f4$[1,i]$\u7684\u503c\u57df\u7684\u4fe1\u606f(\u4e5f\u5c31\u662f\u5404\u503c\u51fa\u73b0\u7684\u6b21\u6570,~~\u4e0d\u61c2?\u56de\u53bb\u590d\u4e60\u4e0b\u6743\u503c\u7ebf\u6bb5\u6811~~),\u53ea\u9700\u8981\u628a\u4e0d\u591a\u4e8e$log_2i$\u9897\u7ebf\u6bb5\u6811\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86.\u90a3\u4e48,\u5982\u679c\u8981\u67e5\u8be2\u533a\u95f4$[L,R]$ \u7684\u503c\u57df\u4fe1\u606f,\u6211\u4eec\u5148**\u628a$log_2i$\u9897\u7ebf\u6bb5\u6811\u52a0\u8d77\u6765**\u6c42$[1,R]$\u7684\u4fe1\u606f,\u518d\u628a**\u628a$log_2i$\u7ea7\u9897\u7ebf\u6bb5\u6811\u52a0\u8d77\u6765**\u6c42$[1,L-1]$\u7684\u4fe1\u606f,\u7136\u540e\u7528$[1,R]$\u7684\u4fe1\u606f\u51cf\u6389$[1,L-1]$\u7684\u4fe1\u606f,\u50cf$2.2.2$\u90a3\u4e48\u6c42\u5c31\u53ef\u4ee5\u4e86.(~~\u4e0d\u77e5\u9053\u600e\u4e48\u52a0\u6216\u8005\u600e\u4e48\u6c42?\u56de~~~~\u53bb\u8bfb$2.2.2$~~).\n\n**\u4fee\u6539**\u65f6,\u4e5f\u53ea\u9700\u8981\u4fee\u6539\u4e0d\u591a\u4e8e$log_2i$\u9897\u7ebf\u6bb5\u6811.\u4fee\u6539$1$\u9897\u7ebf\u6bb5\u6811\u82b1\u8d39\u65f6\u95f4$O(log_2n)$,\u90a3\u4e48$1$\u6b21**\u4fee\u6539**\u603b\u65f6\u95f4\u5c31\u662f$O(log_2^2n)$.\n\n\u4fee\u6539\u7684\u590d\u6742\u5ea6\u597d\u50cf\u5bf9\u4e86,\u4f46\u662f\u67e5\u8be2\u7684**\u76f8\u52a0**\u90a3\u4e00\u6b65,\u7d2f\u52a0$1$\u9897\u600e\u4e48\u7740\u4e5f\u5f97$O(n)$,\u8fd8\u8981\u7d2f\u52a0$log_2i$\u9897,\u5355\u6b21\u590d\u6742\u5ea6\u8fbe\u5230\u4e86$O(nlogn)$.\u600e\u4e48\u529e?\u4e0b\u4e00\u8282\u6211\u4eec\u518d\u8bf4.\n\n\u5230\u8fd9\u91cc,\u6211\u4eec\u4e5f\u89e3\u51b3\u4e86\u521a\u5b66\u6811\u72b6\u6570\u7ec4\u5957\u7ebf\u6bb5\u6811\u7684\u4eba(~~\u6bd4\u5982\u5f53\u65f6\u7684\u6211~~)\u5f88\u7ea0\u7ed3\u7684\u95ee\u9898\u2014\u2014**\u5185\u5c42\u7684\u7ebf\u6bb5\u6811\u5b58\u7684\u662f\u4ec0\u4e48**?\n\n\u6211\u95ee\u4f60:**\u6811\u72b6\u6570\u7ec4\u7684\u90a3\u4e2a\u6570\u7ec4**\u5b58\u7684\u662f\u4ec0\u4e48?\n\n\u662f\u4e0d\u662f\u4e00\u65f6\u8bed\u585e,**\u53ea\u53ef\u610f\u4f1a\u4e0d\u53ef\u8a00\u4f20**?\n\n\u6ca1\u9519,\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u5b58\u7684\u4e1c\u897f\u5c31\u7c7b\u4f3c\u4e8e\u90a3\u4e2a\u6570\u7ec4\u5b58\u7684\u4e1c\u897f.\n\n## 3.\u4ee3\u7801\u5b9e\u73b0\n\n#### 3.1\u79bb\u6563\u5316\n\n\u56e0\u4e3a\u5185\u5c42\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u662f\u503c\u57df\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316.**\u9700\u8981\u6ce8\u610f\u7684\u662f,\u8981\u628a\u4fee\u6539\u7684\u503c\u4e5f\u8f93\u5165\u8fdb\u6765,\u540c\u521d\u59cb\u6743\u503c\u4e00\u8d77\u79bb\u6563\u5316**.\n\n#### 3.2\u4fee\u6539\u64cd\u4f5c\n\n\u548c\u666e\u901a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u4fee\u6539\u4e00\u6837.\u5982\u679c\u8fdb\u5165\u7a7a\u8282\u70b9\u5219\u65b0\u5efa\u8282\u70b9.\u9009\u62e9\u8fdb\u5165\u4fee\u6539\u5de6\u53f3\u5b50\u6811\u4e4b\u4e00.\n\n##### 3.2.1\u4fee\u6539\u64cd\u4f5c\u793a\u4f8b\u4ee3\u7801\n\n```cpp\n   //\u5728\u5185\u5c42\u7ebf\u6bb5\u6811\u4e2d\n    void change(int &x,int L,int R,int Pos,int k)\n    {\n        if(x==0)x=++Tot;\n        v[x]+=k;\n        if(L==R)return;\n        int Mid=(L+R)>>1;\n        if(Pos<=Mid)change(LC[x],L,Mid,Pos,k);\n        else change(RC[x],Mid+1,R,Pos,k);\n    }\n   //\u5728\u5916\u5c42\u6811\u72b6\u6570\u7ec4\u4e2d\n\tvoid change(int p,int val,int v)\n    {\n        for(int i=p;i<=n;i+=i&-i)\n            SegmentTree.change(SegmentTree.Root[i],1,n,val,v);\n    }\n```\n\n##### 3.2.2\u6ce8\u610f\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f,~~\u5982\u679c\u4e0a\u9762\u7684\u5206\u6790\u770b\u61c2\u4e86\u7684\u8bdd~~,\u4f1a\u53d1\u73b0\u5916\u5c42\u7684\u6811\u72b6\u6570\u7ec4\u662f\u4ee5**\u4f4d\u7f6e**\u4e3a\u4e0b\u6807\u7684.\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u5916\u5c42\u6811\u72b6\u6570\u7ec4\u4fee\u6539\u65f6\u65e2\u9700\u8981\u4f20**\u4f4d\u7f6e\u7684\u4e0b\u6807**(\u4ee3\u7801\u91cc\u7684$p$),\u4e5f\u8981\u4f20**\u503c**(\u5373\u5185\u5c42\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807,\u4ee3\u7801\u91cc\u7684$val$)\u7684\u539f\u56e0.\n\n#### 3.3\u67e5\u8be2\u64cd\u4f5c:\u8bb0\u5f55\u8282\u70b9,\u73b0\u7b97\u73b0\u7528\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u8fd9$logn$\u9897\u7ebf\u6bb5\u6811\u7684\u548c,\u73b0\u5728\u6211\u4eec\u8981\u5229\u7528\u8fd9\u4e2a**\u548c\u7ebf\u6bb5\u6811**\u6765\u8ba1\u7b97\u7b54\u6848.\n\n\u5bb9\u6613\u53d1\u73b0,\u5728\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u65f6,\u6211\u4eec\u662f\u8fdb\u5165\u5b83\u7684\u5de6\u5b50\u8282\u70b9\u8fd8\u662f\u53f3\u5b50\u8282\u70b9,\u53ea\u4e0e**\u5de6\u5b50\u8282\u70b9\u7684\u5927\u5c0f\u4e0e$K$\u7684\u5927\u5c0f\u7684\u5173\u7cfb**\u6709\u5173(~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48?\u56de\u53bb\u770b\u4e3b\u5e2d\u6811\u6c42\u9759\u6001\u533a\u95f4K\u5c0f\u503c~~),**\u4e0e\u6811\u4e2d\u5176\u5b83\u4efb\u4f55\u8282\u70b9\u90fd\u65e0\u5173**,\u8fd9\u542f\u53d1\u6211\u4eec**\u5728\u8981\u7528\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u6570\u636e\u7684\u65f6\u5019,\u518d\u5bf9\u8fd9\u4e2a\u8282\u70b9\u6c42\u548c**.\u4e3e\u4e2a\u4f8b\u5b50,\u73b0\u5728\u6211\u4eec\u5728**\u5047\u60f3\u7684\u548c\u7ebf\u6bb5\u6811\u4e2d**\u5230\u4e86\u8282\u70b9$u$,\u9700\u8981\u901a\u8fc7$size[LC[u]]$\u7684\u5927\u5c0f\u6765\u5224\u65ad\u662f\u8fdb\u5165\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811,\u90a3\u4e48\u6211\u4eec**\u5f53\u573a**\u4ece\u90a3$logn$\u9897\u5b50\u6811\u4e2d**\u63ea\u51fa**\u5bf9\u5e94\u7684$LC[u]$\u8fd9\u4e2a\u8282\u70b9,**\u73b0\u573a\u6c42\u548c**,\u5e76\u5224\u65ad\u8fdb\u5165\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811.\n\n\u5982\u679c\u53ef\u4ee5\u5728$O(1)$\u65f6\u95f4\u5185**\u63ea\u51fa**,\u663e\u7136\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e5f\u662f$O(log_2^2n)$\u7684(\u8bbf\u95ee\u7ebf\u6bb5\u6811$O(logn)$,\u6bcf\u4e2a\u8282\u70b9\u6c42\u548c$O(logn)$).\n\n\u90a3\u4e48\u600e\u4e48\u4e2a**\u63ea**\u6cd5\u5462?\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u53ef\u4ee5\u60f3\u5230,\u6211\u4eec\u53ea\u9700\u8981\u5728\u5f00\u59cb\u904d\u5386\u8fd9\u9897\u5047\u60f3\u7684**\u548c\u7ebf\u6bb5\u6811**\u4e4b\u524d,\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u4e00\u4e0b\u8fd9$logn$\u9897\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9,\u5373\"**\u5e94\u8be5\u63ea\u51fa\u7684\u8282\u70b9\u7684\u7f16\u53f7**\",\u7136\u540e\u6bcf\u6b21\u8fdb\u5165\u5de6\u5b50\u6811\u65f6,\u628a\"**\u5e94\u8be5\u63ea\u51fa\u7684\u8282\u70b9\u7684\u7f16\u53f7**\"\u6307\u5411**\u5176\u5de6\u513f\u5b50**,\u8fdb\u5165\u53f3\u5b50\u6811\u5219\u6307\u5411\u5176\u53f3\u513f\u5b50.\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1$O(1)$**\u63ea\u51fa**\u4e86.\n\n\u6ca1\u770b\u61c2?\u518d\u6765\u770b\u56fe\u7247\u89e3\u91ca:![3.3.2\u914d\u56fe](https://cdn.luogu.com.cn/upload/pic/65155.png )\n\n![3.3.2\u914d\u56fe2](https://cdn.luogu.com.cn/upload/pic/65158.png )\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f,\u6211\u4eec\u73b0\u5728\u6c42\u7684\u662f$[L,R]$\u533a\u95f4,\u6240\u4ee5\u8981\u8fdb\u884c**\u73b0\u573a\u52a0\u4e0a$1...R$\u90a3$logn$\u9897\u5b50\u6811**\u548c**\u73b0\u573a\u51cf\u53bb$1...L-1$\u90a3$logn$\u9897\u5b50\u6811**\u4e24\u6b65\u64cd\u4f5c.\n\n**\u67e5\u8be2\u64cd\u4f5c\u793a\u4f8b\u4ee3\u7801**\n\n```cpp\n    //\u5185\u5c42\u7ebf\u6bb5\u6811\n\tint Query(int L,int R,int K)\n    {\n        if(L==R)return L;\n        int sum=0;\n        for(int i=1;i<=C1;i++)sum-=v[LC[X[i]]];//\u73b0\u573a\u51cf\u53bb1...L-1\u90a3logn\u9897\u5b50\u6811\n        for(int i=1;i<=C2;i++)sum+=v[LC[Y[i]]];//\u73b0\u573a\u52a0\u4e0a1...R\u90a3logn\u9897\u5b50\u6811\n \t\tif(K<=sum)//\u8fdb\u5165\u5de6\u5b50\u6811\n \t\t{\n            for(int i=1;i<=C1;i++)X[i]=LC[X[i]];\n            for(int i=1;i<=C2;i++)Y[i]=LC[Y[i]];\n            return Query(L,Mid,K);\t\n        }\n        else//\u8fdb\u5165\u53f3\u5b50\u6811\n \t\t{\n            for(int i=1;i<=C1;i++)X[i]=RC[X[i]];\n            for(int i=1;i<=C2;i++)Y[i]=RC[Y[i]];\n            return Query(Mid+1,R,K-sum);\t\t\t\t\n        }\n    } \n\t//\u5916\u5c42\u6811\u72b6\u6570\u7ec4\n    int Query(int L,int R,int K)\n    {\n        //\u9884\u5904\u7406\u9700\u8981\u67e5\u8be2\u54ealog(n)\u9897\u4e3b\u5e2d\u6811 \n        C1=C2=0;\n        for(int i=(L-1);i;i-=(i&-i))X[++C1]=SegmentTree.Root[i];\n        for(int i=R;i;i-=(i&-i))Y[++C2]=SegmentTree.Root[i];\n        //\"\u73b0\u7b97\u73b0\u7528\"\u67e5\u8be2\u533a\u95f4K\u5927 \n        return SegTree.Query(1,n,K);\n    }\n```\n\n## 4.\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define SIZE 200005 \n\nint n,m;\nint nx;\nint A[SIZE];//\u539f\u6570\u7ec4 \n//int B[SIZE];//\u79bb\u6563\u5316\u4e4b\u540e\u7684\u6570\u7ec4\nint Tem[SIZE];//\u79bb\u6563\u5316\u4e34\u65f6\u6570\u7ec4 \nint X[SIZE];//\u8ba1\u7b97\u7b2c[1...L-1]\u9897\u4e3b\u5e2d\u6811\u7684\u548c \u9700\u8981\u7d2f\u52a0\u7684\u4e3b\u5e2d\u6811\u7684\u7f16\u53f7\nint Y[SIZE];//\u8ba1\u7b97\u7b2c[1...R]\u9897\u4e3b\u5e2d\u6811\u7684\u548c \u9700\u8981\u7d2f\u52a0\u7684\u4e3b\u5e2d\u6811\u7684\u7f16\u53f7\nint C1;//\u8ba1\u7b97\u7b2c[1...L-1]\u9897\u4e3b\u5e2d\u6811\u7684\u548c \u9700\u8981\u7d2f\u52a0\u7684\u4e3b\u5e2d\u6811\u7684\u6570\u91cf\nint C2;//\u8ba1\u7b97\u7b2c[1...R]\u9897\u4e3b\u5e2d\u6811\u7684\u548c \u9700\u8981\u7d2f\u52a0\u7684\u4e3b\u5e2d\u6811\u7684\u6570\u91cf\n\n//\u79bb\u6563\u5316 \nvoid D()\n{\n    //for(int i=1;i<=n;i++)Tem[i]=A[i]; \n    sort(Tem+1,Tem+1+nx);\n    nx=unique(Tem+1,Tem+1+nx)-(Tem+1);\n    //for(int i=1;i<=n;i++)B[i]=lower_bound(Tem+1,Tem+1+nx,A[i])-Tem;\n} \n\n//\u5185\u5c42: \u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\nstruct SegTreeX\n{\n    int Tot,Root[SIZE*400],v[SIZE*400],LC[SIZE*400],RC[SIZE*400];\n    #define Mid ((L+R)>>1)\n    void Change(int &x,int L,int R,int Pos,int Val)\n    {\n        if(x==0)x=++Tot;\n        v[x]+=Val;\n        if(L==R)return;\n        if(Pos<=Mid)Change(LC[x],L,Mid,Pos,Val);\n        else Change(RC[x],Mid+1,R,Pos,Val);\n    }\n    int Query(int L,int R,int K)\n    {\n        if(L==R)return L;\n        int sum=0;\n        for(int i=1;i<=C1;i++)sum-=v[LC[X[i]]];\n        for(int i=1;i<=C2;i++)sum+=v[LC[Y[i]]];\n \t\tif(K<=sum)\n \t\t{\n            for(int i=1;i<=C1;i++)X[i]=LC[X[i]];\n            for(int i=1;i<=C2;i++)Y[i]=LC[Y[i]];\n            return Query(L,Mid,K);\t\n        }\n        else\n \t\t{\n            for(int i=1;i<=C1;i++)X[i]=RC[X[i]];\n            for(int i=1;i<=C2;i++)Y[i]=RC[Y[i]];\n            return Query(Mid+1,R,K-sum);\t\t\t\t\n        }\n    } \n}SegTree;\n\n//\u5916\u5c42\u6811\u72b6\u6570\u7ec4 \nstruct BITX\n{\n    void Change(int Pos,int Val)\n    {\n        int k=lower_bound(Tem+1,Tem+1+nx,A[Pos])-Tem;//\u79bb\u6563\u5316\u4e4b\u540e\u7684\u6743\u503c \u4e5f\u5c31\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u91cc\u7684\u4e0b\u6807\n        for(int i=Pos;i<=n;i+=i&(-i))SegTree.Change(SegTree.Root[i],1,nx,k,Val);\n    }\n    int Query(int L,int R,int K)\n    {\n        //\u9884\u5904\u7406\u9700\u8981\u67e5\u8be2\u54ealog(n)\u9897\u4e3b\u5e2d\u6811 \n        C1=C2=0;\n        for(int i=(L-1);i;i-=(i&-i))X[++C1]=SegTree.Root[i];\n        for(int i=R;i;i-=(i&-i))Y[++C2]=SegTree.Root[i];\n        //\"\u73b0\u7b97\u73b0\u7528\"\u67e5\u8be2\u533a\u95f4K\u5927 \n        return SegTree.Query(1,nx,K);\n    }\n}BIT;\n\nstruct Query\n{\n    int opp,Lx,Rx,k;\n}q[SIZE];\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){ scanf(\"%d\",&A[i]); Tem[++nx]=A[i]; }\n    char op[5];\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%s\",op);\n        if(op[0]=='Q'){ q[i].opp=1;\tscanf(\"%d%d%d\",&q[i].Lx,&q[i].Rx,&q[i].k); }\n        else { scanf(\"%d%d\",&q[i].Lx,&q[i].k); Tem[++nx]=q[i].k;}\n    } \n    D();//\u521d\u59cb\u6743\u503c\u548c\u4fee\u6539\u7684\u503c\u4e00\u8d77\u79bb\u6563\u5316\n    for(int i=1;i<=n;i++)BIT.Change(i,1);\n    for(int i=1;i<=m;i++)\n    {\n        if(q[i].opp==1)\n        {\n            printf(\"%d\\n\",Tem[BIT.Query(q[i].Lx,q[i].Rx,q[i].k)]);\n        }\n        else\n        {\n            BIT.Change(q[i].Lx,-1);\n            A[q[i].Lx]=q[i].k;\n            BIT.Change(q[i].Lx,1);\n        }\n    } \n    return 0;\n}\n```\n\n",
        "postTime": 1563802662,
        "uid": 108191,
        "name": "\u6cf0\u52d2\u65af\u5a01\u592b\u7279",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "### **\u4e00\u4e9b\u5947\u602a\u7684\u4e1c\u897f**\n\n\u8fd9\u4e2a\u5927\u6982\u662fluogu\u67d0\u9898\u76ee\uff0c\u7136\u800c\u6211\u592a\u83dc\u4e86\uff0c\u6240\u4ee5\u73b0\u5728\u624d\u4f1a\u505a\u3002\n\n\u8fd9\u4e2a\u9898\u76ee\u663e\u7136\u662f\u7531\u4e00\u4e9b\u9759\u6001\u7684\u4e1c\u897f\u884d\u751f\u800c\u6765\u7684\uff08\u6ca1\u9519\u5c31\u662f\u9759\u6001\u533a\u95f4K\u5927\u6570\uff09\n\n\u4e00\u4e9b\u9759\u6001\u548c\u52a8\u6001\u7684\u95ee\u9898\uff0c\u6211\u5217\u4e3e\u4e00\u4e0b\uff1a\n\n- \u9759\u6001\u533a\u95f4K\u5927\u6570\uff08\u6392\u4e2a\u5e8f\u5c31\u597d\u4e86\uff09\n\n- \u9759\u6001\u533a\u95f4K\u5927\u6570\uff08\u4e3b\u5e2d\u6811\u641e\u4e00\u641e\uff09\n\n- \u5f85\u4fee\u6539\u533a\u95f4K\u5927\u6570\uff08\u6211\u5c31\u8981\u8bb2\u7684\u8fd9\u4e2a\u561b\uff09\n\n- \u52a8\u6001\u533a\u95f4\u548c\uff08zkw\u7ebf\u6bb5\u6811/\u6734\u7d20\u7ebf\u6bb5\u6811/2\u4e2a\u6811\u72b6\u6570\u7ec4\uff09\n\n- \u9759\u6001\u533a\u95f4\u548c\uff08...\u524d\u7f00\u548c?\uff09\n\n\u7136\u540e\u662f\u5ba3\u4f20blog \uff1a[\u6413\u8fd9\u91cc](https://www.cnblogs.com/ljc20020730/p/10357196.html)\n\n### **\u6b65\u5165\u6b63\u9898**\n\n\u8bdd\u8bf4\u5e26\u4fee\u6539\u533a\u95f4K\u5927\u6570\uff08\u6ce8\u610f\u662f\u4fee\u6539\u800c\u5e76\u4e0d\u662f\u63d2\u5165\uff09\n\n\u663e\u7136\u6211\u4eec\u5982\u679c\u6309\u7167\u9759\u6001\u533a\u95f4K\u5927\u6570\u7684\u65b9\u6cd5\u641e\uff0c\u66b4\u529b\u66f4\u65b0\u6574\u68f5\u7ebf\u6bb5\u6811\u90a3\u4e48\u590d\u6742\u5ea6\u5c06\u662fO($ n log_2 n $ )\u4fee\u6539\u6bcf\u6b21\n\n\u60f3\u5230\u5355\u70b9\u4fee\u6539\u6c42\u524d\u7f00\u548c\u60f3\u5230\u6811\u72b6\u6570\u7ec4\u3002\u4e0d\u59a8\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u7f00\u548c\uff0c\n\n\u6362\u53e5\u8bdd\u8bf4\u8981\u60f3\u6c42\u5f97\u6bcf\u4e2a\u8282\u70b9\u5177\u4f53\u7684\u503c\uff0c\u90a3\u4e48\u5fc5\u987b\u5c06\u5c5e\u4e8e\u8fd9\u4e2a\u8282\u70b9\u7684$ log_2 n $\u4e2a\u8282\u70b9\u7684\u548c\u5168\u90e8\u7d2f\u52a0\uff0c\u624d\u662f\u8fd9\u4e2a\u8282\u70b9\u503c\u57df\u8303\u56f4\u5185\uff0c\u524d\u7f00\u63d2\u5165\u6570\u7684\u4e2a\u6570\n\n\u65e2\u7136\u6211\u4eec\u80fd\u6c42\u51fa\u5728\u7ebf\u6bb5\u6811\u67d0\u4e00\u8282\u70b9\u503c\u57df\u8303\u56f4\u5185\uff0c\u524d\u7f00\u63d2\u5165\u6570\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u6309\u7167\u548c\u9759\u6001\u533a\u95f4K\u5927\u6570\u7684\u7c7b\u4e8c\u5206\u67e5\u627e\uff08\u7528\u7ebf\u6bb5\u6811\u5bf9\u503c\u57df\u7684\u4e8c\u5206\u4ee3\u66ff\u6574\u4f53\u4e8c\u5206\uff09\u6765\u627e\u5230\u4e00\u4e2a\u5bf9\u4e8e\u7684\u6811\u6839\uff0c\u8f93\u51fa\u4ed6\u7684\u6807\u53f7\u5c31\u884c\u3002\n\n\u6240\u4ee5\uff0c\u6811\u72b6\u6570\u7ec4\u662f\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u7684\u662f\u8981\u60f3\u77e5\u9053\u5f53\u524d\u6bcf\u4e00\u8282\u70b9\u503c\u57df\u662f[L,R]\u524d\u7f00\u63d2\u5165\u6570\u7684\u4e2a\u6570\uff0c\u662f\u54ealog2 n\u4e2a\u8282\u70b9\u7684\u7d2f\u52a0\u548c\u3002\n\n\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u662fO($  log_2 ^ 2n $)\u6bcf\u6b21\u63d2\u5165\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u662f\u8fd9\u6837\u7528R\u7684\u524d\u7f00\u63d2\u5165\u6570\u7684\u4e2a\u6570\u51cf\u53bb(l-1)\u524d\u7f00\u63d2\u5165\u6570\u7684\u4e2a\u6570\uff0c\u5c31\u662f\u8be5\u8282\u70b9\u503c\u57df\u5728[L,R]\u533a\u95f4\u5185\u63d2\u5165\u6570\u7684\u4e2a\u6570\u3002\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e5f\u662f($  log_2 ^ 2n $)\u6bcf\u6b21\u67e5\u8be2\u3002\n\n\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n\u8bb0\u5f55\u90a3\u51e0\u4e2a\u70b9\u7684\u6570\u7ec4\uff08node_add\u548cnode_cut\u53ea\u9700\u5f00log2n\u4e2a\u5373\u53ef\uff09\uff0c\n\n\u7136\u540e\u79bb\u7ebf\u79bb\u6563\u5316\u4ee5\u540e\u5728\u7ebf\u505a\uff08\u5176\u5b9e\u548c\u5728\u7ebf\u6548\u679c\u4e00\u6837\uff09\uff0c\n\n\u7136\u540e\u79bb\u6563\u5316\u7684\u65f6\u5019\u5c3d\u91cf\u4e0d\u7528vector(\u4e0d\u597d\u4e60\u60ef)\n\n\u5bf9tmp[]\u79bb\u6563\u5316\uff0cT\u8bb0\u5f55\u79bb\u6563\u5316\u540e\u4e0b\u6807\n```\n    sort(tmp+1,tmp+1+tmp[0]);\n    T=unique(tmp+1,tmp+1+tmp[0])-tmp;\n```\n\u82e5\u8981\u67e5\u8be2\u67d0\u4e2a\u6570val\u79bb\u6563\u5316\u4ee5\u540e\u662f\u591a\u5c11\uff0c\u90a3\u4e48\u5c31\u662f\n```\n\tw=lower_bound(tmp+1,tmp+1+T,val)-tmp;\n```\n\u82e5\u8981\u67e5\u8be2\u67d0\u4e2a\u79bb\u6563\u5316\u540e\u7684\u6570kkk\u5b9e\u9645\u4e0a\u662f\u591a\u5c11\u90a3\u4e48\u76f4\u63a5\u8bbf\u95ee\u4e0b\u6807\n```\n\tw=o[kkk];\n```\n\n\u8fd8\u662f\u5f97\u89e3\u91ca\u4ee3\u7801\uff1a\n```\n# include <cstdio>\n# include <map>\n# include <algorithm>\n# include <vector>\n# include <cstring>\nusing namespace std;\nconst int N=1e5+10;\n# define lowbit(x) (x&(-x))\n# define lson t[rt].ls,l,mid\n# define rson t[rt].rs,mid+1,r\n# define mid ((l+r)>>1)\nint tmp[N<<1];\nstruct rec{\n    int l,r,k,o;\n}qes[N];\nstruct Seqment_Tree{\n    int ls,rs,val;\n}t[N*400];//\u6811\u5957\u6811\u7a7a\u95f4\u5f97\u5f00 n log n\nint node_cut[25],node_add[25]; //\u8fd9\u91cc\u53ea\u8981log n\u4e2a\u5c31\u884c\u540e\u9762memset\u4f1a\u6162\nint cnt_cut,cnt_add,tot;\nint root[N],a[N];\nint T,n,m;\ninline int read()\n{\n    int X=0,w=0; char c=0;\n    while(c<'0'||c>'9') {w|=c=='-';c=getchar();}\n    while(c>='0'&&c<='9') X=(X<<3)+(X<<1)+(c^48),c=getchar();\n    return w?-X:X;\n}\nvoid write(int x)\n{\n    if (x<0) x=-x,putchar('-');\n    if (x>9) write(x/10);\n    putchar('0'+x%10);\n}//I/O\u4f18\u5316\nvoid update(int &rt,int l,int r,int pos,int val)\n{\n    if (!rt) rt=++tot; //\u5982\u679c\u6b64\u65f6\u7684\u8bbf\u95ee\u7a7a\u7684\u8282\u70b9\u90a3\u4e48\u5efa\u7acb\u8282\u70b9\uff0c\u5426\u5219\u4f1a\u8986\u76d6\u6389\u539f\u6709\u8282\u70b9\u4fe1\u606f\uff08\u666e\u901a\u4e3b\u5e2d\u6811\u6700\u597d\u4e5f\u8fd9\u4e48\u5199,\u4f46\u662f\u6ca1\u5fc5\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u7a7a\u7684!!!\uff09\n    t[rt].val+=val;\n    if (l==r) return;\n    if (pos<=mid) update(lson,pos,val);\n    else update(rson,pos,val);\n}//\u666e\u901a\u4e3b\u5e2d\u6811\u7684\u66f4\u6539\u7ef4\u62a4\uff0c\u503c\u57df+1/-1\nvoid pre_update(int x,int val)\n{\n    int w=lower_bound(tmp+1,tmp+1+T,a[x])-tmp;\n    for (int i=x;i<=n;i+=lowbit(i)) update(root[i],1,T,w,val);\n}//\u9996\u5148\u5904\u7406\u51fa\u90a3\u51e0\u68f5\u7ebf\u6bb5\u6811\u7ba1\u8fd9\u4e2a\u6570\u7ec4\u7684\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u7684\uff0c\u7136\u540e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\nint query(int l,int r,int k)\n{\n    if (l==r) return l;\n    int ret=0;\n    for (int i=1;i<=cnt_add;i++)\n        ret+=t[t[node_add[i]].ls].val;\n    for (int i=1;i<=cnt_cut;i++)\n        ret-=t[t[node_cut[i]].ls].val; \n//\u8be5\u52a0\u7684\u52a0(r)\uff0c\u8be5\u51cf\u7684\u51cf(l-1)\n    if (k<=ret) {\n        for (int i=1;i<=cnt_add;i++)\n            node_add[i]=t[node_add[i]].ls;\n        for (int i=1;i<=cnt_cut;i++)\n            node_cut[i]=t[node_cut[i]].ls;\n        return query(l,mid,k);\n//\u4e0d\u8db3\u53f3\u8fb9\u4e0d\u53ef\u80fd\u5f80\u5de6\u8fb9\u641c\n    } else {\n        for (int i=1;i<=cnt_add;i++)\n            node_add[i]=t[node_add[i]].rs;\n        for (int i=1;i<=cnt_cut;i++)\n            node_cut[i]=t[node_cut[i]].rs;\n        return query(mid+1,r,k-ret);\n//\u8d85\u8fc7\u5de6\u8fb9\u4e0d\u53ef\u80fd\u5f80\u53f3\u8fb9\u641c\n    }\n}\nint pre_query(int l,int r,int k)\n{\n    memset(node_add,0,sizeof(node_add));\n    memset(node_cut,0,sizeof(node_cut));\n    cnt_add=cnt_cut=0;//\u6e05\u7a7a\n    for (int i=r;i;i-=lowbit(i)) node_add[++cnt_add]=root[i];\n//\u5904\u7406\u8be5\u52a0\u7684\u6839\u8282\u70b9\n    for (int i=l-1;i;i-=lowbit(i)) node_cut[++cnt_cut]=root[i];\n//\u5904\u7406\u8be5\u51cf\u7684\u6839\u8282\u70b9\n    return query(1,T,k);\n}\nint main()\n{\n    n=read();m=read();\n    for (int i=1;i<=n;i++)\n        tmp[++tmp[0]]=a[i]=read();\n    for (int i=1;i<=m;i++) {\n        char ch=0;\n        while (ch!='Q'&&ch!='C') ch=getchar();\n        if (ch=='Q') qes[i].l=read(),qes[i].r=read(),qes[i].k=read(),qes[i].o=1;\n        else qes[i].l=read(),tmp[++tmp[0]]=qes[i].r=read(),qes[i].o=0;\n    }\n    sort(tmp+1,tmp+1+tmp[0]);\n    T=unique(tmp+1,tmp+1+tmp[0])-tmp;\n    for (int i=1;i<=n;i++) pre_update(i,1);\n    for (int i=1;i<=m;i++) {\n        if (qes[i].o==1) {\n            write(tmp[pre_query(qes[i].l,qes[i].r,qes[i].k)]);\n            putchar('\\n');\n        } else {\n            pre_update(qes[i].l,-1);\n            a[qes[i].l]=qes[i].r;\n            pre_update(qes[i].l,1);\n        }\n    }\n    return 0;\n}\n```\n## \u6240\u4ee5\u5404\u4f4d\u5e26\u4fee\u6539\u533a\u95f4\u4e2d\u4f4d\u6570\u4f1a\u505a\u4e86\u5427\uff01\uff01\uff01",
        "postTime": 1549679137,
        "uid": 16456,
        "name": "ljc20020730",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    },
    {
        "content": "# \u4e3b\u5e2d\u6811\n\u6c42\u52a8\u6001\u533a\u95f4\u7b2ck\u5927\n\uff08\u7406\u8bba\u7a7a\u95f4\u590d\u6742\u5ea6nlogn^2\uff0c\u6240\u4ee5\u8981\u5f004000\u4e07\u7684\u6570\u7ec4\uff09\n\u7b2c\u4e00\u6b21\u63a5\u89e6\u6811\u5957\u6811\uff0c\u7b97\u662f\u9053\u6a21\u7248\u9898\u5427\n```\n//\u7a7a\u95f4\u590d\u6742\u5ea6n*logn*logn \n#include<bits/stdc++.h>\nusing namespace std;\n#define go(i,a,b) for(int i=(a);i<=(b);++(i))\n#define com(i,a,b) for(int i=(a);i>=(b);--(i))\n#define mem(a,b) memset((a),(b),sizeof(a))\n#define inf 0x3f3f3f3f\n#define fin freopen(\"input.txt\",\"r\",stdin)\n#define fout freopen(\"output.txt\",\"w\",stdout)\n#define lowbit(x) (x&-x)\nconst int maxn=100005;\nint n,m,q,cntl,cntr,len;\nint t[maxn],ls[maxn*400],rs[maxn*400],sum[maxn*400],prel[maxn],prer[maxn];\nint a[maxn],oder[maxn*2],cnt=0;\nstruct node{\n\tint x,y,k;\n}qs[maxn];\n\nvoid read(int &x){\n    int f=1;char s=getchar();x=0;\n    while(!isdigit(s)){\n    \tif(s=='-') f=-1;s=getchar();\n    }\n    while(isdigit(s)){\n   \t\tx=(x<<3)+(x<<1)+s-'0';s=getchar();\n    }\n    x*=f;\n}//\u8bfb\u5165\u4f18\u5316\n\nvoid update(int &rt,int l,int r,int pos,int val){\n\tif(!rt) rt=++cnt;\n\tsum[rt]+=val;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid) update(ls[rt],l,mid,pos,val);\n\telse update(rs[rt],mid+1,r,pos,val);\n}\n\nvoid add(int pos,int val){\n\tint k=lower_bound(oder+1,oder+len+1,a[pos])-oder;\n\tfor(int i=pos;i<=n;i+=lowbit(i)){\n\t\tupdate(t[i],1,len,k,val);\n\t}\n}\n\nint query(int l,int r,int k){\n\tif(l==r) return l;\n\tint tot=0,mid=(l+r)>>1;\n\tgo(i,1,cntl) tot-=sum[ls[prel[i]]];\n\tgo(i,1,cntr) tot+=sum[ls[prer[i]]];\n\tif(k<=tot){\n\t\tgo(i,1,cntl) prel[i]=ls[prel[i]];\n\t\tgo(i,1,cntr) prer[i]=ls[prer[i]];\n\t\treturn query(l,mid,k);\n\t}\n\telse{\n\t\tgo(i,1,cntl) prel[i]=rs[prel[i]];\n\t\tgo(i,1,cntr) prer[i]=rs[prer[i]];\n\t\treturn query(mid+1,r,k-tot);\n\t}\n}\n\nint get(int x,int y,int k){\n\tcntl=cntr=0;\n\tfor(int i=x-1;i>0;i-=lowbit(i)) prel[++cntl]=t[i];\n\tfor(int i=y;i>0;i-=lowbit(i)) prer[++cntr]=t[i];\n\treturn query(1,len,k);\n}\n\nint main()\n{\n    //fin;//fout;\n    read(n),read(m);\n    len=n;\n    go(i,1,n){\n    \tread(a[i]);oder[i]=a[i];\n\t}\n\tchar c;\n\tint x,y,k;\n\tgo(i,1,m){\n\t\tcin>>c;read(x),read(y);\n\t\tif(c=='Q'){\n\t\t\tread(k);\n\t\t\tqs[i]=(node){x,y,k};\n\t\t}\n\t\telse{\n\t\t\tqs[i]=(node){x,y,0};oder[++len]=y;\n\t\t}\n\t}\n\tsort(oder+1,oder+len+1);\n\tlen=unique(oder+1,oder+len+1)-oder-1;\n\tgo(i,1,n) add(i,1);\n\tgo(i,1,m){\n\t\t//go(j,1,n) printf(\"%d \",t[j]);\n\t\t//putchar('\\n');\n\t\tif(!qs[i].k){\n\t\t\tadd(qs[i].x,-1);\n\t\t\ta[qs[i].x]=qs[i].y;\n\t\t\tadd(qs[i].x,1);\n\t\t}\n\t\telse printf(\"%d\\n\",oder[get(qs[i].x,qs[i].y,qs[i].k)]);\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1554542993,
        "uid": 109434,
        "name": "\u98ce\u968f\u9010\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2617 \u3010Dynamic Rankings\u3011"
    }
]