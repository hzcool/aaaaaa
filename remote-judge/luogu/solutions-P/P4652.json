[
    {
        "content": "# P4652 [CEOI2017]One-Way Streets\n\n\u975e\u5e38\u7684\u663e\u7136\uff0c\u5728\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u4e2d\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u90fd\u6709\u81f3\u5c11\u4e24\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u7ebf\uff0c\u6240\u4ee5\u4e00\u4e2a\u8fb9\u53cc\u4e2d\u7684\u8fb9\u663e\u7136\u90fd\u662f\u65e0\u6cd5\u5b9a\u5411\u7684,\u6211\u4eec\u53ef\u4ee5\u5148\u8fb9\u53cc\u7f29\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u68f5\u6811(\u4e4b\u540e\u8bf4\u7684\u4e0a\u4e0b\u90fd\u662f\u6811\u4e0a\u7684\u65b9\u5411)\n\n\u6811\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u6bcf\u4e24\u4e2a\u70b9\u4e2d\u53ea\u6709\u4e00\u6761\u8def\u7ebf\uff0c\u5c31\u662f\u4ece\u5165\u53e3\uff0c\u8d70\u5230\u516c\u5171\u7956\u5148\uff0c\u7136\u540e\u8d70\u5230\u51fa\u53e3\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6c42 `LCA` \uff0c\u500d\u589e\u6cd5\u5c31\u53ef\u4ee5\u6c42\u3002\u7136\u540e\u7528\u4e00\u79cd\u5947\u602a\u7684\u65b9\u6cd5\u3002\u8bbe `up[i]` \u8868\u793a\u4ece\u8fd9\u4e2a\u70b9 `i` \u5411\u4e0a `up[i]` \u5c42\u7684\u65b9\u5411\u90fd\u662f\u4ece\u4e0b\u5f80\u4e0a\uff0c\u540c\u7406\uff0c`down[i]`\u8868\u793a\u4ece\u8fd9\u4e2a\u70b9 `i` \u5411\u4e0a `down[i]` \u5c42\u7684\u65b9\u5411\u90fd\u662f\u4ece\u4e0a\u5f80\u4e0b\u3002\u6211\u4eec\u6c42\u51fa `LCA` \u5c31\u53ef\u4ee5\u66f4\u65b0\u4e00\u4e0b\uff0c\u5c31\u662f\u770b `LCA` \u4e0e `x,y` \u6df1\u5ea6\u5dee\u662f\u5426\u5927\u4e8e\u672c\u8eab\u7684 `up` , `down` \u503c:(\u8bbe `l=LCA(x,y)` ) \n\n```\nup[x]=max(up[x],depth[x]-depth[l]),down[y]=max(down[y],depth[y]-depth[l]);\n```\n\n\u6700\u540e\u641c\u7d22\u4e00\u904d\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u4e0b\u65b9\u8fd9\u4e2a\u70b9 `up` \u4e0d\u7b49\u4e8e $0$ \uff0c\u5c31\u662f\u4ece\u4e0b\u5f80\u4e0a\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u540c\u65f6\u66f4\u65b0\u4e0a\u9762\u7684\u70b9\u7684 `up` , `down` \u5373\u53ef\u3002\n\n## Code\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint id,to;\n\tedge(int to_,int id_){\n\t\tto=to_,id=id_;\n\t}\n};\nvector<edge>vec[100005],vec1[100005];\nint n,m;\nint dfn[100005],low[100005],belong[100005],cnt,tot;\nbool instack[100005],vis[100005];\nstack<int>st;\nvoid tarjan(int x,int id){\n\tst.push(x);\n\tdfn[x]=low[x]=++tot;\n\tfor(int i=0;i<vec[x].size();i++){\n\t\tif(vec[x][i].id==-id)continue;\n\t\tif(!dfn[vec[x][i].to]){\n\t\t\ttarjan(vec[x][i].to,vec[x][i].id);\n\t\t\tlow[x]=min(low[x],low[vec[x][i].to]);\n\t\t}\n\t\telse low[x]=min(low[x],dfn[vec[x][i].to]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\tcnt++;\n\t\twhile(!st.empty()){\n\t\t\tint tp=st.top();\n\t\t\tbelong[tp]=cnt;\n\t\t\tst.pop();\n\t\t\tif(tp==x)break;\n\t\t}\n\t}\n}\nint depth[100005],k,dep;\nint f[100005][25];\nbool g[100005];\nvoid dfs(int u,int fa){\n\tg[u]=1;\n\tdepth[u]=depth[fa]+1;\n\tdep=max(depth[u],dep);\n\tf[u][0]=fa;\n\tfor(int j=1;;j++){\n\t\tf[u][j]=f[f[u][j-1]][j-1];\n\t\tif(f[u][j]==0){\n\t\t\tk=max(k,j-1);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=0;i<vec1[u].size();i++){\n\t\tif(vec1[u][i].to!=fa)dfs(vec1[u][i].to,u);\n\t}\n}\nint lca(int x,int y){\n\tif(x==y)return 0;\n\tif(depth[x]<depth[y])swap(x,y);\n\tfor(int j=k;j>=0;j--)\n\t\tif(depth[f[x][j]]>=depth[y])\n\t\t\tx=f[x][j];\n\tif(x==y)return x;\n\tfor(int j=k;j>=0;j--)\n\t\tif(f[x][j]!=f[y][j]){\n\t\t\tx=f[x][j],y=f[y][j];\t\t\t\n\t\t}\n\treturn f[x][0];\n}\nstruct dg{\n\tint now,fa;\n\tdg(int now_,int fa_){\n\t\tnow=now_,fa=fa_;\n\t}\n};\nint up[100005],down[100005];\nchar ans[100005];\nvoid s(int now,int fa){\n\tfor(int i=0;i<vec1[now].size();i++){\n\t\tint to=vec1[now][i].to,id=vec1[now][i].id;\n\t\tif(to==fa)continue;\n\t\ts(to,now);\n\t\tif(down[to]!=0){\n\t\t\tif(id<0)ans[-id]='L';\n\t\t\telse ans[id]='R';\n\t\t}\n\t\tif(up[to]!=0){\n\t\t\tif(id<0)ans[-id]='R';\n\t\t\telse ans[id]='L';\n\t\t}\n\t\tup[now]=max(up[now],up[to]-1);\n\t\tdown[now]=max(down[now],down[to]-1);\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tans[i]='B';\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tvec[x].push_back(edge(y,i));//i>0\u8868\u793a\u8f93\u5165\u65b9\u5411\u76f8\u540c\n\t\tvec[y].push_back(edge(x,-i));//i>0\u8868\u793a\u8f93\u5165\u65b9\u5411\u76f8\u53cd\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!dfn[i])tarjan(i,i);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=0;j<vec[i].size();j++){\n\t\t\tint to=vec[i][j].to;\n\t\t\tif(belong[to]==belong[i]);\n\t\t\telse{\n\t\t\t\tvec1[belong[i]].push_back(edge(belong[to],vec[i][j].id));\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=cnt;i++)if(!g[i])dfs(i,0);//\u53ef\u80fd\u6709\u5f88\u591a\u68f5\u6811 \n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(belong[x]==belong[y])continue;\n\t\tint l=lca(belong[x],belong[y]);\n\t\tx=belong[x],y=belong[y];\n\t\tup[x]=max(up[x],depth[x]-depth[l]);\n\t\tdown[y]=max(down[y],depth[y]-depth[l]);\n\t}\n\tfor(int i=1;i<=n;i++)if(depth[i]==1)s(i,0);\n\tfor(int i=1;i<=m;i++)putchar(ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1652959783,
        "uid": 301817,
        "name": "QZJ666",
        "ccfLevel": 7,
        "title": "P4652 [CEOI2017]One-Way Streets"
    },
    {
        "content": "\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7684\u7ed3\u8bba:\u5728\u540c\u4e00\u4e2a\u53cc\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u65b9\u5411\u65e0\u6cd5\u786e\u5b9a\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7f29\u70b9\uff0c\u7136\u540e\u5f97\u5230\u4e00\u4e2a\u68ee\u6797\u3002\n\n\u5bf9\u4e8e\u8981\u6c42\u7684\u65b9\u5411\uff0c\u591a\u5b9a\u4e49\u4e00\u4e2a$a$\u6570\u7ec4\uff0c\u5bf9\u4e8e\u8d77\u70b9$x$\uff0c$a[x]++$,\u7ec8\u70b9$y$\uff0c$a[y]--$\uff08\u542c\u8bf4\u8fd9\u4e2a\u64cd\u4f5c\u53eb\u6811\u4e0a\u5dee\u5206\uff09\u3002\n\n\u6bcf\u4e00\u70b9\u8d70\u5411\u7236\u8282\u70b9\u7684\u8fb9\u65b9\u5411\u53ef\u4ee5\u8bb0\u4f4f$a$\u6765\u5224\u65ad\u3002\n\n$a<0$\u5219\u5e94\u7531\u7236\u8282\u70b9\u8d70\u5411\u5b50\u8282\u70b9\n\n$a>0$\u5219\u5e94\u7531\u5b50\u8282\u70b9\u8d70\u5411\u7236\u8282\u70b9\n\n$a=0$\u5219\u65e0\u6cd5\u5224\u65ad\u65b9\u5411\u3002\n\n\u8d34\u4e0a\u9b3c\u755c\u7684\u4ee3\u7801\n\n```c\n#include<cstdio>\n#include<string>\n#include<cstring>\n#define R_ register\ninline int read() {\n\tint ret=0,f=1,ch=getchar();\n\tfor (; !isdigit(ch); ch=getchar()) if (ch=='-') f=-f;\n\tfor (; isdigit(ch); ch=getchar()) ret=ret*10+ch-48;\n\treturn ret*f;\n}\nconst int maxn=2e5+5;\nstruct edge {int son,nxt,id,s;} E[maxn],T[maxn];\nint top,tar,cnt,sta[maxn],dfn[maxn],low[maxn],bel[maxn];\nint N,M,P,tot=1,lnk[maxn],hed[maxn],Ans[maxn],vis[maxn],a[maxn];\ninline void add_edge(int y,int x,int id) {\n\tE[++tot].son=y,E[tot].nxt=lnk[x],lnk[x]=tot,E[tot].id=id,E[tot].s=+1;\n\tE[++tot].son=x,E[tot].nxt=lnk[y],lnk[y]=tot,E[tot].id=id,E[tot].s=-1;\n}\ninline void Add_edge(int x,int y,int id,int s) {\n\tT[++tot].son=y,T[tot].nxt=hed[x],hed[x]=tot,T[tot].id=id,T[tot].s=s;\n}\nvoid tarjan(int x,int pre=0) {\n\tdfn[x]=low[x]=++cnt,sta[++top]=x;\n\tfor (R_ int k=lnk[x],v; v=E[k].son,k; k=E[k].nxt) if (k^pre)\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v,k^1),low[x]=std::min(low[x],low[v]);\n\t\t\tif (low[v]>dfn[x]) {\n\t\t\t\tfor (++tar; sta[top]^v; ) bel[sta[top]]=tar,--top;\n\t\t\t\tbel[sta[top]]=tar,--top;\n\t\t\t}\n\t\t} else low[x]=std::min(low[x],dfn[v]);\n}\nvoid dfs(int x,int fa,int id,int s) {\n\tfor (R_ int k=hed[x],v; v=T[k].son,k; k=T[k].nxt) if (!vis[v])\n\t\tvis[v]=1,dfs(v,x,T[k].id,T[k].s),a[x]+=a[v];\n\tif (a[x]) Ans[id]=(a[x]*s<0?1:2);\n}\nint main() {\n\tR_ int i,k,x,y;\n\tfor (N=read(),M=read(),i=1; i<=M; ++i) add_edge(read(),read(),i);\n\tfor (i=1; i<=N; ++i) if (!dfn[i]) tarjan(i);\n\tif (top) for (++tar; top; --top) bel[sta[top]]=tar;\n\tfor (tot=i=1; x=bel[i],i<=N; ++i)\n\t\tfor (k=lnk[i]; y=bel[E[k].son],k; k=E[k].nxt)\n\t\t\tif (x^y) Add_edge(x,y,E[k].id,E[k].s);\n\tfor (P=read(),i=1; i<=P; ++i) ++a[bel[read()]],--a[bel[read()]];\n\tfor (i=1; i<=tar; ++i) if (!vis[i]) vis[i]=1,dfs(i,0,0,0);\n\tfor (i=1; i<=M; ++i) putchar(!Ans[i]?'B':(Ans[i]==1?'R':'L'));\n\treturn 0;\n}\n```\n~~\u6700\u540e\u5410\u69fd\u4e00\u53e5\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u9898\u662f\u9ed1\u9898\uff1f~~\n\n~~\u518d\u5410\u69fd\u4e00\u53e5\uff0c\u4e3a\u4ec0\u4e48\u65f6\u9650\u662f3\u79d2\uff1f\u603b\u65f6\u9650\u5417\uff1f~~",
        "postTime": 1540627408,
        "uid": 25545,
        "name": "ZZXB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4652 \u3010[CEOI2017]One-Way Streets\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n\u4ecb\u7ecd\u4e00\u79cd\u65e0\u9700\u7f29\u70b9\u800c\u76f4\u63a5\u4f7f\u7528 dfs \u6811\u7684\u529e\u6cd5\uff0c\u8dd1\u5f97\u4e5f\u6bd4\u8f83\u5feb\u3002\n\n# \u9898\u76ee\n\n[P4652 [CEOI2017]One-Way Streets](https://www.luogu.com.cn/problem/P4652)\n\n![](https://img2020.cnblogs.com/blog/2013965/202109/2013965-20210912220236844-1215430328.png)\n\n# \u5206\u6790\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8dd1\u51fa dfs \u6811\uff0c\u7136\u540e\u8003\u8651\u6240\u6709\u7684\u8fd4\u7956\u8fb9\uff1a\n\n\u8003\u8651\u5dee\u5206\u6765\u505a\uff0c\u56e0\u4e3a\u8fd9\u65f6\u4e00\u5b9a\u4f1a\u6784\u6210\u73af\uff0c\u800c\u73af\u4e0a\u7684\u8fb9\u65e0\u8bba\u671d\u5411\u54ea\uff0c\u73af\u4e0a\u7684\u70b9\u90fd\u662f\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73af\u4e0a\u70b9\u7684\u671d\u5411\u662f\u65e0\u6240\u8c13\u7684\uff0c\u4e5f\u5c31\u662f\u90fd\u662f $\\text{B}$ \u7c7b\u8fb9\uff0c\u6211\u4eec\u76f4\u63a5\u6811\u4e0a\u5dee\u5206\u6253 $\\text{B}$ \u7c7b\u6807\u8bb0\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u9898\u76ee\u7684\u9650\u5236\uff0c\u6211\u4eec\u76f4\u63a5\u6839\u636e\u9650\u5236\u7ed9\u51fa\u7684\u6761\u4ef6\u4e5f\u4e00\u6837\u5bf9 dfs \u6811\u4e0a\u6253\u5dee\u5206\u6807\u8bb0\uff0c\u5206\u522b\u662f\u201c\u671d\u4e0a\u201d\u548c\u201c\u671d\u4e0b\u201d\u6807\u8bb0\uff08\u6ce8\u610f\u8fd9\u91cc\u662f\u5bf9\u4e00\u6761\u8fb9\u7684\u513f\u5b50\u5904\u6253\u6807\u8bb0\uff0c\u540c\u65f6\u4e0d\u662f $\\text{L}$ \u548c $\\text{R}$ \u6807\u8bb0\u800c\u662f\u201c\u671d\u5411\u6807\u8bb0\u201d\uff09\n\n\u7136\u540e\u6211\u4eec\u518d\u5bf9\u6574\u4e2a\u6811 dfs \u4e00\u904d\u786e\u8ba4\u6811\u8fb9\u7684\u65b9\u5411\uff1a\n\n\u5982\u679c\u5df2\u7ecf\u6709\u4e86 $\\text{B}$ \u7c7b\u6807\u8bb0\uff0c\u90a3\u4e48\u76f4\u63a5\u628a\u8fd9\u6761\u8fb9\u53d8\u6210 $\\text{B}$ \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u7684\u60c5\u51b5\uff1a\n\n\u5982\u679c\u6709\u671d\u4e0a\u6216\u8005\u671d\u4e0b\u7684\u6807\u8bb0\uff0c\u90a3\u4e48\u5c31\u8981\u6839\u636e\u5f53\u524d\u8fb9\u7684\u65b9\u5411\u6765\u51b3\u5b9a\u5230\u5e95\u662f $\\text{L}$ \u8fd8\u662f $\\text{R}$ \u3002\n\n\u5982\u679c\u4ec0\u4e48\u6807\u8bb0\u90fd\u6ca1\u6709\uff0c\u8bf4\u660e\u8fd9\u6761\u8fb9\u4e5f\u53ef\u4ee5\u968f\u4fbf\u6807\u65b9\u5411\uff0c\u76f4\u63a5\u6807\u4e0a $\\text{B}$ \u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6c42 LCA \uff0c\u4e5f\u662f\u53ef\u4ee5\u4f18\u5316\u5230\u7ebf\u6027\u7684\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u6811\u5256\u6c42 LCA \uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\ninline void read(T &x){\n\tx=0;bool f=false;char ch=getchar();\n\twhile(!isdigit(ch)){f|=ch=='-';ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n\tx=f?-x:x;\n\treturn ;\n}\ntemplate <typename T>\ninline void write(T x){\n\tif(x<0) x=-x,putchar('-');\n\tif(x>9) write(x/10);\n\tputchar(x%10^48);\n\treturn ;\n}\n#define ll long long\n#define ull unsigned long long\n#define rep(i,x,y) for(int i=(x);i<=(y);i++)\n#define dep(i,y,x) for(int i=(y);i>=(x);i--)\nconst int N=2e5+5,M=2e5+5,MOD=1e9+7;\nint n,m,k;\nint head[N],to[N<<1],nex[N<<1],from[N],idx,fre[N],dir[N<<1];\nbool vis[N],vis1[N],visi[N<<1];\ninline void add(int u,int v,int w){nex[++idx]=head[u];from[idx]=u;to[idx]=v;head[u]=idx;dir[idx]=w;return ;}\nint dep[N],fa[N],siz[N],son[N],top[N],tag[N][3];\nchar Edge[N];\nvoid dfs1(int x,int f){\n\tdep[x]=dep[f]+1,fa[x]=f,siz[x]=1;\n\tfor(register int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(siz[y]) continue;fre[y]=i;visi[i]=visi[i+(dir[i]==0?1:-1)]=true;\n\t\tdfs1(y,x);siz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]]) son[x]=y;\n\t}\n\treturn ;\n}\nvoid dfs2(int x){\n\tif(x==son[fa[x]]) top[x]=top[fa[x]];\n\telse top[x]=x;\n\tif(son[x]) dfs2(son[x]);\n\tfor(register int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(!top[y]) dfs2(y);\n\t}\n\treturn ;\n}\ninline int QueryLca(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\treturn dep[u]<dep[v]?u:v;\n}\ninline bool IsTreeEdge(int id){return (fa[to[id]]==from[id])||(to[id]==fa[from[id]]);}\nvoid dfs(int x){\n\tvis1[x]=true;\n\tfor(register int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(vis1[y]) continue;\n\t\tdfs(y);\n\t\ttag[x][0]+=tag[y][0],tag[x][1]+=tag[y][1],tag[x][2]+=tag[y][2];\n\t}\n\tif(tag[x][0]) Edge[fre[x]]='B';\n\telse if(tag[x][1]) Edge[fre[x]]=dir[fre[x]]?'R':'L';\n\telse if(tag[x][2]) Edge[fre[x]]=dir[fre[x]]?'L':'R';\n\telse Edge[fre[x]]='B';\n\treturn ;\n}\nsigned main(){\n\tread(n),read(m);\n\tfor(register int i=1,u,v;i<=m;i++) read(u),read(v),add(u,v,0),add(v,u,1);\n\tfor(register int i=1;i<=n;i++) if(!siz[i]) fre[i]=idx+1,dfs1(i,0),dfs2(i);\n\tfor(register int i=1,lca;i<=idx;i++) if(!visi[i]) lca=QueryLca(from[i],to[i]),tag[from[i]][0]++,tag[to[i]][0]++,tag[lca][0]-=2,Edge[i]=(dir[i]?'B':'P');\n\tread(k);\n\tfor(register int i=1,u,v,lca;i<=k;i++){\n\t\tread(u),read(v);lca=QueryLca(u,v);\n\t\ttag[u][1]++,tag[v][2]++,tag[lca][1]--,tag[lca][2]--;\n\t}\n\tfor(register int i=1;i<=n;i++) if(!vis1[i]) dfs(i);\n\tfor(register int i=1;i<=idx;i++) if(Edge[i]=='B'||Edge[i]=='L'||Edge[i]=='R') putchar(Edge[i]);\n\treturn 0;\n}\n/*\n*/\n```\n",
        "postTime": 1631457659,
        "uid": 130387,
        "name": "_Anchor",
        "ccfLevel": 0,
        "title": "P4652 [CEOI2017]One-Way Streets\u9898\u89e3"
    },
    {
        "content": "\u6559\u7ec3\u6a21\u62df\u8d5b\u7684 T3\uff0c\u8d5b\u65f6\u65e0\u4eba AC\u3002\n\n\u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5728\u4e00\u4e2a E-DCC \u5185\uff0c\u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u90fd\u81f3\u5c11\u6709\u4e24\u6761\u8fb9\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\uff0c\u56e0\u6b64 E-DCC \u5185\u7684\u6240\u6709\u8fb9\u65b9\u5411\u90fd\u4e0d\u5b9a\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u6c42 E-DCC\uff0c\u56e0\u4e3a\u539f\u56fe\u4e0d\u4fdd\u8bc1\u8054\u901a\uff0c\u6240\u4ee5\u7f29\u5b8c\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u65b0\u56fe\u662f\u4e00\u4e2a\u68ee\u6797\u3002\n\n\u7136\u540e\u8003\u8651 $p$ \u6761 $u \\to v$ \u7684\u9650\u5236\uff1a\n\n- \u5982\u679c $u,v$ \u5728\u540c\u4e00\u4e2a E-DCC \u5185\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\u8fd9\u6761\u9650\u5236\uff1b\n- \u5982\u679c $u,v$ \u4e0d\u5728\u540c\u4e00\u4e2a E-DCC \u5185\uff0c\u8bbe $u$ \u6240\u5728\u7684 E-DCC \u4e3a $x$\uff0c$v$ \u6240\u5728\u7684 E-DCC \u4e3a $y$\uff0c\u90a3\u4e48\u5bf9\u4e8e $x\\to y$ \u5728\u65b0\u56fe\u4e2d\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u4e0a\u884c\u6807\u8bb0\u548c\u4e00\u4e2a\u4e0b\u884c\u6807\u8bb0\uff0c\u6700\u540e\u518d dfs \u4e00\u904d\u6c42\u51fa\u7b54\u6848\u3002\n\n\u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u6807\u8bb0\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u65b0\u56fe\u4e2d\u6811\u4e0a\u500d\u589e\u641e\u51fa $x,y$ \u7684 LCA\uff0c\u8bbe\u8fd9\u4e2a\u70b9\u4e3a $q$\uff0c\u90a3\u4e48\u4e00\u6761 $x \\to y$ \u7684\u8def\u5f84\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u62c6\u6210\u4e00\u6761 $x \\to q$ \u7684\u4e0a\u884c\u8def\u5f84\u548c\u4e00\u6761 $q \\to y$ \u7684\u4e0b\u884c\u8def\u5f84\uff0c\u7528\u5dee\u5206\u5206\u522b\u7ed9\u8fd9\u4e24\u6761\u8def\u5f84\u6253\u4e0a\u4e0a\u884c\u6807\u8bb0\u548c\u4e0b\u884c\u6807\u8bb0\u5373\u53ef\u3002\n\n\u7136\u540e\u8981\u6ce8\u610f\u7684\u662f\u6700\u540e dfs \u7684\u65f6\u5019\u4e00\u6761 $u \\to v$ \u7684\u8def\u5f84\u5e94\u8be5\u6839\u636e $v$ \u4e0a\u7684\u6807\u8bb0\u5b9a\u5411\u800c\u4e0d\u662f $u$ \u4e0a\u7684\u6807\u8bb0\u5b9a\u5411\u3002\u5efa\u56fe\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u5c0f trick\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u628a\u6b63\u8fb9\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u9ed8\u8ba4 $a_i \\to b_i$ \u4e3a\u6b63\u8fb9\uff09\u7684\u7f16\u53f7\u6807\u4e3a\u6b63\u6570\uff0c\u53cd\u8fb9\u7684\u7f16\u53f7\u6807\u4e3a\u8d1f\u6570\uff0c\u5982\u679c\u53cd\u8fb9\u5b9a\u4e86\u67d0\u4e00\u4e2a\u65b9\u5411\uff0c\u90a3\u4e48\u6b63\u8fb9\u5c31\u5b9a\u548c\u53cd\u8fb9\u76f8\u53cd\u7684\u65b9\u5411\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01\uff0c\u4f46\u662f\u56e0\u4e3a\u672c\u4eba\u592a\u83dc\u6240\u4ee5\u8c03\u4e86\u516b\u5343\u4e07\u5e74\u3002\u987a\u5e26\u4e00\u63d0\uff0c\u8fd9\u9898\u96be\u5ea6\u7edd\u5bf9\u4e0d\u5230\u9ed1\u3002\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define ll long long\nusing namespace std;\n\ninline int read() {\n\tint x = 0, w = 1;char ch = getchar();\n\twhile (ch > '9' || ch < '0') { if (ch == '-')w = -1;ch = getchar(); }\n\twhile (ch >= '0' && ch <= '9')x = x * 10 + ch - '0', ch = getchar();\n\treturn x * w;\n}\n\nconst int maxn = 1e5 + 5;\nconst int mod = 1e9 + 7;\nconst int inf = 1e9;\n\ninline int min(int x, int y) { return x < y ? x : y; }\ninline int max(int x, int y) { return x > y ? x : y; }\n\nint n, m, q, fat[maxn];\ninline int find(int x) {\n\treturn fat[x] == x ? x : fat[x] = find(fat[x]);\n}\n\nstruct node {\n\tint nxt, to, col;\n}edge[maxn << 1];\nint head[maxn], tot = 1, top, dfn[maxn], low[maxn];\nint tim, sta[maxn];\ninline void addedge(int u, int v, int col) {\n\tedge[++tot] = (node){head[u], v, col}, head[u] = tot;\n}\ninline void tarjan(int u, int fath) {\n\tdfn[u] = low[u] = ++tim;\n\tsta[++top] = u;\n\tfor (int i = head[u];i;i = edge[i].nxt) {\n\t\tint v = edge[i].to;\n\t\tif ((i ^ 1) == fath) continue;\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v, i), low[u] = min(low[u], low[v]); \n\t\t} else low[u] = min(low[u], dfn[v]);\n\t}\n\tif (dfn[u] == low[u]) {\n\t\tdo {\n\t\t\tint x = find(u), y = find(sta[top]);\n\t\t\tif (x != y) fat[x] = y; \n\t\t} while (sta[top--] != u);\n\t}\n}\n\nstruct node2 {\n\tint nxt, to, col;\n}edge2[maxn << 1];\nint tot2, head2[maxn], dep[maxn], fa[maxn][25];\ninline void addedge2(int u, int v, int col) {\n\tedge2[++tot2] = (node2){head2[u], v, col}, head2[u] = tot2;\n} \ninline void dfs(int u) {\n\tfor (int i = 0;fa[u][i];i++)\n\t\tfa[u][i + 1] = fa[fa[u][i]][i];\n\tfor (int i = head2[u];i;i = edge2[i].nxt) {\n\t\tint v = edge2[i].to;\n\t\tif (v == fa[u][0]) continue;\n\t\tdep[v] = dep[u] + 1, fa[v][0] = u;\n\t\tdfs(v);\n\t}\n}\ninline int getlca(int u, int v) {\n\tif(dep[u] > dep[v]) swap(u, v);\n\tfor(int i = 20;i >= 0;i--)\n\t\tif(dep[u] <= dep[v] - (1 << i)) v = fa[v][i];\n\tif(u == v) return u;\n\tfor(int i = 20;i >= 0;i--)\n\t\tif(fa[u][i] != fa[v][i])\n\t\t\tu = fa[u][i], v = fa[v][i];\n\treturn fa[u][0];\n}\n\nchar ans[maxn];\nint up[maxn], down[maxn], vis[maxn];\ninline void solve(int u) {\n\tvis[u] = 1;\n\tfor (int i = head2[u];i;i = edge2[i].nxt) {\n\t\tint v = edge2[i].to;\n\t\tif (v == fa[u][0]) continue;\n\t\tsolve(v), up[u] += up[v], down[u] += down[v];\n\t\tint col = edge2[i].col;\n\t\tif (up[v]) ans[abs(col)] = (col > 0 ? 'L' : 'R');\n\t\tif (down[v]) ans[abs(col)] = (col > 0 ? 'R' : 'L');\n\t}\n}\n\ninline void init() {\n\ttot = 1; tot2 = top = 0;\n\tmemset(edge, 0, sizeof(edge));\n\tmemset(edge2, 0, sizeof(edge2));\n\tmemset(head, 0, sizeof(head));\n\tmemset(head2, 0, sizeof(head2));\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(up, 0, sizeof(up));\n\tmemset(down, 0, sizeof(down));\n\tmemset(fa, 0, sizeof(fa));\n}\n\nint main(void) {\n\twhile (~scanf(\"%d %d\", &n, &m)) { init();\n\t\tfor (int i = 1;i <= n;i++) fat[i] = i;\n\t\tfor (int i = 1;i <= m;i++) {\n\t\t\tint u = read(), v = read(); ans[i] = 'B';\n\t\t\taddedge(u, v, i), addedge(v, u, -i);\n\t\t}\n\t\tfor (int i = 1;i <= n;i++) if (!dfn[i]) tarjan(i, 0);\n\t\tfor (int i = 1;i <= n;i++) {\n\t\t\tfor (int j = head[i];j;j = edge[j].nxt) {\n\t\t\t\tint u = find(i), v = find(edge[j].to);\n\t\t\t\tif (u != v) addedge2(u, v, edge[j].col);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1;i <= n;i++) if (!dep[i]) dep[i] = 1, dfs(i);\n\t\tq = read();\n\t\tfor (int i = 1;i <= q;i++) {\n\t\t\tint u = read(), v = read();\n\t\t\tif ((u = find(u)) == (v = find(v))) continue;\n\t\t\tint lca = getlca(u, v); \n\t\t\tup[u]++, up[lca]--, down[v]++, down[lca]--;\n\t\t}\n\t\tfor (int i = 1;i <= n;i++) if (!vis[i]) solve(i);\n\t\tputs(ans + 1);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1608907830,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4652 \u3010[CEOI2017]One-Way Streets\u3011"
    },
    {
        "content": "### \u9898\u89e3\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u9898\u76ee\u4e2d\u53ef\u4ee5\u5b9a\u5411\u7684\u8fb9\u4e00\u5b9a\u662f\u4e00\u4e2a\u70b9\u5bf9 $x_i$ \u5230 $y_i$ \u8def\u5f84\u4e0a\u7684\u5fc5\u7ecf\u8fb9\uff0c\u90a3\u4e48\u9898\u76ee\u5c31\u8f6c\u5316\u6210\u7ed9\u5b9a $p$ \u4e2a\u70b9\u5bf9\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u7684\u5fc5\u7ecf\u8fb9\u3002\n\n\u65e0\u5411\u56fe\u7684\u5fc5\u7ecf\u8fb9\u53ef\u4ee5\u7531\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u6c42\u51fa\u3002\u53ef\u4ee5\u628a\u539f\u56fe\u6bcf\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u6210\u4e00\u68f5\u6811\uff0c\u6811\u8fb9\u90fd\u662f\u5272\u8fb9\u3002\u7531\u5fc5\u7ecf\u8fb9\u7684\u5b9a\u4e49\u53ef\u77e5\u5fc5\u7ecf\u8fb9\u4e00\u5b9a\u662f\u5272\u8fb9\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u70b9\u5bf9 $x_i$ \u5230 $y_i$ \u8def\u5f84\u4e0a\u7684\u5fc5\u7ecf\u8fb9\u5c31\u662f\u4ece $x_i$ \u6240\u5728\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u5230$y_i$ \u6240\u5728\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u8def\u5f84\u4e0a\u6240\u7ecf\u8fc7\u7684\u8fb9\u3002\n\n\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\u6765\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\u3002\u8bbe\u70b9 $i$ \u6240\u5728\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e3a $c_i$\uff0c\u5e76\u589e\u52a0\u4e00\u4e2a\u7528\u6765\u8ba1\u7b97\u7b54\u6848\u7684\u70b9\u6743\u6570\u7ec4 $a_i$\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9 $x_i$ \u5230 $y_i$\uff0c\u4ee4 $a_{c_{x_i}}$ \u52a0\u4e00\uff0c$a_{c_{y_i}}$ \u51cf\u4e00\u3002\n\n\u8ba1\u7b97\u65f6\uff0c\u4ece\u5e95\u5411\u4e0a\u9012\u5f52\uff0c\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u7b49\u4e8e\u81ea\u8eab\u7684\u6743\u503c\u52a0\u4e0a\u6240\u6709\u5b50\u8282\u70b9\u7684\u70b9\u6743\u3002\u6700\u540e\u5982\u679c\u4e00\u4e2a\u70b9\u70b9\u6743\u4e3a\u8d1f\u5219\u8fd9\u4e2a\u70b9\u4e0e\u5176\u7236\u8282\u70b9\u7684\u8fde\u8fb9\u65b9\u5411\u4e3a\u4ece\u7236\u8282\u70b9\u5411\u8fd9\u4e2a\u70b9\u3002\u5982\u679c\u4e3a\u6b63\u5219\u65b9\u5411\u76f8\u53cd\u3002\u5426\u5219\u5982\u679c\u4e3a $0$ \u5219\u65e0\u6cd5\u786e\u5b9a\u65b9\u5411\u3002\n\n\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lveyvm5k.png)\n\n\u8bbe $\\operatorname{lca}(x_i,y_i)=p$\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ee4 $a_{c_{x_i}}$ \u52a0\u4e00\uff0c$a_{c_{y_i}}$ \u51cf\u4e00\u540e\uff0c\u5728\u9012\u5f52\u65f6\uff0c$x_i$ \u5230 $p$ \u8def\u5f84\u4e0a\u7684\u70b9\u7684\u70b9\u6743\u4f1a\u52a0\u4e00\uff0c$y_i$ \u5230 $p$ \u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u70b9\u6743\u4f1a\u51cf\u4e00\uff0c\u800c $p$ \u53ca\u4ee5\u4e0a\u7684\u8282\u70b9\u65e2\u6709 $x_i$ \u7684\u52a0\u4e00\uff0c\u53c8\u6709 $y_i$ \u7684\u51cf\u4e00\uff0c\u6070\u597d\u62b5\u6d88\u3002\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 $x_i$ \u5230 $y_i$ \u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6807\u8bb0\u3002\n\n------------\n### \u4ee3\u7801\n###### \u4ee3\u7801\u91cc\u6709\u6ce8\u91ca\n\n```cpp\n\n\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nstruct Graph { //\u56e0\u4e3a\u7f29\u70b9\u9700\u8981\u518d\u5f00\u4e00\u4e2a\u56fe\uff0c\u6240\u4ee5\u6700\u597d\u628a\u56fe\u653e\u5728\u7ed3\u6784\u4f53\u91cc\uff0c\u65b9\u4fbf\u7528\n    int h[100009];\n    int nxt[200009];\n    int to[200009];\n    int id[200009];\n    int idx;\n    inline void Init () {\n        idx = 0;\n        memset(h, -1, sizeof(h));\n    }\n    inline void Add (int a, int b, int ii) {\n        nxt[idx] = h[a], to[idx] = b, id[idx] = ii, h[a] = idx++;\n    }\n};\n\nint N;\nint M;\nint P;\nGraph A;\nint timestamp;\nint dfn[100009];\nint low[100009];\nint stk[100009];\nint tt;\nint dcc_cnt;\nint cid[100009];\nGraph dcc;\nint mark[100009];\nbool st[100009];\nchar res[100009];\n\ninline int Min (int a, int b) {\n    return a < b ? a : b;\n}\n\nvoid Tarjan (int x, int p) { //Tarjan\u6c42\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n    int v;\n\n    dfn[x] = low[x] = ++timestamp;\n    stk[++tt] = x;\n    for (int e = A.h[x]; ~e; e = A.nxt[e]) {\n        v = A.to[e];\n        if (!dfn[v]) {\n            Tarjan(v, e);\n            low[x] = Min(low[x], low[v]);\n        }\n        else if (e != (p ^ 1))\n            low[x] = Min(low[x], dfn[v]);\n    }\n    if (dfn[x] == low[x]) {\n        dcc_cnt++;\n        do {\n            v = stk[tt--];\n            cid[v] = dcc_cnt;\n        } while (v != x);\n    }\n}\n\ninline int Abs (int x) {\n    return x > 0 ? x : -x;\n}\n\nvoid Dfs (int x, int id, int s) { //x\u8868\u793a\u5f53\u524d\u70b9\uff0cid\u8868\u793a\u4ecex\u5411x\u7684\u7236\u8282\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\uff0cs\u8868\u793a\u8f93\u5165\u4e2d\u8fd9\u6761\u8fb9\u662f\u4ecex\u5411\u7236\u8282\u70b9(x=-1)\u8fd8\u662f\u4ece\u7236\u8282\u70b9\u5411x(x=1)\n    int v;\n\n    st[x] = true;\n    for (int e = dcc.h[x]; ~e; e = dcc.nxt[e]) {\n        v = dcc.to[e];\n        if (!st[v]) Dfs(v, Abs(dcc.id[e]), dcc.id[e] > 0 ? 1 : -1), mark[x] += mark[v]; //\u6c42\u70b9\u6743\n    }\n    if (mark[x]) res[id] = mark[x] * s < 0 ? 'R' : 'L';\n}\n\nint main () {\n    int a;\n    int b;\n    int v;\n\n    A.Init(), dcc.Init();\n    scanf(\"%d%d\", &N, &M);\n    for (int i = 1; i <= M; i++) {\n        scanf(\"%d%d\", &a, &b);\n        A.Add(a, b, i), A.Add(b, a, -i);\n    }\n    for (int i = 1; i <= N; i++)\n        if (!cid[i]) Tarjan(i, 0);\n    for (int i = 1; i <= N; i++) {\n        for (int e = A.h[i]; ~e; e = A.nxt[e]) {\n            v = A.to[e];\n            if (cid[i] != cid[v]) dcc.Add(cid[i], cid[v], A.id[e]);\n        }\n    }\n    scanf(\"%d\", &P);\n    while (P--) {\n        scanf(\"%d%d\", &a, &b);\n        mark[cid[a]]++, mark[cid[b]]--; //\u6807\u8bb0\n    }\n    for (int i = 1; i <= M; i++) res[i] = 'B'; //\u6ce8\u610f\u8fd9\u91cc\u8981\u521d\u59cb\u5316\n    for (int i = 1; i <= N; i++)\n        if (!st[i]) Dfs(i, 0, 0);\n    printf(\"%s\\n\", res + 1);\n    return 0;\n}\n```",
        "postTime": 1644130045,
        "uid": 224532,
        "name": "lyxeason",
        "ccfLevel": 5,
        "title": "[CEOI2017]One-Way Streets \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/16286912.html)\n\n\u5de7\u5999\u7684\u4e00\u9053\u9898\uff01\uff01\uff01\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u73b0\u5728\u60f3\u8981\u628a\u8fd9\u5f20\u56fe\u5b9a\u5411\u3002\n\n\u6709 $p$ \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u5f62\u5982 $(x_i,y_i)$\uff0c\u8868\u793a\u5728\u65b0\u7684\u6709\u5411\u56fe\u5f53\u4e2d\uff0c$x_i$ \u8981\u80fd\u591f\u6cbf\u7740\u4e00\u4e9b\u8fb9\u8d70\u5230 $y_i$\u3002\n\n\u73b0\u5728\u8bf7\u4f60\u6c42\u51fa\uff0c\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u662f\u5426\u80fd\u591f\u552f\u4e00\u786e\u5b9a\u3002\u540c\u65f6\u8bf7\u7ed9\u51fa\u8fd9\u4e9b\u80fd\u591f\u552f\u4e00\u786e\u5b9a\u7684\u8fb9\u7684\u65b9\u5411\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u6709\u89e3\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u4ec0\u4e48\u60c5\u51b5\u4e0b\u80fd\u591f\u5bf9\u4e00\u6761\u8fb9\u5b9a\u5411\u5462\uff1f\u9996\u5148\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u4e0d\u5b58\u5728\u4e8e\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff08\u5982\u679c\u5728\u8fde\u901a\u5206\u91cf\u4e2d\u5c31\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u65b9\u5411\u4e86\uff09\uff1b\u5176\u6b21\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u662f\u8def\u5f84 $x_i\\to y_i$ \u4e0a\u7684\u5fc5\u7ecf\u8fb9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u6574\u4e2a\u56fe $G$ \u8fdb\u884c\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u5f97\u5230\u65b0\u56fe $G'$\uff0c**$G'$ \u4e00\u5b9a\u662f\u68ee\u6797**\u3002$G$ \u4e2d $x_i\\to y_i$ \u4e0a\u7684\u5fc5\u7ecf\u8fb9\u4e5f\u5c31\u662f $G'$ \u4e2d $col[x_i]\\to col[y_i]$ \u4e0a\u7684\u5fc5\u7ecf\u8fb9\u3002\n\n\u7136\u540e\u5c31\u662f\u91cd\u70b9\u4e86\uff1a\u600e\u6837\u624d\u80fd\u5224\u65ad\u4e00\u6761\u5fc5\u7ecf\u8fb9\u7684\u65b9\u5411\u5462\uff1f\n\n\u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u666e\u901a\u7684\u8fb9\u5dee\u5206\u4fee\u6539\u65b9\u5f0f\u662f $tong[u]+1,tong[v]+1,tong[\\operatorname{lca(u,v)}]-1,tong[\\operatorname{fa(lca(u,v))}]-1$\uff0c\u53ef\u5728\u8fd9\u91cc\u7edd\u5bf9\u662f\u884c\u4e0d\u901a\u7684\u3002\u6211\u4eec\u9700\u8981\u5c06\u6811\u4e0a\u5dee\u5206\u6539\u6539\u3002\n\n\u4e0a\u56fe\uff1a\n\n![](https://s2.ax1x.com/2019/10/29/K227c9.png)\n\n\u5047\u8bbe\u6709\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\u4e3a $x_i=8,y_i=6$\u3002\u90a3\u4e48\u6211\u4eec\u770b\u770b $8\\to 6$ \u8fd9\u6761\u8def\u5f84\u3002\u9996\u5148 $8\\to 1$ \u8fd9\u4e00\u6bb5\u90fd\u662f\u4ece\u5b50\u8282\u70b9\u8fde\u5411\u7236\u8282\u70b9\u7684\u8fb9\uff0c\u800c $1\\to 6$ \u8fd9\u4e00\u6bb5\u90fd\u662f\u4ece\u7236\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\u7684\u8fb9\u3002\n\n\u65e2\u7136\u5982\u6b64\uff0c\u5982\u679c\u8bbe $f=\\operatorname{lca}(x_i,y_i)$\uff0c\u5219\u53ef\u4ee5\u5206\u4e3a\u4e24\u6bb5\uff1a$x_i\\to f,f\\to y_i$\u3002\u6240\u4ee5\u6211\u4eec\u5c06\u6811\u4e0a\u5dee\u5206\u6539\u4e3a $tong[x_i]+1,tong[y_i]-1$ \u5c31\u6ca1\u4e8b\u4e86\u3002\u6700\u540e\u8ba1\u7b97\u65f6\u91c7\u7528\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u5c31\u662f\u5176\u513f\u5b50\u8282\u70b9\u7684\u6743\u503c\u7684\u548c\u3002\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u70b9\u6743\u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u8be5\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u662f\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u65b9\u5411\u7684\uff1b\u5982\u679c\u4e00\u4e2a\u70b9\u70b9\u6743\u4e3a\u6b63\u6570\uff0c\u8bf4\u660e\u8be5\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u662f\u4ece\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u65b9\u5411\u7684\uff1b\u5982\u679c\u70b9\u6743\u4e3a $0$\uff0c\u8bf4\u660e\u65e0\u6cd5\u786e\u5b9a\u3002\u89e3\u91ca\u4e0a\u9762\u5df2\u7ecf\u8bf4\u8fc7\u3002\u6ce8\u610f\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5173\u5fc3 $tong$ \u6570\u7ec4\u5177\u4f53\u7684\u503c\u4e86\uff0c\u53ea\u5173\u6ce8\u5176\u6b63\u8d1f\u60c5\u51b5\u3002\n\n\u4e8e\u662f\u5bf9\u68ee\u6797\u4e2d\u7684\u6bcf\u4e00\u68f5\u6811\u90fd\u8fdb\u884c $\\rm dfs$ \u7edf\u8ba1\u7b54\u6848\uff0c\u7136\u540e\u5c31\u6ca1\u4e86\u3002\n\n-----\n\n\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u9053\u9898\u4e00\u5b9a\u9700\u8981\u77e5\u9053\uff1a\n\n> \u5982\u679c\u4e00\u4e2a\u70b9\u70b9\u6743\u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u8be5\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u662f\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u65b9\u5411\u7684\uff1b\u5982\u679c\u4e00\u4e2a\u70b9\u70b9\u6743\u4e3a\u6b63\u6570\uff0c\u8bf4\u660e\u8be5\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u662f\u4ece\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u65b9\u5411\u7684\uff1b\u5982\u679c\u70b9\u6743\u4e3a $0$\uff0c\u8bf4\u660e\u65e0\u6cd5\u786e\u5b9a\u3002\u89e3\u91ca\u4e0a\u9762\u5df2\u7ecf\u8bf4\u8fc7\u3002\u6ce8\u610f\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5173\u5fc3 $tong$ \u6570\u7ec4\u5177\u4f53\u7684\u503c\u4e86\uff0c\u53ea\u5173\u6ce8\u5176\u6b63\u8d1f\u60c5\u51b5\u3002\n\n# \u4ee3\u7801\n\n```cpp\n//2022/5/18\n#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <stack>\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\n\nconst int N = 1e5 + 5;\nstruct Graph {\n\tstruct Node {\n\t\tint v,id,nxt;\n\t\t//id:\u8fb9\u5728\u8f93\u5165\u4e2d\u7684\u7f16\u53f7\n\t} gra[N << 1];\n\tint head[N];\n\tint idx = 1;\n\tinline void add(int u,int v,int way) {\n\t\tgra[++ idx] = (Node){v,way,head[u]},head[u] = idx;\n\t}\n} g1,g2;\nint dfn[N],low[N],col[N],tong[N];\nchar res[N];\nbool in_stack[N],vis[N];\nstd::stack<int>st;\nint n,m,k,num,cnt;\ninline void tarjan(int now,int pre) {\n\tlow[now] = dfn[now] = ++ num,in_stack[now] = true;\n\tst.push(now);\n\tfor (register int i = g1.head[now];i;i = g1.gra[i].nxt) {\n\t\tif (i != (pre ^ 1)) {\n\t\t\tint v = g1.gra[i].v;\n\t\t\tif (!dfn[v]) {\n\t\t\t\ttarjan(v,i);\n\t\t\t\tlow[now] = std::min(low[now],low[v]);\n\t\t\t} else {\n\t\t\t\tlow[now] = std::min(low[now],dfn[v]);\n\t\t\t}\n\t\t}\n\t}\n\tif (dfn[now] == low[now]) {\n\t\tcnt ++;\n\t\tint u;\n\t\tdo {\n\t\t\tu = st.top();st.pop();\n\t\t\tin_stack[u] = false,col[u] = cnt;\n\t\t} while (u != now);\n\t}\n}\ninline int Abs(int x) {\n\treturn x > 0 ? x : -x;\n}\n//id:now <-> fa(now) \u7684\u7f16\u53f7\n//way = 1:now <- fa(now)\n//way = -1:now -> fa(now)\ninline void dfs(int now,int id,int way) {\n\tvis[now] = true;\n\tfor (register int i = g2.head[now];i;i = g2.gra[i].nxt) {\n\t\tint v = g2.gra[i].v;\n\t\tif (!vis[v]) {\n\t\t\tif (g2.gra[i].id > 0) {\n\t\t\t\tdfs(v,Abs(g2.gra[i].id),1);\n\t\t\t} else {\n\t\t\t\tdfs(v,Abs(g2.gra[i].id),-1);\n\t\t\t}\n\t\t\ttong[now] += tong[v];\n\t\t}\n\t}\n\tif (tong[now] != 0) {\n\t\tif (tong[now] * way > 0) {\n\t\t\tres[id] = 'L';\n\t\t} else {\n\t\t\tres[id] = 'R';\n\t\t}\n\t}\n}\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n#endif\n\tn = read(),m = read();\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tint u = read(),v = read();\n\t\t//u -> v \u662f\u6b63\u6570\n\t\t//v -> u \u662f\u8d1f\u6570\n\t\tg1.add(u,v,i),g1.add(v,u,-i);\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (!dfn[i]) {\n\t\t\ttarjan(i,-1);\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = g1.head[i];j;j = g1.gra[j].nxt) {\n\t\t\tint v = g1.gra[j].v;\n\t\t\tif (col[i] != col[v]) {\n\t\t\t\tg2.add(col[i],col[v],g1.gra[j].id);\n\t\t\t}\n\t\t}\n\t}\n\tk = read();\n\twhile (k --) {\n\t\tint u = read(),v = read();\n\t\ttong[col[u]] ++,tong[col[v]] --;\n\t}\n\tfor (register int i = 1;i <= m; ++ i) res[i] = 'B';\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (!vis[i]) {\n\t\t\tdfs(i,0,0);\n\t\t}\n\t}\n\tprintf(\"%s\\n\",res + 1);\n\n\treturn 0;\n}\n```",
        "postTime": 1652889642,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P4652 [CEOI2017]One-Way Streets"
    }
]