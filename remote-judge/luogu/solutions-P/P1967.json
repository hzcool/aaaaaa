[
    {
        "content": "#\u601d\u8def#\n\n\u9996\u5148\u4fbf\u662f\u60f3\u5230\u4e86Floyd\u7684\u66b4\u529b\u65b9\u6cd5\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u4e0d\u96be\u63a8\u51fa\uff1aw[i][j]=max(w[i][j], min(w[i][k],w[k][j]));\u4f46\u662f$n^3$\u6b21\u65b9\u65f6\u95f4\u590d\u6742\u5ea6\u548c$n^2$\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u663e\u7136\u4e0d\u53ef\u53d6\u7684\u3002\n\n\n\u4e8e\u662f\u6211\u4eec\u601d\u8003\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e9b\u6743\u503c\u8f83\u5c0f\u7684\u8fb9\u662f\u4e0d\u4f1a\u88ab\u8d70\u8fc7\u7684\u3002\u6b63\u5982\u6837\u4f8b\u4e2d\u7684\u7b2c\u4e09\u6761\u8fb9\uff0c\u5c31\u7b97\u6709\u5176\u4ed6\u7684\u5f88\u591a\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u65e0\u8bba\u5982\u4f55\u4e5f\u662f\u4e0d\u4f1a\u88ab\u8d70\u8fc7\u7684\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u4e86\u53ef\u4ee5\u5c06\u56fe\u4e2d\u8fd9\u6837\u7684\u8fb9\u53bb\u6389\uff0c\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u4fbf\u60f3\u5230\u4e86\u6784\u9020\u6700\u5927\u751f\u6210\u6811\uff0c\u5c06\u5176\u4f59\u7684\u8fb9\u53bb\u9664\u3002\n\n\n\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u8003\u8651\u5982\u4f55\u6c42\u51fa\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\uff08\u5373\u4e3a\u9898\u4e2d\u7684\u6700\u5927\u8f7d\u91cd\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa\u8fd9\u6761\u8def\u5f84\u4fbf\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7LCA\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u6c42LCA\u7684\u65b9\u6cd5\u662f\u5148\u4ece\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\u8fdb\u884c\u641c\u7d22\uff0c\u6c42\u51fa\u8282\u70b9\u6df1\u5ea6\u7b49\u4fe1\u606f\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u6811\u4e0a\u500d\u589e\u3002\n\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5927\u4f53\u601d\u8def\uff1a\u9996\u5148\u91cd\u65b0\u5efa\u56fe\uff0c\u6784\u9020\u51fa\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u6c42LCA\u6765\u56de\u7b54\u8be2\u95ee\u3002\n\n#\u4ee3\u7801#\n\n\n```cpp\n#include<cstdio>  \n#include<algorithm>  \n#include<cstring>  \n#include<iostream>  \n#define MAXN 10005 \n#define INF 999999999\nusing namespace std; \nstruct Edge1{  \n    int x,y,dis;\n}edge1[50005]; //\u9898\u76ee\u6240\u7ed9\u7684\u56fe \nstruct Edge2{\n    int to,next,w;\n}edge2[100005]; //\u6700\u5927\u751f\u6210\u6811\u7684\u56fe \nint cnt,n,m,head[MAXN],deep[MAXN],f[MAXN],fa[MAXN][21],w[MAXN][21];\n//f\u6570\u7ec4\u8868\u793a\u5e76\u67e5\u96c6\u4e2d\u7684\u7236\u8282\u70b9\uff0cfa\u6570\u7ec4\u8868\u793a\u6811\u4e0a\u7684\u7236\u8282\u70b9\uff0cw\u6570\u7ec4\u8868\u793a\u6700\u5927\u8f7d\u91cd \nbool vis[MAXN]; \n\nvoid addedge(int from, int to, int w)\n{ //\u524d\u5411\u661f\u5b58\u56fe \n    edge2[++cnt].next=head[from];\n    edge2[cnt].to=to;\n    edge2[cnt].w=w;\n    head[from]=cnt;\n    return ;\n}\n\nbool CMP(Edge1 x, Edge1 y)\n{\n    return x.dis>y.dis; //\u5c06\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n}\n\nint find(int x){  //\u5e76\u67e5\u96c6\u5bfb\u627e\u7236\u8282\u70b9 \n    if(f[x]!=x) f[x]=find(f[x]);\n    return f[x];\n}\n\nvoid kruskal()\n{\n    sort(edge1+1, edge1+m+1, CMP); \n    for(int i=1; i<=n; i++)\n        f[i]=i;  //\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n    for(int i=1; i<=m; i++)\n        if(find(edge1[i].x)!=find(edge1[i].y)){\n            f[find(edge1[i].x)]=find(edge1[i].y);\n            addedge(edge1[i].x, edge1[i].y, edge1[i].dis);\n            addedge(edge1[i].y, edge1[i].x, edge1[i].dis);  //\u65e0\u5411\u56fe\uff0c\u53cc\u5411\u52a0\u8fb9 \n        }\n    return ;\n}\n\nvoid dfs(int node)\n{\n    vis[node]=true;\n    for(int i=head[node]; i; i=edge2[i].next){ //\u524d\u5411\u661f\u904d\u5386 \n        int to=edge2[i].to;\n        if(vis[to]) continue;\n        deep[to]=deep[node]+1; //\u8ba1\u7b97\u6df1\u5ea6 \n        fa[to][0]=node; //\u50a8\u5b58\u7236\u8282\u70b9 \n        w[to][0]=edge2[i].w; //\u50a8\u5b58\u5230\u7236\u8282\u70b9\u7684\u6743\u503c \n        dfs(to);\n    }\n    return ;\n}\n\nint lca(int x, int y)\n{\n    if(find(x)!=find(y)) return -1; //\u4e0d\u8fde\u901a\uff0c\u8f93\u51fa-1 \n    int ans=INF;\n    if(deep[x]>deep[y]) swap(x,y); //\u4fdd\u8bc1y\u8282\u70b9\u66f4\u6df1 \n    //\u5c06y\u8282\u70b9\u4e0a\u63d0\u5230\u4e8ex\u8282\u70b9\u76f8\u540c\u6df1\u5ea6 \n    for(int i=20; i>=0; i--)\n        if(deep[fa[y][i]]>=deep[x]){\n            ans=min(ans, w[y][i]);  //\u66f4\u65b0\u6700\u5927\u8f7d\u91cd\uff08\u6700\u5c0f\u8fb9\u6743\uff09 \n            y=fa[y][i]; //\u4fee\u6539y\u4f4d\u7f6e \n        }\n    if(x==y) return ans; //\u5982\u679c\u4f4d\u7f6e\u5df2\u7ecf\u76f8\u7b49\uff0c\u76f4\u63a5\u8fd4\u56de\u7b54\u6848 \n    //\u5bfb\u627e\u516c\u5171\u7956\u5148 \n    for(int i=20; i>=0; i--)\n        if(fa[x][i]!=fa[y][i]){\n            ans=min(ans, min(w[x][i], w[y][i])); //\u66f4\u65b0\u6700\u5927\u8f7d\u91cd\uff08\u6700\u5c0f\u8fb9\u6743\uff09\n            x=fa[x][i]; \n            y=fa[y][i]; //\u4fee\u6539x,y\u4f4d\u7f6e \n        }\n    ans=min(ans, min(w[x][0], w[y][0]));\n    //\u66f4\u65b0\u6b64\u65f6x,y\u5230\u516c\u5171\u7956\u5148\u6700\u5927\u8f7d\u91cd\uff0cfa[x][0], fa[y][0]\u5373\u4e3a\u516c\u5171\u7956\u5148 \n    return ans;\n}\n\nint main()\n{\n    int x,y,z,q;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=m; i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        edge1[i].x=x;\n        edge1[i].y=y;\n        edge1[i].dis=z;\n    } //\u50a8\u5b58\u9898\u76ee\u6240\u7ed9\u56fe \n    kruskal();\n    for(int i=1; i<=n; i++)\n        if(!vis[i]){ //dfs\u6536\u96c6\u4fe1\u606f \n            deep[i]=1; \n            dfs(i);\n            fa[i][0]=i;\n            w[i][0]=INF;\n        }\n    //LCA\u521d\u59cb\u5316 \n    for(int i=1; i<=20; i++)\n        for(int j=1; j<=n; j++){\n            fa[j][i]=fa[fa[j][i-1]][i-1]; \n            w[j][i]=min(w[j][i-1], w[fa[j][i-1]][i-1]);\n        }\n    scanf(\"%d\",&q);\n    for(int i=1; i<=q; i++){\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",lca(x,y)); //\u56de\u7b54\u8be2\u95ee \n    }\n    return 0;\n} \n```",
        "postTime": 1516965110,
        "uid": 56316,
        "name": "crazydave",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5176\u5b9e\u662f\u4e2a\u7b80\u5355\u9898\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6700\u5927\u751f\u6210\u6811\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\n\n![](https://cdn.luogu.com.cn/upload/pic/30731.png)\n\n\u6bd4\u5982\u8fd9\u5f20\u56fe\u4e2d\uff0c$1 \\rightarrow 2, 1 \\rightarrow 3, 3\\rightarrow 2$\uff0c\u67093\u6761\u8fb9\uff0c\u7136\u540e\u8fb9\u6743\u5206\u522b\u4e3a$1,100,99$\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u8981\u667a\u5546\u6b63\u5e38\u7684\u53f8\u673a\uff0c\u4e3a\u4e86\u8ba9\u81ea\u5df1\u80fd\u8fc7\u901a\u8fc7\u8f7d\u8fd0\u66f4\u591a\u7684\u8d27\u7269\uff0c\u663e\u7136\u4f1a\u9009\u62e9\u8fb9\u6743\u4e3a$100$\u548c$99$\u7684\u4e24\u6761\u8fb9\uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa\u6211\u4eec\u8981\u6c42\u7684\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u53bb\u9664\u539f\u6765\u7684\u56fe\u4e2d\u8fb9\u6743\u6bd4\u8f83\u5c0f\u7684\u90a3\u4e9b\u8fb9\u3002\n\n\u7136\u540e\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\u6c42\u51fa\u4e00\u6bb5\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u7684\u8fb9\u6743\u3002\u56e0\u4e3a\u6211\u4e0d\u662f\u5f88\u4e60\u60ef\u500d\u589e\uff0c\u56e0\u6b64\u6211\u5c31\u6362\u4e86\u4e2a\u65b9\u6cd5\uff1a\n\n\u56e0\u4e3a\u6743\u503c\u5728\u8fb9\u4e0a\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u628a\u8fb9\u6743\u8f6c\u6362\u5230\u70b9\u6743\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u8f6c\u79fb\u8bb0\u5f55\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4e0a\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5411\u4e0a\u53ea\u6709\u4e00\u6761\u8fb9\uff0c\u5411\u4e0b\u53ef\u80fd\u6709\u591a\u6761\u8fb9\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u8fd8\u662f\u5bf9\u70b9\u64cd\u4f5c\u4e86\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6743\u503c\uff0c\u6211\u4eec\u8fdb\u884c\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u94fe\u4e0a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u8fd9\u6837\u505a\u8981\u5728\u67e5\u8be2\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u7ec6\u8282\u8981\u5904\u7406\uff1a\u5f53$top[x]==top[y]$\u7684\u65f6\u5019\uff0c$x \\text{\u4e0d\u4e00\u5b9a\u7b49\u4e8e}y$\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd9\u6837\u6211\u4eec\u8fd8\u9700\u8981\u67e5\u8be2$x$\u548c$y$\u4e4b\u95f4\u7684\u8fb9\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u8bb0\u5f55\u65b9\u5f0f\u662f\u628a\u8fb9\u503c\u8f6c\u79fb\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4e0a\uff0c\u6240\u4ee5y\u4e0b\u9762\u7684\u90a3\u6761\u8fb9\u8bb0\u5f55\u5728$son[y]$\u4e0a\uff0c\u7136\u540e\u8fd9\u6837\u5c31\u53ef\u4ee5\u67e5\u8be2\u4e86\u3002\n\n\u4e0d\u8fc7\u5462\u2026\u2026\u56e0\u4e3a\u9898\u76ee\u7684\u6570\u636e\u76f8\u5f53\u6bd2\u7624\uff0c\u6709\u4e9b\u65f6\u5019\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u56e0\u6b64\u6211\u52a0\u4e86\u5f88\u591a\u4e71\u4e03\u516b\u7cdf\u7684\u5224\u65ad\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728kruskal\u4e2d\u6c42\u751f\u6210\u6811\u7684\u65f6\u5019\u5bf9\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u8054\u901a\u5757\u7684\u5224\u65ad\u3002\u7136\u540e\u5728\u8fd9\u4e00\u4e9b\u4e71\u641e\u4e4b\u540e\u5c31\u8fc7\u4e86\u8fd9\u4e2a\u9898\u76ee\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <vector>\n\nusing namespace std;\n\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nconst int inf=1<<20;\n\nint n,m,p;\n\nstruct edge\n{\n\tint u,v,d;\n\tbool operator < (const edge &rhs) const\n\t{\n\t\treturn d>rhs.d;\n\t}\n}e[100050],E[100050];\n\nvector <int> g[100050],W[100050],G[100050];\n\nint fa[100050],depth[100050],top[100050],size[100050],son[100050],cnt,ide[100050];\n\nint color[100050],colsize[100050];\n\nbool usedcolor[100050];\n\nvoid Init()\n{\n\tfor (int i=1;i<=n;i++)\n\t\tfa[i]=i;\n}\n\nint Find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=Find(fa[x]);\n}\n\nvoid Kruskal(int col)\n{\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint x=e[i].u,y=e[i].v;\n\t\tint fx=Find(x),fy=Find(y);\n\t\tif (fx!=fy && color[fx]==col && color[fx]==color[fy]) //\u4fdd\u8bc1kruskal\u4e2d\u8fde\u7684\u8fb9\u5168\u90fd\u5728\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u9762 \n\t\t{\n\t\t\tp++;\n\t\t\tfa[fx]=fy;\n\t\t\tg[x].push_back(y);\n\t\t\tg[y].push_back(x);\n\t\t\tE[p].u=x;\n\t\t\tE[p].v=y;\n\t\t\tE[p].d=e[i].d;\n\t\t\tif (p==colsize[color[fx]]-1)\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvoid dfs1(int u,int p)\n{\n\tfa[u]=p;\n\tdepth[u]=depth[p]+1;\n\tsize[u]=1;\n\tfor (int i=0;i<g[u].size();i++)\n\t{\n\t\tint v=g[u][i];\n\t\tif (v!=p)\n\t\t{\n\t\t\tdfs1(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tif (size[v]>size[son[u]])\n\t\t\t\tson[u]=v;\n\t\t}\n\t}\n}\n\nvoid dfs2(int u,int fir)\n{\n\ttop[u]=fir;\n\tide[u]=++cnt;\n\tif (!son[u])\n\t\treturn;\n\tdfs2(son[u],fir);\n\tfor (int i=0;i<g[u].size();i++)\n\t{\n\t\tint v=g[u][i];\n\t\tif (v!=fa[u] && v!=son[u])\n\t\t\tdfs2(v,v);\n\t}\n}\n\nint a[100050];\n\nstruct SegTree\n{\n\tint l,r,val;\n}t[500050];\n\nvoid Push_Up(int id)\n{\n\tt[id].val=min(t[id<<1].val,t[id<<1|1].val);\n}\n\nvoid Build(int id,int l,int r)\n{\n\tt[id].l=l;\n\tt[id].r=r;\n\tif (l==r)\n\t{\n\t\tt[id].val=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(id<<1,l,mid);\n\tBuild(id<<1|1,mid+1,r);\n\tPush_Up(id);\n}\n\nint Query(int id,int l,int r)\n{\n\tif (t[id].l>=l && t[id].r<=r)\n\t\treturn t[id].val;\n\tint mid=(t[id].l+t[id].r)>>1;\n\tint ans=inf;\n\tif (mid>=l)\n\t\tans=min(ans,Query(id<<1,l,r));\n\tif (mid<r)\n\t\tans=min(ans,Query(id<<1|1,l,r));\n\treturn ans;\n}\n\nint LinkQuery(int x,int y)\n{\n\tint tx=top[x],ty=top[y];\n\tint ans=1<<20;\n\twhile (tx!=ty)\n\t{\n\t\tif (depth[tx]<depth[ty])\n\t\t{\n\t\t\tswap(tx,ty);\n\t\t\tswap(x,y);\n\t\t}\n\t\tans=min(ans,Query(1,ide[tx],ide[x]));\n\t\tx=fa[x];\n\t\ttx=top[x];\n\t}\n\tif (x!=y)\n\t{\n\t\tif (depth[x]<depth[y])\n\t\t\tswap(x,y);\n\t\tans=min(ans,Query(1,ide[son[y]],ide[x]));\n\t}\n\treturn ans;\n}\n\nvoid fill_color(int u,int pre,int col)\n{\n\tcolor[u]=col;\n\tcolsize[col]++;\n\tfor (int i=0;i<G[u].size();i++)\n\t\tif (G[u][i]!=pre && !color[G[u][i]])\n\t\t\tfill_color(G[u][i],u,col);\n}\n\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read(),d=read();\n\t\te[i].u=u;\n\t\te[i].v=v;\n\t\te[i].d=d;\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (!color[i])\n\t\t\tfill_color(i,0,i);\n\tsort(e+1,e+m+1);\n\tInit();\n\tfor (int i=1;i<=n;i++)\n\t\tif (!usedcolor[color[i]])\n\t\t{\n\t\t\tusedcolor[color[i]]=true;\n\t\t\tKruskal(color[i]);\n\t\t}\n\tfor (int i=1;i<=n;i++)\n\t\tfa[i]=0;\n\tfor (int i=1;i<=n;i++)\n\t\tif (!size[i])\n\t\t\tdfs1(i,0);\n\tfor (int i=1;i<=n;i++)\n\t\tif (!top[i])\n\t\t\tdfs2(i,i);\n\tfor (int i=1;i<=n;i++)\n\t\ta[i]=inf;\n\t//for (int i=1;i<=p;i++)\n\t//\tcout << E[i].u << \" \" << E[i].v << \" \" << E[i].d << endl;\n\tfor (int i=1;i<=p;i++)\n\t{\n\t\tif (depth[E[i].u]<depth[E[i].v])\n\t\t\tswap(E[i].u,E[i].v);\n\t\ta[ide[E[i].u]]=E[i].d;\n\t}\n\t//for (int i=1;i<=m;i++)\n\t//\tcout << a[i] << endl;\n\tBuild(1,1,n);\n\tint q=read();\n\twhile (q--)\n\t{\n\t\tint u=read(),v=read();\n\t\tif (color[u]!=color[v])\n\t\t\tputs(\"-1\");\n\t\telse\n\t\t\tprintf(\"%d\\n\",LinkQuery(u,v));\n\t}\n\treturn 0;\n}\n\n```\n\n\u7efc\u4e0a\u6240\u8ff0\uff1a\u672c\u9898\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u63d0\u9ad8\u7ec4day1t3\uff0c\u60f3\u5230\u6700\u5927\u751f\u6210\u6811\u4e4b\u540e\u5c31\u662f\u4e00\u4e2a\u88f8\u9898\uff0c\u4e00\u822c\u53ef\u4ee5\u57281\u5c0f\u65f6\u52301.5\u5c0f\u65f6\u5185\u505a\u5b8c\u3002",
        "postTime": 1535351997,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "## \u4e0d\u7528lca\n## \u4e0d\u7528lca\n## \u4e0d\u7528lca\n## \u8bb0\n\u505a\u5b8c\u4ee5\u540e\u770b\u4e86\u770b\u9898\u89e3\uff08\u6ca1\u6709\u5168\u90e8\u770b\u5b8c\uff09\uff0c\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u6700\u5927\u751f\u6210\u6811+lca\u505a\u7684\u3002\n\u7b80\u5355\u8d21\u732e\u4e00\u4e0b\u6211\u7684\u65b9\u6cd5\uff0c**\u5b9e\u73b0\u8d77\u6765\u8d85\u7b80\u5355**\uff0c\u6211\u505a\u7684\u65f6\u5019\u53ea\u7528\u4e86\u6700\u5927\u751f\u6210\u6811\u548cset\uff0c\u8fb9\u5efa\u6811\u8fb9\u56de\u7b54\u8be2\u95ee\u3002\n\n## \u9898\u89e3\n\u8981\u6c42x\u5230y\u6240\u6709\u7684\u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u957f\u7684\u6700\u5927\u503c\uff01\n\n\u6211\u4eec\u8d2a\u5fc3\u7684\u52a0\u8fb9\uff0c\u4f9d\u7167\u8fb9\u4ece\u5927\u5f80\u5c0f\u7684\u65b9\u5f0f\u5f80\u91cc\u6dfb\u52a0\uff0c\u7136\u540e\u5408\u5e76\u5e76\u67e5\u96c6\u3002\n\u6bcf\u6b21\u5f53\u67e5\u8be2\u5206\u5e03\u5728\u4e24\u4e2a\u5f85\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u7684\u65f6\u5019\uff0c\u5f53\u524d\u7684\u8fb9\u957f\u5c31\u662f\u8fd9\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u4fdd\u5b58\u7684\u5185\u5bb9\u5c31\u662f\u4e00\u4e2a\u70b9\u5728\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u800c\u53e6\u4e00\u4e2a\u70b9\u4e0d\u5728\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e2d\u7684\u8be2\u95ee\u7f16\u53f7\u3002\n\n\u5f53\u5f85\u5408\u5e76\u7684\u4e24\u4e2a\u5e76\u67e5\u96c6\u6240\u5177\u6709\u7684\u96c6\u5408\u91cc\u9762\u62e5\u6709\u76f8\u540c\u7684\u8be2\u95ee\u7f16\u53f7\u65f6\u5019\uff0c\u56de\u7b54\u8fd9\u4e2a\u8be2\u95ee\u7f16\u53f7\uff0c\u7136\u540e\u628a\u5c0f\u7684\u96c6\u5408\u5411\u5927\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5e76\u5c06\u56de\u7b54\u5b8c\u7684\u8be2\u95ee\u7f16\u53f7\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u3002\n\n\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++>\nusing namespace std;\nint n,m,q;\nset<int>::iterator it;\nconst int maxm = 50005;\nconst int maxn = 11111;\nset<int> Q[11111];\nstruct edge{\n    int u,v,cost;\n    friend bool operator <(edge e1,edge e2){\n        return e1.cost > e2.cost;\n    }\n}es[maxm];\nint ans[maxm];\nint parent[maxn];\nint find(int x){\n    return x == parent[x]?x:parent[x] = find(parent[x]);\n}\nint main(){\n    memset(ans,-1,sizeof(ans));\n    for(int i = 1;i < maxn;++i)\n        parent[i] = i;\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 0;i < m;++i)\n        scanf(\"%d%d%d\",&es[i].u,&es[i].v,&es[i].cost);\n    sort(es,es+m);\n    scanf(\"%d\",&q);\n    for(int i = 0;i < q;++i){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        Q[x].insert(i);\n        Q[y].insert(i);\n    }\n    for(int i = 0;i < m;++i){\n        int x = es[i].u,y = es[i].v,c = es[i].cost;\n        int px = find(x),py = find(y);\n        if(px == py) continue;\n        else{\n            if(Q[px].size() > Q[py].size())\n                swap(px,py);\n            vector<int> tmp;\n            for(it = Q[px].begin();it != Q[px].end();++it){\n                int id = *it;\n                if(Q[py].count(id)){\n                    ans[id] = c;\n                    tmp.push_back(id);\n                }\n                Q[py].insert(id);\n            }\n            for(int i = 0;i < tmp.size();++i)\n                Q[py].erase(tmp[i]);\n            parent[px] = py;\n        }\n    }\n    for(int i = 0;i < q;++i)\n        printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1521112362,
        "uid": 85503,
        "name": "phython",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u7248\n\n\u88f8\u7684\u6811\u4e0a\u95ee\u9898\u3002\u2014\u2014\u67d0\u795e\u7287\n\n\u8003\u8651\u6811\u94fe\u5256\u5206\uff08\u6216\u8005lct\u2014\u2014\u8fd8\u662f\u521a\u624d\u7684\u795e\u7287\uff09\uff0c\u672c\u8d28\u4e0a\u662f\u6c42\u9759\u6001\u6811\u4e0a\u6700\u5c0f\u8fb9\u6743\uff0c\uff08\u8fd9\u68f5\u6811\u8981\u7528\u6700\u5927\u751f\u6210\u6811\u6784\u5efa\uff09\uff0c\u628a\u5b83\u5256\u5206\u6210\u94fe\u4e4b\u540e\u7ef4\u62a4\u6700\u5c0f\u8fb9\u6743\u7684\u529e\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n        \n```cpp\n#include<bits/stdc++.h>\n#define N 500020\n#define inf 0x7f7f7f7f\n#define ll long long\nusing namespace std;\nstruct Edge{\n    int u,v,w,next;\n}G[N];\nint tot=0,head[4*N];\nint size[N],wson[N],fa[N],d[N],top[N];\nint tpos[N],pre[N],cnt=0;\nbool vis[500005];\nint a[N*4],maxv[N*4],minv[N*4];\ninline void addedge(int u,int v,int w){\n    G[++tot].v=v;G[tot].u=u;G[tot].next=head[u];head[u]=tot;G[tot].w=w;\n    G[++tot].v=u;G[tot].u=v;G[tot].next=head[v];head[v]=tot;G[tot].w=w;\n    //a[v]=w;\n}\nstruct Tree{\n    int u,v,w;\n    bool operator < (const Tree& x)const{\n        return w>x.w;}\n}T[N];\nint ff[N],n,m;\ninline void read(int &x){\n    x=0;int f=1;char ch;\n    do{ch=getchar();if (ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while (ch>='0'&&ch<='9');\n    x*=f;\n}\ninline void readl(long long &x){\n    x=0;int f=1;char ch;\n    do{ch=getchar();if (ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    x*=f;\n}\nint find(int x){\n    if (x==ff[x])return x;\n    else return ff[x]=find(ff[x]);\n}\nvoid Kruskal(){\n    sort(T+1,T+m+1);\n    for (int i=1;i<=n;i++)ff[i]=i;\n    for (int i=1;i<=m;i++){\n        int u=T[i].u,v=T[i].v,w=T[i].w;\n        int x=find(u),y=find(v);\n        if (x!=y)addedge(u,v,w),ff[ff[u]]=ff[v];\n    }\n    //for (int i=1;i<=n;i++)printf(\"MST f[%d]=%d\\n\",i,ff[i]);\n}\nvoid dfs1(int u,int father){\n    size[u]=1;\n    for (int i=head[u];i;i=G[i].next){\n        int v=G[i].v;\n        if (v==father)continue;\n        d[v]=d[u]+1;fa[v]=u;\n        a[v]=G[i].w;dfs1(v,u);\n        size[u]+=size[v];\n        if (size[v]>size[wson[u]])wson[u]=v;\n    }\n}\nvoid dfs2(int u,int TP){\n    tpos[u]=++cnt;pre[cnt]=u;top[u]=TP;\n    if (wson[u])dfs2(wson[u],TP);\n    for (int i=head[u];i;i=G[i].next){\n        int v=G[i].v;\n        if (v==fa[u]||v==wson[u])continue;\n        dfs2(v,v);\n    }\n}\nint LCA(int x,int y){\n    while (top[x]!=top[y]){\n        if (d[top[x]]<d[top[y]])swap(x,y);\n        x=fa[top[x]];\n    }\n    if (d[x]>d[y]) swap(x,y);\n    return x;\n}\ninline void pushup(int o){\n    maxv[o]=max(maxv[o*2],maxv[o*2+1]);\n    minv[o]=min(minv[o*2],minv[o*2+1]);\n}\nvoid build(int o,int l,int r){\n    int mid=(l+r)/2;\n    if (l==r){maxv[o]=minv[o]=a[pre[l]];return;}\n    build(o*2,l,mid);build(o*2+1,mid+1,r);\n    pushup(o);\n}\nint querymax(int o,int l,int r,int ql,int qr){\n    int mid=(l+r)/2,ans=-inf;\n    if (ql<=l&&r<=qr)return maxv[o];\n    if (ql<=mid)ans=max(ans,querymax(o*2,l,mid,ql,qr));\n    if (qr>mid)ans=max(ans,querymax(o*2+1,mid+1,r,ql,qr));\n    pushup(o);\n    return ans;\n}\nint querymin(int o,int l,int r,int ql,int qr){\n    if (l>r) return 2147483647;\n    int mid=(l+r)/2,ans=inf;\n    if (ql<=l&&r<=qr)return minv[o];\n    if (ql<=mid)ans=min(ans,querymin(o*2,l,mid,ql,qr));\n    if (qr>mid)ans=min(ans,querymin(o*2+1,mid+1,r,ql,qr));\n    //pushup(o);\n    return ans;\n}\nint qmax(int u,int v){\n    int ans=-inf;\n    while (top[u]!=top[v]){\n        if (d[top[u]]<d[top[v]])swap(u,v);\n        ans=max(ans,querymax(1,1,n,tpos[top[u]],tpos[u]));\n        u=fa[top[u]];\n    }\n    if (d[u]<d[v])swap(u,v);\n    ans=max(ans,querymax(1,1,n,tpos[v],tpos[u]));\n    return ans;\n}\nint qmin(int u,int v){\n    int ans=inf;\n    while (top[u]!=top[v]){\n        if (d[top[u]]<d[top[v]])swap(u,v);\n        ans=min(ans,querymin(1,1,n,tpos[top[u]],tpos[u]));\n        u=fa[top[u]];\n    }\n    if (d[u]<d[v])swap(u,v);\n    ans=min(ans,querymin(1,1,n,tpos[v]+1,tpos[u]));\n    return ans;\n}\nint main(){\n    memset(a,-1,sizeof(a));\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        T[i].u=u;T[i].v=v;T[i].w=w;\n    }\n    Kruskal();//cout<<\"!\"<<endl;\n    dfs1(1,0);//cout<<\"!\"<<endl;\n    dfs2(1,1);//cout<<\"!\"<<endl;\n    build(1,1,n);//cout<<\"!\"<<endl;\n    int q;\n    //for (int i=1;i<n;i++)printf(\"%d \",a[i]);\n    scanf(\"%d\",&q);\n    while (q--){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        int xx=find(x),yy=find(y);\n        //printf(\"root[%d]=%d root[%d]=%d\\n\",x,xx,y,yy);\n        if (xx!=yy)printf(\"-1\\n\");\n        else printf(\"%d\\n\",qmin(x,y));//printf(\"LCA is %d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1480819183,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "####update 8.31\n\n\u7f51\u4e0a\u8bb2\u89e3Kruskal\u91cd\u6784\u6811\u7684\u6bd4\u8f83\u5c11\uff0c\n\u81ea\u5df1\u5199\u4e86\u7bc7\u535a\u5ba2\u5bf9Kruskal\u91cd\u6784\u6811\u5c0f\u5c0f\u7684\u603b\u7ed3\u4e86\u4e00\u4e0b\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\n####[Kruskal\u91cd\u6784\u6811\u2014\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/niiick/article/details/81952126)\n\n\u535a\u5ba2\u8bb2\u89e3\u7ec6\u81f4\u4e00\u4e9b\uff0c\u4e0b\u9762\u7684\u6709\u6240\u7b80\u5316\n****************\n\u7ffb\u4e86\u51e0\u9875\u7adf\u7136\u90fd\u6ca1\u770b\u5230kruskal\u91cd\u6784\u6811???\n\n\u5f88\u7ecf\u5178\u7684Kruskal\u91cd\u6784\u6811\u5e94\u7528\u2014\u6c42**\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c**\n\n\u5728kruskal\u7684\u8fc7\u7a0b\u4e2d\n\n\u82e5\u5f53\u524d\u8fb9\u6240\u8fde\u4e24\u70b9u\u548cv\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u5185\n\n\u5219**\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9node\uff0c\u70b9\u6743\u4e3a\u8be5\u8fb9\u8fb9\u6743**\n\n\u7136\u540e\u8fde\u63a5**u\u6240\u5728\u96c6\u5408\u7684\u6839\u4e0enode**\u4ee5\u53ca**v\u6240\u5728\u96c6\u5408\u7684\u6839\u4e0enode**\n\n\u91cd\u6784\u5b8c\u6210\u4e4b\u540e\uff0c\u6307\u5b9a**\u6bcf\u4e2a\u96c6\u5408\u7684\u6839\u4f5c\u4e3a\u6240\u5728\u68ee\u6797\u7684\u6839**\n\n\u5219u\u5230v\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n\u5c31\u662f**LCA(u,v)\u7684\u70b9\u6743**\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\n\nint read()\n{\n    int f=1,x=0;\n    char ss=getchar();\n    while(ss<'0'||ss>'9'){if(ss=='-')f=-1;ss=getchar();}\n    while(ss>='0'&&ss<='9'){x=x*10+ss-'0';ss=getchar();}\n    return f*x;\n}\n\nconst int maxn=200010;\nint n,m,cnt;\nstruct node{int u,v,dis;}edge[maxn];\nbool cmp(node a,node b){return a.dis>b.dis;}\nstruct node2{int v,nxt;}E[maxn];\nint head[maxn],tot;\nint val[maxn],ff[maxn],vis[maxn];\nint fa[maxn],top[maxn],son[maxn];\nint size[maxn],dep[maxn];\n\nvoid add(int u,int v)\n{\n    E[++tot].nxt=head[u];\n    E[tot].v=v;\n    head[u]=tot;\n}\n\nint find(int x)\n{\n    if(x==ff[x])return x;\n    else return ff[x]=find(ff[x]);\n}\n\nvoid dfs1(int u,int pa)\n{\n    size[u]=1; vis[u]=1;\n    for(int i=head[u];i;i=E[i].nxt)\n    {\n        int v=E[i].v;\n        if(v==pa) continue;\n        dep[v]=dep[u]+1; fa[v]=u;\n        dfs1(v,u);\n        size[u]+=size[v];\n        if(size[v]>size[son[u]])son[u]=v;\n    }\n}\n\nvoid dfs2(int u,int tp)\n{\n    top[u]=tp;\n    if(son[u])dfs2(son[u],tp);\n    for(int i=head[u];i;i=E[i].nxt)\n    {\n        int v=E[i].v;\n        if(v==fa[u]||v==son[u])continue;\n        dfs2(v,v);\n    }\n}\n\nvoid kruskal()\n{\n    sort(edge+1,edge+1+m,cmp);\n    for(int i=1;i<=n;++i)ff[i]=i;\n    for(int i=1;i<=m;++i)\n    {\n        int fu=find(edge[i].u),fv=find(edge[i].v);\n        if(fu!=fv)\n        {\n            val[++cnt]=edge[i].dis;\n            ff[cnt]=ff[fu]=ff[fv]=cnt;\n            add(fu,cnt); add(cnt,fu);\n            add(fv,cnt); add(cnt,fv);\n        }\n    }\n    for(int i=1;i<=cnt;++i)//\u6ce8\u610f\u56fe\u53ef\u80fd\u662f\u4e2a\u68ee\u6797\n    if(!vis[i])\n    {\n        int f=find(i);\n        dfs1(f,0); dfs2(f,f);\n    }\n}\n\nint LCA(int u,int v)\n{\n    while(top[u]!=top[v])\n    {\n        if(dep[top[u]]>dep[top[v]])u=fa[top[u]];\n        else v=fa[top[v]];\n    }\n    return dep[u]<dep[v]?u:v;\n}\n\nint main()\n{\n    n=read();m=read();cnt=n;\n    for(int i=1;i<=m;i++)\n    edge[i].u=read(),edge[i].v=read(),edge[i].dis=read();\n    \n    kruskal();\n    int q=read();\n    while(q--)\n    {\n        int u=read(),v=read();\n        if(find(u)!=find(v))printf(\"-1\\n\");\n        else printf(\"%d\\n\",val[LCA(u,v)]);\n    }\n    return 0;\n    //niiick\n}\n```",
        "postTime": 1531981335,
        "uid": 60885,
        "name": "niiick",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u6b64\u9898\u5199\u6cd5\u86ee\u591a\u7684\uff0c\u500d\u589e\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5199\u6cd5\u60f3\u5fc5\u5927\u5bb6\u5df2\u7ecf\u4e86\u89e3\u4e86\uff0c\u672c\u4eba\u7a0d\u5fae\u63d0\u4e00\u4e0b\u597d\u4e86\u3002\n\n\u800c\u81f3\u4e8e\u6309\u79e9\u5408\u5e76\u548c\u6574\u4f53\u4e8c\u5206\u7684\u5199\u6cd5\uff0c\u672c\u4eba\u5c31\u7a0d\u5fae\u8be6\u7ec6\u5730\u8bb2\u89e3\u4e00\u4e0b\u3002\n## \u89e3\u6cd5\u4e00\uff1a\u751f\u6210\u6811+\u500d\u589e\n\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u6784\u5efa\u51fa\u82e5\u5e72\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8be2\u95ee\u5c31\u8f6c\u5316\u6210\u4e86\u6c42x\u5230y\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\u7528\u500d\u589e\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u4ee3\u7801:\n```c++\n#include<bits/stdc++.h>\n#define MAXN 100010\nusing namespace std;\nbool f;\nint n,m,q;\nstruct node {\n        int st,ed,v;\n} Edge[MAXN];\nint pre[MAXN];\nbool cmp(node A,node B) {\n        return A.v>B.v;\n}\nint Find(int x){\n        if(pre[x]==x)return x;\n        return pre[x]=Find(pre[x]);\n}\nstruct ______________{\n        vector<node>G[MAXN];\n        int F[MAXN][20],num[MAXN][20],lg[MAXN],deep[MAXN],root[MAXN];\n        bool mark[MAXN],vis[MAXN];\n        void DFS(int x,int fa,int val,int rt){\n                root[x]=rt;\n                F[x][0]=fa;\n                num[x][0]=val;\n                deep[x]=deep[fa]+1;\n                for(int i=1;(1<<i)<=deep[x];i++)F[x][i]=F[F[x][i-1]][i-1],num[x][i]=min(num[x][i-1],num[F[x][i-1]][i-1]);\n                for(int i=0;i<G[x].size();i++){\n                        int t=G[x][i].ed,val=G[x][i].v;\n                        if(t==fa)continue;\n                        DFS(t,x,val,rt);\n                }\n        }\n        int LCA(int x,int y){\n                if(deep[x]<deep[y])swap(x,y);\n                int res=2e9+7;\n                while(deep[x]>deep[y]){\n                        res=min(res,num[x][lg[deep[x]-deep[y]]-1]);\n                        x=F[x][lg[deep[x]-deep[y]]-1];\n                }\n                if(x==y)return res;\n                for(int i=lg[deep[x]]-1;i>=0;i--){\n                        if(F[x][i]==F[y][i])continue;\n                        res=min(res,num[x][i]);\n                        res=min(res,num[y][i]);\n                        x=F[x][i],y=F[y][i];\n                }\n                res=min(res,num[x][0]);\n                res=min(res,num[y][0]);\n                return res;\n        }\n        void work(){\n                for(int i=1;i<=MAXN-10;i++)lg[i]=lg[i-1]+((1<<lg[i-1])==i);\n                for(int i=1;i<=n;i++)pre[i]=i;\n                for(int i=1; i<=m; i++) {\n                        int x,y,z;\n                        scanf(\"%d %d %d\",&x,&y,&z);\n                        Edge[i]=node {x,y,z};\n                }\n                sort(Edge+1,Edge+1+m,cmp);\n                for(int i=1;i<=m;i++){\n                        int fx=Find(Edge[i].st),fy=Find(Edge[i].ed);\n                        if(fx==fy)continue;\n                        mark[Edge[i].st]=mark[Edge[i].ed]=true;\n                        pre[fx]=fy;\n                        G[Edge[i].st].push_back(node{0,Edge[i].ed,Edge[i].v});\n                        G[Edge[i].ed].push_back(node{0,Edge[i].st,Edge[i].v});\n                }\n                for(int i=1;i<=n;i++){\n                        if(!root[i]){\n                                DFS(i,0,0,i);\n                        }\n                }\n                scanf(\"%d\",&q);\n                for(int i=1;i<=q;i++){\n                        int x,y;\n                        scanf(\"%d %d\",&x,&y);\n                        if(root[x]!=root[y]){\n                                puts(\"-1\");\n                                continue;\n                        }\n                        printf(\"%d\\n\",LCA(x,y));\n                }\n        }\n}p100;\nbool ff;\nint main() {\n        scanf(\"%d %d\",&n,&m);\n        p100.work();\n        return 0;\n}\n```\n## \u89e3\u6cd5\u4e8c\uff1a\u5e76\u67e5\u96c6+\u542f\u53d1\u5f0f\u5408\u5e76\n\u5148\u628a\u8be2\u95ee\u6302\u5728\u70b9\u4e0a\uff0c\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\u4e0d\u8def\u5f84\u538b\u7f29\uff0c\u628a\u8be2\u95ee\u6570\u91cf\u5c0f\u7684\u70b9\u5411\u5927\u7684\u70b9\u5408\u5e76\uff0c\u540c\u65f6\u66f4\u65b0\u8be2\u95ee\u7b54\u6848\u3002\n\n\u4ee3\u7801:\n```c++\n#include<bits/stdc++.h>#define MAXN 100010using namespace std;\nint pre[MAXN],q,n,m,ans[MAXN];\nstruct node{\n        int st,ed,v;\n}Edge[MAXN];\nstruct Query{\n        int ed,id;\n};\nvector<Query> Q[MAXN];\nbool cmpEdge(node A,node B){\n        return A.v>B.v;\n}\nint Find(int x){\n        while(1){\n                if(pre[x]==x)return x;\n                x=pre[x];\n        }\n}\nvoid merge(int x,int y,int val){\n        int fx=Find(x),fy=Find(y);\n        if(fx==fy)return;\n        if(Q[fx].size()>Q[fy].size())swap(fx,fy);\n        pre[fx]=fy;\n        for(int i=0;i<Q[fx].size();i++){\n                int t=Q[fx][i].ed,id=Q[fx][i].id;\n                if(ans[id]!=-1)continue;\n                int ft=Find(t);\n                if(ft==fy)ans[id]=val;\n        }\n        for(int i=0;i<Q[fx].size();i++)Q[fy].push_back(Q[fx][i]);\n}\nint main() {\n        memset(ans,-1,sizeof(ans));\n        scanf(\"%d %d\",&n,&m);\n        for(int i=1;i<=m;i++){\n                int st,ed,v;\n                scanf(\"%d %d %d\",&st,&ed,&v);\n                Edge[i].st=st,Edge[i].ed=ed,Edge[i].v=v;\n        }\n        sort(Edge+1,Edge+1+m,cmpEdge);\n        scanf(\"%d\",&q);\n        for(int i=1;i<=q;i++){\n                int x,y;\n                scanf(\"%d %d\",&x,&y);\n                Q[x].push_back((Query){y,i});\n                Q[y].push_back((Query){x,i});\n        }\n        for(int i=1;i<=n;i++)pre[i]=i;\n        for(int i=1;i<=m;i++)merge(Edge[i].st,Edge[i].ed,Edge[i].v);\n        for(int i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);\n        return 0;\n}\n```\n## \u89e3\u6cd5\u4e09\uff1a\u6574\u4f53\u4e8c\u5206+\u5e76\u67e5\u96c6\n\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u662f\u4e8c\u5206\u8f7d\u91cd\u91cf\uff0c\u7136\u540e\u8fde\u63a5\u5927\u4e8e\u7b49\u4e8e\u8f7d\u91cd\u91cf\u7684\u8fb9\uff0c\u5224\u65adx,y\u662f\u5426\u8fde\u901a\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u5f88\u591a\u8be2\u95ee\u5462\uff1f\n\n\u8003\u8651\u5230\u5982\u679c\u8fd9\u4e9b\u8be2\u95ee\u7684mid\u503c\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\uff0c\u90a3\u4e48\u5f53\u524d\u8fde\u8fb9\u60c5\u51b5\u5c31\u53ef\u4ee5\u7531\u4e0a\u4e00\u4e2a\u76f4\u63a5\u8f6c\u79fb\u8fc7\u6765\uff08\u4e0d\u9700\u8981\u91cd\u65b0\u52a0\u8fb9\uff09\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06mid\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u518d\u67e5\u8fc7\u6765\uff0c\u540c\u65f6\u4e0d\u65ad\u52a0\u8fb9\u3002\n\n\u4ee3\u7801:\n```c++\n#include<bits/stdc++.h>#define MAXN 100010using namespace std;\nint pre[MAXN],q,n,m,Ans[MAXN];\nstruct node{\n        int st,ed,v;\n}Edge[MAXN];\nbool cmpEdge(node A,node B){\n        return A.v>B.v;\n}\nstruct Query{\n        int l,r,mid,ans,id,st,ed;\n}Q[MAXN];\nbool cmpQuery(Query A,Query B){\n        return A.mid>B.mid;\n}\nint Find(int x){\n        if(pre[x]==x)return x;\n        return pre[x]=Find(pre[x]);\n}\nvoid merge(int x,int y){\n        int fx=Find(x),fy=Find(y);\n        if(fx==fy)return;\n        pre[fx]=fy;\n}\nbool check(int x,int y){\n        int fx=Find(x),fy=Find(y);\n        return (fx==fy);\n}\nint main() {\n        scanf(\"%d %d\",&n,&m);\n        for(int i=1;i<=m;i++){\n                int st,ed,v;\n                scanf(\"%d %d %d\",&st,&ed,&v);\n                Edge[i].st=st,Edge[i].ed=ed,Edge[i].v=v;\n        }\n        sort(Edge+1,Edge+1+m,cmpEdge);\n        scanf(\"%d\",&q);\n        for(int i=1;i<=q;i++){\n                int x,y;\n                scanf(\"%d %d\",&x,&y);\n                Q[i]=(Query){1,100000,50000,-1,i,x,y};\n        }\n        int cnt=20;\n        while(cnt--){\n                for(int i=1;i<=n;i++)pre[i]=i;\n                for(int i=1;i<=q;i++)Q[i].mid=(Q[i].l+Q[i].r)>>1;\n                sort(Q+1,Q+1+q,cmpQuery);\n                for(int i=1,j=1;i<=q;i++){\n                        if(Q[i].l>Q[i].r)continue;\n                        while(Edge[j].v>=Q[i].mid&&j<=m){\n                                merge(Edge[j].st,Edge[j].ed);\n                                j++;\n                        }\n                        if(check(Q[i].st,Q[i].ed)){\n                                Q[i].ans=Q[i].mid;\n                                Q[i].l=Q[i].mid+1;\n                        }\n                        else Q[i].r=Q[i].mid-1;\n                }\n        }\n        for(int i=1;i<=q;i++)Ans[Q[i].id]=Q[i].ans;\n        for(int i=1;i<=q;i++)printf(\"%d\\n\",Ans[i]);\n        return 0;\n}\n```\n\n## \u89e3\u6cd5\u56db\uff1a\u5e76\u67e5\u96c6+\u6309\u79e9\u5408\u5e76\n\u8ddf\u7b2c\u4e00\u79cd\u5199\u6cd5\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u6784\u5efa\u6700\u5927\u751f\u6210\u6811\u65f6\u6211\u4eec\u4e0d\u8def\u5f84\u538b\u7f29\uff0c\u7528\u6309\u79e9\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u628a\u6df1\u5ea6\u5c0f\u7684\u70b9\u5408\u5e76\u5230\u5927\u7684\u70b9\u4e0a\u9762\u3002\n\n\u6ce8\u610f\u4e86\uff0c\u6b64\u65f6\u8fde\u8fb9\u5e76\u4e0d\u662f\u628a\u4e24\u4e2a\u70b9\u76f4\u63a5\u8fde\u8fb9\uff0c\u800c\u662f\u628a\u5b83\u4eec\u7684**\u7956\u5148**\u8fde\u8fb9\uff08\u8fb9\u6743\u8fd8\u662f\u4e00\u6837\uff09\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff1a\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u8fb9\u4ece\u5927\u5230\u5c0f\u52a0\u7684\uff0c\u800c\u8981\u67e5\u8be2\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u3002\u6b64\u65f6\uff0c\u8fd9\u6761\u8fb9\u628a\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c**\u90a3\u4e48\u4e00\u4e2a\u96c6\u5408\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u5fc5\u5b9a\u8981\u7ecf\u8fc7\u8fd9\u6761\u8fb9**\uff0c\u800c\u8fd9\u6761\u8fb9\u53c8\u662f\u76ee\u524d\u6700\u5c0f\u7684\uff08\u5176\u5b83\u8fb9\u53ef\u4ee5\u4e0d\u7ba1\u4e86\uff09\uff0c\u6240\u4ee5\u6211\u4eec**\u53ea\u7528\u786e\u4fdd\u8def\u5f84\u7ecf\u8fc7\u4e86\u8fd9\u6761\u8fb9**\u5373\u53ef\u3002\n\n\u6309\u7167\u8fd9\u6837\u6784\u6210\u7684\u751f\u6210\u6811\u6df1\u5ea6\u6700\u591a\u53ea\u6709log(n)\uff0c\u56e0\u6b64\u627e\u8def\u5f84\u66b4\u529b\u904d\u5386\u5373\u53ef\u3002\n\n\u4ee3\u7801:\n```c++\n\n#include<bits/stdc++.h>\n#define MAXN 100010\nusing namespace std;\nint n,m,q;\nstruct node {\n        int st,ed,v;\n} Edge[MAXN];\nint pre[MAXN],dis[MAXN],deep[MAXN],W[MAXN],root[MAXN];\nvector<node> G[MAXN];\nbool cmp(node A,node B) {\n        return A.v>B.v;\n}\nint Find(int x) {\n        while(1){\n                if(pre[x]==x)return x;\n                x=pre[x];\n        }\n}\nvoid merge(int x,int y,int v){\n        int fx=Find(x),fy=Find(y);\n        if(fx==fy)return;\n        if(dis[fx]>dis[fy])swap(fx,fy);\n        pre[fx]=fy;\n        if(dis[fx]==dis[fy])dis[fy]++;\n        G[fx].push_back((node){0,fy,v});\n        G[fy].push_back((node){0,fx,v});\n}\nvoid DFS(int x,int fa,int val,int k){\n        root[x]=k;\n        deep[x]=deep[fa]+1;\n        pre[x]=fa;\n        W[x]=val;\n        for(int i=0;i<G[x].size();i++){\n                int t=G[x][i].ed;\n                if(t==fa)continue;\n                DFS(t,x,G[x][i].v,k);\n        }\n}\nint LCA(int x,int y){\n        if(deep[x]<deep[y])swap(x,y);\n        int res=2e9+7;\n        while(deep[x]>deep[y])res=min(res,W[x]),x=pre[x];\n        while(x!=y){\n                res=min(res,W[x]),res=min(res,W[y]);\n                x=pre[x],y=pre[y];\n        }\n        return res;\n}\nint main() {\n        scanf(\"%d %d\",&n,&m);\n        for(int i=1; i<=n; i++)pre[i]=i;\n        for(int i=1; i<=m; i++) {\n                int x,y,z;\n                scanf(\"%d %d %d\",&x,&y,&z);\n                Edge[i]=(node) {x,y,z};\n        }\n        sort(Edge+1,Edge+1+m,cmp);\n        for(int i=1;i<=m;i++){\n                merge(Edge[i].st,Edge[i].ed,Edge[i].v);\n        }\n        for(int i=1;i<=n;i++){\n                if(!root[i])DFS(i,0,0,i);\n        }\n        scanf(\"%d\",&q);\n        for(int i=1; i<=q; i++) {\n                int x,y;\n                scanf(\"%d %d\",&x,&y);\n                if(root[x]!=root[y]) {\n                        puts(\"-1\");\n                        continue;\n                }\n                printf(\"%d\\n\",LCA(x,y));\n        }\n        return 0;\n}\n```",
        "postTime": 1565500980,
        "uid": 54298,
        "name": "\u7cea\u773e\u8126\u98b0\u7f77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u7ec8\u4e8e\u628a\u8fd9\u9898\u5207\u4e86\u3002\u3002\u767e\u611f\u4ea4\u96c6\u554a  \n\u542c\u8bf4 NOIp \u524d\u53d1\u9898\u89e3\u53ef\u4ee5 rp++\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3  \n   \n\u9996\u5148\u6211\u4eec\u6765\u5206\u6790\uff1a   \n\u8981\u4f7f\u5f97\u8d27\u8f66\u88c5\u6700\u91cd\u7684\u8d27\u7269\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u8d27\u8f66\u8d70\u7684\u8def\u8f7d\u91cd\u8981\u5c3d\u53ef\u80fd\u5927 \u2014\u2014 \u4e5f\u5c31\u662f\u8bf4\uff0c\u8f7d\u91cd\u8f83\u5c0f\u7684\u8def\u662f\u4e0d\u4f1a\u88ab\u8d70\u8fc7\u7684\u3002\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u6784\u5efa\u4e00\u68f5\u539f\u56fe\u7684\u6700\u5927\u751f\u6210\u6811\uff08\u53c2\u89c1\u6a21\u677f [P3366 \u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/problemnew/show/P3366)\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6ee1\u8db3**\u5404\u57ce\u5e02\u4e4b\u95f4\u8fde\u901a\u60c5\u51b5\u4e0d\u53d8**\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97\u57ce\u5e02\u4e4b\u95f4\u8def\u8f7d\u91cd\u6700\u5927\u3002  \n****\n\u7136\u540e\uff1a\u6c42\u8d27\u8f66\u80fd\u88c5\u6700\u5927\u8d27\u7269\u91cd\u91cf\u7684\u95ee\u9898\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u6c42\u6811\u4e0a\u4e24\u70b9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u95ee\u9898\u4e86\uff01   \n   \n\u5982\u679c\u7528\u6734\u7d20\u7b97\u6cd5\u6c42\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u5355\u6b21\u67e5\u8be2\u4f1a\u88ab\u5361\u5230 $\\mathcal O(n)$ \u7684\u590d\u6742\u5ea6\u3002  \n\u90a3\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\uff1a\u500d\u589e\u6c42\u51fa $u,v$ \u4e24\u70b9\u7684 LCA\uff0c\u8bbe\u5176\u4e3a $t$\u3002  \n\u90a3\u4e48 $u$ \u5230 $v$ \u7684\u6700\u5c0f\u8fb9\u6743\u5c31\u662f\uff1a$u$ \u5230 $t$ \u7684\u6700\u5c0f\u8fb9\u6743 \u548c $v$ \u5230 $t$ \u7684\u6700\u5c0f\u8fb9\u6743\u53d6\u8f83\u5c0f\u503c\u3002  \n$u,v$ \u5230 $t$ \u7684\u6700\u5c0f\u8fb9\u6743\u53c8\u600e\u4e48\u6c42\u5462\uff1f   \n     \n\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u6570\u7ec4 `minw`\uff08\u5373 Minimum Weight\uff09\uff0c\u5176\u4e2d `minw[i][j]` \u8868\u793a $i$ \u8282\u70b9\u5230\u5176 $2^j$ \u7ea7\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u3002\u662f\u4e0d\u662f\u548c\u500d\u589e LCA \u7684\u505a\u6cd5\u5f88\u50cf\uff1f   \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6c42 LCA \u7684\u8fc7\u7a0b\u4e2d\u5f97\u5230\u7b54\u6848\u4e86\u3002  \n\n\u6211\u4eec\u4e5f\u5bb9\u6613\u63a8\u51fa `minw` \u7684\u9012\u63a8\u516c\u5f0f\uff1a   \n\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fd9\u91cc\u8bbe $i$ \u7684 $2^j$ \u7ea7\u7956\u5148\u4e3a $g$\uff09\n```cpp\nminw[i][j] = min(minw[i][j-1],minw[g][j-1]);\n```\n\u6709\u4e86\u9012\u63a8\u516c\u5f0f\uff0c`minw` \u6570\u7ec4\u5c31\u53ef\u4ee5\u5728\u9884\u5904\u7406\u8282\u70b9\u7956\u5148\u4fe1\u606f\u65f6\u641e\u5b9a\u4e86\u3002   \n ****\n\u6700\u540e\u5c31\u662f\u8ba1\u7b97\u7b54\u6848\u7684\u90e8\u5206\uff1a  \n\n\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u4e24\u4e2a\u70b9\u5f88\u597d\u5224\u65ad\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u8fde\u901a\u76f4\u63a5\u8f93\u51fa $-1$\u3002  \n\u5982\u679c\u4e24\u70b9\u8fde\u901a\uff1a  \n\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u7b54\u6848 `ans` \uff0c\u5e76\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff08\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6574\u6570\u5373\u53ef\uff09\u3002   \n\u5bf9\u4e8e\u70b9 $u$\uff0c\u500d\u589e\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u8df3\u5230\u5176 $2^j$ \u7ea7\u8282\u70b9\u65f6\uff0c\u8fdb\u884c\u64cd\u4f5c\uff1a   \n```cpp\nans = min(ans,minw[u][j]);\n```\n\u8fd9\u6837\u4f60\u5c31\u5f97\u5230\u4e86\u7b54\u6848\uff01\n    \n\u6ce8\u610f\u5751\u70b9\uff1a  \n\u7ed9\u5b9a\u7684\u56fe\u53ef\u80fd\u6709\u4e00\u4e9b\u4e92\u4e0d\u8fde\u901a\u7684\u57ce\u5e02\u7fa4\uff0c\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u4e0d\u8981\u9057\u6f0f\u4e86\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define N 10003\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nstruct edge{\n    int u,v,w;\n    edge(int u=0,int v=0,int w=0):u(u),v(v),w(w){}\n    bool operator < (const edge& a) const{\n        return w>a.w;\n    }\n};\n\nint f[N][15],depth[N],lg2[N];\nint ft[N],minw[N][15];\nbool vis[N];\nvector<edge> adj[N];\nedge e[50003];\nint n,m;\n\ninline int min(int a,int b){\n    if(a>b) return b;\n    return a;\n}\n\nint find(int x){\n    if(ft[x]==x) return x;\n    ft[x] = find(ft[x]);\n    return ft[x];\n}\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(!isdigit(c)) c = getchar();\n    while(isdigit(c)){\n        x = (x<<3)+(x<<1)+c-'0';\n        c = getchar();\n    }\n}\n\ninline int getw(int u,int v){\n    int l = adj[u].size();\n    for(int i=0;i<l;++i){\n        if(v==adj[u][i].v) \n            return adj[u][i].w;\n    }\n}\n\nvoid dfs(int u,int fa){\n    vis[u] = true;\n    depth[u] = depth[fa]+1;\n    f[u][0] = fa;\n    int w,g,v,l,t = lg2[depth[u]];\n    w = getw(u,fa);\n    minw[u][0] = w;\n    if(fa==0) minw[u][0] = inf;\n    for(int i=1;i<t;++i){\n        g = f[u][i-1];\n        minw[u][i] = min(minw[u][i-1],minw[g][i-1]);\n        f[u][i] = f[g][i-1];\n    }\n    l = adj[u].size();\n    for(int i=0;i<l;++i){\n        v = adj[u][i].v;\n        if(v==fa) continue;\n        dfs(v,u);\n    }\n}\n\nint lca(int a,int b){\n    if(find(a)^find(b)) return -1;\n    int t,res = inf;\n    if(depth[a]<depth[b]){\n        t = a;\n        a = b;\n        b = t;\n    }\n    while(depth[a]>depth[b]){\n        t = lg2[depth[a]-depth[b]]-1;\n        res = min(res,minw[a][t]);\n        a = f[a][t];\n    }\n    if(a==b) return res;\n    for(t=lg2[depth[a]]-1;t>=0;--t){\n        if(f[a][t]==f[b][t]) continue;\n        res = min(res,min(minw[a][t],minw[b][t]));\n        a = f[a][t];\n        b = f[b][t];\n    }\n    res = min(res,min(minw[a][0],minw[b][0]));\n    return res;\n}\n\nvoid kruskal(){\n    sort(e+1,e+1+m);\n    int cnt = n-1;\n    for(int i=1;i<=m;++i){\n        if(cnt==0) break;\n        int fu,fv,u,v,w;\n        u = e[i].u;\n        v = e[i].v;\n        w = e[i].w;\n        fu = find(u);\n        fv = find(v);\n        if(fu==fv) continue;\n        ft[fu] = fv;\n        --cnt;\n        adj[u].push_back(edge(u,v,w));\n        adj[v].push_back(edge(v,u,w));\n    }\n}\n\nint main(){\n    memset(minw,inf,sizeof(minw));\n    int u,v,w,q;\n    read(n),read(m);\n    for(int i=1;i<=n;++i) ft[i] = i;\n    for(int i=1;i<=m;++i){\n        read(u),read(v),read(w);\n        e[i] = edge(u,v,w);\n    }\n    kruskal();\n    lg2[1] = 1;\n    for(int i=2;i<=n;++i)\n        lg2[i] = lg2[i-1]+(i>>lg2[i-1]==1);\n    for(int i=1;i<=n;++i){\n        if(vis[i]) continue;\n        dfs(i,0);\n    }\n    read(q);\n    ++q;\n    while(--q){\n        read(u),read(v);\n        printf(\"%d\\n\",lca(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1541316209,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709C++ Tarjan\u7684\u9898\u89e3(\u4e0d\u52a0RMQ)\n\n\u4ea4\u4e86n\u904d\u7ec8\u4e8e\u53d8\u6210\u6700\u4f18\u89e3\n\n\u4e3b\u8981\u7528\u7684\u7684\u7b97\u6cd5:kruskal(\u6700\u5927\u751f\u6210\u6811)+Tarjan(\u6700\u8fd1\u516c\u5171\u7956\u5148)\n\n\u5bf9\u4e8e\u8bfb\u5165\u8fdb\u6765\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u505a\u4e00\u8fb9\u6700\u5927\u751f\u6210\u6811\n\n\u5c31\u5f97\u5230\u4e86n-1\u6761\u6700\u5927\u751f\u6210\u6811\u4e2d\u7684\u8fb9\n\n\u9010\u6b21\u8bbf\u95ee\u8fd9n-1\u6761\u8fb9\uff0c\n\n\u9700\u8981\u5efa\u4e00\u4e2a\u7279\u6b8a\u7684\u6811\uff0c\u901a\u8fc7\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\n\n\u8be5\u6811\u7279\u5f81\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u7684\u6743\u503c\u4ee3\u8868\u5de6\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5230\u53f3\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u7b54\u6848(\u8be5\u6811\u5171\u67092n-1\u4e2a\u8282\u70b9)\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u628a\u8be5\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u96c6\u5408\u7684\u9876\u7aef\u95f4\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u7684\u6743\u503c\u4e3a\u8be5\u8fb9\u7684\u6743\u503c\uff0c\u4e4b\u540e\u628a\u4e24\u4e2a\u7aef\u70b9\u548c\u8be5\u8282\u70b9\u7684\u96c6\u5408\u5408\u5e76\u8d77\u6765\n\n\u5bf9\u4e8e\u6837\u4f8b(\u6709\u4e00\u4e2a4\u53f7\u8282\u70b9\uff0c\u4f46\u662f\u6ca1\u6709\u8fde\u5b83\u7684\u8fb9\uff0c\u6240\u4ee5\u7b97\u4e86\u4e0d\u753b\u4e86):\n\n ![](https://cdn.luogu.com.cn/upload/pic/6451.png) \n\n\u5efa\u51fa\u7684\u7279\u5b9a\u7684\u6811\u4e3a(\u5708\u5708\u4e2d\u7684\u6570\u5b57\u4ee3\u8868\u8282\u70b9\uff0c\u65c1\u8fb9\u7684\u6570\u5b57\u4ee3\u8868\u6743\u503c):\n\n ![](https://cdn.luogu.com.cn/upload/pic/6452.png) \n\n\u5982\u56fe\uff0c1\u53f72\u53f7\u8282\u70b9\u52303\u53f7\u8282\u70b9\u7684\u7b54\u6848\u4e3a\u5b83\u4eec\u7684LCA\u7684\u6743\u503c\uff0c\u90a3\u4e48\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5728\u8fd9\u9897\u7279\u5b9a\u7684\u6811\u4e2d\uff0c\u6c42\u4e24\u70b9\u7684lca\u7684\u6743\u503c\uff0c\u5373\u7b54\u6848\n\n\u56e0\u4e3a\u6211\u7528\u7684\u662ftarjan\uff0c\u662f\u79bb\u7ebf\u7b97\u6cd5\uff0c\u4e00\u5f00\u59cb\u628aans\u6570\u7ec4\u5168\u90e8\u8bbe\u4e3a-1\uff0c\u540e\u6765\u5728\u6c42\u89e3\uff0c\n\n\u6c42\u4e0d\u51fa\u6765\u7684\u5c31\u662f-1\u65e0\u89e3\n\n(\u8bf4\u51fa\u6765\u53ef\u80fd\u6709\u70b9\u6df7\u4e71\uff0c\u770b\u4ee3\u7801\u5c31\u61c2\u4e86\u5427)\n\n### \u6570\u636e\u5df2\u52a0\u5f3a \u56fe\u53ef\u80fd\u5e76\u4e0d\u8fde\u901a\n\n\u6240\u4ee5\u7531\u4e8eTarjan\u6c42lca\u6cd5\u53ea\u80fd\u5904\u7406\u4e00\u68f5\u6811 \u4f46\u6c42\u51fa\u6765\u7684kruskal\u91cd\u6784\u6811\u53ef\u80fd\u7531\u4e8e\u56fe\u5e76\u4e0d\u8fde\u901a\u800c\u9020\u6210\u6784\u6210\u68ee\u6797\uff0c\u4e00\u6b21tarjanDFS\u53ea\u80fd\u5904\u7406\u4e00\u68f5\u6811 \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u591a\u52a0\u4e00\u4e2a\u5faa\u73af\u8fdb\u884c\u591a\u6b21dfs\n\n\u68ee\u6797\u4e2d\uff0c\u6bcf\u6b21\u53ea\u5bf9\u4e00\u68f5\u6811\u7684\u6839\u5f00\u59cbdfs\uff0c\u5982\u4f55\u5224\u65ad\u662f\u4e0d\u662f\u6811\u6839\u5462\uff1f\u6211\u91cd\u6784\u6811\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e86\u5e76\u67e5\u96c6\uff0cfind(x)\u5c31\u80fd\u627e\u5230\u70b9x\u7684\u6839\uff0c\u5982\u679cfind(x)==x\u7684\u8bdd\u5c31\u8bf4\u660ex\u662f\u4e00\u4e2a\u6811\u6839\uff0c\u56e0\u4e3a\u5f53fa[x]==x\u65f6find(x)==x\uff0c\u6240\u4ee5\u53ef\u4ee5\u7b80\u5199\u6210fa[x]==x\n\ndfs\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u539f\u672c\u6761\u4ef6\u662fif(vis[v])\u5c31\u4ee3\u8868find(v)(\u6b64\u65f6\u662fdfs\u65f6\u6240\u7528\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c)\u662f(u,v)\u7684lca\uff0c\u4f46\u7531\u4e8e\u5b58\u5728\u68ee\u6797\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u4e0a\u4e00\u70b9\u7279\u6b8a\u5904\u7406\uff1a\n1.\u6bcf\u6b21dfs\u524d\u6e05\u96f6vis\u6570\u7ec4\uff0c\u524d\u4e00\u68f5\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u6807\u8bb0\u4e3a\u672a\u8bbf\u95ee\u8fc7\uff0c\u8fd9\u6837if(vis[\u4e00\u4e2a\u975e\u540c\u68f5\u4e2d\u7684\u8282\u70b9])\u5fc5\u5b9a\u4e0d\u6210\u7acb\u3002\u4f46\u662f\u6e05\u96f6\u4e5f\u8017\u65f6\u554a\uff0c\u6709\u53ef\u80fd\u5c31T\u4e86\uff0c\u6240\u4ee5\u4e0d\u592a\u597d\u505a\n\n2.\u52a0\u4e00\u6761\u5224\u65adFind(u)==Find(v)(\u6b64\u65f6\u7684Find\u8868\u793a\u91cd\u6784\u6811\u4e2d\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\uff0c\u8be5\u8bed\u53e5\u610f\u601d\u5373\u5728\u91cd\u6784\u6811\u4e2d\u5904\u4e8e\u540c\u4e00\u96c6\u5408)\uff0c\u5728\u540c\u4e00\u68f5\u6811\u4e2d\u624d\u80fd\u5904\u7406\uff0c\u53ef\u884c \u4e0d\u6162\n\n~~3.\u5199\u500d\u589e/\u6811\u5256~~\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=100000,M=500000,Q=300000;\nbool vis[2*N];\nint n,m,que,from[N],cnt,fa[2*N],f[2*N],ans[Q],k;\nstruct edge{int to,w,next;}e[M],q[Q*2],te[M];\nstruct tree{int l,r,d;}t[N*2];\n//\u8fd9\u91cc\u5176\u5b9e\u5077\u61d2\u4e86\uff0c\u5176\u5b9e\u8fd9\u4e2a\u662f\u90bb\u63a5\u8868\u7684\u7ed3\u6784\uff0c\u800ce\u548cte\u6570\u7ec4\u5e76\u4e0d\u662f\u771f\u7684\u90bb\u63a5\u8868 \n//e\u4ee3\u8868\u8bfb\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\uff0cto\u4ee3\u8868\u8be5\u8fb9\u7684\u4e00\u4e2a\u8282\u70b9\uff0cnext\u4ee3\u8868\u53e6\u4e00\u4e2a\u8282\u70b9\uff0cw\u4ee3\u8868\u8fb9\u6743 \n//te\u4e0ee\u7684\u7ed3\u6784\u4e00\u6837\uff0c\u4ee3\u8868\u6700\u5927\u751f\u6210\u6811\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\ninline void read(reg int &x)\n{\n    reg int out=0;reg char cc=getchar();\n    while (cc>57||cc<48)cc=getchar();\n    while (cc>=48&&cc<=57)\n        out=out*10+cc-48,cc=getchar();\n    x=out;\n}\ninline void add(reg int a,reg int b,reg int c)\n{\n    q[++cnt].next=from[a];\n    q[cnt].to=b;\n    q[cnt].w=c;\n    from[a]=cnt;\n}\ninline bool cmp(const edge &e1,const edge &e2)\n{\n    return e1.w>e2.w;\n}\ninline void clear()\n{\n    for (int i=1;i<2*n;i++)fa[i]=i;\n}\nint Find(reg int o)\n{\n    if (fa[o]==o)return o;\n    return fa[o]=Find(fa[o]);\n}\ninline void Union(reg int a,reg int b)\n{\n    reg int f1=Find(a),f2=Find(b);\n    if (f1==f2)return;\n    fa[f2]=f1;\n}\nint Findd(reg int x)\n{\n\treturn f[x]==x?x:f[x]=Findd(f[x]);\n}\ninline void Unionn(reg int a,reg int b)\n{\n\treg int f1=Findd(a),f2=Findd(b);\n\tif (f1==f2)return;\n\tf[f2]=f1;\n}\ninline void kruskal() //\u6700\u5927\u751f\u6210\u6811 \n{\n    for (reg int i=1;i<=m;i++)\n    {\n        reg int u=e[i].to,v=e[i].next;\n        if (Find(u)!=Find(v))\n            Union(u,v),te[++k]=e[i];//\u5c06\u8be5\u6761\u8fb9\u52a0\u5230\u6700\u5927\u751f\u6210\u6811\u4e2d \n    }\n}\ninline void build()\n{\n    for (reg int i=1;i<=k;i++)//\u5728\u6700\u5927\u751f\u6210\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u91cc\u627e \n    {\n        reg int u=Find(te[i].to),v=Find(te[i].next);\n        t[n+i].l=u;t[n+i].r=v;\n        t[n+i].d=te[i].w;\n        //\u56e0\u4e3at[n+i]\u7684\u8282\u70b9\u80af\u5b9a\u662f\u95f2\u7f6e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u5f53\u4f5c\u4e00\u4e2a\u5b58\u6743\u503c\u7684\u501f\u70b9\uff0c\u4ee3\u8868\u4ece\u5b83\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5230\u53f3\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7b54\u6848 \n        Union(n+i,u);Union(n+i,v);\n    }\n}\nvoid tarjan(reg int p) //\u4e00\u6b21tarjan\u5904\u7406\u4e00\u68f5\u68ee\u6797\u4e2d\u7684\u6240\u6709\u8be2\u95ee\n{\n    vis[p]=1;\n\tfor (reg int i=from[p];i;i=q[i].next)\n    {\n       \treg int v=q[i].to;\n       \tif (vis[v]&&Find(v)==Find(p))ans[q[i].w]=t[Findd(v)].d;\n        //\u4e0d\u540c\u68f5\u6811\u662f\u4e0d\u80fd\u5904\u7406\u7684\n    }\n    reg int ls=t[p].l,rs=t[p].r;\n    if (ls)tarjan(ls),Unionn(p,ls);\n    if (rs)tarjan(rs),Unionn(p,rs);\n}\nint main()\n{\n    read(n);read(m);\n    for (reg int i=1;i<=m;i++)\n        read(e[i].to),read(e[i].next),read(e[i].w);\n    read(que);\n    for (reg int i=1;i<=que;i++)\n    {\n        reg int x,y;\n        read(x);read(y);\n        add(x,y,i),add(y,x,i);\n    }\n    sort(e+1,e+m+1,cmp);\n    clear();kruskal();\n    clear();build();\n    fill(ans+1,ans+que+1,-1);\n    for (reg int i=1;i<2*n;i++)f[i]=i; //f\u6570\u7ec4\u4ee3\u8868\u6bcf\u6b21dfs\u65f6\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\uff0cfa\u73b0\u5728\u7528\u6765\u5904\u7406\u91cd\u6784\u6811\u4e2d\u7684\u68ee\u6797\n    for (reg int i=n+1;i<=n+k;i++)if (fa[i]==i)tarjan(i); //\u5982\u679ci\u662f\u6811\u6839\u5c31dfs\n    for (reg int i=1;i<=que;i++)printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1500604009,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "## \u9898\u76ee\u7b80\u8ff0\n\n\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u591a\u52a0\u4e86\u5f88\u591a\u65e0\u7528\u7684\u8fb9\uff0c\u8ba9\u4f60\u6c42\u4e24\u70b9\u8def\u5f84\u4e0a\u6743\u503c\u7684\u6700\u5c0f\u503c\n\n## \u601d\u8def\n\n\u5bf9\u4e8e\u8f93\u5165\u7684\u56fe\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\uff0c\u5f97\u5230\u4e00\u68f5\u6811\uff0c\u5176\u6bcf\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u662f\u6700\u4f18\u7684\uff08\u6700\u5927\u5316\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u6743\u503c\uff09\u3002\n\n\u8fd9\u65f6\u5c31\u662f\u4e00\u4e2a\u88f8\u7684`LCA`+\u8def\u5f84\u7684\u6a21\u677f\u4e86\u3002\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u8be2\u95ee\u8dd1\u4e00\u904d\uff0c\u5f97\u5230\u7684\u5c31\u662f\u6700\u4f18\u89e3\u4e86\u3002\n\n\u81f3\u4e8e`-1`\u600e\u4e48\u5224\uff0c\u53ea\u8981\u770b\u770b`x`\u548c`y`\u7684\u5e76\u67e5\u96c6\u7684\u7236\u4eb2\u76f8\u4e0d\u76f8\u7b49\u5373\u53ef\n\n#### \u6ce8\u610f\u51e0\u70b9\uff0c\u81ea\u5df1\u60f3\u600e\u4e48\u89e3\u51b3\uff1a\n\n1. \u5f97\u5230\u7684\u6700\u5927\u751f\u6210\u6811\u53ef\u80fd\u6709\u4e24\u4e2a\u9897\u6811\u6784\u6210\uff0c\u6240\u6709\u8dd1\u4e00\u904d\u521d\u59cb\u5316\u662f\u4e0d\u884c\u7684\u3002\u56e0\u4e3a\u4e00\u904d\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u9897\u5b50\u6811\u3002\uff08\u90a3\u628a\u5176\u4ed6\u5b50\u6811\u4e5f\u8dd1\u4e00\u904d\u554a\n\n2. \u6709\u4e9b\u4eba\u4f1a\u6bd4\u8f83\u50bb\uff08\u6bd4\u5982\u6211\uff09\uff0c`LCA`\u8be2\u95ee\u65f6`x`\u548c`y`\u540c\u65f6\u8df3\u7684\u65f6\u5019\u53ea\u53d6\u4e86`x`\u8df3\u7684\u8def\u5f84\u7684\u6700\u5c0f\u503c\n\n3. `LCA`\u8be2\u95ee\u6700\u540e\u8fd4\u56de\u65f6\u8bb0\u5f97\u8fd8\u8981\u4e0e`x`\u548c`y`\u7684\u7236\u8282\u70b9\u7684\u8ddd\u79bb\u53d6\u6700\u5c0f\u503c\n\n\u5176\u5b9e\u505a\u8fc7\u4e00\u70b9\u751f\u6210\u6811\u548c`LCA`\u7684\u9898\u5c31\u53ef\u4ee5\u81ea\u5df1\u5199\u4e86\uff0c\u5c3d\u91cf\u4e0d\u8981\u770b\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\n#define MAXN 500010\n \nusing namespace std;\n\nint n, m, tot, num;\n\nint head[MAXN];\nint fa[MAXN];\nint f[MAXN][50], dis[MAXN][50];\nint depth[MAXN], lg[MAXN], vis[MAXN];\n\nstruct edge_graph {\n\tint u, v, w;\n}e1[MAXN];\n\nstruct edge_tree {\n\tint to, next, w;\n}e2[MAXN];\n\nvoid add(int x, int y, int w) {\n\te2[++tot].to = y;\n\te2[tot].w = w;\n\te2[tot].next = head[x];\n\thead[x] = tot;\n}\n\nint find(int x) {//\u5faa\u73af\u6c42\u7236\u4eb2\u540c\u65f6\u8def\u5f84\u538b\u7f29\n\twhile (x != fa[x]) x = fa[x] = fa[fa[x]];\n\treturn x;\n}\n\nbool cmp(edge_graph x, edge_graph y) {\n\treturn x.w > y.w;\n}\n\nvoid kruskal() {\n\tsort(e1 + 1, e1 + m + 1, cmp);//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\tint eu, ev;\n\tfor (int i = 1; i <= m; i++) {\n\t\teu = find(e1[i].u);\n\t\tev = find(e1[i].v);\n\t\t\n\t\tif (eu == ev) continue;\n\t\t\n\t\tfa[eu] = ev;\n\t\tadd(e1[i].u, e1[i].v, e1[i].w);\n\t\tadd(e1[i].v, e1[i].u, e1[i].w);\n\t\tif (++num == n) return;//\u5df2\u7ecfn\u7684\u70b9\u4e86\u5c31\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u4e86\n\t}\n}\n\nvoid dfs(int x, int fath, int we) {//we\uff1a\u8def\u5f84\u7684\u6743\u503c\n\tvis[x] = 1;\n\tdepth[x] = depth[fath] + 1;\n\tf[x][0] = fath;\n\tdis[x][0] = we;\n\t\n\tfor (int i = 1; (1 << i) <= depth[x]; i++) {\n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\t\tdis[x][i] = min(dis[x][i - 1], dis[f[x][i - 1]][i - 1]);\n\t}\n\t\n\tfor (int i = head[x]; i; i = e2[i].next) {\n\t\tif (e2[i].to != fath) dfs(e2[i].to, x, e2[i].w);\n\t}\n\treturn;\n}\n\nint lca(int x, int y) {\n\tif (find(x) != find(y)) return -1;\n\tint ans = 210000000;\n\tif (depth[x] < depth[y]) swap(x, y);\n\t\n\twhile (depth[x] > depth[y]) {\n\t\tans = min(ans, dis[x][lg[depth[x] - depth[y]] - 1]);\n\t\tx = f[x][lg[depth[x] - depth[y]] - 1];\n\t}\n\t\n\tif (x == y) return ans;\n\t\n\tfor (int i = lg[depth[x]] - 1; i >= 0; i--) {\n\t\tif (f[x][i] != f[y][i]) {\n\t\t\tans = min(ans, dis[x][i]);\n\t\t\tans = min(ans, dis[y][i]);\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\t\n\tans = min(ans, min(dis[x][0], dis[y][0]));\n\treturn ans;\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; i++) { \n\t\tscanf(\"%d%d%d\", &e1[i].u, &e1[i].v, &e1[i].w);\n\t}\t\n\n\tfor (int i = 1; i <= n; i++) {\n\t\tfa[i] = i;\n\t}\n\tkruskal();\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!vis[i]) {\n\t\t\tdfs(i, 0, 0);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {//\u8fd9\u662f\u4e00\u4e2a\u5e38\u6570\u4f18\u5316\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u7684\u624b\u63a8\u4e00\u904d\u5c31\u4f1a\u53d1\u73b0\u89c4\u5f8b\u4e86\n\t\tlg[i] = lg[i - 1] + (1 << lg[i - 1] == i);\n\t}\n\t\n\tint q;\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tprintf(\"%d\\n\", lca(x, y));\n\t}\n\t\n\treturn 0;\n} \n```\n\n> \u65e5\u62f1\u4e00\u5352\uff0c\u529f\u4e0d\u5510\u6350\n",
        "postTime": 1570796154,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# \u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\n\n## \u601d\u8def\n\u8c8c\u4f3c\u9898\u89e3\u91cc\u6ca1\u6709\u6811\u94fe\u5256\u5206\u548c\u7ebf\u6bb5\u6811\u7684\uff0c\u8d21\u732e\u4e00\u53d1\u3002\n\n\u9996\u5148\u660e\u786e\u9898\u76ee\u8981\u6c42\uff1a\u4e00\u8f86\u8f66\u8d70\u67d0\u6761\u8def\u4ecex\u57ce\u5230y\u57ce\u7684\u8fb9\u6743\u6700\u5c0f\u503c\n\n\u6211\u4eec\u628a\u8981\u6c42\u5206\u5f00\u6765\u770b\uff1a\n\n1. \u4ecex\u57ce\u5230y\u57ce\uff1a\u6211\u4eec\u9700\u8981\u8d70\u7684\u8def\u5f84\u5c06\u4e24\u70b9\u8054\u901a\n\n1. \u8fb9\u6743\u6700\u5c0f\u503c\uff1a\u6211\u4eec\u8981\u627e\u8fd9\u6761\u8def\u4e0a\u7684\u9650\u91cd\u6700\u5c0f\u503c\n\n\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u8d27\u8f66\u53f8\u673a\uff08\u800c\u4e14\u9898\u76ee\u8fd8\u544a\u8bc9\u4f60\u4f60\u7684\u6c7d\u8f66\u8d70\u591a\u8fdc\u4e0d\u8981\u6cb9\uff09\uff0c\u4f60\u80af\u5b9a\u60f3\u591a\u8fd0\u4e00\u4e9b\u8d27\u7269\uff0c\u4e5f\u5c31\u8981\u6c42\u8054\u901a\u4e24\u70b9\u7684\u6743\u503c\u5c3d\u53ef\u80fd\u5927\u3002\n\n\u53c8\u8981**\u4fdd\u8bc1\u8054\u901a**\uff0c\u53c8\u8981**\u4fdd\u8bc1\u6743\u503c\u5c3d\u53ef\u80fd\u5927**\uff0c\u6ca1\u9519\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\uff08\u5982\u679c\u8fd8\u4e0d\u7406\u89e3\uff0c\u4f60\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e0b\uff0c\u6709\u4e24\u6761\u90fd\u53ef\u4ee5\u4ecea\u5230b\uff0c\u4e00\u6761\u8def\u9650\u91cd10\uff0c\u4e00\u6761\u8def\u9650\u91cd100\uff0c\u4f60\u4e00\u5b9a\u4f1a\u9009\u62e9\u7b2c\u4e8c\u6761\u8def\uff1b\u6211\u4eec\u518d\u63a8\u5e7f\u4e00\u4e0b\uff0c\u5982\u679c\u4e24\u6761\u8def\u90fd\u80fd\u8054\u901a\u8fd8\u672a\u8054\u901a\u7684a\u3001b\u4e24\u4e2a\u8054\u901a\u5757\uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3aa\u3001b\u662f\u4e24\u4e2a\u5c9b\uff0c\u4e24\u6761\u8def\u662f\u8de8\u5c9b\u5927\u6865\uff09\uff0c\u4e00\u6761\u8def\u9650\u91cd10\uff0c\u4e00\u6761\u8def\u9650\u91cd100\uff0c\u4f60\u8fd8\u662f\u4e00\u5b9a\u4f1a\u9009\u62e9\u7b2c\u4e8c\u6761\u8def\uff09\n\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff1a\u5148\u6309\u8fb9\u6743\u5927\u5c0f\u6392\u5e8f\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u5757\u662f\u5426\u8054\u901a\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56fe\n\n---\n\u597d\uff0c\u73b0\u5728\u7b2c\u4e00\u4e2a\u95ee\u9898\u89e3\u51b3\u4e86\uff1a\u4f60\u8fd0\u8d27\u7684\u6700\u5927\u8def\u5f84\u65b9\u6848\u4e00\u5b9a\u5728\u65b0\u7684\u56fe\uff08\u6811\uff09\u4e0a\u4e86\uff0c\u600e\u4e48\u6c42\u4e24\u70b9\u4e4b\u95f4\u6743\u503c\u6700\u5c0f\u7684\u5462\uff1f\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u552f\u4e00\uff0c\u53ef\u662f\u76f4\u63a5\u641c\u7d22\u65f6\u95f4\u53c8\u80af\u5b9a\u627f\u53d7\u4e0d\u4f4f\uff0c\u6211\u4eec\u8fd9\u65f6\u5c31\u53ef\u4ee5\u91c7\u7528\u6811\u94fe\u5256\u5206\u4e86\n\n[\u8fd9\u662f\u7c7b\u4f3c\u6811\u5256\u677f\u9898\u7684\u9898\uff0c\u5c31\u6709\u63d0\u5230\u6c42\u67d0\u4e24\u70b9\u7684\u6700\u503c\u95ee\u9898](https://www.luogu.org/problemnew/show/P2590)\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff1a\u6811\u5256+\u7ebf\u6bb5\u6811\u53ea\u662f\u652f\u6301\u4fee\u6539\u548c\u67e5\u8be2**\u70b9\u6743**\u7684\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u600e\u4e48\u5c06**\u8fb9\u6743\u8f6c\u6362\u4e3a\u70b9\u6743**\n\n## \u8fb9\u6743\u4e0e\u70b9\u6743\u4e4b\u95f4\u7684\u8f6c\u6362\n\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521015915358&di=c761d3150b4221a7eaa7dbe10521a558&imgtype=jpg&src=http%3A%2F%2Fimages0.cnblogs.com%2Fblog2015%2F790029%2F201507%2F281612511418262.png)\n\n\u968f\u4fbf\u5728\u7f51\u4e0a\u627e\u4e86\u4e2a\u56fe\uff1a\u6211\u4eec\u8fd9\u6837\u5b9e\u73b0**\u8fb9\u6743\u4e0e\u70b9\u6743\u4e4b\u95f4\u7684\u8f6c\u6362**\uff1a\u5c06\u6839\u8282\u70b9\u7684\u70b9\u6743\u8bbe\u4e3aINF\uff0c**\u7136\u540e\u6240\u6709\u8fb9\u6743\u4e0b\u653e\u5230\u8fde\u63a5\u7684\u70b9**\uff08\u6240\u6709\u8fb9\u6743\u5f80\u4e0b\u632a\u5230\u4e86\u70b9\u91cc\uff0c\u7531\u4e8e\u6839\u8282\u70b9\u503c\u4e3aINF\u4e0d\u5f71\u54cdmin\u7684\u8ba1\u7b97\uff08\u540c\u7406\uff0c\u67e5\u8be2\u6700\u5927\u503c\u5c31\u8bbe\u4e3a-INF\uff09\uff09\n\n~~\u7136\u540e\u76f4\u63a5\u67e5\u8be2\u5c31\u597d\u5566\uff01~~\n\n**\u600e\u4e48\u53ef\u80fd\uff1f\uff01**\n\n\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u8f6c\u6362\u5b8c\u540e\u5c31\u76f4\u63a5\u50cf\u6811\u5256\u677f\u9898\u90a3\u6837\u6c42\u6700\u503c\u4e86\uff0c\u7ed3\u679c**\u53ea\u670910\u5206**\uff0c\u90a3\u4e48\u95ee\u9898\u51fa\u5728\u54ea\u5462\uff1f\n\n\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u56fe\uff08\u9ed1\u8272\u662f\u8fb9\u6743\uff0c\u9ec4\u8272\u662f\u8f6c\u6362\u540e\u7684\u70b9\u6743\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/15596.png)\n\n\u82e5\u60f3\u67e5\u8be2A\u70b9\u5230B\u70b9\u7684\u6700\u503c\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6309\u666e\u901a\u6811\u5256\u7684\u67e5\u8be2\u65b9\u6cd5\uff0c\u6211\u4eec\u4f1a\u8bbf\u95ee20\u90a3\u4e2a\u70b9\uff085-20-19-8\uff09\uff0c\u7136\u800c\u5e94\u8be5\u8bbf\u95ee\u7684\u8def\u5f84\u662f5-19-8\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5bf9\u67e5\u8be2\u51fd\u6570\u505a\u4e00\u4e9b\u4fee\u6539\uff0c\u201c\u7ed5\u5f00\u90a3\u4e9b\u70b9\u201d\n\n```cpp\nvoid getans(int x,int y){\n    if(findfather(x) != findfather(y)){\n        printf(\"-1\\n\");\n        return ;\n        }\n    int ans = INF;\n    while(top[x] != top[y]){\n        if(dep[top[x]] < dep[top[y]])swap(x,y);\n        ans = min(ans,query(1,pos[top[x]],pos[x]));\n        x = fa[top[x]];\n        }\n    if(x == y){\n        printf(\"%d\\n\",ans);//\u7ed5\u5f00\n        return ;\n        }\n    if(dep[x] > dep[y])swap(x,y);\n    ans = min(ans,query(1,pos[x] + 1,pos[y]));//+1\u7ed5\u5f00\n    printf(\"%d\\n\",ans);\n    }\n```\n\n# AC\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 500190,INF = 999999999;\nint num,nr,nume,na,cnt,numt;\nint head[maxn];\nstruct Node{\n    int v,nxt,dis;\n    }E[maxn * 2];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nstruct R{\n    int u,v,dis;\n    }I[maxn];\nbool cmp(R a,R b){\n    return a.dis > b.dis;\n    }\nint father[maxn];\nint findfather(int v){\n    if(father[v] == v)return v;\n    return father[v] = findfather(father[v]);\n    }\nvoid Union(int a,int b){\n    int faA = findfather(a);\n    int faB = findfather(b);\n    if(faA != faB)father[faA] = faB;\n    }\nvoid buildG(){//\u5efa\u6700\u5c0f\u751f\u6210\u6811\n    for(int i = 1;i <= nr;i++){\n        if(findfather(I[i].u) != findfather(I[i].v)){\n            add(I[i].u,I[i].v,I[i].dis);\n            add(I[i].v,I[i].u,I[i].dis);\n            Union(I[i].u,I[i].v);\n            }\n        }\n    }\nint dep[maxn],fa[maxn],wson[maxn],top[maxn],size[maxn],pos[maxn],ori[maxn];\nint val[maxn];\nint vis[maxn];\nvoid dfs1(int id,int F){\n    vis[id] = true;\n    numt++;\n    size[id] = 1;\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == F)continue;\n        dep[v] = dep[id] + 1;\n        fa[v] = id;\n        val[v] = E[i].dis;\n        dfs1(v,id);\n        size[id] += size[v];\n        if(size[v] > size[wson[id]]){\n            wson[id] = v;\n            }\n        }\n    }\nvoid dfs2(int id,int TP){\n    top[id] = TP;\n    pos[id] = ++cnt;\n    ori[cnt] = id;\n    if(!wson[id])return ;\n    dfs2(wson[id],TP);\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == fa[id] || v == wson[id])continue;\n        dfs2(v,v);\n        }\n    }\n#define lid (id << 1)\n#define rid (id << 1) | 1\nstruct sag_tree{\n    int l,r;\n    int min;\n    int lazy;\n    }tree[maxn << 2];\nvoid build(int id,int l,int r){\n    tree[id].l = l;\n    tree[id].r = r;\n    if(l == r){\n        tree[id].min = val[ori[r]];\n        return ;\n        }\n    int mid = l + r >> 1;\n    build(lid,l,mid);\n    build(rid,mid + 1,r);\n    tree[id].min = min(tree[lid].min,tree[rid].min);\n    }\nint query(int id,int l,int r){\n    if(tree[id].l == l && tree[id].r == r){\n        return tree[id].min;\n        }\n    int mid = tree[id].l + tree[id].r >> 1;\n    if(mid < l){\n        return query(rid,l,r);\n        }\n    else if(mid >= r){\n        return query(lid,l,r);\n        }\n    else{\n        return min(query(lid,l,mid),query(rid,mid + 1,r));\n        }\n    }\nvoid getans(int x,int y){\n    if(findfather(x) != findfather(y)){\n        printf(\"-1\\n\");\n        return ;\n        }\n    int ans = INF;\n    while(top[x] != top[y]){\n        if(dep[top[x]] < dep[top[y]])swap(x,y);\n        ans = min(ans,query(1,pos[top[x]],pos[x]));\n        x = fa[top[x]];\n        }\n    if(x == y){\n        printf(\"%d\\n\",ans);\n        return ;\n        }\n    if(dep[x] > dep[y])swap(x,y);\n    ans = min(ans,query(1,pos[x] + 1,pos[y]));\n    printf(\"%d\\n\",ans);\n    }\nint main(){\n    num = RD();nr = RD();\n    for(int i = 1;i <= num;i++){\n        father[i] = i;\n        }\n    for(int i = 1;i <= nr;i++){\n        I[i].u = RD();\n        I[i].v = RD();\n        I[i].dis = RD();\n        }\n    sort(I + 1,I + 1 + nr,cmp);\n    buildG();\n    int s = 1;\n    while(s <= num){\n        if(vis[s] == false){\n            dep[s] = 1;\n            val[s] = INF;\n            dfs1(s,-1);\n            dfs2(s,s);\n            }\n        s++;\n        }\n    build(1,1,numt);\n    na = RD();\n    int u,v;\n    for(int i = 1;i <= na;i++){\n        u = RD();v = RD();\n        getans(u,v);\n        }\n    return 0;\n    }\n```\n\u6700\u540e\uff0c\u611f\u8c22\u5927\u4f6c\u7684\u5e2e\u52a9\n[\u5927\u4f6c](http://www.cnblogs.com/Mychael/)\n\n[\u5e7f\u544a](https://www.luogu.org/blog/QVQ/)",
        "postTime": 1521009358,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "#### \u601d\u8def\uff1a\n\n\u9996\u5148\u662f\u8981\u5efa\u6700\u5927\u751f\u6210\u6811\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e24\u70b9$u,v$\uff0c\u5982\u679c$u->v$\u4e2d\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u6700\u5927\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84$u->v$\u4e00\u5b9a\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u3002\n\n\u8003\u8651\u7528$Kruskal$\u5efa\u6700\u5927\u751f\u6210\u6811\uff0c\u90a3\u4e48\u9996\u5148\u5bf9\u8fb9\u6309\u7167\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e24\u4e2a\u70b9\u7684\u8054\u901a\u6027\uff0c\u5982\u679c$u$\u4e0e$v$\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\u5c31\u5408\u5e76\uff0c\u6ce8\u610f\u5230\u5408\u5e76\u7684\u540c\u65f6\uff0c\u6211\u4eec\u4fdd\u8bc1\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u4fe1\u606f\uff1a\n\n\u5728\u5bf9\u7b2c$i$\u6761\u8fb9\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5047\u8bbe\u5408\u5e76\u4e86\u5e76\u67e5\u96c6$S1$\u4e0e\u5e76\u67e5\u96c6$S2$\uff0c\u90a3\u4e48\u663e\u7136\u6709\uff1a\uff08\u8bb0\u7b2c$i$\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a$V_i$\uff09\n\n--------------\n> \u6027\u8d281.\u96c6\u5408$S1$\u5185\u70b9\uff0c\u96c6\u5408$S2$\u5185\u70b9\u5206\u522b\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe \uff08\u7531\u524d\u9762$Kruskal$\u5efa\u6700\u5927\u751f\u6210\u6811\u7684\u6d41\u7a0b\u5f97\u5230\u7684\uff09\n\n> \u6027\u8d282.\u96c6\u5408$S1,S2$\u5185\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u7684\u6743\u503c\u90fd\u6bd4$Ki$\u5927\uff08\u56e0\u4e3a\u5df2\u7ecf\u6309\u7167\u8fb9\u6743\u6392\u5e8f\u4e86\uff09\n\n--------------\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u4ece\u96c6\u5408$S1$\u5185\u7684\u70b9\u51fa\u53d1\uff0c\u5230\u96c6\u5408$S2$\u5185\u7684\u70b9\uff0c\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u4e2d\uff0c\u8fb9\u6743\u6700\u5c0f\u7684\u5373\u4e3a$V_i$\uff0c\u6362\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u73b0\u5728\u7684\u76ee\u6807\u662f\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e00\u6b21\u8be2\u95ee$u$\u5230$v$\uff0c\u6211\u80fd\u544a\u8bc9\u4f60$u$\u4e0e$v$\u4e24\u4e2a\u70b9\u88ab\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\u65f6\uff0c\u901a\u8fc7\u7684\u8fb9\u7684\u8fb9\u6743\u3002\uff08\u8fd9\u4e00\u6bb5\u611f\u6027\u7406\u89e3\uff0c\u56e0\u4e3a\u6253\u5b57\u4e0d\u597d\u63cf\u8ff0\uff09\n\n**\u5982\u4f55\u7ef4\u62a4\uff1f/\u6d41\u7a0b\uff0c\u505a\u6cd5**\n\n\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u8ba4\u4e3a$V_i$\u8868\u793a\u7b2c$i$\u6761\u8fb9\u7684\u8fb9\u6743\u3002\uff08\u8c8c\u4f3c\u8fd9\u4e2a\u505a\u6cd5\u53c8\u88ab\u53eb\u505a$Kruskal$\u91cd\u6784\u6811\uff1f\uff09\n\n\u4ecd\u7136\u6309\u7167$Kruskal$\u5efa\u6700\u5927\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff0c\u5bf9\u8fb9\u6309\u7167\u8fb9\u6743\u6392\u5e8f\u3002\n\n//\u4e0b\u9762\u662f\u6211\u81ea\u5df1\u53ef\u80fd\u4e5f\u770b\u4e0d\u61c2\u7684\u89e3\u91ca\uff0c\u4f46\u8fd8\u662f\u5f3a\u884c\u89e3\u91ca\u4e86\u4e00\u6ce2\u6d41\u7a0b...$QAQ$\n\n(\u60a8\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u6bb5\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u9762\u6e05\u6670\u597d\u770b\u7684\u5b57\u4f53\u9644\u8fd1)\n-----------------------\n---------------\n\u7b2c\u4e00\u6b65\uff0c\u9996\u5148\u8003\u8651\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u8fb9\uff0c\u5047\u8bbe\u8fb9$i$\u8fde\u63a5\u4e86\u70b9$u$\uff0c$v$\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u4e3a$V_i$\uff0c\u7136\u540e\u5176\u62e5\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u5206\u522b\u6307\u5411$u$\u548c$v$\uff0c\u90a3\u4e48\u6211\u8be2\u95ee$u$\u5230$v$\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5c31\u662f$u$\uff0c$v$\u4e24\u70b9\u7684\u7236\u4eb2\u3002\u7136\u540e\u628a$u$\uff0c$v$\u5408\u5e76\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u8868\u793a$u$\uff0c$v$\u8054\u901a\u3002\u7136\u540e\u8bb0\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e3a$S1$\uff0c\u5176\u6700\u9876\u4e0a\u7684\u6839\u8282\u70b9\u8bb0\u4e3a$root1$\uff0c\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c31\u5efa\u51fa\u4e86\u4e00\u4e2a\u4e8c\u53c9\u6811\u3002\n\n\u7136\u540e\u8003\u8651\u5047\u8bbe\u8fb9$i$\u8fde\u63a5\u4e86\u4e24\u4e2a\u5927\u5c0f\u4e3a$2$\u7684\u5e76\u67e5\u96c6$S1$\uff0c$S2$\uff0c\u8fd9\u4e2a\u5927\u5c0f\u4e3a$2$\u7684\u5e76\u67e5\u96c6\u5373\u7b2c\u4e00\u6b65\u5efa\u7acb\u7684\u5e76\u67e5\u96c6\uff0c\u90a3\u4e48\u6211\u5efa\u7acb\u4e00\u4e2a\u8282\u70b9$k$\uff0c\u5176\u70b9\u6743\u4e3a$V_i$\uff0c\u90a3\u4e48\u5176\u4e24\u4e2a\u513f\u5b50\u5219\u5206\u522b\u6307\u5411\u5e76\u67e5\u96c6$S1,S2$\u7684$root1,root2.$\u4e0d\u96be\u53d1\u73b0\uff0c\u4ece\u5e76\u67e5\u96c6$S1$\u4e2d\u7684\u70b9\u5230\u5e76\u67e5\u96c6$S2$\u4e2d\u7684\u70b9\uff0c\u5fc5\u987b\u8981\u7ecf\u8fc7\u70b9$k$\u3002\u90a3\u4e48\u96c6\u5408$S1$\u4e2d\u7684\u70b9\u5230\u96c6\u5408$S2$\u4e2d\u7684\u70b9\u6240\u7ecf\u8fc7\u7684\u70b9\uff0c\u5c31\u662f\u5728\u4ee5\u6b64\u6cd5\u5efa\u51fa\u6765\u7684\u6811\u4e2d\uff0c\u7ecf\u8fc7\u7684\u70b9\u7684\u70b9\u6743\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f$k$\u7684\u70b9\u6743\u3002\n\n\u4f9d\u6b21\u7c7b\u63a8\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9$i$\uff0c\u5982\u679c\u5176\u8fde\u63a5\u4e86\u5e76\u67e5\u96c6$S1$\u548c$S2$\uff0c\u4ecd\u7136\u6709\u4e4b\u524d\u5f97\u5230\u7684\u6027\u8d28$1$\u548c\u6027\u8d28$2$\uff0c\u6240\u4ee5\u5efa\u7acb\u4e00\u4e2a\u8282\u70b9$k$\uff0c\u4ee4\u5176\u4e8c\u4e2a\u513f\u5b50\u5206\u522b\u6307\u5411$S1$\u548c$S2$\u7684$root$\uff0c\u7136\u540e\u4ee4\u5176\u70b9\u6743\u4e3a$V_i$\u3002\n\n----------------------------\n**\u7b80\u5316\u5efa\u6811\u6d41\u7a0b\u5982\u4e0b\uff1a**\n\n-------\n```cpp\n\n> 1.\u6309\u7167\u8fb9\u6743\u6392\u5e8f\n\n> 2.\u5bf9\u4e8e\u4e00\u6761\u8fb9\u6240\u6307\u5411\u7684\u4e24\u4e2a\u70b9\uff0c\u5224\u65ad\u5176\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\uff0c\u82e5\u4e0d\u5728\uff0c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u628a\u8fd9\u6761\u8fb9\u5f53\u4f5c\u4e00\u4e2a\u6811\u70b9\uff0c\u65b0\u5efa\u8282\u70b9\uff0c\u6743\u503c\u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u4ee4\u5176\u4e24\u4e2a\u513f\u5b50\u6307\u5411\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u6811\u7684\u7956\u5148root\u3002\n\n> 3.\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8eu->v\u7684\u8def\u5f84\uff0c\u5176\u5728\u6700\u5927\u751f\u6210\u6811\u4e2d\u552f\u4e00\uff0c\u4e14\u5728\u91cd\u6784\u6811\u4e2d\u4e5f\u552f\u4e00\uff0c\u5373\u4ece\u53f6\u5b50\u8282\u70b9u\u5230\u53f6\u5b50\u8282\u70b9v\u7684\u8def\u5f84\u3002\n\n> 4.\u540c\u65f6\uff0c\u7531\u4e8e\u5efa\u6811\u6d41\u7a0b\u53ea\u662f\u5728Kruskal\u5efa\u6811\u6d41\u7a0b\u52a0\u4e86\u4e00\u6b65\uff0c\u6240\u4ee5\u6211\u4ecd\u7136\u6709\u524d\u9762\u6240\u63d0\u5230\u7684\u6027\u8d281\u548c\u6027\u8d282\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5bf9\u4e8e\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\uff0c\u82e5\u4e24\u4e2a\u513f\u5b50\u4e3a\u8fb9\uff0c\u5219\u513f\u5b50\u6743\u503c\u4e00\u5b9a\u6bd4\u7236\u4eb2\u5927\uff08\u6027\u8d282\uff09\u3002\u6240\u4ee5\u8be2\u95ee\u96c6\u5408S1\u5230\u96c6\u5408S2\u7684\u6700\u5c0f\u9650\u91cd\uff0c\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n> 5.\u5bf9\u4e8e\u7b2c4\u70b9\u53cd\u8fc7\u6765\u8003\u8651\uff0c\u8be2\u95eeu->v\u7684\u7b54\u6848\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8be2\u95ee\u91cd\u6784\u6811\u4e2d\uff0c\u70b9u\u548c\u70b9v\u7684LCA\u7684\u6743\u503c\n```\n---------\n\n\u5373\u5bf9\u4e8e\u8be2\u95ee$u->v$\u6700\u5c0f\u9650\u91cd\uff0c\u6211\u4eec\u6c42\u51fa\u5176$LCA$\uff0c\u7136\u540e\u8fd4\u56de$LCA$\u7684\u6743\u503c\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u95ee\u9898\u53d8\u6210\uff0c\u5728\u91cd\u6784\u7684\u6811\u4e0a\u6c42$LCA$\u4e86\u3002\u3002\u3002\n\n\u6240\u4ee5\u7528$Trajan$\u7b97\u6cd5\u5457......\n\n\u590d\u6742\u5ea6\u8c8c\u4f3c\u5c31\u6392\u5e8f\u65f6\u4f1a\u6709$log$\uff0c\u603b\u590d\u6742\u5ea6$O(MlogM)$\n\n\u4ee3\u7801\uff1a//\u7b14\u8005\u5199\u5f97\u6bd4\u8f83\u4e11......\u56e0\u4e3a\u5f31.......\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n\tchar cc = getchar(); int cn = 0;\n\twhile(cc > '9' || cc < '0') cc = getchar();\n\twhile(cc >= '0' && cc <= '9') cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn;\n}\nconst int M = 50000 * 2 + 5;\nstruct E{\n\tint to, w, next, from;\n\tbool operator < (const E &a) const{\n\t\treturn w > a.w;\n\t}// \u91cd\u5b9a\u4e49< \u53f7 \n}e[M * 2];\nstruct Tree{\n\tint son[2], fa, val, p, root; //p\u8868\u793a\u8fd9\u4e2a\u70b9\u4e3a\u8fb9\u8fd8\u662f\u70b9 \n}t[M * 2];\nint head[M], cnt, book[M], n, m, fa[M], tot, ans[M], top[M];\nint Head[M], To[M], Next[M], Id[M], tot1;\n//\u52a0\u8fb9 \nvoid add(int x, int y, int z)\n{\n\te[++cnt].to = y;  e[cnt].from = x;  e[cnt].w = z;\n\te[cnt].next = head[x];  head[x] = cnt;\n} \n//---\u5e76\u67e5\u96c6 \n//\u67e5\u627e \nint find(int x){\n\tif(x == fa[x]) return x;\n\treturn fa[x] = find(fa[x]);\n}\n//\u5408\u5e76 \nvoid merge(int x, int y){\n\tint u = find(x), v = find(y);\n\tfa[u] = v;\n}\n//---\u91cd\u6784\u6811--- \nint find_top(int x){ //\u8be2\u95eeroot\uff0c\u5373\u5f53\u524d\u70b9x\u7684\u7956\u5148 \n\twhile(t[x].fa != 0) x = t[x].fa;\n\treturn x;\n}\nvoid merge1(int x, int y, int w){//\u65b0\u5efa\u8282\u70b9\uff0c\u540c\u65f6\u5c06\u4e24\u68f5\u6811\u53d8\u4e3a\u6b64\u70b9\u513f\u5b50 \n\tt[++tot].son[0] = x;  t[tot].son[1] = y;\n\tt[tot].val = w;\n\tt[x].fa = tot; t[y].fa = tot;\n\tt[x].root = 0, t[y].root = 0, t[tot].root = 1;\n}\nvoid Kruskal(){//\u91cd\u6784\u6811 \n\tfor(int i = 1; i <= n; i++){\n\t\tfa[i] = i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n\t\tt[++tot].p = 1; t[tot].val = i; t[tot].root = 1, top[i] = i;//\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u6811\u521d\u59cb\u5316 \n\t}\n\tsort(e + 1, e + cnt + 1);//\u6392\u5e8f \n\tfor(int i = 1; i <= cnt; i++){\n\t\tint u = find(e[i].from), v = find(e[i].to);\n\t\tif(u != v){//\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6 \n\t\t\tmerge(u, v);\n\t\t\tint u1 = find_top(top[e[i].from]); //top\u8bb0\u5f55\u4e86i\u53f7\u70b9\uff0c\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\uff0c\u7956\u5148\u662f\u8c01\uff0c\u5728\u8be2\u95eei\u53f7\u7684\u65f6\u5019\u66f4\u65b0\u5176top\uff0c\u9632\u6b62\u8df3\u8dc3\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u7b97\u662f\u4e00\u4e2a\u5c0f\u4f18\u5316 \n\t\t\tint v1 = find_top(top[e[i].to]);\n\t\t\tmerge1(u1, v1, e[i].w);\n\t\t\ttop[e[i].to] = tot; top[e[i].from] = tot;\n\t\t}\n\t}\n}\n//---\u8be2\u95ee---Trajan \nvoid add_q(int x, int y, int z){\n\tTo[++tot1] = y;\tId[tot1] = z;\n\tNext[tot1] = Head[x]; Head[x] = tot1;\n}\nvoid dfs(int now){\n\tbook[now] = 1;\n\tif(t[now].p){\n\t\tfor(int i = Head[t[now].val]; i; i = Next[i])\n\t\t\tif(book[To[i]])  ans[Id[i]] = t[find(To[i])].val;\n\t\treturn ;\n\t}\n\tdfs(t[now].son[0]);  fa[t[now].son[0]] = now;\n\tdfs(t[now].son[1]);  fa[t[now].son[1]] = now;\n}\nvoid input(){\n\tn = read(); m = read();\n\tint x, y, z;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tx = read(); y = read(); z = read();\n\t\tadd(x, y, z);\n\t\tadd(y, x, z); \n\t}\n}\nvoid solve(){\n\tint p, x, y; \n\tp = read();\n\tfor(int i = 1; i <= p; i++)\n\t{\n\t\tx = read(); y = read();\n\t\tadd_q(x, y, i); add_q(y, x, i);\n\t}\n\tfor(int i = 1; i <= tot; i++) fa[i] = i;\n\tt[0].val = -1; //\u56e0\u4e3a\u53ef\u80fd\u56fe\u5e76\u4e0d\u8054\u901a\uff0c\u6240\u4ee5\u4f1a\u5efa\u51fa\u591a\u68f5\u91cd\u6784\u6811\uff0c\u7136\u540e\u4ee4\u8fd9\u4e9b\u91cd\u6784\u6811\u7684\u7236\u4eb2\u90fd\u4e3a0\u53f7\u70b9\u3002\u90a3\u4e48\u5176\u5b9e\u901a\u8fc70\u53f7\u70b9\u5230\u8fbe\u70b9\uff0c\u672c\u8d28\u4e0a\u662f\u5e76\u4e0d\u8fde\u901a\u7684\uff0cLCA\u4e3a0\uff0c\u5176LCA\u7684\u6743\u503c\u4e3a-1 \n\tfor(int i = 1; i <= tot; i++){\n\t\tif(t[i].root == 1)//\u8fd9\u4e2a\u70b9\u4e3a\u4e00\u4e2a\u6839\u8282\u70b9 \n\t\t\tdfs(i);//dfs\uff0ctrajan \n\t\t\tfa[i] = 0; //\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u7236\u4eb2\u6539\u4e3a0 \n\t}\n\tfor(int i = 1; i <= p; i++) printf(\"%d\\n\", ans[i]);\n}\nsigned main()\n{\n\tinput();\n\tKruskal();\n\tsolve(); \n\treturn 0;\n} \n```",
        "postTime": 1548516420,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# \u601d\u8def\n1.kruskal\u5efa\u6700\u5927\u751f\u6210\u6811\n\n2.dfs\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2afa[i][k]\u5b58\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u4e00\u4e2as[i][k]\u5b58\u8def\u5f84\u6700\u5c0f\u503c\n\n3.\u8dd1lca \u8f93\u51fa\n     \n##  \u4e00\u6b65\u4e00\u6b65\u5206\u5f00\u770b\n\n### \u7b2c\u4e00\u6b65\n\n\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528kruskal\u5efa\u6700\u5927\u751f\u6210\u6811\u5462? \u56e0\u4e3a\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\n```\n  \u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\n```\n\u7b80\u5316\u9898\u610f\u5c31\u662f\uff1a\u8ba9\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u4e14\u56e0\u4e3a\u9898\u76ee\u8f93\u5165\u7ed9\u51fa\u7684\u53ef\u80fd\u662f\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b58\u56fe\u5e76\u7528kruskal\u6784\u9020\u6700\u5927\u751f\u6210\u6811\n\n#### kruskal\u4ee3\u7801\n\n```cpp\nint f[500010];\t\t//\u5e76\u67e5\u96c6\u5b58\u7956\u5148\u6570\u7ec4\nPost e[500010];\t\t//\u5b58\u56fe\nvector<Post2> t[500010];//\u5b58\u6811\n\ninline int find(int x)\n{\n\tif(f[x] == x)\treturn x;\n\treturn f[x] = find(f[x]);\n}\n\nvoid bing(int x,int y)\n{\n\tint a = find(x), b = find(y);\n\tif(a == b)\treturn;\n\telse\t\tf[a] = b;\n}\n\nvoid kruskal()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i] = i;\n\t}\n\tsort(e+1,e+1+m,cmp);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(find(e[i].from) != find(e[i].to))\n\t\t{\n\t\t\tf[find(e[i].from)] = find(e[i].to);\n\t\t\t\n\t\t\tt[e[i].from].push_back(Post2(e[i].to,e[i].w));\n\t\t\tt[e[i].to].push_back(Post2(e[i].from,e[i].w));\n\t\t}\n\t}\n\treturn ;\n}\n```\n\n\n### \u7b2c\u4e8c\u6b65\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u7528kruskal\u5f97\u5230\u4e86\u6700\u5927\u751f\u6210\u6811\uff0c\u8fd9\u65f6\u70b9\u5230\u70b9\u7684\u8ddd\u79bb\u662f\u552f\u4e00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8dd1dfs\u7ef4\u62a4\u6240\u9700\u4fe1\u606f\uff0c\u4e3a\u4e4b\u540e\u7684lca\u505a\u51c6\u5907\n\n\u5e73\u65f6\u6211\u4eec\u505alca\u4e4b\u9700\u8981\u7ef4\u62a4fa\u6570\u7ec4\uff0cfa[i][j]\u5b58\u653e i\u4f4d\u7f6e\u76842^j\u7956\u5148\u3002\u73b0\u5728\u56e0\u4e3a\u6211\u4eec\u8981\u4fdd\u5b58\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ef4\u62a4s\u6570\u7ec4\uff0cs[i][j]\u5b58\u653e i\u5230i\u76842^j\u7956\u5148\u95f4\u7684\u6700\u5c0f\u503c\u3002\n\n\u753b\u4e2a\u56fe\u601d\u8003\u4e00\u4e0b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aaksr1l2.png)\n\n\u6839\u636e\u8fd9\u4e2a\u56fe\u4e0d\u96be\u63a8\u5f97 \n```\ns[u][i] = min(s[u][i-1],s[fa[u][i-1]][i-1]);\n```\n\n#### dfs\u4ee3\u7801\n\n```cpp\nint dep[500010];\t//\u6df1\u5ea6\nint fa[500010][30];\nint s[500010][30];\n\nvoid dfs(int u,int last)\t//u\u662f\u5f53\u524d\u70b9\uff0clast\u662fu\u7684\u7236\u4eb2\n{\n\t//cout << u << ' ' << last << endl;\n\t//cout << 1 << endl;\n\tdep[u] = dep[last]+1;\n\tfa[u][0] = last;\n\n\tcout << u << ' ' << last << endl;\n\tfor(int i=1;(1<<i)<dep[u];i++)\n\t{\n\t\ts[u][i] = min(s[u][i-1],s[fa[u][i-1]][i-1]);//\u66f4\u65b0s[u][i]\n\t\tfa[u][i] = fa[fa[u][i-1]][i-1];\t\t    //\u66f4\u65b0fa[u][i]\n\t}\n\t\n\tfor(int i=0;i<t[u].size();i++)\n\t{\n\t\tif(t[u][i].to != last)\n\t\t{\n\t\t\ts[t[u][i].to][0] = t[u][i].w;\t//s[x][0]\u7684\u503c\u6c38\u8fdc\u662fx\u5230\u81ea\u5df1\u7236\u4eb2\u7684\u8ddd\u79bb\n\t\t\tdfs(t[u][i].to,u);\n\t\t}\n\t}\n}\n```\n### \u7b2c\u4e09\u6b65\n\n\u54b1\u4eec\u5df2\u7ecf\u901a\u8fc7dfs\u5b58\u50a8\u4e86fa\u6570\u7ec4\u548cs\u6570\u7ec4\uff0c\u5148\u4e00\u6b65\u5c31\u662f\u6211\u4eec\u7684lca\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c42 \u4e24\u70b9\u95f4\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u6765\u6c42 \u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u4e0d\u7ba1\u5728\u4ec0\u4e48\u65f6\u5019\u79fb\u52a8\uff0c\u90fd\u8981\u4fee\u6539\u6700\u5c0f\u503c\u3002\n\n#### \u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6xje92wv.png)\n\n\u6211\u4eec\u8981\u6c42x\u5230y\u5230\u6700\u5c0f\u503c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d6jj4cv7.png)\n\n\u6211\u4eec\u53d1\u73b0x\u548cy\u4e0d\u5728\u540c\u4e00\u5c42\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c06x\u60f3\u4e0a\u79fb\u52a8\uff0c\u540c\u65f6\u66f4\u65b0\u6700\u5c0f\u503c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/39fv4o02.png)\n\nx\u548cy\u5728\u540c\u4e00\u5c42\u4e0a\u4e4b\u540e\uff0c\u6211\u4eec\u5c06x\u548cy\u540c\u65f6\u5411\u4e0a\u79fb\u52a8\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\n\n\u6240\u4ee5\u5c31\u663e\u800c\u6613\u89c1\u4e86\uff1a\n```cpp\nint lca(int x,int y)\n{\n\tint Min = 0x3f3f3f3f;\n\tif(dep[x] < dep[y])\tswap(x,y);//x\u7684\u6df1\u5ea6\u4e00\u5b9a\u8981\u5927\u4e8ey\u7684\u6df1\u5ea6\n\twhile(dep[x]!=dep[y])\n\t{\n\t\tMin = min(Min,s[x][lg[dep[x]-dep[y]]]);//x\u5411\u4e0a\u8df3\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\n\t\tx = fa[x][lg[dep[x]-dep[y]]];\n\t}\n\tif(x==y) return Min;\n\tfor(int i=lg[dep[x]];i>=0;i--)\n\t{\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t{\n        \t\t//\u540c\u65f6\u5411\u4e0a\u8df3\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\n\t\t\tMin = min(Min,s[x][i]);\n\t\t\tMin = min(Min,s[y][i]);\n\t\t\t\n\t\t\tx = fa[x][i];\n\t\t\ty = fa[y][i];\n\t\t}\n\t}\n\treturn min(Min,min(s[x][0],s[y][0]));\n}\n```\n### \u4e3b\u51fd\u6570\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u7528kruskal\u5904\u7406\u5b8c\u540e\u6709\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u6240\u4ee5\u8981for\u5faa\u73af\u8dd1dfs\n\n```cpp\nint main(void)\n{\n\tscanf(\"%d%d\",&n,&m);\n\t\n\tfor(int i=2;i<=n;i++)\t//\u9884\u5904\u7406lg\u51fd\u6570\n\t    lg[i]=lg[i-1]+((1<<lg[i-1])==(i>>1));\n\t    \n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&e[i].from,&e[i].to,&e[i].w);\t//\u5b58\u56fe\n\n\tkruskal();\t//\u8dd1kruskal\n\t\n\tfor(int i=1;i<=n;i++)\t\t//\u6b64\u5904\u56e0\u4e3a\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u6240\u4ee5\u8981\u5faa\u73af\u8dd1dfs\n\t{\n\t\tif(!dep[i])\tdfs(i,0);\n\t}\n\t\n\tint k,qi,zhong; \n\tscanf(\"%d\",&k);\n\t\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tscanf(\"%d%d\",&qi,&zhong);\n    \t\t//\u5982\u679c\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u8dd1lca,\u5426\u5219\u6ca1\u6709\u8def\u5f84\u8fde\u63a5\uff0c\u8f93\u51fa-1\n\t\tif(find(qi) == find(zhong))\n\t\t\tprintf(\"%d\\n\",lca(qi,zhong));\n\t\telse\n\t\t\tprintf(\"-1\\n\");\n\t}\n\treturn 0;\n}\n\n```\n\n\u8fd9\u6837\u7a0b\u5e8f\u5c31OK\u4e86\uff01\u603b\u4f53\u6765\u8bf4\uff0c\u53ea\u8981\u770b\u51fa\u4e86\u6700\u5927\u751f\u6210\u6811\uff0c\u8fd9\u4e2a\u9898\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff01\n\n \u6700\u540e\uff0c\u611f\u8c22[shao_ping](https://www.luogu.org/space/show?uid=89785)\u5927\u4f6c\u7684\u4fee\u6539\u3002\n\n\u5e0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u901a\u8fc7qwq!\n",
        "postTime": 1569596170,
        "uid": 63423,
        "name": "ycf_remake",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# \u795d\u5927\u5bb6 $NOIP2018 rp++$\n\n**\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u53d6\u5f97\u4ee4\u81ea\u5df1\u6ee1\u610f\u7684\u6210\u7ee9\u5416**\n\n****\n\n\u7136\u540e\u6211\u4eec\u5f00\u59cb\u8bb2\u9898\u5427\n\n# \u9898\u76ee\u63cf\u8ff0\n\nA\u56fd\u6709n\u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece1\u5230n\uff0c\u57ce\u5e02\u4e4b\u95f4\u6709m\u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\n\n\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002\u73b0\u5728\u6709q\u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\n\n\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\n\n\u7269\u3002\n\n\u9996\u5148\u6211\u4eec\u6765\u5256\u6790\u9898\u610f,\u8fd9\u9898\u5c31\u662f\u8ba9\u6211\u4eec\u6c42\u56fe\u4e2d\u4e00\u4e2a\u70b9u \u5230\u53e6\u4e00\u4e2a\u70b9v \u7684\n\n\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u7684\u6700\u5927\u503c(\u8def\u5f84\u6709\u591a\u6761)\n\n\u4e00\u5f00\u5c40\u6211\u4eec\u5c31\u6709\u4e00\u4e2a\u975e\u5e38\u5999\u7684\u601d\u8def\n\n\u7ecf\u8fc7\u753b\u56fe\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0,(~~\u663e\u7136~~)\n\n** _\u4eceu\u8fd0\u5230v,\u6ee1\u8db3\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u7684\u503c\u6700\u5927_ ,**\n\n** _\u8fd9\u6837\u7684\u8def\u5f84\u5c31\u662fu,v\u6240\u5728\u7684\u6700\u5927\u751f\u6210\u6811\u4e0a,\u4eceu\u5230v\u7684\u6811\u4e0a\u8def\u5f84_ **\n\n\u6211\u4eec\u53ef\u4ee5\u6765\u8bc1\u660e\u4e00\u4e0b:\n\n\u5bf9\u4e8e\u4e24\u4e2a\u70b9u,v\n\n\u5982\u679c\u6700\u5927\u751f\u6210\u6811\u4e0a,\u4eceu\u5230v\u7684\u8def\u5f84\u7684\u6700\u5c0f\u8fb9E,\u4e0d\u662f\u6700\u5927\u7684\n\n\u90a3\u4e48\u6309\u6b64\u63a8\u7406,\u4e00\u5b9a\u5b58\u5728\u53e6\u4e00\u6761\u8fb9'E,\u65e2\u6ee1\u8db3\u8fb9\u6743\u6bd4E\u5927,\u53c8\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\n\n\u662f\u6700\u5c0f\u8fb9.\n\n\u53ef\u662f\u5982\u679c\u771f\u7684\u5b58\u5728\u8fd9\u6837\u7684\u8fb9'E,\u90a3\u4e48\u5b83\u5728Kruskal\u8fdb\u884c\u8d2a\u5fc3\u9009\u8fb9\u65f6,\n\n\u5c31\u4e00\u5b9a\u4f1a\u88ab\u9009\u51fa\u6765(Kruskal\u4f18\u5148\u6311\u5927\u7684\u8fb9\u9009)\n\n\u7136\u800c\u5b83\u5e76\u6ca1\u6709\u88ab\u9009\u51fa\u6765,\u6240\u4ee5\u8fd9\u6837\u7684\u8fb9E'\u4e0d\u5b58\u5728\n\n\u6545\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a , u,v\u7684\u6811\u4e0a\u8def\u5f84\u7684\u6700\u5c0f\u8fb9\u5728\u6240\u6709\u6700\u5c0f\u8fb9\u4e2d\n\n\u4e00\u5b9a\u662f\u6700\u5927\u7684\n\n\u8bc1\u6bd5\n\nKruskal\u628a\u6700\u5927\u751f\u6210\u6811\u6c42\u51fa\u6765\u540e,\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u6811\u4e86,\n\n\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u6211\u4eec\u90fd\u5728\u6c42\u51fa\u6765\u7684\u6811\u4e0a\u5b8c\u6210\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b,\u5982\u679c\u7528\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u8fb9\u5e76\u4e0d\u80fd\u8fde\u901a\u6574\u5f20\u56fe\n\n\u90a3\u4e48\u6700\u5927\u751f\u6210\u6811\u7684\u8fb9\u80af\u5b9a\u4e5f\u4e0d\u80fd\u4f7f\u56fe\u8fde\u901a\n\n\u6240\u4ee5\u8fd9\u65f6\u5019\u6574\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u68ee\u6797\n\n\u8fd9\u662f\u4e00\u79cd\u6bd4\u8f83\u9ebb\u70e6\u7684\u7279\u6b8a\u60c5\u51b5,\u4e0d\u8fc7\u6211\u4eec\u53ea\u9700\u8981\u628a\u68ee\u6797\u770b\u6210\u4e00\u68f5\u4e00\u68f5\u6811(\u7528\u5e76\u67e5\u96c6\u4fdd\u5b58\u6811)\n\n\n\u6bcf\u6b21\u53ea\u9488\u5bf9\u4e00\u68f5\u6811\u8fdb\u884c\u5904\u7406\u5373\u53ef,\u4e8e\u662f\u6211\u4eec\u4fbf\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\n\n** _\u5bf9\u4e8e\u4e24\u4e2a\u70b9u,v,\u6c42\u4e24\u70b9\u6811\u4e0a\u8def\u5f84\u7684\u6700\u5c0f\u8fb9_ **\n\n\n**\n _\u6ce8:(\u5982\u679cu,v\u4e0d\u5728\u540c\u4e00\u68f5\u6811\u4e0a,\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6O(1)\u5224\u65ad\u51fa\u6765,\u7136\u540e\u8f93\u51fa-1\u5373\u53ef)_ **\n\n\n\u65e2\u7136\u7b54\u6848\u4fe1\u606f\u4e0e\u6811\u4e0a\u8def\u5f84\u6709\u5173,\u8fd9\u65f6\u6211\u4eec\u5f88\u81ea\u7136\u5730\u53ef\u4ee5\u60f3\u5230LCA,\n\n\u5728\u6c42u,v\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u65f6,\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728LCA\u8bbf\u95ee\u6811\u4e0a\u8def\u5f84\u65f6\u628a\u6700\u5c0f\u8fb9\u6c42\u51fa\u6765\n\n\u53ef\u662f\u56e0\u4e3aLCA\u7684\u8fc7\u7a0b\u662f\u500d\u589e\u7684,\u6240\u4ee5\u6211\u4eec\u5982\u679c\u4e0d\u7ecf\u8fc7\u4e00\u4e9b\u5904\u7406,\u6c42\u6700\u5c0f\u8fb9\n\n\u662f\u5f88\u9ebb\u70e6\u7684\n\n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u987a\u7740LCA\u500d\u589e\u7684\u601d\u60f3,\u628a\u6c42\u6700\u5c0f\u8fb9\u7684\u8fc7\u7a0b\u4e5f\u8f6c\u5316\u4e3a\u500d\u589e\u7684:\n\n\u5177\u4f53\u505a\u6cd5\u4e3a:\n\n\u5f00\u4e00\u4e2amin_edge[i][j]\u6570\u7ec4,\u50a8\u5b58\u7684\u662f\u7ed3\u70b9i\u5230i\u76842^j\u500d\u7956\u5148\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\n\n\n\u6a21\u4effLCA\u65f6\u6c42f[i][j]\u7684\u601d\u60f3, **min_edge[i][j] = **\n\n**min(min_edge[i][j-1],min_edge[f[i][j-1]][j-1])**\n\n\u7531\u4e8emin_edge\u6570\u7ec4\u4e0eLCA\u6570\u7ec4\u6c42\u6cd5\u7684\u76f8\u4f3c\u6027,\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21DFS\n\n\u5c31\u628a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u4fe1\u606f\u9884\u5904\u7406\u51fa\u6765\n\n\u4ee5\u4e0a\u5de5\u4f5c\u505a\u5b8c,\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684\u8be2\u95ee,\u6211\u4eec\u5229\u7528\u5df2\u6709\u7684\u4fe1\u606f\u8fdb\u884c\u64cd\u4f5c\n\n\u6c42\u89e3\u5c31\u5f88\u7b80\u5355\u4e86\n\n\u6c42Min_Edge(u,v)\u7684\u51fd\u6570\u4e2d\u6709\u5f88\u591a\u7ec6\u8282,\u5177\u4f53\u53ef\u53c2\u8003\u4ee3\u7801\n\n\u6700\u5c0f\u8fb9\u53ef\u80fd\u5b58\u5728\u4e8e\n\n1.u\u5f80\u4e0a\u8dd1\u5230\u4e0ev\u76f8\u540c\u7684\u6df1\u5ea6\u7684\u8def\u5f84\u4e0a\n\n2.u,v\u4e00\u8d77\u671d\u7740LCA\u5f80\u4e0a\u8dd1\u7684\u8def\u4e0a\n\n3.**u,v\u6700\u540e\u9759\u6b62\u5728LCA\u4e0b\u65b9\u65f6,\u8fde\u63a5LCA\u548cu,v\u7684\u90a3\u4e24\u6761\u8fb9\u4e0a**\n\n\u4ee3\u7801\u5f88\u957f,\u5b9e\u73b0\u65f6\u4e00\u4e9b\u7ec6\u8282\u4e00\u5b9a\u8981\u6ce8\u610f,\u5c24\u5176\u662f\u5728\u9884\u5904\u7406\n\nf[i][j]\u548cmin_edge[i][j]\u6570\u7ec4\u65f6\n\n\u613f\u5927\u5bb6\u4e00\u904dAC\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define clear(a) memset(a,0,sizeof a)\n#define set_max(a) memset(a,0x3f,sizeof a)\n#define set_min(a) memset(a,~0x3f,sizeof a)\n\nusing namespace std;\n\ntemplate<typename T>inline void chkmax(T & a,T b){if(a < b) a = b;}\ntemplate<typename T>inline void chkmin(T & a,T b){if(a > b) a = b;}\n\ntemplate<typename T>\ninline T read()\n{\n    int res = 0 , flag = 1;\n    char ch = getchar();\n    while(!isdigit(ch))\n    {\n        if(ch == '-') flag = -1;\n        ch = getchar();\n    }\n    while(isdigit(ch))\n    {\n        res = (res << 3) + (res << 1) +ch - '0';\n        ch = getchar();\n    }\n    return res * flag;\n}\n\ntemplate<typename T>\ninline void write(T x)\n{\n    if(x/10) write(x/10);\n    putchar(x%10+'0');\n}\n\nconst int INF=0x3f3f3f3f;\nconst int N=1e4;\nconst int M=5e4;\nint n,m,q,edge_num,head[N+5],f[N+5][20+5];\nint mfa[N+5],dep[N+5],min_edge[N+5][20+5];\n\nstruct node\n{\n    int begin;\n    int end;\n    int value;\n}ed[2*M+5];\n\nstruct Edge\n{\n    int next;\n    int to;\n    int value;\n}edge[2*M+5];\n\ninline void Input()\n{\n    n = read<int>(); m = read<int>();\n    for(register int i = 1 ; i <= m ;++i)\n    {\n        ed[i].begin = read<int>();\n        ed[i].end = read<int>();\n        ed[i].value = read<int>();\n    }\n}\n\ninline int find(int x){if(mfa[x] != x) return mfa[x] = find(mfa[x]);else return x;}\n\ninline void union0(int x,int y){mfa[find(x)] = find(y);}\n\ninline bool comp(node x,node y){return x.value > y.value;}\n\ninline void CSH(){for(register int i = 1 ; i <= n ; ++i) mfa[i] = i;}\n\ninline void add(int begin,int end,int value)\n{\n    edge[++edge_num] = (Edge){head[begin],end,value};\n    head[begin] = edge_num;\n}\n\ninline void DFS(int u,int fa,int pre_edge)\n{\n    f[u][0] = fa;\n    min_edge[u][0] = pre_edge;\n    dep[u] = dep[fa] + 1;\n    \n    for(register int i = 1 ; i <= 20 ; ++i)\n        f[u][i] = f[f[u][i-1]][i-1],\n        min_edge[u][i] = min( min_edge[u][i-1] , min_edge[f[u][i-1]][i-1]);\n\n    for(register int i = head[u] ; i ; i = edge[i].next)\n    {\n        int v = edge[i].to;\n        if(v == fa) continue;\n        DFS(v,u,edge[i].value);\n    }\n}\n\ninline int Min_Edge(int x,int y)\n{\n    int ans = INF;\n    if(dep[x] < dep[y]) swap(x,y);\n\n    for(register int i = 20 ; i >= 0 ; --i)\n    {\n        if(dep[f[x][i]] >= dep[y])\n        {\n            ans = min( ans , min_edge[x][i] );\n            x = f[x][i];\n        }\n        if(x == y)\n            return ans;\n    }\n\n    for(register int i = 20 ; i >= 0 ; --i)\n    {\n        if(f[x][i] != f[y][i])\n        {\n            ans = min( ans , min( min_edge[x][i] , min_edge[y][i]) );\n            x = f[x][i];\n            y = f[y][i];\n        }\n    }\n    \n    ans = min( ans , min( min_edge[x][0] , min_edge[y][0]) );\n    return ans;\n}\n\ninline void Solve()\n{\n    sort(ed+1,ed+1+m,comp);\n    \n    CSH();\n\n    for(register int i=1,k=0; i <= m ; ++i)\n    {\n        int u = ed[i].begin; int v = ed[i].end; int w = ed[i].value;\n        if(find(u) == find(v)) continue;\n        union0(u,v);\n        k++;\n        add(u,v,w); add(v,u,w);\n        if(k == n-1) break;\n    }\n\n    for(register int i = 1 ; i <= n ; ++i)\n    if(mfa[i] == i)\n        DFS(i,i,INF);\n    \n    q = read<int>();\n    for(register int i = 1 ; i <= q ; ++i)\n    {\n        int x = read<int>(); int y = read<int>();\n        if(find(x) != find(y)){puts(\"-1\");continue;}\n        write(Min_Edge(x,y));\n//\t\tcout << Min_Edge(x,y) << endl;\n        putchar('\\n');\n    }\n    \n}\n\nint main()\n{\n    Input();\n    Solve();\n\n    return 0;\n}\n\n```",
        "postTime": 1541598664,
        "uid": 86110,
        "name": "\u9752\u706f\u591c\u6e38",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u7206\u4e86\u4e00\u665a\u4e0a\u96f6qwq\u662f\u6211\u849f\u84bb\u4e86~~\n\u4e3a\u4e86\u52a0\u6df1\u8bb0\u5fc6\u5c31\u5199\u4e86\u7bc7\u9898\u89e3\uff0c\u671b\u8fc7qwq\n\n\u8bdd\u4e0d\u591a\u8bf4\u5148\u8bf4\u8bf430\u5206\u505a\u6cd5\u2014\u2014Floyd\uff0c\u663e\u7136\u8f6c\u79fb\u65b9\u7a0b\u662f$val[i][j]=min(val[i][j],val[i][k]+val[k][j])$\u4f46\u662fn^3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u663e\u7136\u4e0d\u591f\u7684\u3002\n\n50\u5206\uff1a\u663e\u7136\u8dd1Floyd\u6d6a\u8d39\u4e86\u592a\u5927\u7684\u7a7a\u95f4\uff0c\u5728\u539f\u56fe\u4e0a\u5efa\u7acb\u6700\u5927\u751f\u6210\u6811(Kruskal\u6216Prim\u4e2a\u4eba\u63a8\u8350Kruskal\u8054\u8d5b\u4e2d\u6548\u7387\u8f83\u9ad8)\uff0c\u4e3a\u4ec0\u4e48\u5efa\u7acb\u6700\u5927\u751f\u6210\u6811\u5462\uff1f\u56e0\u4e3a\u6700\u5927\u751f\u6210\u6811\u53ef\u4ee5\u4f7f\u4e24\u70b9\u95f4\u6700\u5c0f\u8fb9\u6743\u6700\u5927\uff0c~~\u65e0\u6bd4\u7684\u5207\u5408\u9898\u610f~~\uff0c\u5e76\u5728\u6811\u4e0a\u8dd1SPFA\uff0c\u4e00\u904d\u627e\u5230\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u540c\u6837\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u8fd8\u662f\u4e0d\u80fd\u6ee1\u8db31e4\u7684\u8981\u6c42\u3002\n\n100\u5206\uff1a\u6700\u5927\u751f\u6210\u6811+\u500d\u589eLCA ~~\u6211\u4e0d\u4f1a\u6811\u5256~~\n\n\u5982\u679c\u4f60\u4e0d\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u7528\u6700\u5927\u751f\u6210\u6811\uff0c\u8bf7\u770b\u8fd9\u91cc\u3002\u6211\u4eec\u8981\u4f7f\u8f7d\u8d27\u91cf\u6700\u5927\uff0c\u5373\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u8fb9\u6743\u6700\u5927\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u4f7f\u6bcf\u4e00\u6761\u8fb9\u90fd\u5c3d\u91cf\u5927\uff0c\u7406\u89e3\u5230\u8fd9\uff0c\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u7684\u601d\u60f3\u4e86\u3002\n\n\n\u5982\u679c\u4f60\u4e0d\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u8981\u7528LCA\uff0c\u8bf7\u770b\u8fd9\u91cc\u3002\u4e0d\u59a8\u8fd9\u6837\u60f3\uff0c\u5728\u6811\u4e0a\u5f00\u8f66\u4eceA\u70b9\u5230B\u70b9\uff0c\u8f66\u7684\u8def\u5f84\u662f\u4e0d\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4eceA\u548cB\u540c\u65f6\u5f00\u8f66\u76f4\u5230\u4ed6\u4eec\u76f8\u9047\u7684\u8def\u5f84\u5462\uff1f\u56e0\u4e3a\u5728\u6811\u4e0a\u4e24\u70b9\u95f4\u6709\u4e14\u4ec5\u6709\u552f\u4e00\u8def\u5f84\u3002\u800c\u4ed6\u4eec\u7684\u76f8\u9047\u70b9\u5c31\u662f\u4ed6\u4eec\u7684LCA\u554a\u3002\n\n\u5230\u8fd9\u6211\u4eec\u5c31\u7406\u89e3\u5b8c\u4e86\u601d\u8def\u3002\u522b\u6025\uff0c\u63a5\u7740\u5f80\u4e0b\u770b\u5427\u3002\n\n\u5728\u8dd1\u6700\u5927\u751f\u6210\u6811\u7684\u65f6\u5019\u6211\u4eec\u5148\u7528\u8fb9\u96c6\u6570\u7ec4\u5b58\u56fe( _\u8fd9\u91cc\u662f\u56e0\u4e3a\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u4ee5\u540e\u8dd1\u751f\u6210\u6811\u5c31\u4f1a\u975e\u5e38\u7684\u9ebb\u70e6\u800c\u4e14\u94fe\u63a5\u4e86\u5f88\u591a\u4e4b\u540e\u6ca1\u6709\u7528\u7684\u8fb9_ )\uff0c\u6bcf\u52a0\u4e00\u6761\u8fb9\u8fdb\u5165\u6700\u5927\u751f\u6210\u6811\uff0c\u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u5230\u94fe\u5f0f\u524d\u5411\u661f\u4e2d( _\u94fe\u5f0f\u524d\u5411\u661f\u662f\u76ee\u524d\u90bb\u63a5\u8868\u5b58\u50a8\u65b9\u5f0f\u4e2d\u6548\u7387\u6700\u9ad8\u7684~~\u800c\u4e14\u5b83\u6bd4\u94fe\u8868\u597d\u7801~~_ )\uff0c\u8fd9\u6837\u6700\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e00\u4e2a\u65b0\u56fe\uff0c\u51c6\u786e\u7684\u8bf4\u662f\u4e00\u9897\u6700\u5927\u751f\u6210\u6811\u3002\u6211\u4eec\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u6839\u636e\u8be2\u95ee\u8dd1LCA\uff0c\u9884\u5904\u7406\u51fa\u5411\u4e0a\u8df32^i\u6b65\u65f6\u7ecf\u8fc7\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\u76f4\u5230\u8df3\u5230LCA\u4ee5\u540e\uff0c\u90a3\u4e48\u73b0\u5728\u50a8\u5b58\u7684\u6700\u5c0f\u8fb9\u6743\u5c31\u662f\u6700\u5927\u8f7d\u91cd\u91cf\u3002\n\n\u770b\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define dop(i,a,b) for(int i=a;i>=b;i--)\n#define def 50005\n#define inf 10005\n#define maxn 999999\nusing namespace std;\nint n,m,q;\n\nstruct EDGE{//\u94fe\u5f0f\u524d\u5411\u661f\u7ed3\u6784\u4f53\n\tint nxt,\n\t\tto,\n\t\tdis;\n}e[2*def];\nint tot,head[inf];\ninline void add(int f,int t,int d)\n{\n\te[++tot].nxt=head[f];\n\te[tot].to=t;\n\te[tot].dis=d;\n\thead[f]=tot;//\u4e66\u4e0a\u7684\u6807\u51c6\u5199\u6cd5\uff0c\u6bd5\u7adf\u5b83\u592a\u9ad8\u6df1\u6211\u4e5f\u4e0d\u662f\u5f88\u7406\u89e3qwq\uff0c\u80cc\u8fc7\u5c31\u597d\n}\n\nint fa[inf],cnt=0;\nstruct E{//\u8fb9\u96c6\u6570\u7ec4\u7684\u7ed3\u6784\u4f53\n\tint u,\n\t\tv,\n\t\tdis;\n}eg[def];\ninline bool cmp(E x,E y)\n{\n\treturn x.dis>y.dis;//\u6700\u5927\u751f\u6210\u6811\u7684\u91cd\u8f7dsort\u6bd4\u8f83\u51fd\u6570\uff0c\u6700\u5927\u6700\u5c0f\u53ea\u8981\u6539\u53d8\u5927\u4e8e\u5c0f\u4e8e\u53f7\u5c31\u597d\u4e86\n}\ninline int getf(int x)//kruskal\u4e2d\u5e76\u67e5\u96c6\u627e\u7239\u51fd\u6570\n{\n\tif(fa[x]==x)\n\t\treturn x;\n\telse\n\t\treturn fa[x]=getf(fa[x]);\n}\ninline void kruskal()//kruskal\u6700\u5927\u751f\u6210\u6811\n{\n\tsort(eg+1,m+1+eg,cmp);\n\trep(i,1,n)\n\t\tfa[i]=i;\n\trep(i,1,m)\n\t{\n\t\tint u=getf(eg[i].u);\n\t\tint v=getf(eg[i].v);\n\t\tif(u==v)\n\t\t\tcontinue;\n\t\tfa[v]=u;\n\t\tadd(u,v,eg[i].dis);//\u6ce8\u610f\u8fd9\u91cc\uff0c\u56e0\u4e3a\u6811\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u65e0\u5411\u56fe\u6240\u4ee5\u8981\u52a0\u4e24\u904d\n\t\tadd(v,u,eg[i].dis);\n\t\tcnt++;\n\t\tif(cnt==n-1)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nint f[inf][25],dp[inf],val[inf][25],vis[inf];\n//f\u6570\u7ec4\u8868\u793ai\u8282\u70b9\u76842^j\u7956\u5148\u662f\u8c01\u3002dp\u6570\u7ec4\u8868\u793ai\u8282\u70b9\u7684\u6df1\u5ea6\u3002\n//val\u6570\u7ec4\u8868\u793ai\u8282\u70b9\u5230i\u8282\u70b9\u76842^j\u7956\u5148\u7684\u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u6743\u3002\n//vis\u6570\u7ec4\u8868\u793adfs\u9884\u5904\u7406\u8fc7\u7a0b\u4e2di\u8282\u70b9\u662f\u5426\u88ab\u641c\u7d22\u8fc7(1\u4e3a\u641c\u7d22\u8fc7\uff0c0\u4e3a\u672a\u641c\u7d22\u8fc7)\u3002\ninline void dfs(int x)//\u9884\u5904\u7406\n{\n\tvis[x]=1;\n\t\n\tfor(int i=head[x];i;i=e[i].nxt)//\u904d\u5386\u90bb\u63a5\u8868\n\t{\n\t\tint to=e[i].to;\n\t\tif(vis[to])\n\t\t\tcontinue;\n\t\tdp[to]=dp[x]+1;//\u5c06to\u8282\u70b9\u7684\u6df1\u5ea6\u8bbe\u4e3a\u4ed6\u7239\u4e5f\u5c31\u662fx\u8282\u70b9\u7684\u6df1\u5ea6\u52a01\n\t\tf[to][0]=x;//\u5c06\u8ddd\u79bbto\u8282\u70b92^0=1\u7684\u7956\u5148(\u5c31\u662fto\u7684\u7239)\u8bbe\u4e3ax\n\t\tval[to][0]=e[i].dis;//\u5c06to\u5230\u7236\u4eb2\u7684\u4ef7\u503c\u8bbe\u4e3a\u8fb9\u6743(\u56e0\u4e3a\u53ea\u6709\u4e00\u6761\u8fb9\u4e0d\u9700\u8981\u8003\u8651\u522b\u7684)\n\t\tdfs(to);//\u9012\u5f52\n\t}\n}\ninline int lca(int x,int y)//lca\u5566\uff01\uff01\n{\n\tint ans=maxn;//\u5c06\u7b54\u6848\u8bbe\u4e3a\u65e0\u7a77\u5927\n\tif(getf(x)!=getf(y))//\u5982\u679cx\u548cy\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u4ed6\u4eec\u80af\u5b9a\u5230\u8fbe\u4e0d\u4e86\uff0c\u8fd4\u56de-1\n\t\treturn -1;\n\tif(dp[x]>dp[y])\n\t\tswap(x,y);//\u4fdd\u8bc1y\u7684\u6df1\u5ea6\u5927\u4e8ex\uff0c\u5373x\u6c38\u8fdc\u5728y\u7684\u4e0a\u65b9\n\tdop(i,20,0)//\u5148\u5c06y\u8df3\u5230\u548cx\u4e00\u6837\u7684\u9ad8\u5ea6\n\t{\n\t\tif(dp[x]<=dp[y]-(1<<i))//1<<i\u8868\u793a2^i\uff0c\u7528\u4f4d\u8fd0\u7b97\u4f1a\u5feb\u4e00\u4e9b\n\t\t{\n\t\t\tans=min(ans,val[y][i]);//\u6ce8\u610f\u4e00\u5b9a\u8981\u5148\u66f4\u65b0ans\u518d\u5411\u4e0a\u8df3\uff01\uff01\uff01\uff01\u6211\u5c31\u5728\u8fd9\u5361\u4e86\u4e00\u665a\u4e0a\n\t\t\ty=f[y][i];//\u53ef\u4ee5\u8df3\u4e86\n\t\t}\n\t}\n\tif(x==y)//\u5982\u679cy\u8df3\u5230\u4e86x\uff0c\u90a3\u4e48x\u662fy\u7684\u7956\u5148\uff0c\u76f4\u63a5\u8fd4\u56deans\n\t\treturn ans;\n\tdop(i,20,0)\n\t{\n\t\tif(f[x][i]!=f[y][i])//\u76f4\u5230x\u548cy\u7684\u7956\u5148\u4e00\u6837\uff0c\u4e0d\u7136\u5c31\u66f4\u65b0ans\uff0c\u5411\u4e0a\u8df3\n\t\t{\n\t\t\tans=min(ans,min(val[x][i],val[y][i]));//\u4e5f\u4e00\u6837\u8981\u6ce8\u610f\u5148\u66f4\u65b0\uff01\uff01\uff01\uff01\u800c\u4e14\u8fd9\u91cc\u662f\u4e09\u4e2a\u6570\u6bd4\u8f83\uff08\u5206\u522b\u662fx\u5230x\u7956\u5148\u7684\u4ef7\u503c\uff0cy\u5230y\u7956\u5148\u7684\u4ef7\u503c\uff0cans\uff09\u4e00\u5b9a\u8981\u5199\u6210min(a,min(b,c))\uff0c\u5199\u6210min(a,b,c)\u662f\u975e\u6cd5\u7684\uff01\uff01\uff01\uff01\n\t\t\tx=f[x][i];//\u4e00\u8d77\u5411\u4e0a\u8df3\n\t\t\ty=f[y][i];//\u8df3\u5440\u8df3\n\t\t}\n\t}//\u7ec8\u4e8e\u8df3\u5b8c\u4e86\n\tans=min(ans,min(val[x][0],val[y][0]));//\u628aans\u66f4\u65b0\u6210ans\u3001x\u7684\u7239\u7684\u4ef7\u503c\u3001y\u7684\u7239\u7684\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002\u56e0\u4e3a\u8fd9\u91cc\u4e3a\u4e86\u907f\u514d\u8df3\u8fc7\u4e86\uff0c\u662f\u8df3\u5230\u4e86LCA\u7684\u4e0b\u9762\u4e00\u5c42\n\treturn ans;\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\t//memset(val,maxn,sizeof(val));\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,m)\n\t{\n\t\tint f,t,d;\n\t\tscanf(\"%d%d%d\",&f,&t,&d);\n\t\teg[i].u=f;\n\t\teg[i].v=t;\n\t\teg[i].dis=d;\n\t}\n\tkruskal();\n\trep(i,1,n)//\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684val\u548c\u7239\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tdfs(i);\n\t\t\tf[i][0]=i;\n\t\t\tval[i][0]=maxn;\n\t\t}\n\t\t\n\t}\n\trep(j,1,20)\t\n\t\trep(i,1,n)//\u500d\u589e\u9884\u5904\u7406\n\t{\n\t\tf[i][j]=f[f[i][j-1]][j-1];//\u500d\u589e\u7684\u6838\u5fc3\uff01\uff01\n\t\tval[i][j]=min(val[i][j-1],val[f[i][j-1]][j-1]);//\u8fd9\u91cc\u53ea\u662f\u628a\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u7a0b\u7a0d\u5fae\u6539\u52a8\u4e00\u4e0b\n\t}\n\tscanf(\"%d\",&q);\n\trep(i,1,q)//\u5f00\u59cb\u8be2\u95ee\u5566\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tprintf(\"%d\\n\",lca(x,y));\n\t}\n\treturn 0;//\u5706\u6ee1\u4e86\n}\n\n```\n\u6b22\u8fce\u6307\u51fa\u9519\u8bef\uff01\n\n\u7801\u5b57\u4e0d\u5bb9\u6613\u6c42\u8fc7qwq\uff01\uff01\uff01",
        "postTime": 1534589144,
        "uid": 25053,
        "name": "King_Han",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u8fd9\u91cc](https://www.cnblogs.com/owencodeisking/p/9528042.html)\n\n\u770b\u5230\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u795e\u5947\u7801\u98ce\u2026\u2026\u6211\u51b3\u5b9a\u53d1\u4e00\u7bc7\u7801\u98ce\u6b63\u5e38\u7684\u9898\u89e3~~\u9020\u798f\u4eba\u7c7b~~\n\n\u8fd9\u9898\u7684\u505a\u6cd5\u4e5f\u975e\u5e38\u7ecf\u5178\uff0c\u6700\u5927\u751f\u6210\u6811$+LCA$\uff0c\u76f8\u5f53\u4e8e\u5148\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u5728LCA\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u6700\u5c0f\u7684\u8fb9\u6743\n\n\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u70b9\uff1a\n\n```cpp\ntestdata.in\n7 8\n1 2 2\n1 3 5\n3 4 4\n4 4 2\n3 5 3\n6 7 4\n1 3 3\n4 5 8\n8\n1 2 \n1 4 \n1 3 \n1 5 \n1 6 \n2 5 \n3 5 \n6 7\ntestdata.out\n2\n4\n5\n4\n-1\n2\n4\n4\n```\n\u56de\u5230\u9898\u9762\uff1a\u6ce8\u610f\uff1a $x$\u4e0d\u7b49\u4e8e$y$\uff0c**\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def** \u3002\n\n\u867d\u7136$Kruskal$\u4e0d\u4f1a\u6302\u6389\u2026\u2026\u4f46\u662f\u51fa\u9898\u4eba\u9020\u6570\u636e\u771f\u4e0d\u4e25\u8c28\n\n$Code\\ Below:$\n```cpp\n#include <bits/stdc++.h>\n#define INF 99999999\nusing namespace std;\nconst int maxn=10000+10;\nconst int maxm=50000+10;\nint n,m,q,head[maxn],f[maxn],tot;\n//\u5982\u9898\u76ee\u6240\u793a,\u5b58\u50a8\u94fe\u5f0f\u524d\u5411\u661f\u548c\u5e76\u67e5\u96c6\nint fa[maxn][16],w[maxn][16],dep[maxn],rt,t;\n//fa[i][j]\u8868\u793a\u7b2ci\u4e2a\u7ed3\u70b9\u5411\u4e0a\u8df32^i\u4e2a\u7ed3\u70b9,dep[i]\u5b58\u50a8\u7b2ci\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6\nstruct Edge{\n    int x,y,w;\n}e[maxm];\nstruct node{\n    int to,next,val;\n}tree[maxm<<1];\ninline bool cmp(Edge a,Edge b){//cmp\n    return a.w>b.w;\n}\ninline int read(){//\u8bfb\u5165\u4f18\u5316\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x*f;\n}\ninline void swap(int &a,int &b){int t=a;a=b;b=t;}//\u4ea4\u6362\ninline void add(int x,int y,int w){//\u5b58\u8fb9\n    tree[++tot].to=y;\n    tree[tot].val=w;\n    tree[tot].next=head[x];\n    head[x]=tot;\n}\nint find(int x){//\u5e76\u67e5\u96c6\n    if(x!=f[x])\n        f[x]=find(f[x]);\n    return f[x];\n}\ninline void Kruskal(){//\u6700\u5927\u751f\u6210\u6811\n    for(int i=1;i<=n;i++)\n        f[i]=i;\n    sort(e+1,e+m+1,cmp);\n    int ans=0;\n    for(int i=1;i<=m;i++){\n        int a=find(e[i].x),b=find(e[i].y);\n        if(a!=b){\n            f[a]=b;ans++;\n            add(e[i].x,e[i].y,e[i].w);\n            add(e[i].y,e[i].x,e[i].w);\n        }\n    }\n}\nvoid dfs(int x,int pre,int val){//LCA\u9884\u5904\u7406\n    dep[x]=dep[pre]+1;\n    w[x][0]=val;\n    fa[x][0]=pre;\n    for(int i=1;i<=t;i++){\n        fa[x][i]=fa[fa[x][i-1]][i-1];\n        w[x][i]=min(w[x][i-1],w[fa[x][i-1]][i-1]);\n    }\n    for(int i=head[x];i;i=tree[i].next){\n        if(tree[i].to!=pre){\n            dfs(tree[i].to,x,tree[i].val);\n        }\n    }\n}\ninline int LCA(int x,int y){//\u500d\u589eLCA\n    if(dep[x]<dep[y]) swap(x,y);\n    int ans=INF;\n    for(int i=t;i>=0;i--)\n        if(dep[fa[x][i]]>=dep[y]){\n            ans=min(ans,w[x][i]);\n            x=fa[x][i];\n        }\n    if(x==y) return ans;\n    for(int i=t;i>=0;i--)\n        if(fa[x][i]!=fa[y][i]){\n            ans=min(ans,min(w[x][i],w[y][i]));\n            x=fa[x][i],y=fa[y][i];\n        }\n    int val=w[x][0];\n    if(fa[x][0]!=y) val=min(val,w[y][0]);\n    return min(ans,val);\n}\n\nint main()\n{\n    memset(fa,INF,sizeof(fa));\n    memset(w,INF,sizeof(w));\n    n=read(),m=read();t=log2(n)+1;\n    for(int i=1;i<=m;i++){\n        e[i].x=read(),e[i].y=read(),e[i].w=read();\n    }\n    Kruskal();\n    //\u8bb0\u4f4f\uff01\u6570\u636e\u4e0d\u4e00\u5b9a\u8054\u901a\uff01\u56fe\u662f\u4e00\u4e2a\u68ee\u6797\uff01\n    for(int i=1;i<=n;i++)\n        if(i==f[i])\n            dfs(i,i,INF);\n    scanf(\"%d\",&q);\n    while(q--){\n        int x=read(),y=read();\n        //printf(\"%d %d\\n\",find(x),find(y));\n        if(find(x)!=find(y)) printf(\"-1\\n\");\n        else printf(\"%d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1534125049,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "/\\*\n\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6bcf\u4e2a\u53f8\u673a\u7684\u8f7d\u91cd\u9650\u5236\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5efa\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u4e5f\u7528kruskal\u6765\u505a\uff0c\u4f46\u662f\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\n\n\u751f\u6210\u7684\u6700\u5927\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u5c31\u662f\u6700\u5927\u8f7d\u91cd\u3002\n\n\u4e0d\u7528\u52a0\u4e24\u6761\u8fb9\uff0c\u52a0\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u3002\n\n\u751f\u6210\u4e86\u6811\u4e4b\u540e\uff0c\u5904\u7406\u5904\u6bcf\u4e2a\u70b9\u7684lca\uff0c\u4ee5\u4fbf\u6c42\u6700\u5927\u8f7d\u91cd\u3002\n\n\n\u600e\u4e48\u6c42lca\uff1f\n\n\u5728\u8dd1Kruskal\u5c06\u4e24\u4e2a\u6811\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5728\u4e24\u68f5\u6811\u6839\u8282\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u628a\u8fde\u7684\u8fb9\u4fdd\u5b58\u4e0b\u6765\n\n\u8ba9b\u6811\u7684\u6839\u7684\u7238\u7238\u6307\u5411a\u6811\u7684\u6839 \u2014\u2014>\n\nAdd\\_edge(father[fx],fy,edge1[i].w);\n\nfather[fy]=fx;\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u7684father\u7b49\u4e8e\u4ed6\u672c\u8eab\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u6811\u6839\u3002\u7136\u540e\u4ece\u8fd9\u4e2adfs\u6c42lca\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u68f5\u6811\uff0c\u6240\u4ee5for\u5faa\u73af\u679a\u4e3e\u4e00\u904d\u3002\n\n\n\u600e\u6837\u5224\u65ad\u80fd\u4e0d\u80fd\u5230\u8fbe\uff1f\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5757\u4e0d\u540c\u2014\u2014>find(x)!=find(y)\uff0c\u5219\u65e0\u6cd5\u5230\u8fbe\u3002\n\n\n\u90a3\u4e48\u600e\u4e48\u6c42\u6700\u5927\u8f7d\u91cd\u5462\uff1f\n\n\u5728dfs\u6c42lca\u65f6\u5019\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u5230\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u8fdb\u884c\u4e00\u6b21\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u6c42\u51fa\u4e24\u4e2a\u70b9\u7684lca\uff0c\u7136\u540e\u4e00\u76f4\u6cbf\u7740\u7236\u4eb2\u8282\u70b9\u8df3\uff0c\u77e5\u9053\u8df3\u5230lca\u4e3a\u6b62\uff0c\u8df3\u7684\u65f6\u5019\u53d6min\n\n\n\\*/\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 10005\nusing namespace std;\nint n,m,num_edge1,num_edge,q,x,y,z;\nint head1[N],head[N],father[N],deep[N];\nint fa[N][16],dis[N],chudu[N];\nstruct Edge\n{\n    int u,v,w,next;\n    bool operator < (Edge a) const        //\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u751f\u6210\u6700\u5927\u6811 \n    {\n        return w>a.w;\n    }\n}edge1[N*5],edge[N];\nvoid read(int &num)\n{\n    num=0;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar()){num=num*10+c-'0';}\n}\nvoid add_edge(int u,int v,int w)\n{\n    edge1[++num_edge1].u=u;\n    edge1[num_edge1].v=v;\n    edge1[num_edge1].w=w;\n    edge1[num_edge1].next=head1[u];\n    head1[u]=num_edge1;\n}\nvoid Add_edge(int u,int v,int w)\n{\n    edge[++num_edge].u=u;\n    edge[num_edge].v=v;\n    edge[num_edge].w=w;\n    edge[num_edge].next=head[u];\n    head[u]=num_edge;\n}\nint find(int x)\n{\n    if(father[x]!=x) father[x]=find(father[x]);\n    return father[x];\n}\nvoid Kruskal()\n{\n    for(int i=1;i<=n;i++) father[i]=i;\n    sort(edge1+1,edge1+m+1);\n    for(int i=1;i<=m;i++)\n    {\n        int fx=find(edge1[i].u),fy=find(edge1[i].v);\n        if(fx==fy) continue;\n        Add_edge(father[fx],fy,edge1[i].w);        //\u751f\u6210\u7684\u6811\uff0c\u4fdd\u5b58\u4e0b\u6765\uff0c\u7528\u6765dfs\u5904\u7406lca \n        father[fy]=fx;\n    }\n}\nvoid dfs(int u)        //\u5904\u7406lca \n{\n    for(int i=1;i<=14;i++)\n    {\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n    }\n    for(int i=head[u];i;i=edge[i].next)\n    {\n        if(fa[u][0]==edge[i].v) continue;\n        fa[edge[i].v][0]=u;\n        dis[edge[i].v]=edge[i].w;        //\u5230\u7236\u4eb2\u8282\u70b9\u7684\u8ddd\u79bb \n        deep[edge[i].v]=deep[u]+1;\n        dfs(edge[i].v);\n    }\n}\nint get_lca(int x,int y)    //\u6c42lca \n{\n    if(deep[x]<deep[y]) swap(x,y);\n    int h=deep[x]-deep[y];\n    for(int i=14;i>=0;i--)\n    {\n        if(h&(1<<i))\n            x=fa[x][i];\n    }\n    if(x!=y)\n    {\n        for(int i=14;i>=0;i--)\n        {\n            if(fa[x][i]!=fa[y][i])\n            {\n                x=fa[x][i];\n                y=fa[y][i];\n            }\n        }\n        x=fa[x][0];\n    }\n    return x;\n}\nint work(int x,int y)        //\u6c42\u6700\u5927\u8f7d\u91cd \n{\n    int a=999999999,b=999999999;\n    int lca=get_lca(x,y);\n    //printf(\"lca:  %d\\n\",lca);\n    for(int i=x;i!=lca;i=fa[i][0])        //a\u5f80lca\u8df3 \n    {\n        a=min(a,dis[i]);\n    }\n    for(int i=y;i!=lca;i=fa[i][0])        //b\u5f80lca\u8df3 \n    {\n        b=min(b,dis[i]);\n    }\n    return min(a,b);    //\u6700\u5927\u8f7d\u91cd\u5373\u8fb9\u6743\u7684\u6700\u5c0f\u503c \n}\nint main()\n{\n    read(n),read(m);\n    for(int i=1;i<=m;i++)\n    {\n        read(x),read(y),read(z);\n        add_edge(x,y,z);\n        //printf(\"z:  %d\\n\",z);\n        //printf(\"W:  %d\\n\",edge1[i].w);\n    }\n    Kruskal();\n    for(int i=1;i<=n;i++)\n    {\n        if(find(i)==i)    //\u672c\u6765\u5199\u7684father[i]=i\uff0c\u4e25\u8c28\u70b9\u5176\u5b9e\u5e94\u8be5\u662ffind(i)=i,\u6570\u636e\u95ee\u9898\u5427\uff0c\u8fc7\u4e86 \n        {\n            fa[i][0]=i;\n            //printf(\"root:  %d\\n\",i);\n            dfs(i);\n        }\n    }\n    read(q);\n    /*for(int i=1;i<=n;i++)\n    {\n        //printf(\"hh:  %d %d\\n\",fa[i][0],dis[i]);\n    }*/\n    for(int i=1;i<=q;i++)\n    {\n        read(x),read(y);\n        if(find(x)!=find(y))    //\u4e0d\u5728\u540c\u4e00\u68f5\u6811\u4e2d\uff0c\u4e0d\u80fd\u76f8\u4e92\u5230\u8fbe \n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        printf(\"%d\\n\",work(x,y));\n    }\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1508456036,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u54c7\uff0c\u8fd9\u9898\u597d\u591a\u9898\u89e3\u554a\u3002\u3002\u3002\n\n\u90fd\u7ffb\u4e86\u4e00\u4e0b\uff0c\u6574\u4f53\u4e8c\u5206\u7684\u9898\u89e3\u5c31\u4e24\u4e09\u7bc7\uff0c\u5e76\u4e14\u601d\u8def\u4e0e\u4ee3\u7801\u90fd\u4e0e\u6211\u7684\u4e0d\u540c\uff0c\u5c31\u6253\u7b97\u5199\u8fd9\u7bc7\u535a\u5ba2\u4e86\u3002\n\n\u5148\u8bf4\u8bf4\u6211\u7684\u6574\u4f53\u4e8c\u5206\u5427\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u8f86\u8f66\uff0c\u672c\u9898\u90fd\u53ef\u4ee5\u7528\u4e8c\u5206\u89e3\u51b3\u3002\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848mid\uff0c\u5c06\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8emid\u7684\u8fb9\u52a0\u5165\u5230\u8fb9\u96c6\u4e2d\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u8fde\u901a\u3002\n\n\u590d\u6742\u5ea6O\uff08qn logMax\uff09\u3002\n\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u6b64\u6570\u636e\u662f\u8fc7\u4e0d\u4e86\u7684\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f86\u8f66\u7684\u7b2ck\u6b21\u4e8c\u5206\uff0c\u6240\u5efa\u51fa\u7684\u56fe\u90fd\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u628amid\u503c\u76f8\u540c\u7684\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u53ea\u5efa\u4e00\u5f20\u56fe\u5224\u65ad\u5b83\u4eec\u662f\u5426\u8fde\u901a\u3002\n\n\u6240\u4ee5\uff0c\u6574\u4f53\u4e8c\u5206\u3002\u3002\u3002\u6211\u5bf9\u4e8e\u6574\u4f53\u4e8c\u5206\u7684\u8ba4\u8bc6\u8fd8\u5f88\u80a4\u6d45\uff0c\u53ea\u77e5\u9053\u7528\u6c42\u533a\u95f4k\u5c0f\u503c\u7684\u6a21\u677f\u6539\u4e00\u4e0b\u3002\u3002\u3002\u601d\u8def\u7b97\u7b80\u5355\u7684\u4e86~~\u597d\u50cf\u672c\u9898\u6b63\u89e3\u601d\u8def\u90fd\u5f88\u7b80\u5355~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define IL inline\nusing namespace std;\nconst int N=1e4+10,M=5e4+10,Q=3e4+10;\nstruct kk{\n\tint from,to,w;\n\tbool operator<(const kk a) const{\n\treturn w>a.w;}\n}a[M];//\u5b58\u8fb9 \nstruct hh{\n\tint from,to,pos;\n}q[Q],q1[Q],q2[Q];//\u5b58\u8be2\u95ee \nint n,m,qq,f[N],ans[N];\nIL int find(int x){if(x==f[x]) return x;return f[x]=find(f[x]);}//\u5e76\u67e5\u96c6 \nIL int read()//\u5feb\u8bfb \n{\n\tchar c;int f=1;\n\twhile((c=getchar())<'0'||c>'9')\n\t  if(c=='-') f=-1;\n\tint x=c-'0'; \n\twhile((c=getchar())>='0'&&c<='9')\n\t x=(x<<1)+(x<<3)+c-'0';\n  return x*f;\t   \n}\nvoid fenzhi(int l,int r,int fr,int to)//l,r:\u4e8c\u5206\u7684\u503c;fr,to,\u8be2\u95ee \n{\n\tif(fr>to) return;//\u65e0\u8be2\u95ee\uff0c\u8fd4\u56de \n\tif(l==r){ \n\t\tfor(int i=fr;i<=to;++i) ans[q[i].pos]=l; //fr\u5230to\u7684\u7b54\u6848\u4e3al \n\t\treturn;\n\t}\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\tint ql=0,qr=0,mid=l+r+1>>1;//\u56e0\u4e3a\u662f\u6c42\u6700\u5927\u503c \n\tfor(int i=1;a[i].w>=mid;++i){ \n\t\tint fx=find(a[i].from),fy=find(a[i].to);\n\t\tf[fy]=fx;\n\t}\n\tfor(int i=fr;i<=to;++i){\n\t\tif(find(q[i].from)==find(q[i].to)) q2[++qr]=q[i];//\u53ef\u4ee5\u5230\u8fbe \n\t\telse q1[++ql]=q[i];//\u4e0d\u80fd\u5230\u8fbe \n\t}\n\tfor(int i=0;i<ql;++i) q[fr+i]=q1[i+1];\n\tfor(int i=0;i<qr;++i) q[fr+ql+i]=q2[i+1];\n\tfenzhi(l,mid-1,fr,fr+ql-1);\n\tfenzhi(mid,r,fr+ql,to);\n}\nint main()\n{\n\tint x,y,z,Max=0;\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i) \n\t{\n\t\tx=read(),y=read(),z=read();\n\t\ta[i]=(kk){x,y,z},Max=max(Max,z);//\u6700\u5927\u8fb9\u6743 \n\t}\n\tsort(a+1,a+m+1);cin>>qq;a[m+1].w=-2e9;//i>m\u65f6\u81ea\u52a8\u505c\u6b62\u5faa\u73af \n\tfor(int i=1;i<=qq;++i) q[i].from=read(),q[i].to=read(),q[i].pos=i;\n\tfenzhi(-1,Max,1,qq);//\u6574\u4f53\u4e8c\u5206 \n\tfor(int i=1;i<=qq;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\uff01\uff01\uff01\n\n\u4ea4\u4e0a\u53bb\u53d1\u73b0\u53ea\u670960\u5206\uff01\uff01\uff01\n\n\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u7b54\u6848\u57281~Max\u90fd\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u4f1a\u8fdb\u884c2n\u6b21\u5e76\u67e5\u96c6\u64cd\u4f5c\uff01\n\n\u5728\u6b64\u8003\u8651\u4f18\u5316\uff0c\u5982\u679cmid\u8d8a\u6765\u8d8a\u5c0f\u65f6\uff0c\u56fe\u53ea\u7528\u4e0d\u65ad\u52a0\u8fb9\u800c\u4e0d\u7528\u91cd\u7f6e\uff0c\u6240\u4ee5\u5982\u679c\u4e4b\u540e\u7684mid\u90fd\u6bd4\u73b0\u5728\u5c0f\u7684\u8bdd\uff0c\u53ef\u4ee5\u8ba9\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316f[i]=i\u53d8\u4e3a\u73b0\u5728\u5e76\u67e5\u96c6\u7684\u72b6\u6001\uff0c\u5e76\u4ece\u73b0\u5728\u52a0\u5230\u7684\u8fb9\u518d\u5f00\u59cb\u52a0\u3002\n\n\u4e24\u6b21\u7684\u65f6\u95f4\u5206\u522b\u4e3a9.55s\u548c761ms\uff08\u5f00\u4e86O2\uff09\u3002\n\n100\u5206\u4ee3\u7801\uff08\u53ea\u670948\u884c\u54e6\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define IL inline\n#define re register\nusing namespace std;\nconst int N=1e4+2,M=5e4+10,Q=3e4+10;\nstruct kk{\n\tint from,to,w;\n\tbool operator<(const kk a) const{\n\treturn w>a.w;}\n}a[M];//\u5b58\u8fb9 \nstruct hh{\n\tint from,to,pos;\n}q[Q],q1[Q],q2[Q];//\u5b58\u8be2\u95ee \nint n,m,qq,f[N],ans[Q],pos=1,posf,ff[N];//\u4ecepos\u5f00\u59cb\u52a0\u8fb9\uff0cff\u521d\u59cb\u5316\u5e76\u67e5\u96c6\u6570\u7ec4\uff0cf\u5e76\u67e5\u96c6\u6570\u7ec4 \nIL int find(int x){if(x==f[x]) return x;return f[x]=find(f[x]);}//\u5e76\u67e5\u96c6\nIL void cpy(int *p,int *q){for(int i=1;i<=n;++i) p[i]=q[i];}//\u590d\u5236\u6570\u7ec4 \nvoid fenzhi(int l,int r,int fr,int to){//l,r:\u4e8c\u5206\u7684\u503c;fr,to,\u8be2\u95ee \n\tif(fr>to) return;//\u65e0\u8be2\u95ee\uff0c\u8fd4\u56de \n\tif(l==r){for(int i=fr;i<=to;++i) ans[q[i].pos]=l; return;}//fr\u5230to\u7684\u7b54\u6848\u4e3al \n\tcpy(f,ff);//\u590d\u5236 \n\tint ql=0,qr=0,mid=l+r+1>>1;//\u56e0\u4e3a\u662f\u6c42\u6700\u5927\u503c \n\tfor(posf=pos;a[posf].w>=mid;++posf){\n\t\tint fx=find(a[posf].from),fy=find(a[posf].to);\n\t\tf[fy]=fx;\n\t}\n\tfor(re int i=fr;i<=to;++i){\n\t\tif(find(q[i].from)==find(q[i].to)) q2[++qr]=q[i];//\u53ef\u4ee5\u5230\u8fbe\n\t\telse q1[++ql]=q[i];//\u4e0d\u80fd\u5230\u8fbe \n\t}\n\tfor(re int i=0;i<ql;++i) q[fr+i]=q1[i+1];\n\tfor(re int i=0;i<qr;++i) q[fr+ql+i]=q2[i+1];\n\tfenzhi(mid,r,fr+ql,to);cpy(ff,f),pos=posf;fenzhi(l,mid-1,fr,fr+ql-1);//\u5148\u9012\u5f52\u53f3\u8fb9\uff0c\u4e4b\u540e\u7684mid\u90fd\u4f1a\u5c0f\u4e8e\u5f53\u524dmid \n}\nint main()\n{\n\tint x,y,z,Max=0;\n\tscanf(\"%d %d\",&n,&m);\n\tfor(re int i=1;i<=m;++i){\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\ta[i]=(kk){x,y,z},Max=max(Max,z);//\u6700\u5927\u8fb9\u6743 \n\t}\n\tsort(a+1,a+m+1);scanf(\"%d\",&qq),a[m+1].w=-2e9;//i>m\u65f6\u81ea\u52a8\u505c\u6b62\u5faa\u73af \n\tfor(re int i=1;i<=n;++i) ff[i]=i;\n\tfor(re int i=1;i<=qq;++i) scanf(\"%d %d\",&q[i].from,&q[i].to),q[i].pos=i;\n\tfenzhi(-1,Max,1,qq);//\u6574\u4f53\u4e8c\u5206 \n\tfor(re int i=1;i<=qq;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\u81f3\u4e8e\u5176\u4ed6\u5927\u4f6c\u7684\u505a\u6cd5\u561b\uff0c\u5c31\u8bf4\u4e00\u4e0b\uff1a\n\n\u628a\u6bcf\u4e00\u4e2a\u8be2\u95ee\u7684\u4e8c\u5206\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5171\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u4e0d\u65ad\u52a0\u8fb9\uff0c\u6839\u636e\u8fde\u901a\u7684\u60c5\u51b5\u4fee\u6539l,r\uff0c\u8fd9\u6837\u91cd\u590dlogMax\u6b21\u5c31\u662f\u7b54\u6848\u4e86~",
        "postTime": 1568090804,
        "uid": 207604,
        "name": "yqaty",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u4e00\u9053\u633a\u597d\u7684\u9898\n\n\u5927\u90e8\u5206\u4eba\uff08\u597d\u591a\u4eba\uff09\u90fd\u5199\u7684\u6811\u5256\u6216\u500d\u589e\u641eLCA\n\n\u8c8c\u4f3c\u7ffb\u7740\u4e86\u4e00\u7bc7LCT\u7684\u9898\u89e3\uff0c\u4f46\u662f\u662f\u7528\u6307\u9488\u5199\u7684\n\n### \uff08\u8fd9\u9053\u9898\u5176\u5b9e\u53ef\u4ee5\u5f53\uff08\u62c6\u70b9\uff09LCT\u5165\u95e8\u9898\u7684\uff09\n\n\u4eae\u51fa\u4ee3\u7801\uff08\u6709\u6ce8\u91ca\uff09\n\n```cpp\n\n//\u672c\u9898\u5173\u952e\uff1a\u5c06\u8fb9\u6743\u53d8\u6210\u70b9\u6743 \n//\u6bd4\u5982\u8bf4\u70b9u\u548c\u70b9v\u4e4b\u95f4\u6709\u6743\u503c\u4e3aw\u7684\u8fb9\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u70b9p\uff0c\n//\u7ed9\u4ed6\u8d4b\u503c\u4e3aw\u7136\u540e\u5c06u\u548cv\u5206\u522b\u4e0ep\u76f8\u8fde \n\n\n//Code by : Y-k-y \n#include <iostream>//\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#define ll long long\nconst int inf=1<<30;\nusing namespace std;\nconst int N=100010;\ninline int read(){\n    int res=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){res=res*10+ch-'0';ch=getchar();}\n    return res*f;\n}\ninline void wr(int x){\n    if(x<0){putchar('-');x=-x;}if(x>9) wr(x/10);putchar(x%10+'0');\n}\ninline int max(int x,int y){//\u624b\u5199\u7a0d\u5fae\u5feb\u4e00\u70b9\u70b9\u5427 \n    return x>y?x:y;\n}\ninline int min(int x,int y){\n    return x<y?x:y;\n}\nint ch[N][2],sta[N],fa[N],val[N],rev[N];\nint Min[N];//\u7ef4\u62a4\u6240\u9700\u7b54\u6848\uff08\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff09 \ninline int get(int x){//\u8fd9\u4e2a\u70b9\u662f\u5426\u5b58\u5728\uff08\u6d3b\u7740\uff09 \n    return x==ch[fa[x]][0]||x==ch[fa[x]][1];\n}\ninline int chk(int x){//\u5de6\u8fb9or\u53f3\u8fb9 \n    return x==ch[fa[x]][1];\n}\ninline void filp(int x){\n    swap(ch[x][0],ch[x][1]);rev[x]^=1;\n}\ninline void pushup(int x){//\u66f4\u65b0\u7b54\u6848 \n\tMin[x]=inf;//\u5148\u8d4b\u503c\u6210\u6781\u5927\u503c   \u8bb0\u5f97\u5224\u7a7a \n    if(Min[ch[x][0]])Min[x]=min(Min[x],Min[ch[x][0]]);\n    if(Min[ch[x][1]])Min[x]=min(Min[x],Min[ch[x][1]]);\n    if(val[x])Min[x]=min(Min[x],val[x]);\n}\ninline void pushdown(int x){\n    if(rev[x]){\n        if(ch[x][0])filp(ch[x][0]);\n        if(ch[x][1])filp(ch[x][1]);\n        rev[x]=0;\n    }\n}\ninline void zhuan(int x){//\u65cb\u8f6c\u64cd\u4f5c \n    int y=fa[x],z=fa[y],k=chk(x),w=ch[x][k^1];\n    if(get(y))ch[z][chk(y)]=x;\n    ch[y][k]=w,ch[x][k^1]=y;\n    if(w)fa[w]=y;fa[y]=x,fa[x]=z;\n    pushup(y);\n    pushup(x);\n}\ninline void splay(int x){\n    int y=x,top=0;sta[++top]=y;\n    while(get(y))sta[++top]=y=fa[y];\n    while(top)pushdown(sta[top--]);\n    while(get(x)){\n        int y=fa[x];\n        if(get(y))\n        zhuan(chk(x)==chk(y)?y:x);\n        zhuan(x);\n    }\n    pushup(x);\n}\ninline void Access(int x){//LCT\u6838\u5fc3 \n    for(int y=0;x;x=fa[y=x]){\n        splay(x),ch[x][1]=y,pushup(x);\n    }\n}\ninline void makeroot(int x){\n    Access(x);splay(x);filp(x);\n}\ninline int findroot(int x){\n    Access(x);splay(x);\n    while(ch[x][0])pushdown(x),x=ch[x][0];\n    return x;\n}\ninline void link(int x,int y){//\u8fde\u63a5 \n    makeroot(x);\n    if(findroot(y)!=x)\n    fa[x]=y;\n}\ninline void split(int x,int y){//\u62fd\u51fa\u6765\u8fd9\u6761\u94fe \n    makeroot(x);Access(y);splay(y);\n}\nint n,m;\nstruct pp{\n    int x,y,w;\n}e[N];\nbool cmp(pp a,pp b){\n    return a.w>b.w;\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n    \te[i].x=read();e[i].y=read();e[i].w=read();//\u8bfb\u5165 \n    }\n    sort(e+1,e+1+m,cmp);//\u6700\u5927\u751f\u6210\u6811\uff0c\u5148\u6392\u5e8f \n    for(int i=1;i<=m;i++){\n        int x=e[i].x,y=e[i].y,w=e[i].w;\n        if(findroot(x)==findroot(y))continue;//\u5728\u540c\u4e00\u68f5\u6811\u4e2d\uff0c\u4e0d\u8fde \n        Min[i+n]=val[i+n]=w;link(x,i+n);link(i+n,y);//\u5efa\u70b9\uff0c\u8d4b\u503c\uff0c\u8fde\u8fb9 \n    }\n    m=read();\n    while(m--){\n        int x=read(),y=read();\n        split(x,y);//\u62fd\u51fa\u6765 \n        if(findroot(x)!=findroot(y))wr(-1);// \u65e0\u6cd5\u5230\u8fbe \n        else \n        wr(Min[y]);puts(\"\");//\u7b54\u6848 \n    }\n    return 0;//( ^_^ )/~~\u62dc\u62dc\n}\n```\n~~\u672c\u849f\u84bb\u5df2\u7ecf\u597d\u51e0\u4e2a\u6708\u6ca1\u6709\u53d1\u9898\u89e3\u4e86\uff0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u624b\u4e0b\u7559\u60c5~~\n",
        "postTime": 1562562796,
        "uid": 71844,
        "name": "\u6768\u94e0\u8fdc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "[\u98df\u7528\u94fe\u63a5\u5473\u9053\u66f4\u4f73qwq](http://www.cnblogs.com/qbwhtc/p/7411238.html)\n\n# \u4e3b\u8981\u7b97\u6cd5\uff1aKruskal\u7b97\u6cd5\u6784\u9020\u6700\u5927\u751f\u6210\u6811+\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u5b58\u50a8+\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u67e5\u8be2\u3002\n\n\u672c\u9898\u7ed9\u6211\u4eec\u7684\u662f\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u53ef\u80fd\u662f\u6c42\u51fa\u5404\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u8fd9\u4e00\u60f3\u5c31\u4e0d\u73b0\u5b9e\uff0c\u56e0\u4e3a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u90fd\u8981O(N^3)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e00\u904d\u4e5f\u4f1aTLE\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u6362\u4e00\u79cd\u601d\u8def\u601d\u8003\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec~~\u654f\u9510\u5730~~\u53d1\u73b0\uff0c\u8fd9\u9898\u4f3c\u4e4e\u4e0eNOIP2012Day2T3\u4e0eNOIP2015Day2T3\u5341\u5206\u76f8\u4f3c\uff0c\u8fd9\u4e9b\u9898\u76ee\u7684\u5171\u540c\u70b9\u90fd\u662f\u5728\u6811\u4e0a\u500d\u589e\u8dd1\uff0c\u5e76\u4e14\u4e0eNOIP2015Day2T3\u4e00\u6837\u90fd\u7528\u5230\u4e86LCA\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u4e00\u68f5\u6811\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u7528\u5230\u4e86\u6700\u5927\u751f\u6210\u6811\u3002\u8fd9\u6837\uff0c\u628a\u5b83\u53d8\u6210\u4e00\u68f5\u6811\u540e\u518d\u6309\u4e4b\u524d\u7684\u5957\u8def\u500d\u589e\u554a\uff0cLCA\u554a\u4e4b\u7c7b\u7684\uff0c\u5c31\u53ef\u4ee5~~\u5f88\u5bb9\u6613\u7684~~\u628a\u8fd9\u9898A\u4e86\u3002\n\n\u73b0\u5728\u6211\u4eec\u9996\u5148\u8981\u89e3\u51b3\u7684\u662f\u6700\u5927\u751f\u6210\u6811\u7684\u95ee\u9898\uff0c\u5230\u5e95\u662f\u7528Prim\u7b97\u6cd5\u8fd8\u662f\u7528Kruskal\u7b97\u6cd5\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0cPrim\u7b97\u6cd5\u8981\u6bcf\u6b21\u5faa\u73af\u4e00\u904d\u627e\u6700\u5c0f\u8fb9\u6743\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(N^2)\u4e86\uff08\u4f46\u7528\u5806\u4ec0\u4e48\u7684\u5c31\u53e6\u5f53\u522b\u8bba\u4e86qwq\uff09\uff0c\u800cKruskal\u7b97\u6cd5\u82e5\u7528\u5feb\u6392\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5230O(N\\*logN)\uff08\u5e94\u8be5\u662f\u5427qwq\uff09\uff0c\u56e0\u6b64Prim\u7b97\u6cd5\u4f1aTLE\uff0c\u800cKruskal\u7b97\u6cd5\u4e0d\u4f1a\uff0c\u6545\u6211\u4eec\u7528Kruskal\u7b97\u6cd5\u3002\n\n\u63a5\u4e0b\u6765Kruskal\u7b97\u6cd5\u7b5b\u4e0b\u6765\u7684\u8fb9\u7528\u6570\u7ec4\u6a21\u62df\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u4e0b\u6765\uff0c\u5f00\u59cb\u5efa\u6811\u3002\uff08\u8fd9\u91cc\u6ce8\u610f\u628a\u6bcf\u4e00\u68f5\u6811\u90fd\u5efa\u597d\uff0c\u6211\u8bd5\u8fc7\u53ea\u5efa\u542b\u6709\u7f16\u53f71\u7684\u6811\uff0c\u7adf\u4e5fA\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4e25\u8c28\u4e00\u70b9\uff0c\u4e0d\u8981\u6c34\u6570\u636e\u5427qwq~\uff09\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u67e5\u8be2\u64cd\u4f5c\u4e86\u3002\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u500d\u589e\u7b97\u6cd5\uff0c\u500d\u589e\u65f6\u6211\u4eec\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u9898\u76ee\u7684\u7ecf\u9a8c\uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4f\u5b58\u50a8\uff0c\u5176\u4e2df[i,j]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u5f80\u4e0a\uff08\u6839\u8282\u70b9\u65b9\u5411\uff09\u8dd12^j\u4e2a\u70b9\u5230\u8fbe\u7684\u70b9\uff0c\u4f46\u8fd9\u6837\u6211\u4eec\u8fd8\u662f\u65e0\u6cd5\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u8fb9\uff08\u9898\u76ee\u8981\u6c42\u7684\u7b54\u6848\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4s\u5b58\u50a8\uff0cs[i,j]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u5f80\u4e0a\uff08\u6839\u8282\u70b9\u65b9\u5411\uff09\u8dd12^j\u4e2a\u70b9\u4e2d\u7684\u6700\u5c0f\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u9884\u5904\u7406\u5b8c\uff0c\u5c31\u53ef\u4ee5\u7528log\u7ea7\u522b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5b8c\u6210\u67e5\u8be2\u4e86\u3002\u500d\u589e\u7b97\u6cd5\u7684LCA\u6211\u8fd9\u91cc\u5c31\u4e0d\u518d\u53d9\u8ff0\u4e86\u3002\u5173\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u5c31\u53ea\u8981\u5f53\u4e24\u70b9\u7684\u4ee3\u8868\u4e0d\u662f\u540c\u4e00\u4e2a\u70b9\u65f6\u7279\u5224\u4e00\u4e0b\u8f93\u51fa\u201c-1\u201d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u5206\u5272\u4e0d\u5b8c\u5168\u7684\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\n\npascal\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nuses math;\nvar n,m,i,j,k,l,r,ans:longint;\na,be,tar,next,x,y,len:array[1..50000]of longint;\nf,s:array[0..10000,0..14]of longint;\nb:array[1..10000]of boolean;\nc,last,floor,find:array[0..10000]of longint;\nfunction go(x:longint):longint;//\u5e76\u67e5\u96c6\nbegin\n  if c[x]<>x then\n  go:=go(c[x])\n  else\n  go:=x;\n  c[x]:=go;\nend;\nprocedure sort(l,r:longint);//Kruskal\u7b97\u6cd5\u5148\u6309\u8fb9\u6743\u6392\u5e8f\nvar i,j,xx,yy:longint;\nbegin\n  i:=l;\n  j:=r;\n  xx:=len[(l+r) div 2];\n  repeat\n  while len[i]>xx do\n  inc(i);\n  while xx>len[j] do\n  dec(j);\n  if i<=j then\n  begin\n    yy:=len[i];\n    len[i]:=len[j];\n    len[j]:=yy;\n    yy:=x[i];\n    x[i]:=x[j];\n    x[j]:=yy;\n    yy:=y[i];\n    y[i]:=y[j];\n    y[j]:=yy;\n    inc(i);\n    dec(j);\n  end;\n  until i>j;\n  if l<j then\n  sort(l,j);\n  if i<r then\n  sort(i,r);\nend;\nbegin\n  readln(n,m);\n  for i:=1 to m do\n  readln(x[i],y[i],len[i]);\n  for i:=1 to n do\n  c[i]:=i;\n  sort(1,m);\n  for i:=1 to m do//Kruskal\u7b97\u6cd5\u6c42\u6700\u5927\u751f\u6210\u6811\uff0c\u5e76\u7528\u90bb\u63a5\u8868\u5b58\u50a8\n  if c[go(x[i])]<>c[go(y[i])] then\n  begin\n    c[go(x[i])]:=c[go(y[i])];\n    inc(k);\n    //\u56e0\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u4e24\u70b9\u505a\u8d77\u70b9\u7684\u60c5\u51b5\u90fd\u4e0d\u80fd\u653e\u8fc7\n    a[k]:=len[i];//a\u6570\u7ec4\u88c5\u8be5\u8fb9\u957f\u5ea6\n    a[k+n-1]:=len[i];\n    be[k]:=x[i];//be\u6570\u7ec4\u88c5\u8be5\u8fb9\u8d77\u70b9\n    be[k+n-1]:=y[i];\n    tar[k]:=y[i];//tar\u6570\u7ec4\u88c5\u8be5\u8fb9\u7ec8\u70b9\n    tar[k+n-1]:=x[i];\n    next[k]:=last[x[i]];//next\u6570\u7ec4\u88c5\u4e0b\u4e00\u4e2a\u8be5\u627e\u54ea\u6761\u8fb9\n    next[k+n-1]:=last[y[i]];\n    last[x[i]]:=k;//last\u6570\u7ec4\u88c5\u4ee5\u8be5\u70b9\u4e3a\u8d77\u70b9\u7684\u6700\u540e\u4e00\u6761\u8fb9\u662f\u54ea\u4e2a\n    last[y[i]]:=k+n-1;\n  end;\n  for j:=1 to n do//\u5404\u79cd\u5efa\u6811\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662fBFS\n  if not b[j] then\n  begin\n    l:=1;\n    r:=1;\n    find[1]:=j;//find\u4e3aBFS\u6570\u7ec4\n    floor[j]:=1;//floor\u4e3a\u8be5\u70b9\u6df1\u5ea6\uff08\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a1\uff09\n    b[j]:=true;//b\u6570\u7ec4\u8868\u793a\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n    while l<=r do//\u5f00\u59cb\u5e7f\u641c\n    begin\n      i:=last[find[l]];\n      while i>0 do\n      begin\n        if not b[tar[i]] then\n        begin\n          floor[tar[i]]:=floor[be[i]]+1;\n          f[tar[i],0]:=be[i];\n          s[tar[i],0]:=a[i];\n          inc(r);\n          find[r]:=tar[i];\n          b[tar[i]]:=true;\n        end;\n        i:=next[i];\n      end;\n      inc(l);\n    end;\n  end;\n  for j:=1 to 14 do//\u500d\u589e\u9884\u5904\u7406\n  for i:=1 to n do\n  begin\n    f[i,j]:=f[f[i,j-1],j-1];\n    s[i,j]:=min(s[i,j-1],s[f[i,j-1],j-1]);\n  end;\n  readln(m);\n  for i:=1 to m do//\u5f00\u59cb\u67e5\u8be2\n  begin\n    readln(l,r);\n    ans:=maxlongint;\n    if c[go(l)]<>c[go(r)] then//\u7279\u5224\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u7684\u60c5\u51b5\n    begin\n      writeln('-1');\n      continue;\n    end;\n    //\u4e0b\u9762\u5f00\u59cbLCA\n    if floor[l]<floor[r] then\n    begin\n      j:=l;\n      l:=r;\n      r:=j;\n    end;\n    if floor[l]>floor[r] then\n    for j:=14 downto 0 do\n    if floor[f[l,j]]>=floor[r] then\n    begin\n      if ans>s[l,j] then\n      ans:=s[l,j];\n      l:=f[l,j];\n    end;\n    if l=r then\n    begin\n      writeln(ans);\n      continue;\n    end;\n    for j:=14 downto 0 do\n    if f[l,j]<>f[r,j] then\n    begin\n      if ans>s[l,j] then\n      ans:=s[l,j];\n      if ans>s[r,j] then\n      ans:=s[r,j];\n      l:=f[l,j];\n      r:=f[r,j];\n    end;\n    if ans>s[l,0] then\n    ans:=s[l,0];\n    if ans>s[r,0] then\n    ans:=s[r,0];\n    writeln(ans);\n  end;\nend.\n```",
        "postTime": 1503384314,
        "uid": 7535,
        "name": "beng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u989d\u597d\u5427\u4e0b\u9762\u662f\u9898\u89e3\uff08c++\u7248\uff09\n\n\u9996\u5148\u56e0\u4e3a\u8d27\u8f66\u8981\u6c42\u7684\u662f\u8def\u4e0a\u7684\u6700\u5c0f\u7684\u6700\u5927\n\n\u6240\u4ee5\u53ea\u9700\u8981\u7528\u6240\u6709\u7684\u8fb9\u6784\u5efa\u4e00\u4e2a\u6700\u5927\u751f\u6210\u6811\u5373\u53ef\n\n\u7136\u540e\u5c31\u662f\u4e71\u641e\u4e862333\n\n\n\u5728\u6784\u5efa\u6700\u5927\u751f\u6210\u6811\u65f6\u6bcf\u9694100\u4e2a\u7edf\u8ba1\u6709\u54ea\u4e9b\u7b54\u6848\u5df2\u7ecf\u51fa\u6765\uff0c\u590d\u6742\u5ea6O(mq/100)\n\n\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e2aq\u8fdb\u884c\u7edf\u8ba1\uff0c\u6bcf\u6b21\u7edf\u8ba1\u8981\u8fdb\u884c100\u6b21\u679a\u4e3e\uff0c\u590d\u6742\u5ea6O(100q)\n\n\n\u6240\u4ee5\u603b\u5171\u590d\u6742\u5ea6\u4e3aO(mlogm+mq/100+100q)\n\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\n\n\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<stack>\nusing namespace std;\nint n,m,q;\nint flag=1;\nint fa[10005];\nint fa2[10005];\nstruct node\n{\n    int a,b,s;\n}ed[50005];\nint qua[30005],qub[30005],ans[30005];\nvector <int> edge[10005];\nvector <int> ques[305];\nint tot=0;\nint init()\n{\n    for(int i=0;i<10005;i++)\n        fa[i]=fa2[i]=i;\n}\nint getfa(int x)\n{\n    if(fa[x]==x)    return x;\n    return fa[x]=getfa(fa[x]);\n}\nint unio(int a,int b)\n{\n    fa[getfa(a)]=getfa(b);\n    return 0;\n}\nint getfa2(int x)\n{\n    if(fa2[x]==x)    return x;\n    return fa2[x]=getfa2(fa2[x]);\n}\nint unio2(int a,int b)\n{\n    fa2[getfa2(a)]=getfa2(b);\n    return 0;\n}\nint cmp(node a,node b)\n{\n    return a.s>b.s;\n}\nint main()\n{\n//    freopen(\"truck.in\",\"r\",stdin);\n//    freopen(\"truck.out\",\"w\",stdout);\n    memset(ans,-1,sizeof(ans));\n    init();\n    cin>>n>>m;\n    for(int i=0;i<m;i++)\n        scanf(\"%d%d%d\",&ed[i].a,&ed[i].b,&ed[i].s);\n    sort(ed,ed+m,cmp);\n    cin>>q;\n    int eea,eeb;\n    for(int i=0;i<q;i++)\n    {\n        flag=1;\n        scanf(\"%d%d\",&eea,&eeb);\n        qua[i]=eea;\n        qub[i]=eeb;\n    }\n    for(int i=0;i<m;i++)\n    {\n        int x=ed[i].a,y=ed[i].b,s=ed[i].s;\n        if(getfa(x)!=getfa(y))\n            unio(x,y);\n        if(i%100==99 || i==m-1)\n        {\n            for(int j=0;j<q;j++)\n            {\n                if(ans[j]==0)    continue;\n                if(getfa(qua[j])==getfa(qub[j]))\n                {\n                    ques[i/100].push_back(j);\n                    ans[j]=0;\n                }\n            }\n        }\n    }\n    memset(ans,-1,sizeof(ans));\n    for(int i=0;i<m;i++)\n    {\n        int x=ed[i].a,y=ed[i].b,s=ed[i].s;\n        if (getfa2(x)!=getfa2(y))\n            unio2(x,y);\n        for(int xx=0;xx<ques[i/100].size();xx++)\n        {\n            int j=ques[i/100][xx];\n            if(ans[j]==-1 && getfa2(qua[j])==getfa2(qub[j]))\n                ans[j]=s;\n        }\n    }\n    for(int i=0;i<q;i++)\n    {\n        if(getfa2(qua[i])!=getfa2(qub[i]))\n        {\n            cout<<-1<<endl;\n            continue;\n        }\n        cout<<ans[i]<<endl;\n    }\n    return 0;\n}\n\n```",
        "postTime": 1446732617,
        "uid": 6530,
        "name": "ranwen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u672c\u9898\u6700\u5173\u952e\u7684\u4e00\u6b65\u5c31\u662f\u60f3\u5230\u5229\u7528**\u6700\u5927\u751f\u6210\u6811**\u6765\u7b80\u5316\u56fe\uff0c\u4f7f\u5176\u53d8\u6210\u4e00\u68f5\u6811\uff0c\u8f6c\u5316\u4e3a\u6811\u4e0a\u7684\u9898\u76ee\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\u5173\u4e8e\u4f7f\u7528\u6700\u5927\u751f\u6210\u6811\u6765\u7b80\u5316\u95ee\u9898\u7684\u6b63\u786e\u6027\u3002\uff08\u4efb\u610f\u4e00\u8f86\u8d27\u8f66\u53ea\u9700\u8981\u5728\u8fd9\u68f5\u6811\u4e0a\u8dd1\u5c31\u597d\u4e86\uff09\n\n\u53cd\u8bc1\u6cd5\uff1a\n\n\u547d\u9898\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u4ece$u$\u5230$v$\u7684\u8def\u5f84\uff0c\u8bbe\u4e3a$x$\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u5927\u4e8e\u6700\u5927\u751f\u6210\u6811\u4e0a$u$\u5230$v$\u7684\u8def\u5f84(\u8bbe\u4e3a$y$)\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\uff08\u6709\u70b9\u7ed5\uff0c\u5176\u5b9e\u5c31\u662f\u6709\u4e00\u6761**\u66f4\u4f18\u7684\u8def\u5f84**\uff09\n\n\u82e5\u8be5\u547d\u9898\u6210\u7acb\uff1a\n\n\u90a3\u4e48\uff0c\u5047\u8bbe\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u4e3a$a$,\u6811\u4e0a\u7684\u6700\u5c0f\u8fb9\u4e3a$b$\u3002\u6613\u5f97\uff1a\n$$a < b$$\n\u6211\u4eec\u518d\u6765\u8003\u8651\u4e00\u4e0b\u6700\u5927\u751f\u6210\u6811\u7684\u6c42\u51fa\u8fc7\u7a0b\uff08$kruskal$\uff0c$prim$\u540c\u7406\uff0c\u8fd9\u91cc\u7528$kruskal$\uff09\uff1a\n1. \u5bf9\u6240\u6709\u8fb9\u4ece**\u5927\u5230\u5c0f**\u6392\u5e8f\n\n1. \u4f9d\u6b21\u9009\u8fb9\uff0c\u4e00\u6761\u8fb9\u88ab\u9009\u5165\u6700\u5927\u751f\u6210\u6811\u7684\u6761\u4ef6\u662f\u5b83\u6240\u8fde\u7684\u4e24\u4e2a\u7ed3\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5373**\u4e24\u70b9\u4e0d\u8fde\u901a**\u3002\n\n\u65e2\u7136\u5982\u6b64\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4$a$\u5728$kruskal$\u8fc7\u7a0b\u4e2d\u88ab\u8003\u8651\u5230\u65f6\u6ca1\u6709\u88ab\u9009\u5165\u6700\u5927\u751f\u6210\u6811\u3002\u7531\u6b64\u53ef\u5f97$a$\u6240\u8fde\u7684\u4e24\u4e2a\u7ed3\u70b9\u80fd\u591f\u901a\u8fc7\u4e00\u4e9b \uff08**\u8fb9\u6743\u6700\u5c0f\u503c\u66f4\u5927\u7684**\uff09 \u8def\u5f84\u4e92\u76f8\u5230\u8fbe\uff0c\u800c\u5176\u4e2d\u7684**\u6700\u4f18\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a**\u7684\uff0c\u8bbe\u4e3a$z$\u3002~~\uff08\u5212\u5206\u53e5\u5b50\u7ed3\u6784\uff09~~\n\n\u8fd9\u4e2a\u8fd8\u8981\u8bc1\u5417\uff1f\u597d\u5427\uff0c\u5982\u679c\u4e0d\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\uff0c**\u8bf7\u4ece\u8bc1\u660e\u5f00\u59cb\u7684\u5730\u65b9\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b**\u2026\u2026~~\uff08\u9003\uff09~~\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c$z$\u8def\u5f84\u6bd4$x$\u8def\u5f84\u66f4\u4f18\uff1b\u800c$z$\u8def\u5f84\u662f\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u7684\u3002\n\n\u53c8\u56e0\u4e3a**\u6811\u4e0a\u4e24\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84**\uff08\u4e0d\u8d70\u56de\u5934\u8def\uff09\uff0c\u6240\u4ee5\n$$y=z$$\n\u800c\u8fd9\u4e0e\u4e4b\u524d\u5047\u8bbe\u7684$x$\u6bd4$y$\u66f4\u4f18**\u77db\u76fe**\u3002\u6240\u4ee5\u547d\u9898\u4e0d\u6210\u7acb\uff0c\u6240\u4ee5\u6811\u4e0a\u7684\u8def\u5f84\u662f\u6700\u4f18\u8def\u5f84\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u56fe\u6709\u53ef\u80fd**\u4e0d\u8fde\u901a**\u3002\n\n\u8fd9\u4e2a\u5c31\u5f88\u70e6\uff0c\u56e0\u4e3a\u6700\u5927\u751f\u6210\u6811\u5728\u56fe\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\u4e0b\u6839\u672c\u6c42\u4e0d\u51fa\u6765\u3002\u6709\u4e00\u4e2a\u529e\u6cd5\u5c31\u662f\u4fdd\u8bc1\u8fd9\u4e2a\u56fe\u662f\u8054\u901a\u7684\uff0c\u5373**\u521b\u9020\u4e00\u4e2a\u865a\u70b9**\uff0c\u8ba9\u5b83\u548c\u6240\u6709\u7684\u70b9\u76f8\u8fde\uff0c\u8fd9\u6837\u628a\u6700\u5927\u751f\u6210\u6811\u7684\u8fb9\u6570\u52a01\u5373\u53ef\u3002\n\n\u4f46\u662f\u865a\u70b9\u8fde\u7684\u8fb9\u7684**\u8fb9\u6743**\uff1f\n\n\u8003\u8651\u5230\u8fd9\u4e2a\u8fb9\u6743\u4e0d\u80fd\u5f71\u54cd\u8fde\u901a\u7684\u90e8\u5206\u7684\u6700\u5927\u751f\u6210\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b\u4fdd\u8bc1\u4e0d\u7ba1\u6709\u6ca1\u6709\u8fd9\u4e2a\u865a\u70b9\uff0c\u4e00\u4e2a\u8fde\u901a\u90e8\u5206\u6c42\u51fa\u6765\u7684**\u6700\u5927\u751f\u6210\u6811\u5fc5\u987b\u4e0d\u53d8**\uff1b\u6b64\u5916\uff0c\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u90e8\u5206\uff0c\u53c8\u5fc5\u987b**\u4fdd\u8bc1\u6709\u8fd9\u6837\u7684\u8fb9\u628a\u4ed6\u4eec\u8fde\u8d77\u6765**\u3002\u8003\u8651\u5230\u5728$kruskal$\u7684\u65f6\u5019\u4f1a\u5bf9\u4fbf**\u4ece\u5927\u5230\u5c0f\u6392\u5e8f**\uff0c\u4ee5\u53ca\u9898\u76ee\u4e2d\u6240\u8bf4\u7684\u4e0d\u8fde\u901a\u5219\u8f93\u51fa-1\uff0c\u4e8e\u662f\u6211 ~~\uff08\u5f97\u5230\u6697\u793a\uff09~~ \u53d7\u5230\u542f\u53d1\u53ef\u4ee5\u628a\u865a\u8fb9\u8bbe\u4e3a-1\uff0c\u8fd9\u6837\u53ea\u9700\u76f4\u63a5\u6c42\u51fa\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u6709-1\u5219\u8bf4\u660e\u4e0d\u8fde\u901a\uff0c\u5c31**\u65e0\u9700\u7279\u5224**\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u5904\u7406\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u7b80\u5355\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n\n## \u66b4\u529b\u6570\u636e\u7ed3\u6784\u5927\u6cd5\n# \u597d\uff01\n\n\u4f5c\u4e3a\u61d2\u5f97\u601d\u8003\u7684\u6211\uff0c\u5f53\u7136\u662f\u4f7f\u7528\u6811\u94fe\u5256\u5206\u8fc7\u6389\u5566\u3002\n\uff08\u8fd9\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u7684\u677f\u5b50\uff09\n\n\u5173\u4e8e\u6811\u94fe\u5256\u5206\uff0c\u9700\u8981\u7684\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811\uff0cDFS\u5e8f\n\n\u81f3\u4e8e\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\uff0c\u4e5f\u53ef\u4ee5\u7528\u522b\u7684\u65b9\u6cd5\u53bb\u89e3\u51b3\u3002\n\n\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff0c\u4e3b\u8981\u662f\u60f3\u5230\u6700\u5927\u751f\u6210\u6811\uff0c\u5176\u4ed6\u5c31\u4e0d\u96be\u4e86\uff0c\u6811\u5256\u53ea\u662f\u4e00\u79cd\u529e\u6cd5\u800c\u5df2\u3002\n\n\u8d34\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6 \n#define INF 0x7fffffff //\u8bbe\u7f6e\u6700\u5927\u503c\uff0c\u7528\u4e8e\u5728\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u4e2d\u6c42\u6700\u5c0f\u503c \nusing namespace std;\ninline void read(int &x)//\u8bfb\u5165\u4f18\u5316 \n{\n\tint w=x=0;\n\tchar ch=0;\n\twhile(ch<'0'||'9'<ch)\n\t\tw|=(ch=='-'),ch=getchar();\n\twhile('0'<=ch&&ch<='9')\n\t\tx=(x<<3)+(x<<1)+(ch^'0'),ch=getchar();\n\tx=w?-x:x;\n}\nconst int N=2e4,M=1e5;\nstruct segtree//\u7ebf\u6bb5\u6811 \n{\n\tint l,r,wmin;\n}tr[N<<2];\n#define ls tr[id].l\n#define rs tr[id].r\n#define lid id<<1\n#define rid id<<1|1\n//\u4e00\u624b\u5b8f\u5b9a\u4e49 \nint n,m,q,root,a,b,c;//root\u4e3a\u865a\u70b9 \nstruct Edge\n{\n\tint u,v,w;\n}E[N<<1],e[M|1];//\u90bb\u63a5\u8868 \nbool operator <(const Edge &x,const Edge &y)\n{\n\treturn x.w>y.w;\n}//\u6392\u5e8f\u4f7f\u7528\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26 \nint last,fst[N],nxt[N<<1];\nint tot,sum,rep[N];//\u5e76\u67e5\u96c6\u90e8\u5206 \nint fa[N],dep[N],size[N];\nint son[N],top[N],val[N];\nint cnt,name[N],node[N];//\u6811\u94fe\u5256\u5206\u6240\u9700\u7684\u6570\u7ec4 \nint find(int x)//\u5e76\u67e5\u96c6 \n{\n\twhile(x!=rep[x])\n\t\tx=rep[x]=rep[rep[x]];\n\treturn x;\n}\nvoid add(int x,int y,int z)//\u52a0\u8fb9 \n{\n\tE[++last]=(Edge){x,y,z};\n\tnxt[last]=fst[x],fst[x]=last;\n}\nvoid pre(int x)//\u6811\u94fe\u5256\u5206\u7b2c\u4e00\u6b21DFS \n{\n\tdep[x]=dep[fa[x]]+1,size[x]=1;\n\tfor(int i=fst[x];i;i=nxt[i])\n\t\tif(E[i].v^fa[x])//\u76f8\u5f53\u4e8eE[i].v!=fa[x] \n\t\t{\n\t\t\tfa[E[i].v]=x,val[E[i].v]=E[i].w;\n\t\t\tpre(E[i].v),size[x]+=size[E[i].v];\n\t\t\tif(size[son[x]]<size[E[i].v])\n\t\t\t\tson[x]=E[i].v;\n\t\t}\n}\nvoid dfs(int x,int up)//\u6811\u94fe\u5256\u5206\u7b2c\u4e8c\u6b21DFS \n{\n\ttop[x]=up,name[x]=++cnt,node[cnt]=x;\n\tif(son[x])\n\t\tdfs(son[x],up);\n\tfor(int i=fst[x];i;i=nxt[i])\n\t\tif(E[i].v^fa[x]&&E[i].v^son[x])\n\t\t\tdfs(E[i].v,E[i].v);\n}\nvoid build(int x,int y,int id)//\u7ebf\u6bb5\u6811\u5efa\u6811 \n{\n\tls=x,rs=y;\n\tif(x==y)\n\t{\n\t\ttr[id].wmin=val[node[x]];\n\t\treturn;\n\t}\n\tint mid=(ls+rs)>>1;\n\tbuild(x,mid,lid),build(mid+1,y,rid);\n\ttr[id].wmin=min(tr[lid].wmin,tr[rid].wmin);\n}\nint query(int x,int y,int id)//\u65e0\u9700\u4fee\u6539\uff0c\u6240\u4ee5modify\u90fd\u61d2\u5f97\u5199\u4e86 \n{\n\tif(x<=ls&&rs<=y)\n\t\treturn tr[id].wmin;\n\tint mid=(ls+rs)>>1,res=INF; \n\tif(x<=mid)\n\t\tres=min(res,query(x,y,lid));\n\tif(y>mid)\n\t\tres=min(res,query(x,y,rid));\n\treturn res;\n}\nint ask(int x,int y)//\u6811\u94fe\u5256\u5206\u67e5\u8be2\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6743 \n{\n\tint res=INF;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tres=min(res,query(name[top[x]],name[x],1));\n\t\tx=fa[top[x]];\n\t}\n\tif(x==y)\n\t\treturn res;\n\tif(name[x]>name[y])\n\t\tswap(x,y);\n\treturn min(res,query(name[x]+1,name[y],1));\n}\nint main()\n{\n\tread(n),read(m),root=n+1;\n\tfor(int i=1;i<=n;++i)\n\t\trep[i]=i,e[++sum]=(Edge){root,i,-1};//\u8fde\u865a\u8fb9 \n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tread(a),read(b),read(c);\n\t\te[++sum]=(Edge){a,b,c};\n\t}\n\tsort(e+1,e+sum+1);//\u6392\u5e8f \n\t//\u7531\u4e8ekruskal\u7684\u6c42\u89e3\u8fc7\u7a0b\u65e0\u9700\u5efa\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8fde\u6700\u5927\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5c31\u597d \n\tfor(int i=1;i<=sum;++i)\n\t{\n\t\ta=e[i].u,b=e[i].v,c=e[i].w;\n\t\tif(find(a)!=find(b))//\u6700\u5927\u751f\u6210\u6811\u7684\u6c42\u89e3\u8fc7\u7a0b \n\t\t{\n\t\t\tadd(a,b,c),add(b,a,c);//\u73b0\u5728\u518d\u6765\u8fde\u8fb9 \n\t\t\t++tot,rep[find(b)]=find(a);\n\t\t}\n\t\tif(tot==n)\n\t\t\tbreak;\n\t}\n\tpre(root),dfs(root,root),build(1,root,1);\n\tread(q);\n\tfor(int i=1;i<=q;++i)\n\t\tread(a),read(b),printf(\"%d\\n\",ask(a,b));\n\treturn 0;\n}\n```\n\u8fd9\u4e0d\u5c31AC\u4e86\u5417\uff1f\u4e0d\u559c\u52ff\u55b7 ~~\u559c\u6b22\u7684\u8bb0\u5f97\u70b9\u4e2a\u8d5e\u54df\uff01~~",
        "postTime": 1565184589,
        "uid": 116293,
        "name": "SammyChu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# \u8fd9\u9898\u53ef\u4ee5\u7528\u7eaf\u5e76\u67e5\u96c6\u6c34\u8fc7\uff01\uff01\n\n\u4e0d\u8fc7\u867d\u8bf4\u662f\u6c34\uff0c\u4e5f\u662f\u8981\u52a8\u4e00\u4e0b\u8111\u5b50\u7684\u3002\n\n### \u6b65\u9aa4\u4e00\uff1a\u5229\u7528\u5e76\u67e5\u96c6\u5efa\u6700\u5927\u751f\u6210\u6811\n\n\u9996\u5148\u7b80\u5355\u5206\u6790\u9898\u76ee\u610f\u601d\uff0c\u6211\u4eec\u9700\u8981\u627e\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u8d2a\u5fc3\u6765\u60f3\uff0c\u6211\u4eec\u5c3d\u91cf\u8981\u9009\u8f83\u5927\u7684\u8fb9\uff0c\u4f7f\u7b54\u6848\u6700\u4f18\u3002\n\n\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4e00\u6761\u4e00\u6761\u4f9d\u6b21\u52a0\u5165\uff0c\n\n\u4f7f\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u4e24\u70b9\u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\n\n\u6b64\u65f6\u52a0\u5165\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u6743\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u4e0a\u8ff0\u505a\u6cd5\u5c31\u662f\u5efa\u6700\u5927\u751f\u6210\u6811\uff0c\u5229\u7528Kruskal\u7b97\u6cd5\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u70b9\u4e4b\u95f4\u5b58\u5728\u6700\u4f18\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u4e00\u5b9a\u5728\u539f\u56fe\u7684\u6700\u5927\u751f\u6210\u6811\u4e0a\u3002\n\n\n\n**\u63a5\u4e0b\u6765\u662f\u91cd\u70b9**\uff1a\n### \u6b65\u9aa4\u4e8c\uff1a\u5229\u7528\u5e76\u67e5\u96c6\u67e5\u627e\u4e24\u70b9LCA\n\n\u5efa\u6811\u540e\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u7684\u505a\u6cd5\u662f\u627e\u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\n\n\u8fd9\u6837\u5c31\u627e\u5230\u4e86\u5b83\u4eec\u5728\u6811\u4e0a\u7684\u552f\u4e00\u8def\u5f84\uff0c\u4e4b\u540e\u968f\u4fbf\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u5f53\u7136\u5982\u679c\u4f60\u4e0d\u4f1a\u8fd9\u4e9b\u9ad8\u7ea7\u65b9\u6cd5\uff0c\u76f4\u63a5dfs\uff0cbfs\uff0cspfa\u7b49\u66b4\u529b\u505a\u6cd5\uff0c\u62ff\u4e00\u534a\u4ee5\u4e0a\u7684\u5206\u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\n\n\uff08~~**\u6211\u6ca1\u6d4b\u8fc7** \uff0c \u66b4\u529b\u5206\u4e0d\u9ad8\u4e0d\u8981\u95ee\u6211~~\uff09\n\n\u4f46\u662f\u6211\u4eec\u90fd\u662f\u5f88\u8d2a\u5fc3\u7684\u4eba\uff0c\u603b\u60f3\u8981\u7528\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u62ff\u6700\u591a\u7684\u5206\uff0c\u4e8e\u662f...\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u67e5\u627eLCA\uff01\n\n**\u6709\u8bf7\u6734\u7d20\u5e76\u67e5\u96c6\uff01**\n\n\u9996\u5148\u5e76\u67e5\u96c6\u5fc5\u987b\u4fdd\u5b58\u8def\u5f84\uff0c\u4e0d\u80fd\u7528\u8def\u5f84\u538b\u7f29\uff0c~~\u4e0d\u7136\u4f60\u641e\u641e\u770b\uff1f~~\n\n\u56e0\u6b64\u4e3a\u4e86\u964d\u4f4e\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u91c7\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06\u8282\u70b9\u6570\u5c11\u7684\u8def\u5f84\u5408\u5e76\u5230\u8282\u70b9\u6570\u591a\u7684\n\n\u4ee3\u7801\uff1a\n\n```cpp\nint fa[10005];\n\nint find(int x){\n    if(fa[x]<0) return x;\n    else return find(fa[x]);\n}\n\nfa\u6570\u7ec4\u521d\u59cb\u5316\uff1a{\n   for(int i=1;i<=n;i++) fa[i]=-1;\n   /*\u8fd9\u662f\u4e00\u4e2a\u795e\u5947\u65b9\u6cd5\uff01\n   \u8ba9\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u513f\u5b50\u603b\u6570\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7b49\u4e8e\u6839\u7684\u7236\u4eb2\u7684\u76f8\u53cd\u6570\n   \u8fd9\u6837\u6211\u4eec\u65e2\u80fd\u65b9\u4fbf\u627e\u5230\u6839\u8282\u70b9\uff08if (fa[x]<0)  x is root\uff09\n   \u540c\u65f6\u8bb0\u5f55\u4e86\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u65b9\u4fbf\u542f\u53d1\u5f0f\u5408\u5e76\n   */\n}\n\n\nvoid Union(int x,int y,int v){//\u542f\u53d1\u5f0f\u5408\u5e76\n    int xx=find(x);//x\u6240\u5728\u96c6\u5408\u7684\u6839\n    int yy=find(y);//y\u6240\u5728\u96c6\u5408\u7684\u6839\n    if(xx==yy) return ;//x\uff0cy\u5728\u540c\u4e00\u96c6\u5408\uff0c\u76f4\u63a5\u8df3\u51fa\n    if(fa[xx]>fa[yy]) swap(xx,yy);//\u5982\u679cx\u6240\u5728\u96c6\u5408\u6bd4y\u6240\u5728\u96c6\u5408\u5c0f\uff0c\u5219\u4ea4\u6362\n    fa[xx]+=fa[yy];//\u628ay\u6240\u5728\u96c6\u5408\u5e76\u5230x\u4e0a\uff0c\u66f4\u65b0x\u96c6\u5408\u7684\u5927\u5c0f\n    fa[yy]=xx;//\u5b8c\u6210\n}\n```\n\n\n\u4ee5\u4e0a\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\n\n\n\u6211\u4eec\u5728\u5efa\u6700\u5927\u751f\u6210\u6811\u65f6\uff0c\u5229\u7528\u8be5\u65b9\u6cd5\u7684\u5e76\u67e5\u96c6\u3002\n\n\n\u7136\u540e\u6765\u7b97\u7b54\u6848\uff1a\n\n\u8bfb\u5165\u4e24\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u5185\uff0c\u4e0d\u662f\u5219\u8f93\u51fa-1\n\n\u7528\u4e24\u4e2a\u6808\u5206\u522b\u5b58\u50a8\u4e24\u4e2a\u70b9\u904d\u5386\u5230\u6839\u7684\u8def\u5f84\uff0c\n\n\u56e0\u4e3a\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u6240\u4ee5\u8def\u5f84\u4e00\u5b9a\u6709\u91cd\u5408\u7684\u90e8\u5206\n\n\u6211\u4eec\u53ea\u8981\u4e0d\u65ad\u4ece\u6808\u9876\u5f39\u51fa\u5143\u7d20\uff0c\u4f7f\u91cd\u5408\u90e8\u5206\u51cf\u5c11\u5230\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\n\n\u8fd9\u4e2a\u70b9\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\n\n\u7136\u540e\u6211\u4eec\u6709\u4e86\u4e24\u4e2a\u70b9\u5230\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u8def\u5f84\n\n\u5c31\u76f8\u5f53\u4e8e\u6211\u4eec\u6709\u4e86\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\n\n\uff08\u55ef\uff0c\u5e76\u67e5\u96c6\u53ef\u4ee5\u76f4\u63a5\u5f53\u6811\u7528\u4e86\uff09\n\n\u7136\u540e\u5c31easy\u4e86\uff01\n\n\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Edge{\n    int x,y;\n    int v;\n}e[500005];//\u5b58\u53cc\u5411\u8fb9\n\nint fa[100005],g[100005];//g\u6570\u7ec4\u5b58\u50a8\u7684\u662fx\u5230fa[x]\u7684\u8fb9\u7684\u6743\u503c\uff0c\u65b9\u4fbf\u7b97\u7b54\u6848\nint n,m;\n\nint sta[100005];//\u68081\nint stb[100005];//\u68082\nint ta,tb;//\u6808\u7684\u8ba1\u6570\u5668\n\nbool cmp(Edge a,Edge b){ return a.v>b.v; }//\u628a\u8fb9\u6309\u4ece\u5927\u5230\u5c0f\u6392\n\nint find(int x){//\u6734\u7d20find\n    if(fa[x]<0) return x;\n    else return find(fa[x]);\n}\n\nvoid Union(int x,int y,int v){\n    int xx=find(x); int yy=find(y);\n    if(xx==yy) return ;\n    if(fa[xx]>fa[yy]) swap(xx,yy);\n    fa[xx]+=fa[yy];\n    fa[yy]=xx;\n    g[yy]=v;//y\u96c6\u5408\u5230x\u96c6\u5408\u7684\u6700\u4f18\u8fb9\uff0c\u6743\u503c\u4e3av\uff0c\u611f\u6027\u7406\u89e3\u4e3ay\u5230x\u7684\u8fb9\u4e3av\n}\n\nint main() {\n\tmemset(g,0x3f3f3f3f,sizeof(g));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) fa[i]=-1;//\u521d\u59cb\u5316\n    \n\tfor(int i=1;i<=m;i++){\n\t    scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].v);\n\t}//\u8bfb\u5165\n\t\n\tsort(e+1,e+m+1,cmp);//\u6392\u5e8f\n\t\n\tfor(int i=1;i<=m;i++)\n\tUnion(e[i].x,e[i].y,e[i].v);//\u5efa\u6700\u5927\u751f\u6210\u6811\n\t\n\tint q; scanf(\"%d\",&q);\n\twhile(q--){\n       int ans;\n       ta=tb=0;//\u6808\u6e05\u7a7a\n       ans=0x3f3f3f3f;\n\t    int x,y; scanf(\"%d%d\",&x,&y);\n\t    int xx=find(x); int yy=find(y);\n\t    if(xx!=yy) { printf(\"-1\\n\"); continue; }//\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u5185\n\t    for(;x;x=fa[x]) sta[++ta]=x;\n\t    for(;y;y=fa[y]) stb[++tb]=y;//\u7edf\u8ba1\u8def\u5f84\n\t    \n\t    while(sta[ta-1]==stb[tb-1]&&ta>1&&tb>1) { ta--; tb--; }\n\t    //\u53bb\u6389\u91cd\u5408\u90e8\u5206\n\t\tfor(int i=1;i<ta;i++) ans=min(ans,g[sta[i]]);\n\t\tfor(int i=1;i<tb;i++) ans=min(ans,g[stb[i]]);//\u7edf\u8ba1\u7b54\u6848\n\t\t\n\t\tif(ans==0x3f3f3f3f) printf(\"-1\\n\");\n\t\telse\n\t\tprintf(\"%d\\n\",ans); //\u8f93\u51fa\n\t}\n\treturn 0;\n}\n\n\n```\n\n\u55ef\uff0c\u8865\u5145\u4e00\u4e0b\uff0c\n\n\u7531\u4e8eKruskal\u8fd0\u884c\u65f6\u4e0d\u4e00\u5b9a\u6070\u9009\u4e86n-1\u6761\u8fb9\uff0c\u8dd1\u51fa\u6765\u7684\u5e94\u8be5\u662f\u6700\u5927\u751f\u6210\u68ee\u6797\uff08\u6ed1\u7a3d\uff09\n\n\u8fd8\u6709 \u6709\u4eba\u53ef\u80fd\u4e0d\u7406\u89e3g\u6570\u7ec4\u7684\u4f5c\u7528\n\n\u51c6\u786e\u6765\u8bf4\u8bb0\u5f55\u7684\u662f\u96c6\u5408x\u5230\u96c6\u5408fa[x]\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\uff08\u6700\u4f18\u8fb9\uff09\uff0c\n\n\u4f46\u662f\u8fd9\u6837\u89e3\u91ca\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u8bf4\u7528\u5e76\u67e5\u96c6\u7edf\u8ba1\u8def\u5f84\u65f6\u5f97\u5230\u4e86\u4e24\u70b9\u7684LCA\uff0c\n\n\u800c\u662f\u5f97\u5230\u4e86\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u516c\u5171\u70b9\uff08\u4e0d\u4e00\u5b9a\u6070\u597d\u662fLCA\uff09\n\n\u6240\u4ee5\u4e0d\u8981\u7528\u8fd9\u79cd\u65b9\u6cd5\u6c34LCA\u6a21\u677f\u9898\uff01\uff08~~\u6211\u89c9\u5f97\u5e03\u661f~~\uff09\n",
        "postTime": 1564472731,
        "uid": 31928,
        "name": "\u6731\u5b50\u6657",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "========================================================\n\n=======================\u5f00\u59cb\u5206\u5272\u7ebf========================\n\n========================================================\n\n## \u8d21\u732e\u3010Kruskal + \u94fe\u5256\u3011\u65b9\u6cd5 \u5e76\u9644\u5e26\u3010\u6613\u8bfb \u4f4e\u8026\u5408\u4ee3\u7801\u3011\n****\n**\u5206\u6790\uff1a**\n\n- \u4e0d\u96be\u53d1\u73b0\u6709\u4e9b\u9650\u5236\u8fc7\u4e8e\u5c0f\u7684\u9053\u8def\u53f8\u673a\u4f1a\u653e\u5f03\u5b83\u4eec\n\n- \u7531\u4e8e\u4e0d\u9650\u5236\u53f8\u673a\u901a\u8fc7\u7684\u9053\u8def\u6570\u91cf\uff0c\u6240\u4ee5\u5c3d\u91cf\u9009\u62e9\u4e00\u4e9b\u5305\u542b\u7684\u9650\u5236\u5927\u7684\u9053\u8def\u6765\u7ec4\u6210\u53f8\u673a\u7684\u8def\u7ebf\uff0c\u56e0\u4e3a\u53f8\u673a\u7684\u8f7d\u91cd\u4e0a\u9650\u662f\u8def\u7ebf\u4e2d\u6700\u5c0f\u7684\u9053\u8def\u91cd\u91cf\u9650\u5236\n\n- \u53c8\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u56fe\u91cc\u9762\u9650\u5236\u6700\u5927\u7684n-1\u6761\u9053\u8def\u7ec4\u6210\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u4e24\u70b9\u4e4b\u95f4\u7684\u9053\u8def\u4e2d\u7684\u6700\u5c0f\u9650\u5236\u6700\u5927\u4e86\uff01\n\n- \u6240\u4ee5\u53ef\u4ee5\u5148\u4f7f\u7528**Kruskal**\u5f97\u5230 **\u4e00\u5806** \u6700\u5927\u751f\u6210\u6811\uff08\u4e3a\u4ec0\u4e48\u662f\u4e00\u5806\u5462\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u53ef\u80fd\u4e0d\u8054\u901a\uff09\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e9b\u6700\u5927\u751f\u6210\u6811\u90fd\u8fde\u63a5\u5230\u4e00\u4e2a\u865a\u6839\u4e0a\uff0c\u8fd9\u6837\u5b50\u65b9\u4fbf\u6211\u4eec\u5efa\u6811\n\n- \u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u5c31\u662f\u6211\u4eec\u628a\u90a3\u4e9b\u548c\u865a\u6839\u76f8\u8fde\u7684\u8fb9\u7684\u6743\u503c\u8bbe\u7f6e\u4e3a-1\uff0c\u65b9\u4fbf\u4ee5\u540e\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u5047\u5982\u4e24\u4e2a\u70b9\u4e0d\u8054\u901a\u5c31\u76f4\u63a5\u8fd4\u56de-1\n\n- \u8fd8\u6709\u5c31\u662f\u8981\u6ce8\u610fdfs1\u7684\u65f6\u5019\u518d\u4f20\u4e00\u4e2a\u53c2\u6570w\uff0c\u56e0\u4e3a\u94fe\u5256\u7ef4\u62a4\u7684\u662f\u70b9\u6743\u503c\uff0c\u6240\u4ee5\u8981\u628a\u8fb9\u6743\u503c\u4f20\u9012\u7ed9\u8fd9\u6761\u8fb9\u4e0b\u65b9\u7684\u8282\u70b9\u4e0a\u9762\u3002\n***\n[[ 691ms AC ]](https://www.luogu.org/record/26007934) **\u4ee3\u7801\u89c1\u4e0b\uff1a**\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100100\nusing namespace std;\nint root,n,m,q,cal=1,origin[maxn],fa[maxn],size[maxn],calc,ans[300100];\nstruct lines{\n    int x,y,w;\n}line[500010];\nstruct edges{\n    int nex,to,w;\n}edge[1000010];\nstruct nodes{\n    int head,dfn,size,son,depth,top,fa,value;\n}node[maxn];\nclass segment_tree\n{\n    private:\n        #define lson id<<1\n        #define rson id<<1|1\n        #define mid ((l+r)>>1)\n        const int maxx=0x3f3f3f3f;\n        struct leaves{\n            int l,r,minn;\n        }leaf[maxn<<2];\n        inline int min(int a,int b)\n        {\n            return a<b? a:b;\n        }\n        inline void push_up(int id)\n        {\n            leaf[id].minn=min(leaf[lson].minn,leaf[rson].minn);\n        }\n    public:\n        void build(int id,int l,int r)\n        {\n            leaf[id].l=l;\n            leaf[id].r=r;\n            if(l==r)\n            {\n                leaf[id].minn=node[origin[l]].value;\n                return;\n            }\n            build(lson,l,mid);\n            build(rson,mid+1,r);\n            push_up(id);\n        }\n        int query(int id,int ql,int qr)\n        {\n            if(qr<ql)return maxx;\n            int l=leaf[id].l;\n            int r=leaf[id].r;\n            if(l>=ql&&r<=qr)return leaf[id].minn;\n            int min_=maxx;\n            if(mid>=ql)min_=min(min_,query(lson,ql,qr));\n            if(mid <qr)min_=min(min_,query(rson,ql,qr));\n            return min_;\n        }\n}tree;\ninline int qr()\n{\n    int sum=0;\n    char j=0;\n    while(!isdigit(j))j=getchar();\n    while( isdigit(j)){sum=(sum<<1)+(sum<<3)+(j^48);j=getchar();}\n    return sum;\n}\ninline void add(int u,int v,int w)\n{\n    edge[++cal].nex=node[u].head;\n    edge[cal].to=v;\n    edge[cal].w=w;\n    node[u].head=cal;\n}\nint find(int x)\n{\n    if(fa[x]==x)return x;\n    return fa[x]=find(fa[x]);\n}\ninline void combine(int x,int y)\n{\n    if(size[x]<size[y])\n    {\n        size[y]+=size[x];\n        fa[find(x)]=find(y);\n    }\n    else \n    {\n        size[x]+=size[y];\n        fa[find(y)]=find(x);\n    }\n}\ninline bool cmp(const lines &a,const lines &b)\n{\n    return a.w>b.w;\n}\ninline void readin()\n{\n    n=qr();\n    m=qr();\n    for(int i=1;i<=n;i++)\n    fa[i]=i,size[i]=1;\n    for(int i=1;i<=m;i++)\n    {\n    line[i].x=qr();\n    line[i].y=qr();\n    line[i].w=qr();\n    }\n    sort(line+1,line+1+m,cmp);\n}\ninline void Kruskal()\n{\n    for(int i=1;i<=m;i++)\n    {\n        int x=line[i].x;\n        int y=line[i].y;\n        if(find(x)!=find(y))\n        {\n            add(x,y,line[i].w);\n            add(y,x,line[i].w);\n            combine(x,y);\n        }\n    }\n    root=n+1;\n    for(int i=1;i<=n;i++)\n    if(fa[i]==i)\n    add(root,i,-1);//\u56e0\u4e3a\u4ece\u6839\u8282\u70b9\u4e0b\u53bb\u65b9\u5411\u786e\u5b9a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u53ef\u4ee5\u53ea\u7528\u5efa\u5355\u5411\u8fb9 \n}\nvoid dfs1(int u,int fa,int w)\n{\n    node[u].fa=fa;\n    node[u].value=w;\n    node[u].size=1;\n    node[u].depth=node[fa].depth+1;\n    for(int i=node[u].head;i;i=edge[i].nex)\n    {\n        int y=edge[i].to;\n        if(y!=fa)\n        {\n            dfs1(y,u,edge[i].w);\n            node[u].size+=node[y].size;\n            if(node[y].size>node[node[u].son].size)\n            node[u].son=y;\n        }\n    }\n}\nvoid dfs2(int u,int pretop)\n{\n    node[u].top=pretop;\n    node[u].dfn=++calc;\n    origin[calc]=u;\n    if(!node[u].son)return;\n    dfs2(node[u].son,pretop);\n    for(int i=node[u].head;i;i=edge[i].nex)\n    {\n        int y=edge[i].to;\n        if(y!=node[u].fa&&y!=node[u].son)\n        dfs2(y,y);\n    }\n}\ninline void init()//\u521d\u59cb\u5316 \n{\n    dfs1(root,0,-1);\n    dfs2(root,root);\n    tree.build(1,1,root);\n}\ninline int MIN(int x,int y)\n{\n    int minn=0x3f3f3f3f;\n    while(node[x].top!=node[y].top)\n    {\n        if(node[node[x].top].depth<node[node[y].top].depth)swap(x,y);\n        minn=std::min(minn,tree.query(1,node[node[x].top].dfn,node[x].dfn));\n        x=node[node[x].top].fa;\n    }\n    if(node[x].depth<node[y].depth)swap(x,y);\n    minn=std::min(minn,tree.query(1,node[y].dfn+1,node[x].dfn));\n    return minn;\n}\ninline void Solve()\n{\n    q=qr();\n    for(int i=1;i<=q;i++)\n    ans[i]=MIN(qr(),qr());\n}\ninline void print()\n{\n    for(int i=1;i<=q;i++)\n    printf(\"%d\\n\",ans[i]);\n}\nint main()\n{\n    readin();\n    Kruskal();\n    init();\n    Solve();\n    print();\n    return 0;\n}\n```\n***\nThx for watching with patience\n========================================================\n\n========================================================\n\n=======================\u7ed3\u675f\u5206\u5272\u7ebf========================\n\n========================================================",
        "postTime": 1572447595,
        "uid": 117111,
        "name": "BrandonSoong",
        "ccfLevel": 4,
        "title": "\u3010\u8d27\u8f66\u8fd0\u8f93\u3011Kruskal + \u94fe\u5256"
    },
    {
        "content": "\u5f53\u7136\u8fd9\u9898\u6709\u5f88\u591a\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u770b\u5230\u6ca1\u6709\u4eba\u5199DSU\u7684\u5f88\u60ca\u5947\n\n\u6309\u7167\u4e4b\u524d\u505a\u8fde\u53cc\u5411\u8fb9\u9898\u7684\u7ecf\u9a8c\uff0c\u8fd9\u9898\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee$x,y$\uff0c\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u5f53\u4e24\u4e2a\u70b9\u96c6$x,y$\u5408\u5e76\u65f6\uff0c\u4e00\u4e9b\u6d89\u53ca\u5230\u5176\u4e2d\u70b9\u7684\u8be2\u95ee\u53ef\u4ee5\u88ab\u89e3\u51b3\uff0c\u800c\u904d\u5386$x,y$\u4e2d\u7684\u8be2\u95ee\u96c6\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u5b58\u4e0b\u8fd9\u4e2a\u70b9\u96c6\u6d89\u53ca\u5230\u7684\u8be2\u95ee\uff0c\u5728\u5408\u5e76\u65f6\u6211\u4eec\u8981\u904d\u5386\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u540c\u65f6\u5b8c\u6210\u5bf9\u4e8e\u8be2\u95ee\u7684\u56de\u7b54\n\n\n```cpp\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\nconst int N=1e5+10;\n\nint n,m,q;\nstruct Edge{\n\tint u,v,x;\n\tvoid Get(){ u=rd(),v=rd(),x=rd(); }\n\tbool operator < (const Edge __) const {\n\t\treturn x>__.x;\n\t}\n}e[N];\nint ans[N];\nstruct Query{\n\tint x,id;\n};\nvector <Query> V[N];\nint fa[N];\nint Find(int x){ return fa[x]==x?x:fa[x]=Find(fa[x]);}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) fa[i]=i;\n\trep(i,1,m) e[i].Get();\n\tsort(e+1,e+m+1);\n\trep(i,1,q=rd()) {\n\t\tans[i]=-1;\n\t\tint x=rd(),y=rd();\n\t\tV[x].push_back((Query){y,i});\n\t\tV[y].push_back((Query){x,i});\n\t}\n\trep(i,1,m) {\n\t\tint x=Find(e[i].u),y=Find(e[i].v);\n\t\tif(x==y) continue;\n\t\tif(V[x].size()>V[y].size()) swap(x,y);\n\t\tfa[x]=y;\n\t\trep(j,0,V[x].size()-1) {\n\t\t\tint t=V[x][j].x,id=V[x][j].id;\n\t\t\tif(Find(t)==y) {\n\t\t\t\tans[id]=max(ans[id],e[i].x);\n\t\t\t} else V[y].push_back(V[x][j]);\n\t\t}\n\t}\n\trep(i,1,q) printf(\"%d\\n\",ans[i]);\n}\n\n\n```\n\u975e\u5e38\u7cbe\u7b80\n\n\u5982\u679c\u4f60\u4e0d\u61c2\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u539f\u7406\uff0c\u6211\u53ef\u4ee5\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\n\n\u5bf9\u4e8e\u8fd9\u4e9b\u96c6\u5408\uff0c\u5143\u7d20\u603b\u6570\u4e3am\n\n\u6bcf\u4e00\u6b21\u6211\u4eec\u5c06\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u5927\u7684\u4e0a\u9762\uff0c\u96c6\u5408\u5927\u5c0f\u81f3\u5c11\u662f\u4e24\u500d\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u4f1a\u5728$log2(m)$\u6b21\u5408\u5e76\u4e2d\u88ab\u8bbf\u95ee\u5230\n\n\u603b\u590d\u6742\u5ea6$q \\cdot log(q)$",
        "postTime": 1565430501,
        "uid": 130740,
        "name": "orangejuice",
        "ccfLevel": 10,
        "title": "P1967 \u8d27\u8f66\u8fd0\u8f93"
    },
    {
        "content": "\u771f\u6b63\u7684\u666e\u53ca\u7ec4\u505a\u6cd5\u5728\u8fd9\u91cc\uff01\n\n\u9996\u5148\u6784\u9020\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u4e0d\u7528LCA\u548c\u6240\u8c13\u7684\u6811\u4e0a\u500d\u589e\uff0c\u53ea\u8981\u4e71\u641e\u5c31\u597dhhh\n\n\u5148\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mlongm+n/k\\*q)+(mlongm+k\\*q)\n\nmlongm\u662f\u751f\u6210\u6811\u7684\u590d\u6742\u5ea6\uff0ck\u662f\u5206\u7ec4\u7684\u590d\u6742\u5ea6\uff0c\u6839\u636e\u6570\u5b66\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f97\u77e5\u8981\u8ba9\u590d\u6742\u5ea6\u6700\u5c0f\uff0c\u8981\u4f7f\u5f97n/k=k,\u6240\u4ee5k\u53d6100\u3002\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u6bcf\u5408\u5e76100\u6761\u8fb9\uff0c\u5224\u65ad\u90a3\u4e9b\u8be2\u95ee\u5f97\u5230\u4e86\u7b54\u6848\uff0c\u5206\u522b\u5b58\u5230\u4e00\u4e2avector\u6570\u7ec4\u4e2d\u3002\n\n```cpp\n\n#include <iostream>//\u8f93\u5165\u8f93\u51fa\u6d41\n#include <cstdio>//\u6807\u51c6\u8f93\u5165\u8f93\u51fa\n#include <cstring>//memset\u9700\u8981\n#include <algorithm>//sort\u9700\u8981\n#include <vector>//vector\u9700\u8981\nusing namespace std;\nint n,m;\nstruct node{\n    int x,y,z;\n}a[100001];\nint fa[100001];//\u5b9a\u4e49\u53d8\u91cf\uff0cfa\u6570\u7ec4\u662f\u5e76\u67e5\u96c6\u4e2d\u5b58\u50a8\u7956\u5148\u7528\u7684\u3002\n//\u4ee5\u4e0b\u4e3a\u5e76\u67e5\u96c6\u7684\u51fd\u6570\nvoid init()\n{\n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n}//\u521d\u59cb\u5316\nint getfa(int x)\n{\n    if(fa[x]==x)\n        return x;\n    return fa[x]=getfa(fa[x]);\n}//\u627e\u7239\u51fd\u6570\nbool unio(int a,int b)\n{\n    int c=getfa(a);\n    int d=getfa(b);\n    if(c!=d)\n    {\n        fa[d]=c;\n        return false;\n    }\n    return true;\n}//\u5408\u5e76\u51fd\u6570\nint cmp(node xx,node yy)\n{\n    return xx.z>yy.z;\n}//\u6392\u5e8f\u6807\u51c6\uff0csort\u9700\u8981\n//\u4ee5\u4e0a\u4e3a\u5e76\u67e5\u96c6\u7684\u51fd\u6570\nint qq;\nint s[100001],t[100001];//\u6bcf\u7ec4\u8be2\u95ee\nvector<int> Ans[100010];//\u5b58\u6bcf100\u6761\u8fb9\u7684\u7ed3\u679c\nint ans[100010];\nbool vis[100001];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);//\u8bfb\u5165n\u548cm\n    init();//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);//\u8bfb\u5165\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\n    sort(a+1,a+1+m,cmp);//\u6309\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6784\u9020\u6700\u5927\u751f\u6210\u6811\n    scanf(\"%d\",&qq);\n    for(int i=1;i<=qq;i++)\n        scanf(\"%d%d\",&s[i],&t[i]);//\u8bfb\u5165\u6bcf\u7ec4\u8be2\u95ee\n    for(int i=1;i<=m;i++)\n    {\n        if(getfa(a[i].x)!=getfa(a[i].y))\n                unio(a[i].x,a[i].y);//\u5982\u679c\u5f53\u524d\u4e24\u70b9\u5c1a\u4e0d\u8054\u901a\uff0c\u5408\u5e76\n            if(i%100==0 || i==m)//\u5982\u679c\u8bfb\u5165\u4e86100\u6761\u8fb9\n            {\n                for(int j=1;j<=qq;j++)\n                {\n                    if(!vis[j] && getfa(s[j])==getfa(t[j]))//\u5982\u679c\u5f53\u524d\u6ca1\u6709\u66f4\u65b0\u7b54\u6848\uff0c\u4e14\u80fd\u591f\u5230\u8fbe\n                    {\n                        vis[j]=1;//\u6807\u8bb0\n                        Ans[(i-1)/100].push_back(j);//\u5b58\u4e0b\u7ed3\u679c\n                    }\n                }\n        }\n    }\n    init();\u518d\u6b21\u521d\u59cb\u5316\n    memset(ans,-1,sizeof(ans));//\u8d4b\u6210-1\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5982\u679c\u6ca1\u66f4\u65b0\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\n    for(int i=1;i<=m;i++)\n    {\n        if(getfa(a[i].x)!=getfa(a[i].y))\n            unio(a[i].x,a[i].y);//\u540c\u4e0a\n        int num=(i-1)/100;\n        for(int j=0;j<Ans[num].size();j++)//\u4ece\u5f53\u524d\u5206\u7ec4\u5f00\u59cb\u5224\u65ad\n        {\n            if(getfa(s[Ans[num][j]])==getfa(t[Ans[num][j]]) && ans[Ans[num][j]]==-1)//\u5982\u679c\u80fd\u5230\u8fbe\u4e14\u6ca1\u88ab\u66f4\u65b0\u8fc7\n                ans[Ans[num][j]]=a[i].z//;\u66f4\u65b0\u7b54\u6848\n           }\n    }\n    for(int i=1;i<=qq;i++)\n        cout<<ans[i]<<endl;//\u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\uff0c\u8f93\u51fa\u7ed3\u679c\n}\n\n```",
        "postTime": 1446790736,
        "uid": 6496,
        "name": "lijiamu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\n\u9996\u5148\u6784\u9020\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5982\u679c\u67d02\u4e2a\u70b9\u8054\u901a\u4e86\uff0c\u90a3\u4e48\u90a3\u4e2a\u8fb9\u5c31\u662f\u7b54\u6848\uff0c\u6240\u4ee5\u9700\u8981\u628a\u8fd9\u6761\u8fb9\n\n\n\u4f5c\u4e3a\u90a3\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u800c\u4e14\u662f\u7531\u53f6\u5b50\u5f00\u59cb\u6784\u5efa\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u6bcf\u56de\u548c\u5e762\n\n\n\u4e2a\u96c6\u5408\u7684\u65f6\u5019\uff0c\u628a\u90a3\u6761\u8fde\u63a52\u4e2a\u96c6\u5408\u7684\u8fb9\u4f5c\u4e3afather\u5408\u5e762\u4e2a\u96c6\u5408\u7136\u540e\u4e00\u8fb9\u6784\u56fe\uff0c\u8fd8\u8981\u8bb0\u5f55data,\u63a5\u4e0b\u6765\u5c31\n\n\n\u91c7\u7528LCA\u6c42\u51fa\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u662f\u7b54\u6848\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u90a3\u4e48\u5c31\u8bf4\u660e\u662f\u4e0d\u76f8\u901a\uff0c\u8f93\u51fa-1\n\n```delphi\n\nconst inf='truck.in'; outf='truck.out'; maxn=100000;\ntype\n  jss=record\n    x,y,data:longint;\n  end;\nvar\n  n,m,i,dian,bian,fx,fy,j,time,q,k,tot,x,y:longint;\n  temp,next:array[0..2*maxn]of longint;\n  list,father,pos,oula,depth,w:array[0..maxn]of longint;\n  le:array[0..maxn]of boolean;\n  edge:array[0..50001]of jss;\n  f:array[0..maxn,0..20]of longint;\nProcedure add(x,y:longint);\n begin\n   inc(tot);\n   temp[tot]:=y;\n   next[tot]:=list[x];\n   list[x]:=tot;\n end;\nprocedure qsort(l,r:longint);\n var\n   i,j,x:longint;  y:jss;\n begin\n   i:=l; j:=r; x:=edge[(2*l+r)div 3].data;\n   repeat\n     while edge[i].data>x do inc(i);\n     while edge[j].data<x do dec(j);\n     if i<=j then begin\n        y:=edge[i]; edge[i]:=edge[j]; edge[j]:=y;\n        inc(i); dec(j);\n     end;\n   until i>j;\n   if i<r then qsort(i,r);\n   if l<j then qsort(l,j);\n end;\nFunction getf(u:longint):longint;\n var\n   z:longint;\n begin\n   if father[u]=u then exit(u);\n   z:=getf(father[u]);\n   father[u]:=z;\n   exit(z);\n end;\nProcedure union(x,y,dian,data:longint);\n var\n   fx,fy:longint;\n begin\n   father[x]:=dian;\n   father[y]:=dian;\n   father[dian]:=dian;\n   w[dian]:=data;\n end;\nProcedure dfs(u,h:longint);\n var\n   k:longint;\n begin\n   le[u]:=true;\n   inc(time); oula[time]:=u; depth[time]:=h; pos[u]:=time;\n   k:=list[u];\n   while k<>0 do begin\n     if not le[temp[k]] then begin\n       dfs(temp[k],h+1);\n       inc(time); oula[time]:=u; depth[time]:=h;\n     end;\n     k:=next[k];\n   end;\n end;\nbegin\n  assign(input,inf); reset(input);\n  assign(output,outf); rewrite(output);\n    readln(n,m);\n    for i:=1 to m do readln(edge[i].x,edge[i].y,edge[i].data);\n    dian:=n;   qsort(1,m);\n    bian:=0;\n\n    for i:=1 to n do father[i]:=i;\n    i:=0;\n\n    while (bian<n-1)and(i<m) do begin   //!!i<m\n      inc(i);\n      with edge[i] do begin\n        if getf(x)<>getf(y) then begin\n          inc(dian); inc(bian);\n          fx:=getf(x); fy:=getf(y);\n          add(fx,dian); add(dian,fx);\n          add(fy,dian); add(dian,fy);\n          union(fx,fy,dian,data);\n        end;\n      end;\n    end;\n    time:=0;\n    fillchar(le,sizeof(le),false);\n\n    for i:=dian downto 1 do if not le[i] then dfs(i,0);\n    for i:=1 to time do f[i,0]:=i;\n    for j:=1 to trunc(ln(time)/ln(2)) do\n     for i:=1 to time do if i+1 shl (j-1)<=time then begin\n       f[i,j]:=f[i+1 shl (j-1),j-1];\n       if depth[f[i,j-1]]<depth[f[i,j]] then f[i,j]:=f[i,j-1];\n     end;\n    readln(q);\n    for i:=1 to q do begin\n      readln(x,y);\n      if getf(x)<>getf(y) then writeln(-1)\n      else begin\n        if pos[x]>pos[y] then begin j:=x; x:=y; y:=j; end;\n        k:=trunc(ln(pos[y]-pos[x]+1)/ln(2));\n        if depth[f[pos[x],k]]<depth[f[pos[y]-(1 shl k)+1,k]]\n         then writeln(w[oula[f[pos[x],k]]])\n         else writeln(w[oula[f[pos[y]-(1 shl k)+1,k]]]);\n      end;\n    end;\n  close(input); close(output);\nend.\n\n```",
        "postTime": 1445153090,
        "uid": 5729,
        "name": "zls6602488",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5bf9\u56fe\u4f5ckruskal\u6700\u5927\u751f\u6210\u6811,\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee(x,y),\u5f53\u52a0\u5165\u67d0\u6761\u8fb9\u65f6\u4f7f\u539f\u6765\u4e0d\u8fde\u901a\u7684\u70b9x,y\u8054\u901a\u4e86,\u90a3\u4e48\u90a3\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u7b54\u6848...\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e8b\u5148\u505a\u4e00\u904d\u6700\u5927\u751f\u6210\u6811,\u7136\u540e\u628a\u5408\u5e76\u8fc7\u7a0b\u8868\u793a\u6210\u4e00\u9897\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee(x,y)\uff0c\u7528\u500d\u589e\u6765\u6c42\u6c42x\u548cy\u7684lca\u5373\u53ef~\n\n\u590d\u6742\u5ea6O(mlogm+qlogn)\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define For(i,n) for(int i=1;i<=n;i++)\nusing namespace std;\nconst int N=20000,M=50000;\nstruct node{int x,y,z;}v[M];\nint n,m,q,u[N],f[N],p[N],d[N][20],deep[N];\nbool cmp(node x,node y){ return x.z>y.z;}\ninline int bcj(int x){if(u[x]!=x)u[x]=bcj(u[x]);return u[x];}\ninline int Lca(int x,int y){//\u500d\u589e\u6c42lca\n       int t,i=0;\n       if(deep[x]<deep[y]) t=x,x=y,y=t;\n       while(i>=0){\n           while(deep[d[x][i]]>=deep[y]) x=d[x][i++];\n           i--;\n       }\n       i=0;\n       while(f[x]!=f[y]){\n           while(d[x][i]!=d[y][i]) x=d[x][i],y=d[y][i],i++;\n           i--;\n       }\n       return f[x];\n}\nint main(){\n    \n    scanf(\"%d%d\",&n,&m); int bx,by,tot=0,w=n,k,x,y;\n    For(i,m) scanf(\"%d%d%d\",&v[i].x,&v[i].y,&v[i].z);\n    sort(v+1,v+m+1,cmp);\n    For(i,n) u[i]=i;\n    For(i,m){//\u6700\u5927\u751f\u6210\u6811\n        bx=bcj(v[i].x);\n        by=bcj(v[i].y);\n        if(bx!=by){\n            u[by]=u[bx]=f[bx]=f[by]=++w;\n            f[w]=0,p[w]=v[i].z,u[w]=w;\n            if(++tot==n-1) break;\n            //\u65b0\u5efa\u8282\u70b9\u8868\u793a\u4e00\u6b21\u5408\u5e76\n        }\n    }\n    n=w;deep[n]=0;\n    for(int i=n-1;i;i--){//\u500d\u589e\u7b97\u6cd5\u9884\u5904\u7406\n        deep[i]=deep[f[i]]+1;\n        d[i][0]=f[i];k=0;\n        while(d[d[i][k]][k])d[i][k+1]=d[d[i][k]][k],k++;\n    }\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",(bcj(x)==bcj(y))?p[Lca(x,y)]:-1);\n    }\n    return 0;\n}\n```",
        "postTime": 1385093498,
        "uid": 936,
        "name": "Leoraccder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u6700\u5927\u751f\u6210\u6811 + \u6811\u94fe\u5256\u5206\n\u8fd9\u9053\u9898\u6211\u4eec\u8981\u6c42\u6700\u5927\u9650\u91cd\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6700\u5927\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6c42\u6700\u5927\u751f\u6210\u6811\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6700\u5c0f\u8fb9\u6700\u5927\u3002\n\n\u56e0\u4e3a\u5728\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u800c\u4e14\u6211\u4eec\u6c42\u7684\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u6240\u4ee5\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u4e5f\u662f\u6240\u6709\u53ef\u8fbe\u6027\u60c5\u51b5\u4e2d\u6700\u5927\u7684\uff08\u4e25\u8c28\u8bc1\u660e\u7684\u4e0d\u592a\u4f1a\uff0c\u4f46\u662f\u611f\u89c9\u8fd9\u4e2a\u5c31\u8db3\u591f\u89e3\u9898\u4e86\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6811\u4e0a\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u559c\u6b22\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u6811\u94fe\u5256\u5206\u6765\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u8fd9\u4e2a\u9898\u7684\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u6240\u4ee5\u8981dfs\u904d\u6240\u6709\u70b9\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N = 1e4+5 , inf = 1e9;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , Q , cnt;\nint father[N] , fa[N] , top[N] , dfn[N] , id[N] , size[N] , hs[N] , a[N] , dep[N];\nbool vis[N];\nstruct edg\n{\n\tint u , v , w;\n\tfriend bool operator < (const edg &a,const edg &b) {return a.w > b.w;}\n}e[N * 5];\nint find(int x) {return father[x] == x ? father[x] : father[x] = find(father[x]);}\nstruct Edge\n{\n\tint to , dis; Edge *nxt;\n\tEdge(int to,int dis,Edge *nxt) : to(to) , dis(dis) , nxt(nxt) {}\n}*head[N];\ninline void add(int u,int v,int w) {head[u] = new Edge(v,w,head[u]);}\nvoid get_tree(int x)\n{\n\tvis[x] = 1; size[x] = 1;\n\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(dep[to]) continue;\n\t\ta[to] = i -> dis;\n\t\tdep[to] = dep[x] + 1;\n\t\tfa[to] = x;\n\t\tget_tree(to);\n\t\tsize[x] += size[to];\n\t\tif(size[to] > size[hs[x]]) hs[x] = to;\n\t}\n}\nvoid dfs(int x,int topfa)\n{\n\tdfn[x] = ++cnt;\n\tid[cnt] = x;\n\ttop[x] = topfa;\n\tif(hs[x]) dfs(hs[x],topfa);\n\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t{\n\t\tint to = i -> to;\n\t\tif(to == fa[x] || to == hs[x]) continue;\n\t\tdfs(to,to);\n\t}\n}\nstruct Tree_Div\n{\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , minn;\n\t\tnode(int l,int r) : l(l) , r(r) {ls = rs = NULL;minn = inf;}\n\t\tinline void up() {minn = min(ls -> minn,rs -> minn);}\n\t}*root;\n\tTree_Div() {root = NULL;}\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new node(l,r);\n\t\tif(l == r) return (void)(p -> minn = a[id[l]]);\n\t\tbuild(p -> ls,l,mid); build(p -> rs,mid+1,r); p -> up();\n\t}\n\tint query(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y) return p -> minn;\n\t\treturn min(x <= mid ? query(p -> ls,x,y) : inf,y > mid ? query(p -> rs,x,y) : inf);\n\t}\n\tinline int sec_min(int x,int y)\n\t{\n\t\tint res = inf;\n\t\twhile(top[x] != top[y])\n\t\t{\n\t\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\t\tres = min(res,query(root,dfn[top[x]],dfn[x]));\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y]) swap(x,y);\n\t\tif(dfn[y] < dfn[x]) res = min(res,query(root,dfn[y] + 1,dfn[x]));\n\t\treturn res;\n\t}\n\tinline void LOL()\n\t{\n\t\tQ = read(); build(root,1,n);\n\t\tfor(int i = 1 , u , v;i <= Q;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tif(find(u) != find(v)) puts(\"-1\");\n\t\t\telse printf(\"%d\\n\",sec_min(u,v));\n\t\t}\n\t}\n}CF;\nint main()\n{\n\tn = read(); m = read();\n\tfor(int i = 1;i <= n;i ++) father[i] = i;\n\tfor(int i = 1;i <= m;i ++) e[i].u = read() , e[i].v = read() , e[i].w = read();\n\tsort(e+1,e+1+m);\n\tfor(int i = 1 , x , y;i <= m;i ++)\n\t{\n\t\tx = find(e[i].u); y = find(e[i].v);\n\t\tif(x == y) continue;\n\t\tfather[x] = y; add(x,y,e[i].w); add(y,x,e[i].w);\n\t}\n\tfor(int i = 1;i <= n;i ++)\n\t{\n\t\tif(vis[i]) continue;\n\t\tdep[i] = 1; get_tree(i); dfs(i,i);\n\t}\n\tCF.LOL();\n\treturn 0;\n}\n\n```",
        "postTime": 1570885144,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "~~\u5341\u4e00\u5047\u671f\u6478\u9c7c,\u9e3d\u4e86\u4f5c\u4e1a\u56de\u6765\u5207\u4e2a\u98982333.~~\n### background\n\u672c\u9898\u4f5c\u4e3a\u74f6\u9888\u8def\u677f\u5b50\u9898,\u5e76\u4e14\u6570\u636e\u5e76\u4e0d\u5f3a,\u53ef\u4ee5\u4e8c\u5206+(\u6700\u77ed\u8def+\u526a\u679d)\u7384\u5b66\u590d\u6742\u5ea6\u7206OJ\u8fc7\u9898,\u4e5f\u53ef\u4ee5\u5e38\u89c4\u500d\u589e\u5199\u4e00\u5199$O(nlogn)$\u8fc7,\u4e5f\u53ef\u4ee5HLD+SGT/SparseTable\u5199\u4e2a$O(nlog^2n)$\u6216$O(nlogn)$.18\u5e74NOI,IOI\u90fd\u51fa\u73b0\u7684kruskal\u91cd\u6784\u6811\u4e5f\u53ef\u4ee5\u79d2.\n\n\u4f46\u662f\u5462,\u4ee5\u4e0a\u505a\u6cd5\u90fd\u6709\u4e2a\u5171\u540c\u70b9,**\u5728\u7ebf**,\u4f5c\u4e3a\u4e00\u540d\u667a\u529b,\u89c6\u529b,\u8010\u529b\u90fd\u4e0d\u8db3\u7684\u6587\u5316\u8bfe\u9009\u624b,\u80af\u5b9a\u8981\u6478\u9c7c\u5199**\u79bb\u7ebf**\u7b97\u6cd5.\n\n---\n\n\u4e0a\u9762\u662f\u80e1\u626f,\u8fd9\u91cc\u5199\u4e00\u4e2a\u79bb\u7ebf\u7684\u5206\u6cbb\u505a\u6cd5.  \n\u8fd9\u4e2a\u73a9\u6cd5\u9700\u8981\u4e00\u4e2a\u4e25\u683c\u800c\u4e0d\u5747\u644a\u7684\u5e76\u67e5\u96c6,\u5e76\u4e14\u80fd\u64a4\u9500.\u8fd9...\n- \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811!\u5f88\u597d$O(nlog^3n)$\u7684\u590d\u6742\u5ea6\u5728\u5411\u6211\u4eec\u62db\u624b\u4e86\u5462qwq,\u8fd9\u80af\u5b9aT\u7206\u4e86\u554a23333.(\u53e6\u5916\u4e0d\u80fd\u7528\u8def\u5f84\u538b\u7f29,\u56e0\u4e3a\u90a3\u4e1c\u897f\u7684\u64cd\u4f5c\u6b21\u6570\u662f\u5747\u644a\u7684,\u641e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5957\u4e0a\u540e\u65f6\u95f4\u4e0e\u7a7a\u95f4\u90fd\u4f1a\u7206\u70b8,~~\u542c\u8bf4\u662f\u80fd\u5361\u6210\u5355\u6b21sqrt~~). \n\n\u4e8e\u662f\u6211\u4eec\u641e\u4e00\u4e2a\u6309\u6811\u9ad8height\u6216\u8005\u5b50\u6811\u5927\u5c0fsize\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5e76\u67e5\u96c6,\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u503c\u4fee\u6539$O(1)$\u4e2a\u8282\u70b9\u7684\u6570\u636e,\u4e14\u6811\u9ad8\u662f$O(logn)$\u7684,\u5b83\u662f\u7b26\u5408\u8981\u6c42\u7684,\u5e76\u4e14\u975e\u5e38\u597d\u5199.  \n\n1. \u8003\u8651\u4e00\u4e2a\u66b4\u529b,\u4e8c\u5206\u7b54\u6848,\u4ec5\u8003\u8651$w\\geq mid$\u7684\u8fb9,\u6b64\u65f6\u56fe\u4f1a\u662f\u4e00\u4e9b\u8054\u901a\u5757,\u5982\u679c\u4e00\u4e2a\u8be2\u95ee$(x,y)$\u5728\u67d0\u4e2a\u5757\u5185\u90e8,\u5219\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848$Q(x,y)$\u662f\u6ee1\u8db3$Q(x,y)\\geq mid$\u7684.  \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee,\u4e8c\u5206,\u66b4\u529b\u5408\u5e76\u8054\u901a\u5757,\u5f97\u5230\u590d\u6742\u5ea6\u4e3a$O(mqlogn)$\u7684~~\u4f18\u79c0~~\u505a\u6cd5.  \n2. \u89c2\u5bdf\u8fd9\u4e00\u66b4\u529b\u7b97\u6cd5,\u5bf9\u4e8e\u67d0\u6b21\u5c1d\u8bd5\u4f7f\u7528$w\\geq x$\u7684\u8fb9\u65f6,\u8fde\u901a\u6027\u662f\u4e4b\u548c$x$\u6709\u5173\u7684,\u5e76\u4e0d\u9700\u8981\u6bcf\u4e2a\u8be2\u95ee\u90fd\u5355\u72ec\u505a,\u663e\u7136\u6700\u591a\u6709$m$\u79cd\u8054\u901a\u6027(\u5c31\u662f\u8fb9\u6743\u7684\u4e0d\u540c\u53d6\u503c),\u53ef\u4ee5\u63d0\u524d\u505a\u51fa\u6765,\u4f46\u662f\u8fd9\u6837\u5c31\u53d8\u6210\u5728\u7ebf\u7684\u4e86,\u800c\u4e14(\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u4fdd\u5b58\u4e0d\u540cmid\u7684\u8054\u901a\u6027)\u662f$log^3n$\u7684\u7206\u70b8\u65f6\u95f4\u590d\u6742\u5ea6.  \n3. \u6211\u4eec\u8003\u8651\u4ea4\u6362\u4e8c\u5206\u7b54\u6848\u548c\u679a\u4e3e\u8be2\u95ee\u7684\u987a\u5e8f,\u5373\u5148\u4e8c\u5206\u7b54\u6848,\u6c42\u51fa\u8054\u901a\u6027,\u518d\u8003\u8651\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e0emid\u7684\u5173\u7cfb.\u8fd9\u4e2a\u6280\u5de7\u88ab\u79f0\u4e3a**\u6574\u4f53\u4e8c\u5206**.\n4. \u68b3\u74063\u4e2d\u5f97\u5230\u7684\u7b97\u6cd5\u7684\u8fc7\u7a0b\u5e76\u5206\u6790\u590d\u6742\u5ea6,\u53d1\u73b0\u662f$O(nlog^2n)$\u7684\u4f18\u79c0\u590d\u6742\u5ea6,\u4e14\u5e38\u6570\u975e\u5e38\u5c0f,\u53ef\u4ee5\u968f\u4fbf\u8fc7.\n\n\n\n----\n\n\u4e8c\u5206\u4e00\u4e2a$mid$,\u8003\u8651\u52a0\u5165$w\\geq mid$\u65f6\u56fe\u7684\u8054\u901a\u6027,\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4,\u6b64\u65f6\u4e0d\u8054\u901a\u7684\u8be2\u95ee,\u5c1d\u8bd5**\u8865\u5145** $w\\lt mid$\u7684\u8fb9.\u6b64\u65f6\u80fd\u591f\u8054\u901a\u7684\u8be2\u95ee,\u5c1d\u8bd5**\u53bb\u6389**\u4e00\u4e9b$w\\geq mid$\u7684\u8fb9.  \u4e8e\u662f\u5f97\u5230\u4e86\u4e00\u4e2a\u9012\u5f52\u6c42\u89e3\u7684\u73a9\u6cd5,\u7ed9\u51fa\u8fd9\u90e8\u5206\u7684.\n\n```cpp\n// \u8003\u8651\u4e4b\u524d\u4f7f\u7528\u7684\u8fb9\u548c\u6392\u5e8f(\u5347\u5e8f)\u540e,\u6392\u540d\u5728[l,r]\u5185\u7684\u8fb9,\u9700\u8981\u6c42\u89e3\u7684\u8be2\u95ee\u662fq.\nvoid solve(int l,int r,std::vector<Q> q){\n\tif(l>r||q.size()==0) return ;\n\tstd::stack<T> stk;// \u7528\u4e8e\u8bb0\u5f55\u5408\u5e76\u64cd\u4f5c\u5e76\u64a4\u56de.\n\tint mid=(l+r)>>1; std::vector<Q> lq,rq;\n\t// \u8003\u5bdf\u52a0\u5165w>=e[mid].w\u7684\u8fb9\u540e\u7684\u8054\u901a\u6027.\n    for(int i=mid;i<=r;i++) stk.push(merge(e[i].u,e[i].v));\n   \t// \u5206\u7c7b\n\tfor(int i=0;i<q.size();i++){\n\t\tif(par(q[i].x)==par(q[i].y)){\n\t\t\trq.push_back(q[i]);\n\t\t\tans[q[i].i]=e[mid].w;\n\t\t}else lq.push_back(q[i]);\n\t}\n    \n\tsolve(l,mid-1,lq);// \u8fd9\u90e8\u5206\u662f\u4ecd\u672a\u8054\u901a\u7684,\u662f\u8981\u8865\u8fb9\u8fdb\u53bb\u7684,\u6240\u4ee5\u4e0d\u7528\u64a4\u9500\u6389.\n\twhile(!stk.empty()){ back(stk.top()); stk.pop(); }\n\tsolve(mid+1,r,rq);// \u8003\u8651\u8fd9\u90e8\u5206\u7684\u65f6\u5019e[mid]\u662f\u9650\u5236\u4f4f\u4e86\u7b54\u6848,\u4e8e\u662f\u5220\u6389\u52a0\u5165\u7684\u6240\u6709\u8fb9.\n}\n\n```\n\n\u81f3\u4e8e\u7b97\u6cd5\u6b63\u786e\u6027?\u641e\u4e00\u4e2a\u5f52\u7eb3\u5c31\u597d\u4e86...\u8fd9\u91cc\u4e0d\u8d34\u8bc1\u660e\u4e0a\u6765\u4e86.~~\u60f3\u770b\u8bc1\u660e\u8bf7\u77e5\u4e4e\u627ehehelego...\u73b0\u5728\u6bcf\u5929\u6587\u5316\u8bfe,\u4e0d\u4e0aluogu,\u5076\u5c14\u901b\u77e5\u4e4e\u53ef\u4ee5\u56de\u590d\u4e00\u4e0b.~~\n\n\u6700\u540e\u6254\u4ee3\u7801\u8dd1\u8def.\n```cpp\n#include <bits/stdc++.h>\nint in(){\n\tint x=0;char c;\n\tdo{c=getchar();}while(!isdigit(c));\n\tdo{x=x*10+c-'0';c=getchar();}while(isdigit(c));\n\treturn x;\n}\nconst int N=200000+10;\nconst int M=500000+10;\nstruct E{\n\tint u,v,w;\n\tE(int a=0,int b=0,int c=0){u=a;v=b;w=c;}\n\tbool operator<(const E&r)const{return w<r.w;}\n}e[M];\nstruct Q{\n\tint x,y,i;\n\tQ(int a,int b,int c):x(a),y(b),i(c){}\n};\nint n,m,q,fa[N],sz[N],ans[M];\nstruct T{ int x,y;T(int a,int b):x(a),y(b){} };\nint par(int x){\n\twhile(fa[x]!=x) x=fa[x];\n\treturn x;\n}\nT merge(int x,int y){\n\tx=par(x);y=par(y);\n\tif(x==y) return T(0,0);\n\tif(sz[x]>sz[y]) std::swap(x,y);\n\tfa[x]=y; sz[y]+=sz[x];\n\treturn T(x,y);\n}\nvoid back(const T&t){ fa[t.x]=t.x; sz[t.y]-=sz[t.x]; }\nvoid solve(int l,int r,std::vector<Q> q){\n\tif(l>r||q.size()==0) return ;\n\tstd::stack<T> stk;\n\tint mid=(l+r)>>1; std::vector<Q> lq,rq;\n\tfor(int i=mid;i<=r;i++) stk.push(merge(e[i].u,e[i].v));\n\tfor(int i=0;i<q.size();i++){\n\t\tif(par(q[i].x)==par(q[i].y)){\n\t\t\trq.push_back(q[i]);\n\t\t\tans[q[i].i]=e[mid].w;\n\t\t}else lq.push_back(q[i]);\n\t}\n\tsolve(l,mid-1,lq);\n\twhile(!stk.empty()){ back(stk.top()); stk.pop(); }\n\tsolve(mid+1,r,rq);\n}\nint main(){\n\tn=in();m=in(); for(int i=1;i<=n;i++) sz[fa[i]=i]=1;\n\tfor(int i=0;i<m;i++){e[i].u=in();e[i].v=in();e[i].w=in();}\n\tstd::sort(e,e+m); std::vector<Q> v;\n\tq=in();for(int i=0,a,b;i<q;i++){\n\t\ta=in();b=in(); v.push_back(Q(a,b,i));\n\t} solve(0,m-1,v);\n\tfor(int i=0;i<q;i++) printf(\"%d\\n\",ans[i]?ans[i]:-1);\n\treturn 0;\n}\n```\n",
        "postTime": 1569909590,
        "uid": 15295,
        "name": "hehelego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u9898\u76ee\uff1a[\u8d27\u8f66\u8fd0\u8f93](https://www.luogu.org/problem/P1967)\n\n\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u5e26\u6743\u56fe\uff0c\uff08\u53ef\u80fd\u6709\u91cd\u8fb9\uff09\u8981\u4f60\u627e\u5230x\u7ed3\u70b9\u5230y\u7ed3\u70b9\u8def\u5f84\u4e2d\u6700\u5c0f\u6743\u503c\u7684\u6700\u5927\u503c\uff08\u4e0d\u8fde\u901a\u8f93\u51fa-1\uff09\n\n\u5bf9\u4e8e\u6570\u636e\u8303\u56f4 0 < n < 10,000,0 < m < 50,000,0 \u663e\u7136\u8fb9\u6570\u5927\u4e8e\u70b9\u6570\uff0c\u5b58\u5728\u73af\u8def\n\n**\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u601d\u8003\uff1f**\n\n\u9996\u5148\u601d\u8003\u4e00\u4e0b\uff0c\u5982\u679c\u7ed9\u4f60\u7684\u662f\u4e00\u9897\u6811\uff0c\u90a3\u4e48\u4f60\u4f1a\u5982\u4f55\u5199\uff1f\u5f88\u663e\u7136\uff0c\u5982\u679c\u662f\u6811\u7684\u8bdd\u8def\u5f84\u5c31\u662f\u552f\u4e00\u7684\u4e86\n\n\u90a3\u4e48\u53ea\u8981\u7528\u500d\u589eLCA\u627e\u5230\u8def\u5f84\u518d\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u6700\u5c0f\u503c\u5c31\u597d\u4e86,\u65f6\u95f4\u590d\u6742\u5ea6\u4e5fOK\n\n\n\n------------\n\n\u4f46\u9898\u76ee\u4e2d\u7684\u6570\u636e\u8303\u56f4\u8bf4\u660e\u6709\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5e94\u5bf9\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u51fa\u73b0\u73af\uff0c\u90a3\u4e48\u73af\u4e0a\u7684\u4e24\u70b9\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e24\u6761\u8def\u5f84\n\n\u6211\u4eec\u6b64\u65f6\u5e94\u8be5\u9009\u7528\u90a3\u4e2a\u6700\u5c0f\u6743\u503c\u5927\u7684\u8def\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e2a\u73af\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u6211\u4eec\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u7528\u5230\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u52a0\u8fb9\u7684\u65f6\u5019\u4e0d\u53bb\u52a0\u8fd9\u6761\u8fb9\u3002\u8fd0\u7528\u8fd9\u79cd\u601d\u60f3\u6211\u4eec\u5c31\u53ef\u4ee5\u907f\u514d\u73af\u7684\u51fa\u73b0\uff0c\u5c06\u9898\u76ee\u7ed9\u7684\u56fe\u6539\u6210\u4e00\u4e2a\u68ee\u6797\n\n****\u5982\u4f55\u5b9e\u73b0\uff1f****\n\n\u4e0eKruskal\u60f3\u6cd5\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u5148\u5c06\u8fb9\u6309\u8fb9\u6743\u964d\u5e8f\u6392\u5217\u3002\u7136\u540e\u8d2a\u5fc3\u7684\u4ece\u8fb9\u6743\u6700\u5927\u7684\u5f00\u59cb\u52a0\u8fb9\n\n\u5982\u679c\u53d1\u73b0\u8fd9\u6761\u8fb9\u7684\u4e24\u7aef\u5df2\u7ecf\u8054\u901a\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u52a0\u8fd9\u6761\u8fb9(\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4)\n\n\uff08\u56e0\u4e3a\u52a0\u4e86\u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u90a3\u4e2a\u73af\u91cc\u6743\u503c\u6700\u5c0f\u7684\u4e86\uff09\n\n\u6700\u540e\u518d\u5728\u68ee\u6797\u4e2d\u8dd1LCA\u5c31\u597d\u4e86\n\nQAQ\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint R()\n{\n\tchar c;int sign=1,res=0;\n\twhile((c=getchar())>'9'||c<'0') if(c=='-') sign=-1;\n\tres+=c-'0';\n\twhile((c=getchar())>='0'&&c<='9') res=res*10+c-'0';\n\treturn res*sign;\t\n}\nconst int Maxm=5e6+5;\nconst int Maxn=1e5+5;\nint fa[Maxn];\nint found(int x){return x==fa[x]?x:fa[x]=found(fa[x]);}\nint Next[Maxn],First[Maxn],to[Maxn],cnt,we[Maxn];\nint n,m,q,deep[Maxn];\nint f[Maxn][25],M[Maxn][25]; \nstruct Line\n{\n\tint z,y,w;\n}a[Maxm];\nbool cmp(Line x,Line y)\n{\n\treturn x.w>y.w;\n}\nvoid add(int z,int y,int w)\n{\n\tNext[++cnt]=First[z];\n\tFirst[z]=cnt;\n\tto[cnt]=y;we[cnt]=w;\n}\nvoid deal(int x,int fath)\n{\n\tdeep[x]=deep[fath]+1;\n\tfor(int i=1;i<=19;i++)\n\t\tf[x][i]=f[f[x][i-1]][i-1],//\u8bb0\u5f55\u7236\u4eb2 \n\t\tM[x][i]=min(M[x][i-1],M[f[x][i-1]][i-1]);//\u8bb0\u5f55x\u5230f[x][i]\u7684\u6700\u5c0f\u6743\u503c \n\tfor(int k=First[x];k;k=Next[k])//\u5411\u4e0b\u641c \n\t{\n\t\tif(to[k]==fath) continue;\n\t\tf[to[k]][0]=x;\n\t\tM[to[k]][0]=we[k];\n\t\tdeal(to[k],x); \n\t}\n}\nint LCA(int x,int y)\n{\n\tint res=1<<30;\n    if(deep[x]<deep[y]) swap(x,y);\n    for(int i=20;i>=0;i--)\n    {\n        if(deep[f[x][i]]>=deep[y]) res=min(res,M[x][i]),x=f[x][i]; \n        if(x==y) return res;\n    } //\u8df3\u5230\u540c\u4e00\u9ad8\u5ea6 \n    for(int i=20;i>=0;i--)\n    {\n        if(f[x][i]!=f[y][i])\n        {\n            res=min(res,M[x][i]);x=f[x][i];\n            res=min(res,M[y][i]);y=f[y][i];\n        }\n    }//\u4e00\u8d77\u8df3 \n    res=min(res,M[x][0]);\n\tres=min(res,M[y][0]); \n    return res;\n}\nsigned main()\n{\n\tn=R();m=R();memset(M,63,sizeof M);\n\tfor(int i=1;i<=n;i++) fa[i]=i;//\u521d\u59cb\u5316 \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta[i].z=R();\n\t\ta[i].y=R();\n\t\ta[i].w=R();\n\t}//\u8bfb\u5165 \n\tsort(a+1,a+1+m,cmp);//\u6392\u5e8f \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint aa=found(a[i].z);\n\t\tint bb=found(a[i].y);\n\t\tif(aa!=bb)\n\t\t{\n\t\t\tadd(a[i].z,a[i].y,a[i].w);\n\t\t\tadd(a[i].y,a[i].z,a[i].w);\n\t\t\tfa[aa]=bb;\n\t\t}\n\t}//\u7c7b\u4f3cKruskal\u7684\u52a0\u8fb9 \n\tfor(int i=1;i<=n;i++) if(deep[i]==0)deal(i,0);//\u5904\u7406\u68ee\u6797 \n\tq=R();int x,y;\n\twhile(q--)\n\t{\n\t\tx=R();y=R();\n\t\tif(found(x)!=found(y)) //\u4e0d\u8fde\u901a \n\t\t{\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",LCA(x,y));//\u67e5\u8be2 \n\t}\n}\n```\n",
        "postTime": 1567871647,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "## \u4e00\u7bc7\u5351\u5fae\u7684 **\u6811\u94fe\u5256\u5206** \u9898\u89e3\n\u67d0\u65e5\u5728\u9898\u89e3\u7684\u6d77\u6d0b\u91cc\u9068\u6e38\u3002\u55ef\uff1f\u6811\u5256\u7684\u9898\u89e3\u600e\u4e48\u8fd9\u4e48\u5c11\u5462\uff1f\u90a3\u54b1\u4e0d\u5c31\u6765\u7bc7\u6811\u5256\u9898\u89e3\uff01 ~~\uff08\u6ed1\u7a3d~\u659c\u773c\u7b11\uff09~~\n\n### \u9996\u5148\uff0c\u54b1\u5206\u6790\u5206\u6790\u9898\u9762\uff1a\n\n\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u4ecex\u7ed3\u70b9\u5230y\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff1b\n\n\u6362\u53e5\u8bdd\u8bf4\uff1a\u5c31\u662f\u5728x\u5230y\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u627e\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u6bd4\u5176\u4ed6\u4efb\u4f55\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u90fd\u5927\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u8fb9\u6743\uff01\n\n\u4e5f\u8bb8\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u53ef\u662f\u591a\u7ec4\u8be2\u95ee\u5e76\u4e14\u4e24\u4e2a\u70b9\u7684\u4f4d\u7f6e\u968f\u65f6\u5728\u53d8\uff0c\u4e8c\u5206\u7b54\u6848\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u597d\u7684\u9009\u62e9\uff01\n\n### \u7136\u540e\u54b1\u5728\u634b\u634b\u601d\u8def\uff1a\n\u90a3\u4e48\u8fd9\u9898\u6709\u4ec0\u4e48\u9650\u5236\u5462\uff1f\u9996\u5148x\u548cy\u4e24\u4e2a\u7ed3\u70b9\u5fc5\u987b\u8054\u901a\uff0c\u5176\u6b21\u8fd8\u6709\u627e\u5230\u9650\u91cd\u7684\u6700\u5c0f\u503c\uff01\uff01\u6700\u5927\u751f\u6210\u6811\uff01\uff01\u6700\u5927\u751f\u6210\u6811\u53ef\u4ee5\u5f88\u597d\u7684\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\uff01\uff08\u542c\u67d0\u4f4d\u5927\u4f6c\u8bf4\uff0c\u8fd9\u4e1c\u897f\u53eb\u505a **Kruskal\u91cd\u6784\u6811** \uff09\n\n\u65e2\u7136\u8981\u7528\u5230Kruskal\uff0c\u90a3\u4e48\u663e\u7136\u4f1a\u7528\u5230\u5e76\u67e5\u96c6\u5462\uff01\n\n\u90a3\u4e48\u8fd9\u6837\u770b\u6765\uff0c\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\uff0c\u53bb\u6c42x\u5230y\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u4e86\uff01\n\n\u8fd9\u91cc\u5e94\u8be5\u6709\u591a\u79cd\u505a\u6cd5\uff0c\u6bd4\u5982 **\u500d\u589eLCA+\u4e0d\u65ad\u66f4\u65b0**\n\n\u800c\u5728\u505a\u4e86\u597d\u51e0\u5929\u6811\u5256\u6a21\u677f\u9898\u7684\u5f31\u5f31\u7684\u6211\u770b\u6765\uff0c\u8fd9\u91cc\u7528 **\u6811\u5256+\u7ebf\u6bb5\u6811** \u633a\u597d \u7684\uff01\n\n\u90a3\u4e48\u8fd9\u4e48\u6109\u5feb\u7684\u51b3\u5b9a\u4e86\uff1a\n\n**\u9996\u5148\u7528Kruskal\u6784\u5efa\u4e00\u9897\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u4ee5\u8fd9\u68f5\u6700\u5927\u751f\u6210\u6811\u4e3a\u57fa\u7840\uff0c\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u5e76\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u3002**\n\n\n------------\n\n\n### \u95ee\u9898\u6765\u4e86\n\u2460\u6811\u94fe\u5256\u5206\u5904\u7406\u7684\u662f\u70b9\u6743\uff0c\u8fd9\u9898\u662f\u8fb9\u6743\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\nAnswer\uff1a\u8fd9\u95ee\u9898\u4fbf\u662f\u7ecf\u5178\u7684\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u628a **\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u8d4b\u7ed9\u94fe\u63a5\u4e24\u70b9\u4e2d\uff0c\u6df1\u5ea6\u66f4\u6df1\u7684\u90a3\u4e2a\u70b9\u3002** \u90a3\u4e48\u4e0d\u65ad\u8fd9\u4e48\u8f6c\u6362\uff0c\u6839\u8282\u70b9\u5c82\u4e0d\u662f\u6ca1\u6709\u8d4b\u503c\u4e86\uff1f\u6ca1\u9519\u5c31\u662f\u8fd9\u6837\uff0c\u8fd9\u9898\u8ba9\u67e5\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u628a\u6839\u8282\u70b9\u53d8\u6210\u65e0\u7a77\u5927INF\uff01\n\n\u2461\u6709\u53ef\u80fdx\uff0cy\u4e4b\u95f4\u672c\u8eab\u5c31\u4e0d\u8fde\u901a\uff1f\n\nAnswer\uff1a\u663e\u7136\u8fd9\u662f\u51fa\u73b0\u4e86\u68ee\u6797\u7684\u60c5\u51b5\uff0c\u68ee\u6797\u6211\u4eec\u5bf9\u4e8e\u6bcf\u68f5\u6811\u90fd\u6811\u5256\uff0c\u4f46\u662f\u4f7fdfn\u8fde\u7eed\uff0c\u6700\u540e\u5728\u67e5\u8be2\u7684\u65f6\u5019\u5148\u53bb\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u9897\u6811\u4e2d\uff01\n\n\u2462\u5728\u67e5\u8be2\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u70b9LCA\u4f4d\u7f6e\u7684\u70b9\u7684\u6743\u503c\u600e\u4e48\u53bb\u9664\uff0c\u4e0d\u53bb\u9664\u5f88\u663e\u7136\u7b54\u6848\u53d7\u5f71\u54cd\uff01\n\nAnswer\uff1a\u8fd9\u4fbf\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\u4e86\uff0c\u5f53x\u4e0ey\u540c\u65f6\u8df3\u5230\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u5982\u679c\u8fd9\u65f6\u5019x=y\uff0c\u4fbf\u76f4\u63a5\u8fd4\u56de\uff1b**\u5426\u5219\u53bb\u7ee7\u7eed\u67e5\u8be2 dfn[x]+1\u5230dfn[y]\uff08x\u7684\u6df1\u5ea6\u5c0f\u4e8ey\u7684\u6df1\u5ea6\uff09**\uff0c\u4e3a\u4ec0\u4e48\u662fdfn[x]+1\u5462\uff1f\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u6761\u94fe\u4e0a\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\uff0c+1\u4fbf\u53ef\u4ee5\u5f88\u663e\u7136\u7684\u9664\u53bb\u4e24\u70b9\u7684LCA\u3002\n\n\u8fd9\u6837\u770b\u4e0a\u53bb\u4f3c\u4e4e\u4e0d\u51fa\u73b0\u95ee\u9898\u4e86\uff01\n\n------------\n\n### \u77e5\u8bc6\u5c0f\u50a8\u5907\uff1a\nKruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff1a[\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/problem/P3366)\n\n\u6811\u94fe\u5256\u5206\uff1a[\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206](https://www.luogu.org/problem/P3384) **\u5176\u5b9eta\u5f88\u7b80\u5355\u5c31\u662f\u4e24\u6b21dfs+\u7ebf\u6bb5\u6811**\n\n\u8fb9\u6743\u8f6c\u70b9\u6743\uff1a[P3950](https://www.luogu.org/problem/P3950)\uff0c[P3258](https://www.luogu.org/problem/P3258)\u3002\n\n------------\n### \u5c40\u90e8\u4ee3\u7801\uff1a\nKruskal\u5efa\u6700\u5927\u751f\u6210\u6811\uff1a\n```cpp\nstruct Edge\n{\n\tint from,to,val,next;\n\tbool operator < (const Edge &t) const\n\t{\n\t\treturn val>t.val;\n\t} \n}k[maxm<<1],e[maxn<<1];\nint head[maxn],cur;\ninline void add(int from,int to,int val)\n{\n\te[++cur].to=to;\n\te[cur].val=val;\n\te[cur].next=head[from];\n\thead[from]=cur;\n}\n\nint fath[maxn];\ninline int find(int x)\n{\n\tif(fath[x]!=x) fath[x]=find(fath[x]);\n\treturn fath[x];\n}\n\ninline void kruskal()\n{\n\tsort(k+1,k+m+1);\n\tfor(register int i=1;i<=n;i++) fath[i]=i;\n\tint f1,f2,u,v,w;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tf1=find(k[i].from),f2=find(k[i].to);\n\t\tif(fath[f1]==fath[f2]) continue;\n\t\tfath[f1]=fath[f2];\n\t\tu=k[i].from,v=k[i].to,w=k[i].val;\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n}\n```\n\u6811\u5256\u4e24\u8fb9dfs+\u8fb9\u6743\u8f6c\u70b9\u6743\uff1a\n```cpp\nint dep[maxn],siz[maxn],son[maxn],fa[maxn],w[maxn];\ninline void dfs1(int u,int f,int deep)\n{\n\tdep[u]=deep;\n\tfa[u]=f;\n\tsiz[u]=1;\n\tint maxson=-1;\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tw[v]=e[i].val;//\u8fb9\u6743\u8f6c\u70b9\u6743 \n\t\tdfs1(v,u,deep+1);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>maxson)\n\t\t{\n\t\t\tmaxson=siz[v];\n\t\t\tson[u]=v;\n\t\t}\n\t}\n}\n\nint dfn[maxn],cnt,top[maxn],wt[maxn];\ninline void dfs2(int u,int topf)\n{\n\tdfn[u]=++cnt;\n\ttop[u]=topf;\n\twt[cnt]=w[u];\n\tif(!son[u]) return;\n\tdfs2(son[u],topf);\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\n```\n\u5e38\u89c4\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff1a\n```cpp\nint a[maxn<<2];\ninline void build(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ta[rt]=wt[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\ta[rt]=min(a[rt<<1],a[rt<<1|1]);\n}\n\ninline int query(int rt,int l,int r,int L,int R)\n{\n\tif(L<=l&&r<=R) return a[rt];\n\tint mid=l+r>>1;\n\tif(L<=mid)\n\t{\n\t\tif(R>mid) return min(query(rt<<1,l,mid,L,R),query(rt<<1|1,mid+1,r,L,R));\n\t\telse return query(rt<<1,l,mid,L,R);\n\t}\n\telse return query(rt<<1|1,mid+1,r,L,R);\n}\n```\n\u67e5\u8be2\u64cd\u4f5c\uff1a\n```cpp\ninline int ask(int x,int y)\n{\n\tif(find(x)!=find(y)) return -1;\n\tint ans=INF;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=min(ans,query(1,1,n,dfn[top[x]],dfn[x]));\n\t\tx=fa[top[x]]; \n\t}\n\tif(x==y) return ans;\n\tif(dep[x]>dep[y]) swap(x,y);\n\tans=min(ans,query(1,1,n,dfn[x]+1,dfn[y]));\n\treturn ans;\n}\n```\n### AC\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define maxn 10005\n#define maxm 50005\n#define INF 0x7fffffff\nint n,m,q; \n\nstruct Edge\n{\n\tint from,to,val,next;\n\tbool operator < (const Edge &t) const\n\t{\n\t\treturn val>t.val;\n\t} \n}k[maxm<<1],e[maxn<<1];\nint head[maxn],cur;\ninline void add(int from,int to,int val)\n{\n\te[++cur].to=to;\n\te[cur].val=val;\n\te[cur].next=head[from];\n\thead[from]=cur;\n}\n\nint fath[maxn];\ninline int find(int x)\n{\n\tif(fath[x]!=x) fath[x]=find(fath[x]);\n\treturn fath[x];\n}\n\ninline void kruskal()\n{\n\tsort(k+1,k+m+1);\n\tfor(register int i=1;i<=n;i++) fath[i]=i;\n\tint f1,f2,u,v,w;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tf1=find(k[i].from),f2=find(k[i].to);\n\t\tif(fath[f1]==fath[f2]) continue;\n\t\tfath[f1]=fath[f2];\n\t\tu=k[i].from,v=k[i].to,w=k[i].val;\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n}\n\nint dep[maxn],siz[maxn],son[maxn],fa[maxn],w[maxn];\ninline void dfs1(int u,int f,int deep)\n{\n\tdep[u]=deep;\n\tfa[u]=f;\n\tsiz[u]=1;\n\tint maxson=-1;\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tw[v]=e[i].val;//\u8fb9\u6743\u8f6c\u70b9\u6743 \n\t\tdfs1(v,u,deep+1);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>maxson)\n\t\t{\n\t\t\tmaxson=siz[v];\n\t\t\tson[u]=v;\n\t\t}\n\t}\n}\n\nint dfn[maxn],cnt,top[maxn],wt[maxn];\ninline void dfs2(int u,int topf)\n{\n\tdfn[u]=++cnt;\n\ttop[u]=topf;\n\twt[cnt]=w[u];\n\tif(!son[u]) return;\n\tdfs2(son[u],topf);\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint a[maxn<<2];\ninline void build(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ta[rt]=wt[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\ta[rt]=min(a[rt<<1],a[rt<<1|1]);\n}\n\ninline int query(int rt,int l,int r,int L,int R)\n{\n\tif(L<=l&&r<=R) return a[rt];\n\tint mid=l+r>>1;\n\tif(L<=mid)\n\t{\n\t\tif(R>mid) return min(query(rt<<1,l,mid,L,R),query(rt<<1|1,mid+1,r,L,R));\n\t\telse return query(rt<<1,l,mid,L,R);\n\t}\n\telse return query(rt<<1|1,mid+1,r,L,R);\n}\n\ninline int ask(int x,int y)\n{\n\tif(find(x)!=find(y)) return -1;\n\tint ans=INF;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=min(ans,query(1,1,n,dfn[top[x]],dfn[x]));\n\t\tx=fa[top[x]]; \n\t}\n\tif(x==y) return ans;\n\tif(dep[x]>dep[y]) swap(x,y);\n\tans=min(ans,query(1,1,n,dfn[x]+1,dfn[y]));\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++) scanf(\"%d%d%d\",&k[i].from,&k[i].to,&k[i].val);\n\tkruskal();\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tif(fath[i]!=i) continue;\n\t\tw[i]=INF;\n\t\tdfs1(i,0,1);\n\t\tdfs2(i,i);\n\t}\n\tbuild(1,1,n);\n\tscanf(\"%d\",&q);\n\tfor(register int i=1;i<=q;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tprintf(\"%d\\n\",ask(x,y));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565495247,
        "uid": 124517,
        "name": "Notshgiook",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u9898\u505a\u6cd5\u8fd8\u662f\u633a\u591a\u7684\u2026\u2026\n\n> \u505a\u6cd51: \u542f\u53d1\u5f0f\u5408\u5e76(\u6309\u8be2\u95ee\u7684size\u5408\u5e76)\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u6309\u7167\u8fb9\u6743\u503c\u8fdb\u884c\u6392\u5e8f,\u63a5\u4e0b\u6765\u518d\u4ece\u5927\u5230\u5c0f\u5efa\u6811(\u6700\u5927\u751f\u6210\u6811)\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee,\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5c06\u5b83\u4eec\u4e24\u4e2a\u5206\u522b\u6240\u5728\u7684\u96c6\u5408\u8fde\u8d77\u6765\u7684\u8fb9\u7684\u8fb9\u6743,\u76f4\u63a5\u8bb0\u4e3a\u7b54\u6848\u5373\u53ef(\u56e0\u4e3a\u662f\u4ece\u5927\u5230\u5c0f\u52a0\u7684,\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528)\n\n\u7279\u522b\u7684,\u5982\u679c\u4e24\u4e2a\u70b9\u6ca1\u7528\u8054\u901a,\u76f4\u63a5\u8f93\u51fa$-1$,\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7b54\u6848\u521d\u59cb\u5316\u4e3a$-1$\n\n#### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ms(x,a) memset(x,a,sizeof x)\n#define debug(x) cout<<#x<<\" = \"<<x<<endl\ntypedef long long ll;\nusing namespace std;\ntemplate <class T> inline T rd(){\n\tstatic T x;static char ch;static bool neg;\n\tfor(neg=0,ch=0; ch>'9'||ch<'0'; neg|=(ch=='-'),ch=getchar());\n\tfor(x=0; ch>='0'&&ch<='9'; (x*=10)+=(ch-'0'),ch=getchar());\n\treturn neg?-x:x;\n}\n//bool S1;\nconst int M=50000+5,N=10000+5,Q=30000+5;\nint n,m,q;\nstruct node{\n\tint u,v,w;\n}A[M];\ninline bool cmp(node x, node y){\n\treturn x.w>y.w;\n}\nstruct ask{\n\tint x,id;\n};\nvector<ask>vec[N];\nint ans[Q],f[N];\n//bool S2;\n\nint find(int x){\n\treturn x==f[x]?x:f[x]=find(f[x]);\n}\n\nint main(){\n//\tprintf(\"%.2lf\\n\",(&S2-&S1)/1024.0/1024);\n//\tfreopen(\"truck2.in\",\"r\",stdin);\n//\tfreopen(\"truck.out\",\"w\",stdout);\n\tn=rd<int>(),m=rd<int>();\n\trep(i,1,n) f[i]=i;\n\trep(i,1,m){\n\t\tA[i]=(node)<%rd<int>(),rd<int>(),rd<int>()%>;\n\t}\n\tq=rd<int>();\n\trep(i,1,q){\n\t\tans[i]=-1;\n\t\tint u=rd<int>(),v=rd<int>();\n\t\tvec[u].push_back((ask)<%v,i%>);\n\t\tvec[v].push_back((ask)<%u,i%>);\n\t}\n\tsort(A+1,A+m+1,cmp);\n\trep(i,1,m){\n\t\tnode now=A[i];\n\t\tint fx=find(now.u),fy=find(now.v);\n\t\tif(fx==fy) continue;\n\t\tif(vec[fx].size()>vec[fy].size()) swap(fx,fy);\n\t\tf[fx]=fy;\n\t\trepp(j,0,vec[fx].size()){\n\t\t\tint x=vec[fx][j].x,id=vec[fx][j].id;\n\t\t\tif(find(x)==fy)\n\t\t\t\tans[id]=max(ans[id],now.w);\n\t\t\telse\n\t\t\t\tvec[fy].push_back(vec[fx][j]);\n\t\t}\n\t}\n\trep(i,1,q) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n> \u505a\u6cd52: \u542f\u53d1\u5f0f\u5408\u5e76(\u6309\u79e9\u5408\u5e76)\n\n\u5176\u5b9e\u8ddf\u7b2c\u4e00\u79cd\u5dee\u4e0d\u591a,\u5c31\u662f\u628a\u8be2\u95ee\u7684size\u6539\u6210\u6309\u79e9\u5408\u5e76\u7684\u65b9\u6cd5\u8fdb\u884c\u5e76\u67e5\u96c6\u5408\u5e76\u3002\n\n\n#### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ll long long\n#define debug(x) cerr<<#x<<\" = \"<<x<<endl\n#define lowbit(x) (x&-x)\n#define ms(x,a) memset(x,a,sizeof x)\nusing namespace std;\ntemplate <class T> inline bool Max(T &x, T y){\n\treturn x<y?x=y,1:0;\n}\ntemplate <class T> inline bool Min(T &x, T y){\n\treturn x>y?x=y,1:0;\n}\ntemplate <class T> inline T rd() {\n\tstatic char ch;static bool neg;\n\tstatic T x=0;\n\tfor(ch=neg=0;ch<'0' || '9'<ch;neg|=ch=='-',ch=getchar());\n\tfor(x=0;'0'<=ch && ch<='9';(x*=10)+=ch-'0',ch=getchar());\n\treturn x=(neg?-x:x);\n}\nconst int mod=1e9+7,oo=1e9,M=50000+5,N=10000+5,Q=30000+5;\nstruct edge{\n\tint u,v,w;\n\tbool operator < (const edge &_) const {\n\t\treturn w>_.w;\n\t}\n}Edge[M];\n\nint n,m,q;\n\nstruct Ask{\n\tint x,id;\n};\nvector<Ask>ask[N];\n\nint f[N],dep[N];\nint ans[Q];\n\nint find(int x) { return f[x]==x?x:find(f[x]); }\n\nvoid union_(edge now){\n\tint x=now.u,y=now.v,z=now.w;\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy) return;\n\tif(dep[fx]>dep[fy]) swap(fx,fy);\n\tf[fx]=fy; Max(dep[fy],dep[fx]+1);\n\trepp(i,0,ask[fx].size()){\n\t\tAsk Now=ask[fx][i];\n\t\tif(find(Now.x)==fy && ans[Now.id]==-1) ans[Now.id]=z;\n\t\telse if(ans[Now.id]==-1) ask[fy].push_back(Now);\n\t}\n}\n\nint main(){\n\tfreopen(\"truck2.in\",\"r\",stdin);\n\tfreopen(\"truck.out\",\"w\",stdout);\n\tn=rd<int>();\n\trep(i,1,m=rd<int>()){\n\t\tEdge[i]=(edge)<%rd<int>(),rd<int>(),rd<int>()%>;\n\t}\n\tsort(Edge+1,Edge+m+1);\n\trep(i,1,q=rd<int>()){\n\t\tint u=rd<int>(),v=rd<int>();\n\t\task[u].push_back((Ask)<%v,i%>); ask[v].push_back((Ask)<%u,i%>); ans[i]=-1;\n\t}\n\trep(i,1,n) f[i]=i;\n\trep(i,1,m){\n\t\tunion_(Edge[i]);\n\t}\n\trep(i,1,q) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n> \u505a\u6cd53: \u6574\u4f53\u4e8c\u5206+\u5e76\u67e5\u96c6\n\n\u5176\u5b9e,\u57fa\u4e8e\u4e0a\u9762\u7684\u601d\u60f3,\u6211\u4eec\u5c31\u53ef\u4ee5\u53d1\u73b0,\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u63a5\u7740\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee,\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e8c\u5206(\u6574\u4f53\u7684)\u3002\n\n\u5148\u5bf9\u4e8e\u4ed6\u4e4b\u524d\u5df2\u7ecf\u6c42\u51fa\u7684$mid$\u8fdb\u884c\u6392\u5e8f(\u56e0\u4e3a\u6211\u4eec\u7684\u8fb9\u6743\u662f\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684),\u63a5\u7740\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f,\u8fdb\u884c\u6574\u4f53\u4e8c\u5206,\u5373\u63a5\u4e0b\u6765\u628a$\\le mid$\u7684\u8fb9\u6743\u4f9d\u6b21\u52a0\u5165,\u6700\u7ec8\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f,\u6bcf\u6b21\u4e8c\u5206\u4e4b\u524d**\u8981\u628a\u5e76\u67e5\u96c6\u6e05\u7a7a**\u3002\n\n#### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ll long long\n#define debug(x) cerr<<#x<<\" = \"<<x<<endl\n#define lowbit(x) (x&-x)\n#define ms(x,a) memset(x,a,sizeof x)\nusing namespace std;\ntemplate <class T> inline bool Max(T &x, T y){\n\treturn x<y?x=y,1:0;\n}\ntemplate <class T> inline bool Min(T &x, T y){\n\treturn x>y?x=y,1:0;\n}\ntemplate <class T> inline T rd() {\n\tstatic char ch;static bool neg;\n\tstatic T x=0;\n\tfor(ch=neg=0;ch<'0' || '9'<ch;neg|=ch=='-',ch=getchar());\n\tfor(x=0;'0'<=ch && ch<='9';(x*=10)+=ch-'0',ch=getchar());\n\treturn x=(neg?-x:x);\n}\nconst int mod=1e9+7,oo=1e9,M=50000+5,N=10000+5,Q=30000+5;\n\nint n,m,q;\n\nstruct edge{\n\tint u,v,w;\n\tbool operator < (const edge &_) const {\n\t\treturn w<_.w;\n\t}\n}A[M];\n\nstruct ask{\n\tint x,y,l,r,mid,id;\n\tbool operator < (const ask &_) const {\n\t\treturn mid>_.mid;\n\t}\n}Ask[Q];\n\nint f[N];\n\nint find(int x){\n\treturn x==f[x]?x:f[x]=find(f[x]);\n}\n\n\nvoid clear(){\n\trep(i,1,n) f[i]=i; return;\n}\n\nint ans[Q];\n\nint main(){\n//\tfreopen(\"truck2.in\",\"r\",stdin);\n//\tfreopen(\"truck.out\",\"w\",stdout);\n\tn=rd<int>(),m=rd<int>(); int mx=0;\n\trep(i,1,m){\n\t\tA[i]=(edge)<%rd<int>(),rd<int>(),rd<int>()%>;\n\t\tMax(mx,A[i].w);\n\t}\n\tsort(A+1,A+m+1);\n\tq=rd<int>();\n\trep(i,1,q){\n\t\tAsk[i]=(ask)<%rd<int>(),rd<int>(),1,mx,(mx+1)>>1,i%>;\n\t\tans[i]=-1;\n\t}\n\trep(i,1,17){\n\t\tclear();\n\t\tsort(Ask+1,Ask+q+1);\n\t\tint now=m;\n\t\trep(j,1,q){\n\t\t\tif(Ask[j].r<Ask[j].l) continue;\n\t\t\twhile(A[now].w>=Ask[j].mid && now>0){\n\t\t\t\tint fx=find(A[now].u),fy=find(A[now].v);\n\t\t\t\tnow--;\n\t\t\t\tif(fx==fy) continue;\n\t\t\t\tf[fx]=fy;\n\t\t\t}\n\t\t\tif(find(Ask[j].x)==find(Ask[j].y)) ans[Ask[j].id]=Ask[j].mid,Ask[j].l=Ask[j].mid+1;\n\t\t\telse Ask[j].r=Ask[j].mid-1;\n\t\t\tAsk[j].mid=(Ask[j].l+Ask[j].r)>>1;\n\t\t}\n\t}\n\trep(i,1,q) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n> \u505a\u6cd54: \u5efa\u6811\u500d\u589e+LCA\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u8fd8kou\u4ee5\u6811\u4e0a\u500d\u589e=_=|||\n\n\u9996\u5148,\u6211\u4eec\u5148\u6309\u7167\u4e4b\u524d\u4e24\u79cd\u505a\u6cd5\u7684\u5efa\u6811\u65b9\u6cd5,\u8fdb\u884c\u751f\u6210\u6700\u5927\u751f\u6210\u6811\n\n\u63a5\u4e0b\u6765,\u6211\u4eec\u8981\u5728\u751f\u6210\u6700\u5927\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u4e2d\u52a0\u8fb9\n\n\u5bf9\u4e8e\u4e4b\u524d\u751f\u6210\u7684\u591a\u9897\u6811,\u6211\u4eec\u8fdb\u884c\u904d\u5386,\u6811\u4e0a\u500d\u589e\u51fa\u5411\u4e0a$2^i$\u6b65\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4ee5\u53ca**\u8fc7\u7a0b\u4e2d\u7ecf\u8fc7\u7684\u6700\u5c0f\u7684\u8fb9**\u3002\n\n\u6700\u540e\u6bcf\u6b21\u8be2\u95ee\u8dd1LCA\u5c31\u597d\u4e86\u3002\n\n#### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ll long long\n#define debug(x) cerr<<#x<<\" = \"<<x<<endl\n#define lowbit(x) (x&-x)\n#define ms(x,a) memset(x,a,sizeof x)\nusing namespace std;\ntemplate <class T> inline bool Max(T &x, T y){\n\treturn x<y?x=y,1:0;\n}\ntemplate <class T> inline bool Min(T &x, T y){\n\treturn x>y?x=y,1:0;\n}\ntemplate <class T> inline T rd() {\n\tstatic char ch;static bool neg;\n\tstatic T x=0;\n\tfor(ch=neg=0;ch<'0' || '9'<ch;neg|=ch=='-',ch=getchar());\n\tfor(x=0;'0'<=ch && ch<='9';(x*=10)+=ch-'0',ch=getchar());\n\treturn x=(neg?-x:x);\n}\nconst int mod=1e9+7,oo=1e9,M=50000+5,N=10000+5,Q=30000+5;\n\nstruct edge{\n\tint to,val,nxt;\n}Edge[M<<1];\nint head[N],tcnt;\nvoid AddEdge(int u, int v, int w){\n\tEdge[++tcnt]=(edge)<%v,w,head[u]%>;\n\thead[u]=tcnt; return;\n}\n\nstruct node{\n\tint u,v,w;\n\tvoid read(){\n\t\tu=rd<int>(),v=rd<int>(),w=rd<int>();\n\t}\n\tbool operator < (const node &_) const {\n\t\treturn w>_.w;\n\t}\n}A[M];\n\nint n,m,q;\nint mark[N];\nint dis[N][20],f[N][20],dep[N];\n\nvoid dfs(int x, int fa, int id){\n\trep(i,1,17) dis[x][i]=min(dis[x][i-1],dis[f[x][i-1]][i-1]),f[x][i]=f[f[x][i-1]][i-1];\n\tErep(i,x){\n\t\tedge y=Edge[i];\n\t\tif(y.to==fa) continue;\n\t\tdep[y.to]=dep[x]+1; mark[y.to]=id;\n\t\tdis[y.to][0]=y.val; f[y.to][0]=x;\n\t\tdfs(y.to,x,id);\n\t}\n\treturn;\n}\n\npair<int,int> Up(int x, int step){\n\tint res=oo;\n\trep(i,0,17) if(step&(1<<i)) Min(res,dis[x][i]),x=f[x][i];\n\treturn make_pair(x,res);\n}\n\nint LCA(int x, int y){\n\tif(mark[x]!=mark[y]) return -1;\n\tif(dep[x]<dep[y]) swap(x,y);\n\tpair<int,int> pre=Up(x,dep[x]-dep[y]);\n\tx=pre.first; int res=pre.second;\n\tif(x==y) return res;\n\tdrep(i,17,0){\n\t\tif(f[x][i]!=f[y][i]){\n\t\t\tMin(res,min(dis[x][i],dis[y][i]));\n\t\t\tx=f[x][i]; y=f[y][i];\n\t\t}\n\t}\n\treturn min(res,min(dis[x][0],dis[y][0]));\n}\n\nint F[N];\n\nint find(int x){\n\treturn x==F[x]?x:F[x]=find(F[x]);\n}\n\nint main(){\n\tms(head,-1);\n\tn=rd<int>(),m=rd<int>();\n\trep(i,1,m){\n\t\tA[i].read();\n\t}\n\trep(i,1,n) F[i]=i;\n\tsort(A+1,A+m+1);\n\trep(i,1,m){\n\t\tnode now=A[i];\n\t\tint fx=find(now.u),fy=find(now.v);\n\t\tif(fx==fy) continue;\n\t\tF[fx]=fy;\n\t\tAddEdge(now.v,now.u,now.w); AddEdge(now.u,now.v,now.w);\n\t}\n\tint cnt=0;\n\trep(i,1,n){\n\t\tif(!mark[i]) mark[i]=++cnt, dfs(i,0,cnt);\n\t}\n\tint q=rd<int>();\n\trep(i,1,q){\n\t\tprintf(\"%d\\n\",LCA(rd<int>(),rd<int>()));\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1565494982,
        "uid": 81715,
        "name": "ppp204",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "-NOIp2013 Day1T3 \u8d27\u8f66\u8fd0\u8f93\n========================================\n\u6b22\u8fce\u6765\u5230\u672c\u849f\u84bb\u7684\u9898\u89e3\n\n\u9898\u76ee\n--\n\n> **\u8d27\u8f66\u8fd0\u8f93**  \n> **\u9898\u76ee\u63cf\u8ff0 Description**  \n>  A \u56fd\u6709 n \u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece 1 \u5230 n\uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 m \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002\u73b0\u5728\u6709 q\n> \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c\u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002  \n> **\u8f93\u5165\u63cf\u8ff0 Input Description**   \n> \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 n\uff0cm\uff0c\u8868\u793a A \u56fd\u6709 n \u5ea7\u57ce\u5e02\u548c m \u6761\u9053\u8def\u3002   \n> \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c 3 \u4e2a\u6574\u6570 x\u3001y\u3001z\uff0c\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4ece x \u53f7\u57ce\u5e02\u5230 y \u53f7\u57ce\u5e02\u6709\u4e00\u6761\u9650\u91cd\u4e3a z \u7684\u9053\u8def\u3002\u6ce8\u610f\uff1ax\u4e0d\u7b49\u4e8e y\uff0c\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def\u3002   \n> \u63a5\u4e0b\u6765\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u6709 q \u8f86\u8d27\u8f66\u9700\u8981\u8fd0\u8d27\u3002   \n> \u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\u3001y\uff0c\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4e00\u8f86\u8d27\u8f66\u9700\u8981\u4ece x \u57ce\u5e02\u8fd0\u8f93\u8d27\u7269\u5230 y \u57ce\u5e02\uff0c\u6ce8\u610f\uff1ax \u4e0d\u7b49\u4e8e y\u3002  \n> **\u8f93\u51fa\u63cf\u8ff0 Output Description**   \n> \u8f93\u51fa\u5171\u6709 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u4e8e\u6bcf\u4e00\u8f86\u8d27\u8f66\uff0c\u5b83\u7684\u6700\u5927\u8f7d\u91cd\u662f\u591a\u5c11\u3002\u5982\u679c\u8d27\u8f66\u4e0d\u80fd\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u8f93\u51fa-1\u3002  \n> **\u6837\u4f8b\u8f93\u5165 Sample Input**   \n> 4 3  \n> 1 2 4  \n> 2 3 3  \n> 3 1 1  \n> 3 \n> 1 3  \n> 1 4 \n>  1 3  \n> **\u6837\u4f8b\u8f93\u51fa Sample Output**  \n>  3\n> -1 \n> 3  \n> **\u6570\u636e\u8303\u56f4\u53ca\u63d0\u793a Data Size & Hint**   \n> \u5bf9\u4e8e 30%\u7684\u6570\u636e\uff0c0 < n < 1,000\uff0c0 < m < 10,000\uff0c0 < q < 1,000\uff1b    \n> \u5bf9\u4e8e 60%\u7684\u6570\u636e\uff0c0 < n < 1,000\uff0c0 < m < 50,000\uff0c0 < q < 1,000\uff1b   \n> \u5bf9\u4e8e 100%\u7684\u6570\u636e\uff0c0 < n < 10,000\uff0c0 < m < 50,000\uff0c0 < q < 30,000\uff0c0 \u2264 z \u2264 100,000\u3002\n\n-------------------\n\u4e3b\u8981\u601d\u8def\uff08\u5927\u81f4\u65b9\u5411\uff09\n----\n\n> \u8fd9\u4e00\u9898\u662fNoip2013Day1\u7684\u538b\u8f74\u9898\uff0c\u5fc5\u5b9a\u6709\u5b83\u7684\u96be\u5ea6(\u63d0\u9ad8+/\u7701\u9009-)  \n> \u8fd9\u662f\u4e00\u9053\u5927\u7b97\u6cd5\u9898\uff08\u5e76\u67e5\u96c6\uff0ckruskal\u6700\u5927\u751f\u6210\u6811\uff0c\u500d\u589e\uff0clca\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6df1\u641c\uff09 \u9a97\u5c0f\u90e8\u5206\u5206\u7684\u66b4\u529b\u7b97\u6cd5\u5c31\u4e0d\u8bf4\u4e86\uff0c\u4e0b\u9762\u6765\u8c08\u4e00\u8c08\u6b63\u89e3  \n> \u505a\u8fd9\u9053\u9898\u7684\u6b65\u9aa4:  \n> Step(1)\uff1aKruskal\u751f\u6210\u6700\u5927\u751f\u6210\u6811   \n> Step(2)\uff1alca\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148   \n> Step(3)\uff1a\u5728\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684n\u6761\u8def\u5f84\u91cc\u9762\u627e\u6700\u5c0f\uff0c\u5373\u6b63\u786e\u7b54\u6848\n \n-------------------\n\n\u672c\u9898\u7b97\u6cd5\n----\n\u7531\u4e8e\u672c\u9898\u7b97\u6cd5\u8f83\u591a\uff0c\u5728\u8fd9\u91cc\u7ed9\u5927\u5bb6\u628a\u76f8\u5173\u7684\u94fe\u63a5\u5949\u4e0a\n> [\u6570\u636e\u7ed3\u6784--\u5e76\u67e5\u96c6\u7684\u539f\u7406\u53ca\u5b9e\u73b0](https://www.cnblogs.com/hapjin/p/5478352.html)\n> \n> [\u6700\u5c0f\u751f\u6210\u6811\u4e4bKruskal\u7b97\u6cd5](https://blog.csdn.net/luomingjun12315/article/details/47700237)\n> \n> [\u767d\u8bdd\u7cfb\u5217   \u500d\u589e\u7b97\u6cd5](https://blog.csdn.net/jarjingx/article/details/8180560)\n> \n> [LCA \u6700\u8fd1\u516c\u5171\u7956\u5148](https://www.cnblogs.com/ECJTUACM-873284962/p/6613379.html)\n> \n>[\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u5b9e\u73b0](https://blog.csdn.net/lisonglisonglisong/article/details/36896191)\n\n-------------------\n\u4e3a\u4ec0\u4e48\u8981\u7528KrusKal\u6c42\u6700\u5927\u751f\u6210\u6811\n----------------\n \u5982\u56fe\uff0c\u70b91\u81f3\u70b92\u53ef\u80fd\u5b58\u5728\u6709\u591a\u6761\u8def\u5f84\uff0c\u6211\u4eec\u4e3a\u4e86\u8981\u627e\u5230\u6700\u5927\u7684\u9650\u91cd\uff0c\u5c31\u4e00\u5b9a\u4f1a\u9009\u62e9\u9650\u91cd\u6700\u5927\u7684\u90a3\u4e00\u6761\u8fb9\uff0c\u800c\u4e0d\u4f1a\u53bb\u9009\u62e9\u53e6\u5916\u9650\u91cd\u6781\u5c0f\u7684\u8fb9  \n \u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9Kruskal\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u6539\u5199\u6392\u5e8f\u89c4\u5219\u4f7f\u5176\u6210\u4e3a\u6700\u5927\u751f\u6210\u6811\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u53ea\u4fdd\u7559\u4e00\u6761\u6700\u5927\u9650\u91cd\u8fb9  \n \u5904\u7406\u8fc7\u540e\u539f\u672cm\u6761\u8fb9\u5c31\u964d\u5230\u4e86n-1\u6761\u8fb9\uff0c\u5bf9\u7a7a\u95f4\u548c\u65f6\u95f4\u90fd\u6709\u4f18\u5316  \n![t1](https://img-blog.csdn.net/20180802143758298?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5aXhpbl9vaWVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n-------------------\n\n\u4e3a\u4ec0\u4e48\u8981\u7528LCA\u6c42\u51fa\u6700\u8fd1\u516c\u5171\u7956\u5148\n----------------\n\u5f53\u524d\u6240\u6709\u7684\u9053\u8def\u90fd\u5df2\u7ecf\u6784\u6210\u4e86\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u8981\u627e\u5230\u70b9X\u548c\u70b9Y\u7684\u4e00\u6761\u8fde\u901a\u8def\u5f84\uff0c\u5c31\u5fc5\u987b\u627e\u5230\u4ed6\u4eec\u7684\u516c\u5171\u7956\u5148\uff0c\u4fbf\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8def\u5f84\u51fa\u6765  \n\u5982\u56fe\uff0c\u70b9X\u548c\u70b9Y\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b91\uff0c\u8fd9\u5c31\u627e\u5230\u4e86\u4ed6\u4eec\u4e4b\u95f4\u7684\u4e00\u6761\u8fde\u901a\u8def\u5f84  \n![t2](https://img-blog.csdn.net/2018080214322070?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5aXhpbl9vaWVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)![t3](https://img-blog.csdn.net/20180802145831531?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5aXhpbl9vaWVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)      \n\u770b\u5230\u8fd9\u91cc\u53ef\u80fd\u6709\u5c0f\u4f19\u4f34\u60f3\u95ee   \n\u4e3a\u4ec0\u4e48\u53ea\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u800c\u4e0d\u7ee7\u7eed**\u5411\u4e0a\u6c42**\u5462?  \n \u4e07\u4e00\u4e0a\u9762\u8fd8\u6709\u66f4\u5927\u7684\u9650\u91cd\u5462\uff1f  \n\u56e0\u4e3a\u5f80\u4e0a\u6c42\u4e5f\u662f\u5f92\u52b3\uff0c\u627e\u5230\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u8def\u5c31\u5fc5\u987b\u8981\u7ecf\u8fc7   \n\u770b\u5230\u8fd9\u4e00\u5e45\u56fe\uff0c\u5982\u679c\u6309\u7167\u5c0f\u4f19\u4f34\u4eec\u60f3\u7684\u7ee7\u7eed\u5411\u4e0a\u627e\uff0c\u53d1\u73b0\u8282\u70b90\u548c\u8282\u70b91\u7684\u9650\u91cd\u662f\u65e0\u7a77\u5927\uff0c\u4f46\u662f\u4e0b\u9762\u6700\u5927\u751f\u6210\u6811\u7684\u9650\u91cd\u90fd\u5f88\u5c0f\uff0c\u6240\u4ee5\u5373\u4f7f\u4e0a\u9762\u7684\u9650\u91cd\u5f88\u5927\uff0c\u4f46\u4ecd\u65e0\u6cd5\u6539\u53d8\u6700\u5927\u751f\u6210\u6811\u91cc\u7684\u9650\u91cd\u5f88\u5c0f\uff0c\u66f4\u65e0\u6cd5\u6539\u53d8\u4f60\u8981\u7ecf\u8fc7\u90a3\u4e9b\u9650\u91cd\u5f88\u5c0f\u8def\u6bb5\u7684\u4e8b\u5b9e  \n![t4](https://img-blog.csdn.net/20180802150533734?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5aXhpbl9vaWVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)  \n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u6700\u5927\u751f\u6210\u6811\u6c42\u51fa\u6765\u5c31\u597d\u4e86\uff0c\u4e0d\u9700\u8981\u518d\u5f80\u4e0a\u627e\n\n-------------------\n\n\u7a0b\u5e8f\n--\n```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#define Maxn 50000+10\n#define m1 10000+10\nusing namespace std;\n\nint n,m,que; //\u9898\u76ee\u7ed9\u7684\u6570\u636e\nint num_edge,head[m1]; \nstruct Edge{int next,to,dis;}edge[Maxn];\n//\u4e0a\u9762\u4e24\u884c\u5b58\u50a8\u90bb\u63a5\u8868\nstruct kru{int x,y,z;}ks[Maxn]; //\u7528\u6765\u5904\u7406Kruskal\nint set[Maxn],flag[m1],deep[m1]; \n//\u697c\u4e0a\u4e00\u5806\u6807\u8bb0\nint weight[m1][100],f[m1][100];\n// f[i][j] i\u8d70\u4e862^j\u5230\u8fbe\u7684\u70b9\uff0c\u7528\u4e8e\u500d\u589e\n// weight[i][j] \u70b9i\u5230\u70b92^j\u4e2d\u8bb8\u591a\u6bb5\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\n\ntemplate<class T>void read(T &x){//\u8bfb\u5165\u4f18\u5316\uff0c\u4e0d\u89e3\u91ca\u4e86\n    x=0;int f=0;char ch=getchar();\n    while(ch<'0'||ch>'9')  {f|=(ch=='-');ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n    x=f?-x:x;\n    return;\n}\n\nvoid add_edge(int from,int to,int dis){//\u90bb\u63a5\u8868\uff0c\u4e0d\u89e3\u91ca\u4e86\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\tedge[num_edge].dis=dis;\n\thead[from]=num_edge;\n}\n\nint find(int a){ //\u67e5\u627e\u7956\u5148\n\tif(set[a] != a) set[a]=find(set[a]);\n\treturn set[a];\n}\n//\u5e76\u67e5\u96c6\u5fd8\u4e86\u7684\u540c\u5b66\u53ef\u4ee5\u7ffb\u4e66\nbool built(int x,int y){ //\u68c0\u67e5\u5e76\u8bb0\u5f55\u4ed6\u4eec\u7684\u7956\u5148\n    int s1=find(x), s2=find(set[y]);\n\tif(s1!=s2) {set[s1]=s2;  return 1;}\n\treturn 0;\n}\n\nbool cmp(kru x,kru y){return x.z>y.z;} //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\nvoid kruskal(){ //\u6c42\u6700\u5927\u751f\u6210\u6811\n\tfor(int i=1;i<=n;i++) set[i]=i;//\u521d\u59cb\u5316\u7236\u4eb2\u8282\u70b9\n\tsort(ks+1,ks+1+m,cmp); //\u91cd\u65b0\u6392\u5e8f\uff0c\u5927\u5230\u5c0f\n\tint num=0; //\u8bb0\u5f55\u8fb9\u6570\n\tfor(int i=1;i<=m;i++)\n\t  if(built(ks[i].x,ks[i].y)) { //\u8fd9\u91cc\u7528\u5230\u4e86\u5e76\u67e5\u96c6\n\t\tadd_edge(ks[i].x,ks[i].y,ks[i].z);\n\t\tadd_edge(ks[i].y,ks[i].x,ks[i].z);\n\t\t//\u5b58\u5230\u90bb\u63a5\u8868\u91cc\u9762\uff0c\u56e0\u4e3a\u5b83\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u5b58\u4e24\u904d\n\t\tnum++;\n\t\tif(num==n-1) break; //\u6ee1\u8db3\u6700\u5927\u751f\u6210\u6811\u4e86\uff0c\u5c31break\n\t}\n}\n\nvoid dfs(int k){ //dfs\u6c42\u7684\u662f\u6bcf\u4e00\u4e2a\u8282\u70b9\u5728\u6811\u7684\u7b2c\u51e0\u5c42\n\tfor(int i=head[k];i!=0;i=edge[i].next)\n\t\tif(!flag[edge[i].to]) {\n\t\t\tint g=edge[i].to;\n\t\t\tflag[g]=1; deep[g]=deep[k]+1;\n\t\t\tf[g][0]=k; weight[g][0]=edge[i].dis;\n\t\t\tdfs(g);\n\t\t}\n}\n\nint lca(int x,int y){\n\tint ans=0x7fffffff; //\u63d0\u524dans\u6700\u5927\u5316\n\tif(deep[x]<deep[y]) swap(x,y); //\u89c4\u5b9a\u4e00\u4e0bx\u5fc5\u987b\u9ad8\u4e8ey\n\t//\u4efb\u4f55\u6570\u90fd\u53ef\u4ee5\u75282^j\u8868\u793a\uff0c\u4ece\u5927\u5230\u5c0f\u662f\u4e3a\u4e86\u8ba9\u627e\u7684\u6b21\u6570\u5c3d\u91cf\u7684\u5c11\n\tfor(int i=20;i>=0;i--)\n\t\tif(deep[f[x][i]]>=deep[y]) { ans=min(ans,weight[x][i]); x=f[x][i]; }\n\t\t//\u8fd9\u91cc\u628ay\u63d0\u5230\u548cx\u4e00\u6837\u7684\u9ad8\u5ea6\uff0c\u7531\u6b64\u6765\u627e\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n\tif(x==y) return ans; //\u5982\u679cy\u63d0\u4e0a\u6765\u4e4b\u540e\u5c31\u627e\u5230\u4e86\u6700\u8fd1\u516c\u5171\u7956\u5148\n\t\t\t\t\t\t\t\t   //\u76f4\u63a5\u7ed3\u675f\n\tfor(int i=20;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i]) { ans=min(ans,min(weight[x][i],weight[y][i])); x=f[x][i],y=f[y][i]; }\n\t\t//\u4e0d\u65ad\u7684\u628ax,y\u5f80\u4e0a\u9762\u63d0\uff0c\u76f4\u5230\u627e\u5230\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n\t\tans=min(ans,min(weight[x][0],weight[y][0])); //\u5728\u6700\u5927\u91cc\u9762\u627e\u6700\u5c0f\n\t\treturn ans;\n}\n\nint main()\n{\n\tfreopen(\"truck.in\",\"r\",stdin);\n\tfreopen(\"truck.out\",\"w\",stdout);\n\tread(n),read(m);\n\tfor(int i=1;i<=m;i++) read(ks[i].x),read(ks[i].y),read(ks[i].z);\n\t//\u5148\u8bfb\u5165\u56fe\n\tkruskal();  //kruskal\u6c42\u6700\u5927\u751f\u6210\u6811\n\tmemset(weight,0x7f,sizeof(weight)); //\u521d\u59cb\u5316\u6743\u503c\u6700\u5927\u503c\n\tfor(int i=1;i<=n;i++)//\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u7684\u5c42\u6570\uff0clca\u9700\u8981\u7528\u5230\n\t\tif(!flag[i]){ flag[i]=1,deep[i]=1,f[i][0]=i; dfs(i); }\n\tfor(int i=1;i<=20;i++)\n\t\tfor(int j=1;j<=n;j++){//\u500d\u589e\u4f18\u5316\n\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n\t\t\tweight[j][i]=min(weight[j][i-1],weight[f[j][i-1]][i-1]);\n\t    }\n\tread(que); //\u8bfb\u5165\u53f8\u673a\u7684\u9700\u6c42\u6570\n\tfor(int i=1;i<=que;i++){\n\t\tint x,y; read(x),read(y);\n\t\tif(find(x)!=find(y)) printf(\"-1\\n\"); //\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u7684\u7956\u5148\u4e0d\u4e00\u81f4\u5219\u65e0\u89e3\n\t\telse printf(\"%d\\n\",lca(x,y)); //\u5426\u5219\u5c31lca\u627e\u7b54\u6848\n\t}\n\treturn 0;\n}\n```\n\n\u9898\u89e3\u5c31\u5230\u8fd9\u91cc\u5566\uff0c\u6709\u4ec0\u4e48\u7591\u95ee\u6216\u4e0d\u8db3\u8bf7\u8bc4\u8bba\u6216\u79c1\u4fe1\u54e6~  \n\u6b22\u8fce\u5404\u8def\u5927\u4f6c\u6307(chai)\u70b9(tai)\u672c\u849f\u84bb",
        "postTime": 1563366757,
        "uid": 52728,
        "name": "Archyix",
        "ccfLevel": 4,
        "title": "NOIp2013 Day1T3 \u8d27\u8f66\u8fd0\u8f93"
    },
    {
        "content": "\u5176\u5b9e\u4e5f\u8fd8\u597d\u4e86\u3002\u3002\u3002\u601d\u8def\u5f88\u7b80\u5355\u7684\u5566\n\n\u662f\u5b66\u4e60\u4e86Kruskal\u7684\u4e00\u9053\u5f88\u597d\u7684\u9898\u76ee\uff0c\u503c\u5f97\u4e00\u505a\n\n\u540c\u6837\u63a8\u8350\u4e00\u9053\u5f88\u50cf\u4f46\u53c8\u66f4\u96be\u7684\u9898[\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811](https://www.luogu.org/problemnew/show/P4180)\n\n\u6211\u662f\u5148\u505a\u4e86\u4e0a\u9762\u8fd9\u9053\u9898\uff0c\u624d\u6765\u505a\u8fd9\u9053\u9898\u7684\uff0c\u6240\u4ee5\u4e0d\u96be\u5417\uff0c\u4e0a\u9762\u90a3\u9053\u8fd8\u6709\u7ef4\u62a4\u6b21\u5927\u503c\u3002\u3002\u3002\n\n------------\n\n\u54b3\u54b3\uff0c\u8fdb\u5165\u6b63\u9898\u3002\u3002\u3002\n\n\u9996\u5148\uff0c\u80af\u5b9a\u662f\u8981\u7ef4\u62a4\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u500d\u589e\n\n\u8981\u662f\u4f60\u8fd9\u90fd\u4e0d\u4f1a\uff0c\u989d\u3002\u3002\u3002\u6211\u4e5f\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u81ea\u52a8\u8f6c\u79fb\u4e00\u4e0b\u5427\n\n\u4f46\u662f\u5173\u952e\u5728\u4e8e\u6709\u5f88\u591a\u8fb9\u5176\u5b9e\u6211\u4eec\u4e00\u4e9b\u4e0d\u4f1a\u7528\u5230\uff0c\u6bd4\u5982\u8bf4\uff0c\u8fde\u63a5\u76f8\u540c\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5148\u8981\u628a\u5b83\u4eec\u6392\u9664\uff0c\u7136\u540e\u91cd\u65b0\u5efa\u4e00\u68f5\u6811\uff0c\u8fd9\u5c31\u53eb\u6700\u5927\u751f\u6210\u6811\n\n\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\n\n\u6ca1\u5565\u533a\u522b\u5417\uff1f\uff1f\uff1f\u4e0d\u5c31\u6539\u4e2acmp\u5417\n\n```cpp\nLL cmp(Edge a,Edge b)\n{\n\treturn a.value>b.value;\n}\nvoid kruskal()\n{\n\tsort(edge+1,edge+m+1,cmp);\n\tfor (LL i=1;i<=m;i++)\n\t{\n\t\tLL x=find(edge[i].from);\n\t\tLL y=find(edge[i].to);\n\t\tif (x==y)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\taddtree(edge[i].from,edge[i].to,edge[i].value);\n\t\taddtree(edge[i].to,edge[i].from,edge[i].value);\n\t\tans+=edge[i].value;\n\t\tfa[x]=y;\n\t\tcnt++;\n\t\tif (cnt==n-1)\n\t\t{\n\t\t\treturn; \n\t\t}\n\t}\n}\n```\n\n\u5f53\u7136\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a\uff08\u6700\u540e\u4e00\u4e2a\u70b9\u60e8\u75db\u7684\u6559\u8bad\uff09\n\n\u6240\u4ee5\u5728\u65b0\u7684\u6811\u4e0aLCA\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u5224\u65ad\u662f\u5426\u5168\u90e8\u521d\u59cb\u5316\u4e86\n\n```cpp\nvoid init(LL u,LL father)\n{\n\tdep[u]=dep[father]+1;\n\tf[u][0]=father;\n\tfor (LL ii=0;ii<=20;ii++)\n\t{\n\t\tf[u][ii+1]=f[f[u][ii]][ii]; \n\t\tw1[u][ii+1]=min(w1[u][ii],w1[f[u][ii]][ii]);\n\t}\n\tfor (LL ii=heads[u];ii;ii=tree[ii].next)\n\t{\n\t\tLL e=tree[ii].to;\n\t\tif (e==father)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tused[e]=1;//\u5c31\u662f\u8fd9\uff0c\u8bb0\u5f55\u5df2\u7ecf\u521d\u59cb\u5316\n\t\tw1[e][0]=tree[ii].value;\n\t\tinit(e,u);\n\t} \n}\n```\n\u7136\u540e\u5c31\u5f88\u7b80\u5355\u4e86\u5417\uff0c\u76f4\u63a5\u8bfb\u5165\u8be2\u95ee\uff0c\u8dd1\u8def\u5f84\u4e0a\u500d\u589e\u6c42\u6700\u5c0f\u503c\n```cpp\nLL lca(LL x,LL y)\n{\n\tif (dep[x]<dep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[x][ii]]>=dep[y])\n\t\t{\n\t\t\tx=f[x][ii];\n\t\t}\n\t\tif (x==y)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (f[x][ii]!=f[y][ii])\n\t\t{\n\t\t\tx=f[x][ii];\n\t\t\ty=f[y][ii];\n\t\t}\n\t} \n\treturn f[x][0];\n}\nLL query (LL x,LL y)\n{\n\tLL anst=inf;\n\tLL LCA=lca(x,y);\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[x][ii]]>=dep[LCA])\n\t\t{\n\t\t\tanst=min(anst,w1[x][ii]);\n\t\t\tx=f[x][ii];\n\t\t}\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[y][ii]]>=dep[LCA])\n\t\t{\n\t\t\tanst=min(anst,w1[y][ii]);\n\t\t\ty=f[y][ii];\n\t\t}\n\t}\n\treturn anst;\n}\n```\n~~\u7136\u540e\u5c31\u5b8c\u5de5\u4e86~~\n\n-1\u7684\u60c5\u51b5\u8fd8\u8981\u6211\u8bf4\u5417\uff1f\uff1f\uff1f~~\u5e76\u67e5\u96c6\u778e\u641e\u641e\u5c31\u51fa\u6765\u4e86~~\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u7684\u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<time.h>\n#define M 610000\n#define inf 99999999\n#define LL long long\nusing namespace std;\nLL heads[M],fa[M],n,m,minans=inf,ans,cnt,cnte,head[M],used[M],dep[M],w1[101000][30],f[101000][30],q;\nLL find(LL a)\n{\n\tif (fa[a]!=a)\n\t{\n\t\tfa[a]=find(fa[a]);\n\t\treturn fa[a];\n\t}\n\treturn a;\n}\nstruct Edge\n{\n\tLL to,from,value,next;\n}edge[M];\nstruct TREE{\n\tLL to,value,next,from;\n}tree[M];\nvoid add(LL u,LL v,LL dis)\n{\n\tedge[++cnte].next=head[u];\n\tedge[cnte].from=u;\n\tedge[cnte].to=v;\n\tedge[cnte].value=dis;\n\thead[u]=cnte;\n}\nvoid addtree(LL u,LL v,LL dis)\n{\n\ttree[++cnte].next=heads[u];\n\ttree[cnte].to=v;\n\ttree[cnte].value=dis;\n\ttree[cnte].from=u;\n\theads[u]=cnte;\n}\nLL cmp(Edge a,Edge b)\n{\n\treturn a.value>b.value;\n}\nvoid kruskal()\n{\n\tsort(edge+1,edge+m+1,cmp);\n\tfor (LL i=1;i<=m;i++)\n\t{\n\t\tLL x=find(edge[i].from);\n\t\tLL y=find(edge[i].to);\n\t\tif (x==y)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\taddtree(edge[i].from,edge[i].to,edge[i].value);\n\t\taddtree(edge[i].to,edge[i].from,edge[i].value);\n\t\tans+=edge[i].value;\n\t\tfa[x]=y;\n\t\tcnt++;\n\t\tif (cnt==n-1)\n\t\t{\n\t\t\treturn; \n\t\t}\n\t}\n}\nvoid init(LL u,LL father)\n{\n\tdep[u]=dep[father]+1;\n\tf[u][0]=father;\n\tfor (LL ii=0;ii<=20;ii++)\n\t{\n\t\tf[u][ii+1]=f[f[u][ii]][ii]; \n\t\tw1[u][ii+1]=min(w1[u][ii],w1[f[u][ii]][ii]);\n\t}\n\tfor (LL ii=heads[u];ii;ii=tree[ii].next)\n\t{\n\t\tLL e=tree[ii].to;\n\t\tif (e==father)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tused[e]=1;\n\t\tw1[e][0]=tree[ii].value;\n\t\tinit(e,u);\n\t} \n}\nLL lca(LL x,LL y)\n{\n\tif (dep[x]<dep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[x][ii]]>=dep[y])\n\t\t{\n\t\t\tx=f[x][ii];\n\t\t}\n\t\tif (x==y)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (f[x][ii]!=f[y][ii])\n\t\t{\n\t\t\tx=f[x][ii];\n\t\t\ty=f[y][ii];\n\t\t}\n\t} \n\treturn f[x][0];\n}\nLL query (LL x,LL y)\n{\n\tLL anst=inf;\n\tLL LCA=lca(x,y);\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[x][ii]]>=dep[LCA])\n\t\t{\n\t\t\tanst=min(anst,w1[x][ii]);\n\t\t\tx=f[x][ii];\n\t\t}\n\t}\n\tfor (LL ii=20;ii>=0;ii--)\n\t{\n\t\tif (dep[f[y][ii]]>=dep[LCA])\n\t\t{\n\t\t\tanst=min(anst,w1[y][ii]);\n\t\t\ty=f[y][ii];\n\t\t}\n\t}\n\treturn anst;\n}\nint main()\n{\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor (LL i=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;\n\t\tw1[i][0]=inf;\n\t}\n\tfor (LL i=1;i<=m;i++)\n\t{\n\t\tLL x,y,z;\n\t\tscanf(\"%lld %lld %lld\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\tcnte=0;\n\tkruskal();\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tif (!used[i])\n\t\t{\n\t\t\tinit(i,0);\n\t\t}\n\t}\n\tscanf(\"%lld\",&q);\nsrand((long long)(Polaris Dane));//\u672c\u4eba\u7684\u5076\u50cf\u540d\u5b57\u4f5c\u4e3a\u5e78\u8fd0\u6570\n\tfor (LL i=1;i<=q;i++)\n\t{\n\t\tLL x,y;\n\t\tscanf(\"%lld %lld\",&x,&y);\n\t\tif (find(x)!=find(y))\n\t\t{\n\t\t\tprintf(\"-1\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%lld\\n\",query(x,y));\n\t}\n\treturn 0;\n}\n\n```\n\u534e\u4e3d\u7684\u7ed3\u675f\uff08Polaris \u6700\u6f02\u4eae\u4e86\uff01\uff01\uff01\uff09![Emma Dumont](http://image.so.com/view?q=%E5%8C%97%E6%9E%81%E6%98%9F%E5%B0%8F%E5%A7%90%E5%A7%90&src=tab_www&correct=%E5%8C%97%E6%9E%81%E6%98%9F%E5%B0%8F%E5%A7%90%E5%A7%90&ancestor=list&cmsid=7148da2a11ce312564d384039f970c9e&cmran=0&cmras=0&cn=0&gn=0&kn=0&fsn=60&adstar=0&clw=265#id=246883783a8c240ef393fd0a17f16e14&currsn=0&ps=59&pc=59)\n",
        "postTime": 1562685476,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u601d\u8def\u8f83\u7b80\u5355\uff1a\u6700\u5927\u751f\u6210\u6811+LCA\u3002DFS\u65f6\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u5230\u5b83\u7236\u4eb2\u7684\u8f7d\u91cd\u91cf\uff0c\u518d\u5206\u522b\u6c42\u51fa\u63d0\u95ee\u7684\u4e24\u70b9\u5230\u5b83\u4eecLCA\u7684\u94fe\u4e0a\u7684\u6700\u5c0f\u503c\u5e76\u53d6min\uff0c\u6700\u540e\u5f97\u5230\u7684\u5c31\u662f\u7b54\u6848\u3002\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define reg register\nusing namespace std;\nint n,m,s,cnt=0,head[500010],up[500010][20],deep[500010],lin[500010],dis[500010],fl[500010];\nstruct q{\n    int to,ne,dis1;\n}a[500010];\nint ans,sum=0,p,q,f[500010];\nstruct Edge{\n    int x,y,z;\n}e[500010];\nint getfather(int x){//\u5e76\u67e5\u96c6\n    if(f[x]==x)\n    return x;\n    else\n    f[x]=getfather(f[x]);\n    return f[x];\n}\nint cmp(Edge x,Edge y){\n    return x.z>y.z;\n}\nvoid kruskal(){//\u514b\u9c81\u65af\u5361\u5c14\u6c42\u6700\u5927\u751f\u6210\u6811\n    for(reg int i=1;i<=m;++i){\n        f[i]=i;\n        scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z);\n    }\n    sort(e+1,e+m+1,cmp);\n    for(reg int i=1;i<=m;++i){\n        p=getfather(e[i].x),q=getfather(e[i].y);\n        if(p!=q)\n        f[p]=q,lin[++cnt]=i;//\u8bb0\u5f55\u52a0\u5165\u751f\u6210\u6811\u7684\u8fb9\n        if(cnt==n-1){\n            break;\n        }\t\n    }\n    return;\t\t\n} \n\nvoid dfs(int x,int f,int dist){\n    fl[x]=1;//\u6807\u8bb0\u5df2\u7ecfDFS\u8fc7\n    deep[x]=deep[f]+1;\n    dis[x]=dist;\n    up[x][0]=f;\n    for(int i=1;(1<<i)<=deep[x];i++)\n        up[x][i]=up[up[x][i-1]][i-1];\t\n    for(int i=head[x];i;i=a[i].ne)\n    \tif(a[i].to!=f)\n        \tdfs(a[i].to,x,a[i].dis1);\t\n}\nvoid l(int x,int y,int v){\n    sum++;\n    a[sum].dis1=v;\n    a[sum].to=y;\n    a[sum].ne=head[x];\n    head[x]=sum;\n}\nint lca(int x,int y){\n    if(deep[x]<deep[y]){\n        swap(x,y);\n    }\n    for(int i=19;i>=0;i--){\n        if(deep[up[x][i]]>=deep[y])\n            x=up[x][i];\n    }\n\n    if(x==y)\n        return x;\n    for(int i=19;i>=0;i--){\n        if(up[x][i]!=up[y][i]){\n            x=up[x][i];\n            y=up[y][i];\n        }\n    }\n    return up[x][0];\t\n}\nint main(){\n    memset(fl,0,sizeof(fl));\n    scanf(\"%d%d\",&n,&m);\n    kruskal();\n    for(int i=1;i<=m;i++){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n        int x=e[lin[i]].x,y=e[lin[i]].y,v=e[lin[i]].z;\n        l(x,y,v);\n        l(y,x,v);\n    }\t\n    for(int i=1;i<=n;i++)\n    \tif(!fl[i])\n    \t\tdfs(i,0,0);\n    int p,q,que;\n    scanf(\"%d\",&que);\n    for(int i=1;i<=que;i++){\n        ans=0x3f3f3f;\n        scanf(\"%d%d\",&p,&q);\n        int top=lca(p,q),le=p,ri=q;\n        if(top==0){\n            puts(\"-1\");\n            continue;\n        }\n        while(le!=top){//\u5904\u7406\u94fe\n            ans=min(ans,dis[le]);\n            le=up[le][0];\n        }\n        while(ri!=top){//\u540c\u4e0a\n            ans=min(ans,dis[ri]);\n            ri=up[ri][0];\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1555080903,
        "uid": 108098,
        "name": "FourteenObsidian",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "##### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1967)\n\n**\u9898\u76ee\u63cf\u8ff0**\uff1a\nA\u56fd\u6709n\u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece 1\u5230n\uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 m \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002\u73b0\u5728\u6709 q \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002\n***\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570n,m\u8868\u793a A \u56fd\u6709n \u5ea7\u57ce\u5e02\u548c m \u6761\u9053\u8def\u3002\n\u63a5\u4e0b\u6765 m\u884c\u6bcf\u884c3\u4e2a\u6574\u6570 x,y,z\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4ece x\u53f7\u57ce\u5e02\u5230y\u53f7\u57ce\u5e02\u6709\u4e00\u6761\u9650\u91cd\u4e3a z \u7684\u9053\u8def\u3002\u6ce8\u610f\uff1a x \u4e0d\u7b49\u4e8e y\uff0c\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def \u3002\n\u63a5\u4e0b\u6765\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u6709 q \u8f86\u8d27\u8f66\u9700\u8981\u8fd0\u8d27\u3002\n\u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 x\u3001y\uff0c\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4e00\u8f86\u8d27\u8f66\u9700\u8981\u4ece x \u57ce\u5e02\u8fd0\u8f93\u8d27\u7269\u5230 y \u57ce\u5e02\uff0c\u6ce8\u610f\uff1a x \u4e0d\u7b49\u4e8e y \u3002\n***\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5171\u6709 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u4e8e\u6bcf\u4e00\u8f86\u8d27\u8f66\uff0c\u5b83\u7684\u6700\u5927\u8f7d\u91cd\u662f\u591a\u5c11\u3002\u5982\u679c\u8d27\u8f66\u4e0d\u80fd\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u8f93\u51fa\u22121\u3002\n***\n**\u5206\u6790\uff1a\u56e0\u4e3a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u7684\u6743\u503c\uff0c\u60f3\u8981\u8fd9\u4e2a\u6743\u503c\u6700\u5927\uff0c\u90a3\u4e48\u5c31\u662f\u6700\u5c0f\u7684\u6700\u5927\uff0c\u8fd9\u65f6\u6211\u4eec\u60f3\u5230\u4e86\u6700\u5927\u751f\u6210\u6811\u3002\u6211\u4eec\u7528\u8dd1\u6700\u5927\u751f\u6210\u6811\u91cd\u65b0\u5efa\u56fe\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u8dd1\u500d\u589eLCA\u8bb0\u5f55\u6743\u503c\u548c\u6240\u5bf9\u5e94\u7684\u7236\u4eb2\u5373\u53ef\u3002**\n\n\u6211\u4eec\u5c1d\u8bd5\u7528$fa[i][j]$\u8868\u793a\t\u7b2ci\u4e2a\u70b9\u4ee5\u4e0a$2^j$\u8f88\u7684\u70b9\u662f\u4ec0\u4e48\uff0c\u518d\u7528$mo[i][j]$\u8868\u793a\u7b2ci\u4e2a\u70b9\u5411\u4e0a$2^j$\u8f88\u7684\u6700\u5c0f\u6743\u503c\u662f\u4ec0\u4e48\uff08\u6700\u5c0f\u7684\u6700\u5927\uff09\n\n\u6211\u4eec\u4e0d\u96be\u63a8\u51fa\u4ee5\u4e0b\u516c\u5f0f\uff1a\n\n$fa[i][j]=fa[fa[i][j-1]][j-1]$\n$mo[i][j]=min(mo[i][j-1],mo[fa[i][j-1]][j-1])$\n\n\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u8fd9\u4e24\u4e2a\u516c\u5f0f\u5728\u6811\u4e0a\u8dd1\u4e00\u904d\u500d\u589e\u6c42LCA\u5373\u53ef\n\n\u90a3\u4e48\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint fa[100010][20];\nint f[100010];\nbool vis[100010];\nint mo[100010][20];\nstruct node{\n    int x,y,v;\n}e1[1000010];\nstruct node1{\n    int y,Next,v;\n}e[1000100];\nint cnt=0,len=0;\nint linkk[100010];\nint d[100010];\nint d1[100010];\nbool mycmp(node x,node y){\n    return x.v>y.v;\n}\nint getfa(int k){\n    return k==f[k]?k:f[k]=getfa(f[k]); \n}\nvoid insert(int x,int y,int v){\n    e[++len].Next=linkk[x];\n    linkk[x]=len;\n    e[len].y=y;\n    e[len].v=v;\n}\nvoid dfs(int x,int de){\n\tif (vis[x]) return;\n\tvis[x]=1;\n    d[x]=de;\n    for (int i=linkk[x];i;i=e[i].Next){\n\t    int y=e[i].y;\n\t    if (y==fa[x][0]) continue;\n\t    fa[y][0]=x;\n\t    mo[y][0]=e[i].v;\n\t    dfs(y,de+1);\n\t}\n}\nvoid find_fa(){\n    for (int j=1;j<=19;j++)\n      for (int i=1;i<=n;i++)\n         fa[i][j]=fa[fa[i][j-1]][j-1],mo[i][j]=min(mo[i][j-1],mo[fa[i][j-1]][j-1]);\n}\nint lca(int u,int v){\n\tif (getfa(u)!=getfa(v)) return -1;\n\tint ans=10000000;\n    if (d[u]>d[v]) swap(u,v);\n    for (int i=19;i>=0;i--)\n      if (d[fa[v][i]]>=d[u]) ans=min(ans,mo[v][i]),v=fa[v][i];\n    if (u==v) return ans;\n    for (int i=19;i>=0;i--)\n      if (fa[u][i]!=fa[v][i]) ans=min(ans,min(mo[u][i],mo[v][i])),u=fa[u][i],v=fa[v][i];\n    return min(ans,min(mo[u][0],mo[v][0]));\n}\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for (int i=1,x,y,z;i<=m;i++) scanf(\"%d %d %d\",&x,&y,&z),e1[++cnt]=(node){x,y,z},e1[++cnt]=(node){y,x,z};\n    sort(e1+1,e1+cnt+1,mycmp);\n    for (int i=1;i<=n;i++) f[i]=i;\n    for (int i=1;i<=cnt;i++){\n\t    int x=getfa(e1[i].x),y=getfa(e1[i].y);\n\t    if (x!=y)\n\t      f[x]=y,insert(x,y,e1[i].v),insert(y,x,e1[i].v);//\u6700\u5927\u751f\u6210\u6811\u5efa\u8fb9\n\t}\n\tint root=1;\n    for (int i=1;i<=n;i++)\n      if (!vis[i]){\n      \t  d[i]=1;\n\t      dfs(i,1);\n\t      fa[i][0]=i;\n\t      mo[i][0]=10000000;\n\t  }//\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u641c\u7d22\u672a\u641c\u7d22\u7684\u70b9\uff0c\u5e76\u8ba1\u7b97\u51fa\u6df1\u5ea6 \n\tfind_fa();//\u9884\u5904\u7406\u51fafa\u6570\u7ec4 \n\tint q;\n\tscanf(\"%d\",&q);\n\tfor (int i=1,x,y;i<=q;i++) scanf(\"%d %d\",&x,&y),printf(\"%d\\n\",lca(x,y));//\u8f93\u51fa\u5b83\u4eec\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u6743\u503c\uff0c\u6b64\u65f6\u5373\u6700\u5c0f\u7684\u6700\u5927\u8f7d\u91cd \n}\n```\n",
        "postTime": 1550488670,
        "uid": 34301,
        "name": "\u9e6d\u5929",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1967#sub) \n \n\u8fd9\u9053\u9898\u672c\u849f\u84bb\u4e00\u76f4\u662f\u60f3\u5237\u7684\uff0c\u53ef\u60dc\u4e4b\u524d~~\u592a\u83dc\u4e86~~\u6ca1\u65f6\u95f4\uff0c\u4e0d\u4f1a\u505a\uff0c\u73b0\u5728\u5b66\u4e86lca\u540e\u8865\u4e00\u6ce2\u3002\n\n\u9898\u76ee\u63cf\u8ff0\n\nA \u56fd\u6709  n \u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece 1 \u5230 n \uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 m \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002\u73b0\u5728\u6709 q \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 n,m\uff0c\u8868\u793a A \u56fd\u6709 n \u5ea7\u57ce\u5e02\u548c m \u6761\u9053\u8def\u3002\n\n\u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c 3 3 \u4e2a\u6574\u6570 x, y, z\uff0c\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4ece x\u53f7\u57ce\u5e02\u5230 y\u53f7\u57ce\u5e02\u6709\u4e00\u6761\u9650\u91cd\u4e3a z \u7684\u9053\u8def\u3002\u6ce8\u610f\uff1a x \u4e0d\u7b49\u4e8e y \uff0c\u4e24\u5ea7\u57ce\u5e02\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def \u3002\n\n\u63a5\u4e0b\u6765\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570 q\uff0c\u8868\u793a\u6709 q \u8f86\u8d27\u8f66\u9700\u8981\u8fd0\u8d27\u3002\n\n\u63a5\u4e0b\u6765 q \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 x\u3001y\uff0c\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u4e00\u8f86\u8d27\u8f66\u9700\u8981\u4ece x \u57ce\u5e02\u8fd0\u8f93\u8d27\u7269\u5230 y \u57ce\u5e02\uff0c\u6ce8\u610f\uff1a x \u4e0d\u7b49\u4e8e y \u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5171\u6709 q \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u4e8e\u6bcf\u4e00\u8f86\u8d27\u8f66\uff0c\u5b83\u7684\u6700\u5927\u8f7d\u91cd\u662f\u591a\u5c11\u3002\u5982\u679c\u8d27\u8f66\u4e0d\u80fd\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u8f93\u51fa -1 \u3002\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u548c\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5dee\u4e0d\u591a\uff0c\u5148\u7528kruskal\u5efa\u4e00\u9897\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540edfs\u91cd\u65b0\u6784\u8fb9\uff0c\u5efa\u6811\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u8f93\u51fa-1,\u4e0d\u7136\u6c42\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684lca,\u7136\u540e\u7528\u4e00\u4e2a\u500d\u589e\u6570\u7ec4(\u4f2ast\u8868)\u7ef4\u62a4\u6bcf\u6b21\u4e0a\u8df3\u7684\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u4e0a\u8df3\u66f4\u65b0ans\u3002\n\n\u5bf9\u4e8ekruskal\u548clca\u7684\u63cf\u8ff0\uff0c\u697c\u4e0b\u7684\u51e0\u4f4d\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\u3002\u5f53\u6211\u4eec\u7528dalao\u4eec\u7684\u601d\u8def\u5199\u4ee3\u7801\u7684\u65f6\u5019\n\n\u5c31\u6709\u4e86\u8fd9\u6837\u7684\u7a0b\u5e8f\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 10008\n#define MAX  0x7f7f7f7f\nlong long fa[maxn],deepth[maxn];\nlong long n,m;\nstruct edge{\n    long long from,to,val;\n};\nbool cmp(edge a,edge b){\n    return a.val>b.val;\n}\nlong long first[500008];\nlong long nxt[500008];\nlong long last[500008];\nlong long to[500008];\nlong long val[500008];\nlong long vis[500008];\nlong long up[100008][22];\nlong long st[100008][22];\nedge arr[500008];\nvoid init(){\n    for(long long i=1;i<=n;i++){\n        fa[i]=i;\n        deepth[i]=1;\n    }\n}\nvoid init2(){\n    for(long long j=1;j<=20;j++){\n        for(long long i=1;i<=n;i++){\n            up[i][j]=up[up[i][j-1]][j-1];\n        }\n    }\n    for(long long j=1;j<=20;j++){\n        for(long long i=1;i<=n;i++){\n            st[i][j]=min(st[i][j-1],st[up[i][j-1]][j-1]);\n        }\n    }\n}\nvoid init3(){\n    for(long long i=1;i<=n;i++){\n        for(long long j=0;j<=20;j++){\n            st[i][j]=MAX;\n        }\n    }\n    for(long long i=1;i<=n;i++){\n        long long q=first[i];\n        while(q){\n            if(deepth[to[q]]<deepth[i]){\n                st[i][0]=min(st[i][0],val[q]);\n            }\n            q=nxt[q];\n        }\n    }\n}\nlong long find(long long a){\n    if(fa[a]==a){\n        return a;\n    }else{\n        fa[a]=find(fa[a]);\n        return fa[a];\n    }\n}\nvoid hb(long long x,long long y){\n    long long a=find(x);\n    long long b=find(y);\n    fa[a]=b;\n    return ;\n}\nlong long cnt=0;\nlong long lca(long long a,long long b){\n    long long x=a;\n    long long y=b;\n    if(deepth[a]<deepth[b]){\n        swap(a,b);\n    }\n    long long f=deepth[a]-deepth[b];\n    long long base=0;\n    long long ans=0x7f7f7f7f;\n    while(f){\n        if(f&1){\n            ans=min(ans,st[a][base]);\n            a=up[a][base];\n        }\n        base++;\n        f=f>>1;\n    }\n    if(a!=b){\n        for(long long i=20;i>=0;i--){\n            if(up[a][i]!=up[b][i]){\n                ans=min(ans,min(st[a][i],st[b][i]));\n                a=up[a][i];\n                b=up[b][i];\n            }\n        }\n        ans=min(ans,min(st[a][0],st[b][0]));\n        a=up[a][0];\n    }\n    return ans;\n}\nvoid addedge(long long a,long long b,long long var){\n    if(!first[a]){\n        first[a]=++cnt;\n    }else{\n        nxt[last[a]]=++cnt;\n    }\n    last[a]=cnt;\n    to[cnt]=b;\n    val[cnt]=var;\n    return ;\n}\nvoid dfs(long long a,long long fa,long long deep){\n    vis[a]=1;\n    deepth[a]=deep;\n    up[a][0]=fa;\n    long long q=first[a];\n    while(q){\n        if(!vis[to[q]]){\n            vis[to[q]]=1;\n            dfs(to[q],a,deep+1);\n        }\n        q=nxt[q];\n    }\n}\nvoid kruskal(){\n    init();\n    sort(arr+1,arr+1+m,cmp);\n    for(long long i=1;i<=m;i++){\n        if(find(arr[i].from)!=find(arr[i].to)){\n            hb(arr[i].from,arr[i].to);\n            addedge(arr[i].from,arr[i].to,arr[i].val);\n            addedge(arr[i].to,arr[i].from,arr[i].val);\n        }\n    }\n    dfs(1,1,1);\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(long long i=1;i<=m;i++){\n        long long a,b,c;\n        scanf(\"%lld%lld%lld\",&a,&b,&c);\n        arr[i].from=a;\n        arr[i].to=b;\n        arr[i].val=c;\n    }\n    long long t;\n    scanf(\"%lld\",&t);\n    kruskal();\n    init3();\n    init2();\n    for(long long i=1;i<=t;i++){\n        long long a,b;\n        scanf(\"%lld%lld\",&a,&b);\n        if(find(a)==find(b)){\n            printf(\"%lld\\n\",lca(a,b));\n        }else{\n            printf(\"-1\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\u4e00\u63d0\u4ea4 95\u5206\u3002\n\n~~\u5982\u679c\u6ca1\u6709\u6570\u636e\u4e0b\u8f7d\u849f\u84bb\u4e00\u5b9a\u8c03\u4e0d\u51fa\u6765~~\n\n\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u6ca1\u6cd5\u8003\u8651\u5728\u6709\u591a\u4e2a\u8054\u901a\u5757\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u503c\u3002\u6bd4\u5982@Sparky_14145 \u7684hack\u6570\u636e\n\n```cpp\n7 8\n1 2 2\n1 3 5\n3 4 4\n4 4 2\n3 5 3\n6 7 4\n1 3 3\n4 5 8\n8\n1 2 \n1 4 \n1 3 \n1 5 \n1 6 \n2 5 \n3 5 \n6 7\n```\n\u8fd9\u79cd\u6570\u636e\u7684\u8bdd\uff0c\u4e0a\u8ff0\u7a0b\u5e8f\u5728\u6700\u540e\u4e00\u6b21\u8be2\u95ee\u7684\u8bdd\u5c31\u4f1a\u8f93\u51fa\u6781\u5927\u503c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u867d\u7136\u5728\u5efa\u6811\u7684\u65f6\u5019\u88ab\u4e22\u5230\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u4ed6\u4eec\u5728dfs\u7684\u65f6\u5019\u4e0d\u4f1a\u66f4\u65b0father\u548cdeepth,\u6240\u4ee5\u5bfc\u81f4ans\u7684\u8f93\u51fa\u9519\u8bef\uff0c\u4fee\u6539\u65b9\u6cd5\u4e3a\u6bcf\u6b21dfs\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u6ca1\u6709vis\u8fc7\u7684\u70b9\u90fd\u8981\u53bb\u4ee5\u5b83\u4e3a\u6839dfs\u4e00\u904d\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6c42lca\u7684\u65f6\u5019\u80fd\u5f97\u51fa\u6b63\u89e3\u3002\n\n\u6b63\u89e3\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 10008\n#define MAX  0x7f7f7f7f\nlong long fa[maxn],deepth[maxn];\nlong long n,m;\nstruct edge{\n    long long from,to,val;\n};\nbool cmp(edge a,edge b){\n    return a.val>b.val;\n}\nlong long first[500008];\nlong long nxt[500008];\nlong long last[500008];\nlong long to[500008];\nlong long val[500008];\nlong long vis[500008];\nlong long up[100008][22];\nlong long st[100008][22];\nedge arr[500008];\nvoid init(){\n    for(long long i=1;i<=n;i++){\n        fa[i]=i;\n        deepth[i]=1;\n    }\n}\nvoid init2(){\n    for(long long j=1;j<=20;j++){\n        for(long long i=1;i<=n;i++){\n            up[i][j]=up[up[i][j-1]][j-1];\n        }\n    }\n    for(long long j=1;j<=20;j++){\n        for(long long i=1;i<=n;i++){\n            st[i][j]=min(st[i][j-1],st[up[i][j-1]][j-1]);\n        }\n    }\n}\nvoid init3(){\n    for(long long i=1;i<=n;i++){\n        for(long long j=0;j<=20;j++){\n            st[i][j]=MAX;\n        }\n    }\n    for(long long i=1;i<=n;i++){\n        long long q=first[i];\n        while(q){\n            if(deepth[to[q]]<deepth[i]){\n                st[i][0]=min(st[i][0],val[q]);\n            }\n            q=nxt[q];\n        }\n    }\n}\nlong long find(long long a){\n    if(fa[a]==a){\n        return a;\n    }else{\n        fa[a]=find(fa[a]);\n        return fa[a];\n    }\n}\nvoid hb(long long x,long long y){\n    long long a=find(x);\n    long long b=find(y);\n    fa[a]=b;\n    return ;\n}\nlong long cnt=0;\nlong long lca(long long a,long long b){\n    long long x=a;\n    long long y=b;\n    if(deepth[a]<deepth[b]){\n        swap(a,b);\n    }\n    long long f=deepth[a]-deepth[b];\n    long long base=0;\n    long long ans=0x7f7f7f7f;\n    while(f){\n        if(f&1){\n            ans=min(ans,st[a][base]);\n            a=up[a][base];\n        }\n        base++;\n        f=f>>1;\n    }\n    if(a!=b){\n        for(long long i=20;i>=0;i--){\n            if(up[a][i]!=up[b][i]){\n                ans=min(ans,min(st[a][i],st[b][i]));\n                a=up[a][i];\n                b=up[b][i];\n            }\n        }\n        ans=min(ans,min(st[a][0],st[b][0]));\n        a=up[a][0];\n    }\n    return ans;\n}\nvoid addedge(long long a,long long b,long long var){\n    if(!first[a]){\n        first[a]=++cnt;\n    }else{\n        nxt[last[a]]=++cnt;\n    }\n    last[a]=cnt;\n    to[cnt]=b;\n    val[cnt]=var;\n    return ;\n}\nvoid dfs(long long a,long long fa,long long deep){\n    vis[a]=1;\n    deepth[a]=deep;\n    up[a][0]=fa;\n    long long q=first[a];\n    while(q){\n        if(!vis[to[q]]){\n            vis[to[q]]=1;\n            dfs(to[q],a,deep+1);\n        }\n        q=nxt[q];\n    }\n}\nvoid kruskal(){\n    init();\n    sort(arr+1,arr+1+m,cmp);\n    for(long long i=1;i<=m;i++){\n        if(find(arr[i].from)!=find(arr[i].to)){\n            hb(arr[i].from,arr[i].to);\n            addedge(arr[i].from,arr[i].to,arr[i].val);\n            addedge(arr[i].to,arr[i].from,arr[i].val);\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(!vis[i]){\n            dfs(i,i,1);\n        }\n    }\n    \n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(long long i=1;i<=m;i++){\n        long long a,b,c;\n        scanf(\"%lld%lld%lld\",&a,&b,&c);\n        arr[i].from=a;\n        arr[i].to=b;\n        arr[i].val=c;\n    }\n    long long t;\n    scanf(\"%lld\",&t);\n    kruskal();\n    init3();\n    init2();\n    for(long long i=1;i<=t;i++){\n        long long a,b;\n        scanf(\"%lld%lld\",&a,&b);\n        if(find(a)==find(b)){\n            printf(\"%lld\\n\",lca(a,b));\n        }else{\n            printf(\"-1\\n\");\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1532044034,
        "uid": 53023,
        "name": "tiandong123",
        "ccfLevel": 0,
        "title": "\u500d\u589e \u8d27\u8f66\u8fd0\u8f93"
    },
    {
        "content": "\u672c\u9898\u8981\u6c42\u6c42\u51fa\u4ecei\u5230j\u8def\u5f84\u4e0a\u6700\u5c0f\u6bb5\u6700\u5927\u3002\n\n\u8fd9\u9053\u9898\u6709\u4e09\u79cd\u89e3\u6cd5\uff1a\n1.\u6700\u5927\u751f\u6210\u6811+\u500d\u589eLCA\n2.\u6700\u5927\u751f\u6210\u6811+\u6811\u94fe\u5256\u5206\n3.\u6700\u5927\u751f\u6210\u6811+\u52a8\u6001\u6811\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\n\n# \u53ef\u4ee5\u7528LCA\u4e3a\u4ec0\u4e48\u8981\u7528\u6811\u5256\u548c\u52a8\u6001\u6811\uff01\uff01\uff01\n\n\u6240\u4ee5\u679c\u65ad\u9009\u62e9\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff08\u53ef\u80fd\u662f\u6211\u592a\u61d2\uff09\n\n\u6700\u5927\u751f\u6210\u6811\u7684\u95ee\u9898\u53ef\u4ee5\u7528prim\u6216\u8005kruskal\u6765\u89e3\u51b3\n\n\t1.prim\n    \n    \u8be5\u7b97\u6cd5\u7684\u7cbe\u9ad3\u5728\u4e8e\uff0c\u6bcf\u6b21\u90fd\u4ece\u5f53\u524d\u70b9\u7684\u96c6\u5408\u4e2d\u9009\u53d6\u6700\u957f\uff08\u77ed\uff09\u7684\u8fb9\u6765\u6784\u5efa\n    \n    \u6811\uff0c\u8be5\u7b97\u6cd5\u5728\u6b64\u5904\u4f18\u4e8ekruskal\u7684\u5730\u65b9\u5728\u4e8e\u4e0d\u9700\u8981\u7528\u5e76\u67e5\u96c6\u6765\u627e\u662f\u5426\u8054\u901a\uff0c\n    \n    \u5728\u6700\u5f00\u59cbprim\u5efa\u6811\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5bf9\u6b64\u6b21\u64cd\u4f5c\u7684\u70b9\u8fdb\u884c\u6807\u8bb0\uff0c\u76f4\u63a5\u5f97\u51fa\u6240\u5728\u6811\n    \n    \u7684\u5e8f\u53f7\u3002\n    \n```\nstruct Edge{\n\tint fr,to,val;\n    bool operator < (const Edge x) const{\n    \treturn val<x.val;\n    }\n};\nvector<Edge> E;\nvector<int> g[100010];\nint vi[100010];\n\nvoid prim(int root,int d){\n\tint num=0;\n\tpriority_queue<Edge> Eq;\n    Eq.push((Edge){root,root,0});\n    while(!Eq.empty()){\n        if(num==n-1)break;\n    \tEdge e=Eq.top();\n        Eq.pop();\n        int u=e.fr;\n        if(vi[u]) continue;\n        num++;\n        fa[u][0]=e.fr;\n        len[u][0]=e.l;\n        vi[u]=d;\n        for(int i=0;i<g[u].size();i++){\n        \tEdge ee=E[g[u][i]];\n            int v=ee.to;\n            if(vi[v])continue;\n            Eq.push(ee);\n        }\n    }\n}\n```\n\t2.kruskal\n    \n    \u8be5\u7b97\u6cd5\u76f4\u63a5\u9009\u62e9\u6700\u5927\u7684\u8fb9\u6765\u5efa\u6811\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u5f53\u524d\u4e24\u70b9\u662f\u5426\u5df2\u8fde\u63a5\n    \n    \u540c\u6837\u7684\uff0c\u5e76\u67e5\u96c6\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u5224\u65ad\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u5426\u8054\u901a\u3002\n    \n    \u8be5\u7b97\u6cd5\u7684\u4ee3\u7801\u76f4\u63a5\u89c1\u603b\u4ee3\u7801\n    \n\u800c\u5728\u6700\u5927\u751f\u6210\u6811\u5efa\u597d\u540e\u53ef\u4ee5\u8fdb\u884c\u500d\u589eLCA\u6765\u6c42\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u3002\n\n\tLCA+\u500d\u589e\n\t\n\tfa[i][j]\u8868\u793a\u4ecei\u5f00\u59cb\u5411\u4e0a2^j\u8f88\u7236\u4eb2\u662f\u54ea\u4e2a\n    \n    len[i][j]\u8868\u793a\u4ecei\u5f00\u59cb\u5411\u4e0a\u52302^j\u8f88\u7236\u4eb2\u4e2d\u7684\u6700\u77ed\u7684\u4e00\u6bb5\u8def\u7684\u8ddd\u79bb\n    \n    \u7528\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8868\u793a\u4e3a\n    \n    fa[i][j]=fa[fa[i][j-1]][j-1]\n    \n    len[i][j]=min(len[i][j-1],len[fa[i][j-1]][j-1])\n    \n    \u4e4b\u540e\u76f4\u63a5\u6c42LCA\u5c31\u884c\u4e86\n    \n\ndp\u6c42fa\u548clen\uff08\u8fd9\u91cc\u662fp\u548cw\uff09\n\n```\nfor(int i=1;i<=20;i++){\n\tfor(int x=1;x<=n;x++){\n\t\tp[x][i]=p[p[x][i-1]][i-1];\n\t\tw[x][i]=min(w[x][i-1],w[p[x][i-1]][i-1]);\n\t}\n}\n```\n\u6c42LCA\u65f6\u8fd4\u56demin\n    \n```\nint lca(int x,int y){\n    int ans=inf;\n    if(deep[x]<deep[y]){\n        int t=x;x=y;y=t;\n    }\n    for(int i=20;i>=0;i--){\n        if(deep[p[x][i]]>=deep[y]){\n            ans=min(ans,w[x][i]);\n            x=p[x][i];\n        }\n    }\n    if(x==y) return ans;\n    for(int i=20;i>=0;i--){\n        if(p[x][i]!=p[y][i]){\n            ans=min(ans,min(w[x][i],w[y][i]));\n            x=p[x][i];\n            y=p[y][i];\n        }\n    }\n    ans=min(ans,min(w[x][0],w[y][0]));\n    return ans;\n}\n```\n\n\u603b\u4ee3\u5417\u5982\u4e0b\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint w[100001][21],p[100001][21],head[1000001],deep[1000001],fa[1000001];\nstruct nodea{\n    int x,y,c;\n    bool operator < (const nodea x) const{\n        return c>x.c;\n    }\n};\nnodea t[1000001];\nstruct nodeb{\n    int x,y,c,g;\n};\nnodeb h[1000001];\nconst int inf=0x7fffffff;\nint len,n,m,q;\n\nint init(){\n    for(int i=1;i<=n;i++){\n        fa[i]=i;\n        head[i]=0;\n        deep[i]=0;\n    }\n}\n\nvoid ins(int x,int y,int c){\n    len++;\n    h[len].x=x;\n    h[len].y=y;\n    h[len].c=c;\n    h[len].g=head[x];\n    head[x]=len;\n}\n\nint find(int x){\n    if(x==fa[x]) return x;\n    else return fa[x]=find(fa[x]);\n}\n\nvoid kruskal(){\n    int p=0;\n    for(int i=1;i<=m;i++){\n        int tx=find(t[i].x);\n        int ty=find(t[i].y);\n        if(tx!=ty){\n            fa[tx]=ty;\n            ins(t[i].x,t[i].y,t[i].c);\n            ins(t[i].y,t[i].x,t[i].c);\n            p++;\n            if(p==n-1) break;\n        }\n    }\n}\n\nvoid dfs(int u){\n    for(int i=head[u];i>0;i=h[i].g){\n        int y=h[i].y;\n        if(deep[y]==0){\n            deep[y]=deep[u]+1;\n            p[y][0]=u;\n            w[y][0]=h[i].c;\n            dfs(y);\n        }\n    }\n}\n\nvoid ycl(){\n    for(int i=1;i<=n;i++){\n        if(deep[i]==0){\n            deep[i]=1;\n            p[i][0];\n            dfs(i);\n        }\n    }\n    dfs(1);\n    for(int i=1;i<=20;i++){\n        for(int x=1;x<=n;x++){\n            p[x][i]=p[p[x][i-1]][i-1];\n            w[x][i]=min(w[x][i-1],w[p[x][i-1]][i-1]);\n        }\n    }\n}\n\nint lca(int x,int y){\n    int ans=inf;\n    if(deep[x]<deep[y]){\n        int t=x;x=y;y=t;\n    }\n    for(int i=20;i>=0;i--){\n        if(deep[p[x][i]]>=deep[y]){\n            ans=min(ans,w[x][i]);\n            x=p[x][i];\n        }\n    }\n    if(x==y) return ans;\n    for(int i=20;i>=0;i--){\n        if(p[x][i]!=p[y][i]){\n            ans=min(ans,min(w[x][i],w[y][i]));\n            x=p[x][i];\n            y=p[y][i];\n        }\n    }\n    ans=min(ans,min(w[x][0],w[y][0]));\n    return ans;\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&t[i].x,&t[i].y,&t[i].c);\n    }\n    sort(t+1,t+m+1);\n    init();\n    kruskal();\n    ycl();\n    scanf(\"%d\",&q);\n    for(int i=1;i<=q;i++){\n        int dx,dy;\n        scanf(\"%d%d\",&dx,&dy);\n        if(find(dx)!=find(dy)){\n            printf(\"-1\\n\");\n        }\n        else{\n            printf(\"%d\\n\",lca(dx,dy));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1531122796,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# P1967 \u9898\u89e3 + \u89e3\u9898\u5fc3\u5f97\n\n[-->\u3010\u4f20\u9001\u95e8\u3011<--](https://www.luogu.org/problemnew/show/P1967)\n\n\u4f5c\u4e3anoip\u7684\u539f\u9898\uff0c\u8fd9\u9898\u7b97\u662f\u6bd4\u8f83\u6c34\u4e86\uff0c\u800c\u4e14\u5f88\u88f8\u3002\n\n### \u5410\u69fd\u4e00\u53e5 \uff1a \u5341\u51e0\u9875\u7684\u9898\u89e3\u5c45\u7136\u627e\u4e0d\u5230\u4e00\u7247tarjan\uff01\n### ~~\uff08\u6709\u7684\u8bdd\u7b97\u6211\u773c\u778e\uff09~~\n\n## \u7b97\u6cd5\n\n\u6700\u5927\u751f\u6210\u6811+lca\n\n\u751f\u6210\u6811\u7684\u7b97\u6cd5\u6211\u9009\u62e9\u4e86kruskal\uff0c\u76f4\u63a5\u5957\u677f\u5b50\u3002\n\nlca\u7528\u7684\u662ftarjan\uff0c\u4e5f\u662f\u76f4\u63a5\u5957\u677f\u5b50\u3002\n\n\u8bb2\u8f93\u5165\u7684\u8fb9\u6784\u9020\u4e00\u4e2a\u6700\u5927\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u8fde\u901a\u6ca1\u5173\u7cfb\uff0c\u5230\u65f6\u5019\u5bf9\u6bcf\u68f5\u6811\u90fdtarjan\u4e00\u904d\u3002\uff08\u5751\u70b9\uff1atarjan\u7684\u65f6\u5019\u8981\u7ed9\u6bcf\u68f5\u6811\u6253\u4e0d\u540c\u7684\u6807\u8bb0\uff09\n\n\u6700\u5927\u751f\u6210\u6811\u7684\u6b63\u786e\u6027\u5728\u4e8e\u6309\u7167\u8fb9\u6743\u4ece\u9ad8\u5230\u4f4e\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8054\u901a\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u7684\u8fb9\u6743\u5927\u4e8e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u3002\n\n\u800ctarjan\u7684\u65f6\u5019\uff0c\u968f\u610f\u94a6\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9\u8fdb\u884cdfs\u5373\u53ef\uff0c\u53ef\u4ee5\u628a\u6bcf\u8f86\u8d27\u8f66\u7684\u8d77\u59cb\u70b9\u4e0e\u7ec8\u70b9\u770b\u505a\u4e00\u7ec4\u8be2\u95ee\uff0c\u5982\u679c\u8be2\u95ee\u53ef\u4ee5\u67e5\u5230\u4ed6\u4eec\u6709\u516c\u5171\u7956\u5148\uff0c\u90a3\u4e48\u5206\u522b\u5411\u4e0a\u627e\uff0c\u76f4\u5230\u4ed6\u4eec\u7684lca\uff0c\u53d6\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u5373\u53ef\uff0c\u5728tarjan\u7684\u65f6\u5019\uff0c\u6211\u9884\u5148\u5904\u7406\u4e86\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u4e0e\u524d\u9a71\u7684\u8fb9\u6743\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u64cd\u4f5c\u3002\n\n### \u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n\u56e0\u4e3akruskal\u548ctarjan\u90fd\u9700\u8981\u7528\u5230\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u5728\u7a0b\u5e8f\u4e00\u5f00\u59cb\u548ckruskal\u4e4b\u540e\u90fd\u8981\u628a\u5e76\u67e5\u96c6\u521d\u59cb\u5316\u3002\n\nkruskal\u65f6\u5b58\u7684\u8fb9\u548ctarjan\u662f\u5b58\u7684\u8fb9\u7565\u5fae\u6709\u6240\u533a\u522b\uff0ckruskal\u53ea\u9700\u8981\u5b58\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u4ee5\u53ca\u8fb9\u6743\uff0c\u800ctarjan\u65f6\u5b58\u7684\u8fb9\u9700\u8981\u4f7f\u7528\u90bb\u63a5\u8868\uff0c\u5f00\u7ed3\u6784\u4f53\u7684\u8bdd\u9700\u8981\u5b9a\u4e49\u4e24\u79cd\uff0c\u800c\u4e14tarjan\u6240\u7528\u5230\u7684\u8fb9\u662f\u7ecf\u8fc7kruskal\u4e4b\u540e\u9009\u53d6\u7684\u8fb9\u3002\n\n\u56e0\u4e3atarjan\u662f\u79bb\u7ebf\u7b97\u6cd5\uff0c\u6240\u4ee5\u5728\u5904\u7406\u8be2\u95ee\u65f6\u9700\u8981\u628a\u8be2\u95ee\u9884\u5148\u5b58\u50a8\uff0c\u6bcf\u4e2a\u70b9\u53ef\u80fd\u6709\u591a\u7ec4\u8be2\u95ee\uff0c\u6240\u4ee5\u5efa\u8bae\u4f7f\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u3002\n\n### \u4ee3\u7801\n\n\u849f\u84bb\u6211\u7801\u98ce\u4e0d\u662f\u5f88\u597d\uff0c\u800c\u4e14\u4ee3\u7801\u4e5f\u5f88\u5197\u957f\uff0c\u8fd8\u671bdalao\u4eec\u591a\u591a\u6307\u6559\u3002\n\n\u4ee3\u7801\u4e2d\u52a0\u4e86\u4e00\u4e9b\u4e0d\u53ef\u63cf\u8ff0\u7684\u7279\u6280\uff0c\u662f\u7f16\u8bd1\u4e0d\u8fc7\u7684\u3002\u6284\u4ee3\u7801\u7684\u8bf7\u81ea\u89c9\u70b9\u8fd9\u91cc-->[\u3010\u4f20\u9001\u95e8\u3011](https://www.luogu.org/)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,f1,f2,f3,ans,num,kkk,get,now_x,color;\nstruct k1{\n    int father;\n    bool use;\n    int shang;\n    int data;\n    int query_first;\n    int edge_first;\n    int color;\n}node[100001];\nstruct k2{\n    int from;\n    int to;\n    int data;\n    int nex;\n}edge[100003];\nstruct k4{\n    int from;\n    int to;\n    int data;\n}edge_ha[50001];\nstruct k3{\n    int x;\n    int y;\n    int naext;\n    int nbext;\n    int ans;\n}query[30001];\nvoid edge_add(int x,int y,int z,int k)\n{\n    edge_ha[k].from=x;\n    edge_ha[k].to=y;\n    edge_ha[k].data=z;\n}\nvoid add(int x,int y,int z)\n{\n    num++;\n    edge[num].from=x;\n    edge[num].to=y;\n    edge[num].data=z;\n    edge[num].nex=node[x].edge_first;\n    node[x].edge_first=num;\n    num++;\n    edge[num].from=y;\n    edge[num].to=x;\n    edge[num].data=z;\n    edge[num].nex=node[y].edge_first;\n    node[y].edge_first=num;\n}\nint find(int x)\n{\n    if(node[x].father==x)\n    return x;\n    return node[x].father=find(node[x].father);\n}\nbool cmp(const k4 &a,const k4 &b)\n{\n    return a.data>b.data;\n}\nvoid dfs(int x)\n{\n    if(node[x].shang==0)\n    node[x].color=color;\n    else\n    node[x].color=node[node[x].shang].color;\n    node[x].use=true;\n    for(int j=node[x].edge_first;j!=0;j=edge[j].nex)\n    {\n        if(node[edge[j].to].use==false)\n        {\n            node[edge[j].to].shang=x;\n            node[edge[j].to].data=edge[j].data;\n            dfs(edge[j].to);\n            node[edge[j].to].father=node[x].father;\t\t\t\n        }\n    }\n    for(int j=node[x].query_first;j!=0;)\n    {\n        if(x==query[j].x)\n        {\n            if(node[query[j].y].use==true)\n            if(node[query[j].x].color==node[query[j].y].color)\n                query[j].ans=find(query[j].y);\n            j=query[j].naext;\n        }\n        else\n        {\n            if(node[query[j].x].use==true)\n            if(node[query[j].x].color==node[query[j].y].color)\n                query[j].ans=find(query[j].x);\n            j=query[j].nbext;\t\t\t\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m)\uff1b \n    for(int i=1;i<=n;i++)\n    node[i].father=i;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&f1,&f2,&f3);\n        edge_add(f1,f2,f3,i);\n    }\n    sort(edge_ha+1,edge_ha+m+1,cmp);\n    for(int i=1;i<=m;i++)\n    {\n        f1=find(edge_ha[i].from);\n        f2=find(edge_ha[i].to);\n        if(f1==f2)\n        continue;\n        get++;\n        node[f1].father=f2;\n        add(edge_ha[i].from,edge_ha[i].to,edge_ha[i].data);\n        if(get==n-1)\n        break;\n    }\n    scanf(\"%d\",&kkk);\n    for(int i=1;i<=kkk;i++)\n    {\n        scanf(\"%d%d\",&f1,&f2);\n        query[i].x=f1;\n        query[i].y=f2;\n        query[i].naext=node[f1].query_first;\n        node[f1].query_first=i\uff1b \n        query[i].nbext=node[f2].query_first;\n        node[f2].query_first=i\uff1b \n    }\n    for(int i=1;i<=n;i++)\n    node[i].father=i;\n    for(int i=1;i<=n;i++)\n    {\n        if(node[i].use==false)\n        {\n            color++;\t\t\t\n            dfs(i\uff09;\n        }\n\n    }\n    for(int i=1;i<=kkk;i++)\n    {\n        if(query[i].ans==0)\n        printf(\"-1\\n\");\n        else\n        {\n            now_x=query[i].x;\n            ans=2147483647;\n            while(now_x!=query[i].ans)\n            {\n                ans=min(ans,node[now_x].data);\n                now_x=node[now_x].shang;\n            }\n            now_x=query[i].y;\n            while(now_x!=query[i].ans)\n            {\n                ans=min(ans,node[now_x].data);\n                now_x=node[now_x].shang;\n            }\n            printf(\"%d\\n\",ans);\t\n        }\n    }\n    return 0\uff1b \n}\n```\n",
        "postTime": 1521119713,
        "uid": 29210,
        "name": "cym_233",
        "ccfLevel": 7,
        "title": "P1967  \u8d27\u8f66\u8fd0\u8f93"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5361\u4e86\u4e24\u5929\uff0c\u7136\u540e\u5728@LDlornd dalao\u5982\u950b\u7684\u9510\u5229\u773c\u795e\u5e2e\u52a9\u4e4b\u4e0bA\u6389\u4e86\u3002\n\n\u8fd9\u9053\u9898\u76ee\u7ec6\u8282\u5f88\u591a\uff0c\u5b9e\u9645\u4e0a\u5f88\u591a\u9898\u89e3\u90fd\u662f\u4e0d\u751a\u5468\u5230\u7684\uff0c\u6211\u81ea\u5df1\u5199\u7684\u5c3d\u91cf\u8003\u8651\u5730\u5b8c\u6574\uff0c\u4e5f\u6709\u53ef\u80fd\u6709\u758f\u5ffd\u7684\u5730\u65b9\uff0c\u591a\u591a\u6307\u6559\u3002\n\n## \u601d\u8def\n\n\u770b\u5b8c\u8fd9\u9053\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u8981\u7528\u6700\u5927\u751f\u6210\u6811\u91cd\u6784\u6574\u5f20\u56fe\uff0c\u7136\u540e\u5728\u5f97\u5230\u7684\u6811\u4e0a\u7ef4\u62a4\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u77ed\u8fb9\u6743\u3002\u6240\u4ee5\u60f3\u5230\u7528LCA\uff0c\u5728\u5bfb\u627e\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2adim\u6570\u7ec4\uff0c\u5904\u7406\u8def\u5f84\u4e0a\u7684\u6700\u77ed\u8fb9\u6743\u3002\n\n## \u4ee3\u7801\n\n\u5efa\u8bae\u5728\u5b8c\u6210\u672c\u9898\u4e4b\u524dA\u6389[\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148](https://www.luogu.org/problemnew/show/P3379)\uff0c\u6211\u4f7f\u7528\u7684\u662f\u500d\u589e\u65b9\u6cd5\u3002\n\n\u8be6\u7ec6\u7684\u4ecb\u7ecd\u90fd\u5728\u6ce8\u91ca\u91cc\u4e86\uff0c\u6709\u7591\u95ee\u8bf7\u7559\u8a00QwQ\n\n```\n#include <bits/stdc++.h>\n#define INF 0x7777777\n#define maxn 500002\nusing namespace std;\nstruct Edge{\n\tint to,next,lim;\n\tEdge(int x=0,int y=0,int z=0){\n\t\tto=x;next=y;lim=z;\n\t}//\u4e00\u4e2a\u7b80\u5355\u7684\u6784\u9020\u51fd\u6570\n}l[maxn*2];//\u50a8\u5b58\u65b0\u56fe\u7684\u4fe1\u606f\nstruct Orz{\n\tint from,to,lim;\n\tbool operator < (const Orz y) const{\n\t\tif (lim==y.lim) return from<y.from;\n\t\treturn lim>y.lim;\n\t}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u4f7f\u7528Kruskal\u751f\u6210\u6700\u5927\u751f\u6210\u6811\n\tOrz(int x=0,int y=0,int z=0) {\n\t\tfrom=x;to=y;lim=z;\n\t}\n}ori[maxn*2];//\u50a8\u5b58\u9898\u76ee\u7ed9\u5b9a\u7684\u56fe\u4fe1\u606f\nint head[maxn],cnt,fa[maxn]; bool seaed[maxn];\nint d[maxn],p[18][maxn],dim[18][maxn],n,m;\nvoid add(int x,int y,int z) {\n\tl[++cnt]=Edge(y,head[x],z);\n\thead[x]=cnt;\n}//\u524d\u5411\u661f\u5efa\u56fe\nint find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y){\n\tif (find(x)!=find(y)) fa[find(y)]=find(x);\n}//\u4ee5\u4e0a\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c\uff0c\u7528\u4e8eKruskal\u4ee5\u53ca\u5224\u5b9a\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\nvoid Build_Graph(){\n\tmemset(dim,INF,sizeof(dim));\n\tfor (int i=1;i<=n;i++) fa[i]=i;\n\tsort(ori+1,ori+1+m);\n\tfor (int i=1;i<=m;i++)\n\t\tif (find(ori[i].from)!=find(ori[i].to)){\n\t\t\tmerge(ori[i].from,ori[i].to);\n\t\t\tadd(ori[i].from,ori[i].to,ori[i].lim);\n\t\t\tadd(ori[i].to,ori[i].from,ori[i].lim);\n\t\t}\n}//\u6700\u5927\u751f\u6210\u6811\uff0c\u53ef\u80fd\u751f\u6210\u4e86\u591a\u4e2a\u6811\nvoid dfs(int u,int fa){\n\tseaed[u]=1;//\u6807\u8bb0\u4e3a\u5df2\u641c\u7d22\n\td[u]=d[fa]+1;\n\tp[0][u]=fa;\n\tfor (int i=1;(1<<i)<=d[u];i++){\n\t\tp[i][u]=p[i-1][p[i-1][u]];\n\t\tdim[i][u]=min(dim[i-1][u],dim[i-1][p[i-1][u]]);\n\t}//\u66f4\u65b0\u7236\u8282\u70b9\u4fe1\u606f\u7684\u540c\u65f6\u66f4\u65b0\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\n\tfor (int i=head[u];i;i=l[i].next){\n\t\tint v=l[i].to;\n\t\tif (v!=fa){\n\t\t\tdim[0][v]=l[i].lim;\n\t\t\tdfs(v, u);\n\t\t}\n\t}\n}//\u4ee5\u4e0a\u6807\u51c6\u7684\u500d\u589eLCA\u9884\u5904\u7406\u8fc7\u7a0b\nint lca(int a,int b){\n\tint res=INF;\n\tif (find(a)!=find(b)) return -1;//\u5224\u8bfb\u662f\u5426\u8054\u901a\n\tif (d[a]>d[b]) swap(a,b);\n\tfor (int i=16;i>=0;i--)\n\t\tif (d[p[i][b]]>=d[a]) res=min(res,dim[i][b]),b=p[i][b];//\u4f7fa\uff0cb\u4e0a\u5347\u5230\u540c\u4e00\u9ad8\u5ea6\uff0cb\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\n\tif (a==b) return res;\n\tfor (int i=16;i>=0;i--){\n\t\tif (p[i][b]==p[i][a]) continue;\n\t\tres=min(res,min(dim[i][b],dim[i][a]));//\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\n\t\ta=p[i][a],b=p[i][b];\n\t}\n\treturn min(res,min(dim[0][a],dim[0][b]));\n}\nint main() {\n\tios::sync_with_stdio(false);\n\tcin>>n>>m; int x,y,z,q;\n\tfor (int i=1;i<=m;i++)\n\tcin>>x>>y>>z,ori[i]=Orz(x,y,z);\n\tBuild_Graph();\n\tfor (int i=1;i<=n;i++)\n\t\tif (!seaed[i]) dfs(i,0);//\u4fdd\u8bc1\u53ef\u80fd\u7684\u6240\u6709\u751f\u6210\u6811\u90fd\u88ab\u5e76\u4e14\u5904\u7406\u8fc7\u4e00\u6b21\n\tcin>>q;\n\twhile (q--){\n\t\tcin>>x>>y;\n\t\tcout<<lca(x,y)<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1519566462,
        "uid": 37158,
        "name": "XG_Zepto",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u62ff\u697c\u4e0b\u7684\u5404\u4f4d\u5927\u4f6c\u7684\u4ee3\u7801\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4f3c\u4e4e\u5bf9\u8fd9\u7ec4\u6570\u636e\u90fd\u4e0d\u80fd\u8f93\u51fa\u6b63\u786e\u7b54\u6848\u3002\n\n5 2\n1 2 3\n3 4 5\n1\n3 4\n\u6309\u7406\u6765\u8bf4\uff0c\u5e94\u8be5\u8f93\u51fa\u7684\u662f5\uff0c\u4f46\u662fdalao\u4eec\u7684\u4ee3\u7801\u6709\u7684\u662f0\uff0c\u6709\u7684\u662f-1\u3002\n\n\u9898\u76ee\u7684\u6570\u636e\u4e5f\u5f88\u6c34\uff0c\uff0c\uff0c\u4e00\u5f00\u59cb\u4ee51\u4e3a\u6839\u5efa\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u6837\u4e24\u9897\u6811\uff0c\u5c31\u65e0\u6cd5\u6b63\u786e\u8f93\u51fa\u3002\n\n\u6211\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u5982\u679c\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u662f\u4e00\u4e2a\u7956\u5148\uff0c\u7136\u540e\u5148LCA\u4e00\u6b21\uff0c\u5982\u679c\u6c42\u51fa\u6765\u7684\u662f\u521d\u59cb\u5316\u7684\u503c\uff0c\u5c31\u4ee5\u4e24\u4e2a\u70b9\u4e2d\u7684\u4e00\u4e2a\u5efa\u6811\uff0c\u7136\u540e\u518d\u67e5\u8be2\u3002\n\n    \n  \n  \n```cpp\n    #include<iostream>\n    #include<cstring>\n    #include<algorithm>\n    using namespace std;\n    const int maxn=10000;\n    const int maxm=60000;\n    int n,m,q,fa[maxn],d[maxn],p[maxn][20],eid,f[maxn];\n    int max1[maxn][20];//\u672c\u6765\u5b58\u7684\u662f\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u8fb9\u957f\uff0cmaxn*maxn\u5185\u5b58\u70b8\u4e86\uff0c\u800c\u4e14\u4e5f\u4e0d\u597d\n    //\u72b6\u6001\u8f6c\u79fb\u592a\u957f\u4e86\u3002\u6539\u4e86\u4e4b\u540e\u7684\u610f\u601d\u662f\uff0ci\u70b9\u5230i\u7684n\u500d\u7956\u5148\u7684\u8fb9\u7684\u6700\u5c0f\u503c\u3002\u77ac\u95f4\u5185\u5b58\u5c0f\u4e86\u3002\n    int find(int now){//\u627e\u7238\u7238\u51fd\u6570\n        if(fa[now]==now)return now;\n        else return fa[now]=find(fa[now]);\n    }\n    void init(){//\u7b80\u5355\u521d\u59cb\u5316\u4e00\u4e0b\uff0c\uff0c\uff0c\u8fd9\u9898\u7684\u521d\u59cb\u5316\u4e5f\u60f3\u4e86\u597d\u4e45\u3002\n        memset(f,-1,sizeof(f));\n        memset(max1,0x3f,sizeof(max1));\n        eid=0;\n    }\n    struct edge{//\u7528\u6765\u7ed9DFS\u5efa\u6811\u7684\u8fb9\u3002\n        int v,next,w;\n    }e[maxm];\n    struct edge1{//Kruskal\u751f\u6210\u6700\u5927\u6811\u7684\u8fb9\u3002\n        int u,v,w;\n    }e1[maxm];\n    void insert(int a,int b,int w){//\u666e\u901a\u7684\u63d2\u5165\u64cd\u4f5c\u3002\n        e[eid].v=b;\n        e[eid].next=f[a];\n        e[eid].w=w;\n        f[a]=eid++;\n    }\n    bool cmp(edge1 a,edge1 b){//\u666e\u901a\u7684\u6bd4\u8f83\u51fd\u6570\u3002\n        return a.w>b.w;\n    }\n    void kruskal(){\n        for(int i=1;i<=n;i++)fa[i]=i;\n        int rst=n;\n        for(int i=0;i<m&&rst>1;i++){\n            int x=e1[i].u,y=e1[i].v;\n            int x1=find(x),y1=find(y);\n            if(y1!=x1){\n                fa[y1]=x1;\n                rst--;\n                insert(x,y,e1[i].w);//\u63d2\u5165\u53cc\u5411\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4ee5\u4efb\u4f55\u70b9\u4e3a\u6839\u5c31\u53ef\u4ee5\u751f\u6210\u6574\u68f5\u6811\u3002\n                insert(y,x,e1[i].w);\n            }\n        }\n    }\n    void dfs(int a){//\u666e\u901a\u7684\u751f\u6210\u6811\u7684\u64cd\u4f5c\n        for(int i=f[a];i!=-1;i=e[i].next){\n            int x=e[i].v;\n            if(d[x]==-1){\n                d[x]=d[a]+1;\n                p[x][0]=a;\n                max1[x][0]=e[i].w;//\u8d4b\u4e88\u4e00\u500d\u7956\u5148\u7684\u8fb9\u503c\n                dfs(x);\n            }\n        }\n    }\n    int lca(int a,int b){//\u666e\u901a\u7684LCA\u64cd\u4f5c\n        int i,j;\n        int min1=0xfffff,min2=0xfffff;\n        if(d[a]<d[b])swap(a,b);\n        for(i=0;(1<<i)<=d[a];i++);\n        i--;\n        for(j=i;j>=0;j--){\n            if(d[a]-(1<<j)>=d[b]){\n                min1=min(min1,max1[a][j]);\n                a=p[a][j];\n            }\n        }\n        if(a==b)return min1;\n        for(j=i;j>=0;j--){\n            if(p[a][j]!=p[b][j]){\n                min1=min(min1,max1[a][j]);\n                min2=min(min2,max1[b][j]);\n                a=p[a][j];\n                b=p[b][j];\n            }\n        }\n        return min(min(min1,min2),min(max1[a][0],max1[b][0]));\n    }\n    int main(){\n        init();\n        cin>>n>>m;\n        for(int i=0;i<m;i++){\n            cin>>e1[i].u>>e1[i].v>>e1[i].w;\n        }\n        sort(e1,e1+m,cmp);\n        kruskal();\n        memset(d,-1,sizeof(d));\n        dfs(1);\n        p[1][0]=1;\n        for(int level=1;(1<<level)<=n;level++){\n            for(int j=1;j<=n;j++){\n                  p[j][level]=p[p[j][level-1]][level-1];\n                     max1[j][level]=min(max1[j][level-1],max1[p[j][level-1]][level-1]);\n                        }\n                    }\n        cin>>q;\n        while(q--){//\u53ef\u4ee5\u6c42\u591a\u4e2a\u4e0d\u8054\u901a\u5757\u7684\u6700\u5c0f\u503c\u3002\n            int a,b;\n            cin>>a>>b;\n            if(find(a)==find(b)){\n             int c=lca(a,b);\n            if(c!=1048575)cout<<c<<endl;\n            else {\n                dfs(a);\n                p[a][0]=a;\n                for(int level=1;(1<<level)<=n;level++){\n                        for(int j=1;j<=n;j++){\n                            p[j][level]=p[p[j][level-1]][level-1];\n                            max1[j][level]=min(max1[j][level-1],max1[p[j][level-1]][level-1]);\n                    }\n                }\n                cout<<lca(a,b)<<endl;\n            }\n            }else cout<<-1<<endl;\n        }\n        return 0;\n    }\n```\n\u8fd9\u9898\u771f\u7684\u662f\u518d\u6b21\u5199\u5230\u5d29\u6e83\uff0c\u7136\u540e\u83ab\u540d\u5176\u5999\u7684AC\u4e86\u3002\n\u4e3b\u8981\u8fd8\u662f\u505a\u9898\u611f\u60f3\uff1a1.\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u601d\u8def\uff0c\u6709\u4e86\u6e05\u6670\u7684\u601d\u8def\u57fa\u672c\u4e0a\u53ef\u4ee5\u505a\u3002\n\n2.\u4e00\u5f00\u59cb\u60f3\u751f\u6210\u4e00\u68f5\u6811\uff0c\u7136\u540e\u5229\u7528\u500d\u589e\u53bb\u627eLCA\uff0c\u7136\u540e\u518d\u904d\u5386a,b\u5230\u6700\u8fd1\u516c\u5171\u7956\u5148\u8def\u4e0a\u7684\u8fb9\uff0c\u53d1\u73b0\u4ee3\u7801\u592a\n\n\u957f\u4e86\uff0c\u8fd8\u6709\u5f88\u591a\u5751\u70b9\u3002\u6bd4\u5982\uff1a\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u751f\u6210\u6811\uff0c\u9047\u5230\u591a\u6761\u53d8\u600e\u4e48\u89e3\u51b3\uff0c\u600e\u4e48\u904d\u5386a\u5230LCA\u4e0a\u7684\u6700\u5c0f\u503c\u3002\n\n3.\u679c\u65ad\u5f03\u5751\u770b\u4e86\u4e00\u4e0b\u522b\u4eba\u7684\u601d\u8def\uff0c\u7136\u540e\u53d1\u73b0\u5e94\u8be5\u662f\u8981\u751f\u6210\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540eLCA\u6c42\u6700\u5c0f\u503c\u3002\n\n4\uff0c\u5199\u7684\u65f6\u5019\u8fd8\u6709\u522b\u7684\u5751\u70b9\u8be6\u60c5\u89c1\u4ee3\u7801\u3002\n",
        "postTime": 1513757713,
        "uid": 64482,
        "name": "ShannXiBWM",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u697c\u4e0b\u5df2\u7ecf\u8bf4\u7684\u5f88\u8be6\u7ec6\u4e86\u3002\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u5148\u5c06\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u91c7\u7528Kruskal\u7684\u601d\u60f3\u505a\u6700\u5927\u751f\u6210\u6811\u3002\u6700\u540e\u5728\u8fd9\u4e2a\u4e0a\u9762\u8dd1\u6811\u4e0a\u500d\u589e/LCA\u3002\n\n\u57fa\u672c\u601d\u60f3\u5c31\u662fa[x][i]\u7ef4\u62a4x\u5411\u6839\u8282\u70b9\u8df32^i\u6b65\u540e\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u8fd9\u91cc\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u7236\u8282\u70b9\u548c\u6700\u5c0f\u503c\u3002\u7136\u540e\u5c31\u662f\u6109\u5feb\u7684coding\u8fc7\u7a0b\u4e86\u3002\u987a\u4fbf\u8bf4\u4e00\u4e0b\u6211\u8fd9\u9053\u9898\u662f\u51e0\u5929\u4ee5\u524d\u505a\u7684\uff0c\u7ed3\u679c\u4e0d\u65adWA0\u62165\u5206\u3002\u3002\u3002\u7136\u540e\u4eca\u5929\u53c8\u7ffb\u51fa\u6765\u4e00\u770b\uff0c\u53d1\u73b0\u5c45\u7136\u628a\u7ef4\u62a4\u6700\u5c0f\u503c\u90a3\u6bb5\u7684**\u53d8\u91cf\u540d\u6572\u6df7\u4e86***\u3002\u3002\u3002fa\u6570\u7ec4\u548cmin\u6570\u7ec4\u8c03\u7528\u9519\u4e86\u8981\u662f\u80fd\u5bf9\u5c31\u649e\u5230\u9b3c\u4e86\u5427\u3002\u3002\u3002\u4ee5\u4e0b\u662f\u6211\u4e11\u964b\u7684cpp\u4ee3\u7801\uff0c148lines+2.2kb\n\n\u987a\u4fbf\u8bf4\u4e00\u53e5\u6c42LCA\u7684\u8fc7\u7a0b\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u5c31\u662f\u5224\u65ad\u5982\u679c\u4ed6\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8e2^i\u5c31\u53ef\u4ee5\u76f4\u63a5break\uff0c\u4e0d\u8fc7\u672c\u9898\u4e0d\u52a0\u8fd9\u4e2a\u8dd1\u7684\u4e5f\u633a\u5feb\uff0c\u76f8\u6bd4\u4e4b\u4e0b\u8bfb\u5165\u4f18\u5316\u663e\u7136\u66f4\u4e3a\u6211\u4eec\u559c\u95fb\u4e50\u89c1\uff0c\u8fd0\u884c\u65f6\u95f4\u80fd\u780d\u6389\u4e00\u534a\u5de6\u53f3\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nconst int inf=0x7f7f7f7f;\nconst int maxn=(int)1e5+10;\nint n,m,tot,g[maxn],p[maxn],mm[maxn][20],fa[maxn][20];\nint f[maxn],dep[maxn],mmin=0x7fffffff,vis[maxn];\nstruct TreeEdge\n{\n    int f,t,v,ne;\n} t[maxn];\nstruct Edge\n{\n    int f,t,v,ne;\n} e[maxn];\n\nvoid Clear(int type)\n{\n    tot=0;\n    if(type)\n    {\n        memset(e,0,sizeof(e));\n        memset(mm,0x7f,sizeof(mm));\n    }\n    memset(p,0,sizeof(p));\n    for(int i=1; i<=n; i++)\n    {\n        f[i]=i;\n    }\n}\n\nvoid addEdge(int a,int b,int v,int type)\n{\n    t[++tot].f=a;\n    t[tot].t=b;\n    t[tot].v=v;\n    t[tot].ne=p[a];\n    p[a]=tot;\n}\n\nint cmp(Edge a,Edge b)\n{\n    return a.v>b.v;\n}\n\nint find(int a)\n{\n    if(f[a]==a) return a;\n    else return f[a]=find(f[a]);\n}\nvoid MST()\n{\n    int a,b;\n    sort(e+1,e+1+m,cmp);\n    for(int i=1; i<=m; i++)\n    {\n        a=find(e[i].f);\n        b=find(e[i].t);\n        if(a!=b)\n        {\n            addEdge(e[i].f,e[i].t,e[i].v,1);\n            addEdge(e[i].t,e[i].f,e[i].v,1);\n            f[a]=b;\n        }\n        if(tot==m*2-2)\n            break;\n    }\n}\n\nvoid dfs(int x)\n{\n    for(int i=1; i<=18; i++)\n    {\n        if(mm[x][i-1]<0x7f7f7f7f)\n        mm[x][i]=min(mm[x][i-1],mm[fa[x][i-1]][i-1]);\n        fa[x][i]=fa[fa[x][i-1]][i-1];\n    }\n    vis[x]=1;\n    for(int i=p[x]; i; i=t[i].ne)\n    {\n        int y=t[i].t;\n        if(y!=fa[x][0])\n        {\n            dep[y]=dep[x]+1;\n            mm[y][0]=t[i].v;\n            fa[y][0]=x;\n            dfs(y);\n        }\n    }\n}\n\nint lca(int x,int y)\n{\n    if(dep[x]<dep[y]) swap(x,y);\n    int d=dep[x]-dep[y];\n    for(int i=0; i<=18; i++)\n        if(d&(1<<i))\n        {\n            mmin=min(mmin,mm[x][i]);\n            x=fa[x][i];\n        }\n    if(x==y)\n        return mmin;\n    for(int i=18; i>=0; i--)\n    {\n        if(fa[x][i]!=fa[y][i])\n        {\n            mmin=min(mmin,mm[x][i]);\n            mmin=min(mmin,mm[y][i]);\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    return min(mmin,min(mm[x][0],mm[y][0]));\n}\n\nint main()\n{\n    int x,y,q;\n    scanf(\"%d%d\",&n,&m);\n    Clear(1);\n    for(int i=1; i<=m; i++)\n        scanf(\"%d%d%d\",&e[i].f,&e[i].t,&e[i].v);\n    scanf(\"%d\",&q);\n    MST();\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i<=n;i++)\n        if(vis[i]==0)\n            dfs(i);\n    for(int i=1; i<=q; i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        mmin=0x7f7f7f7f;\n        if(find(x)!=find(y))\n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        int ans=lca(x,y);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1478947844,
        "uid": 18058,
        "name": "Silicon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u611f\u89c9\u4eca\u5929\u4e00\u6574\u5929\u90fd\u5728\u4e3apascal\u515a\u505a\u8d21\u732e\uff0c\u6253\u4e86\u4e00\u6574\u5929\u7684\u5386\u5e74\u7b2c\u4e09\u9898\uff0c\u9762\u5bf9\u4e00\u767e\u591a\u884c\u7684\u4ee3\u7801\u5df2\u7ecf\u5b8c\u5168\u65e0\u611f\u4e86....\n\n\u6211\u7528\u7684\u662fkruskal\u6c42\u6700\u5927\u751f\u6210\u68ee\u6797\uff0c\u7136\u540e\u500d\u589eLCA\u6c42\u6700\u5c0f\u503c\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e0d\u7528\u6c42lca\uff09\n\n\u6b65\u9aa4\uff1a\n\n1.\u8bfb\u5165\uff0c\u6309\u8fb9\u7684\u957f\u5ea6\u6392\u5e8f\n\n2.kruskal\u7684\u7ecf\u5178\u505a\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ece\u5927\u5230\u5c0f\u628a\u8fb9\u52a0\u5165\uff0c\u6bcf\u6761\u8fb9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u8fd9\u6837\u751f\u6210\u7684\u5c31\u4e0d\u4e00\u5b9a\u662f\u4e00\u68f5\u6811\u800c\u53ef\u80fd\u662f\u4e00\u7247\u68ee\u6797\n\n3.\u5bf9\u4e8e\u8bfb\u5165\u7684\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5982\u679c\u4e0d\u5728\u5219\u8d70\u4e0d\u5230\uff0c\u7b54\u6848\u8bb0\u5f55\u4e3a-1\uff08\u5e76\u67e5\u96c6\u65e9\u5728kruskal\u7684\u65f6\u5019\u5c31\u505a\u597d\u4e86\u5bf9\u5427\uff09\n\n4.\u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u4e3a\u6839\u8282\u70b9\u7684\u5219\u5efa\u6811\uff0c\u628a\u6df1\u5ea6\u4ec0\u4e48\u7684\u4e00\u904ddfs\u5168\u641e\u5b9a\u5427\uff0c\u540c\u65f6\u5728\u8fd9\u4e2a\u65f6\u5019\u8fd8\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\n\n5.\u518d\u6b21\u679a\u4e3e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5df2\u7ecf\u4e3a-1\u7684\u8df3\u8fc7\uff0c\u5269\u4e0b\u7684\u53ea\u8981\u6c42\u8def\u5f84\u4e0a\u6700\u77ed\u7684\u8fb9\u5c31\u597d\uff0c\u6811\u4e0aST\uff0c\u5f53\u505aRMQ\u6765\u505a\u4ec0\u4e48\u7684\u771f\u7684\u5f88\u6ca1\u5fc5\u8981\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e00\u6b65\u6b65\u5f80\u4e0a\u722c\u3002\u5047\u8bbe\u8981\u4ecex\u5230y\uff0cp\u4e3alca(x,y)\uff0c\u5219\u5206\u522b\u4ecex\u3001y\u5f80\u4e0a\u722c\u5230p\u4e3a\u6b62\uff0c\u8bb0\u5f55\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\u5373\u662f\u7b54\u6848\n\n\n\u6ce8\u610f\u7684\u5730\u65b9\n\n1.\u77e5\u9053kruskal\u7684\u90fd\u6e05\u695akruskal\u7684\u8fb9\u5b58\u50a8\u65b9\u5f0f\uff0c\u4f46\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u5728\u540e\u9762\u7684\u6df1\u641c\u5efa\u6811\u4e2d\u5f88\u4e0d\u597d\u7528\uff08\u56e0\u4e3a\u6bcf\u4e00\u6b21\u627e\u8fde\u63a5\u7684\u70b9\u90fd\u8981\u904d\u5386\u6240\u6709\u8fb9\u4e00\u6b21\uff0c\u59a5\u59a5\u7684\u8d85\u65f6\uff09\uff0c\u6240\u4ee5\u5728kruskal\u7684\u65f6\u5019\u8fd8\u8981\u91cd\u5efa\u4e00\u6b21\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u8fb9\u65b9\u4fbf\u5efa\u6811\n\n2.\u53ef\u4ee5\u4e0d\u7528\u500d\u589e\u6c42LCA\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u6c42lca\u7684\u540c\u5b66\u4eec\u5c31\u7528\u6700\u57fa\u672c\u7684\u65b9\u6cd5\u597d\u4e86\u3002\u5bf9\u4e8e\u8981\u6c42\u7684x\u3001y\u6765\u8bf4\uff08\u5047\u8bbed[x]>d[y]\uff0cd\u4e3a\u6df1\u5ea6\uff09\uff0c\u5148\u8ba9x\u4e00\u6b65\u6b65\u5f80\u4e0a\u722c\u5230\u6df1\u5ea6\u8ddfy\u76f8\u7b49\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e5f\u5b58\u4e0b\u6700\u77ed\u8fb9\uff0c\u4e0e\u540e\u9762\u6bd4\u8f83\u3002\u6df1\u5ea6\u76f8\u540c\u4e4b\u540e\uff0cx\u548cy\u4e00\u8d77\u4e00\u6b65\u6b65\u5f80\u4e0a\u722c\u5230\u5404\u81ea\u7684\u7236\u8282\u70b9\uff0c\u4e2d\u9014\u8bb0\u5f55\u6700\u77ed\u8fb9\uff0c\u76f4\u5230x\u4e0ey\u76f8\u7b49\uff0c\u8fd9\u6837\u505a\u4e5f\u5e76\u4e0d\u4f1a\u8d85\u65f6\n\n```cpp\ntype node=record\n     u,v,w,en:longint;\n     end;\nvar fa,d,last,las:array[0..11000] of longint;//fa\u8bb0\u5f55\u5e76\u67e5\u96c6\u7684\u7236\u8282\u70b9\uff0cd\u4e3a\u6df1\u5ea6\uff0clas[i]\u4e3ai\u4e0e\u5176\u7236\u8282\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\n    x,y,ans:array[1..50000] of longint;\n    e:array[0..100000] of node;//e\u662f\u7528\u4e8ekruskal\u7684\u8fb9\u96c6\u6570\u7ec4\n    e2,w2,next:array[1..110000] of longint;//e2\u3001w2\u3001next\u662f\u7528\u4e8e\u90bb\u63a5\u8868\u7684\u5b58\u50a8\u65b9\u6cd5\n    f:array[1..1000000,0..20] of longint;//\u500d\u589e\u6570\u7ec4\n    i,j,k,m,n,p,q,t,aa,ne,bb,cc,min,now:longint;\nfunction gf(u:longint):longint;//\u5e76\u67e5\u96c6\u6c42\u7956\u5148\u7ed3\u70b9\nbegin\n    if fa[u]=u then exit(u);\n    fa[u]:=gf(fa[u]);\n    exit(fa[u]);\nend;\nprocedure hb(u,v:longint);//\u5408\u5e76\nbegin\n    fa[gf(u)]:=gf(v);\nend;\nprocedure sort(l,r: longint);//kruskal\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\n      var\n         i,j,x: longint;y:node;\n      begin\n         i:=l;\n         j:=r;\n         x:=e[(l+r) div 2].w;\n         repeat\n           while e[i].w<x do\n            inc(i);\n           while x<e[j].w do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=e[i];\n                e[i]:=e[j];\n                e[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\nprocedure bt(c:longint);//\u6df1\u641c\u5efa\u6811\nvar i,j,k,p,po:longint;\nbegin\n    p:=last[c];\n    while p<>0 do\n    begin\n        po:=e2[p];\n        if po<>f[c,0] then\n        begin\n            las[po]:=p;//\u6ce8\u610f\u8fd9\u91cc\uff0c\u628apo\u4e0ec\uff08po\u7684\u7236\u8282\u70b9\uff09\u7684\u8fb9\u7684\u7f16\u53f7\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u540e\u9762\u4e00\u6b65\u6b65\u722c\u7684\u65f6\u5019\u597d\u627e\u8fb9\n            d[po]:=d[c]+1;\n            f[po,0]:=c;\n            bt(po);\n        end;\n        p:=next[p];\n    end;\nend;\nfunction lca(u,v:longint):longint;//\u500d\u589e\u6c42lca\nvar i,j,k:longint;\nbegin\n    if d[u]<d[v] then\n    begin\n        k:=u;u:=v;v:=k;\n    end;\n    if d[u]>d[v] then\n      for k:=20 downto 0 do\n        if d[f[u,k]]>=d[v] then u:=f[u,k];\n    if u=v then exit(u);\n    for k:=20 downto 0 do\n      if f[u,k]<>f[v,k] then\n      begin\n          u:=f[u,k];\n          v:=f[v,k];\n      end;\n    exit(f[u,0]);\nend;\nbegin\n    assign(input,'P1967.in');reset(input);\n    e[0].w:=maxlongint;\n    readln(n,m);\n    for i:=1 to m do\n    begin\n        readln(aa,bb,cc);\n        e[i].u:=aa;e[i].v:=bb;e[i].w:=cc;\n    end;\n    sort(1,m);\n    for i:=1 to n do\n      fa[i]:=i;\n    readln(q);\n    for i:=m downto 1 do//kruskal\uff0c\u4ece\u5927\u5230\u5c0f\u904d\u5386\n      if gf(e[i].u)<>gf(e[i].v) then\n      begin\n          hb(e[i].u,e[i].v);\n          inc(ne);//\u91cd\u5efa\u4e00\u904d\u56fe\uff0c\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u7b5b\u9009\u51fa\u6765\u7684\u8fb9\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u6df1\u641c\u5efa\u6811\n          e2[ne]:=e[i].v;\n          next[ne]:=last[e[i].u];\n          last[e[i].u]:=ne;\n          w2[ne]:=e[i].w;\n          inc(ne);\n          e2[ne]:=e[i].u;\n          next[ne]:=last[e[i].v];\n          last[e[i].v]:=ne;\n          w2[ne]:=e[i].w;\n      end;\n    for i:=1 to q do\n    begin\n        readln(x[i],y[i]);\n        if gf(x[i])<>gf(y[i]) then ans[i]:=-1;\n    end;\n    for i:=1 to n do\n      if fa[i]=i then begin d[i]:=1;bt(i);end;//\u6df1\u641c\u5efa\u6811\n    for j:=1 to 20 do\n      for i:=1 to n do\n        f[i,j]:=f[f[i,j-1],j-1];\n    for i:=1 to q do\n    begin\n        if ans[i]=-1 then continue;\n        p:=lca(x[i],y[i]);\n        min:=maxlongint;\n        now:=x[i];\n        while now<>p do//\u6162\u6162\u5f80\u4e0a\u722c\u5427\n        begin\n            k:=las[now];\n            if w2[k]<min then min:=w2[k];\n            now:=f[now,0];\n        end;\n        now:=y[i];\n        while now<>p do\n        begin\n            k:=las[now];\n            if w2[k]<min then min:=w2[k];\n            now:=f[now,0];\n        end;\n        ans[i]:=min;\n    end;\n    for i:=1 to q do\n      writeln(ans[i]);\nend.\n\n```",
        "postTime": 1478680997,
        "uid": 14130,
        "name": "The_Dark_Knight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "//\u601d\u8def\uff1aKruskal\u6c42\u6700\u5927\u751f\u6210\u6811+\u500d\u589e\u6c42\u4e24\u70b9\u5230lca\u6700\u5c0f\u8fb9\u6743\n\n//\u5206\u6790\uff1a\u6240\u6c42\u89e3\u662f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u9053\u8def\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5e94\u5f53\u9009\u53d6\u8fb9\u6743\u5927\u7684\u8fb9\uff0c\u7531\u6b64\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684Kruskal\u7b97\u6cd5\uff0c\n\n//\u7531Kruskal\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u68ee\u6797\uff08\u4e0d\u4e00\u5b9a\u6240\u6709\u70b9\u8054\u901a\u5728\u4e00\u68f5\u6811\u4e0a\uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u70b9\u662f\u5426\u80fd\u76f8\u4e92\u5230\u8fbe\uff0c\n\n//\u518d\u7528\u500d\u589e\u65b9\u6cd5\u8bb0\u5f55\u4e00\u4e2a\u70b9\u5230\u5b83\u67d0\u7956\u5148\u4e4b\u95f4\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n//\u8dd1\u5f97\u8fd8\u633a\u5feb\u7684\uff0c\u4e0d\u52a0\u4f18\u5316\u8bfb\u5165513ms\uff0c\u52a0\u4e0a\u4f18\u5316\u8bfb\u5165254ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int logn=14;\nconst int INF=100000;\nconst int maxn=10000+10;\nconst int maxm=50000+10;\nstruct Edge {\n    int u,v,w;\n    bool operator < (const Edge& rhs) const {\n        return w>rhs.w;//\u91cd\u8f7d\u5c0f\u4e8e\u7b26\u53f7\uff0c\u4fbf\u4e8e\u6392\u5e8f \n    }\n    void input() {\n        scanf(\"%d%d%d\",&u,&v,&w);\n    }\n}e[maxm];\nint fa[maxn],n,m;\nint find(int x)\n{\n    return x==fa[x]?x:fa[x]=find(fa[x]);\n}\nint fir[maxn],nxt[maxm],to[maxm],val[maxm],ecnt;\nvoid add_edge(int u,int v,int w)\n{\n    nxt[++ecnt]=fir[u];fir[u]=ecnt;to[ecnt]=v;val[ecnt]=w;\n    nxt[++ecnt]=fir[v];fir[v]=ecnt;to[ecnt]=u;val[ecnt]=w;\n}\n//Kruskal\u6c42\u51fa\u5408\u6cd5\u8fb9\uff1a\u5c06\u8fb9\u6743\u7531\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff0c\u8fde\u63a5\u4e0d\u540c\u8fde\u901a\u5757\u7684\u8fb9\uff1b\u6784\u6210\u68ee\u6797 \nvoid Kruskal()\n{\n    sort(e,e+m);\n    for(int i=1;i<=n;i++) fa[i]=i;\n    for(int i=0;i<m;i++) {\n        int u=e[i].u,v=e[i].v,w=e[i].w;\n        int x=find(u),y=find(v);\n        if(x!=y) add_edge(u,v,w),fa[x]=y;//\u82e5\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\uff0c\u5219\u52a0\u8fb9 \n    }\n}\nint dep[maxn],vis[maxn];//vis\u8bb0\u5f55\u8be5\u70b9\u6709\u6ca1\u6709\u88ab\u6df1\u641c\u8fc7\uff0c\u4fbf\u4e8e\u5224\u65ad\u8be5\u70b9\u662f\u5426\u53ef\u4ee5\u6210\u4e3a\u6839\u5efa\u6811 \nint anc[maxn][logn+2],f[maxn][logn+2];//f[u][i]\u8868\u793a\u4eceu\u8282\u70b9\u5411\u4e0a\u5230\u5b83\u7684\u7b2c2^i\u53f7\u7956\u5148\u4e4b\u95f4\u8fb9\u6743\u7684\u6700\u5c0f\u503c \nvoid dfs(int u,int fa,int d)\n{\n    vis[u]=1;dep[u]=d;anc[u][0]=fa;\n    for(int e=fir[u];e;e=nxt[e]) if(to[e]!=fa) f[to[e]][0]=val[e],dfs(to[e],u,d+1);\n}\nvoid init()\n{\n    for(int i=1;i<=logn;i++) for(int j=1;j<=n;j++)\n        anc[j][i]=anc[anc[j][i-1]][i-1],f[j][i]=min(f[j][i-1],f[anc[j][i-1]][i-1]);\n}\n//\u500d\u589e\u6c42\u89e3\u4e24\u70b9\u5230\u5176lca\u95f4\u7684\u6700\u5c0f\u8fb9\u6743 \nint query(int x,int y)\n{\n    if(dep[x]<dep[y]) swap(x,y);\n    int d=dep[x]-dep[y],mn=INF;\n    if(d>0) for(int i=0;d&&i<=logn;i++,d>>=1) if(d&1) mn=min(mn,f[x][i]),x=anc[x][i];\n    if(x==y) return mn;\n    for(int i=logn;i>=0;i--) if(anc[x][i]!=anc[y][i])\n        mn=min(mn,min(f[x][i],f[y][i])),x=anc[x][i],y=anc[y][i];\n    mn=min(mn,min(f[x][0],f[y][0]));\n    return mn;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<m;i++) e[i].input();\n    Kruskal();\n    for(int i=1;i<=n;i++) if(!vis[i]) dfs(i,0,1);\n    init();\n    int q;\n    scanf(\"%d\",&q);\n    while(q--) {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        int fx=find(x),fy=find(y);\n        if(fx!=fy) printf(\"-1\\n\");//\u82e5\u4e24\u70b9\u4e0d\u5728\u7edf\u4e00\u8fde\u901a\u56fe\u5185\uff0c\u5fc5\u5b9a\u4e0d\u53ef\u76f8\u4e92\u5230\u8fbe \n        else printf(\"%d\\n\",query(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1475922763,
        "uid": 13239,
        "name": "Continue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u662f\u6709\u70b9\u96be\u7684\uff0c\u6bd5\u7adf\u662f\u63d0\u9ad8\u7ec4\u7684\u7b2c\u4e09\u9898\u3002\n\n\u601d\u8def\uff1a\n\n30%\u65b9\u6cd5\uff1a\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u80fd\u53ea\u62ff\u4e09\u5341\u5206\n\n60%\u65b9\u6cd5\uff1a\u6700\u5927\u751f\u6210\u6811Kruskal\uff0c\u6bcf\u6b21\u8fde\u5b8c\u4e00\u6761\u8fb9\u68c0\u67e5\u4e00\u4e0b\u6709\u54ea\u4e2a\u95ee\u9898\u56e0\u4e3a\u8fd9\u6761\u8fb9\u5f97\u5230\u7b54\u6848\uff08\u7b54\u6848\u5c31\u662f\u8fd9\u6761\u8fb9\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u56e0\u4e3a\u8fd9\u6761\u8fb9\u5bfc\u81f4\u95ee\u9898\u7684\u4e24\u4e2a\u70b9\u8fde\u901a\u4e86\uff09\uff0c\u6700\u540e\u4e00\u6b21\u6027\u8f93\u51fa\u3002\n\n100%\u65b9\u6cd5\uff1a\u8fd8\u662f\u6700\u5927\u751f\u6210\u6811Kruskal\uff0c\u5148\u8fdb\u884c\u4e00\u6b21lca\uff08\u6211\u4f7f\u7528\u4e86tarjan\u7b97\u6cd5\uff09\u7136\u540e\u8fdb\u884c\u4e00\u6b21\u6811\u4e0a\u7684RMQ\uff0c\u4e3a\u4ee5\u540e\u7684\u8be2\u95ee\u6700\u5c0f\u503c\u4f5c\u51c6\u5907\uff0c\u6700\u540e\u4e00\u6b21\u56de\u7b54\u6240\u6709\u95ee\u9898\u5c31\u884c\u4e86\uff0c\u7ec6\u8282\u53c2\u8003\u4ee3\u7801\u3002\n\n\u9644\u4e0a~~\u673a\u667a\u7684\u6211\u5199\u7684\u673a\u667a\u7684~~\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<iostream>\n#include<vector>\nusing namespace std;\nint n,m,fa[10002],q,a[30002],b[30002],lca[30002],ans[10002],fl[10002],r[20][10002],pr[20][10002];\ntypedef pair<int,int>T;\ntypedef struct{\n    int x,y,z;\n}P;\nbool cmp(P aa,P bb){\n    return (aa.z>bb.z);\n}\nP p[50002];\nvector<T>t[10002],g[10002];\nT f[10002];\nint find(int x){\n    if (fa[x]==x)return x;\n    return fa[x]=find(fa[x]);\n}\nint find2(int x){\n    if (fl[x]==x)return x;\n    return fl[x]=find2(fl[x]);\n}\nvoid tarjan(int h,int s){\n    ans[h]=s;fl[h]=h;\n    for (int i=0;i<g[h].size();i++)\n    if (!fl[g[h][i].first])\n    {\n        f[g[h][i].first]=T(h,g[h][i].second);\n        tarjan(g[h][i].first,s+1);\n        fl[g[h][i].first]=h;\n    }\n    for (int i=0;i<t[h].size();i++)\n    if (fl[t[h][i].first])lca[t[h][i].second]=find2(t[h][i].first);\n}\nvoid rmq(){\n    for (int i=1;i<=n;i++)\n    if (f[i].first==-1)\n    {r[0][i]=1e9;pr[0][i]=-1;}\n    else\n    {\n        pr[0][i]=f[i].first;\n        r[0][i]=f[i].second;\n    }\n    for (int i=1;i<20;i++)\n    for (int j=1;j<=n;j++)\n    if (pr[i-1][j]!=-1 && pr[i-1][pr[i-1][j]]!=-1)\n    {\n        pr[i][j]=pr[i-1][pr[i-1][j]];\n        r[i][j]=min(r[i-1][j],r[i-1][pr[i-1][j]]);\n    }\n    else\n    {r[i][j]=1e9;pr[i][j]=-1;}\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<m;i++)\n    scanf(\"%d%d%d\",&p[i].x,&p[i].y,&p[i].z);\n    sort(p,p+m,cmp);\n    scanf(\"%d\",&q);\n    for (int i=0;i<q;i++)\n    {\n        scanf(\"%d%d\",&a[i],&b[i]);\n        t[a[i]].push_back(T(b[i],i));\n        t[b[i]].push_back(T(a[i],i));\n    }\n    for (int i=1;i<=n;i++)\n    fa[i]=i;\n    for (int i=0;i<m;i++)\n    {\n        int xx=find(p[i].x),yy=find(p[i].y);\n        if (xx!=yy)\n        {\n            fa[xx]=yy;\n            g[p[i].x].push_back(T(p[i].y,p[i].z));\n            g[p[i].y].push_back(T(p[i].x,p[i].z));\n        }\n    }\n    for (int i=1;i<=n;i++)\n    if (!fl[i]){f[i]=T(-1,0);tarjan(i,0);}\n    rmq();\n    for (int i=0;i<q;i++)\n    if (find(a[i])!=find(b[i]))printf(\"-1\\n\");//\u5982\u679c\u4e0d\u8fde\u901a\u5c31\u76f4\u63a5\u8f93\u51fa-1\n    else\n    {\n        int u1=ans[a[i]]-ans[lca[i]],u2=ans[b[i]]-ans[lca[i]],d=a[i],Min=1e9,hh=0;\n        while(u1)//\u4efb\u4f55\u4e00\u4e2a\u6570\u90fd\u53ef\u4ee5\u5206\u62102\u7684\u82e5\u5e72\u6b21\u5e42\u7684\u548c\uff0c\u8fd9\u4e00\u6b65\u662f\u5206\u89e3\n        {\n            if (u1&1){Min=min(Min,r[hh][d]);d=pr[hh][d];}\n            u1/=2;\n            hh++;\n        }\n        hh=0;d=b[i];\n        while(u2)//\u4efb\u4f55\u4e00\u4e2a\u6570\u90fd\u53ef\u4ee5\u5206\u62102\u7684\u82e5\u5e72\u6b21\u5e42\u7684\u548c\uff0c\u8fd9\u4e00\u6b65\u662f\u5206\u89e3\n        {\n            if (u2&1){Min=min(Min,r[hh][d]);d=pr[hh][d];}\n            u2/=2;\n            hh++;\n```\n}//\u611f\u89c9\u8fd9\u4e2a\u5206\u89e3\u8fc7\u7a0b\u5f88\u5947\u8469\uff08\u5176\u5b9e\u597d\u50cf\u53ef\u4ee5\u4e0d\u7528\u5206\u89e3\u7684\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002\u3002\u3002\uff09\n        printf(\"%d\\n\",Min);\n\n    }\n    return 0;\n\n}",
        "postTime": 1475735261,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "<http://blog.csdn.net/u014120397/article/details/52622279>\n\nKruskal\u6700\u5927\u751f\u6210\u6811+\u6811\u4e0a\u500d\u589e\n\n\u5f88\u660e\u663e\u4e86\uff0c\u5982\u679c\u662f\u8981\u4e24\u70b9\u95f4\u8def\u5f84\u627f\u8f7d\u7684\u91cd\u91cf\u5c3d\u53ef\u80fd\u5927\u4e14\u4e24\u70b9\u95f4\u6709\u8f83\u591a\u8def\u5f84\u7684\u8bdd\uff0c\u5c31\u4e00\u5b9a\u4f1a\u53ea\u8fde\u53ef\u627f\u8f7d\u91cd\u91cf\u8f83\u5927\u7684\u8fb9\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u7528Kruskal\u6765\u505a\u6700\u5927\u751f\u6210\u6811\uff0c\u5c3d\u7ba1\u4e0d\u4e00\u5b9a\u6240\u6709\u7684\u70b9\u4e4b\u95f4\u4e24\u4e24\u8054\u901a\uff0c\u4f46\u662f\u8fde\u51fa\u6765\u7684\u8fb9\u627f\u8f7d\u91cd\u91cf\u4e00\u5b9a\u662f\u6700\u5927\u7684\u3002\n\n\u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u5927\u627f\u8f7d\u91cd\u91cf\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u627e\u4e24\u70b9\u8def\u5f84\u5f53\u4e2d\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002\u7531\u4e8e\u7528kruskal\u4e4b\u540e\u5f97\u5230\u7684\u4e00\u5b9a\u662f\u4e00\u7247\u68ee\u6797\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u500d\u589elca\u6765\u67e5\u8be2\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u91cc\u9762\u3002\u5982\u679c\u5728\u540c\u4e00\u68f5\u6811\u91cc\u9762\uff0c\u5219\u6c42\u51falca\uff0c\u5e76\u6c42\u4e24\u4e2a\u70b9\u5230lca\u7684\u6700\u5c0f\u6743\u503c\u8fb9\u3002\u5982\u679c\u4e0d\u5728\u4e00\u68f5\u6811\u5219\u8f93\u51fa-1\u3002\n\n\u4ee3\u7801\u89c1\u6b64\uff1a\n\n```cpp\n#include<cstdio>  \n#include<cstring>  \n#include<cmath>  \n#include<algorithm>  \n#include<vector>  \n#include<queue>  \n#define rep(i,l,r) for(int i=l;i<=r;i++)  \n#define repu(i,r,l) for (int i=r;i>=l;i--)  \n#define N 10100  \n#define M 50500  \nusing namespace std;  \nstruct data  \n{  \n    int u,v,w;  \n}edge[M];  \nstruct way  \n{  \n    int v,w,next;  \n};  \nint n,m,q,p[N],dep[N],parent[N][17],afford[N][17],x,y,z,head[N],cnt;  \nbool vis[N];  \nway map[2*M];  \nbool cmp(const data &a,const data &b)  \n{  \n    return a.w>b.w;  \n}  \nvoid ufsets()  \n{  \n    rep(i,1,n)  \n    p[i]=-1;  \n}  \nvoid addedge(int x,int y,int value)  \n{  \n    way e;  \n    cnt++;  \n    e.v=y;  \n    e.w=value;  \n    e.next=head[x];  \n    head[x]=cnt;  \n    map[cnt]=e;  \n    cnt++;  \n    e.v=x;  \n    e.next=head[y];  \n    head[y]=cnt;  \n    map[cnt]=e;  \n}  \nint find(int x)  \n{  \n    return p[x]<0?x:p[x]=find(p[x]);  \n}  \nvoid uni(int x,int y)  \n{  \n    if (p[x]<=p[y])  \n    {  \n        p[x]+=p[y];  \n        p[y]=x;  \n    }  \n    else  \n    {  \n        p[y]+=p[x];  \n        p[x]=y;  \n    }  \n}  \nvoid dfs(int x,int pa,int d)  \n{  \n    parent[x][0]=pa;  \n    dep[x]=d;  \n    vis[x]=true;  \n    for (int i=head[x];i;i=map[i].next)  \n    {  \n        int t=map[i].v;  \n        if ((!vis[t])&&(t!=x))dfs(t,x,d+1);  \n    }  \n}  \nint neiaff(int x,int y)  \n{  \n    for (int i=head[x];i;i=map[i].next)  \n    if (map[i].v==y) return map[i].w;  \n}  \nvoid makemap()  \n{  \n    memset(vis,0,sizeof(vis));  \n    memset(parent,0,sizeof(parent));  \n    int tree=0;  \n    rep(i,1,n)  \n    {  \n        if (!vis[i])  \n        {  \n            tree--;  \n            dfs(i,tree,0);  \n        }  \n    }  \n    rep(j,1,16)  \n    {  \n        rep(i,1,n)  \n        {  \n            if (parent[i][j-1]<0) parent[i][j]=parent[i][j-1];  \n            parent[i][j]=parent[parent[i][j-1]][j-1];  \n        }  \n    }  \n    rep(i,1,n)  \n    {  \n        afford[i][0]=neiaff(i,parent[i][0]);  \n    }  \n    rep(j,1,16)  \n    {  \n        rep(i,1,n)  \n        {  \n            if (parent[i][j-1]<0)continue;  \n            afford[i][j]=min(afford[i][j-1],afford[parent[i][j-1]][j-1]);  \n        }  \n    }  \n}  \nint getaff(int x,int y)  \n{  \n    int t=dep[x]-dep[y];  \n    int ans=1234567890;  \n    rep(i,0,16)  \n    if ((t>>i)&1)  \n    {     \n        ans=min(ans,afford[x][i]);  \n        x=parent[x][i];   \n    }     \n    return ans;  \n}  \nint lca(int x,int y)  \n{  \n    if (dep[x]<dep[y]) swap(x,y);  \n    int t=dep[x]-dep[y];  \n    rep(i,0,16)  \n    if (t&(1<<i)) x=parent[x][i];  \n    repu(i,15,0)  \n    if (parent[x][i]!=parent[y][i])  \n    {  \n        x=parent[x][i];  \n        y=parent[y][i];  \n    }  \n    if (x==y) return x;  \n    else return parent[x][0];  \n}  \nint main()  \n{  \n    scanf(\"%d%d\",&n,&m);  \n    rep(i,1,m)  \n    scanf(\"%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w);  \n    sort(edge+1,edge+m+1,cmp);  \n    cnt=0;  \n    ufsets();  \n    memset(head,0,sizeof(head));  \n    rep(i,1,m)  \n    {  \n        x=find(edge[i].u);  \n        y=find(edge[i].v);  \n        if (x!=y)  \n        {  \n            uni(x,y);  \n            addedge(x,y,edge[i].w);  \n        }  \n    }  \n    makemap();  \n    scanf(\"%d\",&q);  \n    rep(i,1,q)  \n    {  \n        scanf(\"%d%d\",&x,&y);  \n        if (find(x)!=find(y))  \n        {  \n            printf(\"-1\\n\");  \n            continue;  \n        }  \n        else  \n        {  \n            int anc=lca(x,y);  \n            printf(\"%d\\n\",min(getaff(x,anc),getaff(y,anc)));  \n        }  \n    }  \n    return 0;  \n}\n```",
        "postTime": 1474608122,
        "uid": 5263,
        "name": "DrCell_CellTech",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u6211\u8981\u51b7\u9759\u4e00\u4e0b\uff0c\u5199\u5b8c\u8fd9180+\u884c\u7684\u4ee3\u7801\u6211\u5df2\u7ecf\u6709\u70b9\u8ff7\u7cca\u4e86\u3002\n\n\u601d\u8def\u662f\u8d2a\u5fc3,\u9996\u5148\u6211\u4eec\u7528kruskal\u6c42\u51fa\u6240\u6709\u7684\u6700\u5927\u751f\u6210\u6811\uff0c\u5f97\u5230\u68ee\u6797\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u52a0\u5165\u7684\u8fb9\uff0c\u90fd\u52a0\u5165\u90bb\u63a5\u8868\u4e2d\u6784\u56fe\uff0c\u7136\u540e\u6211\u4eec\u7528dfs\u5c06\u56fe\u9884\u5904\u7406\u6210\u6811\uff0c\u5e76\u5c06\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u7136\u540e\u7528\u500d\u589e\u7684LCA\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u7247\u68ee\u6797\u5c31\u8f93\u51fa-1\uff0celse\u6211\u4eec\u6c42\u51faLCA\uff0c\u7136\u540e\u8f93\u51fa\u4e24\u70b9\u5230\u7956\u5148\u7684\u6700\u5c0fdis \u3002\u849f\u84bb\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u3002\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\n#define min(a,b) ((a)<(b) ? (a):(b))\nusing namespace std;\nconst int maxn=10000+16,maxm=50000+16;\nstruct data{int u,v,ww;};\nstruct way{int to,w;};\nint n,m,q,p[maxn],depth[maxn],parent[16][maxn],dis[16][maxn];\ndata edge[maxm];\nvector<way>G[maxn];\nbool vis[maxn];\nvoid read(int &n){\n    n=0;int f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    do{\n        n=n*10+ch-'0';\n        ch=getchar();\n    }while(ch>='0' && ch<='9');\n    n=n*f;\n    return;\n}\nvoid write(int n){\n    if(n<0){\n        putchar('-');\n        n=0-n;\n    }\n    if(n>=10) write(n/10);\n    putchar((n % 10)+'0');\n    return;\n}\ninline void writeln(){\n    putchar('\\n');\n    return;\n}\nbool comp(const data &x,const data &y){\n    return x.ww>y.ww;\n}\nint find(int x){\n    return x==p[x] ? x:p[x]=find(p[x]);\n}\nvoid add_edge(int u,int v,int w){\n    way e;\n    e.to=v;e.w=w;\n    G[u].push_back(e);\n    e.to=u;\n    G[v].push_back(e);\n    return;\n}\ninline void init(){\n    read(n);read(m);\n    for(int i=1;i<=m;i++){\n        read(edge[i].u);\n        read(edge[i].v);\n        read(edge[i].ww);\n    }\n    return;\n}\nvoid dfs(int u,int fa,int dep){\n    parent[0][u]=fa;\n    depth[u]=dep;\n    vis[u]=true;\n    for(int i=0;i<G[u].size();i++){\n        int v=G[u][i].to;\n        if((!vis[v]) && (v!=u)){\n            dfs(v,u,dep+1);\n        }\n    }\n    return;\n}\nint adjust(int u,int v){\n    for(int i=0;i<G[u].size();i++){\n        if(G[u][i].to==v) return G[u][i].w;\n    }\n}\nvoid prepare(){\n    memset(vis,0,sizeof(vis));\n    memset(parent,0,sizeof(parent));\n    int mark=0;\n    for(int i=1;i<=n;i++){\n        if(!vis[i]){\n            mark--;\n            dfs(i,mark,0);\n        }\n    }\n    for(int k=1;k<=16;k++){\n        for(int u=1;u<=n;u++){\n            if(parent[k-1][u]<0) parent[k][u]=parent[k-1][u];\n            else parent[k][u]=parent[k-1][parent[k-1][u]];\n        }\n    }\n    for(int i=1;i<=n;i++){\n        dis[0][i]=adjust(i,parent[0][i]);\n    }\n    for(int i=1;i<=16;i++){\n        for(int u=1;u<=n;u++){\n            if(parent[i-1][u]<0) continue;\n            dis[i][u]=min(dis[i-1][u],dis[i-1][parent[i-1][u]]);\n        }\n    }\n    return;\n}\nint lca(int u,int v){\n    if(depth[u]>depth[v]) swap(u,v);\n    for(int k=0;k<=16;k++){\n        if(((depth[v]-depth[u])>>k) & 1){\n            v=parent[k][v];\n        }\n    }\n    if(u==v) return u;\n    for(int k=15;k>=0;k--){\n        if(parent[k][u]!=parent[k][v]){\n            u=parent[k][u];\n            v=parent[k][v];\n        }\n    }\n    return parent[0][u];\n}\nint get_dis(int u,int v){\n    int t=depth[u]-depth[v];\n    int ans=1234567890;\n    for(int i=0;i<=16;i++){\n        if((t>>i) & 1){\n            ans=min(ans,dis[i][u]);\n            u=parent[i][u];\n        }\n    }\n    return ans;    \n}\nvoid solve(){\n    for(int i=1;i<=n;i++) p[i]=i;\n    sort(edge+1,edge+m+1,comp);\n    for(int i=1;i<=m;i++){\n        int u=edge[i].u;\n        int v=edge[i].v;\n        int x=find(u);\n        int y=find(v);\n        if(x!=y){\n            p[x]=y;\n            add_edge(u,v,edge[i].ww);\n        }\n    }\n    prepare();\n    read(q);\n    while(q--){\n        int u,v;\n        read(u);read(v);\n        if(find(u)!=find(v)){\n            write(-1);\n            writeln();\n            continue;\n        }\n        else{\n            int ancestor=lca(u,v);\n            int ans=min(get_dis(u,ancestor),get_dis(v,ancestor));\n            write(ans);\n            writeln();\n        }    \n    }\n    return;\n}\nint main(){\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1471161038,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u500d\u589elca+\u6700\u5927\u751f\u6210\u6811\n\n```cpp\nprogram transport;\nconst maxn=10000; maxm=200000;\n      jc:array[0..14] of longint=(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384);\ntype rec=record\n           f,t,d:longint;\n         end;\n     rec2=record\n            n,t,d:longint;\n          end;\nvar fa:array[1..maxn] of longint;\n    h,d:array[1..maxn] of longint;\n    w:array[1..2*maxm] of rec;\n    w2:array[0..2*maxn] of rec2;\n    f,mi:array[1..maxn,0..14] of longint;\n    v:array[1..maxn] of boolean;\n    n,m,q,i,x,y:longint;\nfunction min(a,b:longint):longint;  //\u6700\u5c0f\u503c\uff0c\u4e0d\u89e3\u91ca\nbegin\n  if a<b then exit(a);\n  exit(b);\nend;\nprocedure init;                           //\u8bfb\u5165\u5b58\u56fe\nvar i,t:longint;\n    x,y,z:longint;\nbegin\n  t:=0;\n  readln(n,m);\n  for i:=1 to m do\n  begin\n    readln(x,y,z);\n    inc(t); w[t].f:=x; w[t].t:=y; w[t].d:=z;\n    inc(t); w[t].f:=y; w[t].t:=x; w[t].d:=z;\n  end;\n  for i:=1 to n do\n   fa[i]:=i;\n  w2[0].n:=-1;\nend;\nprocedure qsort(l,r:longint);                   //kuscal\u7528\u5230\nvar i,j,mid:longint;\n    p:rec;\nbegin\n  i:=l; j:=r; mid:=w[(i+j) div 2].d;\n  repeat\n    while w[i].d>mid do inc(i);\n    while w[j].d<mid do dec(j);\n    if i<=j then\n    begin\n      p:=w[i]; w[i]:=w[j]; w[j]:=p;\n      inc(i); dec(j);\n    end;\n  until i>j;\n  if i<r then qsort(i,r);\n  if l<j then qsort(l,j);\nend;\nfunction find(x:longint):longint;      //\u5224\u73af\uff0c\u5e76\u67e5\u96c6+\u8def\u5f84\u538b\u7f29\nbegin\n  if fa[x]=x then exit(x);\n  fa[x]:=find(fa[x]);\n  exit(fa[x]);\nend;\nprocedure kuscal;                  //kuscal \u6c42\u6700\u5927\u751f\u6210\u6811\nvar i,j,t,f1,f2:longint;\nbegin\n  t:=0;\n  for i:=1 to m*2 do\n  begin\n    f1:=find(w[i].f);                     //\u5e76\u67e5\u96c6\u90e8\u5206\n    f2:=find(w[i].t);\n    if f1<>f2 then\n    begin\n      fa[f2]:=f1;                                                                                     //\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u5b58\u56fe\uff08\u6ce8\u610f\u53cc\u5411\uff09\n      inc(t); w2[t].n:=h[w[i].t]; h[w[i].t]:=t; w2[t].t:=w[i].f; w2[t].d:=w[i].d;\n      inc(t); w2[t].n:=h[w[i].f]; h[w[i].f]:=t; w2[t].t:=w[i].t; w2[t].d:=w[i].d;\n    end;\n  end;\nend;\nprocedure dfs(x:longint);                                                                     //\u6df1\u641c\uff0c\u9884\u5904\u7406\u6df1\u5ea6\uff0c\u7236\u4eb2\u8282\u70b9\nvar k:longint;\nbegin\n  k:=h[x];\n  while w2[k].n<>-1 do\n  begin\n    if w2[k].t<>f[x,0] then\n    begin\n     f[w2[k].t,0]:=x;\n     d[w2[k].t]:=d[x]+1;\n     mi[w2[k].t,0]:=w2[k].d;\n     v[w2[k].t]:=true;\n     dfs(w2[k].t);\n    end;\n    k:=w2[k].n;\n  end;\nend;\nprocedure pre;                                             //\u500d\u589e\u9884\u5904\u7406\uff0c\u5904\u7406\u8df32^i\u6b65\u6700\u5c0f\u503c\uff0c\u7236\u4eb2\u8282\u70b9\nvar i,j:longint;\nbegin\n  for j:=1 to 14 do\n   for i:=1 to n do\n   begin\n     if d[i]-jc[j]>=0 then\n     begin\n       mi[i,j]:=min(mi[i,j-1],mi[f[i,j-1],j-1]);\n       f[i,j]:=f[f[i,j-1],j-1];\n     end;\n   end;\nend;\nprocedure tiao(var x:longint; d:longint; var ans:longint);        //\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\nvar t:longint;\nbegin\n  t:=0;\n  while d>0 do\n  begin\n   if d and 1=1 then\n    begin\n     ans:=min(ans,mi[x,t]);\n     x:=f[x,t];\n    end;\n   d:=d>>1; inc(t);\n  end;\nend;\nfunction lca(x,y:longint):longint;         //LCA\u4e3b\u8981\u4ee3\u7801\nvar k,l,ans,j:longint;\nbegin\n  ans:=maxlongint;\n  k:=x; l:=y;\n  if d[x]<d[y] then tiao(l,abs(d[x]-d[y]),ans);\n  if d[x]>d[y] then tiao(k,abs(d[x]-d[y]),ans);\n  if k=l then exit(ans);\n  for j:=14 downto 0 do                       //\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981dwonto\u52300\uff01\uff01\uff01\n   if f[k,j]<>f[l,j] then\n    begin\n      ans:=min(ans,min(mi[k,j],mi[l,j]));\n      k:=f[k,j]; l:=f[l,j];\n    end;\n  ans:=min(ans,min(mi[k,0],mi[l,0]));\n  exit(ans);\nend;\nbegin\n  assign(input,'in.txt'); reset(input);\n  assign(output,'out.txt'); rewrite(output);\n  init;\n  qsort(1,2*m);\n  kuscal;\n  for i:=1 to n do if (not v[i]) and (h[i]<>0) then dfs(i);\n  pre;\n  readln(q);\n  for i:=1 to q do\n  begin\n   readln(x,y);\n   if find(x)<>find(y) then begin writeln(-1); continue; end;\n   writeln(lca(x,y));\n  end;\n  close(input);\n  close(output);\nend.\n\n```",
        "postTime": 1470452807,
        "uid": 9525,
        "name": "fengjunjie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "**\n\u65b9\u6cd5\u662f\uff1a\u5148\u6700\u5927\u751f\u6210\u6811\uff08\u56e0\u4e3a\u6709\u91cd\u8fb9\uff0c\u8981\u4fdd\u8bc1\u9009\u5927\u7684\u90a3\u4e00\u6761\uff09\n\n\u7136\u540e\u6811\u4e0a\u500d\u589e\u7ef4\u62a4\u6700\u5c0f\u503c\n\n\u5751\u70b9\uff1a\u6709\u7684\u70b9\u5728\u8fb9\u4e2d\u6ca1\u51fa\u73b0\uff0c\u800c\u5728\u8be2\u95ee\u4e2d\u51fa\u73b0\uff0c\u610f\u601d\u5c31\u662f\u6ca1\u6709\u4efb\u4f55\u4e00\u6761\u8fb9\u548c\u5b83\u76f8\u8fde\n\n\u5904\u7406\u4e0d\u5f53\u7684\u8bdd\u53ef\u80fd\u4f1a\u4f7f\u5e94\u8be5\u8f93\u51fa-1\u800c\u8f93\u51fa\u4e0d\u4e3a-1\n\n**\n```cpp\n\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100000+10;\nconst int maxm=500000+10;\nconst int INF=(1<<30);\nconst int POW=20; \nstruct Edge{\n    int u,v,w;\n    Edge(){}\n    Edge(int u,int v,int w):u(u),v(v),w(w){}\n    bool operator < (const Edge &rhs)const{\n        return w>rhs.w;\n    }\n}e[maxm*2];\n\nint n,m,ecnt=0;\nint first[maxn],p[maxn],mind[maxn][POW+1];\n\nvoid init_data()\n{\n    memset(mind,20,sizeof(mind));\n    memset(first,-1,sizeof(first));\n    cin>>n>>m;\n    for(int i=1,u,v,w;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        e[ecnt++]=Edge(u,v,w);\n    }\n    for(int i=1;i<=n;i++) p[i]=i;\n}\n\nint findset(int x){return p[x]==x?x:p[x]=findset(p[x]);}\n\nint next[maxm];\nvoid add_edge(Edge E)\n{\n    int u=E.u,v=E.v;\n    next[ecnt]=first[u];first[u]=ecnt;e[ecnt++]=E;\n    next[ecnt]=first[v];first[v]=ecnt;e[ecnt++]=Edge(v,u,E.w);\n}\n\nint is_root[maxn];\nint MST()\n{\n    memset(first,-1,sizeof(first));\n    \n    for(int i=1;i<=n;i++) is_root[i]=1;\n    sort(e+0,e+m);\n    for(int i=0;i<m;i++)\n    {\n        int u=e[i].u,v=e[i].v;\n        int pu=findset(u);\n        int pv=findset(v);\n        if(pu!=pv)\n        {\n            is_root[pu]=0;\n            is_root[pv]=1;\n            p[pu]=pv;add_edge(e[i]);\n        }\n    }\n    for(int i=1;i<=n;i++)\n      if(is_root[i])\n      {\n          add_edge(Edge(n+1,i,-1));\n      }\n    return n+1;\n}\n\nint anc[maxn][POW+1],dep[maxn];\nvoid dfs(int u,int fa,int deep,int w)\n{\n    anc[u][0]=fa;\n    dep[u]=deep;\n    mind[u][0]=w;\n    for(int i=1;(1<<i)+1<=deep;i++) \n    {\n        int k=anc[u][i-1];\n        anc[u][i]=anc[k][i-1];\n        mind[u][i]=min(mind[u][i-1],mind[k][i-1]);\n    }\n    for(int i=first[u];i!=-1;i=next[i])\n    {\n        if(e[i].v==fa) continue;\n        dfs(e[i].v,u,deep+1,e[i].w);\n    }\n    return ;\n}\n\nint LCA(int a,int b)\n{\n    int ret=INF;\n    if(dep[a]>dep[b]) swap(a,b);\n    if(dep[a]<dep[b])\n    {\n        int delta=dep[b]-dep[a];\n        for(int i=0;(1<<i)<=delta;i++)\n          if(delta & (1<<i))\n            ret=min(ret,mind[b][i]),b=anc[b][i];\n    }\n    if(a!=b)\n    {\n        for(int i=POW-1;i>=0;i--)\n          if(anc[b][i]!=anc[a][i])\n          {\n            ret=min(min(mind[b][i],mind[a][i]),ret);\n              b=anc[b][i],a=anc[a][i];\n          } \n        ret=min(min(mind[b][0],mind[a][0]),ret); \n        b=anc[b][0],a=anc[a][0];\n    }\n    if(a==n+1) return -1;\n    return ret;\n}\n\nint main()\n{\n    init_data();\n    dfs(MST(),-1,1,INF);\n    int Q,a,b;cin>>Q;\n    while(Q--)\n    {\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",LCA(a,b));\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1457327766,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5206\u4eab\u4e00\u4e2a\u666e\u53ca\u7ec4\u505a\u6cd5\u3002\n\n\u9996\u5148\u6784\u9020\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\u3002\u6211\u4eec\u7528kruskal+\u5e76\u67e5\u96c6\u628a\u8fd9\u68f5\u6811\u641e\u6210\u4e00\u4e2a\u6811\u5f62\u5e76\u67e5\u96c6\u7684\u5f62\u5f0f(\u4e0d\u8def\u5f84\u538b\u7f29\uff09,\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u5728\u8fd9\u68f5\u6811\u4e0a\u627e\u4e00\u4e2a\u4e24\u70b9\u8054\u901a\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u3002\u627e\u7684\u65f6\u5019\u4e71\u641c\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u6b63\u5e38\u7684\u5408\u5e76\u6709\u51e0\u7387\u4f7f\u6811\u7684\u9ad8\u5ea6\u8fbe\u5230n\u800c\u88ab\u5361\uff0c\u53ef\u4ee5\u6309\u79e9\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(qlogn)\n\n\u9644\u4ee3\u7801:\n\n```delphi\nprogram p1967;  \nvar w,s,t:array[1..50001] of longint;  \n    father,rank,dog,jdb:array[0..10001] of longint;  \n    tx,ty:array[1..30001] of longint;  \n    n,m,q,i,timer:longint;  \nfunction min(a,b:longint):longint;  \nbegin  \n    if a>b then exit(b) else exit(a);  \nend;  \nfunction find(x:longint):longint;  \nbegin  \n    while x<>father[x] do x:=father[x];  \n    exit(x);  \nend;  \nfunction judge(x,y:integer):boolean;  \n var fx,fy:integer;  \n  begin  \n     fx:=find(x);  \n     fy:=find(y);  \n     if fx=fy then exit(true) else judge:=false;  \n  \n     if rank[fx]>rank[fy] then  \n     begin  \n         father[fy]:=fx;dog[fy]:=w[i];  \n     end  \n     else  \n           begin  \n           father[fx] := fy;  \n           dog[fx]:=w[i];  \n           if rank[fx]=rank[fy] then inc(rank[fy]);  \n           end;  \n  end;  \nfunction check(x,y:longint):longint;  \nvar i,p:longint;  \n    flag:boolean;  \nbegin  \n    i:=y;  \n    flag:=false;  \n    p:=maxlongint;  \n    jdb[y]:=200000;  \n    while i<>father[i] do  \n    begin  \n        p:=min(p,dog[i]);  \n        jdb[father[i]]:=p;  \n        i:=father[i];  \n         \n    end;  \n    i:=x;  \n    p:=maxlongint;  \n    if jdb[x]<jdb[0] then begin flag:=true;p:=jdb[i];end  \n    else  \n    while i<>father[i] do  \n    begin  \n        p:=min(p,dog[i]);  \n        i:=father[i];  \n        \n        if jdb[i]<jdb[0] then  \n        begin flag:=true;p:=min(p,jdb[i]);break;end;  \n    end;  \n    i:=y;  \n    while i<>father[i] do  \n    begin  \n        jdb[father[i]]:=jdb[0];  \n        i:=father[i];  \n    end;  \n    jdb[y]:=jdb[0];  \n    if not flag then exit(-1) else exit(p);  \n  \nend;  \n  \nprocedure sort(l,r: longint);  \n      var  \n         i,j,x,y,m1,m2: longint;  \n      begin  \n         i:=l;  \n         j:=r;  \n         x:=w[(l+r) div 2];  \n         repeat  \n           while w[i]<x do  \n            inc(i);  \n           while x<w[j] do  \n            dec(j);  \n           if not(i>j) then  \n             begin  \n                y:=w[i];m1:=s[i];m2:=t[i];  \n                w[i]:=w[j];s[i]:=s[j];t[i]:=t[j];  \n                w[j]:=y;s[j]:=m1;t[j]:=m2;  \n                inc(i);  \n                j:=j-1;  \n             end;  \n         until i>j;  \n         if l<j then  \n           sort(l,j);  \n         if i<r then  \n           sort(i,r);  \n      end;  \nbegin  \n    fillchar(jdb,sizeof(jdb),11);  \n    read(n,m);  \n    for i:=1 to m do read(s[i],t[i],w[i]);  \n    read(q);  \n    for i:=1 to q do read(tx[i],ty[i]);  \n    sort(1,m);  \n    for i:=1 to n do  \n    begin  \n        rank[i]:=0;  \n        father[i]:=i;  \n        dog[i]:=0;  \n    end;  \n  \n    timer:=0;  \n    for i:=m downto 1 do  \n    begin  \n        if not judge(s[i],t[i]) then  \n        inc(timer);  \n        if timer>=n-1 then break;  \n    end;  \n      \n    for i:=1 to q do writeln(check(tx[i],ty[i]));  \nend.  \n```",
        "postTime": 1445645673,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# $ LCA $\u795e\u5947\u65b9\u6cd5\n### [\u8d27\u8f66\u8fd0\u8f93](https://www.luogu.org/problem/P1967)\n\u9898\u76ee\u610f\u601d\uff1a\u7ed9\u4e00\u5f20\u56fe\uff0c\u6bcf\u6b21\u95ee\u4e24\u4e2a\u70b9$ x , y $\uff0c\u6c42\u4ed6\u4fe9\u95f4\u6240\u6709\u8def\u5f84\u4e2d\u5728\u672c\u8def\u5f84\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u6700\u5927\u503c\uff08\u771f$ jb $\u7ed5\uff09\n### \u90a3\u6211\u4eec\u600e\u4e48\u505a\u5462\n\u4fdd\u8bc1\u4e00\u5f20\u56fe\u8054\u901a\uff0c\u90a3\u5c31\u60f3\u5230\u4e86\u6811\u3002\u6700\u5927\u503c\u5c31\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u4e86\u6700\u5927\u751f\u6210\u6811\u3002\n```cpp\n\tfor(int i=1;i<=m;i++)\n\t\tread(G[i].x),read(G[i].y),read(G[i].z);\n\tsort(G+1,G+m+1,cmp);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=get(G[i].x),y=get(G[i].y);\n\t\tif(x==y)continue;\n\t//\tprintf(\"%d %d %d\\n\",G[i].x,G[i].y,G[i].z);\n\t\tfa[x]=y;\n\t\tadd(G[i].x,G[i].y,G[i].z);\n\t\tadd(G[i].y,G[i].x,G[i].z);\n\t}\n```\n### \u6709\u4e86\u6811\uff0c\u7136\u540e\u5462\uff1f\n\u6811\u4e0a\u4e24\u70b9\u52a8\u6001\u8be2\u95ee\uff0c\u5c31\u53c8\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u4e86$ LCA $\uff08\u8fdb\u5165\u6b63\u9898\uff09\n\n------------\n$$\nf[i][j]=f[f[i][j-1]][j-1]\n$$\n$$\ng[i][j]=\\min(g[i][j-1],g[f[i][j-1][j-1])\n$$\n\n\n------------\n$f[i][j]$\u8868\u793a$i$\u8282\u70b9\u5411\u4e0a\u8df3$2^j$\u6b21\u5230\u7684\u8282\u70b9\uff0c$g[i][j]$\u8868\u793a$i$\u8282\u70b9\u5411\u4e0a\u8df3$2^j$\u6b21\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u3002\u5219$f[i][j]$\u5c31\u662f$f[i][j-1]$\u518d\u8df3$2^{j-1}$\u6b21\uff0c$g[i][j]$\u5c31\u662f$g[i][j-1]$\u4e0e$g[i$\u7684$2^{j-1}$\u6b21\u7956\u5148$][j-1]$\u7684\u6700\u5c0f\u503c\n### \u8fd9\u5c31\u505a\u5b8c\u4e86\uff01\uff01\uff01\n# \u8d34\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 50050\nusing namespace std;\ntemplate<class T>inline void read(T&__x){T __ans=0;char __ch=getchar();short __f=1;while(__ch<'0'||__ch>'9'){if(__ch=='-')__f=-1;__ch=getchar();}while(__ch>='0'&&__ch<='9'){__ans=(__ans<<1)+(__ans<<3)+(__ch^48);__ch=getchar();}__x=__ans*__f;}\nint n,m,Q,x,y,z,t;\nint head[maxn>>2],Next[maxn<<1],ver[maxn<<1],edge[maxn<<1],tot;\nint fa[maxn>>2],f[maxn][25],g[maxn][25];\nint dis[maxn];\nint q[maxn<<1],l,r;\nint get(int x)\n{\n\tif(x==fa[x])return x;\n\treturn fa[x]=get(fa[x]);\n}\nstruct point\n{\n\tint x,y,z;\n}G[maxn];\nbool cmp(point x,point y)\n{\n\treturn x.z>y.z;\n}\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y;Next[tot]=head[x];\n\thead[x]=tot;edge[tot]=z;\n}\nvoid bfs(int x)\n{\n\tl=1,r=0;q[++r]=x;\n\twhile(l<=r)\n\t{\n\t\tint x=q[l++];\n\t\tfor(int i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(dis[y])continue;\n\t\t\tdis[y]=dis[x]+1;\n\t\t\tf[y][0]=x;\n\t\t\tg[y][0]=edge[i];\n\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t{\n\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\t\tg[y][j]=min(g[y][j-1],g[f[y][j-1]][j-1]);\n\t\t\t}\n\t\t\tq[++r]=y;\n\t\t}\n\t}\n}\nint lca(int x,int y)\n{\n\tint ans=INT_MAX;\n\tif(dis[x]<dis[y])swap(x,y);\n\tfor(int i=t;i>=0;i--)\n\tif(dis[f[x][i]]>=dis[y])\n\t{\n\t\tans=min(ans,g[x][i]);\n\t\tx=f[x][i];\n\t}\n\tif(x==y)return ans;\n\tfor(int i=t;i>=0;i--)\n\tif(f[x][i]!=f[y][i])\n\t{\n\t\tans=min(ans,g[x][i]);\n\t\tans=min(ans,g[y][i]);\n\t\tx=f[x][i],y=f[y][i];\n\t}\n\t//printf(\"@%d\\n\",ans);\n\tans=min(ans,g[x][0]);\n\tans=min(ans,g[y][0]);\n\treturn ans;\n}\nint main()\n{\n\tfreopen(\"testdata.in\",\"r\",stdin);\n\tmemset(g,0x3f,sizeof g);\n\tread(n),read(m);\n\tt=ceil(log(n)/log(2));\n\tfor(int i=1;i<=m;i++)\n\t\tread(G[i].x),read(G[i].y),read(G[i].z);\n\tsort(G+1,G+m+1,cmp);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=get(G[i].x),y=get(G[i].y);\n\t\tif(x==y)continue;\n\t//\tprintf(\"%d %d %d\\n\",G[i].x,G[i].y,G[i].z);\n\t\tfa[x]=y;\n\t\tadd(G[i].x,G[i].y,G[i].z);\n\t\tadd(G[i].y,G[i].x,G[i].z);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(!dis[i])\n\t{\n\t\tdis[i]=1;\n\t\tbfs(i);\n\t}\n\tread(Q);\n\twhile(Q--)\n\t{\n\t\tread(x),read(y);\n\t\tif(get(x)!=get(y))\n\t\t{\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",lca(x,y));\n\t}\n}\n\n```\n",
        "postTime": 1570179629,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# \u5806\u4f18\u5316PRIM+LCA\u500d\u589e\n\u7528PRIM\u6784\u5efa\u6700\u5927\u751f\u6210\u6811\u7684\u540c\u65f6\u5b8c\u6210\u500d\u589e\u7684\u521d\u59cb\u5316,\u56e0\u4e3an\u503c\u8d85\u8fc71e3\u6240\u4ee5\u9700\u8981\u7528\u5806\u4f18\u5316\u7684PRIM\uff0c\u901a\u8fc7\u8bbf\u95ee\u5e8f\u6765\u5224\u65ad\u4e24\u67e5\u8be2\u70b9\u662f\u5426\u5728\u540c\u4e00\u751f\u6210\u6811\uff0c\u82e5\u4e0d\u5728\u8f93\u51fa-1\uff0c\u5426\u5219\u627e\u4e24\u70b9u,v\u7684\u516c\u5171\u6700\u8fd1\u7956\u5148\uff0c\u53d6\uff08u\u5230lca\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff09\u548c\uff08v\u5230lca\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff09\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u4e00\u5757\u6211\u76f4\u63a5\u6539\u7684\u677f\u5b50\uff0c\u56e0\u4e3a\u6c42LCA\u7684\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u4f1a\u904d\u5386u->lca\u548cv->lca\u7684\u5168\u90e8\u8def\u5f84\u3002\n\n~~\u4e00\u5f00\u59cbyy\u51fa\u6765\u4ee5\u4e3a\u662f\u9519\u7684,\u540e\u6765\u53d1\u73b0\u662fLCA\u677f\u5b50\u6539\u9519\u4e86~~,PRIM\u548cKRUSCAL\u4e00\u6837\u90fd\u80fd\u4fdd\u8bc1\u6700\u5c0f\u8fb9\u6700\u5927\u3002\n\u6700\u540e\u8d34\u4e00\u5757shi\u5757\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <algorithm>\n#define ms(x,y) memset(x,y,sizeof(x))\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int maxn =100005;//\u63d0\u4ea4\u8bb0\u5f97\u4fee\u6539\nconst int maxm = 1e6+5;\nconst int DEG =20;\nstruct Edge{\n\tint to,next;\n\tint w;\n}edge[maxm];\nstruct qnode{\n\tint u;\n\tint v;\n\tint w;\n\tqnode(int _u,int _v,int _w){u=_u;v=_v;w=_w;}\n\tbool operator<(const qnode &r)const\n\t{\n\t\treturn w<r.w;\n\t}\n};\nint head[maxn],tot;\nvoid addedge(int u,int v,int w)\n{\n\tedge[tot].to=v;\n\tedge[tot].w=w;\n\tedge[tot].next=head[u];\n\thead[u]=tot++;\n}\nvoid init()\n{\n\tms(head,-1);\n\ttot=0;\n}\nint fa[maxn][DEG];\nint deg[maxn];\nint vis[maxn];\nint ans[maxn][DEG];\nint getAns(int u,int v)\n{\n\tif(deg[u]>deg[v])swap(u,v);\n\tint hu=deg[u],hv=deg[v];\n\tint res=INF;\n\tint tu=u,tv=v;\n\tfor(int det=hv-hu,i=0;det;det>>=1,i++)\n\t\tif(det&1){res=min(res,ans[tv][i]);tv=fa[tv][i];}\n\tif(tu==tv)return res;\n\tfor(int i=DEG-1;i>=0;i--)\n\t{\n\t\tif(fa[tu][i]==fa[tv][i])\n\t\t\tcontinue;\n\t\tres=min(min(ans[tu][i],ans[tv][i]),res);\n\t\ttu=fa[tu][i];\n\t\ttv=fa[tv][i];\n\t}\n\tres=min(min(ans[tu][0],ans[tv][0]),res);\n\treturn res;\n}\nint main()\n{\n\t// freopen(\"in.txt\",\"r\",stdin);\n\t// freopen(\"out.txt\",\"w\",stdout);//\u63d0\u4ea4\u8bb0\u5f97\u6ce8\u91ca\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tinit();\n\twhile(m--)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\taddedge(u,v,w);\n\t\taddedge(v,u,w);\n\t}\n\tms(vis,0);\n\tpriority_queue<qnode>que;\n\tfor(int start=1;start<=n;start++)\n\t{\n\t\tif(vis[start])continue;\n\t\tque.push(qnode(0,start,0));\n\t\tfa[start][0]=start;\n\t\tdeg[start]=0;\n\t\twhile(!que.empty())\n\t\t{\n\t\t\tint u=que.top().v;\n\t\t\tif(vis[u]){que.pop();continue;}\n\t\t\tint pre=que.top().u;\n\t\t\tans[u][0]=((pre==0)?INF:que.top().w);\n\t\t\tque.pop();\n\t\t\tif(u!=start){deg[u]=deg[pre]+1;fa[u][0]=pre;}\n\t\t\tfor(int i=1;i<DEG;i++)\n\t\t\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t\t\tfor(int i=1;i<DEG;i++)\n\t\t\t\tans[u][i]=min(ans[u][i-1],ans[fa[u][i-1]][i-1]);\n\t\t\tvis[u]=start;\n\t\t\tfor(int i=head[u];i!=-1;i=edge[i].next)\n\t\t\t{\n\t\t\t\tint v=edge[i].to;\n\t\t\t\tint w=edge[i].w;\n\t\t\t\tif(!vis[v])que.push(qnode(u,v,w));\n\t\t\t}\n\t\t}\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tif(vis[u]!=vis[v])\n\t\t{\n\t\t\tcout<<-1<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse cout<<getAns(u,v)<<endl;\n\t}\n}\n```\n",
        "postTime": 1569491546,
        "uid": 65212,
        "name": "s15172528531",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011PRIM+LCA\u500d\u589e"
    },
    {
        "content": "#\u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u591a\u6e90\u6700\u77ed\u8def\uff0c\u4e5f\u5c31\u662fFloyd\u7684O\uff08n^3\uff09\u7684\u5927\u66b4\u529b\uff0c\u4f46\u662f\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c\u55ef\uff01\uff01\u6211\u60f3peach...  \n\n####\u6b63\u89e3\u5f53\u7136\u662f\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u8dd1LCA\u4e86  \n#####\u9996\u5148\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u662f\u6700\u5927\u751f\u6210\u6811\uff1a  \n\u6700\u4f18\u7684\u65b9\u6848\u4e00\u5b9a\u662f\u8d70\u6700\u5927\u7684\u4e00\u4e9b\u8fb9\uff0c\u5982\u679c\u4ece u -> v \u6709\u4e00\u6761\u6700\u5c0f\u6743\u503c\u4e3a 5 \u7684\u901a\u8def\u548c\u6700\u5c0f\u6743\u503c\u4e3a 3 \u7684\u901a\u8def\uff0c\u90a3\u4e48\u4e00\u5b9a\u9009\u62e9\u7684\u662f\u5927\u7684\u4e86\uff01\u6240\u4ee5\u90a3\u6761\u4e3a 3 \u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u55bd\uff08~ ^ ~\uff09\u3002  \n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u80fd\u591f\u7528\u5230\u7684\u8fb9\u6070\u597d\u5c31\u662f \u6700\u5927\u751f\u6210\u6811 \u91cc\u7684\u8fb9\u3002  \n~~\uff08\u5212\u91cd\u70b9\uff09~~   \n\u6240\u4ee5\uff0c\u7b2c\u4e00\u6b65\uff1a  \n\u8dd1\u4e00\u8fb9Kruskal\uff08\u5982\u679c\u4f60\u949f\u7231 Prim \u6211\u4e5f\u6ca1\u6709\u529e\u6cd5\uff0c\u53cd\u6b63\u6211\u662f K\u515a qwq\uff09\u3002  \n\u7136\u540e\u91cd\u65b0\u5efa\u8fb9\u56fe\uff08\u6216\u8005\u53ef\u4ee5\u6253\u4e0a\u6807\u8bb0\uff0c\u4f46\u662f\u90a3\u4e48\u5c31\u66f4\u52a0\u590d\u6742\u4e86\uff09\u53cd\u6b63\u4e0d\u4f1aMLE\u7684  \n\n\u5f97\u5230\u4e86\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u540e\u8be5\u600e\u4e48\u529e\u5462\uff1f  \n\u6211\u4eec\u9700\u8981\u5bfb\u627e\u4ece\u4e00\u68f5\u6811\u4e0a\u5bfb\u627e\n\n\n```\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n\n#define minn(a , b) a < b ? a :b\n//\u624b\u5199\u6700\u5c0f\u503c\n/*\n\u539f\u56e0\u662f\uff1a\n\u4f17\u6240\u5468\u77e5\uff0cSTL\u6162\u7684\u4e00\u6279 \n*/ \nusing namespace std ;\n\nconst int maxn = 10005 ;\nconst int inf = 1e9 + 7 ;\n\nstruct ctrl {\n\tint u , v , w ;\n\tinline bool friend operator < (ctrl c , ctrl v)\n\t//\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u4f7f\u6700\u521d\u59cb\u7684\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5217 \n\t{\n\t\treturn c.w > v.w ;\n\t}\n}edge[maxn * 5];\n//\u5b58\u8fb9\u7ed3\u6784\u4f53 \nstruct qwq{\n\tint to , next , dis ;\n}o[maxn * 10];\nint tot , first[maxn] ;\n//\u5b58\u50a8\u6700\u5927\u751f\u6210\u6811\u7684\u94fe\u5f0f\u524d\u5411\u661f\n\nint n , m , deep[maxn] , f[maxn];\n//n,m\u540c\u9898\u610f\uff0cdeep[]\u8868\u793a\u6df1\u5ea6 \uff0c f[]\u662f\u5e76\u67e5\u96c6\u6570\u7ec4 \nint fa[maxn][21] , w[maxn][21];\n//fa[i][j]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u7684\u7b2c2^j\u4e2a\u7236\u4eb2\uff0cw[i][j]\u8868\u793a\u5230\u76f8\u5e94\u7236\u4eb2\u7684\u6700\u5c0f\u6743\u503c\nbool judge[maxn] ;\n//\u5224\u65ad\u662f\u5426\u5230\u8fc7i\u70b9\n\ninline void add(int u , int v , int w);\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\nint find(int i);\n//\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6 \ninline void Kruskal() ;\n//\u6700\u5927\u751f\u6210\u6811\u677f\u5b50 \nvoid dfs(int x); \n//\u5efa\u6210\u68ee\u6797\ninline int lca(int x , int y);\n//\u6c42\u89e3x\u5230y\u5728\u6811\u4e0a\u7684\u8def\u5f84\u7684\u6700\u5c0f\u9650\u91cd \nint main()\n{\n\tscanf(\"%d%d\" , &n , &m);\n\tfor(int i = 1 ; i <= m ; ++ i)\n\t{\n\t\tint x , y , w ;\n\t\tscanf(\"%d%d%d\" , &x, &y ,&w);\n\t\tedge[i].u = x ;\n\t\tedge[i].v = y ;\n\t\tedge[i].w = w ;\n\t}\n\t//\u5b58\u50a8\u6240\u7ed9\u7684\u6574\u5f20\u56fe\n\tKruskal() ;\n\t//\u514b\u9c81\u65af\u5361\u5c14\u6700\u5927\u751f\u6210\u6811\u6a21\u677f\n\tfor(int i = 1 ; i <= n ; ++ i)\n\t\tif(!judge[i])\n\t\t//\u4e0d\u4e00\u5b9a\u662f\u4e00\u68f5\u6811\u53ef\u80fd\u662f\u4e00\u7247\u68ee\u6797 \n\t\t{\n\t\t\tdeep[i] = 1;\n\t\t\tdfs(i);\n\t\t\tfa[i][0] = i ;\n\t\t\t//\u5c06i\u7684\u7236\u4eb2\u8bbe\u4e3a\u81ea\u5df1\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u7206\u4e86\n\t\t\tw[i][0] = inf ;\n\t\t\t//\u5c06\u6839\u8282\u70b9\u5230\u81ea\u5df1\u7236\u4eb2\u7684\u8ddd\u79bb\u8bbe\u7f6e\u6210\u6b63\u65e0\u7a77 \n\t\t}\n\t//LCA\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u8fd8\u6709\u8ddd\u79bb\u7684\u521d\u59cb\u5316\n\tfor(int i = 1 ; i <= 20 ; ++ i)\n\t//\u5f00\u59cb\u6bcf\u4e2a2\u7684\u6b21\u65b9\u70b9 \n\t\tfor(int j = 1 ; j <= n ; ++ j)\n\t\t//\u8282\u70b9\u6570\n\t\t{\n\t\t\tfa[j][i] = fa[fa[j][i-1]][i-1] ;\n\t\t\tw[j][i] = minn(w[j][i-1] , w[fa[j][i-1]][i-1]);\n\t\t\t/*\n\t\t\tw\u7684\u521d\u59cb\u5316\u662f\u627e\n\t\t\t\u4ecei\u8282\u70b9\u5230i\u76842^(j-1)\u7684\u7956\u5148\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\n\t\t\t\u548c\n\t\t\t\u4ecei\u76842^(j-1)\u4e2a\u7956\u5148\u5230i\u76842^j\u4e2a\u7956\u5148\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\n\t\t\t*/ \n\t\t}\n\tint q;\n\tscanf(\"%d\" , &q);\n\tfor(int i = 1 ; i <= q ; ++ i)\n\t{\n\t\tint x , y ;\n\t\tscanf(\"%d%d\" , &x , &y);\n\t\t//\u56de\u590d\u8be2\u95ee \n\t\tprintf(\"%d\\n\" , lca(x,y));\n\t\t//lca()\u662f\u7528\u6c42\u89e3lca\u7684\u65b9\u6cd5\u6c42\u51fa\u751f\u6210\u6811\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u9650\u91cd \n\t}\n\treturn 0; \n}\ninline int lca(int x , int y)\n{\n\tint fu = find(x) ;\n\tint fv = find(y) ;\n\tif(fu != fv)\n\t\treturn -1 ;\n\t//\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u751f\u6210\u6811\u4e0a\uff0c\u5982\u679c\u4e24\u70b9\u6839\u672c\u4e0d\u8fde\u901a\u76f4\u63a5\u8f93\u51fa-1 \n\tint ans = inf ;\n\t//\u5c06\u8d77\u59cb\u503c\u8bbe\u7f6e\u6210inf\u56e0\u4e3a\u662f\u53bb\u6700\u5c0f\u503c \n\tif(deep[x] > deep[y])\n\t\tx ^= y ^= x ^= y ;\n\t\t/*\n\t\t\u76f8\u5f53\u4e8eswap(x,y);\n\t\t\u539f\u56e0\u8fd8\u662f\uff1aSTL\u6162\u7684\u4e00\u6279\uff08\u4f46\u662f\u8fd9\u4e2a\u5730\u65b9\u6211\u6d4b\u8bd5\u7684\u4f3c\u4e4e\u5dee\u4e0d\u591a\uff0c\u53ef\u80fd\u8fd9\u6837\u5199\u662f\u5fc3\u7406\u539f\u56e0\u5427\uff09 \n\t\t*/\n\tfor(int i = 20 ; i >= 0 ; -- i)\n\t\tif(deep[fa[y][i]] >= deep[x])\n\t\t{\n\t\t\tans = minn(ans , w[y][i]);\n\t\t\t//\u6bcf\u6b21\u5411\u4e0a\u66f4\u65b0\u7956\u5148\u65f6\u66f4\u65b0\u4e00\u4e0b\u6700\u5c0f\u7684\u9650\u91cd \n\t\t\ty = fa[y][i];\n\t\t}\n\t\t//\u5c06y\u7684\u4f4d\u7f6e\u4fee\u6539\u6210\u4e0ex\u7b49\u6df1\u5ea6 \n\tif(x == y)\n\t\treturn ans ;\n\t\t//\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u4e00\u6837\u4e86\uff0c\u5c31\u76f4\u63a5\u8f93\u51fa \n\tfor(int i = 20 ; i >= 0 ; -- i)\n\t//\u5bfb\u627eLCA \n\t\tif(fa[x][i] != fa[y][i])\n\t\t{\n\t\t\tans = minn(ans , minn(w[x][i] , w[y][i]));\n\t\t\tx = fa[x][i] ;\n\t\t\ty = fa[y][i] ;\n\t\t\t//\u4fee\u6539x\u4e0ey\u7684\u4f4d\u7f6e \n\t\t}\n\treturn minn (ans , minn(w[x][0] , w[y][0]));\n\t//\u6700\u540e\u4e0d\u8981\u76f4\u63a5\u8fd4\u56deans\uff0c\u8fd8\u8981\u66f4\u65b0\u5230x\u7684\u7236\u4eb2\u4e0ey\u7684\u7236\u4eb2\u4e4b\u95f4\u7684\u6700\u5c0f\u9650\u91cd \n}\nvoid dfs(int x)\n{\n\tjudge[x] = 1 ;\n\t//\u8bbf\u95ee\u8fc7\u8fd9\u4e2a\u8282\u70b9\n\tfor(int i = first[x] ; i ; i = o[i].next)\n\t{\n\t\tint v = o[i].to ;\n\t\tif(judge[v])\n\t\t\tcontinue ;\n\t\t\t//\u8bbf\u95ee\u8fc7\uff0c\u5c31\u662f\u5b83\u7684\u7236\u4eb2\uff0c\u8fd9\u4e2a\u662f\u4e0d\u80fd\u8dd1\u7684\n\t\tdeep[v] = deep[x] + 1 ;\n\t\t//\u66f4\u65b0\u513f\u5b50\u8282\u70b9 \n\t\t//\u662f\u7236\u4eb2\u6df1\u5ea6+1\n\t\tfa[v][0] = x ;\n\t\t//\u7ed9lca\u521d\u59cb\u5316\u505a\u521d\u59cb\u5316\uff0c\u5b58\u50a8\u7236\u8282\u70b9\n\t\tw[v][0] = o[i].dis ;\n\t\t//\u5b58\u50a8\u5230\u7236\u8282\u70b9\u7684\u8ddd\u79bb\uff1b \n\t\tdfs(v) ; \n\t}\n\treturn ; \n}\ninline void Kruskal()\n{\n\tsort(edge + 1 , edge + 1 + m);\n\t//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff08cmp\u5199\u5230\u4e86\u7ed3\u6784\u4f53\u91cc\uff09\n\tfor(int i = 1 ; i <= n ; ++i) f[i] = i ;\n\t//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tfor(int i = 1 ; i <= m ; ++ i)\n\t{\n\t\tint u = edge[i].u ;\n\t\tint v = edge[i].v ;\n\t\tint w = edge[i].w ;\n\t\tint fu = find(u) ;\n\t\tint fv = find(v) ;\n\t\tif(fu != fv)\n\t\t{\n\t\t\tf[fu] = fv;\n\t\t\t//\u4e0d\u80fd\u5199\u6210f[u] = v;\u76f8\u4fe1\u5927\u5bb6\u90fd\u77e5\u9053\u4e3a\u4ec0\u4e48 \n\t\t\tadd(u , v , w) ;\n\t\t\tadd(v , u , w);\n\t\t\t//\u53cc\u5411\u8fb9\u5b58\u8d2e\u6700\u5927\u751f\u6210\u6811\uff08\u6216\u8005\u751f\u6210\u68ee\u6797\uff09 \n\t\t}\n\t}\n\t//\u7ed3\u675f\u8fd4\u56de\u5c31\u597d\u4e86\n\treturn ; \n}\nint find(int i)\n{\n\treturn f[i] == i ? i : f[i] = find(f[i]) ;\n}\ninline void add(int u , int v , int w)\n{\n\to[++tot].to = v ;\n\to[tot].dis = w ;\n\to[tot].next = first[u] ;\n\tfirst[u] = tot ;\n}\n```\n",
        "postTime": 1568022548,
        "uid": 149537,
        "name": "Atlicd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "**\u6bcf\u9898\u611f\u53d7\uff1a**\n\n\u8fd9\u9053\u9898\u7684\u9898\u89e3\u8fd8\u86ee\u591a\u7684\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\n\n\u7ffb\u4e8680\u7bc7\u9898\u89e316\u9875\u53d1\u73b0\n\n\u5927\u90e8\u5206\u9898\u89e3\u90fd\u662f\u6bd4\u8f83\u91cd\u590d\u7684\uff0c\u5c31\u662f\u6700\u5927\u751f\u6210\u6811+lca\n\n\u4f46\u662f\u6709\u7684\u9898\u89e3\u4e2d\u4e5f\u6709\u8bf4\u5230\u4e86\u6b64\u9898\u6700\u4f18\u89e3\u662fkruskal\u91cd\u6784\u6811\n\n\u662f\u4e0d\u662f\u6700\u4f18\u89e3 \u7a9d\u4e0d\u77e5\u9053\u53cd\u6b63\u80fd\u8fc7\n\n**\u4f46\u662f\u6574\u657480\u7bc7\u9898\u89e3\u4e2d \u5c31\u53ea\u67091\u7bc7\u8fd8\u662f2\u7bc7\u5173\u4e8ekruskal\u91cd\u6784\u6811\u7684**\n\n\u6240\u4ee5\uff0c \u6211\u8fd8\u662f\u89c9\u5f97\u8865\u5145\u4e00\u4e0b\u6bd4\u8f83\u7684\u597d\n\n\u6bd5\u7adf\u8fd9\u4e2a\u5176\u5b9e\u86ee\u597d\u7528\u7684\n\n**\u6b63\u6587\uff1a**\n\n[\u9898\u76ee](https://www.luogu.org/problem/P1967) [\u535a\u5ba2\u98df\u7528](https://www.cnblogs.com/yanxiujie/p/11438055.html)\n\n\u5173\u4e8ekruskal\u91cd\u6784\u6811\n\n## \u5efa\u6811\u8fc7\u7a0b\uff1a\n\n\u6392\u597d\u5e8f\u540e\uff0c \u904d\u5386\uff0c \u82e5\u4e24\u6761\u8fb9u\uff0c v\u4e0d\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u5185\uff0c \u90a3\u4e48\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c \u8fd9\u4e2a\u8282\u70b9\u7684\u70b9\u6743\u5c31\u4ee3\u8868u\u5230v\u7684\u8fb9\u6743\uff0c \u540c\u65f6\u5c06\u8fd9\u4e09\u4e2a\u70b9\u90fd\u52a0\u5165\u540c\u4e00\u5e76\u67e5\u96c6\n\n\u9700\u8981\u6ce8\u610f\n\n\u6700\u540e\u5efa\u7acb\u51fa\u6765\u7684\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u4e5f\u5c31\u662f\u5e76\u4e0d\u662f\u6240\u6709\u7684\u70b9\u7684\u6839\u90fd\u662f\u76f8\u540c\u7684\n\n\u6b64\u65f6\n\n\u53ef\u4ee5\u7528\u4e00\u4e2avis\u6570\u7ec4\u6765\u786e\u4fdd\u6240\u6709\u7684\u70b9\u90fd\u88ab\u904d\u5386\u8fc7\u4e86\n\n _1.\u82e5\u6309\u7167\u8fb9\u6743\u7684\u5347\u5e8f\u6392\u5217_ \n \n \u90a3\u4e48\u6700\u540e\u53ef\u4ee5\u6c42\u5f97\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n\n\n\u56e0\u4e3a\u6700\u540e\u662f\u8981\u6c42\u6700\u5c0f\u503c\n\n\u6240\u4ee5\n\n\u5efa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\n\n\u6b64\u65f6\u6700\u5927\u7684\u8fb9\u6743\u5c31\u662f\u6240\u6709\u522b\u7684\u5efa\u6811\u65b9\u6cd5\u4e2d\u7684\u6700\u5c0f\u503c\n\n\u6240\u4ee5\uff0c \u964d\u5e8f\u53cd\u4e4b\n\n## \u5173\u4e8e\u4e3a\u4ec0\u4e48lca(u, v)\u662f\u7b54\u6848\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\n\n\u5982\u679c\u6211\u4eec\u5efa\u7684\u6811\u662f\u6700\u5c0f\u751f\u6210\u6811\n\n\u90a3\u4e48\n\n\u663e\u7136\u8fb9\u6743\u8d8a\u5927\u6df1\u5ea6\u8d8a\u6df1\n\n\u6211\u4eec\u662f\u60f3\u6309\u7740\u8fb9\u6743\u5c3d\u91cf\u5c0f\u7684\u8d70\n\nlca(u, v)\u662f\u539f\u56feu->v\u8282\u70b9\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\n\n\u6240\u4ee5\u5c31\u662f\u4ed6\u4e86\n\n## The Last\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int N = 500010;\nint n, m, sum, fa[N], cnt, size[N], top[N], dad[N], head[N], va[N], tot, q, deep[N], vis[N];\nstruct Edge {\n\tint from, to, w;\n} e[N];\nstruct Node {\n\tint nxt, to, w;\n} ee[N];\nvoid add(int x, int y) {\n\tee[++tot].nxt = head[x];\n\tee[tot].to = y;\n\thead[x] = tot;\n}\nbool cmp(Edge x, Edge y) {\n\treturn x.w > y.w;\n}\nint find(int x) {\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n}\nvoid dfs(int now) {\n\tdeep[now] = deep[dad[now]] + 1;\n\tsize[now] = 1;\n\tvis[now] = 1;\n\tfor(int i = head[now]; i; i = ee[i].nxt)\n\t\tif(ee[i].to != dad[now])\n\t\t\tdad[ee[i].to] = now, dfs(ee[i].to), size[now] += size[ee[i].to];\n}\nvoid dfs1(int now) {\n\tint k = 0;\n\tif(!top[now]) top[now] = now;\n\tfor(int i = head[now]; i; i = ee[i].nxt)\n\t\tif(ee[i].to != dad[now] && size[ee[i].to] > size[k])\n\t\t\tk = ee[i].to;\n\tif(k) top[k] = top[now], dfs1(k);\n\tfor(int i = head[now]; i; i = ee[i].nxt)\n\t\tif(ee[i].to != dad[now] && ee[i].to != k)\n\t\t\tdfs1(ee[i].to);\n}\nint lca(int x, int y) {\n\twhile(top[x] != top[y]) {\n\t\tif(deep[top[x]] < deep[top[y]]) swap(x, y);\n\t\tx = dad[top[x]];\n\t}\n\treturn deep[x] > deep[y] ? y : x;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++) fa[i] = i;\n\tcnt = n;\n\tfor(int i = 1; i <= m; i++)\n\t\tscanf(\"%d%d%d\", &e[i].from, &e[i].to, &e[i].w);\n\tsort(e + 1, e + 1 + m, cmp);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint fx = find(e[i].from), fy = find(e[i].to);\n\t\tif(fx != fy) {\n\t\t\tva[++cnt] = e[i].w;\n\t\t\tfa[fx] = fa[fy] = fa[cnt] = cnt;\n\t\t\tadd(fx, cnt);\n\t\t\tadd(cnt, fx);\n\t\t\tadd(fy, cnt);\n\t\t\tadd(cnt, fy);\n\t\t}\n\t}\n\tfor(int i = 1; i <= cnt; i++)\n\t\tif(!vis[i]) {\n\t\t\tint f = find(i);\n\t\t\tdfs(f), dfs1(f);\n\t\t}\n\tscanf(\"%d\", &q);\n\twhile(q--) {\n\t\tscanf(\"%d%d\", &n, &m);\n\t\tif(find(n) != find(m)) printf(\"-1\\n\");\n\t\telse printf(\"%d\\n\", va[lca(n, m)]);\n\t}\n\treturn 0;\n}\n```\n\u8fd9\u91cc\u8bf4\u4e00\u4e0b\uff0c \u6211\u7684\u6811\u94fe\u5256\u5206\u5199\u7684\u53ef\u80fd\u4e0d\u5982\u53e6\u4e00\u7bc7\u4f18\u79c0\n\n\u8fd8\u671b\u5927\u5bb6\u6d77\u6db5\n\n\u5982\u679c\u5927\u5bb6\u8fd8\u6ca1\u770b\u61c2\u7684\u8bdd\n\n[\u8fd9\u7bc7blog](https://blog.csdn.net/niiick/article/details/81952126)\u53ef\u80fd\u4f1a\u5bf9\u60a8\u6709\u5e2e\u52a9\n\n\u8c22\u8c22\u6536\u770b\uff0c \u795d\u8eab\u4f53\u5065\u5eb7\uff01",
        "postTime": 1567232918,
        "uid": 147646,
        "name": "lzpclxf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n**\u751f\u6210\u6811\uff08\u6700\u5927\uff09+ DFS + \u500d\u589eLCA**\n\n\u6574\u4f53\u601d\u8def\u5c31\u662f\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u627e\u4e00\u6761\u6700\u5c0f\u8fb9\uff0c\u5b9e\u73b0\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u8dd1\u500d\u589eLCA\u3002\n\n\u90a3\u4e48\u65e2\u7136\u8fd9\u4e48\u8bf4\uff0c\u6211\u4eec\u5c31\u8981\u5355\u72ec\u628a\u6700\u5927\u751f\u6210\u6811\u5efa\u597d\uff08\u9664\u53bb\u591a\u4f59\u8fb9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u9700\u8981\u5728Kruskal\u7684\u65f6\u5019\u76f4\u63a5\u5efa\u6811\uff0c\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\nvoid kruskal()\n{\n\tsort(edge + 1, edge + 1 + m, cmp);\n\tfor (int i = 1; i <= n; i ++ )\n\t{\n\t\tfa[i] = i;\n\t}\n\tfor (int i = 1; i <= m; i ++ )\n\t{\n\t\tint fx = find(edge[i].x);\n\t\tint fy = find(edge[i].y);\n\t\tif (fx != fy)\n\t\t{\n\t\t\tfa[fx] = fy;\n\t\t\tadd(edge[i].x, edge[i].y, edge[i].val);\n\t\t\tadd(edge[i].y, edge[i].x, edge[i].val);\n\t\t}\n\t}\n}\n```\n\n\u5728\u5efa\u597d\u6700\u5927\u751f\u6210\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u8981DFS\u505a\u51e0\u4e2a\u5904\u7406\uff1a\n\n1.\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff08LCA\uff09\n\n2.\u5904\u7406\u597d\u6bcf\u4e2a\u70b9\u7684\u4e0a1\u4e2a\u70b9\uff08LCA\uff09\n\n3.\u5904\u7406\u597d\u6bcf\u4e2a\u70b9\u5230\u5b83\u7684\u4e0a\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\uff08LCA\u8fb9\u6743\uff09\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\nvoid dfs(int x)\n{\n\tfor (int i = head[x]; i; i = nex[i])\n\t{\n\t\tint y = to[i];\n\t\tif (deep[y])\n\t\t\tcontinue ;\n\t\tdeep[y] = deep[x] + 1;\n\t\tf[y][0] = x;\n\t\tw[y][0] = val[i];\n\t\tdfs(y);\n\t}\n}\n```\n\n\u6700\u7ec8\u6c42\u7b54\u6848\u5c31\u662f\u4e00\u4e2a\u500d\u589eLCA\u7684\u677f\u5b50\uff0c\u8981\u6ce8\u610f\u5728\u6bcf\u4e00\u6b65\u5411\u4e0a\u500d\u589e\u7684\u65f6\u5019\u90fd\u8981\u8bb0\u5f55\u7b54\u6848\uff08\u6700\u5c0f\u8fb9\u8fb9\u6743\uff09\n\n`ans = min(ans, min(w[x][i], w[y][i]));`\n\n\u6700\u7ec8\u7684`ans`\u5c31\u662f\u5bf9\u4e8e\u8fd9\u4e00\u5bf9\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\nLCA\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint lca(int x, int y)\n{\n\tif (find(x) != find(y))\n\t\treturn -1;\n\tint ans = inf;\n\tif (deep[x] > deep[y])\n\t\tswap(x, y);\n\tfor (int i = 20; i >= 0; i -- )\n\t{\n\t\tif (deep[f[y][i]] >= deep[x])\n\t\t{\n\t\t\tans = min(ans, w[y][i]);\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\tif (x == y) return ans;\n\tfor (int i = 20; i >= 0; i -- )\n\t{\n\t\tif (f[x][i] != f[y][i])\n\t\t{\n\t\t\tans = min(ans, min(w[x][i], w[y][i]));\n\t\t\ty = f[y][i];\n\t\t\tx = f[x][i];\n\t\t}\n\t}\n\tans = min(ans, min(w[x][0], w[y][0]));\n\treturn ans;\n}\n```\n\n\n\n## AC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\n\nconst int MAXN = 10010;\nconst int MAXM = 50050;\n\nint n, m, q;\n\nint fa[MAXN], deep[MAXN], f[MAXN][21], w[MAXN][21];\n\nint tot, to[MAXM], val[MAXM], nex[MAXM], head[MAXN];\n\nstruct Edge{\n\tint x, y, val;\n} edge[MAXM];\n\nbool cmp(Edge a, Edge b)\n{\n\treturn a.val > b.val;\n}\n\nint find(int x)\n{\n\tif (fa[x] == x)\n\t\treturn x;\n\treturn fa[x] = find(fa[x]);\n}\n\nvoid add(int x, int y, int z)\n{\n\tto[ ++ tot] = y;\n\tval[tot] = z;\n\tnex[tot] = head[x];\n\thead[x] = tot;\n}\n\nvoid kruskal()\n{\n\tsort(edge + 1, edge + 1 + m, cmp);\n\tfor (int i = 1; i <= n; i ++ )\n\t{\n\t\tfa[i] = i;\n\t}\n\tfor (int i = 1; i <= m; i ++ )\n\t{\n\t\tint fx = find(edge[i].x);\n\t\tint fy = find(edge[i].y);\n\t\tif (fx != fy)\n\t\t{\n\t\t\tfa[fx] = fy;\n\t\t\tadd(edge[i].x, edge[i].y, edge[i].val);\n\t\t\tadd(edge[i].y, edge[i].x, edge[i].val);\n\t\t}\n\t}\n}\n\nvoid dfs(int x)\n{\n\tfor (int i = head[x]; i; i = nex[i])\n\t{\n\t\tint y = to[i];\n\t\tif (deep[y])\n\t\t\tcontinue ;\n\t\tdeep[y] = deep[x] + 1;\n\t\tf[y][0] = x;\n\t\tw[y][0] = val[i];\n\t\tdfs(y);\n\t}\n}\n\nint lca(int x, int y)\n{\n\tif (find(x) != find(y))\n\t\treturn -1;\n\tint ans = inf;\n\tif (deep[x] > deep[y])\n\t\tswap(x, y);\n\tfor (int i = 20; i >= 0; i -- )\n\t{\n\t\tif (deep[f[y][i]] >= deep[x])\n\t\t{\n\t\t\tans = min(ans, w[y][i]);\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\tif (x == y) return ans;\n\tfor (int i = 20; i >= 0; i -- )\n\t{\n\t\tif (f[x][i] != f[y][i])\n\t\t{\n\t\t\tans = min(ans, min(w[x][i], w[y][i]));\n\t\t\ty = f[y][i];\n\t\t\tx = f[x][i];\n\t\t}\n\t}\n\tans = min(ans, min(w[x][0], w[y][0]));\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; i ++ )\n\t{\n\t\tscanf(\"%d%d%d\", &edge[i].x, &edge[i].y, &edge[i].val);\n\t}\n\tkruskal();\n\tscanf(\"%d\", &q);\n\tfor (int i = 1; i <= n; i ++ )\n\t{\n\t\tif (!deep[i])\n\t\t{\n\t\t\tdeep[i] = 1;\n\t\t\tdfs(i);\n\t\t\tf[i][0] = i;\n\t\t\tw[i][0] = inf;\n\t\t}\n\t}\n\tfor (int i = 1; i <= 20; i ++ )\n\t{\n\t\tfor (int j = 1; j <= n; j ++ )\n\t\t{\n\t\t\tf[j][i] = f[f[j][i - 1]][i - 1];\n\t\t\tw[j][i] = min(w[j][i - 1],w[f[j][i - 1]][i - 1]);\n\t\t}\n\t}\n\tfor (int i = 1; i <= q; i ++ )\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tprintf(\"%d\\n\", lca(x, y));\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1567125833,
        "uid": 144702,
        "name": "littleseven",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "# NOIP2013 \u8d27\u8f66\u8fd0\u8f93\n\n$ made \\ by \\ Ameiyo $ \n\n---\n\n\u672c\u6765\u4e0d\u51c6\u5907\u6253\u9898\u89e3\u7684\uff0c\u7ed3\u679c\u67d0\u673a\u623f\u5de8\u4f6c\u8bf4\u6ca1\u6709\u6574\u4f53\u4e8c\u5206\u7684\u505a\u6cd5\uff0c\u90a3\u5c31\u6765\u6c34\u4e00\u53d1\u3002\n\n\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u4e0a\u9650\uff0c\u8f7d\u91cd\u91cf\u4e0d\u80fd\u8d85\u8fc7\u8def\u5f84\u4e0a\u6240\u6709\u7684\u4e0a\u9650\uff0c\u6240\u4ee5\u6700\u4f18\u7684\u60c5\u51b5\u5c31\u662f\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743\uff08\u4e0a\u9650\uff0c\u8fd9\u6837\u8bf4\u7740\u987a\u53e3\uff09\u3002\n\n\u800c\u9898\u76ee\u8981\u6c42\u4e24\u70b9\u95f4\u6700\u5927\u7684\u8f7d\u91cd\u91cf\uff0c\u5373 \u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6743 \u7684\u6700\u5927\u503c\u3002\n\n\u7ed9\u4eba\u4e00\u79cd\u4e8c\u5206\u7684\u611f\u89c9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e $ x $ \u548c $ y $ \u6765\u8bf4\uff0c\u6211\u4eec\u4e8c\u5206\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743 $ mid $ \uff0c\u5224\u65ad\u80fd\u4e0d\u80fd\u4ece $ x $ \u53ea\u7ecf\u8fc7\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e $ mid $ \u7684\u8fb9\u5230\u8fbe $ y $ \u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u6240\u6709\u7684\u8be2\u95ee\uff0c\u6bcf\u6b21\u66f4\u65b0 $ mid $ \u540e\u8981\u628a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u90fd\u904d\u5386\u4e00\u904d\uff08\u5224\u65ad\u662f\u5426\u8054\u901a\u6700\u4f18\u7684\u505a\u6cd5\u5e94\u8be5\u662f\u5e76\u67e5\u96c6\uff09\uff0c\u5728\u8be2\u95ee\u8fc7\u591a\u7684\u60c5\u51b5\u4e0b\u5e76\u5403\u4e0d\u6d88\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u6240\u6709\u7684\u8be2\u95ee\u6765\u8bf4\uff0c\u5f88\u591a\u8fb9\u90fd\u662f\u53ef\u4ee5\u5171\u7528\u7684\uff0c\u53ea\u8981\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u90fd\u5927\u4e8e\u7b49\u4e8e\u4ed6\u4eec\u7684 $ mid $ \u3002\u6240\u4ee5\u53ef\u4ee5\u8003\u8651 __\u6574\u4f53\u4e8c\u5206__ \u3002\n\n\u6574\u4f53\u4e8c\u5206\u662f\u4e00\u79cd\u79bb\u7ebf\u7b97\u6cd5\u3002\u4ed6\u628a\u5171\u7528\u7684\u4fe1\u606f\u5408\u5e76\u5230\u4e00\u8d77\u800c\u4e0d\u7528\u6bcf\u4e2a\u8be2\u95ee\u5206\u5f00\u5904\u7406\uff0c\u56e0\u6b64\u53ef\u4ee5\u8282\u7701\u5de8\u5927\u7684\u590d\u6742\u5ea6\u3002\n\n\u9996\u5148\u628a\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u6bcf\u6b21\u5904\u7406\u65f6\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167\u5404\u81ea\u5f53\u524d\u7684 $ mid $ \u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u904d\u5386\u8be2\u95ee\uff0c\u6bcf\u6b21\u904d\u5386\u65f6\u4fdd\u8bc1\u5f53\u524d\u5e76\u67e5\u96c6\u7684\u4fe1\u606f\u5bf9\u5e94\u7740\u5f53\u524d\u7684\u8be2\u95ee\uff0c\u5373\u6240\u6709\u52a0\u5165\u7684\u8fb9\u7684\u8fb9\u6743\u90fd\u5927\u4e8e\u7b49\u4e8e $ mid $ \u3002\u56e0\u4e3a $ mid $ \u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5df2\u7ecf\u52a0\u5165\u7684\u8fb9\u662f\u4e0d\u7528\u5220\u6389\u7684\u3002\u8fd9\u6837\u5bf9\u4e8e $ mid $ \u5c31\u80fd\u5224\u65ad $ x $ \u548c $ y $ \u662f\u5426\u8054\u901a\uff0c\u7ee7\u800c\u6539\u53d8 $ l , r $ \u4ee5\u53ca $ mid $ \uff0c\u4e3a\u4e8c\u5206\u4e0b\u4e00\u6b65\u8fdb\u884c\u505a\u51c6\u5907\u3002\n\n\u8fd9\u91cc\u53ea\u662f\u7b80\u7565\u7684\u8bb2\u4e00\u4e0b\uff0c\u6574\u4f53\u4e8c\u5206\u7684\u7ec3\u624b\u9898\u8fd8\u6709\u533a\u95f4\u7b2c $ k $ \u5927\u3002\n\n\u4ee3\u7801\u8981\u6ce8\u610f\u5982\u679c\u4e00\u4e2a\u8be2\u95ee\u4e0d\u80fd\u4e8c\u5206\u4e86\u5c31\u4e0d\u80fd\u7ee7\u7eed\u5904\u7406\uff0c\u8981\u8df3\u8fc7\u4ed6\u3002\n\n```cpp\n#define reg register\n#define ll long long\n#define rep(i, a, b) for (reg int i = (a), i##end = (b); i <= i##end; ++i)\n#define dep(i, a, b) for (reg int i = (a), i##end = (b); i >= i##end; --i)\nusing namespace std;\n\ntemplate <typename _typer> inline _typer read() {\n    _typer init = 0; int ch = getchar(), k = 0;\n    for ( ; !isdigit(ch); ch = getchar()) k = (ch == '-');\n    for ( ; isdigit(ch); ch = getchar())\n        init = (init << 3) + (init << 1) + (ch ^ 48);\n    return k ? -init : init;\n}\nconst ll N = 10005, INF = 100000;\nconst ll M = 50005, LogINF = 20;\n\n\nchar aaa;\n\n\nint n, m, q, Ans[M];\n\nstruct EDGE { // \u8fb9\n    int x, y, c;\n    inline bool operator < (const EDGE &__) const {\n        return c > __.c;\n    }\n} edge[M];\nstruct QUERY { // \u8be2\u95ee\n    int x, y, l, r, mid, res, id;\n    inline bool operator < (const QUERY &__) const {\n        return mid > __.mid;\n    }\n} Query[M];\nstruct UnionFindSet { // \u5e76\u67e5\u96c6\n    int fa[N];\n    void Init(int n) { rep (i, 1, n) fa[i] = i; }\n    int Find(int x) { return x == fa[x] ? x : fa[x] = Find(fa[x]); }\n    void Uni(int x, int y) {\n        x = Find(x), y = Find(y);\n        if (x != y) fa[x] = y;\n    }\n    bool Check(int x, int y) { return Find(x) == Find(y); }\n} UFS;\n\n\nvoid Work() {\n    sort(edge + 1, edge + m + 1);\n    rep (ks, 1, LogINF) {\n        UFS.Init(n);\n        sort(Query + 1, Query + q + 1);\n        int cur = 1;\n        rep (i, 1, q) if (Query[i].l <= Query[i].r) {\n            while (cur <= m && edge[cur].c >= Query[i].mid)\n                UFS.Uni(edge[cur].x, edge[cur].y), ++cur;\n            if (UFS.Check(Query[i].x, Query[i].y)) {\n                Query[i].l = Query[i].mid + 1;\n                Query[i].res = Query[i].mid;\n            } else {\n                Query[i].r = Query[i].mid - 1;\n            }\n            Query[i].mid = (Query[i].l + Query[i].r) >> 1;\n        }\n    }\n}\n\n\nchar bbb;\n\n\nint main() {\n    n = read<int>(), m = read<int>();\n    rep (i, 1, m) {\n        edge[i].x = read<int>(), edge[i].y = read<int>();\n        edge[i].c = read<int>();\n    }\n    rep (i, 1, q = read<int>()) {\n        Query[i].x = read<int>();\n        Query[i].y = read<int>();\n        Query[i].l = 0, Query[i].r = INF;\n        Query[i].mid = (Query[i].l + Query[i].r) >> 1;\n        Query[i].res = -1, Query[i].id = i;\n    }\n\n    Work();\n\n    rep (i, 1, q) Ans[Query[i].id] = Query[i].res;\n    rep (i, 1, q) printf(\"%d\\n\", Ans[i]);\n    return 0;\n}\n```\n\n---\n\n$ in \\ 2019.8.10 $ ",
        "postTime": 1565433602,
        "uid": 39947,
        "name": "Ameiyo",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5176\u5b9e\u6211\u662f\u505a\u4e86\u4e00\u9053\u9898\u76ee\uff0c\u7a81\u7136\u53d1\u73b0\u9898\u76ee\u4e0a\u5199\u7740\n\n**\u91cd\u9898\u8bf7\u505aP1967**\n\n\u6211\u5c31\u4e50\u5475\u5475\u5730\u6765\u4e86qwq\n\n---\n\n\u7ffb\u4e86\u51e0\u7bc7\u9898\u89e3\uff0c\u6ca1\u53d1\u73b0\u4e00\u6837\u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u8d21\u732e\u9898\u89e3\u6765\u4e86\n\n### \u601d\u8def\uff1aKruskal\u6700\u5927\u751f\u6210\u6811 + \u6309\u79e9\u5408\u5e76\n\n#### \u4ec0\u4e48\u662f\u6309\u79e9\u5408\u5e76\uff1f\n\u8fd9\u662f\u4e00\u79cd\u5e76\u67e5\u96c6\u4f18\u5316\uff0c\u6bcf\u4e00\u4e2a\u96c6\u5408\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u68f5\u6811\uff0c\u201c\u79e9\u201d\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u68f5\u6811\u7684\u9ad8\n\n\u6309\u79e9\u5408\u5e76\u5c31\u662f\u5408\u5e76\u65f6\uff0c\u603b\u662f\u5c06\u79e9\u5c0f\u7684\u6811\u5e76\u5230\u79e9\u5927\u7684\u6811\u4e0a\n\n\u67e5\u627e\u5747\u644a\u590d\u6742\u5ea6\uff1a$O(log N)$\n\n---\n\n#### \u4ee3\u7801&\u89e3\u8bfb\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nconst int N = 50005, M = 100005, INF = 1000000;\nint fa[N], rank[N], pre[N], vis[N];\n\nstruct Edge\n{\n\tint u, v, w;\n\tbool operator <(const Edge &x) const\n\t{\n\t\treturn w > x.w;\n\t}\n}e[M];\n\nint n, m;\n\nint min(int a, int b)\n{\n\treturn a < b ? a : b;\n}\n\nint get(int x)\n{\n\treturn fa[x] == x ? x : get(fa[x]);\n}\n\nvoid merge(int x, int y, int z)\n{\n\tx = get(x), y = get(y);\n\tif(x == y) return;\n\tif(rank[x] < rank[y])\n\t{\n\t\tfa[x] = y;\n\t\tpre[x] = z;\n\t}\n\telse\n\t{\n\t\tfa[y] = x;\n\t\tpre[y] = z;\n\t\tif(rank[x] == rank[y]) rank[x]++;\n\t}\n}\n\nint query(int x, int y)\n{\n\tif(get(x) != get(y)) return -1;//\u4e0d\u8fde\u901a\n\tint ans = INF, k;\n\tk = x;\n\twhile(1)\n\t{\n\t\tvis[k] = ans;\n\t\tif(fa[k] == k) break;\n\t\tans = min(ans, pre[k]);\n\t\tk = fa[k];\n\t}\n\tans = INF;\n\tk = y;\n\twhile(1)\n\t{\n\t\tif(vis[k] >= 0)\n\t\t{\n\t\t\tans = min(ans, vis[k]);\n\t\t\tbreak;\n\t\t}\n\t\tif(fa[k] == k) break;\n\t\tans = min(ans, pre[k]);\n\t\tk = fa[k];\n\t}\n\tk = x;\n\twhile(1)\n\t{\n\t\tvis[k] = -1;\n\t\tif(fa[k] == k) break;\n\t\tk = fa[k];\n\t}\n\treturn ans;\n}\n\nvoid init()\n{\n\tstd::sort(e, e+m);\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tfa[i] = i;\n\t\trank[i] = 0;\n\t\tvis[i] = -1;//vis\u521d\u503c\u8981<0 \n\t}\n\tfor(int i = 0; i < m; ++i)\n\t{\n\t\tmerge(e[i].u, e[i].v, e[i].w);\n\t}\n}\n\nint main(){\n\twhile(scanf(\"%d%d\", &n, &m) == 2)\n\t{\n\t\tfor(int i = 0; i < m; ++i)\n\t\t{\n\t\t\tscanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w);\n\t\t}\n\t\tinit();\n\t\tint q, s, t;\n\t\tscanf(\"%d\", &q);\n\t\tfor(int i = 0; i < q; ++i)\n\t\t{\n\t\t\tscanf(\"%d%d\", &s, &t);\n\t\t\tprintf(\"%d\\n\", query(s, t));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n#### \u53d8\u91cf\uff1a\n`pre[x]`\u8868\u793a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7531x\u7684\u7236\u8282\u70b9\u8d70\u5411x\u7684\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\n`vis[x]`\u8bb0\u5f55\u5728\u67d0\u4e00\u6b21\u8be2\u95ee\u4e2d\u6811\u4e0a\u4eces\u5230x\u7684\u8def\u5f84\u7684\u6700\u5927\u5371\u9669\u5ea6\uff0c\u540c\u65f6\u53ef\u4ee5\u5224\u65adx\u6709\u6ca1\u6709\u88ab\u8d70\u8fc7\n\n#### merge()\n\u8bfb\u5165\u8fb9\u7684\u6570\u636e\u540e\u5148\u6309\u5371\u9669\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u4fdd\u8bc1\u5148\u63d2\u5165\u7684\u8def\u5f84\u662f\u66f4\u4f18\u7684\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u73b0\u5728x\u548cy\u5728\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u8fde\u63a5x\u548cy\u6240\u5728\u96c6\u5408\u7684\u8fb9\u5c31\u4e0d\u5fc5\u52a0\u5165\n\n#### query()\n\u6ce8\u610f\u524d\u4e24\u4e2a`while()`\u53ea\u6709\u7b2c\u4e00\u4e2a\u6709vis\u503c\u7684\u6539\u53d8\n\nx\u5230y\uff0c\u53ef\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\n\n1. `lca(x, y) = y`\n\u8fd9\u79cd\u60c5\u51b5\u53ea\u9700x\u5411\u4e0a\u8d70\uff0c\u5c31\u80fd\u9047\u5230y\n\u90a3\u4e48\u7b2c\u4e8c\u4e2a`while()`\u4e2d\uff0c\u6709`vis[y] >= 0`\uff0c\u5219`ans = vis[y]`\u540e\u7acb\u5373\u9000\u51fa\n\n2. `lca(x, y) = x`\n\u8fd9\u79cd\u60c5\u51b5y\u5411\u4e0a\u9047\u5230x\uff0c\u53d1\u73b0`vis[x] = 0`\uff0c`ans`\u4e0d\u53d8\uff0c\u76f4\u63a5\u9000\u51fa\n\n3. `lca(x, y) != x && lca(x, y) != y`\uff08\u4e5f\u5c31\u662fx\uff0cy\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff09\n\u5728\u7b2c\u4e8c\u4e2a`while()`\u4e2d\uff0c\u8d70\u5230`lca(x, y)`\uff0c\u6709`vis[lca(x, y)] >= 0`\uff0c\u4e8e\u662f`ans = max(vis[lca(x, y)]\uff08x\u5230lca(x, y)\u7684\u6700\u5927\u5371\u9669\u5ea6\uff09, ans\uff08y\u5230lca(x, y)\u7684\u6700\u5927\u5371\u9669\u5ea6\uff09)`\n\n\u90a3\u4e48\u7b2c\u4e09\u4e2a`while()`\u662f\u5e72\u4ec0\u4e48\u7684\u5462\n\u5728\u7b2c\u4e00\u4e2a`while()`\u4e2d\uff0c\u4ecex\u5230\u6839\u7ecf\u8fc7\u7684\u8282\u70b9\u7684vis\u503c\u90fd\u6539\u53d8\u4e86\uff0c\u4f46\u8fd9\u53ea\u9002\u7528\u4e8e\u8d77\u70b9\u4e3ax\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u518d\u8d70\u4e00\u904d\u5c06vis\u6539\u56de\u6765\n",
        "postTime": 1565265134,
        "uid": 108821,
        "name": "Mintind",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5bb9\u6613\u53d1\u73b0\u6b64\u9898\u4e2d\u9700\u8981\u627e\u5230\u5c3d\u53ef\u80fd\u5927\u7684\u8fb9\u6765\u8d70\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u6c42\u4e00\u68f5\u6700\u5927\u751f\u6210\u6811\uff0c\u628a\u5fc5\u8981\u7684\u8fb9\u4fdd\u7559\u4e0b\u6765\u5c31\u884c\u4e86\u3002\n\n\u4e4b\u540e\u8981\u6c42\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\uff1f\n\n\u4f60\u53ef\u4ee5\u9009\u62e9\u500d\u589e\uff0c\u53ef\u4ee5\u9009\u62e9\u6811\u5256\uff0c\u4f46\u6211\u9009\u62e9\u62c9$LCT$\u7684\u677f\u5b50...\uff08\u6307\u9488\u8b66\u544a&\u5c01\u88c5\u8b66\u544a&STL\u753b\u98ce\u8b66\u544a\uff09\n\n\u4f3c\u4e4e\u7406\u8bba\u590d\u6742\u5ea6\u4f18\u79c0\u4f46\u5e38\u6570\u5de8\u5927\uff1f\uff1f\uff1f\uff081000+ms without O2\uff09\n\n\u6240\u4ee5\u7b80\u5355\u8bb2\u4e00\u4e0b\u505a\u6cd5\n\n$Kruskal$\u6c42\u6700\u5927\u751f\u6210\u6811\u7684\u65f6\u5019\u628a\u9009\u4e2d\u7684\u8fb9\u5728$LCT$\u4e0a\u8fde\u8d77\u6765\u5c31\u884c\u4e86\u3002\n\n\u7531\u4e8e$LCT$\u5b58\u7684\u662f\u70b9\u6743\uff0c\u800c\u6b64\u9898\u8981\u6c42\u8fb9\u6743\uff0c\u90a3\u4e48\u628a\u8fb9\u90fd\u5efa\u6210\u70b9\u5c31\u597d\u4e86\u3002\u3002\u3002\n\n\u7136\u540e\u539f\u56fe\u4e2d\u7684\u70b9\u6743\u8981\u8bbe\u4e3a\u65e0\u7a77\u5927\u4ee5\u9632\u5f71\u54cd\u7b54\u6848\u3002\u3002\u3002\n\n\u7531\u4e8e\u6211\u7684$LCT$\u9ad8\u5ea6\u5c01\u88c5\uff0c\u6240\u4ee5\u6bcf\u6b21\u62c9\u677f\u5b50\u53ea\u8981\u505a\u5f88\u5c0f\u7684\u6539\u52a8\u5373\u53ef\n\n~~\u6240\u4ee5\u8fd9\u4e2a\u9898\u89e3\u7684\u4eae\u70b9\u4e5f\u5728\u677f\u5b50\u5427~~\n\n\u7136\u800c\u6211\u7684\u677f\u5b50\u4e5f\u56e0\u6b64\u5f88\u957f\uff0c\u4e3a\u4e86\u9632\u6b62\u5f71\u54cd\u9605\u8bfb\u4f53\u9a8c\uff0c\u5148\u653e\u4e3b\u8981\u4ee3\u7801\u518d\u653e\u677f\u5b50\u3002\n\n\u7b97\u6cd5\u4e3b\u8981\u4ee3\u7801\uff0c\u6682\u65f6\u4e0d\u60f3\u5b66$LCT$\u7684\u770b\u8fd9\u4e00\u6bb5\u5c31\u884c\u4e86\u3002~~\u8fd8\u4e0d\u884c\u5c31\u5f53\u4f2a\u4ee3\u7801\u770b\u5427~~\n\n```cpp\ntemplate<typename Argument_type,typename Result_type>//\u677f\u5b50\u8981\u7528\u4eff\u51fd\u6570\u6765\u5b9e\u73b0\u8fd0\u7b97\n//\u8fd9\u4e2a\u5199\u6cd5STL\u4e5f\u9700\u8981\uff0c\u53e3\u4ee5\u5eb7\u5eb7\nclass Min\n{\n    public:\n        Result_type operator()(const Argument_type& x,const Argument_type& y)const\n        {\n            return std::min(x,y);\n        }\n};\n\ntemplate<typename T>\nvoid read(T& x)\n{\n    bool f=0;\n    x=0;\n    char c=std::getchar();\n    while(c<'0'||c>'9')f|=(c=='-'),c=getchar();\n    while(c>='0'&&c<='9')x=x*10+(c^48),c=getchar();\n}\n\ntemplate<typename T>\nvoid write(T x)\n{\n    if(x<0)putchar('-'),x=-x;\n    if(x>=10)write(x/10);\n    putchar(x%10^48);\n}\n\nconst int N=100005,M=500005;\n\nint n,m,fa[N];\nint find(int x)\n{\n    if(x==fa[x])return x;\n    return fa[x]=find(fa[x]);\n}\n\nstruct Edge\n{\n    int from,to,w;\n    bool operator<(const Edge& rhs)const\n    {\n        return w<rhs.w;\n    }\n};\nEdge E[M];\nbool cmp(const Edge& a,const Edge& b)\n{\n    return b<a;\n}\n\nlink_cut_tree<int,Min<int,int> > my_LCT;\nlink_cut_tree<int,Min<int,int> >::iterator iters[N];//\u8fed\u4ee3\u5668\u6307\u5411\u539f\u56fe\u4e2d\u7684\u70b9\u5728LCT\u4e2d\u7684\u5bf9\u5e94\u70b9\n\nvoid kruskal()\n{\n    std::sort(E,E+m,cmp);\n    for(int i=0;i<m;++i)\n    {\n        int u=E[i].from,v=E[i].to;\n        int fu=find(u),fv=find(v);\n        if(fu==fv)continue;\n        fa[fu]=fv;\n        link_cut_tree<int,Min<int,int> >::iterator it=my_LCT.make_node(E[i].w);\n        my_LCT.link(iters[u],it);\n        my_LCT.link(it,iters[v]);\n    }\n}\n\nint main()\n{\n    read(n);\n    read(m);\n    for(int i=1;i<=n;++i)\n    {\n        iters[i]=my_LCT.make_node(0x7fffffff);\n        fa[i]=i;\n    }\n    for(int i=0;i<m;++i)\n    {\n        read(E[i].from);\n        read(E[i].to);\n        read(E[i].w);\n    }\n    kruskal();\n    int q;\n    read(q);\n    while(q--)\n    {\n        int u,v;\n        read(u),read(v);\n        std::pair<bool,int> res=my_LCT.query(iters[u],iters[v]);//\u4e3a\u4e86\u5224\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\uff0c\u67e5\u8be2\u8fd4\u56de\u7684\u662fpair\uff0c\u7b2c\u4e00\u9879\u8868\u793a\u662f\u5426\u8fde\u901a\n        write(res.first?res.second:-1);\n        putchar('\\n');\n    }\n}\n```\n\n$LCT$\u677f\u5b50\uff0c\u96be\u6253\u4f46\u4fbf\u4e8e~~\u590d\u5236\u548c~~\u91cd\u7528\uff0c\u559c\u6b22\u62ff\u53bb\uff0c\u770b\u4e0d\u61c2\u7684\u8bdd\u6211\u535a\u5ba2\u91cc\u6709\u4e00\u7bc7\u4e13\u95e8\u8bb2$LCT$\u7684\u53ef\u4ee5\u5eb7\u5eb7\u3002\n\n~~\u5e73\u65f6\u505a\u9898\u7528\u7528\u7b97\u4e86\uff0c\u8003\u8bd5\u6253\u8fd9\u4e2a\u662f\u4f5c\u6b7b~~\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n\n//#define MEMPOOL //\u5185\u5b58\u6c60\u5f00\u5173\uff0c\u53bb\u6389\u6ce8\u91ca\u5c31\u53ef\u4ee5\u7528\u5185\u5b58\u6c60\uff0c\u4f46\u5b9e\u6d4b\u6548\u679c\u4e0d\u4f73\n\ntemplate<typename Value_type,typename Functor>\nclass LCT_splay\n{\n    public:\n        struct Node;\n        Node* __new_node(const Value_type&);\n#ifdef MEMPOOL\n    private:\n        Node mem_pool[1<<20];\n        int tot;\n#endif\n};\ntemplate<typename Value_type,typename Functor>\nstruct LCT_splay<Value_type,Functor>::Node:Functor\n{\n    Value_type val,sum;\n    Node* ftr;\n    Node* ch[2];\n//    Node*& lc;\n//    Node*& rc;\n    #define lc ch[0]//\u7701\u7a7a\u95f4\u5199\u6cd5\n    #define rc ch[1]\n    bool rev;\n\n    Node(const Value_type& v=Value_type()):\n        val(v),\n        sum(v),\n        ftr(NULL),\n//        lc(ch[0]),\n//        rc(ch[1]),\n        rev(0) {ch[0]=ch[1]=NULL;}\n\n    void reverse();\n    void push_down();\n    void push_all();\n    void maintain();\n    bool is_root();\n    void rotate();\n    void splay();\n};\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::reverse()\n{\n    rev^=1;\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::push_down()\n{\n    if(!rev)return;\n    rev=0;\n    Node* ptr=lc;\n    lc=rc;\n    rc=ptr;\n    if(lc!=NULL)lc->reverse();\n    if(rc!=NULL)rc->reverse();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::push_all()\n{\n    if(!is_root())this->ftr->push_all();\n    push_down();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::maintain()\n{\n    sum=val;\n    if(lc!=NULL)sum=Functor::operator()(lc->sum,sum);\n    if(rc!=NULL)sum=Functor::operator()(sum,rc->sum);\n}\n\ntemplate<typename Value_type,typename Functor>\nbool LCT_splay<Value_type,Functor>::Node::is_root()\n{\n    return ftr==NULL||(ftr->lc!=this&&ftr->rc!=this);\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::rotate()\n{\n    Node *nftr=ftr,*gftr=ftr->ftr;\n    bool is_rc=nftr->rc==this;\n    bool is_rf=gftr!=NULL?gftr->rc==nftr:0;\n    ftr=gftr;\n    if(!nftr->is_root())gftr->ch[is_rf]=this;\n    nftr->ch[is_rc]=this->ch[!is_rc];\n    if(this->ch[!is_rc]!=NULL)this->ch[!is_rc]->ftr=nftr;\n    nftr->ftr=this;\n    this->ch[!is_rc]=nftr;\n    nftr->maintain();\n    maintain();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid LCT_splay<Value_type,Functor>::Node::splay()\n{\n    push_all();\n    while(!is_root())\n    {\n        Node *nftr=ftr,*gftr=ftr->ftr;\n        if(nftr->is_root())rotate();\n        else\n        {\n            if((gftr->lc==nftr)^(nftr->lc==this))rotate();\n            else nftr->rotate();\n            rotate();\n        }\n    }\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nLCT_splay<Value_type,Functor>::Node* LCT_splay<Value_type,Functor>::__new_node(const Value_type& v)\n{\n#ifdef MEMPOOL\n    if(tot==1<<20)\n    {\n        fprintf(stderr,\"Error:No enough memory\\n\");\n        return NULL;\n    }\n    mem_pool[tot++].val=v;\n    return mem_pool+tot-1;\n#else\n    return new Node(v);\n#endif\n}\n\n\n\ntemplate<typename Value_type,typename Functor>\nclass link_cut_tree:public LCT_splay<Value_type,Functor>\n{\n    typedef typename LCT_splay<Value_type,Functor>::Node Node;\n    private:\n        void access(Node*);\n        void make_root(Node*);\n        Node* find_root(Node*);\n        bool split(Node*,Node*);\n    public:\n        struct iterator;\n        iterator make_node(const Value_type&);\n        bool link(const iterator&,const iterator&);\n        bool cut(const iterator&,const iterator&);\n        std::pair<bool,Value_type> query(iterator,iterator);\n        bool modify(iterator,const Value_type&);\n};\n\ntemplate<typename Value_type,typename Functor>\nstruct link_cut_tree<Value_type,Functor>::iterator\n{\n    private:\n        Node* ptr;\n        friend class link_cut_tree;\n    public:\n        Value_type operator*()const{return ptr->val;}\n        iterator(Node* p=NULL):ptr(p) {}\n        iterator(const iterator& iter):ptr(iter.ptr) {}\n};\n\ntemplate<typename Value_type,typename Functor>\nvoid link_cut_tree<Value_type,Functor>::access(Node* ptr)\n{\n    for(Node* nptr=NULL;ptr!=NULL;nptr=ptr,ptr=ptr->ftr)\n        {\n            ptr->splay();\n            ptr->rc=nptr;\n            ptr->maintain();\n        }\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid link_cut_tree<Value_type,Functor>::make_root(Node* ptr)\n{\n    access(ptr);\n    ptr->splay();\n    ptr->reverse();\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nlink_cut_tree<Value_type,Functor>::Node* link_cut_tree<Value_type,Functor>::find_root(Node* ptr)\n{\n    access(ptr);\n    ptr->splay();\n    while(ptr->lc!=NULL)ptr->push_down(),ptr=ptr->lc;\n    ptr->splay();\n    return ptr;\n}\n\ntemplate<typename Value_type,typename Functor>\nbool link_cut_tree<Value_type,Functor>::split(Node* sptr,Node* eptr)\n{\n    make_root(sptr);\n    if(find_root(eptr)!=sptr)return 0;\n    eptr->splay();\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nlink_cut_tree<Value_type,Functor>::iterator link_cut_tree<Value_type,Functor>::make_node(const Value_type& v)\n{\n    return iterator(LCT_splay<Value_type,Functor>::__new_node(v));\n}\n\ntemplate<typename Value_type,typename Functor>\nbool link_cut_tree<Value_type,Functor>::link(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    make_root(sptr);\n    if(find_root(eptr)==sptr)return 0;\n    sptr->ftr=eptr;\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\nbool link_cut_tree<Value_type,Functor>::cut(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    make_root(sptr);\n    if(find_root(eptr)!=sptr||eptr->ftr!=sptr||eptr->lc!=NULL)return 0;\n    eptr->ftr=NULL;\n    sptr->lc=NULL;\n    sptr->maintain();\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\nstd::pair<bool,Value_type> link_cut_tree<Value_type,Functor>::query(iterator siter,iterator eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    if(!split(sptr,eptr))return std::make_pair(0,Value_type());\n    return std::make_pair(1,eptr->sum);\n}\n\ntemplate<typename Value_type,typename Functor>\nbool link_cut_tree<Value_type,Functor>::modify(iterator iter,const Value_type& v)\n{\n    Node* ptr=iter.ptr;\n    if(ptr==NULL)return 0;\n    ptr->splay();\n    ptr->val=v;\n    ptr->maintain();\n    return 1;\n}\n#undef lc\n#undef rc\n```\n\n\u5f00\u59cb\u7528\u4e86\u81ea\u5df1\u8003\u573a\u4e0a\u6253\u7684$LCT$\u7ed3\u679c\u5404\u79cd$WA$\u548c$RE$\uff0c\u6700\u540e\u8fd8\u662f\u61d2\u764c\u53d1\u4f5c\u62d6\u4e86\u677f\u5b50\u3002\u3002\u3002\n\n~~\u6700\u540e\u8981\u8bf4\u51e0\u53e5\uff1a~~\n\n~~LCT\u5927\u6cd5\u597d\uff01~~\n\n~~\u6307\u9488\u5927\u6cd5\u597d\uff01~~\n\n~~\u5c01\u88c5\u5927\u6cd5\u597d\uff01~~\n\nend.",
        "postTime": 1563264953,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8003\u70b9\u5c31\u662f \u6700\u5927\u751f\u6210\u6811+\u6700\u8fd1\u516c\u5171\u7956\u5148\n\n\u5177\u4f53\u65b9\u6cd5\u5176\u4ed6DaLao\u90fd\u8bb2\u4e86\uff0c\u6211\u5c31\u4e0d\u5728\u8fc7\u591a\u53d9\u8ff0\n\n\u8fd9\u91cc\u5c55\u793a\u4e00\u4e0b\u6211\u5199\u7684\u4ee3\u7801\uff08\u6ce8\u91ca\u5df2\u7ecf\u6807\u4e0a\u4e86\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <ctime>\n#include <climits>\n#include <set>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int MAXN=100000+10;\nconst int MAXM=500000+10;\nstruct road {//\u751f\u6210\u6700\u5927\u6811\u6240\u7528\n\tint PlaceA;\n\tint PlaceB;\n\tint Distance;\n\troad(int x=0,int y=0,int z=0):PlaceA(x),PlaceB(y),Distance(z) {}\n\tbool operator<(const road&rhs)const {\n\t\treturn Distance>rhs.Distance;\n\t}\n};\nstruct edge {\n\tint to;\n\tint cost;\n\tedge(int x=0,int y=0):to(x),cost(y) {}\n};\n/*-----------------------*/\nvoid MakeMaxTree();\nint fa[MAXN];//\u5e76\u67e5\u96c6\u7528\u7684\nint getf(int);\nroad roads[MAXM];\n/*-----------------------*/\nvector<edge> G[MAXN];\nint n,m,q;\nint logN;\nint d[MAXN],f[MAXN][30],w[MAXN][30];//2^30\u8db3\u591f\u5927\n//d[i] \u4e3ai\u53f7\u70b9\u7684\u6df1\u5ea6\n//f[i][j] \u4e3ai\u53f7\u70b9\u5411\u4e0a\u8df3\u8dc32^j\u6b65\u5230\u8fbe\u7684\u70b9\n//w[i][j] \u4e3ai\u53f7\u70b9\u5411\u4e0a\u8df3\u8dc32^j\u6b65\u5230\u8fbe\u7684\u70b9 \u6240\u7ecf\u8fc7\u8def\u7a0b\u4e2d\u6700\u5c0f\u7684\u8f7d\u91cd\nint LCA(int,int);//\u5728\u7ebf\u6c42\u89e3\nvoid PreProcess();//\u9884\u5904\u7406\nvoid fread(int& X);//\u5feb\u901f\u8bfb\u5165\nvoid Debug();//\u8c03\u8bd5\u8f93\u51fa\n/*-----------------------*/\nint main() {\n\tMakeMaxTree();\n\tPreProcess();\n//\tDebug();\n\tcin>>q;\n\twhile(q--) {\n\t\tint x,y;\n\t\tfread(x);\n\t\tfread(y);\n\t\tprintf(\"%d\\n\",LCA(x,y));\n\t}\n\treturn 0;\n}\nint LCA(int x,int y) {\n\tif(getf(x)!=getf(y)) return -1;//\u4e0d\u5728\u540c\u4e00\u68f5\u6811\uff0c\u8fd4\u56de-1\n\tint ans=INT_MAX;//\u5148\u628aans\u521d\u59cb\u5316\u6700\u5927\n\tif(d[x]>d[y]) swap(x,y);\n\tfor(int i=logN; i>=0; --i)\n\t\tif(d[f[y][i]]>=d[x]) {\n\t\t\tans=min(ans,w[y][i]);//\u8bb0\u4f4f\u662f\u5148\u8bb0\u5f55\u6700\u5c0f\u503c\u518d\u201c\u8df3\u8dc3\u201d\n\t\t\ty=f[y][i];//\u8df3\u8dc3~\n\t\t}\n\tif(x==y) {//\u8fd9\u4e2a\u65e0\u9700\u5927\u591a\u89e3\u91ca\n\t\treturn ans;\n\t}\n\tfor(int i=logN; i>=0; --i)\n\t\tif(f[x][i]!=f[y][i]) {\n\t\t\tans=min(ans,w[y][i]);\n\t\t\tans=min(ans,w[x][i]);//\u5148\u8bb0\u5f55\u518d\u8df3\u8dc3\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\tans=min(ans,w[y][0]);//\u6700\u540e\u522b\u5fd8\u4e86\uff0c\u8fd9\u65f6\u5019\u8fd8\u9700\u8981\u518d\u8df3\u8dc3\u4e00\u6b65\n\tans=min(ans,w[x][0]);//\u624d\u80fd\u5230\u8fbe\u516c\u5171\u7956\u5148\n\treturn ans;\n}\nvoid MakeMaxTree() {//\u751f\u6210\u6700\u5927\u6811\n\tcin>>n>>m;\n\tfor(int i=1; i<=n; ++i)\n\t\tfa[i]=i;\n\tfor(int i=0; i<m; ++i) {\n\t\tint x,y,z;\n\t\tfread(x);\n\t\tfread(y);\n\t\tfread(z);\n\t\troads[i].PlaceA=x;\n\t\troads[i].PlaceB=y;\n\t\troads[i].Distance=z;\n\t}\n\tsort(roads,roads+m);\n\tfor(int i=0; i<m; ++i) {\n\t\tint x=getf(roads[i].PlaceA),y=getf(roads[i].PlaceB);\n\t\tif(x!=y) {\n\t\t\tfa[x]=y;\n\t\t\tG[roads[i].PlaceA].push_back(edge(roads[i].PlaceB,roads[i].Distance));\n\t\t\tG[roads[i].PlaceB].push_back(edge(roads[i].PlaceA,roads[i].Distance));\n\t\t}\n\t}\n}\nint getf(int x) {//\u5e76\u67e5\u96c6\u6240\u7528\n\tif(fa[x]==x) return x;\n\treturn fa[x]=getf(fa[x]);\n}\nvoid PreProcess() {//\u9884\u5904\u7406\u6240\u6709f[i][j] \u53caw[i][j]\n\tlogN=int(log(n)/log(2)+1.0);\n\tmemset(d,0,sizeof(d));\n\tfor(int i=1; i<=n; ++i) {\n\t\t//\u6bcf\u4e2a\u6811\u7684\u6839\u4e00\u5b9a\u662f\u8fd9\u4e2a\u6811\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\n\t\t//\u626b\u63cf\u6240\u6709\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u5c1a\u672a\u88ab\u6807\u8bb0\uff0c\u5219\u4ee5\u8be5\u70b9\u4f4d\u6839\uff0c\u751f\u6210\u6811\n        //d[i] \u5373\u4e3ai\u53f7\u70b9\u7684\u6df1\u5ea6\uff0c\u521d\u59cb\u4e3a0\n\t\tif(d[i]) continue;\n\t\tqueue<int> q;\n\t\tq.push(i);\n\t\td[i]=1;\n\t\twhile(!q.empty()) {\n\t\t\tint& x=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=0; i<G[x].size(); ++i) {\n\t\t\t\tconst edge &e=G[x][i];\n\t\t\t\tconst int&y=e.to;\n\t\t\t\tif(d[y]) continue;\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tf[y][0]=x;\n\t\t\t\tw[y][0]=e.cost;\n\t\t\t\tfor(int j=1; j<=logN; ++j) {\n\t\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\t\t\t//\u8fd9\u4e2a\u5e94\u8be5\u90fd\u5b66\u8fc7\n\t\t\t\t}\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1; i<=logN; i++)\n\t\tfor(int j=1; j<=n; j++) {\n\t\t\tw[j][i]=min(w[j][i-1], w[f[j][i-1]][i-1]);\n\t\t\t//\u6bcf\u4e2a\u6811\u7684\u6839\u4e00\u5b9a\u662f\u8fd9\u4e2a\u6811\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\n\t\t\t//i\u53f7\u70b9\u8df32^j\u6b65 \u8def\u7ecf\u6700\u5c0f\u8f7d\u91cd\u662f\u8df32^(j-1)\u6b65\u7684\u6700\u5c0f\u8f7d\u91cd\n\t\t\t//\u4e0e\u8df3\u4e862^(j-1)\u6b65\u540e\u518d\u8df32^(j-1)\u6b65\u7684\u6700\u5c0f\u8f7d\u91cd\n\t\t}//\u6700\u540e\u9884\u5904\u7406\u4e00\u6ce2w[i][j]\n}\nvoid fread(int& X) {\n\tint F=1;\n\tX=0;\n\tchar S=getchar();\n\twhile (S<'0'||S>'9') {\n\t\tif(S=='-') {\n\t\t\tF=(~F)+1;\n\t\t}\n\t\tS=getchar();\n\t}\n\twhile (S>='0'&&S<='9') {\n\t\tX=(X<<3)+(X<<1)+S-48;\n\t\tS=getchar();\n\t}\n\tX*=F;\n}\nvoid Debug() {\n\tcout<<\"Tree roads\"<<endl;//\u8f93\u51fa\u751f\u6210\u7684\u6811\u7684\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\n\tfor(int i=1; i<=n; ++i) {\n\t\tcout<<i<<\" :\";\n\t\tfor(int j=0; j<G[i].size(); ++j) cout<<G[i][j].to<<\" \";\n\t\tcout<<endl;\n\t}\n\tcout<<\"F[i][j] List\"<<endl;//j\u4e3a\u5411\u4e0a\u8df3\u51e0\u6b65 \u4e0d\u662f2\u7684\u51e0\u6b21\u65b9\u6b65\n\tfor(int i=1; i<=n; ++i) {\n\t\tfor(int j=0; j<=logN; ++j) printf(\"F[%d][%d]=%d\\n\",i,int(pow(2,j)),f[i][j]);\n\t\tcout<<endl;\n\t}\n\tcout<<\"W[i][j] List\"<<endl;//j\u4e3a\u5411\u4e0a\u8df3\u51e0\u6b65 \u4e0d\u662f2\u7684\u51e0\u6b21\u65b9\u6b65\n\tfor(int i=1; i<=n; ++i) {\n\t\tfor(int j=0; j<=logN; ++j) printf(\"W[%d][%d]=%d\\n\",i,int(pow(2,j)),w[i][j]);\n\t\tcout<<endl;\n\t}\n\tcout<<\"Debug End~\"<<endl;\n}\n```\n",
        "postTime": 1558182349,
        "uid": 183645,
        "name": "\u65b9\u7a0b_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u4e2a[\u975e\u5e38\u7b80\u6d01\u7684\u9898\u76ee](https://blog.csdn.net/zsyzClb/article/details/86644193)\n\n\u770b\u5230\u8fd9\u6837\u7684\u9898\uff0c\u5982\u679c\u4e0d\u662f\u77e5\u9053\u542c\u8bf4\u7528\u6811\u5256\u6765\u505a\uff0c\u6211\u8fd8\u771f\u7684\u8981\u60f3\u5f88\u4e45\n\n\u56e0\u4e3a\u8fd9\u4e00\u9898\u6c42\u7684\u662f\u6700\u5c0f\u503c\u5c3d\u91cf\u5927\uff0c\u6240\u4ee5\u8fd8\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u4e8c\u5206\u6216\u8005\u751f\u6210\u6811\u7684\n\n\u4f46\u662f\u56e0\u4e3a\u6709q\u4e2a\u8be2\u95ee\uff0c\u4e8c\u5206\u660e\u663e\u662f\u4e0d\u884c\u7684\uff08\u4f60\u600e\u4e48\u5224\u5b9a\u8fd9\u4e2a\u503c\u662f\u5426\u53ef\u4ee5\uff09\n\n\u6240\u4ee5\u5c31\u53ea\u80fd\u7528\u751f\u6210\u6811\u4e86\n\n\u9996\u5148\u80af\u5b9a\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u8981\u8ba9\u8fb9\u5c3d\u91cf\u5927\uff0c\u800c\u4e14\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff08\u65e2\u7136\u6811\u4e0a\u53ef\u4ee5\u8fd9\u6837\u8d70\uff0c\u90a3\u56fe\u4e0a\u9762\u4e5f\u80af\u5b9a\u53ef\u4ee5\u8fd9\u6837\u8d70\uff09\n\n\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u8054\u901a\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e2aroot\uff0c\u628a\u751f\u6210\u6811\u4ee5\u540e\u6bcf\u4e00\u68f5\u6811\u8fde\u5728\u4e00\u8d77\u6765\u67e5\u8be2\n\n\u8bb0\u5f97\u8fde\u5411\u6839\u8282\u70b9\u7684\u8fb9\u6743\u503c\u4e3a\u6b63\u65e0\u7a77\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u662f\u9759\u6001\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7528lca\uff08\u5e38\u6570\u6bd4\u6811\u5256\u5c0f\uff09\u6765\u67e5\u8be2\n\n\u53c2\u8003\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n \nusing namespace std ;\n \ninline int read() {\n    int x = 0 ; char s = getchar() ;\n    while ( !isdigit(s) ) s = getchar() ;\n    while (  isdigit(s) ) x = (x<<1) + (x<<3) + (s-48) , s = getchar() ;\n    return x ;\n}\n \nconst int N = 1e4 + 20 ;\nconst int M = 5e4 + 20 ;\nconst int root = 1e4 + 2 ;\n \nstruct edge {\n\tint v , w , nxt ;\n}e[N<<1] ; int tot , last[N] ;\ninline void add ( int u , int v , int w ) {\n\te[++tot] = (edge){ v , w , last[u] } ;\n\tlast[u] = tot ;\n\te[++tot] = (edge){ u , w , last[v] } ;\n\tlast[v] = tot ;\n}\n \nstruct node {\n\tint x , y , c ;\n}a[M] ; \ninline bool cmp ( node n1 , node n2 ) {\n\treturn n1.c > n2.c ;\n}\n \nint fa[N] ;\ninline int findfa ( int x ) {\n\tif ( fa[x] == x ) return x ;\n\treturn fa[x] = findfa ( fa[x] ) ;\n}\nint n , m , q ;\n \nint st[N][21] , b[N][21] , dep[N] ;\n \nvoid dfs ( int u , int fa ) {\n\tst[u][0] = fa ; dep[u] = dep[fa] + 1 ;\n\tfor ( int i = 1 ; (1<<i) < dep[u] ; i ++ ) {\n\t\tst[u][i] = st[st[u][i-1]][i-1] ;\n\t\tb[u][i] = min ( b[u][i-1] , b[st[u][i-1]][i-1] ) ;\n\t}\n\tfor ( int i = last[u] ; i != -1 ; i = e[i].nxt ) {\n\t\tint v = e[i].v ; if ( v == fa ) continue ;\n\t\tb[v][0] = e[i].w ; dfs ( v , u ) ;\n\t}\n}\nint lca ( int x , int y ) {\n\tif ( dep[x] < dep[y] ) swap ( x , y ) ;\n\tint minn = 999999999 ;\n\tfor ( int i = 20 ; i >= 0 ; i -- ) \n\t\tif ( dep[x]-dep[y] >= (1<<i) ) {\n\t\t\tminn = min ( minn , b[x][i] ) ;\n\t\t\tx = st[x][i] ;\n\t\t}\n\tif ( x == y ) return minn ;\n\tfor ( int i = 20 ; i >= 0 ; i -- ) \n\t\tif ( (1<<i) < dep[x] && st[x][i] != st[y][i] ) {\n\t\t\tminn = min ( minn , b[x][i] ) ;\n\t\t\tminn = min ( minn , b[y][i] ) ;\n\t\t\tx = st[x][i] , y = st[y][i] ;\n\t\t}\n\tif ( st[x][0] == root ) return -1 ;\n\treturn min ( minn , min ( b[x][0] , b[y][0] ) ) ;\n}\nint main() {\n\tn = read() , m = read() ;\n\tfor ( int i = 1 ; i <= m ; i ++ ) \n\t\ta[i].x = read() , a[i].y = read() , a[i].c = read() ;\n\tsort ( a + 1 , a + m + 1 , cmp ) ; int s = 0 ; \n\tfor ( int i = 1 ; i <= n ; i ++ ) fa[i] = i ;\n\tmemset ( last , -1 , sizeof ( last )) , tot = -1 ;\n\tfor ( int i = 1 ; i <= m ; i ++ ) {\n\t\tint fx = findfa ( a[i].x ) ;\n\t\tint fy = findfa ( a[i].y ) ;\n\t\tif ( fx == fy ) continue ;\n\t\tadd ( a[i].x , a[i].y , a[i].c ) ; fa[fx] = fy ;\n\t\ts ++ ; if ( s == n - 1 ) break ;\n\t}\n\tfor ( int i = 1 ; i <= n ; i ++ ) \n\t\tif ( fa[i] == i ) add ( root , i , 999999999 ) ;\n\tdfs ( root , 0 ) ; int x , y ; q = read() ;\n\twhile ( q -- ) {\n\t\tx = read() , y = read() ;\n\t\tprintf ( \"%d\\n\" , lca(x,y) ) ;\n\t}\n\treturn 0 ;\n\n}\n```",
        "postTime": 1548391856,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u5927\u6982\u662f\u6211\u8054\u8d5b\u524d\u7684\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u4e86\u5427\u3002  \n\u770b\u8fd9\u9053\u9898\u7684\u9898\u89e3\u8fd9\u4e48\u591a\uff0c\u8fd9\u7bc7\u9898\u89e3\u4e5f\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\u3002  \n\u4eca\u5929\u5076\u5c14\u770b\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u773c\u7684\u89e3\u6cd5\u8fd8\u662f\u548c\u534a\u5e74\u524d\u4e00\u6837\u3002  \n\u4e0d\u8fc7\u6211\u5df2\u7ecf\u5dee\u70b9\u5fd8\u4e86\u534a\u5e74\u524d\u5199\u8fc7\u4e00\u9053\u4e00\u6a21\u4e00\u6837\u7684\u9898\u4e86\u5462\u3002  \n\u53ea\u7528\u6709\u6743\u503c\u9650\u5236\u7684\u8fb9\u8ba9\u56fe\u8054\u901a\uff0c\u60f3\u5fc5\u8981\u7528\u5e76\u67e5\u96c6\u4e86\u5427\uff0c  \n\u800c\u53c8\u6709\u591a\u4e2a\u8be2\u95ee\uff0c\u5e94\u8be5\u53ef\u4ee5\u5206\u6cbb\u5427\u3002  \n\u5e76\u67e5\u96c6\u4e0d\u80fd\u64a4\u9500\uff0c\u90a3\u5c31\u8981\u5199\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u3002  \n\u4e00\u7b97\u590d\u6742\u5ea6\uff0c\u5df2\u7ecf\u4e09\u4e2alog\u4e86\u5462  \n\u4e0d\u614c  \n\u8ba9\u6211\u4eec\u6765\u5206\u6cbb \u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c  \n\u6bcf\u6b21\u53d6\u533a\u95f4[l,r]\u7684\u5e73\u5747\u6570\uff0c\u5c06\u5927\u4e8emid\u7684\u8fb9\u4e24\u7aef\u76f8\u8fde  \n\u82e5\u4e00\u7ec4\u8be2\u95ee\u4e24\u7aef\u8fde\u8d77\uff0c\u5c06\u5b83\u5206\u5230(mid,r]  \n\u4e0d\u7136\u5c31\u5206\u5230[l,mid]  \n\u6bcf\u6b21\u5148\u5411[l,mid]\u8d70\uff0c  \uff08\u8fd9\u6837\u4e0d\u9700\u8981\u64a4\u9500\uff09  \n\u518d\u64a4\u9500\u6389(mid,r]\u7684\u8fb9\uff0c\u5904\u7406\u5269\u4e0b\u7684\u90e8\u5206  \n\u4e00\u7b97\u7a7a\u95f4  \u4e24\u4e2alog  \n\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u4e5f\u5f88\u7384\u5b66  \n\u5361\u5361\u5e94\u8be5\u8fc7\u5f97\u53bb\uff1f  \n\u5199\u5374\u5199\u4e0d\u51fa\u6765\u3002\n\u7136\u540e\u6211\u5c31\u60f3\u8d77\u4e86\u534a\u5e74\u524d  \n\u505a\u7684 \u4e00\u6a21\u4e00\u6837\u7684\u9898\n  \n  \n \u597d\u4e86\uff0c\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u6211\u539f\u6765\u5199\u7684\u4e5f\u662f\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff0c\u4e0d\u8fc7\u6ca1\u6709\u628a\u8be2\u95ee\u653e\u5728\u4e00\u8d77\u5206\u6cbb\uff0c\u800c\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u7b54\u6848\u3002  \n \u8fd9\u6837\u628a\u8fb9\u6392\u5e8f\u540e\u4f9d\u6b21\u52a0\u5165\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e8c\u5206\u8fb9\u7684\u4f4d\u7f6e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u4e09\u4e2alog\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u53ea\u8981\u4e00\u4e2alog\uff0c\u4e8c\u5206\u4e5f\u6bd4\u5206\u6cbb\u597d\u5199\u7684\u591a\u3002\u5f53\u65f6\u6211\u5199\u8fd9\u4e2a\u597d\u50cf\u662f\u5b66kruscal\u91cd\u6784\u6811\u65f6\u987a\u4fbf\u5b66\u7684\uff0c\u662f\u5b83\u7684\u4e00\u79cd\uff08\u66f4\u4e0d\u597d\u5199\u7684\uff09\u66ff\u4ee3\u54c1\u3002\n ```\n // luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define R register\nusing namespace std;\nconst int N=100005;\nint np,n,m,q,a,b,c,d,e,rt[N],lc[N<<5],rc[N<<5],val[N<<5],sz[N<<5],cnt;\nstruct Edge {\n  int s,t,d;\n  bool operator<(const Edge A) const {\n    return d>A.d;\n  }\n} ee[N];\nvoid read(int &x) {\n  R char ch;\n  x=0;\n  while ((ch=getchar())<'-');\n  do {\n    x=(x<<3)+(x<<1)+ch-'0';\n  }\n  while ((ch=getchar())>'-');\n}\nvoid build(int &u,int l,int r) {\n  if (l>r) return;\n  u=++cnt;\n  if (l==r) val[u]=l,sz[u]=1;\n  else {\n    int mi=l+r>>1;\n    build(lc[u],l,mi);\n    build(rc[u],mi+1,r);\n  }\n}\nint find(R int k) {\n  R int p=k,u,l,r,mi;\n  do {\n    k=p,u=rt[np],l=1,r=n;\n    while (l<r) {\n      mi=l+r>>1;\n      if (k<=mi) u=lc[u],r=mi;\n      else u=rc[u],l=mi+1;\n    }\n  }\n  while (k!=(p=val[u]));\n  return p;\n}\nint getsz(R int k) {\n  R int u=rt[np],l=1,r=n,mi;\n  while (l<r) {\n    mi=l+r>>1;\n    if (k<=mi) u=lc[u],r=mi;\n    else u=rc[u],l=mi+1;\n  }\n  return sz[u];\n}\nvoid update(int &u,int v,int l,int r) {\n  u=++cnt;\n  if (l==r) {\n    val[u]=b;\n    if (b==l) sz[d=u]=sz[v];\n    else sz[e=u]=sz[v];\n  }\n  else {\n    lc[u]=lc[v],rc[u]=rc[v];\n    int mi=l+r>>1;\n    if ((l<=b&&b<=mi)||(l<=c&&c<=mi)) {\n      update(lc[u],lc[v],l,mi);\n    }\n    if ((mi<b&&b<=r)||(mi<c&&c<=r)) {\n      update(rc[u],rc[v],mi+1,r);\n    }\n  }\n}\nint main() {\n  read(n),read(m);\n  for (int i=1;i<=m;++i) {\n    read(ee[i].s),read(ee[i].t),read(ee[i].d);\n  }\n  sort(ee+1,ee+m+1);\n  build(rt[0],1,n);\n  for (np=0;np<m;++np) {\n    b=find(ee[np+1].s),c=find(ee[np+1].t);\n    if (b!=c) {\n      if (getsz(b)<getsz(c)) {\n        swap(b,c);\n      }\n      update(rt[np+1],rt[np],1,n);\n      sz[d]+=sz[e];\n    }\n    else rt[np+1]=rt[np];\n  }\n  read(q);\n  ee[m+1].d=-1;\n  while (q--) {\n    read(b),read(c);\n    int l=1,r=m+1;\n    while (l<r) {\n      np=l+r>>1;\n      if (find(b)==find(c)) r=np;\n      else l=np+1;\n    }\n    printf(\"%d\\n\",ee[l].d);\n  }\n}\n```",
        "postTime": 1541337869,
        "uid": 49920,
        "name": "\u8e72\u5728\u4e1b\u4e2d\u7b11",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8003\u524d\u62fc\u547d\u5199\u9898~~\u89e3~~\n\n\u9898\u9762\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u4f3c\u4e4e\u548c\u6811\u6ca1\u6709\u4efb\u4f55\u7684\u5173\u7cfb\n\n\u4f46\u662f\u901a\u8fc7\u4ed4\u7ec6\u7684\u8bfb\u9898\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u6761\u9053\u8def\u4e0a\u9009\u4e00\u6761\u6700\u5927\u7684\u6765\u6700\u4e3a\u6700\u4f73\u9009\u62e9\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u91cc\u6211\u4eec\u597d\u50cf\u53ef\u4ee5\u8054\u60f3\uff1a ~~\u6700\u5927\uff1f\u6700\u5927?\u5927\uff1f\u6700\u5927\u751f\u6210\u6811\uff01~~ \u5e94\u8be5\u53ef\u4ee5\u4e00\u4e2asort\u6765\u505a\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u8fde\u63a5\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\uff0c sort\u6392\u6700\u5927+\u5e76\u67e5\u96c6=\u6700\u5927\u751f\u6210\u6811\uff1b\n\n\u7136\u540e\u8fd9\u4e2a\u95ee\u9898\u5c31\u548c\u6811\u6709\u4e86\u5173\u7cfb\n\n\u7136\u540e\u95ee\u9898\u8bf4\u6709\u4e00\u7cfb\u5217\u7684\u8be2\u95ee \u4ecex\u70b9\u5230y\u70b9\u7684\u6700\u5927\u8f7d\u91cd\n\n\u4e00\u9897\u6811\u4e0a ----> x\u70b9\u5230y\u70b9\u95f4\u7684\u6700\u5c0f\u503c\n\n\u6240\u4ee5\u53ef\u4ee5\u62c6\u5206\u8def\u5f84\uff0cx---->y == x---->lca(x,y)---->y;\n\n\u53d6min\uff08x\u5230 lca(x,y)\u7684\u6700\u5c0f\u503c\uff0cy\u5230 lca(x,y)\u7684\u6700\u5c0f\u503c\uff09\n\n\u7136\u540e\u4f60LCA\u7684\u65f6\u5019\u987a\u4fbf\u53ef\u4ee5\u5904\u7406\u9664\u6700\u5c0f\u503c\n\n\u6240\u4ee5 \u8fd9\u9053 \u6c42\u6700\u5927\u751f\u6210\u6811\u7684\u4e00\u6761\u8def\u52b2\u7684\u6700\u5c0f\u503c \u5c31\u6709\u4e86\u57fa\u672c\u65b9\u5411\n\n\n\n------------\n### \u4ee3\u7801\n```cpp\n// by DEADFISH\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#define p 1e6+7\n#define maxn 999999999\n#define N 1001O\n#define mc(a,b) memset(a,b,sizeof(a))\n#define close std::ios::sync_with_stdio(false)\nusing namespace std;\ntypedef long long ln;\nstruct data {int f,t,dis;};\nstruct node {int f,t,n,v;};\nint n,m\uff1b\nint o=0\uff1b\ndata a[50050]\uff1b\nnode e[100010]\uff1b\nint dep[N];\nint papa[N];\nint head[N];\nint w[N][25],fa[N][25];\nbool vis[N];\nint find(int x){ if(papa[x]!=x) return papa[x]=find(papa[x]);return papa[x]; }\nbool cmp(data a,data b){ return a.dis>b.dis; }\nvoid add(int f,int t,int v);\nvoid dfs(int u);\nvoid kc();\nint lca(int x,int y);\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%d%d%d\",&a[i].f,&a[i].t,&a[i].dis);\n\tkc();\n\tfor(int i=1;i<=n;i++) if(!vis[i])\n\t{\n\t\tdep[i]=1;\n\t\tdfs(i);\n\t\tw[i][0]=maxn;\n\t\tfa[i][0]=i;\n\t}\n\tfor(int i=1;i<=20;i++) for(int j=1;j<=n;j++)\n\t{\n\t\tfa[j][i]=fa[fa[j][i-1]][i-1];\n\t\tw[j][i]=min(w[j][i-1],w[fa[j][i-1]][i-1]);\n\t}\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--)\n\t{\n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tprintf(\"%d\\n\",lca(l,r));\n\t}\n\treturn 0;\t\n}\nvoid add(int f,int t,int v)\n{\n\to++;\n\te[o].f=f;\n\te[o].t=t;\n\te[o].v=v;\n\te[o].n=head[f];\n\thead[f]=o;\n}\nvoid dfs(int u)\n{\n\tvis[u]=1;\n\tfor(int i=head[u];i;i=e[i].n)\n\t{\n\t\tint v=e[i].t;\n\t\tif(vis[v]) continue;\n\t\tdep[v]=dep[u]+1;\n\t\tfa[v][0]=u;\n\t\tw[v][O]=e[i].v;\n\t\tdfs(v);\t\n\t}\n\treturn ;\n}\nvoid kc()\n{\n\tsort(a+1,a+m+1,cmp);\n\tfor(int i=1;i<=n;i++) papa[i]=i;\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=find(a[i].f),y=find(a[i].t);\n\t\tif(x!=y)\n\t\t{\n\t\t\tpapa[x]=y;\n\t\t\tadd(a[i].f,a[i].t,a[i].dis);\n\t\t\tadd(a[i].t,a[i].f,a[i].dis);\n\t\t}\n\t}\n\treturn ;\n}\nint lca(int x,int y)\n{\n\tif(find(x)!=find(y)) return -1;\n\tint ans=maxn;\n\tif(dep[x]>dep[y]) swap(x,y);\n\tfor(int i=20;i>=0;i--) if(dep[x]<=dep[fa[y][i]])\n\t{\n\t\tans=min(ans,w[y][i]);\n\t\ty=fa[y][i];\n\t}\n\tif(x==y) return ans;\n\tfor(int i=20;i>=0;i--) if(fa[x][i]!=fa[y][i])\n\t{\n\t\tans=min(ans,min(w[x][i],w[y][i]));\n\t\tx=fa[x][i];\n\t\ty=fa[y][i];\n\t}\n\tans=min(ans,min(w[x][0],w[y][0]));\n\treturn ans;\n}\n```",
        "postTime": 1540218449,
        "uid": 75481,
        "name": "DEADFISH7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u672c\u7bc7\u9898\u89e3\u57fa\u4e8e\u7b80\u5355\u6613\u7406\u89e3\u7684\u7b97\u6cd5\n\n\u7b80\u5355\u7684\u9605\u8bfb\u9898\u9762\uff1a\n\n\u4ecex\u70b9\u51fa\u53d1\u5230\u8fbey\u70b9\u6240\u80fd\u8fd0\u8f93\u6700\u5927\u7684\u8d27\u7269\u6570\u91cf\n\n\u4e0d\u59a8\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u76ee\uff0c\u8fdb\u884c\u521d\u6b65\u601d\u8003\u5199\u4e00\u4e0b\u66b4\u529b\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a[\u7b80\u5316\u7248](https://www.luogu.org/problemnew/show/T42365)\n\u60f3\u4e86\u89e3\u7684\u540c\u5b66\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\n\n\u7b80\u5316\u540e\u7684\u9898\u76ee\u5c31\u662f\u7b80\u5355\u7684\u5957\u7528\u5355\u6e90\u6700\u77ed\u8def\u6a21\u677f\u4fbf\u53ef\u6c42\u89e3\uff0c\u4f8b\u5982\u5728dij\u5e26\u5806\u4f18\u5316O(nlogn)\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7n <= 2,000 \u7684\u6570\u636e\n\n```\n            que.pop();\n            int p = k[x].size();\n            for (int j = 0; j < p; ++j){\n                int road = min(k[x][j].quan, dis[x]);\n                if (dis[k[x][j].x] < road){\n                    dis[k[x][j].x] = road;\n                    que.push(node(k[x][j].x, dis[k[x][j].x]));\n                }\n```\n\n\n\u5148\u7406\u89e3\u4e86\u5c31\u65b9\u4fbf\u8fdb\u884c\u4e0b\u4e00\u6b65\u601d\u8003\uff0c\u663e\u7136\u8be5\u9898\u7684xy\u4f4d\u7f6e\u4e0d\u5b9a\uff0c\u82e5\u662f\u6bcf\u4e00\u4e2a\u70b9\u90fd\u6c42\u4e00\u904d\u5355\u6e90\u6700\u77ed\u8def\u5728O(n2logn)\u4e0b\u662f\u4e0d\u80fd\u5728n <= 100,000 , p <= 30,000 \u7684\u6570\u636e\u901a\u8fc7\u7684\u90a3\u4e48\u638f\u51fa\u7eb8\u548c\u7b14\u8fdb\u884c\u4e0b\u4e00\u6b65\u601d\u8003\n\n\u518d\u4ece\u9898\u9762\u5f00\u59cb\uff0c\u91cd\u65b0\u8fdb\u884c\u89e3\u8bfb\uff1a\n\n1. \u9898\u76ee\u7ed9\u4e86m\u6761**\u6709\u5411\u8fb9**\n\n2. **\u5b58\u5728x\u70b9\u4e0ey\u70b9\u4e0d\u8fde\u901a\u7684\u60c5\u51b5**\n\n3. x\u70b9\u5230y\u70b9\u8fd0\u8f93\u8d27\u7269\u6700\u5927\u91cf\u662fx\u70b9\u5230y\u70b9\u7684\u8def\u5f84**\u6700\u5c0f\u9650\u5236\u5c3d\u53ef\u80fd\u5927**\n\n\n\u5982\u679c\u6709\u8010\u5fc3\u7684\u540c\u5b66\u53ef\u4ee5\u624b\u52a8\u751f\u6210\u4e00\u4e2a\u5c0f\u6570\u636e\u56fe\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u5927\u90e8\u5206\u624b\u63a8\u7684\u540c\u5b66\u6216\u6253\u5f00\u6807\u7b7e\u67e5\u770b\u7684\u540c\u5b66\u4e0d\u96be\u53d1\u73b0\uff0c\u65e2\u7136\u8981\u5c3d\u53ef\u80fd\u907f\u514d\u6743\u503c\u8f83\u5c0f\u7684\u8fb9\uff0c\u8fd8\u8981\u4fdd\u8bc1x\u70b9\u4e0ey\u70b9\u8054\u901a\n\n\u4fdd\u8bc1\u8054\u901a\u6211\u4eec\u9700\u8981n-1\u6761\u8fb9\uff0c\u90a3\u4e48\u5c31**\u53ea\u8981\u8fdb\u884c\u4e00\u6b21\u751f\u6210\u6811\uff0c\u4fbf\u53ef\u4ee5\u6392\u9664\u6240\u6709\u5b9e\u9645\u8fd0\u8f93\u4e2d\u5e76\u4e0d\u9700\u8981\u7684\u8fb9**\n\n\u65e2\u7136\u8981\u751f\u6210\u6811\u4fbf\u5199\u4e0a\u5e76\u67e5\u96c6\uff0c \u987a\u5e26\u89e3\u51b3\u4e86\u8fde\u901a\u6027\u95ee\u9898\u6b64\u65f6\u5c06\u8fb9\u6570m\u4f18\u5316\u4e3an-1\n\n\u7ee7\u7eed\u5957\u7528\u6700\u77ed\u8def\u7b97\u6cd5\uff1a\u5f97\u520660\n\n\u5355\u6e90\u6700\u77ed\u8def\u663e\u7136\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u6bcf\u4e00\u6b21\u6c42\u89e3\u90fd\u8fdb\u884c\u4e86nlogn\u6b21\u7684\u8ba1\u7b97\u8fc7\u4e8e\u7e41\u6742\n\n\u53ef\u662f\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5c06\u56fe\u8f6c\u5316\u4e3a\u591a\u9897\u6811\u4e86\uff0c\u771f\u7684\u9700\u8981\u7ee7\u7eed\u8fdb\u884c\u6c42\u6700\u77ed\u8def\u5417\uff1f\n\n\u8be5\u9898\u4e0d\u540c\u4e8e\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6700\u77ed\u8def\u4ec5\u4e3ax\u70b9\u5230y\u70b9\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\n\n\u6ce8\u610f\u4e86\uff1a**\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u6709\u552f\u4e00\u7684\u8def\u5f84**\n\n\u90a3\u4f55\u5fc5\u53c8\u53bb\u6c42\u6700\u77ed\u8def\u4e86\u5462\uff0c\u8fd9\u4e2a\u65f6\u5019\u6709\u4e9b\u770b\u8fc7\u522b\u7684\u9898\u89e3\u7684\u5c0f\u670b\u53cb\u6216\u770b\u8fc7\u6807\u7b7e\u7684\u5c0f\u670b\u53cb\u8d76\u7d27\u53bb\u641c\u7d22\u500d\u589e\u7b97\u6cd5\u6572\u4e2a\u6a21\u677f\u7136\u540e\u56de\u6765\u7167\u7740\u522b\u7684\u9898\u89e3\u628a\u8fd9\u9898A\u6389\u4e86\n\n**\u7136\u800c\u5728n <= 100,000\u7684\u60c5\u51b5\u4e0b\u771f\u7684\u8981\u5927\u8d39\u5468\u7ae0\u5417\uff1f**\n\n**\u5728OI\u8003\u573a\u4e0a\u8981\u53d1\u6563\u81ea\u5df1\u7684\u601d\u7ef4\uff0c\u5728\u8be5\u9898\u53ea\u9700\u8981x\u70b9\u5230y\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u6743\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u7684\u679a\u4e3e\u6cd5\u5c31\u53ef\u4ee5\u901a\u8fc7\u8be5\u9898**\uff0c\u4e8b\u5b9e\u8bc1\u660e\u6548\u7387\u8fd8\u4e0d\u9519\n\n\u6ca1\u5b66\u8fc7\u500d\u589e\u7684\u540c\u5b66\u4e00\u6837\u77e5\u9053\uff0cx\u70b9\u5230y\u70b9\u662f\u9700\u8981\u7ecf\u8fc7\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\uff08\u5b57\u9762\u610f\u601d\uff09\n\n\u63d2\u4e00\u5c0f\u6bb5\u5b58\u7956\u5148\u7684dfs\u4ee3\u7801\n```\n    for (int i = 1; i <= n; ++i){\n    \tif (!bol[i]){\n        bol[i] = true;\n        dfs(i, 0);}\n    }\n    \nvoid dfs(int i, int cen){\n    int p = k[i].size();\n    bol[i] = true;\n    deep[i] = cen;\n    for (int j = 0; j < p; ++j){\n        int t = k[i][j].x;\n        if (!bol[t]){\n            fa[t].x = i;\n            fa[t].quan = k[i][j].quan;\n            dfs(t, cen+1);\n        }\n    }\n}\n```\n\n\u7136\u540e\u76f4\u63a5\u7b97\u51fax\u70b9\u5230\u7956\u5148\u8def\u5f84\u4e0a\u6700\u5c0f\u6743\u503c\u4e0ey\u70b9\u5230\u7956\u5148\u8def\u5f84\u4e0a\u6700\u5c0f\u6743\u503c\u53bb\u4e24\u8005\u4e4b\u95f4\u6700\u5c0f\u503c\n\n\u89e3\u51b3_(:\u0437\u300d\u2220)_\n\n\u672c\u4ebaAC\u4ee3\u7801\uff1a\uff08\u65e0\u5404\u79cd\u4f18\u5316602ms\uff09\n\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<time.h>\nusing namespace std;\nint n, m, p, t1, t2, father[100010], dis[100010], deep[100010];\nbool bol[100010];\nstruct bian{\n    int l, r, quan;\n} f[50010];\nstruct node{\n    int x, quan;\n    node (int a=0, int b=0) : x(a), quan(b){\n    }\n    friend bool operator < (node a, node b){\n        return a.quan < b.quan;\n    }\n};\nvector <node> k[100010];\nnode fa[100010];\nbool cmp(bian a, bian b){\n    return a.quan > b.quan;\n}\nint find(int x){\n    if (father[x] != x) father[x] = find(father[x]);\n    return father[x];\n}\npriority_queue <node> que;\nvoid dfs(int i, int cen){\n    int p = k[i].size();\n    bol[i] = true;\n    deep[i] = cen;\n    for (int j = 0; j < p; ++j){\n        int t = k[i][j].x;\n        if (!bol[t]){\n            fa[t].x = i;\n            fa[t].quan = k[i][j].quan;\n            dfs(t, cen+1);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for (int i = 0; i <= n; ++i) father[i] = i;\n    for (int i = 0; i < m; ++i){\n        scanf(\"%d %d %d\", &f[i].l, &f[i].r, &f[i].quan);\n    }\n    sort(f, f+m, cmp);\n    for (int i = 0; i < m; ++i){\n        int L = find(f[i].l);\n        int R = find(f[i].r);\n        if (L != R){\n            //printf(\"%d %d %d\\n\", f[i].l, f[i].r, f[i].quan);\n            father[R] = L;\n            k[f[i].l].push_back(node(f[i].r, f[i].quan));\n            k[f[i].r].push_back(node(f[i].l, f[i].quan));\n        }\n    }\n    for (int i = 1; i <= n; ++i){\n    \tif (!bol[i]){\n        bol[i] = true;\n        dfs(i, 0);}\n    }\n    scanf(\"%d\", &p);\n    for (int i = 0; i < p; ++i){\n        scanf(\"%d %d\", &t1, &t2);\n        if (find(t1) == find(t2)){\n    \t\tint deep1 = deep[t1], deep2 = deep[t2], minn = 999999999;\n    \t\twhile (deep1 > deep2){\n    \t\t\tminn = min(fa[t1].quan, minn);\n    \t\t\tt1 = fa[t1].x;\n    \t\t\t--deep1;\n            }while (deep2 > deep1){\n                minn = min(fa[t2].quan, minn);\n                t2 = fa[t2].x;\n                --deep2;\n            }\n            while (t1 != t2){\n                minn = min(fa[t1].quan, minn);\n                minn = min(fa[t2].quan, minn);\n                t1 = fa[t1].x;\n                t2 = fa[t2].x;\n            }\n            printf(\"%d\\n\", minn);\n        }\n        else printf(\"-1\\n\");\n    }\n}\n```\n\n\u4ee3\u7801\u4eae\u70b9\u5728\u54ea\u91cc\uff1a\n\n1. \u591a\u4f59\u7684\u8fb9\u76f4\u63a5\u7b5b\u53bb\uff0c\u53ea\u9700\u8981\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\n\n2. \u5728\u4e0d\u8ffd\u6c42\u9ad8\u6548\u7387\u7684\u60c5\u51b5\u4e0b\u679a\u4e3e\u6cd5\u5373\u53ef\u901a\u8fc7\u672c\u9898\u6570\u636e",
        "postTime": 1540212928,
        "uid": 114643,
        "name": "RikoHere",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 P1967 \u8d27\u8f66\u8fd0\u8f93"
    },
    {
        "content": "\t\t\u4e00\u5f00\u59cb\u505a\u8fd9\u9053\u9898\uff0c\u70b9\u4e86\u4e0b\u6807\u7b7e\u53d1\u73b0\u662f\u56fe\u4e0a\u500d\u589e\uff0c\u7136\u540e\u6211\uff1a.....\u56fe\u4e0a\u600e\u4e48\u500d\u589e\uff1f\n\n\t\t\u5f73\u4e8d\u53e3\u5df4\uff0c\u500d\u589e\u5c31\u500d\u589e\u5427\uff0c\u770b\u770b\u500d\u589e\u600e\u4e48\u641e\n\n\t\t\u7136\u540e\u5341\u5206\u949f\u8fc7\u53bb\u4e86....\n\n\t\t\u6211\uff1a.......\u8fd8\u662f\u6253\u6570\u636e\u7ed3\u6784\u5427\n\n\t\t\u6570\u636e\u7ed3\u6784\u4ec0\u4e48\u7684\u679c\u7136\u662f\u5f31\u8005\u7684\u798f\u97f3\uff01\uff08\u88ab\u6570\u636e\u7ed3\u6784\u9001\u9000\u5f79\u9884\u5b9a\uff09\n\n\t\t\u601d\u8def\uff1a\n\n\u00a0 \u00a0 \u00a0 \u00a0 \t1.\u7528\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u54ea\u4e9b\u70b9\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\uff0c\u628a\u6bcf\u4e2a\u8fde\u901a\u5757\u5411\u5176\u4f59\u8054\u901a\u5757\u8fde\u4e00\u4e2a\u6743\u503c\u4e3a-1\u7684\u8fb9\uff08\u56e0\u4e3a\u4e00\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u662f\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\u7684\uff0c\u6240\u4ee5\u53ea\u7528\u8fde\u4e00\u4e2a\u8fb9\u5c31\u53ef\u4ee5\u5566...\uff09\n\n\u00a0 \u00a0 \u00a0 \u00a0 \t2.\u7528prim\u8dd1\u6700\u5927\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u503c\u6700\u5927\u561b...\u6240\u4ee5\u5c3d\u91cf\u8dd1\u6700\u5927\u8fb9\u5566\uff0c\u8dd1\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u662f\u4ece\u54ea\u4e2a\u8282\u70b9\u62d3\u5c55\u6765\u7684\uff0c\u5efa\u7acb\u65b0\u7684\u6811\uff0c\u65b9\u4fbf\u4e0b\u9762\u8dd1\u6811\u5256\n\n\u00a0 \u00a0 \u00a0 \u00a0 \t3.\u6811\u4e0a\u8def\u5f84\u6700\u5c0f\u503c~\u5178\u578b\u7684\u6811\u5256\u5957\u8def\u9898\u55ef\u5450\n\n\t\t\u7801\u91cf\u504f\u5927\uff0c\u6ce8\u610f\u4e00\u4e0b\u521d\u59cb\u5316\u7ec6\u8282qwq\uff0c\u6570\u636e\u7ed3\u6784\u597d\u50cf\u4f46\u4e5f\u5f88\u5bb9\u6613\u6253\u6302\u5c31\u662f\u4e86orz\n   ```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#define inf 1e9\n#define maxn 10100\n#define maxm 50100\nusing namespace std;\n\nbool vis[maxn];\nint n,m,q,u,v,w,num,indx,sum;\nint mini[maxm],ll[maxm],rr[maxm],s[maxn],a[maxn];\nint fa[maxn],dis[maxn],dep[maxn],sz[maxn],wson[maxn]fir[maxn],;\nint dfn[maxn],node[maxn],head[maxn],from[maxn],to[maxn],val[maxn];\n\nstruct qwq\n{\n\tint to,nxt,val;\n}e[maxm<<1];\n\nstruct nod\n{\n\tint u,d,f;\n\tbool operator < (const nod &a)const\n\t{\n\t\treturn d<a.d;\n\t}\n};\npriority_queue<nod> que;\n\nint read()\n{\n\tint xx=0,kk=1;char ch=' ';\n\twhile(!isdigit(ch)){ch=getchar();if(ch=='-')kk=-1;}\n\twhile(isdigit(ch)){xx=xx*10+ch-'0';ch=getchar();}\n\treturn kk*xx;\n}\n\nvoid addedge(int u,int v,int w)\n{\n\te[++num].to=v;\n\te[num].val=w;\n\te[num].nxt=fir[u];\n\tfir[u]=num;\n}\n\nint find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\nvoid merge(int x,int y)\n{\n\tx=find(x);y=find(y);\n\tif(x!=y) fa[x]=y;\n}\n\nvoid prim(int u)\n{\n\tvis[u]=true;\n\tfor(int i=fir[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tdis[v]=max(dis[v],e[i].val);\n\t\tif(!vis[v]) que.push((nod){v,dis[v],u});\n\t}\n\twhile(!que.empty())\n\t{\n\t\tnod tmp=que.top();que.pop();\n\t\tint v=tmp.u,d=tmp.d,f=tmp.f;\n\t\tif(dis[v]==d&&!vis[v])\n\t\t{\n\t\t    from[++sum]=f;to[sum]=v;\n\t\t\tval[sum]=d;prim(v);\n\t\t    break;\n\t\t} \n\t}\n}\n\nvoid build(int l,int r,int num)\n{\n\tll[num]=l,rr[num]=r;\n\tif(l==r){mini[num]=a[node[l]];return;}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,num<<1);\n\tbuild(mid+1,r,num<<1|1);\n\tmini[num]=min(mini[num<<1],mini[num<<1|1]);\n}\n\nint query(int l,int r,int num)\n{\n\tif(l>rr[num]||r<ll[num]||l>r) return inf;\n\tif(ll[num]>=l&&rr[num]<=r) return mini[num];\n\treturn min(query(l,r,num<<1),query(l,r,num<<1|1));\n}\n\nint qmin(int x,int y)\n{\n\tint tmp=inf;\n\twhile(head[x]!=head[y])\n\t{\n\t\tif(dep[head[x]]<dep[head[y]]) swap(x,y);\n\t\ttmp=min(tmp,query(dfn[head[x]],dfn[x],1)),x=fa[head[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\treturn min(tmp,query(dfn[x]+1,dfn[y],1));\n}\n\nvoid dfs1(int u,int f)\n{\n\tdep[u]=dep[f]+1,sz[u]=1,fa[u]=f;\n\tfor(int i=fir[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]) continue;\n\t\tdfs1(v,u);\n\t\tsz[u]+=v;a[v]=e[i].val;\n\t\tif(sz[v]>sz[wson[u]]) wson[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int top)\n{\n\tdfn[u]=++indx,node[indx]=u,head[u]=top;\n\tif(wson[u]) dfs2(wson[u],top);\n\tfor(int i=fir[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v!=fa[u]&&v!=wson[u]) dfs2(v,v);\n\t}\n}\n\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=0;i<=n;++i) fa[i]=i,dis[i]=-inf;\n\twhile(m--)\n\t{\n\t\tu=read(),v=read(),w=read();\n\t\tmerge(u,v);addedge(u,v,w);addedge(v,u,w);\n\t} \n\tfor(int i=1;i<=n;++i)\n\t\tif(fa[i]==i) s[++sum]=i;\n\tfor(int i=1;i<=sum;++i)\n\tfor(int j=i+1;j<=sum;++j)\n\t\taddedge(s[i],s[j],-1),addedge(s[j],s[i],-1);\n\tsum=dis[1]=0;prim(1);num=0;\n\tmemset(fir,0,sizeof(fir));\n\tfor(int i=1;i<=sum;++i)\n\t\taddedge(from[i],to[i],val[i]);\n\tdfs1(1,0);dfs2(1,1);a[1]=inf;\n\tbuild(1,n,1);q=read();\n\twhile(q--)\n\t{\n\t\tu=read(),v=read();\n\t\tprintf(\"%d\\n\",qmin(u,v));\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n",
        "postTime": 1539858866,
        "uid": 56888,
        "name": "\u0e05\u5357\u74dc\u0e05",
        "ccfLevel": 6,
        "title": "\u5e76\u67e5\u96c6+prim+\u6811\u5256 -- \u667a\u529b\u4e0d\u591f\uff0c\u7801\u529b\u6765\u51d1"
    },
    {
        "content": "\u7adf\u7136\u6ca1\u6709\u4e00\u4e2a\u4eba\u5199**dfs\u5e8f\u5efa\u6811\u7684\u6811\u5256**...\n\n\u4e8e\u662f\u6211\u51b3\u5b9a\u6765**\u9020\u798f\u4eba\u7c7b**\n\n\u867d\u8bf4\u4e00\u770b\u5c31\u662f\u9053\u6700\u5927\u751f\u6210\u6811+\u6811\u5256\u7ef4\u62a4\u94fe\u4e0a\u6700\u5c0f\u503c\u7684\u6c34\u9898\uff0c\u4f46\u4ecb\u4e8e\u8fd9\u662f\u6211\u6253\u7684\u7b2c\u4e00\u9053\u6811\u5256\u9898\uff0c\u8fd8\u662f\u51fa\u4e86\u4e0d\u5c11\u5c94\u5b50\uff08\u81ea\u5df2yy\u7740\u5199,\u7ed3\u679c\u67e5\u4e86\u4e00\u4e0a\u5348\uff09\n\n\u6ce8\u610f\u4e8b\u9879\n1\u3001\u8fd9\u9898\u9700\u8981\u5316\u8fb9\u6743\u4e3a\u70b9\u6743\uff0c\u663e\u7136\u662f\u8981\u5c06\u8fb9\u6743\u4e0b\u653e\u5230\u513f\u5b50\u4e0a\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6765\u8bf4\u7236\u4eb2\u53ea\u6709\u4e00\u4e2a\uff0c\u513f\u5b50\u53ef\u80fd\u6709\u591a\u4e2a\n\n2\u3001\u6839\u8282\u70b9\u8981\u7279\u6b8a\u5904\u7406\uff01\uff0c\u56e0\u4e3a\u6ca1\u6709\u6df1\u5ea6\u6bd4\u6839\u66f4\u5c0f\u7684\u70b9\uff0c\u6240\u4ee5\u6839\u4e0d\u4f1a\u4e5f\u4e0d\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u9700\u8981\u8d4b\u4e00\u4e2a\u6781\u5927\u503c\n\n3\u3001\u8be5\u56fe\u4e0d\u4fdd\u8bc1\u8054\u901a\uff0c\u6240\u4ee5\u8981\u5efa\u6700\u5927\u751f\u6210\u68ee\u6797\uff0c\u800c\u4e14\u8981\u4ee5\u591a\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u8dd1dfs\n\n4\u3001\u4e0d\u8981\u628a\u5e76\u67e5\u96c6\u7684fa1[]\u548c\u7ef4\u62a4\u6811\u70b9\u7236\u4eb2\u7684fa2[]\u641e\u6df7\uff01\uff01\uff01\n\n5\u3001\u6700\u5927\u7684\u5751\u70b9\uff01\u5f53\u6211\u4ee5\u4e3a\u53ef\u4ee5\u7ebf\u6bb5\u6811\u66b4\u529b\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u60ca\u5947\u7684\u53d1\u73b0\u5f85\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u7684LCA\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5b9e\u9645\u4e0a\u5b58\u7684\u662f\u8fde\u5411\u7236\u4eb2\u8fb9\u7684\u6743\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628aLCA\u7684\u70b9\u6743\u7ed9\u5e72\u6389\uff0c\u56e0\u4e3a\u538b\u6839\u5c31\u4e0d\u4f1a\u7ecf\u8fc7\u90a3\u6761\u8fb9\uff0c\u5177\u4f53\u64cd\u4f5c\u4e3a\u628aLCA\u7684id+1\uff0c\u56e0\u4e3aLCA\u7684\u6df1\u5ea6\u5c0f\uff0c\u4f5c\u4e3a\u67e5\u8be2\u7684\u5de6\u533a\u95f4\n\n6\u3001\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u4f60\u4ee5\u4e3a\u8fd9\u6837\u5c31\u7ed3\u675f\u4e86\uff1fLCA\u7684\u6df1\u5ea6\u4e00\u5b9a\u5c0f\u4e48\uff1f\u5f53\u4e24\u6761\u8f7b\u94fe\u90fd\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u6709\u53ef\u80fd\u4f1a\u8df3\u5230\u540c\u4e00\u4e2a\u70b9\uff0c\u9700\u8981\u7279\u5224\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\ntypedef unsigned long long ull;\nint const maxn=500100,maxm=500100,inf=0x1f1f1f1f;\nint n,m,q,num,root[maxn],cur;\n//***********\u8bfb\u56fe*****************\nstruct E\n{\n\tint to,next,w;\n\tE(int to=0,int next=0,int w=0):\n\t\tto(to),next(next),w(w){}\n}e[maxn<<1];\nint head[maxn],cnt;\nvoid add(int u,int v,int w)\n{\n\te[++cnt]=(E){v,head[u],w};\n\thead[u]=cnt;\n//\tprintf(\"%d%d,\",v,u);\n}\n//***********\u5256\u6811\u4e3a\u94fe******************\nint dep[maxn],size[maxn],fa[maxn],hson[maxn];\nint top[maxn],id[maxn],w[maxn],val[maxn],tot;\nint pre_dfs(int u,int ff)\n{\n\tdep[u]=dep[ff]+1;\n\tfa[u]=ff;\n\tsize[u]=1;\n\tint maxson=-1;\n\tfor(int i=head[u];i!=-1;i=e[i].next)\n\t{\n\t\tint v=e[i].to,w=e[i].w;\n\t\tif(v==ff)\n\t\t\tcontinue;\n\t\tval[v]=w;\n\t\tsize[u]+=pre_dfs(v,u);\n\t\tif(maxson<size[v])\n\t\t{\n\t\t\tmaxson=size[v];\n\t\t\thson[u]=v;\n\t\t}\n\t}\n\treturn size[u];\n}\nvoid mark_dfs(int u,int topf)\n{\n\tid[u]=++tot;\n\ttop[u]=topf;\n\tw[tot]=val[u];\n\tif(size[u]==1)\n\t\treturn;\n\tmark_dfs(hson[u],topf);\n\tfor(int i=head[u];i!=-1;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(!id[v])\n\t\t\tmark_dfs(v,v);\n\t}\n}\n//***********\u7ebf\u6bb5\u6811*********************\nstruct Tree\n{\n\tint lc,rc,min;\n}a[maxn];\nint t=1;\nvoid build(int u,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ta[u].min=w[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\ta[u].lc=++t;build(a[u].lc,l,mid);\n\ta[u].rc=++t;build(a[u].rc,mid+1,r);\n\ta[u].min=std::min(a[a[u].lc].min,a[a[u].rc].min);\n}\nint query(int u,int l,int r,int ll,int rr)\n//ll rr\u662f\u5f85\u4fee\u6539\u7684\u533a\u95f4,l r\u662f\u5f53\u524d\u5904\u7406\u5230\u7684\u533a\u95f4\n{\n\tif(l==ll&&r==rr)\n\t\treturn a[u].min;\n\tint mid=(l+r)/2;\n\treturn mid>=ll&&mid<rr?std::min(query(a[u].lc,l,mid,ll,mid),query(a[u].rc,mid+1,r,mid+1,rr)):(mid>=rr?query(a[u].lc,l,mid,ll,rr):query(a[u].rc,mid+1,r,ll,rr));\n    //\u4e09\u76ee\u8fd0\u7b97\u7b26\u5c31\u662f\u723d\uff01 \n}\n//*************\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6811\u94fe******************\nint TL_query(int x,int y)\n{\n\tint ans=inf;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tstd::swap(x,y);\n\t\tans=std::min(ans,query(1,1,n,id[top[x]],id[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tstd::swap(x,y);\n\tif(x!=y)\n\t\tans=std::min(ans,query(1,1,n,id[x]+1,id[y]));\n\treturn ans;\n}\n//*******************************************\nstruct RE\n{\n\tint u,v,w;\n\tint operator <(const RE &b)const\n\t{\n\t\treturn w>b.w;\n\t}\n}ee[maxm];\nint f[maxn];\nint find(int x)\n{\n\treturn x==f[x]?x:f[x]=find(f[x]);\n}\nvoid kruskal()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tf[i]=i;\n\tstd::sort(ee+1,ee+1+m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint w=ee[i].w,u=ee[i].u,v=ee[i].v,\n\t\tfu=find(u),\n\t\tfv=find(v);\n//\t\tprintf(\"%d %d,,,\\n\",fu,fv);\n\t\tif(fu==fv)\n\t\t\tcontinue;\n\t\tf[fu]=fv;\n//\t\tprintf(\"!%d %d:%d\\n\",u,v,w);\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n}\n//*******************************************\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&ee[i].u,&ee[i].v,&ee[i].w);\n\tkruskal();\n//\t/*\n\tfor(int i=1;i<=n;i++)\n\t\tif(!size[i])\n\t\t\tdep[i]=-1,pre_dfs(i,0),val[i]=inf,root[++cur]=i;\n\tfor(int i=1;i<=cur;i++)\n\t\tmark_dfs(root[i],root[i]);\n//\tfor(int i=1;i<=n;i++)\n//\t\tprintf(\"!%d %d\\n\",i,id[i]);\n\tbuild(1,1,n);\n//\t*/\n\tscanf(\"%d\",&q);\n\tfor(int x,y,i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(find(x)!=find(y))\n\t\t{\n\t\t\tprintf(\"-1\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",TL_query(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539330438,
        "uid": 55868,
        "name": "Panthera_AFO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u773c\u9898\u89e3\uff0c\u548c\u6211\u76f8\u4eff\u7684\u9898\u89e3\u591a\u5c11\u6709\u70b9\u4e0d\u540c\u3002  \n\u81f3\u4e8e\u54ea\u91cc\u4e0d\u540c\u7b49\u4e0b\u518d\u8bf4\u3002\n\n\u597d\u6fc0\u52a8\u2026\u2026\n\n---\n\n## Kruskal + \u6811\u94fe\u5256\u5206 + ST \u8868\n\n### Kruskal \u662f\u5565\n\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u7a0d\u52a0\u6539\u52a8\u5c31\u80fd\u7528\u6765\u505a\u6700\u5927\u751f\u6210\u6811\u3002\n\n\u8fd9\u4e2a\u524d\u9762\u7684\u5927\u4f6c\u90fd\u8bb2\u4e86\u5427\u3002\n\n### \u6811\u94fe\u5256\u5206\u662f\u5565\n\u5de6\u8f6c\u6a21\u677f\u9898\u4e0d\u8c22\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u5e38\u89c1\u5427\u3002\n\n### ST \u8868\u662f\u5565\n\u4e00\u79cd\u52c9\u5f3a\u7b97\u662f\u6570\u636e\u7ed3\u6784\u7684\u4e1c\u4e1c\uff0c\u57fa\u4e8e\u500d\u589e\u4f18\u5316 DP\uff0c\u53ef\u4ee5\u5728 $O(n\\log{n})$ \u7684\u65f6\u95f4\u5185\u9884\u5904\u7406\u7136\u540e $O(1)$ \u67e5\u8be2 RMQ\u3002\n\nlrj \u7237\u7237\u7684\u4e66\u4e0a\u8bf4\u662f `Tarjan \u7684 Sparse-Table \u7b97\u6cd5`\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u4e0d\u8bb2\u4e86\uff0c\u5de6\u8f6c\u6a21\u677f\u9898\u4e0d\u8c22\u3002\n\n### \u603b\u7ed3\n\n\u7528\u524d\u8005 ~~xjb \u4e71~~\u5256\u4e00\u4e0b\uff0c\u518d\u7528\u540e\u8005\u7ef4\u62a4\uff08\u5176\u5b9e\u8fd9\u73a9\u610f\u4e0d\u80fd\u7b97\u7ef4\u62a4\uff09\u5c31\u884c\u4e86\u3002\n\n## \u5751\u70b9\uff08\u6211\u7684 WA \u53f2\uff09\n\u771f\u7684\uff0c\u770b\u89c1\u90a3 19 \u4e2a\u7eff\u8272\u540e\u9762\u5939\u7740 1 \u4e2a\u7ea2\u8272\u7684\u5fc3\u60c5\u2026\u2026\u7b80\u76f4\u60f3\u6253\u4eba\uff01  \n$\\mathrm{95pts}$\u3002\n\n\u5982\u679c\u4e0b\u4e0d\u4e86\u6570\u636e~~\u8fd8\u770b\u4e0d\u4e86\u9898\u89e3~~\uff0c\u6211\u80af\u5b9a\u60f3\u4e0d\u5230\u8fd9\u4e00\u70b9\uff1a\n\n---\n\n___Kruskal \u6c42\u51fa\u6765\u7684\u6700\u5927\u751f\u6210\u6811___  \n___\u6709\u53ef\u80fd\u662f\u4e0d\u8054\u901a\u7684\u68ee\u6797\uff01\uff01\uff01\uff01\uff01___\n\n---\n\n\u6211\u5fc3\u91cc\u6709\u53e5 mmp \u4e0d\u77e5\u5f53\u4e0d\u5f53\u8bb2\n\n\u6240\u4ee5\u518d\u679a\u4e3e\u4e00\u904d\uff0c\u5982\u679c\u5e76\u67e5\u96c6\u4e2d $i$ \u7684\u7236\u4eb2 $=i$\uff0c\u5c31\u4ee5 $i$ \u4e3a\u6839\u8282\u70b9 DFS \u4e00\u6b21\u3002\n\n\u7136\u540e\u5c31\u662f\u88f8\u7684\u6811\u5256\u8fb9\u6743\u8f6c\u70b9\u6743\u4e86\u3002\n\n## Code\n```cpp\n#include <cstdio>\n#include <functional>\n#include <algorithm>\nusing namespace std;\nconst int N = 1e4;\nconst int M = 5e4;\nint to[(N << 1) + 10],pre[(N << 1) + 10],val[(N << 1) + 10],first[N + 10],edge_tot;\nint f[N + 10],d[N + 10],son[N + 10],size[N + 10],top[N + 10],id[N + 10],rk[N + 10],dfn_tot;\nint st[N + 10][30],lg2[N + 10];\nint a[N + 10];\nint n,m,q;\nstruct edge_t\n{\n\tint u,v,w;\n\tinline bool operator>(const node &x) const\n\t{\n\t\treturn w > x.w;\n\t}\n} e[M + 10];\ninline void add(int u,int v,int w)\n{\n\tto[++edge_tot] = v;\n\tval[edge_tot] = w;\n\tpre[edge_tot] = first[u];\n\tfirst[u] = edge_tot;\n}\nint query(int l,int r) // \u533a\u95f4 min\n{\n\tif(l > r) // \u91cd\u8981\uff0c\u8fb9\u6743\u8f6c\u70b9\u6743\u7684\u65f6\u5019 LCA \u4e0d\u7528\u67e5\u8be2\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a WA\n\t\treturn 0x3f3f3f3f;\n\tint lg = lg2[r - l + 1];\n\treturn min(st[l][lg],st[r - (1 << lg) + 1][lg]);\n}\n\nstruct disjoint_set // \u522b\u95ee\u6211\u4e3a\u5565\u628a\u5e76\u67e5\u96c6\u5c01\u88c5\u8d77\u6765\n{\nprivate:\n\tint f[N + 10];\n\tinline int father(int x)\n\t{\n\t\tint fa = x;\n\t\twhile(fa ^ f[fa])\n\t\t\tfa = f[fa];\n\t\twhile(x ^ f[x])\n\t\t\tf[x] = fa,x = f[x];\n\t\treturn fa;\n\t}\npublic:\n\tdisjoint_set()\n\t{\n\t\tfor(register int i = 1;i <= N;++i)\n\t\t\tf[i] = i;\n\t}\n\tinline void merge(int x,int y)\n\t{\n\t\tf[father(x)] = father(y);\n\t}\n\tinline bool sameset(int x,int y)\n\t{\n\t\treturn father(x) == father(y);\n\t}\n\tinline bool isroot(int x)\n\t{\n\t\treturn f[x] == x;\n\t}\n} dsu;\n\nvoid dfs1(int p,int fa,int dep)\n{\n\tf[p] = fa;\n\td[p] = dep;\n\tsize[p] = 1;\n\tfor(register int i = first[p];i;i = pre[i])\n\t\tif(to[i] ^ fa)\n\t\t{\n\t\t\tdfs1(to[i],p,dep + 1);\n\t\t\tsize[p] += size[to[i]];\n\t\t\tif(!son[p] || size[to[i]] > size[son[p]])\n\t\t\t\tson[p] = to[i];\n\t\t}\n}\nvoid dfs2(int p,int t)\n{\n\tid[p] = ++dfn_tot;\n\trk[dfn_tot] = p;\n\ttop[p] = t;\n\tif(!son[p])\n\t\treturn ;\n\tdfs2(son[p],t);\n\tfor(register int i = first[p];i;i = pre[i])\n\t\tif(to[i] ^ f[p] && to[i] ^ son[p])\n\t\t\tdfs2(to[i],to[i]);\n}\n\nint answer(int x,int y) // \u6811\u5256\u67e5\u8be2\u8fc7\u7a0b\n{\n\tint ans = 0x3f3f3f3f;\n\twhile(top[x] ^ top[y])\n\t\tif(d[top[x]] > d[top[y]])\n\t\t\tans = min(ans,query(id[top[x]],id[x])),x = f[top[x]];\n\t\telse\n\t\t\tans = min(ans,query(id[top[y]],id[y])),y = f[top[y]];\n\tif(d[x] > d[y])\n\t\tswap(x,y);\n\tans = min(ans,query(id[x] + 1,id[y]));\n\treturn ans;\n}\n\ninline int choose(int x) // \u8f85\u52a9\u51fd\u6570\n{\n\tif(d[to[x << 1]] > d[to[(x << 1) - 1]])\n\t\treturn to[x << 1];\n\telse\n\t\treturn to[(x << 1) - 1];\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i = 2;i <= n;++i)\n\t\tlg2[i] = lg2[i / 2] + 1; // \u9884\u5904\u7406 log2\n\tfor(register int i = 1;i <= m;++i)\n\t\tscanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\tsort(e + 1,e + m + 1,greater<node>());\n\tfor(register int i = 1;i <= m;++i)\n\t{\n\t\tif(!dsu.sameset(e[i].u,e[i].v))\n\t\t{\n\t\t\tdsu.merge(e[i].u,e[i].v);\n\t\t\tadd(e[i].u,e[i].v,e[i].w);\n\t\t\tadd(e[i].v,e[i].u,e[i].w);\n\t\t}\n\t}\n\tfor(register int i = 1;i <= n;++i)\n\t\tif(dsu.isroot(i))\n\t\t\tdfs1(i,0,1),dfs2(i,i); // \u6811\u5256\n\tfor(register int i = 1;i < n;++i)\n\t\ta[choose(i)] = val[i << 1]; // \u8fb9\u6743\u8f6c\u70b9\u6743\n        \n\tfor(register int i = 1;i <= n;++i)\n\t\tst[i][0] = a[rk[i]];\n\tfor(register int i = 1;(1 << i) <= n;++i)\n\t\tfor(register int j = 1;j + (1 << i) - 1 <= n;++j)\n\t\t\tst[j][i] = min(st[j][i - 1],st[j + (1 << i - 1)][i - 1]); // ST \u8868\u9884\u5904\u7406\n            \n\tscanf(\"%d\",&q);\n\tint x,y;\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(!dsu.sameset(x,y))\n\t\t\tputs(\"-1\");\n\t\telse\n\t\t\tprintf(\"%d\\n\",answer(x,y));\n\t}\n}\n```",
        "postTime": 1538579113,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u9996\u5148\u56e0\u4e3a\u8be2\u95ee\u7684\u53ea\u662f\u4e24\u70b9\u4e4b\u95f4\u8981\u5230\u7684\u6700\u5927\u8f7d\u91cd,\u6211\u4eec\u53ef\u4ee5\u5728\u4e24\u70b9\u4e4b\u95f4\u5168\u90fd\u53d6\u6700\u5927\u8fb9\u901a\u8fc7,\u8fd9\u6837\u53ea\u8981\u6c42\u4e00\u4e2a\u6700\u5927\u751f\u6210\u6811\u7136\u540e\u5728\u6811\u4e0a\u6c42\u4e24\u70b9\u4e4b\u95f4\u6700\u5c0f\u7684\u8fb9\u6743\u5373\u53ef.  \n\u9898\u89e3\u91cc\u90fd\u662f\u500d\u589e\u5199\u7684,\u800c\u6211\u4e0d\u4f1a\u500d\u589e,\u53d1\u73b0\u6811\u5256\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u7ef4\u62a4\u4e24\u70b9\u95f4\u6700\u5c0f\u8fb9\u6743,\u867d\u7136\u8981\u5199\u8fb9\u6743\u6811\u5256,\u4e0d\u8fc7\u4e5f\u6ca1\u96be\u5230\u54ea\u91cc\u53bb.  \n\u7136\u800c\u5751\u7239\u7684codevs\u548cvijos\u8ba9\u6211\u7684\u9519\u8bef\u4ee3\u7801AC\u4e86,\u5bfc\u81f4\u6211\u5728\u6d1b\u8c37\u4e0a\u88abhack\u4e86.  \n\u4e4b\u6240\u4ee5\u6211\u4f1a\u88abhack,\u662f\u56e0\u4e3a\u56fe\u4e0d\u4e00\u5b9a\u8fde\u901a,\u4ece\u800c\u6c42\u51fa\u7684\u6700\u5927\u751f\u6210\"\u6811\"\u4e5f\u4e0d\u4e00\u5b9a\u8fde\u901a.   \n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5728\u6811\u5256\u7684\u65f6\u5019\u4e5f\u4e0d\u80fd\u5355\u5355\u7528$1$\u8282\u70b9\u6765$dfs$,\u800c\u662f\u5e94\u8be5\u904d\u5386\u6240\u6709\u7684\u8282\u70b9\u6765\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u88ab$dfs$\u5230\u7684\u65f6\u95f4\u6233,\u5373$dfn$.  \n\u4e5f\u5c31\u662f\u53ea\u8981\u628a`dfs1(1,0),dfs2(1,1)`\u6539\u6210\n```cpp\nfor (int i=1;i<=n;++i) \n  if (!dfn[i]) dfs1(i,0),dfs2(i,i);\n```\n\u8fd9\u6837\u6211\u4eec\u7ef4\u62a4\u7684\u5c31\u662f\u4e00\u4e2a\u68ee\u6797\u4e86,\u6211\u4eec\u5bf9\u68ee\u6797\u91cc\u7684\u6bcf\u4e00\u68f5\u6811\u90fd\u6811\u5256\u4e00\u6b21,\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u68f5\u6811\u5185,\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u94fe\u4e0a\u6700\u5c0f\u503c\u8ba1\u7b97,\u5426\u5219\u8fd4\u56de$-1$.  \n\u8fd9\u6837\u8fd9\u9898\u5c31\u641e\u5b9a\u4e86.\n```cpp\n#include<bits/stdc++.h> //Ithea Myse Valgulious\n/*\u5feb\u8bfb\u5feb\u5199\u88ab\u6211\u7701\u7565\u4e86.*/\nusing namespace std;\nconst int yuzu=5e4;\ntypedef int fuko[yuzu|10];\nint n,m;\nstruct edge{\nint u,v,lim;\nbool operator <(const edge &b) const{\n  return lim>b.lim;\n  }\n}e[yuzu|10];\n\nnamespace dsu{\nfuko fa;\nvoid init(int n){for (int i=1;i<=n;++i) fa[i]=i;}\nint find(int x){return x^fa[x]?fa[x]=find(fa[x]):x;}\nint mg(int u,int v){\n  int fu=find(u),fv=find(v);\n  return fu^fv?fa[fu]=fv,1:0;\n  }\n}using dsu::find;\n\nfuko head;\nstruct node{int fr,to,next,lim;}b[yuzu<<2|10];\nvoid addedge(int u,int v,int lim){b[++*head]=node{u,v,head[u],lim},head[u]=*head;}\n\nnamespace tree_chain_splitting{ // \u8fb9\u6743\u6811\u5256,\u505a\u6cd5\u8be6\u89c1p4315\nfuko sz,son,dep,fa,top,dfn,ord,a;\nvoid dfs1(int u,int f){\n  sz[u]=1,dep[u]=dep[fa[u]=f]+1;\n  for (int i=head[u];i;i=b[i].next){\n    int v=b[i].to;\n    if (v^f){\n      dfs1(v,u),sz[u]+=sz[v];\n      if (sz[v]>sz[son[u]]) son[u]=v;\n      }\n    }\n  }\nvoid dfs2(int u,int _top){\n  top[u]=_top,ord[dfn[u]=++*top]=u;\n  if (son[u]) dfs2(son[u],_top);\n  for (int i=head[u];i;i=b[i].next){\n    int v=b[i].to;\n    if (v^fa[u]&&v^son[u]) dfs2(v,v);\n    }\n  }\ntypedef int karen[yuzu<<2|13];\nstruct segtree{\n#define le rt<<1\n#define ri le|1\n#define ls le,l,mid\n#define rs ri,mid+1,r\nkaren xiao;\nvoid build(int rt=1,int l=1,int r=n){\n  if (l==r) xiao[rt]=a[l];\n  else{\n    int mid=l+r>>1;\n    build(ls),build(rs);\n    xiao[rt]=min(xiao[le],xiao[ri]);\n    }\n  }\nint query(int ql,int qr,int rt=1,int l=1,int r=n){\n  if (ql>r||qr<l) return 0x3f3f3f3f;\n  if (ql<=l&&qr>=r) return xiao[rt];\n  int mid=l+r>>1;\n  return min(query(ql,qr,ls),query(ql,qr,rs));\n  }\n}my_;\n\nvoid preedge(){\n  for (int i=1;i<=*head;i+=2){\n    int &u=b[i].fr,&v=b[i].to;\n    if (dep[u]>dep[v]) swap(u,v);\n    a[dfn[v]]=b[i].lim;\n    }\n  }\n  \nint query(int u,int v){\n  if (find(u)^find(v)) return -1;  // \u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u8f93\u51fa-1.\n  int ans=0x3f3f3f3f;\n  for (;top[u]^top[v];u=fa[top[u]]){\n    if (dep[top[u]]<dep[top[v]]) swap(u,v);\n    ans=min(ans,my_.query(dfn[top[u]],dfn[u]));\n    }\n  if (dep[u]>dep[v]) swap(u,v);\n  return min(ans,my_.query(dfn[u]+1,dfn[v]));\n  }\nint main(){\n  for (int i=1;i<=n;++i) \n    if (!dfn[i]) dfs1(i,0),dfs2(i,i); // \u9664\u4e86\u8fd9\u4e00\u53e5\u548c\u666e\u901a\u6811\u5256\u6ca1\u4ec0\u4e48\u5206\u522b. \n  preedge();\n  my_.build();\n  for (int q=read();q--;){\n    int u=read(),v=read();\n    write(query(u,v)),pl;\n    }\n  }\n}\n\nint main(){\nint i;\nn=read(),m=read();\ndsu::init(n);\nfor (i=1;i<=m;++i){\n  int u=read(),v=read();\n  e[i]=edge{u,v,read()};\n  }\nsort(e+1,e+m+1);\nfor (i=1;i<=m;++i){\n  int u=e[i].u,v=e[i].v,c=e[i].lim;\n  if (dsu::mg(u,v)){\n    addedge(u,v,c);\n    addedge(v,u,c);\n    }\n  }// \u8fd9\u91cc\u6c42\u6700\u5927\u751f\u6210\u6811.\ntree_chain_splitting::main();\n}\n```\n\u8c22\u8c22\u5927\u5bb6.",
        "postTime": 1538118253,
        "uid": 49371,
        "name": "Fuko_Ibuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u6700\u5c0f\u751f\u6210\u6811+\u500d\u589eLCA\u7ef4\u62a4\u8def\u4e0a\u4fe1\u606f\u7684\u9898\n\n\u4f46\u662f\u6211\u5b9e\u5728\u61d2\u5f97\u518d\u6253\u4e00\u904dkruskal+\u6811\u5256\u4e86\n\n\u60f3\u8d77\u6765\u521a\u521a\u7528LCT A\u4e86\u6700\u5c0f\u751f\u6210\u6811\u5c31\u628a\u4e4b\u524d\u7684\u4ee3\u7801\u62ff\u4e86\u8fc7\u6765\u9b54\u6539\u4e86\u4e00\u4e0b\uff08\u628a\u6240\u6709\u7684\u6700\u5927\u6539\u6210\u6700\u5c0f\uff09\u5c31\u628a\u8fd9\u9053\u9898\u8fc7\u4e86\n\n\u8981\u70b9\u662f\uff1a\n 1. \u7528\u4e00\u4e2a\u70b9\u6765\u4ee3\u8868\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u8bbe\u4e3a\u8fb9\u6743\uff0c\u771f\u6b63\u7684\u70b9\u6743\u503c\u8bbe\u4e3ainf\n 2. splay\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u5b50\u6811\u4e2d\u70b9\u6743\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u6240\u5728\u7684\u70b9\u7f16\u53f7\n 3. \u5728\u52a0\u4e00\u6761\u8fb9\u65f6\u5224\u65ad\u4e24\u7aef\u70b9\u662f\u5426\u76f8\u8fde\n \n\u5982\u679c\u4e0d\u76f8\u8fde\u5c31\u76f4\u63a5\u8fde\u4e0a\n \n\u5982\u679c\u76f8\u8fde\u5c31\u627e\u5230\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u8fb9\u8fb9\u6743\u5c0f\u5c31\u65ad\u5f00\u90a3\u6761\u8fb9\u518d\u8fde\u4e0a\u8fd9\u6761\u8fb9\uff0c\u4ee5\u7ef4\u6301\u6700\u5927\u751f\u6210\u6811\u7684\u6700\u5927\u6027\u8d28\n\n\u67e5\u8be2\u65f6\u76f4\u63a5split\u67e5\u8def\u5f84\u6700\u5927\u503c\u5c31\u884c\u4e86\n\n\u4ee3\u7801\uff08\u5168\u7a0b\u6307\u9488/C++11\u5165\u8111\uff0c\u8bf7\u6ce8\u610f\u907f\u96f7\uff09\n\n```cpp\n/*\nDOCUMENT NAME \"20180904-bnds0294.cpp\"\nCREATION DATE 2018-09-04\nSIGNATURE CODE_20180904_BNDS0294\nCOMMENT #294. NOIP2013\u63d0\u9ad8\u7ec4day1\u7b2c\u4e09\u9898 / LCT\u52a8\u6001\u6700\u5927\u751f\u6210\u6811+LCT\u6c42\u94fe\u6700\u5c0f\u503c\n*/\n\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nconst int infinity = 1e8;\nconst int MaxN = 1e6 + 10, MaxM = 5e6 + 10;\n\ntemplate<typename IntType = int>   // \u6a21\u677f\u9ed8\u8ba4\u7c7b\u578b\u9700\u8981C++11\nIntType read() {\n\tIntType val = 0;\n\tint c;\n\tbool invflag = false;\n\twhile (!isdigit(c = getchar()))\n\t\tif (c == '-')\n\t\t\tinvflag = true;\n\tdo {\n\t\tval = (val << 1) + (val << 3) + c - '0';\n\t} while (isdigit(c = getchar()));\n\tungetc(c, stdin);\n\tif (invflag)\n\t\treturn -val;\n\telse\n\t\treturn val;\n}\ntemplate<>\nstring read<string>() {\n\tstring str;\n\tstr.clear();\n\tint c;\n\twhile (iscntrl(c = getchar()) || isblank(c));\n\tdo {\n\t\tstr.push_back(c);\n\t} while (!(iscntrl(c = getchar()) || isblank(c)));\n\tungetc(c, stdin);\n\treturn str;\n}\ntemplate<typename IntType>\nvoid read(IntType& x) { x = read<IntType>(); }\ntemplate<typename IntType, typename... Args>     // \u6a21\u677f\u53c2\u6570\u5305\u9700\u8981C++11\nvoid read(IntType& x, Args&... args) { x = read<IntType>(); read(args...); }\n\nstruct node {\n\tnode* lson, *rson, *father;\n\tint val, id;\n\tint minval;\n\tnode* minfrom;\n\tbool lazy;\n\n\tnode* cnode1, *cnode2; // for edges\n};\n\nnode* nodes[MaxN];\nnode* nodeedges[MaxM];\nnode mem[2 * (MaxN + MaxM)], *memtop = mem;\n#define ALLOCATE (memtop++)\n\ntypedef int sontype;\nconst sontype lson = 0, rson = 1, lightson = 2;\nnode*& getson(node* father, sontype type) { return type == lson ? father->lson : father->rson; }\nsontype tellwhich(node* son) {\n\tif (son->father == nullptr)\n\t\treturn lightson;\n\telse if (son->father->lson == son)\n\t\treturn lson;\n\telse if (son->father->rson == son)\n\t\treturn rson;\n\telse\n\t\treturn lightson;\n}\nvoid connect(node* father, node* son, sontype type) {\n\tif (father != nullptr)\n\t\tgetson(father, type) = son;\n\tif (son != nullptr)\n\t\tson->father = father;\n}\n\nvoid update(node* p) {\n\tp->minval = p->val;\n\tp->minfrom = p;\n\tif (p->lson != nullptr)\n\t\tif (p->lson->minval < p->minval) {\n\t\t\tp->minval = p->lson->minval;\n\t\t\tp->minfrom = p->lson->minfrom;\n\t\t}\n\tif (p->rson != nullptr)\n\t\tif (p->rson->minval < p->minval) {\n\t\t\tp->minval = p->rson->minval;\n\t\t\tp->minfrom = p->rson->minfrom;\n\t\t}\n}\n\nbool notroot(node* p) { return p->father != nullptr && (p->father->lson == p || p->father->rson == p); }\n\nvoid rotate(node* p) {\n\tsontype t = tellwhich(p);\n\tnode* f = p->father, *gf = p->father->father, *b = getson(p, 1 - t);\n\tif (notroot(f))\n\t\tconnect(gf, p, tellwhich(f));\n\telse\n\t\tp->father = f->father;\n\tconnect(p, f, 1 - t);\n\tconnect(f, b, t);\n\tupdate(f);\n\tupdate(p);\n}\n\nvoid pushdown(node* p) {\n\tif (p->lazy) {\n\t\tswap(p->lson, p->rson);\n\t\tif (p->lson != nullptr)\n\t\t\tp->lson->lazy = !p->lson->lazy;\n\t\tif (p->rson != nullptr)\n\t\t\tp->rson->lazy = !p->rson->lazy;\n\t\tp->lazy = false;\n\t}\n}\n\nvoid pushchain(node* p) {\n\tif (notroot(p))\n\t\tpushchain(p->father);\n\tpushdown(p);\n}\n\nvoid splay(node* p) {\n\tpushchain(p);\n\twhile (notroot(p)) {\n\t\tif (notroot(p->father))\n\t\t\tif (tellwhich(p) == tellwhich(p->father))\n\t\t\t\trotate(p->father);\n\t\t\telse\n\t\t\t\trotate(p);\n\t\trotate(p);\n\t}\n}\n\nvoid access(node* p) {\n\tnode* prev = nullptr;\n\twhile (p != nullptr) {\n\t\tsplay(p);\n\t\tp->rson = prev;\n\t\tupdate(p);\n\t\tprev = p;\n\t\tp = p->father;\n\t}\n}\n\nvoid makeroot(node* p) {\n\taccess(p);\n\tsplay(p);\n\tp->lazy = !p->lazy;\n}\n\nnode* findroot(node* p) {\n\taccess(p);\n\tsplay(p);\n\tpushdown(p);\n\twhile (p->lson != nullptr) {\n\t\tp = p->lson;\n\t\tpushdown(p);\n\t}\n\treturn p;\n}\n\nnode* split(node* x, node* y) {\n\tmakeroot(x);\n\taccess(y);\n\tsplay(y);\n\treturn y;\n}\n\nvoid link(node* x, node* y) {\n\tmakeroot(x);\n\tif (findroot(y) != x)\n\t\tx->father = y;\n}\n\nvoid cut(node* x, node* y) {\n\tmakeroot(x);\n\taccess(y);\n\tsplay(y);\n\tx->father = y->lson = nullptr;\n\tupdate(y);\n}\n\n\nvoid cutedge(node* e) {\n\tcut(e, e->cnode1);\n\tcut(e, e->cnode2);\n}\n\nint ans;\nvoid addedge(int id, int u, int v, int len) {\n\tnode* e = nodeedges[id] = ALLOCATE;\n\te->minval = e->val = len;\n\te->id = -id;\n\tnode* p = nodes[u], *q = nodes[v];\n\tmakeroot(p);\n\tif (findroot(q) != p) {\n\t\te->cnode1 = p;\n\t\te->cnode2 = q;\n\t\tlink(p, e);\n\t\tlink(q, e);\n\t\tans += len;\n\t}\n\telse {\n\t\tnode* s = split(p, q);\n\t\tif (s->minval < len) {\n\t\t\tnode* from = s->minfrom;\n\t\t\tans = ans - s->minval + len;\n\t\t\tcutedge(from);\n\t\t\te->cnode1 = p;\n\t\t\te->cnode2 = q;\n\t\t\tlink(p, e);\n\t\t\tlink(q, e);\n\t\t} // Else: do nothing (skip edge)\n\t}\n}\n\nint query(int u, int v) {\n\tmakeroot(nodes[u]);\n\tif (findroot(nodes[v]) != nodes[u])\n\t\treturn -1;\n\telse // v accessed && splayed in findroot -> (u, v) spilted\n\t\treturn nodes[v]->minval;\n}\n\nint n, m;\nint u, v, len;\nint q;\n\nmap<pair<int, int>, int> edges;\n\nint main(int argc, char* argv[]) {\n\n\tread(n, m);\n\tfor (int i = 1; i <= n; i++) {\n\t\tnodes[i] = ALLOCATE;\n\t\tnodes[i]->id = i;\n\t\tnodes[i]->val = nodes[i]->minval = infinity;\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tread(u, v, len);\n\t\tif (u > v)\n\t\t\tswap(u, v);\n\t\tauto iter = edges.find(make_pair(u, v));\n\t\tif (iter == edges.end())\n\t\t\tedges.emplace(make_pair(u, v), len);\n\t\telse\n\t\t\titer->second = max(iter->second, len);\n\t}\n\n\tint id = 0;\n\tfor (auto& i : edges)\n\t\taddedge(++id, i.first.first, i.first.second, i.second);\n\n\tread(q);\n\tfor (int i = 1; i <= q; i++) {\n\t\tread(u, v);\n\t\tprintf(\"%d\\n\", query(u, v));\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1536066452,
        "uid": 53151,
        "name": "\u6d29\u77e2\u8bf9\u8bbf\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "[\u9898\u89e3\u5728\u535a\u5ba2\u91cc\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/LovToLZX/)\n\n\u672c\u9898\u6c42\u89e3\u5927\u81f4\u9700\u8981\u5982\u4e0b\u51e0\u4e2a\u6982\u5ff5\n\n\u2460[\u5e76\u67e5\u96c6](http://www.cnblogs.com/hapjin/p/5478352.html) \u2461[kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811](https://blog.csdn.net/luomingjun12315/article/details/47700237)\n\n\u2462[\u500d\u589e\u6c42LCA](https://www.cnblogs.com/sllr15/p/5164996.html) \u2463[ST\u8868](http://www.cnblogs.com/zwfymqz/p/8581995.html) \n\n\u9996\u5148\n\n\u6211\u4eec\u7528\u8d2a\u5fc3\u601d\u60f3\u601d\u8003\u4e00\u4e0b\u4e0b\n\n# \u5982\u679c\u4eceA\u5230B \u4e00\u5b9a\u4f1a\u9009\u62e9\u4e00\u6761\u6700\u5c0f\u8fb9\u6743\u6700\u5927\u7684\u8def\u5f84\n\n~~\u653e\u5f03\u4e8c\u5206\u7b54\u6848~~\n\n\u53ef\u662f\u9762\u5bf9\u591a\u7ec4\u6c42\u89e3 \n\n\u6211\u4eec\u4e0d\u5f97\u4e0d\u9884\u5904\u7406\u4f18\u5316\n\nQ\uff1a\u600e\u4e48\u4f18\u5316\uff1f\uff1f \n\nA\uff1a\u53ef\u4ee5\u4f7f\u7528kruskal\u5efa\u7acb\u6700\u5927\u751f\u6210\u6811\n\nQ\uff1a\u4e3a\u795e\u9b54\u8fd9\u4e48\u505a\u662f\u6b63\u786e\u7684\n\nA\uff1a\u2460\u4e00\u68f5\u6811\u4e0a\u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u90fd\u662f\u8054\u901a\u7684\n\n\u2461\u6700\u5927\u751f\u6210\u6811 \u4fdd\u8bc1\u4e86\u4efb\u610f\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6700\u5927\u5316\n\n\u4e00\u68f5\u6811\u5efa\u597d\u4e86 \u63a5\u4e0b\u6765\u80bf\u672b\u529e\n\n# \u8003\u8651\u4eceA\u81f3B \u5982\u679c\u5728\u6811\u4e0a \u4e00\u5b9a\u7ecf\u8fc7\u5176LCA\n\n# \u5e76\u4e14\u7ecf\u8fc7\u5176\u4ed6\u70b9 \u4e0d\u4f1a\u5bf9\u6700\u7ec8\u7b54\u6848\u4ea7\u751f\u8d21\u732e\n\nQ\uff1a\u4e3a\u4ec0\u4e48\u5462 \uff1f\uff1f\uff1f\uff1f\uff1f\n\nA\uff1a\u6211\u4eec\u5047\u8bbeLCA(A\uff0cB)=C\n\n# \u4eceA\u81f3C\u518d\u81f3B\u662f\u4eceA\u81f3B\u7684\u5fc5\u7531\u4e4b\u8def \n\n\u591a\u770b\u770b\u56fe\u53ef\u4ee5\u7406\u89e3\n\n\u5176\u6b21 \u5982\u679c\u518d\u8d70\u5176\u4ed6\u8def\u5f84 \n\n# \u4ea7\u751f\u5f71\u54cd\u7684\u53ea\u4f1a\u662f\u66f4\u5927\u7684\u8def\u5f84\n\n# \u53ef\u662f\u6211\u4eec\u8fd8\u662f\u8981\u8d70\u5fc5\u7ecf\u4e4b\u8def \u9650\u5236\u662f\u4e0d\u4f1a\u53d8\u7684\n\n\u90a3\u4e48\u4e0e\u53ea\u8d70\u5fc5\u7ecf\u4e4b\u8def\u76f8\u6bd4 \u5c82\u4e0d\u662f\u767d\u8d39\u52b2\uff1f\uff1f\uff1f\n\n\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u4e0a\u9762\u7ed3\u8bba\u662f\u5bf9\u7684\n\n\u7136\u540e \u500d\u589e\u9884\u5904\u7406\uff08\u91cd\u70b9 \u91cd\u70b9 \u91cd\u70b9\uff09\n\n1.\u9996\u5148 \u500d\u589e\u5904\u7406LCA\n\n2.\u5176\u6b21 \u500d\u589e\u540c\u65f6 \u6811\u4e0a\u5904\u7406\u533a\u95f4\u6700\u5c0f\u503c\n\n\u7ef4\u62a4\u4e24\u4e2a\u503c fa[x][i]\u4e0edis[x][i]\n\nfa[x][i] \u8868\u793a\u8282\u70b9x\u5411\u4e0a\u8df32^i\u6b65\u7684\u8282\u70b9\n\ndis[x][i] \u8868\u793a\u8282\u70b9x\u5411\u4e0a\u8df32^i\u6b65\u7684\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u503c\n\nTA\u7684\u590d\u6742\u5ea6\u662fO\uff08nlogn\uff09 \u5bf9\u5427\n\nCODE\uff1a\n```\n#pragma GCC optimize(3)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<string>\n#include<queue>\n#include<map>\n#include<stack>\n#include<list>\n#include<set>\n#include<deque>\n#include<vector>\n#include<ctime>\n#define ll long long\n#define inf 0x7fffffff\n#define N 500008\n#define IL inline\n#define M 1008611\n#define D double\n#define ull unsigned long long\n#define R register\nusing namespace std;\ntemplate<typename T>void read(T &a)\n{\n    T x=0,f=1;char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-')f=0;ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        x=(x<<1)+(x<<3)+ch-'0';ch=getchar();\n    }\n    a=f?x:-x;\n}\n/*-------------OI\u4f7f\u6211\u5feb\u4e50-------------*/\nstruct Tree{\n\tll to,fro,nex,wi;\n\tfriend bool operator < (const Tree &A,const Tree &B){\n\t\treturn A.wi > B.wi;\n\t}\n}tre[N<<1],e[N<<1];\nll head[N<<1];\nll father[N];\nll dep[N>>2],dis[N>>2][30],fa[N>>2][30];\nll n,m,Q,tot;\nIL void add(ll ai,ll bi,ll ci){\n\te[++tot].fro=ai;\n\te[tot].to=bi;\n\te[tot].wi=ci;\n\te[tot].nex=head[ai];\n\thead[ai]=tot;\n}\nIL ll find(ll xi) {return xi == father[xi] ? father[xi] : father[xi] = find(father[xi]);}\n//\u5e76\u67e5\u96c6 + \u8def\u5f84\u538b\u7f29\uff08\u6309\u79e9\u5408\u5e76\u672c\u849f\u84bb\u8fd8\u505a\u4e0d\u5230\uff09 \nIL void KRUSKAL(){//\u6c42\u6700\u5927\u751f\u6210\u6811 \n\tll cnt=0;\n\tfor(R ll i=1;i<=m;++i){\n\t\tll fx=find(tre[i].fro),fy=find(tre[i].to);\n\t\tif(fx!=fy){\n\t\t\tfather[fx]=fy;\n\t\t\tadd(tre[i].to,tre[i].fro,tre[i].wi);\n\t\t\tadd(tre[i].fro,tre[i].to,tre[i].wi);\n\t\t\tcnt++;\n\t\t\tif(cnt==n-1) break;\n\t\t} \n\t}\n}\nIL void dfs(ll now){//dfs\u5411\u4e0b\u5904\u7406\n\tfor(R ll i=head[now];i;i=e[i].nex){\n\t\tll v=e[i].to;\n\t\tif(dep[v]==0){\n\t\t\tdep[v]=dep[now]+1;\n\t\t\tfa[v][0]=now;\n\t\t\tdis[v][0]=e[i].wi;\n\t\t\tdfs(v);\n\t\t}\n\t}\n}\nIL void road(){\n\tfor(R ll i=1;i<=n;++i){\n\t\tif(dep[i]==0){\n\t\t\tdep[i]=1;\n\t\t\tfa[i][0]=0;\n\t\t    dfs(i);\n\t\t}\n\t}\n\tfor(R ll i=1;i<=20;++i)\n\t for(R ll j=1;j<=n;++j)\n\t {\n\t \tfa[j][i]=fa[fa[j][i-1]][i-1];\n\t \tdis[j][i]=min(dis[j][i-1],dis[fa[j][i-1]][i-1]);\n\t } \n}\nIL ll LCA(ll xi,ll yi){//\u6c42\u89e3\u5173\u952e \n\tll ans=inf;\n\tif(dep[xi]<dep[yi]) swap(xi,yi);\n\tfor(R ll i=20;i>=0;--i){\n\t\tif(dep[fa[xi][i]]>=dep[yi])\n\t\t{\n\t\t\tans=min(ans,dis[xi][i]);\n\t\t\txi=fa[xi][i];\n\t\t} \n\t}\n\tif(xi==yi) return ans;\n\tfor(R ll i=20;i>=0;--i){\n\t\tif(fa[xi][i]!=fa[yi][i]){\n\t\t\tans=min(ans,min(dis[xi][i],dis[yi][i]));\n\t\t\txi=fa[xi][i];yi=fa[yi][i];\n\t\t}\n\t}\n\tans=min(ans,min(dis[xi][0],dis[yi][0]));\n\treturn ans;\n}\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n    read(n);read(m);\n    for(R ll i=1;i<=m;++i){\n    \tread(tre[i].fro);read(tre[i].to);read(tre[i].wi);\n\t}\n\tfor(R ll i=1;i<=n;++i) father[i]=i;\n\tsort(tre+1,tre+m+1);\n\tKRUSKAL();//\u6c42\u89e3\u6700\u5927\u751f\u6210\u6811 \n\troad();//dfs\u500d\u589e\u9884\u5904\u7406 \n\tread(Q);\n\twhile(Q--){\n\t\tll xi,yi;\n\t\tread(xi);read(yi);\n\t\tif(find(xi)==find(yi)) printf(\"%lld\\n\",LCA(xi,yi));//\u6c42\u89e3LCA\u8def\u5f84\u4e2dmin \n\t\telse printf(\"-1\\n\");\n\t}\n//\tfclose(stdin);\n//\tfclose(stdout);\n\treturn 0;\n}\n\n```\n\nNOIP2018\u5373\u5c06\u5230\u6765\n\n\u795d\u613f\u5404\u4f4ddalao RP++ \u5168\u573aAK",
        "postTime": 1535446461,
        "uid": 87931,
        "name": "tcswuzb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u65e0\u5411\u56fe\uff08\u6709\u91cd\u8fb9\uff0c\u65e0\u81ea\u73af\uff09\uff0c\u6c42q\u5bf9\u70b9\u4e4b\u95f4\u6700\u5c0f\u8fb9\u6700\u5927\u7684\u8def\u5f84\n$0<n<10^4 , 0<m<50,000 , 0<q<30,000$\n\n\u770b\u5230\u9898\u76ee\u5f88\u5bb9\u6613\u60f3\u5230**\u4e8c\u5206**+\u5e76\u67e5\u96c6\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(log_2^{100000} \\times mq).$\u5f88\u660e\u663e\u4f1a\u8d85\u65f6\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n\u5c1d\u8bd5\u6c42\u539f\u56fe\u7684**\u6700\u5927\u751f\u6210\u6811**\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff1a\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u4e00\u5b9a\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\uff08\u4e0b\u6587\u7684*\u751f\u6210\u6811*\u6307\u6700\u5927\u751f\u6210\u6811\uff09\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u70b9u\u5230\u70b9v\u4e4b\u95f4\u7684\u6700\u5927\u7684\u6700\u5c0f\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u6700\u5c0f\u8fb9\u4e0d\u5728\u751f\u6210\u6811\u4e0a\uff0c\u90a3\u4e48\u751f\u6210\u6811\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u6bd4\u5b83\u5927\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a\u8054\u901a\u5feb\uff0c\u6240\u4ee5\uff0c\u8fd9\u6761\u6700\u5c0f\u8fb9\u4e00\u5b9a\u5728\u751f\u6210\u6811\u4e0a\u3002\n\n\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6c42\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u6709\u5927\u4f6c\u5c31\u4f1a\u8df3\u51fa\u6765\u8bf4*\u6811\u5256*\uff01~~\u4f46\u662f\u4f17\u6240\u5468\u77e5\uff0c\u6811\u5256\u96be\u5199\uff0c\u6211\u4e0d\u4f1aQAQ~~\u3002\u53ef\u4ee5\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u8bf4*\u6811\u4e0a\u500d\u589e*\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5355\u6b21\u67e5\u8be2\uff09\u4ec5\u4e3a$O(log_2^n)$\u3002\n\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b*\u6811\u4e0a\u500d\u589e*\u3002\u6811\u4e0a\u500d\u589e\u5c31\u662f**\u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u7ef4\u62a4\u6811\u4e0a\u7684\u4fe1\u606f**\u3002\u4e3e\u4e2a\u6817\u5b50\uff0c\u6811\u4e0a\u500d\u589e\u6700\u57fa\u7840\u7684\u6570\u7ec4\u5c31\u662f$fa[i][j]$\uff0c\u8868\u793a\u4ece$i$\u8fd9\u4e2a\u70b9\u5411\u4e0a\u8df3$2^j$\u6b65\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u9884\u5904\u7406\u51fa$fa[i][j]$\uff1a\n$$fa[i][j] = fa[ fa[i][j-1] ][j-1]$$\n\n\u5728\u6811\u4e0a\u500d\u589e\u7684\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5f88\u591a\u4fe1\u606f\uff0c\u4f8b\u5982\u548c\uff0c\u6700\u503c\uff0cGCD\u7b49\u7b49\uff0c\u8fd9\u9053\u9898\u9700\u8981\u5229\u7528*\u8fb9*\u6743*\u6700\u5c0f\u503c*\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528$Min[i][j]$\u8868\u793a\u4ece$i$\u8fd9\u4e2a\u70b9\u5411\u4e0a\u8df3$2^j$\u6b65\u7ecf\u8fc7\u7684\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u9884\u5904\u7406\u51fa$Min[i][j]$\uff1a\n$$Min[i][j] = min\\{Min[i][j-1], Min[ fa[i][j-1] ][j-1]\\}$$\n\n\u7ef4\u62a4\u51fa\u4e86\u8fd9\u4e9b\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6c42\u51fa\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u4e86\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5148\u6c42\u51fau\u5230LCA\u7684\u6700\u5c0f\u503c\uff0c\u518d\u6c42\u51fav\u5230LCA\u7684\u6700\u5c0f\u503c\uff0c\u628a\u5b83\u4eec\u5408\u5e76\u5373\u53ef\u3002\n\n\u9884\u5904\u7406\uff1a\n```C++\nfor (int j = 1; j <= 14; ++j)\n        for (int i = 1; i <= n; ++i){\n            fa[i][j] = fa[ fa[i][j-1] ][j-1];\n            Min[i][j] = min(Min[i][j-1] , Min[ fa[i][j-1] ][j-1]);\n        }\n```\n\n\u6c42\u4e24\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\n```C++\nint Dis(int u, int v){\n\t//printf(\"Dis %d %d \", u, v);\n    int L = LCA(u,v); int res = 1000000000;\n    int lenu = dep[u] - dep[L];\n    for (int j = 0; j <= 14; ++j) if (lenu >> j & 1) res = min(res, Min[u][j]), u = fa[u][j];\n    int lenv = dep[v] - dep[L];\n    for (int j = 0; j <= 14; ++j) if (lenv >> j & 1) res = min(Min[v][j], res), v = fa[v][j];\n    //printf(\"%d\\n\", res);\n    return res;\n}\n```\n\n### Code\n\n**(UPD 2019.1.17) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u6d1b\u8c37\u8be5\u9898\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a(\u4e5f\u5c31\u662f\u8bf4\u6700\u540e\u53ef\u80fd\u6709\u591a\u68f5\u6811), \u9700\u8981\u6ce8\u610f**\n\n```C++\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int maxm = 50007;\nconst int maxn = 10007;\nint n, m;\nstruct Edge{\n    int u, v, cost;\n} a[maxm];\n\nbool cmp(Edge a, Edge b){\n    return a.cost > b.cost;\n}\n//EdgeTable\nint edgenum, head[maxn], Next[maxn << 1], vet[maxn << 1], val[maxn << 1];\ninline void addedge(int u, int v, int cost){\n    ++edgenum;\n    vet[edgenum] = v;\n    val[edgenum] = cost;\n    Next[edgenum] = head[u];\n    head[u] = edgenum;\n}\n//Union-Set\nint Fa[maxn];\nint Find(int x){return Fa[x] = Fa[x]==x?Fa[x]:Find(Fa[x]);}\ninline void Union(int u, int v){\n    int F1 = Find(u), F2 = Find(v);\n    if (F1 != F2) Fa[F2] = F1;\n}\nvoid Union_Set_init(){\n    for (int i = 1; i <= n; ++i)\n        Fa[i] = i;\n}\n\nint fa[maxn][20], Min[maxn][20], dep[maxn];\nvoid DFS(int u, int pre, int d){\n    fa[u][0] = pre; dep[u] = d;\n    for (int e = head[u]; e; e = Next[e]){\n        int v = vet[e], cost = val[e];\n        if (v != pre){\n        \tMin[v][0] = cost;\n        \t//printf(\"v = %d, cost = %d, %d\\n\",v, cost, Min[v][0]);\n\t\t\tDFS(v, u, d + 1);\n\t\t}\n    }\n}\n\nint LCA(int u, int v){ //\u500d\u589e\u6c42LCA\n    if (dep[u] < dep[v]) swap(u, v);\n    int len = dep[u] - dep[v];\n    for (int j = 0; j <= 14; ++j) if (len >> j & 1) u = fa[u][j];\n    for (int j = 14; j >= 0; --j) if (fa[u][j] != fa[v][j]) u = fa[u][j], v = fa[v][j];\n    //printf(\"LCA %d %d %d\\n\", u, v, u==v?u:fa[u][0]);\n    if (u==v) return u; return fa[u][0];\n}\n\nint Dis(int u, int v){ //\u6c42\u4e24\u70b9\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\n\t//printf(\"Dis %d %d \", u, v);\n    int L = LCA(u,v); int res = 1000000000;\n    int lenu = dep[u] - dep[L];\n    for (int j = 0; j <= 14; ++j) if (lenu >> j & 1) res = min(res, Min[u][j]), u = fa[u][j];\n    int lenv = dep[v] - dep[L];\n    for (int j = 0; j <= 14; ++j) if (lenv >> j & 1) res = min(Min[v][j], res), v = fa[v][j];\n    //printf(\"%d\\n\", res);\n    return res;\n}\n\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; ++i){\n        scanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].cost);\n    }\n    sort(a + 1, a + 1 + m, cmp);\n    Union_Set_init();\n    for (int i = 1; i <= m; ++i){\n        int tu = a[i].u, tv = a[i].v, cost = a[i].cost;\n        if (Find(tu) != Find(tv)){\n            Union(tu, tv);\n            addedge(tu, tv, cost);\n            addedge(tv, tu, cost);\n        }\n    }\n    for (int i = 1; i <= n; ++i)\n    \tif (!dep[i]) DFS(1, 0, 1);\n    for (int j = 1; j <= 14; ++j)\n        for (int i = 1; i <= n; ++i){\n            fa[i][j] = fa[ fa[i][j-1] ][j-1];\n            Min[i][j] = min(Min[i][j-1] , Min[ fa[i][j-1] ][j-1]);\n        }\n    int Q; scanf(\"%d\", &Q);\n    while (Q--){\n        int u, v; scanf(\"%d%d\", &u, &v);\n        if (Find(u) == Find(v))printf(\"%d\\n\", Dis(u,v));\n        else printf(\"-1\\n\");\n    }\n    \n    /*for (int i = 1; i <= n; ++i){\n    \tfor (int j = 0; j <= 2; ++j)\n    \t\tprintf(\"%d \", Min[i][j]);\n    \tprintf(\"\\n\");\n    }*/\n    return 0;\n}\n```\n\n\n\n\n\n\n\n\n",
        "postTime": 1534222985,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u7528\u500d\u589e\u4e48\uff1f\uff1f\uff1f\n\n~~\u53cd\u6b63\u6211\u6ca1\u7528~~\n\n\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u8fb9\u90fd\u8bfb\u8fdb\u6765\n\n\u7136\u540e\u6765\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\n\n\u9884\u5904\u7406\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\n\n\u6211\u4eec\u8981\u5904\u7406\u4e00\u4e2a\u70b9\u4ed6\u7684\u7236\u4eb2\u662f\u8c01\uff0c\u8fd4\u7956\u4ee3\u4ef7\uff0c\u4ee5\u53ca\u6df1\u5ea6\n\n\u7136\u540e\u6bcf\u6b21\u8bfb\u5165\u4e24\u4e2a\u70b9\u8dd1lca\u5373\u53ef\uff08\u603b\u5171\u624d480ms\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define rii register int i\n#define rij register int j \n#define inf 1<<30\nusing namespace std;\nstruct van{\n\tint from,to;\n}x[30005];\nstruct road{\n\tint from,to,val;\n}y[100005];\nint head[50005],last[50005],n,q,m,fa[10005],zl,sd[10005],fat[10005];\nint dj[10005],sl;\nbool cmp(road lk,road kl)\n{\n\treturn lk.val>kl.val;\n}\nstruct tree{\n\tint next,to,val;\n}z[20005];\nint fin(int wz)\n{\n\tif(fa[wz]==wz)\n\t{\n\t\treturn wz;\n\t}\n\telse\n\t{\n\t\treturn fa[wz]=fin(fa[wz]);\n\t}\n}\nvoid ycl(int wz,int shd)\n{\n\tsd[wz]=shd;\n\tint ltt=head[wz];\n\twhile(ltt!=0)\n\t{\n\t\tif(sd[z[ltt].to]==0)\n\t\t{\n\t\t\tdj[z[ltt].to]=z[ltt].val;\n\t\t\tfat[z[ltt].to]=wz;\n\t\t\tycl(z[ltt].to,shd+1);\n\t\t}\n\t\tltt=z[ltt].next;\n\t}\n}\nint lca(int l,int r)\n{\n\tint ltt=sd[l];\n\tint kkk=sd[r];\n\tif(l==r)\n\t{\n\t\treturn inf;\n\t}\n\tint ans=inf;\n\twhile(ltt>kkk)\n\t{\n\t\tltt--;\n\t\tans=min(dj[l],ans);\n\t\tl=fat[l];\n\t}\n\twhile(ltt<kkk)\n\t{\n\t\tkkk--;\n\t\tans=min(dj[r],ans);\n\t\tr=fat[r];\n\t}\n\twhile(1)\n\t{\n\t\tif(l==0||r==0)\n\t\t{\n\t\t\tans=inf;\n\t\t\tbreak;\n\t\t}\n\t\tif(l==r)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tans=min(ans,min(dj[r],dj[l]));\n\t\tr=fat[r];\n\t\tl=fat[l];\n\t}\n\treturn ans;\n}\nvoid add(int bh)\n{\n\tsl++;\n\tint ltt=y[bh].from;\n\tint kkk=y[bh].to;\n\tint lzn=y[bh].val;\n\tif(head[ltt]==0)\n\t{\n\t\thead[ltt]=sl;\n\t}\n\tif(last[ltt]!=0)\n\t{\n\t\tz[last[ltt]].next=sl;\n\t}\n\tz[sl].to=kkk;\n\tlast[ltt]=sl;\n\tz[sl].val=lzn;\n\tsl++;\n\tif(head[kkk]==0)\n\t{\n\t\thead[kkk]=sl;\n\t}\n\tif(last[kkk]!=0)\n\t{\n\t\tz[last[kkk]].next=sl;\n\t}\n\tz[sl].to=ltt;\n\tz[sl].val=lzn;\n\tlast[kkk]=sl;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(rii=1;i<=m;i++)\n\t{\n\t\tint ltt,kkk,lzn;\n\t\tscanf(\"%d%d%d\",&ltt,&kkk,&lzn);\n\t\ty[i].from=ltt;\n\t\ty[i].to=kkk;\n\t\ty[i].val=lzn;\n\t}\n\tsort(y+1,y+m+1,cmp);\n\tfor(rii=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;\n\t}\n\tint cnt=0;\n\tfor(rii=1;i<=m;i++)\n\t{\n\t\tif(cnt==n-1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tint x1=y[i].from;\n\t\tint x2=y[i].to;\n\t\tint ltt=fin(x1);\n\t\tint kkk=fin(x2);\n\t\tif(ltt==kkk)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tadd(i);\n\t\t\tfa[ltt]=kkk;\n\t\t\tcnt++;\n\t\t}\n\t}\n\tfor(rii=1;i<=n;i++)\n\t{\n\t\tif(sd[i]==0)\n\t\t{\n\t\t\tycl(i,1);\n\t\t}\n\t}\n\tscanf(\"%d\",&q);\n\tfor(rii=1;i<=q;i++)\n\t{\n\t\tint from,to;\n\t\tscanf(\"%d%d\",&from,&to);\n\t\tint ans=lca(from,to);\n\t\tif(ans==inf)\n\t\t{\n\t\t\tans=-1;\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```",
        "postTime": 1533574008,
        "uid": 52176,
        "name": "ztz11",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u65f6\u5019\u600e\u4e48\u80fd\u5c11\u4e86STL\u5462\uff0cpriority_queue\u4ee3\u66ffsort\uff0c\u7136\u540evector\u5efa\u65b0\u56fe\uff0c\u7136\u540e~~\u8bb2\u89e3\u4e00\u756a~~\uff0c\u8fd9\u9053\u9898 \u9996\u5148\u4e0d\u96be\u770b\u51fa\u8981\u5148\u6c42\u4e00\u4e2a\u6700\u5927\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5c3d\u91cf\u56fe\u8054\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u4e24\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u6240\u4ee5Kru\u8dd1\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u4f1a\u6709\u5f88\u663e\u7136\u7684\u4e8b\u60c5\u5c31\u662f\u88f8\u7684\u751f\u6210\u6811\u53ea\u80fd\u6c42\u603b\u548c\uff0c\u4f46\u6211\u4eec\u9700\u8981\u77e5\u9053\u6811\u4e0a\u6709\u54ea\u6761\u8fb9\uff0c\u6240\u4ee5\u5728\u5408\u5e76\u4e24\u4e2a\u8054\u901a\u5757\u65f6\uff0c\u5c06\u4e24\u4e2a\u7aef\u70b9\u4ee5\u53ca\u4ed6\u4eec\u95f4\u7684\u8fb9\u52a0\u5165\u53e6\u4e00\u4e2a\u56fe\u4e2d\uff0c\u90a3\u4e48\u663e\u7136\u65b0\u56fe\u4e2d\u53ea\u5305\u542b\u6700\u5927\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u7136\u540e\u5c31\u662f\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u957f\u8fb9\uff0c\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u662ffloyed\u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u957f\u8fb9\uff0c\u4f46\u6211\u4eec\u89c2\u5bdf\u5230\u70b9\u6570<=10000\uff0cfloyed\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u90a3\u4e48\u6b63\u89e3\u662f\u4ec0\u4e48\u5462\uff1f\u500d\u589eLca\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u8054\u901a\u7684\u8bdd\uff0c\u90a3\u4e48\u4ece\u4e24\u4e2a\u70b9\u51fa\u53d1\uff0c\u5fc5\u5b9a\u4f1a\u4ea4\u4e8e\u4e00\u70b9\uff0c\u663e\u7136\u8fd9\u4e2a\u70b9\u662f\u4ed6\u4eec\u7684\u516c\u5171\u7956\u5148\uff0c\u6240\u4ee5\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u5230\u4ed6\u7684\u7956\u5148\u7684\u6700\u957f\u8fb9\uff0c\u8be2\u95ee\u65f6\uff0c\u518d\u8dd1lca\u5c31\u53ef\u4ee5\u5566\n\u4ee3\u7801 1400ms\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int M=100500;\nstruct edge\n{\n\tint from,to,cost;\n\tbool friend operator < (edge a,edge b)\n\t{\n\t\treturn a.cost<b.cost;\t\n\t} \n}now;//\u521d\u59cb\u5efa\u56fe \npriority_queue<edge>q;\nstruct map\n{\n\tint to,cost;\n}_233;//\u65b0\u56fe \nvector<map>v[M];\nint n,m,que;\nint vis[M],deep[M],pt[M][21];\nint fa[M],size[M],fatt[M][21];\nint find(int x)\n{\n\tif (x!=fa[x]) return fa[x]=find(fa[x]);\n\treturn x;\n}\nvoid unionn(int a,int b)\n{\n\tif (size[a]<=size[b]) size[b]+=size[a],fa[a]=b;\n\telse size[a]+=size[b],fa[b]=a;\n\treturn ;\n}//\u52a0\u5165\u4e86\u6309\u79e9\u5408\u5e76\u4ee5\u53ca\u8def\u5f84\u538b\u7f29 \nvoid constt()\n{\n\tfor (int i=0;i<=n;i++)\n\tsize[i]=1,fa[i]=i,fatt[i][0]=i,pt[i][0]=M<<5;\n\treturn ;\n}//\u521d\u59cb\u5316\u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f \nvoid kru()\n{\n\tint cnt=1;constt();\n\twhile (q.size()&&cnt<n)\n\t{\n\t\tnow=q.top();q.pop();\n\t\tint r1=find(now.from);\n\t\tint r2=find(now.to);\n\t\tif (r1!=r2) \n\t\t{\n\t\t\tunionn(r1,r2),cnt++;\n\t\t\t_233.to=now.to;_233.cost=now.cost;v[now.from].push_back(_233);\n\t\t\t_233.to=now.from;_233.cost=now.cost;v[now.to].push_back(_233);\n\t\t}//\u6ce8\u610f\u52a0\u5165\u65b0\u56fe\u7684\u662f\u539f\u70b9\u800c\u4e0d\u662f\u7956\u5148 \n\t}\n\treturn ;\n}//\u6700\u5927\u751f\u6210\u6811\u53ca\u6784\u5efa\u65b0\u56fe \nvoid getlca(int x)\n{\n\tvis[x]=1;\n\tfor (int i=0;i<v[x].size();i++)\n\t{\n\t\tint go=v[x][i].to;\n\t\tif (vis[go]) continue;\n\t\tdeep[go]=deep[x]+1;\n\t\tfatt[go][0]=x;\n\t\tpt[go][0]=v[x][i].cost;\n\t\tgetlca(go);\n\t}\n\treturn ;\n}//\u6784\u5efalca\u7956\u5148\u5173\u7cfb \nvoid getminpath()\n{\n\tfor (int i=1;i<=20;i++)\n\tfor (int k=1;k<=n;k++)\n\t{\n\t\tfatt[k][i]=fatt[fatt[k][i-1]][i-1];\n\t\tpt[k][i]=min(pt[k][i-1],pt[fatt[k][i-1]][i-1]);\n\t}\n\treturn ;\n}//\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u5230\u7956\u5148\u7684\u8ddd\u79bb \nint lca(int x,int y)\n{\n\tif (find(x)!=find(y)) return -1;\n\tint ans=M<<5;\n\tif (deep[x]>deep[y]) swap(x,y);\n\tfor (int i=20;i>=0;i--)\n\t\tif (deep[fatt[y][i]]>=deep[x]) \n\t\t\tans=min(ans,pt[y][i]),y=fatt[y][i];\n\tif (x==y) return ans;\n\tfor (int i=20;i>=0;i--)\n\t\tif (fatt[x][i]!=fatt[y][i])\n\t\t\tans=min(ans,min(pt[x][i],pt[y][i])),\n\t\t\t\tx=fatt[x][i],y=fatt[y][i];\n\tans=min(ans,min(pt[x][0],pt[y][0]));\n\treturn ans;\n}//lca\u6c42\u89e3 \nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&now.from,&now.to,&now.cost),q.push(now);\n\tkru();scanf(\"%d\",&que);\n\tfor (int i=1;i<=n;i++)\n\tif (!vis[i]) getlca(i);\n\tgetminpath();\n\twhile (que--)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint ans=lca(x,y);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1529138726,
        "uid": 71558,
        "name": "AcerMo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u6309\u7167\u5927\u4f6c\u7684\u9898\u89e3\u5199\u7684\u4ee3\u7801\uff0c\u5e94\u8be5\u4f1a\u597d\u8bfb\u4e00\u70b9\u3002\n\u7b97\u6cd5\u5982\u4e0b\uff1a\n\n\u6700\u5927\u751f\u6210\u6811\uff1aPrim + \u5806\u4f18\u5316\n\n\u6811\u4e0a\u9884\u5904\u7406\uff1adfs + \u500d\u589e\n\n\u8f93\u51fa\u7ed3\u679c\uff1a lca\n\n\u5728\u751f\u6210\u6700\u5927\u751f\u6210\u6811\u65f6\u6211\u8fdb\u884c\u4e86\u7f29\u70b9\uff0c\u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u9897\u6811\u4e2d\uff0c\u4e5f\u5c31\u662f\u80fd\u5426\u5f7c\u6b64\u5230\u8fbe\u3002\n\n\u5173\u4e8e\u500d\u589e\u7684\u8fb9\u754c\uff0c\u56e0\u4e3a\u5728\u4e00\u68f5\u542b\u6709n\u4e2a\u70b9\u7684\u6811\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u542b\u6709log2(n)\u4e2a\u7236\u4eb2\uff0c\u6240\u4ee5\u6211\u4eec\u500d\u589e\u7684\u8fb9\u754c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u6210top = log2(n)\u3002\u867d\u7136c++\u4e2d\u6ca1\u6709\u4e13\u95e8\u6c42\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\u51fd\u6570\uff0c\u4f46\u662f\u6709\u4ee510\u4e3a\u5e95\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6362\u5e95\u516c\u5f0f\uff08[\u767e\u5ea6\u767e\u79d1\u300a\u6362\u5e95\u516c\u5f0f\u300b](https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin)\uff09\u6765\u95f4\u63a5\u6c42\u5f97top = log2(n)\u3002\n\n\u8fd9\u6837\u5b50\uff0c\u9488\u5bf9\u4e0d\u540c\u5927\u5c0f\u7684\u6811\uff0c\u6211\u4eec\u90fd\u6709\u89c4\u5b9a\u7684\u8fb9\u754c\uff0c\u800c\u4e0d\u662f\u5e38\u6570\u8fb9\u754c\uff0c\u4e0d\u4f1a\u8fc7\u5927\uff0c\u4e5f\u4e0d\u4f1a\u592a\u5c0f\uff0c\u591a\u597d\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u91cc\u9762\u6709\u6211\u8c03\u8bd5\u7684\u75d5\u8ff9\uff0c\u53ef\u4ee5\u53c2\u8003\u4f7f\u7528\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\nusing namespace std;\n\n#define inf 1000000000\n\nint n,m,quest;\nint top;\nint belong[10050],symbol = 0;\nint father[10050][20],Min[10050][20],deep[10050];\nint binary[20]; \nbool visit[10050];\nint head1[10050],total1 = 0,total2 = 0,head2[10050];\nstruct Edge\n{\n\tint start,end,value,next;\n\tfriend bool operator < (Edge a, Edge b)\n\t{\n\t\treturn a.value < b.value;\n\t}\n}edge1[1000050],edge2[100050];\npriority_queue<Edge> q;\n\nvoid init()\n{\n\ttop = log10(n) / log10(2);\n\tbinary[0] = 1;\n\tfor(int i=1;i<=top;++i)\n\t\tbinary[i] = binary[i-1] << 1;\n\tmemset(visit,false,sizeof(visit));\n\tmemset(head1,0,sizeof(head1));\n\tmemset(head2,0,sizeof(head2));\n\treturn;\n}\n\nvoid insert1(int start,int end,int value)\n{\n\tedge1[++total1].end = end;\n\tedge1[total1].start = start;\n\tedge1[total1].next = head1[start];\n\tedge1[total1].value = value;\n\thead1[start] = total1;\n\treturn;\n}\n\nvoid insert2(int start,int end ,int value)\n{\n\tedge2[++total2].end = end;\n\tedge2[total2].value = value;\n\tedge2[total2].next = head2[start];\n\tedge2[total2].start = start;\n\thead2[start] = total2;\n\treturn;\n}\n\nvoid input()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tinit();\n\tint start,end,value;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&start,&end,&value);\n\t\tinsert1(start,end,value);\n\t\tinsert1(end,start,value);\n\t}\n\treturn;\n}\n\nvoid Prim(int start)\n{\n\twhile(!q.empty())\n\t\tq.pop();\n\t\t\n\tbelong[start] = ++symbol;\n\tvisit[start] = true;\n\t\n\tfor(int i=head1[start];i;i = edge1[i].next)\n\t\tq.push(edge1[i]);\n\t\n\tEdge largest;\n\tint next;\n\twhile(!q.empty())\n\t{\n\t\tlargest = q.top();\n\t\tq.pop();\n\t\twhile(visit[largest.end] && !q.empty())\n\t\t{\n\t\t\tlargest = q.top();\n\t\t\tq.pop();\n\t\t}\n\t\tif(q.empty() && visit[largest.end])\n\t\t\treturn;\n\t\t\t\n\t\tnext = largest.end;\n\t\tvisit[next] = true;\n\t\tbelong[next] = symbol;\n\t\tfor(int i=head1[next];i;i = edge1[i].next)\n\t\t\tq.push(edge1[i]);\n\t\tinsert2(largest.start,largest.end,largest.value);\n\t\tinsert2(largest.end,largest.start,largest.value);\n\t}\n\treturn;\n}\n\nvoid bulid()\n{\n\tfor(int i=1;i<=n;++i)\n\t\tif(!visit[i])\n\t\t\tPrim(i);\n\treturn;\n}\n\nvoid dfs(int now)\n{\n\tvisit[now] = true;\n\t\n\tfor(int i=1;i<=top;++i)\n\t\tif(father[now][i-1])\n\t\t\tfather[now][i] = father[father[now][i-1]][i-1];\n\t\telse\n\t\t\tbreak;\n\tfor(int i=1;i<=top;++i)\n\t\tif(Min[now][i-1])\n\t\t\tMin[now][i] = min(Min[now][i-1],Min[father[now][i-1]][i-1]);\n\t\telse\n\t\t\tbreak;\n\t\n\tint next;\n\tfor(int i=head2[now];i;i = edge2[i].next)\n\t{\n\t\tnext = edge2[i].end;\n\t\tif(!visit[next])\n\t\t{\n\t\t\tfather[next][0] = now;\n\t\t\tMin[next][0] = edge2[i].value;\n\t\t\tdeep[next] = deep[now]+1;\n\t\t\tdfs(next);\n\t\t}\n\t}\n\treturn;\n}\n\nvoid calc()\n{\n\tfor(int i=1;i<=n;++i)\n\t\tif(!visit[i])\n\t\t{\n\t\t\tdeep[i] = 1;\n\t\t\tdfs(i);\n\t\t}\n\treturn;\n}\n\nint LCA(int a,int b)\n{\n\tif(deep[a] < deep[b])\n\t\tswap(a,b);\n\tint distance = deep[a] - deep[b];\n\t\n\tfor(int i=0;i<=top;++i)\n\t\tif(distance & binary[i])\n\t\t\ta = father[a][i];\n\t\n\tif(a == b)\n\t\treturn b;\n\t\n\tfor(int i=top;i>=0;--i)\n\t\tif(father[a][i] != father[b][i])\n\t\t{\n\t\t\ta = father[a][i];\n\t\t\tb = father[b][i];\n\t\t}\n\t\n\treturn father[a][0];\n}\n\nint least(int start,int end)\n{\n\tint ans = inf;\n\tint distance = deep[start] - deep[end];\n\tfor(int i = 0;i<=top;++i)\n\t\tif(distance & binary[i])\n\t\t{\n\t\t\tans = min(ans,Min[start][i]);\n\t\t\tstart = father[start][i];\n\t\t}\n\treturn ans;\n}\n\nvoid work()\n{\n\tscanf(\"%d\",&quest);\n\tint start,end,ancestor;\n\tfor(int i=1;i<=quest;++i)\n\t{\n\t\tscanf(\"%d%d\",&start,&end);\n\t\tif(belong[start] != belong[end])\n\t\t{\n\t\t\tprintf(\"-1\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tancestor = LCA(start,end);\n\t\tprintf(\"%d\\n\",min(least(start,ancestor),least(end,ancestor)));\n\t}\n\treturn;\n}\n\nint main()\n{\n\tinput();\n\tbulid();\n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%d \",belong[i]);\n\tmemset(visit,false,sizeof(visit));\n\tcalc();\n\twork();\n\treturn 0;\n}\n```",
        "postTime": 1523780589,
        "uid": 32663,
        "name": "1LoveNozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u4e4b\u524d\u4e00\u4e0d\u5c0f\u5fc3\u5220\u4e86\u8fd9\u4e2a\u9898\u89e3\n\n\u5efa\u8bae\u5148\u7528\u5e38\u89c4\u65b9\u6cd5\u5207\u6389\u518d\u5b66\u4e60\u8fd9\u4e2a\u65b9\u6cd5\n\nkruskal\u91cd\u6784\u6811~~\u5b66\u4e00\u4e0b\u4e5f\u8fd8\u4e0d\u9519~~\n\n\u548cKruskal\u751f\u6210\u6811\u4e00\u6837\n\n\u672c\u6765\u662fu\uff0cv\u8fde\u4e00\u6761f\u7684\u8fb9\n\n\u73b0\u5728\u53d8\u6210\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u4e3af\uff0cu v\u90fd\u5411\u5b83\u8fde\u65e0\u8fb9\u6743\u7684\u8fb9\n\n\uff08\u5b9e\u9645\u4e0a\u5e94\u8be5\u662fu\u7684\u6839\u548cv\u7684\u6839\uff09\n\n\u8fd9\u6837\u6811\u6709\u4e00\u4e9b\u6027\u8d28\uff1a\n\n1.\u4e8c\u53c9\u6811\n\n2.\u539f\u6811\u4e0e\u65b0\u6811\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u8fb9\u6743(\u70b9\u6743)\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\u76f8\u7b49\n\n3.\u5b50\u8282\u70b9\u7684\u8fb9\u6743\uff08\u5927\u4e8e\u7b49\u4e8e\uff09\u5c0f\u4e8e\u7b49\u4e8e\u7236\u4eb2\u8282\u70b9\n\n4.\u539f\u6811\u4e2d\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5927\uff08\u6700\u5c0f\uff09\u503c\u7b49\u4e8e\u65b0\u6811\u4e0a\u4e24\u70b9\u7684LCA\u7684\u70b9\u6743\n\n\n```cpp\n# include <iostream>\n# include <stdio.h>\n# include <stdlib.h>\n# include <algorithm>\n# include <string.h>\n# define IL inline\n# define ll long long\n# define Fill(a, b) memset(a, b, sizeof(a));\nusing namespace std;\n\nIL ll Read(){\n    char c = '%'; ll x = 0, z = 1;\n    for(; c < '0' || c > '9'; c = getchar()) z = c == '-' ? -1 : 1;\n    for(; c >= '0' && c <= '9'; c = getchar()) x = x * 10 + c - '0';\n    return x * z;\n}\n\nconst int MAXN = 20001, MAXM = 200001;\nint ft[MAXN], n, m, cnt, fa[MAXN][20], w[MAXN], deep[MAXN], Fa[MAXN], num;\nstruct Edge{\n    int to, nt;\n} edge[MAXM];\nstruct Kruskal{\n    int u, v, f;\n    IL bool operator <(Kruskal b) const{\n        return f > b.f;\n    }\n} road[MAXM];\n\nIL int Find(int x){\n    return Fa[x] == x ? x : Fa[x] = Find(Fa[x]);\n}\n\nIL void Add(int u, int v){\n    edge[cnt] = (Edge){v, ft[u]}; ft[u] = cnt++;\n    edge[cnt] = (Edge){u, ft[v]}; ft[v] = cnt++;\n}\n\nIL void Dfs(int u){\n    for(int e = ft[u]; e != -1; e = edge[e].nt){\n        int v = edge[e].to;\n        if(!deep[v]){\n            deep[v] = deep[u] + 1;\n            fa[v][0] = u;\n            Dfs(v);\n        }\n    }\n}\n\nIL int LCA(int u, int v){\n    if(Find(u) != Find(v)) return -1;\n    if(deep[u] < deep[v]) swap(u, v);\n    for(int i = 18; i >= 0; i--)\n        if(deep[fa[u][i]] >= deep[v]) u = fa[u][i];\n    if(u == v) return w[u];\n    for(int i = 18; i >= 0; i--)\n        if(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n    return w[fa[u][0]];\n}\n\nint main(){\n    Fill(ft, -1);\n    num = n = Read(); m = Read();\n    for(int i = 1; i <= 2 * n; i++)\n        Fa[i] = i;\n    for(int i = 1; i <= m; i++)\n        road[i] = (Kruskal){Read(), Read(), Read()};\n    sort(road + 1, road + m + 1);\n    for(int i = 1, tot = 0; i <= m && tot < n; i++){\n        int u = Find(road[i].u), v = Find(road[i].v);\n        if(u != v){\n            tot++;\n            w[++num] = road[i].f;\n            Fa[u] = Fa[v] = num;\n            Add(u, num); Add(v, num);\n        }\n    }\n    for(int i = num; i; i--)\n        if(!deep[i]) deep[i] = 1, Dfs(i);\n    for(int i = 1; i <= 18; i++)\n        for(int j = 1; j <= num; j++)\n            fa[j][i] = fa[fa[j][i - 1]][i - 1];\n    int Q = Read();\n    while(Q--){\n        int u = Read(), v = Read();\n        printf(\"%d\\n\", LCA(u, v));\n    }\n    return 0;\n}\n```",
        "postTime": 1515028604,
        "uid": 47640,
        "name": "Cyhlnj",
        "ccfLevel": 0,
        "title": "kruskal\u91cd\u6784\u6811"
    },
    {
        "content": "\u5386\u7ecf\u5343\u8f9b\u4e07\u82e6\u7ec8\u4e8eA\u4e86\u8fd9\u4e00\u9898\uff08\u770b\u5230\u5168\u7eff\u662f\u6709\u79cd\u60f3\u54ed\u7684\u51b2\u52a8\u3002\u3002\u3002\uff09\n\n\n\u4e8b\u5b9e\u4e0a\u601d\u8def\u548c\u697c\u4e0b\u7684\u5404\u4f4d\u5927\u4f6c\u662f\u5dee\u4e0d\u591a\u7684\n\n\n\u627e\u51fa\u6700\u5927\u751f\u6210\u6811\u548clca\uff0c\u7136\u540e\u5728\u6700\u5927\u6811\u4e0a\u627e\u51fa\u8def\u5f84\uff0c\u5224\u65ad\u6700\u5c0f\u7684\u8fb9\u6743\n\n\n\u7136\u540e\u5c31\u8d34\u4e00\u4e0b\u4ee3\u7801\u5427\u3002\u3002\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int MAXN1=10001;//\u70b9\u6570 \nconst int MAXN2=50001;//\u8fb9\u6570 \nstruct edge\n{\n    int v,len;\n    edge(int vv=0,int ll=0) {v=vv;len=ll;}\n};//\u5efa\u6811\u65f6\u5b58\u8fb9\u7528 \nstruct BIAN\n{\n    int Left,Right,length;\n}bian[MAXN2];//\u6700\u5f00\u59cb\u8f93\u5165\u7684\u8fb9 \nvector<edge> G[MAXN1];//\u5efa\u6811\u5b58\u8fb9 \nint n,m,q,u,v;\nint fa[MAXN1],size[MAXN1];//\u5e76\u67e5\u96c6\uff08\u627e\u6700\u5927\u751f\u6210\u6811\u65f6\u7528\uff09 \nint lg[MAXN1],depth[MAXN2];//\u9884\u5904\u7406log\uff08\u6d1b\u8c37\u8bb2\u4e49\u7684\u5f71\u54cd\uff09 \u4ee5\u53ca\u6bcf\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6 \nint father[20][MAXN1],flen[20][MAXN1];//\u500d\u589e\u627elca \u540c\u65f6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u4ed6\u7956\u5148\u7684\u8fb9\u6743\u7684\u6700\u5c0f\u503c \ninline int getfa(int x)//\u5e76\u67e5\u96c6 \u627e\u7956\u5148 \n{\n    if(fa[x]==x) return x;\n    else return fa[x]=getfa(fa[x]);\n}\ninline void Merge(int x,int y)//\u5e76\u67e5\u96c6 \u5408\u5e76\uff08\u542f\u53d1\u5f0f\uff09 \n{\n    int nx=getfa(x),ny=getfa(y);\n    if(size[nx]<size[ny]) swap(nx,ny);\n    fa[ny]=nx;size[nx]+=size[ny];\n}\ninline void gettree(int nowroot,int dad,int deep)\n{  //\u5efa\u6811 \uff08\u4ee5nowroot\u4e3a\u6839\u8282\u70b9\uff0cnowroot\u7684\u7236\u4eb2\u662fdad\uff0cnowroot\u7684\u6df1\u5ea6\u662fdeep  \u7d2b\u4e66\u4e0a\u7684\u65e0\u6839\u6811\u8f6c\u6709\u6839\u6811 \n    int s=G[nowroot].size();\n    depth[nowroot]=deep;\n    for(int i=0;i<s;++i)    //\u904d\u5386\u5f53\u524d\u7ed3\u70b9\u7684\u51fa\u8fb9 \n    {\n        int nv=G[nowroot][i].v,nl=G[nowroot][i].len;\n        if(nv!=dad)    //\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u5224\u65ad \n        {\n            father[0][nv]=nowroot;    //\u6bcf\u4e2a\u70b9\u7236\u8282\u70b9\u7684\u5904\u7406 \n            flen[0][nv]=nl;    //\u987a\u4fbf\u5904\u7406\u6389\u6700\u5c0f\u8fb9\u6743 \n            gettree(nv,nowroot,deep+1);      //\u8f6c\u5316\u4e3a\u4ee5nv\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u6784\u5efa \n        }\n    }\n}\ninline void getready()//\u500d\u589e\u7684\u9884\u5904\u7406 \n{\n    lg[1]=0;\n    for(int i=2;i<=n;++i)\n        lg[i]=lg[i-1]+(1<<lg[i-1]+1==i);        //log\u7684\u9884\u5904\u7406 \n    gettree(1,0,0);                                //\u5efa\u6811 \n    for(int i=1;i<=lg[n];++i)                  //\u500d\u589e\u7684\u5904\u7406 \n        for(int j=1;j<=n;++j)\n        {\n            father[i][j]=father[i-1][father[i-1][j]];\n            flen[i][j]=min(flen[i-1][j],flen[i-1][father[i-1][j]]);\n        }\n}\ninline int lca(int x,int y)//\u627elca \n{\n    int xans=2147483647,yans=2147483647;\n    if(depth[x]<depth[y]) swap(x,y);        //\u4f7f\u5f97x\u7684\u6df1\u5ea6\u4e00\u5b9a\u6bd4y\u7684\u6df1\u5ea6\u66f4\u5927 \n    while(depth[x]>depth[y])\n    {\n        xans=min(xans,flen[lg[depth[x]-depth[y]]][x]);\n        x=father[lg[depth[x]-depth[y]]][x];\n    }                                        //x\u4e0ey\u8df3\u5230\u540c\u4e00\u9ad8\u5ea6 \n    if(x==y) return xans;                    //\u5148\u7279\u5224\u4e00\u4e0b \n    for(int k=lg[depth[x]];k>=0;--k)                //\u4e00\u8d77\u5411\u4e0a\u8df3 \n    {\n        //if(flen[k][x]!=0) xans=min(xans,flen[k][x]);\n        //if(flen[k][y]!=0) yans=min(yans,flen[k][y]);\n        if(father[k][x]!=father[k][y])\n        {\n            xans=min(xans,flen[k][x]);;x=father[k][x];\n            yans=min(yans,flen[k][y]);;y=father[k][y];\n        }\n    }\n    return min(min(xans,yans),min(flen[0][x],flen[0][y]));\n}\ninline bool CMP(const BIAN &a,const BIAN &b)//\u6392\u5e8f\u51fd\u6570 \n{\n    return a.length>b.length;\n}\ninline int read()//\u8f93\u5165\u4f18\u5316 \n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') {x=x*10+c-'0';c=getchar();}\n    return x;\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=m;++i)\n        {bian[i].Left=read();bian[i].Right=read();bian[i].length=read();}  //\u70b9\u6570 \u8fb9\u6570 \u4ee5\u53ca\u6bcf\u4e00\u6761\u8fb9\u7684\u8f93\u5165 \n    sort(bian+1,bian+m+1,CMP);                    //\u5bf9\u8fb9\u6309\u957f\u5ea6\u6392\u5e8f \n    for(int i=1;i<=n;++i) {fa[i]=i;size[i]=1;}    //\u5e76\u67e5\u96c6\u9884\u5904\u7406 \n    for(int i=1;i<m;++i)        //102~111\u884c \u6700\u5927\u751f\u6210\u6811 \n    {\n        int nl=bian[i].Left,nr=bian[i].Right;\n        if(getfa(nl)!=getfa(nr))\n        {\n            Merge(nl,nr);\n            G[nl].push_back(edge(nr,bian[i].length));    //\u540c\u65f6\u4e3a\u5efa\u6811\u505a\u51c6\u5907 \n            G[nr].push_back(edge(nl,bian[i].length));\n        }\n    }\n    getready();    //\u9884\u5904\u7406 \n    q=read(); \n    for(int w=0;w<q;++w)\n    {\n        u=read();v=read();\n        if(getfa(u)!=getfa(v)) printf(\"-1\\n\");    //\u5148\u7279\u5224\u4e00\u4e0b\u80fd\u4e0d\u80fd\u5230\u8fbe \n        else printf(\"%d\\n\",lca(u,v));//\u627e\u5230lca\u6c42\u6700\u5c0f\u7684\u8fb9\u6743 \n    }\n    return 0;\n}\n```\n\u4e8b\u5b9e\u4e0a\u6211\u66f4\u60f3\u8bf4\u7684\u662f\u505a\u8fd9\u4e00\u9898\u7684\u611f\u60f3\uff08\u53d1\u9898\u89e3\u7684\u539f\u56e0\uff08\u5212\u6389\uff09\uff09\uff1a\n\n1\u3001\u5199\u4ee3\u7801\u65f6\u601d\u8def\u6e05\u6670\u771f\u7684\u662f\u975e\u5e38\u91cd\u8981\uff0c\u4e0a\u9762\u7684\u6ce8\u91ca\u90fd\u662f\u6211\u5728WA\u5230\u6000\u7591\u4eba\u751f\u662f\u5199\u7684\uff0c\u7136\u540e\u518d\u7ed3\u5408\u4e00\u4e0b\u8ba8\u8bba\u91cc\u9762\u7684\u63d0\u793a\uff0c\u5c31\u60f3\u51fa\u81ea\u5df1\u9519\u5728\u54ea\u91cc\n\n\u4e86\u3002\u3002\u3002\uff08\u6bd4\u8d5b\u65f6\u6ca1\u6709\u8ba8\u8bba\uff0c\u611f\u89c9\u5c0f\u4f19\u4f34\u4eec\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\uff0c\u5728\u5fc5\u8981\u7684\u5730\u65b9\u5199\u4e0b\u6ce8\u91ca\uff0c\u544a\u8bc9\u81ea\u5df1\u81ea\u5df1\u60f3\u5728\u8fd9\u91cc\u5e72\u4ec0\u4e48\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba9\u81ea\u5df1\u7684\n\n\u601d\u8def\u66f4\u52a0\u6e05\u6670\uff0c\u8fd8\u53ef\u4ee5\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4\u4e86\uff09\n\n\n2\u3001\u5199\u5b8c\u4e86\u4ee3\u7801\uff0cA\u4e86\u9898\u4e4b\u540e\uff0c\u770b\u5230\u81ea\u5df1\u5199\u4e86\u8fd9\u4e48\u591a\u6ce8\u91ca\uff0c\u611f\u89c9\u4e0d\u80fd\u6d6a\u8d39\u554a\uff0c\u4f55\u4e0d\u62ff\u53bb\u670d\u52a1\u5927\u4f17\uff08\u4f6c\uff09\u6216\u662f\u840c\u65b0\u5462\uff1f\u81ea\u6211\u611f\u89c9\u8fd9\u4ee3\u7801\u8fd8\u662f\u6bd4\u8f83\n\n\u6613\u61c2\u7684\u3002\u3002\u3002\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\n",
        "postTime": 1510309667,
        "uid": 28747,
        "name": "LDlornd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "pascal\u9898\u89e3\u592a\u96be\u627e\uff0c\u662f\u65f6\u5019\u6765\u4e00\u6ce2\u4e86\uff08\u505a\u4e86\u4e24\u5929\u7684\u9898\uff0c\u505a\u51fa\u6765\u53ea\u60f3\u6765\u4e00\u6ce2\u9898\u89e3\uff09\uff1b\u3010\u6ce8\uff1a\u9119\u4eba\u521a\u5b66lca\uff0c\u8ba4\u4e3a\u6211\u7684\u8fd9\u4efd\u9898\u89e3\u9002\u5408\u65b0\u624b\u3011\n\n\u672c\u4eba\u849f\u84bb\uff0c\u4e00\u5f00\u59cb\u53ea\u77e5\u9053\u601d\u60f3\uff1a\n\n\uff08\u597d\u50cf\u90fd\u77e5\u9053\uff0c\u8fd9\u662f\u8981\u7528\u6700\u5927\u751f\u6210\u6811\u6784\u6210\u4e00\u5e45\u65b0\u56fe\uff0c\u7136\u540e\u518d\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6240\u6709\u8def\u4e2d\u7684\u6700\u5c0f\u503c\u3010\u7531\u9898\u610f\u53ef\u5f97\uff1a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8054\u901a\uff0c\u53c8\u8981\u8d27\u8f66\u8fd0\u8f93\u7684\u4e1c\u897f\u5c3d\u53ef\u80fd\u91cd\uff0c\u4e0d\u96be\u60f3\u5230\u7528kruskal\u7b97\u6cd5\u6784\u4e00\u9897\u6700\u5927\u751f\u6210\u6811\uff0c\u8fd9\u6837\u4e24\u70b9\u4e4b\u95f4\u7684\u5927\u8fb9\u4f1a\u88ab\u5305\u62ec<\u53ef\u4ee5\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48>\u3011\uff1b\uff09\n\n\uff08\u7136\u540e\u5c31\u662f\u5982\u4f55\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6700\u5c0f\u503c\u4e86\u3010lca\u6700\u5bb9\u6613\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u9012\u63a8\u5904\u7406\uff0c\u5728\u627ef[i,j]\uff0c\u5373\u8282\u70b9i\u7684\u7b2c2^j\u4e2a\u7236\u4eb2\u65f6\uff0c\u53ef\u4ee5\u987a\u5e26\u628adis[i,j]\u5373\u8282\u70b9i\u5230i\u7684\u7b2c2^j\u4e2a\u7236\u4eb2\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\u5904\u7406\u51fa\u6765\u3011\uff0c\u521a\u5b66lca\u6a21\u677f\u7684\u4eba\u53ea\u8981\u77e5\u9053\uff0c\u600e\u4e48\u628a **\u8fb9\u7684\u6743\u503c** \u548c **\u70b9** \u7ed3\u5408\u8d77\u6765\u5c31\u884c\uff09\n\n\u4e0b\u9762\u662f\u6211\u7684code\uff08\u6709\u8be6\u7ec6\u6ce8\u91ca\uff09\uff1a\n\n===========================================================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nprogram lca2;\nconst kk:array[0..14]of longint=(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384);\n      max1=50000;\n      max2=10000;\nvar\n        last,first,next,w:array[0..30000]of longint;//last,first,next\u5efalca\u7684\u6811\u5fc5\u5907\uff0cw[i]\u8bb0\u5f55\u51c6\u5907\u52a0\u5165\u7b2ci\u4e2a\u8282\u70b9\uff08\u4e0d\u662f\u8282\u70b9i,\u533a\u5206\u4e00\u4e0b\uff09\u7684\u8fb9\u6743\u503c\n        f,dis:array[0..max2,0..14]of longint;//\u4e0a\u9762\u6709\u4f5c\u8bf4\u660e\uff0c\u4e3af\u8bb0\u5f55\u7236\u4eb2\uff0cdis\u8bb0\u5f55\u8ddd\u79bb\uff0c\u6c42\u7b54\u6848\u7528\n        fa,h:array[0..max2]of longint;//kruskal\u7b97\u6cd5\u5e76\u67e5\u96c6\u7528\u5230fa\u6570\u7ec4\uff0ch\u8bb0\u5f55dfs\uff08lca\u5fc5\u5907\uff1a\u5bf9\u6211\u6765\u8bf4\uff09\u5efa\u6811\u4e2d\u8282\u70b9\u9ad8\u5ea6\n        l,r,c:array[0..max1]of longint;//\u8bfb\u5165\u7684\u4e1c\u4e1c\n        flag:array[0..max2]of boolean;//\u8bb0\u5f55\u6709\u65e0\u52a0\u5165dfs\u7684\u6811\n        i,j,n,m,tot,aa,bb,q:longint;\nfunction getfa(x:longint):longint;//\u5e76\u67e5\u96c6\uff0c\u4e0d\u8bf4\u4e86\nbegin\n        if fa[x]=x then exit(x);\n        fa[x]:=getfa(fa[x]);\n        exit(fa[x]);\nend;\nprocedure swap(var s,t:longint);\nvar\n        temp:longint;\nbegin\n                temp:=s;\n                s:=t;\n                t:=temp;\nend;\nprocedure qsort(le,ri: longint);\n      var\n         i,j,x: longint;\n      begin\n         i:=le;\n         j:=ri;\n         x:=c[(le+ri) div 2];\n         repeat\n           while c[i]>x do\n            inc(i);\n           while x>c[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                swap(l[i],l[j]);\n                swap(r[i],r[j]);\n                swap(c[i],c[j]);\n                inc(i);\n                dec(j);\n             end;\n         until i>j;\n         if i<ri then\n           qsort(i,ri);\n         if le<j then\n           qsort(le,j);\n      end;\nprocedure add(x,y,v:longint);//\u8bb0\u5f55\u8981\u7528\u5230\u7684\u70b9\u548c\u8fb9\u6743\u503c\nbegin\n                inc(tot);//\u7b2c\u51e0\u4e2a\n                w[tot]:=v;//\u5b9e\u73b0\u8fb9\u6743\u503c\u548c\u70b9\u7684\u8054\u7cfb\n                last[tot]:=y;//\u8fd9\u4e09\u53e5\u81ea\u5df1\u7406\u89e3\u4e00\u4e0b\u5427\uff0c\u548c\u4e0b\u9762\u5efa\u6811\u8fc7\u7a0b\u4e00\u8d77\u7406\u89e3\uff0c\u5fc5\u987b\u660e\u767d\u600e\u4e48\u6765\u7684\n                next[tot]:=first[x];\n                first[x]:=tot;\nend;\n//\u597d\u5427\uff0c\u6211\u7528\u4e86\u597d\u4e00\u4f1a\u624d\u7406\u89e3\u7684\uff0c\u8fd8\u662f\u8bf4\u4e00\u4e0b\u3002\u3002\u3002\u3010last\u8bb0\u5f55\u7684\u662f\u8be5\u6b21\u7684\u7ec8\u70b9\uff0cfirst[i]\u8bb0\u5f55\u7684\u662fi\u8282\u70b9\u5bf9\u5e94\u7684\u5e8f\u53f7\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230last[]\uff0cnext\u6570\u7ec4\u6df1\u641c\u65b9\u4fbf\u3011\nprocedure dfs(x,hh:longint);//\u6b64\u5904\u7528\u7684\u662fdfs\u5efa\u6811\nvar\n        i:longint;\nbegin\n        flag[x]:=true;//\u5df2\u52a0\u5165\u6811\uff0c\u9632\u6b62\u5faa\u73af\u6b21\u6570\u8fc7\u591a\n        h[x]:=hh;//\u8bb0\u5f55\u9ad8\u5ea6\uff0clca\u7528\n        i:=first[x];//\u8fd9\u91cc\u7684i\u5c31\u662fx\u5bf9\u5e94\u7684\u5e8f\u53f7\uff0c\u4e0b\u9762\u7684last[i]\u5c31\u662fx\u5bf9\u5e94\u7684\u7ec8\u70b9\u5566\n        while i<>0 do//\u5c31\u662f\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u70b9\u4e86\u5457\n        begin\n                if flag[last[i]]=false then\n                begin\n                        f[last[i],0]:=x;//\u8bb0\u4f4fpapa\n                        dis[last[i],0]:=w[i];//\u7b49\u4e0b\u9884\u5904\u7406\u548c\u6c42\u7b54\u6848\u8981\u7528\n                        dfs(last[i],hh+1);//\u4ee5\u5f53\u524d\u7ec8\u70b9\u4e3a\u6839\u8282\u70b9\u7ee7\u7eed\u627e\n                end;\n                i:=next[i];\n        end;\nend;\nfunction min(x,y:longint):longint;\nbegin\n        if x<y then exit(x) else exit(y);\nend;\nfunction lca(x,y:longint):longint;//\u6a21\u677f\u9898\u662f\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u8fd9\u91cc\u88ab\u6211\u6539\u6389\u4e86\uff0c\u6c42\u7b54\u6848\u4e86\nvar\n        k:longint;\nbegin\n                lca:=maxlongint;\n                if h[x]<h[y] then swap(x,y);//\u9ed8\u8ba4x\u7684\u6df1\u5ea6\u6bd4y\u8981\u5927\n                while h[x]>h[y]  do//\u8981\u628ax\u63d0\u5230\u548cy\u4e00\u6837\u6d45\n                begin\n                        k:=0;\n                        while h[x]-h[y]>=kk[k+1] do//\u8fd9\u91cc\u770b\u4e0d\u61c2\u7684\u8bdd\u3002\u3002\u3002\u4f60\u7ffb\u4e0blca\u7684\u8bfe\u4ef6\u5427\n                                inc(k);\n                        lca:=min(lca,dis[x,k]);\n                        x:=f[x,k];\n                end;\n                while x<>y do//\u4e00\u6837\u7684\u65f6\u5019\uff0cx,y\u5c31\u91cd\u5408\u4e86\uff0c\u5230papa\u7684\u5730\u65b9\u4e86\n                begin\n                        if f[x,0]=f[y,0]then\n                        begin\n                                lca:=min(lca,min(dis[x,0],dis[y,0]));\n                                break;\n                        end;\n                        k:=0;\n                        while (f[x,k+1]<>f[y,k+1]) do\n                                inc(k);\n                        lca:=min(lca,min(dis[x,k],dis[y,k]));\n                        x:=f[x,k];\n                        y:=f[y,k];\n                end;\nend;\n//\u4e0a\u9762\u7684min\u51fd\u6570\u8fd8\u662f\u633a\u597d\u7406\u89e3\u7684\nbegin\n        //assign(input,'truck.in'); reset(input);\n        read(n,m);\n        for i:=1 to m do//\u5f88\u591a\u4eba\u8fd9\u4e9b\u5730\u65b9\u5f00\u59cb\u5f88\u590d\u6742\uff0c\u6211\u4e5f\u662f\uff0c\u4f46\u540e\u6765\u6211\u60f3\u5230\uff0c\u5176\u5b9e\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u5efa\u6811\u7684\u65f6\u5019\u53ea\u4f1a\u9009\u5230\u4e24\u70b9\u4e4b\u95f4\u6700\u5927\u7684\u90a3\u6761\u8fb9\uff08\u9898\u76ee\u8bf4\u4e24\u4e2a\u70b9\u4e0d\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\u8def\uff09\uff0c\u56e0\u4e3a\u6392\u8fc7\u5e8f\u4e86\n        begin\n                read(l[i],r[i],c[i]);\n        end;\n        qsort(1,m);\n        for i:=1 to n do fa[i]:=i;\n        for i:=1 to m do//kruskal\u6784\u5efa\u6700\u5927\u751f\u6210\u6811\uff0c\u987a\u4fbf\u8bb0\u5f55\u70b9\u548c\u8fb9\n              if getfa(l[i])<>getfa(r[i]) then\n              begin\n                    fa[fa[l[i]]]:=fa[r[i]];\n                    add(l[i],r[i],c[i]);//\u7531\u4e8e\u53cc\u5411\uff0c\u5fc5\u987b\u8981\u4e24\u4e2a\u65b9\u5411\u90fdadd\u4e00\u904d\n                    add(r[i],l[i],c[i]);\n              end;\n        dfs(1,0);//\u6570\u636e\u592a\u6c34\uff0c\u6211\u8fd9\u7b97\u6295\u673a\u53d6\u5de7\u5417\uff1f\n        i:=1;\n        while kk[i]<n do//\u9884\u5904\u7406\u8fc7\u7a0b\n        begin\n                for j:=1 to n do\n                begin\n                     f[j,i]:=f[f[j,i-1],i-1];\n                     dis[j,i]:=min(dis[j,i-1],dis[f[j,i-1],i-1]);\n                end;\n                inc(i);\n        end;\n        read(q);\n        for i:=1 to q do\n        begin\n                   read(aa,bb);\n                   if getfa(aa)<>getfa(bb) then writeln(-1)//\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u8bf4\u660e\u4ed6\u4eec\u4e0d\u8fde\u901a\n                   else writeln(lca(aa,bb));\n        end;\nend.\n\n```",
        "postTime": 1510115258,
        "uid": 38313,
        "name": "chenkaixing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u770b\u5230dalao\u4eec\u5728\u641c\u7d22\u65f6\u90fd\u7528\u7684dfs\uff0c\u90a3juruo\u5c31\u6765\u4e00\u53d1bfs\u5427\uff5e\uff5e\u5176\u4ed6\u548c\u5927\u4f6c\u4eec\u4e00\u6837\uff0c\u6700\u5927\u751f\u6210\u6811+\u500d\u589e\u6c42LCA\uff08\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u557e\u557e\uff5e\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\nint n,m,z,q,f[20][10005],judge=0,t1,t2,book[10005]={0},d[10005]={0},fa[10005],g[20][10005],ans=0x3c3c3c3c;\nvector<int> G[10005],H[10005];\nstruct node\n{\n    int u,v,w;\n}e[50005];\nvoid lca(int a,int b)\n{\n    if (d[a]>d[b]) swap(a,b);\n    for (int k=0;k<=19;k++)\n    {\n        if ((d[b]-d[a])>>k & 1)//\u8fd9\u91cc\u662f\u767d\u4e66\u4e0a\u7684\u7ecf\u5178\u54e6\n        {\n            ans=min(ans,g[k][b]);\n            b=f[k][b];\n            if (d[a]==d[b]) break;\n        }\n    }\n    if (a==b) return;\n    for (int k=19;k>=0;k--)\n    {\n        if (f[k][a]!=f[k][b])\n        {\n            ans=min(ans,g[k][a]);\n            ans=min(ans,g[k][b]);\n            a=f[k][a];b=f[k][b];\n        }\n    }\n    ans=min(g[0][a],ans);\n    ans=min(g[0][b],ans);\n    return;\n}\nvoid init()\n{\n    for (int k=0;k<19;k++)\n    {\n        for (int j=1;j<=n;j++)\n        {\n            if (f[k][j]==-1) f[k+1][j]=-1;\n            else\n            {\n                f[k+1][j]=f[k][f[k][j]];\n                g[k+1][j]=min(g[k][j],g[k][f[k][j]]);\n            }\n        }\n    }\n    return;\n}\nvoid bfs()\n{\n    queue<int> p;\n    p.push(1);\n    book[1]=1;\n    while (!p.empty())\n    {\n        int cur=p.front();\n        p.pop();\n        for (int i=0;i<G[cur].size();i++)\n        {\n            if (book[G[cur][i]]==0)//\u5f31\u5f31\u7684bfs\u4e2d\u7684\u9884\u5904\u7406\n            {\n                p.push(G[cur][i]);\n                book[G[cur][i]]=1;\n                f[0][G[cur][i]]=cur;\n                g[0][G[cur][i]]=H[cur][i];\n                d[G[cur][i]]=d[cur]+1;\n            }\n        }\n    }\n    return;\n}\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nbool cmp(node x,node y)\n{\n    if (x.w>y.w) return true;\n    return false;\n}\nint main()\n{\n    memset(g,0x3c,sizeof(g));\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++)\n    {\n        e[i].w=0;\n    }\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&e[i].u,&e[i].v,&z);\n        e[i].w=max(e[i].w,z);\n    }\n    sort(e+1,e+1+m,cmp);\n    for (int i=1;i<=n;i++)\n    {\n        fa[i]=i;\n    }\n    for (int i=1;i<=m;i++)\n    {\n        if (find(e[i].u)!=find(e[i].v))//\u4e00\u8fb9\u627e\u8fb9\u4e00\u8fb9\u5efa\u6811\n        {\n            fa[find(e[i].v)]=find(e[i].u);\n            G[e[i].u].push_back(e[i].v);\n            G[e[i].v].push_back(e[i].u);\n            H[e[i].u].push_back(e[i].w);\n            H[e[i].v].push_back(e[i].w);\n            judge++;\n        }\n        if (judge==n-1) break;\n    }\n    f[0][1]=-1;\n    bfs();\n    init();\n    scanf(\"%d\",&q);\n    for (int i=1;i<=q;i++)\n    {\n        ans=0x3c3c3c3c;\n        scanf(\"%d%d\",&t1,&t2);\n        if (find(t1)!=find(t2)) printf(\"-1\\n\");//\u5982\u679c\u4e0d\u80fd\u8054\u901a\n        else\n        {\n            lca(t1,t2);\n            if (ans==0x3c3c3c3c) printf(\"-1\\n\");\n            else printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1510038515,
        "uid": 40293,
        "name": "Freyja",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u7684\u65e0\u5411\u56fe\u548cq\u5bf9\u70b9(x,y)\uff0c\u4f7fx,y\u4e4b\u95f4\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u6700\u5927\u3002\u6c42\u8fd9\u4e2a\u6743\u503c\u3002\n\n\n\u8fd9\u4e2a\u9898\u5982\u679c\u7406\u89e3\u5230\u8fd9\u91cc\u57fa\u672c\u4e0a\u5c31\u6709\u601d\u8def\u4e86\uff08\u7136\u800c\u672c\u849f\u84bb\u4ee5\u4e3a\u8d27\u8f66\u662f\u540c\u65f6\u8dd1\u7684\u4e8e\u662f\u60f3\u5230\u7f51\u7edc\u6d41\u2026\u2026\u4f30\u8ba1\u6ca1\u4eba\u8ddf\u6211\u4e00\u6837\uff09\n\n\u4e8e\u662f\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u662fFloyd\uff0c\u7136\u800cO(n^3)\u80af\u5b9a\u8fc7\u4e0d\u53bb\uff08\u8fd9\u662fD1T3\u554a\u548b\u53ef\u80fd\u4e94\u884c\u4ee3\u7801\u6c34\u8fc7\uff09\n\n\n\u7136\u540e\u5c31\u60f3\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u6709a\u4e2a\u70b9\u7684\u8fde\u901a\u5b50\u56fe\uff08\u8fd9\u662f\u4e2a\u9677\u9631\uff0c\u9898\u76ee\u6ca1\u8bf4\u56fe\u4e00\u5b9a\u662f\u8fde\u901a\u7684\uff09\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\u6765\u8bf4\uff0c\u80fd\u8dd1\u8fb9\u6743\u5927\u7684\u8def\u5f84\u80af\u5b9a\u4e0d\u8dd1\u8fb9\u6743\u5c0f\u7684\u3002\u53c8\u56e0\u4e3a\u53ea\u9700\u8981a-1\u6761\u8fb9\uff0c\u8fd9a\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e24\u4e24\u8fde\u901a\uff0c\u6240\u4ee5\u5982\u679c\u8fd9\u4e9b\u8fb9\u662f\u5728\u7b26\u5408\u8ba9a\u4e2a\u70b9\u4e24\u4e24\u8fde\u901a\u7684\u60c5\u51b5\u4e0b\u6700\u5927\u7684a-1\u6761\u8fb9\uff0c\u90a3\u4e48\u522b\u7684\u8fb9\u4e00\u5b9a\u6ca1\u6709\u8f66\u8dd1\u3002\u6240\u4ee5\u5148\u7528Kruskal\u9020\u4e00\u4e2a\u6700\u5927\u751f\u6210\u6811\u3002\n\n\u6811\u9020\u597d\u4ee5\u540e\uff0c\u5bf9\u4e8ex,y\u7684\u67e5\u8be2\uff0c\u53ef\u4ee5\u628ax\u5230y\u7684\u8def\u5f84\u5206\u6210x\u5230\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u548cLCA\u5230y\u4e24\u6bb5\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5199\u4e00\u4e2a\u500d\u589e\uff08\u6211\u53ea\u4f1a\u500d\u589e\u2026\u2026\uff09\u6c42LCA\u3002\u4e0d\u8fc7\u540c\u65f6\u4e5f\u8981\u5b9a\u4e49\u4e00\u4e2adis[a][i]\u4ee3\u8868a\u5230a\u7684\u7b2c2^i\u4e2a\u7956\u5148\uff08\u5373a\u5230fa[a][i]\uff09\u8def\u5f84\u4e0a\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u9012\u63a8\u516c\u5f0f\u5982\u4e0b\uff08\u8ddffa\u7684\u516c\u5f0f\u5f88\u50cf\uff09\n\n\ndis[a][i]=min(dis[a][i-1],dis[fa[a][i-1]][i-1])\n\n\u9898\u76ee\u5206\u6790\u5b8c\u6bd5\uff0c\u53ef\u4ee5\u770b\u51fa\u5982\u679c\u4f1aKruskal\u548cLCA\u6a21\u677f\u5f88\u719f\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u662f\u4e24\u4e2a\u6a21\u677f\u52a0\u8d77\u6765\u7136\u540e\u5c0f\u4fee\u5c0f\u8865\u4e00\u4e0b\n\n\u8fd8\u6709\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u7ec6\u8282\uff0c\u5728\u4ee3\u7801\u91cc\u7528\u6ce8\u91ca\u7ed9\u51fa\uff08Kruskal\u548c\u500d\u589eLCA\u6a21\u677f\u90e8\u5206\u7684\u6ce8\u91ca\u5c31\u4e0d\u7ed9\u4e86\uff09\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\nstruct edge\n{\n    int u;\n    int v;\n    int w;\n    bool operator<(const edge &b)const\n    {\n        return w>b.w;//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n    }\n}e[100010];\nstruct ed\n{\n    int to;\n    int w;\n};\nvector<ed>g[10010];\nint n,m,q,p[10010];\nbool vis[10010];\nconst int M=15;\nint fa[10010][M],dis[10010][M],dep[10010];\nint f(int x)\n{\n    return x==p[x]?x:p[x]=f(p[x]);\n}\nvoid kruskal(void)\n{\n    for(int i=0,done=1;i<m*2&&done<=n;i++)\n    {/*\u56e0\u4e3a\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u6570\u91cf\u662f2m\u800c\u4e0d\u662fm*/\n        int u=e[i].u,v=e[i].v,w=e[i].w;\n        int x=f(u),y=f(v);\n        if(x!=y)\n        {\n            g[u].push_back((ed){v,w});\n            g[v].push_back((ed){u,w});\n            done++;\n            p[x]=y;\n        }\n    }\n}\nvoid dfs(int u,int f,int d,int w)\n{\n    vis[u]=true;\n    fa[u][0]=f;\n    dis[u][0]=w;\n    dep[u]=d;\n    for(int i=1;i<M&&(1<<i)<=dep[u];i++)\n        fa[u][i]=fa[fa[u][i-1]][i-1],\n        dis[u][i]=min(dis[u][i-1],dis[fa[u][i-1]][i-1]);\n    for(int i=0;i<g[u].size();i++)\n    {\n        int v=g[u][i].to,w=g[u][i].w;\n        if(v==f)continue;\n        dfs(v,u,d+1,w);\n    }\n}\nint lca(int a,int b)\n{\n    int minn=0x3f3f3f3f;\n    if(dep[a]>dep[b])swap(a,b);\n    for(int i=M-1;i>=0;i--)\n        if(dep[fa[b][i]]>=dep[a])\n            minn=min(minn,dis[b][i]),\n            b=fa[b][i];/***\u5148\u66f4\u65b0\u6700\u5c0f\u8fb9\u6743\u518d\u79fb\u52a8\uff0c\u6ce8\u610f\u987a\u5e8f***/ \n    if(a==b)return minn;\n    for(int i=M-1;i>=0;i--)\n    {\n        if((1<<i)<=dep[a]&&fa[a][i]!=fa[b][i])\n            minn=min(minn,dis[a][i]),\n            minn=min(minn,dis[b][i]),\n            a=fa[a][i],\n            b=fa[b][i];/***\u540c\u4e0a\uff0c\u5148\u66f4\u65b0\u518d\u79fb\u52a8***/\n    }\n    return min(minn,min(dis[a][0],dis[b][0]));\n    /*\u8fd9\u91cc\u9700\u8981\u5c06minn\u548ca,b\u5230LCA\u7684\u957f\u5ea6\u6bd4\u8f83\uff0c\u6700\u5c0f\u503c\u624d\u662f\u6700\u7ec8\u7ed3\u679c*/\n}\nint main(void)\n{\n    memset(dis,0x3f3f3f3f,sizeof(dis));/*\u521d\u59cb\u5316\u4e3a\u65e0\u9650\u5927*/ \n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)p[i]=i;\n    for(int i=0;i<m;i++)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        e[i*2]=(edge){a,b,c};\n        e[i*2+1]=(edge){b,a,c};\n        /*\u6ce8\u610f\u5b58\u65e0\u5411\u8fb9*/ \n    }\n    sort(e,e+m*2);/*\u4e00\u5171\u67092m\u6761\u8fb9*/ \n    kruskal();\n    int x;\n    for(int i=1;i<=n;i++)\n        if(!vis[f(i)])dfs(i,0,1,0);\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        int a,b,x,y;\n        scanf(\"%d%d\",&a,&b);\n        x=f(a),y=f(b);\n        if(x!=y)//\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u5e76\u67e5\u96c6\u5219\u76f4\u63a5\u8f93\u51fa-1 \n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        printf(\"%d\\n\",lca(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1509793292,
        "uid": 47778,
        "name": "zyt1253679098",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u9898\u610f\u662f\uff1a\u5bf9\u4e8e\u6bcf\u7ec4x\u3001y,\u6c42x\u5230y\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u4f7f\u7528\u6700\u5927\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u6700\u5927\u751f\u6210\u6811\u6ee1\u8db3\u6027\u8d28\uff1a\u751f\u6210\u6811\u4e2d\u6700\u5c0f\u8fb9\u6743\u6700\u5927\uff0c\u4e14\u4efb\u610f\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6743\u6700\u5927\u3002\n\n\u6709\u4e86\u6811\u4e4b\u540e\uff0c\u8981\u6c42\u8def\u5f84\uff0c\u90a3\u5c31\u8981\u8003\u8651LCA\u3002\n\n\u9996\u5148\uff0c\u8fd9\u9898\u53ef\u4ee5\u6811\u5256\uff0c\u4f46\u662f\u6211\u592a\u61d2\u4e86\uff0c\u4e8e\u662f\u5199\u4e86\u500d\u589e233\n\n\u5177\u4f53\u641e\u6cd5\uff1a\n\nKruskal\u8dd1\u51fa\u6700\u5927\u751f\u6210\u6811\uff0c\u7136\u540e\u5728\u6811\u4e0a\u500d\u589eLCA\uff0c\u5904\u7406\u51fa2\u4e2a\u6570\u7ec4\uff1afa[][]\u548cminv[][]\uff1bfa[][]\u8868\u793a\u7b2c2^k\u4e2a\u7236\u4eb2\u662f\u8c01\uff0cminv[][]\u8868\u793a\u5f53\u524d\u8282\u70b9\u5230\u5176\u7b2c2^k\u4e2a\u7236\u4eb2\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c\u5728\u6c42LCA\u7684\u540c\u65f6\uff0c\u6cbf\u8def\u5c06\u5404\u6bb5\u7684minv\u53d6\u5e76\u5373\u53ef\uff0c\u6bcf\u6b21\u65f6\u95f4\u4e0eLCA\u67e5\u8be2\u76f8\u540c\uff0c\u4e3alogn\u3002\n\n\u73b0\u5728\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u56fe\u4e0d\u4e00\u5b9a\u662f\u8fde\u901a\u7684\u3002\u3002\u3002\u4e0d\u80fd\u65e0\u8111LCA\u3002\u3002\u3002\n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff1a\u5728Kruskal\u7ed3\u675f\u540e\uff0c\u5bf9\u5e76\u67e5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u96c6\u5408\u5404\u8fdb\u884c\u4e00\u6b21LCA\u9884\u5904\u7406\u3002\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c\u5148\u5224\u65ad\u4e24\u8282\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u82e5\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u5219\u8fdb\u884cLCA\u67e5\u8be2\uff0c\u5426\u5219\u76f4\u63a5\u8f93\u51fa-1\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n    \n        \n        \n    \n    \n    \n    \n    \n        \n        \n        \n    \n\n\n\n\n    \n    \n        \n\n    \n    \n    \n    \n        \n\n    \n    \n    \n            \n    \n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<string>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<set>\n#define inf 2147483647\n#define ri register int\n#define ll long long\nusing namespace std;\ninline void read(int &x){\n    x=0;\n    char t=getchar();\n    bool f=0;\n    while(t<'0' || t>'9'){\n        if(t=='-')f=1;\n        t=getchar();\n    }\n    while(t>='0' && t<='9'){\n        x=(x<<3)+(x<<1)+t-'0';\n        t=getchar();\n    }\n    if(f)x=-x;\n}\ninline void addedge(int,int,int);\nint u[100010];\nint v[100010];\nint w[100010];\nint first[10005];\nint next[100010];\nint pe=0;  //\u90bb\u63a5\u8868(\u65e0\u5411)\ninline bool cmp(const int a,const int b);\nint ha_e[50005];  //\u8fb9\u6392\u5e8f\u8f85\u52a9\u6570\u7ec4 \ninline void Kruskal();\nint find(int);\nint bcj[10005];  //\u5e76\u67e5\u96c6 \nbool use[50005];  //\u8bb0\u5f55\u8fb9\u662f\u5426\u4f7f\u7528 \nvoid dfs(int,int);  //LCA\u9884\u5904\u7406,\u76f4\u63a5\u7236\u4eb2\u53ca\u6700\u5c0f\u8fb9\u6743\u5728\u4e0a\u5c42\u5904\u7406 \nbool vis[10005];  //\u9632\u6b62\u91cd\u590d\u8bbf\u95ee \nint dep[10005];  //\u8282\u70b9\u6df1\u5ea6 \nint fa[10005][15];  //LCA\u8868 \nint minv[10005][15];  //\u8282\u70b9\u5230\u5176\u7b2c2^k\u4e2a\u7236\u4eb2\u8def\u5f84\u95f4\u7684\u6700\u5c0f\u8fb9\u6743 \ninline int query(int,int);  //\u67e5\u8be2\u8def\u5f84\u6700\u5c0f\u8fb9\u6743 \nint n,m,q;\nint rest;\nint x,y,z;\nint main(){\n    read(n);read(m);\n    rest=n;\n    for(ri i=1;i<=m;i++){\n        read(x);read(y);read(z);\n        addedge(x,y,z);\n        addedge(y,x,z);\n        ha_e[i]=i<<1;\n    }  //\u5efa\u521d\u59cb\u56fe \n    sort(ha_e+1,ha_e+1+m,cmp);  //\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n    Kruskal();  //\u751f\u6210\u6700\u5927\u751f\u6210\u6811\uff0c\u8bb0\u5f55\u9700\u8981\u4f7f\u7528\u7684\u8fb9 \n    memset(vis,0,sizeof(vis));\n    for(ri i=1;i<=n;i++)  //\u751f\u62102\u4e2a\u500d\u589e\u8868 \n        if(!vis[find(i)]){\n            fa[i][0]=0;  //\u6839\u8282\u70b9\u65e0\u7236\u4eb2 \n            minv[i][0]=inf;\n            dfs(i,1);  //\u4ee5i\u53f7\u8282\u70b9\u4e3a\u6839\u8fdb\u884c\u904d\u5386 \n        }\n    read(q);\n    for(ri i=1;i<=q;i++){\n        read(x);read(y);\n        if(find(x)!=find(y)){\n            printf(\"-1\\n\");\n            continue;\n        }\n        if(dep[x]>dep[y])swap(x,y);  //\u4f7fy\u66f4\u6df1 \n        printf(\"%d\\n\",query(x,y));\n    }\n    return 0;\n}\ninline void addedge(int x,int y,int z){\n    pe++;\n    u[pe]=x;\n    v[pe]=y;\n    w[pe]=z;\n    next[pe]=first[x];\n    first[x]=pe;\n}\ninline bool cmp(const int a,const int b){\n    return w[a]>w[b];\n}\nint find(int x){\n    if(bcj[x]==x)return x;\n    else return bcj[x]=find(bcj[x]);\n}\ninline void Kruskal(){\n    int x,y,fx,fy;\n    for(ri i=1;i<=n;i++)bcj[i]=i;\n    memset(use,0,sizeof(use));\n    for(ri i=1;i<=m && rest>1;i++){\n        x=u[ha_e[i]];\n        y=v[ha_e[i]];\n        fx=find(x);\n        fy=find(y);\n        if(fx!=fy){\n            bcj[fx]=fy;\n            rest--;\n            use[ha_e[i]>>1]=1;\n        }\n    }\n}\nvoid dfs(int s,int h){\n    int e,t;\n    dep[s]=h;\n    vis[s]=1;\n    for(ri i=1;(1<<i)<h;i++){  //i=0\u5df2\u5728\u4e0a\u5c42\u5904\u7406\uff1b\u82e51<<i==h\u5219\u6070\u6709\u4e00\u4e2a\u8282\u70b9\u8d8a\u754c \n        fa[s][i]=fa[fa[s][i-1]][i-1];\n        minv[s][i]=min(minv[s][i-1],minv[fa[s][i-1]][i-1]);\n    }\n    e=first[s];\n    t=v[e];\n    while(e){\n        if(!vis[t] && use[(e+1)>>1]){\n            fa[t][0]=s;\n            minv[t][0]=w[e];\n            dfs(t,h+1);\n        }\n        e=next[e];\n        t=v[e];\n    }\n}\ninline int query(int x,int y){\n    int dt=dep[y]-dep[x];\n    int ans=inf;\n    for(ri i=0;(1<<i)<=dt;i++)\n        if((1<<i)&dt){\n            ans=min(ans,minv[y][i]);\n            y=fa[y][i];\n        }\n    if(x==y)return ans;\n    for(ri i=13;i>=0;i--)\n        if(fa[x][i]!=fa[y][i]){\n            ans=min(ans,minv[x][i]);\n            ans=min(ans,minv[y][i]);\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    ans=min(ans,minv[x][0]);\n    ans=min(ans,minv[y][0]);\n    return ans;\n}\n```",
        "postTime": 1509507402,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[http://www.cnblogs.com/OIerShawnZhou/](http://www.cnblogs.com/OIerShawnZhou/)\n\n\uff08\u6211\u5e73\u5e38\u5199\u7684\u9898\u89e3\u90fd\u4f1a\u5f80\u535a\u5ba2\u91cc\u53d1\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u524d\u6765\u62cd\u7816\uff09\n\n\u8bf4\u51fa\u6765\u4f60\u53ef\u80fd\u4e0d\u4fe1\uff0c\u8fd9\u9898\u6211\u7206\u4e86\u4e00\u6574\u5929\u76840\u3002\u60f3\u83b7\u53d6\u66f4\u591a\u771f\u76f8\u8005\uff0c\u8bf7\u6253\u5f00\u6d1b\u8c37p1967\u9898\u8bc4\u6d4b\u754c\u9762\uff0c\u8f93\u5165\u7528\u6237\u540d\u201czx2000412\u201d\uff0c\u4f60\u5c31\u77e5\u9053\u73b0\u72b6\u6709\u591a\u60e8\u70c8\u3002\n\n\u5148\u8bf4\u8bf4\u601d\u8def\u5427\u3002\u542c\u8bf4\u8fd9\u9053\u9898\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u6211\u5c31\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u5f80\u4e0b\u5c55\u5f00\u7684\u3002\n\n\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u8dd1\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\uff0c\u4ee5\u83b7\u5f97\u7684\u6811\u7684\u8fb9\u518d\u5efa\u4e00\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u8dd1\u4e00\u6b21bfs\u3002\n\n\u540e\u6765\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5e73\u65b9\u9636\uff0c\u80af\u5b9a\u4e0d\u662f\u6807\u7b97\uff0c**\u53ea\u62ff\u4e865\u5206**\uff08\u6211\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u9898\u6570\u636e\u771f\u5fc3\u5f3a\n\n\u8003\u8651\u5230\u6bcf\u6b21\u662f\u5728\u6811\u4e0a\u8be2\u95ee\u4efb\u610f\u4e24\u70b9\u6700\u5927\u8f7d\u91cd\u91cf\uff0c\u9042\u60f3\u5230LCA\u505a\u6cd5\u3002\u6700\u540e\u8dd1\u4e86380ms\uff0c\u5dee\u5f3a\u4eba\u610f\u3002\n\n\u542c\u8bf4\u6811\u5256\u505a\u6cd5\u66f4\u5feb\uff1f\u6539\u5929\u8bd5\u4e00\u4e0b\u3002\n\n\u4f9d\u7136\u662f\u8981\u5904\u7406\u51fa\u6700\u5927\u751f\u6210\u6811\uff0c\u5b58\u8d77\u6765\u3002\u7528\u4e24\u4e2a\u500d\u589e\u6570\u7ec4\uff0c\u4e00\u4e2a\u662ff[i][j]\uff0c\u4ee3\u8868\u4ecei\u8fd9\u4e2a\u70b9\u5411\u4e0a\u8e662^j\u4e2a\u70b9\u662f\u54ea\u4e2a\u70b9\uff0c\u53e6\u4e00\u4e2a\u662fminval[i][j]\u4ee3\u8868\u4ecei\u5411\u4e0a\u8e662^j\u4e2a\u70b9\u65f6\u7ecf\u8fc7\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n\n\uff08\u6c42\u6700\u5927\u8f7d\u91cd\u91cf\u4e3a\u4ec0\u4e48\u7b97\u6700\u5c0f\uff1f\u9053\u7406\u5f88\u663e\u7136\u554a\uff0c\u4e0d\u53ef\u4ee5\u8d85\u91cd\uff0c\u6240\u4ee5\u6700\u5927\u8f7d\u91cd\u91cf\u4e00\u5b9a\u662f\u6700\u5c0f\u9053\u8def\u627f\u8f7d\u91cf\uff09\n\n\u6c42\u751f\u6210\u6811\u662f\u88f8\u7684Kruskal\uff0c\u5e76\u67e5\u96c6\u505a\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u7ec6\u8282\u90e8\u5206\u8be6\u89c1\u4ee3\u7801\u3002\uff08\u8fd9\u5e74\u5934\u8c01\u8fd8\u7528Prim\uff09\n\n\u7136\u540e\u662f\u4e8c\u6b21\u5efa\u56fe\uff0c\u8fd9\u91cc\u6709\u4e00\u6b65dfs\u9884\u5904\u7406\uff0c\u628a\u8fd9\u4e2a\u56fe\u8f6c\u6362\u6210\u6811\u4e00\u6837\u7684\u5f62\u5f0f\uff08\u867d\u7136\u672c\u6765\u5c31\u662f\u6811\uff09dep\u6570\u7ec4\u8bb0\u5f55\u6df1\u5ea6\u65b9\u4fbflca\u4f7f\u7528\u3002\n\n\u6c42LCA\u65f6\u4e5f\u9700\u8981\u5148\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\uff0c\u7136\u540e\u8e66\u7684\u65f6\u5019\u987a\u5e26\u7ef4\u62a4\u4e00\u4e0bans\u5c31\u597d\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define maxn 50005\n#define INF 888888888888\nusing namespace std;\ntypedef long long ll;\n//------------------------\u53d8\u91cf\u4e0e\u7ed3\u6784\u4f53---------------------------\nll dep[maxn],f[maxn][21],minval[maxn][21];\nll n,m,q,x,y;\nll tot = 0,head[maxn],father[maxn],fa[maxn];\nstruct Edge{\n    ll from,to,dis;\n    bool operator<(const Edge& rhs)const{\n        return dis > rhs.dis;\n    }\n};\nEdge edge_T[maxn];\nEdge edge[maxn];\n//-------------------------\u8f85\u52a9\u7c7b\u51fd\u6570-----------------------------\nll read(){\n    ll num = 0;\n    char c;\n    bool flag = false;\n    while ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n    if (c == '-')\n        flag = true;\n    else\n        num = c - '0';\n    while (isdigit(c = getchar()))\n        num = num * 10 + c - '0';\n    return (flag ? -1 : 1) * num;\n}\nll min_ele(ll a,ll b,ll c){\n    ll t = min(a,b);\n    return min(t,c);\n}\n//---------------------Kruskal\u4e0e\u4e8c\u6b21\u5efa\u56fe--------------------------\n\nvoid init_ufs(){\n    for (register ll i=1;i<=n;i++)\n        father[i] = i;\n}\n\nll find(ll x){\n    if (father[x] == x)\n        return x;\n    father[x] = find(father[x]);\n    return father[x];\n}\nvoid merge(ll x, ll y){\n    x = find(x);\n    y = find(y);\n    father[y] = x;\n}\n\nvoid add_edge(ll from,ll to,ll dis){\n    edge[++tot].from = head[from];\n    edge[tot].to = to;\n    edge[tot].dis = dis;\n    head[from] = tot;\n}\nvoid dfs(ll x){\n    for (register ll i = head[x];i;i = edge[i].from){\n        ll v = edge[i].to;\n        if (v == fa[x])\n            continue;      \n        f[v][0] = x;\n        minval[v][0] = edge[i].dis;\n        dep[v] = dep[x] + 1;\n        fa[v] = x;\n        dfs(v);\n    }\n}\n//--------------------------LCA\u76f8\u5173------------------------------\nvoid init_lca(){\n    for (register ll i=1;i<=20;i++)\n        for (register ll j=1;j<=n;j++){\n            f[j][i] = f[ f[j][i-1] ][i-1];\n            minval[j][i] = min(minval[j][i-1],minval[ f[j][i-1] ][i-1]);\n        }\n}\nll lca(ll x,ll y){\n    ll ans = INF;\n    if (dep[x]>dep[y])\n        swap(x,y);\n    for (register ll i=20;i>=0;i--)\n        if (dep[f[y][i]]>=dep[x]){\n            ans=min(ans,minval[y][i]);\n            y=f[y][i];\n        }\n    if (x==y)\n        return ans;\n    for (register ll i=20;i>=0;i--){\n        if (f[x][i] != f[y][i]){\n            ans = min_ele(minval[x][i],minval[y][i],ans);\n            x = f[x][i];\n            y = f[y][i];\n        }\n    }\n    ans = min_ele(minval[x][0],minval[y][0],ans);\n    return ans;\n}\n//----------------------------\u4e3b\u51fd\u6570----------------------------\nint main(){\n    n = read();m = read();\n    for (register ll i=1;i<=m;i++){\n        edge_T[i].from = read();\n        edge_T[i].to = read();\n        edge_T[i].dis = read();\n    }\n    sort(edge_T+1,edge_T+m+1);\n    init_ufs();\n    for (register ll i=1;i<=m;i++)\n        if (find(edge_T[i].from) != find(edge_T[i].to)){\n            merge(edge_T[i].from,edge_T[i].to);\n            add_edge(edge_T[i].from, edge_T[i].to, edge_T[i].dis);\n            add_edge(edge_T[i].to, edge_T[i].from, edge_T[i].dis);\n        }\n    for (register ll i=1;i<=n;i++)\n        if (father[i] == i){\n            fa[i] = i;dep[i] = 1;dfs(i);\n        }\n    init_lca();\n    q = read();\n    for (register ll i=1;i<=q;i++){\n        x = read();y = read();\n        if (find(x) == find(y))\n               printf(\"%lld\\n\",lca(x,y));\n        else\n            printf(\"-1\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1507398778,
        "uid": 20197,
        "name": "ShawnZhou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u4eba\u5199st\u8868....\n\nst\u8868\u662f\u9488\u5bf9\u9759\u6001RMQ\u7684O(1)\u7b97\u6cd5\uff0c\u8fd9\u91cc\u521a\u597d\u5408\u9002\uff0c\u5927\u81f4\u5199\u6cd5\uff1a\n\n```cpp\n/////////////////////////////////////////\n/////////STable//////////////////////////\n// \u8fd9\u91cc\u7ef4\u62a4\u7684st[i][j] \u662f\u67e5\u8be2 [ i, i+(1<<j)  ) [\u5de6\u5f00\u53f3\u95ed]\u7684\n// \u4e0d\u662f\u67e5\u8be2 [i, i+(1<<j) ]\u7684\n// \u53ef\u4ee5\u7b80\u5316\u7f16\u7801\u96be\u5ea6\nint st[MAXN][15];\nint arr[MAXN];\n\nvoid build_st()\n{\n  int mxlog = log(N)/log(2);\n  //\u786e\u5b9aj\u7684\u6700\u5927\u503c\n  for(int i = 1; i <= N; i++)\n    {\n      st[i][0] = arr[i];\n\n    }\n\n  for(int u = 1; u <= mxlog; u++)\n    for(int i = 1; i + (1<<(u-1)) <= N; i++)\n      { // st[i][j] \u53ef\u4ee5\u9012\u63a8 \n    st[i][u] = min(st[i][u-1], st[i+(1<<(u-1))][u-1]);\n\n      }\n}\n\nvoid build_tre()\n{\n  for(int i = 1; i <= N; i++)\n    arr[ tid[i] ] = W[i];\n  build_st();\n}\n\n\nint query(int x, int y)\n{\n\n  if( x > y) return 0x7fffffff ;\n // \u6ce8\u610f\u8fd9\u91cc\uff0c\u5982\u679c\u662f\u7ebf\u6bb5\u6811\u4f1a\u5728\u67e5\u8be2\u8fc7\u7a0b\u4e2d\u6392\u9664\u8fd9\u79cd\u60c5\u51b5\uff0c\n // \u4f46\u5982\u679c\u662fst\u8868\u4e0b\u9762\u5c31\u6709\u6570\u5b66\u9519\u8bef(log\u8d8a\u754c)\uff0c\u7136\u540esegment fault, core\u6389\n  y++; // \u8f93\u5165\u7684x\uff0cy\u662f\u95ed\u533a\u95f4\uff0c\u7136\u800c\u7ef4\u62a4\u7684st\u8868\u5de6\u5f00\u53f3\u95ed\n  int mnlog = log(y-x) / log(2); \n  return min(st[x][mnlog], st[y-(1<<mnlog)][mnlog]);\n}\n\n\nint ask_range(int u, int v)\n{\n  if( find(u) != find(v) ) return -1;\n\n  int ans = 0x7fffffff;\n  while( top[u] != top[v] )\n    {\n      if(dep[top[u]] < dep[top[v]] ) swap(u,v);\n      ans = min( ans, query( tid[top[u]] , tid[ u] ));\n      u = fat[top[u]];\n    }\n  if( dep[u] < dep[v] ) swap(u,v);\n  ans = min(ans, query( tid[v] + 1, tid[u] ));\n  return ans;\n}\n```\n\n\u603b\u4f53\u4ee3\u7801\uff08\u4e0d\u60f3\u770b\u6811\u5256\u53ef\u4ee5\u627e\u627e\u5176\u4ed6\u7684\u9898\u89e3\uff09\uff1a\n\n```cpp\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<fstream>\n\nusing namespace std;\n\n\nconst int MAXN = 10005;\n\nstruct node\n{\n  int u,v,w,next;\n};\n\nint getnum()\n{\n  char buf='a';int a=0;\n  while(!isdigit(buf)) buf=getchar();\n  while(isdigit(buf)) a=a*10+buf-'0',buf=getchar();\n  return a;\n}\n\nint W[MAXN];\nint N, M,Q;\n\nstruct graph\n{\n  node Edge[100005];\n  int head[MAXN];\n  int ecur;\n  graph()\n  {\n    memset(head,0,sizeof(head));\n    ecur = 1;\n  }\n\n  void AddEdge(int u, int v,int w)\n  {\n    Edge[ecur].u = u;\n    Edge[ecur].v = v;\n    Edge[ecur].w = w;\n    Edge[ecur].next= head[u];\n    head[u] = ecur++;\n  }\n  \n}G,T;\n\n  \n\nbool cmp(const node& a, const node& b)\n{\n  return a.w > b.w;\n}\n\n\n\n//////////////////////////////////////\n////////////\u6811\u5256///////////////////\n\nint top[MAXN];\nint tid[MAXN];\nint tidx = 1;\n\nint fat[MAXN];\nint dep[MAXN];\nint size[MAXN];\nint son[MAXN];\n\nvoid dfs1(int u, int fa, int depth)\n{\n  fat[u] = fa;\n  dep[u] = depth;\n  size[u] = 1;\n  int mxlen = -1;\n\n  for(int k = T.head[u]; k; k=T.Edge[k].next)\n    {\n      int v = T.Edge[k].v;\n      if( v == fa)\n    continue;\n      W[v] = T.Edge[k].w;\n      dfs1(v,u,depth+1);\n      size[u] += size[v];\n      if( size[v] > mxlen )\n    {\n      mxlen = size[v];\n      son[u] = v;\n    }\n    }\n}\n\n\nvoid dfs2(int u, int anc)\n{\n  top[u] = anc;\n  tid[u] = tidx++;\n  \n  if(son[u]) dfs2(son[u],anc);\n  for(int k = T.head[u]; k; k =T.Edge[k].next)\n    {\n      int v = T.Edge[k].v;\n      if( v == fat[u] || v == son[u] ) continue;\n      dfs2(v,v);\n    }\n}\n///////////////////////////////////////////\n//////////////UFS/AND/KRUSKAL//////////////\nint parent[MAXN];\n\nint find(int u)\n{\n  int x0 = u;\n  while(parent[u] > 0)\n    u = parent[u];\n  int ans = u;\n  u = x0;\n  while(parent[u] > 0)\n    {\n      x0 = parent[u];\n      parent[u] = ans;\n      u = x0;\n    }\n  return ans;\n}\n\nbool ass(int u, int v)\n{\n  return find(u) == find(v);\n}\n\nvoid uni(int u, int v)\n{\n  int x = find(u);\n  int y = find(v);\n  if( x == y) return;\n  parent[x] = y;\n  return;\n}\n\nvoid Kruskal()\n{\n\n  sort(G.Edge + 1, G.Edge + G.ecur, cmp);\n\n  for(int i = 1; i < G.ecur; i++)\n    {\n\n      int u = G.Edge[i].u;\n      int v = G.Edge[i].v;\n      int w = G.Edge[i].w;\n\n      if( !ass(u,v))\n    {\n\n      uni(u,v);\n      T.AddEdge(u,v,w);\n      T.AddEdge(v,u,w);\n    }\n    }\n}  \n\n/////////////////////////////////////////\n/////////STable//////////////////////////\nint st[MAXN][15];\nint arr[MAXN];\n\n\n\nvoid build_st()\n{\n  int mxlog = log(N)/log(2);\n  \n  for(int i = 1; i <= N; i++)\n    {\n      st[i][0] = arr[i];\n\n    }\n\n  for(int u = 1; u <= mxlog; u++)\n    for(int i = 1; i + (1<<(u-1)) <= N; i++)\n      {\n    st[i][u] = min(st[i][u-1], st[i+(1<<(u-1))][u-1]);\n\n      }\n}\n\nvoid build_tre()\n{\n  for(int i = 1; i <= N; i++)\n    arr[ tid[i] ] = W[i];\n  build_st();\n}\n\n\nint query(int x, int y)\n{\n\n  if( x > y) return 0x7fffffff ;\n  y++;\n  int mnlog = log(y-x) / log(2);\n  return min(st[x][mnlog], st[y-(1<<mnlog)][mnlog]);\n}\n\n\nint ask_range(int u, int v)\n{\n  if( find(u) != find(v) ) return -1;\n\n  int ans = 0x7fffffff;\n  while( top[u] != top[v] )\n    {\n      if(dep[top[u]] < dep[top[v]] ) swap(u,v);\n      ans = min( ans, query( tid[top[u]] , tid[ u] ));\n      u = fat[top[u]];\n    }\n  if( dep[u] < dep[v] ) swap(u,v);\n  ans = min(ans, query( tid[v] + 1, tid[u] ));\n  return ans;\n}\n\n\n/////////////SEGTREE/////////////////////\n//\u7ebf\u6bb5\u6811\u5df2\u5220\n         \n\n/////////////////////////////////////////////////////////////\n\n\n\nvoid print(int* a)\n{\n  for(int i = 1; i <= N; i++)\n    printf(\"%d \",a[i]);\n  printf(\"\\n\\n\");\n\n}\n\nvoid debug()\n{\n  N = 6;\n  memset(parent,-1,sizeof(parent));\n  G.AddEdge(1,2,10);\n  G.AddEdge(2,1,10);\n  G.AddEdge(2,3,5);\n  G.AddEdge(3,2,5);\n  G.AddEdge(3,4,6);\n  G.AddEdge(4,3,6);\n  G.AddEdge(2,4,11);\n  G.AddEdge(4,2,11);\n  G.AddEdge(5,6,10);\n  Kruskal();\n  for(int i = 1; i <= N; i++)\n    if(!fat[i]) { W[i] = 0x7fffffff; dfs1(i,-1,1);}\n  for(int i = 1; i <= N; i++)\n    if(!tid[i]) dfs2(i,i);\n  build_tre();\n  cout<<ask_range(2,3)<<endl;\n  \n\n}\n// set parent -1\n\nvoid read()\n{\n  N=getnum();\n  M=getnum();\n  for(int i = 1; i <= M; i++)\n    {\n      int t1= getnum(),t2=getnum(),t3=getnum();\n      G.AddEdge(t1,t2,t3);\n      G.AddEdge(t2,t1,t3);\n    }\n  Q=getnum();\n}\nvoid solve()\n {\n Kruskal();\n for(int i = 1; i <= N; i++)\n   if(!fat[i]) { W[i] = 0x7fffffff; dfs1(i,-1,1);}\n for(int i = 1; i <= N; i++)\n   if(!tid[i]) dfs2(i,i);\n \n    build_tre();\n    for(int i = 1; i <= Q; i++)\n      {\n      int t1=getnum(),t2=getnum();\n      printf(\"%d\\n\",ask_range(t1,t2));\n    }\n}\n  \n  \nint main()\n{\n  read(); \n  solve();\n}\n```",
        "postTime": 1507292735,
        "uid": 36424,
        "name": "Templ_1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u672c\u9898\u6700\u4f18\u89e3\u4e3a**kruskal\u91cd\u6784\u6811**\n\n\u9119\u4eba\u4e0d\u624d\uff0c\u4e0d\u4f1a\u91cd\u6784\u6811\u3002\u3002\u770b\u4e86\u9898\u89e3\u624d\u53d1\u73b0\u90a3\u4e48\u7b80\u5355QAQ\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u6211\u7684\u601d\u8def\u6bd4\u8f83\u5446\u677f\uff1a**\u6700\u5927\u751f\u6210\u6811+\u6811\u5256+\u7ebf\u6bb5\u6811**\n\n\u63a5\u4e0b\u6765\u90fd\u662f\u677f\u5b50\u3002\u3002\n\nkruskal\n\n\u6811\u5256\u3010\u4ec0\u4e48\uff1f\u4f60\u8bf4\u6811\u4e0d\u8fde\u901a\uff1f\u90a3\u5c31\u591a\u5f00\u51e0\u68f5\u5457\u3011\n\n\u7ebf\u6bb5\u6811\u3002\u3002\u3002\n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n\u7136\u540e\u5c31A\u4e86\u3010\u4e00\u5f00\u59cb\u4e00\u4e2a\u5730\u65b9\u628av\u6253\u6210\u4e86u\uff0c\u7ed3\u679c\u4e00\u76f4MLE = =\u3011\n\n\u3010\u65b9\u6cd5\u4e0d\u662f\u5f88\u7b80\u6d01\uff0c\u5efa\u8bae\u53ef\u4ee5\u5b66\u5b66\u697c\u4e0b\u7684Kruskal\u91cd\u6784\u6811\uff0c\u4e0d\u8fc7\u7ec3\u7ec3\u6811\u5256\u4e5f\u662f\u68d2\u68d2\u54d2\u3011\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define LL long long int\nusing namespace std;\nconst int maxn=10005,maxm=100005,INF=2000000000,P=1000000007;\ninline int read(){\n    int out=0,flag=1;char c=getchar();\n    while(c<48||c>57) {if(c=='-') flag=-1;c=getchar();}\n    while(c>=48&&c<=57){out=out*10+c-48;c=getchar();}\n    return out*flag;\n}\n//\u539f\u56fe\nstruct node{\n    int a,b,w;\n}edges[maxm];\ninline bool operator < (const node& c,const node& d){\n    return c.w>d.w;\n}\n//\u65b0\u56fe\u3010\u6700\u5927\u751f\u6210\u6811\u3011\nint head[maxn],nedge=0;\nstruct EDGE{\n    int to,w,next;\n}edge[maxm];\ninline void build(int a,int b,int w){\n    edge[nedge]=(EDGE){b,w,head[a]};\n    head[a]=nedge++;\n    edge[nedge]=(EDGE){a,w,head[b]};\n    head[b]=nedge++;\n}\nint n,m,q,pre[maxn];\nint find(int x) {return x==pre[x] ? x:pre[x]=find(pre[x]);}\nvoid init(){\n    fill(head,head+maxn,-1);\n    n=read();\n    m=read();\n    for(int i=1;i<=n;i++) pre[i]=i;\n    for(int i=1;i<=m;i++){\n        edges[i].a=read();\n        edges[i].b=read();\n        edges[i].w=read();\n    }\n}\n//kruskal\nvoid kruskal(){\n    sort(edges+1,edges+1+m);\n    int fa,fb;\n    for(int i=1;i<=m;i++){\n        fa=find(edges[i].a);\n        fb=find(edges[i].b);\n        if(fa!=fb){\n            pre[fa]=fb;\n            build(edges[i].a,edges[i].b,edges[i].w);\n            //cout<<\"build:\"<<edges[i].a<<' '<<edges[i].b<<endl;\n        }\n    }\n}\n//\u6811\u5256\nint rt[maxn],treei=0;\nint top[maxn],son[maxn],fa[maxn],id[maxn],siz[maxn],dep[maxn],V[maxn],cnt=0;\nint Hash[maxn],belong[maxn];\nbool vis[maxn];\nvoid dfs1(int u,int f,int d,int v){\n    siz[u]=1;dep[u]=++d;fa[u]=f;vis[u]=true;belong[u]=treei;V[u]=v;\n    int to;\n    for(int k=head[u];k!=-1;k=edge[k].next)\n        if((to=edge[k].to)!=f){\n            dfs1(to,u,d,edge[k].w);\n            siz[u]+=siz[to];\n            if(!son[u]||siz[to]>siz[son[u]]) son[u]=to;\n        }\n}\nvoid dfs2(int u,int flag){\n    id[u]=++cnt;Hash[cnt]=u;\n    top[u]=(flag ? top[fa[u]]:u);\n    if(son[u]) dfs2(son[u],1);\n    int to;\n    for(int k=head[u];k!=-1;k=edge[k].next)\n        if((to=edge[k].to)!=son[u]&&to!=fa[u])\n            dfs2(to,0);\n}\nvoid pou(){\n    for(int i=1;i<=n;i++){\n        if(!vis[i]){\n            rt[++treei]=i;\n            dfs1(rt[treei],0,0,0);\n            dfs2(rt[treei],0);\n        }\n    }\n}\n//\u7ebf\u6bb5\u6811\nint L,R,Min[4*maxn];\nvoid Build(int u,int l,int r){\n    if(l==r) Min[u]=V[Hash[l]];\n    else{\n        int mid=(l+r)>>1;\n        Build(u<<1,l,mid);\n        Build(u<<1|1,mid+1,r);\n        Min[u]=min(Min[u<<1],Min[u<<1|1]);\n    }\n}\nint Query(int u,int l,int r){\n    if(l>=L&&r<=R) return Min[u];\n    else{\n        int mid=(l+r)>>1;\n        if(mid>=R) return Query(u<<1,l,mid);\n        else if(mid<L) return Query(u<<1|1,mid+1,r);\n        else return min(Query(u<<1,l,mid),Query(u<<1|1,mid+1,r));\n    }\n}\n//\u8be2\u95ee\nint cal(int u,int v){\n    int ans=INF;\n    while(top[u]!=top[v]){\n        if(dep[top[u]]<dep[top[v]]) u^=v^=u^=v;\n        L=id[top[u]];\n        R=id[u];\n        ans=min(ans,Query(1,1,n));\n        //cout<<u<<' '<<v<<' '<<ans<<endl;\n        u=fa[top[u]];\n    }\n    if(u==v) return ans;\n    if(dep[u]>dep[v]) u^=v^=u^=v;\n    L=id[u]+1;R=id[v];\n    ans=min(ans,Query(1,1,n));\n    return ans;\n}\nvoid solve(){\n    q=read();\n    int u,v;\n    while(q--){\n        u=read();\n        v=read();\n        if(belong[u]!=belong[v]) printf(\"-1\\n\");\n        else printf(\"%d\\n\",cal(u,v));\n    }\n}\nint main(){\n    init();\n    kruskal();\n    pou();\n    Build(1,1,n);\n    solve();\n    return 0;\n}\n\n```",
        "postTime": 1505711945,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8868\u793a\u5bf9\u500d\u589e\u7684\u539f\u7406\u4e00\u76f4\u7406\u89e3\u4e0d\u80fd\u3002\u3002\u3002\u3002\n\n\u4e8e\u662f\u5f00\u5fc3\u7684\u5199\u4e86\u4e00\u4e0b\u94fe\u5256\n\n\u9996\u5148\u5c31\u662f\u5efa\u51fa\u6700\u5927\u751f\u6210\u6811\n\n\u628a\u8fb9\u6743\u5316\u4e00\u4e0b\u70b9\u6743\n\n\u7136\u540e\u8003\u8651\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e86\u3002\u3002\n\n\u7531\u4e8e\u672c\u4eba\u5f31\u9e21\uff0c\u53ea\u4f1a\u7528\u7ebf\u6bb5\u6811\uff08\u8c8c\u4f3cst\u8868\u7684\u7a7a\u95f4\u4f1a\u5927\u5f88\u591a\uff1f\uff09\n\n\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u4e3a\u4e86\u6c42\u533a\u95f4\u6700\u5c0f\u503c\n\n\u8bb0\u5f97\u67e5\u8be2\u65f6\u5148\u5224\u65ad\u662f\u5426\u4e24\u70b9\u662f\u5426\u5728\u540c\u4e00\u8054\u901a\u5757\u5185\uff08\u5e76\u67e5\u96c6\uff09\n\n\uff08\u6307\u9488\u5927\u6cd5\u597d\uff01\uff01\uff01\uff09\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nconst int BUF = 123123123;\nchar Buf[BUF], *buf = Buf;\n\ninline void read (int &now)\n{\n    for (now = 0; !isdigit (*buf); ++ buf);\n    for (; isdigit (*buf); now = now * 10 + *buf - '0', ++ buf);\n}\n\n#define INF 1e9\n#define Max 30100\n\nstruct E\n{\n    E *n;\n    int to, key;\n};\nE *list[Max], poor[Max], *Tail = poor;\n\nstruct Edge\n{\n    int from, to, key;\n    bool operator < (const Edge &now) const\n    {\n        return this->key > now.key;\n    }\n};\nEdge data[Max * 5];\n\nstruct Unio_Find\n{\n    protected : int data[Max];\n    public :\n        \n        void Prepare (const int &N)    \n        {\n            for (register int i = 1; i <= N; ++ i) \n                data[i] = i;\n        }\n\n        int Find (int x) \n        {    \n            return data[x] == x ? x : data[x] = Find (data[x]);\n        }\n\n        inline void Unio (int x, int y)    { data[x] = y; }\n};\nUnio_Find Ufs;\ninline int min (int a, int b)\n{\n    return a < b ? a : b;\n}\nint N, M;\nstruct S_D\n{\n    S_D *Left, *Right;\n    int key, Mid;\n    inline void Up ()\n    {\n        this->key = min (this->Left->key, this->Right->key);\n    }\n};\nint tree_key[Max], in[Max];\n\ninline void swap (int &a, int &b)\n{\n    int now = a; a = b, b = now;\n}\n\nclass Segment_Tree\n{\n    private : S_D _poor[Max], *Tail, *Root;\n    \n        inline S_D *New (int x, int y)\n        {\n            ++ this->Tail, this->Tail->Mid = x + y >> 1, this->Tail->key = 0;\n            this->Tail->Left = this->Tail->Right = NULL; return this->Tail;\n        }    \n\n        void Build (S_D *&now, int l, int r)\n        {\n            now = New (l, r);\n            if (l == r)\n            {\n                now->key = tree_key[l];\n                return ;\n            }\n            Build (now->Left, l, now->Mid);\n            Build (now->Right, now->Mid + 1, r);\n            now->Up ();\n        }\n\n        int Query (S_D *&now, int L, int R, int l, int r)\n        {\n            if (l <= L && R <= r)\n                return now->key;\n            int res = INF;\n            if (l <= now->Mid) res = Query (now->Left, L, now->Mid, l, r);\n            if (r > now->Mid) \n                res = min (res, Query (now->Right, now->Mid + 1, R, l, r));\n            return res;\n        }\n            \n    public :\n        \n        Segment_Tree () { this->Tail = _poor;}\n\n        void Build (int l, int r) { return Build (Root, l, r); }\n        int Query (int l, int r) { return Query (Root, 1, N, l, r); }\n};\nSegment_Tree Seg;\n\nclass Tree_Chain_Get_Type\n{\n    private : \n\n        int deep[Max], size[Max], father[Max], chain[Max], son[Max];\n        int C;\n    \n        void Dfs_1 (int now, int Father)\n        {\n            size[now] = 1, father[now] = Father, deep[now] = deep[Father] + 1;\n            for (E *e = list[now]; e; e = e->n)\n                if (e->to != Father)\n                {\n                    Dfs_1 (e->to, now); size[now] += size[e->to];\n                    if (size[son[now]] < size[e->to]) son[now] = e->to;\n                }\n        }\n\n        void Dfs_2 (int now, int point)\n        {\n            chain[now] = point; in[now] = ++ C; E *e;\n            for (e = list[now]; e; e = e->n)\n                if (e->to == father[now])\n                    tree_key[C] = e->key;\n            if (son[now]) Dfs_2 (son[now], point);\n            else return ;    \n            for (e = list[now]; e; e = e->n)\n                if (e->to != son[now] && e->to != father[now])\n                    Dfs_2 (e->to, e->to);\n        }\n    \n    public :\n        \n        void Prepare ()\n        {\n            C = 0, Dfs_1 (1, 0), Dfs_2 (1, 1); Seg.Build (1, N);\n            \n        }\n\n        int Query (int x, int y)\n        {\n            if (Ufs.Find (x) != Ufs.Find (y)) return -1;\n            int res = INF;    \n            for (; chain[x] != chain[y]; )\n            {\n                if (deep[chain[x]] < deep[chain[y]]) swap (x, y);\n                res = min (Seg.Query (in[chain[x]], in[x]), res);    \n                x = father[chain[x]];\n            }\n            if (deep[x] > deep[y]) swap (x, y);\n            if (x != y) res = min (res, Seg.Query (in[x] + 1, in[y]));\n            return res;\n        }\n};\nTree_Chain_Get_Type T;\n\nint Main ()\n{\n\n    fread (buf, 1, BUF, stdin);\n\n    read (N), read (M);\n    int x, y, z;    \n    register int i;\n    for (i = 1; i <= M; ++ i)\n    {\n        read (x), read (y), read (z);\n        data[i].from = x, data[i].to = y, data[i].key = z;\n    }\n    std :: sort (data + 1, data + 1 + M);\n    int Count = 0; Ufs.Prepare (N);\n    for (i = 1; i <= M; ++ i)\n    {\n        x = Ufs.Find (data[i].from), y = Ufs.Find (data[i].to);\n        if (x != y)\n        {\n            ++ Tail, Tail->to = data[i].to, Tail->key = data[i].key;\n            Tail->n = list[data[i].from], list[data[i].from] = Tail;\n            ++ Tail, Tail->to = data[i].from, Tail->key = data[i].key;\n            Tail->n = list[data[i].to], list[data[i].to] = Tail;\n            ++ Count; Ufs.Unio (x, y);\n        }\n        if (Count == N - 1) break;\n    }\n    T.Prepare ();\n    int Q; read (Q);\n    for (i = 1; i <= Q; ++ i)\n        read (x), read (y), printf (\"%d\\n\", T.Query (x, y));            \n    return 0;\n}\nint ZlycerQan = Main ();\nint main (int argc, char *argv[]) {;}\n```",
        "postTime": 1503300383,
        "uid": 21123,
        "name": "ZlycerQan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u4e3b\u8981\u7528\u5230\u5e76\u67e5\u96c6\u3001\u500d\u589eLCA\uff0c\u8be6\u89e3\u5305\u542b\u5728\u6ce8\u91ca\u91cc\u3002\n\n\u5982\u679c\u4e0d\u5bf9\u6570\u636e\u505a\u4efb\u4f55\u7279\u6b8a\u5904\u7406\uff0c\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002\n\n\u6b64\u9898\u4e3a\u6700\u4f18\u89e3\u95ee\u9898\uff0c\u6700\u5927\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u53ef\u80fd\u662f\u7b54\u6848\u3002\n\n\u5bf9\u6ca1\u6709\u53c2\u52a0\u8fc7NOIP\u7684\u540c\u5b66\u4eec\uff1a\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528bits/stdc++.h\uff0c\u5de9\u56fa\u57fa\u7840\uff0c\u80cc\u597d\u5934\u6587\u4ef6\uff0cNOIP\u4e2d\u6709\u65f6\u662f\u4e0d\u53ef\u4ee5\u7528\u7684\uff0c\u4f1a\u5bf9\u6210\u7ee9\u9020\u6210\u5f71\u54cd\u3002\n\n```cpp\n#include<stack>\n#include<cstdio>\n#include<iomanip>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<fstream>\n#include<queue>\n#include<algorithm>//\u7528sort\n#define inf 0x7fffffff//16\u8fdb\u5236\u5b9a\u4e49\u6700\u5927int\nusing namespace std;\nint n,m,q,cnt,tot,deep[10001],head[10001],f[10001],fa[10001][17],d[10001][17];\n//\u6839\u636e\u6570\u636e\u8303\u56f4\u548c\u6837\u4f8b\u8f93\u5165\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\nbool vis[10001];\nstruct edge {\n    int x,y,v;\n} a[50001];\nstruct e {\n    int next,to,v;\n} e[20001]; //\u5b9a\u4e49\u90bb\u63a5\u8868\nvoid ins(int u,int v,int w) {\n    e[++cnt].to=v;    //\u90bb\u63a5\u8868\u4e2d\u52a0\u6761\u8fb9\n    e[cnt].next=head[u];\n    head[u]=cnt;\n    e[cnt].v=w;\n}\nvoid insert(int u,int v,int w) {\n    ins(u,v,w);    //\u53cc\u5411\n    ins(v,u,w);\n}\nint find(int x) {\n    return f[x]==x?x:f[x]=find(f[x]);   //search\u5e76\u67e5\u96c6\u7684\u67e5,\u8981\u662f\u770b\u4e0d\u61c2\uff0c\u5c31\u770b\u4e0b\u9762\u6ca1\u7528\u4e09\u5143\u8868\u8fbe\u5f0f\uff0c\u6ce8\u91ca\u6389\u90a3\u4e00\u6bb5\u3002\n}\n```\n/\n```cpp\nif(f[x]==x)\n    return x;\nelse\n    f[x]=find(f[x]);\nreturn f[x];\n```\n/\n\n```cpp\nbool cmp(edge a,edge b) {\n    return a.v>b.v;  //\u8fd4\u56demax\n}\nvoid dfs(int x) { //DFS\u6807\u8bb0\n    vis[x]=1;//\u6807\u8bb0\u5f53\u524d\u7ed3\u70b9\u5df2\u7ecf\u8d70\u8fc7\n    for(int i=1; i<=16; i++) {\n        if(deep[x]<(1<<i))break;//\u4f4d\u8fd0\u7b97\uff0c\u6811\u7684\u6700\u6df1\u5904\n        fa[x][i]=fa[fa[x][i-1]][i-1];//2j-1\u6b21\u65b9x2\u4e0d\u5c31\u662f2j\u561b 2j-1+2j-1\u5c31\u662f2j\uff0c\u56fe\u91cc\u627e\u627e\n        d[x][i]=min(d[x][i-1],d[fa[x][i-1]][i-1]);//the smallest \u6743\n    }\n    for(int i=head[x]; i; i=e[i].next) { //\u904d\u5386\u90bb\u63a5\u8868\n        if(vis[e[i].to])continue;//\u8fb9\u7684\u9876\u70b9\u8d70\u8fc7 \u90a3\u5c31\u4e0b\u4e00\u4e2a\n        fa[e[i].to][0]=x;//fa[i][0]\u662fi\u8282\u70b9\u7684\u7236\u4eb2\n        d[e[i].to][0]=e[i].v;//\u7236\u4eb2\u5230\u9876\u70b9\u7684\u6743\u5c31\u662f\u9700\u8981\u5f97\u5230\u7684\u6743\n        deep[e[i].to]=deep[x]+1;//deepth(son)=deepth(father)+1\n        dfs(e[i].to);//There is \u9012\u5f52\n    }\n}\nint lca(int x,int y) { //\u6807\u51c6LCA\n    if(deep[x]<deep[y])swap(x,y);//\u4fdd\u8bc1x\u7684deepth\u5927\u4e8ey\u7684\n    int t=deep[x]-deep[y];//\u4e24\u8282\u70b9\u6df1\u5ea6\u5dee \u8fd9\u91cc\u662f\u6b63\u7684\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u8f6c\u7b26\u53f7 \u62ff\u5230\u8fd9\u4e2a \u8fdb\u884c\u4e0b\u4e00\u6b65\u8d70\n    for(int i=0; i<=16; i++)\n        if((1<<i)&t)x=fa[x][i];//\u4f4d\u8fd0\u7b97\u8ba9x\u70b9\u5411\u4e0a\u8df3\uff0c\u76f4\u5230x\u4e0ey\u7684\u6df1\u5ea6\u76f8\u540c\uff08\u4ece0\u5f00\u59cb\u662f\u907f\u514d\u5fd8\u8bb0\u5904\u7406x\u4e0ey\u7684deepth\u4e00\u6837\u7684\u60c5\u51b5\uff09\n    for(int i=16; i>=0; i--) { //\u4eceint\u4f4d\u7684\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u5012\u63a8\uff0c\u89e3\u91ca\u4e00\u4e0b16\uff0cint \u6700\u592716\u4f4d\uff0c\u627e\u5230\u6df1\u5ea6\u6700\u5927\u7684\u516c\u5171\u7956\u5148\u5373\u4e3a\u6700\u8fd1\u516c\u5171\u7956\u5148\n        if(fa[x][i]!=fa[y][i]) {\n            x=fa[x][i];    //\u7956\u5b97\u4e0d\u540c\uff1f\uff1f\u627e\u7956\u5b97\u7684\u7956\u5b97\uff01\n            y=fa[y][i];\n        }\n    }\n    if(x==y)return x;//\u91cd\u70b9\u6765\u4e86\uff01\u8fd9\u91cc\u6709\u4e2a\u8fb9\u754csituation:\u5982\u679c\u63a8\u5230\u540c\u4e00deepth\u65f6x==y,\u90a3x,y\u91cd\u5408\uff0c\u4ed6\u5c31\u662f\u4ed6\u81ea\u5df1father\n    return fa[x][0];//\u63a8\u5230\u8fb9\u754c\u4e86\uff0c\u8bf4\u660ex\u7684\u7236\u4eb2\u751f\u4e86x\u548cy\uff0c\u8fd4\u56dex\u7684fa\uff0c\u5c31\u662f\u6700\u5c0f\u7684fa\n}\nint ask(int x,int f) { //\u95ee\u4e00\u4e0bx\u5230LCA\u7956\u5148\u7684\u6700\u5c0f\u8def\u5f84\n    int mn=inf;//\u8fd8\u8bb0\u5f97inf\u662f\u4ec0\u4e48\u5417\uff1f\uff1f\n    int t=deep[x]-deep[f];//\u6df1\u5ea6\u51cf\u4e00\u4e0b \u786e\u5b9a\u4e00\u4e0b\u8303\u56f4 \u4e0d\u8981\u8d70\u8fc7 \n    for(int i=0; i<=16; i++) {\n        if(t&(1<<i)) { //\u8fd8\u662f\u4f4d\u8fd0\u7b97\uff01\n            mn=min(mn,d[x][i]);//\u8fd9\u4e00\u6761\u8def\u7ebf \u4e5f\u5c31\u662f\u8bf4\u4e0a\u90a3\u4e48\u591a\u5c42 \u9700\u8981\u8d70\u90a3\u4e9b\u8fb9 \u5c31\u662f\u8981\u6700\u5c0f\u6743\u503c\n            x=fa[x][i];//\u4e0a\u4e00\u5c42\n        }\n    }\n    return mn;//return\u6700\u5c0f\u6743\u503c\n}\nint main() {\n//freopen(\"truck.in\",\"r\",stdin);\n//freopen(\"truck.out,\",\"w\",stdout);\n    memset(d,127/3,sizeof(d));//\u8bb0\u5f55\u6743\u503c\u7684\u7ed3\u6784\u521d\u59cb\u5316 \u9632\u6b62\u5e72\u6270\uff08\u4e0d\u521d\u59cb\u5316\u7684\u540e\u679c\u77e5\u9053\u7684...\uff09\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; i++)f[i]=i; //\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\n    for(int i=1; i<=m; i++)\n        scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].v);//scanf\u8fb9\n    sort(a+1,a+1+m,cmp);//\u7528\u6bd4\u8f83\u5668\u6392\u5e8f\uff0c\u6700\u540e\u4e00\u4e2a\u5173\u952e\u5b57\u662f\u964d\u5e8f\n    for(int i=1; i<=m; i++) {\n        int x=a[i].x,y=a[i].y;\n        int p=find(x),q=find(y);\n        if(p!=q) {\n            f[p]=q;\n            insert(x,y,a[i].v);\n            tot++;//\u8bb0\u5f55\u8fb9\u7684\u6570\u76ee\uff0c\u7528\u6765\u7b97\u6743\u503c\n            if(tot==n-1)break;//\u6700\u8fd1\u7684\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u662f1\u6761\u8fb9\uff0c\u5982\u679c\u5df2\u7ecf\u7528\u4e86n-1\u6761\uff0c\u90a3\u662f\u4e0d\u662f\u8bf4\u660e\u5df2\u7ecf\u5230\u7236\u4eb2\u4e0b\u9762\u90a3\u4e00\u5c42\u4e86\uff1f\uff1f\u6240\u4ee5\u5c31\u53ef\u4ee5\u505c\u4e86\n```\n}//\u6700\u5927\u751f\u6210\u6811\n```cpp\n    }\n    for(int i=1; i<=n; i++)if(!vis[i]) {\n            dfs(i);   //\u6807\u8bb0\u6bcf\u4e2a\u9876\u70b9\u7684\u6df1\u5ea6\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9->root\n        }\n    scanf(\"%d\",&q);//\u8bfb\u5165\u5faa\u73af\u6b21\u6570 \u9898\u76ee\u8bf4\u7684\u662f\u8be2\u95ee\u6b21\n    for(int i=1; i<=q; i++) {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(find(x)!=find(y)) {\n            printf(\"-1\\n\");//\u7279\u5224:\u4e0d\u5728\u4e00\u5757 \u4e3a\u4ec0\u4e48\u8981\u7ee7\u7eed\uff1f\n            continue;\n        } else {\n            int t=lca(x,y);//LCA\u4e24\u4e2a\u70b9\u6700\u8fd1\u516c\u5171\u7956\u5148\n            printf(\"%d\\n\",min(ask(x,t),ask(y,t)));//x\u5230\u7956\u5148 y\u5230\u7956\u5148 \u53d6\u8f83\u5c0f\u503c \u5c31\u662fanswer\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1503123774,
        "uid": 39922,
        "name": "vinvor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "//\u5148\u6c42\u51fa\u6700\u5927\u751f\u6210\u6811\uff0c\u8be2\u95ee\u65f6\u5728\u6811\u4e0a\u500d\u589e\u627e\u4e24\u70b9\u4e4b\u95f4\u6743\u503c\u6700\u5c0f\u503c\u3002\n\n```cpp\n//\u8fd9\u4e2a\u89e3\u6cd5\u5f88\u5bb9\u6613\u7406\u89e3\u3002\n//\u5148\u60f3\u60f3\uff0c\u5728\u6c42\u51fa\u6700\u5927\u751f\u6210\u6811\u4e4b\u524d\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u5927\u8d27\u7269\u8fd0\u8f93\u91cf\uff0c\u90fd\u5e94\u627e\u5230\u5b83\u4eec\u4e4b\u95f4\u6240\u6709\u8def\u5f84\uff0c \n//\u5e76\u4e14\u5728\u6bcf\u4e00\u6761\u8def\u5f84\u4e0a\u627e\u5230\u8def\u4e0a\u6743\u503c\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u6700\u5c0f\u503c\u5c31\u662f\u8fd9\u6761\u8def\u7684\u6700\u5927\u8d27\u7269\u8fd0\u8f93\u91cf\u3002\n//\u5728\u521d\u59cb\u56fe\u4e0a\u76f4\u63a5\u8ba1\u7b97\uff0c\u53ef\u4ee5\u8fd9\u6837\u6c42\u51fa\u6240\u6709\u8def\u5f84\uff0c\u4f46\u662f\u53ef\u4ee5\u60f3\u5230\u5fc5\u5b9a\u8d85\u65f6\u3002\n//\u53cd\u6b63\u4ee5\u6211\u6349\u6025\u7684\u6c34\u5e73\u662f\u6253\u4e0d\u51fa\u6765\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u8ba1\u7b97\u800cAC\u7684\u4ee3\u7801\u7684\uff0c\u7b97\u6cd5\u6211\u4e5f\u60f3\u4e0d\u5230\u3002 \n//\u4f46\u662f\uff0c\u53ea\u8981\u5728\u4e4b\u524d\u8fd9\u4e2a\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u7a0d\u5fae\u60f3\u4e00\u60f3\uff0c\u5c31\u4f1a\u53d1\u73b0\u6709\u5f88\u591a\u8fb9\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u4f18\u89e3\u7684\u8def\u5f84\u5f53\u4e2d\u7684\uff0c\n//\u771f\u8981\u4f60\u6765\u627e\u8def\uff0c\u4f60\u80af\u5b9a\u6253\u6b7b\u4e5f\u4e0d\u9009\u90a3\u4e9b\u8fb9\u3002\n//\u518d\u6df1\u5165\u4e00\u70b9\uff0c\u5c31\u7b97\u4e0d\u4f1a\u8bc1\u660e\uff0c\u4ece\u76f4\u89c9\u7684\u89d2\u5ea6\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\u53ea\u6709\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u624d\u53ef\u80fd\u5728\u6700\u4f18\u89e3\u7684\u8def\u4e0a\u3002\n//\u800c\u6709\u4e86\u6700\u5927\u751f\u6210\u6811\u4ee5\u540e\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u5c31\u53ea\u6709\u4e00\u6761\u8def\u4e86\u3002 \n//\u500d\u589e\u65f6\u6c42\u51fa\u4e86\u4e24\u70b9\u5404\u81ea\u5230LCA\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u53ea\u8981\u53d6\u4e24\u4e2a\u6700\u5c0f\u503c\u4e2d\u66f4\u5c0f\u7684\u90a3\u4e00\u4e2a\u5373\u53ef\u3002 \n//\u6240\u4ee5\uff0c\u5c31\u6709\u4e86\u8fd9\u4e2a\u89e3\u6cd5\u3002\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<vector>\n#include<cstdio>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\n//\u5934\u6587\u4ef6\u548c\u540d\u79f0\u7a7a\u95f4;//\nconst int N=100086,M=0x7fffffff,L=20;\nstruct node{\n    int x,y,v;//\u59cb\u70b9\uff0c\u7ec8\u70b9\uff0c\u8fb9\u6743\u3002 \n    bool operator < (const node oth) const {return v>oth.v;}//\u91cd\u8f7d\u5c0f\u4e8e\u53f7\u65b9\u4fbf\u5e93\u51fd\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \n};\n//\u5e38\u91cf\u4e0e\u7ed3\u6784\u4f53;//\nint n,m,qn;//\u9898\u9762\u4e2d\u7684\u57ce\u5e02\u6570\uff0c\u9053\u8def\u6570\u548c\u8be2\u95ee\u4e2a\u6570\u3002 \nnode e[N];//\u8f93\u5165\u6570\u636e\u63d0\u4f9b\u7684\u521d\u59cb\u56fe\u3002 \n//\u76f4\u63a5\u8f93\u5165\u53d8\u91cf;//\nint fth[N],depth[N],ast[N][L+12],mnv[N][L+12];//\u5e76\u67e5\u96c6\u9700\u8981\u7684\u7956\u5148\u6570\u7ec4\uff0c\u6811\u4e0a\u70b9\u6df1\u5ea6\u6570\u7ec4\uff0c\u6811\u4e0a\u500d\u589e\u7684\u7956\u5148\u6570\u7ec4\uff0c\u6811\u4e0a\u4e00\u70b9\u5230\u5176\u67d0\u4e00\u7956\u5148\u4e4b\u95f4\u6240\u6709\u8fb9\u6743\u4e2d\u6700\u5c0f\u503c\u6570\u7ec4\u3002 \nvector<int> gr[N],dis[N];//\u6811\u3002 \n//\u5176\u4ed6\u9700\u8981\u7684\u53d8\u91cf;//\nint fnd(int x){return x==fth[x]?x:fth[x]=fnd(fth[x]);}//\u5e76\u67e5\u96c6\u67e5\u627e\u3002 \nvoid uni(int x,int y){\n    x=fnd(x);y=fnd(y);\n    if(x!=y)fth[y]=x;\n```\n}//\u5e76\u67e5\u96c6\u5408\u5e76\u64cd\u4f5c\u3002\n```cpp\nvoid kruskal(){\n    sort(e+1,e+1+m);\n    for(int i=0;i<N;i++)fth[i]=i;\n    for(int i=1;i<=m;i++)\n        if(fnd(e[i].x)!=fnd(e[i].y)){\n            uni(e[i].x,e[i].y);\n            gr[e[i].x].push_back(e[i].y);dis[e[i].x].push_back(e[i].v);\n            gr[e[i].y].push_back(e[i].x);dis[e[i].y].push_back(e[i].v);\n        }\n```\n}//\u7528Kruskal\u6784\u9020\u539f\u56fe\u7684\u6700\u5927\u751f\u6210\u6811\uff0c\u4ee5\u4fbfDFS\u548cLCA\u7684\u8fdb\u884c\u3002\u8fd9\u91cc\u6211\u7684\u6811\u548c\u56fe\u7684\u50a8\u5b58\u65b9\u5f0f\u660e\u663e\u4e0d\u540c:\n//\u56fe\u662fnode e[N]\u50a8\u5b58\u7684\uff0ce\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u53d8\u91cf\u5b58\u7740\u4e00\u6761\u8fb9\u7684\u59cb\u70b9\u3001\u7ec8\u70b9\u548c\u8fb9\u6743\u4fe1\u606f\uff0c\u56e0\u4e3akruskal\u7684\u5408\u5e76\u4e0e\u67e5\u627e\u4e0e\u8fb9\u7684\u6709\u5411\u4e0e\u65e0\u5411\u65e0\u5173\uff0c\n\n//\u6240\u4ee5\u6211\u5c06\u9898\u76ee\u6570\u636e\u76f4\u63a5\u8f93\u5165e\u6570\u7ec4\u4e2d\uff0c\u4e0d\u9700\u8981\u8003\u8651\u5230\u9898\u76ee\u4e2d\u4e3a\u65e0\u5411\u56fe\u3002\u4f46\u662f\uff0c\u6811\u5374\u7528\u4e86\u65e0\u5411\u56fe\u5b58\u6cd5\uff0c\u8fd9\u662f\u5fc5\u9700\u7684\u3002\n\n//\u6811\u662f\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u662f\u6211\u4ece\u4e00\u4e2aCSDN\u535a\u4e3b\uff08\u5df2\u4e0d\u8bb0\u5f97\u662f\u8c01\uff09\u90a3\u5b66\u6765\u7684\uff0c\u7eaf\u5c5e\u5077\u61d2\u4e0d\u60f3\u518d\u7528\u7ed3\u6784\u4f53\u5b58\u6811\u3002\n\n//\u4ee5\u524d\u6211\u50a8\u5b58\u8fd9\u6837\u7684\u6811\u6216\u8005\u56fe\u662f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u4e3a\u7ec8\u70b9\uff0c\u4e00\u4e2a\u4e3a\u8fb9\u6743\u3002\n\n//\u800c\u8fd9\u91cc\u76f4\u63a5\u5206\u6210\u4e24\u4e2a\u6570\u7ec4\uff0c\u672c\u8d28\u4e0a\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u6ce8\u610fgr\u548cdis\u7684\u66f4\u65b0\u4e00\u5b9a\u8981\u540c\u6b65\u8fdb\u884c\u3002\n\n//\u663e\u7136\uff0cgr[i][j]\u4ee3\u8868\u4e0e\u70b9i\u8fde\u63a5\u7684\u7b2cj\u4e2a\u70b9\uff0cdis[i][j]\u4e3a\u70b9i\u4e0e\u70b9i\u8fde\u63a5\u7684\u7b2cj\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u3002\n\n```cpp\n//\u6700\u5927\u751f\u6210\u6811;//\nvoid dfs(int x,int f){\n    depth[x]=depth[f]+1;ast[x][0]=f;\n    for(int i=0;i<gr[x].size();i++)\n        if(gr[x][i]!=f){\n            dfs(gr[x][i],x);\n            mnv[gr[x][i]][0]=dis[x][i];\n        }\n```\n}//\u7528DFS\u8fdb\u884cLCA\u9884\u5904\u7406\uff0c\u5e94\u8be5\u53ef\u4ee5\u7528BFS\u5b9e\u73b0\uff0c\u4f46\u6211\u6ca1\u8bd5\u8fc7\uff0c\u6c42LCA\u7684\u65f6\u5019DFS\u7684\u901f\u5ea6\u5bf9\u6211\u6765\u8bf4\u8db3\u77e3\u3002\n```cpp\nint lca(int x,int y){\n    if(depth[x]<depth[y])swap(x,y);\n    int res=M;\n    for(int i=0;i<=L;i++)\n        if((depth[x]-depth[y])>>i&1)\n            res=min(res,mnv[x][i]),x=ast[x][i];\n    if(x==y)return res?res:-1;\n    for(int i=20;i>=0;i--)\n        if(ast[x][i]!=ast[y][i])\n            res=min(res,min(mnv[x][i],mnv[y][i])),x=ast[x][i],y=ast[y][i];\n    res=min(res,min(mnv[x][0],mnv[y][0]));\n    return res?res:-1;\n```\n}//\u6b64\u51fd\u6570\u8fd4\u56de\u7684\u5e76\u975eLCA\uff0c\u4e5f\u975e\u9898\u9762\u4e2d\u53ef\u4ee5\u8fd0\u7684\u6700\u91cd\u8d27\u7269\uff0c\u800c\u662f\u9898\u76ee\u9700\u8981\u7684\u7b54\u6848\u3002\n//\u56e0\u4e3a\u8fd4\u56de\u503c\u65f6\u7528\u4e86\u4e09\u76ee\u8fd0\u7b97\u7b26\u76f4\u63a5\u5224\u5b9a\u4e86\u662f\u5426\u65e0\u89e3\u3002\n\n//\u82e5\u8fd4\u56deLCA\u5219\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u521d\u4e3areturn x;\u6216return y;\u800c\u6700\u540e\u8fd4\u56de\u503c\u521d\u4e3areturn ast[x][0];\u6216return ast[y][0];\n\n//\u82e5\u8fd4\u56deres\u7684\u60c5\u51b5\u5219\u662f\uff0c\u82e5\u8be2\u95ee\u6709\u89e3\uff0c\u5219\u6b64res\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u65e0\u89e3\uff0c\u5219res\u4e3a0\uff0c\u7b54\u6848\u5e94\u4e3a-1\u3002\u6b64\u65f6\u5e94\u5728\u8f93\u51fa\u65f6\u5224\u65ad\u6b64\u51fd\u6570\u8fd4\u56de\u503c\u662f\u5426\u4e3a0\u3002\n\n```cpp\n//LCA;// \nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].v);\n    //\u8f93\u5165;// \n    kruskal();\n    //\u6700\u5927\u751f\u6210\u6811;// \n    dfs(1,0);\n    for(int j=1;j<=L;j++)\n        for(int i=1;i<=n;i++)\n            ast[i][j]=ast[ast[i][j-1]][j-1],mnv[i][j]=min(mnv[ast[i][j-1]][j-1],mnv[i][j-1]);\n    //LCA\u9884\u5904\u7406\u90e8\u5206;//\n    cin>>qn;\n    while(qn--){\n        int x,y;scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",lca(x,y));\n    }\n    //\u8f93\u5165\u8be2\u95ee\uff0c\u8c03\u7528LCA\u51fd\u6570\u8ba1\u7b97\u7b54\u6848;//\n    return 0;\n}\n```",
        "postTime": 1502801518,
        "uid": 10832,
        "name": "Darkins",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u548c\u8fd9\u9053\u9898\u71ac\u6218\u603b\u8ba17.5\u5c0f\u65f6\u540e\u7ec8\u4e8e\u8c03\u8bd5\u51fa\u6765\u4e86\uff01\uff01\n\n\n\u601d\u8def\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8dd1\u4e00\u8fb9\u6700\u5927\u6811\u7136\u540e\u500d\u589e\u6c42LCA\u4e0d\u65ad\u53d6\u6700\u5c0f\u503c\u5c31\u597d\n\n\n\u6211\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u8fd9\u9053\u9898\u5bb9\u6613\u72af\u7684\u9519\u8bef\n\n\n1.\u5728\u8bfb\u5165\u7b2c\u4e00\u4e2a\u56fe\u7684\u65f6\u5019\u5fc5\u987b\u7528\u6709\u5411\u8fb9\u50a8\u5b58\uff0c\u4f46\u662f\u8dd1\u6700\u5927\u751f\u6210\u6811\u4ea7\u751f\u7684\u56fe\u5fc5\u987b\u7528\u65e0\u5411\u56fe\u50a8\u5b58\n\n\n2.\u5728\u9009\u62e9\u6e90\u70b9\u7684\u65f6\u5019\u53ef\u4ee5\u4ece1->n\u8fdb\u884cdfs\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u5f00\u4e00\u4e2avis\u6570\u7ec4\uff0c\u5355\u7eaf\u4e00\u4e2adeep\u6570\u7ec4\u662f\u4e0d\u53ef\u4ee5\u7684\n\n\n3.\u5728\u4ece\u4f4e\u5904\u70b9\u5f80\u9ad8\u5904\u70b9\u8df3\u7684\u65f6\u5019\u5224\u65ad\u6761\u4ef6\u4e00\u5b9a\u662fdeep[s[x][i]]>=deep[y]\uff0c\u5fc5\u987b\u662f>=!!!\n\n\n4.\u5728\u53d6\u6700\u5c0f\u503c\u5f97\u65f6\u5019\u4e00\u5b9a\u662f\u5728\u66f4\u65b0\u53d8\u91cf\u4e4b\u524d\u53d6\uff01\uff01\n\n\n5.\u6ce8\u610f\u5404\u79cd\u53d8\u91cf\u7684\u521d\u59cb\u5316\uff01\n\n\n\u56e0\u4e3a\u8c03\u8bd5\u65f6\u95f4\u6bd4\u8f83\u957f\uff0c\u6240\u4ee5\u4ee3\u7801\u53ef\u4ee5\u6bd4\u8f83\u957f\uff0c\u4f46\u6ca1\u4ec0\u4e48\u9ad8\u5927\u4e0a\u7684\u8bed\u53e5\uff0c\u5199\u7684\u8fd8\u7b97\u7b80\u5355\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=50001;\nint n,m;\nint x,y,z;\nint vis[MAXN];\nstruct node\n{\n    int u,v,w,next;\n}edge[MAXN],a[MAXN];\nint num=1;\nint head[MAXN];\nint f[MAXN];\nint anum=1;\nint ahead[MAXN];\nint deep[MAXN];\nint s[MAXN][20];\nint take[MAXN][20];\nvoid edge_add(int x,int y,int z)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].w=z;\n    edge[num].next=head[x];\n    head[x]=num++;\n}\nvoid a_add(int i)\n{\n    a[anum].u=edge[i].u;\n    a[anum].v=edge[i].v;\n    a[anum].w=edge[i].w;\n    a[anum].next=ahead[a[anum].u];\n    ahead[a[anum].u]=anum++;\n    a[anum].u=edge[i].v;\n    a[anum].v=edge[i].u;\n    a[anum].w=edge[i].w;\n    a[anum].next=ahead[a[anum].u];\n    ahead[a[anum].u]=anum++;\n}\nint comp(const node & a ,const node & b)\n{return a.w>b.w;}\nint find(int x)\n{\n    if(f[x]!=x)\n    f[x]=find(f[x]);\n    return f[x];\n}\nvoid unionn(int x,int y)\n{\n    int fx=find(x);\n    int fy=find(y);\n    f[fx]=fy;\n}\nvoid Biggest_Kruskal()\n{\n    sort(edge+1,edge+num+1,comp);\n    int k=0;\n    for(int i=1;i<=num;i++)\n    {\n        int uu=edge[i].u;\n        int vv=edge[i].v;\n        if(find(uu)!=find(vv))\n        { \n            a_add(i);\n            unionn(uu,vv);\n            k++;\n        }\n        if(k==n-1)break;\n    }\n    //for(int i=1;i<=anum;i++)\n    //    cout<<a[i].u<<\" \"<<a[i].v<<\" \"<<a[i].w<<\" \"<<a[i].next<<endl;\n}\nvoid Build_Tree(int p)\n{\n    vis[p]=1;\n    for(int i=ahead[p];i!=-1;i=a[i].next)\n    {\n         int will=a[i].v;\n        if(vis[will])continue;\n        vis[will]=1;\n            deep[will]=deep[p]+1;\n            s[will][0]=p;\n            take[will][0]=a[i].w;\n            Build_Tree(will);\n    }\n}\nvoid Initialize_Step()\n{\n    for(int i=1;i<=18;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            s[j][i]=s[s[j][i-1]][i-1];\n            take[j][i]=min(take[j][i-1],take[s[j][i-1]][i-1]);\n        }\n    }\n}\nint LCA(int x,int y)\n{\n    int ans=0x7ffffff;\n    if(deep[x]<deep[y])\n    swap(x,y);\n    for(int i=18;i>=0;i--)\n    {\n        if(s[x][i]!=0)\n        if(deep[s[x][i]]>=deep[y])\n        {\n            ans=min(ans,take[x][i]);\n            x=s[x][i];    \n        }\n    }\n    if(x==y)\n    return ans;\n    for(int i=18;i>=0;i--)\n    {\n        if(s[x][i]!=s[y][i])\n        {\n            ans=min(ans,take[x][i]);\n            ans=min(ans,take[y][i]);\n            x=s[x][i];\n            y=s[y][i];\n        }\n    }\n    ans=min(ans,take[x][0]);\n    ans=min(ans,take[y][0]);\n    return ans;\n}\nint main()\n{\n//    memset(take,0xf,sizeof(take));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {head[i]=-1;f[i]=i;ahead[i]=-1;}\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        edge_add(x,y,z);\n        //edge_add(y,x,z);\n    }\n    Biggest_Kruskal();\n    //deep[1]=1;\n    for(int i=1;i<=n;i++)\n    {\n        if(vis[i]==0)\n        Build_Tree(i);\n    }\n    Initialize_Step();\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=1;i<=q;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(find(x)!=find(y))\n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        printf(\"%d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1498037027,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u8ba9\u8def\u5f84\u4e0a\u6700\u5c0f\u8fb9\u6700\u5927\uff0c\n\n\u5c31\u662f\u8be2\u95ee\u6700\u5927\u751f\u6210\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u5982\u679c\u5efa\u51fa\u6700\u5927\u751f\u6210\u6811\uff0c\u4e4b\u540e\u8f6c\u5316\u4e3a\u6811\u4e0a\u8be2\u95ee\u4e24\u70b9\u95f4\u6700\u5c0f\u8fb9\u6743\uff0c\n\n\u4f3c\u4e4e\u5c31\u53ea\u80fd\u505a\u5230O(qlog)\u4e86\n\n(tarjan\u4f3c\u4e4e\u53ef\u4ee5\u5e38\u6570\u7565\u5927\u7684O(q)\uff0c\n\n\u5e76\u67e5\u96c6\u8bb0\u5f55\u5230father\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\n\n\u5728\u627e\u5230lca\u540e\u5728lca\u5904\u6253\u4e2a\u6807\u8bb0\uff0c\n\n\u518d\u5728lca\u5904\u5904\u7406\u8be2\u95ee)\u3002\n\n\u7136\u800c\u8fd8\u53ef\u4ee5\u66f4\u4f18\u3002\n\n\u8003\u8651\u5728kruskal\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757x,y\u65f6\uff0c\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76(\u5c31\u662f\u6309\u79e9\u5408\u5e76)\uff0c\n\n\u5e76\u5728\u5e76\u67e5\u96c6x\u7684\u4ee3\u8868\u548cy\u7684\u4ee3\u8868\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u679a\u4e3e\u7684\u8fb9\u7684\u6743\u503c\uff0c\n\n\u539f\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u8fd9\u6837\u5f62\u6210\u7684\u6811\u4e0a\u7684\u4e24\u70b9\u95f4\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u56e0\u4e3a\u5176\u5b9e\u95ee\u4f7fx,y\u8fde\u901a\u7684\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u800c\u5728\u8fd9\u68f5\u6811\u9898\u76ee\u7684\u8def\u5f84\u4e4b\u95f4\u662f\u4e00\u5b9a\u5b58\u5728\u90a3\u6761\u8fb9\u7684\u3002\n\n\u8fd9\u6837\uff0c\u7531\u4e8e\u542f\u53d1\u5f0f\u5408\u5e76\u4e0b\u6811\u9ad8O(log)\uff0c\u518d\u7528\u500d\u589e\u6216\u94fe\u5256\uff0c\u5c31\u662fO((n+q)loglog)\u7684\u4e86\u3002\n\n(\u53ef\u80fd\u7531\u4e8e\u6570\u636e\u592a\u5c0f\uff0c\u8fd9\u6837\u4f3c\u4e4e\u6ca1\u6709\u66f4\u5feb)\n\n```cpp\n#include<bits/stdc++.h>\nusing std::min;\nusing std::swap;\n\nvoid chmin(int &x,int y) { if(x>y)x=y; }\n\nconst int U=100010,N=10010,M=50010;\nint n,m,i,len;\nint t[U],x[M],y[M],next[M];\nint f[N],sz[N];\n\nint find(int x)\n{\n    if(!f[x]) return x;\n    return f[x]=find(f[x]);\n}\n\nint Log2[20];\nnamespace tree\n{\n   int f[N],l[N],t[N],next[N];    \n   int mn[N],son[N];\n    int sz[N],deep[N],top[N];\n   struct st\n   {\n         int *f[10],base,n;\n         void init(int x)\n         {\n             int y,now=l[x];\n             top[x]=x;\n             mn[x]=now;\n           for(y=x;y=son[y];) {++n;top[y]=x;chmin(now,l[y]);mn[y]=now;}\n           base=deep[x]+1;\n           f[0]=new int[n];\n        for(y=x;y=son[y];) f[0][deep[y]-base]=l[y];\n             for(int j=1;1<<j<=n;++j)\n        {\n           f[j]=new int[n];\n         for(int i=0;i+(1<<j)<=n;++i)\n          f[j][i]=min(f[j-1][i],f[j-1][i+(1<<j-1)]);\n        }\n         }\n         int qiu(int l,int r)\n         {\n               l-=base;r-=base;\n               if(l>r) swap(l,r);\n               ++l;\n               int j=Log2[r-l+1];\n               return min(f[j][l],f[j][r-(1<<j)+1]);\n         }\n   }a[N];\n   void sc(int y,int x)\n   {\n         f[x]=y;l[x]=len;\n         next[x]=t[y];t[y]=x;\n   }\n   void dfs(int x,int dep=0)\n   {\n        sz[x]=1;deep[x]=++dep;\n        int y;\n        for(y=t[x];y;y=next[y])\n        {\n            dfs(y,dep);\n            sz[x]+=sz[y];\n            if(sz[y]>sz[son[x]]) son[x]=y;\n        }\n        for(y=t[x];y;y=next[y])\n        if(y!=son[x]) a[y].init(y);\n   }\n   void init()\n   {\n         for(i=1;i<=n;++i)\n         if(!f[i]) \n         {dfs(i);l[i]=U;a[i].init(i);}\n   }\n   #define fx top[x]\n   #define fy top[y]\n   int get(int x,int y)\n   {\n         int ans=U;\n         while(fx!=fy)\n         if(deep[fx]>deep[fy]) { chmin(ans,mn[x]);x=f[fx]; }\n         else { chmin(ans,mn[y]);y=f[fy]; }\n         if(x!=y)chmin(ans,a[fx].qiu(deep[x],deep[y]));\n      return ans;\n   }\n};\n\nvoid merge(int x,int y)\n{\n    if(x==y) return ;\n    if(sz[x]<sz[y]) swap(x,y);\n    sz[x]+=sz[y];f[y]=x;\n    tree::sc(x,y);\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",x+i,y+i,&len);\n        next[i]=t[len];t[len]=i;\n    }\n    for(i=1;i<=n;++i) sz[i]=1;\n    for(len=100000;len>=0;--len)\n    for(i=t[len];i;i=next[i])\n     merge(find(x[i]),find(y[i]));\n    tree::init();\n    \n    for(i=2;i<20;++i) Log2[i]=Log2[i>>1]+1;\n    int q,x,y;\n    scanf(\"%d\",&q);    \n    while(q--) \n    {\n      scanf(\"%d%d\",&x,&y);\n      if(find(x)!=find(y)) puts(\"-1\");\n      else printf(\"%d\\n\",tree::get(x,y));\n    }\n}\n```",
        "postTime": 1491646559,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "\u60b2\u5267\u7684\u9898\u89e3\n\n\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9053\u9898\uff0c\u5fc3\u60f3\uff0c\u5367\u69fd\uff0c\u7f51\u7edc\u6d41\u6c34\u9898\u3002\u540e\u6765\u2026\u2026\u739b\u5fb7\u56de\u7b54\u591a\u7ec4\u8be2\u95ee\u7f51\u7edc\u4f1a\u53d8\u554a\uff01\n\n\u4e8e\u662f\uff0c\u53ea\u597d\u5b89\u5fc3\u5730\u6253\u6700\u5927\u751f\u6210\u6811+LCA\u4e86\u2026\u2026\n\n'''\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define N 100010\n#define INF 0xfffff\nusing namespace std;\nint n, m, q, x, y, cnt;\nint head[N], nxt[N*2], to[N*2], w[N*2], p[N*5], f[N][20], minv[N][20], dep[N];\nstruct Edge{\n    int x, y, z;\n    bool operator < (const Edge& rhs) const {\n        return z > rhs.z;\n    }\n}e[N*5];\ninline void read(int& x)\n{\n    x = 0; char ch = getchar();\n    while(ch < '0' || ch > '9') ch = getchar();\n    while(ch >= '0' && ch <= '9') x = x*10 + ch - '0', ch = getchar();\n}\ninline void Add(int x, int y, int z)\n{\n    to[cnt] = y;\n    w[cnt] = z;\n    nxt[cnt] = head[x];\n    head[x] = cnt++;\n}\ninline int find(int x)\n{\n    return p[x] == x ? x : p[x] = find(p[x]);\n}\ninline void kruskal()\n{\n    for(int i=0;i<m;i++) p[i] = i;\n    sort(e, e+m);\n    for(int i=0;i<m;i++)\n        if(find(e[i].x) != find(e[i].y)){\n            Add(e[i].x, e[i].y, e[i].z);\n            Add(e[i].y, e[i].x, e[i].z);\n            p[find(e[i].x)] = find(e[i].y);\n        }\n}\ninline void DFS(int x, int p)\n{\n    for(int i=head[x];~i;i=nxt[i])\n        if(i != p){\n            dep[to[i]] = dep[x] + 1;\n            f[to[i]][0] = x;\n            minv[to[i]][0] = w[i];\n            DFS(to[i], i^1);\n        }\n}\ninline int lca(int x, int y)\n{\n    int ans = INF;\n    if(dep[x] > dep[y]) swap(x, y);\n    for(int i=15;i>=0;i--) if(dep[f[y][i]] >= dep[x]){\n        ans = min(ans, minv[y][i]);\n        y = f[y][i];\n    }\n    if(x == y) return ans;  \n    for(int i=15;i>=0;i--) if(f[x][i] != f[y][i]) {  \n        ans = min(ans, min(minv[x][i], minv[y][i]));  \n        x = f[x][i];  \n        y = f[y][i];  \n    }  \n    return f[x][0] == 0 ? -1 : min(ans, min(minv[x][0], minv[y][0]));\n}\nint main()\n{\n    read(n); read(m);\n    for(int i=0;i<m;i++)\n        read(e[i].x), read(e[i].y), read(e[i].z);\n    memset(head, -1, sizeof(head));\n    kruskal();\n    dep[1] = 1;\n    DFS(1, -1);\n    for(int j=1;j<=15;j++) \n        for(int i=1;i<=n;i++){\n            f[i][j] = f[f[i][j-1]][j-1];\n            minv[i][j] = min(minv[i][j-1], minv[f[i][j-1]][j-1]);\n        }\n    read(q);\n    while(q--){\n        read(x); read(y);\n        printf(\"%d\\n\", lca(x, y));\n    }\n    return 0;\n}\n'''\n```",
        "postTime": 1483449090,
        "uid": 31766,
        "name": "LoliconAutomaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    },
    {
        "content": "- \u8c8c\u4f3c\u597d\u50cf\u8fd8\u6ca1\u6709\u5927\u4f6c\u7528\u6811\u94fe\uff0c\u8bf4\u8bf4\u6211\u7684\u65b9\u6cd5\u3002\n\n- \u5728\u4e00\u5f20\u65e0\u5411\u56fe\u4e2d\uff0c\u4e24\u70b9\u95f4\u627e\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u5176\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u6700\u5927\uff0c\u6ce8\u610f\u6bcf\u4e24\u70b9\u95f4\u53ea\u9700\u8981\u4e00\u6761\u6700\u4f18\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6700\u540e\u7684\u56fe\u5e94\u8be5\u662f\u4e00\u68f5\u6811\uff01\n\n- \u518d\u60f3\u60f3\u521a\u624d\u5f97\u5904\u7406\u8fc7\u7a0b\uff0c\u8d2a\u5fc3\u7684\u60f3\u6cd5\u6bcf\u6b21\u627e\u6743\u503c\u6700\u5927\u7684\u8fb9\u52a0\u5165\uff0c\u4e0d\u5c31\u662f\u201c\u6700\u5927\u751f\u6210\u6811\u201d\uff1f\u5982\u679c\u4e0d\u662f\uff0c\u5047\u8bbe\uff08v\uff0cu\uff09\u5b58\u5728\u4e00\u6761\u66f4\u4f18\u7684\u8def\uff0c\u90a3\u4e48\u65b0\u6784\u6210\u7684\u6811\u5c06\u6bd4\u539f\u6765\u7684\u201c\u5927\u201d\uff0c\u4e0e\u6700\u5927\u751f\u6210\u6811\u77db\u76fe\uff0c\u6545\u6700\u540e\u7684\u56fe\u4e00\u5b9a\u662f\u6700\u5927\u751f\u6210\u6811\u6216\u6700\u5927\u751f\u6210\u6811\u68ee\u6797\u3002\n\n- \u90a3\u4e48\u63a5\u7740\u521a\u624d\u7684\u95ee\u9898\uff0c\u6c42\u4e00\u68f5\u6811\u4e0a\u4e24\u70b9\u95f4\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u9700\u8981LCA\uff0c\u5f53\u7136\u90a3\u4e9b\u4ec0\u4e48\u500d\u589e\u7684\u6211\u4e0d\u662f\u5f88\u61c2\uff0c\u8fd8\u6709\u5c31\u662f\u6c42\u4e24\u70b9\u7684\u6700\u5c0f\u503c\u3002\u4f1a\u60f3\u5230\u4ec0\u4e48\uff1f\n\n- **\u6811\u94fe\u5256\u5206\uff01\uff01\uff01**\n\n- \u7528\u6811\u5256\u53ef\u4ee5\u5feb\u901f\u7684\u6c42LCA\uff0c\u5e76\u4e14\u67e5\u627e\u533a\u95f4\u6700\u503c\u53ef\u4ee5\u628a\u6811\u94fe\u653e\u5728\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\uff0c\u90a3\u95ee\u9898\u57fa\u672c\u89e3\u51b3\u3002\u4f46\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\u6211\u4eec\u8981\u7684\u662f\u8fb9\u6743\uff0c\u53ef\u6211\u53ea\u4f1a\u628a\u8282\u70b9\u6254\u7ebf\u6bb5\u6811\u4e0a...\u539f\u672c\u60f3\u5316\u8fb9\u4e3a\u70b9\uff0c\u4f46\u4e0d\u77e5\u9053\u600e\u4e48\u5f04\uff0c\u6240\u4ee5\u5e72\u8106\u628a\u8282\u70b9\u7684\u6743\u503c\u8bb0\u4e3a\u5176\u4e0e\u7236\u4eb2\u8282\u70b9\u7684\u8fb9\u7684\u6743\u503c\uff0c\u6839\u8282\u70b9\u8bbe\u4e3aINF\u3002\n\n- \u601d\u8def\u5927\u6982\u8fd9\u6837\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u91cc\u9762\u6709\u6ce8\u91ca\u3002\uff08\u4e3b\u8981\u8fd8\u662f\u8c03\u8bd5\u5f88\u4e45...\u8fd8\u662f\u81ea\u5df1\u592a\u5f31\u4e86\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read();\nint Min(int x,int y){return x<y?x:y;}\nnamespace lys{\n    const int N = 1e4 + 7 ;\n    const int M = 5e4 + 7 ;\n    const int inf = 1e8 + 7 ;\n    //\u7528\u4e8e\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5 \n    struct kru{  \n        int u;\n        int v;\n        int w;\n    }kk[M];\n    //\u9886\u63a5\u8868\u5b58\u56fe \n    struct edge{\n        int to;\n        int next;\n        int w;\n    }e[N*3];  //\u7531\u4e8e\u662f\u4e00\u68f5\u6811 \u53ea\u9700N \n    int pre[N],va[N],fa[N],f[N],top[N],siz[N],dep[N],son[N],seg[N*3],num[N],find[N];\n    int n,m,cnt,cntt,tot,q;\n    //\u52a0\u5165\u4e00\u6761\u8fb9 \n    void add(int x,int y,int l){\n        e[++cnt].to=y;e[cnt].next=pre[x];pre[x]=cnt;e[cnt].w=l;\n        e[++cnt].to=x;e[cnt].next=pre[y];pre[y]=cnt;e[cnt].w=l;\n    }\n    //\u6392\u5e8f\u51fd\u6570 \n    bool cmp(const kru &x,const kru &y){return x.w>y.w;}\n    //\u5e76\u67e5\u96c6 \n    int getfa(int x){\n        if(fa[x]!=x) fa[x]=getfa(fa[x]);\n        return fa[x];\n    }\n    //\u6811\u94fe\u5256\u5206\u7b2c\u4e00\u6b21dfs\uff0c\u8bb0\u5f55\u6df1\u5ea6\uff0c\u6743\u503c\uff0c\u7236\u4eb2\uff0c\u91cd\u513f\u5b50 \n    void dfs1(int node,int deep,int len){\n        va[node]=len;\n        dep[node]=deep;\n        siz[node]=1;\n        int i,v;\n        for(i=pre[node];~i;i=e[i].next){\n            v=e[i].to;\n            if(v==f[node]) continue ;\n            f[v]=node;\n            dfs1(v,deep+1,e[i].w);\n            siz[node]+=siz[v];\n            if(siz[son[node]]<siz[v])\n                son[node]=v;\n        }\n    }\n    //\u6811\u94fe\u5256\u5206\u7b2c\u4e8c\u6b21dfs\uff0c\u8bb0\u5f55\u7956\u5148\uff0c\u5e76\u5c06\u5176\u56fa\u5b9a\u5728\u7ebf\u6bb5\u6811\u4e0a \n    void dfs2(int node,int tp){\n        top[node]=tp;\n        num[++cntt]=node;\n        find[node]=cntt;\n        if(!son[node]) return ;\n        dfs2(son[node],tp);\n        int i,v;\n        for(i=pre[node];~i;i=e[i].next){\n            v=e[i].to;\n            if(v==f[node]||v==son[node]) continue ;\n            dfs2(v,v);\n        }\n    }\n    //\u7ebf\u6bb5\u6811\u5efa\u6811 \n    void built(int node,int l,int r){\n        if(l==r){\n            seg[node]=va[num[l]];\n            return ;\n        }\n        int mid=(l+r)>>1;\n        built(node<<1,l,mid);\n        built((node<<1)|1,mid+1,r);\n        seg[node]=Min(seg[node<<1],seg[(node<<1)|1]); //\u6700\u5c0f\u503c \n    }\n    //\u8be2\u95ee\u533a\u95f4\u548c \n    int query(int node,int l,int r,int x,int y){\n        if(l>y||r<x) return inf;\n        if(l>=x&&r<=y) return seg[node];\n        int mid=(l+r)>>1;\n        int res=Min(query(node<<1,l,mid,x,y),query((node<<1)|1,mid+1,r,x,y));\n        return res;\n    }\n    //\u6c42LCA\uff0c\u987a\u4fbf\u6c42\u533a\u95f4\u6700\u5c0f\u503c \n    int lca(int x,int y){\n        int f1,f2,ff;\n        int res=inf;\n        while(true){\n            if(top[x]==top[y]){\n                ff=dep[x]<dep[y]?x:y;\n                if(x==ff)\n                res=Min(res,query(1,1,cntt,find[ff]+1,find[y])); //\u8fd9\u4e2afind\u8981\u52a01\uff0c\u4e0a\u4e00\u6761\u8fb9\u6ca1\u7528\u5230...\uff08\u8fd9\u91cc\u5361\u4e86\u597d\u4e45...\uff09 \n                else \n                res=Min(res,query(1,1,cntt,find[ff]+1,find[x]));\n                return res;\n            }\n            if(dep[top[x]]>dep[top[y]]){\n                res=Min(res,query(1,1,cntt,find[top[x]],find[x]));\n                x=f[top[x]];\n            }\n            else{\n                res=Min(res,query(1,1,cntt,find[top[y]],find[y]));\n                y=f[top[y]];\n            }\n        }\n    }\n    int main(){\n        int i,x,y,z;\n        //\u6b63\u5e38\u7684\u5feb\u901f\u8bfb\u5165 \n        n=read(); m=read();\n        for(i=1;i<=m;i++){\n            x=read(); y=read(); z=read();\n            kk[i].u=x;\n            kk[i].v=y;\n            kk[i].w=z;\n        }\n        //\u6392\u5e8f \n        sort(kk+1,kk+m+1,cmp);\n        memset(pre,-1,sizeof pre);\n        //\u5e76\u67e5\u96c6 \n        for(i=1;i<=n;i++) fa[i]=i;\n        //\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5 \n        for(i=1;i<=m;i++){\n            x=kk[i].u,y=kk[i].v;\n            int f1=getfa(x);\n            int f2=getfa(y);\n            if(f1!=f2){\n                fa[f1]=f2;\n                add(x,y,kk[i].w);\n                tot++;\n                if(tot==n-1) break ;\n            }\n        }\n        //\u6811\u94fe\u5256\u5206 \n        for(i=1;i<=n;i++)\n            if(!f[i])\n                dfs1(i,1,inf),dfs2(i,i);\n        //\u5efa\u7acb\u7ebf\u6bb5\u6811 \n        built(1,1,cntt);\n        q=read();\n        //\u8be2\u95ee \n        while(q--){\n            x=read(); y=read();\n            int f1=getfa(x),f2=getfa(y);\n            if(f1!=f2){ //\u6839\u672c\u5c31\u4e0d\u8fde\u901a \n                puts(\"-1\");\n                continue ;\n            }\n            printf(\"%d\\n\",lca(x,y));\n        }\n        return 0;\n    }\n}\nint main(){\n    freopen(\"truck.in\",\"r\",stdin);\n    freopen(\"truck.out\",\"w\",stdout);\n    lys::main();\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\ninline int read(){ //\u5feb\u901f\u8bfb\u5165 \n    int kk=0,ff=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-') ff=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9') kk=kk*10+c-'0',c=getchar();\n    return kk*ff;\n}\n```\n\u6709\u95ee\u9898\u8bf7\u6307\u6b63\uff0c\u8c22\u8c22\u3002\n",
        "postTime": 1508995428,
        "uid": 34280,
        "name": "FJ_iNx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1967 \u3010\u8d27\u8f66\u8fd0\u8f93\u3011"
    }
]