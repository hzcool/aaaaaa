[
    {
        "content": "**orz\u5404\u4f4d\u5927\u4f6c**\uff0c\u9898\u89e3\u592a\u5f3a\u4e86\uff0c\u4e3b\u5e2d\u6811\uff0c\u5806\uff0c\u7ebf\u6bb5\u6811\uff0csplay\uff0c\u8fd8\u6709\u66b4\u529b\uff0c\u592a\u5de8\u4e86\u3002\u6240\u4ee5\u6211\u7528\u7684\u662ffhq treap\uff08~~\u597d\u50cf\u66f4\u9ad8\u7ea7~~\uff09\u3002\u7b97\u4e86\u3002\n\n\u53cd\u6b63\u90fd\u662f\u5e73\u8861\u6811\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u52a8\u6001\u6c42\u4e2d\u4f4d\u6570\uff0c\u4e0d\u4f1a\u505a\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u505a\u5f31\u5316\u7248[P1168](https://www.luogu.org/problemnew/show/P1168)\n\n\u81f3\u4e8e\u4e0d\u4f1afhq treap\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u70b9[\u8fd9\u91cc](https://www.luogu.org/blog/57026/solution-p1801)\u6216\u8005[\u8fd9\u91cc](https://www.luogu.org/blog/57026/ping-heng-shu-fhq-treap)\uff08~~\u8bb0\u5f97\u70b9\u8d5e~~\uff09\n\nfhq treap\u505a\u8fd9\u9053\u9898\u6d89\u53ca\u5230insert(\u63d2\u5165)\u4e0efind\uff08\u6c42\u7b2ck\u5c0f\u7684\u6570\uff09\uff0c\u81f3\u4e8ek\uff0c\u5c31\u968fadd\u589e\u5927\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u8bf4fhq treap\u592a\u597d\u7528\u4e86\u3002\n\ninsert\u7684\u539f\u7406\u5c31\u4e0d\u8bf4\u4e86\uff0c\u81f3\u4e8efind\u7684\u539f\u7406\u6211\u5c31\u7b80\u5355\u8bb2\u4e00\u4e0b\uff0cfhq treap\u662f\u7528treap\u6765\u5b58\uff0ctreap\u5c31\u662f\u5806\u4e0e\u6811\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u4eec\u53eb\u5b83\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6240\u4ee5\u5b83\u5177\u6709\u5806\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5c31\u641c\u53f3\u5b50\u6811\u5927\u5c0f\u3002\uff08\u8be6\u7ec6\u53ef\u4ee5\u6233\u4e0a\u9762\uff09\n\n\u55ef\uff0c\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<ctime>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define maxn 200010\nusing namespace std;\nint n,val[maxn],rnd[maxn],son[maxn][3],size[maxn],sum_p,m;\n//val\u5b58\u6743\u503c\uff0crnd\u5b58rand\u51fa\u7684\u503c\uff0cson\u5b58\u5de6\u53f3\u513f\u5b50\uff0csize\u5b58\u5927\u5c0f\u3002\ninline void read(int &x)\n{\n    x=0;int f=1; \n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {if(ch=='-') f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9')\n    {x=x*10+ch-'0';ch=getchar();}\n    x*=f;\n}\ninline int newnode(int x)\n{\n    ++sum_p;size[sum_p]=1;\n    val[sum_p]=x;rnd[sum_p]=rand();\n    return sum_p; \n}\ninline void update(int x)\n{\n    size[x]=size[son[x][1]]+size[son[x][2]]+1;\n}\ninline void split(int &x,int &y,int k,int pos)//\u62c6\u6811\n{\n    if(!pos)x=y=0;\n    else\n    {\n        if(val[pos]<=k)//\uff08\u62c6\u6210\u6bd4k\u5927\u4e0e\u4e0d\u5927\u4e8ek\uff09\n        {x=pos;split(son[pos][2],y,k,son[pos][2]);}\n        else\n        {y=pos;split(x,son[pos][1],k,son[pos][1]);}\n        update(pos);\n    }\n}\ninline int merge(int x,int y)//\u5408\u5e76\n{\n    if(x==0||y==0) return x+y;\n    if(rnd[x]<rnd[y])//\u5982\u679crand[x]<rand[y] \u6211\u4eec\u5c31\u628ay\u63a5\u5728x\u7684\u53f3\u513f\u5b50\u4e0a\n    {\n        son[x][2]=merge(son[x][2],y);\n        update(x);return x;\n    }\n    else//\u53cd\u4e4b\u540c\u7406\n    {\n        son[y][1]=merge(x,son[y][1]);\n        update(y);return y;\n    }\n}\ninline int find(int pos,int rank)\n{\n    while(1)//(\u539f\u7406\u4e0a\u9762\u5df2\u8bb2)\n    {\n        if(size[son[pos][1]]>=rank)\n        {\n            pos=son[pos][1];\n        }\n        else \n        if(size[son[pos][1]]+1==rank)return pos;\n        else\n        {\n            rank-=size[son[pos][1]]+1;\n            pos=son[pos][2];\n        }\n    }\n}\nint main()\n{\n    srand((unsigned)time(NULL));\n    int b,x,y,z,op,root=0,m;\n    read(n);\n    for(register int i=1;i<=n;i++)\n    {\n        read(op);\n        split(x,y,op,root);//\u62c6\u5f00\n        root=merge(merge(x,newnode(op)),y);//\u63d2\u5165\uff0c\u5408\u5e76\u56de\u6765\n    }\n    read(m);char a[3]; \n    for(register int i=1;i<=m;i++)\n    {\n        scanf(\"%s%d\",a,&b);\n        if(a[0]=='a')\n        {\n            split(x,y,b,root);\n            root=merge(merge(x,newnode(b)),y);\n            n++;//\u4e2d\u4f4d\u6570\u662f\u52a8\u6001\u7684\uff0c\u6240\u4ee5\u6539\u53d8\u603b\u4e2a\u6570\u5c31\u597d\u4e86\u3002\n        }\n        else\n        {\n            register int mid=(n+1)/2;//\u52a01\u7684\u539f\u56e0\u5c31\u4e0d\u8bf4\u4e86\n            printf(\"%d\\n\",val[find(root,mid)]);\n        }\n    }\n}\n```\n\n\u5982\u679c\u5404\u4f4d\u5927\u4f6c\u89c9\u5f97\u8bb2\u7684\u8fd8\u884c\uff0c\u8bf7\u8d4f\u4e00\u4e2a\u8d5e\uff0c\u8c22\u8c22\u3002",
        "postTime": 1533130455,
        "uid": 57026,
        "name": "\u9648\u66e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u7c7b\u95ee\u9898\u7684\u6700\u7ecf\u5178\u89e3\u6cd5\u5e94\u5f53\u662f\u5bf9\u9876\u5806\u3002\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u4f7f\u5176\u6709\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u3002\n\n\u7136\u800c\u6211\u4e0d\u4f1a\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u53ea\u80fd\u7528 stl \u4ee3\u66ff\u5e73\u8861\u6811\u4e86 Q\u03c9Q\u3002\n\n\u8fd9\u79cd\u7b80\u5355\u7684\u5e8f\u5217\u7ef4\u62a4\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528 stl \u5f53\u4e2d\u7684 `vector` \u4ee5\u53ca `lower_bound` \u89e3\u51b3\u3002\u4e0b\u9762\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u3002\n\n1. \u9996\u5148\uff0c\u8bfb\u5165\u8fd9\u4e2a\u5e8f\u5217\uff0c\u5e76\u5bf9\u5176\u6392\u5e8f\u3002\u6392\u5e8f\u540e\u624d\u53ef\u4ee5\u6839\u636e\u4e0b\u6807 $O(1)$ \u5f97\u51fa\u4e2d\u4f4d\u6570\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e2a `add` \u64cd\u4f5c\uff0c\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e `a` \u7684\u5143\u7d20\u7684\u4f4d\u7f6e\u63d2\u5165\u65b0\u6570\u5b57\u3002\u7531\u4e8e\u5e8f\u5217\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5**\u4f7f\u7528 `lower_bound`** \u786e\u5b9a\u63d2\u5165\u4f4d\u7f6e\u3002\n3. \u5bf9\u4e8e\u6bcf\u4e2a `mid` \u64cd\u4f5c\uff0c$O(1)$ \u8f93\u51fa\u4e2d\u4f4d\u6570\u5373\u53ef\u3002\u6ce8\u610f `vector` \u4e0b\u6807\u4ece\u96f6\u5f00\u59cb\u3002\n\n\u5728\u6d1b\u8c37\u4e0a\uff0c\u6700\u6162\u7684\u6d4b\u8bd5\u70b9\u8dd1\u4e86 83ms\uff1ahttps://www.luogu.org/record/show?rid=13269424\n\n### \u6838\u5fc3\u4ee3\u7801\uff08\u975e\u5e38\u77ed\uff09\n\n```cpp\nstd::vector<int> v;\n\nint query() { \n    return v[v.size() / 2 - (v.size() & 1 ^ 1)];\n}\nvoid add(int x) { \n    v.insert(std::lower_bound(v.begin(), v.end(), x), x);\n}\n\nint main() {\n    int n = read(); // read \u662f\u5feb\u8bfb\n    while (n--) v.push_back(read());\n    std::sort(v.begin(), v.end());\n    int m = read();\n    while (m--) {\n        char opt[5]; scanf(\"%s\", opt);\n        if (opt[0] == 'm') println(query(v)); // println \u662f\u5feb\u5199\n        else add(read());\n    }\n}\n```\n\n\u5728\u4e0a\u8ff0\u4ee3\u7801\u7684 `query` \u51fd\u6570\u5f53\u4e2d\uff0c\u4f7f\u7528\u4e86\u4f4d\u8fd0\u7b97\u7b80\u5316\u4ee3\u7801\u3002\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a\n```cpp\nint query() {\n    if (v.size() & 1) return v[v.size() / 2];\n    else return v[v.size() / 2 - 1];\n}\n```\n\n----\n\n## 20181118 \u66f4\u65b0\n\n\u5b66\u4e86\u4e00\u4e0b Tarjan \u7684 Zip Tree\u3002\u8d34\u4e00\u4e2a Zip Tree \u89e3\u6cd5\u6838\u5fc3\u4ee3\u7801\u3002\uff08\u6bd4 stl \u5feb\u4e00\u4e9b\uff09\n\n```cpp\nstruct Node {\n    int key, rank, size;\n    Node *lson, *rson;\n    Node() {}\n    Node(int x, int rank);\n} NIL, *root = &NIL;\n\nNode::Node(int x, int rank) : key(x), rank(rank), size(1), lson(&NIL), rson(&NIL) {}\n\nNode *maintain(Node *o) { \n    o->size = 1 + o->lson->size + o->rson->size;\n    return o;\n}\n\nNode *insert(int x, int rank, Node *o) {\n    if (o == &NIL) return root = new Node(x, rank);\n    if (x <= o->key) {\n        Node *p = insert(x, rank, o->lson);\n        if (p->rank > o->rank) o->lson = p->rson, p->rson = maintain(o), o = p;\n        else o->lson = p;\n    } else {\n        Node *p = insert(x, rank, o->rson);\n        if (p->rank > o->rank) o->rson = p->lson, p->lson = maintain(o), o = p;\n        else o->rson = p;\n    }\n    return root = maintain(o);\n}\n\nNode *zip(Node *l, Node *r) {\n    if (l == &NIL) return r;\n    if (r == &NIL) return l;\n    if (l->rank < r->rank) {\n        r->lson = zip(l, r->lson);\n        return maintain(r);\n    } else {\n        l->rson = zip(l->rson, r);\n        return maintain(l);\n    }\n}\n\nNode *del(int x, Node *o) {\n    if (o->key == x) return root = zip(o->lson, o->rson);\n    if (o->key > x) o->lson = del(x, o->lson);\n    else o->rson = del(x, o->rson);\n    return root = maintain(o);\n}\n\nint findKth(int k, Node *o) {\n    if (o->lson->size == k - 1) return o->key;\n    else if (o->lson->size > k - 1) return findKth(k, o->lson);\n    else return findKth(k - o->lson->size - 1, o->rson);\n}\n\nvoid solution() {\n    std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr);\n    srand(time(nullptr));\n    int n = read(); rep(i, 1, n) insert(read(), rand() % jzm, root);\n    int Q = read(); while (Q--) {\n        std::string opt; std::cin >> opt;\n        if (opt[0] == 'a') insert(read(), rand() % jzm, root), ++n;\n        else println(findKth(n / 2 - (n & 1 ^ 1) + 1, root));\n    }\n}\n```",
        "postTime": 1541496526,
        "uid": 53062,
        "name": "Anguei",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u54c7\uff0c\u4e0b\u9762\u6709\u5927\u4f6c\u51fd\u6570\u6a21\u62df\u5806,orz\u3002\u849f\u84bb\u81ea\u7136\u662f\u7528stl\u81ea\u5e26\u7684\u5c0f\u6839\u5806\u548c\u5927\u6839\u5806\u3002\n\n\u6211\u4eec\u9996\u5148\u5c06\u6240\u6709\u7684\u6570\u4e22\u8fdb\u5927\u6839\u5806\u91cc\u7136\u540e\u53d6\u4e00\u822c\u4e22\u8fdb\u5c0f\u6839\u5806\u91cc\uff0c\u8fd9\u6837\u5c31\u628a\u6240\u6709\u7684\u6570\u5206\u6210\u4e86\u4e24\u6bb5\u6709\u5e8f\u7684\u90e8\u5206\u3002\n\n\u52a0\u5165\u64cd\u4f5c\u53ef\u4ee5\u6bcf\u6b21\u53d6\u5c0f\u6839\u5806\u5806\u9876\u548c\u52a0\u5165\u7684\u6570\u6bd4\u8f83\uff0c\u5927\u4e8e\u5806\u9876\u5219\u52a0\u5165\u5c0f\u6839\u5806\u5426\u5219\u52a0\u5165\u5927\u6839\u5806\uff08\u4e3a\u4e86\u7ef4\u62a4\u8fd9\u4e2a\u6392\u5e8f\u7684\u6709\u5e8f\u6027\uff09\u3002\n\n\u800c\u5728\u8be2\u95ee\u65f6\u4e3a\u4e86\u4fdd\u8bc1\u5927\u6839\u5806\u5806\u9876\u5c31\u662f\u7b54\u6848\uff0c\u6211\u4eec\u8981\u4f7f\u5927\u6839\u5806\u91cc\u7684\u5143\u7d20\u7b49\u4e8e\uff08\u6240\u6709\u5143\u7d20+1\uff09/2<\u6839\u636e\u9898\u76ee\u8981\u6c42\u5e94\u8be5+1>\uff0c\u6240\u4ee5\u52a0\u4e24\u4e2awhile\u5faa\u73af\u63a7\u5236\u5b83\u7684\u5143\u7d20\u4e2a\u6570\uff08\u5c11\u4e86\u5c31\u4ece\u5c0f\u6839\u5806\u90a3\u91cc\u62a2\uff0c\u591a\u4e86\u5c31\u4e22\u7ed9\u5c0f\u6839\u5806\uff09\uff0c\u7136\u540e\u8f93\u51fa\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86~~\n\n\u4ee3\u7801\n```cpp\n#include<iostream> \n#include<cstdio> \n#include<queue>\nusing namespace std; \nint n,m;\npriority_queue<int,vector<int>,greater<int> >que1;//xiao\npriority_queue<int>que2;//da\nstring s;\nint cnt1,cnt2;\nint main()\n{ \n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        int a;\n        scanf(\"%d\",&a);\n        que2.push(a);cnt2++;\n    }\n    for(int i=1;i<=n/2;i++)\n    {\n        int x=que2.top();\n        que2.pop();cnt2--;\n        que1.push(x);cnt1++;\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n    cin>>s;\n    if(s[0]=='a')\n    {\n        int x;\n        scanf(\"%d\",&x);\n        n++;\n        int l=que2.top();\n        if(x>l)que1.push(x),cnt1++;\n        else que2.push(x),cnt2++;\n    }\n    else\n    {\n        while(cnt2<(n+1)/2)\n        {\n        int x=que1.top();\n        que1.pop();cnt1--;\n        que2.push(x);cnt2++;\n        }\n        while(cnt2>(n+1)/2)\n        {\n        int x=que2.top();\n        que2.pop();cnt2--;\n        que1.push(x);cnt1++;    \n        }\n        if(cnt2==(n+1)/2)\n        cout<<que2.top()<<endl;\n    }\n    }\n    return 0;\n}\n```",
        "postTime": 1508140316,
        "uid": 21710,
        "name": "\u8fd9\u6709\u4e00\u53ea\u533f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u66b4\u529b\u51fa\u5947\u8ff9\n\n---\n\n\u5148\u5bf9\u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4f7f\u7528\u4e8c\u5206\u63d2\u5165\u3002\n\n---\n\n\u4ee3\u7801\uff08\u590d\u5236\u8005CE\uff09\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\nusing namespace std;\n#define maxnn 110007\nstring c;\nint n,m,l,r,mid,x,tp,a[maxnn],w;\ninline bool check()\n{\n    return a[mid]<=x;\n}\ninline void Init()\n{\n    scanf(\"%d\",&n);\n    for(register int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n    scanf(\"%d\",&m);\n}\ninline void Work()\n{\n    sort(a+1,a+n+1);\n    for(register int i=1;i<=m;i++)\n    {\n        cin>>c;\n        if(c==\"mid\")//\u5224\u65ad\n        {\n            printf(\"%d\\n\",a[n%2==0?n/2:n/2+1]);//\u8f93\u51fa\n        }\n        else\n        {\n        \tw=0;//\u91cd\u7f6e\uff0c\u4e0d\u8fd9\u6837\u7684\u8bddWA#7\n            cin>>x;\n            l=1;\n            r=n;\n            while(l<=r)//\u4e8c\u5206\u4f4d\u7f6e\n            {\n                mid=(l+r)/2;\n                if(check())\n                {\n                    w=mid;\n                    l=mid+1;\n                }\n                else\n                r=mid-1;\n            }\n            ++n;\n            for(register int i=n;i>w+1;i--)\n            {\n                a[i]=a[i-1];//\u8c03\u6574\n            }\n            a[w+1]=x;\n        }\n    }\n}\nint mian()//\u534e\u4e3d\u7684\u4e3b\u51fd\u6570\n{\n    Init();\n    Work();\n    return 0;\n}\n```\n",
        "postTime": 1521004290,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u60f3\u5230\u4e2a\u65b0\u7684\u65b9\u6cd5\n\n\u9996\u5148\u5c06\u6240\u6709\u7684\u6570\u5b58\u8d77\u6765\u79bb\u6563\u5316\n\n\u7528**\u6811\u72b6\u6570\u7ec4**\u6765\u7ef4\u62a4\u6570\u5b57\u7684\u4e2a\u6570\n\n**\u4e8c\u5206\u641c\u7d22**\u6811\u72b6\u6570\u7ec4\u6765\u5bfb\u627e\u4e2d\u4f4d\u6570\n\n\u987a\u5e26\u4e00\u63d0, P1168\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u505a, [\u8fd9\u662f\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1168)\n\n\u4e0b\u9762\u662f\u4ee3\u7801:\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nconst int Mn(200050),Mm(10050);\ninline int lb(const int& x)\t{ return x&(-x); }\t//lowbit\nint a[Mn],b[Mn],p[Mn],c[Mn];\t//a\u662f\u6240\u6709\u6570, c\u4e3a\u6811\u72b6\u6570\u7ec4\nbool _cmp(int x,int y)\t//\u79bb\u6563\u5316\u65f6\u4f7f\u7528\n{ return a[x]==a[y] ? x<y : a[x]<a[y]; }\nstruct opr\n{\n\tint opt,n;\n}o[Mm];\t//\u5b58\u4e0b\u6240\u6709\u64cd\u4f5c\nint main()\n{\n\tint n,m;\t//\u4f9d\u7167\u9898\u610f\n\tscanf(\"%d\",&n);\n\tfor(int i(1);i<=n;++i)\n\t{\n\t\tscanf(\"%d\",a+i);\n\t\tb[i] = i;\t//b\u4ee3\u8868\u4e86\u6392\u5e8f\u7b2ci\u7684\u6570\u5728a\u6570\u5217\u7684\u4f4d\u7f6e\n\t}\n\tscanf(\"%d\",&m);\n\tint ar(n);\t//a\u6570\u5217\u7684\u957f\u5ea6\n\tfor(int i(1);i<=m;++i)\n\t{\n\t\tstring s;\n\t\tcin >> s;\t//\u8bfb\u53d6\u64cd\u4f5c\n\t\tif(s[0]=='a')\n\t\t{\n\t\t\tscanf(\"%d\",&(o[i].n));\n\t\t\ta[++ar] = o[i].n;\n\t\t\tb[ar] = ar;\n\t\t\to[i].opt = 1;\t//add\u64cd\u4f5c\u8bb0\u4e3a1\n\t\t}\n\t\tif(s[0]=='m')\n\t\t\to[i].opt = 0;\t//mid\u64cd\u4f5c\u8bb0\u4e3a2\n\t}\n\tsort(b+1,b+ar+1,_cmp);\n\tfor(int i(1);i<=ar;++i)\n\t\tp[b[i]] = i;\t//p\u4e3aa\u6570\u5217\u4e2d\u7b2ci\u4e2a\u6570\u7684\u6392\u5e8f\n\tfor(int i(1);i<=n;++i)\n\t\tfor(int j(p[i]);j<=ar;j+=lb(j)) ++c[j];\t//\u6811\u72b6\u6570\u7ec4\u4fee\u6539\n\tint cnt(n);\n\tfor(int i(1);i<=m;++i)\n\t{\n\t\tif(o[i].opt)\n\t\t{\n\t\t\t++cnt;\n\t\t\tfor(int j(p[cnt]);j<=ar;j+=lb(j)) ++c[j];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint tar((cnt+1)/2);\t//\u641c\u7d22\u76ee\u6807\n\t\t\tint l(1),r(ar);\n            /*----\u4e8c\u5206\u641c\u7d22----*/\n\t\t\twhile(r-l>3)\n\t\t\t{\n\t\t\t\tint mid((l+r)>>1);\n\t\t\t\tint ans(0);\n\t\t\t\tfor(int j(mid);j;j-=lb(j))\tans += c[j];\n\t\t\t\tif(ans<tar)\tl = mid+1;\n\t\t\t\telse\tr = mid;\t\n\t\t\t}\n\t\t\tfor(;l<=r;++l)\n\t\t\t{\n\t\t\t\tint ans(0);\n\t\t\t\tfor(int j(l);j;j-=lb(j))\tans += c[j];\n\t\t\t\tif(ans==tar)\tbreak;\n\t\t\t}\n            /*----------------*/\n\t\t\tcout << a[b[l]] << endl;\t//\u8f93\u51fa\u4e2d\u4f4d\u6570\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1534595156,
        "uid": 22911,
        "name": "ajil",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5230\u6b64\u9898\uff0c\u987f\u65f6\u5174\u594b\u4e86\uff0c\u56e0\u4e3a\uff0c\u6211\u4ee5\u524dyy\u51fa\u4e86\u4e00\u79cd\u6392\u5e8f\uff0c\u53eb\u505a\u4e8c\u5206\u94fe\u8868\u63d2\u5165\u6392\u5e8f\u3002\n\n\u8be6\u7ec6\u677f\u5b50\u4ee3\u7801\u89c1[\u535a\u5ba2](https://www.luogu.org/blog/Think-of-Blank/er-fen-lian-biao-cha-ru-pai-xu)\n\n\u7ed3\u679c\u56e0\u4e3avector\u7684insert\u592a\u6162\u800c\u88ab\u6211GG\u4e86\n\n[\u8dd1\u3010\u6a21\u677f\u3011\u5feb\u901f\u6392\u5e8f](https://www.luogu.org/recordnew/show/13189539)\n\n\u7136\u540e\uff0c\u770b\u5230\u6b64\u9898\uff0c\u627e\u4e2d\u4f4d\u6570\u561b\uff0c\u80af\u5b9a\u662f\u8981\u5728\u6392\u597d\u5e8f\u7684\u6570\u5217\u91cc\u9762\u9009\u51fa\u561b\u3002\u3002\u3002\n\n\u652f\u6301\u6dfb\u52a0\u6570\u5b57\uff0c\u561b\uff0c\u4e8c\u5206\u4e00\u4e0b\u5c31\u597d\u4e86\u554a\u3002\u3002\u3002\u7136\u540e\uff0c\u6211\u5c31\u60ca\u559c\u7684\u53d1\u73b0\u8fd9\u4e2a\u601d\u8def\u4e0e\u6211\u4e4b\u524dyy\u51fa\u7684\u6392\u5e8f\u5f02\u5e38\u76f8\u4f3c\uff0c~~\u4e8e\u662f\uff0c\u6211\u5c31\u76f4\u63a5ctrl c+ctrl v\u3002~~\n\n\u7ed3\u679c\u5c31\u8fd9\u6837\u53ea\u8dd1\u4e86\u591a200ms\n\n\u8fd9\u79cd\u505a\u6cd5\u8fd8\u8d44\u74f7\u64cd\u4f5c\u5220\u9664\uff0c\u590d\u6742\u5ea6O(\u7384\u5b66)\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```c\n//#pragma GCC optimize()//\u624b\u52a8Ox\u4f18\u5316\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+1;\nint a[N];\nvector<int>s;\nint main(){\n\tint n,siz;\n\tscanf(\"%d\",&n);\n\tsiz=n;//\u8bb0\u5f55\u94fe\u8868\u5927\u5c0f \n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tsort(a+1,a+n+1);//\u5148\u6392\u5e8f\u4e0b\uff0c\u4fdd\u8bc1\u539f\u59cb\u94fe\u8868\u6709\u5e8f \n\tfor(int i=1;i<=n;++i){\n\t\ts.push_back(a[i]);//\u4f9d\u6b21\u653e\u5165\u5373\u53ef \n\t}\n\tint m;\n\tscanf(\"%d\",&m);\n\tchar ss[5];\n\twhile(m--){\n\t\tscanf(\"%s\",ss); \n\t\tif(ss[0]=='a'){\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tint l=0,r=siz-1,ans=-1;//\u8fd9\u91cc\u628aans\u8d4b\u503c\u4e3a-1\u662f\u4e3a\u4e86\u9632\u6b62x\u662f\u6700\u5c0f\u5143\u7d20\u65f6\uff0c\u4f1a\u5bfc\u81f4\u4e8c\u5206\u65f6\u4e0d\u4f1a\u7ed9ans\u8d4b\u503c\uff0c\u8fd9\u65f6\uff0c\u6dfb\u52a0\u81f3\u94fe\u9996\u5373\u53ef \n\t\t\twhile(l<=r){//\u4e8c\u5206\u51fa\u6700\u63a5\u8fd1x\u7684\u6570\u5b57\u7684\u4f4d\u7f6e \n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(s[mid]<=x){\n\t\t\t\t\tans=mid;\n\t\t\t\t\tl=mid+1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr=mid-1;\n\t\t\t}\n\t\t\ts.insert(s.begin()+ans+1,x);\n\t\t\tsiz++;\n\t\t\tcontinue;\n\t\t}\n\t\t//\u5206\u60c5\u51b5\u8f93\u51fa\u7b54\u6848 \n\t\tif(siz&1){\n\t\t\tprintf(\"%d\\n\",s[((siz+1)>>1)-1]);\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",min(s[(siz>>1)-1],s[(siz>>1)]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547196835,
        "uid": 81847,
        "name": "ThinkofBlank",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "#\u5148\u8bf4\u8bf4\u8fd9\u9053\u9898:\n\n##\u7528\u4e24\u4e2a\u5806\u6765\u7ef4\u62a4\u4e2d\u4f4d\u6570\u5de6\u53f3\u7684\u6570\uff01\n\n\u4e00\u4e2a\u5927\u6839\u5806bigheap( bhp )\u7ef4\u62a4\u4e2d\u4f4d\u6570mid\u5de6( \u6bd4mid\u5c0f )\u7684\u6570\uff0c\u961f\u9996( bhp[0] )\u8868\u793a\u79bb\u5f53\u524dmid\u6700\u63a5\u8fd1\u4f46\u5c0f\u4e8emid\u7684\u6570\u3002\n\n\u4e00\u4e2a\u5c0f\u6839\u5806smallheap( shp )\u7ef4\u62a4\u4e2d\u4f4d\u6570mid\u53f3( \u5927\u4e8e\u7b49\u4e8emid )\u7684\u6570\uff0c\u961f\u9996( shp[0] )\u8868\u793a\u79bb\u5f53\u524dmid\u6700\u63a5\u8fd1\u4f46\u5927\u4e8e\u7b49\u4e8emid\u7684\u6570\u3002\n\n\u8fd9\u6837\u5f53\u524d\u4e2d\u4f4d\u6570\u4fbf\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.\u6570\u5b57\u603b\u6570\u4e3a\u5947\u6570:  mid=shp[0]\uff1b\n\n2.\u6570\u5b57\u603b\u6570\u4e3a\u5076\u6570:  mid=min( bhp[0]+shp[0] )\n\n##\u64cd\u4f5c:\n\n1.\u5148\u5c06\u521d\u59cb\u6570\u636e\u4e8c\u5206\u5efa\u5806\uff0c\u6211\u8fd9\u91cc\u7528\u4e86\u4e2a\u7b28\u65b9\u6cd5\u7528\u6570\u7ec4\u628a\u521d\u59cb\u6570\u636e\u5b58\u4e86\u6392\u5e8f\u540e\u5efa\u5806( \u56e0\u4e3a\u8981\u4fdd\u8bc1\u5355\u8c03\u9012\u589e )...\n\n2.\u6bcf\u5f53\u63d2\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u5bf9\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\uff0c\u5982\u679c\u6bd4\u5f53\u524dmid\u5c0f\u5c31\u62df\u52a0\u5165\u5927\u6839\u5806\uff0c\u5426\u5219\u62df\u52a0\u5165\u5c0f\u6839\u5806...\n\n3.\u90a3\u4e48\u95ee\u9898\u6765\u4e86:\u5c06\u65b0\u7684\u70b9\u63d2\u5165\u5927/\u5c0f\u6839\u5806\u540e\uff0c\u5982\u679c\u5927\u6839\u5806\u6570\u636e\u6570\u6bd4\u5c0f\u6839\u5806\u59271\uff0c\u6216\u8005\u5c0f\u6839\u5806\u6570\u636e\u6570\u6bd4\u5927\u6839\u5806\u59272( \u56e0\u4e3a\u603b\u8981\u4fdd\u8bc1\u5c0f\u6839\u5806\u6570\u636e\u6570>=\u5927\u6839\u5806\u6570\u636e\u6570 )\uff0c\u8fd9\u65f6\u4fbf\u8981\u5c06\u65b0\u6570\u52a0\u5165\u5efa\u5806\u540e\uff0c\u5c06\u88ab\u52a0\u5165\u7684\u5806\u7684\u9876\u70b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u5806\u4e2d(\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5806\u7684\u65b0\u7684\u9876\u70b9)\uff0c\u4ee5\u4fdd\u8bc1\u4e24\u4e2a\u5806\u6570\u636e\u76f8\u5bf9\u5e73\u8861\u3002\n\n\n##\u90a3\u4e48\u95ee\u9898\u6765\u4e86:\u4f60\u4eec\u4f1a\u624b\u5199\u5806\u5417\uff1f\n\n\u5982\u679c\u4f1a\u5199\uff0c\u4f60\u4eec\u80fd\u5199\u591a\u5c11\u884c\u5462\uff1f\u6240\u4ee5\u6d17\u6d17\u7761\u5427(\u8bef)\n\n------\u4e8e\u662f\u5c31\u60f3\u5230\u7528STL\u7684\u5806:\n\n\u8c03\u7528<algorithm>\u548c<vector>\u5e93\n\n```cpp\nvector <long long> a;\na.push_back();\u5c06\u6570\u636e\u52a0\u5165vector\nmake_heap(a.begin(),a.end(),cmp);//\u5efa\u5806\uff0c\u8fd9\u91cc\u7684cmp\u5224\u65ad\u4e3a\u786e\u5b9a\u5806\u7684\u79cd\u7c7b( \u9700\u8981\u624b\u5199 )\npush_heap(a.begin(),a.end(),cmp);//\u7ef4\u62a4\u8fd9\u4e2a\u5806\npop_heap(a.begin(),a.end(),cmp);//\u5c06\u9876\u70b9\u79fb\u52a8\u81f3\u961f\u5217\u6700\u5c3e\uff0c\u5e76\u7ef4\u62a4\u5806\uff0c\u4f46\u67d0\u6570\u4f9d\u7136\u5728\u961f\u5217\u6700\u5c3e=_=\na.pop_back();//\u4e0e\u4e0a\u9762\u7684\u6784\u6210\u7ec4\u5408\u6280\uff0c\u5220\u9664\u672b\u5c3e\u7684\u70b9\n```\n\u5229\u7528\u4e0a\u8ff0\u51fd\u6570\u5c31\u53ef\u4ee5\u6a21\u62df\u5806\u4e86\n\n#\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector <long long> bhp,shp;\nlong long n,bcnt,scnt,a[100010];//bcnt,scnt\u8bb0\u5f55\u5f53\u524d\u4e24\u4e2a\u5806\u91cc\u6570\u636e\u6570\u91cf \nbool bcmp(long long x,long long y)//\u5927\u6839\u5806\u7684\u5224\u65ad\u8981\u5199\u5c0f\u4e8e\u53f7\uff01 \n{\n    return x<y;\n}\nbool scmp(long long x,long long y)//\u5c0f\u6839\u5806\u7684\u5224\u65ad\u8981\u5199\u5927\u4e8e\u53f7\uff01\n{\n    return x>y;\n}\nint main()\n{\n    long long num; //\u4e0b\u9762\u7684\u4e00\u5c0f\u6bb5\u641e\u5b9a\u521d\u59cb\u6570\u636e \n    scanf(\"%lld\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&a[i]);\n    sort(a+1,a+n+1);\n    for(int i=1;i<=n;i++)\n    {\n        if(i<=n/2)\n        bhp.push_back(a[i]);\n        else\n        shp.push_back(a[i]);\n    }\n    bcnt=n/2;scnt=n-n/2;\n    make_heap(bhp.begin(),bhp.end(),bcmp);\n    make_heap(shp.begin(),shp.end(),scmp);\n    \n    long long q,t;//t\u53ea\u662f\u4e00\u4e2a\u8bb0\u5f55\u6570\u636e\u7684rbq\uff08\u8bef\uff09\u53d8\u91cf \n    string ins;\n    scanf(\"%lld\",&q);\n    for(int i=1;i<=q;i++)\n    {\n        cin>>ins;\n        if(ins[0]=='a')\n        {\n            if(n%2==0)\n                t=min(shp[0],bhp[0]);\n            else \n                t=shp[0];//\u4e0a\u9762\u8fd9\u4e00\u5c0f\u6bb5\u53d6\u51fa\u5f53\u524dmid \n                \n            n++;\n            scanf(\"%lld\",&num);\n            //cout<<\"num=\"<<num<<endl; \n            if(t-num>0) //\u62df\u52a0\u5165\u5927\u6839\u5806\n            {\n                bcnt++;\n                bhp.push_back(num);\n                push_heap(bhp.begin(),bhp.end(),bcmp);\n                if(bcnt-scnt>=1)//\u5982\u679c\u5927\u6839\u5806\u6570\u636e\u6570\u8fc7\u591a \n                {\n                    t=bhp[0];\n                    pop_heap(bhp.begin(),bhp.end(),bcmp);//\u5f39\u51fa\u5927\u6839\u5806\u9876\u70b9 \n                    bhp.pop_back();\n                    bcnt--;scnt++;\n                    shp.push_back(t);//\u52a0\u5165\u5c0f\u6839\u5806 \n                    push_heap(shp.begin(),shp.end(),scmp);//\u7ef4\u62a4\u5c0f\u6839\u5806\uff08\u8fd9\u4e2a\u5927\u6982\u6709\u7528~\uff09 \n                }\n            }\n            else//\u62df\u52a0\u5165\u5c0f\u6839\u5806 \n            {\n                scnt++;\n                shp.push_back(num);\n                push_heap(shp.begin(),shp.end(),scmp);\n                if(scnt-bcnt>=2)//\u5982\u679c\u5c0f\u6839\u5806\u6570\u636e\u6570\u8fc7\u591a \n                {\n                    t=shp[0];\n                    pop_heap(shp.begin(),shp.end(),scmp);//\u4e0e\u4e0a\u9762\u76f8\u53cd\uff01 \n                    shp.pop_back();\n                    scnt--;bcnt++;\n                    bhp.push_back(t);\n                    push_heap(bhp.begin(),bhp.end(),bcmp);\n                }\n            }\n        }\n        else//\u8f93\u51famid\uff01 \n        {\n            if(n%2==0)\n                cout<<min(shp[0],bhp[0])<<endl;\n            else \n                cout<<shp[0]<<endl;\n        }\n    }\n    return 0;\n}\n```\n##\u8fd9\u91cc\u662f\u9898\u5916\u8bdd\uff1a\n\n1.\u6570\u636e\u6709\u70b9\u7f3a\u9677\uff0c\u5982\u679c\u521d\u59cb\u6570\u636e\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u5806\u521b\u5efa\u4f1a\u51fa\u73b0\u9519\u8bef\uff01( \u4f46\u6211A\u4e86 )\n\n2.\u5176\u5b9e\u6709\u5f88\u591a\u65b9\u6cd5\u6bd4\u8fd9\u4e2a\u7b80\u5355\u6bd4\u5982multiset\uff0cpriority\\_queue\u7b49\uff0c\u4f46\u6b63\u597d\u590d\u4e60\u5806\uff0c\u6211\u5c31\u7528stl\u5199\u4e86\u8fd9( \u5077\u61d2QWQ )\n\n###\u6700\u540e\u4e00\u53e5\u8bdd\uff1a\n\n\u770b\u63d0\u4ea4\u8bb0\u5f55\u4f1a\u53d1\u73b0\u6211\u9519\u4e8610+\u904d\uff0c\u9664\u4e86\u5f00\u59cb\u51e0\u904d\uff0c\u90fd\u662f\u6211\u5783\u573e\u961f\u53cb\u778e\u6307\u70b9\u4ee5\u81f3\u53ea\u5f97\u4e8620\u5206\n\n\u8fd9\u91cc\u8981\u63d0\u9192\u4e00\u4e0b\u4e00\u5b9a\u8981\u4ee5\u4e2d\u4f4d\u6570\u4e3a\u57fa\u51c6\u5224\u5b9a\u63d2\u5165\u7684\u65b0\u6570\u5e94\u8be5\u653e\u5728\u54ea\u4e2a\u5806\u91cc\uff0c\u800c\u4e0d\u662f\u6839\u636e\u63d2\u5165\u7684\u6570\u636e\u79bb\u54ea\u4e2a\u5806\u9876\u70b9\u66f4\u8fd1...\n\n\u8fd8\u6709\u4e00\u4ef6\u4e8b:\u4e0d\u8981\u8f7b\u6613\u76f8\u4fe1\u961f\u53cb\u7684\u8bdd...\n",
        "postTime": 1502884628,
        "uid": 25425,
        "name": "Paperback_Writer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u597d\u591a\u5927\u4f6c\u7528\u4e8c\u5206\uff0csplay\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u4f18\u5148\u961f\u5217\u7b49\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u7136\u800c\u672c\u849f\u84bb\u5b9e\u5728\u662f\u6e23\uff0c\u6240\u4ee5\u53ea\u80fd\u7528\u6700\u7b80\u5355\u7684\u7eafvector\u5199\u3002\n\n**\u8fd9\u662f\u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u6709\u4ec0\u4e48\u5efa\u8bae\u5c3d\u60c5\u8bc4\u8bba\uff0c\u8c22\u8c22\u3002**\n\n**~~\uff08\u4e2a\u4eba\u89c9\u5f97\u6bd4\u5927\u4f6c\u4eec\u5199\u7684\u7b80\u5355\uff09~~**\n\nC++\u4e2dstl\u8868\u771f\u7684\u65b9\u4fbf\uff0c\u5176\u4e2d\u5411\u91cfvector\u652f\u6301\u6570\u7ec4\u4e2d\u95f4\u63d2\u5165\uff1a\n```cpp\n\tv.insert\uff08v.begin()+i,a\uff09;\n\t/*\n\tv.begin()\u6307v\u6570\u7ec4\u5934\u5730\u5740\uff0cv.begin()+i\u76f8\u5f53\u4e8ev[i]\uff0ca\u5373\u63d2\u5165\u7684\u503c\n\t*/\n```\n\n------------\n\n\u6211\u60f3\u5148\u76ae\u4e00\u4e0b\u53d1\u51fa\u6211**\u666e\u901a\u6570\u7ec4\u7eaf\u66b4\u529b30\u5206**\u7684\u4ee3\u7801~~\u6765\u63ed\u9732\u666e\u901a\u6570\u7ec4\u7684\u5bb3\u5904~~\n\n```cpp\n//30\u5206\u7684\u70c2\u4ee3\u7801\u5c31\u4e0d\u591a\u52a0\u6ce8\u91ca\u4e86\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\nusing namespace std;\nlong long m,n,a[110001];\nstring f;\nint main(){\n    scanf(\"%lld\",&n);\n    for(long long i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\n    scanf(\"%lld\",&m);\n    for(long long i=1;i<=m;i++){\n        cin>>f;\n        if(f==\"add\")scanf(\"%lld\",&a[++n]);//\u5c06\u6570\u76f4\u63a5\u52a0\u5165\u6570\u7ec4\u5c3e\n        else{\n            sort(a+1,a+n+1);//\u6bcf\u6b21sort\u4e0d\u8d85\u65f6\u624d\u602a\n            if(n%2)printf(\"%lld\\n\",a[(long long)ceil(n/2.0)]);\n            else printf(\"%lld\\n\",min(a[n/2],a[n/2+1]));\n        }\n    }\n}\n```\n~~\u5e9f\u8bdd\u5b8c\u4e86\u53ef\u4ee5\u5f00\u59cb\u6b63\u6587\u4e86~~\n------------\n\n\n\n------------\n\n\n\u9996\u5148\u8bfb\u5165\u5411\u91cf\u6570\u7ec4\uff0csort\u6392\u5e8f\uff1a\n\n```cpp\n\tscanf(\"%lld\",&n);\n\tfor(long long i=0; i<n; i++) {\n\t\tscanf(\"%lld\",&a);          //\u8bfb\u5165a\n\t\tv.push_back(a);            //\u5c06a\u653e\u5165v\u4e2d\n\t}\n\tsort(v.begin(),v.end());       //\u6392\u5e8f\uff0c\u4fdd\u8bc1v\u4e3a\u5355\u8c03\u9012\u589e\n```\n#### \u4ee5\u4e0b\u672c\u9898\u6838\u5fc3\uff1a\n\n\u5c06\u6570\u63d2\u5165\u5411\u91cfv\u4e2d\uff0c\u666e\u901a\u6570\u7ec4\u53ea\u652f\u6301\u4fee\u6539\u67e5\u8be2\uff0c\u63d2\u5165\u9700\u6bcf\u6b21sort\u6392\u5e8f\u6216\u4f7f\u7528\u624b\u5de5\u94fe\u8868\uff0c~~sort\u6392\u5e8f\u8fc7\u6162\uff0c\u94fe\u8868\u8c03\u8bd5\u4e0d\u591f\u65b9\u4fbf~~\uff0c\u4e8e\u662f**vector\u4fbf\u95ea\u4eae\u767b\u573a**~~\uff08\u6b64\u5904\u5e94\u6709\u638c\u58f0\uff09~~\u3002\n\n\n\u8bfb\u5165\u6570\u636ea\uff0c\u4ece\u5934\u8bbf\u95eevector\uff0c\u5728\u7b2c\u4e00\u4e2a\u5927\u4e8ea\u7684\u4f4d\u7f6e**\u524d**\u63d2\u5165b\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1vector\u4e00\u76f4\u4e3a\u5355\u8c03\u9012\u589e\uff0c\u4e0d\u9700\u6bcf\u6b21\u6392\u5e8f\u3002\u540c\u65f6\u5e94\u8bb0\u5f55vector\u7684\u957f\u5ea6n\uff08\u8bdd\u8bf4\u597d\u50cf\u7528v.size()\u8c03\u6574\u4e00\u4e0b\u8c8c\u4f3c\u4e5f\u53ef\u4ee5\uff09\uff0cn\u521d\u59cb\u503c\u4e3a\u539f\u59cbvector\u7684\u957f\u5ea6\u3002\u4ee3\u7801\uff1a\n```cpp\n\tscanf(\"%lld\",&a);\n\tn++;                        //v\u7684\u957f\u5ea6++\n\tfor(int i=0; i<n; i++) {\t//\u4ece\u5934\u8bbf\u95ee\n\t\tif(v[i]>a) {\t\t\t//\u4e00\u65e6\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4a\u5927\u7684\u5143\u7d20\n\t\t\t\tv.insert(v.begin()+i,a);//\u5c06a\u63d2\u5165v\u4e2d\n\t\t\t\tbreak;          //\u9000\u51fa\u5faa\u73af\n\t\t}\n\t}\n```\n\n\u8bbf\u95ee\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u3002\u82e5\u5e8f\u5217\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u5219\u6307\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u7531\u4e8e\u672cvector\u6570\u7ec4\u4ecev[0]\u5f00\u59cb\uff0c\u6240\u4ee5\u8bb0\u5f55\u7684\u957f\u5ea6n-1\u624d\u4e3a\u8981\u8bbf\u95ee\u7684\u70b9\uff0c\u5373vector\u4e2d\u7b2cn\u4e2a\u503c\u4e3av[n-1]\uff1a\n```cpp\n\tif(n%2) //\u82e5\u4e3a\u5947\u6570\n\t\tprintf(\"%lld\\n\",v[(long long)ceil(n/2.0)-1]);\n        \t//\u5947\u6570\u9664\u4ee52\u4e0d\u4e3a\u6574\u6570\n            //\u4f46\u6ce8\u610fC++\u4e2d\u6574\u6570\u9664\u4ee5\u6574\u6570\u6052\u5f97\u6574\u6570\uff0c\u6240\u4ee5\u8981\u9664\u4ee5\u5b9e\u65702.0\n            //\u800c\u6570\u7ec4\u4e0b\u6807\u5fc5\u987b\u4e3a\u6574\u578b\uff0c\u6240\u4ee5\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\n\telse \n    \tprintf(\"%lld\\n\",min(v[n/2-1],v[n/2]));\n            //\u8f93\u51fa\u4e2d\u95f4\u4f4d\u7f6e\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u8005\n```\n**\u6240\u4ee5\u7ec4\u5408\u8d77\u6765AC\u603b\u4ee3\u7801\uff1a**\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<vector>\nusing namespace std;\nlong long a,m,n;\nstring f;\nvector<long long>v;\nint main() {\n\tv.reserve(200010); //\u4fdd\u7559\u7a7a\u95f4\uff0c\u4f7fv\u6700\u5927\u957f\u5ea6\u4e3a200010\uff0c\u8282\u7701\u5185\u5b58\n\tscanf(\"%lld\",&n);\n\tfor(long long i=0; i<n; i++) {\n\t\tscanf(\"%lld\",&a);\n\t\tv.push_back(a);\n\t}\n\tsort(v.begin(),v.end());\n\tscanf(\"%lld\",&m);\n\tfor(long long i=1; i<=m; i++) {\n\t\tcin>>f;\t\t   //\u8bfb\u5165\u5b57\u7b26\u4e32f\n\t\tif(f==\"add\") {    //\u82e5\u5b57\u7b26\u4e32f\u4e3aadd\u5219\u63d2\u5165v\u4e2d\n\t\t\tscanf(\"%lld\",&a);\n\t\t\tn++;\n\t\t\tfor(int i=0; i<n; i++) {\n\t\t\t\tif(v[i]>a) {\n\t\t\t\t\tv.insert(v.begin()+i,a);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {          //\u82e5f\u4e3amid\u8f93\u51fa\u4e2d\u4f4d\u6570\n\t\t\tif(n%2)\n            \tprintf(\"%lld\\n\",v[(long long)ceil(n/2.0)-1]);\n\t\t\telse \n            \tprintf(\"%lld\\n\",min(v[n/2-1],v[n/2]));\n\t\t}\n\t}\n    return 0;\n}\n```\n\n\n#### ~~PS\uff1a\u7eaf\u5411\u91cf\u6a21\u62df\uff0c\u7531\u4e8e\u5b58\u5728\u904d\u5386\u8bbf\u95ee\u6570\u7ec4\u548csort\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u6700\u597d\u60c5\u51b5\u4e3aO\uff08nm\uff09\uff0c\u6700\u5dee\u53ef\u5230O\uff08nmlogn\uff09\uff0c\u4ee3\u7801\u8dd1\u7684\u6bd4\u8f83\u6162\uff0cqwq~~\n\u4f46\u662f\u597d\u7406\u89e3\u5c31\u8db3\u591f\u4e86\uff0c\u5bf9\u5427~~\uff08\u5176\u5b9e\u662f\u6570\u636e\u592a\u6c34\u4e86QWQ)~~",
        "postTime": 1539948410,
        "uid": 107669,
        "name": "TinyKiecoo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u5708\u9898\u89e3\uff0c\u7adf\u7136\u6ca1\u6709\u7528multiset\u8fc7\u7684\u3002multiset\u590d\u6742\u5ea6\u662flogn\u7ea7\u522b\u7684\uff0c\u4e0d\u50cfvector\u90a3\u4e48\u5047\u3002\n\n### \u89e3\u6cd5\n\n\u5efa\u7acb\u4e00\u4e2amultiset\u4e3as\n\n\u5148\u5c06\u6240\u6709\u5143\u7d20\u653e\u5165s\u4e2d\uff0c\u4ee4\u8fed\u4ee3\u5668it\u6307\u5411\u6700\u5f00\u59cb\u7684\u4e2d\u4f4d\u6570\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u5f53\u5143\u7d20\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4e3a\u7b2c\u5143\u7d20\u4e2a\u6570/2+1\u5c0f\u7684\u6570\uff0c\u5076\u6570\u65f6\u4e3a\u7b2c\u5143\u7d20\u4e2a\u6570/2\u5c0f\u7684\u6570\u3002\n\n\u5bf9\u4e8eadd\u64cd\u4f5c\uff0c\u5148\u63d2\u5165s\u4e2d\uff0c\u7136\u540e\u8ba9\u8fd9\u4e2a\u6570\u548c\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5927\u4e14\u63d2\u5165\u540e\u5143\u7d20\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u5c31\u8ba9\u8fed\u4ee3\u5668\u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u56e0\u4e3amultiset\u81ea\u52a8\u6392\u5e8f\uff09\u3002\n\n\u5982\u679c\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5c0f\u4e14\u63d2\u5165\u540e\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u5c31\u6307\u5411\u4e0a\u4e00\u4e2a\u3002\n\n\u5bf9\u4e8emid\u64cd\u4f5c\uff0c\u8f93\u51fa\u8fed\u4ee3\u5668\u6307\u5411\u7684\u503c\u3002\n\n### AC code\n```\n#include<iostream>\n#include<set>\n#include<string>\n#define int long long\nusing namespace std;\nmultiset<int> s;\nsigned main()\n{\n\tint n;\n\tcin>>n;\n\tint a[n+1];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t\ts.insert(a[i]);//\u5148\u5c06\u6240\u6709\u5143\u7d20\u653e\u5165s\u4e2d\n\t}\n\tmultiset<int> ::iterator it;\n\tit=s.begin();\n\tfor(int i=1;i<s.size()/2;i++)\n\tit++;//\u4ee4\u8fed\u4ee3\u5668it\u6307\u5411\u6700\u5f00\u59cb\u7684\u4e2d\u4f4d\u6570\n\tif(n%2==1) it++;\n\tstring str;\n\tint m;\n\tcin>>m;\n\twhile(m--)\n\t{\n\t\tcin>>str;\n\t\tif(str==\"add\")\n\t\t{\n\t\t\tint p;\n\t\t\tcin>>p;\n\t\t\ts.insert(p);\n\t\t\tif(s.size()%2==1)\n\t\t\t{\n\t\t\t\tif(p>*it) it++;//\u5982\u679c\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5927\u4e14\u63d2\u5165\u540e\u5143\u7d20\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u5c31\u8ba9\u8fed\u4ee3\u5668\u6307\u5411\u4e0b\u4e00\u4e2a\n\t\t\t } \n\t\t\t if(s.size()%2==0)\n\t\t\t {\n\t\t\t \tif(p<*it) it--;//\u5982\u679c\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5c0f\u4e14\u63d2\u5165\u540e\u5143\u7d20\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u5c31\u6307\u5411\u4e0a\u4e00\u4e2a\u3002\n\t\t\t }\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<*it<<endl;//\u5bf9\u4e8emid\u64cd\u4f5c\uff0c\u8f93\u51fa\u8fed\u4ee3\u5668\u6307\u5411\u7684\u503c\u3002\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1581422567,
        "uid": 196899,
        "name": "lndjy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\u4eca\u5929\u8003\u8bd5\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u53c8\u88ab\u673a\u623f\u91cc\u7684\u5176\u4ed6\u540c\u5b66\u7ed9\u8650\u4e86\uff08\u54ed\uff09\u5fff\u5fff\u4e0d\u5e73\u7684\u6211\u60f3\u8981\u53d1\u4e2a\u9898\u89e3\u3002\n\n# \u65b9\u6cd5\uff1a\n\u5bf9\u9876\u5806\uff08\u5bf9\u9876\u961f\u5217\uff09\n# \u6b63\u6587\uff1a\n## \u4e2d\u4f4d\u6570\uff1a\n\n\u4e2d\u4f4d\u6570\uff08Median\uff09\u53c8\u79f0\u4e2d\u503c\uff0c\u7edf\u8ba1\u5b66\u4e2d\u7684\u4e13\u6709\u540d\u8bcd\uff0c\u662f\u6309\u987a\u5e8f\u6392\u5217\u7684\u4e00\u7ec4\u6570\u636e\u4e2d\u5c45\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\uff0c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u3001\u79cd\u7fa4\u6216\u6982\u7387\u5206\u5e03\u4e2d\u7684\u4e00\u4e2a\u6570\u503c\uff0c\u5176\u53ef\u5c06\u6570\u503c\u96c6\u5408\u5212\u5206\u4e3a\u76f8\u7b49\u7684\u4e0a\u4e0b\u4e24\u90e8\u5206\u3002\u5bf9\u4e8e\u6709\u9650\u7684\u6570\u96c6\uff0c\u53ef\u4ee5\u901a\u8fc7\u628a\u6240\u6709\u89c2\u5bdf\u503c\u9ad8\u4f4e\u6392\u5e8f\u540e\u627e\u51fa\u6b63\u4e2d\u95f4\u7684\u4e00\u4e2a\u4f5c\u4e3a\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u89c2\u5bdf\u503c\u6709\u5076\u6570\u4e2a\uff0c\u901a\u5e38\u53d6\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6570\u503c\u7684\u5e73\u5747\u6570\u4f5c\u4e3a\u4e2d\u4f4d\u6570\u3002\uff08\u4f46\u662f\u8fd9\u4e00\u9053\u9898\u5728\u6570\u76ee\u4e3a\u5076\u6570\u7684\u60c5\u51b5\u4e0b\u53d6\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u6570\uff09\n## \u5bf9\u9876\u5806\u53ca\u5176\u5b9e\u73b0\n\u8fd9\u4e2a\u73a9\u610f\u662f\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u7b2ck\u5927\u7684\u503c\uff08\u6bd4\u5982\u4e2d\u4f4d\u6570\uff09\u6bcf\u6b21\u64cd\u4f5clogn\u3002\n\n\u672c\u9898\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5927\u6839\u5806\u53d6\u6709\u5e8f\u540e\u7684\u6570\u5217\u7684\u524d\u4e00\u534a\uff0c\u5c0f\u6839\u5806\u53d6\u6709\u5e8f\u540e\u6570\u5217\u7684\u540e\u4e00\u534a\u3002\u5728\u5904\u7406\u7684\u65f6\u5019\u4fdd\u8bc1**\u5927\u6839\u5806\u4e2d\u7684\u6570\u76ee>=\u5c0f\u6839\u5806\u7684\u6570\u76ee**\n```\n\tscanf(\"%d\",&n);\n\tl1=(n+1)>>1,l2=n-l1;\n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&a[i]);\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=l1;++i)\n\t\tQ2.push(a[i]);\n\tfor(int i=l1+1;i<=n;++i)\n\t\tQ1.push(a[i]);\n```\n\u521d\u59cb\u5316\u5b8c\u540e\u6211\u4eec\u600e\u4e48\u5904\u7406\u5462\uff1f\n### \u5927\u6839\u5806\u5904\u7406\n```\nif(x<=Q2.top()){\n\tif(l1==l2)\n\t\tQ2.push(x),++l1;\n\telse{//\u5982\u679c\u5927\u6839\u5806\u6bd4\u5c0f\u6839\u5806\u591a1\n\t\t++l2;\n\t\tQ2.push(x);\n\t\tint k=Q2.top();\n\t\tQ2.pop();\n\t\tQ1.push(k);\n\t}\n}\n```\n\n### \u5c0f\u6839\u5806\u5904\u7406\n```\nelse{\n\tif(l1==l2){//\u5982\u679c\u76f8\u7b49\uff0c\u52a0\u5230\u5c0f\u6839\u5806\u91cc\n\t\t++l1;\n\t\tQ1.push(x);\n\t\tint k=Q1.top();\n\t\tQ1.pop();\n\t\tQ2.push(k);\n\t}\n\telse Q1.push(x),++l2;\n}\n```\n# \u540e\u8bb0\n\u5176\u5b9e\u8fd9\u9053\u84dd\u9898\u662f\u8003\u5bdf\u4eba\u7684\u601d\u8def\u7684\uff0c\u4ee3\u7801\u5b9e\u73b0\u5e76\u4e0d\u96be\uff0c\u5199\u7684\u9898\u89e3\u5927\u5bb6\u5e94\u8be5\u4e5f\u770b\u5f97\u61c2\uff08\u5927\u5bb6\u90fd\u6bd4\u6211\u5f3a\uff09\n# Code\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 200005;\nint a[MAXN],n,x,m;\nchar c[10];\npriority_queue<int,vector<int>,greater<int> > Q1;\npriority_queue<int> Q2;\nint l1,l2;\nint main(){\n\tscanf(\"%d\",&n);\n\tl1=(n+1)>>1,l2=n-l1;\n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&a[i]);\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=l1;++i)\n\t\tQ2.push(a[i]);\n\tfor(int i=l1+1;i<=n;++i)\n\t\tQ1.push(a[i]);\n\tscanf(\"%d\",&m);\n\tfor(register int i=1;i<=m;++i){\n\t\tcin>>c;\n\t\tif(c[0]=='a'){\n\t\t\tcin>>x;\n\t\t\tif(x<=Q2.top()){\n\t\t\t\tif(l1==l2)\n\t\t\t\t\tQ2.push(x),++l1;\n\t\t\t\telse{\n\t\t\t\t\t++l2;\n\t\t\t\t\tQ2.push(x);\n\t\t\t\t\tint k=Q2.top();\n\t\t\t\t\tQ2.pop();\n\t\t\t\t\tQ1.push(k);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(l1==l2){\n\t\t\t\t\t++l1;\n\t\t\t\t\tQ1.push(x);\n\t\t\t\t\tint k=Q1.top();\n\t\t\t\t\tQ1.pop();\n\t\t\t\t\tQ2.push(k);\n\t\t\t\t}\n\t\t\t\telse Q1.push(x),++l2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\",Q2.top());\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568535980,
        "uid": 154334,
        "name": "Garrison",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5728\u5b66splay,\u4e00\u770b\u8981\u6c42\u4e2d\u4f4d\u6570\uff0c\u5c31\u4e0a\u4e00\u4e2a\u5355\u70b9\u4fee\u6539splay\u5427\n\u987a\u4fbf\u5b89\u5229\u4e00\u53d1splay\u5199\u7684**~~\u6781\u597d~~**\uff08\u8fd8\u884c\uff09\u7684\u535a\u5ba2\nhttps://blog.csdn.net/zj_js_zxb/article/details/80258824\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ninline int read(){\n\tint f=1,x=0;\n\tchar c=getchar();\n\twhile (c<'0'||c>'9'){if (c=='-') f=-1;c=getchar();}\n\twhile (c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn f*x;\n}\nconst  int maxn=1e5+5;\nint n,m,o,p,root,tot;\nint s[maxn][2],f[maxn],v[maxn],w[maxn],c[maxn];\nchar ch[1006];\ninline void up(int x){\n\tw[x]=w[s[x][0]]+w[s[x][1]]+c[x];\n}\ninline void rotate(int x){\n\tint y=f[x],z=f[y],k=s[y][1]==x;\n\ts[z][s[z][1]==y]=x;\n\tf[x]=z;\n\ts[y][k]=s[x][k^1];\n\tf[s[x][k^1]]=y;\n\ts[x][k^1]=y;\n\tf[y]=x;\n\tup(y);up(x);\n}\nvoid splay(int x,int g){\n\twhile (f[x]!=g){\n\t\tint y=f[x],z=f[y];\n\t\tif (z!=g)\n\t\t(s[z][0]==y)^(s[y][0]==x)?rotate(x):rotate(y);\n\t\trotate(x); \n\t}\n\tif (g==0) root=x;\n}\ninline int search(int k){\n\tint u=root;\n\twhile (1){\n\tint q=s[u][0];\n\tif (w[q]+c[u]<k)\n\tk-=w[q]+c[u],u=s[u][1];\n\telse if (w[q]>=k) u=q;\n\telse return v[u];\t\n\t}\n}\ninline void insert(int x){\n\tint u=root,ff=0;\n\twhile (u&&v[u]!=x) ff=u,u=s[u][x>v[u]];\n\tif (u) c[u]++;\n\telse {\n\t\tu=++tot;\n\t\tif (ff) s[ff][x>v[ff]]=u;\n\t\ts[u][0]=s[u][1]=0;\n\t\tf[tot]=ff;\n\t\tv[tot]=x;\n\t\tc[tot]=1;\n\t\tw[tot]=1;\n\t}\n\tsplay(u,0);\n}\nint main(){\n\tn=read();\n\ttot=0;\n\tint r,cnt=0;\n\tinsert(-2147483647);\n\tinsert(+2147483647);\n   for (int i=1;i<=n;i++) insert(read()),cnt++;\n   n=read();\n   for (int i=1;i<=n;i++){\n   \t cin>>ch;\n   \t if (ch[0]=='a')  cin>>r,insert(r),cnt++;\n   \t else {\n   \t \t\n   \t \tint u=cnt/2+1;\n   \t \tif (cnt%2==0) printf(\"%d\\n\",min(search(u),search(u+1)));\n   \t \telse printf(\"%d\\n\",search(u+1));\n\t\t}\n   }\n\treturn  0;\n}\n```",
        "postTime": 1526384963,
        "uid": 17171,
        "name": "Fatal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5230\u5e76\u6ca1\u6709\u592a\u591a\u5199**\u6743\u503c\u7ebf\u6bb5\u6811**\u7684\n\n~~\u5c31\u6765\u6c34\u4e00\u53d1\u9898\u89e3~~\n\n\u5148\u628a\u6240\u6709\u6570\u548c\u64cd\u4f5c\u5168\u90fd\u8bfb\u8fdb\u6765\n\n\u7136\u540e\u628a\u539f\u6570\u7ec4\u548c\u8981\u52a0\u5165\u7684\u63c9\u5230\u4e00\u5757\u518d\u79bb\u6563\u5316\u4e00\u4e0b\n\n\u7136\u540e\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u6ce8\u610f\u8fd9\u9898\u5982\u679c\u533a\u95f4\u957f\u5ea6\u4e3a\u5076\u6570\u90a3\u4e48\u4e2d\u4f4d\u6570\u662f\u4e2d\u95f4\u90a3\u4e24\u4e2a\u6570\u7684\u5de6\u8fb9\u7684\u90a3\u4e2a$\\texttt{qwq}$\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u9614\u4ee5\u770b\u4ee3\u7801$\\texttt{qwq}$\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define QwQ puts(\"qwq\");\nusing std::cout;\nusing std::string;\n\ninline int read() {\n    int op = 1, a = 0; char c = getchar();\n    for (; c < '0' || c > '9'; c = getchar()) if (c == '-') op = -1;\n    for (; c >= '0' && c <= '9'; c = getchar()) a = a * 10 + c - '0';\n    return op * a;\n}\n\nconst int maxn = 110005;\nconst int maxm = 10005;\nint n, m, cnt, len;//cnt\u4e3a\u539f\u6570\u7ec4\u548c\u52a0\u7684\u6570\u7684\u603b\u4e2a\u6570\nint a[maxn], b[maxn];\nstruct ope {string op; int w;} ope[maxm];//ope\u5b58\u64cd\u4f5c\n\n#define lson (u<<1)\n#define rson (u<<1|1)\nstruct Seg {\n    int l, r, w;\n    Seg operator + (const Seg& rhs) const {\n        Seg u; u.l = l, u.r = rhs.r;\n        u.w = w + rhs.w; return u;\n    }\n} tr[maxn << 2];//\u6743\u503c\u7ebf\u6bb5\u6811\nvoid build(int u, int l, int r) {\n    if (l == r) {tr[u].l = tr[u].r = l; return;}\n    int mid = l + r >> 1;\n    build(lson, l, mid), build(rson, mid + 1, r);\n    tr[u] = tr[lson] + tr[rson];\n}\nint query(int u, int k) {\n    if (tr[u].l == tr[u].r) return tr[u].l;\n    int mid = tr[u].l + tr[u].r >> 1;\n    if (tr[lson].w >= k) return query(lson, k);\n    else return query(rson, k - tr[lson].w);\n}\nvoid modify(int u, int k, int w) {\n    if (tr[u].l == tr[u].r) {tr[u].w += w; return;}\n    int mid = tr[u].l + tr[u].r >> 1;\n    if (k <= mid) modify(lson, k, w);\n    else modify(rson, k, w);\n    tr[u] = tr[lson] + tr[rson];\n}\n\nint main() {\n    n = read();\n    for (int i = 1; i <= n; i++) a[++cnt] = read(), b[cnt] = a[cnt];\n    m = read();\n    for (int i = 1; i <= m; i++) {\n        std::cin >> ope[i].op;\n        if (ope[i].op[0] == 'a') {\n            ope[i].w = read();\n            a[++cnt] = ope[i].w;\n            b[cnt] = a[cnt];\n        }\n    }\n    std::sort(b + 1, b + cnt + 1);\n    len = std::unique(b + 1, b + cnt + 1) - b - 1;//len\u4e3a\u53bb\u91cd\u4e4b\u540e\u7684\u957f\u5ea6\n    build(1, 1, len);//\u8bb0\u5f97\u5efa\u6811qwq\n    for (int i = 1; i <= n; i++) {\n        int pos = std::lower_bound(b + 1, b + len + 1, a[i]) - b;//\u79bb\u6563\u5316\u4e4b\u540e\u5bf9\u5e94\u7684\u6570\n        modify(1, pos, 1);\n    }\n    int tmp = 0;\n    for (int i = 1; i <= m; i++) {\n        if (ope[i].op[0] == 'a') {\n            tmp++;//\u5728\u539f\u6570\u7ec4\u7684\u57fa\u7840\u4e0a\u591a\u52a0\u4e86\u51e0\u4e2a\u6570\n            int pos = std::lower_bound(b + 1, b + len + 1, ope[i].w) - b;\n            modify(1, pos, 1);//\u7ef4\u62a4\n        }\n        else {\n            //\u7279\u5224\u4e00\u4e0b\u5947\u5076\u6570\n            if ((n + tmp) & 1) std::cout << b[query(1, (n + tmp >> 1) + 1)] << '\\n';\n            else std::cout << b[query(1, (n + tmp >> 1))] << '\\n';\n        }\n    }\n    return 0;\n}\n```\n\n_thank you for reading_",
        "postTime": 1569642629,
        "uid": 162865,
        "name": "NxtEcho",
        "ccfLevel": 0,
        "title": "P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/9974154.html)\n\n### \u5e73\u8861\u6811\u677f\u9898\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3871)\n\n### \u8fd9\u9053\u9898\u8981\u7528Splay\uff0c\u6211\u535a\u5ba2\u91cc\u6709[\u5bf9Splay\u7684\u8be6\u7ec6\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9957906.html)\n\n\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u628a\u6570\u63d2\u5165\u5e73\u8861\u6811\u4e2d\n\n\u5e76\u4e14\u8981\u8bb0\u5f55\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u6570\n\n\u6bcf\u6b21\u67e5\u8be2\u5c31\u67e5\u8be2\u5e73\u8861\u6811\u4e2d\u7b2c\uff08\u603b\u6570-1\uff09/2+1\u4e2a\u6570\n\n\u5341\u5206\u66b4\u529b\n\n```cpp\n#include <bits/stdc++.h>\n#define N 110005\n#define root tree[0].ch[1]\nusing namespace std;\ninline int read()\n{\n\tregister int x=0,f=1;register char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\ninline void write(register int x)\n{\n\tif(!x)putchar('0');if(x<0)x=-x,putchar('-');\n\tstatic int sta[36];int tot=0;\n\twhile(x)sta[tot++]=x%10,x/=10;\n\twhile(tot)putchar(sta[--tot]+48);\t\n}\nstruct splay{\n\tint v,fa,ch[2],rec,sum;\n}tree[N];\nint tot=0;\ninline bool findd(register int x)\n{\n\treturn x==tree[tree[x].fa].ch[0]?0:1;\n}\ninline void connect(register int x,register int fa,register int son)\n{\n\ttree[x].fa=fa;\n\ttree[fa].ch[son]=x;\n}\ninline void update(register int x)\n{\n\ttree[x].sum=tree[tree[x].ch[0]].sum+tree[tree[x].ch[1]].sum+tree[x].rec;\n}\ninline void rotate(register int x)\n{\n\tint Y=tree[x].fa;\n\tint R=tree[Y].fa;\n\tint Yson=findd(x);\n\tint Rson=findd(Y);\n\tint B=tree[x].ch[Yson^1];\n\tconnect(B,Y,Yson);\n\tconnect(Y,x,Yson^1);\n\tconnect(x,R,Rson);\n\tupdate(Y),update(x);\n}\ninline void splay(register int x,register int to)\n{\n\tto=tree[to].fa;\n\twhile(tree[x].fa!=to)\n\t{\n\t\tint y=tree[x].fa;\n\t\tif(tree[y].fa==to)\n\t\t\trotate(x);\n\t\telse if(findd(x)==findd(y))\n\t\t\trotate(y),rotate(x);\n\t\telse\n\t\t\trotate(x),rotate(x);\n\t}\n}\ninline int newpoint(register int v,register int fa)\n{\n    tree[++tot].v=v;\n    tree[tot].fa=fa;\n    tree[tot].sum=tree[tot].rec=1;\n    return tot;\n}\ninline void Insert(register int x)\n{\n\tint now=root;\n    if(root==0)\n    {\n        newpoint(x,0);\n        root=tot;\n    }\n    else\n    {\n        while(19260817)\n        {\n            ++tree[now].sum;\n            if(x==tree[now].v)\n            {\n                ++tree[now].rec;\n                splay(now,root);\n                return;\n            }\n            int nxt=x<tree[now].v?0:1;\n            if(!tree[now].ch[nxt])\n            {\n                int p=newpoint(x,now);\n                tree[now].ch[nxt]=p;\n                splay(p,root);\n                return;\n            }\n            now=tree[now].ch[nxt];\n        }\n    }\n}\ninline int arank(register int x)\n{\n    int now=root;\n    while(19260817)\n    {\n        int used=tree[now].sum-tree[tree[now].ch[1]].sum;\n        if(x>tree[tree[now].ch[0]].sum&&x<=used)\n        {\n            splay(now,root);\n            return tree[now].v;\n        }\n        if(x<used)\n            now=tree[now].ch[0];\n        else\n            x-=used,now=tree[now].ch[1];\n    }\n}\nint main()\n{\n\tint n=read();\n\tint sum=0;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tint x=read();\n\t\tInsert(x);\n\t\t++sum;\n\t}\n\tint m=read();\n\twhile(m--)\n\t{\n\t\tchar ch=getchar();\n\t\twhile(ch!='a'&&ch!='m')\n\t\t\tch=getchar();\n\t\tif(ch=='a')\n\t\t{\n\t\t\tint x=read();\n\t\t\tInsert(x);\n\t\t\t++sum;\n\t\t}\n\t\telse if(ch=='m')\n\t\t{\n\t\t\twrite(arank((sum-1)/2+1));\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n } \n ```",
        "postTime": 1542439850,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1 01-Trie \u7684\u9898\u89e3\u3002\n\n> 01-Trie \u6811\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u68f5\u503c\u57df\u5f88\u5927\u7684\u503c\u57df\u7ebf\u6bb5\u6811\u3002 \u2014\u2014\u67d0\u5927\u4f6c\u8bed\n\n01-Trie \u672c\u8eab\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f46\u662f\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u7531\u4e8e\u6df1\u5ea6\u786e\u5b9a\u4ece\u800c\u5177\u6709\u4e86\u4e0d\u4f1a\u88ab\u5361\u7684\u6027\u8d28\u300201-Trie \u6811\u4e2d\u5b58\u50a8\u7684\u5404\u4e2a\u8282\u70b9\u5747\u4e3a\u4e00\u4e2a\u6570\u7684\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u53ea\u6709\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u624d\u80fd\u627e\u5230\u8fd9\u4e2a\u6570\u3002\n\n01-Trie \u7684\u5b9a\u4e49\u4e0e Trie \u6811\u4e00\u81f4\uff0c\u540c\u6837\u662f\u6709\u82e5\u5e72\u4e2a\u6307\u9488\u6307\u5411\u540e\u7ee7\u8282\u70b9\uff08\u5373\u540e\u7f00\uff09\u548c\u4e00\u4e9b\u9644\u52a0\u57df\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002\u4f5c\u4e3a BST \u4f7f\u7528\u65f6\u9644\u52a0\u57df\u81f3\u5c11\u6709\u4e00\u4e2a `size` \u8868\u793a\u5f53\u524d\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n\u6211\u4eec\u53d1\u73b0\u628a\u6bcf\u4e00\u4e2a\u6570\u63d2\u5165\u5230\u8fd9\u68f5 01-Trie \u6811\u91cc\u9762\uff0c\u7136\u540e\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c DFS\uff0c\u628a DFS \u5230\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6240\u4ee3\u8868\u7684\u6bcf\u4e00\u4e2a\u6570\u8fd8\u539f\u56de\u5e8f\u5217\uff0c\u5e8f\u5217\u5c31\u53d8\u6210\u6709\u5e8f\u7684\u4e86\uff08\u592a\u663e\u7136\u4e86\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u76f8\u5f53\u4e8e\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u8fdb\u884c\u63d2\u5165\u548c\u52a8\u6001\u6392\u5e8f\u4e86\u3002\u90a3\u4e48\u67e5\u8be2\u4e2d\u4f4d\u6570\u4e5f\u53d8\u6210\u4e86\u4e00\u4ef6\u5341\u5206\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u67e5\u8be2\u4e00\u4e2a\u7b2c k \u5927\u7684\u95ee\u9898\u3002\u53ea\u9700\u8981\u6309\u7167 `size` \u7684\u6307\u5f15\u5728\u8fd9\u68f5 01-Trie \u6811\u91cc\u9762\u884c\u8d70\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\u7531\u4e8e\u9898\u76ee\u4e2d\u8f93\u5165\u6709\u8d1f\u6570\uff0c\u4e3a\u4e86\u907f\u514d\u8d1f\u6570\u6211\u4eec\u76f4\u63a5\u7ed9\u63d2\u5165\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u52a0\u4e0a $10^9$ \u4f7f\u5b83\u4eec\u90fd\u53d8\u6210\u6b63\u6570\uff0c\u67e5\u8be2\u51fa\u7ed3\u679c\u540e\u518d\u7edf\u4e00\u51cf\u6389 $10^9$ \u5c31\u662f\u771f\u6b63\u7684\u7b54\u6848\u4e86\u3002\u7531\u4e8e\u5b9e\u9645\u63d2\u5165\u7684\u6240\u6709\u6570\u90fd\u5c0f\u4e8e $2\\times10^9$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6bcf\u4e2a\u6570\u7684\u4f4e 31 \u4f4d\u4e8c\u8fdb\u5236\u4f4d\u5373\u53ef\uff08\u5982\u679c\u6570\u636e\u7684\u503c\u57df\u6ca1\u6709\u8fd9\u4e48\u5927\u7684\u8bdd\u662f\u53ef\u4ee5\u4f18\u5316\u4e00\u4e9b\u5185\u5b58\u5360\u7528\u7684\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u4e00\u4e2a\u4e25\u683c\u7d27\u786e\u7684\u4e0a\u754c\uff0c\u5373 $O(31(n+m))$\u3002\n\n01-Trie \u76f8\u8f83\u4e8e\u5176\u5b83\u5e73\u8861\u6811\u7684\u4f18\u52bf\u5728\u4e8e\u4ee3\u7801\u77ed\u5c0f\uff0c\u5bb9\u6613\u4e66\u5199\uff0c\u4e14\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\uff0c\u4e0d\u4f1a\u88ab\u5361\u3002\u7f3a\u70b9\u662f\u5185\u5b58\u5360\u7528\u8f83\u5927\uff0864 \u4f4d\u6307\u9488\u5185\u5b58\u5360\u7528\u4f1a\u66f4\u5927\uff0c\u4f46\u6700\u591a\u4e0d\u4f1a\u8d85\u8fc7\u53f6\u5b50\u8282\u70b9\u7684\u5185\u5b58\u5360\u7528\u7684\u603b\u548c\uff0c\u5bf9\u4e8e\u666e\u901a\u7684\u975e\u6811\u5957\u6811\u7684\u9898\u76ee\u6765\u8bf4\u5e94\u8be5\u4e0d\u662f\u95ee\u9898\uff09\u3002\n\n~~\u6211\u4f9d\u7136\u7231\u7740 C++ \u7684\u6307\u9488\uff01~~\n\n\u5f00\u4e00\u4e2a `nil` \u6307\u9488\u4f5c\u4e3a\u7a7a\u6307\u9488\u4ee3\u66ff\u7cfb\u7edf\u9ed8\u8ba4\u7684 `NULL` \u5c31\u80fd\u9632\u6b62\u7edd\u5927\u591a\u6570\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u9020\u6210\u7684 RE\u3002\u5199\u4e2a\u6700\u7b80\u5355\u7684\u5185\u5b58\u6c60\u4f1a\u6bd4\u7cfb\u7edf\u8c03\u7528\u52a8\u6001\u7533\u8bf7\u5185\u5b58\u5feb\u4e0d\u5c11\u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm> \nusing namespace std;\nconst int maxn = 120000 * 31;\nconst int fix = 1e9, full = 31;\nstruct node {\n  node *ch[2]; int size;\n} *nil, *rt, mem[maxn]; int cnt;\ninline void newnode(node *&p) {\n  mem[cnt].ch[0] = mem[cnt].ch[1] = nil;\n  p = mem + cnt++;\n}\ninline void Insert(node *rt, int x) {\n  x += fix;\n  for(register int i = full; ~i; --i) {\n    bool op = x >> i & 1;\n    if(rt->ch[op] == nil) newnode(rt->ch[op]);\n    rt = rt->ch[op];\n    rt->size += 1;\n  }\n}\ninline int kth(node *rt, int k) {\n  int res = 0;\n  for(register int i = full; ~i; --i) {\n    if(k > rt->ch[0]->size)\n      k -= rt->ch[0]->size, res |= 1 << i, rt = rt->ch[1];\n    else rt = rt->ch[0];\n  }\n  return res - fix;\n}\nint size;\nint main() {\n  int n, x;\n  scanf(\"%d\", &n);\n  size = n;\n  newnode(nil), nil->ch[0] = nil->ch[1] = nil; newnode(rt);\n  for(int i = 1; i <= n; ++i) scanf(\"%d\", &x), Insert(rt, x);\n  scanf(\"%d\", &n);\n  char s[15];\n  while(n--) {\n    scanf(\"%s\", s);\n    if(s[0] == 'a') scanf(\"%d\", &x), Insert(rt, x), ++size;\n    else printf(\"%d\\n\", size & 1 ? kth(rt, size / 2 + 1) : \n                               min(kth(rt, size / 2), kth(rt, size / 2 + 1)));\n  }\n  return 0;\n}\n```",
        "postTime": 1539596110,
        "uid": 35485,
        "name": "Hatsune_Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u524d\u94fa\n\n\u867d\u7136\u521a\u5b66\u666e\u901a\u5e73\u8861\u6811\uff0c\u4f46\u5237\u4e86\u8fd9\u4e48\u591a\u9898\u540e\uff0c\u53d1\u73b0\u7528\u5e73\u8861\u6811\u89e3\u7684\u9898\u76ee\u65b9\u6cd5\u5c31\u4e00\u4e2a\u5b57\uff1a**\u5957**\uff01\u5982\u4f55\u5957\u5462\uff1f\u6211\u603b\u7ed3\u4e86\u4e9b\u6b65\u9aa4\uff1a\n\n1\u3001**\u5206\u6790\uff1a**\u770b\u6e05\u9898\u76ee\u627e\u5230\u9898\u76ee\u6240\u8981\u6c42\u7684\u7684\u5e73\u8861\u6811\u7684\u54ea\u4e2a\u64cd\u4f5c\u3002\n\n2\u3001**\u4fee\u6539\uff1a**\u5728\u6a21\u677f\u4e0a\u52a0\u4ee5\u4fee\u6539\u3002\n\n\u4eca\u5929\u6211\u5c31\u62ff\u8fd9\u9053\u9898\u6765\u5b9e\u5730\u6f14\u7ec3\u4e00\u4e0b\u3002\n\nPS\uff1a\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a\u666e\u901a\u5e73\u8861\u6811\uff0c\u8bf7\u51fa\u95e8\u5de6\u8f6c [luogu P3369](https://www.luogu.com.cn/problem/P3369)\u3002\n\n---\n\n## \u5206\u6790\n\n\u9996\u5148\uff0c\u9898\u76ee\u8bf4\u6709 add \u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u9700\u8981\u63d2\u5165\u64cd\u4f5c\u3002\u5728\u770b\u5230 mid \u7684\u4ece\u5c0f\u5230\u5927\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u4e2d\u4f4d\u6570\uff0c\u548c\u4e3a\u4e2d\u4f4d\u6570\uff1f\n\n>\u4e2d\u4f4d\u6570\u662f\u6307\u5c06\u4e00\u4e2a\u5e8f\u5217\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u3002\uff08\u82e5\u5e8f\u5217\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u5219\u6307\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\uff09\n\n\u8bf4\u767d\u4e86\u5728\u4ee3\u7801\u91cc\u5c31\u662f**\u7b2c \uff08\u5e8f\u5217\u957f\u5ea6+1\uff09/2 \u4e2a\u6570** \u3002\u90a3\u6211\u4eec\u5c31\u9700\u8981\u6c42\u51fa\u6392\u540d\u4e3a\u7b2c \uff08\u5e8f\u5217\u957f\u5ea6+1\uff09/2 \u4e2a\u6570\u8f93\u51fa\u5373\u53ef\u3002\n\n## \u4fee\u6539\n\n\u5bf9\u4e8e\u677f\u5b50\u6765\u8bf4\u5e76\u6ca1\u6709\u592a\u591a\u7684\u4fee\u6539\u53ea\u9700\u4fdd\u7559*\u63d2\u5165\u3001\u6392\u5e8f\u3001\u67e5\u8be2\u7b2c x \u5927\u7684\u6570*\u5373\u53ef\u3002\n\n## \u603b\u7ed3\n\n\u672c\u9898\u5982\u679c\u7528\u5e73\u8861\u6811\u89e3\u90a3\u91cd\u70b9\u4e5f\u5c31\u53ea\u6709\u5c06\u4e2d\u4f4d\u6570\u8fd9\u4e2a\u6982\u5ff5\u8f6c\u5316\u6210\u7b2c ```(n+1)/2``` \u4e2a\u5927\u7684\u6570\u3002\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<stdio.h>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\n\nconst int N=1e5+86+3e4;\n\nint n,m,tot,root;//tot\u5373\u4e3a\u5f53\u524d\u5e8f\u5217\u957f\u5ea6\n\nstruct Treap\n{\n\tTreap()\n\t{\n\t\tpri=rand()*rand()%20061124;\n\t\tl=r=0;\n\t}//\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\n\tint l;\n\tint r;\n\tint pri;\n\tint v;\n\tint siz;\n}t[N];\n\nvoid up(int x)//\u7ef4\u62a4\u8282\u70b9\u4e2a\u6570\n{\n\tt[x].siz=t[t[x].l].siz+t[t[x].r].siz+1;\n}\n\nvoid right_rorate(int &x)//\u53f3\u65cb\n{\n\tint tmp=t[x].l;\n\tt[x].l=t[tmp].r;\n\tt[tmp].r=x;\n\tt[tmp].siz=t[x].siz;\n\tup(x);\n\tx=tmp;\n } \n\nvoid left_rorate(int &x)//\u5de6\u65cb\n{\n\tint tmp=t[x].r;\n\tt[x].r=t[tmp].l;\n\tt[tmp].l=x;\n\tt[tmp].siz=t[x].siz;\n\tup(x);\n\tx=tmp;\n}\n\nint add(int v)//\u6dfb\u52a0\u64cd\u4f5c\n{\n\tt[++tot].v=v;\n\tt[tot].siz=1;\n\treturn tot;\n}\n\nvoid insert(int &x,int v)//\u63d2\u5165\u64cd\u4f5c\n{\n\tif(x==0)\n\t{\n\t\tx=add(v);\n\t\treturn;\n\t}\n\tt[x].siz++;\n\tif(v>=t[x].v)\n\t\tinsert(t[x].r,v);\n\telse\n\t\tinsert(t[x].l,v);\n\tif(t[x].l&&t[x].pri>t[t[x].l].pri)\n\t\tright_rorate(x);\n\tif(t[x].r&&t[x].pri>t[t[x].r].pri)\n\t\tleft_rorate(x);\n\tup(x);\t\n}\n\nint find(int x,int rnk)//\u67e5\u8be2\u64cd\u4f5c\n{\n\tif(rnk==t[t[x].r].siz+1)\n\t\treturn t[x].v;\n\tif(rnk>t[t[x].r].siz+1)\n\t\treturn find(t[x].l,rnk-t[t[x].r].siz-1);\n\treturn find(t[x].r,rnk);\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint a;\n\tchar s[3];\n\twhile(n--)\n\t{\n\t\tscanf(\"%d\",&a);\n\t\tinsert(root,a);\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='a')\n\t\t{\n\t\t\tscanf(\"%d\",&a);\n\t\t\tinsert(root,a);\n\t\t}\n\t\telse if(s[0]=='m')\n\t\t\tprintf(\"%d\\n\",find(root,(tot+1)/2));//\u8f6c\u5316\u4e2d\u4f4d\u6570\u6982\u5ff5\n\t}\n\treturn 0;\n}\n```\n\n\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\uff01",
        "postTime": 1583486017,
        "uid": 218037,
        "name": "\u9e3f\u6d771001",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5b8c\u9898\u89e3\u8c8c\u4f3c\u6ca1\u6709\u624b\u5199\u5806\u7684\uff0c\u672c\u849f\u84bb\u53d1\u4e00\u7bc7\u624b\u5199\u5806\u7684\u4ee3\u7801\u5427\u3002~~\u8c8c\u4f3c\u624b\u5199\u5806\u8dd1\u7684\u66f4\u5feb~~\n\n### \u8fd9\u9898\u5148\u5b9a\u4e49\u4e00\u4e2a\u5927\u6839\u5806\uff08maxn\uff09\u7ef4\u62a4mid\uff08n\u4e3a\u5947\u6570mid+1\uff09\u7684\u5143\u7d20\u3002\u518d\u5b9a\u4e49\u4e00\u4e2a\u5c0f\u6839\u5806\uff08minn\uff09\u7ef4\u62a4mid\uff08n\u4e3a\u5947\u6570mid+1\uff09\u5230n\u7684\u5143\u7d20\u3002\u7136\u540e\u5bf9\u4e8e\u63d2\u5165\u5143\u7d20\u7684\u60c5\u51b5\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002\n\n\u5f53add x\u65f6\n\n#### \u4e00.n \u662f\u5947\u6570\n\n 1.\u4ece\u5927\u6839\u5806\u4e2d\u53d6\u51fa\u5143\u7d20y\u5e76\u5f39\u51fa\u3002\n \n 2.\u5927\u6839\u5806\u4e2d\u63d2\u5165\u5143\u7d20min(x,y)\u3002\n \n 3.\u5c0f\u6839\u5806\u4e2d\u63d2\u5165\u5143\u7d20max(x,y)\u3002\n\n#### \u4e8c.n \u662f\u5076\u6570\n 1.\u4ece\u5c0f\u6839\u5806\u4e2d\u53d6\u51fa\u5143\u7d20y\u5e76\u5f39\u51fa\u3002\n \n 2.\u5927\u6839\u5806\u4e2d\u63d2\u5165\u5143\u7d20min(x,y)\u3002\n \n 3.\u5c0f\u6839\u5806\u4e2d\u63d2\u5165\u5143\u7d20max(x,y)\u3002\n\n\u5f53\u8be2\u95ee\u65f6\u8f93\u51fa\u5927\u6839\u5806\u4e2d\u7684\u5806\u9876\u5143\u7d20\u5373\u53ef\u3002\n\naddmax\uff08\u5927\u6839\u5806\u4e2d\u5143\u7d20\u4e2a\u6570\uff09 addmin\uff08\u5c0f\u6839\u5806\u4e2d\u5143\u7d20\u4e2a\u6570\uff09 maxn\uff08\u5927\u6839\u5806\uff09 minn\uff08\u5c0f\u6839\u5806\uff09\n\n### \u5806\u7684\u64cd\u4f5c(\u4ee5\u5927\u6839\u5806\u4e3a\u4f8b)\n#### 1.\u5806\u7684\u5143\u7d20\u4e0b\u8c03\n```cpp\nvoid shiftdownmax(int x){\n    int t,flag=0;\n    while(x*2<=addmax&&flag==0){\n        if(maxn[x]<maxn[x*2])t=x*2;\n        else t=x;\n        if(x*2+1<=addmax){\n            if(maxn[t]<maxn[x*2+1])t=x*2+1;\n        }\n        if(t!=x){\n            swap(maxn[t],maxn[x]);\n            x=t;\n        }else flag=1;\n    }\n}\n```\n#### 2.\u5806\u7684\u5143\u7d20\u4e0a\u8c03\n```cpp\nvoid shiftdownmax(int x){\n    int t,flag=0;\n    while(x*2<=addmax&&flag==0){\n        if(maxn[x]<maxn[x*2])t=x*2;\n        else t=x;\n        if(x*2+1<=addmax){\n            if(maxn[t]<maxn[x*2+1])t=x*2+1;\n        }\n        if(t!=x){\n            swap(maxn[t],maxn[x]);\n            x=t;\n        }else flag=1;\n    }\n}\n```\n#### 3.\u5efa\u5806\n\u7531\u4e8e\u5806\u7684\u6027\u8d28\uff0c\u53ea\u8981\u8c03\u6574\u4e00\u534a\u7684\u5143\u7d20\u5373\u53ef\u3002\n```cpp\nfor(int i=1;i<=tmp;++i){\n\taddmax++;\n\tmaxn[addmax]=a[i];\n}\nfor(int i=addmax/2;i>=1;--i){\n\tshiftdownmax(i);\n}\n```\n#### 4.\u53d6\u51fa\u5143\u7d20\n\n\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5143\u7d20\u4e2a\u6570\u51cf1\uff0c\u5bf9\u5806\u9876\u8fdb\u884c\u4e0b\u8c03\u64cd\u4f5c\u3002\n```cpp\nint y=maxn[1];\nmaxn[1]=maxn[addmax--];\nshiftdownmax(1);\n```\n\n#### 5.\u52a0\u5165\u5143\u7d20\n\u5728\u5806\u5c3e\u52a0\u5165\u65b0\u5143\u7d20\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u4e0a\u8c03\u64cd\u4f5c\n```cpp\nmaxn[++addmax]=min(x,y);\nshiftupmax(addmax);\n```\n\n### ac\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,addmax,addmin,a[100010],maxn[60010],minn[60010];\nchar str[5];\nvoid shiftdownmax(int x){//\u5927\u6839\u5806\u5411\u4e0b\u8c03\u6574\n    int t,flag=0;\n    while(x*2<=addmax&&flag==0){\n        if(maxn[x]<maxn[x*2])t=x*2;\n        else t=x;\n        if(x*2+1<=addmax){\n            if(maxn[t]<maxn[x*2+1])t=x*2+1;\n        }\n        if(t!=x){\n            swap(maxn[t],maxn[x]);\n            x=t;\n        }else flag=1;\n    }\n}\nvoid shiftdownmin(int x){//\u5c0f\u6839\u5806\u5411\u4e0b\u8c03\u6574\n    int t,flag=0;\n    while(x*2<=addmin&&flag==0){\n        if(minn[x]>minn[x*2])t=x*2;\n        else t=x;\n        if(x*2+1<=addmin){\n            if(minn[t]>minn[x*2+1])t=x*2+1;\n        }\n        if(t!=x){\n            swap(minn[t],minn[x]);\n            x=t;\n        }else flag=1;\n    }\n}\nvoid shiftupmax(int x) {//\u5927\u6839\u5806\u5411\u4e0a\u8c03\u6574\n    int flag=0; \n    if(x==1) return; \n    while(x!=1&&flag==0){\n        if(maxn[x]>maxn[x/2]) swap(maxn[x],maxn[x/2]);\n        else flag=1;\n        x=x/2;\n    }\n}\nvoid shiftupmin(int x) {//\u5c0f\u6839\u5806\u5411\u4e0a\u8c03\u6574\n    int flag=0; \n    if(x==1) return; \n    while(x!=1 && flag==0){\n        if(minn[x]<minn[x/2]) swap(minn[x],minn[x/2]);\n        else flag=1;\n        x=x/2;\n    }\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\taddmax=0;\n\taddmin=0;\n\tsort(a+1,a+1+n);\n\tif(n==1) maxn[++addmax]=a[1];//\u8003\u8651\u7279\u6b8a\u60c5\u51b5\n\telse{\t\n\t\tint tmp=n/2;\n\t\tif(n%2) tmp++;\n\t\tfor(int i=1;i<=tmp;++i){\n\t\t\taddmax++;\n\t\t\tmaxn[addmax]=a[i];\n\t\t}\n\t\tfor(int i=addmax/2;i>=1;--i){\n\t\t\tshiftdownmax(i);\n\t\t}\n\t\tfor(int i=tmp+1;i<=n;++i){\n\t\t\taddmin++;\n\t\t\tminn[addmin]=a[i];\n\t\t}\n\t\tfor(int i=addmin/2;i>=1;--i){\n\t\t\tshiftdownmin(i);\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tscanf(\"%s\",str);\n\t\tif(str[0]=='m'){\n\t\t\tprintf(\"%d\\n\",maxn[1]);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(n%2){\n\t\t\t\tint y=maxn[1];\n\t\t\t\tmaxn[1]=maxn[addmax--];\n\t\t\t\tshiftdownmax(1);\n\t\t\t\tmaxn[++addmax]=min(x,y);\n\t\t\t\tshiftupmax(addmax);\n\t\t\t\tminn[++addmin]=max(x,y);\n\t\t\t\tshiftupmin(addmin);\n\t\t\t\tn++;//\u8bb0\u5f97\u66f4\u65b0n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint y=minn[1];\n\t\t\t\tminn[1]=minn[addmin--];\n\t\t\t\tshiftdownmin(1);\n\t\t\t\tminn[++addmin]=max(x,y);\n\t\t\t\tshiftupmin(addmin);\n\t\t\t\tmaxn[++addmax]=min(x,y);\n\t\t\t\tshiftupmax(addmax);\n\t\t\t\tn++;\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1563356474,
        "uid": 141637,
        "name": "End_donkey",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "# P3871 [TJOI2010]\u4e2d\u4f4d\u6570\n\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problemnew/show/P3871)\n\n[Github\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n\n## \u601d\u8def\n\n\u8fd8\u6ca1\u6709\u7528SBT\u6811\u7684\u9898\u89e3\uff01\uff01\uff01\n\nSBT\u6811\u4f7f\u7528\u7ed3\u70b9\u6570\u91cf\u7ef4\u62a4\u5e73\u8861\uff0c\u8fd9\u91cc\u8981\u6c42\u7684\u4e2d\u4f4d\u6570\u4e5f\u662f\u6570\u91cf\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u5c31\u7528SBT\u6811\u4e86\u3002\n\n\u5c06\u6700\u5f00\u59cb\u8f93\u5165\u7684n\u4e2a\u6570\u5b57\u53ca\u4e4b\u540eadd\u7684\u6570\u5b57\u90fd\u63d2\u5165SBT\u4e2d\u3002\u5bf9\u4e8emid\uff0c\u8bbeSBT\u4e2d\u7684\u6570\u5b57\u6570\u91cf\u4e3asize\uff0c\u82e5size\u4e3a\u5947\u6570\uff0c\u5219\u6709size/2\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u4e2d\u4f4d\u6570\uff1b\u82e5size\u4e3a\u5076\u6570\uff0c\n\u5219\u6709size/2 - 1\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u4e2d\u4f4d\u6570\u3002\u5373mid\u9700\u8981\u4e00\u4e2a\u51fd\u6570``` rank(SBT tree, size_t size) ```\uff0c\u7528\u4e8e\u8fd4\u56deSBT\u4e2d\u7684\u4e00\u4e2a\u6570\uff0c\u800cSBT\u4e2d\u6709size\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u3002\n\n\u5173\u4e8eSBT\u7684\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n* \u63d2\u5165 (\u4e0d\u8be6\u7ec6\u5199\u4e86\uff0c\u81ea\u884c\u641c\u7d22)\n\n* \u67e5\u627e\u4e00\u4e2a\u6570\uff0c\u6709size\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff1a\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\n\t* \u82e5\u5de6\u5b50\u6811\u7684size\u6b63\u597d\u7b49\u4e8esize\uff0c\u5219\u6839\u7ed3\u70b9\u5b58\u50a8\u7684\u6570\u5373\u6240\u6c42\uff1b\n\t* \u82e5\u5de6\u5b50\u6811\u7684size\u5927\u4e8esize\uff0c\u5219\u9012\u5f52\uff0c\u6b64\u65f6\u5728\u5de6\u5b50\u6811\u4e0a\u6709size\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff1b\n\t* \u82e5\u5de6\u5b50\u6811\u7684size\u5c0f\u4e8esize\uff0c\u5219\u9012\u5f52\uff0c\u5728\u53f3\u5b50\u6811\u4e0a\u5bfb\u627e\u5b83\uff0c\u4f46\u7531\u4e8e\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u53ca\u6839\u7ed3\u70b9\uff0c\u6240\u4ee5\u6b64\u65f6\u5728\u53f3\u5b50\u6811\u4e0a\u6709(size - \u5de6\u5b50\u6811\u7684size - 1)\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e\u5b83\n\n\n## \u4ee3\u7801\n\n//\u4ee3\u7801\u91cc\u7684template\u5bf9\u6b64\u9898\u7eaf\u5c5e\u591a\u6b64\u4e00\u4e3e\uff0c\u76f4\u63a5int\u5c31\u884c\u4e86\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\ntemplate<typename T>\nclass MidNum {\npublic:\n\tMidNum();\n\t~MidNum();\n\n\tvoid add(T num);\n\tT mid();\n\nprivate:\n\n\ttypedef struct SBTNode {\n\t\tT num;\n\t\tstruct SBTNode * left;\n\t\tstruct SBTNode * right;\n\t\tsize_t size;\n\t\tSBTNode(T num) : num(num), left(NULL), right(NULL), size(1) {}\n\t} * SBT;\n\n\tSBT left_rotate(SBT tree);\n\tSBT right_rotate(SBT tree);\n\n\tSBT maintain(SBT tree);\n\tSBT insert(SBT tree, T num);\n\tT rank(SBT tree, size_t size);\n\t\n\tvoid delete_tree(SBT tree);\n\nprivate:\n\tSBT tree;\n};\n\ntemplate<typename T>\nMidNum<T>::MidNum() {\n\ttree = NULL;\n}\n\ntemplate<typename T>\nMidNum<T>::~MidNum() {\n\tdelete_tree(tree);\n}\n\ntemplate<typename T>\nvoid MidNum<T>::add(T num) {\n\ttree = insert(tree, num);\n}\n\ntemplate<typename T>\nT MidNum<T>::mid() {\n\tsize_t n = tree->size / 2;\n\tif (tree->size % 2) { //size\u4e3a\u5947\u6570\n\t\treturn rank(tree, n); //n\u4e2a\u6570\u6bd4\u4e2d\u4f4d\u6570\u5c0f\n\t}\n\telse { //size\u4e3a\u5076\u6570\n\t\treturn rank(tree, n - 1); //n - 1\u4e2a\u6570\u6bd4\u4e2d\u4f4d\u6570\u5c0f\n\t}\n}\n\ntemplate<typename T>\ntypename MidNum<T>::SBT MidNum<T>::left_rotate(SBT tree) {\n\tSBT k = tree->right;\n\ttree->right = k->left;\n\tk->left = tree;\n\tk->size = tree->size;\n\tsize_t left_size = tree->left ? tree->left->size : 0; //\u5de6\u5b50\u6811\u6709\u53ef\u80fd\u4e3aNULL\n\tsize_t right_size = tree->right ? tree->right->size : 0; //\u53f3\u5b50\u6811\u6709\u53ef\u80fd\u4e3aNULL\n\ttree->size = left_size + right_size + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename MidNum<T>::SBT MidNum<T>::right_rotate(SBT tree) {\n\tSBT k = tree->left;\n\ttree->left = k->right;\n\tk->right = tree;\n\tk->size = tree->size;\n\tsize_t left_size = tree->left ? tree->left->size : 0; //\u5de6\u5b50\u6811\u6709\u53ef\u80fd\u4e3aNULL\n\tsize_t right_size = tree->right ? tree->right->size : 0; //\u53f3\u5b50\u6811\u6709\u53ef\u80fd\u4e3aNULL\n\ttree->size = left_size + right_size + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename MidNum<T>::SBT MidNum<T>::maintain(SBT tree) {\n\tif (tree == NULL) return NULL;\n\tSBT left = tree->left, right = tree->right;\n\tsize_t left_size = left ? left->size : 0;\n\tsize_t right_size = right ? right->size : 0;\n\tif (left && left->left && left->left->size > right_size) { //\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5927\u4e8e\u53f3\u5b50\u6811\n\t\ttree = right_rotate(tree);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\telse if (left && left->right && left->right->size > right_size) { //\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u5927\u4e8e\u53f3\u5b50\u6811\n\t\ttree->left = left_rotate(tree->left);\n\t\ttree = right_rotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\telse if (right && right->right && right->right->size > left_size) { //\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u5927\u4e8e\u5de6\u5b50\u6811\n\t\ttree = left_rotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree = maintain(tree);\n\t}\n\telse if (right && right->left && right->left->size > left_size) { //\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5927\u4e8e\u5de6\u5b50\u6811\n\t\ttree->right = right_rotate(tree->right);\n\t\ttree = left_rotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\treturn tree;\n}\n\ntemplate<typename T>\ntypename MidNum<T>::SBT MidNum<T>::insert(SBT tree, T num) {\n\tif (tree == NULL) return new SBTNode(num);\n\ttree->size++;\n\tif (num < tree->num) {\n\t\ttree->left = insert(tree->left, num);\n\t}\n\telse {\n\t\ttree->right = insert(tree->right, num);\n\t}\n\ttree = maintain(tree); //\u7ef4\u62a4\u5e73\u8861\n\treturn tree;\n}\n\ntemplate<typename T>\nT MidNum<T>::rank(SBT tree, size_t size) {\n\tif (tree == NULL) return 0;\n\tsize_t left_size = tree->left ? tree->left->size : 0;\n\tif (left_size == size) {\n\t\treturn tree->num;\n\t}\n\telse if (left_size > size) {\n\t\treturn rank(tree->left, size);\n\t}\n\telse {\t\t\n\t\treturn rank(tree->right, size - left_size - 1);\n\t}\n}\n\ntemplate<typename T>\nvoid MidNum<T>::delete_tree(SBT tree) {\n\tif (tree == NULL) return;\n\tdelete_tree(tree->left);\n\tdelete_tree(tree->right);\n\tdelete tree;\n}\n\nint main() {\n\tint n, m, num;\n\tscanf(\"%d\", &n);\n\tMidNum<int> mid_num;\n\tsize_t i;\n\tfor (i = 0; i < n; i++) {\n\t\tscanf(\"%d\", &num);\n\t\tmid_num.add(num);\n\t}\n\tscanf(\"%d\", &m);\n\tchar cmd[3];\n\tfor (i = 0; i < m; i++) {\n\t\tscanf(\"%s\", cmd);\n\t\tif (cmd[0] == 'a') {\n\t\t\tscanf(\"%d\", &num);\n\t\t\tmid_num.add(num);\n\t\t}\n\t\telse {\n\t\t\tprintf(\"%d\\n\", mid_num.mid());\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1561389362,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u6765\u4e00\u7bc7\u6307\u9488\u7248\u65e0\u65cbTreap\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u7ec4\u6570\u636e\uff0c\u652f\u6301\u63d2\u5165\u548c\u67e5\u627e\u4e2d\u4f4d\u6570\uff0c\u5982\u679c\u6570\u636e\u4e2a\u6570\u4e3a\u5076\u6570\u90a3\u4e48\u9009\u8f83\u5c0f\u7684\u4e00\u4e2a\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n$FHQTreap$\uff0c\u53ef\u4ee5\u770b\u6211[\u535a\u5ba2](https://www.cnblogs.com/Juruo1103/p/10281403.html)\n\n### \u601d\u8def\n\n\u5728\u5bf9\u6811\u8fdb\u884c$Split$\u7684\u65f6\u5019\u6309\u7167$size$\u5206\u88c2\u800c\u4e0d\u662f\u6743\u503c\uff0c\u63d2\u5165\u64cd\u4f5c\u65f6\u67e5\u4e00\u4e0b$rank$\uff0c\u62c6\u5f00\u6811\u518d\u5939\u8fdb\u53bb\u3002\u67e5\u4e2d\u4f4d\u6570\u65f6\u5019\u62c6\u51fa$size$\u4e3a$\\frac{root->size-1}{2}$\u7684\u5de6\u6811\uff0c\u7136\u540e\u5728\u53f3\u6811\u4e2d\u62c6\u51fa\u4e00\u4e2a\u8282\u70b9\u5373\u4e3a\u4e2d\u4f4d\u6570\n\n### \u4ee3\u7801\n\n```cpp\n#include <stdio.h>\n\nint Rand() {\n    static int seed = 123456;\n    return seed = (((seed ^ 666666) + 19260817ll) * 1433223ll) % 0x3f3f3f3f;\n}\n\nnamespace FHQ{\n    struct Node{\n        int val, key, size;\n        Node *child[2];\n        Node(int val):val(val), key(Rand()), size(1){child[0] = child[1] = NULL;}\n    };\n\n    Node *root = NULL;\n\n    void Update(Node *now) {\n        now->size = 1;\n        now->size += now->child[0] ? now->child[0]->size : 0;\n        now->size += now->child[1] ? now->child[1]->size : 0;\n    }\n\n\n    void Split(Node *now, int k, Node *&t1, Node *&t2) {\n        if (!now) {\n            t1 = t2 = NULL; return;\n        }\n        if (k == 0) {\n            t1 = NULL; t2 = now; return;\n        }\n        if (k >= now->size) {\n            t1 = now; t2 = NULL; return;\n        }\n        int ls = now->child[0] ? now->child[0]->size : 0;\n        if (k <= ls) {\n            Node *temp;\n            Split(now->child[0], k, t1, temp); \n            t2 = now; t2->child[0] = temp; Update(t2); return;\n        } else {\n            Node *temp;\n            Split(now->child[1], k - ls - 1, temp, t2);\n            t1 = now; t1->child[1] = temp; Update(t1); return;\n        }\n    }\n\n    Node *Merge(Node *a, Node *b) {\n        if (!a || !b) return a ? a : b;\n        if (b->key > a->key) {\n            a->child[1] = Merge(a->child[1], b);\n            Update(a); return a;\n        } else {\n            b->child[0] = Merge(a, b->child[0]);\n            Update(b); return b;\n        }\n    }\n\n    int Rank(Node *now, int k) {\n        if (!now) return 1;\n        int ls = now->child[0] ? now->child[0]->size : 0;\n        if (k < now->val)\n            return Rank(now->child[0], k);\n        else if (k > now->val)\n            return Rank(now->child[1], k) + ls + 1;\n        else return ls + 1;\n    }\n\n    void Insert(int k) {\n        if (!root) {\n            root = new Node(k);\n            return;\n        }\n        int rank = Rank(root, k);\n        Node *lt, *rt;\n        Split(root, rank - 1, lt, rt);\n        root = Merge(lt, Merge(new Node(k), rt));\n    }\n\n    int GetMid() {\n        Node *lt, *rt, *temp, *node;\n        Split(root, root->size - 1 >> 1, lt, temp);\n        Split(temp, 1, node, rt);\n        int res = node->val;\n        root = Merge(lt, Merge(node, rt));\n        return res;\n    }\n}\n\nint n, m, x;\nchar str[5];\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &x);\n        FHQ::Insert(x);\n    }\n    scanf(\"%d\", &m);\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%s\", str);\n        if (str[0] == 'a') {\n            scanf(\"%d\", &x);\n            FHQ::Insert(x);\n        } else {\n            printf(\"%d\\n\", FHQ::GetMid());\n        }\n    }\n    return 0;\n}\n/*\n6\n1 2 13 14 15 16\n5\nadd 5\nadd 3\nmid\nadd 20\nmid\n*/\n```\n\n\u8bdd\u8bf4\u4e00\u697c\u7684zip-tree\u770b\u8d77\u6765\u6bd4fhq\u8fd8\u8981\u597d\u5199\uff0c\u8981\u5b66\u4e00\u6ce2\u4e86",
        "postTime": 1549190351,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u5c45\u7136\u6ca1\u6709\u94fe\u8868\u7684\u9898\u89e3\n## \u672c\u849f\u84bb\u5c31\u6765\u4e00\u53d1\n## \u3010\u601d\u8def\u3011\n\u79bb\u7ebf\u5904\u7406\uff0c\u5148\u628a\u6240\u6709\u8981\u52a0\u8fdb\u53bb\u7684\u6570\u90fd\u52a0\u5165\u94fe\u8868\u4e2d\uff0c\u7136\u540e\u5bf9\u94fe\u8868\u6392\u5e8f\uff0c\u8fd9\u6837\u64cd\u4f5c\u4e2d\u52a0\u5165\u4e00\u4e2a\u6570\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5012\u5e8f\u7684\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5220\u9664\u4e00\u4e2a\u6570\u540e\uff0c\u4e2d\u4f4d\u6570\u53ea\u4f1a\u66f4\u65b0\u4e3a\u5b83\u7684\u524d\u9a71\u6216\u540e\u7ee7\uff0c\u7528\u4e00\u4e2a\u6307\u9488\u626b\u63cf\u5373\u53ef\u6c42\u51fa\u4e2d\u4f4d\u6570\u3002\n## \u3010\u5b9e\u73b0\u3011\n- \u94fe\u8868\u7ed3\u70b9\u7684\u5b9a\u4e49\n```cpp\nstruct Node {\n    int val, pre, suc;\n    Node(int val = 0, int pre = 0, int suc = 0): val(val), pre(pre), suc(suc) {}\n} l[N << 1];\n```\nval\u8868\u793a\u6743\u503c\uff0cpre\u3001suc\u5206\u522b\u8868\u793a\u524d\u9a71\u3001\u540e\u7ee7\n\n- \u5b58\u50a8\u64cd\u4f5c\n```cpp\nstruct Oper {\n    int op, p, ans;\n} c[N];\n```\nop=1\u8868\u793a\u6dfb\u52a0\uff0cp\u8868\u793a\u8fde\u7eed\u5012\u5e8f\u64cd\u4f5c\u65f6\u8981\u5220\u9664\u7684\u94fe\u8868\u7ed3\u70b9\u7684\u6307\u9488  \nop=0\u8868\u793a\u67e5\u8be2\uff0cans\u8bb0\u5f55\u7b54\u6848\n\n- \u5982\u4f55\u5bf9\u94fe\u8868\u6392\u5e8f\n```cpp\nstruct cmp {\n    bool operator()(int x, int y) { return l[x].val < l[y].val; }\n};\nfor (int i = 1; i <= tot; ++i) t[i] = i;\n  sort(t + 1, t + tot + 1, cmp());\n```\n\u5efa\u7acb\u8f85\u52a9\u6570\u7ec4t\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6dfb\u52a0\u64cd\u4f5c\u7684\u6307\u9488\u4e0d\u4f1a\u4e22\u5931\n\n- \u5220\u9664\u4e00\u4e2a\u7ed3\u70b9\u540e\u6307\u9488\u5982\u4f55\u79fb\u52a8\n```cpp\n  int now = t[(tot + 1) / 2];\n  int a = (tot + 1) / 2 - 1, b = tot - a - 1;\n  for (int i = m; i >= 1; --i)\n    if (c[i].op == 1) {\n      int p = c[i].p;\n      if (rank[p] <= rank[now])\n        --a;\n      else\n        --b;\n      if (p == now) now = l[now].pre;\n      Link(l[p].pre, l[p].suc);\n      if (a + 1 < b)\n        now = l[now].suc, ++a, --b;\n      if (a > b)\n        now = l[now].pre, --a, ++b;\n    } else {\n      c[i].ans = l[now].val;\n    }\n  }\n```\nnow\u8868\u793a\u5f53\u524d\u4e2d\u4f4d\u6570\u7ed3\u70b9\u7684\u6307\u9488  \na\u8868\u793a\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570  \nb\u8868\u793a\u6bd4\u5f53\u524d\u4e2d\u4f4d\u6570\u5927\u7684\u6570\u7684\u4e2a\u6570  \n\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u5c31\u884c\u4e86  \n\u6ce8\u610f\u7279\u5224\u5220\u9664\u7684\u7ed3\u70b9\u4e3a\u4e2d\u4f4d\u6570\u7684\u60c5\u51b5\n\n## \u3010\u4ee3\u7801\u3011\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nint n, m, t[N << 1], tot, rank[N << 1];\nchar str[4];\n\nstruct Node {\n  int val, pre, suc;\n  Node(int val = 0, int pre = 0, int suc = 0): val(val), pre(pre), suc(suc) {}\n} l[N << 1];\n\nstruct Oper {\n  int op, p, ans;\n} c[N];\n\ninline void Link(int x, int y) {\n  l[x].suc = y, l[y].pre = x;\n}\n\nstruct cmp {\n  bool operator()(int x, int y) { return l[x].val < l[y].val; }\n};\n\nint main() {\n  scanf(\"%d\", &n);\n  for (int i = 1, x; i <= n; ++i) {\n    scanf(\"%d\", &x);\n    l[++tot] = Node(x);\n  }\n  scanf(\"%d\", &m);\n  for (int i = 1, x; i <= m; ++i) {\n    scanf(\"%s\", str);\n    if (str[0] == 'a') {\n      c[i].op = 1;\n      scanf(\"%d\", &x);\n      l[++tot] = Node(x);\n      c[i].p = tot;\n    } else {\n      c[i].op = 0;\n    }\n  }\n  for (int i = 1; i <= tot; ++i) t[i] = i;\n  sort(t + 1, t + tot + 1, cmp());\n  for (int i = 1; i <= tot; ++i)\n    rank[t[i]] = i;\n  for (int i = 1; i < tot; ++i)\n    Link(t[i], t[i + 1]);\n  int now = t[(tot + 1) / 2];\n  int a = (tot + 1) / 2 - 1, b = tot - a - 1;\n  for (int i = m; i >= 1; --i)\n    if (c[i].op == 1) {\n      int p = c[i].p;\n      if (rank[p] <= rank[now])\n        --a;\n      else\n        --b;\n      if (p == now) now = l[now].pre;\n      Link(l[p].pre, l[p].suc);\n      if (a + 1 < b)\n        now = l[now].suc, ++a, --b;\n      if (a > b)\n        now = l[now].pre, --a, ++b;\n    } else {\n      c[i].ans = l[now].val;\n    }\n  for (int i = 1; i <= m; ++i)\n    if (c[i].op == 0) printf(\"%d\\n\", c[i].ans);\n  return 0;\n}\n```",
        "postTime": 1540911051,
        "uid": 50131,
        "name": "GaoZiyou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "$\\text {QWQ}$\n\n$\\text {dalao}$\u4eec\u90fd\u592a\u5de8\u4e86\uff0c\u5199\u7684\u5168\u662f\u6211\u4e0b\u516b\u767e\u8f88\u5b50\u90fd\u522b\u60f3\u770b\u61c2\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u3002\n\n\u6211\u8fd9\u79cd\u5c0f\u849f\u84bb\uff0c\u53ea\u597d\u5199\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f\u8fdb\u6765\u4e86\u3002\n\n$\\text {C++}$\u6709\u4e00\u4e2a\u5f88\u795e\u5947\u7684\u4e1c\u897f\u53eb\u505a$\\text {STL}$\uff0c\u91cc\u9762\u6709\u4e00\u4e9b\u975e\u5e38\u5f3a\u5927\u7684~~\u4e00\u884c\u5c31\u53ef\u4ee5\u89e3\u51b3\u51e0\u767e\u884c\u4ee3\u7801\u7684~~\u51fd\u6570\u548c\u5bb9\u5668\u3002\n\n\u8fd9\u4e2a\u9898\u76ee\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e0b\u91cc\u9762\u7684```vector```\u4e0d\u5b9a\u957f\u6570\u7ec4\u548c```lower_bound```\u8fd9\u4e24\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u4e86\u3002\n\n~~\u5f53\u7136\u4f60\u53eb\u5411\u91cf\u4e5f\u6ca1\u95ee\u9898\u3002\u4e0d\u8fc7\u6211\u89c9\u5f97\u5411\u91cf\u597d\u96be\u7406\u89e3\uff0c\u4e0d\u5b9a\u957f\u6570\u7ec4\u591a\u6e05\u6670\u6613\u61c2\u554aqwq(\u53ef\u80fd\u662f\u6211\u592a\u5f31\u4e86)~~\n\n~~\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u505a\u7684\uff0c\u4e0d\u8fc7\u6211\u592a\u5f31\u4e86\u4e0d\u4f1a~~\n\n```\nvector\u6240\u652f\u6301\u7684\u64cd\u4f5c\u5728\u672c\u9898\u4e3b\u8981\u6709\uff1a\n1. push_back(),\u5c31\u662f\u628a\u4e00\u4e2a\u6570\u52a0\u5230vector\u7684\u5c3e\u90e8\n2. insert(),\u5373\u628a\u4e00\u4e2a\u6570\u63d2\u5165\u5230\u6307\u5b9a\u5730\u5740\u5904\n\nlower_bound\u7684\u7528\u6cd5\uff1a\nE.g. lower_bound(&a[0],&a[tail],x);\n\t \u8fd4\u56dea[0]\u5230a[tail]\u7b2c\u4e00\u4e2a\u5927\u7b49\u4e8ex\u7684\u5185\u5b58\u5730\u5740\n```\n\n\u597d\u4e86\uff0c\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u53eb\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u6570$x$\u4f7f\u5f97\u539f\u5e8f\u5217\u4ecd\u7136\u6709\u5e8f\uff0c\u7136\u540e\u8f93\u51fa\u6700\u4e2d\u95f4\u7684\u6570\u3002\u5176\u4e2d\u63d2\u5165\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u7528```lower_bound```\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u4f18\u96c5\u5730~~\u66b4\u529b~~\u5199\u51fa\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#define int long long\nusing namespace std;\nint i,n,m,x;\nvector <int> a;\nchar s[4];\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n    \tscanf(\"%d\",&x);\n    \ta.push_back(x);\n    }\t\n\tsort(a.begin(),a.end());\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>s;\n\t\tif(s[0]=='a'){\n\t\t\tscanf(\"%d\",&x);\n\t\t\ta.insert(lower_bound(a.begin()+1,a.end(),x),x);\n//\t\t\tfor(int j=0;j<a.size();j++){\n//\t\t\t\tprintf(\"%d \",a[j]);\n//\t\t\t}\n//\t\t\tprintf(\"\\n\");\t//\u6211\u4e0d\u4f1a\u5199\u8fed\u4ee3\u5668qwq\n\t\t}\n\t\tif(s[0]=='m'){\n\t\t\tprintf(\"%d\\n\",a[((1+a.size())>>1)-1]);\n\t\t}\n\t}\n}\n```\n\n\u54e6\u5bf9\uff0c```vector```\u662f\u4ece$0$\u5f00\u59cb\u4e3a\u4e0b\u6807\u7684\uff0c\u6240\u4ee5\u5343\u4e07\u8bb0\u5f97\u67e5\u8be2\u65f6$-1$\u3002\n\n\u6700\u5dee\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u8c8c\u4f3c\u80fd\u8fbe\u5230$O(M\\times N)$\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u8dd1\u7684\u633a\u5feb\u7684\uff1f\uff1f\n\n\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528```lower_bound```\u5199\u4e00\u4e0b[\u5bfc\u5f39\u62e6\u622a](https://www.luogu.org/problemnew/show/P1020)\u3002~~200\u5206\u8f7b\u677e\u5230\u624b~~",
        "postTime": 1540473150,
        "uid": 105349,
        "name": "Pluto1811",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P3871 \u4e2d\u4f4d\u6570"
    },
    {
        "content": "~~\u55ef\u3002\u3002\u3002\u3002\u4e00\u9053\u5de8\u6c34\u65e0\u6bd4\u7684\u9898\u3002\u3002\u4e0d\u77e5\u9053\u548b\u84dd\u7684\u3002\uff08emm\u6076\u610f\u8bc4\u5206\uff1f\uff08\u9003~~\n\n\n\u770b\u4e00\u4e0b\u9898\u76ee\n\n\u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a\u7531N\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u6574\u6570\u5e8f\u5217\uff0c\u73b0\u5728\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1 add a\n\n\u5728\u8be5\u5e8f\u5217\u7684\u6700\u540e\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570a\uff0c\u7ec4\u6210\u957f\u5ea6\u4e3aN + 1\u7684\u6574\u6570\u5e8f\u5217\n\n2 mid \u8f93\u51fa\u5f53\u524d\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\n\n\u4e2d\u4f4d\u6570\u662f\u6307\u5c06\u4e00\u4e2a\u5e8f\u5217\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u3002\uff08\u82e5\u5e8f\u5217\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u5219\u6307\u5904\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\uff09\n\n\u4f8b1\uff1a1 2 13 14 15 16 \u4e2d\u4f4d\u6570\u4e3a13\n\n\u4f8b2\uff1a1 3 5 7 10 11 17 \u4e2d\u4f4d\u6570\u4e3a7\n\n\u4f8b3\uff1a1 1 1 2 3 \u4e2d\u4f4d\u6570\u4e3a1\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u4e3a\u521d\u59cb\u5e8f\u5217\u957f\u5ea6N\u3002\u7b2c\u4e8c\u884c\u4e3aN\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6574\u6570\u5e8f\u5217\uff0c\u6570\u5b57\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u9694\u3002\u7b2c\u4e09\u884c\u4e3a\u64cd\u4f5c\u6570M\uff0c\u5373\u8981\u8fdb\u884cM\u6b21\u64cd\u4f5c\u3002\u4e0b\u9762\u4e3aM\u884c\uff0c\u6bcf\u884c\u8f93\u5165\u683c\u5f0f\u5982\u9898\u610f\u6240\u8ff0\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5bf9\u4e8e\u6bcf\u4e2amid\u64cd\u4f5c\u8f93\u51fa\u4e2d\u4f4d\u6570\u7684\u503c\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n6\n1 2 13 14 15 16\n5\nadd 5\nadd 3\nmid\nadd 20\nmid\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n5\n13\n\u8bf4\u660e\n\u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c1 \u2264 N \u2264 10,000\uff0c0 \u2264 M \u2264 1,000\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 \u2264 N \u2264 100,000\uff0c0 \u2264 M \u2264 10,000\n\n\u5e8f\u5217\u4e2d\u6574\u6570\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71,000,000,000\uff0c\u5e8f\u5217\u4e2d\u7684\u6570\u53ef\u80fd\u6709\u91cd\u590d\n\n\n\u597d\u9996\u5148\u770b\u5b8c\u9898\u76ee\u6570\u636e\u8303\u56f4\u53d1\u73b0int\u662f\u5b8c\u5168\u591f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8bfb\u5165\u540e\u6839\u636e\u9898\u76ee\u8981\u6c42\u505a\u5c31\u9614\u4ee5\u4e86\uff08\u672c\u849f\u84bb\u5e76\u4e0d\u4f1a\u4ec0\u4e48\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u7528\u6570\u7ec4\u6a21\u62df\uff09\n\n\u6ce8\u610f\u8f93\u51fa\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u6b64\u65f6\u7684\u5143\u7d20\u4e2a\u6570\u662f\u5947\u6570\u4e2a\u8fd8\u662f\u5076\u6570\u4e2a\u5c31\u597d\u4e86\uff08\u76f8\u4fe1dalao\u4eec\u4e0d\u7528\u6211\u8bb2\u5c31\u77e5\u9053\n\n\u4e0a\u4ee3\u7801qwq\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<algorithm>\n#define ll long long\n#define re register\n\nusing namespace std;\n\nll n,m,a[200001];//\u8fd9\u91cc\u5f00longlong\u6709\u4e9b\u6d6a\u8d39\u6240\u4ee5\u5927\u5bb6\u5f00int\u5c31\u597d\u4e86\n\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(re int i=1; i<=n; i++) scanf(\"%lld\",&a[i]);\n\tscanf(\"%lld\",&m);\n\tsort(a+1,a+n+1);//\u5148\u6392\u5e8f\n\tfor(re int i=1; i<=m; i++)\n\t{\n\t\tstring s; \n\t\tcin>>s;\n\t\tif(s==\"add\")\n\t\t{\n\t\t\tll c;\n\t\t\tscanf(\"%lld\",&c);\n\t\t\tn++;\n            for(int j=1;j<=n;j++) \n\t\t\t\tif(a[j]>=c)\n\t\t\t\t{\n               \t    for(int k=n;k>=j;k--) a[k]=a[k-1];\n                   \ta[j]=c;\n                   \tbreak;\n           \t\t}\n\t\t}//\u52a0\u5165\u4e00\u4e2a\u6570\n\t\telse\n\t\t{\n\t\t\tif(n%2==0) printf(\"%lld\\n\",min(a[n>>1],a[(n+2)>>1]));\n\t\t\telse printf(\"%lld\\n\",a[(n+1)>>1]);\n\t\t}\n\t}\n\treturn 0;//\u6807\u51c6\u7ed3\u5c3e\n}\n```",
        "postTime": 1540291433,
        "uid": 142007,
        "name": "\u857e\u59c6\u9171QvQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u4ec0\u4e48\u53eb\u66b4\u529b\u51fa\u5947\u8ff9\u5462\uff1f\u5927\u6982\u5c31\u662f\u8fd9\u9053\u9898\u5427\u3002\n\n\u6700\u574f\u590d\u6742\u5ea6\uff08n\\*m\uff09\uff0c\u6700\u4f18\u590d\u6742\u5ea6O\uff08n\uff09\uff0c\u7136\u540e\u6211\u5c31\u5199\u4e2a\u66b4\u529b\u770b\u770b\u8138\u5427\uff0c\u7ed3\u679c\u5c45\u7136AC\u4e86\u3002\n\n\uff08\u597d\u6c34\u7684\u6570\u636e\uff0c\u5c45\u7136\u8fd8\u662f\u51e0\u5e74\u524d\u7684\u7701\u9009\u9898\u3002\u3002\u5927\u6982\u662f\u56e0\u4e3a\u5fd8\u4e86\u9632\u66b4\u529b\u4e86\u5427\uff09\n\n\u8fd9\u9898\u6709\u5f88\u591a\u89e3\u6cd5\u554a\uff0c\u5e73\u8861\u6811\u554a\uff0c\u8fd8\u6709\u4e0b\u9762\u9898\u89e3\u91cc\u8bf4\u5230\u7684\u5806\u554a\u3002\n\n\u65e2\u7136\u66b4\u529b\u51fa\u5947\u8ff9\uff0c\u90a3\u4e48\u6211\u662f\u5982\u4f55\u66b4\u529b\u7684\u5462\uff1f\n\n\u5c06\u539f\u6570\u7ec4sort\uff0c\u7136\u540eadd\u7684\u65f6\u5019\uff0c\u4e8c\u5206\u67e5\u627e\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u5f80\u540e\u7684\u6570\u4f9d\u6b21\u5f80\u540e\u632a\u4e00\u4f4d\uff0c\u6ca1\u4e86\u3002\n\nadd\u590d\u6742\u5ea6\uff08logn+n\uff09\uff0cmid\u590d\u6742\u5ea6\uff081\uff09\uff1b\n\n\u66b4\u529b\u51fa\u5947\u8ff9\uff0c\u66b4\u529b\u51fa\u5947\u8ff9\uff0c\u66b4\u529b\u51fa\u5947\u8ff9\uff01\n\n\u5176\u5b9e\u4ed4\u7ec6\u60f3\u60f3\u5361\u6389\u66b4\u529b\u7684\u6570\u636e\u5176\u5b9e\u4e0d\u662f\u5f88\u591a\uff0c\u800c\u4e14\u65e2\u7136\u53ea\u6709\u5341\u4e2a\u6570\u636e\uff0c\u4e3a\u4e86\u5361\u6389\u66b4\u529b\u7684\u6570\u636e\u5f88\u6709\u53ef\u80fd\u88ab\u5176\u4ed6\u5947\u602a\u53c8\u53ef\u80fd\u9519\u8bef\u7684\u505a\u6cd5\u6c34\u8fc7\uff0c\u53ef\u80fd\u51fa\u9898\u4eba\u5fd8\u4e86\u6211\u4eec\u8fd9\u79cd\u849f\u84bb\u4f1a\u5982\u6b64\u66b4\u529b\u7684\u89e3\u8fd9\u9053\u9898\u5427\u3002\u65e2\u7136\u80fdAC\u672c\u9898\uff0c\u90a3\u5c31\u53d1\u4e2a\u9898\u89e3\u5427\uff0c\u544a\u8bc9\u5927\u5bb6 \u4e0d\u4f1a\u505a\u9898\u7684\u65f6\u5019 \u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u6253\u66b4\u529b\u3002\n\n\n    \n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nchar key[1010101];\nint n,m,pos,num;\nint f[1010101];\nint read()\n{\n    int rt=0,in=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')\n            in=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        rt=rt*10+ch-'0';\n        ch=getchar();\n    }\n    return rt*in;\n}\nint main()\n{\n    n=read();\n    for(int i=1; i<=n; i++)\n        f[i]=read();\n    sort(f+1,f+1+n);\n    m=read();\n    for(int i=1; i<=m; i++)\n    {\n        scanf(\"%s\",key+1);\n        if(key[1]=='a')\n        {\n            num=read();\n            n++;\n            pos=n;\n            int l=1,r=n+1;\n            while(l<=r)\n            {\n                int mid=(l+r)/2;\n                if(f[mid]>=num)\n                {\n                    pos=mid;\n                    r=mid-1;\n                }\n                else\n                    l=mid+1;\n            }\n            for(int i=n; i>pos; i--)\n                f[i]=f[i-1];\n            f[pos]=num;\n        }\n        if(key[1]=='m')\n            printf(\"%d\\n\",f[(1+n)>>1]);\n    }\n    return 0;\n}\n```",
        "postTime": 1504796235,
        "uid": 19215,
        "name": "OIer991215",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "### **\u52a8\u6001\u6574\u4f53\u7b2cK\u5927**\n~~\u7b49\u4e00\u4f4d\u5f85\u4fee\u4e3b\u5e2d\u6811/\u6811\u5957\u6811dalao~~\n\n\u52a8\u6001\u6574\u4f53\u7b2ck\u5927\u4e00\u822c\u4f1a\u7528\u5e73\u8861\u6811\u6216\u8005\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u6811\u72b6\u6570\u7ec4\uff09\u914d\u4e0a\u4e8c\u5206\n\n\u6b63\u597d\u6ca1\u6709\u66ff\u7f6a\u7f8a\u6811\u7684\u4ee3\u7801\uff0c\u5c31\u8ba9\u6211\u6c34\u4e00\u53d1\u66ff\u7f6a\u7f8a\u5427\u3002\n\n```cpp\n#define ls t[p].l\n#define rs t[p].r\nconst double ap = 0.75;//0.7~0.8\u5747\u53ef\nstruct node\n{\n\tint l, r, v;\n\tint sz, ft;\n\tbool e;\n};\nnode t[N];\nint cnt, rt;\nint v[N], vc;\n```\nl,r\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\uff0csz\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u5b50\u6811\u5927\u5c0f\uff08\u5305\u542b\u81ea\u5df1\u4ee5\u53ca\u88ab\u5220\u9664\u7684\u7ed3\u70b9\uff09\uff0cft\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u5b50\u6811\u7684\u5b9e\u9645\u5927\u5c0f\uff08\u5305\u542b\u81ea\u5df1\uff09\uff0ce\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u5b58\u5728\uff1brt\u662f\u6574\u4e2a\u6811\u7684\u6839\uff0ccnt\u662f\u6574\u4e2a\u6811\u5171\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9\uff08\u5305\u542b\u5220\u9664\u4e86\u7684\uff09\uff1bv\u7528\u6765\u5b58\u50a8\u8981\u91cd\u6784\u7684\u70b9\uff0cvc\u662fv\u7684\u5927\u5c0f\uff08\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528vector\u4ee3\u66ff\uff1b\n\n\u66ff\u7f6a\u7f8a\u6811\u662f\u4e00\u68f5\u91cd\u91cf\u5e73\u8861\u6811\uff0c~~\u4f17\u6240\u5468\u77e5~~\u5b83\u662f\u4e00\u68f5\u5f88\u66b4\u529b\u7684\u6811\uff0c\u5b83\u5728\u5de6\u53f3\u5b50\u6811\u91cd\u91cf\u4e0d\u5e73\u8861\u65f6\u4f1a\u8fdb\u884c\u91cd\u6784\u3002\n\n```cpp\nbool bad(int p) { \n\treturn max(t[ls].sz, t[rs].sz) > ap*t[p].sz || t[p].sz - t[p].ft > t[p].sz*0.3;\n}\n```\n\u5f53\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u6709\u4e00\u4e2a\u592a\u5927\u65f6\u6216\u8005\u88ab\u5220\u9664\u7684\u7ed3\u70b9\u592a\u591a\u65f6\u5c31\u8fdb\u884c\u91cd\u6784\uff1b\n\n```cpp\nvoid ldr(int p) {//\u4e2d\u5e8f\u904d\u5386\u8fd9\u4e2a\u5b50\u6811\n\tif (!p)return;\n\tldr(ls);\n\tif (t[p].e)//\u5220\u9664\u7684\u70b9\u80af\u5b9a\u4e0d\u80fd\u52a0\u8fdb\u53bb\n\t\tv[++vc] = p;\n\tldr(rs);\n}\nvoid lift(int &p, int s, int e)\n{\n\tif (s == e) {\n\t\tp = v[s], ls = rs = 0, t[p].sz = t[p].ft = 1;\n\t\treturn;\n\t}\n\tint k = s + e >> 1;\n\twhile (s < k&&t[v[k]].v == t[v[k - 1]].v)k--;\n\tp = v[k];\n\tif (s < k)\n\t\tlift(ls, s, k - 1);\n\telse \n\t\tls = 0;\n\tlift(rs, k + 1, e);\n\tt[p].sz = t[ls].sz + t[rs].sz + 1,t[p].ft = t[ls].ft + t[rs].ft + 1;\n}\nvoid rebuild(int &p) { \n\tvc = 0;//\u8bb0\u5f97\u6e05\u7a7a\n\tldr(p);\n\tif (!vc) { //\u5982\u679cv\u91cc\u6ca1\u6709\u6570\u5b57\n\t\tp = 0; //\u8868\u660e\u5f53\u524d\u7ed3\u70b9\u7684\u6240\u4ee5\u5b50\u6811\u90fd\u88ab\u5220\u9664\u4e86\n\t\treturn; \n\t}\n\tlift(p, 1, vc);//\u5426\u5219\u5c31\u5c06v\u91cc\u7684\u6807\u53f7\u91cd\u6784\n}\n```\n\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7279\u70b9\u53ef\u4ee5\u5199\u51fa\u5b83\u7684\u63d2\u5165\u4ee3\u7801\n\n```cpp\nvoid add(int &p, int val) {\n\tp = ++cnt, t[p].v = val;\n\tt[p].sz = t[p].ft = t[p].e = 1;\n}\nvoid insert(int &p, int val)\n{\n\tif (!p) { \n\t\tadd(p, val), check(rt, p);\n\t\treturn; \n\t}\n\tt[p].sz++, t[p].ft++;\n   \tif (val < t[p].v)\n\t\tinsert(ls, val);\n\telse \n\t\tinsert(rs, val);\n}\n```\n\u65e2\u7136\u63d2\u5165\u4e86\u6570\u5b57\uff0c\u5c31\u6709\u53ef\u80fd\u9020\u6210\u4e0d\u5e73\u8861\uff0c\u6240\u4ee5\u6bcf\u6b21\u63d2\u5165\u540e\u90fdcheck\u4e00\u6b21\n\n```cpp\nvoid update(int p, int ed)\n{\n\tif (!p)return;\n\tt[ed].v < t[p].v ? update(ls, ed) : update(rs, ed);\n\tt[p].sz = t[ls].sz + t[rs].sz + 1;\n}\nvoid check(int &p, int ed)\n{\n\tif (p == ed)return;\n\tif (bad(p)) {\n\t\trebuild(p), update(rt, p);\n\t\treturn; \n\t}\n\tt[ed].v < t[p].v ? check(ls, ed) : check(rs, ed);\n}\n```\ncheck\u4e4b\u540e\u518d\u66f4\u65b0\u4e00\u4e0b\u5f53\u524d\u7ed3\u70b9\u7684\u5b50\u6811\uff1b\n\n```cpp\nint getval(int rk)\n{//\u83b7\u53d6\u6392\u540d\u4e3ark\u7684\u6570\u5b57\n\tint p = rt;\n\twhile (p)\n\t{\n\t\tif (rk == t[ls].ft + t[p].e)\n\t\t\tbreak;//\u5982\u679c\u6b63\u597d\u76f8\u7b49\uff0cbreak\u5c31\u884c\u4e86\n\t\telse if (rk <= t[ls].ft)\n\t\t\tp = ls;//\u5982\u679crk\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u7684\u5b9e\u9645\u5927\u5c0f\uff0c\u6240\u6c42\u503c\u5c31\u4f1a\u5728\u5de6\u5b50\u6811\u4e0a\n\t\telse \u5426\u5219\u53bb\u53f3\u5b50\u6811\u4e0a\u67e5\u8be2\n\t\t\trk -= t[ls].ft + t[p].e, p = rs;\n\t}\n\treturn t[p].v;\n}\n```\n\n\u7136\u540e\u67e5\u8be2\u5c31\u5b8c\u4e8b\u4e86\uff1b\n\n~~\u611f\u89c9\u6709\u70b9\u4e71\u554a~~\n\n#### \u5b8c\u6574\u4ee3\u7801\n\n~~\u8282\u7ea6\u7bc7\u5e45~~\n\n```cpp\n#define ls t[p].l\n#define rs t[p].r\ninline LL read() {\n\tchar ch = getchar(); LL x = 0, f = 1;\n\twhile (ch < '0' || ch > '9') {\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar();\n\t} while ('0' <= ch && ch <= '9') {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t} return x * f;\n}\nstruct node\n{\n\tint l, r, v;\n\tint sz, ft;\n\tbool e;\n};\nnode t[N];\nconst double ap = 0.75;\nint cnt, rt;\nint v[N], vc;\nvoid add(int &p, int val) {}\nbool bad(int p) {}\nvoid ldr(int p) {}\nvoid lift(int &p, int s, int e){}\nvoid rebuild(int &p) {}\nvoid update(int p, int ed){}\nvoid check(int &p, int ed){}\nvoid insert(int &p, int val){}\nint getnum(int rk){}\nint main()\n{\n\tint x, m, n;\n\tchar op[5];\n\tn = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tinsert(rt, read());\n\tm = read();\n\tx = n;\n\twhile (m--)\n\t{\n\t\tscanf(\"%s\", op);\n\t\tif (op[0] == 'a')\n\t\t\tinsert(rt, read()), x++;\n\t\telse\n\t\t\tprintf(\"%d\\n\", getnum((x&1) + (x >> 1)));\n\t}\n}\n```\n",
        "postTime": 1575438858,
        "uid": 208668,
        "name": "alicealice",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8bdd\u4e0d\u591a\u8bf4\n\n---\n$Solution$\n\n\u5f00\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\n\n\u4ee4\u5927\u6839\u5806\u7684\u5806\u9876\u4e3a\u4e2d\u4f4d\u6570\n\n\u7531\u9898\u610f\u5f97\uff0c\u6709\u65f6\u5019\u4e2d\u4f4d\u6570\u7684\u6b21\u5e8f\u4f1a\u53d8\uff0c\u6709\u65f6\u5019\u4e0d\u4f1a\u53d8\n\n$1$\u3001\u5f53\u5e8f\u53f7\u53d8\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5f80\u5927\u6839\u5806\u91cc\u63d2\u4e00\u4e2a\u6570\u4e86\n\n\u800c\u8fd9\u4e2a\u6570\u6765\u81ea$x,$\u6216\u8005\u53e6\u4e00\u4e2a\u5c0f\u6839\u5806\u7684\u5806\u9876\n\n\u90a3\u4e48\u53ea\u9700\u6bd4\u8f83\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u6570\u63d2\u8fdb\u5927\u6839\u5806\u91cc\u5373\u53ef\n\n$2$\u3001\u5f53\u5e8f\u53f7\u4e0d\u53d8\u65f6\uff0c\u5df2\u77e5\u5c0f\u6839\u5806\u91cc\u7684\u6240\u6709\u7684\u6570\u90fd\u6bd4\u5927\u6839\u5806\u7684\u6570\u5927\uff0c\u90a3\u4e48\u53ea\u9700\u4ee4x\u4e0e\u5927\u6839\u5806\u7684\u5806\u9876\u6bd4\u8f83\u4e00\u4e0b\uff0c\u5c0f\u7684\u6570\u53bb\u5927\u6839\u5806\u5806\u9876\uff0c\u5927\u7684\u6570\u53bb\u5c0f\u6839\u5806\u5806\u9876\u3002\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\n#include <iostream>\nusing namespace std;\npriority_queue<int>q;\npriority_queue<int,vector<int>,greater<int> >p;\nint x,N,M,mid;\nstring s;\nint main()\n{\n\tscanf(\"%d\",&N);\n\tfor(int i = 1 ; i <= N ; i ++ )scanf(\"%d\",&x),q.push(x);\n\twhile(q.size() > (N + 1)/ 2)p.push(q.top()),q.pop();\n\tscanf(\"%d\",&M);\n\twhile(M--)\n\t{\n\t\tcin >> s;\n\t\tif(s[0] == 'm')printf(\"%d\\n\",q.top());\n\t\telse \n\t\t{   \n\t\t\tscanf(\"%d\",&x);\n\t\t\tmid = (++ N + 1) >> 1;\n\t\t\tif(mid > N >> 1)\n\t\t\t{\n\t\t\t\tif(x < p.top())q.push(x);\n\t\t\t    else q.push(p.top()),p.pop(),p.push(x);\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(x < q.top())q.push(x),p.push(q.top()),q.pop();\n\t\t\t    else p.push(x);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1574599944,
        "uid": 116162,
        "name": "\u7fbd\u5107",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "[*\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c*](https://www.lemir3.red/2019/08/14/\u963f\u7a46\u5c14\u5171\u9752\u57ce\u9020\u8239\u5382Project3871-TJOI-\u4e2d\u4f4d\u6570\u9879\u76ee\u7ae3\u5de5\u62a5\u544a/)\n\n[*\u9898\u9762*](https://www.luogu.org/problem/P3871)\n\n\u5e73\u8861\u6811\u7ec3\u4e60\u9898.\n\n## \u9898\u76ee\u5206\u6790\n\n\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u6570\u5217,\u652f\u6301\u63d2\u5165\u6570\u503c\u548c\u67e5\u8be2\u6570\u5217\u7684\u4e2d\u4f4d\u6570.\n\n\u4e8e\u662f\u5c31\u5f88\u5bb9\u6613\u60f3\u51fa,\u5199\u4e00\u9897\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u6570\u5217,\u67e5\u8be2\u6811\u4e2d\u6392\u540d\u5728\u4e2d\u95f4\u7684\u6811.\n\n\u6211\u7528\u4e86\u975e\u65cb$Treap$,\u5982\u679c\u4e0d\u4f1a\u7684\u8bdd,\u53ef\u4ee5\u770b\u6211\u7684\u6ce8\u91ca.\n\n## \u4ee3\u7801\n\n```cpp\n\n#include \"cstdio\"\n#include \"cstring\"\n#include \"iostream\"\n#include \"cmath\"\n#include \"cstdlib\"\n#include \"algorithm\"\n\n#define lxl long long\n#define R register\n#define debug(x) printf(\"debug:%lld\\n\",x)\n\nusing namespace std;\n\nlxl n,m,root,cnt,tot;\nstring opt;\n\nstruct TREENODE\n{\n\tlxl l,r,val,heap,size;\n}t[1000010];\n\nstruct NODE\n{\n\tlxl l,r;\n};\n\ninline void insert(lxl);\ninline NODE split(lxl,lxl);\ninline void UpDate(lxl);\ninline lxl rank_(lxl);\ninline lxl merge(lxl,lxl);\ninline lxl find(lxl,lxl);\n\nsigned main(void)\n{\n\tscanf(\"%lld\",&n);\n\ttot=n;\n\tfor(R lxl _=1;_<=n;++_)\n\t{\n\t\tlxl num;\n\t\tscanf(\"%lld\",&num);\n\t\tinsert(num);\n\t}\n\tscanf(\"%lld\",&m);\n\tfor(R lxl _=1;_<=m;++_)\n\t{\n\t\tlxl num;\n\t\tcin>>opt;\n\t\tif(opt[0]=='a')\n\t\t{\n\t\t\tscanf(\"%lld\",&num);\n\t\t\tinsert(num);//\u63d2\u5165\u5230\u6811\u4e2d\n\t\t\ttot++;\n\t\t}\n\t\telse\n\t\t{\n//\t\t\tdebug(tot);\n\t\t\tlxl pos;\n\t\t\tif(tot%2==0)\n\t\t\t{\n\t\t\t\tpos=tot>>1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpos=(tot>>1)+1;\n\t\t\t}\n\t\t\tprintf(\"%lld\\n\",find(root,pos));\n\t\t}\n\t}\nreturn 0;\n}\n\ninline void insert(lxl x)\n{\n\tt[++cnt].val=x;//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\n\tt[cnt].heap=rand();\n\tt[cnt].size=1;\n\tNODE p=split(root,rank_(x));//\u6309\u6392\u540d\u628a\u6811\u5206\u5272\u4e3a\u6bd4\u5b83\u5927\u7684\u548c\u6bd4\u5b83\u5c0f\u7684\u4e24\u90e8\u5206\n\troot=merge(merge(p.l,cnt),p.r);//\u7136\u540e\u5408\u5e76\u8fdb\u53bb\n}\n\ninline NODE split(lxl x,lxl k)//\u5c06\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u5272\u53bb\u524dk\u4e2a\u7ed3\u70b9\n{\n\tNODE p={0,0};\n\tif(!x)\n\t{\n\t\treturn p;\n\t}\n\tlxl LSize=t[t[x].l].size+1;//\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\n\tif(k>=LSize)//\u5982\u679c\u8981\u5272\u7684\u6570\u6bd4\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u591a,\u5272\u53f3\u5b50\u6811\n\t{\n\t\tp=split(t[x].r,k-LSize);\n\t\tt[x].r=p.l;\n\t\tp.l=x;\n\t}\n\telse\n\t{\n\t\tp=split(t[x].l,k);\n\t\tt[x].l=p.r;\n\t\tp.r=x;\n\t}\n\tUpDate(x);//\u66f4\u65b0\u5b50\u6811\u7684\u5927\u5c0f\nreturn p;\n}\n\ninline void UpDate(lxl x)\n{\n\tt[x].size=t[t[x].l].size+t[t[x].r].size+1;\n}\n\ninline lxl rank_(lxl x)//\u83b7\u53d6\u503c\u4e3ax\u7684\u6570\u7684\u6392\u540d\n{\n\tlxl now=root,ans=0;\n\twhile(now)\n\t{\n\t\tif(x>t[now].val)//\u5982\u679cx\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9,ans\u7d2f\u52a0\u5de6\u5b50\u6811\u7ed3\u70b9\u6570\u91cf,now\u8df3\u5230\u53f3\u5b50\u6811\n\t\t{\n\t\t\tans+=t[t[now].l].size+1;\n\t\t\tnow=t[now].r;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=t[now].l;\n\t\t}\n\t}\nreturn ans;\n}\n\ninline lxl merge(lxl l,lxl r)//\u5408\u5e76\u4ee5l\u4e3a\u6839\u7ed3\u70b9\u7684\u6811\u548c\u4ee5r\u4e3a\u6839\u7ed3\u70b9\u7684\u6811,\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\n{\n\tif(!l||!r)\n\t{\n\t\treturn l+r;\n\t}\n\tif(t[l].heap<t[r].heap)//\u6309\u7167\u968f\u673a\u5206\u914d\u7684\u503c\u6765\u5408\u5e76,\u4f7f\u5176\u4e0d\u5bb9\u6613\u9000\u5316\u6210\u94fe\n\t{\n\t\tt[l].r=merge(t[l].r,r);\n\t\tUpDate(l);\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\tt[r].l=merge(l,t[r].l);\n\t\tUpDate(r);\n\t\treturn r;\n\t}\n}\n\ninline lxl find(lxl x,lxl k)//\u67e5\u8be2\u4ee5x\u4e3a\u6839\u7684\u6811\u4e2d\u7b2ck\u4e2a\u6570\u7684\u503c\n{\n\tlxl now=x;\n\twhile(true)\n\t{\n\t\tlxl val=t[t[now].l].size+1;\n\t\tif(k==val)\n\t\t{\n\t\t\treturn t[now].val;//\u8fd4\u56de\u6570\u503c\n\t\t}\n\t\tif(k<val)\n\t\t{\n\t\t\tnow=t[now].l;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk-=val;//\u66f4\u65b0\u4e3a\u8981\u5f80\u53f3\u5b50\u6811\u627e\u7684\u6570\u91cf\n\t\t\tnow=t[now].r;\n\t\t}\n\t}\n}\n\n```",
        "postTime": 1565779273,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "**~~\u672c\u9898\u89e3\u4e3a\u5806\u5b9e\u73b0\uff0c\u5982\u8981\u7814\u7a76\u5176\u4ed6\u6bd2\u7624\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u81ea\u52a8\u8df3\u8fc7~~**\n\n\u7b97\u6cd5\u539f\u7406\u4e0e\u5176\u4ed6\u5806\u5b9e\u73b0\u7684\u7b97\u6cd5\u4e00\u6837\uff0c\u4f46\u6211\u5728\u63d2\u5165\u5143\u7d20\u548c\u5904\u7406\u5806\u65f6~~\u66f4\u52a0\u5de7\u5999~~\u53d6\u53cd\u5b9e\u73b0\u5927\u6839\u5806\uff0c\u5bfc\u81f4\u9119\u4eba\u7684\u4ee3\u7801\u6709\u4e00\u79cd~~\u6781\u7b80~~\u98ce\u683c\uff0c\u8bf7\u5927\u4f6c\u4eec\u653e\u5fc3\u98df\u7528\n\n# Talk is cheap, show me the code.\n\n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\npriority_queue<int>q1/*\u5806\u9876\u4e3a\u7b54\u6848\uff0c\u4f7f\u5806\u4e2d\u5143\u7d20\u7b49\u4e8e\uff08\u6240\u6709\u5143\u7d20+1\uff09/2*/,q2/*\u6a21\u62df\u5927\u6839\u5806*/;\nint n,m;\nvoid insert(int x){//\u52a0\u5165\u64cd\u4f5c\u6bcf\u6b21\u53d6\u5c0f\u6839\u5806\u5806\u9876\u548c\u52a0\u5165\u7684\u6570\u6bd4\u8f83\uff0c\u5927\u4e8e\u5806\u9876\u5219\u52a0\u5165\u5c0f\u6839\u5806\u5426\u5219\u52a0\u5165\u5927\u6839\u5806\n    if(q1.empty()) return q1.push(x);\n    if(x<=q1.top()){\n        q1.push(x);\n        if(q1.size()>q2.size()+1) q2.push(-q1.top()),q1.pop();\n    }\n\telse{\n        q2.push(-x);\n        if(q1.size()<q2.size()) q1.push(-q2.top()),q2.pop();\n    }\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n    \tint x;scanf(\"%d\",&x);\n\t\tinsert(x);\n\t}\n\tscanf(\"%d\",&m);\n    while(m--){\n\t\tchar s[6];\n        cin>>s;\n        if(s[0]=='a'){\n\t    \tint x;scanf(\"%d\",&x);\n\t\t\tinsert(x);\n\t\t}\n        else printf(\"%d\\n\",q1.top());\n    }\n    return 0;\n}\n\n```",
        "postTime": 1539578229,
        "uid": 90615,
        "name": "opened",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1pbds\u7ea2\u9ed1\u6811\uff01\n\n\n\n\n```cpp\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<bits/stdc++.h> \nusing namespace  __gnu_pbds;\nusing namespace std; \ntree<long long,null_type,less<long long>,rb_tree_tag,tree_order_statistics_node_update>t;\ninline long long read()\n{\n    long long x=0,f=1;char ch=getchar();\n    for(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')f=-1;\n    for(;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-48;\n    return x*f;\n}\ninline string sread()\n{\n    string s;char ch=getchar();\n    for(;ch<'a'||ch>'z';ch=getchar());\n    for(;ch>='a'&&ch<='z';ch=getchar())s+=ch;\n    return s;\n}\nint main()\n{\n    long long n,m,i,num;\n    string q;\n    n=read();\n    for(i=0;i<n;i++)\n    num=read(),t.insert((num<<20)+i);\n    m=read();\n    while(m--)\n    {\n        q=sread();\n        if(q==\"mid\")\n        {\n            if(n%2==0)num=*t.find_by_order(n/2-1);//\u4f7f\u7528\u8fd9\u4e2a\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u7b2c0~n-1\u4e2a\u6570\uff0c\u4e0d\u662f1~n\n            else num=*t.find_by_order(n/2);\n            printf(\"%lld\\n\",num>>20);\n        }\n        else\n        {\n            i++,n++;num=read();\n            t.insert((num<<20)+i);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1513142776,
        "uid": 2248,
        "name": "\u6c47\u6587\u5ba2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6ca1\u6709\u6807\u7b7e\u554a\u4ec0\u4e48\u9b3c\u3002\u3002\u3002\u770b\u5230\u9898\u5c31\u60f3\u5230\u4e86\u4e3b\u5e2d\u6811\uff0c\u4f46\u662f\u53d1\u73b0\u5e76\u4e0d\u9700\u8981\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\uff0c\u6bcf\u6b21\u8be2\u95ee\u7b2ck\u5927\uff0c\u5f00\u59cb\u628a\u8be2\u95ee\u4ec0\u4e48\u7684\u90fd\u79bb\u6563\u5316\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u5bf9\u5076\u5806\u7684\u505a\u6cd5\u4e5f\u5f88\u5de7\u5999\u554a\u3002\u3002\u3002\u524d\u4e0d\u4e45\u624d\u770b\u7684\u3002\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\n#define REP(i,a,b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++i)\n#define DREP(i,a,b) for(register int i = (a),i##_end_ = (b); i >= i##_end_; --i)\nint read()\n{\n    register int f = 1,s = 0;char c = getchar();\n    while(!isdigit(c)) { if(c == '-')f = -1; c = getchar();}\n    while(isdigit(c)) { s = s * 10 + c - '0';c = getchar();}\n    return f * s;\n}\nconst int maxn = 200011;\nstruct T\n{\n    int    t,x,xx;    \n}q[maxn];\nint a[maxn],b[maxn],rnk[maxn],cnt,num[maxn];\nchar s[20];\nint n,m;\nint tr[maxn<<2];\nvoid insert(int h,int l,int r,int p)\n{\n    if(l == r){tr[h]++;return ;}\n    int mid = (l + r) >> 1;\n    if(p <= mid)insert(h<<1,l,mid,p);\n    else insert(h<<1|1,mid+1,r,p);\n    tr[h] = tr[h<<1] + tr[h<<1|1];\n}\nint query(int h,int l,int r,int k)\n{\n    if(l == r)return l;\n    int sum = tr[h<<1];\n    int mid = (l + r) >> 1;\n    if(k <= sum)return query(h<<1,l,mid,k);\n    else return query(h<<1|1,mid+1,r,k-sum);\n}\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n#endif\n    n = read();cnt = n;\n    REP(i,1,n)a[i] = read(),b[i] = a[i];\n    m = read();\n    REP(i,1,m)\n    {\n        cin>>s;\n        if(s[0] == 'm')q[i].t = 0;\n        else\n        {\n            q[i].t = 1;q[i].x = read();\n            b[++cnt] = q[i].x;\n        }\n    }\n    sort(b+1,b+1+cnt);\n    int tmp = unique(b+1,b+1+cnt) - (b+1);\n    REP(i,1,tmp)num[i] = b[i];\n    REP(i,1,n)rnk[i] = lower_bound(b+1,b+1+tmp,a[i])-b;\n    REP(i,1,m) if(q[i].t)q[i].xx = lower_bound(b+1,b+1+tmp,q[i].x)-b;\n    REP(i,1,n)insert(1,1,tmp,rnk[i]);\n    int now = n;\n    REP(i,1,m)\n    {\n        if(!q[i].t)\n        {\n            if(now&1)printf(\"%d\\n\",num[query(1,1,tmp,now/2+1)]);\n            else printf(\"%d\\n\",num[query(1,1,tmp,now/2)]);\n        }\n        else insert(1,1,tmp,q[i].xx),++now;\n    }\n    return 0;\n}\n\n```",
        "postTime": 1507910279,
        "uid": 19645,
        "name": "Drinkwater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u3002\u64cd\u4f5c\u6d89\u53ca\u63d2\u5165\u548c\u67e5\u8be2\u5168\u5c40\u4e2d\u503c\uff0c\u63d2\u5165\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5e73\u8861\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u800c\u67e5\u8be2\u5168\u5c40\u4e2d\u503c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u770b\u4f5c**\u67e5\u8be2\u5168\u5c40 $K$ \u5927\u503c**\uff0c\u5176\u4e2d $K=\\frac{n}{2}+(n\\mod 2)$\uff0c\u5373\u5076\u6570\u65f6\u4e3a\u4e24\u4e2a\u4e2d\u503c\u4e2d\u66f4\u5c0f\u7684\u90a3\u4e2a\uff0c\u5947\u6570\u65f6\u4e3a\u4e2d\u503c\u3002\n\n\u57fa\u672c\u4e0a\u6240\u6709\u7684\u5e73\u8861\u6811\u90fd\u80fd\u8f7b\u677e\u5730\u5b8c\u6210\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u57fa\u4e8e\u6570\u636e\u8303\u56f4\u548c\u4ee3\u7801\u957f\u5ea6\uff0c\u4f9d\u7136\u5199\u4e86\u4e00\u4e2a $\\text{FHQ Treap}$\uff0c\u5982\u679c\u6570\u636e\u8303\u56f4\u66f4\u5927\u4e00\u70b9\u7684\u8bdd\u53ef\u80fd\u53ef\u4ee5\u5361\u6389 $\\text{FHQ}$\uff0c\u4e2a\u4eba\u89c9\u5f97\u53ef\u4ee5\u51fa\u4e2a\u52a0\u5f3a\u7248\uff0c\u67e5\u8be2\u533a\u95f4\u4e2d\u503c\uff0c\u7136\u540e\u5361\u7ebf\u6bb5\u6811\u5957 $\\text{FHQ}$\uff0c\u5c31\u662f\u771f\u7684\u53d8\u6001\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\nusing namespace std;\nstruct FHQTreap\n{\n\tint son[2],siz,val,key;\n}t[MAXN<<1];\nint n,Q,root,siz;\nstring s;\nint NewNode(int val)\n{\n\tt[++siz].val=val;\n\tt[siz].siz=1;\n\tt[siz].key=rand();\n\treturn siz;\n}\nvoid Update(int rt)\n{\n\tt[rt].siz=t[t[rt].son[0]].siz+t[t[rt].son[1]].siz+1;\n}\nint Merge(int x,int y)\n{\n\tif(!x || !y) return x+y;\n\tif(t[x].key<t[y].key)\n\t{\n\t\tt[x].son[1]=Merge(t[x].son[1],y);\n\t\tUpdate(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tt[y].son[0]=Merge(x,t[y].son[0]);\n\t\tUpdate(y);\n\t\treturn y;\n\t}\n}\nvoid Split(int rt,int pos,int &x,int &y)\n{\n\tif(!rt) x=y=0;\n\telse\n\t{\n\t\tif(t[rt].val<=pos)\n\t\t{\n\t\t\tx=rt;\n\t\t\tSplit(t[rt].son[1],pos,t[rt].son[1],y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty=rt;\n\t\t\tSplit(t[rt].son[0],pos,x,t[rt].son[0]);\n\t\t}\n\t\tUpdate(rt);\n\t}\n}\nvoid Insert(int val)\n{\n\tint x,y;\n\tSplit(root,val,x,y);\n\troot=Merge(Merge(x,NewNode(val)),y);\n}\nint FindKth(int rt,int rk)\n{\n\twhile(1)\n\t{\n\t\tif(rk<=t[t[rt].son[0]].siz) rt=t[rt].son[0];\n\t\telse if(rk==t[t[rt].son[0]].siz+1) return t[rt].val;\n\t\telse\n\t\t{\n\t\t\trk-=t[t[rt].son[0]].siz+1;\n\t\t\trt=t[rt].son[1];\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tInsert(x);\n\t}\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tint x;\n\t\tcin>>s;\n\t\tif(s==\"add\")\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tInsert(x);\n\t\t\tn++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=n/2;\n\t\t\tif(n&1) x++;\n\t\t\tprintf(\"%d\\n\",FindKth(root,x));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546907171,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3871 \u3010[TJOI2010]\u4e2d\u4f4d\u6570\u3011"
    }
]