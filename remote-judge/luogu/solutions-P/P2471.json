[
    {
        "content": "\u8fd9\u91ccyea[i]\u8868\u793a\u7b2ci\u4e2a\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\uff0cval[i]\u4e3a\u7b2ci\u4e2a\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\u7684\u964d\u96e8\u91cf\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u5148\u6c42\u51fa\u4eceY\u5e74\u5f00\u59cb\u5f80\u53f3\u67e5\u627e\u6700\u65e9\u80fd\u8fbe\u5230\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\u7f16\u53f7u\uff08\u4e4b\u540e\u7684\u5e74\u4efd\u964d\u96e8\u91cf\u5168\u90e8\u672a\u77e5\u5219\u4e3an+1\uff09\uff0c\n\n\u5982\u5df2\u77e5\u964d\u96e8\u91cf\u7684\u5e74\u4efd\u5206\u522b\u4e3a45 47 49 56 58 79\uff0c\u90a3\u4e4850\u5e74\u548c56\u5e74\u5bf9\u5e94\u7684\u7f16\u53f7\u90fd\u662f4\uff0856\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a4\uff09\uff0c\n\n\u5bf9\u4e8eX\u5e74\u4e5f\u6c42\u51fa\u5f80\u53f3\u67e5\u627e\u6700\u65e9\u80fd\u8fbe\u5230\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\u7f16\u53f7v\u3002\u7531\u4e8e\u5e74\u4efd\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u53ef\u7528\u4e8c\u5206\u67e5\u627e\u3002\n\n\u8fd9\u6837\uff0c\u6c42M\u5e74\u7684\u964d\u96e8\u91cf\u662f\u5426\u5df2\u77e5\uff0c\u53ea\u9700\u8981\u5148\u6c42\u51fa\u4eceM\u5e74\u5f00\u59cb\u5f80\u53f3\u67e5\u627e\u6700\u65e9\u80fd\u8fbe\u5230\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\u7f16\u53f7s\uff0c\n\n\u7136\u540e\u5224\u65ads != n + 1 && M == yea[s]\u3002\n\n\u52064\u79cd\u60c5\u51b5\uff1a\n\n1\u3001Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u90fd\u5df2\u77e5\uff1a\n\n\u7b2c\u4e00\u6b65\uff0c\u5982\u679cval[u] < val[v]\uff0c\u5c31\u8bf4\u660e\u4e0d\u6ee1\u8db3\u201cX\u5e74\u7684\u964d\u96e8\u91cf\u4e0d\u8d85\u8fc7Y\u5e74\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8f93\u51fafalse\u5e76continue\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u5728v == u + 1\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679cX == Y + 1\u5c31\u8f93\u51fatrue\uff08Y\u548cX\u4e4b\u95f4\uff08\u4e0d\u5305\u62ecY\u548cX\uff09\u6ca1\u6709\u6574\u6570\uff09\u5e76continue\uff0c\u5426\u5219\u8f93\u51famaybe\u5e76continue\uff08Y\u548cX\u4e4b\u95f4\u5b58\u5728\u964d\u96e8\u91cf\u672a\u77e5\u7684\u5e74\u4efd\uff09\u3002\n\n\u7b2c\u4e09\u6b65\uff0c\u67e5\u8be2[u + 1, v - 1]\u4e4b\u95f4\u7684\u6700\u5927\u503cmax\uff08\u53ef\u7528\u7ebf\u6bb5\u6811\u6216ST\u8868\u7ef4\u62a4\uff09\uff0c\u5982\u679cmax >= val[v]\uff0c\u5c31\u8bf4\u660e\u4e0d\u6ee1\u8db3\u201c\u5bf9\u4e8e\u4efb\u610f\n\nY\uff1cZ\uff1cX\uff0cZ\u5e74\u7684\u964d\u96e8\u91cf\u4e25\u683c\u5c0f\u4e8eX\u5e74\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8f93\u51fafalse\u5e76continue\u3002\n\n\u7b2c\u56db\u6b65\uff0c\u5224\u65ad\u662f\u5426X - Y == v - u\uff0c\u5982\u679c\u4e3a\u771f\u5c31\u8f93\u51fatrue\uff08Y\u5e74\u548cX\u5e74\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u964d\u96e8\u91cf\u672a\u77e5\u7684\u5e74\u4efd\uff09\uff0c\u5426\u5219\u8f93\u51famaybe\uff08\u53cd\u4e4b\uff09\u3002\n\n2\u3001Y\u5e74\u7684\u964d\u96e8\u91cf\u672a\u77e5\uff0cX\u5e74\u7684\u964d\u96e8\u91cf\u5df2\u77e5\uff1a\n\n\u7b2c\u4e00\u6b65\uff0c\u5982\u679cu == v\uff0c\u8f93\u51famaybe\uff08Y\u5e74\u548cX\u5e74\u4e4b\u95f4\u5e74\u4efd\u7684\u964d\u96e8\u91cf\u5168\u90e8\u672a\u77e5\uff09\u5e76continue\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u67e5\u8be2[u, v - 1]\u4e4b\u95f4\u7684\u6700\u5927\u503cmax\uff0c\u5982\u679cmax >= val[v]\uff0c\u5c31\u8bf4\u660e\u4e0d\u6ee1\u8db3\u201c\u5bf9\u4e8e\u4efb\u610fY\uff1cZ\uff1cX\uff0cZ\u5e74\u7684\u964d\u96e8\u91cf\u4e25\u683c\u5c0f\u4e8eX\u5e74\u201d\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8f93\u51fafalse\uff0c\u5426\u5219\u8f93\u51famaybe\uff08Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u53ea\u8981\u6709\u4e00\u4e2a\u672a\u77e5\u5c31\u4e0d\u80fd\u786e\u5b9a\u8fd9\u53e5\u8bdd\u662f\u5426\u4e00\u5b9a\u4e3a\u771f\uff09\u3002\n\n3\u3001Y\u5e74\u7684\u964d\u96e8\u91cf\u5df2\u77e5\uff0cX\u5e74\u7684\u964d\u96e8\u91cf\u672a\u77e5\uff1a\n\n\u7b2c\u4e00\u6b65\uff0c\u5982\u679cv == u + 1\uff0c\u8f93\u51famaybe\uff08Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u53ea\u8981\u6709\u4e00\u4e2a\u672a\u77e5\u5c31\u4e0d\u80fd\u786e\u5b9a\u8fd9\u53e5\u8bdd\u662f\u5426\u4e00\u5b9a\u4e3a\u771f\uff09\u5e76continue\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u67e5\u8be2[u + 1, v - 1]\u4e4b\u95f4\u7684\u6700\u5927\u503cmax\uff0c\u5982\u679cval[u] <= max\uff0c\u5c31\u8bf4\u660eX\u5e74\u7684\u964d\u96e8\u91cfM\u4e0d\u7ba1\u4e3a\u591a\u5c11\u90fd\u65e0\u6cd5\u540c\u65f6\u6ee1\u8db3M > max\u548c M <= val[u]\uff0c\u8f93\u51fafalse\uff0c\u5426\u5219\u8f93\u51famaybe\uff08Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u53ea\u8981\u6709\u4e00\u4e2a\u672a\u77e5\u5c31\u4e0d\u80fd\u786e\u5b9a\u8fd9\u53e5\u8bdd\u662f\u5426\u4e00\u5b9a\u4e3a\u771f\uff09\u3002\n\n4\u3001Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u90fd\u672a\u77e5\uff1a\u8f93\u51famaybe\uff08Y\u5e74\u548cX\u5e74\u7684\u964d\u96e8\u91cf\u53ea\u8981\u6709\u4e00\u4e2a\u672a\u77e5\u5c31\u4e0d\u80fd\u786e\u5b9a\u8fd9\u53e5\u8bdd\u662f\u5426\u4e00\u5b9a\u4e3a\u771f\uff09\u3002\n",
        "postTime": 1499403384,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "### Solution:\n\n\u3000\u3000\u672c\u9898\u9898\u76ee\u51fa\u7684\u662f\u771f\u7684\u597d\uff08\u9b3c\uff09\u3002\u3002\u3002`\uff5e`\u8fd9\u4e24\u5929\u8c03\u5f97\u6211\u2014\u2014\u5feb\u8981\u5410\u8840\u7684\u4e07\u6076\u4e4b\u6e90\u2026\u2026\n\n\u3000\u3000\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u5224\u65ad\u65f6\u7684\u987a\u5e8f\u505a\u4e00\u4e2a\u8c03\u6574\uff0c\u6309\u60c5\u51b5\u7684\u53ef\u80fd\u6027\u4ece\u591a\u5230\u5c11\uff0c\u5148\u5224\u65ad$false$\uff0c\u518d\u5224\u65ad$maybe$\uff0c\u6700\u540e\u5269\u4e0b\u7684\u624d\u662f$true$\u3002\n\n\u3000\u3000\u9898\u76ee\u4e2d\u4f1a\u7528\u5230\u67d0\u6bb5\u533a\u95f4\u7684\u6700\u5927\u503c\u8fdb\u884c\u5224\u65ad\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\uff08\u81f3\u4e8e\u533a\u95f4\u8fde\u7eed\u6027\u5c31\u6ca1\u5fc5\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\uff0c\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u4e8f\u6211\u5f00\u59cb\u50bb\u4e4e\u4e4e\u7528\u7ebf\u6bb5\u6811\u53bb\u5199`\uff5e`\uff09\u3002\n\n\u3000\u3000\u56e0\u4e3a\u8bfb\u5165\u65f6\u7684\u5e74\u4efd\u662f\u4fdd\u8bc1\u9012\u589e\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee$x,y$\uff08**\u5f53$x\\geq y$\u76f4\u63a5\u8f93$false$**\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e8c\u5206\u627e\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e$x$\u7684\u4f4d\u7f6e\uff0c\u548c$y$\u7684\u4f4d\u7f6e\uff0c\u4e0d\u59a8\u5047\u8bbe\u4e3a$st$\u548c$ed$\uff0c\u7136\u540e\u5224\u65ad\u8fb9\u754c\u7684\u5e74\u4efd\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u67e5\u8be2\u51fa$st+1$\u5230$ed-1$\u7684\u6700\u5927\u503c\uff08**\u56e0\u4e3a\u8981\u53d6\u51fa\u4e2d\u95f4\u4e00\u6bb5\u7684\u6700\u5927\u503c\uff0c\u7528\u5176\u548c\u4e24\u7aef\u6bd4\u8f83\uff0c\u6ce8\u610f\u5224\u65ad\u5de6\u7aef\u70b9\u5e74\u4efd\u4e0d\u786e\u5b9a\u65f6\u8981\u67e5\u8be2$st$\u5230$ed-1$\u7684\u6700\u5927\u503c**\uff09\u3002\n\n\u3000\u3000\u5224\u65ad\u65f6\uff1a\n\n\u3000\u3000\u3000\u3000**\u5148\u5224$false$\uff1a**\n\n\u3000\u3000\u3000\u3000\u3000\u30001\u3001\u5f53\u53f3\u7aef\u70b9\u5e74\u4efd\u786e\u5b9a\uff0c\u4e14\u4e2d\u95f4\u5e74\u4efd\u6700\u5927\u964d\u96e8\u91cf\u5927\u4e8e\u7b49\u4e8e\u53f3\u7aef\u70b9\u964d\u96e8\u91cf  \n\n\u3000\u3000\u3000\u3000\u3000\u30002\u3001\u5f53\u5de6\u7aef\u70b9\u5e74\u4efd\u786e\u5b9a\uff0c\u4e14\u4e2d\u95f4\u5e74\u4efd\u6700\u5927\u964d\u96e8\u91cf\u5927\u4e8e\u7b49\u4e8e\u5de6\u7aef\u70b9\u964d\u96e8\u91cf \n\n\u3000\u3000\u3000\u3000\u3000\u30003\u3001\u5f53\u5de6\u53f3\u7aef\u70b9\u5e74\u4efd\u90fd\u786e\u5b9a\uff0c\u4e14\u5de6\u7aef\u70b9\u964d\u96e8\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u7aef\u70b9\u964d\u96e8\u91cf\n\n\u3000\u3000\u3000\u3000**\u518d\u5224$maybe$:**\n\n\u3000\u3000\u3000\u3000\u3000\u30001\u3001\u5f53\u5de6\u53f3\u7aef\u70b9\u4e4b\u5dee\u4e0d\u7b49\u4e8e\u5de6\u53f3\u7aef\u70b9\u5e74\u4efd\u4e4b\u5dee\uff08\u7b49\u4ef7\u4e8e\u5e74\u4efd\u4e0d\u8fde\u7eed\uff0c\u4e5f\u5c31\u662f\u6211\u524d\u9762\u6240\u8bf4\u7684\u66f4\u597d\u7684\u5224\u65ad\u533a\u95f4\u8fde\u7eed\u7684\u65b9\u6cd5\uff09\n\n\u3000\u3000\u3000\u3000\u3000\u30002\u3001\u5de6\u7aef\u70b9\u5e74\u4efd\u4e0d\u786e\u5b9a\n\n\u3000\u3000\u3000\u3000\u3000\u30003\u3001\u53f3\u7aef\u70b9\u5e74\u4efd\u4e0d\u786e\u5b9a\n\n\u3000\u3000\u3000\u3000\u3000\u3000\uff08\u56e0\u4e3a\u5df2\u7ecf\u5207\u6389$false$\u7684\u60c5\u51b5\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u60c5\u51b5\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7167\u4e0a\u9762\u7684\u5224\u65ad\uff01\uff09\n\n\u3000\u3000\u3000\u3000**\u6700\u540e\u5224\u65ad$true$:**\n    $\\;\\;$\u82e5\u4e0a\u9762\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u80af\u5b9a\u662f$true$\n\t\n$\\quad\\;\\;$\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u672c\u9898\u5f88\u503c\u5f97\u505a\uff0c\u9700\u8981\u8003\u8651\u5f88\u5168\u9762\uff0c\u81f3\u5c11\u6211\u8fd8\u4e0d\u591f\u7a33\uff0c\u540c\u65f6\u611f\u8c22\u5de8\u4f6c$old-fish$\u63d0\u4f9b\u7684\u65b9\u6cd5\u3002\n\n$\\quad\\;\\;$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2\uff1a[five20](https://www.cnblogs.com/five20/p/9123773.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff09\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define il inline\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\n#define For(i,a,b) for(int (i)=(a);(i)<=(b);(i)++)\n#define Max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\nconst int N=200005;\nint n,m,num[N],ls[N],rs[N];\nint ye[N],co[N];\nbool f[N];\nstruct node{\n    int ans,f;\n};\n\nil int gi(){\n    int a=0;char x=getchar();bool f=0;\n    while((x<'0'||x>'9')&&x!='-')x=getchar();\n    if(x=='-')x=getchar(),f=1;\n    while(x>='0'&&x<='9')a=(a<<3)+(a<<1)+x-48,x=getchar();\n    return f?-a:a;\n}\n\nil void pushup(int rt){\n    if(rs[rt<<1]==ls[rt<<1|1]-1)f[rt]=f[rt<<1]&f[rt<<1|1];\n    rs[rt]=rs[rt<<1|1];ls[rt]=ls[rt<<1];\n    num[rt]=Max(num[rt<<1],num[rt<<1|1]);\n}\n\nil void build(int l,int r,int rt){\n    if(l==r){rs[rt]=ls[rt]=ye[l],num[rt]=co[l],f[rt]=1;return;}\n    int m=l+r>>1;\n    build(lson),build(rson);\n    pushup(rt);\n}\n\nil node query(int L,int R,int l,int r,int rt){\n    if(L<=l&&R>=r){\n        node tmp;\n        tmp.ans=num[rt],tmp.f=f[rt];\n        return tmp;\n    }\n    int m=l+r>>1;\n    node tmp;\n    tmp.ans=0,tmp.f=1;\n    if(L<=m){\n        node x=query(L,R,lson);\n        tmp.ans=Max(tmp.ans,x.ans);\n        tmp.f&=x.f;\n    }\n    if(R>m){\n        node x=query(L,R,rson);\n        tmp.ans=Max(tmp.ans,x.ans);\n        tmp.f&=x.f;\n    }\n    return tmp;\n}\n\nint main(){\n    n=gi();\n    For(i,1,n)ye[i]=gi(),co[i]=gi();\n    build(1,n,1);\n    m=gi();\n    int x,y;\n    while(m--){\n        x=gi(),y=gi();\n        if(x>=y){printf(\"false\\n\");continue;}\n        int st=lower_bound(ye+1,ye+n+1,x)-ye,ed=lower_bound(ye+1,ye+n+1,y)-ye;\n        bool fl,fr;int op=0;\n        fl=ye[st]==x,fr=ye[ed]==y;\n        if(!fl)st--;\n        if(st+1<=ed-1)op=query(st+1,ed-1,1,n,1).ans;\n        if((op>=co[ed]&&fr)||(co[st]<co[ed]&&fl&&fr)||(op>=co[st]&&fl))printf(\"false\\n\");\n        else if(ed-st!=ye[ed]-ye[st]||!fr||!fl)printf(\"maybe\\n\");\n        else printf(\"true\\n\");\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1527933520,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u5199\u7ed9\u5e73\u8861\u6811\u4fe1\u4ef0\u73a9\u5bb6\u7684\u4e00\u7bc7\u9898\u89e3\u3002  \n\n\u8fd9\u9898\u5982\u679c\u7528\u7ebf\u6bb5\u6811\u5199\uff0c\u9700\u8981\u5982\u79bb\u6563\u5316\u7b49\u8bf8\u591a\u5947\u6280\u6deb\u5de7\u3002\u4f46\u5e73\u8861\u6811\u76f8\u5bf9\u7ebf\u6bb5\u6811\uff0c\u62e5\u6709\u66f4\u52a0\u7075\u6d3b\u7684\u7ed3\u6784\uff0c\u66f4\u9002\u5408\u89e3\u51b3\u590d\u6742\u7684\u533a\u95f4\u95ee\u9898\u3002  \n\n\u4e8e\u662f\uff0c\u8003\u8651\u5bf9\u5e73\u8861\u6811\u8fdb\u884c\u9b54\u6539\u3002\u6211\u4eec\u53d1\u73b0\u79bb\u6563\u5316\u7684\u672c\u8d28\uff0c\u662f\u5c06\u8303\u56f4\u6781\u5927\u7684\u5e74\u4efd\u6620\u5c04\u8fdb\u4e86\u4e00\u4e2a\u8f83\u5c0f\u7684\u8303\u56f4\u3002  \n\n\u6620\u5c04\u662f\u4ec0\u4e48\uff1f~~\u5c31\u662fstd::map\u5440~~  \n\n\u90a3\u4e48\u6211\u4eec\u6548\u4effmap\uff0c\u5c06\u5e73\u8861\u6811\u5199\u6210\u952e-\u503c\u5bf9\u7684\u5f62\u5f0f\uff08\u5e74\u4efd\u4e3a\u952e\uff0c\u964d\u96e8\u91cf\u4e3a\u503c\uff09\uff0c\u4fbf\u53ef\u4ee5\u5bf9\u5de8\u5927\u7684\u5e74\u4efd\u533a\u95f4\u8fdb\u884c\u67e5\u8be2\u3002  \n\n\u81f3\u4e8e\u4ee3\u7801\u5b9e\u73b0\uff0c\u7528\u6587\u827a\u5e73\u8861\u6811\u5373\u53ef\u3002  \n\n\u8fd9\u91cc\u91c7\u7528$fhqTreap$\u6765\u5b9e\u73b0\u6587\u827a\u5e73\u8861\u6811\uff0c\u4ee3\u7801\u4e2d\u6709\u66f4\u8be6\u7ec6\u7684\u6ce8\u91ca\u3002  \n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nstruct Node\n{\n    int year;//\u4ee5\u5e74\u4efd\u4f5c\u4e3a\u952e\n    int water;//\u4ee5\u964d\u96e8\u91cf\u4f5c\u4e3a\u503c\n    int max_water;//\u5b50\u6811\u4e2d\u6700\u5927\u964d\u96e8\u91cf\n    int s;//\u5b50\u6811\u5927\u5c0f\n    Node *lc,*rc;\n    int pri;\n    Node(int y,int w):\n        year(y),\n        water(w),\n        max_water(w),\n        s(1),\n        lc(NULL),\n        rc(NULL),\n        pri(rand()) {}\n    void maintain()//\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\n    {\n        s=1;\n        max_water=water;\n        if(lc!=NULL)\n        {\n            s+=lc->s;\n            if(max_water<lc->max_water)max_water=lc->max_water;\n        }\n        if(rc!=NULL)\n        {\n            s+=rc->s;\n            if(max_water<rc->max_water)max_water=rc->max_water;\n        }\n    }\n};\nNode *_root;\nNode *merge(Node *l,Node *r)//fhqTreap\u5e38\u89c4\u64cd\u4f5c\uff0c\u4e0d\u591a\u8bf4\n{\n    if(l==NULL)return r;\n    if(r==NULL)return l;\n    if(l->pri<r->pri)\n    {\n        l->rc=merge(l->rc,r);\n        l->maintain();\n        return l;\n    }\n    else\n    {\n        r->lc=merge(l,r->lc);\n        r->maintain();\n        return r;\n    }\n}\n\nvoid split(Node *nroot,int k,Node *&l,Node *&r)\n//\u5c06\u4ee5nroot\u4e3a\u6839\u7684\u5b50\u6811\u5206\u4e3a\u5e74\u4efd\u5c0f\u4e8ek\u3001\u5927\u4e8e\u7b49\u4e8ek\u7684\u90e8\u5206\n{\n    if(nroot==NULL)\n    {\n        l=NULL;\n        r=NULL;\n        return;\n    }\n    if(nroot->year<k)\n    {\n        l=nroot;\n        split(l->rc,k,l->rc,r);\n    }\n    else\n    {\n        r=nroot;\n        split(r->lc,k,l,r->lc);\n    }\n    nroot->maintain();\n}\n\nint query(int l,int r)//true\u8fd4\u56de1\uff0cfalse\u8fd4\u56de0\uff0cmaybe\u8fd4\u56de-1\n{\n    Node *ptr1,*ptrl,*ptr,*ptrr,*ptr2;\n    split(_root,l,ptr1,ptrl);\n    split(ptrl,l+1,ptrl,ptr);\n    split(ptr,r,ptr,ptrr);\n    split(ptrr,r+1,ptrr,ptr2);\n    //\u6309l\u3001r\u5c06\u6574\u68f5\u6811\u62c6\u62105\u90e8\u5206\n    if(ptrl!=NULL&&ptrr!=NULL)//\u9996\u5c3e\u4e24\u5e74\u90fd\u77e5\u9053\n    {\n        if(ptrl->water<ptrr->water)//\u5224\u65ad\u5c3e\u5e74\u964d\u96e8\u91cf\u662f\u5426\u5927\u4e8e\u9996\u5e74\n        {\n            _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n            return 0;\n        }\n        if(ptr!=NULL&&ptr->max_water>=ptrr->water)//\u5224\u65ad\u5c3e\u5e74\u662f\u5426\u4e3a\u6700\u5927\n        {\n            _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n            return 0;\n        }\n        if((ptr==NULL?0:ptr->s)<r-l-1)//\u5224\u65ad\u9996\u5c3e\u4e24\u5e74\u95f4\u662f\u5426\u6240\u6709\u5e74\u4efd\u90fd\u5df2\u77e5\n        {\n            _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n            return -1;\n        }\n        _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));//\u5982\u679c\u90fd\u6b63\u786e\u5c31\u662f\u5bf9\u7684\n        return 1;\n    }\n    if(ptrl==NULL&&ptrr!=NULL)//\u9996\u5e74\u672a\u77e5\uff0c\u5c3e\u5e74\u5df2\u77e5\n    {\n        if(ptr!=NULL&&ptr->max_water>=ptrr->water)//\u5224\u65ad\u5c3e\u5e74\u662f\u5426\u6700\u5927\n        {\n            _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n            return 0;\n        }\n    }\n    if(ptrl!=NULL&&ptrr==NULL)//\u9996\u5e74\u5df2\u77e5\uff0c\u5c3e\u5e74\u672a\u77e5\n    {\n        if(ptr!=NULL&&ptr->max_water>=ptrl->water)\n        //\u82e5\u9996\u5c3e\u4e24\u5e74\u4e4b\u95f4\u6709\u67d0\u5e74\u964d\u96e8\u91cf\u5927\u4e8e\u7b49\u4e8e\u9996\u5e74\uff0c\u5219\u65e0\u8bba\u5982\u4f55\u4e0d\u6ee1\u8db3\u6761\u4ef6\n        {\n            _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n            return 0;\n        }\n        _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));\n        return -1;\n    }\n    _root=merge(merge(ptr1,ptrl),merge(merge(ptr,ptrr),ptr2));//\u82e5\u90fd\u4e0d\u884c\uff0c\u5219\u7ed3\u8bba\u65e0\u4ece\u77e5\u6653\n    return -1;\n}\nint main()//\u4e3b\u7a0b\u5e8f\u76f8\u5f53\u7b80\u5355\uff0c\u4e0d\u89e3\u91ca\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        int y,w;\n        scanf(\"%d%d\",&y,&w);\n        _root=merge(_root,new Node(y,w));\n    }\n    int m;\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        int l,r;\n        scanf(\"%d%d\",&l,&r);\n        int ans(query(l,r));\n        if(ans==1)\n        {\n            puts(\"true\");\n            continue;\n        }\n        if(ans==0)\n        {\n            puts(\"false\");\n            continue;\n        }\n        if(ans==-1)\n        {\n            puts(\"maybe\");\n            continue;\n        }\n    }\n}\n```\n\n",
        "postTime": 1552350940,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "- \u770b\u5230\u8fd9\u4e2a\u9898\u65f6\uff1a\n\u54c7\u8fd9\u4e2a\u7d2b\u9898\u770b\u8d77\u6765\u597d\u7b80\u5355\u554a\uff01\u6211\u8981\u5207\u6389\uff01\n- \u8c03\u8bd5\u65f6\uff1a\n\u5929\u554a\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u9519\u4e86\uff0c\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u53c8\u9519\u4e86\uff1f\u554a\u554a\u554a\u554a\uff01~~\u4e8e\u662f\u4e0d\u65ad\u4ea4\u4e0d\u65adWA~~\n- AC\u540e\uff1a\n\u5410\u8840\u3002\u3002\u3002\n\n_\u4ee5\u4e0a\u771f\u5b9e\u5199\u7167$\\Uparrow$_\n\n\u5404\u4f4d\u5927\u4f6c\u5bf9\u4e8e\u89e3\u6cd5\u8bb2\u7684\u633a\u8be6\u7ec6\u4e86\uff0c\u6211\u518d\u8865\u5145\u4e0b\u72ec\u7acb\u601d\u8003\u7684\u8fc7\u7a0b\uff08\u6ca1\u770b\u9898\u89e3\u7684\uff01\uff09\u3002\u5171\u80fd\u5206\u4e94\u79cd\u60c5\u51b5\uff1a\n1. $y>=x$\u65e0\u89e3\uff0c\u51fa$false$\n2. $y$\u548c$x$\u5747\u672a\u77e5\uff0c$maybe$\n3. \u6709\u4e00\u4e2a\u672a\u77e5\uff0c\u5224\u65ad\u53e6\u4e00\u4e2a\u4e0e\u533a\u95f4\u7684\u5927\u5c0f\u5173\u7cfb$maybe$\u6216$false$\n4. $y$\u548c$x$\u5747\u5df2\u77e5\u4f46\u4e2d\u95f4\u6709\u672a\u77e5\u7684\uff0c\u6309\u9898\u610f\u5224\u65ad$maybe$\u6216$false$\n5. \u5305\u62ec$y$\u548c$x$\u7684\u6574\u4e2a\u533a\u95f4\u90fd\u5df2\u77e5\uff0c\u6309\u9898\u610f\u5224\u65ad$true$\u6216$false$\n\n\u81f3\u4e8e\u533a\u95f4\u6700\u503c\uff0c~~\u66b4\u529b\u554a\uff01\uff08\u7a33TLE\u7684\uff09~~\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6216st\u8868\u7ef4\u62a4\u3002\u672c\u849f\u84bb\u9009\u62e9\u7684\u662fst\u8868~~\u56e0\u4e3a\u61d2~~\u3002\u79bb\u6563\u5316\u7684\u5904\u7406\u5f53\u7136\u4e5f\u5f97\u6709\uff0c\u65e2\u7136\u90fd\u7528stl\u4e86\u5e72\u8106\u7528map\u591a\u68d2\u5462~~\u8fd8\u662f\u61d2~~\uff01\n#### \u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\nusing namespace std;\nint st[50005][20];\nint n,m;\nmap<int,int> id;\n//\u5efast\u8868\nvoid build(){\n\tfor(int j=1;1<<j<=n;j++)\n\t\tfor(int i=1;i+(1<<j)-1<=n;i++)\n\t\t\tst[i][j]=max(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n}\n//\u67e5\u8be2\ninline int RMQ(int l,int r){\n\tint k;\n\tfor(k=0;1<<(k+1)<=(r-l+1);k++);\n\treturn max(st[l][k],st[r-(1<<k)+1][k]);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tint y;\n\t\tscanf(\"%d%d\",&y,&st[i][0]);\n\t\tid[y]=i;//map\u63d2\u5165\uff0c\u81ea\u52a8\u79bb\u6563\u5316\u4e86\n\t}\n\tbuild();\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&y,&x);\n\t\tif(y>=x){\n\t\t\tprintf(\"false\\n\");\n\t\t\tcontinue;\n\t\t}//\u60c5\u51b51\n\t\tbool kx=id.count(x),ky=id.count(y),flag;\n\t\tif(!kx&&!ky){\n\t\t\tprintf(\"maybe\\n\");\n\t\t\tcontinue;\n\t\t}//\u60c5\u51b52\n\t\tint xx,yy;\n\t\tmap<int,int>::iterator itx,ity;\n\t\tity=id.lower_bound(y);\n\t\titx=id.lower_bound(x);\n\t\tif(ity==id.end()){\n\t\t\tprintf(\"maybe\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tyy=ity->second;\n\t\txx=itx==id.end()?id.size()+1:itx->second;\n\t\tif(!ky) yy--;\n\t\tint rmq=yy+1<=xx-1?RMQ(yy+1,xx-1):0;\n\t\tif(!ky) flag=rmq<st[xx][0];//\u60c5\u51b53-1\n\t\telse if(!kx) flag=st[yy][0]>rmq;//\u60c5\u51b53-2\n\t\telse flag=st[yy][0]>=st[xx][0]&&st[xx][0]>rmq;\n        //\u60c5\u51b54\u548c5\u53ef\u4ee5\u7c7b\u6bd4\u5904\u7406\n\t\tif(ky&&kx&&yy-xx==y-x){\n\t\t\tif(flag) printf(\"true\\n\");\n\t\t\telse printf(\"false\\n\");\n\t\t}\n\t\telse{\n\t\t\tif(flag) printf(\"maybe\\n\");\n\t\t\telse printf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u6700\u540e~~\u539a\u989c\u65e0\u803b\u5730~~\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u6765\u8e29[\u672c\u849f\u84bb\u7684\u535a\u5ba2](https://www.luogu.org/blog/xuefengwuzhe/)",
        "postTime": 1538997017,
        "uid": 57849,
        "name": "\u96ea\u98ce\u821e\u8005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "> [\u542c\u8bf4\u535a\u5ba2\u89c2\u770b\u6548\u679c\u66f4\u4f73](https://www.cnblogs.com/ailanxier/p/13408783.html)\n\n&emsp;&emsp;\u8fd9\u9053\u9898\u662f\u6bd4\u8f83\u7ecf\u5178\u7684 $RMQ$ \u95ee\u9898,\u627e\u5230X\u548cY\u5e74\u95f4\u7684\u6700\u503c\u6765\u8fdb\u884c\u5224\u65ad\u771f\u5047 , \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u662f\u6bd4\u8f83\u7b80\u5355\u597d\u5199\u7684\u3002\u7136\u800c\u8fd9\u53ea\u662f\u4e00\u4e2a\u5c0f\u5224\u65ad\uff0c\u6bd4\u8f83\u96be\u7684\u662f\u5224\u65ad \n $maybe$ \u3002\u5982\u679c\u6ca1\u6709\u60f3\u597d\u76f4\u63a5\u6253\u4ee3\u7801\u4f1a\u8c03\u5f88\u4e45\uff08~~\u6ca1\u9519\u5c31\u662f\u6211~~\uff09\u3002\u600e\u4e48\u7ef4\u62a4\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c\u6211\u5c31\u4e0d\u518d\u8fd9\u91cc\u8d58\u8ff0\u4e86\uff0c\u4e0d\u61c2\u7ebf\u6bb5\u6811\u7684\u5148\u53bb\u5165\u95e8\uff08\u6b64\u9898\u4e5f\u662f\u7ebf\u6bb5\u6811\u5165\u95e8\u9898\uff09\u3002\u6211\u8bb2\u51e0\u4e2a\u5f88\u5751\u7684\u70b9\uff08~~\u6bd4\u8f83\u5751\u6211\u7684\u70b9~~\uff09\uff1a\n\n&emsp;&emsp;1.\u8be2\u95ee\u7684X\u5e74\u964d\u96e8\u91cf\u4e0d\u8d85\u8fc7Y\uff0c\u4f46\u662f\u4e2d\u95f4\u5e74\u4efd\u964d\u96e8\u91cf\u4e00\u5b9a\u5c0f\u4e8eX\uff08\u6ce8\u610fX\u548cY\u987a\u5e8f\uff09\u3002\n\n&emsp;&emsp;2.X\u53ef\u80fd\u7b49\u4e8eY+1\u5e74\uff0c\u4e5f\u5c31\u662f\u4e0d\u7528\u8003\u8651\u4e2d\u95f4\u5e74\u4efd\u3002\n\n&emsp;&emsp;3.\u533a\u95f4\u67e5\u8be2\u6700\u503c\u7684\u64cd\u4f5c\u8981\u7559\u610f\u8303\u56f4\uff0c\u4e0d\u540c\u60c5\u51b5\u4e0b\u67e5\u8be2\u7684\u8303\u56f4\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8fd9\u70b9\u9700\u8981\u81ea\u5df1\u7406\u89e3\u3002\n\n&emsp;&emsp;4.\u9519\u7684\u6700\u591a\u7684 $maybe$ \u548c $false$ \u7684\u5224\u65ad\uff0c\u8981\u6e05\u695a\u77e5\u9053\u54ea\u4e2a\u662f\u5df2\u77e5\u91cf\uff0c\u54ea\u4e2a\u662f\u672a\u77e5\u91cf\uff08\u7279\u522b\u662fX\u548cY\u662f\u672a\u77e5\u91cf\u7684\u65f6\u5019\uff09\u3002\n\n&emsp;&emsp;\u672c\u9898\u4e2d\u6211\u5206\u4e86\u56db\u79cd\u60c5\u51b5\u5206\u6790\uff0c\u8fd8\u6709\u4f17\u591a $if$ \u548c $else$ ,\u9700\u8981\u683c\u5916\u5c0f\u5fc3\u3002\u6211\u5bf9\u8f93\u51fa\u8fdb\u884c\u7b80\u5316\uff0c\u5e94\u8be5\u4f1a\u66f4\u52a0\u76f4\u89c2\u4e00\u70b9\u3002\n\n## $Code$\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define For(i,sta,en) for(int i = sta;i <= en;i++)\n#define lowbit(x) x&(-x)\n#define mid (l+r)/2\n#define ls(x) x<<1\n#define rs(x) x<<1|1\n#define speedUp_cin_cout ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);\ntypedef long long ll;\ntypedef __int128 lll;\nconst int maxn = 2e5+9;\nint t[maxn],n,m;  //t \u8bb0\u5f55\u533a\u95f4\u6700\u5927\u503c\nint year[maxn],rain[maxn];\n\nvoid update(int now,int l,int r,int pos,int value){\n    if(l == r) {t[now] = value;return;}\n    if(pos <= mid) update(ls(now),l,mid,pos,value);\n    else update(rs(now),mid+1,r,pos,value);\n    t[now] = max(t[ls(now)],t[rs(now)]);  //\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\n}\n\nint query(int now,int l,int r,int x,int y){  //\u8be2\u95eex\u5230y\u533a\u95f4\u6700\u5927\u503c\n    if(x <= l&&r <= y) return t[now];\n    int an = 0;\n    if(x <= mid) an = query(ls(now),l,mid,x,y);\n    if(y > mid) an = max(an,query(rs(now),mid+1,r,x,y));\n    return an;\n}\nint main(){\n    speedUp_cin_cout  //\u8bfb\u5199\u4f18\u5316\n    #define maybe cout<<\"maybe\"<<endl;continue;//\u8ba9\u8f93\u51fa\u6ca1\u8fd9\u4e48\u96be\u770b\n    #define false cout<<\"false\"<<endl;continue;\n    #define true cout<<\"true\"<<endl;continue;\n    cin>>n;\n    int y,r;\n    For(i,1,n)  {\n        cin>>y>>r;\n        year[i] = y;\n        rain[i] = r;\n        update(1,1,n,i,r);\n    }\n    cin>>m;\n    int Y,X,p1,p2,f1,f2; //p1 p2\u662f\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e,f1 f2\u4e24\u4e2a\u6807\u8bb0\u8bb0\u5f55X Y\u662f\u5426\u5df2\u77e5\u964d\u6c34\u91cf\n    For(i,1,m){\n        cin >> Y >> X;\n        p1 = lower_bound(year+1,year+1+n, Y) - year; //year\u5728\u8f93\u5165\u65f6\u4fdd\u8bc1\u662f\u6709\u5e8f\u7684\n        p2 = lower_bound(year+1,year+1+n, X) - year;\n        f1 = (p1 == n + 1|| year[p1] != Y) ? 0 : 1;\n        f2 = (p2 == n + 1 ||year[p2] != X) ? 0 : 1;\n        //\u4e24\u5e74\u90fd\u4e0d\u77e5\u9053,\u53ef\u4ee5\u4e0d\u7ba1\u4e2d\u95f4\u5982\u4f55\uff0c\u90fd\u662f\u672a\u77e5\u7684\n        if(!f1 && !f2) {maybe}\n        //\u4e24\u5e74\u90fd\u77e5\u9053\n        if(f1 && f2) {\n            if(rain[p1] < rain[p2]) {false}        //X\u5e74\u964d\u6c34\u91cf\u591a\u4e8eY\u5e74\uff0c\u9519\n            if(Y + 1 == X ) {true}                 //X = Y+1\u5e74\uff0c\u4e2d\u95f4\u6ca1\u6709\u5176\u4ed6\u5e74\u4efd\uff0c\u800cX\u5e74\u964d\u6c34\u91cf\u4e00\u5b9a\u4e0d\u5927\u4e8eY\uff0c\u5bf9\n            if(p1 + 1 == p2) {maybe}               //X\u4e0d\u662fY\u540e\u4e00\u5e74,\u4f46\u662fX\u548cY\u5e74\u95f4\u90fd\u4e0d\u77e5\u9053\u964d\u96e8\u91cf\uff0c\u672a\u77e5\n            int maxGap = query(1,1,n,p1+1,p2-1);   //X\u548cY\u95f4\u5b58\u5728\u5df2\u77e5\u964d\u6c34\u91cf\u7684\u5e74\u4efd\uff0c\u5728\u5176\u4e2d\u627e\u5230\u964d\u96e8\u91cf\u6700\u5927\u503c\n            if(maxGap >= rain[p2]) {false}         //\u5927\u4e8e\u7b49\u4e8e\u90fd\u6ee1\u8db3\u4e25\u683c\u5c0f\u4e8e\uff0c\u9519\n            if(p2 - p1 == X - Y) {true}            //\u6ee1\u8db3\u4e25\u683c\u5c0f\u4e8e\u540e\u518d\u5224\u65adX\u548cY\u95f4\u6bcf\u5e74\u964d\u96e8\u91cf\u662f\u5426\u90fd\u5df2\u77e5\n            else maybe                             //\u4e0d\u662f\u90fd\u5df2\u77e5\uff0c\u5373\u672a\u77e5\n        }\n        //\u540e\u4e00\u5e74\u4e0d\u77e5\u9053\uff0cp2 \u4e00\u5b9a\u5927\u4e8e p1,\u53ea\u53ef\u80fd\u662fmaybe\u6216\u8005false\n        else if(f1){\n            if( p1 + 1 == p2 ) {maybe}\n            int maxGap = query(1,1,n,p1+1,p2-1);   //\u6ce8\u610f\u67e5\u8be2\u8303\u56f4\n            if(maxGap >= rain[p1]) { false }\n            else maybe\n        }\n        //\u524d\u4e00\u5e74\u4e0d\u77e5\u9053\uff0cp1 \u6709\u53ef\u80fd\u7b49\u4e8e p2,\u53ea\u53ef\u80fd\u662fmaybe\u6216\u8005false\n        else{\n            if(p1  == p2 ) {maybe}\n            int maxGap = query(1,1,n,p1,p2-1);    //\u6ce8\u610f\u67e5\u8be2\u8303\u56f4\n            if(maxGap >= rain[p2]) { false }\n            else { maybe }\n        }\n    }\n    return 0;\n}\n```\n**\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u4e00\u6b21AC\u8fd9\u9053\u9898<(\uffe3\ufe36\uffe3)\u2197[GO!]**",
        "postTime": 1596167725,
        "uid": 281293,
        "name": "ailanxier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u6628\u5929\u521a\u770b\u5b8c\u300a\u5929\u6c14\u4e4b\u5b50\u300b\u7a81\u7136\u770b\u5230\u8fd9\u9053\u9898\uff0c\u5c31\u60f3\u505a\u4e00\u4e0b\n\n\u770b\u4e86\u4e00\u4e0b\u6240\u6709\u9898\u89e3\uff0c\u7adf\u7136\u6ca1\u6709\u66b4\u529b\u7684\u3002\n\nn<=50000,m<=10000,\u518d\u52a0\u4e0a\u5224\u4e3afalse\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\n\n\u6240\u4ee5O(nm)\u7684\u65b9\u6cd5\u7684\u671f\u671b\u8fd0\u884c\u6b21\u6570\u5c0f\u4e8e2.5\u4ebf\uff0c\u663e\u7136\u662f\u53ef\u4ee5\u6c34\u8fc7\u7684\u3002\n\n\u6211\u4eec\u5148\u7528map\u5b58\u4e0b\u6bcf\u4e2a\u5e74\u4efd\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u66b4\u529b\u4ecey\u626b\u5230x\u3002\n\n\u4e00\u5171\u67094\u79cd\u60c5\u51b5(\u4ee5\u4e0b\u5927\u4e8e\u5c0f\u4e8e\u53f7\u7686\u4e3a\u6bd4\u8f83\u964d\u96e8\u91cf)\n\n1.y,x\u90fd\u672a\u77e5\uff0c\u76f4\u63a5\u8f93\u51famaybe\n\n2.y\u672a\u77e5,x\u5df2\u77e5,\u82e5y\u5230x\u4e2d\u6709\u6570>=x\uff0c\u5219\u8f93\u51fafalse\uff0c\u5426\u5219\u4e3amaybe\n\n3.y\u5df2\u77e5,x\u672a\u77e5\uff0c\u82e5y\u5230x\u4e2d\u6709\u6570>=y,\u5219\u8f93\u51fafalse\uff0c\u5426\u5219\u4e3amaybe\n\n4.y,x\u90fd\u5df2\u77e5\uff0c\u82e5x>y\u6216y\u5230x\u4e2d\u6709\u6570>=x,\u5219\u8f93\u51fafalse\uff0c\u5426\u5219\u82e5y\u5230x\u4e2d\u6240\u6709\u5e74\u4efd\u7684\u964d\u96e8\u91cf\u90fd\u5df2\u77e5\uff0c\u5219\u8f93\u51fatrue\uff0c\u5426\u5219\u8f93\u51famaybe\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50010;\nmap<int,int> mp;\nint n,m,a[N],r[N];\nint main()\n{\n\tscanf(\"%d\",&n);\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",a+i,r+i);\n\t\tmp[a[i]]=i;\n\t}\n\tmp[1e9+7]=n+1;\n\tscanf(\"%d\",&m);\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint y,x;\n\t\tscanf(\"%d%d\",&y,&x);\n    if(mp.find(y)==mp.end()&&mp.find(x)==mp.end())\n\t\t{\n\t\t\tprintf(\"maybe\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif(mp.find(y)==mp.end())\n\t\t{\n\t\t\tint k=mp.upper_bound(y)->second;\n\t\t\tint j=mp.find(x)->second;\n\t\t\tbool flag=true;\n\t\t\twhile(k<j&&flag)\n\t\t\t\tif(r[k++]>=r[j]) flag=false;\n\t\t\tif(flag) printf(\"maybe\\n\");\n\t\t\telse printf(\"false\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif(mp.find(x)==mp.end())\n\t\t{\n\t\t\tint k=mp.upper_bound(x)->second-1;\n\t\t\tint j=mp.find(y)->second;\n\t\t\tbool flag=true;\n\t\t\twhile(j<k&&flag)\n\t\t\t\tif(r[k--]>=r[j]) flag=false;\n\t\t\tif(flag) printf(\"maybe\\n\");\n\t\t\telse printf(\"false\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tbool flag=true;\n\t\tint j=mp.find(y)->second;\n\t\tint k=mp.find(x)->second;\n\t\tif(r[k]>r[j]) flag=false;\n\t\tfor(int p=j+1;p<k&&flag;p++)\n\t\t\tif(r[p]>=r[k]) flag=false;\n\t\tif(flag) if(k-j==x-y) printf(\"true\\n\");\n\t\t\t\t else printf(\"maybe\\n\");\n\t\telse printf(\"false\\n\");\n\t}\n\treturn 0;\n}\n```\n\u6ca1\u52a0\u4efb\u4f55\u4f18\u5316\uff0c\u6700\u6162\u7684\u70b9\u8dd1\u4e86944ms\uff0c\u66b4\u529b\u5361\u7740\u8fc7\u3002",
        "postTime": 1572872267,
        "uid": 30222,
        "name": "1261687299kid",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "## ~~\u51ed\u4ec0\u4e48\u662f\u4e2a\u7d2b\u9898\u554a\u778e\u8ba8\u8bba\u4e0b\u5c31\u8fc7\u4e86~~\n\n## ~~\u5e94\u8be5\u5c31\u662f\u4e2a\u84dd\u554a~~\n\n\u6765\u6765\u6765\u5f00\u59cb\u8ba8\u8bba\n\n\u9996\u5148\u8bb0$Y$\u4e3a$l$\uff0c\u8bb0$X$\u4e3a$r$\uff08\u8fd9\u6837\u6bd4\u8f83\u76f4\u89c2\uff09\n\n\u4ee5\u4e0b\u63d0\u5230\u7684$y[i],r[i]$\u4e0e\u9898\u76ee\u4e2d\u7684\u610f\u4e49\u76f8\u540c\n```cpp\n\u5982\u679c\u7b2c$r$\u5e74\u964d\u6c34\u91cf\u672a\u77e5\n{\n\t\u5982\u679c\u7b2c$l$\u5e74\u964d\u6c34\u91cf\u4e5f\u672a\u77e5\n       maybe//r[l]<r[y]\u65f6\u4e3afalse\uff0cr[l]>=r[r]>max{r[x],l<x<r}\u65f6\u4e3atrue\n    \u5426\u5219(\u7b2c$l$\u5e74\u964d\u6c34\u91cf\u5df2\u77e5)\n    {\n       \u5982\u679cr[l]>max{r[x],l<x<r}\n         maybe //l\u5e74\u7684\u964d\u6c34\u91cf\u6ee1\u8db3\u6761\u4ef6\uff0c\u4f46r\u5e74\u7684\u4e0d\u4e00\u5b9a\n       \u5426\u5219\u4e3a false//true\u7684\u6761\u4ef6\u662fr[l]>=r[r]>max{r[x],l<x<r}\n       \t\t   //\u5982\u679cr[l]<=max{r[x],l<x<r}\n                  //\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\u663e\u7136\u4e0d\u80fd\u6210\u7acb\n    }\n}\n\u5426\u5219(\u7b2c$r$\u5e74\u964d\u6c34\u91cf\u5df2\u77e5)\n{\n\t\u5982\u679c\u7b2c$l$\u5e74\u964d\u6c34\u91cf\u5df2\u77e5\n    {\n    \t\u5982\u679cr[l]<r[r]\n          false//\u660e\u663e\u4e0d\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\uff08X\u5e74\u7684\u964d\u96e8\u91cf\u4e0d\u8d85\u8fc7Y\u5e74\uff09\n        \u5982\u679cmax{r[x],l<x<r}>=r[r]\n          false//\u540c\u7406\u8fd8\u662f\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\n               //\uff08\u5bf9\u4e8e\u4efb\u610fY<Z<X\uff0cZ\u5e74\u7684\u964d\u96e8\u91cf\u4e25\u683c\u5c0f\u4e8eX\u5e74\uff09\n        \u5982\u679cr-l==pos[r]-pos[l]\uff08pos[i]\u8868\u793ai\u5728y\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\uff09\n          true//l-r\u4e4b\u95f4\u6bcf\u4e00\u5e74\u964d\u6c34\u91cf\u90fd\u5df2\u77e5\u4e14\u6ee1\u8db3\u6761\u4ef6\uff08\u524d\u4e24\u4e2a\u5224\u65ad\u6392\u9664\u4e86\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\uff09\n        maybe//\u5df2\u77e5\u7684\u5e74\u4efd\u90fd\u6ee1\u8db3\uff0c\u4f46\u672a\u77e5\u7684\u5e74\u4efd\u53ef\u4ee5\u4e0d\u6ee1\u8db3\n    }\n    \u5982\u679c\u7b2c$l$\u5e74\u964d\u6c34\u91cf\u672a\u77e5\n    {\n    \t\u5982\u679cr[r]<=max{r[x],l<x<r}\n          false//\u5df2\u77e5\u5e74\u4efd\u6709\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\n        maybe//\u5df2\u77e5\u7684\u5e74\u4efd\u90fd\u6ee1\u8db3\uff0c\u4f46\u672a\u77e5\u7684\u5e74\u4efd\u53ef\u4ee5\u4e0d\u6ee1\u8db3\n    }\n}\n```\n~~\u7406\u89e3\u4e86\u4e4b\u540e\u628a\u4e0a\u9762\u7684\u7ffb\u8bd1\u6210\u4ee3\u7801\u5c31\u884c\u4e86~~\n\n- \u5982\u4f55\u5224\u65ad\u5e74\u4efd\u662f\u5426\u51fa\u73b0 \u5982\u4f55\u6c42$pos[i]$\n\n\u5f00\u4e00\u4e2a$map$\uff0c\u8bfb\u5165$y[i]$\u65f6\u987a\u4fbf$mp[y[i]]=i$\uff0c\u8fd9\u6837$mp[i]$\u5c31\u662f$pos[i]$\uff0c\u5982\u679c$mp[i]$\u4e0d\u5b58\u5728\u5c31\u662f$i$\u5e74\u6ca1\u6709\u51fa\u73b0\n\n- \u5982\u4f55\u6c42$max\\left\\{r[x],l<x<r\\right\\}$\n\n\u7528$st$\u8868\u5bf9$r[i]$\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u67e5\u7684\u65f6\u5019\u5982\u679c$l,r$\u5b58\u5728\u5c31\u76f4\u63a5\u67e5\uff0c\u4e0d\u5b58\u5728\u5c31\u5728$y[i]$\u4e0a**\u4e8c\u5206**\u51fa\u7b2c\u4e00\u4e2a \u5927\u4e8e$l$/\u5c0f\u4e8e$r$ \u7684\u4f4d\u7f6e\uff09\n\n\u4ee3\u7801\uff1a\uff08\u4e0a\u9762\u90a3\u4e00\u6bb5\u8ba8\u8bba\u5c31\u662f\u5bf9\u7740\u4ee3\u7801\u5199\u7684\uff09\n\n\uff08$True,False,Maybe$\u90fd\u662f\u5b8f\uff0c\u8f93\u51fa\u5b8c\u5c31$continue$\u5904\u7406\u4e0b\u4e00\u4e2a\u8be2\u95ee\uff0c\u7701\u53bb\u4e00\u5806$else$\uff09\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#define True {printf(\"true\\n\");continue;}\n#define False {printf(\"false\\n\");continue;}\n#define Maybe {printf(\"maybe\\n\");continue;}\nusing namespace std;\n\nint n,m,y[50005],r[50005],i,L,R;\n\nmap<int,int> mp;\n\nint st[17][50005],log2[50005],mi[20];\nvoid build_st()\n{\n\tfor(int i=2;i<=n;i++)\n\t  log2[i]=log2[i/2]+1;\n\tmi[0]=1;\n\tfor(int i=1;i<20;i++)\n\t  mi[i]=mi[i-1]*2;\n\tfor(int i=1;i<=16;i++)\n\t  for(int j=1;j<=n;j++)\n\t    st[i][j]=max(st[i-1][j],st[i-1][j+mi[i-1]]);\n}\ninline int ask(int l,int r)\n{\n\tif(l>r)\n\t  return 0;\n\treturn max(st[log2[r-l+1]][l],st[log2[r-l+1]][r-mi[log2[r-l+1]]+1]);\n}\n\nint fl(int x)//\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u5927\u4e8ex\u7684\u4f4d\u7f6e\n{\n\tint L=0,R=n+1,mid;\n\twhile(L<R)\n\t{\n\t\tmid=(L+R+1)>>1;\n\t\tif(y[mid]<x)\n\t\t  L=mid;\n\t\telse R=mid-1;\n\t}\n\treturn L;\n}\n\nchar Getchar()\n{\n\treturn getchar();\n\tstatic char buff[1000000],*p,*end=p;\n\tif(p==end)\n\t  end=buff+fread(p=buff,1,1000000,stdin);\n\treturn *(p++);\n}\ntemplate<typename T>void read(T &x)\n{\n\tstatic char rc;static int flag;\n\tx=0;rc=Getchar();flag=1;\n\twhile(!isdigit(rc))\n\t  flag=(rc=='-'?-1:1),rc=Getchar();\n\twhile(isdigit(rc))\n\t  x=x*10+rc-'0',rc=Getchar();\n\tx*=flag;\n}\n\nint main()\n{\n\tread(n);\n\tfor(i=1;i<=n;i++)\n\t  read(y[i]),read(r[i]),mp[y[i]]=i,st[0][i]=r[i];\n\tread(m);\n\tbuild_st();\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tread(L);read(R);\n\t\tif(mp.find(R)==mp.end())\n\t\t{\n\t\t\tif(mp.find(L)==mp.end())\n\t\t\t  Maybe;\n\t\t\tif(ask(mp[L]+1,fl(R))<r[mp[L]])\n\t\t\t  Maybe;\n\t\t\tFalse;\n\t\t}\n\t\telse if(mp.find(L)!=mp.end())\n\t\t{\n\t\t\tif(r[mp[L]]<r[mp[R]])\n\t\t\t  False;\n\t\t\tif(ask(mp[L]+1,mp[R]-1)>=r[mp[R]])\n\t\t\t  False;\n\t\t\tif(R-L==mp[R]-mp[L])\n\t\t\t  True;\n\t\t\tMaybe;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ask(fl(L)+1,mp[R]-1)>=r[mp[R]])\n\t\t\t  False;\n\t\t\tMaybe;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547782340,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u964d\u96e8\u91cf\u2014\u2014\u4eba\u751f\u4e2d\u7b2c\u4e09\u9053\u7701\u9009/NOI-\u2026\u2026\n\n\u8017\u65f6\u4e09\u5929\uff0c\u63d0\u4ea430\u591a\u6b21\uff0c\u6211\u7ec8\u4e8eAC\u4e86\u8fd9\u9053\u770b\u4f3c\u7b80\u5355\u5b9e\u5219\u5f88\u70e6\u4eba\u7684\u7701\u9009\u9898\u3002\n\n\u9898\u76ee\u5728\u8fd9\u91cc\n\n\u8bd5\u8bd5\u7ebf\u6bb5\u6811\uff1f\u7528\u4e24\u4e2a\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95eel,r\u533a\u95f4\u5224\u65ad\u6761\u4ef6\uff0c\u5f97\u51fa\u7b54\u6848:\n\n\u4e0d\u8fc7\u95ee\u9898\u6765\u4e86\uff1a\u5e74\u4efd\u5982\u4f55\u5904\u7406\uff1f\n\n\u6240\u4ee5\uff1a\u79bb\u6563\u5316\u3002\n\n\u521d\u59cb\u5e74\u4efd\u8bbe\u4e3a1\uff1b\u5982\u679c\u76f8\u90bb\u4e24\u4e2a\u5e74\u4efd\u5dee\u5927\u4e8e1\uff0c\u5219\u628a\u4ed6\u4eec\u7684\u5dee\u8bbe\u4e3a2\uff0c\u5426\u5219\u4e3a1\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u5f00100005\u5143\u7d20\u6570\u7ec4\u5373\u53ef\u3002\n\n\u67e5\u627e\u7684\u65f6\u5019\u627e\u5e74\u4efd\u600e\u4e48\u529e\u5462\uff1f\u75af\u72c2\u7684\u6211\u7adf\u7136\u60f3\u5230\u4e86\u4e8c\u5206\u2026\u2026\n\n\u9898\u89e3\u5c31\u662f\u8fd9\u6837\u3002\u7b2c\u4e00\u4efd\u4ee3\u78013\u5929\u524d\u5c31\u5b8c\u6210\u4e86\u3002\u4e4b\u540e3\u5929\uff0c\u662f\u5404\u79cd\u6539\u9519\uff1a\n\n1.\u4e8c\u5206\u8fb9\u754c\u95ee\u9898\u5fc5\u987b\u77e5\u9053\u3002\n\n2.\u8fb9\u6709\u8d1f\u6743\uff0c\u67090\u6743\uff08\u8fd9\u7b80\u76f4\u662f\u8981\u6211\u6b7b\uff09\u3002\u6240\u4ee5\u6700\u521d\u503c\u8981\u8bbe\u4e3a-0x7fffffff\u2026\u2026\n\n3.\u5148\u5224false\uff0c\u518d\u5224maybe\uff0c\u90fd\u4e0d\u662f\u5219true\u3002\u6ce8\u610f\u6700\u5c0f\u8fb9\u4e4b\u7c7b\uff08\u8fd9\u91cc\u6700\u70e6\u4e86\uff09\uff1a\n\n```cpp\nif (v-u==1)//\u6211\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u5751\u6570\u636e\uff0cX,Y\u76f8\u90bb\u2026\u2026 \n{\n      if (a[u]==low||a[v]==low)printf(\"maybe\\n\");\n      else if (a[u]>=a[v])printf(\"true\\n\");\n      else printf(\"false\\n\");\n}\nelse if ((a[u]!=low&&a[u]<=mx(1,u+1,v-1,1,len))||(a[u]!=low&&a[u]<a[v])||(a[v]!=low&&mx(1,u+1,v-1,1,len)>=a[v]))printf(\"false\\n\");//\u5224\u65adfalse\u7684\u60c5\u51b5\uff0c\u6ce8\u610fa[u,v]!=0\uff0c\u5426\u5219\u4f1aWA\u5f97\u5f88\u60e8 \nelse if (a[u]==low||a[v]==low||mn(1,u+1,v-1,1,len)==low)printf(\"maybe\\n\");//\u5224\u65ad\u53ef\u80fd\u7684\u60c5\u51b5 \nelse printf(\"true\\n\");\n```\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nstruct node\n{\n    int y,pt;\n}b[50005];\nconst int low=-0x7fffffff/2;\nint n,m,a[100005],t1[400005],t2[400005],fyr=low,len;//a\uff1a\u4f4d\u7f6e\u79bb\u6563\u5316\u540e\u7684\u539f\u59cb\u6570\u7ec4\uff1bb\uff1a\u5e74\u4efd->a\u6570\u7ec4\u4f4d\u7f6e\u8f6c\u6362\u6570\u7ec4\uff1bt1\u3001t2\uff1a\u7ebf\u6bb5\u6811 \nvoid build(int root,int s,int e)\n{\n    if (s==e)\n    {\n        t1[root]=t2[root]=a[s];\n        return;\n    }\n    int mid=(s+e)/2;\n    build(root*2,s,mid);\n    build(root*2+1,mid+1,e);\n    t1[root]=max(t1[root*2],t1[root*2+1]);\n    t2[root]=min(t2[root*2],t2[root*2+1]);\n}\nint mn(int root,int s,int e,int ts,int te)\n{\n    if (ts>e||te<s)return 0x7fffffff/2;\n    if (ts>=s&&te<=e)return t2[root];\n    int mid=(ts+te)/2;\n    return min(mn(root*2,s,e,ts,mid),mn(root*2+1,s,e,mid+1,te));\n}\nint mx(int root,int s,int e,int ts,int te)\n{\n    if (ts>e||te<s)return low;\n    if (ts>=s&&te<=e)return t1[root];\n    int mid=(ts+te)/2;\n    return max(mx(root*2,s,e,ts,mid),mx(root*2+1,s,e,mid+1,te));\n}\nint reval(int year)//\u83b7\u5f97\u5e74\u4efd\u5728\u7ebf\u6bb5\u6811\u6570\u7ec4\u4e0a\u7684\u4f4d\u7f6e \n{\n    if (year<b[1].y)return 0;\n    if (year>b[n].y)return len+1;\n    int l=1,r=n,mid;\n    while (l<=r)//\u4e8c\u5206\uff0c\u6ce8\u610f\u8fb9\u754c\u503c\uff0cmid\u843d\u5728\u4e0d\u5927\u4e8eyear\u7684\u4f4d\u7f6e \n    {\n        mid=(l+r)>>1;\n        if (b[mid].y<year)l=mid+1;\n        else r=mid-1;\n    }\n    if (b[l].y!=year)return b[l].pt-1;\n    return b[l].pt;//\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u5e74\u4efd\uff0c\u5c31\u6307\u5411\u7a7a\u5e74\u4efd \n}\nint main()\n{\n    scanf(\"%d\",&n);\n    int year,val;\n    for (int i=1;i<=n;i++)//\u5904\u7406\u5e74\u4efd\u4e0e\u4f4d\u7f6e\u7684\u8f6c\u5316 \n    {\n        scanf(\"%d %d\",&year,&val);\n        if (fyr==low||year-fyr==1)fyr=year,a[++len]=val;\n        else fyr=year,a[++len]=low,a[++len]=val;//\u4e0d\u76f8\u90bb\u7684\u5e74\u4efd\uff0c\u65e0\u8bba\u5e74\u4efd\u4e4b\u95f4\u76f8\u9694\u591a\u5c11\uff0c\u5168\u90e8\u79bb\u6563\u5316\u4e3a2 \n        b[i].y=year;\n        b[i].pt=len;\n    }\n    a[len+1]=a[0]=low;\n    build(1,1,len);\n    scanf(\"%d\",&m);\n    int x,y,u,v;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        u=reval(x);\n        v=reval(y);\n        if (v-u==1)//\u6211\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u5751\u6570\u636e\uff0cX,Y\u76f8\u90bb\u2026\u2026 \n        {\n            if (a[u]==low||a[v]==low)printf(\"maybe\\n\");\n            else if (a[u]>=a[v])printf(\"true\\n\");\n            else printf(\"false\\n\");\n        }\n        else if ((a[u]!=low&&a[u]<=mx(1,u+1,v-1,1,len))||(a[u]!=low&&a[u]<a[v])||(a[v]!=low&&mx(1,u+1,v-1,1,len)>=a[v]))printf(\"false\\n\");//\u5224\u65adfalse\u7684\u60c5\u51b5\uff0c\u6ce8\u610fa[u,v]!=0\uff0c\u5426\u5219\u4f1aWA\u5f97\u5f88\u60e8 \n        else if (a[u]==low||a[v]==low||mn(1,u+1,v-1,1,len)==low)printf(\"maybe\\n\");//\u5224\u65ad\u53ef\u80fd\u7684\u60c5\u51b5 \n        else printf(\"true\\n\");\n    }\n}\n```",
        "postTime": 1507641032,
        "uid": 33930,
        "name": "vani_prcups",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://aday526.github.io/%E9%A2%98%E8%A7%A3%20P2471%20%E3%80%90%5BSCOI2007%5D%E9%99%8D%E9%9B%A8%E9%87%8F%E3%80%91/)\n\n\u8c8c\u4f3c\u6ca1\u6709\u4eba\u7528\u5206\u5757\u7ef4\u62a4\u6700\u5927\u503c\u8bf6qwq\n\n\u90a3\u6211\u6765\u53d1\u9898\u89e3\u5427...\n\n\u9996\u5148\u8bf4\u4e00\u4e0b~~\u5176\u4ed6\u9898\u89e3\u7684\u5927\u4f6c\u8bb2\u8fc7\u65e0\u6570\u6b21\u7684~~\u5224\u65ad\u6761\u4ef6\uff1a\n\n\u6211\u4eec\u8bbe\u4e24\u4e2a\u5e74\u4efd\u5206\u522b\u4e3a$px$\u548c$py$\uff0c$(px,py)$\u4e2d\u964d\u96e8\u91cf\u7684\u6700\u5927\u503c$maxget$\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u5df2\u77e5\u5e74\u4efd\u4e2d\u7684\u6392\u540d$p_{px}\u548cp_{py}$\uff08\u7528map\u5b9e\u73b0\uff09\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u4e3a$0$  \n\n**[**\u6ce8\uff1a\u4e0b\u9762\u7684\u6bcf\u4e00\u6761\u5224\u65ad\u6761\u4ef6\u57fa\u4e8e\u4e4b\u524d\u6240\u6709\u7684\u9519\u8bef\u6761\u4ef6**]**\n\n#### \u00b7$py$\u4e0d\u786e\u5b9a\u65f6\n\n- \u82e5$px$\u4e5f\u4e0d\u786e\u5b9a\uff0c\u5219\u65e0\u6cd5\u5224\u65ad$px,py$\u7684\u5927\u5c0f\uff0c\u663e\u7136\u4e3amaybe\n- \u82e5$px$\u7684\u964d\u96e8\u91cf$\\le maxget$\uff0c\u5219$maxget$\u7684\u5e74\u4efd\u624d\u7b26\u5408\u9898\u610f\uff0c\u662ffalse\n- \u82e5\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3\uff0c\u6211\u4eec\u6ca1\u6cd5\u786e\u5b9a\u5173\u7cfb\uff0c\u4e3amaybe\n\n#### \u00b7$px$\u4e5f\u786e\u5b9a\u65f6\n\n- \u82e5$px\u7684\u964d\u96e8\u91cf\\le py\u7684\u964d\u96e8\u91cf$\uff0c\u5219\u663e\u7136\u4e3afalse\n- \u82e5$maxget\\ge py\u7684\u964d\u96e8\u91cf$\uff0c\u5219$py$\u4e0d\u662f$px$\u540e\u7684\u6700\u591a\uff0c\u4e3afalse\n- \u82e5$py-px=p_{py}-p_{px}$\uff0c\u5b83\u7b49\u4ef7\u4e8e**px~py\u95f4\u7684\u5e74\u4efd\u90fd\u662f\u5df2\u77e5\u7684**\uff0c\u4e3atrue(\u554a\u7ec8\u4e8e\u6709\u4e2atrue\u4e86awa\n- \u82e5\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3\uff0c\u6211\u4eec\u6ca1\u6cd5\u786e\u5b9a\u5173\u7cfb\uff0c\u4e3amaybe\n\n#### \u00b7\u5176\u4ed6\uff0c\u5373$py\u786e\u5b9apx\u4e0d\u786e\u5b9a$\n\n- \u82e5$py\u7684\u964d\u96e8\u91cf\\le maxget$\uff0c\u53c8\u56e0\u4e3a$maxget$\u7684\u5e74\u4efd\u6bd4$py$\u51fa\u73b0\u7684\u65e9\uff0c\u4e3afalse\n- \u82e5\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3\uff0c\u6211\u4eec\u6ca1\u6cd5\u786e\u5b9a\u5173\u7cfb\uff0c\u4e3amaybe\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\npx=read();py=read();\nif(px>=py)False\nrg int maxget=getmax(px+1,py-1);\nif(!p[py])\n{\n    if(!p[px])Maybe\n    if(r[p[px]]<=maxget)False\n    Maybe\n}\nif(p[px])\n{\n\n    if(r[p[px]]<r[p[py]])False\n    if(maxget>=r[p[py]])False\n    if(py-px==p[py]-p[px])True\n    Maybe\n}\nif(r[p[py]]<=maxget)False\nMaybe\n```\n\n\n\n### \u90a3\u4e48\uff0c\u600e\u4e48\u6c42$maxget$\u5462\uff1f\n\n\u6211\u9009\u62e9\u7528\u5206\u5757\u6c42(~~\u56e0\u4e3a\u5206\u5757\u6211\u6700\u719f\u6089~~\u56e0\u4e3a\u5206\u5757\u6700\u597d\u7406\u89e3)\uff0c\u663e\u7136\u8981\u628a$r$\u6570\u7ec4\uff08\u5373\u964d\u96e8\u91cf\u6570\u7ec4\uff09\u5206\u6210$\\sqrt n$\u4e2a\u5757\uff0c\u8bb0\u4e3a$num$\uff0c\u800c\u7528$bl_i$\u8bb0\u5f55$y_i$\u6240\u5c5e\u7684\u5757\u7f16\u53f7\uff0c\u7528$mx_i$\u8bb0\u5f55\u7b2c$i$\u5757\u7684\u6700\u5927\u503c\uff0c\u7528\u4e00\u4e2amap\uff1a$p_i$\u8bb0\u5f55$y_i$\u7684$i$\u3002\u8fd9\u4e9b\u5728\u8f93\u5165\u65f6\u53ef\u4ee5\u4e00\u8d77\u89e3\u51b3\uff1a\n\n```cpp\nfor(rg int i=1;i<=n;i++)\n{\n    y[i]=read();\n    r[i]=read();\n    p[y[i]]=i;\n    bl[i]=(i-1)/num+1;\n    mx[bl[i]]=max(mx[bl[i]],r[i]);\n}\n```\n\n\u90a3\u4e48\u6c42$[l,r]$\u95f4\u7684\u6700\u5927\u503c\uff0c\u679a\u4e3e\u4e09\u79cd\u60c5\u51b5\n\n- \u5de6\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\uff0c\u53ef\u4ee5\u66b4\u529b\u6bd4\u8f83\uff0c\u5f97\u5230\u6700\u5927\u503c\n- \u53f3\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\uff0c\u4f9d\u7136\u66b4\u529b\u6bd4\u8f83\uff0c\u5f97\u5230\u6700\u5927\u503c\n- \u4e2d\u95f4\u5b8c\u6574\u7684\u5757\uff0c\u6bd4\u8f83$mx_i$\u5373\u53ef\uff0c\u56e0\u4e3a$mx_i$\u662f\u6b64\u5757\u6700\u5927\n\n\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u82e5$l\u6216r$\u662f\u4e0d\u786e\u5b9a\u7684\u5e74\u4efd\uff0c\u6211\u4eec\u4e8c\u5206\u67e5\u627e\u8303\u56f4\u5185\u6700\u8fd1\u786e\u5b9a\u7684\u5e74\u4efd\u4ee3\u66ff\u5b83\u5373\u53ef\n\n\u6bcf\u6b21\u67e5\u8be2$\\mathcal O(\\sqrt n)$\n\n\u4ee3\u7801:\n\n```cpp\nint getmax(int ll,int rr)\n{\n\tif(ll>rr)return -1;//\u663e\u7136\u4e0d\u5b58\u5728\n    rg int res=-1;\n    //\u4e8c\u5206\n    if(!p[ll])\n    {\n    \tint pos=lower_bound(y+1,y+n+1,ll)-y;\n    \tif(pos<1||pos>n)ll=1e9+5;\n        else ll=y[pos];\n    }\n    if(!p[rr])\n    {\n    \tint pos=upper_bound(y+1,y+n+1,rr)-y-1;\n    \tif(pos<1||pos>n)rr=-1e9-5;\n        else rr=y[pos];\n    }\n    if(ll>rr)return -1;//\u663e\u7136\u4e0d\u5b58\u5728\n    for(rg int i=ll;i<=rr&&i<=y[min(bl[p[ll]]*num,n)];i=y[p[i]+1])//\u5de6\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\n    {\n    \tres=max(res,r[p[i]]);\n    \tif(p[i]==n)break;\n    }\n    if(bl[p[ll]]!=bl[p[rr]])\n        for(rg int i=y[min((bl[p[rr]]-1)*num+1,n)];i<=rr;i=y[p[i]+1])//\u53f3\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\n        {\n            res=max(res,r[p[i]]);\n            if(p[i]==n)break;\n        }\n    for(rg int i=bl[p[ll]]+1;i<bl[p[rr]];i++)\n        res=max(res,mx[i]);//\u4e2d\u95f4\u5b8c\u6574\u7684\u5757\n    return res;\n}\n//\u5bf9\u4e86\uff0c\u82e5\u4e0d\u5b58\u5728\u8fd4\u56de-1\u662f\u56e0\u4e3a\u90a3\u6837\u4e0d\u4f1a\u5f71\u54cd\u4e0b\u9762\u7684\u5224\u65ad\n```\n\n\u603b\u590d\u6742\u5ea6$\\mathcal O(m\\sqrt n)$,\u672c\u6765\u5e94\u8be5\u80fd\u8fc7\uff0c\u4f46map\u5e38\u6570\u5de8\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528`unordered_map`\uff0c\u8981`c++11`\uff0c\u518d\u5438\u6c27\u5feb\u5230\u98de\u8d77~\n\n",
        "postTime": 1591788046,
        "uid": 312393,
        "name": "ADay",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u591a\u90fd\u662f\u7ebf\u6bb5\u6811\u6216\u8005`st`\u8868\u7684\u2026\u2026\u8fd9\u91cc\u8d34\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7684\u9898\u89e3\u3002\n\n~~\u53ef\u6301\u4e45\u5316\u5355\u8c03\u961f\u5217\uff1f\u4f60\u503c\u5f97\u62e5\u6709\uff01~~\n\n\u9996\u5148\uff0c\u5728\u5355\u8c03\u961f\u5217\uff08\u961f\u5217\u5185\u8282\u70b9\u4e0d\u589e\uff0c\u5373\u975e\u4e25\u683c\u9012\u51cf\uff09\u91cc\u9762\u5904\u7406\u4e00\u4e2a\u8be2\u95ee\u5341\u5206\u7b80\u5355\u3002\u6839\u636e\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u548c\u662f\u5426\u5df2\u77e5\uff0c\u53ea\u9700\u8981\u5bf9\u5de6\u7aef\u70b9\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u5c31\u53ef\u4ee5\u4e86\u3002\u4f9d\u636e\u5355\u8c03\u961f\u5217\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u505a\u5f97\u975e\u5e38\u597d\u3002\n\n\u4f46\u662f\u6211\u4eec\u9700\u8981\u77e5\u9053\u5de6\u7aef\u70b9\u5728\u5355\u8c03\u961f\u5217\u91cc\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u6211\u4eec\u6309\u7167\u5e74\u4efd\u987a\u5e8f\u63d2\u5165\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e8c\u5206\u3002\u4f46\u662f\u6211\u5acc\u9ebb\u70e6\uff0c\u5c31\u7528\u4e86\u4e00\u4e2a`map`\u6765\u8bb0\u5f55\u5e74\u4efd\u548c\u5355\u8c03\u961f\u5217\u91cc\u7684\u4f4d\u7f6e\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5f53\u7136\u53ef\u4ee5\u79bb\u7ebf\u6392\u5e8f\u5de6\u7aef\u70b9$\\Theta(n+m)$\u6302\u94fe\u9884\u5904\u7406\uff0c\u4f46\u662f\u7531\u4e8e\u79bb\u7ebf\u6392\u5e8f\u8fd9\u4e00\u6b65\u5df2\u7ecf\u6709\u4e00\u53ea$\\log$\u4e86\uff0c\u5c31\u6ca1\u6709\u5174\u8da3\u53bb\u505a\uff08\u53ef\u4ee5\u7528\u57fa\u6392\u505a\u5230$\\Theta(n)$\u6392\u5e8fqwq\uff09\n\n\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u5148\u79bb\u7ebf\u6392\u5e8f\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u8fb9\u5355\u8c03\u961f\u5217\u8fb9\u5904\u7406\u3002\u4f9d\u7167\u5df2\u77e5\u6761\u76ee\u7684\u5e74\u4efd\u4f9d\u6b21\u63d2\u5165\u5355\u8c03\u961f\u5217\uff0c\u7136\u540e\u5728$y_{i+1}>query_r$\u7684\u65f6\u5019\u8fdb\u884c\u5904\u7406\u3002\u5206\u7c7b\u8ba8\u8bba\uff08\u4e5f\u53ef\u7565\u8fc7\u76f4\u63a5\u770b\u4ee3\u7801\uff09\uff1a\n\n+ $y_i==query_r$\uff0c\u5373\u53f3\u7aef\u70b9\u5df2\u77e5\n  + \u5de6\u7aef\u70b9\u5df2\u77e5\uff0c\u4e3a\u5355\u8c03\u961f\u5217\u91cc\u7684\u7b2c$j$\u9879\n    + `j==i-1||j==i`\uff0c\u5982\u679c\u8fd9\u4e24\u9879\u8fde\u7eed\uff0c\u5219\u8fd4\u56de$true$\uff0c\u5426\u5219\u8fd4\u56de$maybe$\n    + \u5176\u4ed6\u60c5\u51b5\uff0c\u7531\u4e8e\u5355\u8c03\u961f\u5217\u5185\u5176\u4ed6\u503c\u5927\u4e8e\u53f3\u7aef\u70b9\uff0c\u8fd4\u56de$false$\n  + \u5de6\u7aef\u70b9\u5df2\u77e5\uff0c\u5df2\u7ecf\u51fa\u961f\n    + \u7531\u4e8e\u5176\u5df2\u7ecf\u51fa\u961f\uff0c\u4e00\u5b9a\u5728\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u4e4b\u95f4\u6709\u4e00\u4e2a\u70b9\u5927\u4e8e\u5de6\u7aef\u70b9\uff0c\u8fd4\u56de$false$\n  + \u5de6\u7aef\u70b9\u672a\u77e5\n    + \u5982\u679c\u5de6\u7aef\u70b9\u7684\u5e74\u4efd\u6bd4\u5355\u8c03\u961f\u5217\u91cc\u7684\u524d\u4e00\u9879\u5927\uff0c\u5219\u8fd4\u56de$maybe$\n    + \u5426\u5219\uff0c\u7531\u4e8e\u5355\u8c03\u961f\u5217\u4e0a\u4e00\u9879\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e00\u9879\uff0c\u5de6\u7aef\u70b9\u7684\u5e74\u4efd\u5fc5\u987b\u5927\u4e8e\u5355\u8c03\u961f\u5217\u4e0a\u4e00\u9879\u7684\u5e74\u4efd\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd4\u56de$maybe$\uff0c\u5426\u5219\u8fd4\u56de$true$\u3002\n+ \u53f3\u7aef\u70b9\u672a\u77e5\n  + \u5de6\u7aef\u70b9\u5df2\u77e5\uff0c\u5df2\u7ecf\u51fa\u961f\n    + \u8fd4\u56de$false$\n  + \u5de6\u7aef\u70b9\u5df2\u77e5\uff0c\u4e3a\u5355\u8c03\u961f\u5217\u4e2d\u7684\u7b2c$j$\u9879\n    + \u5982\u679c\u7b2c$j+1$\u9879\u7684\u964d\u96e8\u91cf\u7b49\u4e8e\u7b2c$j$\u9879\u7684\u964d\u96e8\u91cf\uff0c\u8fd4\u56de$false$\uff0c\u5426\u5219\u53ea\u8981\u4f7f\u53f3\u7aef\u70b9\u7684\u964d\u96e8\u91cf\u7b49\u4e8e\u5de6\u7aef\u70b9\u7684\u964d\u96e8\u91cf\uff0c\u8fd4\u56de$maybe$\n  + \u5de6\u7aef\u70b9\u672a\u77e5\n    + \u80af\u5b9a\u4e3a$maybe$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(m\\log m+n+m\\log n)$\uff0c\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(n\\log n)$\u7ea7\u522b\u3002\u5982\u679c\u52a0\u4e0a\u57fa\u6392\u548c\u5de6\u7aef\u70b9\u9884\u5904\u7406\u53ef\u4ee5\u505a\u5230$\\Theta(n+m)$\uff08\u53e3\u7cca\uff0c\u53ef\u80fd\u7b97\u9519qwq\uff09\u3002\n\n\u5982\u679c\u672c\u9898\u5f3a\u5236\u5728\u7ebf\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u5355\u8c03\u961f\u5217\u3002\u5355\u8c03\u961f\u5217\u5341\u5206\u5bb9\u6613\u53ef\u6301\u4e45\u5316\uff0c\u5e76\u4e14\u7a7a\u95f4\u6d88\u8017\u4e3a$\\Theta(n)$\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <map>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint yi[50005];\nint ri[50005];\n\nstruct query\n{\n\tint id;\n\tint li;\n\tint ri;\n\tint ans;\n};\n\nquery qi[10005];\n\nbool cmp(query a,query b)\n{\n\treturn a.ri<b.ri;\n}\n\nbool pmc(query a,query b)\n{\n\treturn a.id<b.id;\n}\n\nint q[50005];\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tscanf(\"%d%d\",yi+i,ri+i);\n\t}\n\t\n\tmap<int,int> mmp;\n\t\n\tint qn;\n\tscanf(\"%d\",&qn);\n\tfor(int i=1; i<=qn; ++i)\n\t{\n\t\tscanf(\"%d%d\",&qi[i].li,&qi[i].ri);\n\t\tqi[i].id = i;\n\t}\n\t\n\tyi[n+1] = 0x7f7f7f7f;\n\tsort(qi+1,qi+1+qn,cmp);\n\t\n\tint qtop = 1;\n\tint head = 0;\n\tint conn = 0; //conn\u7ef4\u62a4\u8fde\u7eed\u7684\u6bb5\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\twhile(head && ri[q[head]]<ri[i])\n\t\t{\n\t\t\tmmp[yi[q[head]]] = -1;\n\t\t\t--head;\n\t\t}\n\t\t++head;\n\t\tq[head] = i;\n\t\tmmp[yi[i]] = head;\n\t\t\n\t\tif(i==1 || yi[i-1]!=yi[i]-1)\n\t\t{\n\t\t\tconn = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++conn;\n\t\t}\n\t\t\n\t\twhile(qi[qtop].ri<yi[i+1] && qtop<=qn)\n\t\t{\n\t\t\tif(qi[qtop].ri==yi[i])\n\t\t\t{\n\t\t\t\tint stt = mmp[qi[qtop].li];\n\t\t\t\tif(stt==-1)\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = -1;\n\t\t\t\t}\n\t\t\t\telse if(stt==head || (head!=1 && stt==head-1))\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = (conn>=qi[qtop].ri-qi[qtop].li);\n\t\t\t\t}\n\t\t\t\telse if(stt)\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = -(head!=1 && yi[q[head-1]]>qi[qtop].li); //\u7565\u6709\u70b9\u9a9a\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint stt = mmp[qi[qtop].li];\n\t\t\t\tif(stt==-1)\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = -1;\n\t\t\t\t}\n\t\t\t\telse if(!stt)\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tqi[qtop].ans = -(stt<head && ri[q[stt]]==ri[q[stt+1]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t++qtop;\n\t\t}\n\t}\n\t\n\tsort(qi+1,qi+1+qn,pmc);\n\t\n\tfor(int i=1; i<=qn; ++i)\n\t{\n\t\tprintf(\"%s\\n\",qi[i].ans==-1?\"false\":(qi[i].ans?\"true\":\"maybe\"));\n\t}\n}\n```",
        "postTime": 1568538205,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u524d\u8a00\uff1a\n\n\u9996\u5148\uff0c\u8fd9\u7bc7\u9898\u89e3\u662f\u5229\u7528\u5e73\u8861\u6811+\u7ebf\u6bb5\u6811\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u867d\u7136\u9898\u89e3\u533a\u4e2d\u6709\u8bb8\u591a\u5e73\u8861\u6811\u9898\u89e3\uff0c\u4f46\u672c\u849f\u84bb\u7684\u9898\u89e3\u6709\u8f83\u5927\u62d3\u5c55\u3002\n\n\u9996\u5148\uff0c\u5148\u8bf4\u4e00\u4e0b\u89e3\u9898\u601d\u8def\uff1a\n1. \u5efa\u7acb\u4e00\u4e2a\u5e8f\u5217 $liang[N]$ \u4fdd\u5b58\u964d\u96e8\u91cf\uff0c\u5efa\u7acb\u4e00\u4e2a\u5e73\u8861\u6811 she \u7ef4\u62a4\u5e74\u4efd\u4e0e\u5e8f\u5217\u4e0b\u6807\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5efa\u7acb\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4 liang \u5e8f\u5217\u7684\u533a\u95f4\u6700\u5927\u503c\n1. \u5f53\u8f93\u5165\u8be2\u95ee\u5e74\u4efd $\\color{blue}{t1,t2}$ \u65f6,\u5229\u7528\u5e73\u8861\u6811\u6620\u5c04\u5230\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807 $\\color{blue}{x1,x2}$ ,\u518d\u5206\u60c5\u51b5\u8ba8\u8bba\u3002\n\t+ \u5f53 t1,t2 \u7684\u964d\u96e8\u91cf\u5747\u5df2\u77e5\u65f6\uff0c\n         1. \u5982\u679c $liang[x1]<liang[x2]$ \u8f93\u51fa false,\u4e0b\u9762\u7684\u4e0d\u7ba1\n         1. \u5982\u679c $x2-x1=t2-t1=1$ (\u5373 x1,x2 \u4e4b\u95f4\u6ca1\u6709\u5e74\u4efd\uff09\u8f93\u51fa true (x1,x2 \u672c\u8eab\u7684\u6bd4\u8f83\u5728\u4e0a\u9762\u5df2\u8003\u8651\uff09\uff0c\u4e0b\u9762\u7684\u4e0d\u7ba1\n         1. \u5982\u679c $\\max[x1+1,x2-1] \\ge liang[x2]$ (\u6700\u5927\u503c\u53ef\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff09, \u8f93\u51fa false\uff0c\u4e0b\u9762\u7684\u4e0d\u7ba1\n         1. \u5982\u679c $x1+1=x2$ \u4e14 $t1+1 \\ne t2$ \uff0c\u8f93\u51fa maybe(\u5373 t1,t2 \u95f4\u6709\u591a\u4e2a\u5e74\u4efd\uff0c\u4f46\u8fd9\u4e2d\u95f4\u5168\u90e8\u672a\u77e5\uff09\uff08\u964d\u96e8\u91cf\u672c\u8eab\u7684\u6bd4\u8f83\u5728\u4e0a\u9762\u5df2\u8003\u8651\uff09\n         1. \u5982\u679c $t2-t1==x2-x1$(\u5373\u4e2d\u95f4\u6240\u6709\u5e74\u4efd\u5168\u90e8\u5df2\u77e5\uff09\uff0c\u8f93\u51fa true(\u964d\u96e8\u91cf\u7684\u6bd4\u8f83\u5df2\u5728\u4e0a\u9762\u8003\u8651\uff09\n         \n         \n         \u8fd9\u91cc\u8d34\u4e2a\u56fe\uff0c\u65b9\u4fbf\u7406\u89e3\uff1a\n         ![](https://cdn.luogu.com.cn/upload/image_hosting/exc3gbqy.png?x-oss-process=image/resize,m_lfit,h_510,w_675)\n     + \u5f53 t1 \u964d\u96e8\u91cf\u672a\u77e5\uff0ct2 \u964d\u96e8\u91cf\u5df2\u77e5\u65f6\n     \t  1. \u627e\u51fa t1 \u5728\u5e74\u4efd\u4e2d\u7684\u540e\u7ee7\uff08\u5373\u4e25\u683c\u5927\u4e8e t1 \u7684\u6700\u5c0f\u6570\uff09\uff08\u53ef\u7528\u5e73\u8861\u6811\u5b9e\u73b0\uff09\uff0c\u4ee4\u5176\u4e3a $Suf(t1)$\uff0c\u5e76\u6620\u5c04\u51fa\u5176\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e h1\u3002\n          1. \u82e5 $h1=x2$ ,(\u5373 $t1$ \u548c $t2-1$ \u95f4\u7684\u5e74\u4efd\u5168\u90e8\u672a\u77e5\uff0c$(t1,t2)$ \u7684\u533a\u95f4\u6700\u5927\u503c\u53ef\u53d6\u4efb\u610f\u503c\uff0c$liang[x1]$ \u4e5f\u53ef\u53d6\u4efb\u610f\u503c\uff0c\u6545\u8f93\u51fa maybe\n          1. \u82e5 $\\max(h1,x2-1) \\lt liang[x2]$ (\u56e0\u4e3a h1 \u7684\u5e74\u4efd\u6bd4 t1 \u5927\uff0c\u6545\u4e0d\u7528\u52a01\uff09,\u8f93\u51fa maybe(\u56e0\u4e3a\u8d77\u59cb\u5e74\u964d\u96e8\u91cf\u672a\u77e5\uff09\n          1. \u82e5\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3\uff0c\u8f93\u51fa false\n          \n          \u8d34\u4e2a\u56fe\uff0c\u628a\u7b2c2\u30013\u79cd\u60c5\u51b5\u89e3\u91ca\u4e00\u4e0b\uff1a\n          ![](https://cdn.luogu.com.cn/upload/image_hosting/1fs9gnj6.png?x-oss-process=image/resize,m_lfit,h_510,w_675)\n      + \u5f53 t1 \u964d\u96e8\u91cf\u5df2\u77e5,t2 \u964d\u96e8\u91cf\u672a\u77e5\n          1.\u8fd9\u65f6\u60c5\u51b5\u6bd4\u4e0a\u4e00\u79cd\u590d\u6742\u4e9b\uff0c\u5148\u627e\u51fa t2 \u5728\u5e74\u4efd\u4e2d\u7684\u524d\u9a71 \uff0c\u4ee4\u5176\u4e3a $pre(t2)$,\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a h2\n          1.\u82e5 $x1=h2$,\u8f93\u51fa maybe (\u56e0\u4e3a t1+1 \u81f3 t2 \u7684\u5e74\u4efd\u5168\u90e8\u672a\u77e5)\n          1.\u8fd9\u4e00\u6b65\u9700\u8981\u4e00\u5b9a\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u77e5\u9053\uff0c$liang[x2] \\le liang[x1],\\max(x1+1,h2) \\lt liang[x2]$(\u964d\u96e8\u91cf\u7684\u4e24\u4e2a\u6027\u8d28\uff09\uff0c\u6240\u4ee5 $\\max(x1+1,h2) \\lt liang[x1]$,\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5373 $\\max(x1+1,h2) \\ge liang[x1]$\uff0c\u8f93\u51fa false\n          1.\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3\uff0c\u8f93\u51fa maybe\n     + \u5f53 t1,t2 \u964d\u96e8\u91cf\u90fd\u672a\u77e5\u65f6\uff0c\u8f93\u51fa maybe(\u4ed6\u4eec\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff09\n     \n~~(\u6240\u4ee5\u4e3a\u5565\u8bf4\u8fd9\u9898\u7d2b\u5462\uff1f\u5206\u7c7b\u8ba8\u8bba\u90fd\u5199\u4e86\u5341\u591a\u79cd\u60c5\u51b5\uff09~~\n\n\u770b\u5230\u8fd9\u91cc\uff0c\u795e\u7287\u4eec\u5c31\u53ef\u4ee5\u53bb\u6253\u4ee3\u7801\u4e86\uff0c\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u7ee7\u7eed\u5f80\u4e0b\u770b\uff08\u8fd9\u7bc7\u9898\u89e3\u5c31\u662f\u5199\u7ed9\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u4eba\u7684\uff09\uff1a\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u7684\u5e73\u8861\u6811:Treap \uff0c\u53ef\u4ee5\u7528\u5b83\u6765\u5b9e\u73b0\u6620\u5c04\uff0c\u627e\u524d\u9a71\uff0c\u627e\u540e\u7ee7\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff08\u867d\u7136\u5bf9\u4e8e\u8fd9\u9053\u9898\u4f60\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u4f1a\u7684\u66f4\u591a\uff0c\u5982\u679c\u6570\u636e\u65e0\u5e8f\u4e14\u5f3a\u5236\u5728\u7ebf\u7684\u8bdd\uff0c\u5927\u90e8\u5206\u9898\u89e3\u90fd\u6ca1\u996d\u5403\uff0c\u5f53\u7136\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u80fd\u4ec5\u4ec5\u7528\u4e0b\u9762\u7684\u601d\u8def\u4e86\uff09\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u4e86\u89e3\u5e73\u8861\u6811\u7684\u524d\u8eab\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u3002\n\n\u5b83\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n1. \u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u53ef\u6bd4\u8f83\u5927\u5c0f\u7684\u6743\u503c\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u7684\u6743\u503c\u5c0f\u4e8e\u5b83\u7684\u6743\u503c\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5b83\u7684\u53f3\u513f\u5b50\u7684\u6743\u503c\u5927\u4e8e\u5b83\u7684\u6743\u503c\n1. \u5de6\u53f3\u5b50\u6811\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u6743\u503c\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u8be5\u7ed3\u70b9\u6743\u503c\uff0c\u53f3\u5b50\u6811\u6743\u503c\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u8be5\u7ed3\u70b9\u6743\u503c\u3002\n\n\u4ed6\u53ef\u4ee5\u5b9e\u73b0\u65f6\u95f4\u4e3a O(\u6811\u9ad8)\uff08n\u4e3a\u603b\u7ed3\u70b9\u4e2a\u6570\uff09 \u7684\u67e5\u627e\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u53d6\u6700\u5927\u503c\u3002\u6811\u9ad8\u4e00\u822c\u4e3a $log_2n$\n\n~~\uff08\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u5b83\u600e\u4e48\u5b9e\u73b0\u7684\u4e86\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\u3002\uff09~~\n\n\u4f46\u662f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u8fd9\u9053\u9898\uff09\uff0c\u5b83\u4f1a\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u56e0\u4e3a\u6240\u6709\u6570\u636e\u6709\u5e8f\uff0c\u90a3\u4e48\u6bcf\u6b21\u67e5\u627e\u7684\u590d\u6742\u5ea6\u5c06\u8fbe\u5230 $O(n)$,\u6211\u4eec\u65e0\u6cd5\u627f\u53d7\u3002\n\n\u6240\u4ee5\uff0c\u5e73\u8861\u6811\u5c31\u662f\u5bf9\u4e8c\u53c9\u67e5\u627e\u6811\u8fdb\u884c\u6539\u8fdb\uff0c\u4f7f\u5176\u65e2\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u6027\u8d28\uff0c\u53c8\u80fd\u5c3d\u91cf\u628a\u6811\u9ad8\u5e73\u5747\u4e3a $O(log_2n)$\u7684\u6570\u636e\u7ed3\u6784\n\n\u63a5\u4e0b\u6765\u5f00\u59cb\u6b63\u5f0f\u4ecb\u7ecd Treap:\n\n\u53d8\u91cf\u58f0\u660e\uff1a\n$lson(k),rson(k)$ \u662f k \u7684\u5de6\u3001\u53f3\u513f\u5b50,$val(k)$ \u662f k \u7684\u6743\u503c\uff0c$pos(k)$ \u662f k \u7684\u4f18\u5148\u7ea7\n\nTreap \u7684\u6539\u8fdb\u65b9\u6cd5\u662f\u7ed9\u6bcf\u4e2a\u7ed3\u70b9\u8d4b\u4e88\u4e00\u4e2a\u4f18\u5148\u7ea7\uff08\u503c\u968f\u673a\uff09\uff0c\u5e76\u4f7f\u8be5\u6811\u6743\u503c\u6ee1\u8db3\u4e8c\u53c9\u67e5\u627e\u6811\u6027\u8d28\u65f6\uff0c\u4f18\u5148\u7ea7\u6ee1\u8db3\u5c0f\u6839\u5806\u6027\u8d28\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u968f\u673a\u6570\u636e\u6709\u5e8f\u7684\u6982\u7387\u5f88\u5c0f\uff0c\u6545\u6211\u4eec\u80fd\u628a\u6811\u9ad8\u63a7\u5236\u5728 $O(log_2n)$\n\n\u90a3\u6211\u4eec\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u6027\u8d28\u5462\uff1f\u8981\u501f\u52a9\u65cb\u8f6c\u64cd\u4f5c\uff1a\n\n\u56de\u5fc6\u6211\u4eec\u7ef4\u62a4\u4e8c\u53c9\u5c0f\u6839\u5806\u65f6\uff0c\u5982\u679c\u78b0\u5230\u4e0d\u7b26\u5408\u6027\u8d28\u7684\u7236\u5b50\uff0c\u6211\u4eec\u600e\u4e48\u529e\uff1f\n```cpp\nswap(h[now],h[now/2]);\n```\n\u662f\u7684\uff0c\u6211\u4eec\u628a\u4e24\u4e2a\u8282\u70b9\u4ea4\u6362\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u7834\u574f\u4e8c\u53c9\u67e5\u627e\u6811\u6027\u8d28\uff08\u4ee5\u4e0b\u7b80\u79f0 BST \u6027\u8d28\uff09\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u4f9d\u65e7\u8003\u8651\u4ea4\u6362\u7ed3\u70b9 k \u548c $fa[k]$ \u7684\u7236\u5b50\u5173\u7cfb\uff0c\u4f46\u662f\u5de6\u53f3\u8981\u6539\u53d8\uff08\u5373\u5982\u679c k \u662f $fa[k]$ \u7684\u53f3\u513f\u5b50\uff0c\u5219\u4ea4\u6362\u540e,$fa[k]$ \u5c31\u662f k \u7684\u5de6\u513f\u5b50\uff09\uff0c\u8fd9\u5c31\u8981\u901a\u8fc7\u65cb\u8f6c\u4e86\u3002\n\n\u65cb\u8f6c\u5206\u4e3a\u4e24\u79cd\uff0c\u5de6\u65cb\uff08Zag\uff09\u548c\u53f3\u65cb(Zig)\u3002\u5148\u4ecb\u7ecd\u53f3\u65cb\u3002\n\n\u82e5\u53f3\u65cb\u4ee5 k \u4e3a\u6839\u5b50\u6811\uff0c\u90a3\u4e48 k \u7684\u5de6\u5b50\u7ed3\u70b9\u662f\u5b50\u6811\u7684\u65b0\u6839\uff0ck \u5c06\u6210\u4e3a\u65b0\u6839\u7684\u53f3\u5b50\u7ed3\u70b9\u3002\n\n\u5927\u6982\uff0c\u50cf\u8fd9\u6837\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/bd18rvan.png?x-oss-process=image/resize,m_lfit,h_510,w_675)\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u53f3\u65cb\u540e\u4f9d\u7136\u6ee1\u8db3 BST \u6027\u8d28\uff1a\n\n\u56e0\u4e3a $val(k)\\gt val(rson(lson(k))) \\gt val(lson(k))$(BST \u6027\u8d28\uff09\uff0c\u6240\u4ee5 $val(k) \\gt lson(k)$\uff0c\u7ea2\u8fb9\u4e0a\u7684\u4e24\u70b9\u6ee1\u8db3\u6027\u8d28\uff0c\u540c\u7406\uff0c\u84dd\u8fb9\u4e0a\u7684\u4e24\u70b9\u6ee1\u8db3\u6027\u8d28\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\nstruct node{\n\tint lc,rc,pos,val,cnt;\n}t[N];\n#define lc(x) t[x].lc\n#define rc(x) t[x].rc\n#define p(x) t[x].pos\n#define v(x) t[x].vis\n#define c(x) t[x].cnt  //\u52a0\u4e00\u4e2a\u5c5e\u6027\uff0c\u8bb0\u5f55\u91cd\u590d\u7ed3\u70b9\u7684\u4e2a\u6570\nvoid zig(int &k)\n{\n\tint y=lc(k);   //\u5b50\u6811\u65b0\u6839\n    lc(k)=rc(y);   // \u5bf9\u4e0a\u56fe\u84dd\u8fb9\u7684\u64cd\u4f5c\n    rc(y)=k;       //\u628a k \u53d8\u4e3a\u65b0\u6839\u7684\u53f3\u5b50\u8282\u70b9\n    k=y;           //\u56e0\u4e3a\u52a0\u4e86\u5f15\u7528\uff0c\u6240\u4ee5\u65cb\u8f6c\u5b8c\u540e k \u4f1a\u6307\u5411\u5b50\u6811\u7684\u65b0\u6839\n}\n```\n\u770b\u5230\u8fd9\u91cc\uff0c\u6709\u4eba\u5c31\u4f1a\u95ee\u4e86\uff0c\u65cb\u8f6c\u5b8c\u540e\u4f60\u4e0d\u5e94\u8be5\u8ba9 k \u7684\u7236\u8282\u70b9\u7684\u513f\u5b50\u53d8\u4e3a y \u5417\uff1f\u5176\u5b9e\uff0c\u56e0\u4e3a\u6211\u4eec\u52a0\u4e86\u5f15\u7528 &,\u6240\u4ee5k \u7684\u5bc4\u5b58\u5668\u4e0e\u5e73\u8861\u6811\u7684\u67d0\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff08\u6ce8\u610f\u4e0d\u662f\u67d0\u4e2a\u8282\u70b9\uff01\u6839\u7ed3\u70b9\u9664\u5916\uff09\uff08\u6216\u6839\u7ed3\u70b9\uff09\u76f8\u540c\uff0c\u6545\u6539\u53d8 k \u7684\u503c\uff0c\u4e5f\u5c31\u6539\u53d8\u4e86 k \u7684\u7236\u4eb2\u7684\u513f\u5b50\u7684\u503c\u3002\uff08\u8fd9\u91cc\u5c06\u5728\u63a5\u4e0b\u6765\u5f97\u5230\u4f53\u73b0\uff0c\u8fd8\u6ca1\u770b\u61c2\u7684\u4e0d\u6025\uff09\n\n\u5de6\u65cb\uff08Zag\uff09\u5462\uff1f\u628a\u4e0a\u56fe\u7684\u7bad\u5934\u53cd\u8fc7\u6765\u5c31\u597d\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e0a\u4ee3\u7801\uff1a\n```cpp\nvoid zag(int &k)\n{\n\tint y=rc(k);\n    rc(k)=lc(y);\n    lc(y)=k;\n    k=y;\n}\n```\n\u63a5\u4e0b\u6765\u8bb2\u63d2\u5165\uff1a\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u901a\u8fc7\u7ed3\u70b9\u6743\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u6765\u627e\u5230\u4e00\u4e2a\u9002\u5408\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5c06\u65b0\u8282\u70b9\u63d2\u5165\uff0c\u4f46\u63d2\u5165\u65f6\u968f\u673a\u4ea7\u751f\u7684\u4f18\u5148\u7ea7\u53ef\u80fd\u4f1a\u7834\u574f\u5806\u5e8f\u3002\u6240\u4ee5\u5728\u56de\u6eaf\u65f6\u8981\u8fdb\u884c\u9002\u5f53\u7684\u65cb\u8f6c\u3002\n\n\u6bd4\u5982\u8bf4\uff0c\u67d0\u4e2a\u7ed3\u70b9\u548c\u5b83\u7684\u5de6\u5b50\u7ed3\u70b9\u7684\u4f18\u5148\u7ea7\u7834\u574f\u4e86\u5806\u5e8f\uff0c\u6211\u4eec\u5c31\u8981\u628a\u5b83\u7684\u5de6\u5b50\u7ed3\u70b9\u8f6c\u4e0a\u53bb\uff0c\u628a\u90a3\u4e2a\u7ed3\u70b9\u8f6c\u4e0b\u6765\uff0c\u8fd8\u8bb0\u5f97\u8fd9\u662f\u4ec0\u4e48\u64cd\u4f5c\u5417\uff1f\u5bf9\uff0c\u5c31\u662f\u53f3\u65cb\u4ee5\u90a3\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\uff08\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u8fd4\u56de\u53bb\u770b\u4e0a\u9762\u7684\u56fe\uff09\u3002\n\n\u53cd\u4e4b\uff0c\u5982\u679c\u8bf4\u67d0\u4e2a\u8282\u70b9\u548c\u5b83\u7684\u53f3\u5b50\u8282\u70b9\u7834\u574f\u5806\u5e8f\uff0c\u90a3\u5c31\u5de6\u65cb\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002\n\n\u5173\u4e8e\u5982\u4f55\u67e5\u627e\u4f4d\u7f6e.....\u5982\u679c\u76ee\u524d\u7ed3\u70b9\u503c\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u503c\uff0c\u5c31\u5230\u5de6\u5b50\u6811\u627e\uff08\u5f80\u5c0f\u4e86\u627e\uff09\uff0c\u53cd\u4e4b\u5230\u53f3\u5b50\u6811\u53bb\u627e\uff08\u5f80\u5927\u4e86\u627e\uff09\u3002\n\n\u4e0a\u4ee3\u7801\u5427\uff01\n```cpp\nvoid insert(int &k,const int vi) //k \u662f\u76ee\u524d\u7ed3\u70b9,vi \u662f\u5f85\u63d2\u5165\u6743\u503c\n\t            \t\t\t\t //\u6ce8\u610f\u5230\u8fd9\u91cc\u4e5f\u52a0\u4e86\u5f15\u7528\n{\n\tif(!k) //\u5df2\u627e\u5230\u5408\u9002\u4f4d\u7f6e\n    {\n    \tk=++cnt;\n        v(k)=vi; //\u6240\u6709 define \u540c\u65cb\u8f6c\u65f6\u7684\u4ee3\u7801\n        p(k)=rand();\n        lc(x)=rc(x)=0;\n        c(k)=1;\n     }\n     if(v(k)==key)++c(k);\n     if(v(k)>vi)\n     {\n     \tinsert(lc(k),vi);  //\u9012\u5f52\u5728\u5de6\u5b50\u6811\u4e2d\u5bfb\u627e\n                           //\u5982\u679c\u5728\u8fd9\u4e2a\u9012\u5f52\u4e2d\u53d1\u751f\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u76f8\u5e94\u5730\uff0clc(k) \u7684\u503c\u4e5f\u4f1a\u6539\u53d8\uff08\u52a0\u4e86\u5f15\u7528\uff09\n        if(p(k)>p(lc(k))) zig(k);  //\u76f8\u5bf9\u5e94\u5730\uff0c\u8fd9\u4e00\u5c42\u4e5f\u53ef\u80fd\u662f\u53e6\u5916\u4e00\u5c42\u9012\u5f52\u800c\u6765\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u6539\u53d8 k \uff0c\u5c31\u662f\u6539\u53d8\u4e86 lson/rson(father(k))\n                          //\u56e0\u6b64\uff0c\u5728\u65cb\u8f6c\u51fd\u6570\u4e2d\u5c31\u4e0d\u7528\u53e6\u5916\u5904\u7406\u7236\u8282\u70b9\u4e86(\u8c8c\u4f3c\u6307\u9488\u7248\u7684\u66f4\u597d\u7406\u89e3\uff09\n      }\n      else\n      {\n      \t\tinsert(rc(k),vi);\n            if(p(k)>p(rc(k))) zag(k);\n      }\n}\n```\n\n\u5728\u5e73\u8861\u6811\u91cc\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9\uff0c\u53c8\u8981\u600e\u4e48\u505a\u5462\uff1f\uff08\u867d\u7136\u8fd9\u9053\u9898\u4e2d\u5e76\u672a\u6d89\u53ca\uff09\n\n\u7c7b\u4f3c\u4e8e\u63d2\u5165\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u7ed3\u70b9\u6743\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u627e\u5230\u90a3\u4e2a\u5e26\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u6216\u6ca1\u6709\u513f\u5b50\uff0c\u90a3\u5c31\u8ba9\u5b83\u7684\u513f\u5b50\u6765\u4ee3\u66ff\u5b83\uff0c\u50cf\u8fd9\u6837\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/j7az967x.png?x-oss-process=image/resize,m_lfit,h_510,w_675)\n\n\u5982\u679c\u6709\u4e24\u4e2a\u513f\u5b50\uff0cTreap \u91c7\u53d6\u7684\u7b56\u7565\u662f\u901a\u8fc7\u65cb\u8f6c\uff0c\u8ba9\u5176\u53d8\u4e3a\u80fd\u76f4\u63a5\u5220\u9664\u7684\u7ed3\u70b9\u3002\n\n\u600e\u4e48\u65cb\u8f6c\u5462\uff1f\n\n\u5728\u8be5\u7ed3\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u4e2d\uff0c\u5982\u679c\u5de6\u513f\u5b50\u7684\u4f18\u5148\u7ea7\u8f83\u5c0f\uff0c\u5219\u53f3\u65cb\u8be5\u7ed3\u70b9\uff08\u628a\u5de6\u513f\u5b50\u65cb\u4e0a\u6765\uff09\uff0c\u53cd\u4e4b\u5de6\u65cb\u8be5\u7ed3\u70b9\uff0c\u5982\u6b64\u9012\u5f52\uff0c\u76f4\u5230\u8be5\u7ed3\u70b9\u53ef\u4ee5\u88ab\u76f4\u63a5\u5220\u9664\u3002\n\n\u8fd9\u6837\u5c31\u6709\u4eba\u4f1a\u95ee\u4e86\uff0c\u4e0d\u4f1a\u7834\u574f\u5806\u5e8f\u5417\uff1f\u5176\u5b9e\u5e76\u4e0d\u4f1a\u3002\n\n\u5982\u679c\u65cb\u8f6c\u6b21\u6570\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u8be5\u7ed3\u70b9\u7ecf\u8fc7\u7684\u5730\u65b9\u53ef\u88ab\u89c6\u4e3a\u6709\u9650\u4e2a\u4e0b\u56fe\u6a21\u578b\u7684\u7ed3\u5408\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/8a8duikb.png?x-oss-process=image/resize,m_lfit,h_510,w_675)\n\n\u5982\u679c\u65cb\u8f6c\u6b21\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u8be5\u7ed3\u70b9\u7ecf\u8fc7\u7684\u5730\u65b9\u53ef\u88ab\u89c6\u4e3a\u6709\u9650\u4e2a\u4e0b\u56fe\u6a21\u578b\u7684\u7ed3\u5408\u52a0\u4e0a\u4e00\u4e2a\u4e09\u89d2\uff08\u5373\u4e00\u4e2a\u67093\u4e2a\u8282\u70b9\uff0c\u9ad8\u4e3a2\u7684\u5b50\u6811\uff09\uff0c\u4f9d\u65e7\u6ee1\u8db3\u5806\u5e8f\u3002\n\nBST\u6027\u8d28\u5c31\u4e0d\u7528\u8bf4\u4e86\uff0c\u8f6c\u6210\u4ec0\u4e48\u6837\u90fd\u662f\u6ee1\u8db3\u7684\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\nvoid Delete(int &k,const int vi)\n{\n\tif(v(k)==vi)\n    {\n    \tif(c(k)==1)\n        {\n        if(!lc(k)||!rc(k)) k=lc(k)+rc(k);  //\u76f8\u5f53\u4e8e lc(k)?lc(k):rc(k);\n        else if(p(lc(k))<p(rc(k)))    //\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\u65f6\uff0c\u65cb\u8f6c\u8c03\u6574     zig(k),Delete(k,vi);\n        else zag(k),Delete(k,vi);\n        }\n        else --c(k);\n        return;\n     }\n     if(v(k)>vi) Delete(lc(k),vi);\n     else Delete(rc(k),vi);\n}\n```\n\n\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\uff1a\n\n\u524d\u9a71\uff1a\u5728\u5e8f\u5217\u4e2d\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u6570\u4e2d\u7684\u6700\u5927\u503c\n\n\u540e\u7ee7\uff1a\u5728\u5e8f\u5217\u4e2d\u5927\u4e8e\u67d0\u4e2a\u6570\u7684\u6570\u4e2d\u7684\u6700\u5c0f\u503c\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u786e\uff0c\u524d\u9a71\u5e76\u4e0d\u7b49\u4e8e\u8fd9\u4e2a\u6570\u672c\u8eab\uff0c\u6240\u4ee5\u6211\u4eec\u8d70\u5230\u7684\u7ed3\u70b9\u7b49\u4e8e\u8fd9\u4e2a\u6570\u65f6\uff0c\u4e0d\u8981\u8bb0\u5f55\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u8d70\u5230\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5982\u679c\u8be5\u7ed3\u70b9\u7684\u6743\u503c\u4e25\u683c\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\uff0c\u5c31\u5f80\u53f3\u5b50\u6811\u8d70\uff08\u5f80\u5927\u4e86\u627e\uff09\uff0c\u5426\u5219\u5f80\u5de6\u5b50\u6811\u8d70\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nint querypre(const int vi)\n{\n\tint x=rt,res=0;  //rt\u662f\u4e2a\u53d8\u91cf\uff0c\u521d\u503c\u4e3a0\uff0c\u50a8\u5b58\u6839\u7ed3\u70b9\u7684\u7f16\u53f7\uff0cinsert \u548c delete \u7684\u9012\u5f52\u8d77\u59cb\u5904\u4e5f\u4e3a rt\n    while(x)\n    {\n    if(v(x)<vi) res=v(x),x=rc(x);\n    else x=lc(x);\n    }\n}\n```\n\u67e5\u627e\u540e\u7ee7\u540c\u7406\u3002\n\n\uff08\u6bcf\u9053\u9898\u5bf9\u524d\u9a71\u548c\u540e\u7ee7\u7684\u5b9a\u4e49\u4e0d\u540c\uff0c\u5982\u679c\u5305\u62ec\u672c\u8eab\uff0c\u67e5\u627e~~\u4e8c\u5206~~\u65f6\u52a0\u4e2a\u7b49\u53f7\u5c31\u884c\uff09\n\n\u5176\u5b9e\uff0c\u5e73\u8861\u6811\u8fd8\u53ef\u4ee5\u67e5\u627e\u5143\u7d20\u7684\u6392\u540d\u548c\u67d0\u4e2a\u6392\u540d\u4e0a\u7684\u5143\u7d20\uff0c\u8fd9\u9700\u8981\u7ef4\u62a4\u4ee5\u6bcf\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u8282\u70b9\uff0c\u7b14\u8005\u4e0d\u518d\u8d58\u8ff0\uff0c\u5927\u5bb6\u81ea\u5df1\u7422\u78e8\u3002\n\n\u4e0a\u8fd9\u9053\u9898\u7684 AC code \u5427\uff01\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50001;\nint n,m;\nint liang[N],top=0; //\u4fdd\u5b58\u964d\u96e8\u91cf\uff0c\u4e0b\u6807\u662f\u6620\u5c04\u51fa\u7684\u503c\uff0c\u4e0d\u662f\u5e74\u4efd\nstruct Treap{   //\u5e73\u8861\u6811\u8bb2\u8fc7\u4e86\uff0c\u4e0d\u8bb2\n\tstruct node{\n\t\tint lc,rc,pos, vis,vis2;  //\u5176\u5b9e\u7528\u5e73\u8861\u6811\u6620\u5c04\u5e76\u4e0d\u96be\uff0c\u4e00\u4e2a\u8282\u70b9\u4e0a\u5f04\u4fe9\u6743\u503c\u5c31\u597d\n\t}t[N];\n\tint jie,rt; //\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u6839\uff0c\u5373 rt\uff0c\u56e0\u4e3a\u5f15\u7528\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u6839\u7f16\u53f7\n\t#define lc(x) t[x].lc\n\t#define rc(x) t[x].rc\n\t#define p(x) t[x].pos\n\t#define v(x) t[x].vis\n\t#define v2(x) t[x].vis2\n\tTreap(int val=0)\n\t{\n\t\tfor(int x=1;x<=n;x++) lc(x)=rc(x)=p(x)=v(x)=0,v2(x)=val;\n\t\t\n\t\tjie=rt=0;\n\t}\n\tinline void zig(int &k)\n\t{\n\t\tint y=lc(k);\n\t\t lc(k)=rc(y);\n\t\t rc(y)=k;\n\t\t k=y;\n\t}\n\tinline void zag(int &k)\n\t{\n\t\tint y=rc(k);\n\t\trc(k)=lc(y);\n\t\tlc(y)=k;\n\t\tk=y;\n\t}\n\tinline void insert(int &k,const int vi,const int vi2);\n\tinline int find(const int vi) //\u67e5\u627e\u81ea\u5df1\u7406\u89e3\n\t{\n\t\tint x=rt;\n\t\twhile(x)\n\t\t{\n\t\t\tif(v(x)>vi) x=lc(x);\n\t\t\telse if(v(x)<vi) x=rc(x);\n\t\t\telse if(v(x)==vi) return v2(x);\n\t\t}\n\t\treturn -1;\n\t}\n\tint operator [](const int vi)   //\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u4f5c\u7528\u76f8\u5f53\u4e8e\u67e5\u627e\n\t{\n\t\treturn find(vi);\n\t}\n\tinline void print(const int k);\n\tinline int querypre(const int k)\n\t{\n\t\tint x=rt,res=0;\n\t\twhile(x)\n\t\t{\n\t\t\tif(v(x)<k) res=v(x),x=rc(x);\n\t\t\telse x=lc(x);\n\t\t}\n\t\treturn res;\n\t}\n\tinline int querysuf(const int k)\n\t{\n\t\tint x=rt,res=0;\n\t\twhile(x)\n\t\t{\n\t\t\tif(v(x)>k) res=v(x),x=lc(x);\n\t\t\telse x=rc(x);\n\t\t}\n\t\treturn res;\n\t}\n};\ninline void Treap::insert(int &k,const int vi,const int vi2)\n{\n\tif(!k)\n\t{\n\t\tk=++jie;\n\t\tv(k)=vi;p(k)=rand();lc(k)=rc(k)=0;v2(k)=vi2; \n\t\treturn;\n\t}\n\t if(v(k)>vi)\n\t{\n\t\tinsert(lc(k),vi,vi2);\n\t\tif(p(k)>p(lc(k))) zig(k);\n\t}\n\telse if(v(k)<vi)\n\t{\n\t\tinsert(rc(k),vi,vi2);\n\t\tif(p(k)>p(rc(k))) zag(k);\n\t}\n}\ninline void Treap::print(const int k)\n{\n\tif(!k) return;\n\tprint(lc(k));\n\tprintf(\"%d %d\\n\",v(k),v2(k));\n\tprint(rc(k));\n}\nTreap she(0);\ninline void clear()  //\u8bfb\u5165\n{\n\tscanf(\"%d\",&n);\n\tint last=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint t1,t2;\n\t\tscanf(\"%d%d\",&t1,&t2);\n\t\tliang[++top]=t2;\n\t\tshe.insert(she.rt,t1,top); //\u7528\u5e73\u8861\u6811\u6620\u5c04\n\t\t\n\t}\n}\nstruct line_tree{   //\u7ebf\u6bb5\u6811\u5e38\u89c4\u64cd\u4f5c\uff0c\u4e0d\u8bb2\n\tint Max[N<<2];\n\tint *array; \n\t\n\tline_tree(int *t)\n\t{\n\t\tarray=t;\n\t\tmemset(Max,128,sizeof Max);\n}\n\tinline void build(int k,int l,int r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tMax[k]=array[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(k<<1,l,mid);\n\t\tbuild(k<<1|1,mid+1,r);\n\t\tMax[k]=max(Max[k<<1],Max[k<<1|1]);\n\t}\n\tinline int query(int k,int l,int r,int x,int y)\n\t{\n\t\tif(l>y||r<x) return INT_MIN;\n\t\tif(x<=l&&r<=y) return Max[k];\n\t\tint mid=l+r>>1;\n\t\treturn max(query(k<<1,l,mid,x,y),query(k<<1|1,mid+1,r,x,y));\n\t}\n\tinline void print(int k,int l,int r);\n};\ninline void line_tree::print(int k,int l,int r)   //Debug \u7528\u7684\n{\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tprint(k<<1,l,mid);\n\tprintf(\"%d %d %d\\n\",l,mid,Max[k<<1]);\n\tprintf(\"%d %d %d\\n\",l,r,Max[k]);\n\tprintf(\"%d %d %d\\n\",mid+1,r,Max[k<<1|1]);\n\tprint(k<<1|1,mid+1,r);\n}\ninline void work()\n{\n\tline_tree anss(liang); //\u7ebf\u6bb5\u6811 anss \u7ef4\u62a4\u964d\u96e8\u91cf   \n\tanss.build(1,1,top);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint t1,t2;\n\t\tscanf(\"%d%d\",&t1,&t2);\n\t\tint x1=she[t1],x2=she[t2];  //\u627e\u4e0d\u5230\u5c31\u8fd4\u56de -1\n\t\tif(x1==-1&&x2==-1)     //\u5224\u5b9a\uff08\u6211\u592a\u5357\u4e86\uff09\n\t\t{\n\t\t\tprintf(\"maybe\\n\");continue;\n\t\t}\n\t\telse if(x1==-1&&x2!=-1)\n\t\t{\n\t\t\tint h1=she[she.querysuf(t1)];\n\t\t\tif(anss.query(1,1,top,h1,x2-1)<liang[x2]||she[she.querysuf(t1)]==x2) printf(\"maybe\\n\");\n\t\t\telse printf(\"false\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse if(x1!=-1&&x2==-1)\n\t\t{\n\t\t\tint h2=she[she.querypre(t2)];\n\t\t\tif(x1+1==she[she.querysuf(t2)]) printf(\"maybe\\n\");\n\t\t\telse\n\t\t\tif(anss.query(1,1,top,x1+1,h2)>=liang[x1]) printf(\"false\\n\");\n\t\t\telse printf(\"maybe\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\n\t\t\tif(liang[x1]<liang[x2]) {puts(\"false\");continue;}\n\t\t\tif(x1+1==x2&&t1+1==t2) {puts(\"true\");continue;}\n\t\t\tif(anss.query(1,1,top,x1+1,x2-1)>=liang[x2]) {puts(\"false\");continue;}\n\t\t\tif(x1+1==x2&&t1+1!=t2){puts(\"maybe\");continue;}\n\t\t\tif(t1-t2==x1-x2){puts(\"true\");continue;}\n\t\t\tputs(\"maybe\");\n\t\t\tcontinue;\n\t\t}\n\t\n\t}\n\n}\nint main()   //\u4e3b\u51fd\u6570\u83ab\u540d\u7b80\u5355\n{ \n\tclear();\n\twork();\n\treturn 0;\n}\n```\n\u5176\u5b9e\uff0c\u5e73\u8861\u6811\u5999\u5c31\u5999\u5728\u5b83\u548c\u4e8c\u5206\u7684\u6027\u8d28\u5b8c\u7f8e\u5951\u5408\uff08\u7528\u590d\u6742\u5ea6\u8f83\u4f4e\u7684\u5224\u65ad\u6392\u9664\u534a\u6570\u7684\u53ef\u80fd\u503c\uff09~~~\n\n\u8fd9\u662f\u6211\u5455\u5fc3\u6ca5\u88403\u5929\u7684\u9898\u89e3\u5440\uff01\u53ea\u8981\u4f60\u4eec\u80fd\u770b\u8fdb\u53bb\u6211\u5c31\u4e0d\u4e8f\u4e86\u3002",
        "postTime": 1587734259,
        "uid": 226435,
        "name": "\u5929\u547d\u4e4b\u8def",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u6076\u5fc3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u5f88\u591a\u3002\n\n\u96be\u602a\u7701\u9009/NOI-\u96be\u5ea6\u3002\n\nRMQ\u7528ST\u8868\u7ef4\u62a4\u3002\n\n\u601d\u8def\u5176\u5b9e\u548c\u697c\u4e0b\u5dee\u4e0d\u591a\uff0c\u63d0\u4f9bAC\u4ee3\u7801:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <stack>\n#include <list>\n#define rep(i,m,n) for(int i=m;i<=n;i++)\n#define dop(i,m,n) for(int i=m;i>=n;i--)\n#define lowbit(x) (x&(-x))\n#define ll long long\n#define INF 2147483647\n#define re register\n#define Open(s) freopen(s\".in\",\"y\",stdin);freopen(s\".out\",\"f\",stdout);\n#define Close fclose(stdin);fclose(stdout);\nusing namespace std;\ninline int read(){\n    int s=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n    return s*f;\n}\nconst int maxn=100010;\nint Log[maxn],f[maxn][22],ad[maxn],q,ans,n,m,a,b,tmp,num,MAX;\ninline int Max(int a,int b){return a>b?a:b;}\ninline int Min(int a,int b){return a<b?a:b;}\ninline int Getad(int x){return lower_bound(ad+1,ad+n+1,x)-ad;}\ninline int QueryMax(int x,int y){\n    if(x>y) return -INF;\n    int k=Log[y-x+1];\n    return Max(f[x][k],f[y-(1<<k)+1][k]);\n}\nint main(){\n    n=read();\n    Log[0]=-1;\n    rep(i,1,n) ad[i]=read(),f[i][0]=read();\n    rep(i,1,n) Log[i]=Log[i/2]+1;\n    rep(i,1,20)\n       for(int j=1;j+(1<<i)-1<=n;j++)\n          f[j][i]=Max(f[j][i-1],f[j+(1<<(i-1))][i-1]);\n    m=read();\n    while(m--){\n      a=read();b=read();\n      int x=Getad(a),y=Getad(b);\n      bool nl=(x<=n && ad[x]==a), nr=(y<=n && ad[y]==b);\n      if(nl){\n        if(nr){\n          q=QueryMax(x+1,y-1);\n          if(f[x][0]<f[y][0]) ans=0;\n          else if(q<f[y][0]){\n            if(y-x==b-a) ans=1;\n            else ans=-1;\n          }\n          else ans=0;\n        }\n        else{\n          q=QueryMax(x+1,y-1);\n          if(q<f[x][0]) ans=-1;\n          else ans=0;\n        }\n      }\n      else{\n        if(nr){\n          q=QueryMax(x,y-1);\n          if(q<f[y][0]) ans=-1;\n          else ans=0;\n        }\n        else ans=-1;\n      }\n      if(ans==1) puts(\"true\");\n      else if(ans==-1) puts(\"maybe\");\n      else puts(\"false\");\n    }\n    return 0;\n}\n```",
        "postTime": 1507190104,
        "uid": 54636,
        "name": "Riven_Yasuo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u4e00\u9053\u500d\u589e\u548c\u6a21\u62df\u7684\u5408\u5e76\u9898\u3002\n\n\u5982\u679c\u6ca1\u6709\"maybe\"\u8fd9\u4e2a\u9009\u9879\uff0c\u5c31\u53ef\u4ee5\u7528\u500d\u589e\u5b8c\u6210\u3002\n\n\u4f46\u73b0\u5728\u6709\"maybe\"\uff0c\u5176\u5b9e\u53ea\u9700\u8981\u7279\u5224\u4ee5\u4e0b\u60c5\u51b5\n1. \u8be5\u5e74\u6ca1\u6709\u63d0\u5230\uff0c\u5373\u4e0d\u77e5\u9053\u8d77\u59cb\u5e74\u6216\u7ec8\u6b62\u5e74\u7684\u964d\u96e8\u91cf\u3002\n1. \u79bb\u6563\u5316\u4e4b\u540e\u4e24\u4e2a**\u4e0b\u6807\u5dee**\u4e0d\u7b49\u4e8e**\u5e74\u4efd\u5dee**\uff08\u5373\u4e0d\u8fde\u7eed\uff09\n\n\u9488\u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6837\u4f8b\n```\n6\n1 100\n2 200\n4 300\n6 400\n7 500\n8 600\n2\n1 4\n6 7\n```\n\u5982\u679c\u628a\u79bb\u6563\u5316\u540e\u7684\u60c5\u51b5\u753b\u51fa\u6765\uff0c\u5c31\u662f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/881ua396.png)\n\n1\u548c4\u7684\u5e74\u4efd\u5dee\u662f3\uff0c\u4f46\u4e0b\u6807\u5dee\u662f2\uff0c\u6240\u4ee5\u4e0d\u8fde\u7eed\u3002\n\n6\u548c7\u7684\u5e74\u4efd\u5dee\u662f1\uff0c\u4e0b\u6807\u5dee\u4e5f\u662f1\uff0c\u7b26\u5408\u8981\u6c42\u3002\n\n\u6ce8\u610f\uff1a\u7279\u5224\u8981\u5728\u8fde\u7eed\u7684\u57fa\u7840\u4e0a\uff0c\u6240\u4ee5\u5148\u8981\u5224\u65ad\u662f\u5426\u8fde\u7eed\uff0c\u5373\u662f\u4e0d\u662f\"false\"\u3002\n\n\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define ff {cout<<\"false\"<<endl;continue;}\n#define mm {cout<<\"maybe\"<<endl;continue;}\nusing namespace std;\nlong long year[50001],rain[50001],mx[50001][17],n,q;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(long long i=1;i<=n;i++)\n    {\n        cin>>year[i]>>rain[i];\n        mx[i][0]=rain[i];\n    }\n    for(long long i=0;i<16;i++)\n        for(long long l=1;l+(1<<(i+1))-1<=n;l++)\n            mx[l][i+1]=max(mx[l][i],mx[l+(1<<i)][i]);\n    scanf(\"%d\",&q);\n    for(long long i=1;i<=q;i++)\n    {\n        long long x,y;\n        cin>>x>>y;\n        if(x>=y)\n            ff\n        bool a=0,b=0;\n        long long xx=lower_bound(year+1,year+n+1,x)-year;\n        long long yy=lower_bound(year+1,year+n+1,y)-year;\n        if(year[xx]==x)\n            a=1;\n        if(year[yy]==y)\n            b=1;\n        if(a==0)\n            xx--;\n        long long k=log2(yy-xx-1);\n        long long ans=0;\n        if(xx+1<=yy-1)\n            ans=max(mx[xx+1][k],mx[yy-(1<<k)][k]);\n        if(a&&ans>=rain[xx])\n            ff\n        if(b&&ans>=rain[yy])\n            ff\n        if(a&&b&&rain[xx]<rain[yy])\n            ff\n        if(a==0||b==0)\n        {\n            mm\n        }\n        if(year[yy]-year[xx]!=yy-xx)\n        {\n            mm\n        }\n             \n        cout<<\"true\"<<endl;\n    }\n    return 0;\n}\n```\n",
        "postTime": 1584408233,
        "uid": 240812,
        "name": "45dino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/BZOJ1067.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a**\u8bf7\u4f60\u5224\u65ad\u201c$x$\u5e74\u662f\u81ea$y$\u5e74\u4ee5\u6765\u964d\u96e8\u91cf\u6700\u591a\u7684\u201d\u8fd9\u53e5\u8bdd\u7684\u771f\u5047\u3002\n\n### \u79bb\u6563\u5316/$lower\\_bound$\n\n\u9996\u5148\uff0c\u8003\u8651\u5230\u5e74\u4efd\u7684\u8303\u56f4\u975e\u5e38\u5927\uff0c\u4fbf\u53ef\u4ee5\u79bb\u6563\u5316\u3002\n\n\u800c\u6211\u6bd4\u8f83\u61d2\uff0c\u53cd\u6b63\u9898\u76ee\u4e2d\u8bf4\u4e86\u5e74\u4efd\u662f\u9012\u589e\u7684\uff0c\u56e0\u6b64\u6211\u76f4\u63a5\u7528\u4e86$C++$\u81ea\u5e26\u7684$lower\\_bound$\u3002\n\n### $RMQ$\n\n\u8fd9\u9898\u8fd8\u9700\u8981\u4f7f\u7528\u7684\u4e00\u4e2a\u7b97\u6cd5\u4fbf\u662f$RMQ$\u3002\n\n\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684\u7b97\u6cd5\u5427\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u52a0\u4ecb\u7ecd\u4e86\u3002\n\n\u81f3\u4e8e\u54ea\u91cc\u9700\u8981\u4f7f\u7528\uff0c\u540e\u9762\u4f60\u5c31\u77e5\u9053\u4e86\u3002\n\n### \u5206\u7c7b\u8ba8\u8bba\n\n\u8003\u8651\u5982\u679c\u662f$false$\uff0c\u5219\u65e0\u975e\u6709$3$\u79cd\u60c5\u51b5\uff1a\n\n1. \u5de6\u8fb9\u754c\u7684\u964d\u96e8\u91cf\u5df2\u77e5\u4e14\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u53f3\u8fb9\u754c\u95f4\u7684\u6700\u5927\u964d\u96e8\u91cf\u3002\n2. \u53f3\u8fb9\u754c\u7684\u964d\u96e8\u91cf\u5df2\u77e5\u4e14\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u53f3\u8fb9\u754c\u95f4\u7684\u6700\u5927\u964d\u96e8\u91cf\u3002\n3. \u5de6\u3001\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u7686\u5df2\u77e5\u4e14\u5de6\u8fb9\u754c\u964d\u96e8\u91cf\u5c0f\u4e8e\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u3002\n\n\u8fd9\u91cc\u8981\u6c42\u533a\u95f4\u6700\u5927\u964d\u96e8\u91cf\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u524d\u9762\u63d0\u5230\u8fc7\u7684$RMQ$\u4e86\u3002\n\n\u6ce8\u610f$RMQ$\u67e5\u8be2\u7684\u533a\u95f4\u8fb9\u754c\u7684\u8bbe\u5b9a\u3002\u5047\u8bbe$dx,dy$\u5206\u522b\u4e3a$x,y$\u79bb\u6563\u5316\u540e\u7684\u503c\uff0c\u5219\u6211\u4eec\u6c42\u6700\u5927\u503c\u65f6\u4e0d\u80fd\u628a\u5de6\u53f3\u8fb9\u754c\u7b97\u5728\u5185\u3002\n\n\u5bf9\u4e8e$dx$\uff0c\u82e5\u5176\u6070\u597d\u5728\u5de6\u8fb9\u754c\u4e0a\uff0c\u5219\u67e5\u8be2\u65f6\u987b\u52a0$1$\uff0c\u5426\u5219\u5176\u4f4d\u7f6e\u5fc5\u5927\u4e8e\u5de6\u8fb9\u754c\uff0c\u65e0\u9700\u52a0$1$\u3002\n\n\u5bf9\u4e8e$dy$\uff0c\u82e5\u5176\u6070\u597d\u5728\u6709\u8fb9\u754c\u4e0a\uff0c\u5219\u67e5\u8be2\u65f6\u987b\u51cf$1$\uff0c\u5426\u5219\u5176\u4f4d\u7f6e\u5fc5\u5927\u4e8e\u53f3\u8fb9\u754c\uff0c\u540c\u9700\u51cf$1$\u3002\u53ef\u5f97\u7ed3\u8bba\uff0c$dy$\u5fc5\u51cf$1$\u3002\n\n\u5728\u786e\u4fdd\u4e0d\u662f$false$\u7684\u524d\u63d0\u4e0b\uff0c\u8003\u8651\u5982\u679c\u662f$Maybe$\uff0c\u6709$2$\u79cd\u60c5\u51b5\uff1a\n\n1. \u5de6\u8fb9\u754c\u964d\u96e8\u91cf\u672a\u77e5\u6216\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u672a\u77e5\u3002\n2. \u5de6\u53f3\u8fb9\u754c\u95f4\u5b58\u5728\u964d\u96e8\u91cf\u672a\u77e5\u3002\n\n\u5176\u4e2d\u7b2c$2$\u79cd\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83\u5de6\u53f3\u8fb9\u754c\u79bb\u6563\u5316\u524d\u540e\u7684\u5dee\u503c\u662f\u5426\u4e00\u6837\uff0c\u4ece\u800c\u8fdb\u884c\u5224\u65ad\u3002\n\n\u5982\u679c\u4e0d\u662f$false$\u4e5f\u4e0d\u662f$maybe$\uff0c\u5219\u81ea\u7136\u5c31\u662f$true$\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 50000\n#define max(x,y) ((x)>(y)?(x):(y))\n#define GetPos(x) (lower_bound(s+1,s+n+1,data(x))-s)\n#define Maybe {puts(\"maybe\");continue;}\n#define False {puts(\"false\");continue;}\n#define True {puts(\"true\");continue;}\nusing namespace std;\nint n;\nstruct data \n{\n    int Year,Rain;I data(CI x=0,CI y=0):Year(x),Rain(y){}\n    I bool operator < (Con data& t) const {return Year^t.Year?Year<t.Year:Rain<t.Rain;}\n}s[N+5];\nclass FastIO\n{\n    private:\n        #define FS 100000\n        #define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n        #define tn (x<<3)+(x<<1)\n        #define D isdigit(c=tc())\n        int f;char c,*A,*B,FI[FS];\n    public:\n        I FastIO() {A=B=FI;}\n        Tp I void read(Ty& x) {x=0,f=1;W(!D) f=c^'-'?1:-1;W(x=tn+(c&15),D);x*=f;}\n        Ts I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n}F;\nclass RMQ//RMQ\u6c42\u533a\u95f4\u6700\u503c\n{\n    private:\n        static const int SZ=N,Log=16;int Log2[SZ+5],Max[SZ+5][Log+5];\n    public:\n        I void Init(CI n,data* s)//\u521d\u59cb\u5316\n        {\n            RI i,j;for(i=1;i<=n;++i) Max[i][0]=s[i].Rain;for(i=2;i<=n;++i) Log2[i]=Log2[i>>1]+1;\n            for(j=1;(1<<j)<=n;++j) for(i=1;i+(1<<j)<=n;++i) Max[i][j]=max(Max[i][j-1],Max[i+(1<<j-1)][j-1]);\n        }\n        I int GetMax(CI l,CI r) {if(l>r) return 0;RI k=Log2[r-l+1];return max(Max[l][k],Max[r-(1<<k)+1][k]);}//\u533a\u95f4\u6c42Max\n}R;\nint main()\n{\n    RI Qtot,i,x,y,dx,dy,dv;for(F.read(n),i=1;i<=n;++i) F.read(s[i].Year,s[i].Rain);//\u8bfb\u5165\u6570\u636e\n    R.Init(n,s),F.read(Qtot);W(Qtot--)//\u5904\u7406\u8be2\u95ee\n    {\n        F.read(x,y),dx=GetPos(x),dy=GetPos(y),dv=R.GetMax(s[dx].Year^x?dx:dx+1,dy-1);//\u8bfb\u5165x,y\uff0cdx,dy\u8868\u793a\u79bb\u6563\u5316\u540e\u7684\u4f4d\u7f6e\uff0cdv\u8868\u793a\u5de6\u53f3\u8fb9\u754c\u95f4\u7684\u6700\u5927\u964d\u96e8\u91cf\n        if(!(s[dx].Year^x)&&s[dx].Rain<=dv) False;if(!(s[dy].Year^y)&&s[dy].Rain<=dv) False;//\u5224\u65ad\u5de6\u3001\u53f3\u8fb9\u754c\u7684\u964d\u96e8\u91cf\u5df2\u77e5\u4e14\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u53f3\u8fb9\u754c\u95f4\u7684\u6700\u5927\u964d\u96e8\u91cf\u7684\u60c5\u51b5\n        if(!(s[dx].Year^x)&&!(s[dy].Year^y)&&s[dx].Rain<s[dy].Rain) False;//\u5224\u65ad\u5de6\u3001\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u7686\u5df2\u77e5\u4e14\u5de6\u8fb9\u754c\u964d\u96e8\u91cf\u5c0f\u4e8e\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u7684\u60c5\u51b5\n        if(s[dx].Year^x||s[dy].Year^y||(y-x)^(dy-dx)) Maybe;True;//\u5224\u65ad\u5de6\u8fb9\u754c\u964d\u96e8\u91cf\u672a\u77e5\u6216\u53f3\u8fb9\u754c\u964d\u96e8\u91cf\u672a\u77e5\u6216\u5de6\u53f3\u8fb9\u754c\u95f4\u5b58\u5728\u964d\u96e8\u91cf\u672a\u77e5\u7684\u60c5\u51b5\n    }return 0;\n}\n```",
        "postTime": 1552289811,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "**\u89e3\u9898\u601d\u8def\u548c\u6570\u7ec4\u610f\u4e49\u53c2\u7167[xyz32768\u7684\u9898\u89e3](https://www.luogu.org/blog/user29936/solution-p2471)**\n\n\n\n------------\n\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\u5199\u7684\u5f88\u597d\u4e86 \u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e00\u4e0b\u4ed6\u7684\u601d\u8def\u600e\u4e48\u53bb\u5b9e\u73b0\u7684\u95ee\u9898\n\n~~dalao\u8bf7\u81ea\u89c9\u65e0\u89c6\u8fd9\u7bc7\u9898\u89e3\u8c22\u8c22~~\n\n\u9898\u89e3\u91cc\u6709\u8fd9\u4e48\u4e00\u53e5\u8bdd\u201c\u5148\u6c42\u51fa\u4eceY\u5e74\u5f00\u59cb\u5f80\u53f3\u67e5\u627e\u6700\u65e9\u80fd\u8fbe\u5230\u964d\u96e8\u91cf\u5df2\u77e5\u7684\u5e74\u4efd\u7f16\u53f7u\u201d\n\n\u6ce8\u610f\u5230\u8f93\u5165\u7684\u5e74\u4efd\u662f\u6709\u5e8f\u7684 \u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e\n\n\u624b\u6253\u4e8c\u5206\u67e5\u627e\uff1f\u592a\u9ebb\u70e6\u60f9qwq\n\nstl\u662f\u4e2a\u597d\u4e1c\u897f\n\nlower_bound(\u5934\u6307\u9488,\u5c3e\u6307\u9488,\u53c2\u6570) \u6ce8\u610f\u67e5\u8be2\u7684\u5e94\u8be5\u662f\u6709\u5e8f\u7684\u533a\u95f4\n\n\u610f\u4e49\u5c31\u662f\u5728\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u90e8\u5206\u8fdb\u884c\u4e8c\u5206\u67e5\u627e \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\n\n\u8bbe\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4e3ait\u5427 \u90a3\u4e48\u67e5\u627e\u5230\u7684\u503c\u5c31\u662f*it\n\n\u4f46\u662f\u6211\u4eec\u8981\u67e5\u7684\u4e0d\u662f\u5e74\u4efd \u800c\u662f\u5e74\u4efd\u7684\u7f16\u53f7\u554a\n\n\u5728\u6709\u5e8fint\u6570\u7ec4(\u5143\u7d20\u5b58\u653e\u5728\u4e0b\u68071~n)\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8ex\u7684\u6700\u5c0f\u6574\u6570\u7684\u4e0b\u6807\uff1a\n\n\tv=lower_bound(yea+1,yea+n+1,x)-yea;\n\nv\u662f\u4e0b\u6807 yea\u662f\u6570\u7ec4\u7684\u540d\u5b57 x\u662f\u8981\u67e5\u8be2\u7684\u5e74\u4efd\n\n------------\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206 \u7b2c\u4e00\u4e2a\u90e8\u5206\u521a\u624d\u5df2\u7ecf\u8bf4\u4e86 \u7b2c\u4e8c\u662f\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c \u7136\u540e\u5c31\u662f\u7ec6\u8282\u95ee\u9898\n\n\u67e5\u8be2\u533a\u95f4\u6700\u5927\u503c \u6253\u7ebf\u6bb5\u6811 \u4ee3\u7801\u957f\u5ea6\u5c31\u592a\u957f\u4e86\n\n\u8fd9\u9053\u9898\u662f\u4e0d\u5e26\u4fee\u6539\u7684 \u6240\u4ee5\u53ef\u4ee5\u7528st\u8868 \u5c31\u5f88\u7b80\u5355 \u5173\u4e8est\u8868\u7684\u5efa\u7acb \u53ef\u4ee5\u53bb\u505a\u505a\u6a21\u677f\u9898\n\n\uff08\u4f46\u662f\u8fd9\u9053\u9898\u4e3b\u8981\u7684\u4ee3\u7801\u957f\u5ea6\u90fd\u662f\u5728\u7ec6\u8282\u5904\u7406\u554aqwq\n\n\u5177\u4f53\u7684\u89e3\u9898\u601d\u8def\u5c31\u4e0d\u8bf4\u5566 dalao\u4eec\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\n\n\u5c31\u5f53\u7ed9dalao\u7684\u601d\u8def\u8865\u4efd\u4ee3\u7801\u5427\n\n    #include<bits/stdc++.h>\n    using namespace std;\n    int n,q,val[50010],yea[50010];\n    int ma[50010][18];//st\u8868\u7684max\u6570\u7ec4 \n    void prework()//st\u8868 \n    {\n        for(int i=1;i<=n;i++) ma[i][0]=val[i];\n        int k=log2(n);\n        for(int i=1;i<=k;i++)\n            for(int j=1;j+(1<<i)-1<=n;j++) \n                ma[j][i]=max(ma[j][i-1],ma[j+(1<<(i-1))][i-1]);\n    }\n    int getmax(int l,int r)//\u7b80\u5355\u7684\u67e5\u8be2\u554a \n    {\n        int k=log2(r-l+1);\n        return max(ma[l][k],ma[r-(1<<k)+1][k]);\n    }\n    void workq()\n    {\n        scanf(\"%d\",&q); \n        for(int i=1;i<=q;i++)\n        {\n            int x,y,u,v;\n            scanf(\"%d%d\",&y,&x);\n            if(y>=x) { printf(\"false\\n\"); continue; }\n            u=lower_bound(yea+1,yea+n+1,y)-yea;//yea\u6570\u7ec4\u662f\u6709\u5e8f\u7684 \u7528\u4e8c\u5206\u67e5\u627e\u5927\u4e8e\u7b49\u4e8ex\u7684\u6700\u5c0f\u6574\u6570\u7684\u4e0b\u6807 \n            v=lower_bound(yea+1,yea+n+1,x)-yea;\n            if(y==yea[u]&&x==yea[v])//\u90fd\u5df2\u77e5 \n            {\n                if(val[u]<val[v]) printf(\"false\\n\");\n                else if(v==u+1)\n                {\n                    if(x==y+1) printf(\"true\\n\");\n                    else printf(\"maybe\\n\");//Y\u548cX\u4e4b\u95f4\u5b58\u5728\u964d\u96e8\u91cf\u672a\u77e5\u7684\u5e74\u4efd\n                }\n                else\n                {\n                    int w=getmax(u+1,v-1);//\u5bfb\u627eY\u548cX\u4e4b\u95f4\u7684\u6700\u5927\u964d\u96e8\u91cf\n                    if(w>=val[v])  printf(\"false\\n\"); //\u4e0d\u6ee1\u8db3\u201c\u5bf9\u4e8e\u4efb\u610fY\uff1cZ\uff1cX\uff0cZ\u5e74\u7684\u964d\u96e8\u91cf\u4e25\u683c\u5c0f\u4e8eX\u5e74\u201d\u8fd9\u4e2a\u6761\u4ef6\n                    else\n                    {\n                        if(x-y==v-u) printf(\"true\\n\");//Y\u5e74\u548cX\u5e74\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u964d\u96e8\u91cf\u672a\u77e5\u7684\u5e74\u4efd\n                        else printf(\"maybe\\n\");\n                    }\n                }\n            }\n            else if(y!=yea[u]&&x==yea[v])//Y\u5e74\u7684\u964d\u96e8\u91cf\u672a\u77e5\uff0cX\u5e74\u7684\u964d\u96e8\u91cf\u5df2\u77e5\n            {\n                if(u==v) printf(\"maybe\\n\");//Y\u5e74\u548cX\u5e74\u4e4b\u95f4\u5e74\u4efd\u7684\u964d\u96e8\u91cf\u5168\u90e8\u672a\u77e5\n                else\n                {\n                    int w=getmax(u,v-1);\n                    if(w>=val[v]) printf(\"false\\n\");\n                    else printf(\"maybe\\n\");\n                }\n            }\n            else if(y==yea[u]&&x!=yea[v])//Y\u5e74\u7684\u964d\u96e8\u91cf\u5df2\u77e5\uff0cX\u5e74\u7684\u964d\u96e8\u91cf\u672a\u77e5\n            {\n                if(v==u+1) printf(\"maybe\\n\");\n                else\n                {\n                    int w=getmax(u+1,v-1);\n                    if(val[u]<=w) printf(\"false\\n\");\n                    else printf(\"maybe\\n\");\n                }\n            }\n            else if(y!=yea[u]&&x!=yea[v]) printf(\"maybe\\n\");\n        }\n    } \n    int main()\n    {\n        scanf(\"%d\",&n);\n        for(int i=1;i<=n;i++) scanf(\"%d%d\",&yea[i],&val[i]); \n        yea[n+1]=0x7f7f7f7f;//\u65b9\u4fbf\u4e8c\u5206\u67e5\u627e \n        prework(); //\u9884\u5904\u7406 \n        workq(); //\u5904\u7406\u8be2\u95ee \n        return 0;\n    }\n",
        "postTime": 1538184180,
        "uid": 85691,
        "name": "LengChu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "# \u6b64\u9898AC\u6ce8\u610f\u4e8b\u9879\uff01\uff01\uff01\n## 1\u3001\u7279\u522b\u6ce8\u610f\u6620\u5c04\u6570\u7ec4\u4e0e\u539f\u6570\u636e\u7684\u533a\u522b \u3002\n### 2\u3001\u6ce8\u610f\u60c5\u51b5\u7684\u5b8c\u6574\u8ba8\u8bba\uff0c\u53ef\u4ee5\u753b\u97e6\u6069\u56fe\u6765\u786e\u4fdd\u6240\u6709\u60c5\u51b5\u90fd\u5728\u8003\u8651\u8303\u56f4\u5185\u3002\n### 3\u3001\u6ce8\u610f\u7279\u6b8a\u60c5\u51b5\uff1a\u5f53\u53f3\u533a\u95f4\u672a\u77e5\u4f46\u662f\u5de6\u533a\u95f4\u5df2\u77e5\u4ecd\u53ef\u5bfc\u51fafalse\uff01\n## 4\u3001\u6ce8\u610f\u8fb9\u754c\uff0c\u4fdd\u9669\u8d77\u89c1\u5e94\u4f5c\u7279\u6b8a\u5904\u7406\u3002 \n```c++\n#include<bits/stdc++.h>\n#define MAXN 50005\nusing namespace std;\nint tree[MAXN<<2];\nint ref[MAXN+3],top;\nint w[MAXN+3];\nint n,m;\nint max(int a,int b)\n{\n    return a>b?a:b;\n}\nint query(int ask_L,int ask_R,int now_L,int now_R,int dot)\n{\n    if (ask_L==now_L&&ask_R==now_R) return tree[dot];\n    int M=(now_L+now_R)>>1;\n    if (ask_R<=M) return query(ask_L,ask_R,now_L,M,dot<<1);\n    if (ask_L>M) return query(ask_L,ask_R,M+1,now_R,dot<<1|1);\n    if (ask_L<=M&&ask_R>M) return (max(query(ask_L,M,now_L,M,dot<<1),query(M+1,ask_R,M+1,now_R,dot<<1|1)));\n}\nvoid build (int l,int r,int dot)\n{\n    if (l==r)\n    {\n        tree[dot]=w[l];\n        return;\n    }\n    int m=(l+r)>>1;\n    build (l,m,dot<<1);\n    build (m+1,r,dot<<1|1);\n    tree[dot]=max(tree[dot<<1],tree[dot<<1|1]);\n}\nint ef(int l,int r,int aim)\n{\n    if (l==r) return l;\n    int m=(l+r)>>1;\n    if (aim<=ref[m]) return ef(l,m,aim);\n    else return ef(m+1,r,aim);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++) w[i]--;\n    for (int i=1;i<=n;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        top++;\n        ref[top]=a;\n        w[top]=b;\n    }\n    build (1,n,1);\n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        if (b<=ref[1]&&a<b) \n        {\n            printf(\"maybe\\n\");\n            continue;\n        }\n        if (a>=ref[n]&&b>a)\n        {\n            printf(\"maybe\\n\");\n            continue;\n         }\n        int l=ef(1,n,a);\n        int r=ef(1,n,b);\n        if (ref[r]!=b)//\u5148\u5c06\u53f3\u533a\u95f4\u672a\u77e5\u7684\u60c5\u51b5\u5168\u90e8\u5904\u7406\u5b8c \n        {\n            if (l==r) \n            {\n                printf(\"maybe\\n\");\n                continue;\n            }\n            if (b<=ref[r]) r--;\n            if (ref[l]==a)\n            {\n                if (l==r)\n                {\n                    printf(\"maybe\\n\");\n                    continue;\n                }\n                int t=query(l+1,r,1,n,1);\n                if (w[l]<=t) \n                {\n                    printf(\"false\\n\");\n                    continue;\n                }\n                else \n                {\n                    printf(\"maybe\\n\");\n                    continue;\n                }\n            }\n            if (ref[l]!=a)\n            {\n                printf(\"maybe\\n\");\n                continue;\n            }\n        }\n        if (ref[l]==a)\n        {\n            if (w[r]>w[l])\n            {\n                printf(\"false\\n\");\n                continue;\n            }\n            if (b==a+1)\n            {\n                printf(\"true\\n\");\n                continue;\n            }\n            l++;\n            a++;\n            if (l==r)\n            {\n                printf(\"maybe\\n\");\n                continue;\n            }\n            int t=query(l,r-1,1,n,1);\n            if (t<w[r])\n            {\n                if (ref[r]-ref[l-1]==r-l+1) printf(\"true\\n\");\n                else printf(\"maybe\\n\");\n            }\n            else (printf(\"false\\n\"));\n            continue;\n        }\n        if (ref[l]!=a)\n        {\n            if (l==r)\n            {\n                printf(\"maybe\\n\");\n                continue;\n            }\n            int t=query(l,r-1,1,n,1);\n            if (t<w[r]) printf(\"maybe\\n\");\n            else (printf(\"false\\n\"));\n        }\n    }\n    return 0;\n}\n```\n\u5176\u4ed6\u7684\u6ca1\u5565\u4e86\uff0c\u672c\u4eba\u4e00\u849f\u84bb\uff0c\u8bf7\u5927\u4f6c\u52ff\u55b7\u3002\u3002\u3002",
        "postTime": 1532582081,
        "uid": 25006,
        "name": "zhangjiacheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": " \u4e00\u9053\u7d2b\u9898\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\uff0c\u4e0d\u5bb9\u6613\u554a~~\n \u849f\u84bb\u5e76\u4e0d\u4f1a\u4ec0\u4e48\u9ad8\u6df1\u7b97\u6cd5\uff0c\u6240\u4ee5\u8fd9\u9898\u6211\u6253\u5f97\u7279\u5947\u602a\n \uff08\u6a21\u62df\u8fc7\u7701\u9009\uff09~~qaq\n - \u81f3\u5c11\u7a7a\u95f4\u5f88\u5c0f\uff0c\u65f6\u95f4\u4e5f\u5f88\u5feb~~\n\n------------\n**###### **\u603b\u4e4b\u5c31\u662f\u4e71\u641e\u4e00\u901a\u5566\uff01\uff01\uff01\n\n\n------------\n- (\u8fd9\u91cc\u8bbef[i]\u4e3a\u5e74\u4efd\u7684\u964d\u96e8\u91cf)\n- -\u5148\u770b\u770b\u9898\u76ee\uff0c\n\u5f88\u660e\u663e\u7684,\u5bf9\u4e8e\u6bcf\u4e00\u4e2ay\uff08\u8fd9\u91cc\u6211\u628ax\u548cy\u5bf9\u8c03\u4e86\uff0c\u4e5f\u5c31\u662fy>=x\uff09\u90fd\u6700\u591a\u53ea\u53ef\u80fd\u67091\u4e2ax\u4f7f\u7b54\u6848\u4e3atrue\uff0c\u5c31\u662f\u8fd9\u4e2a\u5e74\u4efd\u4e4b\u524d\u7684\u7b2c\u4e00\u4e2af[x]>=f[y].(\u5982\u679c\u662f\u6240\u6709f[x]>=f[y],\u90a3\u4e48\u7b2c\u4e00\u4e2af[x]>f[y]\u4f1a\u4f7f\u5f97\u4e0d\u7b26\u5408\u9898\u610f)\uff0c\u6240\u4ee5\u6211\u4eec\u8bb0t[y]=x\u3002\n- \u90a3\u4e48\u5e74\u4efd\u600e\u4e48\u529e\uff1f\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2amap<int,int>a\u548c\u6570\u7ec4p\u6765\u50a8\u5b58\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e0b\u6807\u4e0e\u5e74\u4efd\u4e92\u76f8\u8f6c\u5316\u4e86\u3002\n```cpp\nfor(i=1;i<=n;i++)\n{\n    cin>>k>>f[i];\n    a[k]=i;p[i]=k;\n}\n```\n\u8fd9\u6837\u4ee5\u540e\u5c31\u53ef\u4ee5\u7528\u5566\uff08\u8fd9\u4e2a\u5e94\u8be5\u591f\u7b80\u5355\u5427\uff09\n- \u63a5\u4e0b\u6765\u6700\u6076\u5fc3\u7684\u5c31\u662f\u5224\u65admaybe,false,true\u3002\uff08\u8981\u4e0d\u662f\u6709\u65e0\u7a77\u65e0\u5c3d\u7684bug\uff0c\u6211\u4e5f\u4e0d\u4f1a\u8c03\u8bd5\u8fa3\u4e48\u4e45~~\uff09\u3010\u8fd9\u4e2a\u76f4\u63a5\u770b\u4ee3\u7801\u6ce8\u91ca\u3011\n- \u8fd9\u8fb9\u53d1\u4e00\u6ce2\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,i,f[50001],j,w,k,x,y,tt,min1,max1,t[50001],v,p[50001],l,r;//min1,max1\u6307\u6700\u5c0f\u5e74\u4efd\u548c\u6700\u5927\u5e74\u4efd \nmap <int,int> a;\nstruct qu\n{\n\tint id,mu;\n}q[50001];\nbool go(int pp)\n{\n\tif(p[pp]==x) return true;\n\tif(t[pp]<=0) return false;\n\tif(f[pp]==f[t[pp]])//\u6ca1\u6709\u8fd9\u53e5\u5c31\u4f1a\u88abbug10\u5206 \n\t{\n\t\tif(t[t[pp]]<=0) return false;\n\t\tif(!go(t[t[pp]])) return false;\n\t\telse return true;\n\t}\n\telse if(!go(t[pp])) return false;\n\telse return true;\n}\nint pd()//\u672c\u51fd\u6570\u662f\u88ab\u4e00\u6b65\u4e00\u6b65\u5751\u51fa\u6765\u7684~~ \n{\n\tif(x==y){printf(\"true\\n\");return 0;}\n\t//if(x>y){printf(\"false\\n\");return 0;}\n\tif(!a.count(x)&&!a.count(y)){printf(\"maybe\\n\");return 0;}//\u5982\u679cx,y\u90fd\u662f\u672a\u77e5\u964d\u96e8\u91cf\uff0c\u90a3\u4e48\u4e00\u5b9a\u662fmaybe\uff08y=\u65e0\u7a77\u5927\uff0cx=\u65e0\u7a77\u5927+1\uff09 \n\tif(!a.count(y))//x\u4e3a\u5df2\u77e5\u964d\u96e8\u91cf\uff0cy\u672a\u77e5 \n\t{\n\t\t//\u8fd9\u91cc\u4e0d\u597d\u89e3\u91ca\uff0c\u4ee3\u7801\u5199\u5b8c\u518d\u505a\u6ce8\u91ca \n\t\tif(y>max1)l=n;\n\t\telse\n\t\t{\n\t\t\tl=1,r=n;\n\t        while(l+1<r)//\u52a0\u4e86\u4e2a\u4e8c\u5206\u6c42\u8ddd\u79bb\u672a\u77e5y\u6700\u524d\u7684\u5e74\u4efd \n\t        {\n\t\t        int mid=(l+r)/2;\n\t\t        if(p[mid]<=y) l=mid;\n\t\t        else r=mid; \n        \t}\n\t\t}\n\t\tif(go(l)==true) {printf(\"maybe\\n\");return 0;}\n\t\telse {printf(\"false\\n\");return 0;}\n\t}\n\tif(!a.count(x))\n\t{\n\t\tif(t[a[y]]<=0||p[t[a[y]]]<=x) {printf(\"maybe\\n\");return 0;}\n\t\t//\u5982\u679c\u5e74\u4efdy\u524d\u5e74\u4efdx\u540e\u6ca1\u6709f[x]>f[y]\uff0c\u90a3\u4e48 \u5f53\u7136\u662fmaybe \n\t\telse{printf(\"false\\n\");return 0;}//\u6709\u7684\u8bdd\u5c31\u4e0d\u53ef\u80fd\u4e86 \n\t}\n\tif(y-x!=a[y]-a[x])//\u6b64\u8bed\u53e5\u4ee3\u8868\u5e74\u4efdx\u5230y\u4e4b\u95f4\u7684\u5e74\u4efd\u975e\u5168\u90e8\u5df2\u77e5 \n\t{\n\t\tif(t[a[y]]!=a[x]) {printf(\"false\\n\");return 0;}\n\t\t//x\u5230y\u4e2d\u4e00\u5b9a\u6709f[z]>f[y] \n\t\t{printf(\"maybe\\n\");return 0;}\n\t}\n\tif(t[a[y]]!=a[x]){printf(\"false\\n\");return 0;}\n\tprintf(\"true\\n\");return 0;//\u5199\u5230\u8fd9\u91cc\u6211\u5c31\u6709\u70b9\u89e3\u653e\u4e86\uff08\u597d\u50cf\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff09 \n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&k,&f[i]);\n\t\ta[k]=i;p[i]=k;\n\t\tif(i==1) min1=k;\n\t\tif(i==n) max1=k; \n\t}\n\tq[1].id=1;q[1].mu=f[1];w=1;\n\tfor(i=2;i<=n;i++)\n\t{\n\t\twhile(w&&q[w].mu<f[i]) w--;\n\t\tif(!w) t[i]=0;\n\t\telse t[i]=q[w].id;\n\t\tw++;\n\t\tq[w].id=i;q[w].mu=f[i];\n\t}//\u5355\u8c03\u961f\u5217\u7b80\u7b80\u7b80\u5316\u7248\u6c42t \n\tscanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tpd();  \n\t}\n}\n```\n- \u89e3\u91ca\u4e00\u4e0bx\u5df2\u77e5y\u672a\u77e5\u7684\u60c5\u51b5\uff1a\n- \u8fd9\u65f6\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u5e74\u4efdf[j]\u4ee3\u8868<y\u7684\u6700\u5927\u5e74\u4efd\uff1b\n\u5982\u679cx~j\u4e4b\u95f4\u4efb\u610f\u5df2\u77e5\u964d\u96e8\u91cfi\u6ee1\u8db3f[i]<f[j]<f[x],\n\u90a3\u4e48\u7b54\u6848\u5c31\u662fmaybe\uff08\u8fd9\u91cc\u53ef\u4ee5\u60f3\u4e00\u60f3~~\uff09\n- \u8fd9\u79cd\u6a21\u62df\u6cd5\u6700\u9002\u5408\u6211\u8fd9\u79cd\u849f\u84bb\u4e86~\u795d\u5927\u5bb6AC",
        "postTime": 1519969727,
        "uid": 49719,
        "name": "__JR_\u98d8\u6447__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e00\u53e5\u8bdd\n\u96be\u53d7 \u96be\u53d7 \u771f\u96be\u53d7\n------------\n~~\u9694\u58c1\u8001\u738b~~wpx\u5927\u4f6c\u4f7f\u7528\u4e86ST\u8868\uff0c\u4f46\u672c\u849f\u84bb\u8868\u793aRMQ\u53ea\u7528\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u3002\u3002\u6bd4TA\u8fd0\u884c\u5feb\u4e86\u51e0\u767e\u6beb\u79d2\uff0cac\u6162\u4e86\u4e00\u5c0f\u65f6\u3002                   \n\u3002                                  \n\u3002                         \n\u3002\nTalk is cheap, show me the code.\n------------\n\n    #include<iostream>\n    #include<cstdio>\n    using namespace std;\n    const int maxn=5001;\n    int n,m,a[maxn],b[maxn],tree[maxn<<2];\n    inline int read(){\n        int x=0,f=0;char ch=0;\n        while(!isdigit(ch)){f|=ch=='-';ch=getchar();}\n        while(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n        return f?-x:x;\n    }\n    inline int binary(int k){\n        int l=1,r=n;\n        while(l<r){\n            int mid=(l+r)>>1;\n            if(a[mid]<k) l=mid+1;\n            else r=mid;\n        }\n        return l;\n    }\n    inline void build(int x,int l,int r){\n        if(l==r){\n            tree[x]=b[l];\n            return;\n        }\n        int mid=(l+r)>>1,l1=x<<1,r1=l1|1;\n        build(l1,l,mid);\n        build(r1,mid+1,r);\n        tree[x]=max(tree[l1],tree[r1]);\n    }\n    inline int search(int l,int r,int l2,int r2,int x){\n        if(l2>r2) return -1e9;\n        if(l==l2&&r==r2) return tree[x];\n        int mid=(l+r)>>1,l1=x<<1,r1=l1|1,ans=-1e9;\n        if(l2<=mid) ans=max(ans,search(l,mid,l2,min(r2,mid),l1));\n        if(r2>mid) ans=max(ans,search(mid+1,r,max(l2,mid+1),r2,r1));\n        return ans;\n    }\n    int main(){\n        n=read();\n        a[0]=-1e9-1;\n        a[n+1]=1e9+1;\n        for(int i=1;i<=n;i++) a[i]=read(),b[i]=read();\n        build(1,1,n);\n        int x,y,z,l,r;\n        m=read();\n        for(int i=1;i<=m;i++){\n            y=read(),x=read();\n            l=binary(y);\n             while(a[l]<=y) l++;\n            r=binary(x);\n             while(a[r]>=x) r--;\n            z=search(1,n,l,r,1);\n            if((a[r+1]==x&&z>=b[r+1])||(a[l-1]==y&&z>=b[l-1])||(a[l-1]==y&&a[r+1]==x&&b[l-1]<b[r+1])) puts(\"false\");\n            else if(r-l+1==x-y-1&&a[l-1]==y&&a[r+1]==x) puts(\"true\");\n            else puts(\"maybe\");\n        }\n        return 0;\n    }",
        "postTime": 1538998157,
        "uid": 90615,
        "name": "opened",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u4e00\u5708\u6ca1\u770b\u89c1\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u7ed9\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4fe1\u4ef0\u73a9\u5bb6\u8d21\u732e\u4e00\u7bc7\u9898\u89e3\n\n\u4f17\u6240\u5468\u77e5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7ef4\u62a4\u66f4\u5e7f\u9614\u7684\u503c\u57df\uff0c\u4f46\u662f\u5e74\u4efd\u6709\u53ef\u80fd\u6709\u8d1f\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u7ed9\u6bcf\u4e00\u4e2a\u5e74\u4efd\u52a0\u4e00\u4e2a\u5927\u5c0f\u4e3a1e9+9\u7684\u5e38\u91cfshift\uff0c\u628a\u8d1f\u6570\u5e73\u79fb\u6210\u6b63\u6570\uff0c\u7136\u540e\u628a\u503c\u57df\u5f00\u4e24\u500d\uff1b\n\n\u7136\u540e\u5c31\u662f\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u8fde\u7eed\u6027\uff0c\u5404\u79cd\u7279\u5224\u5373\u53ef\uff0c\u5176\u4ed6\u9898\u89e3\u4e2d\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6211\u7684\u5199\u6cd5\u4e2d\uff0c\u8be2\u95ee\u7684x\u548cy\u662f\u53cd\u7684\uff0c\u800c\u4e14\u533a\u95f4\u67e5\u8be2\u6d89\u53ca\u5230\\[x+1,y-1\\]\u8fd9\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u8fd8\u8981\u591a\u7279\u5224\u4e00\u4e0bx\u7d27\u6328\u7740y\u7684\u60c5\u51b5\uff0c\u9632\u6b62\u533a\u95f4\u67e5\u8be2\u51fa\u9505\u3002\n\n```cpp\n#define INL inline\n#define REG register\n#define M (int)(((long long)l+r)>>1)\n#define LS tre[pos].lson\n#define RS tre[pos].rson//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u9700\u8981\u7684\u5b8f\u5b9a\u4e49\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nINL int read(){\n    REG int sum=0,sign=1;\n    REG char tmp=getchar();\n    while(tmp<'0'||tmp>'9'){\n        if(tmp=='-'){\n            sign=-1;\n        }\n        tmp=getchar();\n    }\n    while(tmp>='0'&&tmp<='9'){\n        sum=(sum<<1)+(sum<<3)+(tmp-'0');\n        tmp=getchar();\n    }\n    return sum*sign;\n}//\u5feb\u8bfb\nconst int maxn=114514,shift=1e9+9/*\u5c31\u662f\u8fd9\u4e2a\u5e38\u91cf\u628a\u8d1f\u6570\u5e74\u4efd\u53d8\u6210\u4e86\u6b63\u6570*/;\nint n,m;\nstruct node{\n    int lson,rson,maxv,minv;//\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff0c\u533a\u95f4\u6700\u5927\u3001\u6700\u5c0f\n    bool sure;//\u533a\u95f4\u8fde\u7eed\u6027\uff0c\u8fde\u7eed\u4e3a1\uff0c\u4e0d\u8fde\u7eed\u4e3a0\n}tre[maxn<<6];\nint cntr=2;\nINL void insert(REG int tar,REG int x){\n    REG int l=1,r=shift<<1,pos=1;\n    while(l!=r){//\u666e\u901a\u7ebf\u6bb5\u6811\u5355\u70b9\u64cd\u4f5c\u7684\u975e\u9012\u5f52\u5199\u6cd5\n        //cout<<l<<' '<<r<<endl;\n        tre[pos].maxv=max<int>(tre[pos].maxv,x);\n        tre[pos].minv=min<int>(tre[pos].minv,x);\n        tre[pos].sure=1;\n        if(tar<=M){\n            if(!LS){\n                LS=cntr++;//\u52a8\u6001\u5f00\u70b9\n            }\n            r=M;\n            tre[pos].sure&=tre[RS].sure;//\u6211\u5199\u9898\u89e3\u7684\u65f6\u5019\u624d\u53d1\u73b0\u6211\u4e0d\u786e\u5b9a\u8fd9\u6837\u7ef4\u62a4\u533a\u95f4\u8fde\u7eed\u6027\u662f\u4e0d\u662f\u5bf9\u7684\uff0c\u53cd\u6b63\u662f\u8fc7\u4e86\uff0c\u5927\u5bb6\u8001\u8001\u5b9e\u5b9e\u7684\u9012\u5f52\u5199\u4e0a\u63a8\u5c31\u597d\n            pos=LS;\n        }\n        else{\n            if(!RS){\n                RS=cntr++;//\u8fd8\u662f\u52a8\u6001\u5f00\u70b9\n            }\n            l=M+1;\n            tre[pos].sure&=tre[LS].sure;\n            pos=RS;\n        }\n    }\n    tre[pos].maxv=tre[pos].minv=x;\n    tre[pos].sure=1;\n}\nINL int query(REG int tar){//\u5355\u70b9\u67e5\u8be2\u503c\n    REG int l=1,r=shift<<1,pos=1;\n    while(l!=r){\n        if(tar<=M){\n            r=M;\n            pos=LS;\n        }\n        else{\n            l=M+1;\n            pos=RS;\n        }\n    }\n    return tre[pos].maxv;\n}\nINL bool check(REG int al,REG int ar,REG int x,REG int l,REG int r,REG int pos){//\u8be2\u95ee\u533a\u95f4\u6700\u5927\u503c\u662f\u5426\u5c0f\u4e8e\u67d0\u6570\n    if(!pos){\n        return 1;//\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u9ed8\u8ba4\u4e3a\u53ef\u884c\n    }\n    if(al<=l&&ar>=r){\n        return tre[pos].maxv<x;\n    }\n    REG bool able=1;\n    if(al<=M){\n        able&=check(al,ar,x,l,M,LS);\n    }\n    if(ar>M){\n        able&=check(al,ar,x,M+1,r,RS);\n    }\n    return able;\n}\nINL bool rcheck(REG int al,REG int ar,REG int x,REG int l,REG int r,REG int pos){//\u8be2\u95ee\u533a\u95f4\u6700\u5c0f\u503c\u662f\u5426\u5927\u4e8e\u67d0\u6570\n    if(!pos){\n        return 1;//\u540c\u4e0a\u4e2a\u51fd\u6570\n    }\n    if(al<=l&&ar>=r){\n        return tre[pos].minv>x;\n    }\n    REG bool able=1;\n    if(al<=M){\n        able&=check(al,ar,x,l,M,LS);\n    }\n    if(ar>M){\n        able&=check(al,ar,x,M+1,r,RS);\n    }\n    return able;\n}\n\nINL bool getsure(REG int al,REG int ar,REG int l,REG int r,REG int pos){//\u67e5\u8be2\u533a\u95f4\u8fde\u7eed\u6027\n    if(al<=l&&ar>=r){\n        return tre[pos].sure;\n    }\n    REG bool ans=1;\n    if(al<=M){\n        ans&=getsure(al,ar,l,M,LS);\n    }\n    if(ar>M){\n        ans&=getsure(al,ar,M+1,r,RS);\n    }\n    return ans;\n}\nint main(){\n    freopen(\"SCOI2007D1T2.in\",\"r\",stdin);\n    n=read();\n    for(REG int i=0;i<n;i++){\n        REG int key=read()+shift/*\u628a\u53ef\u80fd\u4e3a\u8d1f\u7684\u5e74\u4efd\u79fb\u5230\u5fc5\u5b9a\u6b63\u6570*/,val=read();\n        insert(key,val);\n    }\n    m=read();\n    for(REG int i=0;i<m;i++){\n        REG int x=read()+shift,y=read()+shift;\n        REG int linex=query(x),liney=query(y);\n        if(x>=y){\n            printf(\"false\\n\");\n            continue;\n        }\n        else if(x==y-1){//\u5173\u4e8ex\u7d27\u6328y\u7684\u7279\u5224\n            if(linex&&liney){\n                if(linex>=liney){\n                    printf(\"true\\n\");\n                }\n                else{\n                    printf(\"false\\n\");\n                }\n            }\n            else{\n                printf(\"maybe\\n\");\n            }\n            continue;\n        }\n        if(linex&&liney){//\u5f80\u4e0b\u5c31\u662f\u5404\u79cd\u7279\u5224\u4e86\uff0c\u5199\u7684\u8d3c\u4e71\n            if(linex>=liney&&check(x+1,y-1,liney,1,shift<<1,1)){\n                if(getsure(x+1,y-1,1,shift<<1,1)){\n                    printf(\"true\\n\");\n                }\n                else{\n                    printf(\"maybe\\n\");\n                }\n            }\n            else{\n                printf(\"false\\n\");\n            }\n        }\n        else if(linex){\n            if(rcheck(x+1,y-1,linex,1,shift<<1,1)){\n                printf(\"maybe\\n\");\n            }\n            else{\n                printf(\"false\\n\");\n            }\n        }\n        else if(liney){\n            if(check(x+1,y-1,liney,1,shift<<1,1)){\n                printf(\"maybe\\n\");\n            }\n            else{\n                printf(\"false\\n\");\n            }\n        }\n        else{\n            printf(\"maybe\\n\");\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1587397373,
        "uid": 137280,
        "name": "FC_Viiiiictor_K",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "# \u8ba9\u6211\u4eec\u60f3\u8c61\u9b54\u6539\u4e00\u4e0b\u8fd9\u9053\u9898\n\n\u6709$n$\u4e2a\u64cd\u4f5c\uff0c\u5176\u4e2d$I$ $x$ $y$\u8868\u793a$x$\u5e74\u7684\u964d\u96e8\u91cf\u4e3a$y$\uff0c$A$ $x$ $y$\u8868\u793a\u8be2\u95ee\u201c$y$\u5e74\u662f$x$\u5e74\u4ee5\u6765\u964d\u96e8\u91cf\u6700\u591a\u7684\u201d\u8fd9\u53e5\u8bdd\u7684\u6b63\u786e\u6027\uff08\u4e0d\u4fdd\u8bc1\u6240\u6709$A$\u64cd\u4f5c\u5747\u5728$I$\u64cd\u4f5c\u4e4b\u540e\uff09\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u53ea\u662f\u9b54\u6539\u4e86\u4e00\u70b9\u70b9\uff0c\u4f46$ST$\u8868\u548c\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u5df2\u7ecf\u65e0\u6cd5\u5b8c\u6210\u8fd9\u9053\u9898\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4f7f\u7528\u53e6\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u5e73\u8861\u6811\u3002\n\n**\u5e73\u8861\u6811\u7684\u4f18\u70b9\uff1a\u5e94\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u80fd\u7ef4\u62a4\u7684\u95ee\u9898\u66f4\u52a0\u590d\u6742\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff0c\u5e38\u6570~~\u4e00\u822c~~\u66f4\u5c0f**\n\n\u8fd9\u91cc\u4ee5$fhqTreap$\u4e3a\u4f8b\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e09\u4e2a\u503c\uff1a$year,rain,Max$\u5206\u522b\u8868\u793a\u5e74\u4efd\u3001\u964d\u96e8\u91cf\u548c\u4ee5\u5176\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6700\u5927\u964d\u96e8\u91cf\u3002\u6309\u7167\u5e74\u4efd\u5c06\u6811$split$\u6210\u4e94\u4e2a\u90e8\u5206\uff1a$[...,x),x,(x,y),y,(y,...]$\u3002\u6309\u7167\u9898\u610f\u5206\u4e09\u7c7b\u8fdb\u884c\u8ba8\u8bba\u5373\u53ef\u3002\n\n\uff08\u5206\u7c7b\u8ba8\u8bba\u90e8\u5206\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#define Merge root=merge(merge(merge(ll,l),mid),merge(r,rr))\nusing namespace std;\nstatic const int Size = 5e4+10;\nint n, m, tot, root;\n\nclass FHQ_Treap {\n    private:\n        int year[Size], rain[Size], Max[Size], rnd[Size], siz[Size], son[Size][2];\n        int New(int y, int w) {\n            siz[++tot] = 1;\n            rain[tot] = w;//\u964d\u96e8\u91cf \n            year[tot] = y;//\u5e74\u4efd \n            Max[tot] = w;//\u5b50\u6811\u4e2d\u6700\u5927\u964d\u96e8\u91cf \n            rnd[tot] = rand();\n            return tot;\n        }\n        void update(int x) {\n            siz[x] = siz[son[x][0]] + siz[son[x][1]] + 1;\n            Max[x] = rain[x];//\u540c\u65f6\u7ef4\u62a4\u5b50\u6811\u6700\u5927\u503c \n            if(son[x][0]) Max[x] = max(Max[x], Max[son[x][0]]);\n            if(son[x][1]) Max[x] = max(Max[x], Max[son[x][1]]);\n        }\n        void split(int now, int k, int &x, int &y) {//\u6309\u7167\u5e74\u4efdsplit \n            if(!now) return void(x = y = 0);\n            if(year[now] < k) x = now, split(son[now][1], k, son[now][1], y);\n            else y = now, split(son[now][0], k, x, son[now][0]);\n            update(now);\n        }\n        int merge(int x, int y) {\n            if(!x || !y) return x+y;\n            if(rnd[x] < rnd[y]) { son[x][1] = merge(son[x][1], y); update(x); return x; }\n            else { son[y][0] = merge(x, son[y][0]); update(y); return y; }\n        }\n    public:\n        void Ins(int yr, int w) {\n            int x, y;\n            split(root, yr, x, y);\n            root = merge(merge(x, New(yr, w)), y);\n        }\n        int query(int lft, int rgt) {//\u5927\u578b\u5206\u7c7b\u8ba8\u8bba\u73b0\u573a \n            int ll, l, mid, r, rr;//\u5206\u522b\u8868\u793a\u533a\u95f4[...,x),x,(x,y),y,(y,...] \n            split(root, lft, ll, l);\n            split(l, lft+1, l, mid);\n            split(mid, rgt, mid, r);\n            split(r, rgt+1, r, rr);\n\t\t\tif(l && r) {//x\u5e74\u548cy\u5e74\u7684\u964d\u96e8\u91cf\u5747\u5df2\u77e5 \n\t\t\t\tif(rain[r] > rain[l]) { Merge; return 0; }//y>x,\u4e0d\u7b26\u5408\u9898\u610f \n\t\t\t\tif(Max[mid] >= rain[r]) { Merge; return 0; }//\u4e2d\u95f4\u6700\u5927\u503c>y,\u4e0d\u7b26\u5408\u9898\u610f \n\t\t\t\tif(siz[mid] < rgt-lft-1) { Merge; return -1; }//\u4e2d\u95f4\u6709\u5e74\u4efd\u672a\u77e5,\u65e0\u6cd5\u786e\u5b9a \n\t\t\t\tMerge;\n\t\t\t\treturn 1;//\u53cd\u4e4b\u5219\u6b63\u786e \n\t\t\t}\n\t\t\tif(!l && r) if(Max[mid] >= rain[r]) { Merge; return 0; }//x\u5e74\u964d\u96e8\u91cf\u672a\u77e5,\u4e2d\u95f4\u6700\u5927\u503c>y,\u4e0d\u7b26\u5408\u9898\u610f\n\t\t\tif(l && !r) {//y\u5e74\u964d\u96e8\u91cf\u672a\u77e5 \n\t\t\t\tif(Max[mid] >= rain[l]) { Merge; return 0; }//\u4e2d\u95f4\u6700\u5927\u503c>x,\u4e00\u5b9a\u4e0d\u7b26\u5408\u9898\u610f \n\t\t\t\tMerge;\n\t\t\t\treturn -1;//\u53cd\u4e4b\u4e0d\u80fd\u786e\u5b9a \n\t\t\t}\n\t\t\tMerge;\n\t\t\treturn -1;//\u53cd\u4e4b\u4e0d\u80fd\u786e\u5b9a \n        }\n}Tree;\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 1, y, w; i <= n; i++) {\n\t\tscanf(\"%d%d\", &y, &w);\n\t\tTree.Ins(y, w);\n\t}\n\tscanf(\"%d\", &m);\n\tfor(int i = 1, x, y, ans; i <= m; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tans = Tree.query(x, y);\n\t\tif(ans == 1) printf(\"true\\n\");\n\t\telse if(ans == 0) printf(\"false\\n\");\n\t\telse printf(\"maybe\\n\");\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1555591971,
        "uid": 47996,
        "name": "Zenurik",
        "ccfLevel": 0,
        "title": "[SCOI2007]\u964d\u96e8\u91cf"
    },
    {
        "content": "\u6709\u4e00\u79cd\u6253\u6cd5\u53eb\u505a\u66b4\u529b\u8ba8\u8bba\u7f8e\u5b66\n\n\u9996\u5148\u4f60\u6839\u636e$Z,X,Y$\u662f\u5426\u786e\u5b9a\u8bb0\u5f55$bool$\u503c$fx,fy,fz$\uff0c\u663e\u7136$fx,fy,fz$\u603b\u5171\u5c31$8$\u79cd\u60c5\u51b5\uff0c\u5168\u90e8\u8ba8\u8bba\u4e00\u904d\u5c31\u884c\u4e86233333\n\n\u867d\u7136\u4ee3\u7801\u6bd4\u8f83\u957f\u4f46\u662f\u8fd9\u6837\u662f\u6700\u4e0d\u9700\u8981\u52a8\u8111\u5b50\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#define fo(i, a, b) for(int i = (a); i <= (b); ++i)\n#define N 100005\n#define inf 1000000005\n#define ls t[u].s[0]\n#define rs t[u].s[1]\n#define pb push_back\nint A, B, Q, n, m, cnt;\nstd::map<int, int> mp;\nstruct node{\n    int max, sum, s[2];\n    friend node operator + (node x, node y)\n    {\n        return (node) {std::max(x.max, y.max), x.sum + y.sum};\n    }\n}t[N << 2];\ninline void modify (int &u, int L, int R, int pos, int val)\n{\n    if (!u) u = ++cnt;\n    if (L == R)\n    {\n        t[u].sum = 1; t[u].max = val;\n        return; \n    }\n    int mid = L + R >> 1;\n    if (pos <= mid) modify(ls, L, mid, pos, val);\n    else modify(rs, mid + 1, R, pos, val);\n    t[u].max = std::max(t[ls].max, t[rs].max);\n    t[u].sum = t[ls].sum + t[rs].sum;\n}\ninline node query (int u, int L, int R, int l, int r)\n{\n    node ret = (node) {-inf, 0};\n    if (!u) return ret;\n    if (l <= L && R <= r)\n    {\n        return t[u];\n    }\n    int mid = L + R >> 1;\n    if (l <= mid) {ret = ret + query(ls, L, mid, l, r);}\n    if (mid < r) {ret = ret + query(rs, mid + 1, R, l, r);}\n    return ret;\n}\nint main ()\n{\n    int T;\n    scanf(\"%d\", &n);\n    fo (i, 1, 4 * n) t[i].max = -inf;\n    int rt = 0;\n    fo (i, 1, n) \n    {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        mp[x] = y;\n        modify(rt, -inf, inf, x, y);\n    }\n    scanf(\"%d\", &Q);\n    while (Q--)\n    {\n        int x, y, vx = -inf, vy = -inf;\n        bool fx = 0, fy = 0, fz = 0;\n        scanf(\"%d %d\", &y, &x);\n        if (mp.find(x) != mp.end())\n        {\n            vx = mp[x];\n            fx = 1;\n        }\n        if (mp.find(y) != mp.end())\n        {\n            vy = mp[y];\n            fy = 1;\n        }\n        if (x + 1 == y)\n        {\n            if (fx && fy)\n            {\n                if (vx <= vy)\n                    printf(\"true\\n\");\n                else\n                    printf(\"false\\n\");\n            }\n            else\n            printf(\"maybe\\n\");\n            continue;\n        }\n        --x; ++y;\n        node ans = (node) {-inf, 0};\n        int now = 0;\n        if (y <= x)\n            ans = query(1, -inf, inf, y, x);\n        if (ans.sum == x - y + 1)\n            fz = 1;\n        int vz = ans.max;\n        if (!fz && !fx && !fy)\n        {\n            printf(\"maybe\\n\");\n            continue;\n        }\n        if (fz && !fx && !fy)\n        {\n            printf(\"maybe\\n\");\n            continue;\n        }\n        if (!fz && fx && !fy)\n        {\n            if (vz >= vx)\n                printf(\"false\\n\");\n            else\n                printf(\"maybe\\n\");\n            continue;\n        }\n        if (!fz && !fx && fy)\n        {\n            if (vz >= vy)\n                printf(\"false\\n\");\n            else\n                printf(\"maybe\\n\");\n            continue;\n        }\n        if (fz && fx && !fy)\n        {\n            if (vz >= vx)\n                printf(\"false\\n\");\n            else\n                printf(\"maybe\\n\");\n            continue;\n        }\n        if (fz && !fx && fy)\n        {\n            if (vz >= vy)\n                printf(\"false\\n\");\n            else\n                printf(\"maybe\\n\");\n            continue;\n        }\n        if (!fz && fx && fy)\n        {\n            if (vx > vy)\n            {\n                printf(\"false\\n\");\n                continue;\n            }\n            if (vx <= vz)\n            {\n                printf(\"false\\n\");\n                continue;\n            }\n            printf(\"maybe\\n\");\n            continue;\n        }\n        if (fz && fx && fy)\n        {\n            if (vy >= vx && vx > vz)\n            {\n                printf(\"true\\n\");\n            }\n            else\n            {\n                printf(\"false\\n\");\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1551101433,
        "uid": 13137,
        "name": "HomuraCat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\n\u505a\u8fd9\u79cd\u9898\u6ca1\u6709\u4ec0\u4e48\u53ef\u8bf4\u7684\uff0c\u5c31\u662f\u7ec6\u8282\uff0c\u4ee3\u7801\u5427\n\n```cpp\n#include<set>\n#include<map>\n#include<ctime>\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n\n#define mem(a,b) memset(a,b,sizeof(a))\nusing namespace std;\n#define ll long long \nconst int MAXN=100000+20;\nstruct node\n{\n    int l,r,ly,ry,ex,mx;\n}tr[MAXN*2];\nint n,m;\nvoid upp(int p)\n{\n    tr[p].mx=max(tr[p<<1].mx,tr[p<<1|1].mx);\n    tr[p].ly=tr[p<<1].ly;\n    tr[p].ry=tr[p<<1|1].ry;\n}\nvoid build(int p,int l,int r)\n{\n    if(l==r){scanf(\"%d%d\",&tr[p].ly,&tr[p].mx);tr[p].ry=tr[p].ly;tr[p].ex=1;return;}\n    int mid=((l+r)>>1);\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    tr[p].ex=(tr[p<<1].ex&&tr[p<<1|1].ex);\n    if(tr[p<<1].ry+1!=tr[p<<1|1].ly)tr[p].ex=0;\n    upp(p);\n}\nint gety(int p,int x)\n{\n    if(tr[p].ly==tr[p].ry)\n    {\n        if(tr[p].ly!=x)return 0;\n        return tr[p].mx;\n    }\n    if(x<=tr[p<<1].ry) return gety(p<<1,x);\n    else if(x>=tr[p<<1|1].ly) return gety(p<<1|1,x);\n    return 0;\n}\n\nint getlast(int p,int x)//\u8f93\u5165\u7684\u4e0d\u4e00\u5b9a\u662f\u5b58\u5728\u7684\u5e74\u4efd\uff0c\u4f46\u8fd4\u56de\u5df2\u77e5\u7684\u4e0a\u4e00\u5e74\n{\n    if(tr[p].ly==tr[p].ry)return tr[p].ly;\n    if(x>tr[p<<1|1].ly) return getlast(p<<1|1,x);//\u5927\u4e8e\u53f3\u7684\u6700\u5de6\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u53f3\u533a\u95f4\u627e\u5230\u4e0a\u4e00\u5e74\n    else return getlast(p<<1,x);//\n}\nint getnext(int p,int x)//\u8f93\u5165\u7684\u4e0d\u4e00\u5b9a\u662f\u5b58\u5728\u7684\u5e74\u4efd\uff0c\u4f46\u8fd4\u56de\u5df2\u77e5\u7684\u4e0b\u4e00\u5e74\n{\n    if(tr[p].ly==tr[p].ry)return tr[p].ly;\n    if(x<tr[p<<1].ry)return getnext(p<<1,x);\n    else return getnext(p<<1|1,x);\n}\n//\u8981\u4e49\uff1a\u4e0d\u7834\u574fx\uff0cy\nint qry(int p,int x,int y,int num)\n{\n    bool f=0;\n    if(x<tr[p].ly){x=tr[p].ly;f=1;} //\u5185\u90e8\u786e\u5207\u533a\u95f4\u4e0d\u5728\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u4e0d\u53ef\u80fd\u4e00\u5b9a\n    if(x==tr[p].ly&&tr[p].ry==y)\n    {\n    \tif(tr[p].mx>=num)return 0;//\u6709\u5e74\u4efd\u6bd4\u8981\u6c42\u5e74\u4efd\u964d\u96e8\u91cf\u5927\uff0c\u90a3\u4e48\u5c31\u9519\n    \t//\u4e0d\u53ef\u80fd\u9519\n    \telse if(tr[p].ex&&!f)return 1;//\u5982\u679c\u533a\u95f4\u8fde\u7eed\u786e\u5207,\u5e76\u4e14\u5185\u90e8\u786e\u5207\u533a\u95f4\u5728\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u6ca1\u6bd4num\u5927\u7684\u964d\u6c34\u91cf\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u533a\u95f4\u4e00\u5b9a\u5bf9\n    \telse return 2;//\u7136\u540e\u5c31\u6709\u53ef\u80fd\u5427\n    }\n    if(y<=tr[p<<1].ry) return qry(p<<1,x,y,num);\n    else if(x>=tr[p<<1|1].ly) return qry(p<<1|1,x,y,num);\n    else \n    {\n    \tint t1=qry(p<<1,x,tr[p<<1].ry,num);\n    \tint t2=qry(p<<1|1,tr[p<<1|1].ly,y,num);\n    \tif(!t1||!t2)return 0;//\u6709\u4e00\u4e2a\u4e0d\u5bf9\u90a3\u4e48\u4e0d\u5bf9\n    \t//\u5b50\u533a\u95f4\u90fd\u5408\u7406\uff08\u6392\u9664\u9519\u8bef\uff09\n    \telse if(tr[p<<1].ry+1!=tr[p<<1|1].ly)return 2;//\u533a\u95f4\u4e0d\u8fde\u7eed\u5219\u53ef\u80fd\n    \treturn 1;//\u533a\u95f4\u8fde\u7eed\u5219\u4e00\u5b9a\n    }\n}\n//\u786e\u5207\u5df2\u77e5\u964d\u6c34\u91cf\u7684\u5e74\u4efd\uff0c\u786e\u5207\u5e74\u4efd\nint main()\n{\n    scanf(\"%d\",&n);\n    build(1,1,n);\n    scanf(\"%d\",&m);\n    for(int i=1,x,y;i<=m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(x>y){printf(\"false\\n\");continue;}\n       \tint lnum=gety(1,x),rnum=gety(1,y);\n       \tif(!lnum&&!rnum){printf(\"maybe\\n\");continue;}//\u90fd\u672a\u77e5\uff0c\u90a3\u4e48\u53ef\u80fd\n        else\n        {\n        \tint s=getnext(1,x),t=getlast(1,y);//\u83b7\u5f97\u5de6\u53f3\u5e74\u4efd\u5185\u7684\u6700\u5927\u786e\u5207\u5e74\u4efd\n        \tif(!lnum)//\u5de6\u4e0d\u786e\u5b9a\u53f3\u786e\u5b9a\n        \t{\n        \t\tif(s>t||y==t){printf(\"maybe\\n\");continue;}//\u4e2d\u95f4\u65e0\u786e\u5207\u5e74\u4efd\u6216\u8005\u53f3\u786e\u5b9a\n        \t\t//\u786e\u5207\u5e74\u4efd\u6210\u4e3a\u5408\u7406\u533a\u95f4\n        \t\tint f=qry(1,s,t,rnum);\n        \t\tif(f==0)printf(\"false\\n\");\n        \t\telse printf(\"maybe\\n\");\n        \t}\n        \telse if(!rnum)//\u5de6\u786e\u5b9a\u53f3\u4e0d\u786e\u5b9a\n        \t{\n        \t\tif(s>t||x==s){printf(\"maybe\\n\");continue;}\n        \t\tint f=qry(1,s,t,lnum);\n        \t\tif(f==0)printf(\"false\\n\");\n        \t\telse printf(\"maybe\\n\");\n        \t}\n        \telse//\u90fd\u786e\u5b9a\n        \t{\n        \t\tif(rnum>lnum){printf(\"false\\n\");continue;}//\u5de6\u964d\u6c34\u91cf\u5c31\u5927\u4e8e\u53f3\u964d\u6c34\u91cf\uff0c\u90a3\u4e48\u4e0d\u8bba\u4e2d\u95f4\u964d\u96e8\u91cf\u662f\u591a\u5c11\uff0c\u90fd\u662f\u4e0d\u53ef\u80fd\u7684\n        \t\t//\u53f3\u964d\u6c34\u91cf\u5927\u4e8e\u5de6\u964d\u6c34\u91cf\n        \t\tif(s>t)//\u4e2d\u95f4\u65e0\u786e\u5207\u5e74\u4efd\uff0c\u610f\u5473\u7740\u4e0d\u53ef\u80fd\u9519\n        \t\t{\n        \t\t\tif(x+1==y)printf(\"true\\n\");//\u4e24\u5e74\u4efd\u76f8\u90bb\uff0c\u5219\u4e00\u5b9a\u5bf9\n        \t\t\telse printf(\"maybe\\n\");//\u8fd8\u6709\u672a\u77e5\u5e74\u4efd\uff0c\u5219\u53ef\u80fd\u5bf9\n        \t\t\tcontinue; \n        \t\t}\n        \t\t//\u4e2d\u95f4\u6709\u786e\u5207\u5e74\u4efd\n        \t\tint f=qry(1,s,t,rnum);\n        \t\tif(f==0)printf(\"false\\n\");//\u4e0d\u53ef\u80fd\u5c31\u9519\n        \t\telse if(f==1)//\u5185\u90e8\u533a\u95f4\u786e\u5207\n        \t\t{\n        \t\t\t\n        \t\t\tif(x+1==s&&y-1==t)printf(\"true\\n\");//\u6070\u597d\u63a5\u4f4f\u786e\u5207\u5e74\u4efd\n        \t\t\telse printf(\"maybe\\n\");\t//\u8fd8\u6709\u672a\u77e5\u5e74\u4efd\n        \t\t}\n        \t\telse if(f==2)printf(\"maybe\\n\");\n        \t}\n        }\n    }\nreturn 0;\n}\n\n```\n~~\u53ea\u662f\u628a\u9ec4\u5b66\u957f\u7684\u4ee3\u7801\u52a0\u4e86\u4e2a\u6ce8\u91ca~~\n\n",
        "postTime": 1528794833,
        "uid": 39506,
        "name": "drophell",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "\u601d\u8def\u697c\u4e0a\u51e0\u4f4d\u5de8\u795e\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u7684\u4e86\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd \u7ed3\u6784\u4f53\u7ebf\u6bb5\u6811+\u5b8f\u5b9a\u4e49 \u7684\u505a\u6cd5\u3002\u3002\u3002\n\n\u5b8f\u5b9a\u4e49\u662f\u4e2a\u597d\u4e1c\u897f\u554a\uff0c\u4e3a\u4ec0\u4e48\u53ea\u6709\u5c11\u6570\u4eba\u7528\u5462\u3002\u3002\u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define LSON rt<<1//\u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811\u5b8f\n#define RSON rt<<1|1\n#define DATA(x) a[x].data\n#define LSIDE(x) a[x].l\n#define RSIDE(x) a[x].r//\u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811\u5b8f\n#define MAXN 50010\nusing namespace std;\nint n,m,d=1;\nint year[MAXN],val[MAXN];//\u5e74\u4efd\uff0c\u964d\u96e8\u91cf\nstruct node{//\u7ebf\u6bb5\u6811\n    int data,l,r;\n}a[MAXN<<2];\ninline int read(){//\u8bfb\u4f18\u3002\u3002\u3002\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\ninline void pushup(int rt){//\u4e0a\u4f20\n    DATA(rt)=max(DATA(LSON),DATA(RSON));\n}\nvoid buildtree(int l,int r,int rt){//\u5efa\u6811\n    int mid;\n    LSIDE(rt)=l;\n    RSIDE(rt)=r;\n    if(l==r){\n        DATA(rt)=0;//\u521d\u503c\u4e3a0\n        return;\n    }\n    mid=l+r>>1;//\u5206\u5de6\u53f3\u5b50\u6811\n    buildtree(l,mid,LSON);\n    buildtree(mid+1,r,RSON);\n    pushup(rt);\n}\nvoid update(int l,int r,int c,int rt){//\u4fee\u6539\n    int mid;\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r){\n        DATA(rt)=c;\n        return;\n    }\n    mid=LSIDE(rt)+RSIDE(rt)>>1;\n    if(l<=mid)update(l,r,c,LSON);\n    if(mid<r)update(l,r,c,RSON);\n    pushup(rt);\n}\nint query(int l,int r,int rt){//\u6c42\u6700\u5927\u503c\n    if(l>r)return 0;//\u8bb0\u5f97\u52a0\u8fd9\u53e5\u3002\u3002\u3002\n    int mid,ans=0;//\u521d\u503c\u4e3a0\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r)\n    return DATA(rt);\n    mid=LSIDE(rt)+RSIDE(rt)>>1;\n    if(l<=mid)ans=max(ans,query(l,r,LSON));\n    if(mid<r)ans=max(ans,query(l,r,RSON));\n    return ans;\n}\nint get_id(int x){//\u4e8c\u5206\u627e\u7f16\u53f7\n    int l=1,r=n,mid;\n    while(l<=r){\n        mid=l+r>>1;\n        if(year[mid]>=x)r=mid-1;\n        else l=mid+1;\n    }\n    return l;\n}\nvoid work(){//\u5904\u7406\u95ee\u9898\n    int x,y,k;\n    m=read();\n    while(m--){\n        x=read();y=read();\n        int idx=get_id(x),idy=get_id(y);\n        k=query(idx+1,idy-1,1);\n        bool flag1=(year[idx]==x?true:false),flag2=(year[idy]==y?true:false);\n        if(flag1){//\u5206\u4e864\u79cd\u60c5\u51b5\n            if(flag2){\n                if(val[idx]<val[idy])printf(\"false\\n\");\n                else if(k<val[idy]){\n                    if(idy-idx==y-x)printf(\"true\\n\");\n                    else printf(\"maybe\\n\");\n                }\n                else printf(\"false\\n\");\n            }\n            else{\n                if(k<val[idx])printf(\"maybe\\n\");\n                else printf(\"false\\n\");\n            }\n        }\n        else{\n            if(flag2){\n                k=query(idx,idy-1,1);\n                if(k<val[idy])printf(\"maybe\\n\");\n                else printf(\"false\\n\");\n            }\n            else printf(\"maybe\\n\");\n        }\n    }\n}\nvoid init(){//\u8bfb\u5165+\u9884\u5904\u7406\n    n=read();\n    buildtree(1,n,1);\n    for(int i=1;i<=n;i++){\n        year[i]=read();val[i]=read();\n        update(i,i,val[i],1);\n    }\n}\nint main(){//\u4e3b\u51fd\u6570So easy!\n    init();\n    work();\n\treturn 0;\n}\n\n```",
        "postTime": 1519995731,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    },
    {
        "content": "**\u53c2\u7167\u4e86@xyz32768\u795e\u7287\u7684\u9898\u89e3\uff0c\u5e76\u4e14\u8bb2\u7684\u5341\u5206\u6e05\u695a\u5f88\u611f\u8c22**\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u5e76\u4e14\u7a0d\u5fae\u7cbe\u7b80\u4e86\u51e0\u6b65\u5224\u65ad\uff1a\n\n\n\u53cd\u6b63\u5177\u4f53\u8981\u6ee1\u8db3**Y>=X>Z (Z\u2208(X,Y))**\u3010\u6307\u7684\u964d\u96e8\u91cf\u3011\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define MAX 50000\n#define Mid ((l+r)>>1)\nusing namespace std;\nint Year[MAX],Rain[MAX],n;\ninline int Read()\n{\n    char t=getchar();  \n    int num=0,f=1;  \n    while (t<'0' || t>'9') f=t=='-'?-1:1,t=getchar();  \n    while (t>='0' && t<='9') num=num*10+t-'0',t=getchar();  \n    return num*f;  \n}\nstruct ST{\n/*\n\u91c7\u7528ST\u8868\u6765\u5bfb\u627e\u533a\u95f4\u6700\u5927\uff0c\u5982\u4e0d\u4e86\u89e3ST\u8868\u53ef\u53c2\u7167\nhttp://blog.csdn.net/qq_31029725/article/details/78818469\n\u770b\u770b\u6211\u5199\u7684ST\u8868\u603b\u7ed3\u3010\u867d\u7136\u6211\u77e5\u9053\u6211\u7684\u8bed\u8a00\u548c\u4ee3\u7801\u4f60\u4eec\u51e0\u4e4e\u5b8c\u5168\u770b\u4e0d\u61c2orz\u2026\u2026\n*/\n    int F[MAX][30],Log[MAX];\n    void InitLog()\n    {\n        Log[1]=0,Log[2]=1;\n        for (int i=3; i<=MAX; i++) Log[i]=Log[i>>1]+1;\n    }\n    \n    void Init()\n    {\n        InitLog();\n        for (int i=1; i<=n; i++) F[i][0]=Rain[i];\n        for (int i=2; i<=n; i++)\n        {\n            F[i][1]=max(F[i-1][0],F[i][0]);\n            for (int j=2; j<=Log[i]; j++) F[i][j]=max(F[i][j-1],F[i- (1<<(j-1))][j-1]);\n        }\n    }\n    \n    int Find(int l, int r)\n    {\n        if (l>r) return -1;\n        int k=Log[r-l+1];\n        return max(F[r][k],F[l+(1<<k)-1][k]);\n    }\n}ST;\nint Find(int x)        //\u4e8c\u5206\u67e5\u627e\u51fa\u6700\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5b58\u5728\u7684\u5e74\u4efd\u7684\u4e0b\u6807\n{\n    int l=1,r=n,k=Mid;\n    while (!(Year[k-1]<x && Year[k]>=x))\n    {\n        if (l==r) break;                //\u8fd9\u91cc\u6ce8\u610f\uff0c\u56e0\u4e3a\u5e74\u4efd\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c\u4e0d\u52a0\u7279\u5224\u5728\u627e\u52301\u65f6Year[Mid-1]<x\u4f1a\u51fa\u9519\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5c06Year[0]=-INF; \n        if (Year[k]>=x) r=k,k=Mid; else l=k+1,k=Mid;        //\u5e76\u4e14\u8fd9\u91ccYear[k]\u8981\u4e3a>=\uff0c\u627e\u52301\u7684\u65f6\u5019\u4f1abug \n    }\n    return k;\n}\nbool Known(int x, int &r)        //\u5224\u65ad\u662f\u5426\u4e3a\u5b58\u5728\u5e74\u4efd\n{\n    return x==Year[r=Find(x)]?1:0;\n}\nint main()\n{\n    n=Read();\n    for (int i=1; i<=n; i++) Year[i]=Read(),Rain[i]=Read();\n    ST.Init();\n    int q=Read();\n    for (int i=q; i-->0;)\n    {\n        int Y=Read(),X=Read(),s,e,ife=Known(X,e),ifs=Known(Y,s);        //\u8fd9\u91cc\u7528s\u4ee3\u8868\u8d77\u70b9\u5373Y\uff0ce\u4ee3\u8868\u7ec8\u70b9\u5373X\n        e+=Year[e]<X?1:0;    //\u8fd9\u91cc\u8981\u6ce8\u610f\u5982\u679c\u7ec8\u5e74\u8d85\u8fc7\u5df2\u77e5\u6700\u5927\u5e74\u4efd\u67e5\u627e\u8fd4\u56de\u7684\u662fn\uff0c\u5728\u5904\u7406e\u672a\u77e5\u7684\u65f6\u5019e-1\u4f1a\u6709bug \n        //\u6839\u636e\u6bcf\u4e00\u5e74\u5df2\u77e5\u60c5\u51b5\uff0c\u5e76\u6839\u636eY>=X>Z (Z\u2208(X,Y))\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u8ba8\u8bba\n        if (ife && ifs)\n        {\n            if (Rain[s] < Rain[e]) {printf(\"false\\n\"); continue;}            //X\u7684\u964d\u96e8\u91cf>Y\u7684\u964d\u96e8\u91cf\n            if (ST.Find(s+1,e-1) >= Rain[e]) {printf(\"false\\n\"); continue;}        //Z>=X\n            if (e-s == X-Y) {printf(\"true\\n\"); continue;} else {printf(\"maybe\\n\"); continue;}        //e-s == Y-X \u5373\u4e2d\u95f4\u6ca1\u6709\u672a\u77e5\u5e74\u4efd\n            //\u8fd9\u91cc\u89e3\u91ca\u4e00\u6ce2:\n            //\u5982\u679c\u6ca1\u6709\u672a\u77e5\u5e74\u4efd\uff0c\u5219\u53ef\u4ee5\u6309\u5206\u5757\u601d\u60f3\u6765\u8bf4\uff0c\u4e00\u4e2a\u5e74\u4e00\u5757\uff0c\u6240\u4ee5e-s == Y-X\n            //\u800c\u5f53\u6709\u672a\u77e5\u5e74\u4efd\uff0c\u5219\u5c06\u4f1a\u628a\u672a\u77e5\u5e74\u4efd\u538b\u7f29\u6210\u4e00\u5757\uff0c\u5373\u81f3\u5c11\u4e24\u4e2a\u5e74\u4e00\u5757\uff0c\u6240\u4ee5e-s <= Y-X\u3010\u6bcf\u6709\u4e00\u4e2a\u672a\u77e5\u5e74\u4efd\u5219e-s\u7684\u503c\u53d8\u4f1a\u5c11\u4e00\n        }\n        else if (ifs) if (ST.Find(s+1,e-1) >= Rain[s]) printf(\"false\\n\"); else  printf(\"maybe\\n\");        //\u5982\u679c\u5f53\u4e2d\u6ca1\u6709Z>=Y\u5219maybe\u3010\u53ea\u8981X or Y\u672a\u77e5\u5219\u5fc5maybe\n        else if (ife) if (ST.Find(s,e-1) >= Rain[e]) printf(\"false\\n\"); else printf(\"maybe\\n\");        //\u540c\u4e0a\u53ea\u4e0d\u8fc7\u662fZ>=X\u4e86 \n        else printf(\"maybe\\n\");        //\u4e24\u5e74\u90fd\u4e0d\u5b58\u5728\uff0c\u80af\u5b9amaybe\n    }\n}\n```\n\n\n\u5199\u7684\u4ee3\u7801\u548c\u6ce8\u91ca\u662f\u771f\u7684\u4e11orz\u4e0d\u660e\u767d\u53ef\u4ee5\u79c1\u4fe1\u6211\u5427\u2026\u2026\n",
        "postTime": 1517213896,
        "uid": 54695,
        "name": "SuperSASS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2471 \u3010[SCOI2007]\u964d\u96e8\u91cf\u3011"
    }
]