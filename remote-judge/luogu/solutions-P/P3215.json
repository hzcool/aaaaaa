[
    {
        "content": "\u9996\u5148\uff0c\u8bbe `( = -1`\uff0c`) = 1`\uff0c\u5b9a\u4e49 $\\text{prmax}$ \u4e3a\u524d\u7f00\u6700\u5927\u503c\uff0c$\\text{sfmin}$ \u4e3a\u540e\u7f00\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u4e3a\n\n$$\\lceil \\text{prmax}/2\\rceil+\\lceil|\\text{sfmin}|/2\\rceil$$\n\n\u8981\u7ef4\u62a4\u7b54\u6848\uff0c\u8003\u8651~~\u4f17\u6240\u5468\u77e5~~\u7684 \u7ebf\u6bb5\u6811/\u5e73\u8861\u6811 \u4e94\u95ee\uff1a  \n(\u8ddf zyb \u5b66\u7684)\n\n1\u3001\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u8bb0\u5f55\u54ea\u4e9b\u4fe1\u606f\uff1f\n\n\u8981\u8bb0\u5f55\u533a\u95f4\u548c\uff0c\u524d\u7f00\u6700\u5927\u3001\u6700\u5c0f\uff0c\u540e\u7f00\u6700\u5927\u3001\u6700\u5c0f\u3002 \n\n2\u3001\u9700\u8981\u54ea\u4e9b\u6807\u8bb0\uff1f  \n\n\u53ea\u9700\u8981\u9898\u76ee\u4e2d\u7684\u4e09\u79cd\u64cd\u4f5c\u6807\u8bb0\u5373\u53ef\u3002\n\n3\u3001\u5982\u4f55\u4e0b\u4f20\u6807\u8bb0\uff1f  \n\n\u5148\u6765\u8003\u8651\u6807\u8bb0\u4f18\u5148\u7ea7\uff1a\u53d6\u53cd\u3001\u8986\u76d6\u3001\u7ffb\u8f6c\u3002  \n\n\u6253\u53d6\u53cd\u6807\u8bb0\u65f6\uff0c\u533a\u95f4\u548c\u3001\u8282\u70b9\u503c\u76f4\u63a5\u53d6\u53cd\uff1b$\\text{prmax}$ \u53d8 $-\\text{prmin}$\uff0c$\\text{prmin}$ \u53d8 $-\\text{prmax}$\uff0c\u5bf9\u4e8e\u540e\u7f00\u540c\u7406\u3002\u522b\u5fd8\u4e86\u8fd8\u8981\u5bf9\u8986\u76d6\u6807\u8bb0\u53d6\u53cd\u3002  \n\n\u5bf9\u4e8e\u8986\u76d6\u6807\u8bb0\uff0c\u82e5\u8d4b\u503c\u4e3a\u6b63\u6570\uff0c$\\text{prmax,sfmax}$ \u53d8\u533a\u95f4\u548c\uff0c$\\text{prmin,sfmin}$ \u53d8\u4e3a $0$\u3002\u5bf9\u4e8e\u8d4b\u503c\u4e3a\u8d1f\u6570\u540c\u7406\u3002\n\n\u7ffb\u8f6c\u6807\u8bb0\u6bd4\u8f83\u7b80\u5355\uff0c\u9664\u4e86\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u518d\u4ea4\u6362\u524d\u7f00\u3001\u540e\u7f00\u7684\u6700\u5927\u6700\u5c0f\u548c\u5373\u53ef\u3002\n\n4\u3001\u5982\u4f55\u5bf9\u533a\u95f4\u6574\u4f53\u4fee\u6539\uff1f  \n\n\u8fd9\u4e2a\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u5728\u5bf9\u5e94\u533a\u95f4\u7684\u5b50\u6811\u6839\u4e0a\u6253\u6807\u8bb0\u5373\u53ef\u3002\n\n5\u3001\u5982\u4f55\u5408\u5e76\u533a\u95f4 (\u4e0a\u4f20\u4fe1\u606f)\uff1f\n\n\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003 [GSS1](https://www.luogu.org/problem/SP1043) \u4f20\u6807\u8bb0\u7684\u505a\u6cd5\uff0c\u4e5f\u5c31\u662f\u8fd9\u6837\uff1a\n```cpp\nprmax[u] = max(prmax[ls],sum[ls]+a[u]+prmax[rs]);\nprmin[u] = min(prmin[ls],sum[ls]+a[u]+prmin[rs]);\nsfmax[u] = max(sfmax[rs],sum[rs]+a[u]+sfmax[ls]);\nsfmin[u] = min(sfmin[rs],sum[rs]+a[u]+sfmin[ls]);\n```\n\u8fd9\u91cc `ls` \u548c `rs` \u5206\u522b\u6307\u5de6\u53f3\u513f\u5b50\u3002\n\u89e3\u51b3\u4e86\u4e0a\u9762\u4e94\u95ee\uff0c\u6574\u4e2a\u9898\u5c31\u89e3\u51b3\u5566\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<ctime>\n#define reg register\n#define N 100003\n#define ls son[u][0]\n#define rs son[u][1]\nusing namespace std;\n\ninline void read(int &x){\n\tx = 0;\n\tchar c = getchar();\n\twhile(c<'0'||c>'9') c = getchar();\n\twhile(c>='0'&&c<='9'){\n\t\tx = (x<<3)+(x<<1)+(c^48);\n\t\tc = getchar();\n\t}\n}\n\nint n,q;\n\nstruct fhqTreap{\n\tint a[N],son[N][2],rnd[N],sum[N],sfmax[N],sfmin[N];\n\tint tag[N],size[N],prmax[N],prmin[N];\n\tbool rev[N],inv[N];\n\tint rt,cnt;\n\t\n\tinline int neww(int x){\n\t\tint u = ++cnt;\n\t\tsum[u] = a[u] = x;\n\t\tif(x==1) prmax[u] = sfmax[u] = 1;\n\t\telse sfmin[u] = prmin[u] = -1;\n\t\tsize[u] = 1;\n\t\trnd[u] = rand();\n\t\treturn u;\n\t}\n\t\n\tinline void pushup(int u){\n\t\tsum[u] = sum[ls]+sum[rs]+a[u];\n\t\tsize[u] = size[ls]+size[rs]+1;\n\t\tprmax[u] = max(prmax[ls],sum[ls]+a[u]+prmax[rs]);\n\t\tprmin[u] = min(prmin[ls],sum[ls]+a[u]+prmin[rs]);\n\t\tsfmax[u] = max(sfmax[rs],sum[rs]+a[u]+sfmax[ls]);\n\t\tsfmin[u] = min(sfmin[rs],sum[rs]+a[u]+sfmin[ls]);\n\t}\n\t\n\tinline void pushr(int u){\n\t\tswap(ls,rs);\n\t\tswap(prmax[u],sfmax[u]);\n\t\tswap(prmin[u],sfmin[u]);\n\t\trev[u] ^= 1;\n\t}\n\t\n\tinline void pushiv(int u){\n\t\ta[u] = -a[u];\n\t\tsum[u] = -sum[u];\n\t\tint x = prmax[u],y = prmin[u];\n\t\tprmin[u] = -x,prmax[u] = -y;\n\t\tx = sfmax[u],y = sfmin[u];\n\t\tsfmin[u] = -x,sfmax[u] = -y;\n\t\tinv[u] ^= 1;\n\t\ttag[u] = -tag[u];\n\t}\n\t\n\tinline void pushc(int u,int k){\n\t\ta[u] = tag[u] = k;\n\t\tsum[u] = size[u]*k;\n\t\tif(k==1){\n\t\t\tprmin[u] = sfmin[u] = 0;\n\t\t\tprmax[u] = sfmax[u] = sum[u];\n\t\t}else{\n\t\t\tprmax[u] = sfmax[u] = 0;\n\t\t\tprmin[u] = sfmin[u] = sum[u];\n\t\t}\n\t}\n\t\n\tinline void pushdown(int u){\n\t\tif(inv[u]){\n\t\t\tif(ls) pushiv(ls);\n\t\t\tif(rs) pushiv(rs);\n\t\t\tinv[u] = 0;\n\t\t}\n\t\tif(tag[u]){\n\t\t\tif(ls) pushc(ls,tag[u]);\n\t\t\tif(rs) pushc(rs,tag[u]);\n\t\t\ttag[u] = 0;\n\t\t}\n\t\tif(!rev[u]) return;\n\t\tif(ls) pushr(ls);\n\t\tif(rs) pushr(rs);\n\t\trev[u] = 0;\n\t}\n\t\n\tint merge(int u,int v){\n\t\tpushdown(u);\n\t\tpushdown(v);\n\t\tif(!u||!v) return u|v;\n\t\tif(rnd[u]<rnd[v]){\n\t\t\tson[u][1] = merge(son[u][1],v);\n\t\t\tpushup(u);\n\t\t\treturn u;\n\t\t}else{\n\t\t\tson[v][0] = merge(u,son[v][0]);\n\t\t\tpushup(v);\n\t\t\treturn v;\n\t\t}\n\t}\n\t\n\tvoid split(int cur,int k,int &u,int &v){\n\t\tif(!cur){\n\t\t\tu = v = 0;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(cur);\n\t\tif(size[son[cur][0]]<k){\n\t\t\tu = cur;\n\t\t\tsplit(son[u][1],k-size[ls]-1,son[u][1],v);\n\t\t}else{\n\t\t\tv = cur;\n\t\t\tsplit(son[v][0],k,u,son[v][0]);\n\t\t}\n\t\tpushup(cur);\n\t}\n\t\n\tinline void push_back(int x){\n\t\trt = merge(rt,neww(x));\n\t}\n\t\n\tinline int query(int l,int r){\n\t\tint x,y,z,t,res;\n\t\tsplit(rt,l-1,x,y);\n\t\tsplit(y,r-l+1,y,z);\n\t\tt = prmax[y];\n\t\tres = (t&1)?(t>>1)+1:(t>>1);\n\t\tt = abs(sfmin[y]);\n\t\tres += (t&1)?(t>>1)+1:(t>>1);\n\t\trt = merge(merge(x,y),z);\n\t\treturn res;\n\t}\n\t\n\tinline void reverse(int l,int r){\n\t\tint x,y,z;\n\t\tsplit(rt,l-1,x,y);\n\t\tsplit(y,r-l+1,y,z);\n\t\tpushr(y);\n\t\trt = merge(merge(x,y),z);\n\t}\n\t\n\tinline void replace(int l,int r,int k){\n\t\tint x,y,z;\n\t\tsplit(rt,l-1,x,y);\n\t\tsplit(y,r-l+1,y,z);\n\t\tpushc(y,k);\n\t\trt = merge(merge(x,y),z);\n\t}\n\t\n\tinline void invert(int l,int r){\n\t\tint x,y,z;\n\t\tsplit(rt,l-1,x,y);\n\t\tsplit(y,r-l+1,y,z);\n\t\tpushiv(y);\n\t\trt = merge(merge(x,y),z);\n\t}\n\t\n\tvoid dfs(int u){\n\t\tpushdown(u);\n\t\tif(ls) dfs(ls);\n\t\tprintf(\"%d \",a[u]);\n\t\tif(rs) dfs(rs);\n\t}\n}T;\n\ninline bool check(char c){\n\treturn (c>='a'&&c<='z')||(c>='A'&&c<='Z');\n}\n\nint main(){\n\tsrand(time(0));\n\tint l,r,k;\n\tread(n),read(q);\n\tchar op,c = getchar();\n\twhile(c!='('&&c!=')') c = getchar();\n\twhile(c=='('||c==')'){\n\t\tT.push_back(c==')'?1:-1);\n\t\tc = getchar();\n\t}\n\twhile(q--){\n\t\tc = getchar();\n\t\twhile(!check(c)) c = getchar();\n\t\top = c;\n\t\twhile(check(c)) c = getchar();\n\t\tread(l),read(r);\n\t\tif(op=='R'){\n\t\t\tc = getchar();\n\t\t\twhile(c!='('&&c!=')') c = getchar();\n\t\t\tk = c==')'?1:-1;\n\t\t}\n\t\tif(op=='R') T.replace(l,r,k);\n\t\telse if(op=='S') T.reverse(l,r);\n\t\telse if(op=='I') T.invert(l,r);\n\t\telse printf(\"%d\\n\",T.query(l,r));\n\t}\n    return 0;\n}\n```",
        "postTime": 1571995351,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d /  [JSOI2011]\u62ec\u53f7\u5e8f\u5217\u3011"
    },
    {
        "content": "\u5148\u819c\u697c\u4e0bdalao\n\n\n\u6211\u7684\u65b9\u6cd5\u548c\u4ed6\u7c7b\u4f3c\uff0c\u4f46\u662f\u601d\u8def\u4f1a\u66f4\u6e05\u6670\u4e00\u4e9b\uff0c\u800c\u4e14\u4e5f\u6709\u7ec6\u5fae\u7684\u5dee\u8ddd\n\n\n\u7136\u800c\u6211\u89c9\u5f97\u6211\u8bb2\u7684\u6bd4\u4ed6\u597d\u3010\u6ed1\u7a3d\n\n\n### \u3010\u5e7f\u544a\u3011blog\n\n\n[Dedicatus545](http://www.cnblogs.com/dedicatus545/p/8387569.html)\n\n\n## \u601d\u8def\uff1a\n\n\n\u663e\u7136\uff0c\u64cd\u4f5c4\u4e2d\u8f93\u51fa\u8865\u5168\u7684\u6700\u5c0f\u8d39\u7528\u662f\u5173\u952e\n\n\n\u8fd9\u51b3\u5b9a\u4e86\u6211\u4eec\u4e0d\u53ef\u80fd\u5728splay\u4e0a\u53ea\u7ef4\u62a41-2\u4e2a\u503c\u3002\n\n\n\u8003\u8651\u4e00\u6bb5\u62ec\u53f7\u5e8f\u5217\uff0c\u5c06\u5176\u4e2d\u6240\u6709\u5408\u6cd5\u5e8f\u5217\u5220\u53bb\u4ee5\u540e\uff0c\u7559\u4e0b\u7684\u4e00\u5b9a\u662f\u5f62\u5982 ))))))((( \u7684\u5e8f\u5217\n\n\n\u56e0\u6b64\u9996\u5148\u8003\u8651\u5c06\u6bcf\u6bb5\u533a\u95f4\u5de6\u4fa7\u4e0d\u5339\u914d\u7684\u62ec\u53f7\u6570\u548c\u53f3\u4fa7\u4e0d\u5339\u914d\u7684\u62ec\u53f7\u6570\u8bb0\u5f55\u4e0b\u6765\uff0c\u5206\u522b\u4e3a left[l,r] \u548c right[l,r]\n\n\n\u6b64\u65f6\u9664\u4e86Invert\u64cd\u4f5c\u4ee5\u5916\u5df2\u7ecf\u53ef\u4ee5\u6ee1\u8db3\n\n\n\u4f46\u662f\u5bf9\u4e8eInvert\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u62ec\u53f7\u53d6\u53cd\uff0c\u663e\u7136\u6bcf\u8fb9\u53ea\u8bb0\u5f55\u4e00\u4e2a\u662f\u4e0d\u591f\u7684\u3002\n\n\n\u8003\u8651\u518d\u6b21\u8f6c\u5316\u6a21\u578b\uff0c\u5c06\u62ec\u53f7\u5e8f\u5217\u62bd\u8c61\u5316\u6210\u6570\u5b57\u7684\u548c\n\n\n\u53d1\u73b0\uff1a\u4e00\u4e2a\u5339\u914d\u7684\u62ec\u53f7\u5e8f\u5217\u4e2d\u5de6\u62ec\u53f7\u7b49\u4e8e\u53f3\u62ec\u53f7\uff0c\u4e00\u6bb5\u7f29\u8fc7\u7684\u5e8f\u5217\uff08\u53bb\u6389\u4e86\u6240\u6709\u7684\u5408\u6cd5\u5e8f\u5217\uff09\u7684\u5de6\u4fa7\u53f3\u62ec\u53f7\u6570\u91cf\u548c\u53f3\u4fa7\u5de6\u62ec\u53f7\u6570\u91cf\uff0c\u6070\u7b49\u4e8e\u5de6\u53f3\u62ec\u53f7\u6570\u91cf\u7684\u524d\u7f00\u548c\u4ee5\u53ca\u540e\u7f00\u548c\u3002\n\n\n\u56e0\u6b64\uff0c\u5c06\u53f3\u62ec\u53f7 \uff09\u89c6\u4e3a-1\uff0c\u5de6\u62ec\u53f7\uff08 \u89c6\u4e3a+1\uff0c\u5bf9\u6bcf\u4e00\u6bb5\u533a\u95f4\uff0c\u8bb0\u5f55\u5176\u6700\u5c0f\u524d\u7f00\u548c\u548c\u6700\u5927\u540e\u7f00\u548c\uff0c\u5373\u4e3a\u4e0a\u6587\u6240\u8ff0 left && right\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8bb0\u5f55\u533a\u95f4\u7684\u6700\u5927\u524d\u7f00\u548c\u548c\u6700\u5c0f\u540e\u7f00\u548c\uff0c\u4f5c\u4e3aSwap\u548cInvert\u64cd\u4f5c\u65f6\u5019\u7528\u3002\n\n\n\u5bf9\u4e8eSwap\u64cd\u4f5c\uff0c\u5373\u4e3a\u6574\u4e2a\u5e8f\u5217\u7ffb\u8f6c\uff0c\u90a3\u4e48\u5176\u6700\u5927\u524d\u7f00\u548c\u4e0e\u6700\u5927\u540e\u7f00\u548c\u4ea4\u6362\uff0c\u6700\u5c0f\u524d\u7f00\u548c\u4e0e\u6700\u5c0f\u540e\u7f00\u548c\u4ea4\u6362\n\n\n\u5bf9\u4e8eInvert\u64cd\u4f5c\uff0c\u9700\u8981\u4ea4\u6362\u6700\u5927\u6700\u5c0f\u524d\u7f00\u548c\uff0c\u4ee5\u53ca\u6700\u5927\u6700\u5c0f\u540e\u7f00\u548c\uff0c\u518d\u5c06\u5b83\u4eec\u5168\u90e8\u53d6\u53cd\n\n\n\u56e0\u4e3a\u6bcf\u4e2a\u62ec\u53f7\u53d6\u53cd\u4ee5\u540e\uff0c\u539f\u6765\u6700\u5c0f\u7684\u524d\u7f00\u548c\u5bf9\u5e94\u7684\u54ea\u4e00\u4e2a\u5e8f\u5217\uff0c\u73b0\u5728\u5177\u6709\u6240\u6709\u524d\u7f00\u91cc\u9762\u7684\u6700\u5927\u503c\uff08\u5728\u76f8\u53cd\u6570\u610f\u4e49\u4e0b\uff09\n\n\n\u540e\u7f00\u540c\u7406\n\n\n\u7edf\u8ba1\u7b54\u6848\u5373\u4e3a\u5bf9\u4e8e\u6240\u6c42\u533a\u95f4\uff0c\u6c42 (l1/2)+(r2/2) \uff0c\u82e5l1,r2\u662f\u5947\u6570\uff0c\u5219\u8fd8\u9700\u52a0\u4e8c\uff08\u989d\u5916\u8d39\u7528\uff09\n\n\n \n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u4ee4\u6bcf\u4e00\u4e2a\uff09\u4e3a-1\uff0c\u6bcf\u4e00\u4e2a\uff08\u4e3a1\uff0c\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u6700\u5927\u524d\u7f00\u548c l1,l2 \u4ee5\u53ca\u6700\u5c0f\u6700\u5927\u540e\u7f00\u548c r1,r2\uff0c\u5c06\u6574\u4e2a\u5e8f\u5217\u653e\u5230splay\u4e0a\u64cd\u4f5c\u5373\u53ef\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u66f4\u65b0\u533a\u95f4\u5168\u90e8\u5237\u6210\u540c\u4e00\u4e2a\u503c\u7684lazy\u6807\u8bb0\u65f6\uff0c\u4e00\u5b9a\u8981\u540c\u65f6\u53bb\u6389\u5df2\u6709\u7684invert\u6807\u8bb0\uff0c\u4ee5\u9632WA\n\n\n\n#### Code\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read(){\n    int re=0,flag=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') flag=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n    return re*flag;\n}\nint n,m,root,cnt;\nint fa[100010],ch[100010][2],siz[100010];\nint w[100010],l1[100010],l2[100010],r1[100010],r2[100010],sum[100010];\nint rev[100010]={0},lazy[100010]={0},inv[100010]={0};\nint x[100010];\n//lazy==1:  (\n//lazy==-1: )\nvoid _swap(int &x,int &y){x^=y;y^=x;x^=y;}\nint _max(int x,int y){return (x<y)?y:x;}\nint _min(int x,int y){return (x>y)?y:x;}\nvoid update(int x){\n    if(!x) return;\n    sum[x]=sum[ch[x][0]]+sum[ch[x][1]]+w[x];\n    siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;\n    l1[x]=_min(l1[ch[x][0]],sum[ch[x][0]]+w[x]+l1[ch[x][1]]);\n    l2[x]=_max(l2[ch[x][0]],sum[ch[x][0]]+w[x]+l2[ch[x][1]]);\n    r1[x]=_min(r1[ch[x][1]],sum[ch[x][1]]+w[x]+r1[ch[x][0]]);\n    r2[x]=_max(r2[ch[x][1]],sum[ch[x][1]]+w[x]+r2[ch[x][0]]);\n}\nvoid pushdown(int x,int t){\n    if(!x) return;\n    inv[x]=0;w[x]=t;lazy[x]=t;\n    if(~t){\n        sum[x]=siz[x];\n        l1[x]=r1[x]=0;\n        l2[x]=r2[x]=sum[x];\n    }\n    else{\n        sum[x]=~siz[x]+1;\n        l2[x]=r2[x]=0;\n        l1[x]=r1[x]=sum[x];\n    }\n}\nvoid pushrev(int x){\n    if(!x) return;\n    _swap(ch[x][0],ch[x][1]);\n    _swap(l1[x],r1[x]);\n    _swap(l2[x],r2[x]);\n    rev[x]^=1;\n}\nvoid pushinv(int x){\n    if(!x) return;\n    _swap(l1[x],l2[x]);\n    _swap(r1[x],r2[x]);\n    l1[x]=~l1[x]+1;l2[x]=~l2[x]+1;\n    r1[x]=~r1[x]+1;r2[x]=~r2[x]+1;\n    w[x]=~w[x]+1;sum[x]=~sum[x]+1;\n    inv[x]^=1;//\u6ce8\u610f\u8fd9\u91cc\uff01\uff01\uff01\uff01\n}\nvoid push(int x){\n    if(!x) return;\n    if(rev[x]){\n        pushrev(ch[x][0]);\n        pushrev(ch[x][1]);\n        rev[x]=0;\n    }\n    if(lazy[x]){\n        pushdown(ch[x][0],lazy[x]);\n        pushdown(ch[x][1],lazy[x]);\n        lazy[x]=0;\n    }\n    if(inv[x]){\n        pushinv(ch[x][0]);\n        pushinv(ch[x][1]);\n        inv[x]=0;\n    }\n}\nint get(int x){return ch[fa[x]][1]==x;}\nvoid rotate(int x){\n    int f=fa[x],ff=fa[f],son=get(x);\n    push(f);push(x);\n    ch[f][son]=ch[x][son^1];\n    if(ch[f][son]) fa[ch[f][son]]=f;\n    fa[f]=x;ch[x][son^1]=f;\n    fa[x]=ff;\n    if(ff) ch[ff][ch[ff][1]==f]=x;\n    update(f);update(x);\n}\nvoid splay(int x,int to){\n    if(x==to||fa[x]==to) return;\n    if(!to) root=x;\n    for(int f;(f=fa[x])&&f!=to;rotate(x))\n        if(fa[f]!=to)\n            rotate(get(f)==get(x)?f:x);\n    update(x);\n}\nint rank(int x,int pos){\n    push(pos);\n    if(siz[ch[pos][0]]+1==x){\n        splay(pos,0);return pos;\n    }\n    if(siz[ch[pos][0]]>=x) return rank(x,ch[pos][0]);\n    else return rank(x-siz[ch[pos][0]]-1,ch[pos][1]);\n}\nint build(int le,int ri,int f){\n    if(le>ri) return 0;\n    int mid=(le+ri)>>1,cur=++cnt;\n    //cout<<\"build \"<<le<<\" \"<<ri<<\" \"<<mid<<\" \"<<x[mid]<<\"\\n\";\n    w[cur]=x[mid];fa[cur]=f;\n    ch[cur][0]=build(le,mid-1,cur);\n    ch[cur][1]=build(mid+1,ri,cur);\n    update(cur);return cur;\n}\nvoid change(int le,int ri,int t){\n    int x=rank(le,root),y=rank(ri+2,root);\n    splay(x,0);splay(y,root);\n    pushdown(ch[y][0],t);\n    update(y);update(x);\n}\nvoid reverse(int le,int ri){\n    int x=rank(le,root),y=rank(ri+2,root);\n    splay(x,0);splay(y,root);\n    pushrev(ch[y][0]);\n    update(y);update(x);\n}\nvoid invert(int le,int ri){\n    int x=rank(le,root),y=rank(ri+2,root);\n    splay(x,0);splay(y,root);\n    pushinv(ch[y][0]);\n    update(y);update(x);\n}\nint query(int le,int ri){\n    int x=rank(le,root),y=rank(ri+2,root);\n    splay(x,0);splay(y,root);\n    return ((r2[ch[y][0]]+1)>>1)-((l1[ch[y][0]]-1)/2);\n    //\u8fd9\u91cc\u53f3\u79fb\u7684\u5bf9\u8c61\u5982\u679c\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u53f3\u79fb\u7684\u6548\u679c\u5c31\u4e0d\u662f/2.\u800c\u662f(+1)/2\uff0c\u7c7b\u4f3c-3\u4f1a\u53d8\u6210-2\u800c\u4e0d\u662f-1\n    //\u88ab\u8fd9\u91cc\u5361\u4e8630min\u3010\u96fe\n}\nvoid dfs(int u){\n    if(!u) return;\n    push(u);\n    dfs(ch[u][0]);\n    printf(\"%d %d %d %d\\n\",u,fa[u],ch[u][0],ch[u][1]);\n    printf(\"%d %d %d %d %d\\n\",w[u],l1[u],l2[u],r1[u],r2[u]);\n    dfs(ch[u][1]);\n}\nchar s[100010];\nint main(){\n//    freopen(\"brackets.in\",\"r\",stdin);\n//    freopen(\"brackets.out\",\"w\",stdout);\n    int i,t1,t2,t4;char t3;\n    n=read();m=read();\n    scanf(\"%s\",s);\n    for(i=1;i<=n;i++) x[i]=((s[i-1]=='(')?1:-1);\n    root=build(0,n+1,0);\n    //dfs(root);printf(\"\\n\");\n    for(i=1;i<=m;i++){\n        scanf(\"%s\",s);\n        if(s[0]=='R'){\n            t1=read();t2=read();t3=getchar();\n            while(t3!='('&&t3!=')') t3=getchar();\n            t4=((t3=='(')?1:-1);\n            change(t1,t2,t4);\n        }\n        if(s[0]=='I'){\n            t1=read();t2=read();\n            invert(t1,t2);\n        }\n        if(s[0]=='Q'){\n            t1=read();t2=read();\n            printf(\"%d\\n\",query(t1,t2));\n        }\n        if(s[0]=='S'){\n            t1=read();t2=read();\n            reverse(t1,t2);\n        }\n        //dfs(root);printf(\"\\n\");\n    }\n}\n```",
        "postTime": 1517380518,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d\u3011"
    },
    {
        "content": "\u9700\u8981\u6539\u53d8\u7684\u62ec\u53f7\u5e8f\u5217\u4e00\u5b9a\u957f\u8fd9\u6837 \uff1a)))(((\n\n\u6700\u5c11\u6539\u53d8\u6b21\u6570= \u591a\u4f59\u7684\u2018\uff09\u2019/2 \u3010\u4e0a\u53d6\u6574\u3011 + \u591a\u4f59\u7684\u2018\uff08\u2019 /2 \u3010\u4e0a\u53d6\u6574\u3011\n\n\u628a \u2018\uff09\u2019 \u770b\u505a1\uff0c\u2018\uff08\u2019 \u770b\u505a-1\n\n\u90a3\u4e48\u6700\u5c11\u6539\u53d8\u6b21\u6570=\u6700\u5927\u524d\u7f00\u548c/2 \u3010\u4e0a\u53d6\u6574\u3011+ \u6700\u5c0f\u540e\u7f00\u548c/2 \u3010\u4e0a\u53d6\u6574\u3011\n\n \n\n\u8986\u76d6\u6807\u8bb0\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u7ffb\u8f6c\u6807\u8bb0\u548c\u53d6\u53cd\u6807\u8bb0\n\n\u5373\u4e0b\u653e\u8986\u76d6\u6807\u8bb0\u65f6\uff0c\u540c\u65f6\u6e05\u7a7a\u7ffb\u8f6c\u6807\u8bb0\u548c\u53d6\u53cd\u6807\u8bb0\n\n\u4e14\u5148\u4e0b\u653e\u8986\u76d6\u6807\u8bb0\n\n \n\n\u7ffb\u8f6c\uff1a\n\n\u6700\u5927\u524d\u7f00\u548c \u548c \u6700\u5927\u540e\u7f00\u548c \u4ea4\u6362\n\n\u6700\u5c0f\u524d\u7f00\u548c \u548c \u6700\u5c0f\u540e\u7f00\u548c \u4ea4\u6362\n\n \n\n\u53d6\u53cd\uff1a\n\n\u6700\u5927\u524d\u7f00\u548c \u548c \u6700\u5c0f\u524d\u7f00\u548c \u4ea4\u6362\uff0c\u540c\u65f6\u53d6\u53cd\n\n\u6700\u5927\u540e\u7f00\u548c \u548c \u6700\u5c0f\u540e\u7f00\u548c \u4ea4\u6362\uff0c\u540c\u65f6\u53d6\u53cd\n\n \n\n\u6700\u5927XX\u548c\u7684\u4e0b\u754c\u4e3a0\uff0c\u6700\u5c0fXX\u548c\u7684\u4e0a\u754c\u4e3a0\n\n\u56e0\u4e3a\u6700\u5927XX\u548c\u5b9e\u9645\u662f\u591a\u4f59\u7684\u2018\uff09\u2019\u6570\u91cf\n\n\u6700\u5c0fXX\u548c\u7684\u76f8\u53cd\u6570\u5b9e\u9645\u662f\u591a\u4f59\u7684\u2018\uff08\u2019\u6570\u91cf\n\n\u6570\u91cf\u4e0d\u80fd\u4e3a\u8d1f\u6570\n\n \n\n\u6ce8\u610f\u70b9\uff1a\n\n1\u3001\u589e\u52a0\u4e86\u9996\u5c3e\u4e24\u4e2a\u865a\u62df\u8282\u70b9\u540e\uff0c\u6570\u7ec4\u8981\u591a\u5f002\n\n2\u3001\u5e73\u8861\u6811\u6bcf\u4e2a\u8282\u70b9\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5de6\u5b50\u6811\u3001\u81ea\u5df1\u3001\u53f3\u5b50\u6811\uff0c\u6253\u53d6\u53cd\u6807\u8bb0\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u7ed9\u81ea\u5df1\u53d6\u53cd\n\n\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n\nusing namespace std;\n\n#define N 100001\n\nchar ss[N];\nint a[N];\n\nint root,tot;\n\nint st[N];\n\nbool rev[N],inv[N];\nint tag[N];\nint pre[N],suf[N];\nint sum[N];\nint pri[N],val[N];\n\nint siz[N],ch[N][2];\n\nint tmp;\n\nvoid read(int &x)\n{\n    x=0; char c=getchar();\n    while(!isdigit(c)) c=getchar();\n    while(isdigit(c)) { x=x*10+c-'0'; c=getchar(); }\n}\n\ninline int &max(int &a,int &b) { return a>b ? a : b; }\ninline int &min(int &a,int &b) { return a<b ? a : b; }\n\nvoid update(int x)\n{\n    int l=ch[x][0],r=ch[x][1];\n    siz[x]=siz[l]+siz[r]+1;\n    sum[x]=sum[l]+sum[r]+val[x];\n    pre[x]=max(pre[l],sum[l]+pre[r]+val[x]);\n    pre[x]=max(pre[x],sum[l]+val[x]);\n    suf[x]=max(suf[r],sum[r]+suf[l]+val[x]);\n    suf[x]=max(suf[x],sum[r]+val[x]);\n}\n\nint newnode(int v)\n{\n    val[++tot]=sum[tot]=v;\n    pre[tot]=suf[tot]=max(0,val[tot]);\n    sum[tot]=val[tot];\n    siz[tot]=1;\n    pri[tot]=rand();\n    return tot;\n}\n\nint build(int l,int r)\n{\n    int top=0; int last,now;\n    for(int i=l;i<=r;++i)\n    {\n        now=newnode(a[i]);\n        last=0;\n        while(top && pri[now]<pri[st[top]])\n        {\n            update(st[top]);\n            last=st[top--];\n        }\n        if(top) ch[st[top]][1]=now;\n        ch[now][0]=last; \n        st[++top]=now;\n    }\n    while(top) update(st[top--]);\n    return st[1];\n}\n\nvoid down(int x)\n{\n    int l=ch[x][0],r=ch[x][1];\n    if(tag[x])\n    {\n        if(l)\n        {\n            val[l]=tag[x];\n            sum[l]=tag[x]*siz[l];\n            pre[l]=suf[l]=max(0,sum[l]);\n            rev[l]=inv[l]=false;\n            tag[l]=tag[x];\n        }\n        if(r)\n        {\n            val[r]=tag[x];\n            sum[r]=tag[x]*siz[r];\n            pre[r]=suf[r]=max(0,sum[r]);\n            rev[r]=inv[r]=false;\n            tag[r]=tag[x];\n        }\n        tag[x]=0;\n    }\n    if(rev[x])\n    {\n        if(l)\n        {\t\n            swap(pre[l],suf[l]);\n            swap(ch[l][0],ch[l][1]);\n            rev[l]^=1;\n        }\n        if(r)\n        {\t\n            swap(pre[r],suf[r]);\n            swap(ch[r][0],ch[r][1]);\n            rev[r]^=1;\n        }\n        rev[x]^=1;\n    }\n    if(inv[x])\n    {\n        if(l)\n        {\n            tmp=pre[l];\n            pre[l]=max(0,-(sum[l]-suf[l]));\n            suf[l]=max(0,-(sum[l]-tmp));\n            sum[l]=pre[l]+min(0,-sum[l]-pre[l]);\n            val[l]=-val[l];\n            inv[l]^=1;\n        }\n        if(r)\n        {\n            tmp=pre[r];\n            pre[r]=max(0,-(sum[r]-suf[r]));\n            suf[r]=max(0,-(sum[r]-tmp));\n            sum[r]=pre[r]+min(0,-sum[r]-pre[r]);\n            val[r]=-val[r];\n            inv[r]^=1;\n        }\n        inv[x]^=1;\n    }\n}\n\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now) x=y=0;\n    else\n    {\n        down(now);\n        if(k<=siz[ch[now][0]])\n        {\n            y=now;\n            split(ch[now][0],k,x,ch[now][0]);\n        }\n        else\n        {\n            x=now;\n            split(ch[now][1],k-siz[ch[now][0]]-1,ch[now][1],y);\n        }\n        update(now);\n    }\t\t\n}\n\nint merge(int x,int y)\n{\n    if(x) down(x);\n    if(y) down(y);\n    if(!x || !y) return x+y;\n    if(pri[x]<pri[y])\n    {\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else\n    {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\n    \n\nint main()\n{\n    int n,m;\n    read(n); read(m);\n    scanf(\"%s\",ss+2);\n    for(int i=2;i<=n+1;++i) \n        if(ss[i]==')') a[i]=1;\n        else a[i]=-1;\n    root=build(1,n+2);\n    int l,r; char s[10],cc[3];\n    int a,b,c,d,e;\n    while(m--)\n    {\n        scanf(\"%s\",s);\n        read(l); read(r);\n        l++; r++;\n        split(root,r,a,b);\n        split(a,l-1,c,d);\n        if(s[0]=='R')\n        {\n            scanf(\"%s\",cc);\n            e= cc[0]==')' ? 1 : -1;\n            tag[d]=e;\n            val[d]=e;\n            sum[d]=e*siz[d];\n            pre[d]=suf[d]=max(0,sum[d]);\n            rev[d]=inv[d]=false;\n        }\n        else if(s[0]=='S')\n        {\n            rev[d]=true;\n            swap(ch[d][0],ch[d][1]);\n            swap(pre[d],suf[d]);\n        }\n        else if(s[0]=='I')\n        {\n            inv[d]=true;\n            tmp=pre[d];\n            pre[d]=max(0,-(sum[d]-suf[d]));\n            suf[d]=max(0,-(sum[d]-tmp));\n            sum[d]=pre[d]+min(0,-sum[d]-pre[d]);\n            val[d]=-val[d];\n        }\n        else printf(\"%d\\n\",(pre[d]+1)/2+(-sum[d]+pre[d]+1)/2);\n        root=merge(merge(c,d),b);\n    }\n}\n\n```",
        "postTime": 1517491941,
        "uid": 21351,
        "name": "xuxinyu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u63cf\u8ff0\n\n\u9996\u5148\u5b9a\u4e49\u5408\u6cd5\u62ec\u53f7\u5339\u914d\u4e32 $Str$\uff0c\u6ee1\u8db3\u4eba\u7c7b\u76f4\u89c9\u5339\u914d\u3002\uff08~~\u77aa\u773c\u5339\u914d\u6cd5~~\uff09\n\n\u63a5\u7740\u7ed9\u51fa\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $S$\uff0c\u5e76\u7ed9\u51fa\u957f\u5ea6\u4e3a $q$ \u7684\u64cd\u4f5c\u5e8f\u5217\u3002\n\n\u64cd\u4f5c\u6709 **Replace**\uff0c**Swap (Reverse)**\uff0c**Invert** \u4e09\u79cd\uff0c\u4ee5\u53ca\u8be2\u95ee **Query (Ask)**\uff0c\u610f\u4e49\u89c1\u9898\u9762\uff0c\u4e0d\u505a\u8d58\u8ff0\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u7b54\u6848\u3002\u6570\u636e\u8303\u56f4 $n, q \\leq 10^5$\u3002\n\n#### \u7b97\u6cd5\u5206\u6790\n\n\u5bf9\u4e8e\u4e09\u4e2a\u533a\u95f4\u64cd\u4f5c\uff0c\u6211\u4eec\u5206\u522b\u7ef4\u62a4\u4e09\u4e2a\u5bf9\u5e94\u4e14\u72ec\u7acb\u7684 **tag**\uff0c\u4f5c\u4e3a\u533a\u95f4\u66f4\u6539\u7684\u6807\u8bb0\uff0c\u5728\u4e0b\u4f20\u4e09\u4e2a **tag** \u65f6\uff0c\u5b58\u5728\u4e00\u5b9a\u7684\u4f18\u5148\u7ea7\u5173\u7cfb\uff0c\u6613\u8bc1\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u6211\u4eec\u8bbe\u5de6\u62ec\u53f7\u4e3a $-1$\uff0c\u53f3\u62ec\u53f7\u4e3a $1$\uff0c\u7ef4\u62a4\u524d\u7f00\u6700\u503c\uff0c\u540e\u7f00\u6700\u503c\uff0c\u533a\u95f4\u548c\uff0c\u5e76\u4f7f\u7528\u516c\u5f0f\u8ba1\u7b97\u7b54\u6848\uff1a\n$$\nQuery(x,y) = \\lceil \\dfrac{maxPre}{2} \\rceil + \\lceil \\dfrac{-minSuf}{2} \\rceil\n$$\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u533a\u95f4\uff0c\u5176 $maxPre$ \u4e0e $minSuf$ \u7684\u6700\u77ed\u7edf\u8ba1\u8303\u56f4\u5e94\u6ca1\u6709\u91cd\u590d\u3002\n\n\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u3002\u8bbe $maxPre, minSuf$ \u4e2d\u5b58\u5728\u5171\u540c\u533a\u95f4 $(l, r)$\uff0c$t_l$ \u4e3a\u533a\u95f4\u5de6\u62ec\u53f7\u6570\u91cf\uff0c$t_r$ \u4e3a\u53f3\u62ec\u53f7\u6570\u91cf\uff0c\u7531 $(l,r)$ \u533a\u95f4\u9700\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u5f97\u5fc5\u7136\u6709\uff1a$t_l < t_r$ \u4e14 $t_l > t_r$\uff0c\u77db\u76fe\uff01\n\n\u56e0\u6b64\uff0c\u8bbe\u5bf9\u4e8e\u533a\u95f4 $(l,r)$\uff0c$maxPre = \\sum_{i=l}^xS_i, \\ minSuf = \\sum_{i=y}^r S_i $ \u6ee1\u8db3 $l \\leq x < y \\leq r$\uff0c\u5fc5\u7136\u53ef\u5f97 $t_l(x+1,y-1) = t_r(x+1,y-1)$\uff0c\u540c\u65f6\u53ef\u4ee5\u5f97\u5230 $(x,y)$ \u5fc5\u5b9a\u4e3a\u5408\u6cd5\u7684\u62ec\u53f7\u5339\u914d\u4e32\u3002\u8be5\u7ed3\u8bba\u7531\u7b2c\u4e00\u4e2a\u8bc1\u660e\u53ef\u4ee5\u63a8\u5bfc\u5f97\u5230\u3002\n\n\u7531\u4e0a\u8ff0\u8bc1\u660e\u52a0\u4ee5\u63a8\u5bfc\uff0c$Query(x,y)$ \u7684\u8ba1\u7b97\u65b9\u5f0f\u5f97\u8bc1\uff0c\u672c\u9898\u6700\u5927\u7684\u96be\u70b9\u5f97\u4ee5\u7a81\u7834\u3002\n\n#### \u4ee3\u7801\n\n\u7ecf\u5178\u7684\u5e73\u8861\u6811\u95ee\u9898\uff0c\u5305\u542b $4$ \u4e2a\u533a\u95f4\u64cd\u4f5c\uff08\u8be2\u95ee\uff09\uff0c\u4e3a\u65b9\u4fbf\u7f16\u7801\uff0c\u679c\u65ad\u9009\u62e9 **FHQ-Treap**\u3002\u4ee3\u7801\u4e2d\u7684\u4e09\u4e2a **tag** \u5206\u522b\u5bf9\u5e94\u4e09\u4e2a\u4fee\u6539\u64cd\u4f5c\u7684\u6807\u8bb0\u3002\n\n```c++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nint translate(char chr) { // \u5c06\u62ec\u53f7\u8f6c\u6362\u4e3a\u6570\u503c\n    if (chr == '(')\n        return -1;\n    return 1;\n}\n\nstruct Node {\n    Node *l{}, *r{};\n    int rnd{}, val{}, size{}, tag1{}, tag2{}, tag3{};\n    int maxPre{}, minPre{}, maxSuf{}, minSuf{}, sum{};\n};\n\nNode *New(int val) {\n    Node *p = new Node;\n    p->rnd = rand();\n    p->val = p->sum = val;\n    p->size = 1;\n    p->maxPre = p->maxSuf = max(0, val);\n    p->minPre = p->minSuf = min(0, val);\n    return p;\n}\n\nstruct Treap {\n    Node *root = nullptr;\n\n    Node get(Node *p) {\n        if (!p)\n            return {};\n        return *p;\n    }\n\n    void replace(Node *p, int val) { // \u533a\u95f4\u4fee\u6539\n        p->tag1 = p->val = val;\n        p->sum = p->size * val;\n        p->maxPre = p->maxSuf = max(0, p->sum);\n        p->minPre = p->minSuf = min(0, p->sum);\n    }\n\n    void reverse(Node *p) { // \u533a\u95f4\u7ffb\u8f6c\n        swap(p->minPre, p->minSuf);\n        swap(p->maxPre, p->maxSuf);\n        swap(p->l, p->r);\n        p->tag2 ^= 1;\n    }\n\n    void invert(int &x) {\n        x = -x;\n    }\n\n    void invert(Node *p) { // \u533a\u95f4\u53d6\u53cd\n        swap(p->minPre, p->maxPre);\n        swap(p->minSuf, p->maxSuf);\n        invert(p->val), invert(p->sum);\n        invert(p->minPre), invert(p->maxPre);\n        invert(p->minSuf), invert(p->maxSuf);\n        invert(p->tag1);\n        p->tag3 ^= 1;\n    }\n    \n    void update(Node *p) { // \u4e0a\u4f20\u533a\u95f4\u4fe1\u606f\n        Node l = get(p->l), r = get(p->r);\n        p->size = l.size + r.size + 1;\n        p->sum = l.sum + r.sum + p->val;\n        p->minPre = min(l.minPre, l.sum + p->val + r.minPre);\n        p->maxPre = max(l.maxPre, l.sum + p->val + r.maxPre);\n        p->minSuf = min(r.minSuf, r.sum + p->val + l.minSuf);\n        p->maxSuf = max(r.maxSuf, r.sum + p->val + l.maxSuf);\n    }\n\n    void spread(Node *p) { // \u4e0b\u4f20\u6807\u8bb0\n        bool flag1 = p->l != nullptr, flag2 = p->r != nullptr;\n\n        if (p->tag3) {\n            flag1 ? invert(p->l) : (void) NULL;\n            flag2 ? invert(p->r) : (void) NULL;\n        }\n        if (p->tag1) {\n            flag1 ? replace(p->l, p->tag1) : (void) NULL;\n            flag2 ? replace(p->r, p->tag1) : (void) NULL;\n        } else if (p->tag2) {\n            flag1 ? reverse(p->l) : (void) NULL;\n            flag2 ? reverse(p->r) : (void) NULL;\n        }\n\n        p->tag1 = p->tag2 = p->tag3 = 0;\n    }\n\n    Node *merge(Node *l, Node *r) {\n        if (!l || !r)\n            return max(l, r);\n        spread(l);\n        spread(r);\n\n        if (l->rnd < r->rnd) {\n            l->r = merge(l->r, r);\n            update(l);\n            return l;\n        } else {\n            r->l = merge(l, r->l);\n            update(r);\n            return r;\n        }\n    }\n\n    pair<Node *, Node *> split(Node *p, int rnk) {\n        if (!p)\n            return make_pair(p, p);\n        spread(p);\n\n        if (get(p->l).size + 1 <= rnk) {\n            auto q = split(p->r, rnk - get(p->l).size - 1);\n            p->r = q.first;\n            update(p);\n            return make_pair(p, q.second);\n        } else {\n            auto q = split(p->l, rnk);\n            p->l = q.second;\n            update(p);\n            return make_pair(q.first, p);\n        }\n    }\n\n    void insert(int val) {\n        root = merge(root, New(val));\n    }\n\n    void replace(int l, int r, int val) {\n        auto a = split(root, l - 1);\n        auto b = split(a.second, r - l + 1);\n        replace(b.first, val);\n        b.first->tag2 = 0;\n        root = merge(a.first, merge(b.first, b.second));\n    }\n\n    void reverse(int l, int r) {\n        auto a = split(root, l - 1);\n        auto b = split(a.second, r - l + 1);\n        if (!b.first->tag1)\n            reverse(b.first);\n        root = merge(a.first, merge(b.first, b.second));\n    }\n\n    void invert(int l, int r) {\n        auto a = split(root, l - 1);\n        auto b = split(a.second, r - l + 1);\n        invert(b.first);\n        root = merge(a.first, merge(b.first, b.second));\n    }\n\n    int ask(int l, int r) {\n        auto a = split(root, l - 1);\n        auto b = split(a.second, r - l + 1);\n        int res = (b.first->maxPre + 1) / 2 + (-b.first->minSuf + 1) / 2;\n        root = merge(a.first, merge(b.first, b.second));\n        return res;\n    }\n} treap;\n\nint n, q;\nstring str;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n    cin >> n >> q >> str;\n\n    for (auto i: str)\n        treap.insert(translate(i));\n\n    for (int i = 1, l, r; i <= q; i++) {\n        cin >> str >> l >> r;\n\n        if (str[0] == 'R') {\n            char c;\n            cin >> c;\n            treap.replace(l, r, translate(c));\n        } else if (str[0] == 'S')\n            treap.reverse(l, r);\n        else if (str[0] == 'I')\n            treap.invert(l, r);\n        else if (str[0] == 'Q')\n            cout << treap.ask(l, r) << '\\n';\n    }\n\n    return 0;\n}\n```\n\n",
        "postTime": 1660703624,
        "uid": 258563,
        "name": "\u6211\u662f\u900d\u900d",
        "ccfLevel": 6,
        "title": "P3215"
    },
    {
        "content": "\u65e2\u7136\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u81ea\u7136\u5c31\u60f3\u5230\u73c2\u6735\u8389\u6811\u4e86\n\n\u4e4b\u540e\u51e0\u4e2a\u64cd\u4f5c\u5c31\u53ef\u4ee5\u66b4\u529b\u7ef4\u62a4\u4e86\n\n\u5c31\u662fQuery\u64cd\u4f5c\u8bf4\u4e00\u4e0b\u505a\u6cd5\n\n\u6211\u7684\u505a\u6cd5\u662f\uff1a\u6c42\u51fa \u8bbe ( \u4e3a 1\uff0c ) \u4e3a-1\n\n\u6c42\u51fa\u8fd9\u4e2a\u533a\u95f4\u7684\u524d\u7f00\u548c\n\n\u5982\u679c\u67d0\u4e2a\u5730\u65b9\u7684\u524d\u7f00\u548c\u5c0f\u4e8e 0 \uff08\u8bbe\u4e3aS\uff09\u5219\u8bf4\u660e\u6b64\u65f6\u524d\u9762\u7684 ')'\u6570\u91cf\u591a\u4e8e '(' \u6570\u91cf\uff0c\u65e0\u6cd5\u5339\u914d\uff0c\u6b64\u65f6\u5219\u9700\u8981\u4fee\u6539\n\u4fee\u6539 $\\frac{-s}{2}$(\u4e0a\u53d6\u6574)\u4e2a\u62ec\u53f7\n\n\u540c\u65f6\u4fee\u6539\u524d\u7f00\u548c\uff08s\u4e3a\u5947\u6570\u6539\u4e3a1\uff0c\u5426\u5219\u4e3a0\uff09\n\n\u6700\u540e\u7684 \u82e5 \u524d\u7f00\u548c > 0 \u8868\u793a '(' \u8f83\u591a,\u65e0\u6cd5\u5339\u914d\n\n\u5219\u8fd8\u9700\u8981\u4fee\u6539$\\frac{s}{2}$\u4e2a\u62ec\u53f7\n\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100005\n#define se  set<aa>\n#define it iterator \n\nint n,m;\nint a[MAXN];\nchar ch[MAXN];\nstruct aa\n{\n\tint l,r,v;\n};\nbool operator <(aa a,aa b) {\n\treturn a.r < b.r;\n}\nset<aa>s;\n\nvoid wt()\n{\n\tfor(se::it i = s.begin(); i != s.end(); i ++)\n\t{\n\t\tcout<<(i->l)<<\" \"<<(i->r)<<\" \"<<(i->v)<<\"\\n\";\n\t}\n} \n\nint zh(char a)\n{\n\tif(a == '(') return 1;\n\telse return -1;\n\t\n}\n\nvoid splix(se::it a,int i) {\n\tif(i < a->l) return;\n\tif(a->r < i+1) return;\n\tint sl = a->l,sr = a->r,sv = a->v;\n\ts.erase(a);\n\ts.insert((aa){sl,i,sv});\n\ts.insert((aa){i+1,sr,sv});\n}\n\nvoid fen(int l,int r)\n{\n\tse::it x = s.lower_bound((aa){0,l,0});\n\tsplix(x,l-1);\n\tse::it y = s.lower_bound((aa){0,r,0});\n\tsplix(y,r);\n}\n\nvoid tuiping(int l,int r,int v)\n{\n\tfen(l,r);\n\tse::it x = s.lower_bound((aa){0,l,0});\n\tse::it y = s.lower_bound((aa){0,r,0});\n\ty ++;\n\ts.erase(x,y);\n\ts.insert((aa){l,r,v});\n}\n\naa c[MAXN];\nint nn;\n\nvoid tiqu(int l,int r)\n{\n\tfen(l,r);\n\tse::it x = s.lower_bound((aa){0,l,0});\n\tse::it y = s.lower_bound((aa){0,r,0});\n\tnn = 0;\n\tfor(se::it i = x; 1 == 1; i ++) {\n\t\tnn ++;\n\t\tc[nn] = (*i);\n\t//\tcout<<nn<<\":\"<<c[nn].l<<\" \"<<c[nn].r<<\" \"<<c[nn].v<<\"\\n\"; \n\t\tif(i == y) break;\n\t}\n} \n\nvoid Swap(int l,int r)\n{\n\tfen(l,r);\n\ttiqu(l,r);\n\tse::it x = s.lower_bound((aa){0,l,0});\n\tse::it y = s.lower_bound((aa){0,r,0});\n\ty ++;\n\ts.erase(x,y);\n\tfor(int i = 1; i <= nn; i ++) {\n\t\ts.insert((aa){r - (c[i].r - c[i].l),r,c[i].v});\n\t\tr -= (c[i].r - c[i].l)+1;\n\t//\tcout<<r<<\"\\n\";\n\t}\n}\n\nvoid Invert(int l,int r) {\n\tfen(l,r);\n\ttiqu(l,r);\n\tse::it x = s.lower_bound((aa){0,l,0});\n\tse::it y = s.lower_bound((aa){0,r,0});\n\ty ++;\n\ts.erase(x,y);\n\tfor(int i = 1; i <=  nn; i ++) {\n\t\ts.insert((aa){c[i].l,c[i].r,-c[i].v});\n\t} \t\n}\n\nvoid qiu(int l,int r)\n{\n\tfen(l,r);\n\ttiqu(l,r);\n\tint ans = 0,s = 0;\n\tfor(int i = 1; i <= nn; i ++)\n\t{\n\t\ts += (c[i].r - c[i].l + 1)*c[i].v;\n\t\tif(s < 0)\n\t\t{\n\t\t\tans += (-s)>>1;\n\t\t\tif((-s)&1) \n\t\t\t{\n\t\t\t\ts = 1;\n\t\t\t\tans ++;\n\t\t\t}\n\t\t\telse s = 0;\n\t\t}\n\t}\n\tans += abs(s)>>1; \n\tprintf(\"%d\\n\",ans);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tscanf(\"%s\",ch+1);\n\tfor(int i = 1; i <= n; i ++) {\n\t\tif(ch[i] ==  '(' )\n\t\t{\n\t\t\ta[i] = 1;\n\t\t\ts.insert((aa){i,i,a[i]});\n\t\t}else {\n\t\t\ta[i] = -1;\n\t\t\ts.insert((aa){i,i,a[i]});\n\t\t}\n\t} \n//\twt();\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tstring opt;\n\t\tcin >> opt;\n\t\tif(opt == \"Replace\")\n\t\t{\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tstring ot;\n\t\t\tcin >> ot;\n\t\t\ttuiping(l,r,zh(ot[0])); \n\t\t}\n\t\tif(opt == \"Query\")\n\t\t{\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tqiu(l,r);\n\t\t}\n\t\tif(opt == \"Swap\")\n\t\t{\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tSwap(l,r);\n\t\t}\n\t\tif(opt == \"Invert\")\n\t\t{\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tInvert(l,r);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1549292200,
        "uid": 17850,
        "name": "ChthollyTree",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d /  [JSOI2011]\u62ec\u53f7\u5e8f\u5217\u3011"
    },
    {
        "content": ">### [\u6d1b\u8c37\u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3215)\n\n>\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u4e32$a,|a|=n$\u3002\u4f60\u9700\u8981\u652f\u6301\u4ee5\u4e0b$4$\u79cd$q$\u6b21\u64cd\u4f5c\uff1a\n\n>1. $\\texttt{Replace}\\ l\\ r\\ x$\uff1a\u5c06$a_{l\\sim r}$\u5185\u7684\u5b57\u7b26\u5168\u90e8\u6539\u4e3a$x$\uff1b\n>1. $\\texttt{Swap}\\ l\\ r$\uff1a\u5c06$a_{l\\sim r}$\u7ffb\u8f6c\uff1b\n>1. $\\texttt{Invert}\\ l\\ r$\uff1a\u5c06$a_{l\\sim r}$\u5185\u7684\u6240\u6709\u5b57\u7b26$\\texttt(\\to\\texttt),\\texttt)\\to\\texttt($\uff1b\n>1. $\\texttt{Query}\\ l\\ r$\uff1a\u67e5\u8be2$a_{l\\sim r}$\u81f3\u5c11\u8981\u6539\u53d8\u591a\u5c11\u4e2a\u5b57\u7b26\u624d\u80fd\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u3002\u4fdd\u8bc1\u4e00\u5b9a\u80fd\u5728\u6709\u9650\u6b21\u6539\u52a8\u5185\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u3002\n\n>$n,q\\in\\left[1,10^5\\right]$\u3002\n\n\u5148\u6765\u8003\u8651\u600e\u4e48\u7b97\u4e00\u4e2a\u62ec\u53f7\u4e32$s$\u81f3\u5c11\u8981\u6539\u53d8\u591a\u5c11\u4e2a\u5b57\u7b26\u624d\u80fd\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u3002~~\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u575a\u4fe1\u7ed3\u8bba\u6bd4\u8f83\u7b80\u5355~~\n\n\u663e\u7136\uff0c$s$\u80fd\u5728\u6709\u9650\u6b21\u6539\u52a8\u5185\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u5f53\u4e14\u4ec5\u5f53$2\\mid |s|$\u3002\u4ee5\u4e0b\u9ed8\u8ba4$2\\mid |s|$\u3002\n\n\u5c06$\\texttt($\u770b\u6210$1$\uff0c$\\texttt)$\u770b\u6210$-1$\u662f\u89e3\u51b3\u62ec\u53f7\u4e32\u5408\u6cd5\u95ee\u9898\u7684\u60ef\u7528\u5957\u8def\u3002\u8bbe$bal(x)=\\begin{cases}1&x=\\texttt(\\\\-1&x=\\texttt)\\end{cases}$\uff0c$Bal_{s,i}=\\sum\\limits_{j=1}^ibal(s_j)$\uff0c\u5219\u62ec\u53f7\u4e32$s$\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53$\\forall i\\in[1,|s|],Bal_{s,i}\\geq0$\u4e14$Bal_{s,|s|}=0$\u3002\n\n\u8003\u8651\u7b97\u51fa$Bal_s$\u6570\u7ec4\u3002\u5148\u5047\u8bbe\u53ea\u9700\u8981$\\forall i\\in[1,|s|],Bal_{s,i}\\geq0$\u5b9e\u73b0\u3002\u5bf9\u4e8e\u6bcf\u4e2a$i$\u4f7f\u5f97$Bal_{s,i}<0$\uff0c\u6211\u4eec\u8981\u5c06$s_i$\u5de6\u8fb9\u82e5\u5e72\u4e2a$\\texttt)$\u6539\u6210$\\texttt($\u4f7f\u5f97$Bal_{s,i}\\geq0$\u3002\u663e\u7136\uff0c\u6539\u4e00\u6b21\u4f1a\u4ee4$Bal_{s,i}=Bal_{s,i}+2$\uff0c\u90a3\u4e48\u6700\u5c11\u9700\u8981\u5c06$s_i$\u5de6\u8fb9$\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil$\u4e2a$\\texttt)$\u6539\u6210$\\texttt($\u3002\u53c8\u56e0\u4e3a\u5982\u679c$\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil<\\max\\limits_{j=1}^{i-1}\\left\\{\\left\\lceil\\dfrac{-Bal_{s,j}}2\\right\\rceil\\right\\}$\u7684\u8bdd\uff0c\u90a3\u4e48\u524d\u9762\u5fc5\u6709\u81f3\u5c11$\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil$\u6b21\u6539\u52a8\uff0c\u5df2\u6ee1\u8db3\u8981\u6c42\uff1b\u5426\u5219\u663e\u7136\u53ef\u4ee5\u627e\u5230\u529e\u6cd5\u53ea\u6539\u524d\u9762\u7684$\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil$\u4e2a\u62ec\u53f7\u4f7f\u5f97\u524d\u9762\u7684\u6240\u6709$Bal$\u503c\u90fd\u975e\u8d1f\u3002\u6240\u4ee5\u82e5\u53ea\u9700\u8981$\\forall i\\in[1,|s|],Bal_{s,i}\\geq0$\uff0c\u90a3\u4e48\u6700\u5c11\u6539\u52a8\u6570\u4e3a$\\max\\limits_{i=1}^{|s|}\\left\\{\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil\\right\\}$\u3002\n\n\u6b64\u65f6\u5df2\u7ecf$\\forall i\\in[1,|s|],Bal_{s,i}\\geq0$\u4e86\u3002\u518d\u52a0\u4e0a$Bal_{s,|s|}=0$\u7684\u6761\u4ef6\u3002\u663e\u7136\u6b64\u65f6$Bal_{s,|s|}\\geq0$\uff0c\u6211\u4eec\u8981\u8003\u8651\u5c06\u82e5\u5e72$\\texttt($\u6539\u6210$\\texttt)$\u4f7f\u5f97$Bal_{s,|s|}=0$\u3002\u663e\u7136\uff0c\u6539\u4e00\u6b21\u4f1a\u4ee4$Bal_{s,|s|}=Bal_{s,|s|}-2$\uff0c\u90a3\u4e48\u6700\u5c11\u9700\u8981\u5c06$\\dfrac{Bal_{s,|s|}}2$\u4e2a$\\texttt($\u6539\u6210$\\texttt)$\u3002\u53c8\u56e0\u4e3a\u5148\u524d$\\texttt)\\to\\texttt($\u7684\u90a3\u4e9b\u6539\u52a8\u662f\u4fdd\u969c$\\forall i\\in[1,|s|],Bal_{s,i}\\geq0$\u7684\u57fa\u7840\uff0c\u80af\u5b9a\u52a8\u4e0d\u5f97\uff0c\u6240\u4ee5\u53ea\u80fd\u53e6\u5916\u6311\u9009$\\dfrac{Bal_{s,|s|}}2$\u4e2a$\\texttt($\u6539\u6210$\\texttt)$\u3002\u4e8e\u662f\u5f97\u51fa\u7ed3\u8bba\uff1a\u62ec\u53f7\u4e32$s$\u81f3\u5c11\u8981\u6539\u53d8$\\max\\limits_{i=1}^{|s|}\\left\\{\\left\\lceil\\dfrac{-Bal_{s,i}}2\\right\\rceil\\right\\}+\\dfrac{Bal_{s,|s|}+2\\max\\limits_{i=1}^{|s|}\\left\\{\\left\\lceil\\frac{-Bal_{s,i}}2\\right\\rceil\\right\\}}2=\\left\\lceil\\dfrac{-\\min\\limits_{i=1}^{|s|}\\{Bal_{s,i}\\}}2\\right\\rceil+\\dfrac{Bal_{s,|s|}+2\\left\\lceil\\frac{-\\min\\limits_{i=1}^{|s|}\\{Bal_{s,i}\\}}2\\right\\rceil}2$\u4e2a\u5b57\u7b26\u624d\u80fd\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4$\\min\\limits_{i=1}^{r-l+1}\\{Bal_{a_{l\\sim r},i}\\}$\u548c$Bal_{a_{l\\sim r},r-l+1}$\u8fd9\u4e24\u4e2a\u503c\u5373\u53ef\u3002\u8003\u8651\u5230\u6709\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u8fd9\u91cc\u4f7f\u7528fhq-Treap\u3002\n\n\u8bbe\u5f53\u524d\u8282\u70b9\u8868\u793a$a_x$\uff0c\u5b50\u6811\u8868\u793a\u533a\u95f4$[l,r]$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5b58\u50a8$v_i=bal(a_x),bal\\_all_i=Bal_{a_{l\\sim r},r-l+1},Mn\\_bal_i=\\min\\limits_{i=1}^{r-l+1}\\{Bal_{a_{l\\sim r},i}\\}$\u3002\u4e3a\u4e86\u5728\u533a\u95f4\u53cd\u8f6c\u64cd\u4f5c\u4e2d$\\mathrm O(1)$\u6253\u61d2\u6807\u8bb0\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5b58\u50a8$mn\\_baL_i$\u3002\u4e3a\u4e86\u5728\u533a\u95f4\u53d6\u53cd\u64cd\u4f5c\u4e2d$\\mathrm O(1)$\u6253\u61d2\u6807\u8bb0\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5b58\u50a8$Mx\\_bal_i,mx\\_baL_i$\u3002\u6b64\u65f6\u4e0a\u4f20\u65f6\u5f88\u5bb9\u6613\u8fbe\u5230$\\mathrm O(1)$\u3002\u6b64\u5916\u8fd8\u9700\u8981\u5b58\u50a8$3$\u79cd\u64cd\u4f5c\u7684\u61d2\u6807\u8bb0\u3002\n\n\u7531\u4e8e\u6709$3$\u79cd\u61d2\u6807\u8bb0\uff0c\u6211\u4eec\u9700\u8981\u5f3a\u884c\u89c4\u5b9a\u4e0b\u4f20\u65f6\u7684\u987a\u5e8f\u3002\u4e0d\u59a8\u89c4\u5b9a\u987a\u5e8f\u4e3a$\\texttt{Replace},\\texttt{Swap},\\texttt{Invert}$\u3002\u6b64\u65f6\u6253\u61d2\u6807\u8bb0\u65f6\u9664\u4e86\u5e94\u8be5\u505a\u7684\u5e38\u89c4\u64cd\u4f5c\u4ee5\u5916\uff0c\u6253$\\texttt{Replace}$\u7684\u61d2\u6807\u8bb0\u65f6\u8981\u5c06\u53e6$2$\u4e2a\u61d2\u6807\u8bb0\u6e05\u7a7a\u3002\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u5730\u65b9\uff1a\u4e0b\u4f20\u61d2\u6807\u8bb0\u65f6\u6709\u4e00\u4e2a\u539f\u5219\uff0c\u5c31\u662f\u53c2\u6570\u4e0d\u80fd\u542b\u6709\u975e\u61d2\u6807\u8bb0\u7684\u5176\u4ed6\u5b58\u50a8\u7684\u503c\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u80fd\u8868\u73b0\u6b64\u8282\u70b9\u7684\u73b0\u72b6\uff0c\u5e76\u4e0d\u80fd\u8868\u73b0\u5b83\u7ecf\u5386\u4e86\u4ec0\u4e48\u3002\u6211\u4e4b\u524d\u76f4\u63a5\u5c06$\\texttt{Replace}$\u7684\u61d2\u6807\u8bb0\u5b9a\u4e49\u4e3a`bool`\uff0c\u7136\u540e\u4e0b\u4f20\u65f6\u7684\u53c2\u6570\u4e3a$v_i$\uff0c\u8fd9\u6837\u7531\u4e8e$\\texttt{Invert}$\u7684\u5b58\u5728\u4f1a\u51fa\u9519~~\uff0c\u5bfc\u81f4\u6211\u76ef\u7740\u7535\u8111\u770b&\u81ea\u95ed\u4e86\u4e00\u665a\u4e0a~~\u3002\u6240\u4ee5\u8981\u5b9a\u4e49\u4e3a`int`\u5f53\u4f5c\u4e0b\u4f20\u65f6\u7684\u53c2\u6570\uff0c$\\texttt{Invert}$\u65f6\u53ea\u6539$v_i$\u4e0d\u6539$\\texttt{Replace}$\u7684\u61d2\u6807\u8bb0\u3002\n\n\u8fd9\u8fd8\u662f\u4e00\u4e2a\u6bd4\u8f83\u6a21\u677f\u7684\u5e73\u8861\u6811\u9898\u5427\u2026\u2026\n\n\uff08\u8fd9\u4e2a\u6bd2\u7624\u5361\u5e38\u9898\u8fd8\u9700\u8981\u5f00O3\u4f18\u5316\u624d\u80fd\u8fc7\u2026\u2026\uff09\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define X first\n#define Y second\nconst int inf=0x3f3f3f3f;\nmt19937 rng(20060617/*\u4fe1\u4ef0\u4f18\u5316*/);\nconst int N=100000;\nint n/*\u62ec\u53f7\u4e32\u957f\u5ea6*/,qu/*\u64cd\u4f5c\u6570*/;\nchar a[N+5];//\u62ec\u53f7\u4e32 \nstruct fhq_treap{//fhq-Treap \n\tint sz/*\u70b9\u6570*/,root/*\u6839*/;\n\tstruct node{unsigned key;int lson,rson,sz,v,bal_all,Mn_bal,mn_baL,Mx_bal,mx_baL,lz_chg/*Replace\u61d2\u6807\u8bb0*/;bool lz_rev/*Swap\u61d2\u6807\u8bb0*/,lz_inv/*Invert\u61d2\u6807\u8bb0*/;}nd[N+1];\n\t#define key(p) nd[p].key\n\t#define lson(p) nd[p].lson\n\t#define rson(p) nd[p].rson\n\t#define sz(p) nd[p].sz\n\t#define v(p) nd[p].v\n\t#define bal_all(p) nd[p].bal_all\n\t#define Mn_bal(p) nd[p].Mn_bal\n\t#define mn_baL(p) nd[p].mn_baL\n\t#define Mx_bal(p) nd[p].Mx_bal\n\t#define mx_baL(p) nd[p].mx_baL\n\t#define lz_chg(p) nd[p].lz_chg\n\t#define lz_rev(p) nd[p].lz_rev\n\t#define lz_inv(p) nd[p].lz_inv\n\tvoid sprup(int p){//\u4e0a\u4f20 \n\t\tsz(p)=sz(lson(p))+1+sz(rson(p));\n\t\tbal_all(p)=bal_all(lson(p))+v(p)+bal_all(rson(p));\n\t\tMn_bal(p)=min(Mn_bal(lson(p)),bal_all(lson(p))+v(p)+min(0,Mn_bal(rson(p))));\n\t\tmn_baL(p)=min(mn_baL(rson(p)),bal_all(rson(p))+v(p)+min(0,mn_baL(lson(p))));\n\t\tMx_bal(p)=max(Mx_bal(lson(p)),bal_all(lson(p))+v(p)+max(0,Mx_bal(rson(p))));\n\t\tmx_baL(p)=max(mx_baL(rson(p)),bal_all(rson(p))+v(p)+max(0,mx_baL(lson(p))));\n\t}\n\tint nwnd(int v){return nd[++sz]=node({rng(),0,0,1,v,v,v,v,v,v,0,false,false}),sz;}//\u65b0\u5efa\u8282\u70b9 \n\tint bld(int l=1,int r=n){//\u5efa\u6811 \n\t\tint mid=l+r>>1,p=nwnd(a[mid]=='('?1:-1);\n\t\tif(l<=mid-1)lson(p)=bld(l,mid-1);\n\t\tif(mid+1<=r)rson(p)=bld(mid+1,r);\n\t\treturn sprup(p),p;\n\t}\n\tvoid init(){//fhq-Treap\u521d\u59cb\u5316 \n\t\tnd[sz=0]=node({0,0,0,0,0,0,inf,inf,-inf,-inf,0,0,0});\n\t\troot=bld();\n\t}\n\tvoid sprdwn_chg(int p,int v){//\u6253Replace\u61d2\u6807\u8bb0 \n\t\tv(p)=lz_chg(p)=v;\n\t\tbal_all(p)=v*sz(p);\n\t\tif(~v)Mn_bal(p)=mn_baL(p)=1,Mx_bal(p)=mx_baL(p)=sz(p);\n\t\telse Mx_bal(p)=mx_baL(p)=-1,Mn_bal(p)=mn_baL(p)=-sz(p);\n\t\tlz_rev(p)=lz_inv(p)=false;\n\t}\n\tvoid sprdwn_rev(int p){//\u6253Swap\u61d2\u6807\u8bb0 \n\t\tswap(lson(p),rson(p));\n\t\tswap(Mn_bal(p),mn_baL(p));\n\t\tswap(Mx_bal(p),mx_baL(p));\n\t\tlz_rev(p)^=1;\n\t}\n\tvoid sprdwn_inv(int p){//\u6253Invert\u61d2\u6807\u8bb0 \n\t\tv(p)=-v(p);\n\t\tbal_all(p)=-bal_all(p);\n\t\tswap(Mn_bal(p),Mx_bal(p));Mn_bal(p)=-Mn_bal(p);Mx_bal(p)=-Mx_bal(p);\n\t\tswap(mn_baL(p),mx_baL(p));mn_baL(p)=-mn_baL(p);mx_baL(p)=-mx_baL(p);\n\t\tlz_inv(p)^=1;\n\t}\n\tvoid sprdwn(int p){//\u4e0b\u4f20 \n\t\tif(lz_chg(p)){\n\t\t\tif(lson(p))sprdwn_chg(lson(p),lz_chg(p));\n\t\t\tif(rson(p))sprdwn_chg(rson(p),lz_chg(p));\n\t\t\tlz_chg(p)=0;\n\t\t}\n\t\tif(lz_rev(p)){\n\t\t\tif(lson(p))sprdwn_rev(lson(p));\n\t\t\tif(rson(p))sprdwn_rev(rson(p));\n\t\t\tlz_rev(p)=false;\n\t\t}\n\t\tif(lz_inv(p)){\n\t\t\tif(lson(p))sprdwn_inv(lson(p));\n\t\t\tif(rson(p))sprdwn_inv(rson(p));\n\t\t\tlz_inv(p)=false;\n\t\t}\n\t}\n\tpair<int,int> split(int x,int p=-1){~p||(p=root);\n\t\tif(!x)return mp(0,p);\n\t\tpair<int,int> sp;\n\t\tsprdwn(p);\n\t\tif(x<=sz(lson(p)))return sp=split(x,lson(p)),lson(p)=sp.Y,sprup(p),mp(sp.X,p);\n\t\treturn sp=split(x-sz(lson(p))-1,rson(p)),rson(p)=sp.X,sprup(p),mp(p,sp.Y);\n\t}\n\tint mrg(int p,int q){\n\t\tif(!p||!q)return p|q;\n\t\tsprdwn(p);sprdwn(q);\n\t\tif(key(p)<key(q))return rson(p)=mrg(rson(p),q),sprup(p),p;\n\t\treturn lson(q)=mrg(p,lson(q)),sprup(q),q;\n\t}\n\tvoid chg(int l,int r,char v){//\u533a\u95f4\u8d4b\u503c \n\t\tpair<int,int> sp=split(l-1),sp0=split(r-l+1,sp.Y);\n\t\tsprdwn_chg(sp0.X,v=='('?1:-1);\n\t\troot=mrg(mrg(sp.X,sp0.X),sp0.Y);\n\t}\n\tvoid rev(int l,int r){//\u533a\u95f4\u7ffb\u8f6c \n\t\tpair<int,int> sp=split(l-1),sp0=split(r-l+1,sp.Y);\n\t\tsprdwn_rev(sp0.X);\n\t\troot=mrg(mrg(sp.X,sp0.X),sp0.Y);\n\t}\n\tvoid inv(int l,int r){//\u533a\u95f4\u53d6\u53cd \n\t\tpair<int,int> sp=split(l-1),sp0=split(r-l+1,sp.Y);\n\t\tsprdwn_inv(sp0.X);\n\t\troot=mrg(mrg(sp.X,sp0.X),sp0.Y);\n\t}\n\tint least(int l,int r){//\u67e5\u8be2\u64cd\u4f5c \n\t\tpair<int,int> sp=split(l-1),sp0=split(r-l+1,sp.Y);\n\t\tint tmp1=max(0,(-Mn_bal(sp0.X)+1)/2),tmp2=bal_all(sp0.X);\n//\t\tcout<<Mn_bal(sp0.X)<<\" \"<<bal_all(sp0.X)<<\"\\n\";\n\t\treturn root=mrg(mrg(sp.X,sp0.X),sp0.Y),tmp1+(tmp2+2*tmp1)/2;\n\t}\n\tvoid dfs(int p=-1)/*\u8c03\u8bd5\u7528*/{~p||(p=root);\n\t\tif(!p)return;\n\t\tsprdwn(p);\n\t\tdfs(lson(p));\n//\t\tprintf(\"node#%d:lson=%d rson=%d v=%d all=%d Mn=%d mn=%d Mx=%d mx=%d\\n\",p,lson(p),rson(p),v(p),bal_all(p),Mn_bal(p),mn_baL(p),Mx_bal(p),mx_baL(p));\n//\t\tputchar(~v(p)?'(':')');\n\t\tdfs(rson(p));\n\t}\n}trp;\nint main(){\n\tcin>>n>>qu>>a+1;\n\ttrp.init();//fhq-Treap\u521d\u59cb\u5316 \n\twhile(qu--){\n\t\tstring tp;int x,y;char z;\n\t\tcin>>tp>>x>>y;\n\t\tif(tp==\"Replace\")cin>>z,trp.chg(x,y,z);\n\t\telse if(tp==\"Swap\")trp.rev(x,y);\n\t\telse if(tp==\"Invert\")trp.inv(x,y);\n\t\telse cout<<trp.least(x,y)<<\"\\n\";\n//\t\ttrp.dfs();//puts(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1587472955,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u6d1b\u8c37 P3215 - \u62ec\u53f7\u4fee\u590d"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3215)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/d-a-n-n-y-1-0-1/solution-p3215)\n\n#### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ef4\u62a4\u4e00\u6bb5\u62ec\u53f7\u5e8f\u5217\uff0c\u8981\u6c42\u652f\u6301\uff1a\n\n- \u533a\u95f4\u8d4b\u503c\n\n- \u533a\u95f4\u7ffb\u8f6c\n\n- \u533a\u95f4\u53d6\u53cd\n\n- \u67e5\u8be2\u533a\u95f4\u8981\u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u7684\u6700\u5c11\u6b21\u6570\n\n#### \u5927\u81f4\u601d\u8def\uff1a\n\n\u660e\u663e\u7684 `FHQ Treap`\u3002\n\n\u524d\u4e24\u79cd\u64cd\u4f5c\u662f\u57fa\u672c\u64cd\u4f5c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u5148\u8003\u8651\u67e5\u8be2\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e32\u4e0d\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5982 $()))((())()$\uff0c\u5c06\u5408\u6cd5\u7684\u90e8\u5206\u6d88\u6389\u5f97 $))($\uff0c\u53d1\u73b0\u4e00\u5b9a\u662f $\\underbrace{)))\\dots)}_{k\\text{\u4e2a\u53f3\u62ec\u53f7}}\\underbrace{(((\\dots(}_{\\kern0.5eml\\text{\u4e2a\u5de6\u62ec\u53f7}}$ \u8fd9\u6837\u7684\u5f62\u5f0f\u3002\n\n\u4e8e\u662f\uff0c\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\uff0c\u8bb0 `(` \u4e3a $-1$\uff0c`)` \u4e3a $1$\u3002\n\n\u8bb0\u5f55\u8f6c\u6362\u540e\u7684\u6570\u7ec4\u7684\u524d\u7f00\u6700\u5927\u503c\uff08\u8bb0\u4e3a $pmax$\uff09\u548c\u540e\u7f00\u6700\u5c0f\u503c\uff08\u8bb0\u4e3a $smin$\uff09\uff0c\u90a3\u4e48\u6700\u540e\u4e0d\u5408\u6cd5\u7684\u5e8f\u5217\u5c31\u662f $pmax$ \u4e2a\u53f3\u62ec\u53f7\u548c $smin$ \u4e2a\u5de6\u62ec\u53f7\uff0c\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u5c31\u4e3a $\\bigg\\lceil\\dfrac{pmax}{2}\\bigg\\rceil+\\left\\lceil-\\dfrac{smin}{2}\\right\\rceil$\u3002\n\n\u518d\u6765\u8003\u8651\u7b2c\u4e09\u4e2a\u4fee\u6539\u64cd\u4f5c\uff1a\n\n\u5c06\u533a\u95f4\u53d6\u53cd\u540e\uff0c\u6240\u6709\u7684 $1$ \u90fd\u53d8\u6210 $-1$\uff0c\u6240\u6709\u7684 $-1$ \u90fd\u53d8\u6210 $1$\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u53d8\u6210\u76f8\u53cd\u6570\u3002\u56e0\u6b64\uff0c\u8fdb\u884c\u4ee5\u4e0b\u4fee\u6539\uff1a\n\n- \u5c06\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\u53d8\u4e3a\u5b83\u7684\u76f8\u53cd\u6570\n\n- \u5c06\u5f53\u524d\u8282\u70b9\u7684\u524d\u3001\u540e\u7f00\u6700\u5927\u6700\u5c0f\u503c\u53d8\u4e3a\u5b83\u7684\u76f8\u53cd\u6570\n\n- \u5c06\u5f53\u524d\u8282\u70b9\u7684\u8d4b\u503c\u61d2\u6807\u8bb0\u53d8\u4e3a\u5b83\u7684\u76f8\u53cd\u6570\n\n- \u4ea4\u6362\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n\n\u8fd8\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\u3002\n\n\u6700\u540e\uff0c\u8fd8\u6709\u4e00\u70b9\u8981\u6ce8\u610f\uff1a\u56e0\u4e3a\u6709\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u9664\u4e86\u524d\u7f00\u6700\u5927\u503c\u548c\u540e\u7f00\u6700\u5c0f\u503c\u5916\uff0c\u8fd8\u8981\u7ef4\u62a4\u524d\u7f00\u6700\u5c0f\u503c\u548c\u540e\u7f00\u6700\u5927\u503c\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u5566~",
        "postTime": 1648379869,
        "uid": 557958,
        "name": "danny101",
        "ccfLevel": 0,
        "title": "P3215\u9898\u89e3"
    },
    {
        "content": "ODT\u3002  \n%%% zqh \u5927\u4ed9\uff0c\u672c\u6765\u90fd\u60f3\u786c\u8279 fhq \u4e86\uff0c\u540e\u6765\u624d\u53d1\u73b0\u5c45\u7136\u53ef\u4ee5\u7528 ODT\uff0c\u800c\u4e14\u8d3c\u597d\u5199\u2026\u2026  \n\u9010\u4e2a\u64cd\u4f5c\u5206\u6790\u4e00\u4e0b\n - `Replace` \u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u5e73\uff0c\u76f4\u63a5\u63a8\u5c31\u597d\u4e86\u3002\n - `Swap` \u6bd4\u8f83\u70e6\uff0c\u6211\u662f\u628a\u90a3\u4e00\u6bb5\u7684\u8fed\u4ee3\u5668\u91cc\u7684\u5143\u7d20\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u7136\u540e\u4fee\u6539\u5b8c\u518d\u63d2\u5165\u56de\u53bb\uff0c\u4fee\u6539\u7684\u65b9\u5f0f\u6bd4\u8f83\u66b4\u529b\uff0c\u5c31\u662f\u7528\u4e00\u4e2a $\\text{pos}$ \u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u7684\u7ed3\u5c3e\u4f4d\u7f6e\uff0c\u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\u6570\u7ec4\uff0c\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u7684 $r$ \u5c31\u662f $\\text{pos}$\uff0c$l$ \u5c31\u662f $\\text{pos}-(r-l+1)+1$\uff0c\u7136\u540e\u628a $\\text{pos}$ \u4fee\u6539\u4e3a $l-1$\uff0c\u8fd9\u6837\u6328\u4e2a\u505a\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\n - `Invert` \u53ef\u4ee5\u5927\u529b `Split` \u4e00\u4e0b\uff0c\u7136\u540e\u76f4\u63a5\u6328\u4e2a\u53d6\u53cd\u5c31\u53ef\u4ee5\u4e86\u3002\n - `Query` \u4e5f\u6bd4\u8f83\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 `(` \u89c6\u4f5c `1`\uff0c`)` \u89c6\u4f5c `-1`\uff0c\u6c42\u4e00\u624b\u524d\u7f00\u548c\uff0c\u5982\u679c $\\text{sum}$ \u5c0f\u4e8e $0$\uff0c\u8bf4\u660e\u524d\u9762 `)` \u591a\uff0c\u9700\u8981\u4fee\u6539 $\\lceil\\frac{\\text{sum}}{2}\\rceil$ \u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u52a0\u5230\u7b54\u6848\u91cc\uff0c\u7136\u540e\u4fee\u6539\u4e00\u4e0b $\\text{sum}$\uff0c\u6539\u6210 $\\text{sum}-\\lfloor\\frac{\\text{sum}}{2}\\rfloor$\uff0c\u7ee7\u7eed\u5f80\u540e\u505a\u3002\u6574\u4e2a\u505a\u5b8c\u4e4b\u540e\u5982\u679c $\\text{sum}\\not=0$ \u518d\u628a $\\lfloor \\frac{|\\text{sum}|}{2}\\rfloor$ \u8bb0\u5f55\u5230\u7b54\u6848\u91cc\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define reg register\n#define inl inline\n#define iter set<Node>::iterator \nusing namespace std;\nstruct Node\n{\n\tint l,r;\n\tmutable int val;// 1 ( , -1 )\n\tbool operator < (const Node &x) const\n\t{\n\t\treturn l<x.l;\n\t}\n}a[MAXN],t[MAXN];\nint n,Q;\nchar ch[MAXN];\nset<Node> s;\ninl int T(reg char x)\n{\n\treturn x=='('?1:-1;\n}\ninl iter Split(reg int pos)\n{\n\treg iter it=s.lower_bound((Node){pos,pos,-1});\n\tif(it!=s.end() && it->l==pos) return it;\n\tit--;\n\treg Node x=*it;\n\ts.erase(it);\n\ts.insert((Node){x.l,pos-1,x.val});\n\treturn s.insert((Node){pos,x.r,x.val}).first;\n}\ninl void Assign(reg int l,reg int r,reg int val)\n{\n\treg iter R=Split(r+1),L=Split(l);\n\ts.erase(L,R);\n\ts.insert((Node){l,r,val});\n}\ninl void Reverse(reg int l,reg int r)\n{\n\treg int tot=0;\n\treg iter R=Split(r+1),L=Split(l);\n\tfor(reg iter it=L;it!=R;it++) a[++tot]=(*it);\n\ts.erase(L,R);\n\treg int pos=a[tot].r;\n\tfor(reg int i=1;i<=tot;i++)\n\t{\n\t\tt[i].val=a[i].val;\n\t\tt[i].r=pos;\n\t\tt[i].l=pos-(a[i].r-a[i].l+1)+1;\n\t\tpos-=(a[i].r-a[i].l+1);\n\t}\n\tfor(reg int i=1;i<=tot;i++) s.insert(t[i]);\n}\ninl void Modify(reg int l,reg int r)\n{\n\treg iter R=Split(r+1),L=Split(l);\n\tfor(reg iter it=L;it!=R;it++)\n\t{\n\t\tif(it->val==-1) it->val=1;\n\t\telse if(it->val==1) it->val=-1;\n\t}\n}\ninl int Query(reg int l,reg int r)\n{\n\treg int sum=0,res=0;\n\treg iter R=Split(r+1),L=Split(l);\n\tfor(reg iter it=L;it!=R;it++)\n\t{\n\t\tsum+=(it->r-it->l+1)*it->val;\n\t\tif(sum<0)\n\t\t{\n\t\t\tres+=-sum/2;\n\t\t\tif((-sum)&1)\n\t\t\t{\n\t\t\t\tsum=1;\n\t\t\t\tres++;\n\t\t\t}\n\t\t\telse sum=0;\n\t\t}\n\t}\n\tres+=abs(sum)/2;\n\treturn res;\n}\ninl void Out()\n{\n\tputs(\"   start : \");\n\treg iter R=Split(n+1),L=Split(1);\n\tfor(reg iter it=L;it!=R;it++)\n\t{\n\t\tfor(reg int i=it->l;i<=it->r;i++) printf(\"%c\",it->val==1?'(':')');\n\t}\n\tputs(\"\");\n\tputs(\"end.\");\n\tputs(\"\");\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&Q);\n\tscanf(\"%s\",ch+1);\n\treg int pos=1;\n\treg char now=ch[1];\n\tfor(reg int i=2;i<=n;i++)\n\t{\n\t\tif(ch[i]!=now)\n\t\t{\n\t\t\ts.insert((Node){pos,i-1,T(now)});\n\t\t\tnow=ch[i];\n\t\t\tpos=i;\n\t\t}\n\t}\n\ts.insert((Node){pos,n,T(now)});\n\twhile(Q--)\n\t{\n\t\treg string opt;\n\t\treg int x,y;\n\t\treg char z;\n\t\tcin>>opt;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tif(opt==\"Replace\")\n\t\t{\n\t\t\tcin>>z;\n\t\t\tAssign(x,y,T(z));\n\t\t}\n\t\telse if(opt==\"Swap\") Reverse(x,y);\n\t\telse if(opt==\"Invert\") Modify(x,y);\n\t\telse if(opt==\"Query\") printf(\"%d\\n\",Query(x,y));\n//\t\tif(opt!=\"Query\") Out();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1568339425,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d /  [JSOI2011]\u62ec\u53f7\u5e8f\u5217\u3011"
    },
    {
        "content": "lxl \u795e\u4ed9\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u5230\u6211\u4eec\u4e00\u4e2a\u5de6\u62ec\u53f7\u548c\u4e00\u4e2a\u53f3\u62ec\u53f7\u662f\u53ef\u4ee5\u62b5\u6d88\u7684\uff0c\u4f8b\u5982\uff1a\n\n```((()((``` \u62b5\u6d88\u540e\u4f1a\u53d8\u4e3a ```(((((```\n\n```)))()(((``` \u62b5\u6d88\u540e\u4f1a\u53d8\u4e3a ```)))(((```\n\n\u5bb9\u6613\u53d1\u73b0\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u53f3\u62ec\u53f7\u52a0\u4e0a\u4e00\u6bb5\u8fde\u7eed\u7684\u5de6\u62ec\u53f7\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e0b\u53f3\u62ec\u53f7\u548c\u5de6\u62ec\u53f7\u7684\u4e2a\u6570\u3002\n\n\u67e5\u8be2\u5c31\u662f\u5de6\u8fb9\u4e00\u6bb5\u62ec\u53f7\u7684\u4e2a\u6570\u9664\u4ee5\u4e8c\uff08\u5982\u679c\u662f\u5947\u6570\u5c31\u8981\u518d\u52a0\u4e00\uff09\uff0c\u53f3\u8fb9\u540c\u7406\u3002\n\n\u770b\u4e00\u770b\u64cd\u4f5c\n\n```Replace``` \u64cd\u4f5c\u663e\u7136\u53ef\u4ee5 ```FHQ-Treap``` \u53d6\u51fa\u8fd9\u4e00\u6bb5\u7136\u540e\u6253\u6807\u8bb0\u5373\u53ef\u3002\n\n```Swap``` \u64cd\u4f5c\u663e\u7136\u4e5f\u662f\u53ef\u4ee5\u53d6\u51fa\u8fd9\u4e00\u6bb5\u6253\u6807\u8bb0\u65cb\u8f6c\u3002\n\n```Invert``` \u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u79cd\u60c5\u51b5\u4e0b\uff08\u53d6\u53cd\u524d\u548c\u53d6\u53cd\u540e\uff09\u7684\u72b6\u6001\u90fd\u5b58\u4e00\u4e0b\uff0c\u5230\u65f6\u5019\u76f4\u63a5\u4ea4\u6362\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6807\u8bb0\u4e0b\u653e\u987a\u5e8f\uff0c\u5148\u53d6\u53cd\u518d\u65cb\u8f6c\u518d\u8986\u76d6\u3002\n\n\u5176\u4ed6\u90fd\u662f\u5e73\u8861\u6811\u6a21\u677f\u3002",
        "postTime": 1680102216,
        "uid": 377440,
        "name": "Y2y7m",
        "ccfLevel": 6,
        "title": "P3215\u9898\u89e3"
    },
    {
        "content": "~~\u8fd8\u7b97\u96be\u5199\u7684~~\u6570\u636e\u7ed3\u6784\u9898\n\n\u524d\u9762\u4e09\u4e2a\u64cd\u4f5c\u90fd\u6bd4\u8f83\u5e38\u89c4\uff0c\u81ea\u7136\u662f\u5148\u770b\u7b2c\u56db\u4e2a\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u62ec\u53f7\u4e32\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u76f8\u5339\u914d\u7684\u62ec\u53f7\u90fd\u5220\u9664\uff0c\u5269\u4e0b\u7684\u662f\u5f62\u5982 \"))))))$\\cdots$)))((($\\cdots$(((\" \u7684\u4e32\uff0c\u89c2\u5bdf\u53ef\u77e5\uff0c\u6700\u5c0f\u4fee\u6539\u6b21\u6570\u5e94\u8be5\u5c31\u662f\u8fd9\u4e2a\u4e32\u7684\u957f\u5ea6\u9664\u4ee5 $2$\uff0c\u82e5\u4e24\u79cd\u62ec\u53f7\u7684\u957f\u5ea6\u90fd\u662f\u5947\u6570\uff0c\u4fee\u6539\u6b21\u6570\u662f\u4e32\u957f\u9664\u4ee5 $2$ \u52a0 $1$\u3002\n\n\u8fd9\u4e2a\u4e32\u7684\u957f\u5ea6\u600e\u4e48\u6c42\u5462\uff0c\u8003\u8651\u5230\u76f8\u5339\u914d\u7684\u62ec\u53f7\u4f1a\u76f8\u4e92\u62b5\u6d88\uff0c\u53ef\u4ee5\u7ed9\u4e24\u4e2a\u62ec\u53f7\u8d4b\u4e00\u4e2a\u76f8\u53cd\u6570\u7684\u503c\uff0c\u6211\u8d4b\u7684\u662f \"(\" \u4e3a $-1$\uff0c\")\" \u4e3a $1$\uff0c\u90a3\u4e48\u53d1\u73b0\u524d\u9762\u7684\u53f3\u62ec\u53f7\u4e2a\u6570\u5c31\u662f\u6700\u5927\u524d\u7f00\uff0c\u540e\u9762\u7684\u5de6\u62ec\u53f7\u4e2a\u6570\u5c31\u662f\u6700\u5c0f\u540e\u7f00\u7684\u76f8\u53cd\u6570\u3002\n\n\u7136\u540e\u53d1\u73b0\u6211\u4eec\u9700\u8981\u5728\u5e73\u8861\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u524d\u7f00\u548c\u6700\u5c0f\u540e\u7f00\uff0c\u7531\u4e8e\u5e26\u7ffb\u8f6c\uff0c\u6211\u8fd8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6700\u5c0f\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\uff0c\u8fd9\u4e2a\u6700\u5927/\u6700\u5c0f\u524d\u7f00/\u540e\u7f00\u53ef\u4ee5\u91c7\u7528\u6700\u5927\u5b50\u6bb5\u548c\u7684\u7ef4\u62a4\u65b9\u6cd5\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u548c\u3002\n\n\u7136\u540e\u5c31\u662f\u7ef4\u62a4\u8fd9\u4e00\u5806\u503c\u548c\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u7684\u5177\u4f53\u5b9e\u73b0\u4e86\uff0c\u7531\u4e8e\u8986\u76d6\u662f\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\uff0c\u6253\u8986\u76d6\u6807\u8bb0\u7684\u65f6\u5019\u9700\u8981\u6e05\u9664\u6389\u7ffb\u8f6c\u548c\u53d6\u53cd\u7684\u6807\u8bb0\uff0c\u540c\u7406\uff0c\u4e0b\u4f20\u6807\u8bb0\u7684\u65f6\u5019\u8981\u5148\u4e0b\u4f20\u8986\u76d6\u7684\u6807\u8bb0\uff0c\u7531\u4e8e\u7ffb\u8f6c\u540e\u53d6\u53cd\u548c\u53d6\u53cd\u540e\u7ffb\u8f6c\u6ca1\u6709\u533a\u522b\uff0c\u5148\u4e0b\u4f20\u54ea\u4e2a\u90fd\u884c\u3002\n\n\u8986\u76d6\u7684\u65f6\u5019\u5b50\u6811\u6743\u503c\u548c\u4ee5\u53ca\u8282\u70b9\u6743\u503c\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\uff0c\u6700\u5927/\u6700\u5c0f\u524d\u7f00/\u540e\u7f00\u9700\u8981\u6839\u636e\u8986\u76d6\u7684\u6743\u503c\u7684\u6b63\u8d1f\u6765\u7ef4\u62a4\u3002\n\n\u7ffb\u8f6c\u7684\u65f6\u5019\u65e2\u8981\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u8fd8\u8981\u7ef4\u62a4\u5de6\u53f3\u513f\u5b50\u7684\u90a3\u56db\u4e2a\u503c\uff0c\u524d\u7f00\u6700\u5927\u503c\u548c\u540e\u7f00\u6700\u5927\u503c\u4e92\u6362\uff0c\u6700\u5c0f\u503c\u540c\u7406\u3002\n\n\u53d6\u53cd\u7684\u65f6\u5019\u76f4\u63a5\u5c06\u8282\u70b9\u6743\u503c\u4ee5\u53ca\u5b50\u6811\u548c\u53d6\u53cd\uff0c\u7136\u540e\u6700\u5927\u524d\u7f00\u4e0e\u6700\u5c0f\u524d\u7f00\u4ea4\u6362\u5e76\u90fd\u53d6\u53cd\uff0c\u540e\u7f00\u540c\u7406\u3002\n\n\u7136\u540e\u5c31\u662f\u4e00\u5806\u4e71\u4e03\u516b\u7cdf\u7684\u7ec6\u8282\uff0c\u6211\u7528\u7684\u662f fhq treap ~~\u8dd1\u7684\u975e\u5e38\u6162~~\uff0c\u6709\u4e00\u4e9b\u5730\u65b9\u53ef\u80fd\u6bd4\u8f83\u968f\u610f\uff0c\u5c24\u5176\u662f\u4e0b\u4f20\u6807\u8bb0\u3002\n\n\u4ee3\u7801\u770b\u8d77\u6765\u6bd4\u8f83\u957f\uff0c\u5b9e\u9645\u4e0a\u5927\u90e8\u5206\u662f\u590d\u5236\u7684\uff08\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<queue>\n#include<stack>\nusing namespace std;\nint n,m;\nint root;\nstruct node\n{\n\tint ls,rs,pmax,pmin,smax,smin,val,rnd,sum,siz;\n\tint retag;\n\tbool swtag;\n\tbool intag;\n}tre[100005];\nint cnt;\nint newnode(int w)\n{\n\tcnt++;\n\ttre[cnt].ls=tre[cnt].rs=0;\n\ttre[cnt].rnd=rand();\n\ttre[cnt].intag=tre[cnt].swtag=false;\n\ttre[cnt].val=w;\n\ttre[cnt].pmax=tre[cnt].smax=(w>0?w:0);\n\ttre[cnt].smin=tre[cnt].pmin=(w>0?0:w);\n\ttre[cnt].retag=0;\n\ttre[cnt].sum=w;\n\ttre[cnt].siz=1;\n\treturn cnt;\n}\nvoid pushup(int x)\n{\n\tint ls=tre[x].ls,rs=tre[x].rs;\n\ttre[x].pmax=max(tre[ls].pmax,tre[ls].sum+tre[x].val+tre[rs].pmax);\n\ttre[x].pmin=min(tre[ls].pmin,tre[ls].sum+tre[x].val+tre[rs].pmin);\n\ttre[x].smax=max(tre[rs].smax,tre[rs].sum+tre[x].val+tre[ls].smax);\n\ttre[x].smin=min(tre[rs].smin,tre[rs].sum+tre[x].val+tre[ls].smin);\n\ttre[x].siz=tre[ls].siz+tre[rs].siz+1;\n    tre[x].sum=tre[ls].sum+tre[rs].sum+tre[x].val;\n}\nvoid pushdown(int x)\n{\n\tint ls=tre[x].ls,rs=tre[x].rs;\n\tif(tre[x].retag!=0)\n\t{\n\t\ttre[ls].intag=tre[rs].intag=false;\n\t\ttre[ls].swtag=tre[rs].swtag=false;\n\t\ttre[ls].retag=tre[rs].retag=tre[x].retag;\n\t\ttre[ls].sum=tre[x].retag*tre[ls].siz;\n\t\ttre[rs].sum=tre[x].retag*tre[rs].siz;\n\t\ttre[ls].val=tre[rs].val=tre[x].retag;\n\t\ttre[ls].pmax=tre[ls].smax=(tre[ls].retag>0?tre[ls].retag*tre[ls].siz:0);\n\t\ttre[rs].pmax=tre[rs].smax=(tre[rs].retag>0?tre[rs].retag*tre[rs].siz:0);\n\t\ttre[ls].pmin=tre[ls].smin=(tre[ls].retag>0?0:tre[ls].retag*tre[ls].siz);\n\t\ttre[rs].pmin=tre[rs].smin=(tre[rs].retag>0?0:tre[rs].retag*tre[rs].siz);\n\t\ttre[x].retag=0;\n\t}\n\tif(tre[x].swtag)\n\t{\n\t\ttre[ls].swtag^=tre[x].swtag;\n\t\ttre[rs].swtag^=tre[x].swtag;\n\t\tswap(tre[ls].pmax,tre[ls].smax);\n\t\tswap(tre[ls].pmin,tre[ls].smin);\n\t\tswap(tre[x].ls,tre[x].rs);\n\t\tswap(ls,rs);\n\t\tswap(tre[ls].pmax,tre[ls].smax);\n\t\tswap(tre[ls].pmin,tre[ls].smin);\n\t\ttre[x].swtag=false;\n\t}\n\tif(tre[x].intag)\n\t{\n\t\ttre[ls].intag^=tre[x].intag;\n\t\ttre[rs].intag^=tre[x].intag;\n\t\ttre[ls].sum=-tre[ls].sum;\n\t\ttre[rs].sum=-tre[rs].sum;\n\t\ttre[ls].val=-tre[ls].val;\n\t\ttre[rs].val=-tre[rs].val;\n\t\tswap(tre[ls].pmax,tre[ls].pmin);\n\t\ttre[ls].pmax=-tre[ls].pmax;\n\t\ttre[ls].pmin=-tre[ls].pmin;\n\t\tswap(tre[ls].smax,tre[ls].smin);\n\t\ttre[ls].smax=-tre[ls].smax;\n\t\ttre[ls].smin=-tre[ls].smin;\n\t\tswap(tre[rs].pmax,tre[rs].pmin);\n\t\ttre[rs].pmax=-tre[rs].pmax;\n\t\ttre[rs].pmin=-tre[rs].pmin;\n\t\tswap(tre[rs].smax,tre[rs].smin);\n\t\ttre[rs].smax=-tre[rs].smax;\n\t\ttre[rs].smin=-tre[rs].smin;\n\t\ttre[x].intag=false;\n\t}\n}\nint merge(int x,int y)\n{\n\tif(!x||!y) return x^y;\n\tint res=0;\n\tif(tre[x].rnd<tre[y].rnd)\n\t{\n\t\tres=x;\n\t\tpushdown(res);\n\t\ttre[x].rs=merge(tre[x].rs,y);\n\t}\n\telse\n\t{\n\t\tres=y;\n\t\tpushdown(res);\n\t\ttre[y].ls=merge(x,tre[y].ls);\n\t}\n\tpushup(res);\n\treturn res;\n}\nvoid splitrk(int rt,int &lrt,int &rrt,int k)\n{\n\tif(rt==0)\n\t{\n\t\tlrt=rrt=0;return;\n\t}\n\tpushdown(rt);\n\tint qwq=tre[tre[rt].ls].siz+1;\n\tif(qwq<=k)\n\t{\n\t\tlrt=rt;\n\t\tsplitrk(tre[rt].rs,tre[lrt].rs,rrt,k-qwq); \n\t}\n\telse\n\t{\n\t\trrt=rt;\n\t\tsplitrk(tre[rt].ls,lrt,tre[rrt].ls,k);\n\t}\n\tpushup(rt);\n}\nvoid ins(int w)\n{\n\troot=merge(root,newnode(w));\n}\nint main()\n{\n\tsrand(114514);\n\tscanf(\"%d%d\",&n,&m);\n\tstring tmp;\n\tcin>>tmp;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tins((tmp[i-1]==')'?1:-1));\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tstring opt;\n\t\tint x,y;\n\t\tcin>>opt;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint rx,ry,rz;\n\t\tsplitrk(root,rx,rz,y);\n\t\tsplitrk(rx,rx,ry,x-1);\n\t\tif(opt[0]=='R')\n\t\t{\n\t\t\tstring qwq;\n\t\t\tcin>>qwq;\n\t\t\tint val=(qwq[0]==')'?1:-1);\n\t\t\ttre[ry].intag=false;\n\t\t\ttre[ry].swtag=false;\n\t\t\ttre[ry].retag=val;\n\t\t\ttre[ry].sum=val*tre[ry].siz;\n\t\t\ttre[ry].val=val;\n\t\t\ttre[ry].pmax=tre[ry].smax=(tre[ry].retag>0?tre[ry].retag*tre[ry].siz:0);\n\t\t\ttre[ry].pmin=tre[ry].smin=(tre[ry].retag>0?0:tre[ry].retag*tre[ry].siz);\n\t\t}\n\t\tif(opt[0]=='I')\n\t\t{ \n\t\t\ttre[ry].intag^=1;\n\t\t\ttre[ry].sum=-tre[ry].sum;\n\t\t\ttre[ry].val=-tre[ry].val;\n\t\t\tswap(tre[ry].pmax,tre[ry].pmin);\n\t\t\ttre[ry].pmax=-tre[ry].pmax;\n\t\t\ttre[ry].pmin=-tre[ry].pmin;\n\t\t\tswap(tre[ry].smax,tre[ry].smin);\n\t\t\ttre[ry].smax=-tre[ry].smax;\n\t\t\ttre[ry].smin=-tre[ry].smin;\n\t\t}\n\t\tif(opt[0]=='S')\n\t\t{\n\t\t\ttre[ry].swtag^=1;\n\t\t\tswap(tre[ry].pmax,tre[ry].smax);\n\t\t\tswap(tre[ry].pmin,tre[ry].smin);\n\t\t}\n\t\tif(opt[0]=='Q')\n\t\t{\n\t\t\tprintf(\"%d\\n\",(tre[ry].pmax+1)/2+(-tre[ry].smin+1)/2);\n\t\t}\n\t\troot=merge(rx,merge(ry,rz));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1622259737,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "P3215 \u62ec\u53f7\u4fee\u590d \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3215)\n\n> \u9898\u610f\uff1a\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u4f60\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n> 1. \u5c06 $[l,r]$ \u4e2d\u6240\u6709\u62ec\u53f7\u53d8\u4e3a $c$\n> 2. \u5c06 $[l,r]$ \u533a\u95f4\u7ffb\u8f6c\n> 3. \u5c06 $[l,r]$ \u533a\u95f4\u4e2d\u5de6\u62ec\u53f7\u53d8\u53f3\u62ec\u53f7\uff0c\u53f3\u62ec\u53f7\u53d8\u5de6\u62ec\u53f7\n> 4. \u6c42\u6700\u5c11\u9700\u8981\u6539\u53d8\u591a\u5c11\u4e2a\u62ec\u53f7\u624d\u80fd\u4f7f\u5f97 $[l,r]$ \u53d8\u6210\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\uff0c\u4fdd\u8bc1\u533a\u95f4\u957f\u5ea6\u4e3a\u5076\u6570\u3002\n> $1 \\leq n \\leq 10^5$\n\n\u57fa\u7840\u7684 fhq-treap \u7684\u9898\u76ee\uff0c\u4e3b\u8981\u7ec3\u4e0b\u653e\u6807\u8bb0\u7684\u6280\u5de7\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u5c06\u8981\u6c42\u7684\u4e1c\u897f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5f0f\u5b50\u3002\u4f8b\u5982\u62ec\u53f7\u5e8f\u5217 $(())))))((()$\uff0c\u5c06\u5de6\u53f3\u62ec\u53f7\u62b5\u6d88\u6389\u4e4b\u540e\u5c31\u662f $))))(($\uff0c\u53d1\u73b0\u62b5\u6d88\u5b8c\u4e86\u4e4b\u540e\u53d8\u6210\u4e86\u4e00\u6bb5\u5de6\u62ec\u53f7\u8ddf\u4e00\u6bb5\u53f3\u62ec\u53f7\u3002\n\n\u6211\u4eec\u8bb0 $(=-1$\uff0c$)=1$\uff0c\u5047\u8bbe\u524d\u7f00\u6700\u5927\u503c\u4e3a $mx$\uff0c\u540e\u7f00\u6700\u5c0f\u503c\u4e3a $mn$\uff0c\u90a3\u4e48\u6700\u540e\u4f1a\u5269\u4e0b $mx$ \u4e2a\u53f3\u62ec\u53f7\u548c $-mn$ \u4e2a\u5de6\u62ec\u53f7\uff0c\u6700\u5c11\u9700\u8981\u9700\u8981 $\\lceil \\frac{mx}{2} \\rceil+\\lceil -\\frac{mn}{2} \\rceil$ \u6b21\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u5efa\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4ee5\u4e0b\u516d\u4e2a\u503c\uff1a$sz$ \u5b50\u6811\u5927\u5c0f\uff0c$sum$ \u5b50\u6811\u6743\u503c\u548c\uff0c$prmn,prmx,sfmn,sfmx$ \u8868\u793a\u524d\u7f00\u548c\u540e\u7f00\u7684\u6700\u503c\uff0c\u66f4\u65b0\u65b9\u5f0f\u4e0e\u6700\u5927\u5b50\u6bb5\u548c\u7c7b\u4f3c\u3002\n\n\u5bf9\u4e8e\u4e09\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u4ee5\u4e0b\u5904\u7406\u65b9\u5f0f\uff1a\n\n1. \u533a\u95f4\u8d4b\u503c\uff0c\u76f4\u63a5\u7ef4\u62a4\u6807\u8bb0\u7136\u540e\u66f4\u65b0 $sum$ \u548c \u6700\u503c\u3002\n2. \u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u76f4\u63a5\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u548c\u524d\u3001\u540e\u7f00\u6700\u5927\u6700\u5c0f\u503c\u3002\n3. \u533a\u95f4\u53d6\u9006\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u53d8\u4e3a\u5b83\u7684\u76f8\u53cd\u6570\uff0c\u5b83\u7684\u548c\u3001\u524d\u540e\u7f00\u6700\u5927\u6700\u5c0f\u503c\u4e5f\u90fd\u53d8\u4e3a\u4e86\u5404\u81ea\u7684\u76f8\u53cd\u6570\uff0c\u5982\u679c\u6709\u8d4b\u503c\u6807\u8bb0\uff0c\u90a3\u4e48\u8d4b\u503c\u6807\u8bb0\u4e5f\u8981\u53d6\u53cd\u3002\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6700\u5927\u503c\u53d6\u4e86\u4e2a\u76f8\u53cd\u6570\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u6700\u5c0f\u503c\uff0c\u6700\u5c0f\u503c\u53d6\u4e86\u76f8\u53cd\u6570\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u6700\u5927\u503c\uff0c\u56e0\u6b64\u8fd8\u9700 swap \u4e00\u4e0b\u3002\n\n\u7ec6\u8282\u8fd8\u662f\u633a\u591a\u7684\uff0c\u4ee3\u7801\u4e5f\u8c03\u4e86\u4e0d\u5c11\u65f6\u95f4\uff1a\n\n```cpp\n//Coded by tzc_wk\n/*\n\u6570\u636e\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u591a\u6d4b\u4e0d\u8bfb\u5b8c\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8fb9\u754c\u4e0d\u7279\u5224\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d2a\u5fc3\u4e0d\u8bc1\u660e\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\nD P \u987a\u5e8f\u9519\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u5927\u5c0f\u5c11\u7b49\u53f7\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u53d8\u91cf\u4e0d\u7edf\u4e00\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d8a\u754c\u4e0d\u5224\u65ad\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8c03\u8bd5\u4e0d\u6ce8\u91ca\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u6ea2\u51fa\u4e0d l l\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi\t\t\tfirst\n#define se\t\t\tsecond\n#define fz(i,a,b)\tfor(int i=a;i<=b;i++)\n#define fd(i,a,b)\tfor(int i=a;i>=b;i--)\n#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define all(a)\t\ta.begin(),a.end()\n#define giveup(...) return printf(__VA_ARGS__),0;\n#define fill0(a)\tmemset(a,0,sizeof(a))\n#define fill1(a)\tmemset(a,-1,sizeof(a))\n#define fillbig(a)\tmemset(a,0x3f,sizeof(a))\n#define fillsmall(a) memset(a,0xcf,sizeof(a))\n#define mask(a)\t\t(1ll<<(a))\n#define maskx(a,x)\t((a)<<(x))\n#define _bit(a,x)\t(((a)>>(x))&1)\n#define _sz(a)\t\t((int)(a).size())\n#define filei(a)\tfreopen(a,\"r\",stdin);\n#define fileo(a)\tfreopen(a,\"w\",stdout);\n#define fileio(a) \tfreopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#define put(x)\t\tputchar(x)\n#define eoln        put('\\n')\n#define space\t\tput(' ')\n#define y1\t\t\ty_chenxiaoyan_1\n#define y0\t\t\ty_chenxiaoyan_0\ntypedef pair<int,int> pii;\ninline int read(){\n\tint x=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-')\tneg=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\tx=x*10+c-'0',c=getchar();\n\treturn x*neg;\n}\ninline void print(int x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tprint(abs(x));\n\t\treturn;\n\t}\n\tif(x<=9)\tputchar(x+'0');\n\telse{\n\t\tprint(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\ninline int qpow(int x,int e,int _MOD){\n\tint ans=1;\n\twhile(e){\n\t\tif(e&1)\tans=ans*x%_MOD;\n\t\tx=x*x%_MOD;\n\t\te>>=1;\n\t}\n\treturn ans;\n}\nint n=read(),m=read();\nchar str[100005];\nstruct node{\n\tint ch[2],val,key;\n\tint prmx,prmn,sfmx,sfmn,sum,sz;\n\tint rv_lz,cov_lz,inv_lz;\n} s[100005];\nint ncnt=0,root;\ninline void pushup(int k){\n//\ts[0].prmx=s[0].sfmx=0;s[0].prmn=s[0].sfmn=0x3f3f3f3f;\n\ts[k].prmx=max(s[s[k].ch[0]].prmx,s[s[k].ch[0]].sum+s[k].val+s[s[k].ch[1]].prmx);\n\ts[k].prmn=min(s[s[k].ch[0]].prmn,s[s[k].ch[0]].sum+s[k].val+s[s[k].ch[1]].prmn);\n\ts[k].sfmx=max(s[s[k].ch[1]].sfmx,s[s[k].ch[1]].sum+s[k].val+s[s[k].ch[0]].sfmx);\n\ts[k].sfmn=min(s[s[k].ch[1]].sfmn,s[s[k].ch[1]].sum+s[k].val+s[s[k].ch[0]].sfmn);\n\ts[k].sum=s[s[k].ch[0]].sum+s[s[k].ch[1]].sum+s[k].val;\n\ts[k].sz=s[s[k].ch[0]].sz+s[s[k].ch[1]].sz+1;\n}\ninline void inv_part(int k){\n\ts[k].val=-s[k].val;s[k].sum=-s[k].sum;\n\tint prmn=s[k].prmn,prmx=s[k].prmx,sfmn=s[k].sfmn,sfmx=s[k].sfmx;\n\ts[k].prmn=-prmx;s[k].prmx=-prmn;s[k].sfmn=-sfmx;s[k].sfmx=-sfmn;\n\ts[k].cov_lz=-s[k].cov_lz;\n\ts[k].inv_lz^=1;\n}\ninline void cov_part(int k,int mk){\n\ts[k].val=mk;\n\ts[k].sum=mk*s[k].sz;\n\ts[k].cov_lz=mk;\n\tif(mk==1){s[k].prmn=s[k].sfmn=0;s[k].prmx=s[k].sfmx=s[k].sum;}\n\telse{s[k].prmx=s[k].sfmx=0;s[k].prmn=s[k].sfmn=s[k].sum;}\n}\ninline void rev_part(int k){\n\tswap(s[k].ch[0],s[k].ch[1]);\n\tswap(s[k].prmn,s[k].sfmn);\n\tswap(s[k].prmx,s[k].sfmx);\n\ts[k].rv_lz^=1;\n}\ninline void pushdown(int k){\n\tif(s[k].inv_lz){\n\t\tif(s[k].ch[0])\tinv_part(s[k].ch[0]);\n\t\tif(s[k].ch[1])\tinv_part(s[k].ch[1]);\n\t\ts[k].inv_lz=0;\n\t}\n\tif(s[k].cov_lz){\n\t\tif(s[k].ch[0])\tcov_part(s[k].ch[0],s[k].cov_lz);\n\t\tif(s[k].ch[1])\tcov_part(s[k].ch[1],s[k].cov_lz);\n\t\ts[k].cov_lz=0;\n\t}\n\tif(s[k].rv_lz){\n\t\tif(s[k].ch[0])\trev_part(s[k].ch[0]);\n\t\tif(s[k].ch[1])\trev_part(s[k].ch[1]);\n\t\ts[k].rv_lz=0;\n\t}\n}\ninline int newnode(char c){\n\tncnt++;\n\ts[ncnt].key=rand()<<15|rand();\n\ts[ncnt].sz=1;\n\tif(c=='('){\n\t\ts[ncnt].prmn=s[ncnt].sfmn=-1;\n\t\ts[ncnt].prmx=s[ncnt].sfmx=0;\n\t\ts[ncnt].sum=-1;\n\t\ts[ncnt].val=-1;\n\t}\n\telse{\n\t\ts[ncnt].prmn=s[ncnt].sfmn=0;\n\t\ts[ncnt].prmx=s[ncnt].sfmx=1;\n\t\ts[ncnt].sum=1;\n\t\ts[ncnt].val=1;\n\t}\n\treturn ncnt;\n}\ninline void build(int &k,int l,int r){\n\tint mid=(l+r)>>1;\n\tk=newnode(str[mid]);\n\tif(l!=mid)\tbuild(s[k].ch[0],l,mid-1);\n\tif(r!=mid)\tbuild(s[k].ch[1],mid+1,r);\n\tpushup(k);\n}\ninline void split(int k,int sz,int &a,int &b){\n\tif(!k){\n\t\ta=b=0;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tif(sz<=s[s[k].ch[0]].sz){\n\t\tb=k;\n\t\tsplit(s[k].ch[0],sz,a,s[k].ch[0]);\n\t}\n\telse{\n\t\ta=k;\n\t\tsplit(s[k].ch[1],sz-s[s[k].ch[0]].sz-1,s[k].ch[1],b);\n\t}\n\tpushup(k);\n}\ninline int merge(int a,int b){\n\tpushdown(a);pushdown(b);\n\tif(!a||!b)\treturn a+b;\n\tif(s[a].key<s[b].key){\n\t\ts[a].ch[1]=merge(s[a].ch[1],b);\n\t\tpushup(a);return a;\n\t}\n\telse{\n\t\ts[b].ch[0]=merge(a,s[b].ch[0]);\n\t\tpushup(b);return b;\n\t}\n}\ninline void rev(int l,int r){\n\tint k1,k2,k3;\n\tsplit(root,l-1,k1,k2);\n\tsplit(k2,r-l+1,k2,k3);\n\trev_part(k2);\n\troot=merge(merge(k1,k2),k3);\n}\ninline void inv(int l,int r){\n\tint k1,k2,k3;\n\tsplit(root,l-1,k1,k2);\n\tsplit(k2,r-l+1,k2,k3);\n\tinv_part(k2);\n\troot=merge(merge(k1,k2),k3);\n}\ninline void cov(int l,int r,int x){\n\tint k1,k2,k3;\n\tsplit(root,l-1,k1,k2);\n\tsplit(k2,r-l+1,k2,k3);\n\tcov_part(k2,x);\n\troot=merge(merge(k1,k2),k3);\n}\ninline int getf(int x){\n\tif(x&1)\treturn (x>>1)+1;\n\telse\treturn x>>1;\n}\ninline int query(int l,int r){\n    int k1,k2,k3;\n\tsplit(root,l-1,k1,k2);\n\tsplit(k2,r-l+1,k2,k3);\n\tint res=getf(s[k2].prmx)+getf(abs(s[k2].sfmn));\n\troot=merge(merge(k1,k2),k3);\n\treturn res;\n}\nsigned main(){\n\tcin>>str+1;\n\tbuild(root,1,n);\n\twhile(m--){\n\t\tchar opt[10];cin>>opt+1;\n\t\tif(opt[1]=='R'){\n\t\t\tint l=read(),r=read();\n\t\t\tchar c;cin>>c;\n\t\t\tif(c=='(')\tcov(l,r,-1);\n\t\t\telse\t\tcov(l,r,1);\n\t\t}\n\t\tif(opt[1]=='S'){\n\t\t\tint l=read(),r=read();\n\t\t\trev(l,r);\n\t\t}\n\t\tif(opt[1]=='I'){\n\t\t\tint l=read(),r=read();\n\t\t\tinv(l,r);\n\t\t}\n\t\tif(opt[1]=='Q'){\n\t\t\tint l=read(),r=read();\n\t\t\tcout<<query(l,r)<<endl;\n\t\t}\n\n\t}\n\treturn 0;\n}\n```\n\n\u987a\u4fbf\u5c1b chenxia25\uff0cycxtxdy\uff01",
        "postTime": 1587567793,
        "uid": 123543,
        "name": "ET2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d /  [JSOI2011]\u62ec\u53f7\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u7528\u7684fhq treap\n\n\u8bbe$nd[4]$\n\n```\n0\u2014\u2014\u591a\u51fa\u6765\u7684\u53f3\u62ec\u53f7\n1\u2014\u2014\u591a\u51fa\u6765\u7684\u5de6\u62ec\u53f7\n2\u2014\u2014\u53d6\u53cd\u540e\u591a\u51fa\u6765\u7684\u53f3\u62ec\u53f7\n3\u2014\u2014\u53d6\u53cd\u540e\u591a\u51fa\u6765\u7684\u5de6\u62ec\u53f7\n```\n\n\u8fd9\u6837\u4e00\u6765\n\n```\nSwap: swap(0,3),swap(1,2),swap(sn[0],sn[1])\nInvert: swap(0,2),swap(1,3),val[k]^=1\nReplace: v<-siz[k],v+2^1<-siz[k],v^1<-0,v+2<-0\n```\n\n\u6ce8\u610f\u4e00\u4e0b\u8fd0\u7b97\u4f18\u5148\u7ea7\u5c31\u597d\n\n```cpp\n#include\"cstdio\"\n#include\"cstring\"\n#include\"iostream\"\n#include\"algorithm\"\nusing namespace std;\n\nconst int MAXN=1e5+5;\n\nint n,m,cnt,root;\nchar ch[MAXN];\nint val[MAXN],rev[MAXN],sn[2][MAXN],siz[MAXN];\nint nd[4][MAXN],tag3[MAXN];\nbool tag1[MAXN],tag2[MAXN];\n\nint cret(int v)\n{\n\tint tmp=++cnt;\n\tsiz[tmp]=1;\n\tval[tmp]=v;\n\ttag3[tmp]=-1;\n\tnd[v][tmp]=nd[v+2^1][tmp]=1;\n\trev[tmp]=rand();\n\treturn tmp;\n}\n\nvoid pushdown(int k)\n{\n\tif(tag3[k]!=-1){\n\t\tif(sn[0][k]) nd[tag3[k]][sn[0][k]]=nd[tag3[k]+2^1][sn[0][k]]=siz[sn[0][k]],nd[tag3[k]^1][sn[0][k]]=nd[tag3[k]+2][sn[0][k]]=0,val[sn[0][k]]=tag3[sn[0][k]]=tag3[k],tag1[sn[0][k]]=tag2[sn[0][k]]=0;\n\t\tif(sn[1][k]) nd[tag3[k]][sn[1][k]]=nd[tag3[k]+2^1][sn[1][k]]=siz[sn[1][k]],nd[tag3[k]^1][sn[1][k]]=nd[tag3[k]+2][sn[1][k]]=0,val[sn[1][k]]=tag3[sn[1][k]]=tag3[k],tag1[sn[1][k]]=tag2[sn[1][k]]=0;\n\t}if(tag2[k]){\n\t\tswap(sn[0][k],sn[1][k]);\n\t\tif(sn[0][k]) swap(nd[0][sn[0][k]],nd[3][sn[0][k]]),swap(nd[1][sn[0][k]],nd[2][sn[0][k]]),tag2[sn[0][k]]^=1;\n\t\tif(sn[1][k]) swap(nd[0][sn[1][k]],nd[3][sn[1][k]]),swap(nd[1][sn[1][k]],nd[2][sn[1][k]]),tag2[sn[1][k]]^=1;\n\t}if(tag1[k]){\n\t\tif(sn[0][k]) swap(nd[0][sn[0][k]],nd[2][sn[0][k]]),swap(nd[1][sn[0][k]],nd[3][sn[0][k]]),tag1[sn[0][k]]^=1,val[sn[0][k]]^=1;\n\t\tif(sn[1][k]) swap(nd[0][sn[1][k]],nd[2][sn[1][k]]),swap(nd[1][sn[1][k]],nd[3][sn[1][k]]),tag1[sn[1][k]]^=1,val[sn[1][k]]^=1;\n\t}tag1[k]=tag2[k]=0;\n\ttag3[k]=-1;\n\treturn;\n}\n\nvoid pushup(int k)\n{\n\tsiz[k]=siz[sn[0][k]]+siz[sn[1][k]]+1;\n\tnd[0][k]=nd[0][sn[0][k]];\n\tnd[1][k]=nd[1][sn[1][k]];\n\tint tmp=nd[1][sn[0][k]]-nd[0][sn[1][k]];\n\ttmp+=val[k]?1:-1;\n\tif(tmp>0) nd[1][k]+=tmp;\n\telse nd[0][k]-=tmp;\n\t\n\tnd[2][k]=nd[2][sn[0][k]];\n\tnd[3][k]=nd[3][sn[1][k]];\n\ttmp=nd[3][sn[0][k]]-nd[2][sn[1][k]];\n\ttmp+=val[k]?-1:1;\n\tif(tmp>0) nd[3][k]+=tmp;\n\telse nd[2][k]-=tmp;\n\treturn;\n}\n\nvoid dro(int k,int v,int &x,int &y)\n{\n\tif(!k){x=y=0;return;}\n\tpushdown(k);\n\tif(siz[sn[0][k]]<v) x=k,dro(sn[1][k],v-siz[sn[0][k]]-1,sn[1][k],y);\n\telse y=k,dro(sn[0][k],v,x,sn[0][k]);\n\tpushup(k);\n\treturn;\n}\n\nint un(int x,int y)\n{\n\tif(!x||!y) return x|y;\n\tif(rev[x]<rev[y]){\n\t\tpushdown(x);\n\t\tsn[1][x]=un(sn[1][x],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}pushdown(y);\n\tsn[0][y]=un(x,sn[0][y]);\n\tpushup(y);\n\treturn y;\n}\n\nvoid slv0(int l,int r)\n{\n\tint x,y,z;\n\tdro(root,r,x,z);\n\tdro(x,l-1,x,y);\n\tprintf(\"%d\\n\",(nd[0][y]+1)/2+(nd[1][y]+1)/2);\n\troot=un(un(x,y),z);\n\treturn;\n}\n\nvoid slv1(int l,int r)\n{\n\tint x,y,z;\n\tdro(root,r,x,z);\n\tdro(x,l-1,x,y);\n\ttag1[y]^=1;val[y]^=1;\n\tpushdown(y);pushup(y);\n\troot=un(un(x,y),z);\n\treturn;\n}\n\nvoid slv2(int l,int r)\n{\n\tint x,y,z;\n\tdro(root,r,x,z);\n\tdro(x,l-1,x,y);\n\ttag2[y]^=1;\n\tpushdown(y);pushup(y);\n\troot=un(un(x,y),z);\n\treturn;\n}\n\nvoid slv3(int l,int r,int kd)\n{\n\tint x,y,z;\n\tdro(root,r,x,z);\n\tdro(x,l-1,x,y);\n\ttag3[y]=val[y]=kd;tag1[y]=tag2[y]=0;\n\tpushdown(y);pushup(y);\n\troot=un(un(x,y),z);\n\treturn;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tscanf(\"%s\",ch+1);\n\tfor(int i=1;i<=n;++i) root=un(root,cret(ch[i]=='('));\n\twhile(m--){\n\t\tint l,r;\n\t\tscanf(\"%s%d%d\",ch+1,&l,&r);\n\t\tif(ch[1]=='Q') slv0(l,r);\n\t\telse if(ch[1]=='I') slv1(l,r);\n\t\telse if(ch[1]=='S') slv2(l,r);\n\t\telse scanf(\"%s\",ch+1),slv3(l,r,ch[1]=='(');\n\t}return 0;\n}\n```",
        "postTime": 1549892302,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d /  [JSOI2011]\u62ec\u53f7\u5e8f\u5217\u3011"
    },
    {
        "content": "**Splay + \u4e00\u70b9\u5de7\u5999\u7684\u601d\u60f3**\n\n\u663e\u7136\uff0c\u95ee\u9898\u7684\u5173\u952e\u5728**\u64cd\u4f5c4**\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u95ee\u9898\u8fdb\u884c\u8f6c\u5316\uff1a\n\n1\uff09\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u7684\u62ec\u53f7\u5e8f\u5217 \u201c))()(()))(()((\u201d \uff0c\u6211\u4eec\u5c06\u6210\u5bf9\u7684\u62ec\u53f7\u5316\u7b80\uff0c\u53d8\u6210 \u201c)))(((\u201d \uff0c\u4ee4a\u4e3a\u5316\u7b80\u540e\u2018)'\u7684\u4e2a\u6570\uff0cb\u4e3a\u5316\u7b80\u540e\u2018(\u2019\u7684\u4e2a\u6570\uff0c\u5219\u5f53a,b\u4e3a\u5947\u6570\u65f6\uff0c\u6539\u53d8\u4f4d\u6570\u4e3a\u3010a / 2 + b / 2 + 2\u3011\uff0c\u5f53a,b\u4e3a\u5076\u6570\u65f6\uff0c\u6539\u53d8\u4f4d\u6570\u4e3a\u3010 a / 2 + b / 2\u3011\uff0c\u5408\u5e76\u4e3a\u3010(a + 1) / 2 + (b + 1) / 2\u3011\u3002\n\n2\uff09\u73b0\u5728\u53ea\u8981\u6c42\u51faa,b\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u7684\u5de6\u53f3\u62ec\u53f7\u8d4b\u503c\uff0c\u4ee4 \u2018(\u2019 \u4e3a1\uff0c \u2018)\u2019 \u4e3a-1\uff0c\u8fd9\u6837\u6210\u5bf9\u7684\u62ec\u53f7\u4e4b\u548c\u5c31\u76f8\u5f53\u4e8e\u76f8\u62b5\u6d88\uff0c\u90a3\u4e48\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u4e2d\u7684\u6700\u5c0f\u524d\u7f00\u548c\u5373\u4e3aa\uff0c\u6700\u5927\u540e\u7f00\u548c\u5373\u4e3ab\u3002\n\n\u8fd8\u6709\u4e00\u4e9b\u8981\u70b9\u9700\u8981\u6ce8\u610f\uff1a\n\n1\uff09\u5bf9\u4e8e\u533a\u95f4\u53d6\u53cd\uff0c\u8981\u7ef4\u62a4\u6700\u5c0f\u540e\u7f00\u548c\u548c\u6700\u5927\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u5728\u53d6\u53cd\u65f6\u53ea\u9700\u4ea4\u6362\u6700\u5927/\u6700\u5c0f\u524d\u540e\u7f00\u548c\uff0c\u5f53\u7136\uff0c\u7531\u4e8e\u6570\u7684\u6b63\u8d1f\u6027\u6539\u53d8\uff0c\u4ea4\u6362\u540e\u4e5f\u8981\u5404\u81ea\u53d6\u5176\u76f8\u53cd\u6570\uff1b\u5bf9\u4e8e\u533a\u95f4\u7ffb\u8f6c\uff0c\u53ea\u9700\u5c06\uff08\u6700\u5927/\u6700\u5c0f\uff09\u524d\u7f00\u548c\u4e0e\u540e\u7f00\u548c\u4ea4\u6362\u3002\n\n2\uff09\u8fd8\u6709\u4e00\u70b9\u8f83\u4e3a\u91cd\u8981\u7684\u662f\uff0c\u533a\u95f4\u5168\u6539\u4e3a\u67d0\u4e2a\u62ec\u53f7\u7684\u64cd\u4f5c\u6807\u8bb0\u4e0b\u4f20\u65f6\uff0c\u8981\u4f18\u5148\u4e8e\u53cd\u8f6c\u6807\u8bb0\u4e0b\u4f20\u5e76\u6e05\u7a7a\u5f53\u524d\u53cd\u8f6c\u7684\u6807\u8bb0\uff0c\u4ee5\u9632\u6b62\u53cd\u8f6c\u5148\u4e0b\u4f20\u5bfc\u81f4\u7b54\u6848\u9519\u8bef\uff0c\u8fd9\u5728\u7c7b\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u9898\u4e2d\u90fd\u5e94\u8fdb\u884c\u8fd9\u6837\u7684\u5904\u7406\u3002\n\n**\u4ee3\u7801\uff1a**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 1e5 + 5;\nint fa[N], lc[N], rc[N], sze[N], rev[N], fat[N], a[N];\nint sum[N], pr0[N], pr1[N], sf0[N], sf1[N], vis[N], tag[N];\nint n, m, x, y, rt, T, k; char s[N];\ntemplate <class T> inline T Max(const T a, const T b) {return a > b? a : b;}\ntemplate <class T> inline T Min(const T a, const T b) {return a < b? a : b;}\ntemplate <class T> inline void Swap(T &a, T &b) {a ^= b; b ^= a; a ^= b;}\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    // \u5f62\u5982 x = ~x + 1 \u7684\u90fd\u662f\u5c06\u539f\u6570\u53d6\u53cd\u7684\u4f4d\u8fd0\u7b97 \n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void Push(const int x)\n{\n    int L = lc[x], R = rc[x];\n    sum[x] = sum[L] + sum[R] + vis[x];\n    sze[x] = sze[L] + sze[R] + 1;\n    pr0[x] = Min(pr0[L], sum[L] + vis[x] + pr0[R]); \n    pr1[x] = Max(pr1[L], sum[L] + vis[x] + pr1[R]);\n    sf0[x] = Min(sf0[R], sum[R] + vis[x] + sf0[L]);\n    sf1[x] = Max(sf1[R], sum[R] + vis[x] + sf1[L]);\n}\ninline void AddRev(const int x)\n{\n    if (!x) return ;\n    rev[x] ^= 1; \n    Swap(lc[x], rc[x]); \n    Swap(pr0[x], sf0[x]);\n    Swap(pr1[x], sf1[x]);\n}\ninline void AddFat(const int x)\n{\n    if (!x) return ;\n    fat[x] ^= 1; \n    vis[x] = ~vis[x] + 1; sum[x] = ~sum[x] + 1; \n    Swap(pr0[x], pr1[x]); Swap(sf0[x], sf1[x]);\n    pr0[x] = ~pr0[x] + 1; pr1[x] = ~pr1[x] + 1;\n    sf0[x] = ~sf0[x] + 1; sf1[x] = ~sf1[x] + 1;\n}\ninline void AddTag(const int x, const int vi)\n{\n    if (!x) return ;\n    fat[x] = 0;\n    tag[x] = vi; vis[x] = vi;\n    if (vi == 1)\n    {\n        sum[x] = sze[x];\n         pr0[x] = sf0[x] = 0;\n        pr1[x] = sf1[x] = sze[x];\n    }\n    else\n    { \n        sum[x] = ~sze[x] + 1;\n         pr0[x] = sf0[x] = ~sze[x] + 1;\n        pr1[x] = sf1[x] = 0;\n    }\n}\ninline void Down(const int x)\n{\n    if (rev[x])\n    {\n        AddRev(lc[x]); AddRev(rc[x]);\n        rev[x] = 0;\n    }\n    if (tag[x])\n    {\n        AddTag(lc[x], tag[x]); \n        AddTag(rc[x], tag[x]);\n        tag[x] = 0;\n    }\n    if (fat[x])\n    {\n        AddFat(lc[x]); AddFat(rc[x]);\n        fat[x] = 0;\n    }\n}\ninline bool Wrt(const int x) {return rc[fa[x]] == x;}\ninline void Rot(const int x)\n{\n    int y = fa[x], z = fa[y];\n    Down(y); Down(x);\n    int b = (lc[y] == x ? rc[x] : lc[x]);\n    fa[x] = z; fa[y] = x;\n    if (b) fa[b] = y;\n    if (z) (lc[z] == y ? lc[z] : rc[z]) = x;\n    if (lc[y] == x) rc[x] = y, lc[y] = b;\n     else lc[x] = y, rc[y] = b;\n    Push(y);\n}\ninline void Splay(const int x, const int tar)\n{\n    while (fa[x] != tar)\n    {\n        if (fa[fa[x]] != tar)\n         Wrt(fa[x]) == Wrt(x) ? Rot(fa[x]) : Rot(x);\n        Rot(x); \n    }\n    Push(x);\n    if (!tar) rt = x;\n}\ninline int Getkth(const int k)\n{\n    int x = rt, y = k;\n    while(x)\n    {\n        Down(x);\n        if (y <= sze[lc[x]]) x = lc[x];\n        else \n        {\n            y -= sze[lc[x]] + 1;\n            if (!y) return x;\n            x = rc[x];\n        }\n    }\n}\ninline int Bul(const int l, const int r, const int lst)\n{\n    if (l > r) return 0;\n    int mid = l + r >> 1, x = ++T;\n    fa[x] = lst; vis[x] = a[mid];\n    lc[x] = Bul(l, mid - 1, x);\n    rc[x] = Bul(mid + 1, r, x);\n    return Push(x), x;\n}\ninline void Upt(const int l, const int r)\n{\n    x = Getkth(l); y = Getkth(r + 2);\n    Splay(x, 0); Splay(y, x);\n}\nint main()\n{\n    n = get(); m = get();\n    scanf(\"%s\", s + 2);\n    for (int i = 2; i <= n + 1; ++i) a[i] = (s[i] == '(' ? 1 : ~1 + 1);\n    rt = Bul(1, n + 2, 0); int u, v;\n    while (m--)\n    {\n        while ((k = getchar()) < 'A' || k > 'Z');\n        u = get(); v = get(); Upt(u, v);\n        switch (k)\n        {\n            case 'Q': put((sf1[lc[y]] + 1 >> 1) - (pr0[lc[y]] - 1) / 2), putchar('\\n'); break;\n            case 'I': AddFat(lc[y]); Push(y); Push(x); break;\n            case 'S': AddRev(lc[y]); Push(y); Push(x); break;\n            case 'R': AddTag(lc[y], (getchar() == '(' ? 1 : ~1 + 1)); Push(y); Push(x); break;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1495204183,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3215 \u3010[HNOI2011]\u62ec\u53f7\u4fee\u590d\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8003\u8651\u5982\u4f55\u56de\u7b54\u8be2\u95ee\u3002\u5bf9\u4e8e\u4e00\u4e2a\u62ec\u53f7\u4e32\uff0c\u6211\u4eec\u5148\u5c06\u5176\u4e2d\u7684\u5408\u6cd5\u5b50\u4e32\u6d88\u53bb\uff0c\u6700\u540e\u4f1a\u6210\u4e3a\u5f62\u5982\uff1a$))\\cdots))((\\cdots(($ \u7684\u6837\u5b50\u3002\n\n\u5bf9\u53f3\u62ec\u53f7\u4e2a\u6570 $n_1$ \u548c\u5de6\u62ec\u53f7\u4e2a\u6570 $n_2$ \u5206\u5947\u5076\u8ba8\u8bba\u4e00\u4e0b\uff0c\u53ef\u5f97\u7b54\u6848\u4e3a $\\lceil\\frac{n_1}{2}\\rceil+\\lceil\\frac{n_2}{2}\\rceil$\u3002\n\n\u4e00\u6b65\u91cd\u8981\u7684\u8f6c\u5316\uff1a\u8003\u8651\u5230\u4e00\u5bf9\u62ec\u53f7\u662f\u4e0d\u5f71\u54cd\u7b54\u6848\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 $($ \u8d4b\u503c\u4e3a $-1$\uff0c\u5c06 $)$ \u8d4b\u503c\u4e3a $1$\uff0c\u6c42\u51fa\u8be5\u62ec\u53f7\u4e32\u7684\u6700\u5927\u524d\u7f00\u548c\u6700\u5c0f\u540e\u7f00\u5373\u4e3a $n_1,n_2$\u3002\n\n\u6240\u4ee5\u76ee\u524d\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u662f\uff1a\u6700\u5927\u524d\u7f00 $lmax$\uff0c\u6700\u5c0f\u540e\u7f00 $rmin$\u3002\n\n\u60f3\u8981\u5408\u5e76\u51fa\u8fd9\u4e24\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u533a\u95f4 $sum$\u3002\n\n\u7136\u540e\u8003\u8651\u64cd\u4f5c\uff1a\n\n1. \u533a\u95f4\u8d4b\u503c\n\n2. \u533a\u95f4\u7ffb\u8f6c\n\n3. \u533a\u95f4\u53d6\u53cd\uff08\u8fd9\u91cc\u7684\u53cd\u6307\u7684\u662f\u76f8\u53cd\u6570\uff09\n\n\u5bf9\u4e8e\u533a\u95f4\u8d4b\u503c\uff0c\u9700\u8981\u4e00\u4e2a\u6807\u8bb0 $b_1=1/-1$\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u7ffb\u8f6c\uff0c\u9700\u8981\u4e00\u4e2a\u6807\u8bb0 $b_2=0/1$\uff0c\u7ffb\u8f6c\u540e\u6700\u5927\u524d\u7f00\u5373\u4e3a\u539f\u6765\u7684\u6700\u5927\u540e\u7f00\uff0c\u7ffb\u8f6c\u540e\u6700\u5c0f\u540e\u7f00\u5373\u4e3a\u539f\u6765\u7684\u6700\u5c0f\u524d\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\uff1a\u6700\u5927\u540e\u7f00 $rmax$\uff0c\u6700\u5c0f\u524d\u7f00 $lmin$\u3002\u8003\u8651\u4f7f\u7528\u5e73\u8861\u6811\u6765\u5b9e\u73b0\u533a\u95f4\u7ffb\u8f6c\u7b49\u64cd\u4f5c\u548c\u4e00\u7cfb\u5217\u4fe1\u606f\u7684\u7ef4\u62a4\u3002\u7531\u4e8e\u4f7f\u7528\u7684\u662f\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u9700\u8981\u591a\u52a0\u4e00\u4e2a\u4fe1\u606f\uff1a\u8be5\u70b9\u7684\u503c $w=1/-1$\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u53d6\u53cd\uff0c\u9700\u8981\u4e00\u4e2a\u6807\u8bb0 $b_3=0/1$\uff0c\u8003\u8651\u6211\u4eec\u7ef4\u62a4\u7684\u4fe1\u606f\uff1a\u5bf9\u4e8e $w,sum$ \u76f4\u63a5\u53d6\u53cd\u5373\u53ef\uff0c\u5bf9\u4e8e $lmin$ \u5219\u7b49\u4e8e\u539f\u6765\u7684 $-lmax$\uff0c$lmax$ \u7b49\u4e8e\u539f\u6765\u7684 $-lmin$ \u5176\u4f59\u7c7b\u4f3c\u3002\n\n\u7136\u540e\u5c31\u662f\u5e73\u8861\u6811\u7ecf\u5178\u7684\u5de6\u53f3\u513f\u5b50\u7f16\u53f7 $l,r$\uff0c\u968f\u673a\u6743\u503c $rnd$\uff0c\u4ee5\u53ca\u8fd9\u91cc\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u6240\u7528\u5230\u7684\u5b50\u6811\u5927\u5c0f $siz$\uff08\u5f3a\u8c03\u4e00\u4e0b\uff0c\u7531\u4e8e\u533a\u95f4\u7ffb\u8f6c\u4f1a\u8c03\u8f6c\u5de6\u53f3\u513f\u5b50\uff0c\u82e5\u8fd8\u6309\u7167\u4e8c\u53c9\u6811\u7684\u65b9\u6cd5\u5219\u884c\u4e0d\u901a\uff0c\u6240\u4ee5\u6309\u7167\u5b50\u6811\u5927\u5c0f\u6765\u7b97\uff0c\u4e0d\u719f\u6089\u7684\u53ef\u4ee5\u5148\u5199\u6587\u827a\u5e73\u8861\u6811\uff09\n\n\u7efc\u4e0a\uff0c\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u7ef4\u62a4\uff1a$l,r,rnd,siz,w,sum,lmin,lmax,rmin,rmax,b_1,b_2,b_3$\u3002\n\n\u63a5\u7740\u8003\u8651\u4fe1\u606f\u7684\u5408\u5e76 `push_up(p)`\uff0c\u8fd9\u662f\u4e2a\u5f88\u5178\u578b\u7684\u5408\u5e76\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5373\u53ef\uff1a\n\n```cpp\nvoid push_up(int p){\n\tt[p].siz=t[t[p].l].siz+t[t[p].r].siz+1;\n\tt[p].sum=t[t[p].l].sum+t[t[p].r].sum+t[p].w;\n\tt[p].lmin=min(t[t[p].l].lmin,t[t[p].l].sum+t[p].w+t[t[p].r].lmin);\n\tt[p].lmax=max(t[t[p].l].lmax,t[t[p].l].sum+t[p].w+t[t[p].r].lmax);\n\tt[p].rmin=min(t[t[p].r].rmin,t[t[p].r].sum+t[p].w+t[t[p].l].rmin);\n\tt[p].rmax=max(t[t[p].r].rmax,t[t[p].r].sum+t[p].w+t[t[p].l].rmax);\n}\n```\n\n\u63a5\u7740\u8003\u8651\u6807\u8bb0\u7684\u4e0b\u653e `push_down(p)`\uff0c\u5173\u4e8e\u6807\u8bb0 $b_1,b_2,b_3$ \u7684\u4f18\u5148\u7ea7\u4ee5\u53ca\u6807\u8bb0\u5bf9\u6807\u8bb0\u3001\u6807\u8bb0\u5bf9\u4fe1\u606f\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u4f9d\u6b21\u5206\u6790\u3002\n\n\u5bf9\u4e8e $b_1$\uff0c\u5047\u8bbe\u4e4b\u524d\u6709\u533a\u95f4\u7ffb\u8f6c\u548c\u53d6\u53cd\u64cd\u4f5c\u4e14\u672a\u4e0b\u653e\uff0c\u82e5 $b_1$ \u4f18\u5148\u7ea7\u5c0f\u4e8e $b_2$ \u4e5f\u5c31\u662f\u5148\u4e0b\u653e\u7ffb\u8f6c\u518d\u4e0b\u653e\u8d4b\u503c\uff0c\u5219\u5bf9\u8d4b\u503c\u64cd\u4f5c\u65e0\u5f71\u54cd\uff0c\u82e5 $b_1$ \u4f18\u5148\u7ea7\u5927\u4e8e $b_2$ \u5219\u65e0\u6cd5\u5b9e\u73b0\u3002\u4ee5\u6b64\u65b9\u6cd5\u7c7b\u63a8\uff0c\u53ef\u63a8\u51fa $b_1$ \u4f18\u5148\u7ea7\u5c0f\u4e8e $b_2$\uff0c\u5176\u4f59\u4e0d\u53d7\u9650\u5236\u3002\u6240\u4ee5\u53ef\u4ee5\u5199\u51fa `push_down(p)` \u4ee3\u7801\uff1a\n\n```cpp\nvoid push_down(int p){\n\tif(t[p].b3){\n\t\tif(t[p].l)update3(t[p].l);\n\t\tif(t[p].r)update3(t[p].r);\n\t\tt[p].b3=0;\n\t}\n\tif(t[p].b2){\n\t\tif(t[p].l)update2(t[p].l);\n\t\tif(t[p].r)update2(t[p].r);\n\t\tt[p].b2=0;\n\t}\n\tif(t[p].b1){\n\t\tif(t[p].l)update1(t[p].l,t[p].b1);\n\t\tif(t[p].r)update1(t[p].r,t[p].b1);\n\t\tt[p].b1=0;\n\t}\n}\n```\n\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c<='9'&&c>='0'){\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\n\nvoid print(int x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)print(x/10);\n\tputchar(x%10^48);\n}\n\nconst int N=1e5+5;\nint n,q,cnt,rt;\nstruct node{\n\tint l,r,rnd,siz;\n\tint lmin,lmax,rmin,rmax,sum,w;\n\tint b1;\n\tbool b2,b3;\n}t[N];\nchar a[N];\n\nint add(int x){\n\tint p=++cnt;\n\tt[p].sum=t[p].w=x,t[p].rnd=rand(),t[p].siz=1;\n\tt[p].lmin=min(t[p].lmin,x),t[p].lmax=max(t[p].lmax,x);\n\tt[p].rmin=min(t[p].rmin,x),t[p].rmax=max(t[p].rmax,x);\n\treturn p;\n}\n\nvoid push_up(int p){\n\tt[p].siz=t[t[p].l].siz+t[t[p].r].siz+1;\n\tt[p].sum=t[t[p].l].sum+t[t[p].r].sum+t[p].w;\n\tt[p].lmin=min(t[t[p].l].lmin,t[t[p].l].sum+t[p].w+t[t[p].r].lmin);\n\tt[p].lmax=max(t[t[p].l].lmax,t[t[p].l].sum+t[p].w+t[t[p].r].lmax);\n\tt[p].rmin=min(t[t[p].r].rmin,t[t[p].r].sum+t[p].w+t[t[p].l].rmin);\n\tt[p].rmax=max(t[t[p].r].rmax,t[t[p].r].sum+t[p].w+t[t[p].l].rmax);\n}\n\nvoid update1(int p,int x){\n\tt[p].b1=t[p].w=x;\n\tt[p].sum=t[p].siz*x;\n\tif(x>0)t[p].lmax=t[p].rmax=t[p].sum,t[p].lmin=t[p].rmin=0;\n\telse t[p].lmax=t[p].rmax=0,t[p].lmin=t[p].rmin=t[p].sum;\n}\n\nvoid update2(int p){\n\tswap(t[p].l,t[p].r);\n\tswap(t[p].lmax,t[p].rmax);\n\tswap(t[p].lmin,t[p].rmin);\n\tt[p].b2^=1;\n}\n\nint tmpmax,tmpmin;\n\nvoid update3(int p){\n\tt[p].w=-t[p].w;\n\tt[p].sum=-t[p].sum;\n\ttmpmax=t[p].lmax,tmpmin=t[p].lmin;\n\tt[p].lmax=-tmpmin,t[p].lmin=-tmpmax;\n\ttmpmax=t[p].rmax,tmpmin=t[p].rmin;\n\tt[p].rmax=-tmpmin,t[p].rmin=-tmpmax;\n\tt[p].b3^=1;\n\tt[p].b1=-t[p].b1;\n}\n\nvoid push_down(int p){\n\tif(t[p].b3){\n\t\tif(t[p].l)update3(t[p].l);\n\t\tif(t[p].r)update3(t[p].r);\n\t\tt[p].b3=0;\n\t}\n\tif(t[p].b2){\n\t\tif(t[p].l)update2(t[p].l);\n\t\tif(t[p].r)update2(t[p].r);\n\t\tt[p].b2=0;\n\t}\n\tif(t[p].b1){\n\t\tif(t[p].l)update1(t[p].l,t[p].b1);\n\t\tif(t[p].r)update1(t[p].r,t[p].b1);\n\t\tt[p].b1=0;\n\t}\n}\n\nvoid split(int p,int k,int &x,int &y){\n\tif(!p){\n\t\tx=y=0;return;\n\t}\n\tpush_down(p);\n\tif(t[t[p].l].siz<k){\n\t\tx=p;\n\t\tsplit(t[p].r,k-t[t[p].l].siz-1,t[p].r,y);\n\t}else{\n\t\ty=p;\n\t\tsplit(t[p].l,k,x,t[p].l);\n\t}\n\tpush_up(p);\n}\n\nint merge(int x,int y){\n\tif(!x||!y)return x|y;\n\tif(t[x].rnd>t[y].rnd){\n\t\tpush_down(x);\n\t\tt[x].r=merge(t[x].r,y);\n\t\tpush_up(x);\n\t\treturn x;\n\t}else{\n\t\tpush_down(y);\n\t\tt[y].l=merge(x,t[y].l);\n\t\tpush_up(y);\n\t\treturn y;\n\t}\n}\n\nint build(int l,int r){\n\tif(l==r)return add(a[l]=='('?-1:1);\n\tint mid=(l+r)>>1;\n\treturn merge(build(l,mid),build(mid+1,r));\n}\n\nint main(){\n\tn=read(),q=read(),cin>>(a+1);\n\trt=build(1,n);\n\tchar opt[10],z;int x,y,l,mid,r;\n\twhile(q--){\n\t\tcin>>opt,x=read(),y=read();\n\t\tif(opt[0]=='R'){\n\t\t\tcin>>z;\n\t\t\tsplit(rt,y,mid,r);\n\t\t\tsplit(mid,x-1,l,mid);\n\t\t\tupdate1(mid,z=='('?-1:1);\n\t\t\trt=merge(merge(l,mid),r);\n\t\t}else if(opt[0]=='S'){\n\t\t\tsplit(rt,y,mid,r);\n\t\t\tsplit(mid,x-1,l,mid);\n\t\t\tupdate2(mid);\n\t\t\trt=merge(merge(l,mid),r);\n\t\t}else if(opt[0]=='I'){\n\t\t\tsplit(rt,y,mid,r);\n\t\t\tsplit(mid,x-1,l,mid);\n\t\t\tupdate3(mid);\n\t\t\trt=merge(merge(l,mid),r);\n\t\t}else{\n\t\t\tsplit(rt,y,mid,r);\n\t\t\tsplit(mid,x-1,l,mid);\n\t\t\tprint((t[mid].lmax+1)/2+(-t[mid].rmin+1)/2),putchar('\\n');\n\t\t\trt=merge(merge(l,mid),r);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u89c9\u5f97\u6709\u5e2e\u52a9\u7684\u8bdd\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u3002",
        "postTime": 1672397105,
        "uid": 271736,
        "name": "Daidly",
        "ccfLevel": 6,
        "title": "P3215 [HNOI2011]\u62ec\u53f7\u4fee\u590d / [JSOI2011]\u62ec\u53f7\u5e8f\u5217 \u9898\u89e3"
    }
]