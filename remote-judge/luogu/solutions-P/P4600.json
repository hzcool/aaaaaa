[
    {
        "content": "~~\u4e3a\u5565\u611f\u89c9\u53e6\u4e00\u7bc7\u9898\u89e3\u5c31\u7ea6\u7b49\u4e8e\u5565\u90fd\u6ca1\u5199\u554a~~\n\n\u603b\u7ed3\u4e00\u4e0b\u601d\u8003\u8fc7\u7a0b\u3002\u9996\u5148\u6839\u636e\u201c\u524d\u7f00\u201d\u548c\u201c\u591a\u4e32\u201d\uff0c\u53ef\u77e5\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u63a5\u6536\u8bb8\u591a\u4e32\u7684\u81ea\u52a8\u673a\uff0c\u6bd4\u5982~~\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u53cd\u4e32\u7684\u5e7f\u4e49SAM~~AC\u81ea\u52a8\u673a\uff0c\u800c\u5b57\u5178\u6811\u6b63\u597d\u662f\u524d\u7f00\u6811\uff0c\u4e8e\u662f\u8003\u8651\u5728AC\u81ea\u52a8\u673a\u4e0a\u641e\u4e8b\u60c5\u3002\n\n\u8003\u8651`fail`\u6570\u7ec4\u7684\u610f\u4e49\uff0c\u7531\u4e8eAC\u81ea\u52a8\u673a\u672c\u8eab\u7684\u524d\u7f00\u6027\u8d28\uff0c\u4e0d\u9700\u8981\u5339\u914d\u524d\u7f00\uff0c\u6240\u4ee5`fail`\u4f1a\u6307\u5411\u4e0e\u81ea\u5df1\u76f8\u540c\u4e14\u6df1\u5ea6\u8f83\u6d45\u7684\u540e\u7f00\u3002\u7136\u540e\u5c31\u8003\u8651\u641e\u4e00\u4e2a`vector`\u51fa\u6765\u7ef4\u62a4\u6bcf\u4e2a\u4e32\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u7531\u4e8e\u6df1\u5ea6\u671f\u671b\u8d8a\u5927\uff0c\u6c42`fail`\u65f6\u8df3\u7684\u6b21\u6570\u671f\u671b\u8d8a\u5c11\uff0c\u6240\u4ee5\u6c42\u4e00\u4e0b`LCA`\u5c31\u662f\u6700\u957f\u540e\u7f00\u4e86\u3002\n\n\u7136\u540e\u662f\u4ee3\u7801\uff0c\u4e00A\u5c31\u5f88\u5f00\u5fc3.jpg\n\n\u636e\u8bf4\u5361\u500d\u589e\uff0c\u7136\u800c\u90fd9102\u5e74\u4e86\u4e3a\u4ec0\u4e48\u4e0d\u6811\u5256\uff1f\n\n```cpp\n#define Sigma 27\n#define MAXN 1000010\n#define Mod 1000000007\n\nusing namespace std ;\n\nchar S[MAXN] ;\nint T, M, L[MAXN] ;\nvector <int> pre[MAXN] ;\nstruct Edge{\n    int to, next ;\n    #define p_b push_back\n    #define to(k) E[k].to\n    #define next(k) E[k].next\n}E[MAXN] ; int head[MAXN], cnt ;\nint sze[MAXN], dep[MAXN], fa[MAXN], top[MAXN], son[MAXN] ;\n\nvoid add(int u, int v){\n    E[++ cnt].to = v, E[cnt].next = head[u], head[u] = cnt ;\n}\nstruct ACAM{\n    queue <int> q ;\n    int sz, fail[MAXN] ;\n    int trie[MAXN][Sigma], ans[MAXN] ;\n    void insert(char *s, int n){\n        int rt = 0, x ; pre[n].p_b(0) ;\n        for (int i = 1 ; i <= L[n] ; ++ i){\n            x = s[i] - 'a' ;\n            if (!trie[rt][x])\n                trie[rt][x] = ++ sz,\n                ans[trie[rt][x]] = (26ll * ans[rt] + x) % Mod ;\n            pre[n].p_b(trie[rt][x]) ; rt = trie[rt][x] ;\n        }\n    }\n    void build(){\n        for (int i = 0 ; i < Sigma ; ++ i)\n            if (trie[0][i]) q.push(trie[0][i]) ;\n        while (!q.empty()){\n            int n = q.front() ; add(fail[n], n), q.pop() ;\n//            cout << n << endl ;\n            for (int i = 0 ; i < 26 ; ++ i){\n                if (!trie[n][i]) trie[n][i] = trie[fail[n]][i] ;\n                else fail[trie[n][i]] = trie[fail[n]][i], q.push(trie[n][i]) ;\n            }\n        }\n    }\n}AC ;\nvoid dfs(int u){\n    sze[u] = 1, dep[u] = dep[fa[u]] + 1 ;\n    for (int k = head[u] ; k ; k = next(k)){\n        fa[to(k)] = u, dfs(to(k)), sze[u] += sze[to(k)] ;\n        if (!son[u] || sze[to(k)] > sze[son[u]]) son[u] = to(k) ;\n    }\n}\nvoid dfs2(int u, int tp){\n    top[u] = tp ;\n    if (son[u]) dfs2(son[u], tp) ;\n    for (int k = head[u] ; k ; k = next(k))\n        if (to(k) != son[u]) dfs2(to(k), to(k)) ;\n}\nint lca(int u, int v){\n    // qw(u, '\\n', true), qw(v, '\\n', true) ;\n    // cout << u << \" \" << v << endl ;\n    while (top[u] != top[v]){\n        if (dep[top[u]] >= dep[top[v]]) u = fa[top[u]] ;\n        else v = fa[top[v]] ;\n    }\n    return dep[u] < dep[v] ? u : v ;\n}\nint qr(){\n    int r = 0 ; char c = getchar() ;\n    while (!isdigit(c)) c = getchar() ;\n    while (isdigit(c)) r = (r << 1) + (r << 3) + c - 48, c = getchar() ;\n    return r ;\n}\nint main(){\n    cin >> T ;\n    for (int i = 1 ; i <= T ; ++ i)\n        scanf(\"%s\", S + 1), L[i] = strlen(S + 1), AC.insert(S, i) ;\n    AC.build() ; cin >> M ; dfs(0), dfs2(0, 0) ;\n     int p, l, q, r, x, y ;\n    while (M --){\n        p = qr(), l = qr(), q = qr(), r = qr() ;\n        x = pre[p][l], y = pre[q][r], printf(\"%d\\n\", AC.ans[lca(x, y)]) ;\n    }\n}\n\n```",
        "postTime": 1576743908,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4600 \u3010[HEOI2012]\u65c5\u884c\u95ee\u9898\u3011"
    },
    {
        "content": "# HEOI2012 \u65c5\u884c\u95ee\u9898\n\n\u8fd9\u9898\u6ca1\u6709\u5fc5\u8981\u7528\u6811\u5256\u5440\uff0c\u8fd9\u91cc\u6709\u4e00\u7bc7\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u3002\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9 $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5728\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e2d\u9009\u4e24\u4e2a\u524d\u7f00\uff0c\u8981\u6c42\u8f93\u51fa\u5b83\u4eec\u6ee1\u8db3\u8981\u6c42\u7684\u516c\u5171\u540e\u7f00\u7684\u54c8\u5e0c\u503c\u3002\u8fd9\u4e2a\u516c\u5171\u540e\u7f00\u5fc5\u987b\u5728\u7ed9\u51fa\u7684 $n$ \u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u4e2d\u51fa\u73b0\uff0c\u5e76\u4e14\u8981\u6c42\u5c3d\u53ef\u80fd\u957f\u3002\n\n## \u601d\u8def\n\n\u5bf9\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32\u5efa\u7acb AC \u81ea\u52a8\u673a\u3002\n\n\u53d1\u73b0\u6bcf\u4e2a\u524d\u7f00\u90fd\u5bf9\u5e94\u7740\u786e\u5b9a\u7684\u8282\u70b9\uff0c\u800c\u6bcf\u4e2a\u8282\u70b9\u4e00\u5b9a\u80fd\u4ee3\u8868\u4e00\u4e2a\u51fa\u73b0\u8fc7\u7684\u524d\u7f00\u3002\u53ea\u8981\u5728\u6784\u9020\u65f6\u5c06\u6bcf\u4e2a\u524d\u7f00\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u5b58\u5230\u5bf9\u5e94\u8282\u70b9\u4e0a\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u4ece\u627e\u4e00\u4e2a\u524d\u7f00\u7684\u54c8\u5e0c\u503c\u53d8\u6210\u4e86\u627e\u4e00\u4e2a\u8282\u70b9\u4e86\u3002\n\n\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u5728\u540e\u7f00\u94fe\u63a5\u6811\u4e0a\u7684\u7956\u5148\u5c31\u662f\u5b83\u6700\u957f\u7684\u975e\u81ea\u8eab\u7684\u540e\u7f00\u3002\u4e5f\u5c31\u662f\u8bf4\u4e24\u4e2a\u524d\u7f00\u7684\u8282\u70b9\u5728\u540e\u7f00\u94fe\u63a5\u6811\u4e0a\u7684\u516c\u5171\u7956\u5148\u5c31\u662f\u4ed6\u4eec\u7684\u516c\u5171\u540e\u7f00\uff0c\u800c\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u957f\u540e\u7f00\u5c31\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u6240\u4ee5\u672c\u9898\u5c31\u662f\u6784\u9020 AC \u81ea\u52a8\u673a\u7136\u540e\u5728\u540e\u7f00\u94fe\u63a5\u6811\u4e0a\u6c42 LCA\u3002\n\n### \u67e5\u8be2 LCA\n\n\u6700\u7ec8\u4ee3\u7801\u4f7f\u7528\u4e86\u7ebf\u6bb5\u6811\u5728\u6b27\u62c9\u5e8f\u4e0a\u67e5\u8be2\u533a\u95f4\u6700\u6d45\u70b9\uff0c\u6ca1\u6709\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff08\u56e0\u4e3a\u6211\u4e0d\u4f1a\uff09\n\n### \u9632\u6b62\u8bef\u5bfc\uff0c\u5148\u653e AC \u4ee3\u7801\n\n\u7531\u4e8e\u672c\u9898\u7a7a\u95f4\u5361\u5f97\u6bd4\u8f83\u7d27\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u5728\u540e\u9762\u653e\u51fa\u4f18\u5316\u8fc7\u7a0b\u3002\n\n```cpp\nconst unsigned MOD(1000000007);\nconst char _0(0), _26(26);\nunsigned Nn, CntS(0), Len, m, n, Cnt(0), A, B, C, D, FindL, FindR, t, Ans(0), Tmp[2000005];\nchar b, Addx;\nstruct Node {\n  unsigned Dep, Hash, DFSr, SubDFSr, To[26], Fa, Fail, Son, Bro;\n}N[1000005], *CntN(N), *Now(N);\nstruct Sg {\n  unsigned LS, RS, Val;\n}S[4000005];\nvoid Qry(Sg *x, unsigned L, unsigned R) {\n  if((FindL <= L) && (R <= FindR)) {\n    if(Now->Dep > N[x->Val].Dep) Now = N + x->Val; \n    return; \n  }\n  register unsigned Mid((L + R) >> 1);\n  if(Mid >= FindL) Qry(S + x->LS, L, Mid);\n  if(Mid < FindR) Qry(S + x->RS, Mid + 1, R);\n}\nvoid BuildSg(Sg *x, unsigned L, unsigned R) {\n  if(L == R) {x->Val = Tmp[L];return;}\n  register unsigned Mid((L + R) >> 1);\n  BuildSg(S + (x->LS = ++CntS), L, Mid);\n  BuildSg(S + (x->RS = ++CntS), Mid + 1, R);\n  if(N[S[x->LS].Val].Dep < N[S[x->RS].Val].Dep) x->Val = S[x->LS].Val;\n  else x->Val = S[x->RS].Val;\n}\nunsigned Pool[20000005], *Pos[1000005], Top(0);\nstruct Quu {\n  unsigned P; char Chr;\n}TmpQ;\nqueue<Quu> Q;\nvoid Add() {\n  if(!Now->To[Addx]) Now->To[Addx] = ++CntN - N, CntN->Fa = Now - N, CntN->Son = 0x3f3f3f40;\n  N[Now->To[Addx]].Hash = (((unsigned long long)26 * Now->Hash) + Addx) % MOD, Now = N + Now->To[Addx];\n}\nvoid Build() {\n  TmpQ.P = 0;\n  Q.push(TmpQ);\n  register Node *x, *Back;\n  register char c; \n  while (Q.size()) {\n    TmpQ = Q.front(), Q.pop();\n    x = N + TmpQ.P, c = TmpQ.Chr;\n    if(x->Fa < 0x3f3f3f3f) {\n      Back = N + N[x->Fa].Fail;\n      while (Back < N + 0x3f3f3f3f) {\n        if(Back->To[c]) {\n          x->Fail = Back->To[c];\n          x->Bro = N[Back->To[c]].Son;\n          N[Back->To[c]].Son = x - N;\n          break; \n        }\n        Back = N + Back->Fail;\n      }\n      if(!(x->Fail)) {\n        x->Fail = 0;\n        x->Bro = N->Son;\n        N->Son = x - N;\n      }\n    }\n    for (register char i(_0); i < _26; ++i) if(x->To[i]) TmpQ.P = x->To[i], TmpQ.Chr = i, Q.push(TmpQ);\n  }\n}\nvoid DFS(Node *x) {\n  Tmp[++Cnt] = x - N, x->DFSr = Cnt;\n  register Node *So(N + x->Son);\n  while (So < N + 0x3f3f3f3f) So->Dep = x->Dep + 1, DFS(So), So = N + So->Bro;\n  Tmp[++Cnt] = x - N, x->SubDFSr = Cnt;\n  return;\n}\nint main() {\n  n = RD();\n  for (register unsigned i(1); i <= n; ++i) {\n    while ((b = getchar()) < 'a');\n    Now = N, Pos[i] = Pool + Top + 1;\n    while (b >= 'a') Addx = b - 'a', Add(), Pool[++Top] = Now - N, b = getchar();\n  }\n  N[0].Son = N[0].Fa = N[0].Fail = 0x3f3f3f40, Build(), N->Dep = 1, DFS(N), Nn = CntN - N + 1, Nn <<= 1, BuildSg(S, 1, Nn);\n  m = RD(), N[Nn + 1].Dep = 0x3f3f3f3f;\n  for (register unsigned i(1); i <= m; ++i) {\n    A = RD(), B = RD(), C = RD(), D = RD();\n    FindL = N[Pos[A][B - 1]].DFSr, FindR = N[Pos[C][D - 1]].DFSr;\n    if(FindL > FindR) swap(FindL, FindR);\n    if(N[Tmp[FindL]].SubDFSr > FindR) Now = N + Tmp[FindL];\n    else Now = N + Nn + 1, Qry(S, 1, Nn), Now = N + Now->Fail;\n    printf(\"%u\\n\", Now->Hash);\n  }\n  return Wild_Donkey;\n}\n```\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u6784\u9020 AC \u81ea\u52a8\u673a\uff0c\u7528 ST \u6c42 LCA\uff0c\u53ef\u4ee5\u505a\u5230 $O(1)$ \u67e5\u8be2\uff0c\u4f46\u662f\u5361\u7a7a\u95f4\u53ea\u80fd\u5f97 $80'$\u3002\n\n```cpp\nconst unsigned MOD(1000000007);\nconst char _0(0), _26(26);\nunsigned Log[1000005], Bin[25], ST[2000005][22], Nn, Len, m, n, Cnt(0), A, B, C, D, t, Ans(0), Tmp(0);\nchar b;\nstruct Node {\n  unsigned Dep, Hash, DFSr;\n  Node *To[26], *Fa, *Fail, *Son, *Bro;\n}N[1000005], *CntN(N), *Now(N);\nvector <unsigned> Pos[1000005];\nstruct Quu {\n  Node *P;char Chr;\n}Q[1000005], *Hd(Q), *Tl(Q);\nvoid Add(char x) {\n  if(!(Now->To[x])) Now->To[x] = ++CntN, CntN->Fa = Now;\n  Now->To[x]->Hash = (((unsigned long long)26 * Now->Hash) + x) % MOD, Now = Now->To[x];\n}\nvoid Build() {\n  (++Tl)->P = N;\n  register Node *x, *Back;\n  register char c; \n  while (Tl != Hd) {\n    x = (++Hd)->P, c = Hd->Chr;  \n    if(x->Fa) {\n      Back = x->Fa->Fail;\n      while (Back) {\n        if(Back->To[c]) {\n          x->Fail = Back->To[c];\n          x->Bro = Back->To[c]->Son;\n          Back->To[c]->Son = x;\n          break; \n        }\n        Back = Back->Fail;\n      }\n      if(!(x->Fail)) {\n        x->Fail = N;\n        x->Bro = N->Son;\n        N->Son = x;\n      }\n    }\n    for (register char i(_0); i < _26; ++i) if(x->To[i]) (++Tl)->P = x->To[i], Tl->Chr = i;\n  }\n}\nvoid DFS(Node *x) {\n  ST[++Cnt][0] = x - N, x->DFSr = Cnt;\n  register Node *So(x->Son);\n  while (So) So->Dep = x->Dep + 1, DFS(So), So = So->Bro;\n  ST[++Cnt][0] = x - N;\n  return;\n}\ninline Node *LCA(Node *x, Node *y) {\n  if(x->DFSr > y->DFSr) swap(x, y);\n  register unsigned TmpL(Log[y->DFSr - x->DFSr + 1]);\n  register Node *TmpP;\n  if(N[ST[x->DFSr][TmpL]].Dep < N[ST[y->DFSr - Bin[TmpL] + 1][TmpL]].Dep) TmpP = N + ST[x->DFSr][TmpL];\n  else TmpP = N + ST[y->DFSr - Bin[TmpL] + 1][TmpL];\n  if(TmpP == x) return x;\n  return TmpP->Fail;\n}\nint main() {\n  n = RD();\n  for (register unsigned i(1); i <= n; ++i) {\n    while ((b = getchar()) < 'a');\n    Now = N;\n    while (b >= 'a') Add(b - 'a'), Pos[i].push_back(Now - N), b = getchar();\n  }\n  Build(), N->Dep = 1, DFS(N), Nn = CntN - N + 1, Nn <<= 1;\n  for (register unsigned i(1), j(0); i <= Nn; i <<= 1, ++j) Bin[j] = i, Log[i] = j;\n  for (register unsigned i(3); i <= Nn; ++i) Log[i] = max(Log[i - 1], Log[i]);\n  for (register unsigned i(1), j(0); i < Nn; i <<= 1, ++j) {\n    for (register unsigned k(1); k + (i << 1) <= Nn + 1; ++k) {\n      if(N[ST[k][j]].Dep < N[ST[k + i][j]].Dep) ST[k][j + 1] = ST[k][j];\n      else ST[k][j + 1] = ST[k + i][j];\n    }\n  }\n  m = RD();\n  for (register unsigned i(1); i <= m; ++i) {\n    A = RD(), B = RD(), C = RD(), D = RD();\n    printf(\"%u\\n\", LCA(N + Pos[A][B - 1], N + Pos[C][D - 1])->Hash);\n  }\n  return Wild_Donkey;\n}\n```\n\n### \u7ebf\u6bb5\u6811 LCA + `unordered_map` \u4f18\u5316\n\n\u53d1\u73b0 ST \u8868\u672c\u8d28\u4e0a\u662f\u5728\u6b27\u62c9\u5e8f\u4e0a\u6c42\u533a\u95f4\u6df1\u5ea6\u6700\u5c0f\u70b9\u3002\u505a\u5230\u4e86 $O(1)$ \u67e5\u8be2\uff0c\u4ee3\u4ef7\u662f $O(tot\\log tot)$\u3002\n\n\u8fd9\u65f6\u65f6\u95f4\u5c1a\u6709\u7ed3\u4f59\uff0c\u4f46\u662f\u7a7a\u95f4\u5403\u7d27\uff0c\u6240\u4ee5\u672c\u9898\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\n\n\u601d\u8003\u533a\u95f4\u67e5\u8be2\u6700\u503c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5728 $O(\\log tot)$ \u7684\u65f6\u95f4\u5185\u67e5\u8be2\uff0c\u7a7a\u95f4\u53ea\u9700\u8981 $O(tot)$\u3002\n\n\u8fd9\u662f\u53d1\u73b0\u8fd8\u662f MLE\uff0c\u74f6\u9888\u5728\u8f6c\u79fb\u8fb9\uff0c\u4e8e\u662f\u4f7f\u7528 `unordered_map` \u4f18\u5316\u7a7a\u95f4\u3002\n\n\u4e3a\u4e86\u4f18\u5316\u7a7a\u95f4\uff0c\u4e0d\u5b58\u50a8\u7ebf\u6bb5\u6811\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\uff0c\u800c\u662f\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u51fd\u6570\u4e2d\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u5e38\u6570\u8fc7\u5927\uff0c\u7a0b\u5e8f\u4ece MLE \u53d8\u6210\u4e86 TLE\u3002\u4ecd\u7136\u662f $80'$\u3002\n\n```cpp\nconst unsigned MOD(1000000007);\nconst char _0(0), _26(26);\nunsigned Nn, CntS(0), Len, m, n, Cnt(0), A, B, C, D, FindL, FindR, t, Ans(0), Tmp[2000005];\nchar b, Addx;\nstruct Node {\n  unsigned Dep, Hash, DFSr, SubDFSr, To[26], Fa, Fail, Son, Bro;\n}N[1000005], *CntN(N), *Now(N);\nstruct Sg {\n  unsigned LS, RS, Val;\n}S[4000005];\nvoid Qry(Sg *x, unsigned L, unsigned R) {\n  if((FindL <= L) && (R <= FindR)) {\n    if(Now->Dep > N[x->Val].Dep) Now = N + x->Val; \n    return; \n  }\n  register unsigned Mid((L + R) >> 1);\n  if(Mid >= FindL) Qry(S + x->LS, L, Mid);\n  if(Mid < FindR) Qry(S + x->RS, Mid + 1, R);\n}\nvoid BuildSg(Sg *x, unsigned L, unsigned R) {\n  if(L == R) {x->Val = Tmp[L];return;}\n  register unsigned Mid((L + R) >> 1);\n  BuildSg(S + (x->LS = ++CntS), L, Mid);\n  BuildSg(S + (x->RS = ++CntS), Mid + 1, R);\n  if(N[S[x->LS].Val].Dep < N[S[x->RS].Val].Dep) x->Val = S[x->LS].Val;\n  else x->Val = S[x->RS].Val;\n}\nunsigned Pool[20000005], *Pos[1000005], Top(0);\nstruct Quu {\n  unsigned P; char Chr;\n}TmpQ;\nqueue<Quu> Q;\nvoid Add() {\n  if(!Now->To[Addx]) Now->To[Addx] = ++CntN - N, CntN->Fa = Now - N, CntN->Son = 0x3f3f3f40;\n  N[Now->To[Addx]].Hash = (((unsigned long long)26 * Now->Hash) + Addx) % MOD, Now = N + Now->To[Addx];\n}\nvoid Build() {\n  TmpQ.P = 0;\n  Q.push(TmpQ);\n  register Node *x, *Back;\n  register char c; \n  while (Q.size()) {\n    TmpQ = Q.front(), Q.pop();\n    x = N + TmpQ.P, c = TmpQ.Chr;\n    if(x->Fa < 0x3f3f3f3f) {\n      Back = N + N[x->Fa].Fail;\n      while (Back < N + 0x3f3f3f3f) {\n        if(Back->To[c]) {\n          x->Fail = Back->To[c];\n          x->Bro = N[Back->To[c]].Son;\n          N[Back->To[c]].Son = x - N;\n          break; \n        }\n        Back = N + Back->Fail;\n      }\n      if(!(x->Fail)) {\n        x->Fail = 0;\n        x->Bro = N->Son;\n        N->Son = x - N;\n      }\n    }\n    for (register char i(_0); i < _26; ++i) if(x->To[i]) TmpQ.P = x->To[i], TmpQ.Chr = i, Q.push(TmpQ);\n  }\n}\nvoid DFS(Node *x) {\n  Tmp[++Cnt] = x - N, x->DFSr = Cnt;\n  register Node *So(N + x->Son);\n  while (So < N + 0x3f3f3f3f) So->Dep = x->Dep + 1, DFS(So), So = N + So->Bro;\n  Tmp[++Cnt] = x - N, x->SubDFSr = Cnt;\n  return;\n}\nint main() {\n  n = RD();\n  for (register unsigned i(1); i <= n; ++i) {\n    while ((b = getchar()) < 'a');\n    Now = N, Pos[i] = Pool + Top + 1;\n    while (b >= 'a') Addx = b - 'a', Add(), Pool[++Top] = Now - N, b = getchar();\n  }\n  N[0].Son = N[0].Fa = N[0].Fail = 0x3f3f3f40, Build(), N->Dep = 1, DFS(N), Nn = CntN - N + 1, Nn <<= 1, BuildSg(S, 1, Nn);\n  m = RD(), N[Nn + 1].Dep = 0x3f3f3f3f;\n  for (register unsigned i(1); i <= m; ++i) {\n    A = RD(), B = RD(), C = RD(), D = RD();\n    FindL = N[Pos[A][B - 1]].DFSr, FindR = N[Pos[C][D - 1]].DFSr;\n    if(FindL > FindR) swap(FindL, FindR);\n    if(N[Tmp[FindL]].SubDFSr > FindR) Now = N + Tmp[FindL];\n    else Now = N + Nn + 1, Qry(S, 1, Nn), Now = N + Now->Fail;\n    printf(\"%u\\n\", Now->Hash);\n  }\n  return Wild_Donkey;\n}\n```\n\n### \u4fe1\u4ef0\u5d29\u584c\n\n$64$ \u4f4d\u673a\u7684\u6307\u9488\u6bd4\u6574\u5f62\u5927\u4e00\u500d\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u6307\u9488\u6362\u6210\u6570\u7ec4\uff0c\u7136\u540e\u6210\u529f\u5728\u6ca1\u6709 `unordered_map` \u7684\u524d\u63d0\u4e0b\u5c06\u5185\u5b58\u538b\u5230\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002\n\n\u4ee3\u7801\u5c31\u662f\u4e00\u5f00\u59cb\u7684\u90a3\u4efd\u4ee3\u7801\u3002\n",
        "postTime": 1629653002,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "HEOI2012 \u65c5\u884c\u95ee\u9898"
    },
    {
        "content": "\u9898\u76ee\u4e0d\u96be\uff0c\u4f46\u662f\u7406\u89e3\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u521a\u5f00\u59cb\u6ca1\u770b\u61c2\u9898\u610f\n\n\u8003\u8651\u591a\u4e32\u95ee\u9898\u76f4\u63a5\u63d2\u5165ac\u81ea\u52a8\u673a\u5c31\u53ef\u4ee5\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u7ed9\u5b9a\u4e24\u4e2a\u4e32\uff0c\u7b54\u6848\u5c31\u662f\u4ed6\u4eec\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u5e76\u4e14\u8981\u51fa\u73b0\u8fd9\u4e2a\u5730\u533a\n\n\u53d1\u73b0\u5c31\u662f\u540e\u7f00\u6070\u662f\u524d\u7f00\uff0c\u8fd9\u6070\u597d\u7b26\u5408\u591a\u4e32ac\u81ea\u52a8\u673afail\u6811\u7684\u6027\u8d28\n\n\u6240\u4ee5\u6211\u4eec\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u5c31\u662f\u8be2\u95ee\u8fd9\u4e24\u4e2a\u70b9\u7684lca\n\n\u5177\u4f53\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u7684ans\u6570\u7ec4\uff0c\u5e76\u4e14\u7528vector\u52a8\u6001\u8bb0\u5f55\u4e00\u4e0b\u5206\u522b\u5c5e\u4e8e\u7684\u8282\u70b9\n\n\u8fd8\u6709\u6c42lca\u4e0d\u80fd\u7528\u500d\u589e\uff0cta\u53c8\u88ab\u5361\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u6811\u5256lca\u5b9e\u73b0\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 1000005, lhc = 1e9 + 7;\n\nint n, ch[N][26], fail[N], ttt, ans[N]; char str[N];\nint lnk[N], nxt[N], fst[N], tot;\nint dep[N], fa[N], sz[N], son[N], top[N];\nvector<int> rec[N]; \n\nvoid BFS() {\n\tqueue<int> que; while (!que.empty()) que.pop();\n\tfor (int i = 0; i < 26; i++) if (ch[0][i]) que.push(ch[0][i]);\n\twhile (!que.empty()) {\n\t\tint u = que.front(); que.pop();\n\t\tfor (int i = 0; i < 26; i++)\n\t\t\tif (!ch[u][i]) ch[u][i] = ch[fail[u]][i];\n\t\t\telse que.push(ch[u][i]), fail[ch[u][i]] = ch[fail[u]][i];\n\t}\n}\n\nvoid adde(int u, int v) {\n\t// printf(\"adde: %d %d\\n\", u, v);\n\tlnk[++tot] = v; nxt[tot] = fst[u]; fst[u] = tot;\n}\nvoid gt(int u, int f) {\n\tdep[u] = dep[f] + 1; fa[u] = f; sz[u] = 1;\n\tfor (int i = fst[u]; i; i = nxt[i]) {\n\t\tint v = lnk[i];\n\t\tif (v != f) {\n\t\t\tgt(v, u), sz[u] += sz[v];\n\t\t\tif (sz[v] > sz[son[u]]) son[u] = v;\n\t\t}\n\t}\n}\nvoid gt_tp(int u, int tp) {\n\ttop[u] = tp; if (son[u]) gt_tp(son[u], tp);\n\tfor (int i = fst[u]; i; i = nxt[i]) {\n\t\tint v = lnk[i]; if (v != fa[u] && v != son[u]) gt_tp(v, v);\n\t}\n}\nint LCA(int u, int v) {\n\twhile (top[u] != top[v]) {\n\t\tif (dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tu = fa[top[u]];\n\t}\n\treturn dep[u] < dep[v] ? u : v;\n}\n\nint main() {\n\tn = read();\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%s\", str + 1);\n\t\tint u = 0, l = strlen(str + 1);\n\t\trec[i].resize(l + 1);\n\t\tfor (int j = 1; j <= l; j++) {\n\t\t\tint p = str[j] - 'a', lst = u;\n\t\t\tif (!ch[u][p]) ch[u][p] = ++ttt;\n\t\t\tu = ch[u][p], rec[i][j] = u, ans[u] = ((ll)ans[lst] * 26ll + p) % lhc;\n\t\t}\n\t}\n\tBFS(); for (int i = 1; i <= ttt; i++) adde(fail[i], i);\n\tgt(0, 0), gt_tp(0, 0);\n\tint q = read();\n\twhile (q--) {\n\t\tint i = read(), j = read(), k = read(), l = read();\n\t\tint u = rec[i][j], v = rec[k][l];\n\t\tprintf(\"%d\\n\", ans[LCA(u, v)]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1593838383,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4600 \u3010[HEOI2012]\u65c5\u884c\u95ee\u9898\u3011"
    }
]