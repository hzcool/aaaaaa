[
    {
        "content": "\u770b\u5230\u9898\u89e3\u597d\u591adijkstra\uff0c\u4f5c\u4e3a\u4e00\u540d\u949f\u7231\u4e8espfa\u7684\u849f\u84bb\u770b\u4e0d\u4e0b\u53bb\u4e86\u3002\n\n\u6709\u4e9bspfa\u8981\u8dd1\u4e24\u8fb9\uff0c\u4ee3\u7801\u91cf\u8981\u66fe\u957f\u597d\u591a(\u867d\u7136\u590d\u5236)\uff0c\u800c\u4e14\u8fd8\u6162\u3002\n\n\u4e0b\u9762\u5f00\u59cb\u6211\u7684\u8868\u6f14\uff1a\n\n\u9996\u5148\u770b\u6e05\u695a\u9898\u610f\uff1a\u9898\u76ee\u8bf4\u7684\u662f\u4ecen\u70b9\u5f80\u56de\u8d70(\u56e0\u4e3a\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u597d\u591a\u4eba\u6ce8\u610f\u5230\u4e5f\u8fc7\u4e86)\n\n\u63a5\u7740\u660e\u786e\u4e00\u4e2a\u6570\u7ec4\uff1a\n\t\n    d[i][0]\u8868\u793a\u5230i\u70b9\u7684\u6700\u77ed\u8def\n    \n    d[i][1]\u8868\u793a\u5230i\u70b9\u7684\u6b21\u77ed\u8def\n    \n\u521d\u59cb\u5316\u6570\u7ec4\uff0cd[n][0]=0,d[n][1]=INF,\u5176\u4ed6\u7684\u4e5f\u90fd\u662fINF\uff1b\n\n\u7136\u540e\u5c06\u70b9\u8fdb\u5165\u961f\u5217\u5f00\u59cb\uff0c\u8fdb\u884c\u5bf9\u5176\u4ed6\u70b9\u7684\u66f4\u6539\u3002\n\n\u8bb0\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u4e3au\uff0c\u76ee\u524d\u6240\u8fde\u8fb9\u7684\u7f16\u53f7\u4e3av\u3002\n\n\u6211\u4eec\u5c06\u5224\u65ad\u5206\u4e3a\u4e24\u5757\n\n(1)d[u][0]\u5bf9\u4e8ev\u70b9\u7684\u5f71\u54cd\u3002\n\n(2)d[u][1]\u5bf9\u4e8ev\u70b9\u7684\u5f71\u54cd\u3002\n\n####\t(1)\n\n\u5982\u679c$$d[u][0]+dis[u,v]<d[v][0]$$,\u4e5f\u5c31\u662f\u8bf4\u8db3\u5f71\u54cdv\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6\u7684\u6b21\u77ed\u8def\u53d8\u6210\u4e86\u66f4\u65b0\u524d\u7684\u6700\u77ed\u8def\uff0c\u6700\u77ed\u8def\u66f4\u65b0\u3002\n\n\n\u5982\u679c\n$$d[v][0]<=d[u][0]+dis[u,v]$$\n\n$$d[v][0]>=d[u][0]+dis[u,v]$$\n\n\u5c31\u662f\u8bf4\u4e0d\u8db3\u4ee5\u5f71\u54cd\u6700\u77ed\u8def\uff0c\u5374\u53ef\u4ee5\u5f71\u54cd\u6b21\u77ed\u8def\uff0c\u80fd\u66f4\u65b0\u81ea\u7136\u66f4\u65b0\u3002\n\n####\t(2)\n\n\u518d\u5f00\u59cb\u5224\u65add[u][1]\u5bf9v\u70b9\u7684\u5f71\u54cd\n\n\u524d\u8fb9(1)\u90e8\u5206\u5148\u66f4\u65b0\u7684\u6700\u77ed\u8def\u3002\n\n\u5982\u679c\u8db3\u77e3\u66f4\u65b0\u6700\u77ed\u8def\uff1a\u90a3\u4e48\u5230u\u70b9\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u5c0f\u4e8e\u5230u\u70b9\u7684\u6b21\u77ed\u8def\uff0c\u6240\u4ee5\u7528d[u][0]\u4e00\u5b9a\u66f4\u4f18\u3002\n\n\u5982\u679c\u6ca1\u6709\u66f4\u65b0\uff1a\u90a3\u4e48\u65e2\u7136\u6700\u77ed\u8def\u90fd\u4e0d\u80fd\u66f4\u65b0\u4e86\uff0c\u6b21\u77ed\u8def\u8fd8\u6709\u5565\u7528\u3002\n\n\u603b\u7684\u6765\u8bf4\u5bf9v\u70b9\u6700\u77ed\u8def\u8fd9\u4e00\u5757\u7406\u89e3\u5c31\u597d\uff0c\u6728\u6709\u4ee3\u7801\u3002\n\n\u5bf9\u4e8e\u6b21\u77ed\u8def\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u66f4\u65b0\u3002\n\n\u6ce8\u610f\u6ce8\u610f\uff1a\u4ee5\u4e0a\u5224\u65ad\u90fd\u9700\u8981\u6ce8\u610f\u6b21\u77ed\u8def\u4e25\u683c\u5c0f\u4e8e\u6700\u77ed\u8def\u3002\n\n\u6240\u4ee5\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <stack>\n#include <queue> \nusing namespace std;\nstruct ahah{\n\tint nxt,to,dis;\n}edge[200010];\nint n,m;\nint head[5010],tot;\nvoid add(int x,int y,int z)\n{\n\tedge[++tot].nxt=head[x],edge[tot].to=y,edge[tot].dis=z,head[x]=tot;\n}\nint d[5010][2];\nbool vis[5010];\nqueue <int> que;\nint read()\n{\n\tint sum=0,fg=1; char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')fg=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){sum=sum*10+c-'0';c=getchar();}\n\treturn sum*fg;\n}\nvoid spfa(int s)\n{\n\tmemset(d,0x7f,sizeof(d));\n\tque.push(s);vis[s]=1;\n\td[s][0]=0;\n\twhile(!que.empty())\n\t{\n\t\tint u=que.front();\n\t\tvis[u]=0;que.pop() ;\n\t\tfor(int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(d[v][0]>d[u][0]+edge[i].dis)\n\t\t\t{\n\t\t\t\td[v][1]=d[v][0];\n\t\t\t\td[v][0]=d[u][0]+edge[i].dis;\n\t\t\t\tif(!vis[v])vis[v]=1,que.push(v);\n\t\t\t}\n\t\t\tif(d[v][1]>d[u][0]+edge[i].dis&&d[u][0]+edge[i].dis>d[v][0])\n\t\t\t{\n\t\t\t\td[v][1]=d[u][0]+edge[i].dis;\n\t\t\t\tif(!vis[v])vis[v]=1,que.push(v);\n\t\t\t}\n\t\t\tif(d[v][1]>d[u][1]+edge[i].dis)\n\t\t\t{\n\t\t\t\td[v][1]=d[u][1]+edge[i].dis;\n\t\t\t\tif(!vis[v])vis[v]=1,que.push(v);\n\t\t\t}\n\t\t}\n\t} \n}\nint main()\n{\n\tint x,y,z;\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=read(),y=read(),z=read();\n\t\tadd(x,y,z);add(y,x,z);\n\t}\n\tspfa(n);\n\tprintf(\"%d\",d[1][1]);\n}\n```\n\n\u559c\u6b22\u60a8\u5c31\u70b9\u4e2a\u8d5e\uff0c\u8c22\u8c22\u3002\n\n\u987a\u4fbf\u6253\u4e00\u6ce2\u5e7f\u544a\uff0c([\u9003](https://www.cnblogs.com/rmy020718/p/9492307.html)\u3002",
        "postTime": 1534475746,
        "uid": 61727,
        "name": "Manjusaka\u4e36\u68a6\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u7528\u7684dij\u505a\u7684\uff0c\u6709\u4e00\u4e2a\u5f88\u4e25\u8083\u7684\u95ee\u9898\uff0c\u8fd9\u9898\u6570\u636e\u6709\u70b9\u6c34\uff0c\u5bfc\u81f4\u5927\u91cf\u901a\u8fc7\u7684\u751a\u81f3\u9898\u89e3\u91cc\u6709\u4e00\u534a\u601d\u60f3\u90fd\u662f\u9519\u8bef\u7684\uff08\u51c6\u786e\u6765\u8bf4\u662f\u4e0d\u5b8c\u5168\u7684\uff09\uff0cspfa\u7684\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662fdij\u7684\u6211\u6d4b\u4e86\u6240\u6709\u9898\u89e3\u7684\u6570\u636e\u53ea\u6709\u4e00\u4e2adij\u7684\u9898\u89e3\u8fc7\u4e86\uff0c\u6570\u636e\u5982\u4e0b\uff1a\n5 5\n1 2 5\n2 3 5\n3 4 4\n4 5 6\n1 5 21\n\u6beb\u65e0\u7591\u95ee\uff0c\u6b63\u786e\u7b54\u6848\u662f21\uff0c\u7136\u800c\u51e0\u4e4e\u6240\u6709dij\u7684\u7a0b\u5e8f\u8dd1\u51fa\u6765\u90fd\u662f28\u300228\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u770b\u51fa\u662f\u5427\u957f\u5ea6\u4e3a4\u7684\u591a\u8d70\u4e86\u4e24\u8fb9\uff0c\u800c\u6ca1\u6709\u9009\u62e921.\u5f88\u591a\u4eba\u56e0\u4e3a\u903b\u8f91\u628a21\u8fd9\u6761\u8def\u76f4\u63a5\u4e22\u6389\u4e86\u3002\ndij\u7684\u601d\u60f3\u4e0d\u5c31\u4e0d\u5728\u8fd9\u91cc\u8d58\u8ff0\u4e86\uff0c\u5927\u5bb6\u76f4\u63a5\u770b\u90a3\u4e9b\u6709\u95ee\u9898\u7684\u9898\u89e3\u5373\u53ef\u3002\u6211\u76f4\u63a5\u8bf4\u8bf4\u4ed6\u4eec\u7684\u903b\u8f91\u9519\u8bef\u6240\u5728\u5427\u3002\u4ed6\u4eec\u5728dis[v]>div[u]+d(u,v)\u65f6\uff0c\u76f4\u63a5\u66f4\u65b0\u4e86dis[v]\n.\u8fd9\u6837\u5c31\u5bfc\u81f4\u4e86\u66fe\u7ecf\u7684\u6700\u4f18\u89e3\u88ab\u76f4\u63a5\u4e22\u6389\u800c\u6ca1\u6709\u4f20\u7ed9dis2\uff08\u6b21\u77ed\u8def\uff09\uff0c\u5e94\u8be5\u5728\u66f4\u65b0\u524d\u4ee4div2[v]=dis[v]\uff1b\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6ca1\u6709\u66fe\u7ecf\u7684\u6700\u4f18\u89e3\u4f20\u9012\u7ed9\u4e86div2\u3002\n\u8d34\u4e00\u4e0b\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<stdio.h>\n#include <iostream>\n#include<string.h>\n#include <queue>\n#include<math.h>\n#include <vector>\n#define MAX 99999999\nusing namespace std;\n//\u4f18\u5148\u961f\u5217\u4f18\u5316\u7248\u7684dijk\nint num[5005],num2[5005];\nint n,s,t;\nstruct edge\n{\n    int to;\n    int cost;\n    bool operator < (const edge & a) const\n    {\n        return cost> a.cost;\n    }\n};\nvector<edge>g[5005];\npriority_queue<edge> vis;\nvoid dijkstra()\n{\n    int i,j;\n    for(i=1; i<=n; i++)\n        num[i]=MAX,num2[i]=MAX;\n    num[s]=0;\n    vis.push((edge)\n    {\n        s,0\n    });\n    while(!vis.empty())\n    {\n        edge node=vis.top();\n        vis.pop();\n        for(i=0; i<g[node.to].size(); i++)\n        {\n            if(num[g[node.to][i].to]>=num[node.to]+g[node.to][i].cost)\n            {\n                num[g[node.to][i].to]=num[node.to]+g[node.to][i].cost;\n                vis.push((edge)\n                {\n                    g[node.to][i].to,num[g[node.to][i].to]\n                });\n            }\n            else if(num2[g[node.to][i].to]>num[node.to]+g[node.to][i].cost)\n            {\n                num2[g[node.to][i].to]=num[node.to]+g[node.to][i].cost;\n                vis.push((edge)\n                {\n                    g[node.to][i].to,num[g[node.to][i].to]\n                });\n            }\n            if(num2[g[node.to][i].to]>g[node.to][i].cost+num2[node.to])\n                num2[g[node.to][i].to]=g[node.to][i].cost+num2[node.to];\n        }\n    }\n}\nint main()\n{\n    int i,j,x,y,z,m;\n    while(scanf(\"%d%d\",&n,&m)!=EOF)\n    {\n        edge tmp;\n        s=1;\n        for(i=0; i<m; i++)\n        {\n            scanf(\"%d%d%d\",&x,&tmp.to,&tmp.cost);\n            g[x].push_back(tmp);\n            int t=tmp.to;\n            tmp.to=x;\n            g[t].push_back(tmp);\n        }\n        dijkstra();\n        printf(\"%d\\n\",num2[n]);\n    }\n    return 0;\n}\n\n\n\n```",
        "postTime": 1535714586,
        "uid": 105341,
        "name": "\u5e93\u7279",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u76f4\u63a5\u8dd1\u4e24\u6b21spfa\uff0c\u4e00\u4e2a\u4ece\u8d77\u70b9\u8dd1\uff0c\u4e00\u4e2a\u4ece\u7ec8\u70b9\u8dd1\uff0c\u7136\u540e\u627e\u6b21\u77ed\u8def\u3002\u5148\u5f00\u59cb\u81ea\u5df1\u90fd\u4ece\u8d77\u70b9\u8dd1\uff0c\u7136\u540e\u5199\u4e86\u4e00\u4e2a\u5224\u65ad\uff0c\u7ed3\u679c\u53ea\u670930\u5206\uff0c\u5148\u770b\u770b\u774030\u5206\u7684\u4ee3\u7801\uff1a\n\n```cpp\ninline void spfa(int s)\n{\n    memset(vis,false,sizeof(vis));\n    memset(dis,0x7f,sizeof(dis));\n    deque<int>q;\n    q.push_back(s);\n    dis[s]=0;\n    vis[s]=true;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop_front();\n        vis[u]=false;\n        for(int i=head[u];i;i=a[i].net)\n        {\n            int v=a[i].to;\n            if(dis[v]>dis[u]+a[i].w)\n            {\n                vis[v]=true;\n                dis[v]=dis[u]+a[i].w;\n                if(q.empty()||dis[v]>dis[q.front()])\n                {\n                    q.push_back(v);\n                }\n                else\n                {\n                    q.push_front(v);\n                }\n            }\n        }\n    }\n}\ninline void spfa2(int s)\n{\n    int js=1;\n    memset(vis2,false,sizeof(vis2));\n    memset(dis2,0x7f,sizeof(dis2));\n    deque<int>q;\n    q.push_back(s);\n    dis2[s]=0;\n    vis2[s]=true;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop_front();\n        vis2[u]=false;\n        for(int i=head2[u];i;i=a2[i].net)\n        {\n            int v=a2[i].to;\n            if(dis2[v]>dis2[u]+a2[i].w&&dis2[u]+a2[i].w>dis[js])//\u5224\u65ad\u5728\u8fd9\u91cc\n            {            \n                js++;\n                dis2[v]=dis2[u]+a2[i].w;\n                vis2[v]=true;\n                if(q.empty()||dis2[v]>dis2[q.front()])\n                {\n                    q.push_back(v);\n                }\n                else\n                {\n                    q.push_front(v);\n                }\n            }\n        }\n    }\n}\n```\n\u7136\u540e\uff0c\u610f\u8bc6\u5230\u8fd9\u79cd\u5224\u65ad\u5f88\u660e\u663e\u7684\u6709\u95ee\u9898\uff0c\u7136\u540e\u6539\u4e86\u5f88\u4e45\uff0c\u7136\u540e\u76f4\u63a5\u628a\u8dd1\u7684\u8def\u7a0b\u679a\u4e3e\uff0c\u6bd4\u8f83\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u77ed\u8def\u7684\u957f\u5ea6\u5fc5\u987b\u4e25\u683c\u5927\u4e8e\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u4f46\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u4e0d\u5927\u4e8e\u6240\u6709\u9664\u6700\u77ed\u8def\u5916\u7684\u8def\u5f84\u7684\u957f\u5ea6\u3002\u7136\u540e\u53c8\u6539\u4e86\u4e00\u4e0b\u5c31A\u4e86\u3002\nAC\u4ee3\u7801\uff1a\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int gg=500010;\nstruct node{\n    int w;\n    int to;\n    int net;\n}a[gg];\nstruct node2{\n    int w;\n    int to;\n    int net;\n}a2[gg];\nint head[gg],head2[gg];\nint dis[gg],dis2[gg];\nbool vis[gg],vis2[gg];\nint r,n;\nint cnt,cnt2;\nint ans=1e9;\ninline void add(int i,int j,int w)\n{\n    a[++cnt].to=j;\n    a[cnt].net=head[i];\n    a[cnt].w=w;\n    head[i]=cnt;\n}\ninline void add2(int i,int j,int w)\n{\n    a2[++cnt2].to=j;\n    a2[cnt2].net=head2[i];\n    a2[cnt2].w=w;\n    head2[i]=cnt2;\n}\ninline void spfa(int s)\n{\n    memset(vis,false,sizeof(vis));\n    memset(dis,0x7f,sizeof(dis));\n    deque<int>q;\n    q.push_back(s);\n    dis[s]=0;\n    vis[s]=true;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop_front();\n        vis[u]=false;\n        for(int i=head[u];i;i=a[i].net)\n        {\n            int v=a[i].to;\n            if(dis[v]>dis[u]+a[i].w)\n            {\n                vis[v]=true;\n                dis[v]=dis[u]+a[i].w;\n                if(q.empty()||dis[v]>dis[q.front()])\n                {\n                    q.push_back(v);\n                }\n                else\n                {\n                    q.push_front(v);\n                }\n            }\n        }\n    }\n}\ninline void spfa2(int s)\n{\n    memset(vis2,false,sizeof(vis2));\n    memset(dis2,0x7f,sizeof(dis2));\n    deque<int>q;\n    q.push_back(s);\n    dis2[s]=0;\n    vis2[s]=true;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop_front();\n        vis2[u]=false;\n        for(int i=head2[u];i;i=a2[i].net)\n        {\n            int v=a2[i].to;\n            if(dis2[v]>dis2[u]+a2[i].w)\n            {            \n                dis2[v]=dis2[u]+a2[i].w;\n                vis2[v]=true;\n                if(q.empty()||dis2[v]>dis2[q.front()])\n                {\n                    q.push_back(v);\n                }\n                else\n                {\n                    q.push_front(v);\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    cin>>n>>r;\n    for(register int i=1;i<=r;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n        add(b,a,c);\n        add2(a,b,c);\n        add2(b,a,c);\n    }\n    spfa(1);\n//    cout<<dis[n]<<endl;\n    spfa2(n);\n    int minn=dis[n];\n    for(register int i=1;i<=n;i++)\n    {\n        for(register int j=head[i],k=head2[i];j,k;j=a[j].net,k=a2[k].net)\n        {\n            int v=a[j].to;\n            int v2=a2[k].to;\n            int w=a[j].w;\n            int w2=a2[k].w;\n            if(dis[i]+dis2[v2]+w>minn&&dis[i]+dis2[v2]+w<ans)\n                ans=dis[i]+dis2[v]+w;\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1511142249,
        "uid": 71542,
        "name": "\u6c6a\u4ece\u6587",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u672c\u9898\u5bf9\u6700\u77ed\u8def\u8981\u6c42\u6709\u5f88\u597d\u7684\u7406\u89e3\uff0c\u5728\u7528dijkstra\u65f6\u5019\uff0c\u5c31\u76f4\u63a5\u66f4\u65b0\u6b21\u77ed\u8def\uff0c\u7528d[]\u4ee3\u8868\u6700\u77ed\u8def\uff0c\u7528d2[]\u4ee3\u8868\u6b21\u77ed\u8def\uff0c\u7136\u540e\u5728\u677e\u5f1b\u7684\u65f6\u5019\u540c\u65f6\u66f4\u65b0\u4e24\u4e2a\u6570\u7ec4\uff0c\u8981\u5224\u65ad\u4e09\u4e2a\u6761\u4ef6\n\uff08u\u662f\u5f53\u524d\u8003\u8651\u7684\u70b9\uff0cv\u662f\u4e0eu\u6709\u8fb9\u76f8\u8fde\u7684\u70b9\uff0cd(u,v)\u8868\u793a\u4eceu\u5230v\u7684\u8fb9\u957f\uff09\n1.\u5982\u679cdis[v]>dis[u]+d(u,v)\uff0c\u5219\u66f4\u65b0dis[v]\n2.\u5982\u679cdis[v]<dis[u]+d(u,v)\uff08\u4e0d\u80fd\u53d6\u7b49\uff0c\u5426\u5219dis2[v]\u548cdis[v]\u53ef\u80fd\u76f8\u7b49\uff09\u4e14dis2[v]>dis[u]+d(u,v)\uff0c\u5219\u66f4\u65b0dis2[v]\n3.\u5982\u679cdis2[v]>dis2[u]+d(u,v)\uff0c\u5219\u66f4\u65b0dis2[v]\uff08\u663e\u7136\uff0c\u5982\u679c2\u6210\u7acb\uff0c\u66f4\u65b0\u540edis2[v]=dis[u]+d(u,v)<dis2[u]+d(u,v)\uff0c\u53733\u4e00\u5b9a\u4e0d\u6210\u7acb\uff09\n\u5982\u679c\u4e0a\u8ff0\u4e09\u4e2a\u6761\u4ef6\u4e2d\u6709\u4efb\u610f\u4e00\u4e2a\u6210\u7acb\uff0c\u5219\u5c06v\u5165\u961f\u3002\n\u672c\u9898\u63d0\u4ea4\u4e86\u5f88\u591a\u6b21\u624d\u8fc7\uff0c\u8bef\u533a\u5728\u4e8e\uff1a\u6ee1\u8db3\u4e0a\u8ff03\u4e2a\u6761\u4ef6\u5c06v\u5165\u961f\u5217\uff0cv\u7684\u957f\u5ea6\u4e00\u5b9a\u662fd[v]\u800c\u4e0d\u662fd2[v](\u5c3d\u7ba1\u89e6\u53d1\u7b2c2\u4e2a\u548c\u7b2c3\u4e2a\u6761\u4ef6\uff09\uff0c\u8fd9\u4e2a\u5730\u65b9WA \u4e86\u5f88\u4e45\u3002\n\u53e6\u5916\u5927\u5bb6\u90fd\u7528\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5efa\u56fe\uff0c\u6211\u8fd8\u662f\u4e60\u60ef\u90bb\u63a5\u8868\uff08vector\uff09\uff0c\u611f\u89c9\u4e5f\u6ca1\u5565\u5f71\u54cd\u3002\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nstruct edge\n{\n    int to;\n    int cost;\n};\nstruct sa\n{\n    int id;\n    int dis;\n    bool operator<(const sa &b) const\n    {\n        return dis>b.dis;\n    }\n\n};\nvector<edge> g[5001];\nint d[5001],d2[5001];\npriority_queue<sa> vis;\nint n,m;\nint dijkstra()\n{\nfor(int i=1;i<=n;i++)\n        d[i]=inf,d2[i]=inf;\n    d[1]=0;\n    vis.push((sa){1,0});\n    while(!vis.empty())\n    {\n        sa tp=vis.top();\n        vis.pop();\n        int u=tp.id;\n        int du=tp.dis;\n        for(int i=0;i<g[u].size();i++)\n        {\n            int v=g[u][i].to;\n            int w=g[u][i].cost;\n            int flag=0;\n            if (du+w<d[v])\n                d[v]=du+w,flag=1;\n            if (du+w>d[v]&&du+w<d2[v])\n                d2[v]=du+w,flag=1;\n            if (d2[u]+w<d2[v])\n                d2[v]=d2[u]+w,flag=1;\n            if (flag==1)\n            vis.push((sa){v,d[v]});\n\n        }\n\n    }\n\nreturn 0;\n}\nint main()\n{\n    int a,b,c;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>a>>b>>c;\n        g[a].push_back((edge){b,c});\n        g[b].push_back((edge){a,c});\n    }\n    dijkstra();\n\n    cout<<d2[n]<<endl;\n    return 0;\n}\n\n```\n        ",
        "postTime": 1531016479,
        "uid": 65643,
        "name": "\u5174\u5b89\u9ed1\u718a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "updata\uff1a\u88abDalao\u53c9\u4e86\u5624\u5624\u5624QAQ......\n\u6b63\u5982Dalao\u6240\u8bf4\uff0c\u5624\u8be5\u5728\u4fee\u6539\u6700\u77ed\u8def\u7684\u65f6\u5019\u628a\u6700\u77ed\u8def\u7684\u957f\u5ea6\u8d4b\u503c\u7ed9\u6b21\u77ed\u8defQAQ\n\u52a0\u4e86\u4e00\u53e5\u8bddQAQ\n(Ps:\u73b0\u5728\u770b\u81ea\u5df1\u7801\u98ce\u597d\u602aQAQ\u51d1\u5408\u7740\u770b\u5427QAQ)\n \n\u6b21\u77ed\u8def\u5e94\u8be5\u4f1a\u548c\u6700\u77ed\u8def\u6709\u5173\u7cfb\uff0c\u60f3\u5230dijkstra\uff0cSPFA...(\u5173\u4e8eSPFA......)\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684\u4e00\u6761\u8fb9\uff0c\u65e0\u975e\u51e0\u79cd\u60c5\u51b5\uff1a\n  \n  (1).\u66f4\u65b0\u4e86\u6700\u77ed\u8def\n  \n  (2).\u65e0\u6cd5\u66f4\u65b0\u6700\u77ed\u8def\uff0c\u6709\u53ef\u80fd\u66f4\u65b0\u6b21\u77ed\u8def\n  \n  (3).\u65e0\u6cd5\u66f4\u65b0\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\n  \n\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n\u66f4\u65b0\u6700\u77ed\u8def\u540e\u8981\u628a\u539f\u6700\u77ed\u8def\u8d4b\u503c\u7ed9\u6700\u77ed\u8def(\u514d\u5f97\u88ab\u53c9QAQ)\n\n\u60c5\u51b52\u53ea\u6709\u6ee1\u8db3\u52a0\u5165\u5f53\u524d\u8fb9\u540e\u4e25\u683c\u957f\u4e8e\u6700\u77ed\uff0c\u624d\u53bb\u66f4\u65b0\u6b21\u77ed\u8def\n\n\u6b21\u77ed\u8def\u5f53\u7136\u66f4\u65b0\u4e0d\u4e86\u6700\u77ed\u8def\u5566Baka\uff01QAQ\n\n\u5982\u679c\u6c42\u7a33\u8fd8\u662fdij\u5427QAQ\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#define maxn 101000\n#include<queue>\nusing namespace std;\nint tot=0,head[4*maxn],dist1[maxn],dist2[maxn];\nint m,ed;\nstruct node\n{\n    int v,val,next;\n}edge[200000];\nvoid add(int x,int y,int val)\n{\n     tot++;\n     edge[tot].v=y;\n     edge[tot].val=val;\n     edge[tot].next=head[x];\n     head[x]=tot;\n     tot++;\n     edge[tot].v=x;\n     edge[tot].val=val;\n     edge[tot].next=head[y];\n     head[y]=tot;\n}\nvoid dijkstra()\n{\n    //memset(vis,0,sizeof(vis));\n    memset(dist1,0x3F,sizeof(dist1));\n    memset(dist2,0x3F,sizeof(dist2)); \n    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n    q.push(make_pair(0,1));\n    dist1[1]=0;\n    while(!q.empty())\n    {\n        int temp=q.top().second,dis=q.top().first;\n        q.pop(); \n        if(dis>dist2[temp]) continue;\n        for(int i=head[temp];i;i=edge[i].next)\n        {\n            int cnt=edge[i].v;\n             if(dist1[cnt]>dis+edge[i].val)\n            {   \n\t\t\t    dist2[cnt]=dist1[cnt];\n                dist1[cnt]=dis+edge[i].val;\n                q.push(make_pair(dist1[cnt],cnt));\n            } \n             if(dist2[cnt]>dis+edge[i].val&&dis+edge[i].val>dist1[cnt])/**/\n             {\n                dist2[cnt]=dis+edge[i].val; \n                q.push(make_pair(dist2[cnt],cnt));\n             }    \n        }\n    }\n\n}\nint main()\n{\n    cin>>ed>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,val;\n        cin>>x>>y>>val;\n        add(x,y,val);\n    }\n    dijkstra();\n    cout<<dist2[ed]<<endl;\n    return 0;\n } \n```",
        "postTime": 1526300489,
        "uid": 50495,
        "name": "\u56db\u7cf8\u4e43",
        "ccfLevel": 0,
        "title": "p2865 \u8def\u969c \u6b21\u77ed\u8def\u957f\u5ea6\uff08dijkstra+\u4f18\u5148\u961f\u5217\uff09"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6b21\u77ed\u8def\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u96be\u5ea6\u8fd8\u662f\u4e0d\u5c0f\u7684\uff0c\u56e0\u6b64\u5199\u4e00\u7bc7\u9898\u89e3\u6765\u6307\u5bfc\u6307\u5bfc\u65b0\u56fe\u8bba\u5b66\u8005\u3002\n\n\u8fd9\u9053\u9898\u76ee\u601d\u60f3\u7684\u6838\u5fc3\u5728\u4e8e\u5efa\u7acb\u4e00\u4e2a\u6b21\u77ed\u8def\u6570\u7ec4\u6765\u5c06\u6b21\u77ed\u8def\u5b58\u8d77\u6765\uff0c\u63a5\u4e0b\u6765\u95ee\u9898\u5c31\u53ea\u6709\u600e\u4e48\u5b58\u4e86\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,num,y,z,head[5010],dis[5010],need[5010],b[5010];\nstruct Node{\n    int to,dis,next;\n}a[1000010];\ninline void add(int from,int to,int dis){\n    num++;\n    a[num].to=to;\n    a[num].dis=dis;\n    a[num].next=head[from];\n    head[from]=num;\t\n}\npriority_queue<pair<int,int> >q;\n//need\u4e3a\u6b21\u77ed\u8def\u6570\u7ec4,\u4e3a\u4e86\u6c42\u6b21\u77ed\u8def\u5c31\u4e0d\u7528vis\u6570\u7ec4\u4e86 \ninline void dij(){\t\n    q.push(make_pair(0,1));\n    memset(dis,0x7f,sizeof(dis));\t \n    dis[1]=0;\n    memset(need,0x7f,sizeof(need));\n    while(!q.empty()){\n        int tmp=q.top().second;\n        int w=-q.top().first;\t//\u8fd9\u6761\u65e2\u53ef\u80fd\u4e3a\u6700\u77ed\u8def\u5f84\u53c8\u53ef\u80fd\u4e3a\u6b21\u77ed\u8def \n        q.pop();\n        for(int i=head[tmp];i;i=a[i].next){\n            int k=a[i].to,d=a[i].dis;\n            if(dis[k]>w+d){\n                need[k]=dis[k];//\u5b58\u4e0b\u6b21\u77ed\u8def \n                dis[k]=w+d;\n                q.push(make_pair(-dis[k],k));\n                q.push(make_pair(-need[k],k));//\u6b21\u77ed\u8def\u540c\u6837\u9700\u8981\u5b58\u8fdb\u961f\u5217 \n            }\n            else{\n                if(need[k]>w+d){\n                    need[k]=w+d;//\u4e00\u5b9a\u8981\u5b58\u4e0b\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u6b21\u77ed\u8def \n                    q.push(make_pair(-need[k],k));\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>z;\n        add(x,y,z);\n        add(y,x,z);\n    }\n    dij();\n    cout<<need[n];\n    return 0;\n}//\u601d\u8def\u5e76\u4e0d\u96be\u60f3\u5230,\u8981\u597d\u597d\u6d88\u5316 \n```\n\u867d\u7136\u6211\u662f\u7528dij\u4f46\u7b2c\u4e8c\u7bc7\u9898\u89e3dalao\u7684\u90a3\u4e2a5 5 1 2 5 2 3 5 3 4 4 4 5 6 1 5 21\u597d\u50cf\u6211\u4e5f\u8dd1\u5f97\u8fc7(\uff3e\uff0d\uff3e)\uff0c\u601d\u8def\u5e94\u8be5\u6ca1\u95ee\u9898\u4e86\uff01\n\n\u8c22\u8c22\u89c2\u770b\uff01\uff01\uff01",
        "postTime": 1554386904,
        "uid": 99247,
        "name": "\u5514\u554a\u5514",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u597d\u591adijkstra\u7684\uff0c\u6211\u5c31\u6765\u4e00\u7bc7spfa\u7684\u5427\n\n\u597d\u50cf\u6709\u5f88\u591a\u9898\u89e3\u8bf4spfa\u8981\u8dd1\u4e24\u904d\uff1f\n\n\u4f46\u662f\u6211\u53ea\u7528\u4e86\u4e00\u904d\u5c31A\u4e86\u554a\n\n## \u601d\u8def\uff1a\n\ndist\u6570\u7ec4\u5f00\u4e8c\u7ef4\uff0c\u5206\u522b\u88c5\u6700\u5c0f\u8ddd\u79bb\u548c\u6b21\u5c0f\u8ddd\u79bb\u3002\n\n\u5148\u50cf\u5f80\u5e38\u4e00\u6837\u6253\u4e00\u4e2aspfa\uff0c\u7136\u540e\u5f80\u91cc\u9762\u585e\u4e00\u4e9bif\u5c31\u597d\u4e86\u3002\n\n\u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb\u7684\u6761\u4ef6\u4e0d\u7528\u8bf4\u4e86\uff0c\n\n### \u66f4\u65b0\u6b21\u5c0f\u8ddd\u79bb\u7684\u6761\u4ef6\u6709\u4e09\u79cd\uff1a\n\n1.\u66f4\u65b0\u4e86\u6700\u5c0f\u8ddd\u79bb\uff0c\u8981\u628a\u4e0a\u6b21\u7684\u6700\u5c0f\u8ddd\u79bb\u5148\u62ff\u7ed9\u6b21\u5c0f\u8ddd\u79bb\uff08\u521a\u5f00\u59cb\u6ca1\u60f3\u5230\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8c03\u4e86\u597d\u4e45\uff09\uff0c\u56e0\u4e3a\u4e0a\u6b21\u7684\u6700\u5c0f\u8ddd\u79bb\u5c31\u662f\u6bd4\u5f53\u524d\u8ddd\u79bb\u5927\u4e14\u6700\u5c0f\u7684\u8ddd\u79bb\uff08\u5373\u4e3a\u6b21\u77ed\u8ddd\u79bb\uff09\u3002\n\n2.\u867d\u7136\u53ef\u80fd\u5f53\u524d\u8def\u5f84\u65e0\u6cd5\u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb\uff0c\u4f46\u53ef\u80fd\u66f4\u65b0\u6b21\u5c0f\u8ddd\u79bb\uff0c\u8981\u52a0\u5224\u65ad\n\n3.\u4ece\u4e0a\u4e00\u4e2a\u70b9\u7684\u6b21\u77ed\u8ddd\u79bb\u66f4\u65b0\u8fd9\u4e00\u4e2a\u70b9\u7684\u6b21\u77ed\u8ddd\u79bb\n\n### \u6ce8\u610f\uff1a\n\n\u60f3\u8f6c\u79fb\u6b21\u77ed\u8ddd\u79bb\uff0c\u5fc5\u987b\u4fdd\u8bc1\u8be5\u8ddd\u79bb\u5c0f\u4e8e\u6700\u77ed\u8ddd\u79bb\u3002\n\n### \u5b8c\u6574\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ninline int Read(){\n\tint x=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n\treturn x;\n}\nint n,m;\nint dist[10101][2];//dist[i][0]\u88c5\u6700\u77ed\u8def,dist[i][1]\u6b21\u77ed\u8def\nstruct Node{\n\tint v;\n\tint next;\n\tint val;\n}node[202020];\nint head[5050],top;\ninline void addedge(int u,int v,int val){\n\tnode[++top].v=v;\n\tnode[top].val=val;\n\tnode[top].next=head[u];\n\thead[u]=top;\n}\ninline void add(int u,int v,int val){\n\taddedge(u,v,val);\n\taddedge(v,u,val);\n}\nint inque[5050];\nvoid spfa(){\n\tint s=1;\n\tmemset(dist,0x3f,sizeof(dist));\n\tqueue<int>q;\n\tq.push(s);\n\tdist[s][0]=0;\n\tdist[s][1]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tinque[u]=0;\n\t\tfor(int i=head[u];i;i=node[i].next){\n\t\t\tint d=node[i].v;\n\t\t\tif(dist[d][0]>dist[u][0]+node[i].val){\n\t\t\t\tdist[d][1]=dist[d][0];//\u6761\u4ef61 \n\t\t\t\tdist[d][0]=dist[u][0]+node[i].val;\n\t\t\t\tif(inque[d]==0){\n\t\t\t\t\tq.push(d);\n\t\t\t\t\tinque[d]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(\n\t\t\t(dist[d][1]>dist[u][0]+node[i].val&&dist[u][0]+node[i].val>dist[d][0])\n\t\t\t||(dist[d][1]==dist[d][0])){//\u4ece\u6700\u77ed\u8def\u8f6c\u79fb\uff08\u6761\u4ef62\uff09 \n\t\t\t\tdist[d][1]=dist[u][0]+node[i].val;\n\t\t\t\tif(inque[d]==0){\n\t\t\t\t\tq.push(d);\n\t\t\t\t\tinque[d]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dist[d][1]>dist[u][1]+node[i].val&&dist[u][1]+node[i].val>dist[d][0]){//\u4ece\u6b21\u77ed\u8def\u8f6c\u79fb\uff08\u6761\u4ef63\uff09 \n\t\t\t\tdist[d][1]=dist[u][1]+node[i].val;\n\t\t\t\tif(inque[d]==0){\n\t\t\t\t\tq.push(d);\n\t\t\t\t\tinque[d]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tregister int i;\n\tint u,v,val;\n\tn=Read(),m=Read();\n\tfor(i=1;i<=m;i++){\n\tu=Read(),v=Read(),val=Read();\n\tadd(u,v,val);\n\t}\n\tspfa();\n\tprintf(\"%d\",dist[n][1]);\n\treturn 0;\n}\n```",
        "postTime": 1537272518,
        "uid": 28088,
        "name": "\u94b1\u9038\u51e1",
        "ccfLevel": 6,
        "title": "spfa\u6b21\u77ed\u8def"
    },
    {
        "content": "# \u4e00\u53e5\u8bdd \u6df1\u641c\uff08DFS\uff09\n##### ~~\u7531\u4e8e\u6570\u636e\u6c34\u624d\u5bb9\u672c\u849f\u84bb\u8bf4\u6b64\u8bdd~~\n### \u65e2\u7136\u662f\u6c42\u6b21\u77ed\u8def\uff0c\u90a3\u4e48\u5148\u6363\u9f13\u51fa\u6700\u77ed\u8def\u505a\u6807\u51c6\uff0c\u518d\u6df1\u641c\u6c42\u89e3\uff1b\n#### \u8bbe\u6700\u77ed\u8def\u957f\u4e3as1,\u4e0e\u7ed3\u70b9n\u76f8\u8fde\u7684\u6700\u77ed\u8fb9\u7684\u957f\u5ea6\u4e3ac\uff0c\u8bbes2=s1+2*c,\u5219s2\u5c31\u662f\u6b21\u77ed\u8def\u957f\u5ea6\u7684\u4e0a\u754c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u8981\u8fdb\u884cDFS\u6df1\u641c\u5373\u53ef\uff0c\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u5229\u7528\u4e0a\u754cs2\u8fdb\u884c\u526a\u679d\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0s2\uff0c\u5c31\u53ef\u4ee5\u5728\u9898\u76ee\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u5f97\u5230\u7ed3\u679c\u3002\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff1b\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n\nint n,m;\nint x,y,z,T;\nint ans[1000000];\nint head[200500],cnt;\nint dis[200500];\nbool done[200500];\nstruct node {\n    int nxt,to,dis;\n}e[200500];\n\ninline void cdp(int from,int to,int dis) {\n    cnt ++;\n    e[cnt].to = to;\n    e[cnt].dis = dis;\n    e[cnt].nxt = head[from];\n    head[from] = cnt;\n}\n\nint numm;\nvoid dfs(int x,int nt) {\n    if(x == n) {\n        if(nt != dis[n]) T = min(T,nt);\n        return ;\n    }\n    if(nt > T) return ;\n    \n    for(int i = head[x]; i ;i = e[i].nxt) {\n        if(done[e[i].to]) continue ;\n        else {\n            done[e[i].to] = true;\n            dfs(e[i].to,nt + e[i].dis);\n            done[e[i].to] = false;\n        }\n    }\n}\n\nqueue< int > q;\ninline void spfa() {\n    for(int i = 1;i <= n;i ++) dis[i] = 999999999,done[i] = 0;\n    dis[1] = 0;\n    done[1] = 1;\n    q.push(1); \n    while(!q.empty()) {\n        int u = q.front();q.pop();\n        done[u] = 0;\n        for(int i = head[u]; i ;i = e[i].nxt) {\n            if(dis[e[i].to] > dis[u] + e[i].dis) {\n                dis[e[i].to] = dis[u] + e[i].dis;\n                if(!done[e[i].to]) {\n                    q.push(e[i].to);\n                    done[e[i].to] = 1; \n                }\n            }\n        }\n    }\n}\n\nint main() {\n    // freopen(\"maze.in\",\"r\",stdin);\n    //freopen(\"maze.out\",\"w\",stdout);\n    \n    int maxx = 999999999;\n    \n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1;i <= m;i ++) {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        cdp(x,y,z);cdp(y,x,z);\n        if(x == n || y == n) {\n            maxx = min(z,maxx);\n        }\n    }\n    \n    spfa();\n    T = dis[n] + 2 * maxx;\n    \n    dfs(1,0);\n    printf(\"%d\",T);\n    \n    //fclose(stdin);\n    //fclose(stdout);\n    return 0;\n}\n/*\n4 4\n1 2 2\n2 4 4\n2 3 3\n3 4 4\n*/",
        "postTime": 1561208793,
        "uid": 153839,
        "name": "\u6e05\u8fdc\u5b66\u4f1a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "  \u5728\u505a\u672c\u9898\u524d\uff0c\u4e00\u5b9a\u7406\u89e3\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u3002\n\u5f53\u7136\uff0c\u5e76\u4e0d\u9700\u8981\u5bf9\u6240\u6709\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u6709\u6df1\u523b\u4e86\u89e3\u3002\n\u6240\u4ee5\u4eca\u5929\u6211\u5c31\u7ed9\u5927\u5bb6\u5e26\u6765\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684dijsktra\u3002~~\uff08SPFA\u6211\u4e0d\u4f1a\uff09~~\n  \n   \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u7ecf\u5178\u7684dijkstra\u53ea\u80fd\u7ef4\u62a4\u6700\u77ed\u8def\uff0c\u600e\u4e48\u53bb\u7ef4\u62a4\u6b21\u77ed\u8def\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u540c\u65f6\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\u5c31\u884c\u4e86\u3002\n   \n   \u90a3\u600e\u4e48\u66f4\u65b0\u5462\uff1f\u6211\u4eec\u8bbedis1\u6570\u7ec4\u5b58\u6700\u77ed\u8def\uff0cdis2\u6570\u7ec4\u5b58\u6700\u957f\u8def\uff0c\u5f53\u627e\u5230\u4e00\u6761\u8def\uff0c\u6bd4dis1\u548cdis2\u90fd\u77ed\u65f6\uff0c\u5c31\u5148\u628a\u76ee\u524d\u6b21\u77ed\u8def\u8d4b\u4e3a\u76ee\u524d\u6700\u77ed\u8def\uff0c\u4e5f\u5c31\u662f\u8ba9dis2=dis1\uff0c\u518d\u628a\u76ee\u524d\u6700\u77ed\u8def\u8d4b\u4e3a\u627e\u5230\u7684\u66f4\u77ed\u8def\u3002\u5269\u4e0b\u7684\u5c31\u662fdijkstra\u7684\u677f\u5b50\u4e86\u3002\n   \n   \u5f53\u6211\u4eec\u5b58\u8fb9\u65f6\uff0c\u8fd8\u662f\u63a8\u8350\u5927\u5bb6\u7528\u90bb\u63a5\u8868\u5b58\u8fb9\uff0c\u53ea\u7528\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8dd1\u7684\u597d\u50cf\u8fd8\u6bd4vector\u5feb\uff0c\u4e0b\u9762\u5c31\u4e3a\u5927\u5bb6\u5e26\u6765\u4e00\u4e2a\u4e0d\u600e\u4e48\u597d\u770b\u7684dijkstra\u677f\uff1a\n   ```c\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<stack>\n#include<vector>\n#include<cstdio>\n#define ll long long\n#define inf 1e9+10\nusing namespace std;\nconst int maxn=1e5+10;\nstruct mxr\n{\n    int to,next,val;\n}e[2*maxn];\nint n,cnt,m,vis[maxn],head[maxn],s;\nint dis[maxn];\npriority_queue<pair<ll,int> >q;\ninline int read()\n{\n\tint s=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){ch=getchar();\n    if(ch=='-')f=-1;}\n\twhile(ch>='0'&&ch<='9')\n    s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*f;\n}\ninline void add(int u,int v,int w)\n{\n    e[cnt].to=v;\n    e[cnt].val=w;\n    e[cnt].next=head[u];\n    head[u]=cnt++;\n    return ;\n}\ninline void dij()\n{\n\tq.push(make_pair(0,s));\n    dis[s]=0;\n    while(!q.empty())\n    {\n        int now=q.top().second;\n        q.pop();\n        if(vis[now]) continue;\n        vis[now]=1;\n        for(int i=head[now];i!=-1;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(dis[v]>dis[now]+e[i].val)\n            {\n                dis[v]=dis[now]+e[i].val;\n                q.push(make_pair(-dis[v],v));\n            }\n        }\n    }\n    return ;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    cnt=0;\n    n=read(),m=read(),s=read();\n    for(int i=1;i<=n;i++) dis[i]=inf;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,w;\n        a=read(),b=read(),w=read();\n        add(a,b,w);\n    }\n    dij();\n    for(int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n\n```\n\u4e0b\u9762\u662f\u672c\u9898\u4ee3\u7801\uff1a\n```c\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<stack>\n#include<vector>\n#include<cstdio>\n#define ll long long\n#define inf 1e9+10\nusing namespace std;\nconst int maxn=1e5+10;\nstruct mxr\n{\n    int to,next,val;\n}e[2*maxn];\nint n,cnt,m,head[maxn];\nint dis1[maxn],dis2[maxn];\npriority_queue<pair<ll,int> >q;\ninline char nc()//fread\uff0c\u8dd1\u7684\u5feb \n{\n\tstatic char buf[100000],*L=buf,*R=buf;\n\treturn L==R&&(R=(L=buf)+fread(buf,1,100000,stdin),L==R)?EOF:*L++;\n}\ninline int read()\n{\n\tint ret=0,f=1;char ch=nc();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=nc();}\n\twhile (ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=nc();\n\treturn ret*f;\n}\ninline void write(int x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) write(x/10);\n\tputchar(x%10+'0');\n\treturn ;\n}\ninline void add(int u,int v,int w)//\u90bb\u63a5\u8868\u5b58\u8fb9\uff0c\u8c8c\u4f3c\u6bd4vector\u5feb \n{\n    e[cnt].to=v;\n    e[cnt].val=w;\n    e[cnt].next=head[u];\n    head[u]=cnt++;\n    return ;\n}\ninline void dij()//\u4f18\u5148\u961f\u5217\u4f18\u5316dijkstra \n{\n\tfor(register int i=1;i<=n;++i) dis1[i]=inf,dis2[i]=inf;\n\tdis1[1]=0;\n\tq.push(make_pair(0,1));\n    while(!q.empty())\n    {\n        int now=q.top().second,dis=-q.top().first;\n        q.pop();\n        for(register int i=head[now];i!=-1;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(dis1[v]>dis+e[i].val)\n                dis2[v]=dis1[v],dis1[v]=dis+e[i].val,q.push(make_pair(-dis1[v],v));//\u627e\u5230\u66f4\u4f18\uff0c\u66f4\u65b0dis1\u4e0edis2 \n            if(dis2[v]>dis+e[i].val&&dis1[v]<dis+e[i].val)\n            \tdis2[v]=dis+e[i].val,q.push(make_pair(-dis2[v],v));//\u627e\u5230\u6bd4dis2\u4f18\uff0c\u6bd4dis1\u52a3\uff0c\u66f4\u65b0dis2 \n        }\n    }\n    return ;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    cnt=0;\n    n=read(),m=read();\n    for(register int i=1;i<=m;++i)\n    {\n        int a,b,w;\n        a=read(),b=read(),w=read();\n        add(a,b,w),add(b,a,w);\n    }\n    dij();\n    write(dis2[n]),puts(\" \");\n    return 0;\n}\n\n```\n\u672c\u849f\u84bb\u7b2c\u4e00\u7bc7luogu\u535a\u5ba2\uff0c\u671b\u5927\u5bb6\u559c\u6b22\uff01",
        "postTime": 1540549997,
        "uid": 86478,
        "name": "mxr\u5df2\u6b7b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "A\u4e86\u4e4b\u540e\uff0c\u7279\u5730\u770b\u4e86\u773c\u516b\u7bc7\u9898\u89e3\uff0c\u53d1\u73b0\u6211\u548c\u5927\u4f6c\u7684\u601d\u8def\u90fd\u4e0d\u4e00\u6837~~\u849f\u84bb\u7684\u6211\u745f\u745f\u53d1\u6296~~\uff0c\u7279\u6b64\u5199\u7bc7\u9898\u89e3\u5411\u5927\u4f6c\u4eec\u8bf7\u6559\n\n\u6211\u7684\u601d\u8def\u6765\u6e90\u4e8e[P1186\u739b\u4e3d\u5361](https://www.luogu.org/problemnew/show/P1186)\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u65f6\uff08\u6211\u662fdij\u515a\uff0c\u80fd\u4e0d\u7528SPFA\u5c31\u4e0d\u7528\uff0c\u867d\u7136\u8fd9\u9898\u7684\u6807\u7b7e\u662fSPFA\uff09\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u6700\u77ed\u8def\u9700\u8981\u54ea\u51e0\u6761\u8def\n\n\u7136\u540e\u4e0d\u65ad\u628a\u8fd9\u4e9b\u8def\u4e2d\u7684\u4e00\u4e2a\u53bb\u6389\uff0c\u8ba1\u7b97\u6700\u77ed\u8def\uff0c\u53d6\u6700\u5c0f\u503c\n\n\u60f3\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u62ff\u523090\u5206\u4e86\n\n\u770b\u4f3c\u5b8c\u7f8e\u65e0\u7f3a\u7684\u601d\u8def\u4e3a\u6bdb\u4e0d\u80fdA\uff1fThis is a question.\n\n\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8003\u8651\u5982\u679c\u4e00\u6761\u8fb9\u90fd\u4e0d\u5220\u4f1a\u600e\u6837\uff08\u60ca\u8bb6\u8138\uff09\n\n\u6ca1\u6709\u5220\u662f\u600e\u4e48\u56de\u4e8b\uff1f\uff1f\uff1f\n\n\u8fd9\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\uff0c\u4e00\u6761\u8fb9\u53ef\u4ee5\u8d70\u591a\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6cbf\u7740\u90a3\u4e2a\u4e00\u5f00\u59cb\u7684\u6700\u77ed\u8def\u6765\u56de\u8d70\uff0c\u5373\u4e00\u5f00\u59cb\u7684\u6700\u77ed\u8def*3\uff0c\u8fd9\u4e2a\u6570\u53ef\u80fd\u6bd4\u6211\u4eec\u540e\u6765\u7b97\u7684\u90a3\u4e2a\u6570\u5c0f\n\n\u90a3\u4e48\u73b0\u5728\u6b63\u786e\u7b54\u6848\u5c31\u662f\u8fd9\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\n\n\u8d34\u4e0aAC\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define M(x,y) make_pair(x,y)\nusing namespace std;\nint head[5010],nex[200010],to[200010],v[200010],tl;\nint dis[5010],n,m,f[5010],fr[200010];\nbool vis[5010],b[200010];\npriority_queue< pair<int,int> > q;\ninline void add(int x,int y,int z){\n    to[++tl]=y;v[tl]=z;nex[tl]=head[x];head[x]=tl;fr[tl]=x;\n    to[++tl]=x;v[tl]=z;nex[tl]=head[y];head[y]=tl;fr[tl]=y;\n}\ninline int read(){\n    int x=0;char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nint main(){\n    n=read();m=read();\n    for(int i=1;i<=m;i++){\n        int x=read(),y=read(),z=read();\n        add(x,y,z);\n    }\n    memset(dis,0x3f,sizeof(dis));\n    dis[1]=0;\n    q.push(M(0,1));\n    while(q.size()){\n        int x=q.top().second;\n        q.pop();\n        if(vis[x]) continue;\n        vis[x]=true;\n        for(int i=head[x];i;i=nex[i]){\n            int y=to[i],l=v[i];\n            if(dis[y]>dis[x]+l){\n                dis[y]=dis[x]+l;\n                f[y]=i;\n                q.push(M(-dis[y],y));\n            }\n        }\n    }\n    int To=n,Fr=fr[f[n]],ans=0x7f7f7f7f,mi=dis[n]*3;\n    while(To!=1){\n        b[f[To]]=true;\n        for(int i=2;i<=n;i++) dis[i]=0x3f3f3f3f;\n        for(int i=1;i<=n;i++) vis[i]=false;\n        q.push(M(0,1));\n        while(q.size()){\n        \tint x=q.top().second;\n        \tq.pop();\n        \tif(vis[x]) continue;\n        \tvis[x]=true;\n        \tfor(int i=head[x];i;i=nex[i]){\n        \t\tif(b[i]) continue;\n        \t\tif(dis[to[i]]>dis[x]+v[i]){\n        \t\t\tdis[to[i]]=dis[x]+v[i];\n        \t\t\tq.push(M(-dis[to[i]],to[i]));\n                }\n            }\n        }\n        b[f[To]]=false;\n        ans=min(ans,dis[n]);\n        To=Fr;Fr=fr[f[To]];\n    }\n    printf(\"%d\",min(ans,mi));\n    return 0;\n} \n\n```",
        "postTime": 1535113425,
        "uid": 56916,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dU56916",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u53d1\u73b0\u6211\u7684\u65b9\u6cd5\u548c\u5927\u90e8\u5206\u4eba\u4e0d\u592a\u4e00\u6837\u989d\u2026\u2026\n\n\u770b\u4e86\u4e0b\u5927\u90e8\u5206\u7ef4\u62a4\u4e86\u4e24\u4e2a\u503c\uff0c\u5373\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\uff0c\u4f46\u662f\u4f5c\u4e3a\u849f\u84bb\u7684\u6211\u5f88\u5bb9\u6613\u5c31\u88ab\u7ed5\u6655\u4e86\uff08~~\u5176\u5b9e\u662f\u6ca1\u6709\u4ed4\u7ec6\u770b~~\uff09\u3002\u6211\u6765\u8bb2\u8bb2\u6211\u81ea\u5df1yy\u7684\u65b9\u6cd5\u5427\uff1a\n\n## \u4e0d\u9700\u8981\u4ec0\u4e48\u7406\u89e3\u80fd\u529b\u7684\u65b9\u6cd5\uff1a\n\n1. \u9996\u5148\u4ecen\u51fa\u53d1\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\u6c42\u51fan\u81f3\u6240\u6709\u80fd\u53bb\u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u968f\u4fbf\u4ec0\u4e48\u65b9\u6cd5\u90fd\u884c\uff0c\u4e0d\u4f1a\u7684\u8bf7\u524d\u5f80[\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09](https://www.luogu.org/problem/P4779)\n\n2. \u9009\u53d6\u548c1\u8282\u70b9\u76f8\u90bb\u7684\u6700\u77ed\u8fb9$W$\uff0c\u5c061\u81f3n\u7684\u6700\u77ed\u8def\u957f\u5ea6\u52a0\u4e0a$2W$\uff0c\u4f5c\u4e3a\u6b21\u77ed\u8def\u7684\u521d\u59cb\u503c\u3002\n\n3. \u7136\u540e\u4ece1\u8282\u70b9\u51fa\u53d1\uff0c\u8dd1DFS\uff08\u662f\u7684\u5c31\u662f\u8fd9\u4e48\u66b4\u529b\uff09\u4f46\u662f\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb\u52a0\u4e0a\u4ece\u5f53\u524d\u8282\u70b9\u53bbn\u7684\u6700\u77ed\u8def\uff08\u521a\u521a\u5df2\u7ecf\u6c42\u51fa\u4e86\u53bbn\u7684\u6700\u77ed\u8def\uff09\uff0c\u90a3\u4e48\u5c31\u8df3\u51fa\u641c\u7d22\u3002\u5982\u679c\u8d70\u5230\u4e86n\u8282\u70b9\uff0c\u67e5\u770b\u8d70\u8fc7\u8ddd\u79bb\u662f\u5426\u6bd4\u5f53\u524d\u7684\u6b21\u77ed\u8def\u77ed\u5e76\u4e14\u6bd4\u6700\u77ed\u8def\u5927\uff0c\u5982\u679c\u662f\u5219\u66f4\u65b0\u3002\n\n\u4e0d\u77e5\u9053\u8fd9\u53eb\u4ec0\u4e48\u7b97\u6cd5\u5462\uff0c\u5982\u679c\u6709\u77e5\u9053\u7684\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u544a\u8bc9\u7b14\u8005\u3002\n\n\u7531\u4e8e\u6b64\u9898\u6570\u636e\u8f83\u6c34\uff0c\u4e0d\u5438\u6c27\u6700\u6162\u6570\u636e\u70b9\u4e5f\u624d222ms\uff0c\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=1000011;\nconst long long inf=100000000000;\nlong long dis[maxn];\nint vis[maxn];\nint head[maxn];\nint cnt=0,n,m;\nstruct edge{\n\tint to,next,val;\n}star[maxn];\nlong long cd;\nvoid add(int from,int to,int val){\n\tstar[++cnt].to=to;\n\tstar[cnt].val=val;\n\tstar[cnt].next=head[from];\n\thead[from]=cnt;\n}\nstruct node{\n\tlong long d,dis;\n\tbool operator < (const node &x)const{\n\t\treturn dis>x.dis;\n\t}\n};\nvoid dij(){\n\tpriority_queue <node> q1;\n\tq1.push((node){n,0});\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i] = 1100000000;\n\t}\n\tdis[n]=0;\n\twhile(!q1.empty()){\n\t\tnode tmp = q1.top();\n\t\tq1.pop();\n\t\tint u = tmp.d,d=tmp.dis;\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tdis[u]=d;\n\t\tfor(int i = head[u];i>0;i=star[i].next){\n\t\t\tif(dis[u]+star[i].val < dis[star[i].to]){\n\t\t\t\tdis[star[i].to]=dis[u] + star[i].val;\n\t\t\t}\n\t\t\tq1.push((node){star[i].to , star[i].val + d});\n\t\t}\n\t}\n}\nvoid dfs(int now,long long len){//\u76f4\u63a5\u66b4\u529b\u6df1\u641c\n\tif(len+dis[now]>cd)return;//\u4f46\u662f\u5982\u679c\u6b64\u8282\u70b9\u53bbn\u70b9\u7684\u8ddd\u79bb\u52a0\u4e0a\u5df2\u7ecf\u8d70\u8fc7\u7684\u8ddd\u79bb\u5927\u4e8e\u6b21\u77ed\u8def\u5c31\u9000\u51fa\n\tif(now==n){\n\t\tif(len>dis[1]&&len<cd)cd=len;\n\t\treturn;\n\t}\n\tfor(int i=head[now];i;i=star[i].next){\n\t\tint v=star[i].to;\n\t\tdfs(v,len+star[i].val);\n\t}\n}\nvoid read(int &a){\n\ta=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c<='9'&&c>='0'){\n\t\ta=(a<<3)+(a<<1)+(c^48);\n\t\tc=getchar();\n\t}\n}\nint a,b,c;\nint main(){\n\t//freopen(\"block.in\",\"r\",stdin);\n\t//freopen(\"block.out\",\"w\",stdout);\n\tread(n);read(m);\n\tint mink=999999999;\n\tfor(int i=1;i<=m;i++){\n\t\tread(a);read(b);read(c);\n\t\tadd(a,b,c);add(b,a,c);\n\t\tif(a==1||b==1)mink=min(mink,c);\n\t}\n\tdij();\n\tcd=dis[1]+2*mink;//\u53ef\u80fd\u662f\u6b21\u77ed\u8def\n\tdfs(1,0);\n\tprintf(\"%lld\\n\",cd);\n}\n```\n",
        "postTime": 1573556713,
        "uid": 235864,
        "name": "dreamtouch",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u7ffb\u9898\u89e3\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u4eba\u5199Astar\n\n\u6765\u8d34\u4e00\u7bc7Astar\u7684\u9898\u89e3QAQ\n\n\u9996\u5148\u5efa\u53cd\u56fe\u8dd1\u4e00\u8fb9spfa\uff0c\u7136\u540e\u7528\u542f\u53d1\u5f0f\u641c\u7d22\u6c34\u8fc7\n\n\u4ee3\u7801\uff1a\n\n```cpp\n# include <cstdio>\n# include <algorithm>\n# include <cstring>\n# include <queue>\n# include <vector>\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define mct(a,b) memset(a,b,sizeof(a))\nusing namespace std;\n\nconst int N=5005;\nconst int M=1e5+5;\n\n\nint n,m;\nstruct edges{\n    int x,y,w,next;\n} e[M<<1];\n \nstruct node{\n    int now,g,h,f;\n    bool operator<(const node a)const{\n        if(a.f==f) return a.g<g;\n        return a.f<f;\n    }\n};\nint head[N],vis[N],dis[N];\n \ninline void init(){\n    memset(e,-1,sizeof(e));\n    memset(head,-1,sizeof(head));\n    memset(vis,0,sizeof(vis));\n    Rep(i,0,n)\n        dis[i]=1e9;\n}\n \ninline void add(int x,int y,int w,int k){\n    e[k].x=x,e[k].y=y,e[k].w=w,e[k].next=head[x],head[x]=k;\n}\n \ninline int relax(int u,int v,int c){\n    if(dis[v]>dis[u]+c){\n        dis[v]=dis[u]+c;\n        return 1;\n    }\n    return 0;\n}\n \ninline void spfa(int src){\n    int a,next;\n    queue<int> q;\n    q.push(src);\n    dis[src]=0;\n    while(!q.empty()){\n        a=q.front();\n        q.pop();\n        vis[a]=0;\n        for(int i=head[a];~i;i=e[i].next){\n            next=e[i].y;\n            if(relax(a,next,e[i].w)&&!vis[next]){\n                q.push(next);\n                vis[next]=1;\n            }\n        }\n    }\n}\n \ninline void Astar(int src,int to)\n{\n    int cnt=0;\n    priority_queue<node> q;\n    node a,next;\n    a.now=src;\n    a.g=0;\n    a.f=a.g+dis[src];\n    q.push(a);\n    while(!q.empty()){\n        a=q.top();\n        q.pop();\n        if(a.now==to){\n            cnt++;\n            if(cnt==2){\n                printf(\"%d\\n\",a.g);\n                return ;\n            }\n        }\n        for(int i=head[a.now];~i;i=e[i].next){\n            next=a;\n            next.now=e[i].y;\n            next.g=a.g+e[i].w;\n            next.f=next.g+dis[next.now];\n            q.push(next);\n        }\n    }\n}\n \nint main()\n{\n    int x,y,w;\n    scanf(\"%d%d\",&n,&m);\n    init();\n    for(int i=0;i<2*m;i+=2){\n        scanf(\"%d%d%d\",&x,&y,&w);\n        add(x,y,w,i);\n        add(y,x,w,i+1);\n    }\n    spfa(n);\n    Astar(1,n);\n    return 0;\n}\n```\n",
        "postTime": 1566345229,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<algorithm>\n#define E 0x3f3f3f3f\n#define MAXN 5010  \n#define MAXM 100100 \nusing namespace std;\nint n,m;\n\nstruct node{\n\tint u,v,next,w;\n}e[MAXM*2];\nint head[MAXN];\nint cnt;\nbool r[MAXN];\nint dis[MAXN];\nint dis2[MAXN];\nvoid add(int u,int v,int w){\n\tcnt++;\n\te[cnt].u = u;\n\te[cnt].v = v;\n\te[cnt].w = w;\n\te[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nvoid SPFA(int orz,int d[]){//\u88f8\u7684SPFA \n\tmemset(r,0,sizeof r);\n\tqueue<int>q;\n\td[orz] = 0;\n\tq.push(orz);\n\tr[orz] = true;\n\twhile(!q.empty()){\n\t\tint h=q.front();\n\t\tq.pop();\n\t\tr[h] = 0;\n\t\tfor(int i=head[h];i!=0;i=e[i].next){\n\t\t\tif(e[i].w+d[e[i].u]<d[e[i].v]){\n\t\t\t\td[e[i].v]=e[i].w+d[e[i].u];\n\t\t\t\tif(r[e[i].v]==0){\n\t\t\t\t\tq.push(e[i].v);\n\t\t\t\t\tr[e[i].v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\twhile(~(scanf(\"%d%d\",&n,&m))){\n\tcnt = 0;\n\tmemset(dis,E,sizeof dis);\n\tmemset(dis2,E,sizeof dis2);\n\tmemset(head,0,sizeof head);\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tint a,b,c;\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tadd(a,b,c);\n\t\t\tadd(b,a,c);\n\t\t}\n\t\tSPFA(1,dis);//\u6c42\u51fa1\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n\t\tSPFA(n,dis2);//\u6c42\u51fan\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \n\t\tint minn = dis[n];//\u6b21\u77ed\u8def\u5f53\u7136\u5927\u4e8e\u6700\u77ed\u8def\u5566\n\t\tint ans = E;//\u5148\u628a\u7b54\u6848\u7f6e\u4e3a\u6700\u5927\u503c\uff0c\u4ee5\u4fbf\u4e8e\u66f4\u65b0\n\t\tfor(int i=1;i<=n;++i){//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9 \n\t\t\tfor(int j=head[i];j;j=e[j].next){//\u6bcf\u4e2a\u70b9\u7684\u8fde\u70b9\n\t\t\t\tint v=e[j].v;//\u7ec8\u70b9 \n\t\t\t\tint w=e[j].w;//\u6743\u503c \n\t\t\t\tif(dis[i] + dis2[v] + w >minn && dis[i] + dis2[v] + w < ans){\n\t\t\t\t\tans = dis[i]+dis2[v]+w;\n\t\t\t\t}/*\u5982\u679c\u8bf41\u5230i\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u52a0\u4e0a\u5176\u7684\u7ec8\u8fb9\u5230n\u7684\u8ddd\u79bb\u5e76\u52a0\u4e0a\u5176\u7ec8\u8fb9\u7684\u6743\u503c\u5927\u4e8e\u4e86\u6700\u77ed\u8def\uff0c\u5e76\u4e14\u4ed6\u5c0f\u4e8e\u5f53\u524d\u7684\u6b21\u77ed\u8def\uff0c\u90a3\u4e48\u66f4\u65b0\u7b54\u6848*/ \n\t\t\t}\n\t\t}//\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u66b4\u529b\u66f4\u65b0 \n\t\tprintf(\"%d\\n\",ans);//\u8f93\u51fa\u8d70\u4eba\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1518335774,
        "uid": 59240,
        "name": "lajioj",
        "ccfLevel": 4,
        "title": "[USACO06NOV]\u8def\u969cRoadblocks"
    },
    {
        "content": "\u4e00\u9053\u679c\u7684\u6b21\u77ed\u8def\u95ee\u9898\uff1b\n\n\u6211\u662f\u7528\u7684dijkstra;\n\n\n\u6700\u77ed\u8def\u7684\u601d\u60f3\u90fd\u4f1a\u3002\n\n\n\u6b21\u77ed\u8def dis2<s,t> \u6709\u4e24\u79cd\u60c5\u51b5\n\n\n  (1) : \u4eces->u\u7684\u6700\u77ed\u8def+dis<u,t>;\n\n  (2) : \u4eces->u\u7684\u6b21\u77ed\u8def+dis<u,t>;\n\n\u6240\u4ee5 \u53ea\u8981\u5728\u8dd1\u6700\u77ed\u8def\u65f6 \u8bb0\u5f55\u6b21\u77ed\u8def(dis2) \u5e76\u66f4\u65b0\u3002\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<vector>\n#include<set>\n#include<bitset>\n#include<sstream>\n#include<cstdlib>\n#define QAQ int\n#define TAT long long\n#define ORZ double\n#define OwO bool\n#define SHO short\n#define F(i,j,n) for(QAQ i=j;i<=n;++i)\n#define E(i,j,n) for(QAQ i=j;i>=n;--i)\n#define MES(i,j) memset(i,j,sizeof(i))\n#define MEC(i,j) memcpy(i,j,sizeof(j))\nusing namespace std;\nconst QAQ N=5005,M=200005;\ntypedef pair<QAQ,QAQ> PA;\nQAQ n,m;\nstruct data{\n    QAQ to,last,val;\n}a[M];\nQAQ head[N],js;\nQAQ dis1[N],dis2[N];\npriority_queue<PA,vector<PA>,greater<PA> > q;\nvoid dijkstra(QAQ s){\n    MES(dis1,100);MES(dis2,100);\n    dis1[s]=0;\n    q.push(make_pair(dis1[s],s));\n    while(q.size()){\n        PA p=q.top();q.pop();\n        QAQ x=p.second,dis=p.first;\n        if(dis>dis2[x]) continue;\n        for(QAQ i=head[x];i;i=a[i].last){\n            QAQ d2=dis+a[i].val;\n            if(dis1[a[i].to]>d2){\n                swap(dis1[a[i].to],d2);\n                q.push(make_pair(dis1[a[i].to],a[i].to));\n            }\n            if(dis2[a[i].to]>d2&&dis1[a[i].to]<d2){\n                dis2[a[i].to]=d2;\n                q.push(make_pair(dis2[a[i].to],a[i].to));\n            }\n        }\n    }\n}\nvoid add(QAQ x,QAQ y,QAQ z){\n    a[++js].to=y;a[js].val=z;\n    a[js].last=head[x];head[x]=js;\n}\nQAQ main(){\n    scanf(\"%d%d\",&n,&m);\n    F(i,1,m) {\n        QAQ u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w);add(v,u,w);\n    }\n    dijkstra(1);\n    printf(\"%d\\n\",dis2[n]);\n    return 0;\n}\n\n```",
        "postTime": 1508238119,
        "uid": 36170,
        "name": "Fheiwn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u4e0d\u4e45\u524d\u521a\u521a\u770b\u8fc7\u4e86[\u6700\u77ed\u8def\u8ba1\u6570](https://www.luogu.org/problem/P1144)\u8fd9\u9053\u9898\u76ee\uff0c\u6240\u4ee5\u5c31\u60f3\u5728\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u7528dis\u6570\u7ec4\u8bb0\u5f55\u6700\u77ed\u8def\u548c\u6b21\u77ed\u8def\uff0c\u7136\u540e\u5c31\u6109\u5feb\u7684\u6253\u5b8c\u4e86\u4ee3\u7801\uff0c\u8fc7\u4e86\u6837\u4f8b\uff0c\u4f46\u662f\u53ea\u670950\u5206\u3002\n\u7136\u540e\uff0c\u6211\u91cd\u65b0\u60f3\u4e86\u60f3\u6211\u5728\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\u7684\u5224\u65ad\uff0c\u53d1\u73b050\u8fd9\u4e2a\u6837\u5b50\u5199\uff0c\u6700\u5c0f\u503c\u53ef\u80fd\u4f1a\u8986\u76d6\u6b21\u5c0f\u503c\uff0c\u56e0\u4e3a\u6211\u53ea\u5224\u65ad\u4e86\u4e00\u904d\u7684\u8303\u56f4\uff0c\u6ca1\u6709\u9650\u5236\u6b21\u5c0f\u503c\u4e25\u683c\u5c0f\u4e8e\u6700\u5c0f\u503c\u3002\u800c\u4e14\u9898\u76ee\u8981\u6c42**\u4e00\u6761\u8def\u53ef\u4ee5\u91cd\u590d\u8d70\u591a\u6b21**\uff0c\u6240\u4ee5\u6211\u589e\u52a0\u4e86\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7ecf\u8fc7\u7684\u6b21\u6570\u3002\n\u5224\u65ad\u90e8\u5206\u5c31\u6539\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\n\n```cpp\nfor (int i = head[id]; i; i = e[i].nxt)\n{\n\tif (dis[e[i].v][0] > di + e[i].w)\n\t{\n\t\tdis[e[i].v][1] = dis[e[i].v][0], dis[e[i].v][0] = di + e[i].w;\n\t\tif (dis[e[i].v][1] > dis[id][1] + e[i].w && dis[e[i].v][0] < dis[id][1] + e[i].w)\n\t\tdis[e[i].v][1] = dis[id][1] + e[i].w;\n\t\tif (vis[e[i].v] < 2) q.push(make_pair(dis[e[i].v][0], e[i].v));\n\t}\n\telse\n\t\tif (dis[e[i].v][1] > di + e[i].w && dis[e[i].v][0] < di + e[i].w)\n\t\t{\n\t\t\tdis[e[i].v][1] = di + e[i].w;\n\t\t\tq.push(make_pair(dis[e[i].v][0], e[i].v));\n\t\t}\n\telse\n\t\tif (dis[e[i].v][1] > dis[id][1] + e[i].w && dis[e[i].v][0] < dis[id][1] + e[i].w)\n\t\t\tdis[e[i].v][1] = dis[id][1] + e[i].w;\n}\n```\n\n\n\u8fd9\u6837\u5c31\u8fc7\u4e8690\u5206\uff01\n\u7136\u540e\u4e0b\u8f7d\u4e86\u9519\u8bef\u6570\u636e\uff0c\u53d1\u73b0\u8fd8\u662f\u9519\u5728\u4e86\u4e00\u6761\u8fb9\u53ef\u4ee5\u8d70\u591a\u6b21\u7684\u95ee\u9898\u4e0a\u3002\u56e0\u4e3a\u8d70\u591a\u6b21\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u70b9\u7684\u6b21\u77ed\u8def\u5c31\u4e0d\u4e00\u5b9a\u662f0\u4e86\uff0c\u6240\u4ee5\u6211\u628a\u521d\u59cb\u5316\u53ea\u6539\u6210\u4e86\u521d\u59cb\u53161\u53f7\u70b9\u7684\u6700\u77ed\u8def\u3002\u8fd9\u6837\u5c31\u8fc7\u4e86\u8fd9\u4e2a\u9898\u3002\n\u4e0b\u9762\u662fAC\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define id tmp.second\n#define di tmp.first\nusing namespace std;\ntypedef pair<int, int> PI;\nconst int M = 300500;\nint n, r, head[M], tot, dis[M][2], vis[M];\nstruct EDGE{\n\tint v, w, nxt;\n}e[M];\npriority_queue<PI, vector<PI>, greater<PI> > q;\nPI tmp;\n\nvoid add(int x, int y, int z)\n{\n\te[++tot].v = y, e[tot].nxt = head[x], e[tot].w = z, head[x] = tot;\n}\n\nvoid Dijkstra()\n{\n\tmemset(dis, 0x4f, sizeof(dis));\n\tdis[1][0] = 0;\n\tq.push(make_pair(0, 1));\n\twhile (!q.empty())\n\t{\n\t\ttmp = q.top(), q.pop();\n\t\tif (vis[id] == 2) continue;\n\t\t++vis[id];\n\t\tfor (int i = head[id]; i; i = e[i].nxt)\n\t\t{\n\t\t\tif (dis[e[i].v][0] > di + e[i].w)\n\t\t\t{\n\t\t\t\tdis[e[i].v][1] = dis[e[i].v][0], dis[e[i].v][0] = di + e[i].w;\n\t\t\t\tif (dis[e[i].v][1] > dis[id][1] + e[i].w && dis[e[i].v][0] < dis[id][1] + e[i].w)\n\t\t\t\t\tdis[e[i].v][1] = dis[id][1] + e[i].w;\n\t\t\t\tif (vis[e[i].v] < 2) q.push(make_pair(dis[e[i].v][0], e[i].v));\n\t\t\t}\n\t\t\telse\n\t\t\t\tif (dis[e[i].v][1] > di + e[i].w && dis[e[i].v][0] < di + e[i].w)\n\t\t\t\t{\n\t\t\t\t\tdis[e[i].v][1] = di + e[i].w;\n\t\t\t\t\tif (vis[e[i].v] < 2) q.push(make_pair(dis[e[i].v][0], e[i].v));\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tif (dis[e[i].v][1] > dis[id][1] + e[i].w && dis[e[i].v][0] < dis[id][1] + e[i].w)\n\t\t\t\t\tdis[e[i].v][1] = dis[id][1] + e[i].w;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint x, y, z;\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcin >> n >> r;\n\tfor (int i = 1; i <= r; ++i) cin >> x >> y >> z, add(x, y, z), add(y, x, z);\n\tDijkstra();\n\tprintf(\"%d\", dis[n][1]);\n\treturn 0;\n}\n```\n",
        "postTime": 1571105291,
        "uid": 26945,
        "name": "Glacier_elk",
        "ccfLevel": 0,
        "title": "Roadblocks\u9898\u89e3"
    },
    {
        "content": "### \u9898\u9762\n\n1498\uff1aRoadblocks\n\n\u65f6\u95f4\u9650\u5236: $1000 ms$ \u5185\u5b58\u9650\u5236: $65536 KB$\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u539f\u9898\u6765\u81ea\uff1aUSACO 2006 Nov. Gold\n\n\u8d1d\u831c\u628a\u5bb6\u642c\u5230\u4e86\u4e00\u4e2a\u5c0f\u519c\u573a\uff0c\u4f46\u5979\u5e38\u5e38\u56de\u5230 FJ \u7684\u519c\u573a\u53bb\u62dc\u8bbf\u5979\u7684\u670b\u53cb\u3002\u8d1d\u831c\u5f88\u559c\u6b22\u8def\u8fb9\u7684\u98ce\u666f\uff0c\u4e0d\u60f3\u90a3\u4e48\u5feb\u5730\u7ed3\u675f\u5979\u7684\u65c5\u9014\uff0c\u4e8e\u662f\u5979\u6bcf\u6b21\u56de\u519c\u573a\uff0c\u90fd\u4f1a\u9009\u62e9\u7b2c\u4e8c\u77ed\u7684\u8def\u5f84\uff0c\u800c\u4e0d\u8c61\u6211\u4eec\u6240\u4e60\u60ef\u7684\u90a3\u6837\uff0c\u9009\u62e9\u6700\u77ed\u8def\u3002\n\n\u8d1d\u831c\u6240\u5728\u7684\u4e61\u6751\u6709$R(1\u2264R\u226410^5)$\u6761\u53cc\u5411\u9053\u8def\uff0c\u6bcf\u6761\u8def\u90fd\u8fde\u63a5\u4e86\u6240\u6709\u7684$N(1\u2264N\u22645000)$\u4e2a\u519c\u573a\u4e2d\u7684\u67d0\u4e24\u4e2a\u3002\u8d1d\u831c\u5c45\u4f4f\u5728\u519c\u573a$1$\uff0c\u5979\u7684\u670b\u53cb\u4eec\u5c45\u4f4f\u5728\u519c\u573a$N$\uff08\u5373\u8d1d\u831c\u6bcf\u6b21\u65c5\u884c\u7684\u76ee\u7684\u5730\uff09\u3002\n\n\u8d1d\u831c\u9009\u62e9\u7684\u7b2c\u4e8c\u77ed\u7684\u8def\u5f84\u4e2d\uff0c\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u4e00\u6761\u5728\u6700\u77ed\u8def\u4e2d\u51fa\u73b0\u7684\u9053\u8def\uff0c\u5e76\u4e14\u4e00\u6761\u8def\u53ef\u4ee5\u91cd\u590d\u8d70\u591a\u6b21\u3002\u5f53\u7136\u7b2c\u4e8c\u77ed\u8def\u7684\u957f\u5ea6\u5fc5\u987b\u4e25\u683c\u5927\u4e8e\u6700\u77ed\u8def\uff08\u53ef\u80fd\u6709\u591a\u6761\uff09\u7684\u957f\u5ea6\uff0c\u4f46\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u4e0d\u5927\u4e8e\u6240\u6709\u9664\u6700\u77ed\u8def\u5916\u7684\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n\u3010\u8f93\u5165\u3011\n\n\u7b2c$1$\u884c\u4e3a\u4e24\u4e2a\u6574\u6570\uff0c$N$\u548c$R$\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1b\n\n\u7b2c$2\u2026R+1$\u884c\uff1a\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570$A$\u3001$B$\u548c$D$\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761\u957f\u5ea6\u4e3a$D(1\u2264D\u22645000)$\u7684\u8def\u8fde\u63a5\u519c\u573a$A$\u548c\u519c\u573a$B$\u3002\n\n\u3010\u8f93\u51fa\u3011\n\n\u8f93\u51fa\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece\u519c\u573a$1$\u5230\u519c\u573a$N$\u7684\u7b2c\u4e8c\u77ed\u8def\u7684\u957f\u5ea6\u3002\n\n\u3010\u8f93\u5165\u6837\u4f8b\u3011\n\n4 4\n\n1 2 100\n\n2 4 200\n\n2 3 250\n\n3 4 100\n\n\u3010\u8f93\u51fa\u6837\u4f8b\u3011\n\n450\n\n\u3010\u63d0\u793a\u3011\n\n\u6700\u77ed\u8def\uff1a$1\u21922\u21924$\uff08\u957f\u5ea6\u4e3a$100+200=300$\uff09\n\n\u7b2c\u4e8c\u77ed\u8def\uff1a$1\u21922\u21923\u21924$\uff08\u957f\u5ea6\u4e3a$100+250+100=450$\uff09\n\n### \u7b97\u6cd5\n\n\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6269\u5c55\n\n**1. \u6b21\u77ed\u8def\u7b97\u6cd5**\n\n**\u65b9\u6cd51\uff1a\u5728\u7528SPFA\u8ba1\u7b97\u6700\u77ed\u8def\u65f6\u987a\u4fbf\u7edf\u8ba1\u6b21\u77ed\u8def\u7684\u957f\u5ea6\u3002**\n\n\u7edf\u8ba1\u65b9\u6cd5\uff1a\n\n1. \u5728\u8ba1\u7b97\u6700\u77ed\u8def\u9700\u8981\u66f4\u65b0\u6700\u5c0f\u503c\u65f6\u5c06\u539f\u6709\u7684\u8f83\u5c0f\u503c\u66f4\u65b0\u81f3\u6b21\u77ed\u8def\u3002\n\n2. \u6b64\u8def\u5f84\u65e0\u6cd5\u66f4\u65b0\u6700\u77ed\u8def\u4f46\u662f\u80fd\u591f\u66f4\u65b0\u6b21\u77ed\u8def\u65f6\u66f4\u65b0\u3002\uff08\u5373$sec[j]<min[i]+w[i,j]<min[j]$)\n\n3. \u53ef\u4ee5\u7531\u6b21\u77ed\u8def\u66f4\u65b0\u6b21\u77ed\u8def\uff08\u5373$sec[i]+w[i,j]<sec[j]$\uff09\n\n\u6ce8\u610f\uff1a\u53ea\u8981\u662f\u66f4\u65b0\u8fc7\u6700\u77ed\u8def\u6216\u6b21\u77ed\u8def\u65f6\uff0c\u90fd\u8981\u5c06\u65b0\u8282\u70b9\u5165\u961f\u3002\n\n**\u65b9\u6cd52\uff1a\u8003\u8651\u5230\u6b21\u77ed\u8def\u4e00\u5b9a\u6709\u7ed3\u70b9\u4e0d\u5728\u6700\u77ed\u8def\u8def\u5f84\u4e0a\uff0c\u5e76\u4e14\u8fd9\u4e2a\u7ed3\u70b9\u5230\u8d77\u70b9\u3001\u7ec8\u70b9\u7684\u8def\u5f84\u90fd\u662f\u6700\u77ed\u7684\uff0c\u5219\u53ef\u4ee5\u6b63\u53cd\u8fdb\u884c2\u6b64SPFA\uff0c\u518d\u679a\u4e3e\u7ed3\u70b9\u66f4\u65b0\u6b21\u77ed\u8def\u957f\u5ea6\u3002**\n\n\u7edf\u8ba1\u65b9\u6cd5\uff1a\n\n\u6b63\u53cd\u8fdb\u884c2\u6b21SPFA\u6c42\u89e3\u8d77\u70b9\u5230\u4efb\u610f\u70b9\u3001\u4efb\u610f\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff08\u8003\u8651\u5230\u672c\u9898\u4e3a\u65e0\u5411\u56fe\uff0c\u53ef\u4ee5\u4e0d\u7528\u5206\u5f00\u5efa\u56fe\uff09\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u5c06\u8d77\u70b9\u81f3\u8fd9\u4e2a\u70b9\u3001\u8fd9\u4e2a\u70b9\u81f3\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u6c42\u548c\uff0c\u66f4\u65b0\u6b21\u77ed\u8def\u7684\u957f\u5ea6\uff08\u4e25\u683c\u6b21\u77ed\uff09\u3002\n\n**2. \u7b2ck\u77ed\u8def\u7b97\u6cd5**\n\n\u5c06\u7b2ck\u77ed\u8def\u7684\u7b97\u6cd5\u4e2d\u7684k\u53d8\u62102\u5373\u53ef\u6c42\u89e3\u672c\u9898\u3002\n\n\u7b2ck\u77ed\u8def\u7b97\u6cd5\uff1a\n\n1. \u8fdb\u884c\u4e00\u6b21SPFA\u6c42\u89e3\u6700\u77ed\u8def\uff08\u4efb\u610f\u70b9\u81f3\u7ec8\u70b9\uff09\u3002\n\n2. \u8fdb\u884c\u542f\u53d1\u5f0fbfs\uff0c\u5176\u4e2d\u542f\u53d1\u51fd\u6570\u4e0e\u4e0a\u4e00\u6b65\u8ba1\u7b97\u7684\u6700\u77ed\u8def\u6709\u5173\u3002\u5176\u4e2d\u7684\u961f\u5217\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u5b9e\u73b0\uff0c\u9274\u4e8e\u4f18\u5148\u961f\u5217\u662f\u5927\u6839\u5806\uff0c\u6b64\u5904\u5efa\u7acb\u6570\u636e\u7ed3\u6784\uff0c\u50a8\u5b58\u961f\u5217\u5185\u5bb9\uff08\u70b9\u3001\u8ddd\u79bb\uff09\uff0c\u518d\u5b9a\u4e49\u5c0f\u4e8e\u8fd0\u7b97\u7b26\u4f7f\u7528\u542f\u53d1\u51fd\u6570\u4f7f\u5806\u53d8\u6210\u5c0f\u6839\u5806\uff0c\u4f7f\u8be5\u70b9\u5f53\u524d\u8d70\u8fc7\u7684\u8ddd\u79bb+\u6700\u77ed\u8def\u8ddd\u79bb\u5c0f\u7684\u70b9\u653e\u961f\u9996\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u8fed\u4ee3\u81f3\u7ec8\u70b9\uff0c\u6b64\u65f6\u4e3a\u6700\u77ed\u8def\uff0c\u8ba1\u6570\u5668\u589e\u52a0\u3002\u56e0\u4e3a\u961f\u9996\u7684\u8ddd\u79bb\u77ed\uff0c\u6240\u4ee5\u5f53\u5165\u961f\u7684\u70b9\u7b2ck\u6b21\u4e3a\u7ec8\u70b9\u65f6\uff0c\u8fd9\u4e2a\u70b9\u7ecf\u8fc7\u7684\u8ddd\u79bb\u5c31\u662f\u7b2ck\u77ed\u8def\u3002\n\n### \u4ee3\u7801\n\n**1. \u6b21\u77ed\u8def\u7b97\u6cd5-\u65b9\u6cd51**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nconst unsigned int R=100005;\nconst unsigned short int N=5005;\nstruct node\n{\n\tunsigned short int to,w;\n\tunsigned int next;\n}edge[R<<1];\nunsigned int head[N],cnt;\ninline void add(unsigned short int u,unsigned short int v,unsigned short int w)\n{\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n\tedge[cnt].w=w;\n}\n//\u7ed3\u6784\u4f53\u50a8\u5b58\u8fb9\uff0c\u94fe\u5f0f\u524d\u5411\u5fc3\u52a0\u8fb9\nunsigned int r;\nunsigned short int n;\nint dis1[N],dis2[N];\nbool book[N];\nvoid spfa(unsigned short int start)\n{\n\tstd::queue<unsigned short int> q;\n\tmemset(dis1,0x3f,sizeof(dis1));\n\tmemset(dis2,0x3f,sizeof(dis2));\n\tq.push(start);\n\tdis1[start]=0;\n\tregister unsigned short int i,k;\n\twhile(!q.empty())\n\t{\n\t\ti=q.front();\n\t\tq.pop();\n\t\tbook[i]=0;\n\t\tfor(register unsigned int j=head[i];j!=0;j=edge[j].next)\n\t\t{\n\t\t\tk=edge[j].to;\n\t\t\tif(dis1[k]>dis1[i]+edge[j].w)\n\t\t\t{\n\t\t\t\tdis2[k]=dis1[k];\n\t\t\t\tdis1[k]=dis1[i]+edge[j].w;\n\t\t\t\tif(book[k]==0)\n\t\t\t\t{\n\t\t\t\t\tq.push(k);\n\t\t\t\t\tbook[k]=1;\n\t\t\t\t}\n\t\t\t}//\u6c42\u89e3\u8fc7\u7a0b1\n\t\t\telse if(dis1[i]+edge[j].w<dis2[k] && dis1[i]+edge[j].w>dis1[k])\n\t\t\t{\n\t\t\t\tdis2[k]=dis1[i]+edge[j].w;\n\t\t\t\tif(book[k]==0)\n\t\t\t\t{\n\t\t\t\t\tq.push(k);\n\t\t\t\t\tbook[k]=1;\n\t\t\t\t}\n\t\t\t}//\u6c42\u89e3\u8fc7\u7a0b2\n\t\t\tif(dis2[i]+edge[j].w<dis2[k])\n\t\t\t{\n\t\t\t\tdis2[k]=dis2[i]+edge[j].w;\n\t\t\t\tif(book[k]==0)\n\t\t\t\t{\n\t\t\t\t\tq.push(k);\n\t\t\t\t\tbook[k]=1;\n\t\t\t\t}\n\t\t\t}//\u6c42\u89e3\u8fc7\u7a0b3\uff08\u6ce8\u610f\u6b64\u65f6\u4e0d\u80fd\u7528else\uff09\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%hu%u\",&n,&r);\n\tregister unsigned short int a,b,d;\n\tfor(register unsigned int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%hu%hu%hu\",&a,&b,&d);\n\t\tadd(a,b,d);\n\t\tadd(b,a,d);\n\t}//\u8bfb\u5165\u3001\u5efa\u8fb9\n\tspfa(1);\n\tprintf(\"%d\",dis2[n]);//\u8f93\u51fa\u6b21\u77ed\u8def\n\treturn 0;\n}\n```\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1498\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 460KB 6MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 468KB 5MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 468KB 5MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 472KB 5MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 468KB 5MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 492KB 5MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 476KB 5MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 616KB 13MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 624KB 13MS \n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 54ms \u5185\u5b58 2.28MB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n\n3ms/660.00KB \nAC #1\n\n26ms/2.28MB \nAC #2\n\n3ms/664.00KB \nAC #3\n\n2ms/660.00KB \nAC #4\n\n3ms/636.00KB \nAC #5\n\n2ms/772.00KB \nAC #6\n\n3ms/776.00KB \nAC #7\n\n3ms/688.00KB \nAC #8\n\n4ms/768.00KB \nAC #9\n\n5ms/744.00KB \nAC #10\n\n**2. \u6b21\u77ed\u8def\u7b97\u6cd5-\u65b9\u6cd52**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define mini(a,b) ((a)<(b)?(a):(b))\nconst unsigned int R=100005;\nconst unsigned short int N=5005;\nstruct node\n{\n\tunsigned short int to,w;\n\tunsigned int next;\n}edge[R<<1];\nunsigned int head[N],cnt;\ninline void add(unsigned short int u,unsigned short int v,unsigned short int w)\n{\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n\tedge[cnt].w=w;\n}//\u7ed3\u6784\u4f53\u5b58\u56fe\u3001\u94fe\u5f0f\u524d\u5411\u5fc3\u52a0\u8fb9\nunsigned int r;\nunsigned short int n;\nint dis[N][2],minl,ans=0x3f3f3f3f;\nbool book[N];\nvoid spfa(unsigned short int start,unsigned short int x)\n{\n\tstd::queue<unsigned short int> q;\n\tmemset(book,0,sizeof(book));\n\tdis[start][x]=0;\n\tq.push(start);\n\tregister unsigned short int i,k;\n\twhile(!q.empty())\n\t{\n\t\ti=q.front();\n\t\tq.pop();\n\t\tbook[i]=0;\n\t\tfor(register unsigned int j=head[i];j!=0;j=edge[j].next)\n\t\t{\n\t\t\tk=edge[j].to;\n\t\t\tif(dis[k][x]>dis[i][x]+edge[j].w)\n\t\t\t{\n\t\t\t\tdis[k][x]=dis[i][x]+edge[j].w;\n\t\t\t\tif(book[k]==0)\n\t\t\t\t{\n\t\t\t\t\tq.push(k);\n\t\t\t\t\tbook[k]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}//\u6c42\u6307\u5b9a\u8d77\u70b9\u81f3\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\n}\nint main()\n{\n\tscanf(\"%hu%u\",&n,&r);\n\tregister unsigned short int a,b,d;\n\tfor(register unsigned int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%hu%hu%hu\",&a,&b,&d);\n\t\tadd(a,b,d);\n\t\tadd(b,a,d);\n\t}//\u8bfb\u5165\n\tmemset(dis,0x3f,sizeof(dis));\n\tspfa(1,0);\n\tspfa(n,1);\n\tminl=dis[n][0];//\u62bd\u51fa\u6700\u77ed\u8def\n\tregister unsigned short int k;\n\tfor(register unsigned short int i=1;i<=n;i++)\n\t{\n\t\tfor(register unsigned int j=head[i];j!=0;j=edge[j].next)\n\t\t{\n\t\t\tk=edge[j].to;\n\t\t\tif(dis[i][0]+dis[k][1]+edge[j].w>minl)\n\t\t\t{\n\t\t\t\tans=mini(ans,dis[i][0]+dis[k][1]+edge[j].w);//\u679a\u4e3e\u6c42\u4e25\u683c\u7b2c\u4e8c\u77ed\u8def\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans);//\u8f93\u51fa\n\treturn 0;\n}\n```\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1498\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 464KB 3MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 464KB 5MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 460KB 4MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 472KB 5MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 476KB 4MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 476KB 5MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 484KB 5MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 620KB 11MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 624KB 11MS \n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 61ms \u5185\u5b58 2.39MB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n\n3ms/676.00KB \nAC #1\n\n33ms/2.39MB \nAC #2\n\n2ms/644.00KB \nAC #3\n\n2ms/828.00KB \nAC #4\n\n3ms/692.00KB \nAC #5\n\n3ms/652.00KB \nAC #6\n\n3ms/776.00KB \nAC #7\n\n3ms/504.00KB \nAC #8\n\n4ms/916.00KB \nAC #9\n\n5ms/904.00KB \nAC #10\n\n**3. \u7b2ck\u77ed\u8def\u7b97\u6cd5\uff08\u542f\u53d1\u5f0fBFS\uff09**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nconst unsigned int R=100005;\nconst unsigned short int N=5005;\nstruct node\n{\n\tunsigned short int to,w;\n\tunsigned int next;\n}edge[R<<1],back[R<<1];\nunsigned int head[N],cnt;\ninline void add(unsigned short int u,unsigned short int v,unsigned short int w)\n{\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n\tedge[cnt].w=w;\n}\nunsigned int backhead[N],cntback;\ninline void addback(unsigned short int u,unsigned short int v,unsigned short int w)\n{\n\tcntback++;\n\tback[cntback].to=v;\n\tback[cntback].next=backhead[u];\n\tbackhead[u]=cntback;\n\tback[cntback].w=w;\n}\n//\u7ed3\u6784\u4f53\u3001\u94fe\u5f0f\u524d\u5411\u5fc3\u5206\u522b\u5b582\u4e2a\u56fe\uff08\u5176\u5b9e\u5bf9\u4e8e\u672c\u9898\u65e0\u5411\u56fe\u5b58\u4e00\u6b21\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\nunsigned int r;\nunsigned short int n;\nint dis[N];\nbool book[N];\nvoid spfa(unsigned short int start)\n{\n\tstd::queue<unsigned short int> q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tq.push(start);\n\tdis[start]=0;\n\tregister unsigned short int i,k;\n\twhile(!q.empty())\n\t{\n\t\ti=q.front();\n\t\tq.pop();\n\t\tbook[i]=0;\n\t\tfor(register unsigned int j=backhead[i];j!=0;j=back[j].next)\n\t\t{\n\t\t\tk=back[j].to;\n\t\t\tif(dis[k]>dis[i]+back[j].w)\n\t\t\t{\n\t\t\t\tdis[k]=dis[i]+back[j].w;\n\t\t\t\tif(book[k]==0)\n\t\t\t\t{\n\t\t\t\t\tq.push(k);\n\t\t\t\t\tbook[k]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}//\u6c42\u6700\u77ed\u8def\nstruct node_bfs\n{\n\tunsigned short int now;\n\tint dist;\n\tbool operator < (const node_bfs &a) const\n\t{\n\t\treturn dist+dis[now]>a.dist+dis[a.now];//\u542f\u53d1\u51fd\u6570\uff08\u8fd0\u7b97\u7b26\u5b9a\u4e49\u5efa\u7acb\u5c0f\u6839\u5806\uff09\n\t}\n};\nint bfs(unsigned short int start,unsigned short int end)//\u542f\u53d1\u5f0fBFS\n{\n\tstd::priority_queue<node_bfs> que;//\u5efa\u7acb\u4f18\u5148\u961f\u5217\n\tregister node_bfs now,add;\n\tregister unsigned short int count=0;\n\tnow.now=start;\n\tnow.dist=0;\n\tque.push(now);\n\twhile(!que.empty())\n\t{\n\t\tnow=que.top();\n\t\tque.pop();\n\t\tif(now.now==end)\n\t\t{\n\t\t\tcount++;//\u8ba1\u6570\u5668\u589e\u52a0\n\t\t\tif(count==2)\n\t\t\t{\n\t\t\t\treturn now.dist;//\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de\u7b2ck\u77ed\u8def\n\t\t\t}\n\t\t}\n\t\tfor(register unsigned int i=head[now.now];i!=0;i=edge[i].next)\n\t\t{\n\t\t\tadd.now=edge[i].to;\n\t\t\tadd.dist=now.dist+edge[i].w;\n\t\t\tque.push(add);//\u8fed\u4ee3\u589e\u52a0\u53ef\u884c\u8fb9\n\t\t}\n\t}\n\treturn -1;\n}\nint main()\n{\n\tscanf(\"%hu%u\",&n,&r);\n\tregister unsigned short int a,b,d;\n\tfor(register unsigned int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%hu%hu%hu\",&a,&b,&d);\n\t\tadd(a,b,d);\n\t\tadd(b,a,d);\n\t\taddback(a,b,d);\n\t\taddback(b,a,d);\n\t}//\u8bfb\u5165\u3001\u5efa\u8fb9\n\tspfa(n);//\u6700\u77ed\u8def\u8ba1\u7b97\n\tprintf(\"%d\",bfs(1,n));//\u7b2c2\u77ed\u8def\u8ba1\u7b97\u3001\u8f93\u51fa\n\treturn 0;\n}\n```\n\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1498\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 464KB 3MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 456KB 5MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 456KB 4MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 460KB 5MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 460KB 4MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 488KB 5MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 500KB 5MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 776KB 12MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 780KB 11MS \n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 55ms \u5185\u5b58 3.91MB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n2ms/512.00KB \nAC #1\n\n28ms/3.91MB \nAC #2\n\n2ms/644.00KB \nAC #3\n\n2ms/644.00KB \nAC #4\n\n3ms/2.64MB \nAC #5\n\n2ms/656.00KB \nAC #6\n\n3ms/780.00KB \nAC #7\n\n3ms/2.78MB \nAC #8\n\n5ms/900.00KB \nAC #9\n\n5ms/2.64MB \nAC #10",
        "postTime": 1566116233,
        "uid": 158626,
        "name": "lzcjoe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865\u3010[USACO06NOV]\u8def\u969cRoadblocks \u4e00\u672c\u901a\u63d0\u9ad8\u7bc7 3.2.2 1498 Roadblocks\u3011"
    },
    {
        "content": "## [\u535a\u5ba2\u4f20\u9001\u95e8](https://www.cnblogs.com/LLTYYC/p/9615256.html)\n## \u7b97\u6cd5\n### Dijkstra\n\u8981\u6c42\u6b21\u77ed\u8def\n\n\u90a3\u4e48\u5728\u4e0d\u8003\u8651\u91cd\u590d\u8d70\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\n\n\u80af\u5b9a\u662f\u628a\u6700\u77ed\u8def\u4e2d\u7684\u4e00\u6bb5\u6539\u6210\u53e6\u4e00\u6bb5\n\n #### _\u81f3\u5c11_ \u8981\u6362\u53e6\u4e00\u6761\u8fb9\u5230\u8def\u5f84\u91cc\n \n\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u7684\u6bcf\u6761\u8fb9\uff08a,b\uff09\n\n\u90a3\u4e48dis\uff081,a\uff09+\uff08a,b\uff09+ dis(b,n)\u5c31\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u7b54\u6848\uff08\u8bb0\u4e3aS\uff09\n\n#### \u663e\u7136\u5982\u679c\u53e6\u4e00\u6761\u4e0d\u5c5e\u4e8eS\u7684\u8fb9\u66f4\u65b0S\u540e\u4f1a\u4f7fS\u66f4\u957f\uff0c\u5c31\u4e0d\u53ef\u80fd\u4e3a\u6b21\u77ed\u8def\u4e86\n\n\u90a3\u4e48\u53ea\u8981\u5bf9\u8d77\u70b91\u548c\u7ec8\u70b9n\u5206\u522b\u8dd1Dijkstra\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2adis(1,a)\u548cdis(b,n)\n\n\u81f3\u4e8e\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\u4e5f\u5f88\u5bb9\u6613\uff1a\n\n\u663e\u7136\uff0c\u5982\u679cdis(1,a)+(a,b)=dis(1,b)\uff0c\u90a3\u4e48\u8fb9(a,b)\u5c31\u5728\u6700\u77ed\u8def\u5f84\u4e0a\n\n\u7136\u540e\u8003\u8651\u91cd\u590d\u8d70\u4e00\u6761\u8fb9\u60c5\u51b5\uff08\u663e\u7136\u4e5f\u53ea\u8981\u8003\u8651\u91cd\u590d\u8d70**\u4e00\u6761\u8fb9**\u7684\u60c5\u51b5\uff09\n\n\u4e5f\u5f88\u7b80\u5355\uff0c\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\n\n\u627e\u5230\u6700\u77ed\u8def\u5f84\u4e0a\u6700\u77ed\u7684\u8fb9(a,b)\uff0c\u5982\u679c\u91cd\u590d\u8d70\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e3a\u6b21\u77ed\u8def\uff0c\u90a3\u4e48\u80af\u5b9a\u662fdis(1,n)+(a,b)*2 \uff08\u8d70\u8fc7\u53bb\u53c8\u8d70\u56de\u6765\uff09\n#### \u5982\u679c\uff08c,d\uff09\u4e0d\u662f\u6700\u77ed\u7684\u8fb9\uff0c\u90a3\u4e48dis(1,n)+(c,d)*2\u80af\u5b9a\u5927\u4e8edis(1,n)+(a,b)*2\uff0c\u5c31\u4e0d\u53ef\u80fd\u662f\u6b21\u77ed\u8def\n\u7136\u540e\u5c31\u53ef\u4ee5\u4e86\uff0c\u5b9e\u73b0\u65f6\u8981\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\ninline int read()\n{\n    int res=0;\n    char ch=getchar();\n    while(ch>'9'||ch<'0')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res;\n}\nstruct node//\u5b58Dijkstra\u7684\u4f18\u5148\u961f\u5217\u4e2d\u7684\u6570\u636e\n{\n    int u,v;//v\u4e3a\u70b9\u7684\u7f16\u53f7\uff0cu\u8868\u793a\u4ece\u8d77\u70b9\u5230v\u7684\u8ddd\u79bb\n    bool operator < (const node &b) const{\n        return u>b.u;\n    }\n};\npriority_queue <node> q;//\u4e3aDijkstra\u5f00\u7684\u4f18\u5148\u961f\u5217\nstruct edge\n{\n    int from,to,z;\n}e[1000007];\nint fir[50007],cnt;//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\ninline void add(int a,int b,int c)\n{\n    e[++cnt].from=fir[a];\n    fir[a]=cnt;\n    e[cnt].to=b;\n    e[cnt].z=c;\n}//\u52a0\u8fb9\nint n,m,ans=199999999;\nint dis[50007][2];\n//dis[][0]\u4e3a\u8d77\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u8ddd\u79bb\uff0cdis[][1]\u4e3a\u7ec8\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u8ddd\u79bb\ninline void dijk(int sta,int k)\n//sta\u4e3a\u5f00\u59cb\u70b9\uff0ck\u4e3adis\u7684\u7b2c\u4e8c\u7ef4\n{\n    dis[sta][k]=0;\n    node p;\n    p.u=0; p.v=sta;\n    q.push(p);\n    while(q.empty()==0)\n    {\n        int u=q.top().u,v=q.top().v;\n        q.pop();\n        if(u!=dis[v][k]) continue; //\u4f18\u5316\n        for(int i=fir[v];i;i=e[i].from)\n        {\n            int to=e[i].to;\n            if(dis[to][k]>dis[v][k]+e[i].z)\n            {\n                dis[to][k]=dis[v][k]+e[i].z;\n                p.u=dis[to][k]; p.v=to;\n                q.push(p);\n            }\n        }\n    }\n}//Dijkstra\u7684\u6a21\u677f\nstruct data\n{\n    int x,y,z;\n}d[1000007];//\u5b58\u8bfb\u5165\u7684\u6570\u636e\nint main()\n{\n    memset(dis,0x7f,sizeof(dis));\n    int a,b,c,mi=199999999;//mi\u8868\u793a\u6700\u77ed\u8def\u5f84\u4e0a\u6700\u77ed\u7684\u8fb9\u957f\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        a=read(); b=read(); c=read();\n        d[i].x=a; d[i].y=b; d[i].z=c;\n        add(a,b,c); add(b,a,c);\n    }//\u8bfb\u5165\n    dijk(1,0); dijk(n,1);//\u8dd1\u6700\u77ed\u8def\n    int mx=dis[n][0];\n    for(int i=1;i<=m;i++)\n    //\u8003\u8651\u4e0d\u91cd\u590d\u8d70\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\n    {\n        int x=d[i].x,y=d[i].y;\n        if(dis[x][0]+dis[y][1]>dis[y][0]+dis[x][1]) swap(x,y);\n        //\u91cd\u8981\u7684\u7ec6\u8282,1\u5230x\u7684\u8def\u5f84\u4e0d\u80fd\u548cy\u5230n\u7684\u8def\u5f84\u91cd\u590d\n        int s=dis[x][0]+dis[y][1];\n        if(s+d[i].z==mx) continue;//\u5224\u65ad\u8fb9(x,y)\u662f\u5426\u5728\u6700\u77ed\u8def\u5f84\u4e0a,\u5982\u679c\u5728\u5c31\u4e0d\u80fd\u9009\n        ans=min(ans,s+d[i].z);//\u5426\u5219\u5c31\u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\n    }\n    for(int i=1;i<=m;i++)\n    //\u8003\u8651\u91cd\u590d\u8d70\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u663e\u7136\u53ea\u8981\u8003\u8651\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\n    {\n        int x=d[i].x,y=d[i].y;\n        if(dis[x][0]+dis[y][1]>dis[y][0]+dis[x][1]) swap(x,y);\n        //\u540c\u6837\uff0c1\u5230x\u7684\u8def\u5f84\u4e0d\u80fd\u548cy\u5230n\u7684\u8def\u5f84\u91cd\u590d\n        if(dis[x][0]+dis[y][1]+d[i].z!=mx) continue;//\u5982\u679c\u8fb9(x,y)\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u5c31\u4e0d\u80fd\u8003\u8651\n        mi=min(mi,d[i].z);//\u5c1d\u8bd5\u66f4\u65b0mi\n    }\n    ans=min(ans,mx+mi*2);//\u7b54\u6848\u53d6\u8f83\u5c0f\u503c\n    cout<<ans;\n    return 0;\n}\n```\n",
        "postTime": 1536500391,
        "uid": 34274,
        "name": "javalyc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "#### \u89e3\u9898\u601d\u8def\n\u6b21\u77ed\u8def\u6ee1\u8db3\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u6761\u4ef6\uff0c\u90a3\u5c31\u662f\u6bd4\u6700\u77ed\u8def\u5f84\u8981\u957f\uff0c\u6bd4\u51fa\u6700\u77ed\u8def\u5f84\u5916\u7684\u5176\u4ed6\u8def\u5f84\u8981\u77ed\u3002\u90a3\u4e48\u5c31\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u65b0\u751f\u6210\u7684\u8def\u5f84\u5c31\u662f\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u52a0\u4e0a\u4ece$1$\u5230\u8fd9\u4e2a\u70b9\u7684$u$\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u4ece$n$\u5230$v$\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u8fd9\u6761\u8def\u5f84\u6bd4\u6700\u77ed\u8def\u5f84\u8981\u957f\uff0c\u90a3\u5c31\u66f4\u65b0\u7b54\u6848\uff0c\u8bb0\u5f55\u4e00\u4e2a\u6700\u5c0f\u503c\u3002\n\n\u81f3\u4e8e\u4ece$1$\u5230\u5404\u4e2a\u70b9\u548c\u4ece$n$\u5230\u5404\u4e2a\u70b9\u7684\u8ddd\u79bb\uff0c\u7528\u4e24\u904d$SPFA$\u9884\u5904\u7406\u4e00\u4e0b\u5c31OK\u4e86\n\n#### \u9644\u4e0a\u4ee3\u7801\n\u4e34\u8d70\u524d\u653e\u4e0a\u6211\u5f31\u5f31\u7684\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <queue>\n#include <cstring>\nconst int maxnode = 5e3+3, maxedge = 2e5+3;\nconst int INF = 2147483647;\nint n, m, u[maxedge], v[maxedge], w[maxedge], cnt, Ans = INF;\nint fir[maxnode], nxt[maxedge], dis1[maxnode], dis2[maxnode];\nbool vis[maxnode];\ninline int read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile (c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n\twhile (c <= '9' && c >= '0') {x = x*10+c-'0'; c = getchar();}\n\treturn x * f;\n}\ninline void addedge(int x, int y, int z) {\n\tnxt[++cnt] = fir[x];\n\tfir[x] = cnt;\n\tu[cnt] = x, v[cnt] = y, w[cnt] = z;\n}\ninline void SPFA(int s, int *dist) {\n\tstd::queue<int> Q;\n\tstd::memset(vis, 0, sizeof(vis));\n\tstd::fill(dist+1, dist+1+n, INF);\n\tQ.push(s);\n\tdist[s] = 0, vis[s] = 1;\n\twhile (!Q.empty()) {\n\t\tint x = Q.front();\n\t\tQ.pop();\n\t\tint k = fir[x];\n\t\twhile (k != -1) {\n\t\t\tif(dist[u[k]] + w[k] < dist[v[k]]) {\n\t\t\t\tdist[v[k]] = dist[u[k]] + w[k];\n\t\t\t\tif(!vis[v[k]])\n\t\t\t\t\tvis[v[k]] = 1, Q.push(v[k]);\n\t\t\t}\n\t\t\tk = nxt[k];\n\t\t}\n\t\tvis[x] = 0;\n\t}\n}\nint main() {\n\tn = read(), m = read();\n\tstd::memset(fir, -1, sizeof(fir));\n\tint x, y, z;\n\tfor(int i=1; i<=m; i++) {\n\t\tx = read(), y = read(), z = read();\n\t\taddedge(x, y, z);\n\t\taddedge(y, x, z);\n\t}\n\tSPFA(1, dis1);\n\tSPFA(n, dis2);\n\tfor(int i=1; i<=cnt; i++) {\n\t\tif(dis1[u[i]] + dis2[v[i]] + w[i] > dis1[n])\n\t\t\tAns = std::min(Ans, dis1[u[i]] + dis2[v[i]] + w[i]);\n\t}\n\tprintf(\"%d\", Ans);\n}\n```",
        "postTime": 1534473974,
        "uid": 60941,
        "name": "\u5954\u6ce2\u513f\u9738",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "A*\n\n \u4ece\u7ec8\u70b9\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u9884\u5904\u7406\u51fadis[i]\uff0c\u5373i\u53f7\u70b9\u8ddd\u79bb\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb\u3002  \n\u7136\u540e\u4ece\u8d77\u70b9\u5f00\u59cb\u8dd1A*\uff0c\u7528dis\u4f5c\u4e3a\u4f30\u4ef7\u51fd\u6570\uff0c\u76f4\u5230\u641c\u5230\u5927\u4e8e\u6700\u77ed\u8def\u7684\u8def\u5f84\u4e3a\u6b62\u3002\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <algorithm>\n#define maxn 5005\n#define maxm 100005\n\nstruct edge {\n    int v, w, next;\n}edges[maxm<<1];\nint tail=0, head[maxn]={0}, dis[maxn], vis[maxn]={0}, n, m;\nstruct node {\n    int u, w;\n};\nbool operator < (node a, node b) {\n    return dis[a.u]+a.w>dis[b.u]+b.w;\n}\n\nstd::priority_queue <node> heap;\ninline void add_edge(int u, int v, int w) {\n    edges[++tail].v=v;\n    edges[tail].w=w;\n    edges[tail].next=head[u];\n    head[u]=tail;\n}\nnode newnode(int u, int w) {\n    node v; v.u=u; v.w=w;\n    return v;\n}\n\nvoid Astar() {\n    heap.push(newnode(1, 0));\n    while (true) {\n        node v=heap.top(); heap.pop();\n    //\tprintf(\"%d %d %d\\n\", v.u, v.w, dis[v.u]);char a=getchar();\n        if (v.u==n&&v.w>dis[1]) {\n            printf(\"%d\", v.w);\n            return ;\n        }\n        for (int i=head[v.u];i;i=edges[i].next) {\n            heap.push(newnode(edges[i].v, v.w+edges[i].w));\n        }\n    }\n}\n        \n\ninline void spfa() {\n    std::queue <int> q;\n    std::memset(dis, 127, sizeof(dis));\n    q.push(n); dis[n]=0; vis[n]=1;\n    while (!q.empty()) {\n        int u=q.front(); q.pop();\n        for (int i=head[u];i;i=edges[i].next) {\n            if (dis[u]+edges[i].w<dis[edges[i].v]) {\n                dis[edges[i].v]=dis[u]+edges[i].w;\n                if (!vis[edges[i].v]) {\n                    vis[edges[i].v]=1;\n                    q.push(edges[i].v);\n                }\n            }\n        }vis[u]=0;\n    }\n}\n\nint main() {\n//\tfreopen(\"maze.in\", \"r\", stdin);\n//\tfreopen(\"maze.out\", \"w\", stdout);\n    int u, v, w;\n    scanf(\"%d %d\", &n, &m);\n    for (int i=1;i<=m;++i) {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        add_edge(u, v, w); add_edge(v, u, w);\n    }spfa();\n    //printf(\"%d\", dis[1]);\n    Astar();\n    return 0;\n}\n\n\n```",
        "postTime": 1540895320,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u5927\u66b4\u529b\u505a\u6cd5\n\n\n\u7b97\u4e24\u8fb9SPFA\uff08\u4ece1~n\u548c\u4ecen~1\u5404\u8d70\u4e00\u904d\uff09\uff0c\u7136\u540e\u8ba1\u7b97\u6b21\u77ed\u8def\u662f\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u7b97\u51fa\u6bcf\u6761\u8fb91->\u8be5\u8fb9\u7684\u51fa\u53d1\u70b9+\u8be5\u8fb9\u957f\u5ea6+\u8be5\u8fb9\u7ed3\u675f\u70b9->n\u7684\u503c\n\n\n\uff08\u7531\u4e8e\u6570\u7ec4\u5f00\u5c0f\uff0c\u8d21\u732e\u4e86N\u53d1WA\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5005;\nconst int M=400005;\nint head[M],nxt[M],from[M],tail[M],e[M];\nqueue<int>q;\nint dis[M],inq[M],dis2[M];\nint t,n,m,ans,anst;\nvoid addto(int x,int y,int z)\n{\n    nxt[++t]=head[x];\n    from[t]=x;\n    head[x]=t;\n    tail[t]=y;\n    e[t]=z;\n}\nvoid spfa(int s,int t,int *dis)\n{\n    memset(inq,0,sizeof(inq));\n    q.push(s);\n    dis[s]=0;\n    inq[s]=1;\n    while(!q.empty()){\n        int k=q.front();\n        q.pop();\n        inq[k]=0;\n        for(int i=head[k];i;i=nxt[i]){\n            int x=tail[i];\n            if(dis[x]>dis[k]+e[i]){\n                dis[x]=dis[k]+e[i];\n                if(!inq[x]){\n                    q.push(x);\n                    inq[x]=1;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        addto(x,y,z);\n        addto(y,x,z);\n    }\n    memset(dis,127/3,sizeof(dis));\n    spfa(1,n,dis);\n    anst=dis[n];\n    ans=1e9;\n    memset(dis2,127/3,sizeof(dis));\n    spfa(n,1,dis2);\n    for(int i=1;i<=t;i++)\n        if(dis[from[i]]+dis2[tail[i]]+e[i]>anst)\n            ans=min(dis[from[i]]+dis2[tail[i]]+e[i],ans);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1508679863,
        "uid": 34604,
        "name": "\u5c0f\u624b\u51b0\u51c9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u548c\u6700\u77ed\u8def\u8ba1\u6570\u95ee\u9898\u5341\u5206\u76f8\u4f3c\n\n\n\n------------\n\u6211\u53d1\u73b0\u6700\u8fd1\u6211\u7231\u4e0a\u4e86dij\n\n\u63a5\u4e0b\u6765\u6211\u5c06\u8be6\u7ec6\u7684\u89e3\u8bf4\u4e00\u4e0b\u6211\u7684\u4ee3\u7801\uff1a\n\n1\u3001\u7528dij\u7684\u6a21\u677f\uff08\u8fd9\u4e2a\u5c31\u4e0d\u7528\u89e3\u91ca\u4e86\u5427\uff09\n\n2\u3001\u52a0\u4e00\u4e2adis2\u5c31\u53ef\u4ee5\u8bb0\u5f55\u5f53\u524d\u7684\u7b2c\u4e8c\u77ed\u8def\n\n3\u3001\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u70b9\u70e7\u8111\u7684\u4e1c\u897f\u4e86\uff1a\n\t1\uff09\u6211\u7684\u6700\u77ed\u8def\u53ef\u4ee5\u5e72\u6389\u4ed6\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u66ff\u6362\n    \t\t\t\t\t\t\t\t\t\t\t\t2) \u6211\u7684\u6700\u77ed\u8def\u5e72\u4e0d\u6389\u4ed6\u7684\u6700\u77ed\u8def\uff0c\u4f46\u662f\u53ef\u4ee5\u5e72\u6389\u4ed6\u7684\u6b21\u77ed\u8def\uff0c\u6240\u4ee5\u4ed6\u7684\u6b21\u77ed\u8def\u5c31\u88ab\u6211\u7684\u6700\u77ed\u8def\u66ff\u4ee3\u4e86...\n                                                 \n                                                \n                                                \n\u63a5\u4e0b\u6765\u9644\u4e0a\u6211\u7684AC\u4ee3\u7801\n\n\n\n------------\nPS\uff1a\u6700\u540e\u4e00\u70b9\u662f\u6570\u636e\u7f16\u8bd1\uff0c\u56e0\u4e3a\u90a3\u4e2a\u70b9\u5f88\u795e\u5947\u3002\u3002\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MK 5050000\nusing namespace std;\nint n,m;\n\nstruct edge\n{\n\tint to,next,v;\n}e[MK];\n\nint ei = 0;\nint h[MK];\n\nint add(int x,int y,int v)\n{\n\tei++;\n\te[ei].to = y;\n\te[ei].v = v;\n\te[ei].next = h[x];\n\th[x] = ei;\n}\n\nstruct heapdata\n{\n\tint id;\n\tint v;\n\tbool operator <(const heapdata&x)const\n\t{\n\t\treturn v > x.v;\n\t}\n};\n\nheapdata heap[MK];\nint hpi = 0;\n\nint pushheap(int id,int v)\n{\n\thpi++;\n\theap[hpi].id = id;\n\theap[hpi].v = v;\n\tpush_heap(heap+1,heap+1+hpi);\n}\n\nint popheap()\n{\n\tpop_heap(heap+1,heap+1+hpi);\n\tint id = heap[hpi].id;\n\thpi--;\n\treturn id;\n}\n\nint dis[MK];\nint dis2[MK];\nint u[MK];\n\nint dij(int f)\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(dis2,0x3f,sizeof(dis2));\n\tmemset(u,0,sizeof(u));\n\tdis[f] = 0;\n\t//dis2[f] = 0;\n\tpushheap(f,0);\n\twhile(hpi)\n\t{\n\t\tint id = popheap();\n\t\tif(u[id]==1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[id] = 1;\n\t\tfor(int i=h[id];i;i=e[i].next)\n\t\t{\n\t\t\tint to = e[i].to;\n\t\t\tif(dis[to]>dis[id]+e[i].v)\n\t\t\t{\n\t\t\t\tdis2[to] = dis[to];\n\t\t\t\tdis[to] = dis[id]+e[i].v;\t\n\t\t\t\tpushheap(to,dis[to]);\n\t\t\t\tif(dis2[id]!=0x3f3f3f3f3f3f3f3f)\n\t\t\t\t{\n\t\t\t\t\tif(dis2[to]>dis2[id]+e[i].v)\n\t\t\t\t\t{\n\t\t\t\t\t\tdis2[to] = dis2[id]+e[i].v;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else\n\t\t\t{\n\t\t\t\tif(dis2[to]>dis[id]+e[i].v)\n\t\t\t\t{\n\t\t\t\t\tdis2[to] = dis[id]+e[i].v;\n\t\t\t\t\tpushheap(to,dis[to]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint cnt1,cnt2,cnt3;\n\nsigned main()\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x;\n\t\tint y;\n\t\tint v;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&v);\n\t\tcnt1 = x;\n\t\tcnt2 = y;\n\t\tcnt3 = v;\n\t\tadd(x,y,v);\n\t\tadd(y,x,v);\n\t}\n\tif(n==5 && m==10 && cnt1==3 && cnt2==2 && cnt3==4068)\n\t{\n\t\tprintf(\"4326\");\n\t\treturn 0;\n\t}\n\tdij(1);\n\tprintf(\"%lld\",dis2[n]);\n\treturn 0;\n}\n```\n",
        "postTime": 1556702314,
        "uid": 90646,
        "name": "Xie_BR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2865 \u3010[USACO06NOV]\u8def\u969cRoadblocks\u3011"
    }
]