[
    {
        "content": "\u662f\u6211\u559c\u6b22\u7684\u8ba1\u7b97\u51e0\u4f55\uff01\u8d5b\u573a\u4e0a\u4e00\u8fb9\u5403\u5348\u996d\u4e00\u8fb9\u5199\u5b8c\u7684\uff08\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\u8fd9 $K$ \u68f5\u5723\u8bde\u6811\u5747\u5300\u5206\u5272\u4e86\u6574\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u8fb9\u957f\uff0c\u90a3\u4e48\u76f8\u90bb\u4e24\u68f5\u5723\u8bde\u6811\u5728\u51f8\u591a\u8fb9\u5f62\u8fb9\u4e0a\u7684\u8ddd\u79bb\u5c31\u662f\u4e00\u5b9a\u7684\uff08\u8bbe\u4e3a $dis$\uff09\u3002\u6211\u4eec\u9009\u62e9\u4e00\u68f5\u6811\u89c2\u5bdf\uff0c\u5c06\u5176\u5411\u987a\u65f6\u9488\u65b9\u5411\u632a\u52a8 $dis$\uff0c\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\uff0c\u5176\u540e\u9762\u4e00\u68f5\u6811\u6765\u5230\u4e86\u5b83\u5148\u524d\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6574\u4f53\u4e5f\u5c31\u56de\u5230\u4e86\u632a\u52a8\u524d\u7684\u72b6\u6001\u3002\n\n\u6211\u4eec\u5b9a\u4e49 **\u8df3\u8fb9** \u4ee3\u8868\u6811\u632a\u5230\u4e00\u6761\u8fb9\u7684\u7aef\u70b9\uff0c\u7136\u540e\u524d\u5f80\u4e0b\u4e00\u6761\u8fb9\u7684\u77ac\u95f4\uff0c\u90a3\u4e48\u7531\u4e8e\u6240\u6709\u6811\u79fb\u52a8\u7684\u8ddd\u79bb\u6070\u597d\u8986\u76d6\u6574\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u5468\u957f\uff0c\u53d1\u751f\u7684 **\u8df3\u8fb9** \u6b21\u6570\u548c\u51f8\u591a\u8fb9\u5f62\u62d0\u89d2\u6570\u76ee\u4e00\u6837\uff0c\u4e5f\u5c31\u662f $N$\u3002\n\n\u8003\u8651\u6a21\u62df\u6574\u4e2a\u8fc7\u7a0b\uff0c\u94a6\u5b9a\u4e00\u68f5\u6811\uff0c\u4e00\u5f00\u59cb\u5728\u51f8\u591a\u8fb9\u5f62\u7684\u67d0\u4e00\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u5411\u53f3\u632a $dis$\u3002\u671f\u95f4\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5176\u5b83\u6240\u6709\u70b9\u7684\u4f4d\u7f6e\uff0c\u7531\u6b64\u63a8\u51fa\u6240\u6709 **\u8df3\u8fb9** \u7684\u65f6\u95f4\u70b9\u3002\u7531\u4e8e\u4e24\u6b21 **\u8df3\u8fb9** \u4e4b\u95f4\uff0c\u6bcf\u4e2a\u70b9\u90fd\u5728\u4e00\u4e2a\u7ebf\u6bb5\u4e4b\u95f4\u79fb\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u7528\u51fd\u6570\u8868\u793a\u51fa\u8fd9\u6bb5\u65f6\u95f4\u7684\u51f8\u591a\u8fb9\u5f62\u9762\u79ef\uff0c\u5e76\u6c42\u51fa\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u8fd9 $K$ \u68f5\u6811\u6240\u5728\u4f4d\u7f6e\u4e3a $t_1, t_2, ..., t_K$\uff0c\u8fd9 $N$ \u6761\u8fb9\u7684\u957f\u5ea6\u4e3a $s_1, s_2, ..., s_N$\uff0c\u5176\u4e2d $s_1$ \u4ee3\u8868\u7684\u8fb9\u8fde\u63a5 $p_1$ \u548c $p_2$\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u540c\u65f6\u9ed8\u8ba4 $p_{N+1}=p_1$\u3002\n\n\u5728\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u7684\u5f00\u59cb\uff0c\u6bcf\u4e2a\u70b9\u5728\u51f8\u591a\u8fb9\u5f62\u7684\u5468\u957f\u4e0a\u548c $p_1$ \u7684\u8ddd\u79bb\uff08$p_1$ \u987a\u65f6\u9488\u5230\u8fbe\u8be5\u70b9\u7684\u8ddd\u79bb\uff09\u662f\u786e\u5b9a\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u987a\u5e8f\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u7136\u540e\u4f7f\u7528\u6307\u9488\u7ef4\u62a4\u5f53\u524d\u70b9\u6240\u5728\u7684\u8fb9\u3002\n\n\u5047\u8bbe\u7b2c $i$ \u4e2a\u70b9\u843d\u5728\u4e86\u7b2c $j$ \u6761\u8fb9\u4e0a\uff0c\u548c $p_j$ \u7684\u8ddd\u79bb\u4e3a $d$\u3002\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5c06\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u501f\u52a9\u65f6\u95f4\u8868\u793a\u51fa\u6765\u3002\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u65f6\u95f4\u4e3a $x$\uff0c\u90a3\u4e48\u524d\u9762\u7684\u8ddd\u79bb\u5c06\u4f1a\u6269\u5927\u5230 $d+x$\uff0c\u6839\u636e\u5411\u91cf\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa $\\overrightarrow{p_jp_{j+1}}$ \u7684\u5355\u4f4d\u5411\u91cf\u4e8e\u8ddd\u79bb\u76f8\u52a0\uff0c\u52a0\u4e0a\u521d\u59cb\u70b9 $p_j$\uff0c\u5373\uff1a\n\n$$t_i = p_j + \\dfrac{\\overrightarrow{p_jp_{j+1}}}{|\\overrightarrow{p_jp_{j+1}}|} \\times (d + x)$$\n\n\u6211\u4eec\u5c31\u6210\u529f\u4f7f\u7528\u65f6\u95f4\u8868\u793a\u4e86\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u53c9\u79ef\u7b97\u51fa\u51f8\u591a\u8fb9\u5f62\u7684\u9762\u79ef\uff08\u5177\u4f53\u800c\u8a00\uff0c\u9009\u62e9\u4e00\u4e2a\u70b9\u5411\u5176\u4f59\u6240\u6709\u975e\u76f8\u90bb\u70b9\u8fde\u8fb9\uff0c\u5c06\u51f8\u591a\u8fb9\u5f62\u62c6\u6210\u82e5\u5e72\u4e2a\u4e09\u89d2\u5f62\uff0c\u800c\u5411\u91cf\u53c9\u79ef\u7684\u7ed3\u679c\u7684\u7edd\u5bf9\u503c\u6070\u4e3a\u5176\u56f4\u6210\u4e09\u89d2\u5f62\u9762\u79ef\u7684\u4e24\u500d\uff09\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u5185\u4e8c\u6b21\u51fd\u6570\u7684\u6700\u5c0f\u503c\u5c31\u80fd\u89e3\u51b3\u95ee\u9898\u3002\n\n\u6700\u540e\u628a\u6240\u6709\u65f6\u95f4\u6bb5\u7684\u7b54\u6848\u7edf\u8ba1\u8d77\u6765\u5c31\u5b8c\u6210\u4e86\uff0c\u590d\u6742\u5ea6\u4e3a $O(NK + N^2)$\u3002\u5982\u679c\u5728\u6c42\u51fa **\u8df3\u8fb9** \u65f6\u95f4\u70b9\u7684\u540c\u65f6\u5b58\u50a8\u5bf9\u5e94\u70b9\uff0c\u5c31\u53ef\u4ee5\u7701\u53bb\u91cd\u65b0\u83b7\u53d6\u6240\u6709\u70b9\u6240\u5728\u8fb9\u7684\u4f4d\u7f6e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f7f\u603b\u590d\u6742\u5ea6\u964d\u4e3a $O(NK)$\u3002\n\n\u4ee3\u7801\u4e2d `KBs` \u7ef4\u62a4\u4e86 $kx + b$\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\nstruct KBs{\n\tdouble k, b;\n\tKBs(double k=0, double b=0)\n\t\t:k(k), b(b){}\n\tKBs operator + (const KBs x) const{\n\t\treturn KBs(k + x.k, b + x.b);\n\t}\n\tKBs operator - (const KBs x) const{\n\t\treturn KBs(k - x.k, b - x.b);\n\t}\n\tKBs operator * (const double p) const{\n\t\treturn KBs(k * p, b * p);\n\t}\n};\nstruct Point{\n\tKBs x, y;\n\tPoint(KBs x = 0, KBs y = 0)\n\t\t:x(x), y(y){}\n\tPoint operator + (const Point& p)const{\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (const Point& p)const{\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (const double k)const{\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator * (const KBs k)const{\n\t\treturn Point(k * x.b, k * y.b);\n\t}\n};\ndouble sqr(double x){\n\treturn x * x;\n}\nstruct Segment{\n\tPoint st, ed;\n\tSegment(Point st = Point(KBs(), KBs()), Point ed = Point(KBs(), KBs()))\n\t\t:st(st), ed(ed){}\n\tdouble len(){\n\t\treturn sqrt(sqr(st.x.b - ed.x.b) + sqr(st.y.b - ed.y.b));\n\t}\n\tPoint at(KBs k){\n\t\treturn st + (ed - st) * k;\n\t}\n};\nstruct Function{\n\tdouble a, b, c;\n\tFunction(double a=0, double b=0, double c=0)\n\t\t:a(a), b(b), c(c){}\n\tFunction operator + (const Function& f)const{\n\t\treturn Function(a + f.a, b + f.b, c + f.c);\n\t}\n\tFunction operator - (const Function& f)const{\n\t\treturn Function(a - f.a, b - f.b, c - f.c);\n\t}\n\tdouble at(double x){\n\t\treturn a * x * x + b * x + c;\n\t}\n\tdouble minn(double l, double r){\n\t\tif(a == 0)\n\t\t\treturn min(at(l), at(r));\n\t\t// return 0.0;\n\t\tdouble mn = -1.0 * b / (2 * a);\n\t\tif(l <= mn && mn <= r)\n\t\t\treturn min({at(l), at(r), at(mn)});\n\t\treturn min(at(l), at(r));\n\t}\n};\nPoint ps[1010];\nSegment segs[1010];\nint N, K;\nint curr[1010];\ndouble lens[1010];\ndouble lenfnt[1010];\nvector<pair<double, int> > vec;\n\nFunction KBsCross(KBs x, KBs y){\n\treturn Function(x.k * y.k, x.k * y.b + x.b * y.k, x.b * y.b);\n}\nFunction pointCross(Point x, Point y){\n\treturn KBsCross(x.x, y.y) - KBsCross(x.y, y.x);\n}\n\nint main(){\n\tscanf(\"%d%d\", &N, &K);\n\tfor(int i=N; i>=1; i--)\n\t\tscanf(\"%lf %lf\", &ps[i].x.b, &ps[i].y.b);\n\tps[N+1] = ps[1];\n\tdouble C = 0;\n\tfor(int i=1; i<=N; i++)\n\t\tsegs[i] = Segment(ps[i], ps[i+1]), C += lens[i] = segs[i].len();\n\tsegs[N+1] = segs[1];\n\tC /= K;\n\tdouble las = 0;\n\tint m = 1;\n\tcurr[1] = 0;\n\tfor(int i=1; i<=N; i++){\n\t\tlas += lens[i];\n\t\tlenfnt[i] = lenfnt[i-1] + lens[i];\n\t\twhile(las >= C && m != K)\n\t\t\tlas -= C, curr[++m] = i;\n\t\tif(i == N)\n\t\t\tm = 1;\n\t\telse\n\t\t\tvec.emplace_back(las, m);\n\t}\n\tlens[N+1] = lens[1];\n\tvec.emplace_back(0, 1);\n\tvec.emplace_back(C, 1);\n\tsort(vec.begin(), vec.end());\n\tdouble ans = 1e18;\n\tfor(int i=0; i<(int)vec.size()-1; i++){\n\t\tpair<double, int> pr = vec[i];\n\t\tcurr[pr.second] ++;\n\t\tdouble L = pr.first, R = vec[i+1].first;\n\t\tvector<Point> plist(K + 2);\n\t\tfor(int j=1; j<=K; j++){\n\t\t\tint id = curr[j];\n\t\t\tdouble y = (j-1) * C - lenfnt[id-1];\n\t\t\tKBs num(1.0 / lens[id], y / lens[id]);\n\t\t\tplist[j] = segs[id].at(num);\n\t\t}\n\t\tFunction f;\n\t\tfor(int i=1; i<=K; i++){\n\t\t\tint j = i % K + 1;\n\t\t\tf = f + pointCross(plist[i], plist[j]);\n\t\t}\n\t\tif(f.at(L) < 0) // \u5efa\u8bae\u52a0\u4e0a\u8fd9\u4e2a\u68c0\u67e5\uff0c\u9632\u6b62\u51f8\u591a\u8fb9\u5f62\u53c9\u51fa\u6765\u9762\u79ef\u662f\u4e2a\u8d1f\u6570\n\t\t\tf.a *= -1, f.b *= -1, f.c *= -1;\n\t\tans = min(ans, f.minn(L, R));\n\t}\n\tprintf(\"%.12f\", ans / 2);\n\treturn 0;\n}\n```",
        "postTime": 1649045374,
        "uid": 60864,
        "name": "tiger2005",
        "ccfLevel": 7,
        "title": "[THUPC2022 \u521d\u8d5b] \u55b5\u55b5\u82b1\u5712 \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u5230\u672c\u9898\u7684\u96be\u5ea6\uff0c\u8fd9\u7bc7\u9898\u89e3\u4f1a\u5ffd\u7565\uff1a\u5982\u4f55\u6c42\u51f8 $k$ \u8fb9\u5f62\u9762\u79ef\uff1b\u5df2\u77e5\u4e00\u4e2a\u51fa\u53d1\u70b9\uff0c\u5982\u4f55\u627e\u51fa\u5168\u90e8 $k$ \u4e2a\u70b9\u8fd9\u4e24\u90e8\u5206\u3002\u5982\u679c\u60a8\u4e0d\u4f1a\u8fd9\u4e24\u4e2a\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u5148\u5b66\u4e60\u4e00\u4e0b\u57fa\u7840\u7684\u8ba1\u7b97\u51e0\u4f55\u77e5\u8bc6\u3002\n\n------------\n\n\u9996\u5148\u5bb9\u6613\u53d1\u73b0\uff0c\u53ea\u8981\u6211\u4eec\u786e\u5b9a\u4e86\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u5c31\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u5f97\u5230\u6240\u9700\u7684 $k$ \u4e2a\u70b9\u3002\n\n\u4ee4 $x_{n+1}=x_1,y_{n+1}=y_1,C=\\sum\\limits_{i=2}^{n+1}\\sqrt{\\left(x_i-x_{i-1}\\right)^2+\\left(y_i-y_{i-1}\\right)^2}$ (\u5373\u9898\u76ee\u6240\u7ed9\u7684 $n$ \u8fb9\u5f62\u7684\u5468\u957f)\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u627e\u51fa\u4ece\u7b2c\u4e00\u4e2a\u70b9\u51fa\u53d1\u3001\u603b\u957f\u5ea6\u4e3a $\\dfrac{C}{k}$ \u7684\u4e00\u6bb5\u8fb9\u4e0a\u7684\u4e00\u4e2a\u6700\u4f18\u70b9\uff0c\u6839\u636e\u8fd9\u4e2a\u70b9\u627e\u5230\u5168\u90e8 $k$ \u4e2a\u70b9\u5e76\u7b97\u51fa\u5176\u9762\u79ef\uff0c\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u6c42\u51fa\u8fd9\u4e2a\u6700\u4f18\u70b9\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5f15\u51fa\u4e00\u4e2a\u5173\u952e\u7ed3\u8bba\uff1a\u79bb\u6700\u4f18\u70b9\u8d8a\u8fd1\uff0c\u5219\u9762\u79ef\u8d8a\u5927\uff1b\u5426\u5219\u9762\u79ef\u5c31\u8d8a\u5c0f\u3002\n\n\u5148\u6765\u8ba8\u8bba\u7531\u8fd9\u4e2a\u7ed3\u8bba\u5982\u4f55\u5f97\u5230\u6b63\u89e3\u3002\u65e2\u7136\u79bb\u6700\u4f18\u70b9\u8d8a\u8fd1\u5219\u8d8a\u4f18\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4e09\u5206\u5f53\u524d\u70b9\u5230\u7b2c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\u3002\n\n\u8003\u8651\u5c06\u6700\u4f18\u70b9\u5411\u987a\u65f6\u9488\u65b9\u5411\u79fb\u52a8\u4e00\u4e2a $dx$ \u7684\u8ddd\u79bb\u3002\u90a3\u4e48\uff0c\u539f\u5148\u7684 $k$ \u4e2a\u70b9\u5747\u4f1a\u5411\u987a\u65f6\u9488\u65b9\u5411\u79fb\u52a8 $dx$\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e2d\u95f4\u56f4\u6210\u7684\u591a\u8fb9\u5f62\u9762\u79ef\u5c31\u7b49\u4e8e\u539f\u5148\u7684 $n$ \u8fb9\u5f62\u9762\u79ef\uff0c\u51cf\u53bb\u8fd9 $k$ \u6761\u7ebf\u6bb5\u4e0e\u539f\u6765\u7684\u8fb9\u56f4\u6210\u7684\u6240\u6709\u591a\u8fb9\u5f62\u7684\u9762\u79ef\u4e4b\u548c\u3002\n\n\u90a3\u4e48\u5f53\u6bcf\u4e2a\u70b9\u90fd\u987a\u65f6\u9488\u79fb\u52a8\u4e86\u4e00\u4e2a $dx$ \u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u591a\u8fb9\u5f62\uff0c\u5148\u5047\u8bbe\u5176\u8fb9\u6570\u4e0d\u53d8\uff0c\u90a3\u4e48\u5982\u4e0b\u56fe\u6240\u793a\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/7cbie9hf.png)\n\n\u84dd\u8272\u6807\u51fa\u7684\u90e8\u5206\u662f\u8fd9\u6b21 $dx$ \u7684\u79fb\u52a8\u6240\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 $O$ \u70b9\u7684\u4f4d\u7f6e\u8d8a\u6765\u8d8a\u5904\u5728\u9ed1\u7ebf / \u7ea2\u7ebf\u7684\u4e2d\u95f4\u65f6\uff0c\u4e24\u8fb9\u7684\u9762\u79ef\u5c31\u8d8a\u63a5\u8fd1\u3002\n\n\u663e\u800c\u6613\u89c1\uff0c\u968f\u7740 $dx$ \u7684\u5927\u5c0f\u5355\u8c03\u53d8\u5316\uff0c$O$ \u70b9\u7684\u53d8\u5316\u4e00\u5b9a\u662f\u5355\u5411\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u8c03\u8f6c\u79fb\u52a8\u65b9\u5411\u3002\u56e0\u6b64\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684\u591a\u8fb9\u5f62\uff0c\u5176\u9762\u79ef\u53d8\u5316\u548c $dx$ \u7684\u5927\u5c0f\u662f\u4e00\u4e2a**\u51f8\u51fd\u6570**\u3002\n\n\u800c\u6211\u4eec\u77e5\u9053\uff0c\u591a\u4e2a\u51f8\u51fd\u6570\u4e4b\u548c\u4ecd\u7136\u662f\u51f8\u51fd\u6570\u3002\u6240\u4ee5\uff0c$dx$ \u7684\u5927\u5c0f\u548c $k$ \u6761\u8fb9\u4e0e\u539f\u5148\u7684\u8fb9\u56f4\u6210\u7684\u591a\u8fb9\u5f62\u9762\u79ef\u4e4b\u548c\u6784\u6210\u4e00\u4e2a\u51f8\u51fd\u6570\u5173\u7cfb\u3002\u4e8e\u662f\u5c31\u8bc1\u660e\u4e86\u5176\u5355\u5cf0\u6027\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u7528\u4e0a\u9762\u5df2\u7ecf\u63d0\u5230\u7684\u65b9\u6cd5\uff0c\u5373\u53ef\u89e3\u51b3\u6b64\u9898\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log V)$\uff0c$V$ \u4e3a\u4e09\u5206\u65f6\u7684\u503c\u57df\u3002\n\n\u9898\u5916\u8bdd $1$\uff1a\u7531\u6b64\u4e5f\u53ef\u89c1\uff0c\u539f\u9898\u7684\u6570\u636e\u8303\u56f4\u662f\u76f8\u5f53\u5c0f\u7684\u3002\n\n\u9898\u5916\u8bdd $2$\uff1a\u8fd9\u9898\u7684\u7cbe\u5ea6\u8981\u6c42\u6781\u4f4e\u3002\u5b9e\u9645\u4e0a\uff0c\u4e09\u5206\u7cbe\u5ea6\u8c03\u5230 $50$ \u90fd\u662f\u53ef\u4ee5\u8fc7\u7684\u3002~~\u4e00\u5f00\u59cb\u6211\u8fd8\u6015\u88ab\u5361\u7cbe\u5ea6\u800c\u5f00\u5230\u4e86 $10^{-9}$\u3002~~\n\ncode\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint n,k,x[1005],y[1005];\ndouble dis,ans=1e15,d[1001],t1[1001],t2[1001];\ndouble getd(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}\ndouble crs(double x1,double y1,double x2,double y2){return x1*y2-x2*y1;}\ndouble calS()\n{\n\tdouble res=0;\n\tfor(int i=1;i<=k;i++) res+=crs(t1[i],t2[i],t1[i%k+1],t2[i%k+1]);\n\treturn 0.5*res;\n}\nvoid getpt(double &ex,double &ey,double x1,double y1,double x2,double y2,double len)\n{\n\tdouble td=getd(x1,y1,x2,y2);\n\tex=x1+(x2-x1)/td*len;\n\tey=y1+(y2-y1)/td*len;\n}\ndouble cal(int l,double len)\n{\n\tint cur=l%n+1;\n\tgetpt(t1[1],t2[1],x[l],y[l],x[l+1],y[l+1],len);\n\tfor(int i=2;i<=k;i++)\n\t{\n\t\tdouble cx=t1[i-1],cy=t2[i-1],resd=dis;\n\t\twhile(1)\n\t\t{\n\t\t\tdouble tl=getd(cx,cy,x[cur],y[cur]);\n\t\t\tif(tl<resd)\n\t\t\t{\n\t\t\t\tcx=x[cur],cy=y[cur];\n\t\t\t\tresd-=tl;cur=cur%n+1;\n\t\t\t}\n\t\t\telse{getpt(t1[i],t2[i],cx,cy,x[cur],y[cur],resd);break;}\n\t\t}\n\t}\n\treturn calS();\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++) scanf(\"%d%d\",&x[i],&y[i]);x[n+1]=x[1],y[n+1]=y[1];\n\tfor(int i=1;i<=n;i++) d[i]=getd(x[i],y[i],x[i+1],y[i+1]),dis+=d[i];dis/=k;\n\tint en=0;double tmp=0;while(tmp<dis) tmp+=d[++en];\n\tfor(int i=1;i<=en;i++)\n\t{\n\t\tdouble l=0,r=d[i];\n\t\twhile(r-l>1e-9)\n\t\t{\n\t\t\tdouble mid1=l+(r-l)/3.0,mid2=r-(r-l)/3.0;\n\t\t\tdouble res1=cal(i,mid1),res2=cal(i,mid2);\n\t\t\tans=min(ans,min(res1,res2));\n\t\t\tif(res1<res2) r=mid2;\n\t\t\telse l=mid1;\n\t\t}\n\t}\n\tprintf(\"%.10f\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1648305800,
        "uid": 153687,
        "name": "donghanwen1225",
        "ccfLevel": 8,
        "title": "P8212 \u9898\u89e3"
    }
]