[
    {
        "content": "\u8bba\u4ed4\u7ec6\u8bfb\u9898\u7684\u91cd\u8981\u6027\uff0c\u5343\u4e07\u4e0d\u8981\u4e00\u9e21\u51bb\u201c\u5440\u8fd9\u9898\u88f8\u5308\u7259\u5229\u201d\u5c31\u7801\u7801\u7801\u7801\u73a9\u4e86\uff0c\u7ed3\u679c\u5c3d\u7ba1\u80fd\u8fc7\u6837\u4f8b\u5374\u53ea\u670920\u5206\u2026\u2026\n\n\u8fd9\u9898\u552f\u4e00\u548c\u6a21\u677f\u4e0d\u4e00\u6837\u7684\u5c31\u662f\u4f60\u627e\u4e0d\u5230\u5339\u914d\u4e86\u5c31\u8981\u7acb\u523b\u9000\u51fa\u4e86\u2026\u2026\u5c31\u8fd9\u4e48\u4e00\u70b9\u5c0f\u5751\u2026\u2026\n\n\u5269\u4e0b\u6765\u5c31\u662f\u6a21\u677f\u5566\uff0c\u6240\u4ee5\u8fd9\u9898\u63d0\u9ad8+\u6709\u70b9\u8fc7\u4e86\u5427\u2026\u2026\n\n```cpp\n#include<cstdio>\n#include<cstring>\nconst int N=1005;\nbool to[N][N],vis[N];\nint l[N],n,m,ans,sum[N]; \nbool Find(int x) //\u88f8\u7684\u5308\u7259\u5229\u6a21\u7248\n{\n    for(int j=1;j<=n;j++)\n        if(to[x][j]&&!vis[j])\n        {\n            vis[j]=true;\n            if(l[j]==0||Find(l[j]))\n            {\n                l[j]=x; sum[x]=j;\n                return true;\n            }\n        }\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1,x,y;i<=m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        to[i][x+1]=to[i][y+1]=true; //\u5c06\u4e0b\u6807\u7edf\u4e00\u4ece1\u5f00\u59cb\u65b9\u4fbf\u5904\u7406\n    }\n    for(int i=1;i<=m;i++)\n    {\n        memset(vis,false,sizeof(vis));\n        if(Find(i))ans++;\n        else break; //\u5c0f\u5751\uff1a\u627e\u4e0d\u5230\u5c31\u7acb\u5373\u9000\u51fa\n    }\n    printf(\"%d\\n\",ans);\n    for(int i=1;i<=ans;i++) printf(\"%d\\n\",sum[i]-1); //\u8fd9\u91cc\u6700\u540e\u7b54\u6848-1\uff0c\u56e0\u4e3a\u4e4b\u524d\u52a0\u4e86\u4e2a1\n}\n```",
        "postTime": 1504975504,
        "uid": 9757,
        "name": "x_faraway_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "### ~~\u5f88\u6709\u5e74\u4ee3\u611f\u7684\u9898\u9762~~\n\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u95ee\u9898\u3002\n\n**\u6700\u5927\u5339\u914d**\uff1a\u8003\u8651\u5982\u4f55\u5728\u4e8c\u5206\u56fe\u4e2d\u9009\u51fa\u6700\u591a\u7684\u8fb9\uff0c\u4f7f\u5f97\u6ca1\u6709\u4e00\u4e2a\u70b9\u540c\u65f6\u5c5e\u4e8e\u4e24\u6761\u4e0d\u540c\u7684\u8fb9\uff0c\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a\u4e8c\u5206\u56fe \u7684\u6700\u5927\u5339\u914d\u95ee\u9898\u3002\n\n\u5728\u5bfb\u627e\u6700\u5927\u5339\u914d\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e8c\u5206\u56fe\u7684\u67d0\u4e00\u4e2a\u96c6\u5408\uff0c\u5e76\u5c3d\u53ef\u80fd\u5e0c\u671b\u96c6\u5408\u5185\u7684\u8282\u70b9\u90fd\u80fd\u5b9e\u73b0\u5339\u914d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u4e3a\u96c6\u5408A\u4e2d\u7684\u8282\u70b9\u5bfb\u627e\u5339\u914d\u5bf9\u8c61\u3002\n\n\u800c\u89e3\u51b3\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u8981\u7528\u5230\u7684\u7b97\u6cd5\uff0c\u53eb\u505a\u5308\u7259\u5229\u7b97\u6cd5\u3002\n\n\u5bf9\u4e8e\u96c6\u5408A\u4e2d\u7684\u8282\u70b9x \uff1a\n\n\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9\u8fde\u63a5\u672a\u5339\u914d\u8282\u70b9y \uff0c\u5219\u76f4\u63a5\u628ax, y\u4e4b\u95f4\u7684\u8fb9\u8bbe\u7f6e\u4e3a\u5339\u914d\u8fb9\u3002\n\n\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9\u8fde\u63a5\u5df2\u5339\u914d\u8282\u70b9y \uff08\u5339\u914d\u70b9z \uff09\uff0c\u4f46z\u6709\u8fb9\u8fde\u63a5\u5176\u4ed6\u672a\u5339\u914d\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u6362\u5339\u914d\u8fb9\uff0c\u4f7f\u5f97x\u627e\u5230\u5339\u914d\uff0c\u4e14\u603b\u5339\u914d\u8fb9\u6570\u589e\u52a0\u3002\n\n**\u800c\u4e0a\u9762\u8fd9\u79cd\u66f4\u6362\u5339\u914d\u8fb9\u65b9\u5f0f\uff0c\u53ef\u4ee5\u53cd\u590d\u62d3\u5c55**\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4ka0txb8.png)\n\n2,3/\n4,5/\n6,7/\n8,9\u53ef\u4ee5\u66f4\u65b0\u6210\n1,2/\n3,4/\n5,6/\n7,8/\n9,10\u3002\n\n\u5982\u679c\u80fd\u627e\u5230\u4ece\u96c6\u5408A\u7684\u70b9x\u51fa\u53d1\u7684\u4e00\u6761\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u4e14\u4ea4\u66ff\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u548c\u5339\u914d\u8fb9\u7684\u8def\u5f84\u6700\u7ec8\u5230 \u8fbe\u96c6\u5408B\u7684y\u70b9\u3002\u90a3\u6211\u4eec\u5c31\u5bf9\u8def\u5f84\u4e0a\u8fb9\u7684\u72b6\u6001\u8fdb\u884c\u4e00\u4e2a**\u53cd\u8f6c**\u3002\n\u8fd9\u6837\u6211\u4eec\u7684\u5339\u914d\u8fb9\u6570\u4f1a++\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\u7684\u76ee\u7684\u3002\n\u800c\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u6211\u4eec\u79f0\u5176**\u589e\u5e7f\u8def\u5f84**\u3002\n\n\u800c\u8fd9\u6b63\u662f**\u5308\u7259\u5229\u7b97\u6cd5**\u7684\u6838\u5fc3\u5185\u5bb9\uff1a\n\n1.\u4f9d\u6b21\u4ece\u96c6\u5408A\u4e2d\u7684\u8282\u70b9\u51fa\u53d1\u5bfb\u627e\u589e\u5e7f\u8def\u5f84,\u5982\u679c\u80fd\u627e\u5230\u5219\u5bf9\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u5339\u914d\u60c5\u51b5\u53d6\u53cd\u3002\n\n2.\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u7b49\u4e8e\u80fd\u627e\u5230\u589e\u5e7f\u8def\u5f84\u7684\u8282\u70b9\u6570\u76ee\u3002\n\n\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\u2022\u4f9d\u6b21\u4ece\u96c6\u5408A\u4e2d\u7684\u8282\u70b9\u51fa\u53d1\u8fdb\u884cDFS ,\u7528match\u6570\u7ec4\u8bb0\u5f55\u96c6\u5408B\u4e2d\u7684\u8282\u70b9\u7684\u5339\u914d\u5bf9\u8c61\u3002\n\n\u2022\u5982\u679c\u5f53\u524d\u8282\u70b9u\u80fd\u627e\u5230\u672a\u5339\u914d\u8282\u70b9v\uff0c\u5219match[v] = u\n\n\u2022\u5982\u679c\u5f53\u524d\u8282\u70b9u\u80fd\u627e\u5230\u4e00\u4e2a\u5df2\u5339\u914d\u4f46\u5728\u672c\u6b21DFS\u4e2d\u672a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9v ,\u5c1d\u8bd5\u4ecematch[v]\u51fa \u53d1\u7ee7\u7eed\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u5982\u679c\u80fd\u5230\u589e\u5e7f\u8def\u5f84\uff0c\u5219match[v] = u\n```cpp\nbool dfs(int qq,int k){\n\tc[qq]=k;\n\tif(k==1)\n\ta++;\n\telse\n\tb++;\n\tfor(int i=0;i<g[qq].size();i++)\n\t{\n\t\tif(!c[g[qq][i]])\n\t\t{\n\t\t\tif(!dfs(g[qq][i],3-k))\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c[g[qq][i]]==k)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n```\n\u4f46\u672c\u9898**\u5e76\u4e0d\u662f\u4e00\u4e2a\u7eaf\u7684\u5308\u7259\u5229** \n~~\u4e0d\u7136\u5c31\u548c\u6a21\u677f\u91cd\u4e86~~\n\n\u672c\u9898\u5f53\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u5f84\u65f6\u5c31\u8981**\u53ca\u65f6\u9000\u51fa**\n```\n\u6211\u4eec\u53c8\u5047\u8bbe\u4e00\u9053\u9898\u4f7f\u7528\u4e86\u5b83\u5141\u8bb8\u7684\u9526\u56ca\u5999\u8ba1\u540e\uff0c\u5c31\u4e00\u5b9a\u80fd\u6b63\u786e\u56de\u7b54\uff0c\u987a\u5229\u8fdb\u5165\u4e0b\u4e00\u9898\u3002\n```\n\u6240\u4ee5\u641e\u6e05\u695a\u8fd9\u4e9b\uff01\u5c31\u80fdAC\u8fa3\uff01\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1000005;\nint n,m,root,x,y,ans,tot,c[N],a,u,b,v,flag=0,e,match[N],anss[N];\nbool vis[N];\nvector<int> g[N];\nbool dfs(int u){\n\tfor(int i=0;i<g[u].size();i++)\n\t{\n\t\tif(!vis[g[u][i]])\n\t\t{\n\t\t\tint v=g[u][i];\n\t\t\tvis[v]=1;\n\t\t\tif(match[v]==-1||dfs(match[v])==1)\n\t\t\t{\n\t\t\t\tmatch[v]=u;\n\t\t\t\tanss[u]=v;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tmemset(match,-1,sizeof(match));\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tg[i].push_back(x);\n\t\tg[i].push_back(y);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tif(dfs(i))\n\t\tans++;\n\t\telse\n\t\tbreak;//\u5c31\u662f\u8fd9\u91cc\u548c\u666e\u901a\u6700\u5927\u5339\u914d\u4e0d\u540c\n\t}\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++)\n\t{\n\t\tcout<<anss[i]<<endl;\n\t}\n}\n```\n\u597d\u5566\uff01\u5e0c\u671b\u5927\u5bb6\u53ef\u4ee5\u719f\u7ec3\u8fd0\u7528\u5308\u7259\u5229\uff0cAC\u66f4\u591a\u6700\u5927\u5339\u914d\u7684\u9898_(:3\u2312\uff9e)_",
        "postTime": 1591704154,
        "uid": 308575,
        "name": "\u8239\u533b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5308\u7259\u5229\u7b97\u6cd5\u3002\n\n\u4f46\u8fd9\u9898\u6700\u5927\u7684\u5751\u70b9\u5728\u4e8e\u53ea\u8981\u6709\u4e00\u4e2a\u9898\u7b54\u4e0d\u4e0a\u6765\u5c31\u6dd8\u6c70\u4e86\uff0c\u90a3\u4e48\u5bf9\u5e94\u5230\u7b97\u6cd5\u4e2d\u5c31\u662f\u53ea\u8981\u4e00\u4e2a\u70b9\u5339\u914d\u4e0d\u4e0a\u5c31\u4e0d\u518d\u7ee7\u7eed\u5339\u914d\u540e\u9762\u7684\u4e86\u3002\n\n\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\nint n1,n2;\n//\u5206\u522b\u5bf9\u5e94\u9526\u56ca\u6570\u548c\u9898\u76ee\u6570 \nbitset<1002>map[1002];\nbitset<1002>vis;\n//\u7528bitset\u4f18\u5316\u7a7a\u95f4\nint p[1002];\nint solution[1002];\n//p\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u9526\u56ca\u5bf9\u5e94\u7684\u9898\u76ee\n//solution\u5b58\u50a8\u6bcf\u4e2a\u9898\u76ee\u4f7f\u7528\u7684\u9526\u56ca\n//\uff08\u4e92\u9006\u7684\uff09\nbool match(int u)\n{\n\tfor(int v=1;v<=n1;v++)\n\t{\n\t\tif(map[u][v]&&!vis[v])\n\t\t{\n\t\t\tvis[v]=1;\n\t\t\tif(!p[v]||match(p[v]))\n\t\t\t{\n\t\t\t\tp[v]=u;\n\t\t\t\tsolution[u]=v;\n\t\t\t\t//\u6ce8\u610f\u8fd9\u91cc\uff0c\u8981\u5b58\u50a8\u6bcf\u4e2a\u9898\u4f7f\u7528\u7684\u9526\u56ca\uff0c\u4ee5\u4fbf\u8f93\u51fa\n\t\t\t\treturn true;\n\t\t\t\t//\u5339\u914d\u6210\u529f\uff0creturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\t//\u5339\u914d\u5931\u8d25\n}\nvoid Hungarian()\n{\n\tint ans=0;\n\tfor(int i=1;i<=n2;i++)\n\t{\n\t\tvis.reset();\n\t\t//bitset\u7684\u6e05\u96f6\u64cd\u4f5c\n\t\t//\u6362\u6210bool\u6570\u7ec4\u5c31\u662fmemset(vis,0,sizeof vis)\n\t\t//\u4e00\u5b9a\u8981\u6e05\u96f6\uff0c\u8fd9\u4e2a\u4e0d\u80fd\u5fd8\u8bb0\n\t\tif(match(i))ans++;\n\t\telse break;\n\t\t//\u53ea\u8981\u8fd9\u4e2a\u9898\u7b54\u4e0d\u4e0a\u6765\uff0c\u5c31\u88abpass\u4e86\n\t}\n\tprintf(\"%d\\n\",ans);\n\t//\u8f93\u51fa\u7b54\u5bf9\u7684\u4e2a\u6570\n\tfor(int i=1;i<=ans;i++)\n\t{\n\t\tprintf(\"%d\\n\",solution[i]-1);\n\t}\n\t//\u4f9d\u6b21\u8f93\u51fa\u6bcf\u4e2a\u7b54\u5bf9\u7684\u9898\u76ee\u7684\u4f7f\u7528\u7684\u9526\u56ca\n\t//\u56e0\u4e3a\u5728\u5b58\u7684\u65f6\u5019\u4e0b\u6807\u52a0\u4e0a\u4e861\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u65f6\u5019\u51cf\u53bb1\n}\nint main()\n{\n\tscanf(\"%d%d\",&n1,&n2);\n\tfor(int i=1,a,b;i<=n2;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tmap[i][a+1]=1;\n\t\tmap[i][b+1]=1;\n\t\t//\u9898\u76ee\u4e2d\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u4f46\u6211\u4e60\u60ef\u662f1\n\t\t//\u4ece1\u5f00\u59cb\u53ef\u80fd\u66f4\u65b9\u4fbf\n\t}\n\tHungarian();\n\t//\u6267\u884c\u5308\u7259\u5229\u7b97\u6cd5\n\treturn 0;\n}\n```\n\u5e0c\u671b\u591a\u591a\u652f\u6301\uff0c\u4e0d\u7406\u89e3\u8fd8\u53ef\u4ee5\u79c1\u4fe1\u6211\u6216at\u6211",
        "postTime": 1585360598,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u52a0qwq](https://www.cnblogs.com/enceladus-return0/)\n\n\u9898\u89e3\u91cc\u6ca1\u6709\u94fe\u5f0f\u524d\u5411\u661f\u5462\uff0c\u6211\u6765\u6c34\u4e00\u7bc7,\u5148\u819c\u4e00\u819c\u7528\u7f51\u7edc\u6d41\u505a\u7684\u5927\u4f6c\u3002\u592a\u5de8\u8fa3\u3002\n\n\n------------\n\n\n\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u8981\u6ce8\u610f\u7684\u5730\u65b9\u3002\n\n\u505a\u8fd9\u9053\u9898\u7684\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u4e86\u5308\u7259\u5229\u7b97\u6cd5\u4e86\u5427\uff0c\u4e0d\u8fc7\u4e0d\u4f1a\u4e5f\u6ca1\u6709\u5173\u7cfb\u5566\u3002\u6211\u4eec\u770b\u7740\u4ee3\u7801\u89e3\u91ca\n\n\n\n------------\n\n- \u9996\u5148\uff0c\u5934\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e00\u5806\u4e1c\u897f\uff0c\u8fd8\u6709\u5efa\u8fb9\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint m;\nint n,T;\nint x,y;\nstruct node{\n\tint u,v;\n}qwq[105050];\nint head[105050],tot=0;\nbool vis[105050];\nint to[105050];\nint ans=0;\nint ans_end[105050];\n\ninline void add(int x,int y){\n\tqwq[++tot].u=head[x];\n\tqwq[tot].v=y;\n\thead[x]=tot;\n}\n\n```\n\n\n------------\n\n- \u7b2c\u4e8c\u5c31\u662f\u5199\u5308\u7259\u5229\u5566\u3002\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u548c\u8981\u5230\u7684\u70b9\u3002\u5982\u679c\u6ca1\u6709\u6807\u8bb0\u8fc7\uff0c\u5c31\u6807\u8bb0\u4e0a\u5f00\u59cb\u8dd1\u3002\n\n#### \u4e24\u79cd\u60c5\u51b5\n\n>1.\u5b83\u6ca1\u914d\u5bf9\n\n>2.\u5b83\u914d\u5bf9\u7684\u70b9\u53ef\u4ee5\u548c\u522b\u7684\u7684\u70b9\u914d\u5bf9\n\n\u8fd9\u4e24\u79cd\u60c5\u51b5\u6210\u7acb\uff0c\u6211\u4eec\u5c31\u914d\u5bf9\u4e0a\uff0c\u8fd4\u56de\u4e00\u3002\n\n\n```cpp\ninline bool find(int x){\n\tfor(int i=head[x];i;i=qwq[i].u){\n\t\tint v=qwq[i].v;\n\t\tif(vis[v]==0){\n\t\t\tvis[v]=1;\n\t\t\tif(!to[v]||find(to[v])==1){//\u5224\u65ad\n\t\t\t\tto[v]=x;\n\t\t\t\tans_end[x]=v;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n    return 0;\n}\n\n```\n\n\n\n------------\n3.\u6700\u540e\u5c31\u662f\u4e3b\u51fd\u6570\u5566\n\n\u5148\u662f\u5b89\u7167\u9898\u76ee\u534e\u4e3d\u4e3d\u7684\u5efa\u8fb9\u3002\u5728\u76f4\u63a5\u8dd1m\u904d\u5308\u7259\u5229\u5c31\u884c\u4e86\n\n\u8fd9\u91cc\u6709\u4e24\u4e2a\u5751\u70b9\u3002\n\n>1.\u8981\u521d\u59cb\u5316\n\n>2.\u9898\u76ee\u8bf4\u660e\u201c\u53ea\u6709\u5f53\u9009\u624b\u6b63\u786e\u56de\u7b54\u4e00\u9053\u9898\u540e\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\uff0c\u5426\u5219\u5c31\u88ab\u6dd8\u6c70\u201d\u6240\u4ee5else\u65f6\u5c31\u76f4\u63a5break\u5c31\u884cQAQ\n\n```cpp\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tadd(i,x);\n\t\tadd(i,y);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tmemset(vis,0,sizeof(vis));//\u521d\u59cb\u5316QAQ\u8d85\u91cd\u8981\n\t\tif(find(i)==1){\n\t\t\tans++;\n\t\t}\n\t\telse{\n\t\t\tbreak;//\u53ea\u6709\u5f53\u9009\u624b\u6b63\u786e\u56de\u7b54\u4e00\u9053\u9898\u540e\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\uff0c\u5426\u5219\u5c31\u88ab\u6dd8\u6c70\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++){\n\t\tcout<<ans_end[i]<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n\n------------\n\u5b8c\u6574code\n\n\u8bf7\u52ff\u6284\u88ad\uff0c\u521b\u9020\u826f\u597d\u6d1b\u8c37\u73af\u5883\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint m;\nint n,T;\nint x,y;\nstruct node{\n\tint u,v;\n}qwq[105050];\nint head[105050],tot=0;\nbool vis[105050];\nint to[105050];\nint ans=0;\nint ans_end[105050];\n\ninline void add(int x,int y){\n\tqwq[++tot].u=head[x];\n\tqwq[tot].v=y;\n\thead[x]=tot;\n}\n\ninline bool find(int x){\n\tfor(int i=head[x];i;i=qwq[i].u){\n\t\tint v=qwq[i].v;\n\t\tif(vis[v]==0){\n\t\t\tvis[v]=1;\n\t\t\tif(!to[v]||find(to[v])==1){\n\t\t\t\tto[v]=x;\n\t\t\t\tans_end[x]=v;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n    return 0;\n}\n\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tadd(i,x);\n\t\tadd(i,y);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tmemset(vis,0,sizeof(vis));//\u521d\u59cb\u5316QAQ\u8d85\u91cd\u8981\n\t\tif(find(i)==1){\n\t\t\tans++;\n\t\t}\n\t\telse{\n\t\t\tbreak;//\u53ea\u6709\u5f53\u9009\u624b\u6b63\u786e\u56de\u7b54\u4e00\u9053\u9898\u540e\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\uff0c\u5426\u5219\u5c31\u88ab\u6dd8\u6c70\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++){\n\t\tcout<<ans_end[i]<<endl;\n\t}\n\treturn 0;\n}\n```\n\nBy enceladus",
        "postTime": 1539861475,
        "uid": 88127,
        "name": "enceladus",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "[\u7ed9blog\u6253\u4e2a\u5e7f\u544a](http://labelray.top/2018/08/01/luogu-p2319-hnoi2006-chao-ji-ying-xiong/)\n\n\u7f51\u7edc\u6d41\uff0c\u5e76\u4e0d\u9700\u8981\u4e8c\u5206\uff0c\u53ef\u4ee5\u6bcf\u6b21\u8f93\u5165\u7b2c $m$ \u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u7684\u201c\u9526\u56ca\u5999\u8ba1\u201d\u7684\u7f16\u53f7\u4e4b\u540e\u52a0\u8fb9\uff0c\u5728\u6b8b\u4f59\u7f51\u7edc\u91cc\u8dd1dinic\uff0c\u5f53\u5f53\u524d\u6700\u5927\u6d41\u5c0f\u4e8e$m$\u7684\u65f6\u5019\u5c31\u4e0d\u5f97\u4e0d\u51fa\u5c40\u4e86\uff0c\u6b64\u65f6\u8f93\u51fa\u7b54\u6848\u5373\u53ef\n\n```\n#include <iostream>\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\nstruct Edge;\nstruct Node{\n    int d;\n    Edge *head;\n}node[2010];\nstruct Edge{\n    Node *to;\n    Edge *ne, *bac;\n    int val;\n    Edge(int x, int y, int z):to(&node[y]), ne(node[x].head), val(z){}\n};\nint n, m, S, T;\n\nvoid add(int x, int y, int z){\n    node[x].head=new Edge(x, y, z);\n    node[y].head=new Edge(y, x, 0);\n    node[x].head->bac=node[y].head;\n    node[y].head->bac=node[x].head;\n}\n\nbool bfs(){\n    queue<Node *>q;\n    for(int i=S; i<=T; i++)\tnode[i].d=-1;\n    node[S].d=1;\n    q.push(&node[S]);\n    while(!q.empty()){\n        Node *x=q.front();\n        q.pop();\n        for(Edge *i=x->head; i; i=i->ne){\n            if(!i->val || i->to->d!=-1)\tcontinue;\n            i->to->d=x->d+1;\n            q.push(i->to);\n            if(i->to==&node[T])\treturn true;\n        }\n    }\n    return false;\n}\n\nint dfs(Node *x, int flow){\n    if(x==&node[T] || flow==0)\treturn flow;\n    int rest=flow, k;\n    for(Edge *i=x->head; i && rest; i=i->ne){\n        if(i->to->d!=x->d+1 || !i->val)\tcontinue;\n        k=dfs(i->to, min(i->val, rest));\n        i->val-=k;\n        rest-=k;\n        i->bac->val+=k;\n        if(!k)\ti->to->d=-1;\n    }\t\n    return flow-rest;\n}\n\nvoid print(int _){\n    cout<<_<<endl;\n    for(int k=1; k<=m; k++)\n        for(Edge *j=node[k].head; j; j=j->ne)\n            if(j->to!=&node[S] && j->val==0)\n                cout<<j->to-&node[m+1]<<endl;\n}\n\nint main(){\n    int maxflow=0, flow=0, x, y;\n    scanf(\"%d%d\", &n, &m);\n    S=0, T=m+n+1;\n    for(int i=1; i<=n; i++)\n        add(i+m, T, 1);\n    for(int i=1; i<=m; i++){\n        add(S, i, 1);\n        scanf(\"%d%d\", &x, &y);\n        add(i, x+m+1, 1);\n        if(x!=y)\tadd(i, y+m+1, 1);\n        while(bfs())\n            while(flow=dfs(&node[S], 0x3f3f3f3f))\n                maxflow+=flow;\n        if(maxflow<i){\n            print(maxflow);\n            return 0;\n        }\n    }\n    print(maxflow);\n    return 0;\n}\n```",
        "postTime": 1533092796,
        "uid": 52211,
        "name": "Labelray",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0b\u6709\u5927\u4f6c\u8bf4\u4e86\u7f51\u7edc\u6d41\u505a\u6cd5\uff0c\u6765\u7ed9\u5927\u4f6c\u914d\u4e2a\u4ee3\u7801\n\n~~\u6211\u4eec~~\u53ea\u6709\u6211\u53ef\u80fd\u90fd\u89c9\u5f97\u5982\u679c\u4e0d\u52a8\u6001\u52a0\u8fb9\u7684\u8bdd$dinic$\u53ef\u80fd\u8dd1\u4e0d\u4e86\u8fd9\u79cd\u9700\u8981\u4e2d\u9014\u9000\u51fa\u7684\u4e8c\u5206\u56fe\u5339\u914d\n\n\u6b63\u5f53\u6211\u51c6\u5907\u53bb\u6572\u5308\u7259\u5229\u7684\u65f6\u5019\u7a81\u7136\u60f3\u5230\u8fd9\u4e2a\u9898\u53ef\u4ee5\u4e8c\u5206\u554a\n\n\u4e8e\u662f\u4e8c\u5206\u597d\u4e86\n\n\u5982\u679c\u7b54\u6848\u662f$ans$\u7684\u8bdd\uff0c$ans-1$\u80af\u5b9a\u4e5f\u6ee1\u8db3\u6761\u4ef6\uff0c\u6240\u4ee5\u5b58\u5728\u5355\u8c03\u6027\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\n\n\u81f3\u4e8e$check$\u600e\u4e48\u5199\uff0c\u6211\u4eec\u53ea\u5bf9$1$\u5230\u5f53\u524d\u8981$check$\u7b54\u6848\u8dd1\u4e00\u8fb9$dinic$\u5c31\u597d\u4e86\uff0c\u5982\u679c\u6700\u5927\u7684\u5339\u914d\u6570\u7b49\u4e8e\u5f53\u524d\u7b54\u6848\u7684\u8bdd\u90a3\u4e48\u8fd9\u4e2a\u7b54\u6848\u5c31\u662f\u5408\u6cd5\u7684\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a$O(V\\sqrt{n+m}\\text{ }logm)$\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define re register\n#define maxn 5005\n#define INF 9999999\nusing namespace std;\nstruct node\n{\n\tint v,nxt,w,f;\n}e[100005];\nint n,num,m,S,T;\nint d[maxn],vis[maxn],head[maxn];\nint a[maxn],b[maxn];\nint ans=0;\nint tot[maxn];\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')\n\t  x=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\ninline void add_edge(int x,int y,int z)\n{\n\te[num].v=y;\n\te[num].nxt=head[x];\n\te[num].w=z;\n\thead[x]=num++;\n}\ninline int bfs()\n{\n\tqueue<int> q;\n\tmemset(vis,0,sizeof(vis));\n\tvis[S]=1;\n\td[S]=0;\n\tq.push(S);\n\twhile(!q.empty())\n\t{\n\t\tint k=q.front();\n\t\tq.pop();\n\t\tfor(re int i=head[k];i!=-1;i=e[i].nxt)\n\t\tif(!vis[e[i].v])\n\t\t{\n\t\t\tif(e[i].w<=e[i].f) continue;\n\t\t\tvis[e[i].v]=1;\n\t\t\td[e[i].v]=d[k]+1;\n\t\t\tq.push(e[i].v);\n\t\t}\n\t}\n\treturn vis[T];\n}\nint dfs(int x,int now)\n{\n\tif(x==T||!now) return now;\n\tint flow=0,ff;\n\tfor(re int i=head[x];i!=-1;i=e[i].nxt)\n\tif(d[e[i].v]==d[x]+1)\n\t{\n\t\tff=dfs(e[i].v,min(now,e[i].w-e[i].f));\n\t\tif(ff<=0) continue;\n\t\tnow-=ff;\n\t\tflow+=ff;\n\t\te[i].f+=ff;\n\t\te[i^1].f-=ff;\n\t\tif(!now) break;\n\t}\n\treturn flow;\n}\ninline void did(int x)\n{\n\tfor(re int i=1;i<=x;i++)\n\t{\n\t\tfor(re int j=head[i];j!=-1;j=e[j].nxt)\n\t\tif(e[j].f==1&&e[j].v>m) \n\t\t{\n\t\t\ttot[i]=e[j].v;\n\t\t\tbreak;\n\t\t}\n\t}\n}\ninline int check(int x)\n{\n\tnum=0;\n\tmemset(head,-1,sizeof(head));\n\tmemset(e,0,sizeof(e));\n\tfor(re int i=m+1;i<=m+n;i++) add_edge(i,n+m+1,1),add_edge(n+m+1,i,0);\n\tfor(re int i=1;i<=x;i++)\n\t\tadd_edge(0,i,1),add_edge(i,0,0);\n\tfor(re int i=1;i<=x;i++)\n\t{\n\t\tadd_edge(i,a[i],1);\n\t\tadd_edge(a[i],i,0);\n\t\tif(a[i]==b[i]) continue;\n\t\tadd_edge(i,b[i],1);\n\t\tadd_edge(b[i],i,0);\n\t}\n\tint k=0;\n\twhile(bfs()) k+=dfs(0,INF);\n\treturn k==x;\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tint x,y;\n\tS=0,\n\tT=n+m+1;\n\tmemset(head,-1,sizeof(head));\n\tfor(re int i=1;i<=m;i++)\n\t\ta[i]=read()+1+m,b[i]=read()+1+m;\n\tint l=0,r=m;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)) \n\t\t\tans=mid,did(mid),l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tcout<<ans<<endl;\n\tfor(re int i=1;i<=ans;i++)\n\tprintf(\"%d\\n\",tot[i]-1-m);\n\treturn 0;\n}\n```",
        "postTime": 1532341051,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u521a\u5b66\u4e8c\u5206\u56fe\u6765\u7ec3\u7ec3\u624b\u3002\n\n\u505a\u6cd5\u76f8\u5bf9\u4e8e\u9898\u89e3\u533a\u5176\u4ed6\u7684\u5927\u4f6c\u6765\u8bf4\u8981\u590d\u6742\u4e00\u70b9\uff0c\u4f46\u662f\u4e2a\u4eba\u89c9\u5f97\u66f4\u597d\u7406\u89e3\u4e00\u70b9\u3002\n\n\u6574\u4f53\u601d\u8def\u5c31\u662f\u4e8c\u5206\u6700\u591a\u80fd\u8fde\u7eed\u7b54\u51e0\u9053\u9898\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u4e8c\u5206\u51fa\u6765\u90fd\u53bb\u8dd1\u4e00\u904d\u5308\u7259\u5229\uff0c\u6700\u540e\u8f93\u51fa\u6700\u5927\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u505a\u6cd5\u5373\u53ef\u3002\u8be6\u60c5\u8bf7\u770b\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint head[1000000];\nint nxt[1000000];\nint ver[1000000];\nint cnt;\nint all[1000000];\nint tot;\nint match[1000000];\nbool aim[1000000];\nvoid add(int x,int y)\n{\n    nxt[++cnt] = head[x];\n    head[x] = cnt;\n    ver[cnt] = y;\n}\nbool find(int now)//\u666e\u666e\u901a\u901a\u5308\u7259\u5229\u677f\u5b50\n{\n    for (int i = head[now]; i;i=nxt[i])\n    {\n        int v0 = ver[i];\n        if(aim[v0])\n            continue;\n        aim[v0] = 1;\n        if(match[v0]==0||find(match[v0]))\n        {\n            match[v0] = now;\n            return true;\n        }\n    }\n    return false;\n}\nbool work(int jud)\n{\n    memset(match, 0, sizeof match);\n    int res = 0;\n    for (int i = 1; i <= jud;i++)\n    {\n        memset(aim, 0, sizeof aim);\n        if(find(i))\n            res++;\n    }\n    if(res==jud)\n        return true;//\u5982\u679c\u6700\u5927\u5339\u914d\u6b63\u597d\u548c\u5f53\u524d\u4e8c\u5206\u7684\u9898\u76ee\u6570\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u4e8c\u5206\u7684\u65b9\u6848\u53ef\u884c\n    return false;//\u53cd\u4e4b\u5219\u4e0d\u53ef\u884c\n}\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m;i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        add(i, a + m + 1);//\u4e4b\u6240\u4ee5\u8981+m+1\u662f\u4e3a\u4e86\u907f\u5f00\u9898\u76ee\u7684\u7f16\u53f7\n        if(a!=b)\n            add(i, b + m + 1);//\u9898\u76ee\u4e2d\u8bf4\u660e\u53ef\u80fd\u4f1a\u6709a==b\u7684\u60c5\u51b5\uff0c\u52a0\u4e00\u4e2a\u5224\u65ad\u3002\u4ed4\u7ec6\u60f3\u4e86\u4e00\u60f3\uff0c\u597d\u50cf\u52a0\u4e0d\u52a0\u90fd\u884c\n    }\n    int l = 0;\n    int r = m;\n    int ans = 0;\n    while (l <= r)//\u4e8c\u5206\u51fa\u6765\u6700\u591a\u80fd\u8fde\u7eed\u7b54\u591a\u5c11\u9053\u9898\n    {\n        int mid = l + r >> 1;\n        if(work(mid))//\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4e8c\u5206\uff0c\u90fd\u8dd1\u4e00\u904d\u5308\u7259\u5229\n        {\n            ans = mid;//\u8bb0\u5f55\u7b54\u6848\n            l = mid + 1;\n        }\n        else\n            r = mid - 1;\n    }\n    printf(\"%d\\n\", ans);\n    for (int i = m+1; i <= m+n+1;i++)\n    {\n        if(match[i])\n            all[match[i]] = i;//\u5c06\u6700\u7ec8\u65b9\u6848\u5b58\u8fdb\u6570\u7ec4\n    }\n    for (int i = 1; i <= ans;i++)\n        printf(\"%d\\n\", all[i]-m-1);//\u522b\u5fd8\u4e86\u5c06\u4e4b\u524d\u52a0\u7684m+1\u51cf\u56de\u6765\n}\n```\n",
        "postTime": 1602555102,
        "uid": 278481,
        "name": "Link_Space",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u4e00\u9053\u6700\u5927\u5339\u914d\uff0c~~\u5e76\u4e0d\u662f\u5f88\u96be~~\n\n\u7b97\u6cd5\u601d\u8def\uff08\u5308\u7259\u5229\u7b97\u6cd5\uff09\uff1a\u628a\u95ee\u9898\u770b\u4f5c\u96c6\u5408A\uff0c\u4f9d\u6b21\u4ece\u96c6\u5408A\u4e2d\u51fa\u53d1\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u5982\u679c\u80fd\u627e\u5230\u5219\u5bf9\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u5339\u914d\u60c5\u51b5\u53d6\u53cd\uff08\u5982\u56fe\uff09\n\n![1](https://cdn.luogu.com.cn/upload/image_hosting/q56oj946.png)\n\n\u6b65\u9aa4\uff1a\n\n1  \u4f9d\u6b21\u4ece\u96c6\u5408A\uff08\u95ee\u9898\uff09dfs\uff0c\u7528match\u6570\u7ec4\u5b58\u96c6\u5408B\uff08\u9526\u56ca\u5999\u8ba1\uff09\u4e2d\u8282\u70b9\u7684**\u5339\u914d\u5bf9\u8c61**\u3002\n\n2  \u5982\u679c\u5f53\u524d\u8282\u70b9u\u80fd\u627e\u5230**\u672a\u5339\u914d\u8282\u70b9v**\uff0c\u5219match[v]=u\n\n3  \u5982\u679c\u5f53\u524d\u8282\u70b9u\u80fd\u627e\u5230\u5df2\u5339\u914d\u4f46\u5728\u672c\u6b21dfs\u4e2d\u672a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9v\uff0c\u5219\u5bf9match[v]\u8fdb\u884cdfs\uff0c\u5982\u679c\u80fd\u627e\u5230\u589e\u5e7f\u8def\u5f84\uff0c\u5219match[v]=u\n\n\n\n _**Code**_ \n \n \n ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100000;\n\nstruct Edge      \n{\n\tint next;\n\tint to;\n};\nEdge edge[N];      //\u94fe\u5f0f\u524d\u5411\u661f\n\nint n,m,ne,ans;\nint vis[N],match[N],head[N],p[N];   //vis\u8bb0\u5f55\u5f53\u524ddfs\u4e2d\u8282\u70b9\u662f\u5426\u8bbf\u95ee\n                                    //p\u6570\u7ec4\u8bb0\u5f55\u95ee\u9898\u6240\u5bf9\u7684\u9526\u56ca\u5999\u8ba1\uff0c\u7528\u6765\u8f93\u51fa\n\nvoid add(int from,int to)\n{\n\tne++;\n\tedge[ne].next=head[from];\n\tedge[ne].to=to;\n\thead[from]=ne;\n}\n\nbool dfs(int u)\n{\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint to=edge[i].to;\n\t\tif(!vis[to])\n\t\t{\n\t\t\tvis[to]=1;\n\t\t\tif(!match[to]||dfs(match[to]))\n\t\t\t{\n\t\t\t\tmatch[to]=u;\n\t\t\t\tp[u]=to;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tcin>>u>>v;        \n\t\tadd(i,u);\n\t\tadd(i,v);        //\u5efa\u8fb9\uff0c\u6ce8\u610f\u662f\u7b2ci\u4e2a\u9898\u6709\u7f16\u53f7u\uff0cv\u4e24\u4e2a\u9526\u56ca\u5999\u8ba1\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tmemset(vis,0,sizeof(vis));    //\u6bcf\u6b21dfs\u90fd\u8981\u6e05\u7a7a\n\t\tif(dfs(i)) ans++;             //\u8bb0\u5f55\u53ef\u884c\u7684\u95ee\u9898\n\t\telse break;                  //\u9898\u610f\uff1a\u53ea\u6709\u7b54\u5bf9\u8fd9\u9053\u9898\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9053\uff0c\u4e0d\u884c\u5219break\n\t}\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++)                \n\t{\n\t\tcout<<p[i]<<endl;          \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1591190623,
        "uid": 308587,
        "name": "AKakA",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u8fd9\u9898\u96be\u5ea6\u4e0d\u5927\uff0c\u4f46\u662f\u5751\u70b9\u6781\u591a\uff0c\u5bfc\u81f4\u6211\u8db3\u8db3\u505a\u4e86\u534a\u4e2a\u591a\u5c0f\u65f6\u624dA\u6389\uff0c\u770b\u5230\u9898\u89e3\u533a\u597d\u50cf\u6ca1\u6709\u548c\u6211\u7684\u601d\u8def\u4e00\u6837\u7528\u7ed3\u6784\u4f53\u6392\u5e8f\u5904\u7406\u4e8c\u5206\u56fe\u7684\uff0c\u6240\u4ee5\u53d1\u7bc7\u9898\u89e3\u5206\u4eab\u4e00\u4e0b\u3002\n\n \u5206\u6790\u9898\u76ee\n-\n\u9996\u5148\u8bfb\u9898\uff0c\u6211\u4eec\u77e5\u9053\u603b\u5171\u6709**m\u9053\u9898\uff0c\u9009\u624b\u6709n\u79cd\u4e0d\u540c\u7684\u201c\u9526\u56ca\u5999\u8ba1\u201d**\uff0c\u6bcf\u9053\u9898\u90fd\u53ef\u4ee5\u4ece**\u4e24\u79cd\u201c\u9526\u56ca\u5999\u8ba1\u201d\u4e2d\u9009\u62e9\u4e00\u79cd**\uff0c\u800c\u6bcf\u79cd\u201c\u9526\u56ca\u5999\u8ba1\u201d\u53ea\u80fd\u7528**\u4e00\u6b21**\uff0c\u6c42**\u6700\u591a\u7b54\u51fa\u51e0\u9053\u9898**\u3002\u5f88\u81ea\u7136\u7684\uff0c\u6211\u4eec\u60f3\u5230\u4e86**\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d**\u3002\u7531\u4e8e\u5308\u7259\u5229\u7b97\u6cd5\u8981\u8fdc\u6bd4Dinic\u7b97\u6cd5\u597d\u6253\uff0c\u6240\u4ee5\u6211\u5c31\u9009\u7528\u4e86**\u5308\u7259\u5229\u7b97\u6cd5**\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\nPS:\u73b0\u5728\u4e0d\u8ba9\u6709\u4eff\u6284\u88ad\uff0c\u6211\u5c31\u4e0d\u5f04\u4e86\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u81ea\u89c9\u54e6\n\n\u4ee3\u7801\u5b9e\u73b0\n-\n\u6211\u4eec\u6d4f\u89c8\u6837\u4f8b\n```cpp\n5 6\n3 2\n2 0\n0 3\n0 4\n3 2\n3 2\n```\n\u7adf\u7136\u53d1\u73b0\u4e860\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u6b63\u5e38\u60c5\u51b5\u4e0b\u90fd\u662f1-m\u5339\u914d1-n\uff0c\u53ef\u8fd9~~\u6bd2\u7624\u51fa\u9898\u4eba~~\u5374\u8ba91-m\u5339\u914d0--n-1\u3002\u6240\u4ee5\uff0c\u5f88\u81ea\u7136\u7684\u6211\u5c31\u60f3\u5230\u5c06**0--n-1\uff0c\u8f6c\u5316\u4e3a1--n**\u3002**\u5efa\u56fe\u4ee3\u7801\u5982\u4e0b**\uff1a\n\n```cpp\ninline void adds(int u,int v)\n{\n\te[++cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n\treturn ;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u53c8\u5feb\u53c8\u597d\uff01\n\nfor(fint i=1;i<=m;i++)\n\tx=read(),y=read(),adds(i,y+1),adds(i,x+1);\u9053\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u5999\u8ba1\u90fd+1\n```\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6309\u7167**\u6807\u51c6\u7684\u5308\u7259\u5229\u7b97\u6cd5**\u8dd1\u4e00\u904d\uff0c\u8fd9\u65f6\u5019\u518d**\u4ed4\u7ec6\u6d4f\u89c8**\u9898\u76ee\uff1a\n```cpp\n\u53ea\u6709\u5f53\u9009\u624b\u6b63\u786e\u56de\u7b54\u4e00\u9053\u9898\u540e\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\uff0c\u5426\u5219\u5c31\u88ab\u6dd8\u6c70\u3002\n```\n\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u4e5f\u5c31\u662f\u4e3b\u4eba\u516c\u6ca1\u6709~~\u590d\u6d3b\u5e01~~\uff0c\u4e0d\u80fd\u51fa\u73b01\u5339\u914d\u4e86\uff0c2\u672a\u5339\u914d\uff0c3\u53c8\u5339\u914d\u7684\u73b0\u8c61\u3002\u4e00\u65e6\u51fa\u73b0\u5339\u914d\u4e0d\u6210\u529f\u7684\u73b0\u8c61\uff0c\u7acb\u523b\u7ed3\u675f\u3002\n```cpp\ninline int Hungary()\n{\n\tint ans=0;\n\tfor(fint i=1;i<=n;i++)\n\t{\n\t\tmemset(vis,0,sizeof(vis));//\u8bb0\u5f97\u6e05\u96f6\n\t\tif(dfs(i))\n\t\tans++;\n\t\telse\n\t\tbreak;//\u5728\u8fd9\u91cc\u4e00\u5b9a\u8981BREAK\u54e6\uff01\n\t}\n\treturn ans;\n}\n\ninline int dfs(int x)\n{\n\tfor(fint i=head[x];i;i=e[i].nxt)\n\t\tif(!vis[e[i].to])\n\t\t{\n\t\t\tvis[e[i].to]=1;\n\t\t\tif(!s[e[i].to].x||dfs(s[e[i].to].x))\n\t\t\t{\n\t\t\t\ts[e[i].to].x=x;\n\t\t\t\treturn 1;\n\t\t\t}\t\t\n\t    }\n\treturn 0;//\u7206\u641c\u627e\u5bf9\u8c61\n}\n```\n\u73b0\u5728\uff0c\u6211\u4eec\u8dd1\u5b8c\u4e86\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u770b\u4e00\u4e0b**\u50a8\u5b58\u5bf9\u5e94\u5339\u914d\u5173\u7cfb\u7684s\u6570\u7ec4**\uff0c\u53d1\u73b0s\u6570\u7ec4\u50a8\u5b58\u7684\u662f\u9526\u56ca\u5999\u8ba1\u5bf9\u5e94\u7684\u9898\u76ee\uff0c\u6211\u4eec\u8981\u8ba9\u4ed6\u7ffb\u8f6c\u8fc7\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u7528s.num\u50a8\u5b58\u9526\u56ca\u5999\u8ba1\u7684\u7f16\u53f7\uff0c\u5f53\u7136\u5462\uff0c\u5343\u4e07\u4e0d\u8981\u8bef\u89e3 _SPJ_ \u7684\u610f\u601d\uff0c\u6211\u4eec\u53ef\u4e0d\u80fd\u4efb\u610f\u7684\u8f93\u51fa\uff0c\u8981\u7b26\u54081--ans\u7684**\u5bf9\u5e94\u5173\u7cfb**\uff0c\u8fd9\u91cc\u5c31\u8003\u8651\u5230**\u7ed3\u6784\u4f53\u6392\u5e8f**\u3002\u6700\u540e**\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u7ed3\u679c-1**\u54e6\n```cpp\n   struct camp\n   {\n\tint num;\n\tint x;\n   }\n   s[p];//\u7ed3\u6784\u4f53\u4e00\u6b65\u5230\u4f4d\n\tcout<<ans<<endl;\n\tfor(fint i=1;i<=n;i++)\n\ts[i].num=i;//\u50a8\u5b58\u5e8f\u53f7\u65b9\u4fbf\u4e4b\u540e\u7684\u6392\u5e8f\n\tsort(s+1,s+n+1,cmp);\u6392\u5e8f\n\tfor(fint i=1;i<=n;i++)\n\tif(s[i].x)\n\tcout<<s[i].num-1<<endl;//\u8f93\u51fa\n    \n   inline bool cmp(camp aa,camp bb)\n   {\n  \treturn aa.x<bb.x;\n   }\n```\n\u8fd9\u6837\u5462\uff0c\u8fd9\u9053\u9898\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\uff0c\u8d76\u5feb\u4ea4\u4e0a\u53bb~~\u542c\u53d6AC\u4e00\u7247~~\u5427\u3002",
        "postTime": 1588155562,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898[HNOI2006]\u8d85\u7ea7\u82f1\u96c4"
    },
    {
        "content": "\u57fa\u672c\u662f\u4e00\u4e2a\u88f8\u7684\u5308\u7259\u5229\uff0c\u4f46\u662f\u6709\u51e0\u4e2a\u5751\u70b9\uff01\uff01\uff01\n\n1\u3001\u4e00\u822c\u4e60\u60ef\u4ee5n\u4e3a\u4e3b\u52a8\u8fde\u7ebf\u8fb9\uff08\u56e0\u4e3a\u65e0\u8bba\u4ece\u54ea\u4e00\u8fb9\u5f00\u59cb\u90fd\u662f\u53ef\u4ee5\u7684\uff09\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u56e0\u4e3a\u4e00\u65e6\u7b54\u4e0d\u51fa\u67d0\u9053\u9898\u5c31\u4f1a\u7ed3\u675f\uff0c\u6240\u4ee5\u9700\u8981\u4ee5m\uff0c\u4e5f\u5c31\u662f\u95ee\u9898\u4e3a\u4e3b\u52a8\u8fde\u7ebf\u8fb9\u3002\n\n2\u3001\u4e0a\u9762\u4e5f\u8bf4\u4e86\uff0c\u8fd9\u9053\u9898\u4e00\u65e6\u7b54\u4e0d\u51fa\u67d0\u9898\u76f4\u63a5\u7ed3\u675f\uff0c\u5c31\u7b97\u4f60\u4e4b\u540e\u7684\u9898\u8fd8\u662f\u53ef\u4ee5\u505a\u51fa\uff0c\u4e5f\u662f\u6ca1\u7528\u7684\uff01\u6240\u4ee5\u8bb0\u5f97\u53ca\u65f6break\u3002\n\n3\u3001\u4e00\u822c\u4e60\u60ef\u5c06\u7b54\u6848\u6570\u7ec4nxt\u653e\u5728\u5168\u5c40\u53d8\u91cf\uff0c\u8ba9\u4ed6\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u7684\u9898\u76ee\u7f16\u53f7\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u91c7\u7528nxt[x]==0\u6765\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u88ab\u8fde\u63a5\u662f\u4e0d\u53ef\u4ee5\u7684\uff01\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5c06nxt\u521d\u59cb\u4e3a-1.\n\n\u89e3\u51b3\u4e86\u8fd9\u51e0\u4e2abug\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u4fee\u677f\u5b50\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 1005\ninline int read()\n{\n    char c=getchar();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nint n,m;\nint inp[N][N];\nint vis[N],nxt[N];\nint now[N];\nbool findd(int x){\n\tfor(int to=0;to<n;to++)\t{\n\t\tif(vis[to] || inp[x][to]==0)\n\t\t\tcontinue;\n\t\tvis[to]=1;\n\t\tif(nxt[to]==-1 || findd(nxt[to])){\n\t//\u5f53\u524d\u672a\u88ab\u5339\u914d\u6216\u88ab\u5339\u914d\u503c\u53ef\u4ee5\u627e\u5230\u5176\u4ed6\u89e3 \n\t\t\tnxt[to]=x;\n\t\t\tnow[x]=to;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint match()  {\n\tint sum=0;\n\tfor(int i=0;i<m;i++)\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tif(findd(i))\n\t\t\tsum++;\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn sum;\t//\u6700\u5927\u5339\u914d\u6570 \n}\nint main()\n{\n\tmemset(nxt,-1,sizeof(nxt));\n\tn=read(),m=read();\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tinp[i][u]=inp[i][v]=1;\n\t}\n\tint ans=match();\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=0;i<ans;i++)\n\t\tprintf(\"%d\\n\",now[i]);\n    return 0;\n}\n```\n",
        "postTime": 1585662756,
        "uid": 140852,
        "name": "tyno\u590f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u611f\u89c9\u8fd9\u4e2a\u9898\u6a21\u677f\u5427\u3002\u5c31\u662f\u9898\u76ee\u8981\u6c42\u53ea\u6709\u4f5c\u5bf9\u524d\u4e00\u9898\u624d\u80fd\u505a\u540e\u9762\u7684\u9898\u76ee\u3002\u6240\u4ee5\u5339\u914d\u7684\u65f6\u5019\u5f97\u8fde\u7eed\uff0c\u5426\u5219\u5c31\u9000\u51fa\u3002\u6ce8\u610f\u8f93\u5165\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n```c\n#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#define MAXN  2005\nusing namespace std;\n\nvector<int> G[1005];\nbool vis[MAXN];\nint vv[MAXN];\nint Left[MAXN];\nint n,m;\n\nbool match(int u)\n{\n    for(int i=0;i<G[u].size();i++)\n    {\n        int v=G[u][i];\n        if(vis[v])\n            continue;\n        vis[v]=true;\n        if(!vv[v]||match(vv[v]))\n        {\n            vv[v]=u;\n            Left[u]=v;\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid Km()\n{\n    memset(vv,0,sizeof(vv));\n    memset(Left,0,sizeof(Left));\n    int sum=0;\n    for(int i=1;i<=2*n;i++)\n    {\n        memset(vis,0,sizeof(vis));\n        if(match(i))\n            sum++;\n        else\n            break;                                              //\u9898\u76ee\u4e2d\u8981\u6c42\u53ea\u6709\u7b54\u5bf9\u4e0a\u4e00\u9898\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\u3002\u6240\u4ee5\u5fc5\u987b\u662f\u8fde\u7eed\u5339\u914d\u7684\n    }\n    printf(\"%d\\n\",sum);\n    for(int i=1;i<=m;i++)\n    {\n        if(Left[i]==0)\n            break;\n        printf(\"%d\\n\",Left[i]-1-m);\n    }\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int uu,vv;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&uu,&vv);\n        G[i].push_back(uu+1+m);     //\u4ece\u4eba\u5411\u9526\u56ca\u5999\u8ba1\u8fde\u8fb9\n        G[i].push_back(vv+1+m);      //\u9526\u56ca\u5999\u8ba1\u662f\u4ece0\u5f00\u59cb\uff0c\u8fd9\u91cc\u4ecem+1\u5f00\u59cb\uff0c\u628a0\u53f7\u6620\u5c04\u4e3am+1\n    }\n    Km();\n    return 0;\n}\n\n```\n",
        "postTime": 1569510576,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u770b\u5230\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u6c42\u6700\u5927\u5339\u914d\u6570\u76ee\uff0c\u672c\u80fd\u7684\u60f3\u8d77\u4e8c\u5206\u56fe\u5339\u914d  \n\u672c\u9898\u57fa\u672c\u4e0a\u5c31\u662f\u6a21\u677f  \n\u53ea\u4e0d\u8fc7\u6ce8\u610f\u5339\u914d\u5931\u8d25\u4ee5\u540e\u8981\u7acb\u5373\u9000\u51fa\uff08\u53ea\u80fd\u8d70\u4e00\u6b21\uff09  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Edge{\n\tint u,v,nxt;\n}e[100010];\nint head[10010],cnt;\ninline void add(int u,int v){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nint match[100010],sum[100010],vis[100010];\nint dfs(int u){\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!vis[v]){\n\t\t\tvis[v]=1;\n\t\t\tif(match[v]==-1||dfs(match[v])==1){\n\t\t\t\tmatch[v]=u;sum[u]=v;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i){\n\t\tint v1,v2;\n\t\tscanf(\"%d%d\",&v1,&v2);\n\t\tadd(i,v1+1);add(i,v2+1);\n\t}\n\tmemset(match,-1,sizeof(match));\n\tmemset(sum,-1,sizeof(sum));\n\tint ans=0;\n\tfor(int i=1;i<=m;++i){\n\t\tmemset(vis,0,sizeof(vis));\n\t\tif(dfs(i))ans++;\n\t\telse break;\n\t}\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=1;i<=ans;++i)\n\t\tprintf(\"%d\\n\",sum[i]-1);\n\treturn 0;\n}\n \n```\n",
        "postTime": 1565869865,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "\u4e8c\u5206\u56fe\u5339\u914d-1"
    },
    {
        "content": "\u9898\u76ee\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u95ee\u9898\uff0c\u5efa\u56fe\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n* \u5bf9\u4e8e\u4e8c\u5206\u56fe\u5de6\u8fb9\u4e3a\u5f53\u524d\u9898\u76ee\u6807\u53f7$i$\n* \u5bf9\u4e8e\u4e8c\u5206\u56fe\u53f3\u8fb9\u4e3a\u5f53\u524d\u9898\u76ee\u7684\u201c\u9526\u56ca\u5999\u8ba1\u201d\u7f16\u53f7\n\n\u63a5\u4e0b\u6765\u8dd1\u4e00\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5c31\u597d\u4e86\n\n\u56e0\u4e3a\u95ee\u9898\u8981\u6c42\u8fde\u7eed\u7684\u56de\u7b54\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fb9\u5efa\u56fe\u8fb9\u8dd1\n\n```cpp\n// luogu-judger-enable-o2\n/***************************************************************\n\tFile name: P2319.cpp\n\tAuthor: ljfcnyali\n\tCreate time: 2019\u5e7406\u670824\u65e5 \u661f\u671f\u4e00 14\u65f618\u520646\u79d2\n***************************************************************/\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) \n#define mem(a) memset ( (a), 0, sizeof ( a ) ) \n#define str(a) strlen ( a ) \n\nconst int maxn = 2010;\n\nint Begin[maxn], Next[maxn], To[maxn], e;\nint link[maxn], n, m, ans;\nbool vis[maxn];\n\ninline void add(int u, int v)\n{\n    To[++ e] = v;\n    Next[e] = Begin[u];\n    Begin[u] = e;\n}\n\ninline bool DFS(int u)\n{\n    if ( vis[u] ) return false;\n    vis[u] = true;\n    for ( int i = Begin[u]; i; i = Next[i] ) \n    {\n        int v = To[i];\n        if ( !link[v] || DFS(link[v]) ) { link[v] = u; return true; }\n    }\n    return false;\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    scanf(\"%d%d\", &n, &m);\n    REP(i, 1, m)\n    {\n        int u, v; scanf(\"%d%d\", &u, &v); \n        u += 1000; v += 1000;\n        add(i, u); add(i, v);\n        mem(vis);\n        if ( DFS(i) ) ++ ans;\n        else break ; \n    }\n    printf(\"%d\\n\", ans);\n    REP(i, 1, ans)\n        REP(j, 1000, 999 + n)\n            if ( link[j] == i ) { printf(\"%d\\n\", j - 1000); break ; }\n    return 0;\n}",
        "postTime": 1561357743,
        "uid": 8618,
        "name": "\u6c34\u5e93\u4e2d\u7684\u6c34\u5e93",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "### \u601d\u8def\n\u4e00\u5f00\u59cb\u5f00\uff0c\u8fd9\u4e0d\u88f8\u7684\u4e8c\u5206\u56fe\u5417\uff0c\u7136\u540e\u6572\u4e86\u4e2a\u677f\u5b50\u4e0a\u53bb\uff0c\u5c31wa\u6389\u4e86\u771f\u7684\u662fnative\u3002\n\n\u7136\u540e\u770b\u4e86\u770b\u9650\u5236\u6761\u4ef6\u3002\u6b63\u786e\u56de\u7b54\u4e00\u9053\u9898\u540e\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\u3002\n\n\u4e0d\u96be\u6211\u4eec\u5bb9\u6613\u60f3\u5230\u6bcf\u6b21\u52a0\u8fb9\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u7136\u540e\u603b\u6d41\u91cf\uff08\u5373\u80fd\u5339\u914d\u7684\u65b9\u6cd5\u6570\uff09\u6bd4\u5f53\u524d\u70b9\u5c11\uff0c\u90a3\u4e48\u5c31\u9000\u51fa\n### \u4ee3\u7801\n\u589e\u5e7f\u8def\u7b97\u6cd5 Ford-Fulkerson\uff0c\u9002\u7528\u4e8e\u7a00\u758f\u56fe\n```cpp\n#include<bits/stdc++.h>\n#define inf 0x3f3f3f3f\nusing namespace std;\nconst int maxn=10000+10,maxm=10000+10;\nint head[maxn],vis[maxn];\nint s,t;\nint n,m,ans;\nstruct edge\n{\n\tint to,next,cap;\n}e[maxm];\nint size=1;\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nvoid addedge(int u,int v,int val)\n{\n\te[++size].to=v;e[size].cap=val;e[size].next=head[u];head[u]=size;\n\te[++size].to=u;e[size].cap=0;e[size].next=head[v];head[v]=size;\n}\nint dfs(int u,int f)\n{\n\tif(u==t)return f;\n\tvis[u]=1;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint to=e[i].to;\n\t\tif(!vis[to]&&e[i].cap>0)\n\t\t{\n\t\t\tint d=dfs(to,min(f,e[i].cap));\n\t\t\tif(d>0)\n\t\t\t{\n\t\t\t\te[i].cap-=d;\n\t\t\t\te[i^1].cap+=d;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint maxflow()\n{\n\tint flow=0;\n\twhile(1)\n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tint f=dfs(s,inf);\n\t\tif(f==0)return flow;\n\t\tflow+=f;\n\t}\n}\nint main()\n{\n    n=read(),m=read();\n    s=n+m,t=n+m+1;\n    for(int i=0;i<n;i++)\n    addedge(s,i,1);\n    for(int i=1;i<=m;i++)\n    addedge(n+i-1,t,1);\n    for(int i=1;i<=m;i++)\n    {\n    \tint a=read(),b=read();\n    \taddedge(a,n+i-1,1);\n    \taddedge(b,n+i-1,1);\n    \tans+=maxflow();\n    \tif(ans<i||i==m)\n    \t{\n\t\t  printf(\"%d\\n\",ans);\n\t\t  for(int u=n;u<n+i;u++)\n\t      {\n \t\t    for(int i=head[u];i;i=e[i].next)\n\t\t    {\n\t\t\tint to=e[i].to;\n\t\t\t  if(to!=t&&e[i].cap)\n\t\t\t  {\n\t\t\t\tprintf(\"%d\\n\",to);\n\t\t\t  }\n\t\t    }\n\t      }\n\t      exit(0);\n        }\n    }\n\treturn 0;\n}\n\n```\n",
        "postTime": 1553153770,
        "uid": 58707,
        "name": "Edward_Elric",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "# \u5199\u5728\u524d\u9762\uff1a\n\u5982\u679c\u83b7\u53d6\u66f4\u4f73\u9605\u8bfb\u6548\u679c\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://blog.csdn.net/kkkksc03/article/details/886043420),\u4efb\u4f55\u7591\u95ee\u6b22\u8fce\u79c1\u4fe1\u4f5c\u8005\uff01\n# \u9898\u76ee\u94fe\u63a5\uff1a\nhttps://www.luogu.org/problemnew/show/P2319\n\n# \u5206\u6790\n\u6bcf\u9519\uff0c\u8fd9\u662f\u4e00\u9053~~\u6d77\u5357~~\u4e0d\u5bf9\u662f~~\u6cb3\u5357~~\u5440\u5440\u5440\u9519\u4e86\u662f\u6e56\u5357\u7684\u7701\u9009\u9898\u3002\n\n\u4f46\u662f\u8fd8\u662f\u53ef\u4ee5\u4f5c\u4e3a\u4e8c\u5206\u56fe\u7b2c\u4e8c\u9898\u6765\u7ec3\u624b\u7684\uff0c\u63d2\u64ad[\u7b2c\u4e00\u9898](https://blog.csdn.net/kkkksc03/article/details/886040470),\u5bf9\u7167\u98df\u7528\u6548\u679c\u66f4\u4f73\n\n---\n\u8a00\u5f52\u6b63\u4f20\u3002\n\n\u8fd9\u9053\u9898\u8bf4\n> \u53ea\u6709\u6b63\u786e\u56de\u7b54\u672c\u9898\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u9898\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5faa\u73af\u9898\u76ee\u7f16\u53f7\u4ee5\u4fdd\u8bc1\u7b26\u5408\u9898\u610f\u3002\n\n\u7136\u540e\u7531\u4e8e\u9898\u76ee\u4e0d\u4f46\u8ba9\u6211\u4eec\u8f93\u51fa\u6700\u591a\u80fd\u901a\u8fc7\u51e0\u9898\uff0c\u8fd8\u8981\u6c42\u8f93\u51fa\u9526\u56ca\u5999\u8ba1\u7684\u7f16\u53f7\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728find\u6a21\u677f\u51fd\u6570\u4e2d\u8bb0\u5f55\u4e00\u4e0b\uff1a\n\n```\nsum[x]=p; \n```\n\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u8fd8\u662f\u8981\u8003\u8651\u4e00\u4e0b``else break;``\u7684\u95ee\u9898\u3002\n\n\u56e0\u4e3a\u8fd9\u65f6\u540e\u8fd8\u662f\u8981\u6c42\u8fde\u7eed\u7684\u7b54\u9898\uff0c\u6240\u4ee5\u8bf4\u4e00\u9053\u9898\u5982\u679c\u6ca1\u7b54\u4e0a\uff08!find(i\uff09)\uff0c\u90a3\u4e48\u5c31\u88ab\u6dd8\u6c70\u4e86\u3002\u6240\u4ee5\u4e5f\u8981\u52a0\u4e0a\u3002\uff08\u540e\u9762\u6709\u4e0d\u52a0else break\u7684\u9898\u76ee\u60c5\u51b5\uff09\n# \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cmath>\nusing namespace std;\nvector<int>v[1005];\nint vis[1005],link[1005],a[1005],sum[1005];\nint t;\nbool find(int x)\n{\n    for(int i=0;i<v[x].size();i++)\n    {\n        int p=v[x][i];\n        if(vis[p]!=t)\n        {\n            vis[p]=t;\n            if(link[p]==-1||find(link[p]))\n            {\n                link[p]=x;\n                sum[x]=p; \n                return 1;\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    int n,m;\n    for(int i=0;i<=1000;i++)\n    {\n        link[i]=-1;\n    }\n    scanf(\"%d%d\",&m,&n);\n    int maxf=0;\n    for(int i=0;i<n;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        v[i].push_back(a);\n        v[i].push_back(b);\n    } \n    int cnt=0;\n    for(int i=0;i<=n+m;i++)//\u5728\u8fd9\u91ccn+m\u662f\u4e3a\u4e86\u9632\u6b62\u6700\u540e\u4e00\u4e2a\u88ab\u5ffd\u7565\u7684\u60c5\u51b5\n    {\n        t++;\n        if(find(i))\n        {\n            cnt++;\n        }\n        else\n        break;\n    }\n    printf(\"%d\\n\",cnt);\n    for(int i=0;i<cnt;i++)\n    {\n        printf(\"%d\\n\",sum[i]);\n    }\n    return 0;\n} \n```\n\n",
        "postTime": 1552737032,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10081375.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2319) \n\n\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4e8c\u5206\u56fe\u5339\u914d\n\n### [\u4e8c\u5206\u56fe\u5339\u914d\u8be6\u89e3](https://www.cnblogs.com/yzhang-rp-inf/p/10079578.html)\n\n\u4e00\u5f00\u59cb\u60f3\u7684\u662f2-sat\u548c\u7f51\u7edc\u6d41\uff0c\u6839\u672c\u6ca1\u60f3\u5308\u7259\u5229\u548cHK\n\n\u8fd9\u9053\u9898\u53ea\u8981\u6ce8\u610f\u4e00\u70b9\uff1a\u5f53\u4e00\u4e2a\u70b9\u5339\u914d\u4e0d\u6210\u529f\u4e4b\u540e\u5c31\u76f4\u63a5\u9000\u51fa\n\n\u5269\u4e0b\u7684\u5c31\u5199\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5c31\u884c\u4e86\n\n\u5b8c\u6574\u4ee3\u7801\uff08~~\u4e0d\u60f3\u5199HK~~\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define N 1005\nusing namespace std;\ninline int read()\n{\n\tregister int x=0,f=1;register char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\ninline void write(register int x)\n{\n\tif(!x)putchar('0');if(x<0)x=-x,putchar('-');\n\tstatic int sta[25];int tot=0;\n\twhile(x)sta[tot++]=x%10,x/=10;\n\twhile(tot)putchar(sta[--tot]+48);\n}\nstruct node{\n\tint to,next;\n}e[N<<1];\nint head[N],tot;\ninline void add(register int u,register int v)\n{\n\te[++tot]=(node){v,head[u]};\n\thead[u]=tot;\n}\nint n,m;\nint ask[N],matched[N],bematched[N];\ninline bool dfs(register int u)\n{\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(ask[v])\n\t\t\tcontinue;\n\t\task[v]=1;\n\t\tif(!matched[v]||dfs(matched[v]))\n\t\t{\n\t\t\tmatched[v]=u;\n\t\t\tbematched[u]=v;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint x=read()+1,y=read()+1;\n\t\tadd(i,x),add(i,y);\n\t}\n\tint ans=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tmemset(ask,0,sizeof(ask));\n\t\tif(dfs(i))\n\t\t\t++ans;\n\t\telse\n\t\t\tbreak;\n\t}\n\twrite(ans),puts(\"\");\n\tfor(register int i=1;i<=ans;++i)\n\t\twrite(bematched[i]-1),puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1544149336,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    },
    {
        "content": "\u76f4\u63a5\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u4e00\u8fb9\u9526\u56ca\uff0c\u4e00\u8fb9\u9898\u76ee\uff0c\u6ce8\u610f\u5982\u679c\u9898\u76ee\u65e0\u6cd5\u89e3\u8981\u9000\u51fa\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint map[2003][2003];\nint vis[2003];\nint m1[2003],m2[2003];\nint n,m;\nint dfs(int x)\n{\n    int i;\n    for(i=1;i<=n;i++)\n    {\n        if(!vis[i]&&map[x][i])\n        {\n            vis[i]=1;\n            if(m1[i]==-1||dfs(m1[i]))\n            {\n                m1[i]=x;//\u9526\u56cai\u89e3\u9898\u76eex\n                m2[x]=i;//\u9898\u76eex\u7528\u9526\u56cai\uff0c\u65b9\u4fbf\u8f93\u51fa\n                return 1;\n            }\n        }\n    }\n    return  0;\n```\n}//\u5308\u7259\u5229\u7b97\u6cd5\n```cpp\nint main()\n{\n    int num,i,t1,t2;\n        memset(map,0,sizeof(map));\n        memset(m1,-1,sizeof(m1));\n        scanf(\"%d%d\",&n,&m);\n        for(i=1;i<=m;i++)\n        {\n            scanf(\"%d%d\",&t1,&t2);\n            map[i][t1+1]=1;//\u4e2a\u4eba\u4e60\u60ef\u4ece1\u7f16\u53f7\n            map[i][t2+1]=1;\n```\n}//\u5efa\u56fe\n```cpp\n        int ans=0;\n        for(i=1;i<=m;i++)\n        {\n            memset(vis,0,sizeof(vis));\n            if(dfs(i))\n                ans++;\n            else\n                break;//\u6ce8\u610f\uff1a\u5982\u679c\u67d0\u4e00\u9898\u505a\u4e0d\u5230\u5c31\u9000\u51fa \n        }\n        printf(\"%d\\n\",ans);  \n        for(i=1;i<=ans;++i)printf(\"%d\\n\",m2[i]-1);//\u6211\u8fd9\u91cc\u4ece1\u5f00\u59cb\u7f16\u53f7\u6240\u4ee5\u8981\u51cf1\n    return 0;\n}\n```",
        "postTime": 1491054981,
        "uid": 26429,
        "name": "Days",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2319 \u3010[HNOI2006]\u8d85\u7ea7\u82f1\u96c4\u3011"
    }
]