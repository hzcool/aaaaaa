[
    {
        "content": "\u4e27\u5fc3\u75c5\u72c2\u7684\u5f3a\u5236\u5728\u7ebf!\u8fd9\u6837\u6211\u4eec\u5c31\u7528\u4e0d\u4e86CDQ\u5206\u6cbb\u4e86,\u53ea\u80fd\u4e0aKD-Tree\u4e86.\n\n\u9996\u5148,\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c,\u90fd\u53ef\u4ee5\u89c6\u4f5c\u63d2\u5165\u4e00\u4e2a\u70b9,\u540c\u6837,\u5982\u679c\u63d2\u5165\u540e\u5bfc\u81f4KD-Tree\u4e0d\u5e73\u8861,\u5c31\u8981\u66b4\u529b\u91cd\u5efa.\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c,\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e00\u68f5\u5b50\u6811\u4e2d\u6240\u6709\u70b9x\u548cy\u5750\u6807\u7684\u6700\u5927/\u6700\u5c0f\u503c,\u5982\u679c\u5f53\u524d\u5b50\u6811\u6574\u68f5\u6811\u90fd\u5728\u5f53\u524d\u67e5\u8be2\u77e9\u5f62\u5185,\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u6743\u503c\u548c.\u5982\u679c\u5f53\u524d\u5b50\u6811\u6574\u68f5\u6811\u90fd\u4e0d\u5728\u5f53\u524d\u67e5\u8be2\u77e9\u5f62\u5185,\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de0.\u5426\u5219,\u5148\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u4ee3\u8868\u7684\u70b9\u662f\u5426\u5728\u67e5\u8be2\u77e9\u5f62\u4e2d,\u7136\u540e\u9012\u5f52\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9.\n\n\u7ec6\u8282\u5f88\u591a,\u6ce8\u610f\u4e0d\u8981\u624b\u8d31\u5f00long long,\u5e76\u4e14\u5982\u679cRE\u4e86,\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u5f00O2\u6765A\u6389\u8fd9\u9898.\n\n\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tint q=0,w=1;char ch=' ';\n\twhile(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n\tif(ch=='-') w=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\n\treturn q*w;\n}\nconst int N=200005;\nstruct point{int x[2],w;}p[N];\nstruct node{int mi[2],mx[2],sum,ls,rs,sz;point tp;}tr[N];\nint n,ans,rt,WD,top,cur,rub[N];\nint operator < (point a,point b) {return a.x[WD]<b.x[WD];}\nint newnode() {//\u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9,rub:\u5783\u573e\u56de\u6536\u6808\n\tif(top) return rub[top--];\n\telse return ++cur;\n}\nvoid up(int k) {//\u63d0\u53d6\u5b50\u6811\u6700\u5927/\u6700\u5c0f\u503c,\u5b50\u6811\u5927\u5c0f,\u6743\u503c\u548c\n\tint l=tr[k].ls,r=tr[k].rs;\n\tfor(int i=0;i<=1;++i) {\n\t\ttr[k].mi[i]=tr[k].mx[i]=tr[k].tp.x[i];\n\t\tif(l) tr[k].mi[i]=min(tr[k].mi[i],tr[l].mi[i]);\n\t\tif(r) tr[k].mi[i]=min(tr[k].mi[i],tr[r].mi[i]);\n\t\tif(l) tr[k].mx[i]=max(tr[k].mx[i],tr[l].mx[i]);\n\t\tif(r) tr[k].mx[i]=max(tr[k].mx[i],tr[r].mx[i]);\n\t}\n\ttr[k].sum=tr[l].sum+tr[r].sum+tr[k].tp.w,tr[k].sz=tr[l].sz+tr[r].sz+1;\n}\nint build(int l,int r,int wd) {//\u91cd\u65b0\u5efa\u6811\n\tif(l>r) return 0;\n\tint mid=(l+r)>>1,k=newnode();\n\tWD=wd,nth_element(p+l,p+mid,p+r+1),tr[k].tp=p[mid];\n\ttr[k].ls=build(l,mid-1,wd^1),tr[k].rs=build(mid+1,r,wd^1);\n\tup(k);return k;\n}\nvoid pia(int k,int num) {//\u628a\u6811\u8fd8\u539f\u6210\u5e8f\u5217\n\tif(tr[k].ls) pia(tr[k].ls,num);\n\tp[tr[tr[k].ls].sz+num+1]=tr[k].tp,rub[++top]=k;\n\tif(tr[k].rs) pia(tr[k].rs,num+tr[tr[k].ls].sz+1);\n}\nvoid check(int &k,int wd) {//\u68c0\u67e5\u6811\u662f\u5426\u4f9d\u7136\u5e73\u8861,\u4e0d\u5e73\u8861\u5219\u91cd\u5efa\n\tif(tr[k].sz*0.75<tr[tr[k].ls].sz||tr[k].sz*0.75<tr[tr[k].rs].sz)\n\t\tpia(k,0),k=build(1,tr[k].sz,wd);\n}\nvoid ins(int &k,point tmp,int wd) {//\u63d2\u5165\n\tif(!k) {k=newnode(),tr[k].ls=tr[k].rs=0,tr[k].tp=tmp,up(k);return;}\n\tif(tmp.x[wd]<=tr[k].tp.x[wd]) ins(tr[k].ls,tmp,wd^1);\n\telse ins(tr[k].rs,tmp,wd^1);\n\tup(k),check(k,wd);\n}\nint in(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2) {\n\treturn (X1>=x1&&X2<=x2&&Y1>=y1&&Y2<=y2);\n}//\u68c0\u67e5\u662f\u5426\u5728\u67e5\u8be2\u77e9\u5f62\u5185\nint out(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2) {\n\treturn (x1>X2||x2<X1||y1>Y2||y2<Y1);\n}//\u68c0\u67e5\u662f\u5426\u5728\u67e5\u8be2\u77e9\u5f62\u5916\nint query(int k,int x1,int y1,int x2,int y2) {\n\tif(!k) return 0;\n\tint re=0;\n\tif(in(x1,y1,x2,y2,tr[k].mi[0],tr[k].mi[1],tr[k].mx[0],tr[k].mx[1])) return tr[k].sum;\n\tif(out(x1,y1,x2,y2,tr[k].mi[0],tr[k].mi[1],tr[k].mx[0],tr[k].mx[1])) return 0;\n\tif(in(x1,y1,x2,y2,tr[k].tp.x[0],tr[k].tp.x[1],tr[k].tp.x[0],tr[k].tp.x[1]))\n\t\tre+=tr[k].tp.w;//\u5bf9\u5f53\u524d\u70b9\u505a\u5224\u65ad\n\tre+=query(tr[k].ls,x1,y1,x2,y2)+query(tr[k].rs,x1,y1,x2,y2);\n\treturn re;//\u9012\u5f52\u6c42\u89e3\n}\nint main() {\n\tint bj,x1,y1,x2,y2;\n\tn=read();\n\twhile(\"STO Cai Orz\") {\n\t\tbj=read(); if(bj==3) break;\n\t\tif(bj==1) ins(rt,(point){read()^ans,read()^ans,read()^ans},0);\n\t\telse {\n\t\t\tx1=read()^ans,y1=read()^ans,x2=read()^ans,y2=read()^ans;\n\t\t\tans=query(rt,x1,y1,x2,y2),printf(\"%d\\n\",ans);\n\t\t}\n\t}\n    return 0;\n}\n```",
        "postTime": 1517619261,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4148 \u3010\u7b80\u5355\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u9762\uff0c\u7b2c\u4e00\u773c\u60f3\u5230\u7684\u662f\u7528cdq\u6216\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u8fd9\u4e1c\u4e1c\u3002\n\n~~\u4f46\u662f\u5f3a\u5236\u5728\u7ebf\u9650\u5236\u4e86\u6211\u4eec\u7684\u60f3\u8c61~~\n\n\u7136\u540e\u60f3\u5230\u7528\u6811\u5957\u6811\uff0c\u6bd5\u7adf\u65f6\u95f4\u548c\u7a7a\u95f4\u597d\u50cf\u662f$O(n\\log^2n)$\u7684\u3002\n\n~~\u4f46\u662f20M\u7684\u7a7a\u95f4\u9650\u5236\u4e86\u6211\u4eec\u7684\u60f3\u8c61~~\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u7528\u5230$kd-tree$\u6765\u7ef4\u62a4\u3002\n\n### 1.$kd-tree$\u662f\u4ec0\u4e48\n\n$kd-tree$\u5176\u5b9e\u662f\u4e00\u9897\u5e73\u8861\u6811\uff08\u66ff\u7f6a\u7f8a\u6811\uff09\uff0c\u5b83\u7ef4\u62a4\u4e86$k$\u7ef4\u7a7a\u95f4\u7684$n$\u4e2a\u70b9\u7684\u4fe1\u606f\u3002\n\n### 2.\u5982\u4f55\u5c06\u4e00\u4e2a\u70b9\u63d2\u5165$kd-tree$ \n\n\u6211\u4eec\u5bf9\u4e8e\u6df1\u5ea6\u4e3a$i$\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167$i\\%k$\u7ef4\u7684\u5750\u6807\u6765\u6bd4\u8f83\uff0c\u7136\u540e\u6309\u666e\u901a\u5e73\u8861\u6811\u7684\u63d2\u5165\u5373\u53ef\u3002\n\n\u6bd4\u5982\uff0c\u4e0d\u59a8\u8bbe\u8fd9\u4e2a\u70b9\u662f$A(x_0,x_1,...,x_{k-1})$\uff0c\u6211\u4eec\u63d2\u5165\u65f6\u7b2c\u4e00\u4e2a\u8981\u6bd4\u8f83\u7684\u8282\u70b9\u662f$u=root$\uff0c\u90a3\u4e48\u5982\u679c$x_0\\leq u.x_0$\uff08$u.x_0$\u5373\u4e3a$u$\u8fd9\u4e2a\u70b9\u7684\u7b2c$0$\u7ef4\u7684\u5750\u6807\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u8df3\u5230$u$\u7684\u5de6\u5b50\u6811\u53bb\uff0c\u5373$u=ch[u][0]$\u3002\u7136\u540e\u5728\u8ba9$x_1$\u548c\u5f53\u524d$u$\u7684$x_1$\u6bd4\u8f83\uff0c\u5982\u6b64\u63a8\u7c7b\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u7a7a\u8282\u70b9\u622a\u6b62\u3002\n\n\u5982\u679c\u662f\u5efa\u6811\u4e5f\u540c\u7406\uff0c\u5728\u6df1\u5ea6\u4e3a$i$\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167$i\\%k$\u7ef4\u7684\u5750\u6807\u6bd4\u8f83\uff0c\u627e\u51fa\u5f53\u524d\u70b9\u96c6\u4e2d\u7684\u70b9\u7684\u7b2c$i\\%k$\u7ef4\u7684\u5750\u6807\u4e2d\u5728\u6700\u4e2d\u95f4\u7684\u8fd9\u4e00\u4e2a\u70b9\u3002\u901a\u4fd7\u7684\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u5f53\u524d\u70b9\u96c6\u6309\u7b2c$i\\%k$\u7ef4\u7684\u5750\u6807\u6392\u4e00\u904d\u5e8f\uff0c\u7136\u540e\u53d6\u51fa\u6700\u4e2d\u95f4\u7684\u70b9\uff0c\u628a\u5b83\u5f53\u6210\u5f53\u524d\u5b50\u6811\u7684\u6839\uff0c\u518d\u5411\u5de6\u53f3\u513f\u5b50\u904d\u5386\u3002\n\n\u5982\u4f55\u66f4\u597d\u5730\u7406\u89e3\u4e0a\u8ff0\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u6216\u8fc7\u7a0b\uff1f\n\n\u770b\u56fe\uff1a\uff08\u8fd9\u91cc\u4ee52\u7ef4\u4e3a\u4f8b\uff09\n\n\u5047\u8bbe\u73b0\u5728\u5750\u6807\u7cfb\u91cc\u6709\u8fd9\u4e48\u4e00\u4e9b\u70b9\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191221084901622.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u6211\u4eec\u6309\u7167\u521a\u624d\u7684\u65b9\u6cd5\uff0c\u5148\u6309\u7b2c\u4e00\u7ef4\u8fdb\u884c\u6bd4\u8f83\uff0c\u5f97\u51fa\u6700\u4e2d\u95f4\u7684\u70b9$A$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u628a$A$\u5f53\u4f5c\u5f53\u524d\u6811\u7684\u6839\uff0c\u628a$B$\u3001$F$\u3001$C$\u6254\u8fdb\u5de6\u5b50\u6811\uff0c\u628a$D$\u3001$G$\u3001$I$\u6254\u8fdb\u53f3\u5b50\u6811\u3002\n\n\u51e0\u4f55\u610f\u4e49\u4e0a\u5c31\u662f\u505a\u4e00\u4e2a\u4ee5$A$\u4e3a\u4e2d\u5fc3\u70b9\u5728\u7b2c\u4e00\u7ef4\u7684\u5206\u5272\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191221085642873.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u540c\u7406\uff0c\u5728\u8fdb\u5165\u4e0b\u4e00\u5c42\u7684\u5efa\u6811\u65f6\uff0c\u6211\u4eec\u6309\u7b2c2\u7ef4\u6765\u6bd4\u8f83\u3002\n\n\u51e0\u4f55\u610f\u4e49\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191221085731820.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u7136\u540e\u7b2c\u4e09\u5c42\uff0c\u6211\u4eec\u6309\u7b2c\u4e00\u7ef4\u6bd4\u8f83\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191221090012906.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u8fd9\u6837\u4e0b\u6765\u5c31\u5206\u5272\u5b8c\u4e86\uff0c\u7136\u540e\u5efa\u51fa\u6765\u7684\u6811\u957f\u8fd9\u6837\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191221090953389.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u90a3\u4e48\u5728\u6bd4\u5982\u6211\u4eec\u8981\u63d2\u5165\u4e00\u4e2a\u70b9$J(3.5,4.5)$\n\n\u6211\u4eec\u5148\u8ba9$J$\u7684\u6a2a\u5750\u6807\u4e0e\u5f53\u524d\u70b9$A$\u7684\u6a2a\u5750\u6807\u6bd4\u8f83\uff0c\u53d1\u73b0$x_J>x_A$\uff0c\u6240\u4ee5\u7ee7\u7eed\u9012\u5f52$A$\u7684\u53f3\u5b50\u6811$G$\u3002\n\n\u7136\u540e\u518d\u8ba9$J$\u7684\u7eb5\u5750\u6807\u4e0e\u5f53\u524d\u70b9$G$\u7684\u7eb5\u5750\u6807\u6bd4\u8f83\uff0c\u53d1\u73b0$y_J<y_G$\uff0c\u6240\u4ee5\u7ee7\u7eed\u9012\u5f52$G$\u7684\u5de6\u5b50\u6811$D$\u3002\n\n\u7136\u540e\u518d\u8ba9$J$\u7684\u6a2a\u5750\u6807\u4e0e\u5f53\u524d\u70b9$D$\u7684\u6a2a\u5750\u6807\u6bd4\u8f83\uff0c\u53d1\u73b0$x_J<x_D$\uff0c\u6240\u4ee5\u7ee7\u7eed\u9012\u5f52$D$\u7684\u5de6\u5b50\u6811\u3002\n\n\u53d1\u73b0\u5f53\u524d\u8282\u70b9\u662f\u7a7a\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u628a\u5f53\u524d\u8282\u70b9\u8bbe\u4e3a$J$\u3002\n\n\u7136\u540e\u6811\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2019122109120433.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u7136\u540e\u8bb0\u5f97\u5982\u679c\u67d0\u68f5\u6811\u4e0d\u5e73\u8861\uff0c\u5c31\u66b4\u529b\u91cd\u6784\u3002\n\n\u8fd9\u5c31\u662f\u6574\u4e2a$kd-tree$\u63d2\u5165\u548c\u5efa\u6811\u7684\u5168\u8fc7\u7a0b\u3002\n\n\u81f3\u4e8e\u67e5\u8be2\uff0c\u7531\u4e8e\u5728\u51e0\u4f55\u610f\u4e49\u4e0a\uff0c\u6211\u4eec\u6bcf\u68f5\u5b50\u6811\u90fd\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u77e9\u5f62\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u77e9\u5f62\u7684$min_x$\u3001$max_x$\u3001$min_y$\u3001$max_y$\uff0c\u4e5f\u5c31\u662f\u77e9\u5f62\u7684\u5de6\u8fb9\u754c\uff0c\u53f3\u8fb9\u754c\uff0c\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e9b\u4fe1\u606f\u641e\u4e8b\u60c5\u4e86\u3002\n\n\u6bd4\u5982\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5982\u679c\u4f60\u5f53\u524d\u5b50\u6811\u7ef4\u62a4\u7684\u77e9\u5f62\u5b8c\u5168\u5728\u8be2\u95ee\u7684\u77e9\u5f62\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u77e9\u5f62\u5185\u6240\u6709\u70b9\u7684\u6743\u503c\u548c\u5c31\u597d\u4e86\uff0c\u5426\u5219\u5c31\u7ee7\u7eed\u9012\u5f52\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u548c\u6ce8\u91ca\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define N 500010\n#define M 200010\n#define lc t[u].ch[0]\n#define rc t[u].ch[1]\n\nusing namespace std;\n\nstruct Point\n{\n\tint num[2],val;//num[0]\u5373x\uff0cnum[1]\u5373y\n\tPoint(){};\n\tPoint(int xx,int yy,int vall)\n\t{\n\t\tnum[0]=xx,num[1]=yy,val=vall;\n\t}\n}p[M];\n\nstruct kd_tree\n{\n\tint ch[2],minn[2],maxn[2],sum,size;//minn[0]\u5373minx\uff0cminn[1]\u5373miny\uff0cmaxn[0]\u5373maxx\uff0cmaxn[1]\u5373maxy\n\tPoint p;\n}t[M];\n\nconst double alpha=0.75;\n\nint fuck;\nint n,tot,root;\nint cnt,rubbish[M];\n\nbool cmp0(Point a,Point b)\n{\n\treturn a.num[0]<b.num[0];\n}\n\nbool cmp1(Point a,Point b)\n{\n\treturn a.num[1]<b.num[1];\n}\n\nint newnode()\n{\n\tif(cnt)return rubbish[cnt--];\n\treturn ++tot;\n}\n\nvoid up(int u)\n{\n\tfor(int i=0;i<2;i++)\n\t{\n\t\tt[u].minn[i]=t[u].maxn[i]=t[u].p.num[i];\n\t\tif(lc)\n\t\t{\n\t\t\tt[u].minn[i]=min(t[u].minn[i],t[lc].minn[i]);\n\t\t\tt[u].maxn[i]=max(t[u].maxn[i],t[lc].maxn[i]);\n\t\t}\n\t\tif(rc)\n\t\t{\n\t\t\tt[u].minn[i]=min(t[u].minn[i],t[rc].minn[i]);\n\t\t\tt[u].maxn[i]=max(t[u].maxn[i],t[rc].maxn[i]);\n\t\t}\n\t}\n\tt[u].sum=t[lc].sum+t[u].p.val+t[rc].sum;\n\tt[u].size=t[lc].size+t[rc].size+1;\n}\n\nvoid slap(int u)//\u628a\u6240\u6709\u7684\u70b9\u6254\u8fdb\u4e00\u4e2a\u6570\u7ec4\u91cc\n{\n\tif(!u) return;\n\tp[++fuck]=t[u].p;\n\trubbish[++cnt]=u;\n\tslap(lc);\n\tslap(rc);\n}\n\nint rebuild(int l,int r,int d)//\u66b4\u529b\u91cd\u6784\n{\n\tif(l>r) return 0;\n\tint mid=(l+r)>>1,u=newnode();\n\tnth_element(p+l,p+mid,p+r+1,d?cmp1:cmp0);\n\tt[u].p=p[mid];\n\tlc=rebuild(l,mid-1,d^1);\n\trc=rebuild(mid+1,r,d^1);\n\tup(u);\n\treturn u;\n}\n\nvoid check(int &u,int d)//\u68c0\u67e5\u662f\u5426\u4e0d\u5e73\u8861\n{\n\tif(t[lc].size>alpha*t[u].size||t[rc].size>alpha*t[u].size)\n\t{\n\t\tfuck=0;\n\t\tslap(u);\n\t\tu=rebuild(1,t[u].size,d);\n\t}\n}\n\nvoid insert(int &u,Point now,int d)\n{\n\tif(!u)\n\t{\n\t\tu=newnode();\n\t\tlc=rc=0,t[u].p=now;\n\t\tup(u);\n\t\treturn;\n\t}\n\tif(now.num[d]<=t[u].p.num[d]) insert(lc,now,d^1);//\u6309\u7167\u7b2cd\u7ef4\u7684\u5750\u6807\u6bd4\u8f83\n\telse insert(rc,now,d^1);\n\tup(u);\n\tcheck(u,d);\n}\n\nbool inside(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2)\n{\n\treturn x1<=X1&&x2>=X2&&y1<=Y1&&y2>=Y2;\n}\n\nbool outside(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2)\n{\n\treturn x1>X2||x2<X1||y1>Y2||y2<Y1;\n}\n\nint query(int u,int x1,int y1,int x2,int y2)\n{\n\tif(!u) return 0;\n\tif(inside(x1,y1,x2,y2,t[u].minn[0],t[u].minn[1],t[u].maxn[0],t[u].maxn[1])) //\u5224\u65ad\u5f53\u524d\u77e9\u5f62\u662f\u5426\u5b8c\u5168\u5728\u8be2\u95ee\u77e9\u5f62\u5185\n\t\treturn t[u].sum;\n\tif(outside(x1,y1,x2,y2,t[u].minn[0],t[u].minn[1],t[u].maxn[0],t[u].maxn[1])) //\u5224\u65ad\u5f53\u524d\u77e9\u5f62\u662f\u5426\u5b8c\u5168\u5728\u8be2\u95ee\u77e9\u5f62\u5916\n\t\treturn 0;\n\tint ans=0;\n\tif(inside(x1,y1,x2,y2,t[u].p.num[0],t[u].p.num[1],t[u].p.num[0],t[u].p.num[1])) //\u5982\u679c\u6839\u5728\u8be2\u95ee\u77e9\u5f62\u5185\n\t\tans+=t[u].p.val;\n\tans+=query(lc,x1,y1,x2,y2)+query(rc,x1,y1,x2,y2);//\u7edf\u8ba1\u5de6\u53f3\u5b50\u6811\u7684\u7b54\u6848\n\treturn ans;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint opt,lastans=0;\n\twhile(scanf(\"%d\",&opt))\n\t{\n\t\tif(opt==1)\n\t\t{\n\t\t\tint x,y,val;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&val);\n\t\t\tx^=lastans,y^=lastans,val^=lastans;\n\t\t\tinsert(root,Point(x,y,val),0);\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tint x1,y1,x2,y2;\n\t\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\t\tx1^=lastans,y1^=lastans,x2^=lastans,y2^=lastans;\n\t\t\tprintf(\"%d\\n\",lastans=query(root,x1,y1,x2,y2));\n\t\t}\n\t\tif(opt==3) break;\n\t}\n}\n```",
        "postTime": 1576898734,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4148 \u3010\u7b80\u5355\u9898\u3011"
    },
    {
        "content": "### \u5206\u5757+\u7ebf\u6bb5\u6811\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u6bd4K-Dtree\u7b80\u5355\u7684\u591a\u5427\u3002\u5bf9\u4e8e\u957f\u5ea6\u4e3an\u7684x\u8f74\u533a\u95f4\u8fdb\u884c\u5206\u5757\uff0c\u5bf9\u6bcf\u4e00\u5217\u548c\u6bcf\u4e00\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\u5f53\u524d\u5217\u548c\u5757\u7684\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u5bf9\u5757\u4e0a\u548c\u8fb9\u89d2\u4e0a\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u4e8c\u5206\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u590d\u6742\u5ea6\u80af\u5b9a\u5f88\u9ad8\uff0c\u8003\u8651\u5230\u4fee\u6539\u5341\u5206\u7a00\u758f\uff0c\u53ef\u4ee5\u7ed9\u7ebf\u6bb5\u6811\u5f00\u4e00\u4e2alazy\u6807\u8bb0\uff0c\u5bf9\u4e8e\u5b50\u6811\u5927\u5c0f\u53ea\u67091\u7684\u5b50\u6811\uff0c\u53ef\u4ee5\u5148\u4e0d\u5efa\u51fa\u6765\uff0c\u628a\u76ee\u6807\u70b9\u8bb0\u5f55\u5728lazy\u4e2d\uff0c\u4e8c\u5206\u662f\u9047\u5230lazy\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n\n\u4e0d\u7528O2\u4e5f\u53ef\u4ee5\u8fc7\n\n```cpp\n#include <bits/stdc++.h>\n#define mid ((l + r) >> 1)\n#define lc T[p].l\n#define rc T[p].r\n#define lb(x) (x & -x)\nusing namespace std;\ninline void read(int &x) {\n  x = 0; int f = 1; char ch = getchar();\n  while (!(ch >= '0' && ch <= '9')) { if (ch == '-') f = -1; ch = getchar(); }\n  while (ch >= '0' && ch <= '9') { x = (x << 3) + (x << 1) + ch - 48; ch = getchar(); }\n  x *= f;\n}\nconst int N = 5e5 + 10;\nconst int M = 1e6 + 10;\nint n, blo, bel[N], last, rt[N + 700], tot;\nstruct Node {int l, r, lz, val;} T[M];\ninline void pushdown(int p, int l, int r) {\n    if (T[p].lz) {\n        if (T[p].lz <= mid) lc = ++tot, T[lc].lz = T[p].lz, T[lc].val = T[p].val;\n        else rc = ++tot, T[rc].lz = T[p].lz, T[rc].val = T[p].val;\n        T[p].lz = 0;\n    }\n}\ninline void modify(int &p, int x, int v, int l = 1, int r = n) {\n    if (!p) {p = ++tot; T[p].lz = x; T[p].val = v; return;}\n    pushdown(p, l, r); T[p].val += v; //\u6ce8\u610f\u987a\u5e8f\n    if (l == r) return;\n    if (x <= mid) modify(lc, x, v, l, mid);\n    else modify(rc, x, v, mid + 1, r);\n}\ninline int query(int p, int x, int l = 1, int r = n) {\n    if (!p || !x) return 0;\n    if (l == r) return T[p].val;\n    if (T[p].lz) {return (x >= T[p].lz) * T[p].val;}\n    if (x <= mid) return query(lc, x, l, mid);\n    else return T[lc].val + query(rc, x, mid + 1, r);\n}\nint main() {\n    read(n);\n    blo = sqrt(n) * 1.5 + 2;\n    for (int i = 1; i <= n; i++) bel[i] = (i - 1) / blo + 1;\n    while (true){\n        int opt; read(opt);\n        if (opt == 3) break;\n        if (opt == 1) {\n            int x, y, v; read(x), read(y), read(v);\n            x ^= last, y ^= last, v ^= last;\n            modify(rt[x], y, v);\n            modify(rt[n + bel[x]], y, v);\n        } else {\n            int x1, y1, x2, y2; read(x1), read(y1), read(x2), read(y2);\n            x1 ^= last, y1 ^= last, x2 ^= last, y2 ^= last;\n            int mn = min(bel[x1] * blo, x2), ans = 0;\n            for (int i = x1; i <= mn; i++)\n                ans += query(rt[i], y2) - query(rt[i], y1 - 1);\n            if (bel[x1] != bel[x2])\n            for (int i = (bel[x2] - 1) * blo + 1; i <= x2; i++)\n                ans += query(rt[i], y2) - query(rt[i], y1 - 1);\n            for (int i = bel[x1] + 1; i <= bel[x2] - 1; i++)\n                ans += query(rt[i + n], y2) - query(rt[i + n], y1 - 1);\n            last = ans;\n            printf(\"%d\\n\", ans);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1552970324,
        "uid": 76226,
        "name": "yy1695651",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4148 \u3010\u7b80\u5355\u9898\u3011"
    },
    {
        "content": "# \u3010\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u3011K-D Tree\nK-D Tree \u662f\u7528\u6765\u89e3\u51b3K\u7ef4\u7a7a\u95f4\u4e2d\u6570\u70b9\u95ee\u9898\u5f3a\u6709\u529b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5728 $(NlogN)$ \u2014\u2014$(N\\sqrt{N})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u67e5\u8be2\u548c\u4fee\u6539\u3002\n## \u4e00\u3001K-D Tree\u7684\u505a\u6cd5\nK-D Tree\u5f53K\u7b49\u4e8e $1$ \u65f6\uff0c\u5c31\u662f\u4e00\u9897\u66ff\u7f6a\u7f8a\u6811\u6811\uff08\u5e73\u8861\u6811\u7684\u4e00\u79cd\uff09\u3002\n\u6211\u4eec\u628aK-D Tree\u6269\u5c55\u5230 $K$ \u7ef4\u7a7a\u95f4\u3002\nK-D Tree\u662f\u4e00\u9897\u6743\u503c\u6811\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u6811\u7684\u7ed3\u70b9\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b58\n```cpp\nstruct K_D_Tree{\n\tint l,r,sum,val,size,Min[K],Max[K],d[K];\n}tr[MAXN];\n```\n$l$ $r$ \u5206\u522b\u662f\u8be5\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\n\n$sum$ \u4e3a\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u533a\u95f4\u4e2d\u70b9\u6743\u4e4b\u548c\n\n$val$ \u4e3a\u8be5\u70b9\u6240\u5b58\u7684\u70b9\u7684\u70b9\u6743\n\n$size$ \u4e3a\u8be5\u6811\u4e3a\u6839\u7684\u6570\u4e2d\u7684\u70b9\u6570\n\n$Min[i]$ \u8868\u793a\u5728\u7b2c $i$ \u7ef4\u4e0a\u533a\u95f4\u7684\u4e0b\u754c\n\n$Max[i]$ \u8868\u793a\u5728\u7b2c $i$ \u7ef4\u4e0a\u533a\u95f4\u7684\u4e0a\u754c\n\n$d[i]$ \u8868\u793a\u8be5\u4f4d\u7f6e\u8868\u793a\u7684\u70b9\u7684\u7b2c $i$ \u7ef4\u7684\u5750\u6807\n\n### \u63d2\u5165\u64cd\u4f5c\n\u6211\u4eec\u5bf9\u4e8e\u6df1\u5ea6\u4e3a $i$ \u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u6309\u7167 \u7b2c $i%k$ \u7ef4\u7684\u5750\u6807\u6765\u6392\u5e8f\u3001\n\u7136\u540e\u5c31\u662f\u666e\u901a\u5e73\u8861\u6811\u7684\u63d2\u5165\u5373\u53ef\n\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a**\u5e73\u8861\u56e0\u5b50**\uff0c\u4e00\u822c\u8bbe\u5b9a\u4e3a &0.6~0.9$ \u4e4b\u95f4\n```cpp\nconst double alpha=0.75;\n```\n\u5f53\u5728\u63d2\u5165\u662f\u53d1\u73b0\u8981\u63d2\u5165\u7684\u5b50\u6811\u7684 $size$ \u6bd4\u6574\u68f5\u6811\u7684 $size$ \u7684 $alpha$ \u500d\u8981\u5927\uff0c\u5373\u53d1\u73b0\u6811\u4e0d\u5e73\u8861\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u91cd\u5efa\u8be5\u5b50\u6811\u3002\n\n### \u67e5\u8be2\u64cd\u4f5c\n\u76f4\u63a5\u5e73\u8861\u6811\u7684\u67e5\u8be2\u64cd\u4f5c\u5373\u53ef\n\n### \u5220\u9664\u64cd\u4f5c\n\u6211\u4eec\u76f4\u63a5\u5bf9\u8981\u5220\u9664\u7684\u70b9\u6253\u5220\u9664\u6807\u8bb0\uff0c\u5728\u63d2\u5165\u65f6\u518d\u5220\u9664\uff0c\u5728\u67e5\u8be2\u6216\u5220\u9664\u65f6\u65f6\u5982\u679c\u53d1\u73b0\u67d0\u9897\u5b50\u6811\u7684\u7684\u5220\u9664\u6807\u8bb0\u4e2a\u6570\u5927\u4e8e\u4e00\u4e2a\u5b9a\u503c\uff0c\u6211\u4eec\u5bf9\u4e8e\u8be5\u5b50\u6811\u66b4\u529b\u91cd\u6784\u5373\u53ef\u3002\n\n## \u4e8c\u3001K-D Tree\u7684\u51e0\u4f55\u6027\u8d28\n\n![312](https://img2018.cnblogs.com/blog/1552746/201812/1552746-20181217134935628-1037722984.png)\n\n\u53ef\u4ee5\u770b\u4e0a\u9762\u4e00\u4e2a\u4ee5 $k$ \u4e3a $2$ \u4e3a\u4f8b\u7684\u56fe\n\n$K-D Tree$ \u76f8\u5f53\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u5bf9\u4e8e\u5176\u7ba1\u8f96\u7684\u533a\u95f4\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u5206\u5272\u6210\u4e00\u534a\uff0c\u6700\u540e\u6574\u4e2a\u56fe\u88ab\u5206\u6210\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u4f46\u8fd9\u4e9b\u533a\u95f4\u7684\u5927\u5c0f\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u6240\u4ee5 $K-D Tree$ \u662f\u5f88\u5bb9\u6613\u88ab\u5361\u7684\u3002\n\n# \u6a21\u677f\u9898\uff1a\n\n\u4e09\u7ef4\u504f\u5e8f\uff1aP4148 \u7b80\u5355\u9898\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100010\nusing namespace std;\ninline int read ()\n{\n\tint s=0,w=1;\n\tchar ch=getchar ();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') w=-1;ch=getchar ();}\n\twhile ('0'<=ch&&ch<='9') s=(s<<1)+(s<<3)+(ch^48),ch=getchar ();\n\treturn s*w;\n}\nconst double alpha=0.75;\nconst int K=2;\nstruct K_D_Tree{\n\tint l,r,sum,val,size,Min[K],Max[K],d[K];\n}tr[MAXN];\nint n,ans,root,len;\nint p[K],q[K][2],A;\nint D,num,h[MAXN];\nbool cmp (const int &a,const int &b)\n{\n\treturn tr[a].d[D]<tr[b].d[D];\n}\ninline void update (int x)\n{\n\tint l=tr[x].l,r=tr[x].r;\n\ttr[x].size=tr[l].size+tr[r].size+1;\n\ttr[x].sum=tr[l].sum+tr[r].sum+tr[x].val;\n\tfor (int i=0;i<K;i++)\n\t{\n\t\tif (l) tr[x].Max[i]=max (tr[l].Max[i],tr[x].Max[i]),tr[x].Min[i]=min (tr[l].Min[i],tr[x].Min[i]);\n\t\tif (r) tr[x].Max[i]=max (tr[r].Max[i],tr[x].Max[i]),tr[x].Min[i]=min (tr[r].Min[i],tr[x].Min[i]);\n\t}\n}\ninline void build (int &x,int l,int r,int k)\n{\n\tif (l>r) return;\n\tint mid=(l+r)>>1;D=k;\n\tnth_element (h+l,h+mid+1,h+r+1,cmp);\n\tx=h[mid];\n\ttr[x].sum=tr[x].val;\n\tfor (int i=0;i<K;i++) tr[x].Max[i]=tr[x].Min[i]=tr[x].d[i];\n\tbuild (tr[x].l,l,mid-1,(k+1)%K);\n\tbuild (tr[x].r,mid+1,r,(k+1)%K);\n\tupdate (x);\n}\ninline void erase (int &x)\n{\n\tif (!x) return;\n\th[++num]=x;\n\terase (tr[x].l),erase (tr[x].r);\n\tx=0;\n}\ninline void rebuild (int &x,int k)\n{\n\th[num=1]=++len;\n\ttr[len].size=1;\n\tfor (int i=0;i<K;i++) tr[len].d[i]=p[i];\n\ttr[len].val=tr[len].sum=A;\n\terase (x),build (x,1,num,k);\n}\ninline void insert (int &x,int k)\n{\n\tif (!x)\n\t{\n\t\ttr[x=++len].size=1,tr[x].val=tr[x].sum=A;\n\t\tfor (int i=0;i<K;i++) tr[x].Max[i]=tr[x].Min[i]=tr[x].d[i]=p[i];\n\t\treturn;\n\t}\n\tif (p[k]<tr[x].d[k])\n\t{\n\t\tif (tr[tr[x].l].size>tr[x].size*alpha) rebuild (x,k);\n\t\telse insert (tr[x].l,(k+1)%K);\n\t}\n\telse\n\t{\n\t\tif (tr[tr[x].r].size>tr[x].size*alpha) rebuild (x,k);\n\t\telse insert (tr[x].r,(k+1)%K);\n\t}\n\tupdate (x);\n}\ninline bool check_range (int x)\n{\n\tif (!x) return 0;\n\tfor (int i=0;i<K;i++)\n\t\tif (q[i][0]>tr[x].Min[i]||q[i][1]<tr[x].Max[i]) return 0;\n\treturn 1;\n}\ninline bool check_point (int x)\n{\n\tif (!x) return 0;\n\tfor (int i=0;i<K;i++)\n\t\tif (tr[x].d[i]<q[i][0]||tr[x].d[i]>q[i][1]) return 0;\n\treturn 1;\n}\ninline bool check (int x)\n{\n\tif (!x) return 0;\n\tfor (int i=0;i<K;i++)\n\t\tif (q[i][1]<tr[x].Min[i]||q[i][0]>tr[x].Max[i]) return 0;\n\treturn 1;\n}\ninline void query (int x)\n{\n\tif (check_range (x))\n\t{\n\t\tans+=tr[x].sum;\n\t\treturn;\n\t}\n\tif (check_point (x)) ans+=tr[x].val;\n\tif (check (tr[x].l)) query (tr[x].l);\n\tif (check (tr[x].r)) query (tr[x].r);\n}\nint main()\n{\n\tn=read ();\n\twhile (1)\n\t{\n\t\tint opt=read ();\n\t\tif (opt==1)\n\t\t{\n\t\t\tfor (int i=0;i<K;i++) p[i]=read ()^ans;\n\t\t\tA=read ()^ans;\n\t\t\tinsert (root,0);\n\t\t}\n\t\tif (opt==2)\n\t\t{\n\t\t\tfor (int i=0;i<=1;i++)\n\t\t\t\tfor (int j=0;j<K;j++) q[j][i]=read ()^ans;\n\t\t\tans=0;query (root);\n\t\t\tprintf (\"%d\\n\",ans);\n\t\t}\n\t\tif (opt==3) break;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1545025210,
        "uid": 24024,
        "name": "Paul\u00b7Shi",
        "ccfLevel": 0,
        "title": "\u3010\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u3011K-D Tree"
    },
    {
        "content": "#### \u9898\u76ee\u540d\u5b57\u4e3a\u5565\u8981\u53eb~~\u7b80\u5355\u9898~~\n\n$K-Dtree$\u9898\u89e3\u3002\n\n\u9996\u5148\uff0c\u64cd\u4f5c\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7$20w$\u6b21\n\n\u90a3\u4e48\u610f\u5473\u7740\uff0c$n*n$\u7684\u77e9\u9635\u6709\u7edd\u5927\u90e8\u5206\u7684\u7a7a\u95f4\u662f\u88ab\u6d6a\u8d39\u6389\u7684\n\n\u8003\u8651\u600e\u4e48\u628a\u8fd9\u4e2a\u77e9\u9635\u4ece\u6211\u4eec\u7684\u8111\u6d77\u91cc\u62ff\u6389\n\n\u9996\u5148\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u65b0\u52a0\u5165\u4e00\u4e2a\u6570\n\n\u8fd9\u6837\u662f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5728\u8fd9\u4e2a$(x,y)$\u7684\u5730\u65b9\u6709\u4e24\u4e2a\u70b9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5$Insert$\u505a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\uff0c\u53ea\u6709\u5728\u90a3\u4e00\u4e2a\u77e9\u9635\u91cc\u9762\u7684\u70b9\u624d\u4f1a\u4ea7\u751f\u8d21\u732e\n\n$KDtree$\u7ef4\u62a4\u6bcf\u9897\u5b50\u6811\u7684\u6743\u503c\u548c\uff0c\u8986\u76d6\u7684\u6700\u5927\u77e9\u9635\n\n\u5bf9\u4e8e\u6574\u4e2a\u5b50\u6811\u90fd\u4e0d\u5728\u8be2\u95ee\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u8d21\u732e\n\n\u5bf9\u4e8e\u6574\u4e2a\u5b50\u6811\u5168\u5728\u8be2\u95ee\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u4e00\u5b9a\u4f1a\u4ea7\u751f\u8d21\u732e$te[x].tot$\n\n\u5c31\u8fd9\u6837\u4f9d\u6b21\u7edf\u8ba1\u7b54\u6848\n\n\u5982\u679c$Insert$\u5230\u6811\u4e0d\u5e73\u8861\u65f6\u91cd\u6784\u5373\u53ef\n\n\u76f8\u4fe1\u5927\u4f6c\u4eec\u90fd\u4f1a\uff0c\u5c31\u9171\n",
        "postTime": 1534689946,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4148 \u3010\u7b80\u5355\u9898\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u4e00\u4e0b\u6211\u4ecb\u7ecd K-D Tree \u7684[\u535a\u5ba2](https://www.cnblogs.com/Tenshi/p/15846105.html)\uff1a\n\n\n## \u6027\u8d28\n\n\u6811\u7684\u4e00\u68f5\u5b50\u6811\u53ef\u4ee5\u5212\u5206\u51fa\u4e00\u4e2a\u77e9\u5f62\uff08\u4e8c\u7ef4\uff09\u3002\u53ea\u8981\u6211\u4eec\u5c06\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u7ef4\u62a4\u8d77\u6765\uff0c\u90a3\u4e48\u77e9\u5f62\u7684**\u5de6\u4e0b\u7aef\u70b9**\u5c31\u662f\u6240\u6709\u70b9 $x,y$ \u5750\u6807\u7684\u6700\u5c0f\u503c\uff0c**\u53f3\u4e0a\u7aef\u70b9**\u5c31\u662f\u6240\u6709\u70b9 $x,y$ \u5750\u6807\u7684\u6700\u5927\u503c\u3002\n\n\n\n\n\n\n## \u5206\u6790\n\n\u64cd\u4f5c $1$ \u5c31\u662f $\\texttt{insert}$\uff0c\u4e5f\u5c31\u662f**\u63d2\u5165**\u64cd\u4f5c\uff0c\u548c\u666e\u901a\u7684**\u4e8c\u53c9\u641c\u7d22\u6811**\u7c7b\u4f3c\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6bd4\u8f83\uff0c\u51b3\u5b9a\u5411\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u79fb\u52a8\uff0c\u6700\u540e\u8d70\u5230\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u3002\n\n\u64cd\u4f5c $2$ \u662f\u5bf9**\u77e9\u5f62**\u8fdb\u884c\u8be2\u95ee\uff0c\u7531\u4e0a\u9762\u6240\u8bf4\u7684**\u6027\u8d28**\u3002\n\nK-D Tree \u7684\u5b50\u6811\u6b63\u597d\u53ef\u4ee5\u5212\u5206\u51fa\u4e00\u4e2a\u77e9\u5f62\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811**\u533a\u95f4\u67e5\u8be2**\u7684\u505a\u6cd5\uff1a\n\n- \u4ece\u6839\u8282\u70b9\u51fa\u53d1\u5f00\u59cb\u67e5\u8be2\u3002\n- \u5982\u679c\u5f53\u524d\u5b50\u6811\u6240\u5bf9\u5e94\u7684\u77e9\u5f62\u548c\u67e5\u8be2\u7684\u77e9\u5f62\u6ca1\u6709\u4ea4\u96c6\uff0c\u8fd4\u56de $0$\u3002\n- \u5982\u679c\u88ab\u5f53\u524d\u5b50\u6811\u6240\u5bf9\u5e94\u7684\u77e9\u5f62\u88ab\u67e5\u8be2\u7684\u77e9\u5f62\u5305\u542b\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u5b50\u6811\u7684\u6743\u503c\u548c $sum$\u3002\n- \u5426\u5219\u5411\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u7ee7\u7eed\u8be2\u95ee\u3002\n\n\n\n#### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define debug(x) cerr << #x << \": \" << (x) << endl\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define dwn(i,a,b) for(int i=(a);i>=(b);i--)\n\ninline void read(int &x){\n    int s=0; x=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') {if(ch=='-')x=-1;ch=getchar();}\n    while(ch>='0' && ch<='9') s=(s<<3)+(s<<1)+ch-'0',ch=getchar();\n    x*=s;\n}\n\nconst int N=5e5+5;\n\nstruct Point{\n\tint x[2], w;\n};\n\nstruct Node{\n\tint l, r;\n\tPoint P;\n\tint L[2], R[2], sum, sz;\n\t\n\t#define ls tr[u].l\n\t#define rs tr[u].r\n}tr[N];\n\nint n;\n\nint idx, root;\nint buf[N], tot;\nint add(){\n\tif(!tot) return ++idx;\n\treturn buf[tot--];\n}\n\nvoid pushup(int u){\n\tauto &L=tr[ls], &R=tr[rs];\n\ttr[u].sum=tr[u].P.w+L.sum+R.sum, tr[u].sz=L.sz+R.sz+1;\n\n\trep(i,0,1){\n\t\ttr[u].L[i]=min(tr[u].P.x[i], min(L.L[i], R.L[i]));\n\t\ttr[u].R[i]=max(tr[u].P.x[i], max(L.R[i], R.R[i]));\n\t}\n}\n\nconst double Al=0.72;\n\nPoint pt[N];\n\nvoid getSeq(int u, int cnt){\n\tif(ls) getSeq(ls, cnt);\n\tbuf[++tot]=u, pt[tr[ls].sz+1+cnt]=tr[u].P;\n\tif(rs) getSeq(rs, cnt+tr[ls].sz+1);\n}\n\nint rebuild(int l, int r, int k){\n\tif(l>r) return 0;\n\tint mid=l+r>>1;\n\tint u=add();\n\t\n\tnth_element(pt+l, pt+mid, pt+r+1, [&](Point a, Point b){\n\t\treturn a.x[k]<b.x[k];\n\t});\n\ttr[u].P=pt[mid];\n\t\n\tls=rebuild(l, mid-1, k^1), rs=rebuild(mid+1, r, k^1);\n\tpushup(u);\n\treturn u;\n}\n\nvoid maintain(int &u, int k){\n\tif(tr[u].sz*Al<tr[ls].sz || tr[u].sz*Al<tr[rs].sz)\n\t\tgetSeq(u, 0), u=rebuild(1, tot, k);\t\n}\n\nvoid insert(int &u, Point p, int k){\n\tif(!u){\n\t\tu=add();\n\t\ttr[u].l=tr[u].r=0;\n\t\ttr[u].P=p, pushup(u);\n\t\treturn;\n\t}\n\tif(p.x[k]<=tr[u].P.x[k]) insert(ls, p, k^1);\n\telse insert(rs, p, k^1);\n\tpushup(u);\n\tmaintain(u, k);\n}\n\nbool In(Node t, int x1, int y1, int x2, int y2){\n\treturn t.L[0]>=x1 && t.R[0]<=x2 && t.L[1]>=y1 && t.R[1]<=y2;\t\n}\n\nbool In(Point p, int x1, int y1, int x2, int y2){\n\treturn p.x[0]>=x1 && p.x[0]<=x2 && p.x[1]>=y1 && p.x[1]<=y2;\n}\n\nbool Out(Node t, int x1, int y1, int x2, int y2){\n\treturn t.R[0]<x1 || t.L[0]>x2 || t.R[1]<y1 || t.L[1]>y2;\t\n}\n\nint query(int u, int x1, int y1, int x2, int y2){\n\tif(In(tr[u], x1, y1, x2, y2)) return tr[u].sum;\n\tif(Out(tr[u], x1, y1, x2, y2)) return 0;\n\t\n\tint res=0;\n\tif(In(tr[u].P, x1, y1, x2, y2)) res+=tr[u].P.w;\n\tres+=query(ls, x1, y1, x2, y2)+query(rs, x1, y1, x2, y2);\n\treturn res;\n}\n\nint main(){\n\tcin>>n;\n\t// init\n\ttr[0].L[0]=tr[0].L[1]=N+5;\n\ttr[0].R[0]=tr[0].R[1]=-1;\n\t\n\tint res=0, op;\n\twhile(cin>>op, op!=3){\n\t\tif(op==1){\n\t\t\tint x, y, k; read(x), read(y), read(k);\n\t\t\tinsert(root, {x^res, y^res, k^res}, 0);\n\t\t}\t\n\t\telse{\n\t\t\tint x1, y1, x2, y2; read(x1), read(y1), read(x2), read(y2);\n\t\t\tcout<<(res=query(root, x1^res, y1^res, x2^res, y2^res))<<endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n",
        "postTime": 1643171581,
        "uid": 138960,
        "name": "Tenshi",
        "ccfLevel": 0,
        "title": "P4148 \u7b80\u5355\u9898(K-D Tree)"
    },
    {
        "content": "# K-D Tree\n\nK-D Tree \u662f\u4e00\u79cd\u5177\u5907 BST \u5f62\u6001\u7684\u7ef4\u62a4 $k$ \u7ef4\u7a7a\u95f4\u4e0a\u70b9\u7684\u4fe1\u606f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\n\n\u5176\u540d\u79f0 \u201cK-D\u201d \u4e5f\u662f\u53d6 $k$ \u7ef4\u7a7a\u95f4\u8fd9\u4e2a\u610f\u4e49\n\n\u5728\u8282\u70b9\u6570 $n >> 2^k$ \u65f6\uff0c K-D Tree \u7684\u8fd0\u884c\u6548\u7387\u4f18\u79c0\n\n\u5355\u6b21\u64cd\u4f5c\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^{1-\\frac{1}{k}})$ \u7684\n\n\u601d\u7ef4\u6e05\u6670\u3001\u4ee3\u7801\u6e05\u65b0\u7684 K-D Tree \u5728\u8fd9\u6837\u7684\u81ea\u8eab\u60c5\u51b5\u4e0b\u4e0d\u5931\u4e3a\u4e00\u4e2a\u826f\u597d\u7684\u89e3\u51b3\u95ee\u9898\u7684\u5de5\u5177\uff0c\u6709\u7684\u9898\u76ee\u751a\u81f3\u9700\u8981\u4f9d\u8d56 K-D Tree \u624d\u80fd\u89e3\u51b3\uff0c\u800c\u6709\u7684\u9898\u76ee\u5219\u53ef\u4ee5\u5229\u7528\u5176\u53d6\u5f97\u4e00\u5b9a\u90e8\u5206\u5206\n\n## \u5efa\u6811\n\nK-D Tree \u7ef4\u62a4\u7684\u8282\u70b9\u7684\u4f4d\u7f6e\u3001\u6743\u503c\u4fe1\u606f\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u7531\u9898\u76ee\u7ed9\u51fa\uff0c\u6240\u4ee5\u5728\u4e0b\u9762\u7684\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u8282\u70b9\u7684\u7f16\u53f7\u548c\u8bfb\u5165\u987a\u5e8f\u4e00\u81f4\uff0c\u9700\u8981\u989d\u5916\u5c06\u8bfb\u5165\u7684\u6570\u636e\u5b58\u50a8\u4e0b\u6765\n\n\u4e0b\u9762\u6240\u8bf4 \u201c\u7f16\u53f7\u201d \u7edf\u4e00\u5148\u884c\u6307\u660e\u662f\u8bfb\u5165\u987a\u5e8f\u7f16\u53f7\n\nK-D Tree \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\n\n`int build (int l, int r)`\n\n\u6211\u4eec\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\uff0c\u9700\u8981\u5b9e\u73b0\uff1a\n\n+ \u6784\u5efa\u4e00\u9897\u7531\u7f16\u53f7 $l..r$ \u8282\u70b9 K-D Tree\n\n+ \u6784\u5efa\u597d\u8282\u70b9\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\n\n\u58f0\u660e\uff1a\n\n+ \u201c\u5f53\u524d\u8282\u70b9\u201d\u6307 `build` \u51fd\u6570\u7684\u8fd4\u56de\u503c\n\n+ $l..r$ \u7684\u6240\u6709\u8282\u70b9\u5728\u6784\u5efa\u5b8c\u6210\u540e\u6784\u6210\u201c\u5f53\u524d\u8282\u70b9\u201d\u4e3a\u6839\u7684\u5b50\u6811\n\n**\u6838\u5fc3\u601d\u60f3\uff1a\u6839\u636e\u67d0\u4e00\u7ef4\u5ea6\u8fdb\u884c\u5212\u5206**\n\n\u6211\u4eec\u8003\u8651 $d$ \u8868\u793a\u5f53\u524d\u8282\u70b9 **\u6309\u7167 $d$ \u8fd9\u4e00\u7ef4\u5ea6\u8fdb\u884c\u5212\u5206** \uff0c\u5177\u4f53\u5730\uff0c $d$ \u8fd9\u4e00\u7ef4\u5ea6\u4e0a\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u8282\u70b9\u4f5c\u4e3a\u5176\u5de6\u5b50\u6811\uff0c\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u8282\u70b9\u4f5c\u4e3a\u5176\u53f3\u5b50\u6811\uff0c\u518d\u5206\u522b\u9012\u5f52\u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u6784\u5efa\n\n### \u65b9\u5dee\u4f18\u5316\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4ee5\u4e0a\u6784\u5efa\u65b9\u6cd5\u4fdd\u8bc1\u4e86 K-D Tree \u5177\u6709 BST \u7684\u6027\u8d28\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u63d0\u51fa\u4e24\u4e2a\u4f18\u5316\u65b9\u6848\uff0c\u4ee5\u4fdd\u8bc1 K-D Tree \u5177\u6709\u6b63\u786e\u7684\u590d\u6742\u5ea6\n\n\u9996\u5148\u662f **\u65b9\u5dee\u4f18\u5316**\n\n\u6211\u4eec\u8ba1\u7b97\u5f53\u524d $l..r$ \u7684\u8282\u70b9\u5206\u522b\u5728 $k$ \u4e2a\u7ef4\u5ea6\u4e0a\u5750\u6807\u7684\u65b9\u5dee\uff0c\u53d6\u65b9\u5dee\u6700\u5927\u7684\u4e00\u7ef4\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684 $d$\n\n### \u4e2d\u4f4d\u6570\u4f18\u5316\n\n\u53d6\u5f97 $d$ \u540e\uff0c\u6211\u4eec\u4e0d\u4efb\u610f\u53d6\u5f53\u524d\u8282\u70b9\uff0c\u800c\u662f\u5c06 $d$ \u7ef4\u4e0a\u5750\u6807\u7684\u4e2d\u4f4d\u6570\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\n\n\u7531\u4ee5\u4e0a\u4e24\u4e2a\u4f18\u5316\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1 K-D Tree \u7684\u9ad8\u5ea6\u6700\u9ad8\u662f $O(n^{1-\\frac{1}{k}})$ \u7684\uff0c\u7531\u6b64\u505a\u5230\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u6b63\u786e\n\n\u5efa\u6811\u90e8\u5206\u5230\u6b64\u5b9e\u73b0\n\n## \u63d2\u5165\n\n`void ins (int & x, int v)`\n\n\u63d2\u5165\u7f16\u53f7\u4e3a $v$ \u7684\u8282\u70b9\uff0c\u5f53\u524d\u5728 K-D Tree \u7684 $x$ \u53f7\u8282\u70b9\n\n\u6211\u4eec\u67e5\u770b $d[x]$ \uff0c\u6309\u7167 $d[x]$ \u8fd9\u4e00\u7ef4\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u7b49\u4e8e $t[x][d[x]]$ \u5c31\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u5426\u5219\u9012\u5f52\u53f3\u5b50\u6811\n\n$t$ \u6570\u7ec4\u662f\u5750\u6807\u6570\u7ec4\n\n## \u5220\u9664\n\n\u9700\u8981\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u4eff\u7167 `ins` \u5148\u627e\u5230\u8be5\u8282\u70b9\uff0c\u7136\u540e\u6253\u4e0a\u4e00\u4e2a $deltag$ \uff0c\u7b49\u5230\u6211\u4eec\u53d1\u73b0\u4e00\u9897\u5b50\u6811\u91cc $deltag$ \u7684\u6570\u76ee\u5360\u6bd4\u8d85\u8fc7\u4e00\u4e2a\u9608\u503c\u65f6\uff0c\u6211\u4eec\u5bf9\u6574\u9897\u5b50\u6811\u76f4\u63a5\u91cd\u6784\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5220\u9664\u64cd\u4f5c\n\n\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684 $lazytag$ \u64cd\u4f5c\n\n## \u91cd\u6784\n\n\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u9608\u503c $REVAL$ \u8868\u793a\uff1a\n\n+ \u5982\u679c\u67d0\u79cd\u6bd4\u4f8b\u8d85\u8fc7\u4e86 $REVAL$ \uff0c\u90a3\u4e48\u8fdb\u884c\u91cd\u6784\u64cd\u4f5c\n\n\u4e00\u822c\u6765\u8bf4\uff0c $REVAL$ \u5e76\u4e0d\u9700\u8981\u592a\u5c0f\uff0c\u5b9a\u5728 $0.7 \\sim 0.8$ \u5c31\u53ef\u4ee5\u4e86\n\n### \u4e00\u822c\u91cd\u6784\n\n\u6211\u4eec\u5982\u679c\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u6811\u5728\u6574\u9897\u5b50\u6811\u79cd\u5360\u6bd4\u8d85\u8fc7\u4e86 $REVAL$ \uff0c\u90a3\u4e48\u91cd\u6784\n\n`void rebuild (int & x)`\n\n\u9996\u5148\uff0c\u5c06\u5b50\u6811\u538b\u6210\u5e8f\u5217\uff0c\u53ea\u9700\u904d\u5386\u6574\u9897\u5b50\u6811\uff0c\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\u8fdb\u5165\u4e00\u4e2a $g$ \u6570\u7ec4\u5373\u53ef\n\n\u7136\u540e\uff0c\u5047\u8bbe\u6700\u7ec8\u53d1\u73b0\u5b50\u6811\u91cc\u6709 $tot$ \u4e2a\u8282\u70b9\uff0c\u76f4\u63a5 `build (1, tot)` \u5373\u53ef\uff0c\u6ce8\u610f\u6b64\u65f6 `build` \u51fd\u6570\u5185\u90e8\u5728\u9700\u8981\u8c03\u7528\u7f16\u53f7\u7684\u65f6\u5019\u90fd\u662f\u7528 `g[i]` \u4ee3\u66ff `i`\n\n### \u5220\u9664\u91cd\u6784\n\n\u4e0e\u4e00\u822c\u91cd\u6784\u7c7b\u4f3c\u5730\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u7279\u6b8a\u5224\u65ad\u4e00\u4e0b\u6709 $deltag$ \u7684\u8282\u70b9\u4e0d\u52a0\u5165 $g$ \u5373\u53ef\n\n## \u9886\u57df\u67e5\u8be2\n\n\u8fd9\u91cc\u8fdb\u884c\u7684\u5b9a\u4e49\u53ea\u662f\u81ea\u5df1\u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\u6240\u505a\u51fa\u7684 `#define`\n\n\u4e00\u4e2a\u8282\u70b9\u7684 **\u9886\u57df** \u5373\u6574\u4e2a\u4ee5\u5176\u4e3a\u6839\u7684\u5b50\u6811\u6240\u88ab\u5305\u542b\u7684\u8d85\u957f\u65b9\u4f53\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4 $trge[d][0/1]$ \u8868\u793a $d$ \u7ef4\u4e0a\u6700\u5c0f\u6700\u5927\u503c\u662f\u591a\u5c11\uff0c\u4ee5\u6b64\u7ef4\u62a4\u51fa\u5b50\u6811\u7684\u8d85\u957f\u65b9\u4f53\n\n\u8fd9\u4e2a\u5728 `pushup` \u4e2d\u5bb9\u6613\u7ef4\u62a4\n\n\u7531\u6b64\uff0c\u6211\u4eec\u4e5f\u80fd\u770b\u51fa\uff0c K-D Tree \u5177\u6709\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u7684\u80fd\u529b\uff0c\u5177\u6709\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\n\n\u67e5\u8be2\u9886\u57df\u65f6\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8be2\u95ee\u9886\u57df\u4e0e\u5f53\u524d\u8282\u70b9\u9886\u57df\u662f\u5426\u76f8\u79bb\u3001\u5185\u542b\uff0c\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u4f5c\u51fa\u4e0d\u540c\u5e94\u5bf9\u5373\u53ef\n\n\u8fd9\u90e8\u5206\u5341\u5206\u7c7b\u4f3c\u7ebf\u6bb5\u6811\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u4e86\u89e3\u4e86 K-D Tree \u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u5e76\u4e14\u6211\u4eec\u53d1\u73b0\u4e86 K-D Tree \u548c BST \u4ee5\u53ca SegmentTree \u7684\u76f8\u4f3c\u4e4b\u5904\n\n## \u4e60\u9898\n\n\u9996\u5148\u662f\u53ef\u4ee5\u89c6\u4e3a\u6a21\u677f\u9898\u7684 [P4148](https://www.luogu.com.cn/problem/P4148)\n\n\u5355\u70b9\u52a0\u3001\u9886\u57df\u67e5\uff0c 2-D Tree \u6a21\u677f\n\n\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784\u505a\uff0c\u4e0d\u5bf9 K-D Tree \u4f5c\u5c24\u5176\u9650\u5236\n\n\u4e0a\u6587\u7684\u89e3\u91ca\u5df2\u7ecf\u8db3\u4ee5\u89e3\u51b3\u672c\u9898\uff0c\u4e8e\u662f\u653e\u4e0a\u4ee3\u7801\u4fbf\u5229\u5bf9\u4e0a\u6587\u7684\u7406\u89e3\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <iostream>\n#include <math.h>\nusing namespace std;\nconst int N = 200010;\nint n, op, x[N], y[N], xf, yf, xs, ys, v[N], cur;\nint siz[N], sum[N], d[N], lc[N], rc[N], L[N], R[N], U[N], D[N];\nint g[N], tot, lst, RT;\ndouble REVAL = 0.725;\nint min (int x, int y) {return (x > y) ? y : x;}\nint max (int x, int y) {return (x > y) ? x : y;}\nbool cmp1 (int p, int q) {return x[p] < x[q];}\nbool cmp2 (int p, int q) {return y[p] < y[q];}\nvoid pushup (int o) {\n\tsiz[o] = siz[lc[o]] + siz[rc[o]] + 1;\n\tsum[o] = sum[lc[o]] + sum[rc[o]] + v[o];\n\tL[o] = R[o] = x[o];\n\tU[o] = D[o] = y[o];\n\tif (lc[o]) {\n\t\tL[o] = min (L[o], L[lc[o]]), R[o] = max (R[o], R[lc[o]]);\n\t\tD[o] = min (D[o], D[lc[o]]), U[o] = max (U[o], U[lc[o]]);\n\t}\n\tif (rc[o]) {\n\t\tL[o] = min (L[o], L[rc[o]]), R[o] = max (R[o], R[rc[o]]);\n\t\tD[o] = min (D[o], D[rc[o]]), U[o] = max (U[o], U[rc[o]]);\n\t}\n}\nint build (int l, int r) {\n\tif (l > r) return 0;\n\tint mid = (l + r) >> 1;\n\tdouble a1 = 0, a2 = 0, v1 = 0, v2 = 0;\n\tfor (int i=l;i<=r;i++) a1 += x[g[i]], a2 += y[g[i]];\n\ta1 /= 1.0 * (r - l + 1); a2 /= 1.0 * (r - l + 1);\n\tfor (int i=l;i<=r;i++) v1 += pow (x[g[i]] - a1, 2), v2 += pow (y[g[i]] - a2, 2);\n\tif (v1 > v2) nth_element (g + l, g + mid, g + r + 1, cmp1), d[g[mid]] = 1;\n\telse nth_element (g + l, g + mid, g + r + 1, cmp2), d[g[mid]] = 2;\n\tlc[g[mid]] = build (l, mid - 1); rc[g[mid]] = build (mid + 1, r);\n\tpushup (g[mid]); return g[mid];\n}\nvoid plain (int o) {\n\tif (! o) return ;\n\tplain (lc[o]);\n\tg[++ tot] = o;\n\tplain (rc[o]);\n}\nvoid rebuild (int & o) {\n\ttot = 0; plain (o);\n\to = build (1, tot);\n}\nbool bad (int o) {\n\treturn REVAL * siz[o] <= (double) max (siz[lc[o]], siz[rc[o]]);\n}\nvoid ins (int & o, int v) {\n\tif (! o) {\n\t\to = v;\n\t\tpushup (o);\n\t\treturn ;\n\t}\n\tif (d[o] == 1) {\n\t\tif (x[v] <= x[o]) ins (lc[o], v);\n\t\telse ins (rc[o], v);\n\t} else {\n\t\tif (y[v] <= y[o]) ins (lc[o], v);\n\t\telse ins (rc[o], v);\n\t}\n\tpushup (o);\n\tif (bad (o)) rebuild (o);\n}\nbool out (int o) {\n\tif (L[o] > xs) return 1;\n\tif (R[o] < xf) return 1;\n\tif (D[o] > ys) return 1;\n\tif (U[o] < yf) return 1;\n\treturn 0;\n}\nbool in (int o) {\n\tif (L[o] >= xf && R[o] <= xs && D[o] >= yf && U[o] <= ys) return 1;\n\treturn 0;\n}\nint que (int o) {\n\tif (! o || out (o)) return 0;\n\tif (in (o)) return sum[o];\n\tint ret = 0;\n\tif (x[o] >= xf && x[o] <= xs && y[o] >= yf && y[o] <= ys) ret += v[o];\n\treturn que (lc[o]) + que (rc[o]) + ret;\n}\ntemplate <typename T> void read (T & x) {\n\tx = 0; char c = getchar ();\n\twhile (c < 48 || c > 57) c = getchar ();\n\twhile (c >= 48 && c <= 57) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar ();\n}\nvoid write (int x) {\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + 48);\n}\nint main () {\n\tread (n);\n\twhile (233) {\n\t\tread (op); if (op == 3) break ;\n\t\tif (op == 1) {\n\t\t\tcur ++;\n\t\t\tread (x[cur]); read (y[cur]); read (v[cur]);\n\t\t\tx[cur] ^= lst; y[cur] ^= lst; v[cur] ^= lst;\n\t\t\tins (RT, cur);\n\t\t} else {\n\t\t\tread (xf); read (yf); read (xs); read (ys);\n\t\t\txf ^= lst; yf ^= lst; xs ^= lst; ys ^= lst;\n\t\t\tif (xf > xs) swap (xf, xs);\n\t\t\tif (yf > ys) swap (yf, ys);\n\t\t\tlst = que (RT);\n\t\t\twrite (lst); putchar ('\\n');\n\t\t}\n\t}\n}\n```\n\n\u672c\u9898\u4e0d\u9700\u8981\u7279\u6b8a\u5361\u5e38\uff0c\u8ba4\u771f\u4e66\u5199\u5373\u53ef\n\n## \u6ce8\u610f\u4e8b\u9879\n\n\u5305\u62ec oi-wiki \u5728\u5185\u8bb8\u591a\u5730\u65b9\u90fd\u6709\u63d0\u5230 K-D Tree \u67e5\u8be2\u6700\u8fd1\u6700\u8fdc\u70b9\n\n\u4f46\u5b9e\u9645\u4e0a K-D Tree \u7684\u7ed3\u6784\u786e\u5b9e\u6ca1\u6709\u9002\u5e94\u8fd9\u7c7b\u95ee\u9898\n\n\u800c\u4e14\u8fd9\u7c7b\u95ee\u9898\u5df2\u7ecf\u6709\u53e6\u5916\u7684\u505a\u6cd5\u4f53\u7cfb\n\n\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u7565\u53bb\u8fd9\u4e00\u90e8\u5206\u7684\u5b66\u4e60\u4e0e\u7b14\u8bb0\uff0c\u5e76\u4e14\u505a\u51fa\u63d0\u793a\uff1a K-D Tree \u89e3\u51b3\u90e8\u5206\u8fd9\u7c7b\u95ee\u9898\u53ef\u80fd\u53ef\u4ee5\uff0c\u4f46\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u4f5c\u4e3a\u6b63\u89e3\u51fa\u73b0",
        "postTime": 1643163949,
        "uid": 228720,
        "name": "Dementor",
        "ccfLevel": 0,
        "title": "K-D Tree \u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "K-D tree \u662f\u53ef\u4ee5\u9ad8\u6548\u5904\u7406 $k$ \u7ef4\u7a7a\u95f4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0coi \u4e2d\uff0c\u4e00\u822c $k=2$\u3002\n\n\u82e5\u5df2\u77e5 $k$ \u7ef4\u7a7a\u95f4\u4e2d\u7684 $n$ \u4e2a\u70b9\u5750\u6807\uff0c\u5c06\u5176\u6784\u5efa\u6210\u4e00\u68f5 K-D tree\uff0c\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1. \u82e5\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u8fd4\u56de\u8fd9\u4e2a\u70b9\u3002\n\n2. \u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5c06\u5f53\u524d\u70b9\u96c6\u6309\u7167\u8fd9\u4e2a\u7ef4\u5ea6\u5206\u6210\u4e24\u4e2a\u70b9\u96c6\u3002\n\n3. \u9009\u5207\u5272\u70b9\uff0c\u5728\u9009\u62e9\u7684\u7ef4\u5ea6\u4e0a\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e00\u7ef4\u5ea6\u4e0a\u7684\u503c\u5c0f\u4e8e\u8fd9\u4e2a\u70b9\u7684\u5f52\u5165\u5de6\u5b50\u6811\uff0c\u5176\u4f59\u5f52\u5165\u53f3\u5b50\u6811\u3002\n\n4. \u5c06\u9009\u62e9\u7684\u70b9\u4f5c\u4e3a\u8fd9\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u5e76\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u5927\u6982\u957f\u6210\u8fd9\u6837\uff1a\uff08\u56fe\u6765\u81ea oi-wiki\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9oc6zusm.png)\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6cq7ikki.png)\n\n\n\u4e3a\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u5207\u5272\u7ef4\u5ea6\u53ef\u4ee5\u9009\u62e9\u65b9\u5dee\u6700\u5927\u7684\u7ef4\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u968f\u673a\u9009\u4e00\u4e2a\u7ef4\u5ea6\u3002\u7b2c\u4e09\u6b65\u9009\u5207\u5272\u70b9\u7684\u65f6\u5019\u9009\u62e9\u8be5\u7ef4\u5ea6\u7684\u4e2d\u4f4d\u6570\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5c42\u6570\u3002\n\n\u7b2c\u4e09\u6b65\u6709\u4e2a\u597d\u7528\u7684\u51fd\u6570 `nth_element(s+1,s+mid,s+r+1,cmp);` \u53ef\u4ee5\u627e\u5230 `s[l]` \u5230 `s[r]` \u4e4b\u95f4\u503c\u6309 `cmp` \u6392\u5e8f\u540e\u518d `s[mid]` \u5904\u7684\u503c\uff0c\u5e76 `s[mid]` \u5de6\u8fb9\u5747\u5c0f\u4e8e `s[mid]`\uff0c\u53f3\u8fb9\u5747\u5927\u4e8e\u3002\n\n\u5982\u679c\u7ef4\u62a4\u7684 k \u7ef4\u70b9\u96c6\u4e3a\u53ef\u53d8\u7684\uff0c\u63d2\u5165\u5220\u9664\u70b9\u540e\u4e3a\u4fdd\u6301\u5e73\u8861\uff0c\u9700\u8981\u91cd\u6784\uff0c\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u91cd\u6784\u5e38\u6570\n$\\alpha$\uff0c\u5982\u679c $\\alpha \\cdot size(x) \\le \\max(size(lc[x]),size(rc[x]))$\uff0c\u90a3\u4e48\u91cd\u6784\u8fd9\u68f5\u5b50\u6811\u3002\u91cd\u6784\u7684\u65f6\u5019\u5148\u7528\u4e2d\u5e8f\u904d\u5386\u53d6\u51fa\u5b50\u6811\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u6309\u7167\u4e0a\u8ff0\u56db\u4e2a\u6b65\u9aa4\u6784\u5efa\u5373\u53ef\u3002\n\n***\n\n### P4148 \u7b80\u5355\u9898\n\n\u76f4\u63a5\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define fi first\n#define se second\n// #define endl '\\n'\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef long double db;\ntypedef pair<db, db> pdd;\n\nconst int inf = 2e9;\nconst db eps = 1e-6;\nconst int N = 200005;\n\n\nint rt,tot;\ndb e = 0.75;\nstruct kdt{\n    int l,r,u,d; // \u4e0a\u4e0b\u5de6\u53f3\u7684\u8fb9\u754c\n    int sum,ls,rs,sz;  // \u548c\uff0c\u5de6\u53f3\u513f\u5b50,size\n    int x,y,v; // \u5f53\u524d\u70b9\u6a2a\u7eb5\u5750\u6807\n    int pd; // \u54ea\u4e00\u7ef4\n    #define l(x) t[x].l\n    #define r(x) t[x].r\n    #define u(x) t[x].u\n    #define d(x) t[x].d\n    #define ls(x) t[x].ls\n    #define rs(x) t[x].rs\n    #define sz(x) t[x].sz\n    #define sum(x) t[x].sum\n}t[N];\n\nvoid push_up(int x){\n    sum(x) = sum(ls(x))+sum(rs(x))+t[x].v; // \u548c\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u548c\u548c\u81ea\u5df1\n    sz(x) = sz(ls(x))+sz(rs(x))+1;\n    l(x) = r(x) = t[x].x; // \u521d\u503c\u4e3a\u5f53\u524d\u70b9\n    d(x) = u(x) = t[x].y;\n    if (ls(x)){ // \u5982\u679c\u6709\u5de6\u5b50\u6811\uff0c\u66f4\u65b0\n        l(x) = min(l(x), l(ls(x))); r(x) = max(r(x), r(ls(x)));\n        d(x) = min(d(x), d(ls(x))); u(x) = max(u(x), u(ls(x)));\n    }\n    if (rs(x)){\n        l(x) = min(l(x), l(rs(x))); r(x) = max(r(x), r(rs(x)));\n        d(x) = min(d(x), d(rs(x))); u(x) = max(u(x), u(rs(x)));\n    }\n}\n\nbool bad(int x){\n    if ((db)max(sz(ls(x)),sz(rs(x))) > (db)sz(x)*e) return 1; // \u5f53\u524d\u5b50\u6811\u9700\u8981\u91cd\u6784\n    return 0;\n}\n\nint g[N], num;\nvoid print(int x){ // \u4e2d\u5e8f\u904d\u5386\u53d6\u51fa\u5b50\u6811\u6240\u6709\u8282\u70b9\n    if (!x) return;\n    print(ls(x));\n    g[++num] = x;\n    print(rs(x));\n}\n\nbool cmpx(int a, int b){return t[a].x < t[b].x;}\nbool cmpy(int a, int b){return t[a].y < t[b].y;}\n\nvoid build(int &x, int l, int r){\n    if (l > r){ // \u5f53\u524d\u8282\u70b9\u5e8f\u5217\u6ca1\u6570\u4e86\uff0c\u8fd4\u56de\u7a7a\n        x = 0;\n        return;\n    }\n    db v1 = 0, v2 = 0, av1 = 0, av2 = 0;\n    for (int i = l; i <= r; i++){\n        av1 += t[g[i]].x;\n        av2 += t[g[i]].y;\n    }\n    av1 /= (r-l+1); av2 /= (r-l+1);\n    for (int i = l; i <= r; i++){\n        v1 += (av1-t[g[i]].x)*(av1-t[g[i]].x);\n        v2 += (av2-t[g[i]].y)*(av2-t[g[i]].y);\n    } // \u8ba1\u7b97\u65b9\u5dee\n    \n    int mid = l+r>>1;\n    if (v1 > v2){\n        nth_element(g+l,g+mid,g+r+1,cmpx); // \u53d6\u51fa\u7ef4\u5ea6 x \u7684\u4e2d\u4f4d\u6570\u5f53\u505a\u65b0\u5b50\u6811\u7684\u6839\n        t[g[mid]].pd = 1; // \u6b64\u8282\u70b9\u5207\u5272\u7ef4\u5ea6\u4e3a x \n    }else{\n        nth_element(g+l,g+mid,g+r+1,cmpy);\n        t[g[mid]].pd = 2;\n    }\n    x = g[mid];\n    build(ls(x), l, mid-1);\n    build(rs(x), mid+1,r);\n    push_up(x);\n}\nvoid rebuild(int &x){ // \u91cd\u6784\u5b50\u6811\n    num = 0;\n    print(x);\n    build(x,1,num);\n}\nvoid insert(int &x, int v){\n    if (!x){\n        x = v;\n        push_up(x);\n        return;\n    }\n    if (t[x].pd == 1){ // \u6309 x \u4e00\u7ef4\u63d2\u5165\n        if (t[v].x <= t[x].x) insert(ls(x),v);\n        else insert(rs(x),v);\n    }\n    else{\n        if (t[v].y <= t[x].y) insert(ls(x),v);\n        else insert(rs(x), v);\n    }\n    push_up(x);\n    if (bad(x)) rebuild(x);\n}\n\n\nint query(int x, int l, int r, int d, int u){\n    if (!x || r < l(x) || l > r(x) || u < d(x) || d > u(x)) return 0; // \u4e0d\u5728\u5f53\u524d\u77e9\u5f62\u91cc\u9762\uff0c\u8fd4\u56de\n    if (l <= l(x) && r >= r(x) && d <= d(x) && u >= u(x)) return sum(x);//\u5305\u542b\u5f53\u524d\u77e9\u5f62\uff0c\u8fd4\u56de\n    int res = 0;\n    if (t[x].x >= l && t[x].x <= r && t[x].y >= d && t[x].y <= u) res = t[x].v; // \u5f53\u524d\u70b9\u5728\u8be2\u95ee\u8303\u56f4\u5185\n    return res+query(ls(x), l,r,d,u)+query(rs(x),l,r,d,u);\n}\nint n,lst;\nsigned main(){\n\n    // freopen(\"a.in\",\"r\",stdin);\n    ios::sync_with_stdio(false); cin.tie(0u); cout.tie(0u);\n    cin >> n;\n    while(1){\n        int op;\n        cin >> op;\n        if (op == 3) break;\n        if (op == 1){\n            tot++;\n            cin >> t[tot].x >> t[tot].y >> t[tot].v;\n            t[tot].x ^= lst;\n            t[tot].y ^= lst;\n            t[tot].v ^= lst;\n            insert(rt,tot);\n        }else{\n            int l,d,r,u;\n            cin >> l >> d >> r >> u;\n            l ^= lst; d ^= lst;\n            r ^= lst; u ^= lst;\n            cout << (lst=query(rt,l,r,d,u)) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1671783828,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "k-d tree"
    },
    {
        "content": "[\u6b64\u9898](/problem/P4148)\u662f\u51fa\u4e86\u540d\u7684\u795e\u5947\uff0c\u4e00\u4e2a\u5f3a\u5236\u5728\u7ebf\u5361\u6389\u4e86 CDQ \u5206\u6cbb\uff0c\u4e00\u4e2a\u5185\u5b58 20MB \u5361\u6389\u4e86\u6811\u5957\u6811\uff0c\u53ea\u80fd\u4f7f\u7528 K-D Tree \u6216\u8005\u65f6\u95f4\u4e0d\u591f\u4f18\u79c0\u7684\u5206\u5757\u6765\u89e3\u51b3\u6b64\u9898\u3002\n\n\u6b64\u9898\u662f\u5173\u4e8e K-D Tree \u7684\u52a8\u6001\u63d2\u5165\uff0c\u8fd8\u662f\u8981\u901a\u8fc7\u4e0a\u4e0b\u754c\u6765\u526a\u679d\u3002\n\nK-D Tree \u5982\u4f55\u8fdb\u884c\u52a8\u6001\u63d2\u5165\uff1f\u9996\u5148\uff0c\u6211\u4eec\u8981\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u6307\u5b9a\u4e00\u4e2a $Type$\uff0c$Type=1$ \u8868\u793a\u4ee5 $x$ \u4e3a\u6807\u51c6\u5efa\u6811\uff0c\u5426\u5219\u8868\u793a\u4ee5 $y$ \u4e3a\u6807\u51c6\u5efa\u6811\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a $size$\uff0c\u5f53\u67d0\u4e00\u4e2a\u513f\u5b50\u7684 $size$ \u8d85\u8fc7\u4e86\u7236\u4eb2\u7684 $size* a$\uff0c\u5219\u7236\u4eb2\u9700\u8981\u91cd\u6784\uff0c\u6bcf\u6b21\u63d2\u5165\u5982\u679c\u6709\u8282\u70b9\u9700\u8981\u91cd\u6784\uff0c\u9009\u53d6\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\u3002$a$ \u4e3a\u91cd\u6784\u6307\u6570\uff0c\u4e00\u822c\u53d6 $0.75$\u3002\n\n\u901a\u8fc7\u4e0a\u4e0b\u754c\u526a\u679d\uff0c\u4e0d\u96be\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nchar buf[1<<23],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<22,stdin),p1==p2))?EOF:*p1++\ninline int read(){\n\tint an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n\tdo an=an*10+c-'0';while(isdigit(c=gc));return an*f;\n}\nint mx[N],my[N],md[N],lx[N],ly[N],rx[N],ry[N],stk[N],t,Root;\nint lc[N],rc[N],d[N],siz[N],Need_Rebuild,NodeTp,ans_data;\nstruct Node{int x,y,d;}a[N];\nbool Tp[N],nowTp;\ninline bool cmpx(const Node &x,const Node &y){return x.x<y.x;}\ninline bool cmpy(const Node &x,const Node &y){return x.y<y.y;}\ninline int New(int id){\n\tint x=stk[t--];lx[x]=rx[x]=mx[x]=a[id].x;md[x]=d[x]=a[id].d;\n\tly[x]=ry[x]=my[x]=a[id].y;siz[x]=1;return x;\n}\nbool Ins(int &x){\n\tif(x==0){Tp[x=New(0)]=nowTp^=1;return 1;}d[x]+=a[0].d;\n\tif(mx[x]==a[0].x&&my[x]==a[0].y){md[x]+=a[0].d;return 0;}\n\tlx[x]=min(lx[x],a[0].x);ly[x]=min(ly[x],a[0].y);\n\trx[x]=max(rx[x],a[0].x);ry[x]=max(ry[x],a[0].y);bool res;\n\tif((Tp[x]&&a[0].x<mx[x])||((!Tp[x])&&a[0].y<my[x])){\n\t\tif((res=Ins(lc[x]))&&siz[lc[x]]>siz[rc[x]]*3+3)Need_Rebuild=x;\n\t}else{\n\t\tif((res=Ins(rc[x]))&&siz[rc[x]]>siz[lc[x]]*3+3)Need_Rebuild=x;\n\t}siz[x]+=res;return res;\n}\ninline void Maintain(int x){\n\tif(lc[x])lx[x]=min(lx[x],lx[lc[x]]),ly[x]=min(ly[x],ly[lc[x]]),d[x]+=d[lc[x]],\n\trx[x]=max(rx[x],rx[lc[x]]),ry[x]=max(ry[x],ry[lc[x]]),siz[x]+=siz[lc[x]];\n\tif(rc[x])lx[x]=min(lx[x],lx[rc[x]]),ly[x]=min(ly[x],ly[rc[x]]),d[x]+=d[rc[x]],\n\trx[x]=max(rx[x],rx[rc[x]]),ry[x]=max(ry[x],ry[rc[x]]),siz[x]+=siz[rc[x]];\n}\nvoid GetNode(const int &x){\n\tif(lc[x])GetNode(lc[x]);\n\ta[++NodeTp]={mx[x],my[x],md[x]};\n\tif(rc[x])GetNode(rc[x]);\n\tstk[++t]=x;return;\n}\nvoid asks(int x){\n\tif(lx[x]>=lx[0]&&rx[x]<=rx[0]&&ly[x]>=ly[0]&&ry[x]<=ry[0]){ans_data+=d[x];return;}\n\tif(lx[0]>rx[x]||rx[0]<lx[x]||ly[0]>ry[x]||ry[0]<ly[x])return;\n\tif(mx[x]>=lx[0]&&mx[x]<=rx[0]&&my[x]>=ly[0]&&my[x]<=ry[0])ans_data+=md[x];\n\tif(lc[x])asks(lc[x]);if(rc[x])asks(rc[x]);return;\n}\ndouble px,py,fx,fy;\n#define P(x) ((x)*(x))\nint build(int l,int r){\n\tif(r<l)return 0;int mid=l+((r-l)>>1),x;px=py=fx=fy=0;\n\tfor(x=l;x<=r;++x)px+=a[x].x,py+=a[x].y;px/=r-l+1,py/=r-l+1;\n\tfor(x=l;x<=r;++x)fx+=P(px-a[x].x),fy+=P(py-a[x].y);\n\tif(fx>fy)nth_element(a+l,a+mid,a+r+1,cmpx);\n\telse nth_element(a+l,a+mid,a+r+1,cmpy);\n\tTp[x=New(mid)]=fx>fy;lc[x]=build(l,mid-1);\n\trc[x]=build(mid+1,r);Maintain(x);return x;\n}\n#undef P\nint main(){\n\tint opt=read();\n\tfor(opt=N-1;opt;--opt)stk[++t]=opt;\n\tfor(opt=read();opt!=3;opt=read())\n\t\tif(opt==1){\n\t\t\ta[0]={read()^ans_data,read()^ans_data,read()^ans_data};\n\t\t\tNeed_Rebuild=0;Ins(Root);if(Need_Rebuild){\n\t\t\t\tNodeTp=0;GetNode(Need_Rebuild);build(1,NodeTp);\n\t\t\t}\n\t\t}else{\n\t\t\tlx[0]=read()^ans_data,ly[0]=read()^ans_data;\n\t\t\trx[0]=read()^ans_data,ry[0]=read()^ans_data;\n\t\t\tans_data=0;asks(Root);printf(\"%d\\n\",ans_data);\n\t\t}\n\treturn 0;\n}\n```\n\n\u8fd9\u9898\u6570\u636e\u6c34\u5c31\u4e0d\u8981\u8bf4\u4e86\uff0c\u6ce8\u610f\u66ff\u7f6a\u7f8a\u5f0f\u91cd\u6784\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u662f\u8d85\u8fc7\u4e86 $O(\\sqrt n)$ \u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u4f7f\u7528 $\\text{Big-small K-D Tree}$\uff0c\u5373\u6709\u4e00\u5927\u4e00\u5c0f\u4e24\u68f5 $\\text{K-D Tree}$\uff0c\u6bcf\u6b21\u5728\u5c0f\u6811\u63d2\u5165\uff0c\u66ff\u7f6a\u7f8a\u5f0f\u91cd\u6784\uff0c\u5f53\u5c0f\u6811\u7684\u5927\u5c0f\u8fbe\u5230 $\\sqrt n\\log_2n$ \u65f6\uff0c\u5c06\u4e24\u68f5\u6811\u66b4\u529b\u5408\u5e76\uff0c\u8fd9\u6837\u4f9d\u65e7\u4fdd\u8bc1\u4e86\u63d2\u5165\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(n\\sqrt n)$\uff0c\u4f46\u5b9e\u9645\u901f\u5ea6\u6ca1\u6709\u4e4b\u524d\u90a3\u6837\u5feb\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nnamespace fast_io{\n    char bf[N+2],*p1,*p2,c,ob[N+58];\n#define gc (p1==p2&&(p2=(p1=bf)+fread(bf,1,N,stdin),p1==p2))?EOF:*p1++\ntemplate<typename _Tp>\n    inline void read(_Tp &x){\n        for(c=gc;c<48;c=gc);\n        for(x=0;c>47;x=x*10+(48^c),c=gc);\n    }\ntemplate<typename _Tp,typename..._tps>\n    inline void read(_Tp&x,_tps&...y){\n        read(x),read(y...);\n    }\n    int st[58],t,ot;\ntemplate<typename _Tp>\n    inline void write(_Tp x){\n        if(x<0)ob[ot++]='-',x=-x;\n        while(x>9)st[++t]=48^(x%10),x/=10;\n        for(ob[ot++]=48^x;t;ob[ot++]=st[t--]);\n        ob[ot++]='\\n';\n        if(ot>N)fwrite(ob,1,ot,stdout),ot=0;\n    }\n    inline void fls(){fwrite(ob,1,ot,stdout),ot=0;}\n}using fast_io::read;\nusing fast_io::write;\nint L[N][10],t[N][2],rt,_rt,p[N],pt,cnt,ans;\n//my(x,y),mn(x,y),mx(x,y),sz,my,sm\n#define X(x) L[x][0]\n#define Y(x) L[x][1]\n#define mnx(x) L[x][2]\n#define mny(x) L[x][3]\n#define mxx(x) L[x][4]\n#define mxy(x) L[x][5]\n#define sz(x) L[x][6]\n#define my(x) L[x][7]\n#define sm(x) L[x][8]\n#define TP(x) L[x][9]\n#define ls t[x][0]\n#define rs t[x][1]\nvoid flget(int &x){\n    if(ls)flget(ls);\n    if(rs)flget(rs);\n    mxx(x)=mnx(x)=X(x);\n    mxy(x)=mny(x)=Y(x);\n    sz(x)=1,sm(x)=my(x);\n    p[++pt]=x,x=0;\n}\ndouble _p[4];\nmt19937 rg(167772161);\nvoid reb(int &x,int l,int r){\n    int i,md=l+r>>1,tps;\n    _p[0]=_p[1]=_p[2]=_p[3]=0;\n    for(i=l;i<=r;++i)_p[0]+=L[p[i]][0],_p[1]+=L[p[i]][1];\n    _p[0]/=r-l+1,_p[1]/=r-l+1;\n    #define pp(k) (_p[k]-L[p[i]][k])\n    for(i=l;i<=r;++i)_p[2]+=pp(0)*pp(0),_p[3]+=pp(1)*pp(1);\n    tps=_p[3]>_p[2];\n    nth_element(p+l,p+md,p+r+1,[&](int x,int y){\n        return L[x][tps]<L[y][tps];\n    }),x=p[md],TP(x)=tps;\n    if(l<md){\n        reb(ls,l,md-1);\n        mxx(x)=max(mxx(x),mxx(ls));\n        mnx(x)=min(mnx(x),mnx(ls));\n        mxy(x)=max(mxy(x),mxy(ls));\n        mny(x)=min(mny(x),mny(ls));\n        sz(x)+=sz(ls),sm(x)+=sm(ls);\n    }if(md<r){\n        reb(rs,md+1,r);\n        mxx(x)=max(mxx(x),mxx(rs));\n        mnx(x)=min(mnx(x),mnx(rs));\n        mxy(x)=max(mxy(x),mxy(rs));\n        mny(x)=min(mny(x),mny(rs));\n        sz(x)+=sz(rs),sm(x)+=sm(rs);\n    }\n}\nvoid ins(int &x,int tps=0,int de=0){\n    if(!x){x=cnt,TP(x)=rg()&1;return;}\n    int k=L[cnt][TP(x)]>L[x][TP(x)];\n    ins(t[x][k],TP(x)^1,de+1);\n    if(sz(t[x][k])>sz(t[x][!k])*3+3){\n        pt=0,flget(x),reb(x,1,pt);\n    }else {\n        ++sz(x),sm(x)+=my(cnt);\n        mxx(x)=max(mxx(x),X(cnt));\n        mnx(x)=min(mnx(x),X(cnt));\n        mxy(x)=max(mxy(x),Y(cnt));\n        mny(x)=min(mny(x),Y(cnt));\n    }\n}int _cnt;\nvoid qry(int x){++_cnt;\n    if(mxx(x)<mnx(0)||mnx(x)>mxx(0)||mxy(x)<mny(0)||mny(x)>mxy(0))return;\n    if(mxx(x)<=mxx(0)&&mnx(x)>=mnx(0)&&mxy(x)<=mxy(0)&&mny(x)>=mny(0))ans+=sm(x);\n    else{\n        if(X(x)>=mnx(0)&&X(x)<=mxx(0)&&Y(x)>=mny(0)&&Y(x)<=mxy(0))ans+=my(x);\n        if(ls)qry(ls);if(rs)qry(rs);\n    }\n}\nint main(){\n    int op;read(op),read(op);\n    while(op!=3){\n        if(op==1){\n            ++cnt,read(X(cnt),Y(cnt),sm(cnt));\n            X(cnt)^=ans,Y(cnt)^=ans,sm(cnt)^=ans;\n            mxx(cnt)=mnx(cnt)=X(cnt);\n            mxy(cnt)=mny(cnt)=Y(cnt);\n            sz(cnt)=1,my(cnt)=sm(cnt),ins(_rt);\n            if(sz(_rt)>70000){\n                pt=0;if(rt)flget(rt);\n                flget(_rt),reb(rt,1,pt);\n            }\n        }else{_cnt=0;\n            read(mnx(0),mny(0),mxx(0),mxy(0));\n            mnx(0)^=ans,mny(0)^=ans,mxx(0)^=ans,mxy(0)^=ans;\n            ans=0;if(rt)qry(rt);\n            // cerr<<\"cnt1:\"<<_cnt<<endl;_cnt=0;\n            if(_rt)qry(_rt);\n            write(ans);\n            // cerr<<\"cnt2:\"<<_cnt<<endl;\n        }read(op);\n    }fast_io::fls();\n    return 0;\n}\n```",
        "postTime": 1637285310,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "K-D Tree\uff0c\u7ebf\u6027\u7a7a\u95f4\u5728\u7ebf\u4e8c\u7ef4\u6570\u70b9"
    },
    {
        "content": "## \u9898\u610f\n\n\u4e8c\u7ef4\u5355\u70b9\u52a0\uff0c\u77e9\u5f62\u67e5\u8be2\uff0c\u5f3a\u5236\u5728\u7ebf\uff0c\u7a7a\u95f4 20MB\u3002\n\n## \u505a\u6cd5\n\nkd-tree \u4e0d\u591a\u7684\u8fd8\u575a\u5b88\u7684\u677f\u5b50\u9898\uff0c\u4e00\u4e2a\u5f3a\u5236\u5728\u7ebf\u5361\u6389 cdq \u5206\u6cbb\uff0c\u4e00\u4e2a\u7a7a\u95f4 20MB \u5361\u6389\u6811\u5957\u6811\u548c\u6734\u7d20\u5206\u5757\uff0c\u5206\u5757\u5957\u7ebf\u6bb5\u6811\u8981\u591a $\\log$\u3002\n\n\u4f46\u662f\u559c\u62a5\uff1a\u6709 $O(m\\sqrt n+n\\sqrt m)$ \u7684\u505a\u6cd5\u8fc7\u6389\u8fd9\u9898\u3002\n\n\u9996\u5148\u5bf9\u64cd\u4f5c\u6309 $B_1$ \u5206\u5757\uff0c\u6839\u53f7\u91cd\u6784\uff0c\u540c\u4e00\u4e2a\u5757\u5185\u7684\u4fee\u6539\u66b4\u529b\u67e5\uff0c\u5757\u5916\u7684\u7528\u5206\u5757\u5904\u7406\u3002\n\n\u628a $x$ \u8f74\u6309 $B$ \u5206\u5757\uff0c\u4e00\u4e2a\u8be2\u95ee\u53ef\u4ee5\u67e5\u5206\u4e3a $l$ \u5230 $r$ \u4e2d $y\\le maxn$ \u7684\u503c\u3002\n\n\u6563\u5757\u4e2d\u8fd8\u662f\u66b4\u529b\u67e5\uff0c$O(B)$\uff0c\u6574\u5757\u4e2d\u6392\u5e8f+\u524d\u7f00\u548c+\u4e8c\u5206\u53ef\u4ee5 $O(B\\log n)$ \u67e5\u8be2\u3002\n\n\u4f46\u662f\u8fd9\u8fd8\u6ca1\u5b8c\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u90fd\u5bf9\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4\u53d6 lower_bound\uff0c\u60f3\u5230\u5206\u6563\u5c42\u53e0\uff0c\u5355\u6b21\u67e5\u8be2 $O(\\log n+\\frac{n}{B})$\u3002\n\n\u5269\u4e0b\u7684\u662f\u91cd\u6784\u90e8\u5206\uff0c\u5206\u6563\u5c42\u53e0\u672c\u8eab\u7684\u9884\u5904\u7406\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u95ee\u9898\u5728\u4e8e\u6bcf\u6b21\u90fd\u8981\u5bf9\u5757\u5185\u91cd\u65b0\u6392\u5e8f\uff0c\u4e00\u6b21\u5904\u7406\u662f $O(n\\log n)$ \u7684\uff0c\u5e76\u4e14\u4e0d\u5747\u644a\uff0c\u8003\u8651\u53ea\u6392\u5e8f\u65b0\u7684\u90e8\u5206\uff0c\u548c\u539f\u6709\u7684\u90e8\u5206 merge \u8d77\u6765\u4ecd\u7136\u6709\u5e8f\uff0c\u5747\u644a $O(n\\log n)$\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7684\u590d\u6742\u5ea6\u662f\uff1a$O(m)$ \u6b21\u67e5\u8be2\uff0c\u5757\u5185 $O(B_1)$\uff0c\u5757\u5916 $O(\\log n+B)$\uff0c$O(\\frac{m}{B_1})$ \u6b21\u91cd\u6784\uff0c\u6bcf\u6b21\u590d\u6742\u5ea6 $O(n)$\uff0csort \u5747\u644a $O(n\\log n)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\times(B_1+B+\\log n+\\frac{n}{B})+\\frac{m}{B_1}\\times n+n\\log n)$\uff0c$B,B_1$ \u5747\u53d6 $\\sqrt n$ \u5f97 $O(m\\sqrt n)$\u3002\n\n\u4f46\u5b9e\u9645\u4e0a $B$ \u53d6 $\\sqrt n$\uff0c$B_1$ \u53d6 $\\sqrt m$ \u5f97 $O(m\\sqrt n+n\\sqrt m)$ \u66f4\u5feb\uff0c\u4e14\u7531\u4e8e\u91cd\u6784\u65f6\u4f7f\u7528 stl \u591a\uff0c\u5e38\u6570\u5927\uff0c$B,B_1$ \u8981\u5206\u522b\u5f00\u5927\u4e00\u4e9b\u3002\n\n## \u4ee3\u7801\n```cpp\nbool M1;\nconst int N=5e5+5;\nconst int M=2e5+5;\nconst int B=360;\nint n,m,len,len1,ans;\nint b[N];\nint opt[M],x[M],y[M],s[M],t[M];\nstruct node{\n\tint x,y,val,sum;\n\tnode(int _x=0,int _y=0,int _val=0):x(_x),y(_y),val(_val){}\n\tbool operator < (const node &_)const{return y<_.y;}\n};\nvector<node> v[B],a[B],tmp;\nstruct Node{\n\tint y,id,nxt;\n\tNode(int _y=0,int _id=0,int _nxt=0):y(_y),id(_id),nxt(_nxt){}\n\tbool operator < (const Node &_)const{return y<_.y;}\n};\nvector<Node> fs[B];\ninline void Merge(vector<Node> a,vector<Node> b,vector<Node> &c){\n\tc.clear();\n\tint i=0,j=0,lena=a.size(),lenb=b.size();\n\twhile(i<lena&&j<lenb){\n\t\tif(a[i].y<=b[j].y) c.emplace_back(a[i].y,i,j),++i;\n\t\telse c.emplace_back(b[j].y,i,j),j+=2;\n\t}\n\tj=min(j,lenb);\n\twhile(i<lena) c.emplace_back(a[i].y,i,j),++i;\n\twhile(j<lenb) c.emplace_back(b[j].y,i,j),j+=2;\n}\ninline void build(int l,int r){\n\tF(i,l,r) if(opt[i]==1) a[b[x[i]]].emplace_back(x[i],y[i],s[i]);\n\tF(i,1,b[n]){\n\t\tif(a[i].empty()) continue;\n\t\tsort(a[i].begin(),a[i].end());\n\t\ttmp.resize(a[i].size()+v[i].size());\n\t\tmerge(a[i].begin(),a[i].end(),v[i].begin(),v[i].end(),tmp.begin());\n\t\tv[i]=tmp;\n\t\tv[i][0].sum=v[i][0].val;\n\t\tF(j,1,v[i].size()-1) v[i][j].sum=v[i][j-1].sum+v[i][j].val;\n\t\ta[i].clear();tmp.clear();\n\t}\n\tF(i,1,b[n]){\n\t\tfs[i].resize(v[i].size());\n\t\tF(j,0,(int)fs[i].size()-1) fs[i][j]=Node(v[i][j].y,j,0);\n\t}\n\tF(i,2,b[n]) Merge(fs[i],fs[i-1],fs[i]);\n}\ninline int get_val(int l,int r,int y){\n\tint id=lower_bound(fs[r].begin(),fs[r].end(),Node(y,0,0))-fs[r].begin(),res=0;\n\tUF(i,r,l){\n\t\tif(id&&fs[i][id-1].y>=y) --id;\n\t\tif(id==fs[i].size()||fs[i][id].id==v[i].size()){\n\t\t\tif(!v[i].empty()) res+=v[i].back().sum;\n\t\t}else if(fs[i][id].id) res+=v[i][fs[i][id].id-1].sum;\n\t\tif(id==fs[i].size()) id=fs[i-1].size();\n\t\telse id=fs[i][id].nxt;\n\t}\n\treturn res;\n}\ninline int query(int l,int r,int y,int id){\n\tint bl=b[l],br=b[r],res=0;\n\tif(bl==br){\n\t\tfor(node tmp:v[bl]) if(l<=tmp.x&&tmp.x<=r&&tmp.y<=y) res+=tmp.val;\n\t\treturn res;\n\t}\n\tfor(node tmp:v[bl]) if(l<=tmp.x&&tmp.y<=y) res+=tmp.val;\n\tfor(node tmp:v[br]) if(tmp.x<=r&&tmp.y<=y) res+=tmp.val;\n\treturn res+get_val(bl+1,br-1,y+1);\n}\ninline int ask(int i){\n\tint b=(i-1)/len1+1,res=0;\n\tF(j,(b-1)*len1+1,i) if(opt[j]==1&&x[i]<=x[j]&&x[j]<=s[i]&&y[i]<=y[j]&&y[j]<=t[i]) res+=s[j];\n\treturn res;\n}\nbool M2;\nint main(){\n\tint Time=clock();\n\tlook_memory;\n\tn=read();\n\twhile(++m){\n\t\topt[m]=read();\n\t\tif(opt[m]==1) x[m]=read(),y[m]=read(),s[m]=read();\n\t\tif(opt[m]==2) x[m]=read(),y[m]=read(),s[m]=read(),t[m]=read();\n\t\tif(opt[m]==3) break;\n\t}\n\t--m;\n\tlen=2*sqrt(n);len1=2*sqrt(m);\n\tF(i,1,n) b[i]=(i-1)/len+1;\n\tF(i,1,m){\n\t\tif(opt[i]==1) x[i]^=ans,y[i]^=ans,s[i]^=ans;\n\t\telse{\n\t\t\tx[i]^=ans;y[i]^=ans;s[i]^=ans;t[i]^=ans;\n\t\t\tcout<<(ans=ask(i)+query(x[i],s[i],t[i],i)-query(x[i],s[i],y[i]-1,i))<<'\\n';\n\t\t}\n\t\tif(!(i%len1)) build(i-len1+1,i);\n\t}\n\tlook_time;\n\treturn 0;\n}\n```",
        "postTime": 1684227856,
        "uid": 406832,
        "name": "Mikefeng",
        "ccfLevel": 7,
        "title": "P4148"
    },
    {
        "content": "\u8003\u8651 K-D Tree\u3002              \n\n\u6211\u4eec\u5728\u5efa\u597d K-D Tree \u540e\u8003\u8651\u4f18\u5316\u6211\u4eec\u7684\u66b4\u529b\u67e5\u627e\u3002        \n\n\u6211\u4eec\u5728\u67e5\u627e\u65f6\u770b\u4e00\u4e2a\u5b50\u6811\u7684\u77e9\u5f62\u662f\u5426\u548c\u5f53\u524d\u67e5\u627e\u7684\u77e9\u5f62\u6709\u4ea4\uff0c\u6ca1\u6709\u5c31\u76f4\u63a5\u4e0d\u7ba1\uff1b\u6709\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u77e9\u5f62\u5c31\u76f4\u63a5\u8fd4\u56de\u77e9\u5f62\u5185\u7684\u6240\u6709\u70b9\u548c\u5c31\u597d\u4e86\u3002                   \n\n\u5426\u5219\u6211\u4eec\u5c31\u770b\u5f53\u524d\u70b9\u5728\u4e0d\u5728\u77e9\u5f62\u5185\uff0c\u6709\u7684\u8bdd\u5c31\u8981\u628a\u5b83\u7684\u8d21\u732e\u52a0\u4e0a\uff0c\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u627e\u3002             \n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728 K-D Tree \u7684\u67e5\u627e\u4e2d\uff0c\u5982\u679c\u6240\u6709\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u77e9\u5f62\u4e0d\u518d\u5f80\u4e0b\u8d70\u5355\u6b21\u6700\u4e0d\u7406\u60f3\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n ^ {1 - \\frac{1}{k}})$ \uff0c\u6700\u7406\u60f3\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log n)$ \uff0c\u4e8e\u662f\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002              \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 5e5 + 5;\nconst double a = 0.6;\nint rt,cur,n,m,X[Len][2],Y[Len][2],lc[Len],rc[Len],xl,yl,xr,yr,sum[Len],siz[Len],d[Len];\nint g[Len],t;\nstruct node\n{\n\tint x,y,w;\n}s[Len];\nbool cmpx(int x,int y){return s[x].x < s[y].x;}\nbool cmpy(int x,int y){return s[x].y < s[y].y;}\nvoid Print(int x)\n{\n\tif(!x) return;\n\tPrint(lc[x]);\n\tg[++ t] = x;\n\tPrint(rc[x]);\n}\nvoid push_Up(int x,int y)\n{\n\tX[x][0] = min(X[x][0] , X[y][0]);\n\tX[x][1] = max(X[x][1] , X[y][1]);\n\tY[x][0] = min(Y[x][0] , Y[y][0]);\n\tY[x][1] = max(Y[x][1] , Y[y][1]);\n}\nvoid maintain(int x)\n{\n\tsum[x] = sum[lc[x]] + sum[rc[x]] + s[x].w;\n\tsiz[x] = siz[lc[x]] + siz[rc[x]] + 1;\n\tX[x][0] = X[x][1] = s[x].x;\n\tY[x][0] = Y[x][1] = s[x].y;\n\tif(lc[x]) push_Up(x , lc[x]);\n\tif(rc[x]) push_Up(x , rc[x]);\n}\nint Sqrt(int x){return x * x;}\nint build(int l,int r)\n{\n\tif(l > r) return 0;\n\tint mid = (l + r) >> 1;\n\tdouble avx = 0 , avy = 0 , vax = 0 , vay = 0;\n\tfor(int i = l ; i <= r ; i ++) avx += s[g[i]].x , avy += s[g[i]].y;\n\tavx = avx / (1.0 * (r - l + 1));\n\tavy = avy / (1.0 * (r - l + 1));\n\tfor(int i = l ; i <= r ; i ++) vax += Sqrt(s[g[i]].x - avx) , vay += Sqrt(s[g[i]].x - avy);\n\tif(vax >= vay) d[g[mid]] = 1 , nth_element(g + l , g + mid , g + r + 1 , cmpx);\n\telse d[g[mid]] = 2 , nth_element(g + l , g + mid , g + r + 1 , cmpy);\n\tlc[g[mid]] = build(l , mid - 1) , rc[g[mid]] = build(mid + 1 , r);\n\tmaintain(g[mid]);\n\treturn g[mid];\n}\nvoid rebuild(int &x)\n{\n\tt = 0;\n\tPrint(x);\n\tx = build(1 , t);\n}\ninline bool IsF(int x){return 1.0 * a * siz[x] <= (double)max(siz[lc[x]] , siz[rc[x]]);}\nvoid ins(int &x,int v)\n{\n\tif(!x)\n\t{\n\t\tx = v;\n\t\tmaintain(x);\n\t\treturn;\n\t}\n\tif(d[x] == 1) \n\t{\n\t\tif(s[v].x <= s[x].x) ins(lc[x] , v);\n\t\telse ins(rc[x] , v);\n\t}\n\telse\n\t{\n\t\tif(s[v].y <= s[x].y) ins(lc[x] , v);\n\t\telse ins(rc[x] , v);\n\t}\n\tmaintain(x);\n\tif(IsF(x)) rebuild(x);\n}\nint query(int x)\n{\n\tif(!x || xr < X[x][0] || xl > X[x][1] || yr < Y[x][0] || yl > Y[x][1]) return 0;\n\tif(xl <= X[x][0] && X[x][1] <= xr && yl <= Y[x][0] && Y[x][1] <= yr) return sum[x];\n\tint ret = 0;\n\tif(xl <= s[x].x && s[x].x <= xr && yl <= s[x].y && s[x].y <= yr) ret = s[x].w;\n\treturn query(lc[x]) + query(rc[x]) + ret; \n}\nint main()\n{\n\tscanf(\"%d\",&n);int lstans = 0;int opt;\n\twhile(1)\n\t{\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tcur ++;scanf(\"%d %d %d\",&s[cur].x,&s[cur].y,&s[cur].w);\n\t\t\ts[cur].x ^= lstans , s[cur].y ^= lstans , s[cur].w ^= lstans;\n\t\t\tins(rt , cur);\n\t\t}\n\t\telse if(opt == 2)\n\t\t{\n\t\t\tscanf(\"%d %d %d %d\",&xl,&yl,&xr,&yr);\n\t\t\txl ^= lstans , yl ^= lstans , xr ^= lstans , yr ^= lstans;\n\t\t\tprintf(\"%d\\n\",lstans = query(rt));\n\t\t}\n\t\telse if(opt == 3) break;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1626092200,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4148 \u7b80\u5355\u9898"
    }
]