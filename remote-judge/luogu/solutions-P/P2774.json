[
    {
        "content": "\u9650\u5236\u6761\u4ef6\u662f\u2014\u2014\u5982\u679c\u8981\u53d6\u67d0\u4e00\u4e2a\u65b9\u683c\uff0c\u90a3\u4e48\u7981\u6b62\u53d6\u76f8\u90bb\u7684**\u56db\u4e2a**\u65b9\u683c\uff0c\u4e0d\u9650\u5236**\u5176\u5b83\u6240\u6709**\u65b9\u683c\u3002\n\n\u6240\u4ee5\u731c\u6d4b\uff0c\u4ece\u7981\u6b62\u7684\u89d2\u5ea6\u8003\u8651\u624d\u4f1a\u66f4\u9ad8\u6548\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u9009\u4e2d\u6240\u6709\u65b9\u683c\uff0c\u518d\u60f3\u529e\u6cd5\u5220\u53bb**\u6743\u503c\u548c**\u5c3d\u91cf\u5c0f\u7684\u4e00\u6279\u65b9\u683c\u3002\n\n___\n\n\u76f8\u90bb\u7684\u6982\u5ff5\u662f\uff0c\u6a2a\u5750\u6807\u6216\u7eb5\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u76f8\u5dee $1$\uff0c\u6240\u4ee5\u4e24\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c**\u5947\u5076\u6027\u4e0d\u540c**\u3002\n\n\u4e8e\u662f\uff0c\u6a2a\u7eb5\u5750\u6807\u548c\u7684\u5947\u5076\u6027\u76f8\u540c\u7684\u4e24\u4e2a\u70b9\u80af\u5b9a\u4e0d\u4e92\u65a5\uff08\u5947\u5076\u6027\u4e0d\u540c\u7684**\u53ef\u80fd**\u4e92\u65a5\uff09\u3002\u628a\u4e92\u65a5\u7684\u70b9\u8fde\u8fb9\u7684\u8bdd\uff0c\u4f1a\u5f62\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u4f46\u5148\u4e0d\u7ba1\u8fd9\u4e2a\u3002\n\n\u8981\u60f3\u529e\u6cd5\u6784\u9020\u4e00\u4e2a\u6a21\u578b\uff0c\u5b83\uff1a\n\n* **\u80fd\u5220\u6389\u4e00\u4e2a\u5143\u7d20\uff0c\u8868\u793a\u4e0d\u53d6\u8fd9\u4e2a\u65b9\u683c\uff1b**\n\n* **\u5220\u6389\u7684\u4ee3\u4ef7\u4e3a\u65b9\u683c\u7684\u6743\u503c\uff1b**\n\n* **\u8981\u4e48\u5220\u6389\u7684\u603b\u662f\u4fdd\u8bc1\u7b56\u7565\u6700\u4f18\u7684\uff0c\u8981\u4e48\u80fd\u53cd\u6094\uff1b**\n\n* **\u6700\u7ec8\u72b6\u6001\u4e3a\uff1a\u6ca1\u6709\u4e92\u65a5\u7684\u65b9\u683c\u4e86\u3002**\n\n\u597d\u50cf\u80fd\u53d1\u73b0\u5bf9\u5e94\u7684\u6a21\u578b\u4e86\uff0c\u5927\u6982\u662f**\u56fe**\u4e00\u7c7b\u7684\u4e1c\u897f\uff1a\n\n* \u5220\u6389\u8fde\u5411\u65b9\u683c\u7684\u8fb9\n\n* \u8fb9\u6743\u4e3a\u65b9\u683c\u7684\u6743\u503c\n\n* \u7f51\u7edc\u6d41\u641e\u4e00\u641e\n\n* **\u5272**\n\n___\n\n\u600e\u4e48\u6784\u9020\u4e00\u4e2a\u5408\u9002\u7684\u56fe\u5462\uff1f\u6700\u597d\u80fd\u5229\u7528\u4e0a\u9762\u7684\u4e8c\u5206\u56fe\u3002\u5e76\u4e0d\u5bb9\u6613\u60f3\u5230\uff1a\n\n\u6e90\u70b9\u8fde\u5411\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u70b9\u96c6\uff08\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5947\u6570\u7684\u90a3\u4e9b\u65b9\u683c\uff09\uff0c\u8fb9\u6743\u4e3a\u70b9\u6743\u3002**\u5220\u4e00\u6761\u8fb9\u8868\u793a\u4e0d\u53d6\u8fd9\u4e2a\u65b9\u683c\u3002**\n\n\u4e8c\u5206\u56fe\u7684\u53e6\u4e00\u4e2a\u70b9\u96c6\u8fde\u5411\u8d85\u7ea7\u6c47\uff0c\u8fb9\u6743\u8fd8\u662f\u70b9\u6743\u3002\u5220\u8fb9\u4e5f\u8868\u793a\u4e0d\u53d6\u6b64\u70b9\u3002\n\n\u4e8c\u5206\u56fe\u5185\u90e8\u7684\u8fb9\uff0c\u8fde\u63a5\u7740\u4e92\u65a5\u7684\u70b9\u3002\u8fb9\u6743\u5168\u90e8\u8d4b\u4e3a $inf$\uff0c\u4ee5\u4fdd\u8bc1\u5728\u6700\u5c0f\u5272\u4e2d\u4e0d\u88ab\u5220\u3002\u5565\u610f\u601d\uff1f\n\n\u60f3\u8c61\u4e00\u4e0b\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff0c\u6c42\u51fa\u4e86\u8be5\u56fe\u6700\u5c0f\u5272\u3002\n\n* \u56e0\u4e3a\u662f\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u4e2d\u95f4\u7684 $inf$ \u8fb9\u6ca1\u5220\uff0c\u5220\u6389\u7684\u90fd\u662f\u6e90\u70b9\u8fde\u51fa\u7684\u8fb9\uff0c\u6216\u8fde\u5165\u6c47\u70b9\u7684\u8fb9\u3002\n\n\t**\u56e0\u6b64\u8fd9\u4e2a\u5272\u80fd\u591f\u786e\u5207\u8868\u793a\uff1a\u4e0d\u53d6\u67d0\u4e9b\u65b9\u683c\u3002**\uff08\u5220\u6389\u4e2d\u95f4\u8fb9\u672c\u6765\u5c31\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u80fd\u8868\u793a\u5bf9\u65b9\u683c\u7684\u64cd\u4f5c\uff1b\u53ea\u6709\u4e24\u4fa7\u7684\u8fb9\u5177\u6709\u610f\u4e49\uff09\n\n* \u56e0\u4e3a\u662f\u5272\uff0c\u6240\u4ee5\u56fe\u4e0d\u8fde\u901a\u3002**\u4e0d\u8fde\u901a**\uff0c\u5c31\u5df2\u7ecf\u4fdd\u8bc1\u6ca1\u6709\u53d6\u5230\u4efb\u4f55\u4e92\u65a5\u7684\u65b9\u683c\uff08\u5047\u8bbe\u56fe\u4e2d\u8fd8\u6709\u4e92\u65a5\u65b9\u683c\uff0c\u4e5f\u5c31\u662f\u4e24\u8005\u5728\u56fe\u4e2d\u5404\u81ea\u6240\u5c5e\u7684\u8fb9\u8fd8\u6ca1\u5220\uff0c\u518d\u56e0\u4e3a\u5b83\u4eec\u4e2d\u95f4\u7684 $inf$ \u8fb9\u4e5f\u6ca1\u5220\uff0c\u6240\u4ee5\u56fe\u8fd8\u662f\u8fde\u901a\u7684\uff09\n\n\u3000\u3000\u3000\u3000![](https://cdn.luogu.com.cn/upload/pic/47260.png\n)\n\n\u6700\u540e\u53ea\u9700\u77e5\u9053**\u6700\u5927\u6d41 = \u6700\u5c0f\u5272**\u5c31\u597d\u4e86\u3002\n\n```cpp\n//Dinic \u7406\u89e3\u4ee3\u4ef7\u4f4e \n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <queue>\n#define N 10010\n#define E 100010\n#define S 0\n#define T (m * n + 1)\n#define code(i, j) ((i - 1) * m + j)//\u70b9\u7684\u7ebf\u6027\u6807\u53f7 \n#define between(x, flo, top) (flo <= x and x <= top)//\u60a8\u662f\u4e0d\u662f\u4e0d\u559c\u6b22\u8fd9\u4e2aqwq \nint getint() {\n\tint res = 0, ch = getchar();\n\twhile (!isdigit(ch) and ch != EOF)\n\t\tch = getchar();\n\twhile (isdigit(ch))\n\t\tres = res * 10 + (ch - '0'), ch = getchar();\n\treturn res;\n}\ninline int min(int x, int y) { return (x < y) ? x : y; }\nusing std::queue;\nconst int d[4][2] = {//\u5f85\u4f1a\u679a\u4e3e\u56db\u4e2a\u65b9\u5411\u7528\u7684 \n\t{0, 1},\n\t{0, -1},\n\t{1, 0},\n\t{-1, 0}\n};\n\nint m, n;\nint sum = 0;\n\nint first[N];\nint nxt[E], to[E], val[E], cnt = 1;\nvoid addE(int u, int v, int w) {\n\t++cnt;\n\tto[cnt] = v;\n\tval[cnt] = w;\n\tnxt[cnt] = first[u];\n\tfirst[u] = cnt;\n}\n\nint dep[N];\nqueue<int> q;\nbool bfs() {\n\tmemset(dep, 0, sizeof(dep));\n\t\n\tdep[S] = 1;\n\tq.push(S);\n\twhile (not q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int p = first[u]; p; p = nxt[p]) {\n\t\t\tint v = to[p];\n\t\t\tif (dep[v])\n\t\t\t\tcontinue;\n\t\t\tif (val[p]) {//\u653e\u5fc3\uff0c\u5f00\u59cb\u90fd\u662f\u6b63\u6743\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8d1f\u6570\u7684 \n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T];\n}\n\nint dfs(int u, int in) {\n\tif (u == T)\n\t\treturn in;\n\tint out = 0;\n\tfor (int p = first[u]; p and in; p = nxt[p]) {\n\t\t\n\t\tif (val[p] == 0)\n\t\t\tcontinue;\n\t\tint v = to[p];\n\t\tif (dep[v] != dep[u] + 1)\n\t\t\tcontinue;\n\t\t\n\t\tint res = dfs(v, min(val[p], in));\n\t\tval[p] -= res;\n\t\tval[p ^ 1] += res;\n\t\tin -= res;\n\t\tout += res;\n\t}\n\t\n\treturn out;\n}\n\nint main() {\n\tn = getint(), m = getint();\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j) {\n\t\t\tint w = 0;\n\t\t\tsum += w = getint();//\u5047\u5b9a\u5168\u90e8\u90fd\u53d6\uff0c\u968f\u540e\u4f1a\u5220 \n\t\t\tif ((i + j) % 2 == 0) {//\u9635\u8425A\uff0c\u6e90\u70b9\u8fde\u5411\u81ea\u5df1\uff0c\u81ea\u5df1\u8fde\u5411\u9635\u8425B \n\t\t\t\taddE(S, code(i, j), w);\n\t\t\t\taddE(code(i, j), S, 0);\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k <= 3; ++k) {\n\t\t\t\t\tint x = i + d[k][0], y = j + d[k][1];\n\t\t\t\t\tif (between(x, 1, n) and between(y, 1, m)) {\n\t\t\t\t\t\taddE(code(i, j), code(x, y), 2e9);\n\t\t\t\t\t\taddE(code(x, y), code(i, j), 0);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\telse {//\u9635\u8425B\uff0c\u8fde\u5411\u6c47\u70b9 \n\t\t\t\taddE(code(i, j), T, w);\n\t\t\t\taddE(T, code(i, j), 0);\n\t\t\t}\n\t\t}\n\t\n\tint cut = 0;//\u6700\u5c0f\u5272 \n\twhile (bfs())\n\t\tcut += dfs(S, 2e9);//\u6700\u5c0f\u5272 = \u6700\u5927\u6d41 \n\tprintf(\"%d\\n\", sum - cut);\n\treturn 0;\n}\n\n```",
        "postTime": 1545957518,
        "uid": 49474,
        "name": "\u5b66\u59d4",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "my blog\uff1a http://redbag.pw/\n\n\u6211\u4eec\u5bf9\u68cb\u76d8\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff08\uff08\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\uff09%2==1\u7684\u70b9\u8bbe\u4e3a\u9ed1\u70b9\uff09\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5\u53d6\u4e00\u4e2a\u9ed1\u683c\u7684\u70b9\uff0c\u53d7\u5230\u5f71\u54cd\u7684\u5c31\u662f\u5468\u56f4\u7684\u767d\u70b9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u7684\u5957\u8def\u9898\uff0c\u5047\u8bbe\u6240\u6709\u7684\u70b9\u90fd\u53d6\uff0c\u7136\u540e\u53bb\u6389\u6700\u5c0f\u5272\uff0c\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u5efa\u6a21\uff1aS->\u9ed1\u70b9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\n\n\u767d\u70b9->T\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\n\n\u6bcf\u4e00\u4e2a\u9ed1\u70b9->\u53d6\u8be5\u9ed1\u70b9\u4f1a\u53d7\u5230\u5f71\u54cd\u7684\u767d\u70b9\uff0c\u5bb9\u91cf\u4e3ainf\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint qmax(int &x,int y) {if (x<y) x=y;}\nint qmin(int &x,int y) {if (x>y) x=y;}\nint read()\n{\n    char s;int k=0,base=1;\n    while((s=getchar())!='-'&&s!=EOF&&!(isdigit(s)));\n    if(s==EOF)exit(0);if(s=='-')base=-1,s=getchar();\n    while(isdigit(s)){k=k*10+(s^'0');s=getchar();}\n    return k*base;\n}\nconst int maxn=10003; \nconst int maxm=80010;\nint S,T,n,m,id,X,Y;\nint to[maxm],ne[maxm],w[maxm],po[maxn];\nint h[maxn];\nint Q[maxn/2],l,r;\nint d1;\nint ID(int x,int y)\n{\n    return (x-1)*m+y;\n}\nvoid add(int x,int y,int z) {id++;to[id]=y;w[id]=z;ne[id]=po[x];po[x]=id;}\nbool bfs()\n{\n    memset(h,-1,sizeof(h));\n    h[S]=1;l=0;r=1;Q[r]=S;\n    while (l!=r)\n    {\n        l++;if (l==maxn) l=1;\n        int u=Q[l],v=0;\n        for (int i=po[u];i;i=ne[i])\n        {\n            v=to[i];\n            if (h[v]==-1&&w[i]>0)\n            {\n                h[v]=h[u]+1;r++;if (r==maxn) r=1;Q[r]=v;\n            }\n        }\n    }\n    return h[T]!=-1;\n}\nint dfs(int u,int low)\n{\n    if (u==T||low==0) return low;int used=0,v,W;\n    for (int i=po[u];i;i=ne[i])\n    {\n        if (h[to[i]]==h[u]+1)\n        {\n            v=to[i];\n            W=dfs(v,min(w[i],low-used));\n            used+=W;\n            w[i]-=W;w[i^1]+=W;\n            if (used==low) return low;\n        }\n    }\n    if (used==0) h[u]=-1;\n    return used;\n}\nint a;\nint fx[4][2]={{-1,0},{0,-1},{1,0},{0,1}};\nlong long sum=0;\nint main()\n{\n    id=1;\n    n=read();m=read();S=n*m+1;T=n*m+2;\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=m;j++)\n        {//\u6240\u6709\u70b9\u548c\u8d77\u70b9\u6216\u7ec8\u70b9\u8fde\u8fb9\n            a=read();sum+=a;\n            if ((i+j)%2==1) add(S,(i-1)*m+j,a),add((i-1)*m+j,S,0); else add((i-1)*m+j,T,a),add(T,(i-1)*m+j,0);\n        }\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=m;j++)\n        {\n            if ((i+j)%2==1) //\u8fde\u8fb9\n            {\n                for (int k=0;k<4;k++) \n                {\n                    X=i+fx[k][0];Y=j+fx[k][1];\n                    if (X<=0||Y<=0||X>n||Y>m) continue;//\u5224\u8d8a\u754c\n                    add((i-1)*m+j,(X-1)*m+Y,1e8),add((X-1)*m+Y,(i-1)*m+j,0); \n                }\n            }\n        }\n    while (bfs()) sum-=dfs(S,1e9);//\u8dd1\u4e00\u904ddinic\n    printf(\"%lld\\n\",sum);\n}\n\n```",
        "postTime": 1515567680,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898 \u9898\u89e3"
    },
    {
        "content": "### \u5173\u4e8e\u6784\u56fe\uff1a\n\n\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053\u6700\u5c0f\u5272\u7684\u9898\u76ee\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u6700\u5927\u548c=\u5168\u5c40\u548c-\u820d\u5f03\u548c\uff0c\u800c\u820d\u5f03\u548c=\u6700\u5c0f\u5272=\u6700\u5927\u6d41\u3002\n![](https://cdn.luogu.com.cn/upload/pic/15206.png)\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u90a3\u4e00\u5e45\u56fe\uff0c\u5c31\u4f1a\u6709\u6240\u542f\u53d1\u3002\n\n\u5f53\u4e00\u4e2a\u70b9(i,j)\u6ee1\u8db3(i+j)mod 2=1\u65f6\uff0c\u4e3a\u767d\u8272\u7684\u70b9\uff0c\u5426\u5219\u4e3a\u9ed1\u8272\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u4e0d\u80fd\u53d6\u5b83\u4e0a\u4e0b\u5de6\u53f3\u7684\u70b9\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f97\u5230\u4e0a\u9762\u7684\u90a3\u4e00\u5e45\u56fe\uff0c\u767d\u8272\u7684\u70b9\u4e3a\u4e00\u4e2a\u96c6\u5408\uff0c\u9ed1\u8272\u7684\u70b9\u4e3a\u4e00\u4e2a\u96c6\u5408\uff0c\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u90fd\u6ee1\u8db3\u8fd9\u4e00\u89c4\u5b9a\u3002\n\n\u4f60\u6216\u8bb8\u4f1a\u95ee\uff0c\u8fd9\u53ef\u4ee5\u7528\u8d2a\u5fc3\uff08ans=max(sigma\u767d,sigma\u9ed1)\uff09\u89e3\u51b3\u554a\u3002\n\n\u4f46\u662f\uff0c\u4e00\u4e2a\u767d\u8272\u7684\u70b9\u53ef\u4ee5\u4e0e\u4e00\u4e2a\u4e0d\u4e0e\u5b83\u76f8\u4e34\u7684\u9ed1\u8272\u7684\u70b9\u8fde\u8fb9\uff0c\u8fd9\u65f6\uff0c\u5c31\u5f97\u7528\u5230\u6700\u5c0f\u5272\u3002\u4e00\u4e2a\u767d\u8272\u7684\u70b9\u4e0e\u4e0e\u5b83\u76f8\u4e34\u7684\u9ed1\u8272\u7684\u70b9\u5efa\u8fb9\uff0c\u4f46\u8fd9\u4e9b\u4fbf\u662f\u9700\u8981\u201c\u5272\u201d\u6389\u7684\u3002\u6709\u4e86\u8fd9\u4e9b\u8fb9\uff0c\u5c31\u53ef\u4ee5\u4ece\u4e00\u4e2a\u767d\u8272\u7684\u70b9\u6d41\u5411\u4e00\u4e2a\u4e0d\u4e0e\u5b83\u76f8\u4e34\u7684\u9ed1\u8272\u7684\u70b9\u4e86\u3002\n\n\u6784\u56fe\uff1a\n\n1.\u9996\u5148\uff0c\u9700\u8981\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u6c47\u70b9\u3002\n\n2.\u6e90\u70b9\u8fde\u5411\u6bcf\u4e00\u4e2a\u9ed1\u8272\u7684\u70b9\uff0c\u6d41\u91cf\u4e3a\u8fd9\u4e2a\u70b9\u7684\u503c\uff1b\u540c\u7406\uff0c\u6bcf\u4e00\u4e2a\u767d\u8272\u7684\u70b9\u90fd\u8fde\u5411\u6c47\u70b9\uff0c\u6d41\u91cf\u4e3a\u8fd9\u4e2a\u70b9\u7684\u503c\u3002\n\n3.\u6bcf\u4e00\u4e2a\u9ed1\u8272\u7684\u70b9\u90fd\u8fde\u5411\u4e0e\u5b83\u76f8\u4e34\u7684\u767d\u8272\u7684\u70b9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8fd9\u4e9b\u8fb9\u9700\u8981\u201c\u5272\u201d\u6389\u4e00\u4e9b\u3002\n\n\u6700\u540e\u5c31\u53ef\u4ee5\u6839\u636e\u6700\u5c0f\u5272=\u6700\u5927\u6d41\u8fd9\u4e2a\u5b9a\u7406&\u6700\u5927\u548c=\u5168\u5c40\u548c-\u820d\u5f03\u548c\u6c42\u89e3\u4e86\u3002\n\n### \u5173\u4e8e\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define INF 2147483647\nusing namespace std; \nqueue<int> f;\n\tconst int fx[4]={0,0,1,-1};\n\tconst int fy[4]={1,-1,0,0};\n\tstruct node{int x,y,z,next;} a[200000];\n\tint last[1000];\n\tint n,m,len=-1,ans=0,st,ed;\nvoid ins(int x,int y,int z)\n{\n\ta[++len].x=x;a[len].y=y;a[len].z=z;a[len].next=last[x];last[x]=len;\n}\nint h[1000];\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));\n\th[st]=1;\n\tf.push(st);\n\twhile(!f.empty())\n\t{\n\t\tint x=f.front();\n\t\tfor(int i=last[x];i>=0;i=a[i].next)\n\t\t{\n\t\t\tint y=a[i].y;\n\t\t\tif(a[i].z>0&&h[y]==0)\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tf.push(y);\n\t\t\t}\n\t\t}\n\t\tf.pop();\n\t}\n\tif(h[ed]) return true; else return false;\n}\nint dfs(int x,int f)\n{\n\tint s=0,t;\n\tif(x==ed) return f;\n\tfor(int i=last[x];i>=0;i=a[i].next)\n\t{\n\t\tint y=a[i].y;\n\t\tif(a[i].z>0&&h[y]==h[x]+1&&f>s)\n\t\t{\n\t\t\ts+=(t=(dfs(y,min(f-s,a[i].z))));\n\t\t\ta[i].z-=t;\n\t\t\ta[i^1].z+=t;\n\t\t}\n\t}\n\tif(!s) h[x]=0;\n\treturn s;\n}\nint dinic()\n{\n\tint sum=0;\n\twhile(bfs())\n\t\tsum+=dfs(st,INF);\n\treturn sum;\n}\nint main()\n{\n\tint x,id;\n\tscanf(\"%d %d\",&n,&m);\n\tst=0,ed=n*m+1;\n\tmemset(last,-1,sizeof(last));\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tans+=x;\n\t\t\tid=(i-1)*m+j;\n\t\t\tif((i+j)&1) ins(st,id,x),ins(id,st,0); else ins(id,ed,x),ins(ed,id,0);\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif((i+j)&1)\n\t\t\t{\n\t\t\t\tfor(int k=0;k<=3;k++)\n\t\t\t\t{\n\t\t\t\t\tint t1=i+fx[k],t2=j+fy[k];\n\t\t\t\t\tif(t1<=0||t1>n||t2<=0||t2>m) continue;\n\t\t\t\t\tid=(i-1)*m+j;\n\t\t\t\t\tins(id,(t1-1)*m+t2,INF),ins((t1-1)*m+t2,id,0);\n\t\t\t\t}\n\t\t\t}\n\tprintf(\"%d\",ans-dinic());\n}\n```",
        "postTime": 1520153292,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u76f8\u90bb\u7684\u6570\u5b57\u53ea\u80fd\u9009\u4e00\u4e2a\uff0c\u8054\u60f3\u5230\u4e8c\u5206\u56fe\uff0c\u76f8\u90bb\u7684\u70b9\u5206\u522b\u653e\u5728x\u3001y\u7aef\uff0c\u4ed6\u4eec\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n\n\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u5462\uff0c\u56e0\u4e3a\u76f8\u90bb\u6570\u5b57\u7684\u5173\u7cfb\u6709\u4e14\u4ec5\u6709\u76f8\u90bb\u4e3a\u5f71\u54cd\uff0c\u6211\u4eec\u9700\u8981\u628a\u5f71\u54cd\u8f6c\u5316\u5230\u6a21\u578b\u4e0a\uff0c\n\n\u4e0d\u76f8\u90bb\u7684\u70b9\u5efa\u8fb9\u867d\u7136\u601d\u8003\u8d77\u6765\u66f4\u76f4\u89c2\uff0c\u4f46\u662f\u8fb9\u6570\u592a\u591a\u4e86\uff0c\u53cd\u800c\u66f4\u96be\u7406\u6e05\u601d\u8def\n\n\u8981\u4f7f\u8fb9\u6709\u610f\u4e49\u4e14\u5408\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u8d77\u59cb\u70b9\u548c\u7ec8\u70b9\uff0c\u56e0\u4e3ax\u7684\u6bcf\u4e2a\u70b9\u5730\u4f4d\u76f8\u540c\uff0c\u90a3\u4e48\u90fd\u548cs\u70b9\u76f8\u8fde\uff0c\u540c\u7406y\u548ct\u76f8\u8fde\n\n\u663e\u7136\u5bf9\u4e8e\u6784\u9020\u51fa\u6765\u7684\u8fd9\u4e2a\u56fe\uff0c\u6211\u4eec\u8981\u5c1d\u8bd5\u628a\u9898\u610f\u8f6c\u5316\u8fdb\u53bb\uff0c\u5373\u7b54\u6848\u9700\u8981\u7684\u662f\u4e00\u79cd\u4ec0\u4e48\u56fe\u3002\n\nx\u548cy\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u53ea\u80fd\u8981\u4e00\u4e2a\uff0c\u8fd9\u662f\u9898\u610f\uff0c\u90a3\u4e48\u7ed3\u679c\u56fe\u4e2d\u4e0d\u80fd\u6709s-u-v-t\u5b8c\u6574\u76844\u6761\u5f27\u6784\u6210\u7684\u201c\u94fe\u201d\uff0c\n\n\u65ad\u94fe\u7684\u65b9\u6cd5\u663e\u7136\u4e3a\u6700\u5c0f\u5272\uff0c\u6700\u5c0f\u5272\u6700\u5927\u6d41\u662f\u5f88\u91cd\u8981\u7684\u5b9a\u7406\u3002\n\n\u6a21\u62df\u4e00\u4e0b\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\uff0c\u4e3e\u51e0\u4e2a\u5c0f\u4f8b\u5b50\u5c31\u80fd\u660e\u767d\u6211\u4eec\u5272\u6389\u7684\u662f\u5c0f\u7684\uff0c\u7559\u4e0b\u6765\u7684\u662f\u5927\u7684\u548c\u5c0f\u7684\u7684\u5dee\n\n\u90a3\u4e48\u7ed3\u679c\u5c31\u663e\u800c\u6613\u89c1\u4e86\u3002\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cmath>\n    #include<cstring>\n    #include<iomanip>\n    #include<algorithm>\n    #include<queue>\n    #define in(x) scanf(\"%d\",&x)\n    using namespace std;\n    const int maxn=1e5+7,pn=2e4+7;\n    int n,m,all=0,ans=0,cnt=1,head[maxn],s=0,t,\n    to[maxn],nxt[maxn],w[maxn],d[pn];\n    int x2[4]={1,-1,0,0};\n    int y2[4]={0,0,1,-1};\n    queue<int>q;\n    void add(int x,int y,int we)\n    {\n        nxt[++cnt]=head[x];head[x]=cnt;to[cnt]=y;w[cnt]=we;\n        nxt[++cnt]=head[y];head[y]=cnt;to[cnt]=x;w[cnt]=0;\n    }\n    int bfs()\n    {\n        memset(d,0,sizeof(d));d[s]=1;q.push(s);\n        while(q.size())\n        {\n            int x=q.front();q.pop();\n            for(int i=head[x];i;i=nxt[i])\n            {\n                int u=to[i];\n                if(d[u]||w[i]<=0) continue;\n                d[u]=d[x]+1;q.push(u);\n            }\n        }\n        return d[t];\n    }\n    int dfs(int x,int flow)\n    {\n        if(x==t) return flow;int p;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            int u=to[i];\n            if(d[u]!=d[x]+1||w[i]<=0) continue;\n            if(p=dfs(u,min(flow,w[i])))\n            {\n                w[i]-=p;w[i^1]+=p;return p;\n            }\n        }\n        return 0;\n    }\n    void dinic()\n    {\n        int p=0;\n        while(bfs())\n        {\n            while(1)\n            {\n                p=dfs(s,1e9);\n                if(!p)break;\n                ans+=p;\n            }\n        }\n    }\n    int main()\n    {\n        in(n);in(m);t=m*n+m+3;\n        for(int i=1;i<=n;++i)\n         for(int j=1;j<=m;++j)\n         {\n             int x;in(x);all+=x;int u=i*m+j;\n             if((i+j)%2==0) \n             {\n                 add(s,u,x);\n                 for(int k=0;k<=3;++k)\n                 {\n                     int xx=i+x2[k],yy=j+y2[k];\n                     if(xx<1||xx>n||yy<1||yy>m) continue;\n                     int v=xx*m+yy;\n                     add(u,v,1e9);\n                 }\n             }\n             else add(u,t,x);\n         }\n         dinic();\n         cout<<all-ans;\n         return 0;\n}\n```",
        "postTime": 1514098596,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u65b9\u683c\u53d6\u6570\u95ee\u9898"
    },
    {
        "content": "# P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chen-jia-liang.gitee.io/blog/2020/07/13/%E9%A2%98%E8%A7%A3-P2774-%E3%80%90%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98%E3%80%91/)\n## \u9898\u610f\n\u5728\u4e00\u4e2a$m\\times n$\u7684\u65b9\u9635\u4e2d\u53d6\u82e5\u5e72\u4e2a\u6570\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e0d\u80fd\u76f8\u90bb\uff0c\u6c42\u548c\u7684\u6700\u5927\u503c\n\n## \u9898\u89e3\n\n>**\u5c0f\u6280\u5de7**\uff1a\u5728\u7f51\u7edc\u6d41\u5efa\u6a21\u7684\u65f6\u5019\uff0c\u5982\u679c\u5173\u7cfb\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u5c40\u90e8\u5efa\u6a21\uff0c\u518d\u5c06\u5176\u653e\u5230\u5168\u5c40\u53bb\u8003\u8651\u3002\n\n\u5728\u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u5148\u62ce\u51fa\u4e24\u4e2a\u76f8\u90bb\u7684\u6570$A$\u548c$B$\uff0c\u7528$X$\u548c$Y$\u8868\u793a\u4ed6\u4eec\u5bf9\u5e94\u7684\u70b9\u3002\n\n\u6839\u636e\u4f53\u9762\uff0c\u6211\u4eec\u4e86\u89e3\u5230\uff0c\u5bf9\u4e8e$A$\u4e0e$B$\uff0c\u5176\u5fc5\u5b9a\u662f**\u4e8c\u9009\u4e00**\u7684\u3002\u4e8c\u9009\u4e00~~\u81ea\u7136~~\u80fd\u591f\u60f3\u5230\u7684\u5c31\u662f**\u6700\u5c0f\u5272**\u4e86\uff0c\u628a\u5176\u9009\u4e2d\u82e5\u5e72\u4e2a\u6570\u4f7f\u548c\u6700\u5927\uff0c\u770b\u4f5c\u662f\u9009\u82e5\u5e72\u4e2a**\u77db\u76fe\u7684**\u6570\u4f7f\u548c\u6700\u5c0f\uff0c\u5269\u4e0b\u7684\u5fc5\u7136\u662f\u4e0d\u77db\u76fe\u7684 ~~\u6700\u5c0f\u5272\u7684\u5957\u8def~~\u3002\u7136\u540e\u6211\u4eec\u5c31~~\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u4e86\u5982\u4e0b\u64cd\u4f5c~~\n\n1. \u5c06\u6e90\u70b9$S$\u4e0e$X$\u8fde\u63a5\u4e00\u6761\u5220\u53bb\u8d39\u7528\u4e3a$A$\u7684\u8fb9\n1. \u5c06$X$\u4e0e$Y$\u8fde\u63a5\u4e00\u6761\u5220\u53bb\u8d39\u7528\u4e3a$+\\infty$\u7684\u8fb9\n1. \u5c06$Y$\u4e0e\u6c47\u70b9$T$\u8fde\u63a5\u4e00\u6761\u5220\u53bb\u8d39\u7528\u4e3a$B$\u7684\u8fb9\n\n\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u7684\u95ee\u9898\u662f\u628a\u5c40\u90e8\u7684\u4e24\u4e2a\u70b9**\u642c**\u5230\u6574\u4e2a\u65b9\u9635\u4e0a\u53bb\u3002~~\u6839\u636e\u67d0\u4e2a\u5957\u8def~~\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u65b9\u683c\u6309\u7167$(x+y) \\bmod2$\u7684\u503c\u5206\u7c7b\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5728\u540c\u4e00\u7c7b\u4e2d\u7684\u6570\uff0c\u662f\u5fc5\u5b9a\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u7684\u3002\u56e0\u6b64\u5c06$x+y$\u4e3a\u5947\u6570\u7684\u5f53\u6210\u4e0a\u9762\u7684$X$\u70b9\uff0c$x+y$\u4e3a\u5076\u6570\u7684\u5f53\u6210$B$\u70b9\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5c31 $\\color{green}{\\texttt{AC}}$\u4e86\n## \u4ee3\u7801\n```cpp\n #pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<bits/stdc++.h>\nnamespace in{\n\tchar buf[1<<21],*p1=buf,*p2=buf;\n\tinline int getc(){\n\t    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;\n\t}\n\ttemplate <typename T>inline void read(T& t){\n\t    t=0;int f=0;char ch=getc();\n\t    while (!isdigit(ch)){\n\t        if(ch=='-')f = 1;\n\t        ch=getc();\n\t    }\n\t    while(isdigit(ch)){\n   \t    \tt=t*10+ch-48;\n   \t    \tch = getc();\n   \t\t}\n\t\tif(f)t=-t;\n\t}\n\ttemplate <typename T,typename... Args> inline void read(T& t, Args&... args){\n\t    read(t);read(args...);\n\t}\n}\nnamespace out{\n\tchar buffer[1<<21];\n\tint p1=-1;\n\tconst int p2 = (1<<21)-1;\n\tinline void flush() {\n\t\tfwrite(buffer,1,p1+1,stdout),\n\t\tp1=-1;\n\t}\n\tinline void putc(const char &x) {\n\t\tif(p1==p2)flush();\n\t\tbuffer[++p1]=x;\n\t}\n\ttemplate <typename T>void write(T x) {\n\t\tstatic char buf[15];\n\t\tstatic int len=-1;\n\t\tif(x>=0){\n\t\t\tdo{\n    \t\t\tbuf[++len]=x%10+48,x/=10;\n    \t\t}while (x);\n\t\t}else{\n    \t\tputc('-');\n\t\t\tdo {\n    \t\t\tbuf[++len]=-(x%10)+48,x/=10;\n\t\t\t}while(x);\n\t\t}\n\t\twhile (len>=0)\n\t\t\tputc(buf[len]),--len;\n\t}\n}\nconst int maxn=10000+10,maxe=1000000;\nstruct Graph{\n\tstruct node{\n\t\tint v,w,nxt;\n\t\tnode(int _v=0,int _w=0,int _nxt=0):v(_v),w(_w),nxt(_nxt){}\n\t}e[maxe];\n\tint head[maxn],cur[maxn],cnt;\n\tint s,t,dis[maxn];\n\tinline void init(int _s,int _t){s=_s,t=_t;cnt=1;}\n\tvoid add(int u,int v,int w){\n\t\te[++cnt]=node(v,w,head[u]);head[u]=cnt;\n\t\te[++cnt]=node(u,0,head[v]);head[v]=cnt;\n\t}\n\t#define v e[i].v\n\tinline bool bfs(){\n\t\tmemset(dis,0,sizeof dis);\n\t\tmemcpy(cur,head,sizeof cur);\n\t\tstd::queue<int>q;\n\t\tq.push(s);dis[s]=1;\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();q.pop();\n\t\t\tfor(int i=head[u];i;i=e[i].nxt)if(e[i].w&&!dis[v]){\n\t\t\t\tdis[v]=dis[u]+1;q.push(v);\n\t\t\t\tif(v==t)return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tint dfs(int u,int flow){\n\t\tif(u==t)return flow;\n\t\tint rest=flow;\n\t\tfor(int &i=cur[u];i;i=e[i].nxt){\n\t\t\tif(dis[v]==dis[u]+1&&e[i].w){\n\t\t\t\tint tmp=dfs(v,std::min(rest,e[i].w));\n\t\t\t\te[i].w-=tmp,e[i^1].w+=tmp,rest-=tmp;\n\t\t\t}\n\t\t}\n\t\tif(!rest)dis[u]=-1;\n\t\treturn flow-rest;\n\t}\n\t#undef v\n\tint dinic(){\n\t\tint ans=0;\n\t\twhile(bfs())\n\t\t\twhile(int sth=dfs(s,2e9))\n\t\t\t\tans+=sth;\n\t\treturn ans;\n\t}\n}G;\nint m,n,x,sum;//m\u4e3a\u884c\u6570 n\u4e3a\u5217\u6570\n#define P(i,j) ((i)-1)*n+(j) \ninline bool check(int x,int y){\n\treturn x<=m&&x>=1&&y<=n&&y>=1;\n}\nsigned main(){\n\tin::read(m,n);\n\tG.init(0,n*m+1);\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tin::read(x);sum+=x;\n\t\t\tif((i+j)&1){\n\t\t\t\tG.add(G.s,P(i,j),x);\n\t\t\t\tif(check(i-1,j))G.add(P(i,j),P(i-1,j),1e9);\n\t\t\t\tif(check(i+1,j))G.add(P(i,j),P(i+1,j),1e9);\n\t\t\t\tif(check(i,j-1))G.add(P(i,j),P(i,j-1),1e9);\n\t\t\t\tif(check(i,j+1))G.add(P(i,j),P(i,j+1),1e9);\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tG.add(P(i,j),G.t,x);\n\t\t\t}\n\t\t}\n\tout::write(sum-G.dinic());\n\tout::flush();\n\treturn 0;\n}\n```",
        "postTime": 1594652891,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "**\u6700\u5927\u6d41=\u6700\u5c0f\u5272**\n\n\u6700\u5927\u6d41\u7ecf\u5178\u9898\u76ee\uff0cISAP\u7b97\u6cd5\u8dd1\u7684\u98de\u5feb\n\n### \u89e3\u9898\u601d\u8def\n\n\u7531\u4e8e\u53d6\u6570\u65f6\u4e0d\u53ef\u4ee5\u53d6\u76f8\u90bb\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u65b9\u683c\u8868\u8fdb\u884c\u8c61\u68cb\u68cb\u76d8\u7684\u9ed1\u767d\u67d3\u8272\uff0c\u8ba9\u9ed1\u767d\u8282\u70b9\u5f62\u6210\u4e8c\u5206\u56fe\uff0c\u7136\u540e\u5c31\u662f\u5e26\u70b9\u6743\u7684\u4e8c\u5206\u56fe\u5339\u914d\u4e86\uff0c\u4f7f\u7528\u6700\u5927\u6d41\u7684\u601d\u8def\u662f\u6700\u7b80\u5355\u7684\n\n### \u5efa\u56fe\n\n* \u8bbe$0$\u4e3a\u539f\u70b9\uff0c$n \\times m + 1$\u4e3a\u6c47\u70b9\uff0c\u628a\u68cb\u76d8\u91cc\u7684\u70b9\u5168\u90e8\u6620\u5c04\u5230$[1, n \\times m]$\u7684\u8282\u70b9\n\n* \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u4ece$0$\u5411$i$\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6570\u5b57\n\n* \u5bf9\u4e8e$\\forall j \\in white$\uff0c\u4ece$j$\u5411$n \\times m + 1$\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6570\u5b57\n\n* \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u4ece$i$\u5411\u4e0a\u4e0b\u5de6\u53f3\u7684\u767d\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\\infty$\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u7528\u6570\u5b57\u603b\u548c\u51cf\u53bb\u5b83\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n\u6307\u9488\u7248ISAP\uff0c\u6709\u5f53\u524d\u5f27\u4f18\u5316\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <queue>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAXN = 105;\nconst int INF = 0x3f3f3f3f;\n\nint m, n;\n\nstruct Edge{\n    int to, val;\n    Edge *next, *ops;\n    Edge(int to, int val, Edge *next): to(to), val(val), next(next){}\n};\n\nEdge *head[MAXN * MAXN], *cur[MAXN * MAXN];\n\nint ID(int x, int y) {\n    return (x - 1) * n + y;\n}\n\nvoid AddEdge(int u, int v, int w) {\n    head[u] = new Edge(v, w, head[u]);\n    head[v] = new Edge(u, 0, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nint dep[MAXN * MAXN], gap[MAXN * MAXN];\nint s, t, res;\n\nvoid Bfs() {\n    memset(dep, -1, sizeof(dep));\n    memset(gap, 0, sizeof(gap));\n    dep[t] = 0; gap[0]++;\n    queue<int> q; q.push(t);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (Edge *e = head[u]; e; e = e->next) {\n            int v = e->to;\n            if (dep[v] != -1) continue;\n            q.push(v);\n            dep[v] = dep[u] + 1;\n            gap[dep[v]]++;\n        }\n    }\n}\n\nint Dfs(int u, int flow) {\n    if (u == t) {\n        res += flow;\n        return flow;\n    }\n    int used = 0;\n    for (Edge *&e = cur[u]; e; e = e->next) {\n        int v = e->to;\n        if (e->val && dep[v] == dep[u] - 1) {\n            int mi = Dfs(v, min(e->val, flow - used));\n            if (mi) {\n                e->val -= mi;\n                e->ops->val += mi;\n                used += mi;\n            }\n            if (used == flow) return used;\n        }\n    }\n    cur[u] = head[u];\n    gap[dep[u]]--;\n    if (gap[dep[u]] == 0) dep[s] = n * m + 3;\n    dep[u]++;\n    gap[dep[u]]++;\n    return used;\n}\n\nvoid Work() {\n    memcpy(cur, head, sizeof(head));\n    res = 0;\n    Bfs();\n    while (dep[s] <= n * m + 2) Dfs(s, INF);\n}\n\nint num[MAXN][MAXN];\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    cin >> m >> n;\n    s = 0; t = n * m + 1;\n    int sum = 0;\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            cin >> num[i][j], sum += num[i][j];\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if ((i + j) % 2 == 1) {\n                AddEdge(0, ID(i, j), num[i][j]);\n                if (i > 1) AddEdge(ID(i, j), ID(i - 1, j), INF);\n                if (i < m) AddEdge(ID(i, j), ID(i + 1, j), INF);\n                if (j > 1) AddEdge(ID(i, j), ID(i, j - 1), INF);\n                if (j < n) AddEdge(ID(i, j), ID(i, j + 1), INF);\n            } else {\n                AddEdge(ID(i, j), n * m + 1, num[i][j]);\n            }\n        }\n    }\n    Work();\n    cout << sum - res << endl;\n    return 0;\n}\n```\n",
        "postTime": 1554887984,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u521a\u62ff\u5230\u4e00\u8138\u95ee\u53f7\uff0c\u8fd9\u79cd\u9898\u7adf\u7136\u662f\u7f51\u7edc\u6d41\uff1f\u4e8e\u662f\u5199\u4e86\u4e2a\u628a\u6240\u6709\u7684\u65b9\u683c\u4e2d\u4e92\u76f8\u6ca1\u6709\u516c\u5171\u8fb9\u7684\u65b9\u683c\u5168\u53d6\u4e0a\u6765\u7136\u540e\u4e24\u79cd\u60c5\u51b5\u6bd4\u5927\u5c0f\u7684\u4ee3\u7801\u4ea4\u4e86\u4e0a\u53bb\uff0c\u7136\u540e\u53ea\u670936\u5206\u2026\u2026\n\u5176\u5b9e\u8fd9\u4e2a\u9898\u662f\u53ef\u4ee5\u7528\u6700\u5927\u6d41\u505a\u7684\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u8f6c\u79fb\u6210\u4e8c\u5206\u56fe\u6765\u505a\u3002\n\n\u9996\u5148\u501f\u9274\u4e00\u4e0b\u975e\u6b63\u89e3\u7684\u4e00\u4e2a\u601d\u8def\uff0c\u628a\u683c\u5b50\u9ed1\u767d\u67d3\u8272\uff0c\u67d3\u6210\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u5c31\u884c\uff08\u6216\u8005\u65b9\u683c\u65d7\u7684\u6837\u5b50?\uff09\u7136\u540e\u628a\u6240\u6709\u7684\u9ed1\u70b9\u5411\u8d85\u7ea7\u6e90\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff1b\u6240\u6709\u7684\u767d\u70b9\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff1b\u7136\u540e\u518d\u4ece\u6bcf\u4e2a\u9ed1\u70b9\u5411\u5468\u56f4\u6709\u516c\u5171\u8fb9\u7684\u767d\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\u3002\n\u6700\u540e\u505a\u5b8c\u7684\u56fe\u5dee\u4e0d\u591a\u957f\u8fd9\u6837\u3002\n![](https://cdn.luogu.com.cn/upload/pic/24131.png )\n\u8dd1\u4e00\u8fb9dinic/km/blabla\uff0c\u7b54\u6848\u662f\u603b\u70b9\u6743-\u6700\u5c0f\u5272\u3002\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u770b\u770b\u56fe\u4e0a\u7684\u6700\u5c0f\u5272\u662f\u4e0d\u662f\u88ab\u70b9\u6743\u5c0f\u7684\u90a3\u4e00\u7ec4\u70b9\u8fde\u7684\u8fb9\u6240\u5f71\u54cd\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nstruct edge\n{\n\tint u,v,x,f,s;\n}ed[1000010];\nint map[1010][1010];\nint vas[1010][1010];\nint num[1010][1010];\nint head[1000010];\nint dis[1000010];\nint vis[1000010];\nint que[1000010];\nint fro[1000010];\nint s,e,n,m,tot,p,h,t=1,cnt,ans,flow;\nvoid debug()\n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcout<<map[i][j]<<\" \";\n\t\tcout<<\"\\n\";\n\t}\n\tcout<<\"\\n\";\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcout<<vas[i][j]<<\" \";\n\t\tcout<<\"\\n\";\n\t}\n\tcout<<\"\\n\";\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcout<<num[i][j]<<\" \";\n\t\tcout<<\"\\n\";\n\t}\n\tcout<<\"\\n\";\n}\nvoid add(int x,int y,int z)\n{\n\ted[cnt].u=head[x];\n\ted[cnt].v=y;\n\ted[cnt].x=x;\n\ted[cnt].f=z;\n\thead[x]=cnt++;\n}\nbool spfa()\n{\n\tfor(int i=s;i<=e;i++)\n\t\tdis[i]=2147483647;\n\tmemset(vis,0,sizeof(vis));\n\tdis[s]=0,vis[s]=1,que[t]=s;\n\th=0,t=1;\n\twhile(h!=t)\n\t{\n\t\tint temp=que[++h];\n\t\tfor(int i=head[temp];i!=-1;i=ed[i].u)\n\t\t{\n\t\t\tif(dis[ed[i].v]>dis[ed[i].x]+ed[i].s&&ed[i].f!=0)\n\t\t\t{\n\t\t\t\tdis[ed[i].v]=dis[ed[i].x]+ed[i].s;\n\t\t\t\tfro[ed[i].v]=i;\n\t\t\t\tif(vis[ed[i].v]==0)\n\t\t\t\t{\n\t\t\t\t\tvis[ed[i].v]=1;\n \t\t\t\t\tque[++t]=ed[i].v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[temp]=0;\n\t}\n\tif(dis[e]!=2147483647)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\nvoid f()\n{\n\tint minn=2147483647;\n\tfor(int i=e;i!=s;i=ed[fro[i]].x)\n\t\tminn=min(minn,ed[fro[i]].f);\n\tfor(int i=e;i!=s;i=ed[fro[i]].x)\n\t{\n\t\ted[fro[i]].f-=minn;\n\t\ted[fro[i]^1].f+=minn;\n\t\tans+=minn*ed[fro[i]].s;\n\t}\n\tflow+=minn;\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tcin>>m>>n;\n\ts=0,e=n*m+1;\n\tfor(int i=1; i<=m; i++)\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tcin>>map[i][j],tot+=map[i][j];\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(j%2!=0)\n\t\t\t\t\tvas[i][j]=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(j%2==0)\n\t\t\t\t\tvas[i][j]=1;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tp++;\n\t\t\tif(vas[i][j]==1)\n\t\t\t{\n\t\t\t\tadd(s,p,map[i][j]);\n\t\t\t\tadd(p,s,0);\n\t\t\t}\n\t\t\tif(vas[i][j]==0)\n\t\t\t{\n\t\t\t\tadd(p,e,map[i][j]);\n\t\t\t\tadd(e,p,0);\n\t\t\t}\n\t\t\tnum[i][j]=p;\n\t\t}\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(vas[i][j]==1)\n\t\t\t{\n\t\t\t\tif(i+1<=m)\n\t\t\t\t{\n\t\t\t\t\tadd(num[i][j],num[i+1][j],2147483647);\n\t\t\t\t\tadd(num[i+1][j],num[i][j],0);\n\t\t\t\t}\n\t\t\t\tif(j+1<=n)\n\t\t\t\t{\n\t\t\t\t\tadd(num[i][j],num[i][j+1],2147483647);\n\t\t\t\t\tadd(num[i][j+1],num[i][j],0);\n\t\t\t\t}\n\t\t\t\tif(i-1>=1)\n\t\t\t\t{\n\t\t\t\t\tadd(num[i][j],num[i-1][j],2147483647);\n\t\t\t\t\tadd(num[i-1][j],num[i][j],0);\n\t\t\t\t}\n\t\t\t\tif(j-1>=1)\n\t\t\t\t{\n\t\t\t\t\tadd(num[i][j],num[i][j-1],2147483647);\n\t\t\t\t\tadd(num[i][j-1],num[i][j],0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n//\tdebug();\n\twhile(spfa())\n\t\tf();\n\tcout<<tot-flow;\n\treturn 0;\n}\n```",
        "postTime": 1531907416,
        "uid": 39862,
        "name": "qwqqqq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u9898\u76ee\u540d\u79f0\uff1a\u65b9\u683c\u53d6\u6570\u95ee\u9898\n\n\u6765\u6e90\uff1a\u7f51\u7edc\u6d4124\u9898\n# \u94fe\u63a5\n## \u535a\u5ba2\u94fe\u63a5\n- [\u535a\u5ba2\u56ed](https://www.cnblogs.com/Alvin-Tree/p/11596142.html)\n- [CSDN](https://blog.csdn.net/weixin_43890363/article/details/101456278)\n- [\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/131abc155-7341-6424/solution-p2774)\n- [\u6d1b\u8c37\u9898\u89e3](https://www.luogu.org/problemnew/solution/P2774)\n\n## \u9898\u76ee\u94fe\u63a5\n- LibreOJ(6007) [\u9898\u76ee](https://loj.ac/problem/6007) [\u63d0\u4ea4](https://loj.ac/problem/6007#submit_code) [\u72b6\u6001](https://loj.ac/submissions?problem_id=6007) [\u8ba8\u8bba](https://loj.ac/discussion/problem/6007)\n- \u6d1b\u8c37(P2774) [\u9898\u76ee](https://www.luogu.org/problem/P2774) [\u63d0\u4ea4](https://www.luogu.org/problem/P2774#submit) [\u72b6\u6001](https://www.luogu.org/record/list?pid=P2774) [\u8ba8\u8bba](https://www.luogu.org/discuss/lists?forumname=P2774)\n- BZOJCH(1475) [\u9898\u76ee](https://bzoj.zcmimi.tk/p/1475.html) [\u63d0\u4ea4](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1475) [\u8ba8\u8bba](http://www.lydsy.com/JudgeOnline/wttl/wttl.php?pid=1475)\n\n# \u63d0\u793a\n\u6ce8\u610f\u8bd5\u9898\u6765\u6e90\uff01\n# \u9898\u89e3\n\u8fd9\u9053\u9898\u8981\u6211\u4eec\u6c42\u7684\u662f\u4ece\u65b9\u683c\u4e2d\u53d6\u5f97\u7684\u6570\u6700\u5927\u7684\u548c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u76f4\u63a5\u6c42\u4e0d\u592a\u597d\u6c42\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53d6\u8fd9\u4e2a\u683c\u5b50\u91cc\u7684\u6570\u7684\u6761\u4ef6\uff0c\u4e0d\u662f**\u53d6\u4e86\u67d0\u4e2a\u683c\u5b50\u91cc\u7684\u6570**\uff0c\u800c\u662f**\u672a\u53d6\u67d0\u4e9b\u683c\u5b50\u91cc\u7684\u6570**\u3002\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7528\u6700\u5927\u6d41\u6765\u5199\u7684\u8bdd\uff0c\u4e0d\u592a\u597d\u8fde\u8fb9\u3002\n\n\u8457\u540d\u7684\u6570\u5b66\u5bb6\uff08\u795e\u7287\uff09Isaac Newton\uff08\u867d\u7136\u8bf4\u662f\u6570\u5b66\u5bb6\uff0c\u4f46\u662f\u65e0\u610f\u95f4\u628aOIer\u5f80\u6b7b\u91cc\u5751\uff09\u66fe\u7ecf\u8bf4\u8fc7\u201c\u6b63\u96be\u5219\u53cd\u201d\u3002\n\n\u90a3\u4e48\u6211\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u6211\u53ef\u4ee5\u5c06*\u53d6\u5f97\u7684\u6700\u5927\u548c*\u53d8\u4e3a*\u603b\u548c*-*\u6700\u5c0f\u4ee3\u4ef7*\uff0c\u8fd9\u91cc\u7684\u4ee3\u4ef7\u662f\u6307\uff0c\u5982\u679c\u4e0d\u53d6\u67d0\u4e9b\u683c\u5b50\u4e0a\u7684\u6570\uff0c\u53ef\u4ee5\u4f7f\u53d6\u7684\u65b9\u6848\u5408\u6cd5\uff0c\u8fd9\u6837\u7684\u683c\u5b50\u4e0a\u7684\u6570\u7684\u603b\u548c\u3002\n\n\u6211\u4eec\u5c06\u683c\u5b50\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u4fdd\u8bc1\u76f8\u90bb\u989c\u8272\u4e0d\u540c\uff0c\u5e76\u6309\u987a\u5e8f\u7ed9\u6bcf\u4e2a\u683c\u5b50\u6807\u4e0a\u7f16\u53f7\uff0c\u62ff\u6837\u4f8b\u8bf4\u8bdd\u3002\n\n![\u9ed1\uff08\u84dd\uff09\u767d\uff08\u7ea2\uff09\u67d3\u8272\u540e\u7684\u56fe](http://img5.imgtn.bdimg.com/it/u=3941792551,3972599066&fm=15&gp=0.jpg)\n\n\u5982\u56fe\uff0c\u84dd\u8272\u5373\u662f\u9ed1\u8272\uff0c\u7ea2\u8272\u5373\u662f\u767d\u8272\uff0c\u65b9\u683c\u5185\u662f\u6743\u503c\u3002\n\n\u5f00\u59cb\u8003\u8651\u5efa\u56fe\uff1a\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u8fde\u8fb9\u90fd\u662f\u5728\u683c\u5b50\u7684\u7f16\u53f7\u4e4b\u95f4\u8fde\u8fb9\uff09\n\n1. \u5c06\u6e90\u70b9\u5411\u6240\u6709\u67d3\u9ed1\u8272\u683c\u5b50\u8fde\u8fb9\u3002\u5bb9\u91cf\u4e3a\u5176\u6743\u503c\u3002\n2. \u5c06\u6240\u6709\u67d3\u9ed1\u8272\u683c\u5b50\u5411\u6c47\u70b9\u8fde\u8fb9\u3002\u5bb9\u91cf\u4e3a\u5176\u6743\u503c\u3002\n3. \u5c06\u6240\u6709\u4e92\u76f8\u51b2\u7a81\u7684\u683c\u5b50\uff08\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u8fde\u8fb9\uff0c\u65b9\u5411\u4e3a\u4ece\u9ed1\u683c\u5b50\u5411\u767d\u683c\u5b50\uff0c\u5bb9\u91cf\u4e3a$\\infty$\u3002\n\n\u53c8\u62ff\u6837\u4f8b\u8bf4\u8bdd\n\n![\u6839\u636e\u6837\u4f8b\u6240\u5efa\u7684\u7f51\u7edc\u56fe](http://img2.imgtn.bdimg.com/it/u=3143775641,3273518911&fm=15&gp=0.jpg)\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e92\u76f8\u51b2\u7a81\u7684\u4e24\u4e2a\u683c\u5b50\u5fc5\u987b\u6709\u4e00\u4e2a\u4e0d\u88ab\u9009\uff0c\u5728\u56fe\u4e0a\u5c31\u8868\u73b0\u4e3a\u81f3\u5c11\u6709\u4e00\u4e2a\u5230\u6e90\u70b9\u6216\u6c47\u70b9\u7684\u8fb9\u8981\u5272\u6389\u3002\uff08\u56e0\u4e3a\u4e0d\u53ef\u80fd\u5272\u4e2d\u95f4\u5bb9\u91cf\u4e3a$\\infty$\u7684\u8fb9\uff09\n\n\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u6240\u6709\u683c\u5b50\u4e0a\u6570\u7684\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n\u8dd1\u4e00\u904dDinic\u5c31\u53ef\u4ee5\u4e86\u3002\n```cpp\n//C++\n#include<bits/locale_facets.h>\n#include<bitset>\n#include<limits.h>\n#include<memory.h>\n#include<stdio.h>\n#include<queue>\n#define downt(i,n) for(int i=n;i;i=back[i])\n#define forto(name,i,d,u) for(name i=d;i<=u;i++)\n#define foruntil(name,i,d,u) for(name i=d;i<u;i++)\nconst short nm=101;\ninline void output(long long o); \ninline long long input();\nshort number[nm][nm];\nstd::bitset<nm>BW[nm];\ntemplate<int nn,int mm,typename name>struct network{\n#define nnn (nn+3)\n#define mmmm (mm<<2)+2\n\tint s,t,tot,nnnn,last[nnn],level[nnn],to[mmmm],arc[mmmm],back[mmmm];\n\tname c[mmmm];\n\tstd::queue<int>q;\n\tnetwork(){nnnn=nnn<<2,INIT();}\n#undef nnn\n#undef mmmm\n\tvoid INIT(){tot=1,memset(last,0,nnnn);}\n\tvoid add(int f,int t,name cap){to[++tot]=t,c[tot]=cap,back[tot]=last[f],last[f]=tot;}\n\tvoid insert(int f,int t,name cap){\n\t\tif(cap){\n\t\t\tif(cap<0)std::swap(f,t),cap=-cap;\n\t\t\tadd(f,t,cap),add(t,f,0);\n\t\t}\n\t}bool climb(){\n\t\tmemset(level,0,nnnn),q.push(s),level[s]=0;\n\t\tfor(int p,too;!q.empty();q.pop()){\n\t\t\tp=q.front(),level[p]++;\n\t\t\tdownt(i,last[p])\n\t\t\tif(c[i]&&!level[too=to[i]])level[too]=level[p],q.push(too);\n\t\t}return level[t];\n\t}name augment(int p,name m){\n\t\tif(p==t)return m;\n\t\tname sum=0,flow;\n\t\tint d=level[p]+1;\n        for(;arc[p];arc[p]=back[arc[p]])\n\t\tif(level[to[arc[p]]]==d&&c[arc[p]]){\n\t\t\tsum+=(flow=augment(to[arc[p]],std::min(c[arc[p]],(name)(m-sum)))),c[arc[p]]-=flow,c[arc[p]^1]+=flow;\n\t\t\tif(sum==m)return m;\n\t\t}return sum;\n\t}name Dinic(name inf){\n\t\tname maximum=0;\n\t\twhile(climb()){\n\t\t\tforuntil(int,i,s,t)arc[i]=last[i];\n\t\t\tmaximum+=augment(s,inf);\n\t\t}return maximum;\n\t}\n};network<10000,50000,int>check;\nint main(){\n\tshort m=input(),n=input(),e;\n\tint sum=0,inf=0x3f3f3f;\n\tcheck.s=0,check.t=m*n+1,BW[1][1]=true,number[1][1]=1;\n\tforto(short,i,2,m)BW[i][1]=!BW[i-1][1],number[i][1]=(i-1)*n+1;\n\tforto(short,i,1,m)\n\tforto(short,j,2,n)BW[i][j]=!BW[i][j-1],number[i][j]=(i-1)*n+j;\n\tforto(short,i,1,m)\n\tforto(short,j,1,n){\n\t\tsum+=(e=input());\n\t\tif(BW[i][j]){\n\t\t\tcheck.insert(0,number[i][j],e);\n\t\t\tif(i>1)check.insert(number[i][j],number[i-1][j],inf);\n\t\t\tif(j>1)check.insert(number[i][j],number[i][j-1],inf);\n\t\t\tif(i<m)check.insert(number[i][j],number[i+1][j],inf);\n\t\t\tif(j<n)check.insert(number[i][j],number[i][j+1],inf);\n\t\t}else check.insert(number[i][j],check.t,e);\n\t}output(sum-check.Dinic(INT_MAX));\n\treturn 0;\n}inline void output(long long o){\n\tif(o<0)putchar('-'),o=-o;\n\tif(o>=10)output(o/10);\n\tputchar(o%10^'0');\n}inline long long input(){\n\tbool minus=false;\n\tchar now=getchar();\n\tlong long i=0;\n\tfor(;!isdigit(now);now=getchar())\n\tif(now=='-')minus=!minus;\n\tfor(;isdigit(now);now=getchar())i=(i<<3)+(i<<1)+(now^'0');\n\treturn minus?-i:i;\n}\n```\n# \u9898\u96c6\n- [\u7f51\u7edc\u6d4124\u9898](https://blog.csdn.net/weixin_43890363/article/details/101509320)",
        "postTime": 1569552468,
        "uid": 151425,
        "name": "\u5343\u5e74\u77e5\u4e4e_\u5929\u624d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u8ba4\u4e3a\u6b64\u9898\u7b97\u7f51\u7edc\u6d4124\u9898\u91cc\u8f83\u6c34\u7684\u3002\u5176\u5b9e\u7f51\u7edc\u6d41\u9898\u76ee\u7684\u96be\u5ea6\u90fd\u5728\u4e8e\u5efa\u56fe\u4e0a\uff0c\u638c\u63e1\u4e86\u4ee5\u540e\u8fd9\u6837\u7684\u9898\u95ee\u9898\u5c31\u4e0d\u5927\u4e86\u3002  \n\n\u9898\u76ee\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u9635\uff0c\u9700\u8981\u9009\u51fa\u4e00\u4e9b\u4e24\u4e24\u65e0\u516c\u5171\u8fb9\uff08\u5c31\u662f\u4e0d\u76f8\u90bb\uff09\u7684\u683c\u5b50\uff0c\u4f7f\u5176\u7684\u6570\u503c\u548c\u6700\u5927\u3002  \n\n\u770b\u5230\u201c\u76f8\u90bb\u201d\u4e00\u7c7b\u7684\u8bcd\u8bed\uff0c\u5927\u5bb6\u5e94\u8be5\u5df2\u7ecf\u5f80\u4e8c\u5206\u56fe\u7684\u65b9\u5411\u53bb\u60f3\u3002\u5bf9\u77e9\u9635\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u90a3\u4e48\u6bd4\u5982\u9009\u4e86\u4e00\u4e2a\u9ed1\u5757\uff0c\u90a3\u4e48\u4e0e\u5b83\u76f8\u90bb\u7684\u767d\u5757\u4e0d\u80fd\u9009\u3002\u8fd9\u91cc\u5c31\u8981\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u4e0d\u9009\u7684\u65b9\u5757\uff0c\u5176\u4f59\u7684\u90fd\u9009\u3002\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u6700\u5c0f\u5272\u5566\u3002\n\n\u90a3\u4e48\u5efa\u56fe\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$(i,j)$\uff0c\u6570\u503c\u4e3a$a_{i,j}$\uff0c\u5982\u679c\u662f\u767d\u8272\u7684\u70b9\uff0c\u90a3\u4e48\u4ece\u6e90\u70b9\u5411\u5b83\u8fde\u4e00\u6761\u5bb9\u91cf$a_{i,j}$\u7684\u8fb9\uff1b\u5426\u5219\u5c31\u4ece\u8fd9\u4e2a\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf$a_{i,j}$\u7684\u8fb9\u3002\u8fd9\u6837\u6211\u4eec**\u5c31\u628a\u4e0d\u9009\u7684\u70b9\u8f6c\u5316\u6210\u4e86\u5272\u6389\u7684\u8fb9**\u3002\u4e3a\u4e86\u4fdd\u8bc1\u76f8\u90bb\u70b9\u76f4\u63a5\u7684\u8fb9\u4e0d\u4f1a\u88ab\u5272\u6389\uff0c\u6211\u4eec\u4ece\u6bcf\u4e2a\u767d\u70b9\u5411\u4e0e\u5176\u76f8\u90bb\u7684\u9ed1\u70b9\u8fde\u5bb9\u91cf\u4e3a$inf$\u7684\u8fb9\u3002\u8fd9\u6837\u8fd9\u9898\u7684\u5efa\u56fe\u5c31\u5efa\u5b8c\u4e86\uff0c\u6700\u540e\u8dd1\u4e00\u8fb9$dinic$\u5373\u53ef\u3002\u4e0b\u9762\u653e\u4e2a\u4ee3\u7801\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=2000000000;\nint s,T,cnt=1,n,m,S;\nint nxt[1000005],h[1000005],t[1000005],w[1000005];\nint deth[1000005],det[4][2]={{0,1},{1,0},{-1,0},{0,-1}};\nqueue <int> q;\ninline int read()\n{\n    int f=1,ans=0;\n\tchar c;\n    while (c<'0'||c>'9')\n\t{\n\t\tif (c=='-') f=-1;\n\t\tc=getchar();\n\t}\n    while (c>='0'&&c<='9')\n\t{\n\t\tans=ans*10+c-'0';\n\t\tc=getchar();\n\t}\n    return f*ans;\n}\nvoid add(int x,int y,int z)\n{\n    cnt++;\n    t[cnt]=y;\n    nxt[cnt]=h[x];\n    w[cnt]=z;\n    h[x]=cnt;\n    cnt++;\n    swap(x,y),z=0;\n    t[cnt]=y;\n    nxt[cnt]=h[x];\n    w[cnt]=z;\n    h[x]=cnt;\n}\nint bfs()\n{\n    memset(deth,0,sizeof(deth));\n    while (!q.empty()) q.pop();\n    deth[s]=1;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for (int i=h[u];i!=-1;i=nxt[i])\n        {\n            if (w[i]>0&&deth[t[i]]==0)\n            {\n                deth[t[i]]=deth[u]+1;\n                q.push(t[i]);\n            }\n        }\n    }\n    if (deth[T]!=0) return 1;\n\treturn 0;\n}\nint dfs(int u,int dist)\n{\n    if (u==T) return dist;\n    for (int i=h[u];i!=-1;i=nxt[i])\n    {\n        if ((deth[t[i]]==deth[u]+1)&&(w[i]!=0))\n        {\n            int di=dfs(t[i],min(dist,w[i])); \n            if (di>0) \n            {\n                w[i]-=di;\n                w[i^1]+=di;\n                return di;\n            }\n        }\n    }\n    return 0;\n}\nint dinic()//dinic\u6c42\u6700\u5927\u6d41=\u6700\u5c0f\u5272 \n{\n    int ans=0;\n    while (bfs())\n    {\n    \twhile (int res=dfs(s,INF)) ans+=res;\n    }\n    return ans;\n}\nint main()\n{\n    n=read(),m=read();\n\ts=0,T=n*m+1;\n    memset(h,-1,sizeof(h));\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=m;j++)\n\t\t{\n\t\t\tint p=read();\n\t\t\tS+=p;//S\u662f\u603b\u6570 \n\t\t\tif ((i+j)%2==1) \n\t\t\t{\n\t\t\t\tadd(s,i*m-m+j,p);//\u4ece\u6e90\u70b9\u5411\u767d\u70b9\u8fde\u8fb9 \n\t\t\t\tfor (int k=0;k<4;k++)//\u679a\u4e3e\u76f8\u90bb\u7684\u70b9 \n\t\t\t\t{\n\t\t\t\t\tint x=i+det[k][0],y=j+det[k][1];\n\t\t\t\t\tif (x<1||x>n||y<1||y>m) continue;\n\t\t\t\t\tadd(i*m-m+j,x*m-m+y,INF);//\u4ece\u767d\u70b9\u5411\u9ed1\u70b9\u8fde\u8fb9\n\t\t\t\t}\n\t\t\t}\n\t\t\telse add(i*m-m+j,T,p);//\u4ece\u9ed1\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\n\t\t}\n\t}\n    cout << S-dinic();\n    return 0;\n}\n```\n\n\u795d\u5927\u5bb6\u5f88\u5feb\u53ef\u4ee5A\u4e86\u8fd9\u9898\uff0c\u4e5f\u5e0c\u671b\u5927\u5bb6\u638c\u63e1\u597d\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u6280\u5de7\u3002\u8c22\u8c22\u3002",
        "postTime": 1591433672,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\n> [\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P2774)\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u4e2a\u65b9\u683c\u4f1a\u4e0e\u5176\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u683c\u4ea7\u751f\u77db\u76fe\u3002\u7f16\u7a0b\u7684\u4efb\u52a1\u5373\u627e\u5230\u4e00\u79cd\u4e0d\u4ea7\u751f\u77db\u76fe\u7684\u9009\u62e9\u65b9\u6848\uff0c\u5e76\u4e14\u4f7f\u5f97\u53d6\u51fa\u7684\u6570\u603b\u548c\u6700\u5927\u3002\n\n\u9996\u5148\u5bf9\u56fe\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u76ee\u7684\u662f\u4f7f\u4ea7\u751f\u77db\u76fe\u7684\u4e24\u4e2a\u4f4d\u7f6e\u5206\u522b\u4f4d\u4e8e\u4e0d\u540c\u7684\u8272\u5757\u4e2d\uff0c\u65b9\u4fbf\u5efa\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/54936.png)\n\n\u6e90\u70b9\u4e0e\u6240\u6709\u767d\u8272\u4f4d\u7f6e\u76f8\u8fde\uff0c\u6743\u503c\u4e3a\u8be5\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff1b\u6240\u6709\u9ed1\u8272\u4f4d\u7f6e\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u6743\u503c\u4e5f\u4e3a\u8be5\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff1b\u6240\u6709\u767d\u8272\u4f4d\u7f6e\u4e0e\u5176\u4e0a\u4e0b\u5de6\u53f3\uff08\u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff09\u7684\u9ed1\u8272\u4f4d\u7f6e\u76f8\u8fde\uff0c\u6743\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/54937.png)\n\n\u5982\u6b64\u5efa\u56fe\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b58\u5728\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u589e\u5e7f\u8def\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u539f\u56fe\u4e2d\u5b58\u5728\u4ea7\u751f\u77db\u76fe\u7684\u4e24\u4e2a\u4f4d\u7f6e\u3002\u5047\u8bbe\u4e00\u5f00\u59cb\u9009\u53d6M*N\u7f51\u683c\u4e2d\u7684\u6240\u6709\u65b9\u5757\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u662f\u5272\u6389\u7f51\u7edc\u4e2d\u7684\u4e00\u4e9b\u8fb9\uff08\u5373\u5220\u53bb\u4e00\u4e9b\u65b9\u5757\uff09\uff0c\u4f7f\u5f97\u5272\u53bb\u7684\u8fb9\u6743\u6700\u5c0f\u3002\u5272\u53bb\u7f51\u7edc\u4e2d\u7684\u8fb9\u5c31\u76f8\u5f53\u4e8e\u5220\u6389\u4e24\u4e2a\u77db\u76fe\u4f4d\u7f6e\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u56e0\u6b64\u5f53\u7f51\u7edc\u4e2d\u4e0d\u518d\u6709\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u589e\u5e7f\u8def\uff0c\u5c31\u610f\u5473\u7740\u77db\u76fe\u5168\u90e8\u6d88\u9664\u3002\n\n\u95ee\u9898\u4fbf\u8f6c\u5316\u4e3a\u6c42\u89e3\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u7684\u95ee\u9898\u3002\u8f93\u51fa\u7b54\u6848\u4e3a\u5168\u5c40\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int INF=0x3f3f3f3f;\nconst int MAXN=100005;\n\nint N,M,S,T;\nll sum;\n\nint nx[]={0,1,0,-1};\nint ny[]={1,0,-1,0};\n\nstruct Edge{\n    int v,w,nxt;\n}mem[MAXN];\nint head[MAXN],cnt=1;\n\ninline void AddEdge(int u,int v,int w){\n    mem[++cnt].w=w;\n    mem[cnt].v=v;\n    mem[cnt].nxt=head[u];\n    head[u]=cnt;\n}\n\nint d[MAXN];\nbool vis[MAXN];\n\ninline bool bfs(){\n    memset(vis,0,sizeof(vis));\n    vis[S]=1;d[S]=0;\n    queue<int> q;\n    q.push(S);\n    while(q.size()){\n        int u=q.front();q.pop();\n        for(register int i=head[u];i;i=mem[i].nxt){\n            int v=mem[i].v,w=mem[i].w;\n            if(vis[v]||(w==0)) continue;\n            vis[v]=1;d[v]=d[u]+1;\n            q.push(v);\n        }\n    }\n    return vis[T];\n}\n\ninline int dfs(int u,int flow){\n    if(u==T) return flow;\n    int rflow;\n    for(register int i=head[u];i;i=mem[i].nxt){\n        int v=mem[i].v,w=mem[i].w;\n        if(w==0||d[u]+1!=d[v]) continue;\n        if(rflow=dfs(v,min(flow,w))){\n            mem[i].w-=rflow;\n            mem[i^1].w+=rflow;\n            return rflow;\n        }\n    }\n    return 0;\n}\n\ninline int Dinic(){\n    int maxflow=0,lowflow;\n    while(bfs()){\n        while(lowflow=dfs(S,INF)) maxflow+=lowflow;\n    }\n    return maxflow;\n}\n\nint main(){\n    scanf(\"%d%d\",&M,&N);\n    S=0,T=M*N+1;\n    for(register int i=1;i<=M;++i){\n        for(register int j=1;j<=N;++j){\n            int w;\n            scanf(\"%d\",&w);\n            sum+=w;\n            if((i+j)&1){\n                AddEdge(S,(i-1)*N+j,w);\n                AddEdge((i-1)*N+j,S,INF);\n                for(register int k=0;k<=3;++k){\n                    int tx=i+nx[k],ty=j+ny[k];\n                    if(tx<1||tx>M||ty<1||ty>N) continue;\n                    AddEdge((i-1)*N+j,(tx-1)*N+ty,INF);\n                    AddEdge((tx-1)*N+ty,(i-1)*N+j,0);\n                }\n            }\n            else{\n                AddEdge((i-1)*N+j,T,w);\n                AddEdge(T,(i-1)*N+j,INF);\n            }\n        }\n    }\n    printf(\"%lld\",sum-Dinic());\n    return 0;\n}\n```\n",
        "postTime": 1553438386,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u672c\u9898\u7684\u5148\u51b3\u662f [$P3410$ \u62cd\u7167](https://www.luogu.org/problemnew/show/P3410) , [\u9898\u89e3](https://www.luogu.org/blog/acking/solution-p3410)\u3002\n\n\u6211\u53ea\u80fd\u7167\u7740 $P3410$ \u7684\u6765\u8bf4\u55bd\u3002\n\n$P3410$ \u4e2d\u6211\u4eec\u8981\u6c42\u7ed9\u4e00\u4e9b\u4eba\u62cd\u7167,\u4e00\u4e9b\u4eba\u7ed9\u4f60\u94b1\u3002\u6700\u540e\u4ed8\u4e0b\u5c5e\u7684\u94b1\u3002\u6c42\u6700\u5927\u7684\u7eaf\u5229\u6da6\u3002\n\n\u8fd9\u4e00\u9898\u6211\u4eec\u4e5f\u8f6c\u5316\u4e00\u4e0b:\n\n- \u9996\u5148\u9ed1\u767d\u67d3\u8272 ($(i+j) \\mod 2=1$ \u4e3a\u767d\u8272),\u663e\u7136\u4e00\u4e2a\u9ed1\u8272\u70b9\u5468\u56f4\u90fd\u662f\u767d\u8272,\u4e00\u4e2a\u767d\u8272\u70b9\u5468\u56f4\u90fd\u662f\u9ed1\u8272\u3002\n\n- \u767d\u8272\u70b9\u4f1a\u7ed9\u4f60\u94b1,\u4f46\u662f\u767d\u8272\u70b9\u8981\u53bb\u9664\u4e00\u4e9b\u9ed1\u8272\u70b9\u3002\u800c\u4e00\u4e2a\u9ed1\u8272\u70b9\u88ab\u53bb\u9664 (\u53ea\u8981\u4e00\u6b21\u6216\u4e00\u6b21\u4ee5\u4e0a) \u8981\u4f60\u94b1,\u5b83\u53ef\u4ee5\u88ab\u53bb\u9664\u591a\u6b21 (\u56e0\u4e3a\u5b83\u4e0a\u4e0b\u5de6\u53f3\u90fd\u662f\u767d\u70b9)\u3002\n\n\u8fd9\u6837\u5b50\u5c31\u53d8\u6210\u4e86 $P3410$ \u7684\u95ee\u9898\u4e86\u3002\n\n\u6240\u4ee5\u6bcf\u4e00\u4e2a\u767d\u8272\u70b9\u5411\u6e90\u70b9\u8fde\u8fb9,\u9ed1\u8272\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9,\u6d41\u91cf\u4e3a\u70b9\u6743\u3002\u767d\u8272\u70b9\u5411\u9ed1\u8272\u70b9\u8fde\u8fb9,\u6d41\u91cf\u4e3a $inf$\u3002\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    value,reach,next:array[-1..21000] of longint;\n    gap,dis,cnt:array[-1..21000] of longint;\n    n,m,l,r,i,j,sum,tot,sink,source,number,maxflow:longint;\n\nprocedure add(l,r,sum:longint);\nbegin\n    inc(tot); reach[tot]:=r; value[tot]:=sum; next[tot]:=cnt[l]; cnt[l]:=tot;\n    inc(tot); reach[tot]:=l; value[tot]:=8-8; next[tot]:=cnt[r]; cnt[r]:=tot;\nend;\n\nfunction Dfs(now,flow:longint):longint;\nvar i,k,mindis,ret:longint;\nbegin\n    mindis:=n-1; ret:=flow;\n    if now=sink then exit(flow);\n    i:=cnt[now];\n    while i<>-1 do\n    begin\n        if value[i]>0 then\n        begin\n            if dis[now]=dis[reach[i]]+1 then\n            begin\n                k:=Dfs(reach[i],min(ret,value[i]));\n                dec(value[i],k);inc(value[i xor 1],k);\n                dec(ret,k);\n                if dis[source]>=n then exit(flow-ret);\n                if ret=0 then break;\n            end;\n            mindis:=min(mindis,dis[reach[i]]);\n        end;\n        i:=next[i];\n    end;\n    if ret=flow then\n    begin\n        dec(gap[dis[now]]);\n        if gap[dis[now]]=0 then dis[source]:=n;\n        dis[now]:=mindis+1;\n        inc(gap[dis[now]]);\n    end;\n    exit(flow-ret);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1);\n\n    read(n,m);\n    source:=1; sink:=n*m+2; number:=1; tot:=1;\n    for i:=1 to n do\n        for j:=1 to m do\n        begin\n            read(l); inc(sum,l); inc(number);\n            if ((i+j) mod 2=1) then\n            begin\n                add(source,number,l);\n                if (j<m) then add(number,number+1,maxlongint);\n                if (j>1) then add(number,number-1,maxlongint);\n                if (i<n) then add(number,number+m,maxlongint);\n                if (i>1) then add(number,number-m,maxlongint);\n            end else add(number,sink,l);\n        end;\n\n    n:=sink; gap[source]:=n;\n    while dis[source]<n do inc(maxflow,Dfs(source,maxlongint));\n    writeln(sum-maxflow);\nend.\n```\n\n\u81f3\u4e8e\u6211\u4e00\u5f00\u59cb\u4e3a\u4ec0\u4e48 $9$ \u5206\u662f\u56e0\u4e3a $n,m$ \u641e\u53cd\u4e86\u3002",
        "postTime": 1540878506,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u535a\u5927\u7cbe\u6df1\u7684\u7f51\u7edc\u6d41\u3002\u3002\u3002\n\n## [P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898](https://www.luogu.org/problemnew/show/P2774)\n\n\n\u53c8\u4e00\u4e2atot\u4e0d\u521d\u59cb\u5316\u4e3a1\u7684\u60e8\u75db\u6559\u8bad\n\n\u5148\u5047\u8bbe**\u6240\u6709\u70b9\u90fd\u53d6**\n\n\u8003\u8651\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u201c\u5272\u53bb\u201d\u5404\u70b9\u4e4b\u95f4\u7684\u8054\u7cfb\uff08**\u603b\u4f53\u7f29\u51cf**\u601d\u60f3\u5728\u7f51\u7edc\u6d41\u91cc\u7ecf\u5e38\u7528\u5230\uff0c\u6bd4\u5982\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff09\n\n\u53ef\u4ee5\u7406\u89e3\u4e3a\u51cf\u53bb\u76f8\u90bb\u7684\u70b9\u6240\u53d6\u5404\u503c\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\uff08\u5373\u6700\u5927\u901a\u8fc7\u7684\u6d41\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5efa\u51fa\u4e00\u4e2a\u8868\u793a\u90bb\u63a5\u5173\u7cfb\u7684\u56fe\uff08\u4e8c\u5206\u56fe\uff09\n\n\u4e3a\u4e86\u8ba9\u4e24\u70b9\u7684\u503c\u5728\u6574\u6761\u8def\u4e0a\u6709\u6240\u4f53\u73b0\uff08**\u9650\u5236\u6d41\u91cf**\uff09\n\n\u6211\u4eec\u5728\u6e90\u6c47\u4e0e\u5404\u90e8\u96c6\u4e4b\u95f4\u7684\u5bb9\u91cf\u8bbe\u4e3a**\u6240\u8fde\u70b9\u7684\u503c**\n\n\u5219\u6d41\u5728\u4ece\u6e90\u5411\u6c47\u65f6\u5fc5\u4f1a\u53d7\u5230\u9996\u5c3e\u4e24\u4e2a\u5bb9\u91cf\u7684\u9650\u5236\n\n\u800c\u8868\u793a\u90bb\u63a5\u5173\u7cfb\u7684\u5bb9\u91cf\u4e0d\u5fc5\u9650\u5236\uff0c\u8bbe\u4e3ainf\n\n\u6240\u4ee5\u6700\u5927\u6d41\u7684\u9898\u4e3b\u8981\u96be\u5728**\u62bd\u8c61\u51fa\u6d41\u4e0e\u6d41\u7684\u9650\u5236\u6761\u4ef6**\n\n\u5373 \u4ec0\u4e48\u5728\u6d41\uff1f\u4ec0\u4e48\u5728\u9650\u5236\uff1f\uff08\u9650\u5236\u4e86\u591a\u5c11\uff09\n\n```cpp\n\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\ntypedef long long LL;\nconst int N=10000+5;\nconst int inf=0x7fffffff;\nconst int dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\ntemplate<class T>inline void read(T &num){\n    char ch;\n    while(!isdigit(ch=getchar()));\n    num=ch-'0';\n    while(isdigit(ch=getchar()))num=num*10+ch-'0';\n}\n\nint hea[N],to[N<<2],nex[N<<2],val[N<<2],dep[N],n,m,tot=1,s,t;\nLL sum;\ninline int id(int i,int j){\n    return (i-1)*n+j;\n}\ninline void add_edge(const int x,const int y,const int w){\n//printf(\"%d --> %d ( %d )\\n\",x,y,w);\n    to[++tot]=y,nex[tot]=hea[x],hea[x]=tot,val[tot]=w;\n}\n\nqueue<int> que;\nint bfs(){\n    memset(dep,0,sizeof(dep));\n    dep[s]=1;\n    while(que.size())que.pop();\n    que.push(s);\n    int x;\n    while(que.size()){\n        x=que.front();que.pop();\n        for(int i=hea[x];i;i=nex[i]){\n            int y=to[i];\n            if(val[i]&&!dep[y]){\n                dep[y]=dep[x]+1;\n                if(y==t)return 1;\n                que.push(y);\n            }\n        }\n    }\n    return 0;\n}\n\nint dfs(int x,int flow){\n//printf(\"dfs(%d,%d)\\n\",x,flow); \n    if(x==t)return flow;\n    int rest=flow,k;\n    for(int i=hea[x];i&&rest;i=nex[i]){\n        int y=to[i];\n        \n        if(val[i]&&dep[y]==dep[x]+1){\n//printf(\"rest=%d,val[%d]=%d\\n\",rest,i,val[i]);\n//printf(\"%d->%d\\n\",x,y);\n            k=dfs(y,min(rest,val[i]));\n//printf(\"k=%d\\n\",k); \n            if(k==0)dep[y]=0;\n            val[i]-=k;\n            val[i^1]+=k;\n            rest-=k;\n        }\n    }\n//printf(\"return %d-%d\\n\",flow,rest);\n    return flow-rest;\n}\n\nint main(){\n    read(m),read(n);\n    s=m*n+1,t=m*n+2;\n//printf(\"s=%d,t=%d\\n\",s,t);\n    for(int i=1,w;i<=m;++i){\n        for(int j=1;j<=n;++j){\n            read(w);\n            sum+=w;\n            if((i+j)&1){\n                add_edge(s,id(i,j),w);\n                add_edge(id(i,j),s,0);\n            }\n            else{\n                add_edge(id(i,j),t,w);\n                add_edge(t,id(i,j),0);\n            }\n        }\n    }\n    for(int i=1;i<=m;++i){\n        for(int j=1;j<=n;++j){\n            if((i+j)&1)\n                for(int k=0;k<4;++k){\n                    int x=i+dir[k][0],y=j+dir[k][1];\n                    if(1<=x&&x<=m&&1<=y&&y<=n){\n                        add_edge(id(i,j),id(x,y),inf);\n                        add_edge(id(x,y),id(i,j),0);\n                    }\n                }\n        }\n    }\n    int flow;\n    while(bfs())while(flow=dfs(s,inf))sum-=flow;\n    printf(\"%lld\\n\",sum);\n    return 0;\n}\n```",
        "postTime": 1548473662,
        "uid": 106642,
        "name": "Ajsoabk",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d4124\u9898-\u65b9\u683c\u53d6\u6570\u95ee\u9898"
    },
    {
        "content": "\u9898\u610f\u697c\u4e0b\u5df2\u7ecf\u8bf4\u5f97\u6bd4\u8f83\u6e05\u695a\u4e86\n\n\u6211\u53ea\u662f\u6765\u4e0a\u4e00\u4efdISAP\u7684\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define re register int\n#define Inline __inline__ __attribute((always_inline))\nconst int N=2505,M=N<<2,inf=~0u>>1;\nconst int dx[]={0,0,1,-1},dy[]={1,-1,0,0};\nstruct edges{int nx,to,w,ivs;}edge[M<<1];\nint n,m,W,cnt,dis[N],num[N],pre[N],pos[51][51],tot,fi[N],cur[N];\nstd::queue<int>q;\nvoid bfs(re st,re en){\n    memset(dis,-1,sizeof(dis));memset(num,0,sizeof(num));\n    num[dis[en]=0]=1;q.push(en);re u,v;\n    while(!q.empty()){\n        v=q.front();q.pop();\n        for(re i=fi[v];i;i=edge[i].nx)\n            if(dis[u=edge[i].to]==-1)\n                {++num[dis[u]=dis[v]+1];q.push(u);}\n    }\n}\nint augment(re st,re en,re&pos){\n    re flow=inf,v;\n    v=en;while(v!=st){flow=flow<edge[pre[v]].w?flow:edge[pos=pre[v]].w;v=edge[edge[pre[v]].ivs].to;}//\u627e\u5230\u6700\u9760\u8fd1\u6e90\u70b9\u7684\u65ad\u6d41(\u6ee1\u6d41)\u4e86\u7684\u70b9,\u6240\u4ee5\u76f8\u7b49\u65f6\u4e5f\u8981\u5f80\u524d\u63a8\u79fb \n    v=en;while(v!=st){edge[pre[v]].w-=flow;edge[edge[pre[v]].ivs].w+=flow;v=edge[edge[pre[v]].ivs].to;}\n    pos=edge[edge[pos].ivs].to;return flow;\n}\nInline int ISAP(re st,re en){\n    bfs(st,en);re ans=0,u=st,i,md;\n    memcpy(cur,fi,sizeof(fi));\n    while(dis[st]<=en){\n        ok:if(u==en)ans+=augment(st,en,u);\n        for(i=cur[u];i;i=edge[i].nx)\n            if(edge[i].w&&dis[u]==dis[edge[i].to]+1)\n                {pre[u=edge[i].to]=i;goto ok;}\n        if(--num[dis[u]]==0)break;\n        for(md=en,i=fi[u];i;i=edge[i].nx)\n            if(edge[i].w&&dis[edge[i].to]!=-1)\n                md=md>dis[edge[i].to]?dis[edge[cur[u]=i].to]:md;\n        ++num[dis[u]=md+1];\n        if(u!=st)u=edge[edge[pre[u]].ivs].to;\n    }\n    return ans;\n}\nInline void add_edge(re u,re v,re w){\n    edge[++tot]=(edges){fi[u],v,w,tot+1};fi[u]=tot;\n    edge[++tot]=(edges){fi[v],u,0,tot-1};fi[v]=tot;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(re i=1;i<=n;++i)\n        for(re w,j=1;j<=m;++j){\n            scanf(\"%d\",&w),pos[i][j]=++cnt;W+=w;\n            if((i+j)&1)add_edge(0,cnt,w);//\u81ea\u5df1\u7422\u78e8\u4e00\u4e0b\u662f\u54ea\u4e9b\u70b9\n            else add_edge(cnt,n*m+1,w);\n        }\n    for(re i=1;i<=n;++i)\n        for(re j=1;j<=m;++j)\n            if((i+j)&1)//\u6ce8\u610f\u662f\u8fde\u5411\u8d77\u70b9\u7684\u70b9\u5411\u56db\u5468(\u8fde\u5411\u7ec8\u70b9\u7684\u70b9)\u8fde\u4e00\u6761\u65e0\u9650\u5927\u7684\u8fb9\n                for(re k=0;k<4;++k){\n                    re x=i+dx[k],y=j+dy[k];\n                    if(1<=x&&x<=n&&1<=y&&y<=m)\n                        add_edge(pos[i][j],pos[x][y],inf);\n                }\n    printf(\"%d\",W-ISAP(0,n*m+1));\nreturn 0;\n}\n```",
        "postTime": 1495432713,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "### \u89e3\u9898\u4e4b\u524d\n\u521a\u521a\u5b66\u4e60\u7f51\u7edc\u6d41\u65f6\uff0c\u770b\u4e86\u4e00\u904d[\u7f51\u7edc\u6d4124\u9898](https://www.luogu.org/problem/list?tag=332&page=1)\uff0c\u53d1\u73b0\u7528\u7f51\u7edc\u6d41\u4e00\u9898\u4e5f\u4e0d\u4f1a\u505a\uff08\u5e94\u8be5\u662f\u6211\u592a\u84bb\u4e86\uff09\u3002\u4e8e\u662f\uff0c\u6211\u5148\u627e\u4e86\u4e00\u4e9b\u57fa\u7840\u7684\u9898\u76ee\u505a\uff0c\u6e10\u6e10\u5bf9\u8fd9\u7c7b\u9898\u7684\u5efa\u6a21\u548c\u5957\u8def\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u5c24\u5176\u662f\u5728$\\mathbb{AC}$\u4e86[P4304 TJOI2013 \u653b\u51fb\u88c5\u7f6e](https://www.luogu.org/problem/P4304)\u548c[P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.org/problem/P3355)\u540e\uff0c\u770b\u5230\u672c\u9898[P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898](https://www.luogu.org/problem/P2774)\uff0c\u601d\u8def\u66f4\u52a0\u6e05\u6670\u660e\u4e86\u4e86\u3002\n\n\u5176\u5b9e\uff0c\u6211\u8fd8\u6ca1\u70b9\u5f00\u8fd9\u9053\u9898\u65f6\uff0c\u6211\u8fd8\u4ee5\u4e3a\u8fd9\u662f[P1004 \u65b9\u683c\u53d6\u6570](https://www.luogu.org/problem/P1004)\u7684\u52a0\u5f3a\u7248\uff0c\u7136\u800c\u5e76\u4e0d\u662f\uff0c\u4e8e\u662f\u5f00\u59cb\u4ed4\u7ec6\u5ba1\u9898\u3002\n### \u9898\u76ee\u5206\u6790\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u9053\u9898\u7684\u9898\u76ee\u63cf\u8ff0\u5df2\u7ecf\u5c06\u9898\u76ee\u7684\u610f\u601d\u8868\u8fbe\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e00\u4e2a$N \\times M$ \u7684\u68cb\u76d8\u4e2d\u53d6\u6570\uff0c\u5e76\u4e14\u5f53\u9009\u53d6\u4e86\u4e00\u4e2a\u65b9\u683c\u65f6\uff0c\u4e0e\u5176\u76f8\u90bb\uff08\u6709\u516c\u5171\u8fb9\uff09\u7684\u65b9\u683c\u4e0d\u80fd\u88ab\u9009\u53d6\u3002\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u68cb\u76d8\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u663e\u7136\uff0c\u7531\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u7531\u4e8e\u9009\u62e9\u4e00\u4e2a\u65b9\u683c\u548c\u9009\u62e9\u4e0e\u8fd9\u4e2a\u65b9\u683c\u76f8\u90bb\u7684\u65b9\u683c\u662f\u5bf9\u7acb\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8054\u60f3\u5230\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u8d77\u4e00\u4e2a\u521d\u6b65\u7684\u6a21\u578b\uff1a\n\n- \u4ece\u8d85\u7ea7\u6e90$S$\u5411\u6240\u6709\u9ed1\u8272\u65b9\u683c\u8fde\u6709\u5411\u8fb9\n- \u4ece\u6240\u6709\u9ed1\u8272\u65b9\u683c\u5411\u4e0e\u5176\u76f8\u90bb\u7684\u767d\u8272\u65b9\u683c\u8fde\u6709\u5411\u8fb9\n- \u4ece\u6240\u6709\u767d\u8272\u65b9\u683c\u5411\u8d85\u7ea7\u6c47$T$\u8fde\u6709\u5411\u8fb9\n\n\u4f46\u662f\uff0c\u6bcf\u4e2a\u65b9\u683c\u90fd\u6709\u76f8\u5e94\u7684\u6743\u503c\uff0c\u600e\u4e48\u529e\uff1f\u800c\u8fd9\u4e9b\u6743\u503c\u4e0e\u521a\u521a\u8fde\u7684\u6709\u5411\u8fb9\u7684\u8fb9\u6743\u53c8\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n\n\u5176\u5b9e\uff0c\u7531\u9009\u62e9\u4e00\u4e2a\u65b9\u683c\u548c\u9009\u62e9\u4e0e\u8fd9\u4e2a\u65b9\u683c\u76f8\u90bb\u7684\u65b9\u683c\u662f\u5bf9\u7acb\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u65b9\u5f0f\u7406\u89e3\uff0c\u5373\uff1a\u9009\u62e9\u4e86\u4e00\u4e2a\u65b9\u683c\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u7684\u5f97\u5230\u4e0e\u5176\u76f8\u90bb\u7684\u65b9\u683c\u7684\u6743\u503c\u4e86\u3002\u6216\u8005\u8bf4\uff0c\u539f\u672c\u6240\u6709\u7684\u65b9\u683c\u90fd\u662f\u53ef\u80fd\u88ab\u9009\u62e9\u7684\uff0c\u4f46\u662f\u4e00\u65e6\u4f60\u9009\u62e9\u4e86\u4e00\u4e2a\u65b9\u683c\uff0c\u5f97\u5230\u4e86\u5b83\u7684\u6743\u503c\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u635f\u5931\u3002\u8fd9\u6837\uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\u6211\u89c9\u5f97\u8fd9\u6709\u70b9\u50cf\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7740\u7ed9\u8fb9\u8d4b\u6743\u4e86;\n\n- \u4ece\u8d85\u7ea7\u6e90$S$\u51fa\u53d1\u6216\u8fde\u5411\u8d85\u7ea7\u6c47$T$\u7684\u8fb9\u90fd\u8d4b\u4e0a\u5bf9\u5e94\u7684\u65b9\u683c\u7684\u6743\u503c\n- \u9ed1\u8272\u65b9\u683c\u4e0e\u767d\u8272\u65b9\u683c\u4e4b\u95f4\u7684\u8fb9\u8d4b\u4e0a$INF$\n\n\u4f46\u662f\uff0c\u6211\u4eec\u7684\u9009\u62e9\u800c\u9020\u6210\u7684\u635f\u5931\u662f\u6709\u91cd\u590d\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u65b9\u683c\u5982\u679c\u5df2\u7ecf\u4e0d\u80fd\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u7531\u5b83\u4e0d\u80fd\u88ab\u9009\u62e9\u800c\u5e26\u6765\u7684\u635f\u5931\u4e0d\u4f1a\u6709\u7b2c\u4e8c\u6b21\uff0c\u800c\u4e14\u6211\u4eec\u53ef\u80fd\u4f1a\u540c\u65f6\u9009\u62e9\u4e0d\u76f8\u90bb\u7684\u9ed1\u8272\u683c\u5b50\u548c\u767d\u8272\u683c\u5b50\uff0c\u6240\u4ee5\u7528\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u65b9\u6cd5\u4f3c\u4e4e\u884c\u4e0d\u901a\u3002\u8fd9\u662f\u771f\u7684\u5417\uff1f\n\n\u56de\u5fc6\u4e00\u4e0b\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c$=$\u6240\u6709\u6b63\u70b9\u7684\u6743\u503c\u4e4b\u548c$-$\u4ece$S$\u5230$T$\u7684\u6700\u5c0f\u5272\n\n\u5176\u5b9e\uff0c\u8981\u8ba9\u9009\u53d6\u7684\u6743\u503c\u548c\u6700\u5927\uff0c\u5c31\u662f\u8981\u8ba9$S$-$T$\u7684\u5272\u6700\u5c0f\u3002\u8fd9\u65f6\uff0c\u6211\u7684\u8111\u4e2d\u95ea\u8fc7\u8001\u5e08\u7684\u4e00\u53e5\u8bdd\uff1a\u5f88\u591a\u9898\u76ee\u6b63\u7740\u505a\u5f88\u96be\u505a\uff0c\u4f46\u662f\u8003\u8651\u6240\u6c42\u7b54\u6848\u7684\u53cd\u9762\uff0c\u5c31\u5f88\u7b80\u5355\u3002\n\n~~\u554a\uff01~~ \u539f\u6765\u4e4b\u524d\u5efa\u7acb\u7684\u6a21\u578b\u4f3c\u4e4e\u5f88\u63a5\u8fd1\u6b63\u89e3\u5462\uff01\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u70b9\u90fd\u9009\uff0c\u7136\u540e\u51cf\u53bb\u6700\u5c0f\u7684\u635f\u5931\uff0c\u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5c31\u662f\u5148\u7edf\u8ba1\u6240\u6709\u65b9\u683c\u7684\u6743\u503c\u548c\uff0c\u518d\u6c42\u4e4b\u524d\u5efa\u7acb\u7684\u7f51\u7edc\u56fe\u7684\u6700\u5927\u6d41\uff08\u7b49\u4e8e\u6700\u5c0f\u5272\uff09\uff0c\u5c06\u4e24\u8005\u4e00\u505a\u5dee\uff0c\u5c31\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u6211\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 110\n#define MXN 10010\n#define MXM 20010\n#define INF 2147483600\n#define Min(a,b) ((a)<(b)?(a):(b))\nint N,M,g[MAXN][MAXN],S,T,sum;\nstruct Point {int x,y;};\nint det[4][2]={{1,0},{0,1},{-1,0},{0,-1}};\nint hd[MXN],ed[MXM<<1],val[MXM<<1],nxt[MXM<<1],tot;\nint dep[MXN],curArc[MXN]; bool inq[MXN]; queue <int> Q;\ninline int rd()\n{\n\tint ret=0,f_f=1; char c=getchar();\n\twhile(c<'0' || c>'9') {if(c=='-') f_f=-1; c=getchar();}\n\twhile(c>='0' && c<='9') ret=(ret<<1)+(ret<<3)+c-'0',c=getchar();\n\treturn ret*f_f;\n}\ninline int Transf(Point x) {return (x.x-1)*M+x.y;}\ninline void AddEdge(int u,int v,int w) {ed[++tot]=v,val[tot]=w,nxt[tot]=hd[u],hd[u]=tot;}\ninline bool Bfs()\n{\n\tfor (int i=0;i<=N*M+1;i++)\n\t\tcurArc[i]=hd[i],dep[i]=INF,inq[i]=false;\n\tdep[S]=0,inq[S]=true;\n\twhile (!Q.empty()) Q.pop(); Q.push(S);\n\twhile (!Q.empty())\n\t{\n\t\tint u=Q.front(); Q.pop(),inq[u]=false;\n\t\tfor (int p=hd[u];p!=-1;p=nxt[p])\n\t\t{\n\t\t\tint v=ed[p];\n\t\t\tif (val[p] > 0 && dep[v] > dep[u] + 1)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tif (!inq[v]) inq[v]=true,Q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T] != INF;\n}\ninline int Dfs(int u,int Flow)\n{\n\tif (u == T) return Flow;\n\tint curFlow,tot=0;\n\tfor (int p=curArc[u];p!=-1;p=nxt[p])\n\t{\n\t\tcurArc[u]=p;\n\t\tint v=ed[p];\n\t\tif (val[p] > 0 && dep[v] == dep[u] + 1)\n\t\t{\n\t\t\tcurFlow=Dfs(v,Min(val[p],Flow));\n\t\t\tif (curFlow != 0)\n\t\t\t{\n\t\t\t\tval[p]-=curFlow;\n\t\t\t\tval[p^1]+=curFlow;\n\t\t\t\tFlow-=curFlow,tot+=curFlow;\n\t\t\t\tif (Flow <= 0) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn tot;\n}\ninline int Dinic()\n{\n\tint maxFlow=0;\n\twhile (Bfs())\n\t{\n\t\tint Flow=Dfs(S,INF);\n\t\twhile (Flow != 0)\n\t\t{\n\t\t\tmaxFlow+=Flow;\n\t\t\tFlow=Dfs(S,INF);\n\t\t}\n\t}\n\treturn maxFlow;\n}\nint main()\n{\n\tN=rd(),M=rd(),S=0,T=N*M+1,sum=0;\n\tfor (int i=1;i<=N;i++)\n\t\tfor (int j=1;j<=M;j++)\n\t\t\tg[i][j]=rd(),sum+=g[i][j];\n\tmemset(hd,-1,sizeof(hd)),tot=1;\n\tfor (int i=1;i<=N;i++)\n\t\tfor (int j=1;j<=M;j++)\n\t\t{\n\t\t\tPoint u=(Point){i,j};\n\t\t\tif ((i + j) & 1)\n\t\t\t{\n\t\t\t\tfor (int k=0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tPoint v=u; v.x+=det[k][0],v.y+=det[k][1];\n\t\t\t\t\tif (v.x >= 0 && v.x <= N && v.y >= 1 && v.y <= M)\n\t\t\t\t\t\tAddEdge(Transf(u),Transf(v),INF),AddEdge(Transf(v),Transf(u),0);\n\t\t\t\t}\n\t\t\t\tAddEdge(S,Transf(u),g[i][j]),AddEdge(Transf(u),S,0);\n\t\t\t}\n\t\t\telse AddEdge(Transf(u),T,g[i][j]),AddEdge(T,Transf(u),0);\n\t\t}\n\tprintf(\"%d\",sum-Dinic());\n\treturn 0;\n}\n```",
        "postTime": 1566307395,
        "uid": 41450,
        "name": "KobeWu",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2774)\n# \u96f6.\u524d\u8bb0\n\u5df2\u7ecf\u6709\u534a\u5e74\u6ca1\u6709\u5199\u8fc7\u7f51\u7edc\u6d41\u4e86\n\n\u62ff\u9053\u7f51\u7edc\u6d41$24$\u9898\u7684\u9898\u6062\u590d\u4e00\u4e0b\u624b\u611f\n\n~~\u4e0d\u8fc7\u8fd8\u662f\u5199\u9519\u4e86\u4e00\u4e2a\u5b57\u7b26~~\n\n\u8fd9\u9053\u9898\u5c31\u662f\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41\u7684\u7ecf\u5178\u5e94\u7528\n\n# \u4e00.\u601d\u8def\n\u5982\u679c\u76f4\u63a5\u6c42\u6ca1\u6709\u76f8\u90bb\u683c\u5b50\u7684\u6700\u5927\u548c\u6bd4\u8f83\u56f0\u96be\n\n\u56e0\u4e3a\u60c5\u51b5\u5b9e\u5728\u662f\u592a\u591a\u4e86\n\n\u90a3\u6211\u4eec\u4e0d\u59a8\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\n\n\u628a\u4e0d\u53d6\u7684\u5220\u6389 \u90a3\u5269\u4e0b\u7684\u4e0d\u5c31\u662f\u76f8\u5f53\u4e8e\u53d6\u5417\n\n\u9898\u76ee\u5c31\u76f8\u5f53\u4e8e\u6c42\u600e\u4e48\u5220\u683c\u5b50\u4f7f\u5f97\u5220\u9664\u683c\u5b50\u7684\u548c\u6700\u5c0f\u4e14\u5269\u4e0b\u7684\u683c\u5b50\u6ca1\u6709\u76f8\u90bb\u7684\n\n\u800c\u5bf9\u4e8e\u65b9\u683c\u95ee\u9898\u9996\u5148\u60f3\u5230\u7684\u4e0d\u662f$dp$\u5c31\u662f\u4e8c\u5206\u56fe\u4e86\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6309\u7167\u683c\u5b50\u884c\u6570$+$\u5217\u6570\u7684\u5947\u5076\u6027\u5206\u4e2a\u4e8c\u5206\u56fe\n\n\u4f46\u662f\u8fd9\u8fd8\u4e0d\u591f\n\n\u65e2\u7136\u90fd\u8bf4\u5230\u4e8c\u5206\u56fe\u4e86\u90a3\u4e48\u81ea\u7136\u5c31\u8981\u8fde\u4e0a\u6e90\u70b9\u548c\u6c47\u70b9\u4e86\n\n\u5f97\u5230\u7684\u56fe\u5c31\u662f\u8fd9\u6837$:$\n\n![](https://s3.ax1x.com/2020/11/16/DkHMut.png)\n\n\u5176\u4e2d\u8fde\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u8fb9\u6d41\u91cf\u4e3a\u683c\u5b50\u6743\u503c\n\n\u4e2d\u95f4\u7684\u8fb9\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\n\n\u90a3\u6211\u4eec\u6700\u540e\u60f3\u5f97\u5230\u7684\u7ed3\u679c\u662f\u600e\u6837\u5462\n\n\u5047\u8bbe\u6709\u4e24\u4e2a\u70b9$a,b$\u76f8\u90bb \u90a3\u4e48\u4ed6\u4eec\u4e0d\u80fd\u540c\u65f6\u9009\n\n\u4e5f\u5c31\u662f\u8bf4\u8981\u4e0d\u7136\u5272\u6389$a$\u548c\u6e90\u70b9\u76f8\u8fde\u7684\u8fb9$($\u56fe\u4e2d\u7684$S3)$\n\n\u8981\u4e0d\u7136\u5c31\u5272\u6389$b$\u4e0e\u6c47\u70b9\u76f8\u8fde\u7684\u8fb9$($\u56fe\u4e2d\u7684$2T)$\n\n\u90a3\u6211\u4eec\u5269\u4e0b\u7684\u56fe\u5c31\u662f$S$\u8d70\u4e0d\u5230$T$\u7684\u56fe\n\n\u8fd9\u4e0d\u5c31\u662f\u6c42\u6700\u5c0f\u5272\u5417\n\n\u800c\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6253\u4e00\u4e2a\u7f51\u7edc\u6d41\u89e3\u51b3\u95ee\u9898\n\n# \u4e8c.\u5b9e\u73b0\u65b9\u6cd5\n\u6309\u524d\u9762\u6240\u8bf4\u7684\u8fde\u56fe\u518d\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u5373\u53ef\n\n\u6c42\u51fa\u6700\u5927\u6d41$maxflow$\u4e4b\u540e\n\n\u8981\u7528\u6240\u6709\u683c\u5b50\u7684\u6743\u503c\u548c\u51cf\u53bb$maxflow$\n\n# \u4e09.\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cctype>\nconst int INF=0x7fffffff;\ninline int fan(int a){return a%2==0? a-1:a+1;}\ninline int min(int a,int b){return a<b? a:b;}\ninline int R(){\n\tint r=0;char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c)) r=(r<<1)+(r<<3)+(c^48),c=getchar();\n\treturn r;\n}\nstruct node{\n\tint to,next,flow;\n}edge[410005];\nint n,m,a[35][35],num[35][35],head[1005],tot,opt=1,ans,h;\nint s,t,dis[1005],gap[1005],cur[1005];//\u7f51\u7edc\u6d41 \ninline void add(int from,int to,int flow){\n\tedge[++tot].next=head[from];\n\tedge[tot].flow=flow;\n\tedge[tot].to=to;\n\thead[from]=tot;\n\treturn ;\n}\ninline void addd(int from,int to,int flow){\n\tadd(from,to,flow);\n\tadd(to,from,0);\n}\ninline int isap(int now,int nowflow){//isap\u6a21\u677f \n\tif(now==t) return nowflow;\n\tint sum=0;\n\tfor(register int i=cur[now];i;i=edge[i].next){\n\t\tif(edge[i].flow && dis[edge[i].to]==dis[now]-1){\n\t\t\tint akak=isap(edge[i].to,min(nowflow-sum,edge[i].flow));\n\t\t\tsum+=akak;cur[now]=i;\n\t\t\tedge[i].flow-=akak;edge[fan(i)].flow+=akak;\n\t\t\tif(dis[s]==n || sum==nowflow) return sum;\n\t\t}\n\t}\n\tif(!--gap[dis[now]]) dis[s]=n;\n\tgap[++dis[now]]++;\n\tcur[now]=head[now];\n\treturn sum;\n}\nint main(){\n\tn=R();m=R();\n\ts=1;t=n*m+2;\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=m;j++){\n\t\t\ta[i][j]=R();\n\t\t\th+=a[i][j];\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=m;j++){\n\t\t\tnum[i][j]=++opt;\n\t\t\tif((i+j)%2==1){//\u6309\u7167\u70b9\u7684\u5947\u5076\u5206\u5de6\u53f3 \n\t\t\t\taddd(s,opt,a[i][j]);\n\t\t\t\tdis[opt]=2;gap[2]++;//gap\u4f18\u5316\u548cdis\u4f18\u5316 \n\t\t\t\tif(i!=1) addd(opt,num[i-1][j],INF);\n\t\t\t\tif(j!=1) addd(opt,num[i][j-1],INF);\n\t\t\t}\n\t\t\telse{\n\t\t\t\taddd(opt,t,a[i][j]);\n\t\t\t\tdis[opt]=1;gap[1]++;\n\t\t\t\tif(i!=1) addd(num[i-1][j],opt,INF);\n\t\t\t\tif(j!=1) addd(num[i][j-1],opt,INF);\n\t\t\t}\n\t\t}\n\t}\n\tdis[t]=0;gap[0]++;dis[s]=3;gap[3]++;\n\tn=opt+1;\n\tfor(register int i=1;i<=n;i++) cur[i]=head[i];//cur\u4f18\u5316 \n\twhile(dis[s]<n)\n\tans+=isap(s,INF);//\u7f51\u7edc\u6d41 \u7528\u7684\u662fisap \n\tprintf(\"%d\\n\",h-ans);\n\treturn 0;\n}\n```\n# \u56db.\u540e\u8bb0\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7ed9\u6211\u4eec\u4e09\u4e2a\u542f\u793a\n\n$1.$\u5f53\u76f4\u63a5\u53d6\u4e1c\u897f\u4e0d\u597d\u7b97\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u5220\u4e1c\u897f\n\n$2.$\u8003\u8651\u9898\u76ee\u8981\u6c42\u7684\u6700\u540e\u662f\u4ec0\u4e48\u6837\u7684\u72b6\u6001 \u6709\u4ec0\u4e48\u7279\u70b9\n\n$3.$\u65f6\u523b\u8c28\u8bb0\u6700\u5927\u6d41\u548c\u6700\u5c0f\u5272\u662f\u76f8\u7b49\u7684\n\nFinally\uff0c\u8c22\u8c22\u5927\u5bb6\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/HongseFox/solution-p2774)",
        "postTime": 1605506879,
        "uid": 93838,
        "name": "Hongse_Fox",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "> \u4f20\u9001\u95e8 [$\\looparrowright$](https://www.luogu.com.cn/problem/P2774)  \n\n## \u9898\u76ee\u63cf\u8ff0  \n&emsp;&emsp;\u6709\u4e00\u4e2a $m$ \u884c $n$ \u5217\u7684\u65b9\u683c\u56fe\uff0c\u6bcf\u4e2a\u65b9\u683c\u4e2d\u90fd\u6709\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u73b0\u8981\u4ece\u65b9\u683c\u4e2d\u53d6\u6570\uff0c\u4f7f\u4efb\u610f\u4e24\u4e2a\u6570\u6240\u5728\u65b9\u683c\u6ca1\u6709\u516c\u5171\u8fb9\uff0c\u4e14\u53d6\u51fa\u7684\u6570\u7684\u603b\u548c\u6700\u5927\uff0c\u8bf7\u6c42\u51fa\u6700\u5927\u7684\u548c\u3002  \n## \u8f93\u5165\u683c\u5f0f  \n&emsp;&emsp;\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u65b9\u683c\u56fe\u7684\u884c\u6570 $m$ \u548c\u5217\u6570 $n$\u3002  \n&emsp;&emsp;\u7b2c $2$ \u5230\u7b2c $(m + 1)$ \u884c\uff0c\u6bcf\u884c $n$ \u4e2a\u6574\u6570\uff0c\u7b2c $(i + 1)$ \u884c\u7684\u7b2c $j$ \u4e2a\u6574\u6570\u4ee3\u8868\u65b9\u683c\u56fe\u7b2c $i$ \u884c\u7b2c $j$ \u5217\u7684\u7684\u65b9\u683c\u4e2d\u7684\u6570\u5b57 $a_{i, j}$\u3002  \n## \u8f93\u51fa\u683c\u5f0f  \n&emsp;&emsp;\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u548c\u6700\u5927\u662f\u591a\u5c11\u3002  \n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b  \n### \u8f93\u5165 #1  \n> 3 3  \n> 1 2 3  \n> 3 2 3  \n> 2 3 1   \n\n### \u8f93\u51fa #1  \n> 11  \n\n## \u8bf4\u660e/\u63d0\u793a  \n### \u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a   \n&emsp;&emsp;\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 $1 \\leqslant n, m \\leqslant 100$\uff0c$1 \\leqslant a_{i, j} \\leqslant 10^5$\u3002  \n### \u63d0\u793a  \n&emsp;&emsp;\u8bf7\u6ce8\u610f\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5148\u8bfb\u5165 $m$ \u518d\u8bfb\u5165 $n$\u3002   \n## \u5206\u6790  \n&emsp;&emsp;\u9996\u5148\u660e\u786e\u9898\u610f\uff1a\u5728\u4e00\u4e2a $m\\times n$ \u7684\u65b9\u683c\u56fe\u4e2d\u53d6\u82e5\u5e72\u4e2a\u6570\uff0c\u8bbe\u53d6\u51fa\u7684\u6570\u7ec4\u6210\u53ef\u91cd\u96c6 $\\mathbb S$\uff0c$\\mathbb S$ \u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u6240\u5728\u653e\u4e2a\u4e0d\u80fd\u5728\u76f8\u90bb\uff08\u5171\u4eab\u540c\u4e00\u6761\u8fb9\uff09\uff0c\u6c42 $\\mathbb S$ \u4e2d\u6240\u6709\u5143\u7d20\u548c\u7684\u6700\u5927\u503c\u3002  \n&emsp;&emsp;\u53ef\u4ee5\u8003\u8651\u4e00\u5f00\u59cb\u53d6\u6240\u6709\u65b9\u683c\uff0c\u518d\u5220\u9664\u6743\u503c\u548c\u5c3d\u91cf\u5c0f\u7684\u65b9\u683c\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u65b9\u683c\u5408\u6cd5\u3002\u5047\u8bbe\u53d6\u4e86\u65b9\u683c $x$\uff0c\u4e0e\u5176\u76f8\u90bb\u7684\u56db\u4e2a\u65b9\u683c\u5c31\u90fd\u4e0d\u53ef\u53d6\u4e86\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u4e0e\u5176\u76f8\u90bb\u7684\u56db\u4e2a\u65b9\u683c\u7684\u6a2a\u7eb5\u5750\u6807\uff08\u884c\u4e3a\u6a2a\u5750\u6807\uff0c\u5217\u4e3a\u7eb5\u5750\u6807\uff09\u4e4b\u548c\u540c $x$ \u7684\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u76f8\u5dee $1$\uff0c\u76f8\u5dee $1$ \u610f\u5473\u7740\u5947\u5076\u6027\u4e0d\u76f8\u540c\u3002\u53ef\u89c1\uff0c\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u7684\u5947\u5076\u6027\u76f8\u540c\u7684\u4e24\u4e2a\u70b9**\u4e00\u5b9a**\u53ef\u4ee5\u540c\u65f6\u9009\u53d6\uff0c\u800c\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e0d\u540c\u7684\u4e24\u70b9**\u53ef\u80fd**\u4f1a\u4ea7\u751f**\u51b2\u7a81**\u3002\u6839\u636e\u8fd9\u4e00\u7279\u6027\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e8c\u5206\u56fe\uff0c\u5c06\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5076\u6570\u7684\u70b9\u653e\u5165\u5de6\u90e8\uff0c\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5947\u6570\u7684\u70b9\u653e\u5165\u53f3\u90e8\u3002    \n&emsp;&emsp;\u4e8c\u5206\u56fe\u95ee\u9898\u5f80\u5f80\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u3002\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9 $s$ \u548c\u8d85\u7ea7\u6c47\u70b9 $t$\uff0c$s$ \u5411\u5404\u4e2a\u5de6\u90e8\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u65b9\u683c\u7684\u6570\u5b57\uff1b\u5404\u4e2a\u53f3\u90e8\u70b9\u5411 $t$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u65b9\u683c\u7684\u6570\u5b57\uff1b$s$ \u7684\u51fa\u8fb9\u548c $t$ \u7684\u5165\u8fb9\u90fd\u5b58\u5728\uff0c\u4ee3\u8868\u4e00\u5f00\u59cb\u9009\u53d6\u6240\u6709\u65b9\u683c\u4e2d\u7684\u6570\uff1b\u82e5\u5272\u53bb $s$ \u7684\u4e00\u6761\u5165\u8fb9\uff0c\u90a3\u4e48\u8be5\u8fb9\u6307\u5411\u7684\u8282\u70b9\u6240\u4ee3\u8868\u7684\u65b9\u683c\u5c31\u4e0d\u4f1a\u88ab\u9009\u53d6\u3002\u63a5\u7740\u5728\u5de6\u53f3\u4e24\u90e8\u8282\u70b9\u4e4b\u95f4\u5efa\u8fb9\uff0c\u5de6\u90e8\u5404\u4e2a\u70b9\u5411\u5176\u4e92\u76f8\u51b2\u7a81\u7684\u81f3\u591a\u56db\u4e2a\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u53f3\u90e8\u70b9\u8fde\u8fb9\uff1b\u8fd9\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u4ece $s$ \u5230 $t$ \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e00\u5b9a\u4f1a\u5305\u542b\u4e00\u5bf9\u4e92\u76f8\u51b2\u7a81\u7684\u8282\u70b9\uff0c\u8bbe\u4e3a $a,b$\uff0c\u610f\u5473\u7740\u5b58\u5728 $s$ \u5230 $a$ \u7684\u8fb9\u548c $b$ \u5230 $t$ \u7684\u8fb9\uff0c\u5373\u4e24\u4e2a\u51b2\u7a81\u7684\u65b9\u683c\u540c\u65f6\u88ab\u9009\u53d6\uff1b\u6211\u4eec\u7684\u4efb\u52a1\u662f\u5272\u53bb\u4e00\u4e9b $s$ \u7684\u51fa\u8fb9\u548c $t$ \u7684\u5165\u8fb9\uff0c\u4f7f\u5f97 $s$ \u548c $t$ \u4e92\u4e0d\u76f8\u901a\uff0c\u4e14\u5272\u53bb\u7684\u8fb9\u7684\u8fb9\u6743\u8981\u5c3d\u91cf\u5c0f\uff0c\u8fd9\u5c31\u8054\u60f3\u5230\u4e86\u6700\u5c0f\u5272\u3002\u5c06\u5de6\u53f3\u4e24\u90e8\u4e4b\u95f4\u7684\u8fb9\u7684\u8fb9\u6743\u8bbe\u4e3a $+\\infty$\uff0c\u8be5\u7f51\u7edc\u6700\u5c0f\u5272\u5373\u4e3a\u8981\u820d\u5f03\u7684\u65b9\u683c\u4e2d\u7684\u6570\u7684\u603b\u548c\uff0c\u6240\u6709\u65b9\u683c\u4e2d\u6570\u5b57\u7684\u548c\u51cf\u53bb\u820d\u5f03\u65b9\u683c\u4e2d\u7684\u6570\u7684\u603b\u548c\u5373\u4e3a\u7b54\u6848\u3002   \n&emsp;&emsp;\u6700\u540e\uff0c\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\uff0c\u5efa\u5b8c\u56fe\u8dd1\u4e00\u904d $\\text{Dinic}$ \u7b97\u6cd5\u5373\u53ef\u3002  \n\n## \u4ee3\u7801  \n```cpp\n/******************************************************************\nCopyright: 11D_Beyonder All Rights Reserved\nAuthor: 11D_Beyonder\nProblem ID: \u6d1b\u8c37 P2774\nDate: 7/27/2020\nDescription: Minimum Cut\n*******************************************************************/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int MAX_POINT=10023;\nconst int MAX_EDGE=100024;\nconst int inf=0x3f3f3f3f;\nconst int dx[]={-1,1,0,0};\nconst int dy[]={0,0,-1,1};\nstruct E\n{\n\tint to;\n\tint cap;\n\tint Next=-1;\n}edge[MAX_EDGE];\nint head[MAX_POINT],tot;\nint s,t;\nint depth[MAX_POINT];\nint m,n;\nvoid init();\ninline void add_edge(int,int,int);\ninline int ID(int,int);\nbool bfs();\nint dfs(int,int);\nint Dinic();\nint main()\n{\n\tint i,j,k;\n\tint sum=0;\n\tcin>>m>>n;\n\tinit();\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tint val;\n\t\t\tscanf(\"%d\",&val);\n\t\t\tsum+=val;\n\t\t\tif((i+j)&1) add_edge(ID(i,j),t,val);//\u53f3\u90e8\n\t\t\telse//\u5de6\u90e8\n\t\t\t{\n\t\t\t\tadd_edge(s,ID(i,j),val);\n\t\t\t\tfor(k=0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tint x=i+dx[k];//\u884c\n\t\t\t\t\tint y=j+dy[k];//\u5217\n\t\t\t\t\tif(x<1||x>m||y<1||y>n) continue;\n\t\t\t\t\tadd_edge(ID(i,j),ID(x,y),inf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<sum-Dinic()<<endl;\n\treturn 0;\n}\nvoid init()\n{\n\ttot=1;\n\tmemset(head,-1,sizeof(head));\n\ts=0;\n\tt=n*m+1;\n}\ninline int ID(int x,int y) {return (x-1)*n+y;}\ninline void add_edge(int u,int v,int cap)\n{\n\ttot++;\n\tedge[tot].to=v;\n\tedge[tot].cap=cap;\n\tedge[tot].Next=head[u];\n\thead[u]=tot;\n\t//\u5efa\u7acb\u53cd\u8fb9\n\ttot++;\n\tedge[tot].to=u;\n\tedge[tot].cap=0;\n\tedge[tot].Next=head[v];\n\thead[v]=tot;\n}\nbool bfs()\n{\n\tmemset(depth,0,sizeof(depth));\n\tqueue<int>q;\n\tq.push(s);\n\tdepth[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];~i;i=edge[i].Next)\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\t//\u6b8b\u91cf\u7f51\u7edc\u4e0a\u6784\u5efa\u5206\u5c42\u56fe\n\t\t\tif(edge[i].cap&&!depth[y])\n\t\t\t{\n\t\t\t\tq.push(y);\n\t\t\t\tdepth[y]=depth[x]+1;\n\t\t\t\tif(y==t) return 1;//\u6c47\u70b9\u53ef\u8fbe\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow)//\u5f53\u524d\u8282\u70b9 \u5f53\u524d\u6d41\u91cf\n{\n\t//dfs \u8fd4\u56de\u6b8b\u91cf\u7f51\u7edc\u4e0a\u53ef\u589e\u5e7f\u7684\u6d41\u91cf\n\tif(x==t) return flow;\n\tint rest=flow;//rest \u5269\u4f59\u6d41\u91cf\n\tint temp;\n\tfor(register int i=head[x];~i&&rest;i=edge[i].Next)\n\t{\n\t\tint y=edge[i].to;\n\t\tif(edge[i].cap&&depth[y]==depth[x]+1)\n\t\t{\n\t\t\ttemp=dfs(y,min(rest,edge[i].cap));\n\t\t\tif(!temp) depth[y]=0;//\u526a\u679d \u53bb\u6389\u589e\u5e7f\u5b8c\u6bd5\u7684\u70b9\n\t\t\tedge[i].cap-=temp;\n\t\t\tedge[i^1].cap+=temp;\n\t\t\trest-=temp;\n\t\t}\n\t}\n\treturn flow-rest;\n}\nint Dinic()\n{\n\tint maxflow=0;\n\twhile(bfs()) maxflow+=dfs(s,inf);\n\treturn maxflow;\n}\n```\n## \u540e\u8bb0  \n&emsp;&emsp;\u4f4d\u4e8e\u7b2c $x$ \u884c\uff0c\u7b2c $y$ \u5217\u7684\u70b9\u7684\u7f16\u53f7\u4e3a $(x-1)n+y$\uff1b\u4e00\u5f00\u59cb\u6ca1\u641e\u5bf9\uff0c\u5bfc\u81f4\u6709\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u4e00\u76f4\u8fc7\u4e0d\u53bb\u3002  ",
        "postTime": 1595946380,
        "uid": 253240,
        "name": "11D_Beyonder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "# \u672c\u4eba\u7684\u9898\u89e3\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2774)\n\n0. \u8fd9\u9053\u9898\u76ee\u89e3\u6cd5\u5f88\u5999\uff0c\u4e3b\u8981\u7528\u5230\u4e86\u6700\u5927\u548c=\u603b\u548c-\u6700\u5c0f\u820d\u5f03\u548c\u3002\n\n   \u6700\u5c0f\u820d\u5f03\u548c\u5373\u6700\u5c0f\u5272\uff08\u6211\u4eec\u6784\u9020\u51fa\u4e00\u4e2a\u4e8c\u5206\u56fe\u6ee1\u8db3\u5272\u6389=\u820d\u53bb\uff09\uff0c\u6211\u4eec\u53c8\u77e5\u6700\u5c0f\u5272=\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u662f\u4e00\u9053\u6700\u5927\u6d41\u95ee\u9898\u3002\n\n1. \u8003\u8651\u5efa\u56fe\uff1a\n\n   \u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981\u4e24\u4e2a\u70b9\u76f8\u90bb\uff08\u4e0d\u517c\u5bb9\uff09\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u548c\u7684\u5947\u5076\u6027\u4e00\u5b9a\u4e0d\u540c\uff0c\u5373\n\n   $(x_i+y_i)\\bmod 2 \\neq (x_j+y_j)\\bmod 2$\n\n   \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6574\u4e2a\u56fe\u5206\u6210$(x_i+y_i)\\bmod 2=0$\u7684\u70b9\u96c6\u548c$(x_i+y_i)\\bmod 2=1$\u7684\u70b9\u96c6\u3002\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e8c\u5206\u56fe\u3002\n\n1. \u8003\u8651\u6784\u56fe\uff1a\n\n   \u5c06\u8fd9\u4e24\u4e2a\u70b9\u96c6\u5206\u522b\u5168\u90e8\u8fde\u5411$S$\u548c$T$\uff08\u8fb9\u6743\u5373\u4e3a\u6b64\u65b9\u683c\u4e2d\u7684\u6570\uff09\uff0c\u4e2d\u95f4\u76f8\u90bb\u70b9\u8fde\u8fb9\uff08\u8fb9\u6743\u4e3a$INF$\uff09\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u5f62\u6210\u6700\u5c0f\u5272\u65f6\uff0c\u56fe\u7684\u4e2d\u95f4\u6240\u6709\u8fb9\u90fd\u6ca1\u88ab\u5220\uff0c\u4e5f\u5c31\u8fbe\u6210\u4e86\u5272\u6389=\u820d\u53bb\u8fd9\u4e00\u76ee\u7684\u3002\n   \n   \u6700\u7ec8\uff0c\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n   \n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing namespace std;\nconst int N=20000+21,INF=0x3f3f3f3f;\nstruct Edge{int u,v,w,nxt;}e[N*100];\nstruct Node{int u,val;bool operator <(const Node &a)const{return val<a.val;};};\npriority_queue<Node>q;//HLPP\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\nint dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};\nint h[N],gap[N],flow[N],d[N];\nbool vis[N];\nint n,m,s,t,sum,tot=1;\ninline int getnum(int x,int y){return (x-1)*m+y;}\ninline bool check(int x,int y){return x>=1&&x<=n&&y>=1&&y<=m;}\ninline void add(int u,int v,int w){//\u522b\u5fd8\u4e86\u53cd\u5411\u8fb9\n\te[++tot]=(Edge){u,v,w,h[u]};h[u]=tot;\n\te[++tot]=(Edge){v,u,0,h[v]};h[v]=tot;\n}\nbool bfs(){\n\tmemset(d,-1,sizeof(d));\n\tqueue<int>Q;\n\tQ.push(t);//HLPP\u53cd\u5411\u5efa\u8fb9\n\td[t]=0;\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=h[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v,w=e[i^1].w;//\u6ce8\u610f\u53cd\u5411\u8fb9\n\t\t\tif(d[v]==-1&&w){\n\t\t\t\td[v]=d[u]+1;\n\t\t\t\tQ.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn d[s]!=-1;\n}\nvoid Init(){//\u961f\u5217\u521d\u59cb\u5316\n\tfor(int i=h[s];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(w){\n\t\t\te[i].w=0,e[i^1].w=w;\n\t\t\tflow[s]-=w,flow[v]+=w;\n\t\t\tif(v!=s&&v!=t&&!vis[v]){\n\t\t\t\tvis[v]=1;\n\t\t\t\tq.push((Node){v,d[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Push(int u){//\u626b\u63cf\u5230u\u70b9\uff0c\u628au\u70b9\u7684\u6d41\u5f80\u4e0b\u63a8\u8fdb\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(d[u]==d[v]+1&&w){\n\t\t\tint f=min(flow[u],w);\n\t\t\te[i].w-=f,e[i^1].w+=f;\n\t\t\tflow[u]-=f,flow[v]+=f;\n\t\t\tif(v!=s&&v!=t&&!vis[v]){\n\t\t\t\tvis[v]=1;\n\t\t\t\tq.push((Node){v,d[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Gap(int u){//\u65ad\u5c42\u4f18\u5316\uff0c\u628a\u6240\u6709\u70b9\u7684\u5c42\u6570\u90fd\u6539\u4e3a\u6e90\u70b9+1\uff0c\u4f7f\u5176\u5c3d\u5feb\u6d41\u56de\u6e90\u70b9\n\tfor(int i=1;i<=n*m;++i){\n\t\tif(i!=s&&i!=t&&d[i]>d[u]&&d[i]<=n) d[i]=n+1;\n\t}\n}\nvoid Relabel(int u){//\u628au\u70b9\u7684\u5c42\u8bbe\u4e3a\u5b83\u8fde\u5411\u7684\u70b9\u4e2d\u6700\u5c0f\u7684\u5c42\u6570+1\uff0c\u4fdd\u8bc1\u80fd\u6d41\n\td[u]=INF;\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(w) d[u]=min(d[u],d[v]);\n\t}\n\td[u]++;\n}\nint HLPP(){\n\tif(!bfs()) return 0;\n\tmemset(gap,0,sizeof(gap));\n\tmemset(flow,0,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\td[s]=n;\n\tfor(int i=1;i<=n*m;++i){\n\t\tif(d[i]!=-1) gap[d[i]]++;\n\t}\n\tInit();\n\twhile(!q.empty()){\n\t\tint u=q.top().u;\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tPush(u);\n\t\tif(flow[u]){\n\t\t\tgap[d[u]]--;\n\t\t\tif(!gap[d[u]]) Gap(u);\n\t\t\tRelabel(u);\n\t\t\tgap[d[u]]++;\n\t\t\tvis[u]=1;\n\t\t\tq.push((Node){u,d[u]});\n\t\t}\n\t}\n\treturn flow[t];//\u6700\u7ec8\u63a8\u5230\u6c47\u70b9\u7684\u5c31\u662f\u6700\u5927\u6d41\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);s=n*m+1,t=n*m+2;\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1,w;j<=m;++j){\n\t\t\tbool ok=0;\n\t\t\tscanf(\"%d\",&w);\n\t\t\tsum+=w;//\u603b\u548c\n\t\t\tint k=getnum(i,j);\n            //\u6784\u9020\u4e8c\u5206\u56fe\n\t\t\tif((i+j)%2) add(s,k,w),ok=1;//\u4e00\u4e2a\u96c6\u8fde\u5411\u6e90\u70b9\n\t\t\telse add(k,t,w);//\u53e6\u4e00\u4e2a\u96c6\u8fde\u5411\u6c47\u70b9\n\t\t\tif(ok){\n\t\t\t\tfor(int q=0;q<4;++q){\n\t\t\t\t\tint ex=i+dx[q],ey=j+dy[q];\n\t\t\t\t\tif(check(ex,ey)){\n\t\t\t\t\t\tint p=getnum(ex,ey);\n\t\t\t\t\t\tif((ex+ey)%2) swap(k,p);\n\t\t\t\t\t\tadd(k,p,INF);//\u76f8\u90bb\u70b9\u8fde\u8fb9\uff0c\u6ce8\u610f\u987a\u5e8f\u554a\uff01\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\n\tint ans=sum-HLPP();//\u6211\u4f7f\u7528\u7684\u662fHLPP\u9884\u7559\u63a8\u8fdb\u6765\u505a\u8fd9\u4e2a\u9898\u7684\uff0c\u6ca1\u5b66\u8fc7\u7684\u8bf7\u53f3\u8f6c\u677f\u5b50\u9898P4722\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n## \u521d\u5b66HLPP\uff0c\u677f\u5b50\u4e0d\u597d\u770b\uff0c\u8bf7\u5404\u4f4d\u5de8\u4f6c\u795e\u7287\u89c1\u8c05\u3002\n\n# \u8c22\u8c22\u5927\u5bb6\uff01",
        "postTime": 1582508426,
        "uid": 160484,
        "name": "cunzai_zsy0531",
        "ccfLevel": 7,
        "title": "P2774\u9898\u89e3"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a $n~\\times~m$ \u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u9009\u62e9\u4e00\u4e9b\u4e92\u4e0d\u76f8\u90bb\u7684\u6570\uff0c\u6700\u5927\u5316\u6743\u503c\u548c\n\n## Limitation\n\n$1~\\leq~n,~m~\\leq~100$\n\n## Solution\n\n\u7531\u4e8e\u6570\u5fc5\u987b\u4e92\u4e0d\u76f8\u90bb\uff0c\u8003\u8651\u4e8c\u5206\u56fe\u3002\n\n\u5c06\u77e9\u9635\u67d3\u6210\u4e8c\u5206\u56fe\uff0c\u76f8\u90bb\u7684\u683c\u5b50\u8fde\u8fb9\uff0c\u8fd9\u6837\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u80fd\u88ab\u540c\u65f6\u9009\u62e9\uff0c\u95ee\u9898\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e8c\u5206\u56fe\u4e0a\u7684\u6700\u5927\u5e26\u6743\u72ec\u7acb\u96c6\u95ee\u9898\u3002\n\n\u6709\u5173\u4e8c\u5206\u56fe\u7684\u51e0\u4e2a\u5b9a\u7406\uff1a\n\n**\u4e8c\u5206\u56fe\u6700\u5c0f\u65e0\u6743\u70b9\u8986\u76d6 = \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d**\n\n**\u4e8c\u5206\u56fe\u6700\u5c0f\u65e0\u6743\u8fb9\u8986\u76d6 = \u603b\u70b9\u6570 - \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d**\n\n**\u4e8c\u5206\u56fe\u6700\u5927\u65e0\u6743\u72ec\u7acb\u96c6 = \u603b\u70b9\u6570 - \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d**\n\n\u5982\u679c\u70b9\u5e26\u70b9 **\u6b63** \u6743\uff0c\u5219\u6e90\u70b9\u5411\u5de6\u90e8\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff0c\u53f3\u90e8\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff0c\u539f\u8fb9\u4fdd\u7559\uff0c\u5bb9\u91cf\u65e0\u7a77\u3002\n\n**\u4e8c\u5206\u56fe\u6700\u5c0f\u6743\u70b9\u8986\u76d6 = \u6700\u5c0f\u5272**\n\n**\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6 = \u70b9\u6743\u548c - \u6700\u5c0f\u5272**\n\n\u6700\u5c0f\u70b9\u6743\u8986\u76d6\u7684\u8bc1\u660e\u4e0e\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u8bc1\u660e\u7c7b\u4f3c\uff0c\u8bc1\u660e\u5728[\u8fd9\u91cc](https://www.cnblogs.com/yifusuyi/p/10544280.html)\uff0c\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u8bc1\u660e\u9700\u8981 \u6700\u5927\u72ec\u7acb\u96c6 = \u5168\u96c6 - \u6700\u5c0f\u70b9\u8986\u76d6 \u7684\u5f15\u7406\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n  const int L = 1000000;\n  char buf[L], *front=buf, *end=buf;\n  char GetChar() {\n    if (front == end) {\n      end = buf + fread(front = buf, 1, L, stdin);\n      if (front == end) return -1;\n    }\n    return *(front++);\n  }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n  char ch = IPT::GetChar(), lst = ' ';\n  while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n  if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n  char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n  if (x < 0) {x = -x, putchar('-');}\n  int top=0;\n  do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n  while (top) putchar(OPT::buf[top--]);\n  if (pt) putchar(aft);\n}\n\nconst int maxn = 10010;\nconst int maxm = 105;\nconst int INF = 100000000;\n\nstruct Edge {\n  int u, v, flow;\n  Edge *nxt, *bk;\n\n  Edge(const int _u, const int _v, const int _flow, Edge* &h) {\n    this->u = _u; this->v = _v; this->flow = _flow; this->nxt = h; h = this;\n  }\n};\nEdge *hd[maxn], *fir[maxn];\ninline void cont(const int _u, const int _v, const int _flow) {\n  auto u = new Edge(_u, _v, _flow, hd[_u]), v = new Edge(_v, _u, 0, hd[_v]);\n  (u->bk = v)->bk = u;\n}\n\nint n, m, s, t, ans;\nint MU[maxn], id[maxm][maxm], col[maxm][maxm], dist[maxn];\nstd::queue<int>Q;\n\nbool bfs();\nint dfs(const int u, int canag);\nvoid link(const int x, const int y);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n); qr(m);\n  for (int i = 1; i <= n; ++i) \n    for (int j = 1; j <= m; ++j) {\n      qr(MU[id[i][j] = ++t]);\n      ans += MU[t];\n    }\n  s = ++t; ++t;\n  for (int i = 1; i <= n; ++i) {\n    if ((col[i][1] = col[i - 1][1] ^ 1))\n      link(i, 1);\n    else \n      cont(id[i][1], t, MU[id[i][1]]);\n    for (int j = 2; j <= m; ++j) \n      if ((col[i][j] = col[i][j - 1] ^ 1))\n        link(i, j);\n      else\n        cont(id[i][j], t, MU[id[i][j]]);\n  }\n\n  while (bfs()) {\n    for (int i = 1; i <= t; ++i) fir[i] = hd[i];\n    ans -= dfs(s, INF);\n  }\n\n  qw(ans, '\\n', true);\n  return 0;\n}\n\nbool bfs() {\n  memset(dist, 0, sizeof dist);\n  Q.push(s); dist[s] = 1;\n  while (!Q.empty()) {\n    int u = Q.front(); Q.pop();\n    for (auto e = hd[u]; e; e = e->nxt) if (e->flow > 0) {\n      int v = e->v;\n      if (dist[v]) continue;\n      dist[v] = dist[u] + 1;\n      Q.push(v);\n    }\n  }\n  return dist[t];\n}\n\nint dfs(const int u, int canag) {\n  if ((u == t) || (!canag)) return canag;\n  int _f = 0;\n  for (auto &e = fir[u]; e; e = e->nxt) if (e->flow > 0) {\n    int v = e->v;\n    if (dist[v] != (dist[u] + 1)) continue;\n    int f = dfs(v, std::min(canag, e->flow));\n    e->flow -= f; e->bk->flow += f; _f += f;\n    if (!(canag -= f)) break;\n  }\n  return _f;\n}\n\nvoid link(const int x, const int y) {\n  int u = id[x][y];\n  cont(s, u, MU[u]);\n  if (x > 1) cont(u, id[x - 1][y], INF);\n  if (y < m) cont(u, id[x][y + 1], INF);\n  if (y > 1) cont(u, id[x][y - 1], INF);\n  if (x < n) cont(u, id[x + 1][y], INF);\n}\n```",
        "postTime": 1552880924,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u4e8c\u5206\u56fe\u6a21\u578b\u5341\u5206\u5957\u8def\uff0c\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u5e26\u6743\u6700\u5927\u72ec\u7acb\u96c6\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6=\u6240\u6709\u7684\u70b9\u6743-\u6700\u5c0f\u70b9\u8986\u76d6\u6570\uff08\u7528\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u8fb9\uff09\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\u56e0\u4e3a\u6240\u6709\u7684\u8fb9\u5df2\u7ecf\u88ab\u6700\u5c0f\u70b9\u8986\u76d6\u70b9\u96c6\u4e2d\u7684\u70b9\u8986\u76d6\u4e86\uff0c\u90a3\u4e48\u5220\u6389\u8fd9\u4e9b\u70b9\u5c31\u662f\u5220\u6389\u6240\u6709\u8fb9\uff0c\u5269\u4e0b\u7684\u70b9\u90fd\u662f\u4e0d\u8054\u901a\u4e14\u6700\u5927\u7684\u3002\n\n\u800c\u6839\u636eK\u00f6nig\u5b9a\u7406\uff0c\u6700\u5c0f\u70b9\u8986\u76d6=\u6700\u5927\u5339\u914d\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u6c42\u6700\u5927\u5339\u914d\u5c31\u597d\u4e86\u3002\n\n\uff08\u5410\u69fd\u4e00\u4e0b\uff1a\u8fd9\u4e2a\u5b9a\u7406\u7f51\u4e0a\u8bc1\u660e\u5e76\u4e0d\u591a\uff0c\u800c\u4e14\u8bb8\u591a\u8bc1\u660e\u90fd\u662f\u7528\u201c\u663e\u7136\u201d\u6df7\u8fc7\u53bb\u4e86\u5173\u952e\u70b9\uff0c\u5176\u4ed6\u9898\u89e3\u4e5f\u6ca1\u6709\u8bf4\u4e3a\u4ec0\u4e48\u662f\u603b\u70b9\u6743-\u6700\u5c0f\u5272\uff0c\u8fd9\u91cc\u63a8\u8350[Matrix67\u7684\u8bc1\u660e](http://www.matrix67.com/blog/archives/116#comment-4409)\uff09\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u6a2a\u7eb5\u5750\u6807\u5947\u5076\u6027\u76f8\u540c\u7684\u70b9\u653e\u5728\u4e8c\u5206\u56fe\u7684\u4e00\u4fa7\uff0c\u5bf9\u76f8\u90bb\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u9650\u7684\u8fb9\uff0c\u4e8c\u5206\u56fe\u4e24\u4fa7\u7684\u70b9\u5206\u522b\u5411\u6e90\u70b9\u548c\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\uff0c\u4e4b\u540e\u8dd1\u4e00\u8fb9\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct node{\n\tint x,y,next,z;\n}w[2000001];\nint tail,m,deep[110][110],head[110][110],a[110][110];\nint heap,n,team[10010][2],cnt,tim,sum,ans,o[110][110];\nint dx[5]={0,-1,0,1,0},dy[5]={0,0,-1,0,1};\ninline void add(int x1,int y1,int x2,int y2,int z){\n\tw[cnt].next=head[x1][y1];\n\tw[cnt].x=x2; w[cnt].y=y2;\n\tw[cnt].z=z; head[x1][y1]=cnt; cnt++;\n}\ninline bool bfs(){\n\theap=tail=1; tim++; o[0][0]=tim;\n\tteam[heap][0]=team[heap][1]=0;\n\tdeep[0][0]=1;\n\twhile (heap<=tail){\n\t\tint x=team[heap][0],y=team[heap][1];\n\t\tfor (int i=head[x][y]; i!=-1; i=w[i].next){\n\t\t\tif (w[i].z&&o[w[i].x][w[i].y]!=tim){\n\t\t\t\ttail++; o[w[i].x][w[i].y]=tim;\n\t\t\t\tdeep[w[i].x][w[i].y]=deep[x][y]+1;\n\t\t\t\tteam[tail][0]=w[i].x; team[tail][1]=w[i].y;\n\t\t\t}\n\t\t}\n\t\theap++;\n\t}\n\treturn (o[n+1][m+1]==tim);\n}\nint dfs(int x,int y,int l){\n\tif ((!l)||(x==n+1&&y==m+1)) return l;\n\tint used=0,minn,z;\n\tfor (int i=head[x][y]; i!=-1; i=w[i].next){\n\t\tif (deep[w[i].x][w[i].y]==deep[x][y]+1&&w[i].z){\n\t\t\tminn=min(l-used,w[i].z);\n\t\t\tz=dfs(w[i].x,w[i].y,minn);\n\t\t\tif (z){\n\t\t\t\tw[i].z-=z; w[i^1].z+=z;\n\t\t\t\tused+=z; if (used==l) break;\n\t\t\t}\n\t\t}\n\t}\n\tif (!used) deep[x][y]=0;\n\treturn used;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1; i<=n; i++)\n\t\tfor (int j=1; j<=m; j++){\n\t\t\tscanf(\"%d\",&a[i][j]); sum+=a[i][j];\n\t\t}\n\tmemset(head,-1,sizeof(head));\n\tfor (int i=1; i<=n; i++)\n\t\tfor (int j=1; j<=m; j++){\n\t\t\tif (i%2==j%2){\n\t\t\t\tadd(0,0,i,j,a[i][j]);\n\t\t\t\tadd(i,j,0,0,0);\n\t\t\t\tfor (int k=1; k<=4; k++){\n\t\t\t\t\tif (i+dx[k]<=0||i+dx[k]>n) continue;\n\t\t\t\t\tif (j+dy[k]<=0||j+dy[k]>m) continue;\n\t\t\t\t\tadd(i,j,i+dx[k],j+dy[k],1e9);\n\t\t\t\t\tadd(i+dx[k],j+dy[k],i,j,0);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tadd(i,j,n+1,m+1,a[i][j]);\n\t\t\t\tadd(n+1,m+1,i,j,0);\n\t\t\t}\n\t\t}\n\twhile (bfs()) ans+=dfs(0,0,1e9);\n\tprintf(\"%d\\n\",sum-ans);\n\treturn 0;\n}\n```",
        "postTime": 1546653153,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2774)\n\n\u8fd9\u9053\u9898\u548c[\u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.org/problemnew/show/P3355)\u57fa\u672c\u6ca1\u5dee\uff0c\u8fd9\u662f[P3355\u7684\u9898\u89e3](https://www.luogu.org/blog/PopulusEuphratica/luogup3355-qi-shi-gong-cun-wen-ti)\n\n\u5728\u8fd9\u9053\u9898\u91cc\uff0c\u6211\u4eec\u53ea\u8981\u628a\u8fb9\u6743\u4ece1\u6539\u5230num[i][j]\u5c31\u53ef\u4ee5\u6c34\u8fc7\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define min(X,Y) ((X)<(Y)?(X):(Y))\n\nint num[101][101],head[20001],nxt[200001],b[200001],v[200001],k=1,n,m;\nint p[20001],dis[20001],q[20001],h,t,S,T;\nvoid push(int s,int t,int val){\n\tnxt[++k]=head[s];\n\thead[s]=k;\n\tb[k]=t;\n\tv[k]=val;\n}\nvoid link(int s,int t,int val){\n\tpush(s,t,val);\n\tpush(t,s,0);\n}\nbool bfs(){\n\tmemset(dis,0,sizeof dis);\n\tdis[S]=1;\n\th=t=0;\n\tq[++t]=S;\n\twhile(h<t){\n\t\t++h;\n\t\tfor(int i=head[q[h]];i;i=nxt[i])\n\t\t\tif(v[i]&&!dis[b[i]]){\n\t\t\t\tdis[b[i]]=dis[q[h]]+1;\n\t\t\t\tq[++t]=b[i];\n\t\t\t\tif(b[i]==T)return 1;\n\t\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow){\n\tif(x==T||!flow)return flow;\n\tint used=0;\n\tfor(int i=p[x];i;i=nxt[i])\n\t\tif(v[i]&&dis[b[i]]==dis[x]+1){\n\t\t\tint w=dfs(b[i],min(flow-used,v[i]));\n\t\t\tv[i]-=w;\n\t\t\tv[i^1]+=w;\n\t\t\tused+=w;\n\t\t\tif(w)p[x]=i;\n\t\t\tif(used==flow)return flow;\n\t\t}\n\tif(!used)dis[x]=0;\n\treturn used;\n}\nvoid check(int a,int b,int c,int d){\n\tif(!c||!d)return;\n\tif(c>n||d>m)return;\n\tlink((a-1)*m+b,(c-1)*m+d,0x7f7f7f7f);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tscanf(\"%d\",&num[i][j]),ans+=num[i][j];\n\tS=0,T=n*m+1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(((i+j)&1)==1){\n\t\t\t\tlink(S,(i-1)*m+j,num[i][j]);\n\t\t\t\tcheck(i,j,i-1,j);\n\t\t\t\tcheck(i,j,i+1,j);\n\t\t\t\tcheck(i,j,i,j-1);\n\t\t\t\tcheck(i,j,i,j+1);\n\t\t\t}\n\t\t\telse link((i-1)*m+j,T,num[i][j]);\n\twhile(bfs()){\n\t\tmemcpy(p,head,sizeof p);\n\t\tans-=dfs(S,0x7f7f7f7f);\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1533559236,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898"
    },
    {
        "content": "\n### \u3010\u9898\u76ee\u5927\u610f\u3011\n\n- \u5728\u4e00\u4e2a\u6709m*n\u4e2a\u65b9\u683c\u7684\u68cb\u76d8\u4e2d\uff0c\u6bcf\u4e2a\u65b9\u683c\u4e2d\u6709\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u73b0\u8981\u4ece\u65b9\u683c\u4e2d\u53d6\u6570\uff0c\u4f7f\u4efb\u610f2\u4e2a\u6570\u6240\u5728\u65b9\u683c\u6ca1\u6709\u516c\u5171\u8fb9\uff0c\u8f93\u51fa\u53d6\u51fa\u7684\u6570\u7684\u6700\u5927\u603b\u548c\u3002\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n\n- \u9898\u76ee\u8981\u6c42\u7684\u662f\u53d6\u51fa\u7684\u6570\u548c\u6700\u5927\uff0c\u5176\u5b9e\u5c31\u662f\u5220\u9664\u548c\u6700\u5c0f\u7684\u6570\uff0c\u4f7f\u65b9\u6848\u5408\u6cd5\uff0c\u7136\u540e\u7528\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u7684\u548c\u3002\n\n- \u67d3\u8272\u3002\u56e0\u4e3a\u53ea\u6709\u76f8\u90bb\u7684\u65b9\u683c\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u90a3\u4e48\u628a\u76f8\u90bb\u7684\u65b9\u683c\u67d3\u6210\u4e0d\u540c\u7684\u989c\u8272\u5c31\u884c\u4e86\u3002\n\n- \u6784\u56fe\u3002\u6e90\u70b9\u8fde\u63a5\u7740\u6bcf\u4e00\u4e2a\u7ea2\u8272\u65b9\u683c\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f\u6bcf\u4e00\u4e2a\u7ea2\u8272\u65b9\u683c\u7684\u6570\uff1b\u6bcf\u4e00\u4e2a\u7ea2\u8272\u65b9\u683c\u8fde\u63a5\u7740\u53d1\u751f\u51b2\u7a81\u7684\u9ec4\u8272\u65b9\u683c\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f1\uff1b\u6bcf\u4e00\u4e2a\u9ec4\u8272\u65b9\u683c\u8fde\u63a5\u7740\u6c47\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f\u6bcf\u4e00\u4e2a\u9ec4\u8272\u65b9\u683c\u7684\u6570\u3002\n\n- \u6c42\u51fa\u4e86\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u5272\uff0c\u5c31\u662f\u5220\u9664\u7684\u6700\u5c0f\u548c\uff0c\u7528\u603b\u548c\u51cf\u53bb\u5b83\u5c31\u884c\u4e86\u3002\u800c\u6700\u5c0f\u5272\u5c31\u662f\u6700\u5927\u6d41\u3002\n\n### \u3010\u89e3\u9898\u53cd\u601d\u3011\n-     \u505a\u8fd9\u7c7b\u9898\u76ee\u6700\u91cd\u8981\u7684\u662f\u5982\u4f55\u628a\u4e0d\u53ef\u6784\u56fe\u7684\u9898\u76ee\u8f6c\u5316\u4e3a\u53ef\u6784\u56fe\u7684\u9898\u76ee\u3002\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define min(a,b)(a<b?a:b)\nusing namespace std;\nstruct EDGE{int f,t,c,next;};\nEDGE edge[100005];\nint head[100005],cur=-1,s,t,n,m,p[50][50],c[50][50],sz[50][50];\nbool visit[100005],viu[100005],viv[100005];\nconst int dx[4]={0,0,-1,1};\nconst int dy[4]={-1,1,0,0};\nvoid add(int u,int v,int c)\n{\n    cur++;\n    edge[cur].f=u;\n    edge[cur].t=v;\n    edge[cur].c=c;\n    edge[cur].next=head[u];\n    head[u]=cur;\n}\nint dfs(int now,int mi)\n{\n    if (visit[now]) return 0;\n    if (now==t) return mi;\n    visit[now]=true;\n    int h=head[now];\n    while (h!=-1)\n    {\n        int to=edge[h].t;\n    \n        if (edge[h].c!=0)\n        {\n            int res=dfs(to,min(mi,edge[h].c));\n            if (res)\n            {\n                edge[h].c-=res;\n                edge[h^1].c+=res; \n                return res;\n            }\n        }\n        h=edge[h].next;\n    }\n    return 0;\n}\nint main()\n{\n    cur=-1;\n    memset(edge,0,sizeof(edge));\n    memset(head,-1,sizeof(head));\n    \n    scanf(\"%d%d\",&n,&m);\n    s=n*m+1,t=n*m+2;\n    for (int i=1;i<=n;i++)\n      for (int j=1;j<=m;j++)\n        {\t\n            p[i][j]=(i-1)*m+j;\n            c[i][j]=(i%2==j%2);\n        }\n    int sum=0;\n    for (int i=1;i<=n;i++)\n      for (int j=1;j<=m;j++)\n        {\t\n           scanf(\"%d\",&sz[i][j]);\n           sum+=sz[i][j];   \n        }\n    for (int i=1;i<=n;i++)\n      for (int j=1;j<=m;j++)\n        for (int k=0;k<4;k++)\n          {\n              int x=i+dx[k],y=j+dy[k];\n              if (x<1||x>n||y<1||y>m) continue;\n              if (c[i][j]) add(p[i][j],p[x][y],100000000),add(p[x][y],p[i][j],0);\n          }\n    for (int i=1;i<=n;i++)\n      for (int j=1;j<=m;j++)\n        {\n            if (c[i][j]) add(s,p[i][j],sz[i][j]),add(p[i][j],s,0);\n              else add(p[i][j],t,sz[i][j]),add(t,p[i][j],0);\n        }\n    int ans=0;\n    while (1)\n      {\n          memset(visit,0,sizeof(visit));\n          int res=dfs(s,100000000);\n          if (res) ans+=res;else break;\t\n      }\n    cout<<sum-ans;\n    return 0;\n}\n\n```",
        "postTime": 1532497579,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2774 \u3010\u65b9\u683c\u53d6\u6570\u95ee\u9898\u3011"
    }
]