[
    {
        "content": "## \u7b80\u5316\u9898\u610f\uff1a\u7ed9\u4f60t\u4e2a\u65e0\u5411\u56fe\uff0c\u4f9d\u6b21\u5224\u65ad\u5b83\u4eec\u662f\u4e0d\u662f\u4e00\u68f5\u5b8c\u6574\u7684\u6811\n\n\n------------\n\u90a3\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u65e0\u5411\u56fe\u662f\u4e0d\u662f\u4e00\u68f5\u6811\u5462\uff1f\n\n\u5f88\u7b80\u5355\uff0c**\u82e5n\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709n-1\u6761\u8fb9\uff0c\u5e76\u4e14\u8fd9n\u4e2a\u70b9\u4e4b\u95f4\u65e0\u73af\uff0c\u90a3\u4e48\u8fd9n\u4e2a\u70b9\u7ec4\u6210\u4e00\u68f5\u6811\u3002**\n\n\u5212\u91cd\u70b9\uff1a**n-1\u6761\u8fb9\u3001\u65e0\u73af**\n\n------------\n## \u4e00.\u5224\u65ad\u662f\u5426\u6709n-1\u6761\u8fb9\n\u7531\u4e8e\u6bcf\u7ec4\u6570\u636e\u90fd\u4f1a\u4f9d\u6b21\u7ed9\u51fa\u4e24\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002\n\n\u90a3\u6211\u4eec\u7528\u4e00\u4e2a**\u6876**\u8ba1\u7b97\u51fa**\u70b9\u7684\u4e2a\u6570**\uff0c\u518d\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\u8bb0\u5f55\u8fde\u4e86\u591a\u5c11\u6761\u8fb9\u3002\n\n\u5224\u65ad\u4e00\u4e0b**\u8fb9\u6570\u662f\u5426\u7b49\u4e8e\u70b9\u6570-1**\u5373\u53ef\u3002\n\n------------\n## \u4e8c.\u5224\u65ad\u662f\u5426\u6709\u73af\n\u53ef\u4ee5\u501f\u9274\u4e00\u4e0bkruscal\u7b97\u6cd5\u8fde\u8fb9\u65f6\u5224\u65ad\u662f\u5426\u5f62\u6210\u73af\u7684\u65b9\u6cd5\u3002\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\n\n\u6bcf\u6b21\u8fde\u8fb9\u65f6\uff0c\u5224\u65ad\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u3002\n\n**\u5982\u679c\u5728\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u8bf4\u660e\u8fd9\u4e24\u70b9\u5df2\u7ecf\u6709\u8def\u5f84\uff0c\u518d\u8fde\u8fb9\u5c31\u4f1a\u4ea7\u751f\u73af\u3002\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa0\u5373\u53ef\u3002**\n\n**\u5982\u679c\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u8bf4\u660e\u8fd9\u4e24\u70b9\u4e4b\u95f4\u6ca1\u6709\u8def\u5f84\uff0c\u53ef\u4ee5\u8fde\u8fb9\u3002**\n\n\n------------\nOK\uff0c\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\u73af\u8282\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\ninline int read(){//\u666e\u901a\u5feb\u8bfb\u4f18\u5316\uff0c\u840c\u65b0\u53ef\u6362\u6210cin\n\tint x=0,fh=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') fh=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*fh;\n}\n\nconst int maxn=100010;//\u5b9a\u4e49\u6570\u7ec4\u5927\u5c0f\nint a[maxn]; //a\u6570\u7ec4\u662f\u5e76\u67e5\u96c6\nbool flag;//flag\u7528\u6765\u8bb0\u5f55\u662f\u5426\u51fa\u73b0-1,-1\n\nint fin(int x){//\u67e5\u627e\u7956\u5148&\u8def\u5f84\u538b\u7f29\n\tif(a[x]==0) return x;\n\telse return a[x]=fin(a[x]);\n}\n\ninline void check(){//\u5224\u65ad\u6bcf\u7ec4\u6570\u636e\u662f\u5426\u662f\u6811\u5e76\u8f93\u51fa\u76f8\u5e94\u7684\u7b54\u6848\n\tmemset(a,0,sizeof(a));//\u5148\u6e05\u96f6\u5e76\u67e5\u96c6\n\tbool f=0;//f\u7528\u6765\u8bb0\u5f55\u56fe\u4e2d\u662f\u5426\u51fa\u73b0\u4e86\u73af\n\tint b[maxn]={0},cnt1=0,cnt2=0,x,y,xx,yy;\n\t//b\u6570\u7ec4\u662f\u6876\uff0ccnt1\u662f\u70b9\u6570\uff0ccnt2\u662f\u8fb9\u6570 \n    //x\u548cy\u662f\u8fde\u8fb9\u7684\u4e24\u70b9\uff0cxx\u548cyy\u662f\u4e24\u70b9\u7684\u7956\u5148\n\twhile(1){//\u5faa\u73af\u8f93\u5165\n\t\tx=read();y=read();\n\t\tif(x==0&&y==0) break;//0,0\u8868\u660e\u8f93\u5165\u7ed3\u675f\n\t\tif(x==-1&&y==-1){//-1,-1\u8868\u660e\u6240\u6709\u6570\u636e\u90fd\u5df2\u8f93\u5165\u5b8c\n\t\t\tflag=1;//flag\u8bb0\u5f55\u4e00\u4e0b\n\t\t\treturn;//\u76f4\u63a5\u8fd4\u56de\u4e3b\u51fd\u6570\n\t\t}\n\t\tif(f) continue;\n        //\u5df2\u7ecf\u6709\u73af\u4e86\uff0c\u90a3\u5c31\u4e0d\u7528\u518d\u8fdb\u884c\u64cd\u4f5c\u4e86\n        //\u8fd9\u91cc\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u56e0\u4e3a\u8fd8\u5f97\u628a\u5269\u4e0b\u7684\u6570\u636e\u8f93\u5165\n        //\u5982\u679c\u4e0d\u7528f\u6807\u8bb0\u7684\u8bdd\u5fc5\u987b\u5f97\u7528\u6570\u7ec4\u5b58\u50a8\n\t\txx=fin(x);yy=fin(y);//\u67e5\u627e\u7956\u5148\n\t\tif(xx!=yy){//\u7956\u5148\u4e0d\u540c\uff0c\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u4e2d\n\t\t\ta[xx]=yy;//\u8fde\u8fb9\n\t\t\tif(!b[x]){//x\u8fd9\u4e2a\u70b9\u4e4b\u524d\u6ca1\u51fa\u73b0\u8fc7\n\t\t\t\tb[x]=1;//\u4fee\u6539\u6876\n\t\t\t\tcnt1++;//\u70b9\u6570+1\n\t\t\t}\n\t\t\tif(!b[y]){//\u540c\u4e0a\n\t\t\t\tb[y]=1;\n\t\t\t\tcnt1++;\n\t\t\t}\n\t\t\tcnt2++;//\u53c8\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u56e0\u6b64\u8fb9\u6570\u8981+1\n\t\t}else{//\u7956\u5148\u76f8\u540c\uff0c\u5728\u540c\u4e00\u96c6\u5408\u4e2d\n\t\t\tf=1;//\u51fa\u73b0\u4e86\u73af\uff0c\u66f4\u6539f\u6807\u8bb0\n\t\t}\n\t}\n\tif(cnt2==cnt1-1&&!f) printf(\"1\\n\");\n    //\u8fb9\u6570\u662f\u70b9\u6570-1\u4e14\u65e0\u73af\uff0c\u662f\u6811\uff0c\u8f93\u51fa1\n\telse printf(\"0\\n\");\n    //\u5426\u5219\u4e0d\u662f\u6811\uff0c\u8f93\u51fa0\n\treturn;\n} \n\nint main(){\n\twhile(1){\n\t\tcheck();\n\t\tif(flag) break;\n        //\u51fa\u73b0\u4e86-1\uff0c-1\uff0c\u6240\u6709\u6570\u636e\u5df2\u8f93\u5165\u5b8c\u6bd5\uff0c\u8df3\u51fa\u5faa\u73af\n\t}\n\treturn 0;\n}\n\n```\n\u4f60AC\u4e86\u6ca1\uff1fAC\u4e86\u5c31\u7ed9\u4e2a\u8d5e\u5457\u3002",
        "postTime": 1582604209,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "## \u5e76\u67e5\u96c6\n\u8fd9\u9053\u9898\u7b80\u5316\u6765\u8bf4\u53ef\u4ee5\u8fd9\u6837\u7ffb\u8bd1\uff08\u6bcf\u7ec4\u6570\u636e\uff09\uff1a\n\n\t\u6bcf\u6b21\u8f93\u5165\u4e24\u4e2a\u5143\u7d20\uff1aa,b\n    \u5982\u679c\u8fd9\u4e24\u4e2a\u5143\u7d20\u5728\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u7ec4\u6570\u636e\uff0c\u8f93\u51fa0\uff0c\u8fdb\u5165\u4e0b\u4e00\u7ec4\u6570\u636e\n    \u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u5219\u5408\u5e76\u8fd9\u4e24\u4e2a\u96c6\u5408\n    \u6700\u540e\u5982\u679c\u53ea\u67091\u4e2a\u96c6\u5408\u8f93\u51fa1\uff0c\u5426\u5219\u8f93\u51fa0\n\u90a3\u4e48\u8fd9\u6837\u5c31\u5f88\u597d\u5f04\u4e86\uff0ccode\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\nint f[100001]/*\u7956\u5148*/,a,b,sum/*\u96c6\u5408\u6570\u91cf*/;\nbool book[100001]/*\u662f\u5426\u51fa\u73b0*/,flag/*\u662f\u5426\u8fdd\u89c4*/;\nvoid cls(){//\u521d\u59cb\u5316\n    for(register int i=1;i<=100000;i++) f[i]=i;\n    memset(book,0,sizeof(book));sum=0;flag=false;\n}\nint find(int x){//\u8def\u5f84\u538b\u7f29\u822c\u627e\u7956\u5148\n    if(f[x]==x) return x;\n    return f[x]=find(f[x]);\n}\nint main(){\n    cls();\n    while(scanf(\"%d%d\",&a,&b)==2)//\u75af\u72c2\u8f93\u5165\n    {\n        if(a==-1&&b==-1) break;\n        if(a==0&&b==0) {printf(\"%c\\n\",((!flag&&sum==1)?'1':'0'));cls();continue;}//\u8fd9\u7ec4\u6570\u636e\u7ed3\u675f\n        if(!book[a]) sum++;//\u96c6\u5408\u589e\u52a0\n        if(!book[b]) sum++;//\u96c6\u5408\u589e\u52a0\n        book[a]=true;book[b]=true;//\u6807\u8bb0\n        int x1=find(a),x2=find(b);//\u7956\u5148\n        if(x1==x2) flag=true;//\u6807\u8bb0\n        else {sum--;f[x1]=x2;}//\u4fee\u6539\n    }\n    return 0;\n}\n```\n\u6211\u89c9\u5f97\u8fd9\u9053\u9898\u53ef\u4ee5\u62d3\u5c55\u6210\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u4e2d\u7684Kruskal\u7684\u4e00\u4e2a\u4e3b\u8981\u7684\u7247\u6bb5\n\n\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u4e00\u4e0b",
        "postTime": 1544885834,
        "uid": 80679,
        "name": "Register",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6\u4e5f\u53ef\u4ee5\u66f4\u5de7\u5999\u4e00\u70b9\u54e6\n--\n\u770b\u4e86\u4e0b\u5176\u4ed6\u5927\u725b\u7684\u9898\u89e3\uff0c\u6709\u5f88\u591a\u7528\u5e76\u67e5\u96c6\u7684\uff0c\u4f46\u662f\u90fd\u7528\u4e86\u5f88\u591a\u6570\u7ec4\u3002\u8fd9\u91cc\u6765\u4ecb\u7ecd\u4e00\u4e2a\u53ea\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\u7684\u5de7\u5999\u65b9\u6cd5\u3002\u5f88\u591a\u5730\u65b9\u6709\u4eba\u5df2\u7ecf\u8bf4\u8fc7\uff0c\u6211\u5c31\u8bf4\u4e00\u4e0b\u5feb\u901f\u5224\u65ad\u7684\u65b9\u6cd5\uff0c\u5176\u4f59\u5730\u65b9\u5c31\u5199\u5728\u4ee3\u7801\u6ce8\u91ca\u91cc\u9762\u5427\u3002\n\n\u9996\u5148\u4e86\u89e3\u4e00\u4e0b\uff0c\u9898\u76ee\u65e0\u975e\u5c31\u662f\u95ee\u6240\u7ed9\u7684\u56fe\u662f\u4e0d\u662f\u4e00\u68f5\u6811\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5224\u65ad\u662f\u4e0d\u662f\u6811\u7684\u5de7\u5999\u4e00\u70b9\u7684\u65b9\u6cd5\uff1a\u5728\u6bcf\u6b21\u7ed9\u51fa\u4e24\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff08\u4e5f\u5c31\u662f\u662f\u5426\u5df2\u7ecf\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff09\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff08\u5df2\u7ecf\u6709\u4e00\u6761\u8def\u4e86\uff09\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ec4\u6570\u636e\u5c31\u53ef\u4ee5\u63d0\u524d\u5224\u65ad\u51fa\u4e0d\u662f\u6811\u4e86\uff0c\u56e0\u4e3a\u518d\u52a0\u4e00\u6761\u8def\u5c31\u53d8\u6210\u4e24\u6761\u4e86\u3002\u662f\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\uff1f\n\t\n    \tif(!merge(x,y))ok=false;\n\n\u7136\u540e\uff0c\u8bb0\u5f55\u4e00\u4e0b\u7956\u5148\u4e2a\u6570\uff0c\u7956\u5148\u4e2a\u6570\u4e3a\u4e00\u5e76\u4e14ok==true\u5c31\u8f93\u51fa1\uff0c\u5426\u52190\u3002\u5b8c\u7f8e0msAC\uff01\n\n\u4ee3\u7801\uff08\u9644\u6ce8\u91ca\uff09\uff1a\n\t\n    #include<cstdio>\n    \n\t#include<cstring>\n    \n\t#define N 100010\n    \n\tint f[N];//\u8bb0\u5f55\u7236\u4eb2\n    \n\tbool book[N];//\u8bb0\u5f55\u8be5\u70b9\u662f\u5426\u51fa\u73b0\n    \n    //\u627e\u7239\u51fd\u6570\n\tint getf(int v){return f[v]==v?v:getf(f[v]);}\n    \n    //\u5408\u5e76\u51fd\u6570\uff0c\u5982\u679c\u4e24\u70b9\u5df2\u7ecf\u8fde\u901a\u5c31\u8fd4\u56defalse\uff08\u5408\u5e76\u5931\u8d25\uff09\n\tbool merge(int a,int b)\n    \n\t{\n\t\tint fa=getf(a),fb=getf(b);\n\t\tif(fa!=fb){f[fb]=fa;return true;}\n\t\treturn false;\n\t}\n    \n\tint main()\n\t{\n\t\tint x,y;\n        \n\t\tint tot,ok;//tot\u4e3a\u7956\u5148\u4e2a\u6570\n        \n\t\twhile(scanf(\"%d%d\",&x,&y)==2)\n        \n\t\t{\n\t\t\tif(x==-1&&y==-1)break;\n            \n\t\t\ttot=1;//\u5df2\u7ecf\u8f93\u5165\u7b2c\u4e00\u7ec4\u6570\u636e\uff0c\u6709\u4e86\u4e00\u4e2a\u7956\u5148\n            \n            ok=true;//\u521d\u59cb\u5316\n            \n\t\t\tmemset(book,0,sizeof(book));//\u521d\u59cb\u5316\n            \n\t\t\tf[x]=x;f[y]=y;//\u6bcf\u51fa\u73b0\u4e00\u4e2a\u70b9\u5c31\u628a\u8fd9\u4e2a\u70b9\u7684\u7239\u521d\u59cb\u5316\u4e00\u4e0b\uff0c\u521d\u59cb\u5316\u6574\u4e2af\u5f88\u9ebb\u70e6\n            \n\t\t\tbook[x]=book[y]=true;//\u51fa\u73b0\u4e86\uff0c\u8bb0\u5f55\u4e00\u4e0b\n            \n\t\t\tmerge(x,y);//\u5408\u5e76\n            \n\t\t\twhile(scanf(\"%d%d\",&x,&y)==2)\n            \n\t\t\t{\n\t\t\t\tif(!x&&!y)break;//\u6570\u636e\u8f93\u5b8c\u4e86\n                \n                //\u5982\u679c\u6ca1\u51fa\u73b0\u5c31\u521d\u59cb\u5316\u4e00\u4e0bf\uff0c\u7956\u5148\u4e2a\u6570\u4e5f\u8981\u52a0\u4e0a\n\t\t\t\tif(!book[x]){f[x]=x;tot++;}\n\t\t\t\tif(!book[y]){f[y]=y;tot++;}\n                \n\t\t\t\tbook[x]=book[y]=true\uff1b//\u5df2\u7ecf\u51fa\u73b0\n                \n\t\t\t\tif(!merge(x,y))ok=false;//\u5212\u91cd\u70b9\uff01\u63d0\u524d\u53d1\u73b0\u9519\u8bef\n                \n\t\t\t\telse tot--;//\u6210\u529f\uff0c\u7956\u5148-1\n\t\t\t}\n            \n\t\t\tif(ok&&tot==1)printf(\"1\\n\");//ok=true\u8868\u793a\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u4e0d\u5b58\u5728\u591a\u4e8e\u4e00\u6761\u7684\u8def\uff0ctot=1\u8868\u793a\u4efb\u610f\u4e24\u70b9\u90fd\u80fd\u5230\u8fbe\n            \n\t\t\telse printf(\"0\\n\");\n\t\t}\n        \n  \t  return 0;\n      \n\t} ",
        "postTime": 1533785972,
        "uid": 59142,
        "name": "Lacer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u5927\u795e\u4eec\u90fd\u7528\u5e76\u67e5\u96c6\uff0c\u849f\u84bb\u53ea\u80fd\u8dd1\u641c\u7d22\u4e86\u3002\u3002\u3002\n\n\u4e0d\u8fc7\u5224\u65ad\u662f\u5426\u8fde\u901a\uff0c\u662f\u5426\u6709\u73af\u4f3c\u4e4e\u641c\u7d22\u4e5f\u591f\u4e86\n\n\u5bf9\u4e8e\u641c\u5230\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u904d\u5386\u4e0e\u5176\u76f8\u90bb\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8be5\u70b9\u4e0d\u662f\u5f53\u524d\u70b9\u7684\u7236\u8282\u70b9\u4e14\u5df2\u7ecf\u88ab\u641c\u8fc7\uff0c\u5219\u8fd9\u4e2a\u56fe\u4e0d\u662f\u6811\n\n\u5982\u679c\u8be5\u70b9\u672a\u88ab\u641c\u7d22\u8fc7\uff0c\u5219\u7ee7\u7eed\u641c\u4e0b\u53bb\n\n\u641c\u7d22\u540e\u770b\u4e00\u770b\u662f\u4e0d\u662f\u6240\u6709\u70b9\u90fd\u88ab\u641c\u5230\u4e86\n\n\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4e0d\u662f\u6811\n\nCODE:\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<utility>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cmath>\n#include<set>\nusing namespace std;\nint n,m;\nint a[500010],b[500010],fst[100010],nxt[500010];\nbool vis[100010];\nbool exist[100010];\nint num[100010];\nint q[100010],head,tail;\nint x,y;\nbool avai;\nvoid dfs(int u,int pre){\n    vis[u]=true;\n    for(int k=fst[u];k;k=nxt[k]){\n        if(b[k]==pre)continue;\n        if(vis[b[k]]){\n            avai=false;\n            return;\n        }\n        dfs(b[k],u);\n    }\n}\nint main(){\n    int i,j,k;\n    while(x>=0&&y>=0){\n        scanf(\"%d%d\",&x,&y);\n        if(x<0&&y<0)return 0;\n        n=m=0;\n        while(x>0&&y>0){\n            m++;\n            a[m*2-1]=x,b[m*2-1]=y;\n            a[m*2]=y,b[m*2]=x;\n            if(!exist[x]){\n                num[++n]=x;\n                fst[x]=0;\n                vis[x]=false;\n                exist[x]=true;\n            }\n            if(!exist[y]){\n                num[++n]=y;\n                fst[y]=0;\n                vis[y]=false;\n                exist[y]=true;\n            }\n            nxt[m*2-1]=fst[x];\n            fst[x]=m*2-1;\n            nxt[m*2]=fst[y];\n            fst[y]=m*2;\n            scanf(\"%d%d\",&x,&y);\n        }\n        avai=true;\n        dfs(num[1],0);\n        for(i=1;i<=n;i++){\n            if(!vis[num[i]]){\n                avai=false;\n                break;\n            }\n        }\n        if(avai){\n            printf(\"1\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n        for(i=1;i<=n;i++){\n            exist[num[i]]=false;\n        }\n    }\n}\n```",
        "postTime": 1501657831,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "### \u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u7eff\u9898\u9898\u89e3\uff0c\u5982\u6709\u95ee\u9898\u8bf7\u591a\u591a\u5305\u6db5\uff01\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u96be\uff0c\u76f4\u63a5\u66b4\u529b\u6216\u8005~~\u51b0\u8336\u673a~~\u5e76\u67e5\u96c6\u5904\u7406\u90fd\u80fd\u8fc7\u3002~~\u5047\u7684\u7eff\u9898\u5427~~\n\n\u4f46\u662f\uff1a**\u4e00\u4e2a\u5408\u683c\u7684Oler\u662f\u4e0d\u4f1a\u7528\u66b4\u529b\u7684**\uff0c\u6240\u4ee5\u6211\u7528\u4e86\u5e76\u67e5\u96c6\u3002\n\n#### \u8fd9\u9053\u9898\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u5462\uff1f\n\n\u5e76\u67e5\u96c6\u53ef\u4ee5\u5408\u5e76\u4e0e\u67e5\u627e\u7956\u5148\uff0c\u6070\u597d\u662f\u8fd9\u9053\u9898\u8981\u7528\u5230\u7684\u3002\uff08\u5408\u5e76\u5c31\u662f\u4e00\u6761\u8def\uff0c\u67e5\u627e\u7956\u5148\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u6709\u4e24\u6761\u8def\uff09\n\n\u6240\u4ee5\u6211\u5199\u4e0a\u4e86\u5e76\u67e5\u96c6\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u6211\u5f97\u5230\u4e86\u6210\u5c31\uff1a\n\n#### Wonderful Answer\uff01\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u6ce8\u610f\uff0c\u8fd9\u9053\u9898\u8981\u6c42**\u6709**\u4e14\u53ea\u6709\u4e00\u6761\u8def\uff0c\u8868\u793a\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\u3002\n\n\u6240\u4ee5\u5199\u4e0a\u4e86\u5224\u65ad\u96c6\u5408\u7684\u4ee3\u7801\uff0c\u7136\u540e\u5c31 AC \u4e86~~\u5f00\u5fc3\uff01~~ \u3002\n\n\u6240\u4ee5\u6211\u4eec\u6765\u603b\u7ed3\u4e0b\u601d\u8def\uff1a\n\n1. \u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u7684\u8f93\u5165\u6570\u91cf\u8fd8\u4e0d\u4e00\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u5feb\u8bfb\u548c\u4e24\u5c42 while(1) \u5957\u7528\u8f93\u5165\uff0c\u5f53\u7136\u5982\u679c\u4f60\u61d2\u5f97\u6253\u5feb\u8bfb\u5c31\u7528 O2 \u5427\u3002\n\n1. \u5728\u7ebf\u5224\u65ad\uff0c\u6bcf\u8f93\u5165\u4e00\u7ec4\u6570\u636e\u4fbf\u5224\u65ad\u662f\u5426\u8fde\u901a\uff0c\u5982\u679c\u662f\uff0c\u7528 flag \u6807\u8bb0\uff0c\u5982\u679c\u5426\uff0c\u5c06\u4ed6\u4eec\u8fde\u901a\u3002\uff08\u79bb\u7ebf\u4e5f\u53ef\u4ee5\u54e6\uff09\n\n1. \u5b9a\u4e49\u4e00\u4e2a bool \u7c7b\u578b\u7684 bk \u6570\u7ec4\u548c int \u7c7b\u578b\u7684 num \u53d8\u91cf\uff08\u5f53\u7136\u53eb\u4ec0\u4e48\u4f60\u81ea\u5df1\u5b9a\uff09\uff0c\u7528\u6765\u5224\u65ad\u96c6\u5408\u6709\u51e0\u4e2a\uff0c\u5982\u679c num > 1 \u7684\u8bdd\uff0c\u5c31\u8f93\u51fa0\u3002\u6700\u540e\u6ce8\u610f\uff0c\u8981\u5224\u91cd\uff0c\u96c6\u5408\u6570\u91cf\u52a0\u8fc7\u4e00\u6b21\u4e0d\u80fd\u91cd\u590d\u52a0\u3002\n\n1. \u5982\u679c\u4e24\u4e2a\u4f4d\u7f6e\u8fde\u901a\u7684\u8bdd\uff0cnum\u8981\u51cf\u4e00\uff0c\u56e0\u4e3a\u8fde\u901a\u4e86\u5c31\u4ee3\u8868\u5df2\u7ecf\u4e0d\u662f\u4e24\u4e2a\u96c6\u5408\u4e86\u3002\n\n1. \u5f53\u8f93\u5165\u7684\u6570\u662f0 0\u7684\u8bdd\u5c31\u5224\u65ad\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\uff0c\u4ee5\u53ca\u662f\u5426\u88ab\u6807\u8bb0\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u8f93\u51fa 1 \u3002\u5426\u5219\u8f93\u51fa0\u3002\n\n\u597d\u4e86\uff0c\u601d\u8def\u90fd\u7f15\u6e05\u4e86\uff0c\u4e0b\u9762\u4e0a\u4ee3\u7801\u5427\uff0c\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u5728\u4ee3\u7801\u91cc\u9762\u3002\n\n```\n#include<bits/stdc++.h>//\u517b\u6210\u597d\u4e60\u60ef\uff0c\u548c\u6211\u4e00\u8d77\u7528\u4e07\u80fd\u5934\n\nusing namespace std;\n\nint pre[100005];//\u5e76\u67e5\u96c6\u57fa\u672c\u6570\u7ec4\nbool bk[100005];\nint num;\nbool flag = false;//\u6807\u8bb0\n\nint find(int x){//\u627e\u5440\u627e\u5440\u627e\u7238\u7238\uff08\u5bfb\u627e\u7956\u5148\u51fd\u6570\uff09\n\tif(pre[x] == x)return x;\n\telse {\n\t\tpre[x] = find(pre[x]);\n\t\treturn pre[x];\n\t}\n}\n\nvoid join(int x,int y){//\u5408\u5e76\u51fd\u6570\uff08\u867d\u7136\u8fd9\u9053\u9898\u597d\u50cf\u6ca1\u7528\u5230\uff09\n\tint xx = find(x);\n\tint yy = find(y);\n\tif(xx != yy)pre[xx] = yy;\n\treturn;\n}\n\nint read(){//\u5feb\u8bfb\uff0c\u6709\u9700\u8981\u7684\u8bdd\u80cc\u4e0b\u6765\u5427\n    int w = 1, q = 0;\n    char ch = ' ';\n    while(ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if(ch == '-') w = -1, ch = getchar();\n    while(ch >= '0' && ch <= '9') q = q * 10 + ch - '0', ch = getchar();\n    return w * q;\n}\n\nint main(){\n\twhile(1){//while\uff081\uff09\u8f93\u5165\n\t\tfor(int i = 1;i <= 100000;i ++)pre[i] = i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\t\tmemset(bk,false,sizeof(bk));//\u672c\u9898\u521d\u59cb\u5316\n\t\tnum = 0;\n\t\tflag = false;\n\t\twhile(1){\n\t\t\tint x,y;\n\t\t\tx = read();\n\t\t\ty = read();\n\t\t\tif(x == 0 && y == 0){//\u5982\u679c\u8f93\u5165\u4e3a 0 0 \u7684\u8bdd\uff0c\u5224\u65ad\u8f93\u51fa\u5e76 break \n\t\t\t\tif(num == 1 && !flag)cout<<1<<endl;\n\t\t\t\telse cout<<0<<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(x == -1 && y == -1)exit(0);//\u5982\u679c\u662f -1 -1 \u7684\u8bdd\uff0c\u9000\u51fa\u7a0b\u5e8f\n\t\t\tif(!bk[x])num ++;//\u5224\u65ad\u96c6\u5408\u6570\u91cf\n\t\t\tif(!bk[y])num ++;\n\t\t\tbk[x] = bk[y] = true;//\u5224\u91cd\n\t\t\tif(find(x) == find(y))flag = true;//\u5982\u679c\u6709\u4e24\u6761\u8def\uff0c\u6807\u8bb0\n\t\t\telse {\n\t\t\t\tnum --;//\u5982\u679c\u8fde\u901a\uff0c\u96c6\u5408\u6570\u91cf\u51cf\u4e00\n\t\t\t\tpre[find(x)] = find(y);//\u5408\u5e76\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u517b\u6210\u597d\u4e60\u60ef\uff0c\u548c\u6211\u4e00\u8d77\u7528return 0\n}\n```\n\n\u6700\u540e\uff0c\u8ddf\u6211\u4e00\u8d77\u5ff5\uff1a\n\n### \u83ab\u6284\u88ad\uff0c\u68d5\u4e86\u81ea\u5df1\u53f7\uff0c\u7a7a\u60b2\u5207\uff01\n\n###### ~~\u6c42\u7ba1\u7406\u5927\u5927\u7ed9\u8fc7~~\n\n~~\u6e9c\u4e86\u6e9c\u4e86~~",
        "postTime": 1582851431,
        "uid": 294562,
        "name": "EDqwq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u9898\u610f\u7ffb\u8bd1\uff1a\n\n- \u591a\u7ec4\u6570\u636e\u8f93\u5165\n\n- \u5408\u5e76\u8f93\u5165\u7684\u4e24\u4e2a\u70b9\n\n- \u5982\u679c\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5408\u5e76\u90a3\u4e48\u7b54\u6848\u5c31\u51fa\u6765\u4e86\n\n- \u6700\u7ec8\u5224\u65ad\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\n\n\u770b\u5230\u201c\u5408\u5e76\uff0c\u96c6\u5408\u201d\u8fd9\u7c7b\u7684\u5b57\u773c\u901a\u5e38\u4f1a\u60f3\u5230\u5e76\u67e5\u96c6\n\ncode:\n\n- \u5b9a\u4e49\u53d8\u91cf\u533a\uff08\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\u9762\uff09\uff1a\n\n```\nint n = 100000, x, y, sum, pre[100001];//n\u8868\u793a\u6700\u5927\u7684\u623f\u95f4\u53f7\uff0cx\u3001y\u8868\u793a\u8f93\u5165\u7684\u4e24\u4e2a\u623f\u95f4\uff0csum\u8868\u793a\u96c6\u5408\u7684\u6570\u91cf\uff0cpre\u5c31\u662f\u5e76\u67e5\u96c6\u4f7f\u7528\u7684\u7956\u5148\u6570\u7ec4\nbool ans, vis[100001];//ans\u4ee3\u8868\u662f\u5426\u5f97\u5230\u7b54\u6848\uff08\u5982\u679c\u4e24\u4e2a\u623f\u95f4\u5df2\u7ecf\u5408\u5e76\u5e76\u4e14\u73b0\u5728\u8fd8\u8981\u5408\u5e76\u4e00\u6b21\uff0cans\u5c31\u4e3atrue\uff09\uff0cvis\u4ee3\u8868\u73b0\u5728\u662f\u5426\u5f97\u5230\u8fd9\u4e2a\u623f\u95f4\u53f7\uff0c\u8b6c\u5982\u8f93\u51651, 2\uff0c\u90a3\u4e48vis[1] = vis[2] = true\n```\n\n- \u521d\u59cb\u5316\uff1a\n\n```\nvoid init() {\n    for (int i = 1; i <= n; i++) pre[i] = i;//\u6bcf\u4e2a\u623f\u95f4\u7684\u7956\u5148\u662f\u8fd9\u4e2a\u623f\u95f4\n    memset(vis, false, sizeof(vis));//\u521d\u59cb\u5316vis\u6570\u7ec4\n    ans = false;//\u521d\u59cb\u5316ans\n    sum = 0;//\u521d\u59cb\u5316sum\n}\n```\n\n- \u627e\u7956\u5148\uff1a\n\n```\nint getf(int root) {\n    if (pre[root] == root) return root;//\u627e\u5230\u4e86\n    else return pre[root] = getf(pre[root]);//\u8def\u5f84\u538b\u7f29\u627e\u7238\u7238\u7684\u7956\u5148\n}\n```\n\n- \u5408\u5e76\u51fd\u6570\uff1a\n\n```\nbool merge(int root1, int root2) {\n\t//\u627e\u5230\u7956\u5148\n    root1 = getf(root1);\n    root2 = getf(root2);\n    if (root1 != root2) {//\u5982\u679c\u7956\u5148\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\n        pre[root2] = root1;//\u5408\u5e76\n        sum--;//\u96c6\u5408-1\n        return false;//\u8fd4\u56de\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\n    }\n    return true;//\u8fd4\u56de\u5728\u4e00\u4e2a\u96c6\u5408\n}\n```\n\n- main\u51fd\u6570\uff1a\n\n```\nint main() {\n    init();//\u521d\u59cb\u5316\n    while (cin >> x >> y) {//\u4e00\u76f4\u8f93\u5165\n        if (x == -1 && y == -1) break;//\u5982\u679c\u662f-1, -1\u76f4\u63a5\u8fd4\u56de\n        else if (x == 0 && y == 0) {//\u5982\u679c\u8f93\u5165\u5b8c\u4e00\u7ec4\u6570\u636e\n            if(!ans && sum == 1) cout << 1;//\u5982\u679c\u6ca1\u6709\u5f97\u5230\u7b54\u6848\u5e76\u4e14\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\u8f93\u51fa\u6b63\u786e\n            else cout << 0;//\u5426\u5219\u8f93\u51fa\u9519\u8bef\n            cout << \"\\n\";//\u8f93\u51fa\u6362\u884c\n            init();//\u6700\u540e\u518d\u521d\u59cb\u5316\n        } else {//\u5426\u5219\n            if(merge(x, y)) ans = true;//\u5982\u679c\u4e24\u4e2a\u5df2\u7ecf\u5408\u5e76\u8fc7\u4e86\uff0c\u4e5f\u5c31\u662f\u672c\u6765\u5c31\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u5f97\u5230\u7b54\u68480\n            else {\n                if (!vis[x]) sum++;//\u5982\u679c\u8fd9\u4e2a\u6570\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u96c6\u5408\u6570\u91cf+1\n                if (!vis[y]) sum++;//\u540c\u4e0a\n                vis[x] = true;//\u6807\u8bb0\u4e3a\u5df2\u7ecf\u51fa\u73b0\u4e86\n                vis[y] = true;//\u540c\u4e0a\n            }\n        }\n    }\n    return 0;//\u7ed3\u675f\n}\n```\n\n- \u6240\u4ee5\u6574\u4e2a\u4ee3\u7801\u5c31\u51fa\u6765\u4e86\uff1a\n\n```\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint n = 100000, x, y, sum, pre[100001];\nbool ans, vis[100001];\n\nvoid init() {\n    for (int i = 1; i <= n; i++) pre[i] = i;\n    memset(vis, false, sizeof(vis));\n    ans = false;\n    sum = 0;\n}\n\nint getf(int root) {\n    if (pre[root] == root) return root;\n    else return pre[root] = getf(pre[root]);\n}\n\nbool merge(int root1, int root2) {\n    root1 = getf(root1);\n    root2 = getf(root2);\n    if (root1 != root2) {\n        pre[root2] = root1;\n        sum--;\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    init();\n    while (cin >> x >> y) {\n        if (x == -1 && y == -1) break;\n        else if (x == 0 && y == 0) {\n            if(!ans && sum == 1) cout << 1;\n            else cout << 0;\n            cout << \"\\n\";\n            init();\n        } else {\n            if(merge(x, y)) ans = true;\n            else {\n                if (!vis[x]) sum++;\n                if (!vis[y]) sum++;\n                vis[x] = true;\n                vis[y] = true;\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1582852104,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "P2307 \u8ff7\u5bab"
    },
    {
        "content": "\u6211\u4eec\u628a\u95ee\u9898\u7b80\u5316\uff0c\u9898\u76ee\u8981\u6c42\u6240\u6709\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u4e14\u53ea\u6709\u4e00\u6761\u8def\u5f84\u3002\u662f\u4e0d\u662f\u548c\u751f\u6210\u6811\u5f88\u50cf\u5462\uff1f\uff1f\n\n1\u3001\u6240\u4ee5\u8981\u8fbe\u5230\u76ee\u7684\uff0cN\u4e2a\u70b9\u5fc5\u987b\u6709\u4e14\u53ea\u6709N-1\u6761\u8fb9\u3002\n\n2\u3001\u81f3\u4e8e\u5224\u65ad\u6574\u4e2a\u56fe\u662f\u5426\u8054\u901a\uff0c\u5e76\u67e5\u96c6\u5f88\u5bb9\u6613\u529e\u5230\u3002\n\n3\u3001\u56fe\u4e2d\u7684\u70b9\u7f16\u53f7\u4e0d\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528map\u6620\u5c04,\u540c\u65f6\u7edf\u8ba1\u70b9\u7684\u4e2a\u6570\u3002\n\n4\u3001\u5e0c\u671b\u80fd\u5e2e\u5230\u4f60\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u54e6//\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nmap<int,int>m;\nint pre[100009];\nint find(int x){\n\tif(pre[x]!=x)\tpre[x]=find(pre[x]);\n\treturn pre[x];\n}\nvoid join(int q,int w){\n\tpre[find(q)]=find(w);\n}\nint main()\n{\n\tint l,r;\n\twhile(cin>>l>>r)\n\t{\n\t\tfor(int i=1;i<=100002;i++)\tpre[i]=i;\n\t\tint p=1,mid=1;\n\t\tm.clear();\n\t\tif(l==-1&&r==-1)\tbreak;\n\t\tif(m[l]==0)\tm[l]=p++;\n\t\tif(m[r]==0)\tm[r]=p++;\n\t\tjoin(m[l],m[r]);\n\t\twhile(cin>>l>>r)\n\t\t{\n\t\t\tif(l==0&&r==0)\tbreak;\n\t\t\tmid++;\n\t\t\tif(m[l]==0)\tm[l]=p++;\n\t\t\tif(m[r]==0)\tm[r]=p++;\n\t\t\tjoin(m[l],m[r]);\t\n\t\t}\n\t\tint num=0;\n\t\tfor(int i=1;i<p;i++)\n\t\t\tif(pre[i]==i)\tnum++;\n\t\tif(mid==p-2&&num==1)\n\t\t\tcout<<1<<endl;\n\t\telse\n\t\t\tcout<<0<<endl;\t\t\n\t}\n}\n```\n",
        "postTime": 1582285881,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7528\u4e86\u4e09\u79cd\u65b9\u6cd5\u6765\u505a\uff0c\u4e3b\u8981\u56f4\u7ed5\u8fde\u901a\u6027\u5c55\u5f00.\n\n**\u6cd51** \u8fb9\u96c6\u4e0e\u6811\u8fb9\u96c6\uff0c[50%AC+50%TLE](https://www.luogu.org/record/22620635). \n\nTLE \u539f\u56e0\u53ef\u80fd\u662f\u53cd\u590d\u5efa\u56fe\u904d\u5386\u590d\u6742\u5ea6\u5e38\u6570\u5f71\u54cd\u4e86\u6027\u80fd\uff0c\u6b63\u786e\u6027\u53ef\u4ee5\u4fdd\u8bc1\uff1a\u7ef4\u62a4\u4e24\u4e2a\u8fb9\u96c6\uff1a\u539f\u56fe\u8fb9\u96c6 $E$\uff0cDFS \u7684\u6811\u8fb9\u96c6 $E'$\uff0c\u663e\u7136\u6709 $E'\\subseteq E$. \u5f53 $E=E'$ \u65f6\uff0c\u539f\u56fe\u7b26\u5408\u6761\u4ef6\uff1b\u53cd\u4e4b\uff0c\u4e0d\u7b26\u5408. \u5b9e\u9645\u4e0a\uff0c\u672c\u9898\u4e2d\u53ea\u9700\u6ee1\u8db3 $card(E)=card(E')$ \u5373\u53ef. \u7f3a\u70b9\u662f\u8fc7\u5206\u5f3a\u8c03\u6811\u7ed3\u6784. \u4ee3\u7801\u4e2d\u6709\u4e24\u4e2a\u8c03\u8bd5\u7528\u7684\u51fd\u6570\uff0c\u6bd4\u8f83\u6f66\u8349.\n\n**\u6cd52** \u6811\u7684\u6027\u8d28\uff0c[80%AC+20%WA](https://www.luogu.org/record/22676598).\n.\n\n\uff08\u672a\u8bc1\u660e\uff09\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u7ed9\u5b9a $n$ \u4e2a\u8282\u70b9\uff0c\u4efb\u610f\u753b\u51fa $n-1$ \u6761\u8fb9\uff0c\u5f53\u89c6\u81ea\u8fb9\u4e3a\u7a7a\u8fb9\u65f6\uff0c\u751f\u6210\u56fe\u662f\u4e00\u68f5\u6811.\n\n\n**\u6cd53** \u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c[100%AC](https://www.luogu.org/record/22658136).\n\n\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u5728 [\u5e76\u67e5\u96c6\u6a21\u677f](https://www.luogu.org/blog/molasses/sol-p3367) \u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0 add(v) \u7528\u4e8e\u65b0\u589e\u8282\u70b9\uff0c\u6bcf\u6210\u529f\u65b0\u589e\u4e00\u4e2a\u8282\u70b9\uff0c\u96c6\u5408\u6570\u91cf\u5c31 +1\uff1b\u4fee\u6539 merge(u, v)\uff0c\u5408\u5e76\u65f6\u82e5\u8fb9 $(u,v)$ \u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u8be5\u56fe\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u6210\u529f\u5408\u5e76\u5219\u96c6\u5408\u6570\u91cf -1. \u6700\u540e\uff0c\u82e5\u96c6\u5408\u6570\u91cf\u4e3a1\uff0c\u5219\u56fe\u7b26\u5408\u6761\u4ef6.\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst size_t maxid = 100001;\n\nstruct UnionFindSet {\n  vector<int> pa, rank;\n  vector<bool> node;\n\n  UnionFindSet() {\n    pa = vector<int>(maxid, 0);\n    rank = vector<int>(maxid, 0);\n    node = vector<bool>(maxid, false);\n  }\n\n  bool add(int v) {\n    if (node[v]) return false;\n    pa[v] = v;\n    return node[v] = true;\n  }\n\n  int get(int v) {\n    int p = v;\n    while (pa[p] != p) p = pa[p];\n    while (v != p) {\n      int t = pa[v];\n      pa[v] = p;\n      v = t;\n    }\n    return v;\n  }\n\n  bool merge(int x, int y) {\n    int xx = get(x), yy = get(y);\n    if (xx == yy) return false;\n    if (rank[xx] > rank[yy]) {\n      pa[yy] = xx;\n    } else {\n      pa[xx] = yy;\n      if (rank[xx] == rank[yy]) ++rank[yy];\n    }\n    return true;\n  }\n};\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  bool done = false;\n  int u, v, cnt = 0;\n  UnionFindSet* x = new UnionFindSet();\n  while (cin >> u >> v && u != -1 && v != -1) {\n    if (u && v && !done) {\n      if (x->add(u)) ++cnt;\n      if (x->add(v)) ++cnt;\n      if (x->merge(u, v)) {\n        --cnt;\n      } else {\n        done = true;\n        cout << \"0\\n\";\n      }\n    }\n    if (u == 0 && v == 0) {\n      if (!done) cout << (cnt == 1) << '\\n';\n      cnt = 0;\n      done = false;\n      x = new UnionFindSet();\n    }\n  }\n  delete x;\n  return 0;\n}\n```\n",
        "postTime": 1565670242,
        "uid": 217947,
        "name": "molasses",
        "ccfLevel": 0,
        "title": "P2307 \u8ff7\u5bab"
    },
    {
        "content": "\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u6240\u7ed9\u7684\u8fb9\u96c6\u662f\u5426\u53ef\u4ee5\u6784\u6210\u4e00\u68f5\u6811\u3002\n\n\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u73af\u3002\u5bf9\u4e8e\u6bcf\u8fb9\u6240\u8fde\u63a5\u7684\u4e00\u7ec4\u8282\u70b9\uff0c\u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5982\u679c\u6210\u7acb\u5219\u8bf4\u660e\u6709\u73af\u3002\u5982\u679c\u4e0d\u6210\u7acb\u5c31\u5c06\u4e24\u70b9\u6240\u5728\u96c6\u5408\u5408\u5e76\u3002\n\n\u6700\u540e\u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u8054\u901a\u5c31\u597d\u5566\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8282\u70b9\u7684\u7f16\u53f7\u4e0d\u4fdd\u8bc1\u8fde\u7eed\uff0c\u6240\u4ee5\u7528\u4e00\u4e2avis\u6570\u7ec4\u6765\u8bb0\u5f55\u6709\u54ea\u4e9b\u8282\u70b9\u51fa\u73b0\u8fc7\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint fa[100001],vis[100001],u,v;\nbool flag;\ninline void Init(){\n\tfor(int i=1;i<=100001;i++)\n\t\tfa[i]=i;\n\tmemset(vis,0,sizeof(vis));\t\n\tflag=0;\n}\ninline int Get(int x){return (fa[x]==x)?x:fa[x]=Get(fa[x]);}\ninline void Merge(int x,int y){fa[Get(x)]=Get(y);}\ninline bool Check(){\n\tint tmp=-1;\n\tif(flag==1)\n\t\treturn false;\n\telse{\n\t\tfor(int i=1;i<=100001;i++){\n\t\t\tif(tmp==-1&&vis[i]){\n\t\t\t\ttmp=Get(i);\n\t\t\t}\n\t\t\telse\n\t\t\t\tif(vis[i]&&Get(i)!=tmp)\n\t\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tInit();\n\twhile(cin>>u>>v){\n\t\tif(u==0){\n\t\t\tif(Check())\n\t\t\t\tcout<<1;\n\t\t\telse\n\t\t\t\tcout<<0;\n\t\t\tInit();\n\t\t\tcout<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(u==-1)\n\t\t\treturn 0;\n\t\t\n\t\tif(Get(u)!=Get(v)){\n\t\t\tvis[u]=vis[v]=1;\n\t\t\tMerge(u,v);\n\t\t}\n\t\telse\n\t\t\tflag=1;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539775777,
        "uid": 31952,
        "name": "\u5976\u6cb9\u9752\u8c46\u70e7\u9c7c",
        "ccfLevel": 0,
        "title": "P2307\u8ff7\u5bab"
    },
    {
        "content": "## \u9898\u610f\uff1a\n\u6709\u82e5\u5e72\u6761\u65e0\u5411\u8fb9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u79cd\u8def\u5f84\u628a\u8fd9\u4e24\u4e2a\u70b9\u8054\u901a\uff0c\u5982\u679c\u5f53\u524d\u8f93\u5165\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219\u8f93\u51fa1\uff0c\u5426\u5219\u8f93\u51fa0\u3002\n\n## \u89e3\u9898\u601d\u8def\uff1a\n\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u8981\u4f7f\u5b83\u4eec\u53ea\u6709\u4e00\u6761\u8def\u5f84\u8054\u901a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u4e0d\u80fd\u5b58\u5728\u73af\uff0c\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u5b58\u5728\u4e24\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u4e00\u5927\u5768\u7384\u5b66\u7684\u64cd\u4f5c\uff0c\u4e92\u76f8\u5230\u8fbe\u5bf9\u65b9\uff0c\u8fd9\u6837\u8fd9\u4e24\u4e2a\u70b9\u4e00\u5b9a\u4f1a\u5b58\u5728\u81f3\u5c11\u4e24\u6761\u8def\u5f84\uff08\u5982\u679c\u8fd8\u662f\u4e0d\u61c2\u7684\u8bdd\uff0c\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u753b\u4e00\u4e2a\u73af\uff0c\u56e0\u4e3a\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u3002~~\u90a3\u5c31\u662f\u6811\u561b\u3002\u3002\u3002~~\uff09\uff0c\u540c\u65f6\u8fd9\u4e24\u4e2a\u70b9\u4e00\u5b9a\u8981\u6709\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5f53\u524d\u7684\u56fe\uff0c\u5982\u679c\u5f53\u524d\u56fe\u4e2d\u5b58\u5728\u81f3\u5c11\u4e24\u4e2a\u7956\u5148\uff0c\u90a3\u4e48\u5f53\u524d\u56fe\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\n\n\n\u8fd8\u6709\u4e00\u70b9\n#### \u6ce8\u610f\u8f93\u51fa\uff01\uff01\uff01\n###  \u6ce8\u610f\u8f93\u51fa\uff01\uff01\uff01\n##   \u6ce8\u610f\u8f93\u51fa\uff01\uff01\uff01 \u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff01\n\n\n~~\u4e0b\u9762\u662f\u5de8\u4e11\u7684\u4ee3\u7801~~\n```\n#include<cstdio>\n#include<cstring>\n\nint f[210000]; //f\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u70b9\u51fa\u73b0\u7684\u6b21\u6570\uff08\u65b9\u4fbf\u8bb0\u5f55tot\uff09\nint fa[210000]; //\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\nint sum[210000]; //\u8bb0\u5f55\u5f53\u524d\u6709\u51e0\u4e2a\u7956\u5148\n\nstruct nod1{int x,y;} a[210000]; //\u8bb0\u5f55\u8fb9\n\nint maxx(int x,int y) { return x>y?x:y; }\n\nint find(int x) { return fa[x]==x?fa[x]:fa[x]=find(fa[x]); }\n\nvoid go(int x1,int y1)\n{\n\tif(x1==0 && y1==0)\n\t{\n\t\tprintf(\"0\\n\"); return ;\n\t}\n\t\n\tmemset(f,0,sizeof(f)); \n\tmemset(fa,0,sizeof(fa)); \n\tmemset(sum,0,sizeof(sum)); \n\t\n\tint s=0,bnum=0,tot=0; //tot\u8bb0\u5f55\u70b9\u6570\uff0cs\u8bb0\u5f55\u8fb9\u6570\n\t\n\ta[++s].x=x1; a[s].y=y1;\n\tf[x1]++; if(f[x1]==1) tot++;\n\tf[y1]++; if(f[y1]==1) tot++;\n\tbnum=maxx(a[s].x,a[s].y); //\u627e\u6700\u5927\u7f16\u53f7\u7684\u70b9\uff0c\u65b9\u4fbf\u7ef4\u62a4\u5e76\u67e5\u96c6\n\t\n\tint x,y; scanf(\"%d %d\",&x,&y);\n\twhile(x!=0 && y!=0) //\u8f93\u5165\uff0c\u8bb0\u5f55\u70b9\u6570\u4e0e\u8fb9\u6570\n\t{\n\t\ta[++s].x=x; a[s].y=y;\n\t\tf[x]++; if(f[x]==1) tot++;\n\t\tf[y]++; if(f[y]==1) tot++;\n\t\tbnum=maxx( bnum , maxx(x,y) );\n\t\tscanf(\"%d %d\",&x,&y);\n\t}\n\t\n\tfor(int i=1;i<=bnum;i++)\n\t{\n\t\tif(f[i]) fa[i]=i;\n\t}\n\t\n\tfor(int i=1;i<=s;i++) //\u5982\u679c\u5f53\u524d\u4e24\u4e2a\u70b9\u8054\u901a\uff0c\u66f4\u6539\u7236\u4eb2\n\t{\n\t\tint fx=find(a[i].x),fy=find(a[i].y);\n\t\tif(fx!=fy) fa[fx]=fy;\n\t}\n\tint tot2=0;\n\tfor(int i=1;i<=bnum;i++)\n\t{\n\t\tif(!fa[i]) continue;\n\t\t\n\t\tint fx=fa[find(i)];\n\t\tif(sum[fx]==0) sum[fx]=++tot2;\n\t\tif(tot2>=2) //\u5982\u679c\u5f53\u524d\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7956\u5148\uff0c\u4e0d\u5408\u6cd5\n\t\t{\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn ;\n\t\t}\n\t}\n\t\n\tif(s!=tot-1) //\u5982\u679c\u5f53\u524d\u5b58\u5728\u73af\uff08\u5373\u4e0d\u662f\u4e00\u68f5\u6811\uff09\uff0c\u4e0d\u5408\u6cd5\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn ;\n\t}\n\t\n\tprintf(\"1\\n\");\n\treturn ;\n}\n\nint main() //\u4e3b\u51fd\u6570\u4e0d\u89e3\u91ca\n{\n\tint x,y; scanf(\"%d %d\",&x,&y);\n\twhile(x!=-1 && y!=-1)\n\t{\n\t\tgo(x,y);\n\t\tscanf(\"%d %d\",&x,&y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1524731791,
        "uid": 60901,
        "name": "\u4e09\u4f53\u667a\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "#\u5e76\u67e5\u96c6\n\n\u867d\u7136\u697c\u4e0a\u5df2\u7ecf\u6709\u4e86\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u8fd9\u7bc7\u5e76\u67e5\u96c6\u601d\u8def\u4e0e\u697c\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u601d\u60f3\u6709\u70b9\u50cfkruskal\uff08\u4e5f\u8bb8\u5427\uff09\u3002\n\n###\u601d\u8def\n\n\u7531\u4e8e\u662f\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u3002\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u6293\u4f4f\u4e24\u4e2a\u8981\u70b9:\n\n1.\u4efb\u610f\u4e24\u4e2a\u623f\u95f4***\u6709\u4e14\u4ec5\u6709\u4e00\u6761***\u8def\u5f84\u53ef\u4ee5\u76f8\u901a.\n\n2.\u4efb\u610f\u4e24\u4e2a\u623f\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84***\u53ef\u4ee5\u76f8\u901a***.\n\n###\u89e3\u51b3\u65b9\u6cd5\uff1a**(\u0e51\u2022\u0300\u3142\u2022\u0301)\u0648\u2727**\n\n1.\u8f93\u5165A,B\u4e24\u4e2a\u8054\u901a\u70b9\u65f6\u5229\u7528\u5e76\u67e5\u96c6\u64cd\u4f5c\u628a\u4ed6\u4eec\u5e76\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u82e5\u5728\u5e76\u5165\u524dA,B\u4e24\u70b9\u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408\uff0c\u5219\u8868\u793a\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u88ab\u5176\u4ed6\u70b9\u8054\u901a\uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002\n\n2.\u8bfb\u5230 0  0 \u51c6\u5907\u9000\u51fa\u672c\u6b21\u64cd\u4f5c\u65f6\uff0c\u68c0\u67e5\u6bcf\u4e00\u4e2a\u70b9\u6240\u5728\u7684\u96c6\u5408\uff0c\u82e5\u5b58\u5728\u6709\u4e24\u4e2a\u70b9\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\uff0c\u8868\u793a\u8fd9\u4e00\u5f20\u56fe\u5e76\u6ca1\u6709\u8054\u901a\uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002\n\n\u8be6\u60c5\u8bf7\u89c1\u4ee3\u7801\u3002\n\n###\u4ee3\u7801\u5982\u4e0b\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<cstring>\n#include<map>\n#include<vector>\n#include<queue>\n#include<cmath>\n#define by Mashiro_ylb\n#define TIME 2017/10/28\nusing namespace std;\nconst int maxn_data = 100007;\n\nint father[maxn_data];  //\u5e76\u67e5\u96c6\u4ee3\u8868\u6570\u7ec4\nint rank[maxn_data]; //\u7edf\u8ba1\u96c6\u5408\u5143\u7d20\u6570\uff08\u7528\u4e8e\u5e76\u67e5\u96c6\u542f\u53d1\u5f0f\u5408\u5e76\uff09\n\ntemplate<class T>void read(T &x) //\u8bfb\u5165\u4f18\u5316\n{\n    int f = 0; x = 0; char ch = getchar();\n    while(ch < '0' || ch > '9') f |= (ch == '-'), ch = getchar();\n    while(ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    x = f? -x : x;\n}\ntemplate<class T>void write(T x)  //\u8f93\u51fa\u4f18\u5316\n{\n    if(x < 0) x = -x, putchar('-');\n    if(x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\ntemplate<class T>T Max(T x, T y){return x > y? x : y;}\ntemplate<class T>T Min(T x, T y){return x < y? x : y;}\nint find(int x)  //\u5e76\u67e5\u96c6\uff1a\u67e5\u8be2\u4ee3\u8868\u5143\u7d20+\u8def\u5f84\u538b\u7f29\n{\n    int k = x, j;\n    while(x != father[x]) x = father[x];\n    while(k != x) j = father[k], father[k] = x, k = j;\n    return x;\n}\nvoid unionn(int x, int y)  //\u5e76\u67e5\u96c6\uff1a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u5c0f\u96c6\u5408\u5e76\u5165\u5927\u96c6\u5408\uff09\n{\n    x = find(x);\n    y = find(y);\n    if(rank[x] > rank[y]) father[y] = x, rank[x] += rank[y], rank[y] = 0;\n    else father[x] = y, rank[y] += rank[x], rank[x] = 0;\n}\nbool check(int x, int y){return find(x) == find(y);}  //\u5e76\u67e5\u96c6\uff1a\u67e5\u8be2\u4e24\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\n\nint init();\n\nint main()\n{\n//     freopen(\"in.txt\",\"r\",stdin);\n    while(\"Mashiro_ylb\") write(init()), putchar(10);  //\u64cd\u4f5c\n    return 0;\n}\n\nint init()\n{\n    int maxx = 0, minn = 0x7fffffff;\n    int flag = 1;\n    int x, y;\n    memset(rank, 0, sizeof(rank));  //\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    memset(father, 0, sizeof(father));\n    read(x);read(y);\n    while(x > 0 && y > 0)\n      {\n          if(!father[x]) father[x] = x;  //\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n          if(!father[y]) father[y] = y;\n          if(check(x, y)) flag = 0;  //\u5b58\u5728\u591a\u6761\u8def\u5f84\uff0c\u4e0d\u5408\u9898\u610f\n          else unionn(x, y);\n          maxx = Max(x, Max(y, maxx));  //\u67e5\u627e\u8f93\u5165\u70b9\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff08\u51cf\u5c0f\u4e0b\u4e00\u6b65\u5224\u65ad\u56fe\u8054\u901a\u7684\u590d\u6742\u5ea6\uff09\n          minn = Min(x, Min(y, minn));\n          read(x);read(y);\n      }\n    if(x == -1 && y == -1) exit(0);  //\u4f9d\u9898\u610f\u7ed3\u675f\u7a0b\u5e8f\n    for(int i = minn + 1; i <= maxx; i++)  //\u5224\u65ad\u56fe\u662f\u5426\u80fd\u8054\u901a\n      if(find(i) != 0 && find(i) != find(minn))\n        return 0;\n    return flag;\n}\n```",
        "postTime": 1509189221,
        "uid": 62410,
        "name": "Mashiro_ylb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6\n\n\n```cpp\nint main(){\n    for (int i=1;i<=10010;i++)\n        fa[i]=i;\n    while (1){\n        int sum=0;\n        int maxn=0;\n        int x,y;\n        cin>>x>>y;\n        if (x==-1&&y==-1) break;\n        maxn=max(maxn,x);\n        maxn=max(maxn,y);\n        memset(book,0,sizeof(book));              //\u521d\u59cb\n        init(10010);\n        book[x]=1;\n        book[y]=1;\n        while (1){\n            if (x==0&&y==0) break;\n            int t1=find(x);\n            int t2=find(y);\n            if (t1==t2){\n                 sum=1;\n            }\n            if (t1!=t2) fa[t1]=t2;\n            scanf(\"%d %d\",&x,&y);\n            maxn=max(maxn,x);\n            maxn=max(maxn,y);\n            book[x]=1;\n            book[y]=1;                                              \n        }                                                   \n        if (sum==1) cout<<\"0\"<<endl;                   //\u591a\u6761\u8def\u5f84\u76f4\u63a5\u8f930\n        else{\n            sum=0;\n        for (int i=1;i<=maxn;i++)\n            if (book[i]==1&&fa[i]==i) sum++;\n            if (sum==1) cout<<\"1\"<<endl;\n            else cout<<\"0\"<<endl                 //\u5c0f\u5fc3\uff0c\u6b64\u5904\u8981\u5168\u90e8\u8054\u901a\u65b9\u53ef;\n    }\n}\n}\n//\u6838\u4ee3\n```",
        "postTime": 1498903713,
        "uid": 9087,
        "name": "fl_334",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u672c\u8d28\u662f\u5224\u65ad\u8f93\u5165\u7684\u56fe\u662f\u5426\u662f\u4e00\u9897\u6811\uff0c\u6211\u4eec\u53ea\u8981\u6293\u4f4f\u6811\u7684\u7279\u5f81\u5c31\u884c\u4e86\uff1a\n\n1\u3001    \u8fd9\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\uff1b\n\n2\u3001    \u56fe\u4e2d\u8fb9\u6570=\u8282\u70b9\u6570-1\uff1b\n\n\u5224\u65ad\u8fde\u901a\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u3002\n\n\n\n\n\n\n```cpp\nprogram p2307;\nvar f:array[1..100000] of boolean;\nfather:array[1..100000] of longint;\nfunction get(x:longint):longint;   //\u5e76\u67e5\u96c6\nbegin\n  if x=father[x] then exit(x);\n  father[x]:=get(father[x]);\n  exit(father[x]);\nend;\nprocedure main;\nvar x,y,tot,sum,i:longint;\n    bool:boolean;\nbegin\n  read(x,y);\n  while (x<>-1) and (y<>-1) do\n  begin\n    fillchar(f,sizeof(f),false);\n    for i:=1 to 100000 do\n      father[i]:=i;\n    tot:=0;\n    sum:=0;\n    bool:=true;\n    while (x<>0) and (y<>0) do\n    begin\n      if not f[x] then inc(sum);\n      if not f[y] then inc(sum);\n      if get(x)<>get(y) then father[get(x)]:=get(y) else bool:=false;\n      f[x]:=true;\n      f[y]:=true;\n      inc(tot);\n      read(x,y);\n    end;\n    if (sum=tot+1) and bool then writeln(1) else writeln(0);\n    read(x,y);\n  end;\nend;\nbegin\n  main;\nend.\n\n```",
        "postTime": 1478080172,
        "uid": 27469,
        "name": "xh2010",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2307 \u3010\u8ff7\u5bab\u3011"
    }
]