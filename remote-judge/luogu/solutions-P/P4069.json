[
    {
        "content": "### \u601d\u8def\n\n\u7531$a\\times dis + b$\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e2a\u4e00\u6b21\u51fd\u6570\u3002  \n\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528**\u6c38\u4e45\u5316\u6807\u8bb0\u7684\u674e\u8d85\u7ebf\u6bb5\u6811**\u505a\u3002   \n\n* \u4ed4\u7ec6\u5206\u6790\u8fd9\u4e2a\u67ff\u5b50\uff1a    \n  $$ans=max\\{ a\\times (dis[i]-dis[s])+ b\\}\\ \\ \\ i\\in \\{s,\\cdots t\\}$$\n  \n\n\u7136\u540e\u628a\u5b83\u4f18\u96c5\u5730\u62c6\u5f00\uff0c\u4ee4$x=lca(s,t)$\u3002\n* \u90a3\u4e48$s$\u5230$x$\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\u8fd9\u4e48\u4e00\u6761\u76f4\u7ebf\uff1a   \n  $$y=-a\\times dis[i]+(a\\times dis[s]+b)\\ \\ \\ i\\in \\{s,\\cdots x\\}$$\n* $t$\u5230$x$\u540c\u7406\u4e3a\uff1a  \n  $$y=a\\times dis[i]+a\\times (dis[s]-2\\times dis[x])\\ \\ \\ i\\in \\{s,\\cdots x\\}$$\n\n\u4e8e\u662f\u76f4\u63a5\u4e0a\u674e\u8d85\u7ebf\u6bb5\u6811\uff0c\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u6811\u4e0a\u7684$id[i]$\uff0c\u5e76\u5bf9\u7ebf\u6bb5\u6811\u91cc\u8bb0\u5f55\u4e00\u4e2a\u539f\u59cb\u7f16\u53f7$bel[id[i]]=i$\uff0c\u6bcf\u6b21\u7684$dis[i]$\u5c31\u53ef\u4ee5\u6c42\u4e86\u3002\n* \u8bb0\u5f97\u8981`push_up()`\u6765\u7ef4\u62a4\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\uff0c\u5176\u4ed6\u5c31\u8ddf\u6a21\u677f\u4e00\u6837\u3002\n  \n### Code  \n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define db double\n#define re register int\n#define ak *\n#define ll long long\n#define inf 123456789123456789ll\nchar qwq;\ninline char getch()\n{\n\tstatic char buf[10000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,10000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n\tre lf=0,ioi=1;qwq=getch();\n\twhile(qwq<'0'||qwq>'9') ioi=qwq=='-'?~ioi+1:1,qwq=getch();\n\twhile(qwq>='0'&&qwq<='9') lf=(lf<<3)+(lf<<1)+(qwq^48),qwq=getch();\n\treturn lf ak ioi;\n}\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\nint n,m,tot,h[100005],cnt,dep[100005],top[100005],son[100005];\nint size[100005],id[100005],bel[100005],fa[100005];\nll k[400005],b[400005],mn[400005],t[400005],dis[100005];\nstruct did{int next,to,w;}e[200005];\ninline void add(re x,re y,re z)\n{\n\te[++cnt]=(did){h[x],y,z},h[x]=cnt;\n\te[++cnt]=(did){h[y],x,z},h[y]=cnt;\n}\nvoid build(re p,re l,re r)\n{\n\tmn[p]=inf;t[p]=1;\n\tif(l==r) return;\n\tre mid=(l+r)>>1;\n\tbuild(ls(p),l,mid);build(rs(p),mid+1,r);\n}\ninline ll cal(re x,re id) {return k[id]*dis[bel[x]]+b[id];}\ninline void push_up(re x) {mn[x]=min(mn[x],min(mn[ls(x)],mn[rs(x)]));}\nvoid update(re nl,re nr,re p,re l,re r,re x)\n{\n\tre mid=(l+r)>>1;\n\tif(nl<=l&&r<=nr)\n\t{\n\t\tif(cal(l,x)<=cal(l,t[p])&&cal(r,x)<=cal(r,t[p]))\n\t\t{\n\t\t\tt[p]=x,mn[p]=min(mn[p],min(cal(l,x),cal(r,x)));\n\t\t\treturn;\n\t\t}\n\t\tif(cal(l,x)>=cal(l,t[p])&&cal(r,x)>=cal(r,t[p])) return;\n\t\tif(k[x]<k[t[p]])\n\t\t{\n\t\t\tif(cal(mid,x)<=cal(mid,t[p])) update(nl,nr,ls(p),l,mid,t[p]),t[p]=x;\n\t\t\telse update(nl,nr,rs(p),mid+1,r,x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(cal(mid,x)<=cal(mid,t[p])) update(nl,nr,rs(p),mid+1,r,t[p]),t[p]=x;\n\t\t\telse update(nl,nr,ls(p),l,mid,x);\n\t\t}\n\t\treturn mn[p]=min(mn[p],min(cal(l,x),cal(r,x))),push_up(p),void();\n\t}\n\tif(nl<=mid) update(nl,nr,ls(p),l,mid,x);\n\tif(nr>mid) update(nl,nr,rs(p),mid+1,r,x);\n\tpush_up(p);\n}\nll query(re ql,re qr,re p,re l,re r)\n{\n\tif(ql<=l&&r<=qr) return mn[p];\n\tre mid=(l+r)>>1;ll res=inf;\n\tif(b[t[p]]!=inf) res=min(cal(max(l,ql),t[p]),cal(min(r,qr),t[p]));\n\tif(ql<=mid) res=min(res,query(ql,qr,ls(p),l,mid));\n\tif(mid<qr) res=min(res,query(ql,qr,rs(p),mid+1,r));\n\treturn res;\n}\nvoid dfs1(re u,re prt)\n{\n\tfa[u]=prt,dep[u]=dep[prt]+1,size[u]=1;\n\tfor(re i=h[u],v;v=e[i].to,i;i=e[i].next)\n\t{\n\t\tif(v==prt) continue;\n\t\tdis[v]=dis[u]+e[i].w;dfs1(v,u);size[u]+=size[v];\n\t\tif(size[v]>size[son[u]]) son[u]=v;\n\t}\n}\nvoid dfs2(re u,re tp)\n{\n\ttop[u]=tp,bel[id[u]=++id[0]]=u;\n\tif(son[u]) dfs2(son[u],tp);\n\tfor(re i=h[u],v;v=e[i].to,i;i=e[i].next)\n\tif(v!=fa[u]&&v!=son[u]) dfs2(v,v);\n}\ninline int lca(re u,re v)\n{\n\twhile(top[u]!=top[v]) dep[top[u]]>dep[top[v]]?u=fa[top[u]]:v=fa[top[v]];\n\treturn dep[u]>dep[v]?v:u;\n}\ninline void updrange(re u,re v)\n{\n\twhile(top[u]!=top[v]) update(id[top[u]],id[u],1,1,n,tot),u=fa[top[u]];\n\tupdate(id[v],id[u],1,1,n,tot);\n}\ninline ll ask(re u,re v)\n{\n\tll ans=inf;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tans=min(ans,query(id[top[u]],id[u],1,1,n));\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\treturn min(ans,query(id[u],id[v],1,1,n));\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(re i=1;i<n;i++)\n\t{\n\t\tre a=read(),b=read(),c=read();\n\t\tadd(a,b,c);\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\tk[++tot]=0,b[tot]=inf;build(1,1,n);\n\twhile(m--)\n\t{\n\t\tll op=read(),s=read(),t=read(),w=lca(s,t),x,y;\n\t\tif(op==1)\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tk[++tot]=-x,b[tot]=x*dis[s]+y;updrange(s,w);\n\t\t\tk[++tot]=x,b[tot]=x*(dis[s]-(dis[w]<<1))+y;updrange(t,w);\n\t\t}\n\t\telse printf(\"%lld\\n\",ask(s,t));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1555588928,
        "uid": 72679,
        "name": "disangan233",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u6bcf\u6b21\u5728\u8def\u5f84\u4e0a\u52a0\u7684\u6570\u662f\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u5bb9\u6613\u770b\u51fa\u662f\u6811\u5256+\u674e\u8d85\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fd\u6570\u6700\u5c0f\u503c\u3002~~\u6240\u4ee5\u5176\u5b9e\u4f9d\u65e7\u662f\u6a21\u677f\u9898\u3002~~\n\n\u6a2a\u5750\u6807\u81ea\u7136\u662f\u53d6\u4e2a\u786e\u5b9a\u7684\u8ddd\u79bb\u6807\u51c6\u3002\u53d6\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb$dis[i]$\u4f5c\u4e3a$i$\u7684\u6a2a\u5750\u6807\u597d\u4e86\uff0c\u8fd9\u6837\u5bf9\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\uff0c\u6a2a\u5750\u6807\u8fd8\u662f\u9012\u589e\u7684\u3002\n\n\u4ee4$w=LCA(u,v)$\u3002\u5982\u679c\u5728$(u,v)$\u8def\u5f84\u4e0a\u52a0\u5165\u76f4\u7ebf$y=kx+b$\uff1a\n\n\u5bf9\u4e8e\u5728$u\\to w$\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9$i$\u7684\u6a2a\u5750\u6807\u5c31\u662f$dis_u-dis_i$\uff0c\u6240\u4ee5\u5bf9\u4e8e$i$\uff0c$y=k(dis_u-dis_i)+b=-k\\cdot dis_i+k\\cdot dis_u+b$\uff0c\u4f9d\u65e7\u662f\u539f\u5750\u6807\u7cfb\u4e00\u6761$k=-k,\\quad b=k\\cdot dis_u+b$\u7684\u76f4\u7ebf\u3002\u6240\u4ee5\u76f4\u63a5\u6811\u5256+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u53e6\u4e00\u6761$w\\to v$\u7684\u8def\u5f84\u540c\u7406\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5b83\u4ee5\u53ca\u5b83\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u503c$mn[rt]$\uff08\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u90fd\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u6240\u4ee5\u6700\u5c0f\u503c\u663e\u7136\u5c31\u5728\u4e24\u7aef\u70b9\u4e2d\u53d6\uff09\u3002\n\n\u533a\u95f4\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5982\u679c\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u4e8e\u8be2\u95ee\u533a\u95f4\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de$mn[rt]$\uff1b\u5426\u5219\u7b54\u6848\u4e0e\u5f53\u524d\u70b9\u7ef4\u62a4\u7684\u7ebf\u6bb5\u4e24\u7aef\u70b9\u7684\u51fd\u6570\u503c\u53d6\u4e2a$\\min$\uff0c\u7ee7\u7eed\u9012\u5f52\u5373\u53ef\u3002\n\n\u8fd9\u6837\u533a\u95f4\u4fee\u6539+\u6811\u5256\u7684\u590d\u6742\u5ea6\u662f$O(n\\log^3n)$\uff0c\u4f60\u53ea\u8981\u76f8\u4fe1\u6811\u5256+\u674e\u8d85\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u5f88\u5c0f\u5c31\u597d\u4e86\u3002\u3002\n\n[\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u91ca](https://www.cnblogs.com/1-1-1-1/p/6690641.html)\uff1a\n> \u4e00.\u56e0\u4e3a\u4e00\u4e2a\u7ebf\u6bb5\u7684\u4ea4\u70b9\u6b63\u597d\u5728\u533a\u95f4\u7684\u5de6\u6570\u7b2c\u4e8c\u4e2a\u70b9\u548c\u53f3\u6570\u7b2c\u4e8c\u4e2a\u70b9\u7684\u51e0\u7387\u7279\u522b\u5c0f\uff0c\u6240\u4ee5\u6bcf\u6b21\u4e8c\u5206\u4e0d\u4e00\u5b9a\u8981\u5230\u672b\u5c3e\u624d\u7ed3\u675f\uff0c\u6240\u4ee5\u4e00\u822c\u53ef\u4ee5\u628a\u4ea4\u70b9\u5e73\u5747\u5728\u4e8c\u5206\u4e2d\u95f4\u65f6\u523b\u505c\u6b62\uff0c\u56e0\u6b64\u8fd9\u91cc\u6709\u4e2a\u4e8c\u5206\u4e4b\u4e00\u7684\u5e38\u6570\uff1b\u4e8c.\u7ebf\u6bb5\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u574f\u60c5\u51b5(\u6bcf\u5c42\u90fd\u6709\u4e24\u4e2a\u70b9)\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e2a\u7ea63/4\u7684\u5e38\u6570\uff0c\u53c8\u7531\u4e8e\u6811\u94fe\u5256\u5206\u4e0d\u4e00\u5b9a\u662f\u6700\u574f\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u91cc\u53c8\u6709\u4e2a\u7ea61/2\u7684\u5e38\u6570\uff0c\u591a\u4e8f\u4e86\u51fa\u9898\u4eba\u826f\u5fc3)\uff0c\u6240\u4ee5\u8fd9\u9898$O(n\\log^3n)$\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\u3002\n\n\u6ce8\u610f\u7ebf\u6bb5\u6811\u91cc\u7684\u4e0b\u6807\u90fd\u662f\u4ee3\u8868DFS\u5e8f\u4e2d\u7684$dis[i]$\u3002\n\n\u4e00\u4efd\u5e38\u6570\u7279\u522b\u5927\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <assert.h>\n#include <algorithm>\n#define gc() getchar()\ntypedef long long LL;\nconst int N=1e5+5;\nconst LL INF=123456789123456789ll;\n\nint n,H[N],Enum,nxt[N<<1],to[N<<1],len[N<<1],fa[N],dep[N],sz[N],son[N],top[N],dfn[N],ref[N];\nLL dis[N];\nstruct Segment_Tree\n{\n\t#define ls rt<<1\n\t#define rs rt<<1|1\n\t#define lson l,m,ls\n\t#define rson m+1,r,rs\n\t#define S N<<2\n\tLL K[S],B[S],mn[S],Lx[S],Rx[S],Mx[S];\n\t#undef S\n\t#define Update(rt) mn[rt]=std::min(mn[rt],std::min(mn[ls],mn[rs]))\n\tvoid Build(int l,int r,int rt)\n\t{\n\t\tB[rt]=mn[rt]=INF, Lx[rt]=dis[ref[l]], Rx[rt]=dis[ref[r]];\n\t\tif(l==r) return;\n\t\tint m=l+r>>1; Mx[rt]=dis[ref[m]], Build(lson), Build(rson);\n\t}\n\tvoid Modify(int l,int r,int rt,int L,int R,LL k,LL b)\n\t{\n\t\tif(L<=l && r<=R)\n\t\t{\n\t\t\tLL lx=Lx[rt],rx=Rx[rt],l0=K[rt]*lx+B[rt],r0=K[rt]*rx+B[rt],l1=k*lx+b,r1=k*rx+b;\n\t\t\tif(l0<=l1 && r0<=r1) return;\n\t\t\tif(l1<=l0 && r1<=r0) {K[rt]=k, B[rt]=b, mn[rt]=std::min(mn[rt],std::min(l1,r1)); return;}//\u66f4\u65b0mn\uff01\n\t\t\tint m=l+r>>1;\n\t\t\tLL mx=Mx[rt]; double p=1.0*(B[rt]-b)/(k-K[rt]);\n\t\t\tif(l0<l1)\n\t\t\t\tif(p<=(double)mx) Modify(lson,L,R,K[rt],B[rt]), K[rt]=k, B[rt]=b;\n\t\t\t\telse Modify(rson,L,R,k,b);\n\t\t\telse\n\t\t\t\tif(p<=(double)mx) Modify(lson,L,R,k,b);\n\t\t\t\telse Modify(rson,L,R,K[rt],B[rt]), K[rt]=k, B[rt]=b;\n\t\t\tmn[rt]=std::min(mn[rt],std::min(l1,r1)), Update(rt);//!\n\t\t\treturn;\n\t\t}\n\t\tint m=l+r>>1;\n\t\tif(L<=m) Modify(lson,L,R,k,b);\n\t\tif(m<R) Modify(rson,L,R,k,b);\n\t\tUpdate(rt);\n\t}\n\tLL Query(int l,int r,int rt,int L,int R)\n\t{\n\t\tif(L<=l && r<=R) return mn[rt];\n\t\tLL res=INF;\n\t\tif(B[rt]!=INF)\n\t\t{\n\t\t\tLL lx=std::max(l,L),rx=std::min(r,R);\n\t\t\tres=std::min(K[rt]*dis[ref[lx]],K[rt]*dis[ref[rx]])+B[rt];\n\t\t}\n\t\tint m=l+r>>1;\n\t\tif(L<=m) res=std::min(res,Query(lson,L,R));\n\t\tif(m<R) res=std::min(res,Query(rson,L,R));\n\t\treturn res;\n\t}\n}T;\n\ninline int read()\n{\n\tint now=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=='-'&&(f=-1),c=gc());\n\tfor(;isdigit(c);now=now*10+c-'0',c=gc());\n\treturn now*f;\n}\ninline void AE(int w,int u,int v)\n{\n\tto[++Enum]=v, nxt[Enum]=H[u], H[u]=Enum, len[Enum]=w\uff1b\n\tto[++Enum]=u, nxt[Enum]=H[v], H[v]=Enum, len[Enum]=w\uff1b\n}\ninline int LCA(int u,int v)\n{\n\twhile(top[u]!=top[v]) dep[top[u]]>dep[top[v]]?u=fa[top[u]]:v=fa[top[v]];\n\treturn dep[u]>dep[v]?v:u;\n}\nvoid DFS1(int x)\n{\n\tint mx=0; sz[x]=1;\n\tfor(int i=H[x],v; i; i=nxt[i])\n\t\tif((v=to[i])!=fa[x])\n\t\t\tfa[v]=x, dep[v]=dep[x]+1, dis[v]=dis[x]+len[i], DFS1(v), sz[x]+=sz[v], sz[v]>mx&&(mx=sz[v],son[x]=v);\n}\nvoid DFS2(int x,int tp)\n{\n\tstatic int Index=0;\n\ttop[x]=tp, ref[dfn[x]=++Index]=x;\n\tif(son[x])\n\t{\n\t\tDFS2(son[x],tp);\n\t\tfor(int i=H[x],v; i; i=nxt[i])\n\t\t\tif((v=to[i])!=fa[x]&&v!=son[x]) DFS2(v,v);\n\t}\n}\nvoid Modify(int u,int w,LL k,LL b)\n{\n\twhile(top[u]!=top[w])\n\t\tT.Modify(1,n,1,dfn[top[u]],dfn[u],k,b), u=fa[top[u]];\n\tT.Modify(1,n,1,dfn[w],dfn[u],k,b);\n}\nLL Query(int u,int v)\n{\n\tLL res=INF;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) std::swap(u,v);\n\t\tres=std::min(res,T.Query(1,n,1,dfn[top[u]],dfn[u])), u=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v]) std::swap(u,v);\n\treturn std::min(res,T.Query(1,n,1,dfn[u],dfn[v]));\n}\n\nint main()\n{\n\tn=read(); int m=read();\n\tfor(int i=1; i<n; ++i) AE(read(),read(),read());\n\tDFS1(1), DFS2(1,1), T.Build(1,n,1);\n\tfor(int i=1; i<=m; ++i)\n\t\tswitch(read())\n\t\t{\n\t\t\tcase 1:\n\t\t\t{\n\t\t\t\tint u=read(),v=read(),w=LCA(u,v),k=read(),b=read();\n\t\t\t\tModify(u,w,-k,dis[u]*k+b), Modify(v,w,k,(dis[u]-(dis[w]<<1))*k+b);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: printf(\"%lld\\n\",Query(read(),read())); break;\n\t\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1544145675,
        "uid": 39887,
        "name": "SovietPower\u2728",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u9996\u5148\u770b\u5230 $a\\times dis+b$\uff0c\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\u7684\u5f62\u5f0f\uff0c\u4e0d\u59a8\u8003\u8651\u5148\u6811\u5256\u4e00\u4e0b\uff0c\u7136\u540e\u7528\u674e\u8d85\u6811\u7ef4\u62a4\u6700\u5927\u503c\n\n\u5bf9\u4e8e\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\uff0c\u5148\u6c42\u51fa $s$ \u548c $t$ \u7684 $lca$\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb $dis[u]$\uff0c\u7136\u540e\u5316\u7b80\u4e00\u4e0b\u5f0f\u5b50\n\n\u5bf9\u4e8e $s$ \u5230 $lca$ \u7684\u90a3\u6761\u8def\u5f84\u4e0a\u7684\u70b9 $u$\uff0c\u589e\u52a0\u7684\u8d21\u732e\u662f\n\n$$a\\times (dis[s]-dis[u])+b$$\n\n$$=-a\\times dis[u] + a\\times dis[s] +b$$\n\n\u5bf9\u4e8e $t$ \u5230 $lca$ \u7684\u90a3\u6761\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u589e\u52a0\u7684\u8d21\u732e\u662f\n\n$$a\\times (dis[s]+dis[u]-2\\times dis[lca])+b$$\n\n$$=a\\times dis[u] + a\\times (dis[s]-2\\times dis[lca]) +b$$\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\u4e86\n\n\u73b0\u5728\u95ee\u9898\u5c31\u5269\u5982\u679c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u5bb9\u6613\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u7ebf\u6bb5\uff0c\u6700\u5c0f\u503c\u65e0\u975e\u5c31\u662f\u4ece\u4e24\u4e2a\u7aef\u70b9\u7684\u5730\u65b9\u53d6\u5230\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u4e0a\u518d\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21 $Pushup$\uff0c\u6700\u540e\u533a\u95f4\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u7ecf\u8fc7\u7684\u533a\u95f4\u4e0a\u5b58\u7684\u4f18\u52bf\u7ebf\u6bb5\u4e5f\u80fd\u4e3a\u7b54\u6848\u4f5c\u51fa\u8d21\u732e\uff0c\u7b97\u4e0a\u5c31\u597d\u4e86\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long ll;\n\nusing namespace std;\n\nconst int maxn = 2e5 + 50;\nconst ll INF = 123456789123456789;\n\ninline int read () {\n\tregister int x = 0, w = 1;\n\tregister char ch = getchar ();\n\tfor (; ch < '0' || ch > '9'; ch = getchar ()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar ()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\nint n, m;\n\nstruct Line {\n\tint k;\n\tll b;\n\tLine () {}\n\tLine (register int x, register ll y) { k = x, b = y; }\n};\n\nstruct Tree {\n\tLine seg;\n\tll val;\n\tTree () { seg.k = 0, seg.b = val = INF; }\n} tree[maxn << 2];\n\ninline ll Calc (register Line a, register ll x) { return a.k * x + a.b; }\n\nstruct Edge {\n\tint to, next, w;\n} e[maxn << 1];\n\nint tot, head[maxn];\n\ninline void Add (register int u, register int v, register int w) {\n\te[++ tot].to = v;\n\te[tot].w = w;\n\te[tot].next = head[u];\n\thead[u] = tot;\n}\n\nint deep[maxn], size[maxn], son[maxn], f[maxn];\nint tic, top[maxn], dfn[maxn], rk[maxn];\nll dis[maxn];\n\ninline void DFS0 (register int u, register int fa) {\n\tdeep[u] = deep[fa] + 1, size[u] = 1;\n\tfor (register int i = head[u]; i; i = e[i].next) {\n\t\tregister int v = e[i].to;\n\t\tif (v == fa) continue;\n\t\tdis[v] = dis[u] + e[i].w, f[v] = u, DFS0 (v, u), size[u] += size[v];\n\t\tif (size[son[u]] < size[v]) son[u] = v;\n\t}\n}\n\ninline void DFS1 (register int u, register int t) {\n\ttop[u] = t, dfn[u] = ++ tic, rk[tic] = u;\n\tif (son[u]) DFS1 (son[u], t);\n\tfor (register int i = head[u]; i; i = e[i].next) {\n\t\tregister int v = e[i].to;\n\t\tif (v == f[u] || v == son[u]) continue;\n\t\tDFS1 (v, v);\n\t}\n}\n\ninline int LCA (register int u, register int v) {\n\twhile (top[u] != top[v]) {\n\t\tif (deep[top[u]] < deep[top[v]]) swap (u, v);\n\t\tu = f[top[u]];\n\t}\n\treturn deep[u] < deep[v] ? u : v;\n}\n\ninline void Pushup (register int rt, register int l, register int r) {\n\ttree[rt].val = min (tree[rt].val, min (Calc (tree[rt].seg, dis[rk[l]]), Calc (tree[rt].seg, dis[rk[r]])));\n\ttree[rt].val = min (tree[rt].val, min (tree[rt << 1].val, tree[rt << 1 | 1].val));\n}\n\ninline void Modify (register int rt, register int l, register int r, register int s, register int t, register Line x) {\n\tregister int mid = (l + r) >> 1;\n\tif (s <= l && r <= t) {\n\t\tif (Calc (x, dis[rk[mid]]) < Calc (tree[rt].seg, dis[rk[mid]])) swap (tree[rt].seg, x);\n\t\tif (Calc (x, dis[rk[l]]) < Calc (tree[rt].seg, dis[rk[l]])) Modify (rt << 1, l, mid, s, t, x);\n\t\tif (Calc (x, dis[rk[r]]) < Calc (tree[rt].seg, dis[rk[r]])) Modify (rt << 1 | 1, mid + 1, r, s, t, x);\n\t\treturn Pushup (rt, l, r), void ();\n\t}\n\tif (s <= mid) Modify (rt << 1, l, mid, s, t, x);\n\tif (t > mid) Modify (rt << 1 | 1, mid + 1, r, s, t, x);\n\tPushup (rt, l, r);\n}\n\ninline ll Query (register int rt, register int l, register int r, register int s, register int t) {\n\tif (s <= l && r <= t) return tree[rt].val;\n\tregister int mid = (l + r) >> 1;\n\tregister ll ans = min (Calc (tree[rt].seg, dis[rk[max (l, s)]]), Calc (tree[rt].seg, dis[rk[min (r, t)]]));\n\tif (s <= mid) ans = min (ans, Query (rt << 1, l, mid, s, t));\n\tif (t > mid) ans = min (ans, Query (rt << 1 | 1, mid + 1, r, s, t));\n\treturn ans;\n}\n\ninline void TreeModify (register int u, register int v, register Line x) {\n\twhile (top[u] != top[v]) {\n\t\tif (deep[top[u]] < deep[top[v]]) swap (u, v);\n\t\tModify (1, 1, n, dfn[top[u]], dfn[u], x), u = f[top[u]];\n\t}\n\tif (dfn[u] > dfn[v]) swap (u, v);\n\tModify (1, 1, n, dfn[u], dfn[v], x);\n}\n\ninline ll TreeQuery (register int u, register int v, register ll ans = INF) {\n\twhile (top[u] != top[v]) {\n\t\tif (deep[top[u]] < deep[top[v]]) swap (u, v);\n\t\tans = min (ans, Query (1, 1, n, dfn[top[u]], dfn[u])), u = f[top[u]];\n\t}\n\tif (dfn[u] > dfn[v]) swap (u, v);\n\treturn min (ans, Query (1, 1, n, dfn[u], dfn[v]));\n}\n\nint main () {\n\tn = read(), m = read();\n\tfor (register int i = 1, u, v, w; i <= n - 1; i ++) \n\t\tu = read(), v = read(), w = read(), Add (u, v, w), Add (v, u, w);\n\tDFS0 (1, 0), DFS1 (1, 1);\n\twhile (m --) {\n\t\tregister int opt = read(), u = read(), v = read();\n\t\tif (opt == 1) {\n\t\t\tregister int a = read(), b = read(), lca = LCA (u, v);\n\t\t\tTreeModify (u, lca, Line (- a, a * dis[u] + b));\n\t\t\tTreeModify (lca, v, Line (a, a * dis[u] - 2 * a * dis[lca] + b));\n\t\t} else printf (\"%lld\\n\", TreeQuery (u, v));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1619157748,
        "uid": 335193,
        "name": "Rubyonly",
        "ccfLevel": 8,
        "title": "[SDOI2016]\u6e38\u620f"
    },
    {
        "content": "\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539$(s,t,a,b)$\uff0c\u8bbe$s$\u548c$t$\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f$lca$\u3002\u53ef\u4ee5\u63a8\u51fa\uff0c\u5f53$x$\u8282\u70b9\u5728$s$\u5230$lca$\u7684\u8def\u5f84\u4e0a\u65f6\uff0c$x$\u8282\u70b9\u4e0a\u8981\u6dfb\u52a0\u7684\u6570\u5b57\u5c31\u662f$-a*dist[x]+a*dist[s]+b$\uff1b\u5f53x\u8282\u70b9\u5728lca\u5230t\u7684\u8def\u5f84\u4e0a\u65f6\uff0c\u8fd9\u4e2a\u8282\u70b9\u8981\u6dfb\u52a0\u7684\u6570\u5b57\u662f$a*dist[x]+a*dist[s]-2*a*dist[lca]+b$\n\n\u3000\u3000\u6811\u5256\u8f6c\u6210\u5e8f\u5217\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u652f\u6301\u7ed9\u4e00\u4e2a\u533a\u95f4\u6dfb\u52a0\u4e00\u6761\u7ebf\u6bb5\uff0c\u8be2\u95ee\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u3000\u3000\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u3000\u3000\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7ebf\u6bb5\uff0c\u8fd9\u6761\u7ebf\u6bb5\u7528$a$\u3001$b$\u3001$dl$\u3001$dr$\u6765\u63cf\u8ff0\uff0c\u5206\u522b\u8868\u793a\u659c\u7387\u3001\u622a\u8ddd\u3001\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u81ea\u53d8\u91cf\u3002\n\n\u3000\u3000\u53ef\u4ee5\u4f7f\u7528\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5373\u6ca1\u6709\u4e0b\u653e\u6807\u8bb0\u7684\u64cd\u4f5c\u3002\u7ebf\u6bb5\u6811\u4e2d\u8bb0\u5f55\u4e86\u5b50\u6811\u7684\u6700\u5c0f\u503c\uff0c\u4f7f\u7528\u4f20\u7edf\u7684\u7ebf\u6bb5\u6811\u67e5\u8be2\u65f6\uff0c\u5f53$l<=p->l$\u4e14$r>=p->r$\u65f6\uff0c\u5e94\u5f53\u76f4\u63a5\u8fd4\u56de\u6240\u8bb0\u5f55\u7684\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u5426\u5219\uff0c\u7531\u4e8e\u67e5\u8be2\u533a\u95f4\u4e0d\u5b8c\u5168\u5305\u542b\u5f53\u524d\u533a\u95f4\uff0c\u6240\u4ee5\u5e94\u8be5\u53d6$max(l,p->l)$\u548c$min(r,p->r)$\u5904\u7684\u81ea\u53d8\u91cf\u5728\u5f53\u524d\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u4e0a\u7684\u53d6\u503c\uff0c\u8ba9\u4e4b\u53c2\u4e0e\u6700\u5c0f\u503c\u7684\u6bd4\u8f83\u3002\n\n\u3000\u3000\u5176\u5b9e\u7b97\u6cd5\u7684\u91cd\u70b9\u5728\u4e8e\uff0c\u600e\u6837\u5408\u5e76\u4e24\u6761\u7ebf\u6bb5\u3002\n\n\u3000\u3000$case1$\uff1a\u5982\u679c\u65b0\u7ebf\u6bb5\u5728\u5f53\u524d\u8282\u70b9\u7684\u5b9a\u4e49\u57df\u4e2d\uff0c\u5b8c\u5168\u5c0f\u4e8e\u539f\u6765\u7684\u7ebf\u6bb5\uff0c\u90a3\u5e94\u5f53\u820d\u53bb\u539f\u6765\u7684\u7ebf\u6bb5\uff0c\u5e76\u4e14\u7528\u5f53\u524d\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u66f4\u65b0\u6700\u5c0f\u503c\u3002\n\n\u3000\u3000$case2$\uff1a\u65b0\u7ebf\u6bb5\u5728\u5f53\u524d\u8282\u70b9\u7684\u5b9a\u4e49\u57df\u4e2d\uff0c\u5b8c\u5168\u5927\u4e8e\u539f\u6765\u7684\u7ebf\u6bb5\uff0c\u5e94\u5f53\u820d\u53bb\u8fd9\u6761\u65b0\u7ebf\u6bb5\u3002\n\n\u3000\u3000$case3$\uff1a\u65b0\u52a0\u5165\u7684\u7ebf\u6bb5\u548c\u539f\u6765\u7684\u7ebf\u6bb5\u5728\u5f53\u524d\u7684\u5b9a\u4e49\u57df\u4e2d\u6709\u4ea4\u70b9\u3002\u6c42\u4e00\u4e0b\u4e24\u6761\u7ebf\u6bb5\u7684\u4ea4\u70b9\u6a2a\u5750\u6807$x$\u3002\u5982\u679c\u65b0\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5927\u4e8e\u65e7\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\uff0c\u6216$x<=mid$\uff0c\u5c31\u5411\u5de6\u4e0b\u653e\uff1b\u5982\u679c\u65b0\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u5c0f\u4e8e\u65e7\u7ebf\u6bb5\u7684\u53f3\u4ea4\u70b9\uff0c\u6216$x>mid$\uff0c\u5c31\u5f80\u53f3\u4e0b\u653e\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define ll long long\n#define inf 123456789123456789ll\n#define maxn 210000\n#define maxk 17\nusing namespace std;\nll N,M,head[maxn],next[maxn],w[maxn],to[maxn],top[maxn],tid[maxn],tim,\n    dist[maxn],size[maxn],son[maxn],fa[maxn],tot,anc[maxn][maxk+3],\n    deep[maxn],untid[maxn];\nstruct segtree\n{\n    ll l,r,min,taga,tagb,dl,dr;\n    segtree *lch,*rch;\n    segtree(){min=inf;lch=rch=0;taga=0;tagb=inf;}\n}*root;\nvoid adde(ll a,ll b,ll v)\n{\n\tto[++tot]=b;\n\tw[tot]=v;\n\tnext[tot]=head[a];\n\thead[a]=tot;\n}\nll f(ll a,ll b,ll x){return a*x+b;}\nvoid addline(segtree *p,ll taga,ll tagb)\n{\n    ll f1,f2,f3,f4,x,mid;\n    f1=f(p->taga,p->tagb,p->dl),f2=f(p->taga,p->tagb,p->dr);\n    f3=f(taga,tagb,p->dl),f4=f(taga,tagb,p->dr);\n    if(f3<=f1 and f4<=f2)\n    {\n        p->taga=taga,p->tagb=tagb;\n        p->min=min(min(f3,f4),p->min);\n        return;\n    }\n    if(f3>f1 and f4>f2) return;\n    x=(tagb-p->tagb)/(p->taga-taga);\n    mid=p->lch->dr;\n    if(f3<=f1 or x<=mid) addline(p->lch,taga,tagb);\n    if(f4<=f2 or x>mid) addline(p->rch,taga,tagb);\n    p->min=min(p->min,min(p->lch->min,p->rch->min));\n}\nvoid segtag(segtree*p,ll l,ll r,ll a,ll b)\n{\n    ll mid=(p->l+p->r)>>1;\n    if(l<=p->l and r>=p->r)\n    {\n        addline(p,a,b);\n        return;\n    }\n    if(l<=mid) segtag(p->lch,l,r,a,b);\n    if(r>mid) segtag(p->rch,l,r,a,b);\n    p->min=min(p->min,min(p->lch->min,p->rch->min));\n}\nll segmin(segtree*p,ll l,ll r)\n{\n    ll mid=(p->l+p->r)>>1,ans=inf;\n    if(l<=p->l and r>=p->r) return p->min;\n    if(l<=mid) ans=min(ans,segmin(p->lch,l,r));\n    if(r>mid) ans=min(ans,segmin(p->rch,l,r));\n    l=max(l,p->l),r=min(r,p->r);\n    ans=min(ans,f(p->taga,p->tagb,dist[untid[l]]));\n    ans=min(ans,f(p->taga,p->tagb,dist[untid[r]]));\n    return ans;\n}\nvoid build(segtree*p,ll l,ll r)\n{\n    ll mid=(l+r)>>1;\n    p->l=l,p->r=r;\n    if(l==r){p->dl=p->dr=dist[untid[l]];return;}\n    build(p->lch=new segtree,l,mid);\n    build(p->rch=new segtree,mid+1,r);\n    p->dl=p->lch->dl;p->dr=p->rch->dr;\n}\nvoid dfs1(ll pos)\n{\n    ll p,v;\n    size[pos]=1;\n    for(p=head[pos];p;p=next[p])\n    {\n        if((v=to[p])==fa[pos]) continue;\n        fa[v]=pos;\n        dist[v]=dist[pos]+w[p];\n        deep[v]=deep[pos]+1;\n        dfs1(v);\n        if(size[v]>size[son[pos]]) son[pos]=v;\n        size[pos]+=size[v];\n    }\n}\nvoid dfs2(ll pos,ll tp)\n{\n    ll p,v;\n    top[pos]=tp;\n    tid[pos]=++tim;\n    untid[tid[pos]]=pos;\n    if(son[pos]) dfs2(son[pos],tp);\n    for(p=head[pos];p;p=next[p])\n        if((v=to[p])!=fa[pos] and v!=son[pos])dfs2(v,v);\n}\nll findmin(ll a,ll b)\n{\n    ll ta=top[a],tb=top[b],ans=inf;\n    while(ta!=tb)\n    {\n        if(deep[ta]<deep[tb]) swap(a,b),swap(ta,tb);\n        ans=min(ans,segmin(root,tid[ta],tid[a]));\n        a=fa[ta];ta=top[a];\n    }\n    if(deep[a]>deep[b])swap(a,b);\n    ans=min(ans,segmin(root,tid[a],tid[b]));\n    return ans;\n}\nvoid maketag(ll a,ll b,ll taga,ll tagb)\n{\n    ll ta=top[a],tb=top[b];\n    while(ta!=tb)\n    {\n        if(deep[ta]<deep[tb]) swap(a,b),swap(ta,tb);\n        segtag(root,tid[ta],tid[a],taga,tagb);\n        a=fa[ta];ta=top[a];\n    }\n    if(deep[a]>deep[b])swap(a,b);\n    segtag(root,tid[a],tid[b],taga,tagb);\n}\nvoid calcf()\n{\n    ll i, k;\n    for(i=1;i<=N;i++) anc[i][0]=fa[i];\n    for(k=1;k<=maxk;k++)\n        for(i=1;i<=N;i++)\n            anc[i][k]=anc[anc[i][k-1]][k-1];\n}\nll LCA(ll x, ll y)\n{\n    ll k;\n    if(deep[x]<deep[y])swap(x,y);\n    for(k=maxk;k>=0;k--)\n\t\tif(deep[anc[x][k]]>=deep[y])\n\t\t\tx=anc[x][k];\n    if(x==y)return x;\n    for(k=maxk;k>=0;k--)\n\t\tif(anc[x][k]!=anc[y][k])\n\t\t\tx=anc[x][k],y=anc[y][k];\n    return anc[x][0];\n}\nvoid solve()\n{\n    ll type,s,t,a,b,i,lca;\n    for(i=1;i<=M;i++)\n    {\n        scanf(\"%lld%lld%lld\",&type,&s,&t);\n        if(type==1)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            lca=LCA(s,t);\n            maketag(s,lca,-a,a*dist[s]+b);\n            maketag(lca,t,a,a*dist[s]-2*a*dist[lca]+b);\n        }\n        else printf(\"%lld\\n\",findmin(s,t));\n    }\n}\nvoid init()\n{\n    ll i,a,b,v;\n    scanf(\"%lld%lld\",&N,&M);\n    for(i=1;i<N;i++)\n\t\tscanf(\"%lld%lld%lld\",&a,&b,&v),adde(a,b,v),adde(b,a,v);\n    deep[1]=1;\n    dist[1]=0;\n    dfs1(1);\n    dfs2(1,1);\n    calcf();\n    build(root=new segtree,1,N);\n}\nint main()\n{\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1545453260,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\n\n## Solution\uff1a\n\n\u9996\u5148\u8003\u8651\u6811\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u7b49\u5dee\u5e8f\u5217\u770b\u6210\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u7136\u540e\u8f6c\u5316\u4e00\u4e0b\u9898\u610f\uff1a\n\n1.\u533a\u95f4\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\n\n2.\u6c42\u533a\u95f4\u5185\u6700\u9760\u4e0b\u7684\u70b9\n\n\u663e\u7136\u53ef\u4ee5\u7528\u8d85\u54e5\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\n\n\n\n\u56e0\u4e3a\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2adis\u6570\u7ec4\uff0cdis[i]\u8868\u793ai\u8ddd\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u7ef4\u62a4\u4e00\u6761\u7ebf\u6bb5\uff0c\u8868\u793a**\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u6700\u5c0f\u503c\u70b9\u4e2d\uff0c\u6709\u70b9\u5728\u8fd9\u6761\u7ebf\u6bb5\u4e0a**\n\n\u8003\u8651\u5728\u4e00\u4e2a\u533a\u95f4$[l,r]$\u4e2d\u5df2\u7ecf\u6709\u4e00\u6761\u7ebf\u6bb5f1\uff0c\u73b0\u5728\u6211\u4eec\u518d\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5f2\uff0c\u6c42\u51faf1\u7684\u5728l\u7684\u53d6\u503cl1\uff0c\u5728r\u7684\u53d6\u503cr1\u548cf2\u5728l,r\u7684\u53d6\u503cl2,r2\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1.l1<=l2,r1<=r2 \u663e\u7136f2\u6ca1\u6709\u4efb\u4f55\u70b9\u4f1a\u6bd4f1\u4f18\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\n\n2.l1>l2 r1>r2 \u7528f2\u8986\u76d6f1\u5373\u53ef\n\n3.l1>l2 r1<=r2\n\n\u6211\u4eec\u6c42\u51faf1,f2\u5728mid\u5904\u7684\u53d6\u503cm1,m2\uff0c\u518d\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n(1)m1>m2 \u8bf4\u660e\u5728\u5de6\u534a\u8fb9\u90fd\u662ff2\u66f4\u4f18\uff0c\u5bf9\u4e8e\u6574\u4e2a\u533a\u95f4\uff0c\u7528f2\u8986\u76d6f1\uff0c**\u5728\u53f3\u534a\u8fb9\u8ba8\u8bbaf1**\n\n(2)m1<=m2 \u8bf4\u660e\u5728\u53f3\u534a\u8fb9\u90fd\u662ff1\u66f4\u4f18\uff0c\u5de6\u534a\u8fb9\u8ba8\u8bbaf2\u5373\u53ef\n\n4.l1<=l2 r1>r2 \u7c7b\u4f3c\u7b2c\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\n\n\n\n\u94fe\u4e0a\u95ee\u9898\u8f6c\u5230\u6811\u4e0a\uff0c\u6811\u94fe\u5256\u5206\u5373\u53ef\n\n\n\n\u5728\u8fd9\u91cc\u8fd8\u9700\u8981\u7528\u5230\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u6280\u5de7\uff0c\u5373\u6211\u4eec\u4e0d\u4e0b\u4f20\u6807\u8bb0\uff0c\u5728\u6c42\u533a\u95f4\u6700\u5c0f\u503c\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u548c\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u533a\u95f4\uff0c\u628a\u7b54\u6848\u548c\u8fd9\u4e2a\u533a\u95f4\u6240\u7ef4\u62a4\u7684\u7ebf\u6bb5\u53d6min\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u770b\u4ee3\u7801\n\n\n\n\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<iostream>\n#define ll long long\nusing namespace std;\nconst int N=100010;\nconst long long inf=123456789123456789; \nint n,m;\nstruct edg{\n\tint to,next,v;\n}e[2*N];\nstruct tree{\n\tint l,r;\n\tlong long x,y,v;\n\tbool tag;\n}tr[4*N];\nbool vis[N];\nlong long ans,dis[N];\nint head[N],top[N],size,dep[N],hs[N],sz[N],f[N][31],dfn[N],cnt,p[N];\nvoid add(int x,int y,int v){size++;e[size]={y,head[x],v};head[x]=size;}\nvoid dfs1(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;sz[x]=1;f[x][0]=fa;\n\tfor (int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif (dep[y]) continue;\n\t\tdis[y]=dis[x]+e[i].v;\n\t\tdfs1(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif (sz[y]>sz[hs[x]]) hs[x]=y;\n\t}\n}\nvoid dfs2(int x,int ff)\n{\n\ttop[x]=ff;dfn[x]=++cnt;vis[x]=1;p[cnt]=x;\n\tif (hs[x]) dfs2(hs[x],ff);\n\tfor (int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif (vis[y]) continue;\n\t\tdfs2(y,y);\n\t}\n}\nvoid build(int i,int l,int r)\n{\n\ttr[i].l=l,tr[i].r=r;tr[i].v=inf;\n\tif (l==r) return;\n\tint mid=l+r>>1;\n\tbuild(i<<1,l,mid);build(i<<1|1,mid+1,r);\n}\nint LCA(int x,int y)\n{\n\tif (dep[x]<dep[y]) swap(x,y);\n\tfor (int i=30;i>=0;i--) if (dep[f[x][i]]>=dep[y]) x=f[x][i];\n\tif (x==y) return x;\n\tfor (int i=30;i>=0;i--) if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nvoid update(int i){tr[i].v=min(tr[i].v,min(tr[i<<1].v,tr[i<<1|1].v));}\nvoid add(int i,ll a,ll b)\n{\n\tint L=tr[i].l,R=tr[i].r;\n\tif (!tr[i].tag) {tr[i].tag=1,tr[i].x=a,tr[i].y=b,tr[i].v=min(tr[i].v,min(1ll*dis[p[L]]*b+a,1ll*dis[p[R]]*b+a));return;}\n\tll l1=tr[i].y*dis[p[L]]+tr[i].x;\n\tll l2=b*dis[p[L]]+a;\n\tll r1=tr[i].y*dis[p[R]]+tr[i].x;\n\tll r2=b*dis[p[R]]+a;\n\tif (l2>=l1&&r2>=r1) return;\n\tif (l2<l1&&r2<r1) {tr[i].x=a,tr[i].y=b;tr[i].v=min(tr[i].v,min(1ll*dis[p[L]]*b+a,1ll*dis[p[R]]*b+a));return;}\n\tint mid=L+R>>1;\n\tll m1=tr[i].y*dis[p[mid]]+tr[i].x;\n\tll m2=b*dis[p[mid]]+a;\n\tif (l2>=l1)\n\t{\n\t\tif (m2>=m1) add(i<<1|1,a,b);\n\t\telse add(i<<1,tr[i].x,tr[i].y),tr[i].x=a,tr[i].y=b,tr[i].v=min(tr[i].v,min(1ll*dis[p[L]]*b+a,1ll*dis[p[R]]*b+a));\n\t}\n\telse\n\t{\n\t\tif (m2>=m1) add(i<<1,a,b);\n\t\telse add(i<<1|1,tr[i].x,tr[i].y),tr[i].x=a,tr[i].y=b,tr[i].v=min(tr[i].v,min(1ll*dis[p[L]]*b+a,1ll*dis[p[R]]*b+a));\n\t}\n\tupdate(i);\n}\nvoid modify(int i,int l,int r,ll a,ll b)\n{\n\tint L=tr[i].l,R=tr[i].r;\n\tif (L>r||l>R) return;\n\tif (l<=L&&R<=r) {add(i,a,b);return;}\n\tmodify(i<<1,l,r,a,b);modify(i<<1|1,l,r,a,b);\n\tupdate(i);\n}\nvoid query(int i,int l,int r)\n{\n\tint L=tr[i].l,R=tr[i].r;\n\tif (L>r||l>R) return;\n\tif (l<=L&&R<=r) {ans=min(ans,tr[i].v);return;}\n\tif (tr[i].tag) ans=min(ans,min(1ll*dis[p[max(L,l)]]*tr[i].y+tr[i].x,1ll*dis[p[min(R,r)]]*tr[i].y+tr[i].x));\n\tquery(i<<1,l,r);query(i<<1|1,l,r);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int x,y,v,i=1;i<n;i++) scanf(\"%d%d%d\",&x,&y,&v),add(x,y,v),add(y,x,v);\n\tdfs1(1,0);dfs2(1,1);\n\tbuild(1,1,n);\n\tfor (int i=1;i<=30;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n\tlong long a,b;\n\tfor (int x,y,z,i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&z,&x,&y);\n\t\tif (z==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&b,&a);\n\t\t\tint xx=x;\n\t\t\tint lca=LCA(x,y);\n\t\t\tll na=a+b*dis[x];\n\t\t\tll nb=-b;\n\t\t\twhile (top[x]!=top[lca])\n\t\t\t{\n\t\t\t\tmodify(1,dfn[top[x]],dfn[x],na,nb);\n\t\t\t\tx=f[top[x]][0];\n\t\t\t}\n\t\t\tmodify(1,dfn[lca],dfn[x],na,nb);\n\t\t\tna=a+b*(dis[xx]-dis[lca])-b*dis[lca];\t\t\n\t\t\tnb=b;\n\t\t\twhile (top[y]!=top[lca])\n\t\t\t{\n\t\t\t\tmodify(1,dfn[top[y]],dfn[y],na,nb);\n\t\t\t\ty=f[top[y]][0];\n\t\t\t}\n\t\t\tmodify(1,dfn[lca],dfn[y],na,nb);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans=inf;\n\t\t\twhile (top[x]!=top[y])\n\t\t\t{\n\t\t\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\t\t\tquery(1,dfn[top[x]],dfn[x]);\n\t\t\t\tx=f[top[x]][0];\n\t\t\t}\n\t\t\tif (dep[x]<dep[y]) swap(x,y);\n\t\t\tquery(1,dfn[y],dfn[x]);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n} \n```",
        "postTime": 1521372398,
        "uid": 17800,
        "name": "Fizzmy",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u4e0d\u96be\u770b\u51fa $a\\times dis +b$ \u662f\u4e00\u6b21\u51fd\u6570\u7684\u6837\u5b50\u3002\n\n\u8fd9\u4e2a\u6837\u5b50\u4e0d\u597d\u7ef4\u62a4\uff0c\u663e\u7136\u8981\u8ba9\u8fd9\u6761\u76f4\u7ebf\u7684 $x$ \u4e3a\u4e0e $s,t$ \u65e0\u5173\u7684\u503c\u3002\n\n- \u8bb0 $lca=\\operatorname{lca}(s,t)$\uff0c\u5219\u8def\u5f84\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n- \u5bf9\u4e8e\u8def\u5f84 $(s,lca)$ \u4e0a\u7684\u70b9 $i$\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a $a(dis_s-dis_i)+b$\u3002\n- \u53d8\u5f0f\u5f97 $-a\\cdot dis_i+a \\cdot dis_s+b$\u3002\n- \u5bf9\u4e8e\u8def\u5f84 $(lca,t)$ \u4e0a\u7684\u70b9 $i$\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a $a(dis_s+dis_i-2\\cdot dis_{lca})+b$\u3002\n- \u53d8\u5f0f\u5f97 $a\\cdot dis_i+a\\cdot (dis_s-2\\cdot dis_{lca})+b$\u3002\n\n\u628a $dis_i$ \u4f5c\u4e3a $x$\uff0c\u5219\u6bcf\u6b21 Alice \u64cd\u4f5c\u5c31\u63d2\u5165\u4e24\u6761\u7ebf\u6bb5\uff0c\u7528\u674e\u8d85\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u63d2\u5165\u7684\u7ebf\u6bb5\u662f\u5728\u6811\u4e0a\u7684\uff0c\u7528\u6811\u5256\u7ef4\u62a4\u5373\u53ef\u3002\n\n- \u7531\u4e8e\u67e5\u8be2\u7684\u662f\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u6545\u674e\u8d85\u6811\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n- \u6ce8\u610f\u5230\u7ebf\u6bb5\u6700\u503c\u53d6\u5728\u4e24\u7aef\uff0c\u6545\u6bcf\u6b21\u7528\u5f53\u524d\u533a\u95f4\u7684\u4e24\u7aef\u70b9\u66f4\u65b0\u6700\u5c0f\u503c\u3002\n\n\u674e\u8d85\u6811\u7ef4\u62a4\u7ebf\u6bb5\u662f $O(\\log^2n)$ \u7684\uff0c\u518d\u52a0\u4e0a\u6811\u5256\u8df3\u94fe\u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\log^3n)$\u3002\n\n~~5e8 \u73b0\u5728\u8ba1\u7b97\u673a\u4e0d\u662f\u968f\u4fbf\u8dd1\u561b\u3002~~\n\n\u6211\u4ee3\u7801\u5e94\u8be5\u7b97\u6bd4\u8f83\u77ed\u7684\u5427\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nconst int N=1e5+5;\nconst ll inf=123456789123456789;\nint n,m,tot,sz[N],dep[N],fa[N],son[N];\nint Ti,dfn[N],rev[N],top[N];\nll dis[N];\nvector<pair<int,int>> G[N];\nstruct line{\n    ll k,b;\n    ll operator()(const int &x){return k*dis[rev[x]]+b;}\n}p[N*2];\nstruct SegmentTree{\n    ll mi[N<<2];\n    int id[N<<2];\n    #define lc (k<<1)\n    #define rc (k<<1|1)\n    #define mid ((l+r)>>1)\n    inline ll min(ll x,ll y) {return x<y?x:y;}\n    inline void init() {for(int i=1;i<=n*4;i++) mi[i]=inf;p[0].b=inf;}//\u628a\u7b2c 0 \u6761\u7ebf\u6bb5\u503c\u8bbe\u4e3a inf\n    inline void pushup(int k) {mi[k]=min(mi[k],min(mi[lc],mi[rc]));}\n\n    void upd(int k,int l,int r,int u)\n    {\n        int &v=id[k];\n        mi[k]=min(mi[k],min(p[u](l),p[u](r)));\n        if(p[u](mid)<p[v](mid)) swap(u,v);\n        if(l==r) return;\n        if(p[u](l)<p[v](l)) upd(lc,l,mid,u);\n        if(p[u](r)<p[v](r)) upd(rc,mid+1,r,u);\n        pushup(k);\n    }\n\n    void update(int x,int y,int u,int k=1,int l=1,int r=n)\n    {\n        if(l>=x&&r<=y) return upd(k,l,r,u);\n        if(x<=mid) update(x,y,u,lc,l,mid);\n        if(mid<y) update(x,y,u,rc,mid+1,r);\n        pushup(k);\n    }\n\n    ll query(int x,int y,int k=1,int l=1,int r=n)\n    {\n        if(l>=x&&r<=y) return mi[k];\n        ll res=min(p[id[k]](max(l,x)),p[id[k]](min(r,y)));//\u6ce8\u610f\u533a\u95f4\u548c\u67e5\u8be2\u8fb9\u754c\n        if(x<=mid) res=min(res,query(x,y,lc,l,mid));\n        if(mid<y) res=min(res,query(x,y,rc,mid+1,r));\n        return res;\n    }\n}T;\n\nvoid dfs1(int u,int f,ll d)\n{\n    dep[u]=dep[f]+1,fa[u]=f,sz[u]=1,dis[u]=d;\n    for(auto [v,w]:G[u])\n    {\n        if(v==f) continue;\n        dfs1(v,u,d+w);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[son[u]]) son[u]=v;\n    }\n}\n\nvoid dfs2(int u,int topf)\n{\n    dfn[u]=++Ti,rev[Ti]=u,top[u]=topf;\n    if(son[u]) dfs2(son[u],topf);\n    for(auto [v,w]:G[u]) if(v!=fa[u]&&v!=son[u]) dfs2(v,v);\n}\n\ninline int LCA(int u,int v)\n{\n    while(top[u]!=top[v])\n    {\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        u=fa[top[u]];\n    }\n    return dep[u]<dep[v]?u:v;\n}\n\ninline void modify(int u,int v)//\u6ce8\u610f v \u5df2\u7ecf\u662f u \u7684 lca \u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\n{\n    while(top[u]!=top[v]) T.update(dfn[top[u]],dfn[u],tot),u=fa[top[u]];\n    T.update(dfn[v],dfn[u],tot);\n}\n\ninline ll qmin(int u,int v)\n{\n    ll ans=inf;\n    while(top[u]!=top[v])\n    {\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans=min(ans,T.query(dfn[top[u]],dfn[u]));\n        u=fa[top[u]];\n    }\n    if(dep[u]>dep[v]) swap(u,v);\n    return min(ans,T.query(dfn[u],dfn[v]));\n}\n\ninline int rd()\n{\n    int x=0,f=1;char c=getchar();\n    for(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n    for(; isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+(c^48);\n    return x*f;\n}\n\nint main()\n{\n    n=rd(),m=rd();\n    for(int i=1,u,v,w;i<n;i++) u=rd(),v=rd(),w=rd(),G[u].push_back({v,w}),G[v].push_back({u,w});\n    dfs1(1,0,0),dfs2(1,1);\n    T.init();\n    while(m--)\n    {\n        int op=rd(),s=rd(),t=rd();\n        if(op==1)\n        {\n            int a=rd(),b=rd();\n            int lca=LCA(s,t);\n            p[++tot]={-a,a*dis[s]+b};//\u63d2\u5165 (s,lca) \u8def\u5f84\u7684\u7ebf\u6bb5\n            modify(s,lca);\n            p[++tot]={a,a*(dis[s]-dis[lca]*2)+b};//\u63d2\u5165\uff08lca,t\uff09\u8def\u5f84\u7684\u7ebf\u6bb5\n            modify(t,lca);\n        }\n        else printf(\"%lld\\n\",qmin(s,t));\n    }\n}\n```\n",
        "postTime": 1684986712,
        "uid": 501028,
        "name": "spider_oyster",
        "ccfLevel": 5,
        "title": "P4069 [SDOI2016]\u6e38\u620f"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4069)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io./2023/05/03/P4069%20%E6%B8%B8%E6%88%8F/)\n\n\u7b80\u5355\u7684\u674e\u8d85\u7ebf\u6bb5\u6811\u677f\u5b50\u3002\n\n\u89c2\u5bdf\u5230\u63d2\u5165\u8fdb\u53bb\u7684\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u6240\u4ee5\u8003\u8651\u6811\u5256\u52a0\u674e\u8d85\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651\u53d6\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb $d_i$ \u4f5c\u4e3a\u6a2a\u5750\u6807\uff0c\u7136\u540e\u6211\u4eec\u589e\u52a0\u7684\u65f6\u5019\u53ef\u4ee5\u5148\u6c42\u51fa $p = \\text{LCA(s, t)}$\uff0c\u5bf9\u4e8e $s \\rightarrow p$ \u4e0a\u7684\u8282\u70b9 $i$\uff0c\u5b83\u4e0a\u9762\u65b0\u653e\u7684\u6570\u5373\u4e3a $a \\times (d_s - d_i) + b = -a \\times d_i + a \\times d_s + b$\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u4ee5 $d_i$ \u4e3a\u6a2a\u5750\u6807\u7684\u4e00\u6b21\u51fd\u6570\u7684\u5f62\u5f0f\u3002\u540c\u7406\uff0c\u5bf9\u4e8e $p \\rightarrow t$ \u4e0a\u7684\u8282\u70b9 $i$\uff0c\u5b83\u4e0a\u9762\u65b0\u653e\u7684\u6570\u4e3a $a \\times (d_s + d_i - 2d_p) + b$\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u8f6c\u5316\u3002\n\n\u6211\u4eec\u7528\u6811\u94fe\u5256\u5206\u628a\u95ee\u9898\u8f6c\u5230\u5e8f\u5217\u4e0a\u540e\uff0c\u5c31\u9700\u8981\u6211\u4eec\u652f\u6301\u63d2\u5165\u76f4\u7ebf\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u5b9e\u662f\u548c\u666e\u901a\u7684\u674e\u8d85\u6570\u5dee\u4e0d\u591a\u7684\u3002\u53ea\u662f\u8981\u652f\u6301\u4e00\u4e2a `pushup` \u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u68f5\u6811\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728 `pushup` \u65f6\u8981\u8003\u8651\u5230\u5f53\u524d\u533a\u95f4\u4f18\u52bf\u7ebf\u6bb5\u7684\u8d21\u732e\u3002\u53c8\u56e0\u4e3a\u6bcf\u4e00\u6761\u91cd\u94fe\u4e0a\u7684 $d_i$ \u90fd\u662f\u5355\u8c03\u7684\uff0c\u5f53\u524d\u4f18\u52bf\u7ebf\u6bb5\u53ea\u53ef\u80fd\u5728\u533a\u95f4\u5de6\u53f3\u4fa7\u53d6\u5230\u6700\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u5199\u3002\n\n```c++\ninline void pushup(int p) {\n    if (t[p].l == t[p].r) t[p].min = min(calc(t[p].tag, t[p].l), calc(t[p].tag, t[p].r));\n    else t[p].min = min({t[p << 1].min, t[p << 1 | 1].min, calc(t[p].tag, t[p].l), calc(t[p].tag, t[p].r)});\n}\n```\n\n\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u6ce8\u610f\u8003\u8651\u4e00\u4e0b\u5f53\u524d\u533a\u95f4\u4f18\u52bf\u7ebf\u6bb5\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n```c++\n#include <bits/stdc++.h>\n#define L(i, j, k) for (int i = (j); i <= (k); i++)\n#define R(i, j, k) for (int i = (j); i >= (k); i--)\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n\nusing namespace std;\nconst int N = 1e5 + 10;\nconst ll INF = 123456789123456789;\nint h[N], e[N << 1], ne[N << 1], w[N << 1], idx;\nint dep[N], fa[N], sz[N], son[N], dfn[N], top[N], rk[N], tt;\nll dis[N], k[N << 1], b[N << 1];\nstruct Sgt {\n    int l, r, tag;\n    ll min;\n} t[N << 2];\n\ntemplate<class T = int> T read() {\n    T x = 0, y = 1; char c = getchar();\n    while (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * y;\n}\n\ninline void add(int a, int b, int c) {e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++;}\n\ninline ll calc(int i, int x) {return k[i] * dis[rk[x]] + b[i];}\n\ninline void dfs1(int u, int p) {\n    dep[u] = dep[fa[u] = p] + 1, sz[u] = 1;\n    for (int i = h[u]; ~i; i = ne[i]) {\n        int v = e[i];\n        if (v == p) continue;\n        dis[v] = dis[u] + w[i], dfs1(v, u), sz[u] += sz[v];\n        if (sz[v] > sz[son[u]]) son[u] = v; \n    }\n}\n\ninline void dfs2(int u, int t) {\n    top[u] = t, rk[dfn[u] = ++tt] = u;\n    if (!son[u]) return;\n    dfs2(son[u], t);\n    for (int i = h[u]; ~i; i = ne[i]) {\n        int v = e[i];\n        if (v == fa[u] || v == son[u]) continue;\n        dfs2(v, v);\n    }\n}\n\ninline int lca(int u, int v) {\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        u = fa[top[u]];\n    }\n    return dep[u] < dep[v] ? u : v;\n}\n\ninline void pushup(int p) {\n    if (t[p].l == t[p].r) t[p].min = min(calc(t[p].tag, t[p].l), calc(t[p].tag, t[p].r));\n    else t[p].min = min({t[p << 1].min, t[p << 1 | 1].min, calc(t[p].tag, t[p].l), calc(t[p].tag, t[p].r)});\n}\n\ninline void build(int p, int l, int r) {\n    t[p].l = l, t[p].r = r, t[p].min = INF;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    build(p << 1, l, mid), build(p << 1 | 1, mid + 1, r);\n}\n\ninline void change(int p, int x) {\n    int &y = t[p].tag, mid = (t[p].l + t[p].r) >> 1;\n    if (calc(x, mid) < calc(y, mid)) swap(x, y);\n    if (calc(x, t[p].l) < calc(y, t[p].l)) change(p << 1, x);\n    if (calc(x, t[p].r) < calc(y, t[p].r)) change(p << 1 | 1, x);\n}\n\ninline void modify(int p, int l, int r, int x) {\n    if (l <= t[p].l && t[p].r <= r) return change(p, x), pushup(p), void();\n    int mid = (t[p].l + t[p].r) >> 1;\n    if (l <= mid) modify(p << 1, l, r, x);\n    if (r > mid) modify(p << 1 | 1, l, r, x);\n    pushup(p);\n}\n\ninline ll query(int p, int l, int r) {\n    if (l <= t[p].l && t[p].r <= r) return t[p].min;\n    int mid = (t[p].l + t[p].r) >> 1;\n    ll res = min(calc(t[p].tag, max(l, t[p].l)), calc(t[p].tag, min(r, t[p].r)));\n    if (l <= mid) res = min(res, query(p << 1, l, r));\n    if (r > mid) res = min(res, query(p << 1 | 1, l, r));\n    return res;\n}\n\ninline void modifyPath(int u, int v, int x) {\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        modify(1, dfn[top[u]], dfn[u], x);\n        u = fa[top[u]];\n    }\n    if (dep[u] > dep[v]) swap(u, v);\n    modify(1, dfn[u], dfn[v], x);\n}\n\ninline ll queryPath(int u, int v) {\n    ll res = INF;\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        res = min(res, query(1, dfn[top[u]], dfn[u]));\n        u = fa[top[u]];\n    }\n    if (dep[u] > dep[v]) swap(u, v);\n    res = min(res, query(1, dfn[u], dfn[v]));\n    return res;\n}\n\nint main() {\n    memset(h, -1, sizeof h);\n    int n = read(), m = read(), tot = 0;\n    L(i, 1, n - 1) {\n        int a = read(), b = read(), c = read();\n        add(a, b, c), add(b, a, c);\n    }\n    dfs1(1, 0), dfs2(1, 1);\n    b[0] = INF;\n    build(1, 1, n);\n    while (m--) {\n        int op = read();\n        if (op == 1) {\n            int u = read(), v = read(), s = read(), t = read();\n            int p = lca(u, v);\n            tot++; k[tot] = -s, b[tot] = t + 1ll * dis[u] * s;\n            modifyPath(u, p, tot);\n            tot++; k[tot] = s, b[tot] = t + 1ll * dis[u] * s - 2ll * dis[p] * s;\n            modifyPath(p, v, tot);\n        }\n        else printf(\"%lld\\n\", queryPath(read(), read()));\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1683127610,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P4069"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6811\u6709\u8fb9\u6743\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408 $S_u$\uff0c\u4e00\u5f00\u59cb\u96c6\u5408\u5747\u5305\u542b\u6574\u6570 $123456789123456789$\u3002\n\n\u8bbe ${\\rm dis}_{a,b}$ \u4e3a\u6811\u4e0a\u4e24\u70b9 $a,b$ \u7684\u8ddd\u79bb\u3002\n\n\u5171 $m$ \u6b21\u64cd\u4f5c\uff0c\u5206\u4e3a\u5982\u4e0b\u4e24\u79cd\uff1a\n\n- `u v a b`: \u8bbe $T$ \u4e3a $u,v$ \u8def\u5f84\u4e0a\u7684\u70b9\u96c6\uff0c\u5bf9\u4efb\u610f\u7684 $t\\in T$\uff0c\u7ed9 $t$ \u6240\u5bf9\u5e94\u7684\u96c6\u5408\u91cc\u52a0\u5165 $a\\times {\\rm dis}_{u,t} + b$\n- `u v`: \u8bbe $T$ \u4e3a $u,v$ \u8def\u5f84\u4e0a\u7684\u70b9\u96c6\uff0c\u6c42\n\n$$\n\\min\\{\\bigcup_{t\\in T} S_t\\}\n$$\n\n\n**\u9650\u5236\uff1a**\n\n$1\\le n\\le 10^5$\u3002\n\n## Solution\n\n### \u524d\u7f6e\u77e5\u8bc6\n- \u6811\u94fe\u5256\u5206\u3002\n- \u674e\u8d85\u7ebf\u6bb5\u6811\u3002\n  \n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u53c8\u662f\u4e00\u9053\u5f3a\u884c\u4e0a\u6811\u7684\u9898\u76ee\u3002\u3002\n\n\u9996\u5148\u8fdb\u884c\u91cd\u94fe\u5256\u5206\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u5bf9 $\\rm dfn$ \u5e8f\u5efa\u7acb\u4e00\u68f5\u674e\u8d85\u7ebf\u6bb5\u6811\u3002\n\n\u6211\u4eec\u60f3\u4e00\u60f3\u674e\u8d85\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5e72\u7684\u4e8b\u60c5\uff1a\n- \u533a\u95f4\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\n- \u8be2\u95ee\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u7684\u7ebf\u6bb5\u5728\u8be5\u70b9\u7684\u6700\u503c\n\n\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u628a\u9898\u76ee\u6240\u7ed9\u7684\u64cd\u4f5c\u8f6c\u5316\u5230\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4e0a\u53bb\u3002\n\n\u9996\u5148\u8003\u8651\u4fee\u6539\u64cd\u4f5c\uff1a\n\n\u8bb0 ${\\rm dis}_u$ \u4e3a\u6839\u8282\u70b9\u5230 $u$ \u7684\u8ddd\u79bb\u3002\n\n\u8bbe $w = {\\rm lca}(u,v)$\uff0c\u5c06\u95ee\u9898\u5206 $u\\rightarrow w,w\\rightarrow v$ \u6765\u8003\u8651\u3002\n\n\u5bf9 $u\\rightarrow w$ \u4e0a\u7684\u70b9 $t$\uff0c\u5b9e\u9645\u4e0a\u63d2\u5165\u7684\u76f4\u7ebf\u4e3a $a\\times({\\rm dis}_u-{\\rm dis}_t)+b=-a\\times {\\rm dis}_t+(a\\times{\\rm dis_u}+b)$\u3002\n\n\u5bf9 $w\\rightarrow v$ \u4e0a\u7684\u70b9 $t$\uff0c\u5b9e\u9645\u4e0a\u63d2\u5165\u7684\u76f4\u7ebf\u4e3a $a\\times({\\rm dis}_u+{\\rm dis}_t-2\\times {\\rm dis}_w)+b=a\\times {\\rm dis}_t + (a\\times{\\rm dis}_u+2a\\times{\\rm dis}_w+b) $\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4fee\u6539\u64cd\u4f5c\u53ef\u4ee5\u8f6c\u5316\u6210\u5bf9 $\\log n$ \u4e2a\u533a\u95f4\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u7136\u540e\u8003\u8651\u8be2\u95ee\u64cd\u4f5c\uff1a\n\n\u7531\u4e8e\u4e00\u6b21\u51fd\u6570\u7684\u5355\u8c03\u6027\uff0c\u6700\u5c0f\u503c\u53ea\u53ef\u80fd\u5728\u4e24\u4e2a\u7aef\u70b9\u53d6\u5f97\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u674e\u8d85\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a $\\rm mn$ \u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u91cc\u5305\u542b\u7684\u7ebf\u6bb5\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O(n\\log^3 n)$\n\n## Code\n\n\u7531\u4e8e\u4ee3\u7801\u5f88\u957f\uff08\u6709 400 \u884c\uff09\uff0c\u6240\u4ee5\u628a\u5b83\u653e\u5230\u8fd9\u4e2a\u526a\u5207\u677f\u4e0a\u4e86\uff0c\u70b9\u51fb[\u6b64\u5904](https://pastebin.com/V4UYxF83)\u5373\u53ef\u3002",
        "postTime": 1637860720,
        "uid": 413147,
        "name": "_Alejandro_",
        "ccfLevel": 0,
        "title": "P4069"
    },
    {
        "content": "\u674e\u8d85\u6811 + \u6811\u5256\u3002  \n\u867d\u7136\u662f\u677f\u5b50\u9898\uff0c\u4f46\u662f\u4e00\u5207\u4e1c\u897f\u4e0a\u6811\u4e86\u5c31\u4f1a\u663e\u5f97\u6bd2\u7624\uff08\u786e\u4fe1\uff09  \n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u4fee\u6539\u7684\u65b9\u5f0f\u5c31\u662f\u7ecf\u5178\u7684\u7ebf\u6bb5\u7248\u674e\u8d85\u6811\uff08[`P4097 [HEOI2013]Segment`](https://www.luogu.com.cn/problem/P4097)\uff09\uff0c\u800c\u6811\u4e0a\u7684\u4e00\u6bb5\u8def\u5f84 $u\\to v$\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c $u\\to \\text{lca}$ \u548c $\\text{lca}\\to v$ \u4e24\u6bb5\u5206\u522b\u5904\u7406\u3002\u540c\u65f6\u674e\u8d85\u6811\u8981\u7a0d\u4f5c\u4fee\u6539\uff0c\u53ef\u4ee5\u50cf\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\u7ef4\u62a4\u4e00\u4e2a $\\text{minx}$ \u4ee5\u67e5\u8be2\u6700\u5c0f\u503c\u3002  \n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define reg register\n#define inl inline\n#define int long long\nusing namespace std;\nconst int inf=123456789123456789ll;\nint cnt,fst[MAXN],nxt[MAXN<<1],to[MAXN<<1],w[MAXN<<1];\nint n,Q,k[MAXN],b[MAXN],tot;\nint dfn[MAXN],idx,top[MAXN],son[MAXN],siz[MAXN],faz[MAXN],dep[MAXN],rk[MAXN],dis[MAXN];\ninl void AddEdge(reg int u,reg int v,reg int c)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n\tw[cnt]=c;\n}\nvoid Dfs1(reg int u,reg int pre)\n{\n\tsiz[u]=1;\n\tson[u]=0;\n\tfor(reg int i=fst[u];i;i=nxt[i])\n\t{\n\t\treg int v=to[i];\n\t\tif(v==pre) continue;\n\t\tfaz[v]=u;\n\t\tdep[v]=dep[u]+1;\n\t\tdis[v]=dis[u]+w[i];\n\t\tDfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n}\nvoid Dfs2(reg int u,reg int rt)\n{\n\tdfn[u]=++idx;\n\trk[idx]=u;\n\ttop[u]=rt;\n\tif(son[u]) Dfs2(son[u],rt);\n\tfor(reg int i=fst[u];i;i=nxt[i])\n\t{\n\t\treg int v=to[i];\n\t\tif(v==faz[u] || v==son[u]) continue;\n\t\tDfs2(v,v);\n\t}\n}\nstruct LCSegment\n{\n\tint t[MAXN<<2],minx[MAXN<<2];\n\tinl void PushUp(reg int rt)\n\t{\n\t\tminx[rt]=min(minx[rt],min(minx[rt<<1],minx[rt<<1|1]));\n\t}\n\tinl int Calc(reg int x,reg int rt)\n\t{\n\t\treturn k[rt]*dis[rk[x]]+b[rt];\n\t}\n\tvoid Build(reg int rt,reg int l,reg int r)\n\t{\n\t\tt[rt]=1; minx[rt]=inf;\n\t\tif(l==r) return;\n\t\treg int mid=(l+r)>>1;\n\t\tBuild(rt<<1,l,mid);\n\t\tBuild(rt<<1|1,mid+1,r);\n\t\tPushUp(rt);\n\t}\n\tvoid Modify(reg int rt,reg int l,reg int r,reg int tl,reg int tr,reg int x)\n\t{\n\t\treg int mid=(l+r)>>1;\n\t\tif(tl<=l && r<=tr)\n\t\t{\n\t\t\tif(Calc(l,x)<=Calc(l,t[rt]) && Calc(r,x)<=Calc(r,t[rt]))\n\t\t\t{\n\t\t\t\tt[rt]=x;\n\t\t\t\tminx[rt]=min(minx[rt],min(Calc(l,x),Calc(r,x)));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(Calc(l,x)>=Calc(l,t[rt]) && Calc(r,x)>=Calc(r,t[rt])) return;\n\t\t\tif(k[x]<k[t[rt]])\n\t\t\t{\n\t\t\t\tif(Calc(mid,x)<=Calc(mid,t[rt]))\n\t\t\t\t{\n\t\t\t\t\tModify(rt<<1,l,mid,tl,tr,t[rt]);\n\t\t\t\t\tt[rt]=x;\n\t\t\t\t}\n\t\t\t\telse Modify(rt<<1|1,mid+1,r,tl,tr,x);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(Calc(mid,x)<=Calc(mid,t[rt]))\n\t\t\t\t{\n\t\t\t\t\tModify(rt<<1|1,mid+1,r,tl,tr,t[rt]);\n\t\t\t\t\tt[rt]=x;\n\t\t\t\t}\n\t\t\t\telse Modify(rt<<1,l,mid,tl,tr,x);\n\t\t\t}\n\t\t\tminx[rt]=min(minx[rt],min(Calc(l,x),Calc(r,x)));\n\t\t\tPushUp(rt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(tl<=mid) Modify(rt<<1,l,mid,tl,tr,x);\n\t\t\tif(tr>mid) Modify(rt<<1|1,mid+1,r,tl,tr,x);\n\t\t\tPushUp(rt);\n\t\t}\n\t}\n\tint Query(reg int rt,reg int l,reg int r,reg int tl,reg int tr)\n\t{\n\t\tif(tl<=l && r<=tr) return minx[rt];\n\t\treg int mid=(l+r)>>1,res=inf;\n\t\tif(b[t[rt]]!=inf) res=min(Calc(max(l,tl),t[rt]),Calc(min(r,tr),t[rt]));\n\t\tif(tl<=mid) res=min(res,Query(rt<<1,l,mid,tl,tr));\n\t\tif(tr>mid) res=min(res,Query(rt<<1|1,mid+1,r,tl,tr));\n\t\treturn res;\n\t}\n}T;\ninl int LCA(reg int x,reg int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]]) x=faz[top[x]];\n\t\telse y=faz[top[y]];\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\ninl void Modify(reg int u,reg int v)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tT.Modify(1,1,n,dfn[top[u]],dfn[u],tot);\n\t\tu=faz[top[u]];\n\t}\n\tT.Modify(1,1,n,dfn[v],dfn[u],tot);\n}\ninl int Query(reg int u,reg int v)\n{\n\treg int res=inf;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tres=min(res,T.Query(1,1,n,dfn[top[u]],dfn[u]));\n\t\tu=faz[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tres=min(res,T.Query(1,1,n,dfn[u],dfn[v]));\n\treturn res;\n}\ntemplate <typename T> inl void Read(reg T &x)\n{\n\tx=0;\n\treg int fu=1;\n\treg char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') fu=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-48;\n\tx*=fu;\n}\nsigned main()\n{\n\tRead(n);\n\tRead(Q);\n\tfor(reg int i=1;i<n;i++)\n\t{\n\t\treg int x,y,z;\n\t\tRead(x);\n\t\tRead(y);\n\t\tRead(z);\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t}\n\tdep[1]=1;\n\tDfs1(1,0);\n\tDfs2(1,1);\n\tk[++tot]=0;\n\tb[tot]=inf;\n\tT.Build(1,1,n);\n\twhile(Q--)\n\t{\n\t\treg int opt,x,y;\n\t\tRead(opt);\n\t\tRead(x);\n\t\tRead(y);\n\t\tif(opt==1)\n\t\t{\n\t\t\treg int K,B,lca=LCA(x,y);\n\t\t\tRead(K);\n\t\t\tRead(B);\n\t\t\tk[++tot]=-K;\n\t\t\tb[tot]=K*dis[x]+B;\n\t\t\tModify(x,lca);\n\t\t\tk[++tot]=K;\n\t\t\tb[tot]=K*(dis[x]-(dis[lca]<<1))+B;\n\t\t\tModify(y,lca);\n\t\t}\n\t\telse printf(\"%lld\\n\",Query(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1590326833,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "15\u5206\u949f\u5de6\u53f3\u7801\u5b8c\uff0c\u7ed3\u679c\u51fa\u73b0\u4e86\u70b9\u95ee\u9898\uff0c\u751a\u81f3\u8fdetop\u53ea\u662f\u5b9a\u4e49\u4e86\uff0c\u90fd\u6ca1\u6709\u8d4b\u503c\uff01QwQ\n\n\u9996\u5148\u5206\u6790\u8fd9\u9053\u9898\uff0c\u611f\u89c9\u4e0e\u666e\u901a\u7684\u674e\u8d85\u6811\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u4e00\u4e2a\u4ee5x\u4e3a\u6a2a\u5750\u6807\u7684\u4e00\u6b21\u51fd\u6570\uff01\n\n\u6211\u4eec\u5316\u4e00\u4e0b\u5f0f\u5b50\uff0c\u53d1\u73b0\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4e00\u4e2a\u4ee5dis\u4e3a\u6a2a\u5750\u6807\u7684\u4e00\u6b21\u51fd\u6570\uff01\n\n\u4f46\u662f\u8fd9\u4e2a\u53ef\u4ee5\u7528\u674e\u8d85\u6811\u7ef4\u62a4\u5417\uff1f\n\n\u4e8b\u5b9e\u8bc1\u660e\uff1a\u53ea\u8981\u4efb\u610f\u4e24\u4e2a\u51fd\u6570\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u674e\u8d85\u6811\uff08By jiangly\uff09\n\n\u611f\u89c9\u8fd8\u662f\u633a\u597d\u7406\u89e3\u7684\uff0c\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u6216\u8bb8\u5e94\u8be5\u5c31\u662f\u5355\u8c03\u7684!\n\n\u8fd9\u9053\u9898\u7684dis\u662f\u5728\u7956\u5148\u5173\u7cfb\u4e2d\u662f\u5355\u8c03\u589e\uff0c\u663e\u7136\u53ef\u4ee5\uff01\n\n\u7136\u540e\u5c31\u8981\u6709\u4e00\u4e2a\u674e\u8d85\u6811\u533a\u95f4\u63d2\u5165\uff0c\u533a\u95f4\u6700\u503c\u7684\u95ee\u9898\uff01\n\n\u8fd9\u6bd4\u6211\u4eec\u7684\u6574\u4f53\u63d2\u5165\uff0c\u6574\u4f53\u6700\u503c\u8981\u96be\u5199\u4e00\u70b9\uff01\u8fd8\u6709\u8bb8\u591a\u7ec6\u8282\uff01\n\n\u4ee5\u4e0b\u662f\u67d0\u4f4ddalao\u7684\u4ee3\u7801\uff0c\u7531\u4e8e\u7801\u98ce\u4f18\u79c0\uff0c\u5728\u8fd9\u91cc\u501f\u9274\u4e00\u4e0b\uff01\n\n```cpp\nstruct LiChaoTree {\n\t\n\t#define ls rt << 1\n\t#define rs rt << 1 | 1\n\t\n\tint t[MAXN << 2]; LL Mn[MAXN << 2];\n\t\n\tinline void Init() { t[0] = 1; Mn[0] = INFLL; }\n\tinline void update(int rt) { Mn[rt] = min(Mn[rt], min(Mn[ls], Mn[rs])); }\n\tinline LL calc(int x, int id) { return k[id] * (LL)dis[bl[x]] + b[id]; }\n\tinline void build(int rt, int l, int r) {\n\t\tt[rt] = 1; Mn[rt] = INFLL;\n\t\tif (l == r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(ls, l, mid); build(rs, mid + 1, r);\n\t\tupdate(rt);\n\t}\n\tinline void insert(int rt, int l, int r, int L, int R, int id) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (L <= l && r <= R) {\n\t\t\tif (calc(l, id) <= calc(l, t[rt]) && calc(r, id) <= calc(r, t[rt])) {\n\t\t\t\tt[rt] = id;\n\t\t\t\tchkmin(Mn[rt], min(calc(l, t[rt]), calc(r, t[rt])));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (calc(l, id) >= calc(l, t[rt]) && calc(r, id) >= calc(r, t[rt])) return;\n\t\t\tif (calc(mid, id) <= calc(mid, t[rt])) swap(t[rt], id);\n\t\t\tinsert(ls, l, mid, L, R, id);\n\t\t\tinsert(rs, mid + 1, r, L, R, id);\n\t\t\tchkmin(Mn[rt], min(calc(l, t[rt]), calc(r, t[rt])));\n\t\t\tupdate(rt);\n\t\t}\n\t\tif (L <= mid) insert(ls, l, mid, L, R, id);\n\t\tif (R > mid) insert(rs, mid + 1, r, L, R, id);\n\t\tupdate(rt);\n\t}\n\tinline LL Query(int rt, int l, int r, int L, int R) {\n\t\tif (L <= l && r <= R) return Mn[rt];\n\t\tint mid = (l + r) >> 1; LL ret = INFLL;\n\t\tif (b[t[rt]] != INFLL) ret = min(calc(max(l, L), t[rt]), calc(min(r, R), t[rt]));\n\t\tif (L <= mid) chkmin(ret, Query(ls, l, mid, L, R));\n\t\tif (R > mid) chkmin(ret, Query(rs, mid + 1, r, L, R));\n\t\treturn ret;\n\t}\n\t\t\n} T;\n```\n\n\u5177\u4f53\u8bb2\u89e3\u4e00\u4e0b\uff1a\n\n```cpp\ninline void Init() { t[0] = 1; Mn[0] = INFLL; }\ninline void update(int rt) { Mn[rt] = min(Mn[rt], min(Mn[ls], Mn[rs])); }\n```\n\u4e00\u4e2a\u662f\u521d\u59cb\u5316\uff0c\u4e00\u4e2a\u662f\u66f4\u65b0\uff0c\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\uff01\n\n```cpp\ninline LL calc(int x, int id) { return k[id] * (LL)dis[bl[x]] + b[id]; }\ninline void build(int rt, int l, int r) {\n\tt[rt] = 1; Mn[rt] = INFLL;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(ls, l, mid); build(rs, mid + 1, r);\n\tupdate(rt);\n}\n```\ncalc\u5199\u5728\u8fd9\u91cc\u53ef\u4ee5\u51cf\u5c11\u7801\u91cf\uff01\n\u4e0b\u9762\u7684build\u51fd\u6570\u4e5f\u662f\u521d\u59cb\u5316\uff01\n\n\u6b65\u5165\u6b63\u9898\uff01\n\n```cpp\ninline void insert(int rt, int l, int r, int L, int R, int id) {\n\tint mid = (l + r) >> 1;\n\tif (L <= l && r <= R) {\n\t\tif (calc(l, id) <= calc(l, t[rt]) && calc(r, id) <= calc(r, t[rt])) {\n\t\t\tt[rt] = id;\n\t\t\tchkmin(Mn[rt], min(calc(l, t[rt]), calc(r, t[rt])));\n\t\t\treturn;\n\t\t}\n\t\tif (calc(l, id) >= calc(l, t[rt]) && calc(r, id) >= calc(r, t[rt])) return;\n\t\tif (calc(mid, id) <= calc(mid, t[rt])) swap(t[rt], id);\n\t\tinsert(ls, l, mid, L, R, id);\n\t\tinsert(rs, mid + 1, r, L, R, id);\n\t\tchkmin(Mn[rt], min(calc(l, t[rt]), calc(r, t[rt])));\n\t\tupdate(rt);\n\t}\n\tif (L <= mid) insert(ls, l, mid, L, R, id);\n\tif (R > mid) insert(rs, mid + 1, r, L, R, id);\n\tupdate(rt);\n}\n```\ninsert\u51fd\u6570\uff1a\n\n\u6211\u4eec\u5148\u5b9a\u4f4d\uff0c\u7136\u540e\u5b9a\u4f4d\u5b8c\u4e86\u4ee5\u540e\u6211\u4eec\u548c\u666e\u901a\u674e\u8d85\u6811\u4e00\u6837\u66f4\u65b0\uff01\n\n\u9996\u5148\u5224\u65ad\u5927\u5c0f\u5173\u7cfb\uff0ccheck\u662f\u5426\u80fd\u5b8c\u5168\u8986\u76d6\uff01\n\n\u5982\u679c\u90fd\u6bd4\u5b83\u4f18\u5c31\u76f4\u63a5\u8986\u76d6\uff01\u90fd\u6bd4\u5b83\u52a3\u5c31\u76f4\u63a5return\uff01\n\n\u7136\u540e\u6211\u4eec\u8003\u8651mid\u8bb0\u5f55\u7684\u662f\u6700\u4f18\u7684\uff0c\u6211\u4eec\u628a\u5f53\u524d\u63d2\u5165\u7684\u548c\u539f\u6709\u7684\u6bd4\u8f83\u4e00\u4e0b\uff0c\u54ea\u4e2amid\u66f4\n\u4f18\u5c31\u628a\u54ea\u4e2a\u653e\u5728\u5f53\u524d\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u4e0b\u4f20\uff01\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u672c\u9898\u9700\u8981\u652f\u6301\u533a\u95f4\u67e5\u8be2\u6700\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u6700\u503c\uff0c\u7531\u4e8e\u90fd\u662f\u4e00\u6b21\u51fd\u6570\uff0c\u56e0\u6b64\u6700\u503c\u53ea\u53ef\u80fd\u5728\u4e24\u7aef\u70b9\u5904\uff0c\u56e0\u6b64\u6211\u4eec\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u503c\uff0c\u5c31\u662f\u5f53\u524d\u533a\u95f4\u7aef\u70b9\u6700\u503c\u548c\u5de6\u513f\u5b50\u53f3\u4e8c\u5b50\u7684\u6700\u503c\u5206\u522b\u53d6\u6700\u503c\uff01\n\n\u6ce8\u610f\u51fd\u6570\u672b\u8981update\uff01\n\n```cpp\ninline LL Query(int rt, int l, int r, int L, int R) {\n\tif (L <= l && r <= R) return Mn[rt];\n\tint mid = (l + r) >> 1; LL ret = INFLL;\n\tif (b[t[rt]] != INFLL) ret = min(calc(max(l, L), t[rt]), calc(min(r, R), t[rt]));\n\tif (L <= mid) chkmin(ret, Query(ls, l, mid, L, R));\n\tif (R > mid) chkmin(ret, Query(rs, mid + 1, r, L, R));\n\treturn ret;\n}\n```\nQuery\uff1a\u51fd\u6570\n\n\u8fd8\u662f\u5148\u5b9a\u4f4d\uff0c\u53ea\u662f\u8fd9\u4e2a\u5b9a\u4f4d\u4e0e\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u5b9a\u4f4d\u76f8\u540c\uff0c\u5982\u679c\u6709\u5b8c\u5168\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\uff01\n\n\u5426\u5219\u6211\u4eec\u8981\u8003\u8651\u5f53\u524d\u8282\u70b9\u5bf9ans\u7684\u8d21\u732e\uff0c\u540c\u6837\u8fd8\u662f\u8981\u4e24\u4e2a\u7aef\u70b9\uff0c\u6ce8\u610f\u53d6min\u548cmax\uff01\n\n\uff08\u4e00\u4e2a\u6613\u9519\u70b9\uff1a\u7531\u4e8e\u6211\u4eec\u662f\u533a\u95f4\u63d2\u5165\uff0c\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u5b8c\u5168\u8986\u76d6\uff0c\u5f53\u524d\u7684L\u548cR\u6709\u4e9b\u70b9\u6ca1\u6709\u88ab\u8986\u76d6\u5230\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u53d6min\u548cmax\uff09\n\n\u7136\u540e\u5f53\u524d\u8fd9\u4e2a\u70b9\u67e5\u5b8c\u4ee5\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u7c7b\u4f3c\u4e8e\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u4e00\u6837\u5f80\u4e0b\u67e5\u8be2\uff01\n\n\u5176\u5b9e\u8fc7\u7a0b\u548csegment\u90a3\u9898\u5dee\u4e0d\u591a\uff01\n\n\u53ea\u662f\u591a\u4e86\u533a\u95f4\u6700\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u591a\u7ef4\u62a4\u4e00\u4e2amin\u548c\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\u8bf8\u5982\u533a\u95f4\u7aef\u70b9\u8fd9\u6837\u7684\u4e1c\u897f\uff01\n\n\uff08\u674e\u8d85\u7ebf\u6bb5\u6811\u4e5f\u4e0d\u4e00\u5b9a\u53ea\u80fd\u7ef4\u62a4\u4ee5\u666e\u901a\u503c\u57df1 ~ N\u7684\u4e00\u6b21\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e9b\u5176\u4ed6\u7684\u5355\u8c03\u51fd\u6570\uff09\n\n\u9700\u8981\u6211\u4eec\u53bb\u5316\u7b80\u4e00\u4e9b\u5f0f\u5b50\uff0c\u4f7f\u5176\u6ee1\u8db3\u6761\u4ef6\uff01\n\n\u8fd9\u9053\u9898\u6211\u4eec\u8981\u7528\u6811\u5256\u8f85\u52a9\u7ef4\u62a4\u674e\u8d85\u7ebf\u6bb5\u6811\uff01\n\n\u63d2\u5165\u6211\u4eec\u8981\u628a\u4e00\u6bb5\u8def\u5f84\u5728LCA\u51fa\u5288\u6210\u4e24\u534a\uff0c\u5206\u522b\u7ef4\u62a4\u3002\n\n\u7136\u540e\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u6761\u94fe\u4e0a\u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4\u4e8e\u4e0d\u662f\u4e00\u6761\u94fe\u4e0a\u7684\u7ef4\u62a4\u65b9\u6cd5\uff0ctop\u51fd\u6570\u5728jump\u7684\u65f6\u5019\u6ce8\u610f\u4e0d\u8981\u5199\u4e00\u4e9b\u81ea\u5df1yy\u7684\u65b9\u6cd5\uff0c\u6211\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u5361\u4e86\u5f88\u4e45QwQ\uff01\n\n\u53ef\u4ee5\u5f53\u505a\u662f\u4e0d\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u76f4\u5f80\u4e0a\u8df3\uff01\n\n\u67e5\u8be2\u5c31\u662f\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u67e5\u8be2\uff0c\u53d6\u6700\u503c\u5373\u53ef\uff01",
        "postTime": 1578397388,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4069 \u3010[SDOI2016]\u6e38\u620f\u3011"
    }
]