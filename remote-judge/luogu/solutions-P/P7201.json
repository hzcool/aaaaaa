[
    {
        "content": "#### \u987b\u77e5\n\n\u672c\u9898\u89e3\u9aa8\u67b6\u662f\u672c\u4eba\u7531\u5b98\u65b9\u9898\u89e3\u7ffb\u8bd1\u5f97\u6765\u7684\uff0c\u5e76\u8865\u5145\u4e86\u4e00\u4e9b\u4e0d\u8be6\u7ec6\u7684\u5730\u65b9\uff0c\u4fee\u6539\u4e86\u4e00\u4e9b\u9519\u8bef\uff0c\u81ea\u5df1\u5199\u4e86\u6bcf\u4e00\u4e2a\u5b50\u4efb\u52a1\u7684\u4ee3\u7801\uff08\u56e0\u4e3a\u5b98\u65b9\u9898\u89e3\u4ee3\u7801\u548c\u6587\u672c\u4e0d\u592a\u5339\u914d\uff09\u3002\n\n#### \u57fa\u672c\u4fe1\u606f\n\n\u4efb\u52a1\u540d\uff1a[D\u017eumbus](https://www.luogu.com.cn/problem/P7201)\n\n\u63d0\u4f9b\u8005\uff1aVedran Kurdija\n\n\u524d\u7f6e\u6280\u80fd\uff1a\u6811\u8bba\u3001\u52a8\u6001\u89c4\u5212\u3001\u590d\u6742\u5ea6\u5206\u6790\n\n#### Subtask 1\n\n\u201c\u8fd9 $M$ \u7ec4\u670b\u53cb\u4e0d\u53ef\u80fd\u5c06 $A$ \u5206\u4eab\u7ed9\u522b\u4eba\u7684\u7b54\u6848\u91cd\u65b0\u5206\u4eab\u7ed9 $A$\u3002\u201d\n\n\u7531\u8fd9\u53e5\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u672c\u9898\u4e2d\u7684\u56fe\u662f**\u65e0\u73af**\u7684\u3002\n\n\u7ed3\u5408\u7b2c\u4e00\u548c\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u4e2d\uff0c\u6bcf\u4f4d\u670b\u53cb\u6700\u591a\u53ea\u4e0e\u4e24\u4f4d\u5176\u4ed6\u670b\u53cb\u5206\u4eab\u7b54\u6848\u8fd9\u4e00\u7279\u6b8a\u89c4\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u5728\u7b2c\u4e00\u548c\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u4e2d\uff0c\u6210\u5bf9\u7684\u670b\u53cb\u5f62\u6210\u4e86\u4e00\u6761\u94fe\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7ebf\u6027\u7684\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u5b50\u4efb\u52a1\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4 $ L[N] $\uff0c\u5176\u4e2d $ L[i] $ \u8868\u793a\u94fe\u4e0a\u7b2c $ i $\u4e2a\u6570\u7684\u771f\u5b9e\u7f16\u53f7\u3002\n\n\u7136\u540e\uff0c\u4f7f\u7528\u4e00\u79cd\u7c7b\u4f3c\u80cc\u5305\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u8bbe\u7f6e\u6570\u7ec4 $ dp[P][K][B] $\uff0c\u8868\u793a\u5728\u94fe\u4e2d\u7b2c $ P $ \u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u5df2\u7ecf\u996e\u7528\u7684d\u017eumbus\u7684\u6570\u91cf\u4e3a $ K $\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6807\u5fd7 $ B $\uff0c $ B $\u4e3a $ 0 $ \u65f6\u8868\u793a\u5904\u4e8e\u4f4d\u7f6e$ P $\u7684\u4eba\u5e76\u672a\u559d\u8fc7d\u017eumbus\uff0c $ B $ \u4e3a $ 1 $ \u65f6\u8868\u793a\u5904\u4e8e\u4f4d\u7f6e $ P $ \u7684\u4eba\u5df2\u7ecf\u559d\u5230\u4e86\u8db3\u591fd\u017eumbus\u5e76\u548c\u522b\u4eba\u4ea4\u6362\u8fc7\u9898\u89e3\u4e86\u3002\n\n$ dp[P][K][B] $\u7684\u503c\u53cd\u6620\u4e86\uff0c\u5728\u8fd9\u4e00\u72b6\u6001\u4e0b\uff0c\u80fd\u591f\u4ea4\u6362\u9898\u89e3\u7684\u6700\u591a\u4eba\u6570\u3002\n\n\u5206\u6790\u540e\u5f97\u5230\u7684\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$\ndp[P][K][0]=\\max\\{dp[P-1][K][0],dp[P-1][K][1]\\}\\\\dp[P][K][1]=\\max\\{dp[P-1][K-D_{L[P]}-D_{L[P-1]}][0]+2,dp[P-1][K-D_{L[P]}][1]+1\\}\n$$\n\u53ef\u4ee5\u901a\u8fc7\u6eda\u52a8\u6570\u7ec4\u5220\u53bb\u7b2c\u4e00\u7ef4\u3002\n\n\u67e5\u8be2$ S_{i} $\u7684\u7b54\u6848\u7b49\u4e8e $ \\max \\{ dp[N][S_{i}][0],dp[N][S_{i}][1] \\} $\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N\\cdot \\max\\limits_{i=1}^{q}\\{S_{i}\\} )$\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NUM=1005;\nconst int INF=0x3f3f3f3f;\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n\t{\n        if(c=='-')\n\t\t{\n            f=-1;\n        }\n\t\tc=getchar();\n\t}\n    while(c>='0'&&c<='9')\n\t{\n        x=(x<<3)+(x<<1)+c-'0',c=getchar();\n\t}\n    return x*f;\n}\nint n,m,d[NUM],num,head[NUM],ind[NUM],cnt,l[NUM],q,s,dp[NUM][2];\nstruct edge\n{\n    int next;\n    int to;\n}e[NUM*2];\nvoid add_edge(int from,int to)\n{\n    num++;\n    e[num].next=head[from];\n    e[num].to=to;\n    head[from]=num;\n    ind[to]++;\n}\nvoid dfs(int u,int fa)\n{\n    int v;\n    l[++cnt]=u;\n    for(int i=head[u];i;i=e[i].next)\n    {\n        v=e[i].to;\n        if(v!=fa)\n        {\n            dfs(v,u);\n        }\n    }\n}\nint main()\n{\n    freopen(\"Dzumbus_Subtask_1.in\",\"r\",stdin);\n    freopen(\"Dzumbus_Subtask_1.out\",\"w\",stdout);\n    int u,v;\n    n=read();\n    m=read();\n    for(int i=1;i<=n;i++)\n    {\n        d[i]=read();\n    }\n    for(int i=1;i<=m;i++)\n    {\n        u=read();\n        v=read();\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(ind[i]==1)\n        {\n            dfs(i,0);\n            break;\n        }\n    }\n    for(int i=0;i<=1000;i++)\n    {\n        dp[i][1]=-INF;\n    }\n    for(int i=2;i<=n;i++)\n    {\n        for(int j=1000;j;j--)\n        {\n            dp[j][0]=max(dp[j][0],dp[j][1]);\n            if(j-d[l[i]]>=0)\n            {\n                dp[j][1]=dp[j-d[l[i]]][1]+1;\n                if(j-d[l[i]]-d[l[i-1]]>=0)\n                {\n                    dp[j][1]=max(dp[j][1],dp[j-d[l[i]]-d[l[i-1]]][0]+2);\n                }\n            }\n            else\n            {\n                dp[j][1]=-INF;\n            }\n        }\n    }\n    for(int i=1;i<=1000;i++)\n    {\n        dp[i][0]=max(dp[i-1][0],max(dp[i][0],dp[i][1]));\n    }\n    q=read();\n    for(int i=1;i<=q;i++)\n    {\n        s=read();\n        printf(\"%d\\n\",dp[s][0]);\n    }\n}\n```\n\n#### Subtask 2\n\n\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u4e2d\u7684\u503c $ S_{i} $\u6ca1\u6709\u989d\u5916\u7684\u7ea6\u675f\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u5b50\u4efb\u52a1\u4e2d\u7684\u52a8\u6001\u89c4\u5212\u65b9\u6848\u65f6\u95f4\u548c\u5185\u5b58\u90fd\u4f1a\u8d85\u51fa\u9650\u5236\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\u601d\u8003\u540c\u4e00\u4ef6\u4e8b\u3002\u6211\u4eec\u5c06\u4fee\u6539\u52a8\u6001\u89c4\u5212\u72b6\u6001\u3002\u72b6\u6001\u4e2d\u7684\u4f4d\u7f6eP\u548c\u4e8c\u8fdb\u5236\u6807\u5fd7B\uff0c\u5176\u542b\u4e49\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u4f46\u73b0\u5728\uff0c\u6211\u4eec\u8981\u5c06d\u017eumus\u7684\u6570\u91cf\u8bbe\u4e3a\u52a8\u89c4\u7684\u4ef7\u503c\uff0c\u5e76\u8ba9\u5176\u5c3d\u53ef\u80fd\u5c0f\uff0c\u628a\u4ea4\u6362\u9898\u89e3\u7684\u4eba\u6570\u5c06\u4f5c\u4e3a\u52a8\u89c4\u7684\u5176\u4e2d\u4e00\u7ef4\u3002\u8fd9\u4e9b\u8fc7\u6e21\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60~~\uff08\u4f46\u662f\u6211\u628a\u5b83\u8865\u4e0a\u4e86\uff09~~\u3002\n\n\u8bbe\u5df2\u7ecf\u4ea4\u6362\u9898\u89e3\u7684\u4eba\u6570\u4e3a $ R $\uff0c\u5176\u4f59\u4e0d\u53d8\uff0c\u5bb9\u6613\u63a8\u5f97\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a\n$$\ndp[P][R][0]=\\min\\{dp[P-1][R][0],dp[P-1][R][1]\\}\\\\dp[P][R][1]=\\min\\{dp[P-1][R-2][0]+D_{L[P]}+D_{L[P-1]},dp[P-1][R-1][1]+D_{L[P]}\\}\n$$\n\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u6eda\u52a8\u6570\u7ec4\u5220\u53bb\u7b2c\u4e00\u7ef4\u3002\n\n\u67e5\u8be2 $ S_{i} $ \u7684\u7b54\u6848\u5373\u67e5\u8be2\u4f7f\u5f97 $ \\min\\{dp[P][R][0],dp[P][R][1]\\}\\le S_{i} $ \u7684\u6700\u5927\u7684R\u3002\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u8fdb\u884c\u67e5\u8be2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$ O(Q\\times log_{2}N) $\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u8be2\u95ee\u6392\u5e8f\uff0c\u505a\u79bb\u7ebf\u53cc\u6307\u9488\u5904\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$ O(Q\\cdot log_{2}Q) $\uff0c\u6211\u7684\u4ee3\u7801\u4e2d\u662f\u4e8c\u5206\u7684\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $ O(N^{2}) $\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int NUM=1005;\nconst int INF=0x3f3f3f3f3f3f3f3f;\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n\t{\n        if(c=='-')\n\t\t{\n            f=-1;\n        }\n\t\tc=getchar();\n\t}\n    while(c>='0'&&c<='9')\n\t{\n        x=(x<<3)+(x<<1)+c-'0',c=getchar();\n\t}\n    return x*f;\n}\nint n,m,d[NUM],num,head[NUM],ind[NUM],cnt,l[NUM],q,s;\nLL dp[NUM][2];\nstruct edge\n{\n    int next;\n    int to;\n}e[NUM*2];\nvoid add_edge(int from,int to)\n{\n    num++;\n    e[num].next=head[from];\n    e[num].to=to;\n    head[from]=num;\n    ind[to]++;\n}\nvoid dfs(int u,int fa)\n{\n    int v;\n    l[++cnt]=u;\n    for(int i=head[u];i;i=e[i].next)\n    {\n        v=e[i].to;\n        if(v!=fa)\n        {\n            dfs(v,u);\n        }\n    }\n}\nint main()\n{\n    freopen(\"Dzumbus_Subtask_2.in\",\"r\",stdin);\n    freopen(\"Dzumbus_Subtask_2.out\",\"w\",stdout);\n    int u,v;\n    n=read();\n    m=read();\n    for(int i=1;i<=n;i++)\n    {\n        d[i]=read();\n    }\n    for(int i=1;i<=m;i++)\n    {\n        u=read();\n        v=read();\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(ind[i]==1)\n        {\n            dfs(i,0);\n            break;\n        }\n    }\n    for(int i=0;i<=n;i++)\n    {\n        dp[i][0]=dp[i][1]=INF;\n    }\n    dp[0][0]=0;\n    for(int i=2;i<=n;i++)\n    {\n        for(int j=i;j;j--)\n        {\n            dp[j][0]=min(dp[j][0],dp[j][1]);\n            dp[j][1]=dp[j-1][1]+d[l[i]];\n            if(j>1)\n            {\n                dp[j][1]=min(dp[j-2][0]+d[l[i]]+d[l[i-1]],dp[j][1]);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        dp[i][0]=min(dp[i][0],dp[i][1]);\n    }\n    q=read();\n    int left,right,mid,result;\n    for(int i=1;i<=q;i++)\n    {\n        left=0;\n        right=n;\n        s=read();\n        while(left<=right)\n        {\n            mid=(left+right)>>1;\n            if(dp[mid][0]<=s)\n            {\n                result=mid;\n                left=mid+1;\n            }\n            else\n            {\n                right=mid-1;\n            }\n        }\n        printf(\"%d\\n\",result);\n    }\n}\n```\n\n#### Subtask 3&4\n\n\u7531\u4e8e\u672c\u9898\u4e2d\u7684\u56fe\u662f\u65e0\u73af\u7684\uff0c\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u5b50\u4efb\u52a1\u53c8\u5e76\u672a\u5bf9\u56fe\u7684\u5f62\u6001\u8fdb\u884c\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u56fe\u662f\u4e00\u4e2a\u68ee\u6797\u3002\u901a\u8fc7\u5f15\u5165\u4e00\u4e2a\u865a\u62df\u6839\u8282\u70b9 $ 0 $\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u68ee\u6797\u7b80\u5316\u4e3a\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u5c06\u5176\u89c6\u4e3a\u9700\u8981\u65e0\u9650d\u017eumbus\u7684\u4eba\uff0c\u5373 $D_{0}=INF $\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u786e\u4fdd\u8fd9\u4e2a\u4eba\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002\n\n\u6211\u4eec\u4f7f\u7528\u4e0e\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u7c7b\u4f3c\u7684\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u662f\u6211\u4eec\u662f\u5728\u6709\u6839\u6811\u4e0a\u8fdb\u884c\u7684\u3002$ dp[P][R][B] $\u7684\u503c\u662f\u4f7f $ P $ \u5b50\u6811\u4e2d\u7684 $ R $ \u4eba\u4ea4\u6362\u9898\u89e3\u6240\u9700\u7684\u6700\u5c0fd\u017eumbus\u91cf\uff0c\u548c\u7b2c\u4e8c\u4e2a\u5b50\u4efb\u52a1\u76f8\u540c\u7684\uff0c$ B $\u4e3a $ 0 $ \u65f6\u8868\u793a\u5904\u4e8e\u4f4d\u7f6e$ P $\u7684\u4eba\u5e76\u672a\u559d\u8fc7d\u017eumbus\uff0c $ B $ \u4e3a $ 1 $ \u65f6\u8868\u793a\u5904\u4e8e\u4f4d\u7f6e $ P $ \u7684\u4eba\u5df2\u7ecf\u559d\u5230\u4e86\u8db3\u591fd\u017eumbus\u5e76\u548c\u522b\u4eba\u4ea4\u6362\u8fc7\u9898\u89e3\u4e86\u3002\n\n\u5f53\u8ba1\u7b97\u5b50\u6811\u7684\u6839\u8282\u70b9 $ P $ \u7684 $ dp $ \u503c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe\u5df2\u7ecf\u8ba1\u7b97\u4e86\u6574\u4e2a\u5b50\u6811\u4e2d\u5176\u4ed6\u6240\u6709\u8282\u70b9\u7684 $ dp $ \u503c\u3002\u6211\u4eec\u8fd8\u9700\u8981\u6709\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4 $ dp\\_prefix[R][B][K] $\uff0c\u5728\u5176\u72b6\u6001\u4e0b\u4fdd\u5b58\u4ee5 $ P $ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u81f3\u5c11\u4ea4\u6362\u8fc7\u4e00\u6b21\u9898\u89e3\u7684\u4eba\u6570\u4e3a $ R $\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8003\u8651\u4e86 $ P $ \u7684\u524d $ K $ \u4e2a\u5b50\u8282\u70b9\uff0c\u5e76\u4e14 $ P $ \u7684\u72b6\u6001\u4e3a $ B $ \u65f6\u6240\u9700\u7684\u6700\u5c11d\u017eumbus\u6570\u91cf\u3002\u90a3\u4e48\u5f88\u660e\u663e $ dp[P][R][B]=dp\\_prefix[R][B][P\u7684\u5b50\u8282\u70b9\u6570] $\u3002\u8bbe $ C[i] $ \u8868\u793a\u8282\u70b9 $ P $ \u7684\u7b2c $ i $ \u4e2a\u5b50\u8282\u70b9\u3002\n\n\u65b9\u7a0b\u7684\u8f6c\u79fb\u662f\uff1a\n\n$$\ndp\\_prefix[R][0][K]=\\min\\limits_{i+j=R}\\{dp\\_prefix[i][0][K\u22121]+\\min\\{dp[C[K]][j][0],dp[C[K][j][1]\\}\\}\\\\dp\\_prefix[R][1][K]=\\min\\limits_{i+j=R}\\begin{cases} dp\\_prefix[i-1][0][K\u22121]+D_{P}+dp[C[K]][j][1]\\\\dp\\_prefix[i-1][0][K\u22121]+D_{P}+dp[C[K]][j-1][0]+D_{C[K]}\\\\dp\\_prefix[i][1][K\u22121]+dp[C[K]][j][1]\\\\dp\\_prefix[i][1][K\u22121]+dp[C[K]][j-1][0]+D_{C[K]}\\\\dp\\_prefix[i][1][K\u22121]+dp[C[K]][j][0]\\end{cases}\n$$\n\uff08\u8bfb\u8005\u5e94\u4ed4\u7ec6\u5206\u6790\u5b9e\u65bd\u7ec6\u8282\u548c\u89d2\u843d\u6848\u4f8b\uff09~~\uff08\u4f46\u6211\u53c8\u8865\u4e86\uff09~~\u3002\n\n\u6613\u53d1\u73b0 $ dp\\_prefix $ \u6570\u7ec4\u7684\u7b2c\u4e09\u4f4d\u53ef\u4ee5\u6eda\u52a8\u6389\uff0c\u6eda\u52a8\u6389\u540e $ dp\\_prefix $ \u6570\u7ec4\u5176\u5b9e\u662f\u591a\u4f59\u7684\u3002\n$$\ndp[P][R][0]=\\min\\limits_{i+j=R}\\{dp[P][i][0]+\\min\\{dp[C[K]][j][0],dp[C[K][j][1]\\}\\}\\\\dp[P][R][1]=\\min\\limits_{i+j=R}\\begin{cases} dp[P][i-1][0]+D_{P}+dp[C[K]][j][1]\\\\dp[P][i-1][0]+D_{P}+dp[C[K]][j-1][0]+D_{C[K]}\\\\dp[P][i][1]+dp[C[K]][j][1]\\\\dp[P][i][1]+dp[C[K]][j-1][0]+D_{C[K]}\\\\dp[P][i][1]+dp[C[K]][j][0]\\end{cases}\n$$\n\u5f53\u6211\u4eec\u5c06\u6240\u6709\u8282\u70b9\u4e0a\u7684\u6240\u6709\u72b6\u6001\u76f8\u52a0\u65f6\uff0c\u6211\u4eec\u5728 $ dp $ \u4e2d\u5f97\u5230\u4e86\u603b\u5171 $ O(n^{2}) $ \u4e2a\u72b6\u6001\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8f6c\u6362\u6700\u591a\u4ee5 $ O(n) $ \u4e2a\u6b65\u9aa4\u8ba1\u7b97\u3002\u56e0\u6b64\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8c8c\u4f3c\u662f $ O(n^{3}) $ \u3002\n\n\u4f46\u5b9e\u9645\u4e0a\u89e3\u51b3\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $ O(n^{2}) $\u7684 ~~\uff08\u6211\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u8981\u5206\u4e24\u4e2a\u5b50\u4efb\u52a1\uff0c\u53cd\u6b63\u6211\u6309\u5b98\u65b9\u9898\u89e3\u6765\u7684\uff09~~\u3002\n\n\u663e\u7136\uff0c\u4e00\u68f5\u5b50\u6811\u4e0a\u6839\u8282\u70b9\u7684\u89e3\u51b3\u65b9\u6848\u6570\u4e0d\u53ef\u80fd\u8d85\u8fc7\u8be5\u5b50\u6811\u7684\u89c4\u6a21\u3002\u56e0\u6b64\uff0c\u5728\u8ba1\u7b97 $ dp\\_prefix $ \u65f6\uff0c\u4e0d\u5fc5\u68c0\u67e5 $ A $ \u548c $ B $ \u7684\u6240\u6709\u9009\u9879\uff0c\u53ea\u68c0\u67e5\u90a3\u4e9b\u53ef\u80fd\u7684\u9009\u9879\uff08$ A $ \u4e0d\u80fd\u5927\u4e8e\u5df2\u5904\u7406\u5b50\u7ea7\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u589e\u52a0 $ 1 $\uff0c$ B $ \u4e0d\u80fd\u5927\u4e8e\u5f53\u524d\u5b50\u7ea7\u7684\u5b50\u6811\u5927\u5c0f\uff09\u3002\u6211\u4eec\u5c06\u8bc1\u660e\u6bcf\u4e2a\u5b50\u6811\u7684\u8ba1\u7b97\u7684\u603b\u590d\u6742\u5ea6\u6700\u591a\u4e3a $ O(\u5b50\u6811\u5927\u5c0f) $\u3002\n\n\u8fd9\u4e2a\u8bc1\u660e\u53d6\u51b3\u4e8e\u6811\u7684\u6df1\u5ea6\u3002\n\n\u9996\u5148\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u663e\u7136\u9002\u7528\u4e8e\u53f6\u5b50\u7ed3\u70b9\u3002\n\n\u5176\u6b21\uff0c\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5e76\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u4e86\u5177\u6709\u4e0a\u8ff0\u590d\u6742\u5ea6\u7684\u5b50\u8282\u70b9\u7684 $ dp $ \u503c\u3002\u5047\u8bbe\u8be5\u8282\u70b9\u6709 $ x $ \u4e2a\u5b50\u8282\u70b9\uff0c\u5176\u5b50\u6811\u5927\u5c0f\u4e3a $ Y_{1},Y_{2}......Y_{x} $\u3002\u8ba1\u7b97\u8be5\u8282\u70b9\u53ca\u5176\u5b50\u6811\u7684 $ dp $ \u503c\u7684\u603b\u590d\u6742\u5ea6\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n$$\n\\begin{aligned}\nO(\\sum\\limits_{i=1}^{x} Y_{i}^{2}+\\sum\\limits_{i=1}^{x} (1+\\sum\\limits_{j=1}^{i-1} Y_{j}) \\cdot Y_{i}) &= O(\\sum\\limits_{i=1}^{x} Y_{i}^{2}+\\sum\\limits_{i=1}^{x} Y_{i}+\\sum\\limits_{i=1}^{x}\\sum\\limits_{j=1}^{i-1} Y_{i}\\cdot Y_{j}) \\\\ &= O(1+\\sum\\limits_{i=1}^{x} Y_{i}^{2}+2\\sum\\limits_{i=1}^{x} Y_{i}+2\\sum\\limits_{i=1}^{x}\\sum\\limits_{j=1}^{i-1} Y_{i}\\cdot Y_{j}) \\\\ &= O((1+\\sum\\limits_{i=1}^{x} Y_{i})^{2}) \\\\ &= O(\u5b50\u6811\u5927\u5c0f^{2})\n\\end{aligned}\n$$\n\t\t\t\t\t\n\u56e0\u6b64\uff0c\u6574\u4e2a\u89e3\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $ O(n^{2}) $\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned int UI;\nconst UI INF=1000000001;\nconst int NUM=1005;\nint read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n\t{\n        if(c=='-')\n\t\t{\n            f=-1;\n        }\n\t\tc=getchar();\n\t}\n    while(c>='0'&&c<='9')\n\t{\n        x=(x<<3)+(x<<1)+c-'0',c=getchar();\n\t}\n    return x*f;\n}\nint n,m,num,head[NUM],y[NUM],q,s;\nUI dp[NUM][NUM][2],d[NUM];\nstruct edge\n{\n    int next;\n    int to;\n}e[NUM*3];\nvoid add_edge(int from,int to)\n{\n    num++;\n    e[num].next=head[from];\n    e[num].to=to;\n    head[from]=num;\n}\nvoid dfs(int u)\n{\n    int v;\n    y[u]=1;\n    dp[u][0][0]=0;\n    for(int h=head[u];h;h=e[h].next)\n    {\n        v=e[h].to;\n        if(!y[v])\n        {\n            dfs(v);\n            for(int i=y[u];i>=0;i--)\n            {\n                for(int j=y[v];j>=0;j--)\n                {\n                    dp[u][i+j][0]=min(dp[u][i+j][0],min(dp[u][i][0]+min(dp[v][j][0],dp[v][j][1]),INF));\n                    dp[u][i+j][1]=min(dp[u][i+j][1],min(dp[u][i][1]+min(dp[v][j][0],dp[v][j][1]),INF));\n                    if(j) dp[u][i+j][1]=min(dp[u][i+j][1],min(dp[u][i][1]+dp[v][j-1][0]+d[v],INF));\n                    if(i) dp[u][i+j][1]=min(dp[u][i+j][1],min(dp[u][i-1][0]+d[u]+dp[v][j][1],INF));\n                    if(i&&j) dp[u][i+j][1]=min(dp[u][i+j][1],min(dp[u][i-1][0]+d[u]+dp[v][j-1][0]+d[v],INF));\n                }\n            }\n            y[u]+=y[v];\n        }\n    }\n}\nint main()\n{\n    freopen(\"Dzumbus_Subtask_34.in\",\"r\",stdin);\n    freopen(\"Dzumbus_Subtask_34.out\",\"w\",stdout);\n    int u,v;\n    n=read();\n    m=read();\n    d[0]=INF;\n    memset(dp,0x3f,sizeof(dp));\n    for(int i=1;i<=n;i++)\n    {\n        d[i]=read();\n    }\n    for(int i=1;i<=m;i++)\n    {\n        u=read();\n        v=read();\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        add_edge(0,i);\n    }\n    dfs(0);\n    for(int i=n;i>=0;i--)\n    {\n        dp[0][i][0]=min(dp[0][i+1][0],dp[0][i][0]);\n    }\n    q=read();\n    int left,right,mid,result;\n    for(int i=1;i<=q;i++)\n    {\n        left=0;\n        right=n;\n        s=read();\n        while(left<=right)\n        {\n            mid=(left+right)>>1;\n            if(dp[0][mid][0]<=s)\n            {\n                result=mid;\n                left=mid+1;\n            }\n            else\n            {\n                right=mid-1;\n            }\n        }\n        printf(\"%d\\n\",result);\n    }\n}\n```",
        "postTime": 1649328379,
        "uid": 151547,
        "name": "anonymous_person",
        "ccfLevel": 0,
        "title": "P7201 [COCI2019-2020#1] D\u017eumbus\u9898\u89e3"
    }
]