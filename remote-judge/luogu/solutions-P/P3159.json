[
    {
        "content": "[${\\color{#cc0055}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.com.cn/blog/Wendigo/)\n\n[P3159 \u3010\\[CQOI2012\\]\u4ea4\u6362\u68cb\u5b50\u3011](https://www.luogu.com.cn/problem/P3159)\n\n### \u6b64\u9898\u7b97\u6cd5:\u8d39\u7528\u6d41\n\n\u9898\u76ee\u5f88\u7b80\u6d01\uff0c\u505a\u6cd5\u5f88\u6076\u5fc3\u7684\u5178\u578b\u3002\n\n\u56e0\u4e3a\u662f\u7f51\u7edc\u6d41\u9898\uff0c\u6240\u4ee5\u6a21\u677f\u5c31\u4e0d\u8bf4\u4e86\uff0c\u53ea\u8003\u8651**\u52a0\u8fb9**\u3002\n\n**\u5927\u81f4\u601d\u8def\uff1a**\n\n**\u7b80\u5316\u95ee\u9898**\n\n\u8bb0\u5f55\u521d\u59cb\u548c\u7ed3\u675f\u72b6\u6001\uff0c\u628a**\u767d\u68cb**\u770b\u4f5c\u6ca1\u68cb\u3002\n\n\u628a\u5f00\u59cb\u7ed3\u675f**\u90fd\u6709\u9ed1\u68cb**\u7684\u683c\u5b50\u770b\u4f5c\u6ca1\u68cb\u3002\n\n\u5982\u679c\u5f00\u59cb\u7ed3\u675f\u65f6**\u9ed1\u68cb\u6570**\u4e0d\u7b49\uff0c$-1$ \u6389\u3002\n\n**\u52a0\u8fb9**\n\n**1.\u62c6\u70b9\uff0c\u6bcf\u4e2a\u683c\u5b50\u6709\u683c\u5b50 $x$\u548c\u683c\u5b50 $y$\u3002**\n\n>\u63a7\u5236\u683c\u5b50\u4ea4\u6362\u6b21\u6570\u3002\n\n**2.$s$ \u5411\u6bcf\u4e2a\u9ed1\u68cb\u683c $x$ \u8fde\u6d41\u91cf $1$ \u8d39\u7528 $0$ \u7684\u8fb9\u3002**\n\n>\u8868\u793a\u9700\u5339\u914d\u72b6\u6001\u3002\n\n**3.\u6bcf\u4e2a\u9ed1\u68cb\u683c $y$ \u5411 $t$ \u8fde\u6d41\u91cf $1$ \u8d39\u7528 $0$ \u7684\u8fb9\u3002**\n\n>\u8868\u793a\u5339\u914d\u72b6\u6001\u3002\n\n**4.\u6bcf\u4e2a\u683c\u5b50 $x$ \u5411\u5bf9\u5e94 $y$ \u8fde\u6d41\u91cf $($\u5141\u8bb8\u4ea4\u6362\u6570$\\div 2)$ \u8d39\u7528 $0$\u7684\u8fb9\u3002**\n\n>\u4e24\u6b21\u4ea4\u6362\u53ea\u4f1a\u6d88\u8017 $1$ \u7684\u6d41\u91cf\u3002\n\n**\u203b.\u5982\u679c\u683c\u5b50\u521d\u59cb\u6216\u7ed3\u675f\u65f6\u6709\u9ed1\u68cb**\u5e76\u4e14**\u5141\u8bb8\u4ea4\u6362\u6570\u4e3a\u5947\u6570\uff0c\u5728\u4e0a\u9762\u90a3\u6761\u8fb9\u4e0a\u9644\u4e0a $1$\u7684\u6d41\u91cf\u3002**\n\n>\u4e0d\u4ea4\u6362\u672c\u6765\u5c31\u8981\u901a\u8fc7\u7684\u6d41\u91cf\u3002\n\n**5.\u6bcf\u4e2a\u683c\u5b50 $y$ \u5411\u516b\u8fde\u901a\u7684\u683c\u5b50 $x$ \u8fde\u6d41\u91cf $\\inf $ \u8d39\u7528 $1$ \u7684\u8fb9\u3002**\n\n>\u7528\u6765\u4ea4\u6362\u3002\n\n**\u7136\u540e\u8dd1\u6a21\u677f\u5c31\u597d\u4e86\uff0c\u7f51\u7edc\u6d41\u7684\u9898\u90fd\u5dee\u4e0d\u591a\u3002**\n\n![14.jpg](https://i.loli.net/2020/01/04/vlfeG3rF57WakgB.jpg)\n\n> \u56fe\u7247\u4ec5\u4f9b\u53c2\u8003\uff0c\u4ee5\u5b9e\u7269\u4e3a\u51c6\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801 $+$ \u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e3+10;\nconst int M=5e4+10;\nconst int inf=1e8+10;\nint p,n,m,s,t,S,T,fans,cans;\nstruct edge{\n\tint adj,nex,fw,r;\n}e[M];\nint g[N],top=1;\nvoid add(int x,int y,int z,int w){\n\te[++top]=(edge){y,g[x],z,w};\n\tg[x]=top;\n}\nvoid Add(int x,int y,int z,int w){\n\tadd(x,y,z,w),add(y,x,0,-w);\n}\nint dep[N],cur[N];\nbool vis[N];\nqueue<int> Q;\nbool spfa(){\n\t// puts(\"spfa()\");\n\tfor(int i=1;i<=p;i++)\n\t\tvis[i]=0,dep[i]=inf,cur[i]=g[i];\n\tQ.push(s),vis[s]=1,dep[s]=0;\n\twhile(Q.size()){\n\t\tint x=Q.front(); Q.pop();\n\t\tvis[x]=0;\n\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\tint to=e[i].adj,d=e[i].r;\n\t\t\tif(e[i].fw&&dep[to]>dep[x]+d){\n\t\t\t\tdep[to]=dep[x]+d;\n\t\t\t\tif(!vis[to]){\n\t\t\t\t\tvis[to]=1;\n\t\t\t\t\tQ.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=inf;\n}\nint dfs(int x,int F){\n\t// puts(\"dfs\");\n\tif(!F||x==t)\n\t\treturn F;\n\tint flow=0,f;\n\tvis[x]=1;\n\tfor(int i=cur[x];i;i=e[i].nex){\n\t\tint to=e[i].adj; cur[x]=i;\n\t\tif(!vis[to]&&dep[x]+e[i].r==dep[to]&&\n\t\t(f=dfs(to,min(F,e[i].fw)))>0){\n\t\t\te[i].fw-=f;\n\t\t\te[i^1].fw+=f;\n\t\t\tflow+=f,F-=f;\n\t\t\tif(!F){\n\t\t\t\tvis[x]=0;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\treturn flow;\n}\nint P(int x,int y){return (x-1)*m+y;} //\u70b9\u5e8f\nint tx[]={-1,1,0,0,-1,-1,1,1};\nint ty[]={0,0,-1,1,1,-1,1,-1}; //\u516b\u5411\nint Ss[25][25],Ts[25][25]; //\u521d\u59cb\uff0c\u7ec8\u5c40\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tp=t=2*n*m+2,s=t-1;\n\tchar c[25];\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",c);\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(c[j-1]=='1')\n\t\t\t\tSs[i][j]=1,S++;\n\t\t\t\t\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",c);\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(c[j-1]=='1')\n\t\t\t\tTs[i][j]=1,T++;\n\t}\n\tif(S!=T) return puts(\"-1\"),0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(Ss[i][j]&&!Ts[i][j])\n\t\t\t\tAdd(s,P(i,j),1,0),fans++; //2\n\t\t\tif(!Ss[i][j]&&Ts[i][j])\n\t\t\t\tAdd(P(i,j)+n*m,t,1,0);   //3\n\t\t}\n\t}\n\tfor(int i=1,x;i<=n;i++){\n\t\tscanf(\"%s\",c);\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tx=c[j-1]-'0';\n\t\t\tAdd(P(i,j),P(i,j)+n*m,x>>1,0); //4\n\t\t\tif((Ss[i][j]^Ts[i][j])&&(x&1))\n\t\t\t\tAdd(P(i,j),P(i,j)+n*m,1,0); //\u203b\n\t\t\tfor(int k=0;k<8;k++){\n\t\t\t\tint xt=i+tx[k],yt=j+ty[k];\n\t\t\t\tif(xt<1||xt>n||yt<1||yt>m)\n\t\t\t\t\tcontinue;\n\t\t\t\tAdd(P(i,j)+n*m,P(xt,yt),inf,1); //5\n\t\t\t}\n\t\t}\n\t}\n\twhile(spfa()){\n\t\tint d=dfs(s,inf);\n\t\tfans-=d;\n\t\tcans+=d*dep[t];\n\t}\n\tif(fans) puts(\"-1\");\n\telse printf(\"%d\\n\",cans);\n\treturn 0;\n}\n```\n\n\u56fe\u662f\u624b\u753b\u7684\uff0c\u5199\u9898\u89e3\u4e0d\u6613\u3002\n\n**\u5173\u6ce8\u535a\u4e3b\uff0c\u4e3a\u6587\u7ae0\u70b9\u8d5e\u662f\u4f60\u5e94\u8be5\u505a\u7684\u3002**\n\n\u8c22\u8c22\u5927\u5bb6! !\n",
        "postTime": 1578110922,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "#### \u6700\u8fd1\u4e00\u76f4\u5728\u5b66\u4e60\u7f51\u7edc\u6d41\u3002\u5199\u5230\u8fd9\u4e2a\u9898\u76ee\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u53cd\u5e94\u662f\uff1a\u201c\u8fd9\u600e\u4e48\u53ef\u80fd\u662f\u7f51\u7edc\u6d41\u5462\uff1f\u201d\u7528\u4e86\u4e00\u4e2a\u4e0b\u5348\u5199\u51fa\u6765\u8fd9\u9053\u9898\u540e\uff0c\u611f\u89c9\u5176\u601d\u8def\u5b9e\u5728\u5999\u6781\u3002\n\n#### \u672c\u9898\u89e3\u529b\u6c42\u8ba9\u50cf\u6211\u4e00\u6837\u521d\u5b66\u7f51\u7edc\u6d41\uff08~~\u521d\u5b66OI~~\uff09\u7684\u4eba\u80fd\u591f\u770b\u61c2\uff0c\u5982\u679c\u8fd8\u5b58\u5728\u7591\u60d1\u7684\u8bdd\u6b22\u8fce\u8054\u7cfb\u6211\u54e6~\n\n#### \u770b\u8fd9\u4e2a\u9898\u76ee\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff1a\u53ef\u4ee5\u8bb0\u5f55\u9ed1\u8272\u68cb\u5b50\u7684\u8d77\u59cb\u548c\u7ec8\u7ed3\u4f4d\u7f6e\uff0c\u60f3\u529e\u6cd5\u53bb\u8ba9\u68cb\u5b50\u4ece\u8d77\u59cb\u4f4d\u7f6e\u8d70\u5230\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u4e00\u4e00\u5339\u914d\u3002\u68cb\u5b50\u5728\u68cb\u76d8\u4e0a\u8d70\uff0c\u8d70\u7684\u8fc7\u7a0b\u4e2d\uff0c\u68cb\u5b50\u53d7\u5230\u5fc5\u987b\u6210\u529f\u5339\u914d\uff08\u6700\u5927\u6d41\uff09\u548c\u5728\u6b64\u57fa\u7840\u4e0a\u8d39\u7528\u6700\u5c0f\u7684\u7ea6\u675f\u6761\u4ef6\u3002\u8fd9\u6837\u8003\u8651\u7684\u8bdd\uff0c\u8dd1\u8d39\u7528\u6d41\u81ea\u7136\u662f\u518d\u5408\u9002\u4e0d\u8fc7\u4e86\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n#### ![](http://images.cnblogs.com/cnblogs_com/maomao9173/1317473/o_tmp.png)\n\n\n#### \u8fdb\u4e00\u6b65\u8003\u8651\u4f1a\u53d1\u73b0\uff0c\u68cb\u5b50\u7684\u4ea4\u6362\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5728\u68cb\u76d8\u4e0a\u7684\u5750\u6807\u79fb\u52a8\u3002\u60f3\u8981\u8fde\u901a\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\uff0c\u53ea\u9700\u8981\u5728\u4e8c\u8005\u4e4b\u95f4\u5efa\u7acb\u68cb\u76d8\u7684\u516b\u8fde\u901a\u56fe\uff0c\u8ba9\u68cb\u5b50\u5728\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u8fdb\u51fa\u68cb\u76d8\u5373\u53ef\u3002\n\n#### \u4f46\u662f\u73b0\u5728\uff0c\u6709\u4e00\u4e2a\u5173\u952e\u7684\u95ee\u9898\uff1a\u8d77\u59cb\u70b9\u548c\u7ec8\u6b62\u70b9\u4f5c\u4ea4\u6362\u7684\u65f6\u5019\uff0c \u6d88\u8017\u6d41\u91cf\u662f$1$\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u6d88\u8017\u6d41\u91cf\u5374\u90fd\u5e94\u8be5\u662f$2$\u3002\u5982\u679c\u5355\u7eaf\u7684\u8003\u8651\u628a\u4e00\u4e2a\u70b9\u62c6\u5206\u6210\u4e00\u6761\u8fb9\u7684\u8bdd\uff0c\u65e0\u6cd5\u5904\u7406\u8fd9\u79cd\u8fb9\u754c\u60c5\u51b5\uff0c\u4e8b\u60c5\u5c31\u53d8\u5f97\u76f8\u5bf9\u6bd4\u8f83\u9ebb\u70e6\u3002\n\n#### \u56de\u5f52\u9898\u76ee\u6765\u8003\u8651\uff0c\u9898\u76ee\u8981\u6c42\u662f\u4ea4\u6362\uff0c\u90a3\u4e48\u4ea4\u6362\u5c31\u6709\u4ea4\u6362\u8fdb\u6765\u548c\u4ea4\u6362\u51fa\u53bb\u8fd9\u4e24\u79cd\u4ea4\u6362\u65b9\u6cd5\u3002\u6839\u636e\u8fd9\u4e2a\u7ed9\u6211\u4eec\u7684\u7075\u611f\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u4e00\u4e2a\u70b9\u62c6\u6210$3$\u4e2a\uff1a$inn$\uff0c$mid$\u548c$out$\uff0c\u628a\u539f\u672c\u7684\u6700\u5927\u8bbf\u95ee\u91cf\u5747\u5206\u5728\u4e24\u7aef\u4e0a\uff0c\u800c\u628a\u6bcf\u6b21\u7684\u8fdb\u51fa\u6d41\u91cf\u89c6\u4e3a$1$\u3002\u8fd9\u6837\u540c\u65f6\u53c8\u89e3\u51b3\u4e86\u8fdb\u51fa\u68cb\u76d8\u7684\u95ee\u9898\uff1a\u76f4\u63a5\u5728$mid$\u5904\u8fdb\u5165\u68cb\u76d8\u5c31\u4e0d\u7528\u8003\u8651\u5176\u4ed6\u9ebb\u70e6\u7684\u4e8b\u60c5\u4e86\u3002\n\n#### \u90a3\u4e48\u6d41\u91cf\u5747\u5206\u7684\u60f3\u6cd5\u662f\u5426\u6b63\u786e\u5462\uff1f\u57fa\u672c\u4e0a\u662f\u5bf9\u7684\u3002\u4f46\u662f\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86$inn$->$mid$\u548c$mid$->$out$\u4e24\u79cd\u8fb9\uff0c\u5982\u679c\u8fb9\u6743\u662f\u5947\u6570\uff0c\u8fdb\u51fa\u68cb\u76d8\u9700\u8981\u7684\u6d41\u91cf\u53ea\u4e3a$1$\uff0c\u539f\u672c\u4e0d\u5e94\u8be5\u88ab\u5ffd\u7565\u7684\u96f6\u5934$1$\u53ef\u80fd\u4f1a\u88ab\u5ffd\u7565\u6216\u8005\u975e\u6700\u4f18\u5730\u5206\u914d\u3002\n\n#### \u6240\u4ee5\u8fd9\u91cc\u53c8\u7275\u6d89\u5230\u4e86\u8fd9\u4e00\u70b9\u8fb9\u754c\u7684\u5904\u7406\u95ee\u9898\u3002\u5982\u679c\u68cb\u76d8\u5f00\u59cb\u548c\u7ed3\u675f\u90fd\u6709\u6216\u90fd\u6ca1\u6709\u8be5\u68cb\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u53ef\u7528\u70b9\u6743$maxf$\u53d6$1/2$\u3002\u5426\u5219\u7684\u8bdd\uff0c\u5206\u522b\u8003\u8651\u8fdb\u5165\u548c\u51fa\u53bb\u7684\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/43646.png)\n\n#### \u53ef\u4ee5\u770b\u5230\uff0c\u8fdb\u5165\u65f6\u7684$mid$->$out$\uff0c\u51fa\u53bb\u65f6\u7684$inn$->$mid$\u4f1a\u6709\u4e00\u6761\u8017\u6d41\u4e3a$1$\u7684\u8fb9\uff0c\u6211\u4eec\u8003\u8651\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u65e2\u8fdb\u53c8\u51fa\u8282\u70b9\uff0c\u5c31\u7ed9\u5176\u5b58\u5728$1$\u8017\u6d41\u8fb9\u7684\u4e00\u90e8\u5206\u5c1d\u8bd5\u591a\u5206\u914d\u4e00\u70b9\"\u96f6\u5934\"\u6d41\u91cf\uff08\u5373\u5076\u6570\u5206\u914d\u4e3a$n/2$\u6216$(n+1)/2$\u90fd\u4e00\u6837\uff0c\u800c\u5947\u6570\u5219\u5206\u914d\u4e3a$n/2$\uff1a$(n+1)/2$\u3002\uff09\n\n#### \u4e3a\u4e86\u4fbf\u4e8e\u5404\u4f4d\u7406\u6e05\u601d\u8def\uff0c\u8fd9\u91cc\u672c\u4eba\u8d34\u4e00\u4e0b\u5efa\u56fe\u6d41\u7a0b\uff1a\n\n- \u521d\u59cb\u70b9->$S$ $f=1$ $w=0$\n- \u6700\u7ec8\u70b9<-$T$ $f=1$ $w=0$\n- \u521d\u59cb\u70b9->\u5bf9\u5e94\u5750\u6807\u7684$mid$\u8282\u70b9 $f=1$  $w=0$\n- \u5bf9\u5e94\u5750\u6807\u7684$mid$\u8282\u70b9->\u7ec8\u6b62\u70b9 $f=1$  $w=0$\n- \u68cb\u76d8\u5185\u90e8\u7684\u516b\u8fde\u901a\uff1a($out$->$in$) $f=INF$  $w=1$\n- $inn$->$mid$\u548c$mid$->$out$\uff1a$w=0$\uff0c\u6839\u636e\u60c5\u51b5\u786e\u8ba4\u9009\u62e9 $f=maxf/2$ \u6216\u8005 $f=(maxf+1)/2$\n\n#### \u81f3\u6b64\uff0c\u95ee\u9898\u5f97\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u3002\u4ee3\u7801\u5197\u957f\u6c42\u8f7b\u55b7\u3002\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define MAXN 2010\n#define MAXM 64010 \n#define INF 0x3f3f3f3f\n#define fpop(x) x.front();x.pop()\nusing namespace std;\n\nint pre_node[MAXN],pre_edge[MAXN];\n\nchar ch,mp_bg[25][25],mp_ed[25][25];\n\nint n,m,cnt=-1,dis[MAXN],vis[MAXN],flow[MAXN],head[MAXN],maxf[25][25];\n\nstruct edge{\n\tint nxt,to,w,f;\n}e[MAXM];\n\t\ninline int _bg(int x,int y){return n*m*0+(x-1)*m+y;}//\u8d77\u59cb\u70b9[x,y]\u7684\u7f16\u53f7\ninline int _ed(int x,int y){return n*m*1+(x-1)*m+y;}//\u76ee\u6807\u70b9[x,y]\u7684\u7f16\u53f7 \ninline int _inn(int x,int y){return n*m*2+(x-1)*m+y;}//\u68cb\u76d8[x,y]\u7684Inn\u70b9\u7f16\u53f7 \ninline int _mid(int x,int y){return n*m*3+(x-1)*m+y;}//\u68cb\u76d8[x,y]\u7684mid\u70b9\u6807\u53f7\ninline int _out(int x,int y){return n*m*4+(x-1)*m+y;}//\u68cb\u76d8[x,y]\u7684Out\u70b9\u7f16\u53f7 \n\ninline bool in_map(int x,int y){\n\treturn 1<=x && x<=n && 1<=y && y<=m;\n}//\u5224\u65ad\u662f\u5426\u8d8a\u754c \n\ninline void add_edge(int from,int to,int flw,int val){\n\te[++cnt].nxt=head[from];\n\te[cnt].to=to;\n\te[cnt].f=flw;\n\te[cnt].w=val;\n\thead[from]=cnt;\n}\n\nqueue<int>que;\n\ninline bool spfa(int s,int t){\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(flow,0x3f,sizeof(flow));\n\tque.push(s); vis[s]=true; dis[s]=0;\n\twhile(!que.empty()){\n\t\tint u=fpop(que);\n\t\tfor(int i=head[u];~i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].w && e[i].f){\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tflow[v]=min(flow[u],e[i].f);\n\t\t\t\tpre_node[v]=u;\n\t\t\t\tpre_edge[v]=i;\n\t\t\t\tvis[v]=true;que.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=INF;\n}\n\nint mv[8][2]={{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};\n\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tscanf(\" %c\",&mp_bg[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tscanf(\" %c\",&mp_ed[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tscanf(\" %c\",&ch);\n\t\t\tmaxf[i][j]=ch-'0';\n\t\t\t//\u6700\u5927\u7ecf\u8fc7\u6b21\u6570 \n\t\t}\n\t}\n\t//\u8f93\u5165\u8d77\u59cb\u6001\u548c\u76ee\u6807\u6001\u68cb\u76d8\n\tint s=0,t=n*m*5+1;\n\tint cnt_1=0,cnt_2=0;\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tif(mp_bg[i][j]==mp_ed[i][j]){\n\t\t\t\tadd_edge(_inn(i,j),_mid(i,j),maxf[i][j]/2,0);\n\t\t\t\tadd_edge(_mid(i,j),_inn(i,j),000000000000,0);\n\t\t\t\t\n\t\t\t\tadd_edge(_mid(i,j),_out(i,j),maxf[i][j]/2,0);\n\t\t\t\tadd_edge(_out(i,j),_mid(i,j),000000000000,0);\n\t\t\t}else{\n\t\t\t\tif(mp_bg[i][j]=='1'){\n\t\t\t\t\tadd_edge(_inn(i,j),_mid(i,j),(maxf[i][j]+0)/2,0);\n\t\t\t\t\tadd_edge(_mid(i,j),_inn(i,j),000000000000,0);\n\t\t\t\t\t\n\t\t\t\t\tadd_edge(_mid(i,j),_out(i,j),(maxf[i][j]+1)/2,0);\n\t\t\t\t\tadd_edge(_out(i,j),_mid(i,j),000000000000,0);\n\t\t\t\t}\n\t\t\t\tif(mp_ed[i][j]=='1'){\n\t\t\t\t\tadd_edge(_inn(i,j),_mid(i,j),(maxf[i][j]+1)/2,0);\n\t\t\t\t\tadd_edge(_mid(i,j),_inn(i,j),000000000000,0);\n\t\t\t\t\t\n\t\t\t\t\tadd_edge(_mid(i,j),_out(i,j),(maxf[i][j]+0)/2,0);\n\t\t\t\t\tadd_edge(_out(i,j),_mid(i,j),000000000000,0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(mp_bg[i][j]=='1'){\n\t\t\t\t++cnt_1;\n\t\t\t\t//\u8fde\u63a5\u6e90\u70b9\u5230\u521d\u59cb\u70b9     f=1 w=0;\n\t\t\t\tadd_edge(s,_bg(i,j),1,0);\n\t\t\t\tadd_edge(_bg(i,j),s,0,0);\n\t\t\t\t//\u8fde\u63a5\u8d77\u59cb\u70b9\u5230\u68cb\u76d8 \n\t\t\t\tadd_edge(_bg(i,j),_mid(i,j),1,0);\n\t\t\t\tadd_edge(_mid(i,j),_bg(i,j),0,0);\n\t\t\t}\n\t\t\tif(mp_ed[i][j]=='1'){\n\t\t\t\t++cnt_2;\n\t\t\t\t//\u8fde\u63a5\u7ec8\u7ed3\u70b9\u5230\u6c47\u70b9     f=1 w=0; \n\t\t\t\tadd_edge(_ed(i,j),t,1,0);\n\t\t\t\tadd_edge(t,_ed(i,j),0,0);\n\t\t\t\t//\u8fde\u63a5\u68cb\u76d8\u5230\u7ec8\u7ed3\u70b9 \n\t\t\t\tadd_edge(_mid(i,j),_ed(i,j),1,0);\n\t\t\t\tadd_edge(_ed(i,j),_mid(i,j),0,0);\n\t\t\t}\n\t\t\t//\u68cb\u76d8\u7684\u516b\u8fde\u901a\u8fb9  f=INF w=1;\n\t\t\tfor(int k=0;k<8;++k){\n\t\t\t\tint ni=i+mv[k][0];\n\t\t\t\tint nj=j+mv[k][1];\n\t\t\t\tif(in_map(ni,nj)){\n\t\t\t\t\t//\u4ece\u70b9[i,j]\u7684out\u8fde\u63a5\u70b9[ni,nj]\u7684inn \n\t\t\t\t\tadd_edge(_out(i,j),_inn(ni,nj),INF,+1);\n\t\t\t\t\tadd_edge(_inn(ni,nj),_out(i,j),000,-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//\u68cb\u5b50\u6570\u53d8\u52a8->No solution \n\tif(cnt_1!=cnt_2){\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\t//\u7136\u540e\u8dd1\u8d39\u7528\u6d41 \n\tint max_flow=0,min_cost=0;\n\twhile(spfa(s,t)){\n\t\tmax_flow+=flow[t];\n\t\tmin_cost+=flow[t]*dis[t];\n\t\tint u=t;\n\t\twhile(u!=s){\n\t\t\te[pre_edge[u]^0].f-=flow[t];\n\t\t\te[pre_edge[u]^1].f+=flow[t];\n\t\t\tu=pre_node[u];\n\t\t}\n\t}\n\tif(max_flow!=cnt_1){\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\tprintf(\"%d\\n\",min_cost);\n}\n\n```\n\n",
        "postTime": 1542369891,
        "uid": 58698,
        "name": "Nativ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u306eblog](http://www.cnblogs.com/dedicatus545/p/8781976.html)\n\n# \u6b63\u6587\n\n### \u6296\u673a\u7075\n\n\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9898\u6211\u4ee5\u4e3a\u662f\u68cb\u76d8\u6a21\u578b-\\_-||\n\n\u7136\u800c\u73b0\u5b9e\u662f\u9aa8\u611f\u7684\n\n\u540e\u6765\u6211\u5c1d\u8bd5\u4f7f\u7528\u63d2\u5934dp\u6765\u4ea4\u6362\uff0c\u7136\u540e\u53c8\u60e8\u6b7b\n\n\u6700\u540e\u6211\u4e0d\u5f97\u4e0d\u628a\u76ee\u5149\u8f6c\u5411\u90a3\u4e2a\u603b\u80fd\u5316\u8150\u673d\u4e3a\u795e\u5947\u7684\u7b97\u6cd5\uff1a\u7f51\u7edc\u6d41\n\n### \u601d\u7ef4\n\n\u6211\u4eec\u8981\u5148\u6709\u4e00\u4e2a\u601d\u7ef4\u7684\u8f6c\u53d8\uff1a\u8981\u628a\u68cb\u76d8\u4e0a\u7684\u201c\u4ea4\u6362\u201d\u64cd\u4f5c\uff0c\u770b\u6210\u6240\u6709\u7684\u9ed1\u8272\u68cb\uff08\u767d\u8272\u68cb\u7b49\u4ef7\uff09\u5728\u79fb\u52a8\n\n\u6211\u4eec\u8003\u8651\u4ee4\u4e00\u4e2a\u9ed1\u5b50\u5f80\u4e0b\u79fb\u52a8\u4e00\u4e2a\n\n\u6b64\u65f6\u5f53\u524d\u683c\u5b50\u548c\u4e0b\u65b9\u683c\u5b50\u7684\u4ea4\u6362\u6570\u90fd\u52a0\u4e00\n\n\u8003\u8651\u4e00\u6761\u79fb\u52a8\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u6761\u8def\u5f84\u4e24\u7aef\u7684\u683c\u5b50\u53ea\u8fdb\u884c\u4e86\u4e00\u6b21\u4ea4\u6362\uff0c\u4f46\u662f\u8def\u5f84\u4e0a\u7684\u6240\u6709\u683c\u5b50\u8fdb\u884c\u4e86\u4e24\u6b21\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u6210\u7f51\u7edc\u6d41\u6765\u505a\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a\u683c\u5b50\u5982\u679c\u672c\u6765\u5c31\u6709\u4e00\u4e2a\u9ed1\u68cb\uff0c\u6700\u540e\u6ca1\u6709\u9ed1\u68cb\uff0c\u6216\u8005\u672c\u6765\u662f\u767d\u68cb\uff0c\u6700\u540e\u662f\u9ed1\u68cb\uff0c\u90a3\u4e48\u8fd9\u4e2a\u683c\u5b50\u7684\u6536\u652f\u4f1a\u4e0d\u5e73\u8861\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u786c\u505a\uff0c\u8fde\u65e0\u5411\u8fb9\u7684\u65f6\u5019\u6ee1\u8db3\u4e86\u6d41\u91cf\u5e73\u8861\u6761\u4ef6\u4f46\u5374\u5f97\u4e0d\u5230\u6700\u4f18\u89e3\n\n\u800c\u4e14\u5982\u679c\u6bcf\u4e2a\u683c\u5b50\u53ea\u5efa\u4e00\u4e2a\u70b9\uff0c\u4e5f\u5e76\u4e0d\u80fd\u628a\u683c\u5b50\u7684\u4ea4\u6362\u6b21\u6570\u9650\u5236\u8003\u8651\u8fdb\u53bb\n\n\u90a3\u6211\u4eec\u5c31\u8981\u8003\u8651\u62c6\u70b9\u4e86\n\n### \u62c6\u70b9\n\n\u6700\u57fa\u7840\u7684\u62c6\u70b9\uff1a\u4e00\u4e2a\u683c\u5b50\u62c6\u6210\u4e24\u4e2a\uff0c\u5206\u522b\u4ee3\u8868\u8fdb\u5165\u548c\u8d70\u51fa\uff0c\u4e2d\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u4ea4\u6362\u6b21\u6570\u4e0a\u9650\u7684\u8fb9\n\n\u4f46\u662f\u8fd9\u6837\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u65e0\u6cd5\u4f53\u73b0\u51fa\u8def\u5f84\u4e24\u7aef\u7684\u70b9\u548c\u8def\u5f84\u4e2d\u95f4\u7684\u70b9\u7684\u533a\u522b\uff08\u4e5f\u5c31\u662f\u5982\u679c\u201c\u7ecf\u8fc7\u201d\u4e86\u4e00\u4e2a\u70b9\uff0c\u4e5f\u53ea\u7edf\u8ba1\u4e00\u70b9\u6d41\u91cf\uff09\n\n\u90a3\u6211\u4eec\u518d\u62c6\uff1a\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e09\u4e2a\uff1aleft,now,right\n\n\u4eceleft\u5411now\u8fde\u8fb9\u3001now\u5411right\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e0a\u9650\u5206\u522b\u4e3a\u9650\u5236\u7684\u4e00\u534a\n\n\u8fd9\u6837\u5c31\u5b8c\u7f8e\u4f53\u73b0\u4e86\u53ea\u6709\u6d41\u51fa\u3001\u53ea\u6709\u6d41\u5165\u548c\u6d41\u5165\u6d41\u51fa\u90fd\u6709\u7684\u533a\u522b\n\n\u76f8\u90bb\u7684\u70b9\u4e4b\u95f4\u4eceright\u8fde\u5411left\n\n\u6211\u4eec\u4ee4\u6e90\u70b9\u5411\u6240\u6709\u521d\u59cb\u56fe\u4e2d\u9ed1\u68cb\u683c\u5b50\u7684now\u8fde\u8fb9\uff0c\u6c47\u70b9\u8ddf\u6240\u6709\u6700\u7ec8\u56fe\u4e2d\u7684\u9ed1\u68cb\u683c\u5b50\u7684now\u8fde\u8fb9\uff0c\u8dd1S-T\u6700\u5927\u6d41\u5373\u53ef\n\n### \u95ee\u9898\n\n\u7b2c\u4e00\u4e2a\u5927\u95ee\u9898\uff1a\u5982\u4f55\u89e3\u51b3\u4e0a\u6587\u4e2d\u6d41\u91cf\u6536\u652f\u53ef\u80fd\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff1f\n\n\u7b54\uff1a\u5982\u679c\u8be5\u70b9\u662f\u9ed1\u5b50->\u767d\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u51fa\u4e00\u5b9a\u6bd4\u5165\u5927\u4e00\u70b9\u6d41\u91cf\uff1b\u5982\u679c\u662f\u767d\u5b50->\u9ed1\u5b50\uff0c\u90a3\u4e48\u5165\u4e00\u5b9a\u6bd4\u51fa\u5927\u4e00\u70b9\u6d41\u91cf\n\n\u7b2c\u4e8c\u4e2a\u5927\u95ee\u9898\uff1a\u5982\u4f55\u627e\u6700\u5c0f\uff1f\n\n\u505a\u8fd9\u4e2a\u6bd4\u8f83\u597d\u529e\uff0c\u628aleft-now\u548cnow-right\u8fb9\u589e\u52a0\u8d39\u75281\u5c31\u597d\u4e86\n\n### \u7ed3\u8bba&&\u6700\u7ec8\u5b9e\u73b0\u65b9\u6cd5\n\n\u4ee5\u4e0b\u7528<u,v,w,cap>\u8868\u793au\u5230v\u7684\u6709\u5411\u8fb9\uff0c\u8d39\u7528w\u6d41\u91cfcap\n\n\u5efa\u7acb\u8d39\u7528\u6d41\u56fe\uff0c\u6bcf\u4e2a\u70b9\u62c6\u6210left,now,right\n\n\u82e5\u8be5\u70b9\u5728\u521d\u59cb\u56fe\u4e2d\u662f\u9ed1\u7684\u3001\u6700\u7ec8\u56fe\u4e2d\u662f\u767d\u7684\uff0c\u90a3\u4e48\u8fde\u8fb9(left,now,1,$\\frac{limit}{2}$),(now,right,1,$\\frac{limit+1}{2}$)\n\n\u82e5\u8be5\u70b9\u5728\u521d\u59cb\u56fe\u4e2d\u662f\u767d\u7684\u3001\u6700\u7ec8\u56fe\u4e2d\u662f\u9ed1\u7684\uff0c\u90a3\u4e48\u8fde\u8fb9(left,now,1,$\\frac{limit+1}{2}$),(now,right,1,$\\frac{limit}{2}$)\n\n\u82e5\u8be5\u70b9\u5728\u521d\u59cb\u56fe\u548c\u6700\u7ec8\u56fe\u4e2d\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u8fde\u8fb9(left,now,1,$\\frac{limit}{2}$),(now,right,1,$\\frac{limit}{2}$)\n\n\u5176\u4e2dlimit\u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u7684\u4ea4\u6362\u6b21\u6570\u4e0a\u9650\n\n\u5efa\u7acb\u9644\u52a0\u6e90\u6c47S-T\n\n\u5bf9\u4e8e\u521d\u59cb\u56fe\u4e2d\u7684\u9ed1\u70b9i\uff0c\u8fde\u8fb9(S,now(i),0,1)\n\n\u5bf9\u4e8e\u6700\u7ec8\u56fe\u4e2d\u7684\u9ed1\u70b9i\uff0c\u8fde\u8fb9(now(i),T,0,1)\n\n\u76f8\u90bb\u7684\u70b9i,j\u4e4b\u95f4\u8fde\u8fb9(right(i),left(j),0,inf)\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 1e9\n#define tot (n*m*3)\n#define left(i,j) ((i-1)*m+j)\n#define now(i,j) (((i-1)*m+j)+n*m)\n#define right(i,j) (((i-1)*m+j)+(n*m<<1))\nusing namespace std;\ninline int read(){\n\tint re=0,flag=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){\n\t\tif(ch=='-') flag=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n\treturn re*flag;\n}\nconst int dx[9]={0,-1,-1,-1,0,0,1,1,1},dy[9]={0,-1,0,1,-1,1,-1,0,1};\nint n,cnt=-1,m,first[2010],dis[2010],vis[2010],ans=0;\nstruct edge{\n\tint to,next,w,cap;\n}a[50010];\ninline void add(int u,int v,int w,int cap){\n\ta[++cnt]=(edge){v,first[u],w,cap};first[u]=cnt;\n\ta[++cnt]=(edge){u,first[v],-w,0};first[v]=cnt;\n}\nint q[10010];\nbool spfa(int s,int t){\n\tint head=0,tail=1,i,v,u,w;\n\tmemset(dis,-1,sizeof(dis));memset(vis,0,sizeof(vis));\n\tq[0]=t;vis[t]=1;dis[t]=0;\n\twhile(head<tail){\n\t\tu=q[head++];vis[u]=0;\n\t\tfor(i=first[u];~i;i=a[i].next){\n\t\t\tv=a[i].to;w=a[i].w;\n\t\t\tif(a[i^1].cap&&((dis[v]==-1)||(dis[v]>dis[u]-w))){\n\t\t\t\tdis[v]=dis[u]-w;\n\t\t\t\tif(!vis[v]) q[tail++]=v,vis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\treturn ~dis[s];\n}\nint dfs(int u,int t,int limit){\n\tif(u==t||!limit){vis[u]=1;return limit;}\n\tint i,v,f,flow=0,w;vis[u]=1;\n\tfor(i=first[u];~i;i=a[i].next){\n\t\tv=a[i].to;w=a[i].w;\n\t\tif(!vis[v]&&a[i].cap&&dis[v]==dis[u]-w){\n\t\t\tif(!(f=dfs(v,t,min(limit,a[i].cap)))) continue;\n\t\t\ta[i].cap-=f;a[i^1].cap+=f;\n\t\t\tflow+=f;limit-=f;ans+=w*f;\n\t\t\tif(!limit) return flow;\n\t\t}\n\t}\n\treturn flow;\n}\nint zkw(int s,int t){\n\tint re=0;\n\twhile(spfa(s,t)){\n\t\tvis[t]=1;\n\t\twhile(vis[t]){\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tre+=dfs(s,t,inf);\n\t\t}\n\t}\n\treturn re;\n}\nint x1[30][30],x2[30][30];\nint main(){\n\tmemset(first,-1,sizeof(first));\n\tint i,j,t1=0,t2=0,ti,tj,k;char s[30];\n\tn=read();m=read();\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%s\",s);\n\t\tfor(j=1;j<=m;j++){\n\t\t\tif(s[j-1]=='1'){\n\t\t\t\tt1++;add(0,now(i,j),0,1);\n\t\t\t\tx1[i][j]=1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%s\",s);\n\t\tfor(j=1;j<=m;j++){\n\t\t\tif(s[j-1]=='1'){\n\t\t\t\tt2++;add(now(i,j),tot+1,0,1);\n\t\t\t\tx2[i][j]=1;\n\t\t\t}\n\t\t}\n\t}\n\tif(t1!=t2){\n\t\tputs(\"-1\");return 0;\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%s\",s);\n\t\tfor(j=1;j<=m;j++){\n\t\t\tt2=s[j-1]-'0';\n\t\t\tif(x1[i][j]==x2[i][j]) \n\t\t\t\tadd(left(i,j),now(i,j),0,t2/2),add(now(i,j),right(i,j),0,t2/2);\n\t\t\tif(x1[i][j]&&!x2[i][j])\n\t\t\t\tadd(left(i,j),now(i,j),0,t2/2),add(now(i,j),right(i,j),0,(t2+1)/2);\n\t\t\tif(!x1[i][j]&&x2[i][j])\n\t\t\t\tadd(left(i,j),now(i,j),0,(t2+1)/2),add(now(i,j),right(i,j),0,t2/2);\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tfor(j=1;j<=m;j++){\n\t\t\tfor(k=1;k<=8;k++){\n\t\t\t\tti=i+dx[k];tj=j+dy[k];\n\t\t\t\tif(ti<1||ti>n||tj<1||tj>m) continue;\n\t\t\t\tadd(right(i,j),left(ti,tj),1,inf);\n\t\t\t}\n\t\t}\n\t}\n\tif(zkw(0,tot+1)!=t1){\n\t\tputs(\"-1\");return 0;\n\t}\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1523360411,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u5b8c\u5168\u4e0d\u7528\u62c6\u4e09\u4e2a\u70b9\u554a... \u62c6\u6210\u4e24\u4e2a\u70b9\u7167\u6837\u53ef\u4ee5A\n\n\u5176\u5b9e\u96be\u70b9\u65e0\u975e\u5c31\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u53ea\u901a\u8fc7\u4e00\u6b21\uff0c\u8def\u5f84\u4e0a\u7684\u5176\u4f59\u70b9\u8981\u901a\u8fc7\u4e24\u6b21\u3002\n\n\u6211\u4eec\u5148\u4e0d\u8003\u8651\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u90a3\u4e48\u8def\u5f84\u4e0a\u7684\u683c\u5b50\u5176\u5b9e\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u68cb\u5b50\u5c31\u8981\u88ab\u7ffb\u8f6c\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9\u901a\u8fc7\u6b21\u6570\u9664\u4ee52\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u518d\u8003\u8651\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u65e2\u662f\u8d77\u70b9\u53c8\u662f\u7ec8\u70b9\uff0c\u663e\u7136\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83,\u5f53\u505a\u8fd9\u91cc\u6ca1\u6709\u68cb\u5b50\u5904\u7406\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u662f\u8d77\u70b9\u6216\u7ec8\u70b9\u7684\u683c\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7ed9\u4ed6\u7559\u51fa\u4e00\u4e2a\u521d\u59cb\u901a\u8fc7\u7684\u4ea4\u6362\u6b21\u6570\uff0c\u5373\u8ba9\u4ee5\u8be5\u683c\u5b50\u4e3a\u8d77\u70b9\u7684\u68cb\u5b50\u79bb\u5f00\uff0c\u7136\u540e\u5269\u4e0b\u7684\u5c31\u6309\u7167\u8fd9\u4e2a\u683c\u5b50\u662f\u8def\u5f84\u4e0a\u7684\u70b9\u5904\u7406\u5373\u53ef\uff0c\u5373\u5bb9\u91cf\u4e3a(w-1)/2+1\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u62c6\u6210\u4e24\u4e2a\u70b9\u505a\u8fa3qwq  (\u5b89\u5229\u4e00\u6ce2\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[\u4f20\u9001\u95e8](http://www.cnblogs.com/zub23333/p/8849559.html)\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<bitset>\n#define dx(i,j) ((i-1)*m+j)\n#define dy(i,j) ((i-1)*m+j+400)\nusing namespace std ;\nconst int INF = 0x7ffffff ;\nconst int N = 20 + 2 ;\nconst int FN = 800 + 10 ;\nconst int M = 1e6 + 10 ;\n\nconst int cx[] = {-1,-1,-1,0,0,1,1,1} ;\nconst int cy[] = {1,0,-1,1,-1,1,0,-1} ;\n\ninline int read() {\n    int k = 0, f = 1 ; char c = getchar() ;\n    for( ; !isdigit(c) ; c = getchar())\n      if(c == '-') f = -1 ;\n    for( ; isdigit(c) ; c = getchar())\n      k = k*10 + c-'0' ;\n    return k*f ;\n}\nstruct Edge {\n    int to, next, flow, cost ;\n}e[M] ;\nint n, m, s, t, ansf, ansc ; int head[FN], dis[FN] ; bool hh[N][N], gg[N][N], vis[FN] ;\ninline void add_edge(int x,int y,int ff,int cc) {\n    static int cnt = 1 ;\n    e[++cnt].to = y, e[cnt].next = head[x], head[x] = cnt, e[cnt].flow = ff, e[cnt].cost = cc ;\n    e[++cnt].to = x, e[cnt].next = head[y], head[y] = cnt, e[cnt].flow = 0, e[cnt].cost = -cc ;\n}\n\ninline bool spfa() {\n    for(int i=1;i<=t;i++) dis[i] = INF ; dis[s] = 0 ;\n    deque<int>q ; q.push_back(s) ; bitset<FN>inq ; inq[s] = 1 ;\n    while(!q.empty()) {\n        int x = q.front() ; q.pop_front() ; inq[x] = 0 ;\n        for(int i=head[x];i;i=e[i].next) {\n            int y = e[i].to ; if(!e[i].flow) continue ;\n            if(dis[y] > dis[x]+e[i].cost) {\n                dis[y] = dis[x]+e[i].cost ;\n                if(!inq[y]) {\n                    inq[y] = 1 ;\n                    if(!q.empty() && dis[y] < dis[q.front()]) q.push_front(y) ;\n                    else q.push_back(y) ;\n                }\n            }\n        }\n    }\n    return dis[t] < INF ;\n}\nint FFdfs(int x,int minflow) {\n    vis[x] = 1 ;\n    if(x == t || !minflow) return minflow ;\n    int fflow = 0 ;\n    for(int i=head[x];i;i=e[i].next) {\n        int y = e[i].to ; if(!e[i].flow || vis[y] || dis[y] != dis[x]+e[i].cost) continue ;\n        int temp = FFdfs(y,min(minflow,e[i].flow)) ;\n        fflow += temp, minflow -= temp ;\n        e[i].flow -= temp, e[i^1].flow += temp ;\n        ansc += temp*e[i].cost ;\n        if(!minflow) break ;\n    }\n    return fflow ;\n}\n\nint main() {\n    n = read(), m = read() ; s = 801, t = s+1 ; int tot = 0, tot1 = 0 ;\n    for(int i=1;i<=n;i++) \n      for(int j=1;j<=m;j++) {\n      \t char cc ; cin>>cc ; \n      \t if(cc == '1') {\n      \t \thh[i][j] = 1, tot1++ ;\n         }\n      }\n    for(int i=1;i<=n;i++) \n      for(int j=1;j<=m;j++) {\n      \t char cc ; cin>>cc ;\n      \t if(cc == '1') {\n      \t \tgg[i][j] = 1, tot++ ;\n         }\n      }\n    while(tot != tot1) {\n        printf(\"-1\") ; return 0 ;\n    } tot = 0 ;\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=m;j++) {\n      \t if(hh[i][j] && !gg[i][j]) add_edge(s,dx(i,j),1,0), tot++ ;\n         else if(!hh[i][j] && gg[i][j]) add_edge(dy(i,j),t,1,0) ; \n      }\n    for(int i=1;i<=n;i++) \n      for(int j=1;j<=m;j++) {\n      \t char cc ; cin>>cc ; int x = cc-'0' ; \n      \t add_edge(dx(i,j),dy(i,j),x>>1,0) ;\n      \t if(hh[i][j] != gg[i][j] && x&1) add_edge(dx(i,j),dy(i,j),1,0) ;\n      \t for(int k=0;k<8;k++) {\n      \t \tint xx = i+cx[k], yy = j+cy[k] ; if(!xx || !yy || xx > n || yy > m) continue ;\n      \t \tadd_edge(dy(i,j),dx(xx,yy),INF,1) ;\n         }\n      }\n    while(spfa()) {\n        vis[t] = 1 ;\n        while(vis[t]) {\n            memset(vis,0,sizeof(vis)) ;\n            ansf += FFdfs(s,INF) ;\n \t\t}\n    } \n    if(ansf < tot) {\n        printf(\"-1\") ; return 0 ;\n    }\n    printf(\"%d\",ansc) ;\n    return 0 ;\n}\n```",
        "postTime": 1523834719,
        "uid": 27388,
        "name": "zubizakeli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "\u4f7f\u7528\u8d39\u7528\u6d41\u89e3\u51b3\u672c\u9898\uff0c\u8bbe\u70b9![](http://latex.codecogs.com/gif.latex?p[i][j])\u7684\u53c2\u4e0e\u4ea4\u6362\u7684\u6b21\u6570\u4e0a\u9650\u4e3a![](http://latex.codecogs.com/gif.latex?v[i][j])\uff0c\u4ee5\u4e0b\u4e3a\u5efa\u56fe\u65b9\u5f0f\uff1a\n\n1. \u5c06\u4e00\u4e2a\u70b9\u5206\u6210\u4e09\u4e2a\u70b9\uff0c\u5206\u522b\u4e3a\u5165\u70b9\uff0c\u539f\u70b9\u548c\u51fa\u70b9\u3002\n\n2. \u5982\u679c\u5f00\u59cb\u7684\u56fe\u4e0a\u8be5\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u90a3\u4e48\u4eceS\u5230\u8be5\u70b9\u7684\u539f\u70b9\u8fde\u4e00\u6761\u8fb9\u67431\uff0c\u8d39\u75280\u7684\u8fb9\n\n3. \u5982\u679c\u7ed3\u675f\u7684\u56fe\u4e0a\u8be5\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u90a3\u4e48\u4ece\u8be5\u70b9\u7684\u539f\u70b9\u5230T\u8fde\u4e00\u6761\u8fb9\u67431\uff0c\u8d39\u75280\u7684\u8fb9\n\n4. \u5982\u679c\u8be5\u70b9\u53ea\u5728\u5f00\u59cb\u7684\u56fe\u4e0a\u51fa\u73b0\uff0c\u90a3\u4e48\u4ece\u8be5\u70b9\u7684\u5165\u70b9\u5411\u539f\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]}{2})\uff0c\u8d39\u7528\u4e3a1\u7684\u8fb9\uff0c\u4ece\u8be5\u70b9\u7684\u539f\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]+1}{2})\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\n\n5. \u5982\u679c\u8be5\u70b9\u53ea\u5728\u7ed3\u675f\u7684\u56fe\u4e0a\u51fa\u73b0\uff0c\u90a3\u4e48\u4ece\u8be5\u70b9\u7684\u5165\u70b9\u5411\u539f\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]+1}{2})\uff0c\u8d39\u7528\u4e3a1\u7684\u8fb9\uff0c\u4ece\u8be5\u70b9\u7684\u539f\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]}{2})\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\n\n6. \u5982\u679c\u4ee5\u4e0a\u4e24\u70b9\u90fd\u4e0d\u7b26\u5408\uff0c\u90a3\u4e48\u4ece\u8be5\u70b9\u7684\u5165\u70b9\u5411\u539f\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]}{2})\uff0c\u8d39\u7528\u4e3a1\u7684\u8fb9\uff0c\u4ece\u8be5\u70b9\u7684\u539f\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a![](http://latex.codecogs.com/gif.latex?\\frac{v[i][j]}{2})\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\n\n\n\u672c\u4ee3\u7801\u4f7f\u7528zkw\u8d39\u7528\u6d41\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n#include <algorithm>\n#define ll long long\n#define INF 715827882 \n#define N 1205\n#define M 10000\nusing namespace std;\n    int n,m,S,T,sz=1,res,st,en,tot,cnt,ad1,ad2,ls;\n    int to[M],nex[M],las[N],cost[M],dist[N],Q[M],v[M];\n    bool mark[N];\n    char ch[3][50][50];\n    const int wx[]={-1,-1,-1,0,1,1,1,0};\n    const int wy[]={-1,0,1,1,1,0,-1,-1};\nint inline read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid ins(int x,int y,int z=1,int u=0)\n{\n    sz++;to[sz]=y;v[sz]=z;cost[sz]=u;nex[sz]=las[x];las[x]=sz;\n    sz++;to[sz]=x;v[sz]=0;cost[sz]=-u;nex[sz]=las[y];las[y]=sz;\n}\ninline int ts(const int &x,const int &y){return (x-1)*m+y;}\nvoid init()\n{\n    int nx,ny,tmp;\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch[0][i]+1);\n        for (int j=1;j<=m;j++)\n            if (ch[0][i][j]=='1') ins(S,n*m+ts(i,j)),cnt++;\n    }\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch[1][i]+1);\n        for (int j=1;j<=m;j++)\n            if (ch[1][i][j]=='1') ins(n*m+ts(i,j),T);\n    }\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch[2][i]+1);\n        for (int j=1;j<=m;j++)\n        {\n            tmp=ts(i,j);\n            if (ch[0][i][j]=='0'&&ch[1][i][j]=='1') ad1=1,ad2=0;\n            else if (ch[0][i][j]=='1'&&ch[1][i][j]=='0') ad1=0,ad2=1;\n            else ad1=ad2=0;\n            ins(tmp,n*m+tmp,(ch[2][i][j]-'0'+ad1)/2,1);\n            ins(n*m+tmp,2*n*m+tmp,(ch[2][i][j]-'0'+ad2)/2,0);\n            for (int k=0;k<8;k++)\n            {\n                nx=i+wx[k],ny=j+wy[k];\n                if (nx>0&&ny>0&&nx<=n&&ny<=m) ins(2*n*m+tmp,ts(nx,ny),INF,0);\n            }\n        }\n    }\n}\nbool spfa()\n{\n    memset(dist,127/3,sizeof(dist));\n    memset(mark,0,sizeof(mark));\n    st=en=N;Q[N]=T;mark[T]=1;\n    dist[T]=0;\n    while (st<=en)\n    {\n        int tmp=Q[st++];\n        mark[tmp]=0;\n        for (int i=las[tmp];i;i=nex[i])\n        if (v[i^1]&&dist[to[i]]>dist[tmp]-cost[i])\n        {\n            dist[to[i]]=dist[tmp]-cost[i];\n            if (!mark[to[i]])\n            {\n                mark[to[i]]=1;\n                if (st<=en&&dist[to[i]]<dist[st])\n                    Q[--st]=to[i];\n                else\n                    Q[++en]=to[i];\n            }\n        }\n    }\n    return dist[0]!=dist[S];\n}\nint dfs(int x,int F)\n{\n    mark[x]=true;\n    if (x==T) return F;\n    int w,used=0;\n    for (int i=las[x];i;i=nex[i])\n    if (v[i]>0&&!mark[to[i]]&&dist[x]-cost[i]==dist[to[i]])\n    {\n        w=min(v[i],F-used);\n        w=dfs(to[i],w);\n        v[i]-=w,v[i^1]+=w,used+=w;\n        if (used==F) return F;\n    }\n    return used;\n}\nint main()\n{\n    n=read(),m=read();\n    S=3*n*m+1,T=S+1;\n    init();\n    while (spfa())\n    {\n        memset(mark,0,sizeof(mark));\n        tot+=ls=dfs(S,INF);\n        res+=ls*dist[S];\n    }\n    printf(\"%d\",tot==cnt?res:-1);\n    return 0;\n}\n```",
        "postTime": 1489993240,
        "uid": 9433,
        "name": "FlierKing",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "## \u9898\u89e3 P3159  [CQOI2012] \u4ea4\u6362\u68cb\u5b50\n\n### \u9898\u76ee\u63cf\u8ff0\n\n\u6709\u4e00$n$\u884c$m$\u5217\u7684\u9ed1\u767d\u68cb\u76d8\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u683c\u5b50\uff08\u76f8\u90bb\u662f\u6307\u6709\u516c\u5171\u8fb9\u6216\u516c\u5171\u9876\u70b9\uff09\u4e2d\u7684\u68cb\u5b50\uff0c\u6700\u7ec8\u8fbe\u5230\u76ee\u6807\u72b6\u6001\u3002\u8981\u6c42\u7b2c$i$\u884c\u7b2c$j$\u5217\u7684\u683c\u5b50\u53ea\u80fd\u53c2\u4e0e$m_{i,j}$\u6b21\u4ea4\u6362\u3002\u5148\u7ed9\u51fa\u6c42\u8fbe\u5230\u76ee\u6807\u72b6\u6001\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\n\n\n\n#### \u8f93\u5165\u6837\u4f8b1                                                               \u8f93\u51fa\u6837\u4f8b1\n\n```cassandra\n3 3                                              4\n110\n000\n001\n000\n110\n100\n222\n222\n222\n```\n\n#### \u6570\u636e\u8303\u56f4\n\n\n\n$1 <= m,n <= 20$\n\n\n\n### \u89e3\u9898\u601d\u8def\n\n#### \u601d\u8def\u7684\u786e\u5b9a\n\n\u9996\u5148\u5f53\u6211\u4eec\u770b\u5230\u8fd9\u79cd\u6570\u636e\u8303\u56f4\u7684\u65f6\u5019\uff0c\n\n**\u8fd9\u4e0d\u662f\u6807\u51c6\u72b6\u538b\u5417\uff1f**\n\n\u4f46\u662f\u8fd9\u662f\u7f51\u7edc\u6d41\u3002\u663e\u7136\u4e0d\u80fd\u72b6\u538b\u3002\u7206\u641c\u80af\u5b9a\u60e8\u6b7b\u3002\n\n\u770b\u5230\u8fd9\u79cd\u9898\uff0c\u5c31\u4f1a\u60f3\u5230\u4ece\u8d77\u59cb\u68cb\u76d8\u5411\u76ee\u6807\u72b6\u6001\u8fde\u8fb9\u3002\u4ea4\u6362\u6b21\u6570\u81ea\u7136\u5c31\u662f\u8d39\u7528\u3002\n\n\u540c\u65f6\uff0c\u68cb\u5b50\u7684\u4ea4\u6362\u4e5f\u53ef\u4ee5\u89c6\u4e3a\u6d41\u91cf\u7684\u8f6c\u79fb\u3002\n\n**\u4e8e\u662f\u6211\u4eec\u7ed9\u8fd9\u9053\u9898\u5b9a\u4e86\u6027\uff1a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41**\n\n\u4f46\u662f\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\uff1a\u6bd4\u5982\u6211\u4eec\u9009\u53d6\u4e86\u4e00\u6761\u8def\u5f84\uff1a$(1,1) -> (2,2)$\n\n\u6211\u4eec\u9700\u8981\u4ea4\u6362\u4e24\u6b21\uff1a$swap((1,1),(1,2))$      $swap((1,2),(2,2))$\n\n\u4e8e\u662f\u4e2d\u95f4\u7684\u8282\u70b9\u4f7f\u7528\u4e86\u4e24\u6b21\u7684\u4ea4\u6362\u6b21\u6570\u3002\n\u5982\u679c\u6211\u4eec\u53ea\u662f\u628a\u70b9\u62c6\u6210\u4e00\u6761\u8fb9\uff0c\u5f88\u96be\u5904\u7406\u8fd9\u4e2a\u8282\u70b9\u5230\u5e95\u662f\u4e2d\u95f4\u70b9\u3001\u8d77\u59cb\u70b9\u8fd8\u662f\u76ee\u6807\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u62c6\u70b9\u3002\n\n#### \u62c6\u70b9\n\n\u8fd9\u9053\u9898\u91c7\u7528\u4e86\u4e00\u4e2a\u86c7\u76ae\u7684\u65b9\u6cd5\uff0c\u5f53\u65f6\u6211\u6ca1\u6709\u60f3\u5230\uff0c\u5e94\u8be5\u662f\u6211\u592a\u83dc\u4e86\u3002\n\n\u57fa\u7840\u7684\u62c6\u70b9\u53ef\u4ee5\u5c06\u4e00\u4e2a\u8282\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\u3002\u4f46\u662f\u8fd9\u9053\u86c7\u76ae\u7684\u9898\u662f\u8981\u5c06\u6bcf\u4e2a\u683c\u5b50\u62c6\u6210\u4e09\u4e2a\u70b9\u7684\uff1a$in$,$mid$,$out$\u3002\n\n![\u65e0\u6807\u9898](https://cdn.luogu.com.cn/upload/pic/60563.png)\n\n\u6211\u4eec\u628a\u8d77\u59cb\u72b6\u6001\u4e2d\u6bcf\u4e00\u4e2a\u6709\u9ed1\u68cb\u5b50\u7684\u70b9\u8fde\u5411\u539f\u70b9\uff0c\u76ee\u6807\u72b6\u6001\u4e2d\u6bcf\u4e00\u4e2a\u6709\u9ed1\u68cb\u5b50\u7684\u70b9\u8fde\u5411\u6c47\u70b9\u3002\n\n\u628a\u8fd9\u4e9b\u70b9\u5411\u62c6\u5b8c\u7684\u683c\u5b50\u8fde\u8fb9\u3002\n\n\u4ece\u6bcf\u4e00\u4e2a\u683c\u5b50\u7684$out$\u70b9\u5411\u4e0e\u8fd9\u4e2a\u683c\u5b50\u8054\u901a\u7684\u683c\u5b50\u7684$in$\u70b9\u8fde\u8fb9\u3002\n\n\u73b0\u5728\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u3002\u6211\u4eec\u7528$<a,b>$\u8fd9\u4e2a\u6570\u5bf9\u8868\u793a\u8d77\u59cb\u662f\u5426\u4e3a\u9ed1\uff0c\u76ee\u6807\u662f\u5426\u4e3a\u9ed1\u3002\n\n$<1,0>$\n\n![\u65e0\u6807\u9898](https://cdn.luogu.com.cn/upload/pic/60565.png)\n\n\u56fe\u4e2d\u84dd\u8272\u7684\u8fb9\u8868\u793a\u6c34\u6d41\u65b9\u5411\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\u8d77\u59cb\u72b6\u6001\u4e0b\u6709\u9ed1\u5b50\uff0c\u4f46\u662f\u76ee\u6807\u72b6\u6001\u6ca1\u6709\u9ed1\u5b50\uff0c\u6240\u4ee5$mid -> end$  \u8fd9\u6761\u8fb9\u6d41\u91cf\u4e3a0\u3002\n\n\u8fd9\u4e2a\u9ed1\u5b50\uff08\u4e5f\u53ef\u4ee5\u89c6\u4e3a\u6c34\u6d41\uff09\u5c31\u4f1a\u6d41\u5411$out$\uff0c\u5411\u4e0b\u4e00\u4e2a\u683c\u5b50\u7684$in$\u6d41\u53bb\u3002\n\n\n\n$<0,1>$\n\n![\u65e0\u6807\u9898](https://cdn.luogu.com.cn/upload/pic/60566.png)\n\n\u8d77\u59cb\u72b6\u6001\u6ca1\u6709\u9ed1\u5b50\u3002\u6ca1\u6709\u6d41\u91cf\u6d41\u5411mid\u3002\n\n\u4f46\u662f\u76ee\u6807\u72b6\u6001\u6709\u9ed1\u5b50\u3002\u6240\u4ee5\u53ea\u4f1a\u6709\u4ece\u4e0a\u4e00\u4e2a\u683c\u5b50\u8dd1\u8fc7\u6765\u7684\u68cb\u5b50\u6d41\u5411$end$\u3002$mid -> end$ \u6d41\u91cf\u4e3a1\u3002\n\n\n\n$<0,0>$\n\n\n\n![\u65e0\u6807\u9898](https://cdn.luogu.com.cn/upload/pic/60567.png)\n\n\u8fd9\u4e2a\u683c\u5b50\u53ea\u80fd\u5f53\u4e2d\u8f6c\u7ad9\u3002\n\n\n\n\n\n$<1,1>$\n\n![\u65e0\u6807\u9898](https://cdn.luogu.com.cn/upload/pic/60568.png)\n\n\u4e00\u901a\u72c2\u6d41\u5373\u53ef\u3002\n\n#### \u5c0f\u63d0\u95ee\n\n\u78b0\u5230$<1,1>$\u80fd\u4e0d\u80fd\u76f4\u63a5\u4e0d\u8fde\u5462\uff1f\n\n\n\n\u663e\u7136\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u8fd9\u4e2a\u70b9\u8fd8\u53ef\u4ee5\u5f53\u4e2d\u8f6c\u70b9\u3002\n\n------\n\n\u81f3\u6b64\uff0c\u8fde\u8fb9\u90e8\u5206\u5c31\u7ed3\u675f\u4e86\u3002\n\n\n\n\u7b49\u7b49\uff0c\u8fd8\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\uff01\n\n#### \u5c0f\u95ee\u9898\n\n$in -> mid$ \u4ee5\u53ca $mid -> out$ \u7684\u6d41\u91cf\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\u5c06$m_{i,j}$\u5747\u7b49\u5206\u914d\u5373\u53ef\u3002\n\n\u8fd9\u6837\u5b50\u8fd9\u9898\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\u7b49\u7b49\uff0c\u8fd8\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\uff01\n\n#### \u771f\u7684\u53ef\u4ee5\u8fc7\u5417\uff1f\n\n\\#1**AC**6ms/3364KB #2**AC**20ms/3376KB \\#3**AC**6ms/3356KB #4**WA** #5**WA** #6**WA** #7**WA** #8**WA**  #9**WA** #10**WA**\n\n\uff08\u6211\u4e0d\u4f1a\u7528\u7b14\u8bb0\u672c\u622a\u56fe\uff09\n\n\n\n\u5f53$m_{i,j}$\u662f\u5947\u6570\u7684\u65f6\u5019\uff0c\u4ea4\u6362\u6b21\u6570\u5c31\u4f1a\u83ab\u540d\u5176\u5999\u5730\u5c11\u6389\u4e00\u4e2a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u5c06\u8fd9\u4e00\u4e2a\u6d41\u91cf\u7ed9\u5230\u54ea\u91cc\u3002\u7ee7\u7eed\u5206\u7c7b\u8ba8\u8bba\u3002\n\n$<0,0>$\n\n\u7531\u4e8e\u8fd9\u4e2a\u70b9\u53ea\u80fd\u5f53\u4e2d\u8f6c\u7ad9\uff0c\u6240\u4ee5\u4e0d\u80fd\u5206\u914d\u8fd9\u4e00\u4e2a\u6d41\u91cf\u3002\u8981\u4fdd\u8bc1$in -> mid$\u4e0e$mid -> out$\u7684\u6d41\u91cf\u76f8\u540c\u3002\u8981\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u9ed1\u70b9\u6d41\u8fdb\u6765\u5374\u6d41\u4e0d\u51fa\u53bb\uff0c\u6216\u8005\u662f\u9ed1\u70b9\u6d41\u4e0d\u8fdb\u6765$mid -> out$\u5374\u83ab\u540d\u5176\u5999\u591a\u51fa\u6765\u4e00\u4e2a\u6d41\u91cf\u3002\n\n$<1,1>$\n\n\u540c\u4e0a\u3002\n\n$<1,0>$\n\n\u9664\u4e86\u5747\u5206\u7684\u4ea4\u6362\u6b21\u6570\u4e4b\u5916\uff0c\u6709\u4e00\u4e2a\u9ed1\u70b9\u9700\u8981\u6d41\u51fa\u53bb\u3002\u6240\u4ee5\u5206\u914d\u7ed9$mid -> out$\u8fd9\u6761\u8fb9\u3002\n\n$<0,1>$\n\n\u9664\u4e86\u5747\u5206\u7684\u4ea4\u6362\u6b21\u6570\u4e4b\u5916\uff0c\u6709\u4e00\u4e2a\u9ed1\u70b9\u8981\u6d41\u8fdb\u6765\u3002\u6240\u4ee5\u5206\u914d\u7ed9$in -> mid$\u8fd9\u6761\u8fb9\u3002\n\n\u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 3e5;\nconst int inf = 1e9;\n\nint cnt = 1, sum = 0, n, m, s = 1e4, t = s + 1, cost = 0, tmp = 0, dd = 0;\n\nstruct dt{\n    int to, val, w, next;\n}e[N];\n\nint dt[N], dep[N], cur[N], dis[N];\n\nchar beg[21][21], lst[21][21], f[21][21];\n\nbool vis[N];\n\nvoid add(int x, int y, int value, int wa){\n    cnt++;\n    e[cnt].to = y;\n    e[cnt].val = value;\n    e[cnt].w = wa;\n    e[cnt].next = dt[x];\n    dt[x] = cnt;\n    cnt++;\n    e[cnt].to = x;\n    e[cnt].val = 0;\n    e[cnt].w = -wa;\n    e[cnt].next = dt[y];\n    dt[y] = cnt;\n}\n\nbool /*SPFA*/dijstra(){\n    memset(vis, 0, sizeof(vis));\n    memset(dis, 0x3f, sizeof(dis));\n    for(int i = 0; i <= N; i++)cur[i] = dt[i];\n    queue<int> q;\n    q.push(s);\n    vis[s] = 1;\n    dis[s] = 0;\n    while(!q.empty()){\n        int u = q.front();\n        vis[u] = 0;\n        q.pop();\n        for(int i = dt[u]; i; i = e[i].next){\n            int v = e[i].to, w = e[i].w;\n            if(e[i].val > 0 && dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w;\n                //cout << v << \" \" << pre[v].fa << endl;\n                if(!vis[v]){\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n     \t}\n    }\n    return dis[t] < 0x3f3f3f3f;\n}\n\nint dfs(int now, int low){\n    if(now == t) return low;\n    int flow = 0;\n    vis[now] = 1;\n    for(int i = cur[now]; i; i = e[i].next){\n        cur[now] = i;\n        int v = e[i].to;\n        if(!vis[v] && e[i].val && dis[v] == dis[now] + e[i].w){\n            if(flow = dfs(v, min(low, e[i].val))){\n                e[i].val -= flow;\n                e[i ^ 1].val += flow;\n                cost += e[i].w * flow;\n                return flow;\n            }\n        }\n    }\n    return 0;\n}\n\nint dinic(){\n    int minflow, maxflow = 0;\n    while(dijstra()){\n        while(minflow = dfs(s, inf)){\n            memset(vis, 0, sizeof(vis));\n            maxflow += minflow;\n        }\n    }\n    return maxflow;\n}\n\nint begin(int i, int j){return (i - 1) * m + j;}\nint last(int i, int j){return n * m * 1 + (i - 1) * m + j;}\nint in(int i, int j){return n * m * 2 + (i - 1) * m + j;}\nint mid(int i, int j){return n * m * 3 + (i - 1) * m + j;}\nint out(int i, int j){return n * m * 4 + (i - 1) * m + j;}\n\nint x[8] = {0, 0, 1, -1, 1, 1, -1, -1}, y[8] = {1, -1, 0, 0, 1, -1, 1, -1};\n\nint main(){\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++){\n            char c;\n            cin >> c;\n            beg[i][j] = c - '0';\n        }\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++){\n            char c;\n            cin >> c;\n            lst[i][j] = c - '0';\n        }\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++){\n            char c;\n            cin >> c;\n            f[i][j] = c - '0';\n        }\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= m; j++){\n            if(beg[i][j] == lst[i][j]){\n                add(in(i, j), mid(i, j), f[i][j] >> 1, 0);\n                add(mid(i, j), out(i, j), f[i][j] >> 1, 0);\n            }\n            else{\n                if(beg[i][j] == 1){\n                    add(in(i, j), mid(i, j), f[i][j] >> 1, 0);\n                    add(mid(i, j), out(i, j), (f[i][j] + 1) >> 1, 0);\n                }\n                if(lst[i][j] == 1){\n                    add(in(i, j), mid(i, j), (f[i][j] + 1) >> 1, 0);\n                    add(mid(i, j), out(i, j), f[i][j] >> 1, 0);\n                }\n            }\n            \n            if(beg[i][j] == 1){\n\t\t\t\ttmp++;\n                add(s, begin(i, j), 1, 0);\n                add(begin(i, j), mid(i, j), 1, 0);\n            }\n            if(lst[i][j] == 1){\n\t\t\t\tdd++;\n                add(last(i, j), t, 1, 0);\n                add(mid(i, j), last(i, j), 1, 0);\n            }\n\t\t\tfor(int k = 0; k < 8; k++){\n            \tint xx = i + x[k], yy = j + y[k];\n            \tif(xx < 1 || xx > n || yy < 1 || yy > m) continue;\n            \tadd(out(i, j), in(xx, yy), inf, 1);\n        \t}\n        }\n    }\n    if(tmp != dinic()) cout << -1 << endl;\n    else cout << cost << endl;\n}\n```\n\n\n\n",
        "postTime": 1560162420,
        "uid": 34239,
        "name": "ironwheel",
        "ccfLevel": 6,
        "title": "\u3010Luogu P3159\u3011[CQOI2012] \u4ea4\u6362\u68cb\u5b50 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9898\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\u641c\uff0c\u7136\u800c\u72b6\u6001\u6570\u592a\u591a\u4e86\uff0c\u6839\u672c\u8fc7\u4e0d\u4e86\u3002\n\n\u7b2c\u4e8c\u53cd\u5e94\u662f\u80fd\u4e0d\u80fd\u94a6\u5b9a\u4e00\u4e9b\u70b9\u7684\u76ee\u6807\u70b9\u7136\u540edp\uff0c\u7136\u800c\u4e0d\u80fd\u94a6\u5b9a\u554a\uff0c\u56e0\u4e3a\u6839\u672c\u6ca1\u6cd5\u6c42\u54ea\u4e2a\u548c\u54ea\u4e2a\u5339\u914d\u3002\n\n\u7136\u540e\u7a81\u7136\u53d1\u73b0\u4e00\u4e2a\u9053\u7406\u5c31\u662f\u4efb\u4f55\u4e24\u4e2a\u68cb\u5b50\u5728\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u8def\u5f84\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u56e0\u4e3a\u76f8\u4ea4\u7684\u8bdd\u80af\u5b9a\u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a\u68cb\u5b50\u7684\u540e\u534a\u6bb5\u8def\u5f84\u4f7f\u5f97\u4e0d\u76f8\u4ea4\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u68cb\u5b50\u7684\u79fb\u52a8\u90fd\u662f\u72ec\u7acb\u7684\u4e86\uff0c\u53ea\u8981\u6ee1\u8db3\u4ea4\u6362\u9650\u5236\u5c31\u884c\u4e86\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u60f3\u5230\u7f51\u7edc\u6d41\u3002\n\n\u62c6\u70b9\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u662f\u51b7\u9759\u601d\u8003\u4e00\u4e0b\u53d1\u73b0\u53ea\u62c6\u4e24\u4e2a\u70b9\u597d\u50cf\u975e\u5e38\u96be\u505a\uff0c\u53cd\u6b63\u6211\u592a\u83dc\u4e86\u4e0d\u4f1a\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62c6\u6210\u4e09\u4e2a\u70b9\uff0c\u6211\u4eec\u628a\u68cb\u5b50\u7684\u79fb\u52a8\u770b\u6210\u9ed1\u68cb\u5b50\u5728\u8d70\uff0c\u90a3\u4e48\u9ed1\u68cb\u5b50\u4ecea\u8d70\u5230b\uff0c\u6211\u4eec\u5c31\u79f0a\u4ea4\u6362\u4e86b\uff0cb\u88aba\u4ea4\u6362\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u9ed1\u68cb\u5b50\uff0c\u5b83\u7684\u8d77\u70b9\u53ea\u4f1a\u4ea4\u6362\u522b\u4eba\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u9ed1\u68cb\u5b50\uff0c\u5b83\u7684\u7ec8\u70b9\u53ea\u4f1a\u88ab\u4ea4\u6362\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4e09\u4e2a\u70b9\u4e32\u8d77\u6765\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u5f00\u59cb\u662f\u9ed1\u8272\u5c31\u4ece\u6e90\u70b9\u8fde\u8fb9\u5230\u4e2d\u95f4\u70b9\uff0c\u7ed3\u675f\u662f\u9ed1\u8272\u5c31\u4ece\u4e2d\u95f4\u70b9\u8fde\u8fb9\u5230\u6c47\u70b9\uff0c\u4e00\u4e2a\u70b9\u7684\u53f3\u70b9\u548c\u522b\u7684\u53ef\u8fbe\u70b9\u7684\u5de6\u70b9\u8fde\u8fb9\uff0c\u8d70\u53f3\u8fb9\u8868\u793a\u4ea4\u6362\u4e86\u522b\u4eba\uff0c\u8d70\u5de6\u8fb9\u8868\u793a\u88ab\u4ea4\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u9700\u8981\u601d\u8003\u7684\u662f\u6d41\u91cf\u7684\u5206\u914d\u3002\u8d39\u7528\u4e0d\u7528\u591a\u8bf4\uff0c\u4e24\u4e2a\u4e0d\u540c\u683c\u5b50\u4e4b\u95f4\u7684\u8fde\u8fb9\u8d39\u7528\u4e3a1\u522b\u7684\u90fd\u662f0\u5c31\u884c\u4e86\uff0c\u6d41\u91cf\u7684\u8bdd\u5982\u679c\u5b83\u4e0d\u662f\u8d77\u59cb\u70b9\u4e5f\u4e0d\u662f\u7ed3\u675f\u70b9\u5c31\u7ed9\u4e24\u4e2a\u8fb9\u5747\u644a\uff0c\u5947\u6570\u5269\u4e0b\u76841\u4e0d\u7528\u7ba1\uff0c\u662f\u8d77\u59cb\u70b9\u7684\u8bdd\u5269\u4e0b\u76841\u7ed9\u53f3\u8fb9\uff0c\u662f\u7ed3\u675f\u70b9\u7684\u8bdd\u5269\u4e0b\u76841\u7ed9\u5de6\u8fb9\u3002\n\n\u603b\u7ed3\u5982\u4e0b\uff1a\n\nS\u5411\u6240\u6709\u8d77\u59cb\u683c\u5b50\u4e2d\u95f4\u70b9\u8fde(1,0)\u7684\u8fb9\uff1b\n\n\u6240\u6709\u7ed3\u675f\u683c\u5b50\u4e2d\u95f4\u70b9\u5411T\u8fde(1,0)\u7684\u8fb9\uff1b\n\n\u6bcf\u4e2a\u683c\u5b50\u5de6\u70b9\u5411\u4e2d\u95f4\u70b9\uff0c\u4e2d\u95f4\u70b9\u5411\u53f3\u70b9\u8fde(a,0)\u7684\u8fb9\uff0c\u6ce8\u610f\u5947\u6570\u65f6\u8d77\u59cb\u70b9\u7ed3\u675f\u70b9\u591a\u5206\u914d\u7684\u6d41\u91cf\uff1b\n\n\u6bcf\u4e2a\u683c\u5b50\u7684\u53f3\u70b9\u5411\u516b\u8fde\u901a\u7684\u683c\u5b50\u7684\u5de6\u70b9\u8fde(inf,1)\u7684\u8fb9\uff1b\n\n\u5982\u679c\u672a\u80fd\u6ee1\u6d41\uff0c\u5219\u65e0\u89e3\uff0c\u5426\u5219\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 1500\n#define can (x>=1&&y>=1&&x<=n&&y<=m)\n#define F(i,a,b) for(int i=a;i<=b;i++)\nint n,m,x,y,h,f,g[25][25][3],tot=1,cnt,he[N],ne[N*100],to[N*100],v[N*100],c[N*100],dis[N],inq[N],mxf[N],pre[N];\nint X[]={-1,-1,-1,0,0,1,1,1},Y[]={-1,0,1,-1,1,-1,0,1};\nchar s[25][25],t[25][25],a[25][25];\nvoid add(int x,int y,int z,int f)\n{\n    to[cnt]=y;ne[cnt]=he[x];v[cnt]=z;c[cnt]=f;he[x]=cnt++;\n    to[cnt]=x;ne[cnt]=he[y];v[cnt]=0;c[cnt]=-f;he[y]=cnt++;\n}\nint bfs(int S,int T)\n{\n    memset(dis,0x3f,sizeof(dis));memset(inq,0,sizeof(inq));\n    dis[S]=0;inq[S]=1;mxf[S]=2e9;queue<int>q;q.push(S);\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();inq[x]=0;\n        for(int i=he[x],y;~i;i=ne[i]) if(dis[y=to[i]]>dis[x]+c[i]&&v[i])\n        {\n            dis[y]=dis[x]+c[i];mxf[y]=min(mxf[x],v[i]);pre[y]=i;\n            if(!inq[y]) inq[y]=1,q.push(y);\n        }\n    }\n    return dis[T]<1e9;\n}\nint mcmf(int S,int T)\n{\n    int g=0,f=0;\n    for(;bfs(S,T);g+=dis[T]*mxf[T],f+=mxf[T]) for(int x=T,i;x!=S;x=to[i^1]) i=pre[x],v[i]-=mxf[T],v[i^1]+=mxf[T];\n    return f<h?-1:g;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);memset(he,-1,sizeof(he));\n    F(i,1,n) scanf(\"%s\",s[i]+1);\n    F(i,1,n) scanf(\"%s\",t[i]+1);\n    F(i,1,n) scanf(\"%s\",a[i]+1);\n    F(i,1,n) F(j,1,m) if(s[i][j]=='1'&&t[i][j]=='1') s[i][j]=t[i][j]='0';\n    F(i,1,n) F(j,1,m) F(k,0,2) g[i][j][k]=++tot;\n    F(i,1,n) F(j,1,m) if(s[i][j]=='1') add(0,g[i][j][1],1,0),h++;\n    F(i,1,n) F(j,1,m) if(t[i][j]=='1') add(g[i][j][1],1,1,0);\n    F(i,1,n) F(j,1,m) add(g[i][j][0],g[i][j][1],(a[i][j]-'0')/2,0);\n    F(i,1,n) F(j,1,m) add(g[i][j][1],g[i][j][2],(a[i][j]-'0')/2,0);\n    F(i,1,n) F(j,1,m) if(s[i][j]=='1'&&(a[i][j]-'0')&1) add(g[i][j][1],g[i][j][2],1,0);\n    F(i,1,n) F(j,1,m) if(t[i][j]=='1'&&(a[i][j]-'0')&1) add(g[i][j][0],g[i][j][1],1,0);\n    F(i,1,n) F(j,1,m) F(k,0,7) {x=i+X[k],y=j+Y[k];if(can) add(g[i][j][2],g[x][y][0],1e9,1);}\n    printf(\"%d\\n\",mcmf(0,1));\n}\n```",
        "postTime": 1551423424,
        "uid": 70545,
        "name": "Awar3ness",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "\u6c42\u68cb\u76d8\u4e0a\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u72b6\u6001\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\uff0c\u8003\u8651\u8d39\u7528\u6d41\u3002\n\n\u56e0\u4e3a\u4efb\u610f\u4e24\u4e2a\u68cb\u5b50\u4ea4\u6362\u8981\u6d88\u8017\u4e24\u6b21\u4ea4\u6362\u6b21\u6570(\u4e24\u4e2a\u683c\u5b50\u4e00\u6b21)\uff0c\u6240\u4ee5\u8003\u8651\u62c6\u70b9\u3002\n\n\u4f46\u5982\u679c\u50cf\u5e73\u5e38\u62c6\u70b9\u90a3\u6837\u5c06\u6bcf\u4e2a\u70b9\u62c6\u4e3a\u5165\u70b9\u548c\u51fa\u70b9\u4e5f\u6709\u95ee\u9898\u3002\n\n\u56e0\u4e3a\u5728\u4e00\u6b21\u8fde\u7eed\u7684\u4ea4\u6362\u4e2d\uff0c\u8def\u5f84\u4e0a\u7684\u5e76\u975e\u6bcf\u4e2a\u683c\u5b50\u90fd\u6d88\u8017\u4e86\u4e24\u6b21\u4ea4\u6362\u673a\u4f1a\u3002\n\n\u5de6\u53f3\u7aef\u70b9\u4e00\u4e2a\u6362\u51fa\u53bb\u4e00\u6b21\uff0c\u4e00\u4e2a\u6362\u8fdb\u6765\u4e00\u6b21\uff0c\u4e2d\u95f4\u7684\u8fdb\u6765\u51fa\u53bb\u5404\u4e00\u6b21\u3002\n\n\u4ece\u521d\u6001\u548c\u672b\u6001\u6765\u770b\uff0c\u70b9\u7684\u8f6c\u79fb\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a(\u5047\u5b9a\u8f6c\u79fb\u9ed1\u8272)\n\n\u2460\u521d\u6001\u662f\u9ed1\u8272\uff0c\u672b\u6001\u662f\u767d\u8272\uff0c\u4ea4\u6362\u51fa\u53bb\u6bd4\u4ea4\u6362\u8fdb\u6765\u7684\u6b21\u6570\u8981\u591a\u4e00\u3002\n\n\u2461\u521d\u6001\u662f\u767d\u8272\uff0c\u672b\u6001\u662f\u9ed1\u8272\uff0c\u4ea4\u6362\u8fdb\u6765\u6bd4\u4ea4\u6362\u51fa\u53bb\u7684\u6b21\u6570\u8981\u591a\u4e00\u3002\n\n\u2462\u51fa\u6001\u672b\u6001\u540c\u8272\uff0c\u4ea4\u6362\u8fdb\u6765\u4e0e\u51fa\u53bb\u7684\u6b21\u6570\u76f8\u540c(\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e2d\u7ee7\u7ad9)\u3002\n\n\n\n\u6240\u4ee5\u8003\u8651\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e09\u4e2a\uff1a\u5165\u70b9\uff0c\u4e2d\u70b9\uff0c\u51fa\u70b9\u3002\n\n\u5efa\u56fe\u6d41\u7a0b\uff1a\n\n$S=>mid$(\u521d\u6001\u9ed1\u8272) $f=1$\uff0c$w=0$\n\n$mid$(\u672b\u6001\u9ed1\u8272)$=>T$  $f=1$\uff0c$w=0$\n\n\u68cb\u76d8\u5185\u90e8\u516b\u8054\u901a $out=>in$ $f=INF$\uff0c$w=1$\n\n$\u6bcf\u4e2a\u70b9\u5185\u90e8\u8fde\u63a5$in=>mid=>out$ $w=0$\uff0c\u6839\u636e\u521d\u672b\u6001\u60c5\u51b5\u51b3\u5b9a\u5bb9\u91cf\u662f$(xx+1)/2$\u8fd8\u662f$xx/2$\n\n\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5\u5904\u7406\u4e24\u7aef\u7684\u8fb9\u754c\u60c5\u51b5\u52d2?\n\n\u56e0\u4e3a$s$\u548c$t$\u90fd\u662f\u8fde\u63a5\u70b9\u7684$mid$\u90e8\u5206\uff0c\u5728\u6bcf\u4e00\u6b21\u8fde\u7eed\u4ea4\u6362\u4e2d\uff1a\n\n\u8d77\u70b9\u662f\u9ed1\u8272\uff0c\u53ea\u4f1a\u6362\u51fa\u53bb\u4e00\u6b21$mid=>out$\n\n\u7ec8\u70b9\u662f\u767d\u8272\uff0c\u53ea\u4f1a\u6362\u8fdb\u6765\u4e00\u6b21$in=>mid$\n\n\u4e2d\u95f4\u70b9\u8fdb\u53bb\u4e00\u6b21\u51fa\u6765\u4e00\u6b21$in=>mid=>out$\n\n\u6b63\u597d\u6ee1\u8db3\u8981\u6c42\u3002\n\n\n\n\u6ce8\u610f\u5728\u5224\u65ad\u662f\u5426\u6709\u89e3\u7684\u65f6\u5019\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5:\n\n\u2460\u521d\u6001\u9ed1\u68cb\u5b50\u6570\u91cf\u4e0e\u672b\u6001\u9ed1\u68cb\u5b50\u6570\u91cf\u4e0d\u7b49\uff0c\u663e\u7136\u65e0\u89e3\u3002\n\n\u2461\u6700\u5927\u6d41\u6d41\u91cf\u4e0e\u9ed1\u68cb\u6570\u91cf\u4e0d\u7b49\uff0c\u65e0\u89e3\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1000005\n#define inf 0x3f3f3f3f\nusing namespace std;\nint n,m;\nint s,t;\nstruct data{\n    int to;\n    int p;\n    int val;\n    int nextt;\n}line[maxn];\nint first[maxn];\nint tail=1;\nvoid add(int x,int y,int w,int c){\n    tail++;\n    line[tail].to=y;\n    line[tail].p=w;\n    line[tail].val=c;\n    line[tail].nextt=first[x];\n    first[x]=tail;\n    swap(x,y);\n    tail++;\n    line[tail].to=y;\n    line[tail].val=-c;\n    line[tail].nextt=first[x];\n    first[x]=tail;\n}\nint dist[maxn];\nint inqueue[maxn];\nint pre_node[maxn];\nint pre_edge[maxn];\nqueue<int> q;\nbool SPFA(){\n    while(!q.empty()) q.pop(); \n    memset(dist,0x3f,sizeof(dist));\n    memset(inqueue,0,sizeof(inqueue));\n    dist[s]=0;\n    inqueue[s]=1;\n    q.push(s);\n    while(!q.empty()){\n        int x=q.front();\n        inqueue[x]=0;\n        q.pop();\n        for(int i=first[x];i;i=line[i].nextt){\n            int y=line[i].to;\n            int w=line[i].p;\n            int c=line[i].val;\n            if(w&&dist[y]>dist[x]+c){\n                dist[y]=dist[x]+c;\n                pre_node[y]=x;\n                pre_edge[y]=i;\n                if(inqueue[y]==0){\n                    inqueue[y]=1;\n                    q.push(y);\t\n                }\n            }\n        }\n    }\n    return dist[t]!=inf;\n}\nint tot1,tot2; \nint EK(){\n    int ansf=0,ansc=0;\n    while(SPFA()){\n        int flow=inf;\n        for(int i=t;i!=s;i=pre_node[i]){\n            flow=min(flow,line[pre_edge[i]].p);\n        }\n        for(int i=t;i!=s;i=pre_node[i]){\n            line[pre_edge[i]].p-=flow;\n            line[pre_edge[i]^1].p+=flow;\n        }\n        ansf+=flow;\n        ansc+=flow*dist[t];\n    }\n    return ansf==tot2?ansc:-1;\n}\nint pos(int k,int x,int y){\n    return (k-1)*n*m+(x-1)*m+y;\n}\nint dx[9]={0,-1,-1,-1,0,0,1,1,1};\nint dy[9]={0,-1,0,1,-1,1,-1,0,1};\nint to[100][100];\nint from[100][100];\nchar x;\nint main(){\n\tcin>>n>>m;\n\ts=3*n*m+1;t=s+1;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            for(int k=1;k<=8;k++){\n                int ti=i+dx[k];\n\t\t\t\tint tj=j+dy[k];\n                if(ti<1||ti>n||tj<1||tj>m) continue;\n                add(pos(3,i,j),pos(1,ti,tj),inf,1);\n            }\n        }\n    }\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>x; from[i][j]=x-'0';\n\t\t\tif(from[i][j]) tot1++,add(s,pos(2,i,j),1,0);\t\t\t\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>x; to[i][j]=x-'0';\n\t\t\tif(to[i][j]) tot2++,add(pos(2,i,j),t,1,0);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>x; int xx=x-'0';\n\t\t\tif(from[i][j]&&!to[i][j]){\n\t\t\t\tadd(pos(1,i,j),pos(2,i,j),xx/2,0);\t\n\t\t\t\tadd(pos(2,i,j),pos(3,i,j),(xx+1)/2,0);\n\t\t\t}\n\t\t\tif(!from[i][j]&&to[i][j]){\n\t\t\t\tadd(pos(1,i,j),pos(2,i,j),(xx+1)/2,0);\t\n\t\t\t\tadd(pos(2,i,j),pos(3,i,j),xx/2,0);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tadd(pos(1,i,j),pos(2,i,j),xx/2,0);\t\n\t\t\t\tadd(pos(2,i,j),pos(3,i,j),xx/2,0);\n\t\t\t}\n\t\t}\n\t}\n\tif(tot1!=tot2) puts(\"-1\");\n\telse cout<<EK()<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1561279875,
        "uid": 111095,
        "name": "Epworth",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    },
    {
        "content": "\u9996\u5148\u5224\u6389\u8d77\u59cb\u72b6\u6001\u548c\u76ee\u6807\u72b6\u6001\u9ed1\u8272\u68cb\u5b50\u4e0d\u7b49\u7684\u60c5\u51b5\uff08\u65e0\u89e3\uff09\uff0c\u4e0b\u9762\u9ed8\u8ba4\u4e24\u79cd\u72b6\u6001\u9ed1\u8272\u68cb\u5b50\u76f8\u7b49\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ea4\u6362\u4e24\u4e2a\u540c\u8272\u68cb\u5b50\u662f\u6beb\u65e0\u610f\u4e49\u7684\uff0c\u4ea4\u6362\u4e24\u4e2a\u5f02\u8272\u683c\u5b50\uff0c\u76f8\u5f53\u4e8e\u628a\u9ed1\u8272\u683c\u5b50\u79fb\u52a8\u4e86\u4e00\u6b65\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fd9\u4e2a\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e9b\u9ed1\u8272\u68cb\u5b50\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u518d\u7ed9\u5b9a\u4e00\u4e9b\u76ee\u6807\u4f4d\u7f6e\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u5c06\u4e00\u4e2a\u9ed1\u8272\u68cb\u5b50\u5411\u76f8\u90bb\u7684\u683c\u5b50\u79fb\u52a8\uff0c\u5728\u6ee1\u8db3\u9650\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u79fb\u52a8\u624d\u80fd\u4f7f\u5f97\u6240\u6709\u7ec8\u6b62\u4f4d\u7f6e\u4e0a\u90fd\u6709\u4e00\u4e2a\u9ed1\u8272\u68cb\u5b50\u4e14\u79fb\u52a8\u6b21\u6570\u6700\u5c11\uff1f\n\n\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u79fb\u52a8\u65b9\u6848\uff0c\u90fd\u53ef\u4ee5\u8c03\u6574\u79fb\u52a8\u987a\u5e8f\u4f7f\u5f97\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\u68cb\u5b50\u4e0d\u4f1a\u91cd\u53e0\uff0c**\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u68cb\u5b50\u7684\u79fb\u52a8\u662f\u72ec\u7acb\u7684**\u3002\u6240\u4ee5\u8fd9\u4e2a\u6a21\u578b\u53ef\u4ee5\u8f6c\u5316\u4e3a\u8d39\u7528\u6d41\uff1a\u5efa\u7acb\u6e90\u70b9\u6c47\u70b9\uff0c\u5c06\u6bcf\u4e2a\u683c\u5b50\u770b\u505a\u4e00\u4e2a\u70b9\u3002\u8003\u8651\u6240\u6709\u683c\u5b50\uff0c\u5982\u679c\u521d\u59cb\u548c\u76ee\u6807\u72b6\u6001\u7684\u68cb\u5b50\u989c\u8272\u76f8\u540c\uff0c\u5c31\u4e0d\u8003\u8651\u5b83\u3002\u5982\u679c\u521d\u59cb\u4e3a\u9ed1\uff08\u610f\u5473\u7740\u76ee\u6807\u4e3a\u767d\uff09\uff0c\u4ece\u6e90\u70b9\u5411\u8fd9\u4e2a\u683c\u5b50\u8fde\u8fb9\uff1b\u5982\u679c\u521d\u59cb\u4e3a\u767d\uff08\u610f\u5473\u7740\u76ee\u6807\u4e3a\u9ed1\uff09\uff0c\u4ece\u8fd9\u4e2a\u683c\u5b50\u8fde\u8fb9\u5411\u6c47\u70b9\u8fde\u8fb9\u3002\n\n\u7136\u540e\u5c31\u662f\u76f8\u90bb\u7684\u683c\u5b50\u76f4\u63a5\u8fde\u8fb9\uff0c\u8d39\u7528\u8bbe\u7f6e\u4e3a 11\u3002\u91cd\u8981\u7684\u662f\u5982\u4f55\u7528\u6d41\u91cf\u8868\u793a\u9650\u5236\uff0c\u5c06\u4e00\u4e2a\u683c\u5b50\u4ee3\u8868\u7684\u70b9\u62c6\u4e3a 2 \u4e2a\uff08\u4e00\u4e2a\u8d1f\u8d23\u8fde\u5165\u8fb9\uff0c\u4e00\u4e2a\u8d1f\u8d23\u8fde\u51fa\u8fb9\uff09\uff0c\u6211\u4eec\u8003\u8651\u62c6\u51fa\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6d41\u91cf\u9650\u5236 c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u683c\u5b50\uff0c\u9898\u76ee\u9650\u5236\u7684\u662f\u300c\u53c2\u4e0e\u4ea4\u6362\u7684\u6b21\u6570 m_{i, j}\u300d\uff0c\u800c\u6211\u4eec\u8fd9\u4e2a\u62c6\u7684\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6d41\u91cf\u4ee3\u8868\u7684\u662f\u300c\u7ecf\u8fc7\u7684\u6b21\u6570\u300d\u3002\u7531\u4e8e\u4e00\u6b21\u4ea4\u6362\u6709\u4e24\u4e2a\u70b9\u53c2\u4e0e\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6d41\u91cf\u4e0d\u80fd c \u5355\u7684\u8bbe\u7f6e\u4e3a m_{i, j}\uff0c\u9700\u8981\u5206\u6790\u6027\u8d28\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u7528\u4ea4\u6362\u5b9e\u73b0\u9ed1\u68cb\u5b50\u7684\u79fb\u52a8\uff1a v_1-> v_2->...->v_k \uff0c\u76f8\u90bb\u4e24\u4e2a\u683c\u5b50\u90fd\u8981\u4ea4\u6362\u4e00\u6b21\u3002\u5176\u4e2d v_1\u548c v_k \u53ea\u88ab\u4ea4\u6362\u4e86 1\u6b21\uff0c\u5176\u4f59\u7684\u90fd\u88ab\u4ea4\u6362\u4e86 2\u6b21\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u4f5c\u4e3a\u8d77\u70b9\u6216\u8005\u7ec8\u70b9\uff08\u5c31\u662f\u5411\u6e90\u70b9\u6216\u8005\u6c47\u70b9\u8fde\u4e86\u8fb9\uff09\uff0c\u5b83\u4f1a\u88ab\u4ea4\u6362\u5947\u6570\u6b21\uff0c\u5426\u5219\u5b83\u88ab\u4ea4\u6362\u5076\u6570\u6b21\u3002\u8003\u8651\u300c\u53c2\u4e0e\u4ea4\u6362\u7684\u6b21\u6570\u300d\u4e0e\u300c\u7ecf\u8fc7\u7684\u6b21\u6570\u300d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5bf9\u4e8e\u975e\u8d77\u70b9\u975e\u7ec8\u70b9\u7684\u683c\u5b50\uff0c\u300c\u53c2\u4e0e\u4ea4\u6362\u7684\u6b21\u6570\u300d= 2 *\u300c\u7ecf\u8fc7\u7684\u6b21\u6570\u300d\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u8fd9\u79cd\u70b9\u9650\u5236\u7ecf\u8fc7 \\lfloor \\frac {m_{i, j}}2\\rfloor \u6b21\u3002\u5bf9\u4e8e\u8d77\u70b9\u6216\u8005\u7ec8\u70b9\uff0c\u300c\u53c2\u4e0e\u4ea4\u6362\u7684\u6b21\u6570\u300d = 2 * \u300c\u7ecf\u8fc7\u7684\u6b21\u6570\u300d - 1\uff0c**\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u8fd9\u79cd\u70b9\u9650\u5236\u7ecf\u8fc7 \\lfloor \\frac {m_{i, j}} 2 + 1\\rfloor\u6b21\u5373\u53ef\u3002**   \n\n\u8dd1**\u6700\u5c0f\u8d39\u7528\u6d41**\uff0c\u6ee1\u6d41\u5219\u6709\u89e3\uff0c\u5426\u5219\u65e0\u89e3\u3002\u7531\u4e8e\u4e00\u6b21\u79fb\u52a8\u5bf9\u5e94\u4e00\u6b21\u4ea4\u6362\uff0c\u6240\u4ee5\u6700\u5c0f\u8d39\u7528\u5373\u4e3a\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ninline int readInt() {\n\tstatic int n, ch;\n\tn = 0, ch = getchar();\n\twhile (!isdigit(ch)) ch = getchar();\n\twhile (isdigit(ch)) n = n * 10 + ch - '0', ch = getchar();\n\treturn n;\n}\nconst int MAX_N = 20 + 3, MAX_M = 20 + 3, INF = 0x3f3f3f3f;\nnamespace MinCostMaxFlow {\n\tconst int MAX_NODE = MAX_N * MAX_M * 2 + 2;\n\tstruct edge {\n\t\tint to, cost, cap, rev;\n\t\tedge(int to, int cost, int cap, int rev): to(to), cost(cost), cap(cap),\n\t\trev(rev) {}\n\t};\n\tvector<edge> G[MAX_NODE];\n\tinline void addEdge(int f, int t, int cap, int cost) {\n\tG[f].push_back(edge(t, cost, cap, G[t].size()));\n\tG[t].push_back(edge(f, -cost, 0, G[f].size() - 1));\n\t}\n\tint dis[MAX_NODE], preve[MAX_NODE], prevv[MAX_NODE];\n\tbool inq[MAX_NODE];\n\tint minCostMaxFlow(int s, int t, int flow) {\n\t\tint ans = 0;\n\t\twhile (flow) {\n\t\t\tqueue<int> q;\n\t\t\tmemset(dis, 0x3f, sizeof dis);\n\t\t\tmemset(inq, 0, sizeof inq);\n\t\t\tq.push(s), dis[s] = 0;\n\t\t\t\twhile (!q.empty()) {\n\t\t\t\tint u = q.front(); q.pop();\n\t\t\t\tinq[u] = false;\n\t\t\t\tfor (int i = 0; i < (int)G[u].size(); ++i) {\n\t\t\t\t\tedge &e = G[u][i];\n\t\t\t\t\tif (e.cap && e.cost + dis[u] < dis[e.to]) {\n\t\t\t\t\t\tdis[e.to] = dis[u] + e.cost;\n\t\t\t\t\t\tprevv[e.to] = u, preve[e.to] = i;\n\t\t\t\t\t\tif (!inq[e.to]) q.push(e.to), inq[e.to] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dis[t] == INF) return -1;\n\t\t\tint d = flow;\n\t\t\tfor (int u = t; u != s; u = prevv[u]) d = min(d, G[prevv[u]][preve[u]].cap);\n\t\t\tans += d * dis[t], flow -= d;\n\t\t\tfor (int u = t; u != s; u = prevv[u]) {\n\t\t\t\tedge &e = G[prevv[u]][preve[u]];\n\t\t\t\te.cap -= d;\n\t\t\t\tG[e.to][e.rev].cap += d;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\nusing namespace MinCostMaxFlow;\nint n, m;\nchar A[MAX_N][MAX_N], B[MAX_N][MAX_M], C[MAX_N][MAX_M];\n#define ID(i, j) ((i) * m + (j))\ninline bool check(int x, int y) {\n\treturn x >= 0 && x < n && y >= 0 && y < m;\n}\nint main() {\n\t#ifdef DEBUG\n\tfreopen(\"test.in\", \"r\", stdin);\n\t#endif\n\tn = readInt(), m = readInt();\n\tfor (int i = 0; i < n; ++i) scanf(\"%s\", A[i]);\n\tfor (int i = 0; i < n; ++i) scanf(\"%s\", B[i]);\n\tfor (int i = 0; i < n; ++i) scanf(\"%s\", C[i]);\n\tint S = n * m * 2, T = n * m * 2 + 1, c = 0, cnt = 0;\n\tfor (int i = 0; i < n; ++i)\n\t\tfor (int j = 0; j < m; ++j) {\n\t\t\tif (A[i][j] == '1') ++c;\n\t\t\tif (B[i][j] == '1') --c;\n\t\t\tif (A[i][j] == B[i][j]) addEdge(ID(i, j) * 2, ID(i, j) * 2 + 1,\n\t\t\t(C[i][j] - '0') / 2, 0);\n\t\t\telse addEdge(ID(i, j) * 2, ID(i, j) * 2 + 1, (C[i][j] - '0' + 1) /2, 0);\n\t\t\tfor (int k = 0; k < 8; ++k) {\n\t\t\t\tstatic const int dx[] = {0, 0, 1, 1, 1, -1, -1, -1}, dy[] = {1,-1, 0, 1, -1, 0, 1, -1};\n\t\t\t\tint x = i + dx[k], y = j + dy[k];\n\t\t\t\tif (check(x, y)) addEdge(ID(i, j) * 2 + 1, ID(x, y) * 2, INF,1);\n\t\t\t}\n\t\t}\n\tfor (int i = 0; i < n; ++i)\n\tfor (int j = 0; j < m; ++j)\n\tif (A[i][j] == '1' && B[i][j] == '0') addEdge(S, ID(i, j) * 2, 1,\n\t0), ++cnt;\n\tfor (int i = 0; i < n; ++i)\n\tfor (int j = 0; j < m; ++j)\n\tif (B[i][j] == '1' && A[i][j] == '0') addEdge(ID(i, j) * 2 + 1, T,1, 0);\n\tif (c != 0) puts(\"-1\");\n\telse printf(\"%d\\n\", minCostMaxFlow(S, T, cnt));\n\treturn 0;\n}\n```\n",
        "postTime": 1593076523,
        "uid": 324858,
        "name": "\u26a1114514_zzm\u26a1",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3159 \u3010[CQOI2012]\u4ea4\u6362\u68cb\u5b50\u3011"
    }
]