[
    {
        "content": "# [POI2010]Divine Divisor\n## \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u4f60$m(m\\le600)$\u4e2a\u6570$a_i(a_i\\le10^{18})$\u3002$n=\\prod a_i$\u3002\u73b0\u5728\u8981\u4f60\u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684$k$\u4f7f\u5f97$\\exists d\\ne1,d^k|n$\uff0c\u5e76\u6c42\u51fa\u6709\u591a\u5c11$d$\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u3002\n\n## \u601d\u8def\uff1a\n\u9996\u5148\u7ebf\u6027\u7b5b\u9884\u5904\u7406\u51fa$10^6$\u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570\uff0c\u7528\u8fd9\u4e9b\u8d28\u6570\u9664$a_i$\uff0c\u5269\u4e0b\u7684$a_i$\u5206\u4e3a\u4ee5\u4e0b$4$\u79cd\u60c5\u51b5\uff1a\n1. $a_i=1$\uff0c\u8868\u793a$a_i$\u7684\u6240\u6709\u7d20\u6570\u5747\u88ab\u627e\u51fa\u3002\n2. $a_i=p^2$\uff0c\u53ef\u4ee5\u5224\u65ad$\\lfloor\\sqrt{a_i}\\rfloor$\u662f\u5426\u7b49\u4e8e$\\lceil\\sqrt{a_i}\\rceil$\uff0c\u662f\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u662f\u4e24\u4e2a$>10^6$\u7684\u8d28\u6570\u5e73\u65b9\u3002\n3. $a_i=p$\uff0c\u53ef\u4ee5\u4f7f\u7528Miller-Rabin\u7b97\u6cd5\u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570\u3002\n4. $a_i=pq$\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684\u6570\uff0c\u53ef\u4ee5\u4e0e\u5176\u5b83\u6240\u6709\u6570\u6c42\u4e00\u904d$\\gcd$\u3002\u82e5$\\gcd\\ne1$\u5c31\u8bf4\u660e\u6211\u4eec\u6210\u529f\u5206\u89e3\u4e86\u5b83\u7684\u8d28\u56e0\u6570\u3002\u5426\u5219\u867d\u7136\u6211\u4eec\u4e0d\u80fd\u77e5\u9053\u5b83\u7684\u8d28\u56e0\u6570\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5b83\u4e0e\u5176\u5b83\u6570\u6ca1\u6709\u5171\u540c\u7684\u8d28\u56e0\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u800c\u4e0d\u9700\u8981\u5173\u5fc3\u5176\u5177\u4f53\u6570\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8d28\u6570\uff0c\u6211\u4eec\u7edf\u8ba1\u5176\u51fa\u73b0\u6b21\u6570$cnt[i]$\u3002\u7b2c\u4e00\u4e2a\u7b54\u6848\u5c31\u662f$\\max\\{cnt[i]\\}$\u3002\u82e5\u6709$k$\u4e2a\u8d28\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4e3a$\\max\\{cnt[i]\\}$\uff0c\u5219\u7b2c\u4e8c\u4e2a\u7b54\u6848\u5c31\u662f$2^k-1$\u3002\n\n\u7531$k$\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u9700\u8981\u5199\u9ad8\u7cbe\u5ea6\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230,\u82e5\u4e0d\u8003\u8651$-1$\uff0c\u7b54\u6848\u5c31\u662f$2$\u7684\u5e42\u3002\u7528\u6d6e\u70b9\u6570\u6765\u50a8\u5b58\u4e0d\u4f1a\u4e22\u5931\u7cbe\u5ea6\uff0c\u4e14$-1$\u540e\u4e0d\u4f1a\u53d1\u751f\u9000\u4f4d\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u7528\u6d6e\u70b9\u6570\u8ba1\u7b97$2^k$\uff0c\u8f6c\u6210\u5b57\u7b26\u4e32\uff0c\u518d\u5728\u6700\u540e\u4e00\u4f4d$-1$\u3002\n\n## \u6e90\u4ee3\u7801\uff1a\n```cpp\n#include<map>\n#include<cmath>\n#include<ctime>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\ntypedef long long int64;\ntypedef __int128 int128;\ninline int64 getint() {\n\tregister char ch;\n\twhile(!isdigit(ch=getchar()));\n\tregister int64 x=ch^'0';\n\twhile(isdigit(ch=getchar())) x=(((x<<2)+x)<<1)+(ch^'0');\n\treturn x;\n}\nconst int M=601,LIM=1e6+1,P=78499;\nbool vis[LIM];\nint p[P],b[M];\nint64 a[M];\nstd::map<int64,int> cnt,cnt2;\ninline void sieve() {\n    vis[1]=true;\n    for(register int i=2;i<LIM;i++) {\n        if(!vis[i]) p[++p[0]]=i;\n        for(register int j=1;j<=p[0]&&i*p[j]<LIM;j++) {\n            vis[i*p[j]]=true;\n            if(i%p[j]==0) break;\n        }\n    }\n}\ninline int64 montgomery(int64 a,int64 k,const int64 &mod) {\n\tint64 ret=1;\n\tfor(;k;k>>=1) {\n\t\tif(k&1) ret=(int128)ret*a%mod;\n\t\ta=(int128)a*a%mod;\n\t}\n\treturn ret;\n}\ninline bool miller_rabin(const int64 &x) {\n    for(register int i=0;i<5;i++) {\n        const int64 a=(int64)rand()*rand()%(x-2)+2;\n        if(montgomery(a,x-1,x)!=1) return false;\n    }\n    return true;\n}\nchar ans[1000];\nint main() {\n\tsieve();\n\tsrand(time(NULL));\n\tconst int m=getint();\n\tfor(register int i=1;i<=m;i++) {\n\t\ta[i]=getint();\n\t\tfor(register int j=1;j<=p[0]&&a[i]!=1;j++) {\n\t\t\twhile(a[i]%p[j]==0) {\n\t\t\t\ta[i]/=p[j];\n\t\t\t\tcnt[p[j]]++;\n\t\t\t}\n\t\t}\n\t\tif(a[i]==1) continue;\n\t\tif(floor(sqrt(a[i]))==ceil(sqrt(a[i]))) {\n\t\t\tcnt[sqrt(a[i])]+=2;\n\t\t\tb[i]=1;\n\t\t\tcontinue;\n\t\t}\n\t\tif(miller_rabin(a[i])) {\n\t\t\tcnt[a[i]]++;\n\t\t\tb[i]=2;\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor(register int i=1;i<=m;i++) {\n\t\tif(a[i]==1||b[i]) continue;\n\t\tfor(register int j=1;j<=m;j++) {\n\t\t\tif(a[i]==a[j]||a[j]==1) continue;\n\t\t\tconst int64 d=std::__gcd(a[i],a[j]);\n\t\t\tif(d==1) continue;\n\t\t\tcnt[d]++;\n\t\t\tcnt[a[i]/d]++;\n\t\t\tgoto Next;\n\t\t}\n\t\tcnt2[a[i]]++;\n\t\tNext:;\n\t}\n\tint ans1=0,ans2=0;\n\tfor(register std::map<int64,int>::iterator i=cnt.begin();i!=cnt.end();i++) {\n\t\tans1=std::max(ans1,i->second);\n\t}\n\tfor(register std::map<int64,int>::iterator i=cnt2.begin();i!=cnt2.end();i++) {\n\t\tans1=std::max(ans1,i->second);\n\t}\n\tfor(register std::map<int64,int>::iterator i=cnt.begin();i!=cnt.end();i++) {\n\t\tif(i->second==ans1) ans2++;\n\t}\n\tfor(register std::map<int64,int>::iterator i=cnt2.begin();i!=cnt2.end();i++) {\n\t\tif(i->second==ans1) ans2+=2;\n\t}\n\tprintf(\"%d\\n\",ans1);\n\tsprintf(ans,\"%.Lf\",ldexpl(1,ans2));\n\tans[strlen(ans)-1]--;\n\tputs(ans);\n\treturn 0;\n}\n```",
        "postTime": 1531458332,
        "uid": 10086,
        "name": "skylee",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3499 \u3010[POI2010]NAJ-Divine Divisor\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3499)\r\n\r\n\u672c\u9898\u4e3b\u8981\u8003\u67e5 [Pollard-Rho \u7b97\u6cd5](https://www.luogu.com.cn/problem/P4718)\u3002\r\n\r\n#### \u601d\u8def\r\n\r\n\u6570\u636e\u4e0d\u662f\u5f88\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Prollard-Rho \u7b97\u6cd5\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u6620\u5c04\u5230\u6570\u7ec4 $S$ \u4e2d\uff0c\u5f88\u660e\u663e $k$ \u7684\u503c\u4e3a $S$ \u6570\u7ec4\u4e2d\u51fa\u73b0\u6700\u591a\u7684\u6570\u7684\u6b21\u6570\uff0c\u4ee4 $cnt$ \u4e3a\u5728 $S$ \u6570\u7ec4\u4e2d\u4e0e $k$ \u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5219\u6ee1\u8db3\u6761\u4ef6\u7684 $d$ \u7684\u65b9\u6848\u6570\u4e3a $2^{cnt}-1$\u3002$2^{cnt-1}$ \u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u8fd9\u91cc\u9700\u8981\u7528\u9ad8\u7cbe\u3002\r\n\r\n\u4e0d\u8003\u8651 $-1$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u5219\u5269\u4e0b\u7684\u5f0f\u5b50\u4e3a $2$ \u7684\u5e42\uff0c\u53ef\u4ee5\u7528 `long double` \u5b58 $2^{cnt-1}$\uff0c\u8f6c\u6210\u5b57\u7b26\u4e32\u5728\u8fdb\u884c\u51cf 1 \u64cd\u4f5c\u3002\r\n\r\n\u5bf9\u4e8e Pollard-Rho \u7b97\u6cd5\uff0c\u8fd9\u91cc\u6d45\u8c08\u4e00\u4e0b\uff0c\u672c\u8d28\u4e0a\u662f\u968f\u673a\u5316\uff0c\u5229\u7528\u751f\u65e5\u6096\u8bba\u6765\u63d0\u9ad8\u7b97\u6cd5\u7684\u6b63\u786e\u7387\u3002\u968f\u673a\u9009\u51fa\u4e24\u4e2a\u6570 $x,y$\uff0c\u4e24\u4e2a\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6709\u5f88\u5927\u53ef\u80fd\u4e3a $N$ \u7684\u56e0\u5b50\uff0c\u5373 $\\gcd(\\left|x-y\\right|,N)>1$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u65e7\u662f\u5f88\u9ad8\uff0c\u53ef\u4ee5\u5229\u7528 Floyd \u5224\u5708\u6cd5\u63d0\u5347\u901f\u5ea6\u3002\r\n\r\n\u6709\u4ee5\u4e0b\u56fe\uff1a\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/yaihaze5.png)\r\n\r\n\u8fd9\u4e5f\u5c31\u8bf4\u660e\u4e3a\u4ec0\u4e48\u7b97\u6cd5\u540d\u6709\u4e00\u4e2a $\\rho$ \u4e86\u3002\r\n\r\n#### \u8d34\u8d34\u4ee3\u7801\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n#define ll long long\r\n#define Auto map<ll,ll>::iterator\r\n#define lll __int128\r\nusing namespace std;\r\nconst ll Maxn=610,inf=0x3f3f3f3f;\r\nmap<ll,ll>S;\r\nchar ans[Maxn];\r\nnamespace Math{\r\n\tinline ll mul(ll a,ll b,ll p){\r\n\t\ta%=p,b%=p;\r\n\t\tll c=a*b-(ll)((long double)a*b/p+0.5)*p;\r\n\t\treturn c<0?c+p:c;\r\n\t}\r\n\tinline ll ksm(ll a,ll b,ll Mod)\r\n\t{ll z=1;while(b){if(b&1)z=(lll)z*a%Mod;a=(lll)a*a%Mod;b>>=1;}return z;}\r\n\tinline ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\r\n}\r\nusing namespace Math;\r\nnamespace Miller_Rabin{\r\n\tll Test[11]={0,2,7,41,61};\r\n\tinline bool Prime(ll X){\r\n\t\tif(X<2) return false;\r\n\t\tll k=0,t=X-1;\r\n\t\twhile(1^(t&1)) t>>=1,++k;\r\n\t\tfor(ll i=1;i<=4;i++){\r\n\t\t\tif(X==Test[i]) return true;\r\n\t\t\tll A=ksm(Test[i],t,X),Next=A;\r\n\t\t\tfor(ll j=1;j<=k;j++){\r\n\t\t\t\tNext=mul(A,A,X);\r\n\t\t\t\tif(Next==1&&A!=1&&A!=X-1) return false;\r\n\t\t\t\tA=Next;\r\n\t\t\t}\r\n\t\t\tif(Next!=1) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\nusing namespace Miller_Rabin;\r\nnamespace Pollard_Rho{\r\n\t#define Rand(P) (rand()*rand()%(P)+1)\r\n\tinline ll PR(ll X,ll Y){\r\n\t\tll t=0,k=1,v0=Rand(X-1),v1=v0,d,s=1;\r\n\t\twhile(true){\r\n\t\t\tv1=(mul(v1,v1,X)+Y)%X;s=mul(s,abs(v1-v0),X);\r\n\t\t\tif(!(v1^v0)||!s) return X;\r\n\t\t\tif(++t==k){if((d=gcd(s,X))^1)return d;v0=v1;k<<=1;}\t\r\n\t\t}\r\n\t}\r\n\tinline void solve(ll X){\r\n\t\tif(X<2) return ;\r\n\t\tif(Prime(X)){S[X]++;return ;}\r\n\t\tll Y=X;while((Y=PR(X,Rand(X)))==X);\r\n\t\tsolve(X/Y);solve(Y);\r\n\t}\r\n}\r\nll m,a,ans1=-inf,cnt;\r\nint main(){\r\n\tsrand(time(0));\r\n\tscanf(\"%lld\",&m);\r\n\tfor(ll i=1;i<=m;i++) scanf(\"%lld\",&a),Pollard_Rho::solve(a);\r\n\tfor(Auto it=S.begin();it!=S.end();it++) ans1=max(ans1,it->second);\r\n\tfor(Auto it=S.begin();it!=S.end();it++) cnt+=(ans1==it->second);\r\n\tprintf(\"%lld\\n\",ans1);\r\n\tsprintf(ans,\"%.0Lf\",powl(2.0L,cnt));\r\n\tans[strlen(ans)-1]--;\r\n\tcout<<ans;\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1669185077,
        "uid": 590600,
        "name": "MoriyaSuwako",
        "ccfLevel": 0,
        "title": "P3499\u9898\u89e3"
    },
    {
        "content": "[P3499 [POI2010]NAJ-Divine Divisor](https://www.luogu.com.cn/problem/P3499)\n\n#### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570  $m$ \u4ee5\u53ca\u957f\u5ea6\u4e3a  $m$ \u7684\u6b63\u6574\u6570\u5e8f\u5217 $a$ \uff0c\u540c\u65f6\u7ed9\u51fa   $n = \\prod_{i=1}^{m}{a_i}$\u3002\n\n\u4f60\u9700\u8981\u627e\u51fa\u4e00\u4e2a\u6700\u5927\u7684  $k$ \u4f7f\u5f97\u5b58\u5728\u4e00\u4e2a $d$ , $d > 1$ \u5e76\u4e14 $d^k | n$\u3002\u6c42\u8fd9\u4e2a\u6700\u5927\u7684  $k$ \u4ee5\u53ca\u5728  $k$ \u6700\u5927\u7684\u60c5\u51b5\u4e0b\u6709\u591a\u5c11\u4e2a $d$ \u6ee1\u8db3\u6761\u4ef6\u3002 \n\n$m <= 600$\uff0c $1 <= a_i <= 10^{18}$\n\n#### \u601d\u8def\n\n\n\u5173\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8ba9\u6211\u4eec\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8d28\u56e0\u5b50\u4ee5\u53ca\u8ddf\u5b83\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u7684\u8d28\u56e0\u5b50\u7684\u4e2a\u6570\uff08\u5047\u8bbe\u4e3a $w$\uff09\uff0c\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u4e3a $k$ \u4e5f\u5c31\u662f\u7b54\u6848\u4e3a $k$ \uff0c\u540c\u65f6\u90a3\u4e48\u5b58\u5728\u7684 $d$ \u7684\u4e2a\u6570\u5c31\u662f $2^w - 1$\u3002\u8fd9\u6beb\u65e0\u7591\u95ee\u3002\n\n\u7136\u540e\u6211\u4eec\u73b0\u5728\u8981\u6c42\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8d28\u56e0\u5b50\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\u90a3\u4e48\u5f88\u663e\u7136\u7684 $10^{18}$ \u7684\u6570\u636e\u8303\u56f4\u65e0\u6cd5\u4f7f\u7528 $\\sqrt{n}$ \u7ea7\u522b\u7684\u7b97\u6cd5\u6765\u505a\u8fd9\u4e00\u9053\u9898\u76ee\u3002\u4e8e\u662f\u6211\u4eec\u7528 [Pollard Rho \u548c Miller Rabin](https://www.cnblogs.com/MYCui/p/14478796.html) \u7b97\u6cd5\u6765\u4f18\u5316\u8fd9\u9053\u9898\u76ee\u3002\n\n\u4f46\u662f\uff0c\u56e0\u4e3a Pollard Rho \u5982\u679c\u8981\u53bb\u5206\u89e3\u4e00\u4e2a\u5927\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50\u7684\u8bdd\uff0c\u5018\u82e5\u8fd9\u4e2a\u5927\u6570\u7684\u8d28\u56e0\u5b50\u5f88\u591a\uff0c\u90a3\u4e48 Pollard Rho \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u65e0\u6cd5\u4fdd\u8bc1\u3002\u8003\u8651\u600e\u4e48\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \n\nPollard Rho \u7b97\u6cd5\u5176\u5b9e\u5728\u4f7f\u7528\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u5c0f $trick$\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u542b\u6709\u5f88\u5c0f\u7684\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48\u6ca1\u6709\u5fc5\u8981\u53bb\u7528 Pollard Rho \u7b97\u6cd5\u53bb\u627e\u8fd9\u4e9b\u5f88\u5c0f\u7684\u56e0\u5b50\uff0c\u53cd\u800c\u4e0d\u5982\u76f4\u63a5\u5148\u7528\u66b4\u529b\u8dd1\u51fa\u8fd9\u4e9b\u5c0f\u7684\u8d28\u56e0\u5b50\u3002\u4e8e\u662f\u5b9a\u4e49 \"\u5f88\u5c0f\u7684\u8d28\u56e0\u5b50\"\u4e3a\u5c0f\u4e8e\u7b49\u4e8e $10^6$ \u7684\u8d28\u56e0\u5b50 * \uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 $a_i$ \uff0c\u6211\u4eec\u5148\u7528 $10^6$ \u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570\u53bb\u5224\u65ad\u4e00\u4e0b\u770b\u8fd9\u4e2a\u6570\u662f\u4e0d\u662f\u542b\u6709 $10^6$ \u4ee5\u5185\u7684\u8d28\u56e0\u5b50\uff0c\u5982\u679c\u6709\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5c06\u5176\u9664\u6389\uff0c\u8fd9\u6837\u64cd\u4f5c\u540e\uff0c\u5f88\u5bb9\u6613\u77e5\u9053\u5269\u4e0b\u7684\u8d28\u56e0\u5b50\u4e0d\u8d85\u8fc7 $2$ \u4e2a\u3002\n\n\u6ce8\uff1a\u5e76\u975e\u6240\u6709\u7684\u9898\u76ee\u90fd\u662f\u5b9a\u4e49\u4e3a $10^6$ \u4ee5\u5185\u7684\u8d28\u56e0\u6570\u4e3a\u201c\u5f88\u5c0f\u7684\u8d28\u56e0\u6570\u201d\uff0c\u6839\u636e\u9898\u76ee\u800c\u5b9a\uff0c\u8fd9\u91cc\u8fd9\u4e48\u5b9a\u4e49\u662f\u56e0\u4e3a $m$ \u53ea\u6709 $600$ ,\u800c $10^6$ \u4ee5\u5185\u7684\u8d28\u6570\u4e0d\u8d85\u8fc7 $80000$ \u4e2a\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u5b9a\u4e49\u3002\n\n\u7136\u540e\u518d\u4f7f\u7528 Pollard Rho \u7b97\u6cd5\u8fdb\u884c\u5206\u89e3\u8d28\u56e0\u6570\u7684\u8bdd\u5c31\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u540c\u65f6 Pollard Rho \u7528\u7684\u65f6\u5019\u4e00\u822c\u90fd\u8981\u642d\u914d Miller Rabin \u7d20\u6027\u6d4b\u8bd5\u7b97\u6cd5\uff0c\u5177\u4f53\u4f7f\u7528\u89c1\u4e0b\u9762\u4ee3\u7801\u7684 \nfac(x) \u51fd\u6570\u91cc\u9762\u3002\n\n\u53e6\u5916\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u672c\u9898\u7684\u7b54\u6848\u4e2d $2^w - 1$ \u53ef\u80fd\u4f1a\u8fbe\u5230 $2^{600}$ \uff0c\u6240\u4ee5\u9700\u8981\u624b\u5199\u9ad8\u7cbe\u5ea6\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define ll long long\n#define ull unsigned long long\nconst int MAXN = 1e3;\nint m, Mod;\nint A[MAXN], M[25] = {0,2,3,5,7,11,13,17,19,23,31,61}; //M \u5373 Miller Rabin \u63a2\u6d4b\u5e95\u6570\nint book[1 << 20], Prime[1 << 20], tot = 0;\nint P[MAXN << 10], cnt = 0, len = 0;\nchar s[114514];\nmap <int, int> mp;//\u5f00\u4e00\u4e2a map \u6765\u7edf\u8ba1\u6bcf\u4e2a\u8d28\u56e0\u5b50\u51fa\u73b0\u7684\u6b21\u6570\n\ninline ll mul(ll x,ll y,ll p){ //\u5feb\u901f\u4e58\uff0c\u9632\u6b62\u7206long long\n\tll z = (long double)x / p * y;\n\tll ans = (ull)x * y - (ull)z * p;\n\treturn (ans + p) % p;\n}\n\nint f(int x, int c, int MOD) {return (mul(x, x, Mod) + c) % MOD;} //\u8fd9\u4e2a\u662f Pollard Rho \u4f2a\u968f\u673a\u51fd\u6570\nint gcd(int A, int B) {return B == 0 ? A : gcd(B, A % B);}\nint Abs(int x) {return x < 0 ? -x : x;}\n\nint quickpower(int x, int y) { \n    int ans = 1, op = x;\n    while(y) {\n        if(y & 1) ans = mul(ans, op, Mod);\n        op = mul(op, op, Mod), op %= Mod;\n        y >>= 1;\n    }\n    return ans;\n}\n\nbool Miller_Rabin(int x) { //Miller Rabin \u7d20\u6027\u6d4b\u8bd5\u6a21\u677f\n    Mod = x;\n    for(int i = 1 ; i <= 11 ; i ++) if(M[i] == x) return 1;\n    if(x % 2 == 0 || x == 1) return 0;\n    int p = x - 1, r = 0;\n    while(p % 2 == 0) p >>= 1, r ++;\n    for(int i = 1 ; i <= 10 ; i ++) {\n        int B = quickpower(M[i], p);\n        for(int j = 1 ; j <= r ; j ++) {\n            int K = mul(B, B, Mod);\n            if(K == 1 && B != Mod - 1 && B != 1) return 0;\n            B = K;\n        }\n        if(B != 1ll) return 0;\n    }\n    return 1;\n}\n\nint Pollard_Rho(int x) { // Pollard Rho \u6a21\u677f\n    if(x == 4) return 2;\n    int c = rand() % (x - 1) + 1, a = 0, b = 0, d = 1;\n    for(int lim = 1; ; lim <<= 1, b = a) { //\u91c7\u7528\u4e86\u500d\u589e\u4f18\u5316\n        int S = 1;\n        for(int i = 1 ; i <= lim ; i ++) {\n            a = f(a, c, x);\n            S = mul(S, Abs(a - b), x);  //\u7d2f\u4e58\n            if(i % 127 == 0) { // \u9694 127 \u6b21\u5224\u4e00\u4e0b\n                d = gcd(S, x); \n                if(d > 1) return d;\n            }\n        }\n        int d = gcd(S, x);\n        if(d > 1) return d;\n    }\n    return x;\n}\n\nvoid GetPrime() { //\u7ebf\u6027\u7b5b\n    for(int i = 2 ; i <= 1e6 ; i ++) {\n        if(!book[i]) Prime[++ tot] = i;\n        for(int j = 1 ; j <= tot && Prime[j] * i <= 1e6; j ++) {\n            book[Prime[j] * i] = 1;\n            if(i % Prime[j] == 0) break;\n        }\n    }\n    return ;\n}\n\nvoid fac(int x) {\n    if(x == 1) return ;\n    if(Miller_Rabin(x)) {\n        if(mp[x] == 0) P[++cnt] = x; //\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570\u53ea\u8fdb\u961f\u4e00\u6b21\uff0c\u9632\u6b62\u91cd\u590d\u7edf\u8ba1\n        mp[x] ++;\n        return ;\n    }\n    int p = x;\n    while(p >= x) p = Pollard_Rho(x);\n    int flag = Miller_Rabin(p);\n    while(x % p == 0) {\n        if(mp[p] == 0 && flag) P[++ cnt] = p; //\u9632\u6b62\u6f0f\u6389\u8d28\u56e0\u5b50\n        if(flag) mp[p] ++;\n        x /= p;\n    }\n    fac(x);\n    if(!flag) fac(p);//\u5982\u679c p \u662f\u8d28\u6570\u5c31\u6ca1\u5fc5\u8981\u8fdb\u884c\u4e0b\u53bb\u4e86\uff0c\u5df2\u7ecf\u88ab\u4e22\u8fdb\u8d28\u56e0\u6570\u961f\u5217\u4e2d\u4e86\n    return ;\n}\n\nvoid Times() { //\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\n    int len = strlen(s + 1);\n    reverse(s + 1, s + 1 + len);\n    int add = 0;\n    for(int i = 1 ; i <= len ; i ++) {\n        int x = s[i] - '0';\n        x *= 2;\n        x += add; add = 0;\n        if(x >= 10) add = 1, x %= 10;\n        s[i] = x + '0';\n    }\n    if(add != 0) s[++ len] = '1';\n    reverse(s + 1, s + 1 + len);\n    return ;\n}\n\nsigned main() {\n    cin >> m;\n    for(int i = 1 ; i <= m ; i ++) cin >> A[i];\n    sort(A + 1, A + 1 + m);\n    GetPrime();\n    for(int i = 1 ; i <= m ; i ++) { //\u8fd9\u91cc\u662f\u518d\u5904\u7406\u8f83\u5c0f\u7684\u8d28\u56e0\u6570\n        for(int j = 1 ; j <= tot ; j ++)\n        while(A[i] % Prime[j] == 0) {\n            if(mp[Prime[j]] == 0)\n            P[++ cnt] = Prime[j];\n            A[i] /= Prime[j];\n            mp[Prime[j]] ++;\n        }\n    }\n    for(int i = 1 ; i <= m ; i ++) fac(A[i]); //\u5206\u89e3\u8d28\u56e0\u6570\n    sort(P + 1, P + 1 + cnt);\n    int Max = 0, total = 0;\n    for(int i = 1 ; i <= cnt ; i ++) Max = max(Max, mp[P[i]]);\n    for(int i = 1 ; i <= cnt ; i ++) if(mp[P[i]] == Max) total ++;\n    cout << Max << endl;\n    s[1] = '1';\n    while(total -- ) Times();\n    int len = strlen(s + 1);\n    int x = s[len]; x --; s[len] = char(x); // 2 \u7684\u4efb\u610f\u6b63\u6574\u6570\u6b21\u65b9\u672b\u5c3e\u53ea\u53ef\u80fd\u662f 2,4,8,6 \u76f4\u63a5\u51cf\u6ca1\u6709\u95ee\u9898\n    for(int i = 1 ; i <= len ; i ++) cout << s[i];\n    return 0; \n}\n```",
        "postTime": 1614858807,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "P3499 [POI2010]NAJ-Divine Divisor \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[Pollard-Rho \u7b97\u6cd5](https://oi-wiki.org/math/number-theory/pollard-rho/)\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a $a_i$ \u7528 Pollard-Rho \u7b97\u6cd5\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5219\u663e\u7136 $k =$ \u4e58\u79ef\u4e2d\u5e42\u6b21\u6700\u5927\u7684\u8d28\u56e0\u6570\u7684\u5e42\u6b21\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684 $d$ \u5373\u4e3a\u4ece\u5e42\u6b21 $= k$ \u7684\u8d28\u56e0\u6570\u7684\u4e2a\u6570\u4efb\u9009\u4e00\u4e2a**\u975e\u7a7a**\u5b50\u96c6\u7684\u65b9\u6848\u6570\uff0c\u5373\uff1a\u8bbe $cnt =$ \u5e42\u6b21 $= k$ \u7684\u8d28\u56e0\u6570\u7684\u4e2a\u6570\uff0c\u5219\u7b54\u6848\u4e3a $2^k - 1$\u3002\n\n\u5982\u679c\u4f60\u8ddf\u6211\u4e00\u6837\u61d2\u5f97\u5199\u9ad8\u7cbe\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6d6e\u70b9\u6570\u50a8\u5b58 $2^k$\uff0c\u5728\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u540e\u51cf\u4e00\u3002\n\n\u6ce8\u610f\u9700\u8981\u5f00 long double\uff0c\u4e14\u5b57\u7b26\u6570\u7ec4\u81f3\u5c11\u9700\u8981\u5f00 $418$ \u4f4d\uff08\u5b9e\u9645\u4f4d\u6570\u4e3a $417$ \u4f4d\uff0c\u5f00 $418$ \u4f4d\u662f\u56e0\u4e3a\u8981\u8003\u8651\u672b\u5c3e\u7684 `\\0`\uff09\u3002\u6700\u5927\u7684\u7ed3\u679c\u53ef\u7531[\u8fd9\u7ec4](https://www.luogu.com.cn/paste/6nierktc)\u6570\u636e\u7ed9\u51fa\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef __int128 lll;\n\nconst int N = 9, M = 417 + 7, K = 1 << 7;\nint test_prime[N + 7] = {0, 2, 3, 5, 7, 11, 13, 17, 19, 23};\nchar ans_cnt[M];\nmap<ll, int> mp;\n\ninline ll quick_pow(ll x, ll p, ll mod){\n\tll ans = 1;\n\twhile (p){\n\t\tif (p & 1) ans = (lll)ans * x % mod;\n\t\tx = (lll)x * x % mod;\n\t\tp >>= 1;\n\t}\n\treturn ans;\n}\n\ninline bool is_prime(ll n){\n\tif (n < 2) return false;\n\tint cnt = 0;\n\tll m = n - 1, k = m;\n\twhile (k % 2 == 0){\n\t\tk /= 2;\n\t\tcnt++;\n\t}\n\tfor (register int i = 1; i <= N; i++){\n\t\tif (n == test_prime[i]) return true;\n\t\tll a = quick_pow(test_prime[i], k, n), b = a;\n\t\tfor (register int j = 1; j <= cnt; j++){\n\t\t\tb = (lll)b * a % n;\n\t\t\tif (b == 1 && a != 1 && a != m) return false;\n\t\t\ta = b;\n\t\t}\n\t\tif (a != 1) return false;\n\t}\n\treturn true;\n}\n\ninline ll floyd(ll a, ll b, ll p){\n\treturn ((lll)a * a % p + b) % p;\n}\n\ninline ll abs64(ll n){\n\treturn n >= 0 ? n : -n;\n}\n\nll gcd(ll a, ll b){\n\treturn b == 0 ? a : gcd(b, a % b);\n}\n\ninline ll pollard_pho(ll n){\n\tll x = 0, c = rand() % (n - 1) + 1;\n\tfor (register int i = 1; ; i <<= 1){\n\t\tll y = 1, z = x;\n\t\tfor (register int j = 1; j <= i; j++){\n\t\t\tx = floyd(x, c, n);\n\t\t\ty = (lll)y * abs64(x - z) % n;\n\t\t\tif (j == i || j % K == 0){\n\t\t\t\tll ans = gcd(n, y);\n\t\t\t\tif (ans > 1) return ans;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid decompound(ll n){\n\tif (n < 2) return;\n\tif (is_prime(n)){\n\t\tmp[n]++;\n\t\treturn;\n\t}\n\tll factor;\n\tdo {\n\t\tfactor = pollard_pho(n);\n\t} while (factor == n);\n\tdecompound(factor);\n\tdecompound(n / factor);\n}\n\nint main(){\n\tint m, len, cnt = 0, ansk = 0;\n\tcin >> m;\n\tsrand(time(NULL));\n\tfor (register int i = 1; i <= m; i++){\n\t\tll a;\n\t\tcin >> a;\n\t\tdecompound(a);\n\t}\n\tfor (register map<ll, int>::iterator i = mp.begin(); i != mp.end(); i++){\n\t\tansk = max(ansk, i->second);\n\t}\n\tcout << ansk << endl;\n\tfor (register map<ll, int>::iterator i = mp.begin(); i != mp.end(); i++){\n\t\tif (i->second == ansk) cnt++;\n\t}\n\tsprintf(&ans_cnt[1], \"%.0Lf\", powl(2.0L, cnt));\n\tlen = strlen(&ans_cnt[1]);\n\tfor (register int i = len; i >= 1; i--){\n\t\tif (ans_cnt[i] >= '1'){\n\t\t\tans_cnt[i]--;\n\t\t\tbreak;\n\t\t}\n\t\tans_cnt[i] = '9';\n\t}\n\tcout << &ans_cnt[1];\n\treturn 0;\n}\n```",
        "postTime": 1643010201,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3499 \u3010[POI2010] NAJ-Divine Divisor\u3011"
    },
    {
        "content": "orz\u795e\u9898\u3002\n\n\u5047\u8bben=p1^a1\\*p2^a2..pk^ak\n\n\u5047\u8bbe\u6700\u5927\u7684ai\u6709num\u4e2a\uff0c\n\n\u5219ans1=ai\n\nans2=2^num-1\n\n(\u6ce8\u610f\u5230n\u6709\u53ef\u80fd\u8fbe\u523010^1000\u591a\uff0c\u6240\u4ee5ans2\u8981\u7528\u9ad8\u7cbe\u5ea6)\n\n\u4f46n\u662f\u4ee5600\u4e2a10^18\u7684a\u7ed9\u51fa\u7684\uff0c\u4e0d\u53ef\u80fd\u6839\u53f7\u65f6\u95f4\u5206\u89e3\u8d28\u56e0\u6570\u3002\n\n\u4f46\u8fd9\u4e24\u95ee\u662f\u53ef\u4ee5\u5728\u4e0d\u5f7b\u5e95\u5206\u89e3\u8d28\u56e0\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u7684\u3002\n\n\u9996\u5148\uff0c\u5c06a <=10^6\u7684\u8d28\u56e0\u6570\u5206\u89e3\u6389(\u53ea\u679a\u4e3e\u5168\u90e8\u8d28\u6570\uff0c\u5927\u6982\u670978000\u4e2a)\uff0c\n\n\u90a3\u4e48\u5269\u4e0b\u6765\u7684a\u6709\u51e0\u79cd\u60c5\u51b5\u3002\n\n1:\u5927\u8d28\u6570\n\n\u7528miller-robin\u68c0\u9a8c\n\n2:p1\\*p2,p1\u548cp2>10^6\n\n(1)p1=p2 \u7528\u6839\u53f7\u7279\u5224\n\n(2)p1\u2260p2 \u7559\u7740\n\n\u5148\u628a\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u53bb\u91cd\u4e86\n\n\u518d\u7528\u524d\u4e24\u79cd\u60c5\u51b5\u591a\u51fa\u6765\u7684\u8d28\u6570\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u4e24\u4e24\u6c42gcd\u5f97\u5230\u7684\u8d28\u6570\n\n\u53bb\u628a\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u7684\u5206\u89e3\u4e00\u4e0b\u3002\n\n\u90a3\u4e48\u5269\u4e0b\u6765\u7684\u6bcf\u4e2a\u6570\u5c31\u662f\u4e00\u4e2a\u6216\u4e24\u4e2aai=\u91cd\u590d\u4e2a\u6570\u7684pi\u3002\n\n\u4e8e\u662f\u5c31\u6709\u529e\u6cd5\u7edf\u8ba1ans\u4e86\u3002\n\n\n```cpp\n#include<math.h>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n#define ll long long \n#define U 1000000\n#define N 605\nbool vis[U+5]; \nint p[U],num,t1[U];\nll p2[U];int num2,t2[U];\nll st[N];int top;int cnt[N],del[N];//\u91cd\u590d\u6b21\u6570 \u88ab\u7b5b\u6b21\u6570 \n\nll gcd(ll x,ll y)\n{\n    while (y)\n    {\n        ll temp=x;\n        x=y;y=temp%y;\n    }\n    return x;\n}\nll a;\nll mod(const ll &x) { return x<a?x:x-a; }\nll cheng(ll x,ll y)\n{\n    ll ans=0;\n    while (y)\n    {\n        if (y&1) ans=mod(ans+x);\n        x=mod(x<<1);y>>=1;\n    }\n    return ans;\n}\nll mi(ll x,ll y)\n{\n    ll ans=1;\n    while (y)\n    {\n        if (y&1) ans=cheng(ans,x);\n        x=cheng(x,x);y>>=1; \n    }\n    return ans;\n}\nbool is_prime()\n{\n    ll d=a-1;int s=0;\n    while (!(d&1)) { d>>=1;++s; }\n    \n    for (int i=1;i<=10;++i)\n    {\n        ll x=mi(p[i],d);\n        if (x==1||x==a-1) continue;\n        for (int j=1;j<s;++j)\n        {\n            x=cheng(x,x);\n            if (x==a-1) break;\n        }\n        if (x!=a-1) return 0;\n        d=a-1>>s;\n    }\n    return 1;\n}\n\nint ans1=1,ans2;//ans1=max(ai) ans2\u5b58\u7684\u662fnum \n#define W 1000000000000000000LL\n//\u538b18\u4f4d\nvoid print()\n{\n    static ll a[N]; \n    int i; \n    printf(\"%d\\n\",ans1);\n    top=1;a[1]=1;\n    while (ans2--)\n    {\n        for (i=1;i<=top;++i) a[i]<<=1;\n        for (i=1;i<=top;++i) \n        if (a[i]>=W) {a[i]-=W;a[i+1]+=1;}\n        if (a[top+1]) ++top;\n    }\n      --a[1];\n        printf(\"%lld\",a[top]);\n        for (i=top-1;i;--i) printf(\"%0*lld\",18,a[i]);\n} \n\nint main()\n{ freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    int i,j;\n    for (i=2;i<=U;++i)\n    {\n        if (!vis[i]) p[++num]=i;\n        for (j=1;i*p[j]<=U;++j)\n        {\n            vis[i*p[j]]=1;\n            if (!(i%p[j])) break;\n        }\n    }\n    int n,o;\n    scanf(\"%d\",&n);\n    for (o=1;o<=n;++o) \n    { scanf(\"%lld\",&a);\n      for (i=1;i<=num;++i)\n      while (!(a%p[i])) { a/=p[i];++t1[i]; }\n      if (a==1) continue;\n      if (is_prime()) { p2[++num2]=a;continue; } \n      ll g=sqrt(a);\n      if (g*g==a) { p2[++num2]=g;p2[++num2]=g;continue; }\n      st[++top]=a;\n    }\n    \n    if (top)\n    {\n     sort(st+1,st+top+1);\n     int temp=1;cnt[1]=1;\n     for (i=2;i<=top;++i)\n     {\n         if (st[i]!=st[temp]) st[++temp]=st[i];\n         ++cnt[temp];\n     }\n     top=temp;\n     for (i=1;i<=top;++i)\n     {\n        a=st[i];\n        for (j=i+1;j<=top;++j)\n        {\n            ll g=gcd(a,st[j]);\n             if (g>1) \n             { ++del[i];++del[j];\n               a/=g;st[j]/=g;\n             for (int k=1;k<=cnt[i]+cnt[j];++k)p2[++num2]=g; }\n        }\n        st[i]=a;\n     }\n    }\n    if (num2)\n    {\n     sort(p2+1,p2+num2+1);\n     int temp=1;t2[1]=1;\n     for (i=2;i<=num2;++i)\n     {\n       if (p2[i]!=p2[temp]) p2[++temp]=p2[i];\n       ++t2[temp];\n     }\n     num2=temp;\n     for (o=1;o<=top;++o)\n     {\n        a=st[o];\n        for (i=1;i<=num2;++i)  \n        if (!(a%p2[i])) {a/=p2[i];t2[i]+=cnt[o];++del[o];}\n     }\n     for (i=1;i<=top;++i)\n     if (cnt[i]>ans1) { ans1=cnt[i];ans2=2-del[i]; } else\n     if (cnt[i]==ans1) ans2+=2-del[i];\n     for (i=1;i<=num2;++i)\n     if (t2[i]>ans1) {ans1=t2[i];ans2=1;} else\n     if (t2[i]==ans1) ++ans2;\n    }\n    \n    for (i=1;i<=num;++i)\n     if (t1[i]>ans1) {ans1=t1[i];ans2=1;} else\n     if (t1[i]==ans1) ++ans2;\n     \n    print();\n}\n```",
        "postTime": 1487347242,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3499 \u3010[POI2010]NAJ-Divine Divisor\u3011"
    }
]