[
    {
        "content": "\u697c\u4e0b\u63d0\u5230\u8fc7\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u505a,\u6240\u4ee5\u6211\u6765\u8d21\u732e\u4e00\u7bc7\u5e76\u67e5\u96c6\u7684\u9898\u89e3  \n\u7528\u5e76\u67e5\u96c6\u57fa\u672c\u4e0a\u5c31\u662f\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6,\u800c\u4e14\u4ee3\u7801\u5c11,\u4e5f\u6bd4\u8f83\u597d\u7406\u89e3  \n\u8fd9\u9053\u9898\u6211\u4eec\u7537\u751f\u548c\u5973\u751f\u7684\u5173\u7cfb\u4e0e\u5973\u751f\u548c\u5973\u751f\u4e4b\u95f4\u7684\u5173\u7cfb\u5206\u5f00\u5efa\u56fe  \n\u6700\u540e\u5927\u6982\u80fd\u5f97\u5230\u8fd9\u4e48\u4e00\u526f\u5173\u7cfb\u56fe  \n![](https://s2.ax1x.com/2019/08/23/mrnUrd.png)  \n\u5973\u751f\u4e4b\u95f4\u4f1a\u5f62\u6210\u51e0\u4e2a\u8054\u901a\u5feb  \n\u540c\u4e00\u4e2a\u8054\u901a\u5feb\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5973\u751f\u90fd\u80fd\u9009\u62e9\u8fde\u63a5\u5230\u8fd9\u4e2a\u8054\u901a\u5feb\u7684\u7537\u751f  \n\u4f8b\u5982\u6700\u5de6\u8fb9\u7684\u90a3\u4e2a\u8054\u901a\u5feb,\u56e0\u4e3a\u6bcf\u4e2a\u5973\u751f\u6bcf\u6b21\u9009\u62e9\u4e0d\u540c\u7684\u7537\u751f  \n\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a\u5973\u751f\u90fd\u6709\u4e09\u79cd\u9009\u62e9,\u56e0\u800c\u6e38\u620f\u8fdb\u884c\u4e09\u8f6e  \n\u540c\u7406\u53f3\u8fb9\u90a3\u4e2a\u6700\u591a\u8fdb\u884c\u4e24\u8f6e  \n\u800c\u4e2d\u95f4\u90a3\u4e2a\u5b64\u7acb\u7684\u70b9\u4e00\u8f6e\u90fd\u65e0\u6cd5\u8fdb\u884c  \n\u4f46\u662f\u9898\u76ee\u4e2d\u53c8\u8bf4 _\u6bcf\u4e00\u4e2a\u5973\u751f\u6700\u591a\u80fd\u5f3a\u5236k\u4e2a\u7537\u751f\u63a5\u53d7_  \n\u4f8b\u5982\u5f53k=2\u65f6\u5019  \n![](https://s2.ax1x.com/2019/08/23/mrnBIP.png)  \n\u6e38\u620f\u5c31\u80fd\u591a\u8fdb\u884c\u4e24\u8f6e,\u90a3\u4e48\u8fd9\u4e2a\u5b64\u7acb\u7684\u70b9\u4e5f\u80fd\u8fdb\u884c\u4e24\u8f6e\u6e38\u620f\u4e86  \n\u6211\u4eec\u5728\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019,\u5148\u4e0d\u8003\u8651k,\u5f97\u5230\u6bcf\u4e2a\u8054\u901a\u5feb\u80fd\u8fdb\u884c\u7684\u6e38\u620f\u8f6e\u6570  \n\u7136\u540e\u518d\u53d6\u6700\u5c0f\u503c,\u8bb0\u4e3aans.  \n\u90a3\u4e48\u8003\u8651k\u4e4b\u540e\u7684\u6700\u7ec8\u7b54\u6848\u5c31\u662fmin(ans+k,n)  \n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b,\u77ed\u5c0f\u7cbe\u608d  \n```cpp\n#include<iostream>\n#include<cstring>\n#define MAXN 100000\nusing namespace std;\nint n,m,k,f,pre[MAXN],num[MAXN],ans=2147483647;\nbool maps[500][500]; \nstruct node{int from,to;\n}edge1[MAXN],edge2[MAXN];\nint find(int x){return x==pre[x]?x:pre[x]=find(pre[x]);} \nvoid merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy)pre[fx]=fy;\n}\nint main()\n{\n\tcin>>n>>m>>k>>f;\n\tfor(int i=1;i<=n;i++)pre[i]=i;\n\tfor(int i=1;i<=m;i++)cin>>edge1[i].from>>edge1[i].to; //\u5973from \u548c \u7537to \u4ece\u4e0d\u5435\u67b6 \n\tfor(int i=1;i<=f;i++)cin>>edge2[i].from>>edge2[i].to;  //\u5973from \u548c \u5973to \u662f\u670b\u53cb \n\tfor(int i=1;i<=f;i++)merge(edge2[i].from,edge2[i].to);//\u670b\u53cb\u5173\u7cfb\u7528\u5e76\u67e5\u96c6\u5904\u7406\u8054\u901a\u60c5\u51b5 \n\tfor(int i=1;i<=m;i++)\n\t\tif(!maps[find(edge1[i].from)][edge1[i].to])       //\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8054\u901a\u5feb\u8fde\u63a5\u7684\u4e0d\u540c\u7f16\u53f7\u7684\u7537\u751f\u6570\u76ee,\u7528maps\u6807\u8bb0\u9632\u6b62\u91cd\u590d\u8ba1\u6570 \n\t\t\tnum[find(edge1[i].from)]++,  //\u8bb0\u5f55\u6bcf\u4e2a\u8054\u901a\u5feb\u7684\u5171\u4eab\u7537\u751f\u6570\u76ee\n\t\t\tmaps[find(edge1[i].from)][edge1[i].to]=true;\n\tfor(int i=1;i<=n;i++)\n\t\tif(num[i])ans=min(ans,num[i]); //\u53d6\u6700\u5c0f \n\tans=min(ans+k,n);  //\u8003\u8651k\u4e4b\u540e\u7684\u7b54\u6848,\u6700\u5927\u503c\u6709\u53ef\u80fd\u4f1a\u8d85\u8fc7n,\u8fd9\u663e\u7136\u662f\u4e0d\u884c\u7684 \n\tcout<<ans<<endl;\n}\n```\n",
        "postTime": 1566557016,
        "uid": 229609,
        "name": "NewSjf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    },
    {
        "content": "# \u8fc7\u5bb6\u5bb6\n\n## \u9898\u76ee\u5927\u610f\uff08\u81ea\u8ba4\u4e3a\u8f83\u4e3a\u7b80\u5355\u7684\u7406\u89e3\u65b9\u5f0f\uff09\n\n\u6709 $n$ \u4e2a\u4eba\u6253\u519c\u836f \uff0c\u5171\u6709 $n$ \u4e2a\u82f1\u96c4\uff0c \u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u82f1\u96c4\u5e93 \uff0c \u4e92\u4e3a\u597d\u53cb\u7684\u53ef\u5171\u4eab\u82f1\u96c4 \uff0c \u6bcf\u4e2a\u4eba\u8fd8\u62e5\u6709\u53ef\u4e70 $k$ \u4e2a\u82f1\u96c4\u7684\u70b9\u5238 \uff0c \u6c42\u4e00\u4e2a\u4eba\u80fd\u7528\u7684\u82f1\u96c4\u6700\u5c11\u4e3a\u591a\u5c11\uff08\u4e00\u4e2a\u82f1\u96c4\u6253\u4e00\u5c40\uff0c\u6240\u4ee5\u82f1\u96c4\u6700\u5c11\u7684\u73a9\u5bb6\u6253\u5b8c\u540e\u5c31\u4e0d\u5f00\u5fc3\u4e86\u6240\u4ee5\u5c31\u7ed3\u675f\u5bf9\u5c40\u4e86\uff09 \u3002\n\n## \u5206\u6790 \uff1a\n\n\u9996\u5148\u8fd9\u9898\u4e00\u770b\u4fbf\u77e5\u662f\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u600e\u4e48\u5e76 / \u67e5 \uff0c \u662f\u4e2a\u95ee\u9898\uff0c\u6211\u662f\u4e00\u4e0a\u6765\u4fbf\u76f4\u63a5\u786c\u4e0a\u5e26\u6743\u5e76\u67e5\u96c6\u7136\u800c\u5728\u5e76\u7684\u65f6\u5019\u5c31\u53d1\u73b0\u82f1\u96c4\u91cd\u53e0\u4e0d\u597d\u5904\u7406\uff0c\u6240\u4ee5\u7acb\u523b\u9677\u5165\u6c89\u601d\u3002\u4e3a\u907f\u514d\u82f1\u96c4\u91cd\u590d\u6240\u4ee5\u6bcf\u4e2a\u4eba\u548c\u82f1\u96c4\u5e76\u67e5\u96c6\u4e0d\u80fd\u901a\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u4fbf\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u597d\u53cb\uff0c\u5148\u5c06\u6bcf\u4e2a\u4eba\u7684\u82f1\u96c4\u79bb\u7ebf\u4e0b\u6765\uff0c\u5728\u540e\u9762\u5408\u5e76\u597d\u53cb\u540e\uff0c\u5728\u5f00\u4e2a\u6876\u6253\u4e2a\u6807\u8bb0\u5c06\u82f1\u96c4\u90fd\u52a0\u5230\u5e76\u67e5\u96c6\u8054\u901a\u5feb\u7684\u4ee3\u8868\u8282\u70b9\uff08\u7956\u5b97\uff09\u4e0a\uff0c\u6807\u8bb0\u9632\u6b62\u7b97\u91cd\uff0c\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u6876\u679a\u4e3e\u627e\u6700\u5c0f\u503c \uff0c\u56e0\u4e3a $k$ \u81ea\u5df1\u80fd\u4e70\u7684\u82f1\u96c4\u91cf\u662f\u56fa\u5b9a\u7684\u4f46\u603b\u5171\u53ea\u6709 $n$ \u4e2a\u82f1\u96c4\u6240\u4ee5\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u4e3a $min(minn+k , n)$ \u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n------\n\n```cpp\n#warning by StarMaster\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std ;\n\nconst int MM = 10000 ;\nint n , fa[MM * 10]  , m , k , minn = 1e6 , f , num[MM * 10] ;\nbool vis[MM][MM] ;\n\nstruct node\n{\n\tint x , y ;\n}a[MM * 10] ;\n\ninline int min(int a , int b)\n{\n\treturn a < b ? a : b ;\n}\n\ninline int read()\n{\n\tint x = 0 , f = 1 ;\n\tchar ch = getchar() ;\n\twhile(ch > '9' or ch < '0')\n\t{\n\t\tif(ch == '-') f = -1 ;\n\t\tch = getchar() ;\n\t}\n\twhile(ch >= '0' and ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48) ;\n\t\tch = getchar() ;\n\t}\n\treturn x * f ;\n}\n\ninline int Find(int x)\n{\n\tif(x == fa[x]) return x ;\n\telse return fa[x] = Find(fa[x]) ;\n}\n\nint main()\n{\n\tn = read() , m = read() , k = read() , f = read() ;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tfa[i] = i ;\n\t}\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\ta[i].x = read() , a[i].y = read() ;\n\t}\n\tfor(int i = 1 ; i <= f ; i ++)\n\t{\n\t\tint x = read() , y = read() ;\n\t\tfa[Find(x)] = Find(y) ;\n\t}\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t    if(!vis[Find(a[i].x)][a[i].y])\n\t    {\n\t    \tnum[Find(a[i].x)] ++ ;//\u7d2f\u52a0\u7956\u5b97\u8282\u70b9\u82f1\u96c4\u91cf\n\t    \tvis[Find(a[i].x)][a[i].y] = 1 ;//\u6807\u8bb0\u9632\u6b62\u7b97\u91cd\n\t    }\n\t}\n\tfor(int i = 1 ; i <= n ; i++)\n\t{\n\t\tif(num[i]) minn = min(minn , num[i]) ;//\u627e\u6700\u5c0f\u503c\n\t}\n\tcout << min(minn + k , n) ;//\u6700\u5c0f\u503c\u52a0 k\uff0c\u4e0e n \u53d6 min\n\treturn 0 ;\n}\n```\n\n\n------------\n\n\n\u5b8c\u7ed3\u6492\u82b1(* ^ \u25bd ^ *) \n\n",
        "postTime": 1629364656,
        "uid": 294561,
        "name": "theStarMaster",
        "ccfLevel": 4,
        "title": "P1682"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[$\\texttt{Link}$](https://www.luogu.com.cn/problem/P1682)\n## $\\textbf{Solution}$\n\u7531\u4e8e\u670b\u53cb\u5173\u7cfb\u53ef\u4ee5\u76f8\u4e92\u4f20\u9012\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u4e92\u4e3a\u670b\u53cb\u7684\u5973\u751f\u7528\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u5f62\u6210\u4e00\u4e9b\u8054\u901a\u5757\u3002\n\n\u82e5\u4e00\u4e2a\u5973\u751f\u548c\u4e00\u4e2a\u7537\u751f\u4e0d\u5435\u67b6\uff0c\u90a3\u4e48\u628a\u5973\u751f\u6240\u5728\u8054\u901a\u5757\u4e0e\u8be5\u7537\u751f\u8fde\u63a5\u3002\n\n\u5148\u4e0d\u8003\u8651 $k$\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5176\u4e2d\u7684\u5973\u751f\u53ef\u4ee5\u9009\u62e9\u4e0e\u4e4b\u76f8\u8fde\u7684\u4efb\u4f55\u4e00\u4e2a\u7537\u751f\u73a9\u3002\u90a3\u4e48\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u8054\u901a\u5757\uff0c\u6700\u591a\u53ef\u4ee5\u8fdb\u884c\u7684\u6e38\u620f\u6b21\u6570\u5c31\u662f\u4e0e\u8054\u901a\u5757\u76f8\u8fde\u7684\u7537\u751f\u4eba\u6570\uff0c\u8bb0\u4e3a $cnt_i$\u3002\n\n\u800c\u4e00\u4e2a\u5973\u751f\u53ef\u4ee5\u5f3a\u5236\u548c $k$ \u4e2a\u7537\u751f\u73a9\uff0c\u4e14\u6700\u591a\u663e\u7136\u53ea\u80fd\u8fdb\u884c $n$ \u6b21\u6e38\u620f\u3002\u6545\u6700\u7ec8\u7b54\u6848\u4e3a\n\n$$\\min\\left\\{\\sum\\limits_{i=1}^ncnt_i+k,n\\right\\}$$\n\n## $\\textbf{AC Code}$\n```cpp\n#include <bits/stdc++.h>\nconst int N = 520;\nconst int M = 62500;\nconst int INF = 2e9;\nint fa[M], cnt[M];\nint n, m, k, f;\nint ans = INF;\nbool vis[N][N];\n\nstruct Edge {\n\tint u, v;\n\tEdge(int u, int v) : u(u), v(v) {}\n};\nstd::vector<Edge> vec;\n\ninline int find(int x) {\n\treturn x == fa[x] ? x : fa[x] = find(fa[x]);\n}\n\ninline void merge(int x, int y) {\n\tint fx = find(x), fy = find(y);\n\tif(fx != fy) fa[fx] = fy;\n}\n\nsigned main() {\n\tstd::cin >> n >> m >> k >> f;\n\tfor(int i = 1; i <= n; i++) fa[i] = i;\n\tfor(int i = 1, u, v; i <= m; i++) {\n        std::cin >> u >> v;\n\t\tvec.push_back(Edge(u, v));\n\t}\n\tfor(int i = 1, u, v; i <= f; i++) {\n        std::cin >> u >> v;\n\t\tmerge(u, v);\n\t}\n\tfor(int i = 1; i <= m; i++) {\n        int u = find(vec[i].u);\n        int v = vec[i].v;\n\t\tif(vis[u][v]) continue;\n        cnt[u]++, vis[u][v] = 1;\n    }\n\tfor(int i = 1; i <= n; i++) {\n        if(!cnt[i]) continue;\n\t\tans = std::min(ans, cnt[i]);\n\t}\n\tstd::cout << std::min(ans + k, n);\n\treturn 0;\n}\n```",
        "postTime": 1652423563,
        "uid": 498779,
        "name": "Matrix_mlt",
        "ccfLevel": 4,
        "title": "P1682 \u8fc7\u5bb6\u5bb6 \u9898\u89e3"
    },
    {
        "content": "~~\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u4f7f\u7528 STL\uff0c\u6240\u4ee5\u7528 Bitset \u8fc7\u4e86\u8fd9\u4e2a\u9898 \u3002~~\n\n\n### \u9898\u610f\n\u5bf9\u4e8e\u6bcf\u4e2a\u5973\u751f\u53ca\u4e0e\u5176\u670b\u53cb\u8282\u70b9\u5212\u5206\u4e3a\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u7b54\u6848\u5c31\u662f\u6bcf\u4e2a\u8054\u901a\u5757\u76f8\u8fde\u7684\u7537\u751f\u6570\u52a0\u4e0a\u53ef\u5f3a\u5236\u63a5\u53d7\u7684\u6570\u91cf\u7684\u6700\u5c0f\u503c \u3002\n\n\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u7b54\u6848\u7684\u503c\u591a\u4e8e\u7537\u751f\u6570\u91cf\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c06\u7b54\u6848\u548c\u7537\u751f\u4eba\u6570\u53bb\u4e00\u4e2a\u6700\u5c0f\u503c \u3002\n\n--------------\n\n### \u601d\u8def \n\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u5973\u751f\u7684\u8054\u901a\u5757\uff0c\u4f46\u662f\u7537\u751f\u600e\u4e48\u5904\u7406 ?\n\n\u4e8e\u662f\u6211\u60f3\u5230\u4e86 Bitset\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5b58\u50a8\u4e0e\u5973\u751f\u8282\u70b9\u76f8\u8fde\u7684\u7537\u751f\u6709\u8c01\uff0c\u7ef4\u62a4\u4e0e\u8054\u901a\u5757\u76f8\u8fde\u7684\u7537\u751f\u65f6\u53ea\u7528\u5c06\u8054\u901a\u7684\u5973\u751f\u8282\u70b9\u7684 Bitset \u6309\u4f4d\u6216\u8d77\u6765\u5c31\u53ef\u4ee5\u5f88\u5feb\u7684\u7ef4\u62a4\u7b54\u6848\u4e86 \u3002\n\n------------\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u60f3\u8fd9\u9053\u9898\u4f7f\u7528 Bitset \u7684\u4f18\u70b9 \uff1a\n\n- \u64cd\u4f5c\u65b9\u4fbf\uff0c\u76f4\u63a5\u5c06\u4e24\u4e2a Bitset \u6216\u4e00\u4e0b\u5c31\u884c\n- \u4e0d\u7528\u53bb\u91cd\uff0c\u4e0d\u7528\u5224\u65ad\u4e24\u4e2a\u5973\u751f\u8282\u70b9\u53ef\u4ee5\u76f4\u63a5\u63a5\u53d7\u540c\u4e00\u4e2a\u7537\u751f\uff0c\u56e0\u4e3a\u6216\u8d77\u6765\u4e4b\u540e\u76f8\u540c\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u6709\u65b0\u589e\u8d21\u732e\u3002\n\n~~\uff08\u4e8e\u662f\u6211\u5c31\u62ff\u4e86\u4e2a\u6700\u4f18\u89e3\u3002\u3002~~\n\n-------------------\n\nCode\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define _ =read()\nint read(){\n    int x=0,f=1;\n\tchar c=getchar();\n    while(c<'0'||c>'9') {if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return x*f;\n}\nbitset<260> s[260];\nint n;\nint m;\nint f;\nint k;\nint fa[260];\nint find(int x){ return fa[x]==0?fa[x]=x:fa[x]==x?x:fa[x]=find(fa[x]);}\nsigned main(){\n\tn _;\n\tm _;\n\tk _;\n\tf _;\n\tfor(int x,y,i=1;i<=m;++i){\n\t\tx _;\n\t\ty _;\n\t\ts[x][y]=1;\n\t}\n\tfor(int i=1,x,y;i<=f;++i){\n\t\tx _;\n\t\ty _;\n\t\tint fx=find(x);\n\t\tint fy=find(y);\n\t\ts[fx]|=s[fy];\n\t\ts[fy]|=s[fx];\n\t\tif(fx!=fy) fa[fy]=fa[x];\n\t}\n\tint ans=INT_MAX;\n\tfor(int i=1;i<=n;i++){\n\t\ts[i]|=s[find(i)];\n\t}\n\t\n\tfor(int i=1;i<=n;++i) ans=min(ans,int(s[i].count()+k));\n\tcout<<min(ans,n);\n\treturn 0;\n}\n\n```\n9.11 Update\uff1a\u611f\u8c22 @Whitharm \u63d0\u4f9b\u7684 hack , \uff08 \u672a\u5728\u6700\u540e\u4f7f\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u7684\u8282\u70b9\u7684 bitset \u7edf\u4e00 \uff09 \u5df2\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539 \u3002\n",
        "postTime": 1629509295,
        "uid": 106103,
        "name": "Rikka__",
        "ccfLevel": 4,
        "title": "P1682 \u8fc7\u5bb6\u5bb6"
    },
    {
        "content": "# \u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011\n\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9053\u9898\u662f\u771f\u7684\u6709\u70b9\u6c34\u3002\n\n\u4e00\u9053\u7528\u5e76\u67e5\u96c6\u53ef\u4ee5\u7206\u5207\u7684\u9898\u76ee\u3002\n\n\u9996\u5148\u770b\u4e00\u5f20\u56fe\uff08\u70b9\u52a0\u7c97\u7684\u7684\u662f\u5973\u751f\uff0c\u53cd\u4e4b\u662f\u7537\u751f\uff09\uff08\u8fd9\u662f\u9898\u76ee\u7684\u6837\u4f8b\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hhhnca0z.png)\n\n$1$ \u548c $4$\uff0c$2$ \u548c $3$ \u95f4\u7684\u8fde\u7ebf\u8868\u793a\u5979\u4eec\u662f\u670b\u53cb\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u6240\u63cf\u8ff0\u7684\uff1a\n\t\n       \u5982\u679c\u7f16\u53f7\u4e3aX\u7684\u5973\u751f\u7684\u670b\u53cb(\u4e5f\u662f\u5973\u751f\uff0c\u4e14\u7f16\u53f7\u4e3aY)\u4e0d\u548c\u7f16\u53f7\u4e3aZ\u7684\u7537\u751f\u5435\u5634\uff0c\u90a3\u4e48X\u4e5f\u53ef\u4ee5\u9009\u62e9Z\n       \n\u90a3\u4e48\u7531 $1$ \u548c $4$ \u7ec4\u6210\u7684\u670b\u53cb\u5173\u7cfb\u5c31\u662f\u7684\u5979\u4eec\u53ef\u4ee5\u548c $5$\uff0c$6$\uff0c$8$ \u4e00\u8d77\u73a9\uff0c\u6240\u4ee5\u6709\u4e09\u79cd\u9009\u62e9\u3002\n\n\u800c $2$ \u548c $3$ \u5c31\u80fd\u548c $6$\uff0c$7$ \u4e00\u8d77\u73a9\uff0c\u6240\u4ee5\u53ea\u6709\u4e24\u79cd\u9009\u62e9\u3002\n\n\u800c\u4f46\u6e38\u620f\u8fdb\u884c\u5b8c\u7b2c\u4e8c\u8f6e\u4e4b\u540e\uff0c$2$ \u548c $3$ \u5c31\u65e0\u6cd5\u5728\u548c\u522b\u4eba\u5b8c\uff0c\u6240\u4ee5\u6e38\u620f\u5c31\u7ed3\u675f\u4e86\u3002\n\n\u800c\u53c8\u5f3a\u884c\u8ba9 $k$ \u4e2a\u4eba\u6765\u73a9\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u662f\u7528\u5e76\u67e5\u96c6\u628a\u5973\u751f\u4eec\u901a\u8fc7\u670b\u53cb\u5173\u7cfb\u8fde\u6210\u51e0\u4e2a\u8fde\u901a\u5757\uff0c\u518d\u628a\u6240\u6709\u8fde\u901a\u5757\u53ef\u4ee5\u9009\u7684\u7537\u751f\u4e2a\u6570\u7684\u6700\u5c0f\u503c\u53d6\u51fa\u6765\u8bb0\u4e3a $res$\u3002 \n\n\u800c\u6700\u7ec8\u7684\u7b54\u6848\u4e00\u5b9a\u8981\u628a\u7ed3\u679c\u4e0e\u6700\u5927\u6e38\u620f\u8f6e\u6570 $n$ \u53d6\u8f83\u5c0f\u503c\n\n$$\nans = \\min(res+k,n)\n$$\n\n\n# code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int SIZE = 2e2 + 75;\nconst int inf = 1e9 + 50;\n\ninline int read()\n{\n\tint x = 0,f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn f * x;\n}\n\nint n,m,k,f,ans = inf;\nint fa[SIZE];\nbool vis[SIZE][SIZE];\n\ninline int get_root(int u)\n{\n\treturn fa[u] == u ? u : fa[u] = get_root(fa[u]);\n}\n\ninline bool pd(int u,int v)\n{\n\treturn get_root(u) == get_root(v) ? true : false;\n}\n\ninline void merge(int u,int v)\n{\n\tpd(u,v) ?  : fa[u] = get_root(v);\n}\n\ninline void add(int u)\n{\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (vis[u][i])\n\t\t\tvis[get_root(u)][i] = true;\n}\n\nint main()\n{\n\tn = read();m = read();k = read();f = read();\n\tfor (int i = 1; i <= n; ++i) fa[i] = i;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint x = read(),y = read();\n\t\tvis[x][y] = true;\n\t}\n\tfor (int i = 1; i <= f; ++i) merge(read(),read());\n\tfor (int i = 1; i <= n; ++i) add(i);\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (fa[i] == i)\n\t\t{\n\t\t\tint res = 0;\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t\tif (vis[i][j])\n\t\t\t\t\tres++;\n\t\t\tans = min(ans,res);\n\t\t}\n\tans = min(ans+k,n);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1610450064,
        "uid": 415231,
        "name": "nomonick",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u7528\u7684\u5e76\u67e5\u96c6\u505a\u7684\uff1f\n\n\u8fd9\u9053\u9898\u7c7b\u4f3c\u4e8e\u3010CQOI2009\u3011\u8df3\u821e\n\n\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206+\u62c6\u70b9+\u6700\u5927\u6d41\u7684\u65b9\u6cd5\u8fdb\u884c\u64cd\u4f5c\n\n\u5c06\u6bcf\u4e00\u4e2a\u5973\u751f\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u4e00\u4e2a\u7ba1\u7406\u5435\u67b6\u7684\uff0c\u4e00\u4e2a\u7ba1\u7406\u4e0d\u5435\u67b6\u7684\u3002\n\n\u62c6\u6210\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ak\uff0c\u8868\u793a\u6700\u591a\u9009k\u4e2a\u4e0d\u5435\u67b6\u7684\u3002\n\n\u7537\u751f\u548c\u5973\u751f\u4e4b\u95f4\u9700\u8981\u8fde\u8fb9\uff0c\u5982\u679c\u4e0d\u4e92\u76f8\u5435\u67b6\uff0c\u8fde\u5411\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u5426\u5219\u8fde\u5411\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5bb9\u91cf\u4e3a1\u3002\n\n\u5c06\u6bcf\u4e2a\u7537\u751f\u4e0e\u5973\u751f\u7b2c\u4e8c\u4e2a\u70b9\u5206\u522b\u4e0e\u6e90\u6c47\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u4e8c\u5206\u51fa\u6765\u7684mid\uff0c\u8868\u793a\u8ba9\u4ed6\u4eec\u6761mid\u6b21\u821e\u3002\n\n\u63a5\u4e0b\u6765\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u68c0\u9a8c\u8dd1\u51fa\u6765\u7684\u7b54\u6848\u662f\u5426==n\\*mid\uff0c\u82e5\u76f8\u7b49\uff0c\u8bf4\u660e\u53ef\u4ee5\u8df3mid\u6b21\u821e\uff0c\u9700\u8981\u5c06\u4e8c\u5206\u4e0b\u754c\u4e0a\u8c03\uff0c\u5426\u5219\u4e0a\u754c\u4e0b\u8c03\u3002\n\n\u6700\u7ec8\u8f93\u51fa\u4e8c\u5206\u7684Right\u5373\u53ef\u3002\n\n\u8d34\u4e0a\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<iomanip>\n#include<cstring>\n#include<cstdlib>\n#include<vector>\n#include<cstdio>\n#include<cmath>\n#include<queue>\nusing namespace std;\ninline const int Get_Int() {\n    int num=0,bj=1;\n    char x=getchar();\n    while(x<'0'||x>'9') {\n        if(x=='-')bj=-1;\n        x=getchar();\n    }\n    while(x>='0'&&x<='9') {\n        num=num*10+x-'0';\n        x=getchar();\n    }\n    return num*bj;\n}\nconst int maxn=5005;\nstruct Edge {\n    int from,to,cap,flow;\n};\nstruct Dinic {\n    int n,m,s,t;\n    vector<Edge>edges;\n    vector<int>G[maxn];\n    bool vst[maxn];\n    int dist[maxn],Current[maxn]; //dist\u8868\u5c42\u6b21 Current\u8868\u5f53\u524d\u5f27\u4e0b\u6807 \n    void init(int n) {\n        this->n=n;\n        edges.clear();\n        for(int i=1; i<=n; i++)G[i].clear();\n    }\n    void AddEdge(int from,int to,int cap) {\n        edges.push_back((Edge) {\n            from,to,cap,0\n        });\n        edges.push_back((Edge) { //\u53cd\u5411\u8fb9 \n            to,from,0,0\n        });\n        m=edges.size();\n        G[from].push_back(m-2);\n        G[to].push_back(m-1);\n    }\n    bool Bfs() { //Bfs\u6c42\u51fa\u5c42\u6b21\u56fe \n        memset(vst,0,sizeof(vst));\n        memset(dist,0,sizeof(dist));\n        queue<int>Q;\n        Q.push(s);\n        dist[s]=0;\n        vst[s]=1;\n        while(!Q.empty()) {\n            int Now=Q.front();\n            Q.pop();\n            for(int i=0; i<G[Now].size(); i++) {\n                Edge& e=edges[G[Now][i]];\n                int Next=e.to;\n                if(!vst[Next]&&e.cap>e.flow) { //\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5efa\u5c42\u6b21\u56fe \n                    vst[Next]=1;\n                    dist[Next]=dist[Now]+1;\n                    Q.push(Next);\n                }\n            }\n        }\n        if(vst[t])return true;\n        else return false; //\u5c42\u6b21\u56fe\u4e0d\u80fd\u5efa\u5230\u6c47\u70b9,\u5df2\u65e0\u589e\u5e7f\u8def \n    }\n    int Dfs(int Now,int a) { //a\u662f\u53ef\u589e\u5e7f\u91cf \n        if(Now==t||a==0)return a;\n        int flow=0;\n        for(int& i=Current[Now]; i<G[Now].size(); i++) { //\u5f15\u7528\u4f20\u8fb9,\u76f4\u63a5\u4ece\u4e0a\u4e00\u6b21\u8003\u8651\u7684\u5f27\u589e\u5e7f \n            Edge& e=edges[G[Now][i]];\n            int Next=e.to;\n            if(dist[Now]+1!=dist[Next])continue; //\u4e0d\u5728\u5c42\u6b21\u56fe\u4e2d\n            int Nextflow=Dfs(Next,min(a,e.cap-e.flow)); //\u5c06\u540e\u9762\u904d\u5386\u5b8c\u6210\n            if(Nextflow>0) {\n                e.flow+=Nextflow;\n                edges[G[Now][i]^1].flow-=Nextflow; //\u53cd\u5411\u5f27\n                flow+=Nextflow;\n                a-=Nextflow;\n                if(a==0)break; \n            } \n        }\n        return flow;\n    }\n    int MaxFlow(int s,int t) {\n        this->s=s;\n        this->t=t;\n        int flow=0;\n        while(Bfs()) { //\u4e0d\u65ad\u5efa\u7acb\u5c42\u6b21\u56fe,\u4e0d\u80fd\u5efa\u7acb\u65f6\u9000\u51fa \n            memset(Current,0,sizeof(Current));\n            flow+=Dfs(s,0x7fffffff/2); //Dfs\u589e\u5e7f \n        }\n        return flow;\n    }\n} dinic;\nint n,m,k,f,map[505][505];\nvoid Floyd() {\n    for(int k=n+1; k<=2*n; k++)\n        for(int i=1; i<=n; i++)\n            for(int j=n+1; j<=2*n; j++)\n                map[i][j]=map[i][j]||(map[i][k]&&map[k][j]);\n}\nint main() {\n    n=Get_Int();\n    m=Get_Int();\n    k=Get_Int();\n    f=Get_Int();\n    for(int i=1; i<=m; i++) {\n        int y=Get_Int(),x=Get_Int();\n        map[x][n+y]=1;\n    }\n    for(int i=1; i<=f; i++) {\n        int x=Get_Int(),y=Get_Int();\n        map[n+x][n+y]=map[n+y][n+x]=1;\n    }\n    Floyd();\n    int Left=0,Right=250;\n    while(Left<=Right) {\n        int mid=(Left+Right)>>1;\n        dinic.init(4*n+5);\n        for(int i=1; i<=n; i++)dinic.AddEdge(3*n+2,i,mid);\n        for(int i=1; i<=n; i++)dinic.AddEdge(2*n+i,3*n+3,mid),dinic.AddEdge(n+i,2*n+i,k);\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=n; j++)\n                if(map[i][n+j])dinic.AddEdge(i,2*n+j,1);\n                else dinic.AddEdge(i,n+j,1);\n        if(dinic.MaxFlow(3*n+2,3*n+3)>=n*mid)Left=mid+1;\n        else Right=mid-1;\n    }\n    printf(\"%d\\n\",Right);\n    return 0;\n}\n```",
        "postTime": 1489843908,
        "uid": 31877,
        "name": "BillYang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    },
    {
        "content": "\u6839\u636e\u9898\u76ee\uff0c\u7531\u4e8e\u5973\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u53ef\u4ee5\u76f8\u4e92\u4f20\u9012\uff0c\u8003\u8651\u5e76\u67e5\u96c6\u3002\n\n\u4e4b\u540e\u9996\u5148\u60f3\u5230\u7684\u64cd\u4f5c\u5c31\u662f\u5bf9\u4e8e\u8f93\u5165\u7684\u6bcf\u4e00\u5bf9\u5973\u751f\u5173\u7cfb\uff0c\u7528\u5e76\u67e5\u96c6\u5c06\u5973\u751f\u5212\u5206\u4e3a\u82e5\u5e72\u8fde\u901a\u5757\u3002\n\n\u7136\u540e\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u53ca\u4e0e\u5176\u76f8\u8fde\u7684\u7537\u751f\uff0c\u5728\u8be5\u8fde\u901a\u5757\u5185\u6700\u591a\u8fdb\u884c\u7684\u6e38\u620f\u8f6e\u6570\u5373\u8fde\u63a5\u7684\u7537\u751f\u6570\u76ee\uff0c\u6240\u4ee5\u5e94\u5728\u52a0\u5165\u7537\u751f\u65f6\u540c\u6b65\u8bb0\u5f55\u5f53\u524d\u4e0e\u8fde\u901a\u5757\u76f8\u8fde\u7684\u7537\u751f\u6570 $cnt$\uff0c\u800c\u4e3a\u4e86\u907f\u514d\u91cd\u590d\uff0c\u5f15\u5165\u6570\u7ec4 $vis(i,j)$ \u6807\u8bb0\u7537\u751fj\u662f\u5426\u5df2\u7ecf\u5728\u4ee5\u7b2ci\u4e2a\u5973\u751f\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u8fde\u901a\u5757\u4e2d\u3002\n\n\u6700\u540e\u904d\u5386\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u5f97\u5230\u6700\u5c0f\u7684 $cnt$ \u5373\u4e3a\u7b54\u6848 $ans$\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u5973\u751f\u53ef\u4ee5\u5f3a\u5236\u9009\u62e9 $k$ \u4e2a\u7537\u751f\u8fdb\u884c\u6e38\u620f\uff0c\u6545\u5728\u5176\u4f59\u8fde\u901a\u5757\u4e2d\u7684\u7537\u751f\u8db3\u591f\u591a\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fdb\u884c $ans+k$ \u8f6e\u6e38\u620f\uff0c\u800c\u7531\u4e8e**\u6700\u591a\u53ea\u80fd\u8fdb\u884c $n$ \u8f6e\u6e38\u620f**\uff0c\u9700\u8981\u7279\u5224\uff0c\u5373 $ans=min(ans+k,n)$\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ninline int read(){\n\tregister int x=0,f=1;\n\tregister char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x*f; \n}\nconst int N=300;\nint n,m,k,ff;\nint x[N*N],y[N*N];\nint f[N],cnt[N];\nbool vis[N][N];\ninline int getf(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=getf(f[x]);\t\t\n}\nsigned main(){\n\tn=read(),m=read(),k=read(),ff=read();\n\tfor(register int i=1;i<=n;i++) f[i]=i;\n\tfor(register int i=1;i<=m;i++) x[i]=read(),y[i]=read();\n\tfor(register int i=1;i<=ff;i++){\n\t\tint x=read(),y=read();\n\t\tf[getf(x)]=getf(y);//\u5408\u5e76\u8fde\u901a\u5757 \n\t}\n\tfor(register int i=1;i<=m;i++){\n\t\tint fx=getf(x[i]);\n\t\tif(vis[fx][y[i]]) continue;\n\t\tvis[fx][y[i]]=1,cnt[fx]++;\n\t}\n\tint ans=1e9;\n\tfor(register int i=1;i<=n;i++) ans=min(cnt[getf(i)],ans);//\u5bf9\u6bcf\u4e2a\u7236\u4eb2\u8282\u70b9\u8fdb\u884c\u7edf\u8ba1 \n\tprintf(\"%d\",min(ans+k,n));\n\treturn 0;\n}\n```\n\u6c42\u901a\u8fc7\uff01\uff01\uff01",
        "postTime": 1649830336,
        "uid": 613616,
        "name": "zcxxn",
        "ccfLevel": 7,
        "title": "P1682 \u8fc7\u5bb6\u5bb6 \u9898\u89e3"
    },
    {
        "content": "## P1682 \u8fc7\u5bb6\u5bb6\n\n\u9898\u76ee\u63cf\u8ff0\n\u67092n\u4e2a\u5c0f\u5b66\u751f\u6765\u73a9\u8fc7\u5bb6\u5bb6\u6e38\u620f,\u5176\u4e2d\u6709n\u4e2a\u7537\u751f,\u7f16\u53f7\u4e3a1\u5230n,\u53e6\u5916n\u4e2a\u5973\u751f,\u7f16\u53f7\u4e5f\u662f1\u5230n.\u6bcf\u4e00\u4e2a\u5973\u751f\u53ef\u4ee5\u5148\u9009\u62e9\u4e00\u4e2a\u548c\u5979\u4e0d\u5435\u5634\u7684\u7537\u751f\u6765\u73a9,\u9664\u6b64\u4e4b\u5916,\u5982\u679c\u7f16\u53f7\u4e3aX\u7684\u5973\u751f\u7684\u670b\u53cb(\u4e5f\u662f\u5973\u751f,\u4e14\u7f16\u53f7\u4e3aY)\u4e0d\u548c\u7f16\u53f7\u4e3aZ\u7684\u7537\u751f\u5435\u5634,\u90a3\u4e48X\u4e5f\u53ef\u4ee5\u9009\u62e9Z.\u6b64\u5916,\u670b\u53cb\u5173\u7cfb\u662f\u53ef\u4ee5\u4f20\u9012\u7684,\u6bd4\u5982a\u548cb\u662f\u670b\u53cb,b\u548cc\u662f\u670b\u53cb,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3aa\u548cc\u4e5f\u662f\u670b\u53cb.\n\n\u5f53\u6bcf\u4e00\u4f4d\u5973\u751f\u90fd\u9009\u62e9\u4e86\u73a9\u4f34,\u90a3\u4e48\u4ed6\u4eec\u4f1a\u5f00\u59cb\u65b0\u4e00\u8f6e\u6e38\u620f.\u5728\u6bcf\u4e00\u8f6e\u540e,\u6bcf\u4e2a\u5973\u751f\u90fd\u4f1a\u5f00\u59cb\u53bb\u627e\u4e00\u4e2a\u65b0\u7684\u7537\u751f\u505a\u73a9\u4f34(\u4ee5\u524d\u6ca1\u9009\u8fc7).\u800c\u4e14\u6bcf\u4e00\u4e2a\u5973\u751f\u6700\u591a\u80fd\u5f3a\u5236k\u4e2a\u7537\u751f\u63a5\u53d7,\u65e0\u8bba\u4ed6\u4eec\u4ee5\u524d\u662f\u5426\u5435\u5634.\n\n\u73b0\u5728\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u786e\u5b9a\u8fd92n\u4e2a\u5c0f\u5b66\u751f\u6700\u591a\u80fd\u73a9\u51e0\u8f6e\u6e38\u620f.\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u67094\u4e2a\u6574\u6570n,m,k,f(3<=n<=250,0<m<n*n,0<=f<n).\n\nn\u8868\u793a\u67092n\u4e2a\u5c0f\u5b66\u751f,\u5176\u4e2dn\u4e2a\u7537\u751fn\u4e2a\u5973\u751f.\n\n\u63a5\u4e0b\u6765m\u884c,\u6bcf\u884c\u5305\u542b2\u4e2a\u6570\u5b57a,b\u8868\u793a\u7f16\u53f7\u4e3aa\u7684\u5973\u751f\u548c\u7f16\u53f7\u4e3ab\u7684\u7537\u751f\u4ece\u6ca1\u5435\u5634\u8fc7.\n\n\u518d\u63a5\u4e0b\u6765f\u884c,\u6bcf\u884c\u5305\u542b2\u4e2a\u6570\u5b57c,d\u8868\u793a\u7f16\u53f7\u4e3ac\u7684\u5973\u751f\u548c\u7f16\u53f7\u4e3ad\u7684\u5973\u751f\u662f\u670b\u53cb.\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e,\u8f93\u51fa\u4e00\u4e2a\u6574\u6570,\u8868\u793a2n\u4e2a\u5c0f\u5b66\u751f\u6700\u591a\u80fd\u73a9\u51e0\u8f6e.\n\n---\n\u8fd9\u4e00\u9898\u548c[P3153 [CQOI2009]\u8df3\u821e ](https://www.luogu.org/problemnew/show/P3153)\u51e0\u4e4e\u662f\u4e00\u6a21\u4e00\u6837\uff0c\u90a3\u7bc7\u9898\u89e3\u53ef\u4ee5[\u770b\u8fd9\u91cc](https://www.luogu.org/blog/QVQ/solution-p3153)\uff0c\u5efa\u56fe + \u6700\u5927\u6d41 + \u4e8c\u5206\u5373\u53ef\u5f97\u5230\u7b54\u6848\uff0c\u8fd9\u91cc\u4e0d\u5728\u8d58\u8ff0\uff0c\u5199\u8fd9\u7bc7\u9898\u89e3\u662f\u8981\u89e3\u51b3\u9898\u76ee\u4e2d**\u8fde\u901a\u6027**\u7684\u95ee\u9898\n\n\u9898\u76ee\u4e2d\u6709\u63d0\u5230\u8fc7\uff0c**\u670b\u53cb\u5173\u7cfb\u662f\u53ef\u4ee5\u4f20\u9012\u7684,\u6bd4\u5982a\u548cb\u662f\u670b\u53cb,b\u548cc\u662f\u670b\u53cb,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3aa\u548cc\u4e5f\u662f\u670b\u53cb**\uff0c\u636e\u6b64\u6211\u4eec\u6709\u4e24\u4e2a\u601d\u8def\uff1a\n\n1.\u5e76\u67e5\u96c6\n\n2.Floyd\n\n# \u5e76\u67e5\u96c6\u662f\u5426\u53ef\u884c\n\n\u867d\u7136\u6211\u5f88\u64c5\u957f\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u5f88\u53ef\u60dc\uff0c\u5e76\u67e5\u96c6\u7684\u505a\u6cd5\u5728\u8fd9\u9898\u5e76\u4e0d\u662f\u7279\u522b\u9002\u7528\uff1a\u7406\u7531\u5982\u4e0b\uff1a\n\n\u5e76\u67e5\u96c6\u7684\u6700\u5927\u7528\u5904\u662f\uff0c\u5229\u7528\u7236\u4eb2\u8fd9\u4e00\u6982\u5ff5\u5f88\u65b9\u4fbf\u7684**\u5224\u65ad\u4e24\u5143\u7d20\u662f\u5426\u5904\u4e8e\u540c\u4e00\u96c6\u5408**\uff0c\u4f46\u901a\u8fc7\u67d0\u4e00\u8282\u70b9\uff0c\u6211\u4eec\u4e0d\u80fd\u5f88\u5feb\u786e\u5b9a\u5176\u4ed6\u8282\u70b9\u662f\u5426\u4e0e\u4ed6\u5728\u4e00\u96c6\u5408\u5185\uff0c\u552f\u4e00\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u904d\u5386\u6240\u6709\u8282\u70b9\uff0c\u4e00\u4e00\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6545\u4e0d\u9002\u7528\u5e76\u67e5\u96c6\u3002\n\n# Floyd\u662f\u5426\u53ef\u884c\n\nFloyd\u7b97\u6cd5\u53ef\u4ee5\u5224\u65ad\u56fe\u7684\u8054\u901a\u6027\uff0c\u4f2a\u4ee3\u7801\u5927\u6982\u5982\u4e0b\uff1a\n\n```cpp\nfor(\u6240\u6709\u8282\u70b9\uff08\u4f5c\u4e3a\u4e2d\u95f4\u70b9\uff09){\n\tfor(\u6240\u6709\u8282\u70b9\uff08\u4f5c\u4e3a\u8d77\u70b9\uff09){\n    \tfor(\u6240\u6709\u8282\u70b9\uff08\u4f5c\u4e3a\u7ec8\u70b9\uff09){\n        \tif(\u8d77\u70b9\u4e0e\u4e2d\u95f4\u70b9\u8054\u901a && \u4e2d\u95f4\u70b9\u4e0e\u7ec8\u70b9\u8054\u901a)\n            \u8d77\u70b9\u4e0e\u7ec8\u70b9\u8054\u901a\n        \t}\n    \t}\n\t}\n```\n\n\u8fd9\u5c31\u662f**\u4f20\u9012\u95ed\u5305**\uff0c\u80fd\u9002\u7528\u4e0e\u8fd9\u9898\uff0c\u7406\u7531\u5982\u4e0b\uff1a\n\n\u5229\u7528\u4f20\u9012\u95ed\u5305\uff0c\u6211\u4eec\u5728\u5904\u7406\u5b8c\u5173\u7cfb\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8054\u901a\n\n\u6240\u4ee5\u6211\u4eec\u4f7f\u7528**Floyd\u4f20\u9012\u95ed\u5305**\uff0c\u89e3\u51b3\u5173\u7cfb\u95ee\u9898\uff0c\u4e0d\u8fc7\u8981\u5bf9\u4e0a\u8ff0\u4f2a\u4ee3\u7801\u505a\u9002\u5f53\u4fee\u6539\uff1a\uff08\u7537\u5b69B\u548c\u5973\u5b69A\u73a9 && \u5973\u5b69A\u548c\u5973\u5b69C\u662f\u670b\u53cb\uff09---> \u7537\u5b69\u548c\u5973\u5b69C\u73a9\n\n\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4ee3\u7801\uff1a\n\n```cpp\nvoid Floyd(){\n    for(int k = num + 1;k <= 2 * num;k++){//\u6240\u6709\u5973\u5b69\n        for(int i = 1;i <= num;i++){//\u6240\u6709\u7537\u5b69\n            for(int j = num + 1;j <= 2 * num;j++){//\u6240\u6709\u5973\u5b69\n                dance[i][j] |= dance[i][k] && dance[k][j];//\u7537\u5b69\u9009\u5973\u5b69\uff08\u5efa\u56fe\u662f\u4e5f\u662f\u5148\u7537\u5b69\u518d\u8fde\u5973\u5b69\uff09\n                }\n            }\n        }\n    }\n    \n    \n//\u4e3b\u51fd\u6570\u90e8\u5206\n    for(int i = 1;i <= nr;i++){\n        u = RD();v = RD();\n        dance[v][u + num] = 1;//\u5973\u5b69\u7f16\u53f7 + num\n        }\n    for(int i = 1;i <= nf;i++){\n        u = RD();v = RD();\n        dance[u + num][v + num] = dance[v + num][u + num] = 1;\n        }\n    Floyd();\n```\n\n\u6700\u540e\u4e8c\u5206\u591a\u6b21\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u9a8c\u8bc1\u7b54\u6848\u5373\u53ef\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 100019,INF = 1e9;\nint num,k,nr,nf,nume = 1;\nint dance[190][190];\nint frind[190][190];\nint s,t,maxflow;\nint head[maxn << 2];\nstruct Node{\n    int v,dis,nxt;\n    }E[maxn << 3];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nint d[maxn];\nbool bfs(){\n    queue<int>Q;\n    memset(d,0,sizeof(d));\n    d[s] = 1;\n    Q.push(s);\n    while(!Q.empty()){\n        int u = Q.front();Q.pop();\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(E[i].dis && !d[v]){\n                d[v] = d[u] + 1;\n                if(v == t)return 1;\n                Q.push(v);\n                }\n            }\n        }\n    return 0;\n    }\nint Dinic(int u,int flow){\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = head[u];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(d[v] == d[u] + 1 && rest && E[i].dis){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)d[v] = 0;\n            E[i].dis -= k;\n            E[i ^ 1].dis += k;\n            rest -= k;\n            }\n        }\n    return flow - rest;\n    }\nvoid build(int a){\n    memset(head,0,sizeof(head));\n    nume = 1;\n    for(int i = 1;i <= num;i++){\n        add(s,i,a);\n        add(i,s,0);//\u6e90\u70b9\u5230\u6bcf\u4e2a\u2642\n        add(i + num,i + 2 * num,k);\n        add(i + 2 * num,i + num,0);//\u2640\u5206\u4e24\u90e8\n        add(i + 2 * num,t,a);\n        add(t,i + 2 * num,0);//\u5973\u5230\u6c47\u70b9\n        }\n    for(int i = 1;i <= num;i++){\n        for(int j = num + 1;j <= 2 * num;j++){\n            if(dance[i][j]){\n                add(i,j + num,1);\n                add(j + num,i,0);\n                }\n            else{\n                add(i,j,1);\n                add(j,i,0);\n                }\n            }\n        }\n    }\nbool check(int mid){\n    build(mid);\n    maxflow = 0;\n    int flow = 0;\n    while(bfs())while(flow = Dinic(s,INF))maxflow += flow;\n    if(maxflow == mid * num)return 1;\n    return 0;\n    }\nint search(int l,int r){\n    int ans;\n    while(l <= r){\n        int mid = l + r >> 1;\n        if(check(mid))l = mid + 1,ans = mid;\n        else r = mid - 1;\n        }\n    return ans;\n    }\nvoid Floyd(){\n    for(int k = num + 1;k <= 2 * num;k++){\n        for(int i = 1;i <= num;i++){\n            for(int j = num + 1;j <= 2 * num;j++){\n                dance[i][j] |= dance[i][k] && dance[k][j];\n                }\n            }\n        }\n    }\nint main(){\n    num = RD();nr = RD();k = RD();nf = RD();\n    s = num * 4 + 19;t = s + 1;\n    int u,v;\n    for(int i = 1;i <= nr;i++){\n        u = RD();v = RD();\n        dance[v][u + num] = 1;\n        }\n    for(int i = 1;i <= nf;i++){\n        u = RD();v = RD();\n        dance[u + num][v + num] = dance[v + num][u + num] = 1;\n        }\n    Floyd();\n    printf(\"%d\\n\",search(0,num + k));\n    return 0;\n    }\n```",
        "postTime": 1524203690,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\uff1a\n\n\u6709 $n$ \u4e2a\u7537\u751f\u548c $n$ \u4e2a\u5973\u751f\uff0c\u6bcf\u6b21\u5973\u751f\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u4e0d\u4f1a\u5435\u67b6\u7684\u7537\u751f\u6765\u73a9\uff0c\u4e14\u53ef\u4ee5\u5f3a\u5236 $k$ \u4e2a\u7537\u751f\u8ddf\u5979\u73a9\uff0c\u6c42\u6700\u591a\u80fd\u73a9\u591a\u5c11\u8f6e\u3002\n\n### \u7b97\u6cd5\u8bb2\u89e3\uff1a\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u5408\u5e76\u5973\u751f\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u3002\n\n\u8003\u8651\u4e24\u4e2a\u5973\u751f\u662f\u670b\u53cb\uff0c\u628a\u5979\u4eec\u7528\u5e76\u67e5\u96c6\u52a0\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u8054\u901a\u5757\u3002\u5728\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u5973\u751f\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u4e2a\u7537\u751f\u73a9\u3002\u8fd9\u6837\u5047\u8bbe\u4e00\u5171\u5f62\u6210 $x$ \u4e2a\u8054\u901a\u5757\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u8fd9 $x$ \u4e2a\u8054\u901a\u5757\u4e2d\u7684\u53ef\u5339\u914d\u6570\u91cf\u7684\u6700\u5c0f\u503c\u3002\n\n\u6700\u540e\u522b\u5fd8\u4e86\u52a0\u4e0a $k$ \u4e0e $n$ \u6bd4\u8f83\uff0c\u7b54\u6848\u662f\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\u3002\n\n### \u603b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch == '-') f=-1 ; ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48) ; ch=getchar();}\n\treturn x*f;\n}\ninline void print(int x){\n\tif(x/10) print(x/10);\n\tputchar(x%10+'0');\n}\nconst int M = 1e5+10;\nint f[M],vis[500][500],cnt[M];\nint n,m,k,t,ans=INT_MAX;\ninline int find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nstruct dat{\n\tint x,y;\n}a[M];\nsigned main(){\n\tn=read(),m=read(),k=read(),t=read();\n\tfor(re int i(1) ; i<=n ; ++i) f[i] = i;\n\tfor(re int i(1) ; i<=m ; ++i) a[i].x=read(),a[i].y=read();\n\tfor(re int i(1) ; i<=t ; ++i){\n\t\tint x=read(),y=read();\n\t\tint fx=find(x),fy=find(y);\n\t\tif(fx == fy) continue;\n\t\tf[fx] = fy;\n\t}\n\tfor(re int i(1) ; i<=m ; ++i){\n\t\tif(!vis[find(a[i].x)][a[i].y]){\n\t\t\tcnt[find(a[i].x)]++;\n\t\t\tvis[find(a[i].x)][a[i].y]=1;\n\t\t}\n\t}\n\tfor(re int i(1) ; i<=n ; ++i) if(cnt[i]) ans=min(ans,cnt[i]);\n\tprintf(\"%d\",min(ans+k,n));\n\treturn 0;\n}\n\n```\n",
        "postTime": 1649768845,
        "uid": 226367,
        "name": "glorious_dream",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    },
    {
        "content": "# \u9898\u610f\uff1a\n\n\u6709 $n$ \u4e2a\u7537\u751f $n$ \u4e2a\u5973\u751f\uff0c\u7f16\u53f7\u90fd\u662f $1$ \u5230 $n$\u3002\n\u7537\u751f\u548c\u5973\u751f\u76f4\u63a5\u6709\u4e0d\u8ba8\u538c\u5173\u7cfb\uff0c\u90a3\u4e8c\u8005\u53ef\u4ee5\u4e00\u8d77\u73a9\u3002\u5973\u751f\u548c\u5973\u751f\u6709\u670b\u53cb\u5173\u7cfb\uff0c\u5973\u751f\u7684\u670b\u53cb\u7684\u4e0d\u8ba8\u538c\u7684\u7537\u751f\u4e5f\u53ef\u4ee5\u548c\u5973\u751f\u73a9\u3002\u5f53\u6240\u6709\u5973\u751f\u90fd\u627e\u5230\u73a9\u4f34\uff08\u4e5f\u53ef\u4ee5\u662f\u591a\u5bf9\u4e00\uff09\uff0c\u662f\u4e00\u8f6e\u6e38\u620f\uff0c\u7136\u540e\u53ef\u4ee5\u627e\u5176\u4ed6\u73a9\u4f34\u8fdb\u884c\u4e0b\u4e00\u8f6e\uff0c\u95ee\u6700\u591a\u8fdb\u884c\u51e0\u8f6e\u3002\u8fd8\u6709\u5c31\u662f\u6bcf\u4e2a\u5973\u751f\u53ef\u4ee5\u5f3a\u5236\u9009 $k$ \u4e2a\u73a9\u4f34\u3002\n\n# \u5206\u6790\uff1a\n\n\u4f5c\u4e3a\u6211\u81ea\u5df1\u505a\u51fa\u6765\u7684\u84dd\u9898\uff0c\u6709\u70b9\u5c0f\u6fc0\u52a8\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u610f\u4e4b\u4e0b\u9690\u85cf\u4e86\u4ec0\u4e48\u5462\uff1f\u663e\u7136\u662f\u4e00\u4e2a\u56fe\uff0c\u5176\u4e2d\u53ef\u4ee5\u5206\u4e3a\u5973\u751f\u4e4b\u95f4\u7684\u8fde\u8fb9\u548c\u7537\u5973\u4e4b\u95f4\u7684\u8fde\u8fb9\u3002\u90a3\u4e48\u5bf9\u4e8e\u5973\u751f\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u663e\u7136\u5979\u4eec\u6784\u6210\u7684\u8fde\u901a\u5757\u53ef\u4ee5\u5230\u8fbe\u5f7c\u6b64\u4efb\u610f\u76f8\u8fde\u7684\u7537\u751f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u6709 $cnt$ \u6b21\u6e38\u620f\uff0c\u6bcf\u6b21\u90fd\u662f\u591a\u5bf9\u4e00\uff0c\u5176\u4e2d $cnt$ \u4e3a\u8fde\u901a\u5757\u5411\u7537\u751f\u8fde\u51fa\u7684\u51fa\u8fb9\u6570\u91cf\u3002\n\n\u518d\u770b\u8fd9\u4e2a\u5f3a\u5236\u9009\uff0c\u5176\u5b9e\u4e5f\u6ca1\u5565\uff0c\u5c31\u662f\u7b54\u6848\u6b21\u6570\u52a0\u4e0a $k$ \uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5973\u751f\u90fd\u53ef\u4ee5\u518d\u9009 $k$ \u4e2a\uff0c\u90a3\u4e0d\u5c31\u662f\u518d\u8fdb\u884c $k$ \u8f6e\u4e5f\u5c31\u662f\u603b\u6570\u52a0\u4e0a $k$ \u5417\u3002\n\n\u7531\u6b64\u6211\u4eec\u603b\u7ed3\u51fa\u7b97\u6cd5\uff1a\u5e76\u67e5\u96c6\u7ef4\u62a4\u5973\u751f\u8fde\u901a\u5757\uff0c\u7edf\u8ba1\u5973\u751f\u8fde\u901a\u5757\u4e0e\u7537\u751f\u8fde\u8fb9\u6570\u91cf\uff0c\u53d6\u6700\u5c0f\u503c\uff08\u56e0\u4e3a\u6240\u6709\u5973\u751f\u90fd\u8981\u73a9\uff09\uff0c\u518d\u52a0\u4e0a $k$ \uff0c\u8fd8\u4e0d\u80fd\u8d85\u8fc7 $n$ \u56e0\u4e3a\u5973\u751f\u6700\u591a\u548c $n$ \u4e2a\u7537\u751f\u73a9 $n$ \u6b21\u5bf9\u5427\u3002\n\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7QWQ\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<climits>\nusing namespace std;\nconst int N = 255;\nstruct qwq{\n\tint u,v;\n}bg[N*N],gg[N];\nint fa[N],check[N][N],cnt[N],n,m,f,k;\ninline int findfa(int x){return fa[x] == x ? x : fa[x] = findfa(fa[x]);}\nsigned main(){\n\tscanf(\"%d%d%d%d\",&n,&m,&k,&f);\n\tfor(int i=1;i<=n;++i)fa[i] = i;\n\tfor(int i=1;i<=m;++i)scanf(\"%d%d\",&bg[i].u,&bg[i].v);\n\tfor(int i=1;i<=f;++i){\n\t\tscanf(\"%d%d\",&gg[i].u,&gg[i].v);\n\t\tint x = findfa(gg[i].u),y = findfa(gg[i].v);//\u5973\u751f\u5408\u5e76 \n\t\tif(x != y)fa[x] = y; \n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tint x = findfa(bg[i].u),y = bg[i].v;//\u53d6\u51fa\u7537\u5973qwq \n\t\tif(!check[x][y]){//\u7edf\u8ba1\u8be5\u5973\u751f\u8fde\u901a\u5757\u8fde\u591a\u5c11\u4e2a\u7537\u751f \n\t\t\tcheck[x][y] = 1;\n\t\t\tcnt[x]++;\n\t\t}\n\t}\n\tint ans = INT_MAX;\n\tfor(int i=1;i<=n;++i)ans = cnt[i] ? min(ans,cnt[i]) : ans;\n\tans += k;\n\tprintf(\"%d\",min(ans,n)); \n}\n```\n",
        "postTime": 1649770472,
        "uid": 141058,
        "name": "Xu_brezza",
        "ccfLevel": 0,
        "title": "P1682 \u8fc7\u5bb6\u5bb6"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c**\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5230\u7f51\u7edc\u6d41\u76f8\u5173\u77e5\u8bc6**\uff08\u5f53\u7136\uff0c\u7f51\u7edc\u6d41\u662f\u4e00\u79cd\u66f4\u901a\u7528\u7684\u65b9\u6cd5\uff09\u3002\n\n\u8003\u8651\u5230\u70b9\u4e4b\u95f4\u5b58\u5728\u8fd9\u4e24\u79cd\u5173\u7cfb\n\n1. \u7537\u751f\u548c\u5973\u751f\u4e4b\u95f4\uff0c\u53ef\u4ee5\u5728\u4e00\u8d77\n2. \u5973\u751f\u548c\u5973\u751f\u4e4b\u95f4\uff0c\u662f\u670b\u53cb\n\n\u6211\u4eec\u5bf9\u8fd9\u4e24\u79cd\u5173\u7cfb**\u5206\u522b\u5efa\u56fe**\u3002\n\n\u6613\u5f97\uff0c\u7531\u4e8e\u9898\u76ee\u670b\u53cb\u5173\u7cfb\u7684\u4f20\u9012\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u7528Floyd\u6216\u5e76\u67e5\u96c6\u9884\u5904\u7406\u597d\u8fd9\u4e9b\u201c\u5c0f\u56e2\u4f53\u201d\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u56e2\u4f53\u5185\u90e8\uff0c\u53ef\u4ee5\u5171\u4eab\u7537\u751f\u3002\u6613\u5f97\u5982\u679c\u5973\u751f\u8fd9\u8fb9\u53ea\u5b58\u5728\u8fd9\u4e2a\u5c0f\u56e2\u4f53\uff0c\u6e38\u620f\u8fdb\u884c\u7684\u6b21\u6570\u7b49\u4e8e\u8fd9\u4e2a\u5c0f\u56e2\u4f53\u5171\u540c\u80fd\u591f\u8fde\u63a5\u7684\u7537\u751f\u4e2a\u6570\u3002\n\n\u6211\u4eec\u5904\u7406\u51fa\u6240\u6709\u5c0f\u56e2\u4f53\u5355\u72ec\u80fd\u8fdb\u884c\u7684\u6e38\u620f\u6b21\u6570\uff0c\u5168\u5c40\u53d6min\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u8fd8\u6ca1\u6709\u8003\u8651k\uff0c\u6613\u5f97k\u76f4\u63a5\u4e0e\u524d\u9762\u7684\u7b54\u6848\u7d2f\u52a0\u518d\u4e0en\u53d6min\u5373\u53ef\uff0c\u56e0\u4e3a\u53ea\u8981\u8fd9\u4e2a\u6570\u5c0f\u4e8en\uff0c\u7ed9\u4e00\u6b21\u5f3a\u884c\u8fde\u63a5\u7684\u673a\u4f1a\uff0c\u4e00\u5b9a\u80fd\u628a\u6e38\u620f\u5ef6\u957f\u4e00\u56de\u5408\u3002\n\n\u8fd8\u662f\u653e\u4e00\u4e0b\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 255;\n\nint n,m,k,f;\nbool g[maxn][maxn];\nbool g2[maxn][maxn]; \nint x,y;\nbool vis[maxn];\nbool que[maxn];\nint numa,numb;\nint kokona = 0x3f3f3f3f;\n\nint get_ans(int numa,int numb){\n\treturn numa;\n}\n\nvoid floyed(){\n\tfor (int k=1;k<=n;k++){\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tfor (int j=1;j<=n;j++){\n\t\t\t\tif(g2[i][k] & g2[k][j])g2[i][j] = true;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin>>n>>m>>k>>f;\n\tfor (int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tg[x][y] = true;\n\t}\n\tfor (int i=1;i<=f;i++){\n\t\tcin>>x>>y;\n\t\tg2[x][y] = true;\n\t\tg2[y][x] = true;\n\t}\n\tfor (int i=1;i<=n;i++)g2[i][i]=true;\n\tfloyed();\n\tfor (int i=1;i<=n;i++){\n\t\tif(vis[i])continue;\n\t\tfor (int i=1;i<=n;i++)que[i]=false;\n\t\tnuma=numb=0;\n\t\tfor (int j=1;j<=n;j++){\n\t\t\tif(g2[i][j]){\n\t\t\t\tvis[j] = true;\n\t\t\t\tnumb++;\n\t\t\t\tfor (int k=1;k<=n;k++){\n\t\t\t\t\tif(g[j][k]){\n\t\t\t\t\t\tif(!que[k]){\n\t\t\t\t\t\t\tque[k] = true;\n\t\t\t\t\t\t\tnuma++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tkokona = min(kokona,get_ans(numa,numb));\n\t}\n\tcout<<min(kokona+k,n)<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1541244688,
        "uid": 65396,
        "name": "robin2333",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1682 \u3010\u8fc7\u5bb6\u5bb6\u3011"
    }
]