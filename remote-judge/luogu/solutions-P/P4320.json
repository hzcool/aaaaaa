[
    {
        "content": "\u8fd9\u9898\u600e\u4e48\u80fd\u6ca1\u6709\u6211\u5927LCT\u7684\u9898\u89e3\u5462\uff1f  \n\u867d\u7136\u6709\u4eba\u53d1\u8fc7\u4e00\u7bc7\uff0c\u4f46\u8fd8\u662f\u7528\u7684tarjan\u7b97\u6cd5\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u5730\u4f7f\u7528LCT\u3002  \n\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u89e3\u6cd5\u3002  \n****  \n\u6309\u7167\u4e00\u822c\u7684\u505a\u6cd5\uff0c\u9700\u8981\u6784\u9020\u5706\u65b9\u6811\u3002   \n\u90a3\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528LCT\u6765\u7ef4\u62a4\u3002  \n\n\u4e00\u5f00\u59cb\u56fe\u4e0a\u6709$n$\u4e2a\u70b9\uff0c\u90fd\u662f\u5706\u70b9(\u5373\u6743\u4e3a$1$\u7684\u70b9)  \n\u82e5\u6709\u4e00\u6761\u8fb9\u8981\u8fde\u4e0a$u,v$\u4e24\u4e2a\u70b9\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a  \n\n- \u82e5\u672a\u8fde\u901a\uff0c\u76f4\u63a5\u5c06$u,v$\u4e24\u70b9\u8fde\u4e0a\u3002  \n- \u82e5\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u4f1a\u590d\u6742\u4e00\u4e9b\uff1a\u9700\u8981\u628a$u$\u5230$v$\u4e0a\u7684\u6240\u6709\u8fb9\u65ad\u6389\uff0c\u7136\u540e\u518d\u628a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u8fde\u5411\u4e00\u4e2a\u65b9\u70b9(\u5373$0$\u6743\u70b9)\u3002\n\n\u597d\u4e86\u90a3\u600e\u4e48\u627e\u51fa\u8fd9\u6761\u8def\u5f84\u5462\uff1f  \n\u6309\u7167\u4e00\u822c\u8def\u5f84\u67e5\u8be2\u7684\u5957\u8def\uff0c\u6211\u4eec\u4f7f\u7528$\\texttt{split(u,v)}$\uff0c\u7136\u540e\u518d\u8fdb\u884c\u64cd\u4f5c\u3002  \n\u8fd9\u4e2a\u65f6\u5019\uff0c\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u5728\u8fd9\u68f5$\\texttt{splay}$\u91cc\u9762\u4e86\uff0c\u53ea\u9700\u8981\u6309\u53f3$\\rightarrow$\u6839$\\rightarrow$\u5de6\u7684\u987a\u5e8f\u904d\u5386\uff0c\u5c31\u80fd\u628a\u8def\u5f84\u4e0a\u7684\u70b9\u627e\u51fa\u6765\u5566\uff01  \n\u4e0d\u8fc7\u904d\u5386\u65f6\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u9700\u8981\u5148$\\texttt{pushdown}$\u4e00\u4e0b\uff0c\u628a\u7ffb\u8f6c\u6807\u8bb0\u4f20\u4e0b\u53bb\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a  \n```cpp\nvoid dfs(int u){\n\tpushdown(u);\n\tif(son[u][1]) dfs(son[u][1]);\n\tstack[++cnt] = u; //\u6700\u540e\u8fd9\u4e2astack\u91cc\u9762\u5b58\u7684\u5c31\u662f\u8def\u5f84\u4e0a\u7684\u70b9\n\tif(son[u][0]) dfs(son[u][0]);    \n}\n\ninline void find_path(int u,int v){\n\tsplit(u,v);\n\tcnt = 0;\n\tdfs(v);    \n}\n```\n\n\u5269\u4e0b\u5c31\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\uff0c\u76f4\u63a5\u4e0a\u4e2aLCT\u677f\u5b50\u5c31\u8fc7\u5566  \nps\uff1a\u5e38\u6570\u5de8\u5927  \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#define ll long long\n#define N 2000007\n#define reg register\n#define ls son[u][0]\n#define rs son[u][1]\nusing namespace std;\n\nint uf[N];\nint n,m,q,img,top;\n\ninline void read(int &x);\nvoid print(int x);\ninline int find(int x);\n\nstruct Link_Cut_Tree{\n    int s[N],st[N],r[N];\n    int fa[N],son[N][2],a[N],st2[N];\n\n    inline bool notroot(int u){\n        return son[fa[u]][0]==u||son[fa[u]][1]==u;\n    }\n\n    inline void pushup(int u){\n        s[u] = s[ls]+s[rs]+a[u];\n    }\n\n    inline void pushr(int u){\n        swap(ls,rs);\n        r[u] ^= 1;\n    }\n\n    inline void pushdown(int u){\n        if(!r[u]) return;\n        if(ls) pushr(ls);\n        if(rs) pushr(rs);\n        r[u] = 0;\n    }\n\n    inline void rotate(int x){\n        int y = fa[x],z = fa[y];\n        int k = son[y][1]==x,w = son[x][k^1];\n        if(notroot(y)) son[z][son[z][1]==y] = x;\n        son[x][k^1] = y;\n        son[y][k] = w;\n        if(w) fa[w] = y;\n        fa[y] = x,fa[x] = z;\n        pushup(y);\n    }\n\n    inline void splay(int x){\n        int y = x,z = 0;\n        st[++z] = y;\n        while(notroot(y)) st[++z] = y = fa[y];\n        while(z) pushdown(st[z--]);\n        while(notroot(x)){\n            y = fa[x],z = fa[y];\n            if(notroot(y)){\n                if((son[z][1]==y)==(son[y][1]==x)) rotate(y);\n                else rotate(x);\n            }\n            rotate(x);\n        }\n        pushup(x);\n    }\n\n    inline void access(int u){\n        for(reg int y=0;u;u=fa[u]){\n            splay(u);\n            rs = y;\n            pushup(u);\n            y = u;\n        }\n    }\n\n    inline void makeroot(int u){\n        access(u),splay(u);\n        pushr(u);\n    }\n    \n    inline int findroot(int u){\n        access(u),splay(u);\n        while(ls){\n            pushdown(u);\n            u = ls;\n        }\n        splay(u);\n        return u;\n    }\n    \n    inline void split(int u,int v){\n        makeroot(u);\n        access(v),splay(v);\n    }\n\n    inline void link(int u,int v){\n        makeroot(u);\n        fa[u] = v;\n    }\n\n    inline void cut(int u,int v){\n        makeroot(u);\n        if(findroot(v)!=u||fa[v]!=u||son[v][0]) return;\n        fa[v] = son[u][1] = 0;\n        pushup(u);\n    }\n\n    inline int query(int u,int v){\n        split(u,v);\n        return s[v];\n    }\n\n    void divide(int u){\n        pushdown(u);\n        if(rs) divide(rs);\n        st2[++top] = u;\n        if(ls) divide(ls);\n    }\n\n    inline void rebuild(int u,int v,int w){\n        split(u,v); \n        top = 0;\n        divide(v);\n        for(reg int i=1;i<top;++i) cut(st2[i],st2[i+1]); //\u628a\u539f\u5148\u8def\u5f84\u4e0a\u7684\u8fb9\u90fd\u65ad\u6389\n        for(reg int i=1;i<=top;++i) link(st2[i],w); //\u8fde\u5230\u4e00\u4e2a\u65b9\u70b9\u4e0a\u53bb\n    }\n}T;\n\nint main(){\n    int u,v;\n    read(n),read(m);\n    for(reg int i=1;i<=n;++i){\n        uf[i] = i;\n        T.a[i] = 1; //\u521d\u59cb\u7684n\u4e2a\u70b9\u6743\u503c\u90fd\u662f1\n    }\n    img = n+1;\n    for(reg int i=1;i<=m;++i){\n        read(u),read(v);\n        if(find(u)==find(v)){\n            if(T.query(u,v)<=2) continue; //\u526a\u679d\u4f18\u5316: \u5982\u679c\u9664\u4e86\u7aef\u70b9,\u5269\u4e0b\u7684\u90fd\u662f\u65b9\u70b9,\u5c31\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7,\u65e0\u9700\u64cd\u4f5c\n            T.rebuild(u,v,img++);\n        }else{\n            T.link(u,v);\n            uf[find(u)] = find(v);\n        }\n    }\n    read(q);\n    while(q--){\n        read(u),read(v);\n        print(T.query(u,v));\n        putchar('\\n');\n    }\n    return 0;\n}\n\ninline int find(int x){\n    while(x^uf[x]) x = uf[x] = uf[uf[x]];\n    return x;\n}\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n```\n\nps ps\uff1a\u5173\u4e8e\u590d\u6742\u5ea6\u7684\u52bf\u80fd\u5206\u6790(\u4e0d\u4e25\u8c28)\u8bc1\u660e   \n\n\u8bbe\u8fd9\u68f5\u6811\u4e00\u5f00\u59cb\u7684\u52bf\u80fd\u4e3a$n$\u3002  \n\u6bcf\u6b21\u8fdb\u884c$\\texttt{rebuild}$\u64cd\u4f5c\u65f6\uff0c\u5047\u8bbe\u65ad\u4e86$x$\u6761\u8fb9\uff0c\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a$\\Theta(x\\log n)$  \n\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u53c8\u6709\u4e00\u6761\u957f\u5ea6\u4e3a$x$\u7684\u94fe\u6d88\u5931\u4e86\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f$x$\u6761\u957f\u5ea6\u4e3a$1$\u7684\u94fe\u3002  \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u770b\u505a\u662f\u5b83\u7684\u52bf\u80fd\u964d\u4f4e\u4e86$x$\u3002  \n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e$\\texttt{rebuild}$\u64cd\u4f5c\uff0c\u6700\u591a\u65ad$n$\u6b21\u3001\u8fde$n$\u6b21\u8fb9\uff0c\u5b83\u7684\u52bf\u80fd\u964d\u5230\u6700\u4f4e\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u518d$\\texttt{rebuild}$\u4e86\u3002  \n\u4e8e\u662f\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5c31\u662f$\\Theta((n+q)\\log n)$\u7684\u3002\n",
        "postTime": 1557495670,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "P4320 \u7684\u65b0\u5947\u89e3\u6cd5"
    },
    {
        "content": "\u5927\u5bb6\u89c2\u5bdf\u4e00\u5f20\u56fe\n\n![](http://images.cnblogs.com/cnblogs_com/sdzwyq/1268719/o_%e5%9c%86%e6%96%b9%e6%a0%91.png)\n\n\u6709\u4ec0\u4e48\u53d1\u73b0?\n\n**\u5fc5\u7ecf\u70b9\u6570==\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u4e0a\u5706\u70b9\u6570**\n\n\u4e5f\u5c31\u7b49\u4e8e**\u8fb9\u6570/2+1**\n\n\u4e8e\u662f\u5bf9\u56fe\u5efa\u51fa\u5e7f\u4e49\u5706\u65b9\u6811(\u600e\u4e48\u5efa?$tarjan$\u6c42\u70b9\u53cc,\u5728\u4e00\u4e2a\u70b9\u53cc\u91cc\u7684\u5411\u4e00\u4e2a\u65b0\u5efa\u7684\u65b9\u70b9\u8fde\u8fb9\u5373\u53ef)\n\n\u7136\u540e\u6811\u5256\u6c42$lca$,\u7b54\u6848\u5c31\u662f$(dep[u]+dep[v]-2*dep[lca])/2+1$\n\n\u4eb2\u6d4b\u6811\u5256\u65f6\u95f4\u662f\u500d\u589e\u4e00\u534a\n\n```\n#define il inline\n#define ri register int\n#include<iostream>\nusing namespace std;\nconst int N=1e6+5,M=4e6+5;\nil int re(){\n    ri x=0,w=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*w;\n}\nint n,E,m,ts,tp,tot;\nint dfn[N],low[N],st[N],dep[N],top[N],sz[N],son[N],fa[N];\nstruct Graph{\n    int cnt,last[N],nxt[M],to[M];\n    il void link(ri u,ri v){\n        nxt[++cnt]=last[u];to[cnt]=v;last[u]=cnt;\n        nxt[++cnt]=last[v];to[cnt]=u;last[v]=cnt;\n    }\n}G,T;\nvoid tarjan(ri u){\n    dfn[u]=low[u]=++ts;st[++tp]=u;\n    for(ri i=G.last[u],v;i;i=G.nxt[i]){\n        v=G.to[i];\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n            if(low[v]>=dfn[u]){\n                T.link(++tot,u);\n                ri x=0;\n                do{\n                    x=st[tp--];T.link(tot,x);\n                }while(x!=v);\n            }\n        }\n        else low[u]=min(low[u],dfn[v]);\n    }\n}\nvoid dfs1(ri u){\n    sz[u]=1;\n    for(ri i=T.last[u],v;i;i=T.nxt[i]){\n        v=T.to[i];\n        if(v==fa[u])continue;\n        dep[v]=dep[u]+1;\n        fa[v]=u;\n        dfs1(v);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[son[u]])son[u]=v;\n    }\n}\nvoid dfs2(ri u,ri Tp){\n    top[u]=Tp;\n    if(son[u])dfs2(son[u],Tp);\n    for(ri i=T.last[u],v;i;i=T.nxt[i]){\n        v=T.to[i];\n        if(v==son[u]||v==fa[u])continue;\n        dfs2(v,v);\n    }\n}\nil int Query(ri x,ri y){\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])swap(x,y);\n        x=fa[top[x]];\n    }\n    return dep[x]<dep[y]?x:y;\n}\nint main(){\n    tot=n=re(),E=re();\n    for(ri i=1,u,v;i<=E;i++){\n        u=re(),v=re();\n        G.link(u,v);\n    }\n    tarjan(1);\n    dep[1]=1;dfs1(1);dfs2(1,1);\n    m=re();\n    ri u,v,lca;\n    while(m--){\n        u=re(),v=re();\n        lca=Query(u,v);\n        printf(\"%d\\n\",(dep[u]+dep[v]-2*dep[lca])/2+1);\n    }\n    return 0;\n}\n```",
        "postTime": 1532961933,
        "uid": 59646,
        "name": "\u4e2d\u56fd\u98de\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4320 \u3010\u9053\u8def\u76f8\u9047\u3011"
    },
    {
        "content": "[\u9053\u8def\u76f8\u9047](https://www.luogu.com.cn/problem/P4320)\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\u548c\u82e5\u5e72\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u8def\u5f84\u5fc5\u7ecf\u8fc7\u7684\u70b9\u7684\u6570\u91cf\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u5728\u56fe\u4e0a\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u5148\u8003\u8651\u5728\u6811\u4e0a\u7684\u60c5\u51b5\u3002\n\n\u5728\u6811\u4e0a\u65f6\uff0c\u7531\u4e8e\u4e24\u70b9\u4e4b\u95f4\u53ea\u6709\u552f\u4e00\u8def\u5f84\uff0c\u6240\u4ee5\u5fc5\u7ecf\u70b9\u7684\u6570\u91cf\u5c31\u662f\u8def\u5f84\u4e0a\u70b9\u7684\u6570\u91cf\uff0c\u53ea\u9700\u8981\u6c42\u51fa\u4e24\u70b9\u7684 $\\text{LCA}$ \u5373\u53ef\u3002\n\n\u4f46\u5f53\u95ee\u9898\u5728\u56fe\u4e0a\u65f6\uff0c\u5c31\u9ebb\u70e6\u4e86\u8d77\u6765\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u5982\u4f55\u5c06\u5728\u56fe\u4e0a\u7684\u60c5\u51b5\u8f6c\u5316\u4e3a\u5728\u6811\u4e0a\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u4e00\u79cd\u53eb\u505a\u5706\u65b9\u6811\u7684\u795e\u5947\u7684\u4e1c\u897f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n#### \u4ec0\u4e48\u662f\u5706\u65b9\u6811\uff1f\n\n\u5706\u65b9\u6811\u662f\u4e00\u79cd\u5c06\u56fe\u53d8\u4e3a\u6811\u7684\u65b9\u6cd5\uff0c\u5b83\u4e00\u822c\u7528\u4e8e\u5904\u7406\u4ed9\u4eba\u638c\uff0c\u4f46\u6709\u65f6\u4e5f\u53ef\u4ee5\u5728\u4e00\u822c\u7684\u65e0\u5411\u56fe\u4e0a\u4f7f\u7528\u3002\n\n#### \u5706\u65b9\u6811\u80fd\u5e72\u5417\uff1f\n\n\u6211\u4eec\u77e5\u9053\uff0c\u8bb8\u591a\u95ee\u9898\u5728\u6811\u4e0a\u6709\u7740\u4f18\u79c0\u7684\u89e3\u6cd5\uff0c\u6bd4\u4e00\u822c\u56fe\u4e0a\u7684\u95ee\u9898\u7b80\u5355\u5f88\u591a\u3002\u800c\u5706\u65b9\u6811\u5c31\u53ef\u4ee5\u5c06\u4e00\u5f20\u56fe\u53d8\u6210\u6811\uff0c\u4ee5\u83b7\u5f97\u4f18\u79c0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n#### \u5706\u65b9\u6811\u600e\u4e48\u7528\uff1f\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u56fe\u4e0a\u5efa\u7acb\u4e00\u9897\u5706\u65b9\u6811\u3002\n\n\u4e00\u5f20\u56fe\uff1a\n\n![](https://i.328888.xyz/2023/01/22/OEwMH.md.png)\n\n\u5b83\u7684\u5706\u65b9\u6811\uff1a\n\n![](https://i.328888.xyz/2023/01/22/OEHnQ.md.png)\n\n\u5706\u65b9\u6811\u7531\u4e24\u79cd\u70b9\u6784\u6210\uff1a\u5706\u70b9\u548c\u65b9\u70b9\uff0c\u4e14\u76f8\u540c\u7c7b\u578b\u7684\u70b9\u4e0d\u76f4\u63a5\u76f8\u8fde\u3002\n\n\u5176\u4e2d\uff0c\u5706\u70b9\u90fd\u662f\u539f\u56fe\u4e2d\u7684\u70b9\uff0c\u800c\u65b9\u70b9\u5219\u662f\u65b0\u5efa\u7684\u70b9\u3002\n\n#### \u5177\u4f53\u5efa\u6cd5\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u56fe\u4e2d\u7684\u6240\u6709**\u70b9\u53cc\u8fde\u901a\u5206\u91cf**\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5efa\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u5c06\u6240\u6709\u7684\u8be5\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u5728\u65b0\u56fe\u4e2d\u5c06\u8fd9\u4e2a\u65b0\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u5bb9\u6613\u7684\u5199\u51fa\u4ee3\u7801\uff1a\n\n```\nvoid tarjan(int s){//\u627e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u8fc7\u7a0b\u5229\u7528tarjan\n    low[s]=dfnt[s]=++cnt;\n    sk[++tt]=s;//\u5165\u6808\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(!dfnt[v]){\n            tarjan(v);\n            low[s]=min(low[s],low[v]);\n            if(low[v]==dfnt[s]){//\u53d1\u73b0\u4e86\u70b9\u53cc\u8fde\u901a\u5206\u91cf\n                num++;//\u65b0\u7684\u70b9\u7684\u7f16\u53f7\n                for(int x=0;x!=v;tt--){\n                    x=sk[tt];\n                    add(nhead,x,num);\n                    add(nhead,num,x);//\u5728\u65b0\u56fe\u4e2d\u5efa\u8fb9\n                }\n                add(nhead,s,num);\n                add(nhead,num,s);//\u8fd9\u4e2a\u70b9\u672c\u8eab\u4e5f\u8981\u5efa\u8fb9\uff0c\u4f46\u4e0d\u80fd\u51fa\u6808\n            }\n        }\n        else low[s]=min(low[s],dfnt[v]);//\u66f4\u65b0\n    }\n}\n\n```\n\n\u90a3\u4e48\uff0c\u5728\u5c06\u56fe\u8f6c\u5316\u4e3a\u4e86\u5706\u65b9\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5904\u7406\u539f\u6709\u7684\u95ee\u9898\u5462\uff1f\n\n\u6211\u4eec\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u5728\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u5706\u70b9\u6570\u91cf\uff01\n\n\u90a3\u4e48\u8fd9\u5c31\u5bb9\u6613\u4e86\uff0c\u6211\u4eec\u5728\u5706\u65b9\u6811\u4e0a\u5c06\u5706\u70b9\u7684\u6743\u503c\u8bbe\u4e3a $1$\uff0c\u65b9\u70b9\u7684\u6743\u503c\u8bbe\u4e3a $0$\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u95f4\u6240\u6709\u70b9\u7684\u6743\u503c\u548c\u3002\n\n\u9884\u5904\u7406\u540e\u7528\u6811\u5256\u6216\u500d\u589e\u8dd1 $\\text{LCA}$ \u5c31\u597d\u4e86\u3002\uff08\u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u7528\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\uff09\n\n### \u6ce8\u610f\u4e8b\u9879\n\n\u5706\u65b9\u6811\u4e2d\u70b9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 $2n$\uff0c\u6240\u4ee5\u6570\u7ec4\u5f00\u53cc\u5411\u8fb9\u7684\u53cc\u500d\u3002\n\n\u5982\u679c\u56fe\u4e0d\u8fde\u901a\uff0c\u8fd8\u9700\u8981\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u8dd1\u4e00\u8fb9 $\\text{tarjan}$ \u548c\u6811\u5256\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=6666666;//\u516d\u500d\u7a7a\u95f4\uff08\u539f\u56fe\u65b0\u56fe\u4e00\u8d77\u5efa\uff09\n\nint to[N],nxt[N],head[N],w[N],nhead[N];\nint idx,n,m,q,in1,in2,cnt,tt,num;\nint dfn[N],rnk[N],son[N],top[N],siz[N],dep[N],fa[N];\nint low[N],dfnt[N],sk[N];\nint sum[N];\n\nvoid add(int h[],int u,int v){idx++;to[idx]=v;nxt[idx]=h[u];h[u]=idx;}\nvoid Swap(int &x,int &y){int t=x;x=y;y=t;}\n\nvoid tarjan(int s){\n    low[s]=dfnt[s]=++cnt;\n    sk[++tt]=s;\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(!dfnt[v]){\n            tarjan(v);\n            low[s]=min(low[s],low[v]);\n            if(low[v]==dfnt[s]){\n                num++;\n                for(int x=0;x!=v;tt--){\n                    x=sk[tt];\n                    add(nhead,x,num);\n                    add(nhead,num,x);\n                    w[x]=1;//\u70b9\u6743\u8d4b\u4e3a1\n                }\n                add(nhead,s,num);\n                add(nhead,num,s);\n                w[s]=1;\n            }\n        }\n        else low[s]=min(low[s],dfnt[v]);\n    }\n}\n\nvoid dfs_1(int s,int gr){//\u5e38\u89c4\u6811\u5256\n    dep[s]=dep[gr]+1;fa[s]=gr;\n    siz[s]=1;son[s]=-1;\n    for(int i=nhead[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==gr) continue;\n        dfs_1(v,s);\n        siz[s]+=siz[v];\n        if(son[s]==-1||siz[v]>siz[son[s]]) son[s]=v;\n    }\n}\n\nvoid dfs_2(int s,int tp){\n    top[s]=tp;dfn[s]=++cnt;rnk[cnt]=s;\n    if(son[s]==-1) return ;\n    dfs_2(son[s],tp);\n    for(int i=nhead[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==fa[s]||v==son[s]) continue;\n        dfs_2(v,v);\n    }\n}\n\nvoid dfs_3(int s){//\u5e38\u89c4\u9884\u5904\u7406\n    sum[s]=sum[fa[s]]+w[s];\n    for(int i=nhead[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==fa[s]) continue;\n        dfs_3(v);\n    }\n}\n\nint lca(int x,int y){//\u5e38\u89c4lca\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]]) Swap(x,y);\n        x=fa[top[x]];\n    }\n    return dep[x]>dep[y]?y:x;\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);num=n;//\u65b9\u70b9\u7684\u7f16\u53f7\u4ecen\u5f00\u59cb\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&in1,&in2);\n        add(head,in1,in2);\n        add(head,in2,in1);//\u539f\u56fe\u4e2d\u5efa\u8fb9\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i]) tarjan(i),tt--;//\u8dd1tarjan\uff0c\u6bcf\u6b21\u8dd1\u5b8c\u9700\u5c06\u6808\u9876\u51fa\u6808\n    cnt=0;\n    dfs_1(1,0);dfs_2(1,1);dfs_3(1);//\u8dd1\u6811\u5256\uff0c\u9884\u5904\u7406\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%d%d\",&in1,&in2);\n        int LCA=lca(in1,in2);\n        cout<<sum[in1]+sum[in2]-sum[LCA]-sum[fa[LCA]]<<'\\n';//\u7b97\u8def\u5f84\u4e0a\u70b9\u7684\u6743\u503c\uff0c\u7528\u5dee\u5206\n    }\n    return 0;\n}\n```\n\n### \u5176\u4ed6\n\n\u7c7b\u4f3c\u7684\u9898\u76ee\uff1a[Tourists](https://www.luogu.com.cn/problem/CF487E)\uff0c[Traffic Real Time Query System](https://www.luogu.com.cn/problem/UVA1464)\u3002",
        "postTime": 1674355542,
        "uid": 767096,
        "name": "TKXZ133",
        "ccfLevel": 4,
        "title": "\u9053\u8def\u76f8\u9047 \u9898\u89e3"
    },
    {
        "content": "> \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c$q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $x,y$\uff0c\u6c42 $x\\rightarrow y$ \u8def\u5f84\u4e0a**\u5fc5\u7ecf**\u7684\u70b9\u7684\u4e2a\u6570\uff08\u5305\u62ec $x$ \u548c $y$\uff09\u3002\n\n\u5148\u770b\u4e00\u4e0b\u6837\u4f8b\uff08\u6837\u4f8b\u8bf4\u660e\u6709\u8bef\uff0c\u6839\u672c\u6ca1\u6709 $1\\rightarrow 2\\rightarrow 4\\rightarrow 5$ \u7684\u8def\u5f84\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gosqfhte.png)\n\n\u663e\u7136\uff0c$1,3,5$ \u8fd9 $3$ \u4e2a\u70b9\u662f\u5fc5\u5b9a\u4f1a\u7ecf\u8fc7\u7684\u3002\n\n## \u524d\u7f6e\u829d\u58eb\n\n- \u70b9\u53cc\u8fde\u901a\u5206\u91cf\n- \u5e7f\u4e49\u5706\u65b9\u6811\n- \u6811\u94fe\u5256\u5206\n\n## \u5206\u6790\n\n\u5148\u6765\u56de\u987e\u4e00\u4e0b\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\u3002\n\n> \u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u56fe\u7684\u4e00\u4e2a\u5b9a\u4e49\u662f\uff1a\n\n> \u56fe\u4e2d\u4efb\u610f\u4e24\u4e0d\u540c\u70b9\u4e4b\u95f4\u90fd\u6709\u81f3\u5c11\u4e24\u6761\u70b9\u4e0d\u91cd\u590d\u7684\u8def\u5f84\u3002\n\n> \u70b9\u4e0d\u91cd\u590d\u65e2\u6307\u8def\u5f84\u4e0a\u70b9\u4e0d\u91cd\u590d\uff08\u7b80\u5355\u8def\u5f84\uff09\uff0c\u4e5f\u6307\u4e24\u6761\u8def\u5f84\u7684\u4ea4\u96c6\u4e3a\u7a7a\uff08\u5f53\u7136\uff0c\u8def\u5f84\u5fc5\u7136\u90fd\u7ecf\u8fc7\u51fa\u53d1\u70b9\u548c\u5230\u8fbe\u70b9\uff0c\u8fd9\u4e0d\u5728\u8003\u8651\u8303\u56f4\u5185\uff09\u3002\n\n> \u800c\u4e00\u4e2a\u56fe\u7684**\u70b9\u53cc\u8fde\u901a\u5206\u91cf**\u5219\u662f\u4e00\u4e2a**\u6781\u5927\u70b9\u53cc\u8fde\u901a\u5b50\u56fe**\u3002\n\n\u4ee5\u4e0a\u5185\u5bb9\u6458\u81ea\uff1a[\u3010\u7b97\u6cd5\u5b66\u4e60\u3011\u5706\u65b9\u6811 - \u7c89\u5154](https://www.cnblogs.com/PinkRabbit/p/Introduction-to-Block-Forest.html)\u3002\n\n\u66f4\u901a\u4fd7\u7684\u8bf4\uff0c\u70b9\u53cc\u5c31\u662f**\u6ca1\u6709\u5272\u70b9**\u7684\u56fe\u3002\n\n\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u539f\u56fe\u7f29\u70b9\uff0c\u6784\u5efa\u5706\u65b9\u6811\uff0c\u628a\u6bcf\u4e2a\u70b9\u53cc\u7f29\u6210\u4e00\u4e2a\u65b9\u70b9\uff0c\u518d\u770b\u4e0b\u56fe\uff1a\n\n![](https://oi-wiki.org/graph/images/block-forest3.svg)\n\n\u56fe\u7247\u6765\u6e90\uff1a[\u5706\u65b9\u6811 - OI Wiki](https://oi-wiki.org/graph/block-forest/)\u3002\n\n\u6b64\u65f6\uff0c\u539f\u56fe\u5df2\u7ecf\u8f6c\u6362\u4e3a\u6811\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u6210\u529f\u5730\u8f6c\u6362\u4e3a\u4e86**\u6c42 $x,y$ \u95f4\u7684\u5706\u70b9\u6570\u91cf**\u3002\n\n\u5bf9\u5706\u65b9\u6811\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u5706\u70b9\u8d4b\u503c\u4e3a $1$\uff0c\u65b9\u70b9\u4e0d\u7ba1\uff08\u4e0d\u662f\u5fc5\u7ecf\u7684\uff09\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace fastIO\n{\n\ttemplate<typename T> inline void read(T &t)\n\t{\n\t\tT x = 0;\n\t\tint f = 0;\n\t\tchar ch = getchar();\n\t\twhile (!isdigit(ch)) f ^= !(ch ^ 45), ch = getchar();\n\t\twhile (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n\t\tt = f ? -x : x;\n\t}\n\ttemplate<typename T, typename ... Args> inline void read(T &x, Args&... args)\n\t{\n\t\tread(x), read(args...);\n\t}\n}\nusing namespace fastIO;\n\nconst int N = 2 * (5e5 + 10);\nvector<int> g[N];\nvector<int> BF[N];\n\nint dfn[N], low[N], idx, stk[N], tp;\nint tot;\nint a[N];\n\nint n, m, q;\n\nvoid tarjan(int u)\n{\n\tdfn[u] = low[u] = ++ idx;\n\tstk[ ++ tp] = u;\n\tfor (int v: g[u])\n\t{\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t\tif (low[v] == dfn[u])\n\t\t\t{\n\t\t\t\ta[ ++ tot] = 0;\n\t\t\t\tfor (int x = 0; x != v; tp -- )\n\t\t\t\t{\n\t\t\t\t\tx = stk[tp];\n\t\t\t\t\tBF[tot].push_back(x);\n\t\t\t\t\tBF[x].push_back(tot);\n\t\t\t\t}\n\t\t\t\tBF[tot].push_back(u);\n\t\t\t\tBF[u].push_back(tot);\n\t\t\t}\n\t\t}\n\t\telse low[u] = min(low[u], dfn[v]);\n\t}\n}\n\nint fa[N], son[N], siz[N], dep[N];\nint top[N], id[N], w[N];\nvoid dfs1(int u, int f)\n{\n\tfa[u] = f, dep[u] = dep[f] + 1;\n\tsiz[u] = 1;\n\tfor (int v: BF[u])\n\t{\n\t\tif (v != f)\n\t\t{\n\t\t\tdfs1(v, u);\n\t\t\tsiz[u] += siz[v];\n\t\t\tif (siz[v] > siz[son[u]]) son[u] = v;\n\t\t}\n\t}\n}\nvoid dfs2(int u, int tp)\n{\n\ttop[u] = tp;\n\tid[u] = ++ idx;\n\tw[idx] = a[u];\n\tif (son[u]) dfs2(son[u], tp);\n\tfor (int v: BF[u])\n\t\tif (!id[v])\n\t\t\tdfs2(v, v);\n}\n\nint sum[N << 2];\n#define ls (p << 1)\n#define rs (p << 1 | 1)\n#define mid (l + r >> 1)\n#define lson ls, l, mid\n#define rson rs, mid + 1, r\n\nvoid build(int p, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\tsum[p] = w[l];\n\t\treturn;\n\t}\n\tbuild(lson);\n\tbuild(rson);\n\tsum[p] = sum[ls] + sum[rs];\n}\nint query(int p, int l, int r, int L, int R)\n{\n\tif (L <= l && r <= R) return sum[p];\n\tint res = 0;\n\tif (L <= mid) res += query(lson, L, R);\n\tif (mid < R) res += query(rson, L, R);\n\treturn res;\n}\nint query(int x, int y)\n{\n\tint res = 0;\n\twhile (top[x] != top[y])\n\t{\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tres += query(1, 1, tot, id[top[x]], id[x]);\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) swap(x, y);\n\tres += query(1, 1, tot, id[x], id[y]);\n\treturn res;\n}\n\nint main()\n{\n\tread(n, m);\n\ttot = n;\n\tfor (int i = 1, x, y; i <= m; i ++ )\n\t{\n\t\tread(x, y);\n\t\tg[x].push_back(y), g[y].push_back(x);\n\t}\n\tfor (int i = 1; i <= n; i ++ ) a[i] = 1;\n\ttarjan(1), idx = 0, dfs1(1, 0), dfs2(1, 1);\n\tbuild(1, 1, tot);\n\tread(q);\n\twhile (q -- )\n\t{\n\t\tint x, y;\n\t\tread(x, y);\n\t\tprintf(\"%lld\\n\", query(x, y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1658534819,
        "uid": 482728,
        "name": "Engulf",
        "ccfLevel": 0,
        "title": "P4320 \u9053\u8def\u76f8\u9047 \u9898\u89e3"
    },
    {
        "content": "**\u9898\u76ee\u5206\u6790**\n\n\u9996\u5148\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u6765\u8bf4\uff0c\u5fc5\u7ecf\u7684\u70b9\u53ea\u6709\u8def\u5f84\u4e0a\u7684\u5272\u70b9\u4ee5\u53ca\u5b83\u4eec\u672c\u8eab\u3002\n\n\u6211\u4eec\u8003\u8651\u5220\u6389\u4e00\u4e2a\u70b9\u3002\u5982\u679c\u5b83\u662f\u5272\u70b9\uff0c\u5220\u6389\u5b83\u4e4b\u540e\u8981\u6c42\u7684\u4e24\u70b9\u4e4b\u95f4\u5c31\u4e0d\u8fde\u901a\u4e86\uff0c\u6240\u4ee5\u5272\u70b9\u90fd\u662f\u5fc5\u7ecf\u7684\uff1b\u5982\u679c\u5b83\u4e0d\u662f\u5272\u70b9\uff0c\u5220\u6389\u5b83\u4e4b\u540e\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u627e\u5230\u53e6\u4e00\u6761\u8def\u5f84\u4f7f\u4e24\u70b9\u8fde\u901a\uff0c\u6240\u4ee5\u975e\u5272\u70b9\u90fd\u662f\u4e0d\u5fc5\u7ecf\u7684\u3002\u4e8e\u662f\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86**\u6c42\u4e24\u70b9\u4e4b\u95f4\u5272\u70b9\u7684\u6570\u91cf**\u3002\n\n\u8981\u7ef4\u62a4\u5272\u70b9\u7684\u6570\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u5efa\u51fa**\u5706\u65b9\u6811**\uff0c\u4e24\u70b9\u5728\u5706\u65b9\u6811\u4e0a\u7684\u65b9\u70b9\u6570\u91cf\u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u5272\u70b9\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u5706\u65b9\u6811\u4e0a\u7684\u65b9\u70b9\u548c\u5b83\u6240\u8fde\u7684\u5706\u70b9\u5b9e\u9645\u4e0a\u4ee3\u8868\u4e86\u4e00\u4e2a\u70b9\u53cc\u3002\u800c\u6211\u4eec\u77e5\u9053\u4ece\u4e00\u4e2a\u70b9\u53cc\u5230\u53e6\u4e00\u4e2a\u70b9\u53cc\u4e2d\u95f4\u4e00\u5b9a\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u5272\u70b9\uff0c\u5426\u5219\u8fd9\u4e24\u4e2a\u70b9\u53cc\u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u70b9\u53cc\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u56fe\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u5728\u6811\u4e0a\u67e5\u8be2\u65b9\u70b9\u6570\u91cf\u5c31\u884c\u4e86\u3002\n\n**\u4ee3\u7801**\n\n```cpp\n#include<cstdio>\n\nconst int N=1e6+5;\n\ninline int read()\n{\n\tint v=0;char ch=getchar();\n\twhile('0'>ch||ch>'9') ch=getchar();\n\twhile('0'<=ch&&ch<='9') v=v*10+(ch^48),ch=getchar();\n\treturn v;\n}\n\ninline int min(int a,int b) {return a<b? a:b;}\n\nint n,m,q;\n\nstruct Tree\n{\n    #define findson(x) for(int i=first[x],p;i;i=nxt[i]) if((p=to[i])^fa[x])\n\n    int tot;\n\n\tint cnt,first[N],nxt[N<<1],to[N<<1];\n\tinline void add(int u,int v) \n\t{\n\t\tto[++cnt]=v,nxt[cnt]=first[u],first[u]=cnt;\n\t\tto[++cnt]=u,nxt[cnt]=first[v],first[v]=cnt;\n\t}\n\n\tint sz[N],fa[N],son[N],dep[N],sum[N];\n\tinline void dfs1(int x)\n\t{\n        dep[x]=dep[fa[x]]+(sz[x]=1),sum[x]=sum[fa[x]]+(x<=n);\n        findson(x)\n\t\t{\n\t\t\tfa[p]=x,dfs1(p),sz[x]+=sz[p];\n\t\t\tson[x]=sz[son[x]]>sz[p]? son[x]:p;\n\t\t}\n\t}\n\n    int top[N];\n\tinline void dfs2(int x,int _top)\n\t{\n\t\ttop[x]=_top;\n        if(son[x]) dfs2(son[x],_top);\n\t\tfindson(x) if(p^son[x]) dfs2(p,p);\n\t}\n\t\n\tinline int lca(int x,int y)\n\t{\n\t\twhile(top[x]^top[y]) \n\t\tif(dep[top[x]]<dep[top[y]]) y=fa[top[y]];\n\t\telse x=fa[top[x]];\n\t\t\n\t\treturn dep[x]<dep[y]? x:y;\n\t}\n\t\n\tinline int dis(int x,int y) {int d=lca(x,y);return sum[x]+sum[y]-sum[d]-sum[fa[d]];}\n}T;\n\nstruct Graph\n{\n\tint cnt,first[N],nxt[N<<1],to[N<<1];\n\tinline void add(int u,int v) \n\t{\n\t\tto[++cnt]=v,nxt[cnt]=first[u],first[u]=cnt;\n\t\tto[++cnt]=u,nxt[cnt]=first[v],first[v]=cnt;\n\t}\n\n    int dfn[N],low[N],tot;\n    int st[N],top;\n\n    inline void tarjan(int x,int lst)\n    {\n        dfn[st[++top]=x]=low[x]=++tot;\n\n        for(int i=first[x],p;i;i=nxt[i])\n        if(!dfn[p=to[i]])\n        {\n            tarjan(p,x),low[x]=min(low[x],low[p]);\n            if(low[p]>=dfn[x])\n            {\n                int block=++T.tot;T.add(block,x);\n                while(st[top+1]^p) T.add(block,st[top--]);\n            }\n        }\n        else if(p^lst) low[x]=min(low[x],dfn[p]);\n    }\n}G;\n\nint main()\n{\n\tT.tot=n=read(),m=read();\n\tfor(int i=1;i<=m;i++) G.add(read(),read());\n\tfor(int i=1;i<=n;i++) if(!G.dfn[i]) G.tarjan(i,0);\n\n\tT.dfs1(1),T.dfs2(1,1);\n\n\tq=read();\n\twhile(q--) printf(\"%d\\n\",T.dis(read(),read()));\n}\n```\n",
        "postTime": 1665910121,
        "uid": 363730,
        "name": "Mr_Avalon",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4320 \u3010\u9053\u8def\u76f8\u9047\u3011"
    },
    {
        "content": "## \u9053\u8def\u76f8\u9047\n\n### \u9898\u76ee\u63cf\u8ff0\n\n\u8ddf\u4f60\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6709$Q$\u6b21\u67e5\u8be2,\u6bcf\u4e00\u6b21\u67e5\u8be2\u7ed9\u5b9a$(x,y)$\uff0c\u8f93\u51fa$x,y$\u4e4b\u95f4\u7684\u5fc5\u7ecf\u70b9\u4e2a\u6570\u3002\n\n### \u9898\u89e3\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u53d1\u73b0\u5fc5\u7ecf\u70b9\u4e2a\u6570\u5176\u5b9e\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4**\u5272\u70b9**\u7684\u4e2a\u6570\u3002\u4f46\u662f\u76f4\u63a5\u5728\u539f\u56fe\u4e0a\u9762\u4e0d\u597d\u5904\u7406\u3002\u6211\u4eec\u8003\u8651\u5bf9\u5176\u8fdb\u884c\u70b9\u53cc\u7f29\u70b9\u3002\u7f29\u70b9\u4e4b\u540e\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u539f\u56fe\u88ab\u6211\u4eec\u8f6c\u6362\u6210\u4e86\u82e5\u5e72\u68f5\u679d\u7e41\u53f6\u8302\u7684\u5927\u6811\uff01\u8fd9\u4e2a\u65f6\u5019\uff0c\u67e5\u8be2\u5c31\u5f88\u597d\u5e94\u5bf9\u4e86\u3002\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u627e\u5230LCA\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u8ba1\u7b97\u5272\u70b9\u4e2a\u6570\u4e86\u3002\n\n\u4ee3\u7801\uff1a( \u4ee3\u7801\u8f83\u4e11\uff0c\u4e0d\u559c\u52ff\u55b7\uff08\u9003)\n\n```cpp\n#include<bits/stdc++.h>\nconst int N = 5e6 + 3,M = 5e6 + 3;\nint n,m,q;\n\nnamespace IO\n{\n\tinline char getChar()\n\t{\n\t\tstatic char buf[100000],*p1 = buf,*p2 = buf;\n\t\treturn p1 == p2 && (p2 = (p1 = buf) +\n\t\t\tfread(buf,1,100000,stdin),p1 == p2) ? EOF : *p1++;\n\t}\n\tinline int read()\n\t{\n\t\tint s = 0,f  = 1; char ch;\n\t\twhile(!isdigit(ch = getChar())) if(ch == '-') f = -1;\n\t\twhile(isdigit(ch)) s = s * 10 + ch - '0',ch = getChar();\n\t\treturn s * f;\n\t}\n};\nusing namespace IO;\n\nnamespace Graph\n{\n\tint ver[M << 1],head[N],nxt[M << 1],tot = 1;\n\tint nver[M << 1],nhead[N],nnxt[M << 1],ntot = 1;\n\tint newNum,w[N],val[N];\n\n\tinline void add(int* ver0,int* head0,int* nxt0,int& tot0,\n\t\t\tconst int x,const int y)\n\t{\n\t\tver0[++tot0] = y,nxt0[tot0] = head0[x],head0[x] = tot0;\n\t\tver0[++tot0] = x,nxt0[tot0] = head0[y],head0[y] = tot0;\n\t}\n};\n\nusing namespace Graph;\n\nnamespace Tarjan\n{\n\tint dfn[N],low[N],cnt = 0,cut[N];\n\tint dcc = 0,bel[N];\n\tstd::stack<int> st;\n\tstd::vector<int> vec[N];\n\tusing namespace std;\n\tvoid tarjan(int x,int root)\n\t{\n\t\tdfn[x] = low[x] = ++cnt;\n\t\tst.push(x);\n\t\tint flag = 0;\n\t\tfor(int i = head[x];i;i = nxt[i]) {\n\t\t\tif(!dfn[ver[i]]) {\n\t\t\t\ttarjan(ver[i],root);\n\t\t\t\tlow[x] = std::min(low[x],low[ver[i]]);\n\t\t\t\tif(low[ver[i]] >= dfn[x]) {\n\t\t\t\t\tif(++flag > 1 || x != root)\n\t\t\t\t\t\tcut[x] = 1;\n\t\t\t\t\tdcc++; int tmp;\n\t\t\t\t\tdo {\n\t\t\t\t\t\ttmp = st.top(),st.pop();\n\t\t\t\t\t\tvec[dcc].push_back(tmp);\n\t\t\t\t\t\tbel[tmp] = dcc;\n\t\t\t\t\t} while(tmp != ver[i]);\n\t\t\t\t\tvec[dcc].push_back(x);\n\t\t\t\t\tbel[x] = dcc;\n\t\t\t\t}\n\t\t\t} else low[x] = std::min(low[x],dfn[ver[i]]);\n\t\t}\n\t}\n\tvoid getDcc()\n\t{\n\t\tfor(int i = 1;i <= n;i++)\n\t\t\tif(!dfn[i]) tarjan(i,i);\n\t\tnewNum = dcc;\n\t\tfor(int i = 1;i <= n;i++)\n\t\t\tif(cut[i]) bel[i] = ++newNum,w[newNum] = 1;\n\t\tfor(int i = 1;i <= dcc;i++) for(int j : vec[i])\n\t\t\tif(cut[j]) add(nver,nhead,nnxt,ntot,i,bel[j]);\n\t}\n};\nusing namespace Tarjan;\n\nnamespace LCA\n{\n\tint dep[N],fa[N][23],t;\n\tstd::queue<int> que;\n\tinline int queryf(int x,int y)\n\t{\n\t\tif(dep[x] < dep[y]) std::swap(x,y);\n\t\tfor(int i = t;i >= 0;i--)\n\t\t\tif(dep[fa[x][i]] >= dep[y]) x = fa[x][i];\n\t\tif(x == y) return x;\n\t\tfor(int i = t;i >= 0;i--)\n\t\t\tif(fa[x][i] != fa[y][i]) x = fa[x][i],y = fa[y][i];\n\t\treturn fa[x][0];\n\t}\n\tinline int query(int x,int y)\n\t{\n\t\tint fxy = queryf(x,y);\n\t\treturn val[x] + val[y] - val[fxy] - val[fa[fxy][0]]\n\t\t\t- w[x] - w[y] + 2;\n\t}\n\tinline void bfs(int x)\n\t{\n\t\tque.push(x),dep[x] = 1; /*FIXME*/\n\t\twhile(que.size()) {\n\t\t\tint x = que.front(); que.pop();\n\t\t\tfor(int i = nhead[x];i;i = nnxt[i]) {\n#define to nver[i]\n\t\t\t\tif(dep[to]) continue;\n\t\t\t\tdep[to] = dep[x] + 1;\n\t\t\t\tval[to] = val[x] + w[to];\n\t\t\t\tfa[to][0] = x;\n\t\t\t\tfor(int j = 1;j <= t;j++)\n\t\t\t\t\tfa[to][j] = fa[fa[to][j - 1]][j - 1];\n\t\t\t\tque.push(to);\n#undef to\n\t\t\t}\n\t\t}\n\t}\n\n\tinline void pre()\n\t{\n\t\tt = log2(newNum) + 1;\n\t\tfor(int i = 1;i <= newNum;i++)\n\t\t\tif(!dep[i]) bfs(i);\n\t}\n};\nusing namespace LCA;\n\nint main()\n{\n#ifdef CLANG\n\tfreopen(\"rtqs.in\",\"r\",stdin);\n\tfreopen(\"rtqs.out\",\"w\",stdout);\n#endif\n\tn = read(),m = read();\n\tfor(int i = 1,u,v;i <= m;i++) {\n\t\tu = read(),v = read();\n\t\tadd(ver,head,nxt,tot,u,v);\n\t}\n\n\tgetDcc();\n\tpre();\n\n\tq = read();\n\tint x,y;\n\twhile(q--) {\n\t\tx = read(),y = read();\n\t\tprintf(\"%d\\n\",query(bel[x],bel[y]));\n\t}\n\texit(0);\n}\n\n\n```",
        "postTime": 1571012355,
        "uid": 28366,
        "name": "tomtom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4320 \u3010\u9053\u8def\u76f8\u9047\u3011"
    },
    {
        "content": "[\u5706\u65b9\u6811\u5b66\u4e60\u7b14\u8bb0\uff0c\u5c06\u4e8e\u8fd1\u671f\u53d1\u5e03](https://www.cnblogs.com/zheyuanxie/p/block-forest.html)\n\n## \u7b80\u8981\u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002$q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u51fa\u4e24\u4e2a\u70b9 $u,v$\u3002\u4f60\u9700\u8981\u8f93\u51fa\u5bf9\u4e8e\u6240\u6709 $u\\to v$ \u7684\u8def\u5f84\u90fd\u5fc5\u987b\u8981\u7ecf\u8fc7\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n$1 \\leq u,v \\leq n \\leq 5 \\times 10^5,1 \\leq q \\leq 5\\times 10^5,1 \\leq m \\leq 10^6$\n\n## \u601d\u8def\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[\u70b9\u53cc\u8fde\u901a\u5206\u91cf](https://www.luogu.com.cn/problem/P8435)\u3001[LCA](https://www.luogu.com.cn/problem/P3379)\u3002\n\n\u9996\u5148\u8003\u8651\uff0c\u600e\u4e48\u6837\u7684\u70b9\u4e00\u5b9a\u4f1a\u88ab\u7ecf\u8fc7\u3002\u6bd4\u5982\u6837\u4f8b\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ptd0lzvb.png)\n\n\u5bf9\u4e8e $1\\to5$ \u8fd9\u6761\u8def\u5f84\uff0c\u9996\u5148 $1,5$ \u5fc5\u5b9a\u88ab\u7ecf\u8fc7\uff0c\u7136\u540e $3$ \u4e5f\u5fc5\u5b9a\u88ab\u7ecf\u8fc7\u3002\u7136\u540e\u8fd9\u4e2a $3$ \u8282\u70b9\u7684\u4f4d\u7f6e\u975e\u5e38\u773c\u719f\uff0c\u5b83\u8c8c\u4f3c\u662f\u2026\u2026\u5272\u70b9\u3002\n\n\u4f46\u662f\u4e0d\u4e00\u5b9a\u90fd\u662f\u5272\u70b9\u3002\u4e0d\u4fe1\u7684\u8bdd\u53ef\u4ee5\u753b\u4e2a\u56fe\u8bd5\u9a8c\u4e00\u4e0b\u3002\u4f46\u4e0d\u59a8\u788d\u6211\u4eec\u5f80\u5272\u70b9\u8fd9\u65b9\u9762\u60f3\u3002\n\n\u8003\u8651\u5fc5\u987b\u8981\u7ecf\u8fc7\u7684\u70b9\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u65ad\u6389\u4e00\u4e2a\u70b9\uff0c\u5c06\u4f1a\u4e0d\u5b58\u5728\u8def\u5f84\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u662f\u4e24\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u56e0\u6b64\u5fc5\u987b\u8981\u7ecf\u8fc7\u7684\u70b9\u5c31\u662f\uff1a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4ee5\u53ca\u5176\u4e2d\u7ecf\u8fc7\u7684\u6bcf\u4e00\u4e2a\u70b9\u53cc\u8054\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u516c\u5171\u70b9\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5706\u65b9\u6811\u3002\n\n\u5706\u65b9\u6811\u4e0a\u7684\u70b9\u6709\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u5706\u70b9\uff0c\u8fd9\u662f\u539f\u56fe\u4e2d\u7684\u70b9\uff1b\u4e00\u7c7b\u662f\u65b9\u70b9\uff0c\u8fd9\u662f\u6211\u4eec\u65b0\u5efa\u7684\u70b9\u3002\n\n\u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u539f\u56fe\u4e2d\u7684\u70b9\u53cc\u8054\u901a\u5206\u91cf\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u65b9\u70b9\uff0c\u5c06\u5176\u5305\u542b\u7684\u6240\u6709\u70b9\u5411\u8fd9\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u662f\u4e00\u68f5\u6811\u3002\n\n\u7136\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u6240\u7ec4\u6210\u7684\u8def\u5f84\u7684\u5706\u70b9\u4e2a\u6570\u3002\u53ef\u4ee5\u4f7f\u7528 LCA\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m+(n+q)\\log n)$\u3002\n\n## \u4ee3\u7801\n\n\u7528\u500d\u589e\u7684\u597d\u5c11\u5440\uff0c\u5176\u5b9e\u500d\u589e\u633a\u597d\u5199\u7684\u2026\u2026\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6+5, M = 2e6+5;\nint n,m;\n\nstruct edge{\n    int nxt,to;    \n} g[M],g2[M];\nint head[N],low[N],dfn[N],ec,dfscnt,head2[N],low2[N],ec2,treecnt;\nbool rectangle[N];\n\nvoid add(int u,int v){\n    if(u==v) return;\n    g[++ec].nxt=head[u];\n    g[ec].to=v;\n    head[u]=ec;\n}\n\nvoid add2(int u,int v){\n    // cout<<u<<' '<<v<<'\\n';\n    g2[++ec2].nxt=head2[u];\n    g2[ec2].to=v;\n    head2[u]=ec2;\n}\n\nstack<int> sta;\n\nvoid tarjan(int u){\n    low[u]=dfn[u]=(++dfscnt);sta.push(u);\n    for(int i=head[u];i;i=g[i].nxt){\n        int v=g[i].to;\n        if(dfn[v]) low[u]=min(low[u],dfn[v]);\n        else{\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n            if(dfn[u]<=low[v]){\n                rectangle[++treecnt]=1;\n                while(sta.top()!=v){\n                    add2(sta.top(),treecnt);add2(treecnt, sta.top());\n                    sta.pop();\n                }\n                sta.pop();\n                add2(u,treecnt);add2(treecnt, u);\n                add2(v,treecnt);add2(treecnt, v);\n            }\n        }\n    }\n    \n}\n\nint fa[N][35],dis[N],dep[N];\n\nvoid dfs(int u,int father){\n    dep[u]=dep[father]+1;dis[u]=dis[father]+(u<=n);\n    fa[u][0]=father;\n    for(int i=1;i<=30;i++) fa[u][i]=fa[fa[u][i-1]][i-1];\n    for(int i=head2[u];i;i=g2[i].nxt){\n        int v=g2[i].to;\n        if(v==father) continue;\n        dfs(v,u);\n    }\n}\n\nint lca(int u,int v){\n    if(dep[u]<dep[v]) swap(u,v);\n    for(int i=30;~i;i--){\n        if(dep[fa[u][i]]>=dep[v]) u=fa[u][i];\n    }\n    if(u==v) return u;\n    for(int i=30;~i;i--){\n        if(fa[u][i]!=fa[v][i]) u=fa[u][i],v=fa[v][i];\n    }\n    return fa[u][0];\n}\n\nsigned main(){\n    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n    cin>>n>>m;treecnt=n;\n    for(int i=1,u,v;i<=m;i++){\n        cin>>u>>v;\n        add(u,v);add(v,u);\n    }\n    for(int i=1;i<=n;i++){\n        if(!dfn[i]) tarjan(i);\n    }\n    dfs(1,0);\n    int q;cin>>q;\n    while(q--){\n        int u,v,l;cin>>u>>v;l=lca(u,v);\n        cout<<(dis[u]+dis[v]-(dis[l]*2)+(l<=n))<<'\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1682081451,
        "uid": 413065,
        "name": "xiezheyuan",
        "ccfLevel": 5,
        "title": "P4320 \u9053\u8def\u76f8\u9047"
    },
    {
        "content": "\u521a\u5b66\u4e86\u5706\u65b9\u6811\u6765\u505a\u8fd9\u9053\u6a21\u677f\u3002\n\n- \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5bf9\u4e8e $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u51fa\u4e24\u4e2a\u6570 $u,v$\uff0c\u6c42 $u$ \u5230 $v$ \u6240\u6709\u8def\u5f84\u4e0a\u5fc5\u987b\u7ecf\u8fc7\u7684\u70b9\u7684\u6570\u91cf\u3002\n\n\n- \u505a\u6cd5\uff1a\n\n\u65e2\u7136\u662f\u6c42\u8def\u5f84\u4e0a\u6240\u6709\u5fc5\u987b\u7ecf\u8fc7\u70b9\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u521b\u5efa\u4e00\u4e2a\u65b9\u70b9\uff0c\u6bcf\u4e2a\u70b9\u53cc\u5185\u7684\u70b9\u5411\u8fd9\u4e2a\u65b9\u70b9\u8fde\u8fb9\uff0c\u6784\u5efa\u5706\u65b9\u6811\u3002\n\n\u56e0\u4e3a\u662f\u4e00\u68f5\u6811\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u5b83\u7684\u4fe1\u606f\u6211\u4eec\u5bb9\u6613\u5904\u7406\u3002\u4e0d\u96be\u53d1\u73b0\u9898\u76ee\u5373\u6c42 $u\\to v$ \u8def\u5f84\u4e0a\u7684\u5706\u70b9\u4e2a\u6570\u3002\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5706\u70b9\u9644\u52a0\u4e00\u4e2a\u6743\u503c $1$\uff0c\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u4e3a $0$\uff0c\u4e8e\u662f\u9898\u76ee\u5c31\u8f6c\u5316\u4e3a\u6c42 $u$ \u5230 $v$ \u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6743\u503c\u603b\u548c\u3002\n\n\u6811\u4e0a\u5dee\u5206\u5373\u53ef\u3002\u6ce8\u610f\u5f53 $u,v$ \u7684 $\\mathtt{LCA}$ \u4e3a\u5706\u70b9\u65f6\u7b54\u6848\u4e5f\u8981\u52a0 $1$\u3002\n\n```cpp\nconst int maxn = 5e5 + 100;\nint T, n, m, tot, cnt, dfc, tp, q, low[maxn], dfn[maxn], dis[maxn], st[maxn], w[maxn << 1], s[maxn];\nint dep[maxn << 1], sz[maxn << 1], fa[maxn << 1], son[maxn << 1], top[maxn << 1], id[maxn << 1];\nvector<int> g[maxn], t[maxn << 1];\nvoid tarjan(int u) {\n    dfn[u] = low[u] = ++cnt, st[++tp] = u;\n    for (int v : g[u]) {\n        if (dfn[v]) low[u] = min(low[u], dfn[v]);\n        else {\n            tarjan(v), low[u] = min(low[u], low[v]);\n            if (low[v] == dfn[u]) {\n                tot++; int x = 0;\n                while (x != v) {\n                    x = st[tp];\n                    t[x].push_back(tot);\n                    t[tot].push_back(x);\n                    tp--;\n                } \n                t[tot].push_back(u);\n                t[u].push_back(tot);\n            }\n        }\n    }\n}\nvoid dfs1(int u, int fat) {\n    fa[u] = fat, dep[u] = dep[fat] + 1;\n    sz[u] = 1, dis[u] = dis[fat] + w[u];\n    for (int v : t[u]) {\n        if (v == fat) continue;\n        dfs1(v, u), sz[u] += sz[v];\n        if (sz[v] > sz[son[u]]) son[u] = v;\n    }\n}\nvoid dfs2(int u, int pre) {\n    top[u] = pre, id[u] = ++dfc;\n    if (son[u]) dfs2(son[u], pre);\n    for (int v : t[u]) {\n        if (v == fa[u] || v == son[u]) continue;\n        dfs2(v, v);\n    }\n}\nint lca(int u, int v) {\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        u = fa[top[u]];\n    }\n    return dep[u] > dep[v] ? v : u;\n}\nint dist(int u, int v) {\n    return dis[u] + dis[v] - 2 * dis[lca(u, v)];\n}\nint main() {\n    n = tot = read(), m = read();\n    for (int i = 1; i <= n; i++) w[i] = 1;\n    for (int i = 1, u, v; i <= m; i++) {\n        u = read(), v = read();\n        g[u].push_back(v), g[v].push_back(u);\n    }\n    tarjan(1), dfs1(1, 0), dfs2(1, 1);\n    q = read();\n    while (q--) {\n        int u = read(), v = read(), ans = 0;\n        ans += dist(u, v);\n        if (lca(u, v) <= n) ans++;\n        write(ans), puts(\"\");\n    }\n    return 0;\n}\n```\n\n---\n\n\u4f60\u4ee5\u4e3a\u7ed3\u675f\u4e86\uff1f~~\u60f3\u5c41\u5403\u3002~~\n\n\u52a0\u5f3a\u7248\uff1a[[SDOI2018]\u6218\u7565\u6e38\u620f](https://www.luogu.com.cn/problem/P4606)\n\n\u5982\u679c\u628a\u4e24\u4e2a\u70b9\u6362\u6210 $k$ \u4e2a\u70b9\uff0c\u600e\u4e48\u505a\uff1f\n\n\u524d\u9762\u540c\u6837\u662f\u6784\u9020\u5706\u65b9\u6811\uff0c\u7136\u540e\u5706\u70b9\u7684\u6743\u503c\u4e3a $1$\u3002\n\n\u6211\u4eec\u628a $k$ \u4e2a\u70b9\u6309\u7167 $dfn$ \u5e8f\u6392\u5e8f\uff0c\u8bb0\u4e3a $s_1,s_2,...,s_k$\uff0c\u52a0\u4e0a\u76f8\u90bb\u4e24\u70b9\u7684\u8def\u5f84\u6743\u503c\u548c\uff0c\u5373 $\\sum\\limits_{i=1}^{k}sum_{s_i\\to s_{i\\%k-1}}$\u3002\n\n\u7136\u540e\u56e0\u4e3a\u6bcf\u6761\u8fb9\u88ab\u7b97\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u603b\u548c\u8981\u9664\u4ee5 $2$\u3002\n\n\u540c\u6837\u5982\u679c $s_1,s_k$ \u7684 $\\mathtt{LCA}$ \u4e3a\u5706\u70b9\uff0c\u8981\u52a0\u4e0a $1$\u3002\n\n\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u4e0d\u653e\u4ee3\u7801\u4e86\u3002",
        "postTime": 1644630027,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "P4320 \u9053\u8def\u76f8\u9047 \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u5efa\u51fa\u5706\u65b9\u6811\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u70b9\uff0c\u5176\u8def\u5f84\u4e2d\u5fc5\u987b\u8981\u7ecf\u8fc7\u7684\u70b9\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u5bf9\u5e94\u7684\u5706\u65b9\u6811\u4e2d\u70b9\u7684\u8def\u5f84\u4e4b\u95f4\u5706\u70b9\u6570\u91cf\u3002\u4e5f\u5c31\u662f\u5272\u70b9\u6570\u91cf\u3002\n\n\u4e8e\u662f LCA \u5904\u7406\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\nconst int N = 1e6 + 5;\n\nint dfn[N], low[N], idx, cnt;\nint n, m, q;\nvector<int> G[N], NG[N];\nint sum[N];\nint stk[N], top;\n\nvoid tarjan(int u)\n{\n\tdfn[u] = low[u] = ++idx;\n\tstk[++top] = u;\n\tfor (int j : G[u])\n\t{\n\t\tif (!dfn[j])\n\t\t{\n\t\t\ttarjan(j);\n\t\t\tlow[u] = min(low[u], low[j]);\n\t\t\tif (dfn[u] == low[j])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tfor (int y = 0; y != j; top--)\n\t\t\t\t{\n\t\t\t\t\ty = stk[top];\n\t\t\t\t\tNG[y].emplace_back(cnt);\n\t\t\t\t\tNG[cnt].emplace_back(y);\n\t\t\t\t}\n\t\t\t\tNG[cnt].emplace_back(u);\n\t\t\t\tNG[u].emplace_back(cnt);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow[u] = min(low[u], dfn[j]);\n\t\t}\n\t}\n}\n\nvoid dfs(int u, int fa)\n{\n\tsum[u] = sum[fa] + (u <= n);\n\tfor (int j : NG[u])\n\t{\n\t\tif (j != fa)\n\t\t{\n\t\t\tdfs(j, u);\n\t\t}\n\t}\n}\n\nclass TreeCut\n{\npublic:\n\tint id[N], top[N], sz[N], dep[N], fa[N], son[N], idx;\n\tvoid dfs1(int u, int f)\n\t{\n\t\tdep[u] = dep[f] + 1;\n\t\tfa[u] = f;\n\t\tsz[u] = 1;\n\t\tfor (int j : NG[u])\n\t\t{\n\t\t\tif (j != f)\n\t\t\t{\n\t\t\t\tdfs1(j, u);\n\t\t\t\tsz[u] += sz[j];\n\t\t\t\tif (sz[son[u]] < sz[j]) son[u] = j;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int u, int tf)\n\t{\n\t\tid[u] = ++idx;\n\t\ttop[u] = tf;\n\t\tif (!son[u]) return;\n\t\tdfs2(son[u], tf);\n\t\tfor (int j : NG[u])\n\t\t{\n\t\t\tif (j != son[u] && j != fa[u])\n\t\t\t{\n\t\t\t\tdfs2(j, j);\n\t\t\t}\n\t\t}\n\t}\n\tvoid build()\n\t{\n\t\tdfs1(1, 1);\n\t\tdfs2(1, 1);\n\t}\n\tint LCA(int u, int v)\n\t{\n\t\twhile (top[u] ^ top[v])\n\t\t{\n\t\t\tif (dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\t\tu = fa[top[u]];\n\t\t}\n\t\treturn (dep[u] < dep[v] ? u : v);\n\t}\n}tc;\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tcnt = n;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tG[u].emplace_back(v);\n\t\tG[v].emplace_back(u);\n\t}\n\ttarjan(1);\n\tdfs(1, 1);\n\ttc.build();\n\tscanf(\"%d\", &q);\n\twhile (q--)\n\t{\n\t\tint s, t;\n\t\tscanf(\"%d%d\", &s, &t);\n\t\tint lca = tc.LCA(s, t);\n\t\tprintf(\"%d\\n\", sum[s] + sum[t] - 2 * sum[lca] + (lca <= n));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1680684139,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P4320 \u9053\u8def\u76f8\u9047"
    },
    {
        "content": "# \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a $ n $ \u4e2a\u8282\u70b9\uff0c$ m $ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $ u $ \u548c $ v $\uff0c\u6c42 $ u $ \u5230 $ v $ \u7684\u6240\u6709\u8def\u5f84\u4e2d\u5fc5\u7ecf\u7684\u70b9\u4e2a\u6570\u3002\n\n# \u601d\u8def\n\n\u5bf9\u539f\u56fe\u5efa\u7acb\u5706\u65b9\u6811\uff08\u7528 tarjan \u6c42\u51fa\u70b9\u53cc\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u65b0\u5efa\u4e00\u4e2a\u65b9\u70b9\uff0c\u518d\u5c06\u70b9\u53cc\u4e2d\u6bcf\u4e2a\u70b9\u5728\u65b0\u5efa\u7684\u56fe\u4e2d\u4e0e\u65b9\u70b9\u76f8\u8fde\uff09\uff0c\u9898\u76ee\u8981\u6c42\u7684\u5c31\u662f $u$ \u4e0e $v$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u5706\u70b9\u7684\u4e2a\u6570\u4e86\u3002\n\n\u56e0\u4e3a\u662f\u6c42\u8def\u5f84\u7684 size\uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528 LCT \u6765\u7ef4\u62a4\uff0c\u5c06\u5706\u70b9\u7684\u6743\u503c\u8bbe\u4e3a $1$\uff0c\u65b9\u70b9\u7684\u6743\u503c\u8bbe\u4e3a $0$\u3002\n\n\u8be2\u95ee\u65f6\u76f4\u63a5 `split(u, v)` \u6c42\u51fa size \u5c31\u597d\u4e86\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nnamespace fastio{\n    template<typename T> inline void read(T &t){\n        int x = 0, f = 1;\n        char c = getchar();\n        while(!isdigit(c)){\n            if(c == '-') f = -f;\n            c = getchar();\n        }\n        while(isdigit(c)) x = x * 10 + c - '0', c = getchar();\n        t = x * f;\n    }\n    template<typename T, typename ... Args> inline void read(T &t, Args&... args){\n        read(t);\n        read(args...);\n    }\n    template<typename T> void write(T t){\n        if(t < 0) putchar('-'), t = -t;\n        if(t >= 10) write(t / 10);\n        putchar(t % 10 + '0');\n    }\n};\nusing namespace fastio;\nconst int N = 5e5 + 5;\nint n, m, q;\nint ecnt, head[N << 1];\nstruct edge{\n    int v, nxt;\n}e[N << 1];\nvoid add(int u, int v){\n    e[++ecnt] = edge{v, head[u]};\n    head[u] = ecnt;\n}\nclass Link_Cut_Tree{\n    public:\n    struct Tree{\n        int fa, son[2], val, rev, siz;\n        #define ls a[x].son[0]\n        #define rs a[x].son[1]\n    }a[N << 1];\n    int top, st[N << 1];\n    bool isroot(int x){\n        return !(a[a[x].fa].son[0] == x || a[a[x].fa].son[1] == x);\n    }\n    void update(int x){\n        a[x].siz = a[ls].siz + a[rs].siz;\n        if(x <= n) a[x].siz++;\n    }\n    void pushr(int x){\n        a[x].rev ^= 1;\n        swap(ls, rs);\n    }\n    void pushdown(int x){\n        if(a[x].rev){\n            if(ls) pushr(ls);\n            if(rs) pushr(rs);\n            a[x].rev ^= 1;\n        }\n    }\n    void rotate(int x){\n        int y = a[x].fa, z = a[y].fa, k = a[y].son[1] == x;\n        if(!isroot(y)) a[z].son[a[z].son[1] == y] = x;\n        a[x].fa = z;\n        a[y].son[k] = a[x].son[k ^ 1], a[a[x].son[k ^ 1]].fa = y;\n        a[x].son[k ^ 1] = y, a[y].fa = x;\n        update(y), update(x);\n    }\n    void splay(int x){\n        int t = x;\n        st[++top] = t;\n        while(!isroot(t)) st[++top] = t = a[t].fa;\n        while(top) pushdown(st[top--]);\n        while(!isroot(x)){\n            int y = a[x].fa, z = a[y].fa;\n            if(!isroot(y)) rotate((a[z].son[1] == y) ^ (a[y].son[1] == x) ? x : y);\n            rotate(x);\n        }\n    }\n    void access(int x){\n        for(int son = 0; x; x = a[son = x].fa){\n            splay(x), a[x].son[1] = son, update(x);\n        }\n    }\n    void makeroot(int x){\n        access(x), splay(x), pushr(x);\n    }\n    int findroot(int x){\n        access(x), splay(x), pushdown(x);\n        while(a[x].son[0]) x = a[x].son[0], pushdown(x);\n        splay(x);\n        return x;\n    }\n    void link(int x, int y){\n        makeroot(x);\n        if(findroot(y) != x) a[x].fa = y;\n    }\n    void split(int x, int y){\n        makeroot(x), access(y), splay(y);\n    }\n    int query(int x, int y){\n        split(x, y);\n        return a[y].siz;\n    }\n}lct;\nint dfn[N << 1], low[N << 1], stk[N << 1], top, tim, tol;\nvoid tarjan(int u){\n    stk[++top] = u;\n    dfn[u] = low[u] = ++tim;\n    for(int i = head[u]; i; i = e[i].nxt){\n        int v = e[i].v;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if(low[v] == dfn[u]){\n                ++tol;\n                for(int x = 0; x != v; --top){\n                    x = stk[top];\n                    lct.link(x, tol);\n                }\n                lct.link(u, tol);\n            }\n        }else low[u] = min(low[u], dfn[v]);\n    }\n}\nsigned main(){\n    read(n, m), tol = n;\n    for(int i = 1, u, v; i <= m; ++i){\n        read(u, v);\n        add(u, v), add(v, u);\n    }\n    tarjan(1);\n    read(q);\n    while(q--){\n        int x, y;\n        read(x, y);\n        write(lct.query(x, y));\n        puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1658997406,
        "uid": 573341,
        "name": "MiniLong",
        "ccfLevel": 0,
        "title": "P4320 \u9053\u8def\u76f8\u9047 \u9898\u89e3"
    },
    {
        "content": "\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4320)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io/2022/04/29/P4320%E9%81%93%E8%B7%AF%E7%9B%B8%E9%81%87/)\n\n## \u524d\u8a00\n\n\u4e00\u773c\u51fa\u601d\u8def tarjan+LCA\uff0c\u611f\u89c9\u53ef\u4ee5\u5207\u6389\uff0c\u4f46\u662f\u6700\u540e\u8c03\u4e86\u4e24\u5929\n\n### \u524d\u7f6e\u829d\u58eb\n\ntarjan, v-DCC\u7f29\u70b9, \u5706\u65b9\u6811\uff0cLCA\n\n\n\n## \u5206\u6790\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a v-DCC \u4e2d\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u5c31\u6ca1\u6709\u4efb\u4f55\u5fc5\u7ecf\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8fdb\u884c v-DCC \u7f29\u70b9\u3002\n\n\u56e0\u4e3a\u9898\u76ee\u7ed9\u7684\u56fe\u662f\u8fde\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7f29\u5b8c\u70b9\u540e\u7684\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u4e5f\u5c31\u662f\u5e38\u8bf4\u7684**\u5706\u65b9\u6811**\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u70b9\u6570\u5c31\u662f\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u5706\u70b9\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u7684\u7c7b\u578b\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff0c\u6211\u4eec\u8bbe\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a $dist$ ( $dist$\u7528 LCA \u6c42 )\uff0c\u4e24\u70b9\u95f4\u5706\u70b9\u4e2a\u6570\u4e3a $x$ \u3002\n\n1. \u82e5\u8fd9\u4e24\u4e2a\u70b9\u90fd\u662f\u65b9\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 $x = dist / 2$ \n2. \u82e5\u8fd9\u4e24\u4e2a\u70b9\u4e00\u4e2a\u662f\u5706\u70b9\uff0c\u4e00\u4e2a\u70b9\u662f\u65b9\u70b9\uff0c\u5219 $x = (dist - 1) / 2$\n3. \u82e5\u8fd9\u4e24\u4e2a\u70b9\u90fd\u662f\u5706\u70b9\uff0c\u5219 $x = (dist - 2) / 2$\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u8ff0\u5f0f\u5b50\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e00\u4e2a\u5f0f\u5b50\n$$\nx = (dist - k)/2\n$$\n\u5176\u4e2d $k$ \u8868\u793a\u8fd9\u4e24\u4e2a\u70b9\u4e2d\u5706\u70b9\u7684\u6570\u91cf\u3002\n\n\u4f46\u662f\u9898\u76ee\u4e2d\u6709\u8bf4\u628a\u8fd9\u4e24\u4e2a\u70b9\u7b97\u8fdb\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\u4e3a $x + 2$\n\n\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 1e6 + 10, M = 2e6 + 10; // \u6ce8\u610fN\u8981\u5f00\u4e24\u500d\uff0c\u8981\u4e0d\u7136RE\nint h[N], e[M], ne[M], idx;\nint H[N], E[M], NE[M];\nint dep[N], f[N][21];\nint dfn[N], low[N], stk[N];\nint id[N];\nbool cut[N]; // \u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u5426\u4e3a\u5272\u70b9(\u5706\u70b9)\nint t, tt, cnt;\nint root;\nint n, m, q;\nvector<int> dcc[N];\n\ninline void tarjan(int u) // v-DCC \u7f29\u70b9\u677f\u5b50\n{\n    dfn[u] = low[u] = ++t;\n    stk[++tt] = u;\n    if (h[u] == -1)\n    {\n        dcc[++cnt].push_back(u);\n        return;\n    }\n    int kid = 0; \n    for (int i = h[u]; ~i; i = ne[i])\n    {\n        int v = e[i];\n        if (!dfn[v])\n        {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if (dfn[u] <= low[v])\n            {\n                if (u != root || ++kid > 1) cut[u] = true;\n                cnt++;\n                int j;\n                do {\n                    j = stk[tt--];\n                    dcc[cnt].push_back(j);\n                } while (v != j);\n                dcc[cnt].push_back(u);\n            }\n        }\n        else\n            low[u] = min(low[u], dfn[v]);\n    }\n}\n\ninline void add(int h[], int e[], int ne[], int a, int b)\n{\n    e[idx] = b;\n    ne[idx] = h[a];\n    h[a] = idx++;\n}\n\ninline void dfs(int u, int p) // LCA \u677f\u5b50\n{\n    dep[u] = dep[p] + 1, f[u][0] = p;\n    for (int i = 1; (1 << i) <= dep[u]; i++)\n        f[u][i] = f[f[u][i - 1]][i - 1];\n    for (int i = H[u]; ~i; i = NE[i])\n    {\n        int v = E[i];\n        if (v == p) continue;\n        dfs(v, u);\n    }\n}\n\ninline int lca(int x, int y)\n{\n    if (dep[x] < dep[y]) swap(x, y);\n    for (int i = log2(n); i >= 0; i--)\n        if (dep[f[x][i]] >= dep[y])\n            x = f[x][i];\n    if (x == y) return x;\n    for (int i = log2(n); i >= 0; i--)\n        if (f[x][i] != f[y][i])\n            x = f[x][i], y = f[y][i];\n    return f[x][0];\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    memset(h, -1, sizeof h);\n    memset(H, -1, sizeof H);\n    while (m--)\n    {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        add(h ,e, ne, a, b);\n        add(h, e, ne, b, a);\n    }\n    root = 1;\n    tarjan(1);\n    int num = cnt;\n    for (int i = 1; i <= n; i++)\n        if (cut[i])\n            id[i] = ++num;\n    idx = 0;\n    // \u5efa\u7acb\u5706\u65b9\u6811\n    for (int i = 1; i <= cnt; i++)\n        for (int j = 0; j < dcc[i].size(); j++)\n        {\n            int k = dcc[i][j];\n            if (cut[k])\n            {\n                add(H, E, NE, i, id[k]);\n                add(H, E, NE, id[k], i);\n            }\n            else id[k] = i;\n        }\n\n    dfs(1, 0);\n    scanf(\"%d\", &q);\n    while (q--)\n    {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int a = cut[s], b = cut[t];\n        s = id[s], t = id[t];\n        int p = lca(s, t);\n        int dist = dep[s] + dep[t] - 2 * dep[p];\n        printf(\"%d\\n\", (dist - (a + b)) / 2 + 2);\n    }\n    \n    return 0;\n}\n```\n\n",
        "postTime": 1651238208,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P4320"
    },
    {
        "content": "# \u5706\u65b9\u6811\u7684\u5b9a\u4e49\n\n\u5706\u65b9\u6811\u662f\u7528\u6765\u89e3\u51b3\u4ed9\u4eba\u638c\u56fe\u7684\u95ee\u9898\u7684\uff0c\u90a3\u4ec0\u4e48\u662f\u4ed9\u4eba\u638c\u56fe\u5462\uff1f\n\n\u5373\u4e0d\u5b58\u5728\u8fb9\u540c\u65f6\u5c5e\u4e8e\u591a\u4e2a\u73af\u7684\u65e0\u5411\u8fde\u901a\u56fe\u662f\u4e00\u68f5\u4ed9\u4eba\u638c\u3002\n\n## \u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u5b9a\u4e49\n\u8981\u4ecb\u7ecd\u5706\u65b9\u6811\uff0c\u9996\u5148\u8981\u4ecb\u7ecd\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u56fe\u7684\u4e00\u4e2a\u5b9a\u4e49\u662f\uff1a\u56fe\u4e2d\u4efb\u610f\u4e24\u4e0d\u540c\u70b9\u4e4b\u95f4\u90fd\u6709\u81f3\u5c11\u4e24\u6761\u70b9\u4e0d\u91cd\u590d\u7684\u8def\u5f84\u3002\n\n\u4e00\u79cd\u7b80\u5355\u7684\u5b9a\u4e49\uff1a\u4e0d\u5b58\u5728\u5272\u70b9\u7684\u56fe\u3002\n\n\u4f46\u8fd9\u79cd\u5b9a\u4e49\u5bf9\u4e8e\u4e24\u70b9\u4e00\u8fb9\u7684\u56fe\u65f6\u662f\u6ca1\u7528\u7684\uff0c\u5b83\u6ca1\u6709\u5272\u70b9\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u627e\u5230\u4e24\u6761\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u6761\u8def\u5f84\u3002\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u90a3\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u7b97\u4e24\u6b21\uff0c\u4f46\u7684\u786e\u6ca1\u6709\u76f8\u4ea4\uff0c\u56e0\u4e3a\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u70b9\uff09\u3002\n\n\u5728\u70b9\u53cc\u8fde\u901a\u56fe\u5185\uff0c\u4e00\u4e2a\u70b9\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u70b9\u53cc\uff0c\u4f46\u662f\u4e00\u6761\u8fb9\u5c5e\u4e8e\u6070\u597d\u4e00\u4e2a\u70b9\u53cc\u3002\n\n\u66f4\u591a\u5173\u4e8e\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u77e5\u8bc6\uff0c\u8bf7\u770b\u6211\u7684\u535a\u5ba2 $\\to$ [\u5f3a\u8fde\u901a\u5206\u91cf](https://www.cnblogs.com/orzz/p/15104647.html)\n\n\u66f4\u591a\u5173\u4e8e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u77e5\u8bc6\uff0c\u8bf7\u770b\u6211\u7684\u535a\u5ba2 $\\to$ [\u53cc\u8fde\u901a\u5206\u91cf](https://www.cnblogs.com/orzz/p/15114866.html)\n\n## \u7ee7\u7eed\u4ecb\u7ecd\u5706\u65b9\u6811\n\n\u5173\u4e8e\u5706\u65b9\u6811\u7684\u5efa\u56fe\uff0c\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5c06\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5185\u7684\u6240\u6709\u8fb9\u5220\u53bb\uff0c\u518d\u5c06\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5411\u4e00\u4e2a\u65b0\u5efa\u7684\u70b9\u8fde\u8fb9\uff0c\u8fd9\u4e2a\u65b0\u5efa\u7684\u70b9\u5373\u662f\u65b9\u70b9\u3002\n\n\u6240\u4ee5\u5728\u5706\u65b9\u6811\u4e2d\u6709 $n+c$ \u4e2a\u70b9\uff0c\u5176\u4e2d $n$ \u662f\u539f\u56fe\u70b9\u6570\uff0c$c$ \u662f\u539f\u56fe\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u3002\n\n\u6bcf\u4e2a\u70b9\u53cc\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u83ca\u82b1\u56fe\uff0c\u591a\u4e2a\u83ca\u82b1\u56fe\u901a\u8fc7\u539f\u56fe\u4e2d\u7684\u5272\u70b9\u8fde\u63a5\u5728\u4e00\u8d77\uff08\u56e0\u4e3a\u70b9\u53cc\u7684\u5206\u9694\u70b9\u662f\u5272\u70b9\uff09\u3002\n\n\u663e\u7136\uff0c\u5706\u65b9\u6811\u4e2d\u6bcf\u6761\u8fb9\u8fde\u63a5\u4e00\u4e2a\u5706\u70b9\u548c\u4e00\u4e2a\u65b9\u70b9\u3002\n\n\u5728\u4e0b\u9762\u8fd9\u5f20\u56fe\u4e2d\uff0c$[1,2,3,4,5]$ \u662f\u5706\u70b9\uff0c$[6,7]$ \u662f\u65b9\u70b9\u3002\n\n![](https://img-blog.csdnimg.cn/img_convert/a64ea1977df8894a39bf10c1ae9b80ab.png)\n\n\u800c\u5982\u679c\u5706\u65b9\u6811\u8fde\u901a\uff0c\u5219\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n* \u65b9\u70b9\u4e4b\u95f4\u4e0d\u4f1a\u5b58\u5728\u8fde\u8fb9\u3002\n\n* \u539f\u56fe\u7684\u5272\u70b9\u5c31\u662f\u5706\u65b9\u6811\u4e2d\u5ea6\u6570\u5927\u4e8e $1$ \u7684\u5706\u70b9\u3002\n\n* \u5706\u65b9\u6570\u662f\u4e00\u68f5\u975e\u5e38\u597d\u7684\u6811\uff0c\u5373\u70b9\u6570\u7b49\u4e8e\u8fb9\u6570\u52a0 $1$\u3002\n  \n\n* \u5982\u679c\u5706\u70b9\u7684 $size$ \u4e3a $1$\uff0c\u90a3\u4e48\u4e00\u4e2a\u5706\u70b9\u5b50\u6811\u7684 $size$ \u548c\u5c31\u662f\u5b83\u4e0b\u9762\u7684\u6240\u6709\u70b9\u7684\u6570\u91cf\u3002\n\n* \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\u4e2d\u7684\u4e24\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u7684\u5e76\u96c6\uff0c\u6070\u597d\u5b8c\u5168\u7b49\u4e8e\u8fd9\u4e2a\u70b9\u53cc\uff0c\u5373\u540c\u4e00\u4e2a\u70b9\u53cc\u4e2d\u7684\u4e24\u4e0d\u540c\u70b9 $u$\uff0c$v$ \u4e4b\u95f4\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u7b80\u5355\u8def\u5f84\u7ecf\u8fc7\u7ed9\u5b9a\u7684\u5728\u540c\u4e00\u4e2a\u70b9\u53cc\u5185\u7684\u53e6\u4e00\u70b9 $w$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8003\u8651\u4e24\u5706\u70b9\u5728\u5706\u65b9\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u4e0e\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u65b9\u70b9\u76f8\u90bb\u7684\u5706\u70b9\u7684\u96c6\u5408\uff0c\u5c31\u7b49\u4e8e\u539f\u56fe\u4e2d\u4e24\u70b9\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u70b9\u96c6\u3002\n\n\u5982\u679c\u539f\u56fe\u4e2d\u67d0\u4e2a\u8fde\u901a\u5206\u91cf\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u5219\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u5728\u540e\u7eed\u8ba8\u8bba\u4e2d\u4e0d\u8003\u8651\u5b64\u7acb\u70b9\u3002\n\n\u6ce8\u610f\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u5728\u8fd9\u91cc\u4e0d\u7b97\u70b9\u53cc\u3002\n\n## \u5e7f\u4e49\u5706\u65b9\u6811\n\n\u666e\u901a\u5706\u65b9\u6811\u53ea\u80fd\u89e3\u51b3\u4ed9\u4eba\u638c\u56fe\u4e0a\u7684\u95ee\u9898\uff0c\u800c\u5e7f\u4e49\u5706\u65b9\u6811\u5219\u53ef\u4ee5\u5c06\u6240\u6709\u65e0\u5411\u56fe\u8f6c\u5316\u4e3a\u5706\u65b9\u6811\u5904\u7406\u3002\n\n\u5e7f\u4e49\u5706\u65b9\u6811\u6027\u8d28\uff1a\u5706\u70b9\u65b9\u70b9\u76f8\u95f4\uff0c\u5373\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u4e0a\u5706\u70b9\u65b9\u70b9\u95f4\u9694\u5206\u5e03\uff1b\u4e0d\u5b58\u5728\u4e24\u4e2a\u2018\u2019\u76f8\u540c\u5f62\u72b6\u2018\u2019\u7684\u70b9\u76f8\u8fde\u3002\n\n\u4e0e\u5706\u65b9\u6811\u4e0d\u540c\u7684\u662f\uff0c\u5e7f\u4e49\u5706\u65b9\u6811\u9700\u8981\u628a\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u70b9\u4e5f\u770b\u6210\u4e00\u4e2a\u70b9\u53cc\uff0c\u539f\u672c\u4e24\u4e2a\u5706\u70b9\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u73b0\u5728\u5728\u4e2d\u95f4\u63d2\u5165\u4e00\u4e2a\u65b9\u70b9\u95f4\u9694\u5f00\u5c31\u597d\u4e86\u3002\n\n\u53ef\u4ee5\u53c2\u7167\u8fd9\u5f20\u56fe\n\n![](https://img-blog.csdnimg.cn/img_convert/51b720e058f7a5dc7dc77c9eb881274f.png)\n\n\u5173\u4e8e\u672c\u9898\uff1a[\u6d1b\u8c37 P4320 \u9053\u8def\u76f8\u9047](https://www.luogu.com.cn/problem/P4320)\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u65e0\u5411\u56fe\uff0c\u73b0\u5728 `yzh` \u8981\u4ece $u$ \u70b9\u5230\u5904\u4e8e $v$ \u70b9\u7684 `cxr` \u5bb6\uff08\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\u4ed6\u8981\u53bb\u5e72\u4ec0\u4e48\uff09\uff0c\u6c42\u6240\u6709\u4ece $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e2d\u7684\u5fc5\u7ecf\u70b9\u3002\n\n### \u89e3\u9898\u601d\u8def\n\n\u4ecb\u7ecd\u5b8c\u4e0a\u9762\u7684\u5706\u65b9\u6811\u540e\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u9898\u5f88\u7b80\u5355\uff0c\u5fc5\u7ecf\u70b9\u4e2a\u6570\u5176\u5b9e\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u5272\u70b9\u7684\u4e2a\u6570\u3002\n\n\u5176\u5b9e\u5c31\u662f\u4e0a\u9762\u8fd9\u6761\u5b9a\u7406\uff1a\n\n> \u539f\u56fe\u7684\u5272\u70b9\u5c31\u662f\u5706\u65b9\u6811\u4e2d\u5ea6\u6570\u5927\u4e8e $1$ \u7684\u5706\u70b9\u3002\n\n\u5f97\u51fa\uff0c\u5fc5\u7ecf\u70b9\u6570\u7b49\u4e8e\u5706\u65b9\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u4e0a\u5706\u70b9\u6570\u3002\n\n\u7531\u4e8e\u5e7f\u4e49\u5706\u65b9\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u4e0a\u5706\u70b9\u65b9\u70b9\u95f4\u9694\u5206\u5e03\uff0c\u6240\u4ee5\u9700\u8981\u9664\u4ee5 $2$\u3002\n\n\u76f4\u63a5\u8dd1\u4e00\u8fb9\u70b9\u53cc\u3002\n\n\u518d\u5efa\u56fe\u3002\n\n\u7136\u540e\u8dd1\u4e00\u8fb9\u6811\u94fe\u5256\u5206\uff0c\u8bb0\u5f55\u6df1\u5ea6\u548c\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\uff0c\u76f4\u63a5\u7528\u6811\u4e0a\u5dee\u5206\u7684\u77e5\u8bc6\u6c42\u89e3\u5c31\u884c\u4e86\u3002\n\n\u5373\u8bbe $lca$ \u4e3a $u$ \u548c $v$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5219 $Ans=(dep_u+dep_v-2*dep_{lca}) \\div 2+1$\u3002\n\n### AC CODE\n\u9605\u8bfb\u65f6\u8bf7\u7701\u7565\u524d\u9762\u7684\u5feb\u8bfb\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int _ = 2e6 + 5;\n\nstruct Fastio\n{\n    template <typename T>\n    Fastio operator>>(T &x)\n    {\n        x = 0;\n        char c = getchar();\n        while (c < '0' || c > '9')\n            c = getchar();\n        while (c >= '0' && c <= '9')\n            x = (x << 3) + (x << 1) + (c ^ 48), c = getchar();\n        return *this;\n    }\n    Fastio &operator<<(const char *str)\n    {\n        int cur = 0;\n        while (str[cur])\n            putchar(str[cur++]);\n        return *this;\n    }\n    template <typename T>\n    Fastio &operator<<(T x)\n    {\n        if (x == 0)\n        {\n            putchar('0');\n            return *this;\n        }\n        if (x < 0)\n            putchar('-'), x = -x;\n        static int sta[45];\n        int top = 0;\n        while (x)\n            sta[++top] = x % 10, x /= 10;\n        while (top)\n            putchar(sta[top] + '0'), --top;\n        return *this;\n    }\n\n} io;\n\nint n, m, q, tp;\nint cnt_node, cntn;\nint dfn[_], low[_];\nint dep[_], top[_], siz[_], hson[_], fa[_];\nstack<int> s;\n\nstruct Graph\n{\n    int tot, head[_], nxt[_ << 1], to[_ << 1];\n    void add(int u, int v)\n    {\n        nxt[++tot] = head[u];\n        to[tot] = v;\n        head[u] = tot;\n        nxt[++tot] = head[v];\n        to[tot] = u;\n        head[v] = tot;\n    }\n} G, T;\n\nvoid tarjan(int u)\n{\n    dfn[u] = low[u] = ++cnt_node;\n    s.push(u);\n    for (int i = G.head[u], v; i; i = G.nxt[i])\n    {\n        v = G.to[i];\n        if (!dfn[v])\n        {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if (low[v] >= dfn[u])\n            {\n                T.add(++cntn, u);\n                while (1)\n                {\n                    int now = s.top();\n                    s.pop();\n                    T.add(cntn, now);\n                    if (now == v)\n                        break;\n                }\n            }\n        }\n        else\n            low[u] = min(low[u], dfn[v]);\n    }\n}\n\nvoid dfs1(int u, int d = 1)\n{\n    siz[u] = 1;\n    dep[u] = d;\n    for (int i = T.head[u], v; i; i = T.nxt[i])\n    {\n        v = T.to[i];\n        if (dep[v])\n            continue;\n        fa[v] = u;\n        dfs1(v, d + 1);\n        siz[u] += siz[v];\n        if (siz[v] > siz[hson[u]])\n            hson[u] = v;\n    }\n}\n\nvoid dfs2(int u, int topf = 1)\n{\n    top[u] = topf;\n    if (!hson[u])\n        return;\n    dfs2(hson[u], topf);\n    for (int i = T.head[u], v; i; i = T.nxt[i])\n    {\n        v = T.to[i];\n        if (top[v])\n            continue;\n        dfs2(v, v);\n    }\n}\n\nint LCA(int x, int y)\n{\n    while (top[x] != top[y])\n    {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x, y);\n        x = fa[top[x]];\n    }\n    return dep[x] < dep[y] ? x : y;\n}\n\nsigned main()\n{\n    io >> n >> m;\n    cntn = n;\n    for (int i = 1, u, v; i <= m; i++)\n    {\n        io >> u >> v;\n        G.add(u, v);\n    }\n    tarjan(1);\n    dfs1(1);\n    dfs2(1);\n    io >> q;\n    while (q--)\n    {\n        int u, v;\n        io >> u >> v;\n        int lca = LCA(u, v);\n        io << (dep[u] + dep[v] - 2 * dep[lca]) / 2 + 1 << \"\\n\";\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1628909006,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P4320 \u9053\u8def\u76f8\u9047"
    },
    {
        "content": "\u5bf9\u539f\u56fe\u5efa\u51fa\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u90a3\u4e48\u4e24\u4e2a\u70b9 $u,v$ \u5728\u539f\u56fe\u4e4b\u95f4\u7684\u5fc5\u7ecf\u70b9\u6570\u7b49\u4e8e\u5728\u5706\u65b9\u6811\u8def\u5f84\u4e0a\u7684\u5706\u70b9\u4e2a\u6570\uff08\u5305\u62ec $u,v$\uff09\u3002\n\n\u56e0\u4e3a\u5706\u65b9\u6811\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u5706\u70b9\u548c\u65b9\u70b9\u76f8\u95f4\u5206\u5e03\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5706\u65b9\u6811\u4e0a\u4e24\u4e2a\u5706\u70b9 $u,v$ \u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a $k$\uff0c\u90a3\u4e48 $u,v$ \u95f4\u7684\u5706\u70b9\u4e2a\u6570\u4e3a $\\lfloor \\frac{k}{2} \\rfloor + 1$\u3002\n\n\u4e8e\u662f\u76f4\u63a5\u500d\u589e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\u3002\n\n```cpp\nconst int maxn = 5e5 + 5;\n\nint n, m, q, cnt;\nint tim, low[maxn], dfn[maxn];\nint tp, sta[maxn];\nvector<int> G[maxn], T[maxn];\n\ninline void tarjan(int u) {\n    low[u] = dfn[u] = ++tim;\n    sta[++tp] = u;\n    for (int v : G[u]) {\n        if (!dfn[v]) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if (low[v] == dfn[u]) {\n                cnt++;\n                for (int x = 0;x != v;tp--) {\n                    x = sta[tp];\n                    T[cnt].push_back(x);\n                    T[x].push_back(cnt);\n                }\n                T[cnt].push_back(u);\n                T[u].push_back(cnt);\n            }\n        } else low[u] = min(low[u], dfn[v]);\n    }\n}\n\nint dis[maxn], fa[maxn][25], dep[maxn];\n\ninline void dfs(int u, int fath) {\n    fa[u][0] = fath, dep[u] = dep[fath] + 1;\n    dis[u] = dis[fath] + 1;\n    for (int i = 1;i <= 20;i++) {\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    }\n    for (int v : T[u]) {\n        if (v == fath) continue;\n        dfs(v, u);\n    }\n}\ninline int getlca(int x, int y) {\n    if (dep[x] < dep[y]) swap(x, y);\n    for (int i = 20;i >= 0;i--)\n        if (dep[fa[x][i]] >= dep[y])\n            x = fa[x][i];\n    if (x == y) return x;\n    for (int i = 20;i >= 0;i--)\n        if (fa[x][i] != fa[y][i])\n            x = fa[x][i], y = fa[y][i];\n    return fa[x][0];\n}\n\nsigned main(void) {\n    n = read(), m = read();\n    for (int i = 1, u, v;i <= m;i++) {\n        u = read(), v = read();\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    cnt = n;\n    tarjan(1), tp--, dfs(1, 0);\n    q = read();\n    while (q--) {\n        int u = read(), v = read();\n        printf(\"%lld\\n\", (dis[u] + dis[v] - 2 * dis[getlca(u, v)]) / 2 + 1);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1625187911,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4320\u3010\u9053\u8def\u76f8\u9047\u3011"
    },
    {
        "content": "\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u5f20\u56fe\uff0c\u6c42\u51fa\u8be5\u56fe\u7684\u5706\u65b9\u6811\u4e0a\u7684\u5706\u70b9\u7684\u4e2a\u6570\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u5706\u65b9\u6811\u7684\u6a21\u677f\u4e86\uff0c\u8fd9\u91cc\u9009\u7528\u4e86$LCT$\u7ef4\u62a4$size$\u3002\n\n\u4e3b\u8981\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\u539f\u56fe\u4e0e\u5706\u65b9\u6811\u7684\u8fb9\u8981\u660e\u786e\u7684\u5206\u5f00\u50a8\u5b58\uff0c\u8fd9\u91cc\u9009\u7528\u4e86$namespace$\u3002\n\ncode\uff1a\n\n```cpp\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n    Read x = 0;\n    register bool w = 0;\n    register char c = getchar();\n    while (c > '9' || c < '0') {\n        if (c == '-')\n            w = 1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = getchar();\n    }\n    return w ? -x : x;\n}\nint n, m, q, dfn[1000001], low[1000001], tim, head[1000001], tot, cnt, st[1000001], top, fa[1000001];\nstruct edge {\n    int next, to;\n} e[3000001];\ninl void add(int x, int y) {\n    e[++tot] = edge{ head[x], y }, head[x] = tot;\n    e[++tot] = edge{ head[y], x }, head[y] = tot;\n}\nnamespace graph {\n    int head[1000001], tot;\n    struct edge {\n        int next, to;\n    } e[3000001];\n    inl void add(int x, int y) {\n        e[++tot] = edge{ head[x], y }, head[x] = tot;\n        e[++tot] = edge{ head[y], x }, head[y] = tot;\n    }\n    inl void tarjan(int x) {\n        dfn[x] = low[x] = ++tim;\n        st[++top] = x;\n        for (re i = head[x]; i; i = e[i].next) {\n            if (!dfn[e[i].to]) {\n                tarjan(e[i].to);\n                low[x] = min(low[x], low[e[i].to]);\n                if (low[e[i].to] == dfn[x]) {\n                    ::add(++cnt, x);\n                    do {\n                        ::add(cnt, st[top]);\n                    } while (st[top--] != e[i].to);\n                }\n            }\n            else\n                low[x] = min(low[x], dfn[e[i].to]);\n        }\n    }\n};\nstruct node {\n    int size, fa, child[2], w;\n    bool filp;\n} t[1000001];\ninl void maintain(int x) {\n    t[x].size = t[ls(x)].size + t[rs(x)].size + t[x].w;\n}\ninl void reverse(int x) {\n    swap(ls(x), rs(x));\n    t[x].filp ^= 1;\n}\ninl void pushdown(int x) {\n    if (t[x].filp) {\n        if (ls(x))reverse(ls(x));\n        if (rs(x))reverse(rs(x));\n        t[x].filp = 0;\n    }\n}\ninl bool poi(int x) {\n    return rs(fa(x)) == x;\n}\ninl bool nroot(int x) {\n    return ls(fa(x)) == x || rs(fa(x)) == x;\n}\ninl void rotate(int x) {\n    re f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n    if (nroot(f))t[gf].child[gfs] = x;\n    t[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n    if (s)fa(s) = f;\n    fa(f) = x, fa(x) = gf;\n    maintain(f);\n}\ninl void push(int x) {\n    if (nroot(x))push(fa(x));\n    pushdown(x);\n}\ninl void splay(int x) {\n    push(x);\n    while (nroot(x)) {\n        if (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n        rotate(x);\n    }\n    maintain(x);\n}\ninl void access(int x) {\n    for (re i = 0; x; x = fa(i = x)) {\n        splay(x), rs(x) = i, maintain(x);\n    }\n}\ninl void makeroot(int x) {\n    access(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n    makeroot(y), access(x), splay(x);\n}\ninl void link(int x, int y) {\n    split(x, y), t[y].fa = x;\n}\ninl void dfs(int x) {\n    for (re i = head[x]; i; i = e[i].next) {\n        if (e[i].to != fa[x]) {\n            fa[e[i].to] = x;\n            fa(e[i].to) = x;\n            dfs(e[i].to);\n        }\n    }\n}\nsigned main() {\n    cnt = n = read<int>(), m = read<int>();\n    for (re i = 1; i <= m; i++) {\n        re x = read<int>(), y = read<int>();\n        graph::add(x, y);\n    }\n    for (re i = 1; i <= n; i++) {\n        t[i].w = 1;\n        if (!dfn[i])graph::tarjan(i);\n    }\n    dfs(1);\n    q = read<int>();\n    while (q--) {\n        re x = read<int>(), y = read<int>();\n        split(x, y);\n        printf(\"%d\\n\", t[x].size);\n    }\n}\n```\n\n",
        "postTime": 1555592921,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4320 \u9053\u8def\u76f8\u9047 \u5706\u65b9\u6811 LCT"
    }
]