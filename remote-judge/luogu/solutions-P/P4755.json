[
    {
        "content": "\u6211\u4eec\u8003\u8651\u7528\u5206\u6cbb\u7684\u601d\u60f3\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5047\u8bbe\u6211\u4eec\u5728\u8ba1\u7b97\u533a\u95f4$[l,r]$\u6570\u5bf9\u7684\u6570\u91cf\uff0c\u5176\u4e2d\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5de6\u7aef\u7684\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u4e3a$mx$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u5904\u7406$[l,mx-1]$\u533a\u95f4\u6570\u5bf9\u7684\u6570\u91cf\u548c$[mx+1,r]$\u533a\u95f4\u6570\u5bf9\u7684\u6570\u91cf\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4$[l,r]$\uff0c\u5f53\u6211\u4eec\u786e\u5b9a\u4e86$a_l$\u65f6\uff0c\u53ea\u9700\u8981\u6c42$[mx+1,r]$\u4e2d\u6570\u5b57\u4e0d\u5927\u4e8e$\\frac {a_{mx}}{a_l}$\u7684\u5373\u662f\u4ee5$l$\u4e3a\u5de6\u7aef\u70b9\u7b54\u6848\u7684\u5bf9\u6570\uff08\u56e0\u4e3a\u6211\u4eec\u5206\u533a\u95f4\u662f\u4ee5\u6700\u5de6\u7aef\u7684\u6700\u5927\u503c\u533a\u5206\u7684\uff09\uff0c\u5f53\u786e\u5b9a\u4e86$a_r$\u65f6\u540c\u7406\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5c0f\u7684\u533a\u95f4\uff0c\u7136\u540e\u786e\u5b9a\u53e6\u4e00\u8fb9\u8981\u67e5\u8be2\u7684\u533a\u95f4\u4ee5\u53ca\u67e5\u8be2\u7684\u503c\uff0c\u8bb0\u5f55\u4e0b\u540e\u79bb\u7ebf\u67e5\u8be2\u3002\r\n\r\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u6240\u6709\u67e5\u8be2\u7684\u533a\u95f4\u6570\u91cf\u4e0d\u8d85\u8fc7$n\\ log\\ n$\u4e2a\u3002\u8003\u8651\u5f53\u8fdb\u884c\u4e00\u6b21\u957f\u5ea6\u4e3a$len$\u7684\u679a\u4e3e\u65f6\uff0c\u90a3\u4e48\u6b64\u65f6\u88ab\u5206\u5f00\u7684\u533a\u95f4\u957f\u5ea6\u5fc5\u7136\u5927\u4e8e$2\\times len$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u88ab\u679a\u4e3e\u7684\u6b21\u6570\u5fc5\u7136\u4e0d\u8d85\u8fc7$log\\ n$\uff0c\u6bcf\u88ab\u679a\u4e3e\u4e00\u6b21\u4f1a\u5f62\u6210\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\uff0c\u6240\u4ee5\u8be2\u95ee\u533a\u95f4\u4e0d\u8d85\u8fc7$n\\ log\\ n$\u4e2a\u3002\r\n\r\n\u8003\u8651\u5982\u679c\u9009\u5b9a\u4e00\u4e2a\u7aef\u70b9\uff0c\u90a3\u4e48\u53ef\u884c\u7684\u53f3\u7aef\u70b9\u7684\u6570\u91cf\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u3002\uff08\u67e5\u8be2 $[l,r]$ \u4e2d\u5c0f\u4e8e $x$ \u7684\u6570\u5b57\u6570\u91cf\u53ef\u4ee5\u7528 $[1,r]$ \u4e2d\u5c0f\u4e8e $x$ \u7684\u6570\u5b57\u6570\u91cf\u51cf\u53bb $[1,l-1]$ \u4e2d\u5c0f\u4e8e $x$ \u7684\u6570\u5b57\u6570\u91cf\uff09\r\n\r\n\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4$[l,r]$\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u6570\u5b57\u6570\u91cf\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\uff0c\u7528$[1,r]$\u4e2d\u7684\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u6570\u5b57\u6570\u91cf\u51cf\u53bb$[1,l-1]$\u4e2d\u7684\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u6570\u5b57\u6570\u91cf\u5373\u4e3a\u7b54\u6848\u3002\r\n\r\n```\r\n#include <bits/stdc++.h> \r\n#define ll long long\r\n#define pr pair<int,int>\r\n#define fi first\r\n#define se second\r\n#define pb push_back\r\n#define MAXN 500005\r\nusing namespace std;\r\n    int n,en,r,len;\r\n    int a[MAXN],L[MAXN],R[MAXN],b[MAXN];\r\n    pr s[MAXN];\r\n    vector <int> g[MAXN];\r\n    ll ans;\r\n    ll tr[MAXN];\r\nint inline read()\r\n{\r\n    int x=0,f=1;char ch=getchar();\r\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\r\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\r\n    return x*f;\r\n}\r\ninline int abs(int x){return x>=0?x:-x;}\r\ninline int find_ind(int x){return x>=b[n]?n:upper_bound(b+1,b+len+1,x)-b-1;}\r\ninline int lowbit(int x){return x&-x;}\r\nll query(int x)\r\n{\r\n    ll res=0;\r\n    while (x)\r\n    {\r\n        res+=tr[x];\r\n        x-=lowbit(x);\r\n    }\r\n    return res;\r\n}\r\nvoid update(int x,int v)\r\n{\r\n    while (x<=n)\r\n    {\r\n        tr[x]+=v;\r\n        x+=lowbit(x);\r\n    }\r\n}\r\nint main()\r\n{\r\n    n=read();\r\n    for (int i=1;i<=n;i++)\r\n        b[i]=a[i]=read();\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        while (en&&s[en].fi<a[i]) en--;\r\n        L[i]=en?s[en].se+1:1;\r\n        s[++en]=make_pair(a[i],i);\r\n    }\r\n    en=0;\r\n    for (int i=n;i;i--)\r\n    {\r\n        while (en&&s[en].fi<=a[i]) en--;\r\n        R[i]=en?s[en].se-1:n;\r\n        s[++en]=make_pair(a[i],i); \r\n    }\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        if (i-L[i]<=R[i]-i) \r\n        {\r\n            g[i-1].pb(-1);\r\n            g[R[i]].pb(1);\r\n            for (int j=L[i];j<i;j++)\r\n            {\r\n                g[i-1].pb(-a[i]/a[j]);\r\n                g[R[i]].pb(a[i]/a[j]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            g[L[i]-1].pb(-1);\r\n            g[i].pb(1);\r\n            for (int j=i+1;j<=R[i];j++)\r\n            {\r\n                g[L[i]-1].pb(-a[i]/a[j]);\r\n                g[i].pb(a[i]/a[j]);\r\n            }\r\n        }\r\n    }\r\n    sort(b+1,b+n+1);\r\n    len=unique(b+1,b+n+1)-b-1;\r\n    for (int i=1;i<=n;i++)\r\n        a[i]=lower_bound(b+1,b+len+1,a[i])-b;\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        update(a[i],1);\r\n        int to=g[i].size();\r\n        for (int j=0;j<to;j++)\r\n        {\r\n            r=find_ind(abs(g[i][j]));\r\n            g[i][j]<0?ans-=query(r):ans+=query(r);\r\n        }\r\n    }\r\n    cout<<ans;\r\n    return 0;\r\n}\r\n```",
        "postTime": 1531582464,
        "uid": 9433,
        "name": "FlierKing",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4755)\n\n\u8003\u8651\u5206\u6cbb\uff08\u8fd9\u662f\u5957\u8def\uff0c\u60f3\u4e0d\u5230\u53ea\u80fd\u8bf4\u505a\u9898\u5c11~~\u522b\u6253\u6211~~\uff09\u3002\n\n\u5bf9\u4e8e\u5f53\u524d\u533a\u95f4$[ql,qr]$\uff1a\n\n\u6211\u4eec\u5148\u5224\u65ad\u533a\u95f4\u957f\u5ea6\u662f\u5426\u4e3a$1$\uff0c\u4e3a$1$\u53ea\u9700\u8981\u7279\u5224\u5f53\u524d\u8fd9\u4e2a\u6570\u662f\u4e0d\u662f$1$\u5c31\u53ef\u4ee5\u4e86\u3002  \n\n\u5426\u5219\u6211\u4eec\u627e\u5230\u533a\u95f4\u6700\u5927\u503c\u4f4d\u7f6e$mid$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528$ST$\u8868\u3002\u4e4b\u540e\u6211\u4eec\u7edf\u8ba1\u8fc7$mid$\u7684\u6240\u6709$[l,r]$\uff0c\u4e4b\u540e\u9012\u5f52$[ql,mid-1],[mid+1,qr]$\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u7edf\u8ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e$mid$\u7684\u4e00\u8fb9\u3002\u5047\u8bbe\u679a\u4e3e\u7684\u6570\u662f$a_i$\uff0c\u6211\u4eec\u9700\u8981\u5728$mid$\u7684\u53e6\u4e00\u8fb9\u627e\u5230\u4e00\u4e2a$a_j$\uff0c\u6ee1\u8db3$a_i*a_j\\leqslant a_{mid}$\uff0c\u5373$a_j\\leqslant \\lfloor\\frac{a_{mid}}{a_i}\\rfloor$\u3002\n\n\u73b0\u5728\u95ee\u9898\u53d8\u4e3a\u7edf\u8ba1\u4e00\u4e2a\u533a\u95f4\u5185\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\u5373\u53ef\u3002\n\n\u4f46\u662f\u73b0\u5728\u6709\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u679a\u4e3e\u4e00\u8fb9\u518d\u9012\u5f52\u53ef\u4ee5\u88ab\u5361\u6210$O(n^2logn)$\uff0c\u8fd9\u91cc\u6211\u4eec\u8fd0\u7528\u542f\u53d1\u5f0f\u7684\u601d\u60f3\uff0c\u53ea\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\u5c0f\u7684\u90a3\u8fb9\uff0c\u5c31\u53ef\u4ee5\u505a\u5230$O(nlog^2n)$\n\np.s \u56e0\u4e3a$a_i$\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=1e5+10;\nint n,num,tot;\nint a[maxn],b[maxn],lg[maxn],root[maxn];\nint st[maxn][20];\nll ans;\nstruct Seg\n{\n\t#define lc(p) (seg[p].lc)\n\t#define rc(p) (seg[p].rc)\n\t#define sum(p) (seg[p].sum)\n\tint lc,rc,sum;\n}seg[maxn*30];\nvoid insert(int pre,int &p,int l,int r,int pos)\n{\n\tp=++tot;\n\tseg[p]=seg[pre];sum(p)++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)insert(lc(pre),lc(p),l,mid,pos);\n\telse insert(rc(pre),rc(p),mid+1,r,pos);\n}\nint query(int pre,int p,int l,int r,int ql,int qr)\n{\n\tif(ql>r||qr<l)return 0;\n\tif(l>=ql&&r<=qr)return sum(p)-sum(pre);\n\tint mid=(l+r)>>1,res=0;\n\tif(ql<=mid)res+=query(lc(pre),lc(p),l,mid,ql,qr);\n\tif(qr>mid)res+=query(rc(pre),rc(p),mid+1,r,ql,qr);\n\treturn res;\n}\ninline void ST()\n{\n\tlg[0]=-1;\n\tfor(int i=1;i<=n;i++)lg[i]=lg[i>>1]+1;\n\tfor(int i=1;i<=n;i++)st[i][0]=i;\n\tfor(int j=1;j<=17;j++)\n\t\tfor(int i=1;i+(1<<j)-1<=n;i++)\n\t\t\tst[i][j]=a[st[i][j-1]]>=a[st[i+(1<<(j-1))][j-1]]?st[i][j-1]:st[i+(1<<(j-1))][j-1];\n}\ninline int st_query(int l,int r)\n{\n\tint t=lg[r-l+1];\n\treturn a[st[l][t]]>=a[st[r-(1<<t)+1][t]]?st[l][t]:st[r-(1<<t)+1][t];\n}\nvoid solve(int ql,int qr)\n{\n\tif(ql>qr)return;\n\tif(ql==qr){ans+=(b[a[ql]]==1);return;}\n\tint mid=st_query(ql,qr);\n\tif(mid-ql+1<=qr-mid)\n\t\tfor(int i=ql;i<=mid;i++)\n\t\t{\n\t\t\tint k=upper_bound(b+1,b+num+1,b[a[mid]]/b[a[i]])-b-1;\n\t\t\tans+=query(root[mid-1],root[qr],1,num,1,k);\n\t\t}\n\telse\n\t\tfor(int i=mid;i<=qr;i++)\n\t\t{\n\t\t\tint k=upper_bound(b+1,b+num+1,b[a[mid]]/b[a[i]])-b-1;\n\t\t\tans+=query(root[ql-1],root[mid],1,num,1,k);\t\t\t\n\t\t}\n\tsolve(ql,mid-1);solve(mid+1,qr);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]),b[i]=a[i];\n\tsort(b+1,b+n+1);num=unique(b+1,b+n+1)-(b+1);\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(b+1,b+num+1,a[i])-b;\n\tfor(int i=1;i<=n;i++)insert(root[i-1],root[i],1,num,a[i]);\n\tST();\n\tsolve(1,n);\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1576849660,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4755 Beautiful Pair(\u5206\u6cbb+\u4e3b\u5e2d\u6811)"
    },
    {
        "content": "\u7a81\u7136\u60f3\u5230\u5199\u4e00\u4e0b\u8fd9\u4e2a\u9898\u7684\u9898\u89e3\n\n\u5b9e\u9645\u4e0a\u89c9\u5f97\u6709\u70b9\u50cf\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u578b\u5957\u4e0a\u4e00\u4e2acdq\u5206\u6cbb\u7684\u601d\u60f3\n\n\u5efa\u51fa\u4e00\u4e2a\u7b1b\u5361\u5c14\u6811\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8d21\u732e\u90fd\u662f$max$\u4e24\u8fb9\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u50cfcdq\u5206\u6cbb\u4e00\u6837\u8003\u8651\u5de6\u53f3\u4e24\u8fb9\u7684\u5f71\u54cd\uff1a\n\n1. $max$\u7684\u5de6\u8fb9\u7684\n1. $max$\u7684\u53f3\u8fb9\u7684\n1. $max$\u7684\u53f3\u8fb9\u7684\u5bf9\u5de6\u8fb9\u7684\u5f71\u54cd\n\n\u6700\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e0d\u50cfcdq\u4e00\u6837\u7684\u89c4\u6574\uff08\uff1f\uff09\uff0c\u8981\u8003\u8651\u7528\u5c0f\u7684\u533a\u95f4\u6765\u67e5\u627e\uff0c\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u590d\u6742\u5ea6$O(nlog^{2}n)$\n\n\u81f3\u4e8e\u770b\u5230\u4e0a\u9762\u6709\u4eba\u53ef\u6301\u4e45\u5316\uff0c\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u964d\u4e86\u4e00\u7ef4\u7684$log$\n\n\u81f3\u4e8e\u7b1b\u5361\u5c14\u6811\u7684 $O(n)$ \u5efa\u6811\u548c\u6811\u72b6\u6570\u7ec4\u9012\u5f52\u7684\u6280\u5de7\u5c31\u770b\u770b\u4ee3\u7801\u5427\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\n\nint q[100010];\n\nint ll[100010],rr[100010],top,root;\n\ninline void build(long long a[],int n)\n{\n  int maxn=-0x3f3f3f3f;\n  for(int i=1;i<=n;i++)\n  {\n    if(a[i]>maxn)\n    {\n      root=i;\n      maxn=a[i];\n    }\n    while(!top==0&&a[q[top-1]]<a[i])\n    {\n      ll[i]=q[top-1];\n      top--;\n    }\n    if(!top==0)\n    {\n      rr[q[top-1]]=i;\n    }\n    q[top++]=i;\n  }\n}\n\nint n,size;\n\nlong long a[100010],c[100010],b[100010],ans;\n\ninline void add(int x,long long v)\n{\n  for(;x<=n;x+=(x&-x)) c[x]+=v;\n}\n\ninline long long query(int x)\n{\n  long long ans=0;\n  for(;x;x-=(x&-x)) ans+=c[x];\n  return ans;\n}\n\ninline void dfs(int u,int l,int r)\n{\n  if(u==0) return ;\n  if(u-l>r-u)\n  {\n    for(int i=u;i<=r;i++)\n    {\n      int now=upper_bound(b,b+size+1,b[a[u]]/b[a[i]])-b;\n      if(now) ans-=query(now-1);\n    }\n    dfs(ll[u],l,u-1);\n    add(a[u],1);\n    for(int i=u;i<=r;i++)\n    {\n      int now=upper_bound(b,b+size+1,b[a[u]]/b[a[i]])-b;\n      if(now) ans+=query(now-1);\n    }\n    dfs(rr[u],u+1,r);\n  }\n  else\n  {\n    for(int i=l;i<=u;i++)\n    {\n      int now=upper_bound(b,b+size+1,b[a[u]]/b[a[i]])-b;\n      if(now) ans-=query(now-1);\n    }\n    dfs(rr[u],u+1,r);\n    add(a[u],1);\n    for(int i=l;i<=u;i++)\n    {\n      int now=upper_bound(b,b+size+1,b[a[u]]/b[a[i]])-b;\n      if(now) ans+=query(now-1);\n    }\n    dfs(ll[u],l,u-1);\n  }\n}\n/*\n\u8fd9\u4e2a\u5730\u65b9\u7684\u6811\u72b6\u6570\u7ec4\u5982\u679c\u5355\u5c42\u90fd\u8981\u66b4\u529b\u7136\u540e\u5220\u9664\u7684\u8bdd\u5c31\u4f1a\u6302\uff0c\u56e0\u4e3a\u590d\u6742\u5ea6\u5c31\u4e0d\u80fd\u4fdd\u8bc1\n\u6240\u4ee5\u8003\u8651\u4e2d\u5e8f\u904d\u5386\uff0c\u52a0\u5165\u8d21\u732e\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e4b\u524d\u6811\u72b6\u6570\u7ec4\u6709\u7684\u6570\uff0c\u5c31\u53ef\u4ee5\u5728\u8fdb\u5165\u7684\u65f6\u5019\u6d88\u9664\u5f71\u54cd\uff0c\u5de6\u5b50\u6811\u4e0a\u6765\u7684\u65f6\u5019\u518d\u8bb0\u5f55\u3002\u7136\u540e\u518d\u901a\u8fc7\u5c0f\u533a\u95f4\u67e5\u8be2\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\n*/\nint main()\n{\n  scanf(\"%d\",&n);\n  for(int i=1;i<=n;i++)\n  {\n    scanf(\"%d\",&a[i]);\n    b[i]=a[i];\n  }\n  sort(b+1,b+n+1);\n  size=unique(b+1,b+n+1)-b-1;\n  for(int i=1;i<=n;i++) a[i]=lower_bound(b+1,b+size+1,a[i])-b;\n  build(a,n);\n  dfs(root,1,n);\n  printf(\"%lld\\n\",ans);\n}\n```\n",
        "postTime": 1592479454,
        "uid": 62573,
        "name": "zzqDeco",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "# \u9898\u89e3 - $\\mathrm{P4755}$\n\n## \u9898\u76ee\u610f\u601d\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4755)\n\n## $\\mathrm{Sol}$\n\n\u4e00\u9053\u5957\u8def\u9898\uff0c\u5f88\u591a\u9898\u90fd\u7528\u5230\u4e86\u8fd9\u4e2a\u5957\u8def\u3002\u4f46\u7531\u4e8e\u4e3b\u5e2d\u6811\u7684\u603b\u603b\u539f\u56e0\u8c03\u4e86\u597d\u4e45\u3002\u3002\u3002\n\n\u9996\u5148\u6211\u4eec\u7528\u5355\u8c03\u6808 $O(n)$ \u6c42\u51fa\u5bf9\u4e8e\u4e00\u4e2a\u6570 $i$ \uff0c\u5de6\u53f3\u4e24\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5927\u7684\u6570\u7684\u4f4d\u7f6e\u4e3a $l_i$ \u548c $r_i$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7528\u5230\u4e00\u4e2a\u5957\u8def\u5c31\u662f\u6bcf\u6b21\u6211\u4eec\u679a\u4e3e\u957f\u5ea6\u8f83\u77ed\u7684\u4e00\u8fb9\u6765\u8ba1\u7b97\u957f\u7684\u4e00\u8fb9\uff0c\u8fd9\u6837\u5b50\u5747\u644a\u4e0b\u6765\u662f $\\log n$ \u7684\u3002\u4e8e\u662f\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5728 $i$ \u7684\u5de6\u533a\u95f4\u5185\u679a\u4e3e\u5230 $j$ \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5728\u53f3\u533a\u95f4\u7406\u627e\u51fa\u6709\u51e0\u4e2a $a_k$ \u6ee1\u8db3 $a_k\\leq \\frac{a_i}{a_j}$\u3002\u8fd9\u4e2a\u5c31\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\u5566\uff0c\u76f4\u63a5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u533a\u95f4 $[l,r]$ \u4e2d\u6709\u51e0\u4e2a\u6570\u5c0f\u4e8e $x$\u3002\n\n\u603b\u4f53\u6765\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\n\n## $\\mathrm{Code}$\n\n```cpp\n#include <bits/stdc++.h>\n#define For(i,a,b) for ( int i=(a);i<=(b);i++ )\n#define Dow(i,b,a) for ( int i=(b);i>=(a);i-- )\n#define GO(i,x) for ( int i=head[x];i;i=e[i].nex )\n#define mem(x,s) memset(x,s,sizeof(x))\n#define cpy(x,s) memcpy(x,s,sizeof(x))\n#define YES return puts(\"YES\"),0\n#define NO return puts(\"NO\"),0\n#define GG return puts(\"-1\"),0\n#define pb push_back\n#define int long long  \nusing namespace std;\n\nstruct IO\n{\n\t#define MAXSIZE (1 << 20)\n\t#define isdigit(x) (x >= '0' && x <= '9')\n  \tchar buf[MAXSIZE],*p1,*p2;\n  \tchar pbuf[MAXSIZE],*pp;\n  \tIO():p1(buf),p2(buf),pp(pbuf){}\n  \tinline char gc() {\n    \tif (p1==p2) p2=(p1=buf)+fread(buf,1,MAXSIZE,stdin);\n    \treturn p1==p2?' ':*p1++;\n  \t}\n\tinline bool blank(char ch) {return ch==' '||ch =='\\n'||ch == '\\r'||ch == '\\t';}\n  \ttemplate <class T>\n  \tinline void read(T &x)\n\t{\n\t    register double tmp=1;register bool sign=0; x=0;\n\t    register char ch=gc();\n\t    for (;!isdigit(ch);ch=gc()) if(ch=='-') sign=1;\n\t    for (;isdigit(ch);ch=gc()) x=x*10+(ch-'0');\n\t    if (ch=='.') for (ch=gc();isdigit(ch);ch=gc()) tmp/=10.0,x+=tmp*(ch-'0');\n\t    if (sign) x=-x;\n  \t}\n  \tinline void read(char *s)\n\t{\n    \tregister char ch=gc();\n\t\tfor (;blank(ch);ch=gc());\n\t\tfor (;!blank(ch);ch=gc()) *s++=ch;\n    \t*s=0;\n  \t}\n  \tinline void read(char &c) {for(c=gc();blank(c);c=gc());}\n  \ttemplate<class t> inline void write(t x){\n\t\tif(x<0) putchar('-'),write(-x);\n\t\telse{if(x>9) write(x/10);putchar('0'+x%10);}\n\t}\n} io;\n\nconst int mod=1e9+7;\nconst int mo=998244353;\nconst int N=1e5+5;\nconst int M=5e6+1; \n\nint n,m,l[N],r[N],stak[N],a[N],b[N],Rt[N],top,ds;\n\nstruct Seg\n{\n\tint ls,rs,sum;\n};\nSeg T[N*30];\n\ninline void insert(int pre,int &p,int l,int r,int pos)\n{\n\tp=++ds;\n\tT[p]=T[pre];\n\tT[p].sum++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid) insert(T[pre].ls,T[p].ls,l,mid,pos);\n\telse insert(T[pre].rs,T[p].rs,mid+1,r,pos);\n}\n\ninline int ask(int pre,int p,int l,int r,int ql,int qr)\n{\n\tif(ql>r||qr<l) return 0;\n\tif(l>=ql&&r<=qr) return T[p].sum-T[pre].sum;\n\tint mid=(l+r)>>1;\n\tint res=0;\n\tif(ql<=mid) res+=ask(T[pre].ls,T[p].ls,l,mid,ql,qr);\n\tif(qr>mid) res+=ask(T[pre].rs,T[p].rs,mid+1,r,ql,qr);\n\treturn res;\n}\n\nsigned main()\n{\n\tio.read(n);\n\tFor(i,1,n) \n\t{\n\t\tio.read(a[i]);\n\t\tb[i]=a[i];\n\t\tr[i]=n,l[i]=1;\n\t}\n\tsort(b+1,b+n+1);\n\tm=unique(b+1,b+n+1)-b-1;\n\tstak[top=1]=0;\n\tFor(i,1,n) \n\t{\n\t\twhile(top&&a[stak[top]]<a[i]) top--;\n\t\tif(top) l[i]=stak[top]+1;\n\t\tstak[++top]=i;\n\t}\n\tstak[top=1]=n+1;\n\tDow(i,n,1)\n\t{\n\t\twhile(top&&a[stak[top]]<=a[i]) top--;\n\t\tif(top) r[i]=stak[top]-1;\n\t\tstak[++top]=i;\n\t}\n\tFor(i,1,n) \n\t{\n\t\tint p=lower_bound(b+1,b+m+1,a[i])-b;\n\t\tinsert(Rt[i-1],Rt[i],1,m,p);\n\t}\n\tint ans=0;\n\tFor(i,1,n) \n\t{\n\t\tif(i-l[i]<r[i]-i)\n\t\t{\n\t\t\tFor(j,l[i],i) \n\t\t\t{\n\t\t\t\tint rem=(ceil)(a[i]/a[j]);\n\t\t\t\tint p=upper_bound(b+1,b+m+1,rem)-b-1;\n\t\t\t\tans+=ask(Rt[i-1],Rt[r[i]],1,m,1,p);\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tFor(j,i,r[i])\n\t\t\t{\n\t\t\t\tint rem=(ceil)(a[i]/a[j]);\n\t\t\t\tint p=upper_bound(b+1,b+m+1,rem)-b-1;\n\t\t\t\tint gs=0;\n\t\t\t\tans+=ask(Rt[l[i]-1],Rt[i],1,m,1,p);\n\t\t\t}\n\t\t}\n\t}\n\tio.write(ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1596451178,
        "uid": 308464,
        "name": "\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "# P4755 Beautiful Pair 2018 \u6d1b\u8c377\u6708\u6708\u8d5b T4\n## \u9898\u76ee\u63cf\u8ff0\n\u5c0fD\u6709\u4e2a\u6570\u5217{ $a$ }\uff0c\u5f53\u4e00\u4e2a\u6570\u5bf9$(i,j)(i\\leq j)$\u6ee1\u8db3 $a_i$ \u548c $a_j$ \u7684\u79ef\u4e0d\u5927\u4e8e $a_i$, $a_{i+1}$,$...$,$a_j$\t  \u4e2d\u7684\u6700\u5927\u503c\u65f6\uff0c\u5c0f$D$\u8ba4\u4e3a\u8fd9\u4e2a\u6570\u5bf9\u662f\u7f8e\u4e3d\u7684.\u8bf7\u4f60\u6c42\u51fa\u7f8e\u4e3d\u7684\u6570\u5bf9\u7684\u6570\u91cf\u3002  \n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ 1\\leq n\\leq 10^5$   \n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ 1\\leq a_i \\leq10^9$  \n\n------------\n\n\u611f\u8c22\u849f\u84bb\uff08Faker\uff09[ZhYic](https://www.luogu.org/blog/noipruoji2017/)\u5bf9\u601d\u8def\u548c\u4ee3\u7801\u7684\u83ab\u5927\u5e2e\u52a9\u3002\n\n\n------------\n## \u5206\u6790\n$1$ . \u9898\u76ee\u5f88\u7b80\u77ed\uff0c\u770b\u4f3c\u4e0d\u96be\uff0c\u6211\u6bd4\u8d5b\u65f6\u4e5f\u662f\u8fd9\u4e48\u60f3\u7684\uff0c\u76f4\u5230\u4ed4\u7ec6\u770b\u4e86\u770b\u6570\u636e\u8303\u56f4\uff0c\u624d\u7ec8\u4e8e\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u6bd2\u7624\u6570\u636e\u7ed3\u6784\u9898\uff0c\u5173\u952e\u662f\u600e\u4e48\u907f\u5f00\u679a\u4e3e\u6570\u5bf9\u7684$O(n^2)$\u590d\u6742\u5ea6\u3002  \n$2$ . \u672c\u4eba\u6bd4\u8d5b\u65f6\u4eb2\u6d4b\uff0c\u7ebf\u6bb5\u6811\u67e5\u8be2\uff08\u592a\u6162\u4e86\uff09\u6216\u662f$RMQ$\u7b97\u6cd5\uff08\u6570\u7ec4\u5f00\u4e0d\u4e0b\uff09\u90fd\u5e94\u8be5\u53ea\u6709$15$\u5206\u5de6\u53f3\uff0c\u8fd8\u9700\u8981\u4f18\u5316\u7684\u601d\u60f3\uff0c\u4f8b\u5982\u8d2a\u5fc3\u6216\u5206\u6cbb\u601d\u60f3\uff0c\u6211\u4eec\u7684\u7b56\u7565\u662f\u5206\u6cbb\uff0c\u6216\u8005\u6211\u89c9\u5f97\u66f4\u50cf\u4f18\u96c5\u7684\u66b4\u529b\uff0c\u9700\u8981\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\uff08\u4f8b\u5982\u7ebf\u6bb5\u6811\uff0c\u4e3b\u5e2d\u6811\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u6811\u629b\u7b49)\u3002  \n$3$ . \u6570\u636e\u5f88\u6bd2\u7624\uff0c\u9700\u8981\u79bb\u6563\u5316\u3002\uff08 \u53cd\u6b63\u79bb\u6563\u540e$RMQ$\u6211\u662f\u6ca1\u5b9e\u73b0\u8fc7\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5 )  \n## \u89e3\u7b54\n$1$ . \u9996\u5148\uff0c\u6211\u4eec\u80fd\u82b1 $O(logn)$ \u7684\u65f6\u95f4\u5904\u7406\u6570\u636e\uff0c\u7b97\u51fa\u533a\u95f4 $[l,r]$ \u6700\u5de6\u7aef\u7684\u6700\u5927\u503c\uff0c\u53d6\u51fa\u5b83\u7684\u4f4d\u7f6e $index $\u3002\u663e\u7136\uff0c\u6839\u636e\u5206\u6cbb\u7684\u601d\u60f3\uff0c**\u6211\u4eec\u77e5\u9053** $[l,r]$ **\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5bf9\u7684\u6570\u91cf\u7b49\u4e8e** $[l,index-1]$ **\u548c** $[index+1,r] $**\u4e2d\u6570\u5bf9\u6570\u7684\u548c**\uff0c**\u56e0\u4e3a** $index$ **\u4f4d\u7f6e\u5bf9\u5e94\u6700\u5927\u503c\uff0c\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002**\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u9009\u62e9\u4e86\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8ba1\u7b97\uff0c$std$ \u4ee3\u7801\u4e2d$O(n)$\u641e\u51fa\u7684\uff0c\u6211\u4eec\u591a\u4e86$logn$\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u95ee\u9898\u4e0d\u5927\uff0c~~\u4e5f\u5c31\u7206\u70b8~~\u3002  \n$2$ . \u7136\u540e\u6211\u4eec\u600e\u4e48\u7b97\u51fa\u533a\u95f4\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5bf9\u6570\u5462\uff1f\u6211\u4eec\u89c2\u5bdf\uff1a\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ a_i \\times a_j=max(from\\ a_i\\ to\\ a_j)=x$  \n\u53d8\u4e2a\u578b\uff1a\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ a_i= \\frac{x}{a_j}$  \n\u6709\u4e86\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\uff0c\u5bf9\u4e8e\u533a\u95f4 $[l,r]$ \u6211\u4eec\u5728 $[l,index-1]$ \u4e2d\u679a\u4e3e $a_i$ , \u6211\u4eec\u53ef\u4ee5\u5728 $[index+1,r]$ \u4e2d\u627e\u5230\u5c0f\u4e8e\u7b49\u4e8e $ \\frac{a_{index}}{a_i}$\u7684\u6570\uff0c\u6709\u591a\u5c11\u8fd9\u6837\u7684\u6570\uff0c\u533a\u95f4$[index+1,r]$\u4e2d\u5c31\u6709\u591a\u5c11\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5bf9\u6570\uff1b\u7136\u540e\u6211\u4eec\u5bf9\u4e8e $[index+1,r]$ \u4e5f\u5982\u6cd5\u70ae\u5236\uff0c\u5c31\u8ba1\u7b97\u51fa\u89e3\u7b54 $1$\u4e2d\u7684\u6570\u5bf9\u6570\u4e86\u3002\u7136\u540e\uff0c\u6211\u4eec\u7f29\u5c0f\u533a\u95f4\uff08\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\uff09\uff0c\u4e00\u8fb9\u8ba1\u7b97\uff0c\u4e00\u8fb9\u50a8\u5b58\u3002\u6211\u4eec\u8981\u67e5\u8be2\u7684\u533a\u95f4\u4e0d\u4f1a\u5f88\u591a\uff0c\u548c\u7ebf\u6bb5\u6811\u7684\u4e00\u6837 $O(nlogn)$ , \u800c\u5728\u5176\u4e2d\u8981\u679a\u4e3e $logn$ \u6b21\u7684\u6570\u5b57\uff0c\u5e38\u6570\u53ef\u4ee5\u63a5\u53d7\u3002    \n$3$ . \u6211\u4eec\u9009\u5de6\u8fb9\u7684\u533a\u95f4\uff0c\u53f3\u8fb9\u533a\u95f4\u67e5\u8be2\u53ef\u4ee5\u67e5\u8be2\uff0c\u8fd9\u4e00\u90e8\u5206\u6211\u4eec\u53c8\u7528\u4e3b\u5e2d\u6811\uff08 \u6ca1\u6709\u5b66\u8fc7\u7684\u7528\u6811\u72b6\u6570\u7ec4\u53cd\u800c\u66f4\u597d\uff0c\u56e0\u4e3a\u5e38\u6570\u66f4\u5c0f\uff0c\u4ee3\u7801\u66f4\u7b80\u5355\u6613\u61c2 \uff09\u7ef4\u62a4\uff0c\u4f46\u662f\u57fa\u4e8e\u66b4\u529b\u51fa\u5947\u8ff9\u7684\u57fa\u672c\u539f\u7406\uff0c\u590d\u6742\u5ea6\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u6211\u4eec\u7a0d\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u663e\u7136\uff0c$[1,r]$ \u4e2d\u5c0f\u4e8e $x$ \u7684\u6570\uff0c\u51cf\u53bb $[1,l-1]$ \u4e2d\u5c0f\u4e8e $x$\u7684\u6570\uff0c\u5c31\u5f97\u5230\u4e86 $[l,r]$\u4e2d\u7684\u6570\u91cf\uff0c\u8fd8\u662f\u4e3b\u5e2d\u6811\u6765\u7ef4\u62a4\u3002  \n$4$ . \u603b\u4f53\u6765\u8bf4\uff0c\u6807\u7a0b\u7684\u590d\u6742\u5ea6\u662f $O(nlog^2n)$\uff0c\u800c\u6211\u7684\u590d\u6742\u5ea6\u4f30\u8ba1\uff08\u6bd4\u8f83\u7384\u5b66\uff09\u662f $O(nlog^3n)$\u5427\uff0c\u5404\u79cd\u9012\u5f52\u6811\u7684\u5e38\u6570\u7a0d\u5927\uff0c\u4f46\u4e0d\u5f71\u54cd$AC$\u6389\u8fd9\u9898\u3002  \n\u4e0a\u4ee3\u7801\uff0c\u771f\u7684\u957f\uff0c\u5f00\u59cb\u89e3\u91ca\uff08 \u6570\u636e\u7ed3\u6784\u4e0d\u4f1a\u591a\u89e3\u91ca \uff09\n```cpp\ninline int read()//\u5361\u5e38\u5fc5\u5907\u5feb\u8bfb\u3002\n{\n  int f=1,x=0;char ch=getchar();\n  while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n  while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n  return f*x;\n}\nLL ans;//\u5176\u4ed6\u53ef\u4ee5\u4e0d\u5f00long long\uff0c\u4f46\u662f\u7b54\u6848\u8981\u5f00\uff0c\u4e0d\u7136\u53ea\u670960\u5206\u3002\nint n,len,a[N],drt[N],from[N],root[N];//len->\u79bb\u6563\u5316\u6570\u7ec4\u7684\u957f\u5ea6\uff0cdrt->Discretization\u79bb\u6563\u5316\u6570\u7ec4\uff0cfrom->\u5bf9\u5e94\u539f\u6570\u7ec4\u7684\u4f4d\u7f6e\uff0croot->\u8bb0\u5f55\u4e3b\u5e2d\u6811\u7684\u6570\u636e\u3002\ninline int cal_pos(int x)\n{\n  return upper_bound(drt+1,drt+len+1,x)-drt-1;//\u8ba1\u7b97\u51fax\u5728\u79bb\u6563\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u540e\u6765\u7684\u8c03\u7528\u3002\n}\ninline int compare(int pos_1,int pos_2)\n{\n  if(a[pos_1]<a[pos_2])return pos_2;\n  return pos_1;//\u6bd4\u8f83\u4f4d\u7f6e1\u548c2\u5bf9\u5e94a\u6570\u7ec4\u4e2d\u503c\u7684\u5927\u5c0f\uff0c\u66f4\u65b0\u89e3\u7b541\u4e2d\u7684\u64cd\u4f5c\u3002\n}\ninline void inti()\n{\n  sort(drt+2,drt+n+2);//\u8bb0\u4f4f\u628adrt\u591a\u79fb\u52a8\u4e00\u4f4d\uff0c\u53ef\u4ee5\u7701\u7740\u51cf\u4e00\u3002\n  len=unique(drt+2,drt+n+2)-drt-1;\n  for(int i=1;i<=n;i++)from[i]=lower_bound(drt+1,drt+len+1,a[i])-drt;//\u79bb\u6563\u5316\uff0c\u8bb0\u4e0b\u539f\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5934\u76ae\u53d1\u9ebb\u3002\n}\nstruct segment_tree\n{\n  int mx[N*4];//\u533a\u95f4\u6700\u503c\u3002\n  inline void pushup(int p)\n  {\n    mx[p]=compare(mx[ls],mx[rs]);//\u53ea\u8981\u5de6\u53f3\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\n  }\n  inline void build(int p,int l,int r)\n  {\n    if(l==r){mx[p]=l;return ;}\n    int mid=(l+r)/2;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    pushup(p);\n   // cout<<mx[p]<<endl;\n  }\n  inline int query(int p,int l,int r,int s,int t)//s\uff0ct\u662f\u9700\u8981\u67e5\u8be2\u7684\u533a\u95f4\u3002\n  {\n    //cout<<p<<' '<<mx[p]<<' '<<s<<' '<<t<<endl;\n    if(s==l&&t==r)return mx[p];\n    int mid=(l+r)>>1;\n    if(t<=mid)return query(ls,l,mid,s,t);\n    else if(s>mid)return query(rs,mid+1,r,s,t);\n    else return compare(query(ls,l,mid,s,mid),query(rs,mid+1,r,mid+1,t));\n  }//\u67e5\u8be2\u548c\u5efa\u6811\u540c\u7406\u3002\n}sgm_t;\nstruct president_tree//\u4e3b\u5e2d\u6570\u3002\n{\n  int cnt,child[N*40][2];//\u8282\u70b9\u6570\uff0c\u5de6\u53f3\u513f\u5b50\u6570\u3002\n  LL sum[N*40];\n  inline void pushup(int p)\n  {\n    sum[p]=sum[child[p][0]]+sum[child[p][1]];\n  }\n  inline void _insert(int last,int &p,int l,int r,int x,int delta)//x->\u52a0\u4e0a\u7684\u4f4d\u7f6e\uff0cdelta\u5982\u5b57\u9762\u4e49\u3002\n  {\n      //cout<<p<<' '<<child[p][0]<<' '<<child[p][1]<<' '<<sum[p]<<endl;\n    p=++cnt;\n    child[p][0]=child[last][0],child[p][1]=child[last][1],sum[p]=sum[last];\n    if(l==r){sum[p]+=delta;return ;}\n    int mid=(l+r)/2;\n    if(x<=mid)_insert(child[last][0],child[p][0],l,mid,x,delta);\n    else _insert(child[last][1],child[p][1],mid+1,r,x,delta);//\u8fd9\u4e24\u53e5\u6211\u5148\u524d\u6253\u53cd\u4e86\uff0c\u6bd5\u7adf\u4e0d\u719f\u6089\u6570\u636e\u7ed3\u6784\u3002\n    pushup(p);\n  }\n  inline LL query(int p,int l,int r,int s,int t)\n  {\n    if(s==l&&t==r)return sum[p];\n    int mid=(l+r)/2;\n    if(t<=mid)return query(child[p][0],l,mid,s,t);\n    else if(s>mid)return query(child[p][1],mid+1,r,s,t);\n    else return query(child[p][0],l,mid,s,mid)+query(child[p][1],mid+1,r,mid+1,t);\n  }\n}prsd_t;\ninline void solve(int l,int r)//\u9012\u5f52\u8dd1\uff0c\u5b9e\u529b\u6162\u3002\n{\n  //cout<<ans<<' '<<l<<' '<<r<<endl;\n  if(l==r){if(a[l]==1)ans++;return ;}\n  int index=sgm_t.query(1,1,n,l,r);//\u67e5\u5230\u89e3\u7b54\u4e2d\u7684index\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u503c\u5728\u533a\u95f4\u4e2d\u7684\u4f4d\u7f6e\u3002\n  if(fabs(index-l)>fabs(r-index))//\u5982\u679c\u5de6\u8fb9\u7684\u6570\u591a\u4e8e\u53f3\u8fb9\uff0c\u8fd9\u6837\u679a\u4e3e\u91cf\u5c11\u4e00\u4e9b\u3002\n  {\n    if(index>l)solve(l,index-1);\n    for(int i=index;i<=r;i++)\n    {\n      int x,y;\n      x=prsd_t.query(root[index-1],1,len,1,cal_pos(a[index]/a[i]));//\u89e3\u7b542\u4e2d\u7684\u64cd\u4f5c\u3002\n      y=prsd_t.query(root[l-1],1,len,1,cal_pos(a[index]/a[i]));\n      ans+=(x-y);//\u89e3\u7b544\u7684\u64cd\u4f5c\u3002\n    }\n    solve(index,r);\n  }\n  else\n  {\n    if(index<r)solve(index+1,r);\n    for(int i=l;i<=index;i++)\n    {\n      int x,y;\n      x=prsd_t.query(root[r],1,len,1,cal_pos(a[index]/a[i]));\n      y=prsd_t.query(root[index],1,len,1,cal_pos(a[index]/a[i]));\n      ans+=(x-y);\n    }\n    solve(l,index);//\u540c\u7406\u5904\u7406\u53e6\u4e00\u8fb9\uff08\u6211\u5148\u60f3\u7740\u4e00\u8d77\u5904\u7406\uff0c\u7206\u70b8\uff09\u3002\n  }\n}\nint main()\n{\n  n=read();\n  for(int i=1;i<=n;i++)a[i]=drt[i+1]=read();//\u518d\u5f3a\u8c03\u4e00\u904d\uff0c\u591a\u79fb\u52a8\u4e00\u4f4d\u3002\n  sgm_t.build(1,1,n);\n  inti();\n  for(int i=1;i<=n;i++)\n    prsd_t._insert(root[i-1],root[i],1,len,from[i],1);//\u6784\u5efa\u4e3b\u5e2d\u6811\u3002\n  solve(1,n);\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n## \u603b\u7ed3\n$1$ . \u8fd9\u9053\u9898\u662f\u7701\u9009\u96be\u5ea6\u65e0\u7591\uff0c\u4e0d\u7ba1\u662f\u6570\u636e\u7ed3\u6784\u7684\u5e94\u7528\uff0c\u8fd8\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5f62\u6210\uff0c\u90fd\u5f88\u8003\u9a8c\u80fd\u529b\uff0c\u6240\u4ee5\u5199\u4e0d\u51fa\u6765\u6b63\u5e38\uff0c\u6211\u4eec\u8fd8\u662f\u80fd\u5199\u51fa\u51e0\u5341\u5206\u7684\u66b4\u529b\u7684\u3002  \n$2$ . \u5f88\u76ae\u7684\u662f\uff0c\u8fd9\u9898\u7684\u5c0f\u7ec6\u8282\u5f88\u6709\uff08zhi\uff09\u8da3\uff08ming\uff09\uff0c\u4e24\u68f5\u6811\uff0c\u4e00\u6b65\u9519\uff0c\u6574\u9898\u7206\u70b8\uff0c\u5f88\u96be\u8c03\u8bd5\uff0c\u5f88\u53ef\u80fd\u91cd\u65b0\u518d\u6765\uff0c\u6a21\u677f\u8981\u719f\uff08\u53ef\u662f\u6211\u5f88\u4e0d\u719f\uff09\u3002  \n\u5e0c\u671b\u6211\u7684\u89e3\u7b54\u5bf9\u5927\u5bb6\u6709\u4e00\u4e1d\u5e2e\u52a9\uff0c\u4e0d\u559c\u52ff\u55b7\uff08\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u9ed1\u9898\u6211\u5230\u5e95\u8be5\u4e0d\u8be5\u505a\u5462\uff1f\uff09",
        "postTime": 1531985162,
        "uid": 60089,
        "name": "Trinity",
        "ccfLevel": 0,
        "title": "P4755 Beautiful Pair \u9898\u89e3 by HydraNazis"
    },
    {
        "content": "## tip : \u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u6700\u8fd1\u6253\u4e86\u4e9b\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u770b\u5230\u8fd9\u7c7b\u9898\u4e0d\u514d\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5b8c\u6210\u3002\u60f3\u7ec3\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u540c\u5b66\u53ef\u4ee5\u5eb7\u5eb7~\n\n\u5982\u540c\u697c\u4e0b\u8bb2\u7684\uff0cBeautiful Pair \u7684\u5bf9\u6570\u663e\u7136\u662f\u5728\u4e00\u6bb5\u533a\u95f4\u6700\u5927\u503c\u7684\u4e24\u7aef\uff0c\u540c\u65f6\u5982\u679c\u533a\u95f4\u5185\u6709 $1$ , \u5219\u4e5f\u53ef\u7528\u6700\u5927\u503c $\\times 1 = $ \u6700\u5927\u503c\u5f97\u5230\u3002\u6240\u4ee5\u6211\u4eec\u603b\u5171\u9700\u8981\u4e09\u9897\u7ebf\u6bb5\u6811\uff0c\u5176\u4e00\u4fdd\u5b58\u533a\u95f4\u6700\u5927\u503c\uff0c\u5176\u4e8c\u4fdd\u5b58\u533a\u95f4 $1$ \u7684\u4e2a\u6570\uff0c\u5176\u4e09\u4e3a\u6bcf\u4e2a\u6570\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u5f53\u7136\u9700\u8981\u52a8\u6001\u5f00\u70b9\u4e86\uff09\u3002\n\n\u5bf9\u4e8e\u533a\u95f4 $(l, r) $ \uff1a\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\uff0c \u5219\u4fee\u6539\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5e76\u5224\u65ad\u662f\u5426\u672c\u8eab\u662f $1$ \u5373\u53ef\uff1b\u5426\u5219\uff0c\u7531\u7ebf\u6bb5\u6811 $1$ \u53d6\u5f97\u5176\u6700\u503c\u4e0b\u6807 $mid$ \uff0c\u52a0\u4e0a\u533a\u95f4\u5185 $1$ \u7684\u4e2a\u6570\uff0c\u5206\u522b\u9012\u5f52 $mid$ \u5de6\u90e8\u548c $mid$ \u53f3\u90e8\uff0c\u5e76\u679a\u4e3e\u957f\u5ea6\u5c0f\u7684\u90a3\u4e00\u533a\u95f4\uff0c\u5728\u53e6\u5916\u4e00\u533a\u95f4\u7684\u7ebf\u6bb5\u6811\u5185\u67e5\u627e\u5c0f\u4e8e\u7b49\u4e8e\u76ee\u6807 $k$ \u7684\u4e2a\u6570\uff0c\u6700\u540e\u628a\u5de6\u53f3\u53ca $mid$ \u6240\u4ee3\u8868\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n\n\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c $mid$ \u5728\u5f53\u524d\u533a\u95f4\u7684\u4e24\u7aef\uff0c\u9700\u8981\u7279\u5224\u5408\u5e76\u624d\u884c\u3002\n\n\u603b\u590d\u6742\u5ea6\u4e3a $O(n \\times log^2 n)$ \uff0c\u548c\u666e\u904d\u7684\u4e3b\u5e2d\u6811\u65e0\u5927\u5dee\u522b\u3002 \n\n\u5949\u4e0a\u4ee3\u7801 $-->$\n\n```\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cctype>\n#define ll long long\n#define inf 1023456789\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,w=0;char ch=getchar();\n\twhile (!isdigit(ch))w|=ch=='-',ch=getchar();\n\twhile (isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn w?-x:x;\n}\n\nstruct node{\n\tint val, pos;\n}a[1000005];\n\nint d[1000005], N = 0;\n\nstruct Segment_Tree{\n\tint pos;\n\tint l, r;\n}c[5000005];\n\nint n, b[100005], tot, rt[100005];\nll ans = 0;\n\ninline int ls(int p){\n\treturn p << 1;\n}\n\ninline int rs(int p){\n\treturn p << 1 | 1;\n}\n\ninline void update(int p){\n\tif(a[ls(p)].val > a[rs(p)].val )\n\ta[p].val = a[ls(p)].val , a[p].pos = a[ls(p)].pos ;\n\telse a[p].val = a[rs(p)].val , a[p].pos = a[rs(p)].pos ;\n}\n\ninline void build(int p, int l, int r){\n\tif(l == r){\n\t\ta[p].val = b[l];\n\t\ta[p].pos = l;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(ls(p), l, mid);\n\tbuild(rs(p), mid + 1, r);\n\tupdate(p); \n}\n\ninline int query(int p, int l, int r, int L, int R){\n\tif(L <= l && r <= R){\n\t\treturn a[p].pos ;\n\t}\n\tint mid = l + r >> 1;\n\tint u = 0, v = 0;\n\tif(L <= mid) u = query(ls(p), l, mid, L, R);\n\tif(mid < R) v = query(rs(p), mid + 1, r, L, R);\n\tif(b[u] > b[v]) return u;\n\treturn v;\n}\n\ninline void update2(int p){\n\td[p] = d[ls(p)] + d[rs(p)];\n}\n\ninline void build2(int p, int l, int r){\n\tif(l == r){\n\t\tif(b[l] == 1){\n\t\t\td[p]++;\n\t\t}\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tbuild2(ls(p), l, mid);\n\tbuild2(rs(p), mid + 1, r);\n\tupdate2(p);\n}\n\ninline int query2(int p, int l, int r, int L, int R){\n\tif(L <= l && r <= R){\n\t\treturn d[p] ;\n\t}\n\tint mid = l + r >> 1;\n\tint res = 0;\n\tif(L <= mid) res += query2(ls(p), l, mid, L, R);\n\tif(mid < R) res += query2(rs(p), mid + 1, r, L, R);\n\treturn res;\n}\n\ninline void update3(int p){\n\tc[p].pos = c[c[p].l ].pos + c[c[p].r ].pos ;\n}\n\ninline void modify3(int &p, int l, int r, int k){\n\tif(!p) p = ++tot;\n\tif(l == r){\n\t\tc[p].pos = 1;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tif(k <= mid) modify3(c[p].l , l, mid, k);\n\telse modify3(c[p].r , mid + 1, r, k);\n\tupdate3(p);\n}\n\ninline int query3(int p, int l, int r, int L, int R){\n\tif(!p) return 0;\n\tif(L <= l && r <= R){\n\t\treturn c[p].pos ;\n\t}\n\tint mid = l + r >> 1, res = 0;\n\tif(L <= mid) res += query3(c[p].l , l, mid, L, R);\n\tif(mid < R) res += query3(c[p].r , mid + 1, r, L, R);\n\treturn res;\n}\n\ninline int Merge(int u, int v){\n\tif(!u || !v) return u | v;\n\tc[u].pos += c[v].pos ;\n\tc[u].l = Merge(c[u].l , c[v].l);\n\tc[u].r = Merge(c[u].r , c[v].r);\n\treturn u;\n}\n\ninline void find(int l, int r){//\u9012\u5f52\u67e5\u627e\n\tif(l > r) return ;\n\tif(l == r){\n\t\tmodify3(rt[l], 1, N, b[l]);\n\t\tif(b[l] == 1) ans++;\n\t\treturn ;\n\t}\n\tint mid = query(1, 1, n, l, r);\n\tans += query2(1, 1, n, l, r);\n\tmodify3(rt[mid], 1, N, b[mid]);\n\tint L = mid - l, R = r - mid;\n\tif(L < R){\n\t\tfind(mid + 1, r);\n\t\tfind(l, mid - 1);\n\t\tfor(int i = l; i < mid; i++){\n\t\t\tans += (ll)query3(rt[mid + 1], 1, N, 1, b[mid] / b[i]);\n\t\t}\n\t}\n\telse {\n\t\tfind(mid + 1, r);\n\t\tfind(l, mid - 1);\n\t\tfor(int i = mid + 1; i <= r; i++){\n\t\t\tans += (ll)query3(rt[l], 1, N, 1, b[mid] / b[i]);\n\t\t}\n\t}\n\tif(mid + 1 > r) rt[l] = Merge(rt[l], rt[mid]);//\u7279\u5224\u5408\u5e76\n\telse if(mid - 1 < l) rt[l] = Merge(rt[mid], rt[mid + 1]);\n\telse rt[l] = Merge(Merge(rt[l], rt[mid]), rt[mid + 1]);\t\n}\n\nint main(){\n\tn = read();\n\tfor(int i = 1; i <= n; i++)\n\tb[i] = read(), N = max(b[i], N);//N\u4fdd\u5b58\u6700\u5927\u503c\n\tbuild(1, 1, n);//\u6700\u5927\u503c\u7ebf\u6bb5\u6811\n\tbuild2(1, 1, n);//\u4fdd\u5b581\u7684\u4e2a\u6570\u7684\u7ebf\u6bb5\u6811\n\tfind(1, n);\n\tprintf(\"%lld\\n\",ans);\n}\n\n```\n\n\u5b8c\u7ed3*\u2605,\u00b0*:.\u2606(\uffe3\u25bd\uffe3)/$:*.\u00b0\u2605* \u3002",
        "postTime": 1599983870,
        "uid": 209604,
        "name": "pikabi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "\u9996\u5148\u601d\u8def\u8fd8\u662f\u6807\u7b97\u7684\u60f3\u6cd5~~\uff0c\u4f46\u662f\u6211\u667a\u969c\u7684\u5199\u4e86\u5206\u6cbb\u3002~~\n\n\u8fd9\u91cc\u8bf4\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u53ef\u4ee5\u51cf\u5c11\u5bf9\u8fb9\u754c\u7684\u8ba8\u8bba\u3002\n\n\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u6ce8\u610f\u5230 $1$ \u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u626b\u63cf\u7684\u533a\u95f4\u548c\u67e5\u8be2\u7684\u533a\u95f4\u7684\u8ba8\u8bba\u9ebb\u70e6\u4e86\u5f88\u591a\u3002\n\n\n\u8003\u8651\u628a\u5e8f\u5217\u4e2d\u6240\u6709\u7684 $1$ \u53bb\u6389\uff0c\u8d21\u732e\u5355\u72ec\u7b97\u3002\n\n\u8003\u8651\u5982\u679c\u5e8f\u5217\u4e2d\u53ea\u6709\u4e00\u4e2a $1$ \uff0c\u4f4d\u7f6e\u8bb0\u4f5c $p$\uff0c\u90a3\u4e48\u4ed6\u548c\u6240\u6709\u4f4d\u7f6e\u90fd\u4f1a\u4ea7\u751f $1$ \u7684\u8d21\u732e\uff1a\n\n+ \u82e5\u6539\u4f4d\u7f6e\u4e3a\u4e0e $p$ \u6784\u6210\u7684\u533a\u95f4\u6700\u5927\u503c\uff0c\u663e\u7136 $1\\times x=x$\uff0c\u6240\u4ee5\u5408\u6cd5\u3002\n\n+ \u82e5\u8be5\u4f4d\u7f6e\u4e0d\u4e3a\u4e0e $p$ \u6784\u6210\u7684\u533a\u95f4\u6700\u5927\u503c\uff0c\u90a3\u4e48 $1\\times x$ \u663e\u7136\u8fd8\u8981\u5c0f\u4e8e\u6700\u5927\u503c\u3002\n\n\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a $1$ \u7684\u8d21\u732e\u5c31\u662f $n$ \u3002\n\n\u591a\u4e2a $1$ \u7684\u8bdd\u628a\u91cd\u590d\u8ba1\u6570\u7684\u533a\u95f4\u53bb\u6389\u5c31\u884c\u4e86\uff0c\u8bbe\u6709 $cnt$ \u4e2a $1$\uff0c\u90a3\u4e48\u8fd9\u90e8\u5206\u8d21\u732e\u4e3a $cnt\\times n-{n\\choose cnt}$ \u3002\n\n\u628a\u5269\u4e0b\u7684\u8fde\u8d77\u6765\u8fd8\u662f\u6309\u7167\u6807\u7a0b\u7684\u7b97\u6cd5\u79bb\u7ebf\u7b97\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**\u867d\u7136\u7b54\u6848\u4e0d\u4f1a\u8d85\u8fc7** ```int```\uff0c**\u4f46\u662f\u4f1a\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u8d85\u8fc7\uff01\uff01\uff01**\n\n```C++\n#include <cmath>\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#define N 100005\n#define M 2000005\n#define inf 2000000000\nusing namespace std;\ntypedef long long ll;\n\ninline ll rd() {\n  ll x = 0;\n  char c = getchar();\n  while (!isdigit(c)) c = getchar();\n  while (isdigit(c)) {\n    x = x * 10 + (c ^ 48); c = getchar();\n  }\n  return x;\n}\n\nll n, m, mx[20][N], a[N];\n\ninline ll mmax(ll x, ll y) {\n  return a[x] > a[y] ? x : y;\n}\n\ninline void build() {\n  for (int i = 1; i <= n; ++i) mx[0][i] = i;\n  for (int t = 1; (1 << t) <= n; ++t)\n    for (int i = 1; i <= n - (1 << t) + 1; ++i)\n      mx[t][i] = mmax(mx[t - 1][i], mx[t - 1][i + (1 << (t - 1))]);\n}\n\ninline ll query(ll l, ll r) {\n  ll t = log2(r - l + 1);\n  return mmax(mx[t][l], mx[t][r - (1 << t) + 1]);\n}\n\nll tot, tmp[M];\n\nstruct Q {ll op, p, x;} q[M];\n\ninline bool cmp(Q x, Q y) {return x.p < y.p;}\n\ninline void divide(ll l, ll r) {\n  if (r <= l) return;\n  ll pos = query(l, r);\n  ll mx =a[pos];\n  if (pos - l < r - pos) {\n    for (int i = l; i < pos; ++i) {\n      q[++tot] = (Q){-1, pos, mx / a[i]};\n      q[++tot] = (Q){1, r, mx / a[i]};\n    }\n  }\n  else {\n    for (int i = pos + 1; i <= r; ++i) {\n      if (l - 1) q[++tot] = (Q){-1, l - 1, mx / a[i]};\n      if (pos - 1) q[++tot] = (Q){1, pos, mx / a[i]};\n    }\n  }\n  divide(l, pos - 1); divide(pos + 1, r);\n}\n\nll c[M], ans;\n\ninline ll lowbit(ll x) {return x & -x;}\n\ninline void add(ll p, ll x) {\n  for (int i = p; i < M; i += lowbit(i)) c[i] += x;\n}\n\ninline ll query(ll p) {\n  ll res = 0;\n  for (int i = p; i; i -= lowbit(i)) res += c[i];\n  return res;\n}\n\nint main() {\n  n = rd();\n  for (int i = 1, x; i <= n; ++i) {\n    x = rd();\n    if (x == 1) ++ans;\n    if (x > 1) {\n      ++tmp[0];\n      tmp[tmp[0]] = a[tmp[0]] = x;\n    }\n  }\n  ans = ans * n - ans * (ans - 1) / 2;\n  n = tmp[0];\n  tmp[++tmp[0]] = 0;\n  tmp[++tmp[0]] = inf;\n  build(); divide(1, n);\n  sort(tmp + 1, tmp + 1 + tmp[0]);\n  tmp[0] = unique(tmp + 1, tmp + 1 + tmp[0]) - tmp - 1;\n  for (int i = 1; i <= n; ++i)\n    a[i] = lower_bound(tmp + 1, tmp + 1 + tmp[0], a[i]) - tmp;\n  for (int i = 1; i <= tot; ++i)\n    q[i].x = upper_bound(tmp + 1, tmp + 1 + tmp[0], q[i].x) - tmp - 1;\n  sort(q + 1, q + 1 + tot, cmp);\n  for (int i = 1, ptr = 1; i <= n; ++i) {\n    add(a[i], 1);\n    while (q[ptr].p == i && ptr <= tot) {\n      ans += q[ptr].op * query(q[ptr].x);\n      ++ptr;\n    }\n  }\n  printf(\"%lld\\n\", ans);\n  return 0;\n}\n\n```\n",
        "postTime": 1553851716,
        "uid": 56839,
        "name": "SGColin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\u8fd9\u9898\u662f\u4e2a\u5f88\u597d\u7684\u5206\u6cbb\u7ec3\u4e60\u9898\u3002\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4\u5c31\u77e5\u9053\u80af\u5b9a\u8981\u56fa\u5b9a\u5f0f\u5b50\u91cc\u7684\u4e00\u9879\uff0c\u7528$O(1)$\u6216$O(log n)$\u7684\u590d\u6742\u5ea6\u7edf\u8ba1\u6b64\u60c5\u51b5\u7684\u7b54\u6848\uff0c\u800c\u533a\u95f4\u53d8\u5316\u65f6\uff0c\u6700\u5927\u503c\u5f88\u5bb9\u6613\u53d8\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u6837\u56fa\u5b9a\u6700\u5927\u503c\uff1a\n\n\u9996\u5148\u8003\u8651\uff0c\u5982\u679c\u76f4\u63a5\u9009\u51fa\u533a\u95f4\u6700\u5927\u503c\uff0c\u6709\u591a\u5c11\u533a\u95f4\u7684\u6700\u5927\u503c\u662f\u5b83\u5462\uff0c\u5f53\u7136\u662f\u6a2a\u8de8\u5b83\u7684\u6240\u6709\u533a\u95f4\u4e86\uff0c\u4e0d\u6a2a\u8de8\u5b83\u7684\u533a\u95f4\u53c8\u81ea\u6210\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u60f3\u5230\u5206\u6cbb\u505a\u6cd5\uff1a\u627e\u5230\u533a\u95f4\u6700\u5927\u503c\u7684\u4f4d\u7f6e\uff0c\u4f4d\u7f6e\u5de6\u53f3\u5206\u522b\u9012\u5f52\u6c42\u89e3\uff0c\u7136\u540e\u7edf\u8ba1\u6a2a\u8de8\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n\u600e\u4e48\u7edf\u8ba1\u5462\uff0c\u5f53\u524d\u6700\u5927\u503c\u8bbe\u4e3aMaxv\uff0c\u679a\u4e3e\u4e00\u8fb9\u7684\u70b9i\uff0c\u53e6\u4e00\u8fb9\u9009\u62e9\u7684\u533a\u95f4\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9\u7684\u53d6\u503c\u5f53\u7136\u5c31\u662f0~$\\lfloor \\frac{Maxv}{a[i]} \\rfloor$\uff0c\u7528\u4e3b\u5e2d\u6811\u7edf\u8ba1\u5c31\u53ef\u4ee5\u4e86.\n\n\u4f46\u662f\u56e0\u4e3a\u6700\u5927\u503c\u70b9\u4e0d\u50cf\u4e8c\u5206\u70b9\u90a3\u6837\u7a33\u5b9a\uff0c\u8f7b\u6613\u5c31\u4f1a\u88ab\u5361\u6389\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u5c06\u8ba1\u5c31\u8ba1\uff0c\u5229\u7528\u5b83\u7684\u4e0d\u7a33\u5b9a\u6027\uff0c\u89c4\u5b9a\u53ea\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\u5c0f\u7684\u4e00\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u6570\u636e\u60f3\u5361\u6211\u4eec\uff0c\u6211\u4eec\u53cd\u800c\u8dd1\u5f97\u66f4\u5feb\u3002\n\n\u4e25\u683c\u53ef\u4ee5\u8fd9\u6837\u8bc1\u660e\u590d\u6742\u5ea6\uff0c\u5f53\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u590d\u6742\u5ea6\u505a\u8d21\u732e\uff0c\u5b83\u6240\u5728\u533a\u95f4\u4e00\u5b9a\u6bd4\u4e0a\u4e00\u6b21\u81f3\u5c11\u77ed\u4e86\u4e00\u534a\uff0c\u52a0\u4e0a\u4e3b\u5e2d\u6811\uff08\u627e\u6700\u5927\u503c\u4f4d\u7f6e\u7528St\u8868$O(1)$\uff09\uff0c\u590d\u6742\u5ea6\u4e3a$O(nlog^2n)$\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\n#define N 100050\nconst int Len=1e9;\nstruct Node{\n\tNode* l;\n\tNode* r;\n\tint val;\n\tNode(){l=r=NULL;val=0;}\n};\nNode* NewNode(){return new Node();}\nint n;\nint ai[N],St_v[N][20],St_p[N][20],Log[N];\nNode* Rt[N];\n\nvoid update(Node* bef,Node* o,int l,int r,int k)\n{\n\tif(bef==NULL) bef=Rt[0];\n//\tprintf(\"%d %d %d %d %d\\n\",bef==NULL,o==NULL,l,r,k);\n\to->val=bef->val+1;\n\tif(l==r) return;\n\tint mid=((l+r)>>1);\n\tif(k<=mid){\n\t\tif(o->l==NULL) o->l=NewNode();\n\t\to->r=bef->r;\n\t\tupdate(bef->l,o->l,l,mid,k);\n\t}\n\telse{\n\t\tif(o->r==NULL) o->r=NewNode();\n\t\to->l=bef->l;\n\t\tupdate(bef->r,o->r,mid+1,r,k);\n\t}\n}\n\nint query(Node* bef,Node* o,int l,int r,int le,int ri)\n{\n\tif(bef==NULL) bef=Rt[0];\n\tif(le<=l && r<=ri)\n\t\treturn o->val-bef->val;\n\tint mid=((l+r)>>1),ret=0;\n\tif(le<=mid && o->l!=NULL)\n\t\tret+=query(bef->l,o->l,l,mid,le,ri);\n\tif(ri>mid && o->r!=NULL)\n\t\tret+=query(bef->r,o->r,mid+1,r,le,ri);\n\treturn ret;\n}\n\ninline int find(int l,int r){\n\tint a=Log[r-l+1];\n\tif(St_v[l][a]>St_v[r-(1<<a)+1][a])\n\t\treturn St_p[l][a];\n\treturn St_p[r-(1<<a)+1][a];\n}\n\nlong long Solve(int l,int r)\n{\n\tif(l>r) return 0;\n\tif(l==r) return ai[l]<=1;\n\tint Max_p=find(l,r),Max_v=ai[Max_p];\n\tlong long ret=0;\n\tret+=Solve(l,Max_p-1);\n\tret+=Solve(Max_p+1,r);\n\tif(Max_p-l<r-Max_p){\n\t\tfor(int i=l;i<=Max_p;i++){\n\t\t\tif(ai[i]==0) ret+=r-Max_p+1;\n\t\t\telse ret+=query(Rt[Max_p-1],Rt[r],0,Len,0,Max_v/ai[i]);\n\t\t}\n\t}\n\telse{\n\t\tfor(int i=Max_p;i<=r;i++){\n\t\t\tif(ai[i]==0) ret+=Max_p-l+1;\n\t\t\telse ret+=query(Rt[l-1],Rt[Max_p],0,Len,0,Max_v/ai[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvoid Test_St(){\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=i;j<=n;j++)\n\t\t\tprintf(\"%d \",find(i,j));\n\t\tprintf(\"\\n\");\n\t}\n}\n\nvoid Test_Tree(){\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=i;j<=n;j++)\n\t\t\tcout<<query(Rt[i-1],Rt[j],0,Len,2,4)<<\" \";\n\t\tcout<<endl;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<=n;i++)\n\t\tRt[i]=NewNode();\n\tint np=0;\n\tfor(int i=1;i<=n;i++){\n\t\tLog[i]=np;\n\t\tif(i==(1<<(np+1)))\n\t\t\tnp++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&ai[i]);\n\t\tSt_v[i][0]=ai[i];\n\t\tSt_p[i][0]=i;\n\t\tupdate(Rt[i-1],Rt[i],0,Len,ai[i]);\n\t}\n\tfor(int a=1;a<=18;a++)\n\t\tfor(int i=1;i+(1<<a)-1<=n;i++)\n\t\t{\n\t\t\tif(St_v[i][a-1]<St_v[i+(1<<(a-1))][a-1]){\n\t\t\t\tSt_v[i][a]=St_v[i+(1<<(a-1))][a-1];\n\t\t\t\tSt_p[i][a]=St_p[i+(1<<(a-1))][a-1];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSt_v[i][a]=St_v[i][a-1];\n\t\t\t\tSt_p[i][a]=St_p[i][a-1];\n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\",Solve(1,n));\n\treturn 0;\n}\n```",
        "postTime": 1541251980,
        "uid": 41271,
        "name": "\u59a9\u5a9a\u7684ak\u841d\u8389",
        "ccfLevel": 9,
        "title": "2018.10.30T3 Beautiful Pair(\u5206\u6cbb)"
    },
    {
        "content": "\u9996\u5148\u5bf9\u6bcf\u4e2a\u70b9\u6c42\u51fa\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u4f4d\u7f6e\u3001\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u4f4d\u7f6e\u3002\u5206\u522b\u8bb0\u4f5cL\\[p\\], R\\[p\\]\u3002\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u7528\u5355\u8c03\u6808\u6c42\u51fa\uff0c\u6b63\u53cd\u5404\u4e00\u904d\u5373\u53ef\n\n\u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6ep\uff0c\u5982\u679c\u9009\u53d6\u7684\u5de6\u7aef\u70b9\u5728(L\\[p\\], p]\u4e2d\uff0c\u53f3\u7aef\u70b9\u5728[p, R\\[p\\])\u4e2d\uff0c\u90a3\u4e48\u4f4d\u7f6ep\u5c31\u662f\u6700\u5927\u503c\u4e86\n\n\u5047\u5982\u6211\u4eec\u679a\u4e3e\u5de6\u7aef\u70b9l\uff0c\u90a3\u4e48[p, R\\[p\\])\u4e2d\u7684\u4e00\u4e2a\u53f3\u7aef\u70b9r\u5e94\u8be5\u6ee1\u8db3\uff1aa\\[l\\] \\* a\\[r\\] <= a\\[p\\]\u3002\u4e0d\u59a8\u6362\u4e00\u79cd\u5199\u6cd5\uff1aa\\[r\\] <= a\\[p\\] / a\\[l\\]\u3002\u5bf9\u4e8e\u4e00\u4e2a\u679a\u4e3e\u5230\u7684\u5de6\u7aef\u70b9\uff0c\u4e0d\u7b49\u5f0f\u53f3\u8fb9\u7684\u4e1c\u897f\u662f\u5168\u90e8\u5df2\u77e5\u7684\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u6c42\u533a\u95f4[p, R\\[p\\])\u4e2d\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u7b49\u4e8ea\\[p\\] / a\\[l\\]\u7684\u6570\uff0c\u8fd9\u662f\u4e3b\u5e2d\u6811\u7684\u7ecf\u5178\u5e94\u7528\n\n\u5982\u679c\u6211\u4eec\u679a\u4e3e\u7684\u662f\u53f3\u7aef\u70b9\uff0c\u90a3\u505a\u6cd5\u548c\u4e0a\u9762\u662f\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837\u7684\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6ep\uff0c\u6211\u4eec\u662f\u8be5\u679a\u4e3e\u5de6\u7aef\u70b9\u8fd8\u662f\u53f3\u7aef\u70b9\uff1f\u6839\u636e\u542f\u53d1\u5f0f\u7684\u601d\u60f3\uff0c\u5f53\u7136\u662f\u54ea\u4e2a\u533a\u95f4\u77ed\u679a\u4e3e\u54ea\u4e2a\u5566\uff0c\u53cd\u6b63\u7b97\u51fa\u6765\u7b54\u6848\u90fd\u662f\u4e00\u6837\u7684\n\n\u6839\u636e\u542f\u53d1\u5f0f\u601d\u60f3\u5206\u6790\u4e00\u6ce2\u590d\u6742\u5ea6\uff0c\u4e0d\u96be\u53d1\u73b0\u679a\u4e3e\u7aef\u70b9\u5747\u644a\u4e00\u4e2alog\uff0c\u518d\u5957\u4e0a\u4e3b\u5e2d\u6811\u7684\u4e00\u4e2alog\uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u662f\u4e24\u4e2alog\n\n\u867d\u7136\u8fd9\u9898\u4e0d\u4f1a\u51fa\u73b00\uff0c\u4f46\u67090\u662f\u4e00\u4ef6\u975e\u5e38\u597d\u73a9\u7684\u4e8b\uff0c\u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\u3002\u96640\u4f1aRE\uff0c\u4e8e\u662f\u6211\u4eec\u4ece\u521d\u59cb\u5e8f\u5217\u4e2d\u628a0\u62b9\u9664\uff0c\u5e76\u8bb0\u4e0b\u539f\u6570\u5217\u4e2d0\u7684\u6570\u91cf\u3002\u56e0\u4e3a0\u4f5c\u4e3a\u7aef\u70b9\u7684\u4efb\u4f55\u533a\u95f4\u90fd\u5408\u6cd5\uff0c\u56e0\u6b64\u53ef\u4ee5\u8d21\u732en \\* cnt0\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u4e24\u4e2a\u7aef\u70b9\u90fd\u662f0\u7684\u72b6\u51b5\u88ab\u6211\u4eec\u518d\u6bcf\u4e2a0\u4f4d\u7f6e\u65f6\u90fd\u8003\u8651\u4e86\u4e00\u904d\uff0c\u6240\u4ee5\u6700\u540e\u8fd8\u8981\u51cf\u53bbC(cnt0, 2)\n\n```cpp\n#include<bits/stdc++.h>\n#define FR first\n#define SE second\nusing namespace std;\n\nconst int S=(1<<20)+5;\nchar buf[S],*H,*T;\ninline char Get()\n{\n    if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n    if(H==T) return -1;return *H++;\n}\ninline int read()\n{\n    int x=0;char c=Get();\n    while(!isdigit(c)) c=Get();\n    while(isdigit(c)) x=x*10+c-'0',c=Get();\n    return x;\n}\n\ntypedef pair<int,int> pii;\nconst int N=100010;\nint a[N],cnt0=0,tot=0,n;\nint ch[N*20][2],sum[N*20],sz=0,rt[N];\nint L[N],R[N],Hash[N],hs=0;\nstack<pii> st;\n\nvoid prework()\n{\n    for(int i=1;i<=tot;i++)\n    {\n        while(!st.empty()&&st.top().FR<a[i]) st.pop();\n        L[i]=st.empty()?1:st.top().SE+1;\n        st.push(pii(a[i],i));\n    }\n    while(!st.empty()) st.pop();\n    for(int i=tot;i>=1;i--)\n    {\n        while(!st.empty()&&st.top().FR<=a[i]) st.pop();\n        R[i]=st.empty()?tot:st.top().SE-1;\n        st.push(pii(a[i],i));\n    }\n}\n\nvoid insert(int &o,int p,int l,int r,int k)\n{\n    sum[o=++sz]=sum[p]+1;\n    if(l==r) return;\n    ch[o][0]=ch[p][0];\n    ch[o][1]=ch[p][1];\n    int mid=(l+r)/2;\n    if(k<=mid) insert(ch[o][0],ch[p][0],l,mid,k);\n    else insert(ch[o][1],ch[p][1],mid+1,r,k);\n}\n\nint query(int L,int R,int l,int r,int x)\n{\n    if(l==r) return sum[R]-sum[L];\n    int mid=(l+r)/2;\n    if(x<=mid) return query(ch[L][0],ch[R][0],l,mid,x);\n    else return sum[ch[R][0]]-sum[ch[L][0]]+query(ch[L][1],ch[R][1],mid+1,r,x);\n}\n\nvoid xi_jin_ping_is_good()\n{\n    long long ans=0;\n    for(int i=1;i<=tot;i++) Hash[i]=a[i];\n    sort(Hash+1,Hash+1+tot);\n    hs=unique(Hash+1,Hash+1+tot)-(Hash+1);\n    for(int i=1;i<=tot;i++)\n        a[i]=lower_bound(Hash+1,Hash+1+hs,a[i])-Hash;\n    for(int i=1;i<=tot;i++) insert(rt[i],rt[i-1],1,hs,a[i]);\n    for(int i=1;i<=tot;i++)\n    {\n        if(i-L[i]<=R[i]-i)for(int j=L[i];j<=i;j++)\n        {\n            int d=Hash[a[i]]/Hash[a[j]];\n            int x=lower_bound(Hash+1,Hash+1+hs,d)-Hash;\n            if(Hash[x]>d) x--;\n            if(x) ans+=query(rt[i-1],rt[R[i]],1,hs,x);\n        }\n        else for(int j=i;j<=R[i];j++)\n        {\n            int d=Hash[a[i]]/Hash[a[j]];\n            int x=lower_bound(Hash+1,Hash+1+hs,d)-Hash;\n            if(Hash[x]>d) x--;\n            if(x) ans+=query(rt[L[i]-1],rt[i],1,hs,x);\n        }\n    }\n    ans+=1ll*cnt0*n-1ll*cnt0*(cnt0-1)/2;\n    printf(\"%lld\\n\",ans%998244353);\n}\n\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        int x=read();\n        if(!x) cnt0++;\n        else a[++tot]=x;\n    }\n    prework();\n    xi_jin_ping_is_good();\n    return 0;\n}\n```\n\n",
        "postTime": 1540818500,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\uff0c\u770b\u5230\u9898\u7684\u7b2c\u4e00\u60f3\u6cd5\u5c31\u662fQwQ\uff0c\u4e00\u770b\u5c31\u662fdp\u6216\u8005\u4e00\u4e9b\u6076\u5fc3\u7684\u6570\u636e\u7ed3\u6784\u9898\uff0c\u4f46\u662f\u60f3\u4e86\u4e00\u4f1adp\uff0c\u53d1\u73b0\u4e0d\u592a\u53ef\u884c\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u901a\u8fc7**\u5206\u6cbb** \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n\n\u6211\u4eec\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u533a\u95f4\u7684$mx$\uff08\u8868\u793a\u6700\u5927\u7684$a_i$\uff09\u6765\u89e3\u51b3\uff0c\u56e0\u4e3a\u8981\u6c42\u4e58\u79ef\u4e0d\u80fd\u5927\u4e8e\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5728 \u8ba1\u7b97\u533a\u95f4\u7684\u65f6\u5019\uff0c$mx$\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u4e0d\u80fd\u548c\u522b\u7684\u6570\u8fdb\u884c\u7ec4\u5408\u7684\u3002\u6240\u4ee5\u8bf4\uff0c\u6309\u7167mx\u6765\u5206\u7ec4\uff0c\u90a3\u4e48\u5f53\u524d\u533a\u95f4\u7684\u7b54\u6848\u5c31\u662f$[l,mx-1]$\u7684\u7b54\u6848\u52a0\u4e0a$[mx+1,r]$\uff0c\u7136\u540e\u52a0\u4e0a\u4e24\u4e2a\u533a\u95f4\u4ea7\u751f\u7684\u8d21\u732e\u3002\nQwQ\u90a3\u4e48\u600e\u4e48\u6c42\u5de6\u53f3\u533a\u95f4\u4ea7\u751f\u7684\u8d21\u732e\u5462\n<br>\n\u6211\u4eec\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684\u5de6\u7aef\u70b9$l$\uff0c\u6211\u4eec\u9700\u8981\u5728$[mx+1,r]$\u533a\u95f4\u627e\u51fa\uff0c\u5c0f\u4e8e$\\lfloor \\frac{mx}{a_l} \\rfloor$\u7684\u6570\u7684\u4e2a\u6570\n\u7136\u540e\u6211\u4eec\u679a\u4e3e\u6240\u6709\u7684\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u6570\u4e00\u6570\uff0c\u6700\u540e\u8003\u8651$mx$\u8fd9\u4e2a\u7aef\u70b9\u53ef\u4ee5\u4e0d\u53ef\u4ee5\u8ddf\u5de6\u8fb9\u7684\u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c\u7ec4\u5408\n\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u6570\u7684\u4e2a\u6570\u5462\n\nQwQ\n\u5440\uff0cBIT\uff01\u6811\u72b6\u6570\u7ec4 \u55ef\uff01\n\u6211\u4eec\u8003\u8651\u5c06\u6bcf\u4e2a\u6570\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981$query(find(\\lfloor \\frac{mx}{a_l} \\rfloor))$\u5c31\u53ef\u4ee5\uff0c\u5176\u4e2d$find$\u7684\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff0c\u627e\u5230\u8fd9\u4e2a\u503c\u79bb\u6563\u5316\u540e\u7684\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u6700\u5927\u7684\u503c\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5lower_bound\n\n\u8bb0\u5f97\u79bb\u6563\u5316\uff01\n\n\n\n\u8fd8\u6709\u4e00\u4e9b\u4eba\u4f1a\u95ee\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4fdd\u8bc1\u5417\uff1fQwQ\u5177\u4f53\u7684\u8bc1\u660e\u6211\u4e5f\u4e0d\u662f\u5f88\u4f1a\u5440\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u611f\u6027l\u7406\u89e3\n\n\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u6311\u9009\u7684$mx$\uff0c\u90fd\u9009\u62e9\u6bd4\u8f83\u4e2d\u95f4\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u7406\u89e3\u662f$O(nlogn)$\u7684\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\n\ndfs\u7248\u7684\u5206\u6cbb\n\n\u975e\u5e38\u7406\u89e3\uff0c\u4e2a\u4eba\u6562\u63a5\n\n\n```c++\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<unordered_map>\nusing namespace std;\n\ninline int read()\n{\n  int x=0,f=1;char ch=getchar();\n  while (!isdigit(ch)) {if (ch=='-') f=-1;ch=getchar();}\n  while (isdigit(ch)) {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n  return x*f;\n}\n\nconst int maxn =  1e5+1e2;\n\nint c[maxn];\nint a[maxn];\nint b[maxn];\nint n,m;\nint dp[maxn][23];\nint p[maxn];\nint tmp = 0;\nunordered_map<int,int> mp;\n\nstruct Node{\n    int id,val;\n};\n\nNode g[maxn];\n\nint lowbit(int x)\n{\n    return (-x) & x;\n}\n\nvoid update(int x,int p)\n{\n    for (int i=x;i<=n;i+=lowbit(i)) c[i]+=p;\n}\n\nlong long query(int x)\n{\n    long long ans=0;\n    for (int i=x;i;i-=lowbit(i)) ans+=(long long)c[i];\n    return ans;\n}\n\nint find(int x)\n{\n    if (x>p[n]) return tmp;\n    return g[upper_bound(p+1,p+1+n,x)-p-1].id;\n}\n\nbool cmp(Node a,Node b)\n{\n    return a.val<b.val;\n}\n\nint countmax(int x,int y)\n{\n    int k = log2(y-x+1);\n    return max(dp[x][k],dp[y-(1 <<k)+1][k]);\n}\n\nvoid init()\n{\n    for (int j=1;j<=21;j++)\n      for (int i=1;i<=n;i++)\n      {\n      \t if (i+(1 << j)-1<=n)\n      \t {\n      \t \tdp[i][j]=max(dp[i][j-1],dp[i+(1 << (j-1))][j-1]);\n           }\n      }\t\n}\n\nlong long solve(int l,int r)\n{\n    if (l>r) return 0;\n    if (l==r)  {\n      if (a[l]==1)return 1;\n      else return 0;\n    }\n    long long cnt=0;\n    int mid = (l+r) >> 1;\n    int mx = countmax(l,r),pos=0;\n    for (int i=l;i<=r;i++)\n    {\n        if (a[i]==mx) {\n           if (!pos || abs(mid-i)<abs(mid-pos)) pos=i;\n        }\n    }\n    cnt+=solve(l,pos-1);\n    cnt+=solve(pos+1,r);\n    for (int i=pos+1;i<=r;i++) update(b[i],1);\n    for (int i=l;i<=pos;i++) cnt=cnt+(query(find(mx/a[i])));\n    for (int i=pos+1;i<=r;i++) update(b[i],-1);\n    //cout<<l<<\" \"<<r<<\" \"<<cnt<<endl;\n    for (int i=l;i<=pos-1;i++) update(b[i],1);\n     cnt=cnt+(query(find(mx/a[pos])));\n    for (int i=l;i<=pos-1;i++) update(b[i],-1);\t\n    //out<<l<<\" \"<<r<<\" \"<<cnt<<endl;\n    if (a[pos]==1) cnt++;\n    return cnt;\n}\n\nint main()\n{\n  n=read();\n  for (int i=1;i<=n;i++) a[i]=read(),g[i].id=i,g[i].val=a[i],dp[i][0]=a[i];\n  init();\n  sort(g+1,g+1+n,cmp);\n  for (int i=1;i<=n;i++)\n  {\n  \t if (g[i].val!=g[i-1].val) tmp++;\n  \t b[g[i].id]=tmp;\n  \t mp[a[g[i].id]]=tmp;\n  }\n  //for (int i=1;i<=n;i++) cout<<b[i]<<\" \"; \n  memset(g,0,sizeof(g));\n  for (int i=1;i<=n;i++) p[i]=a[i],g[i].val=a[i],g[i].id=b[i];\n  sort(g+1,g+1+n,cmp);\n  sort(p+1,p+1+n);\n  //cout<<endl;\n  long long ans=solve(1,n);\n  cout<<ans;\n  return 0;\n}\n\n``` ",
        "postTime": 1532963519,
        "uid": 43205,
        "name": "y_immortal",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u8ba1\u6570\u9898,\u8003\u8651\u5206\u6cbb.\n\n\u5bf9\u4e8e\u5206\u6cbb\u5230\u7684\u4e00\u4e2a\u533a\u95f4$(l,r)$,\u7528st\u8868\u53d6\u51fa\u5176\u4e2d\u6700\u5927\u503c\u6240\u5728\u7684\u4f4d\u7f6emid,\u7136\u540e\u6309\u7167$(l,mid-1)$\u548c$(mid+1,r)$\u5206\u4e0b\u53bb.\n\n\u56e0\u4e3a\u53ef\u4ee5\u77e5\u9053\u7684\u662f,\u5f53\u524d\u533a\u95f4$(l,r)$\u53d7\u5230mid\u4f4d\u7f6e\u4e0a\u7684\u6570\u7684\u5f71\u54cd,\u6240\u4ee5\u8003\u8651\u7edf\u8ba1\u8de8\u8fc7mid\u4f4d\u7f6e\u7684\u6570\u5bf9.\n\n\u8fd9\u91cc\u4f7f\u7528\u4e3b\u5e2d\u6811,\u7edf\u8ba1\u4e00\u4e2a\u533a\u95f4\u4e0a\u5c0f\u4e8ea[mid]/a[i]\u7684\u6570\u7684\u4e2a\u6570,\u5373\u4e3a\u7b54\u6848.\n\n\u56e0\u4e3a\u503c\u57df\u592a\u5927\u9700\u8981\u79bb\u6563\u5316.\n\n## \u4ee3\u7801\n\n```cpp\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cstring\"\n#include \"cstdlib\"\n#include \"cmath\"\n#include \"cctype\"\n#include \"algorithm\"\n#include \"set\"\n#include \"queue\"\n#include \"map\"\n#include \"vector\"\n#include \"stack\"\n#define lxl long long\n#define R register\n#define INF 0x3f3f3f3f\n#define debug(x) printf(\"debug:%lld\\n\",x)\nusing namespace std;\nconst lxl maxn=200010;\nlxl n,size,ans;\nlxl a[maxn],h[maxn],st[maxn][20],lg[maxn];\nstruct _SegmentTreeNode\n{\n    _SegmentTreeNode *lson,*rson;\n    lxl l,r,sum;\n}*root[maxn];\nstruct _SegmentTree\n{\n    void BulitTree(_SegmentTreeNode *t,lxl l,lxl r)\n    {\n        lxl mid((l+r)>>1);\n        t->l=l,t->r=r,t->sum=0;\n        if(l==r)\n        {\n            t->lson=t->rson=NULL;\n            return;\n        }\n        t->lson=new _SegmentTreeNode,t->rson=new _SegmentTreeNode;\n        BulitTree(t->lson,l,mid),BulitTree(t->rson,mid+1,r);\n    }\n    _SegmentTreeNode *insert(_SegmentTreeNode *t,lxl l,lxl r,lxl x,lxl val)\n    {\n        lxl mid((l+r)>>1);\n        _SegmentTreeNode *p=new _SegmentTreeNode;\n        p->lson=t->lson,p->rson=t->rson,p->l=t->l,p->r=t->r,p->sum=t->sum+val;\n        if(l==r)return p;\n        if(x<=mid)p->lson=insert(t->lson,l,mid,x,val);\n        else p->rson=insert(t->rson,mid+1,r,x,val);\n    //  p->sum=p->lson->sum+p->rson->sum;\n        return p;\n    }\n    lxl query(_SegmentTreeNode *pre,_SegmentTreeNode *t,lxl l,lxl r,lxl x,lxl y)\n    {\n        if(x>r||y<l)return 0;\n        lxl mid((l+r)>>1),sum(0);\n        if(x<=l&&y>=r)return t->sum-pre->sum;\n        if(x<=mid)sum+=query(pre->lson,t->lson,l,mid,x,y);\n        if(y>mid)sum+=query(pre->rson,t->rson,mid+1,r,x,y);\n        return sum;\n    }\n}SegmentTree;\ninline lxl read()\n{\n    char c=getchar();\n    lxl f(1),x(0);\n    for(;!isdigit(c);c=getchar())(c=='-')&&(f=-1);\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    return f*x;\n}\ninline void ST()\n{\n    lg[0]=-1;\n    for(R int i(1);i<=n;++i)lg[i]=lg[i>>1]+1;\n    for(R int i(1);i<=n;++i)st[i][0]=i;\n    for(R int j(1);j<=17;++j)\n        for(R int i(1);i+(1<<j)-1<=n;++i)\n            st[i][j]=a[st[i][j-1]]>=a[st[i+(1<<(j-1))][j-1]]?st[i][j-1]:st[i+(1<<(j-1))][j-1];\n}\ninline lxl STQuery(lxl l,lxl r)\n{\n    lxl t=lg[r-l+1];\n    return a[st[l][t]]>=a[st[r-(1<<t)+1][t]]?st[l][t]:st[r-(1<<t)+1][t];\n}\nvoid go(lxl l,lxl r)\n{\n    if(l>r)return;\n    if(l==r)\n    {\n        ans+=(h[a[l]]==1||h[a[l]]==0);\n        return;\n    }\n    lxl mid=STQuery(l,r);\n//  debug(l),debug(r),debug(mid);putchar('\\n');\n    if(r-mid+1<=mid-l+1)\n        for(R int i(mid);i<=r;++i)\n        {\n            lxl pla=upper_bound(h+1,h+1+size,h[a[mid]]/h[a[i]])-h-1;\n            ans+=SegmentTree.query(root[l-1],root[mid],1,size,1,pla);\n        }\n    else\n        for(R int i(l);i<=mid;++i)\n        {\n            lxl pla=upper_bound(h+1,h+1+size,h[a[mid]]/h[a[i]])-h-1;\n            ans+=SegmentTree.query(root[mid-1],root[r],1,size,1,pla);\n        }\n    go(l,mid-1),go(mid+1,r);\n}\nint main(void)\n{\n//  freopen(\"data.txt\",\"r\",stdin);\n    n=read();\n    for(R int i(1);i<=n;++i)a[i]=h[i]=read();\n    sort(h+1,h+1+n);\n    size=unique(h+1,h+1+n)-h-1;\n    for(R int i(1);i<=n;++i)a[i]=lower_bound(h+1,h+1+size,a[i])-h;\n    ST();\n    root[0]=new _SegmentTreeNode;\n    SegmentTree.BulitTree(root[0],1,size);\n    for(R int i(1);i<=n;++i)root[i]=SegmentTree.insert(root[i-1],1,size,a[i],1);\n    go(1,n);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1581598150,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P4755 \u3010Beautiful Pair\u3011"
    }
]