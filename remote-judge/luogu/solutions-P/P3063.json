[
    {
        "content": "# Milk Routing S\n\n#### \u53cc\u500d\u7ecf\u9a8c\u65f6\u95f4\n\n[\u6d1b\u8c37P5837  [USACO19DEC]Milk Pumping G](https://www.luogu.com.cn/problem/P5837)\n\n[\u6d1b\u8c37P3063  [USACO12DEC]Milk Routing S](https://www.luogu.com.cn/problem/P3063)\n\n#### \u9898\u76ee\u6a21\u578b\n\n\u7ed9\u5b9a$N$\u4e2a\u70b9\u548c$M$\u6761\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u7ed9\u5b9a\u8fde\u63a5\u7684\u4e24\u4e2a\u7aef\u70b9\u4ee5\u53ca\u8fd9\u6761\u8fb9\u7684\u82b1\u8d39\u548c\u201c\u6d41\u91cf\u201d\n\n1. \u8bbe\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u82b1\u8d39\u603b\u548c\u4e3a$L$\n\n2. \u8bbe\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u4e2d\u201c\u6d41\u91cf\u201d\u503c\u6700\u5c0f\u7684\u4e3a$C$\n\n\u8981\u6c42\u627e\u51fa\u4e00\u6761$1$\u5230$N$\u7684\u8def\u5f84\u6ee1\u8db3\uff1a**$L$\u5c3d\u53ef\u80fd\u5c0f\u7684\u540c\u65f6$C$\u5c3d\u53ef\u80fd\u5927\uff08\u6ce8\u610f\u662f\u4e00\u6761\u8def\u5f84\u4e0a\u7684L\u548cC\uff09**\n\n------------\n#### \u89e3\u9898\u601d\u8def\n\n\u5982\u679c\u662f\u5355\u72ec\u6c42$L$\u6216\u8005$C$\u4e2d\u7684\u4e00\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u4fbf\u80fd\u89e3\u51b3\n\n\u4f46\u662f\u5982\u679c\u8981\u6c42\u540c\u65f6\u7ef4\u62a4$L$\u548c$C$\u4e24\u4e2a\u503c\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u503c\u8fd8\u662f**\u77db\u76fe**\u7684\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\n\n\uff08\u8fd9\u91cc\u7684\u77db\u76fe\u6307\uff1a$L$\u8981\u5c3d\u91cf\u5c0f\uff0c\u800c\u540c\u4e00\u6761\u9053\u8def\u7684$C$\u53c8\u8981\u5c3d\u91cf\u5927\uff09\n\n- First\n\n\u9996\u5148\u6211\u4eec\u5148\u6765\u8003\u8651\u7528\u4e00\u4e2a\u6700\u77ed\u8def\u540c\u65f6\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u503c\uff0c\u4f46\u7ecf\u8fc7\u4e00\u756a\u601d\u7d22\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u65e0\u6cd5\u505a\u5230\n\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u503c\u77db\u76fe\u554a\uff01\u76f8\u77db\u76fe\u7684\u4e24\u4e2a\u503c\u600e\u4e48\u80fd\u5728\u540c\u4e00\u4e2a\u6700\u77ed\u8def\u4e2d\u89e3\u51b3\u5462\uff1f\n\n- Second\n\n\u5426\u5b9a\u4e86\u540c\u65f6\u7ef4\u62a4\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u53ea\u80fd\u8003\u8651\u5206\u5f00\u7ef4\u62a4\uff0c\u5206\u5f00\u7ef4\u62a4\uff1f\u591a\u4e2a\u6700\u77ed\u8def\uff1f\n\n\u80af\u5b9a\u4e5f\u4e0d\u884c\uff0c\u4e3a\u4ec0\u4e48\uff1f\u7ef4\u62a4\u51fa\u6765\u7684$L$\u3001$C$**\u5206\u522b\u5bf9\u5e94\u7684\u6700\u77ed\u8def\u5f84\u4e0d\u4e00\u5b9a\u662f\u540c\u4e00\u6761**\u554a\uff01\u6700\u77ed\u8def\u5f84\u90fd\u4e0d\u662f\u540c\u4e00\u6761\u90a3$L$\u3001$C$\u600e\u4e48\u4f1a\u76f8\u5bf9\u5e94\u5462\uff1f\n\n- Third\n\n\u540c\u65f6\u7ef4\u62a4\u548c\u5206\u5f00\u7ef4\u62a4\u90fd\u4e0d\u884c\uff0c\u90a3\u600e\u4e48\u505a\uff1f\n\n**\u679a\u4e3e**\n\n\u4ec0\u4e48\u610f\u601d\uff1f\n\n\u6211\u4eec\u8981\u7ef4\u62a4\u5bf9\u5e94\u7684\u4e24\u4e2a\u503c\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5**\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u518d\u5728\u679a\u4e3e\u7684\u8fd9\u4e2a\u503c\u7684\u57fa\u7840\u4e0a\u53bb\u5bfb\u627e\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u503c**\u5440\uff01\n\n\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u5047\u8bbe\u6211\u4eec\u679a\u4e3e$Ci$\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\u53bb\u6c42\u89e3\u5bf9\u5e94\u7684$Li$\uff0c\u5728\u8dd1\u6700\u77ed\u8def\u65f6\u5224\u65ad\u5f53\u524d\u70b9$v$\u7684$Cv$\u503c\u662f\u5426\u5c0f\u4e8e$Ci$\uff0c\u5982\u679c\u5c0f\u4e8e\u90a3\u4e48\u5c31\u4e0d\u7ba1\u8fd9\u4e2a\u70b9\uff08\u56e0\u4e3a\u6211\u4eec\u679a\u4e3e\u7684$Ci$\u5df2\u7ecf\u662f\u5047\u5b9a\u7684\u6700\u5c0f\u6d41\u91cf\u503c\uff0c\u90a3\u4e48\u6240\u6709\u5c0f\u4e8e$Ci$\u80af\u5b9a\u6ca1\u6709\u7528\uff09\n\n**\u4e3a\u4ec0\u4e48$Ci$\u662f\u5047\u5b9a\u7684\u6700\u5c0f\u6d41\u91cf\u503c\uff1f\u4e0d\u662f\u6c42\u6700\u5927\u7684$C$\u5417\uff1f**\n\n\u6211\u4eec\u4e0d\u65ad\u679a\u4e3e$Ci$\uff0c\u627e\u5230\u6240\u6709\u5bf9\u5e94\u7684$Li$\uff0c\u7136\u540e\u7528\u4e00\u4e2a$ans$\u6765\u8bb0\u5f55\u6700\u7ec8\u7684\u7b54\u6848\uff0c**\u6700\u7ec8\u627e\u5230\u7684\u4e00\u5b9a\u662f\u6700\u5927\u7684$C$\u548c\u6700\u5c0f\u7684$L$**\n\n\n------------\n#### \u4ee3\u7801Code\n\n- [\u6d1b\u8c37P3063  [USACO12DEC]Milk Routing S](https://www.luogu.com.cn/problem/P3063) \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,x,u,v,w,c,tot,ans=20050206;\nint dis[510005],vis[510005],head[510005],flag[510005];\npriority_queue<pair<int,int> > shan;\n\nstruct node {\n\tint to,net,val,liu;\n} e[510005];\n\ninline void add(int u,int v,int w,int l) {\n\te[++tot].to=v;\n\te[tot].val=w;\n\te[tot].liu=l;\n\te[tot].net=head[u];\n\thead[u]=tot;\n}\n\ninline void dijkstra(int li) {\n\tfor(register int i=1;i<=n;i++) {\n\t\tvis[i]=0;\n\t\tdis[i]=20050206;\n\t}\n\tdis[1]=0;\n\tshan.push(make_pair(0,1));\n\twhile(!shan.empty()) {\n\t\tint xx=shan.top().second;\n\t\tshan.pop();\n\t\tif(vis[xx]) continue;\n\t\tvis[xx]=1;\n\t\tfor(register int i=head[xx];i;i=e[i].net) {\n\t\t\tint v=e[i].to;\n\t\t\tif(e[i].liu<li) continue;\n\t\t\tif(dis[v]>dis[xx]+e[i].val) {\n\t\t\t\tdis[v]=dis[xx]+e[i].val;\n\t\t\t\tshan.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&x);\n\tfor(register int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&c);\n\t\tflag[i]=c;\n\t\tadd(u,v,w,c);\n\t\tadd(v,u,w,c);\n\t}\n\tfor(register int i=1;i<=m;i++) {\n\t\tdijkstra(flag[i]);\n\t\tif(dis[n]!=20050206) ans=min(ans,dis[n]+x/flag[i]);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n- [\u6d1b\u8c37P5837  [USACO19DEC]Milk Pumping G](https://www.luogu.com.cn/problem/P5837) \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,a,b,c,f,tot,ans;\nint dis[100010],vis[100010],head[100010];\npriority_queue<pair<int,int> > shan;\n\nstruct node {\n\tint to,net,liu,val;\n} e[100010];\n\ninline void add(int u,int v,int w,int l) {\n\te[++tot].to=v;\n\te[tot].net=head[u];\n\te[tot].liu=l;\n\te[tot].val=w;\n\thead[u]=tot;\n}\n\ninline void dijkstra(int l) {\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[1]=0;\n\tshan.push(make_pair(0,1));\n\twhile(!shan.empty()) {\n\t\tint x=shan.top().second;\n\t\tshan.pop();\n\t\tif(vis[x]==1) continue;\n\t\tvis[x]=1;\n\t\tfor(register int i=head[x];i;i=e[i].net) {\n\t\t\tint v=e[i].to;\n\t\t\tif(e[i].liu<l) continue;\n\t\t\tif(dis[v]>dis[x]+e[i].val) {\n\t\t\t\tdis[v]=dis[x]+e[i].val;\n\t\t\t\tshan.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&f);\n\t\tadd(a,b,c,f);\n\t\tadd(b,a,c,f);\n\t}\n\tfor(register int li=1;li<=1000;li++) {\n\t\tdijkstra(li);\n\t\tif(dis[n]!=0x3f) ans=max(ans,li*1000000/dis[n]);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n------------\n\n\u81ea\u8ba4\u4e3a\u8bb2\u5f97\u8fd8\u662f\u5f88\u8be6\u7ec6\u7684\uff0c\u5982\u679c\u8fd8\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\u6b22\u8fce\u7559\u8a00qwq\n\n\u6700\u540e\uff0c\u611f\u8c22\u4e00\u4e0b**RHL\u5927\u4f6c**\u5bf9\u6211\u7684\u6307\u5bfc\n\n------------\n",
        "postTime": 1593416474,
        "uid": 145205,
        "name": "Eleven\u8c26",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]Milk Routing S\u3011"
    },
    {
        "content": "\u603b\u662f\u8981\u6709\u4eba\u5199\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u3002\n\n\u9996\u5148\uff0c\u58f0\u660e\u4e00\u70b9\uff0c\u8fd9\u4e2a\u9898\u548c\u6700\u5927\u6d41\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\u3002\u3002\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u7f62\u4e86\u3002\u8ba8\u8bba\u91cc\u7684\u90a3\u4e9b\u5f88\u8ba9\u4eba\u8bef\u4f1a\u7684\uff0c\u8fd9\u9898\u60f3\u6700\u5927\u6d41\u7684\u601d\u8def\u6ce8\u5b9a\u6bd2\u6b7b\u81ea\u5df1\u3002\n\n\u6b63\u89e3\u6700\u77ed\u8def\u4e86\u3002\u3002\u548c-->\u901a\u5f80\u5965\u683c\u745e\u739b\u7684\u9053\u8def\u5f88\u50cf\u3002\n\u53ea\u4e0d\u8fc7\u90a3\u4e2a\u9898\u8fd8\u8981\u4e8c\u5206\uff0c\u6211\u4eec\u8fd9\u9898\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u53ef\u884c\u7684\u6d41\u91cf\u8dd1spfa\u5373\u53ef\u3002\n\n\u6ce8\u91ca\u7565\u5c11\uff0c\u56e0\u4e3a\u786e\u5b9e\u6ca1\u5565\u597d\u8bf4\u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#define ll long long\n#define rp (i-1)*n+j \n#define cp (i-1)*n+j+n*n \n#define inf 50000000\n#define re register\nusing namespace std;\nstruct po{\n\tint nxt,to,w,dis;\n};\npo edge[20001];\nint head[20001],dis[20001],n,m,c[20001],b[20001],minn=909909090,k,num,s,t;\ninline void add_edge(int from,int to,int w,int dis)\n{\n\tedge[++num].nxt=head[from];\n\tedge[num].to=to;\n\tedge[num].w=w;\n\tedge[num].dis=dis;\n\thead[from]=num;\n}\ninline void add(int from,int to,int w,int dis)\n{\n\tadd_edge(from,to,w,dis);\n\tadd_edge(to,from,w,dis);\n}\ninline void spfa(int x)\n{\n\tqueue<int> q;\n\tmemset(dis,50,sizeof(dis));\n\tmemset(b,0,sizeof(b));\n\tq.push(s);\n\tdis[s]=0;\n\tb[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tb[u]=0;\n\t\tfor(re int i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(dis[v]>dis[u]+edge[i].dis&&edge[i].w>=x){\n\t\t\t\tdis[v]=dis[u]+edge[i].dis;\n\t\t\t\tif(!b[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tb[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m>>k;\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tint x,y,d,l;\n\t\tcin>>x>>y>>d>>l;\n\t\tadd(x,y,l,d);\n\t\tc[i]=l;\n\t}\n\tsort(c+1,c+m+1);\n\ts=1,t=n;\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tspfa(c[i]);\n\t\tminn=min(minn,dis[t]+k/c[i]);\n\t}\n\tcout<<minn;\n}\n```",
        "postTime": 1520774490,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2aDijkstra+Heap\n\n\u5f88\u591a\u9898\u89e3\u90fd\u4e0d\u662f\u6b63\u89e3\n\n\u5e94\u8be5\u679a\u4e3e\u6700\u5c0f\u5bb9\u91cf\u7136\u540e\u6c42\u6700\u77ed\u8def\u66f4\u65b0\u7b54\u6848\n\n\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e0d\u8d70<\u6700\u5c0f\u5bb9\u91cf\u7684\u8fb9\n\nO(mnlog n)\n```cpp\n#include<queue>\n#include<cstdio>\n#include<utility>\n#include<algorithm>\nusing namespace std;\ntypedef pair<int,int>pii;\ntypedef priority_queue<pii,vector<pii>,greater<pii> >heap;\nconst int N=510,M=510,INF=2147483647;\nint n,m,cap[M],x,ans=INF;\nint head[N],cnt;\nstruct edge\n{\n\tint to,next,delay,capacity;\n\tinline edge(const int &a=0,const int &b=0,const int &c=0,const int &d=0):\n\t\tto(a),next(b),delay(c),capacity(d){}\n}e[M<<1];\ninline const void connect(int u,int v,int d,int c)\n{\n\te[++cnt]=edge(v,head[u],d,c);head[u]=cnt;\n\te[++cnt]=edge(u,head[v],d,c);head[v]=cnt;\n}\nbool vis[N];\nint dis[N];\ninline const int dijkstra(int s,int t,int limit)\n{\n\tfor (int i=1;i<=n;i++)dis[i]=INF,vis[i]=0;\n\theap q;q.push(make_pair(dis[s]=0,s));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().second;q.pop();\n\t\tif (vis[u])continue;vis[u]=1;\n\t\tfor (int v,i=head[u];i;i=e[i].next)\n\t\t\tif (e[i].capacity>=limit&&dis[v=e[i].to]>dis[u]+e[i].delay)\n\t\t\t\tq.push(make_pair(dis[v]=dis[u]+e[i].delay,v));\n\t}\n\treturn dis[t];\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&x);\n\tfor (int a,b,c,i=1;i<=m;i++)scanf(\"%d%d%d%d\",&a,&b,&c,&cap[i]),connect(a,b,c,cap[i]);\n\tsort(cap+1,cap+m+1);int tot=unique(cap+1,cap+m+1)-cap-1;\n\t/*int l=1,r=tot;  \u672c\u6765\u60f3\u6765\u4e2a\u4e8c\u5206 \u53d1\u73b0\u4e0d\u80fd\u4e8c\u5206\n\twhile (l<r)\n\t{\n\t\tint mid=l+r>>1,d=dijkstra(1,n,cap[mid]);\n\t\tif (d^INF)l=mid+1,ans=d+x/cap[mid];\n\t\telse r=mid;\n\t}*/\n\tfor (int d,i=1;i<=tot;i++)\n\t\td=dijkstra(1,n,cap[i]),\n\t\tans=min(ans,d^INF?d+x/cap[i]:ans);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1562920476,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problem/P3063)\n\u4e0d\u5199\u7bc7\u9898\u89e3\u5bf9\u4e0d\u8d77\u6211\u90a3\u901d\u53bb\u7684\u65f6\u5149\u554a\uff01\n\n\u9996\u5148\u6211\u8003\u8651\u7684\u662f\u8d2a\u5fc3\uff0c\u628a\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u5b9a\u4e49\u4e3a\u901a\u8fc7\u8fd9\u6761\u8def\u7684\u65f6\u95f4\uff08\u65f6\u95f4\u7b97\u6cd5\u9898\u76ee\u4e2d\u5df2\u7ed9\u51fa\uff09\uff0c\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u7ed3\u679c\u6837\u4f8b\u5c31\u628a\u6211\u54c8\u514b\u4e86\u3002$233$\uff0c\u5fcd\u4f4f\u773c\u6cea\u7ee7\u7eed\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5bb9\u91cf\uff0c\u5728\u8be5\u5bb9\u91cf\u7684\u5236\u7ea6\u4e0b\u627e\u6700\u5c0f\u7684\u5ef6\u8fdf\u503c\uff0c\u5f88\u663e\u7136\u8dd1$m$ \u904d$SPFA$\u5373\u53ef\u3002\n\n### \u7ec6\u8282$1$:\n\n\u8fd9\u9898\u8981\u5b58\u53cc\u5411\u8fb9\uff0c\u56e0\u4e3a\u7ba1\u9053\u4e4b\u95f4\u662f\u6ca1\u6709\u65b9\u5411\u7684\uff0c\u5982\u679c\u60a8\u53ea\u5b58\u4e86\u5355\u5411\u8fb9\uff0c\u90a3\u4e48\u606d\u559c\u60a8\u80fd\u62ff\u523020\u5206\u7684\u597d\u6210\u7ee9!\u5b58\u56fe\u5b9e\u73b0\u65b9\u5f0f\u5168\u9760\u4e2a\u4eba\u559c\u597d\uff0c\u6211\u6bd4\u8f83\u559c\u6b22\u4e0b\u8fb9\u8fd9\u6837\uff0c\u5f53\u7136\uff0c\u5728$add$\u51fd\u6570\u91cc\u5199\u7684\u957f\u4e00\u70b9\u4e5f\u5b8c\u5168\u53ef\u4ee5\u3002\n\n```cpp\nadd(x, y, l, d), add(y, x, l, d);\n```\n\u8dd1$m$\u904d$SPFA$\u63d0\u4e00\u53e5\uff0c\u8fd9\u4e2a$C$\u6570\u7ec4\u5b8c\u5168\u53ef\u4ee5\u7701\u6389\u7684\uff0c\u5b83\u5b58\u50a8\u7684\u4fe1\u606f\u5c31\u662f\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\n```cpp\n\tfor(int i = 1; i <= m; i++) {\n\t\tspfa(C[i]);\n\t\tminn = min(minn, (dis[n] + x / C[i]));\n\t}\n```\n\u9898\u89e3\u4e2d\u6709\u7684\u6587\u7ae0\u5bf9C\u6570\u7ec4\u6392\u4e86\u5e8f\uff0c\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u5fc5\u8981\u56e0\u4e3a\u6211\u4eec\u679a\u4e3e\u4e86\u6240\u6709\u7684\u5bb9\u91cf\u503c\uff0c\u6392\u5e8f\u4e5f\u662f\u627e$m$\u904d\uff0c\u4e0d\u6392\u5e8f\u4e5f\u662f\u627e$m$\u904d\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u4e0d\u7528\u6392\u5e8f\u3002\n### \u7ec6\u8282$2$:\n\u8981\u6ce8\u610f\u6e05\u7a7a$dis$\u6570\u7ec4\u548c$vis$ \u6570\u7ec4\n\n```cpp\n    memset(dis, 50, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n```\nThe Last:\n```cpp#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nconst int N = 5005;\nint cnt, head[N << 1], n, m, x, minn = 0x3f3f3f3f, C[N], t, s, dis[N];\nbool vis[N];\nstruct node{\n\tint nxt, to, d, w;\n}e[N << 1];\nint read() {\n\tint s = 0, w = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();}\n\twhile(isdigit(ch)) {s = s * 10 + ch - '0'; ch = getchar();}\n\treturn s * w;\n}\nvoid add(int x, int y, int w, int d) {\n\te[++cnt].nxt = head[x];\n\te[cnt].to = y;\n\te[cnt].w = w;\n\te[cnt].d = d;\n\thead[x] = cnt;\n}\nvoid spfa (int ww) {\n    queue<int> q;\n    memset(dis, 50, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    vis[1] = 1;\n    q.push(1);\n    dis[1] = 0;\n    while (!q.empty()) {\n        int he = q.front();\n        q.pop();\n        vis[he] = 0;\n        for (int i = head[he]; i ;i = e[i].nxt) {\n            if (dis[e[i].to] > dis[he] + e[i].d && e[i].w >= ww) {\n                dis[e[i].to] = dis[he] + e[i].d;\n                if (!vis[e[i].to]) \n                    vis[e[i].to] = 1, q.push(e[i].to);\n            }\n        }\n    }\n}\nint main() {\n\tn = read(), m = read(), x = read();\n\tfor(int i = 1; i <= m; i++) {\n\t\tint x, y, d, l;\n\t\tx = read(), y = read(), d = read(), l = read();\n\t\tadd(x, y, l, d), add(y, x, l, d);\n\t\tC[i] = l;\n\t}\n\tfor(int i = 1; i <= m; i++) {\n\t\tspfa(C[i]);\n\t\tminn = min(minn, (dis[n] + x / C[i]));\n\t}\n\tprintf(\"%d\\n\", minn);\n\treturn 0;\n}\n```\n\u8c22\u8c22\u6536\u770b\uff0c\u795d\u8eab\u4f53\u5065\u5eb7\uff01",
        "postTime": 1571276484,
        "uid": 147646,
        "name": "lzpclxf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u66b4\u529b\u54d2~\n\n------------\n\n\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u51fa\u73b0\u8fc7\u7684\u5bb9\u91cf\uff0c\u7136\u540e\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u6c42\u5ef6\u8fdf\uff0c\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u5982\u679c\u9047\u5230\u7684\u67d0\u4e00\u4e2a\u70b9\uff0c\u6bd4\u6211\u4eec\u5f53\u524d\u679a\u4e3e\u7684\u90a3\u4e2a\u70b9\u5c0f\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u4e0d\u8d70\u8fd9\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u679a\u4e3e\u5b8c\u540e\uff0c\u5c31\u80fd\u5f97\u5230\u6700\u5927\u503c\u4e86\u3002\n\n\u4ee3\u7801~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint w , v;\n};\nint n , m , need , ans = 0x3fffffff;\nint h[510] , vis[510] , dis[510];\nvector<pair<int , node> > e[510];\nvoid work(int minn){\n\tpriority_queue<pair<int , int> > q;\n\tdis[1] = 0;\n\tq.push(make_pair(0 , 1));\n\twhile(!q.empty()){\n\t\tint x = q.top().second;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x] = 1;\n\t\tfor(int i = 0; i < e[x].size(); i++){\n\t\t\tint nx = e[x][i].first , nw = e[x][i].second.w , nv = e[x][i].second.v;\n\t\t\tif(nv < minn) continue;\t//\u4e0d\u6ee1\u8db3\u7684\u8bdd\u5c31\u4e0b\u4e00\u4e2a \n\t\t\tif(dis[nx] > dis[x] + nw){\n\t\t\t\tdis[nx] = dis[x] + nw;\n\t\t\t\tq.push(make_pair(-dis[nx] , nx));\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin >> n >> m >> need;\n\tfor(int i = 1; i <= m; i++){\n\t\tint a , b , c , d;\n\t\tcin >> a >> b >> c >> d;\n\t\th[i] = d;\t//\u8bb0\u5f55\u4e0b\u51fa\u73b0\u8fc7\u7684\u6d41\u91cf \n\t\te[a].push_back(make_pair(b , (node){c , d}));\n\t\te[b].push_back(make_pair(a , (node){c , d}));\n\t}\n\tfor(int i = 1; i <= m; i++){\n\t\tfor(int j = 1; j <= n; j++) vis[j] = 0 , dis[j] = 0x3fffffff;\t//\u521d\u59cb\u5316\u4e00\u4e0b \n\t\twork(h[i]);\t//\u4e00\u4e2a\u4e2a\u679a\u4e3e \n\t\tans = min(ans , dis[n] + need / h[i]);\t//\u8bb0\u5f97\u52a0\u4e0a\u6d41\u91cf \n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n\n\u4e09\u500d\u7ecf\u9a8c\uff1a\n\n[P5837](https://www.luogu.com.cn/problem/P5837)\n\n[P1462](https://www.luogu.com.cn/problem/P1462) \u8fd9\u9053\u9898\u8981\u52a0\u4e2a\u4e8c\u5206\uff0c\u5176\u4ed6\u7684\u90fd\u5dee\u4e0d\u591a\u5566\n",
        "postTime": 1593417327,
        "uid": 117662,
        "name": "\u90a3\u4e00\u6761\u53d8\u963b\u5668",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]Milk Routing S\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u7684\u53d8\u5f62\u9898\u3002\n\n\u4e4d\u4e00\u770b\u8fd9\u9053\u9898\uff0c\u4f3c\u4e4e\u6709\u4e24\u79cd\u6743\u503c\uff0c\u4eff\u4f5b\u4e0d\u53ef\u505a\u7684\u6837\u5b50\u3002\n\n\u4f46\u662f\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u5176\u4e2d\u7684\u5bb9\u91cf\u53ea\u9700\u8981\u77e5\u9053\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u5bb9\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002\n\n\u679a\u4e3e$m$\u79cd\u5bb9\u91cf\uff0c\u5728\u968f\u4e4b\u8dd1$m$\u904d$SPFA$\uff0c\u8bbe\u5b9a\u5176\u679a\u4e3e\u7684\u5bb9\u91cf\u4e3a\u4e0b\u9650\uff0c\u8fd9$m$\u904d\u7684\u6700\u77ed\u8def\u5f84\u7684\u6bcf\u6761\u8def\u5f84\u7684\u6700\u5c0f\u5bb9\u91cf\u4e00\u5b9a\u8981$>=$\u8fd9\u4e2a\u4e0b\u9650\uff0c\u518d\u53d6\u6bcf\u4e00\u6b21\u7684$L+\\frac{X}{C}$\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n**\u6ce8\u610f\uff0c\u56e0\u4e3a\u662f\u591a\u6b21\u8dd1SPFA\uff0c\u6240\u4ee5\u6bcf\u6b21\u90fd\u4e00\u5b9a\u8981\u8bb0\u5f97\u521d\u59cb\u5316**\n\n\u6ca1\u4e86\u3002\n\n$AC$ $Code$\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int INF = 1e9;\n\nstruct edge {\n\tint to, cost, c;\n};\nstd::vector<edge> G[10010];\n\nint n, m, a[10010], d[10010], x, ans = INF;\nqueue<int> q;\nbool exist[10010];\n\nint spfa(int Min) {\n\tfill(d+1, d+1+n, INF);\n\tmemset(exist, false, sizeof(exist));//\u521d\u59cb\u5316\u83ab\u5fd8\u6389\uff01\n\td[1] = 0;\n\tq.push(1);\n\texist[1] = true;\n\twhile(!q.empty()) {\n\t\tint v = q.front();\n\t\tq.pop();\n\t\texist[v] = false;\n\t\tfor (int i=0; i<G[v].size(); i++) {\n\t\t\tedge e = G[v][i];\n\t\t\tif (d[e.to] > d[v] + e.cost && e.c >= Min) {//\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u6709e.c>=Min,\u56e0\u4e3a\u8981\u6ee1\u8db3\u5927\u4e8e\u4e0b\u9650\u7684\u8981\u6c42\n\t\t\t\td[e.to] = d[v] + e.cost;\n\t\t\t\tif (!exist[e.to]) {\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t\texist[e.to] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn d[n] + x / Min;//\u8fd4\u56de\u503c\u8981\u662f\u90a3\u4e2a\u5f0f\u5b50\u7684\u503c\uff0c\u4e0d\u80fd\u662f\u6700\u77ed\u8def\u957f\u5ea6\n}\n\nint main() {\n\tcin >> n >> m >> x;\n\tfor (int i=1; i<=m; i++) {\n\t\tint u, v, c;\n\t\tcin >> u >> v >> c >> a[i];\n\t\tG[u].push_back((edge){v, c, a[i]});\n\t\tG[v].push_back((edge){u, c, a[i]});\n\t}//\u8bfb\u5165+\u5efa\u56fe\n\tfor (int i=1; i<=m; i++) \n\t\tans = min(ans, spfa(a[i]));//\u8dd1m\u6b21SPFA\uff0c\u5e76\u66f4\u65b0\u7b54\u6848\n\tcout << ans << endl;//\u8f93\u51fa\u7b54\u6848\n\treturn 0;//\u5b8c\u7ed3\u6492\u82b1\uff01\n}\n```",
        "postTime": 1567090394,
        "uid": 88213,
        "name": "zhangyuhan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "\u989d....\u8fd9\u4e2a\u9898\u662fAC\u4e86\uff0c\u4f46\u662f\u6211\u4e0d\u786e\u5b9a\u601d\u8def\u662f\u4e0d\u662f\u4e00\u5b9a\u6b63\u786e\uff0c\u4e5f\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u518d\u51faHACK\u6570\u636e\n\u6211\u7684\u601d\u8def\u662f\u91c7\u7528\u5806\u4f18\u5316\u7684dij\u7136\u540e\u8282\u70b9\u591a\u8bb0\u5f55\u4e00\u4e2a\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u5bb9\u91cf\uff0c\u53d6\u6d88\u6389vis\u6570\u7ec4\u7684\u6807\u8bb0\uff0c\u76f4\u63a5\u8dd1\u5c31\u5b8c\u4e8b\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u76f8\u5f53\u4e8e\u6240\u6709\u60c5\u51b5\u5168\u90e8\u90fd\u8dd1\u4e86\u4e00\u904d\uff0c\u4e0d\u4f1a\u6f0f\u89e3\uff0c\u65f6\u95f4\u5927\u69825ms\u3002\u3002\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n#define ll long long\n#define mem(a, b) memset(a,b,sizeof(a))\n#define INF 0x3f3f3f3f\n#define DBG printf(\"this is a input\\n\")\n#define fi first\n#define se second\n#define mk(a, b) make_pair(a,b)\n#define p_queue priority_queue\n\nll gcd(ll a, ll b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nll lcm(ll a, ll b) {\n    return a / gcd(a, b) * b;\n}\nstruct e\n{\n    int t, next ,w , c;\n}edge[20005];\nint n , m, x;\nint head[1005], cnt = 0;\nvoid add(int f, int t, int w, int c)\n{\n    edge[cnt].t = t;\n    edge[cnt].w = w;\n    edge[cnt].c = c;\n    edge[cnt].next = head[f];\n    head[f] = cnt ++;\n}\nstruct node\n{\n    int v;\n    int pre;\n    ll value;\n    node(int a, int c, ll b):v(a),pre(c),value(b){};\n    bool operator < (const node& no) const {\n        return value > no.value;\n    }\n};\nint dis[1005], minn[1005];\nvoid dij()\n{\n    mem(dis,INF);\n    mem(minn,INF);\n    p_queue <node> q;\n    dis[1] = 0;\n    q.push(node(1,INF,0));\n    while(!q.empty())\n    {\n        node no = q.top();\n        q.pop();\n        int u = no.v;\n        for(int i = head[u] ; i != -1 ; i = edge[i].next)\n        {\n            int v = edge[i].t , w = edge[i].w, c = edge[i].c;\n            if(dis[v] > no.value - x/no.pre + w + x / min(no.pre,c))\n            {\n                dis[v] = no.value - x/no.pre + w + x / min(no.pre,c);\n                q.push(node(v,min(no.pre,c),dis[v]));\n            }\n        }\n    }\n}\nint main(void)\n{\n    cin>>n>>m>>x;\n    mem(head,-1);\n    for(int i = 1 ; i <= m ; i ++)\n    {\n        int u ,v , ww, cc;\n        cin>>u>>v>>ww>>cc;\n        add(u,v,ww,cc);\n        add(v,u,ww,cc);\n    }\n    dij();\n    cout<<dis[n]<<endl;\n}\n```\n",
        "postTime": 1584851670,
        "uid": 103604,
        "name": "ZHAKWF",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]Milk Routing S\u3011"
    },
    {
        "content": "\u611f\u89c9\u672c\u849f\u84bb\u7684\u4ee3\u7801\u8ddf\u5404\u4f4d\u5927\u4f6c\u7684\u4f1a\u66f4\u76f4\u767d\u70b9...\n\u7528\u7684dijkstra \u4e0d\u7528\u679a\u4e3e\u6bcf\u4e00\u79cd\u7ba1\u9053\u5bbd\u5ea6\u7684\u60c5\u51b5 \u53ea\u9700\u8981\u8dd1\u4e00\u904d\u5373\u53ef\n\n```\n#include <stdio.h>\n#include <queue>\n#include <vector>\n#include <utility>\n#define INF 99999999\nusing namespace std;\ntypedef pair<int,int> pp;\nint read()\n{\n    char ch = getchar();\n    int f = 1;\n    int x = 0;\n    while(ch < '0' || ch > '9'){if(ch == '-')f = 0;ch = getchar();}\n    while(ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return f?x:x*-1;\n}\nstruct node\n{\n    int next,to,dis,cap;\n};\nstruct cmp\n{\n    bool operator () (pp a,pp b)\n    {\n        return a.first > b.first;\n    }\n};\nnode ans[1010];\nint head[501];\nint dis[501][2];\nint n,m,num,a;\nvoid addedge(int from,int to,int dis,int cap)\n{\n    ans[++ num].next = head[from];\n    ans[num].to = to;\n    ans[num].dis = dis;\n    ans[num].cap = cap;\n    head[from] = num;\n}\nvoid dijkstra(int s)\n{\n    // dis\u6570\u7ec4 0\u5750\u6807\u7528\u6765\u8bb0\u5f55\u8ddd\u79bb 1\u5750\u6807\u7528\u6765\u8bb0\u5f55\u6765\u5230\u8fd9\u4e2a\u70b9\u6240\u7ecf\u8fc7\u7684\u7ba1\u9053\u7684\u6700\u5c0f\u7ba1\u9053\u5bbd\u5ea6\n    for(int i = 1;i <= n;i ++)\n    {\n        dis[i][0] = INF;\n        dis[i][1] = INF;\n    }\n    dis[s][0] = 0;\n\n    priority_queue<pp,vector<pp>,cmp> pq;\n    pq.push(pp(0,s));\n\n    while(pq.size())\n    {\n        pp t = pq.top();\n        pq.pop();\n        int u = t.second;\n\n        if(dis[u][0] < t.first)\n        {\n            continue;\n        }\n\n        for(int i = head[u];i;i = ans[i].next)\n        {\n            int v = ans[i].to;\n            \n            // \u8fd9\u90e8\u5206\u6709\u70b9\u957f \u4f46\u5e94\u8be5\u8fd8\u662f\u5f88\u5bb9\u6613\u770b\u7684\u61c2..\n            \n            // \u5982\u679c\u8fd9\u6761\u7ba1\u9053\u6bd4\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f \u90a3\u4e48\u677e\u5f1b\u64cd\u4f5c\u4e2d\u7528\u8be5\u7ba1\u9053\u7684\u5bbd\u5ea6\u8ba1\u7b97\u65f6\u95f4(\u56e0\u4e3a\u8981\u6700\u5c0f)\n            if(dis[u][1] > ans[i].cap && dis[v][0] > dis[u][0] - (a / dis[u][1]) + ans[i].dis + (a / ans[i].cap)) \n            {\n                dis[v][0] = dis[u][0] - (a / dis[u][1]) + ans[i].dis + (a / ans[i].cap);\n                dis[v][1] = ans[i].cap;\n                pq.push(pp(dis[v][0],v));\n            }\n            // \u53cd\u4e4b\u4ea6\u7136 \u4e24\u79cd\u60c5\u51b5\u5728\u677e\u5f1b\u4ee5\u540e \u8981\u66f4\u65b0\u76ee\u7684\u70b9\u7684\u6700\u5c0f\u5bbd\u5ea6 \u4e5f\u5c31\u662fdis[v][1]\n            else if(dis[u][1] <= ans[i].cap && dis[v][0] > dis[u][0] - (a / dis[u][1]) + ans[i].dis + (a / dis[u][1]))\n            {\n                dis[v][0] = dis[u][0] - (a / dis[u][1]) + ans[i].dis + (a / dis[u][1]);\n                dis[v][1] = dis[u][1];\n                pq.push(pp(dis[v][0],v));\n            }\n        }\n    }\n}\nint main()\n{\n    n = read(),m = read(),a = read();\n\n    for(int i = 1;i <= m;i ++)\n    {\n        int a = read(),b = read(),c = read(),d = read();\n        addedge(a,b,c,d);\n        addedge(b,a,c,d);\n    }\n    \n    dijkstra(1);\n\n    printf(\"%d\",dis[n][0]);\n\n    return 0;\n}\n```\n\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\u6b22\u8fce\u63d0\u51fa> <  \n\u611f\u8c22\u60a8\u7684\u89c2\u770b",
        "postTime": 1527680586,
        "uid": 64075,
        "name": "Chino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "## \u4e0d\u592a\u4e00\u6837\u7684Dijkstra\u89e3\u6cd5\n## \u4e0e\u6700\u77ed\u8def\u7684\u533a\u522b\n\u849f\u84bb\u56e0\u4e3a\u6ca1\u8bfb\u61c2\u9898\u610f\u76f4\u63a5\u6253\u4e86\u4e2a\u6700\u77ed\u8def\u677f\u5b50\u6539\u4e86\u4e0b\u677e\u5f1b\u6761\u4ef6\u53d1\u73b0\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb...\n\u90a3\u4e48\u8fd9\u4e2a\u9898\u548c\u666e\u901a\u6700\u77ed\u8def\u7684\u533a\u522b\u5c31\u5728\u4e8e**\u5b83\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e0d\u662f\u5728\u4e0a\u4e00\u4e2a\u70b9\u7684\u57fa\u7840\u4e0a\u9012\u589e\u7684\uff0c\u800c\u662f\u5728\u4e0a\u4e00\u4e2a\u70b9\u7684L\uff08\u5ef6\u8fdf\uff09\u548cC\uff08\u5bb9\u79ef\uff09\u7684\u57fa\u7840\u4e0a\u7b97\u51fa\u6765\u7684\u3002** \u660e\u767d\u8fd9\u4e00\u70b9\u4e4b\u540e\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u60f3\u5230**\u901a\u8fc7\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u70b9\u7684L\u4e0eC\u6765\u8fbe\u5230\u7b97\u51fa\u5f53\u524d\u70b9\u7684\u65f6\u95f4\u7684\u6548\u679c\u3002** \u4e8e\u662f\u4e4e\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a$pre$\u6570\u7ec4\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u70b9\u7684L\u4e0eC\uff0c\u7136\u540e\u5230\u4e86\u8fd9\u4e2a\u70b9\u518d\u8ba1\u7b97\u8fb9\u6743\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u7b97\u5230\u7684\u5c31\u662f\u5230\u7ec8\u70b9\u7684\u82b1\u8d39\u7684\u65f6\u95f4\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5c31**\u6ca1\u5fc5\u8981\u8dd1N\u6b21\u6700\u77ed\u8def\u4e86\u3002**\n## \u5904\u7406\u91cd\u8fb9\n\u56e0\u4e3a\u8fd9\u4e2a\u9898\u4e0d\u662f\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6545\u800c\u5b83\u7684\u91cd\u8fb9\u4f1a\u5bfc\u81f4\u6211\u4eec\u8ba1\u7b97\u8fb9\u6743\u65f6\u51fa\u73b0\u95ee\u9898\u3002**\u4e5f\u5c31\u662f\u5f53\u524d\u70b9\u53ef\u80fd\u4ece\u591a\u4e2a\u70b9\u8fc7\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u90bb\u63a5\u8868\u5c31\u6ca1\u529e\u6cd5\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u7528\u90bb\u63a5\u77e9\u9635\u5904\u7406\u91cd\u8fb9\uff0c\u518d\u5c06\u5176\u8f6c\u6362\u4e3a\u90bb\u63a5\u8868\u8dd1\u5806\u4f18\u5316Dijkstra\u3002**\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\n// \u8d77\u70b9\u662f1\uff0c\u7ec8\u70b9\u662fn\uff0c\u65e0\u5411\u56fe \n// \u9898\u76ee\u91cc\u7ed9\u7684\u516c\u5f0fL + X / C\u7b97\u51fa\u6765\u7684\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u4e0b\u4e00\u4e2a\u70b9\u7684\u5bb9\u79ef\uff08C\uff09\u662f\u9014\u5f84\u7684\u6240\u6709\u8def\u5f84\u4e2d\n// \u6700\u5c0f\u7684\uff0c\u800cL\u662f\u4e00\u4e2a\u7d2f\u52a0\u7684\uff0c\u4e5f\u5c31\u662f\u7ecf\u8fc7\u591a\u5c11\u4e2a\u8def\u5f84L\u5c31\u52a0\u591a\u5c11... \n// \u90a3\u4e48\u53ef\u4ee5\u5229\u7528\u8bb0\u5f55\u8def\u5f84\u7684\u65b9\u6cd5\u6765\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u70b9\u7684\u4fe1\u606f... \n\n// \u6ce8\u610f\u8fb9\u6743\u662f\u6d6e\u70b9\u578b \ntypedef pair<double, int > PII;\nconst int N = 500 + 10, M = N * 2, INF = 0x3f3f3f3f;\nint head[N], e[M], ex[M], l[M], c[M], idx = 0;\npair<int, int > graph[N][N];\n// \u8fb9\u6743\u4e3a\u6d6e\u70b9\u578b\uff0c\u4f46\u662f\u6700\u540e\u8981\u53d6\u6574\u56de\u53bb \ndouble dist[N];\nbool vis[N];\nstruct Node {\n\tint mc, lsum;\t\n\tNode (int mc, int lsum) : mc(mc), lsum(lsum) {};\n\tNode () {};\n} pre[N];\nvoid add(int ut, int vt, int lt, int ct) {\n\te[idx] = vt, l[idx] = lt, c[idx] = ct, ex[idx] = head[ut], head[ut] = idx++;\n}\nint dijkstra(int st, int ed, int x) {\n\tfor (int i = 0; i < N; i++) dist[i] = 0x3fffffff; \n\tmemset(pre, -1, sizeof pre);\n\tpriority_queue<PII, vector<PII >, greater<PII > > que;\n\tque.push(PII(.0, st));\n\tdist[st] = .0; \n\tpre[st] = Node(INF, 0);\n\twhile (que.size()) {\n\t\tPII now = que.top(); que.pop();\n\t\tint ut = now.second;\n\t\tif (vis[ut]) continue;\n\t\tvis[ut] = true;\n\t\tfor (int i = head[ut]; i != -1; i = ex[i]) {\n\t\t\tint vt = e[i];\n\t\t\t// \u6cbf\u9014\u7684\u5ef6\u8fdf\u548c + X / \u6700\u5c0f\u5bb9\u79ef \n\t\t\tint lsum = (pre[ut].lsum + l[i]), mc = min(c[i], pre[ut].mc);\n\t\t\tdouble cost = lsum + (x + .0) / mc; \n\t\t\tif (dist[vt] > cost) {\n\t\t\t\tpre[vt] = Node(mc, lsum);\n\t\t\t\tdist[vt] = cost;\n\t\t\t\tque.push(PII(dist[vt], vt)); \n\t\t\t}\n\t\t}\n\t}\n\treturn dist[ed];\n}\nint main() {\n\tmemset(graph, 0x3f, sizeof graph);\n\tmemset(head, -1, sizeof head);\n\tint n, m, x, lt, ct, ut, vt;\n\tscanf(\"%d%d%d\", &n, &m, &x);\n\t// \u521d\u59cb\u5316\u90bb\u63a5\u77e9\u9635 \n\tfor (int i = 0; i < N; i++) {\n\t\tfor (int j = 0; j < N; j++) {\n\t\t\tgraph[i][j] = pair<int, int >(INF, INF);\n\t\t}\n\t}\n\t// \u5f53\u6210\u90bb\u63a5\u77e9\u9635\u8f93\u5165\uff0c\u7136\u540e\u6709\u91cd\u8fb9\u9009\u62e9\u66f4\u4f18\u7684 \n\twhile (m--) {\n\t\tscanf(\"%d%d%d%d\", &ut, &vt, &lt, &ct);\n\t\tgraph[ut][vt] = pair<int, int >(min(graph[ut][vt].first, lt), min(graph[ut][vt].second, ct));\n\t}\n\t// \u5c06\u90bb\u63a5\u77e9\u9635\u8f6c\u6362\u4e3a\u90bb\u63a5\u8868 \n\tfor (int i = 0; i < N; i++) {\n\t\tfor (int j = 0; j < N; j++) {\n\t\t\tlt = graph[i][j].first, ct = graph[i][j].second;\n\t\t\tif (lt != INF && ct != INF) add(i, j, lt, ct), add(j, i, lt, ct);\n\t\t}\n\t}\n\tcout << dijkstra(1, n, x) << endl;\n\treturn 0;\n}\n```\n~~\u4e00\u5b9a\u8981\u770b\u660e\u767d\u9898\u610f\u554a~~",
        "postTime": 1596516621,
        "uid": 277849,
        "name": "AveMarina",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]Milk Routing S\u3011"
    },
    {
        "content": "## \u5927\u81f4\u9898\u610f\uff1a\n\n      \u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u4e00\u4e2a\u5ef6\u8fdf\u548c\u5bb9\u91cf\uff0c\u6c42x\u5bb9\u91cf\u7684\u7269\u54c1\u4ece1\u5230n\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u6bcf\u6761\u8def\u5f84\u7684\u603b\u82b1\u8d39\u662f\u6240\u6709\u8fb9\u5ef6\u8fdf\u4e4b\u548c\u518d\u52a0\u4e0aX/(\u6240\u6709\u8fb9\u4e2d\u7684\u6700\u5c0f\u7684\u5bb9\u91cf)\u3002\n\n## \u89e3\u9898\u601d\u8def\n      \n      \u5c31\u662f\u7528\u6700\u77ed\u8def\u6a21\u677f\u8dd1\u4e00\u904d\uff0cdij\u6216\u8005spfa\u90fd\u53ef\u4ee5\uff0c\u5173\u952e\u5c31\u662f\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u6761\u8def\u5f84\u7684\u6700\u5c0f\u5bb9\u91cf\u662f\u591a\u5c11\uff0c\u518d\u6bcf\u6b21\u677e\u5f1b\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u6700\u5c0f\u5bb9\u91cf\uff0cdis\u3010\u3011\u5c31\u662fX/\uff08\u66f4\u65b0\u7684\u6700\u5c0f\u5bb9\u91cf\uff09-X/\uff08\u4e0a\u4e00\u6b21\u6700\u5c0f\u5bb9\u91cf\uff09\uff0c\u5c31\u53ef\u4ee5\u8dd1\u6a21\u677f\u4e86\u3002\n      \n## \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<stack>\n#include<vector>\n#include<cstdio>\n#define ll long long\n#define inf 1e9+10\nusing namespace std;\nconst int maxn=1e3;\nstruct newt\n{\n    int to,next,limit,cost;\n}e[maxn*maxn];\nint n,cnt,m,vis[maxn],head[maxn],lj[maxn];\ndouble dis[maxn];\npriority_queue<pair<double,int> >q;//\u4f18\u5148\u961f\u5217\u4f18\u5316\nvoid addedge(int u,int v,int cost,int limit)//\u90bb\u63a5\u8868\u5b58\u8fb9\n{\n    e[cnt].to=v;\n    e[cnt].limit=limit;\n    e[cnt].cost=cost;\n    e[cnt].next=head[u];\n    head[u]=cnt++;\n}\nint main()\n{\n\n    memset(head,-1,sizeof(head));\n    cnt=0;int X;\n    scanf(\"%d%d%d\",&n,&m,&X);\n    for(int i=1;i<=n;i++)dis[i]=1e9+10,lj[i]=1e9+10;\n    for(int i=1;i<=m;i++)\n    {\n        int  a,b,cost,limit;\n        scanf(\"%d%d%d%d\",&a,&b,&cost,&limit);\n        addedge(a,b,cost,limit);\n        addedge(b,a,cost,limit);\n    }\n    q.push(make_pair(0,1));\n    dis[1]=0;\n    while(!q.empty())\n    {\n        int now=q.top().second;\n        q.pop();\n        if(vis[now])continue;\n        vis[now]=1;\n        for(int i=head[now];i!=-1;i=e[i].next)\n        {\n            int v=e[i].to,limit=e[i].limit,cost=e[i].cost;\n            double val;\n           // printf(\"%d %d %d %d\\n\",now,v,limit,cost);\n            if(limit>=lj[now])//\u5224\u65ad\u6700\u5c0f\u5bb9\u91cf\u662f\u5426\u66f4\u65b0\n            {\n                val=cost+double(X/lj[now]);\n                if(dis[v]>dis[now]+val-double(X/lj[now]))//\u8bb0\u5f97\u8981\u51cf\u6389\u4e0a\u4e00\u6b21\u7684\u5bb9\u91cf\u82b1\u8d39\n                dis[v]=dis[now]+val-double(X/lj[now]),lj[v]=min(lj[now],limit),q.push(make_pair(-dis[v],v));\n            }\n            else\n            {\n                val=cost+double(X/limit);\n                if(dis[v]>dis[now]+val-double(X/lj[now]))\n                dis[v]=dis[now]+val-double(X/lj[now]),lj[v]=min(lj[now],limit),q.push(make_pair(-dis[v],v));\n            }\n        }\n    }\n    //for(int i=1;i<=n;i++)printf(\"%d \",lj[i]);\n    int ans=int(dis[n]);//\u5411\u4e0b\u53d6\u6574\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1533557536,
        "uid": 90443,
        "name": "caiwenkaiyaoyao",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37 P3063 [USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\uff08\u6700\u77ed\u8def\uff09 \u9898\u89e3"
    },
    {
        "content": "\n### \u6838\u5fc3\u7b97\u6cd5 Dijkstra\n\n\n------------\n\n\u8fd9\u9053\u9898\u8981\u6c42\u7ef4\u62a4\u4e24\u4e2a\u91cf\uff0c\u4e00\u4e2a\u662f\u5bb9\u91cf\uff0c\u4e00\u4e2a\u662f\u5ef6\u8fdf\u3002\u800c\u5728Dijkstra\u7684\u6a21\u677f\u9898\uff0c\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u91cf\uff0c\u5c31\u662f\u8def\u7a0b\uff08\u6b64\u9898\u4e2d\u5ef6\u8fdf\uff09\u3002\n\n\u8fd9\u9053\u9898\u4e2d\uff0c\u6d41\u91cf\uff0c\u4e0e\u82b1\u8d39\u7684\u8054\u7cfb\u5e76\u4e0d\u662f\u5fc5\u7136\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c**\u4e0d\u53ef\u4ee5\u60f3\u5f53\u7136\u7684\u8ba4\u4e3a\uff0c\u6700\u77ed\u8def\u4e0a\u7684\u6d41\u91cf\u4e0e\u82b1\u8d39\u7684\u6bd4\u5c31\u662f\u6240\u6c42\u7684\u7b54\u6848\u3002**\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u89e3\u51b3\u5462\uff1f\n\n### \u679a\u4e3e\uff0c\u63a7\u5236\u53d8\u91cf\n\n------------\n\n\u6211\u4eec\u8981\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u518d\u5728\u53bb\u5bfb\u627e\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u503c\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u660e\u663e\u662f\u63a7\u5236\u5bb9\u91cf\u597d\u4e00\u4e9b\u3002\uff08\u56e0\u4e3a\u5ef6\u8fdf\u4e0d\u597d\u63a7\u5236\uff09\n\n\u4e0d\u65ad\u679a\u4e3e\u5bb9\u91cf\uff0c\u8dd1\u51fa\u5176\u5bf9\u5e94\u7684\u5ef6\u8fdf\uff0c\u7136\u540e\u4e0e\u5148\u524d\u7684\u6bd4\u8f83\u3002\u6700\u540e\u5f97\u51fa\u6700\u5c0f\u7684\u3002\n\n------------\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 2000005\n#define INF 0x3f3f3f3f\nstruct EDGE{int to,nxt,late,can;}\te[MAXN];\n//\u5b58\u56fe \nstruct node \n{\n\tint pos,dis;\n\tbool operator < (const node & x) const\t{ return x.dis < dis; }\n\t//\u91cd\u5b9a\u5411 \n};\nint adj[MAXN],cnt=0,vis[MAXN],dis[MAXN],contain[MAXN];\nint n,m,x,ans=INF;\nstd::priority_queue < node > q;\n//\u5806\u4f18\u5316Dijkstra \nvoid addedge(int u,int v,int l,int c)\n{\n\te[++cnt].to=v;\te[cnt].nxt=adj[u];\te[cnt].late=l;\te[cnt].can=c;\tadj[u]=cnt;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f \nvoid Dijkstra(int mincan)\n{\n\t//\u8bb0\u5f97\u5148\u6e05\u7a7a \uff0c\u521d\u59cb\u5316 \n\tstd::memset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;++i)\tdis[i]=INF;\n\twhile(!q.empty())\tq.pop(); \n\t//Dijkstra\n\tdis[1]=0;\tq.push((node) {1,0});\n\twhile(!q.empty())\n\t{\n\t\tnode temp=q.top();\tq.pop();\n\t\tint u=temp.pos;\n\t\tif(vis[u])\tcontinue;\tvis[u]=1;\n\t\tfor(int i=adj[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(mincan>e[i].can) continue;\t//\u63a7\u5236\u6700\u5c0f\u7684\u5bb9\u91cf \n\t\t\t//\u5982\u679c\u4e0b\u4e00\u4e2a\u8fb9\u7684\u5bb9\u91cf\u6bd4\u6700\u5c0f\u7684\u8fd8\u5c0f\uff0c\u5c31\u820d\u6389\u3002 \n\t\t\tif(dis[v]>dis[u]+e[i].late)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].late;\n\t\t\t\tif(!vis[v])\n\t\t\t\t\tq.push((node) {v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tstd::scanf(\"%d%d%d\",&n,&m,&x);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v,c,l;\n\t\tstd::scanf(\"%d%d%d%d\",&u,&v,&l,&c);\n\t\taddedge(u,v,l,c);\taddedge(v,u,l,c);\n\t\tcontain[i]=c;\n\t}\n\tfor(int mincan=1;mincan<=m;++mincan)\n\t{\n\t\tDijkstra(contain[mincan]);\n\t\tif(dis[n]!=INF) ans=std::min(ans,dis[n]+x/contain[mincan]);\n\t}\n\tstd::printf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1595943611,
        "uid": 128451,
        "name": "x_miracle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]Milk Routing S\u3011"
    },
    {
        "content": "~~\u4f3c\u4e4e\u8fd9\u5c06\u662f\u672c\u9898\u7b2c\u4e00\u7bc7\u76ee\u524d\u53ef\u4ee5AC\u7684\u9898\u89e3~~\n\n\u81ea\u4ece\u8fd9\u4e2a\u9898\u88abhack\u4e86\u4e4b\u540e\uff0c\u672c\u9898\u4f3c\u4e4e\u53d8\u96be\u4e86\u3002\u90a3\u4e9b\u539f\u672c\u7684\u9898\u89e3**\u597d\u50cf**\uff08\u6211\u4e5f\u4e0d\u786e\u5b9a\uff09\u90fd\u8fc7\u4e0d\u4e86\u4e86\u3002\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9898\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u7684\u9898\uff0c\u53ef\u4ee5\u8dd1spfa\uff0c\u4e0e\u4ee5\u5f80\u4e0d\u540c\u7684\u533a\u522b\u5c31\u662f\u539f\u6765\u7684dis\u73b0\u5728\u8981\u53d8\u4e00\u53d8\u4e86\uff0c\u6211\u7528\u7684\u7ed3\u6784\u4f53\uff0cl\u5b58\u5ef6\u65f6\uff0cc\u5b58\u5bb9\u91cf\uff0cdist\u5176\u5b9e\u6ca1\u4ec0\u4e48\u7528\uff0c\u5b58\u7684\u662f\u8d70\u5230\u8be5\u70b9\u5df2\u77e5\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5224\u65ad\u662f\u5426\u66f4\u65b0\u7684\u8bed\u53e5\u5c31\u662f\n\n```\nif(dis[\u5df2\u77e5].dist>((dis[\u672c\u8282\u70b9].l +\u8fd9\u6761\u9053\u8def.l )+(x/min(dis[\u672c\u8282\u70b9].c,\u9053\u8def.c ))))\n```\n\u76f8\u4fe1\u5f88\u591a\u540c\u5b66\u8ddf\u6211\u4e00\u6837\uff0c\u5728\u7b2c\u5341\u4e00\u7684\u70b9\u7684\u4f4d\u7f6e\u4e0awa\u4e86\u3002\u7b2c\u5341\u4e00\u70b9\u7684\u6570\u636e\u5982\u4e0b\uff1a\n\n```\n3 3 15\n1 2 4 3\n1 2 1 1\n2 3 1 1\n```\n\n[hack\uff01\uff01\uff01](https://www.luogu.org/discuss/show/74002)\u89c1\u4e8e\u8ba8\u8bba\n\n\u8fd9\u4e2a\u6570\u636e\u5176\u5b9e\u662f\u8fd9\u6837\u7684\uff1a\n\u672c\u6765\u8dd1spfa\uff0c\u5148\u770b1 2 4 3 \uff0c\u5c06dis[2].dist\u66f4\u65b0\u4e3a9\uff1b\n\u7136\u540e\u770b1 2 1 1 \uff0c\u53d1\u73b0\u503c\u4e3a16\uff0c\u6ca1\u6709\u66f4\u65b0\uff1b\n\u7136\u540e\uff0c\u770b2 3 1 1 \uff0c\u8fd9\u65f6\u95ee\u9898\u5c31\u51fa\u73b0\u4e86\uff0c\u56e0\u4e3a\u8fd9\u65f6\u8def\u7ebf\u7684\u5bb9\u91cf\u53d8\u4e86\uff0c\u5982\u679c\u8fd8\u9009\u7b2c\u4e00\u6761\u8def\uff0c\u90a3ans\u5c31\u53d8\u4e3a20\u4e86\uff1b\u53ef\u5982\u679c\u9009\u7b2c\u4e00\u6761\u8def\uff0cans\u5c31\u4e3a17\uff0c\u663e\u7136\u6bd4\u7b2c\u4e00\u6761\u8def\u66f4\u4f18\u3002\u8fd9\u5176\u5b9e\u4e5f\u5c31\u662f\u8ba8\u8bba\u4e2d\u6240\u8bf4\u7684 **\"\u540e\u6548\u6027\"** \u3002~~\uff08\u77ac\u95f4\u8fd9\u9053\u9898\u53d8\u4e3a\u4e86\u84dd\u9898\uff0c\u56e0\u4e3a\u4e00\u822c\u4eba\u4e00\u6b21AC\u4e0d\u4e86\u4e86\uff09~~\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8dd1\u591a\u8fb9spfa\uff0c\u4ecb\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u53ea\u8dd1\u4e86\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u4ece1\u5230n\uff0c\u4e00\u6b21\u662f\u4ecen\u52301.\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<stack>\nusing namespace std;\ninline int read()\n{\n\tchar ch=getchar();\n\tint x=0,f=1;\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nint n,m,x,ans1,ans2;\nint ai,bi,cur2,v1;\nstruct road\n{\n\tint to,l,c;\n}cur;\nvector<road> v[550];\nstruct distance\n{\n\tint dist,l,c;\n}dis[550],cur1;\nbool book[550];\nqueue<int> q;\nvoid spfa(int k1)\n{\n\tfor(int i=1;i<=n;i++)//\u521d\u59cb\u5316\n\t{\n\t\tdis[i].dist =99999999;\n\t\tdis[i].c =9999999;\n\t\tdis[i].l =0;//\u8fd9\u4e2a\u5fc5\u987b\u6709\uff08\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u95ee\u9898\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002\u849f\u84bb\u95ee\u9898\uff09\n\t}\n\tdis[k1].dist =0;\n\tbook[k1]=1;\n\tq.push(k1);\n\twhile(!q.empty() ) \n\t{\n\t\tcur2=q.front() ;\n\t\tq.pop() ;\n\t\tfor(int i=0;i<v[cur2].size() ;i++)\n\t\t{\n\t\t\tcur=v[cur2][i];\n\t\t\tif(dis[cur.to ].dist>((dis[cur2].l +cur.l )+(x/min(dis[cur2].c,cur.c ))))//\u8fd9\u91cc\u662f\u6838\u5fc3\n\t\t\t{\n\t\t\t\t\n\t\t\t\tdis[cur.to ].dist =dis[cur2].l +cur.l+(x/min(dis[cur2].c,cur.c ));\n\t\t\t\tdis[cur.to ].c =min(dis[cur2].c,cur.c );\n\t\t\t\tdis[cur.to ].l =dis[cur2].l +cur.l;\n\t\t\t\tif(!book[cur.to ])\n\t\t\t\t{\n\t\t\t\t\tbook[cur.to ]=1;\n\t\t\t\t\tq.push(cur.to ); \n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tbook[cur2]=0;\n\t}\n}\nint main()\n{   \n    n=read();\n    m=read();\n    x=read();\n    for(int i=1;i<=m;i++)\n    {\n    \tai=read();\n    \tbi=read();\n    \tcur.l =read();\n    \tcur.c =read();\n    \tcur.to =bi;\n    \tv[ai].push_back(cur);\n\t\tcur.to =ai;\n\t\tv[bi].push_back(cur);  \n\t}\n\tspfa(1);\n\tdouble aaa1,aaa2;\n\taaa1=dis[n].l +(x/double(dis[n].c ));\n\tans1=floor(aaa1);\n\tspfa(n);\n\taaa2=dis[1].l +(x/double(dis[1].c ));\n\tans2=floor(aaa2);\n\tprintf(\"%d\",min(ans1,ans2));\n\treturn 0;\n}\n```\n\n\u597d\u5427\uff0c\u8bf4\u5b9e\u5728\u7684\uff0c\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u7a76\u7adf\u662f\u4e0d\u662f\u6211\u8fd9\u6837\u505a\u6211\u4e5f\u4e0d\u77e5\u9053\u3002\u6216\u8bb8\u8fd8\u6709\u522b\u7684\u65b9\u6cd5\uff0c\u4f46\u6bd5\u7adf\u7b2c11\u4e2a\u6570\u636e\u8fd8\u662f\u5f88\u6c34\u7684\uff0c\u8fd9\u6837\u5c31\u80fd\u8fc7\u3002\n\nif\uff08dalao\u8fd8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff09\n{\n   \u8bf7\u60a8\u5728\u56de\u590d\u6211\uff0c\u8c22\u8c22\uff1b\n   return 0\uff1b\n}\n\n\n--------------------------------\nProcess exited after 0.000001 seconds with return value 0\n\n\u8bf7\u6309\u4efb\u610f\u952e\u7ee7\u7eed. . .",
        "postTime": 1554710607,
        "uid": 121646,
        "name": "sunxiaofan",
        "ccfLevel": 6,
        "title": "P3063 [USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing \u9898\u89e3"
    },
    {
        "content": "\u770b\u6ca1\u6709\u4eba\u5199spfa\u7684\uff0c\u672c\u849f\u84bb\u6765\u8865\u5145\u4e00\u4e0b......\u5176\u5b9e\u53ea\u7528\u5199\u4e00\u904dspfa\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n/*\nProblem : luogu P3063\nAlgorithm : spfa\nStatus : AC\n*/\n#include<bits/stdc++.h>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n#include<cstdio>\n#include<iostream>\n#define inf 2100000000\nusing namespace std;\n\nstruct node{\n\tint l,c;\n\tdouble time;\n};\nstruct point{\n\tint to,l,c;\n\tpoint(int _to,int _l,int _c){\n\t\tto = _to;\n\t\tl = _l;\n\t\tc = _c;\n\t}\n};\n//\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7ed3\u6784\u4f53(\u5e94\u8be5\u8fd8\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u671b\u5404\u4f4d\u5927\u4f6c\u6307\u51fa)\n\nint n,m,x;\nnode dis[505];\nvector<point> e[505];\n\ndouble calc(int l,int c){\n\treturn l+double(x)/double(c);\n}\n\n//\u7a0d\u5fae\u6539\u52a8\u4e00\u4e0b\u5373\u53ef\nvoid spfa(int s){\n\tbool exist[505];\n\tqueue<int> q;\n\tmemset(exist,false,sizeof(exist));\n\tfor(int i = 1;i <= n;i++){\n    \t//\u521d\u59cb\u5316\n        //\u6ce8\u610f\u5ef6\u8fdf\u503c\u8981\u8d4b\u4e3a0\uff0c\u6d41\u91cf\u548c\u65f6\u95f4\u8d4b\u4e3ainf\n\t    dis[i].l = 0;\n\t\tdis[i].c = dis[i].time = inf;\n\t}\n    exist[s] = true;\n    q.push(s);\n    while(!q.empty()){\n    \tint u = q.front();\n    \tq.pop();\n    \texist[u] = false;\n    \tfor(int i = 0;i < e[u].size();i++){\n    \t\tint v = e[u][i].to;\n            //\u8ba1\u7b97\u65f6\u95f4\n            //\u5c06\u5ef6\u8fdf\u503c\u76f8\u52a0\uff0c\u6d41\u91cf\u53d6min\n    \t\tint k = calc(dis[u].l+e[u][i].l,min(dis[u].c,e[u][i].c));\n    \t\tif(dis[v].time > k){\n            \t//\u6ce8\u610f\u6240\u6709\u7684\u90fd\u8981\u66f4\u65b0\n    \t\t\tdis[v].time = k;\n    \t\t\tdis[v].l = dis[u].l+e[u][i].l;\n    \t\t\tdis[v].c = min(dis[u].c,e[u][i].c);\n    \t\t\tif(!exist[v]){\n    \t\t\t\tq.push(v);\n    \t\t\t\texist[v] = true;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n}\n\nint main(){\n\tcin >> n >> m >> x;\n\tfor(int i = 1;i <= m;i++){\n    \t//\u8bfb\u5165\u5efa\u8fb9\n\t\tint x,y,a,b;\n\t\tcin >> a >> b >> x >> y;\n\t\te[a].push_back(point(b,x,y));\n\t\te[b].push_back(point(a,x,y));\n\t}\n\tspfa(1);\n    //\u8f93\u51fa\u65f6\u95f4\u5373\u53ef\n\tcout << int(dis[n].time) << endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1531554241,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "# \u6700\u77ed\u8def\uff01\uff01\uff01\n### \u7528 DIJKSTRA \u7136\u540e\u6bd4\u8f83\u7684\u662fs[i]\u4e2d\u5230i\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n\n### \u56e0\u4e3a\u95f2\u5f97\u614c\u6240\u4ee5\u7528\u4e86\u94fe\u8868... \u5bf9\u4e0d\u8d77\u53ef\u80fd\u770b\u5f97\u5f88\u7d2f\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define maxn 510\n#define inf 0x7fffffff\n#define maxm 3000\nusing namespace std;\nint n,m,a[maxm][4],head,an;\nlong long x,s[maxn];\nbool tag[maxn];\nvoid add(int u,int v,int w,int r){\n\tan++;\n\ta[an][0]=v;\n\ta[an][1]=a[u][1];\n\ta[an][2]=w;\n\ta[an][3]=r;\n\ta[u][1]=an;\n\tan++;\n\ta[an][0]=u;\n\ta[an][1]=a[v][1];\n\ta[an][2]=w;\n\ta[v][1]=an;\n\ta[an][3]=r;\n}\nvoid f(int k){\n\tint i,j,t,h;\n\ti=a[k][0];\n\tt=a[k][2];\n\th=a[k][3];\n\tj=min(h,a[head][3]);\n\tint sum1,sum2;\n\tif(s[head]) sum1=s[head]-x/a[head][3]+t+x/j;//\u5982\u679c\u4e4b\u524d\u6709\u8fc7\u6d41\u91cf\uff0c\u5219\u526a\u6389\u524d\u9762\u7684\u6d41\u91cf\u52a0\u4e0a\u73b0\u5728\u7684\n\telse sum1=s[head]+t+x/j;\n\tsum2=s[i];\n\tif(sum1<sum2){\n\t\ts[i]=sum1;\n\t\ta[i][3]=j;//\u66f4\u65b0\u503c\n\t}\n\telse return;\n}\nint main(){\n\tscanf(\"%d%d%lld\",&n,&m,&x);\n\tint u,v,w,r;\n\tfor(int i=1;i<=n;i++) s[i]=inf; //\u521d\u59cb\u5316\n\tan=n;\n\tcout<<1<<endl;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&r);\n\t\tadd(u,v,w,r);\n\t} //\u8bfb\u5165\u7136\u540e\u94fe\u5b58\n\tcout<<1<<endl;\n//\tfor(int i=1;i<=n;i++) cout<<s[i]<<\" \";\n//\tcout<<endl;\n\thead=1;\n\ttag[1]=1;\n\ts[1]=0;\n\tfor(int i=1;i<=n;i++) a[i][3]=inf;//\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6765\u8bf4 a[i][3]\u662f\u8fd9\u6761\u8def\u4e0a\u6700\u5c0f\u7684\u6d41\u91cf\n\tcout<<1<<endl;\n\twhile(head!=n){\n\t\tint j=a[head][1];\n\t\twhile(j!=0){\n\t\t\tf(j);\n\t\t\tj=a[j][1];\n\t\t}\n\t\ttag[head]=1;\n\t\tint sum=inf;\n\t\tfor(int i=1;i<=n;i++) if(s[i]<sum&&tag[i]==0){\n\t\t\tsum=s[i];\n\t\t\thead=i;\n\t\t}\n\t}//\u8fd9\u4e2a\u662fDijkstra\u5982\u679c\u4e0d\u61c2\u53ef\u4ee5\u53bb\u770b\u770b\u6700\u77ed\u8def\u6a21\u677f\n//\tfor(int i=1;i<=n;i++) cout<<s[i]<<\" \";\n//\tcout<<endl;\n//\tfor(int i=1;i<=n;i++) cout<<a[i][3]<<\" \";\n\tcout<<s[n];//\u8f93\u51fas[n]\u5c31\u662f\u7b54\u6848\n\treturn 0;\n}\n```",
        "postTime": 1522760113,
        "uid": 56011,
        "name": "jokers",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    },
    {
        "content": "  \u3010Spfa\u7b97\u6cd5\u3011\n  \u8fd9\u9053\u9898\u6700\u521d\u7684\u65f6\u5019\uff0c\u6211\u60f3\u5230\u7684\u505a\u6cd5\u662f\u6700\u4f18\u6bd4\u4f8b\u751f\u6210\u6811\uff0c\u540e\u6765\u60f3\u4e00\u60f3\uff0c\u627e\u4e0d\u5230\u8be5\u5982\u4f55\u6c42\u8bbe\u90a3\u4e2a\u7b54\u6848mid\uff0c\u4e8e\u662f\u770b\u4e86\u8ba8\u8bba\uff0c\u57fa\u672c\u90fd\u662f\u7528\u6700\u77ed\u8def\u6765\u6c42\u8fd9\u9053\u9898\uff0c\u4e8e\u662f\u5199\u4e86Spfa\u7b97\u6cd5\u3002\n  \u8fd9\u91cc\u9664\u4e86Spfa\u7b97\u6cd5\uff0c\u6700\u91cd\u8981\u7684\u662f\u8def\u5f84\u7684\u4ee3\u66ff\uff0c\u6211\u6c42\u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u628a\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u7528L+X/min(\u76ee\u524d\u8282\u70b9\u7684C\uff0c\u8be5\u70b9\u7684\u5bf9\u5e94\u539fC)\u6765\u8868\u793a\uff0c\u5c31\u662f\u6240\u6c42ans\u3002\n  ```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <limits>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#define lowbit(x) ( x&(-x) )\n#define pi 3.141592653589793\n#define e 2.718281828459045\n#define INF 1e9+7\nusing namespace std;\ntypedef long long ll;\nconst int maxN=505;\nint N,M,X;      //\u8282\u70b91\uff5eN\uff0cM\u6761\u8fb9\uff0cX\u4e3a\u603b\u5171\u9700\u8981\u8fd0\u9001\u7684\u91cf\nstruct node\n{\n    int nex, l, c;\n    node(int a=0, int b=0, int d=0):nex(a), l(b), c(d) {}\n};\nvector<node> vt[maxN];\nstruct point\n{\n    int l,c,time;\n    point(int a=0, int b=0, int c=0):l(a), c(b), time(c) {}\n}dis[maxN];\nqueue<int> Q;\nint calc(int L, int C) { return L+X/C; }\nvoid Spfa(int u)\n{\n    bool inq[maxN]; memset(inq, false, sizeof(inq));        //\u662f\u5426\u5728\u961f\u5217\u4e2d\n    Q.push(u);\n    inq[u]=true;\n    while(!Q.empty())\n    {\n        u=Q.front();\n        Q.pop();\n        inq[u]=false;\n        int len=(int)vt[u].size();\n        for(int i=0; i<len; i++)\n        {\n            int v=vt[u][i].nex;\n            int k=calc(dis[u].l+vt[u][i].l, min(dis[u].c, vt[u][i].c));\n            if(dis[v].time>k)\n            {\n                dis[v].time=k;\n                dis[v].l=dis[u].l+vt[u][i].l;\n                dis[v].c=min(dis[u].c, vt[u][i].c);\n                if(!inq[v])\n                {\n                    Q.push(v);\n                    inq[v]=true;\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\",dis[N].time);\n}\nint main()\n{\n    while(scanf(\"%d%d%d\",&N,&M,&X)!=EOF)\n    {\n        for(int i=1; i<=N; i++) { vt[i].clear(); dis[i]=( i==1?point(0, INF, 0):point(INF, INF, INF) ); }\n        while(!Q.empty()) Q.pop();\n        for(int i=1; i<=M; i++)\n        {\n            int e1,e2,e3,e4;\n            scanf(\"%d%d%d%d\",&e1,&e2,&e3,&e4);\n            vt[e1].push_back(node(e2, e3, e4));\n            vt[e2].push_back(node(e1, e3, e4));\n        }\n        Spfa(1);\n    }\n    return 0;\n}\n```",
        "postTime": 1535875378,
        "uid": 117018,
        "name": "wuliwulii",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3063 \u3010[USACO12DEC]\u725b\u5976\u7684\u8def\u7531Milk Routing\u3011"
    }
]