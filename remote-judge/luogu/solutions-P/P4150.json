[
    {
        "content": "[~~\u83b7\u5f97\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c~~](https://ignotusjee.github.io/post/luo-gu-4150-wc2009zui-duan-lu-wen-ti-ti-jie/)\n\n# \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a$6*n$\u7684\u65b9\u683c\uff0c\u65b9\u683c\u5e26\u6743\u3002\u6bcf\u6b21\u8be2\u95ee\u4e24\u70b9\u6700\u5c0f\u6743\u8def\u5f84\uff0c\u6216\u4fee\u6539\u67d0\u5750\u6807\u6743\u503c\u3002\n\n# \u89e3\u6cd5\n\n~~\u9996\u5148\u4e00\u770b\uff0c\u53d1\u73b0\u4e0d\u53ef\u505a\uff0c\u5f03\u4e86~~\n\n\u9996\u5148\u4e00\u773c\u53ef\u4ee5\u770b\u51fa\u6b64\u9898\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u5373\u65b9\u683c\u5bbd\u4e3a6\u3002\u4e8e\u662f\u8003\u8651\u5728\u8fd9\u4e0a\u505a\u8f6c\u5316\u3002\n\n* \u6027\u8d28\u4e00\uff1a\u4e00\u6761\u8def\u5f84\u6700\u591a\u4ece\u4e0a\u5230\u4e0b\uff08\u6216\u4ece\u4e0b\u5230\u4e0a\uff09\u8f6c4\u6b21\u5f2f\u3002\n\n![\u56fe\u4e11\u52ff\u55b7](https://cdn.luogu.com.cn/upload/image_hosting/3dcql9jz.png)\n\n\u5982\u56fe\uff0c\u5de6\u8fb9\u8f6c\u5f2f\u663e\u7136\u4e0d\u662f\u6700\u5c0f\u6743\u8def\u5f84\u3002\u4e8e\u662f\u53ea\u80fd\u9694\u4e00\u4e2a\u8f6c\u5f2f\uff0c\u50cf\u53f3\u8fb9\u8fd9\u6837\u3002\n\n* \u6027\u8d28\u4e8c\uff1a\u4e00\u6761\u6700\u5c0f\u6743\u8def\u5f84\u53ea\u6709\u5982\u4e0b\u4e5d\u79cd\u5f62\u5f0f\u3002\n\n![\u56fe\u4e11\u52ff\u55b7](https://cdn.luogu.com.cn/upload/image_hosting/31kvbfmi.png)\n\n\u5982\u56fe\uff0c\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u7ad6\u7ebf\u5206\u522b\u4ee3\u8868$y_1$\u548c$y_2$\u7684\u90a3\u4e00\u7eb5\u5217\uff0c\u5e76\u4e14\u4e0d\u8003\u8651\u4e24\u7eb5\u7ebf\u4e4b\u95f4\u7684\u5177\u4f53\u8def\u5f84\uff08\u4f7f\u7528\u6298\u7ebf\u4ee3\u66ff\uff09\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e5d\u79cd\u8def\u5f84\u5b9e\u9645\u4e0a\u662f\u7531\u5de6\u8fb9\u548c\u53f3\u8fb9\u62d0\u5f2f\u6b21\u6570\u53d6\u503c\u5206\u522b\u4e3a$0,2,4$\u6240\u62fc\u5408\u6210\u7684\u8def\u5f84\u3002\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e\u524d8\u79cd\u8def\u5f84\u5b9e\u9645\u4e0a\u662f\u7b2c9\u79cd\u8def\u5f84\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n![\u56fe\u4e11\u52ff\u55b7](https://cdn.luogu.com.cn/upload/image_hosting/r1r74lei.png)\n\n\u5982\u56fe\uff0c\u5f53\u5de6\u8fb9\u4e09\u4e2a\u70b9\u91cd\u5408\u6216\u53f3\u8fb9\u4e09\u4e2a\u70b9\u91cd\u5408\u65f6\uff0c\u53ef\u4ee5\u6210\u4e3a\u524d\u516b\u79cd\u8def\u5f84\u3002\u4e8e\u662f\u7814\u7a76\u5b83\u6765\u4ee3\u8868\u4e00\u822c\u60c5\u51b5\u3002\n\n\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u7684\u884c\u8d70\u65b9\u5f0f\u5b9e\u9645\u4e0a\u53ea\u6709\u4e24\u79cd\u3002\u4e00\u79cd\u662f\u4ece\u5de6\u7eb5\u5217\u4e00\u76f4\u5411\u53f3\u8d70\u5230\u53f3\u7eb5\u5217\uff0c\u53e6\u4e00\u79cd\u662f\u5411\u5de6/\u53f3\u7ed5\u5708\u540e\u8d70\u5230\u540c\u4e00\u7eb5\u5217\u7684\u540c\u4e00/\u4e0d\u540c\u4f4d\u7f6e\u3002\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u7ef4\u62a4\u4e09\u4e2a\u6570\u7ec4`ll[6][6],rr[6][6],lr[6][6]`\uff0c\u5206\u522b\u4ee3\u8868\u53ea\u5728\u672c\u533a\u95f4\u5185\u884c\u8d70\uff0c\u4ece\u5de6\u7eb5\u5217\u8d70\u5230\u5de6\u7eb5\u5217/\u53f3\u7eb5\u5217\u8d70\u5230\u53f3\u7eb5\u5217/\u5de6\u7eb5\u5217\u8d70\u5230\u53f3\u7eb5\u5217\u7684\u6700\u5c0f\u6743\u8def\u5f84\u3002\n\n\u90a3\u4e48\u5f53\u6c42\u51fa\u533a\u95f4$[1,y_1],[y_1,y_2],[y_2,n]$\u7684\u6570\u7ec4\u540e\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\nans=min\\{mid.ll[x1][i]+l.rr[i][j]+mid.lr[j][k]+r.ll[k][p]+mid.rr[p][x2]-mid.ll[i][i]-mid.ll[j][j]-mid.rr[k][k]-mid.rr[p][p]\\}\n$$\n\n\u524d\u9762\u8bf4\u8fc7\u5f53$i,j,x_1$\u6216$k,p,x_2$\u6709\u91cd\u5408\u65f6\uff0c\u53ef\u4ee5\u4ee3\u8868\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ea\u8981\u6c42\u51fa\u5bf9\u5e94\u533a\u95f4\u4fe1\u606f\u5373\u53ef\u3002~~\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u76f4\u63a5\u66b4\u4e0a\u7ebf\u6bb5\u6811~~\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u4f46\u4ed4\u7ec6\u60f3\u597d\u50cf\u533a\u95f4\u4fe1\u606f\u597d\u50cf\u4e0d\u597d\u5408\u5e76\u554a\uff1f\n\n\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4$[l,mid],[mid+1,r]$\u7684\u5408\u5e76\uff0c\u5f15\u5165\u8f85\u52a9\u6570\u7ec4`lm[6][6],rm[6][6]`\uff0c\u5206\u522b\u8868\u793a\u4ece$l$\u7eb5\u5217\u8d70\u5230$mid$\u7eb5\u5217\uff0c\u518d\u5411\u53f3\u7ed5\u5708\u56de\u5230$mid$\u7eb5\u5217\u7684\u6700\u5c0f\u6743\u8def\u5f84\uff0c\u4ece$mid+1$\u7eb5\u5217\u5411\u5de6\u7ed5\u5708\u56de\u5230$mid+1$\u7eb5\u5217\uff0c\u518d\u8d70\u5230$r$\u7eb5\u5217\u7684\u6700\u5c0f\u6743\u8def\u5f84\u3002\n\n![\u56fe\u4e11\u52ff\u55b7](https://cdn.luogu.com.cn/upload/image_hosting/fuq25umm.png)\n\n\u5982\u56fe\uff0c\u4e0a\u9762\u7684\u8def\u5f84\u5373\u4e3a$lm$\u8def\u5f84\uff0c\u4e0b\u9762\u7684\u8def\u5f84\u5373\u4e3a$rm$\u8def\u5f84\u3002\u6613\u5f97\u9012\u63a8\u65b9\u7a0b\n\n$$\nlm[i][j]=min\\{lc.lr[i][k]+rc.ll[k][j]+lc.rr[j][j]\\}\n$$\n\n$$\nrm[i][j]=min\\{rc.ll[i][i]+lc.rr[i][k]+rc.lr[k][j]\\}\n$$\n\n\u6ce8\u610f\u5de6\u533a\u95f4\u7684`rr`\u662f$mid$\u7eb5\u5217\uff0c\u53f3\u533a\u95f4\u7684`ll`\u662f$mid+1$\u7eb5\u5217\u3002\n\n\u6700\u540e\u5199\u51fa\u533a\u95f4\u4fe1\u606f\u7684\u9012\u63a8\u5f0f\uff1a\n\n$$\nans.ll[i][j]=min\\{lc.ll[i][j],ans.ll[i][j],lm[i][k]+lc.lr[j][k]-lc.rr[k][k]\\}\n$$\n\n$$\nans.rr[i][j]=min\\{rc.rr[i][j],ans.rr[i][j],rm[k][i]+rc.lr[k][j]-rc.ll[k][k]\\}\n$$\n\n$$\nans.lr[i][j]=min\\{ans.lr[i][j],min(lm[i][k]+rm[k][j]-lc.rr[k][k]-rc.ll[k][k],lc.lr[i][k]+rc.lr[k][j])\\}\n$$\n\n\n\u5728\u4e0a\u6587\u8f6c\u79fb\u5f0f\u4e2d\u6ce8\u610f\u4e00\u4e9b\u70b9\u662f\u91cd\u590d\u8ba1\u7b97\u7684\uff0c\u9700\u8981\u51cf\u6389\u3002\u53e6\u5916\uff0c\u5355\u6761\u7eb5\u5217\u7684\u4fe1\u606f\u53ea\u9700\u8ba1\u7b97\u76f4\u7ebf\u8def\u5f84\u6743\u548c\u5373\u53ef\u3002\n\n\u7ecf\u8fc7\u4e0a\u8ff0\u8f6c\u5316\uff0c\u4f60\u5c31\u53c8A~~\u6c34~~\u4e86\u4e00\u9053\u9ed1\u9898\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n\nnamespace quick {\n//\u6bd2\u7624\u5feb\u8bfb\n}\nusing namespace quick;\n\nconst int maxn=1e5+10,inf=0x3f3f3f3f;\nint n,m,val[6][maxn];\n\n#define clr(x,y) memset(x,y,sizeof(x))\nnamespace SegmentTree {\n\tstruct Node {\n\t\tint ll[6][6],rr[6][6],lr[6][6];\n\t}st[maxn<<2];\n\n\tNode operator + (const Node &lc,const Node &rc) {\n\t\tstatic Node res;\n\t\tstatic int lm[6][6],rm[6][6];\n\t\tclr(lm,0x3f);clr(rm,0x3f);\n\t\tfor(int i(0);i<6;i++)\n\t\t\tfor(int j(0);j<6;j++)\n\t\t\t\tfor(int k(0);k<6;k++) {\n\t\t\t\t\tlm[i][j]=min(lm[i][j],lc.lr[i][k]+rc.ll[k][j]+lc.rr[j][j]);\n\t\t\t\t\trm[i][j]=min(rm[i][j],rc.ll[i][i]+lc.rr[i][k]+rc.lr[k][j]);\n\t\t\t\t}\n\t\tfor(int i(0);i<6;i++)\n\t\t\tfor(int j(0);j<6;j++) {\n\t\t\t\tres.ll[i][j]=lc.ll[i][j];\n\t\t\t\tres.rr[i][j]=rc.rr[i][j];\n\t\t\t\tres.lr[i][j]=inf;\n\t\t\t\tfor(int k(0);k<6;k++) {\n\t\t\t\t\tres.ll[i][j]=min(res.ll[i][j],lm[i][k]+lc.lr[j][k]-lc.rr[k][k]);\n\t\t\t\t\tres.rr[i][j]=min(res.rr[i][j],rm[k][i]+rc.lr[k][j]-rc.ll[k][k]);\n\t\t\t\t\tres.lr[i][j]=min(res.lr[i][j],min(lm[i][k]+rm[k][j]-lc.rr[k][k]-rc.ll[k][k],lc.lr[i][k]+rc.lr[k][j]));\n\t\t\t\t}\n\t\t\t}\n\t\treturn res;\n\t}\n\n#define lc (a<<1)\n#define rc ((a<<1)|1)\n\tinline void Calc(const int &a,const int &l) {\n\t\tstatic int sum[6],tmp;\n\t\tfor(int i(0);i<6;i++) sum[i]=val[i][l]+(i?sum[i-1]:0);\n\t\tfor(int i(0);i<6;i++)\n\t\t\tfor(int j(0);j<6;j++) {\n\t\t\t\tif(i<j) tmp=sum[j]-(i?sum[i-1]:0);\n\t\t\t\telse tmp=sum[i]-(j?sum[j-1]:0);\n\t\t\t\tst[a].ll[i][j]=st[a].rr[i][j]=st[a].lr[i][j]=tmp;\n\t\t\t}\n\t}\n\tvoid Build(const int &a=1,const int &l=1,const int &r=n) {\n\t\tif(l==r) return Calc(a,l);\n\t\tint mid=(l+r)>>1;\n\t\tBuild(lc,l,mid);\n\t\tBuild(rc,mid+1,r);\n\t\tst[a]=st[lc]+st[rc];\n\t}\n\tvoid Modify(const int &x,const int &y,const int &k,const int &a=1,const int &l=1,const int &r=n) {\n\t\tif(l==r) {\n\t\t\tval[x][y]=k;\n\t\t\tCalc(a,l);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(y<=mid) Modify(x,y,k,lc,l,mid);\n\t\telse Modify(x,y,k,rc,mid+1,r);\n\t\tst[a]=st[lc]+st[rc];\n\t}\n\tNode Query(const int &left,const int &right,const int &a=1,const int &l=1,const int &r=n) {\n\t\tif(left<=l&&right>=r) return st[a];\n\t\tint mid=(l+r)>>1;\n\t\tif(right<=mid) return Query(left,right,lc,l,mid);\n\t\tif(left>mid) return Query(left,right,rc,mid+1,r);\n\t\treturn Query(left,right,lc,l,mid)+Query(left,right,rc,mid+1,r);\n\t}\n\tinline int Solve(const int &x1,const int &y1,const int &x2,const int &y2) {\n\t\tstatic Node l,mid,r;\n\t\tl=Query(1,y1);\n\t\tmid=Query(y1,y2);\n\t\tr=Query(y2,n);\n\t\tint ans=inf;\n\t\tfor(int i(0);i<6;i++)\n\t\t\tfor(int j(0);j<6;j++)\n\t\t\t\tfor(int k(0);k<6;k++)\n\t\t\t\t\tfor(int p(0);p<6;p++)\n\t\t\t\t\t\tans=min(ans,mid.ll[x1][i]+l.rr[i][j]+mid.lr[j][k]+r.ll[k][p]\n\t\t\t\t\t\t\t+mid.rr[p][x2]-mid.ll[i][i]-mid.ll[j][j]-mid.rr[k][k]-mid.rr[p][p]);\n\t\treturn ans;\n\t}\n#undef lc\n#undef rc\n}\n\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"load.in\",\"r\",stdin);\n#endif\n\tread(n);\n\tfor(int i(0);i<6;i++)\n\t\tfor(int j(1);j<=n;j++)\n\t\t\tread(val[i][j]);\n\tSegmentTree::Build();\n\tread(m);\n\tfor(int i(1);i<=m;i++) {\n\t\tint opt,x1,y1,x2,y2;\n\t\tread(opt);\n\t\tif(opt==1) {\n\t\t\tread(x1,y1,x2);\n\t\t\tSegmentTree::Modify(x1-1,y1,x2);\n\t\t}\n\t\telse if(opt==2) {\n\t\t\tread(x1,y1,x2,y2);\n\t\t\tif(y1>y2) swap(x1,x2),swap(y1,y2);\n\t\t\twrite(SegmentTree::Solve(x1-1,y1,x2-1,y2),'\\n');\n\t\t}\n\t}\n\tflush();\n\treturn 0;\n}\n\n```\n\n# PS\uff1a\n\n\u770b\u4e86\u53e6\u4e00\u4e2adalao\u7684\u9898\u89e3\u624d\u5f97\u5230\u601d\u8def\uff0c\u4f46\u8fd9\u4f4ddalao\u7684\u4ee3\u7801\u88ab\u6211hack\u4e86\uff0c\u65e0\u6cd5\u901a\u8fc7\u4ee5\u4e0b\u6570\u636e\uff1a\n\n```\\\n13\n10000 10000 1     1     1     10000 1     1     1     1     1     1     1    \n10000 10000 10000 10000 1     10000 1     10000 10000 10000 10000 10000 1    \n1     1     1     1     1     10000 1     10000 1     1     1     1     1    \n1     10000 10000 10000 10000 10000 1     10000 1     10000 10000 10000 10000\n1     1     1     1     1     1     1     10000 1     10000 10000 10000 10000\n10000 10000 10000 10000 10000 10000 10000 10000 1     1     10000 10000 10000\n1\n2 1 3 6 10\n```\n\n\u539f\u56e0\u662f\u6ca1\u6709\u8003\u8651\u5de6\u53f3\u90fd\u662f\u56db\u6b21\u8f6c\u5f2f\u7684\u60c5\u51b5\u3002~~\u90a3\u4e48\u53ef\u80fd\u5f88\u591a\u63d0\u4ea4\u90fd\u8fc7\u4e0d\u4e86\u5427\uff0c\u5efa\u8bae\u52a0\u5f3a\u6570\u636e~~\n\n~~\u4f46\u662f\u8ba8\u8bba\u533a\u91cc\u6211hack\u7684\u5e16\u5b50\u628a\u5355\u8bcd\u62fc\u9519\u4e86\uff0c\u5927\u578b\u5904\u5211\u73b0\u573a~~",
        "postTime": 1598621466,
        "uid": 226485,
        "name": "\u67f3\u82cf\u660e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4150 \u3010[WC2009]\u6700\u77ed\u8def\u95ee\u9898\u3011"
    },
    {
        "content": "# \u6700\u77ed\u8def\u95ee\u9898\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4150)\n## \u601d\u8def\n\u8fd9\u9053\u9898\u771f\u7684\u592a\u5999\u4e86\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0$x$\u8fd9\u4e48\u5c0f\uff0c\u6240\u4ee5\u8fd9\u4e00\u5b9a\u662f\u4e2a\u7ebf\u6bb5\u6811\u3002\u90a3\u6211\u4eec\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u5462\uff1f\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4$ll[i][j],rr[i][j],lr[i][j]$\u3002\u8868\u793a\u4ec0\u4e48\u5462\uff1f\u8bbe\u7ebf\u6bb5\u6811\u4e0a\u8fd9\u6bb5\u533a\u95f4\u4e3a$l\\to r$,$ll[i][j]$\u5c31\u662f$(i,l)\\to (j,l)$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c$rr[i][j]$\u5c31\u662f$(i,r)\\to (j,r)$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c$lr[i][j]$\u5c31\u662f$(i,l)\\to (j,r)$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u518d\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u53eb\u505a$lm[i][j],rm[i][j]$\u3002\u6211\u4eec\u5047\u8bbe\u4e2d\u70b9\u4e3a$mid$,\u533a\u95f4\u4e3a$l\\to r$,$lm[i][j]$\u5c31\u662f\u6307\u4ece$(i,l)\\to (j,mid)$\u4f46\u662f\u5fc5\u987b\u7ecf\u8fc7\u53f3\u533a\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c$rm[i][j]$\u5c31\u662f\u6307$(i,mid+1)\\to (j,r)$\u4f46\u662f\u5fc5\u987b\u7ecf\u8fc7\u5de6\u533a\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u5f0f:\n\n$$\nlm[i][j]=\\min\\{ls.lr[i][k]+rs.ll[k][j]+ls.rr[j][j]\\}\n$$\n\n$$\nrm[i][j]=\\min\\{rs.ll[i][i] + ls.rr[i][k] + rs.lr[k][j]\\}\n$$\n\n\u5176\u4e2d$ls,rs$\u5c31\u662f\u5206\u522b\u8868\u793a\u5de6\u53f3\u533a\u95f4\u3002\n\n\u90a3\u6211\u4eec\u5982\u4f55\u5f97\u5230\u5927\u533a\u95f4\u7684\u503c\u5462\uff1f\u5176\u5b9e\u4e0d\u96be\u5217\u51fa\u8f6c\u79fb\u5f0f:\n\n$$\nll[i][j]=\\min\\{ls.ll[i][j],lm[i][k]+ls.lr[j][k]-ls.rr[k][k]\\}\n$$\n\n$$\nrr[i][j]=\\min\\{rs.rr[i][j],rm[k][i]+rs.lr[k][j]-rs.ll[k][k]\\}\n$$\n\n$$\nlr[i][j]=\\min\\{lm[i][k]+rm[k][j]-ls.rr[k][k]-rs.ll[k][k],ls.lr[i][k]+rs.lr[k][j]\\}\n$$\n\n\u90a3\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u89e3\u51b3\u6389\u5355\u70b9\u4fee\u6539\u548c\u5efa\u6811\u4e86\u3002\u90a3\u6211\u4eec\u5982\u4f55\u67e5\u8be2\u5462\uff1f\n\n\u5047\u8bbe\u5f53\u524d\u6211\u4eec\u9700\u8981\u67e5\u8be2$(sx,sy)\\to (tx,ty)$\u7684\u6700\u77ed\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6c42\u51fa$ls,mid,rs$,\u5206\u522b\u8868\u793a$1\\to sy,sy\\to ty,ty\\to n$\u8fd9\u4e09\u6bb5\u533a\u95f4\u7684$ll,rr,lr$\u3002\n\n\n\u6211\u4eec\u518d\u8bbe$t1,t2,t3$\n\n$$\nt1=\\min\\{mid.ll[sx][i]+ls.rr[i][j]+mid.lr[j][tx]-val[i][sy]-val[j][sy]\\}\n$$\n\n\u5728\u56fe\u4e0a\u8868\u793a\u51fa\u6765\u5c31\u662f\u8fd9\u6837\u7684:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pxa7t27g.png)\n\n\u540c\u7406\u53ef\u5f97:\n\n$$\nt2=\\min\\{mid.lr[sx][i]+rs.ll[i][j]+mid.rr[j][tx]-val[i][ty]-val[j][ty]\\}\n$$\n\n$$\nt3=\\min\\{ls.rr[sx][i]+mid.lr[i][j]+rs.ll[j][tx]-val[i][sy]-val[j][ty]\\}\n$$\n\n$t3$\u5728\u56fe\u4e0a\u8868\u793a\u51fa\u6765\u5c31\u662f\u8fd9\u6837\u7684:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/28covyd6.png)\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f$\\min\\{mid.lr[sx][tx],t1,t2,t3\\}$\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7ec8\u4e8e\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define INF 1061109567\n#define MAXN 100005\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nint n,m;\n\nstruct Node{\n\tint ll[6][6],rr[6][6],lr[6][6];\n\tNode(){\n\t\tmemset (ll,0x3f,sizeof (ll));\n\t\tmemset (rr,0x3f,sizeof (rr));\n\t\tmemset (lr,0x3f,sizeof (lr));\n\t}\n\tbool empty()const{\n\t\treturn ll[0][0] == INF;\n\t}\n}tree[MAXN << 2];\n\nNode operator + (const Node &ls,const Node &rs){\n\tstatic int lm[6][6],rm[6][6];\n\tif (ls.empty()) return rs;\n\tif (rs.empty()) return ls;\n\tmemset (lm,0x3f,sizeof (lm));\n\tmemset (rm,0x3f,sizeof (rm));\n\tNode a;\n\tfor (Int k = 0;k < 6;++ k)\n\t\tfor (Int i = 0;i < 6;++ i)\n\t\t\tfor (Int j = 0;j < 6;++ j){\n\t\t\t\tlm[i][j] = min (lm[i][j],ls.lr[i][k] + rs.ll[k][j] + ls.rr[j][j]);\n\t\t\t\trm[i][j] = min (rm[i][j],rs.ll[i][i] + ls.rr[i][k] + rs.lr[k][j]);\n\t\t\t}\n\tfor (Int i = 0;i < 6;++ i)\n\t\tfor (Int j = 0;j < 6;++ j){\n\t\t\ta.ll[i][j] = ls.ll[i][j];\n\t\t\ta.rr[i][j] = rs.rr[i][j];\n\t\t\tfor (Int k = 0;k < 6;++ k){\n\t\t\t\ta.ll[i][j] = min (a.ll[i][j],lm[i][k] + ls.lr[j][k] - ls.rr[k][k]);\n\t\t\t\ta.rr[i][j] = min (a.rr[i][j],rm[k][i] + rs.lr[k][j] - rs.ll[k][k]);\n\t\t\t\ta.lr[i][j] = min (a.lr[i][j],min (lm[i][k] + rm[k][j] - ls.rr[k][k] - rs.ll[k][k],ls.lr[i][k] + rs.lr[k][j]));\n\t\t\t}\n\t\t}\n\treturn a;\n}\n\nint val[6][MAXN];\n\nvoid Init (int i,int l){\n\tint sum[6];\n\tfor (Int j = 0;j < 6;++ j) sum[j] = (j ? sum[j - 1] : 0) + val[j][l];\n\tfor (Int j = 0;j < 6;++ j)\n\t\tfor (Int k = 0;k < 6;++ k)\n\t\t\ttree[i].ll[j][k] = tree[i].rr[j][k] = tree[i].lr[j][k] = \n\t\t\tsum[max (j,k)] - (min (j,k) ? sum[min (j,k) - 1] : 0);\n}\n\nvoid build (int i,int l,int r){\n\tif (l == r) return Init (i,l);\n\tint mid = (l + r) >> 1;\n\tbuild (i << 1,l,mid),build (i << 1 | 1,mid + 1,r);\n\ttree[i] = tree[i << 1] + tree[i << 1 | 1];\n}\n\nvoid update (int i,int l,int r,int pos){\n\tif (l == r) return Init (i,l);\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) update (i << 1,l,mid,pos);\n\telse update (i << 1 | 1,mid + 1,r,pos);\n\ttree[i] = tree[i << 1] + tree[i << 1 | 1]; \n}\n\nNode query (int i,int l,int r,int tl,int tr){\n\tif (l >= tl && r <= tr) return tree[i];\n\tint mid = (l + r) >> 1;\n\tif (tr <= mid) return query (i << 1,l,mid,tl,tr);\n\telse if (tl > mid) return query (i << 1 | 1,mid + 1,r,tl,tr);\n\telse return query (i << 1,l,mid,tl,tr) + query (i << 1 | 1,mid + 1,r,tl,tr);\n}\n\nint query (int sx,int sy,int tx,int ty){\n\tNode ls = query (1,1,n,1,sy);\n\tNode md = query (1,1,n,sy,ty);\n\tNode rs = query (1,1,n,ty,n);\n\tint Ans = md.lr[sx][tx];\n\tfor (Int i = 0;i < 6;++ i)\n\t\tfor (Int j = 0;j < 6;++ j){\n\t\t\tAns = min (Ans,md.ll[sx][i] + ls.rr[i][j] + md.lr[j][tx] - val[i][sy] - val[j][sy]);\n\t\t\tAns = min (Ans,md.lr[sx][i] + rs.ll[i][j] + md.rr[j][tx] - val[i][ty] - val[j][ty]);\n\t\t\tAns = min (Ans,ls.rr[sx][i] + md.lr[i][j] + rs.ll[j][tx] - val[i][sy] - val[j][ty]);\n\t\t}\n\treturn Ans;\n}\n\nsigned main()\n{\n\tread (n);\n\tfor (Int i = 0;i < 6;++ i)\n\t\tfor (Int j = 1;j <= n;++ j)\n\t\t\tread (val[i][j]);\n\tbuild (1,1,n);\n\tread (m);\n\twhile (m --){\n\t\tint opt;\n\t\tread (opt);\n\t\tif (opt == 1){\n\t\t\tint x,y,z;\n\t\t\tread (x,y,z);\n\t\t\tx --;\n\t\t\tval[x][y] = z;\n\t\t\tupdate (1,1,n,y);\n\t\t}\n\t\telse{\n\t\t\tint x,y,z,w;\n\t\t\tread (x,y,z,w);\n\t\t\tx --,z --;\n\t\t\tif (y > w) swap (x,z),swap (y,w);\n\t\t\twrite (query (x,y,z,w)),putchar ('\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1586657535,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4150 \u3010[WC2009]\u6700\u77ed\u8def\u95ee\u9898\u3011"
    }
]