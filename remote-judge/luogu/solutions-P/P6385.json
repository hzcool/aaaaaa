[
    {
        "content": "\u7ec8\u4e8e\u6709\u4e00\u4e2a\u4e0d\u662f Ynoi \u7684\u6708\u8d5b F \u9898\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u611f\u52a8\n\n---\n\n\u82e5\u65e0\u7279\u522b\u8bf4\u660e\uff0c$i$\uff0c$j$ \u548c $k$ \u8868\u793a\u5c0f M \u7684\u4f4d\u7f6e\uff0c\u5c0f B \u7684\u4f4d\u7f6e\u548c\u5c71\u9876\u7684\u4f4d\u7f6e\u3002\u64cd\u4f5c\u4e32\u8868\u793a\u8fdb\u884c\u64cd\u4f5c\u4e09\u65f6\u7684 $S_{i \\cdots j}$\u3002\n\n\u8fc7\u4e8e\u663e\u7136\u7684\u7ed3\u8bba\u4e0d\u8bf4\u660e\u4e86\uff0c~~\u9700\u8981\u8be6\u7ec6\u9898\u89e3\u8bf7\u62a5\u8bb2\u8bc4~~\n\n#### \u7ed3\u8bba -1\n\u5728\u6240\u6709\u5408\u6cd5\u7684 $j$ \u4e2d\uff0c\u9009\u53d6\u6700\u5927\u7684\u4f5c\u4e3a\u5c0f B \u7684\u521d\u59cb\u4f4d\u7f6e\u4e00\u5b9a\u4e0d\u52a3\u3002\n\n#### \u7ed3\u8bba 0\n\u4efb\u4f55\u65f6\u5019\uff0c\u5047\u5982\u6ee1\u8db3 $i=j$\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u6301 $i=j$ \u4e00\u5b9a\u4e0d\u52a3\u3002\n\n#### \u7ed3\u8bba 1\n\n\u5047\u5982\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u5728\u8fdb\u884c\u7b2c\u4e00\u6b21\u64cd\u4f5c\u4e09\u65f6\uff0c\u64cd\u4f5c\u4e32\u4e0d\u662f\u7ed9\u5b9a\u7684 $S_{i \\cdots j}$ \u7684\u5b50\u4e32\uff0c\u4e14\u4f18\u4e8e\u4e00\u5207\u4e0d\u662f\u8fd9\u6837\u7684\u65b9\u6848\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6848\u4e00\u5b9a\u4e0d\u4f18\u4e8e\u5148\u4f7f $i=j$\uff0c\u7136\u540e\u518d\u8fdb\u884c\u64cd\u4f5c\u3002\n\n#### \u8bc1\u660e 1\n\n\u6ce8\u610f\u5230\uff0c\u5728\u8fd9\u79cd\u65b9\u6848\u4e2d\uff0c\u4f60\u4e00\u5b9a\u5728\u7b2c\u4e00\u6b21\u64cd\u4f5c\u4e09\u4e4b\u524d\u4f7f\u7528\u4e86 $i-1$ \u6216\u8005 $j+1$\u3002\n\n\u5047\u5982\u4f60\u4f7f\u7528\u4e86\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5e76\u4e14\u5728\u7b2c\u4e00\u6b21\u64cd\u4f5c\u4e09\u65f6\u7684 $i,j$ \u4e0e\u7ed9\u5b9a\u7684 $i,j$ \u6709\u4ea4\uff0c\u90a3\u4e48\u4f60\u628a\u4e0a\u8ff0\u64cd\u4f5c\u79fb\u52a8\u5230\u8fd9\u6b21\u64cd\u4f5c\u4e09\u4e4b\u540e\u540c\u6837\u5408\u6cd5\uff0c\u53ef\u4ee5\u53d8\u4e3a\u4e0d\u662f\u8fd9\u6837\u7684\u65b9\u6848\u3002\n\n\u56e0\u4e3a\u8fd9\u6837\u8fdb\u884c\u64cd\u4f5c\u4e09\u65f6\u7684\u64cd\u4f5c\u4e32\u662f\u539f\u6765\u7684\u64cd\u4f5c\u4e32\u7684\u5b50\u4e32\uff0c\u56e0\u6b64\u8fd9\u4e2a\u64cd\u4f5c\u4e09\u4e5f\u5408\u6cd5\uff0c\u7136\u540e\u4f4d\u7f6e\u7684\u5dee\u522b\u53ef\u4ee5\u901a\u8fc7\u5728\u4e4b\u540e\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\u6765\u4fee\u6b63\u3002\n\n\u5047\u5982\u64cd\u4f5c\u4e32\u4e0e\u8f93\u5165\u7684 $S_{i \\cdots j}$ \u6ca1\u6709\u4ea4\uff0c\u4f46\u591a\u4e8e\u4e00\u4e2a\u5b57\u7b26\uff0c\u64a4\u9500\u6389\u82e5\u5e72\u4e2a\u4e0a\u8ff0\u64cd\u4f5c\u4e00\u5b9a\u53ef\u4ee5\u8ba9\u5b83\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u628a\u64a4\u9500\u6389\u7684\u8fd9\u4e9b\u64cd\u4f5c\u79fb\u52a8\u5230\u6700\u540e\u4e00\u5b9a\u4e5f\u5408\u6cd5\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u5f52\u7eb3\u5730\u63a8\u5e7f\u5230\u4efb\u610f\u4e00\u6b21\u64cd\u4f5c\u4e09\u3002\n\n---\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5904\u7406\u4e24\u79cd\u60c5\u51b5\uff1a\u4e0d\u4f7f\u7528\u64cd\u4f5c\u4e09\uff0c\u4ee5\u53ca\u5148\u901a\u8fc7\u67d0\u4e9b\u64cd\u4f5c\u4f7f\u5f97 $i=j$ \u7136\u540e\u4fdd\u6301\u8fd9\u6837\u3002\n\n\u4e0d\u4f7f\u7528\u64cd\u4f5c\u4e09\u65f6\uff0c\u7b54\u6848\u4e3a $|i-k|$\u3002\n\n\u8003\u8651\u5355\u5b57\u7b26\u7684\u60c5\u51b5\uff1a\u8bb0 $dis_{i,j}$ \u8868\u793a\u4ece $j$ \u5230\u4efb\u610f\u4e00\u4e2a $x$ \u4f7f\u5f97 $S_x = i$ \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8003\u8651\u5982\u4f55\u8ba1\u7b97\uff0c\u679a\u4e3e\u5b57\u7b26 $i$ \uff0c\u7136\u540e\u5c06\u6240\u6709\u5b57\u7b26\u4e3a $i$ \u7684\u4f4d\u7f6e\u52a0\u5165\u961f\u5217\uff0c\u8fdb\u884c\u591a\u6e90 bfs \u5373\u53ef\u3002\u66b4\u529b\u5b9e\u73b0\u4f1a\u5efa\u51fa $O(n^2)$ \u6761\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4f18\u5316\u5efa\u56fe\u6280\u5de7\uff1a\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u5efa\u4e00\u4e2a\u865a\u70b9\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u5411\u5bf9\u5e94\u5b57\u7b26\u8fde $1$ \u8fb9\uff0c\u5b57\u7b26\u5411\u4f4d\u7f6e\u8fde $0$ \u8fb9\uff0c\u8dd1 01-bfs\u3002\u4e5f\u6709\u7b49\u4ef7\u7684\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u4f18\u5316\u5efa\u56fe\u7684\u65b9\u6cd5\u3002\n\n\u7136\u540e\uff0c\u679a\u4e3e\u7b2c\u4e00\u6b21\u64cd\u4f5c\u4e09\u65f6\u7684\u5b57\u7b26 $c$\u3002\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\uff0c$c$ \u5728 $S_{i \\cdots j}$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u53ef\u4ee5\u7528 $j-i+dis_{c,k}+1$ \u66f4\u65b0\u7b54\u6848\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f $c$ \u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u6b64\u65f6\u7528 $j-i+ \\min(dis_{c,i},dis_{c,j})+dis_{c,k}+1$ \u66f4\u65b0\u7b54\u6848\u3002\n\n---\n\n\u5728\u540e\u9762\uff0c\u6211\u4eec\u53ea\u8003\u8651\uff0c\u8fdb\u884c\u64cd\u4f5c\u4e09\u65f6\u7684\u64cd\u4f5c\u4e32\u662f $S_{i \\cdots j}$ \u7684\u5b50\u4e32\u7684\u60c5\u51b5\u3002\u5176\u4ed6\u60c5\u51b5\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86\u3002\n\n### \u7ed3\u8bba 2\n\n\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u89e3\u7684\u65b9\u6848\u662f\uff0c\u5148\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u4e00\u548c\u64cd\u4f5c\u4e8c\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u4e09\uff0c\u7136\u540e\u518d\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u4e00\u3002\n\n\u7b80\u8981\u8bf4\u660e\u4e00\u4e0b\uff1a\u8003\u8651\u5047\u5982\u4f60\u5728\u4e24\u6b21\u64cd\u4f5c\u4e09\u4e4b\u95f4\u8fdb\u884c\u4e86\u4e00\u6b21\u5176\u4ed6\u64cd\u4f5c\uff0c\u5c06\u8fd9\u4e2a\u64cd\u4f5c\u79fb\u5230\u6240\u6709\u64cd\u4f5c\u4e09\u7684\u524d\u9762\u4e5f\u662f\u5408\u6cd5\u7684\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6240\u6709\u64cd\u4f5c\u4e09\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u663e\u7136\u53ef\u4ee5\u53ea\u8fdb\u884c\u4e00\u6b21\u3002\n\n\u56e0\u6b64\uff1a\u8fd9\u79cd\u60c5\u51b5\u662f\uff0c\u5148\u6536\u7f29\u6210\u4e00\u6bb5\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u4e09\uff0c\u7136\u540e\u5f52\u4f4d\u3002\n\n---\n\n\u6211\u4eec\u8003\u8651\u64cd\u4f5c\u4e09\u4e4b\u540e $i$ \u4e0e $k$ \u7684\u4f4d\u7f6e\u5173\u7cfb\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f $i<k$\u3002\u53d1\u73b0\u8fd9\u6837\u4e00\u5b9a\u4e0d\u4f18\u4e8e\u8ba9 $i=k$\u3002\n\n\u56e0\u4e3a\uff0c\u8fd9\u6837\u64cd\u4f5c\u4e4b\u540e\u9700\u8981\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u4f7f $i+1$\uff0c\u800c\u5982\u679c\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u653e\u5728\u64cd\u4f5c\u4e09\u4e4b\u524d\u5b8c\u6210\uff0c\u4e5f\u662f\u5408\u6cd5\u7684\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f $i \\geq k$\u3002\n\n\u628a\u7b54\u6848\u5199\u51fa\u6765\uff0c\u7136\u540e\u53bb\u6389\u5e38\u6570\uff0c\u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5176\u5b9e\u662f\uff0c\u5bf9\u4e8e\u6240\u6709\u5728 $k$ \u4e4b\u540e\u51fa\u73b0\u8fc7\u7684 $[L,R]$ \uff0c\u6ee1\u8db3 $S_{L \\cdots R}$ \u5728 $S_{i \\cdots j}$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u6700\u5c0f\u5316 $2L-R$\u3002\n\n### \u66b4\u529b1\n\n\u56fa\u5b9a $L$ \u65f6\uff0c\u663e\u7136 $R$ \u5e94\u8be5\u5c3d\u91cf\u5927\u3002\u8003\u8651\u679a\u4e3e $L$\uff0c\u5c31\u662f\u6c42\u6700\u5927\u7684 $R$ \u4f7f\u5f97 $S_{L \\cdots R}$ \u5728 $S_{i \\cdots j}$ \u4e2d\u51fa\u73b0\u8fc7\u3002\u8fd9\u4e2a\u6709\u5f88\u591a\u79cd SAM\uff0cSA\uff0c\u540e\u7f00\u6811\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u79cd\u3002\n\n\u4e8c\u5206 $R$\uff0c\u5373\u5224\u65ad $S_{L \\cdots R}$ \u662f\u5426\u5b58\u5728\u4e8e $S_{i \\cdots j}$ \u4e2d\u3002\u5bf9 $S$ \u5efa\u540e\u7f00\u6811\uff0c\u500d\u589e\u5b9a\u4f4d\u51fa $S_{L \\cdots R}$\uff0c\u7136\u540e\u6c42\u5bf9\u5e94\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u662f\u5426\u5b58\u5728\u5728 $[i+R-L,j]$ \u4e2d\u7684\u540e\u7f00\u5373\u53ef\u3002\u8fd9\u4e00\u6b65\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u7b97\u4e0a\u679a\u4e3e $L$\uff0c\u603b\u590d\u6742\u5ea6 $O(nq\\log^2n)$\u3002\u7136\u800c\u6807\u7b97\u4f7f\u7528\u7684\u662f\u7565\u4e3a\u590d\u6742\u7684 $O(nq\\log n)$ \u7684\u79bb\u7ebf LCT \u505a\u6cd5\u3002\n\n### \u66b4\u529b2\n\n\u56fa\u5b9a\u957f\u5ea6\uff0c\u5219 $L$ \u5e94\u5c3d\u91cf\u5c0f\u3002\n\n\u9996\u5148\u8003\u8651 $k$ \u56fa\u5b9a\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u6c42\u51fa\u7684 $j$ \u662f\u4e24\u4e2a\u540e\u7f00\u7684 LCP\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$S_{i \\cdots j}$ \u662f\u540e\u7f00\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u662f SAM \u4e0a\u7684\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u3002\n\n\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5b50\u6811\u4e2d\u7684\u6240\u6709\u5728 $k$ \u4e4b\u540e\u6700\u5de6\u7684\u540e\u7f00\u3002\u6211\u4eec\u5728\u540e\u7f00\u6811\u4e0a dp\uff0c\u8bbe $f_i$ \u4e3a\u8282\u70b9 $i$ \u4ee3\u8868\u7684\u5b50\u4e32\u7684\u6240\u6709\u5b50\u4e32\u7684 $2L-R$ \u7684\u6700\u5c0f\u503c\uff0c$g_i$ \u8868\u793a\u8282\u70b9 $i$ \u7684\u5b50\u6811\u4e2d\u7684 $k$ \u4e4b\u540e\u7684\u6700\u5de6\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\uff0c$len_i$ \u8868\u793a\u8282\u70b9 $i$ \u4ee3\u8868\u7684\u4e32\u7684\u957f\u5ea6\u3002\n\n\u6709 $f_i = \\min(f_{fa_i},f_{link_i},g_i - len_i -1)$ \uff0c\u5176\u4e2d $fa_i$ \u8868\u793a\u8282\u70b9 $i$ \u7684\u7236\u8282\u70b9\uff0c$link_i$ \u8868\u793a\u8282\u70b9 $i$ \u7684\u540e\u7f00\u94fe\u63a5\u6307\u5411\u7684\u8282\u70b9\u3002\u5728\u540e\u7f00\u6811\u4e0a\u500d\u589e\u5b9a\u4f4d\u51fa $S_{i \\cdots j}$ \u67e5\u8be2 dp \u503c\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u6837\u53ea\u80fd\u627e\u5230\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u5185\u6700\u957f\u4e32\u7684\u7b54\u6848\uff0c\u6613\u77e5\u8fd9\u4e0d\u52a3\u3002\n\n\u5bf9\u6bcf\u4e2a $k$ \u505a\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\u76f4\u63a5\u505a\u590d\u6742\u5ea6\u4e3a \u590d\u6742\u5ea6 $O(nq)$\u3002\n\n### \u4e0d\u66b4\u529b\u4e86\n\n\u76f8\u4fe1\u5404\u4f4d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u9009\u624b\u770b\u5230\u8fd9\u91cc\u65f6\uff0c\u6b63\u89e3\u5df2\u7ecf\u547c\u4e4b\u6b32\u51fa\u4e86\u3002\n\n\u8003\u8651\u7528\u4e0a\u8ff0\u4e24\u4e2a\u66b4\u529b\u6765\u644a\u5e73\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u3002\u8003\u8651\u6309 $k$ \u4ece\u540e\u5f80\u524d\u626b\uff0c\u6bcf\u9694 $B$ \u4e2a\u4f4d\u7f6e\u91cd\u65b0 dp \u4e00\u6b21\uff0c\u7136\u540e\u5bf9\u4e8e\u5230\u4e0a\u4e00\u6b21\u91cd\u6784\u4e2d\u95f4\u7684\u5c0f\u5757\u90e8\u5206\u7528\u7b2c\u4e00\u4e2a\u66b4\u529b\u5904\u7406\u3002\n\n\u6839\u636e\u7b2c\u4e00\u4e2a\u66b4\u529b\u7684\u590d\u6742\u5ea6\uff0c\u53d6\u9002\u5f53\u7684 $B$ \u53ef\u4ee5\u5f97\u5230 $O(n\\sqrt{n \\log n}) \\sim O(n\\sqrt n \\log n)$ \u7684\u505a\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u70b9\u3002\n\nstd \u5199\u7684\u662f $O(n\\sqrt{n \\log n} + n \\Sigma)$ \u7684\u505a\u6cd5\u3002\n\n---\n\n\u4e0b\u9762\u662f std\uff0c\u9700\u8981\u53ef\u4ee5\u81ea\u53d6\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 30005\nconst int B=40;\nconst int inf=1e8;\nint n,q,ch[maxn<<1][2],anc[maxn<<1][17]={0},\ndepth[maxn<<1]={0},rank[maxn],tail=0,rk[maxn<<1],dp[maxn<<1],min[maxn<<1],tl,\nans[maxn],d[maxn<<1],vis[30],dis[27][maxn],pre[maxn<<1],fa[maxn<<1],max[maxn<<1],tag[maxn<<1],\ncnt[26][maxn];\nstd::vector<int>rc[27];\nchar s[maxn];\nstruct Q{int i,j,p,id;}qr[maxn];\nint cmp1(Q a,Q b){return a.p>b.p;}\nint cmp(int a,int b){\n\tif (depth[a]!=depth[b])return depth[a]<depth[b];\n\treturn d[a]<d[b];\n}struct Q2{\n\tint l,r,p,id,k;\n}q1[maxn*B];\nint cmp2(Q2 a,Q2 b){return a.l>b.l;}\nvoid cover(int x,int y){tag[x]=std::min(tag[x],y);max[x]=std::min(max[x],y);}\nvoid pushdown(int x){\n\tif(ch[x][0])cover(ch[x][0],tag[x]);\n\tif(ch[x][1])cover(ch[x][1],tag[x]);\n\ttag[x]=inf;\n}\nint not_root(int x) {return ch[fa[x]][0]==x||ch[fa[x]][1]==x;}\nvoid rotate(int x) {\n    int f=fa[x],g=fa[f],l=ch[f][1]==x,c=ch[x][l^1];\n    if (not_root(f)) ch[g][ch[g][1]==f]=x;\n    ch[x][l^1]=f;ch[f][l]=c;\n    if (c) fa[c]=f;\n    fa[f]=x;fa[x]=g;\n}\nvoid spaly(int x) {\n\tstd::stack<int>stk;\n\tint u=x;stk.push(u);while(not_root(u)){stk.push(fa[u]);u=fa[u];}\n\twhile(!stk.empty()){pushdown(stk.top());stk.pop();}\n    while(not_root(x)){\n    \trotate(x); \n\t\tif (not_root(fa[x])&&not_root(x))\n\t\t\trotate((ch[fa[x]][1]==x)!=(ch[fa[fa[x]]][1]==fa[x])?fa[x]:x);\n    }\n}\nstruct suffixTree {\n\tint link[maxn<<1],len[maxn<<1],start[maxn<<1],s[maxn<<1],tail,n,rem,now,ch[maxn<<1][27];\n\tsuffixTree ():tail(1),n(0),rem(0),now(1) {len[0]=inf;}\n\tint newnode(int st,int le){\n\t\tlink[++tail]=1;start[tail]=st;len[tail]=le;return tail;\n\t}\n\tvoid extend(int x){\n\t\ts[++n]=x;rem++;\n\t\tfor (int last=1;rem;){\n\t\t\twhile (rem>len[ch[now][s[n-rem+1]]]) rem-=len[now=ch[now][s[n-rem+1]]];\n\t\t\tint &v=ch[now][s[n-rem+1]];int c=s[start[v]+rem-1];\n\t\t\tif (!v||x==c){\n\t\t\t\tlink[last]=now;last=now;\n\t\t\t\tif (!v) v=newnode(n-rem+1,inf);\n\t\t\t\telse break;\n\t\t\t}else{\n\t\t\t\tint u=newnode(start[v],rem-1);\n\t\t\t\tch[u][c]=v;ch[u][x]=newnode(n,inf);\n\t\t\t\tstart[v]+=rem-1;len[v]-=rem-1;\n\t\t\t\tlink[last]=v=u;last=u;\n\t\t\t} if (now==1) rem--;else now=link[now];\n\t\t}\n\t}\n}sft;\n\nvoid dfs(int u,int f){\n\tanc[u][0]=f;\n\tfor (int i=1;i<=15;++i)anc[u][i]=anc[anc[u][i-1]][i-1];\n\tint len=std::min(sft.len[u],n-sft.start[u]+1),isleaf=1;\n\tpre[u]=fa[u]=f;max[u]=tag[u]=inf;\n\tdepth[u]=depth[f]+len;d[u]=d[f]+1;\n\tfor (int i=0;i<=26;++i)\n\t\tif (sft.ch[u][i])dfs(sft.ch[u][i],u),isleaf=0;\n\tif (isleaf)\n\t\trank[n-depth[u]+1]=u;\n\trk[++tl]=u;\n}\n\nvoid access(int x,int w) {\n\tfor (int y=0;x;x=fa[y=x])spaly(x),ch[x][1]=y,cover(x,w);\n}\n\nint query(int x,int r){\n\tif(!x)return 0;\n\tpushdown(x);\n\tif(max[x]<r-depth[pre[x]]+1){\n\t\tint d=query(ch[x][1],r);\n\t\tif(d)return d;else return std::min(depth[x],r-max[x]+1);\n\t}return query(ch[x][0],r);\n}\n\nint find(int x,int r){\n\tfor(int y=0;x!=1&&x;x=fa[y=x]){\n\t\tspaly(x);ch[x][1]=0;\n\t\tint u=x;while(ch[u][0]){pushdown(u);u=ch[u][0];}\n\t\tif(max[u]<r-depth[pre[u]]+1)\n\t\t\treturn query(x,r);\n\t\tch[x][1]=y;\n\t}return 0;\n}\n\nvoid rebuild(int l){\n\tstd::memset(dp,63,sizeof(dp));\n\tfor(int i=l;i<=n;++i)min[rank[i]]=i;\n\tfor(int i=tl;i>=1;i--)min[anc[rk[i]][0]]=std::min(min[rk[i]],min[anc[rk[i]][0]]);\n\tfor(int j=2;j<=tl;++j){\n\t\tint i=rk[j];\n\t\tdp[i]=min[i]-depth[i]+1;\n\t\tdp[i]=std::min(dp[i],std::min(dp[anc[i][0]],sft.link[i]!=1?dp[sft.link[i]]:inf));\n\t}\n} \nint locate(int l,int r){\n\tint u=rank[l];\n\tfor (int i=15;i>=0;i--)\n\t\tif (depth[anc[u][i]]>=(r-l+1))u=anc[u][i];\n\treturn u;\n}int lca(int u,int v){\n\tif (d[u]<d[v])std::swap(u,v);\n\tfor(int i=15;i>=0;i--)if(d[anc[u][i]]>=d[v])u=anc[u][i];\n\tif (u==v)return u;\n\tfor(int i=15;i>=0;i--)if(anc[u][i]!=anc[v][i])u=anc[u][i],v=anc[v][i];\n\treturn anc[u][0];\n}\t\nvoid bfs(int c){\n\tstd::queue<int>q;\n\tstd::memset(vis,0,sizeof(vis));\n\tstd::memset(dis[c],63,sizeof(dis[c]));\n\tfor(int v:rc[c]){q.push(v);dis[c][v]=0;}\n\tvis[c]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();int d=s[x]-'a';q.pop();\n\t\tif(!vis[d]){\n\t\t\tvis[d]=1;\n\t\t\tfor(int v:rc[d])\n\t\t\t\tif(dis[c][v]>n){dis[c][v]=dis[c][x]+1;q.push(v);}\n\t\t}if (x>1&&dis[c][x-1]>n){dis[c][x-1]=dis[c][x]+1;q.push(x-1);}\n\t\tif(x<n&&dis[c][x+1]>n){dis[c][x+1]=dis[c][x]+1;q.push(x+1);}\n\t}\n}\nvoid prework(){\n\tstd::memset(min,63,sizeof(min));\n\tsft.link[1]=1;dfs(1,0);std::sort(rk+1,rk+tl+1,cmp);\n\tfor(int i=1;i<n;++i)sft.link[rank[i]]=rank[i+1];\n\tfor(int i=1;i<=n;++i)rc[s[i]-'a'].push_back(i);\n\tfor(int i=0;i<26;++i)bfs(i);\n}\nint corner_cases(int i,int j,int p){\n\tint ans=abs(i-p);\n\tfor(int c=0;c<26;++c){\n\t\tans=std::min(ans,j-i+dis[c][i]+dis[c][p]+1);\n\t\tans=std::min(ans,j-i+dis[c][j]+dis[c][p]+1);\n\t\tif(cnt[c][j]-cnt[c][i-1])ans=std::min(ans,j-i+dis[c][p]+1);\n\t}return ans;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tscanf(\"%s\",s+1);\n\tfor (int i=1;i<=n;++i){\n\t\tsft.extend(s[i]-'a');\n\t\tfor(int c=0;c<26;++c)cnt[c][i]=cnt[c][i-1];\n\t\tcnt[s[i]-'a'][i]++;\n\t}\n\tsft.extend(26);prework();\n\tfor(int i=1;i<=q;++i){\n\t\tscanf(\"%d%d%d\",&qr[i].i,&qr[i].j,&qr[i].p);qr[i].id=i;\n\t\tint len=depth[lca(rank[qr[i].i],rank[qr[i].j])];\n\t\tqr[i].j=qr[i].i+len-1;\n\t}std::sort(qr+1,qr+q+1,cmp1);\n\tint cnt=0,last=n,p=0;\n\trebuild(n);\n\tfor(int i=n;i>=1;--i){\n\t\tcnt++;\n\t\tif (cnt>B){rebuild(i);last=i;cnt=0;}\n\t\twhile(p<q&&qr[p+1].p==i){\n\t\t\t++p;\n\t\t\tans[qr[p].id]=\n\t\t\tstd::min(qr[p].j-qr[p].i+1+dp[locate(qr[p].i,qr[p].j)]-qr[p].p,\n\t\t\tcorner_cases(qr[p].i,qr[p].j,qr[p].p));\n\t\t\tfor(int j=i;j<last;++j){\n\t\t\t\tq1[++tail].l=qr[p].i;q1[tail].r=qr[p].j;q1[tail].p=j;\n\t\t\t\tq1[tail].id=qr[p].id;\n\t\t\t\tq1[tail].k=j-i+qr[p].j-qr[p].i+2;\n\t\t\t}\n\t\t}\n\t}std::sort(q1+1,q1+tail+1,cmp2);\n\tp=0;\n\tfor(int i=n;i>=1;--i){\n\t\taccess(rank[i],i);\n\t\twhile(p<tail&&q1[p+1].l==i){\n            ++p;int d=find(rank[q1[p].p],q1[p].r);\n\t\t\tif(d)ans[q1[p].id]=std::min(ans[q1[p].id],q1[p].k-d);\n        }\n\t}\n\tfor(int i=1;i<=q;++i)ans[qr[i].id]+=n-qr[i].j; \n\tfor(int i=1;i<=q;++i)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1586952858,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6385 \u3010\u300eMdOI R2\u300fLittle Goth\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u7eaa\u5ff5\u6211\u901d\u53bb\u7684\u4e00\u4e0a\u5348 & \u4e00\u665a\u4e0a\u5f53\u7136\u8981\u6c34\u9898\u89e3\u5566\uff5e\n\n~~EA \u9e3d\u9e3d\u7684\u795e\u4ed9\u9898\uff0c\u4e0b\u9762\u7684\u9898\u89e3\u57fa\u672c\u4e0a\u6284\u81ea\u5b98\u65b9\u9898\u89e3\u3002~~\n\n\u8bbe $r$ \u4e3a\u9898\u8bbe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u7684 $r$\uff0c\u9996\u5148 $j$ \u5fc5\u7136\u53d6 $r$ \u5904\uff0c\u8fd9\u662f\u56e0\u4e3a\u53d6 $j'$ \u5904\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\u4e3a\u4ece $r$ \u4e0d\u65ad\u64cd\u4f5c $2$ \u5f97\u5230 $(i,j')$\uff0c\u5bb9\u6613\u53d1\u73b0\u4e24\u8005\u4ee3\u4ef7\u76f8\u540c\u3002\u5176\u6b21\uff0c\u6211\u4eec\u77e5\u9053\u7b54\u6848\u7684\u4e0b\u754c\u4e3a $L-j+|k-i|$\n\n\u6211\u4eec\u79f0\u64cd\u4f5c $3$ \u4e3a\u4f20\u9001\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bc1\u660e\uff1a\n\n- \u6027\u8d28 $1$ \uff1a\u82e5\u5f53\u524d\u6709 $i=j$\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u4fdd\u6301 $i=j$\n\n\u6ce8\u610f\u5230 $i=j$ \u65f6\u64cd\u4f5c $3$ \u7684\u9650\u5236\u6700\u677e\uff0c\u5176\u6b21\uff0c\u6211\u4eec\u53d1\u73b0\u4f7f\u5f97 $i\\ne j$ \u7684\u64cd\u4f5c\u53ef\u4ee5\u88ab\u4f7f\u5f97 $i=j$ \u7684\u64cd\u4f5c\u66ff\u6362\u6389\uff08\u8bf7\u6ce8\u610f\u6211\u4eec\u65f6\u523b\u4fdd\u6301 $i\\le j$\uff09\n\n- \u6027\u8d28 $2$ \uff1a\u82e5\u5f53\u524d\u6709 $|i-j|=t$\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u4f1a\u6269\u5927 $|i-j|$ \u540e\u8fdb\u884c\u4f20\u9001\u3002\n\n\u6ce8\u610f\u5230\u6269\u5927\u540e\u4f20\u9001\u4e00\u5b9a\u4e0d\u4f1a\u4f18\u4e8e\u5148\u4f20\u9001\u540e\u6269\u5927\uff08\u8bf7\u6ce8\u610f\u5b57\u7b26\u4e32\u76f8\u7b49\u610f\u5473\u7740\u5b50\u4e32\u4e5f\u76f8\u540c\uff09\n\n- \u6027\u8d28 $3$ \uff1a\u6700\u4f18\u89e3\u6cd5\u6709\u4e24\u79cd\uff1a\u4e00\u662f\u5148\u64cd\u4f5c\u6210 $i=j$ \u7684\u60c5\u51b5\uff0c\u7136\u540e\u4e0d\u65ad\u7684\u901a\u8fc7\u64cd\u4f5c $1/2$ \u52a0\u90e8\u5206\u4f20\u9001\u5230\u8fbe\u7ec8\u70b9\uff1b\u53e6\u4e00\u79cd\u662f\u5148\u64cd\u4f5c\u6210 $l\\le i<j\\le r$\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u6b21\u4f20\u9001\u5230\u8fbe\u67d0\u4e2a\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u79fb\u52a8 $i$ \u8d70\u5230 $x$\n\n\u6211\u4eec\u5148\u8bc1\u660e\uff1a\n\n1. \u82e5\u67d0\u4e2a\u64cd\u4f5c\u65b9\u6848\u4e2d\u9014\u4f7f\u5f97 $i=j$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u64cd\u4f5c\u65b9\u6848\u53ef\u4ee5\u66ff\u6362\u4e3a\u521d\u59cb\u901a\u8fc7\u64cd\u4f5c\u4f7f\u5f97 $i=j$ \u7136\u540e\u518d\u6267\u884c\u672c\u65b9\u6848\u3002\n\n\u8bbe $t=i-j$\uff0c\u90a3\u4e48\u4f7f\u5f97 $i=j$ \u7b49\u4ef7\u4e8e\u901a\u8fc7\u64cd\u4f5c\u8d70\u5b8c\u4e86 $t$ \u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c06\u8fd9 $t$ \u6b65\u653e\u5728\u5f00\u5934\u505a\u5bf9\u4e8e\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u6240\u4ee5\u5982\u679c\u64cd\u4f5c\u65b9\u6848\u4e2d\u51fa\u73b0\u4e86 $i=j$ \u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u7b49\u4ef7\u4e8e\u6027\u8d28 $3$ \u4e2d\u7684\u7b2c\u4e00\u7c7b\u6700\u4f18\u89e3\u3002\n\n2. \u82e5\u67d0\u4e2a\u64cd\u4f5c\u65b9\u6848\u59cb\u7ec8\u6ca1\u6709\u4f7f\u5f97 $i=j$\uff0c\u90a3\u4e48\u5176\u81f3\u591a\u4f20\u9001\u4e00\u6b21\u3002\n\n\u6839\u636e\u6027\u8d28 $2$\uff0c\u6700\u4f18\u89e3\u6cd5\u4e00\u5b9a\u4e0d\u4f1a\u6269\u5927 $|i-j|$\uff0c\u6240\u4ee5\u957f\u5ea6\u53ea\u80fd\u7f29\u5c0f\u65e0\u6cd5\u589e\u5927\u3002\n\n\u73b0\u5728\u8003\u8651\u5f53\u524d\u7684 $(i,j)$\uff0c\u5047\u8bbe\u5148\u79fb\u52a8\u540e\u518d\u6b21\u8fdb\u884c\u4f20\u9001\uff0c\u90a3\u4e48\u5047\u8bbe\u5f53\u524d\u8d70\u5230\u4e86 $(i',j')$ \u4e14 $|i'-j'|>1$ \u7136\u540e\u8fdb\u884c\u4f20\u9001\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u8fd9\u7c7b\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002\n\n\u5148\u5047\u8bbe\u6709 $i'>j$\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u53ef\u4ee5\u901a\u8fc7\u66f4\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff08\u5373\u53ea\u64cd\u4f5c $i$ \uff09\u5f97\u5230 $(j',j')$ \u8fd9\u4e2a\u4e8c\u5143\u7ec4\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u66f4\u4f18\uff0c\u540c\u65f6\u8fdd\u80cc\u4e86\u524d\u63d0\uff0c\u4f1a\u88ab\u5f52\u7c7b\u5230 1 \u4e2d\u3002\u5bf9\u4e8e $j'<i$ \u7c7b\u4f3c\u3002\n\n\u7136\u540e\u6211\u4eec\u5047\u8bbe $i'<j<j'$\uff0c\u90a3\u4e48\u5bb9\u6613\u6ce8\u610f\u5230\u8fd9\u6837\u7684\u4f20\u9001\u7b49\u4ef7\u4e8e\u5148\u64cd\u4f5c\u6210 $(i',j)$ \u7136\u540e\u4f20\u9001\u540e\u518d\u79fb\u52a8\uff0c\u5bb9\u6613\u53d1\u73b0\u7b49\u4ef7\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5047\u8bbe $i<i'<j'<j$\uff0c\u90a3\u4e48\u8fd9\u610f\u5473\u7740\u4f20\u9001\u7684\u524d\u63d0\u662f\u4e0d\u65ad\u7684\u7f29\u5c0f\u521d\u59cb\u5b57\u7b26\u533a\u95f4\u7684\uff0c\u4ece\u6700\u521d\u7684\u5b57\u7b26\u96c6\u5f00\u59cb\u6211\u4eec\u5f97\u5230\u67d0\u4e2a $(i',j')$ \u5e76\u4f20\u9001\uff0c\u90a3\u4e48\u6b64\u540e\u80af\u5b9a\u6709\u5b57\u7b26\u4e32\u4ecd\u7136\u662f\u6700\u521d\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff0c\u5982\u679c\u6b64\u540e\u8fd8\u8fdb\u884c\u4f20\u9001\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u5982\u5728\u521d\u59cb\u72b6\u6001\u7f29\u5c0f\u5230\u8db3\u591f\u5c0f\u518d\u4f20\u9001\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7ea6\u4f20\u9001\u6b21\u6570\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u4e5f\u81f3\u591a\u4f20\u9001\u4e00\u6b21\uff0c\u81f3\u6b64\uff0c\u5982\u679c\u4e2d\u9014\u51fa\u73b0\u4e86 $i=j$ \u90a3\u4e48\u6027\u8d28 $3$ \u7684\u7b2c\u4e00\u90e8\u5206\u5373\u4e3a\u6700\u4f18\u89e3\uff0c\u5426\u5219\u6027\u8d28 $3$ \u7684\u7b2c\u4e8c\u90e8\u5206\u4e3a\u6700\u4f18\u89e3\u3002\n\n---\n\n### \u6c42\u89e3\n\n\u73b0\u5728\u8003\u8651\u5bf9\u4e8e\u4e24\u90e8\u5206\u5206\u522b\u6c42\u89e3\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\u9009\u62e9\u521d\u59cb $[i,j]$ \u4e2d\u4e00\u4e2a\u4f4d\u7f6e $t$\uff0c\u7136\u540e\u8be2\u95ee $t\\to k$ \u7684\u6700\u77ed\u8def\u3002\u5176\u4ed6\u7684\u8d21\u732e\u4e3a\u5e38\u6570\u3002\n\n\u6211\u4eec\u53d1\u73b0\u95ee\u9898\u7b49\u4ef7\u4e8e\uff1a$t$ \u53ef\u4ee5\u5de6\u79fb\uff0c\u53f3\u79fb\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u989c\u8272\uff0c\u989c\u8272\u76f8\u540c\u53ef\u4f20\u9001\u3002\n\n\u90a3\u4e48\u7edf\u8ba1 $f_{i,j}$ \u8868\u793a\u989c\u8272 $i$ \u8d70\u5230\u4f4d\u7f6e $j$ \u7684\u6700\u77ed\u8def\u5373\u53ef\uff0c\u53ef\u4ee5\u901a\u8fc7 01 - BFS \u5728 $\\mathcal O(\\Sigma \\cdot n)$ \u7684\u590d\u6742\u5ea6\u6c42\u89e3\u3002\n\n\u5bf9\u4e8e\u8f6c\u79fb\u6211\u4eec\u679a\u4e3e\u8fd9\u4e2a**\u7b2c\u4e00\u6b21\u7ecf\u8fc7**\u201c\u4f20\u9001\u201d\u7684\u989c\u8272\uff0c\u5047\u5b9a\u6700\u4f18\u89e3\u4e2d\u9014\u7ecf\u8fc7\u4e86\u989c\u8272 $c$\uff0c\u90a3\u4e48\u8003\u8651 $(j-i)+f_{c,x}[x\\in [i,j]]+f_{c,k}+1$ \u5373\u4e3a\u7b54\u6848\u3002\n\n\u5047\u5b9a $c$ \u5728 $[i,j]$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $f_{c,x}[x\\in [i,j]]=1$\uff0c\u5426\u5219\u7b54\u6848\u53d6 $\\min(f_{c,i},f_{c,j})$ \u5373\u53ef\n\n\n----\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u90e8\u5206\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\u5bf9\u4e8e $(i,j)$ \u9009\u62e9\u4e00\u4e2a\u5b57\u4e32\u4f20\u9001\u5230\u4e00\u4e2a $[i',j']$ \u7136\u540e\u4ece $i'$ \u8d70\u5230 $x$ \u5e76\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u5ffd\u7565\u6389\u5e38\u6570\uff0c\u6b64\u65f6\u7684\u4ee3\u4ef7\u4e3a $2i'-j'$\n\n- \u89c2\u5bdf\uff1a$i'\\ge k$\n\n\u6613\u77e5\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 $j'\\ge k$\uff0c\u5426\u5219\u7b49\u540c\u4e8e\u7b2c\u4e00\u90e8\u5206\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4f7f\u5f97 $i'=k$ \u4e00\u5b9a\u4e0d\u52a3\u3002\n\n\u6211\u4eec\u6709\u4e24\u7c7b\u601d\u8def\uff1a\n\n- \u679a\u4e3e $i'$\uff0c\u5219 $j'$ \u5e94\u5c3d\u53ef\u80fd\u5927\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206 $j'$ \u5e76\u8003\u8651\u5224\u65ad $[i',j']$ \u662f\u5426\u5728 $[i,j]$ \u4e2d\u51fa\u73b0\u8fc7\u3002\n\n\u5efa\u7acb\u4e32 $S$ \u7684\u540e\u7f00\u6811\uff0c\u901a\u8fc7\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4 endpos \u96c6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9a\u4f4d $[i',j']$ \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u53ea\u9700\u8981\u5224\u5b9a endpos \u4e2d\u662f\u5426\u5b58\u5728\u533a\u95f4 $[i,j-(j'-i')]$ \u5185\u7684\u6570\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5355\u4e2a $i'$ \u8fdb\u884c\u786e\u5b9a\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\log^2 n)$\n\n- \u5f53\u533a\u95f4\u957f\u5ea6\u88ab\u786e\u5b9a\u65f6\uff0c$i'$ \u5e94\u5c3d\u53ef\u80fd\u5c0f\u3002\n\n\u6b64\u65f6\u7b54\u6848\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a $i'-\\textrm{len}+1$\n\n\u5efa\u7acb\u539f\u4e32 $S$ \u7684\u540e\u7f00\u6811\uff0c\u8003\u8651\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u6709\u6b64\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u56fa\u5b9a\uff0c\u6b64\u65f6\u6211\u4eec\u5e0c\u671b\u6c42\u89e3\u5176\u6240\u6709\u5b57\u4e32\u5bf9\u5e94\u7684\u6700\u5c0f\u7684 $2L-R$\n\n\u4e3a\u6b64\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\uff0c\u5bf9\u5e94\u7684\u6700\u5c0f\u7684 $i'$ \u5373\u53ef\uff08\u53ef\u4ee5\u8003\u8651\u76f8\u540c\u7684\u8fb9\u5bf9\u5e94\u7684 endpos \u96c6\u662f\u76f8\u540c\u7684\uff09\n\n\u6211\u4eec\u8003\u8651\u6240\u6709\u5927\u4e8e $k$ \u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5e0c\u671b\u7ef4\u62a4\u4ec5\u8003\u8651\u8fd9\u4e9b\u5b57\u7b26\u4e32\uff0c\u540e\u7f00\u6811\u4e0a\u6bcf\u4e2a\u5b57\u4e32\u5bf9\u5e94\u7684\u7b54\u6848\n\n\u6211\u4eec\u5148\u7ef4\u62a4\u51fa\u8282\u70b9 $u$ \u4e0a\u5bf9\u5e94\u7684\u5728 $k$ \u4e4b\u540e\u6700\u5c0f\u7684 $i'$\uff0c\u7136\u540e\u5728\u540e\u7f00\u6811\u4e0a\u6839\u636e\u8282\u70b9\u6df1\u5ea6\u8fdb\u884c dp\uff0c\u8003\u8651 $f_i=\\min(f_{\\textrm{father}_i},f_{\\textrm{link}_i},i'-\\textrm{len}_i+1)$\n\n\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5 $\\mathcal O(n)$ \u786e\u5b9a\u540e\u7f00\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u7b54\u6848\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u7c7b\u7b97\u6cd5\u6765\u5747\u644a\u590d\u6742\u5ea6\u4ee5\u901a\u8fc7\u6b64\u9898\uff0c\u79bb\u7ebf\u6240\u6709\u67e5\u8be2\uff0c\u8003\u8651\u6bcf\u95f4\u9694 $B$ \u4e2a\u4f4d\u7f6e\u5c31\u91cd\u65b0\u505a\u4e00\u6b21\u4e0a\u8ff0 dp\uff0c\u5bf9\u4e8e\u67e5\u8be2\u7684 $k$\uff0c\u8bbe\u4e0a\u4e00\u6b21 dp \u70b9\u4e3a $L$\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e $[k,L]$ \u4e2d\u7684\u6240\u6709 $i'$ \u5e76\u91c7\u53d6 $\\mathcal O(\\log^2 n)$ \u7684\u66b4\u529b\u6765\u5904\u7406\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $\\mathcal O(\\frac{n^2}{B}+nB\\log^2 n)$\uff08\u8bbe $n,q$ \u540c\u9636\uff09\u7684\u7b97\u6cd5\u3002\n\n\u9009\u53d6\u5408\u9002\u7684 $B$ \u53ef\u4ee5\u505a\u5230 $\\mathcal O(n\\sqrt{n}\\log n)$\n\n\u5982\u679c\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\u6709\u66f4\u9ad8\u660e\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u53ef\u4ee5\u505a\u5230 $\\mathcal O(n\\sqrt{n\\log n})$\n\n~~\u4e0d\u8fc7\u6211\u633a\u597d\u5947\u4e3a\u5565\u7406\u8bba\u4e0a $\\log^2$ \u7684\u90e8\u5206\u600e\u4e48\u8dd1\u5f97\u8fd9\u4e48\u5feb\u3002\u3002\u3002$\\mathcal O(n)$ \u7684\u90e8\u5206\u53cd\u800c\u5e38\u6570\u5927\u4e00\u70b9\uff1f...~~\n\n\n$Code:$\n\n```cpp\nconst int B = 80 ; \nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int P = 998244353 ; \nconst int H = 2333 ; \nconst int N = 6e4 + 50 ; \nconst int inf = 1e9 ; \nconst int Inf = 1e8 ; \nint n, m, tnt, head[N], vis[N], f[30][N], dis[N] ; \nint bef[30][N], qAns[N] ; \nlong long fac[N], pre[N] ; \nstruct E {\n\tint to, next, w ; \n} e[N << 1] ;\nvoid add(int x, int y, int z) { \n\te[++ tnt] = (E){ y, head[x], z }, head[x] = tnt ; \n}\nchar s[N] ; \ndeque<int> q ; \nvoid BFS(int x) {\n\trep( i, 1, n + 30 ) vis[i] = 0, dis[i] = inf ; \n\tdis[x] = 0, q.push_back(x) ; int z = x - n ; \n\twhile(!q.empty()) {\n\t\tint u = q.front() ; q.pop_front() ; \n\t\tif(vis[u]) continue ; vis[u] = 1 ; \n\t\tNext( i, u ) {\n\t\t\tint v = e[i].to ; \n\t\t\tif(dis[v] > dis[u] + e[i].w) {\n\t\t\t\tdis[v] = dis[u] + e[i].w ; \n\t\t\t\tif(dis[v] == dis[u]) q.push_front(v) ;\n\t\t\t\telse q.push_back(v) ; \n\t\t\t}\n\t\t}\n\t} rep( i, 1, n ) f[z][i] = dis[i] ; \n}\nint Get(int l, int r) { return (pre[r] - 1ll * pre[l - 1] * fac[r - l + 1] % P + P) % P ; }\nstruct node {\n\tint l, r, id, cost, bef, wi, ans ; \n} ; vector<node> p[N] ;  \nnamespace S1 {\n\tstruct Suffix {\n\t\tint ch[30] ;\n\t\tint lef, lk, len ; \n\t} t[N << 1] ; \n\tstruct Tr {\tint l, r, w ; } tr[N * 100] ;\n\tvector<int> Go[N << 1] ; \n\tint rem, bef = 1, cnt = 1, m, num, rt[N] ; \n\tint fa[N][20], dep[N], Idnex[N] ; \n\tint node( int l, int len ) {\n\t\tt[++ cnt].lef = l, t[cnt].len = len, t[cnt].lk = 1 ;\n\t\treturn cnt ; \n\t}\n\tvoid insert( int x ) {\n\t\t++ m, ++ rem ; int u = s[x], lst = 1 ; \n\t\twhile( rem ) {\n\t\t\twhile( rem > t[t[bef].ch[(int)s[m - rem + 1]]].len ) \n\t\t\trem -= t[bef = t[bef].ch[(int)s[m - rem + 1]]].len ;\n\t\t\tint &d = t[bef].ch[(int)s[m - rem + 1]], c = s[t[d].lef + rem - 1] ;\n\t\t\tif( !d || u == c ) {\n\t\t\t\tt[lst].lk = bef, lst = bef ; \n\t\t\t\tif( !d ) d = node( m - rem + 1, inf ) ;\n\t\t\t\telse break ;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint np = node( t[d].lef, rem - 1 ) ;\n\t\t\t\tt[np].ch[c] = d, t[np].ch[u] = node(m, inf) ;\n\t\t\t\tt[d].lef += (rem - 1), t[d].len -= (rem - 1) ;\n\t\t\t\tt[lst].lk = d = np, lst = np ;\n\t\t\t} (bef == 1) ? -- rem : bef = t[bef].lk ;\n\t\t}\n\t}\n\tvoid insert(int &x, int l, int r, int k) {\n\t\tif(!x) x = ++ num ; \n\t\tif(l == r) return ++ tr[x].w, void() ; \n\t\tint mid = (l + r) >> 1 ;\n\t\tif(k <= mid) insert(ls(x), l, mid, k) ;\n\t\telse insert(rs(x), mid + 1, r, k) ; \n\t\ttr[x].w = tr[ls(x)].w + tr[rs(x)].w ; \n\t}\n\tint Kth(int x, int l, int r, int k) {\n\t\tif(!x || !k) return 0 ; \n\t\tif(l == r) return tr[x].w ;  \n\t\tint mid = (l + r) >> 1 ; \n\t\tif(k <= mid) return Kth(ls(x), l, mid, k) ;\n\t\telse return Kth(rs(x), mid + 1, r, k) + tr[ls(x)].w ; \n\t}\n\tint qry(int x, int l, int r, int k) {\n\t\tif(l == r) return l ; \n\t\tint mid = (l + r) >> 1 ; \n\t\tif(k <= tr[ls(x)].w) return qry(ls(x), l, mid, k) ;\n\t\telse return qry(rs(x), mid + 1, r, k - tr[ls(x)].w) ; \n\t}\n\tint merge(int x, int u, int isr) {\n\t\tint nw = (isr) ? x : ++ num ; \n\t\tif(ls(x) && ls(u)) ls(nw) = merge(ls(x), ls(u), 0) ; \n\t\telse ls(nw) = ls(x) + ls(u) ; \n\t\tif(rs(x) && rs(u)) rs(nw) = merge(rs(x), rs(u), 0) ; \n\t\telse rs(nw) = rs(x) + rs(u) ; \n\t\ttr[nw].w = tr[ls(nw)].w + tr[rs(nw)].w ; \n\t\treturn nw ; \n\t} \n\tvoid dfs( int x, int Fa, int l ) {\n\t\tif( t[x].len >= Inf ) t[x].len = n + 1 - t[x].lef ; \n\t\tdep[x] = l + t[x].len, fa[x][0] = Fa ; int fl = 0 ; \n\t\trep( i, 1, 18 ) fa[x][i] = fa[fa[x][i - 1]][i - 1] ; \n\t\trep( i, 1, 27 ) if( t[x].ch[i] ) \n\t\tdfs( t[x].ch[i], x, l + t[x].len ), fl = 1, \n\t\tGo[x].pb(t[x].ch[i]), merge(rt[x], rt[t[x].ch[i]], 1) ; \n\t\tif( !fl ) {\n\t\t\tint d = n - dep[x] + 1 ; \n\t\t\tif(d <= n) Idnex[d] = x, insert(rt[x], 1, n, d) ; \n\t\t} \n\t} \n\tint Get(int l, int r) {\n\t\tint u = Idnex[l], le = r - l + 1 ; \n\t\tdrep( i, 0, 17 ) if(dep[fa[u][i]] >= le) u = fa[u][i] ;\n\t\treturn u ; \n\t}\n\tint Id[N], g[N], F[N], D[N] ; \n\tbool cmp(int x, int y) { return dep[x] < dep[y] ; }\n\tvoid Dfs(int x) {\n\t\tfor(int v : Go[x]) \n\t\tDfs(v), g[x] = min(g[x], g[v]) ; \n\t}\n\tvoid build(int p) {\n\t\trep( i, 1, cnt ) D[i] = F[i] = g[i] = inf ; \n\t\trep( i, p, n ) g[Idnex[i]] = i ; \n\t\tDfs(1), D[0] = F[0] = inf ; int u ;\n\t\trep( i, 3, cnt ) \n\t\t\tu = Id[i], \n\t\t\tF[u] = min(D[t[u].lk], D[fa[u][0]]),\n\t\t\tD[u] = min(F[u], g[u] - dep[u] + 1) ; \n\t}\n\tbool check(int l1, int r1, int l2, int r2) {\n\t\tif(r1 - l1 > r2 - l2) return 0 ; \n\t\tint len = r1 - l1, ed = r2 - len, u = Get(l1, r1) ; \n\t\tint l = Kth(rt[u], 1, n, l2 - 1), sz = tr[rt[u]].w ; \n\t\tif(l == sz) return 0 ; \n\t\treturn (qry(rt[u], 1, n, l + 1) <= ed) ; \n\t}\n\tint Get(int p, int L, int R) {\n\t\tint l = p, r = n, ans = inf ; \n\t\twhile(l <= r) {\n\t\t\tint mid = (l + r) >> 1 ; \n\t\t\tif(check(p, mid, L, R)) ans = min(ans, 2 * p - mid), l = mid + 1 ;\n\t\t\telse r = mid - 1 ; \n\t\t} return ans ; \n\t}\n\tvoid solve() {\n\t\ts[++ n] = 27, t[0].len = inf ; \n\t\trep( i, 1, n ) insert(i) ; -- n ;\n\t\trep( i, 1, cnt ) rt[i] = ++ num ; \n\t\tdfs(1, 1, 0) ; rep( i, 1, cnt ) Id[i] = i ; \n\t\trep( i, 1, n ) t[Idnex[i]].lk = Idnex[i + 1] ; \n\t\tsort(Id + 1, Id + cnt + 1, cmp) ; \n\t\tint last = n ; build(n) ; \n\t\tfor(re int i = n; i >= 1; -- i) {\n\t\t\tif(i % B == 0) last = i, build(i) ; \n\t\t\tfor(auto &v : p[i]) {\n\t\t\t\tint u = Get(v.l, v.r), len = v.r - v.l + 1 ; \n\t\t\t\tv.ans = min(v.ans, min(F[u], g[u] - len + 1)) ; \n\t\t\t} \n\t\t\tfor(re int j = i; j <= last; ++ j) \n\t\t\tfor(auto &v : p[i]) v.ans = min(v.ans, Get(j, v.l, v.r)) ; \n\t\t}\n\t\trep( i, 1, n ) for(auto &v : p[i]) \n\t\tv.ans += v.wi, qAns[v.id] = v.cost + min(v.ans, v.bef) ; \n\t}\n}\nsigned main()\n{\n\tn = gi(), m = gi(), scanf(\"%s\", s + 1) ; \n\trep( i, 1, n ) s[i] -= ('a' - 1), add(i, s[i] + n, 1), add(s[i] + n, i, 0) ; \n\trep( i, 1, n - 1 ) add(i, i + 1, 1), add(i + 1, i, 1) ; \n\trep( i, 1, 26 ) BFS(i + n) ; fac[0] = 1 ; \n\trep( i, 1, n ) pre[i] = (1ll * pre[i - 1] * H + s[i]) % P ; \n\trep( i, 1, n ) fac[i] = 1ll * fac[i - 1] * H % P ; \n\trep( i, 1, n ) {\n\t\trep( j, 1, 26 ) bef[j][i] = bef[j][i - 1] ; \n\t\t++ bef[(int)s[i]][i] ; \n\t}\n\trep( j, 1, m ) {\n\t\tint x = gi(), y = gi(), k = gi() ; \n\t\tint len = n - max(x, y) ; \n\t\tint l = 0, r = len, ans = 0 ; \n\t\twhile(l <= r) {\n\t\t\tint mid = (l + r) >> 1 ;\n\t\t\tif(Get(x, x + mid) == Get(y, y + mid)) ans = mid, l = mid + 1 ;\n\t\t\telse r = mid - 1 ; \n\t\t}\n\t\tint L = x, R = x + ans, Ans = abs(L - k) ; \n\t\trep( i, 1, 26 ) \n\t\t\tif(bef[i][R] - bef[i][L - 1]) Ans = min(Ans, R - L + f[i][k] + 1) ; \n\t\t\telse Ans = min(Ans, R - L + min(f[i][L], f[i][R]) + f[i][k] + 1) ; \n\t\tp[k].pb((node){ L, R, j, n - R, Ans, R - L - k + 1, inf }) ; \n\t}\n\tS1::solve() ; \n\trep( i, 1, m ) printf(\"%d\\n\", qAns[i] ) ; \n\treturn 0 ;\n}\n```",
        "postTime": 1610522796,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6385 \u3010\u300eMdOI R2\u300fLittle Goth\u3011"
    }
]