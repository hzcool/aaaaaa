[
    {
        "content": "> \u7ed9\u51fa\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c$q$ \u6b21\u8be2\u95ee\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u3002\n> \n> \u7ed9\u51fa\u4e00\u5e38\u6570 $k$\uff0c\u4fdd\u8bc1\u6bcf\u6761\u8fb9 $(u, v)$ \u4fdd\u8bc1 $\\left\\lfloor \\frac{u}{k} \\right\\rfloor + 1 = \\left\\lfloor \\frac{v}{k} \\right\\rfloor$\u3002\n> \n> $n \\le 50\\ 000$\uff0c$q \\le 10\\ 000$\uff0c$k \\le 5$\u3002\n\n\u611f\u89c9 NOIP2018 \u666e\u53ca\u4e86\u52a8\u6001 DP \u4ee5\u540e\uff0c\u8fd9\u9898\u53d8\u7b80\u5355\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\u505a\u52a8\u6001 DP\u3002\n\n\u8bbe\u8fdb\u5165\u8fd9\u4e2a\u5757\u65f6\uff0c\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u4f9d\u6b21\u4e3a\n\n$$\n\\begin{bmatrix}\nf_0 & f_1 & \\cdots & f_{k - 1} \n\\end{bmatrix}\n$$\n\n\u51fa\u5b8c\u8fd9\u4e2a\u5757\u4e4b\u540e\uff0c\u9700\u8981\u4ece\u8fd9\u4e2a\u5757\u5185\u7684\u8fb9\u8d70\u51fa\u53bb\uff0c\u66f4\u65b0\u77e9\u9635\u53d8\u6210\n\n$$\n\\begin{bmatrix}\ng_0 & g_1 & \\cdots & g_{k - 1}\n\\end{bmatrix}\n$$\n\n\u9996\u5148\u6709\u4e00\u4e2a\u66b4\u529b DP\uff1a\n\n$$\ng_j = \\min\\limits_{i = 0} ^ {k - 1} \\left(f_i + w_{i, j}\\right)\n$$\n\n\u5176\u4e2d $i, j$ \u8868\u793a\u8be5\u5757\u5185\u7684 $i$ \u53f7\u70b9\u8fde\u5411\u4e0b\u4e00\u4e2a\u5757\u5185 $j$ \u53f7\u70b9\u7684\u8fb9\u7684\u8fb9\u6743\uff0c\u6ca1\u6709\u8bbe\u4e3a $+\\infty$\u3002\n\n\u5b66\u4e60\u4e86\u52a8\u6001 DP \u4e4b\u540e\uff0c\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u5199\u6210\u77e9\u9635 \u201c\u4e58\u6cd5\u201d \u5f62\u5f0f\u7684\uff0c\u8f6c\u79fb\u77e9\u9635\u662f\uff1a\n\n$$\n\\begin{bmatrix}\nw_{0, 0} & w_{0, 1} & \\cdots & w_{0, k - 1} \\\\\nw_{1, 0} & w_{1, 1} & \\cdots & w_{1, k - 1} \\\\\n\\vdots   & \\vdots   & \\ddots & \\vdots \\\\\nw_{k - 1, 0} & w_{k - 1, 1} & \\cdots & w_{k - 1, k - 1}\n\\end{bmatrix}\n$$\n\n\u8fd9\u4e2a\u4e1c\u897f\u662f $\\min$ \u548c $+$ \u5957\u8d77\u6765\uff0c\u662f\u6709\u7ed3\u5408\u5f8b\u7684\u3002\u6240\u4ee5\u500d\u589e\u6216\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u8fde\u4e58\u79ef\uff0c\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u4e58\u5373\u53ef\u3002\n\n\u7ecf\u8fc7\u4e00\u4e9b\u7ec6\u8282\u4f18\u5316\u53ef\u4ee5\u505a\u5230\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n + q) k ^ 2 \\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nconst int MaxN = 50000, MaxK = 5;\nconst int MaxLog = 16;\nconst int INF = 0x3F3F3F3F;\n\nint N, M, K, Q;\n\nstruct matrix_t {\n  int mat[MaxK][MaxK];\n  matrix_t() { memset(mat, 0x3F, sizeof mat); }\n\n  inline friend matrix_t operator*(const matrix_t &a, const matrix_t &b) {\n    matrix_t c;\n    for (int i = 0; i < K; ++i)\n      for (int j = 0; j < K; ++j) {\n        int x = INF;\n        for (int k = 0; k < K; ++k)\n          x = std::min(x, a.mat[i][k] + b.mat[k][j]);\n        c.mat[i][j] = x;\n      }\n    return c;\n  }\n};\n\nstruct vector_t {\n  int mat[MaxK];\n  vector_t() { memset(mat, 0x3F, sizeof mat); }\n\n  inline friend vector_t operator*(const vector_t &a, const matrix_t &b) {\n    vector_t c;\n    for (int i = 0; i < K; ++i)\n      for (int j = 0; j < K; ++j)\n        c.mat[j] = std::min(c.mat[j], a.mat[i] + b.mat[i][j]);\n    return c;\n  }\n};\n\nmatrix_t F[MaxLog + 1][MaxN + 5];\n\nvoid init() {\n  scanf(\"%d %d %d %d\", &K, &N, &M, &Q);\n  for (int i = 1; i <= M; ++i) {\n    int u, v, w;\n    scanf(\"%d %d %d\", &u, &v, &w);\n    F[0][u / K].mat[u % K][v % K] = std::min(F[0][u / K].mat[u % K][v % K], w);\n  }\n}\n\ninline void query(vector_t &f, int l, int r) {\n  int x = l;\n  for (int i = MaxLog; i >= 0; --i)\n    if ((r - l + 1) & (1 << i)) {\n      f = f * F[i][x];\n      x += (1 << i);\n    }\n}\n\nvoid solve() {\n  for (int i = 1; (1 << i) <= N / K + 1; ++i)\n    for (int j = 0; j + (1 << i) - 1 < (N / K + 1); ++j)\n      F[i][j] = F[i - 1][j] * F[i - 1][j + (1 << (i - 1))];\n  for (int q = 1; q <= Q; ++q) {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    if (a / K == b / K) puts(\"-1\");\n    else {\n      vector_t f;\n      f.mat[a % K] = 0;\n      query(f, a / K, b / K - 1);\n      if (f.mat[b % K] == INF) puts(\"-1\");\n      else printf(\"%d\\n\", f.mat[b % K]);\n    }\n  }\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```",
        "postTime": 1590585201,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6573 \u3010[BOI 2017] Toll\u3011"
    },
    {
        "content": "## \u3010\u52a8\u6001 dp\u3011\u3010P6573\u3011 [BOI 2017] Toll\r\n\r\n### Analysis\r\n\r\n\u6211\u4eec\u6ce8\u610f\u5230 $\\left\\lfloor\\frac x k\\right\\rfloor$ \u53ea\u6709 $k$ \u4e2a\u3002\u56e0\u6b64\u8fd9\u5f20\u56fe\u53ef\u4ee5\u88ab\u5206\u6210 $\\left\\lfloor\\frac {n - 1} k\\right\\rfloor$ \u5c42\uff0c\u6bcf\u5c42\u53ea\u4f1a\u5411\u4e0b\u4e00\u5c42\u8fde\u8fb9\uff0c\u662f\u4e00\u4e2a DAG\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u4e0d\u4f1a\u8d85\u8fc7 $k$\u3002\r\n\r\n\u56e0\u4e3a\u662f\u4e00\u4e2a DAG\uff0c\u6240\u4ee5\u53ef\u4ee5 dp\u3002\u8bbe $f_u$ \u662f\u4ece $u$ \u5230 $b$ \u7684\u6700\u77ed\u8def\uff0c\u8f6c\u79fb\u4e3a $f_{u} = \\min\\{f_v + t_{u, v}\\}$\u3002\r\n\r\n\u628a\u9664\u4ee5 $k$ \u4e0b\u53d6\u6574\u76f8\u540c\u7684\u6240\u6709 $f$ \u503c\u6309\u7167\u6a21 $k$ \u7684\u5927\u5c0f\u987a\u5e8f\u4f9d\u6b21\u653e\u5230\u4e00\u4e2a $1 \\times k$ \u7684\u77e9\u9635\u91cc\uff0c\u90a3\u4e48\u8f6c\u79fb\u53ef\u4ee5\u5199\u6210\r\n\r\n$$\\begin{bmatrix} f_a &f_b & \\dots \\end{bmatrix} \\times \\begin{bmatrix} t_{a, x} &t_{a,y} & \\dots \\\\ t_{b, x} & t_{b, y} &\\dots \\\\ \\dots\\end{bmatrix}= \\begin{bmatrix} f_x &f_y & \\dots \\end{bmatrix}$$\r\n\r\n\u8fd9\u91cc\u7684\u77e9\u9635\u4e58\u6cd5\u5b9a\u4e49\u4e3a $(AB)_{i, j} = \\min_{x = 0}^{k - 1}\\{A_{i, x} + B_{x, j}\\}$\u3002\u56e0\u4e3a\u52a0\u6cd5\u5bf9\u6700\u503c\u8fd0\u7b97\u6709\u5206\u914d\u5f8b\uff0c\u6240\u4ee5\u8fd9\u6837\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u6709\u7ed3\u5408\u5f8b\u3002\r\n\r\n\u628a\u6240\u6709\u7684\u8f6c\u79fb\u77e9\u9635\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u67e5\u8be2\u5c31\u662f\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u4e58\u79ef\u3002\u505a\u6cd5\u7c7b\u4f3c\u4e8e [GSS3](https://www.luogu.com.cn/problem/SP1716) \u7684 ddp \u505a\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nk^3\\log n )$\u3002\r\n\r\n### Code\r\n\r\n```cpp\r\nnamespace Fusu {\r\n\r\nconst int maxn = 50005;\r\nconst int maxt = 5;\r\nconst int INF = 0x3f3f3f3f;\r\n\r\nint t, n, m, q;\r\nint bel[maxn], res[maxn];\r\n\r\nstruct Mat {\r\n  int mt[maxt][maxt];\r\n\r\n  Mat() { memset(mt, 0x3f, sizeof mt); }\r\n  Mat(const int x) { \r\n    memset(mt, 0x3f, sizeof mt); \r\n    for (int i = 0; i < t; ++i) mt[i][i] = 0; \r\n  }\r\n\r\n  Mat operator*(const Mat &o) const {\r\n    Mat ret;\r\n    for (int i = 0; i < t; ++i) {\r\n      for (int j = 0; j < t; ++j) {\r\n        ret.mt[i][j] = INF;\r\n        for (int k = 0; k < t; ++k) {\r\n          ret.mt[i][j] = std::min(ret.mt[i][j], mt[i][k] + o.mt[k][j]);\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  \r\n  void debug() {\r\n    for (int i = 0; i < t; ++i) {\r\n      for (int j = 0; j < t; ++j) {\r\n        printf(\"%d   \", mt[i][j]);\r\n      }\r\n      putchar('\\n');\r\n    }\r\n  }\r\n};\r\nMat mat[maxn];\r\n\r\nstruct Node {\r\n  int l, r;\r\n  Mat v;\r\n  Node *ls, *rs;\r\n\r\n  inline void pushup() {\r\n    v = ls->v * rs->v;\r\n  }\r\n\r\n  Mat qry(const int L, const int R) {\r\n    if ((L <= l) && (r <= R)) return v;\r\n    if ((r < L) || (l > R)) return Mat(0);\r\n    return ls->qry(L, R) * rs->qry(L, R);\r\n  }\r\n};\r\nNode Mem[maxn << 1], *pool = Mem;\r\nNode *New(const int L, const int R) {\r\n  auto u = pool++;\r\n  if ((u->l = L) == (u->r = R)) {\r\n    u->v = mat[L];\r\n  } else {\r\n    int M = (L + R) >> 1;\r\n    u->ls = New(L, M);\r\n    u->rs = New(M + 1, R);\r\n    u->pushup();\r\n  }\r\n//  printf(\"OvO%d %d\\n\", L, R);\r\n//  u->v.debug();\r\n  return u;\r\n}\r\n\r\nvoid Main() {\r\n  qr(t); qr(n); qr(m); qr(q);\r\n  for (int i = 0; i < n; ++i) {\r\n    bel[i] = i / t;\r\n    res[i] = i - t * bel[i];\r\n  }\r\n  for (int u, v, w; m; --m) {\r\n    qr(u); qr(v); qr(w);\r\n    mat[bel[u]].mt[res[u]][res[v]] = w;\r\n  }\r\n  auto rot = New(0, bel[n - 1]);\r\n  for (int u, v; q; --q) {\r\n    qr(u); qr(v);\r\n    if (bel[u] >= bel[v]) {\r\n      puts(\"-1\");\r\n      continue;\r\n    }\r\n    auto k = rot->qry(bel[u], bel[v] - 1);\r\n    int w = k.mt[res[u]][res[v]];\r\n    qw(w == INF ? -1 : w, '\\n');\r\n  }\r\n}\r\n\r\n} // namespace Fusu\r\n```\r\n\r\n~~\u600e\u4e48\u6700\u8fd1\u505a\u7684\u5168\u662f\u77e9\u4e58\u9898~~\r\n\r\n",
        "postTime": 1590676357,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6573 \u3010[BOI 2017] Toll\u3011"
    },
    {
        "content": "\u89c2\u5bdf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6574\u4e2a\u56fe\u5176\u5b9e\u662f\u4e00\u4e2a\u5206\u5c42\u56fe\uff0c\u6bcf\u5c42\u6709 $k$ \u4e2a\u70b9\uff0c\u8fb9\u53ea\u5728\u76f8\u90bb\u4e24\u5c42\u8fde\u8fb9\u3002\n\n\u56e0\u4e3a $k$ \u975e\u5e38\u5c0f\u53ea\u6709 $5$\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u7ef4\u62a4\u76f8\u90bb\u4e24\u5c42\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u8be2\u95ee\u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u4e2d\u7684\u77e9\u9635\u5e7f\u4e49\u4e58\u8d77\u6765\u4e4b\u540e\u67d0\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002\n\n\u90a3\u4e48\u76f4\u63a5\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\u5373\u53ef\u3002\n\n> \u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\uff1a\n\n> $$c_{i,j}=\\min_{k}a_{i,k}+b_{k,j}$$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint k,n,m,o,lim;\nstruct node{\n\tint a[6][6];\n}tree[200005];\nconst node operator *(const node &x,const node &y){\n\tnode z;memset(z.a,0x3f,sizeof(z.a));\n\tfor(int i=0;i<k;i++)\n\t\tfor(int j=0;j<k;j++)\n\t\t\tfor(int p=0;p<k;p++)z.a[i][j]=min(z.a[i][j],x.a[i][p]+y.a[p][j]);\n\treturn z;\n}\nvoid build(int k,int l,int r){\n\tmemset(tree[k].a,0x3f,sizeof(tree[k].a));\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n}\nvoid change(int k,int l,int r,int x,int a,int b,int y){\n\tif(l==r){\n\t\ttree[k].a[a][b]=y;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid)change(k*2,l,mid,x,a,b,y);\n\telse change(k*2+1,mid+1,r,x,a,b,y);\n\ttree[k]=tree[k*2]*tree[k*2+1];\n}\nnode query(int k,int l,int r,int x,int y){\n\tif(l>=x&&r<=y)return tree[k];\n\tint mid=l+r>>1;\n\tif(y<=mid)return query(k*2,l,mid,x,y);\n\telse if(x>mid)return query(k*2+1,mid+1,r,x,y);\n\telse return query(k*2,l,mid,x,y)*query(k*2+1,mid+1,r,x,y);\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&k,&n,&m,&o);lim=(n-1)/k+1;\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n\t\tchange(1,1,lim,x/k+1,x%k,y%k,z);\n\t}\n\tfor(int i=1;i<=o;i++){\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\tif(x/k==y/k)puts(\"-1\");\n\t\telse{\n\t\t\tnode res=query(1,1,lim,x/k+1,y/k);\n\t\t\tif(res.a[x%k][y%k]==0x3f3f3f3f)puts(\"-1\");\n\t\t\telse printf(\"%d\\n\",res.a[x%k][y%k]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1655554179,
        "uid": 233462,
        "name": "Umbrella_Leaf",
        "ccfLevel": 8,
        "title": "\u9898\u89e3P6573 [BalticOI 2017] Toll"
    },
    {
        "content": "# \u601d\u8def\u6d41\u7a0b\n\n\u5148\u89c2\u5bdf\u9898\u76ee\uff0c\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u5206\u5c42\u56fe\uff0c\u5e76\u4e14\u8be2\u95ee\u6700\u77ed\u8def\uff0c\u80af\u5b9a\u662f\u4e00\u9053DP\u7c7b\u7684\u9898\u76ee\u3002\n\n\u53d1\u73b0\u8be2\u95ee\u8d85\u7ea7\u591a\uff0c\u5982\u679c\u66b4\u529b\u8dd1DP\u80af\u5b9a\u4f1aT\u6389\uff0c\u4e8e\u662f\u89c2\u5bdf\u5206\u5c42\u56fe\u6bcf\u5c42\u7684\u70b9\u6570\uff0c\u53ea\u6709\u6700\u591a5\u4e2a\uff0c\u8bf4\u660e\u76f8\u90bb\u4e24\u5c42\u7684\u70b9\u76f8\u8fde\u5173\u7cfb\u53ef\u4ee5\u7528\u77e9\u9635\uff08\u4e34\u63a5\u77e9\u9635\uff09\u8868\u793a\u3002\n\n\u5efa\u4e34\u63a5\u77e9\u9635\u65f6\u53ef\u4ee5\u628a\u5728\u5de6\u4fa7\u7684\u4e00\u5c42\u70b9\u547d\u540d\u4e3a $0$ ~ $K$ , \u628a\u53f3\u4fa7\u7684\u4e00\u5c42\u70b9\u547d\u540d\u4e3a $K+1$ ~ $2K$\n\n\u5982\u6837\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/573xszb1.png)\n\n\u53ef\u4ee5\u521d\u6b65\u5efa\u51fa $1$ -> $2$ , $2$ -> $3$ \u5c42\u7684\u4e34\u63a5\u77e9\u9635\n```\n1-2\u3002\nINF\tINF\tINF\tINF\tINF\t9\tINF\t7\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\t10\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\n```\n\n2-3\u3002\uff08\u6b64\u5904 $5$ ~ $9$ \u8282\u70b9\u4e3a\u4e86\u65b9\u4fbf\u5b58\u50a8\u6682\u65f6\u547d\u540d\u4e3a $0$ ~ $4$ , $10$ ~ $13$ \u547d\u540d\u4e3a $5$ ~ $8$ \uff09\n\n```\nINF\tINF\tINF\tINF\tINF\tINF\tINF\t10\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\t8\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\t\nINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\tINF\n```\n\n\n\u8003\u8651\u62e5\u6709 $1$ -> $2$  \u548c $2$ -> $3$ \u5c42\u7684\u4e34\u63a5\u77e9\u9635\u540e\u5982\u4f55\u5f97\u5230 $1$ -> $3$ \u7684\u6700\u77ed\u8def\u77e9\u9635\n\n\u518d\u5e7f\u4e49\u4e00\u70b9\uff0c\u5c31\u662f\u8bf4\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5f97\u5230 $a$ -> $b$ \u5c42 \u548c $b$ -> $c$ \u5c42\u7684\u6700\u77ed\u8def\u77e9\u9635\uff0c\u5982\u4f55\u5f97\u5230 $a$ -> $c$ \u5c42\u7684\u6700\u77ed\u8def\u77e9\u9635\u3002\n\n\u6b64\u65f6\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u70b9\u5171\u6709\u4e09\u5c42\u3002\u5176\u4e2d\u8fd9\u4e09\u5c42\u7684\u70b9\u547d\u540d\u4e0d\u80fd\u91cd\u5408\uff0c\u4e0d\u59a8\u4ee4\u6700\u5de6\u8fb9\u7684 $a$ \u5c42\u70b9\u7684\u7f16\u53f7\u4e3a $0$ ~ $K$ ,\u540c\u7406\u53ef\u5f97\uff1a$b$ \u5c42\uff1a $K+1$ ~ $2K$ , c\u5c42 : $2K+1$ ~ $3K$\n\n\u89c2\u5bdf\u53d1\u73b0\u5de6\u8fb9\u7684 $a$ -> $b$ \u5c42\u77e9\u9635\u4e2d\u7684\u70b9\u7f16\u53f7\u4e5f\u662f $0$ ~ $K$ \u548c $K+1$ ~ $2K$,\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u8be5\u6700\u77ed\u8def\u77e9\u9635\u4e0d\u9700\u8981\u6539\u53d8\u3002\n\n\u5f88\u9057\u61be\u7684\u662f $b$ -> $c$ \u5c42\u77e9\u9635\u4e2d\u7684\u70b9\u7f16\u53f7\u4e5f\u662f $0$ ~ $K$ \u548c $K+1$ ~ $2K$ \uff0c\u90a3\u4e48\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u9700\u8981\u628a\u77e9\u9635\u4e8c\u7684\u70b9\u7f16\u53f7\u91cd\u6392\u4e00\u4e0b,\u8f6c\u6210 $2K+1$ ~ $3K$\uff0c\u4ece\u800c\u53d8\u6210\u4e00\u4e2a $3K \\times 3K$ \u7684\u77e9\u9635\uff1a\n```\nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF 10  INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF 8   INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF \nINF INF INF INF INF INF INF INF INF INF INF INF INF INF INF\n```\n\n\u90a3\u4e48\u6839\u636e\u6211\u4eec\u4ee5\u5f80\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u7528\u77e9\u9635\u4e00\u4e58\u4e0a\u77e9\u9635\u4e8c\u5c31\u53ef\u4ee5\u5f97\u5230 $a$ ~ $c$ \u5c42\u7684\u6700\u77ed\u8def\u77e9\u9635\n\n\u8fd9\u91cc\u7684\u4e58\u6cd5\u5b9a\u4e49\u4e3a :\n\n $(A \\times B)_{i,j} =\\min_{p=0}^{K-1} (A_{i,x} + B_{x,j})$\n \n \u4e0d\u96be\u53d1\u73b0\u77e9\u9635\u76f8\u4e58\u7684\u8fd0\u7b97\u6cd5\u5219\u7c7b\u4f3c\u4e8e\u505a\u4e86\u4e00\u904d\u5947\u602a\u7684 $Floyed$ \u3002\n \n $Tip.$ \u7b97\u5b8c\u4e4b\u540e\u8bb0\u5f97\u628a $c$ \u5c42\u70b9\u7684\u7f16\u53f7($2K+1$ ~ $3K$ ) \u8f6c\u56de $K+1$ ~ $2K$ \u7684\u70b9\u7f16\u53f7\u5f62\u5f0f\u5f97\u5230\u4e00\u4e2a $2K \\times 2K$ \u7684 $a$ -> $c$ \u6700\u77ed\u8def\u77e9\u9635\n \n \u81f3\u6b64\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u80fd\u5728 $O(logn \\times K^3)$ \u6c42\u51fa\u4efb\u610f\u4e24\u5c42\u70b9\u7684\u6700\u77ed\u8def\u77e9\u9635\n \n \u4e0d\u96be\u8003\u8651\u5230\u7ebf\u6bb5\u6811\uff0cRMQ\u7b49\u7b97\u6cd5\n \n \u8fd9\u91cc\u7ed9\u51fa\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u53ca\u4ee3\u7801\n \n ```cpp\n#include <cstdio>\n#include <cstring>\nusing namespace std;\ninline int getint() {\n    char c;\n    int ans = 0;\n    while (c = getchar(), c > '9' || c < '0');\n    while (ans = ans * 10 + c - '0', c = getchar(), c >= '0' && c <= '9');\n    return ans;\n}\nconst int N = 50010, M = 11, H_M = 16;\nint n, m, K, q;\nint id[N];\nstruct H_Matrix {\n    int m[H_M][H_M];\n};\nstruct Matrix {\n    int m[M][M];\n} null;\nstruct Segment {\n    int l, r, ls, rs;\n    Matrix dat;\n} t[N << 2];\nstruct Map {\n    Matrix g;\n} a[N];\nint pug[N];\nint sum_g, Root, tot;\n\ninline int min(int a, int b) { return a < b ? a : b; }\ninline void print(H_Matrix x) {\n    for (register int i = 1; i <= (K << 1) + K; ++i) {\n        for (register int j = 1; j <= (K << 1) + K; ++j)\n            if (x.m[i][j] >= 0x3f3f3f3f)\n                printf(\"INF \");\n            else\n                printf(\"%d   \", x.m[i][j]);\n        puts(\"\");\n    }\n    puts(\"\");\n}\nMatrix operator * (Matrix a, Matrix b) {\n\t//\u8fd9\u91cc\u76f4\u63a5\u5728\u4e58\u6cd5\u4e2d\u8fdb\u884c\u7f16\u53f7\u6269\u5c55\uff0c\u518d\u8d4b\u503c\u56de\u53bb\uff0c\u80fd\u7701\u5f88\u591a\u7a7a\u95f4\u3002\n    int sx = K << 1;\n    Matrix res;\n    H_Matrix c, ans;\n    memset(ans.m, 0x3f, sizeof ans.m);\n    memset(c.m, 0x3f, sizeof c.m);\n    memset(res.m, 0x3f, sizeof res.m);\n    for (register int i = K + 1; i <= sx + K; ++i)\n        for (register int j = K + 1; j <= sx + K; ++j) c.m[i][j] = b.m[i - K][j - K];\n    for (register int i = 1; i <= sx + K; ++i) {\n        for (register int k = 1; k <= sx + K; ++k) {\n            for (register int j = 1; j <= sx + K; ++j) {\n                ans.m[i][j] = min(ans.m[i][j], a.m[i][k] + c.m[k][j]);\n            }\n        }\n    }\n    for (register int i = 1; i <= K; ++i) {\n        for (register int j = sx + 1; j <= sx + K; ++j) {\n            res.m[i][j - K] = ans.m[i][j];\n        }\n    }\n    return res;\n}\n\ninline void update(int p) {\n    if (t[p].ls && t[p].rs)\n        t[p].dat = t[t[p].ls].dat * t[t[p].rs].dat;\n    else\n        t[p].dat = t[t[p].ls | t[p].rs].dat;\n}\ninline void build_tree(int &p, int left, int right) {\n    if (!p)\n        p = ++tot;\n    t[p].l = left, t[p].r = right;\n    if (left == right) {\n        t[p].dat = a[left].g;\n        return;\n    }\n    int mid = left + right >> 1;\n    build_tree(t[p].ls, left, mid);\n    build_tree(t[p].rs, mid + 1, right);\n    update(p);\n}\ninline Matrix ask(int p, int left, int right) {\n    if (!p)\n        return null;\n    if (t[p].l >= left && t[p].r <= right)\n        return t[p].dat;\n    int mid = t[p].l + t[p].r >> 1;\n    if (left <= mid && right <= mid)\n        return ask(t[p].ls, left, right);\n    if (left > mid && right > mid)\n        return ask(t[p].rs, left, right);\n    if (left <= mid && right > mid)\n        return ask(t[p].ls, left, right) * ask(t[p].rs, left, right);\n}\nsigned main() {\n    memset(null.m, 0, sizeof null.m);\n    K = getint(), n = getint(), m = getint(), q = getint();\n    if (n % K)\n        n = n / K * K + K;\n    for (register int i = 1; i <= n; ++i) id[i] = (i - 1) / K + 1;\n    sum_g = n / K;\n    int a_, b, t;\n    for (register int i = 1; i < sum_g; ++i) {\n        memset(a[i].g.m, 0x3f, sizeof a[i].g.m);\n    }\n    for (register int i = 1; i <= m; ++i) {\n        a_ = getint(), b = getint(), t = getint();\n        ++a_, ++b;\n        a[id[a_]].g.m[(a_ - 1) % K + 1][(b - 1) % K + 1 + K] = t;\n    }\n    build_tree(Root, 1, sum_g - 1);\n    while (q--) {\n        a_ = getint(), b = getint();\n        if (a_ == b) {\n            puts(\"0\");\n            continue;\n        }\n        ++a_, ++b;\n        if (id[a_] >= id[b]) {\n            puts(\"-1\");\n            continue;\n        }\n        Matrix ans = ask(1, id[a_], id[b] - 1);\n        int p = ans.m[(a_ - 1) % K + 1][(b - 1) % K + 1 + K];\n        if (p >= 0x3f3f3f3f)\n            puts(\"-1\");\n        else\n            printf(\"%d\\n\", p);\n    }\n    return 0;\n}\n\n\n \n ```\n\n",
        "postTime": 1603093652,
        "uid": 113959,
        "name": "bigmurmur",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6573 \u3010[BalticOI 2017] Toll\u3011"
    },
    {
        "content": "\u6839\u672c\u4e0d\u9700\u8981\u77e9\u9635\uff0c\u76f4\u63a5\u500d\u589e DP \u5373\u53ef\u3002\n\n\u8bb0\u5f55\u72b6\u6001 $f_{i,u,v,k}$ \u8868\u793a\u4ece\u7b2c $i$ \u5c42\u7684\u7b2c $u$ \u4e2a\u8282\u70b9\u51fa\u53d1\uff0c\u5230\u7b2c $i+2^k$ \u5c42\u7684\u7b2c $v$ \u4e2a\u8282\u70b9\u7ed3\u675f\u7684\u6700\u77ed\u8def\u3002\n\n\u679a\u4e3e\u4e2d\u8f6c\u70b9\u8f6c\u79fb $f_{i,u,v,k}=\\min\\limits_{p}\\{f_{i,u,p,k - 1} + f_{i +2^{k - 1},p,v,k - 1}\\}$\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(K^3N\\log N)$\u3002\n\n\u4e8b\u5b9e\u4e0a\u6211\u4eec\u76f4\u63a5\u5199\u5206\u6cbb\u7b97\u6cd5\u53ef\u4ee5\u505a\u5230 $\\mathcal{O}(K^2N\\log N)$ \u7684\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e\u8de8\u4e2d\u70b9\u7684\u8be2\u95ee\uff0c\u5206\u522b\u8ba1\u7b97\u4e24\u8fb9\u7136\u540e\u5c06\u7b54\u6848\u62fc\u8d77\u6765\u3002\n\n```cpp\n#define N 50005\nint k, n, m, o, f[N][5][5][16], t;\nint main() {\n\tk = read(), n = read(), m = read(), o = read();\n\tn = n / k, t = log2(n);\n\tmemset(f, 0x3f, sizeof(f));\n\twhile(m--){\n\t\tint a = read(), b = read(), c = read();\n\t\tf[a / k][a % k][b % k][0] = c;\n\t}\n\trp(j, t)rep(i, 0, n - (1 << j))rep(u, 0, k - 1)rep(v, 0, k - 1)rep(p, 0, k - 1)\n\t\tcmn(f[i][u][v][j], f[i][u][p][j - 1] + f[i + (1 << (j - 1))][p][v][j - 1]);\n\twhile(o--){\n\t\tint a = read(), b = read();\n\t\tif(a / k >= b / k)puts(\"-1\");\n\t\telse{\n\t\t\tint p[5], q[5], w = (b / k - a / k); \n\t\t\tmemset(p, 0x3f, sizeof(p));\n\t\t\tp[a % k] = 0, a /= k;\n\t\t\tpre(i, t, 0)if((w >> i) & 1){\n\t\t\t\tmemset(q, 0x3f, sizeof(q));\n\t\t\t\trep(u, 0, k - 1)rep(v, 0, k - 1)\n\t\t\t\t\tcmn(q[u], p[v] + f[a][v][u][i]);\n\t\t\t\trep(u, 0, k - 1)p[u] = q[u];\n\t\t\t\ta += 1 << i;\n\t\t\t}\n\t\t\tif(p[b % k] < 0x3f3f3f3f)printf(\"%d\\n\", p[b % k]); else puts(\"-1\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1636951957,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[BalticOI 2017] Toll"
    },
    {
        "content": "\u89c2\u5bdf\u5230\u9898\u76ee\u4e2d\u7684\u7279\u6b8a\u5f0f\u5b50\u6709\u4e9b\u602a\u5f02\uff0c\u4e14 $k$ \u53c8\u5341\u5206\u5c0f\uff0c\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u53d1\u73b0\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u662f\u7ed9\u5b9a\u4e86\u4e00\u5f20\u6bcf\u4e00\u5c42\u8282\u70b9\u4e2a\u6570\u90fd\u4e3a $k$ \u7684\u5206\u5c42 DAG.\n\n\u5148\u601d\u8003\u4e00\u4e0b\u6734\u7d20\u7684\u7b97\u6cd5\u5e94\u8be5\u600e\u4e48\u505a\uff1a\u4e0d\u59a8\u8bbe $dp_i$ \u8868\u793a\u5230\u8fbe $i$ \u7684\u6700\u5c11\u4ef7\u94b1\uff0c\u5219\u6bcf\u6b21\u8be2\u95ee\u5c31\u9700\u8981\u4ece $a$ \u5230 $b$ \u8dd1\u4e00\u8fb9\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a\n$$\ndp_u=\\min_{v\\to u}(dp_v+t_{v,u})\n$$\n\u8003\u8651\u5230 $k$ \u5341\u5206\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e00\u5c42\u8282\u70b9\u7684\u8f6c\u79fb\u65b9\u7a0b\u538b\u6210\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff08\u77e9\u9635\u76f8\u8f83\u4e8e\u666e\u901a\u8f6c\u79fb\u65b9\u7a0b\uff0c\u989d\u5916\u6ee1\u8db3\u4e86\u7ed3\u5408\u5f8b\uff09\u6b64\u65f6\u6211\u4eec\u4fbf\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8f6c\u79fb\u77e9\u9635\u7684\u533a\u95f4\u79ef\uff0c\u6b64\u65f6\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 $a$ \u548c $b$ \u6240\u5728\u7684\u5c42\u6570\uff0c\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u67e5\u5230\u8f6c\u79fb\u77e9\u9635\uff0c\u7528\u521d\u59cb\u5411\u91cf\u4e0e\u4e4b\u76f8\u4e58\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nk^3+qk^3\\log n)$.\n\n\u6ce8\u610f\u5230\u74f6\u9888\u662f\u5728\u67e5\u8be2\uff0c\u5c06\u67e5\u8be2\u65f6\u7684\u77e9\u9635\u4e58\u77e9\u9635\u4f18\u5316\u4e3a\u5411\u91cf\u4e58\u77e9\u9635\u53ef\u4ee5\u4f18\u5316\u6389\u4e00\u4e2a\u5e38\u6570  $k$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define int long long\nconst int N=50005;\nconst int K=5;\nconst int INF=1e15;\nint p,n,m,q;\nstruct Matrix{\n\tint a[K][K];\n\tMatrix(){\n\t\tmemset(a,0x3f,sizeof(a));\n\t}\n}Z[N],ans;\nMatrix operator*(const Matrix&x,const Matrix&y){\n\tMatrix z;\n\tfor (int k=0;k<p;k++)\n\t\tfor (int i=0;i<p;i++)\n\t\t\tfor (int j=0;j<p;j++)\n\t\t\t\tz.a[i][j]=min(z.a[i][j],x.a[i][k]+y.a[k][j]);\n\treturn z;\n}\nstruct Tree{\n\tMatrix t[N<<2];\n\tvoid pushup(int i){\n\t\tt[i]=t[i<<1]*t[i<<1|1];\n\t}\n\tvoid build(int i,int l,int r){\n\t\tif (l==r){\n\t\t\tt[i]=Z[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(i<<1,l,mid);\n\t\tbuild(i<<1|1,mid+1,r);\n\t\tpushup(i);\n\t}\n\tvoid query(int i,int l,int r,int ql,int qr){\n\t\tif (ql<=l&&r<=qr){\n\t\t\tans=ans*t[i];\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tif (ql<=mid) query(i<<1,l,mid,ql,qr);\n\t\tif (mid<qr) query(i<<1|1,mid+1,r,ql,qr);\n\t}\n}T;\nint read(){\n\tint w=0,f=1;\n\tchar ch=getchar();\n\twhile (ch>'9'||ch<'0') {\n\t\tif (ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile (ch>='0'&&ch<='9') {\n\t\tw=(w<<3)+(w<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn w*f;\n}\nint bel(int x){\n\treturn (x-1)/p+1;\n}\nint quyu(int x){\n\treturn (x-1)%p;\n}\nsigned main(){\n\tp=read(),n=read(),m=read(),q=read();\n\tfor (int i=1;i<=m;i++){\n\t\tint u=read()+1,v=read()+1,now=bel(u),w=read();\n\t\tint uy=quyu(u),vy=quyu(v);\n\t\tZ[now].a[uy][vy]=w;\n\t}\n\tint all=bel(n);\n\tT.build(1,1,all);\n\twhile (q--){\n\t\tint x=read()+1,y=read()+1,bx=bel(x),by=bel(y),ux=quyu(x),uy=quyu(y);\n\t\tif (bx==by) puts(\"-1\");\n\t\telse{\n\t\t\tfor (int i=0;i<p;i++)\n\t\t\t\tif (i==ux) ans.a[0][i]=0;\n\t\t\t\telse ans.a[0][i]=INF;\n\t\t\tT.query(1,1,all,bx,by-1);\n\t\t\tif (ans.a[0][uy]>=1e9) puts(\"-1\");\n\t\t\telse cout<<ans.a[0][uy]<<\"\\n\";\n\t\t}\n\t}\n\treturn 0;  \n}\n\n```",
        "postTime": 1665381209,
        "uid": 257621,
        "name": "\u7ffc\u5fb7\u5929\u5c0a",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6573 [BalticOI 2017] Toll"
    }
]