[
    {
        "content": "## \u601d\u8def\n\n\n\u8fd9\u9898\u8981\u6c42\u7684\u662f\u5e26\u8d1f\u6743\u8fb9\u7684\u6700\u77ed\u8def\uff0c\u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u7528Dijkstra\u3002\u7136\u800cBellman-Ford\u6216SPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f$O(NM)$\uff0c\u800c\u4e14\u4f17\u6240\u5468\u77e5\uff0cUSACO\u603b\u662f\u5361SPFA\u7684\u3002\u5c3d\u7ba1\u8fd9\u9898\u6570\u636e\u6bd4\u8f83\u8001\uff0c\u56e0\u6b64SPFA+SLF\u53ef\u4ee5\u6c34\u8fc7\uff0c\u4f46\u662f\u6b63\u89e3\u5e76\u4e0d\u662f\u5982\u6b64\u3002\n\n\n\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316SPFA\u5e76\u4e0d\u6709\u6548(\u6765\u81ea[\u6a21\u677f]\u5355\u6e90\u6700\u77ed\u8def-\u9898\u89e3)\uff0c\u5728\u8fd9\u9898\u6bd4\u666e\u901aSPFA\u66f4\u6162\u3002\u7136\u800c\u5728\u67d0\u4e9b\u8fb9\u6743\u4e3a\u6b63\u7684\u5361SPFA\u7684\u56fe\u4e2d\uff0c\u51e0\u4e4e\u548cDijkstra\u4e0d\u76f8\u4e0a\u4e0b\u3002\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u56fe\u6709\u4e00\u4e2a\u5f88\u5f3a\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u65e0\u5411\u8fb9\uff0c\u8fb9\u6743\u603b\u662f\u6b63\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a\u65e0\u5411\u8fb9\u8054\u901a\u5757\u662f\u5f3a\u8054\u901a\u7684\u3002\u800c\u53ef\u80fd\u7684\u8d1f\u6743\u8fb9\u4fdd\u8bc1\u4e0d\u80fd\u53cd\u5411\u8054\u901a\uff0c\u56e0\u6b64\u628a\u65e0\u5411\u8fb9\u8054\u901a\u5757\u7f29\u70b9\u540e\uff0c\u5f97\u5230\u7684\u5c31\u662fDAG\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u5757\u5185\u4f7f\u7528Dijkstra\uff0c\u5757\u95f4\u5229\u7528\u62d3\u6251\u6392\u5e8f\u66f4\u65b0\u7b54\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(M\\log N)$\u3002\n\n\n## \u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=25005,INF=0x3f3f3f3f;\ntypedef pair<int,int> pii;\nvector<pii> roads[N],planes[N];\nvector<int> comp[N];\n//\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\nint belong[N],indeg[N],d[N];\n//belong[]\u8868\u793a\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u8054\u901a\u5206\u91cf\uff0cindeg[]\u8868\u793a\u8054\u901a\u5206\u91cf\u7684\u5165\u5ea6\nbool vis[N];\nvoid dfs(int k,int num)\n{\n    belong[k]=num;\n    comp[num].push_back(k);\n    for(auto e:roads[k])\n        if(!belong[e.first])\n            dfs(e.first,num);\n}\n//dfs\u6d2a\u6c34\u586b\u5145\nint main()\n{\n    int n,m,p,s;\n    cin>>n>>m>>p>>s;\n    while(m--)\n    {\n        int u,v,w;\n        cin>>u>>v>>w;\n        roads[u].push_back(make_pair(v,w));\n        roads[v].push_back(make_pair(u,w));\n    }\n    while(p--)\n    {\n        int u,v,w;\n        cin>>u>>v>>w;\n        planes[u].push_back(make_pair(v,w));\n    }\n    int c=0;\n    for(int i=1;i<=n;i++)\n        if(!belong[i])\n            dfs(i,++c);\n    for(int i=1;i<=n;i++)\n        for(auto e:planes[i])\n            indeg[belong[e.first]]++;\n    fill(d+1,d+n+1,INF);\n    d[s]=0;\n    queue<int> Q;\n    for(int i=1;i<=c;i++)\n        if(!indeg[i])\n            Q.push(i);\n    while(!Q.empty())\n    {\n        int k=Q.front();Q.pop();\n        priority_queue<pii,vector<pii>,greater<pii>> PQ;\n        for(auto i:comp[k])\n            if(d[i]<INF)\n                PQ.push(make_pair(d[i],i));\n        while(!PQ.empty())\n        {\n            pii k=PQ.top();PQ.pop();\n            if(vis[k.second])\n                continue;\n            vis[k.second]=true;\n            for(auto e:roads[k.second])\n                if(d[k.second]+e.second<d[e.first])\n                    PQ.push(make_pair(d[e.first]=d[k.second]+e.second,e.first));\n            for(auto e:planes[k.second])\n                d[e.first]=min(d[e.first],d[k.second]+e.second);\n        }\n        for(auto i:comp[k])\n            for(auto e:planes[i])\n                if(--indeg[belong[e.first]]==0)\n                    Q.push(belong[e.first]);\n    }\n  //\u62d3\u6251\u6392\u5e8f\u548cDijkstra\n    for(int i=1;i<=n;i++)\n        if(d[i]==INF)\n            cout<<\"NO PATH\\n\";\n        else\n            cout<<d[i]<<endl;\n    return 0;\n}\n```\n\n## \u62d3\u5c55\uff1a\u751f\u6210\u6570\u636e\n\n\n\u8fd9\u9898\u5f88\u6709\u8da3\uff0c\u56e0\u6b64\u6211\u601d\u8003\u4e86\u5982\u4f55\u751f\u6210\u6570\u636e\u3002\u76f4\u63a5\u968f\u673a\u663e\u7136\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u9700\u8981\u4e00\u5b9a\u7684\u6784\u9020\u3002\u6211\u7684\u65b9\u6cd5\u662f\uff1a\u53ef\u4ee5\u5148\u786e\u5b9a\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u5728\u8fde\u901a\u5206\u91cf\u4e2d\u751f\u6210\u6811\u4fdd\u8bc1\u8fde\u901a\uff0c\u518d\u5728\u8fde\u901a\u5206\u91cf\u5185\u968f\u673a\u6dfb\u52a0\u8fb9\u3002\u7136\u540e\u5728\u8fde\u901a\u5206\u91cf\u95f4\u751f\u6210\u6811\u4fdd\u8bc1\u8fde\u901a\uff0c\u518d\u968f\u673a\u52a0\u8fb9\u3002\u53ea\u8981\u89c4\u6a21\u8db3\u591f\u5927\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u6570\u636e\u8db3\u4ee5\u5361\u6389SPFA\u4e86\u3002\n\n\n\u9644\u4ee3\u7801\u4f9b\u53c2\u8003(C++11)\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nofstream fout(\"roadplane.in\");\nconst int n=100000,m=300000,w=50000,cn=1000,W=100000;\nint belong[n+5];\nvector<int> comp[cn+5];\nint f[n+5];\nint getf(int x)\n{\n    return f[x]==x?x:f[x]=getf(f[x]);\n}\nint main()\n{\n    minstd_rand gen(time(NULL));\n    for(int i=1;i<=n;i++)\n    {\n        uniform_int_distribution<> dc(1,cn);\n        belong[i]=dc(gen);\n        comp[belong[i]].push_back(i);\n    }\n    assert(comp[1].size());\n    uniform_int_distribution<> d(0,comp[1].size()-1);\n    fout<<n<<' '<<m<<' '<<w<<' '<<comp[1][d(gen)]<<endl;\n    for(int i=1;i<=cn;i++)\n    {\n        int cnt=0;\n        for(int j=0;j<comp[i].size();j++)\n            f[j]=j;\n        while(cnt+1<comp[i].size())\n        {\n            uniform_int_distribution<> did(0,comp[i].size()-1);\n            int u=did(gen),v=did(gen),ru=getf(u),rv=getf(v);\n            if(ru!=rv)\n            {\n                f[ru]=rv;\n                cnt++;\n                uniform_int_distribution<> dw(0,W);\n                fout<<comp[i][u]<<' '<<comp[i][v]<<' '<<dw(gen)<<endl;\n            }\n        }\n    }\n    for(int i=n-cn+1;i<=m;i++)\n    {\n        uniform_int_distribution<> dc(1,cn);\n        int c=dc(gen);\n        if(!comp[c].size())\n        {\n            i--;\n            continue;\n        }\n        uniform_int_distribution<> did(0,comp[c].size()-1),dw(0,W);\n        fout<<comp[c][did(gen)]<<' '<<comp[c][did(gen)]<<' '<<dw(gen)<<endl;\n    }\n    for(int i=1;i<=cn;i++)\n        f[i]=i;\n    for(int i=1;i<cn;)\n    {\n        uniform_int_distribution<> dc(1,cn-1);\n        int cu=dc(gen);\n        uniform_int_distribution<> dc1(cu+1,cn);\n        int cv=dc1(gen),rcu=getf(cu),rcv=getf(cv);\n        if(rcu==rcv)\n            continue;\n        f[rcu]=rcv;\n        if(!comp[cu].size()||!comp[cv].size())\n            continue;\n        uniform_int_distribution<> didu(0,comp[cu].size()-1),didv(0,comp[cv].size()-1),dw(-W,W);\n        fout<<comp[cu][didu(gen)]<<' '<<comp[cv][didv(gen)]<<' '<<dw(gen)<<endl;\n        i++;\n    }\n    for(int i=cn;i<=w;)\n    {\n        uniform_int_distribution<> dc(1,cn-1);\n        int cu=dc(gen);\n        uniform_int_distribution<> dc1(cu+1,cn);\n        int cv=dc1(gen);\n        if(!comp[cu].size()||!comp[cv].size())\n            continue;\n        uniform_int_distribution<> didu(0,comp[cu].size()-1),didv(0,comp[cv].size()-1),dw(-W,W);\n        fout<<comp[cu][didu(gen)]<<' '<<comp[cv][didv(gen)]<<' '<<dw(gen)<<endl;\n        i++;\n    }\n    return 0;\n}\n```\n",
        "postTime": 1497423447,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "# \u601d\u8def\n\u9898\u4e2d\u7ed9\u51fa\u7684\u56fe\u6709\u5355\u5411\u8fb9\u548c\u53cc\u5411\u8fb9\uff0c\u5176\u4e2d\u5355\u5411\u8fb9\u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\uff0c\u8fd9\u5176\u5b9e\u5c31\u8bf4\u660e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7528dijkstra\u3002\uff08\u8c8c\u4f3c\u53ef\u4ee5\u53cc\u7aef\u961f\u5217\u4f18\u5316\u7684spfa\u6c34\u8fc7\u53bb= =\n\n\u6ce8\u610f\u5230\u65e0\u5411\u8fb9\u8fb9\u6743\u662f\u975e\u8d1f\u7684\uff0c\u8fd9\u63d0\u793a\u6211\u4eec\u53ef\u4ee5\u5728\u65e0\u5411\u8fb9\u4e0a\u8dd1\u6700\u77ed\u8def\u3002\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u5c06\u65e0\u5411\u8fb9\u8fde\u63a5\u7684\u70b9\u7f29\u4e3a\u4e00\u70b9\uff0c\u6700\u540e\u56fe\u4e2d\u53ea\u5269\u4e0b\u6709\u5411\u8fb9\u7684\u8bdd\uff0c\u8fd9\u4e2a\u56fe\u5c31\u662f\u4e00\u4e2aDAG\uff0cDAG\u4e0a\u66f4\u65b0\u6700\u77ed\u8def\u8fd8\u662f\u5f88\u5bb9\u6613\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u5f00\u8003\u8651\uff0c\u9996\u5148\u6c42\u51fa\u82e5\u5e72\u4e2a\u7531\u65e0\u5411\u8fb9\u7ec4\u6210\u7684\u8fde\u901a\u5757\uff0c\u5bf9\u4e8e\u5757\u5185\u7684\u70b9\uff0c\u901a\u8fc7\u5806\u4f18\u5316\u7684dijkstra\u7b97\u6cd5\u66f4\u65b0\u6700\u77ed\u8def\uff1b\u7136\u540e\u5728\u5757\u4e0e\u5757\u4e4b\u95f4\uff0c\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\uff0c\u4e00\u5c42\u4e00\u5c42\u5730\u8fdb\u884c\u66f4\u65b0\uff0c\u6700\u540e\u5c31\u53ef\u4ee5\u6c42\u51fa\u6e90\u70b9$s$\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u4e86\u3002\n\n\u4f46\u8fd9\u91cc\u6709\u4e2a\u7ec6\u8282\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u8981\u5220\u53bb\u5b83\u4eec\u76f8\u5e94\u7684\u51fa\u8fb9\uff0c\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5c31\u4e0d\u80fd\u6b63\u5e38\u6267\u884c\uff08\u8111\u8865\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\uff09\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u52a0\u5165$s$\u6240\u5728\u5757\u65f6\uff0c\u8fd8\u8981\u628a\u5176\u5b83\u5165\u5ea6\u4e3a0\u7684\u5757\u4e5f\u7b97\u8fdb\u53bb\u7684\u539f\u56e0\u3002\uff08~~\u6211\u4e00\u5f00\u59cb\u5c31\u662f\u8fd9\u91cc\u5361\u4e86\u597d\u4e45~~\n\n\u8fd8\u6709\u5c31\u662f\u4ee3\u7801\u4e2d\u6700\u540e\u5224\u4e0d\u53ef\u5230\u8fbe\u65f6\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8def\u5f84\u957f\u5ea6\u6700\u591a\u4e3a$25000*10000=2.5*10^8$\u3002\u90a3\u4e48\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u6700\u77ed\u8def\u503c\u4e00\u5b9a\u5c0f\u4e8e$2.5*10^8$\u3002\u4e00\u5f00\u59cb\u6211\u4eec\u5c06$d$\u6570\u7ec4\u7f6e\u4e3a\u65e0\u7a77\u5927(\u4e5f\u5c31\u662f$2e9$\u5de6\u53f3)\uff0c$0x3f3f3f3f$\u5927\u5c0f\u4e3a$1e9$\uff0c\u5982\u679c\u6700\u540e\u7684\u6700\u77ed\u8def\u957f\u5ea6\u5927\u4e8e$0x3f3f3f3f$\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0d\u53ef\u5230\u7684\u3002\n\n# \u8be6\u89c1\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long ll;\nconst int N = 50005, M = 100005;\nint n, r, p, s;\nstruct Edge{\n    int v, next, w;\n}e[M << 1];\nstruct node{\n    int d, u;\n    bool operator < (const node &A) const {\n        return d > A.d;\n    }\n};\nint head[N], tot;\nvoid adde(int u, int v, int w) {\n    e[tot].v = v; e[tot].w = w; e[tot].next = head[u]; head[u] = tot++;\n}\nbool vis[N] ;\nint cnt;\nint bl[N], in[N];\nint d[N] ;\nvector <int> block[N];\nvoid dfs(int u) {\n    vis[u] = 1;\n    bl[u] = cnt;\n    block[cnt].push_back(u) ;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(vis[v]) continue ;\n        dfs(v) ;\n    }\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    cin >> n >> r >> p >> s;\n    memset(head, -1, sizeof(head)) ;\n    for(int i = 1; i <= r; i++) {\n        int a, b, c;\n        cin >> a >> b >> c;\n        adde(a, b, c);\n        adde(b, a, c);\n    }\n    for(int i = 1; i <= n; i++) {\n        if(!vis[i]) {\n            cnt++;\n            dfs(i) ;\n        }\n    }\n    for(int i = 1; i <= p; i++) {\n        int a, b, c;\n        cin >> a >> b >> c;\n        adde(a, b, c) ;\n        in[bl[b]]++;\n    }\n    memset(vis, 0, sizeof(vis)) ;\n    memset(d, 0x7f, sizeof(d)) ;\n    d[s] = 0;\n    queue <int> Q;\n    Q.push(bl[s]) ;\n    for(int i = 1; i <= cnt; i++) if(!in[i]) Q.push(i) ;\n    priority_queue <node> q;\n    while(!Q.empty()) {\n        int blo = Q.front();Q.pop() ;\n        for(auto u : block[blo])\n            q.push(node{d[u], u}) ;\n        while(!q.empty()) {\n            node now = q.top(); q.pop();\n            int u = now.u;\n            if(vis[u]) continue ;\n            vis[u] = 1;\n            for(int i = head[u]; i != -1; i = e[i].next) {\n                int v = e[i].v;\n                if(d[v] > d[u] + e[i].w) {\n                    d[v] = d[u] + e[i].w;\n                    if(bl[v] == bl[u]) q.push(node{d[v],v}) ;\n                }\n                if(bl[v] != bl[u] && (--in[bl[v]]) == 0) Q.push(bl[v]) ;\n            }\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        if(d[i] > INF) cout << \"NO PATH\" << '\\n' ;\n        else cout << d[i] << '\\n' ;\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1557291978,
        "uid": 29563,
        "name": "heyuhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "\u5c31\u662f\u4e00\u4e2a\u6734\u7d20\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u56e0\u4e3a\u6709\u8d1f\u8fb9\u4f46\u662f\u6ca1\u6709\u8d1f\u73af\uff0c\u6240\u4ee5\u53ef\u4ee5SPFA\u6c42\u89e3\n\n\u53ea\u4e0d\u8fc7\u4e00\u822c\u7684SPFA\u4f1aTLE\u5927\u7ea61~2\u4e2a\u70b9\uff0c\u6240\u4ee5\u52a0\u4e0aSLF\u4f18\u5316\u5c31\u53ef\u4ee5\u8fc7\u4e86\n\nSLF\u662f\u4ec0\u4e48\uff1f\u628a\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u65f6\u548c\u961f\u5934\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u4f18\u63d2\u5230\u961f\u5934\u5426\u5219\u63d2\u961f\u5c3e\uff0c\u8fd9\u6837\u65f6\u95f4\u53ef\u4ee5\u4f18\u5316\u5f88\u591a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstdlib>\n#include<string>\n#include<ctime>\n#include<queue>\n#include<climits>\nusing namespace std;\ndeque<int>q;//\u53cc\u7aef\u961f\u5217\nbool vis[100001];\nint n,m1,m2,s,dist[100001];\nint nedge=0,p[200001],c[200001],nex[200001],head[200001];\ninline void addedge(int x,int y,int z){\n    p[++nedge]=y;c[nedge]=z;\n    nex[nedge]=head[x];head[x]=nedge;\n}\ninline void spfa(int x){\n    for(int i=1;i<=n;i++)dist[i]=1e9;\n    memset(vis,0,sizeof vis);\n    dist[x]=0;vis[x]=1;q.push_back(x);\n    while(!q.empty()){\n        int now=q.front();q.pop_front();\n        for(int k=head[now];k;k=nex[k])if(dist[p[k]]>dist[now]+c[k]){\n            dist[p[k]]=dist[now]+c[k];\n            if(!vis[p[k]]){\n                if(!q.empty()&&dist[p[k]]>=dist[q.front()])q.push_back(p[k]);//\u4e0e\u961f\u5934\u6bd4\u8f83\n                else q.push_front(p[k]);\n                vis[p[k]]=1;\n            }\n        }\n        vis[now]=0;\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m1,&m2,&s);\n    for(int i=1;i<=m1;i++){\n        int x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n        addedge(x,y,z);addedge(y,x,z);\n    }\n    for(int i=1;i<=m2;i++){\n        int x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n        addedge(x,y,z);\n    }\n    spfa(s);\n    for(int i=1;i<=n;i++)if(dist[i]<1e9)printf(\"%d\\n\",dist[i]);\n    else puts(\"NO PATH\");\n    return 0;\n}\n```",
        "postTime": 1495931661,
        "uid": 5716,
        "name": "jzqjzq",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "\u62cd\u4e2a\u53ea\u8981\u4e00\u904dDijkstra\u7684\u9898\u89e3QwQ\u3002\n\n\u89c2\u5bdf\u5230\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5Dijkstra\uff0c\u4f46\u662f\u53ef\u4ee5\u9b54\u6539\u4e00\u4e0b\u3002\u5982\u679c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u98de\u673a\u7684\u6700\u77ed\u8def\u5f84\u90fd\u5df2\u7ecf\u7ed3\u7b97\u4e86\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762\u4f7f\u7528Dijkstra\u7684\u3002\n\n\u6240\u4ee5\uff0c\u6211\u7684\u505a\u6cd5\u662f\u5148\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u6267\u884c\u4e00\u904d\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u51fa\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u3002\u5728Dijkstra\u7684\u65f6\u5019\uff0c\u5c06\u62d3\u6251\u5e8f\u4f5c\u4f18\u5148\u961f\u5217\u7684\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u800c\u8ddd\u79bb\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u8fdb\u884cDijkstra\u3002\u6700\u540e\u53ea\u9700\u8981\u4e00\u904dDijkstra\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(n+m+nlogm)$\uff0c\u8017\u65f6\u2026\u2026\u548c\u6211\u4e00\u4e2a\u4e0d\u52a0\u5feb\u8bfb\u7684\u4eba\u6bd4\u4ec0\u4e48\u8017\u65f6QwQ\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\nint st[25005];\n\nint getfa(int x)\n{\n\treturn st[x]==x?x:st[x]=getfa(st[x]);\n}\n\nvoid unio(int a,int b)\n{\n\tst[getfa(a)] = getfa(b);\n}\n\nint stbeg[25005];\nint beg[25005];\nint ed[200005];\nint nxt[200005];\nint len[200005];\nint top;\n\nvoid addedge(int* beg,int a,int b,int l)\n{\n\t++top;\n\ted[top] = b;\n\tlen[top] = l;\n\tnxt[top] = beg[a];\n\tbeg[a] = top;\n}\n\nint stdeg[25005];\nint stvis[25005];\n\nvoid dfs(int x)\n{\n\tstvis[x] = 1;\n\tfor(int p=stbeg[x]; p; p=nxt[p])\n\t{\n\t\t++stdeg[ed[p]];\n\t\tif(!stvis[ed[p]])\n\t\t{\n\t\t\tdfs(ed[p]);\n\t\t}\n\t}\n}\n\nint sttopn[25005];\n\nvoid toposort(int x)\n{\n\tqueue<int> q;\n\tq.push(x);\n\t\n\twhile(!q.empty())\n\t{\n\t\tint th = q.front();\n\t\tq.pop();\n\t\t\n\t\tfor(int p=stbeg[th]; p; p=nxt[p])\n\t\t{\n\t\t\t--stdeg[ed[p]];\n\t\t\tif(!stdeg[ed[p]])\n\t\t\t{\n\t\t\t\tsttopn[ed[p]] = sttopn[th]+1;\n\t\t\t\tq.push(ed[p]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint n;\nint dist[25005];\nint vis[25005];\n\nvoid dijkstra(int s)\n{\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tdist[i] = 0x7f7f7f7f;\n\t}\n\tdist[s] = 0;\n\t\n\tpriority_queue<pair<pair<int,int>,int> > pq;\n\tpq.push(make_pair(make_pair(0,0),s));\n\t\n\twhile(!pq.empty())\n\t{\n\t\tint th = pq.top().second;\n\t\tpq.pop();\n\t\tif(vis[th])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tvis[th] = 1;\n\t\t\n\t\tfor(int p=beg[th]; p; p=nxt[p])\n\t\t{\n\t\t\tif(dist[ed[p]] > dist[th]+len[p])\n\t\t\t{\n\t\t\t\tdist[ed[p]] = dist[th]+len[p];\n\t\t\t\tpq.push(make_pair(make_pair(-sttopn[getfa(ed[p])],-dist[ed[p]]),ed[p]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint r,p,s;\n\tscanf(\"%d%d%d%d\",&n,&r,&p,&s);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tst[i] = i;\n\t}\n\tfor(int i=1; i<=r; ++i)\n\t{\n\t\tint a,b,l;\n\t\tscanf(\"%d%d%d\",&a,&b,&l);\n\t\taddedge(beg,a,b,l);\n\t\taddedge(beg,b,a,l);\n\t\tunio(a,b);\n\t}\n\tfor(int i=1; i<=p; ++i)\n\t{\n\t\tint a,b,l;\n\t\tscanf(\"%d%d%d\",&a,&b,&l);\n\t\taddedge(beg,a,b,l);\n\t\taddedge(stbeg,getfa(a),getfa(b),l);\n\t}\n\t\n\tdfs(getfa(s));\n\ttoposort(getfa(s));\n\t\n\tdijkstra(s);\n\t\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tprintf(\"NO PATH\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%d\\n\",dist[i]);\n\t\t}\n\t}\n}\n```",
        "postTime": 1564969483,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "### \u601d\u8def\n\u8fd9\u9898\u662f\u4e00\u9053\u5355\u6e90\u6700\u77ed\u8def\u9898\uff0c\u800c\u4e14\u6709\u8d1f\u6743\u8fb9\uff0c\u4e4d\u4e00\u770b\u7528SPFA\uff1b\u4f46\u662f\uff0c\u4f17\u6240\u5468\u77e5\uff0cUSACO\u5361SPFA\uff0c\u6240\u4ee5\u53ea\u80fd\u7528Dijkstra (\u4e0d\u8003\u8651SPFA+SLF\u7684\u60c5\u51b5\u4e0b)\u3002\n\n\u56e0\u4e3a\u6709\u8d1f\u6743\u8fb9\uff0c\u4f46\u53ea\u6709\u6709\u5411\u8fb9\u662f\u8d1f\u6743\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u65e0\u5411\u8fb9\u8fde\u63a5\u7684\u8054\u901a\u5757\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u5728\u8fd9\u91cc\u9762\u8dd1Dijkstra\uff0c\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\uff08\u62d3\u6251\u6392\u5e8f\u53c8\u4e0d\u7ba1\u8fb9\u6743\u662f\u6b63\u662f\u8d1f\uff09\uff0c\u7136\u540e\u8fd9\u4e2a\u56fe\u5c31\u53d8\u6210\u5f3a\u8054\u901a\u7684\u4e86\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,r,p,s,cnt;\nint ind[25011],d[25011],a[25011],c[25011],v[25011];\nstruct node {\n\tint y,v;\n};\ntypedef pair <int,int> P;\npriority_queue <P,vector<P>,greater<P> > Q;\nvector <node> g[25011];\nvector <int> b[25011];\nqueue <int> q;\nvoid dfs (int x) {\n\tc[x]=cnt;\n\tb[cnt].push_back(x);\n\tfor (int i=0;i<g[x].size();i++) {\n\t\tif (c[g[x][i].y]) continue;\n\t\tdfs(g[x][i].y);\n\t}\n}\n//\u6c42\u8054\u901a\u5757\nvoid Dijkstra () {\n\twhile (!Q.empty()) {\n\t\tpair <int,int> p=Q.top();\n\t\tint x=p.second;\n\t\tQ.pop();\n\t\tif (v[x]) continue;\n\t\tv[x]=1;\n\t\tfor (int i=0;i<g[x].size();i++) {\n\t\t\tnode e=g[x][i];\n\t\t\tif (d[e.y]>d[x]+e.v) {\n\t\t\t\td[e.y]=d[x]+e.v;\n\t\t\t\tif (c[x]==c[e.y]) Q.push(make_pair(d[e.y],e.y));\n\t\t\t}\n\t\t\tif (c[x]!=c[e.y]) {\n\t\t\t\tind[c[e.y]]--;\n\t\t\t\tif (!ind[c[e.y]]) q.push(c[e.y]);\n\t\t\t}\n\t\t} \n\t}\n}\n//Dijkstra\u5806\u4f18\u5316\u7248\u672c\nvoid topsort (int s) {\n\tq.push(c[s]);\n\tfor (int i=1;i<=cnt;i++) if (ind[i]==0) q.push(i);\n\tmemset(d,0x7f,sizeof(d));\n\td[s]=0;\n\twhile (!q.empty()) {\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor (int i=0;i<b[u].size();i++) \n\t\t\tQ.push(make_pair(d[b[u][i]],b[u][i]));\n\t\tDijkstra();\n\t}\n}\n//\u62d3\u6251\u6392\u5e8f\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin>>t>>r>>p>>s;\n\tfor (int i=1;i<=r;i++) {\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tg[a].push_back(node{b,c});\n\t\tg[b].push_back(node{a,c});\n\t}\n  \t//\u8f93\u5165\n\tfor (int i=1;i<=t;i++) {\n\t\tif (!c[i]) {\n\t\t\tcnt++;\n\t\t\tdfs(i);\n\t\t}\n\t}\n \t//\u6c42\u8054\u901a\u5757\n\tfor (int i=1;i<=p;i++) {\n\t\tint a,b,z;\n\t\tcin>>a>>b>>z;\n\t\tind[c[b]]++;\n\t\tg[a].push_back(node{b,z});\n\t}\n  \t//\u6c42\u5165\u5ea6\uff0c\u51c6\u5907\u62d3\u6251\u6392\u5e8f\n\ttopsort(s);\n\tfor (int i=1;i<=t;i++) {\n    \tif (d[i]>=0x3f3f3f3f) cout<<\"NO PATH\\n\";\n        else cout<<d[i]<<'\\n';\n    }\n  \t//\u8f93\u51fa\n\n\treturn 0;\n}\n```\n\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u6709\u5f85\u6539\u8fdb\uff0c\u52ff\u55b7",
        "postTime": 1593606914,
        "uid": 280733,
        "name": "Horadrim",
        "ccfLevel": 0,
        "title": "[USACO11JAN]Roads and Planes G \u9898\u89e3"
    },
    {
        "content": "\n## \u5206\u6790\n\n### \u6b63\u89e3\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u4e2d\u6709\u4e24\u79cd\u8fb9\uff0c\u4e00\u79cd\u662f\u53cc\u5411\u8fb9\uff0c\u8fb9\u6743\u975e\u8d1f\uff0c\u53e6\u4e00\u79cd\u662f\u5355\u5411\u8fb9\uff0c\u8fb9\u6743\u53ef\u80fd\u4e3a\u6b63\n\n\u5982\u679c\u6211\u4eec\u7528Dij\u76f4\u63a5\u53bb\u8dd1\u6700\u77ed\u8def\uff0c\u663e\u7136\u662f\u4e0d\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u6709\u8d1f\u6743\n\n\u5982\u679c\u6211\u4eec\u7528SPFA \u5462\uff0c\u663e\u7136\u4f1a\u88ab\u5361\u6389\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5b83\u6240\u5177\u6709\u7684\u7684\u67d0\u79cd\u6027\u8d28\n\n\u53cc\u5411\u5efa\u7684\u8fb9\u662f\u975e\u8d1f\u7684\uff0c\u8dd1Dij\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u662f\u95ee\u9898\u5c31\u662f\u9898\u76ee\u4e2d\u8fd8\u6709\u5355\u9879\u8d1f\u6743\u8fb9\n\n\u6211\u4eec\u4ed4\u7ec6\u8bfb\u4e00\u4e0b\u9898\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\u8d1f\u6743\u7684\u8fb9\u4e0d\u4f1a\u51fa\u73b0\u73af\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u8fd9\u6837\u7f29\u70b9\u4e4b\u540e\u7684\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u4f7f\u7528Dij\uff0c\u5206\u91cf\u5916\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u66f4\u65b0\u7b54\u6848\n\n### \u4ee3\u7801\n\n```` cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int maxn=150005;\nint t,r,p,s,head[maxn],tot=1,cnt;\nstruct asd{\n    int to,next,val;\n}b[maxn];\nvoid ad(int aa,int bb,int cc){\n    b[tot].to=bb;\n    b[tot].val=cc;\n    b[tot].next=head[aa];\n    head[aa]=tot++;\n}\nbool vis[maxn];\nint shuyu[maxn],dis[maxn];\nvector<int> jl[maxn];\nvoid dfs(int now){\n    shuyu[now]=cnt,vis[now]=1,jl[cnt].push_back(now);\n    for(int i=head[now];i!=-1;i=b[i].next){\n        int u=b[i].to;\n        if(vis[u])continue;\n        dfs(u);\n    }\n}\nstruct jie{\n    int num,jz;\n    jie(int aa=0,int bb=0){\n        num=aa,jz=bb;\n    }\n    bool operator < (const jie& A) const {\n        return jz>A.jz;\n    }\n};\nint ru[maxn];\nqueue<int> q;\npriority_queue<jie> Q;\nvoid dij(){\n    dis[s]=0;\n    while(!q.empty()) {\n        int xx=q.front();\n        q.pop();\n        for(int i=0;i<jl[xx].size();i++){\n            Q.push(jie(jl[xx][i],dis[jl[xx][i]]));\n        }\n        while(!Q.empty()){\n            int now = Q.top().num;\n            Q.pop();\n            if(vis[now]) continue;\n            vis[now]=1;\n            for(int i=head[now];i!=-1;i=b[i].next){\n                int u=b[i].to;\n                if(dis[u]>dis[now]+b[i].val){\n                    dis[u]=dis[now]+b[i].val;\n                    if(shuyu[now]==shuyu[u]) Q.push(jie(u,dis[u]));\n                }\n                if(shuyu[u]!=shuyu[now] && (--ru[shuyu[u]]==0)) q.push(shuyu[u]); \n            }\n        }\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d%d%d\",&t,&r,&p,&s);\n    for(int i=1;i<=r;i++){\n        int aa,bb,cc;\n        scanf(\"%d%d%d\",&aa,&bb,&cc);\n        ad(aa,bb,cc);\n        ad(bb,aa,cc);\n    }\n    for(int i=1;i<=t;i++){\n        if(!vis[i]) cnt++,dfs(i);\n    }\n    for(int i=1;i<=p;i++){\n        int aa,bb,cc;\n        scanf(\"%d%d%d\",&aa,&bb,&cc);\n        ad(aa,bb,cc);\n        ru[shuyu[bb]]++;\n    }\n    memset(vis,0,sizeof(vis));\n    memset(dis,0x7f,sizeof(dis));\n    for(int i=1;i<=cnt;i++) if(ru[i]==0) q.push(i);\n    dij();\n    for(int i=1;i<=t;i++){\n        if(dis[i]>INF) printf(\"NO PATH\\n\");\n        else printf(\"%d\\n\",dis[i]);\n    }\n    return 0;\n}\n````\n\n### \u6c34\u8fc7\n\n\u5f53\u7136\uff0c\u5982\u679c\u662f\u5728\u8003\u8bd5\u7684\u65f6\u5019\uff0c\u6b63\u89e3\u80af\u5b9a\u662f\u5f88\u96be\u60f3\u5230\n\n\u5373\u4f7f\u662f\u60f3\u5230\u4e86\uff0c\u53c8\u662f\u7f29\u70b9\u53c8\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u53c8\u662fDij\uff0c\u5206\u8d77\u6765\u5199\u8fd8\u597d\u70b9\uff0c\u5982\u679c\u5408\u5728\u4e00\u8d77\uff0c\u96be\u514d\u6709\u70b9\u4ee3\u7801\u91cf\n\n\u800c\u4e14\uff0c\u5982\u679c\u6700\u540e\u4f60\u8c03\u8bd5\u4e86\u534a\u5929\u8fd8\u6ca1\u6709\u66b4\u529b\u5206\u9ad8\uff0c\u5c82\u4e0d\u662f\u5f88\u5c34\u5c2c\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5c1d\u8bd5\u8fd9\u7528SPFA\u6c34\u4e00\u4e0b\n\n\u5176\u5b9eSPFA\u672c\u8d28\u4e0a\u8fd8\u662fBellman Ford\u7684\u4f18\u5316\u7248\u672c\n\n\u90a3\u4e48Bellman Ford\u662f\u600e\u4e48\u8fd0\u4f5c\u7684\u5462\n\n\u5b9e\u9645\u4e0a\u5b83\u662f\u4f7f\u7528\u5168\u90e8\u7684\u8fb9\u5bf9\u4e8e\u8d77\u70b9\u5230\u5176\u4ed6n-1\u4e2a\u70b9\u7684\u8def\u5f84\u8fdb\u884c\u677e\u5f1b,\u91cd\u590dn-1\u6b21\n\n\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3aO(VE)\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u51e0\u5343\u6761\u8fb9\u8fd8\u52c9\u5f3a\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u5341\u4e07\u4ee5\u4e0a\u7684\u8fb9\u662f\u80af\u5b9a\u4e0d\u53ef\u4ee5\u7684\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u4f18\u5316\u7248\u672cSPFA\uff0c\u5b83\u7684\u4f18\u5316\u4e4b\u5904\u5728\u54ea\u91cc\u5462\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u6765\u60f3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u666e\u901a\u7684Bellman Ford\uff0c\u5176\u5b9e\u6709\u4e9b\u8fb9\u662f\u6839\u672c\u677e\u5f1b\u4e0d\u52a8\u7684\n\n\u6240\u4ee5\u6211\u4eec\u4f18\u5316\u7684\u65b9\u5411\u5c31\u662f\u628a\u80af\u5b9a\u4e0d\u80fd\u677e\u5f1b\u5176\u5b83\u8282\u70b9\u7684\u8282\u70b9\u6392\u9664\u5728\u5916\n\n\u6211\u4eec\u4e0d\u53bb\u8003\u8651\u54ea\u4e9b\u8282\u70b9\u4e0d\u80fd\u677e\u5f1b\u5176\u5b83\u8282\u70b9\uff0c\u800c\u662f\u8003\u8651\u54ea\u4e9b\u8282\u70b9\u53ef\u4ee5\u677e\u5f1b\u5176\u5b83\u8282\u70b9\n\n\u5f88\u663e\u7136\uff0c\u53ea\u6709\u5f53\u524d\u5df2\u7ecf\u677e\u5f1b\u6210\u529f\u8fc7\u7684\u8282\u70b9\u624d\u6709\u53ef\u80fd\u677e\u5f1b\u5176\u5b83\u7684\u8282\u70b9\n\n\u56e0\u6b64\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u7528\u4e00\u4e2a\u6808\u6765\u8bb0\u5f55\u90a3\u4e9b\u5df2\u7ecf\u677e\u5f1b\u6210\u529f\u7684\u8282\u70b9\n\n\u6bcf\u6b21\u6211\u4eec\u53ea\u8981\u4ece\u6808\u4e2d\u53d6\u51fa\u8282\u70b9\u677e\u5f1b\u5c31\u53ef\u4ee5\u4e86\n\n\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f\n\nSPFA\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3aO(E)\uff0c\u800c\u5728\u6781\u9650\u60c5\u51b5\u4e0b\u4e5f\u6709\u53ef\u80fd\u8fbe\u5230Bellman-ford\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\uff0c\u5373O(V*E)\n\n\u5176\u5b9e\uff0c\u60f3\u8981\u628aSPFA\u5361\u6389\u8fd8\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u5efa\u4e00\u4e2a\u7f51\u683c\u56fe\n\n\u56e0\u4e3a\u7f51\u683c\u56fe\u4e2d\u7684\u8fb9\u6bd4\u8f83\u7a20\u5bc6\uff0c\u6240\u4ee5SPFA\u7a0d\u6709\u4e0d\u614e\u53d8\u4f1a\u8bef\u5165\u6b67\u9014\uff0c\u7136\u540e\u591a\u8d70\u5f88\u591a\u6761\u8fb9\n\n\u4f46\u662f\uff0c\u7f51\u4e0a\u4e5f\u6709\u5f88\u591a\u5173\u4e8eSPFA\u7684\u4f18\u5316\uff0c\u5176\u5b9e\u5c31\u662f\u60f3\u8ba9\u666e\u901a\u7684\u6808\u66f4\u63a5\u8fd1\u4f18\u5148\u961f\u5217\n\n\u56e0\u4e3a\u5982\u679c\u4f60\u7684\u6808\u91cc\u6709\u5f88\u591a\u4e2a\u5df2\u7ecf\u677e\u5f1b\u8fc7\u7684\u8282\u70b9\uff0c\u4f60\u80af\u5b9a\u5e0c\u671b\u62ff\u51fa\u4e00\u4e2a\u503c\u6bd4\u8f83\u5c0f\u7684\u8282\u70b9\u53bb\u677e\u5f1b\u5176\u4ed6\u7684\u8282\u70b9\n\n\u56e0\u4e3a\u8fd9\u6837\u4e00\u6b21\u677e\u5f1b\u6210\u529f\u7684\u51e0\u7387\u6bd4\u8f83\u5927\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c3d\u91cf\u4f7f\u7ef4\u62a4\u7684\u6808\u66f4\u63a5\u8fd1\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u4e5f\u5c31\u662f\u6743\u503c\u5c0f\u7684\u5148\u51fa\u6808\n\n\u76ee\u524d\u6bd4\u8f83\u5e38\u89c1\u7684\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u628a\u8981\u63d2\u5165\u7684\u5143\u7d20\u7684\u503c\u548c\u6808\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u653e\u5728\u5360\u6808\u9876\uff0c\u5426\u5219\u653e\u5728\u6808\u5e95\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u628a\u4e0e\u961f\u9996\u5143\u7d20\u6bd4\u8f83\u6539\u6210\u4e86\u4e0e\u961f\u4e2d\u5143\u7d20\u7684\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u601d\u8def\u5dee\u4e0d\u591a\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6c34\u8fc7\n\n``` cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=150005;\nstruct asd{\n\tll from,to,next,val;\n}b[maxn];\nll head[maxn],tot=1;\nvoid ad(ll aa,ll bb,ll cc){\n\tb[tot].from=aa;\n\tb[tot].to=bb;\n\tb[tot].next=head[aa];\n\tb[tot].val=cc;\n\thead[aa]=tot++;\n}\ndeque<ll> q;\nbool vis[maxn];\nll dis[maxn];\nvoid SPFA(ll xx){\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[xx]=0,vis[xx]=1;\n\tq.push_back(xx);\n\twhile(!q.empty()){\n\t\tll now=q.front();\n\t\tq.pop_front();\n\t\tvis[now]=0;\n\t\tfor(ll i=head[now];i!=-1;i=b[i].next){\n\t\t\tll u=b[i].to;\n\t\t\tif(dis[u]>dis[now]+b[i].val){\n\t\t\t\tdis[u]=dis[now]+b[i].val;\n\t\t\t\tif(!vis[u]){\n\t\t\t\t\tif(!q.empty()&&dis[u]>=dis[q.front()]) q.push_back(u);\n                    else q.push_front(u);\n\t\t\t\t\tvis[u]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tll t,r,p,s;\n\tscanf(\"%lld%lld%lld%lld\",&t,&r,&p,&s);\n\tfor(ll i=1;i<=r;i++){\n\t\tll aa,bb,cc;\n\t\tscanf(\"%lld%lld%lld\",&aa,&bb,&cc);\n\t\tad(aa,bb,cc),ad(bb,aa,cc);\n\t}\n\tfor(ll i=1;i<=p;i++){\n\t\tll aa,bb,cc;\n\t\tscanf(\"%lld%lld%lld\",&aa,&bb,&cc);\n\t\tad(aa,bb,cc);\n\t}\n\tSPFA(s);\n\tfor(ll i=1;i<=t;i++){\n\t\tif(dis[i]==0x3f3f3f3f3f3f3f3f) printf(\"NO PATH\\n\");\n\t\telse printf(\"%lld\\n\",dis[i]);\n\t}\n\treturn 0;\n}\n```\n\n\u5176\u5b9e\u5927\u5bb6\u8fd8\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u628a\u7528\u4f18\u5148\u961f\u5217\uff0c\u6539\u6210\u7528\u5c0f\u6839\u5806\u53bb\u7ef4\u62a4\uff0c\u4f1a\u53d8\u6210\u4ec0\u4e48\u6837\u5b50\n\n\u6216\u8005\u662f\u88f8\u7684Bellman Ford\u52a0\u70b9\u7279\u5224\uff0c\u53c8\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\n\n\u6700\u540e\u63d0\u9192\u5927\u5bb6\u4e00\u4e0b\uff0c\u6b63\u6743\u6700\u77ed\u8def\u5c3d\u91cf\u7528DIJ\n\n\u8d1f\u6743\u6700\u77ed\u8def\u548c\u6700\u957f\u8def\u5343\u4e07\u4e0d\u8981\u7528DIJ\uff0c\u5361\u62100\u5206\u90fd\u6709\u53ef\u80fd\n\n",
        "postTime": 1588219030,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]Roads and Planes G\u3011"
    },
    {
        "content": "\u663e\u7136\u672c\u9898\u662f\u4e00\u9053\u5355\u6e90\u6700\u77ed\u8def\n\n\u9898\u4e2d\u53ef\u80fd\u4f1a\u5b58\u5728\u8d1f\u6743\u8fb9\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528 Heap-Dijkstra\u3002\u82e5\u76f4\u63a5\u4f7f\u7528 SPFA\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u7279\u6b8a\u6784\u9020\uff0c\u5b9e\u6d4b\u4f1a\u88ab\u5361\u5230 $O(NM)$\uff0c\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e00\u9898\u3002\u4f46\u9898\u76ee\u4e2d\u6709\u4e00\u4e2a\u7279\u6b8a\u6027\u8d28\uff1a\u53cc\u5411\u8fb9\u603b\u662f\u975e\u8d1f\u7684\uff0c\u5355\u5411\u8fb9\u53ef\u80fd\u4e3a\u8d1f\u6570\u4f46\u4e0d\u4f1a\u6784\u6210\u73af\u3002\n\n\u5982\u679c\u53ea\u628a\u53cc\u5411\u8fb9\u52a0\u5230\u56fe\u91cc\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f62\u6210\u82e5\u5e72\u8fde\u901a\u5757\uff0c\u6211\u4eec\u628a\u8fde\u901a\u5757\u6574\u4f53\u770b\u4f5c\u201c\u70b9\u201d\uff0c\u5c06\u5355\u5411\u8fb9\u770b\u4f5c\u8fb9\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u59a5\u59a5\u7684 DAG\u3002\u65e0\u8bba\u8fb9\u6743\u6b63\u8d1f\uff0c\u6211\u4eec\u603b\u80fd\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u7ebf\u6027\u6c42\u51fa\u6700\u77ed\u8ddd\u79bb\u3002\u81f3\u4e8e\u8fde\u901a\u5757\u5185\u90e8\uff0c\u7531\u4e8e\u4e0d\u5b58\u5728\u8d1f\u6743\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u7528 Dijkstra\u3002\n\n\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n1.  \u628a\u53cc\u5411\u8fb9\u52a0\u5165\u9014\u4e2d\uff0cdfs \u7edf\u8ba1\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5757 $c_x$\n\n2.  \u5c06\u5355\u5411\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u8fde\u901a\u5757\u603b\u5165\u5ea6 $deg_i$\n\n3. \u5efa\u7acb\u961f\u5217\u62d3\u6251\u6392\u5e8f\uff0c\u5305\u542b\u5165\u5ea6\u4e3a\u96f6\u7684\u8fde\u901a\u5757\u53ca\u6e90\u70b9\u6240\u5728\u8fde\u901a\u5757\u3002\u5176\u4e2d\uff0c\u4ee4 $d_S=0$\uff0c\u5176\u4ed6\u4e3a\u6b63\u65e0\u7a77\u3002\n\n4. \u53d6\u51fa\u5bf9\u5934\u8fde\u901a\u5757 $i$\uff0c\u5728\u8fde\u901a\u5757\u5185\u90e8\u4f7f\u7528 Heap-Dijkstra\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(T+P+R\\log T)$\n\n\u6709\u4eba\u53ef\u80fd\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u5b58\u5728\u5f02\u8bae\uff0c\u6211\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u3002\u6240\u6709\u70b9\u7684\u603b\u6570\u662f\u786e\u5b9a\u7684\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab Heap-Dijkstra \u8ba1\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5757\uff0c\u603b\u80fd\u5728 $O(R\\log T)$ \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u53ef\u4ee5\u7528\u4e00\u4e2a vector \u5b58\u50a8\u5176\u5185\u90e8\u7684\u70b9\u7136\u540e\u653e\u5165\u5806\u4e2d\uff0c\u540c\u6837\u662f\u56e0\u4e3a\u70b9\u7684\u603b\u6570\u786e\u5b9a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u540c\u6837\u4e0d\u4f1a\u5361\u5230 $O(T^2)$\u3002\n\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+7;\nint T,R,P,S;\nstruct edge{\n\tint to,next,w;\n}a[N<<1];\nint tot,l[N];\ninline void add(int u,int v,int w)\n{\n\ta[++tot].to=v;\n\ta[tot].next=l[u];\n\ta[tot].w=w;\n\tl[u]=tot;\n}\nint c[N],cnt,deg[N];\nvoid dfs(int x,int num)\t{\n\tc[x]=num;\n\tfor(int i=l[x];i;i=a[i].next)\t{\n\t\tint y=a[i].to;\n\t\tif(c[y]) continue;\n\t\tdfs(y,num);\n\t}\n\treturn;\n}\nqueue<int> q;\npriority_queue<pair<int,int> >q1;\nint d[N],v[N];\nvector<int> ct[N]; \ninline void dijkstra(int block)\n{\n\tfor(int i=0;i<ct[block].size();i++)\t{\n\t\tint y=ct[block][i];\n\t\tq1.push(make_pair(-d[y],y));\n\t}\n\twhile(!q1.empty())\t{\n\t\tint x=q1.top().second;\n\t\tq1.pop();\n\t\tif(v[x]) continue;\n\t\tv[x]=1;\n\t\tfor(int i=l[x];i;i=a[i].next)\t{\n\t\t\tint y=a[i].to;\n\t\t\tif(v[y]) continue;\n\t\t\tif(d[y]>d[x]+a[i].w)\t{\n\t\t\t\td[y]=d[x]+a[i].w;\n\t\t\t\tif(c[x]==c[y]) q1.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t\tif(c[x]!=c[y]&&--deg[c[y]]==0)\n//\u7531\u4e8e\u8ba1\u7b97\u673a\u7684\u8fd0\u7b97\u6027\u8d28\uff0c\u5982\u679c c[x]==c[y] \u5c31\u4f1a\u76f4\u63a5\u5ffd\u7565 --deg[c[y]]==0 \u7684\u8bed\u53e5\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898 \n\t\t\t\tq.push(c[y]);\n\t\t}\n\t}\n\treturn;\n}\nint main(void)\n{\n\tscanf(\"%d%d%d%d\",&T,&R,&P,&S);\n\tfor(int i=1;i<=R;i++)\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w); add(v,u,w);\n\t}\n\tfor(int i=1;i<=T;i++)\n\t\tif(!c[i]) dfs(i,++cnt);\n\tfor(int i=1;i<=T;i++)\n\t\tct[c[i]].push_back(i);\n\tfor(int i=1;i<=P;i++)\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t\t++deg[c[v]];\n\t}\n\tq.push(c[S]);\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(!deg[i]) q.push(i);\n\tmemset(d,0x3f,sizeof(d));\n\td[S]=0;\n\twhile(!q.empty())\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tdijkstra(x);\n\t}\n\tfor(int i=1;i<=T;i++)\t{\n\t\tif(d[i]>1e7) printf(\"NO PATH\\n\");\n\t\telse printf(\"%d\\n\",d[i]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1629952770,
        "uid": 271491,
        "name": "koreyoshi_lemon",
        "ccfLevel": 5,
        "title": "\u9053\u8def\u548c\u822a\u7ebf \u89e3\u6790"
    },
    {
        "content": "\u672c\u9898\u662f\u4e00\u9898\u5f88\u660e\u663e\u7684\u6700\u77ed\u8def\uff0c\u800c\u4e14\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528Dijkstra\u7b97\u6cd5\u3002\u5982\u679c\u76f4\u63a5\u4f7f\u7528SPFA\u4f1aTLE\u3002\u4e8e\u662f\u849f\u84bb\u53ea\u80fd\u6316\u6398\u9898\u76ee\u4fe1\u606f\n\n\u672c\u9898\u6709\u4e00\u4e2a\u7279\u6b8a\u6761\u4ef6\u2014\u2014\u53cc\u5411\u8fb9\u975e\u8d1f\uff0c\u5355\u5411\u8fb9\u53ef\u80fd\u4e3a\u8d1f\u3002\u6240\u4ee5\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u53cc\u5411\u8fb9\u6dfb\u52a0\u5230\u56fe\u91cc\uff0c\u5f62\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002\u628a\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u518d\u628a\u5355\u5411\u8fb9\u52a0\u5165\u56fe\u4e2d\u3002\u63a5\u4e0b\u53bb\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u7684\u6846\u67b6\u3002\u5177\u4f53\u8bf7\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC opitimize(3)\nusing namespace std;\nconst int N=25005,M=50005;\nint n,m,p,s,tot,cnt;\nint head[N],Next[M<<2],des[M<<2],len[M<<2];\nint c[N],dist[M<<2],deg[M<<2],v[N];\nqueue<int> qu;\nvector<int> out[N];\ninline int read()\n{\n    int s=0,f=1; char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)) s=s*10+(ch^48),ch=getchar();\n    return s*f;\n}\ninline void write(int x)\n{\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\ninline void add(int a,int b,int c)\n{\n\tNext[++tot]=head[a]; des[tot]=b; len[tot]=c;\n\thead[a]=tot;\n}\nint dfs(int x)\n{\n\tc[x]=cnt;\n\tout[cnt].push_back(x);//\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u8bb0\u5f55\u51fa\u8fb9\u3002\u8fd9\u6837\u4e0d\u4f1a\u88ab\u5361\u6389\uff0c\u5426\u5219\u4f1a\u88ab\u7279\u6b8a\u6570\u636e\u5361\u6389 \n\tfor(register int i=head[x]; i; i=Next[i])\n\t{\n\t\tint y=des[i];\n\t\tif(!c[y]) dfs(y);\n\t}\n}//\u6c42\u8fde\u901a\u5757 \nstruct node\n{\n\tint x; double p;\n\tbool operator < (node &B) const \n\t{\n\t\treturn p<B.p;\n\t}\n};\nstruct prique\n{\n\tnode q[M<<2];\n\tint tot;\n\tint size(){return tot;}\n\tint top(){return q[1].x;}\n\tvoid push(int x,double z){\n\t\tq[++tot].x=x;q[tot].p=z;\n\t\tint p=tot;\n\t\twhile(p>1){\n\t\t\tif(q[p]<q[p>>1]){swap(q[p],q[p>>1]);p>>=1;}\n\t\t\telse break;\n\t\t}\n\t}\n\tvoid pop(){\n\t\tint p=1,s=2;\n\t\tq[1]=q[tot],tot--;\n\t\twhile(s<=tot){\n\t\t\tif(s<tot&&q[s+1]<q[s])s++;\n\t\t\tif(q[s]<q[p]){swap(q[s],q[p]);p=s,s<<=1;}\n\t\t\telse break;\n\t\t}\n\t}\n}q;//\u624b\u5199\u5806\u6548\u7387\u66f4\u9ad8 \nint main()\n{\n\tn=read(),m=read(),p=read(),s=read();\n\tfor(register int i=1; i<=m; i++)\n\t{\n\t\tint a=read(),b=read(),c=read();\n\t\tadd(a,b,c); add(b,a,c);//\u6dfb\u52a0\u65e0\u5411\u8fb9 \n\t}\n\tfor(register int i=1; i<=n; i++)//\u5bfb\u627e\u8fde\u901a\u5757 \n\t    if(!c[i])\n\t    {\n\t    \tcnt++;\n\t    \tdfs(i);\n\t\t}\n\tfor(register int i=1; i<=p; i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t\t++deg[c[y]];//\u62d3\u6251\u601d\u60f3 \n\t}\n\tqu.push(c[s]);\n\tfor(register int i=1; i<=cnt; i++)\n\t    if(deg[i]==0) qu.push(i);\n\tmemset(dist,0x7f,sizeof dist);\n\tdist[s]=0;\n\twhile(!qu.empty())\n\t{\n\t\tint now=qu.front(); qu.pop();\n\t\tfor(int i=0; i<out[now].size(); i++)//\u5c06\u6240\u6709\u8be5\u8fde\u901a\u5757\u7684\u70b9\u52a0\u5165\u5806 \n\t\t{\n\t\t\tint t=out[now][i];\n\t\t\tq.push(t,dist[t]);\n\t\t}\n\t\twhile(q.size())\n\t\t{\n\t\t\tint x=q.top(); q.pop();\n\t\t\tif(v[x]) continue;\n\t\t\tv[x]=1;\n\t\t\tfor(int i=head[x]; i; i=Next[i])\n\t\t\t{\n\t\t\t\tint y=des[i],z=len[i];\n\t\t\t\tif(dist[y]>dist[x]+z)\n\t\t\t\t{\n\t\t\t\t\tdist[y]=dist[x]+z;\n\t\t\t\t\tif(c[x]==c[y]) q.push(y,dist[y]);//\u5982\u679c\u8fd8\u5728\u8fde\u901a\u5757\u5185\u90e8 \n\t\t\t\t}\n\t\t\t\tif(c[x]!=c[y]) \n\t\t\t\t{\n\t\t\t\t\tdeg[c[y]]--;\n\t\t\t\t\tif(deg[c[y]]==0) qu.push(c[y]);//\u62d3\u6251\u601d\u60f3 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1; i<=n; i++)\n\t    if(dist[i]>0x3f3f3f3f) puts(\"NO PATH\");\n\t    else write(dist[i]),puts(\" \");\n\treturn 0;\n} \n```\n",
        "postTime": 1592571920,
        "uid": 91375,
        "name": "crh1272336175",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]Roads and Planes G\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u9996\u5148\u770b\u5230\u8fd9\u9898\u6709\u8d1f\u8fb9\u6743\uff0c\u53ef\u80fd\u90fd\u4f1a\u8ba4\u4e3a\u76f4\u63a5SPFA\uff0c\n~~\u4f46\u663e\u7136\u51fa\u9898\u4eba\u4e0d\u53ef\u80fd\u8fd9\u4e48sb~~\uff0c\u6240\u4ee5SPFA\u76f4\u63a5\u88ab\u7279\u6b8a\u6784\u9020\u6570\u636e\u5361\u6389\u4e86\u3002\n\n#### \u4f46\uff0c\u8fd8\u662f\u80fd\u88abSPFA+SLF(\u53cc\u7aef\u961f\u5217)\u6c34\u8fc7......\n\n\n------------\n##  \u601d\u8def\n \n \u56e0\u4e3a\u6bcf\u6761\u9053\u8def\uff08\u53cc\u5411\uff09\u90fd\u662f\u975e\u8d1f\u7684\uff0c\u822a\u7ebf\uff08\u5355\u5411\uff09\u53ef\u6b63\u53ef\u8d1f\uff0c\u4e14**\u4e0d\u5b58\u5728\u201c\u822a\u73af\u201d\uff08\u8fb9\u81f3\u5c11\u7531\u4e00\u6761\u822a\u7ebf\u7ec4\u6210\u7684\u73af\uff09**\u3002\n\n\u9996\u5148\u5c06\u9053\u8def\uff08\u53cc\u5411\uff09\u52a0\u5165\u56fe\u4e2d\uff0c\u5f62\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\u3002\n\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0**\u5269\u4e0b\u7684\u822a\u7ebf\u5747\u4e3a\u539f\u56fe\u4e2d\u7684\u6865**\u3002\n\n\uff08\u4e0b\u8bc1\uff1a\u82e5\u8bbe\u822a\u7ebf\u8d77\u70b9\u4e3a$u$\uff0c\u7ec8\u70b9\u4e3a$v$\uff0c\u4e14$u$\uff0c$v$\u5904\u5728\u540c\u4e00\u8054\u901a\u5757\u5185\uff0c**\u6545\u539f\u5fc5\u6709\u4e00\u6761\u7531\u9053\u8def\u7ec4\u6210\u7684\u8def\u5f84\u8054\u901a\uff08$u$\uff0c$v$\uff09\uff0c\u4e0e\u822a\u7ebf\u6784\u6210\u73af**\uff0c\u7531\u9898\u610f\u53ef\u77e5\u4e0d\u5b58\u5728\u201c\u822a\u73af\u201d\uff0c\u77db\u76fe\uff0c\u6240\u4ee5\u822a\u7ebf\u5747\u4e3a\u6865\uff09\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u8054\u901a\u5757\u4e2d\u7528$dijkstra$\u8dd1\u6700\u77ed\u8def\uff0c\u518d\u91c7\u7528**\u7f29\u70b9**\u7684\u601d\u60f3\uff0c\u5c06\u6bcf\u4e2a\u8054\u901a\u5757\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5728\u52a0\n\u5165\u822a\u7ebf\uff0c\u7ec4\u6210\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5728\u6309\u7167**\u62d3\u6251\u6392\u5e8f**\u8fdb\u884c\u626b\n\u63cf\uff0c\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u6c42\u51fa\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O$($r+p+t*logt$)\n\n------------\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst ll N=25010,M=50010; \nll t,r,p,s,a,b,c,cnt,num,INF;\nll bl[N],head[N],dist[N],in[N];\nstruct Edge{\n\tll nxt,to,val;\n}edge[M<<1];\nstruct node{\n\tll rt,d;\n\tbool operator <(const node& op)const {\n\t\treturn d>op.d; \n\t}\n};\nvector <node> awy[N];\nvector <ll> comp[N];\nqueue <ll> que;\npriority_queue <node> q;\ninline void add(ll u,ll v,ll w){edge[++cnt]=(Edge){head[u],v,w};head[u]=cnt;}\nvoid dfs(ll u,ll c){\n\tbl[u]=c;\n\tcomp[c].push_back(u);\n\tfor(ll i=head[u];i;i=edge[i].nxt){\n\t\tll v=edge[i].to;\n\t\tif(!bl[v]) dfs(v,c); \n\t}\n}\nvoid dijkstra(ll er){\n\twhile(q.size()){\n\t\tnode u=q.top(); q.pop();\n\t\tif(u.d!=dist[u.rt]) continue;\n\t\tfor(ll i=head[u.rt];i;i=edge[i].nxt){\n\t\t\tll v=edge[i].to;\n\t\t\tif(dist[v]>dist[u.rt]+edge[i].val && dist[u.rt]<INF){\n\t\t\t\tdist[v]=dist[u.rt]+edge[i].val;\n\t\t\t\tq.push((node){v,dist[v]});\n\t\t\t}\n\t\t}\n\t\tfor(ll i=0;i<awy[u.rt].size();i++){\n\t\t\tll v=awy[u.rt][i].rt,w=awy[u.rt][i].d;\n\t\t\tif(dist[v]>dist[u.rt]+w && dist[u.rt]<INF) dist[v]=dist[u.rt]+w;\n\t\t\t//\u822a\u7ebf\u4e3a\u6865\uff0c\u6240\u4ee5\u66f4\u65b0\u540e\u4e0d\u7528\u52a0\u5165\u4f18\u5148\u961f\u5217\u3002\n        in[bl[v]]--; if(in[bl[v]]==0) que.push(bl[v]);\n        //\u5165\u5ea6\u4e3a0\u52a0\u5165\u961f\u5217\uff0c\u62d3\u6251\u6392\u5e8f\n\t\t}\t\n\t}\t\n}\t\n\nvoid solve(){\n\tmemset(dist,0x3f,sizeof(dist));\n\tINF=dist[0],dist[s]=0;\n\twhile(que.size()){\n\t\tll tt=que.front(); que.pop();\n\t\tfor(ll i=0;i<comp[tt].size();i++){\n\t\t\tll hh=comp[tt][i];\n\t\t\tq.push((node){hh,dist[hh]});//\u5c06\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\n\t\t}\n\t\tdijkstra(tt);\n\t}\n}\ninline ll read(){\n\tll x=0,f=1; char ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint main(){\n\tt=read(),r=read(),p=read(),s=read();\n\tfor(ll i=1;i<=r;i++){\n\t\ta=read(),b=read(),c=read();\n\t\tadd(a,b,c),add(b,a,c);\n\t}\n\tfor(ll i=1;i<=p;i++){\n\t\ta=read(),b=read(),c=read();\n\t\tawy[a].push_back((node){b,c});\n\t} \n\tfor(ll i=1;i<=t;i++) if(!bl[i]) dfs(i,++num);//\u6df1\u641c\u5212\u5206\u8054\u901a\u5757\t\n\tfor(ll i=1;i<=t;i++)\n\t\tfor(ll j=0;j<awy[i].size();j++)\n\t\t\tif(bl[i]!=bl[awy[i][j].rt]) in[bl[awy[i][j].rt]]++;\n\t\t\n\tfor(ll i=1;i<=num;i++) if(in[i]==0) que.push(i);\t\n    //\u5165\u5ea6\u4e3a0\u52a0\u5165\u961f\u5217\uff0c\u62d3\u6251\u6392\u5e8f\n\t\n\tsolve();\n\tfor(ll i=1;i<=t;i++){\n\t\tif(dist[i]==INF) puts(\"NO PATH\");\n\t\telse printf(\"%lld\\n\",dist[i]);\n\t}\n}\n```\n",
        "postTime": 1565671561,
        "uid": 63418,
        "name": "hdgfgs",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008\u3010USACO11JAN\u3011\u9053\u8def\u548c\u98de\u673a Roads and Planes"
    },
    {
        "content": "\u770b\u5230\u597d\u591a\u5927\u4f6c\u7684\u9898\u89e3\u90fd\u662fSPFA\u53d8\u5f62 \u6211\u7684\u60f3\u6cd5\u662f\u5148\u5224\u65ad\u5904\u8fde\u901a\u56fe \u5148\u628a\u65e0\u5411\u8fb9\u52a0\u8fdb\u53bb\uff08\u5168\u4e3a\u6b63\uff09 \u4e4b\u540e\u5728\u5185\u90e8\u7528\n\u4f7f\u7528dijkstra\u6c42\u6700\u77ed\u8def\u7f29\u70b9\u5f00vector\u6570\u7ec4\u8bb0\u5f55\u70b9 \u7528\u4e00\u4e2a\u666e\u901a\u961f\u5217\u8bb0\u5f55\u6240\u6709\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u8fde\u901a\u56fe\u52a0\u8fdb\u53bb \u4e0d\u65ad\u64cd\u4f5c\u5f53\u5165\u5ea6\u4e3a\u96f6\u65f6\u5c31\u52a0\u5165\u961f\u5217\n\u6700\u540e\u5224\u65ad\u4e00\u4e0b\u5c31\u662f\u7b54\u6848\n```cpp\n#include<bits/stdc++.h>\n#define PII pair<int,int>\nusing namespace std;\nint read() {\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0') {\n\t\tif(ch=='-')y=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=(x<<3)+(x<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*y;\n}\nconst int maxn=3e5+7;\nvector<int>a[maxn];\nbool vis[maxn];\nint col[maxn],dis[maxn],head[maxn],d[maxn];\nint n,r,p,ss,en;\nstruct edge {\n\tint nxt,v,w;\n} eg[maxn<<1];\n\nvoid insert(int u,int v,int w) {\n\teg[++en].nxt=head[u];\n\teg[en].v=v;\n\teg[en].w=w;\n\thead[u]=en;\n//\td[col[v]]++;\n}\nqueue<int>q;\nvoid dfs(int u,int fa,int cnt) {\n\tif(col[u])return;\n\tcol[u]=cnt;\n\ta[cnt].push_back(u);\n\tfor(int i=head[u]; i; i=eg[i].nxt) {\n\t\tint v=eg[i].v;\n\t\tif(v!=fa){\n\t\t\tdfs(v,u,cnt);\n\t\t}\n\t}\n}\nint main() {\n\tint n=read(),r=read(),p=read(),ss=read();\n\tfor(int i=1; i<=r; i++) {\n\t\tint u=read(),v=read(),w=read();\n\t\tinsert(u,v,w);\n\t\tinsert(v,u,w);\n\t}\n\tint cnt=0;\n\tfor(int i=1; i<=n; i++) {\n\t\tif(!col[i]) {\n\t\t\t++cnt;\n\t\t\tdfs(i,i,cnt);\n\t\t}\n\t}\n\tfor(int i=1; i<=p; i++) {\n\t\tint u,v,w;\n\t\tu=read(),v=read(),w=read();\n\t\tinsert(u,v,w);\n\t\td[col[v]]++;\n\t}\n\tmemset(dis,0x3f,sizeof(dis));\n\t\tmemset(vis,0,sizeof(vis));\n\tdis[ss]=0;\n\tfor(int i=1;i<=cnt;i++){\n\t\tif(d[i]==0)q.push(i);\n\t}\t\n\twhile(q.size()){\n\t\tint x=q.front();q.pop();\n\t\tset<PII,less<PII> >s;\n\t\tint len=a[x].size();\n\t\tfor(int i=0;i<len;i++){\n\t\t\ts.insert(make_pair(dis[a[x][i]],a[x][i]));\n\t\t} \n\t\twhile(!s.empty()){\n\t\t\tset<PII,less<PII> >::iterator it=s.begin();\n\t\t\tint u=it->second;s.erase(*it);\n\t\t\tfor(int i=head[u];i;i=eg[i].nxt){\n\t\t\t\tint v=eg[i].v,w=eg[i].w;\n\t\t\t\tif(dis[u]+w<dis[v]){\n\t\t\t\t\tif(col[u]==col[v]){\n\t\t\t\t\t\ts.erase(make_pair(dis[v],v));\n\t\t\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\t\t\ts.insert(make_pair(dis[v],v));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(col[u]!=col[v]){\n\t\t\t\t\tdis[v]=min(dis[v],dis[u]+w);\n\t\t\t\t\td[col[v]]--;\n\t\t\t\t\tif(d[col[v]]==0)q.push(col[v]); \n\t\t\t\t}  \n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\tfor(int i=1; i<=n; i++) {\n\t\t\tif(dis[i]>=1e9)puts(\"NO PATH\");\n\t\telse\n\t\t\tcout<<dis[i]<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565621151,
        "uid": 122463,
        "name": "\u95ee\u5929",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "### \u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\uff0c\u4e8e\u662f\u6211\u7528 SPFA \u901a\u8fc7\u4e86\u6b64\u9898\u3002\n\u542c\u8bf4\u6709\u4eba\u7528 SPFA \u7684 SLF \u4f18\u5316\u78be\u8fc7\u53bb\u4e86\u3002\n\n\u4f17\u6240\u5468\u77e5\uff1a SPFA+\u5806 \u5728\u8d1f\u6743\u56fe\u4e0a\u7684\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u7684\uff0c\u6240\u4ee5\u5806\u4f18\u5c31\u522b\u60f3\u4e86\u3002\n\n\u4f46\u662f\u53ef\u4ee5\u7528\u6a21\u62df\u9000\u706b\u601d\u60f3\u5440\u3002\n\n\u554a\uff01\uff1f\u5565\u4e8b\u6a21\u62df\u9000\u706b\uff1f\n\n\u5177\u4f53\u662f\u8fd9\u6837\u7684\uff1a\n\n\u9996\u5148\u5148\u9009\u62e9\u4e00\u4e2a\u503c\uff0c\u8dd1\u4e00\u904d\u666e\u901a\u7684 SPFA\uff0c\u8981\u6c42\u6bcf\u4e2a\u70b9\u5165\u961f\u7684\u6b21\u6570\u5c0f\u4e8e\u67d0\u4e2a\u503c\u3002\n\n\u663e\u7136\uff0c\u8fd9\u6837\u5b50\u8dd1\u51fa\u6765\u7684\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002\n\n\u600e\u4e48\u529e\uff1f\u518d\u8dd1\u4e00\u6b21\u5457\u3002\n\n\u53ef\u8fd9\uff0c\u590d\u6742\u5ea6\u597d\u50cf\u6ca1\u6709\u53d8\u5440\u3002\n\n\u7b49\u7b49\uff0c\u6211\u4eec\u521a\u624d\u5df2\u7ecf\u6c42\u51fa\u7684\u4e00\u4e9b\u6709\u7528\u7684\u4e1c\u897f\uff1a\u76ee\u524d\u4ece\u539f\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\uff08\u4e0d\u4e00\u5b9a\u662f\u771f\u6b63\u7684\u6700\u77ed\u8def\uff09\uff0c\u628a\u70b9\u6309\u8ddd\u79bb\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u52a0\u5165\u961f\u5217\u4e2d\u3002\n\n\u7136\u540e\u518d\u52a0\u70b9 SPFA \u7684\u5e38\u89c1\u4f18\u5316\uff0c\u8be6\u89c1 [UNVRS\u7684\u535a\u5ba2\uff08\u6bd4\u8f83\u8be6\u7ec6\uff09](https://www.luogu.com.cn/blog/UNVRS/SPFA-PMF) \u548c [\u672c\u849f\u84bb\u7684\u535a\u5ba2\uff08\u6bd4\u8f83\u7b80\u7565\uff09](https://www.luogu.com.cn/blog/LHF/fu-huo-spfa)\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u8c03\u6574\u53c2\u6570\u7684\u95ee\u9898\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\n#define ll long long\n#define N 200010\n#define ri register int\nusing namespace std;\nint k[N],n,f[N],K;\nll ans;\nbool cmp(int a,int b)\n{\n\treturn f[a]<f[b];\n}\nstruct my_queue{\n\tprivate:\n\tint q[26214000],p[N],head,tail,w,i,cnt;\n\tvoid change(int&x,int&y){\n\t\tx^=y^=x^=y;\n\t}\n\tpublic:\n\tvoid push(int x)\n\t{\n\t\tif(p[x]) return;\n\t\tp[x]=1;\n\t\tq[tail++]=x;\n\t\tif(head<tail-1&&f[q[tail-1]]>f[q[tail-2]])\n\t\t\tchange(q[tail-1],q[tail-2]);\n\t}\n\tint top()\n\t{\n\t\tfor(i=1;i<=K&&head+i<tail-i;i++)\n\t\t{\n\t\t\tif(f[q[tail-i]]<f[q[head+i]]) change(q[tail-i],q[head+i]);\n\t\t\tif(f[q[head+i]]<f[q[head]]) change(q[head+i],q[head]);\n\t\t}\n\t\tp[q[head]]=0;\n\t\treturn q[head++];\n\t}\n\tvoid clear(){for(ri i=1;i<=n;i++) p[i]=0;head=tail=1;}\n\tbool empty(){return head==tail;}\n}q;\nstruct edge{\n\tint next,to,s;\n}e[N<<2];\nint first[N],len,s,x,y,z,c[N],bz;\nvoid add(int a,int b,int c)\n{\n\te[++len].to=b;\n\te[len].next=first[a];\n\tfirst[a]=len;\n\te[len].s=c;\n}\nvoid spfa(int x,int B)\n{\n\tf[x]=0;\n\tq.push(x);\n\twhile(!q.empty())\n\t{\n\t\tx=q.top();\n\t\tfor(int i=first[x],v;i;i=e[i].next)\n\t\t\tif(f[x]+e[i].s<f[(v=e[i].to)]&&++c[v]<=B)\n\t\t\t{\n\t\t\t\tf[v]=f[x]+e[i].s;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t}\n\tq.clear();\n}\nint m1,m2;\nint main()\n{\n\tq.clear();\n\tscanf(\"%d%d%d%d\",&n,&m1,&m2,&s);\n\tfor(int i=1;i<=n;i++) k[i]=i;\n\tfor(int i=1;i<=m1;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tfor(int i=1;i<=m2;i++)\n\t\tscanf(\"%d%d%d\",&x,&y,&z),\n\t\tadd(x,y,z);\n\tfor(int j=1;j<=n;j++) f[j]=1e9;\n\tfor(int i=1;i<=20;i++)\n\t{\n\t\tK=(i+10)/8;\n\t\tspfa(s,30);\n\t\tsort(k+1,k+n+1,cmp);\n\t\tfor(int j=1;j<=n&&f[k[j]]<1e9;j++)\n\t\t\tc[k[j]]=0,q.push(k[j]);\n\t}\n\tK=1;\n\tspfa(s,1e9);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(f[i]<1e9) printf(\"%d\\n\",f[i]);\n\t\telse printf(\"NO PATH\\n\");\n\t}\n}\n```\n~~\u559c\u6b22\u5c31\u70b9\u4e2a\u8d5e\u5457~~",
        "postTime": 1617801016,
        "uid": 99506,
        "name": "_LHF_",
        "ccfLevel": 0,
        "title": "\u66b4\u529b\u505a\u6cd5"
    },
    {
        "content": "\u6b64\u9898\u6b63\u89e3\u662fTarjan\u7f29\u70b9+\u8fde\u901a\u5757\u5185Dij ~~\uff08\u9ebb\u70e6\uff09~~\uff0c\u4e8e\u662f\u6211\u4eec\u51c6\u5907\u7528**\u6700\u77ed\u8def**\u6c34\u8fc7\u53bb\uff01\n\n\u6700\u77ed\u8def\u6709Dijkstra\u548cSPFA\u53ef\u4f9b\u9009\u62e9\uff0c\u4f46\u662f\u5462\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u6709\u8d1f\u6743\u8fb9\uff0c\u6240\u4ee5\u57fa\u4e8e\u8d2a\u5fc3\u7684Dij\u5c31\u88c2\u5f00\u4e86\uff0c\u7136\u800cDij\u80fd\u8fc7\u6837\u4f8b ~~\uff08\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff0c\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u81ea\u5df1\u7b2c\u4e00\u6b21\u5c31\u5199\u7684Dij\uff09~~\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u7528\u4e0a\u4e86SPFA\uff0cT\u98de\u4e86\n\n### \u600e\u4e48\u529e\u5462\uff1f\n\n### SLF\u4f18\u5316\uff01\n\n\u7531\u4e8e\u672c\u849f\u84bb\u4e5f\u662f\u7b2c\u4e00\u6b21\u7528SLF\u4f18\u5316\uff0c\u6240\u4ee5\u7ed9\u6765\u770b\u9898\u89e3\u5374\u4e5f\u4e0d\u4f1aSLF\u4f18\u5316\u7684\u5de8\u4f6c\u548c\u795e\u7287\u4eec\u7a0d\u5fae\u8bb2\u89e3\u4e00\u4e0b\uff1a\n\n\u4ee5\u4e0b\u5747\u4e3a\u849f\u84bb\u7684\u4e00\u4e9b\u89c1\u89e3\uff0c\u82e5\u6709\u9519\u8bef\u8bf7\u5404\u4f4d\u5927\u4f6c\u6307\u6b63\uff01\n\n#### \u9996\u5148\u662f\u961f\u5217\u4e0d\u540c\uff1a\n\n\u5728\u666e\u901a\u7684SPFA\u5185\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u5b9a\u4e49\u8fd9\u6837\u7684\u961f\u5217\n```cpp\nqueue< int >q;\n```\n\u4f46\u662f\u5462\uff0cSLF\u4f18\u5316\u9700\u8981\u8fd9\u4e2a\n```cpp\ndeque< int >q;\n```\ndeque\u76f8\u6bd4\u4e8equeue\u53ef\u4ee5\u652f\u6301\u53cc\u7aef\u7684\u63d2\u5165\u548c\u9000\u51fa\u64cd\u4f5c\uff0c\u5206\u522b\u4e3a\n```cpp\nq.push_front(a);\nq.push_back(a);\nq.pop_front();\nq.pop_back();\n```\n\n#### \u7b2c\u4e8c\u662fSLF\u4f18\u5316\u601d\u60f3\n\n\u666e\u901a\u7684SPFA\u662f\u53ea\u4f1a\u5728\u961f\u5934\u63d2\u5165\u503c\uff0c\u800cSLF\u4f18\u5316\u4f1a\u5728\u63d2\u5165\u524d\u4e0e\u961f\u5934\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002\n\n\u5982\u679c\u5f53\u524d\u70b9\u6bd4\u961f\u5934\u5143\u7d20\u7684dis\u503c\u5c0f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u5230\u961f\u5934\uff0c\u5426\u5219\u5c06\u5176\u63d2\u5165\u5230\u961f\u5c3e\u3002\n\n\u539f\u56e0\u662f\u4f18\u5148\u62d3\u5c55\u66f4\u4f18\u7684\u70b9\u53ef\u4ee5\u51cf\u5c11\u62d3\u5c55\u4e0d\u4f18\u7684\u70b9\uff0c\u4ece\u800c\u51cf\u5c11\u603b\u7684\u5165\u961f\u6b21\u6570\uff0c\u4f7fSPFA\u66f4\u5feb\u5730\u6536\u675f\u3002\n\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\n```cpp\nif(!q.empty()&&dist[v]>=dist[q.front()]) q.push_back(v);\nelse q.push_front(v);\n```\n\n\n\u8bb2\u7684\u5dee\u4e0d\u591a\u4e86\uff0c\u653e\u4e00\u4e0b\u5b8c\u6574\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ri register int\n#define MAXM 1000100\n#define MAXN 100010\n\nstruct node\n{\n\tint from,to,dis;\n} edge[MAXM];\nint head[MAXM],cnt,n,r,p,s,dist[MAXN];\nbool vis[MAXN];\n\ntemplate< typename T >inline void read(T &x)\n{\n\tx=0;\n\tchar c=getchar();\n\tint f=1;\n\tfor(; !isdigit(c); c=getchar()) if(c=='-') f=-1;\n\tfor(; isdigit(c); c=getchar()) x=((x<<3)+(x<<1)+(c^48));\n\tx*=f;\n}\ntemplate< typename T >inline void write(T x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) write(x/10);\n\tputchar(x%10+'0');\n}\ninline void add(int from,int to,int dis)\n{\n\tedge[++cnt].from=head[from];\n\tedge[cnt].to=to;\n\tedge[cnt].dis=dis;\n\thead[from]=cnt;\n}\ninline void SPFA(int s)\n{\n\tdeque< int >q;\n\tmemset(dist,0x3f,sizeof(dist));\n\tdist[s]=0;\n\tq.push_back(s);\n\tvis[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop_front();\n\t\tfor(ri i=head[now]; i; i=edge[i].from)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dist[v]>dist[now]+edge[i].dis)\n\t\t\t{\n\t\t\t\tdist[v]=dist[now]+edge[i].dis;\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tif(!q.empty()&&dist[v]>=dist[q.front()]) q.push_back(v);\n\t\t\t\t\telse q.push_front(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[now]=0;\n\t}\n}\n\nint main()\n{\n\tread(n);\n\tread(r);\n\tread(p);\n\tread(s);\n\tint u,v,w;\n\tfor(ri i=1; i<=r; ++i)\n\t{\n\t\tread(u);\n\t\tread(v);\n\t\tread(w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tfor(ri i=1; i<=p; ++i)\n\t{\n\t\tread(u);\n\t\tread(v);\n\t\tread(w);\n\t\tadd(u,v,w);\n\t}\n\tSPFA(s);\n\tfor(ri i=1; i<=n; ++i)\n\t{\n\t\tif(dist[i]==1061109567) //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5199dist[i]==0x3f \n\t\t{\n\t\t\tprintf(\"NO PATH\");\n\t\t\tputchar('\\n');\n\t\t}\n\t\telse\n\t\t{\n\t\t\twrite(dist[i]);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1603631933,
        "uid": 254036,
        "name": "HMP_Haoge",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]Roads and Planes G\u3011"
    },
    {
        "content": "## \u601d\u8def\u5206\u6790\n* \u9898\u610f\u5f88\u660e\u786e\uff0c\u6c42\u5e26\u8d1f\u8fb9\u7684\u6700\u77ed\u8def\u3002~~\u8bf6\uff0c\u522b\u4e0a\u53bb\u5c31\u8dd1 spfa \u554a\uff0c\u8fd9\u53ef\u662f USACO~~\u3002\n* \u4f17\u6240\u5468\u77e5\uff0cUSACO \u559c\u6b22\u5361 $spfa$\uff0c\u53ef\u662f\u6709\u8d1f\u8fb9\u6709\u4e0d\u80fd\u7528 $Dijkstra$ \uff0c\u8fd9\u600e\u4e48\u641e\uff1f\n* \u8fd8\u662f\u5148\u8bf4\u4e00\u4e0b $Dijkstra$ \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8dd1\u8d1f\u8fb9\u5427\u3002$Dijkstra$ \u7684\u6838\u5fc3\u662f\u7531\u8d2a\u5fc3\u5f97\u6765\u7684\uff0c\u5373\u957f\u8fb9\u662f\u6709\u6700\u77ed\u7684\u8fb9\u677e\u5f1b\u7684\uff0c\u800c\u5728\u6709\u8d1f\u8fb9\u7684\u56fe\u4e2d\uff0c\u56e0\u4e3a\u8d1f\u8fb9\u4e0d\u8bba\u591a\u957f\u90fd\u4f1a\u4f7f\u957f\u8fb9\u66f4\u77ed\uff0c\u6240\u4ee5\u8d2a\u5fc3\u4e0d\u6210\u7acb\n* \u4f46\u662f\u8fd9\u9053\u9898\u7684\u8d1f\u8fb9\u5f88\u7279\u6b8a\uff0c\u662f\u5355\u5411\u7684\uff0c\u5982\u679c\u5148\u4e0d\u8003\u8651\u8d1f\u8fb9\u7684\u5462\uff1f\u90a3\u4e48\u8fd9\u65f6\u5019\u6574\u4e2a\u56fe\u7684\u8054\u901a\u6027\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684\uff0c\u4f1a\u5f62\u6210\u8bb8\u591a\u4e2a\u7531\u65e0\u5411\u8fb9\u5f62\u6210\u7684\u8054\u901a\u5757\u3002\n* \u5728\u8054\u901a\u5757\u5185\u6ca1\u6709\u8d1f\u8fb9\uff0c\u6240\u4ee5\u662f\u53ef\u4ee5\u8dd1 $Dijkstra$ \u7684\uff0c\u5176\u5b9e\u8fd9\u65f6\u52a0\u4e0a\u8d1f\u8fb9\uff0c\u5bf9\u4e0d\u540c\u7684\u8054\u901a\u5757\u8dd1 $Dijkstra$ \u4e5f\u662f\u4e0d\u4f1a\u51fa\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u8fd9\u6761\u8d1f\u8fb9\u662f\u6865\uff0c\u4e5f\u5c31\u662f\u4e0d\u53ef\u6216\u5374\u3001\u5fc5\u5b9a\u7ecf\u8fc7\u7684\u3002\n* \u63a5\u4e0b\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u7528\u62d3\u6251\u6392\u5e8f\u4f9d\u6b21\u66f4\u65b0\u6bcf\u4e2a\u8054\u901a\u5757\u3002\u54e6\uff0c\u5bf9\u4e86\uff0c\u9898\u76ee\u7ed9\u4e86\u4e2d\u5fc3\u57ce\u5e02\uff0c\u6240\u4ee5\u5148\u628a\u4e2d\u5fc3\u57ce\u5e02\u6240\u5728\u7684\u8054\u901a\u5757\u52a0\u8fdb\u53bb\n\n## $Code$\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define R register\n#define N 200010\nusing namespace std;\ninline int read(){\n\tint x = 0,f = 1;\n\tchar ch = getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,r,p,s,cnt,head[N],dis[N],in[N],belong[N];\nbool vis[N];\nstruct edge{\n\tint to,next,dis;\n}e[N<<2];\nint len;\nvoid addedge(int u,int v,int w){\n\te[++len].to = v;\n\te[len].dis = w;\n\te[len].next = head[u];\n\thead[u] = len;\n}\nvector<int>sta[N];\nvoid dfs(int u){//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u8054\u901a\u5757\n\tbelong[u] = cnt;\n\tsta[cnt].push_back(u);\n\tfor(R int i = head[u];i;i = e[i].next){\n\t\tint v = e[i].to;\n\t\tif(belong[v])continue;\n\t\tdfs(v);\n\t}\n}\nstruct node{\n\tint dis,id;\n\tnode(){}\n\tnode(int _dis,int _id){dis = _dis,id = _id;}\n\tinline bool operator <(const node &a)const{\n\t\treturn dis > a.dis;\n\t}\n};\npriority_queue<node>q;\nqueue<int>qq;\nvoid Dij(){\n\twhile(!q.empty()){\n\t\tint u = q.top().id;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u] = 1;\n\t\tfor(R int i = head[u];i;i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].dis){\n\t\t\t\tdis[v] = dis[u] + e[i].dis;\n\t\t\t\tif(belong[u]==belong[v])q.push(node(dis[v],v));\n\t\t\t}\n\t\t\tif(belong[u]!=belong[v]){\n\t\t\t\tin[belong[v]]--;\n\t\t\t\tif(!in[belong[v]])qq.push(belong[v]);\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Topo(){//\u62d3\u6251\u6392\u5e8f\u4ee5\u6b64\u66f4\u65b0\u6bcf\u4e2a\u8054\u901a\u5757\u6700\u77ed\u8def\n\tqq.push(belong[s]);\n\tfor(R int i = 1;i <= cnt;i++)if(!in[i])qq.push(i);\n\tmemset(dis,0x7f,sizeof(dis));//0x3f\u4f1awa\u7684\n\tdis[s] = 0;\n\twhile(!qq.empty()){\n\t\tint u = qq.front();qq.pop();\n\t\tfor(R int i = 0;i < sta[u].size();i++)q.push(node(dis[sta[u][i]],sta[u][i]));\n\t\tDij();\n\t}\n}\nint main(){\n\tn = read(),r = read(),p = read(),s = read();\n\tfor(R int i = 1;i <= r;i++){\n\t\tint a = read(),b = read(),c = read();\n\t\taddedge(a,b,c);\n\t\taddedge(b,a,c);\n\t}\n\tfor(R int i = 1;i <= n;i++){\n\t\tif(!belong[i]){\n\t\t\tcnt++;\n\t\t\tdfs(i);\n\t\t}\n\t}\n\tfor(R int i = 1;i <= p;i++){\n\t\tint a = read(),b = read(),c = read();\n\t\tin[belong[b]]++;//\u5165\u5ea6++\n\t\taddedge(a,b,c);\n\t}\n\tTopo();\n\tfor(R int i = 1;i <= n;i++){\n\t\tif(dis[i]>=0x3f3f3f3f)puts(\"NO PATH\");\n\t\telse printf(\"%d\\n\",dis[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1602504829,
        "uid": 322491,
        "name": "HH_Halo",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]Roads and Planes G\u3011"
    },
    {
        "content": "## [\u9898\u76ee\u5730\u5740](https://www.luogu.com.cn/problem/P3008)\n\n## Solution\n\u677f\u5b50\u9898\u2026\u2026  \n\u8d1f\u8fb9\u6743\u2014>\u88f8\u7684$Dijkstra$\u80af\u5b9a\u8fc7\u4e0d\u4e86  \n\u7136\u540e\u968f\u4fbf\u6572\u4e86\u4e00\u4e2a$Spfa$\u7684\u677f\u5b50\u62ff\u5230\u4e8688\u5206\u7684\u597d\u6210\u7ee9\uff1f  \n~~\u611f\u89c9\u6570\u636e\u6709\u4ebf\u70b9\u6c34~~  \n~~\u8981\u662f\u5361$Spfa$\u5c31\u5361\u621010\u5206\u554a\u5012\u662f~~  \n\u7136\u540e\u7136\u540e\u968f\u4fbf\u6362\u4e86\u4e2a$deque$\u4f18\u5316\u4e86\u4e00\u624b\u5c31\u8fc7\u4e86  \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_n)$  \n\u6700\u574f\u60c5\u51b5\u53ef\u4ee5\u88ab\u5361\u6210$O(nm)$  \n\u4e0d\u8fc7\u8fd9\u4e2a\u9898\u4f3c\u4e4e\u95ee\u9898\u4e0d\u5927   \n\u6839\u636e\u4ee5\u5f80\u7684\u7ecf\u9a8c\u6765\u770b  \n\u53cc\u7aef\u961f\u5217\u4f18\u5316\u7684$Spfa$\u4e0d\u592a\u5bb9\u6613\u88ab\u5361  \n\u4e5f\u5f88\u597d\u5b9e\u73b0\uff0c\u5728$Spfa$\u7684\u677f\u5b50\u4e0a\u6bcf\u6b21\u5224\u65ad\u4e00\u4e0b\u961f\u5934\u961f\u5c3e\u7684dis\u503c\u8c01\u5927\u8c01\u5c0f\uff0c\u66f4\u6362\u4e00\u4e0b\u8fdb\u961f\u65b9\u5f0f\u3002  \n\u5982\u679c\u5c0f\u4e8e\u961f\u5934\uff0c\u5c31\u628a\u8fd9\u4e2a\u70b9\u653e\u5165\u961f\u9996\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u907f\u514d\u591a\u4f59\u7684\u677e\u5f1b\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e$Dijkstra$\u7684\u5efa\u8bae\u601d\u60f3\uff1f\u5efa\u8bae\u5b66\u4e60    \n\n\u518d\u4e00\u4e2a\u5c31\u662f\u6b63\u89e3\uff0c\u5728\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u8dd1$Dijkstra$\u7136\u540e$Topsort$\n\u65f6\u95f4\u590d\u6742\u5ea6$O(mlog_n)$  \n\n\n\u61d2\u5f97\u5199\u7b2c\u4e8c\u79cd\u4e86\uff0c\u5176\u4ed6\u5927\u4f6c\u4e5f\u6709\u8bb2\uff0c\u653e\u4e2adeque\u7684\u677f\u5b50\u5f97\u4e86\uff0c\u8fc7\u5355\u6e90\u6700\u77ed\u8def\u4e5f\u6ca1\u95ee\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u98df\u7528\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\ninline int read(){\n\tint x = 0, w = 1;\n\tchar ch = getchar();\n\tfor (; ch < '0' || ch > '9'; ch = getchar()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\nconst int ss = 1000010;\n\nstruct node{\n\tint to, nxt, w;\n}edge[ss << 1];\n\nint head[ss << 1], tot;\ninline void add(int u, int v, int w){\n\tedge[++tot].to = v; \n\tedge[tot].nxt = head[u];\n\tedge[tot].w = w;\n\thead[u] = tot;\n}\n\ndeque<int> q;\nbool vis[ss];\nint dis[ss];\n\ninline void spfa(int s){\n\tmemset(vis, 0, sizeof vis);\n\tmemset(dis, 0x3f, sizeof dis);\n\tq.push_back(s);\n\tdis[s] = 0;\n\twhile(!q.empty()){\n\t\tint u = q.front();\n\t\tq.pop_front();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = edge[i].nxt){\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis[v] > dis[u] + edge[i].w){\n\t\t\t\tdis[v] = dis[u] + edge[i].w;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tif(!q.empty() && dis[v] >= dis[q.front()]) q.push_back(v);\n\t\t\t\t\telse q.push_front(v);\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main(){\n\tint n = read(), r = read(), p = read(), s = read();\n\tfor(int i = 1; i <= r; i++){\n\t\tint u = read(), v = read(), w = read();\n\t\tadd(u, v, w);\n\t\tadd(v, u, w);\n\t}\n\tfor(int i = 1; i <= p; i++){\n\t\tint u = read(), v = read(), w = read();\n\t\tadd(u, v, w);\n\t}\n\tspfa(s);\n\tfor(int i = 1; i <= n; i++){\n\t\tif(dis[i] == 0x3f3f3f3f) puts(\"NO PATH\");\n\t\telse cout << dis[i] << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1599792629,
        "uid": 154412,
        "name": "Gary818",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]Roads and Planes G\u3011"
    },
    {
        "content": "\u975e\u6b63\u89e3\u89e3\u6cd5\uff1aJohnson\u7b97\u6cd5\uff08\u5927\u6750\u5c0f\u7528\uff09\n\n\u4e0d\u4f1aJohnson\u7684\u5404\u4f4d\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\u4e00\u4e0b\uff0c\u6216\u8005\u8df3\u8fc7\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u5148\u7528Bellman-Ford+SLF\u6c42\u51fare-weight\u6240\u7528\u7684\u6570\u7ec4h\n\n\u4e8e\u662f\u5c31\u628a\u8d1f\u6743\u8fb9\u53d8\u6b63\u4e86\uff0c\u518d\u8dd1\u4e00\u904dDijkstra\u5c31\u51fa\u6765\u4e86\u3002\n\n\u8fd8\u597d\u8fd9\u9898\u6ca1\u628aBellman-Ford\u5361\u6b7b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 25010, M = 100005;\ntypedef pair<int, int> pii;\nint n, r, p, s;\n\nstruct node {\n\tint nxt, to, dis;\n}e[M << 2];\nint head[N], cnt = 0;\nvoid add(int nxt, int to, int dis) {\n\te[++cnt].nxt = head[nxt];\n\te[cnt].to = to;\n\te[cnt].dis = dis;\n\thead[nxt] = cnt;\n}\n\nint h[N], dis[N], vis[N];\n\nvoid BellmanFord() {\n\tint S = n + 1;\n\tfor(int i = 1; i <= n; ++i) add(S, i, 0);\n\tmemset(h, 0x3f, sizeof(h));\n\tmemset(vis, 0, sizeof(vis));\n\tdeque<int> dq;\n\tdq.push_back(S); vis[S] = 1; h[S] = 0;\n\twhile(!dq.empty()) {\n\t\tint u = dq.front(); dq.pop_front();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(h[v] > h[u] + e[i].dis) {\n\t\t\t\th[v] = h[u] + e[i].dis;\n\t\t\t\tif(!vis[v]) {\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t\tif(!dq.empty() && h[v] >= h[dq.front()]) dq.push_back(v);\n\t\t\t\t\telse dq.push_front(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Dijkstra() {\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(dis, 0x3f, sizeof(dis));\n\tpriority_queue<pii, vector<pii>, greater<pii> > que;\n\tdis[s] = 0;\n\tque.push(pii(0, s));\n\twhile(!que.empty()) {\n\t\tint u = que.top().second; que.pop();\n\t\tvis[u] = 1;\n\t\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v] > dis[u] + e[i].dis + h[u] - h[v]) {\n\t\t\t\tdis[v] = dis[u] + e[i].dis + h[u] - h[v];\n\t\t\t\tque.push(pii(dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Johnson() {\n\tBellmanFord(); Dijkstra();\n}\nint main() {\n\tscanf(\"%d%d%d%d\", &n, &r, &p, &s);\n\tfor(int i = 1; i <= r; ++i) {\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tadd(a, b, c); add(b, a, c);\n\t}\n\tfor(int i = 1; i <= p; ++i) {\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tadd(a, b, c);\n\t}\n\tJohnson();\n\tfor(int i = 1; i <= n; ++i) {\n\t\tif(dis[i] == 0x3f3f3f3f) printf(\"NO PATH\\n\");\n\t\telse printf(\"%d\\n\", dis[i] + h[i] - h[s]);\n\t}\n}\n```\n",
        "postTime": 1572615712,
        "uid": 34237,
        "name": "Adam_Ng",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "- \u6700\u77ed\u8def\uff08\u56e0\u4e3a\u6709\u8d1f\u6743\u6240\u4ee5\u7528SPFA\uff09\n- \u7136\u540e\u53c8T\u4e86\u4e24\u4e2a\u70b9\uff08#7#8\uff09\u6240\u4ee5\u7528\u4e86deque\n- \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,int>\nusing namespace std;\nconst int N=30005;\nint n,m,r,p,s;\nint dis[N],vis[N];\nvector<pii>G[N];\nint read()\n{\n\tint w=1,q=0;char ch=' ';\n\twhile(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n\tif(ch=='-')w=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9')q=10*q+ch-'0',ch=getchar();\n\treturn w*q;\n}\nint main()\n{\n\tn=read();r=read();p=read();s=read();\n\tfor(int i=1;i<=r;++i){\n\t\tint x=read(),y=read(),w=read();\n\t\tG[x].push_back(make_pair(y,w));\n\t\tG[y].push_back(make_pair(x,w));\n\t}\n\tfor(int i=1;i<=p;++i)\n\t{\n\t\tint x=read(),y=read(),w=read();\n\t\tG[x].push_back(make_pair(y,w));\n\t}\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;vis[s]=1;\n\tdeque<int>q;\n\tq.push_back(s);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front(),len=G[x].size();q.pop_front();vis[x]=0;\n\t\tfor(int i=0;i<len;++i)\n\t\t{\n\t\t\tint y=G[x][i].first,w=G[x][i].second;\n\t\t\tif(dis[y]>dis[x]+w)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+w;\n\t\t\t\tif(!vis[y]){\n\t\t\t\t\tvis[y]=1;\n\t\t\t\t\tif(q.empty()||dis[y]>=dis[q.front()])q.push_back(y);\n\t\t\t\t\telse q.push_front(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(dis[i]==0x3f3f3f3f)printf(\"NO PATH\\n\");\n\t    else printf(\"%d\\n\",dis[i]);\n\t}\n\treturn 0;\n} \n```\n\n",
        "postTime": 1564022740,
        "uid": 85968,
        "name": "Ibuki_fuko",
        "ccfLevel": 0,
        "title": "luoguP3008 roads and planes"
    },
    {
        "content": "\u5e94\u8be5\u7b97\u662f\u6bd4\u8f83\u6c34\u7684\u7701\u9009\u9898\u4e86\uff0c\u53ef\u7528SPFA+SLF\u5373\u53ef\u3002\n\n\u697c\u4e0b\u795e\u7287\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u4f46\u6709\u4e9b\u5730\u65b9\u4e0d\u591f\u51c6\u786e\uff0c\u5c31\u662f\u5728\u7528\u53cc\u7aef\u961f\u5217\u65f6\u8981\u4e0e\u961f\u5934\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u961f\u5934\uff0c\u5c31\u628a\u8fd9\u4e2a\u70b9\u653e\u5165\u961f\u9996\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u907f\u514d\u591a\u4f59\u7684\u677e\u5f1b\u3002\n\n\u8981\u6ce8\u610f\u8bfb\u5165\u4f18\u5316\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u52a0\u4f18\u5316\u53ef\u4ee5800\u591ams\uff0c\u4e0d\u52a0\u7684\u8bdd900\u591ams\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<cstdio>\nusing namespace std;\nconst int MAX_N = 1e5, MAX_M = 1e5, INF = 1<<30;\ndeque<int> q;\nstruct edge {\n    int v, w, next;\n} e[MAX_M * 2];\nint n, r, p, s, count, dis[MAX_N], head[MAX_N];\nbool vis[MAX_N];\ninline int read() {\n    int x = 0, w = 1;\n    char ch = 0;\n    while (ch < '0' || ch > '9') {\n        if (ch == '-') w = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9') {\n        x = (x<<3) + (x << 1) + ch - '0';\n        ch = getchar();\n    }\n    return x * w; \n}\n/*inline void write(int x) {\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n    return ; \n}*/\nvoid init() {\n    int i;\n    for (i = 1; i <= n; i++) {\n        head[i] = -1;\n        dis[i] = INF;\n    }\n    return ;\n}\nvoid add(int a, int b, int c) {\n    e[++count].v = b;\n    e[count].w = c;\n    e[count].next = head[a];\n    head[a] = count;\n    return ; \n}\nvoid spfa(int u) {\n    int i;\n    dis[u] = 0;\n    q.push_back(u);\n    vis[u] = true;\n    while (!q.empty()) {\n        int k = q.front();\n        q.pop_front();\n        for (i = head[k]; i + 1; i = e[i].next) {\n            if (dis[e[i].v] > dis[k] + e[i].w) {\n                dis[e[i].v] = dis[k] + e[i].w;\n                if (!vis[e[i].v]) {\n                    if (!q.empty() && dis[e[i].v] < dis[q.front()]) {\n                        q.push_front(e[i].v);\n                        vis[e[i].v] = true;\n                    }\n                    else {\n                        q.push_back(e[i].v);\n                        vis[e[i].v] = true;\n                    }\n                }\n            }\n        }\n        vis[k] = false;\n    }\n    return ;\n}\nint main() {\n    n = read(), r = read(), p =read(), s = read();\n    int i, x, y, z;\n    init();\n    for (i = 1; i <= r; i++) {\n        x = read(), y =read(), z = read();\n        add(x, y, z);\n        add(y, x, z);\n    }\n    for (i = 1; i <= p; i++) {\n        x = read(), y = read(), z = read();\n        add(x, y, z);\n    }\n    spfa(s);\n    for (i = 1; i <= n; i++) {\n        if (dis[i] == INF) printf(\"NO PATH\\n\");\n        else printf(\"%d\\n\", dis[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1508476179,
        "uid": 16215,
        "name": "\u516c\u5143\u67d0\u5e74\u7684\u732b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008 \u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes\u3011"
    },
    {
        "content": "### \u9898\u9762\n\n1503\uff1a\u9053\u8def\u548c\u822a\u7ebf\n\n\u65f6\u95f4\u9650\u5236: 1000 ms \u5185\u5b58\u9650\u5236: 65536 KB\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u539f\u9898\u6765\u81ea\uff1aUSACO 2011 Jan. Gold\n\nFarmer John \u6b63\u5728\u4e00\u4e2a\u65b0\u7684\u9500\u552e\u533a\u57df\u5bf9\u4ed6\u7684\u725b\u5976\u9500\u552e\u65b9\u6848\u8fdb\u884c\u8c03\u67e5\u3002\u4ed6\u60f3\u628a\u725b\u5976\u9001\u5230T\u4e2a\u57ce\u9547 \uff0c\u7f16\u53f7\u4e3a1\u5230T\u3002\u8fd9\u4e9b\u57ce\u9547\u4e4b\u95f4\u901a\u8fc7R\u6761\u9053\u8def\uff08\u7f16\u53f7\u4e3a1\u5230R\uff09\u548cP\u6761\u822a\u7ebf\uff08\u7f16\u53f7\u4e3a1\u5230P\uff09\u8fde\u63a5\u3002\u6bcf\u6761\u9053\u8defi\u6216\u8005\u822a\u7ebfi\u8fde\u63a5\u57ce\u9547Ai\u5230Bi\uff0c\u82b1\u8d39\u4e3aCi\u3002\n\n\u5bf9\u4e8e\u9053\u8def\uff0c0\u2264Ci\u226410^4\uff0c\u7136\u800c\u822a\u7ebf\u7684\u82b1\u8d39\u5f88\u795e\u5947\uff0c\u82b1\u8d39Ci\u53ef\u80fd\u662f\u8d1f\u6570\u3002\u9053\u8def\u662f\u53cc\u5411\u7684\uff0c\u53ef\u4ee5\u4eceAi\u5230Bi\uff0c\u4e5f\u53ef\u4ee5\u4eceBi\u5230Ai\uff0c\u82b1\u8d39\u90fd\u662fCi\u3002\u7136\u800c\u822a\u7ebf\u4e0e\u4e4b\u4e0d\u540c\uff0c\u53ea\u53ef\u4ee5\u4eceAi\u5230Bi\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u6700\u8fd1\u6050\u6016\u4e3b\u4e49\u592a\u56a3\u5f20\uff0c\u4e3a\u4e86\u793e\u4f1a\u548c\u8c10\uff0c\u51fa\u53f0\u4e86\u4e00\u4e9b\u653f\u7b56\u4fdd\u8bc1\uff1a\u5982\u679c\u6709\u4e00\u6761\u822a\u7ebf\u53ef\u4ee5\u4eceAi\u5230Bi\uff0c\u90a3\u4e48\u4fdd\u8bc1\u4e0d\u53ef\u80fd\u901a\u8fc7\u4e00\u4e9b\u9053\u8def\u548c\u822a\u7ebf\u4eceBi\u56de\u5230Ai\u3002\u7531\u4e8e FJ \u7684\u5976\u725b\u4e16\u754c\u516c\u8ba4\u5341\u5206\u7ed9\u529b\uff0c\u4ed6\u9700\u8981\u8fd0\u9001\u5976\u725b\u5230\u6bcf\u4e00\u4e2a\u57ce\u9547\u3002\u4ed6\u60f3\u627e\u5230\u4ece\u53d1\u9001\u4e2d\u5fc3\u57ce\u9547S\u628a\u5976\u725b\u9001\u5230\u6bcf\u4e2a\u57ce\u9547\u7684\u6700\u4fbf\u5b9c\u7684\u65b9\u6848\uff0c\u6216\u8005\u77e5\u9053\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\n\u3010\u8f93\u5165\u3011\n\n\u7b2c\u4e00\u884c\u4e3a\u56db\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff1aT,R,P,S\uff1b\n\n\u7b2c\u4e8c\u5230\u7b2cR+1\u884c\uff1a\u4e09\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff08\u8868\u793a\u4e00\u6761\u9053\u8def\uff09\uff1aAi,Bi\u548cCi\uff1b\u7b2cR+2\u5230R+P+1\u884c\uff1a\u4e09\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff08\u8868\u793a\u4e00\u6761\u822a\u7ebf\uff09\uff1aAi,Bi\u548cCi\u3002\n\n\u3010\u8f93\u51fa\u3011\n\n\u8f93\u51faT\u884c\uff0c\u7b2ci\u884c\u8868\u793a\u5230\u8fbe\u57ce\u9547i\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8f93\u51fa NO PATH\u3002\n\n\u3010\u8f93\u5165\u6837\u4f8b\u3011\n\n6 3 3 4 \n\n1 2 5 \n\n3 4 5 \n\n5 6 10 \n\n3 5 -100 \n\n4 6 -100 \n\n1 3 -10\n\n\u3010\u8f93\u51fa\u6837\u4f8b\u3011\n\nNO PATH \nNO PATH \n5 \n0 \n-95 \n-100\n\n\u3010\u63d0\u793a\u3011\n\n\u6837\u4f8b\u8bf4\u660e\n\n\u4e00\u5171\u516d\u4e2a\u57ce\u9547\u3002\u57281\u548c2\uff0c3\u548c4\uff0c5\u548c6\u4e4b\u95f4\u6709\u9053\u8def\uff0c\u82b1\u8d39\u5206\u522b\u662f5,5,10\u3002\u540c\u65f6\u6709\u4e09\u6761\u822a\u7ebf\uff1a3\u21925\uff0c4\u21926\u548c1\u21923\uff0c\u82b1\u8d39\u5206\u522b\u662f-100,\u2212100,\u221210\u3002FJ \u7684\u4e2d\u5fc3\u57ce\u9547\u5728\u57ce\u95474\u3002FJ \u7684\u5976\u725b\u4ece4\u53f7\u57ce\u9547\u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u9053\u8def\u5230\u8fbe3\u53f7\u57ce\u9547\u3002\u7136\u540e\u4ed6\u4eec\u4f1a\u901a\u8fc7\u822a\u7ebf\u8fbe\u52305\u548c6\u53f7\u57ce\u9547\u3002\u4f46\u662f\u4e0d\u53ef\u80fd\u5230\u8fbe1\u548c2\u53f7\u57ce\u9547\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n\u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff0c1\u2264T\u22642.5\u00d710^4,1\u2264R,P\u22645\u00d710^4,1\u2264Ai,Bi,S\u2264T\u3002\u4fdd\u8bc1\u5bf9\u4e8e\u6240\u6709\u9053\u8def\uff0c0\u2264Ci\u226410^4,\u5bf9\u4e8e\u6240\u6709\u822a\u7ebf\uff0c\u221210^4\u2264Ci\u226410^4\u3002\n\n### \u7b97\u6cd5\n\nSPFA\u4f18\u5316\n\n\u672c\u9898\u662f\u7b80\u5355\u7684\u5355\u6e90\u6700\u77ed\u8def\u7684\u95ee\u9898\uff0c\u6709\u8d1f\u6743\u8fb9\uff0c\u9700\u8981\u7528SPFA\u7b97\u6cd5\u89e3\u51b3\u3002\u5b9e\u9645\u64cd\u4f5c\u65f6\u53d1\u73b0SPFA\u8fd0\u884c\u6b64\u9898\u6570\u636e\u4f1a\u8d85\u65f6\uff0c\u56e0\u800c\u9700\u8981\u8fdb\u884c\u4f18\u5316\u3002\n\n**\u5e38\u89c1\u7b80\u5355\u4f18\u5316**\n\n1. SLF\u4f18\u5316\n\n\u5c06\u961f\u5217\u5efa\u6210\u53cc\u7aef\u961f\u5217\uff0c\u5728\u9047\u5230\u8981\u63d2\u5165\u7684\u70b9\u7684\u6700\u77ed\u8def\u6bd4\u5f53\u524d\u7684\u961f\u5934\u7684\u6700\u77ed\u8def\u77ed\u5c31\u63d2\u5165\u961f\u9996\uff0c\u5426\u5219\u63d2\u5165\u961f\u5c3e\u3002\n\n\u82e5\u6700\u77ed\u8def\u8f83\u77ed\uff0c\u5219\u66f4\u5bb9\u6613\u677e\u5f1b\uff0c\u4e5f\u66f4\u5bb9\u6613\u83b7\u5f97\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u70b9\u7684\u201c\u4f7f\u7528\u6548\u7387\u201d\u9ad8\uff0c\u5219\u961f\u5217\u64cd\u4f5c\u6b21\u6570\u5c31\u4f1a\u51cf\u5c11\u3002\n\n\u53cc\u7aef\u961f\u5217\u7528STL deque \u5b9e\u73b0\u3002\n\n2. LLL\u4f18\u5316\n\n\u5728\u62bd\u51fa\u961f\u9996\u65f6\uff0c\u5982\u679c\u961f\u9996\u7684\u6700\u77ed\u8def\u6bd4\u5168\u4f53\u6700\u77ed\u8def\u5e73\u5747\u503c\u5927\uff0c\u5c06\u5176\u653e\u81f3\u961f\u5c3e\uff0c\u4e0d\u65ad\u8fed\u4ee3\u76f4\u5230\u627e\u5230\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u518d\u8fdb\u884c\u7b97\u6cd5\u3002\n\n\u4e00\u6837\u662f\u4f7f\u961f\u9996\u5bf9\u5e94\u7684\u6700\u77ed\u8def\u8f83\u77ed\u3002\n\n\u672c\u9898\u4f7f\u7528SLF\u4f18\u5316\u5373\u53ef\u901a\u8fc7\uff0c\u4ee3\u7801\u4e3aSLF\u4f18\u5316\u7248\u672c\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<deque>\nint t,r,p,s;\nstruct node\n{\n\tint to;\n\tint w;\n\tint next;\n}edge[150005];\nint cnt;\nint head[25005];\ninline void add(int u,int v,int w)\n{\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n\tedge[cnt].w=w;\n}//\u94fe\u5f0f\u524d\u5411\u5fc3\u5efa\u56fe\nint dis[25005];\nchar book[25005];\nstd::deque<int> q;//\u53cc\u7aef\u961f\u5217\nint main()\n{\n\tscanf(\"%d%d%d%d\",&t,&r,&p,&s);\n\tint a,b,c;\n\tfor(int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t}\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t}\n\tmemset(dis,0x3f,sizeof(dis));\n\t//\u8bfb\u5165\u3001\u5efa\u56fe\u3001\u521d\u59cb\u5316\n    dis[s]=0;\n\tq.push_back(s);\n\twhile(!q.empty())\n\t{\n\t\tint i=q.front();\n\t\tq.pop_front();\n\t\tbook[i]=0;\n\t\tfor(int j=head[i];j!=0;j=edge[j].next)\n\t\t{\n\t\t\tif(dis[edge[j].to]>dis[i]+edge[j].w)\n\t\t\t{\n\t\t\t\tdis[edge[j].to]=dis[i]+edge[j].w;\n\t\t\t\tif(book[edge[j].to]==0)\n\t\t\t\t{\n\t\t\t\t\tbook[edge[j].to]=1;\n\t\t\t\t\tif(!q.empty() && dis[q.front()]>dis[edge[j].to])\n\t\t\t\t\t{\n\t\t\t\t\t\tq.push_front(edge[j].to);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tq.push_back(edge[j].to);\n\t\t\t\t\t}//SLF\u53cc\u7aef\u961f\u5217\u4f18\u5316\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=t;i++)\n\t{\n\t\tif(dis[i]==0x3f3f3f3f)\n\t\t{\n\t\t\tputs(\"NO PATH\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%d\\n\",dis[i]);\n\t\t}\n\t}//\u8f93\u51fa\n\treturn 0;\n}\n```\n\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1503\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 536KB 1MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 532KB 1MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 536KB 1MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 556KB 1MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 588KB 2MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 812KB 8MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 1316KB 31MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 1644KB 45MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 2052KB 65MS \n\n\u6d4b\u8bd5\u70b910: \u7b54\u6848\u6b63\u786e 2548KB 151MS \n\n\u6d4b\u8bd5\u70b911: \u7b54\u6848\u6b63\u786e 2468KB 111MS \n\n\u6d4b\u8bd5\u70b912: \u7b54\u6848\u6b63\u786e 2512KB 113MS \n\n\u6d4b\u8bd5\u70b913: \u7b54\u6848\u6b63\u786e 2084KB 101MS \n\n\u6d4b\u8bd5\u70b914: \u7b54\u6848\u6b63\u786e 1940KB 49MS \n\n\u6d4b\u8bd5\u70b915: \u7b54\u6848\u6b63\u786e 1352KB 205MS \n\n\u6d4b\u8bd5\u70b916: \u7b54\u6848\u6b63\u786e 2528KB 395MS \n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 2.53s \u5185\u5b58 2.78MB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n\n3ms/816.00KB \nAC #1\n\n300ms/2.64MB \nAC #2\n\n171ms/2.38MB \nAC #3\n\n181ms/2.78MB \nAC #4\n\n201ms/2.12MB \nAC #5\n\n74ms/1.88MB \nAC #6\n\n533ms/1.41MB \nAC #7\n\n862ms/2.50MB \nAC #8\n\n3ms/632.00KB \nAC #9\n\n3ms/808.00KB \nAC #10\n\n3ms/644.00KB \nAC #11\n\n4ms/760.00KB \nAC #12\n\n9ms/1.00MB \nAC #13\n\n43ms/1.54MB \nAC #14\n\n58ms/1.90MB \nAC #15\n\n85ms/2.13MB \nAC #16",
        "postTime": 1565690378,
        "uid": 158626,
        "name": "lzcjoe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3008\u3010[USACO11JAN]\u9053\u8def\u548c\u98de\u673aRoads and Planes \u4e00\u672c\u901a\u63d0\u9ad8\u7bc7 3.1.7 1503 \u9053\u8def\u548c\u822a\u7ebf\u3011"
    }
]