[
    {
        "content": "[P2402 \u5976\u725b\u9690\u85cf](https://www.luogu.com.cn/problem/P2402)\n\n\u4e8c\u5206\u7b54\u6848 $ + $ \u7f51\u7edc\u6d41\n\n\u5efa\u56fe\uff1a\n\n1\u3001\u6e90\u70b9 $ \\rightarrow $ \u6bcf\u5757\u7530\uff0c\u8fb9\u6743\u4e3a\u725b\u7684\u6570\u91cf\n\n2\u3001\u6bcf\u4e2a\u725b\u68da $ \\rightarrow $ \u6c47\u70b9\uff0c\u8fb9\u6743\u4e3a\u725b\u68da\u6700\u591a\u80fd\u5bb9\u7eb3\u7684\u725b\n\n3\u3001\u5bf9\u4e2d\u95f4\u7684\u8fb9\u8fdb\u884c\u4e8c\u5206\u7b54\u6848\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\u3002\n\n\u4f7f\u7528 floyd \u5bf9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u9884\u5904\u7406\uff0c\u5bf9\u6700\u5c0f\u65f6\u95f4\u8fdb\u884c\u4e8c\u5206\u7b54\u6848\u3002\u5982\u679c\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\u53ef\u4ee5\u4ece $ i $ \u53f7\u7530\u5730\u8d70\u5411 $ j $ \u53f7\u725b\u68da\uff0c\u5c31\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $ \\infty $ \uff0c\u6700\u7ec8\u68c0\u9a8c\u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e\u725b\u7684\u6570\u91cf\u5373\u53ef\u3002\n\n\u4e00\u4e9b\u6613\u9519\u70b9\uff1a\n\n1\u3001\u5b58\u5728\u91cd\u8fb9\uff0c\u90bb\u63a5\u77e9\u9635\u9700\u8981\u52a0\u4e0a $ min $\u3002\n\n2\u3001\u90bb\u63a5\u77e9\u9635\u6bcf\u4e2a\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u9700\u8981\u8d4b\u503c\u4e3a $ 0 $\u3002\n\n3\u3001\u4e8c\u5206\u9700\u8981\u6e05\u7a7a\u4e4b\u524d\u7684\u6570\u7ec4\u3002\n \nCode\n```cpp\n # include <bits/stdc++.h>\nusing namespace std;\n# define int long long\nconst int N = 1e6 + 5;\nconst int M = 2e6 + 5;\nconst int inf = 1e18; \nconst int maxn = 200 + 5;\n\ntypedef struct {\n\tint x , y , z , next;\n}Node;\nNode edge[M];\nint E = 1 , elast[N];\nint S , T;\n\nvoid add(int x , int y , int z) {\n\tE ++ , edge[E].x = x , edge[E].y = y , edge[E].z = z , edge[E].next = elast[x] , elast[x] = E;\n}\n\nint dis[N] , cnt[N];\nvoid bfs(int start) {\n    queue<int> q;\n    q.push(start);\n    dis[start] = 0;\n    cnt[S] = 1;\n    while (!q.empty()) {\n        int cur = q.front();\n        q.pop();\n        for (int i = elast[cur] ; i ; i = edge[i].next) {\n            int v = edge[i].y;\n            if (dis[v] != -1) continue;\n            dis[v] = dis[cur] + 1;\n            q.push(v);\n            cnt[dis[v]] ++;\n        }\n    }\n}\nint cur[N];\nint dfs(int u , int flow) {\n    if (u == T) return flow;\n    int delta = 0;\n    for (int i = cur[u] ; i ; i = edge[i].next) {\n        cur[u] = i;\n        int v = edge[i].y;\n        if (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n            int temp = dfs(v , min(flow - delta , edge[i].z));\n            edge[i].z -= temp;\n            edge[i ^ 1].z += temp;\n            delta += temp;\n            if (delta == flow) return delta;\n        }\n    }\n    if (dis[S] >= T + 1) return delta;\n    cur[u] = elast[u];\n    if (-- cnt[dis[u]] == 0) dis[S] = T + 1;\n    cnt[++ dis[u]] ++;\n    return delta;\n}\nint Isap() {\n    int ans = 0;\n    memset(cnt , 0 , sizeof cnt);\n    memset(dis , -1 , sizeof dis);\n    bfs(T);\n    for (int i = 0 ; i <= T ; i ++) {\n        cur[i] = elast[i];\n    }\n    while (dis[S] < T + 1) ans += dfs(S , inf);\n    return ans;\n}\nint n , m;\nint a[N] , b[N] , Dis[maxn][maxn];\nvoid rebuild(int maxv) {\n\tfor (int i = 1 ; i <= n ; i ++) {\n    \tadd(S , i , a[i]) , add(i , S , 0);\n    \tadd(n + i , T , b[i]) , add(T , n + i , 0);\n    \tfor (int j = 1 ; j <= n ; j ++) {\n    \t\tif (Dis[i][j] <= maxv) add(i , n + j , inf) , add(n + j , i , 0);\n\t\t}\n\t}\n}\nvoid init() {\n\tmemset(elast , 0 , sizeof elast);\n\tE = 1;\n}\nbool check(int cnt) {\n\tif (Isap() == cnt) return true;\n\telse return false;\n}\nint Cnt = 0;\nsigned main() {\n\tcin >> n >> m;\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tcin >> a[i] >> b[i];\n\t\tCnt += a[i];\n\t}\n\tmemset(Dis , 0x3f , sizeof Dis);\n\tfor (int i = 1 ; i <= n ; i ++) Dis[i][i] = 0;\n\tfor (int i = 1 ; i <= m ; i ++) {\n\t\tint x , y , z;\n\t\tcin >> x >> y >> z;\n\t\tDis[x][y] = min(Dis[x][y] , z);\n\t\tDis[y][x] = min(Dis[y][x] , z);\n\t}\n\tfor (int k = 1 ; k <= n ; k ++) {\n\t\tfor (int i = 1 ; i <= n ; i ++) {\n\t\t\tfor (int j = 1 ; j <= n ; j ++) {\n\t\t\t\tDis[i][j] = min(Dis[i][j] , Dis[i][k] + Dis[k][j]);\n\t\t\t}\n\t\t}\n\t}\n    S = 0 , T = n << 1 | 1;\n    int l = 0 , r = inf;\n    int ans = 0;\n\twhile (l <= r) {\n    \tint mid = (l + r) >> 1;\n        init();\n\t\trebuild(mid);\n\t\tbool flag = check(Cnt);\n        if (!flag) l = mid + 1;\n        else r = mid - 1 , ans = mid;\n\t}\n\tif (ans == 0) cout << \"-1\" << endl;\n\telse cout << ans << endl;\n\treturn 0;\n}\n```",
        "postTime": 1629979145,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P2402 \u5976\u725b\u9690\u85cf"
    },
    {
        "content": "# P2402 \u3010\u5976\u725b\u9690\u85cf\u3011\n## \u9898\u610f\n\n\u4e00\u5f20\u65e0\u5411\u56fe\u4e0a\u6709$n$\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709$s_i$\u5934\u725b\uff0c\u53ef\u4ee5\u5bb9\u7eb3$p_i$\u5934\u725b\uff0c\u5982\u679c\u6709\u4e00\u6761\u8fb9$(u,v,w)\\in G$\uff0c\u90a3\u4e48\u4e00\u5934\u725b\u53ef\u4ee5\u7528$w$\u7684\u65f6\u95f4\u4ece$u$\u5230$v$\n\n\u95ee\u81f3\u5c11\u9700\u8981\u591a\u4e45\u65f6\u95f4\u53ef\u4ee5\u4f7f\u5168\u90e8\u7684\u725b\u8eb2\u8fdb\u725b\u68da\u3002\n\n## \u9898\u89e3\n\u770b\u5230\u8ba9\u6240\u6709\u7684\u725b\u8fdb\u5165\u725b\u68da\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5f88\u660e\u663e\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\u3002\u56e0\u4e3a\u5982\u679c$t$\u7684\u65f6\u95f4\u6240\u6709\u7684\u725b\u53ef\u4ee5\u8eb2\u8fdb\uff0c\u90a3\u4e48$t^\\prime>t$\u8fd8\u6709\u4ec0\u4e48\u7406\u7531\u8eb2\u4e0d\u8fdb\u5462\u3002\n\n\u90a3\u4e48\u8003\u8651\u8fd9\u4e9b\u65f6\u95f4\u6709\u4ec0\u4e48\u7279\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u7528\u4e00\u4e2a\u96c6\u5408$S$\u6765\u653e\u6240\u6709\u7684$dis[i][j]$\uff0c\u90a3\u4e48\u5982\u679c\u6709\u4e00\u4e2a$t\\notin S$\uff0c\u90a3\u4e48\u5982\u679c$t$\u53ef\u884c\uff0c$S$\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\u4e5f\u540c\u6837\u53ef\u884c\u3002\u6b64\u65f6\u5728\u68c0\u9a8c\u8fd9\u4e2a\u6570\u5b57~~\u7eaf\u7cb9\u662f\u5728\u6d6a\u8d39\u8bc4\u6d4b\u673a\u8d44\u6e90~~ ~~\u4e5f\u4e0d\u4f1a\u6162\u591a\u5c11~~\n\n\u4e8e\u662f\u6211\u4eec\u628a\u6240\u6709\u7684\u65f6\u95f4\u5b58\u8fdb$\\texttt{set}$\u91cc\uff0c\u5728\u653e\u8fdb\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206\uff0c\u6b64\u65f6\u6b21\u6570\u4e3a$\\log_2(n^2)$\n\n~~\u4e8e\u662f\u5269\u4e0b\u7684\u68c0\u9a8c\u64cd\u4f5c\u6709\u624b\u5c31\u884c\u4e86~~\u3002\u5efa\u4e24\u6392\u70b9\uff0c\u4e00\u6392\u4e3a\u725b\uff0c\u53e6\u4e00\u6392\u4e3a\u725b\u68da\u3002\u8d85\u7ea7\u6e90\u70b9$S$\u8fde\u5230\u725b\uff0c\u6d41\u91cf\u4e3a$s_i$\uff0c\u725b\u68da\u8fde\u5230\u8d85\u7ea7\u6c47\u70b9$T$\uff0c\u6d41\u91cf\u4e3a$p_i$\uff0c$\\forall dis[i][j]\\le mid$\u7684\u70b9\uff0c\u8fde\u4e00\u6761\u4ece\u725b$i$\u8fde\u63a5\u5230\u725b\u68da$j$\uff0c\u6d41\u91cf\u4e3a$+\\infty$\u7684\u8fb9\u3002\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u82e5$flow=\\sum_{i=1}^n s_i$\uff0c\u5219\u6b64\u65b9\u6848\u53ef\u884c\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=4010,maxe=100010*2;\n#define int long long \nstruct Graph{\n    struct node{\n        int v,w,nxt;\n    }e[maxe<<1];\n    int head[maxn],cur[maxn],tot;\n    int dis[maxn];\n    int s,t;\n    void init(int _s,int _t){s=_s,t=_t;tot=1;memset(head,0,sizeof head);}\n    Graph(int _s=0,int _t=0){init(_s,_t);}\n    void add(int u,int v,int w){\n        //printf(\"%d %d %d\\n\",u,v,w);\n        e[++tot]=(node){v,w,head[u]},head[u]=tot;\n        e[++tot]=(node){u,0,head[v]},head[v]=tot;\n    }\n    #define v e[i].v\n    inline bool bfs(){\n        queue<int>q;\n        memset(dis,0,sizeof dis);\n        memcpy(cur,head,sizeof head);\n        dis[s]=1;q.push(s);\n        while(q.size()){\n            int u=q.front();q.pop();\n            for(int i=head[u];i;i=e[i].nxt)\n                if(!dis[v]&&e[i].w){\n                    dis[v]=dis[u]+1,q.push(v);\n                    if(v==t)return true;\n                }\n        }\n        return  false;\n    }\n    int dfs(int u,int flow){\n        if(u==t)return flow;\n        int rest=flow;\n        for(int i=cur[u];i&&rest;i=e[i].nxt){\n            if(dis[v]==dis[u]+1&&e[i].w){\n                int tmp=dfs(v,min(rest,e[i].w));\n                rest-=tmp,e[i].w-=tmp,e[i^1].w+=tmp;\n            }\n            cur[u]=i;\n        }\n        if(rest==0)dis[u]=-1;\n        return flow-rest;\n    }\n    #undef v\n    int dinic(){\n        int ans=0;\n        while(bfs())\n            while(int sth=dfs(s,2e9))\n                ans+=sth;\n        return ans;\n    }\n}; \nGraph G;\nint f[300][300];\nint s[300],p[300];\nint n,m,u,v;int w,sum;\nconst int inf=199000000900;\nbool check(int x){\n\tG.init(0,2*n+1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(f[i][j]<=x||i==j)\n\t\t\t\tG.add(i,j+n,inf);\n\tfor(int i=1;i<=n;i++)G.add(G.s,i,s[i]),G.add(i+n,G.t,p[i]);\n\tint tmp=G.dinic();\n\treturn tmp>=sum;\n}\nset<int>a; \nvector<int>vec;\nsigned main(){\n\tmemset(f,0x3f,sizeof f);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lld%lld\",&s[i],&p[i]),sum+=s[i];\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%lld\",&u,&v,&w),\n\t\tf[u][v]=f[v][u]=min(f[v][u],w);\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tf[i][j]=min(f[i][j],f[i][k]+f[k][j]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(f[i][j]!=0x3f3f3f3f3f3f3f3f)\n\t\t\t\ta.insert(f[i][j]);\n\tvec.assign(a.begin(),a.end());\n\tint l=0,r=vec.size()-1,ans=-1;\n\tfor(;l<=r;){\n\t\tint mid=l+r>>1;\n\t\tif(check(vec[mid]))ans=vec[mid],r=mid-1;\n\t\telse l=mid+1;\n\t}cout<<ans;\n}\n```",
        "postTime": 1601269578,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2402 \u3010\u5976\u725b\u9690\u85cf\u3011"
    },
    {
        "content": "~~@MloVtry \u5927\u7287 \u7b2c\u4e00\u773c\u4ee5\u4e3a\u662f\u53d6\u6700\u540e\u4e00\u6b21\u6700\u5927\u8d39\u7528~~+1\n\n\n\u7136\u800c\u5f88\u5feb\u5c31\u628a\u8fd9\u79cd\u8be1\u5f02\u7684\u529e\u6cd5\u7ed9\u81ea\u5df1\u63a8\u7ffb\u6389\u4e86\u3002\n\n\n\u4f8b\u5b50\u5f88\u7b80\u5355\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/13023.png) \n\n\u8fd9\u5f20\u56fe\u7684\u610f\u601d\u662f\uff0c\u67093\u5757\u7530\uff0c1\u30012\u5904\u5404\u6709\u4e00\u5934\u725b\uff0c2\u30013\u5904\u5404\u6709\u4e00\u4e2a\u5bb9\u91cf\u4e3a1\u7684\u68da\u3002\u5982\u679c\u5efa\u8d39\u7528\u6d41\u7684\u56fe\uff0c\u5c31\u4f1a\u957f\u8fd9\u4e2a\u6837\u5b50\u5bf9\u5427\u3002\n\n\n\u8bd5\u60f3\u4e00\u4e0b\u8dd1\u8d39\u7528\u6d41\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u7b2c\u4e00\u6b21\uff0c\u7531S->2->T,\u6ca1\u6709\u8d39\u7528\uff1b\n\n\n\u7b2c\u4e8c\u6b21\uff0c\u7531S->1->2->3->T,\u8d39\u7528\u4e3a2\uff0c\u8dd1\u5b8c\u4e86\u3002\n\n\n\u7136\u800c\uff0c\u6ed1\u7a3d\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e24\u5934\u725b\u4e00\u8d77\u52a8\uff0c1->2,2->3,\u6700\u5927\u7684\u8d39\u7528\u53ea\u67091\u3002\n\n\n\u56e0\u4e3a\u8d39\u7528\u6d41\u6bcf\u6b21\u628a\u6700\u77ed\u7684\u6311\u8d70\u4e86\uff0c\u4f7f\u6211\u4eec\u53cd\u800c\u627e\u4e0d\u5230\u7b54\u6848\u3002\u6240\u4ee5\u4e07\u4e07\u4e0d\u80fd\u8dd1\u8d39\u7528\u6d41\u4e86\u3002\n\n\n---\n\n\u8fd8\u662f\u8003\u8651**\u4e8c\u5206\u7b54\u6848\u8dd1\u6700\u5927\u6d41\u6700\u5c0f\u5272**\u5427\u3002\n\n\n\u7136\u800c\u770b\u5230\u4e0b\u9762\u51e0\u4f4d\u5927\u7287\u62fc\u547d\u5361INF\uff0c\u6211\u81ea\u5df1\u4e5f\u77ac\u95f4\u5d29\u6e83\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u4e8e\u662f\uff0c\u6709\u5fc5\u8981\u6765\u51cf\u5c11\u4e8c\u5206\u6b21\u6570\u4e86\u3002\n\n\n\u65e2\u7136\u70b9\u6570\u662f\u6709\u9650\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u4e24\u4e24\u76f8\u8fde\u6240\u4ea7\u751f\u7684\u8fb9\u6570\u4e5f\u4e0d\u591a\uff0c\u9876\u591a\u51e0\u4e07\u6761\u3002\u800clonglong\u53d6\u503c\u8303\u56f4\u592a\u5927\u4e86\uff0c\u5373\u4f7f\u4e8c\u5206\uff0c\u4e5f\u9700\u8981\u8dd1\u4e94\u516d\u5341\u4e0b\uff08\u5047\u5982\u6ca1\u5361INF\u5927\u5c0f\u7684\u8bdd\uff09\uff0c\u5361\u4e86\u4ee5\u540e\u4e5f\u8fd8\u662f\u4e0d\u5c0f\u3002\n\n\n\u6240\u4ee5\uff0c\u53ef\u4ee5\u628a**\u8fb9\u6309\u957f\u5ea6\u79bb\u6563\u5316**\uff0c\u5728\u8fb9\u7684\u96c6\u5408\u4e0a\u8fdb\u884c\u4e8c\u5206\u3002\u628a\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u7528**floyd**\u7b97\u51fa\u6765\u4ee5\u540e\uff0c\u6309\u957f\u5ea6**sort**\u4e00\u4e0b\uff0c\u518d\u6309\u6b21\u5e8f\u52a0\u5165\u8fb9\u96c6\u5408\u4e2d\u3002\u8fd8\u8981\u6309\u7167\u957f\u5ea6\u7684\u53d6\u503c\u8303\u56f4\u5206\u6210\u82e5\u5e72\u4e2a\u5c0f\u96c6\u5408\uff08\u5373\u79bb\u6563\u5316\uff09\u3002\u56e0\u4e3a\u5df2\u7ecf\u6709\u5e8f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u53d6\u503c\u8303\u56f4\u7684\u5e8f\u5217\u4e0a\u4e8c\u5206\u5c31\u597d\u4e86\u3002\n\n\n\u52a0\u4e0a\u4e00\u4e2a\u6bd4\u8f83\u65b9\u4fbf\u7684\u505a\u6cd5\u3002\u628a**\u6bcf\u4e2a\u503c\u5728\u8fb9\u96c6\u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e**\u4e5f\u8bb0\u5f55\u4e0b\u6765\u3002\u4e8c\u5206\u5b8c\uff0c\u8dd1\u6700\u5927\u6d41\u6700\u5c0f\u5272\u7684\u65f6\u5019\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\u7684\u8fb9\uff08\u4e5f\u5c31\u662f\u8fb9\u957f\u6bd4mid\u5927\u7684\u8fb9\uff0c\u56e0\u4e3asort\u52a0\u79bb\u6563\u5316\u540e\u8f83\u957f\u7684\u8fb9\u52a0\u5728\u4e86\u540e\u9762\uff09\u90fd\u76f4\u63a5\u8df3\u8fc7\u3002\u8fd9\u6837\u505a\u53c8\u7701\u53bb\u4e86\u91cd\u65b0\u5efa\u8fb9\u7684\u65f6\u95f4\u3002\n\n\n---\n\n\u7136\u540e\u6211\u5c31WA\u4e86\uff0c~~\u8fde\u6837\u4f8b\u90fd\u6ca1\u8fc7~~\n\n\n\u8c03\u8bd5\u4e86\u4e0b\u53d1\u73b0\uff0c\u5f53\u6211\u4e8c\u5206\u523070\u7684\u65f6\u5019\uff0c\u5c45\u7136\u6ee1\u6d41\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u539f\u6765\u6211\u6ca1\u62c6\u70b9\uff0c\u7ed3\u679c1<->2\u957f\u5ea640\u7684\u8fb9\u548c2<->3\u957f\u5ea670\u7684\u8fb9\u8fde\u8d77\u6765\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n**\u6240\u4ee5\u4e00\u5b9a\u8981\u62c6\u70b9\uff01\uff01\uff01**\u8fb9\u52a0\u4e24\u6b21\u5c31\u662f\u4e86\u3002\n\n\n\u548c\u697c\u4e0a\u5927\u7287\u6709\u4e00\u70b9\u70b9\u533a\u522b\uff0c\u5c31\u662f\u8fb9\u7684\u5bb9\u91cf\u53ef\u4ee5\u4e0d\u7528\u5f00\u5230INF\u4e86\uff0c\u7b49\u4e8e\u8d77\u70b9\u5bf9\u5e94\u7684\u725b\u6570\u91cf\u5c31\u53ef\u4ee5\u4e86\uff08\u4ece\u90a3\u91cc\u53ea\u80fd\u8dd1\u51fa\u90a3\u4e48\u591a\u725b\u561b\uff09\u3002~~\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u4f18\u5316\u5e38\u6570~~\n\n\n\u9644\u4e0a\u6837\u4f8b\u5efa\u56fe\n\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/13060.png) \n\n---\n\u5410\u69fd\u4e00\u53e5~~TM\u8fd9\u9898\u76ee\u6570\u636e\u8303\u56f4\u4e5f\u6ca1\u7ed9\u6e05\u695a~~\n\n\n\u6240\u4ee5\u8fd8\u662f\u8981\u5f00longlong\u7684\uff0c\u5b9e\u6d4b\u5f00intWA\u4e00\u4e2a\u70b9\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u5177\u4f53\u7ec6\u8282\u5c31\u770b\u4e0b\u9762\u4ee3\u7801\u5427\u3002\u52a0\u4e86\u4e0d\u5c11\u4f18\u5316\uff0c32s\u6210\u529f\u51b2\u5230\u5f53\u524d\u672c\u9898rank1~~\u5f00\u4e86O2~~\uff0c\u6b22\u8fce\u8d85\u8d8a\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\n#define R register int\n#define RL register LL\nconst int N=1009,M=200009;\nconst LL INF=1ll<<50;\nstruct EDGE{\n    int a,b;\n    LL l;\n}e[M];//\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u5b58\u5728\u8fd9\u91cc\u6392\u5e8f\nint S=0,T,SZ,he[N],ne[M],to[M],q[N],d[N],cur[N],grp[M];\nLL LIM,f[M],mem[M],val[M],g[N][N];\n#define G c=getchar()\n#define in(z) G;\\\n    while(c<'-')G;\\\n    z=c&15;G;\\\n    while(c>'-')z*=10,z+=c&15,G;\n#define min(x,y) x<y?x:y\n#define min2(x,y) if(x>y)x=y\n#define add(U,V,F)\\\n    to[++p]=V;ne[p]=he[U];he[U]=p;mem[p]=F;\\\n    to[++p]=U;ne[p]=he[V];he[V]=p;\ninline bool cmp(EDGE x,EDGE y){return x.l<y.l;}\ninline bool bfs()\n{\n    memset(d+1,0,SZ);\n    for(R h=0,t=1;h<t;++h)\n        for(R i=he[q[h]];i;i=ne[i])\n            if(i<LIM&&f[i]&&!d[to[i]])\n                d[q[t++]=to[i]]=d[q[h]]+1;\n    return d[T];\n}//i<LIM\u5ffd\u7565\u7f16\u53f7\u8d85\u8fc7\u9650\u5236\u7684\u8fb9\nLL dfs(R u,RL mf)\n{\n    if(u==T)return mf;\n    for(R&i=cur[u];i;i=ne[i])\n        if(i<LIM&&f[i]&&d[to[i]]==d[u]+1)\n        {\n            RL cf=dfs(to[i],min(f[i],mf));\n            if(cf){f[i]-=cf;f[i^1]+=cf;return cf;}\n        }\n    return 0;\n}//\u4ee5\u4e0a\u662fdinic\u6a21\u677f\nint main()\n{\n    R n,m,p=1,h=0,t=0,i,j,k,u,v;\n    RL s,sum=0,res;\n    register char c;\n    in(n);in(m);T=n*2+1;SZ=(T+1)<<2;//S,T\u5c31\u662f\u6e90\u6c47\u70b9\u5566\uff0cSZ\u7ef4\u62a4\u6570\u7ec4\u7684\u957f\u5ea6\n    for(i=1;i<=n;++i)\n    {\n        in(s);add(S,i,s);sum+=s;//\u7edf\u8ba1\u4e00\u4e0b\u725b\u7684\u603b\u6570\u4e5f\u5c31\u662f\u603b\u6d41\u91cf\n        in(s);add(i+n,T,s);\n    }\n    for(i=1;i<=n;++i){add(i,i+n,mem[(i<<2)-2])};//mem\u4e4b\u524d\u5b58\u4e0b\u4e86\u5bf9\u5e94\u70b9\u7684\u725b\u6570\n    for(i=1;i<=n;++i)\n        for(j=1;j<i;++j)\n            g[i][j]=INF;\n    while(m--)\n    {\n        in(u);in(v);if(u<v){t=u;u=v;v=t;}\n        in(s);min2(g[u][v],s);\n    }\n    for(k=1;k<=n;++k)\n        for(i=1;i<=n;++i)\n        {\n            if(k==i)continue;\n            s=k>i?g[k][i]:g[i][k];\n            if(t==INF)continue;\n            for(j=1;j<(min(k,i));++j)\n                min2(g[i][j],s+g[k][j]);\n            for(j=k+1;j<=i;++j)\n                min2(g[i][j],s+g[j][k]);\n        }//\u4ee5\u4e0a\u662fFloyd\uff0c\u53ea\u7528\u4e86\u534a\u4e2a\u77e9\u9635\uff0c\u53ef\u80fd\u8dd1\u7684\u5feb\u70b9\u5427\n    for(i=1;i<=n;++i)\n        for(j=1;j<i;++j)\n            if(g[i][j]!=INF)\n                e[h++]=(EDGE){i,j,g[i][j]};//\u52a0\u8fdb\u53bb\u51c6\u5907\u6392\u5e8f\n    sort(e,e+h,cmp);\n    s=0;\n    for(i=0;i<h;++i)\n    {\n        if(s<e[i].l)//\u79bb\u6563\u5316\uff0cs\u653e\u7684\u662f\u4e0a\u4e00\u5757\u7684\u53d6\u503c\n        {            //\u503c\u589e\u52a0\u4e86\uff0c\u5904\u7406\u4e0a\u4e00\u5757\n            grp[t]=p+1;//grp\u8bb0\u4e0b\u53d6\u503c\u5728\u8fb9\u96c6\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\n            val[t++]=s;//val\u8bb0\u4e0b\u4e0a\u4e00\u5757\u7684\u503c\n            s=e[i].l;//\u66f4\u65b0s\n        }\n        add(e[i].a,e[i].b+n,mem[(e[i].a<<2)-2]);\n        add(e[i].b,e[i].a+n,mem[(e[i].b<<2)-2]);\n    }\n    grp[t]=p+1;val[t++]=s;\n    grp[t]=p+3;val[t]=-1;//\u6536\u4e0b\u5c3e\n    h=1;\n    while(h!=t)//\u4e8c\u5206\u5f00\u59cb\n    {\n        LIM=grp[m=(h+t)>>1];//\u786e\u5b9a\u9650\u5236\uff0cdinic\u65f6\u5ffd\u7565\u7f16\u53f7\u8d85\u8fc7\u6b64\u9650\u5236\u7684\u8fb9\n        memcpy(f,mem,(p+1)<<3);//\u6bcf\u6b21\u628a\u8bb0\u597d\u7684\u8fb9\u6d41\u91cfcopy\u4e00\u4e0b\u518d\u8dd1\n        res=0;\n        while(bfs())\n        {\n            memcpy(cur,he,SZ);//\u52a0\u5f53\u524d\u5f27\u4f18\u5316\n            while((s=dfs(S,INF)))\n                res+=s;\n        }\n        sum==res?t=m:h=m+1;\n    }\n    printf(\"%lld\",val[h]);\n    return 0;\n}\n```",
        "postTime": 1515658434,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2402 \u3010\u5976\u725b\u9690\u85cf\u3011"
    },
    {
        "content": "\u3010\u55e8\u5440\u4e00\u8840\u597d\u5f00\u5fc3\u3011\n\n\u8fd9\u4e2a\u9898\u7b2c\u4e00\u773c\u4ee5\u4e3a\u662f\u53d6max\u7684\u8d39\u7528\u6d41...\u8fd8\u662f\u592a\u5e74\u8f7b\n\n\u4e0d\u8fc7\u8f6c\u5ff5\u4e00\u60f3\uff1a\u54ce\u5440\u6700\u5927\u6700\u5c0f\u4e0d\u662f\u4e8c\u5206\u5417\uff1f\n\n\u7136\u540e\u5c31\u641e\u4e86\u4e2a\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u7f51\u7edc\u6d41\u5224\u5b9a\u5c31\u597d\u4e86\n\n\u5176\u5b9e\u67e5\u4e00\u4e0b\u8bb0\u5f55\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u4e00\u591a\u534a\u662f\u6211\u4ea4\u7684\uff08......\uff09\uff0c\u88ab\u5361\u4e00\u7ec4\u8981\u6b7b\u8981\u6d3b\u7684\uff0c\u611f\u89c9\u548c\u67d0\u624b\u6e38\u7684\u56de\u5934\u6c9f\u4e00\u6837\u8bf1\u4eba\u5fc3\u9189....\n\n\u6240\u4ee5\u8fd9\u91cc\u63d0\u793a\u4e00\u4e0b\u5751\u70b9\uff1a\u7b54\u6848\u4e0d\u4fdd\u8bc1\u5728inf\u8303\u56f4\u5185....\n\n\uff08\u4f46\u662f\u4e5f\u6ca1\u679a\u4e3e\u592a\u592a\u592a\u592a\u592a\u5927\uff0c\u4f1aT\u6389....\uff09\n\n\u561b\uff0c\u5efa\u56fe\u7684\u8bdd\u8fd8\u662f\u6bd4\u8f83\u4e2d\u89c4\u4e2d\u77e9\u7684\n\n\u5f17\u6d1b\u4f0a\u5fb7\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u6700\u77ed\u8def\n\n\u628a\u6bcf\u4e2a\u683c\u5b50\u62c6\u5f00\uff0c\u725b\u4e3ax\u90e8\uff0c\u68da\u5b50\u4e3ay\u90e8\uff0cxi--->yj \u8fde\u8fb9\uff0ccost\u4e3a\u6700\u77ed\u8def\uff0c\u5bb9\u91cf\u4e3ainf\n\n\u7136\u540e\u65b0\u5efas\u4e0et\uff0cs\u4e0e\u6bcf\u4e2axi\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6709\u51e0\u5934\u725b\uff0c\u82b1\u8d390\n\nyi\u5411t\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u725b\u68da\u5927\u5c0f\uff0c\u82b1\u8d390\n\n\u7136\u540e\u5c31\u662f\u4ee3\u7801\n\n\uff08Dinic\uff09\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<cmath>\n#define inf 199000000010\n#define R register\n#define N 6000\n#define M 100000\n#define ll long long \nusing namespace std;\nll map[250][250],say;\nll cal[250],can[250],cat,cant;\nll n,m,s,t;\nll out(ll x)\n{\n    return x+n;\n}\nvoid fl()\n{\n    for(ll k=1;k<=n;++k)\n    {\n        for(ll i=1;i<=n;++i)\n        {\n            for(ll j=1;j<=n;++j)\n            {\n                map[i][j]=min(map[i][j],map[i][k]+map[k][j]);\n            }\n        }\n    }\n/*    for(ll i=1;i<=n;++i)\n    {\n        for(ll j=1;j<=n;++j)\n        {\n            cout<<map[i][j]<<\" \";\n        }\n        cout<<endl;\n    }*/\n}\nll tot=1,from[M],head[N],to[M],next[M],cup[M],len[M],cpp[M];\nll mflow,mcost;\nvoid buid(ll u,ll v,ll c,ll l)\n{\n    next[++tot]=head[u];\n    head[u]=tot;\n    to[tot]=v,from[tot]=u;\n    cup[tot]=c,len[tot]=l;\n    cpp[tot]=c;\n}\nvoid buidall()\n{\n    for(ll i=1;i<=n;++i)\n    {\n        for(ll j=1;j<=n;++j)\n        {\n            buid(i,out(j),inf,map[i][j]);\n            buid(out(j),i,0,-map[i][j]);\n        }\n    }\n}\nll use[N],itc[N],vis[N];\nqueue<ll> q;\nbool bfs(ll ans)\n{\n    memset(itc,0,sizeof(itc));\n    memset(vis,0,sizeof(vis));\n    vis[s]=1,itc[s]=1,q.push(s);\n    while(!q.empty())\n    {\n        ll now=q.front();q.pop();\n        for(ll i=head[now];i;i=next[i])\n        {\n            ll j=to[i];\n            if(cup[i]&&abs(len[i])<=ans&&!vis[j])\n            {\n                vis[j]=1;\n                itc[j]=itc[now]+1;\n                q.push(j);\n            }\n        }\n    }\n    return vis[t];\n}\nll didit(ll now,ll want,ll ans)\n{\n    if(now==t||want==0) return want;\n    ll f,iget=0;\n    for(ll i=use[now];i;i=next[i])\n    {\n        ll j=to[i];\n        if(itc[j]==itc[now]+1&&len[i]<=ans)\n        {\n            f=didit(j,min(want,cup[i]),ans);\n            if(f==0)\n            {\n                use[now]=i;\n                continue;\n            }\n            want-=f;\n            iget+=f;\n            cup[i]-=f;\n            cup[i^1]+=f;\n            use[now]=i;\n            if(want==0) break;\n        }\n    }\n    return iget;\n}\nvoid max_flow(ll ans)\n{\n    mflow=0;\n    while(bfs(ans))\n    {\n        for(ll i=1;i<=N;++i) use[i]=head[i];\n        mflow+=didit(s,inf,ans);\n    }\n}\nint main()\n{\n    memset(map,20,sizeof(map));\n    s=N-1,t=N-2;\n    scanf(\"%lld%lld\",&n,&m);\n    for(ll i=1;i<=n;++i) scanf(\"%lld%lld\",&cal[i],&can[i]),cat+=cal[i],cant+=can[i],map[i][i]=0;\n    for(ll i=1;i<=m;++i)\n    {\n        R ll aa,bb,cc;\n        scanf(\"%lld%lld%lld\",&aa,&bb,&cc);\n        map[aa][bb]=min(map[aa][bb],cc);\n        map[bb][aa]=min(map[bb][aa],cc);\n    }\n    fl();\n    buidall();\n    for(ll i=1;i<=n;++i)\n    {\n        buid(s,i,cal[i],0);\n        buid(i,s,0,0);\n        buid(out(i),t,can[i],0);\n        buid(t,out(i),0,0);\n    }\n    ll l=1,r=inf,ans;\n    while(l<=r)\n    {\n        ans=(l+r)>>1;\n        for(ll i=2;i<=tot;++i) cup[i]=cpp[i];\n        max_flow(ans);\n        if(mflow==cat) r=ans-1;\n        else l=ans+1;\n    }\n    if(l>=inf) {printf(\"-1\\n\");return 0;}\n    printf(\"%lld\",l);\n    return 0;\n}\n//ps.\u522b\u95ee\u6211inf\u662f\u600e\u4e48\u6765\u7684\uff0c\u8fd9\u4e0d\u82b1\u4e86\u4e00\u4e0b\u5348\u8bd5\u51fa\u6765\u4e86\u561b\u3010\u6342\u8138\u3011\n```",
        "postTime": 1499856391,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2402 \u3010\u5976\u725b\u9690\u85cf\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u56ed\u67e5\u770b](https://www.cnblogs.com/AIskeleton/p/16318988.html)\n\n> [P2402 \u5976\u725b\u9690\u85cf](https://www.luogu.com.cn/problem/P2402)\n\n> \u6709 $n$ \u4e2a\u70b9\u548c $m$ \u6761\u6709\u8fb9\u6743\u65e0\u5411\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6709\u725b\u7684\u6570\u91cf $s_i$ \u548c\u725b\u68da\u5bb9\u91cf $p_i$\u3002\n\n> \u6c42\u95ee\u6240\u6709\u725b\u5168\u90e8\u8fdb\u5165\u725b\u68da\u6240\u9700\u7684\u6700\u5c0f\u65f6\u95f4\uff0c\u65e0\u89e3\u8f93\u51fa -1\u3002\n> $1\\le n\\le 200,1\\le m\\le 1500,1\\le w\\le 10^{15},1\\le s_i,p_i\\le 10^{16}$\u3002\n\n\u770b\u5230 $n\\le 200$\uff0c\u53ef\u4ee5\u60f3\u5230\u7528 Floyd \u8dd1\u4e00\u904d\u5168\u6e90\u6700\u77ed\u8def\u3002\n\n```cpp\nint edge[N][N];\nfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\t\tedge[i][j]=(i==j?0:INF);\nfor(int i=1,u,v,w;i<=m;i++){\n\tu=rd(),v=rd(),w=rd();\n\tedge[u][v]=min(edge[u][v],w);\n\tedge[v][u]=min(edge[v][u],w);\n}for(int k=1;k<=n;k++)\n  for(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\t  edge[i][j]=min(edge[i][j],edge[i][k]+edge[k][j]);\n```\n\n\u770b\u5230\u6c42**\u6700\u5c11\u65f6\u95f4**\uff0c\u8003\u8651**\u4e8c\u5206\u7b54\u6848**\u3002\n\n```cpp\nwhile(l<=r){\n\tmid=(l+r)>>1;\n\tif(check(mid))r=mid-1,ans=mid;\n\telse l=mid+1;\n}wr(ans?ans:-1);\n```\n\n\u770b\u5230**\u201c\u725b\u8fdb\u5165\u725b\u68da\u201d**\u8fd9\u6837\u7684\u63cf\u8ff0\uff0c\u5f88\u5bb9\u6613\u60f3\u5230**\u4e8c\u5206\u56fe\u5339\u914d**\u3002\n\n\u7f51\u7edc\u6d41\u7684\u5efa\u8fb9\u65b9\u6cd5\uff1a\n\n- \u9996\u5148\u5c06\u6bcf\u4e2a\u70b9\u5206\u6210\u725b\u548c\u725b\u68da\u4e24\u4e2a\u70b9\u3002\n- \u4ece\u6e90\u70b9\u5411\u6bcf\u4e2a\u8868\u793a\u725b\u7684\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u76ee\u6807\u70b9\u7684\u725b\u7684\u6570\u91cf\u7684\u8fb9\u3002\n- \u4ece\u6bcf\u4e2a\u8868\u793a\u725b\u68da\u7684\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u5f53\u524d\u70b9\u725b\u68da\u5bb9\u91cf\u7684\u8fb9\u3002\n- \u5982\u679c\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u7684\u65f6\u95f4\uff0c\u5c31\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u4e24\u70b9\u4e2d\u8868\u793a\u725b\u7684\u70b9\u7684\u725b\u7684\u6570\u91cf\u7684\u8fb9\u3002\n\n```cpp\nfor(int i=1;i<=n;i++)\tI(st,i,s[i]);\nfor(int i=1;i<=n;i++)\tI(i+n,ed,p[i]);\nfor(int i=1;i<=n;i++)\n  for(int j=1;j<=n;j++)\n\tif(edge[i][j]<=lim)\n\t  I(i,j+n,s[i]);\n```\n\u5176\u5b9e\u5efa\u8fb9\u7684\u65b9\u6cd5\u5c31\u662f**\u4e8c\u5206\u56fe\u591a\u91cd\u6700\u5927\u6743\u5339\u914d**\u7684\u677f\u5b50\u3002\n\n\u5efa\u8fb9\u540e\u76f4\u63a5\u8dd1\u7f51\u7edc\u6d41\u677f\u5b50\u5373\u53ef\u3002\n\n\u51e0\u4e2a\u7ec6\u8282\u70b9\uff1a\n1. \u4e8c\u5206\u7b54\u6848\u7684\u53f3\u8fb9\u754c\u8d4b\u503c\u4e00\u5b9a\u8981\u5c0f\u4e8e floyd \u7684\u8fb9\u6743\u521d\u59cb\u6781\u503c\u3002\n1. \u56e0\u4e3a\u6709\u62c6\u70b9\uff0c\u6240\u4ee5\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\u7a7a\u95f4\u3002\n1. \u6ce8\u610f\u9898\u76ee\u4e2d\u7684\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u3002\n1. \u5b58\u5728\u91cd\u8fb9\uff0c\u90bb\u63a5\u77e9\u9635\u53d6\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u6700\u5c0f\u503c\u3002\n1. \u4e0d\u5f00 long long \u89c1\u7956\u5b97\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=600,M=2e5,INF=3e18;\nint rd(){\n\tint w=0,v=1;char c=getchar();while(c<'0'||c>'9'){if(c=='-')v=-1;c=getchar();}\n\twhile(c>='0'&&c<='9')w=(w<<1)+(w<<3)+(c&15),c=getchar();return w*v;\n}void wr(int x){if(x<0)putchar('-'),x=-x;if(x>9)wr(x/10);putchar(x%10+'0');}\n\nint fir[N],cnt=1;\nstruct E{int v,w,nt;}e[M];\nvoid I(int u,int v,int w){\n\te[++cnt]=(E){v,w,fir[u]};fir[u]=cnt;\n\te[++cnt]=(E){u,0,fir[v]};fir[v]=cnt;\n}void cl(){memset(e,0,sizeof(e));memset(fir,0,sizeof(fir));cnt=1;}\n\nint cur[N],d[N],st,ed;\nqueue <int>q;\nbool bfs(){\n\tmemset(d,0,sizeof(d));\n\tfor(int i=0;i<=ed;i++)\tcur[i]=fir[i];\n\tq.push(st);d[st]=1;\n\twhile(q.size()){\n\t\tint u=q.front(),V;q.pop();\n\t\tfor(int i=fir[u];i;i=e[i].nt)\n\t\t\tif(e[i].w&&!d[V=e[i].v])\n\t\t\t\tq.push(V),d[V]=d[u]+1;\n\t}return d[ed];\n}int dfs(int u,int fl){\n\tif(u==ed)return fl;int f,V,s=0;\n\tfor(int i=cur[u];i;i=e[i].nt){\n\t\tcur[u]=i;\n\t\tif(e[i].w&&d[V=e[i].v]==d[u]+1){\n\t\t\tf=dfs(V,min(fl,e[i].w));\n\t\t\te[i].w-=f;e[i^1].w+=f;\n\t\t\ts+=f;fl-=f;if(!fl)break;\n\t\t}\n\t}if(!s)d[u]=0;return s;\n}int dinic(){int ans=0;while(bfs())ans+=dfs(st,INF);return ans;}\n\nint n,m,ans,s[N],p[N];\nint s1,s2;\nint l=1,r=INF-1,mid;\n\nint edge[N][N];\nvoid floyd(){\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tedge[i][j]=min(edge[i][j],edge[i][k]+edge[k][j]);\n}\n\nbool check(int lim){\n\tcl();\n\tfor(int i=1;i<=n;i++)\tI(st,i,s[i]);\n\tfor(int i=1;i<=n;i++)\tI(i+n,ed,p[i]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(edge[i][j]<=lim)\n\t\t\t\tI(i,j+n,s[i]);\n\treturn (dinic()==s1)?1:0;\n}\n\nsigned main(){\n\tn=rd(),m=rd();st=0,ed=n*2+1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tedge[i][j]=(i==j?0:INF);\n\tfor(int i=1;i<=n;i++){\n\t\ts[i]=rd(),p[i]=rd();\n\t\ts1+=s[i];s2+=p[i];\n\t}for(int i=1,u,v,w;i<=m;i++){\n\t\tu=rd(),v=rd(),w=rd();\n\t\tedge[u][v]=min(edge[u][v],w);\n\t\tedge[v][u]=min(edge[v][u],w);\n\t}floyd();\n\tif(s1>s2){wr(-1);return 0;}\n\twhile(l<=r){\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid))r=mid-1,ans=mid;\n\t\telse l=mid+1;\n\t}wr(ans?ans:-1);\n}\n```",
        "postTime": 1653653003,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "P2402"
    },
    {
        "content": "### \u89e3\u9898\u4e4b\u524d\n\u7b2c\u4e00\u6b21\u770b\u5230\u8fd9\u9053\u9898\u5df2\u7ecf\u662f\u4e00\u4e2a\u6708\u524d\u4e86\uff0c\u90a3\u4e2a\u65f6\u5019\u521a\u5b66\u4f1a\u7f51\u7edc\u6d41\u6a21\u677f\uff0c\u4e0d\u600e\u4e48\u4f1a\u5efa\u6a21\uff0c\u6240\u4ee5\u770b\u5230\u8fd9\u9053\u9898\u6beb\u65e0\u5934\u7eea\uff0c\u4e0d\u7ba1\u600e\u4e48\u5efa\u6a21\u90fd\u65e0\u6cd5\u89e3\u51b3\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u5f00\u59cb\u627e\u4e00\u4e9b\u5f88\u63a5\u8fd1\u4e8e\u6a21\u677f\u7684\u6c34\u9898\u6c34\u4e86\u3002\n### \u9898\u76ee\u5206\u6790\n\u6839\u636e\u9898\u76ee\u63cf\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u9898\u76ee\u7ed9\u4f60\u4e00\u4e2a$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u5976\u725b\u548c\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u5976\u725b\u7684\u725b\u68da\uff0c\u6c42\u8ba9\u6bcf\u4e2a\u5976\u725b\u90fd\u5230\u8fbe\u725b\u68da\u7684\u6700\u5c11\u65f6\u95f4\uff0c\u5176\u4e2d\u4e00\u5934\u5976\u725b\u8d70\u4e00\u4e2a\u5355\u4f4d\u7684\u8ddd\u79bb\u9700\u8981\u82b1\u8d39\u4e00\u4e2a\u5355\u4f4d\u7684\u65f6\u95f4\uff0c\u5e76\u4e14\u6240\u6709\u5976\u725b\u540c\u65f6\u5f00\u59cb\u884c\u52a8\uff08\u6df7\u4e71\u7684\u5976\u725b\u4eec\u554a\uff09\u3002\n\n\u9996\u5148\uff0c\u8003\u8651\u76f4\u63a5\u5efa\u6a21\u3002\u90a3\u4e48\u5148\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u7684\u9650\u5236\u3002$First, \\ $\u6bcf\u4e2a\u725b\u68da\u90fd\u53ea\u80fd\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5976\u725b\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u9650\u5236. $Second, \\ $\u6bcf\u4e2a\u8282\u70b9\u4e2d\u53ea\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u5976\u725b\uff0c\u8fd9\u663e\u7136\u4e5f\u662f\u4e00\u4e2a\u9650\u5236. $Third, \\ $\uff1f\uff1f\u4f3c\u4e4e\u627e\u4e0d\u5230\u5176\u4ed6\u7684\u6761\u4ef6\u4e86\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u9650\u5236\uff0c\u6211\u4eec\u8003\u8651\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u7ea7\u6e90$S$\u548c\u4e00\u4e2a\u8d85\u7ea7\u6c47$T$\uff0c\u7136\u540e\u5efa\u4e24\u5c42\u70b9\uff0c\u7b2c\u4e00\u5c42\u8868\u793a\u5976\u725b\uff0c\u7b2c\u4e8c\u5c42\u8868\u793a\u725b\u68da\uff0c\u518d\u4ece$S$\u5411\u7b2c\u4e00\u5c42\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u8282\u70b9\u7684\u5976\u725b\u6570\u91cf\uff0c\u4ece\u7b2c\u4e8c\u5c42\u70b9\u5411$T$\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u8282\u70b9\u7684\u725b\u68da\u80fd\u5bb9\u7eb3\u5976\u725b\u7684\u6570\u91cf\u3002\u90a3\u4e48\uff0c\u7b2c\u4e00\u5c42\u70b9\u548c\u7b2c\u4e8c\u5c42\u70b9\u4e4b\u95f4\u5462\uff1f\u5728\u8fd9\u4e2a\u6b8b\u7834\u4e0d\u582a\u7684\u534a\u6210\u54c1\u7f51\u7edc\u56fe\u4e2d\u8dd1\u4ec0\u4e48\u7f51\u7edc\u6d41\u80fd\u5f97\u5230\u7b54\u6848\u5462\uff1f\n\n\u8fd9\u79cd\u601d\u8def\u8c8c\u4f3c\u884c\u4e0d\u901a\u3002\n\n\u4e8e\u662f\uff0c\u91cd\u65b0\u5ba1\u9898\u3002\u5176\u5b9e\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5f00\u59cb\u5efa\u6a21\uff0c\u90a3\u4e00\u5b9a\u662f\u7f51\u7edc\u6d41\u6a21\u677f\u505a\u5f97\u592a\u591a\u4e86\uff0c\u800c\u4e14\u6211\u4eec\u8fd8\u5ffd\u89c6\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6761\u4ef6\u3002\u6211\u4eec\u8981\u6c42\u7684\u662f\u4ec0\u4e48\uff1f\n>\t\u6240\u6709\u5976\u725b\u5168\u90fd\u8eb2\u8fdb\u725b\u68da\u6240\u7528\u7684\u6700\u5c11\u65f6\u95f4\n\n\u800c\u4e14\u9898\u76ee\u8fd8\u597d\u5fc3\u5730\u8865\u5145\u4e86\u4e00\u53e5\n>\t\u5373\u6700\u540e\u4e00\u5934\u5976\u725b\u6700\u5c11\u8981\u82b1\u591a\u4e45\u624d\u80fd\u8eb2\u8fdb\u725b\u68da\n\n\u8fd9\u4e0d\u662f\u76f8\u5f53\u4e8e\u8ba9\u6700\u5927\u503c\u6700\u5c0f\u5417\uff1f\n\n\u4e8c\u5206\u7b54\u6848\uff01\n\n\u90a3\u5982\u4f55\u5224\u5b9a\u5462\uff1f\u501f\u9274\u4e00\u4e0b\u4e4b\u524d\u6211\u4eec\u76f4\u63a5\u5efa\u6a21\u65f6\u7684\u601d\u8def\uff0c\u4ece$S$\u5411\u7b2c\u4e00\u5c42\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u8282\u70b9\u7684\u5976\u725b\u6570\u91cf\uff0c\u4ece\u7b2c\u4e8c\u5c42\u70b9\u5411$T$\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94\u8282\u70b9\u7684\u725b\u68da\u80fd\u5bb9\u7eb3\u7684\u5976\u725b\u6570\u91cf\u3002\u5bf9\u4e8e\u7b2c\u4e00\u5c42\u70b9\u548c\u7b2c\u4e8c\u5c42\u70b9\u95f4\u7684\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u5bf9\u70b9{ $a,b$ }\uff0c\u5982\u679c\u4ed6\u4eec\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684$mid$\u503c\uff0c\u5219\u8bf4\u660e\u5728$a$\uff08\u6216\u662f$b$\uff09\u70b9\u7684\u5976\u725b\u53ef\u4ee5\u5728\u9650\u5b9a\u65f6\u95f4\u5185\u8d70\u5230b\uff08\u6216\u662fa\uff09\u70b9\u7684\u725b\u68da\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u4ece\u7b2c\u4e00\u5c42\u4e2d\u7684a\uff08\u6216\u662fb\uff09\u70b9\u5411\u7b2c\u4e8c\u5c42\u4e2d\u7684a\uff08\u6216\u662fb\uff09\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$\\infty$\u3002\u81f3\u4e8e\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u8dd1$Floyd$\u9884\u5904\u7406\u51fa\u6765\u5c31\u884c\u4e86\u3002\n\n\u57fa\u4e8e\u8fd9\u4e2a\u7f51\u7edc\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece$S$\u5230$T$\u7684\u6700\u5927\u6d41\u5c31\u662f\u80fd\u5728\u5f53\u524d$mid$\u7684\u65f6\u95f4\u5185\u6210\u529f\u8eb2\u96e8\u7684\u6700\u5927\u5976\u725b\u6570\u91cf\u3002\u6240\u4ee5\uff0c\u5982\u679c$S$\u5230$T$\u7684\u6700\u5927\u6d41\u7b49\u4e8e\u5976\u725b\u603b\u6570\uff0c\u90a3\u4e48\u5f53\u524d\u7684$mid$\u5c31\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u3002\u7531\u6b64\u5373\u53ef\u5224\u5b9a\u3002\n\n\u6700\u540e\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff1a\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e3b\u8981\u7684\u7a7a\u95f4\u7528\u4e8e\u5b58\u6211\u4eec\u5efa\u7684\u7f51\u7edc\u56fe\uff0c\u4ece$S$\u5411\u7b2c\u4e00\u5c42\u70b9\u8fde\u4e86$n$\u6761\u8fb9\uff0c\u4ece\u7b2c\u4e8c\u5c42\u70b9\u5411$T$\u8fde\u4e86$n$\u6761\u8fb9\uff0c\u7b2c\u4e00\u5c42\u70b9\u548c\u7b2c\u4e8c\u5c42\u70b9\u4e4b\u95f4\u6700\u591a\u4f1a\u8fde$n^2$\u6761\u8fb9\u3002\u4e00\u770b$n \\leq 200$\uff0c\u7a7a\u95f4\u663e\u7136\u4e0d\u6210\u95ee\u9898\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u9996\u5148\uff0c$Floyd$\u662f$\\Theta(n^3)$\u7684\u3002\u5176\u6b21\uff0c\u9898\u76ee\u6ca1\u6709\u7ed9\u8fb9\u6743\u7684\u8303\u56f4\uff0c\u6211\u4eec\u5927\u80c6\u731c\u6d4b\u6700\u957f\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7$int$\u7684\u8303\u56f4\n~~\uff08\u6bd5\u7adf\u6211\u7528\u6765\u5b58\u6700\u77ed\u8def\u957f\u5ea6\u7684$dis$\u6570\u7ec4\u662f$int$\u7c7b\u578b\u7684\u90fd\u80fd\u8fc7\uff09~~\u3002\u6240\u4ee5\u4e8c\u5206\u7b54\u6848\u7684$log$\u4e0d\u4f1a\u8d85\u8fc7$31$\u3002\u81f3\u4e8e\u7f51\u7edc\u6d41\uff0c\u8003\u8651\u5230\u7f51\u7edc\u56fe\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u800c\u4e14\u603b\u5171$2n+2$\u4e2a\u8282\u70b9\u3001\u6700\u591a$n^2+2n$\u6761\u8fb9\uff0c\u90a3\u4e48\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4e3a$\\Theta(n^3+\\log_2(2^{31})\\times n^{2.5})$\uff0c\u6beb\u65e0\u538b\u529b\u3002\n\n\u4ee5\u4e0b\u662f\u6211\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 210\n#define MAXM 1510\n#define MXN 410\n#define MXM 40410\n#define INF 2147473600\n#define Min(a,b) ((a)<(b)?(a):(b))\n#define int long long\nint N,M,sum,S,T;\nstruct Node\n{\n\tint num,val;\n}a[MAXN];\nint pre_hd[MAXN],pre_ed[MAXM<<1],pre_val[MAXN<<1],pre_nxt[MAXM<<1],pre_tot;\nint dis[MAXN][MAXN];\nint hd[MXN],ed[MXM<<1],val[MXM<<1],nxt[MXM<<1],tot;\nint curArc[MXN],dep[MXN]; bool inq[MXN]; queue <int> Q;\ninline int rd()\n{\n\tint ret=0,f_f=1; char c=getchar();\n\twhile(c<'0' || c>'9') {if(c=='-') f_f=-1; c=getchar();}\n\twhile(c>='0' && c<='9') ret=(ret<<1)+(ret<<3)+c-'0',c=getchar();\n\treturn ret*f_f;\n}\ninline void pre_AddEdge(int u,int v,int w) {pre_ed[++pre_tot]=v,pre_val[pre_tot]=w,pre_nxt[pre_tot]=pre_hd[u],pre_hd[u]=pre_tot;}\ninline void Floyd()\n{\n\tfor (int k=1;k<=N;k++)\n\t\tfor (int i=1;i<=N;i++)\n\t\t\tfor (int j=1;j<=N;j++)\n\t\t\t\tif (dis[i][k] != -1 && dis[k][j] != -1 && (dis[i][j] == -1 || dis[i][j] > dis[i][k] + dis[k][j]))\n\t\t\t\t\tdis[i][j]=dis[i][k]+dis[k][j];\n}\ninline void AddEdge(int u,int v,int w) {ed[++tot]=v,val[tot]=w,nxt[tot]=hd[u],hd[u]=tot;}\ninline void Build(int ky)\n{\n\tmemset(hd,-1,sizeof(hd)),tot=1;\n\tfor (register int i=1;i<=N;i++)\n\t\tfor (register int j=1;j<=N;j++)\n\t\t\tif (dis[i][j] != -1 && dis[i][j] <= ky)\n\t\t\t\tAddEdge(i,j+N,INF),AddEdge(j+N,i,0);\n\tS=0,T=N+N+1;\n\tfor (register int i=1;i<=N;i++)\n\t\tAddEdge(S,i,a[i].num),AddEdge(i,S,0),AddEdge(i+N,T,a[i].val),AddEdge(T,i+N,0);\n}\ninline bool Bfs()\n{\n\tfor (register int i=0;i<=N+N+1;i++)\n\t\tcurArc[i]=hd[i],dep[i]=INF,inq[i]=false;\n\tdep[S]=0,inq[S]=true;\n\twhile (!Q.empty()) Q.pop(); Q.push(S);\n\twhile (!Q.empty())\n\t{\n\t\tregister int u=Q.front(); Q.pop(),inq[u]=false;\n\t\tfor (register int p=hd[u];p!=-1;p=nxt[p])\n\t\t{\n\t\t\tregister int v=ed[p];\n\t\t\tif (val[p] > 0 && dep[v] > dep[u] + 1)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tif (!inq[v]) inq[v]=true,Q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T] != INF;\n}\ninline int Dfs(int u,int Flow)\n{\n\tif (u == T) return Flow;\n\tint curFlow,tot=0;\n\tfor (register int p=curArc[u];p!=-1;p=nxt[p])\n\t{\n\t\tcurArc[u]=p;\n\t\tregister int v=ed[p];\n\t\tif (val[p] > 0 && dep[v] == dep[u] + 1)\n\t\t{\n\t\t\tcurFlow=Dfs(v,min(Flow,val[p]));\n\t\t\tif (curFlow != 0)\n\t\t\t{\n\t\t\t\tval[p]-=curFlow;\n\t\t\t\tval[p^1]+=curFlow;\n\t\t\t\tFlow-=curFlow,tot+=curFlow;\n\t\t\t\tif (Flow <= 0) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn tot;\n}\ninline int Dinic()\n{\n\tregister int maxFlow=0;\n\twhile (Bfs())\n\t{\n\t\tregister int Flow=Dfs(S,INF);\n\t\twhile (Flow != 0)\n\t\t{\n\t\t\tmaxFlow+=Flow;\n\t\t\tFlow=Dfs(S,INF);\n\t\t}\n\t}\n\treturn maxFlow;\n}\ninline bool check(int ky)\n{\n\tBuild(ky);\n\treturn Dinic() == sum;\n}\nsigned main()\n{\n\tN=rd(),M=rd(),sum=0;\n\tfor (register int i=1;i<=N;i++)\n\t\ta[i].num=rd(),a[i].val=rd(),sum+=a[i].num;\n\tmemset(pre_hd,-1,sizeof(pre_hd)),pre_tot=0;\n\tmemset(dis,-1,sizeof(dis));\n\tfor (register int i=1;i<=N;i++) dis[i][i]=0;\n\tfor (register int i=1,u,v,w;i<=M;i++)\n\t{\n\t\tu=rd(),v=rd(),w=rd();\n\t\tif (dis[u][v] == -1 || dis[u][v] > w) dis[u][v]=dis[v][u]=w;\n\t\tpre_AddEdge(u,v,w),pre_AddEdge(v,u,w);\n\t}\n\tFloyd();\n\tregister int l=0,r=0,mid,ans=-1;\n\tfor (register int i=1;i<=N;i++)\n\t\tfor (register int j=1;j<=N;j++)\n\t\t\tr=max(r,dis[i][j]);\n\twhile (l <= r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif (check(mid))\n\t\t\tans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1569666354,
        "uid": 41450,
        "name": "KobeWu",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P2402 \u5976\u725b\u9690\u85cf"
    }
]