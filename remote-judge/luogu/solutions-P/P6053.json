[
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u5e38\u6570\u5927\u7684\u4e00\u4e2alog\u89e3\u6cd5\n\n\u51fa\u9898\u4eba\u628a\u8be2\u95ee\u5206\u4e3a\u4e86\u4e00\u767e\u4e07\u4e2a\u6362\u6839\u548c\u4e00\u767e\u4e07\u4e2a\u5176\u4f59\u64cd\u4f5c\uff0c\u5176\u4e2d\u524d\u8005\u8981\u6c42$O(1)$\n\n\u800c\u6211\u7684\u8fd9\u4e2a\u5168\u90fd\u662f\u4e00\u4e2alog\uff0c\u76f8\u5f53\u4e8e\u4e24\u767e\u4e07\u4e2a\u95ee\u7528log\u7684\u65b9\u6cd5\u89e3\u51b3\uff0c\u4e5f\u8bb8\u50cf\u6811\u72b6\u6570\u7ec4\u5e38\u6811\u5c0f\u7684\u80fd\u8fc7\uff0c\u4f46\u6211\u8fd9\u4e2alct\u5e38\u6570\u5b9e\u5728\u662f\u5927\u6211\u6700\u591a\u5c31\u5361\u523090\uff0c\u4f46\u8fd9\u4e0d\u662f\u95ee\u9898\uff0c\u4e3b\u8981\u662f\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\u3002~~\u542c\u8bf4\u6709\u4e24\u53ealog\u7684\u6811\u72b6\u6570\u7ec4\u5f00O2\u8279\u8fc7\u53bb\u4e86~~\n\n**\u7531\u4e8e\u6211\u4e0d\u559c\u6b22\u53eblct\uff0c\u53eb$S-T \\ Trees$**\n\n**\u865a\u5b50\u6811\u53eb$dashed$\uff0c\u5b9e\u94fe\u53eb$solid$**\n\n#### \u9996\u5148\u770b\u64cd\u4f5c4:\u8def\u5f84\u70b9\u6743$xorsum$\n\nS-T trees\u8bb0\u4e0b\u70b9\u6743\uff0c\u7ef4\u62a4\u5b9e\u94fe\u7684$xorsum$\uff0c$expose$\u63d0\u53d6\u8def\u5f84\u8fd4\u56de\u5373\u53ef\n\n\u7531\u4e8e\u662f\u6709\u6839\u6811\uff0c$expose$\u9700\u8981$evert$\u6362\u6839\uff0c\u8bb0\u4e0b\u539f\u672c\u7684$root$\uff0c$expose$\u4e4b\u540e\u628a\u7b54\u6848\u5b58\u4e0b\u6765\uff0c\u7136\u540e$evert(root)$\u628a\u6839\u6362\u56de\u53bb\u518d\u8fd4\u56de\u7b54\u6848\n\n#### \u63a5\u7740\u770b\u64cd\u4f5c3:$lca$\n\ns-t trees\u4e0a\u627elca\u6709\u4e00\u79cd\u505a\u6cd5\u662f\u5148$access(x)$\uff0c\u7136\u540e\u6267\u884c$access(y)$\uff0c\u770b\u6700\u540e\u5207\u6362\u865a\u5b9e\u7684\u70b9\u5373$lca$\n\n\u8fd9\u79cd\u505a\u6cd5\u662f\u6ca1\u4ec0\u4e48\u95ee\u9898\u7684\uff0c\u6211\u8fd9\u91cc\u7528\u7684\u662f\u53e6\u4e00\u79cd\u505a\u6cd5\n\n\u5728$root \\ path$\u4e0a\u7684$non-local \\ searching for \\ LCA$\n\n\u4e00\u822c\u7684\u6811\u4e0a\u8ddd\u79bb\u516c\u5f0f:$dis(x,y)=dep_x+dep_y-2dep_{lca}+1$\n\n\u79fb\u9879\u4e00\u4e0b:$2dep_{lca}=dep_x+dep_y-dis(x,y)+1$\n\n\u7cfb\u6570\u5316\u4e3a1:$dep_{lca}=\\frac {dep_x+dep_y-dis(x,y)+1}{2}$\n\n\u7136\u540e\u6211\u4eec$access(x)$\u628ax\u5230\u6839\u7684\u8def\u5f84\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5728\u4e0a\u9762\u627e\u7b2c$dep_{lca}$\u4e2a\u70b9\uff0c\u5373\u5728$root \\ path$\u627e\u6392\u540d\u4e3a$dep_{lca}$\u7684\u70b9\uff0c\u7c7b\u4f3c\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\n\n#### \u64cd\u4f5c5:\u5b50\u6811$xorsum$\n\n\u7531\u4e8e$xorsum$\u662f\u53ef\u5dee\u5206\u7684\uff0c\u5207\u6362\u865a\u5b9e\u94fe\u662f\u53ef\u4ee5\u901a\u8fc7$xor$\u6389\u539f\u5b9e\u513f\u5b50\u540e$xor$\u65b0\u5b9e\u513f\u5b50\u7684\uff0c~~\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u53bb\u5199\u4e2atoptree~~\uff0c\u76f4\u63a5s-t trees\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u5373\u53ef\n\n\u8003\u8651\u7ef4\u62a4\u865a\u5b50\u6811$xorsum$:   $dashed\\_sum$\n\ns-t tree\u4e0a\u7684\u5b50\u6811$xorsum$(\u6811\u7c07\u5f02\u6216\u548c)\u8868\u793a\u4e3a$sum$\n\n\u53ef\u4ee5\u8fd9\u4e48\u7ef4\u62a4:$sum=son[0]\\rightarrow sum \\bigoplus  val \\bigoplus son[1]\\rightarrow sum \\bigoplus dashed\\_sum$\n\n\u8003\u8651\u5728$access$\u7684\u65f6\u5019\u628a\u4e00\u4e2a\u70b9$q$\u7684\u53f3\u513f\u5b50$q\\rightarrow son[1]$\u5207\u6362\u4e3a$p$\n\n$q\\rightarrow dashed\\_sum \\bigoplus =q\\rightarrow son[1]\\rightarrow sum\\bigoplus p\\rightarrow sum$\n\n\u5f02\u6216\u539f\u53f3\u513f\u5b50\u8868\u793a\u628a\u539f\u672c\u7684\u6d88\u9664\uff0c\u540e\u5f02\u6216p\u8868\u793a\u52a0\u5165p\n\n\u7136\u540e\u8981\u67e5\u8be2\u7684\u70b9$p$\u7684\u5b50\u6811\u5f02\u6216\u548c$subtree\\_sum$\u5c31\u662f\u5148$access(p)$\uff0c\u7136\u540e\u8f93\u51fa$p \\rightarrow dashed\\_sum \\bigoplus p \\rightarrow val$\n\n#### \u64cd\u4f5c1:\u6362\u6839+\u8be2\u95ee\u6240\u6709\u5b50\u6811\u5f02\u6216\u548c\u7684\u5f02\u6216\u548c\n\n\u4e0d\u59a8\u5148\u7b97\u51fa\u539f\u672c\u7684\u6240\u6709\u5b50\u6811\u7684\u5f02\u6216\u548c\u7684\u5f02\u6216\u548c\uff0c\u7136\u540e\u518d\u8003\u8651\u6bcf\u4e2a\u64cd\u4f5c\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\n\n3,4,5\u64cd\u4f5c\u90fd\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u73b0\u5728\u8003\u8651\u6362\u6839\u5e26\u6765\u7684\u5f71\u54cd\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xz78m7ca.png)\n\n\u8003\u8651\u539f\u6839\u4e3a$v$\uff0c\u628a\u6839\u6362\u6210$u$\u7684\u5f71\u54cd\uff0c\u628a$v$\u9664\u5230u\u8def\u5f84\u7684\u5b50\u6811\u8bb0\u4f5c$B$\uff0c$u$\u7684\u5b50\u6811\u8bb0\u4f5c$A$\uff0c$u,v$\u7684\u8def\u5f84\u8bb0\u4f5c$[u,v]$\uff0c\u6392\u9664\u7aef\u70b9u,v\u7684\u8bb0\u4f5c$(u,v)$\uff0c\u5176\u4e2d$w$\u4e3a\u6700\u4e0a\u9762\u7684\u90a3\u4e2a\u70b9,$sum_x$\u8868\u793ax\u7684\u5b50\u6811\u5f02\u6216\u548c\n\n\u539f\u672c\u7684\u7b54\u6848\u8bb0\u4e3a$sum_u \\bigoplus ans(u,v) \\bigoplus ans_C \\bigoplus sum_v \\bigoplus ans_B \\bigoplus ans_A$\n\n\u65b0\u7b54\u6848:$sum_u' \\bigoplus ans(u,v)' \\bigoplus ans_C \\bigoplus sum_v' \\bigoplus ans_A \\bigoplus ans_B$\n\n$sum_u'=sum_v$(\u5c31\u662f\u6574\u68f5\u6811\u7684\u5f02\u6216\u548c)\n\n$sum_v'=sum_v \\bigoplus sum_w$ (\u5c11\u4e86\u5230u\u8def\u5f84\u7684\u90e8\u5206)\n\n\u8003\u8651$ans(u,v)'$\u6709\u4ec0\u4e48\u53d8\u5316\n\n\u5c06(u,v)\u4e0a\u7684\u6240\u6709\u70b9\u6309\u5de6\u56fe\u7531\u4e0b\u5f80\u4e0a\u7f16\u53f7$1,2,3,\\cdots,|(u,v)|$\n\n\u7279\u522b\u5730,$0=u,|(u,v)|+1=v,|(u,v)|=w$\n\n\u8003\u8651\u4e00\u4e2a\u70b9$k$\u7684\u5b50\u6811\u5f02\u6216\u548c\u548b\u53d8\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rqyso3ui.png)\n\n\u9996\u5148$k-1$\u4ee5\u4e0b\u7684\u90e8\u5206\u5012\u8fc7\u6765\u53d8\u6210$k$\u7684\u7956\u5148\uff0c\u6240\u4ee5$sum_k\\bigoplus=sum_{k-1}$\n\n\u5176\u6b21\u5728$k$\u4e0a\u65b9\u7684\u6240\u6709\u70b9\u5012\u8fc7\u6765\u5728$k$\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u4ee5$sum_k\\bigoplus=sum_v \\bigoplus sum_k$\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u7684$k$\u4e32\u5728\u4e00\u8d77\uff0c\u53d1\u751f\u7684\u53d8\u5316\u4e3a:\n\n$(sum_0\\bigoplus sum_v \\bigoplus sum_1) \\bigoplus(sum_1 \\bigoplus sum_v \\bigoplus sum_2)\\bigoplus \\cdots \\bigoplus (sum_{|(u,v)|-1}\\bigoplus sum_v \\bigoplus sum_{|(u,v)|})$\n\n\u7531\u4e8e\u5f02\u6216\u6709\u7ed3\u5408\u5f8b\u5408\u4ea4\u6362\u5f8b\uff0c\u6240\u4ee5\u53d1\u73b0\u80fd\u5220\u53bb\u4e00\u5806\u4e1c\u897f\n\n$=sum_0 \\bigoplus sum_1 \\bigoplus sum_1 \\bigoplus sum_2 \\bigoplus sum_2 \\bigoplus \\cdots \\bigoplus sum_{|(u,v)|}(\\bigoplus sum_v \\bigoplus sum_v \\bigoplus \\cdots \\bigoplus sum_v)(|(u,v)| \\text {\u6b21})$\n\n\u4e2d\u95f4\u7684\u90fd\u53ef\u4ee5\u6d88\u6389,\u6700\u540e\u7531\u4e8e\u5f02\u6216\u5076\u6570\u4e2a\u76f8\u540c\u7684\u53ef\u4ee5\u6d88\u9664\uff0c\u6240\u4ee5\u5316\u4e3a\n\n$sum_u \\bigoplus sum_w (\\bigoplus sum_v(|(u,v)|\\text{\u4e3a\u5947\u6570}))$\n\n\u7136\u540e\u8003\u8651\u6700\u7ec8\u7b54\u6848\u53d8\u4e86\u4ec0\u4e48\n\n$ans=sum_u \\bigoplus ans(u,v) \\bigoplus ans_C \\bigoplus sum_v \\bigoplus ans_B \\bigoplus ans_A$\n\n$ans'=sum_u' \\bigoplus ans(u,v)' \\bigoplus ans_C \\bigoplus sum_v' \\bigoplus ans_A \\bigoplus ans_B$\n$ans'=sum_v \\bigoplus ans(u,v) \\bigoplus sum_u \\bigoplus sum_w (\\bigoplus sum_v(|(u,v)|\\text{\u4e3a\u5947\u6570}))\\bigoplus ans_C \\bigoplus sum_v \\bigoplus sum_w \\bigoplus ans_A \\bigoplus ans_B$\n$ans'=sum_u\\bigoplus ans(u,v)(\\bigoplus sum_v(|(u,v)|\\text{\u4e3a\u5947\u6570}))\\bigoplus ans_A \\bigoplus ans_B \\bigoplus ans_C$\n\n$ans'\\bigoplus ans=sum_v(\\bigoplus sum_v(|(u,v)|\\text{\u4e3a\u5947\u6570}))$\n\n\u7531\u4e8e$|(u,v)|=dep_u-2$\uff0c\u5947\u5076\u6027\u4e0e$dep_u$\u76f8\u540c\n\n$ans'=ans(\\bigoplus sum_v (dep_u\\text{\u4e3a\u5076\u6570}))$\n\ns-t trees\u7ef4\u62a4\u5b9e\u94fe\u957f\u5ea6$solid_size$\uff0c$access(u)$\u4e00\u4e0b\u83b7\u53d6$dep_u$(\u5373rootpath\u957f\u5ea6\u5373solid_size)\uff0c$sum_v$\u5c31\u662f\u6574\u68f5\u6811\u7684\u5f02\u6216\u548c\uff0c\u5728\u64cd\u4f5c2\u7684\u65f6\u5019\u53d8\u5316\n\n#### \u64cd\u4f5c2:\u5355\u70b9\u4fee\u6539\n\n\u8fd9\u4e00\u4e2a\u64cd\u4f5c\u4e5f\u662f\u4f1a\u5f71\u54cd\u64cd\u4f5c1\u7684\u7b54\u6848\u7684\uff0c\u8003\u8651\u53d8\u5316\u4e86\u4ec0\u4e48\n\n**u\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5b50\u6811\u5f02\u6216\u548c\u90fd\u6d88\u53bb\u4e86\u539f\u6765\u7684\u70b9\u6743\u52a0\u4e0a\u4e86\u65b0\u7684\u70b9\u6743**\n\n\u6240\u4ee5\u76f4\u63a5$access$\u7136\u540e\u770b$dep_u$\u7684\u5947\u5076\u6027\uff0c\u662f\u5947\u6570\u7b54\u6848\u5c31\u5f02\u6216\u4e0a$u\\rightarrow val \\bigoplus w$\n\n\u7136\u540e\u628a$u\\rightarrow val$\u8d4b\u6210$w$\u5373\u53ef\n\n$O(n \\log n+(m+q) \\log n)$\n\n```cpp\n#include<cstdio>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n}\ntemplate<class type>inline const void swap(type &a,type &b){const type c(a);a=b;b=c;}\nconst int N(1e6+10);\nnamespace Sleator_Tarjan_Trees\n{\n\tstruct tree\n\t{\n\t\tbool rev;\n\t\tint solid_size,val,dashed_sum,solid_sum,sum;\n\t\ttree *son[2],*fa;\n\t\tstatic tree *null;\n\t\tvoid *operator new(size_t size);\n\t\tvoid *operator new[](size_t size);\n\t\tinline tree():rev(0),solid_size(0),val(0),dashed_sum(0),solid_sum(0)\n\t\t{\n\t\t\tstatic bool init(0);\n\t\t\tif (!init)\n\t\t\t\tinit=1,\n\t\t\t\tnull=new tree,\n\t\t\t\tnull->son[0]=null->son[1]=null->fa=null;\n\t\t\tson[0]=son[1]=fa=null;\n\t\t}\n\t\tinline const void pushup()\n\t\t{\n\t\t\tsolid_size=son[0]->solid_size+1+son[1]->solid_size;\n\t\t\tsolid_sum=son[0]->solid_sum^val^son[1]->solid_sum;\n\t\t\tsum=son[0]->sum^val^son[1]->sum^dashed_sum;\n\t\t}\n\t\tinline const void reverse()\n\t\t{\n\t\t\tswap(son[0],son[1]);rev^=1;\n\t\t}\n\t\tinline const void pushdown()\n\t\t{\n\t\t\tif (rev)son[0]->reverse(),son[1]->reverse(),rev=0;\n\t\t}\n\t\tinline const bool isroot()\n\t\t{\n\t\t\treturn fa->son[0]!=this&&fa->son[1]!=this;\n\t\t}\n\t\tinline const bool id()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t\tinline const void set(tree *p,const bool &d)\n\t\t{\n\t\t\t(son[d]=p)->fa=this;\n\t\t}\n\t\tinline const void rotate()\n\t\t{\n\t\t\tfa->pushdown();pushdown();\n\t\t\tconst bool f(id());\n\t\t\ttree *fa(this->fa),*gfa(fa->fa),*q(son[f^1]);\n\t\t\tif (!fa->isroot())gfa->son[fa->id()]=this;\n\t\t\t(son[f^1]=fa)->son[f]=q;\n\t\t\t((q->fa=fa)->fa=this)->fa=gfa;\n\t\t\tfa->pushup();pushup();\n\t\t}\n\t\tinline const void splay()\n\t\t{\n\t\t\tfor (pushdown();!isroot();rotate())\n\t\t\t\tif (!fa->isroot())\n\t\t\t\t\tfa->fa->pushdown(),\n\t\t\t\t\t(fa->id()^id()?this:fa)->rotate();\n\t\t}\n\t}*root,*node0,*tree::null;\n\t#define null tree::null\n\tinline tree *node(const int &x){return node0+x;}\n\tchar memory_pool[N*sizeof(tree)],*tail(memory_pool+sizeof memory_pool);\n\tinline void *tree::operator new(size_t size){return tail-=size;}\n\tinline void *tree::operator new[](size_t size){return tail-=size;}\n\tinline const void access(tree *p)\n\t{\n\t\tp->splay();\n\t\tp->dashed_sum^=p->son[1]->sum;\n\t\tp->son[1]=null;\n\t\tp->pushup();\n\t\tfor (tree *q(p->fa);q!=null;q=p->fa)\n\t\t\tq->splay(),\n\t\t\tq->dashed_sum^=q->son[1]->sum,\n\t\t\tq->dashed_sum^=(q->son[1]=p)->sum,\n\t\t\tq->pushup(),\n\t\t\tp->rotate();\n\t}\n\tinline const void evert(tree *p)\n\t{\n\t\taccess(p);p->reverse();\n\t}\n\tinline const void expose(tree *p,tree *q)\n\t{\n\t\tevert(p);access(q);\n\t}\n\tinline const void link(tree *p,tree *q)\n\t{\n\t\taccess(p);evert(q);p->set(q,1);p->pushup();\n\t}\n\tinline tree *lca(tree *p,tree *q)\n\t{\n\t\texpose(p,q);\n\t\tconst int dispq(q->solid_size);\n\t\tevert(root);\n\t\taccess(q);const int depq(q->solid_size);\n\t\taccess(p);const int depp(p->solid_size);\n\t\tint deplca(depp+depq-dispq+1>>1);\n\t\twhile (p->pushdown(),1)\n\t\t\tif (deplca<=p->son[0]->solid_size)p=p->son[0];\n\t\t\telse if (!(deplca-=p->son[0]->solid_size+1))return p;\n\t\t\t\telse p=p->son[1];\n\t}\n\tinline const int path_sum(tree *p,tree *q)\n\t{\n\t\texpose(p,q);\n\t\tconst int sum(q->solid_sum);\n\t\tevert(root);\n\t\treturn sum;\n\t}\n\tinline const int subtree_sum(tree *p)\n\t{\n\t\taccess(p);return p->val^p->dashed_sum;\n\t}\n}using namespace Sleator_Tarjan_Trees;\nint n,m,q,ans,sum[N],all;\nint head[N],edc,to[N<<1],next[N<<1];\ninline const void connect(const int &u,const int &v)\n{\n\tnext[++edc]=head[u];to[head[u]=edc]=v;\n\tnext[++edc]=head[v];to[head[v]=edc]=u;\n}\ninline const void dfs(const int &p,const int &fa)\n{\n\tsum[p]=node(p)->val;\n\tfor (int son,i(head[p]);i;i=next[i])\n\t\tif ((son=to[i])^fa)\n\t\t\tdfs(son,p),\n\t\t\tsum[p]^=sum[son],\n\t\t\tlink(node(p),node(son));\n\tans^=sum[p];\n\tnode(p)->pushup();\n}\ninline const void modify(const int &x,const int &y)\n{\n\taccess(node(x));\n\tconst int dep(node(x)->solid_size);\n\tif (dep&1)ans^=node(x)->val^y;\n\tall^=node(x)->val^y;\n\tnode(x)->val=y;\n\tnode(x)->pushup();\n}\ninline const void makeroot(const int &x)\n{\n\taccess(node(x));\n\tconst int dep(node(x)->solid_size);\n\tif (!(dep&1))ans^=all;\n\t(root=node(x))->reverse();\n}\nint main()\n{\n\tread(n);read(m);read(q);\n\tnode0=new tree[n+1];\n\tfor (int i(1);i<=n;i++)read(node(i)->val),all^=node(i)->val;\n\tfor (int u,v,i(1);i<n;i++)read(u),read(v),connect(u,v);\n\tdfs(1,0);root=node(1);\n\tfor (int opt,x,y,i(1);i<=m+q;i++)\n\t\tswitch (read(opt),read(x),opt)\n\t\t{\n\t\t\tcase 1:makeroot(x);printf(\"%d\\n\",ans);break;\n\t\t\tcase 2:read(y);modify(x,y);break;\n\t\t\tcase 3:read(y);printf(\"%d\\n\",lca(node(x),node(y))-node0);break;\n\t\t\tcase 4:read(y);printf(\"%d\\n\",path_sum(node(x),node(y)));break;\n\t\t\tcase 5:printf(\"%d\\n\",subtree_sum(node(x)));break;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1580968900,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6068 \u3010[RC-02] XOR\u3011"
    },
    {
        "content": "\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u76f4\u63a5\u770b\u9898\u3002\n\n### Subtask1:\n\n\u76f4\u63a5\u66b4\u529b\u6a21\u62df\uff0c\u4e0d\u591a\u8bf4\u4e86\uff0c\u9001\u5206\u7684\u3002\n\n### Subtask2:\n\n\u5728\u8fd9\u4e00\u6863\u90e8\u5206\u5206\u91cc\uff0c\u6211\u4eec\u53d1\u73b0$m$\u7684\u503c\u6025\u5267\u589e\u5927\uff0c\u8fbe\u5230\u4e86$10^6$\u7ea7\u522b\u3002\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd$O(1)$\u7684\u505a\u6cd5\u3002\n\n\u4e0d\u59a8\u8bbe\u8be2\u95ee\u7684\u70b9\u4e3a$x$\uff0c\u6211\u4eec\u5148\u770b\u4ee5$1$\u4e3a\u6839\u7684\u60c5\u51b5\u3002\u5728\u4ee51\u4e3a\u6839\u65f6\uff0c\u6211\u4eec\u5355\u72ec\u62c9\u51fa\u6765\u4ee5\u6761\u4ece$1$\u5230$x$\u7684\u8def\u5f84\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u5b83\u4eec\u7684\u5b50\u6811\u90fd\u5305\u542b$x$\u3002\u5e76\u4e14\uff0c$x$\u4e5f\u53ea\u88ab\u8fd9\u4e9b\u70b9\u7684\u5b50\u6811\u6240\u5305\u542b\u3002\n\n\u56e0\u4e3a$x\\operatorname{xor} x=0$\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053$x$\u88ab\u5305\u542b\u7684\u6b21\u6570\u5373\u53ef\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u6b21\u6570\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u6df1\u5ea6\uff01\uff01\uff01\n\n\u90a3\u4e48\uff0c\u5728\u4ee5$1$\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u5c31\u5168\u90fd\u88ab\u5305\u542b\uff0c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u5c31\u4e0d\u5305\u542b\u3002\n\n\u518d\u6765\u8003\u8651\u6362\u6839\u3002\u6211\u4eec\u76f4\u63a5\u8003\u8651\u6362\u6839\u540e\u7684\u6df1\u5ea6\u7684\u5947\u5076\u6027\u3002\u4e0d\u59a8\u8bbe\u5c06$y$\u6362\u4e3a\u4e86\u6839\u3002\u8fd9\u6837\uff0c\u5bf9\u6df1\u5ea6\u7684\u5f71\u54cd\u65e0\u975e\u5c31\u662f\u5168\u88ab\u51cf\u53bb$y$\u7684\u6df1\u5ea6\u3002\u4e0d\u7528\u62c5\u5fc3\u6df1\u5ea6\u51fa\u73b0\u8d1f\u6570\uff0c\u56e0\u4e3a\u8d1f\u6570\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u7684\u8ba8\u8bba\u3002\n\n\u5176\u5b9e\u4e5f\u53ef\u4ee5\u6362\u4e00\u79cd\u89d2\u5ea6\u7406\u89e3\u3002\u6839\u65e0\u8bba\u662f\u54ea\u4e2a\u70b9\uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u6709\u8d21\u732e\u7684\u70b9\u4e00\u5b9a\u662f\u4e00\u4e2a\u9694\u7740\u4e00\u4e2a\u7684\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u7b54\u6848\u5c31\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\u3002\u6070\u597d\uff0c\u540c\u6837\u7b54\u6848\u7684\u70b9\u53ef\u4ee5\u7528\u6df1\u5ea6\u6765\u5206\u7c7b\u3002\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u6df1\u5ea6\u505a\u4e86\u3002\n\n\u5177\u4f53\u7684\uff0c\u5f00\u4e00\u4e2a\u6570\u7ec4```ans[2]```\u8bb0\u5f55\u7b54\u6848\uff0c```depth```\u6570\u7ec4\u8868\u793a\u6df1\u5ea6\u3002\u67e5\u8be2\u65f6\u8f93\u51fa```ans[depth[y]&1]```\uff0c\u4fee\u6539\u65f6\u4e5f\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\u3002\n\n### Subtask3:\n\n\u8fd9\u4e00\u6863\u90e8\u5206\u5206\u662f\u7559\u7ed9\u4f1a\u6811\u5256\u7684\u540c\u5b66\u7684\u66b4\u529b\u5206\u7684\u3002\n\n\uff08~~\u539a\u989c\u65e0\u803b~~\u7684\u5ba3\u4f20\u4e00\u6ce2\u81ea\u5df1\u7684\u6811\u5256\u535a\u5ba2\uff1a[\u91cd\u94fe\u5256\u5206](https://www.luogu.com.cn/blog/FangZeLi/zhong-lian-pou-fen)\uff09\n\n\u8003\u8651\u52301\u64cd\u4f5c\u8f83\u5c11\uff0c\u6bcf\u6b21\u91cd\u65b0\u5256\u5206\u5373\u53ef\u3002\n\n### Subtask4\uff1a\n\n\u5bf9\u4e8e\u64cd\u4f5c$3$\uff0c\u662f\u7ecf\u5178\u7684\u6362\u6839\u610f\u4e49\u4e0b\u7684\u6811\u5256\u4f8b\u9898\uff0c\u8bbe\u6839\u4e3a$z$\uff0c\u67e5\u8be2\u7684\u70b9\u4e3a$x$\u548c$y$\uff0c\u53ea\u9700\u8f93\u51fa$\\operatorname{LCA}(x,y)$\uff0c$\\operatorname{LCA}(x,z)$\uff0c$\\operatorname{LCA}(z,y)$\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u54ea\u4e2a\u70b9\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c$4$\uff0c\u7531\u4e8e\u8def\u5f84\u4e0e\u6839\u65e0\u5173\uff0c\u76f4\u63a5\u6b63\u5e38\u5199\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c$5$\uff0c\u53ea\u9700\u8ba8\u8bba\u4e00\u4e0b\u67e5\u8be2\u70b9\u4e0e\u6839\u7684\u65b9\u5411\u5173\u7cfb\u5373\u53ef\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u753b\u56fe\u5c31\u53ef\u4ee5\u53d1\u73b0\u67e5\u8be2\u7684\u662f\u6574\u68f5\u6811\u6316\u53bb\u8be5\u67e5\u8be2\u70b9\u7684\u4e00\u68f5\u5b50\u6811\u7684\u5f02\u6216\u503c\uff0c\u4e0d\u5c55\u5f00\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c$1$\uff0c\u6309\u8c03\u7528Subtask2\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u64cd\u4f5c$2$\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u64cd\u4f5c$4$\u4e2d\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u7ed3\u5408Subtask2\u8d77\u6765\uff0c\u5373\u53ef\u62ff\u5230\u6b64\u6863\u90e8\u5206\u5206\u3002\n\n### Subtask5&6:\n\n\u8fd9\u4e24\u6863\u90e8\u5206\u5206\u653e\u5728\u4e00\u8d77\u8bb2\u3002\n\n\u56de\u987e\u4e00\u4e0b\u5355\u7eaf\u7684\u6811\u5256\uff0c\u5728\u5904\u7406\u64cd\u4f5c4\u65f6\uff0c\u6211\u4eec\u8df3\u94fe\u7684\u8fc7\u7a0b\u5e26\u7740\u4e24\u4e2a$\\log$\uff0c\u518d\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u5728\u88ab\u6784\u9020\u6570\u636e\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u4e0d\u53ef\u80fd\u8fc7\u7684\u3002\u6211\u4eec\u9700\u8981\u4f18\u5316\u3002\n\n\u600e\u4e48\u4f18\u5316\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u5047\u5982\u6211\u4eec\u628a\u70b9$i$\u5230$1$\u53f7\u70b9\u7684\u8def\u5f84\u5b58\u4e0b\u6765\uff0c\u4ee4\u5176\u4e3a$G_i$\uff0c\u90a3\u4e48\uff0c$4$\u64cd\u4f5c\u5c31\u53ef\u4ee5\u770b\u6210\u662f$G_x \\operatorname{xor} G_y \\operatorname{xor} V_{\\operatorname{LCA}(x,y)}$\u3002\n\n\u6211\u4eec\u518d\u6765\u770b\u4e00\u770b\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u4fe1\u606f\u3002\n\n\u5728\u5355\u70b9\u4fee\u6539\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u5f71\u54cd\u7684\u53ea\u662f\u8be5\u70b9\u7684\u5b50\u6811\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6240\u6709\u4f4d\u4e8e\u8be5\u70b9\u5b50\u6811\u4e2d\u7684\u70b9\u7684$G$\u503c\u90fd\u8981\u5148\u5f02\u6216\u4e0a\u539f\u6765\u7684\u503c\uff0c\u518d\u5f02\u6216\u4e0a\u73b0\u5728\u7684\u503c\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u5355\u70b9\u67e5\u8be2\uff0c\u533a\u95f4\u4fee\u6539\u3002\n\n\u81f3\u6b64\uff0c$4$\u64cd\u4f5c\u88ab\u6211\u4eec\u6210\u529f\u7684\u4f18\u5316\u81f3\u4e86\u4e00\u4e2a$\\log$\u3002\n\n\u53e6\u5916\uff0c\u5047\u5982\u4f60\u4f1a\u6811\u5256\uff0c\u60f3\u5230\u4e86\u8fd9\u4e2a\u4f18\u5316\u65b9\u6cd5\uff0c\u4f46\u6ca1\u6709\u60f3\u5230Subtask2\u7684\u7ed3\u8bba\uff0c\u52aa\u529b\u5361\u4e00\u5361\u5e38\uff0c\u4f9d\u7136\u80fd\u62ff\u5230Subtask5\u7684\u5206\u3002\n\n\u6700\u540e\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u6d1b\u8c37\u7684\u6570\u636e\u70b9\u5927\u5c0f\u9650\u5236\uff08~~\u4e5f\u53ef\u80fd\u662f\u6211\u9020\u6570\u636e\u80fd\u529b\u592a\u5dee~~\uff09\uff0c\u5728Subtask4\u548c\u6b63\u89e3\u4e4b\u95f4\u62c9\u4e0d\u5f00\u65f6\u95f4\u4e0a\u7684\u5dee\u8ddd\uff0c\u56e0\u6b64\uff0c\u672c\u9898\u5361\u5e38\u3002\u6240\u4ee5\uff0c\u6811\u5256\u4e2d\u7684\u6240\u6709\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u5de5\u5177\uff0c\u5747\u8981\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4e0d\u7136\u4e0d\u4fdd\u8bc1\u80fd\u591f\u901a\u8fc7\u3002\n\n\u9644\u4e0aAC\u4ee3\u7801\uff08\u6bd4\u8f83\u4e11\uff0c\u89c1\u8c05\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\n\n#define _N 1000001\n\n#define lowbit(p) (p&-p)\n\nstruct Side\n{\n\tint to;\n\tint next;\n\tSide()\n\t{\n\t\tto = next = 0;\n\t}\n\tSide(int a, int b)\n\t{\n\t\tto = a;\n\t\tnext = b;\n\t}\n};\n\nint n, m, q;\n\nint v[_N];\nint res[2];\n\nint root = 1;\nint ncnt = 0;\nint fa[_N];\nint heavyson[_N];\nint siz[_N];\nint depth[_N];\nint top[_N];\nint id[_N];\nint dfn[_N];\n\nint treeval[_N];\nint treesum[_N];\n\nint sidecnt = 0;\nint head[_N];\nSide sides[2 * _N];\n\nvoid inline Swap(int& a, int& b)\n{\n\tint t = a;\n\ta = b;\n\tb = t;\n}\n\nvoid inline adde(int x, int y)\n{\n\tsides[++sidecnt] = Side(y, head[x]);\n\thead[x] = sidecnt;\n}\n\nvoid xor_val(int p, int k)\n{\n\twhile (p <= n)\n\t{\n\t\ttreeval[p] ^= k;\n\t\tp += lowbit(p);\n\t}\n}\nint query_val(int p)\n{\n\tint ans = 0;\n\twhile (p != 0)\n\t{\n\t\tans ^= treeval[p];\n\t\tp -= lowbit(p);\n\t}\n\treturn ans;\n}\nvoid xor_sum(int p, int k)\n{\n\twhile (p <= n)\n\t{\n\t\ttreesum[p] ^= k;\n\t\tp += lowbit(p);\n\t}\n}\nint query_sum(int p)\n{\n\tint ans = 0;\n\twhile (p != 0)\n\t{\n\t\tans ^= treesum[p];\n\t\tp -= lowbit(p);\n\t}\n\treturn ans;\n}\n\nvoid update_treesum(int l, int r, int k)\n{\n\txor_sum(l, k);\n\txor_sum(r + 1, k);\n}\nvoid update_treeval(int p, int k)\n{\n\txor_val(p, k);\n}\nint query_treesum(int p)\n{\n\treturn query_sum(p);\n}\nint query_treeval(int l, int r)\n{\n\treturn query_val(r) ^ query_val(l - 1);\n}\n\nvoid cut(int x, int father, int deep)\n{\n\tsiz[x] = 1;\n\tfa[x] = father;\n\tdepth[x] = deep;\n\tres[depth[x] & 1] ^= v[x];\n\tint next = head[x];\n\twhile (next != 0)\n\t{\n\t\tint y = sides[next].to;\n\t\tif (y != father)\n\t\t{\n\t\t\tcut(y, x, deep + 1);\n\t\t\tsiz[x] += siz[y];\n\t\t\tif (siz[y] > siz[heavyson[x]])\n\t\t\t{\n\t\t\t\theavyson[x] = y;\n\t\t\t}\n\t\t}\n\t\tnext = sides[next].next;\n\t}\n}\nvoid inf(int x, int topfather)\n{\n\ttop[x] = topfather;\n\tid[x] = ++ncnt;\n\tdfn[ncnt] = x;\n\tif (heavyson[x] == 0)\n\t{\n\t\treturn;\n\t}\n\tinf(heavyson[x], topfather);\n\tint next = head[x];\n\twhile (next != 0)\n\t{\n\t\tint y = sides[next].to;\n\t\tif (y != fa[x] && y != heavyson[x])\n\t\t{\n\t\t\tinf(y, y);\n\t\t}\n\t\tnext = sides[next].next;\n\t}\n}\n\nint lca(int x, int y)\n{\n\twhile (top[x] != top[y])\n\t{\n\t\tif (depth[top[x]] < depth[top[y]])\n\t\t{\n\t\t\tSwap(x, y);\n\t\t}\n\t\tx = fa[top[x]];\n\t}\n\tif (depth[x] > depth[y])\n\t{\n\t\tSwap(x, y);\n\t}\n\treturn x;\n}\nint selca(int x, int y)\n{\n\twhile (top[x] != top[y])\n\t{\n\t\tif (depth[top[x]] < depth[top[y]])\n\t\t{\n\t\t\tSwap(x, y);\n\t\t}\n\t\tif (fa[top[x]] == y)\n\t\t{\n\t\t\treturn top[x];\n\t\t}\n\t\tx = fa[top[x]];\n\t}\n\tif (depth[x] > depth[y])\n\t{\n\t\tSwap(x, y);\n\t}\n\treturn heavyson[x];\n}\n\nint makeroot(int x)\n{\n\troot = x;\n\treturn res[depth[x] & 1];\n}\nvoid update_val(int x, int y)\n{\n\tres[depth[x] & 1] ^= v[x] ^ y;\n\tupdate_treesum(id[x], id[x] + siz[x] - 1, v[x] ^ y);\n\tupdate_treeval(id[x], v[x] ^ y);\n\tv[x] = y;\n}\nint lca(int x, int y, int k)\n{\n\tint a = lca(x, y);\n\tint b = lca(x, root);\n\tint c = lca(y, root);\n\tif (depth[a] > depth[b])\n\t{\n\t\tif (depth[a] > depth[c])\n\t\t{\n\t\t\treturn a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (depth[b] > depth[c])\n\t\t{\n\t\t\treturn b;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n}\nint query_path(int x, int y)\n{\n\treturn query_treesum(id[x]) ^ query_treesum(id[y]) ^ v[lca(x, y)];\n}\nint query_sub(int x)\n{\n\tif (x == root)\n\t{\n\t\treturn query_treeval(id[1], id[1] + siz[1] - 1);\n\t}\n\tint a = lca(x, root);\n\tif (a == x)\n\t{\n\t\tint b = selca(root, x);\n\t\treturn query_treeval(id[1], id[1] + siz[1] - 1) ^ query_treeval(id[b], id[b] + siz[b] - 1);\n\t}\n\telse\n\t{\n\t\treturn query_treeval(id[x], id[x] + siz[x] - 1);\n\t}\n}\n\n\nint main()\n{\n\tscanf(\"%d%d%d\", &n, &m, &q);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &v[i]);\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadde(x, y);\n\t\tadde(y, x);\n\t}\n\tcut(1, 0, 1);\n\tinf(1, 1);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tupdate_treeval(id[i], v[i]);\n\t\tupdate_treesum(id[i], id[i] + siz[i] - 1, v[i]);\n\t}\n\tfor (int i = 1; i <= m + q; i++)\n\t{\n\t\tint opt, x, y;\n\t\tscanf(\"%d\", &opt);\n\t\tswitch (opt)\n\t\t{\n\t\tcase 1:\n\t\t\tscanf(\"%d\", &x);\n\t\t\tprintf(\"%d\\n\", makeroot(x));\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tupdate_val(x, y);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tprintf(\"%d\\n\", lca(x, y, root));\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tprintf(\"%d\\n\", query_path(x, y));\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tscanf(\"%d\", &x);\n\t\t\tprintf(\"%d\\n\", query_sub(x));\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1580042712,
        "uid": 244096,
        "name": "FangZeLi",
        "ccfLevel": 7,
        "title": "XOR \u9898\u89e3"
    }
]