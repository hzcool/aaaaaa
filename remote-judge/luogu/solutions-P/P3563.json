[
    {
        "content": "# [LG-P3563 [POI2013]POL-Polarization](https://www.luogu.com.cn/problem/P3563) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.monkey-hyx.tech?t=LG-P3563-Solution)\n\n\uff08\u5efa\u8bae\u60a8\u4ece\u4e0a\u65b9\u94fe\u63a5\u8fdb\u5165\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u67e5\u770b\u6b64 Blog\uff0c\u5728 Luogu \u4e2d\u56fe\u7247\u4f1a\u88ab\u5899\u6389\uff0c\u90e8\u5206 Markdown \u4e5f\u4f1a\u5931\u6548\uff09\n\n## \u9898\u9762\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709 $ n $ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8981\u6c42\u5c06\u6811\u4e0a\u6240\u6709\u8fb9\u53d8\u6210\u6709\u5411\u8fb9\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u8fde\u901a\u70b9\u5bf9\u7684\u6700\u5c0f\u548c\u6700\u5927\u5bf9\u6570\u3002\n\n\u5b9a\u4e49\u672c\u8d28\u4e0d\u540c\u8fde\u901a\u70b9\u5bf9\u4e3a\u5bf9\u4e8e\u70b9 $ a, b $\uff0c\u6ee1\u8db3 $ a $ \u80fd\u5230\u8fbe $ b $\uff0c\u6216 $ b $ \u80fd\u5230\u8fbe $ a $\u3002\n\n$ n \\le 2.5 \\times 10^5 $\u3002\n\n## Solution\n\n\u8be5\u8bf4\u4e0d\u8bf4\u8fd9\u9053\u9898\u7684\u6570\u636e\u6709\u70b9\u6c34\uff0c\u53ef\u4ee5\u5fae\u8c03\u5757\u957f\u7136\u540e\u7528\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u8d2a\u5fc3\u6c34\u8fc7\u53bb\u3002\u3002\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\u5e94\u8be5\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u8bf4\u7684\u4e13\u4e1a\u4e00\u70b9\u5c31\u662f\uff0c\u6811\u662f\u4e00\u4e2a\u4e8c\u90e8\u56fe\uff0c\u5c06\u5176\u5206\u89e3\u4e3a\u5de6\u53f3\u90e8\u56fe\u540e\uff0c\u628a\u90e8\u56fe\u95f4\u7684\u65e0\u5411\u8fb9\u5168\u90e8\u6539\u4e3a\u5de6\u90e8\u56fe\u5411\u53f3\u90e8\u56fe\u7684\u6709\u5411\u8fb9\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u5219\u6700\u5c0f\u503c\u4e00\u5b9a\u4e3a $ n - 1 $\u3002\n\n\u6216\u8005\u901a\u4fd7\u5730\u8bf4\uff0c\u628a $ i $ \u5230 $ i + 1 $ \u5c42\u4e4b\u95f4\u7684\u8fb9\u548c $ i + 1 $ \u5230 $ i + 2 $ \u5c42\u4e4b\u95f4\u7684\u8fb9\u53cd\u5411\u8fde\u7ed3\uff0c\u6700\u7ec8\u4e00\u5b9a\u6709 $ n - 1 $ \u5bf9\u8fde\u901a\u70b9\u5bf9\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\u9700\u8981\u5f15\u5165\u51e0\u4e2a~~\u6211\u4e0d\u4f1a\u8bc1\u660e~~\u5f88\u795e\u5947\u7684 Lemma\uff1a\n\nLemma 1\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4f7f\u8fde\u901a\u70b9\u5bf9\u6570\u91cf\u6700\u591a\u7684\u56fe\uff0c\u5176\u4e2d\u4e00\u5b9a\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u6ee1\u8db3\u4ee5\u5176\u4e3a\u6839\uff0c\u6240\u6709\u5b50\u6811\u8981\u4e48\u662f\u5916\u5411\u7684\u8981\u4e48\u662f\u5185\u5411\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u4e48\u5168\u90e8\u6307\u5411\u6839\u65b9\u5411\uff0c\u8981\u4e48\u5168\u90e8\u80cc\u5411\u6839\u65b9\u5411\u3002\n\nLemma 2\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4f7f\u8fde\u901a\u70b9\u5bf9\u6570\u91cf\u6700\u591a\u7684\u56fe\uff0cLemma 1 \u7684\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5728\u6811\u7684\u4efb\u610f\u4e00\u4e2a\u91cd\u5fc3\u4e0a\u3002\n\n\u8bc1\u660e\uff1aThe proof is left to the reader. \uff08~~\u4e0d\u4f1a\u8bc1~~\uff09\n\n\u4e8e\u662f\u6211\u4eec\u4fbf\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f\u627e\u5230\u6811\u7684\u91cd\u5fc3\uff0c\u7136\u540e\u4ee5\u91cd\u5fc3\u4e3a\u6839\u641c\u4e00\u4e0b\u5176\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u8bb0\u5f55\u4e0b\u6765\u4e4b\u540e\u679a\u4e3e\u54ea\u4e9b\u5b50\u6811\u662f\u5916\u5411\u7684\uff0c\u54ea\u4e9b\u662f\u5185\u5411\u7684\uff0c\u624d\u4f1a\u4f7f\u6700\u7ec8\u7b54\u6848\u6700\u4f18\u3002\n\n\u5982\u679c\u662f\u83ca\u82b1\u56fe\u7684\u8bdd\u5b50\u6811\u4e2a\u6570\u6700\u591a\u662f $ n $ \u7ea7\u522b\u7684\uff0c\u90a3\u4e48\u55ef\u679a\u4e3e\u7684\u8bdd\u5927\u6982\u662f $ O(2^n) $ \u663e\u7136\u4e0d\u53ef\u4ee5\u901a\u8fc7\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u9996\u5148\u6211\u4eec\u63a5\u7740\u521a\u624d\u7684\u601d\u8def\u5f80\u4e0b\u60f3\u6b64\u65f6\u6211\u4eec\u6839\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u56fe\uff1a\n\n![The picture is blocked.](http://monkey-hyx.tech/Images/Blog/2022_09_28_1.png)\n\n\u6211\u4eec\u8003\u8651\u9664\u4e86\u6839\u8282\u70b9\u5916\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u73b0\u5728\u82e5\u4ec5\u8003\u8651\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u548c\u8be5\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u6700\u9ad8\u5230\u8fbe\u8be5\u8282\u70b9\u7684\u7236\u4eb2\u7684\u8fde\u901a\u5bf9\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u4ee4\u8282\u70b9 $ i $ \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u4e3a $ siz_i $\uff0c\u90a3\u4e48\u663e\u7136\u4e0a\u8ff0\u7684\u6240\u6709\u8054\u901a\u5bf9\u7684\u4e2a\u6570\u4e3a $ \\sum siz_i $\u3002\n\n\u5728\u8fd9\u4e4b\u540e\u6211\u4eec\u4fbf\u4e0d\u96be\u53d1\u73b0\u53ea\u5269\u4e0b\u5982 $ (10, 3) $\uff0c\u5373 $ 10 \\rightarrow 8 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3 $\uff0c\u8fd9\u79cd\u901a\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\u5f62\u6210\u7684\u8fde\u901a\u5bf9\u6ca1\u6709\u8003\u8651\uff0c\u4e8e\u662f\u8054\u60f3\u5230\u6211\u4eec\u4e4b\u524d\u7684 Lemma\uff0c\u5982\u679c\u6211\u4eec\u8bbe\u6240\u6709\u5185\u5411\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u4e3a $ k_1 $\uff0c\u6240\u6709\u5916\u5411\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u4e3a $ k_2 $\uff0c\u4e14\u663e\u7136\u6709 $ k_1 + k_2 = n - 1 $\uff0c\u4e0d\u96be\u60f3\u5230\u8fd9\u79cd\u60c5\u51b5\u4e2d\u7684\u8fde\u901a\u5bf9\u6570\u91cf\u5373\u4e3a $ k_1 \\times k_2 $\u3002\n\n\u4e8e\u662f\u663e\u7136\u6709 $ ans = \\sum siz_i + k_1 \\times k_2 $\uff0c\u5f53\u6839\u786e\u5b9a\u4e4b\u540e\u524d\u8005\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u540e\u8005\u6700\u5927\u5373\u53ef\u3002\n\n\u6211\u4eec\u5c06\u6240\u6709\u5b50\u6811\u5927\u5c0f\u62bd\u8c61\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8981\u5c06\u8fd9\u4e2a\u5e8f\u5217\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4f7f\u4e24\u90e8\u5206\u5206\u522b\u6c42\u548c\u540e\u4e58\u79ef\u6700\u5927\u3002\u4e24\u4e2a\u6570\u548c\u56fa\u5b9a\uff0c\u8981\u8ba9\u79ef\u6700\u5927\uff0c\u8fd9\u73a9\u610f\u5e94\u8be5\u5f88\u663e\u7136\u5c31\u662f\u8981\u8ba9\u4e24\u4e2a\u6570\u76f8\u7b49\u5427\uff0c\u653e\u5230\u8fd9\u9053\u9898\u4e0a\u5c31\u662f\u8ba9\u4e24\u90e8\u5206\u7684\u6c42\u548c\u540e\u7684\u5dee\u503c\u6700\u5c0f\uff0c\u8fd9\u4e1c\u897f\u4e0d\u89c9\u5f97\u975e\u5e38\u50cf\u642d\u5efa\u53cc\u5854\u5417\u3002\u3002\u3002[\u5173\u4e8e\u4e00\u4e2a\u4eba\u7c7b\u667a\u6167\u7684DP - Vijos 1037 \u642d\u5efa\u53cc\u5854](http://blog.monkey-hyx.tech?t=Vijos-1037-Solution)\n\n\u4e0d\u8fc7\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\u540e\u53d1\u73b0\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u6837\uff0c\u672c\u9898\u91cc\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u7684\u6570\u90fd\u7528\u4e0a\uff0c\u4e14\u642d\u5efa\u53cc\u5854\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u653e\u5728\u8fd9\u9898\u4e0a\u5c31\u5f88\u79bb\u8c31\u4e86\u3002\n\n\u9996\u5148\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u5947\u602a\u7684\u8d2a\u5fc3\uff0c\u636e\u8bf4\u662f 2015 \u96c6\u8bad\u961f\u8bba\u6587\u91cc\u7684\uff08~~\u867d\u7136\u6211\u6ca1\u627e\u5230~~\uff09\uff08~~\u800c\u4e14\u662f\u9519\u8bef\u7684~~\uff09\uff0c\u5927\u6982\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u7136\u540e\u6bcf\u6b21\u53d6\u5806\u9876\u7684\u4e24\u4e2a\u503c\uff0c\u8ba1\u7b97\u5b83\u4eec\u5dee\u7684\u7edd\u5bf9\u503c\u7136\u540e\u518d\u63d2\u5165\u5806\u91cc\uff0c\u5f53\u5806\u4e2d\u5269\u4f59\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u8fd9\u4e2a\u5143\u7d20\u5c31\u662f\u5dee\u503c\u7684\u6700\u5c0f\u503c\uff0c\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u7ec6\u60f3\u4e00\u4e0b\u4f3c\u4e4e\u5f88\u6b63\u786e\uff0c\u4f46\u662f\u8fd9\u662f\u9519\u8bef\u7684\uff08\u5982\u679c\u4e0d\u662f\u6211\u60f3\u9519\u4e86\u7684\u8bdd\uff09\u3002\n\n\u8fd9\u4e2a\u8d2a\u5fc3\u5927\u6982\u7684\u601d\u8def\u5c31\u662f\u6bcf\u6b21\u627e\u6700\u5927\u7684\u4e24\u4e2a\u5206\u522b\u653e\u5728\u4e24\u4fa7\uff0c\u4f1a\u6709\u4e00\u4e2a\u5dee\u503c\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5dee\u503c\u4e5f\u8ba4\u4e3a\u662f\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u663e\u7136\u5dee\u503c\u4e5f\u53ef\u4ee5\u548c\u666e\u901a\u7684\u6570\u4e00\u6837\u653e\u7f6e\uff0c\u6bd4\u5982\u8bf4\u4e24\u5bf9\u5dee\u503c\u4e3a $ 1 $ \u7684\u5757\u5168\u90e8\u62fc\u5728\u4e00\u8d77\u6700\u7ec8\u7684\u5dee\u503c\u4e5f\u5c31\u662f $ 0 $ \u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u4f60\u505a\u8fc7\u642d\u5efa\u53cc\u5854\u7684\u8bdd\u5927\u6982\u4e5f\u5c31\u80fd\u770b\u51fa\u6765\u9519\u8bef\u5728\u54ea\u91cc\u4e86\uff0c\u663e\u7136\u6211\u4eec\u8d2a\u5fc3\u5730\u53d6\u4e24\u4e2a\u6700\u5927\u7684\u653e\u5728\u4e24\u4fa7\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u6bd4\u5982\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217\uff1a$ 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8 $\uff0c\u663e\u7136 $ 8 $ \u653e\u5728\u4e00\u8d77\uff0c$ 3 $ \u653e\u5728\u4e00\u8d77\uff0c\u6700\u7ec8\u5dee\u503c\u4e3a $ 0 $\uff0c\u4f46\u662f\u6309\u7167\u8fd9\u4e2a\u8d2a\u5fc3\u5219\u4f1a\u4f18\u5148\u628a\u4e24\u4e2a $ 8 $ \u653e\u5728\u4e00\u8d77\u62b5\u6d88\uff0c\u5bfc\u81f4\u6700\u540e\u5269\u4e0b\u7684\u5dee\u503c\u4e3a $ 2 $\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u8fdb\u884c\u6839\u53f7\u5206\u6cbb\uff0c\u4f46\u662f\u4e0d\u6309\u7167 $ \\sqrt{n} $ \u5206\u6cbb\u800c\u662f\u56fa\u5b9a\u6309\u7167 $ 1000 $ \u7684\u8bdd\uff0c\u90a3\u4e48\u521a\u597d\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8d2a\u5fc3\u4e0d\u6b63\u786e\u7684\u6570\u636e\u70b9\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u7528\u6b63\u5e38\u7684 DP + bitset \u6c42\u89e3\uff0c\u6700\u540e\u65e0\u8bba\u662f Luogu \u7684\u5341\u4e2a\u6570\u636e\u70b9\u8fd8\u662f\u539f\u9898\u7684\u516d\u5341\u591a\u4e2a\u6570\u636e\u70b9\u90fd\u662f\u53ef\u4ee5 Accept \u7684\uff0c\u5c31\u7b97\u6309\u7167\u6807\u51c6\u7684\u6839\u53f7\u5206\u652f\u4e5f\u53ef\u4ee5\u8fc7\u63a5\u8fd1 $ 90\\% $ \u7684\u70b9\uff0c\u4e0d\u8fc7\u4e0d\u80fd\u602a\u6570\u636e\u5f31\uff0c\u786e\u5b9e\u8fd9\u4e2a\u662f\u5f88\u96be\u5361\u7684\u3002\n\nCode\uff1a\n\n```cpp\nconst int B = 1000;//int(sqrt(N));\nif(tot >= B){\n    std::priority_queue < int, vector < int >, less < int > > vals;\n    for(auto i : subt)vals.push(i);\n    while(vals.size() != 1){\n        int x = vals.top(); vals.pop();\n        int y = vals.top(); vals.pop();\n        vals.push(abs(x - y));\n    }\n    int diff = vals.top();\n    int vx = (N - 1 - diff) / 2;\n    int vy = vx + diff;\n    ans += (ll)vx * vy;\n}else{\n    dp[0] = true;\n    for(auto i : subt)dp |= dp << i;\n    for(int i = N / 2 + 1; i >= 0 ; --i)if(dp[i]){ans += (ll)i * (N - i - 1); break;}\n}\n```\n\n\u8003\u8651\u6b63\u89e3\uff0c\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a $ n $ \u7684 `bool` \u7c7b\u578b\u6570\u7ec4\uff0c\u8868\u793a $ k_1 $ \u662f\u5426\u80fd\u4e3a $ i $\uff08\u6216\u8868\u793a $ k_2 $ \u540c\u7406\uff09\u663e\u7136\u662f\u4e00\u4e2a $ O(n^2) $ \u7684 DP\uff0c\u8f6c\u79fb\u4e4b\u540e\u4ece $ \\dfrac{n}{2} $ \u5f00\u59cb\u8dd1\uff0c\u8dd1\u5230\u7684\u7b2c\u4e00\u4e2a\u53ef\u884c\u89e3\u4e00\u5b9a\u4e3a\u6700\u4f18\u89e3\uff0c\u4f7f\u4e24\u8005\u5dee\u6700\u5c0f\uff0c\u4f46\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u6b63\u786e\u3002\u8003\u8651\u5b50\u6811\u7684\u4e2a\u6570\uff0c\u5982\u679c\u5c0f\u4e8e $ \\sqrt{n} $ \u90a3\u4e48\u663e\u7136\u8fd9\u4e2a\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u662f $ O(n\\sqrt{n}) $ \u7684\uff0c\u5982\u679c\u5927\u4e8e $ \\sqrt{n} $\uff0c\u5219\u5b50\u6811\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5c0f\u4e8e $ \\sqrt{n} $ \u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u5b9a\u6709\u76f8\u540c\u5927\u5c0f\u7684\u5b50\u6811\uff0c\u4e14\u968f\u7740\u5b50\u6811\u4e2a\u6570\u589e\u591a\uff0c\u6700\u5927\u503c\u4f1a\u9010\u6e10\u53d8\u5c0f\uff0c\u5bfc\u81f4\u91cd\u590d\u7684\u4e2a\u6570\u7ee7\u7eed\u589e\u5927\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4ee5\u591a\u91cd\u80cc\u5305\u7684\u601d\u60f3\u53d6\u8003\u8651\uff0c\u5c06\u591a\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u5b50\u6811\u62c6\u6210 $ 2^0, 2^1, 2^1, \\cdots $\uff0c\u53d8\u6210\u591a\u4e2a\u80cc\u5305\uff0c\u4ee4\u5927\u5c0f\u4e3a $ i $ \u7684\u5b50\u6811\u6709 $ cnt_i $ \u4e2a\uff0c\u6700\u540e\u7684\u590d\u6742\u5ea6\u5927\u6982\u662f\u4e00\u4e2a $ O(n\\sum \\log cnt_i) $\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5927\u6982\u4f7f\u4ecb\u4e8e $ O(n\\log n) $ \u548c $ O(n\\sqrt{n}) $ \u4e4b\u95f4\u7684\uff0c\u5177\u4f53\u8bc1\u660e\u6211\u4e5f\u4e0d\u77e5\u9053\u5e94\u8be5\u600e\u4e48\u8bc1\uff0c\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5427\u3002\n\n\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u4f9d\u7136\u4e0d\u6b63\u786e\uff0c\u8003\u8651\u628a\u8fd9\u4e2a\u6570\u7ec4\u538b\u6210\u4e00\u4e2a `bitset`\uff0c\u8fd9\u6837\u5728\u8fdb\u884c\u6216\u8fd0\u7b97\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u5927\u5e45\u964d\u4f4e\u901f\u5ea6\uff0c\u6700\u7ec8\u662f $ O(\\dfrac{n\\sqrt{n}}{\\omega}) $\uff0c\u6b64\u5904\u7684 $ \\omega $ \u4e00\u822c\u4e3a $ 32 $\uff0c\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/extc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate<typename T = int>\ninline T read(void);\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    OPNEW;\n}ed[510000];\nROPNEW(ed);\nEdge* head[260000];\n\nint N;\nint siz[260000], msiz[260000], rt(0);\nvoid dfs(int p, int fa = -1){\n    msiz[p] = 0;\n    siz[p] = 1;\n    for(auto i = head[p]; i; i = i->nxt){\n        if(SON == fa)continue;\n        dfs(SON, p);\n        siz[p] += siz[SON];\n        msiz[p] = max(msiz[p], siz[SON]);\n    }\n    msiz[p] = max(msiz[p], N - siz[p]);\n    if(!rt || msiz[p] < msiz[rt])rt = p;\n}\nint cnt[260000];\nint tot(0);\nll ans(0);\nbitset < 260000 > dp;\nint main(){\n    N = read();\n    for(int i = 1; i <= N - 1; ++i){\n        int s = read(), t = read();\n        head[s] = new Edge{head[s], t};\n        head[t] = new Edge{head[t], s};\n    }\n    dfs(1);\n    dfs(rt);\n    for(int i = 1; i <= N; ++i)if(i != rt)ans += siz[i];\n    for(auto i = head[rt]; i; i = i->nxt)cnt[siz[SON]]++;\n    for(int i = 1; i <= N / 2; ++i)while(cnt[i] > 2)cnt[i] -= 2, cnt[i * 2]++;\n    dp[0] = true;\n    for(int i = 1; i <= N; ++i)while(cnt[i]--)dp |= dp << i;\n    for(int i = N / 2; i >= 0 ; --i)if(dp[i]){ans += (ll)i * (N - i - 1); break;}\n    printf(\"%d %lld\\n\", N - 1, ans);\n\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate<typename T>\ninline T read(void){\n    T ret(0);\n    short flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_09_28 \u521d\u7a3f",
        "postTime": 1664340276,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P3563 [POI2013]POL-Polarization \u9898\u89e3"
    },
    {
        "content": "\u5148\u8003\u8651\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u6811\u662f\u4e8c\u5206\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u5c06\u5176\u5206\u6210\u5de6\u53f3\u90e8\u56fe\uff0c\u8ba9\u5de6\u90e8\u56fe\u5411\u53f3\u90e8\u56fe\u8fde\u8fb9\u5373\u53ef\u6784\u9020\u6700\u5c0f\u503c\uff0c\u4e3a $n-1$\u3002\n\n\u5bf9\u4e8e\u6700\u5927\u503c\uff0c\u6700\u4f18\u60c5\u51b5\u4e00\u5b9a\u662f\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\uff0c\u5176\u5404\u4e2a\u5b50\u6811\u5185\u8fb9\u7684\u72b6\u6001\u4e3a\u8981\u4e48\u8be5\u70b9\u80fd\u5230\u8fbe\u5b50\u6811\u5185\u7684\u6bcf\u4e2a\u70b9\uff0c\u5373\u5916\u5411\uff0c\u8981\u4e48\u5b50\u6811\u5185\u7684\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u8be5\u70b9\uff0c\u5373\u5185\u5411\uff0c\u4e14\u8be5\u70b9\u4e3a\u6811\u7684\u91cd\u5fc3\u3002\n\n\u53ef\u4ee5\u7b80\u5355\u7684\u8fdb\u884c\u8bc1\u660e\u3002\u8003\u8651\u8fb9\u7684\u72b6\u6001\u8ba9\u8fd9\u68f5\u6811\u6709\u4e86\u4e24\u4e2a\u4e0a\u9762\u63cf\u8ff0\u7684\u4e2d\u5fc3\uff0c\u4e24\u4e2a\u4e2d\u5fc3\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u4e00\u534a\u7684\u8fb9\u6307\u5411\u7b2c\u4e00\u4e2a\u4e2d\u5fc3\uff0c\u4e00\u534a\u7684\u8fb9\u6307\u5411\u7b2c\u4e8c\u4e2a\u4e2d\u5fc3\u3002\u53d1\u73b0\u82e5\u8fd9\u6761\u8def\u5f84\u8fb9\u7684\u65b9\u5411\u53ea\u6307\u5411\u4e00\u4e2a\u4e2d\u5fc3\uff0c\u7b54\u6848\u4f1a\u66f4\u4f18\uff0c\u6240\u4ee5\u5c31\u5c06\u8fd9\u4e24\u4e2a\u4e2d\u5fc3\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u540c\u7406\uff0c\u82e5\u5b58\u5728\u591a\u4e2a\u4e2d\u5fc3\uff0c\u5408\u5e76\u4e3a\u4e00\u4e2a\u4f1a\u66f4\u4f18\u3002\u56e0\u4e3a\u4e2d\u5fc3\u7684\u5404\u4e2a\u5b50\u6811\u7684\u5916\u5411\u4e2a\u6570\u548c\u5185\u5411\u4e2a\u6570\u4f1a\u4e58\u8d77\u6765\u8d21\u732e\u7ed9\u7b54\u6848\uff0c\u6240\u4ee5\u4e2d\u5fc3\u9009\u53d6\u6811\u7684\u91cd\u5fc3\u53ef\u4ee5\u66f4\u597d\u7684\u5206\u914d\u5916\u5411\u5185\u5411\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u8003\u8651\u5c06\u4e2d\u5fc3\u7684\u5404\u4e2a\u5b50\u6811\u5206\u4e3a\u5916\u5411\u548c\u5185\u5411\u4e24\u4e2a\u96c6\u5408\uff0c\u4e24\u4e2a\u96c6\u5408\u5927\u5c0f\u8d8a\u63a5\u8fd1 $\\frac{n}{2}$ \u8d8a\u4f18\u3002\u53ef\u4ee5\u901a\u8fc7\u4e8c\u8fdb\u5236\u62c6\u5206\u6765\u4f18\u5316\u8fd9\u4e2a\u591a\u91cd\u80cc\u5305\u95ee\u9898\uff0c\u56e0\u4e3a\u53ea\u7528\u8003\u8651\u5b58\u5728\u6027\uff0c\u6240\u4ee5\u4e5f\u91c7\u7528 $bitset$ \u6765\u4f18\u5316\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 500010\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,root;\nll ans;\nint siz[maxn],ma[maxn],cnt[maxn];\nbitset<maxn> s;\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nvoid dfs(int x,int fa)\n{\n    siz[x]=1;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(y==fa) continue;\n        dfs(y,x),siz[x]+=siz[y];\n        ma[x]=max(ma[x],siz[y]);\n    }\n    ma[x]=max(ma[x],n-siz[x]);\n    if(ma[x]<ma[root]) root=x;\n}\nint main()\n{\n    read(n),ma[0]=n;\n    for(int i=1;i<n;++i)\n    {\n        int x,y;\n        read(x),read(y);\n        add(x,y),add(y,x);\n    }\n    dfs(1,0),dfs(root,0);\n    for(int i=1;i<=n;++i) ans+=siz[i]-1;\n    for(int i=head[root];i;i=e[i].nxt) cnt[siz[e[i].to]]++;\n    for(int i=1;i<=n;++i)\n        while(cnt[i]>2)\n            cnt[i]-=2,cnt[i*2]++;\n    s[0]=1;\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=cnt[i];++j)\n            s|=s<<i;\n    for(int i=n/2;i;--i)\n    {\n        if(!s[i]) continue;\n        printf(\"%d %lld\\n\",n-1,ans+(ll)i*(n-i-1));\n        break;\n    }\n    return 0;\n}\n```",
        "postTime": 1596023074,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3563 \u3010[POI2013]POL-Polarization\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e24\u4e2a\u7b54\u6848\u90fd\u6709\u4e00\u4e2a\u7ed3\u8bba\u3002(\u7b2c\u4e00\u4e2a\u5f88\u663e\u7136\uff0c\u7b2c\u4e8c\u4e2a\u6211\u4e5f\u4e0d\u4f1a\u8bc1\u554a)\n\n\u6700\u5c0f\u503c\u5c31\u662f\u4e0b\u4e00\u5c42\u5168\u90e8\u662f\u4e0a\u4e00\u5c42\u7684\u76f8\u53cd\u65b9\u5411\uff0c\u5c31\u662fn-1\u3002\n\n\u6700\u5927\u503c\u5c31\u662f\u9009\u62e9\u91cd\u5fc3\uff0c\u5176\u4ed6\u70b9\u90fd\u548c\u4ed6\u8054\u901a\u3002\n\n\u4e4b\u540e\u8ba9\u5230\u8fbe\u6839\u7684\u4e2a\u6570\u548c\u6839\u5230\u8fbe\u7684\u4e2a\u6570\u5c3d\u91cf\u63a5\u8fd1\u3002\n\n\u90a3\u8fd9\u5c31\u662f\u4e00\u4e2a\u5bb9\u91cf=\u4ef7\u503c\u768401\u80cc\u5305\u95ee\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528bitset\u4f18\u5316\uff0cO(n^2/32)\u3002\n\n\u7531\u4e8e\u4ed6\u7684\u7269\u54c1\u603b\u4f53\u79ef\u548c\u7269\u54c1\u6570\u662f\u540c\u9636\u7684\uff0c\u90fd\u662fn\uff0c\n\n\u6211\u4eec\u5982\u679c\u628a\u76f8\u540c\u4f53\u79ef\u7684\u7269\u54c1\u5f53\u505a\u4e00\u4e2a\u4f53\u79ef\u7269\u54c1\u6709\u591a\u4e2a\uff0c\u90a3\u4e48\u7269\u54c1\u79cd\u7c7b\u6570\u5c31\u662f\u6839\u53f7(n)\u7684\uff0c\n\n\u56e0\u4e3a\u6700\u5dee\u5c31\u662f1,2,..n\u3002\n\n\u8fd9\u65f6\u7528\u591a\u91cd\u80cc\u5305\u4f18\u5316\uff0c\u65f6\u95f4O(n\u6839\u53f7(n))\u3002\n\n\u5982\u679c\u7528\u4e8c\u8fdb\u5236\u4f18\u5316\uff0c\u5f53\u4e00\u4e2a\u79cd\u7c7b\u7684\u7269\u54c1\u6570\u91cf>2\u65f6\u4e0d\u65ad-2\uff0c\u90a3\u4e48\u7269\u54c1\u603b\u6570\u5c31\u662f\u6839\u53f7(n)\u7684\uff0c\n\n\u8fd9\u65f6\u518d\u7528bitset\u4f18\u5316\uff0c\u65f6\u95f4O(n\u6839\u53f7(n)/32)\u3002\n\n\u800c\u4e14\u7531\u4e8estl\u6709bitset\uff0c\u5b9e\u73b0\u5f88\u65b9\u4fbf\u3002\n\n```cpp\n#include<bitset>\n#include<cstdio>\n#include<algorithm>\nusing std::bitset;using std::max;\n\nconst int N=250010;\ntypedef long long ll;\nint n,i,x,y;\nint t[N];\nstruct edge\n{\n    int to,next;\n}l[N<<1];int e;\nvoid add_e(int x,int y)\n{\n    l[++e]=(edge){y,t[x]};t[x]=e;\n}\n\nint fa[N],q[N],head,tail,sz[N];\nint bfs(int x)\n{\n    q[tail=1]=x;fa[x]=0;\n    for(head=1;head<=tail;++head)\n    {\n        x=q[head];sz[x]=1;\n        for(i=t[x];y=l[i].to;i=l[i].next)\n        if(y!=fa[x])\n         fa[q[++tail]=y]=x;\n    }\n    for(i=tail;x=q[i];--i) sz[fa[x]]+=sz[x];\n    int need=tail+1>>1;\n    for(i=tail;x=q[i];--i)\n    if(sz[x]>=need) return x;\n}\n\nbitset<N>a;\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%d\",&n);\n    for(i=1;i<n;++i)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add_e(x,y);add_e(y,x);\n    }\n    int rt=bfs(1);\n    bfs(rt);\n    \n    ll ans=0;\n    for(i=1;i<=n;++i) ans+=sz[i]-1;\n    \n    for(i=1;i<=n;++i) q[i]=0;\n    for(i=t[rt];y=l[i].to;i=l[i].next) ++q[sz[y]];\n\n    for(i=1;i<=n;++i)\n    while(q[i]>2) {q[i]-=2;++q[i<<1];}\n    \n    a[0]=1;\n    for(i=1;i<=n;++i)\n    while(q[i]--) a|=a<<i;\n    \n    for(i=n>>1;!a[i];--i); \n    printf(\"%d %lld\\n\",n-1,ans+(ll)i*(n-1-i)); \n}\n```",
        "postTime": 1490183883,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3563 \u3010[POI2013]POL-Polarization\u3011"
    }
]