[
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 4114](https://www.luogu.org/problemnew/solution/P4114)\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8fb9\u6309\u7167\u8f93\u5165\u987a\u5e8f\u7f16\u53f7\u4e3a $1\\sim n-1$\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c $w_i$ \u9700\u8981\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5206\u4e3a $2$ \u79cd\uff1a\n\n- `CHANGE i t`\uff1a\u5c06\u7b2c $i$ \u6761\u8fb9\u7684\u6743\u503c $w_i$ \u4fee\u6539\u4e3a $t$\n- `QUERY a b`\uff1a\u8be2\u95ee\u4ece\u8282\u70b9 $a$ \u5230 $b$ \u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5927\u503c\u3002\n\n\u8be2\u95ee\u4ee5 `DONE` \u7ed3\u675f\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$n\\le10^5$\uff0c$\\texttt{\u8be2\u95ee\u6b21\u6570}\\le 3\\times 10^5$\uff0c$w_i,t\\le 2^{31}-1$\n\n------\n\n## Solution\n\n\u5bf9\u4e8e\u8fd9\u7c7b\u6811\u7684\u9898\u76ee\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7528**\u6811\u94fe\u5256\u5206**\u7ef4\u62a4\u3002\u800c\u8fd9\u9898\u9700\u8981\u7ef4\u62a4\u7684\u8fb9\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\u653e\u5728\u8f83\u6df1\u7684\u8282\u70b9\u4e0a\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u7ef4\u62a4\u70b9\u7684\u4fe1\u606f\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff1a\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c$\\texttt{LCA}$ \u7684\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u5b83\u4e0a\u65b9\u7684\u8fb9\uff0c\u56e0\u6b64\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u88ab\u67e5\u8be2\u5230\u3002\u5982\u4f55\u89e3\u51b3\uff1f\u6211\u4eec\u6839\u636e\u6811\u5256\u7684\u6027\u8d28\u53ef\u4ee5\u53d1\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\u8bb0 $x$ \u7684 $\\texttt{DFS}$ \u5e8f\u4e3a $d_x$\uff0c\u90a3\u4e48\u6700\u540e\u67e5\u8be2 $u,v$ \u7684\u4fe1\u606f\u65f6\uff08\u8fd9\u91cc\u4ee4 $u$ \u7684\u6df1\u5ea6\u6bd4 $v$ \u6d45\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $u$ \u4e00\u5b9a\u662f $\\texttt{LCA}$\uff0c\u6240\u4ee5\u53ea\u8981\u67e5\u8be2 $d_u+1,d_v$ \u5c31\u53ef\u4ee5\u907f\u5f00 $\\texttt{LCA}$ \u4e86\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n\\log^2 n)$\uff08\u8fd9\u91cc\u8ba4\u4e3a\u64cd\u4f5c\u6b21\u6570\u548c $n$ \u540c\u9636\uff09\n\n------\n\n## Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define lson rt<<1\n#define rson rt<<1|1\ninline char nc() {\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\ntemplate <class Tp> inline void read(register Tp &s) {\n    s=0;\n    register bool neg=0;\n    register char c=nc();\n    for(;c<'0'||c>'9';c=nc()) neg|=(c=='-');\n    for(;c>='0'&&c<='9';s=s*10+(c^48),c=nc());\n    s=(neg?-s:s);\n}\n\nconst int N=1e5+5,M=2e5+5;\nint n,idx,dfn[N],seq[N],U[N],V[N],W[N],val[N],fa[N],dep[N],top[N],sz[N],hvy[N];\nint tot,lnk[N],ter[M],nxt[M],wei[M],seg[N<<2];\n\nvoid add(int u,int v,int w) {\n    ter[++tot]=v,wei[tot]=w,nxt[tot]=lnk[u],lnk[u]=tot;\n}\nvoid dfs1(int u,int f) {\n    fa[u]=f,dep[u]=dep[f]+1,sz[u]=1,hvy[u]=top[u]=0;\n    for(int i=lnk[u];i;i=nxt[i]) {\n        int v=ter[i];\n        if(v==f) continue;\n        val[v]=wei[i];\n        dfs1(v,u);\n        sz[u]+=sz[v];\n        if(sz[hvy[u]]<sz[v]) hvy[u]=v;\n    }\n}\nvoid dfs2(int u,int tp) {\n    dfn[u]=++idx,seq[idx]=u,top[u]=tp;\n    if(!hvy[u]) return;\n    dfs2(hvy[u],tp);\n    for(int i=lnk[u];i;i=nxt[i]) {\n        int v=ter[i];\n        if(v==fa[u]||v==hvy[u]) continue;\n        dfs2(v,v);\n    }\n}\nvoid pushup(int rt) {\n    seg[rt]=std::max(seg[lson],seg[rson]);\n}\nvoid build(int rt,int l,int r) {\n    if(l==r) {\n        seg[rt]=val[seq[l]];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    pushup(rt);\n}\nvoid modify(int x,int rt,int l,int r,int val) {\n    if(l==r) {\n        seg[rt]=val;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid) modify(x,lson,l,mid,val);\n    else modify(x,rson,mid+1,r,val);\n    pushup(rt);\n}\nint query(int x,int y,int rt,int l,int r) {\n    if(x>y) return 0;\n    if(x<=l&&r<=y) return seg[rt];\n    int mid=(l+r)>>1,res=0;\n    if(x<=mid) res=std::max(res,query(x,y,lson,l,mid));\n    if(mid<y) res=std::max(res,query(x,y,rson,mid+1,r));\n    return res;\n}\nint chainQuery(int u,int v) {\n    if(u==v) return 0;\n    int res=0;\n    for(int fu=top[u],fv=top[v];fu^fv;u=fa[fu],fu=top[u]) {\n        if(dep[fu]<dep[fv]) std::swap(u,v),std::swap(fu,fv);\n        res=std::max(res,query(dfn[fu],dfn[u],1,1,n));\n    }\n    if(dep[u]>dep[v]) std::swap(u,v);\n    res=std::max(res,query(dfn[u]+1,dfn[v],1,1,n));\n    return res;\n}\nint main() {\n    read(n);\n    for(int i=1;i<n;++i) {\n        int u,v,w;\n        read(u),read(v),read(w);\n        add(u,v,w),add(v,u,w);\n        U[i]=u,V[i]=v,W[i]=w;\n    }\n    dfs1(1,0),dfs2(1,1),build(1,1,n);\n    while(1) {\n        char c=nc();\n        while(c<'A'||c>'Z') c=nc();\n        if(c=='D') break;\n        int x,y;\n        read(x),read(y);\n        if(c=='C') {\n            int u=U[x],v=V[x];\n            if(fa[v]==u) std::swap(u,v);\n            modify(dfn[u],1,1,n,y);\n        } else {\n            printf(\"%d\\n\",chainQuery(x,y));\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1543931443,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u5199\u8fb9\u6743\u6811\u5256\u7684\u9898\u76ee\uff0c\u5199\u7bc7\u9898\u89e3\u9020(bao)\u798f(fu)\u793e\u4f1a\n\n\u8fd9\u9898\u8981\u641e\u7684\u662f\u5bf9\u8fb9\u6743\u7684\u64cd\u4f5c\uff0c\u4e0d\u662f\u70b9\u6743\uff0c\u600e\u4e48\u641e\uff1f  \u6211\u4eec\u6ce8\u610f\u5230\u4e00\u68f5$n$\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6709$n-1$\u4e2a\u8282\u70b9(\u5e9f\u8bdd)\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709**\u552f\u4e00**\u7684\u7236\u8282\u70b9\u3002  \n\u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u628a$u$\u5230\u5176\u7236\u8282\u70b9$v$\u7684\u8fb9\u6743\uff0c\u8f6c\u79fb\u5230$u$\u4e0a\u5b58\u50a8\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f00\u5f00\u5fc3\u5fc3\u7684\u6811\u5256\u4e86\u3002   \n\u5bf9\u4e8e\u6743\u503c\u7684\u8f6c\u79fb\uff0c\u5728\u6811\u5256\u7684\u7b2c\u4e00\u904ddfs\u65f6\u5c31\u80fd\u641e\u5b9a\u3002 \n\n\u53e6\u5916\uff0c\u8fd9\u91cc\u8981\u6c42$u$\u5230$v$\u8282\u70b9\u4e4b\u95f4\u6240\u6709**\u8fb9**\u7684\u6700\u5927\u6743\u503c\uff0c\u4e0d\u662f\u70b9\u3002  \n\u4e0d\u96be\u53d1\u73b0\uff1a\u5bf9\u4e8e$\\text{lca}(u,v)$\u8bb0\u5f55\u7684\u8fb9\u6743\uff0c\u662f\u4e0d\u5728$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u7684\u3002\u6240\u4ee5\u5728\u8ba1\u7b97\u6700\u5927\u503c\u65f6\uff0c\u81ea\u7136\u4e0d\u80fd\u7b97\u8fdb\u8fd9\u4e2a\u8282\u70b9\u3002   \n\u641e\u6811\u4e0a\u8def\u5f84\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u8fd9\u6837\u505a\u7684\uff1a  \n$u$\u548c$v$\u8282\u70b9\u4e0d\u65ad\u5730\u8df3\u5230\u5176\u91cd\u94fe\u9876\u7aef\uff0c\u76f4\u5230\u4e00\u6761\u91cd\u94fe\u4e3a\u6b62\u3002  \n\n\u6b64\u65f6\uff0c\u82e5\u5047\u8bbe$u$\u6bd4$v$\u7684\u6df1\u5ea6\u5c0f\uff0c\u90a3\u4e48\u663e\u7136$\\text{lca}(u,v)=u$\u3002\u8fd9\u4e2a$u$\u8282\u70b9\u65f6\u4e0d\u80fd\u7b97\u8fdb\u7b54\u6848\u91cc\u7684\uff0c\u8981\u907f\u5f00\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6811\u5256\u7684\u6027\u8d28\uff1a  \n>\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u8fde\u7eed  \n\n\u6240\u4ee5\u5728\u6700\u540e\u4e00\u6b65\u67e5\u8be2\u7684\u65f6\u5019\uff0c$\\text{query}(\\text{id}[u]+1,\\text{id}[v])$\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u6bd4$u$\u7684\u7f16\u53f7\u5927$1$\u7684\u8282\u70b9\uff0c\u4e00\u5b9a\u662f\u5b83\u7684\u513f\u5b50\u3002\u5982\u6b64\u4e00\u6765\uff0c\u5c31\u4e0d\u4f1a\u5c06$\\text{lca}$\u7b97\u5165\u7ed3\u679c\u4e86\u3002 \n\n\u662f\u4e0d\u662f\u5f88\u7b80\u5355\u554a\uff1f  \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<ctime>\n#define N 100003\n#define inf 0x3f3f3f3f\n#define ll long long\n#define ls(u) (u<<1)\n#define rs(u) (u<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\n\nstruct edge{\n    int u,v,w;\n    edge(int u=0,int v=0,int w=0):u(u),v(v),w(w){}\n};\n\nint wl[N],son[N],size[N],top[N],b[N],id[N];\nint a[N<<2],tag[N<<2],depth[N],fa[N],mx[N<<2];\nedge e[N];\nint n,m,r,cnt;\nvector<edge> adj[N];\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(!isdigit(c)) c = getchar();\n    while(isdigit(c)){\n        x = (x<<3)+(x<<1)+c-'0';\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\ninline int max(int a,int b){\n    return a>b?a:b;\n}\n\n//\u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811\n\ninline void push_up(int u){\n    a[u] = a[ls(u)]+a[rs(u)];\n    mx[u] = max(mx[ls(u)],mx[rs(u)]);\n}\n\nvoid build(int u,int l,int r){\n    if(l==r){\n        a[u] = mx[u] = wl[l];\n        return;\n    }\n    build(ls(u),l,mid);\n    build(rs(u),mid+1,r);\n    push_up(u);\n}\n\nvoid update(int u,int l,int r,int q,int k){\n    if(l==r){\n        a[u] = mx[u] = k;\n        return;\n    }\n    if(q<=mid) update(ls(u),l,mid,q,k);\n    else update(rs(u),mid+1,r,q,k);\n    push_up(u);\n}\n\nint qaq(int nl,int nr,int l,int r,int u){\n    int res = -inf;\n    if(nl<=l&&r<=nr) return mx[u];\n    if(nl<=mid) res = max(res,qaq(nl,nr,l,mid,ls(u)));\n    if(nr>mid) res = max(res,qaq(nl,nr,mid+1,r,rs(u)));\n    push_up(u);\n    return res;\n}\n\ninline int qmax(int l,int r){\n    return qaq(l,r,1,n,1);\n}\n\n//\u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811\n\nvoid dfs1(int u,int f){\n    fa[u] = f;\n    depth[u] = depth[f]+1;\n    size[u] = 1;\n    int v,t = -1,l = adj[u].size();\n    for(int i=0;i<l;++i){\n        v = adj[u][i].v;\n        if(v==f){\n            b[u] = adj[u][i].w;\n            continue;\n        }\n        dfs1(v,u);\n        size[u] += size[v];\n        if(size[v]>t){\n            t = size[v];\n            son[u] = v;\n        }\n    }\n}\n\nvoid dfs2(int u,int f){\n    top[u] = f;\n    id[u] = ++cnt;\n    wl[cnt] = b[u];\n    if(son[u]==0) return;\n    dfs2(son[u],f);\n    int v,l = adj[u].size();\n    for(int i=0;i<l;++i){\n        v = adj[u][i].v;\n        if(v==fa[u]||v==son[u]) continue;\n        dfs2(v,v);\n    }\n}\n\nint pathMax(int u,int v){\n    int res = -inf;\n    while(top[u]!=top[v]){\n        if(depth[top[u]]<depth[top[v]])\n            swap(u,v);\n        res = max(res,qmax(id[top[u]],id[u]));\n        u = fa[top[u]];\n    }\n    if(depth[u]>depth[v]) swap(u,v);\n    res = max(res,qmax(id[u]+1,id[v])); //\u4e0a\u9762\u63d0\u5230\u7684\u907f\u5f00lca\u7684\u65b9\u6cd5\n    return res;\n}\n\nint main(){\n    int u,v,w,q;\n    string str;\n    read(n);\n    for(int i=1;i<n;++i){\n        read(u),read(v),read(w);\n        adj[u].push_back(edge(u,v,w));\n        adj[v].push_back(edge(v,u,w));\n        e[i] = edge(u,v,w);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,1,n);\n    string op;\n    while(1){\n        op = \"\";\n        char c = getchar();\n        while(c<'A'||c>'Z') c = getchar();\n        while(c>='A'&&c<='Z'){\n            op.push_back(c);\n            c = getchar();\n        }\n        if(op==\"DONE\") break;\n        read(u),read(v);\n        if(op==\"QUERY\"){\n            if(u==v) putchar('0');\n            else print(pathMax(u,v));\n            putchar('\\n');\n        }else{\n            if(depth[e[u].u]>depth[e[u].v]) u = e[u].u;\n            else u = e[u].v;\n            update(1,1,n,id[u],v);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1545397057,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\uff1a  \n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- ```CHANGE x t``` \u628a\u7b2c $x$ \u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u6210 $t$\n- ```QUERY a b``` \u8f93\u51fa\u4ece $a$ \u5230 $b$ \u7684\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\u3002\u5f53 $a=b$ \u65f6\uff0c\u8f93\u51fa $0$  \n\n### \u9898\u76ee\u89e3\u6cd5\uff1a  \n\u7531\u4e8e\u8fd9\u9053\u9898\u662f\u5728\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u4e0e\u67e5\u8be2\uff0c\u4e14\u6811\u7684\u5f62\u6001\u672a\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u6811\u94fe\u5256\u5206\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002  \n\u7531\u4e8e\u8fd9\u9053\u9898\u7684\u4fee\u6539\u5728\u8fb9\u4e0a\uff0c\u800c\u6811\u94fe\u5256\u5206\u9002\u7528\u4e8e\u5173\u4e8e\u70b9\u7684\u4fee\u6539\uff0c\u6240\u4ee5\u9700\u8981\u6807\u8bb0\u4e0b\u4f20\u3002  \n\u4f46\u662f\u8fd9\u6837\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u67e5\u8be2\u65f6\u82e5\u8bbe $a$ \u548c $b$ \u7684 LCA \u4e3a $l$\uff0c\u5219\u6211\u4eec\u8fdb\u884c\u7edf\u8ba1\u65f6\u4e0d\u80fd\u7edf\u8ba1\u5230 $l$\uff0c\u53cd\u4e4b\u53ef\u4ee5\u88ab\u5982\u4e0b\u6570\u636e\u5361\u6389\u3002  \n```\n4\n1 2 10000\n2 3 1\n2 4 1\nQUERY 3 4\nDONE\n```\n\u6807\u51c6\u8f93\u51fa\u4e3a ```1```\uff0c\u800c\u9519\u8bef\u89e3\u6cd5\u7684\u8f93\u51fa\u4e3a ```10000```\u3002  \n\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6839\u636e\u6811\u94fe\u5256\u5206\u7684\u6027\u8d28\uff0c\u6709\u82e5 $top_a=top_b$\uff0c\u4e14 $b$ \u4e3a $a$ \u7684\u7956\u5148\uff0c\u5219\u8def\u5f84 $[a,b)$ \u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u6295\u5f71\u4e3a $[seg_b+1,seg_a]$\u3002  \n### \u6b63\u786e\u4ee3\u7801\uff1a  \n~~\u71c3\u9e45\u6211\u50bbX\u4e86\u8fd8\u5f00\u4e86\u4e00\u5806\u8f85\u52a9\u6570\u7ec4\uff0c\u53c8\u628a\u4e0a\u884c\u4e0b\u884c\u5206\u5f00\u8003\u8651\uff0c\u6240\u4ee5\u4ee3\u7801\u57fa\u672c\u4e0d\u53ef\u8bfb\u3002~~  \n```cpp\n#include<bits/stdc++.h>  \n#define mp(x,y) make_pair(x,y)\nusing namespace std;\ninline int read(){\n\tint res=0;\n\tbool zf=0;\n\tchar c;\n\twhile(((c=getchar())<'0'||c>'9')&&c!='-');\n\tif(c=='-')zf=1;\n\telse res=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')res=(res<<3)+(res<<1)+c-'0';\n\treturn (zf?-res:res);\n}\nconst int maxn=100000+5;\ntypedef pair<pair<int,int>,int>P;\nvector<P>G[maxn];\nint n;\nint dep[maxn],fa[maxn],size[maxn],son[maxn],wh[maxn],top[maxn],seg[maxn],ysb[maxn],cnt;\nint dta[maxn],Max[maxn<<2];\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\tMax[k]=dta[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tMax[k]=max(Max[k<<1],Max[k<<1|1]);\n\treturn;\n}\nvoid modify(int k,int l,int r,int pos,int val){\n\tif(l>pos||r<pos){\n\t\treturn;\n\t}\n\tif(l==r){\n\t\tMax[k]=val;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tmodify(k<<1,l,mid,pos,val);\n\tmodify(k<<1|1,mid+1,r,pos,val);\n\tMax[k]=max(Max[k<<1],Max[k<<1|1]);\n\treturn;\n}\nint query(int k,int l,int r,int x,int y){\n\tif(l>y||r<x)return 0;\n\tif(l>=x&&r<=y){\n\t\treturn Max[k];\n\t}\n\tint mid=(l+r)>>1;\n\treturn max(query(k<<1,l,mid,x,y),query(k<<1|1,mid+1,r,x,y));\n}\nvoid dfs1(int now){\n\tsize[now]=1;\n\tfor(register int i=0;i<G[now].size();++i){\n\t\tint v=G[now][i].second;\n\t\tif(dep[v])continue;\n\t\tdep[v]=dep[now]+1;\n\t\tfa[v]=now;\n\t\tysb[G[now][i].first.second]=v;\n\t\tdfs1(v);\n\t\tsize[now]+=size[v];\n\t\tif(size[v]>size[son[now]]){\n\t\t\tson[now]=v;\n\t\t\twh[now]=i;\n\t\t}\n\t} \n\treturn;\n}\nvoid dfs2(int now,int val=-1){\n\tseg[now]=(++cnt);\n\tif(~val){\n\t\tdta[seg[now]]=val;\n\t}\n\tif(!son[now])return;\n\tint v=son[now];\n\ttop[v]=top[now];\n\tdfs2(v,G[now][wh[now]].first.first);\n\tfor(register int i=0;i<G[now].size();++i){\n\t\tint v=G[now][i].second;\n\t\tif(v==fa[now]||v==son[now])continue;\n\t\tdfs2(top[v]=v,G[now][i].first.first);\n\t}\n\treturn;\n}\ninline int LCA(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]){\n\t\t\tswap(x,y);\n\t\t}\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]){\n\t\tswap(x,y);\n\t}\n\treturn x;\n}\ninline int ask(int x,int y){\n\tint ans=0;\n\twhile(top[x]!=top[y]){\n\t\tans=max(ans,query(1,1,n,seg[top[x]],seg[x]));\n\t\tx=fa[top[x]]; \n\t}\n\tans=max(ans,query(1,1,n,seg[y]+1,seg[x]));\n\treturn ans;\n}\nsigned main(){\n\tn=read();\n\tfor(register int i=1;i<n;++i){\n\t\tint x=read(),y=read(),z=read();\n\t\tG[x].push_back(mp(mp(z,i),y)),\n\t\tG[y].push_back(mp(mp(z,i),x));\n\t}\n\tdfs1(dep[1]=1);\n\tdfs2(top[1]=1);\n\tbuild(1,1,n);\n\tstring s;cin>>s;\n\twhile(s!=\"DONE\"){\n\t\tif(s==\"CHANGE\"){\n\t\t\tint pos=read(),val=read();\n\t\t\tmodify(1,1,n,seg[ysb[pos]],val);\n\t\t}\n\t\telse{\n\t\t\tint x=read(),y=read();\n\t\t\tif(x==y){\n\t\t\t\tputs(\"0\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint lca=LCA(x,y);\n\t\t\t\tprintf(\"%d\\n\",max(ask(x,lca),ask(y,lca)));\n\t\t\t}\n\t\t}\n\t\tcin>>s;\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u60a8\u6ca1\u6709\u770b\u61c2\u8fd9\u7bc7\u9898\u89e3\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u95ee\u6211\uff0c\u6211\u5c06\u4f1a\u56de\u7b54\u60a8\u7684\u95ee\u9898\u5e76\u4e14\u4fee\u6539\u8fd9\u7bc7\u9898\u89e3\uff0c\u4f7f\u5b83\u53d8\u5f97\u66f4\u52a0\u901a\u4fd7\u6613\u61c2\uff0c\u670d\u52a1\u66f4\u591a\u7684 $\\text{OIer}$\u3002  \n\u5982\u679c\u60a8\u770b\u61c2\u4e86\u8fd9\u7bc7\u9898\u89e3\uff0c\u53ef\u4ee5\u70b9\u4e2a\u8d5e\uff0c\u4f7f\u8fd9\u7bc7\u9898\u89e3\u7684\u6392\u540d\u4e0a\u5347\uff0c\u670d\u52a1\u66f4\u591a\u7684 $\\text{OIer}$\u3002  ",
        "postTime": 1600773148,
        "uid": 183609,
        "name": "hhoppitree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4114\u3010Qtree1\u3011"
    },
    {
        "content": "#\n\u672c\u7bc7\u9898\u89e3\u4e0d\u662f\u6811\u94fe\u5256\u5206\n#\n\u6240\u6709\u7684\u6811\u5256\u90fd\u53ef\u4ee5\u7528lct\u505a\uff0c\u5e76\u4e14\u66f4\u65b9\u4fbf\uff0c\u5feb\u6377\uff01\n\u5f88\u591a\u64cd\u4f5c\u6ca1\u6709\u7528\u5230\uff0c \u56e0\u4e3a\u8fd9\u4e2a\u6811\u662f\u56fa\u5b9a\u5f62\u6001\u7684\uff0c \u81ea\u5df1\u770b\u4ee3\u7801\u5427\uff01\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\ninline int read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n\twhile(c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = getchar();}\n\treturn x * f;\n}\nconst int N = 200005;\nint ch[N][2], fa[N], rev[N], val[N], v[N];\ninline bool chk(int x) {return ch[fa[x]][1] == x;}\ninline bool get(int x) {return ch[fa[x]][1] == x || ch[fa[x]][0] == x;}\ninline void Rev(int x) {rev[x] ^= 1; swap(ch[x][0], ch[x][1]);}\ninline void pushup(int x) {val[x] = max(max(val[ch[x][0]], val[ch[x][1]]), v[x]);}\ninline void pushdown(int x) {\n\tif(rev[x]) {\n\t\tif(ch[x][0]) Rev(ch[x][0]);\n\t\tif(ch[x][1]) Rev(ch[x][1]);\n\t\trev[x] = 0;\n\t}\n}\ninline void rotate(int x) {\n\tint y = fa[x], z = fa[y], k = chk(x), v = ch[x][k ^ 1];\n\tif(get(y)) ch[z][chk(y)] = x; ch[y][k] = v; ch[x][k ^ 1] = y;\n\tif(v) fa[v] = y; fa[x] = z; fa[y] = x;\n\tpushup(y);pushup(x);\n}\nint hep[N];\ninline void splay(int x) {\n\tint top = 0, y = x;\n\thep[++ top] = y;\n\twhile(get(y)) hep[++ top] = y = fa[y];\n\twhile(top) pushdown(hep[top --]);\n\twhile(get(x)) {\n\t\ty = fa[x];\n\t\tif(get(y)) chk(x) == chk(y) ? rotate(y) : rotate(x);\n\t\trotate(x); \n\t}\n\tpushup(x);\n}\ninline void access(int x) {for(int y = 0; x; x = fa[y = x]) splay(x), ch[x][1] = y, pushup(x);}\ninline void makeroot(int x) {access(x); splay(x); Rev(x);}\ninline int findroot(int x) {access(x); splay(x); while(ch[x][0]) pushdown(x), x = ch[x][0]; return x;}\ninline void split(int x, int y) {makeroot(x); access(y); splay(y);}\ninline void link(int x, int y) {makeroot(x); if(findroot(y) != x) fa[x] = y;}\ninline void cut(int x, int y) {split(x, y); if(findroot(y) == x && fa[x] == y && !ch[x][1]) fa[x] = ch[y][0] = 0, pushup(y);}\nint n;\nchar a[10];\nint main() {\n\tn = read();\n\tfor(int i = 1; i < n; i ++) {\n\t\tint x = read(), y = read(), z = read();\n\t\tv[i + n] = z;\n\t\tlink(x, i + n); link(i + n, y); \n\t}\n\twhile(true) {\n\t\tscanf(\"%s\", a); \n\t\tif(a[0] == 'D') break;\n\t\tif(a[0] == 'Q') {int x = read(), y = read();split(x, y);printf(\"%d\\n\", val[y]);}\n\t\tif(a[0] == 'C') {int x = read() + n, y = read(); access(x); splay(x); v[x] = y;}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571987377,
        "uid": 122822,
        "name": "Merci",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u8bfb\u5b8c\u9898\u76ee\u4e4b\u540e\u2026\u2026\u8bf6\uff0c\u8fd9\u4e0d\u662f\u6811\u94fe\u5256\u5206\u88f8\u9898\u4e48\uff1f\uff1f\uff01\uff01\n\n\u7136\u540e\u2026\u2026\u4ee3\u7801\u5199\u5230\u4e00\u534a\u5ffd\u7136\u53d1\u73b0\u662f\u8fb9\u6743\u2026\u2026\u800c\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u662f\u70b9\u6743\uff0c\u5982\u679c\u662f\u70b9\u6743\u7684\u8bdd\uff0c\u90a3\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2a\u88f8\u9898\u4e86\u5427\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u70b9\u8fde\u5411\u5b83\u7236\u4eb2\u7684\u8fb9\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\uff0c\u5373\u4e00\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u4eb2\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5b83\u7684\u70b9\u6743\u6765\u4ee3\u66ff\u5b83\u4e0e\u5b83\u7236\u4eb2\u4e4b\u95f4\u7684\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u7136\u540e\uff0c\u5c31\u6210\u4e86\u4e00\u4e2a\u88f8\u9898\u4e86\u2026\u2026\n\n\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u65f6\u5019\u4e0d\u8981\u628aLCA\u7b97\u4e0a\uff0c\u56e0\u4e3a\u5b83\u7684\u70b9\u6743\u4ee3\u8868\u5b83\u4e0e\u5b83\u7236\u4eb2\u7684\u8fb9\u6743\uff0c\u4e0d\u5728\u67e5\u8be2\u7684\u8def\u5f84\u4e0a\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#define maxn 100007\n#define ll long long\n#define ls rt<<1\n#define rs rt<<1|1\nusing namespace std;\nint n,head[maxn],d[maxn],size[maxn],son[maxn],a[maxn],lazy[maxn<<2];\nint p[maxn],id[maxn],top[maxn],num,cnt,fa[maxn],maxx[maxn<<2];\nchar s[10];\ninline int qread() {\n  char c=getchar();int num=0,f=1;\n  for(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n  for(;isdigit(c);c=getchar()) num=num*10+c-'0';\n  return num*f;\n}\nstruct node {\n  int v,w,nxt;\n}e[maxn<<1];\ninline void ct(int u, int v, int w) {\n  e[++num].v=v;\n  e[num].w=w;\n  e[num].nxt=head[u];\n  head[u]=num;\n}\ninline void pushup(int rt) {\n  maxx[rt]=max(maxx[ls],maxx[rs]);\n}\ninline void pushdown(int rt) {\n  if(lazy[rt]>=0) {\n    maxx[ls]=maxx[rs]=lazy[ls]=lazy[rs]=lazy[rt];\n    lazy[rt]=-1;\n  }\n}\nvoid build(int rt, int l, int r) {\n  lazy[rt]=-1;\n  if(l==r) {\n    maxx[rt]=a[l];\n    return;\n  }\n  int mid=(l+r)>>1;\n  build(ls,l,mid);\n  build(rs,mid+1,r);\n  pushup(rt);\n}\nvoid modify(int rt, int l, int r, int L, int R, int val) {\n  if(L>r||R<l) return;\n  if(L<=l&&r<=R) {\n    maxx[rt]=lazy[rt]=val;\n    return;\n  }\n  pushdown(rt);\n  int mid=(l+r)>>1;\n  modify(ls,l,mid,L,R,val),modify(rs,mid+1,r,L,R,val);\n  pushup(rt);\n}\nint cmax(int rt, int l, int r, int L, int R) {\n  if(L<=l&&r<=R) return maxx[rt];\n  int ans=0;\n  int mid=(l+r)>>1;\n  pushdown(rt);\n  if(L<=mid) ans=max(ans,cmax(ls,l,mid,L,R));\n  if(R>mid) ans=max(ans,cmax(rs,mid+1,r,L,R));\n  return ans;\n}\nvoid dfs1(int u, int f) {\n  size[u]=1;\n  for(int i=head[u];i;i=e[i].nxt) {\n    int v=e[i].v;\n    if(v!=f) {\n      d[v]=d[u]+1;\n      fa[v]=u;\n      p[v]=e[i].w;             //\u6362\u8fb9\u6743\u4e3a\u70b9\u6743\u3002\n      dfs1(v,u);\n      size[u]+=size[v];\n      if(size[v]>size[son[u]]) son[u]=v;\n    }\n  }\n}\nvoid dfs2(int u, int t) {\n  id[u]=++cnt;\n  top[u]=t;\n  a[cnt]=p[u];\n  if(son[u]) dfs2(son[u],t);\n  for(int i=head[u];i;i=e[i].nxt) {\n    int v=e[i].v;\n    if(v!=fa[u]&&v!=son[u]) dfs2(v,v);\n  }\n}\nint query(int x, int y) {\n  int ans=0,fx=top[x],fy=top[y];\n  while(fx!=fy) {\n    if(d[fx]<d[fy]) swap(x,y),swap(fx,fy);\n    ans=max(ans,cmax(1,1,n,id[fx],id[x]));\n    x=fa[fx],fx=top[x];\n  }\n  if(id[x]>id[y]) swap(x,y);\n  ans=max(ans,cmax(1,1,n,id[x]+1,id[y]));\n  return ans;\n}\nint main() {\n  n=qread();\n  for(int i=1,u,v,w;i<n;++i) {\n    u=qread(),v=qread(),w=qread();\n    ct(u,v,w);ct(v,u,w);\n  }\n  dfs1(1,0),dfs2(1,1);build(1,1,n);\n  while(1) {\n    scanf(\"%s\",s);\n    if(s[0]=='D') break;\n    int x=qread(),y=qread();\n    if(s[0]=='Q') {\n      if(x==y) printf(\"0\\n\");\n      else printf(\"%d\\n\",query(x,y));\n\t}\n\tif(s[0]=='C') {\n\t  x=d[e[x*2-1].v]<d[e[x<<1].v]?e[x<<1].v:e[x*2-1].v;\n      modify(1,1,n,id[x],id[x],y);\n\t}\n  }\n  return 0;\n}\n```\n\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u5bf9\u5927\u5bb6\u80fd\u6709\u6240\u5e2e\u52a9\u3002",
        "postTime": 1546004610,
        "uid": 68622,
        "name": "King\u4e28\u5e1d\u5fa1\u5a01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "~~\u8fd9\u4e0d\u5c31\u662f\u4e2a\u6811\u5256\u88f8\u9898\u4e48~~\n\n\u6811\u5256\u4e00\u4e0b\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\n\n\u6bcf\u6b21\u662f\u5355\u70b9\u4fee\u6539\n\n\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728\u4e8e\u8fb9\u6743\u600e\u4e48\u5904\u7406\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u4e24\u70b9\u8fde\u7684\u8fb9\u4e4b\u95f4\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u8fb9\u7684\u6743\u503c\u8d4b\u7ed9\u5b83\uff0c\u5bf9\u4e8e\u539f\u6811\u4e0a\u7684\u8282\u70b9\u4e3a\u4e86\u4e0d\u5f71\u54cd\u8d4b\u6210-inf\n\n\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define mid ((l+r)>>1)\n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\n#define ls k<<1\n#define rs k<<1|1\nusing namespace std;\nconst int N=100005,inf=1e9;\nint n,cnt,tot;\nint head[N<<1],siz[N<<1],top[N<<1],fa[N<<1],dep[N<<1],son[N<<1],id[N<<1],vl[N<<1],val[N<<1];\nint tr[N<<3];\nstruct node{\n\tint to,nxt;\n}e[N<<2];\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\ninline void add(int from,int to){\n\te[++cnt]=(node){to,head[from]};\n\thead[from]=cnt;\n}\nvoid dfs1(int x,int f,int deep){\n\tfa[x]=f;siz[x]=1;dep[x]=deep;\n\tint maxson=-1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(e[i].to!=f){\n\t\t\tdfs1(e[i].to,x,deep+1);\n\t\t\tsiz[x]+=siz[e[i].to];\n\t\t\tif(siz[e[i].to]>maxson)son[x]=e[i].to,maxson=siz[e[i].to];\n\t\t}\n}\nvoid dfs2(int x,int topf){\n\tid[x]=++tot;val[tot]=vl[x];top[x]=topf;\n\tif(!son[x])return ;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tif(e[i].to==fa[x]||e[i].to==son[x])continue;\n\t\tdfs2(e[i].to,e[i].to);\n\t}\n}\ninline void update(int k){\n\ttr[k]=max(tr[ls],tr[rs]);\n}\nvoid change(int k,int l,int r,int x,int y){\n\tif(l==r&&l==x){\n\t\ttr[k]=y;\n\t\treturn ;\n\t}\n\tif(x<=mid)change(lson,x,y);\n\telse change(rson,x,y);\n\tupdate(k);\n}\nint ask(int k,int l,int r,int x,int y){\n\tif(l==x&&y==r){\n\t\treturn tr[k];\n\t}\n\tif(y<=mid)return ask(lson,x,y);\n\telse if(x>mid)return ask(rson,x,y);\n\telse return max(ask(lson,x,mid),ask(rson,mid+1,y));\n}\n\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\ttr[k]=val[l];\n\t\treturn ;\n\t}\n\tbuild(lson);build(rson);\n\tupdate(k);\n}\nint query(int x,int y){\n\tif(x==y)return 0;\n\tint ans=-inf;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])x^=y^=x^=y;\n\t\tans=max(ask(1,1,(n<<1)-1,id[top[x]],id[x]),ans);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])x^=y^=x^=y;\n\tans=max(ans,ask(1,1,(n<<1)-1,id[y],id[x]));\n\treturn ans;\n}\nint main(){\n\tn=read();\n\tint x,y;\n\tfor(int i=1;i<n;++i){\n\t\tx=read();y=read();\n\t\tadd(x,i+n);add(i+n,x);\n\t\tadd(y,i+n);add(i+n,y);\n\t\tvl[i+n]=read();vl[x]=vl[y]=-inf;\n\t}\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tbuild(1,1,(n<<1)-1);\n\tchar c[10];\n\twhile(1){\n\t\tscanf(\"%s\",c+1);\n\t\tif(c[1]=='D')return 0;\n\t\tx=read();y=read();\n\t\tif(c[1]=='Q')printf(\"%d\\n\",query(x,y));\n\t\telse change(1,1,(n<<1)-1,id[x+n],y);\n\t}\n}\n```\n",
        "postTime": 1570609347,
        "uid": 151768,
        "name": "\u6d41\u901d\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "### \u9898\u76ee\n[P4114 Qtree1](https://www.luogu.com.cn/problem/P4114)\n### \u601d\u8def\n\u6811\u94fe\u5256\u5206\u3002\u8fd9\u9898\u662f\u8fb9\u6743\u3002\u56e0\u4e3a\u7ed9\u7684\u662f\u4e00\u68f5\u6811\uff0c$dfs$ \u4e00\u904d\uff0c\u6bcf\u4e2a\u70b9\u4e4b\u88ab\u8bbf\u95ee\u4e00\u904d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f53\u6210\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u6700\u591a\u4e3a $1$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6761\u8fb9\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u6743\u7ed9\u8fd9\u6761\u8fb9\u94fe\u63a5\u7684\u4e24\u4e2a\u70b9\u4e2d $dfs$ \u5e8f\u5927\u7684\u90a3\u4e2a\u70b9\u3002\n\n\u5728\u8df3\u94fe\u7684\u65f6\u5019\u8981\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u70b9 $x,y$ \u5728\u4e00\u6761\u94fe\u4e0a\u4e86,\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2 $[dfn[x]+1,dfn[y]]$ \u8fd9\u4e2a\u533a\u95f4\u3002\u56e0\u4e3a $dfn[x]$ \u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u4e3a\u4e0a\u9762\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n### Code\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#define MAXN 100001\n\ninline void read(int &T) {\n\tint x=0;bool f=0;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=!f;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\tT=f?-x:x;\n}\n\nint n,dfn[MAXN],pre[MAXN],w[MAXN],size[MAXN];\nint u[MAXN],v[MAXN];\n\nint max(int a,int b) {return a>b?a:b;}\n\nnamespace Seg {\n\t#define lson now<<1\n\t#define rson now<<1|1\n\tstruct Node {\n\t\tint l,r,w;\n\t}tree[MAXN<<2];\n\tvoid build(int l,int r,int now) {\n\t\ttree[now].l=l,tree[now].r=r;\n\t\tif(tree[now].l==tree[now].r) {\n\t\t\ttree[now].w=w[pre[l]];return;\n\t\t}\n\t\tint mid=(tree[now].l+tree[now].r)>>1;\n\t\tbuild(l,mid,lson),build(mid+1,r,rson);\n\t\ttree[now].w=max(tree[lson].w,tree[rson].w);\n\t}\n\tvoid update(int x,int k,int now) {\n\t\tif(tree[now].l==tree[now].r) {\n\t\t\ttree[now].w=k;return;\n\t\t}\n\t\tint mid=(tree[now].l+tree[now].r)>>1;\n\t\tif(x<=mid) update(x,k,lson);\n\t\telse update(x,k,rson);\n\t\ttree[now].w=max(tree[lson].w,tree[rson].w);\n\t}\n\tint query(int x,int y,int now) {\n\t\tif(tree[now].l>=x&&tree[now].r<=y) return tree[now].w;\n\t\tint mid=(tree[now].l+tree[now].r)>>1,ans=0;\n\t\tif(x<=mid) ans=max(ans,query(x,y,lson));\n\t\tif(y>mid) ans=max(ans,query(x,y,rson));\n\t\treturn ans;\n\t}\n}\n\nnamespace Cut {\n\tint cnt,pthn,head[MAXN],dep[MAXN];\n\tint fa[MAXN],son[MAXN],top[MAXN];\n\tstruct Edge {\n\t\tint next,to,w;\n\t}pth[MAXN<<1];\n\tvoid add(int from,int to,int w) {\n\t\tpth[++pthn].to=to,pth[pthn].next=head[from];\n\t\tpth[pthn].w=w,head[from]=pthn;\n\t}\n\tvoid dfs1(int u,int father) {\n\t\tfa[u]=father,dep[u]=dep[father]+1,size[u]=1;\n\t\tfor(int i=head[u];i;i=pth[i].next) {\n\t\t\tint x=pth[i].to;\n\t\t\tif(x!=father) {\n\t\t\t\tw[x]=pth[i].w,dfs1(x,u),size[u]+=size[x];\n\t\t\t\tif(size[son[u]]<size[x]) son[u]=x;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int u,int tp) {\n\t\ttop[u]=tp,dfn[u]=++cnt,pre[cnt]=u;\n\t\tif(son[u]) dfs2(son[u],tp);\n\t\tfor(int i=head[u];i;i=pth[i].next) {\n\t\t\tint x=pth[i].to;\n\t\t\tif(x!=fa[u]&&x!=son[u]) dfs2(x,x);\n\t\t}\n\t}\n\tint ask(int x,int y) {\n\t\tint ans=0;\n\t\twhile(top[x]!=top[y]) {\n\t\t\tif(dep[top[x]]<dep[top[y]]) std::swap(x,y);\n\t\t\tans=max(ans,Seg::query(dfn[top[x]],dfn[x],1));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y]) std::swap(x,y);\n\t\tans=max(ans,Seg::query(dfn[x]+1,dfn[y],1));\n\t\treturn ans;\n\t}\n}\n\nint main() {\n\tread(n);\n\tfor(int i=1,w;i<n;++i) {\n\t\tread(u[i]),read(v[i]),read(w);\n\t\tCut::add(u[i],v[i],w),Cut::add(v[i],u[i],w);\n\t}\n\tCut::dfs1(1,1),Cut::dfs2(1,1),Seg::build(1,n,1);\n\tstd::string opt;\n\twhile(1) {\n\t\tstd::cin>>opt;int x,y;\n\t\tif(opt==\"DONE\") break;\n\t\tread(x),read(y);\n\t\tif(opt==\"QUERY\") {\n\t\t\tif(x==y) puts(\"0\");\n\t\t\telse printf(\"%d\\n\",Cut::ask(x,y));\n\t\t}else Seg::update(max(dfn[u[x]],dfn[v[x]]),y,1);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1588983855,
        "uid": 142110,
        "name": "yu__xuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u672c\u9053\u9898\u53ef\u4ee5\u7528\u6811\u5256\u6765\u505a\u3002\n\n\u6211\u4eec\u5c06\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743\u3002\u5177\u4f53\u505a\u6cd5\u4e3a\u628a\u8fb9\u6743\u8d4b\u7ed9\u8fd9\u6761\u8fb9\u7684\u513f\u5b50\u8282\u70b9\uff08\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\uff09\u3002\n\n\u5bf9\u4e8echange\u64cd\u4f5c\uff0c\u6211\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u6761\u8fb9\uff0c\u7136\u540e\u7ed9\u513f\u5b50\u8282\u70b9\u53d8\u4e00\u4e0b\u503c\u5373\u53ef\u3002\n\n\u5bf9\u4e8equery\u64cd\u4f5c\uff0c\u6c42max\u5373\u53ef\u3002\n\n\u64cd\u4f5c\u65f6\uff0c\u6700\u540e\u8981dfn[y] + 1\uff1b\n```cpp\n#include <iostream>\n#include <cstdio>\n#define mid ((p -> l + p -> r) >> 1)\nconst int N = 300100;\nint n , cnt;\nint u[N] , v[N] , w[N] , dfn[N] , id[N] , head[N] , dep[N] , fa[N] , size[N] , hs[N] , top[N] , a[N];\nchar s[10];\nstruct Edge {int to , nxt , dis;}e[N << 1];\nvoid add(int from,int to,int dis)\n{\n\te[++cnt] = (Edge) {to , head[from] , dis};\n\thead[from] = cnt;\n}\nvoid get_tree(int now)\n{\n\tsize[now] = 1;\n\tfor(int i = head[now];i;i = e[i].nxt)\n\t{\n\t\tint to = e[i].to;\n\t\tif(dep[to])\tcontinue;\n\t\tdep[to] = dep[now] + 1;\n\t\tfa[to] = now;\n\t\ta[to] = e[i].dis;\n\t\tget_tree(to);\n\t\tsize[now] += size[to];\n\t\tif(size[to] > size[hs[now]])\ths[now] = to;\n\t}\n}\nvoid dfs(int now,int topfa)\n{\n\ttop[now] = topfa;\n\tdfn[now] = ++cnt;\n\tid[cnt] = now;\n\tif(hs[now])\tdfs(hs[now],topfa);\n\tfor(int i = head[now];i;i = e[i].nxt)\n\t{\n\t\tint to = e[i].to;\n\t\tif(to == fa[now] || to == hs[now])\tcontinue;\n\t\tdfs(to,to);\n\t}\n}\nstruct LOL\n{\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r, maxn;\n\t\tnode (int l , int r , int maxn) : l(l) , r(r) , maxn(maxn){ls = rs = NULL;}\n\t\tinline int len() {return r - l + 1;}\n\t\tinline void push_up() {maxn = std::max(ls -> maxn , rs -> maxn);}\n\t}*root;\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new node(l,r,0);\n\t\tif(l == r)\treturn (void)(p -> maxn = a[id[l]]);\n\t\tbuild(p -> ls,l,mid);\n\t\tbuild(p -> rs,mid+1,r);\n\t\tp -> push_up();\n\t}\n\tvoid chenge(node *p,int x,int k)\n\t{\n\t\tif(p -> l == p -> r)\treturn (void)(p -> maxn = k);\n\t\tif(x <= mid) chenge(p -> ls,x,k);\n\t\telse chenge(p -> rs,x,k);\n\t\tp -> push_up();\n\t}\n\tint query(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y)\treturn p -> maxn;\n\t\tint res = 0;\n\t\tif(x <= mid)\tres = std::max(res,query(p -> ls,x,y));\n\t\tif(y > mid)\t\tres = std::max(res,query(p -> rs,x,y));\n\t\treturn res;\n\t}\n\tinline int sec_max(int x,int y)\n\t{\n\t\tint res = 0;\n\t\twhile(top[x] != top[y])\n\t\t{\n\t\t\tif(dep[top[x]] < dep[top[y]])\tstd::swap(x,y);\n\t\t\tres = std::max(res,query(root,dfn[top[x]],dfn[x]));\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y])\tstd::swap(x,y);\n\t\tif(dfn[y] < dfn[x]) res =std::max(res,query(root,dfn[y] + 1,dfn[x]));\n\t\treturn res;\n\t}\n}cf;\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i < n;i ++)\n\t{\n\t\tscanf(\"%d%d%d\",&u[i],&v[i],&w[i]);\n\t\tadd(u[i],v[i],w[i]);\n\t\tadd(v[i],u[i],w[i]);\n\t}\n\tcnt = 0 , dep[1] = 1;\n\tget_tree(1);\n\tdfs(1,1);\n\tcf.build(cf.root,1,n);\n\twhile(1)\n\t{\n\t\tint x , y;\n\t\tscanf(\"%s\",s);\n\t\tif(s[0] == 'D')\tbreak;\n\t\tif(s[0] == 'Q')\tscanf(\"%d%d\",&x,&y) , printf(\"%d\\n\",cf.sec_max(x,y));\n\t\telse \n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(fa[u[x]] == v[x])\tcf.chenge(cf.root,dfn[u[x]],y);\n\t\t\telse cf.chenge(cf.root,dfn[v[x]],y);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568379559,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "## \u9898\u76ee\n\u7ed9\u5b9a\u4e00\u68f5n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- CHANGE i ti \u628a\u7b2ci\u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u6210ti\n\n- QUERY a b \u8f93\u51fa\u4ecea\u5230b\u7684\u8def\u5f84\u4e2d\u6700\u5927\u7684\u8fb9\u6743\uff0c\u5f53a=b\u7684\u65f6\u5019\uff0c\u8f93\u51fa0\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n- \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2an\uff0c\u8868\u793a\u8282\u70b9\u4e2a\u6570\n\n- \u7b2c\u4e8c\u884c\u5230\u7b2cn\u884c\u6bcf\u884c\u8f93\u5165\u4e09\u4e2a\u6570\uff0cui\uff0cvi\uff0cwi\uff0c\u5206\u522b\u8868\u793a ui\uff0cvi\u6709\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u662fwi\n\n- \u7b2cn+1\u884c\u5f00\u59cb\uff0c\u4e00\u5171\u6709\u4e0d\u5b9a\u6570\u91cf\u884c\uff0c\u6bcf\u4e00\u884c\u5206\u522b\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\n\n- CHANGE\uff0cQUERY\u540c\u9898\u610f\u6240\u8ff0\n\n- DONE\u8868\u793a\u8f93\u5165\u7ed3\u675f\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n- \u5bf9\u4e8e\u6bcf\u4e2aQUERY\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793aa b\u4e4b\u95f4\u8fb9\u6743\u6700\u5927\u503c\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a \n```cpp\n3\n1 2 1\n2 3 2\nQUERY 1 2\nCHANGE 1 3\nQUERY 1 2\nDONE\n```\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \n```cpp\n1\n3\n```\n\n[\u63d0\u4ea4\u5730\u5740](https://www.luogu.org/problemnew/show/P4114)\n\n## \u9898\u89e3\n- emmm\u8fd9\u9898\u4e00\u770b\u5c31\u662f\u6811\u94fe\u5256\u5206qwq\n- \u4f46\u6211\u4eec\u5e73\u5e38\u90fd\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u70b9\u6743\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u70b9\u8fb9\u6743\u8f6c\u5230\u6df1\u5ea6\u8f83\u6df1\u7684\u70b9\u7684\u70b9\u6743\u4e0a\u3002\n- \u6ce8\u610f\u4e24\u70b9\u4e4b\u95f4\u7684$lca$\u4e0d\u80fd\u88ab\u7b97\u5165\u7b54\u6848\n- \u5173\u4e8e\u5982\u4f55\u907f\u5f00$lca$\u6211\u4eec\u5728\u8be2\u95ee\u65f6\u5047\u8bbe$x,y$\u4e3a\u4e24\u70b9\uff0c\u4e14\u5728\u540c\u4e00\u91cd\u94fe\u4e0a\uff0c\u8bbe$dep[x]<dep[y]$\uff0c\u7b54\u6848\u67e5\u8be2\u533a\u95f4\u4e3a$[idx[x]+1,y]$\uff0c\u56e0\u4e3a$idx[x]$\u4e3a$lca$\uff0c\u4e14\u91cd\u94fe\u5185\u6807\u53f7\u8fde\u7eed\u3002\uff08$dep$\u8bb0\u5f55\u6df1\u5ea6\uff0c$idx$\u8bb0\u5f55\u91cd\u65b0\u6807\u53f7\u540e\u6bcf\u4e2a\u8282\u70b9\u7684\u6807\u53f7\uff09\n\n## code\n```cpp\n#include <map> \n#include <set> \n#include <list> \n#include <cmath> \n#include <deque> \n#include <stack> \n#include <queue> \n#include <cstdio> \n#include <cctype> \n#include <vector> \n#include <string> \n#include <cstring> \n#include <iomanip> \n#include <complex> \n#include <iostream> \n#include <algorithm> \n#include <functional> \nusing namespace std; \nconst int maxn = 100000 + 100; \n\ntemplate <class T> inline void read(T &s) { \n\ts = 0; T w = 1, ch = getchar(); \n\twhile (!isdigit(ch)) { if (ch == '-') w = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { s = (s << 1) + (s << 3) + (ch ^ 48); ch = getchar(); }\n\ts *= w; \n}\n\nint n, tot, cnt; \nint lin[maxn], tree[maxn * 4], from[maxn], to[maxn]; \nint siz[maxn], fat[maxn], dep[maxn], val[maxn]; \nint son[maxn], idx[maxn], top[maxn], pre[maxn]; \nstruct edge {\n\tint next, to, dis; \n} e[maxn << 1]; \ninline void add(int from, int to, int dis) {\n\te[++tot].to = to; \n\te[tot].dis = dis; \n\te[tot].next = lin[from]; \n\tlin[from] = tot; \n}\n\nvoid dfs1(int u, int fa, int depth) {\n\tsiz[u] = 1; \n\tfat[u] = fa; \n\tdep[u] = depth; \n\tint maxson = -1; \n\tfor (int i = lin[u]; i; i = e[i].next) {\n\t\tint v = e[i].to; \n\t\tif (v == fa) continue; \n\t\tpre[v] = e[i].dis; \n\t\tdfs1(v, u, depth + 1); \n\t\tsiz[u] += siz[v]; \n\t\tif (siz[v] > maxson) {\n\t\t\tmaxson = siz[v]; \n\t\t\tson[u] = v; \n\t\t}\n\t}\n}\n\nvoid dfs2(int u, int tp) {\n\ttop[u] = tp; \n\tidx[u] = ++cnt; \n\tval[cnt] = pre[u]; \n\tif (!son[u]) return ; \n\tdfs2(son[u], tp); \n\tfor (int i = lin[u]; i; i = e[i].next) {\n\t\tint v = e[i].to; \n\t\tif (!idx[v]) \n\t\t\tdfs2(v, v); \n\t}\n}\n\nvoid build(int p, int l, int r) {\n\tif (l == r) { tree[p] = val[l]; return ; }\n\tint mid = (l + r) >> 1; \n\tbuild(p<<1, l, mid); \n\tbuild(p<<1|1, mid + 1, r); \n\ttree[p] = max(tree[p<<1], tree[p<<1|1]);  \n}\n\nvoid modify(int p, int l, int r, int x, int v) {\n\tif (l == r) { \n\t\ttree[p] = v; \n\t\treturn ; \n\t}\n\tint mid = (l + r) >> 1; \n\tif (x <= mid) modify(p<<1, l, mid, x, v); \n\telse modify(p<<1|1, mid + 1, r, x, v); \n\ttree[p] = max(tree[p<<1], tree[p<<1|1]); \n}\n\nint query(int p, int l, int r, int x, int y) {\n\tif (x > y) return 0; \n\tif (x <= l && r <= y) return tree[p]; \n\tint ret = 0; \n\tint mid = (l + r) >> 1; \n\tif (x <= mid) ret = max(ret, query(p<<1, l, mid, x, y)); \n\tif (y > mid) ret = max(ret, query(p<<1|1, mid + 1, r, x, y)); \n\treturn ret; \n}\n\nint TreeQuery(int x, int y) {\n\tif (x == y) return 0; \n\tint ret = 0; \n\twhile (top[x] ^ top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y); \n\t\tret = max(ret, query(1, 1, n, idx[top[x]], idx[x])); \n\t\tx = fat[top[x]]; \n\t}\n\tif (dep[x] > dep[y]) swap(x, y); \n\tret = max(ret, query(1, 1, n, idx[x] + 1, idx[y])); \n\treturn ret; \n}\n\nint main() {\n\tread(n); \n\tfor (int i = 1; i < n; ++i) {\n\t\tint u, v, w; \n\t\tread(u), read(v), read(w); \n\t\tfrom[i] = u, to[i] = v; \n\t\tadd(u, v, w); \n\t\tadd(v, u, w); \n\t}\n\n\tdfs1(1, 0, 1); \n\tdfs2(1, 1); \n\tbuild(1, 1, n); \n\n\tchar ch[10]; int x, y; \n\twhile (1) {\n\t\tscanf(\"%s\", ch); \n\t\tif (ch[0] == 'D') return 0; \n\t\telse if (ch[0] == 'Q') {\n\t\t\tread(x), read(y); \n\t\t\tprintf(\"%d\\n\", TreeQuery(x, y)); \n\t\t}\n\t\telse if (ch[0] == 'C') {\n\t\t\tread(x), read(y); \n\t\t\tint u = from[x], v = to[x]; \n\t\t\tif (fat[v] == u) swap(u, v); \n\t\t\tmodify(1, 1, n, idx[u], y); \n\t\t}\n\t}\n\treturn 0; \n}\n\n```",
        "postTime": 1563539361,
        "uid": 145352,
        "name": "MILLOPE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "##### \u8fd9\u7b97\u662f\u4e00\u9053\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\uff0c\u4f46\u662f\u4ece\u7ef4\u62a4\u70b9\u6743\u6539\u6210\u4e86\u7ef4\u62a4\u8fb9\u6743\n\n\u5ba3\u4f20\u4e00\u6ce2[\u535a\u5ba2](https://www.cnblogs.com/szbszb/)\n\n\u5982\u679c\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u7684\u8bdd\u8bf7\u5148\u5b66\u4e60[\u6811\u94fe\u5256\u5206](https://www.luogu.org/problem/P3384)\n\n\u9898\u89e3\u6b63\u5f0f\u5f00\u59cb\n\n\u8fd9\u9053\u9898\u7684\u4e00\u4e2a\u96be\u70b9\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\u8fb9\u6743\uff0c\u90a3\u80af\u5b9a\u8981\u5c06\u5c06\u8fb9\u6743\u8f6c\u5316\u6210\u70b9\u6743\u624d\u884c\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u6761\u8fb9\uff0c\u5b83\u4e00\u5b9a\u8fde\u63a5\u7236\u4eb2\u8282\u70b9\u548c\u513f\u5b50\u8282\u70b9\uff08\u8fd9\u4e0d\u80af\u5b9a\u7684\u5417\u2026\u2026\uff09\uff0c\u5982\u679c\u7528\u7236\u4eb2\u8282\u70b9\u6765\u5b58\u7684\u8bdd\uff0c\u8be5\u8282\u70b9\u7684\u5176\u4ed6\u513f\u5b50\u7684\u8fb9\u5c31\u6ca1\u6cd5\u5b58\uff0c\u4f46\u5982\u679c\u7528\u513f\u5b50\u8282\u70b9\u6765\u5b58\u7684\u8bdd\u5c31\u6ca1\u6709\u8fd9\u79cd\u95ee\u9898\uff08\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6709\u591a\u4e2a\u513f\u5b50\uff0c\u4f46\u4e0d\u4f1a\u6709\u8d85\u8fc7\u4e00\u4e2a\u7684\u7236\u4eb2\uff09\uff0c\u8fd9\u6837\uff0c\u5c06\u8fb9\u6743\u503c\u5b58\u5728\u54ea\u7684\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u90a3\u600e\u4e48\u5b58\u5462\uff1f\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u5b58\u70b9\u6743\u7684\u6811\u94fe\u5256\u5206\u662f\u5728\u7b2c\u4e8c\u904dDFS\u7684\u65f6\u5019\u5904\u7406\u70b9\u6743\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4ece\u5f53\u524d\u8282\u70b9\u5230\u5b83\u7684\u7236\u8282\u70b9\u7684\u8fb9\u6743\u4f5c\u4e3a\u5b83\u7684\u70b9\u6743\u3002\n\n\u7b2c\u4e8c\u904dDFS\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline void did2(long long u,long long topf,long long l1)//l1\u4ee3\u8868\u8be5\u8282\u70b9\u5230\u7236\u4eb2\u8282\u70b9\u7684\u8ddd\u79bb\u3002\n{\n\tid[u]=++cnt;\n\tw[cnt]=l1;//\u8fd9\u5c31\u662f\u8bb0\u5f55\u8fb9\u6743\u4e86\n\ttop[u]=topf;\n\tif (!son[u]) return;\n\tlong long lx;//\u56e0\u4e3a\u8981\u5148\u627e\u91cd\u513f\u5b50\uff0c\u6240\u4ee5\u63d0\u524d\u6c42\u51fa\u8be5\u8282\u70b9\u5230\u91cd\u513f\u5b50\u7684\u8ddd\u79bb\n\tfor (long long i=he[u];i;i=ne[i]) if (to[i]==son[u]) lx=ll[i];\n\tdid2(son[u],topf,lx);\n\tfor (register long long i=he[u];i;i=ne[i])\n\t{\n\t\tregister long long v=to[i];\n\t\tif (v==f[u]||v==son[u]) continue;\n\t\tdid2(v,v,ll[i]);//ll\u6570\u7ec4\u8bb0\u5f55\u8def\u5f84\u957f\uff0c\u8fd9\u5c31\u662f\u513f\u5b50\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u8ddd\u79bb\u4e86\n\t}\n}\n```\n\u4e0d\u8981\u4ee5\u4e3a\u8fd9\u5c31\u5b8c\u4e8b\u4e86\uff0c\u5f53\u6211\u4eec\u8981\u6c42\u503c\u65f6\uff0c\u539f\u672c\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline long long quimax(long long x,long long y)\n{\n\tregister long long ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=(ans+qui(1,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif (dep[x]>dep[y]) swap(x,y);\n\tans=(ans+qui(1,id[x],id[y]));\n\treturn ans;\n}\n```\n\u6709\u6ca1\u6709\u53d1\u73b0\u6709\u4ec0\u4e48\u95ee\u9898\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6700\u540e\u8fd9\u4e00\u6bb5\n```cpp\n\tans=(ans+qui(1,id[x],id[y]));\n```\n\u4e2d\uff0c\u6211\u4eec\u6c42\u7684\u5176\u5b9e\u662ff[x]\u5230y\u7684\u8def\u5f84\u7684\u8fb9\u6743\u548c\uff0c\u800c\u4e0d\u662fx\u5230y\u7684\u8def\u5f84\u7684\u8fb9\u6743\u548c\uff0c\u6211\u4eec\u8003\u8651\u5230x\uff0cy\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u6240\u4ee5\u6c42son[x]\uff0cy\u5c31\u76f8\u5f53\u4e8e\u6c42x\uff0cy\u7684\u503c\u4e86\u3002\n\n\u6b63\u786e\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline long long quimax(long long x,long long y)\n{\n\tregister long long ans=-1e11;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=max(ans,qui(1,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif (dep[x]>dep[y]) swap(x,y);\n\tans=max(ans,qui(1,id[son[x]],id[y]));//\u6c42x\u5230y\u7684\u8def\u5f84\u7684\u8fb9\u6743\u548c\u3002\n\treturn ans;\n}\n```\n\n\u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5982\u4f55\u627e\u51fa\u5b58\u50a8\u7b2cx\u6761\u8fb9\u7684\u8282\u70b9\n\n\u8fd9\u5c31\u8981\u5229\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u4e00\u70b9\u6027\u8d28\u4e86\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u7b2cx\u6761\u8fb9\u6240\u6307\u5411\u7684\u8282\u70b9\u5c31\u662fto[x]\uff08bian[x].to\uff09\uff0c\u800c\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u8bdd\uff0c\u7b2cx\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u8282\u70b9\u5c31\u662fto[2 * x]\u548cto[2 * x-1] (bian[2 * s].to\u548cbian[2 * x-1].to,\u8fd9\u4e2a\u4f9d\u636e\u4e2a\u4eba\u4e60\u60ef)\uff0c\u800c\u8fd9\u4e24\u4e2a\u8282\u70b9\u4e2d\u6df1\u7684\u90a3\u4e2a\u8282\u70b9\u5c31\u662f\u513f\u5b50\u8282\u70b9\u4e86\uff08\u56e0\u4e3a\u6df1\u5ea6[\u513f\u5b50]=\u6df1\u5ea6[\u7236\u4eb2]+1\u554a\u2026\u2026)\uff0c\u7136\u540e\u4fee\u6539\u8fd9\u4e2a\u8282\u70b9\u5c31\u884c\u4e86\u2026\u2026\n\n\u5176\u4ed6\u7684\u5c31\u548c\u6811\u94fe\u5256\u5206\u7684\u4ee3\u7801\u4e00\u6837\u4e86\u2026\u2026\u603b\u4ee3\u7801\u5982\u4e0b\uff0c\u548c\u6a21\u677f\u6811\u94fe\u5256\u5206\u4e00\u6837\u7684\u548c\u4e0a\u6587\u89e3\u91ca\u8fc7\u7684\uff0c\u5c31\u4e0d\u52a0\u6ce8\u91ca\u4e86\u2026\u2026\uff08\u7d2f\u6b7b\u4e86\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long qq,n,m,r1,p,q,i,k,x,y,cnt,top[1000001],w[1000001],a[1000001],dep[1000001],f[1000001],siz[1000001],he[1000001],ll[2000001],ne[2000001],to[2000001],z[4000001],l[4000001],r[4000001],c[4000001],son[1000001],id[1000001];\ninline void did1(long long u,long long fat,long long dee)\n{\n\tdep[u]=dee;\n\tf[u]=fat;\n\tsiz[u]=1;\n\tregister long long max1=-1;\n\tregister long long v;\n\tfor (register long long i=he[u];i;i=ne[i])\n\t{\n\t\tv=to[i];\n\t\tif (v==fat) continue;\n\t\tdid1(v,u,dee+1);\n\t\tif (siz[v]>max1)\n\t\t{\n\t\t\tson[u]=v;\n\t\t\tmax1=siz[v];\n\t\t}\n\t\tsiz[u]+=siz[v];\n\t}\n}\ninline void did2(long long u,long long topf,long long l1)\n{\n\tid[u]=++cnt;\n\tw[cnt]=l1;\n\ttop[u]=topf;\n\tif (!son[u]) return;\n\tlong long lx;\n\tfor (long long i=he[u];i;i=ne[i]) if (to[i]==son[u]) lx=ll[i];\n\tdid2(son[u],topf,lx);\n\tfor (register long long i=he[u];i;i=ne[i])\n\t{\n\t\tregister long long v=to[i];\n\t\tif (v==f[u]||v==son[u]) continue;\n\t\tdid2(v,v,ll[i]);\n\t}\n}\ninline void build(long long u,long long l1,long long r1)\n{\n  l[u]=l1;\n  r[u]=r1;\n  if (l1==r1)\n  {\n    z[u]=w[l1];\n    return;\n  }\n  build(u*2,l1,(l1+r1)/2);\n  build(u*2+1,(l1+r1)/2+1,r1);\n  z[u]=max(z[u*2],z[u*2+1]);\n}\ninline void jia(long long u,long long l1,long long r1,long long k)\n{\n  if ((l[u]>r1)||(r[u]<l1)) return;\n  if ((l[u]>=l1)&&(r[u]<=r1))\n  {\n    z[u]=k;\n    return;\n  }\n  jia(u*2,l1,r1,k);\n  jia(u*2+1,l1,r1,k);\n  z[u]=max(z[u*2],z[u*2+1]);\n}\ninline long long qui(long long u,long long l1,long long r1)\n{\n  if ((l1>r[u])||(r1<l[u])) return -1e11;\n  if ((l1<=l[u])&&(r1>=r[u])) return z[u];\n    return max(qui(u*2,l1,r1),qui(u*2+1,l1,r1));\n}\ninline long long quimax(long long x,long long y)\n{\n\tregister long long ans=-1e11;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=max(ans,qui(1,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif (dep[x]>dep[y]) swap(x,y);\n\tans=max(ans,qui(1,id[son[x]],id[y]));\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor (i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&r1);//\u94fe\u5f0f\u524d\u5411\u661f\n\t\tcnt++;\n\t\tne[cnt]=he[x];\n\t\tto[cnt]=y;\n\t\tll[cnt]=r1;\n\t\the[x]=cnt;\n\t\tcnt++;\n\t\tne[cnt]=he[y];\n\t\tto[cnt]=x;\n\t\tll[cnt]=r1;\n\t\the[y]=cnt;\n\t}\n\tdid1(1,0,1);\n\tcnt=0;\n\tdid2(1,1,0);//\u4e2a\u4eba\u4e60\u60ef1\u8282\u70b9\u52300\u8282\u70b9\u8ddd\u79bb\u4e3a0\u2026\u2026\u5b9e\u9645\u4e0a\u5565\u90fd\u53ef\u4ee5\u3002\n\tbuild(1,1,n);\n\tq=getchar();\n\twhile(q<'A'||q>'Z') q=getchar();\n\tqq=getchar();\n\twhile (qq>='A'&&qq<='Z') qq=getchar();//\u5343\u4e07\u4e0d\u8981\u7528cin\uff0c\u592a\u6162\u4e86\uff0c\u4f5c\u8005\u559c\u6b22\u7528getchar()\uff1b\n\twhile(q!='D')\n\t{\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tif (q=='Q')\n\t\t\tif (x!=y)\n\t\t\t\tprintf(\"%lld\\n\",quimax(x,y));\n\t\t\telse\n\t\t\t\tprintf(\"0\\n\");\n\t\telse\n\t\t{\n\t\t\tr1=to[2*x];\n\t\t\tp=to[2*x-1];//\u627e\u51fa\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u8282\u70b9\n\t\t\tif (dep[r1]>dep[p]) jia(1,id[r1],id[r1],y);\n\t\t\telse jia(1,id[p],id[p],y);//\u627e\u51fa\u513f\u5b50\u8282\u70b9\uff0c\u8fdb\u884c\u4fee\u6539\n\t\t}\n\t\tq=getchar();\n\t\twhile(q<'A'||q>'Z') q=getchar();\n\t\tqq=getchar();\n\t\twhile(qq>='A'&&qq<='Z') qq=getchar();\n\t}\n\treturn 0\uff1b\n}\n```\n\u8fd9\u9053\u9898\u5c31\u5b8c\u4e8b\u4e86",
        "postTime": 1569980493,
        "uid": 33480,
        "name": "szbszb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u603b\u611f\u89c9\u6211\u7684\u5199\u6cd5\u548c\u6240\u6709\u5176\u5b83\u9898\u89e3\u90fd\u4e0d\u592a\u4e00\u6837\u5c31\u5199\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\u5427\n\n\u9996\u5148\u663e\u7136\u8fd9\u662f\u4e00\u9053\u6811\u94fe\u5256\u5206\u9898\n\n\u4f46\u662f\u6811\u94fe\u5256\u5206\u662f\u6c42\u70b9\u6743\u800c\u8fd9\u9053\u9898\u662f\u6c42\u8fb9\u6743\uff0c\u6240\u4ee5\u9700\u8981\u8f6c\u5316\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u5947\u602a\u7684\u6280\u5de7\uff0c\u4f46\u8fd9\u4e2a\u601d\u60f3\u5728\u67d0\u4e9b\u5176\u5b83\u9898\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\n\n\u82e5$ (u,v) $ \u95f4\u8981\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $ w $ \u7684\u8fb9\n\n\u90a3\u4e48\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u70b9$ x $\uff0c\u70b9\u6743\u4e3a $ w $ ,\u5e76\u4e14\u8fde\u8fb9$ (u,x) $\u548c$ (v,x) $ \n\n\u539f\u6765\u7684$ u,v $\u7684\u70b9\u6743\u5747\u8bbe\u4e3a$ 0 $\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u90fd\u65b0\u5efa\u4e86\u4e00\u4e2a\u70b9\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u4e00\u68f5\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e2d\u95f4\u201c\u63d2\u4e0a\u201d\u4e00\u4e2a\u70b9\n\n\u73b0\u5728\u770b\u8be2\u95ee\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u6837\u6784\u9020\u4e2d\u539f\u8282\u70b9\u70b9\u6743\u4e3a$ 0 $\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u6240\u4ee5\u76f4\u63a5\u6811\u94fe\u5256\u5206\u8be2\u95ee\u5c31\u53ef\u4ee5\u4e86\n\n\u90a3\u4e48\u4fee\u6539\u64cd\u4f5c\uff0c\u4fee\u6539\u7b2c$ i $\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u5c31\u8f6c\u5316\u4e3a\u4fee\u6539\u76f8\u5e94\u5728\u8fb9\u4e0a\u63d2\u5165\u7684\u70b9\u7684\u70b9\u6743\n\n\u81f3\u6b64\uff0c\u8fd9\u9053\u9898\u5df2\u7ecf\u8f6c\u5316\u4e3a\u4e86\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\n\n\u4f46\u8fd9\u79cd\u5199\u6cd5\u8981\u5f00\u4e24\u500d\u591a\u7684\u70b9\u6240\u4ee5\u5e38\u6570\u8f83\u5927\uff0c\u4f46\u4ecd\u53ef\u8fc7\u672c\u9898\n\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=200005;\n\nint n,m;\nint c1,c2;\nvector<int> adj[maxn];\nint vl[maxn];\nint dfn[maxn],hvs[maxn],sz[maxn],top[maxn],fa[maxn],dep[maxn],rk[maxn];\n\nvoid dfs1(int u){\n    sz[u]=1;\n    int bi=0,bn=0;\n    for(int i=0;i<adj[u].size();i++){\n        int v=adj[u][i];\n        if(!dep[v]){\n            dep[v]=dep[u]+1;\n            fa[v]=u;\n            dfs1(v);\n            if(sz[v]>bn){\n                bn=sz[v];\n                bi=v;\n            }\n            sz[u]+=sz[v];\n        }\n    }\n    hvs[u]=bi;\n}\n\nvoid dfs2(int u){\n    dfn[u]=++c2;\n    rk[c2]=u;\n    if(hvs[u]){\n        top[hvs[u]]=top[u];\n        dfs2(hvs[u]);\n    }\n    for(int i=0;i<adj[u].size();i++){\n        int v=adj[u][i];\n        if(dep[v]==dep[u]+1&&v!=hvs[u]){\n            top[v]=v;\n            dfs2(v);\n        }\n    }\n}\n\nstruct node{\n    int l,r,v;\n    node* c[2];\n};\nnode* rt;\nnode* nwnode(int l,int r){\n    node* nw=new node;\n    nw->l=l;nw->r=r;nw->v=0;nw->c[0]=nw->c[1]=NULL;\n    return nw;\n}\n\nvoid pu(node* rt){\n    if(!rt) return;\n    if(rt->l==rt->r ) return;\n    rt->v=max(rt->c[0]->v,rt->c[1]->v);\n}\nnode* bt(int l,int r){\n    node* nw=nwnode(l,r);\n    if(l==r){\n        nw->v=vl[rk[l]];\n    }else{\n        nw->c[0]=bt(l,(l+r)/2);\n        nw->c[1]=bt((l+r)/2+1,r);\n        pu(nw);\n    }\n    return nw;\n}\n\nvoid chg(node* rt,int i,int v){\n    int cl=rt->l,cr=rt->r,cm=(cl+cr)/2;\n    if(cl==cr){\n        rt->v=v;\n    }else if(i<=cm) chg(rt->c[0],i,v);\n    else if(i>cm) chg(rt->c[1],i,v);\n    pu(rt);\n}\n\nint qry(node* rt,int l,int r){\n    int cl=rt->l,cr=rt->r,cm=(cl+cr)/2;\n    if(l==cl&&r==cr){\n        return rt->v;\n    }else if(r<=cm) return qry(rt->c[0],l,r);\n    else if(l>cm) return qry(rt->c[1],l,r);\n    else return max(qry(rt->c[0],l,cm),qry(rt->c[1],cm+1,r));\n}\n\nint qrl(int u,int v){\n    int ans=0;\n    while(top[u]!=top[v]){\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans=max(ans,qry(rt,dfn[top[u]],dfn[u]));\n        u=fa[top[u]];\n    }\n    if(dfn[u]>dfn[v]) swap(u,v);\n    ans=max(ans,qry(rt,dfn[u],dfn[v]));\n    return ans;\n}\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    cin>>n;\n    c1=n;\n    for(int i=1;i<n;i++){\n        int u,v,w;\n        cin>>u>>v>>w;\n        ++c1;\n        adj[u].push_back(c1);\n        adj[v].push_back(c1);\n        adj[c1].push_back(u);\n        adj[c1].push_back(v);\n        vl[c1]=w;\n    }\n    dep[1]=1;\n    dfs1(1);\n    top[1]=1;\n    dfs2(1);\n    rt=bt(1,c1);\n    while(1){\n        char x[10];\n        cin>>x;\n        if(x[0]=='D') return 0;\n        if(x[0]=='Q'){\n            int l,r;\n            cin>>l>>r;\n            cout<<qrl(l,r)<<'\\n';\n        }else{\n            int a,b;\n            cin>>a>>b;\n            chg(rt,dfn[n+a],b);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1555077476,
        "uid": 62598,
        "name": "dengyaotriangle",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u5f88\u660e\u663e\u8fd9\u662f\u4e00\u9053\u6811\u5256\u9898\n\n\u4f46\u662f\uff0c\u6811\u5256\u662f\u5728\u70b9\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u5982\u4f55\u628a\u5b83\u8f6c\u5316\u5230\u8fb9\u4e0a\u5462\uff1f\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u70b9\u4e0e\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u4e4b\u95f4\u4ec5\u6709\u552f\u4e00\u7684\u4e00\u6761\u8fb9\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u70b9\u6743\u3002\n\n\u7136\u540e\u8fd8\u6709\u4e00\u70b9\u8981\u6ce8\u610f\n\n\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u662f\u4e0d\u80fd\u67e5\u8be2\u5230$(u, v)$\u7684$LCA$\u7684\n\n\u56e0\u4e3a$LCA$\u7684\u70b9\u6743\u662f$LCA$\u4e0e$fa[LCA]$\u4e4b\u95f4\u7684\u8fb9\u6743\n\n\u800c\u6211\u4eec\u5e76\u6ca1\u6709\u7edf\u8ba1\u8fd9\u9b3c\u4e1c\u897f\n\n\u600e\u4e48\u529e\u5462\uff1f\n\n\u6ce8\u610f\u5230\u5f53$top[u] = top[v]$\u65f6\uff0c$v$\u5c31\u662f$u$\u7684$LCA$ (\u9ed8\u8ba4$dfn[v]<dfn[u]$)\n\n\u6240\u4ee5\u6211\u4eec\u6b64\u65f6\u67e5\u8be2$(dfn[v+1], dfn[u])$\u5373\u53ef\n\nPS:\u611f\u8c22@Siyuan\u7684\u535a\u5ba2\u8ba9\u6211\u5b66\u4f1a\u4e86\u70b9\u6743\u8f6c\u8fb9\u6743\n\n\u4ee3\u7801:\n\n```cpp\n#include <bits/stdc++.h>\nconst int MaxN = 500010;\nstruct edge\n{\n    int next, to, dis;\n};\nstruct node\n{\n    int max;\n    int l, r;\n};\nedge e[MaxN << 1];\nint n, cnt, dfsnum;\nint a[MaxN], head[MaxN], dep[MaxN], fa[MaxN], size[MaxN];\nint hson[MaxN], dfn[MaxN], top[MaxN], from[MaxN], to[MaxN], pre[MaxN];\nstruct SegmentTree\n{\n    node t[MaxN << 2];\n    inline void pushup(int id) { t[id].max = std::max(t[id << 1].max, t[id << 1 | 1].max); }\n    inline void build(int id, int l, int r)\n    {\n        t[id].l = l, t[id].r = r;\n        if (l == r)\n        {\n            t[id].max = a[pre[l]];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(id << 1, l, mid);\n        build(id << 1 | 1, mid + 1, r);\n        pushup(id);\n    }\n    inline void modify(int id, int l, int r, int val)\n    {\n        if (t[id].l > r || t[id].r < l)\n            return;\n        if (l <= t[id].l && t[id].r <= r)\n        {\n            t[id].max = val;\n            return;\n        }\n        modify(id << 1, l, r, val);\n        modify(id << 1 | 1, l, r, val);\n        pushup(id);\n    }\n    inline int query(int id, int l, int r)\n    {\n        if (l > t[id].r || r < t[id].l)\n            return 0;\n        if (l <= t[id].l && t[id].r <= r)\n            return t[id].max;\n        return std::max(query(id << 1, l, r), query(id << 1 | 1, l, r));\n    }\n} T;\ninline void add_edge(int u, int v, int d)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].dis = d;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\ninline void dfs1(int u, int f)\n{\n    size[u] = 1;\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (v == f)\n            continue;\n        fa[v] = u;\n        dep[v] = dep[u] + 1;\n        a[v] = e[i].dis;\n        dfs1(v, u);\n        size[u] += size[v];\n        if (size[hson[u]] < size[v])\n            hson[u] = v;\n    }\n}\ninline void dfs2(int u, int Top)\n{\n    ++dfsnum;\n    dfn[u] = dfsnum;\n    pre[dfsnum] = u;\n    top[u] = Top;\n    if (hson[u])\n        dfs2(hson[u], Top);\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (v == fa[u] || v == hson[u])\n            continue;\n        dfs2(v, v);\n    }\n}\ninline void modify(int pos, int val) { T.modify(1, dfn[pos], dfn[pos], val); }\ninline int query_chain(int u, int v)\n{\n    int ans = 0;\n    if (dfn[u] < dfn[v])\n        std::swap(u, v);\n    while (top[u] != top[v])\n    {\n        if (dfn[u] < dfn[v])\n            std::swap(u, v);\n        ans = std::max(ans, T.query(1, dfn[top[u]], dfn[u]));\n        u = fa[top[u]];\n    }\n    if (dfn[u] < dfn[v])\n        std::swap(u, v);\n    ans = std::max(ans, T.query(1, dfn[v] + 1, dfn[u]));\n    return ans;\n}\nint main()\n{\n    n = read();\n    for (int i = 1; i < n; i++)\n    {\n        int u, v, d;\n        scanf(\"%d%d%d\", &u, &v, &d);\n        from[i] = u;\n        to[i] = v;\n        add_edge(u, v, d);\n        add_edge(v, u, d);\n    }\n    dep[1] = 1, fa[1] = 0;\n    dfs1(1, 0), dfs2(1, 1);\n    T.build(1, 1, n);\n    std::string op;\n    std::cin >> op;\n    while (op != \"DONE\")\n    {\n        if (op == \"CHANGE\")\n        {\n            int x = read(), val = read();\n            int u = from[x], v = to[x];\n            if (fa[v] == u)\n                std::swap(u, v);\n            modify(u, val);\n        }\n        else\n        {\n            int a = read(), b = read();\n            printf(\"%d\\n\", query_chain(a, b));\n        }\n        std::cin >> op;\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1552231349,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "# [\u987e](https://www.luogu.org/blog/RPdreamer/#)[z](https://www.cnblogs.com/-guz/)\n\n~~\u4f60\u6ca1\u6709\u53d1\u73b0\u4e24\u4e2a\u5b57\u91cc\u7684blog\u90fd\u4e0d\u4e00\u6837\u561b~~ qwq\n\n\u88f8\u7684\u6811\u94fe\u5256\u5206\u9898.\n\n\u5c06\u8fb9\u6743\u8f6c\u4e3a\u70b9\u6743\u8981\u8d4b\u7ed9\u6df1\u5ea6\u8f83\u6df1\u7684\u70b9,\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u4e2a\u70b9\u6743\u5bf9\u5e94\u4e00\u4e2a\u8fb9\u6743.\n\n\u6ce8\u610f\u9898\u76ee\u4e2d\u7684$a==b$\u7684\u65f6\u5019\u8f93\u51fa$0$\uff0c\u8981\u4e0d\u5c31\u4e00\u904d\u5207\u4e86 QAQ.\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cctype>\n#define int long long \n#define N 100008\n#define R register\nusing namespace std;\ninline void in(int &x)\n{\n\tint f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\nint n,head[N],tot;\nstruct cod{int u,v,w,fr;}edge[N<<2];\ninline void add(int x,int y,int z)\n{\n\tedge[++tot].u=head[x];\n\tedge[tot].fr=x;\n\tedge[tot].v=y;\n\tedge[tot].w=z;\n\thead[x]=tot;\n}\nint son[N],size[N],f[N],depth[N],val[N];\nchar s[108];\nvoid dfs1(int u,int fa,int dis)\n{\n\tf[u]=fa;depth[u]=depth[fa]+1;size[u]=1;val[u]=dis;\n\tfor(R int i=head[u];i;i=edge[i].u)\n\t{\n\t\tif(edge[i].v==fa)continue;\n\t\tdfs1(edge[i].v,u,edge[i].w);\n\t\tsize[u]+=size[edge[i].v];\n\t\tif(son[u]==-1 or size[son[u]]<son[edge[i].v])\n\t\t\tson[u]=edge[i].v;\n\t}\n}\nint top[N],idx,dfn[N],fdfn[N];\nvoid dfs2(int u,int t)\n{\n\ttop[u]=t;dfn[u]=++idx;fdfn[idx]=u;\n\tif(son[u]==-1)return;\n\tdfs2(son[u],t);\n\tfor(R int i=head[u];i;i=edge[i].u)\n\t{\n\t\tif(dfn[edge[i].v])continue;\n\t\tdfs2(edge[i].v,edge[i].v);\n\t}\n}\nint tr[N<<2];\n#define ls o<<1\n#define rs o<<1|1\ninline void up(int o){tr[o]=max(tr[ls],tr[rs]);}\nvoid build(int o,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttr[o]=val[fdfn[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tup(o);\n}\nvoid change(int o,int l,int r,int pos,int z)\n{\n\tif(l==r){tr[o]=z;return;}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)change(ls,l,mid,pos,z);\n\telse change(rs,mid+1,r,pos,z);\n\tup(o);\n}\nint query(int o,int l,int r,int x,int y)\n{\n\tif(x<=l and y>=r)return tr[o];\n\tint mid=(l+r)>>1,res=-214748364766LL;\n\tif(x<=mid)res=max(res,query(ls,l,mid,x,y));\n\tif(y>mid)res=max(res,query(rs,mid+1,r,x,y));\n\treturn res;\n}\ninline int tquery(int x,int y)\n{\n\tint fx=top[x],fy=top[y],res=-214748364766LL;\n\twhile(fx!=fy)\n\t{\n\t\tif(depth[fx]>depth[fy])\n\t\t{\n\t\t\tres=max(res,query(1,1,n,dfn[fx],dfn[x]));\n\t\t\tx=f[fx];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres=max(res,query(1,1,n,dfn[fy],dfn[y]));\n\t\t\ty=f[fy];\n\t\t}\n\t\tfx=top[x],fy=top[y];\n\t}\n\tif(x==y)return res;\n\tif(dfn[x]>dfn[y])swap(x,y);\n\tres=max(res,query(1,1,n,dfn[x]+1,dfn[y]));\n\treturn res;\n}\nsigned main()\n{\n\tin(n);memset(son,-1,sizeof son);\n\tfor(R int i=1,x,y,z;i<n;i++)\n\t{\n\t\tin(x),in(y),in(z);\n\t\tadd(x,y,z);add(y,x,z);\n\t}\n\tdfs1(1,0,0);dfs2(1,1);\n\tbuild(1,1,n);\n\tfor(R int x,y;;)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\tif(s[1]=='D')break;\n\t\tif(s[1]=='Q')\n\t\t{\n\t\t\tin(x),in(y);\n\t\t\tif(x==y)puts(\"0\");\n\t\t\telse printf(\"%lld\\n\",tquery(x,y));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tin(x),in(y);x*=2;\n\t\t\tif(depth[edge[x].v]<depth[edge[x].fr])\n\t\t\t\tx=edge[x].fr;\n\t\t\telse x=edge[x].v;\n\t\t\tchange(1,1,n,dfn[x],y);\n\t\t}\n\t}\n}\n```",
        "postTime": 1540041035,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "Qtree\u7cfb\u5217\u90fd\u8ddf\u6811\u6709\u7740\u83ab\u5927\u7684\u8054\u7cfb\uff0c\u8fd9\u9053\u9898\u5f53\u7136\u4e5f\u4e0d\u4f8b\u5916\n\n\u8bfb\u5b8c\u9898\uff0c\u6211\u4eec\u5927\u6982\u5c31\u77e5\u9053\u4e86\uff0c\u8fd9\u9053\u9898\u975e\u5e38\u7b80\u5355\uff0c\u53ef\u4ee5\u8bf4\u662f\u6a21\u677f\u9898\u3002\u6811\u5256+\u7ebf\u6bb5\u6811\u8f7b\u677e\u89e3\u51b3\n\n\u6211\u8fd9\u91cc\u6709\u4e00\u7bc7\u6811\u5256\u5165\u95e8\u8bb2\u89e3\uff0c\u5404\u4f4d\u5982\u679c\u6709\u5174\u8da3\u53ef\u4ee5\u770b\u4e00\u770b [\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/hanruyun/p/9577500.html)\n\n\u4ee3\u7801\u9644\u8bb2\u89e3\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc() getchar()\n#define maxn 100010\nusing namespace std;\n\ninline ll read(){     //\u5f88\u6734\u7d20\u7684\u5feb\u8bfb\uff0c\u4e0d\u591a\u89e3\u91ca\n    ll a=0;int f=0;char p=gc();\n    while(!isdigit(p)){f|=p=='-';p=gc();}\n    while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n    return f?-a:a;\n}\nvoid write(ll a){     //\u5f88\u6734\u7d20\u7684\u5feb\u5199\uff0c\u4e5f\u4e0d\u591a\u89e3\u91ca\n    if(a>9)write(a/10);\n    putchar(a%10+'0');\n}\nint n,a[maxn];    //a\u6570\u7ec4\u8868\u793a\u70b9\u4e0e\u7236\u4eb2\u8fde\u8fb9\u7684\u957f\u5ea6\n\nint tot,head[maxn];\nstruct ahaha1{     //\u524d\u5411\u661f\u5b58\u8fb9\n    int w,to,next;\n}e[maxn<<1];\ninline void add(int u,int v,int w){\n    e[tot].w=w;e[tot].to=v;e[tot].next=head[u];head[u]=tot++;\n}\n\nint f[maxn],sz[maxn],dep[maxn],son[maxn];     //f\u8868\u793a\u70b9\u7684\u7236\u4eb2\uff0csz\u8868\u793a\u70b9\u7684\u5b50\u6811\u4e0a\u8282\u70b9\u4e2a\u6570\uff0cdep\u8868\u793a\u8282\u70b9\u7684\u6df1\u5ea6\uff0cson\u8868\u793a\u5b50\u6811\u6700\u5927\u7684\u5b50\u8282\u70b9\nvoid dfs(int u,int fa){\n    int maxa=0;sz[u]=1;\n    for(int i=head[u];~i;i=e[i].next){\n        int v=e[i].to;if(v==fa)continue;\n        f[v]=u;dep[v]=dep[u]+1;a[v]=e[i].w;\n        dfs(v,u);sz[u]+=sz[v];\n        if(sz[v]>maxa)maxa=sz[v],son[u]=v;\n    }\n}\nint b[maxn],in[maxn],top[maxn];    //b\u8868\u793a\u5f53\u524d\u7f16\u53f7\u6240\u6307\u5411\u7684\u70b9\uff0cin\u8868\u793a\u70b9\u7684\u7f16\u53f7\uff0ctop\u8868\u793a\u70b9\u6240\u5728\u94fe\u7684\u9876\u7aef\nvoid dfs(int u,int fa,int topf){\n    in[u]=++tot;b[tot]=u;top[u]=topf;\n    if(!son[u])return;\n    dfs(son[u],u,topf);\n    for(int i=head[u];~i;i=e[i].next){\n        int v=e[i].to;if(v==fa||v==son[u])continue;\n        dfs(v,u,v);\n    }\n}\n\n#define lc p<<1\n#define rc p<<1|1\nstruct ahaha2{     //\u7ebf\u6bb5\u6811\u592a\u7b80\u5355\u4e0d\u89e3\u91ca\n    int v;\n}t[maxn<<2];\ninline void pushup(int p){\n    t[p].v=max(t[lc].v,t[rc].v);\n}\nvoid build(int p,int l,int r){\n    if(l==r){t[p].v=a[b[l]];return;}\n    int m=l+r>>1;\n    build(lc,l,m);build(rc,m+1,r);\n    pushup(p);\n}\nvoid update(int p,int l,int r,int L,int z){\n    if(l==r){t[p].v=z;return;}\n    int m=l+r>>1;\n    if(m>=L)update(lc,l,m,L,z);\n    else update(rc,m+1,r,L,z);\n    pushup(p);\n}\nint query(int p,int l,int r,int L,int R){\n    if(l>R||r<L)return 0;\n    if(L<=l&&r<=R)return t[p].v;\n    int m=l+r>>1;\n    return max(query(lc,l,m,L,R),query(rc,m+1,r,L,R));\n}\n\ninline void solve_1(){    //\u4ece\u7b2c0\u6761\u8fb9\u5f00\u59cb\u5b58\uff0c\u6bcf\u6761\u8fb9\u5b58\u4e24\u6b21\uff0c\u6240\u4ee5\u8f93\u5165\u7684\u7b2ci\u6761\u8fb9\u5bf9\u5e94\u7684\u662f\u7b2c2*i-2\u548c\u7b2c2*i-1\u6761\u8fb9\uff0c\u8c01\u662f\u513f\u5b50\u6539\u8c01\n    int x=read()*2-2,w=read(),u=e[x].to,v=e[x+1].to;\n    if(f[v]==u)update(1,1,n,in[v],w);\n    else update(1,1,n,in[u],w);\n}\ninline void solve_2(){      //\u94fe\u4e0a\u67e5\u8be2\n    int x=read(),y=read(),ans=0;\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])swap(x,y);\n        ans=max(ans,query(1,1,n,in[top[x]],in[x]));    //\u7531\u4e8e\u5b58\u7684\u662f\u4e0e\u7236\u4eb2\u7684\u8ddd\u79bb\uff0c\u800ctop\u7684\u7236\u4eb2\u76f4\u63a5\u53d6\u6240\u4ee5\u6b64\u5904\u65e0\u9700\u52a01\n        x=f[top[x]];\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    ans=max(ans,query(1,1,n,in[x]+1,in[y]));     //\u4f46\u662f\u6700\u540e\u4e00\u6b21\u5b58\u50a8\u5fc5\u987b\u52a01\u5426\u5219\u4f1a\u591a\u8be2\u95ee\u4e00\u6761\u8fb9\n    write(ans);putchar('\\n');\n}\n\nint main(){memset(head,-1,sizeof head);\n    n=read();\n    for(int i=1;i<n;++i){\n        int x=read(),y=read(),w=read();\n        add(x,y,w);add(y,x,w);\n    }\n    tot=0;dfs(1,-1);dfs(1,-1,1);\n    build(1,1,n);\n    char z[10];\n    while(1){\n        scanf(\"%s\",z);\n        if(z[0]=='D')break;\n        switch(z[0]){\n            case 'C':solve_1();break;\n            case 'Q':solve_2();break;\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1532596459,
        "uid": 34530,
        "name": "\u5b50\u8c26\u3002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8981\u7528\u5230\u6811\u94fe\u5256\u5206\n\n[\u4e0d\u4f1a\u6811\u5256\u7684\u540c\u5b66\u70b9\u8fd9\u91cc](http://www.cnblogs.com/rrsb/p/8053151.html \"\u4e0d\u4f1a\u6811\u5256\u7684\u540c\u5b66\u70b9\u8fd9\u91cc\")\n\n\u628a\u8fb9\u6743\u53d8\u4e3a\u5176dep\u6bd4\u8f83\u6df1\u7684\u90a3\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u7136\u540e\u6811\u5256\uff08\u6ce8\u610fLCA\u7684\u6743\u503c\u662f\u4e0d\u80fd\u7b97\u8fdb\u53bb\u7684\u3002\uff09\n\n\n//\u7b2c\u4e00\u6b21\u6811\u5256\u5957\u7ebf\u6bb5\u6811\uff0c\u4ee5\u524d\u90fd\u662f\u5957\u6811\u72b6\u6570\u7ec4\u7684\u3002\n\n\n```cpp\n    #include<bits/stdc++.h>\n    #define sight(c) ('0'<=c&&c<='9')\n    using namespace std;\n    #define N 100017\n    #define Mid (l+r>>1)\n    #define eho(x) for(int i=head[x];i;i=net[i])\n    int fall[N<<1],net[N<<1],cost[N<<1],head[N],f[N],dep[N],siz[N],son[N];\n    int ma[N<<2],tot,n,co[N],id[N],tim,tp[N],ans,x,y,w,be[N],df[N];\n    char ch[47];\n    inline void read(int &x){\n        static char c;static int b;\n        for (b=1,c=getchar();!sight(c);c=getchar())if(c=='-')b=-1;\n        for (x=0;sight(c);c=getchar())x=x*10+c-48;\n        x*=b;\n    }\n    inline void add(int x,int y,int co){\n        fall[++tot]=y; net[tot]=head[x]; head[x]=tot; cost[tot]=co; \n    }\n    void write(int x){\n        if (x<10) {putchar('0'+x); return;} write(x/10),putchar('0'+x%10);\n    }\n    inline void writeln(int x){\n        if (x<0) putchar('-'),x*=-1;write(x); putchar('\\n');\n    } \n    void dfs1(int x,int fa){//\u7b2c\u4e00\u904ddfs\n        f[x]=fa; dep[x]=dep[fa]+1; siz[x]=1;\n        eho(x) if (fall[i]^fa){\n            co[fall[i]]=cost[i];\n            id[i>>1]=fall[i];//\u8fb9\u6240\u5bf9\u7684\u70b9\n            dfs1(fall[i],x);\n            siz[x]+=siz[fall[i]];\n            if (siz[son[x]]<siz[fall[i]]) son[x]=fall[i];\n        }\n    }\n    void dfs2(int x,int top) {\n        be[x]=++tim;df[tim]=x; tp[x]=top;\n        if (son[x]) dfs2(son[x],top);\n        eho(x) if (fall[i]^f[x]&&fall[i]^son[x]) dfs2(fall[i],fall[i]);\n    }\n    void build(int No,int l,int r){\n        if (l>=r) {\n            ma[No]=co[df[l]]; return;\n        }\n        build(No<<1,l,Mid); build(No<<1|1,Mid+1,r);\n        ma[No]=max(ma[No<<1],ma[No<<1|1]);\n    }\n    void change(int No,int l,int r,int t,int k){\n        if (l==r) {ma[No]=k; return;}\n        if (t<=Mid) change(No<<1,l,Mid,t,k);\n        else change(No<<1|1,Mid+1,r,t,k);\n        ma[No]=max(ma[No<<1],ma[No<<1|1]);\n    }\n    int query(int No,int l,int r,int L,int R){\n        if (L>R) {printf(\"rr\"); return 0;}\n        if (L<=l&&r<=R) return ma[No];\n        if (R<=Mid) return query(No<<1,l,Mid,L,R);\n        if (L >Mid) return query(No<<1|1,Mid+1,r,L,R);\n        return max(query(No<<1,l,Mid,L,Mid),query(No<<1|1,Mid+1,r,Mid+1,R));\n    }\n    int ask(int x,int y){//\u67e5\u8be2\u8def\u5f84\n        ans=0;\n        while (tp[x]^tp[y]) {\n            if (dep[tp[x]]<dep[tp[y]]) swap(x,y);\n            ans=max(ans,query(1,1,n,be[tp[x]],be[x]));\n            x=f[tp[x]];\n        }  \n        if (x^y) {//lca \u4e0d\u7edf\u8ba1\u5165\u7b54\u6848\n          if (dep[x]<dep[y]) swap(x,y);\n          ans=max(ans,query(1,1,n,be[son[y]],be[x])); \n        } return ans;\n    }\n    int main () {\n        read(n); add(0,0,0);//\u6211\u4eec\u52a0\u4e00\u6761\u4e0d\u5b58\u5728\u7684\u8fb9\uff0c\u5176\u8bb0\u53f7(tot)\u4e3a1,\u90a3\u4e48\u6211\u4eec\u7684\u4e00\u6761\u8fb9\u5728\u539f\u8bfb\u5165\u4e2d\u5c31\u662f\u5176tot>>1,\u56e0\u4e3a\u6211\u4eec\u52a0\u4e862\u6761\u8fb9\u3002\n        for (int i=1;i<n;i++) {\n            read(x),read(y),read(w);\n            add(x,y,w); add(y,x,w);\n        }\n        dfs1(1,0);\n        dfs2(1,1);\n        build(1,1,n);\n        while (scanf(\"%s\",ch),ch[0]!='D') {\n            scanf(\"%d %d\",&x,&y);\n            if (ch[0]=='C') change(1,1,n,be[id[x]],y);\n            else writeln(ask(x,y));     \n        }  return 0;\n    }\n\n```",
        "postTime": 1515994679,
        "uid": 53193,
        "name": "\u6b87\u96ea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "$\\text{Qtree}$ \u7cfb\u5217\u662f\u4e2a\u6bd4\u8f83\u9002\u5408\u6811\u5256\u65b0\u624b\u7684\u7cfb\u5217\u9898\u76ee\uff0c\n\n\u8fd9\u91cc\u5efa\u8bae\u6ca1\u5b66\u8fc7 $\\text{Link-Cut-Tree}$ \u7684\u540c\u5b66\u53ef\u4ee5\u53ea\u505a\u524d\u9762\u7684 $\\text{1}$ ~ $\\text{5}$\uff0c$\\text{T5}$ \u7684\u70b9\u5206\u6cbb\u8fd8\u662f\u53cb\u597d\u4e00\u4e9b\u3002  \n\n$\\text{Qtree}$ \u7cfb\u5217\u7684\u9898\u76ee\u90fd\u6d89\u53ca\u4e86\u8fb9\u5904\u7406\uff0c\u6b64\u9898\u4e5f\u4e0d\u610f\u5916\u3002 \n\n---\n\n\u4f5c\u4e3a $\\text{Qtree}$ \u7cfb\u5217\u7684 $\\text{T1}$\uff0c\u6211\u4eec\u5c31\u6765\u89e3\u51b3\u8fd9\u4e00\u7cfb\u5217\u9898\u76ee\u7684\u6700\u96be\u70b9\u2014\u2014\u5982\u4f55\u7ef4\u62a4\u8fb9\u7684\u4fe1\u606f\u3002  \n\n\u4ee5\u5f80\u7ef4\u62a4\u70b9\u7684\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u8c8c\u4f3c\u8981\u5f3a\u884c\u5957\u5728\u8fb9\u4e0a\u9762\u4e0d\u662f\u5f88\u597d\u4f7f\uff0c\u4e8e\u662f\u4ece\u8fb9\u7684\u6027\u8d28\u5165\u624b\uff1a  \n\n\u8fb9\u53ea\u6709 $\\text{n - 1}$ \u6761\uff0c\u4e0en\u4e2a\u70b9\u7684\u6570\u91cf\u53ea\u5dee $\\text{1}$\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u4e0d\u59a8\u601d\u8003\u5c06\u8fb9\u4e0a\u7684\u503c\u8f6c\u5230\u70b9\u4e0a\u6765\uff1b\n\n\u5728\u6811\u4e0a\uff0c\u4e00\u4e2a\u70b9\u53ea\u4e0e\u5176\u7236\u4eb2\u6709\u4e14\u4ec5\u53ea\u8fde\u6709\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\n\n\u6211\u4eec\u5c31\u628a\u4e00\u6761\u8fb9\u7684\u6743\u503c\u5b58\u5728\u5176\u4e00\u6761\u8fb9\u4e0a\u7684\u513f\u5b50\u8282\u70b9\u4e0a\u5373\u53ef\uff0c\n\n\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u8fb9\u7684\u5bf9\u5e94\u95ee\u9898\uff1b\n\n\u5f88\u660e\u663e\uff0c\u8fd9\u4e48\u5206\u914d\u6211\u4eec\u7684\u8fb9\u540e\u6211\u4eec\u7684\u6839\u8282\u70b9\u5c31\u6ca1\u6709\u53ef\u4ee5\u5339\u914d\u7684\u8fb9\u4e86\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u6839\u636e\u9898\u76ee\u6027\u8d28\uff1a\n\n\u5982\u679c\u7ef4\u62a4\u6700\u5927\u503c\u6700\u5c0f\u503c\u5c31\u7f6e\u6839\u8282\u70b9\u7684\u6743\u503c\u4e3a $\\text{-INF\\ or\\ INF}$\uff0c\u7ef4\u62a4\u548c\u5c31\u76f4\u63a5\u8bb0\u4e3a $\\text{0}$ \u5373\u53ef\u3002\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u6211\u4eec\u5c31\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u628a\u8fb9\u6743\u5f80\u70b9\u6743\u4e0a\u5e26\u5373\u53ef\uff0c\u8fd9\u9053\u9898\u6210\u4e86\u6a21\u677f\u9898\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff0c\u5728\u6211\u4eec\u7684 $\\text{updRange}$ \u548c $\\text{qRange}$ \u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u90fd\u4e0d\u80fd\u5f71\u54cd\u5230\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u3002\n\n\u6bd5\u7adf\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u8282\u70b9\u5b58\u7684\u6743\u503c\u5e76\u4e0d\u662f\u8fd9\u6761\u957f\u8def\u5f84\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u3002\n\n\u6240\u4ee5\u5728\u6700\u540e\u7684\u4e00\u6b65\u65f6 $\\text{id[x]}$ \u9700\u8981 $\\text{+ 1}$\uff0c\u4ee5 $\\text{qRange}$ \u4e3e\u4f8b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a  \n\n``` cpp\nlong long qRange(int x,int y)\n{\n\tlong long res = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tres = max(res , query(1 , 1 , n , id[top[x]] , id[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x , y);\n\tres = max(res , query(1 , 1 , n ,id[x] + 1, id[y]));\n\treturn res;\n}\n```\n\n\u6ce8\u610f\u70b9\u4e5f\u5c31\u8fd9\u4e9b\u4e86\uff0c\u4e2a\u4eba\u559c\u6b22\u5728\u8fb9\u4e0a\u5c31\u5b58\u4e0b\u8fd9\u4e9b\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u88ab\u653e\u5728\u54ea\u4e2a\u5730\u65b9\uff0c\n\n\u5b9e\u73b0\u65b9\u5f0f\u6709\u4e9b\u5927\u540c\u5c0f\u5f02\uff0c\u5982\u5e26\u6765\u4e0d\u9002\u8bf7\u8c05\u89e3\u3002 \n\n\u4ee3\u7801\u5982\u4e0b\uff1a  \n\n``` cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nconst int Len = 1e5 + 5,MAXN = 2147483647; \nlong long n,m,wt[Len],w[Len],fa[Len],dep[Len],siz[Len],son[Len],id[Len],top[Len],ans[Len << 2],head[Len],cnt,tot;\nstruct node\n{\n\tint next,to;\n\tlong long v;\n}edge[Len << 1];\nvoid add(int from,int to,long long val)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].v = val;\n\thead[from] = cnt;\n}\nvoid dfs(int x,int f,long long v)\n{\n\tw[x] = v;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs(to , x , edge[e].v);\n\t}\n}\nvoid dfs1(int x,int f,int deep)\n{\n\tdep[x] = deep;\n\tfa[x] = f;\n\tsiz[x] = 1;\n\tint maxson = -1;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs1(to , x , deep + 1);\n\t\tsiz[x] += siz[to];\n\t\tif(siz[to] > maxson) maxson = siz[to] , son[x] = to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tid[x] = ++ tot;\n\twt[tot] = w[x];\n\ttop[x] = topf;\n\tif(!son[x]) return;\n\tdfs2(son[x] , topf);\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs2(to , to);  \n\t}\n}\nint ls(int x){return x << 1;}\nint rs(int x){return x << 1 | 1;}\nvoid push_up(int x){ans[x] = max(ans[ls(x)] , ans[rs(x)]);}\nvoid build(int p,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tans[p] = wt[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n\tpush_up(p);\n}\nvoid update(int p,int l,int r,int idx,long long ch)\n{\n\tif(l == r) \n\t{\n\t\tans[p] = wt[l] = ch;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) update(ls(p) , l , mid , idx , ch);\n\telse if(idx > mid) update(rs(p) , mid + 1 , r , idx , ch);\n\tpush_up(p);\n}\nlong long query(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return ans[p];\n\tint mid = (l + r) >> 1;long long res = 0;\n\tif(nl <= mid) res = max(res , query(ls(p) , l , mid , nl , nr));\n\tif(nr > mid) res = max(res , query(rs(p) , mid + 1 , r , nl , nr));\n\treturn res;\n}\nlong long qRange(int x,int y)\n{\n\tlong long res = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tres = max(res , query(1 , 1 , n , id[top[x]] , id[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x , y);\n\tres = max(res , query(1 , 1 , n ,id[x] + 1, id[y]));\n\treturn res;\n}\nchar s[15];\nstruct Node\n{\n\tint x,y,z;\n\tlong long val;\n}E[Len];\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i = 1; i < n; i ++) \n\t{\n\t\tscanf(\"%d %d %lld\",&E[i].x,&E[i].y,&E[i].val);\n\t\tadd(E[i].x , E[i].y , E[i].val) , add(E[i].y , E[i].x , E[i].val);\t\n\t}  \n\tdfs(1 , 0 , -MAXN);\n\tdfs1(1 , 0 , 1);\n\tdfs2(1 , 1);\n\tbuild(1 , 1 , n);\n\tfor(int i = 1; i < n ; i ++)\n\t{\n\t\tif(fa[E[i].x] == E[i].y) E[i].z = E[i].x;\n\t\telse E[i].z = E[i].y;\n\t}\n\twhile(1)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tif(s[0] == 'D') break;\n\t\telse if(s[0] == 'C')\n\t\t{\n\t\t\tint x;long long t;\n\t\t\tscanf(\"%d %lld\",&x,&t);\n\t\t\tupdate(1 , 1 , n , id[E[x].z] , t);\n\t\t}\n\t\telse if(s[0] == 'Q')\n\t\t{\n\t\t\tint x,y;\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tif(x == y) printf(\"0\\n\");\n\t\t\telse printf(\"%lld\\n\",qRange(x , y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1597150200,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    },
    {
        "content": "\u53d1\u73b0\u4e00\u9053\u6c34\u9898\u3002\u3002\u3002\n\n\u8fd9\u4e0d\u662f\u6811\u5256\u7684\u677f\u5b50\u5417\u3002\u3002\u3002\n\n\u7ebf\u6bb5\u6811\u53ea\u80fd\u7528\u4e8e\u533a\u95f4\u95ee\u9898\uff0c\u653e\u5230\u6811\u4e0a\uff0c\u53ef\u4ee5\u5148\u7528\u6811\u94fe\u5256\u5206\u5c06\u6811\u62c6\u6210\u51e0\u6761\u94fe\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u6c34\u8fc7\u5c31\u884c\u4e86\n\n\u771f\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\u597d\u4e86\uff08\u8981\u662f\u4f60\u4e0d\u4f1a\u6811\u5256\uff0c~~\u90a3\u4f60\u6765\u8fd9\u91cc\u5e72\u5565\u3002\u3002\u3002~~ \u8bf7\u5148\u5b66\u4e60\u6811\u5256\uff09\n\n## code\n```cpp\n#include<bits/stdc++.h>\n#define R register\n#define inf 1e9+7;\n#define LL k<<1\n#define RR k<<1|1\n\nusing namespace std;\nconst int N = 1e5 + 5;\nint T, n;\nint U[N], V[N], W[N];\nint fa[N], son[N], top[N], dep[N], size[N], seg[N << 2], rev[N << 2];\nint head[N << 1], cnt, tot, val[N];\nint tr[N << 2];\nchar c[10];\nstruct saber {\n\tint nxt, to, val;\n} rin[N << 2];\n\nint read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {if (c == '-')f = -1; c = getchar();}\n\twhile (c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = getchar();}\n\treturn x * f;\n}\n\ninline void add(int from, int to, int val) {\n\trin[++cnt].to = to;\n\trin[cnt].val = val;\n\trin[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid dfs1(int now, int f) {\n\tsize[now] = 1; fa[now] = f; dep[now] = dep[f] + 1;\n\tfor (int i = head[now]; i ; i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif (vc == f) continue;\n\t\tval[vc] = rin[i].val;\n\t\tdfs1(vc, now);\n\t\tsize[now] += size[vc];\n\t\tif (size[vc] > size[son[now]]) son[now] = vc;\n\t}\n}\n\nvoid dfs2(int now, int tp) {\n\ttop[now] = tp;\n\tseg[now] = ++tot;\n\trev[tot] = val[now];\n\tif (son[now]) dfs2(son[now], tp);\n\tfor (int i = head[now]; i ; i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif (vc == fa[now] || vc == son[now]) continue;\n\t\tdfs2(vc, vc);\n\t}\n}\n\ninline void update(int k) {tr[k] = max(tr[LL], tr[RR]);}\n\nvoid build(int k, int l, int r) {\n\tif (l == r) {\n\t\ttr[k] = rev[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(LL, l, mid);\n\tbuild(RR, mid + 1, r);\n\tupdate(k);\n}\n\nvoid change(int k, int l, int r, int pos, int v) {\n\tif (l == r) {\n\t\ttr[k] = v;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) change(LL, l, mid, pos, v);\n\telse change(RR, mid + 1, r, pos, v);\n\tupdate(k);\n}\n\nint query(int k, int l, int r, int x, int y) {\n\tif (x > y) return 0;\n\tif (l >= x && r <= y) return tr[k];\n\tint mid = (l + r) >> 1, res = -inf;\n\tif (x <= mid) res = max(res, query(LL, l, mid, x, y));\n\tif (y > mid) res = max(res, query(RR, mid + 1, r, x, y));\n\treturn res;\n}\n\ninline int ask(int x, int y) {\n\tif (x == y) return 0;\n\tint res = 0;\n\twhile (top[x] ^ top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tres = max(res, query(1, 1, n, seg[top[x]], seg[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) swap(x, y);\n\tres = max(res, query(1, 1, n, seg[x] + 1, seg[y]));\n\treturn res;\n}\n\nint main() {\n\tn = read();\n\tfor (R int i = 1, u, v, w; i < n; ++ i) {\n\t\tu = read(); v = read(); w = read();\n\t\tU[i] = u, V[i] = v, W[i] = w;\n\t\tadd(u, v, w); add(v, u, w);\n\t}\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tbuild(1, 1, n);\n\twhile (1) {\n\t\tscanf(\"%s\", c + 1);\n\t\tif (c[1] == 'D') break;\n\t\tint x = read(), y = read();\n\t\tif (c[1] == 'C') {\n\t\t\tint u = U[x], v = V[x];\n\t\t\tif (fa[v] == u) swap(u, v);\n\t\t\tchange(1, 1, n, seg[u], y);\n\t\t}\n\t\tif (c[1] == 'Q') printf(\"%d\\n\", ask(x, y));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1572132881,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4114 \u3010Qtree1\u3011"
    }
]