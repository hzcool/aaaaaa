[
    {
        "content": "\u8fd9\u9053\u9898\u662f\u7ec3\u4e60\u7ebf\u6bb5\u6811\u7684\u4f18\u79c0\u5165\u95e8\u9898\uff0c\u5207\u6389\u4ed6\u8bf4\u660e\u4f60\u5bf9\u7b97\u6cd5\u7684\u7406\u89e3\u7a0b\u5ea6\u5df2\u7ecf\u4e0d\u6b62\u5c40\u9650\u4e8e\u6a21\u677f\u3002\n\n\u706f\u53ea\u6709\u4eae\uff0c\u6697\u4e24\u79cd\u72b6\u6001\uff0c\u53ef\u4ee5\u75280,1\u8868\u793a\u3002\u90a3\u4e48\u600e\u6837\u8ba90\u53d8\u62101,1\u53d8\u62100\u5462\uff1f\n\n\u6211\u4eec\u9009\u62e9XOR\uff08\u5f02\u6216\uff09\u3002\u7b26\u53f7\u662f^\uff0c\u5c5e\u4e8e\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26\u7684\u4e00\u79cd\u3002\u4f5c\u7528\u4e0e\u540d\u79f0\u76f8\u4f3c\uff0c\u201c\u5f02\u201d\u5373\u4e3a1\uff0c\u201c\u540c\u201d\u5373\u4e3a0\u30021^1=0,1^0=1,0^0=1\u3002\n\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981\u5c060\u62161\u5f02\u62161\u5c31\u53ef\u4ee5\u5b8c\u62100\u30011\u7684\u8f6c\u6362\u3002\n\n\u8be2\u95ee\u533a\u95f4\u7684\u4eae\u706f\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4eae\u706f\u7684\u6570\u91cf\u3002\u4e00\u4e2a\u533a\u95f4\u53ea\u6709\u4eae\u706f\u548c\u706d\u706f\uff0c\u6240\u4ee5\u5f02\u6216\u4e4b\u540e\u533a\u95f4\u4eae\u706f\u7684\u6570\u91cf\u5c31\u662f\u5f02\u6216\u524d\u533a\u95f4\u706d\u706f\u7684\u6570\u91cf\u3002\n\u5373\n```\nif\u5f02\u6216\n\u533a\u95f4\u4eae\u706f\u6570=\u533a\u95f4\u706f\u603b\u6570-\u533a\u95f4\u4eae\u706f\u6570\n```\n\u533a\u95f4\u4fee\u6539\u9700\u8981\u61d2\u6807\u8bb0\uff08lazy\uff09\uff0c\u6211\u4eec\u53c8\u4e00\u6b21\u60ca\u5947\u5730\u53d1\u73b0\uff0c\u533a\u95f4\u4fee\u6539\u4e24\u6b21\u7b49\u4e8e\u6ca1\u6709\u4fee\u6539\uff0c\u4e0e\u706f\u7684\u72b6\u6001\u76f8\u4f3c\uff0c\u6240\u4ee5lazy\u7684\u53d8\u5316\u4e5f\u53ef\u4ee5\u7528\u5f02\u6216\u3002\n\n\u5728\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u7531\u4e8e\u6240\u6709\u7684\u706f\u5f00\u59cb\u90fd\u662f\u706d\u7684\uff0c\u6240\u4ee5\u7701\u53bb\u4e86\u5efa\u6811\u7684\u64cd\u4f5c\u3002\n\n\u7801\u98ce\u6e05\u5947\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint lz[1000001];//\u61d2\u6807\u8bb0\nlong long sum[1000001];//\u533a\u95f4\u4eae\u706f\u548c\nvoid update(int now)\n{\n\tsum[now]=sum[now<<1]+sum[now<<1|1];//\u5927\u533a\u95f4\u7684\u4eae\u706f\u548c\u7b49\u4e8e\u5de6\u53f3\u533a\u95f4\u7684\u4eae\u706f\u548c\u7684\u548c\u3002\u3002\u3002\n}\nvoid pushdown(int now,int l,int r)//\u6807\u8bb0\u4e0b\u4f20\n{\n\tint mid=(l+r)>>1;\n\tif(lz[now]==1)\n\t{\n\t\tlz[now<<1]^=1;//lz\u7684\u6539\u53d8\u7528\u5f02\u6216\n\t\tlz[now<<1|1]^=1;\n\t\tsum[now<<1]=(mid-l+1-sum[now<<1]);//\u533a\u95f4\u706f\u6570-\u4eae\u706f\u6570\n\t\tsum[now<<1|1]=(r-mid-sum[now<<1|1]);\n\t\tlz[now]=0;\n\t}\n}\nvoid change(int now,int l,int r,int lgo,int rgo)//\u533a\u95f4\u4fee\u6539\n{\n\tif(l>=lgo&&r<=rgo)//\u5982\u679c\u5f53\u524d\u533a\u95f4\uff08l,r\uff09\u5728\u4fee\u6539\u533a\u95f4\uff08lgo,rgo\uff09\u4e2d\n\t{\n\t\tlz[now]^=1;//lz\u5f02\u6216\n\t\tsum[now]=(r-l+1-sum[now]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tpushdown(now,l,r);//\u522b\u5fd8\u4e86\u6807\u8bb0\u4e0b\u4f20\n\tif(lgo<=mid)\n\tchange(now<<1,l,mid,lgo,rgo);\n\tif(rgo>mid)\n\tchange(now<<1|1,mid+1,r,lgo,rgo);\n\tupdate(now);//\u4fee\u6539\u540e\u66f4\u65b0\n}\nlong long find(int now,int l,int r,int lgo,int rgo)//\u533a\u95f4\u67e5\u8be2\n{\n\tlong long ans=0;\n\tif(l>=lgo&&r<=rgo)//\u5982\u679c\u5f53\u524d\u533a\u95f4\uff08l,r\uff09\u5728\u67e5\u8be2\u533a\u95f4\uff08lgo,rgo\uff09\u4e2d\n\t\treturn sum[now];//\u8fd4\u56de\u503c\n\tint mid=(l+r)>>1;\n\tpushdown(now,l,r);//\u6807\u8bb0\u4e0b\u4f20double\n\tif(lgo<=mid)\n\tans+=find(now<<1,l,mid,lgo,rgo);\n\tif(rgo>mid)\n\tans+=find(now<<1|1,mid+1,r,lgo,rgo);\n\treturn ans;\n}\nint main()\n{\n\tint n,m,c,a,b;\n\tcin>>n>>m;//\u4e0d\u5fc5\u5efa\u6811\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>c>>a>>b;\n\t\tif(c==0)\n\t\t\tchange(1,1,n,a,b);\n\t\tif(c==1)\n\t\t\tcout<<find(1,1,n,a,b)<<endl;\n\t}\n}\n```\n\n\u505a\u5b8c\u8fd9\u9053\u9898\u53ef\u4ee5\u6c34\u4e00\u4e0b\u53cc\u500d\u7ecf\u9a8c\u9898\u76ee\n\n[P3870 [TJOI2009]\u5f00\u5173](https://www.luogu.org/problemnew/show/P3870)\n\n\u8fd9\u9053\u9898\u9700\u8981\u5efa\u6811\n\n[P2574 XOR\u7684\u827a\u672f](https://www.luogu.org/problemnew/show/P2574)\n\n",
        "postTime": 1563154048,
        "uid": 50138,
        "name": "Liu_zj",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2846\u3010\u5149\u5f00\u5173\u3011"
    },
    {
        "content": "# \u867d\u7136\u6211\u53d1\u4e86\u8fd9\u7bc7\u9898\u89e3\u540e\u6570\u636e\u5f88\u6709\u53ef\u80fd\u4f1a\u52a0\u5f3a\n\n\u4f46\u6211\u8fd8\u662f\u8981\u53d1\u8fd9\u7bc7\u9898\u89e3\n\n\u56e0\u4e3a\n\n# \u8fd9\u662f\u4e00\u9053\u6a21\u62df\uff08\u7eaf\u66b4\u529b\uff09\u9898\uff01\uff01\uff01\n\n### \u5177\u4f53\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u66b4\u529b\u6211\u5c31\u61d2\u5f97\u8bb2\u4e86\n\n\u7b97\u4e86\uff0c\u5fcd\u4e0d\u4f4f\u8fd8\u662f\u8981\u8bb2\u4e00\u4e0b\uff08\u4ee3\u7801\u540e\u9762\u6709\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,zt[100020],a,b;\nint main()\n{\n//\tfreopen(\"light.in\",\"r\",stdin);//\u8fd9\u4e2a\u5343\u4e07\u4e0d\u80fd\u52a0\uff01\n//\tfreopen(\"light.out\",\"w\",stdout);//\u8fd9\u4e2a\u4e5f\u662f\uff01\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint pd;\n\t\tscanf(\"%d%d%d\",&pd,&a,&b);\n\t\tif(pd==1)\n\t\t{\n\t\t\tint ans=0;\n\t\t\tfor(int i=a;i<=b;i++)\n\t\t\t{\n\t\t\t\tif(zt[i])//\u706f\u5f00\u7740\u5c31\u8ba1\u5165\u7b54\u6848\n\t\t\t\t{\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i=a;i<=b;i++)\n\t\t\t{\n\t\t\t\tif(zt[i])//\u5982\u679c\u706f\u5f00\u7740\uff0c\u5173\u4e0a\n\t\t\t\t{\n\t\t\t\t\tzt[i]=0;\n\t\t\t\t}\n\t\t\t\telse//\u5982\u679c\u706f\u5173\u7740\uff0c\u6253\u5f00\n\t\t\t\t{\n\t\t\t\t\tzt[i]=1;\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u7531\u9898\u76ee\u53ef\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\uff08\u6574\u4e2a\u533a\u95f4\u90fd\u6539\u53d8\uff09\n\n\u706f\u5f00\u4e86\uff0c\u5c31\u5173\u4e0a\uff0c\u706f\u5173\u4e86\uff0c\u5c31\u6253\u5f00\u3002\n\n1\u4e2afor\u5faa\u73af\u76f4\u63a5\u4fee\u6539\n\n\u518d\u7528\u4e00\u4e2afor\u5faa\u73af\u76f4\u63a5\u7edf\u8ba1a\u5230b\u91cc\u9762\u6240\u6709\u5f00\u542f\u7684\u706f\n\n\u8f93\u51fa\n\n\u8bfb\u8005\uff1a\u600e\u4e48\u4f1a\u90a3\u4e48\u7b80\u5355\uff1f\u8bf4\u597d\u8981\u7ebf\u6bb5\u6811\u5462\uff1f\n\n\u4f5c\u8005\uff1a\u989d......\u4f5c\u8005\u6253\u4e0d\u6765",
        "postTime": 1552212906,
        "uid": 116375,
        "name": "mdzzzzzzzzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4eae\u548c\u6697\u3002\u75280\u8868\u793a\u6697\uff0c1\u8868\u793a\u4eae\u5373\u53ef\u3002\n\n\u7531\u4e8en\u7684\u503c\u8fc7\u5927\uff0c\u66b4\u529bO(n^2)\u80af\u5b9a\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u3002\n## \u7ebf\u6bb5\u6811\u4e2d\u7684\u64cd\u4f5c\n1.Build\n\n\u7531\u4e8e\u6b64\u9898\u8d77\u59cb\u503c\u5747\u4e3a0\uff0c\u6240\u4ee5\u6709\u4e9b\u5199\u6cd5\u53ef\u4ee5\u4e0d\u7528\u5efa\u6811\u3002\n\n\u4f46\u7531\u4e8e\u6b64\u5904\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u662f\u5b58\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u7684\uff08\u597d\u83b7\u5f97mid\u548clen\u7684\u503c\uff09\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u5efa\u6811\u3002\n\n\u5efa\u6811\u7684\u8fc7\u7a0b\u4e0d\u96be\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002\n\n2.Update\n\nUpdate\u65f6\u9700\u6ce8\u610f\u4e24\u4e2a\u95ee\u9898\uff1a\u503c\u7684\u53d8\u5316\u548clazytag\u7684\u53d8\u5316\u3002\n\n\u503c\u7684\u53d8\u5316\u5f88\u7b80\u5355\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540e\u533a\u95f4\u5185\u4eae\u7684\u53d8\u6210\u6697\u7684\uff0c\u6697\u7684\u53d8\u6210\u4eae\u7684\uff0c\u6240\u4ee5\u82e5\u539f\u6765\u4eae\u7684\u4e2a\u6570\u4e3anum\uff0c\u5219\u4eae\u7684\u4e2a\u6570\u53d8\u4e3a\u4e86len-num\u3002\n\nlazytag\u7684\u53d8\u5316\uff1a\n\n\u9996\u5148\u53d6\u53cd\u540e\u72b6\u6001\u4f1a\u53d8\u6210\u76f8\u53cd\u7684\u72b6\u6001\uff0c\u800clazytag\u7684\u72b6\u6001\u53ea\u67090\u548c1\uff0c\u6240\u4ee5\u53ea\u53ef\u80fd\u662f0\u53d8\u62101\uff0c1\u53d8\u62100\u3002\n\n\u5b9e\u73b0\u7684\u65f6\u5019\u53d6\u53cd\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n3.Pushdown\n\nPushdown\u5373Tagdown\uff0c\u628atag\u4f20\u7ed9\u5b50\u8282\u70b9\u3002\n\n\u6bd4\u5982\u73b0\u5728\u7236\u8282\u70b9\u7684tag\u662f1\uff0c\u5b50\u8282\u70b9\u7684tag\u662f0\u3002\n\u5219\u7236\u8282\u70b9\u7684\u72b6\u6001\u5df2\u7ecf\u53cd\u8fc7\u6765\uff0c\u800c\u5b50\u8282\u70b9\u82e5\u60f3\u63a5\u4e0b\u7236\u8282\u70b9\u7684tag\uff0c\u5219\u53d8\u62101\uff08\u4e5f\u662f\u53d6\u53cd\uff09\u3002\n\n4.Query\uff08\u5f88\u7b80\u5355\uff0c\u4e0d\u8bf4\u4e86\u2026\u2026\uff09\n\n## \u4ee3\u7801\n\u4e11\u964b\u7684\u4ee3\u7801\u5982\u4e0b\u2026\u2026\n\n```cpp\n#include<stdio.h>\n#include<cstring>\n#define lc rt<<1\n#define rc rt<<1|1\n//\u5de6\u53f3\u5b69\u5b50 lchild rchild \nusing namespace std;\nconst int Size=100003;\nint n,m,p,q,dir;\nstruct node {\n\tint l,r;\n\tint v;\t\t\t//\u533a\u95f4\u5185\u7684\u503c \n\tint lazy;\t\t//tag \n\tinline int len() {\treturn r-l+1;\t}\t//\u533a\u95f4\u957f \n\tinline int mid() {\treturn (l+r)>>1;}\t//\u533a\u95f4\u4e2d\u503c \n} tree[Size<<2];\ninline void Pushup(int rt) {\n\ttree[rt].v=tree[lc].v+tree[rc].v;\n}\nvoid Pushdown(int rt) {\n\tif(tree[rt].lazy) {\n\t\t/*\u4f20\u4e0blazytag\u548c\u503c*/\n\t\ttree[lc].lazy^=1; \n\t\ttree[rc].lazy^=1;\n\t\ttree[lc].v=tree[lc].len()-tree[lc].v;\n\t\ttree[rc].v=tree[rc].len()-tree[rc].v;\n\t\ttree[rt].lazy=0;\n\t}\n}\nvoid Build(int l,int r,int rt) {\t\t//\u5efa\u6811 \n\ttree[rt].l=l;\n\ttree[rt].r=r;\n\ttree[rt].v=0;\n\tif(l==r)\treturn;\n\tint mid=(l+r)>>1;\n\tBuild(l,mid,lc);\n\tBuild(mid+1,r,rc);\n}\nvoid Update(int l,int r,int rt) {\t\t//\u66f4\u65b0[l,r]\u533a\u95f4\u5185\u7684\u72b6\u6001 \n\tif(l<=tree[rt].l && tree[rt].r<=r) {\n\t\ttree[rt].v=tree[rt].len()-tree[rt].v;\n\t\ttree[rt].lazy^=1;\n\t\treturn;\n\t}\n\tPushdown(rt);\n\tint mid=tree[rt].mid();\n\tif(l<=mid)\tUpdate(l,r,lc);\n\tif(r>mid)\tUpdate(l,r,rc);\n\tPushup(rt);\n}\nint Query(int l,int r,int rt) {\t\t\t//\u67e5\u8be2[l,r]\u4e4b\u95f4\u7684\u503c \n\tif(l<=tree[rt].l && tree[rt].r<=r) {\n\t\treturn tree[rt].v;\n\t}\n\tPushdown(rt);\n\tint mid=tree[rt].mid(),ans=0;\n\tif(l<=mid)\tans+=Query(l,r,lc);\n\tif(r>mid)\tans+=Query(l,r,rc);\n\treturn ans;\n}\nint read() {\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9') {\n\t\tif(ch=='-')\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9') {\n\t\tx=10*x+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nint main() {\n\tn=read();\n\tm=read();\n\tBuild(1,n,1);\n\twhile(m--) {\n\t\tdir=read();\n\t\tp=read();\n\t\tq=read();\n\t\tif(!dir) {\n\t\t\tUpdate(p,q,1);\n\t\t} else {\n\t\t\tprintf(\"%d\\n\",Query(p,q,1));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1524837393,
        "uid": 45108,
        "name": "Peter_Z",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "## \u770b\u5230\u5927\u4f6c\u4eec\u7eb7\u7eb7\u7528\u7ebf\u6bb5\u6811\u5207\u6389\u4e86\u8fd9\u4e2a\u9898\uff0c\u90a3\u6211\u5c31\u6765\u5199\u4e00\u4e2a\u7528\u6811\u72b6\u6570\u7ec4\u641e\u7684\u9898\u89e3\u5427\uff08\u4ee3\u7801\u53ea\u670930\u591a\u884c\u54e6\uff09\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u9898\u76ee\u8ba9\u6211\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a\u4e00\u4e2a\u662f\u628ax\u5230y\uff08\u5305\u62ecx,y\uff09\u4e2d\u7684\u4eae\u7684\u706f\u53d8\u706d\uff0c\u706d\u7684\u706f\u53d8\u4eae\u3002\u53e6\u4e00\u4e2a\u64cd\u4f5c\u662f\u67e5\u8be2x\u5230y\u4e2d\uff08\u5305\u62ecx,y\uff09\u6709\u591a\u5c11\u76cf\u706f\u662f\u4eae\u7684\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u56e0\u4e3a\u4e00\u5f00\u59cb\u6240\u6709\u7684\u706f\u90fd\u662f\u706d\u7684\uff0c\u6240\u4ee5\u5f53\u67d0\u4e2a\u706f\u88ab\u70b9\u4e86\u5947\u6570\u6b21\u65f6\uff0c\u8fd9\u4e2a\u706f\u662f\u4eae\u7684\uff0c\u88ab\u70b9\u4e86\u5076\u6570\u6b21\u65f6\uff0c\u8fd9\u4e2a\u706f\u662f\u706d\u7684\u3002\u8ba9x\u5230y\u88ab\u70b9\u65f6\uff0c\u53ea\u9700\u8981\u8ba9x\u8fd9\u4e2a\u4f4d\u7f6e\u52a01,y+1\u8fd9\u4e2a\u4f4d\u7f6e\u52a01\u5c31\u597d\u4e86\u3002\u90a3\u4e48\u5982\u679c\u7b2ci\u76cf\u706f\u7684\u524d\u7f00\u548c\u4e3a\u5947\u6570\u7684\u8bdd,\u8bf4\u660e\u5b83\u662f\u4eae\u7684,\u5426\u5219\u5b83\u5c31\u662f\u706d\u7684\uff08\u5373\u7528\u524d\u7f00\u548c\u8868\u793a\u64cd\u4f5c\u6b21\u6570\uff09\u3002\n\n \uff1f\uff1f\uff1f \u4e3a\u5565\u8fd9\u6837\u53ef\u4ee5\u5224\u65ad\u67d0\u76cf\u706f\u662f\u4e0d\u662f\u4eae\u7684\u4e86\u5462\n\n \u8fd9\u5176\u5b9e\u662f\u7528\u5230\u4e86\u4e00\u70b9\u5dee\u5206\u7684\u601d\u60f3\uff0c\u5f53\u7136\u4e0d\u4f1a\u4e5f\u6ca1\u5173\u7cfb\u3002\n\n \u6211\u4eec\u53d1\u73b0\uff0c\u5f53x\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u52a01\uff0cy+1\u8fd9\u4e2a\u4f4d\u7f6e\u52a01\uff0c\u90a3\u4e48\uff0ci\uff08i\u5c5e\u4e8ex\u5230y\uff09\u7684\u524d\u7f00\u548c\u4e00\u5b9a\u4f1a\u589e\u52a01\uff0c\u800c\u5c0f\u4e8ex\u7684\u6570\u524d\u7f00\u548c\u4e0d\u53d8\uff08\u76f8\u5f53\u4e8e\u6ca1\u64cd\u4f5c\uff09\uff0c\u5927\u4e8e\u7b49\u4e8ey+1\u7684\u6570\u7684\u524d\u7f00\u548c\u90fd\u53d8\u5927\u4e862\uff08\u70b9\u4e86\u4e24\u6b21\u76f8\u5f53\u4e8e\u6ca1\u70b9\uff0c\u6240\u4ee5\u4e5f\u662f\u6ca1\u64cd\u4f5c\uff09\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6c42\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u6765\u5224\u65ad\u5bf9\u4e8e\u67d0\u76cf\u706f\u7684\u64cd\u4f5c\u6b21\u6570\u4e86\u3002\u800c\u524d\u7f00\u548c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u548c\u6c42\u503c\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u662flogN\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9898\u5c31\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u8e29\u8fc7\u53bb\u5566\u3002\n\n \u81f3\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c,\u5c31\u76f4\u63a5\u679a\u4e3ex\u5230y\u7684\u6bcf\u76cf\u706fi,\u6c42i\u7684\u524d\u7f00\u548c\u662f\u5947\u662f\u5076\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5c31ok\u4e86\u3002\n \n \u4e0b\u9762\u9644\u4e0a\u6bd4~~\u7ebf\u6bb5\u6811\u77ed\u51e0\u5341\u884c\u7684~~\u4ee3\u7801\n ```\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint n,m;\nint a[102000];\nvoid add(int x,int k){//\u4fee\u6539\u6811\u72b6\u6570\u7ec4 \n\tfor(int i=x;i<=n;i+=i&(-i))\n\t\ta[i]+=k;\n}\nint query(int x){//\u7528\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u524d\u7f00\u548c \n\tint ans=0;\n\tfor(int i=x;i>0;i-=i&(-i))\n\t\tans+=a[i];\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){//\u64cd\u4f5c\u4e00 \n\t\tint chk;\n\t\tscanf(\"%d\",&chk);\n\t\tif(chk==0){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(x,1);add(y+1,1);\n\t\t}\n\t\tif(chk==1){//\u64cd\u4f5c\u4e8c \n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tint s=0;\n\t\t\tfor(int i=x;i<=y;i++)\n\t\t\t\tif(query(i)&1==1)//\u524d\u7f00\u548c\u4e3a\u5947\u6570 \n\t\t\t\t\ts++;//\u7b54\u6848++ \n\t\t\tprintf(\"%d\\n\",s);\t\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539074911,
        "uid": 64355,
        "name": "dailt",
        "ccfLevel": 6,
        "title": "P2846 [USACO08NOV]\u5149\u5f00\u5173Light Switching\u9898\u89e3"
    },
    {
        "content": "# \u867d\u7136\u53ef\u4ee5\u5199\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u6211\u504f\u8981\u7528\u73c2\u6735\u8389\u6811(\u9a84\u50b2)\n\n\u6211\u4eec\u6765\u590d\u4e60\u4e00\u4e0b\u73c2\u6735\u8389\u6811\u7684\u57fa\u7840\u64cd\u4f5c\n\n\u6211\u4eec\u77e5\u9053\u73c2\u6735\u8389\u6811\u7ef4\u62a4\u7740\u62e5\u6709\u76f8\u540c\u503c\u7684\u4e00\u6574\u4e2a\u533a\u95f4\n\u6240\u4ee5\u5176\u8282\u70b9\u662f\u4e00\u4e2a\u533a\u95f4\n\n\u8282\u70b9\u5b9a\u4e49\n```cpp\nstruct Node {\n    mutable int l, r;\n    mutable bool v;\n    inline auto operator<(const Node & o)  const -> bool {\n        return l < o.l;\n    }\n};\n\n//\u7b49\u540ctypedef\nusing Iter = set<Node>::iterator;\n\nset<Node> odt;\n```\n\n\u57fa\u672c\u64cd\u4f5c\uff1a\u5206\u5272\u8282\u70b9(\u5206\u9694\u533a\u95f4)\n```cpp\nauto split(int p) -> Iter {\n    auto it = odt.lower_bound(Node {p, 0, false});\n    if(it != odt.end() && it->l == p) {\n        return it;\n    }\n    --it;\n    auto x = *it;\n    odt.erase(it);\n    odt.insert(Node {x.l, p - 1, x.v});\n    return odt.insert(Node {p, x.r, x.v}).first;\n}\n```\n\u6709\u4e86\u4e0a\u8fb9\u7684\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u62ff\u73c2\u6735\u8389\u6811~~\u6c34~~\u8fc7\u8fd9\u9053\u9898\u4e86\n\n~~\u5957\u6a21\u677f\u5c31\u5b8c\u4e86~~\n\u7ffb\u8f6c\u706f\u5149\n```cpp\nauto flip(int l, int r) -> void {\n    auto iterR = split(r + 1);//\u4e00\u5b9a\u8981\u5148split r + 1\n    auto iterL = split(l);\n    //\u66b4\u529b\u904d\u5386\u6240\u6709\u533a\u95f4\n    for (; iterL != iterR; ++iterL) {\n        iterL->v = !iterL->v;\n    }\n}\n\n```\n\n\u7edf\u8ba1\u4eae\u7740\u7684\u706f\n```cpp\nauto countLight(int l, int r) -> int {\n    int count = 0;\n    auto iterR = split(r + 1);\n    auto iterL = split(l);\n    for (; iterL != iterR; ++iterL) {\n        if(iterL->v) {\n            count += iterL->r - iterL->l + 1;\n        }\n    }\n    return count;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <set>\n\nusing namespace std;\n\nstruct Node {\n    mutable int l, r;\n    mutable bool v;\n    inline auto operator<(const Node & o)  const -> bool {\n        return l < o.l;\n    }\n};\n\nusing Iter = set<Node>::iterator;\n\nset<Node> odt;\n\nauto split(int p) -> Iter {\n    auto it = odt.lower_bound(Node {p, 0, false});\n    if(it != odt.end() && it->l == p) {\n        return it;\n    }\n    --it;\n    auto x = *it;\n    odt.erase(it);\n    odt.insert(Node {x.l, p - 1, x.v});\n    return odt.insert(Node {p, x.r, x.v}).first;\n}\nauto flip(int l, int r) -> void {\n    auto iterR = split(r + 1);\n    auto iterL = split(l);\n    for (; iterL != iterR; ++iterL) {\n        iterL->v = !iterL->v;\n    }\n}\n\nauto countLight(int l, int r) -> int {\n    int count = 0;\n    auto iterR = split(r + 1);\n    auto iterL = split(l);\n    for (; iterL != iterR; ++iterL) {\n        if(iterL->v) {\n            count += iterL->r - iterL->l + 1;\n        }\n    }\n    return count;\n}\n\nint main() {\n\t//\u52a0\u901f cin cout\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int n, m;\n    cin >> n >> m;\n    odt.insert(Node {1, n, false});//\u4e00\u5f00\u59cb\u6240\u6709\u706f\u90fd\u662f\u7184\u706d\u7684\n    for (int i = 0; i < m; ++i) {\n        int op, a, b;\n        cin >> op >> a >> b;\n        if(op == 0) {\n            flip(a, b);\n        } else {\n            cout << countLight(a, b) << endl;\n        }\n    }\n    return 0;\n}\n\n\n```\n~~(\u53cb\u60c5\u63d0\u793a \u6211\u662f\u6302\u6c27\u6c14\u8fc7\u7684)~~\n",
        "postTime": 1573128814,
        "uid": 146652,
        "name": "\u4e07\u7269\u4e00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u770b\u6ca1\u6709~~\u5c0f\u5b66\u5965\u6570\u7684~~\u6570\u7ec4\u7684\u89e3\u6cd5\u6211\u6765\u53d1\u4e00\u4e2a\u5427\n```cpp\n//\u8fd9\u9898\u7528short\u7684\u8bdd\u4f1a\u6ea2\u51fa!!!\n#include<iostream> \n#include<cstdbool> \nusing namespace std;\n//0\u5173  1\u5f00\nint lis[100000];\nint main(){\n    int n;\n    cin >> n;\n    int caozuoshu;\n    cin >> caozuoshu; \n    //\u64cd\u4f5c\u53ea\u67090 1\u8fd9\u91cc\u53ef\u4ee5\u7528bool\u503c\n    bool caozuo;\n    int qujian1,qujian2;\n    for (int i=0 ; i < caozuoshu ; i++){\n    \t//\u8bfb\u5165\u6bcf\u6b21\u7684\u6570\u636e\n        cin >> caozuo >> qujian1 >> qujian2;\n        //\u4e3a 0 \u65f6\u7684\u64cd\u4f5c\n        if(caozuo == 0){\n        for (int j = qujian1 -1;j <= qujian2-1;j++){\n                lis[j]=(!lis[j]);\n            }\n        }\n        //\u4e3a1\u65f6\u7684\u64cd\u4f5c\n        else{\n            int jishuqi=0;\n            for (int j=qujian1-1;j<=qujian2-1;j++){\n                if(lis[j]==1) jishuqi++; \n            }\n            cout << jishuqi << endl ;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1533814281,
        "uid": 120093,
        "name": "Ryang",
        "ccfLevel": 0,
        "title": "\u6570\u7ec4\u89e3\u6cd5"
    },
    {
        "content": "\u8fd9\u9898\u8c8c\u4f3c\u53ef\u4ee5\u4e0d\u7528\u5f02\u6216\u76842333\n\n~~\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u6839\u672c\u4e0d\u77e5\u9053\u600e\u4e48\u7528\u5f02\u6216\uff09~~\n\n\u4e3b\u8981\u5c31\u662f\u61d2\u6807\u8bb0\uff0c\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5de6\u51fb\u7684\u6b21\u6570\u662f\u5076\u6570\u6b21\uff0c\u90a3\u5c31\u662f\u72b6\u6001\u4e0d\u53d8\uff0c\u5982\u679c\u662f\u5947\u6570\u6b21\u5c31\u53cd\u8f6c\uff0c\u5176\u4ed6\u7684\u548c\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u4e00\u6837\n\n\u5177\u4f53\u770b\u4ee3\u7801\u597d\u4e862333\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn = 2e5 + 5;\n//\u7ebf\u6bb5\u6811\u7ed3\u70b9\nstruct Node {\n\t//cnt\u5b58[l,r]\u533a\u95f4\u91cc\u4eae\u706f\u4e2a\u6570\uff0ctag\u4e3a\u61d2\u6807\u8bb0\n\tint l, r, cnt;\n\tint tag;\n\tNode() {}\n\tNode(int l1, int r1, int cnt1, int tag1)\n\t{\n\t\tl = l1, r = r1, cnt = cnt1, tag = tag1;\n\t}\n}tree[maxn << 2];\nint ans, n, m;\n//\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u5168\u6697\u6240\u4ee5cnt\u548ctag\u90fd\u662f0\nvoid build(int o, int l, int r)\n{\n\ttree[o] = Node(l, r, 0, 0);\n\tif (l == r)\n\t\treturn;\n\tint mid = (l + r) >> 1;\n\tbuild(o << 1, l, mid);\n\tbuild(o << 1 | 1, mid + 1, r);\n}\n//\u666e\u901a\u7684\u4e0a\u6d6e\nvoid pushup(int o)\n{\n\tif (tree[o].l == tree[o].r)\n\t\treturn;\n\ttree[o].cnt = tree[o << 1].cnt + tree[o << 1 | 1].cnt;\n}\nvoid pushdown(int o)\n{\n\t//tag\u4e0b\u79fb\n\ttree[o << 1].tag += tree[o].tag;\n\t//\u6839\u636etag\u7684\u503c\uff08\u5373\u88ab\u5de6\u51fb\u7684\u6b21\u6570)\u5224\u65ad\u662f\u5426\u53cd\u8f6c\n\t//\u53cd\u8f6c\u5c31\u662fr-l+1-cnt\n\tfor (int i = 1; i <= (tree[o].tag) % 2; i++)\n\t\ttree[o << 1].cnt = tree[o << 1].r - tree[o << 1].l + 1 - tree[o << 1].cnt;\n\ttree[o << 1 | 1].tag += tree[o].tag;\n\tfor (int i = 1; i <= (tree[o].tag) % 2; i++)\n\t\ttree[o << 1 | 1].cnt = tree[o << 1 | 1].r - tree[o << 1 | 1].l + 1 - tree[o << 1 | 1].cnt;\n\ttree[o].tag = 0;\n}\nvoid update(int o, int l, int r)\n{\n\tif (tree[o].l >= l && tree[o].r <= r)\n\t{\n\t\t//\u88ab\u5de6\u51fb\uff0c\u5fc5\u5b9a\u53cd\u8f6c\uff0c\u53cd\u8f6c\u6b21\u6570+1\n\t\ttree[o].cnt = tree[o].r - tree[o].l + 1 - tree[o].cnt;\n\t\ttree[o].tag++;\n\t\treturn;\n\t}\n\t//\u4e0b\u9762\u5c31\u662f\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u7684\u9012\u5f52\u5347\u7ea7\u64cd\u4f5c\n\tpushdown(o);\n\tint mid = (tree[o].l + tree[o].r) >> 1;\n\tif (r <= mid)\n\t\tupdate(o << 1, l, r);\n\telse if (l > mid)\n\t\tupdate(o << 1 | 1, l, r);\n\telse\n\t{\n\t\tupdate(o << 1, l, mid);\n\t\tupdate(o << 1 | 1, mid + 1, r);\n\t}\n\tpushup(o);\n}\n//\u7167\u642c\u6a21\u677f\u7684\u67e5\u8be2\u64cd\u4f5c\nint query(int o, int l, int r)\n{\n\tif (tree[o].l >= l && tree[o].r <= r)\n\t\treturn tree[o].cnt;\n\tpushdown(o);\n\tint mid = (tree[o].l + tree[o].r) >> 1;\n\tif (r <= mid)\n\t\treturn query(o << 1, l, r);\n\telse if (l > mid)\n\t\treturn query(o << 1 | 1, l, r);\n\telse\n\t\treturn query(o << 1, l, mid) + query(o << 1 | 1, mid + 1, r);\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tbuild(1, 1, n);\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint a, l1, r1;\n\t\tscanf(\"%d%d%d\", &a, &l1, &r1);\n\t\tif (a == 0)\n\t\t\tupdate(1, l1, r1);\n\t\tif (a == 1)\n\t\t{\n\t\t\tans = query(1, l1, r1);\n\t\t\tprintf(\"%d\\n\", ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531294395,
        "uid": 98032,
        "name": "Teddy_Di",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\u70b9\uff1a\u7ebf\u6bb5\u6811 \uff08\u4e0d\u4f1a\u7684\u540c\u5b66\u8bf7\u505a[\u7ebf\u6bb5\u68111](https://www.luogu.org/problem/P3372)\uff09\n\n\u9996\u5148\u89c2\u5bdf\u6b64\u9898\u7279\u70b9\uff0c\u628a\u9898\u9762\u62bd\u8c61\u4e00\u4e0b\uff1a\n\n\u7ed9\u4f60n\u4e2a\u70b9\uff0c\u6743\u503c\u521d\u59cb\u5168\u4e3a0\uff0c\u73b0\u5728\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u5c06 l ~ r\u7684\u533a\u95f4\u5168\u90e8\u5f02\u6216\n\n2. \u67e5\u8be2l ~ r\u7684\u533a\u95f4\u6709\u591a\u5c11\u4e3a1\n\n\u4e0d\u96be\u770b\u51fa\u6b64\u9898\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u533a\u95f4\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u7ebf\u6bb5\u6811\u9700\u8981\u5e264\u4e2a\u53d8\u91cf\uff1a\n```cpp\nstruct node{\n\tint l,r;//\u533a\u95f4\u7aef\u70b9\n\tint sum;//\u533a\u95f4\u4e2d\u6743\u503c\u4e3a1\u7684\u4e2a\u6570\n\tint lz;//\u61d2\u6807\u8bb0\n}tree[400010];\n```\n\n\u7531\u4e8e\u662f\u533a\u95f4\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a\n\n1. \u5982\u4f55\u7ef4\u62a4sum\uff08\u4fee\u6539\u64cd\u4f5c\uff09\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2a\u533a\u95f4\u5168\u90e8\u5f02\u6216\uff0c\u90a3\u4e48\u6b64\u65f6\u6743\u503c\u4e3a1\u70b9\u7684\u5176\u5b9e\u5c31\u662f\u4ee5\u524d\u6743\u503c\u4e3a0\u7684\u70b9\uff1b\n\n\u8003\u8651\u6743\u503c\u4e3a0\u7684\u70b9\u5982\u4f55\u8868\u793a\uff1a\u6240\u6709\u70b9-\u6743\u503c\u4e00\u7684\u70b9\u3002\n\n\u81f3\u4e8e\u61d2\u6807\u8bb0\uff0c\u6211\u4eec\u53ea\u8981\u5c06\u4ed6\u4e0e1\u5f02\u6216\u5c31\u597d\n\n\u5373\n```cpp\ntree[i].lz^=1;\ntree[i].sum=tree[i].r-tree[i].l+1-tree[i].sum;\n```\n\n2. \u5982\u4f55\u7ef4\u62a4\u61d2\u6807\u8bb0\uff08\u4e0b\u4f20\u64cd\u4f5c\uff09\n\n\u6211\u4eec\u6bcf\u6b21\u5728\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u90fd\u9700\u8981\u4e0b\u4f20\u4e00\u6b21\uff0c\u628a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u5206\u914d\u7ed9\u4e24\u4e2a\u513f\u5b50\uff0c\u56e0\u4e3a\u6b64\u533a\u95f4\u7684\u61d2\u6807\u8bb0\u5df2\u7ecf\u88ab\u4fee\u6539\u8fc7\u4e86\uff0c\u4f46\u4ed6\u7684\u513f\u5b50\u5374\u5e76\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u9700\u8981\u4e0b\u4f20\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u5de6\u53f3\u513f\u5b50\u505a\u51fa\u4fee\u6539\u64cd\u4f5c\uff1a\n\n\u7ed9\u51fa\u7247\u6bb5\u4ee3\u7801\uff1a\n```cpp\ninline void push_down(int i)\n{\n\tif (tree[i].lz)\n\t   {\n\t   tree[i<<1].sum=(tree[i<<1].r-tree[i<<1].l+1)-tree[i<<1].sum;\n\t   tree[(i<<1)|1].sum=(tree[(i<<1)|1].r-tree[(i<<1)|1].l+1)-tree[(i<<1)|1].sum;\n\t   tree[i<<1].lz^=1;\n\t   tree[(i<<1)|1].lz^=1;\n\t   tree[i].lz=0;\n\t   }\n}\n```\n\n\u5176\u4ed6\u7684\u6309\u5e38\u89c4\u7ebf\u6bb5\u6811\u64cd\u4f5c\u5373\u53ef\uff1a\n\n\u7ed9\u51faAC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()//\u8bfb\u5165\n{\n\tint x=0;\n\tchar c=getchar();\n\tbool f=0;\n\twhile (!isdigit(c))\n\t\t  f|=(c=='-'),c=getchar();\n\twhile (isdigit(c))\n\t\t  x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn x;\n}\nint n,m;\nstruct node{\n\tint l,r;\n\tint sum;\n\tint lz;\n}tree[400010];\ninline void push_down(int i)//\u4e0b\u4f20\n{\n\tif (tree[i].lz)\n\t   {\n\t   tree[i<<1].sum=(tree[i<<1].r-tree[i<<1].l+1)-tree[i<<1].sum;\n\t   tree[(i<<1)|1].sum=(tree[(i<<1)|1].r-tree[(i<<1)|1].l+1)-tree[(i<<1)|1].sum;\n\t   tree[i<<1].lz^=1;\n\t   tree[(i<<1)|1].lz^=1;\n\t   tree[i].lz=0;\n\t   }\n}\ninline void build(int i,int l,int r)//\u5efa\u6811\n{\n\ttree[i].l=l,tree[i].r=r;\n\tif (l==r)//\u53f6\u8282\u70b9\n\t   {\n\t   tree[i].sum=0;\n\t   return ;\n\t   }\n\tint mid=(l+r)>>1;\n\tbuild(i<<1,l,mid);//\u5bf9\u4ed6\u7684\u5de6\u53f3\u513f\u5b50\u5efa\u6811\n\tbuild((i<<1)|1,mid+1,r);\n}\ninline void update(int i,int l,int r)//\u4fee\u6539\n{\n\tif (tree[i].l>=l&&tree[i].r<=r)//\u5b8c\u5168\u5305\u542b\u76f4\u63a5\u4fee\u6539\n\t   {\n\t   tree[i].lz^=1;\n\t   tree[i].sum=tree[i].r-tree[i].l+1-tree[i].sum;\n\t   return ;\n\t   }\n\tpush_down(i);\n\tif (l<=tree[i<<1].r)//\u5982\u679c\u5de6\u53f3\u513f\u5b50\u4e0e\u533a\u95f4\u6709\u4ea4\u96c6\u5c31\u53bb\u4fee\u6539\u5de6\u53f3\u513f\u5b50\n\t   update(i<<1,l,r);\n\tif (r>=tree[(i<<1)|1].l)\n\t   update((i<<1)|1,l,r);\n\ttree[i].sum=tree[i<<1].sum+tree[(i<<1)|1].sum;\n}\ninline int query(int i,int l,int r)//\u67e5\u8be2\n{\n\tif (tree[i].l>=l&&tree[i].r<=r)//\u5b8c\u5168\u5305\u542b\u76f4\u63a5\u8fd4\u56de\n\t   return tree[i].sum;\n\tpush_down(i);\n\tint sum=0;\n\tif (l<=tree[i<<1].r)//\u5982\u679c\u5de6\u53f3\u513f\u5b50\u4e0e\u533a\u95f4\u6709\u4ea4\u96c6\u5219\u67e5\u8be2\u5de6\u53f3\u513f\u5b50\n\t   sum+=query(i<<1,l,r);\n\tif (r>=tree[(i<<1)|1].l)\n\t   sum+=query((i<<1)|1,l,r);\n\treturn sum;\n}\nint main(){\n\tn=read(),m=read();\n\tbuild(1,1,n);\n\tfor (register int i=1;i<=m;++i)\t\n\t\t{\n\t\tint c,a,b;\n\t\tc=read(),a=read(),b=read();\n\t\tif (!c)\n\t\t   update(1,a,b);\n\t\telse\n\t\t   printf(\"%d\\n\",query(1,a,b));\n\t\t}\n\treturn 0;\n}\n//\u8fd9\u6837\u5c31\u53ef\u4ee5AC\u4e86\n```",
        "postTime": 1572870058,
        "uid": 125443,
        "name": "Dawn_Sdy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "## \u6307\u9488\u9898\u89e3\u6765\u4e00\u53d1\uff01\uff01\uff01\n\u8fd9\u9053\u9898\u5f88\u7b80\u5355\uff0c\u4e00\u773c\u5207\u3002\n\n\u6211\u4eec\u8003\u8651\u533a\u95f4\u5f02\u6216\u4ee5\u540e\uff0c\u8fd9\u4e2a\u533a\u95f41\u7684\u4e2a\u6570\u5c31\u53d8\u4e3a\u4e86len - \u539f\u6765\u7684\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u6807\u8bb0\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53d6\u5f02\u6216\u6765\u7ef4\u62a4\u5c31\u884c\u4e86\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int N = 200020;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m;\nchar s[N];\nstruct Segment_tree\n{\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , sum , tag;\n\t\tnode (int l = 0,int r = 0) : l(l) , r(r) {sum = tag = 0;}\n\t\tinline int len() {return r - l + 1;}\n\t\tinline void up() {sum = ls -> sum + rs -> sum;}\n\t\tinline void down() \n\t\t{\n\t\t\tif(tag)\n\t\t\t{\n\t\t\t\tls -> tag ^= 1;\n\t\t\t\trs -> tag ^= 1;\n\t\t\t\ttag = 0;\n\t\t\t\tls -> sum = ls -> len() - ls -> sum;\n\t\t\t\trs -> sum = rs -> len() - rs -> sum;\n\t\t\t}\n\t\t}\n\t}*root , pool[N] , *tail;\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new (tail ++)node(l,r);\n\t\tif(l == r)\treturn;\n\t\tbuild(p -> ls,l,mid);\n\t\tbuild(p -> rs,mid+1,r);\n\t\tp -> up();\n\t}\n\tvoid chenge(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y)\t\n\t\t{\n\t\t\tp -> tag ^= 1;\n\t\t\tp -> sum = p -> len() - p -> sum;\n\t\t\treturn;\n\t\t}\n\t\tif(p -> tag)\tp -> down();\n\t\tif(x <= mid) chenge(p -> ls,x,y);\n\t\tif(y > mid)\tchenge(p -> rs,x,y);\n\t\tp -> up();\n\t}\n\tint query(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y)\treturn p -> sum;\n\t\tif(p -> tag)\tp -> down();\n\t\tint res = 0;\n\t\tif(x <= mid)\tres += query(p -> ls,x,y);\n\t\tif(y > mid)\t\tres += query(p -> rs,x,y);\n\t\treturn res;\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tbuild(root,1,n);\n\t\tfor(int i = 1 , opt , l , r;i <= m;i ++)\n\t\t{\n\t\t\topt = read(); l = read(); r = read();\n\t\t\tif(opt & 1)\tprintf(\"%d\\n\",query(root,l,r));\n\t\t\telse chenge(root,l,r);\n\t\t}\n\t}\n\tSegment_tree() {tail = pool;}\n}CF;\nint main()\n{\n\tCF.LOL();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1568625500,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u7ffb\u9898\u7684\u8fc7\u7a0b\u4e2d\u65e0\u610f\u770b\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u4e00\u770b\u5728\u80fd\u529b\u8303\u56f4\u4e4b\u5185\u5c31\u505a\u4e86  \n\u8fd9\u9898\u96be\u5ea6\u5e94\u8be5\u4e0d\u5927\uff0c\u4f46\u9700\u8981\u601d\u8003\u4e00\u4e0b\n\n------\n## \u6b65\u5165\u6b63\u9898\n\u5927\u81f4\u5148\u770b\u4e00\u904d\u9898\u76ee\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u6570\u636e\u8303\u56f4(n+m)log n\u53ef\u4ee5\u8fc7\uff0c\u65e0\u7591\u8fd9\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3  \n\u5bf9\u4e8e\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u68111\uff0c\u6211\u4eec\u53ea\u7528\u8fdb\u884c\u4e00\u4e9b\u5c0f\u5c0f\u7684\u4fee\u6539\n - \u6bcf\u4e2a\u8282\u70b9\u7684data\u5206\u522b\u8bb0\u5f55\u533a\u95f40\u548c\u533a\u95f41\u7684\u4e2a\u6570\n - \u6bcf\u4e2a\u8282\u70b9\u7684lazytag\u8bb0\u5f55\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u9700\u8981\u4fee\u6539\n - \u4fee\u6539\u7684\u65f6\u5019\u76f4\u63a5swap(data0,data1)\u5373\u53ef\n - \u8fd9\u91cc\u7684lazytag\u4e0d\u8fdb\u884c\u7d2f\u52a0\uff0c\u800c\u662f\u53d6\u53cd\uff0c\u4ee5\u524d\u662f1\u73b0\u5728\u5219\u4e3a0\uff0c\u4ee5\u524d\u662f0\u73b0\u5728\u5219\u4e3a1\n - \u533a\u95f4\u67e5\u8be2\u5c31\u4e0e\u6a21\u677f\u4e00\u6837\u7edf\u8ba1data1\u5373\u53ef\n\n---\n### \u653e\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define N (100000+5)\nusing namespace std;\nstruct node{\n\tint l,r;\n\tint data0,data1;\n\tint tag;\n}a[N*4];\nvoid change(int p,int l,int r);\nvoid down(int p){\n\tif(a[p].l==a[p].r)return;\n\tchange(p*2,a[p*2].l,a[p*2].r);\n\tchange(p*2+1,a[p*2+1].l,a[p*2+1].r);\n\ta[p].tag=0;\n}\nint ask(int p,int l,int r){\n\tif(a[p].l>=l&&a[p].r<=r)\n\t  return a[p].data1;\n\tif(a[p].tag)down(p);\n\tint mid=(a[p].l+a[p].r)>>1;\n\tint sum=0;\n\tif(mid>=l)sum+=ask(p*2,l,r);\n\tif(mid<r)sum+=ask(p*2+1,l,r);\n\treturn sum;\n}\nvoid change(int p,int l,int r){\n\tif(a[p].l>=l&&a[p].r<=r){\n\t\tint t=a[p].data0;\n\t\ta[p].data0=a[p].data1;\n\t\ta[p].data1=t;\n\t\ta[p].tag=(a[p].tag==1?0:1);\n\t\treturn;\n\t}\n\tif(a[p].tag)down(p);\n\tint mid=(a[p].l+a[p].r)>>1;\n\tif(mid>=l)change(p*2,l,r);\n\tif(mid<r)change(p*2+1,l,r);\n\ta[p].data0=a[p*2].data0+a[p*2+1].data0;\n\ta[p].data1=a[p*2].data1+a[p*2+1].data1;\n}\nvoid build(int p,int l,int r){\n\ta[p].l=l;a[p].r=r;a[p].tag=0;\n\ta[p].data0=r-l+1;a[p].data1=0;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n}\nint main()\n{\n\t//freopen(\"testdata(52).in\",\"r\",stdin);\n\tint n,m,x,y,z;\n\tscanf(\"%d%d\",&n,&m);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x)printf(\"%d\\n\",ask(1,y,z));\n\t\telse change(1,y,z);\n\t\t//printf(\"f: %d\\n\",ask(1,1,n));\n\t}\n\treturn 0;\n}\n```\nQwQ\u7ebf\u6bb5\u6811\u6700\u68d2\u4e86",
        "postTime": 1542965713,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "~~\u7ebf\u6bb5\u6811\u8fd9\u65b9\u9762\u2026\u2026\u7ebf\u6bb5\u6811\u662f\u4e0d\u53ef\u80fd\u5199\u7684\uff0c\u8fd9\u8f88\u5b50\u4e0d\u53ef\u80fd\u5199\u7ebf\u6bb5\u6811\u7684\u3002~~\n\n\u9898\u610f\u5c31\u662f\u8ba9\u4f60\u5904\u7406\u4e00\u4e2a01\u6570\u7ec4\u7684 \u533a\u95f4\u5f02\u6216$1$ \u548c \u533a\u95f4\u6c42\u548c\u3002\n\n\u663e\u7136\u672c\u9898\u53ef\u4ee5\u5206\u5757\u3002\n\n\u4e0d\u719f\u6089\u5206\u5757\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b[\u300c\u5206\u5757\u300d\u6570\u5217\u5206\u5757\u5165\u95e81 \u2013 9 by hzwer](http://hzwer.com/8053.html)\u3002\n\n\u6211\u4eec\u628a$d$\u4e2a\u5143\u7d20\u5206\u4e3a\u4e00\u5757\uff0c\u5171\u6709$n/d$\u5757\u3002\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u5904\u7406\u533a\u95f4\u5305\u542b\u7684\u6bcf\u4e2a\u6574\u5757\u548c\u4e24\u4e2a\u4e0d\u5b8c\u6574\u7684\u5757\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6574\u5757\uff0c\u6211\u4eec\u8bb0\u5f55\u6574\u4e2a\u5757\u88ab\u5f02\u6216\u7684\u6b21\u6570$(mod 2)$\u548c\u5757\u5185\u7684\u7b54\u6848\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u8bb0\u5f55\u5b83\u88ab\u5355\u4e2a\u5f02\u6216\u7684\u6b21\u6570$(mod 2)$\u3002\n\n\u5b9e\u73b0\u65f6\u9700\u8981\u6ce8\u610f\u4ee3\u7801\u4e2d\u4e00\u4e9b$+1$\uff0c$-1$\u7684\u73a9\u610f\uff0c\u5e76\u4e14\u5206\u6e05\u695a\u5757\u7684\u4e0b\u6807\u548c\u6570\u7ec4\u7684\u4e0b\u6807\u3002\n\n\u663e\u7136\uff0c\u5f53$d=\\sqrt n$\u65f6,\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u79c0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt n)$\u3002\n```\n//\u5de8\u4e11\u65e0\u6bd4\u7684\u4ee3\u7801\n#include<cstdio>\n#include<cmath>\ninline int read(){\n\tint a=0;char c=getchar();\n\tfor(;c<48||c>57;c=getchar());for(;c>47&&c<58;a=a*10+c-48,c=getchar());\n\treturn a;\n}\ninline int min(int a,int b){return a<b?a:b;}\nconst int N=1e5+1,D=322;\nint n,m,d,a[N],da[D],ds[D],p[N];\n//n,m,\u5757\u7684\u5927\u5c0f\uff0c\u5143\u7d20\u88ab\u5355\u4e2a\u5f02\u6216\u7684\u6b21\u6570(mod 2)\uff0c\u6574\u4e2a\u5757\u88ab\u5f02\u6216\u7684\u6b21\u6570(mod 2)\uff0c\u5757\u5185\u7684\u7b54\u6848\uff0c\u5143\u7d20\u6240\u5728\u5757\u7684\u7f16\u53f7\ninline int Xor(int l,int r){\n\tfor(int i=l;i<=min(p[l]*d,r);i++)ds[p[i]]+=a[i]^da[p[i]]?-1:1,a[i]^=1;\n\tif(p[l]!=p[r])for(int i=r;i>p[r]*d-d;i--)ds[p[i]]+=a[i]^da[p[i]]?-1:1,a[i]^=1;\n\tfor(int j=p[l]+1;j<p[r];j++)da[j]^=1,ds[j]=d-ds[j];\n}\ninline int Sum(int l,int r){\n\tint s=0;\n\tfor(int i=l;i<=min(p[l]*d,r);i++)s+=a[i]^da[p[i]];\n\tif(p[l]!=p[r])for(int i=r;i>p[r]*d-d;i--)s+=a[i]^da[p[i]];\n\tfor(int j=p[l]+1;j<p[r];j++)s+=ds[j];\n\treturn s;\n}\nint main(){\n\td=sqrt(n=read());m=read();\n\tfor(int i=1;i<=n;i++)p[i]=(i-1)/d+1;\n\tfor(int o,l,r;m--;)\n\t  o=read(),l=read(),r=read(),\n\t  o?printf(\"%d\\n\",Sum(l,r)):Xor(l,r);\n\treturn 0;\n}\n```",
        "postTime": 1533553332,
        "uid": 72487,
        "name": "Dreamunk",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u4e00\u9053**\u7ebf\u6bb5\u6811\u533a\u95f4\u5f02\u6216+\u533a\u95f4\u6c42\u503c**\u7684\u9898\u76ee\n\n\u5199\u8fd9\u7bc7\u9898\u89e3\u662f\u4e3a\u4e86\u81ea\u5df1\u80fd\u66f4\u597d\u7684\u638c\u63e1\u8fd9\u4e2a\u6280\u5de7+**\u66f4\u8be6\u7ec6\u7684\u6ce8\u91ca\u89e3\u6790\u3002**\n\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff0c\u6ce8\u91ca\u5728\u4ee3\u7801\u4e0a\u2014\u2014\n```\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 200005\nusing namespace std;\nint sum[MAXN<<2],lazy[MAXN<<2];\nint n,m,a[MAXN<<2];\n/*\u867d\u7136\u8bf4\u666e\u901a\u7ebf\u6bb5\u6811\u5f00\u4e24\u500d\u7a7a\u95f4\u8c8c\u4f3c\u5c31\u591f\u4e86\uff0c\u4f46\u662f\u6211\u4e5f\u4e0d\u77e5\u9053\u7a76\u7adf\u54ea\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e24\u500d\u4e0d\u591f\uff0c\u6240\u4ee5\u4e3a\u4e86\u4fdd\u9669\uff0c\u6570\u7ec4\u65e5\u5e38\u5f00\u5927\u4e00\u70b9\n\u56e0\u4e3a\u53ea\u662f\u7edf\u8ba1\u4eae\u706f\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u75280/1\u5206\u522b\u6765\u5206\u522b\u8868\u793a\u706f\u7684\u6697/\u4eae\uff0c\u800c\u56e0\u4e3a\u706f\u4e00\u5f00\u59cb\u90fd\u662f\u706d\u7740\u7684\uff0c\u6240\u4ee5\u521d\u59cb\u6570\u7ec4\u4e3a\u96f6\u3002 */\ninline int ls(int x)\n{\n    return x<<1;\n}\ninline int rs(int x)\n{\n    return x<<1|1;\n}\ninline void push_up(int root)\n{\n    sum[root]=sum[ls(root)]+sum[rs(root)];\n}\n//\u7528\u5b50\u8282\u70b9\u4fe1\u606f\u7ef4\u62a4\u7236\u8282\u70b9\ninline void build(int root,int l,int r)\n{\n    if(l==r)\n    {\n        //scanf(\"%1d\",&sum[root]);\n        sum[root]=a[l];\n        return;\n    }\n    //\u5982\u679c\u76f8\u7b49\uff0c\u8bf4\u660e\u5230\u8fbe\u4e86\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u4e3a\u5b83\u8d4b\u503c\u5e76\u8fd4\u56de\n    int mid=(l+r)>>1;\n    build(ls(root),l,mid);\n    build(rs(root),mid+1,r);\n    push_up(root);\n}\n//\u9012\u5f52\u5efa\u6811\ninline void push_down(int root,int len)\n{\n    if(lazy[root])\n    /*\u5f02\u62161\u5c31\u662f\u53d6\u53cd\uff0c\u800c\u56e0\u4e3a\u53d6\u53cd\u4e24\u6b21\u8fd8\u662f\u81ea\u5df1\uff0c\u6240\u4ee5\u53ea\u6709\u5f53lazy\u8bb0\u5f55\u76841\u7684\u65f6\u5019\u9700\u8981\u53d6\u53cd\u64cd\u4f5c*/\n    {\n        lazy[ls(root)]^=1;\n        lazy[rs(root)]^=1;\n        //\u61d2\u6807\u8bb0\u53d6\u53cd\n        sum[ls(root)]=(len-(len>>1))-sum[ls(root)];\n        sum[rs(root)]=(len>>1)-sum[rs(root)];\n        /*\u503c\u53d6\u53cd\uff1a\u8be5\u8282\u70b9\u5b50\u6811\u7ed3\u70b9\u4e2a\u6570\uff08\u5373\u533a\u95f4\u603b\u957f\u5ea6\uff09\u51cf\u53bb\u5b83\u539f\u5148\u7684\u503c......\u5982\u679c\u6709\u5bf9len-(len>>1)\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u624b\u52a8\u753b\u4e00\u68f5\u7b80\u5355\u7684\u6811\u770b\u4e00\u770b\u5b83\u8bb0\u5f55\u7684\u533a\u95f4\u5c31\u660e\u767d\u4e86\u3002\n        \u6ce8\u610f\u4f4d\u8fd0\u7b97\u4f18\u5148\u7ea7\u6bd4\u52a0\u51cf\u4f4e\uff01\u6211\u5f00\u59cb\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\u9519\u7684\uff01\u6240\u4ee5\u4e00\u5b9a\u6ce8\u610f\u52a0\u62ec\u53f7......*/\n        lazy[root]=0;\n    }\n}\n//\u4ee5\u4e0a\u662f\u5c06\u7236\u8282\u70b9\u7684\u4fe1\u606f\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\ninline void update(int root,int l,int r,int ll,int rr)\n{\n    if(ll<=l&&r<=rr)\n    {\n        lazy[root]^=1;\n        sum[root]=r-l+1-sum[root];\n        return;\n    }\n    int mid=(l+r)>>1;\n    push_down(root,r-l+1);\n    if(ll<=mid)  update(ls(root),l,mid,ll,rr);\n    if(mid<rr)  update(rs(root),mid+1,r,ll,rr);\n    push_up(root);\n}\n//\u66f4\u65b0\ninline int query(int root,int l,int r,int ll,int rr)\n{\n    if(ll<=l&&r<=rr)   return sum[root];\n    push_down(root,r-l+1);\n    int mid=(l+r)>>1;\n    int sum=0;\n    if(ll<=mid)  sum+=query(ls(root),l,mid,ll,rr);\n    if(mid<rr)    sum+=query(rs(root),mid+1,r,ll,rr);\n    return sum;\n}\n//\u67e5\u8be2\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    build(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int p,l,r;\n        scanf(\"%d%d%d\",&p,&l,&r);\n        if(p==0)\n        {\n            update(1,1,n,l,r);\n        }\n        else\n        {\n            printf(\"%d\\n\",query(1,1,n,l,r));\n        }\n    }\n    return 0;\n} \n```\n\u4ee5\u4e0a\u3002\n### \u53cc\u500d\u7ecf\u9a8c\u8bf7\u770bXOR\u7684\u827a\u672f",
        "postTime": 1532563189,
        "uid": 107488,
        "name": "\u98ce\u6d54\u51cc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "## ~~\u5927\u6c34\u9898\u54df~~\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u75280\u8868\u793a\u706f\u6697\uff0c1\u8868\u793a\u4eae\uff0c\u90a3\u4e48\u7531\u4e8e**\u5f02\u6216\u64cd\u4f5c\uff1a\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1**\uff0c\u5728\u53d6\u53cd\u65f6\u6211\u4eec\u53ea\u8981^1(\u5f02\u62161)\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u5176\u4f59\u64cd\u4f5c\u5c31\u53ea\u662f\u4e00\u822c\u7684\u7ebf\u6bb5\u6811 \u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2 \u5427...\n\n\n\u8fd8\u6709\uff0c\u533a\u95f4\u4e0a\u7684\u8bdd\u5343\u4e07\u522b\u5fd8\u4e86\u6807\u8bb0\u3002\n\n\n\u5927\u6982\u662f\u7ebf\u6bb5\u6811\u4e2d\u4ee3\u7801\u6700\u77ed\u7684\u4e00\u7c7b\u9898\u4e86...~~\u4e3a\u538b\u884c\u800c\u751f~~\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cctype>\n#include <cmath>\n#define il inline\n#define lu u<<1\n#define ru u<<1^1\n#define go return\nusing namespace std;\nint rd(){int x=0; char c=getchar();\n    while(!isdigit(c)) c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+c-48,c=getchar();\n    return x;\n}\nil void rt(int x){x>=10?rt(x/10),putchar(x%10+48):putchar(x+48);}\nstruct tree{\n    int l,r,v,f;\n}a[400005]; //4\u500d\u7a7a\u95f4\u522b\u5fd8\nint n=rd(),m=rd(),t,x,y,ans;\nil void build(int u,int ul,int ur){\n    a[u].l=ul,a[u].r=ur;\n    if(ul==ur) go;\n    int mid=ul+ur>>1;\n    build(lu,ul,mid),build(ru,mid+1,ur);\n}  //\u5efa\u6811\nil void down(int u){\n    a[lu].f^=1,a[ru].f^=1,a[u].f=0,\n    a[lu].v=a[lu].r-a[lu].l+1-a[lu].v,\n    a[ru].v=a[ru].r-a[ru].l+1-a[ru].v;\n}  //\u4e0b\u4f20\u6807\u8bb0\nil int update(int u){\n    if(a[u].r<x||a[u].l>y) go 0;\n    if(a[u].l>=x&&a[u].r<=y){\n        a[u].f^=1,a[u].v=a[u].r-a[u].l+1-a[u].v; go 0; //\u6807\u8bb0\u4e5f\u53ea\u8981\u53d6\u53cd\u5c31\u884c\uff1b\u4fee\u6539\u7b49\u540c\u4e8e\u4e00\u6bb5\u533a\u95f4\u51850\u548c1\u7684\u4e2a\u6570\u4e92\u6362\uff0c\u800c0\u7684\u4e2a\u6570\u662f\u603b\u4e2a\u6570\u51cf\u53bb1\u7684\u4e2a\u6570~\n    }\n    if(a[u].f) down(u);\n    update(lu),update(ru),a[u].v=a[lu].v+a[ru].v;\n}    \nil int query(int u){\n    if(a[u].r<x||a[u].l>y) go 0;\n    if(a[u].l>=x&&a[u].r<=y){ans+=a[u].v; go 0;}\n    if(a[u].f) down(u);\n    query(lu),query(ru);\n}  //\u67e5\u8be2\nint main(){\n    build(1,1,n);\n    while(m--) t=rd(),x=rd(),y=rd(),\n        t?ans=0,query(1),rt(ans),putchar('\\n'):update(1);\n    go 0;\n}\n```",
        "postTime": 1516975601,
        "uid": 27463,
        "name": "Shallowy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u57fa\u7840\u7ebf\u6bb5\u6811\u3002\u5f00\u4e24\u4e2a\u53d8\u91cf\uff0c\u5b58\u5f53\u524d\u7ebf\u6bb5\u4e0a0\u548c1\u7684\u6570\u91cf\uff0c\u6bcf\u6b21\u52a8\u5f00\u5173\u5c31\u662fswap\u4e00\u4e0b0\u548c1\u7684\u6570\u91cf\uff0c\u7edf\u8ba1\u65f6\u7528\u7d2f\u52a0\u3002\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nclass bigpig\n\n{\npublic:\n\n```cpp\n        void build(int l,int r,int k)\n        {\n            tree[k].left=l,tree[k].right=r;\n            if(l==r)tree[k].data0=1,tree[k].flag=0,tree[k].kkk=1;\n            else\n            {\n                int mid=(l+r)>>1;\n                build(l,mid,k<<1),build(mid+1,r,(k<<1)+1);\n                tree[k].data0=tree[k<<1].data0+tree[(k<<1)+1].data0,tree[k].kkk=1;\n            }\n            return;\n        }\n        int query(int l,int r,int k)\n        {\n            int mid=(tree[k].left+tree[k].right)>>1;\n            if(tree[k].right<l || tree[k].left>r)return 0;\n            if(tree[k].flag)pushdown(k);\n            if(tree[k].left==l && tree[k].right==r)return tree[k].data1;\n            if(r<=mid)return query(l,r,k<<1);\n            if(l>mid)return query(l,r,(k<<1)+1);\n            return query(l,mid,k<<1)+query(mid+1,r,(k<<1)+1);\n        }\n        void insert(int l,int r,int k)\n        {\n            int mid=(tree[k].left+tree[k].right)>>1;\n            if(tree[k].right<l || tree[k].left>r)return;\n            if(tree[k].flag)pushdown(k);\n            if(tree[k].left==l && tree[k].right==r){swap(tree[k].data0,tree[k].data1),swap(tree[k].flag,tree[k].kkk);return;}\n            if(r<=mid)insert(l,r,k<<1);\n            else if(l>mid)insert(l,r,(k<<1)+1);\n            else insert(l,mid,k<<1),insert(mid+1,r,(k<<1)+1);\n            tree[k].data0=tree[k<<1].data0+tree[(k<<1)+1].data0;\n            tree[k].data1=tree[k<<1].data1+tree[(k<<1)+1].data1;\n            return;\n        }\n        void pushdown(int k)\n        {\n            swap(tree[k<<1].flag,tree[k<<1].kkk);\n            swap(tree[(k<<1)+1].flag,tree[(k<<1)+1].kkk);\n            swap(tree[k<<1].data0,tree[k<<1].data1);\n            swap(tree[(k<<1)+1].data0,tree[(k<<1)+1].data1);\n            swap(tree[k].flag,tree[k].kkk);\n            return;\n        }\n        void print(int n)\n        {\n            int q=1,p[15]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383};\n            for(int i=1;i<=2*n-1;i++)\n            {\n                cout<<\" i:\"<<i<<\" l:\"<<tree[i].left<<\" r:\"<<tree[i].right<<\" d0:\"<<tree[i].data0<<\" d1:\"<<tree[i].data1<<\" f:\"<<tree[i].flag<<endl;\n                if(i==p[q])cout<<endl,q++; \n            }\n            return;\n        }\n```\nprivate:\n```cpp\n        struct smallpig\n        {\n            int left,right,data0,data1,flag,kkk;\n        }tree[400005];\n};\nbigpig t;\nint n,m;\nint main()\n{\n    cin>>n>>m;\n    t.build(1,n,1);\n    for(int i=1,x,y,z;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        if(x)cout<<t.query(y,z,1)<<endl;\n        else t.insert(y,z,1);\n    }\n    return 0;\n}\n```",
        "postTime": 1495287246,
        "uid": 20564,
        "name": "\u963f\u5ed6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u533a\u95f4\u548c\u6a21\u677f\u3002\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5305\u542b\uff1a\u533a\u95f4\u6709\u51e0\u4e2a\u4e00\uff0c\u533a\u95f4\u957f\u5ea6\n\n\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u533a\u95f4\u6709\u51e0\u4e2a\u4e00\u5c31\u53ef\u4ee5\u5c31\u6539\u6210\uff1a\u533a\u95f4\u957f\u5ea6-\u533a\u95f4\u6709\u51e0\u4e2a\u4e00\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a$tag$\uff0c\u89c2\u5bdf\u4e00\u4e0b\u6027\u8d28\u5c31\u80fd\u5f97\u51fa\uff0c\u6211\u4eec\u6bcf\u6b21\u628a$tag$\u5f02\u62161\u5373\u53ef\uff0c\u4e0b\u653e\u6807\u8bb0\u7684\u65f6\u5019\u5224\u65ad$tag$\u7b49\u4e8e1\u7684\u65f6\u5019\u518d\u4e0b\u653e\u3002\n\n\u7136\u540e\u7b54\u6848\u5c31\u662f\u533a\u95f4\u548c\u7684\u6a21\u677f\u4e86\u3002\n\n$Code:$\n```cpp\n#include <bits/stdc++.h>\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1\n\nusing namespace std;\n\nconst int N = 100000 + 5;\n\nint n , m;\n\nstruct Seg {\n\tint l , r , dis , add , len;\n\tSeg() {add = 0;}\n}t[N << 2];\n\nvoid pushup(int x) {\n\tt[x].dis = t[ls(x)].dis + t[rs(x)].dis;\n}\n\nvoid built(int x , int l , int r) {\n\tt[x].l = l , t[x].r = r;\n\tt[x].len = r - l + 1;\n\tif(l == r) {\n\t\tt[x].dis = 0; return;\n\t}\n\tint mid = l + r >> 1;\n\tbuilt(ls(x) , l , mid);\n\tbuilt(rs(x) , mid + 1 , r);\n\tpushup(x);\n}\n\nvoid pushdown(int x) {\n\tif(t[x].add) {\n\t\tint tag = t[x].add;\n\t\tt[ls(x)].add ^= tag;\n\t\tt[ls(x)].dis = t[ls(x)].len - t[ls(x)].dis;\n\t\tt[rs(x)].add ^= tag;\n\t\tt[rs(x)].dis = t[rs(x)].len - t[rs(x)].dis;\n\t\tt[x].add = 0;\n\t}\n}\n\nvoid updata(int x , int l , int r) {\n\tif(t[x].l >= l && t[x].r <= r) {\n\t\tt[x].add ^= 1; t[x].dis = t[x].len - t[x].dis; return;\n\t}\n\tint mid = t[x].l + t[x].r >> 1;\n\tpushdown(x);\n\tif(l <= mid) updata(ls(x) , l , r);\n\tif(r > mid ) updata(rs(x) , l , r);\n\tpushup(x);\n}\n\nint query(int x , int l , int r) {\n\tif(t[x].l >= l && t[x].r <= r) return t[x].dis;\n\tpushdown(x);\n\tint mid  = t[x].l + t[x].r >> 1;\n\tint ans = 0;\n\tif(l <= mid) ans += query(ls(x) , l , r);\n\tif(r > mid ) ans += query(rs(x) , l , r);\n\tpushup(x);\n\treturn ans; \n}\n\nint main () {\n\tscanf(\"%d %d\" , &n , &m);\n\tbuilt(1 ,1 , n);\n\twhile(m -- ) {\n\t\tint opt , l , r;\n\t\tscanf(\"%d %d %d\" ,&opt, &l , &r);\n\t\tif(opt == 0) {\n\t\t\tupdata(1 , l , r);\n\t\t} else printf(\"%d\\n\" , query(1 , l , r));\n\t}\t\n\treturn 0;\n}\n```",
        "postTime": 1572593706,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "~~\u7ebf\u6bb5\u6811\u6c34\u9898\u5f53\u7136\u8981\u7528\u5206\u5757\u6765\u505a\u4e86~~\n\n\u8fd9\u9898\u548c[[TJOI2009]\u5f00\u5173](https://www.luogu.org/problem/P3870)\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u533a\u522b(\u6c34\u53cc\u500d\u7ecf\u9a8c),\u76f4\u63a5\u590d\u5236\u4e0d\u4f5c\u4fee\u6539\u4e00\u904dAC...\n\n\u6240\u4ee5,\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684,\u5206\u5757\u4e0d\u61c2\u7684\u8bdd[\u6233\u8fd9\u91cc](http://hzwer.com/8053.html),\u76f4\u63a5\u653ecode:\n\n```cpp\n#include <iostream>\n#include<cmath>\nusing namespace std;\ntypedef unsigned int uint;\nconst uint MAX_N = 1e5;\nconst uint MAX_S = 1e3;\n\nuint n, m;\nint sum[MAX_S];\nuint rang[MAX_N], BASE;\nbool flag[MAX_S], data[MAX_N], cut[MAX_N];\n// rang[i] = \u7b2ci\u4e2a\u6570\u6240\u5904\u5757\u7684\u4e0b\u6807\n// data[i] = \u8f93\u5165\u6570\u636e\n// cut[i] = \u82e5i\u4e3a\u5f53\u524d\u5757\u7684\u5f00\u5934\u5219\u4e3a\u771f\n// flag[rang[i]] = \u5f53\u524d\u5757\u662f\u5426\u7ffb\u8f6c\n// sum[rang[i]] = \u7b2ci\u4e2a\u6570\u6240\u5904\u5757\u5f00\u7740\u7684\u706f\u6570\n\ninline void init() {\n\tBASE = sqrt(n); // \u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\n\tfor (uint i=0; i<n; i+=BASE) cut[i] = true;\n\tfor (uint i=0, k=0; i<n; ++i) {\n\t\tif (i&&cut[i]) ++k;\n\t\trang[i] = k;\n\t}\n}\n\n// \u5355\u70b9\u4fee\u6539\ninline void upPoint(uint in) {\n\tuint k = rang[in];\n\tsum[k] -= flag[k]^data[in];\n\tdata[in] ^= true;\n\tsum[k] += flag[k]^data[in];\n}\n\n// \u533a\u95f4\u4fee\u6539\ninline void upRange(uint k) {\n\tsum[k] = BASE - sum[k];\n\tflag[k] ^= true;\n}\n\n// \u5355\u70b9\u67e5\u8be2\ninline uint quPoint(uint in) { return flag[rang[in]]^data[in]; }\n\n// \u533a\u95f4\u67e5\u8be2\ninline uint quRange(uint k) { return sum[k]; }\n\n// \u5904\u7406\u533a\u95f4[l, r)\ninline void flip(uint l, uint r) {\n\t// \u5904\u7406\u8fb9\u7f18\u90e8\u5206\n\twhile (l<r && !cut[l]) upPoint(l++);\n\twhile (l<r && !cut[r]) upPoint(--r);\n    // \u6574\u5757\u5904\u7406\n\twhile (l<r) upRange(rang[r-=BASE]);\n}\n\n// \u67e5\u8be2\u533a\u95f4[l, r)\ninline uint query(uint l, uint r) {\n\tuint res = 0;\n    // \u67e5\u8be2\u8fb9\u7f18\u90e8\u5206\n\twhile (l<r && !cut[l]) res += quPoint(l++);\n\twhile (l<r && !cut[r]) res += quPoint(--r);\n    // \u6574\u5757\u67e5\u8be2\n\twhile (l<r) res += quRange(rang[r-=BASE]);\n\treturn res;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin>>n>>m; init();\n\tuint type, l, r; ++m;\n\twhile (--m) {\n\t\tcin>>type>>l>>r;\n\t\tif (type == 0) flip(--l, r);\n\t\telse cout<<query(--l, r)<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n\n> ~~USACO\u6c34\u9898\u540d\u4e0d\u865a\u4f20~~",
        "postTime": 1572512012,
        "uid": 270561,
        "name": "x_liuier",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u4e00\u9053\u7ebf\u6bb5\u6811\u504f\u677f\u5b50\u7684\u9898\n\n\u601d\u8003\u533a\u95f4\u4fee\u6539\u7684\u61d2\u6807\u8bb0\u600e\u4e48\u6253\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a\u6570\uff0c\u53ea\u6709$0$\u6216$1$\u7684\u8d4b\u503c\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528$flag[x]=flag$ $xor$ $1$\u6765\u6253\u6807\u8bb0\u3002\n\n\u5982\u4f55\u5728$Pushdown$\u7684\u65f6\u5019\u4fee\u6539\u533a\u95f4\u4e2d\u5f00\u7740\u7684\u706f\u7684\u6570\u91cf\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u5230\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u4e2d\u6bcf\u76cf\u706f\u7684\u60c5\u51b5\uff0c\u53ea\u6709\u5f00\u7740\u6216\u8005\u5173\u7740\uff0c\u5373$1$\u6216$0$\u3002\u663e\u7136\uff0c\u4fee\u6539\u4e4b\u540e\u533a\u95f4\u4eae\u7740\u7684\u706f\u7684\u6570\u91cf$=$\u533a\u95f4\u706f\u603b\u6570$-$\u4fee\u6539\u524d\u533a\u95f4\u4eae\u7740\u7684\u706f\u7684\u6570\u91cf\uff0c\u5373$light[x]=(r-l+1)-light[x]$\n\n\u4e86\u89e3\u4e86\u5bf9\u4e8e\u8fd9\u9053\u9898\u7ebf\u6bb5\u6811\u7684$lazytag$\u7684$Pushdown$\u505a\u6cd5\u540e\uff0c\u8fd9\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=410000;\nint n,m;\ninline int read()\n{\n\tint s=0,w=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') w=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') s=(s<<3)+(s<<1)+(ch^48),ch=getchar(); return s*w;\n}\ninline int LeftChild(int x) {return x<<1; }\ninline int RightChild(int x) {return x<<1|1; }\nstruct Node//\u653e\u5728\u7ed3\u6784\u4f53\u91cc\uff0c\u65b9\u4fbf\u8c03\u8bd5\u67e5\u770b\n{\n\tint leaf[N],flag[N];\n\tinline void Push_Up(int x) {leaf[x]=leaf[LeftChild(x)]+leaf[RightChild(x)]; }\n\tinline void Change(int x,int l,int r) {leaf[x]=r-l+1-leaf[x]; flag[x]^=1; }\n\tinline void Push_Down(int x,int l,int r)\n\t{\n\t\tChange(LeftChild(x),l,(l+r)>>1);\n\t\tChange(RightChild(x),((l+r)>>1)+1,r); flag[x]=0;\n\t}\n\tvoid UpDate(int u,int v,int l,int r,int x)\n\t{\n\t\tif(l>=u&&r<=v) {Change(x,l,r); return; }\n\t\tif(flag[x]) Push_Down(x,l,r);\n\t\tif(u<=(l+r)>>1) UpDate(u,v,l,(l+r)>>1,LeftChild(x));\n\t\tif(v>(l+r)>>1) UpDate(u,v,((l+r)>>1)+1,r,RightChild(x));\n\t\tPush_Up(x);\t\n\t}\n\tint Ask(int u,int v,int l,int r,int x)\n\t{\n\t\tif(l>=u&&r<=v) return leaf[x];\n\t\tif(flag[x]) Push_Down(x,l,r); int ans=0;\n\t\tif(u<=(l+r)>>1) ans+=Ask(u,v,l,(l+r)>>1,LeftChild(x));\n\t\tif(v>(l+r)>>1) ans+=Ask(u,v,((l+r)>>1)+1,r,RightChild(x));\n\t\treturn ans;\n\t}\n}D;\nint main()\n{\n\tn=read(); m=read();\n\tfor(int i=1,opt,u,v;i<=m;i++)\n\t{\n\t\topt=read(); u=read(); v=read();\n\t\tif(!opt) D.UpDate(u,v,1,n,1);\n\t\telse printf(\"%d\\n\",D.Ask(u,v,1,n,1));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570779437,
        "uid": 98618,
        "name": "Provicy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2846"
    },
    {
        "content": "~~\u636e\u8bf4\u8fd9\u9898\u597d\u50cf\u6709\u516d\u500d\u7ecf\u9a8c~~\n\n\u6211\u4eec\u7b80\u5355\u5206\u6790\u4e00\u4e0b\n\n\u6211\u4eec\u4ee4\u706f\u5173\u7740\u7684\u65f6\u5019\u662f0\uff0c\u5f00\u7740\u7684\u65f6\u5019\u662f1\n\n\u521d\u59cb\u6240\u6709\u6570\u90fd\u662f0\n\n\u9898\u76ee\u8981\u6c42\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u662f\u533a\u95f4\u5f02\u62161\uff0c\u8fd8\u6709\u4e00\u79cd\u662f\u533a\u95f4\u67e5\u8be21\u7684\u4e2a\u6570\n\n\u8003\u8651\u5230\u6240\u6709\u6570\u4e2d\u53ea\u67090\u548c1\n\n\u6240\u4ee5\u67e5\u8be2\u53ef\u4ee5\u6539\u4e3a\u67e5\u8be2\u533a\u95f4\u548c\n\n\u533a\u95f4\u5f02\u62161\u4e5f\u53ef\u4ee5\u4ece\u533a\u95f4\u548c\u7684\u89d2\u5ea6\u53d6\u8003\u8651\u95ee\u9898\n\n---\n\n\u5047\u8bbe\u6211\u4eec\u539f\u6765\u6709$k$\u4e2a1\uff0c\u533a\u95f4\u957f\u5ea6\u4e3a$l$\n\n\u73b0\u5728\u5c31\u6709$l-k$\u4e2a1\n\n\u6240\u4ee5$sum_{now}=l-sum_{pre}$\n\n\u6807\u8bb0\u4e0b\u4f20\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u65f6\u95f4$O(nlogn)$\n\ncode:\n\n```\n#include<bits/stdc++.h>\n\n#define rd(x) x=read()\n#define N 200005 \n \nusing namespace std;\n\nint n,m;\nstruct T{\n\tint l,r,mid,v,tag;\n}t[N<<2];\n\ninline int read()\n{\n    int f=1,x=0;char s=getchar();\n    while(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n    while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n    return x*f;\n}\n\nvoid pushdown(int rt,int len)\n{\n\tif(t[rt].tag)\n    {\n        t[rt<<1].tag^=1; \n        t[rt<<1|1].tag^=1;\n        t[rt<<1].v=(len-(len>>1))-t[rt<<1].v;\n        t[rt<<1|1].v=(len>>1)-t[rt<<1|1].v;\n        t[rt].tag=0;\n    }\n}\n\nvoid build(int rt,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tt[rt].l=l,t[rt].r=r,t[rt].mid=mid,t[rt].tag=0;\n\tif(l==r)\n\t{\n\t\tt[rt].v=0;\n\t\treturn;\n\t}\n\tbuild(rt<<1,l,mid);\n\tbuild(rt<<1|1,mid+1,r);\n\tt[rt].v=t[rt<<1].v+t[rt<<1|1].v;\n}\n\nvoid update(int rt,int l,int r)\n{\n    if(l<=t[rt].l&&t[rt].r<=r)\n    {\n        t[rt].tag^=1;     \n        t[rt].v=t[rt].r-t[rt].l+1-t[rt].v;    \n        return;\n    }\n    pushdown(rt,t[rt].r-t[rt].l+1);\n    if(l<=t[rt].mid)update(rt<<1,l,r);    \n    if(t[rt].mid<r)update(rt<<1|1,l,r);        \n    t[rt].v=t[rt<<1].v+t[rt<<1|1].v; \n}\nint query(int rt,int l,int r)\n{\n    if(l<=t[rt].l&&t[rt].r<=r)return t[rt].v;\n    pushdown(rt,t[rt].r-t[rt].l+1);\n    int sum=0;\n    if(l<=t[rt].mid)sum+=query(rt<<1,l,r); \n    if(t[rt].mid<r)sum+=query(rt<<1|1,l,r);        \n    return sum;\n}\n\nint main()\n{\n\trd(n),rd(m);\n\tbuild(1,1,n);\n\twhile(m--)\n\t{\n\t\tint opt,l,r;\n\t\trd(opt),rd(l),rd(r);\n\t\tif(opt)printf(\"%d\\n\",query(1,l,r));\n\t\telse update(1,l,r);\t\n\t}\n\t\n\treturn 0;\n}\n\n```",
        "postTime": 1567516488,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "  \u5feb\u8981noip\u4e86\uff0c\u8be5\u5199\u4e9b\u9898\u89e3\u6512\u6512rp\u4e86\uff08~~\u9003~~\uff09\n\n\u770b\u5230\u9898\u89e3\u91cc\u90a3\u4e48\u591a\u7ebf\u6bb5\u6811\u554a\uff0c\u6811\u72b6\u6570\u7ec4\u554a\uff0c\u672c\u849f\u84bb\u8868\u793a\uff1a\u8fd9\u90fd\u662f\u4ec0\u4e48\u9b3c\u4e1c\u897f\uff1f\n\n  \u5728\u6240\u6709\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6811\u72b6\u6570\u7ec4\u662f\u7801\u91cf\u6700\u5c0f\u7684\uff0c\u8dd1\u7684\u4e5f\u57fa\u672c\u662f\u6700\u5feb\u7684\uff0c\u4f46\u7406\u89e3\u5f88\u96be\uff0c\u5e76\u4e14\u652f\u6301\u7684\u64cd\u4f5c\u5f88\u5c11\uff1b\u7ebf\u6bb5\u6811\u7684\u7801\u91cf\uff0c\u76f8\u4fe1\u5199\u8fc7\u7ebf\u6bb5\u6811\u9898\u7684\u7ae5\u978b\u90fd\u4eb2\u8eab\u4f53\u9a8c\u8fc7\u8fd9\u79cd\u6050\u6016\uff08~~\u90a3\u4e9b3min\u5199\u5b8csplay\u7684\u5de8\u4f6c\u4e0d\u8981d\u6211~~\uff09\uff0c\u7406\u89e3\u867d\u7136\u7b80\u5355\uff0c\u4f46\u4e00\u9898\u8c03\u4e00\u8f88\u5b50\u554a\uff01\n\n\u6240\u4ee5\u8bf4\u5230\u8fd9\u91cc\uff0c\u672c\u849f\u84bb\u60f3\u8868\u8fbe\u4ec0\u4e48\u5462\uff1f\n\n   # **\u5206\u5757\u5927\u6cd5\u543c\u554a\uff01** \n\u6709\u4eba\u4f1a\u8bf4\uff1a\u5206\u5757\u4e0d\u662fn\u221an\u7684\u590d\u6742\u5ea6\u5417\uff1f\u600e\u4e48\u80fd\u8ddfnlogn\u7684\u6570\u636e\u7ed3\u6784\u76f8\u63d0\u5e76\u8bba\u5462\uff1f\u6216\u8005\u8bf4\uff0c\u5206\u5757\u5728\u8054\u8d5b\u4e2d\uff0c\u6709\u4ec0\u4e48\u4f18\u52bf\u5462\uff1f\n\n\u9996\u5148\uff0c\u867d\u7136\u4ed6\u590d\u6742\u5ea6\u9ad8\uff0c\u4f46\u4ed6\u80fd\u7ef4\u62a4\u7684\u4e1c\u897f\u591a\u5440\uff01\uff08\u4f60\u770b\u770bn\u00b2\u7684\u66b4\u529b\u4ec0\u4e48\u4e0d\u80fd\u7ef4\u62a4\uff09\n\n\u800c\u4e14\uff0c\u56e0\u4e3a\u6709\u65f6\u7ebf\u6bb5\u6811\u6709\u5de8\u5927\u7684\u5e38\u6570\uff0c\u53cd\u800c\u6bd4\u5206\u5757\u8dd1\u7684\u6162\uff01\uff08\u6bd4\u5982\u6d1b\u8c37P2801\uff09\n\n\u518d\u8005\u8bf4\uff0c\u5982\u679c\u8054\u8d5b\u4e00\u9053\u9898\uff0c\u597d\u591a\u65b9\u6cd5\u90fd\u80fd\u505a\uff0c\u4f60\u662f\u7528\u8c03\u4e00\u8f88\u5b50\u7684\u7ebf\u6bb5\u6811\u5462\uff0c\u8fd8\u662f\u5341\u5206\u66b4\u529b\u597d\u5199\u7684\u5206\u5757\u5462\uff1f\n\n\u5e9f\u8bdd\u4e86\u8fd9\u4e48\u591a\uff0c\u4e5f\u662f\u60f3\u8ba9\u5927\u5bb6\u77e5\u9053\uff0c\u5206\u5757\u4e5f\u662f\u4e00\u79cd\u5f88\u597d\u7684\u7b97\u6cd5\u3002\n\n\u90a3\u5206\u5757\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff1f\u987e\u540d\u601d\u4e49\uff0c\u5206\u5757\u5c31\u662f\u628a\u4e00\u4e2a\u533a\u95f4\u5206\u6210\u597d\u51e0\u4e2a\u5c0f\u533a\u95f4\uff0c\u81f3\u4e8e\u662f\u51e0\u4e2a\u5462\uff0c\u56e0\u9898\u800c\u5f02\uff0c\u4f46\u5927\u90e8\u5206\u9898\u7684\u590d\u6742\u5ea6\u90fd\u662fn\u221an\uff0c\u6240\u4ee5\u9ed8\u8ba4\u662f\u628a\u533a\u95f4\u5206\u6210\u221an\u5757\u3002\u5982\u679c\u67d0\u9898\u7528\u5206\u5757\u590d\u6742\u5ea6\u5e26log\uff0c\u5c31\u8ba9\u5757\u5206\u7684\u66f4\u591a\u4e00\u4e9b\uff0c\u5927\u6982\u662f\u4e58\u4e2alog\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09\u3002\n\n\u54ea\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\u5f53\u8be2\u95ee\u67d0\u6bb5\u533a\u95f4\u65f6\uff0c\u628a\u533a\u95f4\u8986\u76d6\u7684\u6574\u5757\u6253\u4e0a\u4e00\u4e2atag\u6807\u8bb0\uff0c\u4e24\u8fb9\u79bb\u6563\u7684\u5757\u5462\uff0c\u5c31\u66b4\u529b\u5c31\u597d\u4e86\u3002\u6709\u4eba\u4f1a\u8bf4\uff0c\u8fd9\u4e48\u7b80\u5355\uff1f\u5f53\u7136\u3002\uff08\u4e0d\u7b80\u5355\u672c\u849f\u84bb\u600e\u4e48\u53ef\u80fd\u4f1a\u5199\uff09\n\n\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u662f\u8be2\u95ee\u533a\u95f4\u5982\u679c\u5728\u4e00\u4e2a\u5757\u91cc\u8981\u7279\u5224\uff0c\u6240\u4ee5\u8981\u591a\u5927\u51e0\u4e2aif\u3002\uff08\u867d\u7136\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u90fd\u662f\u677f\u513f\u554a\uff09\n\n\u5206\u5757\u5927\u4f53\u5dee\u4e0d\u591a\u8bf4\u5b8c\u4e86\uff0c\u4f46\u8fd9\u4e2a\u7b97\u6cd5\u5341\u5206\u7075\u6d3b\uff0c\u51c6\u786e\u7684\u8bf4\uff0c\u5206\u5757\u8fd9\u79cd\u601d\u60f3\u5341\u5206\u53ef\u8d35\uff0c\u80fd\u7528\u5230\u5f88\u591a\u5176\u4ed6\u9898\u4e0a\u3002\n\n\u6700\u540e\uff0c\u672c\u9898\u5176\u5b9e\u4e0d\u96be\uff0c\u628a\u5206\u5757\u677f\u5b50\u7c98\u8fc7\u6765\uff0c\u628a\u52a0\u6539\u6210xor\u5c31\u884c\u4e86\u3002\u5982\u679c\u60f3\u770b\u5206\u5757\u7684\u677f\u5b50\uff0c[hzwer\u5927\u4f6c\u535a\u5ba2](http://hzwer.com/8053.html)\u91cc\u6709\uff0c\u53ef\u4ee5\u53bb\u770b\u4e00\u770b\uff08\u5de8\u4f6c\u7684\u7801\u98ce\u662f\u771f\u597d\u770b\u554a\uff09\n\n\u4e0b\u8d34\u4ee3\u7801\uff1a\n```c\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#define rint register int\n#define maxn 200010\nusing namespace std;\ninline int read()\n{\n    int s=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){ch=getchar();if(ch=='-')f=-1;}\n    while(ch>='0'&&ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n    return s*f;\n}\ninline void write(int x)\n{\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n    return ;\n}\nint n,m,blo,o;\nint bl[maxn],v[maxn],t[maxn],atag[maxn],sum[maxn],L[maxn],R[maxn];\ninline void change(int l,int r)\n{\n    if(bl[l]==bl[r])\n    {\n        for(rint i=l;i<=r;++i)\n        {\n            if(v[i]) v[i]=0,--sum[bl[l]];\n            else v[i]=1,++sum[bl[l]];\n        } \n        return ;\n    }\n    for(rint i=l;i<=R[bl[l]];++i) \n    {\n        if(v[i]) v[i]=0,--sum[bl[l]]; \n        else v[i]=1,++sum[bl[l]];\n    }\n    for(rint i=L[bl[r]];i<=r;++i) \n    {\n        if(v[i]) v[i]=0,--sum[bl[r]];\n        else v[i]=1,++sum[bl[r]];\n    }\n    for(rint i=bl[l]+1;i<=bl[r]-1;++i) atag[i]=1-atag[i];\n}\ninline int query(int l,int r)\n{\n    int ans=0;\n    if(bl[l]==bl[r])\n    {\n        for(rint i=l;i<=r;++i) \n            if(v[i]^atag[bl[l]]) ++ans;\n        return ans;\n    }\n    for(int i=l;i<=R[bl[l]];++i) \n        if(v[i]^atag[bl[l]]) ++ans;\n    for(int i=L[bl[r]];i<=r;++i) \n        if(v[i]^atag[bl[r]]) ++ans;\n    for(int i=bl[l]+1;i<=bl[r]-1;++i)\n    {\n        if(atag[i]) ans+=(R[i]-L[i]+1)-sum[i];\n        else ans+=sum[i];\n    }        \n    return ans;\n}\nint main()\n{\n    n=read(),m=read();blo=sqrt(n);\n    n%blo ? (o=n/blo+1) : (o=n/blo);\n    for(rint i=1;i<=n;++i)\n    {\n    \tv[i]=0;\n    \tbl[i]=(i-1)/blo+1;\n    \tif(v[i]) ++sum[bl[i]];\n    }\n    for(rint i=1;i<=o;++i)\n    {\n        L[i]=(i-1)*blo+1;\n        R[i]=i*blo;\n    }\n    while(m--)\n    {\n        int p=read(),l=read(),r=read();\n        if(p==0) change(l,r);\n        if(p==1) write(query(l,r)),puts(\" \");\n    }\n    return 0;\n} \n```\n\u8c22\u8c22\u5927\u5bb6",
        "postTime": 1541432874,
        "uid": 86478,
        "name": "mxr\u5df2\u6b7b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u5927\u849f\u84bb\u8868\u793a\u5e76\u4e0d\u4f1a\u4ea6\u6216\uff0c\u6240\u4ee5\u75280,1\uff0c2\u6765\u8868\u793a\u706f\u7684\u72b6\u6001\n\n```\n#include <iostream>\nusing namespace std;\n#define MAXN 100000\n//  0 \u5173\u706f 1\u5f00\u706f  2\u4e0d\u4f1a\u5728\u6839\u4e2d\u51fa\u73b0\uff0c2\u8868\u793a\u5b83\u4e24\u4e2a\u5b50\u53f6\u4e0d\u4e00\u6837\uff1b \nstruct tree{\n\tint val;\n\tint add;\n}a[MAXN*5];\n//\u5168\u662f\u5173\u706f \u5168\u662f0 \u6240\u4ee5\u4e0d\u7528build\nvoid pushup(int i,int l,int r){\n\tif(a[i<<1].val!=a[(i<<1)+1].val){\n\t\ta[i].val=2;\n\t}else{\n\t\ta[i].val=a[(i<<1)+1].val;\n\t}\n}\nvoid f(int i,int l,int r,int k){\n\ta[i].add+=k;\n\tif(k==0)return ;\n\tif(k%2==1&&a[i].val!=2)                //\u4fee\u6539\u5076\u6570\u6b21\u7b49\u4e8e\u6ca1\u6539 \n\ta[i].val=!a[i].val;\n}\nvoid putdown(int i,int l,int r,int k){\n\tint mid=(l+r)/2;\n\tf(i<<1,l,mid,k);\n\tf((i<<1)+1,mid+1,r,k);\n\ta[i].add=0;\n\treturn ;\n}\nvoid update(int i,int l,int r,int x,int y){\n\tif(x<=l&&r<=y){\n\t\tif(a[i].val!=2)\n\t\ta[i].val=!a[i].val;\t\n\t\ta[i].add++;\n\t\treturn;\n\t}\n\tputdown(i,l,r,a[i].add);\n\tlong mid=(l+r)/2;\n\tif(mid>=x)update(i<<1,l,mid,x,y);\n\tif(mid+1<=y)update((i<<1)+1,mid+1,r,x,y);\n\t\tpushup(i,l,r);\n\n}\nint query(int i,int l,int r,int x,int y){\n\tlong ans=0;\n\tif(x<=l&&y>=r&&a[i].val==1){\n\t\treturn r-l+1;\n\t}\n\tif(l==r||a[i].val==0)\n\treturn 0;\n\tint mid=(l+r)/2;\n\tputdown(i,l,r,a[i].add);\n\t if(mid>=x)ans+=query(i<<1,l,mid,x,y);\n\tif(mid+1<=y)ans+=query((i<<1)+1,mid+1,r,x,y);\n\treturn ans;\n}\nint main(){\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint d,x,y;\n\tcin>>d>>x>>y;\n\tif(d==1){\n\t\tcout<<query(1,1,n,x,y)<<endl;\n\t\t}else{\n\t\tupdate(1,1,n,x,y);\n\t\t}\n\t}\n}\n```",
        "postTime": 1528374247,
        "uid": 59030,
        "name": "dongjiajiedc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2846 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u88f8\u9898\uff01\u76f4\u63a5\u8bb0\u5f55l-r\u533a\u95f4\u4e2d\u706fturn on\u7684\u4e2a\u6570\uff01\u7528\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u904d\u5386\uff01\n\n\u8bb0\u5f97\u8981\u52a0lazy\u6807\u8bb0\uff01TAG\n\nTAG\u4e00\u5b9a\u8981\u4e0b\u4f20\uff0c\u5426\u5219wa\u98de\u4e86\uff01\n\n\u6211\u5199\u7684\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u5e0c\u671b\u5927\u5bb6\u5411\u6211\u5b66\u4e60\uff01\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define            MAXN                100010\nint Tag[MAXN << 5], Tr[MAXN << 5], n, m;\nclass Segment_Tree {\n```\npublic:\n```cpp\n        void DownTag(int dep, int l, int r) {\n            if(!Tag[dep])return;\n            Tag[dep << 1] ^= 1;\n            Tag[dep << 1 | 1] ^= 1;\n            int mid = (l + r) >> 1;\n            Tr[dep << 1] = (mid - l + 1) - Tr[dep << 1];\n            Tr[dep << 1 | 1] = (r - mid) - Tr[dep << 1 | 1];\n            Tag[dep] = 0; \n        } \n        void modify(int dep, int l, int r, int ql, int qr) {\n            if(ql <= l && r <= qr) {\n                Tag[dep] ^= 1;\n                Tr[dep] = (r - l + 1) - Tr[dep];\n                return;\n            }\n            DownTag(dep, l, r);\n            int mid = (l + r) >> 1;\n            if(ql <= mid)modify(dep << 1, l, mid, ql, qr);\n            if(qr > mid)modify(dep << 1 | 1, mid + 1, r, ql, qr);\n            Tr[dep] = Tr[dep << 1] + Tr[dep << 1 | 1];\n        }\n        int query(int dep, int l, int r, int ql, int qr) {\n            if(ql > r || qr < l)return 0;\n            if(ql <= l && r <= qr)return Tr[dep];\n            DownTag(dep, l, r);\n            int mid = (l + r) >> 1;\n            return query(dep << 1, l, mid, ql, qr) + query(dep << 1 | 1, mid + 1, r, ql, qr); \n        }\n}Tree;\nint main() {\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 1;i <= m;i++) {\n        int col, l, r;\n        scanf(\"%d\", &col);\n        if(col == 0) {\n            scanf(\"%d %d\", &l, &r);\n            Tree.modify(1, 1, n, l, r);\n        }else {\n            scanf(\"%d %d\", &l, &r);\n            printf(\"%d\\n\", Tree.query(1, 1, n, l, r));\n        }\n    } \n    return 0;\n}\n\n```",
        "postTime": 1512551321,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u4e00\u9053\u6bd4\u8f83\u5bb9\u6613\u7684\u7ebf\u6bb5\u6811\u9898\u3002\n\n\u552f\u4e00\u53ef\u80fd\u548c\u6a21\u677f\u4e0d\u592a\u4e00\u6837\u7684\u53ef\u80fd\u662f\u533a\u95f4\u4fee\u6539\u548c\u6807\u8bb0\u4fee\u6539\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u8fd8\u662f\u5f88\u5bb9\u6613\u89e3\u51b3\u7684\u3002\u6bd4\u5982\u6709\u4e00\u4e2a\u533a\u95f4\u4e00\u5f00\u59cb\u5f00\u7684\u706f\u7684\u6570\u76ee\u662fsum\uff0c\u603b\u5171\u7684\u706f\u7684\u6570\u76ee\u662fsize\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u533a\u95f4\u53d6\u53cd\u540e\u5f00\u7684\u706f\u7684\u6570\u76ee\u5c31\u662fsize-sum\u3002\n\n\u7b2c\u4e8c\u4e2a\u6807\u8bb0\u95ee\u9898\uff0c\u663e\u7136\u6807\u8bb0\u53ea\u67090\u548c1\u8fd9\u4e24\u4e2a\u72b6\u6001\uff0c\u90a3\u4e48\u533a\u95f4\u4fee\u6539\u540e\u76f4\u63a5\u7ed9\u6807\u8bb0\u53d6\u53cd\u5c31\u53ef\u4ee5\u5566\uff0c\u6807\u8bb0\u4e0b\u4f20\u5e94\u8be5\u4e5f\u6ca1\u4ec0\u4e48\u96be\u7684\uff0c\u7a0d\u5fae\u6539\u4e00\u6539\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u4e00\u770b\u4ee3\u7801\uff0c\u5982\u679c\u4f1a\u5199\u7ebf\u6bb5\u6811\u6a21\u677f\u5e76\u4e14\u5927\u6982\u7406\u89e3\u4e86\u4e0a\u9762\u7684\u601d\u8def\u4e0b\u9762\u4ee3\u7801\u5e94\u8be5\u8fd8\u662f\u5bb9\u6613\u770b\u61c2\u7684\u2026\u2026\n\n\u5f53\u7136\u7ebf\u6bb5\u6811\u6a21\u677f\u5c31\u4e0d\u89e3\u91ca\u5566\uff0c\u5e03\u5409\u5c9b\u7ebf\u6bb5\u6811\u600e\u4e48\u5199\u7684\u53ef\u4ee5\u79fb\u6b653372\n\n```cpp\n#include<cstdio>\n\nconst int N=100005;\nint st[N*3],add[N*3]; //add\u5373\u6807\u8bb0\uff0c\u6284\u6a21\u677f\u61d2\u5f97\u6539\u6570\u7ec4\u540d\u4e86QwQ\n\nvoid tagdown(int v, int l, int r) //\u4e0b\u4f20\u6807\u8bb0\n{\n    if(!add[v]) return;\n    add[v<<1]^=1; //\u5de6\u53f3\u5b69\u5b50\u6807\u8bb0\u4e0b\u4f20\n    add[v<<1|1]^=1;\n    int mid=(l+r)>>1;\n    st[v<<1]=(mid-l+1)-st[v<<1]; //\u66f4\u65b0\u5de6\u53f3\u5b69\u5b50\u503c\n    st[v<<1|1]=(r-mid)-st[v<<1|1];\n    add[v]=0;\n}\n\nint query(int v, int l, int r, int sl, int sr) //\u533a\u95f4\u67e5\u8be2\uff0c\u548c\u6a21\u677f\u4e00\u6837\n{\n    if(sl>r||sr<l) return 0;\n    if(sl<=l&&r<=sr) return st[v];\n    tagdown(v,l,r);\n    int mid=(l+r)>>1;\n    return query(v<<1,l,mid,sl,sr)+query(v<<1|1,mid+1,r,sl,sr);\n}\n\nvoid update(int v, int l, int r, int sl, int sr) //\u533a\u95f4\u4fee\u6539\n{\n    if(sl>r||sr<l) return;\n    if(sl<=l&&r<=sr)\n    {\n        add[v]^=1; //\u6807\u8bb0\u53d6\u53cd\n        st[v]=(r-l+1)-st[v]; //\u66f4\u65b0\u5f53\u524d\u503c\n        return;\n    }\n    tagdown(v,l,r);\n    int mid=(l+r)>>1;\n    update(v<<1,l,mid,sl,sr);\n    update(v<<1|1,mid+1,r,sl,sr);\n    st[v]=st[v<<1]+st[v<<1|1];\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n        //PS\uff1a\u8fd9\u9898\u7531\u4e8e\u706f\u5168\u90e8\u4e3a\u706d\uff0c\u6240\u4ee5\u6309\u7167\u8fd9\u6837\u7684\u5199\u6cd5\u4e0d\u7528\u5efa\u6811\u2026\u2026\n    while(m--)\n    {\n        int f,x,y;\n        scanf(\"%d%d%d\",&f,&x,&y);\n        if(f) printf(\"%d\\n\",query(1,1,n,x,y));\n        else update(1,1,n,x,y);\n    }\n}\n```",
        "postTime": 1502808293,
        "uid": 9757,
        "name": "x_faraway_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u628a\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u6570\u53d6\u53cd\uff0c1\u53d80\uff0c0\u53d81\u3002\n\n\u53ef\u4ee5\u53bb\u53c2\u8003xor\u7684\u827a\u672f\u8fd9\u4e00\u9898\u3002\n\n\n\n\n\n\n    \n    \n    \n    \n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define Rep( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i<=(i##_END);i++)\n#define For( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i!=(i##_END);i++)\n#define Lop( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i>=(i##_END);i--)\n#define Dnt( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i!=(i##_END);i--)\nusing std :: min;\nusing std :: max;\nconst int maxx = 100000 + 25;\nint n,m,x,y,z,f;\nint T[maxx<<2],Add[maxx<<2];\nnamespace Segment_Tree{\n    void pushdown(int i,int l,int r){\n        int mid = (l+r) >> 1;\n        T[i<<1] = (mid-l+1) - T[i<<1];T[i<<1|1] = (r-mid) - T[i<<1|1];\n        Add[i<<1] ^= Add[i];Add[i<<1|1] ^= Add[i];Add[i] = 0;\n    }\n    void modify(int i,int x,int y,int l,int r){\n        if(x <= l && r <= y) {T[i] = (r-l+1) - T[i];Add[i] ^= 1;return;}\n        int mid = (l+r) >> 1;if(Add[i]) pushdown(i,l,r);\n        if(x <= mid) modify(i<<1,x,y,l,mid);\n        if(y >  mid) modify(i<<1|1,x,y,mid+1,r);\n        T[i] = T[i<<1] + T[i<<1|1];\n    }\n    int Query(int i,int x,int y,int l,int r){\n        if(x <= l && r <= y) return T[i];int ans = 0;\n        int mid = (l+r) >> 1;if(Add[i]) pushdown(i,l,r);\n        if(x <= mid) ans += Query(i<<1,x,y,l,mid);\n        if(y >  mid) ans += Query(i<<1|1,x,y,mid+1,r);\n        return ans;\n    }\n}\nusing namespace Segment_Tree;\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    Rep( i , 1 , m ){\n        scanf(\"%d%d%d\",&f,&x,&y);\n        if(f == 0) modify(1,x,y,1,n);\n        if(f == 1) printf(\"%d\\n\",Query(1,x,y,1,n));\n    }\n    return 0;\n}\n```",
        "postTime": 1493124490,
        "uid": 21673,
        "name": "Sor4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\u5c31\u5e94\u8be5\u60f3\u5230\u4e86 \u7ebf\u6bb5\u6811 \u4e86\u5427\u3002\u3002\u3002\uff08\u867d\u8bf4\u6807\u7b7e\u4e2d\u4e5f\u6709\u3002\u3002\u3002\uff09\n\n\u7ebf\u6bb5\u6811 \u5e94\u8be5\u90fd\u4f1a\u3002\u3002\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u5b58 \u67d0\u4e00\u8303\u56f4\u5185\u6240\u67091\u7684\u4e2a\u6570 \u3002\n\n\u5177\u4f53\u770b\u6ce8\u91ca\u5427\u3002\u3002\u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define LSON rt<<1//\u5de6\u5b69\u5b50\n#define RSON rt<<1|1//\u53f3\u5b69\u5b50\n#define DATA(x) a[x].data//\u8282\u70b9\u503c\n#define SIGN(x) a[x].c//\u61d2\u60f0\u6807\u8bb0\n#define LSIDE(x) a[x].l\n#define RSIDE(x) a[x].r//\u5de6\u53f3\u533a\u95f4\n#define WIDTH(x) (RSIDE(x)-LSIDE(x)+1)//\u533a\u95f4\u8303\u56f4\n#define MAXN 100010\nusing namespace std;\nint n,m;\nstruct node{\n    int data,c;\n    int l,r;\n}a[MAXN<<2];//\u7ebf\u6bb5\u6811 \u6570\u7ec4\uff0c\u5207\u8bb0\uff0c\u4e00\u5b9a\u8981\u5f00 4 \u500d\u7a7a\u95f4\uff0c\u4e0d\u7136\u4f1a\u70b8\u3002\u3002\u3002\ninline int read(){//\u5f31\u5f31\u7684\u8bfb\u5165\u4f18\u5316\u3002\u3002\u3002\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\nvoid pushup(int rt){//\u6570\u503c\u4e0a\u4f20\n    DATA(rt)=DATA(LSON)+DATA(RSON);//\u6bcf\u4e2a\u8282\u70b9\uff08\u53f6\u8282\u70b9\u9664\u5916\uff09\u7684\u503c = \u5de6\u5b69\u5b50\u7684\u503c + \u53f3\u5b69\u5b50\u65f3\u503c\n}\nvoid pushdown(int rt){//\u6807\u8bb0\u4e0b\u4f20\n    if(!SIGN(rt)||LSIDE(rt)==RSIDE(rt))\n    return;\n    SIGN(LSON)^=SIGN(rt);////\u5904\u7406\u5de6\u5b69\u5b50\u3002\u53d6\u53cd\uff0c\u4ece1\u53d8\u4e3a0 \u6216 \u4ece0\u53d8\u4e3a1\n    DATA(LSON)=WIDTH(LSON)-DATA(LSON);//\u533a\u95f4\u8303\u56f4 = \u533a\u95f4\u51850\u7684\u4e2a\u6570 + \u533a\u95f4\u51851\u7684\u4e2a\u6570\uff0c\u79fb\u9879\u5373\u53ef\u3002\u3002\u3002\n    SIGN(RSON)^=SIGN(rt);//\u5904\u7406\u53f3\u5b69\u5b50\n    DATA(RSON)=WIDTH(RSON)-DATA(RSON);\n    SIGN(rt)=0;//\u6807\u8bb0\u6e05\u7a7a\n}\nvoid buildtree(int l,int r,int rt){//\u5efa\u6811\n    int mid;\n    LSIDE(rt)=l;\n    RSIDE(rt)=r;//\u8fd9\u4e24\u53e5\u662f\u5efa\u6811\u7684\u6838\u5fc3\u4e4b\u4e00\n    if(l==r){\n        DATA(rt)=0;\n        return;\n    }\n    mid=l+r>>1;\n    buildtree(l,mid,LSON);\n    buildtree(mid+1,r,RSON);//\u8fd9\u662f\u6838\u5fc3\u4e4b\u4e8c\n    pushup(rt);\n}\nvoid update(int l,int r,int rt){//\u4fee\u6539\n    int mid;\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r){//\u5982\u679c\u8be5\u8282\u70b9\u5728\u8303\u56f4\u5185\uff0c\u5219 \u5904\u7406 \u5e76 \u8fd4\u56de \n        SIGN(rt)^=1;\n        DATA(rt)=WIDTH(rt)-DATA(rt);//\u5df2\u89e3\u91ca\u8fc7\u3002\u3002\u3002\u89c1 \u6807\u8bb0\u4e0b\u4f20\n        return;\n    }\n    pushdown(rt);//\u4e00\u5b9a\u8981\u5148\u4e0b\u4f20\uff0c\u518d\u9012\u5f52\n    mid=LSIDE(rt)+RSIDE(rt)>>1;//\u5206\u4e3a \u5de6\u5b69\u5b50 \u4e0e \u53f3\u5b69\u5b50\uff0c\u5206\u522b\u5904\u7406\n    if(l<=mid)update(l,r,LSON);\n    if(mid<r)update(l,r,RSON);\n    pushup(rt);//\u4e00\u5b9a\u8981\u4e0a\u4f20\n}\nlong long query(int l,int r,int rt){\n    int mid;\n    long long ans=0;\n    if(l<=LSIDE(rt)&&RSIDE(rt)<=r)//\u5982\u679c\u8be5\u8282\u70b9\u5728\u8303\u56f4\u5185\n    return DATA(rt);//\u8fd4\u56de\u8282\u70b9\u503c\n    pushdown(rt);//\u4e0b\u4f20\u6807\u8bb0\n    mid=LSIDE(rt)+RSIDE(rt)>>1;//\u5206\u4e3a \u5de6\u5b69\u5b50 \u4e0e \u53f3\u5b69\u5b50\uff0c\u5206\u522b\u6c42\u548c\n    if(l<=mid)ans+=query(l,r,LSON);\n    if(mid<r)ans+=query(l,r,RSON);\n    return ans;//\u4e0d\u8981\u5fd8\u8bb0\u8fd4\u56de\u503c\u3002\u3002\u3002\n}\nint main(){\n    int f,x,y;\n    n=read();m=read();\n    buildtree(1,n,1);\n    while(m--){\n        f=read();x=read();y=read();\n        if(f==0)update(x,y,1);//\u5206\u7c7b\n        if(f==1)printf(\"%lld\\n\",query(x,y,1));\n    }\n    return 0;//\u7ec8\u4e8e\u7ed3\u675f\u3002\u3002\u3002\n}\n\n```",
        "postTime": 1507940340,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2826 \u3010[USACO08NOV]\u5149\u5f00\u5173Light Switching\u3011"
    }
]