[
    {
        "content": "**update:\u7a81\u7136\u53d1\u73b0\u91cc\u9762\u6709\u4e00\u4e2a\u516c\u5f0f\u9b3c\u755c\u4e86\uff0c\u4fee\u6539\u4e00\u4e0b**\n\n\u6ca1\u770b\u5230\u6709\u4eba\u5199\u957f\u94fe\u5256\u5206\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6765\u53d1\u4e00\u6ce2\u3002\n\n\u5206\u6570\u89c4\u5212\u5c31\u4e0d\u8bb2\u4e86\uff0c\u5176\u4ed6\u4eba\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\n\n\u7136\u540e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5728\u4e8c\u5206\u7b54\u6848\u4e4b\u540e\uff0c\u901a\u8fc7\u6c42\u6811\u4e0a\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u957f\u94fe\u6765\u68c0\u6d4b\u7b54\u6848\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u5f88\u66b4\u529b\u7684$DP$\n\n\u8bbe$f_{i,j}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f80\u4e0b\u8d70$j$\u6761\u8fb9\u7684\u6700\u5927\u6743\u503c\u548c\n\n\u5bf9\u4e8e\u4e00\u9897\u5b50\u6811\uff0c\u53ef\u4ee5\u4e00\u8fb9\u66f4\u65b0\u6570\u7ec4\uff0c\u4e00\u8fb9\u66f4\u65b0\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O($n^2$)\n\n\u7136\u800c\u8fd9\u662f\u4e00\u4e2a\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\u7684$DP$\n\n\u53ef\u4ee5\u8003\u8651\u7528\u957f\u94fe\u5256\u5206\u4f18\u5316\uff0c\u505a\u5230\u5747\u644aO(1)\u7684\u590d\u6742\u5ea6(\u540e\u9762\u4f1a\u8bb2\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b)\n\n\u7136\u800c\u56e0\u4e3a\u7edf\u8ba1\u7b54\u6848\u65f6\u8981\u628a\u6bcf\u4e2a\u957f\u5ea6\u7684\u7b54\u6848\u90fd\u627e\u4e00\u904d\uff0c\u5982\u679c\u8fd9\u6837\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662fO($n^2$)\uff0c\u5e76\u6ca1\u6709\u4f18\u5316\u7684\u6548\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u50cf\u7ebf\u6bb5\u6811\u7ef4\u62a4\u91cd\u94fe\u5256\u5206\u4e00\u6837\u7ef4\u62a4\u957f\u94fe\u5256\u5206\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u505a\u5230O($n*log\\ n$)\uff0c\u4e0e\u70b9\u5206\u6cbb\u4e00\u81f4\uff0c\u4f46\u4ee3\u7801\u91cf\u8981\u5c0f\u5f88\u591a\uff0c\u800c\u4e14\u4e5f\u4e0d\u6015\u88ab\u626b\u628a\u56fe\u5361\u6389(\u867d\u7136\u70b9\u5206\u6cbb\u4f18\u5316\u540e\u4e5f\u4e0d\u4f1a\u88ab\u5361\uff0c\u4f46\u8981\u8003\u8651\u7684\u8d8a\u591a\u8d8a\u6613\u9519)\n\n\u7b97\u4e0a\u4e8c\u5206\u7b54\u6848\uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u4e3aO($n*log^2\\ n$)\n\n\u7406\u8bba\u4e0a\u7ebf\u6bb5\u6811\u5e38\u6570\u5e94\u8be5\u4f18\u4e8e\u70b9\u5206\u6cbb\uff0c\u7136\u800c\u6211\u7684\u5e38\u6570\u88ab\u70b9\u5206\u6cbb\u540a\u6253\u4e86(~~\u6211\u662f\u771f\u7684\u5f31~~)\u3002\n\n\u81f3\u4e8e\u957f\u94fe\u5256\u5206\n\n\u5904\u7406\u4e00\u9897\u6811\u7684\u94fe\u4e0a\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5e38\u5e38\u6211\u4eec\u5e38\u5e38\u6309\u7167\u5b50\u6811\u5927\u5c0f\u5212\u5206\u91cd\u94fe(\u4e5f\u5c31\u662f\u91cd\u94fe\u5256\u5206)\uff0c\u8fd9\u6837\u6bcf\u8df3\u4e00\u6b21\u91cd\u94fe\uff0c\u6811\u7684$size$\u81f3\u5c11\u4e582\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728$log\\ n$\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u4e00\u4e9b\u94fe\u4e0a\u64cd\u4f5c\uff0c\u7136\u800c\u6709\u4e00\u79cd\u5212\u5206\u5c31\u662f\u6309\u7167\u6700\u6df1\u7684\u5b50\u6811\u5212\u5206\u91cd\u94fe\uff0c\u8fd9\u6837\u867d\u7136\u4e0d\u80fd\u50cf\u91cd\u94fe\u5256\u5206\u4e00\u6837\u5728\u77ed\u65f6\u95f4\u5185\u5b8c\u6210\u8bb8\u591a\u64cd\u4f5c(\u957f\u94fe\u5256\u5206\u7684\u590d\u6742\u5ea6\u4e3aO($\\sqrt{n}$))\uff0c\u4f46\u662f\u8fd9\u79cd\u6309\u6df1\u5ea6\u5212\u5206\u80fd\u7ed9\u6211\u4eec\u5e26\u6765\u8bb8\u591a\u4f18\u79c0\u7684\u6027\u8d28\u3002\n\n\u6027\u8d281\uff1a\u6240\u6709\u957f\u94fe\u7684\u957f\u5ea6\u548c\u4e3a$n$\uff0c\u56e0\u4e3a\u957f\u94fe\u4e0e\u91cd\u94fe\u4e00\u6837\u4e5f\u662f\u4e92\u4e0d\u76f8\u4ea4\u7684\u3002\n\n\u6027\u8d282\uff1a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9$x$\u7684$k$\u7ea7\u7956\u5148\u6240\u5728\u957f\u94fe\u7684\u957f\u5ea6\u4e00\u5b9a\u5927\u4e8e\u6216\u7b49\u4e8e$k$(\u81ea\u5df1\u60f3\u60f3\u4e3a\u4ec0\u4e48)\n\n\u957f\u94fe\u5256\u5206\u6709\u4e24\u4e2a\u7ecf\u5178\u5e94\u7528\n\n\u5e94\u75281\uff1a\u5728$O(n*log\\ n)$\u7684\u9884\u5904\u7406\u540e\uff0c$O(1)$\u6c42\u4efb\u610f\u4e00\u70b9\u7684$k$\u7ea7\u7956\u5148\n\n\u5e94\u75282\uff1a\u4f18\u5316\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\u7684\u6811\u5f62$DP$\n\n\u8fd9\u9898\u5c31\u662f\u5e94\u75282\u5bf9\u5427\u3002\u90a3\u4e48\u6211\u5c31\u4e0d\u8bb2\u5e94\u75281\u4e86\u3002\n\n\u8fd9\u7c7b\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\u7684$DP$,\u6211\u4eec\u5f80\u5f80\u53ea\u80fd\u66b4\u529bfor\u94fe\u957f\u66f4\u65b0\uff0c\u7136\u800c\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u9897\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\uff0c\u4e3a\u4ec0\u4e48\uff0c\u5047\u8bbe\u5bf9\u4e8e\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8981\u5408\u5e76\u7b2c\u4e00\u9897\u5b50\u6811$j$\u65f6\u6211\u4eec\u8981\u505a\u7684\u4ec5\u4ec5\u53ea\u662f\u5c06$j$\u5b50\u6811\u7684\u6bcf\u4e00\u4e2a\u4fe1\u606f\u590d\u5236\u4e00\u904d\u5f80\u540e\u79fb\u4e00\u4f4d\u518d\u52a0\u4e0a\u67d0\u4e2a\u6743\u503c\u7136\u540e\u8d4b\u7ed9\u5b50\u6811$i$,\u66b4\u529b\u505a\u7684\u8bdd\u5c31\u975e\u5e38\u7684\u6d6a\u8d39\uff0c\u4f1a\u5c06\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u7684\u4fe1\u606f\u5168\u90e8\u820d\u5f03\uff0c\u90a3\u4e48\u600e\u6837\u628a\u8fd9\u4e9b\u5df2\u7ecf\u5f97\u5230\u7684\u4fe1\u606f\u5229\u7528\u8d77\u6765\u5462\u3002\n\n\u9996\u5148\u5148\u6309\u6df1\u5ea6\u5212\u5206\u91cd\u513f\u5b50(\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u540e\u9762\u4f1a\u8bb2\u5230)\uff0c\u7136\u540e\u5bf9\u6811\u8fdb\u884c$dfs$\uff0c\u4f18\u5148\u904d\u5386\u91cd\u513f\u5b50(\u5c31\u8ddf\u91cd\u94fe\u5256\u5206\u4e00\u6837\uff0c\u53ea\u662f\u5212\u5206\u65b9\u5f0f\u4e0d\u540c),\u5c06$dfs$\u5e8f\u8bb0\u5f55\u4e0b\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u6bcf\u4e00\u6761\u957f\u94fe\u7684$dfs$\u90fd\u662f\u8fde\u7eed\u4e00\u6bb5\u7684\uff0c\u7136\u540e\u6211\u4eec\u5c06\u72b6\u6001\u4ee5dfs\u5e8f\u8bb0\u5f55\u5728\u6570\u7ec4$f$\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c\u540e\u79fb\u4e00\u4f4d\u7684\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u81f3\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u6743\u503c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\u8bb0\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4$g$\u4e2d\uff0c\u5e76\u5c06\u91cd\u513f\u5b50\u7684\u6807\u8bb0\u7ee7\u627f\uff0c\u5b9e\u9645\u4e0a\u7684$f_i$\u5c31\u662f$f_i+g_i$,\u8fd9\u6837\u540c\u4e00\u6761\u957f\u94fe\u4e0a\u7684\u4fe1\u606f\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\uff0c\u800c\u5728\u8f7b\u513f\u5b50\u4e0a\u7684\u4fe1\u606f\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u4fee\u6539\uff0c\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\uff0c\u8fd9\u6837\u505a\u56e0\u4e3a\u8f7b\u513f\u5b50\u4e00\u5b9a\u662f\u67d0\u6761\u957f\u94fe\u7684\u94fe\u5934\uff0c\u91cd\u513f\u5b50\u7684\u4fe1\u606f\u76f4\u63a5\u7ee7\u627f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u662f\u5728\u6bcf\u6761\u957f\u94fe\u7684\u94fe\u5934\u5c06\u6574\u6761\u957f\u94fe\u904d\u5386\u4e00\u904d\uff0c\u800c\u6839\u636e\u53c8\u7531\u4e8e\u957f\u94fe\u4e92\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a$O(n)$,\u5747\u644a$O(1)$\u3002\n\n\u7136\u540e\u770b\u4e0a\u9762\u52a0\u7c97\u5b57\uff0c\u600e\u4e48\u505a\u5462\uff0c\u4ee5\u8fd9\u4e2a\u8282\u70b9\u7684$dfs$\u5e8f\u4e3a\u5f00\u5934,\u5c06\u5f62\u5982$f_{i,j}$\u7684\u4fe1\u606f\u4ee5$f_{dfn_i+j}$\u7684\u5f62\u5f0f\u4fdd\u5b58\uff0c\u4fbf\u4e8e\u76f4\u63a5\u7ee7\u627f\uff0c\u7531\u4e8e\u7ee7\u627f\u4e4b\u540e\u91cd\u513f\u5b50\u4fe1\u606f\u5c31\u6ca1\u7528\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5408\u5e76\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u5e94\u8be5\u5c31\u80fd\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u6309\u6df1\u5ea6\u5212\u5206\u94fe\u4e86\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6240\u6709\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u90fd\u80fd\u591f\u76f4\u63a5\u5408\u5e76\u4e0a\u6765\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u771f\u7684\u6bd4\u70b9\u5206\u6cbb\u597d\u5199\u3002\n```\n#include<bits/stdc++.h>\n#define lc no<<1\n#define rc no<<1|1\n#define ls lc,l,mid\n#define rs rc,mid+1,r\n#define mid ((l+r)>>1)\nusing namespace std;\nconst int _=1e6+20;\nint a[_],to[_],nex[_],w[_],ww[_],dep[_],son[_],pos[_],n,LL,RR,cnt;\ndouble p,f[_],t[_],ans,g[_];\nvoid clear(int no,int l,int r){\n    t[no]=-1e18;\n    if(l==r)return;\n    clear(ls);clear(rs);\n}\nvoid update(int no,int l,int r,int k,double x){\n    t[no]=max(t[no],x);\n    if(l==r){return;}\n    if(k<=mid)update(ls,k,x);\n    else update(rs,k,x);\n}\ndouble query(int no,int l,int r,int L,int R){\n    if(l>R||r<L)return -1e18;\n    if(l>=L&&r<=R)return t[no];\n    return max(query(ls,L,R),query(rs,L,R));\n}\nvoid Dfs(int fa,int u,int W){\n    dep[u]=-1;\n    for(int i=a[u];i;i=nex[i]){\n        int v=to[i];\n        if(v==fa)continue;\n        Dfs(u,v,w[i]);\n        if(dep[u]<dep[v])dep[u]=dep[v],son[u]=v,ww[u]=w[i];\n    }\n    dep[u]++;\n}\nvoid dfs(int fa,int u){\n    if(!pos[u])pos[u]=++cnt;\n    int pu=pos[u];\n    g[pu]=f[pu]=0;\n    if(son[u]){\n        dfs(u,son[u]);\n        g[pu]+=g[pu+1]+ww[u]-p;\n        f[pu]=-g[pu];\n    }\n    update(1,1,n,pu,f[pu]);\n    for(int i=a[u];i;i=nex[i]){\n        int v=to[i];\n        if(v==fa||v==son[u])continue;\n        dfs(u,v);int pv=pos[v];\n        for(int j=1;j<=dep[v]+1;++j)\n            if(LL-j<=dep[u]){\n                double xx=query(1,1,n,pu+max(1,LL-j),pu+min(RR-j,dep[u]));\n                ans=max(ans,w[i]-p+f[pv+j-1]+g[pv]+g[pu]+xx);\n            }\n        for(int j=1;j<=dep[v]+1;++j){\n            if(w[i]-p+f[pv+j-1]+g[pv]>g[pu]+f[pu+j]){\n                f[pu+j]=w[i]-p+f[pv+j-1]+g[pv]-g[pu];\n                update(1,1,n,pu+j,f[pu+j]);\n            }\n        }\n    }\n    if(dep[u]>=LL)ans=max(ans,g[pu]+query(1,1,n,pu+LL,pu+min(RR,dep[u])));\n}\nint check(double x){\n    clear(1,1,n);p=x;\n    ans=-1e18;dfs(0,1);\n    return ans>=0;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>LL>>RR;\n    for(int i=1,t=0;i<n;++i){\n        int u,v,W;cin>>u>>v>>W;\n        nex[++t]=a[u];to[t]=v;w[t]=W;a[u]=t;\n        nex[++t]=a[v];to[t]=u;w[t]=W;a[v]=t;\n    }\n    Dfs(0,1,0);\n    double l=0,r=1e6;\n    while(r-l>1e-5){\n        double Mid=(l+r)/2;\n        if(check(Mid))l=Mid;\n        else r=Mid;\n    }\n    printf(\"%.3lf\\n\",l);\n    return 0;\n}\n\n```\n",
        "postTime": 1534315651,
        "uid": 63348,
        "name": "Cqdnse",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u6709\u5751\u2026\u2026\n\n\u6709\u4e00\u4e2a\u505a\u6cd5\u53ef\u4ee5hack\u6389\u7f51\u4e0a\u5927\u90e8\u5206\u7684\u9898\u89e3\n\n\u5e76\u4e14luogu\u4e0a\u6709\u8fd9\u6837\u7684\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u8981\u8ba4\u4e3a\u4f60T\u4e86\u662f\u5e38\u6570\u5927\n\n______________________\n\n\u9898\u610f\u7b80\u5355\u660e\u4e86\uff0c\u6c42\u6811\u4e0a\u957f\u5ea6\u5728L\u5230R\u5185\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u7684\u5e73\u5747\u503c\u6700\u5927\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u6700\u5927\u5316\u8fd9\u4e2a\u5f0f\u5b50\n\n## $\\frac{\\sum_{}val_{u,v}}{\\sum len_{u,v}}$\n\n\u7136\u540e\u8fd9\u91cc\u662f01\u5206\u6570\u89c4\u5212\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u5957\u8def\u53eb\u4e8c\u5206\u7b54\u6848\n\n\u6211\u4eec\u5047\u8bbe\u7b54\u6848\u662fmid\uff0c\u7136\u540e\u5224\u65ad\u6700\u4f18\u89e3\u6bd4mid\u5927\u8fd8\u662f\u6bd4mid\u5c0f\n\n\u6362\u8a00\u4e4b\u6211\u4eec\u8981\u9a8c\u8bc1\u4e0d\u7b49\u5f0f\n\n## $\\frac{\\sum val_{u,v}}{\\sum len_{u,v}}\\leq mid$\n\n\u662f\u5426\u6210\u7acb\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u53d8\u4e00\u4e0b\u5f62\u2026\u2026\n\n## $\\sum val_{u,v}-len_{u,v}mid \\leq 0$\n\n\u6240\u4ee5\u8bf4\u8fd9\u5c31\u975e\u5e38\u65b9\u4fbf\u6211\u4eec\u9a8c\u8bc1\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u51cf\u53bbmid\u7136\u540e\u5224\u5b9a\u4e00\u4e0b\u6709\u6ca1\u6709\u8d1f\u7684\u8def\u5f84\u5373\u53ef\n\n\u627e\u8d1f\u8def\u5f84\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u957f\u5ea6\u5728[L,R]\u4e2d\u5bfb\u627e\u6700\u5c0f\u7684\u8def\u5f84\n\n\u4e00\u770b\u6709\u957f\u5ea6\u9650\u5236\u2026\u2026\u5f53\u7136\u662f\u70b9\u5206\u6cbb\u5566\u2026\u2026\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8001\u5957\u8def\uff0c\u5bf9\u8fd9\u9897\u6811\u8fdb\u884c\u70b9\u5206\u6cbb\uff0c\u6b64\u65f6\u6211\u4eec\u8003\u8651\u8fc7\u5206\u6cbb\u91cd\u5fc3g\u7684\u6240\u6709\u8def\u5f84\n\n\u66b4\u529b\u7684\u4ece\u5206\u6cbb\u91cd\u5fc3dfs\u4e00\u904d\u7136\u540e\u6c42\u51fa\u6bcf\u4e00\u4e2a\u8def\u5f84\u7684\u8ddd\u79bb\u548c\u6df1\u5ea6\n\n\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u662f\u201c\u62fc\u5408\u201d\u4e24\u6761\u8def\u5f84\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u62fc\u5408\u5462\uff1f\n\n\u5f53\u7136\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8def\u5f84\u6c42\u51fa\u548c\u5b83\u5339\u914d\u7684\u6700\u4f18\u7684\u4e00\u4e2a\u8def\u5f84\u4e86\u2026\u2026\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u6df1\u5ea6\u7684\u9650\u5236\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u80fd\u548c\u8fd9\u4e2a\u8def\u5f84\u5339\u914d\u7684\u8def\u5f84\u7684\u6df1\u5ea6\u5fc5\u987b\u5728\u4e00\u4e2a\u533a\u95f4\u91cc\n\n\u5982\u679c\u5bf9\u6df1\u5ea6\u5efa\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u8bdd\u6211\u4eec\u4f1a\u53d1\u73b0\u60c5\u51b5\u5341\u5206\u8fa3\u624b\uff0c\u56e0\u4e3a\u590d\u6742\u5ea6\u6b64\u65f6\u731b\u589e\u81f3\n$O(nlog^3n)$\u6839\u672c\u8fc7\u4e0d\u53bb\n\n\u6b64\u65f6\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u5982\u679c\u628a\u5272\u6389g\u4e4b\u540e\u6bcf\u4e00\u4e2a\u5b50\u8054\u901a\u5757\u4e2d\u7684\u8def\u5f84\u6309\u7167\u6df1\u5ea6\u6392\u5e8f\uff0c\u90a3\u4e48\u968f\u7740\u6df1\u5ea6\u7684\u9012\u589e\uff0c\u53ef\u4ee5\u548c\u5f53\u524d\u8def\u5f84\u5339\u914d\u7684\u8def\u5f84\u7684\u6df1\u5ea6\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u662f\u5355\u8c03\u9012\u589e\u7684\n\n\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff0c\u590d\u6742\u5ea6\u6210\u529f\u4f18\u5316\u81f3$O(nlog^2n)$\u7686\u5927\u6b22\u559c\uff1f\n\n\u6b64\u65f6\u4f60\u4f1a\u53d1\u73b0\u4f60\u590d\u6742\u5ea6\u5206\u6790\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u6bcf\u6b21\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\u662f$min(R-L,max(dep))$\u7684\u5176\u4e2d$max(dep)$\u4e3a\u8fd9\u4e2a\u8054\u901a\u5757\u4e4b\u524d\u7684\u8054\u901a\u5757\u7684\u6700\u6df1\u6df1\u5ea6\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a2/3n\u7684\u957f\u94fe\uff0c\u5728\u4e2d\u70b9\u5904\u6784\u9020\u4e00\u4e2a3/n\u7684\u83ca\u82b1\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u628a\u4f60\u5361\u6210$O(n^2logn)$\n\n\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u60c5\u51b5\u9700\u8981\u628a\u8054\u901a\u5757\u4eec\u6309\u7167\u6700\u5927\u6df1\u5ea6\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u63d2\u5165\u8def\u5f84\uff0c\u5173\u4e8e\u540c\u4e00\u4e2a\u6df1\u5ea6\u7684\u8def\u5f84\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\u7684\u6570\u7ec4\u5b58\u50a8\u8def\u5f84\u7684\u5e26\u6743\u957f\u5ea6\n\n\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u4f7f\u7528\u5355\u8c03\u961f\u5217\u8fdb\u884c\u6c42\u89e3\u6700\u5c0f\u503c\u7684\u64cd\u4f5c\u4e86\n\n\u7136\u540e\u5c31\u662f\u5927\u529b\u4e8c\u5206\u5957\u5728\u5916\u9762\u5566~\n\n\u5bf9\u4e86\uff0c\u4e3a\u4e86\u4f18\u5316\u5e38\u6570\uff0c\u8bf7\u5c06\u70b9\u5206\u6811\u63d0\u524d\u5efa\u597d\uff0c\u4e0d\u7136\u53ef\u80fd\u56e0\u4e3a\u5e38\u6570\u5de8\u5927\u800cT\u98de\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=1e5+10;typedef double db;const db eps=1e-9;\nint v[2*N];int x[2*N];int al[N];int ct;db val[2*N];int siz[N];bool book[N];\nbool cut[N];db mxv[N];int q[N];int hd;int tl;int L;int R;int n;\nstruct data{int dep;db v;friend bool operator <(data a,data b){return a.dep>b.dep;}};\nstruct chi//\u5bf9\u6bcf\u4e2a\u8054\u901a\u5757\u6392\u5e8f\n{\n    int mxdep;vector <data> ve;\n    inline void push(const data& da){mxdep=max(mxdep,da.dep);ve.push_back(da);}\n    inline void srt(){sort(ve.begin(),ve.end());}\n};vector <chi> s[N];\ninline bool cmp(const chi& a,const chi& b){return a.mxdep<b.mxdep;}\ninline void add(int u,int V,db va){v[++ct]=V;x[ct]=al[u];al[u]=ct;val[ct]=va;}\ninline int dfs1(int u)//siz\n{\n    book[u]=true;siz[u]=1;\n    for(int i=al[u];i;i=x[i])if(!book[v[i]]&&!cut[v[i]])siz[u]+=dfs1(v[i]);\n    book[u]=false;return siz[u];\n}\ninline int find(int u,const int& tot)//\u91cd\u5fc3\n{\n    book[u]=true;int ret=u;\n    for(int i=al[u];i;i=x[i])\n    if(!book[v[i]]&&!cut[v[i]]&&2*siz[v[i]]>=tot){ret=find(v[i],tot);break;}\n    book[u]=false;return ret;\n}\ninline void dfs2(int u,vector <chi>::iterator ve,int dep,db dis)\n{\n    book[u]=true;ve->push((data){dep,dis});\n    for(int i=al[u];i;i=x[i])if(!book[v[i]]&&!cut[v[i]])dfs2(v[i],ve,dep+1,dis+val[i]);\n    book[u]=false;\n}\ninline void solve(int u)//\u6784\u5efa\u70b9\u5206\u6811\n{\n    dfs1(u);int g=find(u,siz[u]);cut[g]=true;\n    for(int i=al[g];i;i=x[i])\n    {\n        if(cut[v[i]])continue;s[g].push_back(chi());\n        dfs2(v[i],--s[g].end(),1,val[i]);(--s[g].end())->srt();\n    }sort(s[g].begin(),s[g].end(),cmp);\n    for(int i=al[g];i;i=x[i]){if(!cut[v[i]])solve(v[i]);}\n}\ninline bool jud(db ans)//\u6bcf\u6b21\u5728\u70b9\u5206\u6811\u4e0a\u62fc\u5408\u8def\u5f84\n{\n    vector <chi>::iterator it1;vector <data>::iterator it2;\n    for(int i=1;i<=n;i++)mxv[i]=-0x7f7f7f7f;bool ret=false;\n    for(int i=1,nwdep;i<=n;i++)\n    {\n        for(it1=s[i].begin(),nwdep=0;it1!=s[i].end();nwdep=it1->mxdep,++it1)\n        {\n            int dr=0;\n            for(it2=it1->ve.begin(),hd=1,tl=0;it2!=it1->ve.end();++it2)//\u5355\u8c03\u961f\u5217\n            {\n                int nl=max(0,(int)(L-it2->dep));int nr=min(nwdep,(int)(R-it2->dep));if(nl>nr){continue;}\n                for(int np=dr+1;np<=nr;np++){while(hd<=tl&&mxv[q[tl]]<mxv[np])--tl;q[++tl]=np;}\n                while(hd<=tl&&q[hd]<nl){++hd;}dr=nr;\n                if(mxv[q[hd]]+it2->v-ans*it2->dep>eps){ret=true;goto skip;}\t\t\t\t\n            }\n            for(it2=it1->ve.begin();it2!=it1->ve.end();++it2)//\u7279\u5224\u5230\u6839\u7684\u8def\u5f84\u540c\u65f6\u5c06\u8def\u5f84\u63d2\u5165\u5230\u6743\u503c\u6570\u7ec4\u4e2d\n            {\n                mxv[it2->dep]=max(mxv[it2->dep],it2->v-ans*it2->dep);\n                if(L<=it2->dep&&it2->dep<=R&&mxv[it2->dep]>eps){ret=true;goto skip;}\n            }\n        }skip:;\n        for(it1=s[i].begin();it1!=s[i].end();++it1)\n            for(it2=it1->ve.begin();it2!=it1->ve.end();++it2)\n            {mxv[it2->dep]=-0x7f7f7f7f;}\n        if(ret)return true;\n    }return false;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&L,&R);\n    for(int i=1,u,v,va;i<n;i++)\n    {scanf(\"%d%d%d\",&u,&v,&va);add(u,v,va);add(v,u,va);}\n    solve(1);db l=0;db r=1e6;//\u65e0\u8111\u4e8c\u5206\n    while(r-l>1e-4){db mid=(l+r)/2;(jud(mid)?l:r)=mid;}\n    printf(\"%.3lf\",l);return 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1530534273,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u67d0\u53ef\u80fd\u5047\u6389\u7684$n\\log n$\u7b97\u6cd5\u3002**\u8bc1\u660e\u4e0d\u592a\u4e25\u8c28\uff0c\u5982\u679c\u4f60\u628a\u5b83\u53c9\u6389\u4e86\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u66f4\u7f8e\u5999\u7684\u8bc1\u660e\u6b22\u8fce\u79c1\u4fe1\u6216\u8005\u53d1\u5e16\u8054\u7cfb**\u3002\n\n\u7167\u7740[[BJOI2017]\u6811\u7684\u96be\u9898](https://www.luogu.com.cn/problem/P3714)\u7684\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u60f3\u5230\u8fd9\u9898\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528**\u5355\u8c03\u961f\u5217\u6309\u79e9\u5408\u5e76**\uff0c\u5373\u5c06\u5206\u6cbb\u6811\u4e2d\u6240\u6709\u70b9\u6309\u7167**\u6df1\u5ea6\u9012\u589e**\u6392\u5e8f\uff0c\u5219\u53ef\u9009\u6df1\u5ea6\u533a\u95f4\u4e00\u5b9a\u662f**\u9012\u51cf**\u7684\u3002\u56e0\u4e3a\u8fd9\u4e00\u533a\u95f4\u662f\u9012\u51cf\u7684\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u4f7f\u7528**\u5355\u8c03\u961f\u5217**\u7ef4\u62a4\u3002\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u53ef\u4ee5\u5728\u672c\u4eba\u7684[\u70b9\u5206\u6cbb\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/Troverld/dian-fen-zhi-xue-xi-bi-ji)\u627e\u5230\u6216\u8005\u53c2\u9605\u5176\u5b83\u795e\u4ed9\u7684\u9898\u89e3\u3002\n\n\u8fd9\u91cc\u4e3b\u8981\u662f\u63a2\u8ba8$n\\log n$\u7684\u505a\u6cd5\uff0c\u5373\u4e0d\u5728\u5916\u9762\u5957\u4e0a$\\log n$\u7684\u4e8c\u5206\u7684\u7b97\u6cd5\u3002\n\n\u6211\u4eec\u8bbe\u5f53\u524d\u63a2\u8ba8\u7684\u70b9\u662f$x$\uff0c\u5b83\u7684\u6df1\u5ea6\u662f$dep_x$\uff0c\u5230\u6839\u7684\u8def\u5f84\u6743\u503c\u4e3a$sum_x$\u3002\u518d\u8bbe\u6240\u6709\u5176\u5b83\u8def\u5f84\u4e2d\uff0c\u6df1\u5ea6\u4e3a$k$\u7684\u8def\u5f84\u6700\u5927\u7684\u6743\u503c\u4e3a$buc_k$\u3002\u5355\u8c03\u961f\u5217\u4e2d\u5b58\u50a8\u7684\u662f**\u6df1\u5ea6**\uff0c\u6309\u7167\u4ece\u961f\u9996\u5230\u961f\u5c3e\u9012\u51cf\u3002\n\n\u56e0\u4e3a$x$\u5df2\u7ecf\u6309\u7167\u6df1\u5ea6\u6392\u5e8f\u4e86\uff0c\u6240\u4ee5\u5fc5\u6709$dep_x\\nearrow$\u3002\u5176\u5b83\u503c\u90fd\u6ca1\u6709\u4efb\u4f55\u6027\u8d28\u3002\n\n------------\n\n\n\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u8d2a\u5fc3\u7b56\u7565\uff1a\n\n\u5f53\u4ece\u961f\u5c3e\u52a0\u5165\u65b0\u5143\u7d20\u65f6\uff0c\u53ea\u8981\u5f53\u524d\u961f\u5c3e\u7684\u90a3\u6761\u8def\u5f84\u4e0e$x$\u62fc\u5408\u8d77\u6765\u7684\u7ed3\u679c\u5c0f\u4e8e\u65b0\u5143\u7d20\u4e0e$x$\u62fc\u5408\u7684\u7ed3\u679c\uff0c\u5c31\u5f39\u51fa\u961f\u5c3e\u3002\n\n------------\n\n\u8bbe\u961f\u5c3e\u5143\u7d20\u4e3a$a$\uff0c\u65b0\u5143\u7d20\u4e3a$b$\uff0c\u5fc5\u6709$a>b$\u3002\u5219\u53ea\u8981$\\dfrac{buc_a+sum_x}{a+dep_x}\\leq\\dfrac{buc_b+sum_x}{b+dep_x}$\u6210\u7acb\uff0c$a$\u5c31\u5e94\u8be5\u88ab\u5f39\u51fa\u3002\n\n\u73b0\u5728\u6211\u4eec\u8981\u6765\u8bc1\u660e\uff0c\u88ab\u5f39\u51fa\u7684$a$\u518d\u5f80\u540e\u90fd\u4e0d\u4f1a\u6210\u4e3a\u89e3\u3002\n\n\u663e\u7136\uff0c\u5f53$dep_x\\nearrow$\u65f6\uff0c\u4e24\u8fb9\u7684\u503c\u90fd\u662f**\u4e0b\u964d**\u7684\u3002\u6545\u56e0\u4e3a\u6b64\u65f6\u6709$\\dfrac{buc_a+sum_x}{a+dep_x}\\leq\\dfrac{buc_b+sum_x}{b+dep_x}$\uff0c\u518d\u5f80\u540e\u7684\u503c\u4e00\u5b9a\u66f4\u52a3\uff0c\u6545\u4e0d\u5982\u6b64\u65f6\u5c31\u9009\u62e9$b$\u3002\n\n\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u8003\u8651\u5230\uff0c\u4e07\u4e00$sum_x$\u4e5f\u8ddf\u7740$\\nearrow$\u600e\u4e48\u529e\uff1f\n\n\u5219\u663e\u7136\uff0c\u6b64\u65f6$a$\u589e\u52a0\u7684\u66f4\u5c11\u3002\n\n\u5982\u679c$sum_x$\u589e\u52a0\u7684\u901f\u5ea6\u5c0f\u4e8e\u5bf9\u5e94\u7684$dep_x$\u589e\u52a0\u7684\u901f\u5ea6\uff0c\u5219\u7b54\u6848\u80af\u5b9a\u4f1a\u53d8\u5f97\u66f4\u52a3\uff0c\u6545\u5c31\u7b97$a$\u53ef\u80fd\u5230\u90a3\u65f6\u4f1a\u66f4\u4f18\uff0c\u90a3\u66f4\u4f18\u7684\u7b54\u6848\u4e5f\u4f1a\u5c0f\u4e8e\u6b64\u65f6$b$\u7684\u7b54\u6848\uff1b\u5982\u679c$sum_x$\u589e\u52a0\u901f\u5ea6\u5927\u4e8e$dep_x$\u589e\u52a0\u7684\u901f\u5ea6\uff0c\u5219\u5c31\u662f$b$\u66f4\u4f18\u4e86\u3002\u6545$a$\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u5f39\u51fa\u3002\n\n------------\n\n\u90a3\u4e48\u961f\u9996\u5462\uff1f\u8bbe\u5176\u4e3a$c$\u3002\n\n\u9996\u5148\uff0c\u53ea\u8981\u961f\u9996\u5df2\u7ecf\u4e0d\u5408\u6cd5\u4e86\uff08\u5373$c+dep_x>R$\uff09\uff0c\u5c31\u5fc5\u987b\u88ab\u5f39\u6389\uff0c\u8fd9\u70b9\u6beb\u65e0\u7591\u95ee\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8003\u8651\u961f\u9996\u7684\u4e0b\u4e00\u4f4d\u4e3a$d$\u3002\u5219\u53ea\u8981$\\dfrac{buc_c+sum_x}{c+dep_x}\\leq\\dfrac{buc_d+sum_x}{d+dep_x}$\uff0c$c$\u5c31\u5e94\u8be5\u88ab\u5f39\u6389\u3002\n\n\u8fd9\u4e2a\u683c\u5f0f\u540c\u961f\u5c3e\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u6545\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u5730\u8bc1\u660e\u3002\n\n\u5219\u6211\u4eec\u53ea\u8981\u91c7\u53d6bfs\u89e3\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728$O(n\\log n)$\u65f6\u95f4\u5185\u89e3\u51fa\u672c\u9898\u3002\n\n**\u5f53\u7136\u8fd9\u4e2a\u8bc1\u660e\u4e0d\u5f88\u4e25\u8c28\uff0c\u6b22\u8fce\u6765\u53c9**\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(3)\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst ll fni=-1e11;\nint n,L,R;\ndouble mx;\nint ROOT,SZ,sz[200100],msz[200100];\nint dep[200100],mdp[200100],lim;\nll sum[200100],buc[200100];\nvector<pair<int,int> >v[200100];\nbool vis[200100];\nvoid getsz(int x,int fa){\n\tsz[x]=1;\n\tfor(auto i:v[x])if(!vis[i.first]&&i.first!=fa)getsz(i.first,x),sz[x]+=sz[i.first];\n}\nvoid getroot(int x,int fa){\n\tsz[x]=1,msz[x]=0;\n\tfor(auto i:v[x])if(!vis[i.first]&&i.first!=fa)getroot(i.first,x),sz[x]+=sz[i.first],msz[x]=max(msz[x],sz[i.first]);\n\tmsz[x]=max(msz[x],SZ-sz[x]);\n\tif(msz[x]<msz[ROOT])ROOT=x;\n}\nvoid getdep(int x,int fa,int fr){\n\tmdp[fr]=max(mdp[fr],dep[x]);\n\tfor(auto i:v[x])if(!vis[i.first]&&i.first!=fa)dep[i.first]=dep[x]+1,sum[i.first]=sum[x]+i.second,getdep(i.first,x,fr);\n}\nbool cmp(pair<int,int>x,pair<int,int>y){\n\treturn mdp[x.first]<mdp[y.first];\n}\nqueue<int>q;\ndeque<int>dq;\nvoid bfsread(int x){\n\tdq.clear();\n\tq.push(x);\n\tint tmp=lim;\n\twhile(!q.empty()){\n\t\tx=q.front(),q.pop();\n\t\twhile(tmp>=0&&tmp+dep[x]>=L){\n\t\t\twhile(!dq.empty()&&(buc[tmp]+sum[x])*(dq.back()+dep[x])>=(buc[dq.back()]+sum[x])*(tmp+dep[x]))dq.pop_back();\n\t\t\tdq.push_back(tmp--);\n\t\t}\n\t\twhile(!dq.empty()&&dq.front()+dep[x]>R)dq.pop_front();\n\t\twhile(dq.size()>=2&&(buc[dq[0]]+sum[x])*(dq[1]+dep[x])<=(buc[dq[1]]+sum[x])*(dq[0]+dep[x]))dq.pop_front();\n\t\tif(!dq.empty())mx=max(mx,1.0*(buc[dq.front()]+sum[x])/(dq.front()+dep[x]));\n\t\tfor(auto i:v[x])if(!vis[i.first]&&dep[i.first]>dep[x])q.push(i.first);\n\t}\n}\nvoid bfswrite(int x){\n\tq.push(x);\n\twhile(!q.empty()){\n\t\tx=q.front(),q.pop();\n\t\tbuc[dep[x]]=max(buc[dep[x]],sum[x]),lim=max(lim,dep[x]);\n\t\tfor(auto i:v[x])if(!vis[i.first]&&dep[i.first]>dep[x])q.push(i.first);\n\t}\n}\nvoid calc(int x){\n\tsum[x]=dep[x]=0;\n\tfor(auto i:v[x])if(!vis[i.first])sum[i.first]=i.second,dep[i.first]=1,getdep(i.first,x,i.first);\n\tsort(v[x].begin(),v[x].end(),cmp);\n\tfor(auto i:v[x])if(!vis[i.first])mdp[i.first]=0,bfsread(i.first),bfswrite(i.first);\n\tfor(int i=1;i<=lim;i++)buc[i]=fni;lim=0;\n}\nvoid solve(int x){\n\tcalc(x);\n\tgetsz(x,0); \n\tvis[x]=true;\n\tfor(auto i:v[x])if(!vis[i.first])ROOT=0,SZ=sz[i.first],getroot(i.first,0),solve(ROOT);\n}\nvoid read(int &x){\n\tx=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\n}\nint main(){\n\tread(n),read(L),read(R);\n\tfor(int i=1;i<=n;i++)buc[i]=fni;\n\tfor(int i=1,x,y,z;i<n;i++)read(x),read(y),read(z),v[x].push_back(make_pair(y,z)),v[y].push_back(make_pair(x,z));\n\tmsz[0]=n+1,SZ=n,getroot(1,0),solve(ROOT);\n\tprintf(\"%.3lf\\n\",mx);\n\treturn 0;\n}\n```\n",
        "postTime": 1595037824,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "## Solution \u4e8c\u5206\u7b54\u6848 + \u70b9\u5206\u6cbb + BFS + \u5355\u8c03\u961f\u5217\n- \u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848 $mid$\uff0c\u5c06\u6811\u4e0a\u6bcf\u6761\u8fb9\u51cf\u53bb $mid$\uff0c\u539f\u95ee\u9898\u88ab\u8f6c\u5316\u4e3a\u6c42\u6811\u4e0a\u662f\u5426\u5b58\u5728\u4e00\u6761\u4ef7\u503c\u548c\u5927\u4e8e\u7b49\u4e8e $0$ \u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u7528\u70b9\u5206\u6cbb\u6765\u505a\u3002 \n- \u56e0\u4e3a\u9898\u76ee\u5bf9\u8def\u5f84\u957f\u5ea6\u6709\u9650\u5236\uff0c\u8bb0\u5f55\u4e4b\u524d\u5904\u7406\u7684\u5b50\u6811\u4e2d\u67d0\u4e00\u957f\u5ea6\u7684\u8def\u5f84\u4ef7\u503c\u548c\u7684\u6700\u5927\u503c\u3002\n- \u5bf9\u91cd\u5fc3\u7684\u6bcf\u4e00\u68f5\u5b50\u6811 $BFS$\uff0c\u5219\u6309\u7167 $BFS$ \u5e8f\u679a\u4e3e\u70b9\uff0c\u8def\u5f84\u7684\u957f\u5ea6\u9012\u589e\u3002 \n- \u679a\u4e3e\u4e4b\u524d\u5904\u7406\u7684\u5b50\u6811\u4e2d\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5219\u5bf9\u4e8e\u5f53\u524d\u5b50\u6811\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\uff08\u6ed1\u52a8\u7a97\u53e3\uff09\u6765\u7ef4\u62a4\u5bf9\u5e94\u7684\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u5224\u65ad\u8def\u5f84\u603b\u4ef7\u503c\u548c\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $0$ \u5373\u53ef\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n \\times$\u4e8c\u5206\u6b21\u6570$)$\u3002\n- ~~\u5c3d\u7ba1\u6d1b\u8c37\u8dd1\u5f97\u5f88\u6162\uff0cBZOJ\u90a3\u4e48\u5361\u5e38\u7adf\u7136\u8fc7\u4e86\u2026\u2026~~\n- \u5982\u679c\u6709\u4ec0\u4e48\u597d\u7684\u63d0\u9ad8\u8fd0\u884c\u901f\u5ea6\u7684\u65b9\u6cd5\u6b22\u8fce\u6307\u51fa\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nconst double eps = 1e-6;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 1e5 + 5, M = N << 1;\nint n, L, U, Gs, Gt, tis, last, top, num;\nint sze[N], len[N], G[N], h[N], ph[N]; \nbool flag, vis[N], stp[N];\ndouble l = 1e9, r = -1e9, Ans, dis[N], f[N];\n\nstruct Edge\n{\n\tint to; double cst; Edge *nxt;\n}p[M], *lst[N], *P = p;\n\ninline void Link(int x, int y, int z)\n{\n\t(++P)->nxt = lst[x]; lst[x] = P; P->to = y; P->cst = z;\n\t(++P)->nxt = lst[y]; lst[y] = P; P->to = x; P->cst = z; \n\tif (z < l) l = z; if (z > r) r = z; \n}\n\ninline int get()\n{\n\tchar ch; int res = 0; bool flag = false;\n\twhile (ch = getchar(), !isdigit(ch) && ch != '-');\n\t(ch == '-' ? flag = true : res = ch ^ 48);\n\twhile (ch = getchar(), isdigit(ch))\n\t\tres = res * 10 + ch - 48;\n\treturn flag ? -res : res;\n}\n\ntemplate <class T> inline void CkMax(T &x, T y) {if (x < y) x = y;}\ninline int Min(int x, int y) {return x < y ? x : y;}\n\ninline void Dfs1(int x, int fa)\n{\n\tint cnt = 0; sze[x] = 1; \n\tfor (Edge *e = lst[x]; e; e = e->nxt)\n\t{\n\t\tint y = e->to;\n\t\tif (y == fa || vis[y]) continue;\n\t\tDfs1(y, x);\n\t\tsze[x] += sze[y];\n\t\tCkMax(cnt, sze[y]); \n\t}\n\tCkMax(cnt, tis - sze[x]);\n\tif (cnt < Gs)\n\t\tGs = cnt, Gt = x;\n}\n\ninline int findG(int x)\n{\n\tGs = Maxn;\n\tDfs1(x, 0);\n\treturn Gt;\n}\n\ninline void Init(int x)\n{\n\tint y; G[++num] = findG(x); vis[G[num]] = true;\n\tfor (Edge *e = lst[G[num]]; e; e = e->nxt)\n\t\tif (!vis[y = e->to]) tis = sze[y], Init(y);\n}\n\ninline void Bfs(int src)\n{\n\tstp[h[++top] = src] = true; int x, y;\n\tfor (int i = last + 1; i <= top; ++i)\n\t{\n\t\tx = h[i];\n\t\tfor (Edge *e = lst[x]; e; e = e->nxt)\n\t\t\tif (!vis[y = e->to] && !stp[y]) \n\t\t\t{\n\t\t\t\tdis[y] = dis[x] + e->cst;\n\t\t\t\tlen[y] = len[x] + 1;\n\t\t\t\tstp[h[++top] = y] = true;\n\t\t\t}\n\t}\n\tfor (int i = last + 1; i <= top; ++i) \n\t\tstp[h[i]] = false;\n}\n\ninline void Check()\n{\n\tint t = 1, w = 0, tip = last + 1;\n\tfor (int i = Min(U, len[h[top]]); i >= 0; --i)\n\t{\n\t\tint tl = i >= L ? 0 : L - i, tr = U - i;\n\t\twhile (t <= w && len[ph[t]] < tl) ++t;\n\t\twhile (tip <= top && len[h[tip]] < tl) ++tip;\n\t\twhile (tip <= top && len[h[tip]] <= tr)\n\t\t{\n\t\t\twhile (t <= w && dis[ph[w]] + eps <= dis[h[tip]]) --w;\n\t\t\tph[++w] = h[tip++];\n\t\t}\n\t\tif (t <= w && f[i] + dis[ph[t]] >= -eps) \n\t\t\treturn (void)(flag = true);\n\t}\n}\n\ninline void solve(int x)\n{\n\tint Gz = G[++num], y;\n\tvis[Gz] = true; h[0] = Gz; \n\tf[0] = dis[Gz] = len[Gz] = 0; top = 0;\n\tfor (Edge *e = lst[Gz]; e; e = e->nxt)\n\t\tif (!vis[y = e->to])\n\t\t{\n\t\t\tdis[y] = e->cst; len[y] = 1; \n\t\t\tlast = top; Bfs(y); Check();\n\t\t\tfor (int i = last + 1; i <= top; ++i)\t\n\t\t\t\tCkMax(f[len[h[i]]], dis[h[i]]);\n\t\t}\n\tfor (int i = 0; i <= top; ++i) \n\t\tf[len[h[i]]] = -1e9; \n\tfor (Edge *e = lst[Gz]; e; e = e->nxt)\n\t\tif (!vis[y = e->to]) solve(y); \n}\n\ninline bool Judge(double mid)\n{\n\tmemset(vis, false, sizeof(vis));\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (Edge *e = lst[i]; e; e = e->nxt)\n\t\t\te->cst -= mid;\n\tflag = false; num = 0; solve(1); \n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (Edge *e = lst[i]; e; e = e->nxt)\n\t\t\te->cst += mid;\n\treturn flag; \n}\n\nint main()\n{\n\ttis = n = get(); L = get(); U = get(); int x, y;\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tx = get(); y = get();\n\t\tLink(x, y, get()); f[i] = -1e9; \n\t}\n\tInit(1);\n\tfor (int i = 1; i <= 32; ++i)\n\t{\n\t\tdouble mid = (l + r) / 2.0;\n\t\tif (Judge(mid)) Ans = mid, l = mid;\n\t\t\telse r = mid;\n\t}\n\tprintf(\"%.3lf\", Ans);\n} \n```",
        "postTime": 1530279871,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u957f\u94fe\u5256\u5206\n\n\u56e0\u4e3a\u6709\u5f88\u591a\u5de8\u4f6c\u53ea\u662f\u8bb2\u4e86\u4e00\u4e0b\u5927\u81f4\u7684\u505a\u6cd5\uff0c\u5e76\u6ca1\u6709\u8be6\u7ec6\u5730\u89e3\u91ca\u5982\u4f55\u7ef4\u62a4\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002~~\u5de8\u4f6c\u4eec\u90fd\u4e0d\u5c51\u4e8e\u8be6\u7ec6\u5199\uff0c\u6211\u592a\u5f31\u4e86/kk~~\n\n\u9996\u5148\u5148\u5bf9\u539f\u6811\u8fdb\u884c\u957f\u94fe\u5256\u5206\u3002\n\n\u5148\u8bb2\u4e00\u4e9b\u5b9a\u4e49\uff1a\n\n- \u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u548c\u6307\u7684\u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u6743\u4e4b\u548c\n\n- \u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\u6307\u7684\u662f\u8fd9\u6761\u8def\u5f84\u5305\u542b\u591a\u5c11\u6761\u8fb9\n\n- $dep_i$ \u8868\u793a $i$ \u7684\u6df1\u5ea6\u3002\n\n- $maxdep_i$ \u8868\u793a\u5728 $i$ \u5b50\u6811\u5185\u7684\u6700\u6df1\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u3002\n\n- $dis_i$ \u8868\u793a\u4ece\u6839\u8282\u70b9\u5230\u8282\u70b9 $i$ \u7684\u8def\u5f84\u6743\u503c\u548c\u662f\u4ec0\u4e48\u3002\n\n- $id_i$ \u8868\u793a\u70b9 $i$ \u5728\u7ebf\u6bb5\u6811\u4e2d\u6240\u4ee3\u8868\u7684\u4f4d\u7f6e\n\n- $val_i$ \u8868\u793a\u7684\u662f\u7ebf\u6bb5\u6811\u7684\u70b9\u7684\u6743\u503c\n\n\u7136\u540e\u5bb9\u6613\u60f3\u5230\u5148\u5957\u4e00\u4e2a\u4e8c\u5206\u5957\u5728\u6700\u5916\u5c42\u6765\u4e8c\u5206 $AugValue$ ~~\uff08AV\uff09~~\u3002\n\n\u4e0d\u653e\u5047\u8bbe\u73b0\u5728\u7684\u4e8c\u5206\u503c\u4e3a $mid$\uff0c\u7136\u540e\u6839\u636e\u5206\u6570\u89c4\u5212\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u51cf\u53bb $mid$\uff0c\u90a3\u4e48\u53ea\u8981\u627e\u5230\u4e00\u6761\u957f\u5ea6\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u5b83\u7684\u8fb9\u6743\u548c\u5927\u4e8e $0$ \u5373\u53ef\uff0c\u540c\u65f6\u4e5f\u66f4\u65b0\u4e00\u4e0b $dis_i$\u3002\n\n\u90a3\u6211\u4eec\u5c31\u4e0d\u59a8\u627e\u5230\u6811\u4e2d\u957f\u5ea6\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u8def\u5f84\uff0c\u7136\u540e\u518d\u5224\u65ad\u662f\u5426\u5927\u4e8e $0$\u3002\n\n\u8ba9\u6211\u4eec\u5148\u7528\u6734\u7d20\u7684\u6811\u5f62 dp \u7684\u505a\u6cd5\u60f3\u4e00\u4e0b\uff0c\u8bbe $dp_{i,j}$ \u4e3a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f80\u4e0b\u8d70 $j$ \u6b65\u7684\u6700\u5927\u6743\u503c\u548c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a $u$ \u7684\u513f\u5b50 $a$\u3001$b$\uff0c\u6709\uff1a\n\n$$dp_{i,j}=\\max_{k=0}^{j}(dp_{a,k}+dp_{b,j-k})$$\n\n\u7136\u800c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u662f\u627f\u53d7\u4e0d\u8d77\u7684\u3002\n\n\u6240\u4ee5\u8003\u8651\u7528\u957f\u94fe\u5256\u5206\u8fdb\u884c\u4f18\u5316\u3002\n\n\u6bcf\u4e00\u6b21 $\\operatorname{check}$\uff0c\u6211\u4eec\u90fd\u5148\u6309\u7740\u91cd\u513f\u5b50\u7684\u65b9\u5411\u8fdb\u884c\u9012\u5f52\uff0c\u7136\u540e\u518d\u9012\u5f52\u5176\u4ed6\u7684\u513f\u5b50\u3002\n\n\u5148\u8bf4\u4e00\u4e0b\u6bcf\u4e00\u6b21\u9012\u5f52\u5230 $u$\uff0c\u5e76\u9012\u5f52\u5b8c\u5176\u91cd\u513f\u5b50\u540e\uff0c\u6211\u4eec\u5148\u5faa\u73af\u679a\u4e3e $u$ \u7684\u6bcf\u4e00\u4e2a\u975e\u91cd\u513f\u5b50 $son$\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u5148\u9012\u5f52\u8fd9\u4e2a\u975e\u91cd\u513f\u5b50 $son$\u3002\n\n~~\u53ef\u80fd\u770b\u4ee3\u7801\u597d\u89e3\u91ca\uff1a~~\uff08\u4f2a\u4ee3\u7801\uff09\n\n```cpp\nvoid solve(int u)\n{\n   solve(\u91cd\u513f\u5b50);\n   for(son=\u975e\u91cd\u513f\u5b50)\n   {\n   \tsolve(son);\n    \t......\n   }\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x92ut7kl.png)\n\n\u5982\u56fe\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\u91cd\u513f\u5b50\uff08\u7ea2\u8272\u8282\u70b9\uff09\u3001$son$ \u4ee5\u53ca $son$ \u5de6\u8fb9\u7684\u513f\u5b50\uff0c\u73b0\u5728\u8981\u66f4\u65b0\u7ecf\u8fc7 $u$ \u548c $son$ \u7684\u4e14\u5728 $u$ \u7684\u5b50\u6811\u5185\u7684\u8def\u5f84\u7684\u6700\u5927\u6743\u503c\u548c\uff0c\u5c31\u597d\u50cf\u8fd9\u6837\u7684\u8def\u5f84\uff1a\uff08\u84dd\u8272\u8def\u5f84\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/u1kaiblx.png)\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u5faa\u73af\u679a\u4e3e\u8fd9\u6761\u8def\u5f84\u4e2d $u\\rightarrow b$ \u7684**\u957f\u5ea6**\uff08\u4e0d\u662f\u6743\u503c\u548c\uff09 $j$\u3002\u90a3\u4e48 $a\\rightarrow u$ \uff08\u4e0d\u542b $u$\uff09\u957f\u5ea6\u7684\u53d6\u503c\u8303\u56f4\u662f $A=[\\max(1,L-j),\\min(R-j,maxdep_u-dep_u)]$\uff0c\u90a3\u4e48 $dep_a$ \u7684\u53d6\u503c\u8303\u56f4\u662f $B=dep_u+A$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u6c42\u51fa $u$ \u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u6df1\u5ea6\u5728 $B$ \u7684\u70b9\u4e2d\uff0c$dis_i$ \u6700\u5927\u7684\u90a3\u4e2a\u70b9 $i$ \u5f53\u505a $a$\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u5c31\u662f $u\\rightarrow b$ \u7684\u957f\u5ea6\u4e3a $j$ \u7684\u8def\u5f84\u4e2d\u6743\u503c\u548c\u6700\u5927\u7684\u90a3\u4e00\u6761\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e9b\u70b9\u4e2d $dis$ \u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002\n\n\u7531\u4e8e\u4ed6\u4eec\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u53ea\u662f\u5728\u4e00\u4e2a\u6df1\u5ea6\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u60f3\u5230\u4e86\u7ebf\u6bb5\u6811\u3002\n\n\u5173\u952e\u662f\u5982\u4f55\u7528\u8f83\u4f4e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u67e5\u8be2\u8fd9\u4e48\u591a\u5b50\u6811\u4e2d\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7684 $dis$ \u7684\u6700\u5927\u503c\u3002\n\n\u6240\u4ee5\u5728\u9012\u5f52 $son$ \u5de6\u8fb9\u7684\u513f\u5b50\u4ee5\u53ca $u$ \u7684\u91cd\u513f\u5b50\u65f6\uff0c\u8981\u9884\u5148\u7ef4\u62a4\u597d\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8fdb\u5165\u5230\u9012\u5f52\u5230 $u$ \u7684\u91cd\u513f\u5b50\u6216 $son$ \u5de6\u8fb9\u7684\u67d0\u4e2a\u513f\u5b50 $a$ \u7684\u60c5\u666f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lpch244m.png)\n\n\u5982\u56fe\uff0c\u84dd\u8272\u4e3a\u957f\u94fe\uff0c\u5f53\u6211\u4eec\u9012\u5f52\u5b8c $a$ \u51c6\u5907\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u597d\u8fd9\u68f5\u6811\u5185\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u7684 $dis$ \u7684\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u67d0\u4e00\u5c42\uff08\u6bd4\u5982 $dep=k$ \u8fd9\u4e00\u5c42\uff09\u7684\u6240\u6709\u8282\u70b9\u7684 $dis$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u5168\u90e8\u5408\u5e76\u5165 $a$ \u6240\u5728\u7684\u91cd\u94fe\u7684\u6ee1\u8db3 $dep=k$ \u7684\u8fd9\u4e2a\u70b9 $v$ \u91cc\u9762\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u59a8\u8bbe\u5728 $a$ \u5b50\u6811\u5185\u7684 $dep=k$ \u7684\u8fd9\u4e00\u5c42\u7684\u6240\u6709\u8282\u70b9\u7684\u96c6\u5408\u4e3a $\\{a_1,a_2,\\dots,a_m\\}$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7528\u628a\u70b9 $v$ \u5728\u7ebf\u6bb5\u6811\u4e2d\u6240\u4ee3\u8868\u7684\u4f4d\u7f6e $id_v$ \u7684\u6743\u503c $val_{id_v}$ \u8bbe\u4e3a $\\max_{i=1}^m a_i$\u3002\u6240\u4ee5\u6211\u4eec\u8981\u67e5\u8be2\u8fd9\u4e00\u5c42\u53ea\u7528\u67e5\u8be2\u8fd9\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u5c31\u597d\u4e86\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u5408\u5e76\uff0c\u6211\u4eec\u53ea\u9700\u5728\u904d\u5386 $a$ \u7684\u513f\u5b50\u7684\u65f6\u5019\u66f4\u65b0\u5c31\u597d\u4e86\u3002\n\n\u56de\u5230\u4e00\u5f00\u59cb\u7684\u95ee\u9898\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\u533a\u95f4\u5185\u6700\u5927\u7684 $dis_i$ \u4e86\u3002\n\n\u540c\u6837\uff0c\u5bf9\u4e8e $u$ \u6765\u8bf4\uff0c\u4e5f\u8981\u505a\u4e0a\u8ff0\u7684\u5904\u7406\u3002\n\n\u4e8b\u5230\u5982\u6b64\uff0c\u6574\u9053\u9898\u5c31\u5df2\u7ecf\u505a\u5b8c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u6709\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5\uff1a\n\n- INF \u8981\u5f00\u591f\uff0c\u81f3\u5c11 $N\\times \\dfrac{\\max v_i}{2}=50000000000$\u3002\n\n- \u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u5f00 double\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n \n#define N 100010\n#define INF 50000000010\n \nusing namespace std;\n \nint n,L,R;\nint cnt,head[N],nxt[N<<1],to[N<<1],w[N<<1];\nint tot,fa[N],num[N],dep[N],maxd[N],son[N],sonw[N],id[N];\ndouble ans,last[N],dis[N],ww[N<<1],sonww[N],maxn[N<<2];\n \nvoid dfs1(int u)\n{\n    for(int i=head[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(to[i]==fa[u]) continue;\n        maxd[v]=dep[v]=dep[u]+1;\n        fa[v]=u;\n        dfs1(v);\n        if(maxd[v]>maxd[son[u]])\n        {\n            maxd[u]=maxd[v];\n            son[u]=v;\n            sonw[u]=w[i];\n        }\n    }\n}\n \nvoid dfs2(int u)\n{\n    id[u]=++tot;\n    if(son[u])\n        dfs2(son[u]);\n    for(int i=head[u];i;i=nxt[i])\n        if(to[i]!=fa[u]&&to[i]!=son[u])\n            dfs2(to[i]);\n}\n \nvoid adde(int u,int v,int wi)\n{\n    to[++cnt]=v;\n    w[cnt]=wi;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n}\n \nvoid getnum(int k,int l,int r)\n{\n    if(l==r)\n    {\n        num[l]=k;\n        return;\n    }\n    int mid=(l+r)>>1;\n    getnum(k<<1,l,mid);\n    getnum(k<<1|1,mid+1,r);\n}\n \nvoid clear(int k,int l,int r)\n{\n    maxn[k]=-INF;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    clear(k<<1,l,mid);\n    clear(k<<1|1,mid+1,r);\n}\n \nvoid update(int k,int l,int r,int x,double y)\n{\n    maxn[k]=max(maxn[k],y);\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(x<=mid) update(k<<1,l,mid,x,y);\n    else update(k<<1|1,mid+1,r,x,y);\n}\n \ndouble query(int k,int l,int r,int ql,int qr)\n{\n    if(ql<=l&&r<=qr) return maxn[k];\n    int mid=(l+r)>>1;\n    double ans=-INF;\n    if(ql<=mid) ans=max(ans,query(k<<1,l,mid,ql,qr));\n    if(qr>mid) ans=max(ans,query(k<<1|1,mid+1,r,ql,qr));\n    return ans;\n}\n \nvoid solve(int u)\n{\n    update(1,1,n,id[u],dis[u]);\n    if(son[u])\n    {\n        int v=son[u];\n        dis[v]=dis[u]+sonww[u];\n        solve(v);\n    }\n    for(int i=head[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(v==fa[u]||v==son[u]) continue;\n        dis[v]=dis[u]+ww[i];\n        solve(v);\n        for(int j=1;j<=maxd[v]-dep[u];j++)\n        {\n            last[j]=maxn[num[id[v]+j-1]];\n            if(j<=R)\n            {\n            \tint ql=max(1,id[u]+L-j),qr=min(id[u]+R-j,id[u]+maxd[u]-dep[u]);\n                double tmp=query(1,1,n,ql,qr);\n                ans=max(ans,tmp+last[j]-dis[u]*2);\n            }\n        }\n        for(int j=1;j<=maxd[v]-dep[u];j++)\n            update(1,1,n,id[u]+j,last[j]);\n    }\n    ans=max(ans,query(1,1,n,id[u]+L,min(id[u]+R,id[u]+maxd[u]-dep[u]))-dis[u]);\n}\n \nbool check(double mid)\n{\n    for(int i=1;i<=cnt;i++) \n        ww[i]=1.0*w[i]-mid;\n    for(int i=1;i<=n;i++)\n        sonww[i]=1.0*sonw[i]-mid;\n    ans=-INF;\n    clear(1,1,n);\n    solve(1);\n    return ans>0;\n}\n \nint main()\n{\n    scanf(\"%d%d%d\",&n,&L,&R);\n    for(int i=1;i<n;i++)\n    {\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        adde(u,v,w),adde(v,u,w);\n    }\n    dfs1(1);\n    dfs2(1);\n    getnum(1,1,n);\n    double l=0,r=1000000;\n    while(r-l>1e-5)\n    {\n        double mid=0.5*(l+r);\n        if(check(mid)) l=mid;\n        else r=mid;\n    }\n    printf(\"%.3lf\\n\",l);\n    return 0;\n}\n```",
        "postTime": 1590758543,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u4f20\u9001\u95e8qwq](https://www.cnblogs.com/LLTYYC/p/11392247.html)\n\n\u7eaa\u5ff5\u7b2c\u4e00\u4e2a\u81ea\u5df1\u5199\u51fa\u7684\u9ed1\u9898...\n\n\u770b\u4e00\u773c\u5c31\u662f\u5206\u6570\u89c4\u5212\uff0c\u4e8c\u5206\u7b54\u6848\u5148\u5957\u4e0a\uff0c\u4e8c\u5206\u4e00\u4e2a $mid$ \uff0c\u628a\u6240\u6709\u8fb9\u6743\u51cf $mid$\n\n\u7136\u540e\u5c31\u53d8\u6210\u6c42\u6811\u4e0a\u8fb9\u6570\u5728 $[L,R]$ \u8303\u56f4\u5185\u7684\u6700\u957f\u94fe\n\n\u770b\u5230\u6811\uff0c\u770b\u5230\u6c42\u94fe\uff0c\u518d\u770b\u770b\u65f6\u95f4\u9650\u5236\uff0c\u70b9\u5206\u6cbb\u662f\u6ca1\u5f97\u8dd1\u4e86...\n\n\u5173\u952e\u662f\u8003\u8651\u5177\u4f53\u600e\u4e48\u70b9\u5206\u6cbb\n\n\u6bcf\u5230\u4e00\u4e2a\u5206\u6cbb\u8282\u70b9 $x$ \u5c31\u8003\u8651\u6240\u6709\u4ee5\u5b83\u4e3a\u6700\u6d45\u70b9\u7684\u6240\u6709\u94fe\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e24\u6761\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6df1\u5ea6\u76f8\u540c\u7684\u94fe\uff0c\u6211\u4eec\u53ea\u8981\u4fdd\u7559\u6700\u957f\u7684\u957f\u5ea6\n\n\u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6876 $T[i]$ \u8868\u793a\u5f53\u524d\u6df1\u5ea6\u4e3a $i$ \u7684\u6240\u6709\u4ee5 $x$ \u4e3a\u8d77\u70b9\u7684\u94fe\u7684\u957f\u5ea6\u6700\u5927\u503c\uff0c\u8003\u8651\u65b0\u52a0\u5165\u7684\u4e00\u4e2a\u513f\u5b50\u5b50\u6811 $v$ \u5982\u4f55\u5408\u5e76\n\n\u8bbe $tmp[i]$ \u8868\u793a $v$ \u4e2d\u6df1\u5ea6\u4e3a $i$\uff08\u8d77\u70b9\u662f $x$\uff09\u7684\u94fe\u7684\u6700\u957f\u957f\u5ea6\uff0c\u8003\u8651 $T$ \u548c $tmp$ \u7684\u5408\u5e76\uff08luogu\u7684\u56fe\u6709\u70b9\u5927...\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/73902.png)\n\n\u52a8\u6001\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488 $ld,rd$ \uff0c\u5206\u522b\u8868\u793a\u4e4b\u524d\u7684\u513f\u5b50\u8d21\u732e\u7684\u8fb9\u6570\u548c\u65b0\u52a0\u5165\u7684\u513f\u5b50\u8d21\u732e\u7684\u8fb9\u6570\n\n\u90a3\u4e48\u6709 $ld+rd>=L$ \u4e14 $ld+rd<=R$\uff0c\u8003\u8651\u679a\u4e3e $rd$\uff0c\u4f7f\u5f97 $ld$ \u8ddf\u7740\u53d8\u5316\uff0c\u5e76\u7edf\u8ba1\u5408\u6cd5 $ld$ \u7684\u533a\u95f4\u5185\u7684\u8d21\u732e\n\n\u901a\u8fc7\u4e0a\u9762\u4e24\u4e2a\u5f0f\u5b50\u5f97\u5230 $ld>=L-rd,ld<=R-rd$ \uff0c\u5373 $ld \\in [L-rd,R-rd]$\n\n\u53d1\u73b0 $rd$ \u589e\u52a0 $1$ \u90a3\u4e48\u6574\u4e2a\u5408\u6cd5\u533a\u95f4\u5c31\u6574\u4f53\u79fb\u4e00\u4f4d\uff0c\u5e76\u4e14\u533a\u95f4\u5927\u5c0f\u4e0d\u53d8\uff08\u4e0d\u8003\u8651\u8fb9\u754c\uff09\uff0c\u53d1\u73b0\u8fd9\u5c31\u662f\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u76f4\u63a5\u5355\u8c03\u961f\u5217\u5c31\u5b8c\u4e8b\u4e86\n\n\u70b9\u5206\u6811\u5148\u9884\u5904\u7406\u4f1a\u5feb\u5f88\u591a\n\n\u4ee5\u4e0a\u5c31\u662f\u672c\u9898\u5173\u952e\u601d\u8def\uff0c\u5177\u4f53\u5b9e\u73b0\u8bf7\u770b\u4ee3\u7801\uff08\u4ee3\u7801\u91cc\u6709\u4e00\u4e9b\u7ec6\u8282\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<vector>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ninline int read()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') { if(ch=='-') f=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') { x=(x<<1)+(x<<3)+(ch^48); ch=getchar(); }\n\treturn x*f;\n}\nconst int N=2e5+7,inf=1e9+7;\nconst db INF=1e18+7;\nconst double eps=1e-5;\nint fir[N],from[N<<1],to[N<<1],val[N<<1],cntt;\ninline void add(int a,int b,int c) { from[++cntt]=fir[a]; fir[a]=cntt; to[cntt]=b; val[cntt]=c; }\nint n,L,R;\nint RT,rt,sz[N],mx[N],tot;\nbool vis[N];\nvoid find_rt(int x,int fa)//\u627e\u91cd\u5fc3\n{\n\tsz[x]=mx[x]=1;\n\tfor(int i=fir[x];i;i=from[i])\n\t{\n\t\tint &v=to[i]; if(v==fa||vis[v]) continue;\n\t\tfind_rt(v,x); sz[x]+=sz[v]; mx[x]=max(mx[x],sz[v]);\n\t}\n\tmx[x]=max(mx[x],tot-sz[x]);\n\tif(mx[x]<mx[rt]) rt=x;\n}\nvector <int> V[N];//\u5b58\u70b9\u5206\u6811\nvoid build(int x)//\u9884\u5904\u7406\u70b9\u5206\u6811\n{\n\tvis[x]=1;\n\tfor(int i=fir[x];i;i=from[i])\n\t{\n\t\tint &v=to[i]; if(vis[v]) continue;\n\t\trt=0; tot=sz[v]; find_rt(v,x);\n\t\tV[x].push_back(rt); build(rt);\n\t}\n\tvis[x]=0;\n}\ndb tmp[N],mid,T[N];\nint tp,Tp,Q[N];\nbool flag;\nvoid dfs(int x,int fa,int dep,db dis)//\u679a\u4e3e\u5b50\u6811\u8def\u5f84\n{\n\ttp=max(tp,dep); tmp[dep]=max(tmp[dep],dis);//\u53d6max\n\tfor(int i=fir[x];i;i=from[i])\n\t{\n\t\tint &v=to[i]; if(v==fa||vis[v]) continue;\n\t\tdfs(v,x,dep+1,dis+val[i]-mid);//\u8fb9\u6743\u51cfmid\n\t}\n}\nvoid work(int x)//\u6c42\u4ee5x\u4e3a\u6700\u6d45\u70b9\u7684\u6700\u957f\u94fe\n{\n\tfor(int i=fir[x];i;i=from[i])\n\t{\n\t\tint &v=to[i]; if(vis[v]) continue;//\u679a\u4e3e\u513f\u5b50\n\t\tdfs(v,x,1,val[i]-mid); int l=1,r=0;\n\t\tfor(int ld=Tp,rd=1;rd<=tp;rd++)//\u6ed1\u52a8\u7a97\u53e3\n\t\t{\n\t\t\twhile(l<=r && Q[l]>R-rd ) l++;\n\t\t\twhile(ld>=L-rd&&ld>=0)\n\t\t\t{\n\t\t\t\twhile(l<=r && T[Q[r]]<=T[ld]) r--;\n\t\t\t\tQ[++r]=ld; ld--;\n\t\t\t}\n\t\t\tif(l<=r && T[Q[l]]+tmp[rd]>0) { flag=1; break; }//\u4e0d\u8981\u76f4\u63a5\u8fd4\u56de\uff0c\u5148\u628a\u6570\u7ec4\u6e05\u7a7a\n\t\t}\n\t\tfor(int j=1;j<=tp;j++) T[j]=max(T[j],tmp[j]); Tp=max(Tp,tp);\n\t\tfor(int j=1;j<=tp;j++) tmp[j]=-INF; tp=0;//\u6ce8\u610f\u521d\u59cb\u4e3a-INF\n\t\tif(flag) break;//\u8bb0\u5f97\u5148\u6e05\u7a7a\u518dbreak\n\t}\n\tfor(int i=1;i<=Tp;i++) T[i]=-INF; Tp=0;\n}\nvoid solve(int x)//\u904d\u5386\u70b9\u5206\u6811\u6c42\u6700\u957f\u94fe\n{\n\tvis[x]=1; work(x); if(flag) { vis[x]=0; return; } int len=V[x].size();\n\tfor(int i=0;i<len;i++) { solve(V[x][i]); if(flag) break; }\n\tvis[x]=0;\n}\nbool check()\n{\n\tflag=0; solve(RT);\n\treturn flag;\n}\nint main()\n{\n\tmx[0]=inf; n=read(),L=read(),R=read();\n\tfor(int i=1;i<=n;i++) T[i]=tmp[i]=-INF;//\u8bb0\u5f97\u521d\u59cb\u5316\n\tint a,b,c; db l=INF,r=0,ans=2333;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\ta=read(),b=read(),c=read();\n\t\tl=min(l,1.0*c),r=max(r,1.0*c);\n\t\tadd(a,b,c); add(b,a,c);\n\t}\n\ttot=n; find_rt(1,0); RT=rt; build(rt);\n\twhile(l<=r-eps)\n\t{\n\t\tmid=(l+r)/2;\n\t\tif(check()) l=mid,ans=mid;\n\t\telse r=mid;\n\t}\n\tprintf(\"%.3lf\\n\",ans);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1566433464,
        "uid": 34274,
        "name": "javalyc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "~~\u53ea\u6709\u6211\u53d1\u73b0\u8fd9\u9898\u548c150E\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u7136\u540e\u6284\u4e86\u4e2a\u677f\u5b50\u6539\u6539\u6539\u5c31\u8fc7\u4e86\u5417\u3002~~\n\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u5224\u5b9a\u95ee\u9898\u3002\n\n\u5e73\u5747\u503c $\\ge mid$\u3002\n\n\u90a3\u4e48\u5c31\u662f\u5b58\u5728 $\\sum_{l \\leq |path| \\leq r} x \\in path \\geq mid \\times |path|$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u628a\u6bcf\u6761\u8def\u5f84\u7684\u6743\u503c\u51cf\u6389 $mid$\uff0c\u7136\u540e\u95ee\u9898\u7b49\u4ef7\u4e8e\u627e\u4e00\u6761\u5927\u4e8e 0 \u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u957f\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u3002\n\n\u4e8e\u662f\u5c31\u548c 150E \u4e00\u6a21\u4e00\u6837\u4e86\uff0c\u5c31\u662f\u628a \u4e2d\u4f4d\u6570 \u6539\u6210 \u5e73\u5747\u503c\uff0cint \u6539\u6210 double\uff08\uff08",
        "postTime": 1606714094,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "\u5148\u4e8c\u5206\u7b54\u6848 $mid$\uff0c\u4f7f\u5f97 $\\frac{val}{tot} \\geqslant mid $\uff0c\u79fb\u9879\u5f97:\n$$\n\\large val - tot \\times mid \\geqslant 0\n$$\n\u5224\u5b9a\u5bf9\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u51cf\u53bb $mid$ \u540e\uff0c\u662f\u5426\u5b58\u5728\u4e00\u6761\u8fb9\u6743\u548c\u5927\u4e8e\u96f6\u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\u8003\u8651\u6811\u5f62 $DP$\uff0c\u8bbe $f_{x,i}$ \u4e3a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u4ece $x$ \u5411\u4e0b\u5ef6\u4f38 $i$ \u6761\u8fb9\u6240\u5f62\u6210\u7684\u8def\u5f84\u8fb9\u6743\u548c\u7684\u6700\u5927\u503c\uff0c\u76f4\u63a5 $DP$ \u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002\n\n\u53d1\u73b0\u72b6\u6001\u662f\u548c\u6df1\u5ea6\u6709\u5173\uff0c\u6240\u4ee5\u8003\u8651\u7528\u957f\u94fe\u5256\u5206\u6765\u4f18\u5316\uff0c\u6bcf\u6b21\u8f6c\u79fb\u65f6\uff0c\u5148\u4ece\u91cd\u513f\u5b50\u7ee7\u627f\u8fc7\u6765\uff0c\u7136\u540e\u518d\u5c06\u8f7b\u513f\u5b50\u5408\u5e76\uff0c\u5408\u5e76\u8f7b\u513f\u5b50\u65f6\u626b\u4e00\u904d\u8f7b\u513f\u5b50\u6240\u5728\u7684\u94fe\u5373\u53ef\u3002\u56e0\u4e3a\u6bcf\u4e2a\u8f7b\u513f\u5b50\u90fd\u662f\u5176\u6240\u5728\u94fe\u7684\u9876\u7aef\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4f1a\u88ab\u626b\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u5c31\u6709\u4fdd\u8bc1\u4e86\u3002\n\n\u56e0\u4e3a\u6709\u8fb9\u6570\u7684\u9650\u5236\uff0c\u6240\u4ee5\u5408\u5e76\u65f6\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u957f\u94fe\u5256\u5206\u540e\u8fdb\u884c $dfs$\uff0c\u4f18\u5148\u904d\u5386\u91cd\u513f\u5b50\uff0c\u6c42\u51fa $dfs$ \u5e8f\u3002\u5bf9\u4e8e $DP$ \u72b6\u6001 $f_{x,i}$\uff0c\u5c06\u5176\u7528 $dfn_x + i$ \u5728\u7ebf\u6bb5\u6811\u4e0a\u8868\u793a\uff0c\u8fd9\u6837\u6bcf\u4e2a\u72b6\u6001\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8868\u793a\uff0c\u8f6c\u79fb\u65f6\u4e5f\u4fbf\u4e8e\u5408\u5e76\uff0c\u94fe\u4e0a\u7684\u4fe1\u606f\u4e3a\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u91cd\u513f\u5b50\u80fd\u76f4\u63a5\u8f6c\u79fb\u5230\u5f53\u524d\u8282\u70b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\n#define maxm 800010\n#define inf 2000000000000000\n#define ls (cur<<1)\n#define rs (cur<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,L,R,cnt,root=1;\ndouble now,ans,l,r;\nint d[maxn],dep[maxn],len[maxn],son[maxn],dfn[maxn];\ndouble val[maxn],dis[maxn],t[maxn],mx[maxm];\nstruct edge\n{\n    int to,nxt;\n    double v;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to,double val)\n{\n    e[++edge_cnt]=(edge){to,head[from],val};\n    head[from]=edge_cnt,r=max(r,val);\n}\nvoid modify(int l,int r,int pos,double v,int cur)\n{\n    if(l==r)\n    {\n        mx[cur]=max(mx[cur],v);\n        return;\n    }\n    if(pos<=mid) modify(l,mid,pos,v,ls);\n    else modify(mid+1,r,pos,v,rs);\n    mx[cur]=max(mx[ls],mx[rs]);\n}\ndouble query(int L,int R,int l,int r,int cur)\n{\n    if(L>R) return -inf;\n    if(L<=l&&R>=r) return mx[cur];\n    double v=-inf;\n    if(L<=mid) v=max(v,query(L,R,l,mid,ls));\n    if(R>mid) v=max(v,query(L,R,mid+1,r,rs));\n    return v;\n}\nvoid clear(int l,int r,int cur)\n{\n    mx[cur]=-inf;\n    if(l==r) return;\n    clear(l,mid,ls),clear(mid+1,r,rs);\n}\nvoid dfs_son(int x,int fa)\n{\n    d[x]=dep[x]=d[fa]+1;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(y==fa) continue;\n        dfs_son(y,x),dep[x]=max(dep[x],dep[y]);\n        if(dep[y]>dep[son[x]]) son[x]=y,val[son[x]]=e[i].v;\n    }\n    len[x]=dep[x]-d[x];\n}\nvoid dfs_dfn(int x)\n{\n    dfn[x]=++cnt;\n    if(son[x]) dfs_dfn(son[x]);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(dfn[y]) continue;\n        dfs_dfn(y);\n    }\n}\nvoid dp(int x,int fa)\n{\n    modify(1,n,dfn[x],dis[x],root);\n    if(son[x]) dis[son[x]]=dis[x]+val[son[x]]-now,dp(son[x],x);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(y==fa||y==son[x]) continue;\n        dis[y]=dis[x]+e[i].v-now,dp(y,x);\n        for(int j=1;j<=len[y]+1;++j) t[j]=query(dfn[y]+j-1,dfn[y]+j-1,1,n,root);\n        for(int j=1;j<=min(len[y]+1,R);++j)\n            ans=max(ans,t[j]+query(dfn[x]+L-j,min(dfn[x]+R-j,dfn[x]+len[x]),1,n,root)-2*dis[x]);\n        for(int j=1;j<=len[y]+1;++j) modify(1,n,dfn[x]+j,t[j],root);\n    }\n    ans=max(ans,query(dfn[x]+L,min(dfn[x]+R,dfn[x]+len[x]),1,n,root)-dis[x]);\n}\nbool check(double m)\n{\n    now=m,ans=-inf,clear(1,n,root),dp(1,0);\n    return ans>=0;\n}\nint main()\n{\n    read(n),read(L),read(R);\n    for(int i=1;i<n;++i)\n    {\n        int x,y,v;\n        read(x),read(y),read(v);\n        add(x,y,v),add(y,x,v);\n    }\n    dfs_son(1,0),dfs_dfn(1);\n    for(int i=1;i<=35;++i)\n    {\n        double m=(l+r)/2;\n        if(check(m)) l=m;\n        else r=m;\n    }\n    printf(\"%.3lf\",l);\n    return 0;\n}\n```",
        "postTime": 1597239550,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "### Solution\n\n------------\n\u6572\u4e2a\u4e8c\u5206\u5c31\u53d8\u6210\u4e86\u6c42\u4e00\u6761\u957f\u5ea6\u5728$[L,R]$\u5185\u8def\u5f84\u7684\u6743\u503c\u548c\u6700\u5927\uff0c\u7136\u540e\u6211\u5c31\u4e0d\u4f1a\u505a\u4e86\n\n\u9996\u5148\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u663e\u7136\u70b9\u5206\u6cbb\u662f\u53ef\u5199\u7684\n\n\u7136\u9e45\u6211\u5e76\u4e0d\u662f\u5f88\u60f3\u5199\u70b9\u5206\u6cbb\u56e0\u6b64\u8fd9\u91cc\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\n\n\u5148\u5bf9\u6811\u957f\u94fe\u5256\u5206\uff0c\u6211\u4eec\u50cf\u505a$dsu$ $on$ $tree$\u4e00\u6837\u5148\u505a\u957f\u94fe\uff0c\u7528\u7ebf\u6bb5\u6811\u7ee7\u627f\u957f\u94fe\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u7136\u540e\u505a\u5176\u4ed6\u513f\u5b50\n\n\u67e5\u8be2\u7684\u65f6\u5019\u679a\u4e3e\u4e00\u4e0b\u8def\u5f84\u7684\u957f\u5ea6$len$\uff0c\u5de6\u534a\u8fb9\u76f4\u63a5\u627e\u957f\u5ea6\u4e3a$len$\u7684\u6700\u5927\u6743\u503c\uff0c\u53f3\u534a\u8fb9\u7ebf\u6bb5\u6811\u67e5\u8be2\u957f\u5ea6\u4e3a$[L-len,R-len]$\u7684\u533a\u95f4\u5373\u53ef\n\n\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u5730\u65b9\u5728\u4e8e\u540c\u4e00\u4e2a\u957f\u5ea6\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6700\u5927\u6743\u503c\uff0c\u8fd9\u4e5f\u662f\u957f\u94fe\u5256\u5206\u5728\u8fd9\u7c7b\u95ee\u9898\u4e2d\u4f18\u4e8e\u91cd\u94fe\u5256\u5206\u7684\u539f\u56e0\n\n### Code\n\n--------------------- \n```cpp\n#include<cstdio>\n#include<algorithm>\n#define rep(i,st,ed) for (int i=st;i<=ed;++i)\nusing std::max;\nusing std::min;\ntypedef double db;\nconst db INF=1e15;\nconst int N=400005;\nconst int E=600005;\nstruct edge\n{\n\tint y,w,next;db v;\n}e[E];\nint dep[N],mx[N],son[N],pos[N],num[N];\nint ls[N],edCnt,tot,L,R,n;\ndb rec[N<<2],dis[N],tmp[N],ans;\nint read()\n{\n    int x=0,v=1;\n\tchar ch=getchar();\n    for (;ch<'0'||ch>'9';v=(ch=='-')?(-1):(v),ch=getchar());\n    for (;ch<='9'&&ch>='0';x=x*10+ch-'0',ch=getchar());\n    return x*v;\n}\nvoid add_edge(int x,int y,int w)\n{\n    e[++edCnt]=(edge)\n\t{\n\t\ty,w,ls[x],0\n\t};\n\tls[x]=edCnt;\n    e[++edCnt]=(edge)\n\t{\n\t\tx,w,ls[y],0\n\t};\n\tls[y]=edCnt;\n}\nvoid dfs1(int now,int fa)\n{\n    mx[now]=dep[now]=dep[fa]+1;\n    for (int i=ls[now];i;i=e[i].next)\n\t{\n        if (e[i].y==fa) continue;\n        dfs1(e[i].y,now);\n        mx[now]=max(mx[now],mx[e[i].y]);\n        if (mx[son[now]]<mx[e[i].y]) son[now]=e[i].y;\n    }\n}\nvoid dfs2(int now,int fa)\n{\n    pos[now]=++pos[0];\n    if (son[now]) dfs2(son[now],now);\n    for (int i=ls[now];i;i=e[i].next)\n\t{\n        if (e[i].y==fa||e[i].y==son[now]) continue;\n        dfs2(e[i].y,now);\n    }\n}\nvoid modify(int now,int tl,int tr,int x,db v)\n{\n    rec[now]=std::max(rec[now],v);\n    if (tl==tr) return ;\n    int mid=(tl+tr)>>1;\n    if (x<=mid) modify(now<<1,tl,mid,x,v);\n    else modify(now<<1|1,mid+1,tr,x,v);\n}\ndb query(int now,int tl,int tr,int l,int r)\n{\n    if (r<l) return -INF;\n    if (tl==l&&tr==r) return rec[now];\n    int mid=(tl+tr)>>1;\n    if (r<=mid) return query(now<<1,tl,mid,l,r);\n    if (l>mid) return query(now<<1|1,mid+1,tr,l,r);\n    db qx=query(now<<1,tl,mid,l,mid);\n    db qy=query(now<<1|1,mid+1,tr,mid+1,r);\n    return max(qx,qy);\n}\nvoid build_tree(int now,int tl,int tr)\n{\n    rec[now]=-INF;\n    if (tl==tr)\n\t{\n        num[tl]=now;\n        return ;\n    }\n    int mid=(tl+tr)>>1;\n    build_tree(now<<1,tl,mid);\n    build_tree(now<<1|1,mid+1,tr);\n}\nvoid solve(int now,int fa)\n{\n    modify(1,1,n,pos[now],dis[now]);\n    for (int i=ls[now];i;i=e[i].next)\n\t{\n        if (e[i].y==son[now])\n\t\t{\n            dis[e[i].y]=dis[now]+e[i].v;\n            solve(e[i].y,now);\n        }\n    }\n    for (int i=ls[now];i;i=e[i].next)\n\t{\n        if (e[i].y==fa||e[i].y==son[now]) continue;\n        dis[e[i].y]=dis[now]+e[i].v;\n        solve(e[i].y,now);\n        rep(j,1,mx[e[i].y]-dep[now])\n\t\t{\n            tmp[j]=rec[num[pos[e[i].y]+j-1]];\n            if (j<=R)\n\t\t\t{\n                db tttt=query(1,1,n,max(pos[now]+L-j,1),min(pos[now]+R-j,pos[now]+mx[now]-dep[now]));\n                ans=max(ans,tttt+tmp[j]-dis[now]*2);\n            }\n        }\n        rep(j,1,mx[e[i].y]-dep[now]) modify(1,1,n,pos[now]+j,tmp[j]);\n    }\n    ans=max(ans,query(1,1,n,pos[now]+L,min(pos[now]+R,pos[now]+mx[now]-dep[now]))-dis[now]);\n}\nint main(void)\n{\n    n=read(),L=read(),R=read();\n    rep(i,2,n)\n\t{\n        int x=read(),y=read(),w=read();\n        add_edge(x,y,w);\n    }\n    dfs1(1,0);dfs2(1,0);\n    db prt,l,r;rec[0]=-INF;\n    for (l=0,r=1000000;r-l>1e-5;)\n\t{\n        db mid=(l+r)*0.5;\n        rep(i,1,edCnt) e[i].v=-mid+e[i].w;\n        ans=-INF; build_tree(1,1,n);\n        solve(1,0);\n        if (ans<=0) r=mid;\n        else l=mid;\n    }\n    printf(\"%.3lf\\n\",(l+r)*0.5);\n    return 0;\n}\n```",
        "postTime": 1544452179,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u957f\u94fe\u5256\u5206\n\u5206\u6570\u89c4\u5212\u548c\u957f\u94fe\u5256\u5206\u5927\u4f53\u601d\u8def\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86  \n\u5948\u4f55\u6211\u592a\u849f\u4e86\u88ab\u6709\u4e2a\u95ee\u9898\u5361\u4e86\u6211\u5f88\u4e45  \n\u5c31\u662f\u600e\u4e48\u5206\u914d\u6bcf\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4  \n  \n\u5f53\u6211\u4eec\u6b63\u5728\u5904\u7406 **x** \u70b9\u65f6  \n\u5148\u9012\u5f52\u5904\u7406\u5b8c\u5b83\u7684\u91cd\u513f\u5b50\u4e5f\u5c31\u662f **y**   \n\u7136\u540e\u76f4\u63a5\u8ba9 **x** \u7ee7\u627f **y** \u7684\u6570\u636e\n![](https://i.loli.net/2020/10/21/uVt8KivsoMgTjL6.png)\n\u82e5 **y** \u5bf9\u5e94\u7684\u6570\u7ec4\u957f\u8fd9\u6837\u5b50\n![](https://i.loli.net/2020/10/21/4f1OxXLypNkMJzV.png)\n\u6211\u4eec\u53d1\u73b0\u5728 **y** \u8fd9\u68f5\u6811\u4e2d  \n **x** \u4e3a\u8ddd\u79bb **1** \u7684\u70b9\u5c31\u662f **y** \u8ddd\u79bb **0** \u7684\u70b9  \n **x** \u4e3a\u8ddd\u79bb **2** \u7684\u70b9\u5c31\u662f **y** \u8ddd\u79bb **1** \u7684\u70b9...  \n![](https://i.loli.net/2020/10/21/27oTJvdp8SiFR5B.png)\n\u6240\u4ee5\u8fd9\u4e2a\u663e\u7136\u5c31\u662f  \n\u6211\u4eec\u5148\u904d\u5386\u91cd\u513f\u5b50\u6240\u5f62\u6210\u7684 **dfs** \u5e8f  \n\u5176\u4e2d\u6bcf\u4e00\u6761\u957f\u94fe\u90fd\u5bf9\u5e94\u7684\u4e00\u6bb5\u533a\u95f4  \n\n\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u662f\u5bf9 **dfs** \u5e8f\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811  \nx\u5b50\u6811\u4e2d \u8ddd\u79bb\u4e3an\u7684\u70b9\u7684\u6700\u5927\u6743\u503c  \n\u5bf9\u5e94\u7684\u662f\u7ebf\u6bb5\u6811\u4e2d\u7b2c **dfn[x]+n** \u4e2a\u5143\u7d20\n\n\u6211\u4e5f\u641e\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u6211\u5728\u8fd9\u79cd\u663e*zhi*\u7136*zhang*\u7684\u5730\u65b9\u5361\u8fd9\u4e48\u4e45 \n\u6700\u5916\u5c42\u7684\u4e8c\u5206\u4e00\u4e2a*log* \u7ebf\u6bb5\u6811\u4e00\u4e2a*log*  \n$O(nlog^2n)$  \n\u6700\u540e\u4ee3\u7801 \n```cpp\n#include <bits/stdc++.h>\n#define N 100100\n#define M 200100\n#define lson rt<<1,l,mid\n#define rson rt<<1|1,mid+1,r\n#define mid ((l+r)>>1)\nusing namespace std;\ntypedef long long ll;\nconst double inf=-5e11*1.0;\nint n,minn,maxx;\nint f[N],nxt[M],data[M],num;\nint dfn[N],mdep[N],dep[N],son[N],fa[N],len[N],root,ti;\ndouble rr,mm,lst[N],far[M],dis[N];\nint posi[N];\nbool ans;\nstruct _tr{\n\tdouble t[N<<3];\n\tinline void push_up(int rt){\n\t\tt[rt]=max(t[rt<<1],t[rt<<1|1]);\n\t}\n\tinline void updata(int pos,double c,int rt=1,int l=1,int r=n){\n\t\tif(l==r){ t[rt]=max(c,t[rt]); return; }\n\t\tif(pos<=mid){ updata(pos,c,lson); }\n\t\telse{ updata(pos,c,rson); }\n\t\tpush_up(rt);\n\t}\n\tinline double query(int L,int R,int rt=1,int l=1,int r=n){\n\t\tif(L<=l&&r<=R)return t[rt];\n\t\tdouble res=inf;\n\t\tif(L<=mid)res=max(res,query(L,R,lson));\n\t\tif(R>mid)res=max(res,query(L,R,rson));\n\t\treturn res;\n\t}\n\tinline void build(int rt=1,int l=1,int r=n){\n\t\tt[rt]=inf;\n\t\tif(l==r){ posi[l]=rt; return; }\n\t\tbuild(lson); build(rson);\n\t}\n}q;\nvoid inline add(int x,int y,int z){\n\tnxt[++num]=f[x]; f[x]=num; data[num]=y; far[num]=z;\n}\ninline void dfs(int x){\n\tint y;\n\tfor(int i=f[x];i;i=nxt[i]){\n\t\ty=data[i]; if(y==fa[x])continue;\n\t\tlst[y]=far[i];\n\t\tfa[y]=x; dep[y]=mdep[y]=dep[x]+1; dfs(y);\n\t\tif(mdep[x]<mdep[y]){\n\t\t\tson[x]=y; mdep[x]=mdep[y];\n\t\t}\n\t} \n\tlen[x]=mdep[x]-dep[x];\n}\ninline void dfs2(int x){\n\tdfn[x]=++ti;\n\tif(son[x]){ dfs2(son[x]); }\n\tint y;\n\tfor(int i=f[x];i;i=nxt[i]){\n\t\ty=data[i]; if(y==fa[x]||y==son[x])continue;\n\t\tdfs2(y);\n\t}\n}\ninline void solve(int x){\n\tint y=son[x],o=dfn[x],ql,qr,oo;\n\tdouble z;\n\tq.updata(o,dis[x]);\n\tif(y){\n\t\tdis[y]=dis[x]+lst[y]-mm;\n\t\tsolve(y); if(ans==1)return;\n\t}\n\tfor(int i=f[x];i;i=nxt[i]){\n\t\ty=data[i]; if(y==fa[x]||y==son[x])continue;\n\t\tdis[y]=dis[x]+lst[y]-mm; solve(y); if(ans==1)return;\n\t\too=dfn[y];\n\t\tfor(int j=0;j<=min(maxx,len[y]);j++){\n\t\t\tql=max(minn-1-j,0),qr=min(maxx-1-j,len[x]);\n\t\t\tif(ql>qr)continue;\n\t\t\tz=q.t[posi[oo+j]]-dis[x];\n\t\t\tif(q.query(o+ql,o+qr)-dis[x]+z>=0){\n\t\t\t\tans=1; return; \n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<=min(len[y],maxx);j++){\n\t\t\tql=1+j;\n\t\t\tif(q.t[posi[oo+j]]>q.t[posi[o+ql]]){ q.updata(o+ql,q.t[posi[oo+j]]); }\n\t\t}\n\t}\n\tif(len[x]>=minn){\n\t\tif(q.query(o+minn,o+min(len[x],maxx))>=dis[x]){\n\t\t\tans=1; return;\n\t\t}\n\t}\n}\n\nvoid get_ans(){\n\tdouble l=0,r=rr;\n\twhile(r-l>0.0002){\n\t\tmm=(l+r)/2.0000;\n\t\tans=0; dis[root]=0; q.build();\n\t\tsolve(root);\n\t\tif(ans){ l=mm; }\n\t\telse{ r=mm; }\n\t} \n\tprintf(\"%.3lf\",l);\n}\nint main(){\n//\tfreopen(\"test.in\",\"r\",stdin);\n\tscanf(\"%d %d %d\",&n,&minn,&maxx);\n\tint u,v,z;\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d %d %d\",&u,&v,&z);\n\t\tadd(u,v,z); add(v,u,z); \n\t\trr=max((double)z,rr);\n\t}\n\troot=rand()%n+1;\n\tdfs(root); \n\tdfs2(root); \n\tget_ans();\n\treturn 0;\n} \n```\n\n\n\n\n\n\n\n",
        "postTime": 1603275785,
        "uid": 48110,
        "name": "\u7f19\u4e91\u5c71\u8f66\u795e",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "## \u8fd9\u4e2a\u9898\u53ef\u4ee5\u4f7f\u7528 $\\log^3$ \u7b97\u6cd5\u901a\u8fc7\n\n\u663e\u7136\u662f\u4e00\u4e2a\u5206\u6570\u89c4\u5212\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u76f4\u63a5\u4e8c\u5206\u7b54\u6848 $m$\uff0c\u73b0\u5728\u6b32\u6c42\u6240\u6709\u957f\u5ea6\u5728 $l$ \u5230 $r$ \u4e4b\u95f4\u7684\u8def\u5f84\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u70b9\u5bf9\u95ee\u9898\u8003\u8651\u70b9\u5206\u6cbb\uff0c\u8003\u8651\u628a\u5b50\u6811\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u66b4\u529b\u533a\u95f4\u67e5\u8be2\u5373\u4e3a $n\\log^3n$ \u3002\n\n\u56e0\u4e3a\u5e38\u6570\u8fc7\u5927\uff0c\u4e0d\u9884\u5148\u5efa\u51fa\u70b9\u5206\u6811\u53ef\u80fd\u4f1a $\\text T$ \u5230\u7206\u70b8\u2026\u2026\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <utility>\n#define N 100020\n#define EPS 1e-4\nusing namespace std;\n\nextern vector<pair<int, double> > e[N];\nextern bool u[N];\n\nnamespace G\n{\n    int f[N], g[N];\n    vector<int> v;\n\n    void DFS(int x, int p)\n    {\n        int i;\n\n        v.push_back(x);\n        for(i = g[x] = 0, f[x] = 1; i < (signed)e[x].size(); i ++)\n            if(!u[e[x].at(i).first] && e[x].at(i).first != p)\n            {\n                DFS(e[x].at(i).first, x);\n                f[x] += f[e[x].at(i).first];\n                g[x] = max(g[x], f[e[x].at(i).first]);\n            }\n\n        return;\n    }\n\n    int G(int x)\n    {\n        int i, o;\n\n        v.clear();\n        DFS(x, x);\n        for(i = o = 0; i < (signed)v.size(); i ++)\n            if(max(g[v.at(i)], (signed)v.size() - f[v.at(i)]) < max(g[v.at(o)], (signed)v.size() - f[v.at(o)]))\n                o = i;\n\n        return v.at(o);\n    }\n}\n\nvector<pair<int, double> > e[N];\nbool u[N];\ndouble f[N << 1];\nvector<vector<pair<double, int> > > g[N];\nint d[N];\n\nvoid CheckSegwin(int p, double v, int n, bool k)\n{\n    if(k || f[p + n] < v)\n        for(f[p += n] = v; p >>= 1; )\n            f[p] = max(f[p << 1], f[p << 1 | 1]);\n\n    return;\n}\n\ndouble MaxSegwin(int l, int r, int n)\n{\n    double o;\n\n    l = max(l,     0);\n    r = min(r, n - 1);\n    if(l > r)\n        return -1e12;\n    for(o = -1e12, l += n, r += n + 1; l < r; l >>= 1, r >>= 1)\n    {\n        if(l & 1)\n            o = max(o, f[l ++]);\n        if(r & 1)\n            o = max(o, f[-- r]);\n    }\n\n    return o;\n}\n\nvoid DFS(vector<pair<double, int> > &g, int x, int p, int d, double w)\n{\n    int i;\n\n    g.push_back(make_pair(w, d));\n    for(i = 0; i < (signed)e[x].size(); i ++)\n        if(!u[e[x].at(i).first] && e[x].at(i).first != p)\n            DFS(g, e[x].at(i).first, x, d + 1, w + e[x].at(i).second);\n\n    return;\n}\n\nvoid CDQ(int x)\n{\n    int i, j;\n\n    x = G::G(x);\n    u[x] = true;\n    for(i = 0; i < (signed)e[x].size(); i ++)\n        if(!u[e[x].at(i).first])\n        {\n            g[x].push_back(vector<pair<double, int> >());\n            DFS(g[x].back(), e[x].at(i).first, x, 1, e[x].at(i).second);\n            for(j = 0; j < (signed)g[x].back().size(); j ++)\n                d[x] = max(d[x], g[x].back().at(j).second);\n        }\n    d[x] ++;\n\n    for(i = 0; i < (signed)e[x].size(); i ++)\n        if(!u[e[x].at(i).first])\n            CDQ(e[x].at(i).first);\n\n    return;\n}\n\nbool Check(int n, int p, int q, double m)\n{\n    int x, i, j;\n\n    for(x = 0; x < n; x ++)\n    {\n        for(i = 0; i < (signed)g[x].size(); i ++)\n        {\n            for(j = 0; j < (signed)g[x].at(i).size(); j ++)\n                if(g[x].at(i).at(j).first - m * g[x].at(i).at(j).second + MaxSegwin(p - g[x].at(i).at(j).second, q - g[x].at(i).at(j).second, d[x]) > 0)\n                    return true;\n            for(j = 0; j < (signed)g[x].at(i).size(); j ++)\n                CheckSegwin(g[x].at(i).at(j).second, g[x].at(i).at(j).first - m * g[x].at(i).at(j).second, d[x], false);\n        }\n        if(MaxSegwin(p, q, d[x]) > 0)\n            return true;\n\n        for(i = 0; i < d[x]; i ++)\n            CheckSegwin(i, -1e12, d[x], true);\n    }\n\n    return false;\n}\n\nint main(void)\n{\n    int n, p, q, u, v, w;\n    int i;\n    double l, m, r;\n\n    scanf(\"%d %d %d\", &n, &p, &q);\n    for(i = 1, r = 0; i < n; i ++)\n    {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        e[-- u].push_back(make_pair(-- v, w));\n        e[   v].push_back(make_pair(   u, w));\n        r += w;\n    }\n    CDQ(0);\n\n    for(l = 0; r - l > EPS; )\n    {\n        for(i = 0; i < (n << 1); i ++)\n            f[i] = -1e12;\n        if(Check(n, p, q, m = (l + r) / 2))\n            l = m;\n        else\n            r = m;\n    }\n    printf(\"%.3f\\n\", r);\n\n    return 0;\n}\n\n```",
        "postTime": 1571922302,
        "uid": 34354,
        "name": "gorokokoro",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011"
    },
    {
        "content": "# \u9898\u610f\n[\u81ea\u5df1\u770b.](https://www.luogu.org/problemnew/show/P4292)\n# \u5206\u6790\n\u6c42\u8fd9\u4e2a\u5e73\u5747\u503c\u7684\u6700\u5927\u503c\u5c31\u662f\u5206\u6570\u89c4\u5212,\u4e8c\u5206\u4e00\u4e0b\u5c31\u53d8\u6210\u4e86\u6c42\u4e00\u6761\u957f\u5ea6\u5728[L,R]\u5185\u8def\u5f84\u7684\u6743\u503c\u548c\u6700\u5927.\u6709\u6dc0\u7c89\u8d28\u7684\u505a\u6cd5\u4f46\u662f\u6211\u6ca1\u5199,\u611f\u89c9\u5e38\u6570\u4f1a\u5f88\u5927.\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u957f\u94fe\u5256\u5206\u505a.\n\n\u5148\u5bf9\u6811\u957f\u94fe\u5256\u5206. \u6211\u4eec\u50cf\u505adsu on tree(\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76)\u4e00\u6837\u5148\u505a\u91cd\u513f\u5b50\uff0c\u7528\u7ebf\u6bb5\u6811\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u7136\u540e\u505a\u5176\u4ed6\u8f7b\u513f\u5b50\n\n\u67e5\u8be2\u7684\u65f6\u5019\u679a\u4e3e\u4e00\u4e0b\u8def\u5f84\u7684\u957f\u5ea6len\uff0c\u4e00\u8fb9\u5355\u70b9$O(1)$\u67e5\u8be2\u957f\u5ea6\u4e3alen\u7684\u6700\u5927\u6743\u503c\uff0c\u4e00\u8fb9\u7ebf\u6bb5\u6811$O(logn)$\u67e5\u8be2\u957f\u5ea6\u4e3a[L-len,R-len]\u7684\u533a\u95f4\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4e0d\u4f1a\u8bc1(\u540e\u9762\u6709)...\u53cd\u6b63\u679a\u4e3e**\u8f7b\u513f\u5b50\u7684\u6df1\u5ea6**\u662f\u603b\u5171$O(n)$\u7684.\u6240\u4ee5\u52a0\u4e0a\u5916\u9762\u7684\u4e8c\u5206,\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlog^2n)$.\n\n$Upd:$ \u679a\u4e3e\u8f7b\u513f\u5b50\u7684\u6df1\u5ea6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\u5982\u4e0b\n> \u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\u3002\n\u5206\u6790\u5982\u4e0b\uff1a\n\u6bcf\u4e2a\u70b9x\u53ea\u4f1a\u66b4\u529b\u7edf\u8ba1\u5176\u6240\u6709\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u800c\u6bcf\u4e2a\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5927\u5c0f\u4e3a\u8be5\u8f7b\u513f\u5b50\u6240\u5728\u957f\u94fe\u957f\u5ea6\u3002\n\u800c\u5f53\u9012\u5f52\u5230x\u7684\u7236\u8282\u70b9fa(x)\u65f6\uff0c\u82e5x\u4e0d\u662ffa(x)\u7684\u91cd\u513f\u5b50\uff0c\u5219fa(x)\u4f1a\u66b4\u529b\u7edf\u8ba1\u5927\u5c0f\u4e3ax\u957f\u94fe\u957f\u5ea6\u7684\u4fe1\u606f\u3002\n\u6545\uff0c\u6bcf\u4e2a\u957f\u94fe\u53ea\u4f1a\u5bf9\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u505a\u4e00\u6b21\u5927\u5c0f\u4e3a\u5176\u957f\u5ea6\u7684\u8d21\u732e\u3002\n\n\u8d85\u5f3a\u7684\u957f\u94fe\u5256\u5206a!!! \u8bc1\u660e\u6458\u81ea\u4e0b\u9762\u7684\u535a\u5ba2.\n\n\u5b66\u4e60\u957f\u94fe\u5256\u5206\u7684\u770b\u8fd9\u91cc...[\u535a\u5ba2\u4f20\u9001\u95e8](https://blog.bill.moe/long-chain-subdivision-notes/)\n\n# CODE\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar cb[1<<15],*cs=cb,*ct=cb;\n#define getc() (cs==ct&&(ct=(cs=cb)+fread(cb,1,1<<15,stdin),cs==ct)?0:*cs++)\ntemplate<class T>inline void read(T &res) {\n    char ch; int flg = 1; for(;!isdigit(ch=getc());)if(ch=='-')flg=-flg;\n    for(res=ch-'0';isdigit(ch=getc());res=res*10+ch-'0'); res*=flg;\n}\ntemplate<class T>inline void chkmax(T &x, T y) { if(x < y) x = y; }\nconst int MAXN = 100005;\nconst double INF = 1e16;\nint n, L, R, cnt, fir[MAXN], init_len[MAXN<<1];\nstruct edge { int to, nxt; double w; }e[MAXN<<1];\ninline void add(int u, int v, int wt) {\n    e[cnt] = (edge) { v, fir[u], 0 }, init_len[cnt] = wt, fir[u] = cnt++;\n    e[cnt] = (edge) { u, fir[v], 0 }, init_len[cnt] = wt, fir[v] = cnt++;\n}\nint mxd[MAXN], dep[MAXN], son[MAXN], Eson[MAXN], dfn[MAXN], tmr;\nvoid dfs1(int u, int ff) {\n    mxd[u] = dep[u] = dep[ff] + 1;\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff) {\n            dfs1(v, u); chkmax(mxd[u], mxd[v]);\n            if(mxd[v] > mxd[son[u]]) son[u] = v, Eson[u] = i;\n        }\n}\nvoid dfs2(int u, int ff) {\n    dfn[u] = ++tmr;\n    if(son[u]) dfs2(son[u], u);\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff && v != son[u])\n            dfs2(v, u);\n}\nint num[MAXN];\ndouble dis[MAXN], mx[MAXN<<2];\nvoid build(int i, int l, int r) {\n    mx[i] = -INF;\n    if(l == r) { num[l] = i; return; }\n    int mid = (l + r) >> 1;\n    build(i<<1, l, mid);\n    build(i<<1|1, mid+1, r);\n}\nvoid modify(int i, int l, int r, int x, double val) {\n    chkmax(mx[i], val);\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    if(x <= mid) modify(i<<1, l, mid, x, val);\n    else modify(i<<1|1, mid+1, r, x, val);\n}\ndouble query(int i, int l, int r, int x, int y) {\n    if(x > y) return -INF;\n    if(l == x && r == y) return mx[i];\n    int mid = (l + r) >> 1;\n    if(y <= mid) return query(i<<1, l, mid, x, y);\n    else if(x > mid) return query(i<<1|1, mid+1, r, x, y);\n    else return max(query(i<<1, l, mid, x, mid), query(i<<1|1, mid+1, r, mid+1, y));\n}\ndouble tmp[MAXN];\nbool solve(int u, int ff) {\n    modify(1, 1, n, dfn[u], dis[u]);\n    if(son[u]) {\n\t\tdis[son[u]] = dis[u] + e[Eson[u]].w;\n\t\tif(solve(son[u], u)) return 1;\n\t}\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff && v != son[u]) {\n            dis[v] = dis[u] + e[i].w;\n\t\t\tif(solve(v, u)) return 1;\n            for(int j = 1; j <= mxd[v]-dep[u]; ++j) {\n                tmp[j] = mx[num[dfn[v]+j-1]];\n                if(j <= R) {\n                    double temp = query(1, 1, n, dfn[u] + max(L-j, 0), dfn[u] + min(R-j, mxd[u]-dep[u]));\n\t\t\t\t\tif(tmp[j] + temp - 2 * dis[u] >= 0) return 1;\n                }\n            }\n            for(int j = 1; j <= mxd[v]-dep[u]; ++j)\n                modify(1, 1, n, dfn[u]+j, tmp[j]);\n        }\n    return query(1, 1, n, dfn[u]+L, dfn[u]+min(R, mxd[u]-dep[u]))-dis[u] >= 0;\n}\ninline bool judge(double mid) {\n    for(int i = 0; i < cnt; ++i)\n        e[i].w = init_len[i] - mid;\n    build(1, 1, n);\n    return solve(1, 0);\n}\nint main() {\n    memset(fir, -1, sizeof fir);\n    read(n), read(L), read(R);\n    for(int i = 1, x, y, z; i < n; ++i)\n        read(x), read(y), read(z), add(x, y, z);\n    dfs1(1, 0), dfs2(1, 0);\n    double l = 0, r = 1e6, mid;\n    while(r - l > (1e-4)) {\n        mid = (l + r) / 2;\n        if(judge(mid)) l = mid;\n        else r = mid;\n    }\n    printf(\"%.3f\\n\", l);\n}\n```\n# CODE2\n\u628a\u4e8c\u5206\u8f6c\u6210\u8fed\u4ee3\u540e\u76f4\u63a5\u6d1b\u8c37rank 1\u4e86...\n\n\u8fed\u4ee3\u5c31\u662f\u968f\u4fbf\u53d6\u4e00\u4e2a\u503c\u4f5c\u4e3amid,\u5e26\u8fdb\u53bb\u7b97\u540e\u5f97\u5230\u66f4\u4f18\u7684\u7b54\u6848,\u7136\u540e\u628a\u66f4\u4f18\u7684\u7b54\u6848\u4f5c\u4e3amid\u7ee7\u7eed\u8fed\u4ee3\u4e0b\u53bb...\u76f4\u767d\u70b9\u5c31\u662f\u5411\u7b54\u6848\u903c\u8fd1.\n\n\u7136\u540e\u521d\u503c\u53d6\u4e00\u4e2a\u9002\u4e2d\u7684\u6570\u5c31\u8dd1\u7684\u8d85\u5feb\u4e86...\u611f\u89c9\u76f8\u5f53\u4e8e\u6ca1\u6709\u4e86\u4e8c\u5206\u7684\u90a3\u4e00\u4e2alog\n\n~~\u90a3\u5206\u6570\u89c4\u5212\u90fd\u53ef\u4ee5\u7528\u8fed\u4ee3\u54af...~~ \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar cb[1<<15],*cs=cb,*ct=cb;\n#define getc() (cs==ct&&(ct=(cs=cb)+fread(cb,1,1<<15,stdin),cs==ct)?0:*cs++)\ntemplate<class T>inline void read(T &res) {\n    char ch; int flg = 1; for(;!isdigit(ch=getchar());)if(ch=='-')flg=-flg;\n    for(res=ch-'0';isdigit(ch=getchar());res=res*10+ch-'0'); res*=flg;\n}\ntemplate<class T>inline void chkmax(T &x, T y) { if(x < y) x = y; }\nconst int MAXN = 100005;\nconst double INF = 1e16;\nint n, L, R, cnt, fir[MAXN], init_len[MAXN<<1];\nstruct edge { int to, nxt; double w; }e[MAXN<<1];\ninline void add(int u, int v, int wt) {\n    e[cnt] = (edge) { v, fir[u], 0 }, init_len[cnt] = wt, fir[u] = cnt++;\n    e[cnt] = (edge) { u, fir[v], 0 }, init_len[cnt] = wt, fir[v] = cnt++;\n}\nint mxd[MAXN], dep[MAXN], son[MAXN], Eson[MAXN], dfn[MAXN], tmr;\nvoid dfs1(int u, int ff) {\n    mxd[u] = dep[u] = dep[ff] + 1;\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff) {\n            dfs1(v, u); chkmax(mxd[u], mxd[v]);\n            if(mxd[v] > mxd[son[u]]) son[u] = v, Eson[u] = i;\n        }\n}\nvoid dfs2(int u, int ff) {\n    dfn[u] = ++tmr;\n    if(son[u]) dfs2(son[u], u);\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff && v != son[u])\n            dfs2(v, u);\n}\nint num[MAXN];\ndouble dis[MAXN];\nstruct node {\n    double x; int y; //x:\u6700\u5927\u8def\u5f84\u548c   y:\u8fb9\u6570\n    node(){}\n    node(double xx, int yy):x(xx), y(yy){}\n    inline bool operator <(const node &o)const { return x < o.x; }\n}Ans, tmp[MAXN], mx[MAXN<<2];\nvoid build(int i, int l, int r) {\n    mx[i] = node(-INF, 0);\n    if(l == r) { num[l] = i; return; }\n    int mid = (l + r) >> 1;\n    build(i<<1, l, mid);\n    build(i<<1|1, mid+1, r);\n}\nvoid modify(int i, int l, int r, int x, node val) {\n    chkmax(mx[i], val);\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    if(x <= mid) modify(i<<1, l, mid, x, val);\n    else modify(i<<1|1, mid+1, r, x, val);\n}\nnode query(int i, int l, int r, int x, int y) {\n    if(x > y) return node(-INF, 0);\n    if(l == x && r == y) return mx[i];\n    int mid = (l + r) >> 1;\n    if(y <= mid) return query(i<<1, l, mid, x, y);\n    else if(x > mid) return query(i<<1|1, mid+1, r, x, y);\n    else return max(query(i<<1, l, mid, x, mid), query(i<<1|1, mid+1, r, mid+1, y));\n}\n\nvoid solve(int u, int ff) {\n    modify(1, 1, n, dfn[u], node(dis[u], dep[u]));\n    if(son[u]) dis[son[u]] = dis[u] + e[Eson[u]].w, solve(son[u], u);\n    for(int i = fir[u], v; ~i; i = e[i].nxt)\n        if((v=e[i].to) != ff && v != son[u]) {\n            dis[v] = dis[u] + e[i].w, solve(v, u);\n            for(int j = 1; j <= mxd[v]-dep[u]; ++j) {\n                tmp[j] = mx[num[dfn[v]+j-1]];\n                if(j <= R) {\n                    node temp = query(1, 1, n, dfn[u] + max(L-j, 0), dfn[u] + min(R-j, mxd[u]-dep[u]));\n                    chkmax(Ans, node(tmp[j].x + temp.x - 2 * dis[u], tmp[j].y + temp.y - 2*dep[u]));\n                }\n            }\n            for(int j = 1; j <= mxd[v]-dep[u]; ++j)\n                modify(1, 1, n, dfn[u]+j, tmp[j]);\n        }\n    node temp = query(1, 1, n, dfn[u]+L, dfn[u]+min(R, mxd[u]-dep[u]));\n    temp.x -= dis[u]; temp.y -= dep[u];\n    chkmax(Ans, temp);\n}\ninline node judge(double mid) {\n    for(int i = 0; i < cnt; ++i)\n        e[i].w = init_len[i] - mid;\n    build(1, 1, n);\n    Ans = node(-INF, 0);\n    solve(1, 0);\n    return Ans;\n}\nint main() {\n    memset(fir, -1, sizeof fir);\n    read(n), read(L), read(R);\n    for(int i = 1, x, y, z; i < n; ++i)\n        read(x), read(y), read(z), add(x, y, z);\n    dep[0] = -1; dfs1(1, 0), dfs2(1, 0);\n    double mid = 600000;\n    while(1) { //\u9ad8\u7ea7\u64cd\u4f5c\n        node now = judge(mid);\n        double ans = (now.x + mid*now.y) / now.y; //\u628ay\u6761\u8fb9\u51cf\u53bb\u7684mid\u52a0\u56de\u6765,\u518d\u7b97\u4e00\u6b21\u5e73\u5747\u503c\n        if(fabs(ans-mid) < 1e-3) break;\n        mid = ans;\n    }\n    printf(\"%.3f\\n\", mid);\n}\n```\n",
        "postTime": 1553745505,
        "uid": 30433,
        "name": "Ark_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4292 \u3010[WC2010]\u91cd\u5efa\u8ba1\u5212\u3011(\u5206\u6570\u89c4\u5212(\u4e8c\u5206/\u8fed\u4ee3) + \u957f\u94fe\u5256\u5206/\u70b9\u5206\u6cbb)"
    }
]