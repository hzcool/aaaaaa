[
    {
        "content": "## P3443 [POI2006]LIS-The Postman \u9898\u89e3\n\nsto [@chdy](https://www.luogu.com.cn/user/59688) orz\n\n### \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u4e00\u4e2a\u90ae\u9012\u5458\uff0c\u6bcf\u5929\u8981 **\u7ecf\u8fc7\u57ce\u5e02\u7684\u6240\u6709\u8857\u9053** \uff0c\u57ce\u5e02\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u65e0\u91cd\u8fb9\uff0c\u70b9\u4ece $1 - n$ \u7f16\u53f7\u3002\u90ae\u9012\u5458\u53ef\u4ee5\u4ece\u8def\u53e3 $1$ \u5f00\u59cb\u6216\u7ed3\u675f\u4ed6\u7684\u884c\u7a0b\uff08\u5373\u4ece $1$ \u51fa\u53d1\u904d\u5386\u6574\u4e2a\u56fe\u540e\u56de\u5230 $1$ \uff09\u3002\n\n\u5f88\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u91cc\uff0c\u90ae\u9012\u5458\u53ef\u4ee5\u968f\u610f\u9009\u62e9\u4ed6\u7684\u8def\u7ebf\uff0c\u7ed3\u679c\u53c8\u6765\u4e86\u65b0\u89c4\u5b9a\uff1a\u90ae\u9012\u5458\u4f1a\u5f97\u5230\u82e5\u5e72\u7ec4\u8def\u53e3\u5e8f\u5217\uff0c\u4e4b\u540e\u4ed6\u7684\u8def\u7ebf\u5fc5\u987b\u6ee1\u8db3\u4e0b\u5217\u8981\u6c42\uff1a\n\n$\\circ$ \u8def\u7ebf\u4ece $1$ \u5f00\u59cb\uff0c\u4ece $1$ \u7ed3\u675f\uff08\u4e0e\u539f\u6765\u4e00\u6837\uff09\u3002\n\n$\\circ$ \u8def\u7ebf\u5fc5\u987b\u7ecf\u8fc7\u6bcf\u6761\u8857\u9053\uff08\u8fb9\uff09 **\u6070\u597d\u4e00\u6b21**\u3002\n\n$\\circ$ \u89c4\u5b9a\u7684\u6bcf\u4e2a\u5e8f\u5217\u5fc5\u987b\u5728\u8def\u7ebf\u4e2d**\u8fde\u7eed**\u51fa\u73b0\u3002\n\n\u73b0\u5728\u4f60\u8981\u505a\u7684\u5c31\u662f\u544a\u8bc9\u8fd9\u4e2a\u53ef\u601c\u7684\u90ae\u9012\u5458\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u7ebf\uff0c\u5982\u679c\u6709\uff0c\u8f93\u51fa\u4e00\u6761\u6ee1\u8db3\u8981\u6c42\u7684\u8def\u7ebf\uff0cspj\u3002\n\n## Solution:\n\n\u53ef\u4ee5\u60f3\u5230\u7528\u6709\u5411\u56fe\u6b27\u62c9\u56de\u8def\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6709\u5411\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\u662f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684**\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6\u4e14\u6574\u5f20\u56fe\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf**\u3002\n\n> \u5f88\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u91cc\uff0c\u90ae\u9012\u5458\u53ef\u4ee5\u968f\u610f\u9009\u62e9\u4ed6\u7684\u8def\u7ebf\n\n\u4ece\u8fd9\u53e5\u8bdd\u4e2d\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff1a\u56fe\u672c\u6765\u5c31\u662f\u8054\u901a\u7684\uff01\n\n\u6240\u4ee5\u5f53\u539f\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u51fa\u5ea6**\u4e0d\u7b49\u4e8e**\u5165\u5ea6\u65f6\uff0c\u5c31\u5df2\u7ecf\u6ca1\u6709\u5408\u6cd5\u7684\u8def\u7ebf\u4e86\u3002\n\n\u9898\u76ee\u4e2d\u7ed9\u51fa\u4e86 $k$ \u4e2a\u89c4\u5b9a\u8981\u8d70\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u60f3\u5230\u5c06\u8fd9\u4e9b\u5e8f\u5217\u5408\u5e76\u5230\u4e00\u8d77\u53bb\u3002\u8fd9\u4e2a\u64cd\u4f5c\u770b\u8d77\u6765\u96be\u4ee5\u8fdb\u884c\uff0c\u4f46\u53ea\u8981\u5c06\u8fb9\u8fdb\u884c\u6807\u53f7\uff0c\u5c06\u8fb9\u7684\u524d\u9a71\u548c\u540e\u7ee7\u5408\u5e76\u5373\u53ef\u3002\n\n\u80fd\u5408\u5e76\u7684\u6761\u4ef6\uff1a\n\n* \u4e00\u6761\u8fb9\u5728\u8def\u5f84\u4e2d\u51fa\u73b0\u4e24\u6b21\u5c31\u662f\u9519\u7684\uff08\u4ee3\u7801\u4e2d\u7528 map \u6765\u8fdb\u884c\u5b9e\u73b0\uff09\n\n* \u4e00\u6761\u8fb9\u6709\u591a\u4e2a\u524d\u9a71\u540e\u7ee7\u5c31\u662f\u9519\u7684\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fb9\u5408\u5e76\u8d77\u6765\u4e00\u53e3\u6c14\u8d70\u5b8c\u3002\n\n\u8fd9\u4e9b\u8fb9\u5408\u5e76\u5b8c\u540e\uff0c\u5982\u679c**\u5b58\u5728\u73af**\u662f\u65e0\u6cd5\u5b9e\u73b0\u7684\u3002\n\n\u73b0\u5728\u6211\u4eec\u5efa\u597d\u4e86\u4e00\u4e2a\u65b0\u7684\u56fe\u4e86\uff0c\u8dd1\u4e00\u8fb9\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\n\n\u6ce8\u610f\u95ee\u9898\uff1a\n\n* \u5728\u65b0\u5efa\u7684\u56fe\u4e2d\u8981\u518d\u6b21\u5224\u65ad\u5165\u5ea6\u662f\u5426\u7b49\u4e8e\u51fa\u5ea6\uff08\u6240\u4ee5\u5bf9\u5ea6\u6570\u7684\u7edf\u8ba1\u6211\u76f4\u63a5\u653e\u5230\u52a0\u8fb9\u91cc\u9762\uff09\n\n* \u9700\u8981\u5224\u65ad\u80fd\u5426\u4ece $1$ \u5f00\u59cb\u3002\n\n* \u5224\u65ad\u65b0\u56fe\u662f\u5426\u8054\u901a\u3002\n\n\u8f93\u51fa\u65b9\u6848\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u662f\u4ece\u54ea\u6761\u8fb9\u8fdb\u6765\u7684\uff0c\u76f4\u63a5\u8f93\u51fa\u8fb9\u5373\u53ef\u3002\n\ncode\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define F first\n#define S second\n#define mp make_pair\ninline int read()\n{\n\tint x=0;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn x;\n}\nconst int N=4e5+5;\nint in[N],head[N],cnt,top;\nbool vis[N];\nmap<int,int> H[N];//\u8bb0\u5f55\u8fb9\u662f\u5426\u51fa\u73b0\u8fc7\nint pre[N],Next[N],b[N],s[N],w[N];\nstruct Edge\n{\n\tint nxt,to,fr;\n}e[N<<1];\npair<int,int> E[N];\nvoid NIE()\n{\n\tputs(\"NIE\");\n\texit(0);\n}\nvoid add_edge(int x,int y,int id)\n{\n\te[++cnt].to=y;\n\te[cnt].nxt=head[x];\n\thead[x]=cnt;\n\t++in[x],--in[y];//\u8bb0\u5f55\u70b9\u7684\u5ea6\u6570\n\tw[cnt]=id;//\u8bb0\u5f55\u70b9\u7684\u7f16\u53f7\n}\nvoid dfs(int x,int fa)\n{\n\tfor(int &i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tif(vis[i])\n\t\t\tcontinue;\n\t\tvis[i]=1;\n\t\tdfs(y,i);\n\t}\n\ts[++top]=fa;\n}\nint main()\n{\n\tint n=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tE[i]=mp(x,y);//\u8bb0\u5f55\u539f\u56fe\u7684\u8fb9\n\t\t++in[x],--in[y];\n\t\tH[x][y]=i;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(in[i])\n\t\t\tNIE();//\u5224\u65ad\u539f\u56fe\u7684\u5ea6\u6570\n\tint k=read();\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x=read();\n\t\tint last=read();\n\t\tfor(int j=1;j<x;j++)//\u5bf9\u8fb9\u524d\u9a71\u540e\u7ee7\u7684\u5904\u7406\u53ca\u8fb9\u7684\u5408\u5e76\n\t\t{\n\t\t\tint y=read();\n\t\t\tif(H[last].find(y)==H[last].end())\n\t\t\t\tNIE();\n\t\t\tb[j]=H[last][y];\n\t\t\tlast=y;\n\t\t}\n\t\tfor(int j=2;j<x;j++)\n\t\t{\n\t\t\tif(!pre[b[j]])\n\t\t\t\tpre[b[j]]=b[j-1];\n\t\t\telse if(pre[b[j]]!=b[j-1])\n\t\t\t\tNIE();\n\t\t\tif(!Next[b[j-1]])\n\t\t\t\tNext[b[j-1]]=b[j];\n\t\t\telse if(Next[b[j-1]]!=b[j])\n\t\t\t\tNIE();\n\t\t}\n\t}\n\tint c=0;\n\tfor(int i=1;i<=m;i++)\n\t\tif(!pre[i])\n        {\n            int j;++c;\n            for(j=i;Next[j];j=Next[j])++c;\n            add_edge(E[i].F,E[j].S,i);\n        }\n\tif(c<m||!head[1])NIE();//\u5224\u65ad\u662f\u5426\u8054\u901a\u4e14\u80fd\u5426\u4ece 1 \u5f00\u59cb\n\tfor(int i=1;i<=n;i++)\n\t\tif(in[i])\n\t\t\tNIE();//\u5224\u65ad\u65b0\u56fe\u7684\u5ea6\u6570\n\tdfs(1,0);//\u6b27\u62c9\u56de\u8def\n\t--top;\n\tfor(int i=1;i<=n;i++)\n\t\tif(head[i])\n\t\t\tNIE();\n\tprintf(\"TAK\\n\");\n\tprintf(\"%d\\n\",E[w[s[top]]].F);\n\tfor(int i=top;i>=1;i--)\n\t{\n\t\tint j=w[s[i]];\n\t\twhile(j)\n\t\t{\n\t\t\tprintf(\"%d\\n\",E[j].S);\n\t\t\tj=Next[j];\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u4e3a\u719f\u7ec3\u6b27\u62c9\u8def\u5f84\u7684\u6709\u5173\u77e5\u8bc6\uff0c\u63a8\u8350\u7ec3\u4e60\u9898\u76ee\uff1a\n\n[P1341 \u65e0\u5e8f\u5b57\u6bcd\u5bf9](https://www.luogu.com.cn/problem/P1341)\n\n[P2731 [USACO3.3]\u9a91\u9a6c\u4fee\u6805\u680f Riding the Fences](https://www.luogu.com.cn/problem/P2731)\n\n[P7771 \u3010\u6a21\u677f\u3011\u6b27\u62c9\u8def\u5f84](https://www.luogu.com.cn/problem/P7771)\n\n### \u9898\u540e\u5410\u69fd\uff1a\n\n\u8fd9\u9053\u9898\u7684 spj \u662f\u4e0d\u662f\u51fa\u95ee\u9898\u4e86\u554a\u554a\u554a\uff0c\u53cd\u6b63\u6211\u63d0\u4ea4\u4e86\u597d\u591a\u904d\u90fd\u662f 90pts UKE \uff0c\u7ffb\u4e86\u4e00\u7ffb AC \u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53d1\u73b0\u7528 C++ 14 O2 \uff0c$N=4e5+5$ \u53ef\u4ee5\u83b7\u5f97AC\uff08\u607c\uff09\u3002",
        "postTime": 1634111001,
        "uid": 180790,
        "name": "zhzzhzzzz",
        "ccfLevel": 3,
        "title": "P3443 [POI2006]LIS-The Postman \u9898\u89e3"
    },
    {
        "content": "> *[P3443 [POI2006]LIS-The Postman](https://www.luogu.com.cn/problem/P3443)\n>\n> [POI \u5408\u96c6](https://www.cnblogs.com/alex-wei/p/POI.html)\u3002\n\n\u6bcf\u6761\u8def\u5f84\u7247\u6bb5\u7684\u9650\u5236\u5f62\u5982\u5728\u7247\u6bb5\u4e2d\u51fa\u73b0\u7684\u76f8\u90bb\u4e24\u6761\u8fb9\u5fc5\u987b\u5148\u540e\u8d70\uff0c\u56e0\u4e3a**\u4e00\u6761\u8fb9\u6709\u5411\u8fb9\u4ec5\u51fa\u73b0\u4e00\u6b21**\u3002\n\n\u6240\u6709\u9650\u5236\u5f62\u6210\u4e00\u6761\u8fb9\u5148\u540e\u8d70\u7684\u5173\u7cfb\u7684\u94fe\uff08\u6709\u70b9\u50cf CSP2019 T4 \u6811\u4e0a\u7684\u6570\uff09\uff0c\u5c06\u8fd9\u6761\u94fe\u7f29\u6210\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef\uff0c\u6700\u540e\u8f93\u51fa\u8fd9\u6761\u8fb9\u65f6\u8981\u518d\u5c55\u5f00\u6210\u94fe\uff0c\u56e0\u6b64\u8981\u8bb0\u5f55\u6bcf\u6761\u94fe\u4e0a\u7684\u7ed3\u70b9\u987a\u5e8f\u3002\n\n\u82e5\u9650\u5236\u5173\u7cfb\u51fa\u73b0\u73af\u6216\u5206\u53c9\u5219\u65e0\u89e3\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5e76\u67e5\u96c6\u6216\u94fe\u8868\u7ef4\u62a4\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u6216\u7ebf\u6027\u3002\n\n```cpp\nconst int N = 5e5 + 5;\nint n, m, q, node, cur[N], fa[N];\nint find(int x) {return fa[x] == x ? x : fa[x] = find(fa[x]);}\nint u[N], v[N], in[N], deg[N];\nint vis[N], vert, top, stc[N];\nvpii e[N], E[N];\nvint G[N], pa[N];\ngp_hash_table <ll, int> mp, buc;\nll hsh(int a, int b) {return 1ll * a * N + b;}\n\nvoid dfs(int id) {\n\tif(!vis[id]) vert++, vis[id] = 1;\n\tfor(int &i = cur[id]; i < E[id].size(); ) {\n\t\tpii it = E[id][i++]; dfs(it.fi);\n\t\tif(it.se > n) stc[++top] = it.se;\n\t} stc[++top] = id;\n}\n\nbool Med;\nint main(){\n\tcin >> n >> m, node = m;\n\tfor(int i = 1; i <= m; i++) {\n\t\tu[i] = read(), e[u[i]].pb(v[i] = read(), i);\n\t\tmp[hsh(u[i], v[i])] = fa[i] = i;\n\t} q = read();\n\tfor(int i = 1; i <= q; i++) {\n\t\tstatic int p[N]; int k = read();\n\t\tfor(int j = 1; j <= k; j++) p[j] = read();\n\t\tfor(int j = 1; j + 1 < k; j++) {\n\t\t\tint u = mp[hsh(p[j], p[j + 1])], v = mp[hsh(p[j + 1], p[j + 2])];\n\t\t\tif(!u || !v) puts(\"NIE\"), exit(0);\n\t\t\tif(buc.find(hsh(u, v)) != buc.end()) continue;\n\t\t\tif(G[u].size() || deg[v] || find(u) == find(v)) puts(\"NIE\"), exit(0);\n\t\t\tbuc[hsh(u, v)] = 1, G[u].pb(v), deg[v]++, fa[fa[u]] = fa[v];\n\t\t}\n\t} for(int i = 1; i <= m; i++)\n\t\tif(G[i].size() && !deg[i]) {\n\t\t\tint cur = u[i], p = i, x = ++node;\n\t\t\twhile(1) {\n\t\t\t\tcur = v[p];\n\t\t\t\tif(!G[p].size()) break;\n\t\t\t\telse pa[x].pb(v[p]), p = G[p][0];\n\t\t\t} E[u[i]].pb(cur, x);\n\t\t}\n\tfor(int i = 1; i <= n; i++) for(pii it : e[i])\n\t\tif(!G[it.se].size() && !deg[it.se]) E[i].pb(it);\n\tfor(int i = 1; i <= n; i++) for(pii it : E[i]) in[it.fi]++;\n\tfor(int i = 1; i <= n; i++)\n\t\tif(E[i].size() != in[i]) puts(\"NIE\"), exit(0);\n\t\telse if(!E[i].size()) vert++;\n\tdfs(1);\n\tif(vert != n) puts(\"NIE\"), exit(0);\n\tputs(\"TAK\");\n\twhile(top) {\n\t\tif(stc[top] > n) for(int it : pa[stc[top]]) cout << it << \"\\n\";\n\t\telse cout << stc[top] << \"\\n\"; top--;\n\t} return  0;\n}\n```",
        "postTime": 1639924181,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3443 [POI2006]LIS-The Postman"
    }
]