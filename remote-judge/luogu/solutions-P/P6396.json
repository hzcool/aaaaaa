[
    {
        "content": "\u6211\u7b80\u8ff0\u4e86\u4e00\u4e0b\u9898\u610f\uff0c\u82e5\u4e0d\u60f3\u770b **\u5197\u957f** \u7684\u9898\u9762\u7684\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u3002\n\n### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 $S_0$\uff0c\u6709 $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u95ee\u7531 $S_0$ \u53d8\u4e3a $S_0[l \\ldots r]$ \u6240\u9700\u8981\u7ecf\u8fc7\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u64cd\u4f5c 1\uff1a$S \\gets T$\uff0c\u5176\u4e2d $T$ \u4e3a $S$ \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u6b64\u64cd\u4f5c\u82b1\u8d39\u4e3a $A$\uff1b\n\n\u64cd\u4f5c 2\uff1a$S \\gets T$\uff0c\u5176\u4e2d $S$ \u4e3a $T$ \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u4e14 $T$ \u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c\u6b64\u64cd\u4f5c\u82b1\u8d39\u4e3a $B$\uff1b\n\n\u64cd\u4f5c 3\uff1a\u5bf9\u4e8e\u975e\u7a7a\u7684 $S \\gets T$\uff0c\u5176\u4e2d $T$ \u4e3a $S$ \u5220\u9664\u957f\u5ea6 **\u4e0d\u5927\u4e8e** $k$ \u7684\u524d\u7f00\u4e0e\u540e\u7f00\u5f97\u5230\u7684\uff0c\u6b64\u64cd\u4f5c\u82b1\u8d39\u4e3a $C$\uff1b\n\n\u64cd\u4f5c 4\uff1a\u5bf9\u4e8e\u975e\u7a7a\u7684 $S \\gets T$\uff0c\u5176\u4e2d $T$ \u4e3a $S_1+S+\\overleftarrow{S_1}$\uff0c\u4e14 $T$ \u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c\u6b64\u64cd\u4f5c\u82b1\u8d39\u4e3a $D$\uff1b\n\n\u64cd\u4f5c 5\uff1a\u5bf9\u4e8e\u975e\u7a7a\u7684 $S \\gets T$\uff0c\u5176\u4e2d $T$ \u4e3a $c + S$\uff0c$c$ \u4e3a\u4efb\u610f\u5b57\u7b26\uff0c\u4e14 **\u4f7f\u7528\u6b64\u64cd\u4f5c\u540e\uff0c\u5728\u4ee5\u540e\u7684\u64cd\u4f5c\u4e2d\uff0c\u4e0d\u5141\u8bb8\u518d\u4f7f\u7528\u5176\u4ed6\u64cd\u4f5c**\uff0c\u6b64\u64cd\u4f5c\u82b1\u8d39\u4e3a $E$\uff1b\n\n\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 $1 \\le \\left|S_0\\right|, q \\le 10^5$\uff0c$1 \\le \\left|\\Sigma\\right| \\le 52$\u3002\n\n### \u89e3\u9898\u601d\u8def\uff1a\n\n#### \u64cd\u4f5c 1\n\n\u76f4\u63a5\u8fde $(i, fail_i)$\uff0c\u8fb9\u6743\u4e3a $A$ \u7684\u8fb9\u5373\u53ef\u3002\n\n#### \u64cd\u4f5c 2\n\n\u76f4\u63a5\u8fde $(fail_i, i)$\uff0c\u8fb9\u6743\u4e3a $B$ \u7684\u8fb9\u5373\u53ef\u3002\n\n#### \u64cd\u4f5c 3\n\n\u9884\u5904\u7406\u51fa $i$ \u7684\u7236\u4eb2 $fa_i$\uff0c\u7136\u540e\u8fde $k$ \u6761 $(i, fa_i)$\uff0c\u8fb9\u6743\u4e3a $C$ \u7684\u8fb9\u3002\n\n#### \u64cd\u4f5c 4\n\n\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u672c\u8d28\u4e0a\u662f\u4ece $i$ \u4ee5 $D$ \u7684\u4ee3\u4ef7\u8f6c\u79fb\u5230 $i$ \u5b50\u6811\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u3002\n\n\u4f46\u662f\uff0c\u8003\u8651\u5230 $i$ \u7684\u5b50\u6811\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u4f9d\u6b21\u8fde\u63a5\u4e8e\u8fb9\u6570\u6216\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u5747\u4e0d\u5408\u7406\u3002\n\n\u8003\u8651\u865a\u6811\u7684\u601d\u60f3\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u7684\u865a\u70b9\uff0c\u800c\u865a\u70b9 **\u53ea\u80fd\u5f80\u513f\u5b50\u7684\u65b9\u5411** \u8f6c\u79fb\uff08\u82b1\u8d39\u4e3a $0$\uff09\u3002\n\n\u90a3\u4e48\uff0c\u8fde\u4e00\u6761 $(i, i')$\uff0c\u8fb9\u6743\u4e3a $D$ \u7684\u8fb9\uff0c\u4ee5\u53ca $(i', i)$\uff0c\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u5373\u53ef\u3002\n\n#### \u64cd\u4f5c 5\n\n\u64cd\u4f5c 5 \u662f\u72ec\u7acb\u4e8e\u4e0a\u8ff0\u56db\u4e2a\u64cd\u4f5c\u7684\uff0c\u56e0\u4e3a\u8fdb\u884c\u5b8c\u4e00\u6b21\u64cd\u4f5c 5 \u540e **\u4e0d\u80fd\u518d\u4f7f\u7528** \u4e0a\u8ff0\u56db\u4e2a\u64cd\u4f5c\u4e86\u3002\n\n\u8fd9\u4e2a\u500d\u589e\u4e00\u4e0b level ancestor\uff0c\u7ed3\u5408 dp \u8f6c\u79fb\u5373\u53ef\u3002\n\n\u8bbe $dis_i$ \u8868\u793a Dijkstra \u6c42\u51fa\u6765\u7684\u6700\u77ed\u8def\u7684\u8ddd\u79bb\uff0c\n\n\u8bbe $f(i)$ \u8868\u793a\u4f7f\u7528\u4e94\u79cd\u64cd\u4f5c\u5230\u8fbe $i$ \u7684\u6700\u5c11\u82b1\u8d39\uff0c\u5219 $f(i) = \\min\\{dis_i, f(fail_i) + E\\cdot(len_i - len_{fail_i})\\}$\n\n#### \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\n\n\u8bb0 $\\left|S\\right| = n$\u3002\n\n\u663e\u7136\u8fb9\u7684\u6570\u91cf\u662f\u7ebf\u6027\u7684\uff0c\u4e0d\u96be\u5f97\u51fa\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n + q)\\log(n))$\u3002\n\n~~\u53ef\u4ee5\u4f7f\u7528\u914d\u5bf9\u5806\u4f18\u5316 Dijkstra\u3002~~\n\n### \u53c2\u8003\u4ee3\u7801\uff1a\n\nDijkstra \u6211\u5c31\u4e0d\u8d34\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define LL long long\n\nconst LL inf = 0x3f3f3f3f3f3f3f3fLL;\nconst int N = 1e6 + 5;\nconst int M = 2e6 + 5;\n\nint n, m, k, ta, tb, tc, td, te, q, flag = 1;\nint cnt, first[N], pos[N];\nLL dis[N], f[N];\nint lg2, anc[N][40 + 5];\nchar str[N];\n\nstruct EERTREE {\n    static const int MS = N;\n    static const int C = 50 + 5;\n\n    int n, cntNode, last, s[MS], len[MS], fail[MS], par[MS], ch[MS][C], lst[MS];\n\n    int make(int l) {\n        for(int i = 0; i < C; ++i) ch[cntNode][i] = 0;\n        len[cntNode] = l;\n        return cntNode++;\n    }\n    int GetFail(int x) {\n        while(s[n] != s[n - len[x] - 1]) x = fail[x];\n        return x;\n    }\n    void extend(int x) {\n        s[++n] = x;\n        int fa = GetFail(last);\n        if(!ch[fa][x]) {\n            int now = make(len[fa] + 2);\n            fail[now] = ch[ GetFail(fail[fa]) ][x];\n            ch[fa][x] = now;\n        }\n        last = ch[fa][x];\n        par[last] = fa, lst[n] = last;\n    }\n    void init() {\n        n = cntNode = last = 0;\n        make(0), make(-1);\n        fail[0] = 1, fail[1] = 0;\n        s[0] = -1;\n    }\n    EERTREE() { init(); }\n} t;\n\nint I(char ch) {\n    if('a' <= ch && ch <= 'z')\n        return ch - 'a' + 1;\n    else\n        return 26 + ch - 'A' + 1;\n}\n\nint G(int x) {\n    return x + t.cntNode - 1;\n}\n\nvoid Build_Graph() {\n    for(int i = 2; i <= t.cntNode - 1; ++i) {\n        if(t.fail[i] > 1) Add_Edge(i, t.fail[i], ta), Add_Edge(t.fail[i], i, tb);\n        else Add_Edge(i, 1, ta), Add_Edge(1, i, tb);\n        for(int j = 1, fa = t.par[i]; j <= k && fa > 1; ++j, fa = t.par[fa])\n            Add_Edge(i, fa, tc);\n        Add_Edge(i, G(i), td);\n        Add_Edge(G(i), i, 0);\n        for(int j = 0; j < t.C; ++j)\n            if(t.ch[i][j])\n                Add_Edge( G(i), G(t.ch[i][j]), 0 );\n    }\n    for( ; 1LL << lg2 < m; ++lg2);\n    for(int i = 2; i <= t.cntNode - 1; ++i) anc[i][0] = std::max(t.fail[i], 1);\n    for(int j = 1; j <= lg2; ++j)\n        for(int i = 2; i <= t.cntNode - 1; ++i)\n            anc[i][j] = anc[anc[i][j - 1]][j - 1];\n}\n\nint Find(int x, int len) {\n    if(t.len[x] <= len) return x;\n    for(int j = lg2; j >= 0; --j)\n        if(anc[x][j] > 1 && t.len[anc[x][j]] > len)\n            x = anc[x][j];\n    return anc[x][0];\n}\n\nvoid solve(int l, int r) {\n    if(l == 1 && r == m) {\n        puts(\"0\");\n        return;\n    }\n    int p = Find(t.lst[r], r - l + 1);\n    printf(\"%lld\\n\", f[p] + 1LL * (r - l + 1 - t.len[p]) * te + (!flag) * ta);\n}\n\nint main() {\n    scanf(\"%s\", str + 1), m = strlen(str + 1);\n    memset(first, -1, sizeof(first));\n    scanf(\"%d %d %d %d %d %d %d\", &k, &ta, &tb, &tc, &td, &te, &q);\n\n    for(int i = 1; i <= m; ++i) t.extend( I(str[i]) );\n    Build_Graph();\n    Dijkstra(t.last);\n\n    for(int i = 1; i <= m; ++i) flag &= (str[i] == str[m - i + 1]);\n\n    f[0] = inf, f[1] = dis[1];\n    for(int i = 2; i <= t.cntNode - 1; ++i)\n        f[i] = std::min(dis[i], f[t.fail[i]] + 1LL * te * (t.len[i] - t.len[t.fail[i]]));\n\n    while(q--) {\n        int l, r;\n        scanf(\"%d %d\", &l, &r);\n        solve(l, r);\n    }\n    return 0;\n}\n```",
        "postTime": 1587187749,
        "uid": 78407,
        "name": "Clever_Jimmy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6396 \u3010\u8981\u6709\u5149\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6396)\n\n[\u66f4~~\u4e0d~~\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Appleblue17/p/14341804.html#\u9898\u610f\u7b80\u8ff0)\n\n\u771f\u662f\u795e\u9898\n\n#### \u9898\u610f\u7b80\u8ff0\n\n\u597d\u4e00\u9053\u7ffb\u8bd1\u9898\n\n\u4e00\u4e2a\u5b57\u7b26\u4e32 $S_0$ \uff0c\u5e76\u4ee4 $S=S_0$ \uff0c\u5bf9 $S$ \u8fdb\u884c\u82e5\u5e72\u64cd\u4f5c\u3002\n\n\u6709\u4e94\u79cd\u64cd\u4f5c\uff1a\n\n- **\u5149\u5f52**\uff1a\u82e5 $S$ **\u975e\u7a7a**\uff0c\u53ef\u5c06 $S$ \u53d8\u4e3a $S$ \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u4ee3\u4ef7 $A$\u3002\n- **\u5149\u8f89**\uff1a\u82e5 $S$ \u4e3a**\u56de\u6587\u4e32**\uff0c\u4e14\u5b58\u5728 $T$ \uff08\u53ef\u4e3a\u7a7a\u4e32\uff09\u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c$S$ \u4e3a $T$ \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u53ef\u5c06 $S$ \u53d8\u4e3a $T$ \uff0c\u4ee3\u4ef7 $B$\u3002\n- **\u5149\u9690**\uff1a\u82e5 $S$ \u4e3a**\u975e\u7a7a\u56de\u6587\u4e32**\uff0c\u53ef\u5220\u53bb\u5176\u957f\u5ea6\u76f8\u7b49\u4e14\u957f\u5ea6\u4e0d\u5927\u4e8e $k$ \u7684\u524d\u7f00\u4e0e\u540e\u7f00\uff08\u5220\u53bb\u540e\u4e0d\u80fd\u4e3a\u7a7a\u4e32\uff09\uff0c\u4ee3\u4ef7 $C$\u3002\n- **\u5149\u817e**\uff1a\u82e5 $S$ \u4e3a**\u975e\u7a7a\u56de\u6587\u4e32**\uff0c\u4e14\u5728 $S$ \u4e24\u7aef\u52a0\u4e0a\u4e00\u5bf9\u53cd\u4e32\u540e\u751f\u6210\u7684\u65b0\u56de\u6587\u4e32 $T$ \u662f $S_0$ \u7684\u5b50\u4e32\uff0c\u53ef\u5c06 $S$ \u53d8\u4e3a $T$ \uff0c\u4ee3\u4ef7 $D$\u3002\n- **\u5149\u6208**\uff1a\u82e5 $S$ **\u975e\u7a7a**\uff0c\u53ef\u5728 $S$ \u524d\u52a0\u5165\u4efb\u610f\u5b57\u7b26\uff0c\u4ee3\u4ef7 $E$\u3002\u4f7f\u7528\u8be5\u64cd\u4f5c\u540e\u4e0d\u80fd\u518d\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c\u3002\n\n$q$ \u6b21\u8be2\u95ee\uff0c\u6c42\u5c06 $S$ \u53d8\u4e3a $S_0[l,r]$ \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n$1 \\leq q,|S| \\leq 10^5$\uff0c$1 \\leq k \\leq 5$\uff0c$\\sum \\leq 52$\n\n#### \u9898\u76ee\u5206\u6790\n\n\u4e3b\u9898\u662f\u56de\u6587\u4e32\uff0c\u5f53\u7136\u5f97\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u5904\u7406\u3002\n\n\u8003\u8651\u5728\u56de\u6587\u81ea\u52a8\u673a\u7684\u8282\u70b9\u95f4\u5efa\u5355\u5411\u8fb9\uff0c\u7136\u540e\u8dd1\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n\u8bb0\u8fb9\u4e3a $(u,v,w)$\u3002\n\n- **\u5149\u5f52**\uff1a$(i,fail_i,A)$\uff0c$fail_i$ \u53ef\u4ee5\u4e3a $0$\u3002\n- **\u5149\u8f89**\uff1a$(fail_i,i,B)$\uff0c$fail_i$ \u53ef\u4ee5\u4e3a $0$\u3002\n- **\u5149\u9690**\uff1a$(i,pth-fa_i,C)$\uff0c$p=1,2,\\cdots,k$\u3002$pth-fa_i$ \u8868\u793a $p$ \u7ea7\u7956\u5148\uff0c\u4e0d\u80fd\u4e3a $0$\u3002\n- **\u5149\u817e**\uff1a\u5c06 $i$ \u5411 $fail$ \u6811\u4e2d\u5b83\u7684\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u8fde\u8fb9 $(i,son,D)$\u3002\n\n\u8fd9\u6837\u4f1a\u8fde\u51fa $O(|S|^2)$ \u6761\u8fb9\uff0c\u4e0d\u884c\u3002\n\n\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u70b9 $i$ \u5efa\u4e00\u4e2a\u865a\u70b9 $i'$\uff0c\u5c06 $i'$ \u5efa\u6309\u7167 $fail$ \u6811\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $0$\u3002\u6ce8\u610f\uff1a**$i$ \u5e76\u6ca1\u6709\u6309\u7167 $fail$ \u6811\u8fde\u8fb9**\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8fde\u8fb9 $(i',i,0)$ \uff0c\u8fd9\u6837\u865a\u70b9\u53ef\u4ee5\u968f\u610f\u5230\u8fbe\u5b83\uff1b\u8fde\u8fb9 $(i,i',D)$ \uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u82b1\u8d39 $D$ \u7684\u4ee3\u4ef7\u5230\u8fbe\u865a\u70b9\uff0c\u4ece\u800c\u5230\u8fbe\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u3002\n\n**\u5149\u6208**\u64cd\u4f5c\u8f83\u4e3a\u7279\u6b8a\uff0c\u53ea\u8981\u4f7f\u7528\u4ee3\u4ef7\u5c31\u5df2\u786e\u5b9a\uff0c\u6545\u5728\u8be2\u95ee\u65f6\u518d\u8003\u8651\u3002\n\n***\n\n\u8dd1\u4e00\u904d `Dijkstra`\uff0c\u5f97\u5230 $dis(i)$ \uff0c\u8868\u793a\u5230\u8fbe $i$ \u72b6\u6001\u6700\u5c0f\u7684\u4ee3\u4ef7\u3002\n\n\u6ce8\u610f\u6709\u4e2a\u5c0f\u7ec6\u8282\uff1a**\u82e5 $S_0$ \u672c\u8eab\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u9700\u8981\u5148\u8fdb\u884c\u4e00\u6b21\u5149\u5f52\u5c06\u5176\u53d8\u5230 `PAM` \u7684\u8282\u70b9\u4e0a\uff0c\u56e0\u4e3a\u6b64\u65f6\u4e0d\u80fd\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c**\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u8be2\u95ee\u3002\u9996\u5148\u5982\u679c\u8be2\u95ee\u662f $S_0[1,n]$ \u9700\u8981**\u7279\u5224**\uff0c\u7b54\u6848\u4e3a $0$\u3002\n\n\u7531\u4e8e\u5149\u6208\u64cd\u4f5c\u53ea\u80fd\u7531\u56de\u6587\u4e32\u5728\u524d\u9762\u6dfb\u52a0\u5b57\u7b26\u800c\u6765\uff0c\u6545\u5f00\u59cb\u5149\u6208\u524d\u4e00\u5b9a\u662f\u8be2\u95ee\u4e32\u7684\u4e00\u4e2a\u56de\u6587\u540e\u7f00\u3002\n\n\u53ef\u4ee5\u4ece\u8be2\u95ee\u4e32\u7684\u6700\u957f\u540e\u7f00\u8df3 $fail$\uff0c\u5047\u8bbe\u8df3\u5230\u4e86\u8282\u70b9 $p$ \u4e14**\u6ee1\u8db3 $len_p \\leq r-l+1$**\u3002\n\n$$ans=\\min_{p}\\{(r-l+1-len_p)E+dis(p) \\}$$\n\n\u66b4\u529b\u8df3 $fail$ \u4ecd\u7136\u662f\u4e0d\u53ef\u53d6\u7684 ~~\u867d\u7136\u80fd\u6c34\u5230 85 pts~~ \uff0c\u4f1a\u88ab\u94fe\u7684\u60c5\u51b5\u5361\u5230 $O(|S|^2)$\u3002\n\n\u4f46\u6211\u4eec\u53d1\u73b0\u8df3 $fail$ \u65f6 $len$ \u662f\u5728\u4e0d\u65ad\u51cf\u5c0f\u7684\uff0c\u4e5f\u5c31\u662f\u67e5\u8be2\u7684\u5b9e\u9645\u4e0a\u662f\u4ece\u6839\u51fa\u53d1\u7684\u4e00\u6761\u94fe\u7684\u6700\u5c0f\u503c\u3002\n\n$$ans=(r-l+1)E + \\min_{p}\\{dis(p)-len_pE \\}$$\n\n\u90a3\u500d\u589e\u51fa\u7b2c\u4e00\u4e2a $len_p \\leq r-l+1$\uff0c\u8bb0\u7531\u6839\u51fa\u53d1\uff08**\u4e0d\u5305\u62ec 0 \u53f7\u8282\u70b9**\uff09\u5230 $u$ \u8282\u70b9\u7684\u94fe\u4e0a\uff0c $g_u=dis(p)-len_pE$ \uff0c\u7b54\u6848\u5373\u4e3a\n\n$$ans=(r-l+1)E + g_u$$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(k|S|+(k|S|+q)logn)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long N=4e5+5;\nlong long m,k,A,B,C,D,E;\n\nstruct nodd{\n\tlong long to,nxt;\n\tlong long w;\n}e[N*2];\nlong long head[N],cntt;\n\nvoid add(long long u,long long v,long long w){\n\te[++cntt].to=v;\n\te[cntt].w=w;\n\te[cntt].nxt=head[u];\n\thead[u]=cntt;\n}\n\n//\u5efa\u56fe \n\nstruct nod{\n\tint ch[52];\n\tint len,fail,fa;\n\tnod(){\n\t\tmemset(ch,0,sizeof(ch));\n\t\tlen=fail=0;\n\t}\n}t[N>>1];\n\nchar s[N];\nlong long lst=0,cnt=1;\nlong long trans(char c){\n\tif(c>='a' && c<='z') return c-'a';\n\telse return c-'A'+26;\n}\n//\u8f6c\u6362\u5b57\u7b26 \nvoid PAM(long long n){\n\tlong long p=lst;\n\tlong long c=trans(s[n]);\n\twhile(s[n-t[p].len-1]!=s[n]) p=t[p].fail;\n\tif(!t[p].ch[c]){\n\t\tcnt++;\n\t\tlong long q=t[p].fail;\n\t\twhile(s[n-t[q].len-1]!=s[n]) q=t[q].fail;\n\t\tt[cnt].fail=t[q].ch[c];\n\t\tt[cnt].len=t[p].len+2;\n\t\t\n\t\tt[p].ch[c]=cnt;\n\t\tt[cnt].fa=p;\n\t}\n\tlst=t[p].ch[c];\n}\n\nstruct abc{\n\tlong long num,dis;\n};\nlong long dis[N];\nbool vis[N];\nbool operator <(abc x,abc y){\n\treturn x.dis>y.dis;\n}\npriority_queue <abc> q;\n\nlong long pre[N],ex;\n\nlong long f[N][19],g[N];\n//g: \u6839\u8282\u70b9\uff08\u4e0d\u542b0\uff09\u5230\u6b64\u7684 dis[p]-t[p].len*E \u6700\u5c0f\u503c \n\nvoid dfs(long long u){\n\tfor(long long i=head[u];i;i=e[i].nxt){\n\t\tlong long v=e[i].to;\n\t\tf[v][0]=u;\n\t\tg[v]=min(g[u],dis[v]-t[v].len*E);\n\t\tdfs(v);\n\t}\n}\n//\u9884\u5904\u7406 f\u548c g \n\nint main(){\n\tscanf(\"%s\",s+1);\n\tlong long n=strlen(s+1);\n\tcin>>k>>A>>B>>C>>D>>E;\n\t\n\tt[0].fail=t[1].fail=1;\n\tt[1].len=-1;\n\tfor(long long i=1;i<=n;i++) PAM(i),pre[i]=lst;\n\t//PAM\n\t\n\tif(t[lst].len!=n) ex=A;\n\tfor(long long i=2;i<=cnt;i++)\n\t\tadd(i,t[i].fail,A);\n\tfor(long long i=2;i<=cnt;i++)\n\t\tadd(t[i].fail,i,B);\n\tfor(long long i=2;i<=cnt;i++){\n\t\tlong long x=t[i].fa;\n\t\tfor(long long j=1;x && j<=k;x=t[x].fa,j++)\n\t\t\tadd(i,x,C);\n\t}\n\t\n\tfor(long long i=2;i<=cnt;i++)\n\t\tadd(i+cnt,i,0);\n\tfor(long long i=2;i<=cnt;i++)\n\t\tadd(i,i+cnt,D);\n\tfor(long long i=2;i<=cnt;i++)\n\t\tif(t[i].fa>1)\n\t\t\tadd(t[i].fa+cnt,i+cnt,0);\n\t//\u865a\u70b9 \n\t//\u5efa\u56fe \n\t\n\tmemset(dis,0x7f,sizeof(dis));\n\tdis[lst]=0;\n\tq.push((abc){lst,0});\n\twhile(!q.empty()){\n\t\tabc tmp=q.top();\n\t\tq.pop();\n\t\tlong long u=tmp.num;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(long long i=head[u];i;i=e[i].nxt){\n\t\t\tlong long v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tif(dis[u]+e[i].w<dis[v]) dis[v]=dis[u]+e[i].w;\n\t\t\tq.push((abc){v,dis[v]});\n\t\t}\n\t}\n\t//Dijkstra \n\t\n\tmemset(head,0,sizeof(head));\n\tcntt=0;\n\tfor(long long i=2;i<=cnt;i++)\n\t\tadd(t[i].fail,i,0);\n\tg[0]=1e18;\n\tdfs(0);\n\tfor(long long j=1;j<=18;j++)\n\t\tfor(long long i=0;i<=cnt;i++)\n\t\t\tf[i][j]=f[f[i][j-1]][j-1];\n\tcin>>m;\n\tfor(long long i=1;i<=m;i++){\n\t\tlong long l,r;\n\t\tscanf(\"%lld%lld\",&l,&r);\n\t\tif(l==1 && r==n){\n\t\t\tputs(\"0\");\n\t\t\tcontinue;\n\t\t}\n\t\t//\u7279\u5224 \n\t\tlong long p=pre[r];\n\t\tif(t[p].len>r-l+1){\n\t\t\tfor(long long j=18;j>=0;j--)\n\t\t\t\tif(t[f[p][j]].len>r-l+1) p=f[p][j];\n\t\t\tp=f[p][0];\n\t\t}\n\t\t//\u500d\u589e \n\t\tprintf(\"%lld\\n\",(r-l+1)*E+g[p]+ex);\n\t}\n}\n```\n\n",
        "postTime": 1611836739,
        "uid": 225645,
        "name": "\u82f9\u679c\u84dd17",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6396 \u3010\u8981\u6709\u5149\u3011"
    },
    {
        "content": "# \u5206\u6790\n&emsp;&emsp;\u9605\u8bfb\u9898\u9762\uff0c\u9996\u5148\u4fbf\u4e0d\u96be\u53d1\u73b0\u4e00\u70b9\uff0c\u4e00\u65e6\u8fdb\u884c\u4e86\u9664\u4e86 \" \u5149\u5f0b \" \u64cd\u4f5c\u5916\u7684\u4efb\u4e00\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u6cd5\u672f\u90fd\u4f1a\u53d8\u6210\u4e00\u4e2a\u5f52\u6cd5\u672f\u3002\u800c \" \u5149\u5f0b \" \u53ea\u80fd\u5728\u6cd5\u672f\u524d\u7aef\u52a0\u5165\u5b57\u7b26\uff0c\u53c8\u53ea\u80fd\u653e\u5728\u6700\u540e\u505a\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f97\u51fa\uff1a  \n&emsp;&emsp;\u9664\u7279\u6b8a\u60c5\u51b5\u5916\uff0c\u6211\u4eec\u5728\u6700\u7ec8 \" \u5149\u5f0b \" \u64cd\u4f5c\u4e4b\u524d\u7684\u76ee\u6807\u5c31\u662f\u8981\u8ba9\u521d\u59cb\u6cd5\u672f\u901a\u8fc7\u6700\u5c11\u65f6\u95f4\u53d8\u6362\u4e3a\u76ee\u6807\u6cd5\u672f\u7684\u4e00\u4e2a**\u5f52\u6cd5\u672f\u540e\u7f00**\uff1b\u6700\u7ec8\u4e0d\u9700\u8981\u8fdb\u884c \" \u5149\u5f0b \" \u64cd\u4f5c\u7684\u60c5\u51b5\u4e5f\u53ef\u4ee5\u5f52\u4e3a\u8fd9\u7c7b\u3002    \n&emsp;&emsp;\u7279\u6b8a\u60c5\u51b5\u5c31\u662f\u5f53\u76ee\u6807\u6cd5\u672f\u5c31\u662f\u521d\u59cb\u6cd5\u672f\u7684\u60c5\u51b5\u3002\u6b64\u65f6\u6211\u4eec\u4e0d\u9700\u8981\u53d8\u6362\u3002  \n&emsp;&emsp;\u5982\u4f55\u7528\u6700\u5c11\u65f6\u95f4\u53d8\u6362\u4e3a\u5176\u4e00\u4e2a\u5f52\u6cd5\u672f\u540e\u7f00\uff1f  \n&emsp;&emsp;\u518d\u6b21\u89c2\u5bdf\u6211\u4eec\u5269\u4e0b\u7684\u56db\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u96be\u8054\u60f3\u5230\u56de\u6587\u81ea\u52a8\u673a\u3002    \n&emsp;&emsp;\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u4e2d \" \u5149\u5f52 \" \u548c \" \u5149\u8f89 \" \u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u5bf9\u5e94\u4e86\u72b6\u6001\u901a\u8fc7$ fail $\u6811\u8fdb\u884c\u8f6c\u79fb\uff1b \" \u5149\u9690 \" \u548c \" \u5149\u817e \" \u64cd\u4f5c\u5b9e\u9645\u4e0a\u5bf9\u5e94\u4e86\u5728\u81ea\u52a8\u673a\u7684\uff08\u8ba4\u4e3a\u662f\u65e0\u5411\uff09\u8fb9\u4e0a\u7684\u8f6c\u79fb\u3002  \n&emsp;&emsp;\u6709\u4e86\u8fd9\u4e2a\u8f7d\u4f53\uff0c\u6211\u4eec\u628a\u5b57\u7b26\u4e32\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u56fe\u4e0a\uff08\u6811\u4e0a\uff1f\uff09\u95ee\u9898\u3002\u6b64\u65f6\u4e0d\u6392\u9664\u6709\u6211\u60f3\u4e0d\u51fa\u6765\u4f46\u662f\u662f\u6b63\u786e\u7684\u8d2a\u5fc3 / DP \u7b49\u505a\u6cd5\uff0c\u6b22\u8fce\u5927\u5bb6\u6765\u8e29\u7206\u6211\u3002  \n&emsp;&emsp;\u53cd\u6b63\uff0c\u7531\u4e8e\u662f\u56fe\u4e0a\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5e76\u4e14\u7275\u6d89\u5230\u72b6\u6001\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u6784\u5efa\u6700\u77ed\u8def\u3002\u8003\u8651\u6839\u636e\u9898\u76ee\u7684\u524d\u56db\u79cd\u64cd\u4f5c\u57fa\u4e8e\u56de\u6587\u81ea\u52a8\u673a\u5efa\u56fe\uff1a  \n&emsp;&emsp;\u9996\u5148\u5b9a\u4e49$fail[x]$\u4e3a\u72b6\u6001$x$\u7684**\u6700\u957f\u5f52\u6cd5\u672f\u540e\u7f00**\u5bf9\u5e94\u7684\u72b6\u6001\uff08\u5982\u679c\u6307\u5411\u4e86$0$\u6839\u6216\u8005$-1$\u6839\uff0c\u6211\u4eec\u8ba4\u4e3a$fail[x]$\u6307\u5411\u7684\u662f\u65b0\u6784\u5efa\u7684\u56fe\u4e0a\u7684\u70b9$1$\uff09\u3002$ch[x][c]$\u4e3a\u72b6\u6001$x$\u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20$c$\u4e4b\u540e\u8f6c\u79fb\u7684\u72b6\u6001\u3002$fa[x][k]$\u8868\u793a\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\uff08\u7531\u4e8e\u662f\u6811\u5f62\u7ed3\u6784\uff09\u5411\u7236\u4eb2\u65b9\u5411\u8f6c\u79fb$k$\u6b21\u5f97\u5230\u7684\u72b6\u6001\u3002$len[x]$\u8868\u793a\u56de\u6587\u81ea\u52a8\u673a\u4e0a$x$\u4ee3\u8868\u7684\u4e32\u7684\u957f\u5ea6\u3002  \n&emsp;&emsp;\u7136\u540e\u53ef\u4ee5\u5206\u7c7b\u5efa\u56fe\uff1a  \n&emsp;&emsp;$1.$ \" \u5149\u5f52 \"  \uff1a\u5efa\u4e00\u6761$(x,fail[x])$\u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4e3a$A$\u3002  \n&emsp;&emsp;$2.$ \" \u5149\u8f89 \" \uff1a\u5efa\u4e00\u6761$(fail[x],x)$\u7684\u6709\u5411\u8fb9\uff0c\u6743\u503c\u4e3a$B$\u3002  \n&emsp;&emsp;$3.$ \" \u5149\u9690 \" \uff1a\u5efa$k$\u6761\u8fb9\uff0c\u4e3a$1\\le i\\le k, (x,fa[x][i])$\uff0c\u6743\u503c\u5404\u4e3a$C$\u3002  \n&emsp;&emsp;$4.$ \" \u5149\u817e \" \uff1a\u8fd9\u4e2a\u5efa\u8fb9\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u4f60\u7684\u590d\u6742\u5ea6\u3002  \n&emsp;&emsp;\u8003\u8651\u6700\u540e\u7684 \" \u5149\u817e \" \u64cd\u4f5c\u7684\u5efa\u8fb9\uff0c\u5982\u679c\u76f4\u63a5\u66b4\u529b\u65e0\u8111\u5411\u81ea\u5df1\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u6240\u6709\u5b50\u5b59\u90fd\u8fde\u8fb9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5f88\u5bb9\u6613\u5c31\u4f1a\u88ab\u5361\u5230$O(|S|^2)$\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\uff0c\u6bcf\u6b21\u8fdb\u884c\u5149\u817e\u64cd\u4f5c\u7684\u65f6\u5019\u53ea\u9700\u8981\u652f\u4ed8\u4e00\u6b21\u82b1\u8d39\uff0c\u7136\u540e\u53ef\u4ee5\u968f\u610f~~\u86c7\u76ae~~\u8f6c\u79fb\uff0c\u76f4\u5230\u8fdb\u5165\u5230\u4e00\u4e2a\u786e\u5b9a\u7684\u72b6\u6001\u3002  \n&emsp;&emsp;\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u60f3\u4e3a\u6bcf\u4e00\u4e2a\u70b9$x$\u6709\u4e00\u4e2a\u865a\u70b9$x'$\uff0c\u8fd9\u4e9b\u865a\u70b9\u4eff\u7167\u539f\u56de\u6587\u6811\u6784\u9020\u51fa\u4e86\u6811\u5f62\u7ed3\u6784\uff0c\u5e76\u4e14\u5728\u8fd9\u68f5 \" \u865a\u6811 \" \u4e0a\u9762\u53ea\u80fd\u5411\u513f\u5b50\u8f6c\u79fb\uff0c\u4e14\u8f6c\u79fb\u82b1\u8d39\u4e3a$0$\u3002\u8fd9\u6837\u6211\u4eec\u8fdb\u884c \" \u5149\u817e \" \u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u62c6\u5206\u4e3a\u4e09\u6b65\uff1a   \n&emsp;&emsp;$1.$\u4ece \" \u5b9e\u6811 \" \u8d70\u5230 \" \u865a\u6811 \" \u4e0a\uff0c\u82b1\u8d39$D$\uff0c\u5373$(x,x')$\uff0c\u6743\u503c\u4e3a$D$\u3002  \n&emsp;&emsp;$2.$\u5728 \" \u865a\u6811 \" \u4e0a\u5411\u513f\u5b50\u65b9\u5411\u8f6c\u79fb\uff0c\u4e0d\u82b1\u8d39\u3002  \n&emsp;&emsp;$3.$\u4ece \" \u865a\u6811 \" \u56de\u5230 \" \u5b9e\u6811 \" \u4e0a\uff0c\u4e0d\u82b1\u8d39\uff0c\u5373$(x',x)$\uff0c\u6743\u503c\u4e3a$0$\u3002  \n&emsp;&emsp;\u4e8e\u662f\u8fd9\u6837\u5efa\u8fb9\uff0c\" \u5149\u817e \" \u7684\u590d\u6742\u5ea6\u5c31\u88ab\u964d\u5230\u4e86$O(|S|)$\u3002\u8fb9\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(k|S|)$\u7684\u3002  \n&emsp;&emsp;\u63a5\u7740\uff0c\u6211\u4eec\u4ece\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5f97\u5230\u4ece\u521d\u59cb\u6cd5\u672f\u5230\u6bcf\u4e00\u4e2a\u5f52\u6cd5\u672f\u7684\u6700\u5c11\u65f6\u95f4\u82b1\u8d39\u4e86\uff01  \n&emsp;&emsp;\u6211\u4eec\u8fd8\u6709\u4e9b\u95ee\u9898\u9700\u8981\u89e3\u51b3\u3002  \n&emsp;&emsp;\u7531\u4e8e\u6211\u4eec\u9700\u8981\u8f6c\u79fb\u5230\u8be2\u95ee\u6cd5\u672f\u7684\u4e00\u4e2a\u5f52\u6cd5\u672f\u540e\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u81f3\u5c11\u9700\u8981\u77e5\u9053\u8be2\u95ee\u6cd5\u672f\u5bf9\u5e94\u7684**\u6700\u957f\u5f52\u6cd5\u672f\u540e\u7f00**\u5bf9\u5e94\u7684\u72b6\u6001\u3002  \n&emsp;&emsp;\u8bbe$lst[i]$\u8868\u793a\u6cd5\u672f\u7684\u7b2c$i$\u4e2a\u5143\u7d20\u63d2\u5165\u56de\u6587\u81ea\u52a8\u673a\u540e\u7684\u5c3e\u8282\u70b9\u3002\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u662f**\u4ee5$i$\u7ed3\u5c3e\u7684\u6700\u957f\u5f52\u6cd5\u672f**\u3002\u6211\u4eec\u9700\u8981\u627e\u5230\u7684\u5b50\u6cd5\u672f\u5fc5\u7136\u662f$lst[i]$\u5bf9\u5e94\u7684\u6cd5\u672f\u7684\u5f52\u6cd5\u672f\u540e\u7f00\uff0c\u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u7684\u72b6\u6001\u662f$lst[i]$\u5728$fail$\u6811\u4e0a\u7684**\u4e00\u4e2a\u7956\u5148**\uff0c\u6ee1\u8db3**\u8fd9\u4e2a\u72b6\u6001\u662f\u7956\u5148\u4e2d\u7b2c\u4e00\u4e2a\u6ee1\u8db3$len\\le r-l+1$\u7684\u72b6\u6001**\u3002  \n&emsp;&emsp;\u7531\u4e8e$fail$\u6811\u4e0a\u4ece\u7956\u5148\u5230\u5b50\u5b59\u7684$len$\u663e\u7136\u5b58\u5728\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u9884\u5904\u7406\u6811\u4e0a\u500d\u589e\u6570\u7ec4\uff0c\u518d\u5728\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u8fdb\u884c\u6811\u4e0a\u500d\u589e\u3002  \n&emsp;&emsp;\u4e0b\u4e00\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u5728\u5f3a\u8c03\uff0c\u6211\u4eec\u9700\u8981\u8d70\u5230\u7684\u72b6\u6001\u662f\u76ee\u6807\u6cd5\u672f\u7684\u4e00\u4e2a**\u5f52\u6cd5\u672f\u540e\u7f00**\u3002\u4e3a\u4ec0\u4e48\u4e0d\u662f\u6700\u957f\u7684\u5462\uff1f\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a  \n```\nacbabcb\n2\n1 10 10 2 1\n1\n2 5\n```\n&emsp;&emsp;\u5982\u679c\u8d70\u5230\u6700\u957f\u7684\u5f52\u6cd5\u672f\u540e\u7f00$'bab'$\uff0c\u90a3\u4e48\u6700\u5c11\u65f6\u95f4\u82b1\u8d39\u4e3a$10$\uff1b\u800c\u5982\u679c\u5148\u4e24\u6b21 \" \u5149\u5f52 \" \u64cd\u4f5c\u8d70\u5230$b$\uff0c\u518d\u8fdb\u884c\u4e09\u6b21 \" \u5149\u5f0b \" \u64cd\u4f5c\uff0c\u82b1\u8d39\u4ec5\u6709$5$\u3002  \n&emsp;&emsp;\u8fd9\u662f\u7531\u4e8e \" \u5149\u5f0b \" \u64cd\u4f5c\u4e0d\u5728\u6211\u4eec\u7684\u56fe\u7684\u8f6c\u79fb\u4e0a\u9762\u5bfc\u81f4\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5355\u72ec\u63d0\u51fa\u6765\u505a\u4e00\u4e0b\u8f6c\u79fb\u5c31\u597d\u4e86\u3002\u6839\u636e\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u66f4\u65b0\u65b9\u5411\u662f$fail$\u6811\u4e0a\u4ece\u7956\u5148\u5230\u5b50\u5b59\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0a\u4e00\u4e2a DP \uff0c\u8fdb\u884c\u8f6c\u79fb\u3002  \n&emsp;&emsp;\u8bbe$f(x)$\uff1a\u901a\u8fc7\u4e94\u79cd\u64cd\u4f5c\u5230\u8fbe\u81ea\u5df1\u7684\u6700\u5c11\u82b1\u8d39\u3002  \n&emsp;&emsp;\u8bbe$d(x)$\u8868\u793a\u4e4b\u524d\u6c42\u51fa\u7684\u5230$x$\u7684\u5355\u6e90\u6700\u77ed\u8def\u8ddd\u79bb\u3002\u5373\u53ef\u5f97\u5230$f$\u7684\u8f6c\u79fb\u4e3a\uff1a \n$$f(x)=\\min\\{d(x),f(fail[x])+E\\times(len[x]-len[fail[x]])\\}$$  \n&emsp;&emsp;\u6700\u540e\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u5982\u679c\u521d\u59cb\u6cd5\u672f\u4e0d\u662f\u4e00\u4e2a\u5f52\u6cd5\u672f\uff0c\u90a3\u4e48\u6211\u4eec\u4ece$lst[|S|]$\u5f00\u59cb\u8fdb\u884c\u7684\u6700\u77ed\u8def\uff0c\u5b9e\u9645\u4e0a\u90fd\u5c11\u7b97\u4e86\u4e00\u4e2a$A$\u7684\u65f6\u95f4\u3002\u7531\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6700\u5f00\u59cb\u53ea\u80fd\u8fdb\u884c \" \u5149\u5f52 \" \u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6700\u77ed\u8def\u52a0\u4e0a$A$\u5c31\u662f\u6b63\u786e\u7684\u4e86\u3002\u800c\u521d\u59cb\u6cd5\u672f\u662f\u5f52\u6cd5\u672f\u7684\u6ca1\u6709\u95ee\u9898\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\nusing namespace std;\n\ntypedef long long LL;\n\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\nconst int MAXN = 1e5 + 5, MAXE = 1.5e6 + 5, MAXLOG = 20;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXE << 1];\n\nstruct node\n{\n\tLL dist; int u;\n\tnode() {}\n\tnode( const int U, const LL D ) { u = U, dist = D; }\n\tbool operator < ( const node & b ) const { return ! ( dist < b.dist ); }\n};\n\npriority_queue<node> q;\n\nint fa[MAXN][MAXLOG] = {};\nLL head[MAXN * 2], dist[MAXN * 2], f[MAXN * 2];\nint ch[MAXN][55], fail[MAXN], len[MAXN], fath[MAXN];\nchar S[MAXN];\nint last[MAXN];\nint N, M, A, B, C, D, E, K, lg2, cnt, tot, lst;\nbool visited[MAXN * 2];\n\nint HASH( const int x, const int l ) { return x + ( l - 1 ) * tot; }\nint id( const char c ) { return 'A' <= c && c <= 'Z' ? ( c - 'A' ) : ( c - 'a' + 26 ); } \n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from], Graph[cnt].w = W;\n\thead[from] = cnt;\n}\n\nvoid addE1( const int from, const int to, const int W ) { addEdge( from, to, W ), addEdge( to, from, 0 ); }\n\nvoid build( const char *s )\n{\n\tint x, p, cur;\n\tN = strlen( s + 1 );\n\tfail[0] = ++ tot, len[1] = -1;\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tx = id( S[i] );\n\t\twhile( S[i] ^ S[i - len[lst] - 1] ) lst = fail[lst];\n\t\tif( ! ch[lst][x] )\n\t\t{\n\t\t\tlen[cur = ++ tot] = len[lst] + 2, p = fail[lst];\n\t\t\twhile( S[i] ^ S[i - len[p] - 1] ) p = fail[p];\n\t\t\tfail[cur] = ch[p][x], ch[lst][x] = cur;\n\t\t\tfath[cur] = lst;\n\t\t}\n\t\tlast[i] = lst = ch[lst][x];\n\t}\n}\n\n//\u5efa\u81ea\u52a8\u673a\n\nvoid init()\n{\n\tfor( int i = 2, v ; i <= tot ; i ++ )\n\t{\n\t\tif( fail[i] > 1 ) addEdge( i, fail[i], A ), addEdge( fail[i], i, B );\n\t\telse addEdge( i, 1, A ), addEdge( 1, i, B );\n\t\taddE1( HASH( i, 1 ), HASH( i, 2 ), D );\n\t\tfor( int j = 1, k = fath[i] ; j <= K && k > 1 ; j ++, k = fath[k] )\n\t\t\taddEdge( i, k, C );\n\t\tfor( int j = 0 ; j < 52 ; j ++ ) \n\t\t\tif( v = ch[i][j] )\n\t\t\t\taddEdge( HASH( i, 2 ), HASH( v, 2 ), 0 );\n\t}\n\tlg2 = log2( N );\n\tfor( int i = 2 ; i <= tot ; i ++ ) fa[i][0] = MAX( fail[i], 1 );\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 2 ; i <= tot ; i ++ )\n\t\t\tfa[i][j] = fa[fa[i][j - 1]][j - 1];\n}\n\n//\u5efa\u56fe\n\nvoid Dijkstra( const int S )\n{\n\twhile( ! q.empty() ) q.pop();\n\tfor( int i = 0 ; i <= tot * 2 ; i ++ ) dist[i] = INF;\n\tq.push( node( S, dist[S] = 0 ) );\n\tint u, v, w;\n\twhile( ! q.empty() )\n\t{\n\t\tu = q.top().u; q.pop();\n\t\tif( visited[u] ) continue; visited[u] = true;\n\t\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t\t\tif( ! visited[v = Graph[i].to] && dist[v] > dist[u] + ( w = Graph[i].w ) )\n\t\t\t\tq.push( node( v, dist[v] = dist[u] + w ) );\n\t}\n}\n\nint find( int p, const int l )\n{\n\tif( len[p] <= l ) return p;\n\tfor( int j = lg2 ; ~ j ; j -- )\n\t\tif( fa[p][j] > 1 && len[fa[p][j]] > l )\n\t\t\tp = fa[p][j];\n\treturn fa[p][0];\n}\n\nbool palidrome()\n{\n\tfor( int i = 1 ; i <= N ; i ++ ) if( S[i] ^ S[N - i + 1] ) return false;\n\treturn true;\n}\n\nint main()\n{\n\tint Q;\n\tscanf( \"%s\", S + 1 );\n\tread( K );\n\tread( A ), read( B ), read( C ), read( D ), read( E );\n\tbuild( S );\n\tinit();\n\tDijkstra( lst );\n\tf[0] = INF, f[1] = dist[1];\n    //\u8fd9\u91cc\u7684\u5199\u6cd5\u6709\u70b9\u70b9\u95ee\u9898\n    //\"\u5c06f[0]\u8d4b\u4e3a\u65e0\u7a77\u5927\"\u5b9e\u9645\u4e0a\u662f\u548c\"\u8f6c\u79fb\u65f6\u5224\u63890\u548c-1\u6839\"\u662f\u4e00\u6837\u7684\uff08fail\u4e0d\u4f1a\u6307\u54111\uff09\n\tfor( int i = 2 ; i <= tot ; i ++ ) \n\t\tf[i] = MIN( dist[i], f[fail[i]] + 1ll * ( len[i] - len[fail[i]] ) * E );\n\tread( Q );\n\tbool flag = palidrome();\n\tint l, r;\n\twhile( Q -- )\n\t{\n\t\tread( l ), read( r );\n\t\tif( l == 1 && r == N ) { puts( \"0\" ); continue; }\n\t\tint p = find( last[r], r - l + 1 );\n\t\twrite( f[p] + 1ll * ( r - l + 1 - len[p] ) * E + ( ! flag ) * A ), putchar( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1587100853,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[GLR1]\u8981\u6709\u5149"
    },
    {
        "content": "~~\u4e00\u9053\u9605\u8bfb\u7406\u89e3\u597d\u9898~~\u3002\n\n\u524d\u4e24\u4e2a\u64cd\u4f5c\u90fd\u4e0e\u6700\u957f\u56de\u6587\u540e\u7f00\u6709\u5173\uff0c\u8fd9\u4f7f\u6211\u4eec\u60f3\u5230\u56de\u6587\u81ea\u52a8\u673a\u3002\n\n\u8003\u8651\u5efa\u51fa\u539f\u4e32\u7684\u56de\u6587\u81ea\u52a8\u673a\uff0c\u5bf9\u4e8e\u5728\u56de\u6587\u81ea\u52a8\u673a\u7684\u4f4d\u7f6e\u4e3a $x$\uff0c\u64cd\u4f5c\u4e00\u5c31\u662f\u8df3\u5230 $fail_x$\uff0c\u4ee3\u4ef7\u4e3a $A$\uff0c\u64cd\u4f5c\u4e8c\u5c31\u662f\u4ece $fail_x$ \u8df3\u5230 $x$\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u66b4\u529b\u8fde $fail$ \u5373\u53ef\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u56db\uff0c\u5982\u679c\u66b4\u529b\u8fde\u8fb9\u4f1a\u5c06\u8fb9\u6570\u5361\u6210 $O(n^2)$\uff0c\u8003\u8651\u4f18\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $i$ \u5efa\u7acb\u865a\u70b9 $i'$\uff0c\u8fde\u8fb9 $i\\to i'$\uff0c\u4ee3\u4ef7\u4e3a $D$\uff0c\u8fde\u8fb9 $i'\\to i$\uff0c\u4ee3\u4ef7\u4e3a $0$\uff0c\u8fde\u8fb9 $i'\\to j'$\uff08\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e2d\u5b58\u5728\u8fb9 $i\\to j$\uff09\uff0c\u4ee3\u4ef7\u4e3a $0$\u3002\u5bf9\u4e8e\u64cd\u4f5c\u4e94\uff0c\u6700\u540e\u7edf\u4e00\u8ba1\u7b97\u3002\n\n\u8bbe $dist_i$ \u4e3a\u4ece\u539f\u4e32\u53d8\u6210\u8282\u70b9 $i$ \u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c0f\u4ee3\u4ef7\uff08\u53ea\u4f7f\u7528\u64cd\u4f5c\u4e00\u81f3\u56db\uff09\uff0c\u660e\u663e\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u539f\u4e32\u4e0d\u4e3a\u56de\u6587\u4e32\u65f6\uff0c$last$ \u7684\u4ee3\u4ef7\u4e3a $A$\uff0c\u5426\u5219\u4e3a $0$\uff0c$last$ \u8868\u793a\u539f\u4e32\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u4ee3\u8868\u7684\u8282\u70b9\uff09\u3002\u6839\u636e\u4e0a\u6587\u7684\u8fde\u8fb9\u65b9\u5f0f\u8dd1\u6700\u77ed\u8def\u5373\u53ef\uff0c\u4ece\u539f\u4e32\u53d8\u6210\u8282\u70b9 $i$ \u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c0f\u4ee3\u4ef7 $f_i=\\min(dist_i,dist_{fail_i}+(len_i-len_{fail_i})\\times E)$\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u627e\u5230\u8be5\u5b50\u4e32 $T$ \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u4ee3\u8868\u7684\u8282\u70b9 $x$\uff0c\u5c06\u539f\u4e32 $S$ \u53d8\u6210 $T$ \u7684\u4ee3\u4ef7\u4e3a $f_x+(|T|-len_x)\\times E$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N=4e5+1;\nll cA, cB, cC, cD, cE, k;\nint anc[N][18];\nll dist[N], f[N];\nint chk(char c){\n    if(c>='a'&&c<='z') return c-'a';\n    else return 26+c-'A';\n}\nstruct Graph{\n    int h[N], nt[N<<3], to[N<<3], cnt, vis[N];\n    ll w[N<<3];\n    void add_edge(int u, int v, ll val){\n        nt[++cnt]=h[u], h[u]=cnt, to[cnt]=v, w[cnt]=val;\n    }\n    void dij(int pos, ll val){\n        memset(dist, 63, sizeof dist);\n        priority_queue<pair<ll, int>> q;\n        q.push({-val, pos}), dist[pos]=val;\n        while(!q.empty()){\n            int u=q.top().second; q.pop();\n            if(vis[u])continue;\n            vis[u]=1;\n            for(int i=h[u]; i; i=nt[i]){\n                int v=to[i];\n                if(dist[v]>dist[u]+w[i])\n                    dist[v]=dist[u]+w[i], q.push({-dist[v], v});\n            }\n        }\n    }\n}g;\nstruct PAM{\n    int ch[N][55], fail[N], len[N], S[N];\n    int cnt, tot, last, fa[N], Last[N];\n    void init(){\n        cnt=1, last=0, tot=0, S[0]=-1;\n        len[0]=0, len[1]=-1, fail[0]=1;\n    }\n    void ins(int c){\n        int p=last;\n        S[++tot]=c+1;\n        while(S[tot]!=S[tot-len[p]-1]) p=fail[p];\n        if(!ch[p][c]){\n            int res=++cnt;\n            len[res]=len[p]+2;\n            int q=fail[p];\n            while(S[tot]!=S[tot-len[q]-1]) q=fail[q];\n            fail[res]=ch[q][c], ch[p][c]=res;\n        }\n        last=ch[p][c];\n        Last[tot]=last;\n        fa[last]=p;\n        return;\n    }\n    void build(char *s){\n        init();\n        int ll=strlen(s+1);\n        for(int i=1; i<=ll; i++)\n            ins(chk(s[i]));\n        for(int i=2; i<=cnt; i++){\n            if(fail[i]>1) g.add_edge(i, fail[i], cA), g.add_edge(fail[i], i, cB);\n            else          g.add_edge(i, 1, cA),       g.add_edge(1, i, cB);\n            for(int j=1, pa=fa[i]; j<=k&&pa>1; j++, pa=fa[pa]) g.add_edge(i, pa, cC);\n            g.add_edge(i, i+cnt, cD), g.add_edge(i+cnt, i, 0);\n            for(int j=0; j<55; j++) if(ch[i][j]) g.add_edge(i+cnt, ch[i][j]+cnt, 0);\n        }\n        for(int i=2; i<=cnt; i++) anc[i][0]=max(fail[i], 1);\n        for(int j=1; j<=17; j++)\n            for(int i=2; i<=cnt; i++)\n                anc[i][j]=anc[anc[i][j-1]][j-1];\n        g.dij(last, len[last]==tot?0:cA);\n        f[0]=1e15;\n        f[1]=dist[1];\n        for(int i=2; i<=cnt; i++)\n            f[i]=min(dist[i], f[fail[i]]+1ll*cE*(len[i]-len[fail[i]]));\n    }\n    int find(int x, int l){\n        if(len[x]<=l) return x;\n        for(int i=17; i>=0; i--)\n            if(anc[x][i]>1&&len[anc[x][i]]>l) x=anc[x][i];\n        return anc[x][0];\n    }\n    ll get_ans(int l, int r){\n        if(l==1&&r==tot)return 0;\n        int x=find(Last[r], r-l+1);\n        return f[x]+1ll*(r-l+1-len[x])*cE;\n    }\n}pam;\nchar s[N];\nint main(){\n    scanf(\"%s\", s+1);\n    scanf(\"%lld %lld %lld %lld %lld %lld\", &k, &cA, &cB, &cC, &cD, &cE);\n    pam.build(s);\n    int q;\n    scanf(\"%d\", &q);\n    while(q--){\n        int l, r;\n        scanf(\"%d %d\", &l, &r);\n        printf(\"%lld\\n\", pam.get_ans(l, r));\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1684724514,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "P6396"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/LaoMang-no-blog/p/16445964.html)\n\n---\n\n[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/P6396)\n\n\u53ef\u4ee5\u5148\u7ed9\u4e00\u4efd\u5f62\u5f0f\u5316\u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u4e32 $S_0$ \u548c\u53c2\u6570 $m$\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e0b $5$ \u79cd\u64cd\u4f5c\uff1a\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u4e32 $S$\uff0c\u6784\u9020\u4e32 $T$ \u6ee1\u8db3 $T$ \u4e3a $S$ \u7684**\u6700\u957f\u56de\u6587\u540e\u7f00**\uff0c\u5e76\u5c06 $S$ \u8d4b\u503c\u4e3a $T$\uff0c\u4ee3\u4ef7\u4e3a $A$\u3002\n2. \u5bf9\u4e8e\u4e00\u4e2a**\u56de\u6587\u4e32** $S$\uff0c\u6784\u9020\u4e32 $T$ \u6ee1\u8db3 $S$ \u4e3a $T$ \u7684**\u6700\u957f\u56de\u6587\u540e\u7f00**\u4e14 $T$ \u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c\u5e76\u5c06 $S$ \u8d4b\u503c\u4e3a $T$\uff0c\u4ee3\u4ef7\u4e3a $B$\u3002\n3. \u5bf9\u4e8e\u4e00\u4e2a**\u56de\u6587\u4e32** $S$\uff0c\u6784\u9020\u4e32 $T$ \u6ee1\u8db3\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a**\u957f\u5ea6\u81f3\u591a\u4e3a $m$** \u7684\u4e32 $a$\uff0c\u4f7f\u5f97 $S=a+T+a^R$\uff0c\u5e76\u5c06 $S$ \u8d4b\u503c\u4e3a $T$\uff0c\u4ee3\u4ef7\u4e3a $C$\uff0c\u5176\u4e2d $a^R$ \u8868\u793a $a$ \u7684\u53cd\u4e32\u3002\n4. \u5bf9\u4e8e\u4e00\u4e2a**\u56de\u6587\u4e32** $S$\uff0c\u6784\u9020\u4e32 $T$ \u6ee1\u8db3\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u4e32 $a$\uff0c\u4f7f\u5f97 $T=a+S+a^R$ \u4e14 $T$ \u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c\u5e76\u5c06 $S$ \u8d4b\u503c\u4e3a $T$\uff0c\u4ee3\u4ef7\u4e3a $D$\u3002\n5. \u5bf9\u4e8e\u4e00\u4e2a\u4e32 $S$\uff0c\u6784\u9020\u4e32 $T$ \u6ee1\u8db3\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a**\u5b57\u7b26** $a$\uff0c\u4f7f\u5f97 $T=a+S$ \u4e14 $T$ \u4e3a $S_0$ \u7684\u5b50\u4e32\uff0c\u5e76\u5c06 $S$ \u8d4b\u503c\u4e3a $T$\uff0c\u4ee3\u4ef7\u4e3a $E$\uff0c\u7279\u522b\u7684\uff0c\u8fdb\u884c\u8fc7 $5$ \u64cd\u4f5c\u540e\u4e0d\u80fd\u518d\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\n\n\u6bcf\u6b21\u7ed9\u5b9a\u4e00\u7ec4 $l,r$\uff0c\u4ee4 $T$ \u4e3a $S_0$ \u7684 $[l,r]$ \u8303\u56f4\u5185\u7684\u5b57\u7b26\u53d6\u51fa\u5f62\u6210\u7684\u65b0\u4e32\uff0c\u8be2\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4ee3\u4ef7\u80fd\u4f7f $S_0$ \u53d8\u4e3a $T$\u3002\n\n\u9996\u5148\u53d1\u73b0 $5$ \u64cd\u4f5c\u72ec\u7acb\u4e8e\u5176\u4ed6\u64cd\u4f5c\u4e4b\u5916\uff0c\u5176\u5b83\u56db\u4e2a\u64cd\u4f5c\u90fd\u57fa\u4e8e\u521d\u59cb\u4e32\u7684\u56de\u6587\u5b50\u4e32\uff0c\u8fd9\u63d0\u793a\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 $S_0$ \u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u60f3\u5230\u56de\u6587\u81ea\u52a8\u673a\u3002\n\n\u5148\u5c06 $S_0$ \u5efa\u6210\u56de\u6587\u81ea\u52a8\u673a\uff0c\u73b0\u5728\u6211\u4eec\u601d\u8003\u4e94\u4e2a\u64cd\u4f5c\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u5bf9\u5e94\u7684\u610f\u4e49\u3002\n\n\u9996\u5148\u5c31\u50cf\u4e0a\u6587\u6240\u8bf4\u7684\uff0c$5$ \u64cd\u4f5c\u72ec\u7acb\u4e8e\u522b\u7684\u64cd\u4f5c\u4e4b\u5916\uff0c\u5927\u6982\u4e5f\u53ef\u4ee5\u60f3\u8c61\u662f\u600e\u4e48\u7528\u7684\uff0c\u5c31\u662f\u5728\u751f\u6210\u76ee\u6807\u4e32\u7684\u56de\u6587\u540e\u7f00\u4ee5\u540e\u5728\u524d\u9762\u76f4\u63a5\u63a5\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\u522b\u7684\u64cd\u4f5c\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u7684\u610f\u4e49\u4e86\u3002\n\n\u9996\u5148\u770b\u5230\u6700\u957f\u56de\u6587\u540e\u7f00\u5e94\u8be5\u80fd\u5f88\u81ea\u7136\u5730\u60f3\u5230\u56de\u6587\u81ea\u52a8\u673a\u7684\u5931\u914d\u6307\u9488\uff0c$1$ \u64cd\u4f5c\u5bf9\u5e94\u8fb9 $\\langle p,\\mathrm{fail}_p\\rangle$\uff0c$2$ \u64cd\u4f5c\u5bf9\u5e94 $\\langle\\mathrm{fail}_p,p\\rangle$\uff0c\u7136\u540e\u53e6\u5916\u4e24\u4e2a\u64cd\u4f5c\u5176\u5b9e\u4e5f\u5f88\u660e\u663e\uff0c\u5728\u4e32\u5de6\u53f3\u4e24\u8fb9\u540c\u65f6\u64cd\u4f5c\u6b63\u597d\u5bf9\u5e94\u56de\u6587\u81ea\u52a8\u673a\u7684\u8f6c\u79fb\u8fb9\uff0c\u56e0\u4e3a $m$ \u5f88\u5c0f\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u5e94\u5411\u7236\u4eb2\u66b4\u529b\u8fde\u8fb9\u6700\u591a\u4e5f\u6ca1\u51e0\u6761\uff0c\u4f46\u662f\u5176\u4e2d\u6700\u68d8\u624b\u7684\u5c31\u662f $4$ \u64cd\u4f5c\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u5411\u56de\u6587\u81ea\u52a8\u673a\u4e2d\u7684\u5b50\u6811\u91cc\u7684\u6bcf\u4e2a\u70b9\u8fde\u8fb9\uff0c\u5728\u6781\u9650\u60c5\u51b5\u4e0b\u663e\u7136\u662f\u4f1a\u88ab\u5361\u7684\uff0c\u6240\u4ee5\u5f97\u60f3\u70b9\u529e\u6cd5\u3002\n\n\u5176\u5b9e\u96be\u5ea6\u5e76\u4e0d\u662f\u5f88\u9ad8\uff0c\u8fd9\u79cd\u5f80\u6574\u4e2a\u96c6\u5408\u8fde\u8fb9\u7ecf\u5178\u5957\u8def\u662f\u5efa\u865a\u70b9\uff0c\u6709\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0d\u5982\u5206\u5757\u4f18\u5316\u5efa\u56fe\u3001\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e4b\u7c7b\u7684\uff0c\u8fd9\u9898\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed9\u6bcf\u4e2a\u70b9\u5efa\u4e00\u4e2a\u865a\u70b9\uff0c\u5982\u679c\u4e24\u70b9\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u6709\u8fde\u8fb9\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u865a\u70b9\u4ece\u7236\u4eb2\u5f80\u513f\u5b50\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $0$\uff0c\u4ece\u539f\u70b9\u5411\u865a\u70b9\u8fde\u6709\u8fb9\u6743\u7684\u8fb9\uff0c\u865a\u70b9\u5411\u539f\u70b9\u8fde\u8fb9\u6743\u4e3a $0$\uff0c\u8fd9\u6837\u539f\u6765\u5230\u5b50\u6811\u4e2d\u7684\u8fb9\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u8fdb\u5165\u865a\u70b9\u540e\u8d70\u5230\u76ee\u6807\u70b9\u5bf9\u5e94\u7684\u865a\u70b9\u518d\u8d70\u56de\u6765\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u662f\u7b49\u4ef7\u7684\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5148\u4ece\u6574\u4e32\u7684\u72b6\u6001\u8fdb\u5165\u56de\u6587\u81ea\u52a8\u673a\uff08\u5982\u679c\u6574\u4e2a\u4e32\u4e0d\u662f\u56de\u6587\u4e32\u8fd8\u8981\u7528\u4e00\u6b21 $1$ \u64cd\u4f5c\uff09\uff0c\u518d\u8dd1\u5230\u76ee\u6807\u4e32\u5bf9\u5e94\u7684\u4e00\u4e2a\u56de\u6587\u540e\u7f00\uff0c\u518d\u7528 $5$ \u64cd\u4f5c\u53d8\u6210\u76ee\u6807\u4e32\u3002\n\n\u540c\u65f6\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\uff0c\u6ce8\u610f\u5230\u6700\u540e\u662f**\u8dd1\u5230\u76ee\u6807\u4e32\u5bf9\u5e94\u7684\u4e00\u4e2a\u56de\u6587\u540e\u7f00**\u800c\u4e0d\u662f\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u56e0\u4e3a\u5982\u679c $2$ \u4ee3\u4ef7\u8f83\u9ad8\u800c $5$ \u4ee3\u4ef7\u8f83\u4f4e\u7684\u8bdd\u4e5f\u8bb8\u6700\u540e\u7528 $5$ \u4ee3\u66ff $2$ \u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u8be2\u95ee\u7684\u590d\u6742\u5ea6\uff0c\u9884\u5904\u7406 $d_i$ \u8868\u793a\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u4ece\u6700\u540e\u72b6\u6001\u5230\u7f16\u53f7\u4e3a $i$ \u7684\u8282\u70b9**\u53ea\u7528\u524d $4$ \u79cd\u64cd\u4f5c**\u6240\u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\uff0c$f_i$ \u8868\u793a\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u4ece\u6700\u540e\u72b6\u6001\u5230\u7f16\u53f7\u4e3a $i$ \u7684\u8282\u70b9\u6240\u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\uff0c$d_i$ \u53ef\u4ee5\u7528 Dijkstra \u76f4\u63a5\u5904\u7406\uff0c$f_i$ \u53ef\u4ee5 dp \u89e3\u51b3\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a $f_i=\\min\\{d_i,f_{\\mathrm{fail}_p}+\\operatorname{len}(p)-\\operatorname{len}(\\textrm{fail}_p)\\}$\u3002\n\n\u6700\u540e\u5c31\u662f\u627e\u5230\u533a\u95f4 $[l,r]$ \u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u53ef\u4ee5\u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u500d\u589e\u8df3 $\\textrm{fail}$ \u6307\u9488\uff0c\u627e\u5230\u4ee5 $r$ \u7ed3\u5c3e\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $r-l+1$ \u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u3002\n\n\u6574\u4f53\u662f\u4e00\u9053\u975e\u5e38\u7efc\u5408\u7684\u9898\u76ee\uff0c\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u8f83\u591a\uff0c\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n[\u4ee3\u7801](https://www.cnblogs.com/LaoMang-no-blog/p/16445964.html)",
        "postTime": 1657063994,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "[luogu6396] \u8981\u6709\u5149 \u9898\u89e3"
    }
]