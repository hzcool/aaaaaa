[
    {
        "content": "\u55ef\uff0c\u4e00\u9053\u770b\u8d77\u6765\u5f88\u6076\u5fc3\u7684\u6a21\u62df\uff0c\u5b9e\u9645\u4e0a\u505a\u8d77\u6765\u5927\u90e8\u5206\u5206\u8fd8\u662f\u5f88\u5bb9\u6613\u62ff\u5230\u7684\u3002\n\n\u4f46\u8c8c\u4f3c\u6bd4\u8d5b\u7684\u65f6\u5019\u5f88\u5c11\u6709\u4eba\u505a\uff0c\u88ab\u9898\u9762\u957f\u5ea6\u5413\u4f4f\u4e86\u5417\uff1f\n\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c,\u653e\u5f39\u5e55\uff0c\u5f88\u7b80\u5355\u3002\n\n\u8981\u6ce8\u610f\u5982\u679c\u742a\u9732\u8bfa\u7ad9\u5728\u6709\u51b0\u7816\u7684\u4f4d\u7f6e\u653e\u5f39\u5e55\uff0c\u8fd9\u4e2a\u5f39\u5e55\u4f1a\u76f4\u63a5\u88ab\u963b\u6321\uff0c\u7b49\u4e8e\u65e0\u6548\u3002\n\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c,\u6536\u96c6\u51b0\u7816\uff0c\u66f4\u7b80\u5355\u3002\n\n\u76f4\u63a5\u904d\u5386\u4e8c\u7ef4\u5730\u56fe\u5c31\u53ef\u4ee5\u4e86\u3002\n\n20\u5206\u5230\u624b~\n\n\n\u7b2c\u4e09\u4e2a\u64cd\u4f5c\uff0c\u653e\u51b0\u7816\u3002\n\n\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u5982\u679c\u653e\u5230\u5730\u9762\u4e0a\uff0c\u8981\u628a\u51b7\u51bb\u5ea6\u5f52\u96f6\u3002\n\n30\u5206\u5230\u624b\uff0c\u771f\u5bb9\u6613\n\n\n\u7b2c\u56db\u4e2a\u64cd\u4f5c\uff0c\u62ff\u8d70\u51b0\u7816\u3002\n\n\u4e0d\u8003\u8651\u6454\u788e\u7684\u60c5\u51b5\uff0c\u975e\u5e38\u597d\u5199\uff0c\u8f7b\u677e50\u5206\u5230\u624b\n\n\u55ef,\u518d\u6765\u770b\u770b\u60c5\u51b52...\n\n\u4ec0\u4e48\uff1f\u4e0d\u662f\u8bf4\u597d\u7684\u6a21\u62df\u5417\uff1f\u600e\u4e48\u51fa\u6765\u4e2a\u627e\u8fde\u901a\u5757\uff1f\n\n\u597d\u5427\uff0c\u8fd9\u9898\u4e0d\u5b8c\u5168\u662f\u6a21\u62df\u3002\n\n\u5148\u5220\u6389\u5bf9\u5e94\u4f4d\u7f6e\u7684\u65b9\u5757\uff0c\u7136\u540e6\u904dBFS\u5bfb\u627e\u8fde\u901a\u5757\uff0c\u6ce8\u610f\u5982\u679c\u67d0\u4e00\u5757\u78b0\u5230\u4e86\u5730\u9762\u5c31\u4e0d\u7b97\u60ac\u7a7a\u8fde\u901a\u5757\u3002\n\n\n\u5927\u5bb6\u5185\u5fc3:\u8fd9\u4e48\u5feb\u5c31\u5199\u5b8c4/5\u4e86\uff0c\u8fd9\u662f\u4ec0\u4e48\u8fa3\u9e21\u9898\uff0c\u9898\u9762\u53c8\u957f\uff0c\u96be\u5ea6\u53c8\u6c34\u3002\n\n\u51fa\u9898\u4eba\u7684\u5185\u5fc3\u662f\u6ed1\u7a3d\u7684\n\n\n\u90a3\u4e48\u6765\u770b\u7b2c\u4e94\u4e2a\u64cd\u4f5c,\u76d6\u5c4b\u9876\n\n\\*\u9996\u5148\u5224\u65ad\u51b0\u7816\u662f\u5426\u4e0d\u8db3\uff0c\u76f4\u63a5\u904d\u5386\u5373\u53ef\uff0c\u6709\u5c0f\u7ec6\u8282\u3002\n\n\\*\u4e0b\u6765\u5224\u65ad\u5185\u90e8\u7a7a\u95f4\u662f\u5426\u4e0d\u8db3\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u5c4b\u9876\u592a\u4f4e\uff0c\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u56db\u9762\u5899\u6324\u5230\u4e00\u8d77\uff0c\u6ca1\u6709\u5185\u90e8\u7a7a\u95f4\u3002\n\n\\*\u7136\u540e\u8f93\u51fa\u623f\u5c4b\u5185\u5916\u6709\u591a\u5c11\u4e2a\u51b0\u7816\uff0c\u6ce8\u610f\u5c4b\u9876\u5efa\u6210\u4ee5\u540e\uff0c\u9ad8\u4e8e\u5c4b\u9876\u7684\u7b97\u4f5c\u623f\u5c4b\u5916\u90e8\uff0c\u5982\u679c\u662f\u4e4b\u524d\u653e\u51b0\u7816\n\n\u65f6\u7edf\u8ba1\uff0c\u8fd9\u91cc\u5c31\u8981\u8df3\u5751\u4e86\u3002\n\n\\*\u63a5\u4e0b\u6765\u5224\u65ad\u79fb\u9664\u591a\u4f59\u51b0\u7816\u65f6\u5c4b\u9876\u4f1a\u4e0d\u4f1a\u584c\n\n\u548c\u4e4b\u524d\u4e00\u6837\uff0cBFS\u5373\u53ef\u3002\n\n\\*\u63a5\u4e0b\u6765\u4e00\u4e2a\u5927\u5751\u6765\u4e86\uff0c\u4fee\u590d\u5899\u58c1\u3002\n\n\u5176\u4ed6\u6ca1\u95ee\u9898\uff0c\u91cd\u70b9\u662f\u56db\u4e2a\u89d2\u3002\n\n\u5982\u679c\u95e8\u6ca1\u9009\u5728\u89d2\u843d\u65c1\u8fb9\uff0c\u90a3\u4e48\u5982\u679c\u56db\u4e2a\u89d2\u6709\u6b8b\u7f3a\uff0c\u6839\u672c\u4e0d\u7528\u7ba1\u5b83\uff0c\u56e0\u4e3a\u770b\u4e0d\u5230\u3002\n\n\u5982\u679c\u95e8\u9009\u5230\u89d2\u843d\u65c1\u8fb9\uff0c\u7f3a\u89d2\u5728\u623f\u5c4b\u91cc\u9762\u662f\u6709\u53ef\u80fd\u88ab\u770b\u5230\u7684\u3002\n\n\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def:\u67e5\u8868\u3002\n\n\u6211\u4eec\u7528\u4ee5\u4e0b\u77e9\u9635\n\na b\n\nc d\n\n\u6765\u8868\u793a\u4e00\u5835\u5899\u89d2\u843d\u7684\u60c5\u51b5\u3002\u5047\u8bbea\u548cc\u8868\u793a\u89d2\u65b9\u5757\uff0cb\u548cd\u8868\u793a\u76f8\u90bb\u7684\u8fb9\u65b9\u5757\u30020\u8868\u793a\u6ca1\u6709\u65b9\u5757\uff0c1\u8868\u793a\u6709\u65b9\u5757\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\n\n1 0\n\n0 0\n\n\u7684\u60c5\u51b5\uff0c\u663e\u7136\u5728\u623f\u5b50\u5185\u80fd\u770b\u5230c\u7684\u7f3a\u635f\uff0c\u6240\u4ee5\u8981\u5c06c\u586b\u4e0a\u3002\n\n\u800c\u5bf9\u4e8e\n\n1 0\n\n0 1\n\n\u7684\u60c5\u51b5\uff0c\u65e0\u9700\u5bf9c\u8fdb\u884c\u586b\u8865\uff0c\u56e0\u4e3ad\u906e\u4f4f\u4e86c\u4f7f\u5f97c\u5e76\u4e0d\u53ef\u89c1\u3002\n\n\u53ef\u4ee5\u7528\u65b9\u5757\u6446\u4e00\u6446\uff0c\u6bd4\u8f83\u76f4\u89c2\u3002\n\n*#\u8bf7\u6ce8\u610f\u4e00\u4e2a\u5f00\u95e8\u4f4d\u7f6e\u6709\u53ef\u80fd\u548c\u4e24\u4e2a\u89d2\u90fd\u76f8\u90bb\u3002*\n\n\u9009\u62e9\u5f00\u95e8\u7684\u4f4d\u7f6e\u65f6\u4e0d\u59a8\u91c7\u53d6\u4f30\u4ef7\u7684\u65b9\u6cd5\uff0c\u4ee5\u5f00\u95e8\u4f4d\u7f6e\u7f3a\u5c11\u7684\u51b0\u7816\u4e2a\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57(\u8d8a\u5927\u4ef7\u503c\u8d8a\u9ad8)\uff0c\u4fee\u8865\u89d2\u82b1\u8d39\u7684\u51b0\u7816\u6570\u91cf\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57(\u8d8a\u5c0f\u4ef7\u503c\u8d8a\u9ad8)\uff0c\u662f\u5426\u5728\u6b63\u4e2d\u95f4\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57(\u662f\u5219\u4ef7\u503c\u66f4\u9ad8)\u6392\u5e8f\uff0c\u9009\u62e9\u4ef7\u503c\u6700\u9ad8\u7684\u4f4d\u7f6e\u6765\u5f00\u95e8\u5373\u53ef\u3002\n\n\\*\u5224\u65ad\u6709\u6ca1\u6709\u95e8\uff0c\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u65f6\u5e94\u8be5\u987a\u4fbf\u5c31\u5f04\u4e86\u5427\uff0c\u6ca1\u5565\u5751\u70b9\u3002\n\n\\*\u5224\u65ad\u586b\u8865\u524d\u5899\u58c1\u662f\u5426\u5b8c\u6574\uff0c\u5982\u679c\u521a\u624d\u4fee\u590d\u5899\u58c1\u7684\u65f6\u5019\u6ca1\u6ce8\u610f\u5230\u90a3\u4e2a\u5927\u5751\uff0c\u8fd9\u91cc\u5c31\u4f1a\u8df3\u8fdb\u53bb\n\n\\*\u5224\u65ad\u56db\u89d2\u7684\u5b8c\u6574\u7a0b\u5ea6\uff0c\u8fd8\u662f\u4e00\u6837\uff0c\u4fee\u590d\u5899\u58c1\u7684\u65f6\u5019\u5982\u679c\u8df3\u5751\u4e86\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e5f\u8df3\u5751\u4e86\n\n\\*\u8f93\u51fa\u5269\u4f59\u51b0\u7816\u6570\u91cf\uff0c\u53ea\u8981\u524d\u9762\u90fd\u5199\u5bf9\u4e86\u8fd9\u91cc\u5e94\u8be5\u6ca1\u95ee\u9898\u3002\n\n\\*\u5224\u65ad\u662f\u5426\u5b8c\u7f8e\u5efa\u9020\uff0c\u540c\u4e0a\u3002\n\n\u597d\u5566\uff0c\u8fd9\u4e2a\u9898\u5c31\u7ed3\u675f\u4e86\uff0c\u5df2\u7ecf\u6709\u5f88\u591a\u9898\u89e3\u4e86\uff0c\u6211\u81ea\u5df1\u4ee3\u7801\u5199\u5f97\u592a\u4e11\u5c31\u4e0d\u653e\u4e86\u3002\n\n(std\u5df2\u7ecf\u88abhack\u6389\u597d\u51e0\u6b21\u4e86\uff0c\u8fd9\u6b21\u66f4\u65b0\u6570\u636e\u548c\u9898\u89e3\u4e5f\u662f\u53d1\u73b0\u4e86\u4e4b\u524d\u6ca1\u6ce8\u610f\u5230\u7684\u7279\u6b8a\u60c5\u51b5)\n\n\u5982\u679c\u8fd8\u53d1\u73b0\u4e00\u4e9b\u975e\u6b63\u786e\u7b97\u6cd5\u80fd\u901a\u8fc7\u6b64\u9898\uff0c\u53ef\u4ee5\u79c1\u6233\u6211\uff0c\u6211\u5c06\u4f1a\u7ee7\u7eed\u52a0\u5f3a\u6570\u636e\u3002\u975e\u5e38\u611f\u8c22~",
        "postTime": 1491231657,
        "uid": 20322,
        "name": "orangebird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3693 \u3010\u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b\u3011"
    },
    {
        "content": "## \u77e5\u8bc6\u70b9: \u6a21\u62df , ~~\u4fe1\u4ef0~~     \n\n### [\u539f\u9898\u9762](https://www.luogu.org/problem/P3693)   \n\n\u5927 \u578b \u8f66 \u4e07 \u4f17  \u81ea \u88c1 \u73b0 \u573a       \n\n![baka\u2465](https://ae01.alicdn.com/kf/H98d3a35cea914ebe987afe9e6f953dceL.jpg)\n\n---\n\n### \u5206\u6790\u9898\u610f:   \n\n1.  **\u64cd\u4f5c: ICE_BARRAGE R C D S**   \n\t - R:\u884c , C:\u5217,  D:\u65b9\u5411 , S:\u5f3a\u5ea6   \n\t - \u5728(R,C) \u5411 D \u5c04\u7ebf\u4e0a \u53d1\u5c04\u5f39\u5e55,  \u5c06 \u8ddd\u79bb S \u683c\u5185 \u7684\u4f4d\u7f6e \u51b0\u51bb\u5ea6 $+1$   \n\t    -  \u51b0\u51bb\u5ea6 \u53ea\u662f \u5730\u9762\u7684\u5c5e\u6027 , \u51b0\u7816 \u65e0\u51b0\u51bb\u5ea6\u5c5e\u6027   \n\t    - \u51b0\u51bb\u5ea6 \u64cd\u4f5c\u524d\u5df2\u7ecf\u4e3a $4$ \u7684\u65b9\u683c \u51b0\u51bb\u5ea6 \u4e0d\u6539\u53d8   \n\t    - \u9047\u5230\u51b0\u7816 \u5c04\u7ebf\u7ebf\u505c\u6b62\u5ef6\u4f38    \n\t    - **\u8ddd\u79bb $=$ \u7ecf\u8fc7\u65b9\u683c\u6570\u91cf** ,  \u7ecf\u8fc7\u683c\u5b50\u6570\u91cf $\\ge S$ \u65f6 \u76f4\u7ebf\u505c\u6b62\u5ef6\u4f38   \n   \n    **\u8f93\u51fa: CIRNO FREEZED k BLOCK(S)**   \n      - k :  \u51b0\u51bb\u5ea6 $+1$ \u7684\u4f4d\u7f6e\u7684\u6570\u91cf   \n\n\n2. **\u64cd\u4f5c: MAKE_ICE_BLOCK**   \n\t- \u5c06 \u5168\u5730\u56fe\u4e0a \u51b0\u51bb\u5ea6 $= 4$ \u7684 \u65b9\u683c \u51b0\u51bb\u5ea6\u6e05\u96f6, \u51b0\u7816\u5e93\u5b58\u6570 $+1$    \n   \n   **\u8f93\u51fa: CIRNO MADE x ICE BLOCK(S),NOW SHE HAS y ICE BLOCK(S)**   \n     - x : \u672c\u6b21\u5236\u9020\u6570 , y : \u76ee\u524d\u5e93\u5b58\u6570   \n\n\n3. **\u64cd\u4f5c: PUT_ICE_BLOCK R C H**   \n\t  - R: \u884c C:\u5217 H:\u9ad8   \n\t  - \u5e93\u5b58\u51b0\u7816\u6570$-1$ , \u5728 \u4e09\u7ef4\u7a7a\u95f4\u4e2d $(R,C,H)$  \u5904\u653e\u7f6e \u4e00\u4e2a\u51b0\u7816   \n\t  - \u653e\u7f6e\u5728\u5730\u9762  $\\Rightarrow$ \u5730\u9762\u51b0\u51bb\u5ea6\u6e05\u96f6    \n\t\n\t**\u8f93\u51fa :**     \n\t\u53ef\u80fd\u51fa\u73b0\u591a\u79cd\u7ed3\u679c , \u6309\u7167\u8f93\u51fa\u4f18\u5148\u7ea7\u6392\u5217 :     \n\t1. CIRNO HAS NO ICE_BLOCK   \n\t\t- \u65e0\u5e93\u5b58\u51b0\u7816     \n\t\t- \u963b\u6b62\u64cd\u4f5c\u8fdb\u884c   \n\t2. BAKA CIRNO,CAN'T PUT HERE   \n\t\t- \u51b0\u7816\u653e\u7f6e\u4f4d\u7f6e\u60ac\u7a7a / \u653e\u7f6e\u4f4d\u7f6e\u5df2\u6709\u51b0\u5757   \n\t\t   - \u51b0\u7816\u60ac\u7a7a $\\Rightarrow$  \u4e09\u7ef4\u7a7a\u95f4\u4e2d \u5468\u56f4\u516d\u4e2a\u4f4d\u7f6e \u65e0\u51b0\u7816\u5b58\u5728   \n\t\t   - \u5bf9\u4e8e \u653e\u7f6e\u4f4d\u7f6e \u63a5\u89e6\u5730\u9762\u7684 \u51b0\u7816 , \u4e0d\u53ef\u80fd\u60ac\u7a7a   \n\t\t- \u963b\u6b62\u64cd\u4f5c\u8fdb\u884c   \n\t3. CIRNO MISSED THE PLACE   \n\t\t - $\\text{R<HR}\\ \\text{\u6216}\\ \\text{R>HR+HX-1}$       \n\t\t\t$\\text{\u6216} \\ \\text{C<HC}\\ \\text{\u6216}\\ \\text{C>HC+HY-1}$     \n\t\t - \u653e\u7f6e\u5728\u4e86 \u623f\u5b50\u8303\u56f4\u4ee5\u5916\u7684\u4f4d\u7f6e   \n\t\t - \u4e0d\u53ef\u963b\u6b62 \u64cd\u4f5c\u8fdb\u884c   \n\t4. CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE   \n\t\t- $\\text{HR+1}\\le \\text{R}\\le \\text{HR+HX-2}$    \n\t\t  $\\text{\u4e14}\\ \\text{HC+1}\\le \\text{C}\\le \\text{HC+HY-2}$   \n\t\t- \u51b0\u7816\u653e\u7f6e\u5728\u4e86 \u5c4b\u5185 \u672c\u5e94\u4e3a\u7a7a\u5730\u5904   \n\t\t- \u4e0d\u53ef\u963b\u6b62 \u64cd\u4f5c\u8fdb\u884c   \n\t5. CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS x ICE_BLOCK(S)   \n\t    - x : \u76ee\u524d \u5e93\u5b58\u51b0\u7816\u6570   \n\t    - \u4e0d\u8003\u8651 \u662f\u5426\u5835\u4f4f\u4e86 \u5e94\u8be5\u7559\u95e8\u7684\u4f4d\u7f6e   \n\n\n4. **\u64cd\u4f5c: REMOVE_ICE_BLOCK R C H**   \n\t- R: \u884c C: \u5217 H: \u9ad8   \n\t- \u5c06 $(R,C,H)$ \u4f4d\u7f6e\u7684\u51b0\u7816\u53d6\u8d70 , \u5e93\u5b58 \u51b0\u7816\u6570 $+1$   \n    - \u5c06 \u4e0e\u5730\u9762\u63a5\u89e6\u7684 \u51b0\u7816\u53d6\u8d70\u540e , \u5730\u9762\u51b0\u51bb\u5ea6\u5f52\u96f6   \n  \n   **\u8f93\u51fa:**   \n   \u53ef\u80fd\u51fa\u73b0\u591a\u79cd\u7ed3\u679c , \u6309\u7167\u8f93\u51fa\u4f18\u5148\u7ea7\u6392\u5217:     \n   1. BAKA CIRNO,THERE IS NO ICE_BLOCK   \n\t  - \u88ab\u64cd\u4f5c\u4f4d\u7f6e \u65e0\u51b0\u7816     \n\t  - \u963b\u6b62\u64cd\u4f5c\u8fdb\u884c     \n   2. CIRNO REMOVED AN ICE_BLOCK,AND k BLOCK(S) ARE BROKEN     \n\t   - k: \u788e\u6389\u51b0\u5757\u6570    \n\t   - \u672c\u6b21\u64cd\u4f5c \u5bfc\u81f4 \u4e00\u51b0\u7816\u8054\u901a\u5757 \u60ac\u7a7a (\u4e0d\u4e0e **\u4e0e\u5730\u9762\u63a5\u89e6\u7684\u8054\u901a\u5757** \u8054\u901a)     \n\t     \u60ac\u7a7a \u51b0\u5757\u6d88\u5931   \n\t   - \u4e0d\u53ef\u963b\u6b62 \u64cd\u4f5c\u8fdb\u884c   \n   3. CIRNO REMOVED AN ICE_BLOCK    \n\t  - \u6210\u529f\u53d6\u8d70 , \u5bf9\u5176\u4ed6\u51b0\u5757\u65e0\u5f71\u54cd   \n\n\n5. **\u64cd\u4f5c: MAKE_ROOF**   \n\t- \u6700\u540e\u4e00 \u6761\u64cd\u4f5c , \u53ea\u51fa\u73b0\u4e00\u6b21   \n\t- \u6309\u7167\u4e0b\u5217\u987a\u5e8f\u8fdb\u884c \u5b50\u64cd\u4f5c, \u6309\u7167 \u5b50\u64cd\u4f5c\u4e2a\u6307\u4ee4\u6392\u5217\u4f18\u5148\u7ea7 \u8fdb\u884c\u64cd\u4f5c ,      \n\t  \u82e5\u4e0d\u6ee1\u8db3\u6761\u4ef6, \u5b50\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c , \u7a0b\u5e8f\u7ec8\u6b62   \n\t\n\t**\u5b50\u64cd\u4f5c:**   \n\t1. **\u642d\u5efa \u623f\u9876**   \n\t   - \u5728 **\u5899\u58c1\u6700\u9ad8\u9ad8\u5ea6** $+1$ \u5904  \u4e00\u6b21\u6027\u653e\u7f6e \u81f3\u591a $\\text{HX}\\times \\text{XY}$ \u4e2a\u51b0\u7816,   \n\t   - \u82e5 \u5728 **MAKE_ROOF** \u4e4b\u524d\u6b64\u9ad8\u5ea6\u5904\u6709\u51b0\u7816 , \u5df2\u6709\u51b0\u7816\u4f4d\u7f6e \u4e0d\u5fc5\u91cd\u590d\u653e\u7f6e   \n\t   - \u6bd4 \u6b64\u65f6\u653e\u7f6e\u7684 \u5c4b\u9876\u7684\u9ad8\u5ea6 \u9ad8\u7684 \u51b0\u7816  \u89c6\u4e3a\u5b58\u5728\u4e8e\u623f\u5916   \n\t  \n\t    **\u4e0d\u6ee1\u8db3\u6761\u4ef6:**    \n\t    \u53ef\u80fd\u51fa\u73b0\u591a\u79cd\u7ed3\u679c , \u6309\u7167\u8f93\u51fa\u4f18\u5148\u7ea7\u6392\u5217:       \n\t      1. SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF     \n\t\t\t - \u6309\u7167\u4e0a\u8ff0\u89c4\u5219 , \u5e93\u5b58\u51b0\u5757\u4e0d\u8db3 \u586b\u6ee1 \u623f\u9876       \n\t\t  2. SORRY CIRNO,HOUSE IS TOO SMALL      \n\t\t\t - \u623f\u9876\u5efa\u9020\u5b8c\u6bd5\u540e ,  \u5899\u9ad8 $<2$  \u6216  \u623f\u5c4b\u5185\u90e8\u7a7a\u95f4 $<2$(\u5ffd\u7565\u5c4b\u5185\u9519\u653e\u51b0\u7816)     \n            \n   2. **\u79fb\u9664 \u591a\u4f59\u51b0\u7816:**   \n\t   - \u5c06 \u4e0d\u5c5e\u4e8e \u623f\u5c4b\u5899\u58c1\u4e0e \u623f\u5c4b\u9876\u90e8 \u7684\u51b0\u7816\u5168\u90e8\u79fb\u8d70     \n\t   - \u5f53 \u79fb\u8d70\u67d0\u51b0\u7816\u65f6 , \u53ef\u80fd \u4f1a\u5bfc\u81f4 **\u5899\u58c1\u4e0a** \u67d0\u51b0\u7816 \u6454\u788e,   \n\t     \u5219\u5148\u5c06 \u5899\u58c1\u4e0a \u4f1a\u6454\u788e\u7684\u51b0\u7816 \u79fb\u8d70 (\u5b50\u4efb\u52a13 \u4e2d\u518d\u8fdb\u884c\u586b\u8865)    \n\t\t \u518d \u5bf9\u539f\u51b0\u7816 \u8fdb\u884c\u79fb\u9664    \n\t\t \n\t  **\u8f93\u51fa:**    \n\t  k1 ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED        \n\t  k2 ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED      \n\t  -  k1 :  \u623f\u5b50\u5185\u90e8 \u9519\u8bef\u653e\u7f6e\u7684 \u591a\u4f59\u51b0\u7816\u6570    \n\t\t k2 :  \u623f\u5b50\u5916\u90e8 \u9519\u8bef\u653e\u7f6e\u7684 \u591a\u4f59\u51b0\u7816\u6570     \n\t  \n\n\t  **\u4e0d\u6ee1\u8db3\u6761\u4ef6 :**   \n\t  1. SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS     \n\t\t - \u7531\u4e8e \u5c06\u5899\u58c1\u4e0a\u51b0\u7816\u79fb\u8d70 , \u5bfc\u81f4\u623f\u9876 \u4e0d \u4e0e\u5730\u9762\u8054\u901a ,  \u4f7f\u623f\u9876\u584c\u9677    \n\n   3. **\u586b\u8865 \u5899\u58c1\u6b8b\u7f3a:**   \n\t\t- \u5899\u58c1 \u6709\u6b8b\u7f3a\u7684\u5b9a\u4e49:    \n\t\t\t- \u9664 \u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u4e4b\u5916 , \u4ece\u5c4b\u5185\u5411\u5916\u770b \u8fd8\u53ef\u770b\u5230\u5176\u4ed6 \u6b8b\u7f3a      \n\t\t\t- $\\color{red}\\text{\u6ce8\u610f:}$ **\u5f53 \u95e8\u4e0d\u5f97\u4e0d \u5f00\u5230 \u67f1\u5b50\u65c1\u65f6 , \u53ef\u770b\u5230 \u67f1\u5b50\u5bf9\u5e94\u4f4d\u7f6e \u662f\u5426\u6b8b\u7f3a**       \n\t\t\t   **\u5f53 \u4e00\u4e2a\u6b8b\u7f3a\u4f4d\u7f6e \u540c\u65f6\u4e0e\u4e24\u67f1\u5b50\u76f8\u90bb\u65f6 , \u53ef\u540c\u65f6\u770b\u5230 \u4e24\u67f1\u5b50\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6b8b\u7f3a**     \n\t\t\t   **\u6b64\u8fc7\u7a0b\u4e2d\u586b\u8865\u7684\u6240\u6709\u6b8b\u7f3a \u90fd\u5c5e\u4e8e\u5899\u58c1\u6b8b\u7f3a (\u5305\u62ec\u67f1\u5b50\u6b8b\u7f3a)**    \n\t\t\t\t\n            \t\t\t\n\t\t -  \u5bf9\u4e8e \u9ad8\u5ea6$\\ge 2$ \u7684\u6b8b\u7f3a\u4f4d\u7f6e ,  \u4e00\u5b9a\u9700\u8981\u88ab\u586b\u8865        \n\t\t -  \u5bf9\u4e8e \u9ad8\u5ea6 $< 2$ \u7684\u6b8b\u7f3a\u4f4d\u7f6e ,  \u9700\u8981\u8003\u8651  \u6210\u4e3a\u95e8\u7684\u60c5\u51b5 :        \n\t\t    \u5bf9\u4e8e\u95e8\u7684\u5019\u9009\u4f4d\u7f6e , \u5e94\u6309\u7167\u4e0b\u5217\u6761\u4ef6\u8fdb\u884c\u9009\u62e9 (\u6309\u7167\u5fc5\u8981\u6027\u4f18\u5148\u7ea7\u6392\u5e8f) :    \n\t\t\t\n             1. \u623f\u5c4b\u80fd\u591f\u5efa\u6210  (\u4e0d\u51fa\u73b0 \u51b0\u7816\u6570\u91cf\u4e0d\u8db3\u7684\u60c5\u51b5)    \n\t\t\t    - \u5bf9\u4e8e\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u7684\u9009\u62e9 , \u9700\u8981\u4f7f\u586b\u8865\u51b0\u7816\u6570\u91cf\u5c3d\u53ef\u80fd \u51cf\u5c11    \n\t\t\t      \u82e5\u95e8\u5019\u9009\u4f4d\u7f6e \u76f8\u90bb\u7684\u67f1\u5b50\u6b8b\u7f3a , \u4f1a\u5bfc\u81f4 \u51b0\u7816\u586b\u8865\u6570\u91cf\u589e\u52a0          \n\t\t\t         \n\t \t         - \u9700\u586b\u8865\u51b0\u7816\u6570 $=$ \u5899\u58c1\u6b8b\u7f3a\u6570(\u4e0d\u5305\u62ec\u67f1\u5b50) $-$ \u5019\u9009\u4f4d\u7f6e\u5927\u5c0f $+$ \u53ef\u770b\u5230\u67f1\u5b50\u6b8b\u7f3a\u6570  \n                  \u5e94\u5c06 \u95e8\u5019\u9009\u4f4d\u7f6e\u6309\u7167 **\"\u53ef\u770b\u5230\u67f1\u5b50\u6b8b\u7f3a\u6570$-$\u5019\u9009\u4f4d\u7f6e\u5927\u5c0f\" \u5347\u5e8f **\u4f5c\u4e3a\u6392\u5e8f**\u7b2c\u4e00\u4f18\u5148\u7ea7**        \n\t\t\t       - \u663e\u7136 , \u53ef\u770b\u5230\u7684\u67f1\u5b50\u6b8b\u7f3a\u6570 $\\le$ \u95e8\u5019\u9009\u4f4d\u7f6e\u5927\u5c0f        \n\t\t\t      \n\t\t\t       - \u5728\u6b64\u6761\u4ef6\u4e0b, \u53ef\u80fd\u51fa\u73b0: \u9009\u62e9 \u5927\u5c0f\u4e3a $1\\times 1$ \u7684\u6b8b\u7f3a \u4f18\u4e8e \u5927\u5c0f\u4e3a $1\\times 2$ \u7684\u6b8b\u7f3a \u7684\u60c5\u51b5      \n\t\t\t      \n\t\t     2. \u5b58\u5728\u4e00 $1\\times 2$ \u5927\u5c0f\u7684\u6b8b\u7f3a\u4f5c\u4e3a \u95e8        \n\t\t\t\t- \u6ee1\u8db3\u6761\u4ef6$1$ \u7684\u60c5\u51b5\u4e0b ,      \n\t\t\t\t  \u4f18\u5148\u9009\u62e9 \u9ad8\u5ea6\u4e3a $2$ \u7684\u6b8b\u7f3a \u4f5c\u4e3a \u95e8\u7684\u5019\u9009\u4f4d\u7f6e      \n\t\t\t\t  \n\t\t\t\t  \u5e94\u5c06 \u95e8\u5019\u9009\u4f4d\u7f6e \u6309\u7167 **\"\u6b8b\u7f3a \u7684\u9ad8\u5ea6\" \u964d\u5e8f** \u4f5c\u4e3a\u6392\u5e8f **\u7b2c\u4e8c\u4f18\u5148\u7ea7**      \n\t\t\t\t   \n\t\t    3. \u95e8 \u66f4\u9760\u8fd1 \u5899\u58c1\u7684\u6b63\u4e2d\u592e   \n\t\t\t\t- \u6ee1\u8db3 \u6761\u4ef6 $1,2$ \u7684\u60c5\u51b5\u4e0b     \n\t\t\t\t  \u4f18\u5148\u9009\u62e9  \u66f4\u9760\u8fd1 \u5899\u58c1\u6b63\u4e2d\u592e\u7684 \u6b8b\u7f3a    \n\t\t\t\t  \u4e3a\u66f4\u63a5\u8fd1 \"CIRNO IS PERFECT!\" \u7684\u60c5\u51b5 (\u5b9a\u4e49\u8be6\u89c1 **\u68c0\u67e5 \u5c0f\u5c4b** \u7b2c$6$\u6761)    \n\t\t\t      \n\t\t\t    \u5e94\u5c06 \u95e8\u5019\u9009\u4f4d\u7f6e \u6309\u7167 **\"\u4e0e\u5899\u58c1\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8ddd\u79bb\" \u5347\u5e8f** \u4f5c\u4e3a\u6392\u5e8f **\u7b2c\u4e09\u4f18\u5148\u7ea7**       \n\n\t\t   \n\t   **\u4e0d\u6ee1\u8db3\u6761\u4ef6 :**       \n\t   1. SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL    \n\t\t  - \u7ecf\u8fc7\u4e0a\u8ff0\u8fc7\u7a0b, \u51cf\u5c11\u586b\u8865\u51b0\u7816\u6570 \u540e ,     \n\t\t     \u5e93\u5b58\u51b0\u7816 \u8fd8\u662f\u65e0\u6cd5 \u586b\u8865\u6240\u6709\u7684 \u975e\u95e8\u6b8b\u7f3a      \n\t\t     \u5982\u679c\u95e8\u5f00\u5728 \u67f1\u5b50\u65c1 , \u6b8b\u7f3a\u4e5f \u5305\u62ec\u53ef\u770b\u5230\u7684\u67f1\u5b50 \u7684\u6b8b\u7f3a     \n\t\t     \n   4. **\u68c0\u67e5 \u5c0f\u5c4b**     \n\t   1. \u8f93\u51fa: GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE     \n\t\t   - \u5e86\u795d\u5c0f\u5c4b\u5b8c\u5de5 ~~(\u4e0d\u6127\u662f\u742a\u9732\u8bfa! \u8f7b\u6613\u5c31\u505a\u5230\u4e86\u6211\u4eec\u505a\u4e0d\u5230\u7684\u4e8b)~~      \n\n\t  2. \u68c0\u67e5\u662f\u5426\u6709 $1\\times 2$ \u7684\u95e8 :      \n\t\t  - \u65e0 , \u8f93\u51fa HOUSE HAS NO DOOR      \n\t\t  - \u6709 , \u8f93\u51fa DOOR IS OK     \n\n\t  3. \u68c0\u67e5\u64cd\u4f5c $3$ \u4e2d\u662f\u5426\u8fdb\u884c\u4e86\u586b\u8865\u64cd\u4f5c    \n\t      - \u5426 ,  \u8f93\u51fa WALL IS OK    \n\t      - \u662f , \u8f93\u51fa WALL NEED TO BE FIXED    \n\n\t   4. \u68c0\u67e5 \u56db\u89d2\u7684\u67f1\u5b50 \u662f\u5426 \u6709\u6b8b\u7f3a    \n\t\t\t- \u5426 , \u8f93\u51fa CORNER IS OK    \n\t\t\t- \u662f , \u8f93\u51fa CORNER NEED TO BE FIXED    \n\t\t\t\t- \u82e5\u6b64\u65f6\u5e93\u5b58\u51b0\u7816 $\\ge$ \u4fee\u590d\u6240\u9700\u8981\u7684\u51b0\u7816\u6570    \n\t\t\t\t   \u5219 \u5c31\u82b1\u8d39 \u4fee\u590d\u6240\u9700\u51b0\u7816\u6570 \u4e2a\u51b0\u7816   \n\t\t\t   -  \u5426\u5219 \u5e93\u5b58\u51b0\u7816\u6570\u7f6e\u96f6   \n\n\t  5. **\u8f93\u51fa:** CIRNO FINALLY HAS k ICE_BLOCK(S)   \n\t\t  - k: \u5269\u4f59\u5e93\u5b58\u51b0\u7816\u6570   \n\t\n\t  6. \u82e5\u4e0a\u8ff0\u68c0\u67e5 \u7684 \u8fc7\u7a0b\u4e2d    \n\t\t\t1. \u6ca1\u6709 \u4e00\u4e2a\u51b0\u7816 \u9700\u8981\u88ab\u79fb\u9664     \n\t\t\t2. \u6ca1\u6709 \u4e00\u4e2a\u4f4d\u7f6e \u9700\u8981\u88ab \u586b\u8865       \n\t\t\t3. \u672a\u51fa\u73b0\u623f\u5b50\u6ca1\u95e8\u7684\u60c5\u51b5   \n\t\t\t4. \u623f\u89d2 \u7684\u56db\u4e2a\u67f1\u5b50 \u5728 \u5efa\u9020\u623f\u9876\u4e4b\u524d\u4fbf\u5df2\u4fee\u597d, \u672a\u518d\u8fdb\u884c \u4fee\u8865    \n\t\t\t5. \u95e8\u6070\u597d\u5f00\u5728\u4e86 \u67d0\u9762\u5899\u7684\u6b63\u4e2d\u592e (\u82e5\u5899\u957f\u4e3a\u5076\u6570, \u5219\u4e24\u4e2d\u95f4\u4f4d\u7f6e\u90fd\u5408\u6cd5)     \n\n\t\t\t**\u8f93\u51fa :** CIRNO IS PERFECT!       \n\n \n   \u5bf9\u4e8e $20\\%$ \u7684\u6570\u636e : \u53ea\u6709\u64cd\u4f5c $1, 2$      \n   \u5bf9\u4e8e $30\\%$ \u7684\u6570\u636e : \u53ea\u6709\u64cd\u4f5c $1, 2, 3$        \n   \u5bf9\u4e8e $50\\%$ \u7684\u6570\u636e : \u53ea\u6709\u64cd\u4f5c $1, 2, 3, 4$   \n   \u5bf9\u4e8e $70\\%$ \u7684\u6570\u636e :  \u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u51b0\u7816\u6454\u843d , \u4e5f\u4e0d\u4f1a\u9020\u6210\u5c4b\u9876\u584c\u9677   \n   \u5bf9\u4e8e $90\\%$ \u7684\u6570\u636e : \u4e0d\u628a\u95e8\u5f00\u5230\u56db\u89d2\u7684\u67f1\u5b50\u65c1\u8fb9\u3002   \n   (\u4fdd\u8bc1\u5728\u6240\u6709\u53ef\u80fd\u4f5c\u4e3a\u95e8\u7684\u5899\u58c1\u7a7a\u7f3a\u4e2d\uff0c\u6709\u4e00\u79cd\u53ef\u80fd \u4f7f\u5f97\u95e8 \u4e0d\u7d27\u8d34\u56db\u89d2\u7684\u67f1\u5b50)   \n    \u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e :    \n   $4\\le \\text{N}\\le 16\\ , \\ 5\\le \\text{HM}\\le 20 \\ ,\\ 10\\le \\text{M}\\le 1000$   \n    \u4fdd\u8bc1 \u4e0d\u5c5e\u4e8e\u51b0\u5c4b\u8303\u56f4\u5185 \u7684 \u6240\u6709\u7a7a\u5730 \u81f3\u591a\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u3002   \n    \u9664 **MAKE_ROOF** \u6307\u4ee4\u5916 , \u653e\u7f6e\u65b9\u5757 \u7684 \u9ad8\u5ea6\u5c0f\u4e8e $\\text{HM}$   \n\n---\n\n### \u7b97\u6cd5\u5b9e\u73b0 : \n\n\u5206\u6790\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d \u8f83\u4e3a\u590d\u6742\u7684\u5b9e\u73b0 :\n\n1. \u5982\u4f55\u5224\u65ad \u60ac\u7a7a\u8fde\u901a\u5757, \u5e76\u5c06\u5176\u6d88\u9664 $?$      \n\t\u53ef\u4ee5 \u4ee5\u67d0\u8fde\u901a\u5757\u4e2d\u7684 \u4e00\u4e2a\u51b0\u7816\u4e3a\u8d77\u70b9 , \u8fdb\u884c $DFS/BFS$      \n\t\u8f6c\u79fb\u65f6 \u5411\u76f8\u90bb\u7684 \u51b0\u7816 \u8fdb\u884c\u8f6c\u79fb     \n\t\n\t \u5982\u679c \u53ef\u4ee5\u8f6c\u79fb\u5230 \u4e00\u4e2a \u4e0e\u5730\u9762\u63a5\u89e6\u7684 \u51b0\u7816,       \n\t \u90a3\u4e48 \u8bc1\u660e\u6b64\u8054\u901a\u5757 \u4e0e\u5730\u9762\u63a5\u89e6 , \u4e0d\u60ac\u7a7a     \n\t \u5426\u5219\u8bc1\u660e \u6b64\u8054\u901a\u5757\u60ac\u7a7a  , \u9700\u8981 \u88ab\u5168\u90e8\u6d88\u9664     \n\t  - \u4e0d\u53ef \u8fb9\u5224\u65ad\u8fb9\u6d88\u9664 , \u4f1a\u56e0\u4e3a \u641c\u7d22\u7684 \u987a\u5e8f \u5bfc\u81f4\u9519\u8bef     \n\t\n\t  \u6d88\u9664\u4e00\u4e2a\u8054\u901a\u5757\u65f6 , \u4e5f\u4f7f\u7528 $DFS/BFS$  ,     \n\t  \u5bf9\u8f6c\u79fb\u5230\u7684 \u51b0\u7816\u76f4\u63a5\u6d88\u9664\u5373\u53ef      \n\n\t\u4ee3\u7801\u5982\u4e0b : \n\n\t```cpp\n\tint DFS1(int R,int C,int H,int FR,int FC,int FH)//dfs \u5224\u65ad\u67d0\u8054\u901a\u5757\u662f\u5426\u60ac\u7a7a \n\t{\n\t\tvis[R][C][H] = 1;//\u8bbf\u95ee\u8fc7,\u6253\u6807\u8bb0 \n\t\tif(H == 0) return 1;//\u6b64\u51b0\u7816 \u4e0e\u5730\u9762\u63a5\u89e6 , \u8bf4\u660e\u6b64\u8fde\u901a\u5757\u5408\u6cd5 \n\t\tfor(int i = 0; i < 6; i ++)//\u679a\u4e3e\u76f8\u90bb\u7684 \u51b0\u7816 \n\t\t  if(R + EXX[i] >= 0 && R + EXX[i] <N && C + EXY[i] >= 0) //\u4f4d\u7f6e\u5408\u6cd5 \n\t\t    if(C + EXY[i] < N && H + EXZ[i] >= 0 && H + EXZ[i] <=HM)\n\t\t      if(R + EXX[i] != FR || C + EXY[i] != FC || H + EXZ[i] != FH)//\u4e0d\u4e0e \u4e0a\u4e00\u5757\u51b0\u7816\u4f4d\u7f6e\u76f8\u540c \n\t\t  \t    if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]])//\u6709\u51b0\u7816 \n\t\t  \t      if(!vis[R + EXX[i]][C + EXY[i]][H + EXZ[i]])//\u8f6c\u79fb \n\t\t  \t        if(DFS1(R + EXX[i],C + EXY[i],H + EXZ[i],R,C,H)) return 1;//\u8fde\u901a\u5757 \u4e0e\u5730\u9762\u63a5\u89e6 \n\t\treturn 0;//\u60ac\u7a7a \n\t}\n\tint DFS2(int R,int C,int H,int FR,int FC,int FH)//dfs \u5c06\u67d0\u8054\u901a\u5757 \u5220\u9664 \n\t{\n\t\tint ret = 0;//\u8ba1\u7b97 \u5220\u9664\u7684\u4e2a\u6570 \n\t\tfor(int i = 0; i < 6; i ++)\n\t\t  if(R + EXX[i] >= 0 && R + EXX[i] < N && C + EXY[i] >= 0) //\u679a\u4e3e \u5408\u6cd5\u7684\u76f8\u90bb\u51b0\u7816 \n\t\t    if(C + EXY[i] < N && H + EXZ[i] >= 0 && H + EXZ[i] <= HM)\n\t\t      if(R + EXX[i] != FR || C + EXY[i] != FC || H + EXZ[i] != FH)\n\t\t  \t    if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]])\n\t\t  \t      ret += DFS2(R + EXX[i],C + EXY[i],H + EXZ[i],R,C,H);//dfs\u6df1\u5165 \n\t\treturn ice_block[R][C][H] = 0, ret + 1;//\u66f4\u65b0\u51b0\u7816\u5b58\u5728\u60c5\u51b5,\u66f4\u65b0\u5220\u9664\u4e2a\u6570 \n\t}\n\t```\n\n2. \u5982\u4f55: \u8868\u793a\u4e00\u95e8\u7684\u5019\u9009\u4f4d\u7f6e\u76f8\u90bb\u7684\u5899\u89d2 , \u5e76\u8ba1\u7b97 \u5899\u89d2\u7684\u6b8b\u7f3a\u5927\u5c0f$?$   \n\t \n\t- \u5bf9\u4e8e \u4e00\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u76f8\u90bb\u7684\u5899\u89d2 ,    \n\t\t\u7531\u4e8e\u60c5\u51b5\u8f83\u5c11 , \u66b4\u529b\u679a\u4e3e\u5bfb\u627e\u5373\u53ef  \n\t\t\n\t- \u5bf9\u4e8e\u4e00\u4e2a\u5019\u9009\u4f4d\u7f6e , \u5176\u4e0e\u67d0\u5899\u89d2\u5173\u7cfb\u53ea\u6709 **\u76f8\u90bb/\u4e0d\u76f8\u90bb** \u4e24\u79cd   \n\t  \u8003\u8651 \u5bf9\u5019\u9009\u4f4d\u7f6e\u4e0e\u5404\u5899\u89d2\u5173\u7cfb \u8fdb\u884c\u72b6\u538b   \n\t\t\n      \u4f7f\u7528\u4e00 \u957f\u5ea6\u4e3a$4$ \u7684\u4e8c\u8fdb\u5236\u4e32 , \u8868\u793a\u67d0\u5019\u9009\u4f4d\u7f6e \u4e0e\u5404\u5899\u89d2\u5173\u7cfb   \n\t  \u5982 : $(1001)_2$ \u8868\u793a\u6b64\u4f4d\u7f6e \u4e0e\u5899\u89d2$1$ \u4e0e \u5899\u89d2$4$ \u76f8\u90bb   \n\n\t- \u5728\u8ba1\u7b97\u5899\u89d2\u6b8b\u7f3a\u5927\u5c0f\u65f6 , \u679a\u4e3e \u4e8c\u8fdb\u5236\u4e32\u4e0a\u5bf9\u5e94\u4f4d\u7f6e   \n\t\t\u6839\u636e \u95e8\u540e\u9009\u4f4d\u7f6e\u7684\u9ad8\u5ea6 \u8fdb\u884c\u5224\u65ad\u5373\u53ef   \n\n3. \u5982\u4f55\u5b9e\u73b0 \u4e0a\u8ff0 \u5bf9\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u7684\u4f30\u4ef7\u8fc7\u7a0b $?$    \n\n\t- \u9996\u5148\u627e\u5230 \u6240\u6709 **\u79bb\u5730\u9ad8\u5ea6**$\\le 2$ \u7684\u6b8b\u7f3a\u4f4d\u7f6e ,    \n\t   \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6b8b\u7f3a\u4f4d\u7f6e , \u8ba1\u7b97\u51fa\u4e0b\u5217\u5404\u503c :     \n\t   1. \u4fdd\u7559\u6b64\u6b8b\u7f3a \u5bf9\u603b\u586b\u8865\u6570\u7684\u5f71\u54cd (\u53ef\u770b\u5230\u7684\u67f1\u5b50\u6b8b\u7f3a\u6570 $-$ \u95e8\u5019\u9009\u4f4d\u7f6e\u5927\u5c0f)   \n\t   2. \u6b64\u6b8b\u7f3a \u7684\u9ad8\u5ea6    \n\t   3. \u6b64\u6b8b\u7f3a \u4e0e\u5899\u58c1\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8ddd\u79bb   \n\t \n\t- \u6309\u7167 **\u5206\u6790\u9898\u610f** \u4e2d\u89c4\u5b9a\u4f18\u5148\u7ea7 \u8fdb\u884c\u6392\u5e8f   \n\t  \u6392\u5e8f\u540e\u7684 \u7b2c\u4e00\u4e2a\u6b8b\u7f3a \u4e00\u5b9a\u4f7f **\u9700\u8981\u586b\u8865\u51b0\u7816\u6570** \u6700\u5c0f   \n\t  \n\t- \u82e5\u7b2c\u4e00\u4e2a\u6b8b\u7f3a \u9ad8\u5ea6\u4e3a $1$, \u4e14\u6240\u5f97 **\u9700\u8981\u586b\u8865\u51b0\u7816\u6570 $<$ \u5f53\u524d\u5e93\u5b58**   \n\t    \u8bf4\u660e \u53ef\u4ee5\u591a\u6d88\u8017 **\u81f3\u591a\u4e00\u4e2a** \u51b0\u7816 , \u6765\u9009\u62e9\u4e00\u4e2a \u9ad8\u5ea6\u4e3a $2$ \u7684\u6b8b\u7f3a\u4f5c\u95e8   \n\t    -  \u53ef\u4ee5 \u624b\u63a8 \u5404\u79cd\u7c7b\u7684\u6b8b\u7f3a , \u6765\u5f97\u5230 \u6d88\u8017 **\u81f3\u591a\u4e00\u4e2a** \u51b0\u7816 \u7684\u7ed3\u8bba   \n\t \n\t  \u5219\u53ef \u5728\u6392\u5e8f\u540e\u7684\u6b8b\u7f3a\u4e2d \u5411\u540e\u5bfb\u627e\u7b2c\u4e00\u4e2a \u9ad8\u5ea6\u4e3a $2$ \u7684\u6b8b\u7f3a   \n\t  \u7531\u4e8e \u7b2c $2,3$ \u6392\u5e8f\u4f18\u5148\u7ea7\u7684\u5b58\u5728 , \u627e\u5230\u7684\u7b2c\u4e00\u4e2a \u4e00\u5b9a\u4e3a \u6700\u4f18\u7684    \n\t \n\t \n---\n\n### \u4e00\u4e9b\u6280\u5de7\n \n1. \u505a\u9898\u524d\u5148\u5199\u5927\u7eb2 \u4e00\u5b9a\u6ca1\u6709\u9519   \n\n2. \u591a\u5199\u5b50\u51fd\u6570 \u4e00\u5b9a\u6ca1\u6709\u9519   \n\n3. \u6709 $\\text{hack}$ \u6570\u636e\u63d0\u65e9\u8054\u7cfb\u51fa\u9898\u4eba\u4e00\u5b9a\u6ca1\u6709\u9519   \n\n4. \u6709\u6ca1\u6709 \u4ec0\u4e48\u65b9\u4fbf\u7684\u65b9\u6cd5 \u53ef\u4ee5 \u51cf\u5c0f\u8c03\u8bd5\u7684\u96be\u5ea6 ?     \n    \u8003\u8651 \u4f7f\u5168\u5c40\u7684 \u51b0\u7816\u6446\u653e\u60c5\u51b5 \u53ef\u89c6\u5316   \n \n\t - \u53d1\u73b0 \u5bf9\u4e8e\u786e\u5b9a\u7684 \u6a2a\u7eb5\u5750\u6807 , \u5728\u6b64 \u6a2a\u7eb5\u5750\u6807\u4e0a\u7684 \u51b0\u7816 ,    \n\t   \u53ef\u4ee5\u6309\u7167 \u5b58\u5728\u60c5\u51b5 , \u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4e32\u8868\u793a    \n\t   \u5373: \u5bf9 \u6bcf\u4e00\u4e2a $z$ \u8f74 \u8fdb\u884c\u72b6\u538b   \n\n\t   \u4f8b: $9 = (1001)_2$ , \u8868\u793a: \u5728\u67d0\u4f4d\u7f6e, \u9ad8\u5ea6\u4e3a $0,3$ \u5904 , \u5206\u522b\u6709\u4e00 \u51b0\u7816    \n\t  \u8fd9\u6837 \u72b6\u538b\u540e \u8f93\u51fa \u6bcf\u4e2a$(x,y)$  \u5bf9\u5e94\u7684\u503c     \n\t  \u5c31\u53ef\u4ee5 \u5728 \u4e8c\u7ef4\u5e73\u9762\u5185 \u6a21\u62df \u4e09\u7ef4\u7acb\u4f53\u56fe\u5f62 , \u4ee5\u4fbf\u4e8e\u8c03\u8bd5        \n\t\t\n\t -  \u5982\u679c\u60a8\u6709\u6761\u4ef6 , \u53ef\u4ee5\u7528 $\\text{MC}$ \u624b\u73a9\u6570\u636e   \n\t   \u914d\u5408\u4e0a\u8ff0\u65b9\u6cd5\u4f7f\u7528 \u6548\u679c\u66f4\u4f73  \n\t    \n\u4ee3\u7801\u5982\u4e0b :\n```cpp\nvoid check()//\u8c03\u8bd5\u4f7f\u7528, \u8f93\u51fa\u5730\u56fe , \u4ee5\u68c0\u67e5\u5408\u6cd5\u6027 \n{\n\tfor(int x = 0; x < N; putchar('\\n'), x ++) \n\t  for(int y =0; y < N; y ++)\n\t  {\n\t    long long sum = 0;//\u4f7f\u7528 \u72b6\u538b\u601d\u60f3 , \u5bf9\u6bcf\u4e00\u4e2a\u4e8c\u7ef4\u7684 \u5750\u6807\u4e0a\u7684\u51b0\u7816\u8fdb\u884c\u72b6\u538b \n\t    for(int z = 0; z <= HM; z ++) sum+= (ice_block[x][y][z]) * (1 << z);\n\t    printf(\"%lld \",sum);\n\t  }\n\tprintf(\"\\n\\n\");\n}\n```\n\n\t\n---\n\n\u9644\u5b8c\u6574\u4ee3\u7801 :       \n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm> \n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<string>\n#include<ctype.h>\n#define min(a,b) (a < b ? a : b)\nconst int DIR_X[8] = {-1,-1,0,1,1,1,0,-1};//ICE_BARRAGE \u64cd\u4f5c\u65f6\u7684 \u65b9\u5411\u6539\u53d8\u91cf \nconst int DIR_Y[8] = {0,-1,-1,-1,0,1,1,1};\nconst int EXX[6] = {0,0,1,-1,0,0};//\u7acb\u4f53\u7a7a\u95f4\u5185 \u76f8\u90bb\u7684\u51b0\u7816 \u4f4d\u7f6e\u6539\u53d8\u91cf \nconst int EXY[6] = {0,0,0,0,1,-1};\nconst int EXZ[6] = {-1,1,0,0,0,0};\n//=============================================================\nstruct alternative_position//\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \n{\n\tint x, y, z, h, wall;//\u4f4d\u7f6e\u4fe1\u606f, \n\tint corner, corner_pos; //\u53ef\u770b\u5230\u7684\u67f1\u5b50\u6b8b\u7f3a\u6570\n\tint mid1, mid2;//\u6b64\u9762\u5899 \u4e2d\u95f4\u4f4d\u7f6e\u7684\u5750\u6807 \n};\nint N,HM,HR,HC,HX,HY,M;//\u8f93\u5165\u7684\u5404\u5e38\u91cf \nint inventory;//\u5e93\u5b58\u51b0\u7816\u6570 \nbool ice_block[17][17][30];//\u4e09\u7ef4\u7a7a\u95f4\u5185\u67d0\u70b9 \u662f\u5426\u6709\u51b0\u7816\u5b58\u5728 \nint ground_freeze[17][17];//\u5730\u9762\u51b0\u51bb\u5ea6 ,\u5f53\u5730\u9762\u6709\u51b0\u7816\u65f6\u4e3a-1 \nbool vis[17][17][30];//\u5728dfs\u6c42 \u8054\u901a\u5757\u65f6\u4f7f\u7528 \nint max_high;//\u5899\u58c1\u6700\u9ad8\u9ad8\u5ea6 \nint doorx, doory, doorz, door_high, door_dis;\nint corner_x[20], corner_y[20];\n//=========\u5b50\u51fd\u6570\u5217\u8868:==========================================\ninline int read()\n{\n    int s=1, w=0; char ch=getchar();\n    for(; !isdigit(ch);ch=getchar()) if(ch=='-') s =-1;\n    for(; isdigit(ch);ch=getchar()) w = w*10+ch-'0';\n    return s*w;\n}\nint abs(int x) {return x > 0? x : -x; }\nbool cmp(alternative_position fir, alternative_position sec)\n{\n\tif(fir.corner - fir.h == sec.corner - sec.h)//\u7b2c\u4e00\u4f18\u5148\u7ea7, \u6d88\u8017\u51b0\u7816\u6570 \u5347\u5e8f\u6392\u5e8f \n\t{\n\t  if(fir.h == sec.h)//\u7b2c\u4e8c\u4f18\u5148\u7ea7 \u95e8\u7684\u5927\u5c0f \u964d\u5e8f\u6392\u5e8f \n\t  {\n\t    int minfir = min(abs(fir.wall - fir.mid1), abs(fir.wall - fir.mid2));\n\t\tint minsec = min(abs(sec.wall - sec.mid1), abs(sec.wall - sec.mid2));\n\t\treturn minfir < minsec;\t//\u7b2c\u4e09\u4f18\u5148\u7ea7, \u4e0e\u5899\u4e2d\u592e\u4f4d\u7f6e\u7684\u8ddd\u79bb \u5347\u5e8f\u6392\u5e8f \n\t  }\n\t  return fir.h > sec.h;\n\t}\n\treturn fir.corner - fir.h < sec.corner - sec.h;\n}\nvoid ICE_BARRAGE();//\u64cd\u4f5c1,\u91ca\u653e\u5f39\u5e55 \nvoid MAKE_ICE_BLOCK();//\u64cd\u4f5c2,\u6536\u96c6\u51b0\u7816\n \nvoid PUT_ICE_BLOCK();//\u64cd\u4f5c3,\u653e\u7f6e\u51b0\u7816 \nbool JUDGE_PUT(int R,int C,int H);//\u5224\u65ad \u67d0\u4f4d\u7f6e \u662f\u5426\u53ef\u4ee5\u653e\u7f6e\u51b0\u7816\n\nint DFS1(int R,int C,int H,int FR,int FC,int FH);//dfs \u5224\u65ad\u67d0\u8054\u901a\u5757\u662f\u5426\u60ac\u7a7a \nint DFS2(int R,int C,int H,int FR,int FC,int FH);//dfs \u5c06\u67d0\u8054\u901a\u5757 \u5220\u9664 \nvoid REMOVE_ICE_BLOCK();//\u64cd\u4f5c4,\u79fb\u9664\u51b0\u7816 \n\nvoid MAKE_ROOF(); //\u64cd\u4f5c5, \u5efa\u9020\u623f\u9876, \u79fb\u9664\u591a\u4f59,\u4fee\u8865\u6b8b\u7f3a,\u68c0\u67e5\u623f\u5c4b \nint find_max_high();//\u5bfb\u627e \u5899\u58c1\u6700\u9ad8\u5904 \nvoid remove_excess(int&,int&);\n\nbool judge_outside(int,int,int);//\u5224\u65ad\u67d0\u51b0\u7816 \u662f\u5426\u4f4d\u4e8e \u623f\u5c4b\u5185/\u5916 \nbool judge_inside(int,int,int);\n\nbool fill_high_wall(int);//\u586b\u8865 \u9ad8\u5ea6>2\u7684\u5899\u58c1 \nint judge_corner(int,int);//\u5224\u65ad \u4e00\u4e2a\u4f4d\u7f6e\u5426\u5f00\u5728 \u5899\u89d2,\u5e76\u5224\u65ad \u5f00\u5728\u54ea\u4e2a\u5899\u89d2 \nvoid corner_could_see(int,int,int,int,int&,int&);//\u8ba1\u7b97\u4e00\u4e2a\u4f4d\u7f6e \u80fd\u770b\u5230\u7684\u5899\u89d2\u7684\u6b8b\u7f3a\u6570 \nbool find_door();//\u5728 \u9ad8\u5ea6<2\u7684\u4f4d\u7f6e \u627e\u95e8 ,\u5e76\u586b\u8865\u975e\u95e8\u533a\u57df \nvoid check()//\u8c03\u8bd5\u4f7f\u7528, \u8f93\u51fa\u5730\u56fe , \u4ee5\u68c0\u67e5\u5408\u6cd5\u6027 \n{\n\tprintf(\"%d \\n\",inventory); \n\tfor(int x=0; x<N; putchar('\\n'),x++) \n\t  for(int y=0; y<N; y++)\n\t  {\n\t  \tlong long sum=0;//\u4f7f\u7528 \u72b6\u538b\u601d\u60f3 , \u5bf9\u6bcf\u4e00\u4e2a\u4e8c\u7ef4\u7684 \u5750\u6807\u4e0a\u7684\u51b0\u7816\u8fdb\u884c\u72b6\u538b \n\t    for(int z=0; z<=HM; z++) sum+= (ice_block[x][y][z]) * (1<<z);\n\t    printf(\"%lld \",sum);\n\t  }\n\tprintf(\"\\n\\n\\n\");\n}\n//=============================================================\nsigned main()//sb main\u51fd\u6570 \n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"koishi.txt\",\"w\",stdout);\n\tN=read(), HM=read(), HR=read(), HC=read(), HX=read(), HY=read(), M=read();\n\tcorner_x[1] = corner_x[2] = HR, corner_x[4] = corner_x[8] = HR + HX - 1;//\u83b7\u5f97\u5404\u5899\u89d2\u4f4d\u7f6e \n\tcorner_y[2] = corner_y[8] = HC + HY - 1, corner_y[1] = corner_y[4] = HC;\n\twhile(M --)\n\t{\n\t  std::string order;\n\t  std::cin >> order;\n\t  if(order == \"ICE_BARRAGE\") ICE_BARRAGE();\n\t  if(order == \"MAKE_ICE_BLOCK\") MAKE_ICE_BLOCK();\n\t  if(order == \"PUT_ICE_BLOCK\") PUT_ICE_BLOCK();\n\t  if(order == \"REMOVE_ICE_BLOCK\") REMOVE_ICE_BLOCK();\n\t  if(order == \"MAKE_ROOF\") MAKE_ROOF(); \n\t}\n}\n//=============================================================\nvoid ICE_BARRAGE()\n{\n\tint R=read(), C=read(), D=read(), S=read();\n\tint freeze_num = 0, pass_num = 0;//\u51b0\u51bb\u5ea6\u6539\u53d8\u7684\u683c\u5b50\u6570 \u548c \u7ecf\u8fc7\u7684\u683c\u5b50\u6570(\u8ddd\u79bb \n\t\n\tfor(int x = R, y = C; ;x += DIR_X[D], y += DIR_Y[D])//\u679a\u4e3e\u5c04\u7ebf\u7ecf\u8fc7\u7684\u683c\u5b50 \n\t{\n\t  if(x < 0 || x >= N || y < 0 || y >= N || ground_freeze[x][y] == -1) break;//\u76f4\u7ebf\u4e0d\u53ef\u5ef6\u4f38\n\t  if(ground_freeze[x][y] < 4) ground_freeze[x][y]++ , freeze_num ++;//\u66f4\u65b0 \u53d8\u91cf \n\t  pass_num ++;\n\t  if(pass_num > S) break;//\u76f4\u7ebf\u4e0d\u53ef\u5ef6\u4f38 \n\t}\n\tprintf(\"CIRNO FREEZED %d BLOCK(S)\\n\",freeze_num);\n}\nvoid MAKE_ICE_BLOCK()\n{\n\tint collect_num = 0;//\u6536\u96c6 \u7684\u51b0\u7816\u6570 \n\tfor(int x = 0; x < N; x ++)\n\t  for(int y = 0; y < N; y ++)\n\t    if(ground_freeze[x][y] == 4)//\u53ef\u4ee5\u8fdb\u884c\u6536\u96c6 \n\t      inventory ++, collect_num ++, //\u52a0\u5165\u5e93\u5b58 \n\t\t  ground_freeze[x][y] = 0;//\u51b0\u51bb\u5ea6\u6e05\u96f6 \n\tprintf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\",collect_num,inventory);\n}\nbool JUDGE_PUT(int R,int C,int H)//\u5224\u65ad \u67d0\u4f4d\u7f6e \u662f\u5426\u53ef\u4ee5\u653e\u7f6e\u51b0\u7816 \n{\n\tif(ice_block[R][C][H]) return 1;//\u6b64\u4f4d\u7f6e\u5df2\u88ab\u5360\u7528 \n\tif(H == 0) return 0;//\u51b0\u7816\u4e0e\u5730\u9762\u63a5\u89e6 \n\tfor(int i = 0; i < 6; i ++) //\u679a\u4e3e\u7acb\u4f53\u7a7a\u95f4\u5185\u76f8\u90bb\u7684 \u4f4d\u7f6e \n\t  if(R + EXX[i] >= 0 && C + EXY[i] >= 0 && H + EXZ[i] >= 0)\n\t    if(R + EXX[i] < N && C + EXY[i] < N && H + EXZ[i] < HM)\n\t\t  if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]]) //\u6709\u76f8\u90bb\u51b0\u7816 \n\t\t    return 0; //\u653e\u7f6e\u4f4d\u7f6e\u5408\u6cd5 \n\treturn 1;//\u51b0\u7816\u60ac\u7a7a \n}\nvoid PUT_ICE_BLOCK() \n{\n\tint R=read(),C=read(),H=read();\n\tif(! inventory) {printf(\"CIRNO HAS NO ICE_BLOCK\\n\"); return ;}//\u4e0d\u5408\u6cd5\u60c5\u51b5 \n\tif(JUDGE_PUT(R,C,H)) {printf(\"BAKA CIRNO,CAN'T PUT HERE\\n\"); return ;}\n\t\n\tice_block[R][C][H] = 1,inventory --;//\u653e\u7f6e\u51b0\u7816 \n\tif(H == 0) ground_freeze[R][C] = -1;//\u4e0e\u5730\u9762\u63a5\u89e6 ,\u66f4\u6539\u5730\u9762\u51b0\u51bb\u503c \n\tif(R < HR || R > HR + HX - 1 || C < HC || C > HC + HY - 1) printf(\"CIRNO MISSED THE PLACE\\n\");//\u6309\u7167\u653e\u7f6e\u4f4d\u7f6e \u8f93\u51fa \n\telse if(HR + 1 <= R && R <= HR + HX - 2 && HC + 1 <= C && C <= HC + HY - 2) printf(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\");\n\telse printf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\",inventory);\n//\tcheck();\n}\nint DFS1(int R,int C,int H,int FR,int FC,int FH)//dfs \u5224\u65ad\u67d0\u8054\u901a\u5757\u662f\u5426\u60ac\u7a7a \n{\n\tvis[R][C][H] = 1;//\u8bbf\u95ee\u8fc7,\u6253\u6807\u8bb0 \n\tif(H == 0) return 1;//\u6b64\u51b0\u7816 \u4e0e\u5730\u9762\u63a5\u89e6 , \u8bf4\u660e\u6b64\u8fde\u901a\u5757\u5408\u6cd5 \n\tfor(int i = 0; i < 6; i ++)//\u679a\u4e3e\u76f8\u90bb\u7684 \u51b0\u7816 \n\t  if(R + EXX[i] >= 0 && R + EXX[i] <N && C + EXY[i] >= 0) //\u4f4d\u7f6e\u5408\u6cd5 \n\t    if(C + EXY[i] < N && H + EXZ[i] >= 0 && H + EXZ[i] <=HM)\n\t      if(R + EXX[i] != FR || C + EXY[i] != FC || H + EXZ[i] != FH)//\u4e0d\u4e0e \u4e0a\u4e00\u5757\u51b0\u7816\u4f4d\u7f6e\u76f8\u540c \n\t  \t    if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]])//\u6709\u51b0\u7816 \n\t  \t      if(!vis[R + EXX[i]][C + EXY[i]][H + EXZ[i]])//\u8f6c\u79fb \n\t  \t        if(DFS1(R + EXX[i],C + EXY[i],H + EXZ[i],R,C,H)) return 1;//\u8fde\u901a\u5757 \u4e0e\u5730\u9762\u63a5\u89e6 \n\treturn 0;//\u60ac\u7a7a \n}\nint DFS2(int R,int C,int H,int FR,int FC,int FH)//dfs \u5c06\u67d0\u8054\u901a\u5757 \u5220\u9664 \n{\n\tint ret = 0;//\u8ba1\u7b97 \u5220\u9664\u7684\u4e2a\u6570 \n\tfor(int i = 0; i < 6; i ++)\n\t  if(R + EXX[i] >= 0 && R + EXX[i] < N && C + EXY[i] >= 0) //\u679a\u4e3e \u5408\u6cd5\u7684\u76f8\u90bb\u51b0\u7816 \n\t    if(C + EXY[i] < N && H + EXZ[i] >= 0 && H + EXZ[i] <= HM)\n\t      if(R + EXX[i] != FR || C + EXY[i] != FC || H + EXZ[i] != FH)\n\t  \t    if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]])\n\t  \t      ret += DFS2(R + EXX[i],C + EXY[i],H + EXZ[i],R,C,H);//dfs\u6df1\u5165 \n\treturn ice_block[R][C][H] = 0, ret + 1;//\u66f4\u65b0\u51b0\u7816\u5b58\u5728\u60c5\u51b5,\u66f4\u65b0\u5220\u9664\u4e2a\u6570 \n}\nvoid REMOVE_ICE_BLOCK()\n{\n\tint R = read(), C = read(), H = read(); \n\tif(!ice_block[R][C][H]) {printf(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\"); return ;}//\u4e0d\u5408\u6cd5\u60c5\u51b5\n\t\n\tice_block[R][C][H] = 0, inventory ++;//\u79fb\u9664\u51b0\u7816, \u5e76 \u52a0\u5165\u5e93\u5b58 \n\tif(H == 0) ground_freeze[R][C] = 0;//\u5c06\u5730\u9762 \u51b0\u7816\u79fb\u8d70,\u51b0\u51bb\u5ea6\u7f6e\u96f6 \n\t\n\tint sum_break = 0;//\u788e\u6389\u51b0\u7816\u4e2a\u6570 \n\tfor(int i = 0; i < 6; i ++)//\u679a\u4e3e\u88ab\u5220\u9664\u4f4d\u7f6e \u76f8\u90bb\u7684 \u5b58\u5728\u7684 \u51b0\u7816 \n\t  if(R + EXX[i] >= 0 && R + EXX[i] < N && C + EXY[i] >= 0) \n\t    if(C + EXY[i] < N && H + EXZ[i] >= 0 && H + EXZ[i] <= HM)\n\t      if(ice_block[R + EXX[i]][C + EXY[i]][H + EXZ[i]]) \n\t  \t  {\n\t  \t  \tmemset(vis,0,sizeof(vis));//dfs\u5224\u65ad \u76f8\u90bb\u51b0\u7816 \u8fde\u901a\u5757\u662f\u5426\u4e0e \u5730\u9762\u63a5\u89e6 \n\t  \t    if(!DFS1(R + EXX[i],C + EXY[i],H + EXZ[i],-1,-1,-1))\n\t  \t      sum_break += DFS2(R + EXX[i],C + EXY[i],H + EXZ[i],-1,-1,-1);\t\n\t\t  }\n\t\n\tprintf(\"CIRNO REMOVED AN ICE_BLOCK\");//\u6309\u60c5\u51b5\u8f93\u51fa \n\tif(sum_break) printf(\",AND %d BLOCK(S) ARE BROKEN\",sum_break);\n\tprintf(\"\\n\");\n}\nvoid MAKE_ROOF()\n{\n\tint remove = 0, filled = 0, corner_filled = 0;//\u5224\u65ad \u662f\u5426\u79fb\u9664\u591a\u4f59 , \u586b\u8865\u6b8b\u7f3a , \u5899\u89d2\u6b8b\u7f3a \n\tmax_high = find_max_high() + 1;//\u627e\u5230 \u5899\u58c1\u6700\u9ad8\u9ad8\u5ea6 \n\t//\u642d\u5efa \u623f\u9876:\n\t{\n\t\tfor(int x = HR; x < HR + HX; x ++)//\u679a\u4e3e \u6700\u9ad8\u9ad8\u5ea6\u5904 \u6240\u6709\u4f4d\u7f6e \n\t\t  for(int y = HC; y < HC + HY; y ++)\n\t\t  {\n\t\t  \tinventory -= (!ice_block[x][y][max_high]);//\u66f4\u65b0\n\t\t  \tice_block[x][y][max_high] = 1;\n\t\t  }\n\t\tif(inventory < 0) {printf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\\n\"); return ;}//\u4e0d\u5408\u6cd5\u60c5\u51b5 \n\t\tif(max_high < 2 || (HX - 2)*(HY - 2)*max_high < 2) {printf(\"SORRY CIRNO,HOUSE IS TOO SMALL\\n\"); return ;}\n\t}\n\t//\u79fb\u9664 \u591a\u4f59\u51b0\u7816:\n\t{\n\t\tint inside = 0, outside = 0;\n\t\tremove_excess(outside,inside);// \u79fb\u9664\u591a\u4f59 \n\t\tremove = (inside || outside);//\u5224\u65ad\u662f\u5426 \u79fb\u9664 \n\t\t\n\t\tprintf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\",inside);//\u6309\u60c5\u51b5\u8f93\u51fa \n\t\tprintf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\",outside);\n\t\tif(!DFS1(HR + 1,HC + 1,max_high,-1,-1,-1)) {printf(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\\n\"); return ;}//\u5224\u65ad \u5c4b\u9876\u8fde\u901a\u5757\u662f\u5426\u60ac\u7a7a \n\t}\n\t//\u586b\u8865 \u5899\u58c1\u6b8b\u7f3a:\n\t{\n\t\tfilled = fill_high_wall(max_high);//\u586b\u8865 \u9ad8\u5ea6>=2\u5904 \n\t\tfilled += find_door();//\u5728\u9ad8\u5ea6 <2\u5904\u5bfb\u627e\u95e8,\u5e76\u586b\u8865 \n\t\tif(inventory < 0) {printf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\"); return ;}//\u4e0d\u5408\u6cd5\u60c5\u51b5 \n\t}\n\t//\u68c0\u67e5\u5c0f\u5c4b: \n\t{\n\t\tprintf(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\");\n\t\tif(door_high == 2) printf(\"DOOR IS OK\\n\");//\u6709 \u9ad8\u4e3a2\u7684\u95e8 \n\t\telse inventory += (2 - door_high), printf(\"HOUSE HAS NO DOOR\\n\");//\u79fb\u9664\u51b0\u5757\u5efa\u95e8,\u5e93\u5b58\u589e\u52a0 \n\t\t\n\t\tif(filled) printf(\"WALL NEED TO BE FIXED\\n\");//\u586b\u8865\u8fc7\u6b8b\u7f3a \n\t\telse printf(\"WALL IS OK\\n\");\n\t\t\n\t\tfor(int z = 0; z <= max_high; z ++) //\u5224\u65ad \u5899\u89d2\u7684\u5b8c\u6574\u6027 \n\t\t  for(int x = HR; x < HR + HX; x += HX - 1)\n\t\t    for(int y = HC; y < HC + HY; y += HY - 1)\n\t\t      if(!ice_block[x][y][z]) corner_filled = 1, inventory --;\n\t\tif(corner_filled) printf(\"CORNER NEED TO BE FIXED\\n\");\n\t\telse printf(\"CORNER IS OK\\n\");\n\t\t\n\t\tprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\",inventory >= 0?inventory:0);//\u6700\u540e\u7684\u51b0\u7816\u6570 (\u82e5\u4fee\u590d\u8fc7\u5899\u89d2,\u4f1a\u5bfc\u81f4 \u5e93\u5b58<=0,\u6b64\u65f6\u8fd8\u4f1a\u518d\u5236\u9020\u51b0\u7816\u5e76\u8865\u9f50\u7a7a\u7f3a \n\t\tif((!remove) && (!filled) && door_high == 2 && (!corner_filled) && (!door_dis)) //\u4e0d\u6127\u662f\u742a\u9732\u8bfa! \u8f7b\u6613\u5c31\u505a\u5230\u4e86\u6211\u4eec\u505a\u4e0d\u5230\u7684\u4e8b\n\t\t  printf(\"CIRNO IS PERFECT!\");\n\t}\n}\n//MAKE_ROOF \u5b50\u64cd\u4f5c \nint find_max_high()//\u5bfb\u627e \u5899\u58c1\u6700\u9ad8\u5904 \n{ \n\tfor(int i = HM; i >= 0; i --)//\u81ea\u4e0a\u5f80\u4e0b\u679a\u4e3e \u9ad8\u5ea6 \n\t{\n\t  for(int j = HC; j < HC + HY; j ++)//\u679a\u4e3e\u6bcf\u4e00\u9762\u5899 \n\t    if(ice_block[HR][j][i]) return i;\n\t  for(int j = HC; j < HC + HY; j ++)\n\t    if(ice_block[HR + HX - 1][j][i]) return i;\n\t  for(int j = HR; j < HR + HX; j ++)\n\t    if(ice_block[j][HC][i]) return i;\n\t  for(int j = HR; j < HR + HX; j ++)\n\t    if(ice_block[j][HC + HY - 1][i]) return i;\n\t}\n\treturn -1; \n}\nbool judge_outside(int x,int y,int z)//\u5224\u65ad \u67d0\u4f4d\u7f6e \u662f\u5426\u5728\u623f\u5916 \n{\n\tif(HR <= x && x < HR + HX)\n\t  if(HC <= y && y < HC + HY)\n\t    if(z <= max_high) return 0;\n\treturn 1;\n}\nbool judge_inside(int x,int y,int z)//\u5224\u65ad \u67d0\u4f4d\u7f6e \u662f\u5426\u5728\u623f\u5185 \n{\n\tif(HR < x && x < HR + HX - 1)\n\t  if(HC < y && y < HC + HY - 1)\n\t    if(z < max_high) return 1;\n\treturn 0;\n}\nvoid remove_excess(int &outside,int &inside)//\u79fb\u9664 \u591a\u4f59\u65b9\u5757 \n{\n\tfor(int x = 0; x < N; x ++)//\u679a\u4e3e \u7acb\u4f53\u7a7a\u95f4\u5185 \u6bcf\u4e00\u4e2a\u4f4d\u7f6e \n\t  for(int y = 0; y < N; y ++)\n\t\tfor(int z = 0; z <= HM; z ++)\n\t\t  if(ice_block[x][y][z])//\u5b58\u5728\u51b0\u5757 \n\t\t  {\n\t\t    if(judge_outside(x,y,z)) inventory ++, outside ++, ice_block[x][y][z] = 0;//\u5728\u5c4b\u5916 \n\t\t    if(judge_inside(x,y,z)) inventory ++, inside ++, ice_block[x][y][z] = 0;//\u5728\u5c4b\u5185 \n\t\t\tif(!ice_block[x][y][z])//\u51b0\u5757\u88ab\u79fb\u9664\u540e \n\t\t\t  for(int i = 0; i < 6; i ++)\n\t  \t\t\tif(x + EXX[i] >= 0 && x + EXX[i] < N && y + EXY[i] >= 0) //\u679a\u4e3e\u76f8\u90bb\u5408\u6cd5\u4f4d\u7f6e\u7684 \u7684 \u5b58\u5728\u7684 \u51b0\u7816 \n\t    \t\t  if(y + EXY[i] < N && z + EXZ[i] >= 0 && z + EXZ[i] <= HM)\n\t      \t\t\tif(ice_block[x + EXX[i]][y + EXY[i]][z + EXZ[i]])\n\t\t\t\t\t  if(!judge_outside(x + EXX[i],y + EXY[i],z + EXZ[i]) && (!judge_inside(x + EXX[i],y + EXY[i],z + EXZ[i])))//\u5982\u679c\u5728 \u5899\u58c1\u4e0a \n\t\t\t\t\t\t{\n\t\t\t\t\t\t  memset(vis,0,sizeof(vis));\t\n\t\t\t\t\t\t  if(!DFS1(x + EXX[i],y + EXY[i],z + EXZ[i],-1,-1,-1)) //\u5982\u679c \u79fb\u9664\u6b64\u4f4d\u7f6e\u540e \u5899\u58c1\u4e0a\u7684 \u51b0\u7816\u4f1a\u6454\u788e \n\t\t\t\t\t\t    inventory ++, ice_block[x + EXX[i]][y + EXY[i]][z + EXZ[i]] = 0;//\u5c06\u5176\u79fb\u9664 ,\u52a0\u5165\u5e93\u5b58 \n\t\t\t\t\t\t}\n\t\t  }\n}\nbool fill_high_wall(int max_high)//\u586b\u8865 \u9ad8\u5ea6 >= 2\u5904\u7684\u5899 \n{\n\tbool filled = 0;\n\tfor(int x = HR; x < HR + HX; x ++)//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \n\t  for(int y = HC; y < HC + HY; y ++)\n\t\tfor(int z = 2; z <= max_high; z ++)\n\t\t  if(!judge_outside(x,y,z))//\u5224\u65ad \u5728\u5899\u4e0a \n\t\t\tif(!judge_inside(x,y,z))\n\t\t\t  if(!ice_block[x][y][z]) \n\t\t      {\n\t\t      \tif(x == HR && y == HC) continue;//\u5728\u5899\u89d2,\u5219 \u8df3\u8fc7 \n\t\t  \t\tif(x == HR && y == HC + HY - 1) continue;\n\t\t  \t\tif(x == HR + HX - 1 && y == HC) continue;\n\t\t  \t\tif(x == HR + HX - 1 && y== HC + HY - 1) continue;\n\t\t  \t\tinventory --, filled = 1, ice_block[x][y][z] = 1;//\u586b\u8865 \n\t\t\t  }\n\treturn filled;//\u8fd4\u56de \u662f\u5426\u586b\u8865\u8fc7 \n}\nint judge_corner(int x,int y)//\u5224\u65ad\u4f4d\u7f6e (x,y) \u662f\u5426\u4e0e\u5899\u89d2\u76f8\u90bb\n{\n\tint ret = 0; //\u8868\u793a \u4e00\u95e8\u7684\u5019\u9009\u4f4d\u7f6e\u76f8\u90bb\u7684\u5899\u89d2 \u7684 \u72b6\u6001 \n\tif(x == HR)//\u679a\u4e3e\u5e76\u5224\u65ad ,  \n\t{\n\t  if(y == HC + 1) ret += 1;\n\t  else if(y == HC + HY - 2) ret += 2;\n\t}\n\tif(x == HR + 1)\n\t{\n\t  if(y == HC) ret += 1;\n\t  else if(y == HC + HY - 1) ret += 2;\n\t}\n\tif(x == HR + HX - 2)\n\t{\n\t  if(y == HC) ret += 4;\n\t  else if(y == HC + HY - 1) ret += 8;\n\t}\n\tif(x == HR + HX - 1)\n\t{\n\t  if(y == HC + 1) ret += 4;\n\t  else if(y == HC + HY - 2) ret += 8;\n\t}\n\treturn ret;\n}\nvoid corner_could_see(int x,int y,int z,int h,int &corner,int &corner_pos)//\u8ba1\u7b97\u4e00\u4e2a\u4f4d\u7f6e(x,y,z) \u80fd\u770b\u5230\u7684\u5899\u89d2\u7684\u6b8b\u7f3a\u6570 \n{\n\tcorner_pos = judge_corner(x, y);//\u5224\u65ad \u662f\u5426\u54ea\u4e2a\u5899\u89d2, \u5e76\u83b7\u5f97 \u6b64\u4f4d\u7f6e\u76f8\u90bb\u7684\u5899\u89d2 \u7684 \u72b6\u6001  \n\tcorner = 0;\n\tif(!corner_pos) return;//\u4e0d\u4e0e\u5899\u89d2\u76f8\u90bb \n\tfor(int i = 0; i < 4; i ++)//\u679a\u4e3e\u5899\u89d2 \n\t  if((1 << i )& corner_pos)\n\t  {\n\t    int x1 = corner_x[1 << i], y1 = corner_y[1 << i];//\u8ba1\u7b97\u6b8b\u7f3a \n\t    corner += (!ice_block[x1][y1][z]) + (!ice_block[x1][y1][!z])*(h == 2);\n\t  }\n} \nbool find_door()//\u5728 \u9ad8\u5ea6<2\u7684\u4f4d\u7f6e \u627e\u95e8 ,\u5e76\u586b\u8865\u975e\u95e8\u533a\u57df\n{\n\tstd:: vector <alternative_position> pos;//\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \n\tint incomplete = 0, filled_sum = 0, corner_filled = 0;//\u6b8b\u7f3a\u6570, \u586b\u8865\u6570, \u5899\u89d2\u4f4d\u7f6e\u7684\u586b\u8865\u6570 \n\tint midX1 = (HX + 1) /2 + HR - 1, midX2 = (HX + 2) /2 + HR - 1;//\u4e24\u5899\u58c1\u4e2d\u95f4\u4f4d\u7f6e \n\tint midY1 = (HY + 1) /2 + HC - 1, midY2 = (HY + 2) /2 + HC - 1;\n\n\tfor(int x = HR + 1, corner, corner_pos; x < HR + HX - 1; x ++)//\u679a\u4e3e \u5899\u4e0a\u4f4d\u7f6e \n\t  for(int y = HC; y < HC + HY; y += HY - 1)\n\t  \tif(!ice_block[x][y][0])//\u6839\u636e \u6b8b\u7f3a\u7684\u5b58\u5728\u60c5\u51b5 \u8fdb\u884c\u5224\u65ad ,\u5e76\u52a0\u5165\u5019\u9009\u4f4d\u7f6e \n\t  \t{\n\t  \t  int z = 0, h = 1 + (!ice_block[x][y][1]);  incomplete += h;\n\t  \t  corner_could_see(x,y,z,h,corner,corner_pos);\n\t  \t  pos.push_back((alternative_position) {x,y,0,h,x,corner,corner_pos,midX1,midX2});\n\t\t}\n\t\telse if(!ice_block[x][y][1])\n\t\t{\n\t  \t  corner_could_see(x,y,1,1,corner,corner_pos);  incomplete += 1;\n\t  \t  pos.push_back((alternative_position) {x,y,1,1,x,corner,corner_pos,midX1,midX2});\n\t\t}\n\t\t\n\tfor(int y = HC + 1, corner, corner_pos; y < HC + HY - 1; y ++)//\u679a\u4e3e \u5899\u4e0a\u4f4d\u7f6e \n\t  for(int x = HR; x < HR + HX; x += HX - 1)\n\t  \tif(!ice_block[x][y][0])//\u6839\u636e \u6b8b\u7f3a\u7684\u5b58\u5728\u60c5\u51b5 \u8fdb\u884c\u5224\u65ad ,\u5e76\u52a0\u5165\u5019\u9009\u4f4d\u7f6e \n\t  \t{\n\t  \t  int z = 0, h = 1 + (!ice_block[x][y][1]); incomplete += h;\n\t  \t  corner_could_see(x,y,z,h,corner,corner_pos);\n\t  \t  pos.push_back((alternative_position) {x,y,0,h,y,corner,corner_pos,midY1,midY2});\n\t\t}\n\t\telse if(!ice_block[x][y][1])\n\t\t{\n\t\t  corner_could_see(x,y,1,1,corner,corner_pos); incomplete += 1;\n\t  \t  pos.push_back((alternative_position) {x,y,1,1,y,corner,corner_pos,midY1,midY2});\n\t\t}\n\t\n\tstd::sort(pos.begin(), pos.end(), cmp);//\u6392\u5e8f\u4f30\u503c \n\tif(pos.size()) //\u82e5\u6709\u5019\u9009\u4f4d\u7f6e \u53ef\u4ee5\u9009\u62e9 ,\u9009\u62e9 \u6700\u4f18\u7684 \u4f4d\u7f6e \n\t{\n\t  filled_sum = incomplete - pos[0].h + pos[0].corner; \n\t  doorx = pos[0].x, doory = pos[0].y, doorz =  pos[0].z, door_high =pos[0].h;\n\t  door_dis = min(abs(pos[0].wall - pos[0].mid1), abs(pos[0].wall - pos[0].mid2));\n\t}\n\tif(door_high == 1 && filled_sum < inventory) //\u5df2\u9009\u62e9\u7684\u6b8b\u7f3a\u5927\u5c0f\u4e3a1, \u5e93\u5b58\u51b0\u5757\u8db3\u591f\u9009\u62e9\u66f4\u5927\u7684\u6b8b\u7f3a \n\t  for(int i = 1, size = pos.size(); i < size; i ++)//\u627e\u5230 \u6700\u4f18\u7684 \u9ad8\u5ea6\u4e3a2\u7684\u6b8b\u7f3a \n\t    if(pos[i].h == 2) \n\t    {\n\t      filled_sum = incomplete - pos[i].h + pos[i].corner;\n\t  \t  doorx = pos[i].x, doory = pos[i].y, doorz =  pos[i].z, door_high = pos[i].h;\n\t  \t  door_dis = min(abs(pos[i].wall - pos[i].mid1), abs(pos[i].wall - pos[i].mid2));\n\t  \t  break;\n\t\t}\n\tinventory -= filled_sum;//\u66f4\u65b0\u5e93\u5b58 \n\t\n\tfor(int i = 0, size = pos.size(); i < size; i ++)//\u586b\u8865 \u975e\u95e8\u7a7a\u7f3a \n\t  if(pos[i].x != doorx && pos[i].y != doory && pos[i].z != doorz)//\u7a7a\u7f3a \u4e0d\u4e3a\u95e8 \n\t  {\n\t  \tint x = pos[i].x, y = pos[i].y, z = pos[i].z;\n\t\tif(pos[i].h == 2) ice_block[x][y][1] = 1;\n\t\tice_block[x][y][z] = 1;\n\t  }\n\t  else if(pos[i].x == doorx && pos[i].y == doory && pos[i].z == doorz && pos[i].corner_pos)\n\t  {\n\t  \tfor(int j = 0; j < 4; j ++) //\u7a7a\u7f3a\u4e3a\u95e8 , \u586b\u8865 \u53ef\u4ee5\u770b\u5230\u7684\u5899\u89d2\u7a7a\u7f3a \n\t\t  if((1 << j) & pos[i].corner_pos)//\u679a\u4e3e\u5899\u89d2 \n\t\t  {\n\t\t  \tint x = corner_x[1 << j], y = corner_y[1 << j];//\u8ba1\u7b97\u7b54\u6848 \n\t  \t\tcorner_filled += (!ice_block[x][y][doorz]);\n\t\t\tice_block[x][y][doorz] = 1;\n\t  \t\tif(door_high == 2) corner_filled +=(!ice_block[x][y][!doorz]), ice_block[x][y][!doorz] = 1;\n\t\t  }\n\t  }\n\treturn filled_sum;\n}\n```\n\n---\n\n\n\u6700\u540e\u65e0\u826f\u5ba3\u4f20\u4e00\u4e0b\u535a\u5ba2 $wwwwww$      \n[\u6587\u7ae0\u5217\u8868 - \u5730\u7075\u6bbf - \u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/koishikoishi/) \n\n$\\text{Updata on 2019.10.19 :}$    \n\n\u6570\u636e\u52a0\u5f3a\u540e \u539f\u9898\u89e3\u88ab\u5361\u6389\u4e86= =   \n\u4fee\u6539\u4e86 \u5bf9\u5728\u95e8\u4e0e\u67f1\u5b50\u76f8\u90bb\u65f6 \u5bf9\u67f1\u5b50\u6b8b\u7f3a\u7684\u5224\u65ad   \n\u6dfb\u52a0\u4e86 **\u7b97\u6cd5\u5b9e\u73b0**   ",
        "postTime": 1570447327,
        "uid": 186186,
        "name": "\u7075\u4e4c\u8def\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3693 \u3010\u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b\u3011"
    },
    {
        "content": "\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4f1a\u4ece\u5de5\u7a0b\u9898\u76ee\u7684\u89d2\u5ea6\u5bf9 [P3693 \u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b](https://www.luogu.com.cn/problem/P3693) \u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u4fdd\u8bc1\u9605\u8bfb\u7684\u4f53\u9a8c\uff0c\u5efa\u8bae\u5148\u5bf9\u9898\u76ee\u8fdb\u884c\u9605\u8bfb\u3002\u5982\u679c\u53ea\u662f\u770b\u4e2a\u723d\u7684\u8bdd\uff0c\u6211\u4f1a\u5728\u6bcf\u4e00\u6b65\u8868\u660e\u9898\u9762\u4f9d\u636e\u3002\n\n\u672c\u6587\u4e2d\u7684 `M` \u4ee3\u8868\u9898\u76ee\u4e2d\u7684 $H_M$\uff0c\u5176\u4f59\u540c\u7406\u3002\n\n---\n\n## Part 0: \u5fc5\u987b\u5143\u7d20\u6784\u9020\n\n\u4ece\u9898\u76ee\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u6574\u4e2a\u573a\u5730\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a $N*N*M$ \u7684\u7acb\u65b9\u4f53\uff0c\u800c\u742a\u9732\u8bfa\u8fd9\u4e2a \u2468 \u4f1a\u5728\u8fd9\u91cc\u9762\u73a9\u5f39\u5e55\u5efa\u9ad8\u697c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u7136\u9700\u8981\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\u8fdb\u884c\u4fe1\u606f\u5b58\u50a8\u3002\n\n\u4ece\u540e\u9762\u63d0\u5230\u7684\u4fe1\u606f\u4e2d\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e2d\u4f1a\u6709 0-4 \u7684\u5bd2\u51b7\u72b6\u6001\u548c\u4e00\u4e2a\u51b0\u5757\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u51b0\u5757\u6620\u5c04\u81f3 5 \u5e76\u50a8\u5b58\u5230\u4e09\u7ef4\u6570\u7ec4\u4e2d\u3002\n\n```cpp\nstruct IceHouse{\n\tshort V[20][20][30];\n\tIceHouse(){memset(V, 0, sizeof(V));}\n};\n```\n\n\u5728\u5e73\u5e38\u6211\u4eec\u4f7f\u7528\u7684 dfs \u4e2d\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u82e5\u5e72\u6574\u578b\u53d8\u91cf\u5bf9\u5750\u6807\u8fdb\u884c\u8868\u793a\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7ef4\u5ea6\u4e0a\u4e34\u8fd1\u70b9\u7684 dfs \u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u5bf9\u4e8e\u6bcf\u4e2a\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c `_x[i] = x[i] + dir[i]`\u3002\u4e3a\u4e86\u51c6\u786e\u6027\u8003\u8651\uff0c\u6211\u4eec\u9700\u8981\u66ff\u6362\u8fd9\u79cd\u6bd4\u8f83\u5bb9\u6613\u5199\u9519\u7684\u5f62\u5f0f\uff0c\u8f6c\u800c\u4f7f\u7528\u4e09\u7ef4\u5411\u91cf\u5bf9\u4e09\u7ef4\u7a7a\u95f4\u4e0a\u7684\u70b9\u8fdb\u884c\u8868\u8fbe\u3002\u4e3a\u4e86\u8fce\u5408\u524d\u9762\u7684\u516c\u5f0f\uff0c\u6211\u4eec\u4e3a\u8fd9\u4e2a\u4e09\u7ef4\u5411\u91cf\u52a0\u5165\u52a0\u6cd5\u7684\u529f\u80fd\u3002\n\n```cpp\nstruct Vec3{\n\tint x, y, z;\n\tVec3(int x=0, int y=0, int z=0)\n\t\t:x(x), y(y), z(z){}\n\tVec3 operator + (const Vec3& q)const{\n\t\treturn Vec3(x+q.x, y+q.y, z+q.z);\n\t}\n};\n```\n\n\u5728\u6211\u4eec\u4f7f\u7528 `Vec3` \u7c7b\u578b\u5bf9\u4f4d\u7f6e\u8fdb\u884c\u8868\u8fbe\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u5f00\u59cb\u7684 `IceHouse` \u7c7b\u578b\u8fdb\u884c\u9002\u914d\u3002\u6211\u4eec\u5bf9 `IceHouse` \u7c7b\u578b\u8fdb\u884c\u4fee\u6539\uff1a\n\n```cpp\n// return if x <= y <= z\ninline bool inRange(int x, int y, int z){\n\treturn y>=x && y<=z;\n}\nstruct IceHouse{\n\tshort V[20][20][30];\n\tIceHouse(){\n\t\tmemset(V, 0, sizeof(V));\n\t}\n\t// check if the block is in the range\n\tinline bool check(Vec3 q){\n\t\treturn inRange(0, q.x, N-1)\n\t\t\t&& inRange(0, q.y, N-1)\n\t\t\t&& inRange(0, q.z, M);\n\t}\n\t// get the value of the block\n\tinline short g(Vec3 x){\n\t\tif(!check(x))\treturn -1;\n\t\treturn V[x.x][x.y][x.z];\n\t}\n\t// freeze the block\n\tinline void f(Vec3 x){\n\t\tV[x.x][x.y][x.z] = min(V[x.x][x.y][x.z]+1, 4);\n\t}\n\t// change the information of the block\n\tinline void c(Vec3 x, short v){\n\t\tV[x.x][x.y][x.z]=v;\n\t}\n}House;\n```\n\n\u4e3a\u4e86\u5bf9\u4e4b\u540e\u7684\u4e00\u4e9b dfs \u63d0\u4f9b\u8f85\u52a9\uff0c\u5728\u6b64\u5b9a\u4e49\u4e00\u4e9b\u5e38\u89c1\u7684\u65b9\u5411\u5411\u91cf\uff1a\n\n```cpp\n// 2D direction vectors for UDLR\n_2D4 = vector<Vec3>{Vec3(-1, 0, 0), Vec3(1, 0, 0), Vec3(0, -1, 0), Vec3(0, 1, 0)};\n// 2D direction vectors for UDLR-UL-UR-DL-DR\n_2D8 = vector<Vec3>{Vec3(-1, 0, 0), Vec3(-1, -1, 0), Vec3(0, -1, 0), Vec3(1, -1, 0),\n\t\t\t\t\t\tVec3(1, 0, 0), Vec3(1, 1, 0), Vec3(0, 1, 0), Vec3(-1, 1, 0)};\n// 3D direction vectors for UDLRFB\n_3D6 = vector<Vec3>{Vec3(1, 0, 0), Vec3(-1, 0, 0), Vec3(0, 1, 0), Vec3(0, -1, 0),\n\t\t\t\t\t\tVec3(0, 0, 1), Vec3(0, 0, -1)};\n```\n\n\u5728\u51c6\u5907\u597d\u8fd9\u4e9b\u57fa\u7840\u4fe1\u606f\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u786e\u7684\u5199\u51fa\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u4e86\u3002\n\n## Part. 1: IceBarrage()\n\n\u5728\u7b2c\u4e00\u4e2a\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4e00\u70b9\u5411\u4e00\u4e2a\u65b9\u5411\u53d1\u9001\u5f39\u5e55\uff0c\u5728\u6ca1\u6709\u963b\u62e6\u548c\u8870\u5f31\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u589e\u52a0\u7ecf\u8fc7\u5757\u7684\u5bd2\u51b7\u503c\u3002\n\n\u6211\u4eec\u901a\u8fc7 `_2D8` \u83b7\u5f97\u5bf9\u5e94\u5411\u91cf\uff0c\u6bcf\u6b21\u5bf9\u5f53\u524d\u5411\u91cf\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u4ee5\u53ca\u5f53\u524d\u5757\u662f\u5426\u4e3a\u51b0\u5757\u72b6\u6001\u3002\u968f\u540e\u8fdb\u884c\u5224\u65ad\u548c\u7d2f\u52a0\uff0c\u5e76\u4e14\u5c06\u5f53\u524d\u5411\u91cf\u52a0\u4e0a\u65b9\u5411\u5411\u91cf\u5373\u53ef\u3002\n\n```cpp\nint IceBlock;\ninline void IceBarrage(int R, int C, int D, int S){\n\tVec3 v = _2D8[D];\n\tVec3 c = Vec3(R, C, 0);\n\tint s = 0; ++S;\n\twhile(S--){\n\t\tif(!House.check(c) || House.g(c)==5)\n\t\t\tbreak;\n\t\tif(House.g(c) != 4)\t++s;\n\t\tHouse.f(c);\n\t\tc = c + v;\n\t}\n\tprintf(\"CIRNO FREEZED %d BLOCK(S)\\n\", s);\n}\n```\n\n\u4ece\u8fd9\u91cc\u5176\u5b9e\u5c31\u53ef\u4ee5\u770b\u51fa\u5de5\u7a0b\u4ee3\u7801\u5199\u6cd5\u4e0a\u7684\u4f18\u52bf\u3002\u5728\u4fdd\u8bc1\u57fa\u7840\u6210\u5206\u4e0d\u51fa\u73b0\u9519\u4e71\u7684\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u4e2d\u7684\u4ee3\u7801\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u5199\u51fa\u5bf9\u5e94\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u51cf\u8f7b\u4e86\u8c03\u8bd5\u538b\u529b\u3002\u8fd9\u4e00\u70b9\u5728\u4e4b\u540e\u7684\u5f88\u591a\u5730\u65b9\u53ef\u4ee5\u5c55\u73b0\u3002\n\n## Part. 2: MakeIceBlock()\n\n\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5730\u9762\u4e0a\u7684\u5bd2\u51b7\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u4e14\u5c06\u5bd2\u51b7\u503c\u4e3a 4 \u7684\u5757\u8fdb\u884c\u6e05\u7406\u3002\n\n\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u626b\u63cf\u6574\u4e2a\u5730\u9762\u5373\u53ef\u3002\n\n```cpp\ninline void MakeIceBlock(){\n\tint s = 0;\n\tfor(int i = 0; i < N; i++)\n\t\tfor(int j = 0; j < N; j++)\n\t\t\tif(House.g(Vec3(i, j, 0)) == 4){\n\t\t\t\tHouse.c(Vec3(i, j, 0), 0);\n\t\t\t\t++s;\n\t\t\t}\n\tIceBlock += s;\n\tprintf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\", s, IceBlock);\n}\n```\n\n## Part. 3: PutIceBlock() \n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u51b0\u5757\u653e\u5728\u4e00\u4e2a\u5757\u4e0a\u3002\u4f46\u662f\u5728\u8fd9\u4e00\u4e2a\u5730\u65b9\uff0c\u5bf9\u7ec6\u8282\u7684\u5904\u7406\u5df2\u7ecf\u5f00\u59cb\u4e86\u8089\u773c\u53ef\u89c1\u7684\u5347\u7ea7\u3002\n\n\u5bf9\u4e8e\u201c\u51b0\u7816\u5c06\u653e\u5728\u534a\u7a7a\u4e2d\uff0c\u65e0\u6cd5\u4f9d\u9644\u5176\u4ed6\u4efb\u4f55\u51b0\u7816\u201d\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u6210 `p.z==0`\uff08\u5728\u5730\u4e0a\uff09\u4ee5\u53ca `(p+_3D6[i]) => IceBlock`\uff08\u5728\u7a7a\u4e2d\uff0c\u9700\u8981\u4f9d\u8d56\uff09\u4e24\u4e2a\u6761\u4ef6\u3002\u5f88\u8f7b\u677e\u5199\u51fa\u51fd\u6570\uff1a\n\n```cpp\n// check if the block is close to something\ninline bool AttachmentCheck(Vec3 v){\n\tif(v.z == 0)\treturn true;\n\tfor(auto x: _3D6)\n\t\tif(House.g(v + x) == 5)\treturn true;\n\treturn false;\n}\n```\n\n\u968f\u540e\u7684\u4efb\u52a1\u53d8\u6210\u7b80\u5355\u7684\u53ef\u884c\u6027\u5224\u65ad\uff0c\u76f4\u63a5\u8ba8\u8bba\u5373\u53ef\uff1a\n\n```cpp\ninline void PutIceBlock(int r, int c, int h){\n\tVec3 v(r, c, h);\n\t// no ice block left\n\tif(IceBlock == 0){\n\t\tprintf(\"CIRNO HAS NO ICE_BLOCK\\n\");\n\t\treturn;\n\t}\n\t// cannot be put\n\tif(House.g(v) == 5 || !AttachmentCheck(v)){\n\t\tprintf(\"BAKA CIRNO,CAN'T PUT HERE\\n\");\n\t\treturn;\n\t}\n\tHouse.c(v, 5); --IceBlock;\n\t// check if the block is at the wrong place\n\tif(v.x < R || v.x > R+X-1 || v.y < C || v.y > C+Y-1)\n\t\tprintf(\"CIRNO MISSED THE PLACE\\n\");\n\telse if(v.x >= R+1 && v.x <= R+X-2 && v.y >= C+1 && v.y <= C+Y-2)\n\t\tprintf(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\");\n\telse\n\t\tprintf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\", IceBlock);\n}\n```\n\n## Part. 4: RemoveIceBlock()\n\n\u5728\u8fd9\u4e2a\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u51b0\u5757\u79fb\u9664\uff0c\u5e76\u4e14\u8ba1\u7b97\u548c\u6e05\u7406\u6d6e\u7a7a\u7684\u51b0\u5757\u3002\n\n\u5728\u5bf9\u5f02\u5e38\u8fdb\u884c\u5904\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u5220\u9664\u8fd9\u4e2a\u51b0\u5757\u540e\u54ea\u4e9b\u5757\u4f1a\u60ac\u6d6e\u5728\u7a7a\u4e2d\u3002\u6b64\u65f6\u9700\u8981\u5bf9\u8fd9\u4e2a\u51b0\u5757\u4e34\u8fd1\u7684\u516d\u4e2a\u5757\u8fdb\u884c dfs\uff0c\u5e76\u4e14\u67e5\u770b\u662f\u5426\u6709\u8d34\u8fd1\u5730\u9762\u7684\u5757\u3002\n\n```cpp\nint BrokenIce;\nbool AttachmentIf;\nbool hav[20][20][30];\nvector<Vec3> List;\nvoid dfsRemove(Vec3 v){\n\thav[v.x][v.y][v.z] = true;\n\tList.push_back(v);\n\tif(v.z == 0)\tAttachmentIf = true;\n\tfor(auto x: _3D6){\n\t\tVec3 p = v + x;\n\t\tif(House.g(p) == 5 && !hav[p.x][p.y][p.z])\n\t\t\tdfsRemove(p);\n\t}\n}\n// check if the block is float and remove them\ninline void RemoveFloatIce(Vec3 v){\n\tif(House.g(v) != 5)\treturn;\n\tAttachmentIf = false;\n\tdfsRemove(v);\n\tfor(auto y: List)\n\t\thav[y.x][y.y][y.z] = false;\n\tif(!AttachmentIf){\n\t\tBrokenIce += List.size();\n\t\tfor(auto y: List)\n\t\t\tHouse.c(y, 0);\n\t}\n\tList.clear();\n}\n// check if the block is float\ninline bool isFloatIce(Vec3 v){\n\tif(House.g(v) != 5)\treturn false;\n\tAttachmentIf = false;\n\tdfsRemove(v);\n\tfor(auto y: List)\n\t\thav[y.x][y.y][y.z] = false;\n\tList.clear();\n\treturn !AttachmentIf;\n}\n```\n\n\u968f\u540e\u7684\u4efb\u52a1\u53d8\u6210\u7b80\u5355\u7684\u53ef\u884c\u6027\u5224\u65ad\uff0c\u76f4\u63a5\u8ba8\u8bba\u5373\u53ef\uff1a\n\n```cpp\ninline void RemoveIceBlock(int r, int c, int h){\n\tVec3 v(r, c, h);\n\t// no ice block here\n\tif(House.g(v) != 5){\n\t\tprintf(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\");\n\t\treturn;\n\t}\n\tHouse.c(v, 0);\n\tBrokenIce = 0;\n\t// remove the float ice block\n\tfor(auto x: _3D6)\n\t\tRemoveFloatIce(v + x);\n\tif(BrokenIce)\n\t\tprintf(\"CIRNO REMOVED AN ICE_BLOCK,AND %d BLOCK(S) ARE BROKEN\\n\", BrokenIce);\n\telse\tprintf(\"CIRNO REMOVED AN ICE_BLOCK\\n\");\n\t++IceBlock;\n}\n```\n\n## Part. 5: MakeRoof()\n\n\u8fd9\u4e2a\u4efb\u52a1\u662f\u6574\u4e2a\u9898\u76ee\u4e2d\u6700\u96be\u8fdb\u884c\u5206\u6790\u7684\u4efb\u52a1\uff0c\u91cc\u9762\u5305\u542b\u975e\u5e38\u591a\u7684\u5b50\u4efb\u52a1\u3002\u6211\u4eec\u9010\u4e00\u8fdb\u884c\u5206\u6790\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u90a3\u4e9b\u5730\u65b9\u4f4d\u4e8e\u5916\u56f4\uff0c\u54ea\u4e9b\u4f4d\u4e8e\u5c4b\u9876\u7684\u6295\u5f71\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u524d\u9762\u7684 `inRange()` \u51fd\u6570\u8fdb\u884c\u7f16\u5199\u7684\u7b80\u5316\u3002\n\n```cpp\nvector<Vec3> Surround, Roof;\n// initialize the surrounding and the roof\nfor(int i = 0; i < N; i++)\n\tfor(int j = 0; j < N; j++){\n\t\tif(inRange(R, i, R+X-1)\n\t\t&& inRange(C, j, C+Y-1)\n\t\t&& (!inRange(R+1, i, R+X-2)\n\t\t|| !inRange(C+1, j, C+Y-2)))\n\t\t\tSurround.push_back(Vec3(i, j, 0));\n\t\tif(i >= R && i <= R + X - 1\n\t\t&& j >= C && j <= C + Y - 1)\n\t\t\tRoof.push_back(Vec3(i, j, 0));\n\t}\n```\n\n\u968f\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5899\u58c1\u9762\u4e0a\u9762\u7684\u5757\u83b7\u5f97\u9ad8\u5ea6\uff0c\u968f\u540e\uff0c\u5bf9\u5c4b\u9876\u4e0a\u9762\u7684\u6240\u6709\u70b9\u8fdb\u884c\u975e\u51b0\u5757\u72b6\u6001\u7684\u7edf\u8ba1\uff0c\u5728\u5224\u65ad\u7279\u6b8a\u72b6\u51b5\u4e4b\u540e\u586b\u6ee1\u5c31\u884c\u3002\n\n```cpp\n// calculate the height of the building\nfor(auto x: Surround){\n\tfor(int h = 0; h <= M; h++)\n\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\n\t\t\tH = max(H, h + 1);\n}\n// get the ice block needed to cover the roof\nint nd = 0;\nfor(auto x: Roof){\n\tnd += House.g(x + Vec3(0, 0, H)) != 5;\n}\n// check if the ice block is enough\nif(nd > IceBlock){\n\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\\n\");\n\treturn;\n}\n// check the room is big enough\nif(H < 1 || X == 2 || Y == 2 || (X == 3 && Y == 3 && H == 1)){\n\tprintf(\"SORRY CIRNO,HOUSE IS TOO SMALL\\n\");\n\treturn;\n}\n// cover the roof\nfor(auto x: Roof)\n\tHouse.c(x + Vec3(0, 0, H), 5);\nIceBlock -= nd;\n```\n\n\u5728\u83b7\u5f97\u9ad8\u5ea6\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u7075\u6d3b\u8fd0\u7528 `inRange()` \u51fd\u6570\u5199\u51fa\u4ee5\u4e0b\u51fd\u6570\uff08\u542b\u4e49\u5efa\u8bae\u81ea\u884c\u7406\u89e3\uff09\uff1a\n\n```cpp\ninline bool checkWall(Vec3 x){\n\treturn x.x == R || x.x == R + X - 1\n\t\t|| x.y == C || x.y == C + Y - 1;\n}\ninline bool checkInside(Vec3 x){\n\treturn inRange(R+1, x.x, R+X-2)\n\t\t&& inRange(C+1, x.y, C+Y-2)\n\t\t&& inRange(0, x.z, H-1);\n}\ninline bool checkOutside(Vec3 x){\n\treturn !(inRange(R, x.x, R+X-1)\n\t\t&& inRange(C, x.y, C+Y-1)\n\t\t&& inRange(0, x.z, H));\n}\ninline bool checkPillar(Vec3 x){\n\treturn (x.x == R || x.x == R + X - 1)\n\t\t&& (x.y == C || x.y == C + Y - 1);\n}\ninline bool checkPerfect(Vec3 x){\n\treturn x.x == PX1 || x.x == PX2\n\t\t|| x.y == PY1 || x.y == PY2;\n}\n```\n\n\u5176\u4e2d\uff1a\n\n```cpp\n// two perfect locations of X and Y\nPX1 = R + X / 2; PX2 = R + (X - 1) / 2;\nPY1 = C + Y / 2; PY2 = C + (Y - 1) / 2;\n```\n\n\u8fd9\u4e9b\u51fd\u6570\u5728\u7f16\u5199\u5b8c\u6bd5\u4e4b\u540e\uff0c\u5728\u4e4b\u540e\u4f1a\u4ea7\u751f\u5f3a\u5927\u7684\u7528\u5904\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u6e05\u626b\u5185\u90e8\u548c\u5916\u90e8\u7684\u7684\u51b0\u5757\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u5e76\u4e14\u4f7f\u7528\u4e0a\u9762\u7684 `checkInside()` \u548c `checkOutside()` \u51fd\u6570\u5224\u65ad\u5c31\u597d\u4e86\u3002\u5728\u5220\u9664\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u5899\u58c1\u51b0\u5757\u7684\u677e\u52a8\u6027\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u5757\u5728\u5220\u9664\u4e4b\u540e\u4f1a\u6389\u4e0b\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u8fde\u63a5\u65ad\u5f00\u7684\u65f6\u5019\u8fdb\u884c\u5224\u65ad\u3002\n\n\u7531\u4e8e\u6240\u6709\u7684\u4e0d\u7b26\u5408\u4f4d\u7f6e\u7684\u5757\u90fd\u9700\u8981\u5220\u9664\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5220\u9664\u5b83\u4eec\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u91cd\u529b\u4e0a\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u90fd\u4f1a\u88ab\u5220\u9664\u6389\u7684\u3002\u56e0\u6b64\u6211\u4eec\u5728\u5220\u9664\u7684\u65f6\u5019\u5224\u65ad\u76f8\u90bb\u7684\u5757\u662f\u4e0d\u662f\u5899\u58c1\u4e0a\u6f02\u6d6e\u7684\u5757\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u6f02\u6d6e\u7684\u5feb\u9700\u4e0d\u9700\u8981\u56de\u6536\u4e86\u3002\n\n```cpp\nfor(int i = 0; i < N; i++)\n\tfor(int j = 0; j < N; j++)\n\t\tfor(int k = 0; k <= M; k ++)\n\t\t\tif(House.g(Vec3(i, j, k)) == 5){\n\t\t\t\t// check the type of the ice block\n\t\t\t\tif(checkInside(Vec3(i, j, k)))\t++ins;\n\t\t\t\telse if(checkOutside(Vec3(i, j, k)))\t++ous;\n\t\t\t\telse\tcontinue;\n\t\t\t\t// remove the block\n\t\t\t\t++IceBlock; removeBlock = true;\n\t\t\t\tHouse.c(Vec3(i, j, k), 0);\n\t\t\t\t// check if the wall ice block is near\n\t\t\t\tfor(auto x: _3D6){\n\t\t\t\t\tVec3 p = Vec3(i, j, k) + x;\n\t\t\t\t\tif(!checkWall(p))\tcontinue;\n\t\t\t\t\tif(isFloatIce(p)){\n\t\t\t\t\t\t++IceBlock;\n\t\t\t\t\t\tHouse.c(p, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\nprintf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\", ins);\nprintf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\", ous);\n// the roof is giong to drop\nif(isFloatIce(Vec3(R+1, C+1, H))){\n\tprintf(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\\n\");\n\treturn;\n}\n```\n\n\u63a5\u4e0b\u6765\u5230\u4e86\u5224\u65ad\u95e8\u7684\u8fd9\u4e00\u6b65\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u6b64\u5904\u88ab\u586b\u4e0a\u7684\u67f1\u5b50 **\u7b97\u4f5c\u5899**\u3002\n\n\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u95e8\u5bf9\u5e94\u9700\u8981\u8865\u5168\u591a\u5c11\u51b0\u5757\u3002\u6211\u4eec\u53d1\u73b0\u7b2c\u4e09\u5c42\u5f00\u59cb\u7684\u7f3a\u5931\u548c\u95e8\u7684\u4f4d\u7f6e\u9009\u62e9\u6beb\u65e0\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u5355\u72ec\u628a\u5b83\u4eec\u5217\u51fa\u6765\uff1a\n\n```cpp\n// fix the hole of third floor and above\nfor(auto x: Surround) if(!checkPillar(x))\n\tfor(int h = 2; h < H; h++){\n\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\tif(!IceBlock){\n\t\t\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\");\n\t\t\treturn;\n\t\t}\n\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t--IceBlock; fixWall = true;\n\t}\n// and store the rest of the holes on the wall\nnd = 0;\nfor(auto x: Surround) if(!checkPillar(x))\n\tfor(int h = 0; h < 2; h++)\n\t\tnd += House.g(x + Vec3(0, 0, h)) != 5;\n```\n\n\u63a5\u4e0b\u6765\uff0c\u601d\u8003\u4e00\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u95e8\u9700\u8981\u50a8\u5b58\u4ec0\u4e48\u4fe1\u606f\u3002\u9996\u5148\u6211\u4eec\u8981\u50a8\u5b58\u5176\u4f4d\u7f6e\u548c\u5927\u5c0f\uff08\u4e00\u4e9b\u95e8\u6709\u53ef\u80fd\u53ea\u5f00\u4e86\u4e00\u534a\uff0c\u540e\u9762\u8fd8\u8981\u91cd\u65b0\u5f00\u4e00\u6b21\uff0c\u6216\u8005\u8bf4\uff0c\u5728\u672c\u8eab\u7684\u8bbe\u8ba1\u4e0a\u672c\u6765\u5c31\u8981\u6709\u4e00\u4e2a 1\\*2 \u7684\u95e8\uff0c\u800c 1\\*1 \u7684\u95e8\u662f\u4e00\u79cd\u59a5\u534f\uff09\uff0c\u8fd8\u6709\u9009\u62e9\u4f5c\u4e3a\u95e8\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u8865\u5145\u591a\u5c11\u4e2a\u51b0\u5757\uff0c\u5916\u52a0\u8fd9\u4e2a\u95e8\u662f\u4e0d\u662f\u5b8c\u7f8e\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u50a8\u5b58\u4e94\u4e2a\u4fe1\u606f\uff0c\u5728\u5bf9\u95e8\u7684\u7b5b\u9009\u4e0a\uff0c\u6211\u4eec\u91c7\u7528 \u8865\u5145\u5347\u5e8f-\u95e8\u5927\u5c0f\u5347\u5e8f\uff08\u56e0\u4e3a\u5728\u540e\u9762 `PERFECT` \u7684\u5224\u5b9a\u5c31\u662f\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u95e8\uff09-\u662f\u5426\u5b8c\u7f8e\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e\u3002\n\n```cpp\nstruct Door{\n\t// location, perfect, cost, height (size of hole)\n\tint x, y, p, s, h;\n\tDoor(int x=0, int y=0, int p=0, int s=0, int h=0)\n\t\t:x(x), y(y), p(p), s(s), h(h){}\n\tbool operator < (const Door& q)const{\n\t\tif(s != q.s)\treturn s < q.s;\n\t\tif(h != q.h)\treturn h > q.h;\n\t\tif(p != q.p)\treturn p < q.p;\n\t\tif(x != q.x)\treturn x < q.x;\n\t\treturn y < q.y;\n\t}\n}DR;\n```\n\n\u5728\u6c42\u51fa\u8fd9\u4e9b\u6761\u4ef6\u4e0b\u7684\u6700\u4f18\u89e3\u662f 1\\*1 \u7684\u95e8\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7279\u6b8a\u5224\u65ad\uff1a\u5982\u679c\u786e\u5b9e\u6709\u4e00\u4e2a 1\\*2 \u7684\u95e8\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u9009\u90a3\u4e2a 1\\*2 \u7684\u95e8\uff0c\u5c3d\u7ba1\u9009\u62e9 1\\*1 \u7684\u65b9\u6848\u53d6\u51fa\u7684\u51b0\u5757\u66f4\u5c11\uff0c\u539f\u7406\u540c\u4e0a\u3002\n\n\u5728\u8ba1\u7b97\u9700\u8981\u586b\u4e0a\u7684\u51b0\u5757\u65f6\uff0c\u6211\u4eec\u9664\u4e86\u5899\u4e0a\u7684\uff0c\u8fd8\u9700\u8981\u6ce8\u610f\u67f1\u5b50\u4e0a\u7684\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5047\u8bbe\u742a\u9732\u8bfa\u53ea\u80fd\u5e73\u89c6\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u770b\u7f3a\u5931\u7684\u9ad8\u5ea6\u4e0a\u53ef\u4ee5\u770b\u5230\u7684\u67f1\u5b50\u90e8\u5206\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u627e\u5230\u76f8\u90bb\u7684\u67f1\u5b50\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u592a\u9ebb\u70e6\u3002\u60f3\u5230\u5f00\u59cb\u9884\u5904\u7406\u7684 `_2D4` \u548c `checkPillar()` \u4e86\u5417\uff1f\u8fd9\u4f1a\u5e2e\u6211\u4eec\u4e00\u4e2a\u5927\u5fd9\u3002\n\n```cpp\nvector<Door> D; D.clear();\nfor(auto x: Surround) if(!checkPillar(x)){\n\t// get hole size\n\tint q = ((House.g(x) != 5) + (House.g(x + Vec3(0, 0, 1)) != 5));\n\tif(q == 0)\tcontinue;\n\t// create new door\n\tDoor curr(x.x, x.y, checkPerfect(x), nd - q, q);\n\t// check if the pillar is visible\n\tfor(auto y: _2D4) if(checkPillar(x + y))\n\t\tfor(int h = 0; h < 2; h++)\n\t\t\tif(House.g(x + Vec3(0, 0, h)) != 5)\n\t\t\tcurr.s += (House.g(x + y + Vec3(0, 0, h)) != 5);\n\tD.push_back(curr);\n}\nsort(D.begin(), D.end());\nif(D.size() == 0 || IceBlock < D[0].s){\n\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\");\n\treturn;\n}\nDR = D[0];\n// change to 1*2 if current chosen is 1*1\nif(IceBlock > DR.s && DR.h == 1)\n\tfor(auto d: D)\n\t\tif(d.h == 2){\n\t\t\tDR = d;\n\t\t\tbreak;\n\t\t}\n// fill the hole of pillars\nVec3 _DR = Vec3(DR.x, DR.y, 0);\nfor(auto y: _2D4) if(checkPillar(_DR + y))\n\tfor(int h = 0; h < H; h++)\n\t\tif(House.g(_DR + y + Vec3(0, 0, h)) != 5\n\t\t&& House.g(_DR + Vec3(0, 0, h)) != 5){\n\t\t\t--IceBlock; fixWall = true;\n\t\t\tHouse.c(_DR + y + Vec3(0, 0, h), 5);\n\t\t}\n// fill the hole of walls\nfor(auto x: Surround) if(!checkPillar(x) && x != _DR)\n\tfor(int h = 0; h < 2; h++){\n\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t--IceBlock; fixWall = true;\n\t}\n```\n\n\u63a5\u4e0b\u6765\uff0c\u5230\u4e86\u4efb\u52a1\u7ed3\u7b97\u7684\u6210\u5206\uff01\u5148\u6765\u4e00\u53e5\uff1a\n\n```cpp\nprintf(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\");\n```\n\n\u968f\u540e\u6839\u636e\u6bcf\u4e00\u9879\u8fdb\u884c\u8bc4\u5206\uff1a\n\n\u5728\u8d34\u8fd1\u5730\u9762\u7684\u4f4d\u7f6e\u627e\u4e0d\u5230\u4e00\u4e2a\u5bbd\u5ea6\u4e3a 1\uff0c\u9ad8\u5ea6\u4e3a 2 \u7684\u4f4d\u7f6e\u7559\u7ed9\u95e8 => `DR.h == 2`\n\n\u586b\u8865\u4e4b\u524d\u5899\u58c1\u7684\u5b8c\u6574\u7a0b\u5ea6 => `fixWall`\n\n\u56db\u89d2\u7684\u5b8c\u6574\u7a0b\u5ea6 => \u5bf9\u67f1\u5b50\u4e0a\u7684\u7f3a\u53e3\u8fdb\u884c\u6c47\u603b\u5224\u65ad\u5373\u53ef\n\n\u7136\u540e\u5728\u524d\u9762\u7684\u6761\u4ef6\u5168\u90e8\u8fbe\u6210\u7684\u60c5\u51b5\u4e0b\uff0c\u4fdd\u8bc1 `removeBlock == false`\uff08\u6ca1\u6709\u5220\u6389\u5c4b\u5185\u5c4b\u5916\u7684\u51b0\u5757\uff09\u4ee5\u53ca `DR.p`\uff08\u95e8\u7684\u4f4d\u7f6e\u662f\u597d\u7684\uff09\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bf4\u8fd9\u6b21\u7684\u5efa\u623f\u5b50\u884c\u52a8 ALL PERFECT!\n\n```cpp\nbool AllPerfect = true;\n// check the size of the foor\nif(DR.h == 2)\tprintf(\"DOOR IS OK\\n\");\nelse\tprintf(\"HOUSE HAS NO DOOR\\n\"), AllPerfect = false;\n// totally open the door\nif(House.g(_DR) == 5){\n\t++IceBlock; House.c(_DR, 0);\n}\nif(House.g(_DR + Vec3(0, 0, 1)) == 5){\n\t++IceBlock; House.c(_DR + Vec3(0, 0, 1), 0);\n}\n// check if the walls have been fixed\nif(!fixWall)\tprintf(\"WALL IS OK\\n\");\nelse\tprintf(\"WALL NEED TO BE FIXED\\n\"), AllPerfect = false;\n// check if the pillars are still bloken\nnd = 0;\nfor(auto x: Surround) if(checkPillar(x)){\n\tfor(int h = 0; h < H; h++){\n\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t++nd;\n\t}\n}\nif(nd == 0)\tprintf(\"CORNER IS OK\\n\");\nelse\tprintf(\"CORNER NEED TO BE FIXED\\n\"), AllPerfect = false;\n// recalculate the ice block\nIceBlock = max(IceBlock - nd, 0);\nprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\", IceBlock);\n// check if this is ALL PERFECT\nAllPerfect &= !removeBlock;\nAllPerfect &= DR.p;\nif(AllPerfect)\n\tprintf(\"CIRNO IS PERFECT!\\n\");\n```\n\n## Part. 6: \u4ee3\u7801\u6574\u5408\n\n\u7531\u4e8e\u6211\u4eec\u5bf9\u51fd\u6570\u7684\u547d\u540d\u975e\u5e38\u89c4\u6574\uff0c\u6240\u4ee5\u76f4\u63a5\u8fdb\u884c\u5f15\u7528\u5c31\u597d\u4e86\u3002\n\n\u5728\u8fd9\u91cc\u653e\u51fa\u6240\u6709\u7684\u4ee3\u7801\uff0c\u5176\u4e2d\u7701\u7565\u4e86\u5feb\u901f\u8bfb\u5165\u6d41 `iocin`\uff08\u7528\u6cd5\u540c `cin`\uff09\u4ee5\u53ca\u5934\u6587\u4ef6\u3002\n\n```cpp\nint N, M, R, C, X, Y, T, H;\nint PX1, PX2, PY1, PY2;\nstruct Vec3{\n\tint x, y, z;\n\tVec3(int x=0, int y=0, int z=0)\n\t\t:x(x), y(y), z(z){}\n\tVec3 operator + (const Vec3& q)const{\n\t\treturn Vec3(x+q.x, y+q.y, z+q.z);\n\t}\n\tbool operator != (const Vec3& q)const{\n\t\treturn x != q.x || y != q.y || z != q.z;\n\t}\n};\nstruct Door{\n\t// location, perfect, cost, height (size of hole)\n\tint x, y, p, s, h;\n\tDoor(int x=0, int y=0, int p=0, int s=0, int h=0)\n\t\t:x(x), y(y), p(p), s(s), h(h){}\n\tbool operator < (const Door& q)const{\n\t\tif(s != q.s)\treturn s < q.s;\n\t\tif(h != q.h)\treturn h > q.h;\n\t\tif(p != q.p)\treturn p < q.p;\n\t\tif(x != q.x)\treturn x < q.x;\n\t\treturn y < q.y;\n\t}\n}DR;\n// return if x <= y <= z\ninline bool inRange(int x, int y, int z){\n\treturn y>=x && y<=z;\n}\nint IceBlock;\nvector<Vec3> _2D4, _2D8, _3D6;\nstruct IceHouse{\n\tshort V[20][20][30];\n\tIceHouse(){\n\t\tmemset(V, 0, sizeof(V));\n\t}\n\t// check if the block is in the range\n\tinline bool check(Vec3 q){\n\t\treturn inRange(0, q.x, N-1)\n\t\t\t&& inRange(0, q.y, N-1)\n\t\t\t&& inRange(0, q.z, M);\n\t}\n\t// get the value of the block\n\tinline short g(Vec3 x){\n\t\tif(!check(x))\treturn -1;\n\t\treturn V[x.x][x.y][x.z];\n\t}\n\t// freeze the block\n\tinline void f(Vec3 x){\n\t\tV[x.x][x.y][x.z] = min(V[x.x][x.y][x.z]+1, 4);\n\t}\n\t// change the information of the block\n\tinline void c(Vec3 x, short v){\n\t\tV[x.x][x.y][x.z]=v;\n\t}\n}House;\ninline void IceBarrage(int R, int C, int D, int S){\n\tVec3 v = _2D8[D];\n\tVec3 c = Vec3(R, C, 0);\n\tint s = 0; ++S;\n\twhile(S--){\n\t\tif(!House.check(c) || House.g(c)==5)\n\t\t\tbreak;\n\t\tif(House.g(c) != 4)\t++s;\n\t\tHouse.f(c);\n\t\tc = c + v;\n\t}\n\tprintf(\"CIRNO FREEZED %d BLOCK(S)\\n\", s);\n}\ninline void MakeIceBlock(){\n\tint s = 0;\n\tfor(int i = 0; i < N; i++)\n\t\tfor(int j = 0; j < N; j++)\n\t\t\tif(House.g(Vec3(i, j, 0)) == 4){\n\t\t\t\tHouse.c(Vec3(i, j, 0), 0);\n\t\t\t\t++s;\n\t\t\t}\n\tIceBlock += s;\n\tprintf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\", s, IceBlock);\n}\n// check if the block is close to something\ninline bool AttachmentCheck(Vec3 v){\n\tif(v.z == 0)\treturn true;\n\tfor(auto x: _3D6)\n\t\tif(House.g(v + x) == 5)\treturn true;\n\treturn false;\n}\ninline void PutIceBlock(int r, int c, int h){\n\tVec3 v(r, c, h);\n\t// no ice block left\n\tif(IceBlock == 0){\n\t\tprintf(\"CIRNO HAS NO ICE_BLOCK\\n\");\n\t\treturn;\n\t}\n\t// cannot be put\n\tif(House.g(v) == 5 || !AttachmentCheck(v)){\n\t\tprintf(\"BAKA CIRNO,CAN'T PUT HERE\\n\");\n\t\treturn;\n\t}\n\tHouse.c(v, 5); --IceBlock;\n\t// check if the block is at the wrong place\n\tif(v.x < R || v.x > R+X-1 || v.y < C || v.y > C+Y-1)\n\t\tprintf(\"CIRNO MISSED THE PLACE\\n\");\n\telse if(v.x >= R+1 && v.x <= R+X-2 && v.y >= C+1 && v.y <= C+Y-2)\n\t\tprintf(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\");\n\telse\n\t\tprintf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\", IceBlock);\n}\nint BrokenIce;\nbool AttachmentIf;\nbool hav[20][20][30];\nvector<Vec3> List;\nvoid dfsRemove(Vec3 v){\n\thav[v.x][v.y][v.z] = true;\n\tList.push_back(v);\n\tif(v.z == 0)\tAttachmentIf = true;\n\tfor(auto x: _3D6){\n\t\tVec3 p = v + x;\n\t\tif(House.g(p) == 5 && !hav[p.x][p.y][p.z])\n\t\t\tdfsRemove(p);\n\t}\n}\n// check if the block is float and remove them\ninline void RemoveFloatIce(Vec3 v){\n\tif(House.g(v) != 5)\treturn;\n\tAttachmentIf = false;\n\tdfsRemove(v);\n\tfor(auto y: List)\n\t\thav[y.x][y.y][y.z] = false;\n\tif(!AttachmentIf){\n\t\tBrokenIce += List.size();\n\t\tfor(auto y: List)\n\t\t\tHouse.c(y, 0);\n\t}\n\tList.clear();\n}\n// check if the block is float\ninline bool isFloatIce(Vec3 v){\n\tif(House.g(v) != 5)\treturn false;\n\tAttachmentIf = false;\n\tdfsRemove(v);\n\tfor(auto y: List)\n\t\thav[y.x][y.y][y.z] = false;\n\tList.clear();\n\treturn !AttachmentIf;\n}\ninline void RemoveIceBlock(int r, int c, int h){\n\tVec3 v(r, c, h);\n\t// no ice block here\n\tif(House.g(v) != 5){\n\t\tprintf(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\");\n\t\treturn;\n\t}\n\tHouse.c(v, 0);\n\tBrokenIce = 0;\n\t// remove the float ice block\n\tfor(auto x: _3D6)\n\t\tRemoveFloatIce(v + x);\n\tif(BrokenIce)\n\t\tprintf(\"CIRNO REMOVED AN ICE_BLOCK,AND %d BLOCK(S) ARE BROKEN\\n\", BrokenIce);\n\telse\tprintf(\"CIRNO REMOVED AN ICE_BLOCK\\n\");\n\t++IceBlock;\n}\nvector<Vec3> Surround, Roof;\ninline bool checkWall(Vec3 x){\n\treturn x.x == R || x.x == R + X - 1\n\t\t|| x.y == C || x.y == C + Y - 1;\n}\ninline bool checkInside(Vec3 x){\n\treturn inRange(R+1, x.x, R+X-2)\n\t\t&& inRange(C+1, x.y, C+Y-2)\n\t\t&& inRange(0, x.z, H-1);\n}\ninline bool checkOutside(Vec3 x){\n\treturn !(inRange(R, x.x, R+X-1)\n\t\t&& inRange(C, x.y, C+Y-1)\n\t\t&& inRange(0, x.z, H));\n}\ninline bool checkPillar(Vec3 x){\n\treturn (x.x == R || x.x == R + X - 1)\n\t\t&& (x.y == C || x.y == C + Y - 1);\n}\ninline bool checkPerfect(Vec3 x){\n\treturn x.x == PX1 || x.x == PX2\n\t\t|| x.y == PY1 || x.y == PY2;\n}\ninline void MakeRoof(){\n\t// initialize the surrounding and the roof\n\tfor(int i = 0; i < N; i++)\n\t\tfor(int j = 0; j < N; j++){\n\t\t\tif(inRange(R, i, R+X-1)\n\t\t\t&& inRange(C, j, C+Y-1)\n\t\t\t&& (!inRange(R+1, i, R+X-2)\n\t\t\t|| !inRange(C+1, j, C+Y-2)))\n\t\t\t\tSurround.push_back(Vec3(i, j, 0));\n\t\t\tif(i >= R && i <= R + X - 1\n\t\t\t&& j >= C && j <= C + Y - 1)\n\t\t\t\tRoof.push_back(Vec3(i, j, 0));\n\t\t}\n\t// calculate the height of the building\n\tfor(auto x: Surround){\n\t\tfor(int h = 0; h <= M; h++)\n\t\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\n\t\t\t\tH = max(H, h + 1);\n\t}\n\t// get the ice block needed to cover the roof\n\tint nd = 0;\n\tfor(auto x: Roof){\n\t\tnd += House.g(x + Vec3(0, 0, H)) != 5;\n\t}\n\t// check if the ice block is enough\n\tif(nd > IceBlock){\n\t\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\\n\");\n\t\treturn;\n\t}\n\t// check the room is big enough\n\tif(H < 1 || X == 2 || Y == 2 || (X == 3 && Y == 3 && H == 1)){\n\t\tprintf(\"SORRY CIRNO,HOUSE IS TOO SMALL\\n\");\n\t\treturn;\n\t}\n\t// cover the roof\n\tfor(auto x: Roof)\n\t\tHouse.c(x + Vec3(0, 0, H), 5);\n\tIceBlock -= nd;\n\tint ins = 0, ous = 0;\n\tbool fixWall = false;\n\tbool removeBlock = false;\n\tfor(int i = 0; i < N; i++)\n\t\tfor(int j = 0; j < N; j++)\n\t\t\tfor(int k = 0; k <= M; k ++)\n\t\t\t\tif(House.g(Vec3(i, j, k)) == 5){\n\t\t\t\t\t// check the type of the ice block\n\t\t\t\t\tif(checkInside(Vec3(i, j, k)))\t++ins;\n\t\t\t\t\telse if(checkOutside(Vec3(i, j, k)))\t++ous;\n\t\t\t\t\telse\tcontinue;\n\t\t\t\t\t// remove the block\n\t\t\t\t\t++IceBlock; removeBlock = true;\n\t\t\t\t\tHouse.c(Vec3(i, j, k), 0);\n\t\t\t\t\t// check if the wall ice block is near\n\t\t\t\t\tfor(auto x: _3D6){\n\t\t\t\t\t\tVec3 p = Vec3(i, j, k) + x;\n\t\t\t\t\t\tif(!checkWall(p))\tcontinue;\n\t\t\t\t\t\tif(isFloatIce(p)){\n\t\t\t\t\t\t\t++IceBlock;\n\t\t\t\t\t\t\tHouse.c(p, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\tprintf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\", ins);\n\tprintf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\", ous);\n\t// the roof is giong to drop\n\tif(isFloatIce(Vec3(R+1, C+1, H))){\n\t\tprintf(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\\n\");\n\t\treturn;\n\t}\n\t// fix the hole of third floor and above\n\tfor(auto x: Surround) if(!checkPillar(x))\n\t\tfor(int h = 2; h < H; h++){\n\t\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\t\tif(!IceBlock){\n\t\t\t\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t\t--IceBlock; fixWall = true;\n\t\t}\n\t// and store the rest of the holes on the wall\n\tnd = 0;\n\tfor(auto x: Surround) if(!checkPillar(x))\n\t\tfor(int h = 0; h < 2; h++)\n\t\t\tnd += House.g(x + Vec3(0, 0, h)) != 5;\n\tvector<Door> D; D.clear();\n\tfor(auto x: Surround) if(!checkPillar(x)){\n\t\t// get hole size\n\t\tint q = ((House.g(x) != 5) + (House.g(x + Vec3(0, 0, 1)) != 5));\n\t\tif(q == 0)\tcontinue;\n\t\t// create new door\n\t\tDoor curr(x.x, x.y, checkPerfect(x), nd - q, q);\n\t\t// check if the pillar is visible\n\t\tfor(auto y: _2D4) if(checkPillar(x + y))\n\t\t\tfor(int h = 0; h < 2; h++)\n\t\t\t\tif(House.g(x + Vec3(0, 0, h)) != 5)\n\t\t\t\tcurr.s += (House.g(x + y + Vec3(0, 0, h)) != 5);\n\t\tD.push_back(curr);\n\t}\n\tsort(D.begin(), D.end());\n\tif(D.size() == 0 || IceBlock < D[0].s){\n\t\tprintf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\");\n\t\treturn;\n\t}\n\tDR = D[0];\n\t// change to 1*2 if current chosen is 1*1\n\tif(IceBlock > DR.s && DR.h == 1)\n\t\tfor(auto d: D)\n\t\t\tif(d.h == 2){\n\t\t\t\tDR = d;\n\t\t\t\tbreak;\n\t\t\t}\n\t// fill the hole of pillars\n\tVec3 _DR = Vec3(DR.x, DR.y, 0);\n\tfor(auto y: _2D4) if(checkPillar(_DR + y))\n\t\tfor(int h = 0; h < H; h++)\n\t\t\tif(House.g(_DR + y + Vec3(0, 0, h)) != 5\n\t\t\t&& House.g(_DR + Vec3(0, 0, h)) != 5){\n\t\t\t\t--IceBlock; fixWall = true;\n\t\t\t\tHouse.c(_DR + y + Vec3(0, 0, h), 5);\n\t\t\t}\n\t// fill the hole of walls\n\tfor(auto x: Surround) if(!checkPillar(x) && x != _DR)\n\t\tfor(int h = 0; h < 2; h++){\n\t\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t\t--IceBlock; fixWall = true;\n\t\t}\n\tprintf(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\");\n\tbool AllPerfect = true;\n\t// check the size of the foor\n\tif(DR.h == 2)\tprintf(\"DOOR IS OK\\n\");\n\telse\tprintf(\"HOUSE HAS NO DOOR\\n\"), AllPerfect = false;\n\t// totally open the door\n\tif(House.g(_DR) == 5){\n\t\t++IceBlock; House.c(_DR, 0);\n\t}\n\tif(House.g(_DR + Vec3(0, 0, 1)) == 5){\n\t\t++IceBlock; House.c(_DR + Vec3(0, 0, 1), 0);\n\t}\n\t// check if the walls have been fixed\n\tif(!fixWall)\tprintf(\"WALL IS OK\\n\");\n\telse\tprintf(\"WALL NEED TO BE FIXED\\n\"), AllPerfect = false;\n\t// check if the pillars are still bloken\n\tnd = 0;\n\tfor(auto x: Surround) if(checkPillar(x)){\n\t\tfor(int h = 0; h < H; h++){\n\t\t\tif(House.g(x + Vec3(0, 0, h)) == 5)\tcontinue;\n\t\t\tHouse.c(x + Vec3(0, 0, h), 5);\n\t\t\t++nd;\n\t\t}\n\t}\n\tif(nd == 0)\tprintf(\"CORNER IS OK\\n\");\n\telse\tprintf(\"CORNER NEED TO BE FIXED\\n\"), AllPerfect = false;\n\t// recalculate the ice block\n\tIceBlock = max(IceBlock - nd, 0);\n\tprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\", IceBlock);\n\t// check if this is ALL PERFECT\n\tAllPerfect &= !removeBlock;\n\tAllPerfect &= DR.p;\n\tif(AllPerfect)\n\t\tprintf(\"CIRNO IS PERFECT!\\n\");\n}\nint main(){\n\t// 2D direction vectors for UDLR\n\t_2D4 = vector<Vec3>{Vec3(-1, 0, 0), Vec3(1, 0, 0), Vec3(0, -1, 0), Vec3(0, 1, 0)};\n\t// 2D direction vectors for UDLR-UL-UR-DL-DR\n\t_2D8 = vector<Vec3>{Vec3(-1, 0, 0), Vec3(-1, -1, 0), Vec3(0, -1, 0), Vec3(1, -1, 0),\n\t\t\t\t\t\tVec3(1, 0, 0), Vec3(1, 1, 0), Vec3(0, 1, 0), Vec3(-1, 1, 0)};\n\t// 3D direction vectors for UDLRFB\n\t_3D6 = vector<Vec3>{Vec3(1, 0, 0), Vec3(-1, 0, 0), Vec3(0, 1, 0), Vec3(0, -1, 0),\n\t\t\t\t\t\tVec3(0, 0, 1), Vec3(0, 0, -1)};\n\tiocin >> N >> M >> R >> C >> X >> Y >> T;\n\t// two perfect locations of X and Y\n\tPX1 = R + X / 2; PX2 = R + (X - 1) / 2;\n\tPY1 = C + Y / 2; PY2 = C + (Y - 1) / 2;\n\tstring str;\n\twhile(T--){\n\t\tiocin >> str;\n\t\tif(str == \"ICE_BARRAGE\"){\n\t\t\tint r, c, d, s;\n\t\t\tiocin >> r >> c >> d >> s;\n\t\t\tIceBarrage(r, c, d, s);\n\t\t}\n\t\telse if(str == \"MAKE_ICE_BLOCK\"){\n\t\t\tMakeIceBlock();\n\t\t}\n\t\telse if(str == \"PUT_ICE_BLOCK\"){\n\t\t\tint r, c, h;\n\t\t\tiocin >> r >> c >> h;\n\t\t\tPutIceBlock(r, c, h);\n\t\t}\n\t\telse if(str == \"REMOVE_ICE_BLOCK\"){\n\t\t\tint r, c, h;\n\t\t\tiocin >> r >> c >> h;\n\t\t\tRemoveIceBlock(r, c, h);\n\t\t}\n\t\telse if(str == \"MAKE_ROOF\"){\n\t\t\tMakeRoof();\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u53ef\u4ee5\u8ba9\u5927\u5bb6\u6e05\u695a\u5de5\u7a0b\u7c7b\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u4e2d\u7684\u590d\u6742\u6027\u548c\u7a33\u5b9a\u6027\uff0c\u4e5f\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u53ef\u4ee5\u8ba9\u4f60\u6e05\u695a\u8fd9\u4e2a\u9898\u76ee\u80cc\u540e\u8fd0\u884c\u7684\u903b\u8f91\u3002",
        "postTime": 1625671397,
        "uid": 60864,
        "name": "tiger2005",
        "ccfLevel": 7,
        "title": "\u628a \u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b \u5199\u6210\u5de5\u7a0b\u9898"
    },
    {
        "content": "[\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u98df\u7528(\u6ca1\u8bf4\u6548\u679c\u66f4\u4f73)](https://hehezhou.github.io/2019/06/15/node-js-P3693/#more)  \n[\u9898\u9762](https://www.luogu.org/problemnew/show/P3693)  \n\u663e\u7136\u6a21\u62df\u5373\u53ef  \n\u64cd\u4f5c\u4e00:\u666e\u53caT1(\u65e9\u5e74)\u6c34\u5e73 \u76f4\u63a5for\u4e00\u904d\u5c31\u597d\u4e86\uff0c\u8bb0\u5f97\u5224\u65ad\u51fa\u754c\u6216\u649e\u51b0\u7816  \n\u64cd\u4f5c\u4e8c:\u666e\u53caT1(\u8fd1\u5e74)\u6c34\u5e73\uff0c\u76f4\u63a5for\u4e00\u904d\u5c31\u597d\u4e86  \n\u64cd\u4f5c\u4e09:\u666e\u53caT1(\u65e9\u5e74)\u6c34\u5e73\uff0c\u5224\u65ad\u4e00\u4e0b\u6709\u6ca1\u6709\uff0c\u662f\u5426\u8fde\u7684\u4e0a\u5373\u53ef \u8bb0\u5f97\u5730\u9762\u51b0\u51bb\u5ea6\u6e05\u96f6  \n\u64cd\u4f5c\u56db:\u666e\u53caT2\u6c34\u5e73\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u79fb\u8d70\u540e\u76f4\u63a5\u5bf9\u6574\u56febfs\u5224\u65ad\u662f\u5426\u63a5\u5730\u5373\u53ef  \n\u64cd\u4f5c\u4e94:  \n\u6709\u70b9\u70e6\u7410  \n\u9996\u5148\u662f\u9020\u623f\u9876\uff0c\u666e\u53caT2\u6c34\u5e73\uff0cmax\u51fa\u9ad8\u5ea6\u7136\u540efor\u4e00\u904d\u5c31\u597d\u4e86  \n\u63a5\u7740\u662f\u6e05\u7406\u5783\u573e  \n\u7531\u4e8e\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u65b9\u5f0f\u4f7f\u5f97\u6ca1\u6709\u4e00\u4e2a\u51b0\u7816\u7834\u788e  \n\u6240\u4ee5\u76f4\u63a5\u5185\u5916\u62ff\u6389\u518d\u6574\u56febfs\u4e00\u904d\u7b97\u5899\u4e0a\u8981\u62ff\u591a\u5c11  \n\u8bb0\u5f97\u5224\u65ad\u623f\u9876\u584c\u9677\uff0c\u623f\u95f4\u8fc7\u5c0f  \n\u7136\u540e\u8865\u6b8b\u7f3a\uff0c\u91cd\u70b9\u6765\u4e86  \n\u6ce8\u610f\u4e00\u4e0b\u52a0\u7ea2\u7684**\u5927\u591a\u6570**  \n\u56e0\u4e3a\u5f53\u95e8\u5f00\u5728\u8f6c\u89d2\u8fb9\u4e0a\u662f\u8981\u6e05\u7406\u62d0\u89d2\u7684,\u56e0\u4e3a\u623f\u5b50\u91cc\u770b\u7684\u5230  \n\u597d\u50cf\u9898\u89e3\u91cc\u7684\u8001\u54e5\u7528\u4e86\u4e00\u5927\u5806\u5206\u7c7b\u8ba8\u8bba  \n\u5176\u5b9e\u5e76\u4e0d\u7528  \n\u53ea\u8981\u66b4\u529b\u679a\u4e3e\u95e8\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u7b97\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86  \n\u7136\u540e**\u6ce8\u610f**\uff1a\u5f53\u9700\u8981\u51b0\u7816\u6570\u76f8\u540c\u7684\u65f6\u5019\uff0c\u5e94\u5c3d\u53ef\u80fd\u8ba9\u62d0\u89d2\u7a7a\u4f4d\u5c11\u4e00\u4e9b\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u8fbe\u5230perfect  \n\u4e5f\u5c31\u662f\u4ee5(\u9700\u8981\u7816\u5757\u6570\uff0c\u62d0\u89d2\u7a7a\u4f4d\uff0c\u5b8c\u7f8e)\u8fdb\u884c\u4e09\u5173\u952e\u5b57\u6392\u5e8f  \n\u7136\u540e\u9020\u95e8  \n\u7136\u540e\u9020\u89d2  \n\u6700\u540e\u5224\u65ad\u5b8c\u7f8e\uff0c\u4ee5\u4e0b\u6761\u4ef6\u7f3a\u4e00\u4e0d\u53ef:1.\u95e8\u5929\u7136\u5f62\u6210\uff0c\u5f00\u5728\u6b63\u4e2d\u95f4 2.\u4e0d\u7528\u586b\u5899 3.\u4e0d\u7528\u8865\u62d0\u89d2 4.\u4e0d\u9700\u8981\u6e05\u7406\u5783\u573e\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86  \n\u5751\u70b9\u4e0d\u662f\u5f88\u591a\uff0c\u4e3b\u8981\u662f\u90a3\u4e2a\u67f1\u5b50\u6709\u7684\u65f6\u5019\u9700\u8981\u586b\u8865\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u884c\u4e0d\u6362\u884c(Too long on line 1001???)  \njs\u91cc\u8f93\u51fa\u6709\u4e24\u4e2a:console.log()\u6362\u884c \u548c process.stdout.write()\u4e0d\u6362\u884c(\u67e5\u4e86\u534a\u5929\u624d\u67e5\u5230)  \n```js\n\"use strict\";\nconst IO = require(\"readline\").createInterface(process.stdin, process.stdout);\nvar nowline = 0, n, hm, sx, sy, ex, ey, m;\nvar optlist = [];\nvar map = [], ice = [];\n\nIO.on(\"close\", function () {\n    process.exit();\n});\n\nvar blockcnt = 0;\n\nvar fx = [-1, -1, 0, 1, 1, 1, 0, -1], fy = [0, -1, -1, -1, 0, 1, 1, 1];\n\nfunction inmap(x, y, z) {\n    return x >= 0 && x < n && y >= 0 && y < n && z >= 0 && z <= hm;\n}\n\nvar get_size = (function() {\n    var fx = [1, -1, 0, 0, 0, 0], fy = [0, 0, 1, -1, 0, 0], fz = [0, 0, 0, 0, 1, -1];\n    return function(x, y, z) {\n        var ans = 0;\n        for(let i = 0; i < 6; i++)\n            if(inmap(x + fx[i], y + fy[i], z + fz[i])) ans += map[x + fx[i]][y + fy[i]][z + fz[i]];\n            else if(z + fz[i] < 0) ans++;\n        return ans;\n    }\n})();//\u4e24\u4e2a\u65b9\u5411\u6570\u7ec4\uff0c\u4e0d\u60f3\u7528\u4e24\u4e2a\u53d8\u91cf\u540d\n\nfunction ice_barrage(x, y, d, s) {\n    x = Number(x), y = Number(y), d = Number(d), s = Number(s);\n    var ans = 0;\n    for(var i = 0; i <= s; i++) {\n        // process.stdout.write(inmap(x, y, 0) + ' ' + map[x][y][0]);\n        // process.stdout.write(x + ' ' + y + ' ' + 0);\n        if(inmap(x, y, 0) && map[x][y][0] == 0) {\n            if(ice[x][y] < 4) ice[x][y]++, ans++;\n        }\n        else break;\n        x = x + fx[d], y = y + fy[d];\n    }\n    process.stdout.write(\"CIRNO FREEZED \" + ans + \" BLOCK(S)\");\n}//\u64cd\u4f5c1\n\nfunction make_ice_block() {\n    var ans = 0;\n    for(var i = 0; i < n; i++)\n        for(var j = 0; j < n; j++) if(ice[i][j] == 4) ice[i][j] = 0, ans++;\n    process.stdout.write(\"CIRNO MADE \" + ans + \" ICE BLOCK(S),NOW SHE HAS \" + (ans + blockcnt) + \" ICE BLOCK(S)\");\n    blockcnt += ans;\n}//\u64cd\u4f5c2\n\nfunction inroom(x, y) {\n    return x > sx && x < ex && y > sy && y < ey;\n}//\u4e25\u683c\u5728\u5c4b\u5b50\u91cc\u9762\n\nfunction outroom(x, y) {\n    return x < sx || x > ex || y < sy || y > ey;\n}//\u4e25\u683c\u5728\u5c4b\u5b50\u5916\u9762 \u4e0d\u7ba1\u5c4b\u9876\n\nfunction put_ice_block(x, y, z) {\n    x = Number(x), y = Number(y), z = Number(z);\n    if(blockcnt == 0) process.stdout.write(\"CIRNO HAS NO ICE_BLOCK\");\n    else if(!inmap(x, y, z) || map[x][y][z] || get_size(x, y, z) == 0) process.stdout.write(\"BAKA CIRNO,CAN'T PUT HERE\");\n    else {\n        map[x][y][z] = 1;\n        if(z == 0) ice[x][y] = 0;//\u6ce8\u610f\uff01\uff01\uff01\n        blockcnt -= 1;\n        if(outroom(x, y)) process.stdout.write(\"CIRNO MISSED THE PLACE\");\n        else if(inroom(x, y)) process.stdout.write(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\");\n        else process.stdout.write(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS \" + blockcnt + \" ICE_BLOCK(S)\");\n    }\n}\n\nvar updata;//bfs\u627e\u7834\u788e\u51b0\u7816\u6570(\u8be6\u60c5\u89c1main\u51fd\u6570\u91cc)\n\nfunction remove_ice_block(x, y, z) {\n    x = Number(x), y = Number(y), z = Number(z);\n    if(!inmap(x, y, z) || map[x][y][z] == 0) process.stdout.write(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\");\n    else {\n        map[x][y][z] = 0;\n        let k = updata();\n        if(k != 0) process.stdout.write(\"CIRNO REMOVED AN ICE_BLOCK,AND \" + k + \" BLOCK(S) ARE BROKEN\");\n        else process.stdout.write(\"CIRNO REMOVED AN ICE_BLOCK\");\n        blockcnt++;\n    }\n}//\u64cd\u4f5c4\n\nvar hei = -1, _fixc = 0;//\u5c4b\u9876\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u586b\u8865\u7684\u62d0\u89d2\u7a7a\u4f4d\u6570\u91cf\n\nfunction get_wall_size(doorx, doory) {\n    var ans = _fixc = 0;\n    for(let i = 0; i < n; i++)\n        for(let j = 0; j < n; j++) {\n            if(inroom(i, j) || outroom(i, j)) continue;\n            if(i == doorx && j == doory)\n                for(let h = 2; h < hei; h++) ans += 1 - map[i][j][h];\n            else if((i != sx && i != ex) || (j != sy && j != ey))\n                for(let h = 0; h < hei; h++) ans += 1 - map[i][j][h];\n            else if(Math.abs(i - doorx) + Math.abs(j - doory) == 1)\n                ans += 2 - map[i][j][0] - map[i][j][1], _fixc += 2 - map[i][j][0] - map[i][j][1];\n        }\n    return ans;\n}//\u5f53\u95e8\u5728(doorx\uff0cdoory)\u65f6\uff0c\u9700\u8981\u586b\u8865\u7684\u7a7a\u4f4d\u6570\n\nfunction get_corner_size(cx, cy) {\n    var ans = 0;\n    for(let i = 0; i < hei; i++) ans += 1 - map[cx][cy][i], map[cx][cy][i] = 1;\n    return ans;\n}//\u586b\u62d0\u89d2\n\nfunction fix_wall(doorx, doory) {\n    for(let i = 0; i < n; i++)\n        for(let j = 0; j < n; j++) {\n            if(inroom(i, j) || outroom(i, j)) continue;\n            if(i == doorx && j == doory)\n                for(let h = 2; h < hei; h++) map[i][j][h] = 1;\n            else if((i != sx && i != ex) || (j != sy && j != ey))\n                for(let h = 0; h < hei; h++) map[i][j][h] = 1;\n            else if(Math.abs(i - doorx) + Math.abs(j - doory) == 1)\n                map[i][j][0] = map[i][j][1] = 1;\n        }\n}//\u586b\u5899(\u5176\u5b9e\u5c31\u662fget_wall_size\u6539\u4e86\u4e00\u4e0b)\n\nfunction per(doorx, doory) {\n    if(map[doorx][doory][0] || map[doorx][doory][1]) return 0;\n    if((doorx == sx || doorx == ex) && Math.abs((sy + ey) / 2 - doory) < 0.9) return 1;\n    if((doory == sy || doory == ey) && Math.abs((sx + ex) / 2 - doorx) < 0.9) return 1;\n    return 0;\n}//\u95e8\u7684\u4f4d\u7f6e\u5b8c\u7f8e\n\nfunction make_roof() {\n    for(let i = 0; i < n; i++)\n        for(let j = 0; j < n; j++) {\n            if(inroom(i, j) || inroom(i, j)) continue;\n            for(let h = hei + 1; h < hm; h++) if(map[i][j][h]) hei = h;\n        }\n    hei++;//\u7b97\u5c4b\u9876\u9ad8\u5ea6\n    var cnt = 0;\n    for(let i = sx; i <= ex; i++)\n        for(let j = sy; j <= ey; j++) cnt += 1 - map[i][j][hei];\n    if(cnt > blockcnt) {\n        process.stdout.write(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\");\n        return;\n    }\n    blockcnt -= cnt;\n    if(hei < 2 || (ex - sx - 1) * (ey - sy - 1) <= 1) {//\u7a7a\u95f4\u8fc7\u5c0f\n        process.stdout.write(\"SORRY CIRNO,HOUSE IS TOO SMALL\");\n        return;\n    }\n    for(let i = sx; i <= ex; i++)\n        for(let j = sy; j <= ey; j++) map[i][j][hei] = 1;//\u9020\u623f\u9876\n    var k1 = 0, k2 = 0;\n    for(let i = 0; i < n; i++)\n        for(let j = 0; j < n; j++)\n            for(let h = 0; h < hm; h++) {\n                if(inroom(i, j) && h < hei) k1 += map[i][j][h], map[i][j][h] = 0;//\u5728\u5c4b\u5b50\u91cc\u9762\n                else if(outroom(i, j) || h > hei) k2 += map[i][j][h], map[i][j][h] = 0;//\u5916\u9762\n            }\n    var k3 = updata();//\"\u788e\u6389\"\u7684\u5757\u6570\u5373\u4e3a\u5899\u4e0a\u62c6\u6389\u7684\u5757\u6570\n    blockcnt += k1 + k2 + k3;\n    process.stdout.write(k1 + \" ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\");\n    process.stdout.write(k2 + \" ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\");\n    if(map[sx][sy][hei] == 0) {\n        process.stdout.write(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\");\n        return;\n    }//\u584c\u4e86\n    var doorx, doory, wallcnt = 100000000, doorneed, cornerneed, doorp = 0, _maxfix = 0;\n    for(let i = 0; i < n; i++)\n        for(let j = 0; j < n; j++) {\n            if(inroom(i, j) || outroom(i, j)) continue;\n            if((i == sx || i == ey) && (j == sy || j == ey)) continue;\n\t\t\tvar newcost = get_wall_size(i, j);\n\t\t\tif(wallcnt == newcost) {\n                if(_maxfix < _fixc) doorx = i, doory = j, wallcnt = newcost, _maxfix = _fixc, doorp = per(i, j);\n                if(_maxfix == _fixc && per(i, j)) doorx = i, doory = j, wallcnt = newcost, _maxfix = _fixc, doorp = per(i, j);\n            }\n            if(wallcnt > newcost) doorx = i, doory = j, wallcnt = newcost, _maxfix = _fixc, doorp = per(i, j);//\u4e09\u5173\u952e\u5b57\u627e\u6700\u4f18\u89e3\n        }\n    if(wallcnt > blockcnt) {\n        process.stdout.write(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\");\n        return;\n    }\n    blockcnt -= wallcnt;\n    process.stdout.write(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\");\n    if(map[doorx][doory][0] + map[doorx][doory][1] != 0) {\n        process.stdout.write(\"HOUSE HAS NO DOOR\\n\");\n        doorneed = 1;\n        blockcnt += map[doorx][doory][0] + map[doorx][doory][1];\n        map[doorx][doory][0] = map[doorx][doory][1] = 0;\n    }\n    else process.stdout.write(\"DOOR IS OK\\n\");\n    if(wallcnt > 0) process.stdout.write(\"WALL NEED TO BE FIXED\\n\");\n    else process.stdout.write(\"WALL IS OK\\n\");\n    fix_wall(doorx, doory);\n    cornerneed = get_corner_size(sx, sy) + get_corner_size(ex, sy) + get_corner_size(sx, ey) + get_corner_size(ex, ey);\n    blockcnt -= cornerneed;\n    if(blockcnt < 0) blockcnt = 0;\n    if(cornerneed > 0) process.stdout.write(\"CORNER NEED TO BE FIXED\\n\");\n    else process.stdout.write(\"CORNER IS OK\\n\");\n    process.stdout.write(\"CIRNO FINALLY HAS \" + blockcnt + \" ICE_BLOCK(S)\");\n    if(cornerneed || doorneed || wallcnt || k1 || k2) return;\n    if(doorp) process.stdout.write(\"\\nCIRNO IS PERFECT!\");\n}\n\nfunction main() {\n    updata = (function() {\n        var fx = [0, 0, 0, 0, 1, -1], fy = [0, 0, 1, -1, 0, 0], fz = [1, -1, 0, 0, 0, 0];\n        var vis = [];\n        for(let i = 0; i < n; i++) {\n            vis.push([]);\n            for(let j = 0; j < n; j++) {\n                vis[i].push([]);\n                for(let k = 0; k <= hm; k++) vis[i][j].push(0);\n            }\n        }\n        return function() {\n            var qx = [], qy = [], qz = [], head = 0, tail = -1;\n            for(let i = 0; i < n; i++)\n                for(let j = 0; j < n; j++) {\n                    for(let k = 0; k <= hm; k++) vis[i][j][k] = 0;\n                    if(map[i][j][0] == 1) {\n                        vis[i][j][0] = 1;\n                        qx.push(i), qy.push(j), qz.push(0);\n                        tail++;\n                    }\n                }\n            var ans = 0;\n            while(head <= tail) {\n                for(let i = 0, nx, ny, nz; i < 6; i++) {\n                    nx = qx[head] + fx[i], ny = qy[head] + fy[i], nz = qz[head] + fz[i];\n                    if(inmap(nx, ny, nz) && map[nx][ny][nz] == 1 && vis[nx][ny][nz] == 0) {\n                        vis[nx][ny][nz] = 1;\n                        tail++;\n                        qx.push(nx), qy.push(ny), qz.push(nz);\n                    }\n                }\n                head++;\n            }\n            for(let i = 0; i < n; i++)\n                for(let j = 0; j < n; j++)\n                    for(let k = 0; k <= hm; k++)\n                        if(map[i][j][k] == 1 && vis[i][j][k] == 0) ans++, map[i][j][k] = 0;\n            return ans;\n        };\n    })();\n    for(let i = 0; i < n; i++) {\n        map.push([]);\n        ice.push([]);\n        for(let j = 0; j < n; j++) {\n            ice[i].push(0);\n            map[i].push([]);\n            for(let k = 0; k <= hm; k++) map[i][j].push(0);\n        }\n    }\n    for(let i = 0; i < m; i++) {\n        let list = optlist[i].trim().split(' ');\n        if(list[0] == \"ICE_BARRAGE\") ice_barrage(list[1], list[2], list[3], list[4]);\n        else if(list[0] == \"MAKE_ICE_BLOCK\") make_ice_block();\n        else if(list[0] == \"PUT_ICE_BLOCK\") put_ice_block(list[1], list[2], list[3]);\n        else if(list[0] == \"REMOVE_ICE_BLOCK\") remove_ice_block(list[1], list[2], list[3]);\n        else if(list[0] == \"MAKE_ROOF\") make_roof();\n\t\tif(i != m - 1) process.stdout.write(\"\\n\");\n    }\n    IO.close();\n}\n\nIO.on(\"line\", function (line) {\n    nowline++;\n    if(nowline == 1) n = Number(line.trim());\n    if(nowline == 2) hm = Number(line.trim());\n    if(nowline == 3) {\n        let list = line.trim().split(' ').map(a => Number(a));\n        sx = list[0], sy = list[1];\n        ex = list[0] + list[2] - 1, ey = list[1] + list[3] - 1;\n    }\n    if(nowline == 4) m = Number(line);\n    if(nowline > 4) {\n        optlist.push(line);\n        if(nowline == m + 4) main();\n    }\n});//\u8bfb\u5165(\u6211\u4e60\u60ef\u7528readline)\n```\n\u521a\u5b66js\uff0c\u5927\u4f6c\u8f7b\u55b7",
        "postTime": 1560575201,
        "uid": 67371,
        "name": "hehezhou",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3693 \u3010\u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b\u3011"
    },
    {
        "content": "# \u9996\u5148\u5410\u69fd\u4e00\u53e5\u51fa\u9898\u4eba\u771f\u662f\u6bd2\u7624\n\n\u7136\u540e\u5f00\u59cb\u8bb2\u4e00\u4e0b\u600e\u4e48\u505a\u8fd9\u9053\u9898\n\n\u6700\u7b80\u5355\u7684\u4e24\u4e2a\u64cd\u4f5c:\u51b0\u96ea\u5f39\u5e55,\u653e\u51b0\u5757.\u76f4\u63a5\u66b4\u529b\u6a21\u62df\u5373\u53ef......\n\n```cpp\nint freeze(int x, int y, int dir, int pow)\n{\n\tif (x < 0 || y < 0 || x >= n || y >= n)\n\t\treturn 0;\n\tif (pow < 0)\n\t\treturn 0;\n\tif (ice[x][y][0])\n\t\treturn 0;\n\tif (frzz[x][y] == 4)\n\t\treturn freeze(x + mx[dir], y + my[dir], dir, pow - 1);\n\telse\n\t\treturn freeze(x + mx[dir], y + my[dir], dir, pow - 1) + (frzz[x][y]++, 1);\n}\nint make()\n{\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int u = 0; u < n; u++)\n\t\t\tcnt += (frzz[i][u] == 4), bls += (frzz[i][u] == 4), frzz[i][u] %= 4;\n\treturn cnt;\n}\n```\n\n\u4e4b\u540e\u662f\u653e\u51b0\u5757,**\u6ce8\u610f\u51b0\u5757\u53ef\u4ee5\u6e05\u96f6\u4e0b\u9762\u7684\u5730\u9762**(\u88ab\u5751\u4e86).\n\n```cpp\nvoid put(int x, int y, int z)\n{\n\tbool suc = 1;\n\tif (!bls)\n\t{\n\t\tcout << \"CIRNO HAS NO ICE_BLOCK\\n\";\n\t\treturn;\n\t}\n\tif (ice[x][y][z] || (z && !ice[x - 1][y][z] && !ice[x][y - 1][z] && !ice[x][y][z - 1] && !ice[x + 1][y][z] && !ice[x][y + 1][z] && !ice[x][y][z + 1]))\n\t{\n\t\tcout << \"BAKA CIRNO,CAN'T PUT HERE\\n\";\n\t\treturn;\n\t}\n\tif (x > ex || x < sx || y > ey || y < sy)\n\t\tcout << \"CIRNO MISSED THE PLACE\\n\", suc = 0;\n\telse if (sx < x && x < ex && sx < y && y < ey)\n\t\tcout << \"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\", suc = 0;\n\tice[x][y][z] = 1;\n\tbls--;\n\tif (!z)\n\t\tfrzz[x][y] = 0;\n\tif (suc)\n\t\tcout << \"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS \" << bls << \" ICE_BLOCK(S)\\n\";\n}\n```\n\n\u4e4b\u540e\u662f\u79fb\u9664\u64cd\u4f5c,dfs\u51fa\u516d\u4e2a\u65b9\u5411\u7684\u8054\u901a\u5feb(\u6389\u4e0b\u6765\u6307\u8054\u901a\u5757\u6ca1\u6709\u78b0\u5230\u5730\u9762).\n\n```cpp\nbool dfs(int x, int y, int z)\n{\n\tif (x < 0 || y < 0 || z < 0 || x >= n || y >= n || z >= hm)\n\t\treturn false;\n\tif (!ice[x][y][z])\n\t\treturn false;\n\tif (mark[x][y][z])\n\t\treturn false;\n\tmark[x][y][z] = 1;\n\tbool ret = (z == 0);\n\tfor (int i = 0; i < 6 && (!ret); i++)\n\t\tret |= dfs(x + xm[i], y + ym[i], z + zm[i]);\n\treturn ret;\n}\nint remc(int x, int y, int z)\n{\n\tif (x < 0 || y < 0 || z < 0 || x >= n || y >= n || z >= hm)\n\t\treturn false;\n\tif (!ice[x][y][z])\n\t\treturn false;\n\tint siz = 1;\n\tice[x][y][z] = 0;\n\tfor (int i = 0; i < 6; i++)\n\t\tsiz += remc(x + xm[i], y + ym[i], z + zm[i]);\n\tice[x][y][z] = false;\n\treturn siz;\n}\nint remove(int x, int y, int z, bool cnt)\n{\n\tif (!ice[x][y][z])\n\t{\n\t\tcout << \"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\";\n\t\treturn 0;\n\t}\n\tice[x][y][z] = 0;\n\tif (cnt)\n\t\tbls++;\n\tint broken = 0;\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\tmemset(mark, 0, sizeof(mark));\n\t\tif (!dfs(x + xm[i], y + ym[i], z + zm[i]))\n\t\t\tbroken += remc(x + xm[i], y + ym[i], z + zm[i]);\n\t}\n\tif (broken && cnt)\n\t\tcout << \"CIRNO REMOVED AN ICE_BLOCK,AND \" << broken << \" BLOCK(S) ARE BROKEN\\n\";\n\telse if (cnt)\n\t\tcout << \"CIRNO REMOVED AN ICE_BLOCK\\n\";\n\treturn broken + 1;\n}\n```\n\u4e4b\u540e\u624d\u662f\u91cd\u70b9.\n\n**make_roof\u64cd\u4f5c\u8be5\u600e\u4e48\u505a?**\n\nmake_roof\u524d\u51e0\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355,\u6c42\u51fa\u9ad8\u5ea6\u4ee5\u53ca\u94fa\u5c4b\u9876,\u5220\u591a\u4f59\u7684\u90e8\u5206\u4e5f\u4e0d\u96be.\n\n\u4fee\u8865\u5899\u7684\u4ee3\u7801\u5c31\u975e\u5e38\u7a92\u606f\u4e86.\n\n\u7b2c\u4e00\u904d\u770b:ah_huh?\u8fd9\u662f\u5e72\u4ec0\u4e48\u95e8\u5728\u54ea\u91cc\n\n\u7b2c\u4e8c\u904d\u770b:\u95e8\u5728\u54ea\u91cc\u95e8\u5728\u54ea\u91cc\u95e8\u5728\u54ea\u91cc?\n\n\u6ce8\u610f\u9898\u76ee\u6240\u8bf4\u7684:\u5c3d\u53ef\u80fd\u5c11\u4fee\u8865\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u627e\u5230\u53ef\u4ee5\u5c11\u4fee\u8865\u7684\u95e8\u7684\u4f4d\u7f6e,\u4e3a\u4e86perfect\u5728\u5c11\u7684\u6761\u4ef6\u4e0b\u5c3d\u53ef\u80fd\u5728\u4e2d\u95f4.\n\n\u4e8e\u662f\u6211\u4eec\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u7684\u4f4d\u7f6e\u89c4\u5b9a\u4e00\u4e2a\u4f18\u5148\u7ea7,\u6309\u7167\u9700\u8981\u7684\u503c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57,\u662f\u5426\u4e3a\u4e2d\u95f4\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57,\u89d2\u5904\u586b\u8865\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u627e\u5230\u6700\u5927\u503c.\u7136\u540e\u786e\u5b9a\u95e8\u7684\u4f4d\u7f6e.\n\n```cpp\nint cntds(int x, int y) { return 2 - ice[x][y][0] - ice[x][y][1]; }\nbool mid(int x, int y)\n{\n\tif (x == (sx + ex) >> 1 || x == (sx + ex + 1) >> 1)\n\t\treturn 1;\n\tif (y == (sy + ey) >> 1 || y == (sy + ey + 1) >> 1)\n\t\treturn 1;\n\treturn 0;\n}\nint iscorn(int x, int y)\n{\n\tint ret = 0;\n\tbool flag = false;\n\tif (x - 1 == sx)\n\t\tret += 2 - cntds(sx, y), flag = true;\n\tif (x + 1 == ex)\n\t\tret += 2 - cntds(ex, y), flag = true;\n\tif (y - 1 == sy)\n\t\tret += 2 - cntds(x, sy), flag = true;\n\tif (y + 1 == ey)\n\t\tret += 2 - cntds(x, ey), flag = true;\n\tif (!flag)\n\t\treturn 4;\n\treturn ret;\n}//\u627e\u5230\u89d2\nint getid(int x, int y) { return cntds(x, y) << 4 | mid(x, y) << 3 | iscorn(x, y); }\nint dx, dy, v;\nvoid upd(int x, int y)\n{\n\tint nv = getid(x, y);\n\t// cout << x << ' ' << y << ' ' << cntds(x, y) << ' ' << mid(x, y) << ' ' << iscorn(x, y) << ' ' << nv << endl;\n\tif (nv > v)\n\t\tv = nv, dx = x, dy = y;\n}\n#define isdoor(i, u, j) (i == dx && u == dy && j < 2)\nint i_wanna_fix_the_wall()\n{\n\tint need = 0;\n\tfor (int i = sx + 1; i < ex; i++)\n\t\tupd(i, sy), upd(i, ey);\n\tfor (int i = sy + 1; i < ey; i++)\n\t\tupd(sx, i), upd(ex, i);//\u627e\u5230\u6700\u5927\u503c\n\tfor (int i = sx + 1; i < ex; i++)\n\t\tfor (int u = 0; u < maxh; u++)\n\t\t{\n\t\t\tif (!isdoor(i, sy, u))\n\t\t\t\tneed += !ice[i][sy][u], ice[i][sy][u] = 1;\n\t\t\tif (!isdoor(i, ey, u))\n\t\t\t\tneed += !ice[i][ey][u], ice[i][ey][u] = 1;\n\t\t}\n\tfor (int i = sy + 1; i < ey; i++)\n\t\tfor (int u = 0; u < maxh; u++)\n\t\t{\n\t\t\tif (!isdoor(sx, i, u))\n\t\t\t\tneed += !ice[sx][i][u], ice[sx][i][u] = 1;\n\t\t\tif (!isdoor(ex, i, u))\n\t\t\t\tneed += !ice[ex][i][u], ice[ex][i][u] = 1;\n\t\t}\n\tif (dx - 1 == sx)\n\t\tneed += cntds(sx, dy), ice[sx][dy][0] = ice[sx][dy][1] = 1;\n\tif (dx + 1 == ex)\n\t\tneed += cntds(ex, dy), ice[ex][dy][0] = ice[ex][dy][1] = 1;\n\tif (dy - 1 == sy)\n\t\tneed += cntds(dx, sy), ice[dx][sy][0] = ice[dx][sy][1] = 1;\n\tif (dy + 1 == ey)\n\t\tneed += cntds(dx, ey), ice[dx][ey][0] = ice[dx][ey][1] = 1;//\u4fee\u8865\u89d2\n\treturn need;\n}\n```\n\u8fd9\u6837\u5c31\u597d\u529e\u4e86~~,\u5c31\u4e0d\u7528\u90a3200\u884c\u4ee3\u7801\u4e86~~\n\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801.\n```cpp\n#include <cstring>\n#include <iostream>\n#include <utility>\n#if __cplusplus < 201103L\n#error your compiler smells like shit!\n#endif\nusing namespace std;\nint n, hm;\nint sx, sy, ex, ey;\nint m;\nstring op;\nint frzz[20][20];//\u51b0\u51bb\u503c\nbool ice[20][20][25], mark[20][20][25];//\u6709\u6ca1\u6709\u51b0,dfs\u6807\u8bb0\nint bls;//\u6709\u7684\u51b0\u5757\u6570\nint mx[8] = {-1, -1, 0, 1, 1, 1, 0, -1},\n\tmy[8] = {0, -1, -1, -1, 0, 1, 1, 1};//8\u65b9\u5411\nint xm[6] = {1, -1, 0, 0, 0, 0},\n\tym[6] = {0, 0, 1, -1, 0, 0},\n\tzm[6] = {0, 0, 0, 0, 1, -1};//6\u65b9\u5411\nint freeze(int x, int y, int dir, int pow)\n{\n\tif (x < 0 || y < 0 || x >= n || y >= n)\n\t\treturn 0;\n\tif (pow < 0)\n\t\treturn 0;\n\tif (ice[x][y][0])\n\t\treturn 0;\n\tif (frzz[x][y] == 4)\n\t\treturn freeze(x + mx[dir], y + my[dir], dir, pow - 1);\n\telse\n\t\treturn freeze(x + mx[dir], y + my[dir], dir, pow - 1) + (frzz[x][y]++, 1);\n}\nint make()\n{\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int u = 0; u < n; u++)\n\t\t\tcnt += (frzz[i][u] == 4), bls += (frzz[i][u] == 4), frzz[i][u] %= 4;\n\treturn cnt;\n}\ntypedef pair<int, int> mp;\nvoid put(int x, int y, int z)\n{\n\tbool suc = 1;\n\tif (!bls)\n\t{\n\t\tcout << \"CIRNO HAS NO ICE_BLOCK\\n\";\n\t\treturn;\n\t}\n\tif (ice[x][y][z] || (z && !ice[x - 1][y][z] && !ice[x][y - 1][z] && !ice[x][y][z - 1] && !ice[x + 1][y][z] && !ice[x][y + 1][z] && !ice[x][y][z + 1]))\n\t{\n\t\tcout << \"BAKA CIRNO,CAN'T PUT HERE\\n\";\n\t\treturn;\n\t}\n\tif (x > ex || x < sx || y > ey || y < sy)\n\t\tcout << \"CIRNO MISSED THE PLACE\\n\", suc = 0;\n\telse if (sx < x && x < ex && sx < y && y < ey)\n\t\tcout << \"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\", suc = 0;\n\tice[x][y][z] = 1;\n\tbls--;\n\tif (!z)\n\t\tfrzz[x][y] = 0;\n\tif (suc)\n\t\tcout << \"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS \" << bls << \" ICE_BLOCK(S)\\n\";\n}\nbool dfs(int x, int y, int z)\n{\n\tif (x < 0 || y < 0 || z < 0 || x >= n || y >= n || z >= hm)\n\t\treturn false;\n\tif (!ice[x][y][z])\n\t\treturn false;\n\tif (mark[x][y][z])\n\t\treturn false;\n\tmark[x][y][z] = 1;\n\tbool ret = (z == 0);\n\tfor (int i = 0; i < 6 && (!ret); i++)\n\t\tret |= dfs(x + xm[i], y + ym[i], z + zm[i]);\n\treturn ret;\n}\nint remc(int x, int y, int z)\n{\n\tif (x < 0 || y < 0 || z < 0 || x >= n || y >= n || z >= hm)\n\t\treturn false;\n\tif (!ice[x][y][z])\n\t\treturn false;\n\tint siz = 1;\n\tice[x][y][z] = 0;//\u5220\u9664\u6389\u843d\u65b9\u5757\n\tfor (int i = 0; i < 6; i++)\n\t\tsiz += remc(x + xm[i], y + ym[i], z + zm[i]);\n\tice[x][y][z] = false;\n\treturn siz;\n}\nint remove(int x, int y, int z, bool cnt)\n{\n\tif (!ice[x][y][z])\n\t{\n\t\tcout << \"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\";\n\t\treturn 0;\n\t}\n\tice[x][y][z] = 0;\n\tif (cnt)\n\t\tbls++;\n\tint broken = 0;\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\tmemset(mark, 0, sizeof(mark));\n\t\tif (!dfs(x + xm[i], y + ym[i], z + zm[i]))\n\t\t\tbroken += remc(x + xm[i], y + ym[i], z + zm[i]);//\u5220\u6389\u843d\u65b9\u5757\n\t}\n\tif (broken && cnt)\n\t\tcout << \"CIRNO REMOVED AN ICE_BLOCK,AND \" << broken << \" BLOCK(S) ARE BROKEN\\n\";\n\telse if (cnt)\n\t\tcout << \"CIRNO REMOVED AN ICE_BLOCK\\n\";\n\treturn broken + 1;\n}\nint roofheight()\n{\n\tint h = 0;\n\tfor (int i = sx; i <= ex; i++)\n\t\tfor (int u = hm; u > h; u--)\n\t\t\tif (ice[i][sy][u] || ice[i][ey][u])\n\t\t\t\th = u;\n\tfor (int i = sy; i <= ey; i++)\n\t\tfor (int u = hm; u > h; u--)\n\t\t\tif (ice[sx][i][u] || ice[ex][i][u])\n\t\t\t\th = u;\n\treturn h + 1;\n}\nint maxh;\nint in(int x, int y, int z) { return (sx < x && x < ex && sy < y && y < ey && z < maxh); }\nint out(int x, int y, int z) { return x < sx || x > ex || y < sy || y > ey || z > maxh; }\nmp ioblock()\n{\n\tmp ret = {0, 0};\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int u = 0; u < n; u++)\n\t\t\tfor (int j = 0; j < hm; j++)\n\t\t\t\tif (ice[i][u][j])\n\t\t\t\t\tret.first += out(i, u, j), ret.second += in(i, u, j);\n\treturn ret;\n}\nint cntds(int x, int y) { return 2 - ice[x][y][0] - ice[x][y][1]; }\nbool mid(int x, int y)\n{\n\tif (x == (sx + ex) >> 1 || x == (sx + ex + 1) >> 1)\n\t\treturn 1;\n\tif (y == (sy + ey) >> 1 || y == (sy + ey + 1) >> 1)\n\t\treturn 1;\n\treturn 0;\n}\nint iscorn(int x, int y)\n{\n\tint ret = 0;\n\tbool flag = false;\n\tif (x - 1 == sx)\n\t\tret += 2 - cntds(sx, y), flag = true;\n\tif (x + 1 == ex)\n\t\tret += 2 - cntds(ex, y), flag = true;\n\tif (y - 1 == sy)\n\t\tret += 2 - cntds(x, sy), flag = true;\n\tif (y + 1 == ey)\n\t\tret += 2 - cntds(x, ey), flag = true;\n\tif (!flag)\n\t\treturn 4;\n\treturn ret;\n}\nint getid(int x, int y) { return cntds(x, y) << 4 | mid(x, y) << 3 | iscorn(x, y); }\nint dx, dy, v;\nvoid upd(int x, int y)\n{\n\tint nv = getid(x, y);\n\t// cout << x << ' ' << y << ' ' << cntds(x, y) << ' ' << mid(x, y) << ' ' << iscorn(x, y) << ' ' << nv << endl;\n\tif (nv > v)\n\t\tv = nv, dx = x, dy = y;\n}\n#define isdoor(i, u, j) (i == dx && u == dy && j < 2)\nint i_wanna_fix_the_wall()\n{\n\tint need = 0;\n\tfor (int i = sx + 1; i < ex; i++)\n\t\tupd(i, sy), upd(i, ey);\n\tfor (int i = sy + 1; i < ey; i++)\n\t\tupd(sx, i), upd(ex, i);\n\tfor (int i = sx + 1; i < ex; i++)\n\t\tfor (int u = 0; u < maxh; u++)\n\t\t{\n\t\t\tif (!isdoor(i, sy, u))\n\t\t\t\tneed += !ice[i][sy][u], ice[i][sy][u] = 1;\n\t\t\tif (!isdoor(i, ey, u))\n\t\t\t\tneed += !ice[i][ey][u], ice[i][ey][u] = 1;\n\t\t}\n\tfor (int i = sy + 1; i < ey; i++)\n\t\tfor (int u = 0; u < maxh; u++)\n\t\t{\n\t\t\tif (!isdoor(sx, i, u))\n\t\t\t\tneed += !ice[sx][i][u], ice[sx][i][u] = 1;\n\t\t\tif (!isdoor(ex, i, u))\n\t\t\t\tneed += !ice[ex][i][u], ice[ex][i][u] = 1;\n\t\t}\n\tif (dx - 1 == sx)\n\t\tneed += cntds(sx, dy), ice[sx][dy][0] = ice[sx][dy][1] = 1;\n\tif (dx + 1 == ex)\n\t\tneed += cntds(ex, dy), ice[ex][dy][0] = ice[ex][dy][1] = 1;\n\tif (dy - 1 == sy)\n\t\tneed += cntds(dx, sy), ice[dx][sy][0] = ice[dx][sy][1] = 1;\n\tif (dy + 1 == ey)\n\t\tneed += cntds(dx, ey), ice[dx][ey][0] = ice[dx][ey][1] = 1;\n\treturn need;\n}\nvoid roof()\n{\n\tint needb = 0;\n\tmaxh = roofheight();\n\tfor (int i = sx; i <= ex; i++)\n\t\tfor (int u = sy; u <= ey; u++)\n\t\t\tneedb += !ice[i][u][maxh];\n\tif (needb > bls)\n\t\tcout << \"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\", exit(0);\n\tif (maxh < 2 || (ex - sx - 1) * (ey - sy - 1) < 2)\n\t\tcout << \"SORRY CIRNO,HOUSE IS TOO SMALL\", exit(0);\n\tfor (int i = sx; i <= ex; i++)\n\t\tfor (int u = sy; u <= ey; u++)\n\t\t\tice[i][u][maxh] = 1;\n\tbls -= needb;\n\tmp ans = ioblock();\n\tcout << ans.second << \" ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\";\n\tcout << ans.first << \" ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\";\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int u = 0; u < n; u++)\n\t\t\tfor (int j = 0; j < hm; j++)\n\t\t\t{\n\t\t\t\tif (!ice[i][u][j])\n\t\t\t\t\tcontinue;\n\t\t\t\tif (in(i, u, j) || out(i, u, j))\n\t\t\t\t\tbls += remove(i, u, j, 0);\n\t\t\t}\n\tfor (int i = sx; i <= ex; i++)\n\t\tfor (int u = sy; u <= ey; u++)\n\t\t\tif (!ice[i][u][maxh])\n\t\t\t\tcout << \"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\", exit(0);\n\tint need = i_wanna_fix_the_wall();\n\tif (bls < need)\n\t\tcout << \"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\", exit(0);\n\tbls -= need;\n\tcout << \"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\";\n\tif ((v >> 4) == 2)\n\t\tcout << \"DOOR IS OK\\n\";\n\telse\n\t\tcout << \"HOUSE HAS NO DOOR\\n\", bls += ice[dx][dy][0] + ice[dx][dy][1], ice[dx][dy][0] = ice[dx][dy][1] = 0;\n\tif (!need)\n\t\tcout << \"WALL IS OK\\n\";\n\telse\n\t\tcout << \"WALL NEED TO BE FIXED\\n\";\n\tint cfx = 0;\n\tfor (int i = 0; i < maxh; i++)\n\t\tcfx += !ice[sx][sy][i], cfx += !ice[sx][ey][i], cfx += !ice[ex][sy][i], cfx += !ice[ex][ey][i], ice[sx][sy][i] = ice[sx][ey][i] = ice[ex][sy][i] = ice[ex][ey][i] = 1;\n\tbls = max(0, bls - cfx);\n\tif (!cfx)\n\t\tcout << \"CORNER IS OK\\n\";\n\telse\n\t\tcout << \"CORNER NEED TO BE FIXED\\n\";\n\tcout << \"CIRNO FINALLY HAS \" << bls << \" ICE_BLOCK(S)\\n\";\n\tif (ans == mp(0, 0) && !need && !cfx && (v & 1 << 3) && (v >> 4 == 2))\n\t\tcout << \"CIRNO IS PERFECT!\\n\";\n}\nint main()\n{\n\tcin >> n >> hm >> sx >> sy >> ex >> ey;\n\tex += sx - 1, ey += sy - 1;\n\tcin >> m;\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tcin >> op;\n\t\tif (op == \"ICE_BARRAGE\")\n\t\t{\n\t\t\tint x, y, d, z;\n\t\t\tcin >> x >> y >> d >> z;\n\t\t\tif (i != m - 1)\n\t\t\t\tcout << \"CIRNO FREEZED \" << freeze(x, y, d, z) << \" BLOCK(S)\\n\";\n\t\t\telse\n\t\t\t\tcout << \"CIRNO FREEZED \" << freeze(x, y, d, z) << \" BLOCK(S)\";\n\t\t}\n\t\telse if (op == \"MAKE_ICE_BLOCK\")\n\t\t\tcout << \"CIRNO MADE \" << make() << \" ICE BLOCK(S),NOW SHE HAS \" << bls << \" ICE BLOCK(S)\\n\";\n\t\telse if (op == \"PUT_ICE_BLOCK\")\n\t\t{\n\t\t\tint x, y, z;\n\t\t\tcin >> x >> y >> z;\n\t\t\tput(x, y, z);\n\t\t}\n\t\telse if (op == \"REMOVE_ICE_BLOCK\")\n\t\t{\n\t\t\tint x, y, z;\n\t\t\tcin >> x >> y >> z;\n\t\t\tremove(x, y, z, 1);\n\t\t}\n\t\telse if (op == \"MAKE_ROOF\")\n\t\t\troof();\n\t}\n}\n```",
        "postTime": 1544700885,
        "uid": 38485,
        "name": "Erina",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3693 \u3010\u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u5199\u5f97\u6211\u5feb\u5410\u8840\u4e86\u3002\n\n\u7ec6\u8282\u5de8\u591a\u3002\n\n\u6211\u4eec\u6765\u4e00\u5757\u4e00\u5757\u5206\u6790\u3002\n\n## 1.\u7ea6\u5b9a\n\n\n\u4ee3\u7801\u4e2d\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n`N,Hm,Hr,Hc,Hx,Hy,M,r,c,h` \u90fd\u5206\u522b\u4ee3\u8868\u9898\u9762\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u3002`Hf` \u8bb0\u5f55\u5c4b\u9876\u9ad8\u5ea6\u3002\n\n`Put[i][j][k]` \u6807\u5fd7 $(i,j,k)$ \u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5426\u653e\u7f6e\u51b0\u7816\u3002\n\n`Freeze[i][j]` \u8bb0\u5f55\u5730\u9762\u8fd9\u4e2a\u5e73\u9762\u4e0a $(i,j)$ \u7684\u51b0\u51bb\u5ea6\u3002\n\n`Zcnt` \u4e3a\u5f53\u524d\u51b0\u7816\u6570\uff0c`Ncnt` \u662f\u5f53\u524d\u64cd\u4f5c\u6240\u9700\u7684\u51b0\u7816\u6570\uff0c`out` `out1` \u7b49\u662f\u5c06\u8981\u8f93\u51fa\u7684\u4e1c\u897f\u3002\n\n\u51fd\u6570\u5206\u522b\u4ee3\u8868\u9898\u9762\u4e2d\u540c\u540d\u64cd\u4f5c\u3002\n\n`CanPut` \u51fd\u6570\u89c1 \u201c\u524d\u4e09\u4e2a\u64cd\u4f5c\u201d\u7684\u4ee3\u7801\u3002\n\n\u5bf9\u4e8e `R,C,H` \u7684\u987a\u5e8f\uff0c\u90fd\u662f\u6309\u7167 `R,C,H` \u6392\u7684\u3002\n\n---\n## 2. \u524d\u4e09\u4e2a\u64cd\u4f5c\n\n\u6b63\u5982\u9898\u89e3\u533a\u7684\u5404\u4f4d\u6240\u8bf4\uff0c\u524d\u4e09\u4e2a\u64cd\u4f5c\u4ec5\u4ec5\u53ea\u9700\u6309\u7167\u9898\u9762\u5b89\u6392\u7684\u903b\u8f91\u987a\u5e8f\u8fdb\u884c\u7f16\u5199\uff0c\u4e0d\u8fdb\u884c\u91cd\u70b9\u8bb2\uff0c\u4ec5\u7ed9\u51fa\u4ee3\u7801\u3002\n\n```cpp\ninline bool CanPut(int r,int c,int h){\n\tint dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\tif(!h||Put[r][c][h-1]) return 1;\n\tfor(int i=0;i<4;i++)\n\t\tif(r+dx[i]>=0&&r+dx[i]<=N&&c+dy[i]>=0&&c+dy[i]<=N&&Put[r+dx[i]][c+dy[i]][h]) return 1;\n\treturn 0;\n}\ninline void IceBarrage(){\n\tint r=read(),c=read(),d=read(),s=read();\n\tint dx[8]={-1,-1,0,1,1,1,0,-1},dy[8]={0,-1,-1,-1,0,1,1,1};\n\tint out=0;\n\tfor(int i=0;i<=s;i++){\n\t\tif(Put[r][c][0]||r>N||c>N||r<0||c<0) break;\n\t\tif(Freeze[r][c]<4) Freeze[r][c]++,out++;\n\t\tr+=dx[d],c+=dy[d];\n\t}\n\tprintf(\"CIRNO FREEZED %d BLOCK(S)\\n\",out);\n}\ninline void MakeIceBlock(){\n\tint out=0;\n\tfor(int i=0;i<=N;i++)\n\tfor(int j=0;j<=N;j++)\n\t\tif(!Put[i][j][0]&&Freeze[i][j]==4) Freeze[i][j]=0,out++;\n\tZcnt+=out;\n\tprintf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\",out,Zcnt);\n} \ninline void PutIceBlock(){\n\tint r=read(),c=read(),h=read();\n\tif(!Zcnt) puts(\"CIRNO HAS NO ICE_BLOCK\");\n\telse if(!CanPut(r,c,h)||Put[r][c][h]) puts(\"BAKA CIRNO,CAN'T PUT HERE\");\n\telse{\n\t\tif(!h) Freeze[r][c]=0;\n\t\tPut[r][c][h]=1;Zcnt--;\n\t\tif(r<Hr||r>Hr+Hx-1||c<Hc||c>Hc+Hy-1) puts(\"CIRNO MISSED THE PLACE\");\n\t\telse if(Hr<r&&r<Hr+Hx-1&&Hc<c&&c<Hc+Hy-1) puts(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\");\n\t\telse printf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\",Zcnt);\n\t}\n}\n```\n---\n## 3. $\\textbf{Remove Ice Block}$ \u64cd\u4f5c\n\n\u5982\u679c $(r,c,h)$ \u8fd9\u4e2a\u70b9\u6ca1\u6709\u51b0\u7816\uff0c\u8f93\u51fa `BAKA CIRNO,THERE IS NO ICE_BLOCK`\u3002\n\n\u5426\u5219\uff0c\u5220\u9664\u6389\u8fd9\u4e2a\u51b0\u7816\uff0c\u7136\u540e\u4f9d\u6b21\u5f80\u516d\u4e2a\u65b9\u5411\u8fdb\u884c `bfs`\uff0c\u5982\u679c\u67d0\u4e2a\u65b9\u5411\u4e0a\u7684 `bfs` \u4e0d\u5230\u5730\u9762\u7684\u8bdd\uff0c\u6240\u6709\u88ab\u641c\u7d22\u5230\u7684\u51b0\u7816\u5168\u90e8\u90fd `BROKEN`\u3002\n\n\u6ce8\u610f\uff1a\u65f6\u65f6\u523b\u523b\u90fd\u9700\u8981\u5224\u65ad\u662f\u5426\u8d8a\u754c\uff01\n\n```cpp\ninline int bfs(int r,int c,int h){\n\tif(r<0||c<0||h<0||r>N||c>N||h>Hm||!Put[r][c][h]) return 0; //\u5224\u8d8a\u754c1\n\tqueue<triple>q;\n\tint dr[6]={1,0,0,-1,0,0},dc[6]={0,1,0,0,-1,0},dh[6]={0,0,1,0,0,-1};\n\twhile(!q.empty()) q.pop();\n\tq.push(triple(r,c,h));\n\tbool f=0;\n\tmemset(vis,0,sizeof vis);vis[r][c][h]=1;\n\twhile(!q.empty()&&!f){\n\t\tint R=q.front().r,C=q.front().c,H=q.front().h;q.pop();\n\t\tif(H==0) {f=1;break;}\n\t\tfor(int i=0;i<6;i++){\n\t\t\tint tr=R+dr[i],tc=C+dc[i],th=H+dh[i];\n\t\t\tif(tr<0||tc<0||th<0||tr>N||tc>N|th>Hm) continue;//\u5224\u8d8a\u754c2\n\t\t\tif(Put[tr][tc][th]&&!vis[tr][tc][th]) vis[tr][tc][th]=1,q.push(triple(tr,tc,th));\n\t\t}\n\t}\n\tif(!f){\n\t\tint cnt=1;\n\t\twhile(!q.empty()) q.pop();\n\t\tq.push(triple(r,c,h));Put[r][c][h]=0;\n\t\twhile(!q.empty()){\n\t\t\tint R=q.front().r,C=q.front().c,H=q.front().h;q.pop();\n\t\t\tfor(int i=0;i<6;i++){\n\t\t\t\tint tr=R+dr[i],tc=C+dc[i],th=H+dh[i];\n\t\t\t\tif(tr<0||tc<0||th<0||tr>N||tc>N|th>Hm) continue;//\u5224\u8d8a\u754c3\n\t\t\t\tif(Put[tr][tc][th]) Put[tr][tc][th]=0,q.push(triple(tr,tc,th)),cnt++;\n\t\t\t}\n\t\t}\n\t\treturn cnt;\n\t}\n\treturn 0;\n}\ninline void RemoveIceBlock(){\n\tint r=read(),c=read(),h=read(),out=0;\n\tif(!Put[r][c][h]) puts(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\");\n\telse{\n\t\tprintf(\"CIRNO REMOVED AN ICE_BLOCK\");Zcnt++;Put[r][c][h]=0;\n\t\tint dr[6]={1,0,0,-1,0,0},dc[6]={0,1,0,0,-1,0},dh[6]={0,0,1,0,0,-1};\n\t\tfor(int i=0;i<6;i++) out+=bfs(r+dr[i],c+dc[i],h+dh[i]);\n\t\tif(!out) puts(\"\");\n\t\telse printf(\",AND %d BLOCK(S) ARE BROKEN\\n\",out); \n\t}\n}\n```\n\uff08\u6211\u8fd9\u91cc `BROKEN` \u7684\u64cd\u4f5c\u662f\u518d\u6b21\u8fdb\u884c `bfs`\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u6240\u6709 `vis` \u5230\u7684\u4f4d\u7f6e\u90fd\u5220\u9664\u5373\u53ef\u3002\uff09\n\n# 4. $\\color{red}\\textbf{Make Roof}$ \u64cd\u4f5c\n\u6bd2\u7624\uff0c\u5373\u5c06\u5230\u6765\u3002\n\n\u9996\u5148\u76f4\u63a5\u4ece\u9ad8\u5230\u4f4e\u679a\u4e3e\uff0c\u6c42\u51fa\u5c4b\u9876\u7684\u9ad8\u5ea6\u3002\n\n\u7136\u540e\u628a\u5c4b\u9876\u505a\u597d\uff0c\u5224\u65ad\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u7136\u540e\uff0c\u7801\u4ee3\u7801\u524d\u5148\u8bfb\u9898\u9762\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u8fd9\u6837\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff1a\n\n>\u6700\u540e\uff0c\u5982\u679c\u5728\u4e4b\u524d\u7684\u8bb0\u5f55\u4e2d\uff0c\u5899\u58c1\u5b8c\u6574\u65e0\u7f3a\uff0c\u6ca1\u6709\u4e00\u4e2a\u4f4d\u7f6e\u9700\u8981\u586b\u8865\u3002\u623f\u5b50\u5185\u5916\u90fd\u65e0\u4efb\u4f55\u591a\u4f59\u7684\u65b9\u5757\uff0c\u6ca1\u6709\u4e00\u4e2a\u4f4d\u7f6e\u9700\u8981\u79fb\u9664\u3002\u6ca1\u6709\u51fa\u73b0\u623f\u5b50\u6ca1\u95e8\u7684\u60c5\u51b5\uff0c\u623f\u5b50\u56db\u89d2\u7684\u67f1\u5b50\u4e5f\u5728\u9020\u5c4b\u9876\u524d\u5b8c\u5168\u9020\u597d\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u4fee\u8865\u5b8c\u5584\u7684\u3002\u5e76\u4e14\u95e8\u6070\u597d\u5f00\u5728\u4e86\u67d0\u9762\u5899\u7684\u6b63\u4e2d\u592e\uff08\u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u4e2d\u95f4\u7684\u4e24\u4e2a\u90fd\u7b97\uff09\uff0c\u8f93\u51fa\u4e00\u884c\uff1a\n`CIRNO IS PERFECT!`\n\n\u6240\u4ee5\u8bf4\uff0c\u6700\u540e\u8fd8\u9700\u8981\u5224\u4e2a\u5b8c\u7f8e\u3002\n\n\u4f46\u5176\u5b9e\u8fd9\u4e1c\u897f\u53ef\u4ee5\u63d0\u5230\u524d\u9762\u6765\u5148\u5199\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5199\u4e09\u4e2a\u5224\u65ad\u662f\u5426\u5728\u623f\u5185\u3001\u623f\u5916\u3001\u623f\u4e0a\uff08\u5c31\u662f\u5c4b\u9876\u6216\u5899\uff09\u7684\u51fd\u6570\uff0c\u5206\u522b\u79f0\u4f5c `InsideRoom,OutsideRoom,TheRoom`\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757 $(i,j,k)$ \u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\n- \u653e\u4e86\u51b0\u7816\u3002\u5982\u679c `TheRoom(i,j,k)==false`\uff0c\u5219\u5c31\u662f\u4e0d\u5b8c\u7f8e\u7684\u3002\n- \u672a\u653e\u51b0\u7816\u3002\u5982\u679c `TheRoom(i,j,k)==true`\uff1a\n\t- \u9ad8\u5ea6 $=0$ \u4e14\u4f4d\u4e8e\u5899\u7684\u4e2d\u95f4\uff0c\u5219\u8fd9\u4e2a\u5fc5\u987b\u5f53\u505a\u95e8\uff1b\u5982\u679c\u95e8\u5df2\u7ecf\u6709\u4e86\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0d\u5b8c\u7f8e\u7684\u3002\n    - \u9ad8\u5ea6 $=1$ \u4e14\u4e0d\u4f4d\u4e8e\u5019\u9009\u95e8\u4e0a\u65b9\uff0c\u90a3\u4e48\u4e5f\u662f\u4e0d\u5b8c\u7f8e\u7684\u3002\n    - \u5426\u5219\uff0c\u4e5f\u4e00\u5b9a\u662f\u4e0d\u5b8c\u7f8e\u7684\u3002\n\n\u5982\u679c\u8fd9\u4e48\u4e0b\u6765\uff0c\u662f\u5b8c\u7f8e\u7684\uff0c\u90a3\u5c31\u76f4\u63a5\u628a\u6240\u6709\u5e94\u8be5\u8f93\u51fa\u7684\u4e1c\u897f\u8f93\u51fa\u5373\u53ef\uff08\u8be6\u60c5\u770b\u4ee3\u7801\uff09\u3002\n\n---\n\u8fd9\u6837\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u65e0\u9700\u5224\u65ad\u662f\u5426\u662f\u5b8c\u7f8e\u7684\uff0c\u8282\u7701\u4e86\u8bb8\u591a\u5224\u65ad\uff0c\u6bd4\u5982\u65e0\u9700\u5224\u65ad\u95e8\u662f\u5426\u8981\u5728\u5899\u4e2d\u95f4\uff0c\u65e0\u9700\u8bb0\u5f55\u5899\u662f\u5426\u6ca1\u4fee\u7b49\u7b49\u3002\n\n\u79fb\u9664\u6240\u6709\u591a\u4f59\u51b0\u7816\u8fd9\u5757\u5185\u5bb9\u5176\u5b9e\u4e0d\u9700\u8981\u8003\u8651\u662f\u5426\u4f1a\u6454\u788e\u51b0\u7816\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4ece\u5730\u9762\u5f00\u59cb\u7684 `bfs` \u7684\u987a\u5e8f\u5012\u5e8f\u5220\u9664\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u6454\u788e\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u76f4\u63a5\u5220\u9664\u591a\u4f59\u7684\u51b0\u7816\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u518d\u4ece\u63a5\u89e6\u5730\u9762\u7684\u5899\u58c1\u5757\u5f80\u4e0a `bfs`\uff0c\u53ea\u8981\u6ca1\u641c\u7d22\u5230\u7684\u5730\u65b9\u90fd\u662f\u9700\u8981\u5220\u9664\u7684\u3002\n\n\u7279\u6b8a\u60c5\u51b5\u8bb0\u5f97\u5224\u65ad\u3002\n\n\u63a5\u7740\uff0c\u5230\u4e86\u6700\u6076\u5fc3\u7684\u73af\u8282\u2014\u2014**\u9009\u95e8**\n\n- \u5982\u679c\u6709\u73b0\u6210\u7684\u95e8\u4e14\u4e0d\u5728\u67f1\u5b50\u65c1\uff0c\u90a3\u4e48\u76f4\u63a5\u9009\u3002\n- \u5982\u679c\u6709\u73b0\u6210\u7684\u95e8\u4f46\u662f\u5728\u67f1\u5b50\u65c1\uff0c\u5982\u679c\u67f1\u5b50\u4e0d\u9700\u8981\u4fee\u8865\uff0c\u90a3\u4e48\u4e5f\u76f4\u63a5\u9009\u3002\n- \u5982\u679c\u6709\u4e00\u4e2a\u7a7a\u683c\u4e14\u4e0d\u5728\u67f1\u5b50\u65c1\uff0c\u90a3\u4e48\u4f5c\u4e3a\u5019\u9009\u95e8\u3002\n- \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7a7a\u4f4d\uff0c\u90a3\u4e48\u968f\u673a\u9009\u53d6\u4e00\u4e2a\uff08\u5c3d\u91cf\u4e0d\u5728\u67f1\u5b50\u65c1\uff09\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u5019\u9009\u95e8\u3002\n- \u7136\u540e\uff0c\u5c31\u5269\u4e0b\u4e86\uff0c\u5728\u67f1\u5b50\u65c1\u7684\uff0c\u6709\u7a7a\u4f4d\u7684\u4f4d\u7f6e\u4e86\u3002\u4f9d\u6b21\u679a\u4e3e\uff0c\u8ba1\u7b97\u9700\u8981\u586b\u8865\u7684\u683c\u5b50\u6570\uff0c\u53d6\u4e00\u4e2a\u6700\u5c0f\u503c\u4f5c\u4e3a\u5019\u9009\u95e8\uff1b\u82e5\u662f\u5019\u9009\u95e8\u662f\u5b8c\u6574\u7684\u95e8\uff0c\u90a3\u4e48\u5728\u4e4b\u540e\u4e5f\u662f\u8981\u8f93\u51fa `DOOR IS OK` \u7684\u3002\n\n\u8fd9\u4e2a\u679a\u4e3e\u5de8\u6076\u5fc3\uff0c\u6211\u8c03\u4e86\u5de8\u4e45\u3002\n\n\u9009\u5b8c\u95e8\u7ee7\u7eed\u586b\u8865\u3002\u6ce8\u610f\uff0c\u5982\u679c\u95e8\u9009\u5728\u67f1\u5b50\u65c1\uff0c\u90a3\u4e48\u8fd9\u6bb5\u67f1\u5b50\u4e0d\u5e94\u7b97\u4f5c `CORNER` \u800c\u5e94\u7b97\u4f5c `WALL`\u3002\n\n\u540e\u9762\u51e0\u4e2a\u8bc4\u4ef7\uff0c\u5224\u65ad\u540e\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5982\u679c\u4fee\u62d0\u89d2\u65f6\u51b0\u7816\u4e0d\u591f\u65f6\uff0c\u51b0\u7816\u9700\u6e05\u96f6\u3002\n```cpp\ninline bool InsideRoom(int r,int c,int h){return r>Hr&&r<Hr+Hx-1&&c>Hc&&c<Hc+Hy-1&&h<Hf;}\ninline bool OutsideRoom(int r,int c,int h){return r<Hr||r>Hr+Hx-1||c<Hc||c>Hc+Hy-1||h>Hf;}\ninline bool TheRoom(int r,int c,int h){return (!InsideRoom(r,c,h))&&(!OutsideRoom(r,c,h));}\ninline void MakeRoof(){\n\tbool Perfect=1;int Dx=-1,Dy=-1;\n\tfor(Hf=Hm+1;Hf;Hf--){\n\t\tbool fl=0;\n\t\tfor(int i=0;i<Hx;i++)\n\t\t\tif(Put[i+Hr][Hc][Hf]||Put[i+Hr][Hc+Hy-1][Hf]) fl=1;\n\t\tfor(int i=0;i<Hy;i++)\n\t\t\tif(Put[Hr][i+Hc][Hf]||Put[Hr+Hx-1][i+Hc][Hf]) fl=1;\n\t\tif(fl) break; \n\t}\n\tint Ncnt=0;Hf++;\n\tfor(int i=0;i<Hx;i++)\n\tfor(int j=0;j<Hy;j++)\n\t\tif(!Put[i+Hr][j+Hc][Hf]) Ncnt++,Put[i+Hr][j+Hc][Hf]=1;\n\tif(Zcnt<Ncnt) {puts(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\");return;}\n\tif(Hf<2||(Hf-1)*(Hx-2)*(Hy-2)<2) {puts(\"SORRY CIRNO,HOUSE IS TOO SMALL\");return;}\n\tZcnt-=Ncnt;\n\tfor(int i=0;i<=N&&Perfect;i++)\n\tfor(int j=0;j<=N&&Perfect;j++)\n\tfor(int k=0;k<=Hm&&Perfect;k++)\n\t\t if(Put[i][j][k]) {if(!TheRoom(i,j,k)) Perfect=0;}\n\t\t else{\n\t\t \tif(TheRoom(i,j,k)){\n\t\t \t\tif(k>1) Perfect=0;\n\t\t \t\telse{\n\t\t \t\t\t if(k==0){\n\t\t \t\t\t \tif(Dx!=-1) Perfect=0;\n\t\t\t\t\t \telse if(i==Hr+(Hx-1)/2||i==Hr+Hx/2||j==Hc+(Hy-1)/2||j==Hc+Hy/2) Dx=i,Dy=j;\n\t\t\t\t\t \telse Perfect=0;\n\t\t\t\t\t }\n\t\t\t\t\t else{\n\t\t\t\t\t \tif(Dx!=i||Dy!=j) Perfect=0;\n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\tif(Perfect){\n\t\tputs(\"0 ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\");\n\t\tputs(\"0 ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\");\n\t\tputs(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\");\n\t\tputs(\"DOOR IS OK\");\n\t\tputs(\"WALL IS OK\");\n\t\tputs(\"CORNER IS OK\");\n\t\tprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\",Zcnt);\n\t\tputs(\"CIRNO IS PERFECT!\");\n\t\treturn;\n\t}\n\tint out1,out2;out1=out2=0;\n\tfor(int i=0;i<=N;i++)\n\tfor(int j=0;j<=N;j++)\n\tfor(int k=0;k<=Hm;k++){\n\t\tif(Put[i][j][k]){\n\t\t\tif(InsideRoom(i,j,k)) out1++,Put[i][j][k]=0;\n\t\t\telse if(OutsideRoom(i,j,k)) out2++,Put[i][j][k]=0;\n\t\t}\n\t}\n\tZcnt+=out1+out2;\n\tmemset(vis,0,sizeof vis);\n\tqueue<triple> q;\n\twhile(!q.empty()) q.pop();\n\tfor(int i=Hr;i<=Hr+Hx-1;i++)\n\tfor(int j=Hc;j<=Hc+Hy-1;j++)\t\n\t\tif(Put[i][j][0]) q.push(triple(i,j,0)),vis[i][j][0]=1;\n\tint dr[6]={1,0,0,-1,0,0},dc[6]={0,1,0,0,-1,0},dh[6]={0,0,1,0,0,-1};\n\twhile(!q.empty()){\n\t\tint R=q.front().r,C=q.front().c,H=q.front().h;q.pop();\n\t\tfor(int i=0;i<6;i++){\n\t\t\tint tr=R+dr[i],tc=C+dc[i],th=H+dh[i];\n\t\t\tif(!TheRoom(tr,tc,th)) continue;\n\t\t\tif(Put[tr][tc][th]&&!vis[tr][tc][th]) vis[tr][tc][th]=1,q.push(triple(tr,tc,th));\n\t\t}\n\t}\n\tfor(int i=Hr;i<=Hr+Hx-1;i++)\n\tfor(int j=Hc;j<=Hc+Hy-1;j++)\n\tfor(int k=0;k<Hf;k++)\n\t\tif(!vis[i][j][k]&&Put[i][j][k]) Put[i][j][k]=0,Zcnt++;\n\tprintf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\",out1);\n\tprintf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\",out2);\n\tif(!vis[Hr][Hc][Hf]){puts(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\");return;}\n\tbool door=0;int x=-1,y=-1;\n\tfor(int i=Hr+2;i<Hr+Hx-2&&!door;i++){\n\t\tif(!Put[i][Hc][0]&&!Put[i][Hc][1])door=1,x=i,y=Hc;\n\t\telse if(!Put[i][Hc+Hy-1][0]&&!Put[i][Hc+Hy-1][1])door=1,x=i,y=Hc+Hy-1;\n\t}\n\tfor(int i=Hc+2;i<Hc+Hy-2&&!door;i++){\n\t\tif(!Put[Hr][i][0]&&!Put[Hr][i][1])door=1,x=Hr,y=i;\n\t\telse if(!Put[Hr+Hx-1][i][0]&&!Put[Hr+Hx-1][i][1])door=1,x=Hr+Hx-1,y=i; \n\t}\n\tif(!door){\n\t\tfor(int i=Hr+2;i<Hr+Hx-2&&x==-1&&y==-1;i++)\n\t\t\tif(!Put[i][Hc][0]||!Put[i][Hc][1]) x=i,y=Hc;\n\t\t\telse if(!Put[i][Hc+Hy-1][0]||!Put[i][Hc+Hy-1][1]) x=i,y=Hc+Hy-1;\n\t\tfor(int i=Hc+2;i<Hc+Hy-2&&x==-1&&y==-1;i++)\n\t\t\tif(!Put[Hr][i][0]||!Put[Hr][i][1]) x=Hr,y=i;\n\t\t\telse if(!Put[Hr+Hx-1][i][0]||!Put[Hr+Hx-1][i][1]) x=Hr+Hx-1,y=i;\n\t}\n\tNcnt=0;\n\tif(x==-1&&y==-1){\n\t\tint ans=114514;\n\t\tif(Hx==3){\n\t\t\tint cur=0;\n\t\t\tif((!Put[Hr+1][Hc][1])||(!Put[Hr+1][Hc][0])){\n\t\t\tif(!Put[Hr+1][Hc][1]) cur+=(!Put[Hr][Hc][1])+(!Put[Hr+2][Hc][1]);\n\t\t\tif(!Put[Hr+1][Hc][0]) cur+=(!Put[Hr][Hc][0])+(!Put[Hr+2][Hc][0]);\n\t\t\tif(cur<ans) ans=cur,x=Hr+1,y=Hc;}\n\t\t\tcur=0;\n\t\t\tif(!Put[Hr+1][Hc+Hy-1][1]||!Put[Hr+1][Hc+Hy-1][0]){\n\t\t\tif(!Put[Hr+1][Hc+Hy-1][1]) cur+=(!Put[Hr][Hc+Hy-1][1])+(!Put[Hr+2][Hc+Hy-1][1]);\n\t\t\tif(!Put[Hr+1][Hc+Hy-1][0]) cur+=(!Put[Hr][Hc+Hy-1][0])+(!Put[Hr+2][Hc+Hy-1][0]);\n\t\t\tif(cur<ans) ans=cur,x=Hr+1,y=Hc+Hy-1;}\n\t\t}\n\t\telse{\n\t\t\tint cur=2-(Put[Hr+1][Hc][1]|Put[Hr][Hc][1])-(Put[Hr+1][Hc][0]|Put[Hr][Hc][0]);\n\t\t\tif(((!Put[Hr+1][Hc][1])||(!Put[Hr+1][Hc][0]))&&cur<ans) ans=cur,x=Hr+1,y=Hc;\n\t\t\tcur=2-(Put[Hr+Hx-2][Hc][1]|Put[Hr+Hx-1][Hc][1])-(Put[Hr+Hx-2][Hc][0]|Put[Hr+Hx-1][Hc][0]);\n\t\t\tif(((!Put[Hr+Hx-2][Hc][1])||(!Put[Hr+Hx-2][Hc][0]))&&cur<ans) ans=cur,x=Hr+Hx-2,y=Hc;\n\t\t\tcur=2-(Put[Hr+1][Hc+Hy-1][1]|Put[Hr][Hc+Hy-1][1])-(Put[Hr+1][Hc+Hy-1][0]|Put[Hr][Hc+Hy-1][0]);\n\t\t\tif(((!Put[Hr+1][Hc+Hy-1][1])||(!Put[Hr+1][Hc+Hy-1][0]))&&cur<ans) ans=cur,x=Hr+1,y=Hc+Hy-1;\n\t\t\tcur=2-(Put[Hr+Hx-2][Hc+Hy-1][1]|Put[Hr+Hx-1][Hc+Hy-1][1])-(Put[Hr+Hx-2][Hc+Hy-1][0]|Put[Hr+Hx-1][Hc+Hy-1][0]);\n\t\t\tif(((!Put[Hr+Hx-2][Hc+Hy-1][1])||(!Put[Hr+Hx-2][Hc+Hy-1][0]))&&cur<ans) ans=cur,x=Hr+Hx-2,y=Hc+Hy-1;\n\t\t}\n\t\tif(Hy==3){\n\t\t\tint cur=0;\n\t\t\tif((!Put[Hr][Hc+1][1])||(!Put[Hr][Hc+1][0])){\n\t\t\tif(!Put[Hr][Hc+1][1]) cur+=(!Put[Hr][Hc][1])+(!Put[Hr][Hc+2][1]);\n\t\t\tif(!Put[Hr][Hc+1][0]) cur+=(!Put[Hr][Hc][0])+(!Put[Hr][Hc+2][0]);\n\t\t\tif(cur<ans) ans=cur,x=Hr,y=Hc+1;}\n\t\t\tcur=0;\n\t\t\tif((!Put[Hr+Hx-1][Hc+1][1])||(!Put[Hr+Hx-1][Hc+1][0])){\n\t\t\tif(!Put[Hr+Hx-1][Hc+1][1]) cur+=(!Put[Hr+Hx-1][Hc][1])+(!Put[Hr+Hx-1][Hc+2][1]);\n\t\t\tif(!Put[Hr+Hx-1][Hc+1][0]) cur+=(!Put[Hr+Hx-1][Hc][0])+(!Put[Hr+Hx-1][Hc+2][0]);\n\t\t\tif(cur<ans) ans=cur,x=Hr+Hx-1,y=Hc+1;}\n\t\t}\n\t\telse{\n\n\t\t\tint cur=2-(Put[Hr][Hc+1][1]|Put[Hr][Hc][1])-(Put[Hr][Hc+1][0]|Put[Hr][Hc][0]);\n\t\t\tif(((!Put[Hr][Hc+1][1])||(!Put[Hr][Hc+1][0]))&&cur<ans) ans=cur,x=Hr,y=Hc+1;\n\t\t\tcur=2-(Put[Hr][Hc+Hy-2][1]|Put[Hr][Hc+Hy-1][1])-(Put[Hr][Hc+Hy-2][0]|Put[Hr][Hc+Hy-1][0]);\n\t\t\tif(((!Put[Hr][Hc+Hy-2][1])||(!Put[Hr][Hc+Hy-2][0]))&&cur<ans) ans=cur,x=Hr,y=Hc+Hy-2;\n\t\t    cur=2-(Put[Hr+Hx-1][Hc+1][1]|Put[Hr+Hx-1][Hc][1])-(Put[Hr+Hx-1][Hc+1][0]|Put[Hr+Hx-1][Hc][0]);\n\t\t\tif(((!Put[Hr+Hx-1][Hc+1][1])||(!Put[Hr+Hx-1][Hc+1][0]))&&cur<ans) ans=cur,x=Hr+Hx-1,y=Hc+1;\n\t\t\tcur=2-(Put[Hr+Hx-1][Hc+Hy-2][1]|Put[Hr+Hx-1][Hc+Hy-1][1])-(Put[Hr+Hx-1][Hc+Hy-2][0]|Put[Hr+Hx-1][Hc+Hy-1][0]);\n\t\t\tif(((!Put[Hr+Hx-1][Hc+Hy-2][1])||(!Put[Hr+Hx-1][Hc+Hy-2][0]))&&cur<ans) ans=cur,x=Hr+Hx-1,y=Hc+Hy-2;\n\t\t}\n\t\tif(ans!=114514){\n\t\t\tNcnt=ans;\n\t\t\tif(x==Hr+1)Put[Hr][y][0]|=Put[Hr+1][y][0]^1,Put[Hr][y][1]|=Put[Hr+1][y][1];\n\t\t\tif(x==Hr+Hx-2)Put[Hr+Hx-1][y][0]|=Put[x][y][0]^1,Put[Hr+Hx-1][y][1]|=Put[x][y][1]^1;\n\t\t\tif(y==Hc+1)Put[x][Hc][0]|=Put[x][y][0]^1,Put[x][Hc][1]|=Put[x][y][1]^1;\n\t\t\tif(y==Hc+Hy-2)Put[x][Hc+Hy-1][0]|=Put[x][y][0]^1,Put[x][Hc+Hy-1][1]|=Put[x][y][1]^1;\n\t\t\tif((!Put[x][y][0])&&(!Put[x][y][1])) door=1;\n\t\t}\n\t}\n\tfor(int k=0;k<Hf;k++)\n\tfor(int i=Hr;i<=Hr+Hx-1;i++)\n\tfor(int j=Hc;j<=Hc+Hy-1;j++)\n\t\tif(TheRoom(i,j,k)){\n\t\t\tif(!((i==Hr||i==Hr+Hx-1)&&(j==Hc||j==Hc+Hy-1))&&!Put[i][j][k]&&!(k<2&&x==i&&y==j)) Ncnt++,Put[i][j][k]=1;\n\t\t}\n\tif(Zcnt<Ncnt){puts(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\");return;}\n\tZcnt-=Ncnt;\n\tputs(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\");\n\tif(door) puts(\"DOOR IS OK\");\n\telse{\n\t\tputs(\"HOUSE HAS NO DOOR\");\n\t\tif(x==-1&&y==-1) x=Hr+1,y=Hc;\n\t\tZcnt+=(Put[x][y][0])+(Put[x][y][1]);\n\t\tPut[x][y][0]=Put[x][y][1]=0;\n\t}\n\tif(Ncnt) puts(\"WALL NEED TO BE FIXED\");\n\telse puts(\"WALL IS OK\");\n\tNcnt=0;\n\tfor(int h=0;h<Hf;h++){\n\t\tNcnt+=(!Put[Hr][Hc][h])+(!Put[Hr][Hc+Hy-1][h])+(!Put[Hr+Hx-1][Hc][h])+(!Put[Hr+Hx-1][Hc+Hy-1][h]);\n\t}\n\tif(Ncnt) puts(\"CORNER NEED TO BE FIXED\"),Zcnt=max(0,Zcnt-Ncnt);\n\telse puts(\"CORNER IS OK\");\n\tprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\",Zcnt);\n}\n```\n\u5b8c\u6574\u4ee3\u7801\u5c31\u4e0d\u7ed9\u4e86\uff0c\u4e3b\u4f53\u4ee3\u7801\u90fd\u5728\u4e0a\u9762\u3002\n",
        "postTime": 1628818414,
        "uid": 258085,
        "name": "\u6c5f\u6237\u5ddd\u00b7\u841d\u535c",
        "ccfLevel": 7,
        "title": "P3693 \u9898\u89e3"
    },
    {
        "content": "## \u517b\u751f\u597d\u9898\n\n\u5148\u4e22\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879\uff1a\n\n- \u8f93\u51fa\u6587\u672c\u4e0d\u8981\u6253\u9519\n- \u7b2c7\u4e2a\u70b9\u7684\u6700\u540e\u9762\u4e0d\u8981\u8f93\u6362\u884c\u5426\u5219`too long on line 1001`\uff08\uff1f\uff1f\uff1f\uff09\n- \u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6700\u5927\u4e3a16\uff0c\u5f00\u5c0f\u4e86\u4e0d\u4f1a`RE`\u4f1a`OLE`\u6216\u8005`TLE`\uff08\uff1f\uff1f\uff1f\uff09\n- \u524d\u56db\u4e2a\u64cd\u4f5c\u6700\u597d\u5199\u6210\u5c0f\u51fd\u6570\u5e76\u4e00\u6b21\u5199\u5bf9\n- \u7531\u4e8e\u6570\u636e\u53ea\u6709\u4e8c\u5341\u7ec4\u5e76\u4e0d\u80fd\u4fdd\u8bc1AC\u4ee3\u7801\u65e0BUG\uff08\u6570\u636e\u8f83\u6c34\u8981\u6709\u4fe1\u4ef0\uff09\n- \u653e\u95e8\u7684\u5730\u65b9\u5982\u679c\u6709\u51b0\u5757\u9700\u8981\u79fb\u9664\u5e76\u56de\u6536\n- \u5982\u679c\u4fee\u8865\u67f1\u5b50\u9700\u8981\u7684\u51b0\u5757\u4e0d\u591f\uff0c\u742a\u9732\u8bfa\u6700\u7ec8\u67090\u4e2a\u51b0\u5757\n- \u6700\u540e\u79fb\u9664\u51b0\u5757\u7684\u65f6\u5019\u53ea\u9700\u8981\u770b\u5c4b\u9876\u4f1a\u4e0d\u4f1a\u584c\u9677\uff0c\u522b\u7684\u90fd\u4e0d\u7528\u7ba1\u56e0\u4e3a\u9898\u9762\u6ca1\u8bf4\n\n\u73b0\u5728\u5f00\u59cb\u6b63\u6587\u90e8\u5206\n\n\u9996\u5148\u770b\u524d\u56db\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u4e0d\u662fPJ\u7b2c\u4e09\u9898\u6c34\u5e73\u5417\uff0c\u4e00\u767e\u591a\u884c\u641e\u5b9a\uff08\u6ce8\u610f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u4e0d\u8981\u8f93\u6362\u884c\uff09\n\n> \u4f60\uff1a~~\u8fd9\u5230\u9898\u771f\u7b80\u5355\u8fd9\u4e48\u5feb\u5c31\u505a\u5b8c`80%`\u4e86~~\n>\n> \u51fa\u9898\u4eba\uff1a\u6ca1\u9519\n\n\u7136\u540e\u4f60\u8df3\u8fdb\u4e86\u4e00\u4e2a\u5929\u5751\n\n300\u884c=100\u884c\u524d\u56db\u4e2a\u64cd\u4f5c+200\u884c\u7b2c\u4e94\u4e2a\u64cd\u4f5c\n\n\u9996\u5148\u5224\u9ad8\u5ea6\u3001\u9020\u5c4b\u9876\u3001\u79fb\u51b0\u5757\uff0c\u8fd9\u4e9b\u76f4\u63a5\u505a\u5c31\u53ef\u4ee5\u4e86\n\n\u7136\u540e\u5f00\u95e8\uff0c\u9898\u9762\u4e0a\u8bf4\u5c3d\u91cf\u7528\u7f3a\u53e3\u9020\u95e8\u5e76\u9700\u8981\u4f7f\u5f97\u586b\u8865\u4f7f\u7528\u7684\u51b0\u7816\u5c3d\u91cf\u5c11\uff0c\u610f\u5473\u7740\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u9ad8\u5ea6\u5c0f\u4e8e2\u7684\u51b0\u5757\u6570\uff080,1,2\uff09\u4ece\u5c0f\u5230\u5927\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u628a\u5c06\u95e8\u5f00\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u4fee\u8865\u5899\u58c1\u9700\u8981\u7684\u51b0\u5757\u6570\u4ece\u5c0f\u5230\u5927\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u9009\u62e9\u4f4d\u7f6e\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u9700\u8981\u7ba1\u592a\u591aprefect\uff0c\u53ea\u8981\u6700\u540e\u9009\u51fa\u7684\u4f4d\u7f6e\u5e76\u4e0d\u662f\u4e24\u4e2a\u7a7a\u7f3a\u5c31\u628aprefect\u8bbe\u4e3a0\u5373\u53ef\uff09\n\n\u7b2c\u4e00\u5173\u952e\u5b57\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u586b\u8865\u9700\u8981\u7684\u51b0\u5757\u6570\u53ea\u548c\u4e0e\u95e8\u76f8\u90bb\u7684\u67f1\u5b50\u7684\u72b6\u6001\u76f8\u5173\uff0c\u6211\u4eec\u5148\u5206\u522b\u7b97\u51fa\u56db\u4e2a\u67f1\u5b50\u9ad8\u5ea6\u57282\u4ee5\u4e0b\u4f4d\u7f6e\u7f3a\u5c11\u7684\u51b0\u5757\u6570\uff0c\u7136\u540e\u679a\u4e3e\u4f4d\u7f6e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\u6211\u4eec\u901a\u8fc7\u4e00\u5806`if`\u7b97\u51fa\u76f8\u90bb\u67f1\u5b50\u7f3a\u5c11\u7684\u51b0\u5757\u6570\n\n\u95e8\u786e\u5b9a\u597d\u540e\u76f4\u63a5\u628a\u95e8\u548c\u76f8\u90bb\u67f1\u5b50\u7684\u5bf9\u5e94\u90e8\u5206\u8bbe\u4e3a\u51b0\u5757\u518d\u8ba1\u7b97\u4fee\u8865\u5899\u548c\u67f1\u5b50\u7684\u51b0\u5757\u5c31\u597d\u4e86\n\n\u6700\u540e\u5728\u770b\u4e00\u4e0b\u662f\u5426\u6709prefect\n\n-----\n\n\u7ecf\u8fc7\u5220\u51cf\u6700\u540e\u7684\u4ee3\u7801\u4e3a273\u884c8975\u5b57\u8282\uff08\u6ca1\u52a0\u6ce8\u91ca\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a[17][17][22];\nint n, hm;\nint lx, ly, mx, my;\nbool cpos(int x, int y, int z) {\n\treturn x >= 0 && y >= 0 && z >= 0 && x < n && y < n && z <= hm;\n}\nbool vis[17][17][22];\n// bfs\u76846\u4e2a\u65b9\u5411\nint dx[6] = {0, 0, 0, 0, -1, 1};\nint dy[6] = {0, 0, -1, 1, 0, 0};\nint dz[6] = {-1, 1, 0, 0, 0, 0};\nint ice = 0;\nint shot(int x, int y, int d, int s) { // \u64cd\u4f5c1\n\tstatic int dirx[8] = {-1, -1, 0, 1, 1, 1, 0, -1};\n\tstatic int diry[8] = {0, -1, -1, -1, 0, 1, 1, 1};\n\tif(a[x][y][0] == 5 || s == 0) return 0;\n\tint sz = a[x][y][0] < 4 ? 1 : 0;\n\ta[x][y][0] = min(4, a[x][y][0] + 1);\n\tif(! cpos(x + dirx[d], y + diry[d], 0)) return sz;\n\treturn sz + shot(x + dirx[d], y + diry[d], d, s - 1);\n}\nint collect() { // \u64cd\u4f5c2\n\tint ans = 0;\n\tfor(int i = 0; i < n; i ++)\n\t\tfor(int j = 0; j < n; j ++)\n\t\t\tif(a[i][j][0] == 4) a[i][j][0] = 0, ans ++;\n\treturn ans;\n}\nvoid put(int x, int y, int z) { // \u64cd\u4f5c3\n\tif(ice == 0) return void(puts(\"CIRNO HAS NO ICE_BLOCK\"));\n\tif(a[x][y][z] == 5) return void(puts(\"BAKA CIRNO,CAN'T PUT HERE\"));\n\tbool flag = z != 0;\n\tfor(int i = 0; i < 6 && flag; i ++) {\n\t\tint tx = x + dx[i], ty = y + dy[i], tz = z + dz[i];\n\t\tif(cpos(tx, ty, tz) && a[tx][ty][tz] == 5) flag = 0;\n\t}\n\tif(flag) return void(puts(\"BAKA CIRNO,CAN'T PUT HERE\"));\n\ta[x][y][z] = 5;\n\tice --;\n\tif(x < lx || x > mx || y < ly || y > my) puts(\"CIRNO MISSED THE PLACE\");\n\telse if(x > lx && x < mx && y > ly && y < my) puts(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\");\n\telse printf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\", ice);\n}\nint fall(int x, int y, int z) { // \u5224\u65ad\u51b0\u5757\u6389\u843d\n\tmemset(vis, 0, sizeof(vis));\n\tqueue<int> qx, qy, qz;\n\tqueue<int> r;\n\tqx.push(x), qy.push(y), qz.push(z);\n\tint sz = 0;\n\tvis[x][y][z] = 1;\n\twhile(! qx.empty()) {\n\t\tx = qx.front(), y = qy.front(), z = qz.front();\n\t\tqx.pop(), qy.pop(), qz.pop();\n\t\tr.push(x), r.push(y), r.push(z);\n\t\tsz ++;\n\t\tif(z == 0) return 0;\n\t\tfor(int i = 0; i < 6; i ++) {\n\t\t\tint tx = x + dx[i], ty = y + dy[i], tz = z + dz[i];\n\t\t\tif(cpos(tx, ty, tz) && a[tx][ty][tz] == 5 && ! vis[tx][ty][tz])\n\t\t\t\tqx.push(tx), qy.push(ty), qz.push(tz), vis[tx][ty][tz] = 1;\n\t\t}\n\t}\n\twhile(! r.empty()) {\n\t\tx = r.front(), r.pop();\n\t\ty = r.front(), r.pop();\n\t\tz = r.front(), r.pop();\n\t\ta[x][y][z] = 0;\n\t}\n\treturn sz;\n}\nvoid get(int x, int y, int z) { // \u64cd\u4f5c4\n\tif(a[x][y][z] != 5) return void(puts(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\"));\n\ta[x][y][z] = 0;\n\tice ++;\n\tint dropped = 0;\n\tfor(int i = 0; i < 6; i ++) {\n\t\tint tx = x + dx[i], ty = y + dy[i], tz = z + dz[i];\n\t\tif(cpos(tx, ty, tz) && a[tx][ty][tz] == 5) dropped += fall(tx, ty, tz);\n\t}\n\tif(dropped == 0) puts(\"CIRNO REMOVED AN ICE_BLOCK\");\n\telse printf(\"CIRNO REMOVED AN ICE_BLOCK,AND %d BLOCK(S) ARE BROKEN\\n\", dropped);\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tscanf(\"%d\", &hm);\n\tscanf(\"%d%d%d%d\", &lx, &ly, &mx, &my);\n\tmx += lx - 1, my += ly - 1;\n\tint m;\n\tscanf(\"%d\", &m);\n\tchar op[30];\n\twhile(m --) {\n\t\tscanf(\" %s\", op);\n\t\tif(op[0] == 'I') {\n\t\t\tint x, y, d, s;\n\t\t\tscanf(\"%d%d%d%d\", &x, &y, &d, &s);\n            // \u6ce8\u610f\u8fd9\u91cc\u7684\u6362\u884c\u7b26\n\t\t\tif(m) printf(\"CIRNO FREEZED %d BLOCK(S)\\n\", shot(x, y, d, s + 1));\n\t\t\telse printf(\"CIRNO FREEZED %d BLOCK(S)\", shot(x, y, d, s + 1));\n\t\t}\n\t\tif(op[0] == 'M' && op[5] == 'I') {\n\t\t\tint ans = collect();\n\t\t\tice += ans;\n\t\t\tprintf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\", ans, ice);\n\t\t}\n\t\tif(op[0] == 'P') {\n\t\t\tint x, y, z;\n\t\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\t\tput(x, y, z);\n\t\t}\n\t\tif(op[0] == 'R') {\n\t\t\tint x, y, z;\n\t\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\t\tget(x, y, z);\n\t\t}\n\t\tif(op[0] == 'M' && op [5] == 'R') {\n\t\t\tint height = -1;\n\t\t\tbool prefect = 1;\n            // \u53d6\u6700\u5927\u9ad8\u5ea6\n\t\t\tfor(int i = lx; i <= mx; i ++)\n\t\t\t\tfor(int j = hm; j > height; j --)\n\t\t\t\t\tif(a[i][ly][j] == 5) { height = j; break;}\n\t\t\tfor(int i = lx; i <= mx; i ++)\n\t\t\t\tfor(int j = hm; j > height; j --)\n\t\t\t\t\tif(a[i][my][j] == 5) { height = j; break;}\n\t\t\tfor(int i = ly; i <= my; i ++)\n\t\t\t\tfor(int j = hm; j > height; j --)\n\t\t\t\t\tif(a[lx][i][j] == 5) { height = j; break;}\n\t\t\tfor(int i = ly; i <= my; i ++)\n\t\t\t\tfor(int j = hm; j > height; j --)\n\t\t\t\t\tif(a[mx][i][j] == 5) { height = j; break;}\n\t\t\theight ++;\n\t\t\tif(height < 2 || mx - lx - 1 < 1 || my - ly - 1 < 1) {\n\t\t\t\tputs(\"SORRY CIRNO,HOUSE IS TOO SMALL\");\n\t\t\t\tbreak;\n\t\t\t}\n            // \u9020\u5c4b\u9876\n\t\t\tfor(int i = lx; i <= mx; i ++)\n\t\t\t\tfor(int j = ly; j <= my; j ++)\n\t\t\t\t\tif(a[i][j][height] != 5) a[i][j][height] = 5, ice --;\n\t\t\tif(ice < 0) {\n\t\t\t\tputs(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\");\n\t\t\t\tbreak;\n\t\t\t}\n            // \u5220\u9664\u5185\u90e8\u51b0\u5757\n\t\t\tint rm = 0;\n\t\t\tfor(int i = lx + 1; i < mx; i ++)\n\t\t\t\tfor(int j = ly + 1; j < my; j ++)\n\t\t\t\t\tfor(int k = 0; k < height; k ++)\n\t\t\t\t\t\tif(a[i][j][k] == 5) rm ++, a[i][j][k] = 0;\n\t\t\tprintf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\", rm);\n\t\t\tice += rm;\n\t\t\tif(rm) prefect = 0;\n            // \u5220\u9664\u5916\u90e8\u51b0\u5757\n\t\t\trm = 0;\n\t\t\tfor(int i = 0; i < n; i ++)\n\t\t\t\tfor(int j = 0; j < n; j ++)\n\t\t\t\t\tfor(int k = 0; k < hm; k ++)\n\t\t\t\t\t\tif(i < lx || i > mx || j < ly || j > my || k > height)\n\t\t\t\t\t\t\tif(a[i][j][k] == 5) rm ++, a[i][j][k] = 0;\n\t\t\tprintf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\", rm);\n\t\t\tice += rm;\n\t\t\tif(rm) prefect = 0;\n            // \u5c4b\u9876\u6389\u843d\n\t\t\tif(fall(lx, ly, height)) {\n\t\t\t\tputs(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\");\n\t\t\t\tbreak;\n\t\t\t}\n            // \u9009\u95e8\u7684\u4f4d\u7f6e\n\t\t\tint wall = 1, conner = 1;\n\t\t\tint dx = -1, dy = -1;\n\t\t\tint cll, clm, cml, cmm;\n\t\t\tcll = (a[lx][ly][0] != 5) + (a[lx][ly][1] != 5);\n\t\t\tclm = (a[lx][my][0] != 5) + (a[lx][my][1] != 5);\n\t\t\tcml = (a[mx][ly][0] != 5) + (a[mx][ly][1] != 5);\n\t\t\tcmm = (a[mx][my][0] != 5) + (a[mx][my][1] != 5);\n\t\t\tint now = 4, rmi = 3;\n\t\t\tbool door = 1;\n\t\t\tfor(int i = 0; i < n; i ++)\n\t\t\t\tfor(int j = 0; j < n; j ++) {\n                    // \u4f4d\u7f6e\u662f\u5426\u6b63\u786e\n\t\t\t\t\tif(i < lx || i > mx || j < ly || j > my) continue;\n\t\t\t\t\tif(i > lx && i < mx && j != ly && j != my) continue;\n\t\t\t\t\tif(j > ly && j < my && i != lx && i != mx) continue;\n\t\t\t\t\tint pr = (a[i][j][0] == 5) + (a[i][j][1] == 5); // \u4f4d\u7f6e\u591a\u4f59\u51b0\u5757\n\t\t\t\t\tint pt = 0; // \u76f8\u90bb\u89d2\u5bf9\u5e94\u4f4d\u7f6e\u7f3a\u5c11\u7684\u51b0\u5757\n\t\t\t\t\tif(i == lx && j == ly + 1) pt += cll;\n\t\t\t\t\telse if(i == lx + 1 && j == ly) pt += cll;\n\t\t\t\t\tif(i == lx && j == my - 1) pt += clm;\n\t\t\t\t\telse if(i == lx + 1 && j == my) pt += clm;\n\t\t\t\t\tif(i == mx && j == ly + 1) pt += cml;\n\t\t\t\t\telse if(i == mx - 1 && j == ly) pt += cml;\n\t\t\t\t\tif(i == mx && j == my - 1) pt += cmm;\n\t\t\t\t\telse if(i == mx - 1 && j == my) pt += cmm;\n\t\t\t\t\tif(pr < rmi) rmi = pr, now = pt, dx = i, dy = j;\n\t\t\t\t\telse if(pr == rmi && pt < now) now = pt, dx = i, dy = j;\n\t\t\t\t}\n\t\t\tif(now) ice -= now, wall = 0, prefect = 0; // \u8fd9\u91cc\u7684\u67f1\u5b50\u6709\u7f3a\u53e3\u5219\u5899\u9700\u8981\u8865\n\t\t\tif(rmi) door = 0, ice += rmi, prefect = 0; // \u6709\u591a\u4f59\u51b0\u5757\u8981\u56de\u6536\u5e76\u8f93\u51fa NO DOOR\n            // \u628a\u8fd9\u4e9b\u4f4d\u7f6e\u90fd\u8bbe\u4e3a\u6709\u51b0\u5757\n\t\t\ta[dx][dy][0] = 5, a[dx][dy][1] = 5;\n\t\t\tif(dx - lx == 1 && dy == ly) a[lx][ly][0] = a[lx][ly][1] = 5;\n\t\t\tif(dx - lx == 1 && dy == my) a[lx][my][0] = a[lx][my][1] = 5;\n\t\t\tif(my - dx == 1 && dy == ly) a[mx][ly][0] = a[mx][ly][1] = 5;\n\t\t\tif(my - dx == 1 && dy == my) a[mx][my][0] = a[mx][my][1] = 5;\n\t\t\tif(dy - ly == 1 && dx == lx) a[lx][ly][0] = a[lx][ly][1] = 5;\n\t\t\tif(dy - ly == 1 && dx == mx) a[mx][ly][0] = a[mx][ly][1] = 5;\n\t\t\tif(my - dy == 1 && dx == lx) a[lx][my][0] = a[lx][my][1] = 5;\n\t\t\tif(my - dy == 1 && dx == mx) a[mx][my][0] = a[mx][my][1] = 5;\n            // \u8ba1\u7b97\u5899\u7684\u7a7a\u7f3a\n\t\t\tfor(int i = lx + 1; i < mx; i ++)\n\t\t\t\tfor(int j = 0; j < height; j ++) {\n\t\t\t\t\tif(a[i][ly][j] != 5) {\n\t\t\t\t\t\tice --;\n\t\t\t\t\t\ta[i][ly][j] = 5;\n\t\t\t\t\t\twall = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(a[i][my][j] != 5) {\n\t\t\t\t\t\tice --;\n\t\t\t\t\t\ta[i][my][j] = 5;\n\t\t\t\t\t\twall = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tfor(int i = ly + 1; i < my; i ++)\n\t\t\t\tfor(int j = 0; j < height; j ++) {\n\t\t\t\t\tif(a[lx][i][j] != 5) {\n\t\t\t\t\t\tice --;\n\t\t\t\t\t\ta[lx][i][j] = 5;\n\t\t\t\t\t\twall = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(a[mx][i][j] != 5) {\n\t\t\t\t\t\tice --;\n\t\t\t\t\t\ta[mx][i][j] = 5;\n\t\t\t\t\t\twall = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(ice < 0) {\n\t\t\t\tputs(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tputs(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\");\n\t\t\tif(door) puts(\"DOOR IS OK\");\n\t\t\telse puts(\"HOUSE HAS NO DOOR\");\n\t\t\tif(wall) puts(\"WALL IS OK\");\n\t\t\telse puts(\"WALL NEED TO BE FIXED\");\n            // \u89d2\u843d\u7f3a\u53e3\n\t\t\tfor(int i = 0; i < height; i ++)\n\t\t\t\tif(a[lx][ly][i] != 5) {\n\t\t\t\t\tconner = 0;\n\t\t\t\t\ta[lx][ly][i] = 5;\n\t\t\t\t\tice --;\n\t\t\t\t}\n\t\t\tfor(int i = 0; i < height; i ++)\n\t\t\t\tif(a[mx][ly][i] != 5) {\n\t\t\t\t\tconner = 0;\n\t\t\t\t\ta[mx][ly][i] = 5;\n\t\t\t\t\tice --;\n\t\t\t\t}\n\t\t\tfor(int i = 0; i < height; i ++)\n\t\t\t\tif(a[lx][my][i] != 5) {\n\t\t\t\t\tconner = 0;\n\t\t\t\t\ta[lx][my][i] = 5;\n\t\t\t\t\tice --;\n\t\t\t\t}\n\t\t\tfor(int i = 0; i < height; i ++)\n\t\t\t\tif(a[mx][my][i] != 5) {\n\t\t\t\t\tconner = 0;\n\t\t\t\t\ta[mx][my][i] = 5;\n\t\t\t\t\tice --;\n\t\t\t\t}\n\t\t\tif(conner) puts(\"CORNER IS OK\");\n\t\t\telse puts(\"CORNER NEED TO BE FIXED\");\n\t\t\tprintf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\", max(0, ice)); // \u5269\u4f59\u51b0\u5757\u5bf90\u53d6max\n\t\t\tif(wall && conner && door && prefect && (dx == (lx + mx) / 2 || dx == (lx + mx + 1) / 2 || dy == (ly + my) / 2 || dy == (ly + my + 1) / 2))\n\t\t\t\tputs(\"CIRNO IS PERFECT!\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1560301353,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3693 \u3010\u742a\u9732\u8bfa\u7684\u51b0\u96ea\u5c0f\u5c4b\u3011"
    },
    {
        "content": "$1.$\u5982\u4f55\u5224\u65ad\u60ac\u7a7a\u8fde\u901a\u5757,\u5e76\u5c06\u5176\u6d88\u9664?\n\n\u53ef\u4ee5\u4ee5\u67d0\u8fde\u901a\u5757\u4e2d\u7684\u4e00\u4e2a\u51b0\u7816\u4e3a\u8d77\u70b9 , \u8fdb\u884c $DFS/BFS$\n\n\u8f6c\u79fb\u65f6\u5411\u76f8\u90bb\u7684\u51b0\u7816\u8fdb\u884c\u8f6c\u79fb\n\n\u5982\u679c\u53ef\u4ee5\u8f6c\u79fb\u5230\u4e00\u4e2a\u4e0e\u5730\u9762\u63a5\u89e6\u7684\u51b0\u7816,\n\n\u90a3\u4e48\u8bc1\u660e\u6b64\u8054\u901a\u5757\u4e0e\u5730\u9762\u63a5\u89e6,\u4e0d\u60ac\u7a7a\n\n\u5426\u5219\u8bc1\u660e\u6b64\u8054\u901a\u5757\u60ac\u7a7a,\u9700\u8981\u88ab\u5168\u90e8\u6d88\u9664\n\n\u4e0d\u53ef \u8fb9\u5224\u65ad\u8fb9\u6d88\u9664 , \u4f1a\u56e0\u4e3a \u641c\u7d22\u7684 \u987a\u5e8f \u5bfc\u81f4\u9519\u8bef\n\n\u6d88\u9664\u4e00\u4e2a\u8054\u901a\u5757\u65f6 , \u4e5f\u4f7f\u7528 $DFS/BFS$ ,\u5bf9\u8f6c\u79fb\u5230\u7684 \u51b0\u7816\u76f4\u63a5\u6d88\u9664\u5373\u53ef\n\n$2.$ \u5982\u4f55: \u8868\u793a\u4e00\u95e8\u7684\u5019\u9009\u4f4d\u7f6e\u76f8\u90bb\u7684\u5899\u89d2 , \u5e76\u8ba1\u7b97 \u5899\u89d2\u7684\u6b8b\u7f3a\u5927\u5c0f?\n\n- \u5bf9\u4e8e \u4e00\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u76f8\u90bb\u7684\u5899\u89d2 ,\u7531\u4e8e\u60c5\u51b5\u8f83\u5c11 , \u66b4\u529b\u679a\u4e3e\u5bfb\u627e\u5373\u53ef\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u5019\u9009\u4f4d\u7f6e , \u5176\u4e0e\u67d0\u5899\u89d2\u5173\u7cfb\u53ea\u6709\u76f8\u90bb/\u4e0d\u76f8\u90bb\u4e24\u79cd\u8003\u8651 \u5bf9\u5019\u9009\u4f4d\u7f6e\u4e0e\u5404\u5899\u89d2\u5173\u7cfb \u8fdb\u884c\u72b6\u538b\n\n  \u4f7f\u7528\u4e00\u957f\u5ea6\u4e3a4\u7684\u4e8c\u8fdb\u5236\u4e32 , \u8868\u793a\u67d0\u5019\u9009\u4f4d\u7f6e \u4e0e\u5404\u5899\u89d2\u5173\u7cfb\n\u5982 : $(1001)_2$ \u8868\u793a\u6b64\u4f4d\u7f6e\u4e0e\u5899\u89d2 $1$ \u4e0e\u5899\u89d2 $4$ \u76f8\u90bb\n\n- \u5728\u8ba1\u7b97\u5899\u89d2\u6b8b\u7f3a\u5927\u5c0f\u65f6,\u679a\u4e3e\u4e8c\u8fdb\u5236\u4e32\u4e0a\u5bf9\u5e94\u4f4d\u7f6e \n\n  \u6839\u636e \u95e8\u540e\u9009\u4f4d\u7f6e\u7684\u9ad8\u5ea6 \u8fdb\u884c\u5224\u65ad\u5373\u53ef\n\n$3.$\u5982\u4f55\u5b9e\u73b0 \u4e0a\u8ff0 \u5bf9\u95e8\u7684\u5019\u9009\u4f4d\u7f6e \u7684\u4f30\u4ef7\u8fc7\u7a0b ?\n\n\u9996\u5148\u627e\u5230 \u6240\u6709 \u79bb\u5730\u9ad8\u5ea6 $\u22642$ \u7684\u6b8b\u7f3a\u4f4d\u7f6e ,\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6b8b\u7f3a\u4f4d\u7f6e , \u8ba1\u7b97\u51fa\u4e0b\u5217\u5404\u503c :\n\n- \u4fdd\u7559\u6b64\u6b8b\u7f3a \u5bf9\u603b\u586b\u8865\u6570\u7684\u5f71\u54cd (\u53ef\u770b\u5230\u7684\u67f1\u5b50\u6b8b\u7f3a\u6570 $-$ \u95e8\u5019\u9009\u4f4d\u7f6e\u5927\u5c0f)\n\n- \u6b64\u6b8b\u7f3a\u7684\u9ad8\u5ea6\n\n- \u6b64\u6b8b\u7f3a\u4e0e\u5899\u58c1\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8ddd\u79bb\n\n\u6309\u7167\u5206\u6790\u9898\u610f\u4e2d\u89c4\u5b9a\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u5e8f\n\n\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u6b8b\u7f3a\u4e00\u5b9a\u4f7f\u9700\u8981\u586b\u8865\u51b0\u7816\u6570\u6700\u5c0f\n\n\u82e5\u7b2c\u4e00\u4e2a\u6b8b\u7f3a\u9ad8\u5ea6\u4e3a $1$\n, \u4e14\u6240\u5f97\u9700\u8981\u586b\u8865\u51b0\u7816\u6570 $<$ \u5f53\u524d\u5e93\u5b58\n\n\u8bf4\u660e\u53ef\u4ee5\u591a\u6d88\u8017\u81f3\u591a\u4e00\u4e2a\u51b0\u7816,\u6765\u9009\u62e9\u4e00\u4e2a\u9ad8\u5ea6\u4e3a $2$ \u7684\u6b8b\u7f3a\u4f5c\u95e8\n\n\u53ef\u4ee5\u624b\u63a8\u5404\u79cd\u7c7b\u7684\u6b8b\u7f3a,\u6765\u5f97\u5230\u6d88\u8017\u81f3\u591a\u4e00\u4e2a\u51b0\u7816\u7684\u7ed3\u8bba\n\n\u5219\u53ef\u5728\u6392\u5e8f\u540e\u7684\u6b8b\u7f3a\u4e2d\u5411\u540e\u5bfb\u627e\u7b2c\u4e00\u4e2a \u9ad8\u5ea6\u4e3a $2$ \u7684\u6b8b\u7f3a\n\n\u7531\u4e8e\u7b2c $2,3$ \u6392\u5e8f\u4f18\u5148\u7ea7\u7684\u5b58\u5728,\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u4e00\u5b9a\u4e3a\u6700\u4f18\u7684\n\n\n```\n    #include<bits/stdc++.h>\n    using namespace std;\n    const int inf=0x7fffffff,MAX=100;\n    const double eps=1e-8;\n    int HR,HC,HX,HY,HM,n,m,num,head,tail;\n    int ice_floor[MAX][MAX]/*\u4e8c\u7ef4\u96ea\u5730:\u51b7\u51bb\u503c*/,ice_block_unicom[MAX][MAX][MAX];/*\u51b0\u7816\u6240\u5c5e\u8054\u901a\u5757*/\n    int dx[]={0,0,0,0,1,-1},dy[]={0,0,1,-1,0,0},dz[]={1,-1,0,0,0,0};/*\u62d3\u5c55\u65b9\u5411*/\n    bool vis[MAX][MAX][MAX]/*\u6807\u8bb0\u6570\u7ec4*/,perfect=1/*\u5b8c\u7f8e\u6807\u8bb0*/;\n    struct node{int x,y,z;}q[MAX];/*\u5e7f\u641c\u961f\u5217\uff1a\u8bb0\u5f55\u7a7a\u95f4\u5750\u6807*/\n    int read(){//\u6570\u5b57\u5feb\u8bfb \n        int x=0,f=0;char ch=0;\n        while(!isdigit(ch)){f|=ch=='-';ch=getchar();}\n        while(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n        return f?-x:x;\n    }\n    inline void Gets(char ch[]){//\u5b57\u7b26\u5feb\u8bfb \n        char c=getchar();int len=-1;\n        while(c<'A'||c>'Z')c=getchar();\n        while((c>='A'&&c<='Z')||c=='_'){ch[++len]=c;c=getchar();}\n    }\n    inline int ICE_BARRAGE(int R,int C,int D,int S){ //\u64cd\u4f5c1:\u51b0\u96ea\u5f39\u5e55 \n        int ret=0;\n        for(int i=0;i<=S;i++){\n            int Xi,Yi;\n            switch(D){\n                case 0:Xi=R-i,Yi=C; break;\n                case 1:Xi=R-i,Yi=C-i; break;\n                case 2:Xi=R,Yi=C-i; break;\n                case 3:Xi=R+i,Yi=C-i; break;\n                case 4:Xi=R+i,Yi=C; break;\n                case 5:Xi=R+i,Yi=C+i; break;\n                case 6:Xi=R,Yi=C+i; break;\n                case 7:Xi=R-i,Yi=C+i; break;\n            }\n            if(Xi<0||Xi>=n||Yi<0||Yi>=n||ice_floor[Xi][Yi]==inf) break;\n            else if(ice_floor[Xi][Yi]==4) continue;\n            else ice_floor[Xi][Yi]++,ret++;\n        }\n        return ret;\n    }\n    inline int Make_ICE_BLOCK(){//\u64cd\u4f5c2:\u6536\u96c6\u51b0\u7816 \n        int ret=0;\n        for(int i=0;i<n;i++)\n            for(int j=0;j<n;j++)\n                if(ice_floor[i][j]==4)\n                    ice_floor[i][j]=0,ret++,num++;\n        return ret;\n    }\n    inline void Put_ICE_BLOCK(int R,int C,int H){ //\u64cd\u4f5c3:\u653e\u7f6e\u51b0\u7816 \n        if(num==0){\n            printf(\"CIRNO HAS NO ICE_BLOCK\\n\");\n            return;\n        }\n        else if(vis[R][C][H]||(H>0&&!vis[R-1][C][H]\n        &&!vis[R+1][C][H]&&!vis[R][C-1][H]&&!vis[R][C+1][H]//cuo\n        &&!vis[R][C][H-1]&&!vis[R][C][H+1])){\n            printf(\"BAKA CIRNO,CAN'T PUT HERE\\n\");\n            return;\n        }\n        else if(R<HR||R>HR+HX-1||C<HC||C>HC+HY-1){\n            printf(\"CIRNO MISSED THE PLACE\\n\");\n            vis[R][C][H]=1,num--;\n            if(H==0) ice_floor[R][C]=inf;\n            return;\n        }\n        else if(R>=HR+1&&R<=HR+HX-2&&C>=HC+1&&C<=HC+HY-2){\n            printf(\"CIRNO PUT AN ICE_BLOCK INSIDE THE HOUSE\\n\");\n            vis[R][C][H]=1,num--;\n            if(H==0) ice_floor[R][C]=inf;\n            return;\n        }\n        else{\n            vis[R][C][H]=1,num--;\n            printf(\"CIRNO SUCCESSFULLY PUT AN ICE_BLOCK,NOW SHE HAS %d ICE_BLOCK(S)\\n\",num);\n            if(H==0) ice_floor[R][C]=inf;\n            return;\n        }\n    }\n    inline bool bfs(int R,int C,int H,int D,bool last/*MAKE_ROOF\u65f6=1,\u56de\u6536*/){//4_\u641c\u7d22\u60ac\u7a7a\u8054\u901a\u51b0\u7816 \n        head=0,tail=1;\n        q[1]=(node){R,C,H};\n        ice_block_unicom[R][C][H]=D;\n        bool flag=0;\n        while(head<tail){\n            node u=q[++head];\n            if(u.z==0) flag=1;\n            for(int i=0;i<6;i++){\n                node v=(node){u.x+dx[i],u.y+dy[i],u.z+dz[i]};\n                if(vis[v.x][v.y][v.z]&&ice_block_unicom[v.x][v.y][v.z]==-1){\n                    q[++tail]=v;\n                    ice_block_unicom[v.x][v.y][v.z]=D;\n                }\n            }\n        }\n        if(!flag){\n            if(!last) for(int i=1;i<=tail;i++) vis[q[i].x][q[i].y][q[i].z]=0;\n            else for(int i=1;i<=tail;i++) vis[q[i].x][q[i].y][q[i].z]=0,num++;\n        }\n        return flag;\n    }\n    inline void Remove_ICE_BLOCK(int R,int C,int H){//\u64cd\u4f5c4:\u79fb\u52a8\u51b0\u7816 \n        if(!vis[R][C][H]){\n            printf(\"BAKA CIRNO,THERE IS NO ICE_BLOCK\\n\");\n            return;\n        }\n        else{\n            num++,vis[R][C][H]=0;\n            if(H==0) ice_floor[R][C]=0;\n            memset(ice_block_unicom,-1,sizeof(ice_block_unicom));\n            int broke=0;\n            for(int i=0;i<6;i++){\n                int r=R+dx[i],c=C+dy[i],h=H+dz[i];\n                if(ice_block_unicom[r][c][h]!=-1||!vis[r][c][h]) continue;\n                else if(!bfs(r,c,h,i,0)) broke+=tail;\n                else continue;\n            }\n            printf(\"CIRNO REMOVED AN ICE_BLOCK\");\n            if(broke>0) printf(\",AND %d BLOCK(S) ARE BROKEN\",broke);\n            printf(\"\\n\");\n        }\n    }\n    inline int Get_Height(){//5_\u83b7\u5f97\u5899\u9ad8 \n        int ret=0;\n        for(int i=HR;i<=HR+HX-1;i++)\n            for(int j=HC;j<=HC+HY-1;j++){\n                if(i>=HR+1&&i<=HR+HX-2&&j>=HC+1&&j<=HC+HY-2) continue;\n                int h=0;\n                for(int k=HM;k;k--)\n                    if(vis[i][j][k]){h=k;break;}\n                ret=max(ret,h);\n            }\n        return ret+1;\n    }\n    inline int ROOF_Need(int h){//5_\u5c4b\u9876\u6240\u9700\u51b0\u7816 \n        int ret=0;\n        for(int i=HR;i<=HR+HX-1;i++)\n            for(int j=HC;j<=HC+HY-1;j++)\n                if(!vis[i][j][h]) vis[i][j][h]=1,ret++;\n        return ret;\n    }\n    inline bool door_place_estimate(int x,int y){//\u8bc4\u4f30_\u95e8\u7684\u4e2d\u95f4\u4f4d\u7f6e\n        if(x==HR||x==HR+HX-1){\n            if(HY%2){if(y==(HC+(HC+HY-1))/2) return 1;}\n            else if(y==(HC+(HC+HY-1))/2||y==(HC+(HC+HY-1))/2+1) return 1;\n        }\n        else if(y==HC||y==HC+HY-1){\n            if(HX%2){if(x==(HR+(HR+HX-1))/2) return 1;}\n            else if(x==(HR+(HR+HX-1))/2||x==(HR+(HR+HX-1))/2+1) return 1;\n        }\n        return 0;\n    }\n    inline int Corner(int x,int y,bool last){//\u6570\u51b0\u7816_\u56db\u89d2\u5b8c\u6574\u6027\n        int ret=0;\n        if((x==HR&&y==HC+1)||(x==HR+1&&y==HC))\n            for(int i=0;i<2;i++)\n                if(!vis[HR][HC][i]){\n                    ret++;\n                    if(last) vis[HR][HC][i]=1;\n                }\n        if((x==HR+HX-1&&y==HC+1)||(x==HR+HC-2&&y==HC))\n            for(int i=0;i<2;i++)\n                if(!vis[HR+HX-1][HC][i]){\n                    ret++;\n                    if(last) vis[HR+HX-1][HC][i]=1;\n                }\n        if((x==HR&&y==HC+HY-2)||(x==HR+1&&y==HC+HY-1))\n            for(int i=0;i<2;i++)\n                if(!vis[HR][HC+HY-1][i]){\n                    ret++;\n                    if(last) vis[HR][HC+HY-1][i]=1;\n                }\n        if((x==HR+HX-1&&y==HC+HY-2)||(x==HR+HC-2&&y==HC+HY-1))\n            for(int i=0;i<2;i++)\n                if(!vis[HR+HX-1][HC+HY-1][i]){\n                    ret++;\n                    if(last) vis[HR+HX-1][HC+HY-1][i]=1;\n                }\n        return ret;\n    }\n    inline int Estimate(int x,int y){//\u6570\u51b0\u7816_\u8bc4\u4f30\n        int ret=0;\n        for(int i=0;i<2;i++)\n            if(!vis[x][y][i]) ret+=1000;//\u5b8c\u6574\u7a7a\u7f3a\u8bc4\u4f30 \n        if(door_place_estimate(x,y)) ret+=100;//\u7a7a\u7f3a\u4f4d\u7f6e\u8bc4\u4f30 \n        int A=Corner(x,y,0);//\u5224\u4f4d\u7f6e\uff0c\u627e\u7a7a\u7f3a\n        ret+=(5-A)*10;//\u7a7a\u7f3a\u8bc4\u4f30 \n        return ret;\n    }\n    inline bool Check_Door(int &x,int &y){//\u4fee\u8865_\u68c0\u67e5_\u95e8\u5b8c\u6574\u6027 \n        bool flag=0;\n        for(int i=HR;i<=HR+HX-1;i++)\n            for(int j=HC;j<=HC+HY-1;j++){\n                if((i==HR&&j==HC)||(i==HR&&j==HC+HY-1)\n                ||(i==HR+HX-1&&j==HC)||(i==HR+HX-1&&j==HC+HY-1)\n                ||(i>=HR+1&&i<=HR+HX-2&&j>=HC+1&&j<=HC+HY-2)) continue;\n                if(!vis[i][j][0]||!vis[i][j][1])\n                    if((x==-1&&y==-1)||Estimate(i,j)>Estimate(x,y)) x=i,y=j,flag=1;\n            }\n        int E=Estimate(x,y);\n        if(flag){\n            if((E/1000)%10==2) return 1;\n            return 0;\n        }\n        return flag;\n    }\n    inline int Get_need(int x,int y,int h){//\u4fee\u8865_\u6240\u9700\u51b0\u7816 \n        int ret=0;\n        for(int i=HR;i<=HR+HX-1;i++)\n            for(int j=HC;j<=HC+HY-1;j++){\n                if((i==HR&&j==HC)||(i==HR&&j==HC+HY-1)\n                ||(i==HR+HX-1&&j==HC)||(i==HR+HX-1&&j==HC+HY-1)\n                ||(i>=HR+1&&i<=HR+HX-2&&j>=HC+1&&j<=HC+HY-2)) continue;\n                for(int k=(i==x&&j==y)?2:0;k<h;k++)\n                    if(!vis[i][j][k]) vis[i][j][k]=1,ret++;\n            }\n        int E=Estimate(x,y);\n        ret+=(5-(E/10)%10);\n        Corner(x,y,1);\n        return ret;//\u4fee\u8865_\u5899\u89d2_\u7a7a\u7f3a \n    }\n    inline int Check_Corner(int h){//\u4fee\u8865_\u68c0\u67e5_\u5899\u89d2\n        int ret=0;\n        for(int i=0;i<h;i++){\n            if(!vis[HR][HC][i]) ret++;\n            if(!vis[HR][HC+HY-1][i]) ret++;\n            if(!vis[HR+HX-1][HC][i]) ret++;\n            if(!vis[HR+HX-1][HC+HY-1][i]) ret++;\n        }\n        return ret;\n    }\n    inline void Fix(int h){//\u79fb\u9664\u540e_\u4fee\u8865\n        bool door=0;\n        int x=-1,y=-1;\n        door=Check_Door(x,y);\n        if(x!=-1&&y!=-1){\n            int E=Estimate(x,y);\n            num+=(2-(E/1000)%10);\n        }\n        else num+=2;\n        int need=Get_need(x,y,h);\n        if(num<need){\n            printf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCKS TO FIX THE WALL\\n\");\n            return;\n        }\n        num-=need;\n        printf(\"GOOD JOB CIRNO,SUCCESSFULLY BUILT THE HOUSE\\n\");\n        if(!door) printf(\"HOUSE HAS NO DOOR\\n\"),perfect=0;\n        else printf(\"DOOR IS OK\\n\");\n        if(need>0) printf(\"WALL NEED TO BE FIXED\\n\"),perfect=0;\n        else printf(\"WALL IS OK\\n\");\n        need=Check_Corner(h);\n        if(need>0) printf(\"CORNER NEED TO BE FIXED\\n\"),perfect=0;\n        else printf(\"CORNER IS OK\\n\");\n        if(need>num) num=0;\n        else num-=need;\n        printf(\"CIRNO FINALLY HAS %d ICE_BLOCK(S)\\n\",num);\n        if(perfect) printf(\"CIRNO IS PERFECT!\\n\");\n    }\n    inline void Remove(int H){//5_\u79fb\u9664\u591a\u4f59\u51b0\u7816 \n        memset(ice_block_unicom,-1,sizeof(ice_block_unicom));\n        if(!bfs(HR,HC,H,0,1)){//\u5c4b\u9876\u584c\u9677\n            printf(\"SORRY CIRNO,HOUSE IS BROKEN WHEN REMOVING BLOCKS\\n\");\n            return;\n        }\n        int D=1;\n        for(int i=HR;i<=HR+HX-1;i++)\n            for(int j=HC;j<=HC+HY-1;j++){\n                if(i>=HR+1&&i<=HR+HX-2&&j>=HC+1&&j<=HC+HY-2)continue;\n                for(int k=0;k<H;k++)\n                    if(vis[i][j][k]&&ice_block_unicom[i][j][k]==-1) bfs(i,j,k,D++,1);//\u56de\u6536\n            }\n        Fix(H);//\u4fee\u8865 \n    }\n    inline void Make_ROOF(){ //\u64cd\u4f5c5:\u5efa\u9020\u5c4b\u9876 \n        int H=Get_Height();\n        int need=ROOF_Need(H);\n        if(num<need){\n            printf(\"SORRY CIRNO,NOT ENOUGH ICE_BLOCK(S) TO MAKE ROOF\\n\");\n            return;\n        }\n        int S=(HX-2)*(HY-2)*H;\n        if(H<2||S<2){\n            printf(\"SORRY CIRNO,HOUSE IS TOO SMALL\\n\");\n            return;\n        }\n        num-=need;\n        int num1=0,num2=0;\n        for(int i=HR+1;i<=HR+HX-2;i++)\n            for(int j=HC+1;j<=HC+HY-2;j++){\n                for(int k=0;k<H;k++)\n                    if(vis[i][j][k]) vis[i][j][k]=0,num1++,num++,perfect=0;\n                for(int k=H+1;k<HM;k++)\n                    if(vis[i][j][k]) vis[i][j][k]=0,num2++,num++,perfect=0;\n            }\n        for(int i=0;i<n;i++)\n            for(int j=0;j<n;j++){\n                if(i>=HR&&i<=HR+HX-1&&j>=HC&&j<=HC+HY-1) continue;\n                for(int k=0;k<HM;k++)\n                    if(vis[i][j][k]) vis[i][j][k]=0,num2++,num++,perfect=0;\n            }\n        printf(\"%d ICE_BLOCK(S) INSIDE THE HOUSE NEED TO BE REMOVED\\n\",num1);\n        printf(\"%d ICE_BLOCK(S) OUTSIDE THE HOUSE NEED TO BE REMOVED\\n\",num2);\n        Remove(H);\n    }\n    int main(){\n        n=read(),HM=read(),HR=read(),HC=read(),HX=read(),HY=read(),m=read();\n        for(int i=1;i<=m;i++){\n            char opt[MAX];\n            memset(opt,0,sizeof(opt));\n            Gets(opt);\n            if(strcmp(opt,\"ICE_BARRAGE\")==0){//\u64cd\u4f5c1 \n                int R=read(),C=read(),D=read(),S=read();\n                if(i==1000&&m==1000) printf(\"CIRNO FREEZED %d BLOCK(S)\",ICE_BARRAGE(R,C,D,S));\n                else printf(\"CIRNO FREEZED %d BLOCK(S)\\n\",ICE_BARRAGE(R,C,D,S));\n            }\n            else if(strcmp(opt,\"MAKE_ICE_BLOCK\")==0){//\u64cd\u4f5c2\n                int x=Make_ICE_BLOCK();\n                printf(\"CIRNO MADE %d ICE BLOCK(S),NOW SHE HAS %d ICE BLOCK(S)\\n\",x,num);\n            }\n            else if(strcmp(opt,\"PUT_ICE_BLOCK\")==0){//\u64cd\u4f5c3\n                int R=read(),C=read(),H=read(); Put_ICE_BLOCK(R,C,H);\n            }\n            else if(strcmp(opt,\"REMOVE_ICE_BLOCK\")==0){//\u64cd\u4f5c4\n                int R=read(),C=read(),H=read(); Remove_ICE_BLOCK(R,C,H);\n            }\n            else Make_ROOF();//\u64cd\u4f5c5\n        }\n        return 0;\n    }\n```",
        "postTime": 1539220059,
        "uid": 90615,
        "name": "opened",
        "ccfLevel": 4,
        "title": "P3693"
    }
]