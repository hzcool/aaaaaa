[
    {
        "content": "### \u6ce8\u610f:\u5728\u6b64\u51fa\u73b0\u7684\u4ee3\u7801\u5747\u4e0d\u4fdd\u8bc1\u53ef\u4ee5AC\uff0c\u4ee3\u7801\u662f\u6211\u5728AC\u8fd9\u9053\u9898\u4e24\u4e2a\u6708\u4ee5\u4e0a\u540e\u4e34\u65f6\u6572\u7684\uff0c\u4ec5\u4e3a\u7b14\u8005\u5728\u5199\u8fd9\u7bc7\u9898\u89e3\u65f6\u4e34\u65f6\u6572\u51fa\u6765\u7684\uff0c\u672a\u8fdb\u884c\u8fc7\u6b63\u786e\u6027\u9a8c\u8bc1\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u4f7f\u7528\u67d0\u4e24\u4e2a\u5feb\u6377\u952e\u3002   \n\u76f8\u5f53\u7ecf\u5178\u7684\u4e00\u9053\u7f51\u7edc\u6d41\u9898\u76ee\u3002        \n\u5206\u6790\u9898\u610f\uff0c\u53d1\u73b0\u4ece1-M\u7684\u6700\u5927\u6d41\u5373\u4e3a\u6240\u6c42\u3002    \n\u521a\u597d\u5728\u8fd9\u91cc\u4ecb\u7ecd\u51e0\u4e2a\u7f51\u7edc\u6d41\u7b97\u6cd5(\u4f1a\u7f51\u7edc\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u540c\u5b66\u4eec\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e86):        \n\u7b97\u6cd51.EK(Edmond-Karp)\u7b97\u6cd5:       \nEK\u662f\u4e00\u4e2a**\u589e\u5e7f\u8def**\u7b97\u6cd5\u3002         \n\u4ecb\u7ecd\u589e\u5e7f\u8def\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5148\u4ecb\u7ecd\u4e00\u4e2a\u6982\u5ff5\uff0c**\u6b8b\u4f59\u7f51\u7edc**    \uff1a   \n\u4e00\u4e2a\u56fe\u7684\u6b8b\u4f59\u7f51\u7edc\uff0c\u6307\u56fe\u4e2d\u8fb9\u5bb9\u91cf\u4e0e\u5f53\u524d\u6d41\u91cf\u7684\u5dee\u503c\u8fb9\u6784\u6210\u7684\u96c6\u5408\u3002      \n\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6d41\u8fc7\u4e00\u4e2a\u6d41\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u8def\u5f84\u51cf\u5c11\u7684\u5bb9\u91cf\u3002     \n\u8fd9\u4e2a\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\u7684:     \n\u6b8b\u4f59\u7f51\u7edc\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u6709\u5411\u8def\u5f84\u90fd\u5bf9\u5e94\u7740\u539f\u56fe\u4e2d\u7684\u4e00\u6761\u589e\u5e7f\u8def\u5f84\u3002          \n\u6211\u4eec\u5c06\u539f\u56fe\u4e2d\u7684\u5bb9\u91cf\u51cf\u53bb\u5f53\u524d\u6d41\u91cf\u7684\u52a8\u4f5c\u53eb\u505a\u589e\u5e7f\u3002     \n\u4f46\u662f\uff0c\u6211\u4eec\u5f53\u524d\u505a\u51fa\u7684\u9009\u62e9\u672a\u5fc5\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u6bcf\u6761\u8fb9\u5efa\u7acb\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6b63\u5411\u8fb9\u51cf\u5c11\u7684\u5bb9\u91cf\u4e4b\u548c\u3002    \n\u6211\u4eec\u4e00\u76f4\u8fdb\u884c\u589e\u5e7f\u64cd\u4f5c\uff0c\u76f4\u5230\u6211\u4eec\u65e0\u6cd5\u5728\u8fdb\u884c\u589e\u5e7f:\u5df2\u7ecf**\u6ca1\u6709**\u53ef\u4ee5\u4eces\u6d41\u5411t\u7684\u6d41\u4e86\uff0c\u8def\u5f84**\u5835\u585e**\u4e86\u3002     \n\u6211\u4eec\u8fc7\u4e00\u904d\u7b97\u6cd5\u6d41\u7a0b(\u4ee5\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u4e3a\u8303\u4f8b):     \n1.\u6211\u4eec\u9700\u8981\u7528\u4e00\u4e2a\u904d\u5386\u7b97\u6cd5\u6765\u5224\u65ad\u6709\u6ca1\u6709\u4eces\u5230\u8fbet\u7684\u6d41\u3002    \n\u53ea\u8981\u80fd\u4eces\u6d41\u5411t\uff0c\u6211\u4eec\u5c31\u8fdb\u884c\u589e\u5e7f\u3002   \n\u7531\u4e8e\u6211\u4eec\u8fd9\u91cc\u7684\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u6211\u4eec\u4f7f\u7528spfa\u6765\u5224\u65ad:\n```cpp\nvoid mcmf()\n{\n    while(spfa(s,t))\n    {\n```\n\u6211\u4eec\u5c06\u5728\u8bb2\u5b8c\u8fd9\u4e2a\u7b97\u6cd5\u4e3b\u8fc7\u7a0b\u540e\u5c55\u793a\u7528\u4e8e\u5224\u65ad\u7684spfa\u4ee3\u7801\u3002                 \n```cpp\n    while(spfa(s,t))\n    {\n        int now=t;\n        maxf+=flow[t];\n        minc+=dist[t]*flow[t];\n```\n\u6211\u4eec\u7528```last[i]```\u8868\u793a\u6d41\u5230i\u70b9\u7684\u5f53\u524d\u6d41\u91cf\u3002    \n\u6839\u636e\u5230\u8fbet\u70b9\u7684\u5f53\u524d\u6d41\u91cf\uff0c\u6211\u4eec\u66f4\u65b0\u7f51\u7edc\u603b\u6700\u5927\u6d41\u3002   \n\u6211\u4eec\u7528```pre[i]```\u8868\u793a\u70b9i\u7684\u524d\u9a71(\u5373\u8def\u5f84\u4e0ai\u7684**\u524d\u4e00\u4e2a**\u70b9)       \n\u7528```last[i]```\u8868\u793a\u8def\u5f84\u4e2d\u6307\u5411i\u7684\u8fb9(\u5373**\u8981**\u8fdb\u884c**\u6d41\u91cf\u51cf\u5c11**\u7684\u8fb9) \n```cpp\n        while(now!=s)\n        {\n            a[last[now]].flow-=flow[t];\n            a[last[now]^1].flow+=flow[t];\n            now=pre[now];\n        }\n    }\n}\n```\n\u6211\u4eec\u518d\u987a\u7740\u524d\u9a71\u5f80\u524d\u56de\u6eaf\uff0c\u5e76\u6cbf\u9014\u66f4\u65b0\u6b63\u53cd\u4e24\u6761\u8fb9\u7684\u6d41\u91cf\u3002         \nmcmf\u4e3b\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:\n```cpp\nvoid mcmf()\n{\n    while(spfa(s,t))\n    {\n        int now=t;\n        maxf+=flow[t];\n        minc+=dist[t]*flow[t];\n        while(now!=s)\n        {\n            a[last[now]].flow-=flow[t];\n            a[last[now]^1].flow+=flow[t];\n            now=pre[now];\n        }\n    }\n}\n```\nspfa\u8fc7\u7a0b\u8be6\u89e3:      \n\u521d\u59cb\u5316\uff1a      \n\u521d\u59cb\u5316\u4e2d\uff0c\u6211\u4eec\u8981\u5c06\u5f53\u524d\u6700\u5927\u6d41\uff0c\u5f53\u524d\u6700\u5c0f\u8d39\u7528\u7f6e\u4e3aINF\uff0c\u4ee5\u53ca\u5c06vis\u6570\u7ec4\u7f6e\u4e3a0\u3002\n\u540c\u65f6\uff0c\u5c06```dist[s]```\u7f6e\u4e3a0\uff0c\u5c06```pre[s]```\u7f6e\u4e3a-1(\u4ee3\u8868\u6ca1\u6709\u524d\u9a71)\uff0c\u518d\u5c06s\u5165\u961f\u3002      \n```cpp\nbool spfa(int s,int t)\n{\n    queue<int> q;\n    memset(vis,0,sizeof(vis));\n    memset(flow,INF,sizeof(flow));\n    memset(dist,INF,sizeof(dist));\n    q.push(s);\n    dist[s]=0;\n    pre[t]=-1;\n    vis[s]=1;\n```\n\u6211\u4eec\u4e0e\u666e\u901a\u7684spfa\u8fc7\u7a0b\u4e00\u6837\uff0c\u987a\u5e8f\u53d6\u51fa\uff0c\u904d\u5386\u6bcf\u4e2a\u70b9:\n```cpp\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        vis[now]=0;\n        for(int i=head[now];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n```\n\u7136\u540e\u987a\u7740\u6700\u77ed\u8def\u8d70\u3002        \n\u5728\u8fd9\u91cc\uff0c\u6709\u51e0\u70b9\u8981\u6ce8\u610f\uff1a       \n1.\u6211\u4eec\u8dd1\u7684\u662f**\u7f51\u7edc\u6d41**\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u7ecf\u8fc7**\u5269\u4f59\u6d41\u91cf\u5927\u4e8e\u96f6\u7684\u8def\u5f84**          \n2.\u6211\u4eec\u5728\u8fd9\u91cc\u8981\u8bb0\u5f55pre\u6570\u7ec4\u548clast\u6570\u7ec4\u7684\u503c\u3002      \n3.\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u6000\u7591spfa\u7b97\u6cd5\u8dd1\u7f51\u7edc\u6d41\u7684**\u6b63\u786e\u6027**\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u53ea\u5728**\u6d41\u91cf\u4e0d\u4e3a\u96f6\u7684\u8def\u5f84**\u4e0a\u8fdb\u884c\u677e\u5f1b\uff0c\u6240\u4ee5\u6211\u4eec\u7684spfa\u7b97\u6cd5\u662f\u6b63\u786e\u7684(\u6211\u4eec\u53d6\u7684**\u6700\u77ed\u8def\u5f84**\u4e5f\u5fc5\u5b9a\u662f\u4e00\u6761**\u589e\u5e7f\u8def\u5f84**)\u3002      \n4.\u6211\u4eec\u5728\u66f4\u65b0flow\u6570\u7ec4\u65f6\uff0c\u8bb0\u5f97\u8981\u53d6**min\u503c**\u3002\n```cpp\n            if(a[i].flow>0&&dist[v]>dist[now]+a[i].cost)\n            {\n                dist[v]=dist[now]+a[i].cost;\n                pre[v]=now;\n                last[v]=i;\n                flow[v]=min(flow[now],a[i].flow);\n                if(!vis[v])\n                {\n                    q.push(v);\n                    vis[v]=1;\n                }\n```\n\u7b97\u6cd5\u7ed3\u675f:       \n\u5728\u8fd9\u91cc\u7684\u7684spfa\u662f\u4e00\u4e2a\u5224\u65ad\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u540e\u8981\u8f93\u51fa\u4e00\u4e2abool\u503c\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5224\u65ad```pre[t]```\u662f\u5426\u4e3a-1\u5373\u53ef\u3002(\u5373\u662f\u5426\u80fd\u591f\u6d41\u5411t)\n```\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\n```\nspfa\u8fc7\u7a0b\u4ee3\u7801\n```cpp\nbool spfa(int s,int t)\n{\n    queue<int> q;\n    memset(vis,0,sizeof(vis));\n    memset(flow,INF,sizeof(flow));\n    memset(dist,INF,sizeof(dist));\n    q.push(s);\n    dist[s]=0;\n    pre[t]=-1;\n    vis[s]=1;\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        vis[now]=0;\n        for(int i=head[now];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i].flow>0&&dist[v]>dist[now]+a[i].cost)\n            {\n                dist[v]=dist[now]+a[i].cost;\n                pre[v]=now;\n                last[v]=i;\n                flow[v]=min(flow[now],a[i].flow);\n                if(!vis[v])\n                {\n                    q.push(v);\n                    vis[v]=1;\n                }\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\n```\nEK\u7b97\u6cd5\u6c42\u89e3\u8349\u5730\u6392\u6c34\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<climits>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct edge\n{\n    int to,next,flow,cost;\n}a[2000020];\nint cnt(0);\nint n,m,s,t;\nint x,y,z,f;\nint flow[1000010],head[1000010];\nint dist[1000010],vis[1000010];\nint pre[1000010],last[1000010];\nint maxf(0),minc(0);\nvoid addedge(int xi,int yi,int fi,int ci)\n{\n    a[cnt].to=yi;\n    a[cnt].next=head[xi];\n    a[cnt].flow=fi;\n    a[cnt].cost=ci;\n    head[xi]=cnt++;\n}\nbool spfa(int s,int t)\n{\n    queue<int> q;\n    memset(vis,0,sizeof(vis));\n    memset(flow,INF,sizeof(flow));\n    memset(dist,INF,sizeof(dist));\n    q.push(s);\n    dist[s]=0;\n    pre[t]=-1;\n    vis[s]=1;\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        vis[now]=0;\n        for(int i=head[now];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i].flow>0&&dist[v]>dist[now]+a[i].cost)\n            {\n                dist[v]=dist[now]+a[i].cost;\n                pre[v]=now;\n                last[v]=i;\n                flow[v]=min(flow[now],a[i].flow);\n                if(!vis[v])\n                {\n                    q.push(v);\n                    vis[v]=1;\n                }\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\nvoid mcmf()\n{\n    while(spfa(s,t))\n    {\n        int now=t;\n        maxf+=flow[t];\n        minc+=dist[t]*flow[t];\n        while(now!=s)\n        {\n            a[last[now]].flow-=flow[t];\n            a[last[now]^1].flow+=flow[t];\n            now=pre[now];\n        }\n    }\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&m,&n);\n    s=1,t=n;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d%d\",&x,&y,&z,&f);\n        addedge(x,y,z,f);\n        addedge(y,x,0,-f);\n    }\n    mcmf();\n    printf(\"%d\",maxf);\n    return 0;\n}\n\n```\n\u7b97\u6cd52.Dinic\u7b97\u6cd5:          \nDinic\u7b97\u6cd5\u4e5f\u662f\u4e00\u4e2a\u589e\u5e7f\u8def\u7b97\u6cd5\u3002       \n\u76f8\u4fe1\u4f60\u4eec\u5728\u770b\u4e86\u524d\u9762\u7684EK\u7b97\u6cd5\u540e\uff0c\u5bf9\u589e\u5e7f\u8def\u5df2\u7ecf\u6709\u4e86\u4e00\u5b9a\u7684\u4e86\u89e3\u3002        \n\u7531\u4e8e\u6211\u4eec\u4e00\u822c\u7684\u589e\u5e7f\u8def\u7b97\u6cd5\u53ef\u80fd\u4f1a\u4e00\u76f4\u4f1a\u5bf9\u540c\u4e00\u6761\u8def\u5f84\u8fdb\u884c\u589e\u5e7f\uff0c\u4f1a\u5341\u5206\u5730\u6d6a\u8d39\u65f6\u95f4\u3002       \n\u4f8b:       \n![https://i.loli.net/2018/12/04/5c060e0682acd.jpg](https://i.loli.net/2018/12/04/5c060e0682acd.jpg)          \n\u8fd9\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7ecf\u5178\u4f8b\u5b50\u4e86\u3002       \n\u8003\u8651\u4ece2\u52303\u7684\uff0c\u5bb9\u91cf\u4e3a1\u7684\u6709\u5411\u8def\u5f84\uff0c\u6211\u4eec\u4f1a\u53cd\u590d\u5730\u589e\u5e7f\u8fd9\u6761\u8def\u5f84\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u5bf9\u5176\u8fdb\u884c1998\u6b21\u589e\u5e7f,\u5341\u5206\u7684\u6d6a\u8d39\u65f6\u95f4\u3002         \n\u6240\u4ee5\u6211\u4eec\u5f15\u5165\u4e86**\u5206\u5c42\u56fe**\u7684\u6982\u5ff5:      \n\u6211\u4eec\u628a\u56fe\u5206\u4e3ak\u5c42\uff0c\u4e00\u4e2a\u70b9\u7684\u5c42\u6570\u5bf9\u5e94\u5176\u5728bfs\u8fc7\u7a0b\u4e2d\u7684\u6df1\u5ea6\u3002         \n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u4ece\u5c42\u6b21\u5c0f\u7684\u70b9\u8d70\u5411\u5c42\u6b21\u5927\u7684\u70b9\u3002      \n\u6211\u4eec\u7528\u4e00\u4e2abfs\u8fc7\u7a0b\u6765\u5b8c\u6210\u5206\u5c42\u3002     \nbfs\u5206\u5c42\u8be6\u89e3:      \n\u4e0eEK\u7684spfa\u76f8\u4f3c\uff0cDinic\u7684bfs\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u5224\u65ad\u51fd\u6570\uff0c\u5224\u65ad\u662f\u5426\u80fd\u4eces\u8d70\u5230t\u3002      \n\u6765\u8fc7\u4e00\u904dbfs\u6d41\u7a0b:        \n1.\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u521d\u59cb\u5316\uff1a\n```cpp\nbool bfs(int s)\n{\n\tqueue<int> q;\n\twhile(!q.empty())q.pop();\n\tmemset(dep,-1,sizeof(dep));\n\tdep[s]=1;\n\tq.push(s);\n```\n\u6ce8\u610f\u8fd9\u91cc\u5c06s\u7684\u6df1\u5ea6\u8bbe\u4e3a\u4e861\u3002        \n2.\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u4e0e\u4e00\u822c\u7684bfs\u7c7b\u4f3c\u3002       \n\u53ea\u662f\u6ce8\u610f\u8fd9\u91cc\u8981\u8bb0\u5f55\u4e0b\u6df1\u5ea6(```dep[i]```)\uff0c\u5e76\u4e14\u5224\u65ad\u6d41\u91cf\u662f\u5426\u4e3a\u96f6(\u4e0eEK\u7684\u6280\u5de7\u662f\u4e00\u6837\u7684)\n```cpp\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[t];i!=-1;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tint f=a[i].flow;\n\t\t\tif((f>0)&&(dep[v]==-1))\n\t\t\t{\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n```\n\u5728\u7ed3\u675f\u65f6\u8981\u8bb0\u5f97\u8fd4\u56debfs\u7684\u5224\u65ad\u503c\u3002\n\u5982\u679c```dep[t]```\u4e0d\u4e3a-1\u65f6\u4ee3\u8868\u6211\u4eec\u80fd\u641c\u5230t\u3002     \n\u5982\u4e0b:\n```cpp\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\n```\nbfs\u4ee3\u7801:\n```cpp\nbool bfs(int s)\n{\n\tqueue<int> q;\n\twhile(!q.empty())q.pop();\n\tmemset(dep,-1,sizeof(dep));\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[t];i!=-1;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tint f=a[i].flow;\n\t\t\tif((f>0)&&(dep[v]==-1))\n\t\t\t{\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\n```\nbfs\u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u4f7f\u7528dfs\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u5e76\u4e14\u6cbf\u8def\u66f4\u65b0\u6211\u4eec\u7684\u5f53\u524d\u6d41\u3002      \ndfs\u8fc7\u7a0b\u8be6\u89e3:         \n\u6211\u4eec\u89c4\u5b9aint dfs(int u,int dist)\u4ee3\u8868\u5f53\u524d\u5728\u6d41\u5165\u7684\u6d41\u91cf\u4e3adist\uff0c\u7f16\u53f7\u4e3au\u7684\u70b9,\u8fd4\u56de\u7684\u503c\u4e3a\u5f53\u524d\u7f51\u7edc\u53ef\u884c\u7684\u6700\u5927\u6d41\u91cf\u3002        \n\u9996\u5148\u662f\u8fb9\u754c\u6761\u4ef6\uff1a\n```cpp\nint dfs(int u,int dist)\n{\n\tif(u==t)return dist;\n```\n\u5982\u679c\u641c\u5230\u4e86\u7ec8\u70b9\uff0c\u5c31\u8f93\u51fa\u6d41\u5165\u7684\u6d41\u91cf\u3002      \n\u7136\u540e\u6211\u4eec\u5411\u4e0b\u4e00\u4e2a\u70b9\u8fdb\u884c\u641c\u7d22:\n```cpp\n\tfor(int i=head[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tint f=a[i].flow;\n```\n\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u8bd5\u56fe\u5bf9\u6bcf\u4e00\u4e2a\u5f53\u524d\u70b9\u80fd\u5230\u8fbe\u7684\uff0c\u4e14\u5c42\u6570\u6bd4\u5f53\u524d\u70b9\u5927\u4e00\u7684\u70b9\u8fdb\u884c\u9012\u5f52\u3002          \n\u4f46\u82e5\u7f51\u7edc\u5728\u8fd9\u91cc\u7684\u6d41\u91cf\u4e3a0(\u5373\u88ab\"\u963b\u585e\"\u4e86)\uff0c\u5c31\u4e0d\u518d\u884c\u8003\u8651\u4e86\u3002\n```cpp\n\t\tif((dep[v]==dep[u]+1)&&(f!=0))\n\t\t{\n\t\t\tint df(dfs(v,min(dist,f)));\n```\ndf\u4ee3\u8868\"\u0394f\"(\u6d41\u91cf\u5dee)\uff0c\u5373\u5f53\u524d\u72b6\u51b5\u4e0b\u53ef\u884c\u7684\u6700\u5927\u6d41\u91cf\u3002\n\u6211\u4eec\u4f9d\u636e\u8fd9\u4e2a\uff0c\u5bf9\u6bcf\u4e2a\u6d41\u7ecf\u7684\u8fb9\u8fdb\u884c\u66f4\u65b0\u3002\n```cpp\n\t\t\tif(df>0)\n\t\t\t{\n\t\t\t\ta[i].flow-=df;\n\t\t\t\ta[i^1].flow+=df;\n\t\t\t\treturn df;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\ndfs\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:      \n```cpp\nint dfs(int u,int dist)\n{\n\tif(u==t)return dist;\n\tfor(int i=head[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tint f=a[i].flow;\n\t\tif((dep[v]==dep[u]+1)&&(f!=0))\n\t\t{\n\t\t\tint df(dfs(v,min(dist,f)));\n\t\t\tif(df>0)\n\t\t\t{\n\t\t\t\ta[i].flow-=df;\n\t\t\t\ta[i^1].flow+=df;\n\t\t\t\treturn df;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u63a5\u4e0b\u6765\u5206\u6790dinic\u7684\u4e3b\u8fc7\u7a0b\uff0c\u6709\u4e86\u6211\u4eec\u524d\u9762\u7684\u57fa\u7840\u652f\u6301\uff0c\u7406\u89e3\u8d77\u6765\u5c31\u4e0d\u4f1a\u592a\u96be\u4e86\u3002       \n\u9996\u5148\u6211\u4eec\u521d\u59cb\u5316\u6700\u5927\u6d41:       \n```cpp\nvoid dinic()\n{\n\tmaxf=0;\n\tint nowf(0);\n```\n\u7136\u540e\u6211\u4eec\u4e0d\u65ad\u5730\u5c1d\u8bd5\u53bb\u6784\u5efa\u5206\u5c42\u56fe\u3002\n```cpp\n\twhile(bfs(s))\n\t{\n\t\tnowf=INF;\n```\n\u6bcf\u6784\u5efa\u4e00\u6b21\u5206\u5c42\u56fe\uff0c\u6211\u4eec\u5c31\u5c1d\u8bd5\u4e00\u6b21\u589e\u5e7f,\u5e76\u66f4\u65b0\u6d41\u91cf:\n```\n\t\twhile(nowf)\n\t\t{\n\t\t\tnowf=dfs(s,INF);\n\t\t\tmaxf+=nowf;\n\t\t}\n\t}\n}\n```\n\u8fd9\u6837\u5c31\u7ed3\u675f\u4e86\u3002   \ndinic\u4e3b\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:    \n```cpp\nvoid dinic()\n{\n\tmaxf=0;\n\tint nowf(0);\n\twhile(bfs(s))\n\t{\n\t\tnowf=INF;\n\t\twhile(nowf)\n\t\t{\n\t\t\tnowf=dfs(s,INF);\n\t\t\tmaxf+=nowf;\n\t\t}\n\t}\n}\n```\ndinic\u7b97\u6cd5\u6c42\u89e3\u8349\u5730\u6392\u6c34\u5b8c\u6574\u4ee3\u7801:   \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<climits>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct edge\n{\n\tint next,to,flow;\n}a[2000020];\nint n,m;\nint s,t;\nint cnt(0);\nint head[1000010];\nint dep[1000010];\nint maxf(0);\nvoid addedge(int xi,int yi,int fi)\n{\n\ta[cnt].to=yi;\n\ta[cnt].next=head[xi];\n\ta[cnt].flow=fi;\n\thead[xi]=cnt++;\n}\nbool bfs(int s)\n{\n\tqueue<int> q;\n\twhile(!q.empty())q.pop();\n\tmemset(dep,-1,sizeof(dep));\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[t];i!=-1;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tint f=a[i].flow;\n\t\t\tif((f>0)&&(dep[v]==-1))\n\t\t\t{\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\nint dfs(int u,int dist)\n{\n\tif(u==t)return dist;\n\tfor(int i=head[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tint f=a[i].flow;\n\t\tif((dep[v]==dep[u]+1)&&(f!=0))\n\t\t{\n\t\t\tint df(dfs(v,min(dist,f)));\n\t\t\tif(df>0)\n\t\t\t{\n\t\t\t\ta[i].flow-=df;\n\t\t\t\ta[i^1].flow+=df;\n\t\t\t\treturn df;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nvoid dinic()\n{\n\tmaxf=0;\n\tint nowf(0);\n\twhile(bfs(s))\n\t{\n\t\tnowf=INF;\n\t\twhile(nowf)\n\t\t{\n\t\t\tnowf=dfs(s,INF);\n\t\t\tmaxf+=nowf;\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&m,&n);\n\ts=1,t=n;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,f;\n\t\tscanf(\"%d%d%d\",&x,&y,&f);\n\t\taddedge(x,y,f);\n\t\taddedge(y,x,0);\n\t}\n\tdinic();\n\tprintf(\"%d\",maxf);\n\treturn 0;\n}\n\n```\n\u7b97\u6cd53.ISAP(Improved Shortest Augmenting Path\uff0c\u66f4\u4f18\u6700\u77ed\u589e\u5e7f\u8def\u5f84\u7b97\u6cd5):     \n\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u5728dinic\u7b97\u6cd5\u4e2d\uff0c\u6bcf\u6b21\u6c42\u5206\u5c42\u56fe\u5e26\u6765\u7684\u533a\u522b\u5e76\u4e0d\u5927\u3002      \n\u4f8b:(4\u4e2a\u70b9\uff0c5\u6761\u8fb9\uff0c\u4ece4\u53f7\u70b9\u52303\u53f7\u70b9)\n```cpp\n4 5 4 3\n4 2 30\n4 3 20\n2 3 20\n2 1 30\n1 3 40\n```\n\u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e00\u5171\u4f1a\u6c42\u89e33\u6b21\u5206\u5c42\u56fe\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b:\n```cpp\n\u7b2c\u4e00\u6b21\u6c42\u89e3\u65f6:\n\u7b2c\u4e00\u5c42:4\n\u7b2c\u4e8c\u5c42:2,3\n\u7b2c\u4e09\u5c42:1\n\u7b2c\u56db\u5c42:\u7a7a\n\n\u7b2c\u4e8c\u6b21\u6c42\u89e3\u65f6:\n\u7b2c\u4e00\u5c42:4\n\u7b2c\u4e8c\u5c42:2\n\u7b2c\u4e09\u5c42:1,3\n\u7b2c\u56db\u5c42:\u7a7a\n\n\u7b2c\u4e09\u6b21\u6c42\u89e3\u65f6:\n\u7b2c\u4e00\u5c42:4\n\u7b2c\u4e8c\u5c42:2\n\u7b2c\u4e09\u5c42:1\n\u7b2c\u56db\u5c42:3\n```\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u53ea\u67093\u53f7\u8282\u70b9\u7684\u5c42\u6570\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u800c\u4e14\u6bcf\u6b21\u6539\u53d8\u90fd\u662f\u5c42\u6b21+1\u7684\u8fc7\u7a0b\u3002   \n\u53ef\u4e0d\u53ef\u4ee5\u7701\u6389\u5206\u5c42\u56fe\u91cd\u590d\u7684\u6c42\u89e3\u6b65\u9aa4\u5462?     \n\u7b54\u6848\u662f\u53ef\u4ee5\u3002    \n\u6211\u4eec\u5728ISAP\u7b97\u6cd5\u4e2d\uff0c\u53ea\u8dd1\u4e00\u6b21bfs,\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u66f4\u65b0\u540e\u7684\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u8fdb\u884c\"\u63a8\u79fb\"\u2014\u2014\u5c06\u5b83\u7684\u6df1\u5ea6+1\u3002       \n\u6ce8\u610f\u6211\u4eec\u52a0\u4e0a\u7684\u51e0\u4e2a\u4f18\u5316:      \n1.gap\u4f18\u5316:```gap[i]```\u4ee3\u8868\u5c42\u6570\u4e3ai\u7684\u5206\u5c42\u56fe\u4e2d\u7684\u70b9\u6570\uff0c\u82e5\u4e00\u4e2a\u5c42\u6b21\u6ca1\u6709\u70b9\u4e86\uff0c\u5c31\u5c06\u5f53\u524d\u70b9\u7f6e\u4e3a\u6700\u9ad8\u5c42\u70b9\u3002      \n2.\u5f53\u524d\u5f27\u4f18\u5316:```arcs[i]```\u8bb0\u5f55head\u7684\u4e00\u4e2a\u526f\u672c\u3002    \n\u6211\u4eec\u6765\u770b\u770bisap\u7684bfs\u8fc7\u7a0b:       \n\u6211\u4eec\u8fd8\u662f\u8001\u5957\u8def\uff0c\u8fc7\u4e00\u904d\u7b97\u6cd5\u6d41\u7a0b\u3002      \n\u521d\u59cb\u5316:\n```cpp\nvoid bfs(int s)\n{\n\tmemset(dep,0,sizeof(dep));\n\tmemset(gap,0,sizeof(gap));\n\tqueue<int>q;\n\tdep[s]=1;\n\tgap[1]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n```\n\u6211\u4eec\u9664\u4e86\u5904\u7406\u70b9\u6df1\u5ea6\u5916\uff0c\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e2agap\u6570\u7ec4\u3002      \n\u522b\u5fd8\u4e86\u5c06gap\u7684\u7b2c\u4e00\u9879\u7f6e\u4e3a1(s\u7684\u5c42\u6b21\u4e3a1)\u3002     \n\u7136\u540e\u8fd8\u662f\u8bb0\u5f55\u4e0b\u6df1\u5ea6\uff0c\u5e76\u66f4\u65b0gap\u6570\u7ec4:\n```cpp\n\t\tfor(int i=head[t];i!=-1;i=a[i].next) \n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(!dep[v])\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tgap[dep[v]]++;\n\t\t\t}\n\t\t}\n\t}\n}\n```\nbfs\u8fc7\u7a0b:  \n```cpp\nvoid bfs(int s)\n{\n\tmemset(dep,0,sizeof(dep));\n\tmemset(gap,0,sizeof(gap));\n\tqueue<int>q;\n\tdep[s]=1;\n\tgap[1]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[t];i!=-1;i=a[i].next) \n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(!dep[v])\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tgap[dep[v]]++;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u7136\u540e\u5728dfs\u8fc7\u7a0b\u4e2d\u4e5f\u6709\u4e00\u4e9b\u5c0f\u5c0f\u7684\u6539\u52a8:      \n\u5728\u524d\u9762\u7684\u90fd\u8ddfdinic\u7684\u4e00\u6837:\n```cpp\nint dfs(int u,int dist)\n{\n\tif (u==t)return dist;\n\tint sum(0);\n\tint nowf(0);\n\tfor (int i=arcs[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tif (dep[u]==dep[v]+1)\n\t\t{\n\t\t\tnowf=dfs(v,min(dist,a[i].flow));\n\t\t\tsum+=nowf;\n\t\t\tdist-=nowf;\n\t\t\ta[i].flow-=nowf;\n\t\t\ta[i^1].flow+=nowf;\n\t\t\tif(!dist)return sum;\n\t\t}\n\t}\n```\n\u4f46\u5728\u7b97\u6cd5\u7ed3\u675f\u524d\uff0c\u6211\u4eec\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\"\u504f\u79fb\"\u3002    \n\u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u4f7f\u7528\u591a\u6b21bfs\u6765\u66f4\u65b0\u5c42\u6b21\u4e86:\n```cpp\n\tif(!(--gap[dep[u]]))dep[s]=n+1;\n\tdep[u]++;\n\tgap[dep[u]]++;\n\tarcs[u]=head[u];\n\treturn sum; \n} \n```\ndfs\u8fc7\u7a0b:\n```cpp\nint dfs(int u,int dist)\n{\n\tif (u==t)return dist;\n\tint sum(0);\n\tint nowf(0);\n\tfor (int i=arcs[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tif (dep[u]==dep[v]+1)\n\t\t{\n\t\t\tnowf=dfs(v,min(dist,a[i].flow));\n\t\t\tsum+=nowf;\n\t\t\tdist-=nowf;\n\t\t\ta[i].flow-=nowf;\n\t\t\ta[i^1].flow+=nowf;\n\t\t\tif(!dist)return sum;\n\t\t}\n\t}\n\tif(!(--gap[dep[u]]))dep[s]=n+1;\n\tdep[u]++;\n\tgap[dep[u]]++;\n\tarcs[u]=head[u];\n\treturn sum; \n} \n```\nisap\u4e3b\u8fc7\u7a0b:        \nisap\u7684\u4e3b\u8fc7\u7a0b\u4e5f\u5341\u5206\u7684\u7b80\u5355\uff0c\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65:      \n1.\u5206\u5c42\u56fe\u521d\u59cb\u5316\u3002    \n2.\u901a\u8fc7dfs\u6765\u66f4\u65b0\u6700\u5927\u6d41\u548c\u5206\u5c42\u56fe\u3002    \nisap\u4e3b\u8fc7\u7a0b\u4ee3\u7801:\n```cpp\nvoid isap()\n{\n\tmaxf=0;\n\tbfs(t);\n\tmemcpy(&arcs[1],&head[1],sizeof(int)*n);\n\tmaxf=dfs(s,INF);\n\twhile(dep[s]<=n)maxf+=dfs(s,INF);\n}\n```\nisap\u6c42\u89e3\u8349\u5730\u6392\u6c34\u5b8c\u6574\u4ee3\u7801:     \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<climits>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct edge\n{\n\tint next,to,flow;\n}a[2000020];\nint n,m;\nint s,t;\nint cnt(0);\nint head[1000010];\nint dep[1000010];\nint arcs[1000010];\nint gap[1000010];\nint maxf(0);\nvoid addedge(int xi,int yi,int fi)\n{\n\ta[cnt].to=yi;\n\ta[cnt].next=head[xi];\n\ta[cnt].flow=fi;\n\thead[xi]=cnt++;\n}\nvoid bfs(int s)\n{\n\tmemset(dep,0,sizeof(dep));\n\tmemset(gap,0,sizeof(gap));\n\tqueue<int>q;\n\tdep[s]=1;\n\tgap[1]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[t];i!=-1;i=a[i].next) \n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(!dep[v])\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdep[v]=dep[t]+1;\n\t\t\t\tgap[dep[v]]++;\n\t\t\t}\n\t\t}\n\t}\n}\nint dfs(int u,int dist)\n{\n\tif (u==t)return dist;\n\tint sum(0);\n\tint nowf(0);\n\tfor (int i=arcs[u];i!=-1;i=a[i].next)\n\t{\n\t\tint v=a[i].to;\n\t\tif (dep[u]==dep[v]+1)\n\t\t{\n\t\t\tnowf=dfs(v,min(dist,a[i].flow));\n\t\t\tsum+=nowf;\n\t\t\tdist-=nowf;\n\t\t\ta[i].flow-=nowf;\n\t\t\ta[i^1].flow+=nowf;\n\t\t\tif(!dist)return sum;\n\t\t}\n\t}\n\tif(!(--gap[dep[u]]))dep[s]=n+1;\n\tdep[u]++;\n\tgap[dep[u]]++;\n\tarcs[u]=head[u];\n\treturn sum; \n} \nvoid isap()\n{\n\tmaxf=0;\n\tbfs(t);\n\tmemcpy(&arcs[1],&head[1],sizeof(int)*n);\n\tmaxf=dfs(s,INF);\n\twhile(dep[s]<=n)maxf+=dfs(s,INF);\n}\nint main()\n{\n\tmemset(arcs,-1,sizeof(arcs));\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&m,&n);\n\ts=1,t=n;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,f;\n\t\tscanf(\"%d%d%d\",&x,&y,&f);\n\t\taddedge(x,y,f);\n\t\taddedge(y,x,0);\n\t}\n\tisap();\n\tprintf(\"%d\",maxf);\n\treturn 0;\n}\n\n```\n\u7b97\u6cd54(\u6ca1\u9519\uff0c\u8fd8\u6709):HLPP\u7b97\u6cd5       \n\u7b49\u7740\u770bff\u7684\u540c\u5b66\u4eec\u5f88\u62b1\u6b49\uff0cff\u4e0b\u7ebf\u4e86~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a~~\u3002    \n\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u770b\u589e\u5e7f\u8def\u770b\u5f97\u8111\u888b\u90fd\u75bc\u4e86\u3002\u6240\u4ee5\u6211\u6765\u4ecb\u7ecd\u4e00\u4e2a~~\u7384\u5b66~~\u7b97\u6cd5\uff0c\u4e0d\u4f9d\u8d56\u589e\u5e7f\u8def\u7684\u90a3\u79cd\u3002    \nHLPP(Highest Label Preflow Push\uff0c\u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb)\u7b97\u6cd5\uff0c\u662f\u4e00\u4e2a**\u9884\u6d41\u63a8\u8fdb**\u7b97\u6cd5\u3002      \n\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u9700\u8981\u4e86\u89e3\u51e0\u4e2a\u5b9a\u4e49:      \n**\u8d85\u989d\u6d41**:\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u5141\u8bb8\u6211\u4eec\u5c06\u6d41\u91cf**\u5b58\u50a8**\u5728**\u4efb\u610f**\u8282\u70b9\u4e2d\u3002\u5b58\u50a8\u5728**\u975e\u539f\u70b9**\u7684\u8282\u70b9\u4e2d\u7684\u6d41\u91cf\u5c31\u53eb\u505a\u8d85\u989d\u6d41\u3002       \n**\u63a8\u9001**:\u4e00\u4e2a\u8282\u70b9\u5c06\u5176\u8d85\u989d\u6d41\u9001\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u8fc7\u7a0b\u53eb\u505a\u63a8\u9001\u3002    \n**\u8282\u70b9\u9ad8\u5ea6**:\u4e3a\u4e86\u9632\u6b62\u6709\u4e9b\u8282\u70b9\u6253\u592a\u6781(\u4f60\u63a8\u9001\u7ed9\u6211\uff0c\u6211\u63a8\u9001\u7ed9\u4f60\uff0c\u4e00\u76f4\u63a8\u9001\u5230TLE)\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bbe\u5b9a\u4e00\u4e2a**\u9ad8\u5ea6**(\u7c7b\u4f3c\u4e8e\u5206\u5c42\u56fe)\uff0c\u5e76\u89c4\u5b9a\u63a8\u9001\u64cd\u4f5c\u53ea\u80fd\u4ece**\u9ad8\u70b9\u5411\u4f4e\u70b9**\u8fdb\u884c\u3002    \n\u7279\u522b\u5730\uff0c\u6211\u4eec\u5c06\u539f\u70b9\u7684\u9ad8\u5ea6\u8bbe\u4e3an\u3002\u4ee5\u4fdd\u8bc1\u5b83\u53ef\u4ee5\u5728\u4e00\u5f00\u59cb\u6d41\u5411\u4efb\u4f55\u8282\u70b9\u3002      \n**\u91cd\u8d34\u6807\u7b7e**\uff1a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684**\u8d85\u989d\u6d41**\u56e0\u4e3a\u81ea\u8eab\u7684**\u9ad8\u5ea6\u8fc7\u4f4e**\u800c\u65e0\u6cd5\u88ab\u63a8\u9001\uff0c\u6211\u4eec\u5c31\u5c06\u5b83**\u62ac\u9ad8**\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u91cd\u8d34\u6807\u7b7e\u3002      \n\u6709\u4e86\u8fd9\u51e0\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9884\u6d41\u63a8\u8fdb\u4e86\u3002           \n\u8d70\u4e00\u904d\u7b97\u6cd5\u6d41\u7a0b:     \n\u9996\u5148\u662f\u9884\u6d41\u63a8\u8fdb\u7684bfs\uff0c\u4f5c\u7528\u662f\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\u3002      \n\u4e00\u6b65\u4e00\u6b65\u5206\u6790:     \n1.\u5148\u5c06\u6bcf\u4e00\u4e2a\u70b9\u7684\u9ad8\u5ea6\u90fd\u7f6e\u4e3aINF\u3002\n```cpp\nil bool bfs()\n{\n    queue<ll> q;\n    memset(h+1,INF,sizeof(ll)*n);\n    h[ed]=0;\n    q.push(ed);\n```\n\u7136\u540e\u6211\u4eec\u6765\u4e00\u6b21\u9006\u5411bfs\uff0c\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u4eces\u5230t\u7684\u53ef\u884c\u6d41\u3002      \n2.\u4e0e\u4e00\u822c\u7684bfs\u8fc7\u7a0b\u4e00\u6837\uff0c\u6211\u4eec\u5229\u7528\u961f\u5217\u6765\u904d\u5386\u8fd9\u5f20\u56fe\uff0c\u5e76\u4fdd\u7559\u5f53\u524d\u8282\u70b9\u3002       \n```cpp\n    while(!q.empty())\n    {\n        ll t=q.front();\n        q.pop();\n        for(re ll i=head[t];i!=-1;i=a[i].next)\n        {\n            ll v=a[i].to;\n```\n3.\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53ef\u884c\u6d41\uff0c\u6211\u4eec\u90fd\u5c06\u5176\u5165\u961f\uff0c\u5e76\u66f4\u65b0\u5176\u9ad8\u5ea6\u3002      \n\u6ce8\u610f\uff1a\u8fd9\u91cc\u8dd1\u7684\u662f\u53cd\u5411\u8fb9\uff0c\u800c\u6211\u4eec\u901a\u8fc7\u6b63\u5411\u8fb9\u6765\u5224\u65ad\u53ef\u884c\u6d41\uff0c\u6240\u4ee5\u662f```a[i^1].flow```\n```cpp\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=INF;\n}\n```\nbfs\u8fc7\u7a0b\u4ee3\u7801:\n```cpp\nil bool bfs()\n{\n    queue<ll> q;\n    memset(h+1,INF,sizeof(ll)*n);\n    h[ed]=0;\n    q.push(ed);\n    while(!q.empty())\n    {\n        ll t=q.front();\n        q.pop();\n        for(re ll i=head[t];i!=-1;i=a[i].next)\n        {\n            ll v=a[i].to;\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=INF;\n}\n```\n\u7136\u540e\u662f\u51e0\u4e2a\u5173\u952e\u64cd\u4f5c:     \n1.\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c:       \n\u6211\u4eec\u91cd\u8d34\u6807\u7b7e\u7684\u64cd\u4f5c\u5341\u5206\u7b80\u5355\uff0c\u539f\u7406\u5c31\u662f\u5c06u\u7684\u9ad8\u5ea6\u63d0\u9ad8\u5230\u6070\u597d\u80fd\u4f7f\u6d41\u91cf\u6d41\u5411\u5176\u6240\u80fd\u5230\u8fbe\u7684\u6700\u4f4e\u70b9\u3002\n```cpp\nil void relabel(int u)\n{\n    h[u]=INF;\n    for(re int i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1<h[u]))h[u]=h[v]+1;\n    }\n}\n```\n2.\u63a8\u9001\u64cd\u4f5c:     \n\u6240\u8c13\u63a8\u9001\uff0c\u5c31\u662f\u5c06\u8d85\u989d\u6d41\u5206\u644a\u5230\u5176\u4ed6\u8282\u70b9\u4e0a\u3002    \n\u6211\u4eec\u6765\u770b\u770b\u7b97\u6cd5\u8fc7\u7a0b:       \n1.\u7531\u4e8e\u63a8\u9001\u5fc5\u5b9a\u53ea\u80fd\u5230\u4e00\u4e2a\u70b9\u7684\u76f8\u90bb\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u53d6\u51fa\u5176\u6bcf\u4e00\u4e2a\u80fd\u5230\u8fbe\u7684\u70b9:      \n```cpp\nil void push(int u)\n{\n    for(re int i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n```\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8bd5\u56fe\u63a8\u9001\u81ea\u5df1\u7684\u6d41\u91cf\u4e86\u3002    \n\u63a8\u9001\u6709\u51e0\u4e2a\u6761\u4ef6\uff1a     \n1.\u9ad8\u5ea6\u8981\u8db3\u591f\u3002     \n2.\u8fb9\u4e0a\u8981\u6709\u5269\u4f59\u7684\u5bb9\u91cf\u3002    \n\u6211\u4eec\u7528e\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\u8d85\u989d\u6d41\u91cf\u3002    \n```cpp\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            ll df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n```\n\u5982\u679c\u6211\u4eec\u7684\u76ee\u6807\u70b9\u4e0d\u662f\u8d77\u70b9\u6216\u4e2d\u70b9\uff0c\u4e14\u4e0d\u518d\u4f18\u5148\u961f\u5217\u91cc\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u5165\u961f\u3002\n```cpp\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n```\n\u5982\u679c\u90fd\u63a8\u9001\u5b8c\u4e86\uff0c\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\u3002\n```cpp\n            if(!e[u])break;\n        }\n    }\n}\n```\n\u63a8\u9001\u8fc7\u7a0b:\n```cpp\nil void push(int u)\n{\n    for(re int i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            ll df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n            if(!e[u])break;\n        }\n    }\n}\n```\nhlpp\u4e3b\u8fc7\u7a0b:      \n\u6211\u4eec\u6765\u9010\u6b65\u5206\u6790\u4e00\u4e0bhlpp\u7684\u4e3b\u8fc7\u7a0b:      \n\u6211\u4eec\u9996\u5148\u5c06\u56fe\u4e2d\u70b9\u7684\u9ad8\u5ea6\u90fd\u5904\u7406\u51fa\u6765\u3002      \n```cpp\ninline ll hlpp()\n{\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n\tfor(re int i=1;i<=n;i++)if(h[i]!=INF)gap[h[i]]++;\n```\n\u7136\u540e\u6211\u4eec\u5c06s\u70b9\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\u5165\u6808\u3002       \n```cpp\n    for(re int i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(ll f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n```\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u539f\uff0c\u6c47\u70b9\u4e4b\u5916\u7684\u70b9\uff0c\u53ea\u8981\u5b83\u8fd8\u6709**\u6b8b\u4f59**\u7684**\u8d85\u989d\u6d41**(\u5373e\u6570\u7ec4\u4e2d\u7684\u503c\u4e0d\u4e3a0)\u65f6\uff0c\u5c31\u8fdb\u884c\u63a8\u9001\uff0c\u63a8\u9001\u5b8c\u540e\u5c31\u91cd\u65b0\u8d34\u6807\u7b7e\u3002     \n\u8fd9\u6837\u5199\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a```O(n^2*sqrt(m))```\u82e5\u5c06\u8d34\u6807\u7b7e\u7684\u52a8\u4f5c\u524d\u7f6e\uff08\u5c31\u50cf\u7b97\u6cd5\u5bfc\u8bba\u4e2d\u505a\u7684\u90a3\u6837\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u590d\u6742\u5ea6\u4e3a```O(n^3)```\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002   \n\u6ce8\u610f:\u8fd9\u91cc\u7684pq\u662f\u4e00\u4e2a**\u4f18\u5148\u961f\u5217**\uff0c\u6392\u5e8f\u4f9d\u636e\u662f\u6bcf\u4e00\u4e2a\u70b9\u7684\u9ad8\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u5f53\u524d\u53d6\u51fa\u7684\u70b9\u6700\u9ad8\u3002        \n\u5b9e\u73b0\u8fc7\u7a0b\uff1a\n```cpp\n    while(!pq.empty())\n    {\n        int  t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n```\nhlpp\u4e3b\u8fc7\u7a0b\u4ee3\u7801:\n```cpp\ninline ll hlpp()\n{\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n\tfor(re int i=1;i<=n;i++)if(h[i]!=INF)gap[h[i]]++;\n    for(re int i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(ll f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n    while(!pq.empty())\n    {\n\t\tint  t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n    return e[ed];\n}\n```\n\u4f7f\u7528HLPP\u6c42\u89e3\u8349\u5730\u6392\u6c34:\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<climits>\n#include<ctime>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define ll long long\n#define INF ((1ll<<31ll)-1ll)*(1<<17ll)*2ll+1ll\n#define re register\n#define il inline\nusing namespace std;\nstruct edge\n{\n    int to,next;\n\tll flow;\n}a[2000020];\nint head[10010];\nint gap[10010];\nll h[10010];\nll e[10010];\nint vis[10010];\nint cnt(0);\nint n,m,st,ed;\nstruct cmp\n{\n    il bool operator ()(int xi,int yi)const\n    {\n        return h[xi]<h[yi];\n    }\n};\npriority_queue<int,vector<int>,cmp> pq;\nil void addedge(int xi,int yi,ll fi)\n{\n    a[cnt].to=yi;\n    a[cnt].next=head[xi];\n    a[cnt].flow=fi;\n    head[xi]=cnt++;\n}\nil bool bfs()\n{\n    queue<int> q;\n    memset(h+1,INF,sizeof(ll)*n);\n    h[ed]=0;\n    q.push(ed);\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(re int i=head[t];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=INF;\n}\nil void push(int u)\n{\n    for(re int i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            ll df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n            if(!e[u])break;\n        }\n    }\n}\nil void relabel(int u)\n{\n    h[u]=INF;\n    for(re int i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1<h[u]))h[u]=h[v]+1;\n    }\n}\ninline ll hlpp()\n{\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n\tfor(re int i=1;i<=n;i++)if(h[i]!=INF)gap[h[i]]++;\n    for(re int i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(ll f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n    while(!pq.empty())\n    {\n\t\tint  t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n    return e[ed];\n}\nsigned main()\n{\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&m,&n);\n    st=1;ed=n;\n    for(re int i=1;i<=m;i++)\n    {\n        int x,y;\n\t\tll f;\n        scanf(\"%d%d%lld\",&x,&y,&f);\n        addedge(x,y,f);\n        addedge(y,x,0);\n    }\n    ll maxf=hlpp();\n    printf(\"%lld\",maxf);\n    return 0;\n}\n```",
        "postTime": 1543844165,
        "uid": 105496,
        "name": "KevinYu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "## \u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011\n### \u3010\u9898\u610f\u3011\n\u6700\u5927\u6d41\u6a21\u677f\u3002\n\n### \u3010\u5206\u6790\u3011\n\u7f51\u7edc\u6d41\u4e2d\u7684\u6700\u5927\u6d41\u3002\n\n**\u51e0\u4e2a\u5b9a\u4e49**\n\n1. **\u5bb9\u91cf**\uff1a\u6bcf\u6761\u8fb9\u4e0a\u6700\u5927\u53ef\u4ee5\u901a\u8fc7\u7684\u6c34\u6d41\uff0c\u5176\u5b9e\u5c31\u662f\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n2. **\u6d41\u91cf**\uff1a\u6bcf\u6761\u8fb9\u5b9e\u9645\u901a\u8fc7\u7684\u6c34\u6d41\uff0c\u5728\u5177\u4f53\u60c5\u51b5\u4e2d\u5c31\u662f\u6e90\u70b9\u6d41\u5230\u8fd9\u6761\u8fb9\u7684\u6c34\u7684\u6d41\u91cf\u3002\n\n\u663e\u7136\uff0c**\u6d41\u91cf$\\leq$\u5bb9\u91cf**\u3002\n\n**\u6b64\u7bc7\u9898\u89e3\u4e3b\u8981\u8bb2$Dinic$\u548c$ISAP$\u4e24\u4e2a\u7b97\u6cd5\u3002**\n\n### \u3010$Dinic$\u7b97\u6cd5\u3011\n### \u4e3b\u4f53\u601d\u60f3\n\u6211\u4eec\u6bcf\u4e00\u6b21\u9009\u53d6\u4e00\u6761\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6d41\u91cf$d$\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u8fd9\u6761\u8def\u5f84\u5df2\u7ecf\u6ca1\u6709\u7528\u4e86\uff08\u56e0\u4e3a\u5df2\u7ecf\u88ab\u6211\u4eec\u7b97\u8fc7\u4e86\uff09\uff01\n\u63a5\u7740\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb$d$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6761\u8def\u4e0a\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u7684\u5bb9\u91cf\u4e3a$0$\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u6761\u8def\u5f84\u5df2\u7ecf\u4e0d\u53ef\u80fd\u6709\u6c34\u6d41\u5230\u6c47\u70b9\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u5df2\u7ecf\u88ab\u6211\u4eec\u5207\u65ad\u4e86\u3002\n\n\u63a5\u7740\uff0c\u91cd\u590d\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\uff0c\u76f4\u5230\u6ca1\u6709\u6c34\u80fd\u4ece\u6e90\u70b9\u6d41\u5230\u6c47\u70b9\uff0c\u4e5f\u5c31\u662f\u6574\u5f20\u56fe\u90fd\u88ab\u6211\u4eec\u5207\u65ad\u4e86\u3002\n\n\u6700\u540e$\\Sigma d$\u5c31\u662f\u6700\u5927\u6d41\u3002\n\n### \u4e3b\u8981\u4ee3\u7801\n#### 1. \u5efa\u56fe\n\u5728\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u3002\u65e0\u9700\u8d58\u8ff0\u3002\n\n#### 2. \u53cd\u8fb9\n\u6211\u4eec\u6765\u770b\u4e0b\u56fe\n![fanbian](https://cdn.luogu.com.cn/upload/image_hosting/n5ric24y.png)\n\n\u5728\u6b64\u56fe\u4e2d\uff0c\u5982\u679c\u9009\u62e9$1-2$\u7684\u6d41\u91cf\u4e3a$9$\uff0c$1-4$\u7684\u6d41\u91cf\u4e3a$1$\uff0c\u90a3\u4e48\u7b54\u6848\u662f$2$\u3002\u4f46\u662f\u663e\u7136\u6b64\u56fe\u7684\u6700\u5927\u6d41\u4e3a$6$\uff08\u4e0a\u9762\u7684\u6d41\u91cf\u662f$1$\uff0c\u4e0b\u9762\u7684\u6d41\u91cf\u662f$5$\uff09\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u6837\u7684\u60c5\u51b5\uff1f\n\n\u90a3\u662f\u56e0\u4e3a\u56fe\u90fd\u662f\u5355\u5411\u8fb9\uff0c\u6ca1\u6709\u65b9\u6cd5\u8ba9\u591a\u4f59\u7684\u6d41\u91cf\u6d41\u56de\u53bb\uff0c\u9009\u62e9\u5176\u4ed6\u66f4\u597d\u7684\u8def\u3002\u6240\u4ee5\u8981\u7ed9\u4e00\u4e2a\u53cd\u6094\u7684\u673a\u4f1a\uff0c\u7ed9\u6bcf\u6761\u6b63\u8fb9\u5efa\u4e00\u6761\u53cd\u8fb9\uff0c\u8ba9\u591a\u4f59\u7684\u6d41\u91cf\u80fd\u591f\u987a\u7740\u53cd\u8fb9\u5f80\u56de\u6d41\uff0c\u9009\u62e9\u66f4\u597d\u7684\u8def\u5f84\u6d41\uff0c\u4ee5\u6b64\u8fbe\u5230\u66f4\u4f18\u7684\u65b9\u6848\u3002\n\n\u53cd\u8fb9\u7684\u521d\u59cb\u5bb9\u91cf\uff08\u6743\u503c\uff09\u4e3a$0$\uff0c\u5728\u641c\u7d22\u4e2d\u4f1a\u4fee\u6539\u5176\u5bb9\u91cf\u3002\n\n#### 3. $bfs$\u90e8\u5206\n\u6240\u4ee5\u5728$bfs$\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u6c47\u70b9$t$\u6ca1\u6709\u6df1\u5ea6\uff0c\u5c31\u8bf4\u660e\u6bcf\u4e00\u6761\u8def\u90fd\u88ab\u6211\u4eec\u641c\u7d22\u8fc7\u4e86\u6240\u6709\u7684\u8def\u5f84\uff0c\u56fe\u5df2\u7ecf\u88ab\u6211\u4eec\u6253\u65ad\u4e86\uff0c\u5c31\u53ef\u4ee5\u505c\u6b62\u641c\u7d22\u3002\n```cpp\nbool bfs()\n{\n\tmemset(dep,0,sizeof(dep)); //\u521d\u59cb\u5316\n\tdep[s] = 1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(a[u][i]>0 && dep[i]==0) //\u5982\u679c\u8fd9\u6761\u8fb9\u6ca1\u6709\u88ab\u6253\u65ad && \u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u641c\u7d22\u8fc7\n\t\t\t{\n\t\t\t\tdep[i] = dep[u]+1;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\tq.pop();\n\t}\n\treturn dep[t]!=0; //\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\n}\n```\n\n#### 4. $dfs$\u90e8\u5206\n\u901a\u8fc7\u6bcf\u6b21$dfs$\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6d41$d$\u3002\u4f46\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u50cf\u4e0a\u56fe\u90a3\u6837\u975e\u6700\u4f18\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u6211\u4eec\u628a\u6b63\u8fb9\u51cf\u53bb$d$\uff0c\u518d\u628a\u53cd\u8fb9\u52a0\u4e0a$d$\uff08\u907f\u514d\u51fa\u73b0\u6d41\u91cf\u8fc7\u591a\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5f80\u56de\u6d41\uff09\u3002\n\n\u4eba\u5f80\u9ad8\u5904\u8d70\uff0c\u6c34\u5f80\u4f4e\u5904\u6d41\u3002\u641c\u7d22\u65f6\uff0c\u8981\u4fdd\u8bc1\u6df1\u5ea6\u8fde\u7eed\uff0c\u4e0d\u7136\u6709\u53ef\u80fd\u51fa\u73b0\u56de\u6d41\u7684\u60c5\u51b5\u3002\n\n```cpp\nint dfs(int x,int flow) //flow:\u5f53\u524d\u8def\u5f84\u7684\u6d41\u91cf\n{\n\tif(x==t) //\u53ef\u4ee5\u6d41\u5230\u6c47\u70b9\n\t\treturn flow;\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[x][i]>0 && dep[i]==dep[x]+1) //\u5982\u679c\u6ca1\u6709\u65ad && \u6df1\u5ea6\u8fde\u7eed\n\t\t{\n\t\t\tint d=dfs(i,min(flow,a[x][i])); //\u8ba1\u7b97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6d41\n\t\t\tif(d>0)\n\t\t\t{\n\t\t\t\ta[x][i] -= d; //\u6b63\u8fb9\n\t\t\t\ta[i][x] += d; //\u53cd\u8fb9\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\treturn 0; //\u51fa\u73b0\u65ad\u5c42\uff0c\u5230\u4e0d\u4e86\u6c47\u70b9\u3002\n}\n```\n\n#### 5. \u6c42\u6700\u5927\u6d41\u7684\u51fd\u6570\n\u6211\u4eec\u77e5\u9053\uff0c\u6bcf\u4e00\u904d$bfs$\u90fd\u4f1a\u6839\u636e\u5148\u524d\u66f4\u65b0\u8fc7\u7684\u6b63\u8fb9\u548c\u53cd\u8fb9\uff0c\u53bb\u66f4\u65b0\u56fe\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u3002\u5728\u6b64\u6211\u4eec\u8981\u5206$2$\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n- \u5f53$dep_t>0$\u65f6\uff0c\u5c31\u8bf4\u660e\u56fe\u662f\u8054\u901a\u7684\uff0c\u4f9d\u7136\u6709\u53ef\u884c\u8def\u5f84\u6211\u4eec\u6ca1\u6709\u641c\u5230\uff0c\u56e0\u6b64\u8fdb\u884c$dfs$\u5373\u53ef\n- \u5f53$dep_t=0$\u65f6\uff0c\u8bf4\u660e\u56fe\u5df2\u7ecf\u4e0d\u8fde\u901a\uff0c\u5373\u6ca1\u6709\u53ef\u884c\u8def\u5f84\u7684\u5b58\u5728\u4e86\uff0c\u56e0\u6b64\u505c\u6b62$dfs$\u5373\u53ef\u3002\n\n```cpp\nint maxflow()\n{\n\tint ans=0;\n\twhile(bfs()) //\u56fe\u662f\u8054\u901a\u7684(\u6709\u53ef\u884c\u8def\u5f84)\n\t{\n\t\tint x=1;\n\t\twhile(x!=0)\n\t\t{\n\t\t\tx = dfs(s,0x3f3f3f3f); //\u641c\u7d22\u6240\u6709\u7684\u53ef\u884c\u8def\u5f84\u5e76\u8ba1\u7b97\u51fa\u5176\u6700\u5927\u6d41\uff0c\u5047\u8bbe\u521d\u59cb\u6d41\u91cf\u4e3a\u65e0\u9650\u5927\n\t\t\tans += x;\n\t\t}\n\t}\n\treturn ans;\n}\n```\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,m,s,t,a[5005][5005],dep[5005];\nqueue<int> q;\n\nbool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tdep[s] = 1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(a[u][i]>0 && dep[i]==0)\n\t\t\t{\n\t\t\t\tdep[i] = dep[u]+1;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\tq.pop();\n\t}\n\treturn dep[t]!=0;\n}\n\nint dfs(int x,int flow)\n{\n\tif(x==t)\n\t\treturn flow;\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[x][i]>0 && dep[i]==dep[x]+1)\n\t\t{\n\t\t\tint d=dfs(i,min(flow,a[x][i]));\n\t\t\tif(d>0)\n\t\t\t{\n\t\t\t\ta[x][i] -= d;\n\t\t\t\ta[i][x] += d;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\treturn 0;\n}\n\nint maxflow()\n{\n\tint ans=0;\n\twhile(bfs())\n\t{\n\t\tint x=1;\n\t\twhile(x!=0)\n\t\t{\n\t\t\tx = dfs(s,0x3f3f3f3f);\n\t\t\tans += x;\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tcin>>n>>m>>s>>t;\n\tfor(int i=1,x,y,z;i<=m;cin>>x>>y>>z,a[x][y]+=z,i++);\n\tcout<<maxflow()<<endl;\n\t\n\treturn 0;\n}\n```\n\n### \u3010$ISAP$\u7b97\u6cd5\u3011\n\n### \u4e3b\u8981\u601d\u60f3\n\u4e0e$Dinic$\u7c7b\u4f3c\uff0c\u6211\u4eec\u6bcf\u4e00\u6b21\u9009\u53d6\u4e00\u6761\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6d41\u91cf$d$\u3002\u4e4b\u540e\u628a\u8fd9\u6761\u8def\u6253\u65ad\u3002\n\n\u6700\u540e$\\Sigma d$\u5c31\u662f\u6700\u5927\u6d41\u3002\n\n### \u4e3b\u8981\u90e8\u5206\n#### 1. \u5efa\u56fe\n\u5728\u6b64\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u4e0e\u4e4b\u524d\u4e0d\u4e00\u6837\u7684\u524d\u5411\u661f\u89c1\u56fe\u3002\n```cpp\nint ee=1,h[10005],nex[100005<<1],to[100005<<1],val[100005<<1];\n\nvoid addedge(int x,int y,int z)\n{\n\tnex[++ee] = h[x]; //\u8fb9\u7684\u4e0b\u6807\u4ece2\u5f00\u59cb\n\tto[ee] = y;\n\tval[ee] = z;\n\th[x] = ee;\n}\n\nfor(int i=1,x,y,z;i<=m&&cin>>x>>y>>z;i++)\n{\n\taddedge(x,y,z);\n\taddedge(y,x,0); //\u53cd\u8fb9\u7684\u521d\u59cb\u5bb9\u91cf\u662f0\n}\n```\n\u4e3a\u4ec0\u4e48\u8fb9\u8981\u4ece$2$\u5f00\u59cb\uff1f\n\n\u5728$dfs$\u65f6\uff0c\u6b63\u8fb9\u4e0b\u6807\u65f6$i$\uff0c\u53cd\u8fb9\u4e0e\u6b63\u8fb9\u7684\u4e0b\u6807\u5dee$1$\uff0c\u6240\u4ee5\u7528$i$^$1$\u6765\u8868\u793a\uff0c\u56e0\u6b64\u5728\u4e00\u5f00\u59cb\u5efa\u56fe\u65f6\uff0c\u6b63\u8fb9\u548c\u53cd\u8fb9\u80af\u5b9a\u662f$2k$\u548c$2k+1$\uff0c\u5176\u4e2d$k$\u662f\u6574\u6570\u3002\n\n#### 2. \u53cd\u8fb9\n\u4e0e$Dinic$\u7b97\u6cd5\u7684\u5b8c\u5168\u76f8\u540c\uff0c\u5728\u6b64\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n#### 3. $bfs$\u90e8\u5206\n\u5728$bfs$\u4e2d\uff0c\u589e\u52a0\u4e86\u4e00\u4e2a$gap$\u6570\u7ec4\uff0c\u7528\u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u7684\u8282\u70b9\u6709\u591a\u5c11\u4e2a\uff0c\u5373$gap_i$\u8868\u793a\u6df1\u5ea6\u4e3a$i$\u7684\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u91cd\u8981\u5730\uff0c\u6211\u4eec\u8981\u4ece\u6c47\u70b9$t$\u5f80\u6e90\u70b9$s$\u8fdb\u884c$bfs$\uff0c\u539f\u56e0\u4e4b\u540e\u4f1a\u8bb2\u3002\n```cpp\nvoid bfs()\n{\n\tqueue<int> q;\n\tq.push(t);\n\tdep[t] = 1; //\u628at\u7684\u6df1\u5ea6\u8bbe\u4e3a1\n\tgap[1] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i;i=nex[i])\n\t\t\tif(!dep[to[i]]) //\u6ca1\u6709\u641c\u5230\u8fc7(\u6df1\u5ea6\u672a\u66f4\u65b0)\n\t\t\t{\n\t\t\t\tdep[to[i]] = dep[x]+1;\n\t\t\t\tgap[dep[to[i]]]++;\n\t\t\t\tq.push(to[i]);\n\t\t\t}\n\t}\n}\n```\n\n#### 4. $dfs$\u90e8\u5206\n\u6bcf\u6b21\u9009\u53d6\u4e00\u6761\u8def\u5f84\u641c\u7d22\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6d41$d$\u3002\u4f46\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u50cf\u4e0a\u56fe\u90a3\u6837\u975e\u6700\u4f18\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u6211\u4eec\u628a\u6b63\u8fb9\u51cf\u53bb$d$\uff0c\u518d\u628a\u53cd\u8fb9\u52a0\u4e0a$d$\u3002\n\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u5df2\u7ecf\u628a\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u8fb9\u641c\u7d22\u5b8c\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8282\u70b9\u6253\u65ad\uff0c\u5373\u628a$dep_x$++\u3002\n```cpp\nint dfs(int x,int flow)\n{\n\tif(x==t)\n\t{\n\t\tans += flow;\n\t\treturn flow;\n\t}\n\tint used=0; //\u5df2\u7ecf\u8ba1\u7b97\u8fc7(\u88ab\u5206\u914d\u8fc7)\u7684\u6d41\u91cf\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(dep[to[i]]==dep[x]-1 && val[i]>0) //\u56e0\u4e3a\u662f\u4ecet\u5f80s\u8fdb\u884cbfs, \u6240\u4ee5\u662fdep[x]-1\n\t\t{\n\t\t\tint d=dfs(to[i],min(val[i],flow-used));\n\t\t\tif(d)\n\t\t\t{\n\t\t\t\tval[i] -= d;\n\t\t\t\tval[i^1] += d;\n\t\t\t\tused += d;\n\t\t\t}\n\t\t\tif(used==flow)\n\t\t\t\treturn used;\n\t\t}\n    //\u4e0b\u9762\u624d\u662fISAP\u7684\u7075\u9b42\n\tgap[dep[x]]--;\n\tif(gap[dep[x]]==0) //\u5982\u679c\u5f53\u524d\u6df1\u5ea6\u4e00\u4e2a\u70b9\u90fd\u6ca1\u6709\uff0c\u8bf4\u660e\u56fe\u5df2\u7ecf\u88ab\u6253\u65ad(\u4e0d\u8fde\u901a)\u4e86\n\t\tdep[s] = n+1;\n\tdep[x]++; //\u628ax\u6240\u8fde\u7684\u8fb9\u6253\u65ad\n\tgap[dep[x]]++;\n\treturn used;\n}\n```\n\n### - \u4e3a\u4ec0\u4e48\u8981\u4ece$t$\u5230$s$\u8fdb\u884c$bfs$\uff1f\n\u6211\u4eec\u8fd8\u662f\u770b\u8fd9\u5f20\u56fe\n![bfs](https://cdn.luogu.com.cn/upload/image_hosting/n5ric24y.png)\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u597d\u4e86\u4e0a\u9762\u4e00\u6761\u8def\u5f84\u7684\u6700\u5927\u6d41\uff0c\u9700\u8981\u628a$S-1-2-3-T$\u8fd9\u6761\u8def\u5f84\u6253\u65ad\u3002\n\n\u5047\u8bbe\u6211\u4eec\u4ece$S$\u5230$T$\u8fdb\u884c$bfs$\uff0c\u5219\u4f1a\u628a$2$\u7684\u6df1\u5ea6\u53d8\u6210$4$\uff0c\u4f46\u6211\u4eec\u77e5\u9053\uff0c\u4ece$2$\u5230$1$\u8981\u8dd1\u53cd\u8fb9\u628a\u591a\u4f59\u7684\u6d41\u91cf\u6d41\u56de\u6765\u3002\u53ef\u662f\u6b64\u65f6$1$\u7684\u6df1\u5ea6\u8fd8\u662f$2$\uff0c\u4e24\u70b9\u95f4\u51fa\u73b0\u65ad\u5c42\uff0c\u591a\u4e8e\u6d41\u91cf\u65e0\u6cd5\u6d41\u56de\u3002\n\n\u4f46\u662f\u5982\u679c\u4ece$t$\u5230$s$\u8fdb\u884c$bfs$\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6b64\u7c7b\u95ee\u9898\u3002\n\n\u56e0\u6b64\uff0c\u4ece$t$\u5230$s$\u8fdb\u884c$bfs$\u6709\u5982\u4e0b\u51e0\u4e2a\u539f\u56e0\uff1a\n1. \u4fdd\u8bc1\u591a\u4f59\u6d41\u91cf\u53ef\u4ee5\u6cbf\u7740\u53cd\u8fb9\u6d41\u56de\uff08\u5982\u4e0a\u4f8b\uff09\u3002\n2. \u786e\u4fdd\u6bcf\u6b21\u53ea\u6253\u65ad\u5df2\u7ecf\u641c\u7d22\u8fc7\u7684\u4e00\u6761\u8def\u5f84\uff0c\u800c\u4e0d\u4f1a\u6253\u65ad\u5176\u4ed6\u8def\u5f84\uff08\u53ef\u4ee5\u81ea\u5df1\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff09\u3002\n\n#### 4. \u6c42\u6700\u5927\u6d41\u7684\u51fd\u6570\n\u5728$ISAP$\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c$1$\u904d$bfs$\u3002\n\n\u4e0e$Dinic$\u7b97\u6cd5\u76f8\u540c\uff0c\u6211\u4eec\u4ecd\u7136\u662f\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\u53bb\u8fdb\u884c$dfs$\u3002\u5728$dfs$\u4e2d\uff0c\u6bcf\u4e00\u6b21\u6253\u65ad\u4e00\u6761\u8def\u5f84\uff0c\u90fd\u4f1a\u628a\u5f53\u524d\u8282\u70b9\u7684\u6df1\u5ea6+$1$\uff0c\u4e5f\u5c31\u662f\u539f\u6df1\u5ea6\u7684\u8282\u70b9\u6570\u91cf\u9700\u8981-$1$\u3002\u518d\u6839\u636e \u201c\u4eba\u5f80\u9ad8\u5904\u8d70\uff0c\u6c34\u5f80\u4f4e\u5904\u6d41\u201d \u7684\u601d\u60f3\uff0c\u5982\u679c\u8be5\u6df1\u5ea6\u4e2d\u6ca1\u6709\u8282\u70b9\uff0c\u5219\u4ee3\u8868\u56fe\u4e0d\u8fde\u901a\u3002\u6b63\u597d\u5728$dfs$\u4e2d\uff0c\u6709\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a\n```cpp\nif(gap[dep[x]]==0)\n\tdep[s] = n+1;\n```\n\u6240\u4ee5\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\u7684\u6761\u4ef6\u53e5\u5c31\u662f:\n```cpp\nwhile(dep[s]<=n)\n```\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\n```cpp\n/*\nluogu P2740 \n*/ \n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n\nconst int INF = 0x7f7f7f7f;\n\nint n,m,s,t;\nint ans=0;\nint ee=1,h[10005],nex[100005<<1],to[100005<<1],val[100005<<1];\nint dep[10005],gap[10005];\n\nvoid addedge(int x,int y,int z)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\tval[ee] = z;\n\th[x] = ee;\n}\n\nvoid bfs()\n{\n\tqueue<int> q;\n\tq.push(t);\n\tdep[t] = 1;\n\tgap[1] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i;i=nex[i])\n\t\t\tif(!dep[to[i]])\n\t\t\t{\n\t\t\t\tdep[to[i]] = dep[x]+1;\n\t\t\t\tgap[dep[to[i]]]++;\n\t\t\t\tq.push(to[i]);\n\t\t\t}\n\t}\n}\n\nint dfs(int x,int flow)\n{\n\tif(x==t)\n\t{\n\t\tans += flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(dep[to[i]]==dep[x]-1 && val[i]>0)\n\t\t{\n\t\t\tint d=dfs(to[i],min(val[i],flow-used));\n\t\t\tif(d)\n\t\t\t{\n\t\t\t\tval[i] -= d;\n\t\t\t\tval[i^1] += d;\n\t\t\t\tused += d;\n\t\t\t}\n\t\t\tif(used==flow)\n\t\t\t\treturn used;\n\t\t}\n\tgap[dep[x]]--;\n\tif(gap[dep[x]]==0)\n\t\tdep[s] = n+1;\n\tdep[x]++;\n\tgap[dep[x]]++;\n\treturn used;\n}\n\nint isap()\n{\n\tbfs();\n\twhile(dep[s]<=n)\n\t\tdfs(s,INF);\n\treturn ans;\n}\n\nsigned main()\n{\n\tcin>>m>>n;\n\ts = 1;\n\tt = n;\n\tfor(int i=1,x,y,z;i<=m&&cin>>x>>y>>z;i++)\n\t{\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,0);\n\t}\n\tcout<<isap()<<endl;\n\t\n\treturn 0;\n}\n```\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff01",
        "postTime": 1578201450,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "> ### Background\n>\n> \u5728\u519c\u592b\u7ea6\u7ff0\u7684\u519c\u573a\u4e0a\uff0c\u6bcf\u9022\u4e0b\u96e8\uff0c\u8d1d\u831c\u6700\u559c\u6b22\u7684\u4e09\u53f6\u8349\u5730\u5c31\u79ef\u805a\u4e86\u4e00\u6f6d\u6c34\u3002\u8fd9\u610f\u5473\u7740\u8349\u5730\u88ab\u6c34\u6df9\u6ca1\u4e86\uff0c\u5e76\u4e14\u5c0f\u8349\u8981\u7ee7\u7eed\u751f\u957f\u8fd8\u8981\u82b1\u76f8\u5f53\u957f\u4e00\u6bb5\u65f6\u95f4\u3002\u56e0\u6b64\uff0c\u519c\u592b\u7ea6\u7ff0\u4fee\u5efa\u4e86\u4e00\u5957\u6392\u6c34\u7cfb\u7edf\u6765\u4f7f\u8d1d\u831c\u7684\u8349\u5730\u514d\u9664\u88ab\u5927\u6c34\u6df9\u6ca1\u7684\u70e6\u607c\uff08\u4e0d\u7528\u62c5\u5fc3\uff0c\u96e8\u6c34\u4f1a\u6d41\u5411\u9644\u8fd1\u7684\u4e00\u6761\u5c0f\u6eaa\uff09\u3002\u4f5c\u4e3a\u4e00\u540d\u4e00\u6d41\u7684\u6280\u5e08\uff0c\u519c\u592b\u7ea6\u7ff0\u5df2\u7ecf\u5728\u6bcf\u6761\u6392\u6c34\u6c9f\u7684\u4e00\u7aef\u5b89\u4e0a\u4e86\u63a7\u5236\u5668\uff0c\u8fd9\u6837\u4ed6\u53ef\u4ee5\u63a7\u5236\u6d41\u5165\u6392\u6c34\u6c9f\u7684\u6c34\u6d41\u91cf\u3002 \n>\n> ### Description\n>\n> \u519c\u592b\u7ea6\u7ff0\u77e5\u9053\u6bcf\u4e00\u6761\u6392\u6c34\u6c9f\u6bcf\u5206\u949f\u53ef\u4ee5\u6d41\u8fc7\u7684\u6c34\u91cf\uff0c\u548c\u6392\u6c34\u7cfb\u7edf\u7684\u51c6\u786e\u5e03\u5c40\uff08\u8d77\u70b9\u4e3a\u6c34\u6f6d\u800c\u7ec8\u70b9\u4e3a\u5c0f\u6eaa\u7684\u4e00\u5f20\u7f51\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e9b\u65f6\u5019\u4ece\u4e00\u5904\u5230\u53e6\u4e00\u5904\u4e0d\u53ea\u6709\u4e00\u6761\u6392\u6c34\u6c9f\u3002\n>\n> \u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\uff0c\u8ba1\u7b97\u4ece\u6c34\u6f6d\u6392\u6c34\u5230\u5c0f\u6eaa\u7684\u6700\u5927\u6d41\u91cf\u3002\u5bf9\u4e8e\u7ed9\u51fa\u7684\u6bcf\u6761\u6392\u6c34\u6c9f\uff0c\u96e8\u6c34\u53ea\u80fd\u6cbf\u7740\u4e00\u4e2a\u65b9\u5411\u6d41\u52a8\uff0c\u6ce8\u610f\u53ef\u80fd\u4f1a\u51fa\u73b0\u96e8\u6c34\u73af\u5f62\u6d41\u52a8\u7684\u60c5\u5f62\u3002\n>\n> ### Input\n>\n> \u7b2c1\u884c: \u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6574\u6570N (0 <= N <= 200) \u548c M (2 <= M <= 200)\u3002N\u662f\u519c\u592bJohn\u5df2\u7ecf\u6316\u597d\u7684\u6392\u6c34\u6c9f\u7684\u6570\u91cf\uff0cM\u662f\u6392\u6c34\u6c9f\u4ea4\u53c9\u70b9\u7684\u6570\u91cf\u3002\u4ea4\u70b91\u662f\u6c34\u6f6d\uff0c\u4ea4\u70b9M\u662f\u5c0f\u6eaa\u3002\n>\n> \u7b2c\u4e8c\u884c\u5230\u7b2cN+1\u884c: \u6bcf\u884c\u6709\u4e09\u4e2a\u6574\u6570\uff0cSi, Ei, \u548c Ci\u3002Si \u548c Ei (1 <= Si, Ei <= M) \u6307\u660e\u6392\u6c34\u6c9f\u4e24\u7aef\u7684\u4ea4\u70b9\uff0c\u96e8\u6c34\u4eceSi \u6d41\u5411Ei\u3002Ci (0 <= Ci <= 10,000,000)\u662f\u8fd9\u6761\u6392\u6c34\u6c9f\u7684\u6700\u5927\u5bb9\u91cf\u3002\n>\n> ### Output\n>\n> \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6392\u6c34\u7684\u6700\u5927\u6d41\u91cf\u3002\n\n\u88f8\u7684\u7f51\u7edc\u6d41,\u7b54\u6848\u5373\u4e3a\u4ece$1$\u5230$m$\u7684\u6700\u5927\u6d41\u3002\n\n\u6ce8\u610f\u770b\u6e05\u6211\u7684\u8f93\u5165,\u7a33\u7a33$AC$\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue> \n#include<iostream>\n#define clear(a,b) memset(a,b,sizeof a)\n#define R register\n\nusing namespace std;\n\nconst int gz=1500000+10;\n\ninline void in(R int &x)\n{\n\tR int f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\n\nint head[gz],depth[gz],tot,n,m,cur[gz],s,t;\n\nstruct cod{int u,v,w;}edge[gz];\n\ninline void add(R int x,R int y,R int z)\n{\n    edge[++tot].u=head[x];\n    edge[tot].v=y;\n    edge[tot].w=z;\n    head[x]=tot;\n}\n\ninline bool bfs()\n{\n\tclear(depth,0);queue<int>q;\n\tdepth[s]=1;q.push(s);\n\tfor(R int i=1;i<=n;i++)cur[i]=head[i];\n\twhile(!q.empty())\n\t{\n\t\tR int u=q.front();q.pop();\n\t\tfor(R int i=head[u];i!=-1;i=edge[i].u)\n\t\t{\n\t\t\tif(depth[edge[i].v]==0 and edge[i].w>0)\n\t\t\t{\n\t\t\t\tdepth[edge[i].v]=depth[u]+1;\n\t\t\t\tq.push(edge[i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\n\ninline int dfs(R int u,R int dist)\n{\n\tif(u==t or !dist)return dist;\n\tR int di=0,f;\n\tfor(R int i=cur[u];i!=-1;i=edge[i].u)\n\t{\n\t\tcur[u]=i;\n\t\tif(depth[edge[i].v]==depth[u]+1 and (f=dfs(edge[i].v,min(edge[i].w,dist))))\n\t\t{\n\t\t\tdi+=f;dist-=f;\n\t\t\tedge[i].w-=f;edge[i^1].w+=f;\n\t\t\tif(dist==0)break;\n\t\t}\n\t}\n\treturn di;\n}\n\ninline int dinic()\n{\n\tR int ans=0;\n\twhile(bfs())ans+=dfs(s,214748364);\n\treturn ans;\n}\n\nint main()\n{\n\tin(m),in(n);s=1,t=n;\n\tclear(head,-1);tot=-1;\n\tfor(R int i=1,x,y,z;i<=m;i++)\n\t{\n\t\tin(x),in(y),in(z);\n\t\tadd(x,y,z);add(y,x,0);\n\t}\n\tprintf(\"%d\\n\",dinic());\n}\n```",
        "postTime": 1542455907,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u8fd9\u5c31\u662f\u4e2a\u7f51\u7edc\u6d41\u7684\u6a21\u677f\u9898\u76ee\u3002\u3002\u3002\u3002\u5927\u5bb6\u4e0d\u7ba1\u662fsap\u6216\u8005dinic\u751a\u81f3EK\u90fd\u53ef\u4ee5\u8fc7\u6765\u7ec3\u624b\u3002\n\n\u90a3\u4e48\uff0c\u6211\u5c31\u628aEK\u548cDinic\u7684\u53d1\u4e00\u4e0b\uff08Sap\uff09\u8fd8\u6ca1\u5199\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nconst int maxn = 210 ;\nconst int zhf = 0xfffffff ;\nint G[maxn][maxn], pre[maxn], n, m ;\nqueue <int> q ;\nbool vis[maxn] ;\nbool bfs ( int s, int t ) {\n    memset ( vis, false, sizeof(vis) ) ;\n    memset ( pre, -1, sizeof(pre) ) ;\n    vis[s] = true ;\n    pre[s] = s ;\n    while ( !q.empty() ) q.pop() ;\n    q.push(s) ;\n    while ( !q.empty() ) {\n        int x = q.front() ;\n        q.pop() ;\n        for ( int i = 1 ; i <= n ; i ++ ) {\n            if ( i != x && !vis[i] && G[x][i] > 0 ) {\n                q.push(i) ; \n                pre[i] = x ;\n                vis[i] = true ;\n                if ( i == t ) return true ;\n            }\n        }\n    }\n    return false ;\n}\nint Max_flow ( int s, int t ) {\n    int flow = 0 ;\n    while ( bfs(s, t) ) {\n        int min_flow = zhf ;\n        for ( int u = t ; u != s ; u = pre[u] )\n            min_flow = min ( min_flow, G[u[pre]][u] ) ;\n        for ( int u = t ; u != s ; u = pre[u] ) {\n            G[u][u[pre]] += min_flow ;\n            G[u[pre]][u] -= min_flow ;\n        }\n        flow += min_flow ;\n    }\n    return flow ;\n}\nint main() {\n    int i, j, k, u, v, w ;\n    scanf ( \"%d%d\", &m, &n ) ;\n    for ( i = 1 ; i <= m ; i ++ ) {\n        scanf ( \"%d%d%d\", &u, &v, &w ) ;\n        G[u][v] += w ;\n    }\n    printf ( \"%d\\n\", Max_flow(1,n) ) ;\n    return 0 ;\n}\n```\n\n\u4e0a\u9762\u90a3\u4e2a\u662fEK\uff0c\u73b0\u5728\u662fDinic\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <queue>\nusing namespace std ;\nconst int maxn = 210 ;\nconst int zhf = 0xfffffff ;\nint G[maxn][maxn], n, m, dis[maxn] ;\nqueue <int> q ;\nbool bfs() {\n    memset ( dis, -1, sizeof(dis) ) ;\n    while ( !q.empty() ) q.pop() ;\n    dis[1] = 0 ;\n    q.push(1) ;\n    while ( !q.empty() ) {\n        int x = q.front() ;\n        q.pop() ;\n        for ( int i = 1 ; i <= n ; i ++ ) {\n            if ( dis[i] == -1 && G[x][i] > 0 ) {\n                dis[i] = dis[x]+1 ;\n                if ( i == n ) return true ;\n                q.push(i) ;\n            }\n        }\n    }\n    return false ;\n}\n\nint dfs ( int x, int val ) {\n    int i, u, rec = 0 ;\n    if ( x == n ) return val ;\n    for ( i = 1 ; i <= n ; i ++ ) {\n        if ( dis[i] == dis[x]+1 && G[x][i] > 0 && (rec = dfs(i,min(val, G[x][i]) )) ) {\n            G[x][i] -= rec ;\n            G[i][x] += rec ;\n            return rec ;\n        }\n    }\n    \n    return false ;\n}\n\nint max_flow() {\n    int flow = 0 ;\n    while ( bfs() ) {\n        flow += dfs(1,zhf) ;\n    }\n    return flow ;\n}\n\nint main() {\n    int i, j, k, u, v, w ;\n    scanf ( \"%d%d\", &m, &n ) ;\n    for ( i = 1 ; i <= m ; i ++ ) {\n        scanf ( \"%d%d%d\", &u, &v, &w ) ;\n        G[u][v] += w ;\n    }\n    printf ( \"%d\\n\", max_flow() ) ;\n    return 0 ;\n}\n```",
        "postTime": 1486732298,
        "uid": 17941,
        "name": "Vasily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u6211\u7528\u4e86dinic\u7b97\u6cd5\u6765\u505a\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct node\n{\n\tint x,y,c,next,other;//\u8fb9 \n}a[2110000];int len,last[510],st,ed;\nint n,f,d;\ninline void ins(int x,int y,int c)//\u5efa\u7acb\u8fb9 \n{\n\tint k1,k2;//\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u9519\u8bef\uff0c\u6211\u5c31\u7528k1,k2\u6765\u8bb0\u5f55\u4e24\u6761\u8fb9 \n\tlen++;k1=len;\n\ta[len].x=x;a[len].y=y;a[len].c=c;\n\ta[len].next=last[x];last[x]=len;\n\t\n\t//\u53cd\u5411\u8fb9\u7ed9\u6211\u4eec\u53cd\u6094\u7684\u673a\u4f1a \n\tlen++;k2=len;\n\ta[len].x=y;a[len].y=x;a[len].c=0;//\u53cd\u5411\u8fb9\u4e00\u5f00\u59cb\u6d41\u91cf\u4e3a0\n\ta[len].next=last[y];last[y]=len;\n\t\n\ta[k1].other=k2;//\u8bb0\u5f55\u53cd\u5411\u8fb9 \n\ta[k2].other=k1;\n}\nint head,tail,h[510],list[21000];//h\u8bb0\u5f55\u5c42\u6b21\uff0c\u526a\u679d \ninline bool bt_h()//\u5efa\u7acb\u7f51\u7edc\u6d41\u7684\u5c42\u6b21 \n{\n\tmemset(h,0,sizeof(h));h[st]=1;//\u8d77\u70b9\u7684\u5c42\u6b21\u4e3a1 \n\tlist[1]=st;head=1;tail=2;\n\twhile(head!=tail)\n\t{\n\t\tint x=list[head];\n\t\tfor(int k=last[x];k;k=a[k].next)//\u8bbf\u95ee\u4eb2\u670b\u597d\u53cb \n\t\t{\n\t\t\tint y=a[k].y;\n\t\t\tif(a[k].c>0 && h[y]==0)//\u5982\u679c\u662f\u6709\u6d41\u91cf\u7684\u8fb9\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u6807\u5c42\u6b21 \n\t\t\t{\n\t\t\t\th[y]=h[x]+1;//\u8bb0\u4e3a\u4e0b\u4e00\u5c42 \n\t\t\t\tlist[tail]=y;tail++;\n\t\t\t}\n\t\t}\n\t\thead++;\n\t}\n\tif(h[ed]>0) return true;//\u5982\u679c\u53ef\u4ee5\u5230\u8fbe\u6700\u540e\u7684\u70b9 \n\treturn false;\n}\nint findflow(int x,int f)//\u9012\u5f52\uff0cx\u8868\u793a\u5f53\u524d\u7684\u70b9\uff0cf\u4e3a\u5e26\u7684\u6d41\u91cf \n{\n\tif(x==ed) return f;//\u5982\u679c\u5230\u8fbe\u4e86\u7ec8\u70b9 \n\tint s=0,t;//s\u8bb0\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u6d41\u91cf \n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\t//\u5982\u679c\u8fb9\u6709\u6d41\u91cf\n\t\t//\u5982\u679c\u4e3a\u4e0b\u4e00\u5c42\uff08\u526a\u679d\uff09\n\t\t//\u5982\u679cs\u4e0d\u8d85\u8fc7\u80fd\u5e26\u4e0a\u7684\u6d41\u91cf \n\t\tif(a[k].c>0 && h[y]==h[x]+1 && s<f)\n\t\t{\n\t\t\ts+=(t=findflow(y,min(a[k].c,f-s)));//\u5f80\u4e0b\u641c\u7d22 \n\t\t\ta[k].c-=t;a[a[k].other].c+=t;\n\t\t\t//\u4ece\u8fd9\u4e00\u6761\u8fb9\u901a\u8fc7\u4e86\uff0c\u5c31\u8981\u51cf\u53bbt\n\t\t\t//\u73b0\u5728\u53cd\u5411\u8fb9\u5c31\u80fd\u8d77\u5230\u4f5c\u7528\u4e86----\u7ed9\u4e86\u4e00\u4e2a\u53cd\u6094\u7684\u673a\u4f1a \n\t\t}\n\t}\n\tif(s==0) h[x]=0;//\u5982\u679c\u8fd9\u4e00\u4e2a\u70b9\u5230\u8fbe\u4e0d\u4e86\u7ec8\u70b9\uff0c\u5c31\u628a\u8fd9\u4e2a\u5c42\u6b21\u8bbe\u7f6e\u4e3a0, \n\treturn s;//\u8fd4\u8fd8 \n}\nint ff[110],dd[110];\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&m,&n);\n\tst=1;ed=n;//\u8d77\u70b9\u548c\u7ec8\u70b9 \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,c;scanf(\"%d%d%d\",&x,&y,&c);\n\t\tins(x,y,c);\n\t}\n\tint s=0;\n\twhile(bt_h()==true)//\u6bcf\u6b21\u5efa\u7acb\u5c42\u6b21 \n\t{\n\t\t//\u5982\u679c\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9 \n\t\ts+=findflow(st,999999999);//\u5728\u7b2c\u4e00\u4e2a\u70b9\u662f\u53ef\u4ee5\u5e26\u65e0\u9650\u7684\u6d41\u91cf\u7684 \n\t\t//\u8fd9\u91cc\u7528while\u662f\u56e0\u4e3a\u4e00\u6b21\u53ea\u80fd\u627e\u4e00\u6761\u8def\uff0c\u96be\u4ee5\u627e\u5b8c\u6574\u4e2a\u56fe\uff0c\u6240\u4ee5\u8981\u6bcf\u6b21\u90fd\u627e \n\t}\n\tprintf(\"%d\\n\",s);//\u8f93\u51fa \n\treturn 0;\n}\n```",
        "postTime": 1526363221,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u6b64\u9898\u8003\u70b9\u4e3a\u7f51\u7edc\u6d41\u4e4b**\u6700\u5927\u6d41**\n\n\u89e3\u51b3\u6b64\u7c7b\u95ee\u9898\u6709\u56db\u79cd\u65b9\u6cd5\uff1a\n\n------------\n**1\u00b7Ford\u2014\u2014Fulkerson\u7b97\u6cd5\uff1b**\n------------\n------------\n**\u5b9e\u8d28\u5c31\u662f\u968f\u4fbf\u627e\u4e00\u6761\u589e\u5149\u8def\u8fdb\u884c\u589e\u5e7f\u3002**\n\n\u5176**\u65f6\u95f4\u590d\u6742\u5ea6**\u4e3aO\uff08MV\uff09\uff0c\u5176\u4e2dM\u4e3a\u8fb9\u6570\uff0cV\u4e3a\u6700\u5927\u6d41\u91cf\u3002\n\n------------\n\n\n**2\u00b7Edmonds\u2014\u2014Karp\u7b97\u6cd5\uff1b**\n------------\n\n\n------------\n**\u5229\u7528BFS\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u6765\u589e\u5e7f\u3002**\n\n\u6bcf\u6b21\u627e\u5305\u542b\u5f27\u6700\u5c11\u7684\u589e\u5e7f\u8def\u8fdb\u884c\u589e\u5e7f\u3002\n\n\u5176**\u65f6\u95f4\u590d\u6742\u5ea6**\u4e3aO\uff08NM^2\uff09\n\n------------\n\n\n\n**3\u00b7Dinic\u7b97\u6cd5\uff1b**\n------------\n\n\n------------\n**\u57fa\u672c\u601d\u8def\uff1a**\n\n\u4e00\u76f4\u7528BFS\u6784\u9020**\u5c42\u6b21\u56fe**\uff0c\u7136\u540e\u4e00\u76f4\u7528**\u963b\u585e\u6d41**\u6765\u589e\u5e7f\u3002\n\n\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08MN^2\uff09\n\n\u6ce8\uff1a\n\n1.\u5c42\u6b21\u56fe\uff1a\u6709\u8def\u5f84\u6df1\u5ea6\u7684\u56fe\u3002\n\n2.\u963b\u585e\u6d41\uff1a\u4e0d\u8003\u8651\u53cd\u5411\u6d41\u65f6\u7684**\u6781\u5927\u6d41**\u3002\n\n\n------------\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nint m,n,G[205][205]={0},s=1,Ans=0;\nint v[205]={0},dis[205]={0};\nint q[200005]={0};\nint BFS()\n{\n\tint left=1,right=1;\n\tmemset(q,0,sizeof(q));\n\tmemset(dis,-1,sizeof(dis));\n\tmemset(v,0,sizeof(v));\n\tdis[s]=0;v[s]=1;q[1]=s;\n\twhile(left<=right)\n\t{\n\t\tif(q[left]==n)return 1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(G[q[left]][i]>0&&!v[i])\n\t\t\t{\n\t\t\t\tdis[i]=dis[q[left]]+1;v[i]=1;\n\t\t\t\tq[++right]=i;\n\t\t\t}\n\t\t}\n\t\tleft++;\n\t}\n\treturn 0;\n}\nint Min(int a,int b)\n{\n\tif(a>b)return b;\n\telse return a;\n}\nint DFS(int x,int num)\n{\n\tint i,r=0,d=0;\n\tif(x==n)return num;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(G[x][i]>0&&dis[i]==dis[x]+1)\n\t\t{\n\t\t\td=DFS(i,Min(num,G[x][i]));\n\t\t\tif(d==0) dis[i]=0;\n\t\t\tG[x][i]-=d;G[i][x]+=d;\n\t\t\tr+=d;num-=d;\n\t\t\tif(num==0)return r;\n\t\t}\n\t}\n\treturn r;\n}\nint main()\n{\n\tint x,y,z;\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tG[x][y]+=z;\n\t}\n\twhile(BFS())Ans+=DFS(s,1<<30);\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```\n------------\n\n**4\u00b7SUP\u7b97\u6cd5\uff1b**\n------------\n------------\n**Gap[i]:**\u6240\u6709\u8282\u70b9\u4e2ddis[j]==i\u7684\u4e2a\u6570\uff08\u5176\u4e2dj\u2208[1,n]\uff09\n\n**Dis[i]:**\u8282\u70b9i\u7684\u6df1\u5ea6\n\n------------------------\n**\u6ce8\u610f\uff1a\u5141\u8bb8\u5f27\u5fc5\u987b\u6ee1\u8db3Dis[i]==Dis[j]+1\u4e14i\u4e0ej\u6709\u8def\u5f84**\n\n------------\n**\u7b97\u6cd5\u6b65\u9aa4\uff1a**\n\n\u4e00\uff1a**\u521d\u59cb\u5316**Dis[i]=0,Gap[0]=n;\n\n\u4e8c\uff1a\u4e0d\u65ad\u5ef6\u53ef\u884c\u5f27\u627e\u589e\u5e7f\u8def\u589e\u5e7f;\n\n\u4e09\uff1a\u904d\u5386\u5b8c\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u4e3a\u4f7f\u4e0b\u6b21\u6709\u8def\u53ef\u8d70\uff0c\u5fc5\u987b\u5bf9\u5f53\u524d\u8282\u70b9\u7684\u6df1\u5ea6\u66f4\u65b0\uff1a**Dis[i]=min{Dis[j]|(i,j)}**;\n\n\u56db\uff1a\u5f53Dis[\u6e90\u70b9]>=\u603b\u7ed3\u70b9\u4e2a\u6570n\u662f\uff0c\u7b97\u6cd5\u7ed3\u675f.\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int INF=1e9;\nint map[201][201]={0};\nint Gap[201]={0},dis[201]={0};\nint n,m,Ans=0;\nint DFS(int x,int num)\n{\n\tif(x==n)return num;\n\tint t=0,s=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(map[x][i]>0&&dis[x]==dis[i]+1)\n\t\t{\n\t\t\ts=DFS(i,min(num,map[x][i]));\n\t\t\tnum-=s;t+=s;\n\t\t\tmap[x][i]-=s;map[i][x]+=s;\n\t\t\tif(dis[0]==n+2||!num)return t;\n\t\t}\n\t}\n\tif(!(--Gap[dis[x]]))dis[1]=n+2;Gap[++dis[x]]++;\n\treturn t;\n}\nint main()\n{\n\tint x,y,z;\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tmap[x][y]+=z;\n\t}\n\tGap[0]=n;\n\twhile(dis[1]<n)Ans+=DFS(1,INF);\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1549810061,
        "uid": 122599,
        "name": "\u3010\u5929\u671d\u3011MILK",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "~~\u9996\u5148\uff0c\u8981\u5199\u8fd9\u9053\u9898\u4f60\u5fc5\u987b\u662f\u4e2a\u849f\u84bb\uff08\u50cf\u6211\u4e00\u6837\uff09~~\n\n\u5ba1\u9898\uff0c\u53d1\u73b0\u8fd9\u662f\u4e00\u9053~~\u5f88\u7b80\u5355~~\u7684\u7f51\u7edc\u6d41\u9898\u76ee\n\n\u4e8e\u662f\u4f60\u628a\u7f51\u7edc\u6d41\u7684\u677f\u5b50\u4ea4\u4e86\u4e0a\u53bb\uff0c\u7136\u540e\u53d1\u73b0\u81ea\u5df1WA\u5730\u4e00\u58f0\u54ed\u4e86\n\n\u7136\u540e\u9677\u5165\u6c89\u601d\u4e4b\u4e2d\uff0c\u53d1\u73b0\u4f60\u5e76\u6ca1\u6709\u7d2f\u52a0\u9053\u8def\n\n\u7a0d\u4f5c\u4fee\u6539\uff0c\u4f60\u53c8AC\u4e86\n\n\u4ee5\u4e0b\u662fbfs\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5f88\u77ed\uff0c\u5927\u6982\u4e94\u5341\u591a\u884c\u5427\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=202;\n\nint n,m,pre[N],p[N],dis[N][N],res;\n\nint bfs(int s,int t)\n{\n\tqueue<int>q;\tmemset(p,0,sizeof(p));\n\tp[s]=10000000*N;\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\tq.pop();\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(!p[i]&&dis[u][i])\n\t\t\t{\n\t\t\t\tp[i]=min(p[u],dis[u][i]);\n\t\t\t\tpre[i]=u;\tq.push(i);\n\t\t\t\tif(i==t) return p[i];\n\t\t\t}\n\t}\n\treturn 0;\n}\nint main()\n{\n\tint mi;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tdis[a][b]+=c;//\u56e0\u4e3a\u6709\u4e9b\u8def\u5f84\u6709\u591a\u6b21\u51fa\u73b0\uff0c\u6240\u4ee5\u8981\u7d2f\u52a0\u8d77\u6765\uff0c\u6211\u4e4b\u524d\u56e0\u4e3a\u8fd9\u91cc\u4e00\u76f4WA\n\t}\n\twhile(1)\n\t{\n\t\tmi=bfs(1,m);\n\t\tif(!mi) break;\n\t\tres+=mi;\n\t\tfor(int i=m;i!=1;i=pre[i])\n\t\t\tdis[pre[i]][i]-=mi,\n\t\t\tdis[i][pre[i]]+=mi;\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```",
        "postTime": 1546650035,
        "uid": 93862,
        "name": "\u4e03\u559c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u88f8\u7684\u589e\u5e7f\u8def\u7b97\u6cd5\u3002\n\n\u5c06\u56fe\u7684\u5bb9\u91cf\u521d\u59cb\u5316\uff0c\u6ce8\u610f\uff1a\u8bfb\u5165\u8fb9\u7684\u4fe1\u606f\u65f6\uff0c\u5fc5\u987b\u53ea\u80fd\u5355\u5411\u8bfb\u5165\uff0c\u8fd9\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u589e\u52a0\u6b8b\u4f59\u7f51\u7edc\u7684\u53cd\u5411\u5f27\u3002\n\n\u5bf9\u56fe\u6240\u6709\u7684\u6d41\u91cf\u5747\u521d\u59cb\u5316\u4e3a0\u3002\n\n\u9996\u5148\u6211\u4eec\u5e94\u8be5\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u5bf9\u4e8e\u5bfb\u627e\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\u7b2c\u4e00\u6b65\uff1a\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5e7f\u5ea6\u641c\u7d22\u6216\u8005\u6df1\u5ea6\u641c\u7d22\u6765\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u5176\u4e2d\u4e00\u6761\u8def\u5f84\u3002\u5e76\u7528Pre\u6570\u7ec4\u8bb0\u5f55\u524d\u9a71\u3002\n\n\u7b2c\u4e8c\u6b65\uff1a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c42\u51fa\u6b64\u8def\u5f84\u7684\u6b8b\u4f59\u7f51\u7edc\u7684\u6700\u5927\u74f6\u9888\uff0c\u5176\u5b9e\u5176\u4e2d\u4e00\u6761\u8fb9\u6b8b\u4f59\u7f51\u7edc\u7684\u74f6\u9888\u503c\u5c31\u662f\u8def\u5f84\u7684\u9650\u5236\u5bb9\u91cf-\u5f53\u524d\u7684\u6d41\u91cf\u3002\n\n\u7b2c\u4e09\u6b65\uff1a\u5c06\u6574\u6761\u8def\u5f84\u589e\u52a0\u6d41\u91cf\u3002\u4f46\u662f\u5728\u589e\u52a0\u6d41\u91cf\u7684\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u53cd\u5411\u6dfb\u52a0\u5176\u5bb9\u91cf\uff0c\u6240\u589e\u52a0\u7684\u503c\u4e3a\u7b2c\u4e8c\u6b65\u6c42\u5f97\u7684\u74f6\u9888\u503c\u3002\u4e3a\u4f55\u8981\u589e\u52a0\u53cd\u5411\u5f27\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u5176\u6b63\u8fb9\u6d41\u91cf\u65f6\u5c31\u76f8\u5f53\u4e8e\u51cf\u5c11\u4e86\u5176\u6b63\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\u800c\u53cd\u5411\u7684\u5bb9\u91cf\u6070\u597d\u4f1a\u589e\u52a0\u6b63\u8fb9\u7684\u5bb9\u91cf\u7684\u51cf\u5c11\u503c\uff0c\u4f8b\u5982\uff0c\u5f20\u4e09\u6b20\u4e86\u674e\u56db10\u5143\uff0c\u800c\u674e\u56db\u4e0d\u8ba9\u5f20\u4e09\u8fd810\u5143\uff0c\u76f8\u5f53\u4e8e\u5f20\u4e09\u589e\u52a0\u4e8610\u5143\uff0c\u6b64\u4e0e\u539f\u7406\u76f8\u4f3c\u3002\u6240\u4ee5\uff0c\u5229\u7528\u53cd\u5411\u5f27\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u66f4\u591a\u7684\u589e\u5e7f\u8def\uff0c\u6c42\u51fa\u66f4\u5927\u7684\u6d41\u91cf\u3002\n\n\u901a\u8fc7\u4ee5\u4e0a\u4e09\u6b65\uff0c\u6211\u4eec\u5c31\u5bfb\u627e\u5230\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u3002\n\n\u6309\u7167\u6b64\u7b97\u6cd5\u5faa\u73af\u4e0b\u53bb\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u6761\u589e\u5e7f\u8def\uff0c\u4e14\u6bcf\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\u7684\u540c\u65f6\uff0c\u5176\u4e24\u70b9\u95f4\u7684\u7f51\u7edc\u6d41\u91cf\u4f1a\u589e\u52a0\u3002\u8fd9\u6837\uff0c\u82e5\u627e\u4e0d\u5230\u4efb\u610f\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5219\u5bb9\u6613\u8bc1\u660e\u5f53\u524d\u7684\u7f51\u7edc\u6d41\u91cf\u6700\u5927\u4ece\u800c\u6c42\u51fa\u6700\u5927\u7f51\u7edc\u6d41\u3002\n\n\u5bf9\u4e8e\u6c42\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6d41\u91cf\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u60f3\u5230\u5c06\u7ec8\u70b9\u6c47\u805a\u7684\u6d41\u91cf\u6c42\u548c\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u4ece\u8d77\u70b9\u6d41\u51fa\u53bb\u7684\u6d41\u91cf\u4e4b\u548c\u662f\u7b49\u4e8e\u7ec8\u70b9\u6c47\u805a\u7684\u6d41\u91cf\u7684\u4e4b\u548c\uff0c\u5229\u7528\u8fd9\u6837\u7684\u6027\u8d28\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u628a\u5bf9\u8d77\u70b9\u6d41\u51fa\u53bb\u7684\u6d41\u91cf\u6765\u6c42\u548c\u4ece\u800c\u6c42\u51fa\u6700\u5927\u7f51\u7edc\u6d41\u3002\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint f[210][210],c[210][210],pre[210];\nbool flag=true,b[210];\nint n,m,h,t,que[200*200+10],ans;\nint main(){\n    cin>>m>>n;\n    for(int i=0;i<m;i++){\n        int u,v,w;\n        cin>>u>>v>>w;\n        c[u][v]=w;\n    //\u8f93\u5165\u8fb9\uff0c\u6ce8\u610f\uff0c\u53ea\u80fd\u5355\u5411\u8bfb\u5165\u3002 \n    }\n    flag=true;\n    //\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6807\u8bb0\uff0c\u82e5\u5176\u503c\u4e3a\u5047\uff0c\u5219\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u3002 \n    while(flag){\n        flag=false;\n        memset(b,false,sizeof(b));\n        h=0;\n        t=1;\n        que[1]=1;\n        b[1]=true;\n        //\u7b2c\u4e00\u6b65\uff0c\u5bfb\u627e\u4e00\u6761\u8def\u5f84\u4f5c\u4e3a\u589e\u5e7f\u8def\u3002 \n        while(h<t){\n            h++;\n            int p=que[h];\n            for(int i=1;i<=n;i++)\n                if(!b[i] && f[p][i]<c[p][i]){\n                    que[++t]=i;\n                    pre[i]=p;\n                    b[i]=true;\n                    if(i==n){\n                        flag=true;\n             //\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5c06flag\u8bbe\u4e3a\u771f\u3002 \n                        break;\n                    }\n                }\n            if(flag)\n                break;\n        }\n        if(!flag)\n            break;\n        //\u6ca1\u627e\u5230\u589e\u5e7f\u8def\uff0c\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u3002 \n        //\u6c42\u74f6\u9888\u7684\u503c\u3002 \n        int k=n,pj=0xfffffff;\n        while(pre[k]){\n            int u=pre[k];\n            pj=min(pj,c[u][k]-f[u][k]);\n            k=u;\n        }\n        k=n;\n        //\u6dfb\u52a0\u6b8b\u4f59\u7f51\u7edc\u6d41\u91cf\u548c\u53cd\u5411\u5f27\u3002 \n        while(pre[k]){\n            int u=pre[k];\n            f[u][k]+=pj;\n            c[k][u]+=pj;\n            k=u;\n        }\n    }\n    //\u5bf9\u6d41\u51fa\u6d41\u91cf\u6c42\u548c\u3002\n    for(int i=2;i<=n;i++){\n        ans+=f[1][i];\n    }\n    cout<<ans<<endl;\n}\n```\n\n\u8f6c\u81ea\u672c\u4eba\u535a\u5ba2\uff1a<http://blog.csdn.net/u013245432/article/details/77269549>\n\n\u8981\u6ce8\u610f\u7684\u662f\uff1a\u672c\u9898\u9898\u9762\n``` \n\u6709\u4e9b\u65f6\u5019\u4ece\u4e00\u5904\u5230\u53e6\u4e00\u5904\u4e0d\u53ea\u6709\u4e00\u6761\u6392\u6c34\u6c9f\n```\n\u56e0\u6b64\u672c\u9898\u7684\n```cpp\nc[u][v]=w;\n//\u8981\u6539\u4e3a\nc[u][v]+=w;\n```",
        "postTime": 1504403234,
        "uid": 6303,
        "name": "feicx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u6700\u5927\u7f51\u7edc\u6d41\u6a21\u677f\u9898\uff0cdinic\u6a21\u677f\u5c31\u80fdAC\u3002\n\n\n\u6211\u89c1\u5404dalao\u4ee3\u7801\u592a\u9ad8\u7ea7\uff0c\u6211\u6709\u70b9\u770b\u4e0d\u61c2\uff0c\u4e8e\u662f\u5199\u4e00\u7bc7\u9898\u89e3\u7ed9\u548c\u6211\u4e00\u6837\u7684\u849f\u84bb\u770b\uff1b\n\n\n\u8fd9\u6709\u4e00\u535a\u5ba2\uff0c\u6709\u52a9\u4e8e\u849f\u84bb\u4eec\u7406\u89e3dinic\n\n\nhttps://comzyh.com/blog/archives/568/\n\n###\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nconst int maxn=10000+10;\nconst int inf=0x7f7f7f7f;\nstruct nod\n{\n    int next,to,w;\n}edge[maxn];\nint head[maxn],lev[maxn]/*\u8ddd\u6e90\u70b9\u8ddd\u79bb,\u5206\u5c42\u56fe */,n,m,k=1,ans;    \nvoid add(int u,int v,int val)\n{\n    edge[++k].next=head[u];\n    edge[k].to=v;\n    edge[k].w=val;\n    head[u]=k;\n}\nbool bfs(int s,int t)\n{\n    queue<int>q;//BFS\u961f\u5217\n    memset(lev,-1,sizeof(lev));\n    q.push(s);lev[s]=0;\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=edge[i].next)\n        {\n            if(lev[edge[i].to]==-1 && edge[i].w)\n            {\n                lev[edge[i].to]=lev[now]+1;\n                if(edge[i].to==t) return true;\n                q.push(edge[i].to);\n            }\n        }\n    }\n    return false;\n}\n//dfs\u4ee3\u8868\u4e00\u6b21\u589e\u5e7f,\u51fd\u6570\u8fd4\u56de\u672c\u6b21\u589e\u5e7f\u7684\u6d41\u91cf,\u8fd4\u56de0\u8868\u793a\u65e0\u6cd5\u589e\u5e7f \nint dfs(int x,int maxf)\n{\n    if(x==n)return maxf;\n    int use=maxf;//use\u662f\u6e90\u70b9\u5230\u73b0\u5728\u6700\u7a84\u7684(\u5269\u4f59\u6d41\u91cf\u6700\u5c0f)\u7684\u8fb9\u7684\u5269\u4f59\u6d41\u91cf\n    for(int i=head[x];i;i=edge[i].next)\n    {\n        if(lev[edge[i].to]==lev[x]+1/*\u662f\u5206\u5c42\u56fe\u7684\u4e0b\u4e00\u5c42*/ && use && edge[i].w>0)\n        {\n            int flow=dfs(edge[i].to,min(use,edge[i].w));\n            if(!flow) lev[edge[i].to]=-1;//\u4e0d\u80fd\u5230\u6c47\u70b9\n            use-=flow;\n            edge[i].w-=flow;\n            edge[i^1].w+=flow;\n        }\n    }\n    return maxf-use;\n}\nvoid dinic(int s,int t)\n{\n    while(bfs(s,t))//\u8981\u4e0d\u505c\u5730\u5efa\u7acb\u5206\u5c42\u56fe,\u5982\u679cBFS\u4e0d\u5230\u6c47\u70b9\u624d\u7ed3\u675f\n    ans+=dfs(s,inf);//\u4e00\u6b21BFS\u8981\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def,\u76f4\u5230\u627e\u4e0d\u5230\u4e3a\u6b62\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w);add(v,u,0);\n    }\n    dinic(1,n);printf(\"%d\\n\",ans);\n}\n//\u6253\u5b8c\u6536\u5de5\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u6307\u6b63\n```",
        "postTime": 1503725112,
        "uid": 25709,
        "name": "SNiFe",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "#\u7f51\u7edc\u6d41\u57fa\u672c\u7b97\u6cd5\uff0c\u5229\u7528\u5e7f\u641c\u641c\u7d22\u589e\u5e7f\u8def\uff0c\u5f53\u6ca1\u6709\u589e\u5e7f\u8def\u65f6\u5373\u53ef\u7edf\u8ba1\u5176\u6700\u5927\u6d41\u91cf\uff0c\u5373\u4e3a\u6240\u6c42\n\n##\u901a\u8fc7\u90bb\u63a5\u77e9\u9635\u5b58\u53d6\u56fe\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <iostream>\n#define REP(i, N, M) for(register int i = N; i <= M; i++)//for\u5faa\u73af\u6052\u5b9a\u4e49\n\nconst int MAXN = 200 + 10;\nconst int inf = 0x3f3f3f3f;//\u5b9a\u4e49inf\u6700\u5927\u503c\uff0c\u4ee5\u4fbf\u6bd4\u8f83\u6c42\u51fa\u6700\u5c0f\u503c\n\nusing namespace std;\n\nqueue<int>Q;//\u961f\u5217\u4ee5\u8fdb\u884c\u5e7f\u641c\n\nint Capacity[MAXN][MAXN]/*\u5b58\u53d6\u4e24\u70b9\u95f4\u7684\u5bb9\u91cf*/, Flow[MAXN][MAXN]/*\u5b58\u53d6\u4e24\u70b9\u95f4\u7684\u6d41\u91cf*/, Previous[MAXN];//\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u94fe\u63a5\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9 \nbool SignQ[MAXN];//\u6807\u8bb0\u8fdb\u884c\u5224\u91cd\nint N, M, Bottlenneck, cnt;\n\ninline void IN();//\u8f93\u5165\u51fd\u6570\n\ninline bool Search_Augmenting_Path();//\u6c42\u53d6\u589e\u5e7f\u8def\u662f\u5426\u5b58\u5728\n\ninline void Search_Augmenting_Path_Bottlenneck();//\u6c42\u53d6\u5f53\u524d\u589e\u5e7f\u8def\u4e0a\u6700\u5927\u7684\u6d41\u91cf\uff0c\u5373\u6b8b\u5b58\u7f51\u7edc\u4e0b\u7684\u6700\u5927\u6d41\u91cf\uff0c\u4e5f\u5373\u5269\u4f59\u7684\u5bb9\u91cf\u6700\u5c0f\u503c\n\ninline void Calc_Flow();//\u5bf9\u5f53\u524d\u589e\u5e7f\u8def\u4e0a\u7684\u6d41\u91cf\u8fdb\u884c\u7edf\u8ba1\n\ninline void OUT();//\u8f93\u51fa\n\nint main()\n{\n//    freopen(\"ditch.in\", \"r\", stdin);\n//    freopen(\"ditch.out\", \"w\", stdout);\n\n    IN();\n\n    while(Search_Augmenting_Path())//\u641c\u7d22\u589e\u5e7f\u8def\u662f\u5426\u5b58\u5728\uff0c\u5f53\u589e\u5e7f\u8def\u5b58\u5728\u65f6\uff0c\u5373\u6709\u4e00\u6761\u8def\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6d41\u91cf\u53ef\u4ee5\u5927\u4e8e0\uff0c\u6b64\u65f6\u8fd8\u53ef\u4ee5\u589e\u52a0\u6d41\u91cf;\n    {\n        Search_Augmenting_Path_Bottlenneck();\n        Calc_Flow();\n    }\n\n    OUT();\n\n    return 0;\n}\n\ninline void IN()\n{\n    cin >> N >> M;\n    REP(i, 1, N)\n    {\n        int Node_u, Node_v, Node_Capacity;\n        cin >> Node_u >> Node_v >> Node_Capacity;\n        Capacity[Node_u][Node_v] += Node_Capacity;//\u8bfb\u53d6\u4eceNode_u\u5230Node_v\u8def\u5f84\u4e0a\u7684\u5bb9\u91cf **\u6ce8\u610f\uff0c\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\u53ef\u80fd\u6709\u591a\u6761\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u89c6\u4e3a\u540c\u4e00\u6761\u8def\u5f84\uff0c\u5176\u5bb9\u91cf\u4e3a\u4ece\u8be5\u70b9\u5230\u53e6\u4e00\u4e2a\u5e97\u7684\u6240\u6709\u5bb9\u91cf\u4e4b\u548c**\n\n    }\n}\n\ninline bool Search_Augmenting_Path()\n{\n    while(!Q.empty())//\u6e05\u7a7a\u961f\u5217\n        Q.pop();\n    memset(SignQ, 0, sizeof(SignQ));//\u6e05\u7a7a\u6807\u8bb0\n        \n    Q.push(1);//\u5165\u961f\uff0c\u5f00\u59cb\u5e7f\u641c\n    SignQ[1] = true;\n    while(!Q.empty())\n    {\n        int Node = Q.front();//\u53d6\u51fa\u961f\u9996\n        REP(i, 1, M)\n        {\n            if(!SignQ[i] && Capacity[Node][i] > Flow[Node][i])\n            {//\u679a\u4e3e\u6240\u6709\u7ed3\u70b9\uff0c\u5f53\u5bb9\u91cf\u5927\u4e8e\u5f53\u524d\u6d41\u91cf\u65f6\uff0c\u53ef\u4ee5\u6c47\u5165\u6d41\u91cf\n                Q.push(i);\n                SignQ[i] = true;//\u5c06\u5f53\u524d\u8282\u70b9\u5165\u961f\uff0c\u6807\u8bb0\u8bbe\u4e3atrue\n                Previous[i] = Node;//\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5728\u540e\u9762\u7edf\u8ba1\u5f53\u524d\u589e\u5e7f\u8def\u7684\u6d41\u91cf\u65f6\u9700\u8981\u7528\u5230\n                if(i == M)//\u5f53i\u7b49\u4e8eM\u65f6\uff0c\u5373\u627e\u5230\u4e86\u6c47\u70b9\uff0c\u4e3a\u4e00\u6761\u589e\u5e7f\u8def\n                    return true;\n            }\n\n        }\n        Q.pop();\n    }\n    return false;//\u5426\u5219\u8fd4\u56defalse\uff0c\u6b64\u65f6\u6ca1\u6709\u589e\u5e7f\u8def\u4e86\uff0c\u9700\u8981\u5bf9\u6700\u7ec8\u7b54\u6848\u8fdb\u884c\u7edf\u8ba1\n}\n\ninline void Search_Augmenting_Path_Bottlenneck()\n{\n    Bottlenneck = inf;//\u5c06\u5f53\u524d\u589e\u5e7f\u8def\u7684\u6700\u5927\u53ef\u884c\u6d41\u91cf\u8bbe\u4e3ainf\uff0c\u5373\u53ef\u4ee5\u4ece\u8fd9\u6761\u589e\u5e7f\u8def\u6c47\u5165\u6e90\u70b9\u7684\u6d41\u91cf\n    int Last_Node = M;\n    while(Previous[Last_Node]){//\u5f53\u5f53\u524d\u7684\u7ed3\u70b9\u4e0d\u4e3a\u6e90\u70b9\u65f6\uff0c\u7ee7\u7eed\u6267\u884c\n        Bottlenneck = min(Capacity[Previous[Last_Node]][Last_Node] - Flow[Previous[Last_Node]][Last_Node], Bottlenneck); \n                //\u66f4\u65b0\u5f53\u524d\u7684\u6700\u5927\u53ef\u884c\u6d41\u91cf\uff0c\u5373\u6700\u5c0f\u7684\u5269\u4f59\u5bb9\u91cf\n        Last_Node = Previous[Last_Node];//\u5c06\u5f53\u524d\u8282\u70b9\u8df3\u81f3\u4e0a\u4e00\u8282\u70b9\uff0c\u7ee7\u7eed\u66f4\u65b0Bottlenneck\n    }\n}\n\ninline void Calc_Flow()\n{\n    int Last_Node = M;\n    while(Previous[Last_Node])//\u5f53\u5f53\u524d\u8282\u70b9\u4e0d\u4e3a\u6e90\u70b9\u65f6\n    {\n        Flow[Previous[Last_Node]][Last_Node] += Bottlenneck;\n        Capacity[Last_Node][Previous[Last_Node]] += Bottlenneck;\n        Last_Node = Previous[Last_Node];\n//\u8fd9\u91cc\u5f88\u91cd\u8981\uff01\uff01\u5f53\u524d\u589e\u5e7f\u8def\u4e0a\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u9700\u8981\u52a0\u4e0a\u6b64\u65f6\u7684\u6700\u5927\u6d41\u91cf\uff0c\u540c\u65f6\u4e3a\u4e86\u8fd4\u56de\u4e0a\u4e00\u8282\u70b9\uff0c\u9700\u8981\u5c06\u6b64\u8def\u5f84\u7684\u53cd\u5411\u8def\u5f84\u5bb9\u91cf\u52a0\u4e0a\u5f53\u524d\u6700\u5927\u6d41\u91cf\uff0c\u8fd9\u4f7f\u5f97\u4e0b\u4e00\u6b21\u53ef\u4ee5\u8fd4\u56de\u6b64\u8282\u70b9\u4ee5\u5bfb\u627e\u4e0b\u4e00\u6761\u8def\n    }\n}\n\ninline void OUT()\n{\n    REP(i, 2, M)\n    {\n        cnt += Flow[1][i];\n    }\n    cout << cnt;\n}\n```",
        "postTime": 1502791219,
        "uid": 25860,
        "name": "flashy_yali",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "##\u7f51\u7edc\u6d41\n\n\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u9898\uff0c\u770b\u9898\u5c31\u77e5\u9053\u4ece1\u70b9\u6d41\u5230m\u70b9\u7684\u6700\u5927\u6d41\u3002\n\nDinic\u5176\u5b9e\u662f\u5728FF\u4e0a\u7684\u4f18\u5316\uff0c\u627e\u589e\u5e7f\u8def\u65f6\u6bcf\u6b21\u627e\u6b8b\u4f59\u7f51\u7edc\u4e0a\u4e0b\u4e00**\u5c42\u6b21**\u7684\u70b9\n\n\u5c42\u6b21(level\u6570\u7ec4)\u7528bfs\u521d\u59cb\u5316\u5373\u53ef\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,map[300][300],lev[1000],q[100000];\nint bfs(int s,int t)\n{\n    memset(lev,0,sizeof(lev));\n    int he=0,ta=1;\n    q[0]=s;\n    lev[s]=1;\n    while (he<ta)\n    {\n        int u=q[he];\n        if (u==t) return 1;\n        for (int v=1;v<=n;v++)\n            if (map[u][v]&&!lev[v])\n            {\n                lev[v]=lev[u]+1;\n                q[ta++]=v;\n            }\n        he++;\n    }\n    return 0;\n}\nint dfs(int u,int t,int f)\n{\n    if (u==t) return f;\n    //int fl=0;\n    for (int v=1;v<=n;v++)\n    {\n        if (map[u][v]&&lev[v]==lev[u]+1)\n        {\n            int d=dfs(v,t,min(f,map[u][v]));\n            if (!d) continue;\n            map[u][v]-=d;\n            map[v][u]+=d;\n            return d;\n        }\n    }\n    return 0;\n}\nint main()\n{\n    int m;\n    memset(map,0,sizeof(map));\n    scanf(\"%d%d\",&m,&n);\n    for (int i=1;i<=m;i++)\n    {\n        int u,v,s;\n        scanf(\"%d%d%d\",&u,&v,&s); \n        map[u][v]+=s;\n    }\n    int ans=0,MAXN=1<<29;\n    while (bfs(1,n)) \n        ans+=dfs(1,n,MAXN);\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1500354553,
        "uid": 29450,
        "name": "huangjunqi1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "#solution\n\n\u8fd9\u662f\u4e00\u9053\u7f51\u8def\u6d41\u7684\u88f8\u9898\uff0cDinic\u5c31\u53ef\u4ee5Accepted\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\nint en,head[1000000],vet[1000000],Next[1000000],f[1000000],n,m,level[1000000],que[1000000],qhead,qtail;\nconst int INF=2000000000;\nvoid addedge(int u,int v,int val){\n    vet[++en]=v;\n    Next[en]=head[u];\n    f[en]=val;\n    head[u]=en;\n}\nbool bfs(int s,int t){\n    memset(level,0,sizeof(level));\n    level[1]=1;\n    qhead=0;\n    qtail=1;\n    que[0]=1;\n    while(qhead<qtail){\n        int u=que[qhead++];\n        if(u==t)\n            return true;\n        for(int i=head[u];i;i=Next[i])\n            if(!level[vet[i]]&&f[i]){\n                level[vet[i]]=level[u]+1;\n                que[qtail++]=vet[i];\n            }\n    }\n    return false;\n}\nint dfs(int u,int maxf,int t){\n    if(u==t)\n        return maxf;\n    int ret=0;\n    for(int i=head[u];i;i=Next[i]){\n        int v=vet[i],flow=f[i];\n        if(flow&&level[v]==level[u]+1){\n            int Min=min(maxf-ret,flow);\n            flow=dfs(v,Min,t);\n            f[i]-=flow;\n            f[((i-1)^1)+1]+=flow;\n            ret+=flow;\n            if(ret==maxf)\n                return ret;\n        }\n    }\n    return ret;\n}\nint Dinic(int s,int t){\n    int ans=0;\n    while(bfs(s,t))\n        ans+=dfs(s,INF,t);\n    return ans;\n}\nint main(){\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        addedge(x,y,z);\n        addedge(y,x,0);\n    }\n    printf(\"%d\\n\",Dinic(1,n));\n    return 0;\n}\n```",
        "postTime": 1500354316,
        "uid": 30451,
        "name": "czymkx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u9898\u89e3 by ylx\n\n\u88f8\u9898\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<string>\nusing namespace std;\nint n,m;\nint mi;\nint i;\nint l,r;\nint x,y,z;\nint c[210][210];//\u5bb9\u91cf \nint f[210][210];//\u76ee\u524d\u6392\u6c34\u7ba1\u5185\u6c34\u91cf \nint q[210];//bfs\u7684\u65f6\u5019\u6807\u8bb0\u7528\u7684\nint flag; \nstruct node\n{\n    int p;//\u4e0a\u4e00\u4e2a\u70b9\u5728\u961f\u5217\u4e2d\u7684\u7f16\u53f7 \n    int d;//\u70b9\u7684\u7f16\u53f7    \n}a[20000]; \nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        c[x][y]+=z;//x\u2192y\u4e0d\u6b62\u4e00\u6761\u6392\u6c34\u6c9f\uff0c\u6240\u4ee5\u52a0\u4e0a\u53bb \n    }\n    flag=1;//\u6807\u8bb0\u6709\u6ca1\u6709\u589e\u5e7f\u8def\u5f84\n    while (flag)//\u53cd\u590d\u627e\u76f4\u5230\u627e\u4e0d\u5230\u589e\u5e7f\u8def \n    {\n        flag=0;//\u5148\u6807\u8bb0\u4e3a\u6ca1\u6709\u589e\u5e7f\u8def \n        for (i=1;i<=m;i++) q[i]=1;//\u628a\u6240\u6709\u7684\u70b9\u6807\u8bb0\u4e3a\u6ca1\u8d70\u8fc7 \n        l=0;r=1;\n        a[1].p=0;//\u8d77\u70b9\u5165\u961f \n        a[1].d=1;\n        while (l<r)\n        {\n            l++;\n            x=a[l].d;//\u961f\u9996\u51fa\u961f \n            for (i=1;i<=m;i++) \n            if (q[i]&&(c[x][i]>f[x][i]||f[i][x]>0))//\u6ca1\u8d70\u8fc7  \u800c\u4e14 \u5bb9\u91cf\u5927\u4e8e\u76ee\u524d\u6c34\u91cf \u6216\u8005  \u6709\u6c34\u4ecei\u6d41\u5230x \n            {\n                q[i]=0;//\u5165\u961f \n                r++;\n                a[r].d=i;\n                a[r].p=l;\n                //cout<<i<<\" \";\n                if (i==m)//\u6240\u4ee5\u641c\u5b8c\u4e86 \n                {\n                    //puts(\"23333\");\n                    flag=1;//\u6807\u8bb0 \n                    break;//\u9000\u51fa \n                } \n            } \n            //cout<<endl;\n            if (flag==1) break;//\u8fd9\u4e2a\u5faa\u73af\u4e5f\u8981\u9000\u51fa \n        }\n        //puts(\"23333\");\n        if (flag==0) break;//\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u4e86 \n        mi=1000000001;\n        i=r; \n        while (a[i].p)\n        {\n            //puts(\"23333\");\n            x=a[i].d;//\u81ea\u5df1\u7f16\u53f7 \n            y=a[a[i].p].d;//\u4e0a\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7 \n            if (c[y][x]>f[y][x]&&c[y][x]-f[y][x]<mi)mi=c[y][x]-f[y][x];\n            if (f[x][y]>0&&f[x][y]<mi) mi=f[x][y];\n            i=a[i].p;\n        } \n        i=r;\n        while (a[i].p)\n        {\n            x=a[i].d;//\u81ea\u5df1\u7f16\u53f7 \n            y=a[a[i].p].d;//\u4e0a\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7 \n            if (c[y][x]>f[y][x]) f[y][x]+=mi;\n            if (f[x][y]>0) f[x][y]-=mi;\n            i=a[i].p;\n        } \n    } \n    int ans=0;\n    /*for (i=1;i<=n;i++)\n    {\n        for (int j=1;j<=n;j++) printf(\"%d \",f[i][j]);\n        cout<<endl;\n    }*/\n    for (i=1;i<=n;i++) ans+=f[1][i];//\u7edf\u8ba1\u8f93\u51fa\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1498616078,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u53d1\u9898\u89e3\u7684\u5927\u795e\u5168\u90fd\u7528C++,\u6211\u53ea\u80fd\u53d1\u4e2aPascal......\n\n\n\n\n\n\n```cpp\nvar\n  a,pre,now,son,v,opp:array[-1..10000]of longint;  //a\uff1a\u8bb0\u5f55\u5f53\u524d\u70b9\u5230\u6e90\u70b9\u6240\u7ecf\u8fc7\u7684\u6700\u5c11\u70b9\u6570\uff0cpre\uff1a\u8bb0\u5f55\u5f53\u524d\u5217\u7684\u7236\u4eb2\u8282\u70b9\u4e0a\u4e00\u6b21\u5f53\u7236\u4eb2\u7684\u5217\u7684\u5e8f\u53f7\uff0c\n                                                   //now\uff1a\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u5f53\u524d\u5f53\u7236\u4eb2\u7684\u6700\u5217\u7684\u5e8f\u53f7\uff0cson\uff1a\u8bb0\u5f55\u5f53\u524d\u5217\u7684\u5b50\u8282\u70b9\uff0cv\uff1a\u8bb0\u5f55\u5f53\u524d\u7ba1\u9053\u7684\u6d41\u91cf\uff0c\n                                                   //opp\uff1a\u8bb0\u5f55\u53cd\u5411\u8fb9\u7684\u5217\u7684\u5e8f\u53f7\n  h:array[-1..100000]of longint;                   //h\uff1a\u8bb0\u5f55\u961f\u5217\u5143\u7d20\n  tot,m,n,ans,aa,b,c,i:longint;                    //m\uff1a\u8fb9\u6570\uff0cn:\u70b9\u6570\uff0cans\uff1a\u8bb0\u5f55\u603b\u6d41\u91cf\uff0caa\uff0cb\uff0cc\uff1a\u4e00\u6761\u7ba1\u5b50\u7684\u5f00\u59cb\u70b9\uff0c\u7ed3\u675f\u70b9\uff0c\u6d41\u91cf\nprocedure cc(a,b,c:longint);                       //\u505a\u6307\u7236\u94fe\nbegin\n  inc(tot);\n  pre[tot]:=now[a];\n  now[a]:=tot;\n  son[tot]:=b;\n  v[tot]:=c;\nend;\nfunction bfs:boolean;\nvar\n  t,w,p:longint;\nbegin\n  fillchar(a,sizeof(a),255);\n  t:=0;w:=1;                 //\u961f\u5217,t:\u5934\u6307\u9488,w:\u5c3e\u6307\u9488\n  h[1]:=1;                   //h:\u961f\u5217\u5143\u7d20\n  a[1]:=1;                   //a\u6570\u7ec4\u8868\u793a\u4ece\u539f\u70b9\u5230\u5f53\u524d\u70b9\u6240\u8981\u7ecf\u8fc7\u7684\u6700\u5c11\u70b9\u6570\n  repeat\n    inc(t);                  //\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u641c\u7d22\u6bcf\u4e00\u4e2a\u6570\n    p:=now[h[t]];            //\u53d6\u73b0\u5728\u7684\u6570\u7684\u6700\u540e\u4e00\u6b21\u5f53\u7236\u4eb2\u7684\u90a3\u4e00\u5217\uff0c\u8d4b\u503c\u4e3ap\uff08\u5373\u4ee5\u5f53\u524d\u6570\u4e3a\u7236\u4eb2\u8282\u70b9\uff09\n    while p>0 do             //\u53ea\u8981t\u8fd9\u4e2a\u6570\u8fd8\u6709\u5f53\u7236\u4eb2\u7684\u5217\uff0c\u5c31\u7ee7\u7eed\u641c\u7d22\n    begin\n      if (a[son[p]]=-1)and(v[p]<>0) then   //\u5982\u679c\u4ece\u7236\u4eb2\u70b9\u5230\u5b50\u8282\u70b9\u6709\u8def\uff0c\u5e76\u4e14\u5b50\u8282\u70b9\u8fd8\u6ca1\u8d4b\u8fc7\u503c\n      begin\n        a[son[p]]:=a[h[t]]+1;              //\u5230\u5b50\u8282\u70b9\u7ecf\u8fc7\u7684\u70b9\u6570\u7b49\u4e8e\u5230\u7236\u8282\u70b9\u7ecf\u8fc7\u7684\u70b9\u6570+1\n        if son[p]=n then                   //\u5982\u679c\u8d70\u5230\u4e86\u6c47\u70b9\n          exit(true);                      //\u8868\u793a\u8fd9\u6761\u8def\u53ef\u4ee5\u8d70\uff0c\u9000\u51fa\uff0c\u7528find\u51fd\u6570\u4f7fans\u52a0\u4e0a\u8fd9\u6761\u8def\u53ef\u4ee5\u901a\u8fc7\u7684\u6c34\u91cf\n        inc(w);                            //\u5982\u679c\u8fd8\u6ca1\u6709\u8d70\u5230\u6c47\u70b9\uff0c\n        h[w]:=son[p];                      //\u5c06\u8fd9\u4e2a\u5b50\u8282\u70b9\u52a0\u5165\u961f\u5217\n      end;\n      p:=pre[p];                           //\u5411\u4e0a\u4e00\u4e2at\u5f53\u7236\u4eb2\u7684\u5217\u641c\u7d22\n    end;\n  until t=w;                               //\u4e00\u76f4\u641c\u7d22\u5230\u6ca1\u6709\u65b0\u70b9\uff0c\u5373\u5df2\u7ecf\u4ece\u5934\u641c\u7d22\u5230\u5c3e\u4e86\uff0c\u5c31\u9000\u51fa\n  exit(false);        //\u5982\u679c\u5c06\u6240\u6709\u7684\u70b9\u90fd\u641c\u7d22\u5b8c\u4e86\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\u53ef\u4ee5\u4ece\u6e90\u70b9\u8d70\u5230\u6c47\u70b9\u7684\u8def\uff0c\u8868\u793a\u6240\u6709\u7684\u8def\u90fd\u5df2\u7ecf\u8d70\u8fc7\u4e86\uff0c\u5373ans\u4e0d\u4f1a\u518d\u589e\u52a0\u4e86\uff0c\u5c31\u9000\u51fa\nend;\nfunction min(a,b:longint):Longint;        //\u53d6\u6700\u5c0f\u503c\nbegin\n  if a<b then\n    exit(a);\n  exit(b);\nend;\nfunction find(po,f:longint):longint;  //\u6dfb\u52a0\u53cd\u5411\u8fb9\uff08\u53d6\u6d88\u6d41\uff09\nvar\n  ans,p,k:longint;\nbegin\n   ans:=0;\n   if po=n then      //\u5982\u679c\u5f53\u524d\u70b9\u4e3a\u6c47\u70b9\uff0c\u5373\u5df2\u7ecf\u4ece\u6e90\u70b9\u8d70\u5230\u4e86\u6c47\u70b9\uff0c\u5c31\u9000\u51fa\uff0cans\u52a0\u4e0a\u8fd9\u6761\u8def\u53ef\u4ee5\u901a\u8fc7\u7684\u6c34\u91cf\n     exit(f);\n   p:=now[po];       //\u4ee5\u5f53\u524d\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\uff0c\u641c\u7d22\n   while p>0 do      //\u53ea\u8981\u5f53\u524d\u70b9\u8fd8\u6709\u5f53\u7236\u4eb2\u7684\u884c\uff0c\u5c31\u8fd0\u884c\n   begin\n     if (v[p]>0)and(a[po]<a[son[p]]) then     //\u5982\u679c\u7236\u4eb2\u8282\u70b9\u548c\u5b50\u8282\u70b9\u95f4\u6709\u8def\u53ef\u4ee5\u8d70\uff0c\u5e76\u4e14\u5b50\u8282\u70b9\u5230\u6e90\u70b9\u7ecf\u8fc7\u7684\u70b9\u6570\u5927\u4e8e\u7236\u4eb2\u8282\u70b9\u5230\u6e90\u70b9\u7684\u70b9\u6570\n     begin\n       k:=find(son[p],min(f,v[p]));     //\u4ee5\u5b50\u8282\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\uff0c\u5411\u4e0b\u641c\u7d22\uff0c\u53d6\u8fd9\u4e00\u70b9\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u901a\u8fc7\u7684\u6c34\u91cf\u548c\u4e24\u70b9\u95f4\u7ba1\u5b50\u5355\u4f4d\u65f6\u95f4\u5185\u6d41\u91cf\u7684\u6700\u5c0f\u503c\uff0c\n                                        //\u5373\u6c42\u51fa\u4e24\u70b9\u95f4\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u6700\u5927\u6d41\u91cf\u662f\u591a\u5c11\n       dec(v[p],k);                     //\u5c06\u4e24\u70b9\u95f4\u7ba1\u5b50\u7684\u6d41\u91cf\u51cf\u53bb\u8fd9\u4e24\u70b9\u95f4\u603b\u6d41\u91cf\u7684\u6700\u5927\u503c\uff0c\u5373\u8868\u793a\u8fd9\u4e24\u70b9\u95f4\u7684\u7ba1\u5b50\u8fd8\u53ef\u4ee5\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u6d41\u591a\u5c11\u7684\u6c34\n       inc(v[opp[p]],k);                //\u5f53\u524d\u8fb9\u7684\u53cd\u5411\u8fb9\u52a0\u4e0a\u65b0\u7684\u6d41\u91cf\n       inc(ans,k);                      //\u603b\u6d41\u91cfans\u52a0\u4e0a\u8fd9\u4e00\u4e2a\u7ba1\u5b50\u53ef\u4ee5\u6d41\u7684\u6d41\u91cf\uff08\u52a0\u4e0a\u65b0\u7b97\u51fa\u7684\u6d41\u91cf\uff09\n       dec(f,k);                        //\u8fd9\u4e00\u70b9\u5355\u4f4d\u65f6\u95f4\u5185\u6c47\u5165\u7684\u6c34\u91cf\u51cf\u5c11\n       if f=0 then                      //\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u6c34\u5168\u90e8\u90fd\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u6d41\u5b8c\u4e86\uff0c\u5c31\u9000\u51fa\uff0c\u5373\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u6ca1\u7528\u4e86\n         break;\n     end;\n     p:=pre[p];                         //\u7ee7\u7eed\u5411\u4e0a\u627e\n   end;\n   if p=0 then                          //\u5982\u679c\u5f53\u524d\u70b9\u5f53\u7236\u4eb2\u8282\u70b9\u7684\u5217\u90fd\u627e\u5b8c\u4e86\n     a[po]:=-1;                         //\u6807\u8bb0\u5f53\u524d\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u4e3a-1\uff0c\u4ee5\u540e\u5c31\u4e0d\u4f1a\u518d\u627e\u8fd9\u4e2a\u70b9\u4e86\n   exit(ans);                           //\u5c06\u8fd9\u4e00\u6b21\u65b0\u627e\u51fa\u7684\u6d41\u91cf\u8fd4\u56de\nend;\nbegin\n  tot:=0;\n  readln(m,n);\n  for i:=1 to m do\n  begin\n    readln(aa,b,c);\n    cc(aa,b,c);                         //\u6b63\u53cd\u4e24\u8fb9\u505a\u6307\u7236\u94fe\n    cc(b,aa,0);\n    opp[tot-1]:=tot;                    //opp\uff1a\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u53cd\u5411\u8fb9        \n    opp[tot]:=tot-1;\n  end;\n  ans:=0;\n  while bfs do                          //\u5c06\u6bcf\u4e2a\u70b9\u90fd\u627e\u4e00\u904d\n     inc(ans,find(1,maxlongint));       //ans\u52a0\u4e0a\u8fd4\u56de\u7684\u65b0\u627e\u51fa\u7684\u6d41\u91cf\n  writeln(ans);                         //\u8f93\u51fa\nend.\n```",
        "postTime": 1484624952,
        "uid": 21636,
        "name": "3269224138\u5218",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u7136\u800c\u697c\u4e0b\u7684\u5927\u795e\u7528\u7684\u90fd\u662f\u9ad8\u6548\u7684dinic \u548c sap \u7b97\u6cd5\n\n\u849f\u84bb\u8868\u793a\u9ed8\u9ed8\u5730\u4e3e\u51faEK\u7b97\u6cd5\n\n\u5f53\u7136\u4f18\u8bfb\u662f\u6ca1\u4ec0\u4e48\u5fc5\u8981\u7684\n\n\u8fd8\u6709\u6c42\u5927\u795e\u5e2e\u5fd9\u770b\u770b\u8ba8\u8bba\u91cc\u9762\u7684FF\u7b97\u6cd5\u4e3a\u4ec0\u4e48\u4f1awa\u4e00\u4e2a\u70b9\u2026\u2026\n\n\u4e11\u964b\u7684\u4ee3\u7801\n\n[codec]\n\n```cpp\n//Edmonds-Karp algorithm\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define INF 10000000\n#define maxn 1000\n#define maxm 10000\nusing namespace std;\nstruct edge{\n    int from,to,cap,flow,pre;\n}e[2*maxm+1];\nqueue<int> q;\nint h[maxn+1],etop,pre[maxn+1],a[maxn+1];\nint get_num()\n{\n    char c;\n    bool flag=false;\n    int num=0;\n    while((c=getchar())==' '||c=='\\n'||c=='r');\n    if(c=='-') flag=true;\n    else num=c-'0';\n    while(isdigit(c=getchar())) num=num*10+c-'0';\n    return (flag?-1:1)*num;\n}\nvoid addedge(int from,int to,int cap)\n{\n    etop++;\n    e[etop].from=from;\n    e[etop].to=to;\n    e[etop].cap=cap;\n    e[etop].flow=0;\n    e[etop].pre=h[from];\n    h[from]=etop;\n}\nint main()\n{\n    int n,m;etop=0;\n    m=get_num();\n    n=get_num();\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,c;\n        u=get_num();\n        v=get_num();\n        c=get_num();\n        addedge(u,v,c);\n        addedge(v,u,0);\n    }\n    int s,t;\n    //s=get_num();t=get_num();\n    s=1;t=n;\n    int flow=0;\n    while(1)\n    {\n        memset(a,0,sizeof(a));\n        while(!q.empty()) q.pop();\n        q.push(s);a[s]=INF;pre[s]=0;\n        while(!q.empty())\n        {\n            int u=q.front();q.pop();\n            for(int i=h[u];i!=0;i=e[i].pre)\n            {\n                int v=e[i].to;\n                if(!a[v]&&e[i].cap>e[i].flow)\n                {\n                    a[v]=min(a[u],e[i].cap-e[i].flow);\n                    pre[v]=i;\n                    q.push(v);\n                }\n            }\n            if(a[t]) break;\n        }\n        if(!a[t]) break;\n        for(int u=t;u!=s;u=e[pre[u]].from)\n        {\n            e[pre[u]].flow+=a[t];\n            e[(pre[u]-1)^1+1].flow-=a[t];\n        }\n        flow+=a[t];\n    }\n    printf(\"%d\\n\",flow);\n    return 0;\n}\n[\\codec]\n```",
        "postTime": 1476074464,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u7adf\u7136\u90fd\u662fsap\u7b97\u6cd5= =Dinic\u7b97\u6cd5\u4e0eEdmondsKarp\u7b97\u6cd5\u90fd\u53bb\u54ea\u4e86= =\n\n\u8fd9\u91cc\u7bc7\u5e45\u592a\u5c0f\u76f4\u63a5\u4e0a\u4ee3\u7801\u3002\u3002\n\n\u5b89\u5229\u4e00\u4e0b\u81ea\u5df1\u7684blog\uff0c\u5047\u5982\u8981\u6709\u4eba\u60f3\u5b66\u53ef\u4ee5\u8fdb\u53bb\u770b\u770b\u3002\u3002[\u8fdc\u822a\u4f11\u606f\u6808-\u56fe\u7684\u6700\u5927\u6d41\u7b97\u6cd5](http://www.yhzq-blog.cc/\u56fe\u7684\u6700\u5927\u6d41\u7b97\u6cd5)\n\n\n    \n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nint ans[300],g[300][300],m,n,x,y,z;\nbool vis[300];\nbool bfs(int s,int e)\n{\n    int now;\n    queue<int>que;\n    memset(ans,-1,sizeof ans);\n    memset(vis,0,sizeof vis);\n    ans[s]=s;\n    vis[s]=1;\n    que.push(s);\n    while(!que.empty())\n    {\n        now=que.front();\n        que.pop();\n        for (int i=1;i<=n;i++)\n            if (g[now][i]>0 && !vis[i])\n            {\n                vis[i]=1;\n                ans[i]=now;\n                if (i==e)\n                    return true;\n                que.push(i);\n            }\n    }\n    return false;\n}\nint EdmondsKarp(int s,int e)\n{\n    int flow=0;\n    while(bfs(s,e))\n    {\n        int dis=0x3f3f3f3f;\n        for (int i=e;i!=s;i=ans[i])\n            if (dis>g[ans[i]][i])\n                dis=g[ans[i]][i];\n        for (int i=e;i!=s;i=ans[i])\n        {\n            g[ans[i]][i]-=dis;\n            g[i][ans[i]]+=dis;\n        }\n        flow+=dis;\n    }\n    return flow;\n}\nmain()\n{\n    scanf(\"%d%d\",&m,&n);\n    {\n        memset(g,0,sizeof(g));\n        for (int i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&x,&y,&z);\n            g[x][y]+=z;\n        }\n        printf(\"%d\\n\",EdmondsKarp(1,n));\n    }\n}\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#define min(x,y) ((x<y)?(x):(y))\nusing namespace std;\nint dis[300],g[300][300],m,n,x,y,z;\nint bfs(int s,int e)\n{\n    int now;\n    queue<int>que;\n    memset(dis,-1,sizeof dis);\n    dis[s]=1;\n    que.push(s);\n    while(!que.empty())\n    {\n        now=que.front();\n        que.pop();\n        for (int i=1;i<=n;i++)\n            if (g[now][i]>0 && dis[i]<0)\n            {\n                dis[i]=dis[now]+1;\n                que.push(i);\n            }\n    }\n    if (dis[e]>0) return 1;\n    return 0;\n}\nint finds(int x,int low)\n{\n    int a;\n    if (x==n) return low;\n    for (int i=1;i<=n;i++)\n        if (g[x][i]>0 && dis[x]+1==dis[i] && (a=finds(i,min(low,g[x][i]))))\n        {\n            g[x][i]-=a;\n            g[i][x]+=a;\n            return a;\n        }\n    return 0;\n}\nint Dinic(int s,int e)\n{\n    int flow=0;\n    while(bfs(s,e))\n    {\n        while(x=finds(s,0x3f3f3f3f))\n            flow+=x;\n    }\n    return flow;\n}\nmain()\n{\n    scanf(\"%d%d\",&m,&n);\n    {\n        memset(g,0,sizeof(g));\n        for (int i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&x,&y,&z);\n            g[x][y]+=z;\n        }\n        printf(\"%d\\n\",Dinic(1,n));\n    }\n}\n```",
        "postTime": 1474110154,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "SAP\u5927\u6cd5\u597d\uff01\n\nc++\u5927\u6cd5\u597d\uff01\n\n\u90bb\u63a5\u77e9\u9635\u5927\u6cd5\u597d\uff01\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cstdlib>\n#define rep(i,a,b) for(int i = (a); i <= (b); i++)\n#define per(i,a,b) for(int i = (a); i >= (b); i--)\n#define INF 0x3f3f3f3f\n#define M 1010\nusing namespace std;\ntypedef long long ll;\n//---------------------------------------------head--------------------------------------------------\nint n,m,a[M][M],pre[M],d[M],ans;\nbool b[M];\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    rep(i,1,m)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        a[x][y] += z;\n    }\n    int now = 1,MIN = INF;\n    while (d[1] < n)\n    {\n        bool get = 0;\n        rep(i,1,n) if (d[i] == d[now] - 1 && a[now][i] > 0)\n        {\n            get = 1;\n            if (a[now][i] < MIN) MIN = a[now][i];\n            pre[i] = now;\n            now = i;\n            if (now != n) break;\n            ans += MIN;\n            while (now != 1)\n            {\n                int temp = now;\n                now = pre[now];\n                a[now][temp] -= MIN;\n                a[temp][now] += MIN;\n            }\n            MIN = INF;\n            break;\n        }\n        if (get) continue;\n        int Min = n - 1;\n        rep(i,1,n) if (a[now][i] > 0 && d[i] < Min) Min = d[i];\n        d[now] = Min + 1;\n        if (now != 1) now = pre[now];\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1473150493,
        "uid": 14083,
        "name": "jeffreyzfq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u6781\u5176\u7b80\u4fbf\u7684\u6df1\u641c\u7248isap\uff0c\u4ee3\u7801\u957f\u5ea6\u4ec5\u4e3a38\u884c\u800c\u4e14\u8fd8\u6709\u538b\u7f29\u7a7a\u95f4\uff0c\u52a0\u5165\u4e86gap\u4f18\u5316\u63d0\u9ad8\u6548\u7387\uff0c\u7b80\u6d01\u660e\u4e86\uff0c\u503c\u5f97\u53c2\u8003\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m,maxflow,c[210][210],gap[210],dis[210];\nint dfs_isap(int h,int flow)\n{\n    if(h==m)return flow;\n    int res=flow,i,mi;\n    for(i=1;i<=m;i++)\n        if(c[h][i]>0&&dis[h]==dis[i]+1)\n        {\n            mi=dfs_isap(i,min(res,c[h][i]));\n            c[h][i]-=mi;\n            c[i][h]+=mi;\n            res-=mi;\n            if(!res)return flow;\n        }\n    gap[dis[h]]--;\n    if(!gap[dis[h]])dis[1]=m;\n    dis[h]++;\n    gap[dis[h]]++;\n    return flow-res;\n}\nint main()\n{\n    int i,x,y,w;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&w);\n        c[x][y]+=w;\n    }\n    for(gap[0]=m;dis[1]<m;)maxflow+=dfs_isap(1,1e9);\n    printf(\"%d\\n\",maxflow);\n    return 0;\n}\n```",
        "postTime": 1468567977,
        "uid": 7153,
        "name": "\u65b0\u65b9\u6cd5\u8981\u52a0\u5f3a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u6211\u5b66\u4e60\u4e86\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u7684SAP\u5f88\u77ed\uff0c\u7528\u7684\u662f\u90bb\u63a5\u77e9\u9635\n\n \n \n \n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#define MAXN 300+20 \nusing namespace std;\nint n;\nint map[MAXN][MAXN];\nint gap[MAXN],h[MAXN],d[MAXN];\nint sap(int v,int flow){\n    int rec=0;\n    if (v==n) return flow;\n    for (int i=0;i++<n;)\n    {\n      if (map[v][i]&&h[v]==h[i]+1)\n      {\n            int ret=sap(i,min(flow-rec,map[v][i]));\n            map[v][i]-=ret;\n            map[i][v]+=ret;\n            d[v]=i;\n            rec+=ret;\n            if (rec==flow) return flow;\n        }\n    }\n    d[v]=1;\n    if (!(--gap[h[v]])) h[1]=n;\n    gap[++h[v]]++;\n    return rec;\n}\nint main(){\n//    freopen(\"ditch.in\",\"r\",stdin);\n//    freopen(\"ditch.out\",\"w\",stdout);\n    int m;\n    memset(map,0,sizeof(map));\n    memset(gap,0,sizeof(gap));\n    memset(h,0,sizeof(h));\n    scanf(\"%d%d\",&m,&n);\n    while (m--)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        map[x][y]+=z;\n    }\n    gap[0]=n;\n    for (int i=0;i++<n;) d[i]=1;\n    int ans=0;\n    while (h[1]<n)\n    {\n      ans+=sap(1,0x7fffffff);\n    }\n    printf(\"%d\\n\",ans);\n//    fclose(stdin);\n//    fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1468561408,
        "uid": 7268,
        "name": "_bestknife",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u6211\u662f\u849f\u84bb\u6211\u518d\u6b21\u56de\u6765\u4e86 \u867d\u7136\u5df2\u7ecf\u6709\u4eba\u4ea4\u4e86sap\u7684\u9898\u89e3\uff0c\u4f46\u662f\u6211\u8fd8\u53ef\u4ee5\u4ea4\u4e00\u4e2a\u90bb\u63a5\u8868\u677f\u7684sap\u3002\u3002\u3002\u3002\u3002\u3002\u671b\u91c7\u7eb3\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nconst int maxn=210;\nconst int maxm=410; \nconst int inf=0x3f3f3f3f;\nusing namespace std;\nint bgn[maxn],nxt[maxm],to[maxm],c[maxm],cnt;\nint n,m,level[maxn],pre[maxm],gap[maxn];\nint cnte,edge[maxm];\nvoid add_edge(int x,int y,int w)\n{\n    nxt[cnt]=bgn[x];bgn[x]=cnt;to[cnt]=y;c[cnt++]=w;\n    nxt[cnt]=bgn[y];bgn[y]=cnt;to[cnt]=x;c[cnt++]=0;\n}\nint sap(int s,int t)\n{\n    memset(pre,-1,sizeof(pre));\n    memset(gap,0,sizeof(gap));\n    memset(level,0,sizeof(level));\n    gap[s]=n;\n    int u,v,flow=0,i;\n    u=pre[s]=s;\n    cnte=0;\n    while(level[s]<n)\n    {\n        for(i=bgn[u];i!=-1;i=nxt[i])\n        {\n            v=to[i];\n            if(level[u]==level[v]+1&&c[i]>0)break;\n        }\n        if(i!=-1)\n        {\n            pre[v]=u;\n            edge[++cnte]=i;\n            u=v;\n            if(v==t)\n            {\n                int minf=inf;\n                for(int i=1;i<=cnte;++i)\n                    if(minf>c[edge[i]])minf=c[edge[i]];\n                flow+=minf;\n                for(int i=1;i<=cnte;++i)\n                {\n                    c[edge[i]]-=minf;\n                    c[edge[i]^1]+=minf;\n                }\n                u=s;\n                cnte=0;\n            }\n        }\n        else\n        {\n            int minl=n;\n            for(i=bgn[u];i!=-1;i=nxt[i])\n            {\n                int v=to[i];\n                if(minl>level[v]&&c[i]>0)minl=level[v];\n            }\n            gap[level[u]]--;\n            if(gap[level[u]]==0)break;\n            level[u]=minl+1;\n            gap[level[u]]++;\n            u=pre[u];\n            if(cnte>0)cnte--;\n        }\n    }\n    return flow;\n}\nint main()\n{\n    int x,y,w;\n    scanf(\"%d%d\",&m,&n);\n    memset(bgn,-1,sizeof(bgn));\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&w);\n        add_edge(x,y,w);\n    }\n    printf(\"%d\\n\",sap(1,n));\n    return 0;\n}\n```",
        "postTime": 1468561338,
        "uid": 8462,
        "name": "ztzshiwo001219",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    },
    {
        "content": "\u6a21\u677f\u9898\u3002\u3002\u3002\u3002\u8fd9\u662fsap\u7684\u505a\u6cd5\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N=1210,INF=1000000000;\nint m[N][N];\nint pre[N],level[N],gap[N];\nint main()\n{\n    int n,dm,ans=0;\n    scanf(\"%d%d\",&dm,&n);\n    for(int i=1;i<=dm;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        m[x][y]+=z;\n    }\n    int u=1,v;\n    pre[1]=1;\n    gap[0]=n;\n    while(level[1]<n)\n    {\n        for(v=1;v<=n;v++)\n            if(m[u][v] && level[u]==level[v]+1)\n                break;\n        if(v<=n)\n        {\n            pre[v]=u;\n            u=v;\n            if(u==n)\n            {\n                int mn=INF;\n                for(int i=u;i^1;i=pre[i])\n                    if(m[pre[i]][i] && m[pre[i]][i]<mn)\n                        mn=m[pre[i]][i];\n                ans+=mn;\n                for(int i=u;i^1;i=pre[i])\n                {\n                    m[pre[i]][i]-=mn;\n                    m[i][pre[i]]+=mn;\n                }    \n                u=1;\n            }\n        }\n        else\n        {\n            int t=n;\n            for(int i=1;i<=n;i++)\n                if(m[u][i] && level[i]<t)\n                    t=level[i];\n            gap[level[u]]--;\n            if(!gap[level[u]])break;\n            level[u]=t+1;\n            gap[level[u]]++;\n            u=pre[u];\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1468498178,
        "uid": 17993,
        "name": "demerzel_iv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2740 \u3010[USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches\u3011"
    }
]