[
    {
        "content": "\u5148\u819c\u62dc\u4e00\u4e0b\u697c\u4e0b\u7684\u5927\u795e,\u53ef\u4f36\u7684\u6211\u4eca\u5929\u8003\u8bd5\u679c\u65ad\u7206\u96f6\u4e86\n\n\u4e0d\u591aBB,\u6211\u4eec\u8fdb\u5165\u6b63\u9898\u5427\n\n\u9996\u5148\u5982\u679c\u5c0f\u4f19\u4f34\u4eec\u76f4\u63a5\u6253\u7684\u9012\u5f52\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0\u4f1a\u9677\u5165\u6b7b\u5faa\u73af,\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22,\u7136\u540e\u73af\u4e0a\u7684\u70b9\u7684H\u503c\u5c31\u662f\u73af\u4e0a\u6700\u5c0f\u7684\u503c\n\n\u5982\u679c\u67d0\u4e2a\u70b9\u8bbf\u95ee\u4e86\u4e24\u6b21,\u5c31\u8bf4\u660e\u51fa\u73b0\u4e86\u73af\n\n\u4f46\u8fd9\u65f6\u6211\u4eec\u8fd8\u9700\u8981\u518d\u7ed5\u7740\u73af\u8d70\u4e00\u904d(\u4e5f\u5c31\u662f\u8bbf\u95ee\u5230\u7b2c\u4e09\u904d)\n\n\u56e0\u4e3a\u53ea\u8d70\u4e00\u5708\u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u70b9\u6ca1\u529e\u6cd5\u8ddf\u65b0\u5230\u73af\u4e0a\u6700\u5c0f\u503c\n\n\u7136\u540e\u5927\u5bb6\u53ef\u4ee5\u5148\u5904\u7406\u51fa\u67651-9\u7684k\u6b21\u65b9,\u8ba9\u7a0b\u5e8f\u8dd1\u5f97\u5feb\u4e00\u70b9.\n\n\u7136\u540e\u4e0a\u4ee3\u7801:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\nconst int mod=10000007;\nlong long h[4000005],s[4000005],small;\nint lemon[10],k,cnt;\nint vis[4000005];\nlong long q[4000005];\nvoid solve()\n{    \n    for(int i=1;i<=9;i++)\n    {\n        int w=1;\n        for(int j=1;j<=k;j++)\n            w*=i;\n        lemon[i]=w;\n    }\n}\nlong long get_s(int x)\n{\n    if(s[x]) return s[x];\n    int w,all=0;\n    while(x>0)\n    {\n        w=x%10;\n        all+=lemon[w];\n        x/=10;\n    }\n    return s[x]=all;\n}\nlong long get_h(long long x)\n{\n    if(h[x]) return h[x];\n    if(vis[x]==2) return x;\n    vis[x]++;\n    s[x]=get_s(x);\n    h[x]=min(x,min(s[x],get_h(s[x])));\n    vis[x]--;\n    return h[x];\n}\nint main()\n{\n    freopen(\"count.in\",\"r\",stdin);\n    freopen(\"count.out\",\"w\",stdout);\n    int a,b;\n    long long ans=0;\n    cin>>k>>a>>b;\n    solve();\n    h[1]=1;\n    for(int i=a;i<=b;i++)\n    {\n        cnt=0;    \n        ans+=get_h(i);\n        ans%=mod;\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1510147237,
        "uid": 26317,
        "name": "_Lemon_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1660 \u3010\u6570\u4f4d\u5e73\u65b9\u548c\u3011"
    },
    {
        "content": "\u4e5f\u8bb8\u662fnoip\u8003\u524d\u7684\u6700\u540e\u4e00\u7bc7\u9898\u89e3...\n\n\u5f88\u66b4\u529b\u7684\u89e3\u6cd5\uff0c\u628a\u6bcf\u4e00\u4e2a\u6570\u90fd\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u7684\u6bcf\u4e00\u4f4d\u6765\u5f97\u5230\u5b83\u7684\u4e0b\u4e00\u4e2a\u6570\uff0c\u5e76\u5411\u4e0b\u4e00\u4e2a\u6570\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6709\u5411\u6709\u73af\u56fe\uff0c\u90a3\u4e48\u9898\u610f\u5c31\u53d8\u6210\u4e86\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u4e00\u76f4\u5411\u4e0b\u8d70\uff0c\u6240\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u7684\u6700\u5c0f\u503c\uff08\u5305\u62ec\u73af\uff09\u3002\n\n\u8003\u8651tarjan\u7f29\u70b9\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u4e5f\u5c31\u662f\u73af\uff09\u4e0a\u7684\u6700\u5c0f\u503c\u3002\n\n\u5f88\u663e\u7136\u73af\u4e0a\u662f\u6ca1\u6709\u51fa\u8fb9\u7684\uff0c\u6211\u4eec\u5c06\u6240\u6709\u8fb9\u53cd\u5411\uff0c\u4ece\u5165\u5ea6\u4e3a0\u7684\u5206\u91cf\u5f00\u59cb\u62d3\u6251\uff0c\u4e00\u8def\u4e0a\u4e0d\u65ad\u66f4\u65b0\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u8fd9\u6837\u5c31\u7edf\u8ba1\u51fa\u6765\u4e86\u6bcf\u4e00\u4e2a\u70b9\u4e00\u76f4\u5411\u4e0b\u8d70\uff0c\u6240\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u7136\u540e\u628a\u9898\u76ee\u8981\u6c42\u7684\u70b9\u52a0\u5728\u4e00\u8d77\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u6211\u7528\u7684\u662f\u524d\u7f00\u548c\uff09\n\n\u53e6\u5916\u4e0d\u8981\u6000\u7591\u8fd9\u9053\u9898\u4f1a\u56e0\u4e3a\u70b9\u8fc7\u591a\u800c\u8d85\u65f6\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u6211\u8f93\u51fa\u6765\u770b\u8fc7\uff0c\u5f53k=6\u65f6\uff0c\u4ee51\uff5e100000\u5206\u522b\u4e3a\u8d77\u70b9\uff0c\u6240\u7ecf\u8fc7\u7684\u6570\u7684\u6700\u5927\u503c\u662f3188...\uff08\u53cd\u6b63\u662f\u4e2a\u4e03\u4f4d\u6570\uff09\uff0c\u8fd8\u662f\u53ef\u4ee5\u627f\u53d7\u7684\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6O\uff08\u80fd\u8fc7\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define mod (10000007)\nusing namespace std;\nint n,t[10];\nbool vis[3200005];\nint suan(int x){\n  int ans=0;\n  while(x){\n    ans+=t[x%10];\n    x/=10;\n  }\n  return ans;\n}\nint to[3200005];\nvoid dfs(int r){\n  if(vis[r])return;\n  vis[r]=1;\n  int Next=suan(r);\n  to[r]=Next;\n  dfs(Next);\n}\nint dfn[3200005],low[3200005],sccno[3200005],scc,dfscnt,mmin[3200005];\nint s[3200005],top;\nvoid tarjan(int r){\n  dfn[r]=low[r]=++dfscnt;\n  s[++top]=r;\n  int y=to[r];\n  if(!dfn[y]){\n    tarjan(y);\n    low[r]=min(low[r],low[y]);\n  }\n  else if(!sccno[y])low[r]=min(low[r],dfn[y]);\n  if(low[r]==dfn[r]){\n    scc++;\n    int x;\n    while(1){\n      x=s[top--];\n      sccno[x]=scc;\n      mmin[scc]=min(x,mmin[scc]);\n      if(x==r)break;\n    }\n  }\n}\nstruct node{\n  int next,to;\n}edge[3200005];\nint size=0;\nvoid putin(int from,int to){\n  size++;\n  edge[size].to=to;\n  edge[size].next=dfn[from];\n  dfn[from]=size;\n}\nvoid bfs(){\n  queue<int>mem;\n  for(int i=1;i<=scc;i++)if(!s[i])mem.push(i);\n  while(!mem.empty()){\n    int x=mem.front();mem.pop();\n    for(int i=dfn[x];i!=-1;i=edge[i].next){\n      int y=edge[i].to;\n      mmin[y]=min(mmin[y],mmin[x]); \n      s[y]--;\n      if(!s[y])mem.push(y);\n    }\n  }\n}\nint main(){\n  int i,j;\n  scanf(\"%d\",&n);\n  memset(mmin,127/3,sizeof(mmin));\n  for(i=0;i<=9;i++)t[i]=pow(i,n);\n  for(i=1;i<=1000000;i++){\n    dfs(i);\n  }\n  for(i=1;i<=3200000;i++)\n    if(!dfn[i])tarjan(i);\n  memset(dfn,-1,sizeof(dfn));\n  memset(s,0,sizeof(s));\n  for(i=1;i<=3200000;i++)\n    if(sccno[i]!=sccno[to[i]])putin(sccno[to[i]],sccno[i]),s[sccno[i]]++;\n  bfs();\n  low[0]=0;\n  for(i=1;i<=1000000;i++){\n    low[i]=mmin[sccno[i]];\n    (low[i]+=low[i-1])%=mod;\n  }\n  int l,r;\n  scanf(\"%d%d\",&l,&r);\n  printf(\"%d\\n\",(low[r]-low[l-1]+mod)%mod);\n  return 0;\n}\n\n```",
        "postTime": 1510127341,
        "uid": 36357,
        "name": "kakakaka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1660 \u3010\u6570\u4f4d\u5e73\u65b9\u548c\u3011"
    }
]