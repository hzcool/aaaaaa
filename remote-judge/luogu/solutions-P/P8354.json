[
    {
        "content": "\u9898\u610f\u53ef\u4ee5\u5f53\u505a\u662f\u589e\u52a0\u4e24\u4e2a\u9650\u5236\u7684\u4e09\u89d2\u5256\u5206\uff1a\n\n- \u5728\u8fb9\u4e0a\u7684\u70b9\u53ef\u4ee5\u4e0d\u8fde\u3002\n- \u8fb9\u4e0a\u7684\u70b9\u4e0d\u80fd\u8fde\u5230\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u70b9\u3002\n\n\u7b2c\u4e00\u4e2a\u9650\u5236\u662f\u7b80\u5355\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u6761\u8fb9\u4e0a\u5b9e\u9645\u8fde\u4e86\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u53bb\u6389\u7b2c\u4e00\u4e2a\u9650\u5236\u540e\uff0c\u7b2c\u4e8c\u4e2a\u9650\u5236\u663e\u5f97\u6709\u4e9b\u68d8\u624b\u3002  \n\u4f46\u6ce8\u610f\u5230\u7531\u4e8e\u6211\u4eec\u662f\u4e09\u89d2\u5256\u5206\uff0c\u6240\u4ee5\u5982\u679c\u5b58\u5728\u540c\u4e00\u6761\u8fb9\u4e0a\u4e92\u8fde\u7684\u70b9\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u7ebf\u6070\u597d\u8de8\u8fc7\u4e00\u4e2a\u9876\u70b9\uff0c\u4e14\u5176\u539f\u6765\u5728\u8fb9\u4e0a\u3002  \n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u6837\u7684\u8fb9\u5bb9\u65a5\u3002\u800c\u6211\u4eec\u94a6\u5b9a\u4e00\u6761\u8fd9\u6837\u7684\u8fb9\uff0c\u76f8\u5f53\u4e8e\u662f\u518d\u6b21\u7f29\u6389\u4e86\u4e00\u4e2a\u4e09\u89d2\u5f62\u4f7f\u5f97\u8fb9\u6570\u51cf\u4e00\u3002\n\n\u4e8e\u662f\u8003\u8651\u7b97\u51fa\u6bcf\u6761\u8fb9\u6700\u7ec8\u7684\u5bb9\u65a5\u7cfb\u6570\u7684 GF\uff0c\u4e58\u8d77\u6765\u5c31\u5f97\u5230\u4e86\u603b\u5171\u7684\u5bb9\u65a5\u7cfb\u6570\uff0c\u518d\u7528 Catalan \u6570\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002  \n\u800c\u5bf9\u4e8e\u6700\u7ec8\u7684\u4e00\u6bb5\u8fb9\uff0c\u82e5\u5176\u539f\u6765\u5305\u542b $j$ \u6bb5\uff0c\u5176\u8d21\u732e\u5e94\u4e3a $1 - (j-1)$\u3002\u5176\u4e2d\u540e\u8005\u662f\u9009\u62e9\u4e00\u4e2a\u94a6\u5b9a\u7684\u975e\u6cd5\u9876\u70b9\uff0c\u4ee4\u8fd9\u6761\u8fb9\u8de8\u8fc7\u3002  \n\u4ece\u800c\u6211\u4eec\u8981\u7b97\u7684\u662f\n$$\n\\sum_{k=1}^{a_i} x^k [w^{a_i}] \\left(\\sum_{j\\ge 1}(2-j)w^j\\right)^k\n$$\n\n\u90a3\u4e48\u6838\u5fc3\u662f\u5bf9\u6240\u6709 $k$ \u8ba1\u7b97\n$$\n[w^{a_i}] \\left(\\frac{w(1-2w)}{(1-w)^2}\\right)^k\n$$\n\n\u4ee4 $u$ \u4e3a $\\frac{w(1-2w)}{(1-w)^2}$ \u7684\u590d\u5408\u9006\u3002\u5219\u6839\u636e\u62c9\u683c\u6717\u65e5\u53cd\u6f14\n$$\n[w^{a_i}] \\left(\\frac{w(1-2w)}{(1-w)^2}\\right)^k = \\frac k{a_i} [x^{a_i-k}] \\left(\\frac xu\\right)^{a_i}\n$$\n\n\u4ee4 $v=\\frac xu$\u3002\u7531\u590d\u5408\u9006\u5173\u7cfb\n$$\n\\frac{u(1-2u)}{(1-u)^2}=w\n$$\n\n\u6211\u4eec\u77e5\u9053 $v$ \u6ee1\u8db3\n$$\nv^2-(1+2w)v+(2w+w^2)=0\n$$\n\n\u4ece\u800c $v$ \u662f\u4ee3\u6570\u7684\uff0c\u4ece\u800c $v^{a_i}$ \u662f D-Finite \u7684\u3002  \n\u8bb0 $f_n = [w^n] v^k$\uff0c\u901a\u8fc7 ODE \u81ea\u52a8\u673a\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\n$$\n\\begin{aligned}\nn(n-k)f_n &= \\frac12(9n-8k-8)(n-1)f_{n-1} \\\\\n&+ \\left[2k(k-2)-\\frac12(n-2)(3n-2k-2)\\right] f_{n-2} \\\\\n&+ \\left[k(1-2k)+(n-3)(4k-2n+5)\\right] f_{n-3} &\\quad (n\\ge 1)\n\\end{aligned}\n$$\n\n\u800c $f_0=1$\uff0c\u8d1f\u4e0b\u6807\u4e3a $0$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <queue>\n#include <cstdio>\n#include <chrono>\n#include <random>\n#include <vector>\n#include <cstring>\n#include <utility>\n#include <algorithm>\n#include <functional>\n#include <initializer_list>\n\nusing ll = long long;\n\nusing namespace std;\n\nconst int mod = 998244353, G = 3;\ninline int norm(int x) {\n  return x >= mod ? x - mod : x;\n}\ninline int reduce(int x) {\n  return x < 0 ? x + mod : x;\n}\ninline int neg(int x) {\n  return x ? mod - x : 0;\n}\ninline void add(int &x, int y) {\n  if ((x += y - mod) < 0)\n    x += mod;\n}\ninline void sub(int &x, int y) {\n  if ((x -= y) < 0)\n    x += mod;\n}\ninline void fam(int &x, int y, int z) {\n  x = (x + (ll)y * z) % mod;\n}\ninline int mpow(int a, int b) {\n  int ret = 1;\n  for (; b; b >>= 1)\n    (b & 1) && (ret = (ll)ret * a % mod),\n    a = (ll)a * a % mod;\n  return ret;\n}\n\nconst int BRUTE_N2_LIMIT = 50;\n\nstruct NumberTheory {\n  typedef pair<int, int> P2_Field;\n  mt19937 rng;\n  NumberTheory(): rng(chrono::steady_clock::now().time_since_epoch().count()) {}\n  void exGcd(int a, int b, int &x, int &y) {\n    if (!b) {\n      x = 1, y = 0;\n      return;\n    }\n    exGcd(b, a % b, y, x), y -= a / b * x;\n  }\n  int inv(int a, int p = mod) {\n    int x, y;\n    exGcd(a, p, x, y);\n    if (x < 0)\n      x += p;\n    return x;\n  }\n  template<class Integer>\n  bool quadRes(Integer a, Integer b) {\n    if (a <= 1)\n      return 1;\n    while (a % 4 == 0)\n      a /= 4;\n    if (a % 2 == 0)\n      return (b % 8 == 1 || b % 8 == 7) == quadRes(a / 2, b);\n    return ((a - 1) % 4 == 0 || (b - 1) % 4 == 0) == quadRes(b % a, a);\n  }\n  int sqrt(int x, int p = mod) {\n    if (p == 2 || x <= 1)\n      return x;\n    int w, v, k = (p + 1) / 2;\n    do\n      w = rng() % p;\n    while (quadRes(v = ((ll)w * w - x + p) % p, p));\n    P2_Field res(1, 0), a(w, 1);\n    for (; k; k >>= 1) {\n      if (k & 1)\n        res = P2_Field(((ll)res.first * a.first + (ll)res.second * a.second % p * v) % p, ((ll)res.first * a.second + (ll)res.second * a.first) % p);\n      a = P2_Field(((ll)a.first * a.first + (ll)a.second * a.second % p * v) % p, 2LL * a.first * a.second % p);\n    }\n    return min(res.first, p - res.first);\n  }\n} nt;\n\nnamespace Simple {\n  int n = 1;\n  vector<int> fac({1, 1}), ifac({1, 1}), inv({0, 1});\n  void build(int m) {\n    n = m;\n    fac.resize(n + 1), ifac.resize(n + 1), inv.resize(n + 1);\n    inv[1] = 1;\n    for (int i = 2; i <= n; ++i)\n      inv[i] = (ll)(mod - mod / i) * inv[mod % i] % mod;\n    fac[0] = ifac[0] = 1;\n    for (int i = 1; i <= n; ++i)\n      fac[i] = (ll)fac[i - 1] * i % mod,\n      ifac[i] = (ll)ifac[i - 1] * inv[i] % mod;\n  }\n  void check(int k) {\n    int m = n;\n    if (k > m) {\n      while (k > m)\n        m <<= 1;\n      build(m);\n    }\n  }\n  inline int gfac(int k) {\n    check(k);\n    return fac[k];\n  }\n  inline int gifac(int k) {\n    check(k);\n    return ifac[k];\n  }\n  inline int ginv(int k) {\n    check(k);\n    return inv[k];\n  }\n}\n\nstruct SimpleSequence {\n  function<int(int)> func;\n  inline SimpleSequence(const function<int(int)> &func): func(func) {}\n  inline int operator[](int k) const {\n    return func(k);\n  }\n} gfac(Simple::gfac), gifac(Simple::gifac), ginv(Simple::ginv);\n\ninline int binom(int n, int m) {\n  if (m > n || m < 0)\n    return 0;\n  return (ll)gfac[n] * gifac[m] % mod * gifac[n - m] % mod;\n}\n\nnamespace NTT {\n  int L = -1;\n  vector<int> root;\n  void init(int l) {\n    L = l;\n    root.resize((1 << L) + 1);\n    int n = 1 << L, *w = root.data();\n    w[0] = 1, w[1 << L] = mpow(31, 1 << (21 - L));\n    for (int i = L; i; --i)\n      w[1 << (i - 1)] = (ll)w[1 << i] * w[1 << i] % mod;\n    for (int i = 1; i < n; ++i)\n      w[i] = (ll)w[i & (i - 1)] * w[i & -i] % mod;\n  }\n  void DIF(int *a, int l) {\n    int n = 1 << l;\n    for (int len = n >> 1; len; len >>= 1)\n      for (int *j = a, *o = root.data(); j != a + n; j += len << 1, ++o)\n        for (int *k = j; k != j + len; ++k) {\n          int r = (ll)*o * k[len] % mod;\n          k[len] = reduce(*k - r), add(*k, r);\n        }\n  }\n  void DIT(int *a, int l) {\n    int n = 1 << l;\n    for (int len = 1; len < n; len <<= 1)\n      for (int *j = a, *o = root.data(); j != a + n; j += len << 1, ++o)\n        for (int *k = j; k != j + len; ++k) {\n          int r = norm(*k + k[len]);\n          k[len] = (ll)*o * (*k - k[len] + mod) % mod, *k = r;\n        }\n  }\n  void fft(int *a, int lgn, int d = 1) {\n    if (L < lgn)\n      init(lgn);\n    int n = 1 << lgn;\n    if (d == 1)\n      DIF(a, lgn);\n    else {\n      DIT(a, lgn), reverse(a + 1, a + n);\n      int nInv = mod - (mod - 1) / n;\n      for (int i = 0; i < n; ++i)\n        a[i] = (ll)a[i] * nInv % mod;\n    }\n  }\n}\n\nstruct poly {\n  vector<int> a;\n  poly(ll v = 0): a(1) {\n    if ((v %= mod) < 0)\n      v += mod;\n    a[0] = v;\n  }\n  poly(const poly &o): a(o.a) {}\n  poly(const vector<int> &o): a(o) {}\n  poly(initializer_list<int> o): a(o) {}\n  int operator[](int k) const { return k < a.size() ? a[k] : 0; }\n  int &operator[](int k) {\n    if (k >= a.size())\n      a.resize(k + 1);\n    return a[k];\n  }\n  int deg() const { return (int)a.size() - 1; }\n  void redeg(int d) { a.resize(d + 1); }\n  int size() const {return a.size(); }\n  void resize(int s) { a.resize(s); }\n  poly slice(int d) const {\n    if (d < a.size())\n      return vector<int>(a.begin(), a.begin() + d + 1);\n    vector<int> ret = a;\n    ret.resize(d + 1);\n    return ret;\n  }\n  poly shift(int k) const {\n    if (size() + k <= 0)\n      return 0;\n    vector<int> ret(size() + k);\n    for (int i = max(0, k); i < ret.size(); ++i)\n      ret[i] = a[i - k];\n    return ret;\n  }\n  int *base() { return a.data(); }\n  const int *base() const { return a.data(); }\n  poly println(FILE *fp = stdout) const {\n    for (int i = 0; i < a.size(); ++i)\n      fprintf(fp, \"%d%c\", a[i], \" \\n\"[i == a.size() - 1]);\n    return *this;\n  }\n\n  poly &operator+=(const poly &o) {\n    if (o.size() > a.size())\n      a.resize(o.size());\n    for (int i = 0; i < o.size(); ++i)\n      add(a[i], o[i]);\n    return *this;\n  }\n  poly operator+(const poly &o) const { poly ret(a); ret += o; return ret; }\n  poly operator-() const {\n    poly ret = a;\n    for (int i = 0; i < a.size(); ++i)\n      ret[i] = neg(ret[i]);\n    return ret;\n  }\n  poly &operator-=(const poly &o) { return operator+=(-o); }\n  poly operator-(const poly &o) { return operator+(-o); }\n  poly operator*(const poly &) const;\n  poly &operator*=(const poly &o) { *this = operator*(o); return *this; }\n};\n\npoly zeroes(int d) { return vector<int>(d + 1); }\n\nnamespace NTT { void fft(poly &a, int lgn, int d = 1) { fft(a.base(), lgn, d); } }\n\nusing NTT::fft;\n\npoly poly::operator*(const poly &o) const {\n  int n = deg(), m = o.deg();\n  if (n <= 10 || m <= 10 || n + m <= BRUTE_N2_LIMIT) {\n    poly ret = zeroes(n + m);\n    for (int i = 0; i <= n; ++i)\n      for (int j = 0; j <= m; ++j)\n        fam(ret[i + j], a[i], o[j]);\n    return ret;\n  }\n  n += m;\n  int l = 0;\n  while ((1 << l) <= n)\n    ++l;\n  poly ret = a, tmp = o;\n  ret.resize(1 << l), tmp.resize(1 << l);\n  fft(ret, l), fft(tmp, l);\n  for (int i = 0; i < (1 << l); ++i)\n    ret[i] = (ll)ret[i] * tmp[i] % mod;\n  fft(ret, l, -1);\n  return ret.slice(n);\n}\n\nconst int N = 5e5;\n\nint n;\nint a[N + 5], cat[N + 5];\nint ans;\n\npoly calc(int k) {\n  static int f[N + 5];\n  f[0] = 1;\n  for (int i = 1; i < k; ++i) {\n    f[i] = (ll)(i - 1) * (9 * i - 8 * k - 8 + mod) % mod * f[i - 1] % mod * ginv[2] % mod;\n    if (i > 1)\n      f[i] = (f[i] + (2LL * k * (k - 2) + (ll)(2 - i + mod) * (3 * i + 2 * k - 16 + mod) % mod * ginv[2]) % mod * f[i - 2]) % mod;\n    if (i > 2)\n      f[i] = (f[i] + ((ll)k * (1 - 2 * k + mod) + (ll)(i - 3) * (4 * k - 2 * i + 5)) % mod * f[i - 3]) % mod;\n    f[i] = (ll)f[i] * ginv[i] % mod * (mod - ginv[k - i]) % mod;\n  }\n  poly ret = zeroes(k);\n  for (int i = 0; i <= k; ++i)\n    ret[i] = (ll)i * ginv[k] % mod * f[k - i] % mod;\n  return ret;\n}\n\nint main() {\n  scanf(\"%d\", &n);\n  priority_queue<poly, vector<poly>, decltype([](const poly &a, const poly &b) {\n    return a.deg() > b.deg();\n  })> q;\n  for (int i = 1; i <= n; ++i)\n    scanf(\"%d\", a + i), q.push(calc(a[i]));\n  while (q.size() > 1) {\n    poly a = q.top(); q.pop();\n    poly b = q.top(); q.pop();\n    q.push(a * b);\n  }\n  poly res = q.top();\n  cat[0] = 1;\n  for (int i = 1; i <= res.deg() - 2; ++i)\n    cat[i] = 2LL * cat[i - 1] * (2 * i - 1) % mod * ginv[i + 1] % mod;\n  for (int i = 3; i <= res.deg(); ++i)\n    fam(ans, cat[i - 2], res[i]);\n  printf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1657797647,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "P8354"
    },
    {
        "content": "\u4ee5\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8868\u8ff0\uff0c\u79f0\u539f\u591a\u8fb9\u5f62\u7684\u8fb9\u4e3a\u8fb9\uff0c\u8fb9\u4e0a\u7b49\u5206\u51fa\u7684\u7ebf\u6bb5\u53eb\u505a\u7ebf\uff0c\u6700\u7ec8\u7684\u4e09\u89d2\u5256\u5206\u4e2d\uff0c\u5728\u540c\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\u7684\u82e5\u5e72\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u7ebf\u7ec4\u6210\u7684\u4e1c\u897f\u53eb\u6bb5\u3002\n\n\u9996\u5148\uff0c\u666e\u901a\u7684\u591a\u8fb9\u5f62\u4e09\u89d2\u5256\u5206\u7684\u65b9\u6848\u6570\u662f\u5361\u7279\u5170\u6570\u3002\n\n\u672c\u9898\u7c7b\u4f3c\u4e8e\u5bf9 $s=\\sum a_i$ \u6761\u7ebf\u8fdb\u884c\u4e09\u89d2\u5256\u5206\uff0c\u4f46\u662f\uff1a\n\n1. \u4e0d\u80fd\u8fde\u63a5\u5904\u4e8e\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u4e24\u4e2a\u70b9\u3002\n2. \u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u82e5\u5e72\u6761\u7ebf\u53ef\u4ee5\u5904\u4e8e\u540c\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\u3002\n\n\u9996\u5148\u60f3\u529e\u6cd5\u5904\u7406\u6389\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u679a\u4e3e\u4e0a\u9762\u7684\u7ebf\u6700\u7ec8\u4f1a\u88ab\u5206\u6210\u51e0\u6bb5\uff0c\u65b9\u6848\u6570\u662f\u4e00\u4e2a\u7ec4\u5408\u6570\u7684\u5f62\u5f0f\u3002\u540e\u7eed\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u7684\u6bb5\u5c31\u4e0d\u80fd\u5206\u5230\u540c\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\u4e86\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5904\u7406\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002\u8003\u8651\u5bb9\u65a5\uff0c\u94a6\u5b9a\u4e00\u4e9b\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u70b9\u5bf9\u88ab\u8fde\u63a5\u4e86\uff0c\u6765\u8003\u8651\u4e00\u4e0b\u5bb9\u65a5\u7cfb\u6570\uff1a\n\n1. \u5bf9\u4e8e\u8de8\u8fc7\u4e00\u6761\u7ebf\u7684\u70b9\u5bf9\uff0c\u7cfb\u6570\u4e3a $1$\u3002\n2. \u5bf9\u4e8e\u8de8\u8fc7\u4e24\u6761\u7ebf\u7684\u70b9\u5bf9\uff0c\u7cfb\u6570\u4e3a $-1$\uff0c\u56e0\u4e3a\u94a6\u5b9a\u4e86\u4e00\u6761\u975e\u6cd5\u7684\u7ebf\u6bb5\u3002\n3. \u5bf9\u4e8e\u8de8\u8fc7\u4e09\u6761\u53ca\u4ee5\u4e0a\u7ebf\u7684\u70b9\u5bf9\uff0c\u7cfb\u6570\u4e3a $0$\u3002\u56e0\u4e3a\u82e5\u5176\u88ab\u8fde\u63a5\uff0c\u90a3\u4e48\u5728\u5176\u5185\u90e8\u4e00\u5b9a\u8fd8\u6709\u82e5\u5e72\u70b9\u5bf9\u88ab\u8fde\u63a5\u3002\uff08\u8fd9\u4e00\u70b9\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u770b\u540e\u9762\u7684\u8865\u5145\u3002\uff09\n\n\u6bcf\u6761\u8fb9\u7559\u4e0b\u51e0\u6bb5\uff0c\u8fd9\u5728\u8fb9\u8fb9\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a $s^2$ \u7684\u7b97\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5206\u522b\u6c42\u51fa\u5176\u94a6\u5b9a\u540e\u7559\u4e0b $i$ \u6bb5\u7684\u5bb9\u65a5\u7cfb\u6570\u4e4b\u548c\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u7b97\u51fa\u5c06\u6574\u4e2a\u591a\u8fb9\u5f62\u5256\u4e3a $i$ \u6bb5\u7684\u7cfb\u6570\u4e4b\u548c\uff0c\u6bcf\u4e00\u9879\u4e58\u4e0a $i$ \u8fb9\u5f62\u7684\u4e09\u89d2\u5256\u5206\u65b9\u6848\u6570\u5373\u662f\u7b54\u6848\u3002\n\n```cpp\nvoid solve(){\n\tinit();\n\tcin>>n;\n\tint sum=0;\n\tdp[0][0]=1;\n\tfor(int i=0;i<N;i++)\n\t\tfor(int j=0;j<N-2;j++){\n\t\t\tadd(dp[i+1][j+1],dp[i][j]);\n\t\t\tadd(dp[i+1][j+2],-dp[i][j]);\n\t\t}\n\tf[0]=1;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i];\n\t\tmemcpy(g,f,sizeof(g));\n\t\tmemset(f,0,sizeof(f));\n\t\tmemset(h,0,sizeof(h));\n\t\tfor(int j=1;j<=a[i];j++)// \u679a\u4e3e\u6b64\u8fb9\u5206\u4e3a\u4e86 j \u6bb5\uff08\u5904\u7406\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff09\n\t\t\tfor(int k=1;k<=j;k++)// \u679a\u4e3e\u6b64\u6bb5\u94a6\u5b9a\u540e\u8fd8\u6709 k \u6bb5\uff08\u5904\u7406\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff09\n\t\t\t\tadd(h[k],C(a[i]-1,j-1)*dp[k][j]);\n\t\tfor(int k=1;k<=a[i];k++)\n\t\t\tfor(int l=0;l<=sum;l++)\n\t\t\t\tadd(f[l+k],h[k]*g[l]%mod);\n\t\tsum+=a[i];\n\t}\n\tint res=0;\n\tfor(int i=1;i<=sum;i++)\n\t\tadd(res,f[i]*Ca(i-2));\n\tcout<<(res%mod+mod)%mod<<endl;\n}\n```\n\n\u73b0\u5728\u53ef\u4ee5\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u7b97\u6cd5\u4e86\u3002\u5bf9\u4e8e\u540e\u9762\u90a3\u4e2a\u628a $h$ \u5377\u8d77\u6765\u90a3\u4e2a\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u62ff\u4e2a\u5806\u6309\u5927\u5c0f\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\u4e58\u8d77\u6765\u5c31\u597d\u3002\u73b0\u5728\u4e3b\u8981\u95ee\u9898\u662f\u600e\u4e48\u7b97\u8fd9\u4e2a $h$ \u6570\u7ec4\u3002\n\n\u9996\u5148\u628a\u6a21\u578b\u8f6c\u5316\u4e00\u4e0b\uff0c\u628a\u4e24\u4e2a\u6761\u4ef6\u7efc\u5408\u5728\u4e00\u8d77\u3002$n$ \u6761\u7ebf\u6709 $n-1$ \u4e2a\u5206\u754c\u70b9\uff0c\u628a\u8fd9\u4e9b\u70b9\u5206\u6210\u4e09\u7c7b\uff1a\n\n1. \u8fde\u63a5\u70b9\uff0c\u4ee3\u8868\u524d\u540e\u7684\u7ebf\u6700\u7ec8\u5c5e\u4e8e\u540c\u4e00\u6bb5\u3002\n2. \u65ad\u70b9\uff0c\u4ee3\u8868\u524d\u540e\u7684\u7ebf\u6700\u7ec8\u65e2\u4e0d\u5c5e\u4e8e\u540c\u4e00\u6bb5\uff0c\u4e5f\u6ca1\u6709\u88ab\u67d0\u4e2a\u94a6\u5b9a\u975e\u6cd5\u7684\u7ebf\u6bb5\u8de8\u8fc7\u3002\n3. \u975e\u6cd5\u70b9\uff0c\u4ee3\u8868\u524d\u540e\u7684\u7ebf\u6700\u7ec8\u4e0d\u5c5e\u4e8e\u540c\u4e00\u6bb5\uff0c\u4f46\u662f\u5176\u524d\u540e\u7684\u6bb5\u88ab\u94a6\u5b9a\u975e\u6cd5\u7684\u7ebf\u6bb5\u8de8\u8fc7\u4e86\u3002\n\n\u6700\u7ec8\u94a6\u5b9a\u540e\u7684\u6bb5\u6570\u5c31\u662f\u65ad\u70b9\u7684\u4e2a\u6570\uff0c\u5bb9\u65a5\u7cfb\u6570\u5c31\u662f $-1$ \u7684\u975e\u6cd5\u70b9\u4e2a\u6570\u6b21\u65b9\u3002\n\n\u636e\u6b64\uff0c\u53ef\u4ee5\u5c06\u6bb5\u6839\u636e\u662f\u5426\u5b58\u5728\u975e\u6cd5\u70b9\u6765\u5206\u6210\u4e24\u7c7b\u3002\u4e24\u4e2a\u90fd\u5b58\u5728\u975e\u6cd5\u70b9\u7684\u6bb5\u662f\u4e0d\u80fd\u7528\u8fde\u63a5\u70b9\u8fde\u8d77\u6765\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8bbe $dp_{i,0/1,0/1,j}$ \u4ee3\u8868\u5de6\u8fb9\u7684\u6bb5\u662f\u5426\u6709\u975e\u6cd5\u70b9\uff0c\u53f3\u8fb9\u7684\u6bb5\u662f\u5426\u6709\u975e\u6cd5\u70b9\uff0c\u5f53\u524d\u6709 $i$ \u6761\u7ebf\uff0c\u6700\u7ec8\u5212\u5206\u4e3a $j$ \u6bb5\uff0c\u5bb9\u65a5\u7cfb\u6570\u4e4b\u548c\u662f\u591a\u5c11\u3002\u7136\u540e\u8003\u8651\u7528\u500d\u589e\u7684\u65b9\u6cd5\u6765\u7b97\u3002\u6bcf\u6b21\u53ef\u4ee5 $O(n\\log n)$ \u5730\u4ece $dp_{i}$ \u63a8\u51fa $dp_{2i}$\uff1b\u4e5f\u53ef\u4ee5 $O(n)$ \u5730\u4ece $dp_{i}$ \u63a8\u51fa $dp_{i+1}$\u3002\u5177\u4f53\u7684\u65b9\u5f0f\u662f\u679a\u4e3e\u5f53\u524d\u70b9\u662f\u54ea\u4e00\u7c7b\uff0c\u7136\u540e\u8f6c\u79fb\u3002\u6ce8\u610f\u4f1a\u6709\u4e00\u79cd\u65e0\u6cd5\u7edf\u8ba1\u8fdb\u53bb\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u5373\u6240\u6709\u70b9\u90fd\u662f\u8fde\u63a5\u70b9\uff0c\u8fd9\u6837\u5de6\u53f3\u662f\u540c\u4e00\u4e2a\u6bb5\uff0c\u6b64\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nconst int N=1000005,mod=998244353;\nconst int g=3;\nusing namespace std;\nusing vi = vector<int>;\n\nvoid add(int&x,int y){\n\tx+=y;if(x>=mod||x<-mod)x%=mod;\n}\n\nint gsc(int a,int b){\n\tint res=1;\n\tfor(int i=1;i<=b;i<<=1,a=a*a%mod)\n\t\tif(b&i)res=res*a%mod;\n\treturn res;\n}int inv(int k){return gsc(k,mod-2);}\n\nint jc[N],ij[N],iv[N];\nint C(int n,int m){\n\tif(n<m||m<0)return 0;\n\treturn jc[n]*ij[m]%mod*ij[n-m]%mod;\n}\nvoid init(){\n\tjc[0]=iv[0]=1;\n\tfor(int i=1;i<N;i++)jc[i]=jc[i-1]*i%mod;\n\tij[N-1]=inv(jc[N-1]);\n\tfor(int i=N-2;i>=0;i--)ij[i]=ij[i+1]*(i+1)%mod;\n\tfor(int i=1;i<N;i++)iv[i]=ij[i]*jc[i-1]%mod;\n}\n\nvector<int> A[N];\nint lim,r[N];\nvoid initntt(int n){\n\tlim=1;while(lim<n)lim<<=1;\n\tfor(int i=0;i<lim;i++)\n\t\tr[i]=(r[i>>1]>>1)|((i&1)*(lim>>1));\n}\nvoid ntt(vi&a,int ty=1){\n\ta.resize(lim);\n\tfor(int i=0;i<lim;i++)if(r[i]<=i)swap(a[i],a[r[i]]);\n\tint x,y;\n\tfor(int i=1;i<lim;i<<=1){\n\t\tint o=gsc(ty==1?g:inv(g),mod/(i*2)),x,y;\n\t\tfor(int j=0;j<lim;j+=i<<1)\n\t\t\tfor(int k=0,w=1;k<i;k++,w=w*o%mod)\n\t\t\t\tx=a[j+k],y=a[j+k+i]*w,a[j+k]=(x+y)%mod,a[j+k+i]=(x-y)%mod;\n\t}\n\tif(ty==-1){\n\t\tint iv=inv(lim);\n\t\tfor(int i=0;i<lim;i++)a[i]=(a[i]*iv%mod+mod)%mod;\n\t}\n}\n\nvi operator * (vi a,vi b){\n\tinitntt(a.size()+b.size()-1);\n\tntt(a),ntt(b);\n\tfor(int i=0;i<lim;i++)a[i]=a[i]*b[i]%mod;\n\tntt(a,-1);\n\twhile(a.size()&&a.back()==0)a.pop_back();\n\treturn a;\n}\nvi operator + (vi a,vi b){\n\tif(a.size()<b.size())swap(a,b);\n\tfor(int i=0;i<b.size();i++)add(a[i],b[i]);\n\treturn a;\n}\nvoid operator +=(vi&a,vi b){a=a+b;}\nvi operator - (vi a){for(auto&x:a)x=-x;return a;}\nvi yy(vi a){if(a.size())a.erase(a.begin());return a;}\nvi zy(vi a){a.insert(a.begin(),0);return a;}\nstruct cmp{bool operator ()(vi a,vi b){return a.size()>b.size();}};\nvi Mul(vector<vi> A){\n\tpriority_queue< vi,vector<vi>,cmp > Q;\n\tfor(auto x:A)Q.push(x);\n\twhile(Q.size()>1){\n\t\tauto x=Q.top();Q.pop();\n\t\tauto y=Q.top();Q.pop();\n\t\tQ.push(x*y);\n\t}\n\treturn Q.top();\n}\n\nstruct Res{vi a[2][2];auto operator[](int b){return a[b];}}tem[N];\nint vis[N];\nRes geth(int k){\n\tif(k==1){Res res;return res;}\n\tif(vis[k])return tem[k];\n\tint fl=0;\n\tvis[k]=1;\n\tif(k&1)k--,fl=1;\n\tvis[k]=1;\n\tRes L=geth(k/2);\n\tRes res;\n\tauto D=-L[0][1]*L[0][1];\n\tfor(int i=0;i<2;i++)\n\t\tfor(int j=i;j<2;j++){\n\t\t\tauto A=(L[i][0]+L[i][1])*(L[0][j]+L[1][j]);\n\t\t\tauto B=(i==0&&j==0)?D:-L[i][1]*L[1][j];\n\t\t\tauto C=(i==1&&j==1)?D:-L[i][0]*L[0][j];\n\t\t\tres[i][j]+=A;\n\t\t\tres[i][j]+=yy(A);\n\t\t\tres[i][j]+=yy(C);\n\t\t\tres[i][j]+=yy(B);\n\t\t}\n\tres[1][0]=res[0][1];\n\tfor(int i=0;i<2;i++){\n\t\tres[i][0]+=L[i][0]+zy(L[i][0])+zy(L[i][1]);\n\t\tres[i][1]+=-L[i][0]+L[i][1];\n\t\tres[0][i]+=L[0][i]+zy(L[0][i])+zy(L[1][i]);\n\t\tres[1][i]+=-L[0][i]+L[1][i];\n\t}\n\tres[0][0]+=(vi){0,0,1};\n\tres[1][1]+=(vi){0,-1};\n\ttem[k]=res;\n\tif(fl){\n\t\tRes rr;\n\t\tfor(int i=0;i<2;i++){\n\t\t\trr[i][0]+=res[i][0]+zy(res[i][0])+zy(res[i][1]);\n\t\t\trr[i][1]+=-res[i][0]+res[i][1];\n\t\t}\n\t\trr[0][0]+=(vi){0,0,1};\n\t\trr[1][1]+=(vi){0,-1};\n\t\tres=rr;\n\t}\n\treturn tem[k+fl]=res;\n}\nvector<int> getH(int x){\n\tRes r=geth(x);\n\tvector<int> a(x+1);a[1]=1;\n\tfor(int i=0;i<2;i++)for(int j=0;j<2;j++)\n\t\tfor(int k=0;k<r[i][j].size();k++)\n\t\t\tadd(a[k],r[i][j][k]);\n\treturn a;\n}\n\nint n;\nint a[N];\n\nint Ca(int k){\n\tif(k<0)return 0;\n\treturn C(2*k,k)*iv[k+1]%mod;\n}\n\nint h[N],f[N];\nvoid solve(){\n\tinit();\n\tint n,s=0;cin>>n;\n\tvector<vi> A;\n\tfor(int i=1;i<=n;i++){\n\t\tint x;cin>>x;s+=x;\n\t\tA.push_back(getH(x));\n\t}\n\tauto res=Mul(A);\n\tint result=0;\n\tfor(int i=3;i<res.size();i++)\n\t\tadd(result,res[i]*Ca(i-2));\n\tcout<<(result%mod+mod)%mod<<endl;\n}\n\nmain(){\n\tios::sync_with_stdio(0);\n\tsolve();\n}\n```\n\n\u8865\u5145\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8de8\u8fc7\u4e09\u6761\u7ebf\u7684\u8fb9\u5bb9\u65a5\u7cfb\u6570\u662f $0$\u3002\u8003\u8651\u5176\u5185\u7684\u4efb\u610f\u4e00\u79cd\u4e09\u89d2\u5256\u5206\uff0c\u90fd\u5305\u542b\u6709\u81f3\u5c11 $1$ \u6761\u8de8\u8fc7\u4e24\u6761\u7ebf\u7684\u8fb9\uff0c\u5047\u8bbe\u6709 $k$ \u6761\u3002\u8003\u8651\u8fd9 $k$ \u6761\u8fb9\u662f\u5426\u94a6\u5b9a\uff0c\u4f1a\u6709 $2^k$ \u79cd\uff0c\u5176\u4e2d\u6709\u4e00\u534a\u7cfb\u6570\u4e3a $1$\uff0c\u5176\u4f59\u4e3a $-1$\uff0c\u603b\u548c\u662f $0$\u3002",
        "postTime": 1653725174,
        "uid": 79067,
        "name": "dottle",
        "ccfLevel": 10,
        "title": "8354\uff08\u5199\u5b8c\u4e86\uff09"
    },
    {
        "content": "\u5bf9\u4e00\u6761\u8fb9\u8003\u8651\uff0c\u5173\u6ce8\u8fb9\u4e0a\u7684\u9876\u70b9\uff08\u4e0d\u542b\u4e24\u7aef\uff09\u3002\u7531\u4e8e\u5141\u8bb8\u8fd9\u4e9b\u70b9\u4e0d\u8fde\u8fb9\uff0c\u5148\u679a\u4e3e\u54ea\u4e9b\u70b9\u8fde\u8fb9\u3002\n\n\u51f8 $n$ \u8fb9\u5f62\u7684\u4e09\u89d2\u5256\u5206\u6709 $Catalan(n-2)$ \u79cd\uff0c\u4f46\u5982\u679c\u5b58\u5728\u539f\u672c\u5728\u540c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\u5c31\u4f1a\u4e0d\u5408\u6cd5\u3002\n\n\u8003\u8651\u5bb9\u65a5\u3002\u8bb0\u6070\u8de8\u8fc7\u4e00\u4e2a\uff08\u9009\u4e2d\u7684\uff09\u70b9\u7684\u8fb9\u4e3a \u5173\u952e\u8fb9\uff0c\u6ce8\u610f\u5230\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u81f3\u5c11\u5305\u542b\u4e00\u6761\u5173\u952e\u8fb9\uff0c\u4e14\u4e0d\u540c\u7684\u5173\u952e\u8fb9\u65b9\u6848\u5bf9\u5e94\u7684\u4e00\u5b9a\u662f\u4e0d\u540c\u7684\u65b9\u6848\uff0c\u6545\u53ef\u4ee5\u6309\u5173\u952e\u8fb9\u6570\u91cf\u5bb9\u65a5\u3002\n\n\u8bbe\u8fd9\u6761\u8fb9\u4e0a\u6709 $a$ \u4e2a\u9876\u70b9\uff08\u4e0d\u542b\u4e24\u7aef\uff09\uff0c$f_i$ \u8868\u793a\u5269\u4e0b $i$ \u4e2a\u9876\u70b9\uff08\u4e0d\u542b\u4e24\u7aef\uff09\u7684\u65b9\u6848\u6570\u3002\u679a\u4e3e\u9009\u4e2d\u4e86 $k$ \u4e2a\u70b9\uff0c\u63d2\u677f\u53ef\u5f97\uff1a\n\n$$f_i=\\sum\\limits_{k=i}^a (-1)^{k-i} \\dbinom{a}{k} \\dbinom{i+1}{k-i}$$\n\n\u6700\u540e\u53ea\u9700\u8981\u5c06\u6240\u6709 $F_a(x)$ \u4e58\u8d77\u6765\u518d\u4e58\u4e0a\u5bf9\u5e94\u7684\u5361\u7279\u5170\u6570\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97 $F_a(x)$\u3002\n\n$$f_i=[x^{a-i}] \\sum\\limits_{k=i}^{a} \\dbinom{a}{k} x^{a-k} \\dbinom{i+1}{k-i} (-x)^{k-i}$$\n\n$$f_i=[x^{a-i}] (1+x)^a (1-x)^{i+1}$$\n\n\u8bb0 $G_k(x)=(1+x)^a (1-x)^k$\u3002\u6ce8\u610f\u5230 $G_k(x)$ \u662f D-finite \u7684\uff0c\u5bf9\u5176\u6c42\u5bfc\uff1a\n\n$$G_k'(x)=G_k(x) (\\dfrac{a}{1+x}-\\dfrac{k}{1-x})$$\n\n$$(1-x^2)G_k'(x)=a(1-x)G_k(x)-k(1+x)G_k(x)=(a-k)G_k(x)-(a+k)xG_k(x)$$\n\n$$(i+1)g_{i+1}=(a-k)g_i-(k+a-i+1)g_{i-1}$$\n\n\u4e8e\u662f\u8bb0\u5f55\u76f8\u90bb\u4e24\u9879\u7cfb\u6570\uff0c\u53ef\u4ee5 $O(1)$ \u63a8\u51fa\u524d\u540e\u9879\u3002\n\n\u540c\u65f6\u6709 $G_{k+1}(x)=(1-x)G_k(x)$\uff0c\u6545\u53ef\u4ee5\u63a8\u51fa $G_k(x)$ \u7684\u4e09\u9879\uff0c\u518d\u63a8\u51fa $G_{k+1}(x)$ \u7684\u4e24\u9879\u3002\n\n\u7c7b\u4f3c\u83ab\u961f\u8f6c\u79fb\uff0c\u53ef\u4ee5 $O(a)$ \u8ba1\u7b97\u51fa $F_a(x)$\u3002\u8be5\u90e8\u5206\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sum a_t)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sum a_t \\log^2 \\sum a_t)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\nint main(){\n\tpre(N-5);\n\tcin>>n;\n\tfor(long long i=1;i<=n;i++) scanf(\"%lld\",&a[i]),a[i]--,m+=a[i];\n\tfor(long long t=1;t<=n;t++){\n\t\tid++;\n\t\tQ[id].resize(a[t]+2);\n\t\t\n\t\tlong long k=1,pos=a[t],w1=(1+mod-a[t])%mod,w2=mod-1;\n\t\tfor(long long i=0;i<=a[t];i++){\n\t\t\tif(i){\n\t\t\t\tlong long w3=((a[t]+mod-k)*w2%mod+mod-(k+a[t]+mod-pos)*w1%mod)*invv[pos+2];\n\t\t\t\tlong long nw1=(w2+mod-w1)%mod,nw2=(w3+mod-w2)%mod;\n\t\t\t\tw1=nw1,w2=nw2;\n\t\t\t\tpos++,k++;\n\t\t\t\t\n\t\t\t\tfor(long long p=1;p<=2;p++){\n\t\t\t\t\tlong long tmp=k+a[t]-(pos-1);\n\t\t\t\t\tlong long w0=((a[t]+mod-k)*w1%mod+mod-(pos+1)*w2%mod)*(tmp>0?invv[tmp]:mod-invv[-tmp])%mod;\n\t\t\t\t\tw2=w1,w1=w0;\n\t\t\t\t\tpos--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tQ[id][i]=w1;\n\t\t}\n\t}\n\tsolve(1,1,id);\n\tfor(long long i=0;i<=m;i++) ans=(ans+P[1][i]*Cat(i+n-2)%mod)%mod;\n\tcout<<ans;\n}\n\n```",
        "postTime": 1654473708,
        "uid": 225645,
        "name": "\u82f9\u679c\u84dd17",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P8354 [SDOI/SXOI2022] \u591a\u8fb9\u5f62"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u8003\u8651\u4e0d\u91cd\u4e0d\u6f0f\u5730\u7edf\u8ba1\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u9898\u4e8b\u5b9e\u4e0a\u662f\u51f8\u591a\u8fb9\u5f62\u5212\u5206\u7684\u4e00\u4e2a\u62d3\u5c55\uff0c\u4f20\u7edf\u7684\u51f8\u591a\u8fb9\u5f62\u5256\u5206\u65b9\u6848\u6570\u5c31\u662f\u5361\u7279\u5170\u6570\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u7684\u533a\u522b\u5c31\u662f\uff1a\n\n* \u5728\u4e00\u6761\u8fb9\u4e0a\u7684\u70b9\u4e0d\u80fd\u76f8\u4e92\u8fde\u7ebf\u6bb5\n* \u5728\u8fb9\u4e2d\u95f4\u4e0a\u7684\u70b9\u53ef\u4ee5\u6ca1\u7ebf\u6bb5\n\n\u4e0d\u59a8\u8003\u8651\u6211\u4eec\u624b\u52a8\u679a\u4e3e\u4e86\u4e00\u4e9b\u4e2d\u95f4\u70b9\u5b8c\u5168\u4e0d\u8fde\u8fb9\uff0c\u5269\u4e0b $m$ \u4e2a\u70b9\u8981\u8fde\u8fb9\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5f53\u505a\u51f8 $m$ \u4e09\u89d2\u5256\u5206\u6570\uff08\u8bbe\u4e3a $T_m$ \uff09\uff0c\u4f1a\u5305\u542b\u6240\u6709\u5408\u6cd5\u65b9\u6848\uff0c\u4f46\u4e5f\u4f1a\u591a\u7b97\u4e00\u4e9b\u4e0d\u5408\u6cd5\u65b9\u6848\uff0c\u8fd9\u4e9b\u65b9\u6848\u7684\u7279\u5f81\u662f\uff1a\u5305\u542b\u81f3\u5c11\u4e00\u6761\u4e24\u6bb5\u70b9\u90fd\u5728\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u7ebf\u6bb5\u3002\n\n\u8fdb\u4e00\u6b65\uff0c\u56e0\u4e3a\u4e09\u89d2\u5256\u5206\u662f\u6070\u597d\u5256\u5b8c\u7684\uff0c\u4f60\u53ef\u4ee5\u60f3\u8c61\u628a\u90a3\u6761\u8fb9\u4e0a\u7684\u70b9\u4eba\u4e3a\u51f8\u51fa\u53bb\uff0c\u90a3\u4e48\u53ea\u8981\u6709\u4e00\u6761\u4e0d\u5408\u6cd5\u7ebf\u6bb5\uff0c\u90a3\u4e48\u91cc\u9762\u5fc5\u7136\u6709\u4e00\u6761\u7ebf\u6bb5\u6070\u597d\u8de8\u8d8a\u4e00\u4e2a\u70b9\uff08\u79f0\u4e4b\u4e3a\u76f8\u90bb\u4e0d\u5408\u6cd5\u7ebf\u6bb5\uff09\uff01\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u94a6\u5b9a\u4e00\u4e2a\u76f8\u90bb\u4e0d\u5408\u6cd5\u7ebf\u6bb5\u7684\u96c6\u5408 $S$ \u53bb\u5bb9\u65a5\uff0c\u76f8\u5f53\u4e8e\u628a\u4e24\u6761\u8fb9\u7f29\u6210\u4e86\u4e00\u6761\u8fb9\uff0c\u5ffd\u7565\u4e86\u4e2d\u95f4\u4e00\u4e2a\u70b9\uff0c\u4e2d\u95f4\u6709\u4e2a $-1^{|S|}$ \u7684\u5bb9\u65a5\u7cfb\u6570\u5c31\u884c\u4e86\u3002\n\n\u90a3\u4e48\u6574\u4f53\u7684\u6846\u67b6\u5c31\u662f\uff1a\u5148\u629b\u53bb\u4e00\u4e9b\u8fb9\u4e2d\u95f4\u7684\u70b9\u4e0d\u8fde\u8fb9\uff0c\u7136\u540e\u5728\u5269\u4e0b\u7684\u70b9\u4e2d\u9009\u51fa\u82e5\u5e72\u4e92\u4e0d\u76f8\u90bb\u7684\u70b9\u51cf\u5c11\u4e00\u6761\u8fb9\u505a\u5bb9\u65a5\uff0c\u6700\u7ec8\u4e58\u4e0a\u5bf9\u5e94\u7684\u4e09\u89d2\u5256\u5206\u6570\u3002\n\n\u6bcf\u6761\u8fb9\u72ec\u7acb\uff0c\u8bbe\u4e00\u6761\u8fb9\u4e2d\u95f4\u6709 $t$ \u4e2a\u70b9\uff0c\u8bbe $F_i$ \u8868\u793a\u8fd9\u6761\u8fb9\u4e2d\u95f4\u6700\u7ec8\u4fdd\u7559\u4e0b\u6765 $i$ \u4e2a\u70b9\uff0c\u8ba1\u7b97\u6211\u4eec\u5c31\u518d\u679a\u4e3e $j$ \u4e2a\u70b9\u4f5c\u4e3a\u5bb9\u65a5\uff0c\u65b9\u6848\u6570\u53ef\u4ee5\u76f4\u63a5\u63d2\u677f\uff1a\n\n$$F_i = \\sum_{j} (-1)^j\\binom{t}{i + j} \\binom{i+1}{j}$$\n\n\u6700\u540e\u628a\u6bcf\u4e2a $F$ \u4e58\u8d77\u6765\uff0c\u7136\u540e\u4e58\u4e0a\u5bf9\u5e94\u7684\u5361\u7279\u5170\u6570\u52a0\u548c\u5c31\u597d\u4e86\uff0c\u8fd9\u90e8\u5206\u4f3c\u4e4e\u5fc5\u987b\u8981\u5206\u6cbb NTT\uff0c\u770b\u4f3c\u662f $\\log^2$ \u4f46\u4f60\u53d1\u73b0\u6781\u9650\u60c5\u51b5\u662f $250000$ \u800c\u4e0d\u662f $500000$\uff0c\u597d\u50cf\u53ef\u4ee5\u63a5\u53d7\uff1f\n\n\u7136\u540e\u5c31\u80fd $O(n^2)$ \u4e86\u3002\n\n\u73b0\u5728\u5c31\u662f\u8981\u5feb\u901f\u7b97\u6bcf\u4e2a $F$\uff0c\u53d1\u73b0\u4ed6\u6709 $i+j,i,i-j$ \u4e0d\u80fd\u76f4\u63a5\u5377\u79ef\uff0c\u53ef\u6076\uff01\uff01\n\nEI \u597d\u50cf\u4f1a\u7ebf\u6027\u7b97\uff0c\u8fd9\u91cc\u53ea\u63d0\u4f9b\u4e24\u79cd\u62d9\u52a3\u7684\u65b9\u6cd5\uff1a\n\n1. \u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u7ec4\u5408\u610f\u4e49\uff0c\u5373\u5206\u6210\u82e5\u5e72\u6700\u7ec8\u4fdd\u7559\u7684\u6bb5\uff0c\u7136\u540e\u4e0d\u4fdd\u7559\u6bb5\u4e2d\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u4f5c\u4e3a\u5bb9\u65a5\uff0c\u7136\u540e\u7c7b\u4f3c\u500d\u589e DP / FFT \u7684\u8fc7\u7a0b\u505a\u5c31\u597d\u4e86\uff0c\u5e94\u8be5\u9700\u8981\u8bb0\u5f55\u5de6\u53f3\u7aef\u70b9\u7684\u72b6\u6001\uff0c\u53ef\u80fd\u662f $O(9n\\log n)$ \u7684\uff0c\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a T\u3002\n\n2. \u8003\u8651 GF\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u914d\u4e00\u4e2a $x$ \u53ef\u4ee5\u753b\u6210\u4e24\u4e2a $(x+1)^p$ \u4e58\u79ef\u7684\u5f62\u5f0f\uff1a\n\n   $$F_i = [x^{t-i}]\\sum_{j} \\binom{t}{t-i-j} x^{t-i-j} \\binom{i+1}{j}(-x)^{j}$$\n\n   $$= [x^{t-i}] (x+1)^t (1-x)^{i+1}$$\n\n   $$= [x^{t}] (x+1)^t [(1-x)^{i+1}x^i]$$\n\n   $$= \\sum_{j=0}^t [x^{t-j}](x+1)^t \\times  [x^j][(1-x)^{i+1}x^i]$$\n\n   \u8bbe $G_j = [x^{t-j}](x+1)^t$\u3002\n\n   $$F_i = \\sum_{j=0}^t G_j \\times  [x^j][(1-x)^{i+1}x^i]$$\n\n   \u8003\u8651\u4f7f\u7528\u8f6c\u7f6e\u539f\u7406\uff0c\u53cd\u8fc7\u6765\u770b $F$ \u5230 $G$ \u7cfb\u6570\u5411\u91cf\u7684\u7ebf\u6027\u53d8\u6362\uff0c\u4ee5\u4e0b $h$ \u5145\u5f53 $F$ \u4f5c\u7528\uff1a\n\n   $$G_j = [x^j]\\sum_{i=0}^a h_i [(1-x)^{i+1}x^i]$$\n\n   \u8bbe $$H(x) = \\sum_{i=0}^a h_i x^i $$\n\n   $$= [x^j]\\sum_{i=0}^a (1-x)H(x-x^2))$$\n\n   $$= [x^j]\\sum_{i=0}^a (1-x)H(-(x-\\frac{1}{2})^2+\\frac{1}{4}))$$\n\n   \u5c06\u6b65\u9aa4\u62c6\u89e3\uff0c\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a\n\n   * \u5c06 $H(x)$ \u53d8\u6210 $H(x+\\frac{1}{4})$\n   * \u5c06 $H(x)$ \u53d8\u6210 $H(-x)$\n   * \u5c06 $H(x)$ \u53d8\u6210 $H(x^2)$\n   * \u5c06 $H(x)$ \u53d8\u6210 $H(x-\\frac{1}{2})$\n   * \u5c06 $H(x)$ \u4e58 $(1 - x)$\n\n   \u6bcf\u4e00\u6b65\u7684\u8f6c\u7f6e\u77e9\u9635\uff0c$1, 4$ \u6b65\u662f\u5377\u79ef\uff0c\u5269\u4e0b\u90fd\u53ef\u4ee5\u7ebf\u6027\u505a\uff0c\u5c31\u505a\u5230\u4e86 $O(n \\log n)$\n\n\u4ee3\u7801\u5b9e\u73b0\u7684\u7b2c\u4e8c\u79cd\uff1a\n\n[code](https://loj.ac/s/1465295)\n\n",
        "postTime": 1653067321,
        "uid": 161687,
        "name": "Remake",
        "ccfLevel": 0,
        "title": "SD/XOI 2022 \u591a\u8fb9\u5f62"
    },
    {
        "content": "\u8003\u8651\u5bb9\u65a5\uff0c\u6211\u4eec\u679a\u4e3e\u4e00\u79cd\u5256\u5206\u65b9\u6848\uff08\u8fd9\u79cd\u65b9\u6848\u53ef\u80fd\u4f1a\u9009\u4e24\u4e2a\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u4e24\u4e2a\u70b9\u76f8\u8fde\uff09\uff0c\u8fd9\u79cd\u5212\u5206\u65b9\u6848\u7684\u5bb9\u65a5\u7cfb\u6570\u662f $(-1)^{t}$\uff0c\u8fd9\u91cc $t$ \u662f\u6709\u591a\u5c11\u6761\u8fb9\u4e0a\u5b58\u5728\u4e24\u4e2a\u8fd9\u6761\u8fb9\u4e0a\u7684\u70b9\u76f8\u8fde\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u6761\u8fb9 $a_i$\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a $a_i$ \u6b21\u591a\u9879\u5f0f $A_{a_i}$\uff0c\u7b2c $j$ \u9879\u7cfb\u6570\u8868\u793a\u8fd9\u6761\u8fb9\u7f29\u6210 $j$ \u7684\u7cfb\u6570\uff0c\u6700\u540e\u628a\u6240\u6709\u591a\u9879\u5f0f\u4e58\u8d77\u6765\uff0c\u7136\u540e\u7b2c $k$ \u9879\u7cfb\u6570\u4e58\u4e0a $k$ \u7684\u591a\u8fb9\u5f62\u4e09\u89d2\u5256\u5206\u6570\u52a0\u8d77\u6765\uff0c\u5c31\u662f\u7b54\u6848\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8981\u6c42\u8fd9\u4e2a\u7cfb\u6570\u3002\u5bb9\u6613\u53d1\u73b0\uff0c$[x^k]A_{a_i}$ \u53ef\u4ee5\u8868\u793a\u6210 $[x^{a_i}]B^k$ \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d $[x^k]B$ \u8868\u793a $k$ \u4e2a\u8fb9\u7f29\u6210\u4e00\u6761\u8fb9\u7684\u7cfb\u6570\u3002\n\n\u6253\u8868\u53d1\u73b0\uff0c$B$ \u7684\u5e38\u6570\u9879\u662f $0$\uff0c\u800c $k>0$ \u65f6\uff0c$[x^k]B=2-k$\u3002\n\n\u628a $B$ \u8868\u793a\u6210\u597d\u770b\u7684\u5f62\u5f0f:\n\n$$\nB=\\frac{x(1-2x)}{(1-x)^2}\n$$\n\n\u89e3\u4e00\u4e0b $B$ \u7684\u590d\u5408\u9006 $C$:\n\n$$\nC=\\frac{2x+1-\\sqrt{-4x+1}}{2x+4}\n$$\n\n\u7136\u540e\u6211\u4eec\u8fdb\u884c\u62c9\u683c\u6717\u65e5\u53cd\u6f14:\n\n$$\n[x^{a_i}]B^i=[x^{a_i}]x^iC'(\\frac{x}{C})^{a_i+1}\n$$\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa $C'(\\frac{x}{C})^{a_i+1}$\uff0c\u5f97\u5230 $A_{a_i}$\n\n\u6700\u540e\u628a\u6240\u6709 $A_{a_i}$ \u4e58\u8d77\u6765\n\n```cpp\n#include<bits/stdc++.h>\n#ifdef xay5421\n#define D(...) fprintf(stderr,__VA_ARGS__)\n#define DD(...) D(#__VA_ARGS__ \"=\"),debug_helper::debug(__VA_ARGS__),D(\"\\n\")\n#include\"/home/xay5421/debug.hpp\"\n#else\n#define D(...) ((void)0)\n#define DD(...) ((void)0)\n#endif\n#define pb push_back\n#define eb emplace_back\n#define SZ(x) ((int)(x).size())\n#define each(x,v) for(auto&x:v)\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\ntemplate<class T>void rd(T&x){int f=0,c;while(!isdigit(c=getchar()))f^=!(c^45);x=(c&15);while(isdigit(c=getchar()))x=x*10+(c&15);if(f)x=-x;}\ntemplate<class T>void pt(T x,int c=-1){if(x<0)putchar('-'),x=-x;if(x>9)pt(x/10);putchar(x%10+48);if(c!=-1)putchar(c);}\nusing namespace std;\nusing LL=long long;\nusing ULL=unsigned long long;\ntemplate<int P>\nclass mod_int{\n\tusing Z=mod_int;\nprivate:\n\tstatic int mo(int x){return x<0?x+P:x;}\npublic:\n\tint x;\n\tint val()const{return x;}\n\tmod_int():x(0){}\n\ttemplate<class T>mod_int(const T&x_):x(x_>=0&&x_<P?static_cast<int>(x_):mo(static_cast<int>(x_%P))){}\n\tbool operator==(const Z&rhs)const{return x==rhs.x;}\n\tbool operator!=(const Z&rhs)const{return x!=rhs.x;}\n\tZ operator-()const{return Z(x?P-x:0);}\n\tZ pow(long long k)const{\n\t\tZ res=1,t=*this;\n\t\twhile(k){\n\t\t\tif(k&1)res*=t;\n\t\t\tif(k>>=1)t*=t;\n\t\t}\n\t\treturn res;\n\t}\n\tZ&operator++(){\n\t\tx<P-1?++x:x=0;\n\t\treturn *this;\n\t}\n\tZ&operator--(){\n\t\tx?--x:x=P-1;\n\t\treturn *this;\n\t}\n\tZ operator++(int){\n\t\tZ ret=x;\n\t\tx<P-1?++x:x=0;\n\t\treturn ret;\n\t}\n\tZ operator--(int){\n\t\tZ ret=x;\n\t\tx?--x:x=P-1;\n\t\treturn ret;\n\t}\n\tZ inv()const{\n#ifdef xay5421\n\t\tassert(x!=0);\n#endif\n\t\treturn pow(P-2);\n\t}\n\tZ&operator+=(const Z&rhs){\n\t\t(x+=rhs.x)>=P&&(x-=P);\n\t\treturn *this;\n\t}\n\tZ&operator-=(const Z&rhs){\n\t\t(x-=rhs.x)<0&&(x+=P);\n\t\treturn *this;\n\t}\n\tZ&operator*=(const Z&rhs){\n\t\tx=1ULL*x*rhs.x%P;\n\t\treturn *this;\n\t}\n\tZ&operator/=(const Z&rhs){\n\t\treturn *this*=rhs.inv();\n\t}\n#define setO(T,o) friend T operator o(const Z&lhs,const Z&rhs){Z res=lhs;return res o##=rhs;}\n\tsetO(Z,+)setO(Z,-)setO(Z,*)setO(Z,/)\n#undef setO\n};\nconst int P=998244353;\nusing Z=mod_int<P>;\nnamespace jiangly{\n\nstd::vector<int> rev;\nstd::vector<Z> roots{0, 1};\nvoid dft(std::vector<Z> &a) {\n    int n = a.size();\n    \n    if (int(rev.size()) != n) {\n        int k = __builtin_ctz(n) - 1;\n        rev.resize(n);\n        for (int i = 0; i < n; i++) {\n            rev[i] = rev[i >> 1] >> 1 | (i & 1 ? 1 << k : 0);\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        if (rev[i] < i) {\n            std::swap(a[i], a[rev[i]]);\n        }\n    }\n    if (int(roots.size()) < n) {\n        int k = __builtin_ctz(roots.size());\n        roots.resize(n);\n        while ((1 << k) < n) {\n            Z e = Z(3).pow((P - 1) >> (k + 1));\n            for (int i = 1 << (k - 1); i < (1 << k); i++) {\n                roots[2 * i] = roots[i];\n                roots[2 * i + 1] = roots[i] * e;\n            }\n            k++;\n        }\n    }\n    for (int k = 1; k < n; k *= 2) {\n        for (int i = 0; i < n; i += 2 * k) {\n            for (int j = 0; j < k; j++) {\n                Z u = a[i + j];\n                Z v = a[i + j + k] * roots[k + j];\n                a[i + j] = u + v;\n                a[i + j + k] = u - v;\n            }\n        }\n    }\n}\nvoid idft(std::vector<Z> &a) {\n    int n = a.size();\n    std::reverse(a.begin() + 1, a.end());\n    dft(a);\n    Z inv = (1 - P) / n;\n    for (int i = 0; i < n; i++) {\n        a[i] *= inv;\n    }\n}\nstruct Poly {\n    std::vector<Z> a;\n    Poly() {}\n    Poly(const std::vector<Z> &a) : a(a) {}\n    Poly(const std::initializer_list<Z> &a) : a(a) {}\n    int size() const {\n        return a.size();\n    }\n    void resize(int n) {\n        a.resize(n);\n    }\n    Z operator[](int idx) const {\n        if (idx < 0 || idx >= size()) {\n            return 0;\n        }\n        return a[idx];\n    }\n    Z &operator[](int idx) {\n        return a[idx];\n    }\n    Poly mulxk(int k) const {\n        auto b = a;\n        b.insert(b.begin(), k, 0);\n        return Poly(b);\n    }\n    Poly modxk(int k) const {\n        k = std::min(k, size());\n        return Poly(std::vector<Z>(a.begin(), a.begin() + k));\n    }\n    Poly divxk(int k) const {\n        if (size() <= k) {\n            return Poly();\n        }\n        return Poly(std::vector<Z>(a.begin() + k, a.end()));\n    }\n    friend Poly operator+(const Poly &a, const Poly &b) {\n        std::vector<Z> res(std::max(a.size(), b.size()));\n        for (int i = 0; i < int(res.size()); i++) {\n            res[i] = a[i] + b[i];\n        }\n        return Poly(res);\n    }\n    friend Poly operator-(const Poly &a, const Poly &b) {\n        std::vector<Z> res(std::max(a.size(), b.size()));\n        for (int i = 0; i < int(res.size()); i++) {\n            res[i] = a[i] - b[i];\n        }\n        return Poly(res);\n    }\n    friend Poly operator*(Poly a, Poly b) {\n        if (a.size() == 0 || b.size() == 0) {\n            return Poly();\n        }\n        int sz = 1, tot = a.size() + b.size() - 1;\n        while (sz < tot)\n            sz *= 2;\n        a.a.resize(sz);\n        b.a.resize(sz);\n        dft(a.a);\n        dft(b.a);\n        for (int i = 0; i < sz; ++i) {\n            a.a[i] = a[i] * b[i];\n        }\n        idft(a.a);\n        a.resize(tot);\n        return a;\n    }\n    friend Poly operator*(Z a, Poly b) {\n        for (int i = 0; i < int(b.size()); i++) {\n            b[i] *= a;\n        }\n        return b;\n    }\n    friend Poly operator*(Poly a, Z b) {\n        for (int i = 0; i < int(a.size()); i++) {\n            a[i] *= b;\n        }\n        return a;\n    }\n    Poly &operator+=(Poly b) {\n        return (*this) = (*this) + b;\n    }\n    Poly &operator-=(Poly b) {\n        return (*this) = (*this) - b;\n    }\n    Poly &operator*=(Poly b) {\n        return (*this) = (*this) * b;\n    }\n    Poly deriv() const {\n        if (a.empty()) {\n            return Poly();\n        }\n        std::vector<Z> res(size() - 1);\n        for (int i = 0; i < size() - 1; ++i) {\n            res[i] = (i + 1) * a[i + 1];\n        }\n        return Poly(res);\n    }\n    Poly integr() const {\n        std::vector<Z> res(size() + 1);\n        for (int i = 0; i < size(); ++i) {\n            res[i + 1] = a[i] / (i + 1);\n        }\n        return Poly(res);\n    }\n    Poly inv(int m) const {\n        Poly x{a[0].inv()};\n        int k = 1;\n        while (k < m) {\n            k *= 2;\n            x = (x * (Poly{2} - modxk(k) * x)).modxk(k);\n        }\n        return x.modxk(m);\n    }\n    Poly log(int m) const {\n        return (deriv() * inv(m)).integr().modxk(m);\n    }\n    Poly pow(int k,int m) const {\n    \treturn (log(m)*k).exp(m);\n    \t/*Poly ret({1});\n    \tPoly cur(*this);\n    \twhile(k){\n    \t\tif(k&1)ret=(ret*cur).modxk(m);\n    \t\tif(k>>=1)cur=(cur*cur).modxk(m);\n    \t}\n    \treturn ret;*/\n    }\n    Poly exp(int m) const {\n        Poly x{1};\n        int k = 1;\n        while (k < m) {\n            k *= 2;\n            x = (x * (Poly{1} - x.log(k) + modxk(k))).modxk(k);\n        }\n        return x.modxk(m);\n    }\n    Poly sqrt(int m) const {\n        Poly x{1};\n        int k = 1;\n        while (k < m) {\n            k *= 2;\n            x = (x + (modxk(k) * x.inv(k)).modxk(k)) * ((P + 1) / 2);\n        }\n        return x.modxk(m);\n    }\n    Poly mulT(Poly b) const {\n        if (b.size() == 0) {\n            return Poly();\n        }\n        int n = b.size();\n        std::reverse(b.a.begin(), b.a.end());\n        return ((*this) * b).divxk(n - 1);\n    }\n    std::vector<Z> eval(std::vector<Z> x) const {\n        if (size() == 0) {\n            return std::vector<Z>(x.size(), 0);\n        }\n        const int n = std::max(int(x.size()), size());\n        std::vector<Poly> q(4 * n);\n        std::vector<Z> ans(x.size());\n        x.resize(n);\n        std::function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                q[p] = Poly{1, -x[l]};\n            } else {\n                int m = (l + r) / 2;\n                build(2 * p, l, m);\n                build(2 * p + 1, m, r);\n                q[p] = q[2 * p] * q[2 * p + 1];\n            }\n        };\n        build(1, 0, n);\n        std::function<void(int, int, int, const Poly &)> work = [&](int p, int l, int r, const Poly &num) {\n            if (r - l == 1) {\n                if (l < int(ans.size())) {\n                    ans[l] = num[0];\n                }\n            } else {\n                int m = (l + r) / 2;\n                work(2 * p, l, m, num.mulT(q[2 * p + 1]).modxk(m - l));\n                work(2 * p + 1, m, r, num.mulT(q[2 * p]).modxk(r - m));\n            }\n        };\n        work(1, 0, n, mulT(q[1].inv(n)));\n        return ans;\n    }\n};\n\n}\nusing jiangly::Poly;\nconst int N=1000005;\nint n;\nZ fac[N],ifac[N];\nZ C(int n,int m){\n\tif(m<0||n<m)return Z(0);\n\treturn fac[n]*ifac[m]*ifac[n-m];\n}\nZ Cat(int n){\n\treturn fac[n*2]*ifac[n]*ifac[n+1];\n}\nPoly base,tmp;\nPoly gen(int n){\n\tPoly ret=(base.modxk(n+1)*((tmp.modxk(n+1)*(n+1)).exp(n+1))).modxk(n+1);\n\tret.resize(n+1);\n\treverse(ret.a.begin(),ret.a.begin()+n+1);\n\treturn ret;\n}\nint a[N];\nPoly sol(int l,int r){\n\tif(l==r){\n\t\treturn gen(a[l]);\n\t}\n\tint mid=(l+r)>>1;\n\treturn sol(l,mid)*sol(mid+1,r);\n}\nint main(){\n#ifdef xay5421\n\tfreopen(\"a.in\",\"r\",stdin);\n#endif\n\tfac[0]=1;\n\trep(i,1,N-1)fac[i]=fac[i-1]*i;\n\tifac[N-1]=fac[N-1].inv();\n\tper(i,N-1,1)ifac[i-1]=ifac[i]*i;\n\trd(n);\n\trep(i,1,n)rd(a[i]);\n\t{\n\t\tconst int n=*max_element(a+1,a+::n+1);\n\t\tPoly g=((Poly({1,2})-Poly({1,P-4}).sqrt(n+1))*Poly({4,2}).inv(n+1)).modxk(n+1);\n\t\tbase=g.deriv(),tmp=g.divxk(1).inv(n+1).log(n+1);\n\t}\n\tPoly ret(sol(1,n));\n\tZ ans=0;\n\trep(i,3,ret.size()-1)ans+=Cat(i-2)*ret[i];\n\tprintf(\"%d\\n\",ans.val());\n\treturn 0;\n}\n```",
        "postTime": 1652962356,
        "uid": 200001,
        "name": "xay5421",
        "ccfLevel": 10,
        "title": "P8354 [SDOI/SXOI2022] \u591a\u8fb9\u5f62 \u9898\u89e3"
    },
    {
        "content": "\u5148\u5047\u8bbe\u6700\u7ec8\u6bcf\u4e2a\u70b9\u90fd\u5fc5\u987b\u8fde\u8fb9\uff0c\u8fd9\u65f6\u65b9\u6848\u6570\u662f\n$$\n\\sum_{b_1,b_2,\\dots,b_n}Cat(S-\\sum b_i)\\prod_{i}(-1)^{b_i}\\binom{all_i-b_i}{b_i}\n$$\n$Cat(n)$ \u8868\u793a $n$ \u8fb9\u5f62\u4e09\u89d2\u5256\u5206\u6570\u3002\u6700\u7ec8\u679a\u4e3e\u6bcf\u6761\u8fb9\u4e0a\u9009\u4e86\u51e0\u6761\u5c0f\u8fb9\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9\u4e0a\u771f\u6b63\u7528\u4e86 $a_i$ \u4e2a\uff1a\n$$\n\\sum_{a_1,a_2,\\dots,a_n}\\sum_{b_1,b_2,\\dots,b_n}Cat(\\sum a_i-\\sum b_i)\\prod_{i}(-1)^{b_i}\\binom{a_i-b_i}{b_i}\\binom{all_i-1}{a_i-1}\n$$\n\u6ce8\u610f\u5230\u53ea\u8981\u5bf9\u4e8e\u6bcf\u79cd $a_i-b_i$ \u9884\u5904\u7406\u51fa\u540e\u9762\u7684\u4e1c\u897f\u5c31\u884c\u4e86\u3002\u679a\u4e3e $a-b=i,b=j$\uff0c\n$$\nf(i)=\\sum_{j}\\binom{i}j\\binom{all-1}{i+j-1}(-1)^j\n$$\n\u7136\u800c\u8fd9\u91cc\u9762\u4e0e $i,j,i-j,i+j$ \u56db\u4e2a\u4e1c\u897f\u6709\u5173\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5377\u3002\n\n\u7528\u4e00\u4e9b\u6280\u5de7\u6027\u7684\u4e1c\u897f\uff1a\u7ed9 $\\binom ij$ \u51d1\u4e00\u4e2a $x^j$\uff0c\u7ed9 $\\binom{all-1}{all-i-j}$ \u51d1\u4e00\u4e2a $x^{all-i-j}$\uff1a\n$$\n[x^i]F(x)=[x^{all-i}]\\sum \\binom ij(-x)^j \\binom{all-1}{all-i-j}x^{all-i-j}\n$$\n\u4e5f\u5c31\u662f\u6c42 $[x^{all-i}](1-x)^i\\times (1+x)^{all-1}$\u3002\u8bbe $g(i)=\\binom{all-1}{all-i}$\uff0c\u5199\u5f97\u597d\u770b\u4e00\u70b9\uff1a\n$$\n[x^{all}](x-x^2)^i\\times (1+x)^{all-1}\n$$\n$$\n=\\sum_j g(j)[x^j](x-x^2)^i\n$$\n\u4f7f\u7528\u8f6c\u7f6e\u539f\u7406\uff0c\u628a $(1+x)^{all-1}$ \u770b\u6210\u8f93\u5165\uff0c\u6700\u7ec8\u5f97\u5230 $f()$\uff1b\u8f6c\u7f6e\u7cfb\u6570\u77e9\u9635\u4e4b\u540e\uff0c\u8003\u8651\u4ee5\u4e0b\u8fc7\u7a0b\u3002\n$$\ng(j)=[x^j]\\sum_i f(i)(x-x^2)^i=[x^j]F(x-x^2)\n$$\n\u4e5f\u5373\u8f6c\u7f6e\u4e4b\u540e\u662f\u628a $F(x)\\to F(x-x^2)$\u3002\u8fd9\u4e2a\u53d8\u6362\u7684\u8f6c\u7f6e\u53c8\u9700\u8981\u5c06\u5176\u62c6\u89e3\u4e3a\u201c\u57fa\u672c\u201d\u7684\u6b65\u9aa4\uff0c\u914d\u65b9\uff0c$x-x^2=-(x-1/2)^2+1/4$\u3002\u4e5f\u5373\u505a\u4e86\u4ee5\u4e0b\u4e8b\u60c5\uff0c\u6ce8\u610f\u4e00\u5207\u53d8\u5316\u90fd\u662f\u5bf9 $x$ \u672c\u8eab\u8fdb\u884c\u7684\uff01\n\n- $F(x)\\to F(x+1/4)$\n- $F(x+1/4)\\to F(-x+1/4)$\n- $F(-x+1/4)\\to F(-(x^2)+1/4)$\uff0c\u6ce8\u610f\u8f6c\u7f6e\u540e\u4ec5\u4ec5\u662f\u7cfb\u6570\u77e9\u9635\u8f6c\u7f6e\uff08$i\\to i/2$\uff09\uff0c\u4e0d\u4ee3\u8868\u8fd9\u4e00\u6b65\u4e4b\u524d $2i+1$ \u4f4d\u7f6e\u5fc5\u987b\u662f 0\n- $F(-(x^2)+1/4)\\to F(-(x-1/2)^2+1/4)$\n\n\u4e0d\u663e\u7136\u7684\u5730\u65b9\u662f $F(x)\\to F(x+y)$ \u7684\u8f6c\u7f6e\uff0c\u539f\u6765 $b_i=\\sum_{j\\ge i}a_jy^{j-i}\\binom ji$\uff0c\u73b0\u5728 $b_i=\\sum_{j\\le i}a_j\\binom ijy^{i-j}$\uff08\u901a\u8fc7\u7cfb\u6570\u77e9\u9635\u8f6c\u7f6e\u5bb9\u6613\u770b\u51fa\uff09\uff0c\u53ef\u4ee5\u53d1\u73b0\u8f6c\u7f6e\u4e4b\u540e\u751a\u81f3\u6bd4\u539f\u6765\u6e05\u723d\uff08\u6ca1\u6709\u5dee\u5377\u79ef\u4e86\uff09\u3002\u8fd8\u8981\u6ce8\u610f\u8fd9\u91cc\u4e0b\u6807\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff08\u7cfb\u6570\u77e9\u9635\u662f\u65e0\u9650\u7684\uff01\uff09\u4e3a\u4e86\u4e0d\u51fa\u95ee\u9898\uff0c\u6240\u6709\u7684\u8fd0\u7b97\u8981\u4fdd\u7559 $2\\times all$ \u4f4d\u3002",
        "postTime": 1653708792,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "[SDOI2022] \u591a\u8fb9\u5f62"
    }
]