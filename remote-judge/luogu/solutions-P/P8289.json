[
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a<https://oi.baoshuo.ren/solutions/luogu-p8289/>\n\n## \u601d\u8def\n\n\u8fd9\u662f\u4e00\u9053\u4e0d\u5927\u4e0d\u5c0f\u7684\u6a21\u62df\u9898\uff0c\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1. \u5224\u65ad\u6709\u6548\u7684\u5b8f\u540d\u6bd4\u5224\u65ad\u5206\u9694\u7b26\u8981\u5bb9\u6613\u5b9e\u73b0\u3002\n2. \u9898\u76ee\u6709\u8981\u6c42\u4e0d\u80fd\u5c55\u5f00\u65e0\u9650\u9012\u5f52\u7684\u5b8f\uff0c\u9700\u8981\u6253\u6807\u8bb0\u8bb0\u5f55\u4e00\u4e0b\u3002\n3. STL \u662f\u4e2a\u597d\u4e1c\u897f\u3002\n\n\u8be6\u7ec6\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u6ce8\u91ca\u3002\n\n\u6211\u7684\u4ee3\u7801\u5b98\u65b9\u6570\u636e\u8dd1\u4e86 36ms ~~\uff0c\u5361\u5361\u5e38\u5e94\u8be5\u80fd\u5361\u5230\u6700\u4f18\u89e3\u7684\u4f4d\u7f6e~~ \u3002\n\n### STL \u76f8\u5173\n\n\u4e00\u4e2a\u975e\u5e38\u597d\u7528\u7684 C++ \u53c2\u8003\u624b\u518c\uff08\u4e2d\u6587\uff09\uff1a[zh.cppreference.com](https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5)\u3002\n\n\u5728\u8003\u573a\u4e0a\u5982\u679c\u4e0d\u77e5\u9053\u600e\u4e48\u7528 STL \u53ef\u4ee5\u53bb\u7ffb\u5934\u6587\u4ef6\u4e2d\u7684\u6ce8\u91ca\uff08\u82f1\u6587\uff09\uff0c\u91cc\u9762\u6709\u7b80\u5355\u7684\u8bf4\u660e\u3002\n\n#### `std::string` \u5165\u95e8\n\n\u58f0\u660e\u4e00\u4e2a `std::string` \u7c7b\u578b\u7684\u53d8\u91cf `s`\uff1a\n\n```cpp\nstd::string s = \"abcdef\";\n```\n\n\u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\uff1a\n\n```cpp\ns.size();\n// 6\n```\n\n\u5224\u7a7a\uff1a\n\n```cpp\ns.empty();\n// false\n```\n\n\u622a\u53d6\u5b50\u4e32\uff1a\n\n```cpp\ns.substr(1, 3);  // s \u4e2d\u4ece 1 \u5f00\u59cb\u957f\u5ea6\u4e3a 3 \u7684\u5b50\u4e32\n// \"bcd\"\n```\n\n\u67e5\u627e\u5b57\u4e32\uff1a\n\n```cpp\ns.find(\"cde\", 1);  // s \u4e2d\u4ece\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627e\u5b57\u4e32 \"cde\"\n// 2\n```\n\n\u540c\u6837\u5730\uff0c\u4e5f\u53ef\u4ee5\u67e5\u627e\u67d0\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1a\n\n```cpp\ns.find('c');  // s \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684 'c'\n// 2\n```\n\nSTL \u4e5f\u63d0\u4f9b\u4e86\u5176\u4ed6\u67e5\u627e\u51fd\u6570\uff1a\n\n- `find_first_of`\uff1a\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u6307\u5b9a\u5b57\u7b26\uff08\u4e32\uff09\u7684\u4f4d\u7f6e\u3002\n- `find_last_of`\uff1a\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5305\u542b\u6307\u5b9a\u5b57\u7b26\uff08\u4e32\uff09\u7684\u4f4d\u7f6e\u3002\n- `find_first_not_of`\uff1a\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u5305\u542b\u6307\u5b9a\u5b57\u7b26\uff08\u4e32\uff09\u7684\u4f4d\u7f6e\u3002\n- `find_last_not_of`\uff1a\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u4e0d\u5305\u542b\u6307\u5b9a\u5b57\u7b26\uff08\u4e32\uff09\u7684\u4f4d\u7f6e\u3002\n\n\u4f7f\u7528\u65b9\u6cd5\u4e0e\u4e0a\u9762\u7684 `find` \u51fd\u6570\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8fc7\u591a\u8d58\u8ff0\u3002\n\n\u6e05\u7a7a\u5b57\u7b26\u4e32\uff1a\n\n```cpp\ns.clear();\n```\n\n#### `std::unordered_map` \u5165\u95e8\n\n`std::unordered_map` \u5728 C++11 \u4e2d\u88ab\u5f15\u5165\uff0c\u7531\u4e8e\u5176\u57fa\u4e8e\u54c8\u5e0c\u7684\u5b9e\u73b0\u5bfc\u81f4\u4e86\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b `std::unordered_map` \u6bd4 `std::map` \u8981\u5feb\u3002\n\n\u58f0\u660e\u4e00\u4e2a `std::unordered_map<std::string, int>` \u7c7b\u578b\u7684\u53d8\u91cf `map`\uff1a\n\n```cpp\nstd::unordered_map<std::string, int> map;\n```\n\n\u63d2\u5165\u5143\u7d20\uff1a\n\n```cpp\nmap[\"a\"] = 1;\nmap.insert(std::make_pair(\"b\", 2));  // pair \u7684 first \u952e\u503c\u4e3a key\uff0csecond \u952e\u503c\u4e3a value\nmap[\"c\"] = -1;\n```\n\n\u67e5\u627e\u5143\u7d20\uff1a\n\n```cpp\nmap.find(\"c\");  // \u8fd4\u56de\u8fed\u4ee3\u5668\nmap.count(\"c\"); // \u8fd4\u56de\u5143\u7d20\u4e2a\u6570\uff081 \u6216 0\uff09\n```\n\n\u5220\u9664\u8fed\u4ee3\u5668 `it` \u6307\u5411\u7684\u5143\u7d20\uff1a\n\n```cpp\nauto it = map.find(\"c\");\nmap.erase(it);\n```\n\n\u5220\u9664\u952e\u4e3a `c` \u7684\u5143\u7d20\uff1a\n\n```cpp\nmap.erase(\"c\");\n```\n\n\u83b7\u53d6\u5143\u7d20\u4e2a\u6570\uff1a\n\n```cpp\nmap.size();\n// 2\n```\n\n\u5224\u7a7a\uff1a\n\n```cpp\nmap.empty();\n// false\n```\n\n\u8bbf\u95ee\u5143\u7d20\uff1a\n\n```cpp\nmap[\"a\"];\n// 1\n```\n\n\u4f7f\u7528\u4e0b\u6807\u8bbf\u95ee\u65f6\u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u65b0\u5efa\uff0c\u6240\u4ee5\u5efa\u8bae\u8bbf\u95ee\u524d\u5148\u4f7f\u7528 `map.count()` \u5224\u65ad\u662f\u5426\u5b58\u5728\u8be5\u5143\u7d20\u3002\n\n\u6e05\u7a7a\u6574\u4e2a\u5bb9\u5668\uff1a\n\n```cpp\nmap.clear();\n```\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\nusing std::cin;\nusing std::cout;\nconst char endl = '\\n';\n\n// \u9898\u76ee\u9650\u5236\nconst int N = 105;\n\n// \u4ee3\u7801\u884c\u6570\nint n;\n// \u539f\u59cb\u5b57\u7b26\u4e32\nstd::string s[N];\n// \u5b8f\u5217\u8868\uff1a        <\u5b8f\u540d,                 <\u5185\u5bb9,     \u6b63\u5728\u5c55\u5f00>>\nstd::unordered_map<std::string, std::pair<std::string, bool>> def;\n\n/**\n * \u9012\u5f52\u5c55\u5f00\n * @param s \u539f\u59cb\u5b57\u7b26\u4e32\n * @return \u5c55\u5f00\u540e\u7684\u5b57\u7b26\u4e32\n */\nstd::string dfs(std::string s) {\n    std::string r;\n\n    for (int i = 0, j; i < s.size(); i += j) {\n        for (j = 0; i + j < s.size() &&                     // \u9632\u6b62\u8d8a\u754c\n                    ('0' <= s[i + j] && s[i + j] <= '9' ||  // \u6570\u5b57\n                     'a' <= s[i + j] && s[i + j] <= 'z' ||  // \u5c0f\u5199\u5b57\u6bcd\n                     'A' <= s[i + j] && s[i + j] <= 'Z' ||  // \u5927\u5199\u5b57\u6bcd\n                     s[i + j] == '_');                      // \u4e0b\u5212\u7ebf\n             j++);  // \u5339\u914d\u5408\u6cd5\u5b8f\u540d\n\n        if (j) {\n            std::string tmp = s.substr(i, j);  // \u622a\u53d6\u4ece i \u5f00\u59cb\u7684 j \u4e2a\u5b57\u7b26\n            if (def.count(tmp) && !def[tmp].second) {  // \u8be5\u5b8f\u5b58\u5728\u4e14\u672a\u5904\u5728\u5c55\u5f00\u72b6\u6001\n                def[tmp].second = true;                // \u5c06\u8be5\u5b8f\u6807\u8bb0\u4e3a\u6b63\u5728\u5c55\u5f00\n                r += dfs(def[tmp].first);              // \u9012\u5f52\u5c55\u5f00\n                def[tmp].second = false;               // \u53d6\u6d88\u6807\u8bb0\n            } else {\n                r += tmp;  // \u4e0d\u5b58\u5728\u76f4\u63a5\u6309\u539f\u6837\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n            }\n        } else {\n            r += s[i++];  // \u4e0d\u5408\u6cd5\uff0c\u76f4\u63a5\u7565\u8fc7\uff0c\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\n        }\n    }\n\n    return r;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n\n    cin >> n;\n\n    // \u7b2c 0 \u884c\u8bfb\u5165 n \u540e\u5c3e\u968f\u7684\u6362\u884c\u7b26\n    for (int i = 0; i <= n; i++) {\n        std::getline(cin, s[i]);\n    }\n\n    for (int i = 1; i <= n; i++) {\n        if (s[i][0] == '#') {  // \u9884\u5904\u7406\u547d\u4ee4\n            if (s[i].substr(1, 6) == \"define\") {\n                int p = s[i].find_first_of(' ', 8);  // \u5b8f\u540d\u540e\u7684\u7a7a\u683c\u4f4d\u7f6e\n                std::string name = s[i].substr(8, p - 8),\n                            content = s[i].substr(p + 1);\n                // \u63d2\u5165\u5185\u5bb9\n                def[name] = std::make_pair(content, false);\n            } else {  // s[i].substr(1, 6) == \"undef\"\n                std::string name = s[i].substr(7);\n                def.erase(name);\n            }\n            cout << endl;\n        } else {  // \u666e\u901a\u6587\u672c\n            cout << dfs(s[i]) << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\n---\n\n\u672c\u6587\u6700\u540e\u66f4\u65b0\u4e8e 2022/04/26\u3002\n",
        "postTime": 1650540608,
        "uid": 168214,
        "name": "\u5b9d\u7855",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P8289\u3010[\u7701\u9009\u8054\u8003 2022] \u9884\u5904\u7406\u5668\u3011"
    },
    {
        "content": "### ~~\u90a3\u4e00\u5929,\u4eba\u7c7b\u7ec8\u4e8e\u56de\u60f3\u8d77\u4e86,\u66fe\u7ecf\u88ab\u5112\u7565\u5386\u6240\u652f\u914d\u7684\u6050\u60e7......~~  \n---\n### \u9898\u610f\uff1a\n\u9898\u76ee\u7684\u610f\u601d\u8fd8\u662f\u5f88\u6e05\u695a\u7684\uff0c~~\u5982\u679c\u4f60\u4f1a\u7528 define \u7684\u8bdd~~\u3002\u5927\u6982\u5c31\u662f\u5b9a\u4e49\u66ff\u6362\u548c\u53d6\u6d88\u5b9a\u4e49\u4e24\u79cd\u64cd\u4f5c\uff0c\u5e76\u4e14\u5141\u8bb8\u9012\u5f52\u66ff\u6362\uff0c**\u4f46\u4e0d\u53ef\u4ee5\u5728\u540c\u4e00\u9012\u5f52\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u66ff\u6362\u89c4\u5219**\uff0c\u6240\u4ee5\u8bf4\u5199\u4e2a\u9012\u5f52\u5c31\u597d\u4e86\uff0c\u770b\u4ee3\u7801\u53ef\u80fd\u4f1a\u597d\u7406\u89e3\u4e00\u4e9b......\n\n### \u6ce8\u610f\u4e8b\u9879\uff1a\n1.\u9898\u76ee\u5b9a\u4e49\u6bcf\u6bb5\u8fde\u7eed\u6781\u957f\u7684\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u89c6\u4e3a\u6807\u8bc6\u7b26\uff0c\u5176\u4f59\u4e3a\u5176\u4ed6\u5b57\u7b26\uff0c\u8fd9\u4e3a\u89e3\u9898\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u65b9\u4fbf\u3002\n\n2.\u4f60\u53ea\u9700\u6ce8\u610f\u6309\u7167\u9898\u76ee\u7ed9\u5b9a\u7684\u65b9\u5f0f\u8bfb\u5165\u5373\u53ef\uff0c\u7b2c\u4e00\u884c\u6700\u540e\u7684\u6362\u884c\u7b26\u9700\u8981\u989d\u5916\u8bfb\u5165\u4e00\u884c\u3002  \n\n### \u4ee3\u7801 and \u6ce8\u91ca\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstatic const int N=105;\nchar a[N][N];\nint n;\nmap<string,string> Map;\nmap<string,bool> Maap;\ninline int check(char a){\n\tif(a>=' '&&a<='/'||a>=':'&&a<='@'||a>='['&&a<='`'||a>='{'&&a<='~')\n\t\treturn 1;\n\treturn 0;\n}//\u6807\u8bc6\u7b26 or \u5176\u4ed6\u5b57\u7b26\nvoid print(string s){\n\tstring f,g;\n\tfor(int i=0;i<s.size();i=-~i){\n\t\tif(check(s[i])){\n\t\t\tif(!Maap[f]&&Map[f]!=g){//\u6b64\u6807\u8bc6\u7b26\u5b58\u5728\u66ff\u6362\u89c4\u5219\n\t\t\t\tMaap[f]=1;\n\t\t\t\tprint(Map[f]);\n\t\t\t\tMaap[f]=0;\n\t\t\t}//\u6807\u8bb0\u6b64\u66ff\u6362\u89c4\u5219\u5728\u6b64\u6b21\u9012\u5f52\u4e2d\u4f7f\u7528\u8fc7 and \u56de\u6eaf\n\t\t\telse\n\t\t\t\tcout<<f;\n\t\t\tf=g;\n\t\t\tprintf(\"%c\",s[i]);\n\t\t\tcontinue;\n\t\t}\n\t\telse f+=s[i];\n\t}\n\tif(!Maap[f]&&Map[f]!=g){\n\t\tMaap[f]=1;\n\t\tprint(Map[f]);\n\t\tMaap[f]=0;\n\t}\n\telse\n\t\tcout<<f;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i=-~i)\n\t\tfgets(a[i],N,stdin);\n\tfgets(a[n+1],N,stdin);//\u989d\u5916\u8bfb\u5165\u4e00\u884c\n\tfor(int i=2;i<=n+1;i=-~i){\n\t\tif(a[i][0]=='#'){\n\t\t\tif(a[i][1]=='d'){\n\t\t\t\tint now=8;\n\t\t\t\tstring f,g;\n\t\t\t\twhile(a[i][now]!=' ')\n\t\t\t\t\tf+=a[i][now++];\n\t\t\t\tnow++;\n\t\t\t\twhile(a[i][now]!='\\n')\n\t\t\t\t\tg+=a[i][now++];\n\t\t\t\tMap[f]=g;\n\t\t\t}//\u5b9a\u4e49\u66ff\u6362\n\t\t\tif(a[i][1]=='u'){\n\t\t\t\tint now=7;\n\t\t\t\tstring f;\n\t\t\t\twhile(a[i][now]!='\\n')\n\t\t\t\t\tf+=a[i][now++];\n\t\t\t\tMap[f]=f;\n\t\t\t}//\u53d6\u6d88\u5b9a\u4e49\n\t\t\tputs(\"\");\n\t\t\tcontinue;\n\t\t}\n\t\tint now=0;\n\t\tstring f,g;\n\t\twhile(a[i][now]!='\\n'){\n\t\t\tif(check(a[i][now])){\n\t\t\t\tprint(f);\n\t\t\t\tf=g;\n\t\t\t\tprintf(\"%c\",a[i][now]);\n\t\t\t}//\u8bfb\u53d6\u5230\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u8fdb\u884c\u9012\u5f52\u66ff\u6362\n\t\t\telse\n\t\t\t\tf+=a[i][now];\n\t\t\tnow++;\n\t\t}\n\t\tprint(f);//\u5269\u4f59\u7684\u6807\u8bc6\u7b26\n\t\tf=g;\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n---\n### Ps:\n\n1.\u591a\u6b21\u66ff\u6362\u5c31\u662f\u9012\u5f52\u66ff\u6362\u7684\u7b80\u5316\u7248\u3002  \n\n2.\u6c11\u95f4\u6570\u636e\u5361\u54c8\u5e0c\u8868\uff0c\u6240\u4ee5\u6211\u6539\u6210\u4e86 map\u3002\n\n3.\u6b64\u4ee3\u7801\u53ef\u8fc7\u5b98\u65b9\u6570\u636e\uff0c\u65e0\u6cd5\u901a\u8fc7\u90e8\u5206\u6c11\u95f4\u6570\u636e\uff08\u8c8c\u4f3c\u4e0e\u7a7a\u683c\u6709\u5173\uff1f\u81f3\u4eca\u672a\u89e3\u51b3\uff0c\u53d1\u73b0\u8bf7\u6307\u51fa\uff0c\u4e5f\u8bb8\u4f1a\u8865\u9505 QAQ\u3002\n",
        "postTime": 1650978617,
        "uid": 178259,
        "name": "anideahe",
        "ccfLevel": 7,
        "title": "\u7701\u9009\u8054\u8003 2022 Day1 T1"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\n\n\u4e00\u9053\u6a21\u62df\u9898\uff0c\u6a21\u62df\u65b9\u6cd5\u9898\u76ee\u4e2d\u5df2\u7ed9\u51fa\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u4f18\u5316\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 `map` \u8bb0\u5f55\u6dfb\u52a0\u7684\u5b8f\u548c\u5220\u53bb\u7684\u5b8f\u3002\u4e0b\u9762\u662f\u5e94\u7528\u5230\u7684\u53d8\u91cf\uff1a\n\n- `int n`\uff1a\u9700\u8981\u5904\u7406\u7684\u4ee3\u7801\u884c\u6570\u3002\n\n- `map<string,string> mp`\uff1a\u7528\u6765\u8bb0\u5f55\u6dfb\u52a0\u7684\u5b8f\u7684\u5185\u5bb9\u3002\n\n- `map<string,int> id`\uff1a\u7528\u6765\u8bb0\u5f55\u6dfb\u52a0\u7684\u5b8f\u7684\u7f16\u53f7\uff08\u7b2c\u51e0\u4e2a\u52a0\u5165\u7684\uff09\u3002\n\n- `int cnt`\uff1a\u7528\u6765\u8bb0\u5f55\u5df2\u7ecf\u6dfb\u52a0\u8fc7\u51e0\u4e2a\u5b8f\uff08\u6ce8\u610f\u662f**\u6dfb\u52a0\u8fc7**\uff0c\u800c\u4e0d\u662f\u73b0\u6709\uff09\u3002\n\n- `bool del[MAXN]`\uff1a\u7528\u6765\u8bb0\u5f55\u201c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5220\u53bb\u7684\u5b8f\uff0c\u5b83\u6240\u5bf9\u5e94\u7684 `id` \u662f\u591a\u5c11\u201d\uff0c\u5373\u8fd9\u4e2a\u201c\u5220\u53bb\u7684\u5b8f\u201d\u539f\u6765\u7684\u7f16\u53f7\u3002\n\n- `bool vis[MAXN]`\uff1a\u7528\u6765\u5728\u201c\u9012\u5f52\u5c55\u5f00\u201d\u65f6\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5b8f\u662f\u5426\u5df2\u7ecf\u88ab\u5c55\u5f00\u8fc7\uff08\u662f\u5426\u7528\u8fc7\u4e86\uff09\uff0c\u6ce8\u610f\u56de\u6eaf\u3002\n\n\u4e0b\u9762\u8fdb\u884c\u6a21\u62df\u3002\n\n### Part 1\n\n\u5bf9\u4e8e `#define <name> <content>` \u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5206\u6790\u51fa `name` \u548c `content`\uff0c\u7136\u540e\u8bb0\u5f55 `mp` \u548c `id`\u3002\n\n```cpp\nvoid define(string str){\n    int i;\n    string a=\"\",b=\"\";\n    for(i=8;i<=str.length();i++){//\u4ecename\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5206\u89e3\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u683c\n        if(str[i]==' ') break;\n        a+=str[i];\n        aa[i-8]=str[i];\n    }\n    for(++i;i<=str.length();i++){//\u7a7a\u683c\u540e\u9762\u7684\u90fd\u662fcontent\n        b+=str[i];\n    }\n    mp[a]=b;//\u8bb0\u5f55mp\n    id[a]=++cnt;//\u8bb0\u5f55id\n}\n```\n\n\u5bf9\u4e8e `#undef <name>` \u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5206\u6790\u51fa `name`\uff0c\u6807\u8bb0 `del`\u3002\n\n```cpp\nvoid undef(string str){\n    int i;\n    string a=\"\";\n    for(i=7;i<str.length();i++){//\u4ecename\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5206\u89e3\uff0c\u76f4\u81f3\u672b\u5c3e\n        a+=str[i];\n    }\n    del[id[a]]=1;//\u6807\u8bb0del\n}\n```\n\n\u5bf9\u4e8e\u666e\u901a\u6587\u672c\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4ece\u524d\u5230\u540e\u5206\u89e3\u51fa\u6bcf\u4e00\u4e2a**\u6807\u8bc6\u7b26**\u3002\u5e76\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u4e3a\u5408\u6cd5\u5b58\u5728\u7684\u5b8f\u540d\u3002\u5982\u679c\u662f\uff0c\u5bf9\u5176\u8fdb\u884c**\u9012\u5f52\u64cd\u4f5c**\uff0c\u8fdb\u884c\u201c\u591a\u6b21\u5c55\u5f00\u201d\u548c\u201c\u9012\u5f52\u5c55\u5f00\u201d\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u76f4\u63a5\u8f93\u51fa\uff0c\u5e76\u5411\u540e\u67e5\u627e\u3002\n\n```cpp\nbool check(char c){//\u68c0\u67e5\u8be5\u4f4d\u662f\u5426\u662f\u6807\u8bc6\u7b26\u7684\u67d0\u4e00\u4f4d\uff0c\u662f\u5c31\u8fd4\u56de1\uff0c\u4e0d\u662f\u8fd4\u56de0\n    if(c>='a'&&c<='z'||c>='A'&&c<='Z') return 1;\n    if(c>='0'&&c<='9') return 1;\n    if(c=='_') return 1;\n    return 0;\n}\nvoid work(string str){//\u5c55\u5f00\u6587\u672c\n    string a=\"\";\n    str+=\" \";//\u5728\u6587\u672c\u672b\u5c3e\u52a0\u4e00\u4f4d\u7a7a\u683c\uff0c\u7528\u6765\u68c0\u67e5\u6700\u540e\u4e00\u7ec4\u6807\u8bc6\u7b26\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\n    for(int i=0;i<str.length();i++){\n        if(check(str[i])) a+=str[i];//\u5982\u679c\u8be5\u4f4d\u662f\u6807\u8bc6\u7b26\u7684\u5408\u6cd5\u4f4d\n        else{//\u5982\u679c\u4e0d\u662f\n            if(mp.find(a)==mp.end()) cout<<a;//a\u4e0d\u662f\u5b9a\u4e49\u8fc7\u7684\u5b8f\n            else{//a\u662f\u5b8f\n                if(del[id[a]]||vis[id[a]]){//a\u5df2\u7ecf\u88ab\u5220\u9664\u6216\u5728\u9012\u5f52\u5c55\u5f00\u4e2d\u8bbf\u95ee\u8fc7\n                    cout<<a;\n                }\n                else{//\u7b26\u5408\u9012\u5f52\u5c55\u5f00\u6761\u4ef6\uff0c\u8fdb\u884c\u9012\u5f52\n                    vis[id[a]]=1;//\u6807\u8bb0\u4ee5\u8bbf\u95ee\n                    work(mp[a]);//\u9012\u5f52\n                    vis[id[a]]=0;//\u56de\u6eaf\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u770b\u4e00\u4e0b\u6837\u4f8b3\n                }\n                \n            }\n            a=\"\";\n            if(i!=str.length()-1&&str[i]!=0) cout<<str[i];\n            //\u5982\u679ci\u4e0d\u662f\u52a0\u4e0a\u53bb\u7684\u54ea\u4e00\u4f4d\uff0c\u5e76\u4e14\u4e0d\u662f\u7a7a\u4f4d\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u80fd\u51fa\u73b0\u7a7a\u4f4d\u5b57\u7b26\u7684\u60c5\u51b5\uff09\uff0c\u8f93\u51fa\u8be5\u4f4d\u975e\u6807\u8bc6\u7b26\n        }\n    }\n}\n```\n\n\u7136\u540e\u7efc\u5408\u4e00\u4e0b\u5c31\u597d\u5566~~\n\n## \u53c2\u8003\u4ee3\u7801\n\n\u8fd9\u91cc\u5c31\u4e0d\u518d\u591a\u89e3\u91ca\u5566\uff0c\u4e0a\u6587\u5df2\u7ecf\u8bf4\u660e\u5566~\n\n\u6709\u56f0\u60d1\u53ef\u4ee5\u72ec\u7acb\u601d\u8003\u4e00\u4e0b\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<map>\n#define MAXN 105\nusing namespace std;\nint n,cnt;\nmap <string,string> mp;\nmap <string,int> id;\nbool vis[MAXN],del[MAXN];\nvoid define(string str){\n    string a=\"\",b=\"\";\n    char aa[100];\n    if(str[1]=='d'){\n        int i;\n        for(i=8;i<=str.length();i++){\n            if(str[i]==' ') break;\n            a+=str[i];\n            aa[i-8]=str[i];\n        }\n        for(++i;i<=str.length();i++){\n            b+=str[i];\n        }\n        mp[a]=b;\n        id[a]=++cnt;\n    }\n    else{\n        int i;\n        a=\"\";\n        for(i=7;i<str.length();i++){\n            a+=str[i];\n        }\n        del[id[a]]=1;\n    }\n}\nbool check(char c){\n    if(c>='a'&&c<='z'||c>='A'&&c<='Z') return 1;\n    if(c>='0'&&c<='9') return 1;\n    if(c=='_') return 1;\n    return 0;\n}\nvoid work(string str){\n    string a=\"\";\n    str+=\" \";\n    for(int i=0;i<str.length();i++){\n        if(check(str[i])) a+=str[i];\n        else{\n            if(mp.find(a)==mp.end()) cout<<a;\n            else{\n                if(del[id[a]]||vis[id[a]]){\n                    cout<<a;\n                }\n                else{\n                    vis[id[a]]=1;\n                    work(mp[a]);\n                    vis[id[a]]=0;\n                }\n                \n            }\n            a=\"\";\n            if(i!=str.length()-1&&str[i]!=0) cout<<str[i];\n        }\n    }\n}\nint main(){\n    scanf(\"%d\\n\",&n);\n    for(int i=1;i<=n;i++){\n        string str;\n        getline(cin,str);\n        if(str[0]=='#'){\n            define(str);//\u5408\u4e8c\u4e3a\u4e00\uff08\n            printf(\"\\n\");\n        }\n        else{\n            work(str);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n## Thanks",
        "postTime": 1650635963,
        "uid": 166234,
        "name": "Aiopr_2378",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P8289 [\u7701\u9009\u8054\u8003 2022] \u9884\u5904\u7406\u5668"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u70b9\u8fd9\uff01](https://xenonwzh.github.io/pro2022-preprocessor/)\n\n# \u9898\u610f\u63cf\u8ff0\n\n\u5bf9\u4e8e\u8be5\u9898\uff0c\u4f60\u9700\u8981\u5c55\u5f00 `#define` \u5b8f\u5b9a\u4e49\u3002\u672c\u9898\u4e2d\u7684\u5b8f\u5b9a\u4e49\u4e0e C++ \u4e2d\u7684\u5b8f\u5b9a\u4e49\u5927\u81f4\u76f8\u540c\uff0c\u4e0d\u8fc7\u6709\u4e0b\u5217\u7279\u70b9\uff1a\n\n- \u53ef\u4ee5\u7528 `#undef` \u53d6\u6d88\u5b8f\u5b9a\u4e49\uff1b\n- \u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u5c55\u5f00\u3002\u5982 `#define a b+e`\uff0c`#define b c+d`\uff0c\u5bf9\u4e8e `a` \u6700\u7ec8\u5c55\u5f00\u7ed3\u679c\u4e3a `c+d+e`\uff1b\n- \u53ef\u4ee5\u8fdb\u884c\u9012\u5f52\u5c55\u5f00\uff0c\u4f46\u82e5\u5f85\u5c55\u5f00\u7684\u5b8f\u540d\u4e0e\u6b63\u5728\u8fdb\u884c\u5c55\u5f00\u7684\u67d0\u4e2a\u5b8f\u540d\u76f8\u540c\uff0c\u4e3a\u4e86\u9632\u6b62\u65e0\u9650\u9012\u5f52\uff0c\u6b64\u65f6\u5b8f\u540d\u5c31\u4e0d\u518d\u5c55\u5f00\u3002\u5982 `#define a b+c`\uff0c`#define b a+a`\uff0c\u5bf9\u4e8e `b` \u7684\u5c55\u5f00\u7ed3\u679c\u5373\u4e3a `b+c+b+c`\u3002\n\n\u5176\u4ed6\u7ec6\u8282\u8be6\u89c1\u9898\u9762\u3002\n\n# \u89e3\u9898\u601d\u8def\n\n~~\u4e00\u9053\u8ba9 OI \u5012\u9000 15 \u5e74\u7684\u9898~~\n\n\u672c\u9898\u662f\u4e00\u9053\u7ec6\u8282\u8d85\u591a\u7684\u6a21\u62df\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u89e3\u51b3\u8fd9\u9053\u9898\u7684\u8f93\u5165\u3002\u4ee5\u5206\u9694\u7b26\u4e3a\u754c\uff0c\u5206\u6bb5\u8bfb\u5165\u5373\u53ef\u3002\u6bcf\u4e2a\u5206\u9694\u7b26\uff08\u5305\u62ec\u7a7a\u683c\uff09\u53ef\u4ee5\u770b\u6210\u5355\u72ec\u4e00\u4e2a\u5b57\u7b26\u4e32\u8bfb\u5165\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528 `std::map<std::string, std::string>` \u5b58\u50a8 `#define` \u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5bf9\u4e8e `#undef`\uff0c\u6211\u4eec\u4ec5\u9700\u5728 `map` \u4e2d\u5220\u9664\u8be5\u9879\u5373\u53ef\u3002\n\n\u6700\u540e\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u662f\u5b57\u7b26\u4e32\u5c55\u5f00\u95ee\u9898\uff0c\u4e5f\u662f\u672c\u9898\u4e2d\u7ec6\u8282\u6700\u591a\u7684\u90e8\u5206\u3002\n\n\u7531\u4e8e\u672c\u9898\u4e2d\u6d89\u53ca\u4e86\u9012\u5f52\u5c55\u5f00\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u9012\u5f52\u6765\u7f16\u5199\u5904\u7406\u51fd\u6570 `solve`\u3002\u9996\u5148\u8003\u8651\u5728 `map` \u4e2d\u662f\u5426\u6709\u5df2\u7ecf\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u6216\u8005\u662f\u5426\u88ab\u6253\u6807\u8bb0\uff0c\u82e5 `map` \u4e2d\u6ca1\u6709\u6216\u88ab\u6253\u4e86\u6807\u8bb0\u5219\u76f4\u63a5\u8f93\u51fa\u3002\u82e5\u6709\uff0c\u5219\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u8fdb\u884c\u6807\u8bb0\uff08\u5728\u672c\u4ee3\u7801\u4e2d\u4f7f\u7528 `vis` \u8fdb\u884c\uff09\uff1b\n2. \u5c55\u5f00\u5f53\u524d\u7684\u5b57\u7b26\u4e32\uff1b\n3. \u5c06\u5b57\u7b26\u4e32\u5206\u6bb5\u8bfb\u5165\uff08\u8bfb\u5165\u65b9\u5f0f\u89c1\u4e0a\uff09\uff1b\n4. \u5bf9\u4e8e\u6bcf\u6bb5\u5b57\u7b26\u4e32\u5206\u522b\u9012\u5f52\u6c42\u89e3\uff1b\n5. \u53d6\u6d88\u6807\u8bb0\u3002\n\n\u6ce8\u610f 4 \u6b65\u5f88\u91cd\u8981\uff0c\u82e5\u76f4\u63a5\u5c55\u5f00\u540e\u9012\u5f52\uff0c\u5219\u65e0\u6cd5\u5904\u7406\u4e24\u5c06\u8981\u5c55\u5f00\u7684\u5b57\u7b26\u4e32\u5e76\u5217\u7684\u60c5\u51b5\u3002\u63a5\u4e0b\u6765\u4e3a\u8be5\u60c5\u51b5 Hack \u6570\u636e\uff1a\n\n```\n3\n#define a b+c\n#define b a+a\nb\n```\n\u7ed3\u679c\u5e94\u4e3a `b+c+b+c`\uff0c\u4f46\u662f\u76f4\u63a5\u5c55\u5f00\u540e\u9012\u5f52\u7684\u7ed3\u679c\u4f1a\u662f `b+c+a`\u3002\n\n# \u4ee3\u7801\u6f14\u793a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string>\n#include <tuple>\n#include <map>\n#include <vector>\n\nstd::map<std::string, std::string> def;\nstd::map<std::string, bool> vis;\n\ninline bool isID(char ch) {\n    if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || ch == '_') return true;\n    else return false;\n}\n\n// tuple \u4e2d\u7b2c\u4e00\u9879\u4ee3\u8868\u8bfb\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u9879\u8868\u793a\u662f\u5426\u4e3a\u5206\u9694\u7b26\uff0c\u7b2c\u4e09\u9879\u8868\u793a\u7ed3\u675f\u4f4d\u7f6e\u5bf9\u5e94 src \u7684\u4e0b\u6807\n// \u5efa\u8bae\u53ef\u4ee5\u5b66\u4e00\u4e0b tuple \u7684\u7528\u6cd5\ninline std::tuple<std::string, bool, int> reads(std::string src, int pos) {\n    if (isID(src[pos])) {\n        std::string str = \"\";\n        int len = src.length();\n        while (pos < len && isID(src[pos])) {\n            str += src.substr(pos, 1);\n            pos++;\n        }\n        return std::make_tuple(str, true, pos);\n    } else {\n        std::string str = \"\";\n        str += src.substr(pos, 1);\n        return std::make_tuple(str, false, pos + 1);\n    }\n}\n\n// \u8fd9\u4e2a\u51fd\u6570\u4e13\u95e8\u8bfb #define\ninline std::pair<std::string, int> readDef(std::string src, int pos) {\n    int len = src.length();\n    while (pos < len && isspace(src[pos])) pos++;\n    std::string str = \"\";\n    while (pos < len && !isspace(src[pos])) str += src[pos++];\n    return std::make_pair(str, pos);\n}\n\nvoid solve(std::string str) {\n    if (def.count(str) != 0 && !vis[str]) {\n        vis[str] = true;\n        std::string src = str;  // \u6ce8\u610f\u8981\u5b58\u539f\u5148\u5b57\u7b26\u4e32\u4ee5\u5728\u53d6\u6d88\u6807\u8bb0\u65f6\u4f7f\u7528\n        str = def[str];\n        std::tuple<std::string, bool, int> getReads = std::make_tuple(\"\", true, 0);\n        int len = str.length();\n        std::vector<std::string> vec;\n        while (std::get<2>(getReads) < len) {\n            getReads = reads(str, std::get<2>(getReads));\n            vec.push_back(std::get<0>(getReads));\n        }\n        for (std::string each : vec) solve(each);\n        vis[src] = false;\n    } else std::cout << str;\n}\n\nint main() {\n    std::cin.tie(0);\n    std::cout.tie(0);\n\n#ifndef XEDEBUG\n    freopen(\"preprocessor.in\", \"r\", stdin);\n    freopen(\"preprocessor.out\", \"w\", stdout);\n#endif\n\n    int n;\n\n    std::cin >> n;\n    std::cin.ignore();\n\n    for (int i = 1; i <= n; i++) {\n        std::string str;\n        std::getline(std::cin, str);\n        std::tuple<std::string, bool, int> getReads = std::make_tuple(\"\", true, 0);\n        int len = str.length();\n\n        while (std::get<2>(getReads) < len) {\n            getReads = reads(str, std::get<2>(getReads));\n\n            if (std::get<1>(getReads)) {\n                vis.clear();\n                for (auto each : def) vis[each.first] = false;\n                solve(std::get<0>(getReads));\n            } else if (std::get<0>(getReads) == \"#\") {\n                getReads = reads(str, std::get<2>(getReads));\n                if (std::get<0>(getReads) == \"define\") {\n                    std::pair<std::string, int> from = readDef(str, std::get<2>(getReads));\n                    std::string to = str.substr(from.second + 1);\n                    def[from.first] = to;\n                    getReads = std::make_tuple(to, true, len);\n                } else if (std::get<0>(getReads) == \"undef\") {\n                    std::string from = str.substr(std::get<2>(getReads) + 1);\n                    def.erase(from);\n                    getReads = std::make_tuple(from, true, len);\n                } else {\n                    std::cout << \"#\";\n                    getReads = std::make_tuple(\"#\", false, std::get<2>(getReads) + 1);\n                }\n            } else std::cout << std::get<0>(getReads);\n        }\n\n        std::cout << \"\\n\";\n    }\n\n#ifndef XEDEBUG\n    fclose(stdin);\n    fclose(stdout);\n#endif\n\n    return 0;\n}\n```",
        "postTime": 1650548858,
        "uid": 135855,
        "name": "XenonWZH",
        "ccfLevel": 6,
        "title": "\u300c\u8054\u5408\u7701\u9009 2022\u300d\u9884\u5904\u7406\u5668 - \u6a21\u62df"
    },
    {
        "content": "\u8fd9\u662f\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3 qwq\uff0c\u5e0c\u671b\u80fd\u5e2e\u5230\u5927\u5bb6\n\n~~\u867d\u7136\u5927\u6a21\u62df\u4f3c\u4e4e\u5e2e\u4e0d\u5230\u4ec0\u4e48\u5fd9~~\n\n[\u6d1b\u8c37\u94fe\u63a5](https://www.luogu.com.cn/problem/P8289)\n# \u9898\u89e3\n\u8bfb\u5165 **n** \u884c\u5b57\u7b26\u4e32\uff0c\u6bcf\u884c\u9664\u884c\u672b\u7684\u6362\u884c\u7b26\u5916\uff0c\u5747\u7531 **\u53ef\u6253\u5370** ASCII \u5b57\u7b26\uff08ASCII \u7801\u8303\u56f4 32 ~ 126 \uff09\u7ec4\u6210\u3002\u6bcf\u884c\u8981\u4e48\u662f\u9884\u5904\u7406\u547d\u4ee4\uff08\u4ee5 # \u5f00\u5934\uff09\uff0c\u8981\u4e48\u662f\u666e\u901a\u6587\u672c\uff08\u5176\u4ed6\u60c5\u51b5\uff09\n\n\u8bfb\u5165\u53ef\u4ee5\u8fd9\u6837\u5199\n```cpp\nscanf(\"%d\",&n);\ngetchar();//\u53bb\u6389\u7b2c\u4e00\u884c\u672b\u5c3e\u7684\u6362\u884c\u7b26\nfor(int i=1;i<=n;i++){\n\tgetline(cin,s[i]);\n}\n```\n\u6211\u4eec\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5206\u4e3a\u4ee5\u4e0b **\u4e09\u79cd\u60c5\u51b5**\n\n### 1. \u5b8f\u5b9a\u4e49\u547d\u4ee4\n```\n#define <name> <content>\n```\n  \u9898\u9762\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u6240\u4ee5\u53ea\u8bf4\u4e00\u4e0b\u91cd\u70b9\n  - `<name>` \u7531 **\u6807\u8bc6\u7b26** \u7ec4\u6210\uff08\u6807\u8bc6\u7b26\u53ea\u5305\u62ec\u7531 **\u5927\u5c0f\u5199\u5b57\u6bcd** \u548c **\u6570\u5b57** \u4ee5\u53ca **\u4e0b\u5212\u7ebf** \u7ec4\u6210\u7684\u5355\u4e2a\u5b57\u7b26\u6216\u5b57\u7b26\u4e32\uff09\n  \n  - `<content>`\u00a0\u53ef\u4ee5\u5305\u542b **\u4efb\u610f\u53ef\u6253\u5370** ASCII \u5b57\u7b26\uff08\u96f6\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\uff09\n  \n  - \u6700\u540e\u8fd8\u8981\u8f93\u51fa\u6362\u884c\u7b26\uff01\n  \n  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 **\u524d\u4e24\u4e2a\u5b57\u7b26** \u662f\u5426\u4e3a **'#'\u548c'd'** \u6765\u5224\u65ad\u662f\u5426\u4e3a\u5b8f\u5b9a\u4e49\u547d\u4ee4\n  ```cpp\nhd=\"\";\nhd+=s[i][0];\nhd+=s[i][1];//\u524d\u4e24\u4e2a\u5b57\u7b26\n//\u5b8f\u5b9a\u4e49\nif(hd==\"#d\"){\n    p=8;tol++;//\u76f4\u63a5\u4ece\u7b2c9\u4e2a\u5b57\u7b26\u8bfb\u8d77\n    while(s[i][p]!=' '){//\u5168\u662f\u6807\u8bc6\u7b26\uff0c\u8bfb\u5230\u7a7a\u683c\u5c31\u505c\n        part+=s[i][p];\n        p++;\n    }\n    ex[tol]=part;//\u5b8f\u540d\n    p++;\n    part=\"\";//\u6e05\u9664 part\n    while(p<len){//\u66ff\u6362\u5b57\u7b26\u4e32\n        part+=s[i][p];\n        p++;\n    }\n    bef[tol]=part;//\u66ff\u6362\u5185\u5bb9\n    putchar('\\n');//\u522b\u5fd8\u4e86\u6362\u884c\u7b26\n  ```\n### 2.\u53d6\u6d88\u5b8f\u5b9a\u4e49\n```\n#undef <name>\n```\n  \u5220\u9664\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u628a`ex[]`\u4e2d\u7684\u5b57\u7b26\u66ff\u6362\u4e3a\"##\"\uff0c\u8fd9\u6837\u5c31\u65e0\u6cd5\u5bf9\u5e94\u4e86\uff0c\u4e4b\u540e\u7684\u5c55\u5f00\u4e2d\u5c31\u4e0d\u9700\u8981\u7ba1\u5b83\u4e86  ~~\u61d2\u4eba\u5220\u9664\u6cd5~~\n```cpp\nelse if(hd==\"#u\"){\n    p=7;//\u4ece\u7b2c8\u4e2a\u5b57\u7b26\u8bfb\u8d77\n    while(p<len){//\u76f4\u63a5\u8bfb\u5b8c\n        part+=s[i][p];\n        p++;\n    }\n    for(int j=1;j<=tol;j++){\n        if(ex[j]==part){\n            ex[j]=\"##\";//\u5220\u9664\u64cd\u4f5c\n            break;\n        }\n    }\n \tputchar('\\n');\n}\n```\n### 3.\u66ff\u6362\u5b57\u7b26\u4e32\n\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u6837\u4f8b\uff08\u6ca1\u6709\u65e0\u9650\u9012\u5f52\u5c55\u5f00\uff09\n```\n3\n#define a bc+c\n#define c b\na\n```\n\u6211\u4eec\u8bfb\u5165\u4e86\u7b2c\u56db\u884c\u7684 **a** \uff0c\u7136\u540e\u53d1\u73b0\u5b83\u88ab\u5b8f\u5b9a\u4e49\u8fc7\uff0c\u66ff\u6362\u4e3a **bc+c**\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u6709 **bc** \u548c **c** \u4e24\u4e2a\u6807\u8bc6\u7b26\uff0c**c** \u53ef\u518d\u6b21\u88ab\u66ff\u6362\u4e3a **b**\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u6700\u540e\u7684\u7ed3\u679c: **bc+b**\n\n![2DGY4.png](https://s1.328888.xyz/2022/04/22/2DGY4.png)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528**\u51fd\u6570\u7684\u9012\u5f52**\u6765\u66ff\u6362\u6bcf\u4e2a\u88ab\u5b8f\u5b9a\u4e49\u4e86\u7684\u6807\u8bc6\u7b26\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u65e0\u9650\u9012\u5f52\u5c55\u5f00\u5462\uff1f\u7531\u4e8e\u9012\u5f52\u662f\u4e00\u7ea7\u4e00\u7ea7\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5f53\u524d\u8981\u88ab\u66ff\u6362\u7684\u90e8\u5206\u4e8e\u524d\u51e0\u7ea7\u5df2\u7ecf\u88ab\u6362\u6389\u7684\u90e8\u5206\u4f5c\u5bf9\u6bd4\u5373\u53ef\uff0c\u4e4b\u524d\u88ab\u66ff\u6362\u8fc7\u7684\u90e8\u5206\u4fbf\u4e0d\u518d\u66ff\u6362\u3002\n\n\u4ee3\u7801\u5206\u4e3a\u4ee5\u4e0b\u90e8\u5206\n- \u5224\u65ad\u6807\u8bc6\u7b26\n ```cpp\nbool check(char c){\n\u00a0 \u00a0 return (c>='a'&&c<='z')||(c>='A'&&c<='Z')||(c>='0'&&c<='9')||(c=='_');\n}\n```\n- \u5224\u65ad\u8be5\u5b57\u7b26\u4e32\u662f\u5426\u88ab\u66ff\u6362\u8fc7\n```cpp\nbool check_det(string s,int num){//num \u8868\u793a\u9012\u5f52\u7684\u5c42\u6570\n\u00a0 \u00a0 for(int i=1;i<num;i++){\n\u00a0 \u00a0 \u00a0 \u00a0 if(s==fold[i]) return false;//fold[]\u662f\u4e4b\u524d\u5c55\u5f00\u8fc7\u7684\u6807\u8bc6\u7b26\n\u00a0 \u00a0 }\n\u00a0 \u00a0 return true;\n}\n```\n- \u9012\u5f52\u66ff\u6362\u5b57\u7b26\u4e32\n```cpp\nstring unfold(string s,int num){//num \u662f\u9012\u5f52\u5c42\u6570\n    int p=0,len=s.size();string part,all;\n    while(p<len){\n        while(check(s[p])){//\u6807\u8bc6\u7b26\u90e8\u5206\n            part+=s[p];\n            p++;\n        }\n        if(part!=\"\"){\n            if(check_det(part,num)){//\u6ca1\u88ab\u66ff\u6362\u8fc7\n                for(int i=1;i<=tol;i++){\n                    if(part==ex[i]){\n                        fold[num]=part;\n                        part=unfold(bef[i],num+1);\n                        break;\n                    }\n                }\n            }\n            all+=part;\n            part=\"\";\n        }\n        if(p<len) all+=s[p];//\u4e0d\u662f\u6807\u8bc6\u7b26\u4e0d\u7528\u5904\u7406\uff0c\u76f4\u63a5\u52a0\u8fdb\u6765\n        p++;\n    }\n    return all;\n}\n```\n\u6700\u540e\u76f4\u63a5\u8c03\u7528\u51fd\u6570\u5373\u53ef\n```cpp\ncout<<unfold(s[i],1)<<endl;\n```\n## END",
        "postTime": 1650616499,
        "uid": 545327,
        "name": "\u5b64\u8292\u661f\u6cb3233",
        "ccfLevel": 4,
        "title": "\u300c\u6d1b\u8c37P8289\u300d\u9884\u5904\u7406\u5668"
    },
    {
        "content": "- \u5bf9\u81ea\u8eab\u7684\u95ee\u9898\u6709\u4e86\u65b0\u7684\u4f53\u4f1a\u3002\n- \u540c\u5fd7\u4eec\u52a0\u6cb9\uff0c\u5149\u660e\u7684\u672a\u6765\u7b49\u7740\u4f60\u4eec\u3002\n\n**\u9898\u610f**\n- [\u9898\u76ee](https://www.luogu.com.cn/problem/P8289)\u3002\n- \u5bf9\u6587\u672c\u63d0\u4f9b\u5b57\u7b26\u4e32\u66ff\u6362\u5de5\u4f5c\u3002\n- \u6ce8\u610f\u771f\u5b9e\u7684\u9884\u5904\u7406\u5668\u6bd4\u8fd9\u590d\u6742\u8bb8\u591a\u3002\n\n**\u5206\u6790**\n- \u9762\u5bf9\u8fd9\u6837\u7684\u6570\u636e\uff0c\u6211\u4eec\u901a\u5e38\u5206\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u662f\u6253\u51fa\u4e00\u4e2a\u6b63\u786e\u7684\u4ee3\u7801\uff0c\u7b2c\u4e8c\u6b65\u662f\u4f18\u5316\u3002\n- \u90a3\u4e48\u53ef\u4ee5\u5c06\u65b9\u4fbf\u7528\u7684\u51fd\u6570\u5168\u90fd\u5c01\u88c5\u8d77\u6765\u3002\n```cpp\n// \u4e00\u4e9b\u5e38\u7528\u7684\u5df2\u6709\u51fd\u6570\u6bd4\u5982 isalpha isdigit \u548c x.substr \u8fd9\u91cc\u4e0d\u518d\u5b9e\u73b0\u3002\nbool istxt(char x)\n{\n\treturn isalpha(x)||isdigit(x)||x=='_';\n}\nbool ismrc(const string &x)\n{\n\treturn x[0]=='#';\n}\nint txtpos(const string &x,int id)\n{\n\twhile(id<x.size()&&istxt(id))++id;\n\treturn id;\n}\n```\n- \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5b58\u50a8\u6240\u6709\u7684\u5b8f\u6765\u67e5\u8be2\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u5b58\u50a8\u4e4b\u524d\u6240\u6709\u5df2\u7ecf\u6709\u8fc7\u7684\u5b8f\u6765\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u5730\u7528 $\\text{map}$\u3002\n```cpp\nmap<string,string>mrc;\nset<string>hav; \n```\n- \u6709\u4e86\u8fd9\u4e9b\u4e1c\u897f\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u7b80\u6d01\u4e86\u3002\n- \u4e0b\u9762\u662f\u5904\u7406\u5b8f\u7684\u4ee3\u7801\uff0c\u4e5f\u5c31\u662f\u5224\u65ad\u5b8f\u662f\u5b9a\u4e49\u8fd8\u662f\u53d6\u6d88\uff0c\u52a0\u5165\u5b8f\u5e93\u5185\uff1a\n```cpp\nvoid solvemrc(const string &x)\n{\n\tif(x[1]=='d')\n\t{\n\t\tint l=8,r=txtpos(x,l);\n\t\tmrc.insert(make_pair(x.substr(l,r-l),x.substr(r+1,x.size()-r-1)));\n\t}\n\telse mrc.erase(x.substr(7,x.size()-7));\n}\n```\n- \u4e0b\u9762\u662f\u5904\u7406\u5b57\u7b26\u4e32\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u9012\u5f52\uff0c\u4fdd\u5b58\u4ee5\u524d\u7528\u8fc7\u7684\u5b8f\u6765\u9632\u6b62\u65e0\u9650\u9012\u5f52\u3002\n```cpp\nvoid solvetxt(const string &x)\n{\n\tfor(int l=0,r=0;l<x.size();l=r)\n\t{\n\t\twhile(r<x.size()&&!istxt(x[r]))++r;\n\t\tcout<<x.substr(l,r-l);l=r;\n\t\tr=txtpos(x,l);\n\t\tstring nam=x.substr(l,r-l);\n\t\tif(mrc.count(nam)&&!hav.count(nam))\n\t\t{\n\t\t\thav.insert(nam);\n\t\t\tsolvetxt(mrc[nam]);\n\t\t\thav.erase(nam);\n\t\t}\n\t\telse cout<<nam;\n\t}\n}\n```\n- \u6700\u7ec8\u4ee3\u7801\u975e\u5e38\u7b80\u77ed\u975e\u5e38\u597d\u5199\uff0c\u4f46\u662f\u5b83\u65e0\u60c5\u5730[\u8d85\u65f6](https://www.luogu.com.cn/record/74178856)\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5bf9\u5b57\u7b26\u4e32\u5904\u7406\u7684\u65f6\u5019\u975e\u5e38\u5730\u66b4\u529b\uff0c\u53ef\u80fd\u8fbe\u5230 $100\\times 1000^2$ \u7ea7\u522b\uff0c\u7136\u540e\u5e26\u4e2a $\\text{log}$ \u5c31\u88ab\u5361\u5e38\u4e86\u3002\n\n**\u4f18\u5316**\n- \u53ef\u4ee5\u5c1d\u8bd5\u5982\u4e0b\u65b9\u6cd5\u6765\u5361\u5e38\uff1a\n- \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 $\\text{Trie}$ \u6765\u6216\u8005\u54c8\u5e0c\u8868\u5b58\u50a8\uff0c\u8fd9\u6837\u66b4\u529b\u57fa\u672c\u53ef\u4ee5\u8fc7\u3002\n- \u5c06\u975e\u5e38\u6ca1\u7528\u7684\u51fd\u6570\u5c55\u5f00\u6216\u8005\u53d8\u6210\u5b8f\uff0c[\u6700\u7ec8\u4ee3\u7801](https://www.luogu.com.cn/record/74179185)\uff0c\u5b83\u8bf4\u660e\u66b4\u529b\u590d\u6742\u5ea6\u662f\u53ef\u8fc7\u7684\uff0c[\u54c8\u5e0c\u8868\u7684\u5b9e\u73b0](https://www.luogu.com.cn/record/74179365)\u3002\n- \u4f46\u662f\u672c\u9898\u7684\u9898\u76ee\u53eb\u4f18\u5316\u4e0d\u53eb\u5361\u5e38\uff0c\u6240\u4ee5\u5b58\u5728\u4e00\u4e2a\u5f15\u81ea[\u8fd9\u4f4d](https://www.luogu.com.cn/user/52881)\u548c[\u8fd9\u4f4d](https://www.luogu.com.cn/user/69288)\u5927\u4f6c\u7684\u5b9e\u73b0\uff08**\u5df2\u7ecf\u8bc1\u660e\u662f\u9519\u8bef\u7684\uff0c\u5927\u5bb6\u4e0d\u8981\u5b66**\uff09\uff1a\n- \u6211\u4eec\u53d1\u73b0\u9664\u4e86\u4e00\u5f00\u59cb\u7684\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u540e\u7eed\u7684\u5b57\u7b26\u4e32\u5904\u7406\u90fd\u662f\u91cd\u590d\u5730\u5bf9\u5df2\u6709\u7684\u5b8f\u66ff\u6362\u8fdb\u884c\u66f4\u6539\uff0c\u5b83\u5b8c\u5168\u53ef\u4ee5\u8bb0\u5fc6\u5316\u4ee5\u907f\u514d\u5927\u91cf\u4e0d\u5fc5\u8981\u7684\u67e5\u8be2\uff0c\u6700\u574f\u590d\u6742\u5ea6\u4f1a\u6709\u4e00\u4e2a\u8d28\u7684\u98de\u8d8a\u3002\n- [\u5b9e\u73b0](https://www.luogu.com.cn/record/74182141)\uff0c\u603b\u7528\u65f6 $33$ \u6beb\u79d2\uff0c\u751a\u81f3\u662f\u76ee\u524d\u6700\u4f18\u89e3\uff0c\u6bd4 $\\text{hack}$ \u6570\u636e\u6dfb\u52a0\u4e4b\u524d\u7684\u63d0\u4ea4\u90fd\u8dd1\u5f97\u5feb\uff0c\u8fd9\u4ee4\u4eba\u7591\u60d1\u3002\n- \u5f53\u7136\uff0c\u73b0\u5728\u5b98\u65b9\u6570\u636e\u6dfb\u52a0\u540e\u5c31\u4e0d\u662f\u8fd9\u6837\u4e86\uff0c\u90a3\u4e2a\u6734\u7d20\u7684\u8bb0\u5fc6\u5316\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c[hack \u6570\u636e](https://www.luogu.com.cn/paste/asy8zfd7)\uff0c\u4f5c\u8005\u611f\u5230\u62b1\u6b49\u5374\u65e0\u53ef\u5948\u4f55\uff0c\u663e\u7136\u7684\u539f\u56e0\u662f\u4f5c\u8005\u6ca1\u6709\u5b9e\u73b0\u5b8c\u6574\u7684\u8bb0\u5fc6\u5316\uff0c\u5bfc\u81f4\u51fa\u9519\u3002",
        "postTime": 1650206527,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "\u9884\u5904\u7406\u5668"
    },
    {
        "content": "# \u5173\u4e8e\u7b7e\u5230\u9898\u662f\u5927\u6a21\u62df\u8fd9\u4ef6\u4e8b\n\n## \u9898\u76ee\u94fe\u63a5 \n\n[$\\texttt{Link}$](https://www.luogu.com.cn/problem/P8289)\u3002\n\n## \u9898\u9762\u63cf\u8ff0\n\u7ed9\u5b9a $n$ \u884c\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u5f53\u524d\u884c\u5f00\u5934\u4e3a `#` \u8868\u793a\u8be5\u884c\u4e3a\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5f62\u5f0f\u5206\u4e3a\n\n`# define <name> <content>` \u8868\u793a\u5c06 `<name>` \u6240\u8868\u793a\u7684\u5185\u5bb9\u6539\u4e3a `<content>`\uff0c\u5373 `c++` \u4e2d\u7684\u5b8f\u5b9a\u4e49\u3002\n  \n`#undef <name>` \u8868\u793a\u5c06 `<name>` \u7684\u4e0a\u4e00\u4e2a\u5b8f\u5b9a\u4e49\u64a4\u9500\u3002\n  \n\u4e24\u79cd\u60c5\u51b5\u7684\u5404\u90e8\u5206\u90fd\u4e25\u683c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u90fd\u8981\u5728\u6700\u540e\u8f93\u51fa\u56de\u8f66\u3002\n  \n- \u5f53\u524d\u884c\u5f00\u5934\u6ca1\u6709 `#` \u7684\u666e\u901a\u6587\u672c\u3002\u64cd\u4f5c\u4e3a\u5c06\u5176\u6839\u636e\u5b8f\u5b9a\u4e49\u6539\u53d8\u540e\u8f93\u51fa\u3002\n\n## \u7279\u6b8a\u9650\u5236\u53ca\u5751\u70b9\n\n\u6570\u636e\u4fdd\u8bc1\u5b8f\u5b9a\u4e49\u5408\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u5220\u9664\u4e00\u4e2a\u672a\u5b9a\u4e49\u7684\u5b8f\u3002\u4e0d\u9700\u8981\u6211\u4eec\u7279\u610f\u53bb\u8fdb\u884c\u5224\u9519\uff08\u826f\u5fc3\u8036\uff09\u3002\n  \n\u5bf9\u4e8e `<name>`\uff0c\u5b83\u4ec5\u4f1a\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\uff0c\u4f46\u662f  `<content>` \u5305\u542b\u6240\u6709\u5b57\u7b26\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd8\u5305\u542b\u7a7a\u683c\u3002\n  \n\u5bf9\u4e8e\u666e\u901a\u6587\u672c\uff0c\u80fd\u591f\u8bc6\u522b\u6807\u8bc6\u7b26\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\uff0c\u6bd4\u5982\u8bf4\uff0c\u5bf9\u4e8e `A+B` \u800c\u8a00\uff0c\u80fd\u591f\u8fdb\u884c\u5b8f\u5c55\u5f00\u7684\u4ec5\u6709 `A` \u548c `B`\u3002\n  \n\u5173\u4e8e\u5b8f\u5c55\u5f00\uff0c\u662f\u53ef\u4ee5\u5d4c\u5957\u4e0b\u53bb\u7684\uff0c\u6bd4\u5982\uff1a\n\n```pascal\n#define a b\n#define b c\n```\n  \n\u5219\u5bf9\u4e8e\u8f93\u5165\u7684 `a` \u4ee3\u7801\u5757\uff0c\u4f1a\u8f93\u51fa `c`\uff0c\u8fd9\u6837\u81ea\u7136\u800c\u7136\u5c31\u4f1a\u51fa\u73b0\u65e0\u9650\u5d4c\u5957\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u94a6\u5b9a\uff0c\u82e5\u4e00\u4e2a\u5b8f\u6b63\u5728\u5c55\u5f00\uff0c\u5219\u540e\u7eed\u518d\u6b21\u9047\u89c1\u4fbf\u4e0d\u4f1a\u5c55\u5f00\u3002\u4f8b\u5982\uff1a\n  \n```pascal\n#define a b\n#define b a\n```\n  \n\u8f93\u5165 `a` \u5219\u4f1a\u8f93\u51fa `b` \u3002\n  \n## \u5927\u4f53\u601d\u8def\n  \n\u5bf9\u4e8e\u6bcf\u4e2a `<name>` \u6709\u5176\u5bf9\u5e94\u7684 `<content>`\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 $\\texttt{map}$ \u6765\u5b9e\u73b0\u8fd9\u4e00\u5bf9\u5e94\u3002\n  \n## \u5177\u4f53\u5b9e\u73b0\n\n\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 `map<string,string>words;`\u3002\u8868\u793a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e32\u6362\u6210\u4e86\u4ec0\u4e48\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u5b57\u7b26\u4e32\u7684\u5bf9\u5e94\u5c31\u8f7b\u677e\u89e3\u51b3\u4e86\uff0c\u5f53\u7136\u672c\u4f53\u96be\u70b9\u4e0d\u5728\u8fd9\u91cc\u3002\n\n\u9996\u5148\u8003\u8651\u8f93\u51fa\uff0c\u9898\u9762\u975e\u5e38\u7684\u826f\u5fc3\uff0c\u7ed9\u4e86\u8f93\u5165\u63d0\u793a\uff1a\n \n ```cpp\nstring line;\n// \u4ece cin \u8bfb\u5165\u4e00\u884c\uff0c\u653e\u5165 line \u4e2d\uff08\u6362\u884c\u7b26\u88ab\u820d\u5f03\uff09\ngetline(cin, line);\n```\n\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u6bcf\u884c\u7684\u8f93\u5165\uff08\u5305\u62ec\u7a7a\u683c\uff09\u5b58\u5230\u4e86 $\\texttt{line}$ \u8fd9\u4e2a\u53d8\u91cf\u91cc\u3002\n  \n\u9898\u9762\u7684\u6e29\u99a8\u63d0\u793a\u4e5f\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u8bfb\u5165\u5b8c  $n$ \u540e\u4e0d\u8981\u5fd8\u8bb0\u518d $\\texttt{getline}$ \u4e00\u6b21\u3002 \n  \n\u8003\u8651\u600e\u4e48\u5904\u7406\uff0c\u9996\u5148\u5bf9\u4e8e `#` \u60c5\u51b5\uff0c\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u5c06 `<name>` \u548c `<content>` \u53d6\u51fa\uff0c\u6211\u8fd9\u91cc\u7528\u7684\u65b9\u6cd5\u662f\u5199\u4e00\u4e2a\u8fd4\u56de\u503c\u4e3a $\\texttt{string}$ \u7684\u51fd\u6570\uff1a\n  \n```cpp\nstring find1(int x){//\u8868\u793a\u4ecex\u4f4d\u7f6e\u5f00\u59cb\u5230\u7b2c\u4e00\u4e2a\u7a7a\u683c\u4e3a\u6b62\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32,\u7528\u6765\u8bfb\u7b2c\u4e00\u79cd<name>\n\tchar ch[N];\n\tmemset(ch,0,sizeof(ch));//\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u4e0d\u6e05\u96f6\u521d\u503c\u4f1a\u51fa\u95ee\u9898\n\tint tot=0;\n\twhile(line[x+tot]!=' '){\n\t\tch[tot] = line[x+tot];\n\t\ttot++;\n\t}\n\tstring s(ch);//string\u7684\u8d4b\u503c\u65b9\u5f0f\u7684\u4e00\u79cd\uff0c\u4e0d\u77e5\u9053\u4e3a\u5565\u76f4\u63a5\u7528string\u4f1a\u9505\n\treturn s;\n}\nstring find2(int x){//\u8868\u793a\u4ecex\u4f4d\u7f6e\u5230\u8be5\u884c\u6700\u540e\uff0c\u7528\u6765\u8bfb\u7b2c\u4e8c\u79cd<name>\u548c<content>\n\tchar ch[N];\n\tmemset(ch,0,sizeof(ch));\n\tint tot=0;\n\tif(line[x+tot]==32){//32\u662f\u7a7a\u683c\uff0c\u8981\u8d8a\u8fc7\u53bb\n\t\tx++;\n\t}\n\tint z = line.length();\n\twhile(x+tot<=z){//\u6ce8\u610f<content>\u8981\u8bfb\u5230\u6700\u540e\n\t\tch[tot] = line[x+tot];\n\t\ttot++;\n\t}\n\tstring s(ch);\n\treturn s;\n}\n```\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u5b8c\u6210\u4e86\u5bf9 `#` \u7684\u5b58\u50a8\uff0c\u90a3\u5177\u4f53\u64cd\u4f5c\u76f4\u63a5\u653e\u4ee3\u7801\u76f8\u4fe1\u5927\u5bb6\u90fd\u770b\u5f97\u61c2:\n  \n ```cpp\nif(line[0]=='#'){\n\t\tif(line[1]=='d'){\n\t\t\tstring s = find1(8);//#define \u53608\u4e2a\u5b57\u7b26(\u5305\u62ec\u7a7a\u683c\uff09,\u6240\u4ee5\u4ece\u7b2c8\u4e2a(\u5b57\u7b26\u4e32\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb)\u5f80\u540e\u627e\n\t\t\tstring x = find2(8+s.length());//\u8981\u4ece<name>\u540e\u9762\u5f00\u59cb\u627e\n\t\t\twords[s] = x;//\u4e00\u4e00\u5bf9\u5e94\n\t\t\tvis1[s]=1;//\u8be5\u6570\u7ec4\u7528\u6765\u8bb0\u5f55s\u662f\u5426\u6709\u5bf9\u5e94\u7684\u5b8f\u5c55\u5f00\n\t\t}else{\n\t\t\tstring s = find2(7);//#undef \u540c\u4e0a\n\t\t\tvis1[s]=0;\n\t\t}\n\t}\n```\n\u7ec8\u4e8e\u5230\u4e86\u6700\u5173\uff08e\uff09\u952e\uff08xin\uff09\u7684\u4e00\u6b65\u8f93\u51fa\u3002\n  \n\u8001\u89c4\u77e9\u8fd8\u662f\u5199\u6210\u51fd\u6570\uff08\u5de5\u6574.jpg\uff09\n  \n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5f53\u4ec0\u4e48\u6761\u4ef6\u4e0b\u624d\u53ef\u4ee5\u76f4\u63a5\u88ab\u8f93\u51fa\uff0c\u662f\u6ca1\u6709\u5bf9\u5e94\u7684\u5b8f\u5c55\u5f00\u5417\uff1f\u5e76\u4e0d\u5bf9\uff0c\u4e3e\u4e2a\u4f8b\u5b50:\n  \n```pascal\n#define A a\n#define B b\n```\n\u663e\u7136 `A+B` \u8fd9\u73a9\u610f\u6ca1\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5b8f\u5b9a\u4e49\uff0c\u4f46\u662f\u6839\u636e\u4e4b\u524d\u6240\u8bf4\uff0c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u4ee3\u7801\u5757\u5e94\u8be5\u662f `A`\u548c `B` \u6240\u4ee5\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u5148\u5c06\u5b83\u62c6\u6210\u51e0\u6bb5\u8fde\u7eed\u7684\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4e2d\u95f4\u7531\u5176\u5b83\u5b57\u7b26\u8fde\u63a5\uff0c\u82e5\u8fd9\u51e0\u6bb5\u90fd\u4e0d\u80fd\u518d\u5c55\u5f00\uff0c\u624d\u8bf4\u660e\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u518d\u8003\u8651\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u5c55\u5f00\uff0c\u6839\u636e\u9898\u9762\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5373\u4fbf\u5f53\u5b83\u6709\u5bf9\u5e94\u7684\u5b8f\u5b9a\u4e49\u65f6\uff0c\u5982\u679c\u4e4b\u524d\u6709\u76f8\u540c\u7684\u5b8f\u6b63\u5728\u5c55\u5f00\uff0c\u5c31\u4e0d\u80fd\u7ee7\u7eed\u5c55\u5f00\u9632\u6b62\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u79cd\u4e1c\u897f\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u5199\u6cd5\uff0c\u6bcf\u6b21\u9012\u5f52\u4e0b\u4e00\u5c42\u524d\uff0c\u5c06\u4f7f\u7528\u7684\u5b8f\u5b9a\u4e49\u6253\u4e0a\u6807\u8bb0\u3002\u6240\u4ee5\u53ef\u4ee5\u518d\u5f00\u4e2a $\\texttt{map}$ \u6765\u8bb0\u5f55\u5f53\u524d\u6b63\u5728\u5c55\u5f00\u7684\u5b8f\u3002\n  \n\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n  \n### Part1\n\n```cpp\nmap<string,bool>vis2;//vis2\u6570\u7ec4\u7528\u6765\u8868\u793a\u5f53\u524ds\u8868\u793a\u7684\u5b8f\u662f\u5426\u5728\u5c55\u5f00\nvoid chu(string s){ \n\tif(pan(s)){//\u89c1\u4e0b\u4e00\u90e8\u5206\u4ee3\u7801\n\t\tcout<<s;\n\t\treturn;\n\t}\n\tif(vis1[s]&&!vis2[s]){\n\t\tvis2[s] = 1;\n\t\tchu(words[s]);\n\t\tvis2[s] = 0;//\u9012\u5f52\u5199\u6cd5\u5f53s\u5c55\u5f00\u5b8c\u4ee5\u540e\u8981\u5c06\u5176\u6807\u4e3a\u53ef\u5c55\u5f00\n\t}else{\n\t\tint tot=0;char ch[N];int z = s.length();\n\t\tmemset(ch,0,sizeof(ch));//\u8ddffind\u540c\u7406\n\t\tfor(int i=0;i<z;i++){\n\t\t\tif((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')||(s[i]=='_')){\n\t\t\t\tch[tot] = s[i];\n\t\t\t\ttot++;\n\t\t\t}else{\n\t\t\t\tif(tot>0){\n\t\t\t\t\tstring ss(ch);\n\t\t\t\t\tmemset(ch,0,sizeof(ch));\n\t\t\t\t\tchu(ss);//\u9012\u5f52\u4e0b\u53bb\u76f4\u81f3\u80fd\u8f93\u51fa\u3002\n\t\t\t\t\ttot = 0;\n\t\t\t\t}\n\t\t\t\tcout<<s[i];\n\t\t\t}\n\t\t}\n\t\tif(tot>0){//\u6ce8\u610f\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u90fd\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u6240\u4ee5\u8981\u7279\u5224\u4e00\u4e0b\u3002\n\t\t\tstring ss(ch);\n\t\t\tchu(ss);\n\t\t}\n\t}\n}\n```\n### Part2\n  \n```cpp\nbool pan(string s){//\u68c0\u67e5\u8be5\u5b57\u7b26\u4e32\u662f\u5426\u80fd\u591f\u76f4\u63a5\u8f93\u51fa\n\tif(vis1[s]&&!vis2[s]){//\u6ce8\u610f\u5982\u679c\u5f53\u524ds\u5df2\u7ecf\u5c55\u5f00\u4e86\u5373\u4f7f\u6709\u5bf9\u5e94\u5b8f\u5b9a\u4e49\u4e5f\u4e0d\u610f\u5473\u7740\u4e0d\u80fd\u591f\u76f4\u63a5\u8f93\u51fa\n\t\treturn false;\n\t}\n\tint z = s.length();\n\tfor(int i=0;i<z;i++){\n\t\tif((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')||(s[i]=='_')){\n\t\t\t//\u8fd9\u91cc\u5077\u4e2a\u61d2\u4e0d\u6539\u6210\u5426\u5b9a\u7684\u5f62\u5f0f\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n```\n                                                             \n\u4e00\u5207\u51c6\u5907\u5c31\u7eea\uff0c\u5c31\u5dee\u6700\u540e\u5b8c\u6574\u7684\u4ee3\u7801\u4e86\uff1a\n                                    \n## Code:\n                                             \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cmath>\n#include <map>\nusing namespace std;\nconst int N = 110;\nstring line;\nmap<string,string>words;\nmap<string,bool>vis1;\nmap<string,bool>vis2;//vis2\u6570\u7ec4\u7528\u6765\u8868\u793a\u5f53\u524ds\u8868\u793a\u7684\u5b8f\u662f\u5426\u5728\u5c55\u5f00\nstring find1(int x){//\u8868\u793a\u4ecex\u4f4d\u7f6e\u5f00\u59cb\u5230\u7b2c\u4e00\u4e2a\u7a7a\u683c\u4e3a\u6b62\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\n\tchar ch[N];\n\tmemset(ch,0,sizeof(ch));//\u6ce8\u610f\u8fd9\u91cc\u5982\u679c\u4e0d\u6e05\u96f6\u521d\u503c\u4f1a\u51fa\u95ee\u9898\n\tint tot=0;\n\twhile(line[x+tot]!=' '){\n\t\tch[tot] = line[x+tot];\n\t\ttot++;\n\t}\n\tstring s(ch);//string\u7684\u8d4b\u503c\u65b9\u5f0f\u7684\u4e00\u79cd\uff0c\u4e0d\u77e5\u9053\u4e3a\u5565\u76f4\u63a5\u7528string\u4f1a\u9505\n\treturn s;\n}\nstring find2(int x){//\u8868\u793a\u4ecex\u4f4d\u7f6e\u5230\u8be5\u884c\u6700\u540e\n\tchar ch[N];\n\tmemset(ch,0,sizeof(ch));\n\tint tot=0;\n\tif(line[x+tot]==32){//32\u662f\u7a7a\u683c\uff0c\u8981\u8d8a\u8fc7\u53bb\n\t\tx++;\n\t}\n\tint z = line.length();\n\twhile(x+tot<=z){//\u6ce8\u610f<content>\u8981\u8bfb\u5230\u6700\u540e\n\t\tch[tot] = line[x+tot];\n\t\ttot++;\n\t}\n\tstring s(ch);\n\treturn s;\n}\nbool pan(string s){//\u68c0\u67e5\u8be5\u5b57\u7b26\u4e32\u662f\u5426\u80fd\u591f\u76f4\u63a5\u8f93\u51fa\n\tif(vis1[s]&&!vis2[s]){//\u6ce8\u610f\u5982\u679c\u5f53\u524ds\u5df2\u7ecf\u5c55\u5f00\u4e86\u5373\u4f7f\u6709\u5bf9\u5e94\u5b8f\u5b9a\u4e49\u4e5f\u4e0d\u610f\u5473\u7740\u4e0d\u80fd\u591f\u76f4\u63a5\u8f93\u51fa\n\t\treturn false;\n\t}\n\tint z = s.length();\n\tfor(int i=0;i<z;i++){\n\t\tif((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')||(s[i]=='_')){\n\t\t\t//\u8fd9\u91cc\u5077\u4e2a\u61d2\u4e0d\u6539\u6210\u5426\u5b9a\u7684\u5f62\u5f0f\u3002\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvoid chu(string s){ \n\tif(pan(s)){//\u89c1\u4e0b\u4e00\u90e8\u5206\u4ee3\u7801\n\t\tcout<<s;\n\t\treturn;\n\t}\n\tif(vis1[s]&&!vis2[s]){\n\t\tvis2[s] = 1;\n\t\tchu(words[s]);\n\t\tvis2[s] = 0;//\u9012\u5f52\u5199\u6cd5\u5f53s\u5c55\u5f00\u5b8c\u4ee5\u540e\u8981\u5c06\u5176\u6807\u4e3a\u53ef\u5c55\u5f00\n\t}else{\n\t\tint tot=0;char ch[N];int z = s.length();\n\t\tmemset(ch,0,sizeof(ch));//\u8ddffind\u540c\u7406\n\t\tfor(int i=0;i<z;i++){\n\t\t\tif((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')||(s[i]=='_')){\n\t\t\t\tch[tot] = s[i];\n\t\t\t\ttot++;\n\t\t\t}else{\n\t\t\t\tif(tot>0){\n\t\t\t\t\tstring ss(ch);\n\t\t\t\t\tmemset(ch,0,sizeof(ch));\n\t\t\t\t\tchu(ss);//\u9012\u5f52\u4e0b\u53bb\u76f4\u81f3\u80fd\u8f93\u51fa\u3002\n\t\t\t\t\ttot = 0;\n\t\t\t\t}\n\t\t\t\tcout<<s[i];\n\t\t\t}\n\t\t}\n\t\tif(tot>0){//\u6ce8\u610f\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u90fd\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u6784\u6210\uff0c\u6240\u4ee5\u8981\u7279\u5224\u4e00\u4e0b\u3002\n\t\t\tstring ss(ch);\n\t\t\tchu(ss);\n\t\t}\n\t}\n}\n\n\nvoid init(){\n\tif(line[0]=='#'){\n\t\tif(line[1]=='d'){\n\t\t\tstring s = find1(8);//#define \u53608\u4e2a\u5b57\u7b26(\u5305\u62ec\u7a7a\u683c\uff09,\u6240\u4ee5\u4ece\u7b2c8\u4e2a(\u5b57\u7b26\u4e32\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb)\u5f80\u540e\u627e\n\t\t\tstring x = find2(8+s.length());//\u8981\u4ece<name>\u540e\u9762\u5f00\u59cb\u627e\n\t\t\twords[s] = x;//\u4e00\u4e00\u5bf9\u5e94\n\t\t\tvis1[s]=1;//\u8be5\u6570\u7ec4\u7528\u6765\u8bb0\u5f55s\u662f\u5426\u6709\u5bf9\u5e94\u7684\u5b8f\u5c55\u5f00\n\t\t}else{\n\t\t\tstring s = find2(7);//#undef \u540c\u4e0a\n\t\t\tvis1[s]=0;\n\t\t}\n\t}\n    else{\n\t\tchu(line);\n\t}\n}\nint n;\nint main(){\n\tcin>>n;\n\tgetline(cin,line);\n\tfor(int i=1;i<=n;i++){\n\t\tgetline(cin,line);\n\t\tinit();\n\t\tif(i<n){\n\t\t\tcout<<\"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u8bf4\u53e5\u95f2\u8bdd\uff0c\u6211\u6ca1\u53c2\u52a0\u8054\u5408\u7701\u9009\uff0cSD\u7684\u8dea\u6c42SDOI\u522b\u5bc4\u2014\u2014\n  \n$The$ $end$",
        "postTime": 1650962160,
        "uid": 369399,
        "name": "yizhiming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P8289 [\u7701\u9009\u8054\u8003 2022] \u9884\u5904\u7406\u5668"
    },
    {
        "content": "\u672c\u9898\u5c31\u662f\u4e00\u9053\u6a21\u62df\u9898\uff0c\u5927\u6a21\u62df\u5e76\u4e0d\u662f\u6ca1\u6709\u601d\u8def\u53ef\u8a00\u7684\u3002\u5bf9\u4e8e\u8981\u6c42\u7e41\u6742\u7684\u9898\u76ee\uff0c\u5982\u679c\u60f3\u8981\u4e00\u8e74\u800c\u5c31\u5730\u5199\uff0c\u4ee3\u7801\u5e38\u5e38\u4f1a\u53d8\u5f97\u5197\u957f\u800c\u4e14\u6613\u9519\uff0c\u53e6\u5916\u8fd8\u6709\u8bb8\u591a\u7ec6\u8282\u6027\u7684\u95ee\u9898\u5bb9\u6613\u51fa\u6f0f\u6d1e\u3002\u6240\u4ee5\uff0c\u5927\u6a21\u62df\u9700\u8981\u91c7\u53d6**\u81ea\u9876\u5411\u4e0b**\u7684\u5f00\u53d1\u65b9\u5f0f\u3002\n\n\u6240\u8c13\u81ea\u9876\u5411\u4e0b\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u5148\u5bf9\u4ee3\u7801\u7684\u6574\u4f53\u6d41\u7a0b\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u903b\u8f91\u601d\u8def\u3002\u60f3\u8c61\u4e00\u4e0b\u5e73\u5e38\u5199\u7b97\u6cd5\u9898\uff1a\u5148\u7406\u51fa\u57fa\u672c\u7b97\u6cd5\uff0c\u5217\u51fa `main` \u51fd\u6570\u5185\u8981\u505a\u7684\u4e8b\uff08\u6bd4\u5982\u7528\u5230\u4e86 $\\texttt{SPFA}$ \u7b49\uff09\uff0c\u7136\u540e\u518d\u53bb\u5b8c\u5584\u76f8\u5173\u51fd\u6570\u3002\u5f62\u8c61\u7684\u8bf4\uff0c\u5f00\u53d1\u8fc7\u7a0b\u662f**\u9012\u5f52**\u8fdb\u884c\u7684\u3002\n\n\u672c\u9898\u8981\u6c42\u8ba1\u7b97\u5b8f\u7684\u6269\u5c55\u3002\u5bf9\u4e8e\u6bcf\u4e00\u884c\u4ee3\u7801\uff0c\u7b2c\u4e00\u6b65\u5224\u65ad\u8fd9\u884c\u4ee3\u7801\u7684\u7c7b\u578b\uff1a\u5b8f\u5b9a\u4e49\u3001\u89e3\u9664\u5b9a\u4e49\u6216\u8005\u662f\u666e\u901a\u7684\u6587\u672c\u3002\u5982\u679c\u53ea\u8003\u8651\u7ec6\u8282\uff0c\u53ef\u4ee5\u5148\u5199\u51fa\u5982\u4e0b\u7684\u903b\u8f91\uff1a\n\n```\nvoid execute(string & text) {\n\tstring result = \"\";\n\tif ( /*\u662f\u5b8f\u5b9a\u4e49*/ ) {\n\t\tdef_macro(name, declaration);\n\t}\n\telse if ( /*\u662f\u89e3\u9664\u5b8f\u5b9a\u4e49*/ ) {\n\t\tundef_macro(tokens[3]);\n\t}\n\telse {\n\t\tresult = <\u62d3\u5c55\u5b8f\u5185\u5bb9>;\n\t}\n\tputs(result.c_str());\n}\n```\n\u672c\u9898\u5b8f\u7684\u540d\u5b57\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u3002\u6240\u4ee5\u9700\u8981\u5206\u79bb\u51fa\u6587\u672c\u4e2d\u7684\u6807\u8bc6\u7b26\u3002\u76f4\u63a5\u4ece\u7a7a\u683c\u5904\u5206\u5272\u4e32\u663e\u7136\u4e0d\u884c\uff0c\u53cd\u4f8b\u5f62\u5982 `A+B + C`\uff0c\u5c06\u4f1a\u5206\u79bb\u51fa `{\"A+B\",\"+\",\"C\"}`\uff1b\u540c\u6837\u7684\uff0c\u76f4\u63a5\u66ff\u6362\u4e5f\u662f\u4e0d\u884c\u7684\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5b8f\u53eb\u505a `A`\uff0c\u90a3\u4e48 `A + Abc` \u4e2d\u53ea\u6709\u4e00\u4e2a `A` \u5e94\u5f53\u88ab\u66ff\u6362\u3002\u8fd9\u8bf4\u660e\u5fc5\u987b\u5bf9\u6587\u672c\u4e32\u8fdb\u884c**\u8bcd\u6cd5\u5206\u6790**\u3002\n\n\u8bcd\u6cd5\u5206\u6790\uff08$\\texttt{Tokenize}$\uff09\uff0c\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u628a\u8f93\u5165\u4ee3\u7801\u5206\u5272\u6210\u5404\u4e2a\u8bcd\uff08\u6b63\u786e\u540d\u5b57\u662f\u5355\u5143 $\\texttt{Token}$\uff09\uff0c\u6bd4\u5982 `A+B + C` \u5206\u79bb\u6210 `{\"A\",\"+\",\"B\",\"+\",\"C\"}`\u3002\u672c\u9898\u53ea\u51fa\u73b0\u6807\u8bc6\u7b26\u548c\u7279\u6b8a\u7b26\u53f7\uff0c\u56e0\u6b64\u5206\u5272\u601d\u8def\u662f\u663e\u7136\u7684\uff1a\u5f53\u9047\u5230\u5b57\u6bcd / \u6570\u5b57 / \u4e0b\u5212\u7ebf\u65f6\uff0c\u4e0d\u65ad\u8bfb\u5165\u76f4\u5230\u51fa\u73b0\u975e\u6807\u8bc6\u7b26\u5b57\u7b26\u3002\u6ce8\u610f\uff0c**\u7a7a\u767d\u5b57\u7b26\u4e5f\u5fc5\u987b\u539f\u6837\u8f93\u51fa**\uff0c\u6240\u4ee5\u5728\u8bcd\u6cd5\u5206\u6790\u65f6\u4e0d\u80fd\u7b80\u5355\u7684\u8df3\u8fc7\u7a7a\u767d\u7b26\u3002\n\n```\nbool is_csyn(char c) { // \u5224\u65ad\u662f\u5426\u662f\u6807\u8bc6\u7b26\u5b57\u7b26\uff0cis_csym \u51fd\u6570\u4e0d\u4e00\u5b9a\u80fd\u7528\n\treturn isdigit(c) || isalpha(c) || c == '_';\n}\ntypedef vector<string> Vector;\nVector tokenize(string & text) {\n\tVector result; // \u4fdd\u5b58\u7ed3\u679c\n\tstring cur = \"\";\n\tint len = text.length();\n\tint pos = 0;\n\twhile (pos < len) {\n\t\tif (is_csyn(text[pos])) {\n\t\t\twhile (is_csyn(text[pos])) cur += text[pos], pos++; // \u4e0d\u65ad\u8bfb\u5165\n\t\t\tresult.push_back(cur), cur = \"\";\n\t\t}\n\t\telse if (!isspace(text[pos])) result.push_back((string)(\"\") + text[pos]), pos++; // \u7b26\u53f7\uff0c\u5e76\u4e14\u4e0d\u662f\u5b57\u7b26\n\t\telse {\n\t\t\twhile (isspace(text[pos])) cur += text[pos], pos++; // \u4e0d\u65ad\u8bfb\u5165\u7a7a\u683c\n\t\t\tresult.push_back(cur), cur = \"\";\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n**\u5b8f\u7684\u5b9a\u4e49\u4e0e\u89e3\u9664\u5b9a\u4e49**\u3002\u4e00\u4e2a\u5b8f\u5bf9\u5e94\u4e00\u4e2a\u5c55\u5f00\u65b9\u5f0f\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u7528 `map` \u6765\u4fdd\u5b58\u3002\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528 `Vector` \u800c\u975e\u539f\u6587\u672c\u4e32\u6765\u4fdd\u5b58\u4ee3\u7801\uff0c\u662f\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8fdb\u884c\u8bcd\u6cd5\u5206\u6790\u3002\u4e0b\u6587\u5c31\u53ef\u4ee5\u770b\u5230\u5b83\u7684\u4f18\u70b9\u3002\n\n```\nmap<string, Vector> macros;\ninline void def_macro(string & macro, Vector & expansion) {\n\tmacros[macro] = expansion;\n}\n\ninline void undef_macro(string & macro) {\n\tmacros.erase(macro);\n}\n```\n\n**\u5b8f\u7684\u5c55\u5f00**\u3002\u5c55\u5f00\u662f\u9012\u5f52\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u4ee3\u7801\u5b9e\u73b0\u4e5f\u9700\u8981\u4f7f\u7528\u9012\u5f52\u3002\u6b63\u5728\u5c55\u5f00\u7684\u5b8f\u4e0d\u5e94\u5f53\u88ab\u518d\u6b21\u5c55\u5f00\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a `set` \u6765\u4fdd\u5b58\u201c\u6b63\u5728\u5c55\u5f00\u4e2d\u7684\u5b8f\u201d\u7684\u5217\u8868\u3002\u5728\u8fd9\u91cc\u4ee3\u7801\u5b9e\u73b0\u5c31\u975e\u5e38\u7b80\u6d01\u4e86\uff1a\n\n```\nset<string> expanding;\nstring expand(string & macro) {\n\tif(macros.find(macro) == macros.end() || expanding.find(macro) != expanding.end()) return macro; // \u4e0d\u662f\u5b8f\u6216\u8005\u6b63\u5728\u5c55\u5f00\n\texpanding.insert(macro); // \u6b63\u5728\u5c55\u5f00\n\t\n\tstringstream result(\"\");\n\tVector expansion = macros[macro];\n\t\n\tint size = expansion.size();\n\tfor (int i = 0; i < size; i++) result << expand(expansion[i]); // \u5bf9\u5b8f\u7684\u5185\u5bb9\u7684\u6bcf\u4e2a\u8bcd\u8fdb\u884c\u5c55\u5f00\n\texpanding.erase(macro);\n\treturn result.str(); // \u8fd4\u56de\u7ed3\u679c\u4e32\n}\n```\n\n\u6709\u4e86\u8fd9\u4e9b\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u6700\u540e\u5b8c\u5584 `execute` \u51fd\u6570\u3002\u5224\u65ad\u5f53\u524d\u6587\u672c\u4e32\u7684\u7c7b\u578b\u5c31\u5f88\u5bb9\u6613\u4e86\uff1a\n\n- \u5982\u679c\u7b2c\u4e00\u4e2a\u8bcd\u662f `#`\uff0c\u7b2c\u4e8c\u4e2a\u8bcd\u662f `define`\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u5b8f\u5b9a\u4e49\uff1b\n- \u5426\u5219\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u8bcd\u662f `#`\uff0c\u7b2c\u4e8c\u4e2a\u8bcd\u662f `undef`\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u89e3\u9664\u5b8f\u5b9a\u4e49\uff1b\n- \u5426\u5219\uff0c\u8fd9\u662f\u4e00\u4e2a\u6587\u672c\u4e32\u3002\n\n\u9700\u8981\u6ce8\u610f\u4e0b\u6807\uff0c\u56e0\u4e3a\u6709\u7a7a\u683c\u7684\u5b58\u5728\uff0c\u5b8f\u5b9a\u4e49\u548c\u89e3\u9664\u5b8f\u5b9a\u4e49\u7684\u540d\u5b57\u90fd\u662f\u5728\u7b2c\u56db\u4e2a\u8bcd\uff0c\u800c\u5b8f\u5185\u5bb9\u662f\u4ece\u7b2c\u516d\u4e2a\u8bcd\u5f00\u59cb\u7684\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4ee3\u7801 `#define A B+C + D` \u7684\u8bcd\u6cd5\u5206\u6790\u7ed3\u679c\u662f\uff08\u4e0b\u5212\u7ebf\u7528\u6765\u6807\u8bc6\u7a7a\u683c\uff09\uff1a\n\n$$\\texttt{\\color{red}\\#\\color{green}define\\color{red}\\_\\color{green}A\\color{red}\\_\\color{green}B\\color{red}+\\color{green}C\\color{red}\\_\\color{green}+\\color{red}\\_\\color{green}D}$$\n\n\u53ef\u4ee5\u770b\u51fa\u4ece\u7b2c\u516d\u4e2a\u8bcd\u5f00\u59cb\u624d\u662f\u771f\u6b63\u7684\u5b8f\u5185\u5bb9\u3002\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u53ef\u770b\u4ee3\u7801\uff1a\n\n\n```\nvoid execute(string & text) {\n\tVector tokens = tokenize(text);\n\tstring result = \"\";\n\tif (tokens[0] == \"#\" && tokens[1] == \"define\") { // \u5b8f\u5b9a\u4e49\n\t\tstring name = tokens[3]; // \u5b8f\u540d\u662f\u7b2c 4 \u4e2a\u8bcd\n\t\tVector declaration;\n\t\tfor (int i = 5; i < tokens.size(); i++) declaration.push_back(tokens[i]); // \u5b8f\u5185\u5bb9\u4ece\u7b2c 6 \u4e2a\u5f00\u59cb\n\t\tdef_macro(name, declaration);\n\t}\n\telse if (tokens[0] == \"#\" && tokens[1] == \"undef\") { // \u89e3\u9664\u5b8f\u5b9a\u4e49\n\t\tundef_macro(tokens[3]);\n\t}\n\telse {\n\t\tfor (int i = 0; i < tokens.size(); i++) result += expand(tokens[i]); // \u6587\u672c\u4e32\uff0c\u76f4\u63a5\u5c55\u5f00\n\t}\n\tputs(result.c_str());\n}\n```\n\n`main` \u51fd\u6570\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u653e\u4e86\u3002\u6309\u7167\u81ea\u9876\u5411\u4e0b\u7684\u65b9\u6cd5\u505a\u6765\uff0c\u4e00\u5207\u4ee3\u7801\u90fd\u662f\u6e05\u6670\u6613\u61c2\u7684\uff0c\u7ec6\u8282\u4e5f\u4e0d\u4f1a\u6df7\u4e71\u3002\u672c\u4eba\u4ee5\u4e3a\uff0c\u9009\u624b\u4e0d\u4ec5\u8981\u6709\u770b\u51fa\u95ee\u9898\u89e3\u6cd5\u7684\u80fd\u529b\uff0c\u8fd8\u9700\u8981\u6709\u771f\u6b63\u89e3\u51b3\u95ee\u9898\u7684\u4ee3\u7801\u80fd\u529b\u3002\u672c\u9898\u5176\u5b9e\u662f\u4e00\u4e2a\u5f31\u5316\u7248\u7684\u8bcd\u6cd5\u5206\u6790\u5668\uff0c\u60f3\u8981\u5c1d\u8bd5\u771f\u6b63\u5b8c\u6574\u7684\u8bcd\u6cd5\u5206\u6790\u5668\u53ef\u4ee5\u524d\u5f80 [**$\\texttt{UVA12421}$**](https://www.luogu.com.cn/problem/UVA12421)\u3002\n\n\u7701\u9009\u7684\u6a21\u62df\u9898\u51fa\u7684\u5f88\u597d\uff0c\u4e0b\u6b21\u4e0d\u8981\u518d\u51fa\u4e86\u3002\n\n",
        "postTime": 1650536874,
        "uid": 188950,
        "name": "UruhaRushia",
        "ccfLevel": 6,
        "title": "P8289 \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\uff1a  \n\u8fd9\u9053\u9898\u662f\u7701\u9009\u7684\u7b7e\u5230\u9898\uff0c\u7136\u800c\u6211\u4ea4\u4e86\u5f88\u591a\u904d\u624d AC  \n## \u9898\u76ee\u6ce8\u610f\u4e8b\u9879\uff1a  \n1. ```#define <name> <content>``` \u4e2d\u7684 ```content``` \u53ef\u4ee5\u4e3a\u7a7a  \n\n2. \u8fde\u7eed\u5728\u4e00\u8d77\u7684\u5927\u5c0f\u5199\u5b57\u6bcd\u548c**\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf**\u5e94\u8be5\u89c6\u4f5c\u540c\u4e00\u4e2a\u6807\u8bc6\u7b26  \n\n## \u9898\u76ee\u505a\u6cd5\uff1a  \n### \u8bfb\u5165\uff1a  \n\u8fd9\u91cc\u7684\u8bfb\u5165\u6709\u4ebf\u4e9b\u5751\uff0c\u5728\u6b64\u8bf4\u4e00\u4e0b\n\u8bfb\u5165 $n$ \u4e4b\u540e\uff0c\u5e94\u8be5\u4f7f\u7528 ```getchar``` \u6765\u5438\u6536\u6362\u884c\u7b26\uff0c\u4e0d\u7136\u4f1a\u6302\u3002  \n\u8bfb\u5165\u6bcf\u4e00\u884c\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bfb\u5165\uff1a  \n```cpp\nfgets(line, maxn, stdin);\n//line\u662f\u4e34\u65f6\u5b58\u50a8\u6bcf\u4e00\u884c\u5b57\u7b26\u4e32\u7684char\u6570\u7ec4\n//maxn\u662f\u6570\u7ec4\u5927\u5c0f\n```  \n\u81f3\u4e8e\u5982\u4f55\u8bfb\u5165\u5b8f\uff0c\u9996\u5148\u53ef\u4ee5\u4f7f\u7528 ```sscanf``` \u4ece ```line``` \u6570\u7ec4\u5c06\u5f00\u5934\u7684 ```#define``` \u6216 ```#undef```\uff0c\u4ee5\u53ca\u5b8f\u540d\u8bfb\u5165\uff0c\u5177\u4f53\u5982\u4e0b\uff1a  \n```cpp\nsscanf(line,\"%s%s\",define.tmp,define.name);\n//define.tmp \u662f \"#define\" \u6216 \"#undef\"\n//define.name \u662f\u5b8f\u540d\n```  \n\n\u6700\u540e\u7684\u5b8f\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f ```content```\uff0c\u5e94\u8be5\u4ece\u9884\u5904\u7406\u6307\u4ee4\u7684\u524d\u4e24\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\u7684\u5411\u540e\u4e24\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u4f9d\u6b21\u4e00\u4e2a\u4e00\u4e2a\u7684\u8bfb\u5165\u6bcf\u4e2a\u5b57\u7b26\u3002\u5177\u4f53\u5982\u4e0b\uff1a  \n```cpp\nfor(int i=ttmp,cnt=0;i<size_line;i++,cnt++)\n{\n\tif(line[i]=='\\n')break;\n\tdefine.val[cnt]=line[i];\n   \t//define.val \u662f\u5b8f\u7684\u5185\u5bb9(content)\n   \t//ttmp \u662f\u9884\u5904\u7406\u547d\u4ee4\u7684\u524d\u4e24\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\u7684\u5411\u540e\u4e24\u4e2a\u4f4d\u7f6e\n   \t//\u4e5f\u5c31\u662f\u9884\u5904\u7406\u547d\u4ee4\u7b2c\u4e09\u4e2a\u5355\u8bcd\u5f00\u59cb\u7684\u4f4d\u7f6e\n   \t//size_line \u662f line\u6570\u7ec4\u7684\u5927\u5c0f\n}\n```  \n\u4e4b\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5165\u662f\u56e0\u4e3a**\u5b8f\u7684\u5185\u5bb9 content \u53ef\u4ee5\u4e3a\u7a7a**\u3002  \n### \u5b8f\u7684\u5b58\u50a8  \n\u56e0\u4e3a ```map``` \u7684\u590d\u6742\u5ea6\u662f $O(logn)$\uff0c\u5bb9\u6613\u88ab\u5361\uff0c\u6700\u597d\u7528 ```unordered_map```\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O(1)$ \u7684\uff0c\u56e0\u4e3a ```map``` \u7528\u7684\u662f\u7ea2\u9ed1\u6811\uff0c```unordered_map``` \u7528\u7684\u662f\u54c8\u5e0c\u8868\u3002  \n\u5b9a\u4e49\u4e00\u4e2a ```unordered_map``` \u6765\u5b58\u50a8\u6bcf\u4e2a\u5b8f\u540d\u66ff\u6362\u4e4b\u540e\u7684\u5185\u5bb9\uff1a  \n```\nunordered_map<string,string> def;\n```  \n\u7136\u540e ```def[name]=content``` \u5c31\u884c\u4e86  \n### \u5b8f\u7684\u5c55\u5f00  \n\u6ce8\uff1a```line``` \u6570\u7ec4\u662f\u4e34\u65f6\u5b58\u50a8\u6bcf\u4e00\u884c\u5b57\u7b26\u4e32\u7684\u3002\u6b64\u65f6 ```string ans``` \u7528\u6765\u5b58\u50a8\u7b54\u6848\u3002  \n\u904d\u5386 ```line``` \u6570\u7ec4\uff0c\u6309\u7167\u9898\u76ee\u8981\u6c42\u627e\u6807\u8bc6\u7b26\u3002\u627e\u5230\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u9996\u5148\u5224\u65ad\u5b83\u662f\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b8f\u540d\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48 ```ans``` \u76f4\u63a5\u52a0\u4e0a\u8fd9\u4e2a\u6807\u8bc6\u7b26\u5373\u53ef\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b8f\u540d\uff0c\u90a3\u4e48\u5bf9\u5176\u8fdb\u884c\u5c55\u5f00\u4e4b\u540e ```ans``` \u518d\u52a0\u4e0a\u5b83\uff0c\u4e0b\u9762\u6765\u8bf4\u4e00\u4e0b\u5982\u4f55\u8fdb\u884c\u5c55\u5f00\u3002  \n\n\u56e0\u4e3a\u4e00\u4e2a\u5b8f\u5c55\u5f00\u4e4b\u540e\u53ef\u80fd\u8fd8\u9700\u8981\u7ee7\u7eed\u5c55\u5f00\uff0c\u8fd9\u6837\u5c31\u5f88\u9ebb\u70e6\uff0c\u4f7f\u7528 dfs \u53ef\u4ee5\u65b9\u4fbf\u7684\u8fdb\u884c\u9012\u5f52\u5c55\u5f00\u3002\u6765\u8bf4\u4e00\u4e0b\u600e\u4e48 dfs\uff1a  \n\n\u5b9a\u4e49\uff1a```string dfs(string hong)```  \n\n\u5176\u4e2d dfs \u7684\u8fd4\u56de\u503c\u662f\u5b8f\u5c55\u5f00\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\uff0c```hong``` \u662f\u5f85\u5c55\u5f00\u7684\u5b8f\u540d\u3002  \n\n\u9012\u5f52\u5230\u67d0\u4e2a\u5b8f\uff0c\u9996\u5148\u628a\u8fd9\u4e2a\u5b8f\u53d8\u6210\u8fd9\u4e2a\u5b8f\u7b2c\u4e00\u6b21\u5c55\u5f00\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f ```hong = def[hong]```\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4 ```string str``` \u6765\u5b58\u50a8\u5f53\u524d\u5b8f\u5b8c\u5168\u5c55\u5f00\u4e4b\u540e\u7684\u6700\u7ec8\u5b57\u7b26\u4e32\uff0c\u904d\u5386 ```hong``` \u6570\u7ec4\uff0c\u67e5\u627e\u6bcf\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u5982\u679c\u8fd9\u4e2a\u6807\u8bc6\u7b26 ```name``` \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b8f\u540d\uff0c\u90a3\u4e48\u5bf9\u5176 dfs \u9012\u5f52\u5c55\u5f00\uff1a```str+=dfs(name)```\uff0c\u5426\u5219\u76f4\u63a5\u52a0\u5165 ```str``` \u6570\u7ec4\u3002  \n\u6700\u540e\u8fd4\u56de ```str``` \u6570\u7ec4\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5904\u7406\u65e0\u7ebf\u9012\u5f52\u5c55\u5f00\u5462\uff1f  \n\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a ```unordered_map<string,bool> vis``` \u6765\u8bb0\u5f55\u5f53\u524d\u9012\u5f52\u6b63\u5728\u5c55\u5f00\u7684\u5b8f\u540d\uff0c\u6bcf\u9012\u5f52\u5230\u4e00\u4e2a\u5b8f\u540d ```name```\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5b8f\u540d\u8bb0\u5f55\u4e0b\u6765\uff1a```vis[name]=1```\uff0c\u5982\u679c\u53d1\u73b0\u5f53\u524d\u5b8f\u540d\u4e0e\u67d0\u4e2a\u6b63\u5728\u5c55\u5f00\u7684\u5b8f\u540d\u76f8\u540c\uff0c\u4e5f\u5c31\u662f ```if(vis[name]==1)```\uff0c\u90a3\u4e48\u5f53\u524d\u5b8f\u540d\u4e0d\u4f5c\u5c55\u5f00\uff0c\u76f4\u63a5\u628a\u5b8f\u540d\u8fd4\u56de\u5373\u53ef\u3002  \n### AC \u4ee3\u7801\uff1a  \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\nnamespace Main\n{\n\tconst int maxn=105;\n\tint n;\n\tchar line[maxn];\n\tunordered_map<string,string> def;\n\tint size_line;\n\tstruct Define\n\t{//\u7528\u6765\u4e34\u65f6\u5b58\u50a8\u6b63\u5728\u8bfb\u5165\u5b8f\u7684\u4fe1\u606f\n\t\tchar tmp[10];\n\t\tchar name[maxn];\n\t\tchar val[maxn];\n\t}define;\n\tstring ans_line;//\u5b58\u50a8\u6bcf\u4e2a\u84b2\u901a\u6587\u672c\u5b8f\u5c55\u5f00\u540e\u7684\u6837\u5b50\n\tstring temp;\n\tunordered_map<string,bool> vis;\n\tbool isletter(char s)\n\t{\n\t\tif(isdigit(s))return 1;\n\t\tif(s=='_')return 1;//\u6ce8\u610f\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u4e0e\u5b57\u6bcd\u4e00\u8d77\u7ec4\u6210\u6807\u8bc6\u7b26\n\t\tif(s-'a'>=0&&s-'a'<26)return 1;\n\t\tif(s-'A'>=0&&s-'A'<26)return 1;\n\t\treturn 0;\n\t}\n\tstring dfs(string hong)\n\t{\n\t\tstring ttttmp=hong;//\u4e34\u65f6\u5b58\u50a8\u539f\u6765\u7684\u5b8f\u540d\n\t\thong=def[hong];//\u628ahong \u53d8\u6210\u5176\u4e00\u6b21\u5c55\u5f00\u540e\u7684\u6837\u5b50\n\t\tif(vis[ttttmp])return ttttmp;\n\t\t//\u5982\u679c\u4e0e\u6b63\u5728\u8fdb\u884c\u5c55\u5f00\u7684\u67d0\u4e2a\u5b8f\u540d\u76f8\u540c\uff0c\u8fd4\u56de\n\t\tvis[ttttmp]=1;\n\t\tstring str=\"\";\n\t\tstring temp=\"\";//\u5b58\u6807\u8bc6\u7b26\n\t\tfor(int i=0;i<hong.size();i++)\n\t\t{\n\t\t\tif(hong[i]=='\\n')break;\n\t\t\t//\tcout<<\"temp: \"<<temp<<endl;\n\t\t\tif(isletter(hong[i]))\n\t\t\t{\n\t\t\t\ttemp+=hong[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(def.count(temp))\n\t\t\t\t{//\u8fde\u7eed\u5b57\u6bcd\u7ed3\u675f\uff0c\u5904\u7406\u4e00\u4e0b\u5b8f\n\t\t\t\t\t//\u4e0d\u8981\u5fd8\u8bb0\u8bfb\u5165\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e4b\u540e\u8fd8\u8981\u5c55\u5f00\u4e00\u4e0btemp\n\t\t\t\t\tstr+=dfs(temp);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstr+=temp;\n\t\t\t\t}\n\t\t\t\ttemp=hong[i];\n\t\t\t\tif(def.count(temp))\n\t\t\t\t{//\u5982\u679c\u5f53\u524d\u6587\u672c\u662f\u4e00\u4e2a\u5b8f\uff0c\u66ff\u6362\u4e00\u4e0b\n\t\t\t\t\tstr+=dfs(temp);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{//\u4e0d\u662f\u5b8f\uff0c\u4e0d\u505a\u5904\u7406\n\t\t\t\t\tstr+=temp;\n\t\t\t\t}\n\t\t\t\ttemp=\"\";\n\t\t\t}\n\t\t}\n\t\tif(def.count(temp))\n\t\t{\n\t\t\tstr+=dfs(temp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr+=temp;\n\t\t}\n\t\tvis[ttttmp]=0;\n\t\treturn str;\n\t}\n\tvoid main()\n\t{\n\t\tcin>>n;\n\t\tgetchar();\n\t\twhile(n--)\n\t\t{\n\t\t\tfgets(line, maxn, stdin);\n\t\t\tsize_line=strlen(line);\n\t\t\tif(line[0]=='#')\n\t\t\t{//\u9884\u5904\u7406\u6307\u4ee4\n\t\t\t\tsscanf(line,\"%s%s\",define.tmp,define.name);\n\t\t\t\tint ttmp=strlen(define.tmp)+strlen(define.name)+2;\n\t\t\t\tmemset(define.val,0,sizeof(define.val));\n\t\t\t\tfor(int i=ttmp,cnt=0;i<size_line;i++,cnt++)\n\t\t\t\t{\n\t\t\t\t\tif(line[i]=='\\n')break;\n\t\t\t\t\tdefine.val[cnt]=line[i];\n\t\t\t\t}\n\t\t\t\tif(define.tmp[1]=='d')\n\t\t\t\t{\n\t\t\t\t\tdef[define.name]=define.val;\n\t\t\t\t}\n\t\t\t\tif(define.tmp[1]=='u')\n\t\t\t\t\tdef.erase(define.name);//#undef\n\t\t\t\tputchar('\\n');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{//\u84b2\u901a\u6587\u672c\n\t\t\t\tans_line=\"\";\n\t\t\t\ttemp=\"\";\n\t\t\t\tfor(int i=0;i<size_line;i++)\n\t\t\t\t{\n\t\t\t\t\tif(line[i]=='\\n')break;\n\t\t\t\t\t//\tcout<<\"temp: \"<<temp<<endl;\n\t\t\t\t\tif(isletter(line[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp+=line[i];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(def.count(temp))\n\t\t\t\t\t\t{//\u8fde\u7eed\u5b57\u6bcd\u7ed3\u675f\uff0c\u5904\u7406\u4e00\u4e0b\u5b8f\n\t\t\t\t\t\t\t//\u4e0d\u8981\u5fd8\u8bb0\u8bfb\u5165\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e4b\u540e\u8fd8\u8981\u5c55\u5f00\u4e00\u4e0btemp\n\t\t\t\t\t\t\tans_line+=dfs(temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tans_line+=temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttemp=line[i];\n\t\t\t\t\t\tif(def.count(temp))\n\t\t\t\t\t\t{//\u5982\u679c\u5f53\u524d\u6587\u672c\u662f\u4e00\u4e2a\u5b8f\uff0c\u66ff\u6362\u4e00\u4e0b\n\t\t\t\t\t\t\tans_line+=dfs(temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{//\u4e0d\u662f\u5b8f\uff0c\u4e0d\u505a\u5904\u7406\n\t\t\t\t\t\t\tans_line+=temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttemp=\"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(def.count(temp))\n\t\t\t\t{\n\t\t\t\t\tans_line+=dfs(temp);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tans_line+=temp;\n\t\t\t\t}\n\t\t\t\tcout<<ans_line<<endl;\n\t\t\t}\n\t\t}\n\t}\n\n}\nint main()\n{\n\tMain::main();\n\treturn 0;\n}\n```\n",
        "postTime": 1650200529,
        "uid": 507348,
        "name": "__vector__",
        "ccfLevel": 0,
        "title": "P8289\u9898\u89e3"
    },
    {
        "content": "\u4e0d\u59a8\u4ecd\u7136\u6309\u8bb2\u5927\u6a21\u62df\u7684\u601d\u8def\u6765\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u9898\u5728\u7801\u7684\u96be\u5ea6\u4e0a\u6bd4\u5112\u7565\u5386\u4e0d\u77e5\u9053\u4f4e\u5230\u54ea\u91cc\u53bb\u4e86\u3002\n\n\u9996\u5148\u8f93\u5165\u95ee\u9898\u9898\u76ee\u5df2\u7ecf\u5e2e\u6211\u4eec\u89e3\u51b3\u4e86\u3002\u63a5\u4e0b\u6765\u5bf9\u4e8e\u4e00\u4e2a\u5b8f\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u8fd9\u4e2a\u5b8f\u7684\u540d\u5b57\u3002\u8fd9\u4e2a\u5b8f\u7684\u540d\u5b57\u53ea\u5305\u542b**\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e0b\u5212\u7ebf**\u3002\u8fd9\u6837\u5148\u6446\u51fa\u4e00\u4e2a\u51fd\u6570 `isName(char)` \u6765\u786e\u5b9a\u4e00\u4e2a\u5b57\u6bcd\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u5b8f\u7684\u540d\u5b57\u3002\n\n```cpp\ninline bool isName(char c)\n{\n\tif(c=='_')\treturn true;\n\tif(c>='A' && c<='Z')\treturn true;\n\tif(c>='a' && c<='z')\treturn true;\n\tif(c>='0' && c<='9')\treturn true;\n\treturn false;\n}\n```\n\n\u7136\u540e\u8003\u8651 `#define` \u547d\u4ee4\u3002\u6211\u4eec\u5148\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a `#define` \u64cd\u4f5c\uff0c\u5177\u4f53\u662f\u770b\u547d\u4ee4\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f `#`\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f `d`\uff08\u56e0\u4e3a\u6807\u8bc6\u7b26\u4e0d\u542b `#`\uff0c\u51fa\u73b0 `#` \u4e00\u5b9a\u662f `#define` \u6216\u8005 `#undef`\uff09\u3002\u7136\u540e\u77e5\u9053 `#define <name> <content>` \u547d\u4ee4\u95f4\u4e00\u5b9a\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u4e2a\u5c31\u662f `<name>` \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u3002\u6c42\u51fa\u4ee5\u8fd9\u4e2a\u5b57\u7b26\u5f00\u5934\u7684\u8fde\u7eed\u6781\u957f\u7684\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u4ee5\u53ca\u4e0b\u5212\u7ebf\u6784\u6210\u7684\u5b57\u7b26\u4e32\u5c31\u662f `<name>`\u3002\u7136\u540e\u7ed9\u6bcf\u4e2a\u5b8f\u5206\u914d\u4e00\u4e2a\u7f16\u53f7\uff0c\u7528 `map` \u5b58\u4e0b\u8fd9\u4e2a `<name>` \u5bf9\u5e94\u7684\u7f16\u53f7\u3002\u5269\u4e0b\u8fd8\u6ca1\u6709\u5904\u7406\u7684\u90e8\u5206\u5c31\u662f\u8fd9\u4e2a\u5b8f\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5b58\u4e0b\u3002\n\n\u63a5\u4e0b\u6765\u662f `#undef`\u3002\u4e00\u6837\u7684\u65b9\u6cd5\u6c42\u51fa `<name>`\uff0c\u7136\u540e\u5728 `map` \u91cc\u9762\u627e\u5230\u5e76\u4e14\u5220\u6389\u5c31\u597d\u4e86\u3002\u6ce8\u610f\u5230\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u6807\u8bc6\u7b26\u662f\u5426\u662f\u5b8f\u5c31\u8981\u7528 `map` \u53bb\u5224\u65ad\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5bf9\u5e94\u4e00\u4e2a\u5b8f\u7f16\u53f7\u4e86\u3002\n\n\u6700\u540e\u5c31\u662f\u8f93\u51fa\u90e8\u5206\u3002\u5c06\u6574\u884c\u770b\u505a\u4e00\u4e2a\u547d\u4ee4\uff0c\u4e00\u4e2a\u5b8f\u4e5f\u5c31\u5bf9\u5e94\u7684\u4e00\u4e2a\u547d\u4ee4\u3002\u8003\u8651\u9012\u5f52\u5904\u7406\uff0c\u7528\u6570\u7ec4\u8bb0\u5f55\u5904\u7406\u5f53\u524d\u7684\u547d\u4ee4\u65f6\uff0c\u662f\u5426\u4e5f\u662f\u5728\u5904\u7406\u67d0\u4e00\u4e2a\u5b8f\u7684\u8fc7\u7a0b\uff08\u4e3a\u4e86\u9632\u6b62\u4e00\u76f4\u9012\u5f52\uff0c\u540c\u65f6\u6ee1\u8db3\u9898\u610f\uff09\u3002\u8bb0 `void Print(string S,int i)` \u8868\u793a\u6211\u4eec\u5904\u7406\u5230\u5b57\u7b26\u4e32 $S$ \u7684\u7b2c $i$ \u4e2a\u5b57\u7b26\u3002\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n- \u5982\u679c $i$ \u5df2\u7ecf\u8fbe\u5230\u6216\u8d85\u8fc7\u4e86 $S$ \u7684\u957f\u5ea6\uff0c\u8fd4\u56de\u5373\u53ef\uff1b   \n- \u5426\u5219\uff1a\n  - \u5224\u65ad $S$ \u7684\u7b2c $i$ \u4e2a\u5b57\u7b26\u662f\u5426\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\u5b57\u7b26\uff0c\u5982\u679c\u4e0d\u662f\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\uff1b   \n  - \u5426\u5219\u627e\u5230\u8fd9\u4e2a\u6781\u957f\u6807\u8bc6\u7b26\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6ca1\u6709\u6b63\u5728\u5904\u7406\u7684\u5b8f\u3002\u662f\u5219\u9012\u5f52\u5904\u7406\uff0c\u5426\u5219\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u5904\u7406\u5b8c\u5f53\u524d\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e4b\u540e\uff0c\u6211\u4eec\u79fb\u52a8 $i$ \u5230\u8fd9\u4e2a\u6807\u8bc6\u7b26\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u9012\u5f52\u5904\u7406\u3002\n\n\u5199\u51fa\u4e00\u4efd\u903b\u8f91\u6e05\u6670\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nmap<string,int> M;\nstring s[105];\nint n;\ninline bool isName(char c)\n{\n\tif(c=='_')\treturn true;\n\tif(c>='A' && c<='Z')\treturn true;\n\tif(c>='a' && c<='z')\treturn true;\n\tif(c>='0' && c<='9')\treturn true;\n\treturn false;\n}\nstring def[105];\nint cnt;\nvoid Define(string S)\n{\n\tint i=0;\n\twhile(S[i]!=' ')\t++i;\n\t++i;\n\tstring str;\n\twhile(isName(S[i]))\tstr.push_back(S[i]),++i;\n\tM[str]=++cnt;\n\t++i;\n\tint len=S.length();\n\tfor(;i<len;++i)\tdef[cnt].push_back(S[i]);\n}\nvoid Undef(string S)\n{\n\tint i=0;\n\twhile(S[i]!=' ')\t++i;\n\t++i;\n\tstring str;\n\tint len=S.length();\n\tfor(;i<len;++i)\tstr.push_back(S[i]);\n\tM.erase(M.find(str));\n}\nbool ins[105];\nvoid Print(string S,int i)\n{\n\tif(i==int(S.length()))\treturn ;\n\tif(!isName(S[i]))\n\t{\n\t\tcout<<S[i];\n\t\tPrint(S,i+1);\n\t\treturn ;\n\t}\n\tstring str;\n\twhile(isName(S[i]))\tstr.push_back(S[i++]); // \u8fd9\u91cc \u5728 C++98 \u6807\u51c6\u4e0b\u4f1a RE\uff0c\u4f46\u662f\u5728 C++14 \u7684\u65f6\u5019\uff0ci==S.length() \u4f1a\u8fd4\u56de npos\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6302\u3002\n\tif(M.find(str)!=M.end())\n\t{\n\t\tint d=M[str];\n\t\tif(!ins[d])\tins[d]=true,Print(def[d],0),ins[d]=false;\n\t\telse\tcout<<str;\n\t}\n\telse\tcout<<str;\n\tPrint(S,i);\n}\nint main(){\n\tcin>>n;\n\tgetline(cin,s[0]);\n\tfor(int i=1;i<=n;++i)\tgetline(cin,s[i]);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(s[i][0]=='#')\n\t\t{\n\t\t\tcout<<endl;\n\t\t\tif(s[i][1]=='d')\tDefine(s[i]);\n\t\t\telse\tUndef(s[i]);\n\t\t}\n\t\telse\tPrint(s[i],0),cout<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1650111565,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u5565\u65f6\u5019\u4e94\u4e00\u554a"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6a21\u62df\u9898\uff0c\u5982\u679c\u7528 C++ \u7684 STL \u5199\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u53ca\u6ce8\u91ca\u5373\u53ef\u3002\n\n\u4ee3\u7801\u4e2d\u7528\u5230\u4e86 `stringstream` \u548c STL \u4e2d\u7684\u4e00\u4e9b\u6a21\u677f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u67e5\u9605\u5176\u7528\u6cd5\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nmap<string,string> macros; //\u5b58\u50a8\u5b8f\u5b9a\u4e49\nstring line;\nint n;\nvoid init(){ //\u5403\u6389\u7b2c\u4e00\u884c\n    getline(cin,line);\n    stringstream ss(line);\n    ss>>n;\n}\nstring work(const string &line,map<string,bool> &used){ //\u9012\u5f52\u5b9e\u73b0\u591a\u6b21\u5c55\u5f00\n    //line\uff1a\u5c06\u8fdb\u884c\u5c55\u5f00\u7684\u4e32\uff1bused\uff1a\u8bb0\u5f55\u5df2\u7ecf\u5c55\u5f00\u7684\u5b8f\n    string ans;\n    unsigned int i=0; //\u6807\u8bb0\u4f4d\u7f6e\n    while(1){\n        string labal; //\u7528\u6765\u627e\u6807\u8bc6\u7b26\n        for(;i<line.size();i++){\n            if(isalpha(tolower(line[i]))||line[i]=='_'||isdigit(line[i])){ //\u5224\u65ad\uff1a\u662f\u5426\u53ef\u7ec4\u6210\u6807\u8bc6\u7b26\n                labal+=line[i];\n            }\n            else{ //\u7a7a\u5b57\u7b26\n                if(!macros.count(labal)){ //\u4e0d\u662f\u5b8f\n                    ans+=labal;\n                }\n                else if(!used[labal]){ //\u662f\u5b8f\u4e14\u672a\u5c55\u5f00\n                    used[labal]=1; //\u6807\u8bb0\u4e3a\u5c55\u5f00\u72b6\u6001\n                    ans+=work(macros[labal],used); //\u591a\u6b21\u5c55\u5f00\n                    used[labal]=0; //\u56de\u6eaf\uff0c\u53d6\u6d88\u6807\u8bb0 \n                }\n                else{ //\u5df2\u7ecf\u5c55\u5f00\n                    ans+=labal;\n                }\n                ans+=line[i]; //\u52a0\u4e0a\u5f53\u524d\u5b57\u7b26\uff08\u7a7a\u5b57\u7b26\uff09\n                i++;\n                labal=\"\"; //\u6807\u8bc6\u7b26\u6e05\u7a7a \n                break; //\u6bcf\u5904\u7406\u4e00\u4e2a\u6807\u8bc6\u7b26\u6216\u9047\u5230\u7a7a\u5b57\u7b26\u5c31\u9000\u51fa\u5faa\u73af\n            }\n        }\n        if(labal!=\"\"&&i>=line.size()){ //\u626b\u5c3e\uff0c\u4ee3\u7801\u540c\u4e0a\n\t\t    //\u6b64\u65f6\u60c5\u51b5\uff1a\u6709\u672a\u5904\u7406\u7684\u6807\u8bc6\u7b26\n            if(!macros.count(labal)){\n                ans+=labal;\n            }\n            else if(!used[labal]){\n                used[labal]=1;\n                ans+=work(macros[labal],used);\n                used[labal]=0;\n            }\n            else{\n                ans+=labal;\n            }\n        }\n        if(i>=line.size()) break; //\u5904\u7406\u5b8c\u6bd5\n    }\n    return ans; //\u5df2\u7ecf\u5c55\u5f00\u7684\u4e32\n}\nint main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);cout.tie(0);\n    init();\n    for(int i=1;i<=n;i++){\n        getline(cin,line);\n        if(line[0]=='#'){ //\u9884\u5904\u7406\u6307\u4ee4\n            stringstream ss(line);\n            if(line[1]=='d'){ //define\n                pair<string,string> smc;\n                char c;\n                ss>>smc.first>>smc.first>>smc.second;\n                while(ss.get(c)){ //\u8bfb\u53d6\u6bcf\u4e00\u4e2a\u5b57\u7b26\n                    smc.second+=c;\n                }\n                macros[smc.first]=smc.second;\n            }\n            else{ //undef\n                string ud;\n                ss>>ud>>ud;\n                macros[ud]=ud; //\u76f4\u63a5\u5c06\u5df2\u5220\u9664\u7684\u5b8f\u5b9a\u4e49\u4e3a\u81ea\u8eab\n            }\n            cout<<'\\n';\n        }\n        else{ //\u4e0d\u662f\u9884\u5904\u7406\u6307\u4ee4\n            map<string,bool> used;\n            cout<<work(line,used)<<'\\n'; //\u6267\u884c\u5c55\u5f00\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1650430791,
        "uid": 476889,
        "name": "hukk",
        "ccfLevel": 6,
        "title": "P8289 [\u7701\u9009\u8054\u8003 2022] \u9884\u5904\u7406\u5668 \u9898\u89e3"
    }
]