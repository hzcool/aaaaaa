[
    {
        "content": "# Day1 T3 \u6811\u4e0a\u7684\u6570\n\n## \u9898\u76ee\n\n[\u70b9\u8fd9\u91cc](https://ac.nowcoder.com/acm/contest/2344/C)\n\n## \u8003\u573a\u7ecf\u5386+\u601d\u8003\n\n\u8fd9\u9053\u9898\u7684\u8f93\u5165\u611f\u89c9\u5f88\u6076\u5fc3\u3002\n\u5927\u6982\u601d\u8def\u5c31\u662f\u7528 $O(n!\\times n)$ \u7684\u590d\u6742\u5ea6\uff0c\u5168\u6392\u5217\u5220\u8fb9\u987a\u5e8f\uff0c\u518d\u7528 $n$ \u6765\u8ba1\u7b97\u3002\n\u5904\u7406\u4e86\u8f93\u5165\u5f88\u4e45\uff0c\u4f46\u662f\u8fd8\u662f\u6ca1\u6709\u8c03\u51fa\u6765\u3002\n\u7136\u540e\uff0c\u82b1\u8d39\u4e86\u5dee\u4e0d\u591a $1h$ \u4f46\u662f\u8fd8\u662f\u6ca1\u6709\u4ec0\u4e48\u7ed3\u679c\u3002\n\u4f46\u662f\u5374\u628a $T2$ \u7684 $100pts$ \u5168\u90e8\u4e22\u6389\u4e86...\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u3002\n\n## \u6b63\u89e3\n$PS:$\u8001\u5e08\u76ee\u524d\u5e76\u672a\u8bb2\u6b63\u89e3\uff0c\u4f46\u662f\u90e8\u5206\u5206\u8bb2\u5b8c\u4e86\u3002\n\n`\u65b9\u6cd5 1 : 10pts`\n\n\u8fd9 $10pts$ \u662f\u8fd9\u4e00\u6b21\u8003\u8bd5 $T3$ \u7684\u6ee1\u5206\u4e86...\n\n\u5f88\u5c11\u6709\u8d85\u8fc7 $10pts$ \u7684\u4eba\u3002\n\n\u601d\u8def\u5f88\u597d\u60f3\uff0c\u7528\u4e00\u4e2a $dfs$ \u679a\u4e3e\u5220\u8fb9\u7684\u987a\u5e8f\uff0c\u518d\u7528 $O(N)$ \u6765\u68c0\u67e5\u5373\u53ef\u3002\n\n\u4ee3\u7801\u89c1\u4e0b\uff1a\uff08\u4e2a\u4eba\u4ee3\u7801\u98ce\u683c\u4e25\u91cd\uff09\n\n```cpp\n/*\n\t10pts code\n*/\n#include<cstdio>\n#include<utility>\nusing namespace std;\n \n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define fep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define writc(a,b) fwrit(a),putchar(b)\n#define mp(a,b) make_pair(a,b)\n#define ft first\n#define sd second\n//#define FILEOI\n \ntypedef pair<int,int> pii;\n \n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n    char c;bool f=0;\n    while(cg<'0'||'9'<c)if(c=='-')f=1;\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    if(f)x=-x;\n}\ninline int qread(){\n    int x=0;char c;bool f=0;\n    while(cg<'0'||'9'<c)if(c=='-')f=-1;\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    return f?-x:x;\n}\n#undef cg\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ninline void getInv(int inv[],const int lim,const int MOD){\n    inv[0]=inv[1]=1;for(int i=2;i<=lim;++i)inv[i]=1ll*inv[MOD%i]*(MOD-MOD/i)%MOD;\n}\ntemplate<class T>void fwrit(const T x){\n    if(x<0)return (void)(putchar('-'),fwrit(-x));\n    if(x>9)fwrit(x/10);putchar(x%10^48);\n}\n \nconst int MAXN=2000;\n \nstruct edge{\n    int to,nxt;\n    edge(){}\n    edge(const int T,const int N):to(T),nxt(N){}\n}e[(MAXN<<1)+5];\nint tail[MAXN+5],ecnt,in[MAXN+5],maxin,tcnt;\npii t[MAXN+5];\ninline void add_edge(const int u,const int v){\n    ++in[u],++in[v];//\u66f4\u6539\u70b9\u7684\u5165\u5ea6\n    e[++ecnt]=edge(v,tail[u]);tail[u]=ecnt;\n    e[++ecnt]=edge(u,tail[v]);tail[v]=ecnt;\n \n    maxin=Max(maxin,Max(in[u],in[v]));//\u7279\u5224\u83ca\u82b1\u56fe\n    t[++tcnt]=mp(u,v);//\u8bb0\u5f55\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\n}\n \nint N,a[MAXN+5],ans[MAXN+5];\n//a[i] : \u70b9 i \u7684\u6570\u5b57\u662f\u591a\u5c11\n//ans[i] : \u8bb0\u5f55\u7b54\u6848\n \ninline void init(){\n    qread(N);\n \n    //\u6e05\u7a7a\u56fe\n    ecnt=0,tcnt=0,maxin=0;\n    rep(i,1,N)tail[i]=0,in[i]=0,ans[i]=N-i+1;\n \n    //\u8f93\u5165\n    rep(i,1,N)a[qread()]=i;\n    rep(i,1,N-1)add_edge(qread(),qread());\n}\n \nbool vis[MAXN+5];int mir[MAXN+5];\nvoid dfs(const int);\ninline void getDfs(){\n    dfs(1);\n    rep(i,1,N)writc(ans[i],' ');\n    putchar('\\n');\n}\ninline void chk(){\n    rep(i,1,N)mir[a[i]]=i;\n    rep(i,1,N){\n        if(mir[i]<ans[i]){\n            rep(j,1,N)ans[j]=mir[j];\n            break;\n        }\n        if(mir[i]>ans[i])break;\n    }\n    return;\n}\nvoid dfs(const int p){\n    if(p==N)return chk();\n    rep(i,1,N-1)if(!vis[i]){\n        swap(a[t[i].ft],a[t[i].sd]);vis[i]=true;\n        dfs(p+1);\n        swap(a[t[i].ft],a[t[i].sd]);vis[i]=false;\n    }\n}\n \nint T;\n \nsigned main(){\n#ifdef FILEOI\n    freopen(\"file.in\",\"r\",stdin);\n    freopen(\"file.out\",\"w\",stdout);\n#endif\n    qread(T);\n    while(T--){\n        init();\n        if(N<=10) getDfs();//\u66b4\u529b\n        else puts(\"gugugu~~~\");//\u51cf\u5c11\u6d4b\u8bd5\u65f6\u95f4\n    }\n    return 0;\n}\n```\n\n-----\n\n`\u65b9\u6cd5 2 : 35pts`\n\n\u5728\u62ff\u5230\u66b4\u529b\u7684 $10pts$ \u4e4b\u540e\uff0c\u6211\u4eec\u5e94\u8be5\u671d\u7740\u66f4\u9ad8\u7684\u5f97\u5206\u594b\u6597\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u5230**\u94fe**\u548c**\u83ca\u82b1\u56fe**\u3002\n\n\u54ea\u4e2a\u66f4\u597d\u60f3\uff1f\n\n\u5404\u4f4d\u5373\u5c06\u8fdb\u5165\u7701\u961f\u7684\u5927\u4f6c\u4eec\uff0c\u4f60\u4eec\u5e94\u8be5\u601d\u8003\u8fc7\u5427\u3002\n\n\u4e0b\u4e00\u4e2a\u90e8\u5206\u5206\uff0c**\u5e94\u8be5\u62ff\u4e0b\u83ca\u82b1\u56fe**\u3002\n\n\u600e\u4e48\u505a\uff1f ~~\u8fd9\u662f\u4e00\u4e2a\u597d\u95ee\u9898~~\n\n\u4e0d\u59a8\u770b\u4e00\u770b\u83ca\u82b1\u56fe\u6709\u4ec0\u4e48\u7279\u6027\u3002\n\n\u5047\u5982\u8bf4\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u83ca\u82b1\u56fe\uff1a\n\n![graph.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTEvMjAvN05vSGZYRGxzM1BTV0NjLnBuZw?x-oss-process=image/format,png)\n\n\u6211\u4eec\u8003\u8651\u968f\u4fbf\u5220\u4e00\u4e9b\u8fb9\u3002\n\n\u5047\u5982\u6211\u4eec\u5220\u9664\u8fb9 $\\{1,4\\}$ \uff0c\u90a3\u4e48 $P_4->Y_7$ \u662f\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u7684\uff0c\u56e0\u4e3a\u9664\u4e86\u8fd9\u4e00\u6761\u8fb9 $\\{1,4\\}$ \u4ee5\u5916\uff0c\u6ca1\u6709\u8fb9\u548c $4$ \u53f7\u70b9\u6709\u5173\u3002\n\n\u518d\u968f\u4fbf\u6765\uff0c\u628a\u8fb9 $\\{1,2\\}$ \u5220\u6389\uff0c\u90a3\u4e48 $P_2->Y_1$ \u4e5f\u662f\u4e00\u5b9a\u4fdd\u8bc1\u4e86\uff0c\u7406\u7531\u540c\u4e0a\u3002\n\n\u518d\u8bd5\u51e0\u6b21\uff0c\u53d1\u73b0\u5728\u83ca\u82b1\u56fe\u4e0a\uff0c\u9664\u4e86\u82b1\u5fc3\u4ee5\u5916\uff0c\u5176\u4ed6\u70b9\u4e00\u5b9a\u56fa\u5b9a\u4e86\u662f\u5220\u8fb9\u65f6\u82b1\u5fc3\u7684\u503c\uff0c\u800c\u5b83\u672c\u8eab\u7684\u6570\u8dd1\u5230\u82b1\u5fc3\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u56fa\u5b9a\u7684\u503c\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u662f\u4e0d\u662f\u6709\u70b9\u50cf\u4e00\u4e2a**\u73af**\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u6761**\u5355\u94fe**\uff1f\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\uff1f\n\n\u6211\u4eec\u8fd9\u6837\u770b\uff0c\u5220 $\\{1,4\\}$ \uff0c\u7b49\u4e8e\u52a0\u8fb9 $\\{Y_7->P_4\\}$ \uff0c\u6b64\u65f6 $P_1->Y_1$ \u3002\n\n\u518d\u5220\u8fb9 $\\{1,2\\}$ \uff0c\u7b49\u4e8e\u52a0\u8fb9 ${Y_1->P_2}$ \uff0c\u6b64\u65f6 $P_1->Y_3$ .\n\n\u518d\u679a\u4e3e\u51e0\u6b21\uff0c\u53d1\u73b0\u6bcf\u4e2a\u6570\u5b57 $Y_i$ \u53ea\u4f1a\u6700\u591a\u5411\u5916\u8fde\u51fa\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u76f8\u5f53\u4e8e\u662f\u4e00\u6761\u5355\u94fe\uff0c\u4f46\u662f\u6700\u540e\u8fde $Y_n$ \u65f6\uff0c\u6574\u4e2a\u56fe\u4e00\u5b9a\u4f1a\u8fde\u6210\u4e00\u4e2a\u5927\u73af\u3002\n\n\u4f46\u662f\u5728\u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u63d0\u524d\u6210\u73af\u7684\u60c5\u51b5\u2014\u2014\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u4ee3\u7801\u89c1\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<utility>\nusing namespace std;\n \n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define fep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define writc(a,b) fwrit(a),putchar(b)\n#define mp(a,b) make_pair(a,b)\n#define ft first\n#define sd second\n//#define FILEOI\n \ntypedef pair<int,int> pii;\n \n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n    char c;bool f=0;\n    while(cg<'0'||'9'<c)if(c=='-')f=1;\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    if(f)x=-x;\n}\ninline int qread(){\n    int x=0;char c;bool f=0;\n    while(cg<'0'||'9'<c)if(c=='-')f=-1;\n    for(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n    return f?-x:x;\n}\n#undef cg\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ninline void getInv(int inv[],const int lim,const int MOD){\n    inv[0]=inv[1]=1;for(int i=2;i<=lim;++i)inv[i]=1ll*inv[MOD%i]*(MOD-MOD/i)%MOD;\n}\ntemplate<class T>void fwrit(const T x){\n    if(x<0)return (void)(putchar('-'),fwrit(-x));\n    if(x>9)fwrit(x/10);putchar(x%10^48);\n}\n \nconst int MAXN=2000;\n \nstruct edge{\n    int to,nxt;\n    edge(){}\n    edge(const int T,const int N):to(T),nxt(N){}\n}e[(MAXN<<1)+5];\nint tail[MAXN+5],ecnt,in[MAXN+5],maxin,tcnt;\npii t[MAXN+5];\ninline void add_edge(const int u,const int v){\n    ++in[u],++in[v];//\u66f4\u6539\u70b9\u7684\u5165\u5ea6\n    e[++ecnt]=edge(v,tail[u]);tail[u]=ecnt;\n    e[++ecnt]=edge(u,tail[v]);tail[v]=ecnt;\n \n    maxin=Max(maxin,Max(in[u],in[v]));//\u7279\u5224\u83ca\u82b1\u56fe\n    t[++tcnt]=mp(u,v);//\u8bb0\u5f55\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\n}\n \nint N,a[MAXN+5],ans[MAXN+5];\n//a[i] : \u70b9 i \u7684\u6570\u5b57\u662f\u591a\u5c11\n//ans[i] : \u8bb0\u5f55\u7b54\u6848\n \ninline void init(){\n    qread(N);\n \n    //\u6e05\u7a7a\u56fe\n    ecnt=0,tcnt=0,maxin=0;\n    rep(i,1,N)tail[i]=0,in[i]=0,ans[i]=N-i+1;\n \n    //\u8f93\u5165\n    rep(i,1,N)a[qread()]=i;\n    rep(i,1,N-1)add_edge(qread(),qread());\n    /*\n    rep(i,1,N)writc(a[i],' ');\n    putchar('\\n');\n    */\n}\n \nint pre[MAXN+5];\ninline void buildSet(){rep(i,1,N)pre[i]=i;}\nint findSet(const int u){return u==pre[u]?u:pre[u]=findSet(pre[u]);}\ninline void unionSet(const int u,const int v){return (void)(pre[findSet(u)]=findSet(v));}\n \nbool vis[MAXN+5];\nint tmp[MAXN+5],pt[MAXN+5];\n \ninline void work(){//\u5904\u7406\u83ca\u82b1\u56fe\n    buildSet();\n    rep(i,1,N)tmp[a[i]]=i,vis[i]=0;\n    rep(i,1,N-1){\n        rep(j,1,N)if(!vis[j]&&findSet(tmp[i])!=findSet(j)){\n            vis[j]=true,pt[tmp[i]]=j;\n            unionSet(tmp[i],j);\n            break;\n        }\n    }\n    rep(i,1,N-1)writc(pt[tmp[i]],' ');\n    rep(i,1,N)if(!vis[i]){\n        writc(i,'\\n');\n        break;\n    }\n}\n \nint mir[MAXN+5];\nvoid dfs(const int);\ninline void getDfs(){\n    rep(i,1,N)vis[i]=0;\n    dfs(1);\n    rep(i,1,N-1)writc(ans[i],' ');\n    writc(ans[N],'\\n');\n}\ninline void chk(){\n    rep(i,1,N)mir[a[i]]=i;\n    rep(i,1,N){\n        if(mir[i]<ans[i]){\n            rep(j,1,N)ans[j]=mir[j];\n            break;\n        }\n        if(mir[i]>ans[i])break;\n    }\n    return;\n}\nvoid dfs(const int p){\n    if(p==N)return chk();\n    rep(i,1,N-1)if(!vis[i]){\n        swap(a[t[i].ft],a[t[i].sd]);vis[i]=true;\n        dfs(p+1);\n        swap(a[t[i].ft],a[t[i].sd]);vis[i]=false;\n    }\n}\n \nint T;\n \nsigned main(){\n#ifdef FILEOI\n    freopen(\"file.in\",\"r\",stdin);\n    freopen(\"file.out\",\"w\",stdout);\n#endif\n    qread(T);\n    while(T--){\n        init();\n        if(N<=10)getDfs();\n        else if(maxin==N-1)work();\n        else puts(\"gugugu~~~\");\n    }\n    return 0;\n}\n```\n\n-----\n\n`\u65b9\u6cd5 3 : 60pts`\n\n\u5728\u5f97\u5230 $45pts$ \u4e4b\u540e\uff0c\u4f60\u4e00\u5b9a\u5f88\u5f00\u5fc3\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u662f\u8003\u8bd5\uff0c\u90a3\u662f\u4e00\u5b9a\u4e0d\u591f\u7684\u3002\n\n\u4f46\u662f\u5982\u679c\u8fd9\u662f\u8003\u8bd5\uff0c\u90a3\u662f\u4e00\u5b9a\u4e0d\u591f\u7684\u3002\n\n\u6211\u4eec\u7ee7\u7eed\u671d\u66f4\u9ad8\u7684\u5f97\u5206\u594b\u6597\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u5206\u6790**\u94fe**\u3002\n\n\u9996\u5148\uff0c\u94fe\u6709\u4ec0\u4e48\u7279\u6027\uff1f\u4f3c\u4e4e\u8fd9\u662f\u5f88\u7b80\u5355\u7684\u4e00\u4e2a\u95ee\u9898\u3002\n\n\u5b83\u7684\u7279\u6027\u663e\u7136\uff1a\n\n- \u5b83\u662f\u4e00\u6761\u7c7b\u4f3c\u4e8e\u7ebf\u7684\u4e1c\u897f\uff1b\n- \u9664\u4e86\u4e24\u4e2a\u7aef\u70b9\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u70b9**\u5ea6**\u90fd\u4e3a $2$\uff08\u5206\u51fa\u5ea6\u548c\u5165\u5ea6\uff09\uff1b\n- ...\uff08\u4f5c\u8005\u592a\u5f31\uff0c\u53ea\u60f3\u5f97\u51fa\u8fd9\u51e0\u79cd\u60c5\u51b5\uff09\n\n\u90a3\u4e48\uff0c\u9488\u5bf9\u8fd9\u4e9b\u60c5\u51b5\u8fdb\u884c\u5206\u6790\uff1a\n\n\u9488\u5bf9**\u7279\u60271**\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5355\u94fe\u62cd\u5230\u6811\u4e0a\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint lt[MAXN+5],lcnt;//\u94fe\u8868\u548c\u4e0b\u6807\ninline void getlist(const int u,const int pre){\n\tlt[pt[u]=++lcnt]=u;//pt[i] : \u70b9 i \u5728\u94fe\u8868\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n\tfor(int i=tail[u],v;i;i=e[i].nxt)if((v=e[i].to)!=pre)\n\t\tgetlist(v,u);\n}\n```\n\n\u8fd9\u4e2a\u5730\u65b9\u5f88\u7b80\u5355\u3002\n\n\u90a3\u4e48**\u7279\u60272**\uff1f\n\n\u6240\u8c13\u5165\u5ea6\u3001\u51fa\u5ea6\u4e3a $2$ \u5373\u9664\u7aef\u70b9\u4ee5\u5916\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u6761\u8fb9\u4e0e\u5176\u76f8\u8fde\uff0c\u800c\u8fd9\u4e24\u6761\u8fb9\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\u5220\u9664\u65f6\u95f4\u4e00\u5b9a\u4e0d\u540c\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u8fd9\u4e24\u6761\u8fb9\u8fdb\u884c\u6807\u8bb0\uff0c\u5206\u51e0\u79cd\u60c5\u51b5\uff1a\n\n- \u5de6\u8fb9\u7684\u8fb9\u5148\u5220\uff0c\u53f3\u8fb9\u7684\u8fb9\u540e\u5220\uff08\u5de6\u5148\u53f3\u540e\uff09\n- \u5de6\u540e\u53f3\u5148\n- \u6ca1\u6709\u8fc7\u6807\u8bb0\n\n\u9488\u5bf9\u8fd9\u4e2a\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\n\n```cpp\nshort int mark[MAXN+5];//\u6807\u8bb0 : 0-\u65e0\u6807\u8bb0 ; 1-\u5de6\u5148\u53f3\u540e ; 2-\u5de6\u540e\u53f3\u5148\n```\n\n\u6b64\u5904\u9009\u7528 `short int` \u4e3a\u7684\u662f\u8282\u7701\u5185\u5b58 ~~\u5176\u5b9e\u7701\u4e0d\u4e86\u591a\u5c11~~\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u6807\u8bb0\u5462\uff1f\u6211\u4eec\u6765\u5206\u6790\u4e00\u79cd\u60c5\u51b5\u3002\n\n\u5047\u8bbe\u6570 $x$ \u8981\u5230\u70b9 $i$ \u53bb\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![graph _1_.png](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTEvMjAvUUhJQldZZTlBSzRSdVBvLnBuZw?x-oss-process=image/format,png)\n\n\u8fb9\u4e0a\u7684\u6570\u5b57\u662f\u8fb9\u7684\u7f16\u53f7\u3002\n\n\u91cd\u590d\u4e00\u904d\u95ee\u9898\uff1a**\u6570\u5b57** $x$ \u8981\u53bb $i$ **\u70b9**\n\n\u90a3\u4e48\u9996\u5148\uff0c$edge_1$ \u4e00\u5b9a\u662f\u5728 $edge_2$ \u4e4b\u540e\u5220\uff0c\u4e0d\u7136\u6570\u5b57 $x$ \u5c31\u8dd1\u5230\u5176\u4ed6\u5730\u65b9\u53bb\u4e86\u3002\n\n\u6839\u636e $mark[]$ \u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u53ef\u5f97 $mark[x]=2$ \n\n\u540c\u7406\uff0c$edge_2\u3001edge_3\u3001edge_4\u3001edge_5$ \u4e00\u5b9a\u662f\u4f9d\u6b21\u5220\u9664\u7684\uff0c\u90a3\u4e48\u53ef\u5f97 $mark[p1]=mark[p2]=mark[p3]=1$\n\n\u800c\u70b9 $i$ \uff0c\u8981\u4fdd\u8bc1\u7684\u662f $edge_6$ \u5728 $edge_5$ \u4e4b\u524d\u5220\u9664\uff0c\u4e3a\u4ec0\u4e48\uff1f\n\n\u56e0\u4e3a\u5f53 $x$ \u5230 $i$ \u70b9\u4e4b\u540e\uff0c\u5982\u679c $edge_6$ \u8fd8\u5b58\u5728\uff0c\u90a3\u4e48 $x$ \u5c31\u4f1a\u8dd1\u5230 $p_4$ \u90a3\u91cc\u53bb\u3002\n\n\u7531\u6b64\u63a8\u51fa\uff0c$mark[i]=2$\n\n\u8fd9\u662f $x$ \u5f80\u53f3\u8d70\u7684\u60c5\u51b5\uff0c$x$ \u5f80\u5de6\u7684\u60c5\u51b5\u53ef\u81ea\u884c\u63a8\u5bfc ~~\u8981\u770b\u4ee3\u7801\u6211\u4e5f\u4e0d\u62e6\u4f60\uff0c\u63a8\u8350\u81ea\u5df1\u63a8\u4e00\u4e0b\uff0c\u5f88\u7b80\u5355~~\n\n\u800c\u6700\u540e\uff0c\u6211\u4eec\u5224\u5b9a\u4e00\u4e2a\u65b9\u6cd5\u662f\u5426\u53ef\u884c\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5b83\u548c\u524d\u9762\u7684\u8fb9\u7684\u6807\u8bb0\u662f\u5426\u51b2\u7a81\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<utility>\nusing namespace std;\n\n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define fep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define writc(a,b) fwrit(a),putchar(b)\n#define mp(a,b) make_pair(a,b)\n#define ft first\n#define sd second\n#define LL long long\n// #define FILEOI\n\ntypedef pair<int,int> pii;\n\n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n\tchar c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\tif(f)x=-x;\n}\ninline int qread(){\n\tint x=0;char c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=-1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\treturn f?-x:x;\n}\n#undef cg\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ninline void getInv(int inv[],const int lim,const int MOD){\n\tinv[0]=inv[1]=1;for(int i=2;i<=lim;++i)inv[i]=1ll*inv[MOD%i]*(MOD-MOD/i)%MOD;\n}\ntemplate<class T>void fwrit(const T x){\n\tif(x<0)return (void)(putchar('-'),fwrit(-x));\n\tif(x>9)fwrit(x/10);putchar(x%10^48);\n}\n\nconst int MAXN=2000;\n\nstruct edge{\n\tint to,nxt;\n\tedge(){}\n\tedge(const int T,const int N):to(T),nxt(N){}\n}e[(MAXN<<1)+5];\nint tail[MAXN+5],ecnt,in[MAXN+5],maxin,tcnt;\npii t[MAXN+5];\ninline void add_edge(const int u,const int v){\n\t++in[u],++in[v];//\u66f4\u6539\u70b9\u7684\u5165\u5ea6\n\te[++ecnt]=edge(v,tail[u]);tail[u]=ecnt;\n\te[++ecnt]=edge(u,tail[v]);tail[v]=ecnt;\n\n\tmaxin=Max(maxin,Max(in[u],in[v]));//\u7279\u5224\u83ca\u82b1\u56fe\n\tt[++tcnt]=mp(u,v);//\u8bb0\u5f55\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\n}\n\nint N,a[MAXN+5],ans[MAXN+5];\n//a[i] : \u70b9 i \u7684\u6570\u5b57\u662f\u591a\u5c11\n//ans[i] : \u8bb0\u5f55\u7b54\u6848\n\ninline void init(){\n\tqread(N);\n\n\t//\u6e05\u7a7a\u56fe\n\tecnt=0,tcnt=0,maxin=0;\n\trep(i,1,N)tail[i]=0,in[i]=0,ans[i]=N-i+1;\n\n\t//\u8f93\u5165\n\trep(i,1,N)a[qread()]=i;\n\trep(i,1,N-1)add_edge(qread(),qread());\n\t/*\n\trep(i,1,N)writc(a[i],' ');\n\tputchar('\\n');\n\t*/\n}\n\nint pre[MAXN+5];\ninline void buildSet(){rep(i,1,N)pre[i]=i;}\nint findSet(const int u){return u==pre[u]?u:pre[u]=findSet(pre[u]);}\ninline void unionSet(const int u,const int v){return (void)(pre[findSet(u)]=findSet(v));}\n\nbool vis[MAXN+5];\nint tmp[MAXN+5],pt[MAXN+5];\n\ninline void work(){//\u5904\u7406\u83ca\u82b1\u56fe\n\tbuildSet();\n\trep(i,1,N)tmp[a[i]]=i,vis[i]=0;\n\trep(i,1,N-1){\n\t\trep(j,1,N)if(!vis[j]&&findSet(tmp[i])!=findSet(j)){\n\t\t\tvis[j]=true,pt[tmp[i]]=j;\n\t\t\tunionSet(tmp[i],j);\n\t\t\tbreak;\n\t\t}\n\t}\n\trep(i,1,N-1)writc(pt[tmp[i]],' ');\n\trep(i,1,N)if(!vis[i]){\n\t\twritc(i,'\\n');\n\t\tbreak;\n\t}\n}\n\nint mir[MAXN+5];\nvoid dfs(const int);\ninline void getDfs(){\n\trep(i,1,N)vis[i]=0;\n\tdfs(1);\n\trep(i,1,N-1)writc(ans[i],' ');\n\twritc(ans[N],'\\n');\n}\ninline void chk(){\n\trep(i,1,N)mir[a[i]]=i;\n\trep(i,1,N){\n\t\tif(mir[i]<ans[i]){\n\t\t\trep(j,1,N)ans[j]=mir[j];\n\t\t\tbreak;\n\t\t}\n\t\tif(mir[i]>ans[i])break;\n\t}\n\treturn;\n}\nvoid dfs(const int p){\n\tif(p==N)return chk();\n\trep(i,1,N-1)if(!vis[i]){\n\t\tswap(a[t[i].ft],a[t[i].sd]);vis[i]=true;\n\t\tdfs(p+1);\n\t\tswap(a[t[i].ft],a[t[i].sd]);vis[i]=false;\n\t}\n}\n\nint lt[MAXN+5],lcnt;\nshort int mark[MAXN+5];//\u6807\u8bb0 : 0-\u65e0\u6807\u8bb0 ; 1-\u5de6\u5148\u53f3\u540e ; 2-\u5de6\u540e\u53f3\u5148\ninline void getlist(const int u,const int pre){\n\tlt[pt[u]=++lcnt]=u;\n\tfor(int i=tail[u],v;i;i=e[i].nxt)if((v=e[i].to)!=pre)\n\t\tgetlist(v,u);\n}\ninline bool chkl(const int p1,const int p2){\n\tif(mark[pt[p1]]==1)return false;\n\n\trep(i,pt[p1]+1,pt[p2]-1)if(mark[i]==2)return false;\n\n\tif(mark[pt[p2]]==1)return false;\n\n\treturn true;\n}\ninline void getMarkl(const int p1,const int p2){//\u5f53 pt[p1]<=pt[p2] \u65f6\n\tif(pt[p1]!=1&&pt[p1]!=N)mark[pt[p1]]=2;\n\n\trep(i,pt[p1]+1,pt[p2]-1)mark[i]=1;\n\n\tif(pt[p2]!=1&&pt[p2]!=N)mark[pt[p2]]=2;\n}\ninline bool chkr(const int p1,const int p2){//\u5f53 pt[p1]>pt[p2] \u65f6\n\tif(mark[pt[p1]]==2)return false;\n\n\tfep(i,pt[p1]-1,pt[p2]+1)if(mark[i]==1)return false;\n\n\tif(mark[pt[p2]]==2)return false;\n\n\treturn true;\n}\ninline void getMarkr(const int p1,const int p2){\n\tif(pt[p1]!=1&&pt[p1]!=N)mark[pt[p1]]=1;\n\n\tfep(i,pt[p1]-1,pt[p2]+1)mark[i]=2;\n\n\tif(pt[p2]!=1&&pt[p2]!=N)mark[pt[p2]]=1;\n}\ninline void workList(){//\u89e3\u51b3\u5355\u94fe\n\tlcnt=0;\n\trep(i,1,N)if(in[i]==1){//\u538b\u5230\u6570\u7ec4\u4e0a\u9762\n\t\tgetlist(i,0);\n\t\tbreak;\n\t}\n\t/*\n\tprintf(\"this is the list:\");\n\trep(i,1,N)writc(lt[i],' ');\n\tputchar('\\n');\n\tprintf(\"this is pt arr:\");\n\trep(i,1,N)writc(pt[i],' ');\n\tputchar('\\n');\n\t*/\n\n\trep(i,1,N)vis[i]=false,mir[a[i]]=i,mark[i]=0;\n\n\trep(i,1,N)rep(j,1,N)if(!vis[j]&&pt[j]!=pt[mir[i]]){\n\t\t//\u76ee\u6807\u4f4d\u7f6e\u4e0d\u80fd\u548c\u672c\u6765\u7684\u4f4d\u7f6e\u91cd\u5408\u5e76\u4e14\u76ee\u6807\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u5176\u4ed6\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u6570\u5360\u6709\n\t\t// printf(\"Now the number is %d, the goal position is %d\\n\",i,j);\n\t\tint p1=mir[i],p2=j;bool flg=false;\n\t\tif(pt[p1]<=pt[p2]){//\u5982\u679c\u8fd9\u4e2a\u6570\u662f\u5f80\u5de6\u8fb9\u8d70\n\t\t\tif(chkl(p1,p2))\n\t\t\t\tgetMarkl(p1,p2),flg=true;\n\t\t}\n\t\telse{//\u53cd\u4e4b\n\t\t\tif(chkr(p1,p2))\n\t\t\t\tgetMarkr(p1,p2),flg=true;\n\t\t}\n\t\tif(flg){//\u8bb0\u5f55\u7b54\u6848\n\t\t\tans[i]=j,vis[j]=true;\n\t\t\tbreak;\n\t\t}\n\t}\n\trep(i,1,N-1)writc(ans[i],' ');//\u8f93\u51fa\u7b54\u6848\n\twritc(ans[N],'\\n');\n}\n\nint T;\n\nsigned main(){\n#ifdef FILEOI\n\tfreopen(\"rdata.out\",\"r\",stdin);\n\tfreopen(\"file.out\",\"w\",stdout);\n#endif\n\tqread(T);\n\twhile(T--){\n\t\tinit();\n\t\tif(N<=10)getDfs();\n\t\telse if(maxin==N-1)work();\n\t\telse if(maxin==2)workList();\n\t\telse puts(\"gugugu~~~\");\n\t}\n\treturn 0;\n}\n```\n\n-----\n\n`\u65b9\u6cd5 4 : 100pts`\n\n~~\u76ee\u524d\u5c1a\u5f85\u8ba8\u8bba...~~\n\n$lj$ \u5927\u4f6c\u618b\u4e86\u4e24\u5929\uff0c\u7ec8\u4e8e\u820d\u5f97\u628a\u6b63\u89e3\u8bb2\u51fa\u6765\u4e86\uff0c\u63a5\u4e0b\u6765\u662f\u6b63\u89e3\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u7684\u5355\u94fe\u662f\u600e\u4e48\u505a\u7684\uff1f\n\n\u7ef4\u62a4\u4e00\u4e2a\u70b9\u7684\u4e24\u4e2a\u8fb9\u5220\u9664\u7684\u5148\u540e\u987a\u5e8f\u3002\n\n\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff1a ~~\u4e00\u4e2a\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u7ed3\u8bba~~\n\n> \u53ea\u6709\u5171\u7528\u540c\u4e00\u4e2a\u9876\u70b9\u7684\u8fb9\u624d\u6709\u5220\u9664\u7684\u5148\u540e\u5173\u7cfb\n\n\u800c\u5224\u5b9a\u4e00\u4e2a\u65b9\u6cd5\u662f\u5426\u53ef\u884c\uff0c\u53ea\u9700\u770b\u8fd9\u4e2a\u65b9\u6848\u662f\u5426\u548c\u524d\u9762\u7684\u65b9\u6848\u51b2\u7a81\u5373\u53ef\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u80fd\u5426\u5c06\u8fd9\u6837\u7684\u7ef4\u62a4\u6269\u5c55\u5230\u591a\u6761\u8fb9\u7684\u60c5\u51b5\uff1f\u5176\u5b9e\u662f\u53ef\u4ee5\u7684 ~~\u4e0d\u7136\u6211\u4e3a\u4ec0\u4e48\u8981\u95ee\u8fd9\u4e2a\u95ee\u9898~~\n\n\u53ea\u6709\u4e24\u6761\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u7ef4\u62a4 **\u5de6\u524d\u53f3\u540e** \u6216\u8005 **\u5de6\u540e\u53f3\u524d** \u7684\u60c5\u51b5\uff0c\u4f46\u662f\u5bf9\u4e8e\u591a\u6761\u8fb9\u8fd9\u6837\u663e\u7136\u662f\u4e0d\u884c\u7684\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u591a\u4e2a\u5220\u8fb9\u7684\u5148\u540e\u5173\u7cfb\uff0c\u6211\u4eec\u5c06\u5176\u6392\u6210\u4e00\u6392\uff0c\u6bd4\u5982\u6211\u4eec\u5220\u8fb9\u987a\u5e8f\u662f\uff1a$1,3,5,4...$\n\n\u5c06\u5b83\u4eec\u6392\u6210\u4e00\u6392\u4e4b\u540e\uff0c\u53d1\u73b0\u5b83\u6709\u70b9\u50cf\u94fe\u8868\u3002\n\n\u8003\u8651\u7528\u94fe\u8868\u7ef4\u62a4\u5220\u9664\u8fb9\u7684\u5148\u540e\u5173\u7cfb\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u5220\u9664\u8fb9\u7684\u987a\u5e8f\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u600e\u4e48\u529e\uff1f\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b83\u4eec\u770b\u6210\u6709\u8bb8\u591a\u4e2a\u94fe\u8868\uff0c\u4f46\u662f\u5b83\u4eec\u6ca1\u6709\u63a5\u5728\u4e00\u8d77\u5373\u53ef\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u5bfb\u627e\u4e00\u6761\u5408\u6cd5\u8def\u5f84\uff1f\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5bfb\u5f84\u7b97\u6cd5\u5206\u6210\u51e0\u4e2a\u90e8\u5206\uff1a\n\n- \u5bf9\u4e8e\u8d77\u98de\u70b9\uff08\u5373\u6570\u5b57\u4e00\u5f00\u59cb\u6240\u5728\u7684\u70b9\uff09\n- \u5bf9\u4e8e\u4e2d\u8f6c\u70b9\n- \u5bf9\u4e8e\u7ed3\u675f\u70b9\n\n`\u90e8\u5206 1:\u5bf9\u4e8e\u8d77\u98de\u70b9`\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8d77\u98de\u70b9 $u$\uff0c\u6211\u4eec\u8003\u8651\u5bfb\u627e\u4e00\u6761**\u8d77\u98de\u8fb9**\uff0c**\u5e76\u4e14\u8fd9\u6761\u8d77\u98de\u8fb9\u662f\u4e00\u5b9a\u5b58\u5728**\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u6761\u8d77\u98de\u8fb9\u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\uff1f\n\n\u9996\u5148\uff0c\u8fd9\u6761\u8d77\u98de\u8fb9\u524d\u9762\u4e0d\u80fd\u6709\u4ec0\u4e48\u5176\u4ed6\u7684\u4e1c\u897f\u3002\n\n\u5373\u5bf9\u4e8e\u70b9 $u$ \u7684\u5220\u8fb9\u987a\u5e8f\u6240\u8fde\u6210\u7684**\u94fe\u8868\u96c6**\u4e2d\uff0c\u8fd9\u6761\u8fb9\u5fc5\u987b\u662f\u5176\u4e2d\u67d0\u4e00\u6761\u94fe\u7684\u8d77\u70b9\u3002\n\n\u800c\u4e14\uff0c\u6211\u4eec\u5206\u6790\uff0c\u5982\u679c\u8fd9\u662f\u4e00\u6761\u8d77\u98de\u8fb9\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u6240\u6709 $u$ \u7684\u8fb9\u4e2d\u6700\u5148\u5220\u9664\u7684\u90a3\u6761\u8fb9\uff08\u5982\u679c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u53c2\u8003\u672c\u9898\u94fe\u7684\u5904\u7406\u65b9\u6cd5\uff09\n\n**\u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u7559\u5230\u540e\u9762\u7ed3\u675f\u70b9\u4e4b\u540e\u5206\u6790\u3002**\n\n`\u90e8\u5206 2:\u5bf9\u4e8e\u4e2d\u8f6c\u70b9`\n\n\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u4e2d\u8f6c\u70b9\uff0c\u8003\u8651\u679a\u4e3e\u4e00\u6761\u8fb9 $e'$ \u5728 $e$ (\u6211\u4eec\u4e4b\u524d\u5220\u9664\u7684\u90a3\u6761\u8fb9)\n\n\u800c\u8fd9\u4e2a\u4e2d\u8f6c\u70b9\u5fc5\u987b\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u5462?\n\n\u6bd5\u7adf $e'$ \u662f\u63a5\u5728 $e$ \u4e4b\u540e\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4fdd\u8bc1 $e'$ \u4e4b\u524d\u6ca1\u6709\u5176\u4ed6\u7684\u8fb9\u3002\n\n\u800c\u4e14\uff0c\u70b9 $e'$ \u4e0e\u70b9 $e$ \u8fd8\u6ca1\u6709\u8fde\u5728\u4e00\u8d77\uff0c\u5373\u5b83\u4eec\u5206\u522b\u6240\u5728\u4e0d\u540c\u7684\u94fe\u4e0a\uff08\u56e0\u4e3a\u6211\u4eec\u672c\u6765\u5c31\u662f\u8981\u5c06\u4ed6\u4eec\u8fde\u5728\u4e00\u8d77\uff09\u3002\n\n\u5e76\u4e14\uff0c$e'$ \u662f\u5728 $e$ \u4e4b\u540e\uff0c\u4f46\u662f\u5982\u679c $e'$ \u662f\u4e00\u6761\u8d77\u98de\u8fb9\uff0c\u5373\u8fd9\u6761\u8fb9\u5fc5\u987b\u662f\u6700\u5148\u5220\u9664\u7684\uff0c\u90a3\u4e48 $e'$ \u5c31\u662f\u4e0d\u7b26\u5408\u7684\u3002\n\n**\u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u7559\u5230\u540e\u9762\u7ed3\u675f\u70b9\u4e4b\u540e\u5206\u6790\u3002**\n\n`\u90e8\u5206 3:\u5bf9\u4e8e\u964d\u843d\u70b9`\n\n\u5982\u679c\u70b9 $u$ \u662f\u4e00\u4e2a\u964d\u843d\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8fb9 $e$ \u5fc5\u987b\u662f\u6700\u540e\u5220\u9664\u7684\uff08\u5982\u679c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u53c2\u8003\u672c\u9898\u94fe\u7684\u5904\u7406\u65b9\u5f0f\uff09\n\n\u5373\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$ \uff0c\u6211\u4eec\u76ee\u524d\u8fd8\u5e76\u672a\u6307\u5b9a $u$ \u7684\u67d0\u4e00\u6761\u8fb9\u5fc5\u987b\u662f\u7ed3\u675f\u8fb9\u3002\n\n\u4f46\u662f\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0e\u524d\u9762\u7684\u4e24\u4e2a\u90e8\u5206\u90fd\u6709\u5173\u3002\n\n\u5982\u679c\u8fd9\u6761\u7ed3\u675f\u8fb9 $e$ \u662f\u4e0e\u524d\u9762\u7684\u8d77\u98de\u8fb9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u5373\u5b83\u4eec\u5148\u540e\u987a\u5e8f\u5df2\u786e\u5b9a\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u8981\u4fdd\u8bc1\u8fd9\u4e2a\u5220\u8fb9\u987a\u5e8f\u7ec4\u6210\u7684\u94fe\u4e2d\uff0c\u957f\u5ea6\u521a\u597d\u4e3a $u$ \u7684\u8fb9\u6570\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4eec\u6700\u540e\uff0c\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u90fd\u88ab\u5220\u53bb\u3002\n\n**\u800c\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\uff0c\u5373\u662f\u6211\u4eec\u5c06\u6700\u5f00\u5934\u6240\u5220\u9664\u7684\u8fb9\uff0c\u4e0e\u6700\u672b\u5c3e\u6240\u5220\u9664\u7684\u8fb9\u8fde\u63a5\u5728\u4e00\u8d77\u800c\u5f62\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u3001\u5df2\u65e0\u6cd5\u518d\u6b21\u4fee\u6539\u7684\u957f\u94fe\uff0c\u800c\u5982\u679c\u6709\u5269\u4f59\u7684\u8fb9\u6ca1\u6709\u88ab\u5220\u53bb\uff0c\u5b83\u4eec\u5c31\u6ca1\u6709\u673a\u4f1a\u518d\u63d2\u5165\u5230\u8fd9\u4e2a\u94fe\u4e4b\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u4e2a\u673a\u4f1a\u53bb\u5220\u9664\u8fd9\u6761\u8fb9\uff0c\u4e0e\u9898\u610f\u4e0d\u7b26\u3002**\n\n\u751f\u52a8\u5730\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u8ba9\u8fd9\u4e2a\u5b8c\u6574\u7684\u94fe\u51fa\u73b0**\u63d0\u524d\u81ea\u95ed**\u7684\u60c5\u51b5\u3002\n\n\u77e5\u9053\u8fd9\u4e2a\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u53cd\u8fc7\u6765\u8865\u5145 `\u90e8\u5206 1` \u4e0e `\u90e8\u5206 2` \u3002\n\n`\u90e8\u5206 1 \u8865\u5145`\n\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u6307\u5b9a\u8d77\u98de\u8fb9 $e$ \uff0c\u800c\u6211\u4eec\u8981\u5c06\u8fb9 $e'$ \u63a5\u5230 $e$ \u4e4b\u540e\u3002\n\n\u4f46\u662f\u5982\u679c $e'$ \u5df2\u7ecf\u4e0e\u964d\u843d\u8fb9\uff0c\u5373\u672b\u5220\u8fb9\u76f8\u8fde\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u8981\u9632\u6b62**\u63d0\u524d\u81ea\u95ed**\u7684\u60c5\u51b5\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4e5f\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u94fe\u957f\u5ea6\u5fc5\u987b\u4e0e $u$ \u7684\u8fb9\u6570\u4e00\u6837\u3002\n\n`\u90e8\u5206 2 \u8865\u5145`\n\n\u5982\u679c\u6211\u4eec\u7684\u8fb9 $e$ \u5df2\u7ecf\u8fde\u63a5\u5230\u8d77\u59cb\u8fb9\uff0c\u800c $e'$ \u5df2\u7ecf\u8fde\u63a5\u5230\u672b\u5220\u8fb9\u3002\n\n\u90a3\u5982\u679c\u6211\u4eec\u8981\u5c06 $e$ \u4e0e $e'$ \u8fde\u8d77\u6765\u5220\uff0c\u4e5f\u5c31\u662f\u5c06\u4e24\u4e2a\u5b8c\u6574\u94fe\u8fde\u63a5\u8d77\u6765\uff0c\u8fd9\u4e5f\u662f\u9632\u6b62**\u63d0\u524d\u81ea\u95ed**\u7684\u60c5\u51b5\u3002\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2)$ \uff0c\u5e38\u6570\u6211\u5c31\u4e0d\u77e5\u9053\u4e86\uff0c\u4f46\u662f\u80fd\u8fc7...\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u81ea\u5e26\u6ce8\u91ca\uff09\n\n```cpp\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\n#define rep(i,__l,__r) for(int i=__l,i##_end_=__r;i<=i##_end_;++i)\n#define fep(i,__l,__r) for(int i=__l,i##_end_=__r;i>=i##_end_;--i)\n#define writc(a,b) fwrit(a),putchar(b)\n#define mp(a,b) make_pair(a,b)\n#define ft first\n#define sd second\n#define LL long long\n#define ull unsigned long long\n#define pii pair<int,int>\n// #define FILEOI\n\n#define cg (c=getchar())\ntemplate<class T>inline void qread(T& x){\n\tchar c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\tif(f)x=-x;\n}\ninline int qread(){\n\tint x=0;char c;bool f=0;\n\twhile(cg<'0'||'9'<c)if(c=='-')f=-1;\n\tfor(x=(c^48);'0'<=cg&&c<='9';x=(x<<1)+(x<<3)+(c^48));\n\treturn f?-x:x;\n}\n#undef cg\ntemplate<class T,class... Args>inline void qread(T& x,Args&... args){qread(x),qread(args...);}\ntemplate<class T>inline T Max(const T x,const T y){return x>y?x:y;}\ntemplate<class T>inline T Min(const T x,const T y){return x<y?x:y;}\ntemplate<class T>inline T fab(const T x){return x>0?x:-x;}\ninline void getInv(int inv[],const int lim,const int MOD){\n\tinv[0]=inv[1]=1;for(int i=2;i<=lim;++i)inv[i]=1ll*inv[MOD%i]*(MOD-MOD/i)%MOD;\n}\ntemplate<class T>void fwrit(const T x){\n\tif(x<0)return (void)(putchar('-'),fwrit(-x));\n\tif(x>9)fwrit(x/10);putchar(x%10^48);\n}\n\nconst int MAXN=2000;\n\nstruct edge{\n\tint to,nxt;\n\tedge(){}\n\tedge(const int T,const int N):to(T),nxt(N){}\n}e[(MAXN<<1)+5];\nint tail[MAXN+5],ecnt,siz[MAXN+5];\ninline void add_edge(const int u,const int v){\n\t++siz[u],++siz[v];\n\te[++ecnt]=edge(v,tail[u]);tail[u]=ecnt;\n\te[++ecnt]=edge(u,tail[v]);tail[v]=ecnt;\n}\n\nint N,minp;\nint pt[MAXN+5];\nint pre[MAXN+5][MAXN+5],nxt[MAXN+5][MAXN+5];\n//\u8fd9\u6761\u8fb9\u7684 \u524d\u9a71,\u540e\u7ee7\nint rt[MAXN+5][MAXN+5][2];\n//\u70b9 u \u7684\u67d0\u4e00\u6761\u8fb9\u7684 \u524d\u6839\u8282\u70b9\u3001\u540e\u6839\u8282\u70b9\nint len[MAXN+5][MAXN+5];\n//\u8fd9\u6761\u8fb9 \u6240\u5728\u94fe \u7684\u94fe\u8868\u957f\u5ea6\n\ninline void init(){\n\tqread(N);\n\tecnt=0;\n\trep(i,1,N)qread(pt[i]),tail[i]=siz[i]=0;\n\trep(i,1,N+1)rep(j,1,N+1)len[i][j]=pre[i][j]=nxt[i][j]=rt[i][j][0]=rt[i][j][1]=0;\n\n\tint u,v;\n\trep(i,1,N-1){\n\t\tqread(u,v);\n\t\tadd_edge(u,v);\n\t\tpre[u][v]=pre[v][u]=nxt[u][v]=nxt[v][u]=0;\n\t\trt[u][v][0]=rt[u][v][1]=v;\n\t\trt[v][u][0]=rt[v][u][1]=u;\n\t\tlen[u][v]=len[v][u]=1;\n\t}\n}\n\nvoid findPath(const int u,const int p){//\u5f53\u524d\u8282\u70b9\u3001\u524d\u4e00\u4e2a\u8282\u70b9\n\tint a=rt[u][p][0],b=rt[u][p][1],ta,tb;\n\t//a:\u6765\u7684\u8fb9\u7684\u524d\u6839 ; b:\u6765\u7684\u8fb9\u7684\u540e\u6839\n\tif(p==N+1){//\u8fd9\u662f\u8d77\u70b9\n\t\tfor(int i=tail[u],v;i;i=e[i].nxt){//\u4ece\u54ea\u6761\u8fb9\u8d77\u98de\n\t\t\tv=e[i].to;\n\t\t\tta=rt[u][v][0],tb=rt[u][v][1];\n\t\t\tif(ta!=v || (pre[u][p]==tb && len[u][ta]<siz[u]))\n\t\t\t//\u6761\u4ef6\u4e00:\u5982\u679c\u8fd9\u6761\u8fb9\u5df2\u7ecf\u6709\u4e00\u4e2a\u8d77\u70b9\u4e14\u4e0d\u662f\u81ea\u5df1\n\t\t\t//\u6761\u4ef6\u4e8c:\u5982\u679c\u540e\u9762\u7684\u90a3\u6761\u8fb9\u5df2\u7ecf\u8fde\u63a5\u5c3e\u7aef, \u4e14\u8fd9\u6761\u94fe\u7684\u957f\u5ea6\u65e0\u6cd5\u6ee1\u8db3\u5c06\u6240\u6709\u8fb9\u8fde\u8d77\u6765\n\t\t\t\tcontinue;//\u90a3\u4e48\u5c31\u4e0d\u80fd\u628a \u8fb9{u,p} \u4e0e \u8fb9{u,v} \u8fde\u5728\u4e00\u8d77\n\t\t\tfindPath(v,u);//\u5426\u5219\u53ef\u884c\n\t\t}\n\t}\n\telse{\n\t\tif(p==b){//\u5982\u679c \u8fb9{u,p} \u7684\u540e\u9762\u8fd8\u6682\u65f6\u6ca1\u6709\u6307\u5b9a\u5fc5\u987b\u5220\u54ea\u4e00\u6761\u8fb9, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u4e00\u6761\u8fb9\u63a5\u5728\u540e\u9762\n\t\t\tif(pre[u][N+1]==0 && (nxt[u][N+1]!=a || len[u][a]==siz[u]))//\u5219\u53ef\u4ee5\u8003\u8651\u5728\u70b9 u \u8fdb\u884c\u964d\u843d, \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\t\t\t//\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u672b\u5220\u8fb9\u8fd8\u6ca1\u6709\u88ab\u6307\u5b9a(\u5fc5\u987b\u6ee1\u8db3)\n\t\t\t//\u5e76\u4e14:\n\t\t\t//1.\u5982\u679c\u8fd9\u6761\u94fe\u63a5\u4e0a\u5f00\u5934\uff0c\u90a3\u4e48\u5982\u679c\u5fc5\u987b\u6ee1\u8db3\u6240\u6709\u7684\u8fb9\u90fd\u5728\u8fd9\u6761\u94fe\u4e0a\n\t\t\t//2.\u5982\u679c\u6ca1\u6709\u63a5\u4e0a\u5f00\u5934\uff0c\u90a3\u4e48\u957f\u5ea6\u968f\u610f\n\t\t\t\tminp=Min(minp,u);//\u5982\u679c\u6ee1\u8db3, \u5219 u \u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u964d\u843d\u70b9\n\n\t\t\tfor(int i=tail[u],v;i;i=e[i].nxt){//\u5047\u5b9a u \u4e3a\u4e00\u4e2a\u4e2d\u8f6c\u70b9, \u5219\u518d\u679a\u4e3e\u4e00\u6761\u8fb9\u4f5c\u4e3a \u8fb9{u,p} \u7684\u51fa\u8fb9\uff0c\u4e0e\u5176\u5c3e\u76f8\u8fde\n\t\t\t\tv=e[i].to;\n\t\t\t\tta=rt[u][v][0],tb=rt[u][v][1];\n\t\t\t\tif(a==ta || ta!=v || nxt[u][N+1]==v)//\u7b2c\u4e00\u79cd\u5927\u60c5\u51b5\n\t\t\t\t//\u5982\u679c\u8fd9\u4e24\u6761\u8fb9\u5df2\u7ecf\u5728\u540c\u4e00\u6761\u94fe\u4e0a\n\t\t\t\t//\u6216\u8005\u8fd9\u4e2a\u8fb9\u4e0d\u662f\u4e00\u4e2a\u8d77\u59cb\u8fb9, \u5373\u679a\u4e3e\u8fb9\u7684\u524d\u9762\u8fd8\u6709\u4e1c\u897f\n\t\t\t\t//\u6216\u8005\u679a\u4e3e\u8fb9\u662f\u4e00\u6761\u8d77\u98de\u8fb9, \u5373\u4fdd\u8bc1\u5b83\u662f\u6240\u6709\u5bf9\u4e8e u \u7684\u8fb9\u5fc5\u987b\u6700\u5148\u5220\u9664\u7684\u8fb9\n\t\t\t\t\tcontinue;//\u90a3\u4e48 \u5f53\u524d \u8fb9{u,p} \u90fd\u4e0d\u80fd\u63a5\u5728\u8fd9\u6761\u679a\u4e3e\u8fb9\u4e4b\u4e0a\n\t\t\t\t\n\t\t\t\tif(nxt[u][N+1]==a && pre[u][N+1]==tb && len[u][a]+len[u][ta]<siz[u])\n\t\t\t\t//\u5982\u679c\u8fd9\u4e24\u6761\u8fb9\u5206\u522b\u5c5e\u4e8e\u8fd9\u4e2a\u70b9 \u6700\u5148\u5220\u9664\u3001\u6700\u540e\u5220\u9664 \u7684\u94fe\u8868\u4e0a\u7684 \u5c3e\u3001\u5934\n\t\t\t\t//\u90a3\u4e48\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u5fc5\u987b\u7b49\u4e8e\u6240\u6709\u8fb9\u7684\u6570\u91cf\u4e4b\u548c\n\t\t\t\t//\u5426\u5219, \u8fd9\u5c31\u662f \u63d0\u524d\u81ea\u95ed \u7684\u60c5\u51b5\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfindPath(v,u);//\u5982\u679c\u4ee5\u4e0a\u90fd\u4e0d\u6ee1\u8db3, \u90a3\u4e48\u8fd9\u6761\u8fb9\u662f\u5408\u6cd5\u7684\n\t\t\t}\n\t\t}\n\t\telse findPath(nxt[u][p],u);//\u5426\u5219\u6211\u4eec\u53ea\u80fd\u6309\u7167\u4e4b\u524d\u7684\u89c4\u5b9a\u8bbf\u95ee\u8fd9\u6761\u8fb9\n\t}\n}\n\ninline void merge(const int u,const int a,const int b){\n//\u51fd\u6570\u6761\u4ef6:\u4ee5 a \u6240\u5728\u7684\u94fe\u8868\u4e3a\u524d\u94fe\u8868\n//\u5e76\u4e14\u6ee1\u8db3 a \u662f\u524d\u94fe\u8868\u5c3e, b \u662f\u540e\u94fe\u8868\u5934\n\tint ta=rt[u][a][0],tb=rt[u][b][1];\n\tnxt[u][a]=b;\n\tpre[u][b]=a;\n\tfor(int i=ta;i && i!=N+1;i=nxt[u][i]){\n\t//\u8bbf\u95ee\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\n\t\t//\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u524d\u6839\u3001\u540e\u6839\n\t\trt[u][i][0]=ta;\n\t\trt[u][i][1]=tb;\n\t}\n\tlen[u][ta]+=len[u][b];\n}\n\nbool getMark(const int u,const int p){//\u8fd8\u539f\u8def\u5f84, \u5e76\u4e14\u7ed9\u8def\u5f84\u6253\u4e0a\u6807\u8bb0\n//\u5982\u679c\u8fd9\u6761\u8def\u5f84\u627e\u5230\u7ec8\u70b9, \u8fd4\u56de 1, \u5426\u5219\u8fd4\u56de 0\n\tif(u==minp){//\u5982\u679c\u627e\u5230\u4e86\u7ec8\u70b9\n\t\tpre[u][N+1]=p;//\u628a\u8fd9\u6761\u8fb9\u8bbe\u4e3a\u6700\u540e\u5220\u9664\u7684\u8fb9\n\t\tnxt[u][p]=N+1;//\u5e76\u4e14\u628a\u8fd9\u6761\u8fb9\u7684\u4e0b\u4e00\u6761\u8fb9\u6807\u8bb0\u4e3a N+1, \u8868\u793a\u8fd9\u6761\u8fb9\u662f\u6700\u540e\u5220\u9664\u7684\n\t\treturn 1;\n\t}\n\tint a=rt[u][p][0],b=rt[u][p][1],ta,tb;\n\tif(p==N+1){//\u8fd9\u662f\u8d77\u98de\u70b9\n\t\tfor(int i=tail[u],v;i;i=e[i].nxt){\n\t\t\tv=e[i].to;\n\t\t\tta=rt[u][v][0],tb=rt[u][v][1];\n\t\t\tif(ta!=v || (pre[u][N+1]==tb && len[u][ta]<siz[u]))\n\t\t\t//\u5982\u679c\u679a\u4e3e\u8fb9\u524d\u9762\u6709\u4e1c\u897f, \u90a3\u4e48\u8fd9\u80af\u5b9a\u4e0d\u80fd\u63a5\u5728\u8d77\u59cb\u8fb9\u7684\u540e\u9762, \u56e0\u4e3a\u5b83\u524d\u9762\u5df2\u7ecf\u6709\u4e2a\u4ec0\u4e48 \u903c \u4e86\n\t\t\t//\u6216\u8005\u662f\u679a\u4e3e\u8fb9\u8fde\u63a5\u5230\u672b\u5c3e, \u4f46\u662f\u8fd9\u6761\u5355\u94fe\u957f\u5ea6\u4e0d\u591f\u5c06\u6240\u6709\u7684\u8fb9\u5305\u542b\u5230\u94fe\u91cc\u9762\n\t\t\t\tcontinue;//\u90a3\u4e48\u8fd9\u6761\u8fb9\u80af\u5b9a\u4e0d\u5728\u8def\u5f84\u4e0a\u9762, \u53ef\u76f4\u63a5\u8df3\u8fc7\n\t\t\tif(getMark(v,u)){//\u5982\u679c\u8fd9\u5c31\u662f\u6b63\u786e\u7684\u8def\u5f84\n\t\t\t\tnxt[u][N+1]=v;//\u56e0\u4e3a u \u70b9\u662f\u8d77\u98de\u70b9, \u6240\u4ee5\u628a\u8fd9\u6761\u8fb9\u8bb0\u5f55\u4e3a u \u7684\u8d77\u98de\u8fb9\n\t\t\t\tpre[u][v]=N+1;//\u540c\u65f6\u6807\u8bb0\u8fd9\u6761\u8fb9\u7684\u524d\u9a71, \u4e0e\u524d\u9762\u7684 if \u76f8\u4e92\u547c\u5e94(\u8fd9\u4e0d\u662f\u8bed\u6587...)\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse{//\u5982\u679c\u70b9 u \u662f\u4e2d\u8f6c\u70b9, \u90a3\u4e48\u8003\u8651\u679a\u4e3e\u4e2d\u8f6c\u8fb9\n\t\tif(p==b){//\u5982\u679c\u8fd9\u6761\u8fb9\u5728\u94fe\u4e0a\u540e\u9762\u6ca1\u6709\u5176\u4ed6\u8fb9\u7684\u65f6\u5019\n\t\t\tfor(int i=tail[u],v;i;i=e[i].nxt){\n\t\t\t\tv=e[i].to;\n\t\t\t\tta=rt[u][v][0],tb=rt[u][v][1];\n\t\t\t\tif(a==ta || ta!=v || nxt[u][N+1]==v)//\u53c2\u8003 findPath() \u4e2d\u76f8\u540c\u4f4d\u7f6e\u7684\u6ce8\u91ca\n\t\t\t\t\tcontinue;\n\t\t\t\tif(nxt[u][N+1]==a && pre[u][N+1]==tb && len[u][a]+len[u][ta]<siz[u])//\u540c\u6837\u53c2\u8003 findPath() \u4e2d\u540c\u6837\u4f4d\u7f6e\n\t\t\t\t\tcontinue;\n\t\t\t\tif(getMark(v,u)){\n\t\t\t\t\tmerge(u,p,v);//\u628a\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse getMark(nxt[u][p],u);\n\t}\n\treturn 0;\n}\n\nsigned main(){\n#ifdef FILEOI\n\tfreopen(\"rdata.out\",\"r\",stdin);\n\tfreopen(\"file.out\",\"w\",stdout);\n#endif\n\tint T=qread();\n\twhile(T--){\n\t\tinit();\n\t\tif(N==1){\n\t\t\twritc(1,'\\n');\n\t\t\tcontinue;\n\t\t}\n\t\trep(i,1,N){\n\t\t\tminp=N+1;\n\t\t\tfindPath(pt[i],N+1);\n\t\t\t// printf(\"%d\\n\",minp);\n\t\t\tgetMark(pt[i],N+1);\n\t\t\twritc(minp,' ');\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574339980,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "\u8003\u573a\u60f3\u51fa\u6765 $n^2$ \u6ca1\u8c03\u51fa\u6765\uff0c\u81ea\u95ed\u4e86\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$ \uff0c\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u5b83\u4e0a\u9762\u7684\u6570\u5b57\u53d8\u52a8\u60c5\u51b5\u3002\u53ef\u4ee5\u53d1\u73b0\u65e0\u8bba\u6211\u4eec\u5148\u5220\u5de6\u8fb9\u8fd8\u662f\u5148\u5220\u53f3\u8fb9\uff0c\u539f\u6765\u5b83\u4e0a\u9762\u7684\u6570\u5b57\u4e00\u5b9a\u4f1a\u88ab\u642c\u8fd0\u5230\u4e86\u5176\u4e2d\u4e00\u4e2a\u65b9\u5411\uff0c\u540c\u65f6\u53e6\u4e00\u4e2a\u65b9\u5411\u4e00\u5b9a\u53c8\u8fc7\u6765\u4e86\u4e00\u4e2a\u6570\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u6570\u5b57\u53cd\u5411\u7ecf\u8fc7\u4e86 $x$ \u3002\n\n\u4e5f\u5c31\u662f\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff08\u8fd9\u91cc\u662f\u5148\u5220\u9664\u53f3\u8fb9\u90a3\u6761\u8fb9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ase7fq89.png)\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u8282\u70b9\u5ea6\u6570\u4e0d\u662f $2$ \u7684\u60c5\u51b5\u3002\n\n\u5728\u4e0a\u9762\u7684\u60c5\u51b5\u4e2d\uff0c\u7ecf\u8fc7 $x$ \u7684 $c$ \u5b9e\u9645\u4e0a\u786e\u5b9a\u4e86\u5e94\u8be5\u5148\u5220\u9664\u53f3\u8fb9\u518d\u5220\u9664\u5de6\u8fb9\u3002\n\n\u540c\u7406\u5982\u679c $x$ \u7684\u5ea6\u6570\u4e0d\u662f $2$ \uff0c\u90a3\u4e48\u7ecf\u8fc7 $x$ \u7684 $c$ \u5b9e\u9645\u4e0a\u786e\u5b9a\u4e86\u4e00\u4e2a\u504f\u5e8f\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u54ea\u6761\u8fb9\u9700\u8981\u5728\u54ea\u6761\u8fb9\u4e4b\u540e\u88ab\u5220\u9664\u3002\n\n\u5f53\u6211\u4eec\u628a\u6240\u6709\u7684\u60c5\u51b5\u753b\u51fa\u6765\u7684\u65f6\u5019\uff0c\u7ed3\u679c\u5c31\u53d8\u5f97\u6709\u610f\u601d\u4e86\u8d77\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3y1m9ryj.png)\n\n\u5f53\u6211\u4eec\u6309\u7167 $c-1$,$c-2$,$c-3$,$c-4$,$c-5$ \u7684\u987a\u5e8f\u4f9d\u6b21\u5220\u9664\u7684\u65f6\u5019\uff0c\u539f\u5148\u4f4d\u4e8e $x$ \u4e0a\u7684\u6570\u88ab\u642c\u8fd0\u5230\u4e86 $1$ \u53f7\u70b9\u7684\u65b9\u5411\uff08\u6ce8\u610f\u53ea\u662f\u65b9\u5411\uff0c\u4e0d\u4e00\u5b9a\u88ab\u642c\u8fd0\u5230 $1$ \u53f7\u70b9\uff09\uff0c\u540c\u65f6\u8fd8\u6709 $4$ \u4e2a\u6570 $c_1,c_2,c_3,c_4$ \u7ecf\u8fc7\u4e86 $x$ \uff0c\u6700\u540e\u4ece $5$ \u53f7\u70b9\u7684\u65b9\u5411\u53c8\u8fc7\u6765\u4e86\u4e00\u4e2a\u6570\u3002\n\n\u6982\u62ec\u4e00\u4e0b\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$ \uff0c\u628a\u6240\u6709\u7ecf\u8fc7\u5b83\u7684\u6570\u5b57\u8fde\u5230\u4e00\u8d77\uff0c\u521a\u597d\u628a\u5b83\u7684\u6240\u6709\u51fa\u8fb9\u8fde\u6210\u4e00\u6761\u504f\u5e8f\u94fe\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u4e86\u3002\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5c06 $u$ \u4e0a\u9762\u7684\u6570\u642c\u8fd0\u5230 $v$ \u4e0a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad $u$ \u5230 $v$ \u8fd9\u6761\u8def\u5f84\u662f\u5426\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e $u$ \uff1a\n\n- \u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u6570\u4ece\u5b83\u642c\u8fd0\u51fa\u53bb\u4e86\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u8fd9\u6761\u51fa\u8fb9\u5df2\u7ecf\u88ab\u522b\u7684\u6570\u5b57\u6cbf\u76f8\u540c\u65b9\u5411\u8d70\u8fc7\u4e86\u4e00\u6b21\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u52a0\u4e0a\u8fd9\u4e2a\u6570\u540e\uff0c\u5f53\u524d\u786e\u5b9a\u7684\u642c\u8fd0\u60c5\u51b5\u5f62\u6210\u4e86\u4e00\u6761**\u6709\u59cb\u6709\u7ec8\u7684**\u504f\u5e8f\u94fe\uff08\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5f62\u6210\u4e86 $1-2-3-4-5$ \u8fd9\u6761\u94fe\uff09\uff0c\u5e76\u4e14 $u$ \u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\uff08\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u628a\u6240\u6709\u51fa\u8fb9\u4e32\u5230\u4e00\u8d77\uff09\n- \u5426\u5219\uff0c\u4e00\u5b9a\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e $v$ \uff0c\u53ef\u4ee5\u5bf9\u79f0\u6765\u770b\uff1a\n\n- \u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u6570\u642c\u8fd0\u5230\u5b83\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u8fd9\u6761\u51fa\u8fb9\u5df2\u7ecf\u88ab\u522b\u7684\u6570\u5b57\u6cbf\u76f8\u540c\u65b9\u5411\u8d70\u8fc7\u4e86\u4e00\u6b21\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u52a0\u4e0a\u8fd9\u4e2a\u6570\u540e\uff0c\u5f53\u524d\u786e\u5b9a\u7684\u642c\u8fd0\u60c5\u51b5\u5f62\u6210\u4e86\u4e00\u6761**\u6709\u59cb\u6709\u7ec8\u7684**\u504f\u5e8f\u94fe\uff0c\u5e76\u4e14 $v$ \u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5426\u5219\uff0c\u4e00\u5b9a\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u7684\u5176\u5b83\u70b9\uff08\u8bb0\u4e3a $x$ \uff09\uff1a\n\n- \u5982\u679c\u5165\u8fb9\u6216\u8005\u51fa\u8fb9\u5176\u4e2d\u4e00\u6761\u5df2\u7ecf\u88ab\u522b\u7684\u6570\u5b57\u6cbf\u76f8\u540c\u65b9\u5411\u8d70\u4e86\u4e00\u6b21\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u52a0\u4e0a\u8fd9\u4e2a\u6570\u5b57\u540e\uff0c\u6240\u6709**\u7ecf\u8fc7** $x$ \u7684\u6570\u5b57\u8fde\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5982\u679c\u52a0\u4e0a\u8fd9\u4e2a\u6570\u540e\uff0c\u5f53\u524d\u786e\u5b9a\u7684\u642c\u8fd0\u60c5\u51b5\u5f62\u6210\u4e86\u4e00\u6761**\u6709\u59cb\u6709\u7ec8\u7684**\u504f\u5e8f\u94fe\uff0c\u5e76\u4e14 $x$ \u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u90a3\u5c31\u4e0d\u5408\u6cd5\u3002\n- \u5426\u5219\uff0c\u4e00\u5b9a\u5408\u6cd5\u3002\n\n\u4e3a\u4e86\u5224\u5b9a\u662f\u5426\u5f62\u6210\u4e86\u4e00\u6761\u504f\u5e8f\u94fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u5f00\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u5f53\u524d\u6240\u5728\u504f\u5e8f\u94fe\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u8fd9\u6837\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u53ef\u4ee5 $O(1)$ \u5b9e\u73b0\u3002\n\n\u76f4\u63a5\u8d2a\u5fc3\u662f $n^3$ \u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ee5 $u$ \u4e3a\u6839\u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u4e00\u6b21 dfs \uff0c\u7136\u540e\u6c42\u51fa\u6240\u6709\u5408\u6cd5\u7684 $v$ \u4e2d\u8282\u70b9\u7f16\u53f7\u6700\u5c0f\u7684\u4f5c\u4e3a\u8fd9\u4e00\u8f6e\u8d2a\u5fc3\u7684\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$ \u3002\n\n\u8fd9\u9053\u9898\u6211\u5927\u6982\u62ff\u51fa\u6765\u4e86 $2$ \u4e2a\u591a\u5c0f\u65f6\u7684\u65f6\u95f4\uff0c\u4e2d\u95f4\u601d\u8def\u9519\u4e86\u51e0\u6b21\uff0c\u6700\u540e\u624d\u5f62\u6210\u4e0a\u9762\u90a3\u4e2a\u6210\u719f\u7684\u601d\u8def\u3002\u7531\u4e8e\u65f6\u95f4\u4e0d\u591f\u53ea\u8c03\u8fc7\u4e86\u5c0f\u6837\u4f8b\uff0c\u5927\u6837\u4f8b\u6b7b\u5faa\u73af\u4e86\uff0c\u4f30\u8ba1\u518d\u591a\u7ed9\u6211\u4e00\u6bb5\u65f6\u95f4\u7684\u8bdd Day1 \u5c31\u80fd AK \u4e86\uff1f\uff08\u5176\u5b9e Day2 \u4e5f\u662f\u6700\u540e\u5341\u51e0\u5206\u949f\u731c\u51fa\u4e86 T2 \u7ed3\u8bba\u6ca1\u5199\uff0c ~~\u6240\u4ee5\u7ed9\u6211 5 \u4e2a\u5c0f\u65f6\u5927\u6982\u80fd\u53e3\u80e1 AK CSP\uff1f~~ \u7136\u800c\u8fd9\u548c\u6211\u4eca\u5e74\u6491\u6b7b\u8fc7\u4e0d\u4e86500\u53c8\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff09\n\n\u8003\u540e\u8c03\u597d\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct Edge\n{\n\tint to;\n\tint nxt;\n}e[10005];\nint t,n,m,edgenum,head[2005],p[2005],d[2005],d1[2005],d2[2005],from[2005],too[2005],pa[2005];\nint edge[2005][2005],en[2005][2005],st[2005][2005];\nbool flag[2005];\n/*\n\u6570\u7ec4\u542b\u4e49\u5982\u4e0b\uff1a\np[i]\u8868\u793ai\u8fd9\u4e2a\u6570\u5b57\u5728\u54ea\u4e2a\u8282\u70b9\u4e0a\nd[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u8fd8\u6709\u591a\u5c11\u6761\u51fa\u8fb9\u6ca1\u6709\u88ab\u8d70\u8fc7\nd1[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u8fd8\u6709\u591a\u5c11\u6761\u51fa\u8fb9\u53ea\u88ab\u4e00\u4e2a\u6570\u5b57\u8d70\u8fdb\u6765\u4e86\u4e00\u6b21\nd2[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u8fd8\u6709\u591a\u5c11\u6761\u51fa\u8fb9\u53ea\u88ab\u4e00\u4e2a\u6570\u5b57\u8d70\u51fa\u53bb\u4e86\u4e00\u6b21\nfrom[i]\u8868\u793a\u642c\u8fd0\u5230\u7b2ci\u4e2a\u70b9\u7684\u6570\u5b57\u662f\u4ece\u54ea\u4e2a\u65b9\u5411\u6765\u7684\ntoo[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u4e0a\u7684\u6570\u5b57\u88ab\u642c\u8fd0\u5230\u4e86\u54ea\u4e2a\u65b9\u5411\nedge[i][j]\u8868\u793ai\u5230j\u7684\u8fd9\u4e00\u6761\u8fb9\u662f\u6ca1\u6709\u88ab\u6570\u5b57\u7ecf\u8fc7(-1)\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4ecei\u5230j\u7ecf\u8fc7\u4e86\u4e00\u6b21(i)\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4ecej\u5230i\u7ecf\u8fc7\u4e86\u4e00\u6b21(j)\uff0c\u8fd8\u662f\u88ab\u4e24\u4e2a\u6570\u5b57\u6765\u56de\u7ecf\u8fc7\u4e86(0)\nst[i][j]\u8868\u793a\u5bf9i\u53f7\u70b9\u6765\u8bf4\uff0c(i,j)\u8fd9\u6761\u8fb9\u5f53\u524d\u6240\u5728\u7684\u504f\u5e8f\u94fe\u7684\u5f00\u5934\u6307\u5411\u54ea\u4e2a\u8282\u70b9\nen[i][j]\u8868\u793a\u5bf9i\u53f7\u70b9\u6765\u8bf4\uff0c(i,j)\u8fd9\u6761\u8fb9\u5f53\u524d\u6240\u5728\u7684\u504f\u5e8f\u94fe\u7684\u7ed3\u5c3e\u6307\u5411\u54ea\u4e2a\u8282\u70b9\nflag[i]\u8868\u793ai\u53f7\u70b9\u662f\u5426\u53ef\u884c\n*/\nvoid add(int u,int v)\n{\n\te[++edgenum].to=v;\n\te[edgenum].nxt=head[u];\n\thead[u]=edgenum;\n}\nvoid dfs(int node,int root)\n{\n\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t{\n\t\tint to=e[hd].to;\n\t\tif(to==pa[node])continue;\n\t\tpa[to]=node;\n\t\tflag[to]=1;\n\t\tif(node!=root)//\u5982\u679cnode\u4e0d\u662f\u6839\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u8fd9\u6761\u8fb9\u7ecf\u8fc7node\u662f\u5426\u5408\u6cd5\n\t\t{\n\t\t\tif(edge[pa[node]][node]==pa[node]||edge[node][to]==node)flag[to]=0;\n\t\t\tif(edge[pa[node]][node]==0||edge[node][to]==0)flag[to]=0;//\u8fd9\u4e24\u884c\u5224\u65ad\u7684\u662f\u8fd9\u6761\u8fb9\u662f\u5426\u5df2\u7ecf\u88ab\u522b\u7684\u6570\u5b57\u6cbf\u76f8\u540c\u65b9\u5411\u8d70\u4e86\u4e00\u6b21\n\t\t\tif(en[node][to]==from[node]&&st[node][pa[node]]==too[node]&&d2[node]+d1[node]+d[node]*2-2>0)flag[to]=0;//\u5982\u679c\u5df2\u7ecf\u5f62\u6210\u4e86\u504f\u5e8f\u94fe\uff0c\u662f\u5426\u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\n\t\t\tif(en[node][to]==pa[node])flag[to]=0;//\u7ecf\u8fc7node\u7684\u6570\u5b57\u662f\u5426\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\n\t\t}\n\t\telse//\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u8fd9\u6761\u8fb9\u80fd\u5426\u4ecenode\u51fa\u53d1\u5230to\n\t\t{\n\t\t\tif(edge[node][to]==node)flag[to]=0;\n\t\t\tif(edge[node][to]==0)flag[to]=0;//\u8fd9\u6761\u8fb9\u662f\u5426\u5df2\u7ecf\u88ab\u522b\u7684\u6570\u5b57\u6cbf\u76f8\u540c\u65b9\u5411\u8d70\u4e86\u4e00\u6b21\n\t\t\tif(from[node])\n\t\t\t{\n\t\t\t\tif(en[node][to]==from[node]&&d[node]+d1[node]+d2[node]-1!=0)flag[to]=0;//\u5982\u679c\u5df2\u7ecf\u5f62\u6210\u4e86\u504f\u5e8f\u94fe\uff0c\u662f\u5426\u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\n\t\t\t}\n\t\t}\n\t\tflag[to]&=flag[node];//\u5982\u679cnode\u4e0d\u53ef\u884c\uff0c\u90a3\u4e48to\u4e5f\u4e00\u5b9a\u4e0d\u53ef\u884c\n\t\tdfs(to,root);\n\t}\n    //\u4e0b\u9762\u5224\u65ad\u7684\u662f\u8fd9\u6761\u94fe\u80fd\u5426\u5230node\u7ec8\u6b62\n\tif(node==root)flag[node]=0;//\u81ea\u5df1\u5230\u81ea\u5df1\u80af\u5b9a\u4e0d\u5408\u6cd5\n\telse\n\t{\n\t\tif(from[node])flag[node]=0;//\u5df2\u7ecf\u6709\u4e86\u5165\u8fb9\u80af\u5b9a\u4e0d\u5408\u6cd5\n\t\tif(too[node])\n\t\t{\n\t\t\tif(en[node][too[node]]==pa[node]&&d[node]+d1[node]+d2[node]-1!=0)flag[node]=0;//\u5982\u679c\u5df2\u7ecf\u5f62\u6210\u4e86\u504f\u5e8f\u94fe\uff0c\u662f\u5426\u8fd8\u6709\u522b\u7684\u51fa\u8fb9\u4e0d\u5728\u8fd9\u6761\u94fe\u4e0a\n\t\t}\n\t}\n}\nint main()\n{\n//\tfreopen(\"tree.in\",\"r\",stdin);\n//\tfreopen(\"tree.out\",\"w\",stdout);\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tedgenum=0;\n\t\tfor(int i=1;i<=n;i++)head[i]=from[i]=too[i]=d[i]=d1[i]=d2[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tscanf(\"%d\",&p[i]);\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tadd(u,v);\n\t\t\tadd(v,u);\n\t\t\td[u]++,d[v]++;\n\t\t\tedge[u][v]=edge[v][u]=-1;\n\t\t\ten[u][v]=st[u][v]=v;\n\t\t\ten[v][u]=st[v][u]=u;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)pa[j]=0;\n\t\t\tflag[p[i]]=1;\n\t\t\tdfs(p[i],p[i]);\n\t\t\tint res=0;\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tif(flag[j])\n\t\t\t\t{\n\t\t\t\t\tres=j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d \",res);\n\t\t\tfrom[res]=pa[res];\n\t\t\twhile(pa[res]!=p[i])//\u4eceres\u5f00\u59cb\u4e00\u8def\u66f4\u65b0\u5b83\u7684\u6240\u6709\u7956\u5148\n\t\t\t{\n\t\t\t\tif(edge[pa[res]][res]==-1)\n\t\t\t\t{\n\t\t\t\t\tedge[pa[res]][res]=edge[res][pa[res]]=pa[res];\n\t\t\t\t\td[res]--,d2[res]++;\n\t\t\t\t\td[pa[res]]--,d1[pa[res]]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tedge[pa[res]][res]=edge[res][pa[res]]=0;\n\t\t\t\t\td1[res]--;\n\t\t\t\t\td2[pa[res]]--;\n\t\t\t\t}\n\t\t\t\tint t=res;\n\t\t\t\tres=pa[res];\n\t\t\t\tst[res][en[res][t]]=st[res][pa[res]];\n\t\t\t\ten[res][st[res][pa[res]]]=en[res][t];//\u94fe\u8868\u7684\u63d2\u5165\n\t\t\t}\n\t\t\tif(edge[pa[res]][res]==-1)\n\t\t\t{\n\t\t\t\tedge[pa[res]][res]=edge[res][pa[res]]=pa[res];\n\t\t\t\td[res]--,d2[res]++;\n\t\t\t\td[p[i]]--,d1[p[i]]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge[pa[res]][res]=edge[res][pa[res]]=0;\n\t\t\t\td1[res]--;\n\t\t\t\td2[p[i]]--;\n\t\t\t}\n\t\t\ttoo[p[i]]=res;\n//\t\t\t\u534e\u4e3d\u7684debug\uff1a\n//\t\t\tprintf(\"%d:%d\\n\",i,res);\n//\t\t\tprintf(\"pa:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",pa[j]);\n//\t\t\tprintf(\"\\n\");\n//\t\t\tprintf(\"from:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",from[j]);\n//\t\t\tprintf(\"\\n\");\n//\t\t\tprintf(\"to:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",too[j]);\n//\t\t\tprintf(\"\\n\");\n//\t\t\tprintf(\"d:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",d[j]);\n//\t\t\tprintf(\"\\n\");\n//\t\t\tprintf(\"d1:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",d1[j]);\n//\t\t\tprintf(\"\\n\");\n//\t\t\tprintf(\"d2:\");\n//\t\t\tfor(int j=1;j<=n;j++)printf(\"%d \",d2[j]);\n//\t\t\tprintf(\"\\n\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\nupdate:\n\n\u7a0b\u5e8f\u53d1\u4e0b\u6765\u540e\u8c03\u4e86\u6709 20 \u5206\u949f\u5c31 A \u6389\u4e86\u2026\u2026\u4e0d\u8fc7\u8c8c\u4f3c\u80fd\u8fc7\u6389\u94fe\u7684\u6570\u636e\uff1f",
        "postTime": 1574041162,
        "uid": 54214,
        "name": "wucstdio",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\u548c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u521d\u59cb\u6570\u5b57\uff0c\u5220\u9664\u4e00\u6761\u8fb9\u7684\u6548\u679c\u662f\u4ea4\u6362\u88ab\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u4e0a\u7684\u6570\u5b57\u4ea4\u6362\u3002\n\n\u8bbe$p_i$\u8868\u793a\u6570\u5b57$i$\u5728\u54ea\u4e2a\u8282\u70b9\uff0c\u8981\u6c42\u5408\u7406\u5b89\u6392\u5220\u9664$n-1$\u6761\u8fb9\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6392\u5217$p$\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\n\n$n \\leq 2000$\n\n## Solution\n\u8003\u8651\u628a\u4e00\u4e2a\u6570\u5b57\u4ece\u4e00\u4e2a\u8282\u70b9\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u8fc7\u7a0b\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u9650\u5236\u603b\u5171\u6709$3$\u79cd\uff1a\n\n -  \u5bf9\u4e8e\u8d77\u70b9\uff0c\u9009\u62e9\u7684\u8fb9\u8981\u6c42\u662f\u8fd9\u4e2a\u70b9\u6240\u6709\u8fb9\u4e2d\u7b2c\u4e00\u6761\u5220\u9664\u7684\uff1b\n -  \u5bf9\u4e8e\u4e2d\u95f4\u7684\u70b9\uff0c\u8981\u6c42\u9009\u62e9\u7684\u4e24\u6761\u8fb9\u7684\u5220\u9664\u987a\u5e8f\u5fc5\u987b\u8fde\u7eed\uff1b\n -  \u5bf9\u4e8e\u7ec8\u70b9\uff0c\u9009\u62e9\u7684\u8fb9\u8981\u6c42\u662f\u8fd9\u4e2a\u70b9\u6240\u6709\u8fb9\u4e2d\u6700\u540e\u4e00\u6761\u5220\u9664\u7684\u3002\n\n\u90a3\u4e48\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5efa\u7acb\u4e00\u5f20\u56fe\uff0c\u56fe\u4e0a\u9762\u7684\u70b9\u4ee3\u8868\u8fd9\u4e2a\u70b9\u8fde\u51fa\u53bb\u7684\u4e00\u6761\u8fb9\u3002\n\n\u5728\u8fd9\u5f20\u56fe\u4e0a\u7684\u4e00\u6761\u6709\u5411\u8fb9\u4ee3\u8868\u51fa\u70b9\u8981\u5728\u5165\u70b9\u4e4b\u540e\u9a6c\u4e0a\u9009\u62e9\uff0c\u540c\u65f6\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u94a6\u5b9a\u7684\u7b2c\u4e00\u6761\u8fb9\u548c\u6700\u540e\u4e00\u6761\u8fb9\u3002\u6bcf\u4e2a\u70b9\u7684\u56fe\u4e0d\u76f8\u5173\u3002\n\n\u90a3\u4e48\u8003\u8651\u8d2a\u5fc3\uff0c\u4ece\u5c0f\u5230\u5927\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u7684\u6700\u7ec8\u4f4d\u7f6e\uff0c\u540c\u65f6\u4fdd\u8bc1\u4e0d\u77db\u76fe\u3002\n\n\u77db\u76fe\u7684\u60c5\u51b5\u6709\u4e09\u79cd\uff1a\n\n - \u56fe\u7684\u5f62\u5f0f\u4e0d\u662f\u82e5\u5e72\u6761\u94fe\u7684\u5f62\u5f0f\uff1b\n - \u7b2c\u4e00\u4e2a\u70b9\uff08\u8fb9\uff09\u6709\u5165\u8fb9\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\uff08\u8fb9\uff09\u6709\u51fa\u8fb9\uff1b\n - \u7b2c\u4e00\u4e2a\u70b9\uff08\u8fb9\uff09\u6240\u5728\u7684\u94fe\u7684\u94fe\u5c3e\u662f\u6700\u540e\u4e00\u4e2a\u70b9\uff08\u8fb9\uff09\uff0c\u4f46\u662f\u8fd8\u6709\u5176\u4ed6\u7684\u70b9\u4e0d\u5728\u94fe\u4e2d\u3002\n\n\u4ece\u6bcf\u4e2a\u6570\u5b57\u7684\u8d77\u59cb\u70b9\u51fa\u53d1\uff0c\u4fdd\u8bc1\u4ece\u6839\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u4e0d\u4f1a\u5f15\u8d77\u77db\u76fe\uff0c\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u6211\u5199\u7684\u662f\u5e76\u67e5\u96c6\uff0c\u5982\u679c\u60f3\u5199$O(n^2)$\u7684\u94fe\u8868\u5199\u6cd5\uff0c\u90a3\u4e48\u53ea\u8981\u6ee1\u8db3\u6bcf\u6b21\u76f8\u8fde\u7684\u662f\u4e24\u6761\u94fe\u7684\u94fe\u9996\u548c\u94fe\u5c3e\uff0c\u7136\u540e\u5206\u522b\u8bb0\u5f55\u94fe\u9996\u3001\u94fe\u5c3e\u7684\u6240\u5728\u7684\u94fe\u7684\u94fe\u5c3e\u548c\u94fe\u9996\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\nconst int maxn = 2005;\n\ninline void chkmin(int &a, int b) {if (a > b) a = b;}\n\nint n, nump[maxn];\n\nstruct edge\n{\n\tint to, next;\n} e[maxn * 2];\nint h[maxn], tot;\n\nstruct node\n{\n\tint fst, lst, cnt, fa[maxn];\n\tbool bg[maxn], ed[maxn];\n\t\n\tvoid clear() {fst = lst = cnt = 0; for (int i = 1; i <= n; ++i) fa[i] = i, bg[i] = ed[i] = 1;}\n\tint find(int x) {return fa[x] == x ? x : fa[x] = find(fa[x]);}\n} t[maxn];\n\ninline void add(int u, int v)\n{\n\te[++tot] = (edge) {v, h[u]}; h[u] = tot; ++t[u].cnt;\n\te[++tot] = (edge) {u, h[v]}; h[v] = tot; ++t[v].cnt;\n}\n\nint dfs1(int u, int fe)\n{\n\tint res = n + 1;\n\tif (fe && (!t[u].lst || t[u].lst == fe)) {\n\t\tif (t[u].ed[fe] && !(t[u].fst && t[u].cnt > 1 && t[u].find(fe) == t[u].find(t[u].fst))) \n\t\t\tres = u;\n\t}\n\tfor (int i = h[u], v, te; v = e[i].to, i; i = e[i].next) {\n\t\tif (fe == (te = (i >> 1))) continue;\n\t\tte = i >> 1;\n\t\tif (!fe) {\n\t\t\tif (!t[u].fst || t[u].fst == te) {\n\t\t\t\tif (!t[u].bg[te]) continue;\n\t\t\t\tif (t[u].lst && t[u].cnt > 1 && t[u].find(te) == t[u].find(t[u].lst)) continue;\n\t\t\t\tchkmin(res, dfs1(v, te));\n\t\t\t} else continue;\n\t\t} else {\n\t\t\tif (fe == t[u].lst || te == t[u].fst || t[u].find(fe) == t[u].find(te)) continue;\n\t\t\tif (!t[u].ed[fe] || !t[u].bg[te]) continue; \n\t\t\tif (t[u].fst && t[u].lst && t[u].cnt > 2 && t[u].find(fe) == t[u].find(t[u].fst) && t[u].find(te) == t[u].find(t[u].lst)) continue;\n\t\t\t\n\t\t\tchkmin(res, dfs1(v, te));\n\t\t}\n\t}\n\treturn res;\n}\n\nint dfs2(int u, int fe, int p)\n{\n\tif (u == p) return t[u].lst = fe, 1;\n\tfor (int i = h[u], v, te; v = e[i].to, i; i = e[i].next)\n\t\tif (fe != (te = (i >> 1))) \n\t\t\tif (dfs2(v, te, p)) {\n\t\t\t\tif (!fe) t[u].fst = te;\n\t\t\t\telse {\n\t\t\t\t\tt[u].ed[fe] = t[u].bg[te] = 0; --t[u].cnt;\n\t\t\t\t\tt[u].fa[t[u].find(fe)] = t[u].find(te);\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\treturn 0;\n}\n\nint main()\n{\n\tint T = gi();\n\twhile (T--) {\n\t\ttot = 1;\n\t\tmemset(h + 1, 0, sizeof(int) * n);\n\t\t\n\t\tn = gi();\n\t\tfor (int i = 1; i <= n; ++i) t[i].clear();\n\t\tfor (int i = 1; i <= n; ++i) nump[i] = gi();\n\t\tfor (int i = 1; i < n; ++i) add(gi(), gi());\n\n\t\tif (n == 1) {puts(\"1\"); continue;}\n\t\t\n\t\tfor (int p, i = 1; i <= n; ++i) {\n\t\t\tp = dfs1(nump[i], 0);\n\t\t\tdfs2(nump[i], 0, p);\n\t\t\tprintf(\"%d \", p);\n\t\t}\n\t\tputs(\"\");\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1574436586,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "# upd\r\n\r\n- 2021.10.14 \u611f\u8c22 @qinyubo \u63d0\u51fa\u7684\u6307\u6b63\uff0c\u4fee\u590d\u4e86 $n=1$ \u7684\u8fb9\u754c\u7684\u9505\u3002\u540c\u65f6~~\u73b0\u4ee3\u5316~~\u4fee\u6b63\u4e86\u9898\u89e3\u7684\u683c\u5f0f\uff0c\u4f7f\u4e4b\u66f4\u52a0\u7b26\u5408\u5f53\u4e0b\u7684\u6807\u51c6\u3002\r\n\r\n# \u9898\u76ee\r\n\r\n[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P5659)\u770b\u9898\u76ee\u3002 \r\n\r\n# \u5206\u6790\r\n\r\n\u8fd9\u9053\u9898\u771f\u7684\u4e0d\u7b80\u5355\uff0c\u7ec6\u8282\u5de8\u591a\uff0c\u6076\u5fc3\u6b7b\u4f60\u3002\u4f46\u662f\u601d\u8def\u5e76\u6ca1\u6709\u592a\u96be\u3002 \r\n\r\n### 10pts \r\n\r\n~~\u62ff\u5230\u5e73\u5747\u5206\u4e86\uff01\u559c\u95fb\u4e50\u89c1~~ \r\n\r\n\u5199\u4e00\u4e2a\u66b4\u529b\u5168\u6392\u628a\u5b83\u9a97\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \r\n\r\n### 35pts\uff1a\u66b4\u529b+\u83ca\u82b1\u56fe \r\n\r\n\u4e24\u4e2a\u90e8\u5206\u5206\u6446\u5728\u773c\u524d\uff0c\u5148\u505a\u54ea\u4e00\u4e2a\u5462\uff1f \r\n\r\n\u7ecf\u9a8c\u4e5f\u8bb8\u544a\u8bc9\u4f60\uff0c\u94fe\u7684\u60c5\u51b5\u6bd4\u8f83\u597d\u505a\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u6211\u5f3a\u70c8\u63a8\u8350\u5199\u83ca\u82b1\u56fe\u3002 \r\n\r\n\u4e3a\u4ec0\u4e48\uff1f~~\u6ca1\u6709\u4e3a\u4ec0\u4e48~~\u56e0\u4e3a\u83ca\u82b1\u56fe\u9700\u8981\u6316\u6398\u7684\u6027\u8d28\u5e76\u4e0d\u6df1\u3002 \r\n\r\n\u4e0d\u59a8\u8bbe\u83ca\u82b1\u56fe\u7684\u82b1\u5fc3\u4e3a$u$\uff0c\u624b\u73a9\u4e00\u4e0b\u83ca\u82b1\u56fe\u7684\u6570\u636e\u4f60\u4f1a\u53d1\u73b0\uff0c\u5047\u5982\u5c06\u62c6\u8fb9\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u70b9\u7684\u6392\u5217 $p_1,p_2,...,p_{n-1}(\\forall1\\le i<n ,p_i\\not=u)$\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u6309\u987a\u5e8f\u62c6\u6389\u4e86 $(u,p_1),(u,p_2),..,(u,p_{n-1})$\uff09\uff0c\u90a3\u4e48\u6700\u540e\uff0c\u539f\u6765\u6839\u4e0a\u7684\u6570\u5b57 $a_u$ \u4f1a\u53bb\u5230 $p_1$\uff0c\u539f\u6765 $p_1$ \u4e0a\u7684\u6570\u5b57 $a_{p_1}$ \u4f1a\u53bb\u5230 $p_2$\uff0c\u539f\u6765 $p_2$ \u4e0a\u7684\u6570\u5b57 $a_{p_2}$ \u4f1a\u53bb\u5230 $p_3$\uff0c...\uff0c\u539f\u6765 $p_n$ \u4e0a\u7684\u6570\u5b57 $a_{p_n}$ \u4f1a\u53bb\u5230 $u$\u3002\u5982\u679c\u6211\u4eec\u5c06\u70b9\u6309\u7167$(u,p_1,p_2,...,p_n)$\u7684\u987a\u5e8f\u6392\u6210\u4e00\u4e2a\u73af\u7684\u8bdd\uff0c\u6574\u4e2a\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u5c06\u6bcf\u4e2a\u70b9\u4e0a\u7684\u6570\u5b57\u5411\u540e\u79fb\u4e86\u4e00\u4f4d\uff01 \r\n\r\n\u4e8e\u662f\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u4e00\u4e2a\u8d2a\u5fc3\u7684\u6784\u9020\u73af\u7684\u65b9\u6cd5\u3002\u6309\u7167 $1,2,3,...,n$ \u7684\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ece\u81ea\u5df1\u6240\u5728\u7684\u70b9\u9009\u62e9\u5728\u73af\u4e0a\u9762\u7684\u4e0b\u4e00\u4e2a\u70b9\u3002\u8fd9\u91cc\u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a \r\n\r\n- \u5728\u73af\u8fd8\u6ca1\u6709\u5c01\u95ed\u7684\u65f6\u5019\uff0c\u8bf7\u6ce8\u610f\u5b83\u4eec\u90fd\u8fd8\u662f\u4e00\u4e9b\u94fe\uff0c\u6240\u4ee5\u4e0d\u8981\u51fa\u73b0\u4e24\u4e2a\u70b9\u7684\u540e\u4e00\u4e2a\u70b9\u76f8\u540c\u7684\u60c5\u51b5\u3002 \r\n\r\n- \u4fdd\u8bc1\u6700\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5927\u73af\u800c\u4e0d\u662f\u82e5\u5e72\u4e2a\u5c0f\u73af\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002 \r\n\r\n\u7136\u540e\u606d\u559c\u4f60\uff0c\u4f60\u6709 35pts \u4e86\u3002~~\u6bd4\u5e73\u5747\u5206\u9ad8\uff01\u559c\u95fb\u4e50\u89c1~~ \r\n\r\n### 60pts\uff1a\u66b4\u529b+\u83ca\u82b1\u56fe+\u94fe \r\n\r\n\u4e0b\u9762\u6211\u4eec\u5c06\u8981\u653b\u514b\u5355\u94fe\u3002 \r\n\r\n\uff08\u6572\u9ed1\u677f\uff09\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u6316\u6398\u9898\u76ee\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\u4e86\u3002\u5047\u5982\u6211\u4eec\u60f3\u8981\u628a $a$ \u4ece\u5b83\u7684**\u8d77\u59cb\u70b9 $u$** \u8fd0\u5230 $b$ \u6240\u5728\u7684 $v$\uff0c\u5e76\u4e14**\u5c31\u6b64\u7ec8\u6b62**\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u5982\u4e0b\u63cf\u8ff0\uff1a \r\n\r\n- \u5bf9\u4e8e $u$\uff0c\u5b83\u901a\u5411 $v$ \u7684\u90a3\u4e00\u6761\u8fb9\u4e00\u5b9a\u662f $u$ \u6240\u76f8\u8fde\u7684\u90a3\u4e9b\u8fb9\u4e2d\u6700\u5148\u88ab\u5220\u9664\u7684\u3002\u4e0d\u7136\uff0c$a$ \u4f1a\u88ab\u5148\u8fd0\u8d70\u3002 \r\n\r\n- \u5bf9\u4e8e $a$ \u53bb\u5f80 $v$ \u7684\u8def\u5f84\u4e0a\u7684\u4e2d\u8f6c\u70b9 $w$\uff0c$a$ \u79bb\u5f00 $w$ \u7684\u90a3\u6761\u8fb9\u4e00\u5b9a\u4f1a\u7d27\u8ddf\u7740 $a$ \u8fdb\u5165 $w$ \u7684\u90a3\u6761\u8fb9\u88ab\u5220\u9664\u3002\u4e0d\u7136 $a$ \u4e5f\u4f1a\u88ab\u8fd0\u8d70\u3002 \r\n\r\n- \u5bf9\u4e8e $v$\uff0c$a$ \u5230\u8fbe\u5b83\u7684\u90a3\u6761\u8fb9\u4e00\u5b9a\u662f $v$ \u6240\u76f8\u8fde\u7684\u90a3\u4e9b\u8fb9\u4e2d\u6700\u540e\u88ab\u5220\u9664\u7684\u3002\u4e0d\u7136\uff0c$a$ \u8fd8\u662f\u4f1a\u88ab\u8fd0\u8d70\u3002   \r\n\r\n\u8003\u8651\u94fe\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u94fe\u4e0a\u7684\u7684\u70b9\u7684\u5ea6\u6700\u591a\u4e3a 2\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u53d8\u91cf\u8868\u793a\u4e24\u6761\u8fb9\u7684\u5148\u540e\u5173\u7cfb\u2014\u2014\u5de6\u5148\u53f3\u540e\u3001\u5de6\u540e\u53f3\u5148\u6216\u8005\u8fd8\u672a\u786e\u5b9a\u3002\r\n\r\n \u540c\u6837\u662f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6570\u3002\u5047\u5982\u5f53\u524d\u679a\u4e3e\u5230\u4e86 $i$\uff0c\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u5b83\u53bb\u5230\u5b83\u6240\u80fd\u5230\u7684\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u70b9\u3002\u73b0\u5728\u8003\u8651\u600e\u4e48\u627e\u5230\u8fd9\u4e00\u4e2a\u70b9\u3002 \r\n\r\n\u6700\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u5047\u5982\u5f53\u524d $i$ \u5728 $u$\uff0c\u6211\u4eec\u679a\u4e3e\u76ee\u6807\u70b9 $v$\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 $O(n)$ \u7684\u65f6\u95f4\u626b\u4e00\u904d\u8fc7\u53bb\u68c0\u67e5\u53ef\u4e0d\u53ef\u884c\u3002\u5728\u5355\u94fe\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5408\u6cd5\u65b9\u5f0f\u53ea\u4f1a\u6709\u4e00\u79cd\uff1a\u7ecf\u8fc7\u70b9\u7684\u5df2\u7ecf\u8981\u6c42\u4e86\u7684\u5220\u8fb9\u987a\u5e8f\u548c\u5f53\u524d\u9700\u8981\u7684\u5220\u8fb9\u987a\u5e8f\u6709\u51b2\u7a81\u3002\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u53d8\u91cf\u6765\u5b9e\u73b0\u3002 \r\n\r\n\u53e6\u5916\uff0c\u6ce8\u610f\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5ea6\u90fd\u662f 1\uff0c\u6240\u4ee5\u5c31\u4e0d\u5b58\u5728\u5148\u540e\u5173\u7cfb\u7684\u8bf4\u6cd5\u4e86\u3002 \r\n\r\n\u8fd9\u6837\u505a\u662f $O(n^3)$\u3002  \r\n\r\n\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6269\u5c55\u7684\u65b9\u5f0f\u5b58\u5728\u5355\u8c03\u6027\u2014\u2014\u4f8b\u5982\u5728\u5f80\u5de6\u8fb9\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u7ecf\u8fc7 $w$ \u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u5728\u5de6\u8fb9\u5e76\u4e14\u6bd4 $w$ \u79bb $u$ \u66f4\u8fdc\u7684\u90a3\u4e9b\u70b9\u5c31\u66f4\u4e0d\u53ef\u80fd\u8d70\u5230\u4e86\u3002 \r\n\r\n\u7136\u540e\u5c31\u53ef\u4ee5\u7531\u8fd1\u53ca\u8fdc\u5730\u679a\u4e3e\u70b9\uff0c\u8d70\u4e0d\u52a8\u4e86\u5c31\u9000\u51fa\uff0c\u4e2d\u95f4\u9009\u53d6\u90a3\u4e9b\u53ef\u884c\u7684\u7ec8\u6b62\u70b9\u5e76\u53d6\u51fa\u6700\u5c0f\u7684\uff0c\u65f6\u95f4\u5c31\u662f $O(n^2)$\u3002 \r\n\r\n### 100pts\r\n\r\n\u7ec8\u4e8e\uff0c\u6211\u4eec\u8981\u76f4\u9762\u6b63\u89e3\u4e86\uff01 \r\n\r\n\u6839\u636e\u6211\u4eec\u4ece\u94fe\u7684\u60c5\u51b5\u4e2d\u5f97\u5230\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5220\u8fb9\u7684\u987a\u5e8f\uff0c\u4e0d\u540c\u7684\u70b9\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u8fb9 $(u,v)$ \u548c $(u,w)$\uff0c\u5982\u679c\u5728$u$\u70b9\u4e0a\u8981\u6c42 $(u,w)$ \u6bd4 $(u,v)$ \u5148\u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u5e76\u4e0d\u5f71\u54cd\u5728 $v$ \u70b9\u4e0a\uff0c$(u,v)$ \u4e0e\u5176\u5b83\u8fb9\u7684\u5148\u540e\u5173\u7cfb\u3002\u4e0d\u540c\u70b9\u7684\u90bb\u63a5\u8fb9\u5220\u9664\u7684\u987a\u5e8f\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u3002 \r\n\r\n\u5e76\u4e14\uff0c\u4e0d\u4f1a\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff1a$(u,v)$ \u548c $(u,w)$ \u90fd\u6bd4 $(u,a)$ \u5148\uff08\u540e\uff09\u5220\u9664\uff0c\u4f46\u662f\u6211\u4eec\u5374\u8fd8\u4e0d\u77e5\u9053 $(u,v)$ \u548c $(u,w)$ \u7684\u5148\u540e\u5173\u7cfb\u3002\u56e0\u4e3a\u8fd9\u6837\u7684\u60c5\u51b5\u4f1a\u5bfc\u81f4\u9519\u8bef\u60c5\u51b5\uff0c\u4f8b\u5982\u539f\u672c\u5e94\u5f53\u4ece $a$ \u8fd0\u8fdb\u6765\uff0c\u8fd0\u51fa\u53bb\u5230 $v$ \u7684\u6570\uff0c\u88ab\u4e2d\u9014\u9519\u8bef\u5730\u8fd0\u5230\u4e86 $w$\u3002\u5047\u5982\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5c06\u5b83\u7684\u90bb\u63a5\u8fb9\u62bd\u8c61\u6210\u4e00\u5806\u70b9\uff0c\u7528\u4e00\u6761\u6709\u5411\u8fb9 $(u,v)$ \u8868\u793a\u8fb9 $u$ \u4f1a\u6bd4 $v$ \u5148\u5220\u9664\uff0c\u90a3\u4e48\u5408\u6cd5\u7684\u65b9\u6848\u79cd**\u7edd\u5bf9\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a\u4ee3\u8868\u4e00\u6761\u8fb9\u7684\u70b9\u7684\u51fa\u5ea6\u6216\u5165\u5ea6\u8d85\u8fc7$1$** \u3002 \r\n\r\n\u4e0a\u9762\u7684\u7ed3\u8bba\u8bf4\u660e\uff0c\u4e00\u4e2a\u70b9\u7684\u90bb\u63a5\u8fb9\u62bd\u8c61\u6210\u70b9\u540e\uff0c\u7528\u6709\u5411\u8fb9\u8868\u793a\u5220\u9664\u5148\u540e\u5173\u7cfb\u7684\u8bdd\uff0c\u5f62\u6210\u7684\u603b\u662f\u4e00\u5806\u94fe\u3002 \r\n\r\n\u5f53\u7136\uff0c\u6839\u636e\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u4e00\u4e2a\u70b9\u7684\u90bb\u63a5\u8fb9\u4e2d\uff0c\u6709\u4e00\u6761\u4f1a\u5f3a\u5236\u88ab\u7b2c\u4e00\u4e2a\u5220\u9664\uff0c\u6709\u4e00\u6761\u4f1a\u5f3a\u5236\u88ab\u6700\u540e\u4e00\u6761\u5220\u9664\u3002\u5b83\u4eec\u5fc5\u987b\u662f\u94fe\u7684\u8d77\u70b9\uff08\u7b2c\u4e00\u4e2a\uff09\u6216\u7ec8\u70b9\uff08\u6700\u540e\u4e00\u4e2a\uff09\u3002 \r\n\r\n\u4e8e\u662f\uff0c\u5047\u5982\u6211\u4eec\u5f53\u524d\u679a\u4e3e\u4e00\u4e2a\u6570$i$\uff0c\u50cf\u94fe\u4e00\u6837\u7528\u4e00\u4e2a\u6269 DFS \u5c55\u53ef\u884c\u7684\u70b9\uff0c\u8bb0\u5f55\u53ef\u4ee5\u8d70\u5230\u7684\u6700\u5c0f\u7684\u70b9\u3002\u5bf9\u4e8e\u53ef\u8d70\u4e0d\u53ef\u8d70\uff0c\u6709\u4e09\u6761\u9650\u5236\uff1a \r\n\r\n- \u4e0d\u80fd\u6709\u8fb9\u6bd4\u5f53\u524d\u7684\u7b2c\u4e00\u6761\u8fb9\u5148\u5220\u9664\uff1b\u4e0d\u80fd\u6709\u8fb9\u6bd4\u5f53\u524d\u7684\u6700\u540e\u4e00\u6761\u8fb9\u540e\u5220\u9664 \r\n\r\n- \u4e00\u6761\u8fb9\u4e0d\u80fd\u5728\u5b58\u5728\u53e6\u4e00\u6761\u8fb9\u7d27\u8ddf\u7740\u5b83\u88ab\u5220\u9664\u7684\u60c5\u51b5\u4e0b\uff0c\u518d\u51fa\u73b0\u4e00\u6761\u8fb9\uff0c\u4e5f\u8981\u7d27\u8ddf\u7740\u5b83\u5220\u9664\u3002 \r\n\r\n- \u5982\u679c\u5f53\u524d\u7684\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u5f53\u524d\u7684\u7b2c\u4e00\u6761\u8fb9\u548c\u6700\u540e\u4e00\u6761\u8fb9\u5408\u5e76\u5728\u4e00\u6761\u94fe\u91cc\u9762\uff0c\u5e76\u4e14\u9664\u5f00\u5b83\u4eec\u6240\u5728\u7684\u94fe\u4ee5\u5916\u8fd8\u6709\u4e00\u4e9b\u94fe\u6ca1\u6709\u5408\u5e76\u8d77\u6765\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\uff08\u53c2\u8003\u83ca\u82b1\u56fe\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u8fb9\u5220\u4e0d\u5b8c\uff09 \r\n\r\n\u7528 DFS \u6269\u5c55\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u8fd9\u4e9b\u6761\u4ef6\u3002\u7528\u5e76\u67e5\u96c6\u548c\u4e00\u4e2a\u8868\u793a\u5f53\u524d\u6709\u6ca1\u6709\u5165\u8fb9/\u51fa\u8fb9\u7684\u6570\u7ec4\u6765\u7ef4\u62a4\u8fd9\u4e9b\u6761\u4ef6\u3002\u627e\u5230\u4e86\u76ee\u6807\u70b9\u4e4b\u540e\u5c31\u518d\u7528\u4e00\u4e2a DFS \u6765\u66f4\u65b0\u6761\u4ef6\u3002 \r\n\r\n\u65f6\u95f4\u662f $O(n^2)$\u3002 \r\n\r\n~~\u8fd9\u9053\u9898\u5176\u5b9e\u8d5b\u573a\u6ee1\u5206\u53ea\u6709 10 \u5206\uff0c\u90a3\u4e48\u4f60\u5176\u5b9e\u5df2\u7ecf\u5b8c\u6210\u4e86 10 \u9053\u9898\u4e86\u3002~~ \r\n\r\n# \u4ee3\u7801\r\n\r\n```cpp\r\n#include <cstdio>\r\n\r\nconst int INF = 0x3f3f3f3f;\r\nconst int MAXN = 2005;\r\n\r\ntemplate<typename _T>\r\nvoid read( _T &x )\r\n{\r\n    x = 0; char s = getchar();int f = 1;\r\n    while( s < '0' || '9' < s ) { f = 1; if( s == '-' ) f = -1; s = getchar(); }\r\n    while( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + s - '0', s = getchar(); }\r\n    x *= f;\r\n}\r\n\r\ntemplate<typename _T>\r\nvoid write( _T x )\r\n{\r\n    if( x < 0 ) { putchar( '-' ), x = -x; }\r\n    if( 9 < x ) { write( x / 10 ); }\r\n    putchar( x % 10 + '0' );\r\n}\r\n\r\ntemplate<typename _T>\r\n_T MIN( const _T a, const _T b )\r\n{\r\n    return a < b ? a : b;\r\n}\r\n\r\nstruct edge\r\n{\r\n    int to, nxt;\r\n}Graph[MAXN << 1];\r\n\r\nstruct UFS\r\n{\r\n    int fa[MAXN];\r\n    bool beg[MAXN], fin[MAXN];\r\n    //\u8bb0\u5f55\u6709\u6ca1\u6709\u51fa\u8fb9\u6216\u8005\u5165\u8fb9\uff0ctrue \u4ee3\u8868\u6ca1\u6709\r\n    void operator () ( const int siz ) { for( int i = 1 ; i <= siz ; i ++ ) fa[i] = i, beg[i] = fin[i] = true; }\r\n    int& operator [] ( const int u ) { return fa[u] = ( fa[u] == u ? fa[u] : ( *this )[fa[u]] ); }\r\n    bool operator () ( const int a, const int b ) { return ( *this )[a] == ( *this )[b]; }\r\n    //\u5e76\u67e5\u96c6\u7ef4\u62a4\u6240\u5c5e\u94fe\r\n}info[MAXN];\r\n\r\nint stt[MAXN], fir[MAXN], las[MAXN], deg[MAXN];\r\nint head[MAXN];\r\nint N, cnt;\r\n\r\nvoid addEdge( const int from, const int to )\r\n{\r\n    cnt ++;\r\n    Graph[cnt].to = to, Graph[cnt].nxt = head[from];\r\n    head[from] = cnt, deg[from] ++;\r\n}\r\n\r\nvoid clear()\r\n{\r\n    cnt = 1;\r\n    for( int i = 1 ; i <= N ; i ++ ) \r\n        head[i] = fir[i] = las[i] = 0, info[i]( N - 1 ), deg[i] = 0;\r\n}\r\n\r\nint expand( const int u, const int faE )\r\n{\r\n    int res = INF;\r\n    if( faE && ( ! las[u] || las[u] == faE ) )\r\n        if( info[u].fin[faE] && ! ( fir[u] && deg[u] > 1 && info[u][faE] == info[u][fir[u]] ) )\r\n            res = u;\r\n            //\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u7ec8\u70b9\r\n    int id, v;\r\n    for( int i = head[u] ; i ; i = Graph[i].nxt )\r\n    {\r\n        id = i >> 1, v = Graph[i].to;\r\n        if( id == faE ) continue;\r\n        if( ! faE )\r\n        {\r\n            if( ! fir[u] || fir[u] == id )\r\n            {\r\n                if( ! info[u].beg[id] ) continue;\r\n                if( las[u] && deg[u] > 1 && info[u]( id, las[u] ) ) continue;\r\n                res = MIN( res, expand( v, id ) );\r\n            }\r\n            //\u8d77\u70b9\u7684\u79fb\u52a8\r\n        }\r\n        else\r\n        {\r\n            if( faE == las[u] || id == fir[u] || info[u]( faE, id ) ) continue;\r\n            if( ! info[u].beg[id] || ! info[u].fin[faE] ) continue;\r\n            if( fir[u] && las[u] && deg[u] > 2 && info[u]( fir[u], faE ) && info[u]( id, las[u] ) ) continue;\r\n            res = MIN( res, expand( v, id ) );\r\n            //\u4e2d\u8f6c\u70b9\u7684\u79fb\u52a8\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nbool cover( const int u, const int faE, const int tar )\r\n{\r\n    if( u == tar ) { las[u] = faE; return true; }\r\n    int v, id;\r\n    for( int i = head[u] ; i ; i = Graph[i].nxt )\r\n    {\r\n        v = Graph[i].to, id = i >> 1;\r\n        if( id ^ faE && cover( v, id, tar ) )\r\n        {\r\n            if( ! faE ) fir[u] = id;\r\n            else\r\n            {\r\n                info[u].fin[faE] = false, info[u].beg[id] = false;\r\n                info[u][id] = info[u][faE];\r\n                deg[u] --;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n//\u66f4\u65b0\u4fe1\u606f\r\n\r\nint main()\r\n{\r\n    int T;\r\n    read( T );\r\n    while( T -- )\r\n    {\r\n        int fr, to;\r\n        read( N );\r\n        clear();\r\n        for( int i = 1 ; i <= N ; i ++ ) read( stt[i] );\r\n        for( int i = 1 ; i < N ; i ++ )\r\n            read( fr ), read( to ), addEdge( fr, to ), addEdge( to, fr );\r\n        if( N == 1 )\r\n        {\r\n        \tputs( \"1\" );\r\n        \tcontinue;\r\n\t\t}\r\n        for( int i = 1 ; i <= N ; i ++ )\r\n        {\r\n            int mn = expand( stt[i], 0 ); \r\n            cover( stt[i], 0, mn );\r\n            write( mn ), putchar( i == N ? '\\n' : ' ' );\r\n        }\r\n    }\r\n    return 0;\r\n}```\r\n```",
        "postTime": 1574501522,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CSP-S2019]\u6811\u4e0a\u7684\u6570"
    },
    {
        "content": "\n[>Blog<\u5185\u98df\u7528\u4f53\u9a8c\u66f4\u4f73](https://www.cnblogs.com/lishuyu2003/p/12077009.html)\n\n[\u9898\u9762](https://www.luogu.com.cn/problem/P5659?contestId=24103)\n\n\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684**\u90e8\u5206\u5206\u542f\u53d1\u6b63\u89e3**\u7684\u9898\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5148\u6765\u770b\u4e24\u4e2a\u90e8\u5206\u5206\u3002\n\n###Part 1 \u83ca\u82b1\u56fe###\n\n\u8fd9\u5e94\u8be5\u662f\u9664\u4e86\u66b4\u529b\u4ee5\u5916\u6700\u597d\u60f3\u7684\u4e00\u6863\u90e8\u5206\u5206\u4e86\u3002\n\n![](https://img2018.cnblogs.com/blog/1736016/201912/1736016-20191221153222869-758892039.png)\n\n\u5982\u4e0a\u56fe\uff08\u8282\u70b9\u4e0a\u7684\u6570\u5b57\u5df2\u7701\u7565\uff09\uff0c\u5982\u679c\u6211\u4eec\u4f9d\u6b21\u5220\u53bb\u8fb9(2)(1)(3)(4)\uff0c\u90a3\u4e48\u64cd\u4f5c\u5b8c\u540e2\u53f7\u70b9\u4e0a\u7684\u6570\u5b57\u5c31\u4f1a\u8dd1\u52301\u53f7\u70b9\u4e0a\uff0c1\u53f7\u70b9\u6570\u5b57\u4f1a\u8dd1\u52303\u53f7\u70b9\u4e0a\uff0c3\u53f7\u70b9\u6570\u5b57\u8dd1\u52304\u53f7\u70b9\u4e0a\u2026\u2026\u4f9d\u6b64\u7d2f\u63a8\u3002\u90a3\u4e48\u6211\u4eec\u76f8\u5f53\u4e8e\u628a\u4e94\u4e2a\u8282\u70b9\u8fde\u6210\u4e86\u4e00\u4e2a\u73af( 5 -> 2 -> 1 -> 3 -> 4 -> 5 )\uff0c\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u7684\u6570\u5b57\u90fd\u4f1a\u8dd1\u5230\u73af\u4e0a\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u53bb\uff0c\u6211\u4eec\u5c31\u662f\u8981\u6c42\u80fd\u4f7f\u6700\u7ec8\u5f97\u5230\u7684\u6392\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u73af\u3002\u90a3\u4e48\u6211\u4eec\u9010\u4f4d\u8d2a\u5fc3\uff0c\u5148\u7531\u6570\u5b571\u6240\u5728\u7684\u8282\u70b9\u9009\u62e9\u5b83\u5728\u73af\u4e0a\u7684\u4e0b\u4e00\u4e2a\u70b9\u662f\u54ea\u4e00\u4e2a\uff0c\u5728\u7531\u6570\u5b572\u6240\u5728\u8282\u70b9\u9009\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6bcf\u6b21\u5728\u5408\u6cd5\u7684\u60c5\u51b5\u4e0b\u9009\u6807\u53f7\u6700\u5c0f\u7684\u8282\u70b9\u5373\u53ef\u3002\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u89c1\u4ee3\u7801\u3002\n\nPart1 \u4ee3\u7801:\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 4007\n#define mem(x) memset(x,0,sizeof(x))\nint p[N],ans[N],vis[N];\nint fa[N];\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nint main()\n{\n    int n,t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t    fa[i]=i;\n\tmem(vis);\n\tfor(int i=1;i<=n;i++)\n\t    scanf(\"%d\",&p[i]);\n\tint x,y;\n\tfor(int i=1;i<n;i++)\n\t    scanf(\"%d%d\",&x,&y);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    int x=p[i];\n\t    for(int j=1;j<=n;j++)\n\t    {\n\t\tif(!vis[j]&&(i==n||find(x)!=find(j)))\n\t\t{\n\t\t    ans[i]=j;\n\t\t    fa[find(x)]=find(j);\n\t\t    vis[j]=1;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\tfor(int i=1;i<=n;i++)\n\t    printf(\"%d \",ans[i]);\n\tprintf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n###Part2 \u94fe###\n\n\u8fd9\u4e00\u90e8\u5206\u548c\u6b63\u89e3\u5173\u7cfb\u7d27\u5bc6\uff0c\u5f15\u5165\u4e86**\u62d3\u6251\u5e8f**\u7684\u6a21\u578b\u6765\u63cf\u8ff0\u9898\u76ee\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u3002\n\n\n![](https://img2018.cnblogs.com/blog/1736016/201912/1736016-20191221160417789-306793148.png)\n\n\n\u5176\u4e2d\u8282\u70b9\u4e2d\u62ec\u53f7\u91cc\u7684\u662f\u8282\u70b9\u4e0a\u7684\u6570\u5b57\u3002\n\n\u5982\u679c\u6570\u5b571\u60f3\u8dd1\u52301\u53f7\u8282\u70b9\u4e0a\u53bb\u8981\u600e\u4e48\u529e\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u5220\u53bb(2)(3)\u53f7\u8fb9\uff0c\u90a3\u4e48\u6570\u5b571\u5c31\u57281\u53f7\u70b9\u4e0a\u4e86\u3002\n\n\u53ea\u8981\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\u5417\uff1f\n\n\u5176\u5b9e\u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e24\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u8fb9(1)\u5fc5\u987b\u5728(2)\u4e4b\u540e\u5220\u9664\uff0c\u4e14(4)\u5fc5\u987b\u5728(3)\u4e4b\u524d\u5220\u9664\uff0c\u4e0d\u7136\u6570\u5b571\u5c31\u4e0d\u5728\u5b83\u5e94\u8be5\u5728\u7684\u5730\u65b9\u4e86\u3002\n\n\u5982\u679c\u6211\u4eec\u4e3a\u6bcf\u4e00\u6761\u8fb9\u5b9a\u4e00\u4e2a**\u4f18\u5148\u7ea7**\uff0c\u4f18\u5148\u7ea7\u5927\u7684\u5148\u5220\uff0c\u90a3\u4e484\u6761\u8fb9\u7684\u4f18\u5148\u7ea7\u5927\u5c0f\u5173\u7cfb\u5c31\u662f\uff1a(1) < (2) > (3) < (4)\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6570\u5b571\u6700\u7ec8\u57281\u53f7\u70b9\u4e0a\u4e86\uff0c\u6b64\u5916\u56e0\u4e3a\u6211\u4eec\u8981\u9010\u4f4d\u8d2a\u5fc3\uff0c\u6240\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u6211\u4eec\u8fd8\u5e0c\u671b\u6570\u5b572\u80fd\u52302\u53f7\u8282\u70b9\u4e0a\u3002\n\n\u4f46\u8fd9\u662f\u5426\u6709\u53ef\u80fd\u5462\uff1f\n\n\u53d1\u73b0\u8fd9\u6837\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u8981\u4f7f\u6570\u5b572\u5230\u8fbe2\u53f7\u70b9\uff0c\u90a3\u4e48\u5fc5\u987b\u6ee1\u8db3\u4f18\u5148\u7ea7(3) > (2) \uff0c \u4e0e\u6570\u5b571\u7684\u6761\u4ef6\u662f\u51b2\u7a81\u7684\uff0c\u6240\u4ee5\u4e0d\u884c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u90e8\u5206\u7684\u7b97\u6cd5\uff1a\n\n\u4ece\u6570\u5b571\u5230\u6570\u5b57n\u9010\u4f4d\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u5f53\u524d\u6570\u5b57\u80fd\u5230\u8fbe\u7684\u3001\u4e0d\u4e0e\u4e4b\u524d\u6761\u4ef6\u51b2\u7a81\u7684\u3001\u6807\u53f7\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u6700\u7ec8\u6240\u5728\u7684\u8282\u70b9\u3002\u7136\u540e\u5c06\u65b0\u4ea7\u751f\u7684\u6761\u4ef6\u52a0\u5165\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u4ee5\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0\u503c0,1,2\uff0c\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u5de6\u53f3\u7684\u4e24\u6761\u8fb9\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7 \u6ca1\u6709\u9650\u5236\u3001\u5de6\u8fb9\u5927\u4e8e\u53f3\u8fb9\u3001\u53f3\u8fb9\u5927\u4e8e\u5de6\u8fb9\u3002\u7136\u540e\u6bcf\u6b21\u4ece\u5f53\u524d\u6570\u5b57\u6240\u5728\u4f4d\u7f6e\u5411\u5de6\u53f3\u4e24\u8fb9\u627e\u7b26\u5408\u6761\u4ef6\u7684\u70b9\uff0c\u518d\u628a\u65b0\u6761\u4ef6\u5bf9\u5e94\u7684\u6807\u8bb0\u503c\u66f4\u65b0\u5373\u53ef\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\nPart2 \u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 4007\nint hd[N],pre[N],to[N],num,tag[N],pos[N],id[N],p[N],d[N],cnt,ans[N];\nvoid adde(int x,int y)\n{\n    num++;pre[num]=hd[x];hd[x]=num;to[num]=y;\n}\nvoid dfs(int v,int f)\n{\n    id[++cnt]=v,pos[v]=cnt;\n    for(int i=hd[v];i;i=pre[i])\n    {\n\tint u=to[i];\n\tif(u==f)continue;\n\tdfs(u,v);\n    }\n}\n#define mem(x) memset(x,0,sizeof(x))\nint main()\n{\n    int n;\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n\tscanf(\"%d\",&n);\n\tmem(hd),mem(tag),mem(d);\n\tnum=0,cnt=0;\n\tfor(int i=1;i<=n;i++)\n\t    scanf(\"%d\",&p[i]);\n\tfor(int i=1;i<n;i++)\n\t{\n\t    int x,y;\n\t    scanf(\"%d%d\",&x,&y);\n\t    adde(x,y),adde(y,x);\n\t    d[x]++,d[y]++;\n\t}\n\tint rt=0;\n\tfor(int i=1;i<=n ;i++)\n\t    if(d[i]==1)rt=i;\n\tdfs(rt,0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    int x=p[i],b=pos[x];\n\t    int mi=n+1;\n\t    if(tag[b]!=1)\n\t    {\n\t\tfor(int j=b+1;j<=n;j++)\n\t\t{\n\t\t    if(tag[j]!=1)mi=min(mi,id[j]);\n\t\t    if(tag[j]==2)break;\n\t\t}\n\t    }\n\t    if(tag[b]!=2)\n\t    {\n\t\tfor(int j=b-1;j>=1;j--)\n\t\t{\n\t\t    if(tag[j]!=2)mi=min(mi,id[j]);\n\t\t    if(tag[j]==1)break;\n\t\t}\n\t    }\n\t    if(pos[mi]>b)\n\t    {\n\t\tfor(int j=b+1;j<=pos[mi]-1;j++)tag[j]=1;\n\t\ttag[b]=tag[pos[mi]]=2;\n\t    }\n\t    else\n\t    {\n\t\tfor(int j=pos[mi]+1;j<b;j++)tag[j]=2;\n\t\ttag[pos[mi]]=tag[b]=1;\n\t    }\n\t    tag[1]=tag[n]=0;\n\t    ans[i]=mi;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t    printf(\"%d \",ans[i]);\n\tprintf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n###Part3 \u6b63\u89e3###\n\n\u5176\u5b9e\u4ece\u7b2c\u4e8c\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u5f62\u5982\u6570\u5b57x\u8981\u5230y\u53f7\u8282\u70b9\u4e0a\u6240\u9700\u6ee1\u8db3\u7684\u6761\u4ef6\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u4e00\u7cfb\u5217\u8fb9\u7684\u4f18\u5148\u7ea7\u7684\u5927\u5c0f\u5173\u7cfb\uff08\u8fd9\u91cc\u7684\u4f18\u5148\u7ea7\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u79cd\u62d3\u6251\u5e8f\uff09\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u6761\u4ef6\u653e\u5728\u8282\u70b9\u4e0a\uff0c\u8868\u793a\u4e0e\u8fd9\u4e2a\u8282\u70b9\u76f8\u90bb\u7684\u6240\u6709\u8fb9\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u662f\u600e\u6837\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4**\u53ea\u6709\u4e0e\u540c\u4e00\u4e2a\u8282\u70b9\u76f8\u90bb\u7684\u8fb9\u4e4b\u95f4\u624d\u4f1a\u6709\u5927\u5c0f\u5173\u7cfb\u7684\u9650\u5236**\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u628a\u94fe\u4e0a\u7684\u7b97\u6cd5\u62d3\u5c55\u5230\u4e00\u822c\u7684\u6811\u4e0a\u5462\uff1f\n\n![](https://img2018.cnblogs.com/blog/1736016/201912/1736016-20191221171353039-1564013267.png)\n\n\u5982\u679c\u6709\u4e00\u4e2a\u6570\u5b57\u60f3\u4ece1\u53f7\u70b9\u52303\u53f7\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u6709\u4e24\u79cd\uff1a\n\n1. (3)\u7684\u4f18\u5148\u7ea7\u662f\u4e0e1\u53f7\u70b9\u76f8\u90bb\u7684\u8fb9\u4e2d\u6700\u5927\u7684\uff0c(6)\u7684\u4f18\u5148\u7ea7\u662f\u4e0e3\u53f7\u70b9\u76f8\u90bb\u7684\u8fb9\u4e2d\u6700\u5c0f\u7684\uff1b\n\n2. (3)\u7684\u4f18\u5148\u7ea7\u5927\u4e8e(6)\uff1b\n\n\n\n\u5bf9\u4e8e\u6761\u4ef62\uff0c\u8fd9\u6837\u8fd8\u4e0d\u591f\u5145\u5206\uff0c\u56e0\u4e3a\u5982\u679c\u5220\u5b8c(3)\u4e4b\u540e\u518d\u5220(4)\u7684\u8bdd\u5c31\u4e0d\u5bf9\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u5220\u5b8c(3)\u4e4b\u540e\u8981\u7d27\u63a5\u7740\u5220(6)\n\n\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u5c31\u76f8\u5f53\u4e8e\u628a\u4e0e2\u53f7\u70b9\u76f8\u90bb\u7684\u8fb9\u6309\u7167\u4f18\u5148\u7ea7\u5927\u5c0f\u6392\u5217\uff0c\u90a3\u4e48(3)\u548c(6)\u5fc5\u987b\u662f\u76f8\u90bb\u7684\uff0c\u4e14(3)\u5728(6)\u524d\u9762\u3002\n\n\u600e\u4e48\u505a\u5230\u8fd9\u4e00\u70b9\u5462\uff1f\u53d1\u73b0\u8fd9\u79cd\u8981\u8ba9\u4e24\u6761\u8fb9\u76f8\u90bb\u7684\u6761\u4ef6\u5176\u5b9e\u5df2\u7ecf\u5728\u7b2c\u4e00\u90e8\u5206\u7684\u83ca\u82b1\u56fe\u4e2d\u8ba8\u8bba\u8fc7\u4e86\uff0c\u4e00\u6837\u7684\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u5373\u53ef\uff0c\u53ea\u4e0d\u8fc7Part1\u4e2d\u53ea\u7528\u4e86\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u800c\u73b0\u5728\u6211\u4eec\u8981\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u5468\u56f4\u7684\u8fb9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u8981\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2a\u5e76\u67e5\u96c6\u3002\n\n\u800c\u5bf9\u4e8e\u6761\u4ef61\uff0c\u6211\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u5e76\u67e5\u96c6\u5efa\u4e86\u4e00\u4e2a\u865a\u70b9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u7684\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u90a3\u4e48\u7531\u865a\u70b9\u5411\u5b83\u8fde\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u4f18\u5148\u7ea7\u6700\u5c0f\uff0c\u5219\u7531\u5b83\u5411\u865a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u5957Part1\u90e8\u5206\u7684\u4ee3\u7801\u4e86\u3002\n\n\u7136\u540e\u8d2a\u5fc3\u8fc7\u7a0b\u4e0ePart2\u7c7b\u4f3c\uff0c\u6bcf\u6b21\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u904d\u5386\u6574\u68f5\u6811\uff0c\u6bcf\u8d70\u4e00\u6761\u8fb9\u5c31\u5224\u65ad\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u5bf9\u4e00\u6761\u8def\u5f84\u8fdb\u884c\u4fee\u6539\u5373\u53ef\u3002\n\n\nPart3 \u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 20007\n#define mem(x) memset(x,0,sizeof(x))\nint hd[N],pre[N],to[N],num,fa[N],sz[N],d[N],p[N],ver;\nbool in[N],out[N];\nvoid adde(int x,int y)\n{\n    num++;pre[num]=hd[x];hd[x]=num;to[num]=y;\n}\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y)\n{\n    int u=find(x),v=find(y);\n    fa[u]=v,sz[v]+=sz[u];\n    out[x]=in[y]=1;\n}\nbool check(int x,int y,int l)\n{\n    if(in[y]||out[x])return false;\n    int u=find(x),v=find(y);\n    if(u==v&&sz[u]!=l)return false;\n    return true;\n}\nvoid dfs1(int v,int f)\n{\n    if(f!=v&&check(f,v,d[v]+1))ver=min(ver,v);\n    for(int i=hd[v];i;i=pre[i])\n    {\n\tint u=to[i];\n\tif(i==f)continue;\n\tif(check(f,i,d[v]+1))\n\t{\n\t    dfs1(u,i^1);\n\t}\n    }\n}\nbool dfs2(int v,int f,int p)\n{\n    if(v==p)\n    {\n\tmerge(f,v);\n\treturn true;\n    }\n    for(int i=hd[v];i;i=pre[i])\n    {\n\tint u=to[i];\n\tif(i==f)continue;\n\tif(dfs2(u,i^1,p))\n\t{\n\t    merge(f,i);\n\t    return true;\n\t}\n    }\n    return false;\n}\nint main()\n{\n    int t,n;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n\tscanf(\"%d\",&n);\n\tmem(hd),mem(in),mem(out),mem(d);\n\tnum=(n+1)/2*2+1;\n\tfor(int i=1;i<=n;i++)\n\t    scanf(\"%d\",&p[i]);\n\tfor(int i=1;i<n;i++)\n\t{\n\t    int x,y;\n\t    scanf(\"%d%d\",&x,&y);\n\t    d[x]++,d[y]++;\n\t    adde(x,y),adde(y,x);\n\t}\n\tfor(int i=1;i<=num;i++)\n\t    fa[i]=i,sz[i]=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    int v=p[i];\n\t    ver=n+1;\n\t    dfs1(v,v);\n\t    dfs2(v,v,ver);\n\t    printf(\"%d \",ver);\n\t}\n\tprintf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n\n\u603b\u7ed3\uff1a\u901a\u8fc7\u8fd9\u9898\u5927\u5bb6\u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u9898\u6b63\u89e3\u4e0e\u90e8\u5206\u5206\u662f\u7d27\u5bc6\u76f8\u8fde\u7684\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u90e8\u5206\u5206\u7684\u601d\u8003\uff0c\u5f88\u96be\u76f4\u63a5\u60f3\u5230\u6b63\u89e3\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u5f53\u65e0\u6cd5\u76f4\u63a5\u60f3\u5230\u6b63\u89e3\u65f6\uff0c\u53ef\u4ee5\u601d\u8003\u4e00\u4e9b\u6b64\u9898\u7684\u90e8\u5206\u5206\uff0c\u627e\u5230\u90e8\u5206\u5206\u4e0e\u6b63\u89e3\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u8fdb\u800c\u4ee5\u8fc2\u56de\u7684\u65b9\u5f0f\u627e\u5230\u6b63\u89e3\u3002\u4e00\u4e9b\u4eba\u56e0\u8fc7\u4e8e\u8ffd\u6c42\u6b63\u89e3\uff0c\u76f4\u63a5\u8df3\u8fc7\u90e8\u5206\u5206\u601d\u8003\u6b63\u89e3\uff0c\u7ed3\u679c\u53cd\u800c\u65e0\u6cd5\u5f97\u5230\u6b63\u89e3\u3002~~\u6bd4\u5982\u672c\u6587\u4f5c\u8005\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u53cd\u9762\u4f8b\u5b50~~\n",
        "postTime": 1576925870,
        "uid": 100806,
        "name": "lyyi2003",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u5e03\u5728\u6211\u7684\u535a\u5ba2\uff1a[[CSP-S2 2019]\u6811\u4e0a\u7684\u6570 \u9898\u89e3 | KSkun's Blog](https://ksmeow.moe/tree-csps219-sol/)\uff0c\u6b22\u8fce\u6765\u901b~\n\n\u5e7f\u544a\uff1aCSP-J/S2 2019 \u5fd7\u613f\u8005\u7684\u5e55\u540e\u6545\u4e8b\uff1a[CSP-JS2 2019 \u6e38\u8bb0 | KSkun's Blog](https://ksmeow.moe/csp-js2-2019/)\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a $1 \\sim n$ \u4e2d\u7684\u6570\u5b57\uff0c\u5b9a\u4e49\u5bf9\u8fb9 $(u, v)$ \u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\u4e3a\u5220\u8fb9\u4e14\u4ea4\u6362 $u, v$ \u8282\u70b9\u4e0a\u7684\u6570\u5b57\uff0c\u5b9a\u4e49 $P_i$ \u4e3a\u6570\u5b57 $i$ \u6240\u5728\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u6c42\u4f7f\u5f97 $P_i$ \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5220\u8fb9\u987a\u5e8f\u3002\u4ec5\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 $P_i$ \u3002\n\n## \u9898\u89e3\n\n*\u7531\u4e8e\u4f5c\u8005\u6c34\u5e73\u6709\u9650\uff0c\u672c\u9898\u89e3\u8868\u8ff0\u3001\u903b\u8f91\u53ef\u80fd\u5b58\u5728\u4e0d\u8db3\u4e4b\u5904\uff0c\u6b22\u8fce\u8bfb\u8005\u4ee5\u81ea\u8eab\u7406\u89e3\u63d0\u51fa\u6539\u8fdb\u610f\u89c1\u3002*\n\n\u521a\u770b\u5230\u8fd9\u4e2a\u9898\u76ee\u7684\u65f6\u5019\uff0c\u603b\u662f\u60f3\u53d1\u6398\u6811\u94fe\u4e0a\u7684\u6027\u8d28\uff0c\u5904\u7406\u70b9\u4e0a\u7684\u4fe1\u606f\uff0c\u8fd9\u79cd\u60ef\u6027\u601d\u7ef4\u4f7f\u6211\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u9898\u5904\u7406\u8fb9\u4e0a\u7684\u4fe1\u606f\u66f4\u597d\u3002\n\n### \u83ca\u82b1\u56fe\n\n\u672c\u9898\u4e2d\uff0c\u6709 $25$ \u5206\u7684\u83ca\u82b1\u56fe\u90e8\u5206\u5206\uff0c\u5728\u83ca\u82b1\u56fe\u548c\u94fe\u4e24\u4e2a\u90e8\u5206\u5206\u4e2d\uff0c\u83ca\u82b1\u56fe\u4e8b\u5b9e\u4e0a\u76f8\u5bf9\u597d\u601d\u8003\u4e00\u4e9b\uff0c\u56e0\u6b64\u5148\u8003\u8651\u83ca\u82b1\u56fe\u7684\u60c5\u51b5\u3002\n\n\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u83ca\u82b1\u56fe\u4e0a\u5220\u8fb9\u7684\u987a\u5e8f\u4e3a $(1, u_1), (1, u_2), \\dots, (1, u_m)$ \uff0c\u5219\u6309\u987a\u5e8f\u5220\u8fb9\u540e\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c $1$ \u53f7\u70b9\u7684\u6570\u5b57\u79fb\u52a8\u81f3 $u_1$\uff0c $u_1$ \u7684\u6570\u5b57\u79fb\u52a8\u81f3 $u_2$\uff0c\u2026\u2026\uff0c $u_m$ \u7684\u6570\u5b57\u79fb\u52a8\u81f3 $1$ \u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u5730\u6784\u9020\u8fd9\u4e2a\u987a\u5e8f\uff0c\u679a\u4e3e\u6570\u5b57 $1 \\sim n$ \uff0c\u6bcf\u4e2a\u6570\u5b57\u8d2a\u5fc3\u5730\u9009\u62e9\u5220\u8fb9\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u6761\u8fb9\uff0c\u8be5\u6570\u5b57\u6700\u540e\u7684\u4f4d\u7f6e\u5c31\u662f\u8be5\u8fb9\u5bf9\u5e94\u7684 $u_i$ \u3002\n\n### \u94fe\n\n\u94fe\u7684\u60c5\u51b5\u540c\u6837\u662f $25$ \u5206\u3002\n\n\u5728\u94fe\u7684\u60c5\u51b5\u4e2d\uff0c\u5206\u6790\u8fb9\u7684\u5173\u7cfb\u662f\u5fc5\u8981\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57 $k$ \u4ece\u521d\u59cb\u4f4d\u7f6e $u_1$ \u79fb\u52a8\u81f3 $u_m$ \uff0c\u5728\u8def\u5f84 $u_1, u_2, \\dots, u_m$ \u4e0a\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n- \u5bf9\u4e8e\u8d77\u70b9 $u_1$ \uff0c\u5176\u51fa\u8fb9 $(u_1, u_2)$ \u4e00\u5b9a\u662f\u8fd9\u4e00\u70b9\u5148\u88ab\u5220\u6389\u7684\u8fb9\u3002\n- \u5bf9\u4e8e\u7ec8\u70b9 $u_m$ \uff0c\u5176\u5165\u8fb9 $(u_{m-1}, u_m)$ \u4e00\u5b9a\u662f\u8fd9\u4e00\u70b9\u540e\u88ab\u5220\u6389\u7684\u8fb9\u3002\n- \u5bf9\u4e8e\u4e2d\u95f4\u70b9 $u_i$ \uff0c\u5176\u5165\u8fb9 $(u_{i-1}, u_i)$ \u5148\u4e8e\u51fa\u8fb9 $(u_i, u_{i+1})$ \u88ab\u5220\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u5220\u8fb9\u7684\u987a\u5e8f\uff0c\u5de6\u5148\u4e8e\u53f3\u6216\u53f3\u5148\u4e8e\u5de6\u3002\u4ecd\u7136\u6309 $1 \\sim n$ \u7684\u987a\u5e8f\u679a\u4e3e\u6570\u5b57\uff0c\u68c0\u67e5\u6bcf\u4e2a\u6570\u5b57\u4ece\u521d\u59cb\u4f4d\u7f6e\u5411\u5de6\u5411\u53f3\u80fd\u8d70\u5230\u7684\u70b9\u4e2d\u7684\u6700\u5c0f\u7f16\u53f7\u3002\u4e0d\u80fd\u8d70\u4ec5\u5f53\u8be5\u70b9\u5df2\u786e\u5b9a\u7684\u987a\u5e8f\u4e0d\u6ee1\u8db3\u5f53\u524d\u9700\u8981\u7684\u987a\u5e8f\u3002\n\n### \u4e00\u822c\u60c5\u51b5\n\n\u4e0e\u94fe\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57 $k$ \u4ece\u521d\u59cb\u4f4d\u7f6e $u_1$ \u79fb\u52a8\u81f3 $u_m$ \uff0c\u5728\u8def\u5f84 $u_1, u_2, \\dots, u_m$ \u4e0a\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n- **\u5bf9\u4e8e\u8d77\u70b9 $u_1$ \uff0c\u5176\u51fa\u8fb9 $(u_1, u_2)$ \u4e00\u5b9a\u662f\u8fd9\u4e00\u70b9\u7b2c\u4e00\u6761\u88ab\u5220\u6389\u7684\u8fb9\u3002** \u5982\u679c\u4e0d\u662f\uff0c\u5219 $k$ \u4f1a\u88ab\u6362\u5230\u5176\u4ed6\u70b9\u4e0a\u3002\n- **\u5bf9\u4e8e\u7ec8\u70b9 $u_m$ \uff0c\u5176\u5165\u8fb9 $(u_{m-1}, u_m)$ \u4e00\u5b9a\u662f\u8fd9\u4e00\u70b9\u6700\u540e\u4e00\u6761\u88ab\u5220\u6389\u7684\u8fb9\u3002** \u5982\u679c\u4e0d\u662f\uff0c\u5219 $k$ \u4e5f\u4f1a\u88ab\u6362\u5230\u5176\u4ed6\u70b9\u4e0a\u3002\n- **\u5bf9\u4e8e\u4e2d\u95f4\u70b9 $u_i$ \uff0c\u5176\u5165\u8fb9 $(u_{i-1}, u_i)$ \u5148\u4e8e\u51fa\u8fb9 $(u_i, u_{i+1})$ \u88ab\u5220\uff0c\u4e14\u5728\u8be5\u70b9\u7684\u6240\u6709\u8fb9\u91cc\u88ab\u5220\u9664\u7684\u987a\u5e8f\u662f\u76f8\u90bb\u7684\u3002** \u5982\u679c\u4e0d\u6ee1\u8db3\u540e\u4e00\u6761\u6027\u8d28\uff0c\u5219\u5728\u4e2d\u95f4\u6570\u5b57 $k$ \u4f1a\u88ab\u6362\u5230\u5176\u4ed6\u70b9\u4e0a\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u4e9b\u9650\u5236\u90fd\u662f\u5e94\u7528\u5728\u67d0\u4e00\u70b9\u7684\u8fb9\u4e2d\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5355\u72ec\u8003\u8651\u6bcf\u4e2a\u70b9\u7684\u60c5\u51b5\u3002\u4f9d\u7136\u662f $1 \\sim n$ \u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\uff0c\u4ece\u8fd9\u4e2a\u6570\u5b57\u7684\u521d\u59cb\u4f4d\u7f6e\u5f00\u59cb DFS \uff0c\u68c0\u67e5\u8def\u5f84\u4e0a\u7684\u70b9\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u95f4\u70b9/\u7ec8\u70b9\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u662f\u8fd9\u4e2a\u9898\u7684\u5b9e\u73b0\u4e2d\u6700\u96be\u7684\u4f4d\u7f6e\uff0c\u5373\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u4e2d\u95f4\u70b9/\u7ec8\u70b9\u7684\u6761\u4ef6\u3002\u8fd9\u91cc\uff0c\u6211\u4f7f\u7528\u4e86\u94fe\u8868+\u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u65b9\u6cd5\u7ba1\u7406\u8fb9\u7684\u5173\u7cfb\u3002\u7528\u7c7b\u4f3c\u94fe\u8868\u7684\u7ed3\u6784\u5b58\u50a8\u67d0\u4e2a\u70b9\u7684\u8fb9\u662f\u5426\u88ab\u5e94\u7528\u4e86\u5728\u67d0\u8fb9\u4e4b\u540e/\u4e4b\u524d\u88ab\u5220\u7684\u9650\u5236\uff0c\u7528\u5e76\u67e5\u96c6\u5b58\u50a8\u67d0\u4e2a\u70b9\u7684\u8fb9\u7684\u9650\u5236\u8fde\u6210\u7684\u94fe\u5f0f\u7ed3\u6784\uff0c\u4e14\u7528\u4e24\u4e2a\u6570\u7ec4 beg \u548c end \u5b58\u50a8\u67d0\u4e2a\u70b9\u7684\u8fb9\u4e2d\uff0c\u88ab\u56fa\u5b9a\u4e3a\u7b2c\u4e00\u6761/\u6700\u540e\u4e00\u6761\u88ab\u5220\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u80fd\u4f5c\u4e3a\u7ec8\u70b9\u7684\u6761\u4ef6\u4e3a\uff1a\n\n- \u4e0d\u662f\u8d77\u70b9\uff1b\n- \u5165\u8fb9\u5fc5\u987b\u80fd\u4f5c\u4e3a\u8be5\u70b9\u7684\u6700\u540e\u4e00\u6761\u88ab\u5220\u7684\u8fb9\uff1b\n- \u7279\u6b8a\u60c5\u51b5\uff1a\u5f53\u8be5\u70b9\u5ea6\u6570\u4e3a $1$ \u65f6\u7b2c\u4e00\u6761/\u6700\u540e\u4e00\u6761\u88ab\u5220\u7684\u8fb9\u4e3a\u540c\u4e00\u6761\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u80fd\u4f5c\u4e3a\u4e2d\u95f4\u70b9\u7684\u6761\u4ef6\u4e3a\uff1a\n\n- \u5165\u8fb9\u4e4b\u540e\u4e0d\u80fd\u6709\u9664\u51fa\u8fb9\u4e4b\u5916\u7684\u7d27\u63a5\u7740\u8981\u5220\u7684\u8fb9\uff1b\n- \u51fa\u8fb9\u4e4b\u524d\u4e0d\u80fd\u6709\u9664\u5165\u8fb9\u4e4b\u5916\u7684\u7d27\u63a5\u7740\u8981\u5220\u7684\u8fb9\uff1b\n- \u5c06\u5165\u8fb9\u548c\u51fa\u8fb9\u7684\u9650\u5236\u5173\u7cfb\u52a0\u5165\u540e\uff0c\u5982\u679c\u4f1a\u4f7f\u8be5\u70b9\u7684\u7b2c\u4e00\u6761\u548c\u6700\u540e\u4e00\u6761\u88ab\u5220\u7684\u8fb9\u52a0\u5165\u4e86\u540c\u4e00\u6761\u5173\u7cfb\u94fe\uff0c\u5219\u6b64\u65f6\u8be5\u70b9\u7684\u8fb9\u90fd\u5728\u8fd9\u6761\u5173\u7cfb\u94fe\u4e2d\u3002\n\n\u6839\u636e\u4ee5\u4e0a\u6761\u4ef6\u8fdb\u884c\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u4f5c\u4e3a\u4e2d\u95f4\u70b9/\u7ec8\u70b9\uff0c\u5bfb\u627e\u6bcf\u4e2a\u6570\u5b57\u7684\u6700\u5c0f\u7f16\u53f7\u7ec8\u70b9\uff0c\u5e76\u5728\u8def\u5f84\u4e0a\u5e94\u7528\u51fa\u5165\u8fb9\u7684\u9650\u5236\u5373\u53ef\u3002\n\n\u7531\u4e8e\u7ec6\u8282\u4f17\u591a\uff0c\u6587\u5b57\u63cf\u8ff0\u65e0\u6cd5\u5305\u62ec\u6240\u6709\u65b9\u9762\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca\u6765\u7406\u89e3\u3002\n\n## \u4ee3\u7801\n\n*UPD\uff1a\u88ab\u5361\u5e38\u4e86\uff0c\u5f00 O2 \u6d1b\u8c37\u53ef\u8fc7\u3002*\n\n```cpp\n// Code by KSkun, 2019/11\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n\n#include <algorithm>\n#include <vector>\n#include <utility>\n\ntypedef long long LL;\ntypedef std::pair<int, int> PII;\n\ninline char fgc() {\n\tstatic char buf[100000], * p1 = buf, * p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2)\n\t\t? EOF : *p1++;\n}\n\ninline LL readint() {\n\tLL res = 0, neg = 1; char c = fgc();\n\tfor(; !isdigit(c); c = fgc()) if(c == '-') neg = -1;\n\tfor(; isdigit(c); c = fgc()) res = res * 10 + c - '0';\n\treturn res * neg;\n}\n\ninline char readsingle() {\n\tchar c;\n\twhile(!isgraph(c = fgc())) {}\n\treturn c;\n}\n\nconst int MAXN = 2005;\n\nint T, n, ptn[MAXN], deg[MAXN], beg[MAXN], end[MAXN]; // \u6bcf\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761/\u6700\u540e\u4e00\u6761\u88ab\u5220\u7684\u8fb9\nstd::vector<int> gra[MAXN];\n\nstruct UnionFindSet {\n\tint fa[MAXN];\n\tbool pre[MAXN], nxt[MAXN]; // \u4e00\u6761\u8fb9\u6709\u65e0\u524d\u540e\u5173\u7cfb\n\tvoid clear() {\n\t\tfor (int i = 1; i <= n; i++) fa[i] = i;\n\t\tmemset(pre, 0, sizeof(pre));\n\t\tmemset(nxt, 0, sizeof(nxt));\n\t}\n\tint find(int x) {\n\t\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n\t}\n\tvoid join(int x, int y) { \n\t\tint fx = find(x), fy = find(y);\n\t\tfa[fy] = fx;\n\t\tnxt[x] = pre[y] = true;\n\t}\n\tbool sameset(int x, int y) {\n\t\treturn find(x) == find(y);\n\t}\n} ufs[MAXN];\n\nint dfs(int u, int f) {\n\tint mn = n + 1;\n\t// \u80fd\u4f5c\u4e3a\u7ec8\u70b9\u7684\u6761\u4ef6\uff1a\u4e0d\u662f\u8d77\u70b9\uff1b\u5165\u8fb9\u53ef\u4ee5\u662f\u6700\u540e\u5220\u8fb9\uff1b\u5165\u8fb9\u4e4b\u540e\u65e0\u5fc5\u987b\u5220\u8fb9\uff1b\u5165\u8fb9\u548c\u6700\u540e\u5220\u8fb9\u4e0d\u5728\u4e00\u6761\u5173\u7cfb\u94fe\u4e2d\uff08\u53ea\u5269\u4e00\u6761\u94fe\u65f6\u9664\u5916\uff09\n\tif (f != 0 && (end[u] == 0 || end[u] == f) && !ufs[u].nxt[f] && \n\t\t!(beg[u] != 0 && deg[u] > 1 && ufs[u].sameset(f, beg[u]))) {\n\t\tmn = std::min(mn, u);\n\t}\t\n\tfor (int v : gra[u]) {\n\t\tif (v == f) continue;\n\t\tif (f == 0) {\n\t\t\t// \u4e0d\u80fd\u4f5c\u4e3a\u8d77\u70b9\u4e4b\u540e\u7684\u70b9\u7684\u6761\u4ef6\uff1a\u8d77\u70b9\u7684\u6700\u540e\u5220\u8fb9\u4e0d\u662f\u8fd9\u6761\uff1b\u8fd9\u6761\u8fb9\u4e4b\u524d\u6709\u5fc5\u987b\u5220\u7684\u8fb9\uff1b\u8fd9\u6761\u8fb9\u4e0e\u6700\u540e\u5220\u8fb9\u5728\u540c\u4e00\u6761\u5173\u7cfb\u94fe\u4e2d\uff0c\u4e14\u4ecd\u6709\u672a\u52a0\u5165\u5173\u7cfb\u94fe\u4e2d\u7684\u8fb9\n\t\t\tif (beg[u] != 0 && beg[u] != v) continue;\n\t\t\tif (ufs[u].pre[v]) continue;\n\t\t\tif (end[u] != 0 && deg[u] > 1 && ufs[u].sameset(v, end[u])) continue;\n\t\t\tmn = std::min(mn, dfs(v, u));\n\t\t} else {\n\t\t\t// \u4e0d\u80fd\u4f5c\u4e3a\u4e2d\u95f4\u70b9\u7684\u6761\u4ef6\uff1a\u5165\u8fb9\u662f\u6700\u540e\u5220\u8fb9\uff1b\u51fa\u8fb9\u662f\u6700\u5148\u5220\u8fb9\uff1b\u5165\u8fb9\u548c\u51fa\u8fb9\u5df2\u5728\u540c\u4e00\u6761\u5173\u7cfb\u94fe\u4e2d\uff1b\u51fa\u8fb9\u4e4b\u524d\u6709\u5fc5\u987b\u5220\u8fb9\uff1b\u5165\u8fb9\u4e4b\u540e\u6709\u5fc5\u987b\u5220\u8fb9\uff1b\u5e94\u7528\u51fa\u5165\u8fb9\u5173\u7cfb\u540e\u8ba9\u6700\u5148\u5220\u8fb9\u548c\u6700\u540e\u5220\u8fb9\u5728\u540c\u4e00\u6761\u5173\u7cfb\u94fe\u4e2d\uff0c\u4e14\u6709\u5176\u4ed6\u8fb9\u672a\u5728\u8be5\u5173\u7cfb\u94fe\u4e2d\n\t\t\tif (f == end[u] || v == beg[u] || ufs[u].sameset(f, v)) continue;\n\t\t\tif (ufs[u].pre[v] || ufs[u].nxt[f]) continue;\n\t\t\tif (beg[u] != 0 && end[u] != 0 && deg[u] > 2 && \n\t\t\t\tufs[u].sameset(f, beg[u]) && ufs[u].sameset(v, end[u])) continue;\n\t\t\tmn = std::min(mn, dfs(v, u));\n\t\t}\n\t}\n\treturn mn;\n}\n\nbool dfs2(int u, int f, int& tar) {\n\tif (u == tar) {\n\t\tend[u] = f; return true;\n\t}\n\tfor (int v : gra[u]) {\n\t\tif (v == f) continue;\n\t\tif (dfs2(v, u, tar)) {\n\t\t\tif (f == 0) {\n\t\t\t\tbeg[u] = v;\n\t\t\t} else {\n\t\t\t\tufs[u].join(f, v);\n\t\t\t\tdeg[u]--;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main() {\n\tT = readint();\n\twhile (T--) {\n\t\tn = readint();\n\n\t\t// init\n\t\tmemset(beg, 0, sizeof(beg));\n\t\tmemset(end, 0, sizeof(end));\n\t\tmemset(deg, 0, sizeof(deg));\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tgra[i].clear();\n\t\t\tufs[i].clear();\n\t\t}\n\t\t\n\t\t// input\n\t\tfor (int i = 1; i <= n; i++) ptn[i] = readint();\n\t\tfor (int i = 1, x, y; i < n; i++) {\n\t\t\tx = readint(); y = readint();\n\t\t\tgra[x].push_back(y);\n\t\t\tgra[y].push_back(x);\n\t\t\tdeg[x]++; deg[y]++; // deg \u8868\u793a\u4e00\u4e2a\u70b9\u7684\u8fb9\u5173\u7cfb\u6784\u6210\u7684\u94fe\u7684\u6570\u91cf\uff0c\u521d\u59cb\u4e3a\u5ea6\u6570\uff0c\u4e4b\u540e\u6bcf\u52a0\u5165\u4e00\u4e2a\u5173\u7cfb\u5c31\u5bf9\u5176\u51cf 1\n\t\t}\n\n\t\t// process\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint mn = dfs(ptn[i], 0);\n\t\t\tdfs2(ptn[i], 0, mn);\n\t\t\tprintf(\"%d \", mn);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1577350080,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "\u89c2\u5bdf\u94fe\u4e0a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53d1\u73b0\u4ece\u4e00\u4e2a\u70b9$l$\u5230\u53e6\u4e00\u4e2a\u70b9$r$\uff0c\u6211\u4eec\u7ed9\u4ed6\u4eec\u4e4b\u95f4\u7684\u76f8\u90bb\u4e24\u6761\u8fb9\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5148\u540e\u987a\u5e8f\u3002 \u6bd4\u5982\u8bf4\u6211\u4eec\u5fc5\u987b\u5148\u8d70$l\uff5el+1$\u624d\u80fd\u8d70$l+1 \uff5e l+2$\u3002\n\n\u5bf9\u4e8e\u8fb9\u754c\u7684\u4e24\u4e2a\u70b9\uff0c\u4ed6\u4eec\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u4e2d\uff0c\u5206\u522b\u8981\u7b2c\u4e00\u4e2a\u8d70$l\uff5el+1$ \u548c\u6700\u540e\u4e00\u4e2a\u8d70 $r-1 \uff5e r$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ece\u524d\u5230\u540e\u679a\u4e3e\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\uff0c\u6211\u4eec\u679a\u4e3e\u5b83\u6700\u7ec8\u505c\u5728\u54ea\u91cc\uff0c\u5224\u65ad\u548c\u4e4b\u524d\u7684\u6761\u4ef6\u662f\u5426\u51b2\u7a81\uff0c\u8d2a\u5fc3\u9009\u6240\u6709\u80fd\u5230\u8fbe\u8282\u70b9\u6700\u5c0f\u7684\u3002\n\n\u5224\u65ad\u6761\u4ef6\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u4f1a\u628a\u8fde\u7eed\u4e00\u6bb5\u6dfb\u52a0\u4e00\u4e2a\u5148\u540e\u987a\u5e8f\u3002\n\n\u90a3\u4e48\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5c31\u662f$O(1)$\u7684\u4e86\uff0c\u603b\u590d\u6742\u5ea6$O(n^2)$\n\n\n\n\u5bf9\u4e8e\u83ca\u82b1\u56fe\uff0c\u6211\u4eec\u8003\u8651\u5982\u679c\u60f3\u8ba9\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9$u$\u5230\u8fbe\u70b9$v$\uff0c\u6211\u4eec\u4e00\u5b9a\u8981\u8d70\u83ca\u82b1\u7684\u4e2d\u5fc3\u3002\u5e76\u4e14\u5fc5\u987b\u8fde\u7eed\u8d70\u8fb9$(u,root)$,$(root,v)$(\u6211\u4eec\u7528root\u8868\u793a\u83ca\u82b1\u56fe\u4e2d\u5fc3\uff09\u3002\n\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86\uff0c\u5bf9\u4e8e$root$\u70b9\uff0c\u5b83\u5176\u4e2d\u67d0\u4e24\u6761\u8fb9\u6709\u5148\u540e\u987a\u5e8f\u7684\u9650\u5236\u3002\n\n\u5bf9\u4e8e\u4e2d\u5fc3\u8282\u70b9$root$\u7684\u79fb\u52a8\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u7ed9\u5b83\u6240\u6709\u8fb9\u7684\u5148\u540e\u987a\u5e8f\u786e\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u56e0\u4e3a\u5b83\u79fb\u52a8\u8fc7\u53bb\u5c31\u56de\u4e0d\u6765\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u94fe\u8868\u914d\u5408\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fd9\u4e2a\u9650\u5236\u5173\u7cfb\uff0c\u50cf\u94fe\u4e0a\u4e00\u6837\u8d2a\u5fc3\u679a\u4e3e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2\\alpha(n))$\n\n\u5bf9\u4e8e\u4e00\u822c\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u5806\u83ca\u82b1\u548c\u4e00\u5806\u94fe\u7684\u7ed3\u5408\u4f53\uff0c\u91c7\u7528\u83ca\u82b1\u56fe\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u66b4\u529b\u679a\u4e3e\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u529e\u6cd5$O(\\alpha(n))$\u5224\u65ad\u4e86\u3002\n\n\u8003\u8651\u6211\u4eec\u5982\u679c\u8981\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8$(u->m->v)$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7684\u662f\uff0c\u5bf9\u4e8e$u$\u8fde\u51fa\u6765\u7684\u6240\u6709\u8fb9\uff0c$(u->m)$\u662f\u7b2c\u4e00\u4e2a\u8d70\u7684\uff0c\u5bf9\u4e8e$m$\u8fde\u51fa\u6765\u7684\u6240\u6709\u8fb9\uff0c$(m->v)$\u7d27\u63a5\u7740$(u->m)$\u8d70\uff0c\u5bf9\u4e8e$v$\u8fde\u51fa\u6765\u7684\u8fb9\uff0c$(m->v)$\u662f\u6700\u540e\u8d70\u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9650\u5236\u90fd\u662f\u72ec\u7acb\u7684\u3002\u6211\u4eec\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u83ca\u82b1\u56fe\u90a3\u6837\u7684\u5e76\u67e5\u96c6\u914d\u5408\u94fe\u8868\u7ef4\u62a4\uff0c\u7136\u540e\u4e0d\u518d\u679a\u4e3e\u6bcf\u4e2a\u70b9\u7684\u843d\u70b9\uff0c\u800c\u662f\u5bf9\u6bcf\u4e2a\u70b9dfs,\u770b\u4ed6\u80fd\u6269\u5c55\u5230\u54ea\u4e9b\u70b9\uff0c\u4e4b\u540e\u627e\u4e00\u4e2a\u7f16\u53f7\u6700\u5c0f\u7684\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2\\alpha(n))$\u3002\n\n\u8fd9\u9053\u9898\u9664\u4e86\u7ec6\u8282\u7279\u522b\u591a\u591a\u591a\u591a\u591a\u591a\u591a\u591a\u591a\u591a\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u7279\u522b\u6076\u5fc3\u7684\u5730\u65b9\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 2020;\nvector<int> E[maxn];\nint T,n;\nint pos[maxn];\nint L[maxn][maxn],R[maxn][maxn],pre[maxn],ans[maxn],num[maxn];\nbool vis[maxn];\nbool nt[maxn][maxn];\nint fst[maxn],lst[maxn];\nint fa[maxn][maxn];\nint siz[maxn][maxn];\nset<pair<int,int> > S;\nint find(int pos ,int x) {\n\treturn fa[pos][x]==x ? x: fa[pos][x] = find(pos,fa[pos][x]) ;\n}\nvoid dfs(int u,int f) {\n\tfor(auto nx : E[u]) if(nx!=f) \n\t\tpre[nx]=u;\n\tif(f==0) {\n\t\tfor(auto nx : E[u]) {\n\t\t\tif(lst[nx]) continue;\n\t\t\t//if(num[u]!=0 && lst[u] == nx) continue;\n\t\t\tif(L[u][nx] != nx) continue;\n\t\t\t//if(S.count(make_pair(u,nx))) continue;\n\t\t\tif(find(nx,fst[nx]) == find(nx,u)) {\n\t\t\t\tif(siz[nx][find(nx,fst[nx])] != E[nx].size() ) continue;\n\t\t\t}\n\t\t\tif(find(u,lst[u]) ==find(u,nx)) {\n\t\t\t\tif(siz[u][find(u,lst[u])] != E[u].size()) continue;\n\t\t\t}\n\t\t\tif(R[nx][u] == u) \n\t\t\t\tvis[nx]=1;\n\t\t}\n\t}\n\telse {\n\t\tfor(auto nx : E[u]) {\n\t\t\tif(nx==f) continue;\n\t\t\tif(lst[nx]) continue;\n\t\t\t//if(num[u] - (nt[u][f]^1) != 0 && lst[u] == nx) continue;\n\t\t\t//if(S.count(make_pair(u,nx))) continue;\n\t\t\tif((R[u][f] == nx && L[u][nx] == f) || (R[u][f] == f && L[u][nx] == nx && find(u,f) != find(u,nx) )) {\n\t\t\t\tif(find(nx,fst[nx]) == find(nx,u)) {\n\t\t\t\t\tif(siz[nx][find(nx,fst[nx])] != E[nx].size() ) continue;\n\t\t\t\t}\n\t\t\t\tif(find(u,nx) == find(u,lst[u])) {\n\t\t\t\t\tif(find(u,f) == find(u,fst[u])) {\n\t\t\t\t\t\tif(siz[u][find(u,f)] + siz[u][find(u,nx)] != E[u].size()) continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(find(u,nx) == find(u,fst[u])) {\n\t\t\t\t\tif(find(u,f) == find(u,lst[u])) {\n\t\t\t\t\t\tif(siz[u][find(u,f)] + siz[u][find(u,nx)] != E[u].size()) continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(R[nx][u] == u ) {\n\t\t\t\t\tvis[nx]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(f==0) {\n\t\tfor(auto nx : E[u]) {\n\t\t\t//if(S.count(make_pair(u,nx))) continue;\n\t\t\t//if(L[u][nx] == nx ) {\n\t\t\t\tif(find(u,nx) == find(u,lst[u])) {\n\t\t\t\t\tif(siz[u][find(u,lst[u])] != E[u].size()) continue;\n\t\t\t\t}\n\t\t\t\tdfs(nx,u);\n\t\t\t//}\n\t\t}\n\t}\n\telse {\n\t\tif(lst[u] != f) \n\t\t\tfor(auto nx : E[u]) {\n\t\t\t\tif(nx==f) continue;\n\t\t\t\t//if(S.count(make_pair(u,nx))) continue;\n\t\t\t\tif(((R[u][f] == f && find(u,f) != find(u,nx) )|| R[u][f] == nx) && ((L[u][nx] == nx && find(u,nx) != find(u,f) )|| L[u][nx] == f)) {\n\t\t\t\t\tif(find(u,f) == find(u,lst[u])) {\n\t\t\t\t\t\tif(find(u,nx) == find(u,fst[u]) ) \n\t\t\t\t\t\t\tif(siz[u][find(u,nx)] + siz[u][find(u,f)] != E[u].size()) continue;\n\t\t\t\t\t}\n\t\t\t\t\tif(find(u,f) == find(u,fst[u])) {\n\t\t\t\t\t\tif(find(u,nx) == find(u,lst[u]) ) \n\t\t\t\t\t\t\tif(siz[u][find(u,nx)] + siz[u][find(u,f)] != E[u].size()) continue;\n\t\t\t\t\t}\n\t\t\t\t\tdfs(nx,u);\n\t\t\t\t}\n\t\t\t}\n\t}\n}\n\nvoid doChange(int cur,int goal) {\n\tlst[goal] = pre[goal];\n\tif(!nt[goal][pre[goal]] ) --num[goal],nt[goal][pre[goal]]=1;\n\tR[goal][pre[goal]] = -1;\n\t//S.insert(make_pair(pre[goal],goal));\n\tint nxt = goal;\n\tgoal = pre[goal];\n\twhile(goal != cur) {\n\t\tif(!nt[goal][pre[goal]]) --num[goal],nt[goal][pre[goal]]=1;\n\t\tR[goal][pre[goal]] = nxt;\n\t\tif(!nt[goal][nxt]) --num[goal],nt[goal][nxt]=1;\n\t\tL[goal][nxt] = pre[goal];\n\t\tint p = find(goal,pre[goal]);\n\t\tint q = find(goal,nxt);\n\t\tif(p!=q) {\n\t\t\tif(siz[goal][p]  > siz[goal][q] ) swap(p,q);\n\t\t\tfa[goal][p]=q;\n\t\t\tsiz[goal][q] += siz[goal][p];\n\t\t}\n\t\t//S.insert(make_pair(goal,nxt));\n\t\tnxt = goal;\n\t\tgoal = pre[goal];\n\t}\n\tfst[cur] = nxt;\n\tif(!nt[cur][nxt]) --num[cur],nt[cur][nxt]=1;\n\tL[cur][nxt]=-1;\n\t//S.insert(make_pair(cur,nxt));\n}\nint main() {\n\t//#ifdef ONLINE_JUDGE\n\t//freopen(\"tree.in\",\"r\",stdin);\n\t//freopen(\"tree.out\",\"w\",stdout);\n\t//#endif\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\t//S.clear();\n\t\tmemset(siz,0,sizeof siz);\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;++i) scanf(\"%d\",pos+i);\n\t\tfor(int i=1;i<=n;++i) E[i].clear(),fst[i]=lst[i]=ans[i]=0;\n\t\tfor(int i=1;i<=n;++i) \n\t\t\tfor(int j=1;j<=n;++j) \n\t\t\t\tL[i][j]=j,R[i][j]=j,fa[i][j]=j,nt[i][j]=0,siz[i][j]=1;\n\t\tfor(int i=1;i<=n;++i) assert(E[i].size()==0);\n\t\tfor(int i=1;i<n;++i) {\n\t\t\tint u,v;\n\t\t\tassert(scanf(\"%d%d\",&u,&v)==2);\n\t\t\tassert(u!=v);\n\t\t\tE[u].push_back(v);\n\t\t\tE[v].push_back(u);\n\t\t}\n\t\tfor(int i=1;i<=n;++i) num[i]=E[i].size();\n\t\tfor(int i=1;i<=n;++i) {\n\t\t\tint cur = pos[i];\n\t\t\tfor(int j=1;j<=n;++j) vis[j]=pre[j]=0;\n\t\t\tdfs(cur,0);\n\t\t\tfor(int j=1;j<=n;++j) {\n\t\t\t\tif(vis[j]) {\n\t\t\t\t\tans[i]=j;\n\t\t\t\t\tdoChange(cur,j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;++i) printf(\"%d \",ans[i]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1574093053,
        "uid": 64618,
        "name": "\u6587\u6587\u6bbf\u4e0b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "## Part 0\n\n>\u5927\u81f4\u601d\u8def\n\n\u4e3b\u8981\u7684\u601d\u8def\u5c31\u662f\u9010\u4e2a\u6253\u7834\uff0c\u7814\u7a76\u7279\u6b8a\u7684\u6570\u636e\u5f97\u5230\u666e\u901a\u7684\u7ed3\u8bba\u3002\n\n(\u554a\u5bf9\u4e86\u535a\u5ba2\u98df\u7528\u4f53\u9a8c\u66f4\u4f73\uff1a[Click Here](https://www.orchid-any.cf/2020/03/15/SOL-P5659/)\n\n## Part 1\n\n>\u66b4\u529b\u7684\u90e8\u5206\u5206\n\n\u66b4\u529b\u7684\u90e8\u5206\u5206\u5f88\u597d\u62ff\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u5168\u6392\u5217\uff0c\u7136\u540e $\\Theta(n)$ \u5224\u65ad\u66f4\u65b0\u7b54\u6848\u3002\n\n~~\u606d\u559c\u60a8\u62ff\u5230\u8d5b\u573a\u6ee1\u5206~~\n\n```cpp\nnamespace SubtaskForce {\n\tint cmp[MAXN], ans[MAXN];\n\tbool vis[MAXN];\n\tvoid dfs(int now) { // \u5168\u6392\u5217\n\t\tif (now == n) { // \u66f4\u65b0\u7b54\u6848\n\t\t\tfor (R int i = 1; i <= n; ++i) cmp[id[i]] = i;\n\t\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\t\tif (cmp[i] < ans[i]) {\n\t\t\t\t\tfor (R int j = 1; j <= n; ++j) ans[j] = cmp[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cmp[i] > ans[i]) break;\n\t\t\t}\n\t\t\treturn ;\n\t\t}\n\t\tfor (R int i = 1; i < n; ++i) {\n\t\t\tif (!vis[i]) {\n\t\t\t\tvis[i] = 1;\n\t\t\t\tswap(id[nodes[i].x], id[nodes[i].y]);\n\t\t\t\tdfs(now + 1);\n\t\t\t\tswap(id[nodes[i].x], id[nodes[i].y]);\n\t\t\t\tvis[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid main() { // \u521d\u59cb\u5316\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) ans[i] = n - i + 1;\n\t\tdfs(1);\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n\n## Part 2\n\n>\u83ca\u82b1\u56fe\u7684\u90e8\u5206\u5206\n\n\u5c31\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u83ca\u82b1\u56fe\u5176\u5b9e\u662f\u6bd4\u94fe\u7684\u6570\u636e\u597d\u60f3\u4e00\u4e9b\u7684\u3002\n\n\u6211\u4eec\u79f0\u83ca\u82b1\u56fe\u4e2d\u5ea6\u6570\u4e3a $n-1$ \u7684\u7ed3\u70b9\u4e3a $rt$ \u7f62\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u83ca\u82b1\u56fe\u4e0a\u5220\u9664\u8fb9\u4e00\u5b9a\u662f\u67d0\u4e2a\u7ed3\u70b9\u548c $rt$ \u4e4b\u95f4\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u65e0\u8bba\u6211\u4eec\u6309\u600e\u6837\u7684\u987a\u5e8f\u5220\u8fb9\uff0c\u6700\u540e\u90fd\u4f1a\u53d8\u6210\u4e00\u4e2a\u73af\u3002\n\n\u6211\u505a\u4e86\u4e00\u4e2a\u52a8\u56fe\u6f14\u793a\uff0c\u5982\u679c\u6d1b\u8c37\u535a\u5ba2\u4e0d\u652f\u6301gif\u7684\u8bdd\u5c31\u76f4\u63a5\u5230\u8fd9\u4e2a\u7f51\u5740 [Click Here](https://i.loli.net/2020/03/15/fuU4CgWReOT8X2d.gif)\n\n![point.gif](https://i.loli.net/2020/03/15/fuU4CgWReOT8X2d.gif)\n\n\u6709\u4e86\u73af\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u5c31\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u8d2a\u5fc3\u6784\u9020\u73af\u7684\u65b9\u6cd5\uff1a\n\n\u6309\u7167 $1,2,\\cdots,n$ \u7684\u987a\u5e8f\u6bcf\u4e2a\u6570\u5b57\u9009\u62e9\u73af\u4e0a\u81ea\u5df1\u7684\u4e0b\u4e00\u4e2a\u70b9\u3002\n\n\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8fd8\u9700\u8981\u6ce8\u610f\u8fd8\u6ca1\u6709\u8fde\u5230 $Y_{n}$ \u5c31\u63d0\u524d~~\u81ea\u6bd9~~~~\u81ea\u95ed~~\u5c01\u95ed\u7684\u60c5\u51b5\u3002\n\n```cpp\nnamespace SubtaskAss { // \u83ca\u82b1\u7684\u5355\u8bcd\u592a\u957f\u4e86\uff0c\u5c31\u53d6\u4e86\u4e2a\u5dee\u4e0d\u591a\u7684/xyx\n\tbool vis[MAXN];\n\tint ans[MAXN];\n\tstruct UninoFindSet {\n\t\tint fa[MAXN];\n\n\t\tvoid init(int limit) {\n\t\t\tfor (R int i = 1; i <= limit; ++i)\n\t\t\t\tfa[i] = i;\n\t\t}\n\n\t\tint find(int x) {\n\t\t\tif (x ^ fa[x]) fa[x] = find(fa[x]);\n\t\t\treturn fa[x];\n\t\t}\n\n\t\tvoid merge(int x, int y) {\n\t\t\tx = find(x);\n\t\t\ty = find(y);\n\t\t\tif (x ^ y) fa[x] = y;\n\t\t}\n\t} ufs;\n\n\tvoid main() {\n\t\tufs.init(n);\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tfor (R int j = 1; j <= n; ++j) {\n\t\t\t\tif (!vis[j] && (i == n || ufs.find(j) != ufs.find(id[i]))) {\n\t\t\t\t\tvis[j] = 1;\n\t\t\t\t\tans[i] = j;\n\t\t\t\t\tufs.merge(j, id[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n\n## part 3\n\n>\u94fe\u7684\u90e8\u5206\u5206\n\n\u8bf4\u5b9e\u8bdd\u94fe\u7684\u90e8\u5206\u5206\u5176\u5b9e\u4e5f\u633a\u597d\u62ff\u7684\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u83ca\u82b1\u56fe\u96be\u60f3\u4e00\u4e9b\u3002\n\n\u9996\u5148\uff0c\u7528dfs\u5e8f\u628a\u94fe\u62cd\u6210\u6811\u662f\u56fa\u5b9a\u64cd\u4f5c\u4e86\u3002\n\n\u94fe\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f\u6bcf\u4e2a\u7ed3\u70b9(\u4e24\u7aef\u70b9\u9664\u5916)\u7684\u5ea6\u6570\u90fd\u6709\u4e14\u53ea\u6709\u4e8c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u9664\u7aef\u70b9\u5916\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e24\u6761\u8fb9\u3002\u800c\u4e14\u8fd9\u4e24\u6761\u8fb9\u7684\u88ab\u5220\u9664\u65f6\u95f4\u4e00\u5b9a\u4e0d\u4e00\u6837\uff08\u5e9f\u8bdd\n\n\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u6761\u8fb9\u88ab\u5220\u9664\u7684\u60c5\u51b5\u4e00\u5171\u6709\u4e09\u79cd\u3002\n\n\u6211\u4eec\u5b9a\u4e49 $order_{i}$ \u4e3a\u7ed3\u70b9 $i$ \u7684\u5de6\u53f3\u4e24\u8fb9\u7684\u5220\u9664\u60c5\u51b5\uff1a\n\n- 0\uff1a0\u8868\u793a\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u8fb9\u90fd\u8fd8\u6ca1\u88ab\u5220\u9664\n- 1\uff1a1\u8868\u793a\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de6\u8fb9\u5148\u88ab\u5220\u9664\n- 2\uff1a2\u8868\u793a\u8fd9\u4e2a\u7ed3\u70b9\u7684\u53f3\u8fb9\u5148\u88ab\u5220\u9664\n\n\u73b0\u5728\u6211\u4eec\u5047\u8bbe\u5de6\u8fb9\u7684\u7ed3\u70b9 $u$ \u8981\u8dd1\u5230\u53f3\u8fb9\u7684\u7ed3\u70b9 $v$ \u90a3\u91cc\u53bb\uff0c\u90a3\u4e48\u5728 $u$ \u548c $v$ \u4e4b\u95f4\u7684\u7ed3\u70b9\u4e00\u5b9a\u662f\u5de6\u8fb9\u5148\u88ab\u5220\u9664\uff0c\u6240\u4ee5 $order_i=1,i\\in (u,v)$\n\n\u5bf9\u4e8e $u$ \u548c $v$ \u4e24\u4e2a\u7ed3\u70b9\uff0c\u4e00\u5b9a\u662f\u53f3\u8fb9\u5148\u88ab\u5220\u9664\uff0c\u5426\u5219\u5c31\u4e0d\u77e5\u9053\u8dd1\u54ea\u91cc\u53bb\u4e86\n\n\u6240\u4ee5 $order_{u}=order_{v}=2$\n\n\u81f3\u4e8e\u4ece\u53f3\u8dd1\u5230\u5de6\u5c31\u5b8c\u5168\u540c\u7406\u4e86\u3002\n\n\u7b54\u6848\u5219\u540c\u6837\u662f\u4ece\u5c0f\u679a\u4e3e\u5230\u5927(\u6211\u662f\u4ece\u5c0f\u679a\u4e3e\u5230\u5927\u7684/xyx)\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u5f53\u524d\u679a\u4e3e\u5230\u4e86\u7ed3\u70b9 $x$\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u80fd\u53bb\u5c3d\u91cf\u5c0f\u7684\u4e00\u4e2a\u70b9\n\n\u5047\u8bbe\u5f53\u524d $x$ \u5728 $P_{x}$\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u4e00\u4e2a $P_{y}$\u3002\n\n\u5224\u65ad\u4e00\u4e2a\u65b9\u6848\u662f\u5426\u53ef\u884c\u53ea\u9700\u8981\u5224\u65ad\u5b83\u4e0e\u524d\u9762\u7684\u5220\u8fb9\u987a\u5e8f\u51b2\u7a81\u5373\u53ef\u3002\n\n\u8fd9\u6837\u505a\u662f $\\Theta(N^3)$ \u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5728dfs\u7684\u65f6\u5019\u6807\u8bb0\uff0c\u8fd9\u6837\u5c31\u662f $\\Theta(n^2)$ \u4e86\u3002\n\n```cpp\nnamespace SubtaskChain {\n\tint rnk[MAXN], ans[MAXN], dfn[MAXN];\n\tint sbc_tot, order[MAXN], vis[MAXN];\n\n\tvoid dfs(int x, int fa) {\n\t\trnk[dfn[x] = ++sbc_tot] = x;\n\t\tfor (R int i = head[x]; i; i = nxt[i])\n\t\t\tif (to[i] ^ fa) dfs(to[i], x);\n\t}\n\n\tvoid mark_node(int p1, int p2, int tg) {\n\t\tif (p1 != 1 && p1 != n) order[p1] = tg + 1;\n\t\tif (p2 != 1 && p2 != n) order[p2] = tg + 1;\n\t\tfor (R int i = (tg ? p1 + 1 : p2 + 1); i < (tg ? p2 : p1); ++i) order[i] = ((tg ^ 1) + 1);\n\t}\n\n\tint iterate(int x, int tg) {\n\t\tint res = n + 1;\n\t\tif (order[dfn[x]] == tg + 1) return res;\n\t\tfor (R int i = dfn[x] + (tg ? -1 : 1); tg ? (i >= 1) : (i <= n); i += (tg ? -1 : 1)) {\n\t\t\tif (order[i] == (tg ^ 1) + 1) {\n\t\t\t\tif (!vis[i]) res = min(res, rnk[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!order[i] && !vis[i]) res = min(res, rnk[i]);\n\t\t}\n\t\treturn res;\n\t}\n    int inver_id[MAXN];\n\tvoid main() {\n\t\tfor (R int i = 1; i <= n; ++i) rnk[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) dfn[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) order[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) inver_id[id[i]] = i;\n\t\tsbc_tot = 0;\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tif (in[i] == 1) {\n\t\t\t\tdfs(i, 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tint left = iterate(inver_id[i], 1);\n\t\t\tint right = iterate(inver_id[i], 0);\n\t\t\tif (left < right) mark_node(dfn[inver_id[i]], dfn[left], 0);\n\t\t\telse left = right, mark_node(dfn[inver_id[i]], dfn[left], 1);\n\t\t\tans[i] = left;\n\t\t\tvis[dfn[left]] = 1;\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n\n## Part 4\n\n>\u6b63\u89e3\n\n~~\u62fc\u51d1\u51fa\u7684\u6b63\u89e3~~\n\n\uff08\u6211\u80fd\u8bf4\u8fd9\u5269\u4e0b\u768440pts\u6211\u770b\u9898\u89e3\u90fd\u770b\u4e86\u534a\u5929\u5417\uff09\n\n\u5269\u4e0b\u768440pts\u662f\u6211\u770b\u4e86\u8fd9\u7bc7\u9898\u89e3\u624d\u4f1a\u7684[Click Here](https://www.luogu.com.cn/blog/wucstdio/solution-p5659)\n\n\u5176\u5b9e\u4f1a\u4e86\u94fe\u7684\u6570\u636e\u57fa\u672c\u5c31\u79bb\u6210\u529f\u4e0d\u8fdc\u4e86\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u5728\u5904\u7406\u94fe\u7684\u65f6\u5019\uff0c\u89c4\u5b9a\u4e86\u4e0e\u4e00\u4e2a\u7ed3\u70b9\u7684\u8fb9\u7684\u5220\u9664\u987a\u5e8f\u7684\u6570\u503c\u3002\n\n\u5982\u679c\u653e\u5230\u4e00\u822c\u7684\u60c5\u51b5\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u62d3\u6251\u5e8f\u7684\u5220\u9664\u987a\u5e8f\uff0c\u5373\u67d0\u4e00\u6761\u8fb9\u9700\u8981\u5728\u67d0\u4e00\u6761\u8fb9\u5220\u9664\u8fc7\u540e\u624d\u80fd\u88ab\u5220\u9664\u3002\n\n\u6bd4\u5982\u4e0b\u56fe\uff1a\n\n![889V74.jpg](https://s1.ax1x.com/2020/03/15/889V74.jpg)\n\n\u5f53\u6211\u4eec\u628a\u8fd9\u4e00\u5220\u9664\u987a\u5e8f\u5199\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5176\u5b9e\u6784\u6210\u4e86\u4e00\u4e2a\u94fe\u3002\n\n\u5bf9\u5427\uff01\u5bf9\u5427\uff01\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u9700\u8981\u628a $x$ \u5220\u5230 $y$ \u7ed3\u70b9\u4e0a\u3002\n\n\u90a3\u4e48\u5224\u65ad\u6cd5\u5219\u5982\u4e0b\uff1a\n\n#### \u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff1a\n\n- \u6709\u4e00\u4e2a\u6570\u5df2\u7ecf\u4ece $x$ \u51fa\u53bb\u8fc7\u4e86\n- \u6709\u4e00\u4e2a\u6570\u5df2\u7ecf\u5230\u8fc7 $y$ \u8fd9\u91cc\u4e86\n- \u6709\u4e00\u4e2a\u6570\u4ece\u76f8\u540c\u65b9\u5411\u8fc7\u4e86 $x$ \u7684\u4e00\u6761\u51fa\u8fb9\n- \u6709\u4e00\u4e2a\u6570\u4ece\u76f8\u540c\u65b9\u5411\u8fc7\u4e86 $y$ \u7684\u4e00\u6761\u51fa\u8fb9\n- \u51fa/\u5165\u8fb9\u4efb\u610f\u4e00\u6761\u88ab\u522b\u7684\u6570\u5b57\u4ece\u76f8\u540c\u65b9\u5411\u8d70\u4e86\u4e00\u6b21\n- \u52a0\u4e0a\u5f53\u524d\u6570\u6784\u6210\u7684\u94fe $x$ \u6709\u4efb\u610f\u4e00\u8fb9\u51fa\u8fb9\u4e0d\u5728\u4e0a\u9762\n- \u52a0\u4e0a\u5f53\u524d\u6570\u6784\u6210\u7684\u94fe $y$ \u6709\u4efb\u610f\u4e00\u8fb9\u51fa\u8fb9\u4e0d\u5728\u4e0a\u9762\n- \u52a0\u4e0a\u5f53\u524d\u6570\u540e\uff0c\u7ecf\u8fc7 $x$ \u7684\u6570\u5b57\u81ea\u95ed\u4e86(\u5f62\u6210\u4e86\u4e00\u4e2a\u73af)\n- \u52a0\u4e0a\u5f53\u524d\u6570\u540e\uff0c\u5f62\u6210\u4e86\u4e00\u6761\u94fe\uff0c$x$ \u6709\u4efb\u610f\u4e00\u6761\u51fa\u8fb9\u4e0d\u5728\u4e0a\u9762\n\n#### \u5408\u6cd5\u7684\u60c5\u51b5\n\n- \u6392\u9664\u4ee5\u4e0a\u6240\u6709\u60c5\u51b5\u5373\u5408\u6cd5\n\n\u76f4\u63a5\u8d2a\u5fc3\u4f1a\u6b7b\u5f97\u5f88\u60e8\u70c8\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7dfs\u627e\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u4f5c\u4e3a\u672c\u8f6e\u7684\u7b54\u6848\u3002\n\n```cpp\nnamespace SubtaskRandom {\n\tint mark[MAXN][MAXN], inver_id[MAXN];\n\tint lave_unwalked[MAXN], fa[MAXN];\n\tint lave_in[MAXN], lave_out[MAXN];\n\tint node_from[MAXN], node_to[MAXN];\n\tint header[MAXN][MAXN], footer[MAXN][MAXN];\n\tbool vis[MAXN];\n\n\tvoid dfs(int x, int rt) {\n\t\tfor (R int i = head[x]; i; i = nxt[i]) {\n\t\t\tint y = to[i];\n\t\t\tif (y ^ fa[x]) {\n\t\t\t\tfa[y] = x;\n\t\t\t\tvis[y] = 1;\n\t\t\t\tif (x ^ rt) {\n\t\t\t\t\tif (mark[x][y] == x || mark[fa[x]][x] == fa[x]) vis[y] = 0;\n\t\t\t\t\tif (mark[x][y] == 0 || mark[fa[x]][x] == 0) vis[y] = 0;\n\t\t\t\t\tif (header[x][fa[x]] == node_to[x] && footer[x][y] == node_from[x]\n\t\t\t\t\t\t&& lave_out[x] + lave_in[x] + (lave_unwalked[x] << 1) > 2) vis[y] = 0;\n\t\t\t\t\tif (footer[x][y] == fa[x]) vis[y] = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (mark[x][y] == x) vis[y] = 0;\n\t\t\t\t\tif (mark[x][y] == 0) vis[y] = 0;\n\t\t\t\t\tif (node_from[x]) {\n\t\t\t\t\t\tif (footer[x][y] == node_from[x] && lave_unwalked[x] + lave_in[x] + lave_out[x] != 1)\n\t\t\t\t\t\t\tvis[y] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvis[y] &= vis[x];\n\t\t\t\tdfs(y, rt);\n\t\t\t}\n\t\t}\n\t\tif (rt ^ x) {\n\t\t\tif (node_from[x]) vis[x] = 0;\n\t\t\tif (node_to[x]) {\n\t\t\t\tif (footer[x][node_to[x]] == fa[x] && lave_unwalked[x] + lave_in[x] + lave_out[x] != 1)\n\t\t\t\t\tvis[x] = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvis[x] = 0;\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tfor (R int i = 1; i <= n; ++i) node_from[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) node_to[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_in[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_out[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_unwalked[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) inver_id[id[i]] = i;\n\t\tfor (R int i = 1; i < n; ++i) {\n\t\t\tlave_unwalked[nodes[i].x]++;\n\t\t\tlave_unwalked[nodes[i].y]++;\n\t\t\tmark[nodes[i].x][nodes[i].y] = -1;\n\t\t\tmark[nodes[i].y][nodes[i].x] = -1;\n\t\t\theader[nodes[i].x][nodes[i].y] = nodes[i].y;\n\t\t\theader[nodes[i].y][nodes[i].x] = nodes[i].x;\n\t\t\tfooter[nodes[i].x][nodes[i].y] = nodes[i].y;\n\t\t\tfooter[nodes[i].y][nodes[i].x] = nodes[i].x;\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tfor (R int j = 1; j <= n; ++j) fa[j] = 0;\n\t\t\tvis[inver_id[i]] = 1;\n\t\t\tdfs(inver_id[i], inver_id[i]);\n\t\t\tint res = 0;\n\t\t\tfor (R int j = 1; j <= n; ++j) {\n\t\t\t\tif (vis[j]) {\n\t\t\t\t\tres = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d \", res);\n\t\t\tnode_from[res] = fa[res];\n\t\t\twhile (fa[res] ^ inver_id[i]) {\n\t\t\t\tif (~mark[fa[res]][res]) {\n\t\t\t\t\tmark[fa[res]][res] = mark[res][fa[res]] = 0;\n\t\t\t\t\tlave_in[res]--;\n\t\t\t\t\tlave_out[fa[res]]--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmark[fa[res]][res] = mark[res][fa[res]] = fa[res];\n\t\t\t\t\tlave_unwalked[res]--;\n\t\t\t\t\tlave_out[res]++;\n\t\t\t\t\tlave_unwalked[fa[res]]--;\n\t\t\t\t\tlave_in[fa[res]]++;\n\t\t\t\t}\n\t\t\t\tint t = res;\n\t\t\t\tres = fa[res];\n\t\t\t\theader[res][footer[res][t]] = header[res][fa[res]];\n\t\t\t\tfooter[res][header[res][fa[res]]] = footer[res][t];\n\t\t\t}\n\t\t\tif (~mark[fa[res]][res]) {\n\t\t\t\tmark[fa[res]][res] = 0;\n\t\t\t\tmark[res][fa[res]] = 0;\n\t\t\t\tlave_in[res]--;\n\t\t\t\tlave_out[inver_id[i]]--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmark[fa[res]][res] = fa[res];\n\t\t\t\tmark[res][fa[res]] = fa[res];\n\t\t\t\tlave_unwalked[res]--;\n\t\t\t\tlave_out[res]++;\n\t\t\t\tlave_unwalked[inver_id[i]]--;\n\t\t\t\tlave_in[inver_id[i]]++;\n\t\t\t}\n\t\t\tnode_to[inver_id[i]] = res;\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n#ifndef ONLINE_JUDGE\n#define gc() getchar()\n#else\n#define gc() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\n#endif\n#define is() (ch >= '0' && ch <= '9')\n#define R register\n\ntemplate < class Type >\nvoid read(Type& a) {\n\ta = 0; bool f = 0; char ch;\n\twhile (!(ch = gc(), is())) if (ch == '-') f = 1;\n\twhile (is()) a = (a << 3) + (a << 1) + (ch ^ '0'), ch = gc();\n\ta = (f ? -a : a);\n}\n\ntemplate < class Type, class... Args >\nvoid read(Type& t, Args&... args) {\n\tread(t), read(args...);\n}\n\nconst int MAXN = 2000 + 5;\nint T, n, max_in, id[MAXN];\nint head[MAXN], nxt[MAXN << 1];\nint tot, in[MAXN], to[MAXN << 1];\nstruct EdgeNode {\n\tint x, y;\n} nodes[MAXN];\n\nEdgeNode make_edge(int x, int y) {\n\tEdgeNode res;\n\tres.x = x;\n\tres.y = y;\n\treturn res;\n}\n\nvoid add(int x, int y) {\n\tto[++tot] = y;\n\tnxt[tot] = head[x];\n\thead[x] = tot;\n}\n\nnamespace SubtaskForce {\n\tint cmp[MAXN], ans[MAXN];\n\tbool vis[MAXN];\n\tvoid dfs(int now) {\n\t\tif (now == n) {\n\t\t\tfor (R int i = 1; i <= n; ++i) cmp[id[i]] = i;\n\t\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\t\tif (cmp[i] < ans[i]) {\n\t\t\t\t\tfor (R int j = 1; j <= n; ++j) ans[j] = cmp[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cmp[i] > ans[i]) break;\n\t\t\t}\n\t\t\treturn ;\n\t\t}\n\t\tfor (R int i = 1; i < n; ++i) {\n\t\t\tif (!vis[i]) {\n\t\t\t\tvis[i] = 1;\n\t\t\t\tswap(id[nodes[i].x], id[nodes[i].y]);\n\t\t\t\tdfs(now + 1);\n\t\t\t\tswap(id[nodes[i].x], id[nodes[i].y]);\n\t\t\t\tvis[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) ans[i] = n - i + 1;\n\t\tdfs(1);\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n\nnamespace SubtaskAss {\n\tbool vis[MAXN];\n\tint ans[MAXN];\n\tstruct UninoFindSet {\n\t\tint fa[MAXN];\n\n\t\tvoid init(int limit) {\n\t\t\tfor (R int i = 1; i <= limit; ++i)\n\t\t\t\tfa[i] = i;\n\t\t}\n\n\t\tint find(int x) {\n\t\t\tif (x ^ fa[x]) fa[x] = find(fa[x]);\n\t\t\treturn fa[x];\n\t\t}\n\n\t\tvoid merge(int x, int y) {\n\t\t\tx = find(x);\n\t\t\ty = find(y);\n\t\t\tif (x ^ y) fa[x] = y;\n\t\t}\n\t} ufs;\n\n\tvoid main() {\n\t\tufs.init(n);\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tfor (R int j = 1; j <= n; ++j) {\n\t\t\t\tif (!vis[j] && (i == n || ufs.find(j) != ufs.find(id[i]))) {\n\t\t\t\t\tvis[j] = 1;\n\t\t\t\t\tans[i] = j;\n\t\t\t\t\tufs.merge(j, id[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n\nnamespace SubtaskChain {\n\tint rnk[MAXN], ans[MAXN], dfn[MAXN];\n\tint sbc_tot, order[MAXN], vis[MAXN];\n\n\tvoid dfs(int x, int fa) {\n\t\trnk[dfn[x] = ++sbc_tot] = x;\n\t\tfor (R int i = head[x]; i; i = nxt[i])\n\t\t\tif (to[i] ^ fa) dfs(to[i], x);\n\t}\n\n\tvoid mark_node(int p1, int p2, int tg) {\n\t\tif (p1 != 1 && p1 != n) order[p1] = tg + 1;\n\t\tif (p2 != 1 && p2 != n) order[p2] = tg + 1;\n\t\tfor (R int i = (tg ? p1 + 1 : p2 + 1); i < (tg ? p2 : p1); ++i) order[i] = ((tg ^ 1) + 1);\n\t}\n\n\tint iterate(int x, int tg) {\n\t\tint res = n + 1;\n\t\tif (order[dfn[x]] == tg + 1) return res;\n\t\tfor (R int i = dfn[x] + (tg ? -1 : 1); tg ? (i >= 1) : (i <= n); i += (tg ? -1 : 1)) {\n\t\t\tif (order[i] == (tg ^ 1) + 1) {\n\t\t\t\tif (!vis[i]) res = min(res, rnk[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!order[i] && !vis[i]) res = min(res, rnk[i]);\n\t\t}\n\t\treturn res;\n\t}\n    int inver_id[MAXN];\n\tvoid main() {\n\t\tfor (R int i = 1; i <= n; ++i) rnk[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) dfn[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) vis[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) order[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) inver_id[id[i]] = i;\n\t\tsbc_tot = 0;\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tif (in[i] == 1) {\n\t\t\t\tdfs(i, 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tint left = iterate(inver_id[i], 1);\n\t\t\tint right = iterate(inver_id[i], 0);\n\t\t\tif (left < right) mark_node(dfn[inver_id[i]], dfn[left], 0);\n\t\t\telse left = right, mark_node(dfn[inver_id[i]], dfn[left], 1);\n\t\t\tans[i] = left;\n\t\t\tvis[dfn[left]] = 1;\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) printf(\"%d \", ans[i]);\n\t\tputs(\"\");\n\t}\n}\n\nnamespace SubtaskRandom {\n\tint mark[MAXN][MAXN], inver_id[MAXN];\n\tint lave_unwalked[MAXN], fa[MAXN];\n\tint lave_in[MAXN], lave_out[MAXN];\n\tint node_from[MAXN], node_to[MAXN];\n\tint header[MAXN][MAXN], footer[MAXN][MAXN];\n\tbool vis[MAXN];\n\n\tvoid dfs(int x, int rt) {\n\t\tfor (R int i = head[x]; i; i = nxt[i]) {\n\t\t\tint y = to[i];\n\t\t\tif (y ^ fa[x]) {\n\t\t\t\tfa[y] = x;\n\t\t\t\tvis[y] = 1;\n\t\t\t\tif (x ^ rt) {\n\t\t\t\t\tif (mark[x][y] == x || mark[fa[x]][x] == fa[x]) vis[y] = 0;\n\t\t\t\t\tif (mark[x][y] == 0 || mark[fa[x]][x] == 0) vis[y] = 0;\n\t\t\t\t\tif (header[x][fa[x]] == node_to[x] && footer[x][y] == node_from[x]\n\t\t\t\t\t\t&& lave_out[x] + lave_in[x] + (lave_unwalked[x] << 1) > 2) vis[y] = 0;\n\t\t\t\t\tif (footer[x][y] == fa[x]) vis[y] = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (mark[x][y] == x) vis[y] = 0;\n\t\t\t\t\tif (mark[x][y] == 0) vis[y] = 0;\n\t\t\t\t\tif (node_from[x]) {\n\t\t\t\t\t\tif (footer[x][y] == node_from[x] && lave_unwalked[x] + lave_in[x] + lave_out[x] != 1)\n\t\t\t\t\t\t\tvis[y] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvis[y] &= vis[x];\n\t\t\t\tdfs(y, rt);\n\t\t\t}\n\t\t}\n\t\tif (rt ^ x) {\n\t\t\tif (node_from[x]) vis[x] = 0;\n\t\t\tif (node_to[x]) {\n\t\t\t\tif (footer[x][node_to[x]] == fa[x] && lave_unwalked[x] + lave_in[x] + lave_out[x] != 1)\n\t\t\t\t\tvis[x] = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvis[x] = 0;\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tfor (R int i = 1; i <= n; ++i) node_from[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) node_to[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_in[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_out[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) lave_unwalked[i] = 0;\n\t\tfor (R int i = 1; i <= n; ++i) inver_id[id[i]] = i;\n\t\tfor (R int i = 1; i < n; ++i) {\n\t\t\tlave_unwalked[nodes[i].x]++;\n\t\t\tlave_unwalked[nodes[i].y]++;\n\t\t\tmark[nodes[i].x][nodes[i].y] = -1;\n\t\t\tmark[nodes[i].y][nodes[i].x] = -1;\n\t\t\theader[nodes[i].x][nodes[i].y] = nodes[i].y;\n\t\t\theader[nodes[i].y][nodes[i].x] = nodes[i].x;\n\t\t\tfooter[nodes[i].x][nodes[i].y] = nodes[i].y;\n\t\t\tfooter[nodes[i].y][nodes[i].x] = nodes[i].x;\n\t\t}\n\t\tfor (R int i = 1; i <= n; ++i) {\n\t\t\tfor (R int j = 1; j <= n; ++j) fa[j] = 0;\n\t\t\tvis[inver_id[i]] = 1;\n\t\t\tdfs(inver_id[i], inver_id[i]);\n\t\t\tint res = 0;\n\t\t\tfor (R int j = 1; j <= n; ++j) {\n\t\t\t\tif (vis[j]) {\n\t\t\t\t\tres = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d \", res);\n\t\t\tnode_from[res] = fa[res];\n\t\t\twhile (fa[res] ^ inver_id[i]) {\n\t\t\t\tif (~mark[fa[res]][res]) {\n\t\t\t\t\tmark[fa[res]][res] = mark[res][fa[res]] = 0;\n\t\t\t\t\tlave_in[res]--;\n\t\t\t\t\tlave_out[fa[res]]--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmark[fa[res]][res] = mark[res][fa[res]] = fa[res];\n\t\t\t\t\tlave_unwalked[res]--;\n\t\t\t\t\tlave_out[res]++;\n\t\t\t\t\tlave_unwalked[fa[res]]--;\n\t\t\t\t\tlave_in[fa[res]]++;\n\t\t\t\t}\n\t\t\t\tint t = res;\n\t\t\t\tres = fa[res];\n\t\t\t\theader[res][footer[res][t]] = header[res][fa[res]];\n\t\t\t\tfooter[res][header[res][fa[res]]] = footer[res][t];\n\t\t\t}\n\t\t\tif (~mark[fa[res]][res]) {\n\t\t\t\tmark[fa[res]][res] = 0;\n\t\t\t\tmark[res][fa[res]] = 0;\n\t\t\t\tlave_in[res]--;\n\t\t\t\tlave_out[inver_id[i]]--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmark[fa[res]][res] = fa[res];\n\t\t\t\tmark[res][fa[res]] = fa[res];\n\t\t\t\tlave_unwalked[res]--;\n\t\t\t\tlave_out[res]++;\n\t\t\t\tlave_unwalked[inver_id[i]]--;\n\t\t\t\tlave_in[inver_id[i]]++;\n\t\t\t}\n\t\t\tnode_to[inver_id[i]] = res;\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n\nsigned main() {\n\tfor (read(T); T; --T) {\n\t\tread(n);\n\t\tfor (R int i = 1, x; i <= n; ++i) read(x), id[x] = i;\n\t\tfor (R int i = 1; i <= n; ++i) head[i] = in[i] = 0;\n\t\ttot = 0, max_in = 0;\n\t\tfor (R int i = 1; i < n; ++i) {\n\t\t\tint x, y;\n\t\t\tread(x, y);\n\t\t\tadd(x, y);\n\t\t\tadd(y, x);\n\t\t\t++in[x], ++in[y];\n\t\t\tnodes[i] = make_edge(x, y);\n\t\t\tmax_in = max(max_in, max(in[x], in[y]));\n\t\t}\n\t\tif (n <= 10) SubtaskForce::main();\n\t\telse if (max_in == n - 1) SubtaskAss::main();\n\t\telse if (max_in == 2) SubtaskChain::main();\n\t\telse SubtaskRandom::main();\n\t}\n}\n```",
        "postTime": 1584273829,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "### $\\text{D1T3}$ \u6811\u4e0a\u7684\u6570\n\n##### $\\text{Descripion}$\n\n\u7ed9\u5b9a\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u6811\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e9b\u6570\u662f\u4e00\u4e2a $[1,n]$ \u7684\u5168\u6392\u5217\u3002\u4f60\u9700\u8981\u5220\u9664\u6240\u6709\u7684\u8fb9\uff0c\u6bcf\u6b21\u5220\u8fb9\u4f1a\u4ea4\u6362\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0a\u7684\u6570\u3002\u5220\u5b8c\u4e4b\u540e\uff0c\u6309\u7167\u70b9\u4e0a\u7684\u6570\u5347\u5e8f\u6392\u5217\uff0c\u4f7f\u5f97\u6700\u540e\u7f16\u53f7\u7ec4\u6210\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n##### $\\text{Solution}$ \n\n\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u6211\u4eec\u53ea\u4f1a\u5c3d\u91cf\u628a\u6700\u5c0f\u7684\u6570\u9001\u5230\u7f16\u53f7\u6700\u5c0f\u7684\u8282\u70b9\u3002\u95ee\u9898\u8f6c\u6362\u4e3a\uff0c\u5728\u6811\u4e2d\u627e\u5230\u4e00\u4e2a\u53ef\u884c\u7684\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u3002\u73b0\u5728\u6211\u4eec\u6765\u63a2\u8ba8\u5224\u65ad\u65b9\u6848\u662f\u5426\u53ef\u884c\u7684\u65b9\u6cd5\u3002\n\n\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53ea\u9700\u8003\u8651\u4e00\u4e2a\u70b9\u8fde\u51fa\u7684\u8fb9\u7684\u5220\u9664\u987a\u5e8f\u5373\u53ef\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6240\u8bf4\u7684\u5220\u8fb9\u5e8f\u5217\u6307\u7684\u662f\u67d0\u4e00\u70b9\u76f8\u90bb\u8fb9\u7684\u5220\u8fb9\u5e8f\u5217\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5220\u8fb9\u5e8f\u5217\u4e00\u5f00\u59cb\u5e76\u6ca1\u786e\u5b9a\uff0c\u662f\u901a\u8fc7\u4e4b\u540e\u53ef\u884c\u7684\u8fd0\u9001\u65b9\u6848\u6765\u9010\u6e10\u786e\u5b9a\u6bcf\u6761\u8fb9\u7684\u5148\u540e\u987a\u5e8f\u7684\u3002\u4f53\u73b0\u5728\u4e0b\u6587\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u7ef4\u62a4\u4e86\u6bcf\u4e00\u4e2a\u70b9\u7684\u82e5\u5e72\u4e2a\u5220\u8fb9\u5e8f\u5217\uff0c\u521d\u59cb\u6bcf\u4e2a\u70b9\u76f8\u90bb\u7684\u6bcf\u6761\u8fb9\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5220\u8fb9\u5e8f\u5217\uff0c\u6bcf\u6b21\u786e\u5b9a\u4e86\u53ef\u884c\u7684\u65b9\u6848\u540e\u5c06\u5220\u8fb9\u5e8f\u5217\u5408\u5e76\u3002\u6211\u4eec\u5206\u522b\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff1a\n\n- \u8fd9\u4e2a\u70b9\u662f\u4e2d\u95f4\u70b9\uff1a\n\n1. \u8fde\u5165\u8fd9\u4e2a\u70b9\u7684\u8fb9\u548c\u8fde\u51fa\u8fd9\u4e2a\u70b9\u7684\u8fb9\u5fc5\u987b\u5728\u5220\u8fb9\u5e8f\u5217\u4e2d\u662f\u76f8\u90bb\u7684\uff0c\u5426\u5219\u521a\u9001\u8fdb\u6765\u4e00\u4e2a\u6570\u5c31\u4f1a\u88ab\u9001\u5230\u5176\u5b83\u5730\u65b9\u3002\n\n2. \u5982\u679c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e24\u6761\u8fb9\u5c06\u7b2c\u4e00\u6761\u5220\u9664\u7684\u8fb9\u548c\u6700\u540e\u4e00\u6761\u5220\u9664\u7684\u8fb9\u8fde\u5728\u4e00\u8d77\uff0c\u82e5\u6b64\u65f6\u8fd8\u6709\u8fb9\u6ca1\u52a0\u5165\uff0c\u90a3\u4e48\u5b83\u65e0\u6cd5\u52a0\u5165\u5220\u8fb9\u5e8f\u5217\uff0c\u56e0\u4e3a\u6211\u4eec\u4fdd\u8bc1\u4e86\u5220\u8fb9\u5e8f\u5217\u5fc5\u987b\u662f\u7d27\u63a5\u7740\u5220\u9664\u7684\u3002\n\n- \u8fd9\u4e2a\u70b9\u662f\u8d77\u59cb\u70b9\uff1a\n\n1. \u5b83\u8fde\u51fa\u7684\u8fb9\u5fc5\u987b\u5728\u5220\u8fb9\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\uff0c\u5426\u5219\u5b83\u4f1a\u5148\u88ab\u9001\u5230\u5176\u5b83\u5730\u65b9\u3002\n2. \u5982\u679c\u6211\u4eec\u901a\u8fc7\u8fd9\u6761\u8fb9\u786e\u8ba4\u4e86\u5220\u8fb9\u5e8f\u5217\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u82e5\u6b64\u65f6\u5220\u8fb9\u5e8f\u5217\u7684\u6700\u540e\u4e00\u6761\u8fb9\u5df2\u786e\u5b9a\u4e14\u4e0e\u5220\u8fb9\u5e8f\u5217\u7684\u7b2c\u4e00\u6761\u8fb9\u540c\u5904\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684\u5220\u8fb9\u5e8f\u5217\u4e2d\uff0c\u90a3\u4e48\u82e5\u6709\u8fb9\u6ca1\u52a0\u5165\u5220\u8fb9\u5e8f\u5217\uff0c\u90a3\u4e48\u5b83\u65e0\u6cd5\u52a0\u5165\u5220\u8fb9\u5e8f\u5217\uff0c\u7406\u7531\u540c\u4e0a\u3002\n\n- \u8fd9\u4e2a\u70b9\u662f\u7ed3\u675f\u70b9\uff1a\n\n1. \u5b83\u8fde\u5165\u7684\u8fb9\u5fc5\u987b\u5728\u5220\u8fb9\u5e8f\u5217\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5426\u5219\u5b83\u6700\u540e\u4f1a\u88ab\u9001\u5230\u5176\u5b83\u5730\u65b9\u3002\n2. \u5982\u679c\u6211\u4eec\u901a\u8fc7\u8fd9\u6761\u8fb9\u786e\u8ba4\u4e86\u5220\u8fb9\u5e8f\u5217\u7684\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u82e5\u6b64\u65f6\u5220\u8fb9\u5e8f\u5217\u7684\u7b2c\u4e00\u6761\u8fb9\u5df2\u786e\u5b9a\u4e14\u4e0e\u5220\u8fb9\u5e8f\u5217\u7684\u6700\u540e\u4e00\u6761\u8fb9\u540c\u5904\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684\u5220\u8fb9\u5e8f\u5217\u4e2d\uff0c\u90a3\u4e48\u82e5\u6709\u8fb9\u6ca1\u52a0\u5165\u8fd9\u4e2a\u5220\u8fb9\u5e8f\u5217\uff0c\u90a3\u4e48\u5b83\u65e0\u6cd5\u52a0\u5165\u5220\u8fb9\u5e8f\u5217\uff0c\u7406\u7531\u540c\u4e0a\u3002\n\n\u5224\u65ad\u5c31\u8fd9\u4e48\u89e3\u51b3\u4e86\uff0c\u6211\u4eec\u6765\u8003\u8651\u66f4\u65b0\u3002\u6211\u4eec\u53ea\u9700\u5c06\u65b9\u6848\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6309\u5982\u4e0b\u65b9\u6cd5\u5904\u7406\uff1a\n\n- \u8fd9\u4e2a\u70b9\u662f\u4e2d\u95f4\u70b9\uff1a\u5c06\u8fd9\u4e2a\u70b9\u8fde\u51fa\u7684\u8fb9\u6240\u5728\u7684\u5220\u8fb9\u5e8f\u5217\u63a5\u5230\u8fde\u5165\u7684\u8fb9\u7684\u5220\u8fb9\u5e8f\u5217\u3002\n\n- \u8fd9\u4e2a\u70b9\u662f\u8d77\u59cb\u70b9\uff1a\u786e\u5b9a\u8fd9\u4e2a\u70b9\u7684\u6700\u7ec8\u5220\u8fb9\u5e8f\u5217\u7684\u7b2c\u4e00\u6761\u8fb9\u3002\n\n- \u8fd9\u4e2a\u70b9\u662f\u7ed3\u675f\u70b9\uff1a\u786e\u5b9a\u8fd9\u4e2a\u70b9\u7684\u6700\u7ec8\u5220\u8fb9\u5e8f\u5217\u7684\u6700\u540e\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\uff0c\u7ef4\u62a4\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u76f8\u90bb\u7684\u8fb9\u5f00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u8fd9\u6837\u4ee5\u4e0a\u64cd\u4f5c\u90fd\u662f $O(1)$ \u7684\u3002\u4f46\u662f\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e2a\u70b9\u8fdb\u884c\u5224\u65ad\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^3)$ \u7684\uff0c\u6211\u4eec\u8003\u8651\u4ee5\u5f53\u524d\u8d77\u59cb\u70b9\u4e3a\u6839\u8fdb\u884c $dfs$ \uff0c\u82e5\u4e00\u4e2a\u70b9\u4e0d\u6ee1\u8db3\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u5185\u7684\u70b9\u663e\u7136\u4e5f\u4e0d\u6ee1\u8db3\uff0c\u56de\u6eaf\u65f6\u5224\u65ad\u8be5\u70b9\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u7ed3\u675f\u70b9\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u53ef\u4ee5\u5f88\u597d\u7684\u5229\u7528\u4e4b\u524d\u7684\u4fe1\u606f\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n##### $\\text{Code}$\n\n```cpp\n#include<bits/stdc++.h>\n#define REG register\n#define MAXN 2005\nusing namespace std;\ninline int read(){\n    REG int x(0);\n    REG char c=getchar();\n    while(!isdigit(c)) c=getchar();\n    while(isdigit(c)) x=(x*10)+(c^48),c=getchar();\n    return x;\n}\n\nstruct Edge{\n    int v,nxt;\n}ed[MAXN<<1];\nint head[MAXN],cnt;\ninline void adde(int u,int v){\n    ed[++cnt]=(Edge){v,head[u]};\n    head[u]=cnt;\n}\ninline void add(int u,int v){adde(u,v),adde(v,u);}\n\nint T,n;\nint p[MAXN]; // \u8be5\u6570\u5b57\u5728\u54ea\u4e2a\u8282\u70b9\u4e0a\nint Len[MAXN][MAXN],Fir[MAXN][MAXN],Lst[MAXN][MAXN],Pre[MAXN][MAXN],Suf[MAXN][MAXN];\n// Len ( u , v ) => \u8fd9\u6761\u8fb9\u6240\u5728\u7684\u94fe\u8868\u957f\u5ea6\n// Fir ( u , v ) => \u8fd9\u6761\u8fb9\u6240\u5728\u7684\u94fe\u8868\u5f00\u5934\n// Lst ( u , v ) => \u8fd9\u6761\u8fb9\u6240\u5728\u7684\u94fe\u8868\u672b\u5c3e \n// Pre ( u , v ) => \u8fd9\u6761\u8fb9\u6240\u5728\u7684\u94fe\u8868\u524d\u9a71\n// Suf ( u , v ) => \u8fd9\u6761\u8fb9\u6240\u5728\u7684\u94fe\u8868\u540e\u7ee7 \nint S[MAXN],E[MAXN];\n// S ( i ) => \u8fd9\u4e2a\u70b9\u7684\u5220\u8fb9\u5e8f\u5217\u5f00\u5934\n// E ( i ) => \u8fd9\u4e2a\u70b9\u7684\u5220\u8fb9\u5e8f\u5217\u7ed3\u5c3e\nint Can[MAXN]; // Can ( i ) => \u8fd9\u4e2a\u70b9\u662f\u5426\u53ef\u884c \nint fa[MAXN]; // fa ( i ) => \u8fd9\u4e2a\u70b9\u5728\u6df1\u641c\u8fc7\u7a0b\u4e2d\u7684\u7236\u4eb2 \nint deg[MAXN]; // deg ( i ) => \u8fd9\u4e2a\u70b9\u76f8\u90bb\u7684\u8fb9 \nint Fin[MAXN]; // Fin ( i ) => \u8fd9\u4e2a\u6570\u6700\u7ec8\u6240\u5728\u7684\u8282\u70b9 \n\nvoid Init(){\n    cnt=0;\n    n=read();\n    for(REG int i=1;i<=n;++i) p[i]=read(),S[i]=E[i]=head[i]=0,deg[i]=0;\n    for(REG int i=1;i<n;++i){\n        int u=read(),v=read();\n        add(u,v);\n        ++deg[u],++deg[v];\n        Len[u][v]=Len[v][u]=1;\n        Fir[u][v]=Lst[u][v]=v,Fir[v][u]=Lst[v][u]=u;\n        Pre[u][v]=Pre[v][u]=Suf[u][v]=Suf[v][u]=-1;\n    }\n}\n\nvoid Find_Node(int now,int Start){\n    for(REG int i=head[now];i;i=ed[i].nxt){\n        int v=ed[i].v;\n        if(v==fa[now]) continue;\n        fa[v]=now;\n        bool Can_Mid=true; // \u8fd9\u4e2a\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u59cb\u70b9\u6216\u4e2d\u95f4\u70b9 \n        if(now^Start){ // \u4e2d\u95f4\u70b9 \n            if((~Suf[now][fa[now]])||(~Pre[now][v])) Can_Mid=false; // \u6761\u4ef6 1 \n            if((Fir[now][fa[now]]==Fir[now][v])&&(Suf[now][fa[now]]^v)) Can_Mid=false; \n            if(S[now]==v) Can_Mid=false;\n            if(S[now]&&E[now])\n                if(Fir[now][fa[now]]==S[now]&&Lst[now][v]==E[now])\n                    if((Len[now][fa[now]]+Len[now][v])^deg[now]) Can_Mid=false;\n            // \u6761\u4ef6 2\n        }\n        else{ // \u8d77\u59cb\u70b9 \n            if(S[now]&&(S[now]^v)) Can_Mid=false; // \u6761\u4ef6 1 \n            if(E[now]&&Lst[now][v]==E[now])\n                if(Len[now][v]^deg[now]) Can_Mid=false;\n            // \u6761\u4ef6 2 \n            if(~Pre[now][v]) Can_Mid=false;\n        }\n        if(Can_Mid) Find_Node(v,Start); \n    }\n    // \u5224\u65ad\u7ed3\u675f\u70b9 \n    Can[now]=true;\n    if(now^Start){\n        if(E[now]&&(E[now]^fa[now])) Can[now]=false; // \u6761\u4ef6 1\n        if(S[now]&&Fir[now][fa[now]]==S[now])\n            if(Len[now][fa[now]]^deg[now]) Can[now]=false;\n        // \u6761\u4ef6 2 \n    }\n    else Can[now]=false; // \u53ea\u8981\u6709\u5220\u8fb9\uff0c\u8fd9\u4e2a\u6570\u5c31\u4e0d\u80fd\u5f85\u5728\u539f\u4f4d \n}\n\nvoid Update_Path(int End,int Start){ \n    int last=End;\n    E[End]=fa[End];\n    End=fa[End];\n    while(End^Start&&End){\n        if(Fir[End][fa[End]]^Fir[End][last]){\n\n            int it=last;\n            while(~it)\n                Fir[End][it]=Fir[End][fa[End]],\n                Len[End][it]+=Len[End][fa[End]],\n                it=Suf[End][it];\n            it=fa[End];\n            while(~it)\n                Lst[End][it]=Lst[End][last],\n                Len[End][it]=Len[End][last],\n                it=Pre[End][it];\n            Suf[End][fa[End]]=last;\n            Pre[End][last]=fa[End];\n            last=End;\n            End=fa[End];\n        }\n    }\n    S[End]=last;\n}\n\nint main(){\n    T=read();\n    while(T--){\n        Init();\n        for(REG int i=1;i<=n;++i){\n            int pos=p[i];\n            memset(Can,false,sizeof Can);\n            memset(fa,0,sizeof fa);\n            Find_Node(pos,pos);\n            int Goal(1);\n            for(;Goal<=n;++Goal)\n                if(Can[Goal]) break;\n            Update_Path(Goal,pos);\n            Fin[i]=Goal;\n        }\n        for(REG int i=1;i<n;++i) printf(\"%d \",Fin[i]);\n        printf(\"%d\\n\",Fin[n]);\n    }\n}\n```\n",
        "postTime": 1578320997,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://blog.csdn.net/qq_42886072/article/details/105294392)\n\n[\u53c2\u8003\u535a\u5ba2](https://www.luogu.com.cn/blog/wucstdio/solution-p5659)\n\n# \u524d\u8a00\n\n\u8fc7\u4e86\u5feb\u534a\u5e74\u624d\u6765\u8865\u5751.\u8003\u8bd5\u7684\u65f6\u5019\u5361\u5728\u7b2c\u4e8c\u9898\u7684\u65f6\u95f4\u8fc7\u957f\u4e86,\u6240\u4ee5\u8fd9\u9898\u53ea\u6253\u4e86\u4e2a10\u5206\u66b4\u529b.\n\n(\u90a3\u65f6\u5019\u7684\u81ea\u5df1\u5b9e\u5728\u592a\u5ae9\u4e86,~~\u73b0\u5728\u4e5f\u662f~~ ).\n\n\u82b1\u4e86\u5927\u534a\u5929\u624d\u5f04\u61c2\u9898\u89e3,QAQ~~~\n\n# \u6b63\u9898\n\n\u9996\u5148,\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u8f6c\u5316:\n\n\u9898\u76ee\u4e2d\u8bf4\u5220\u9664\u4e00\u6761\u8fb9$(x,y)$\u5373\u4ea4\u6362\u7aef\u70b9\u4e0a\u7684\u6570,\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\n\n> \u4e00\u4e2a\u8fde\u7eed\u7684\u884c\u4e3a:$x$\u4e0a\u7684\u6570\u8dd1\u5230$y,y$\u4e0a\u7684\u6570\u8dd1\u5230$x$.\n\n>\u8fd9\u6837\u5904\u7406\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u8fdb\u884c\u8d2a\u5fc3\u6c42\u89e3.\n\n\n\n\u4e4b\u540e,\u8fd8\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6027\u8d28:\u4e00\u4e2a\u6570\u7684**\u6700\u7ec8\u6240\u5728\u4f4d\u7f6e**\u4e00\u5b9a\u4e0e**\u5f00\u59cb\u7684**\u4e0d\u540c\u4e14**\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53ea\u6709\u4e00\u4e2a\u6570**(~~\u5e9f\u8bdd~~)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49:\n\n> $from[x]$\u8868\u793a\u6700\u540e$x$\u4e0a\u7684\u6570\u7684\u6765\u6e90\u8fb9(\u4e00\u5b9a\u662f\u90bb\u8fb9)\n>\n> $to[x]$\u8868\u793a\u521d\u59cb\u65f6$x$\u4e0a\u7684\u6570\u5f80\u90a3\u8fb9\u8dd1(\u4e00\u5b9a\u4e5f\u662f\u90bb\u8fb9)\n\n\n\n\u63a5\u7740,\u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u5220\u8fb9\u987a\u5e8f\u6240\u5bfc\u81f4\u7684\u7ed3\u679c.\n\n\n\n\u5bf9\u4e8e\u5ea6\u6570\u4e3a2\u7684\u70b9:\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC9pbWFnZV9ob3N0aW5nL2FzZTdmcTg5LnBuZw?x-oss-process=image/format,png)\n\n\u5982\u679c\u5148\u5220\u53f3\u518d\u5de6,\u53ef\u4ee5\u53d1\u73b0\u6709\u4e24\u4e2a\u6570\u53f3\u79fb,\u4e00\u4e2a\u6570\u5de6\u79fb.\n\n\u5b9e\u9645\u4e0a,\u901a\u8fc7\u8fd9\u4e2a\u53cd\u5411\u79fb\u52a8\u7684\u6570\u7684\u6765\u6e90\u6211\u4eec\u5373\u53ef\u786e\u5b9a\u5177\u4f53\u7684\u5220\u8fb9\u987a\u5e8f.\n\n\n\n**\u5347\u7ea7\u7248**:\u83ca\u82b1\u56fe\n\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubHVvZ3UuY29tLmNuL3VwbG9hZC9pbWFnZV9ob3N0aW5nLzN5MW05cnlqLnBuZw?x-oss-process=image/format,png)\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0:\u6570\u7684\u79fb\u52a8\u987a\u5e8f$c_1,c_2,c_3,c_4$,\u786e\u5b9a\u4e86\u4ee5\u4e0b\u60c5\u51b5:\n\n> $to[x]=1(x\u7684\u6570\u5f801\u65b9\u5411\u8dd1\u4e86),from[x]=5(5\u65b9\u5411\u8dd1\u6765\u4e00\u4e2a\u6570)$,\u5220\u8fb9\u987a\u5e8f\u4e3a(\u4ee5\u90bb\u63a5\u70b9\u6765\u8868\u793a\u8fb9)$1,2,3,4,5$.\n\n\u8fd9\u6837\u5982\u679c\u7528\u90bb\u63a5\u70b9\u8868\u793a\u8fb9,\u6309\u5220\u9664\u987a\u5e8f\u6392\u5e8f\u7684\u8bdd,\u5219\u4f1a\u51fa\u73b0\u5982\u4e0b\u60c5\u51b5:\n\n> $to[x],....,from[x]$.(\u6211\u4eec\u79f0\u4e4b\u4e3a\u504f\u5e8f\u94fe)\n\n\u663e\u7136,\u5982\u679c\u8fd9\u6761\u94fe\u4e0d\u80fd\u5305\u542b\u6240\u6709\u7684\u90bb\u8fb9\u7684\u8bdd\u5c31\u4e0d\u5408\u6cd5.(\u6211\u4eec\u53ef\u4ee5\u79f0\u4e4b\u4e3a**\u63d0\u524d\u81ea\u95ed**,\u8fd9\u6837\u4e0d\u80fd\u518d\u52a0\u5165\u8fb9\u4e86)\n\n\n\n**\u5177\u4f53\u7b97\u6cd5\u6d41\u7a0b**:\n\n\u4ee5\u4e0a\u8bf4\u660e\u63d0\u4f9b\u4e86\u5177\u4f53\u7684\u5224\u65ad\u975e\u6cd5\u60c5\u51b5\u7684\u65b9\u6cd5,\u8fd9\u4e9b\u5c06\u6210\u4e3a\u6574\u4e2a\u7b97\u6cd5**\u6700\u91cd\u8981**\u7684\u90e8\u5206.\n\n\u6709\u4e00\u4e2a\u663e\u7136\u8d2a\u5fc3\u7b97\u6cd5:\u5148\u628a\u5c0f\u7684\u6570\u632a\u5230\u5c3d\u91cf\u5c0f\u7684\u4f4d\u7f6e,\u4e14\u4fdd\u8bc1\u4e0d\u4e0e\u524d\u9762\u7684\u64cd\u4f5c\u77db\u76fe.\n\n\n\n\u90a3\u4e48\u8fd9\u4e2a\u79fb\u52a8\u5c31\u4f1a\u5305\u62ec3\u7c7b\u70b9:\n\n1. \u8d77\u70b9$x$\n2. \u4e2d\u8f6c\u70b9$t$\n3. \u7ec8\u70b9$y$\n\n\u6211\u4eec\u9010\u7c7b\u8ba8\u8bba\u5982\u4f55\u5408\u6cd5:\n\n\u9996\u5148,\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u6240\u6709\u6709\u5411\u8fb9\u90fd\u4e0d\u80fd\u91cd\u590d\u7ecf\u8fc7.\n\n\u5177\u4f53\u8981\u6c42:\n\n1. \u8d77\u70b9\n   1. \u4fdd\u8bc1\u4e0d\u63d0\u524d\u81ea\u95ed.\n   2. \u6570\u8fd8\u672a\u9009\u62e9\u672b\u4f4d\u7f6e.(\u987a\u5e8f\u6bcf\u4e2a\u6570\u7684\u4f4d\u7f6e\u5373\u53ef\u4fdd\u8bc1)\n2. \u4e2d\u8f6c\u70b9\n    \t1. \u4fdd\u8bc1\u4e0d\u63d0\u524d\u81ea\u95ed.\n    \t2. \u6570\u4e0d\u80fd\u91cd\u590d\u7ecf\u8fc7\u4e00\u6761\u8fb9.($x->y,y->x$).\n3. \u7ec8\u70b9\n   1. \u4fdd\u8bc1\u4e0d\u63d0\u524d\u81ea\u95ed\n   2. \u4f4d\u7f6e\u8fd8\u672a\u88ab\u5360\u9886$(from[y]=0)$\n\n\n\n\u4e4b\u540e,\u6211\u4eec\u7528\u53cc\u5411\u94fe\u8868\u6765\u7ef4\u62a4\u504f\u5e8f\u94fe.\n\n\u5b9a\u4e49:\n\n> $st[x][y]$\u8868\u793a$(x,y)$\u8fd9\u6761\u8fb9\u6240\u5728\u504f\u5e8f\u94fe\u7684\u5f00\u5934\n>\n> $ed[x][y]$\u8868\u793a$(x,y)$\u8fd9\u6761\u8fb9\u6240\u5728\u504f\u5e8f\u94fe\u7684\u7ed3\u5c3e\n>\n> \u521d\u59cb\u5316:$st[x][y]=ed[x][y]=y$.(\u4e00\u5f00\u59cb\u90fd\u72ec\u7acb)\n\n\u4e4b\u6240\u4ee5\u8fd9\u6837\u5b9a\u4e49\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u4e0d\u6e05\u695a\u6240\u6709\u7684\u5220\u9664\u987a\u5e8f,\u53ea\u80fd\u8fd9\u6837\u6765\u5b58\u50a8\u4fe1\u606f\u53ca\u786e\u5b9a\u5220\u9664\u7684\u76f8\u5bf9\u987a\u5e8f.\n\n![](https://img-blog.csdnimg.cn/20200403171948948.png)\n\n\u5047\u5982\u79fb\u52a8\u987a\u5e8f\u662f\u8fd9\u6837,\u90a3\u4e48$(x,u),(u,v),(v,w),(w,y)$\u4f9d\u6b21\u5220\u9664.\n\n\n\n\u8fd9\u6837\u7684\u8bdd:$st[v][u] \\sim ed[v][u]$\u8981\u63a5\u5728$st[v][w]\\sim ed[v][w]$\u4e4b\u540e.\u4f9d\u6b21\u7c7b\u63a8.\n\n\n\n\u8fd9\u6837\u4fdd\u8bc1\u4e86\u4e0d\u4e0e\u524d\u9762\u64cd\u4f5c\u7684\u77db\u76fe(\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8),\u540c\u65f6\u7b26\u5408\u79fb\u52a8\u7684\u8981\u6c42.\n\n\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427:(~~\u6211\u5e2e\u4e0d\u4e86\u4f60\u4e86~~):\n\n\n\n~~~cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=2010;\nvoid qr(int &x) {\n\tchar c=getchar();x=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))x=x*10+c-'0',c=getchar();\n}\nvoid qw(int x) {\n\tif(x>9) qw(x/10);\n\tputchar(x%10+'0');\n}\nvoid pr1(int x) {qw(x);putchar(' ');}\n\nint T,n,pos[N],from[N],to[N],st[N][N],ed[N][N],d[N],edge[N][N];\n/*\u4e00\u6ce2\u5b9a\u4e49:\npos[i]:i\u7684\u4f4d\u7f6e \nfrom[i]:i\u4e0a\u7684\u6570\u4ece\u54ea\u8fb9\u6765.\nto[i]:i\u4e0a\u7684\u6570\u53bb\u54ea\u513f\nst[x][y],ed[x][y]:(x,y)\u6240\u5728\u504f\u5e8f\u94fe\u7684\u5f00\u5934,\u7ed3\u5c3e.\nd[x]:x\u7684\u5269\u4f59\u5ea6\u6570(\u4e00\u6761\u8fb9\u770b\u4f5c\u4e24\u6761\u6709\u5411\u8fb9)\nedge[x][y]:(x,y)\u7684\u79fb\u52a8\u60c5\u51b5: \u4e24\u4e2a\u65b9\u5411\u90fd\u672a\u8d70(-1),\u4e24\u4e2a\u65b9\u5411\u90fd\u8d70\u4e86(0),\u53ea\u4ecex\u5230y(x),\u53ea\u4ecey\u5230x(y).()\u5185\u4e3a\u5177\u4f53\u7684\u503c \n*/\nstruct Edge{int y,next;}a[N<<1]; int len,last[N];\nvoid ins(int x,int y) {\n\ta[++len]=(Edge){y,last[x]};last[x]=len;\n\td[x]+=2; edge[x][y]=-1; st[x][y]=ed[x][y]=y;\n}\n\nint res,root,fa[N];//\u6700\u540e\u8fbe\u5230\u7684\u4f4d\u7f6e(\u8d2a\u5fc3\u53d6\u6700\u5c0f),\u6839,father\nvoid dfs(int x) {\n\tfor(int k=last[x],y;k;k=a[k].next) {\n\t\ty=a[k].y; if(y==fa[x]) continue;\n\t\tfa[y]=x;\n\t\tif(edge[x][y]==x||edge[x][y]==0) continue; \n\t\tif(x^root) { //\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u8981\u6c42\n\t\t\tif(ed[x][y]==from[x]&&st[x][fa[x]]==to[x]&&d[x]>2) continue;//\u5982\u679c\u8d70fa[x]~x~y,\u90a3\u4e48d[x]\u4f1a\u7f29\u5c0f2. \u8fd9\u4e2a\u5224\u65ad\u662f\u9632\u6b62\u63d0\u524d\u81ea\u95ed\n\t\t\tif(ed[x][y]==fa[x]) continue;//\u504f\u5e8f\u94fe\u4e2d\u4e0d\u80fd\u6709\u91cd\u590d.\n\t\t}\n\t\telse {\n\t\t\tif(from[x]) {\n\t\t\t\tif(ed[x][y]==from[x]&&d[x]>1) continue;\n\t\t\t\t//\u5982\u679c\u4e00\u5b9a\u6709\u4e86from[x],\u90a3\u4e48\u8fd9\u6761\u8fb9\u5fc5\u987b\u6700\u540e\u8bbf\u95ee(\u8d77\u70b9\u8981\u6c42) \n\t\t\t}\n\t\t}\n\t\tdfs(y);\n\t}\n\tif(x^root&&!from[x]) {//\u7ec8\u70b9\u8981\u6c42 \n\t\tif(to[x]&&st[x][fa[x]]==to[x]&&d[x]>1) ;//\u63d0\u524d\u81ea\u95ed\n\t\telse res=min(res,x);//\u66f4\u65b0\u9009\u62e9\n\t}\n}\n\nint main() {\n\tqr(T); while(T--) {\n\t\tqr(n); len=0;\n\t\tfor(int i=1;i<=n;i++) last[i]=from[i]=to[i]=d[i]=0,qr(pos[i]);\n\t\tfor(int i=1,x,y;i<n;i++)\n\t\t\tqr(x),qr(y),ins(x,y),ins(y,x);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tint x,y,z;  root=x=pos[i];\n\t\t\tmemset(fa+1,0,n<<2);\n\t\t\tres=N; dfs(x);\n\t\t\tfrom[y=res]=fa[res];//res\u4e0a\u7684\u6570\u6765\u81eafa[res]\n\t\t\tpr1(y);\n\t\t\twhile(fa[y]^x) {\n\t\t\t\tz=fa[y];\n\t\t\t\td[y]--;\n\t\t\t\td[z]--;\n\t\t\t\tif(edge[z][y]==-1)\n\t\t\t\t\t edge[z][y]=edge[y][z]=z;\n\t\t\t\telse edge[z][y]=edge[y][z]=0;\n\t\t\t\tst[z][ed[z][y]]=st[z][fa[z]];\n\t\t\t\ted[z][st[z][fa[z]]]=ed[z][y];\n\t\t\t\ty=z;\n\t\t\t}\n\t\t\td[y]--;\n\t\t\td[x]--;\n\t\t\tif(edge[x][y]==-1)\n\t\t\t\t edge[x][y]=edge[y][x]=x;\n\t\t\telse edge[x][y]=edge[y][x]=0;\n\t\t\t\n\t\t\tto[x]=y;\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n~~~\n\n\n\n\n\n",
        "postTime": 1585905689,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "\n\u642c\u8fd0\u81ea[\u4e2a\u4eba\u535a\u5ba2](https://zory.ink/posts/1634d012.html)\n\n\u8003\u8651\u4e00\u4e2a\u6570\u4ecex\u60f3\u6070\u5f53\u5730\u79fb\u52a8\u5230y\uff0c\u76f4\u63a5\u53bb\u79fb\u52a8\u662f\u4e0d\u884c\u7684\uff0c\u8fd9\u65f6\u5019\u4e00\u79cd\u5f88\u6709\u7528\u7684\u601d\u8def\u5c31\u662f\u8003\u8651\u7a76\u7adf\u5e26\u6765\u4e86**\u54ea\u4e9b\u9650\u5236\u6761\u4ef6**\n\n**\u7b2c\u4e00\u6761\u8fb9\u5fc5\u987b\u662f\u4e0ex\u76f8\u8fde\u7684\u8fb9\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5220\u7684\uff0c\u6700\u540e\u4e00\u6761\u8fb9\u5fc5\u987b\u662f\u4e0ey\u76f8\u8fde\u7684\u8fb9\u4e2d\u6700\u540e\u4e00\u4e2a\u88ab\u5220\u7684\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e2d\u8f6c\u8282\u70b9t\u7684\u8def\u5f84\u4e0a\u4e24\u6761\u8fb9\uff0c\u4e00\u5b9a\u662f\u4e00\u6761\u7d27\u63a5\u7740\u53e6\u4e00\u6761\u88ab\u5220\u9664\uff08\u6ce8\u610f\u4ee5\u4e0a\u6240\u6709\u7684\u65f6\u95f4\uff0c\u90fd\u662f\u4ee5\u516c\u5171\u70b9\u4f5c\u4e3a\u53c2\u8003\u7cfb\u800c\u76f8\u5bf9\u7684\uff09**\n\n\u60f3\u51fa\u8fd9\u70b9\uff08\u672c\u8d28\u4e0a\u5c31\u662f\u5c06\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u53c2\u8003\u7cfb\u540e\u9650\u5236\u72ec\u7acb\uff09\u540e\u57fa\u672c\u4e0a\u5c31\u505a\u5b8c\u4e86\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\u6309\u4f4d\u786e\u5b9a\uff0c\u5728\u6811\u4e0adfs\u627e\u5230\u80fd\u53bb\u7684\u7f16\u53f7\u6700\u5c0f\u8282\u70b9\uff0c\u8fb9\u8d70\u8fb9\u5224\u65ad\u6211\u65b0\u589e\u52a0\u7684\u9650\u5236\u662f\u5426\u4f1a\u5bfc\u81f4\u3010\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u76f8\u90bb\u7684\u8fb9\uff0c\u9690\u5f0f\u5efa\u56fe\u540e\u662f\u82e5\u5e72\u6761\u94fe\u3011\u7684\u6027\u8d28\u88ab\u7834\u574f\uff08\u663e\u7136\u662f\u80fd\u6784\u9020\u51fa\u65b9\u6848\u7684\u5145\u8981\u6761\u4ef6\uff09\uff0c\u56e0\u4e3a\u662f\u4e00\u68f5\u6811\u6211\u4eec\u4e2d\u9014\u5224\u65ad\u9650\u5236\u7684\u65f6\u5019\u5e76\u4e0d\u9700\u8981\u505a\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u53c2\u8003\u7cfb\u5728\u672c\u8f6edfs\u4e2d\u4e0d\u9700\u8981\u518d\u8003\u8651\u4e86\uff0c\u5173\u4e8e\u8fd9\u90e8\u5206\u600e\u4e48\u5199\u4ee3\u7801\u4e2d\u6709\u6ce8\u91ca\n\n\u6b64\u65f6\u4f60\u53ef\u80fd\u4ea7\u751f\u6211\u5f53\u65f6\u7684\u4e00\u4e2a\u5c0f\u7591\u95ee\uff1a\u6211\u4eec\u7684\u8fd9\u4e2acheck\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u4ee5\u540e\u4e0d\u4f1a\u51fa\u73b0\u3010\u67d0\u4e2a\u6570\u6ca1\u70b9\u53ef\u53bb\u5bfc\u81f4\u8fb9\u5220\u4e0d\u5b8c\u3011\u7684\u95ee\u9898\u5417\uff1f\u641e\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u94fe\u7684\u5927\u5c0f\uff08\u5176\u5b9e\u5728\u786e\u4fdd\u4e0d\u4f1a\u6210\u73af\u7684\u65f6\u5019\u5df2\u7ecf\u8981\u5199\u5e76\u67e5\u96c6\u4e86\uff09\uff0c\u7528siz\u786e\u4fdd\u5408\u5e76\u7684\u65f6\u5019\u4e0d\u4f1a\u5bfc\u81f4\u4e00\u6761\u94fe\u8fc7\u65e9\u5f62\u6210\uff08\u56e0\u4e3a\u672c\u9898\u662f\u5bf9\u6700\u540e\u94fe\u7684\u5934\u5c3e\u6709\u5177\u4f53\u9650\u5236\u7684\uff09\n\n\u8bb2\u9053\u7406\u8fd9\u4e2a **\u5927\u81f4\u601d\u8def\uff08\u5373\u4e0d\u8bf4\u4e0a\u8ff0\u5177\u4f53\u5b9e\u73b0\uff09** \u5982\u679c\u544a\u8bc9\u6211\u662f\u5bf9\u7684\uff0c\u6211\u80fd\u5f88\u597d\u7406\u89e3\u5176\u6b63\u786e\u6027\uff0c\u4f46\u5982\u679c\u6211\u81ea\u5df1\u60f3\u51fa\u6765\uff0c\u5927\u6982\u4f1a\u88ab\u6211\u83ab\u540d\u53c9\u6389\uff0c\u56e0\u4e3a\u611f\u89c9\u6b63\u786e\u6027\u5e76\u4e0d\u663e\u7136\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u8bdd\uff0c\u5176\u5b9e\u8ba4\u771f\u601d\u8003\u597d\u7ec6\u8282\u4e0d\u7b97\u591a\uff0c\u53ef\u4ee5\u4e00\u904d\u901a\u8fc7\n\n```cpp\n//\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u7b80\u6d01\u7684code\nint fir[N],lst[N];//\u94fe\u5934\u3001\u94fe\u5c3e\uff0c\u94fe\u8868\u7f16\u53f7\u7edf\u4e00\u7528\u4ece\u7236\u4eb2\u5230\u5b69\u5b50\u7684\nstruct Edge{int x,y,g,gl,gr;}e[N];int hou[N],deg[N];\nint ln;void ins(int x,int y){e[++ln]=(Edge){x,y,hou[x],0,0};hou[x]=ln;}\nint solve(int x,int fa,int fm)//fm=(x->fa)\n{\n    int ret=INF;\n    for(int k=hou[x];k;k=e[k].g)\n    {\n        int y=e[k].y;if(y==fa)continue;\n        if(fm>=0)//k\u7d27\u63a5\u7740fm\n        {\n            if(fir[x]==k or lst[x]==fm) continue;\n            if(e[fm].gr==k and e[k].gl==fm) ;\n            else\n            {\n                if(e[fm].gr or e[k].gl) continue;\n                int fx=dsu.findfa(fm),fy=dsu.findfa(k);\n                if(fx==fy) continue;\n                if(fir[x] and lst[x] and dsu.findfa(fir[x])==fx and dsu.findfa(lst[x])==fy\n                    and dsu.siz[fx]+dsu.siz[fy]<deg[x]) continue;//\u94fe\u8fc7\u65e9\u5f62\u6210\n            }\n        }\n        else\n        {\n            int tt=dsu.findfa(k);\n            if(lst[x] and dsu.findfa(lst[x])==tt and dsu.siz[tt]<deg[x]) continue;\n            if(e[k].gl) continue;\n        }\n        //\u770b\u505a\u7ec8\u70b9\n        if((!lst[y] and !e[k^1].gr) or lst[y]==(k^1))\n        {\n            int tt=dsu.findfa(k^1);\n            if(fir[y] and dsu.findfa(fir[y])==tt and dsu.siz[tt]<deg[y]) ;\n            else chmin(ret,y);\n        }\n        //\u770b\u505a\u4e2d\u8f6c\u70b9\n        chmin(ret,solve(y,x,k^1));\n    }return ret;\n}\nbool modify(int x,int fa,int to,int fm)\n{\n    if(x==to){lst[x]=fm;return 1;}\n    for(int k=hou[x];k;k=e[k].g)\n    {\n        int y=e[k].y;if(y==fa)continue;\n        if(modify(y,x,to,k^1))\n        {\n            if(fm>=0) e[fm].gr=k,e[k].gl=fm,dsu.merg(fm,k);\n            else fir[x]=k;\n            return 1;\n        }\n    }\n    return 0;\n}\nint pos[N];\nvoid main()\n{\n    int T=qread();\n    while(T--)\n    {\n        int n=qread();fo(i,1,n) pos[i]=qread(),hou[i]=fir[i]=lst[i]=deg[i]=0;dsu.clear();\n        ln=1;fo(i,1,n-1){int x=qread(),y=qread();ins(x,y),ins(y,x);deg[x]++,deg[y]++;}\n        fo(num,1,n)\n        {\n            int x=pos[num];\n            int mi=solve(x,0,-1);GG(mi!=INF);\n            modify(x,0,mi,-1);write1(mi);\n        }puts(\"\");\n    }\n}\n```\n[\u5b8c\u6574code](https://zory.ink/code/cspD1T3.html)",
        "postTime": 1574129301,
        "uid": 30058,
        "name": "Zory",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "\u5495\u9898\u89e3\u6765\u4e86~ ~ ~  \n  \n\u5176\u5b9e\u5e94\u8be5\u8fd8\u662f\u80fd~~\u6bd4\u8f83\u5bb9\u6613\u5730~~\u627e\u5230\u89c4\u5f8b\u7684\u5427  \n\n\u76ee\u6807\u80af\u5b9a\u662f\u5c3d\u91cf\u628a\u6700\u5c0f\u7684\u6570\u5b57\u7ed9\u8f6c\u79fb\u5230\u6700\u5c0f\u7684\u7f16\u53f7\u4e0a\uff0c\u800c\u4e14\u8f6c\u79fb\u7684\u65b9\u6848\uff08\u5373\u8f6c\u79fb\u8def\u7ebf\uff09\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u5bb9\u6613\u8054\u60f3\u5230\u8d2a\u5fc3\u4e86\uff1a\u6bcf\u6b21\u4ece\u6700\u5c0f\u7684\u6570\u5b57\u7684\u6570\u5b57\u51fa\u53d1\u627e\u5230\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u8282\u70b9\uff0c\u5c06\u5176\u8f93\u51fa\uff0c\u518d\u5c06\u8def\u7ebf\u8bb0\u5f55\u4e0b\u6765  \n\n\u56e0\u4e3a\u5982\u679c\u7531\u4e8e\u524d\u9762\u7684\u8def\u7ebf\u4f7f\u5f97\u5f53\u524d\u8def\u7ebf\u4e0d\u6210\u7acb\uff0c\u90a3\u4e48\u5f53\u524d\u8def\u7ebf\u4e00\u5b9a\u4e0d\u662f\u6700\u4f18\u8def\u7ebf\uff0c\u6545\u8d2a\u5fc3\u80af\u5b9a\u662f\u5408\u6cd5\u7684  \n\n\u63a5\u4e0b\u6765\u8003\u8651\u8d2a\u5fc3\u7684\u6027\u8d28:\n~~\u5f88\u5bb9\u6613~~\u53ef\u4ee5\u60f3\u5230\u4e00\u6761\u8def\u5f84\u5e94\u5f53\u5212\u5206\u4e3a\u521d\u59cb\u8282\u70b9\uff08\u521d\u70b9\uff09,\u521d\u70b9\u6240\u8fde\u7684\u5728\u8be5\u8def\u5f84\u4e0a\u7684\u8fb9\uff08\u521d\u8fb9\uff09\uff0c\u8def\u5f84\u4e0a\u7684\u5176\u5b83\u8fb9\uff08\u9014\u8fb9\uff09\u4e0e\u70b9\uff08\u9014\u70b9\uff09\uff0c\u4ee5\u53ca\u672b\u70b9\u4e0e\u672b\u8fb9\uff1a\n1. \u5bf9\u4e8e\u521d\u8fb9\uff0c\u5b83\u5e94\u5f53\u662f\u521d\u70b9\u7684\u7b2c\u4e00\u6761\u88ab\u5220\u7684\u8fb9\uff0c\u5426\u5219\u5fc5\u5b9a\u65e0\u6cd5\u8fbe\u6210\u76ee\u6807\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u521d\u8fb9\n2. \u5bf9\u4e8e\u672b\u8fb9\uff0c\u5b83\u5e94\u5f53\u662f\u672b\u70b9\u7684\u6700\u540e\u4e00\u6761\u88ab\u5220\u8fb9\uff0c\u5426\u5219\u5fc5\u5b9a\u65e0\u6cd5\u8fbe\u6210\u76ee\u6807\uff0c\u540c\u6837\u4efb\u4f55\u4e00\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u672b\u8fb9\n3. \u5bf9\u4e8e\u9014\u8fb9\uff0c\u5982\u679c\u6709\u53e6\u4e00\u6761\u540c\u4e00\u8def\u5f84\u4e0a\u7684\u9014\u8fb9\u4e0e\u5176\u8fde\u63a5\u5728\u540c\u4e00\u4e2a\u9014\u70b9\u4e0a\uff0c\u90a3\u4e48\u5bf9\u8fd9\u4e2a\u9014\u70b9\u6765\u8bf4\uff0c\u5176\u6240\u8fde\u7684\u6240\u6709\u8fb9\u7684\u5220\u9664\u987a\u5e8f\u4e2d\uff0c\u8fd9\u4e24\u6761\u9014\u8fb9\u5fc5\u5b9a\u662f\u4e00\u5148\u4e00\u540e\u7d27\u8fde\u7684\uff0c\u5e76\u4e14\u4e00\u5bf9\u9014\u8fb9\u4e00\u5b9a\u53ea\u80fd\u8f6c\u8fd0\u4e00\u4e2a\u6570\u5b57\n\n\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7528$st[i](start)$\u548c$en[i](end)$\u5206\u522b\u8bb0\u5f55\u8282\u70b9$i$\u7684\u521d\u8fb9\u4e0e\u672b\u8fb9\uff0c$pre[i][j]$\u548c$nxt[i][j]$(\u5747\u4e3a$bool$\u578b)\u6765\u8bb0\u5f55\u70b9$i$\u7684\u8fb9$j$\u5728\u70b9$i$\u8fde\u8fb9\u7684\u5220\u8fb9\u987a\u5e8f\u4e2d\u662f\u5426\u6709\u8fde\u5728\u4e00\u8d77\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\uff0c\u4ee5\u4fbf\u6211\u4eec\u5bf9\u5f53\u524d\u8d2a\u5fc3\u65b9\u6848\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u5224\u65ad  \n\n\u63a5\u4e0b\u6765\u770b\u5408\u6cd5\u60c5\u51b5\u662f\u600e\u6837\u7684\uff1a  \n\n\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u904d\u5386\u5230\u4e86\u6570\u5b57$i$\u7684\u5bf9\u5e94\u8282\u70b9\uff1a\n**\u80fd\u5c06$i$\u4f5c\u4e3a\u521d\u70b9\u7684\u6761\u4ef6**\uff1a\n1. \u76ee\u524d\u6ca1\u6709\u521d\u8fb9\u6216\u521d\u8fb9\u4e3a\u5f53\u524d\u904d\u5386\u5230\u7684\u5373\u5c06\u4f5c\u4e3a\u521d\u8fb9\u7684\u8fb9\uff08\u9884\u521d\u8fb9\uff09\n2. \u9884\u521d\u8fb9\u5728$i$\u7684\u5220\u9664\u987a\u5e8f\u4e2d\u6ca1\u6709\u524d\u9a71\n3. \u82e5\u9884\u521d\u8fb9\u4e0e$i$\u7684\u672b\u8fb9\u5df2\u6709\u76f4\u63a5\u7684\u5220\u9664\u987a\u5e8f\u8fde\u63a5\uff0c\u90a3\u4e48\u5e94\u5f53$i$\u7684\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u90fd\u5df2\u786e\u5b9a\uff08\u56e0\u4e3a\u8981\u5c06\u6240\u6709\u8fb9\u5220\u5b8c\uff09  \n\n**\u80fd\u5c06$i$\u4f5c\u4e3a\u9014\u70b9\u7684\u6761\u4ef6**\uff1a\n1. \u8fde\u63a5\u7684\u4e24\u6761\u9014\u8fb9\u5206\u522b\u5728$i$\u65e0\u524d\u9a71\u4e0e\u540e\u7ee7\n2. \u4e24\u6761\u9014\u8fb9\u6ca1\u6709\u76f4\u63a5\u7684\u5220\u9664\u987a\u5e8f\u8fde\u63a5\n3. \u82e5\u9760\u524d\u9014\u8fb9\u4e0e$i$\u521d\u8fb9\u6709\u76f4\u63a5\u5220\u9664\u987a\u5e8f\u8fde\u63a5\uff0c\u9760\u540e\u9014\u8fb9\u4e0e$i$\u672b\u8fb9\u6709\u76f4\u63a5\u5220\u9664\u987a\u5e8f\u8fde\u63a5\uff0c\u90a3\u4e48\u5e94\u5f53\u9664\u8fd9\u4e24\u9014\u8fb9\u4e4b\u5916\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u90fd\u5df2\u786e\u5b9a\uff08\u56e0\u4e3a\u8981\u5c06\u6240\u6709\u8fb9\u5220\u5b8c\uff09\n\n**\u80fd\u5c06$i$\u4f5c\u4e3a\u672b\u70b9\u7684\u6761\u4ef6**\n1. \u76ee\u524d\u6ca1\u6709\u672b\u8fb9\u6216\u672b\u8fb9\u4e3a\u5f53\u524d\u904d\u5386\u5230\u7684\u5373\u5c06\u4f5c\u4e3a\u672b\u8fb9\u7684\u8fb9\uff08\u9884\u672b\u8fb9\uff09\n2. \u9884\u672b\u8fb9\u5728$i$\u7684\u5220\u9664\u987a\u5e8f\u4e2d\u6ca1\u6709\u540e\u7ee7\n3. \u82e5\u9884\u672b\u8fb9\u4e0e$i$\u7684\u521d\u8fb9\u5df2\u6709\u76f4\u63a5\u7684\u5220\u9664\u987a\u5e8f\u8fde\u63a5\uff0c\u90a3\u4e48\u5e94\u5f53$i$\u7684\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u90fd\u5df2\u786e\u5b9a\uff08\u56e0\u4e3a\u8981\u5c06\u6240\u6709\u8fb9\u5220\u5b8c\uff09\n  \n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u524d\u9a71\u4e0e\u540e\u7ee7\u90fd\u53ea\u662f\u9700\u8981\u67e5\u770b\u662f\u5426\u6709\uff0c\u6545\u4ec5\u9700\u5bf9\u6bcf\u4e2a\u70b9\u7684\u6bcf\u6761\u8fb9\u5f00\u4e2a$bool$\u578b\u6570\u7ec4\u5224\u65ad\u662f\u5426\u6709\u3002\u800c\u6bcf\u4e2a\u70b9\u7684\u521d\u8fb9\u4e0e\u672b\u8fb9\u6211\u4eec\u90fd\u662f\u9700\u8981\u77e5\u9053\u5177\u4f53\u662f\u54ea\u4e2a\u7684\uff0c\u6545\u8981\u5bf9\u6bcf\u4e2a\u70b9\u5b58\u4e0b\u8fd9\u4e2a\u70b9\u7684\u521d\u8fb9\u4e0e\u672b\u8fb9\u7f16\u53f7  \n\n\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u662f\u5426\u6709\u76f4\u63a5\u5220\u9664\u987a\u5e8f\u76f8\u8fde\u3002\u5bf9\u6b64\uff0c\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u5f53\u4e24\u6761\u8fb9\u786e\u5b9a\u4e86\u5728\u67d0\u4e2a\u70b9\u7684\u4e25\u683c\u5148\u540e\u987a\u5e8f\u4e4b\u540e\uff0c\u5c06\u4e24\u6761\u8fb9\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u8fdb\u884c\u5408\u5e76\uff0c\u540c\u65f6\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u67e5\u770b\u4e24\u6761\u8fb9\u662f\u5426\u5728\u4e00\u4e2a\u5220\u8fb9\u7cfb\u7edf\u4e2d  \n\n\u7136\u540e\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u786e\u5b9a\u5f53\u524d\u8282\u70b9\u5220\u8fb9\u987a\u5e8f\u90fd\u5df2\u786e\u5b9a\uff1f  \n\n\u9996\u5148\u770b\u5220\u8fb9\u987a\u5e8f\u662f\u600e\u4e48\u786e\u5b9a\u7684\uff1a\u5229\u7528\u9014\u8fb9\u4e4b\u95f4\u7684\u8fde\u63a5\u5f97\u5230\u4e00\u5bf9\u9014\u8fb9\u5728\u67d0\u4e00\u9014\u70b9\u7684\u4e25\u683c\u5148\u540e\u987a\u5e8f\uff0c\u7136\u540e\u4e00\u6bb5\u6bb5\u8fde\u63a5\u5f97\u5230\u5b8c\u5168\u6bb5\u3002\u7531\u6b64\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u524d\u8282\u70b9\u7684\u5220\u8fb9\u987a\u5e8f\u662f\u7531\u4e00\u4e2a\u4e2a\u7684\u4e25\u683c\u5220\u8fb9\u987a\u5e8f\u7ec4\u5408\u6210\u7684\uff0c\u800c\u82e5\u4e00\u4e2a\u70b9\u7684\u5220\u8fb9\u987a\u5e8f\u5df2\u5b8c\u5168\u786e\u5b9a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u5f97\u5230\u7684\u4e25\u683c\u5220\u8fb9\u987a\u5e8f\u6570\u4e00\u5b9a\u662f\u8be5\u70b9\u5ea6\u6570\u51cf\u4e00\u3002\u4e8e\u662f\u8003\u8651\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\uff0c\u5f53\u786e\u5b9a\u4e00\u5bf9\u4e25\u683c\u5220\u8fb9\u987a\u5e8f\uff0c\u5ea6\u6570\u51cf\u4e00  \n  \n\u800c\u5f53\u5ea6\u6570\u4ec5\u5269\u4e00\u65f6\u5219\u8868\u793a\u8be5\u70b9\u7684\u6240\u6709\u4e24\u8fb9\u7684\u5220\u8fb9\u987a\u5e8f\u5df2\u7ecf\u786e\u5b9a\u4e86\n\n\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u70b9\u4e0e\u5f53\u524d\u8282\u70b9\u662f\u5426\u76f8\u901a\u518d\u53d6$min$\u7684\u590d\u6742\u5ea6\u662f$O(n^3)$\u7684\uff0c~~\u6211\u4eec\u5f53\u7136\u4e0d\u4f1a\u8fd9\u4e48\u50bb~~\uff0c\u8003\u8651\u6bcf\u6b21\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8fdb\u884c$dfs$\u904d\u5386\u6240\u6709\u80fd\u5230\u7684\u70b9\u518d\u53d6$min$\uff0c\u590d\u6742\u5ea6\u964d\u4e3a$O(n^2)$\uff0c\u800c\u6bcf\u6b21$dfs$\u65f6\u4fee\u6539\u8def\u5f84\u4e0a\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\uff08$f$\uff09\u8282\u70b9\uff0c\u8fd9\u6837\u5728\u540e\u9762\u66f4\u65b0\u65f6\u4f1a\u65b9\u4fbf\u4e00\u70b9\uff0c\u76f4\u63a5\u4ece\u672b\u70b9\u4e00\u4e2a\u4e2a\u5f80\u4e0a\u8e66\u5c31\u884c\u4e86  \n\n\u7531\u4e8e\u8981\u5f00\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5e94\u5f53\u5957\u4e2a$log$\uff0c\u4f46\u7531\u4e8e\u662f\u5bf9\u6bcf\u4e2a\u70b9\u7684\u8fb9\u5f00\u5e76\u67e5\u96c6\uff0c\u4e00\u6761\u8fb9\u6700\u591a\u5f00\u4e24\u6b21\uff0c\u7528\u7684\u6b21\u6570\u4e5f\u5f88\u6709\u9650\uff0c\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(Tn^2\\alpha n)$\uff0c~~\u6000\u7591CCF\u8001\u7237\u673a\u8dd1\u4e0d\u8dd1\u5f97\u8fc7~~\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint x=0;char ch=getchar();\n\tfor(;!isalnum(ch);ch=getchar());\n\tfor(;isalnum(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn x;\n}\n\nconst int xx=2e3+10;\n\nstruct node\n{\n\tint fa[xx];\n\tbool pre[xx],nxt[xx];\n\tinline void init(int n)\n\t{\n\t\tfor(register int i=1;i<=n;++i)\n\t\t{\n\t\t\tfa[i]=i;\n\t\t\tpre[i]=nxt[i]=0;\n\t\t}\n\t}\n\tinline int find(int i)\n\t{\n\t\treturn i==fa[i]?i:fa[i]=find(fa[i]);\n\t}\n\tinline bool check(int i,int j)\n\t{\n\t\treturn find(i)==find(j);\n\t}\n\tinline void merge(int i,int j)\n\t{\n\t\tint a=find(i),b=find(j);\n\t\tif(a!=b)\n\t\t\tfa[a]=b;\n\t}\n}drop[xx];\nint dot[xx],st[xx],en[xx],f[xx],f_l[xx],n;\nint hd[xx],to[xx<<1],nt[xx<<1],du[xx],cnt;\n\ninline void init()\n{\n\tcnt=1;\n\tfor(register int i=1;i<=n;++i)\n\t\tdrop[i].init(n),f[i]=hd[i]=st[i]=en[i]=du[i]=0;\n}\n\ninline void add(int u,int v)\n{\n\tnt[++cnt]=hd[u],to[hd[u]=cnt]=v;\n\tnt[++cnt]=hd[v],to[hd[v]=cnt]=u;\n\t++du[v],++du[u];\n}\n\ninline int dfs(int g,int jt)\n{\n\tint res=xx+1;\n\tif(jt)\n\t\tif(!en[g]||en[g]==jt)\n\t\t\tif(!drop[g].nxt[jt])\n\t\t\t\tif(!(drop[g].check(jt,st[g])&&st[g]&&du[g]>1))\n\t\t\t\t\tres=g;\n\tfor(register int i=hd[g],j;i;i=nt[i])\n\t{\n\t\tj=i>>1;\n\t\tif(j==jt)\n\t\t\tcontinue;\n\t\tif(!jt)\n\t\t{\n\t\t\tif(!st[g]||st[g]==j)\n\t\t\t\tif(!drop[g].pre[j])\n\t\t\t\t\tif(!(drop[g].check(j,en[g])&&en[g]&&du[g]>1))\n\t\t\t\t\t\tf[to[i]]=g,f_l[to[i]]=j,res=min(res,dfs(to[i],j));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(jt!=en[g]&&j!=st[g]&&!drop[g].check(jt,j))\n\t\t\t\tif(!drop[g].nxt[jt]&&!drop[g].pre[j])\n\t\t\t\t\tif(!(du[g]>2&&st[g]&&en[g]&&drop[g].check(st[g],jt)&&drop[g].check(en[g],j)))\n\t\t\t\t\t\tf[to[i]]=g,f_l[to[i]]=j,res=min(res,dfs(to[i],j));\n\t\t}\n\t}\n\treturn res;\n}\n\ninline void mate(int g)\n{\n\tint jt;\n\tjt=en[g]=f_l[g];\n\tg=f[g];\n\twhile(f[g])\n\t{\n\t\tdrop[g].nxt[f_l[g]]=drop[g].pre[jt]=1;\n\t\tdrop[g].merge(jt,f_l[g]);\n\t\t--du[g];\n\t\tjt=f_l[g];\n\t\tg=f[g];\n\t}\n\tst[g]=jt;\n}\n\nint main()\n{\n\tint T=read();\n\twhile(T--)\n\t{\n\t\tn=read();\n                if(n==1)\n                {\n                    puts(\"1\");\n                    continue;\n                }\n\t\tinit();\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tdot[i]=read();\n\t\tfor(register int i=2,u,v;i<=n;++i)\n\t\t\tu=read(),v=read(),add(u,v);\n\t\tfor(register int i=1,j;i<=n;++i)\n\t\t{\n\t\t\tf[dot[i]]=0;\n\t\t\tj=dfs(dot[i],0);\n\t\t\tmate(j);\n\t\t\tprintf(\"%d \",j);\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1585303260,
        "uid": 212955,
        "name": "wyd_forever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    },
    {
        "content": "\u65e2\u7136\u662f\u5b57\u5178\u5e8f\uff0c\u4e0d\u59a8\u8003\u8651\u8d2a\u5fc3\u3002\n\n\u663e\u7136\u5c0f\u7684\u6570\u5b57\u8981\u5c3d\u91cf\u79fb\u5230\u7f16\u53f7\u5c0f\u7684\u70b9\u4e0a\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u4e3b\u8981\u95ee\u9898\u5c31\u662f\u8981\u89e3\u51b3\u4e4b\u524d\u5b89\u6392\u597d\u7684\u6570\u5b57\u5bf9\u5f53\u524d\u6570\u5b57\u7684\u5f71\u54cd\u3002\n\n\u5728\u4e00\u6761\u6570\u5b57\u8d70\u7684\u8def\u5f84\u88ab\u786e\u5b9a\u4e4b\u540e\uff0c\u4f1a\u5bf9\u8def\u5f84\u4e0a\u7684\u8fb9\u4ea7\u751f\u4e00\u7cfb\u5217\u9650\u5236\u3002\n![](https://leanote.com/api/file/getImage?fileId=5dd51348ab644109b0001917)\n\n\u8003\u8651\u628a\u4e0a\u56fe\u4e2d1\u53f7\u70b9\u4e0a\u7684\u6570\u5b57\u6362\u52306\u53f7\u70b9\u3002\n\n\u5bf9\u4e8e\u8d77\u70b9 $1$ \u53f7\u70b9\uff0c\u5982\u679c\u6211\u4eec\u60f3\u628a\u539f\u6765\u5728\u5b83\u4e0a\u9762\u7684\u6570\u5b57\u6362\u5230 $6$ \u53f7\u70b9\uff0c\u663e\u7136\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\uff0c\u7b2c\u4e00\u4e2a\u9700\u8981\u88ab\u5220\u6389\u7684\u8fb9\u5c31\u662f\u8fb9 $A$. \u5982\u679c\u5176\u4ed6\u8fb9\u6bd4 $A$ \u5148\u5220\u9664\uff0c\u90a3\u4e48\u539f\u6765\u5728 $1$ \u53f7\u70b9\u4e0a\u9762\u7684\u6570\u5b57\u5c31\u4f1a\u88ab\u79fb\u8d70\uff0c\u800c\u4e14\u65e0\u6cd5\u518d\u79fb\u52a8\u56de\u6765\u3002\n\n\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u6bd4\u5982 $5$ \u53f7\u70b9\uff0c\u8fb9 $E$ \u5fc5\u987b\u7d27\u8ddf\u5728\u8fb9 $D$ \u540e\u5220\u9664\uff0c\u5426\u5219\u5728\u5220\u9664 $E$, \u6570\u5b57\u88ab\u79fb\u52a8\u5230 $5$ \u53f7\u70b9\u7684\u65f6\u5019\uff0c\u4e2d\u9014\u5c31\u4f1a\u6709\u5176\u4ed6\u8fb9\u88ab\u5220\u9664\uff0c\u5bfc\u81f4\u8fd9\u4e2a\u6570\u5b57\u88ab\u79fb\u5230\u5176\u4ed6\u70b9\u800c\u6c38\u8fdc\u65e0\u6cd5\u5230\u8fbe\u76ee\u7684\u5730 $6$ \u53f7\u70b9\u3002\n\n\u5bf9\u4e8e\u7ec8\u70b96\u53f7\u70b9\uff0c\u4e0e\u8d77\u70b9\u540c\u7406\uff0c $E$ \u5fc5\u987b\u662f\u5728\u4e0e $6$ \u76f8\u8fde\u7684\u8fb9\u4e2d\u6700\u540e\u4e00\u4e2a\u88ab\u5220\u9664\u7684\u3002\n\n\u5728\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u9650\u5236\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e0e\u4e00\u4e2a\u70b9\uff0c\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u8fb9\u4f1a\u4ea7\u751f\u4e00\u4e9b\u9650\u5236\u5173\u7cfb\uff1a\n\n1.\u67d0\u6761\u8fb9\u5fc5\u987b\u662f\u6700\u5148\u88ab\u5220\u9664\u7684(\u8bb0\u4e3a $fi$ )\n\n2.\u67d0\u6761\u8fb9\u5fc5\u987b\u662f\u6700\u540e\u88ab\u5220\u9664\u7684(\u8bb0\u4e3a $la$ )\n\n3.\u67d0\u6761\u8fb9 $E_1$ \u5fc5\u987b\u7d27\u8ddf\u5728\u67d0\u6761\u8fb9 $E_2$ \u4e4b\u540e\u88ab\u5220\u9664(\u770b\u4f5c\u4e00\u6761\u4ece $E_2$ \u8fde\u5411 $E_1$ \u7684\u8fb9)\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u4e0a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u56fe\uff0c\u79f0\u4e3a\u9650\u5236\u56fe\uff0c\u6bcf\u4e00\u6761\u4e0e\u8fd9\u4e2a\u6811\u4e0a\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\u5728\u8fd9\u4e2a\u56fe\u4e2d\u90fd\u4f1a\u88ab\u8f6c\u5316\u4e3a\u4e00\u4e2a\u70b9\u3002 \u6bcf\u4e2a\u70b9\u7684\u9650\u5236\u56fe\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\u3002\n\n\u663e\u7136\uff0c\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\u7684\u9650\u5236\u56fe\u4e2d\u51fa\u73b0\u4ee5\u4e0b\u4efb\u4f55\u60c5\u51b5\uff0c\u5219\u4e0d\u5408\u6cd5\n\n1.\u9650\u5236\u56fe\u7684\u5f62\u6001\u4e0d\u662f\u4e00\u6761\u6216\u591a\u6761\u94fe\u3002\n\n2.\u6709\u8fb9\u8fde\u5411 $fi$ \u6216\u8005 $la$ \u6709\u8fb9\u8fde\u51fa\u3002\n\n3.$fi$ \u548c $la$ \u5df2\u7ecf\u786e\u5b9a\u4e14\u5f62\u6210\u4e86\u4e00\u6761\u4ece $fi$ \u5230 $la$ \u7684\u94fe\uff0c\u4e14\u94fe\u91cc\u6ca1\u6709\u5305\u542b\u9650\u5236\u56fe\u4e2d\u7684\u6240\u6709\u70b9\u3002(\u6bcf\u6761\u8fb9\u5fc5\u987b\u5220\u9664\uff0c\u4e5f\u5c31\u662f\u9650\u5236\u56fe\u4e2d\u7684\u6240\u6709\u70b9\u6700\u7ec8\u5fc5\u987b\u5f62\u6210\u4e00\u6761\u94fe\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u8fd9\u6837\u7684\u94fe\uff0c\u5176\u4ed6\u70b9\u5c31\u63a5\u4e0d\u5230\u5230\u8fd9\u6761\u94fe\u4e0a\u53bb\u4e86)\n\n\u7ef4\u62a4\u4ee5\u4e0a\u9650\u5236\u6761\u4ef6\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u73af\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u51fa\u5ea6\u548c\u5165\u5ea6\u662f\u5426\u5df2\u7ecf\u4e3a1\uff0c\u518d\u8bb0\u4e0b $fi$ \u548c $la$\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57 $x$ \u627e\u5b83\u80fd\u5230\u7684\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\uff0c\u53ef\u4ee5\u4ee5\u6570\u5b57 $x$ \u6240\u5728\u7684\u70b9\u4e3a\u6839dfs\u4e00\u904d\u6811\uff0c\u8fb9\u8d70\u8fb9\u770b\u8fd9\u6837\u8d70\u662f\u5426\u975e\u6cd5\uff0c\u627e\u5230\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u7684\u70b9\uff0c\u975e\u6cd5\u4e86\u505c\u4e0b\u5373\u53ef\u3002\n\n\u627e\u5230\u6700\u5c0f\u70b9\u4e4b\u540e\u518ddfs\u4e00\u904d\uff0c\u66f4\u65b0\u8def\u5f84\u4e0a\u6bcf\u4e2a\u70b9\u7684\u9650\u5236\u56fe\u4fe1\u606f\u5373\u53ef\u3002\n\n----------\n\u8d34\u4e0a\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define maxn 2005\nusing namespace std;\nstruct node\n{\n\tint fa[maxn],nex[maxn],notrt[maxn];//\u5168\u90e8\u8fb9\u7684\u7f16\u53f7\u90fd\u9664\u4ee5\u4e8c \n\tint getf(int x) {return fa[x]==x?x:fa[x]=getf(fa[x]);}\n\tint fi,la,cc;\n}pt[maxn];\nint pre[maxn<<1],to[maxn<<1],las[maxn],inc=1;\nvoid ins(int a,int b)\n{\n\tpre[++inc]=las[a];\n\tlas[a]=inc,to[inc]=b;\n}\nint nump[maxn],lk[maxn],n;\nint getmin(int x,int la)\n{\n\tint ret=1e9,tmp;\n\tif(la)\n\t{\n\t\tif(!pt[x].la||la/2==pt[x].la)\n\t\t{\n\t\t\tif(!pt[x].nex[la/2]&&(!pt[x].fi||(pt[x].getf(la/2)!=pt[x].getf(pt[x].fi))||pt[x].cc==1)) ret=min(ret,x),lk[x]=0;\n\t\t}\n\t}\n\tfor(int i=las[x];i;i=pre[i])\n\t{\n\t\tint y=to[i]; if(la/2==i/2) continue;\n\t\tif(!la&&(!pt[x].fi||pt[x].fi==i/2))\n\t\t{\n\t\t\tif(!pt[x].la||(pt[x].getf(i/2)!=pt[x].getf(pt[x].la))||pt[x].cc==1)\n\t\t\t{\n\t\t\t\tif(pt[x].notrt[i/2]) continue;\n\t\t\t\ttmp=getmin(y,i);\n\t\t\t\tif(tmp<ret) ret=tmp,lk[x]=y;\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(la/2==pt[x].la||i/2==pt[x].fi||pt[x].getf(la/2)==pt[x].getf(i/2)||pt[x].nex[la/2]||pt[x].notrt[i/2]) continue;\n\t\t\tif(!pt[x].la||!pt[x].fi)\n\t\t\t{\n\t\t\t\ttmp=getmin(y,i);\n\t\t\t\tif(tmp<ret) ret=tmp,lk[x]=y;\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint fx=pt[x].getf(la/2),fy=pt[x].getf(i/2);\n\t\t\t\tint ffx=pt[x].getf(pt[x].fi),ffy=pt[x].getf(pt[x].la);\n\t\t\t\tif(fx>fy) swap(fx,fy); if(ffx>ffy) swap(ffx,ffy);\n\t\t\t\tif((ffx!=fx||ffy!=fy)||pt[x].cc==2)\n\t\t\t\t{\n\t\t\t\t\ttmp=getmin(y,i);\n\t\t\t\t\tif(tmp<ret) ret=tmp,lk[x]=y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\nvoid update(int x,int la)\n{\n\tif(!lk[x])\n\t{\n\t\tpt[x].la=la/2;\n\t\treturn;\n\t}\n\tfor(int i=las[x];i;i=pre[i])\n\t{\n\t\tint y=to[i]; if(y!=lk[x]) continue;\n\t\tif(!la) pt[x].fi=i/2;\n\t\telse\n\t\t{\n\t\t\tpt[x].fa[pt[x].getf(la/2)]=pt[x].getf(i/2);\n\t\t\tpt[x].notrt[i/2]=1,pt[x].nex[la/2]=i/2;\n\t\t\tpt[x].cc--;\n\t\t}\n\t\tupdate(y,i); \n\t}\n}\nvoid Init()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tlas[i]=0;\n\t\tmemset(pt[i].fa,0,sizeof(pt[i].fa));\n\t\tmemset(pt[i].notrt,0,sizeof(pt[i].notrt));\n\t\tmemset(pt[i].nex,0,sizeof(pt[i].nex));\n\t\tpt[i].cc=pt[i].fi=pt[i].la=0;\n\t}\n\tinc=1;\n}\nint T;\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tInit();\n\t\tfor(int i=1;i<=n;i++) scanf(\"%d\",&nump[i]); \n\t\tfor(int i=1,u,v;i<n;i++) scanf(\"%d%d\",&u,&v),ins(u,v),ins(v,u);\n\t\tfor(int x=1;x<=n;x++)\n\t\t\tfor(int i=las[x];i;i=pre[i])\n\t\t\t\tpt[x].fa[i/2]=i/2,pt[x].cc++;\n\t\tfor(int now=1;now<=n;now++)\n\t\t{\n\t\t\tprintf(\"%d \",getmin(nump[now],0));\n\t\t\tupdate(nump[now],0);\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574248129,
        "uid": 20815,
        "name": "PhantasmDragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "## \u6811\u4e0a\u7684\u6570\n [\u9898\u9762](https://www.luogu.com.cn/problem/P5659)\n\u73b0\u5728\u6709\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e2a\u70b9\u6743\uff0c\u4f60\u5207\u65ad\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u4ea4\u6362\u8fb9\u4e0a\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u6c42$1 \\to N$\u70b9\u6743\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u3002\n\n## $\\text{subtask1}$ $N \\leq 10$\n\u8003\u573a\u4e0a\u66b4\u529b\u6807\u914d\uff0c$\\Theta(N!)$\u679a\u4e3e\u6240\u6709\u5220\u8fb9\u987a\u5e8f\uff0c\u7136\u540e\u53d6\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u7ec4\u3002\n\n## $\\text{subtask2}$ \u5b58\u5728\u5ea6\u6570\u4e3a$N - 1$\u7684\u8282\u70b9\n\u5b58\u5728\u5ea6\u6570\u4e3a$N-1$\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u662f\u83ca\u82b1\u56fe\u3002\n\n\u6211\u4eec\u8bbe\u83ca\u82b1\u56fe\u5165\u5ea6\u4e3a$N-1$\u7684\u70b9\u4e3a$rt$\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u5220\u8fb9\u4e00\u6bb5\u5fc5\u5b9a\u662f$rt$\uff0c\u5047\u8bbe\u6211\u4eec\u5220\u8fb9\u987a\u5e8f\u662f$p$\uff0c$p_i$\u8868\u793a\u7b2c$i$\u6b21\u5220\u7684\u70b9\u7f16\u53f7\u3002\n\n\u7b2c$i$\u6b21\u5220\u7684\u8fb9\u5c31\u662f$rt -> p_i$\u3002\n\n\u6bcf\u6b21\u5220\u8fb9\uff0c\u5f53\u524d$p_i$\u7684\u70b9\u6743\u5c31\u786e\u5b9a\u4e86\uff0c\u8fd9\u4e2a\u6027\u8d28\u6bd4\u8f83\u597d\u3002\n\n\u7ecf\u8fc7\u51e0\u904d\u6a21\u62df\uff0c\u6211\u4eec\u53d1\u73b0$a_{p_1}$\u5230\u4e86$p_2$\uff0c$a_{p_2}$\u5230\u4e86$p_3$\uff0c$a_{p_{n-1}}$\u5230\u4e86$rt$\u3002\n\n\u8fd9\u6837\u6211\u4eec\u662f\u4e0d\u662f\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u7684\u5f62\u5f0f\u3002\n\n$rt->p_1->p_2->p_3...->p_{n-1}->rt$\n\n\u8981\u60f3\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u8d2a\u5fc3\u7684\u9009\u62e9\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u8fd9\u4e2a\u73af\u8981\u4e0d\u80fd\u662f\u591a\u4e2a\u5c0f\u73af\u3002\n\n\u6211\u4eec\u5982\u679c\u60f3\u8ba9\u6570\u5b57$i$\u5230$j$\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u9996\u5148$j$\u8fd9\u4e2a\u70b9\u6ca1\u6709\u7528\u8fc7\uff0c\u5e76\u4e14$j$\u548c$p_i$\u4e0d\u5728\u540c\u4e00\u4e2a\u73af\u91cc(\u4e0d\u7136\u5f62\u6210\u4e0d\u4e86\u4e00\u4e2a\u5927\u73af)\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(N^2)$\n```cpp\nnamespace subtask2 {\n    int fa[N], ans[N];\n    bool vis[N];\n    inline int find (int x) {\n        return x == fa[x] ? x : fa[x] = find (fa[x]);\n    }\n    inline void merge (int x, int y) {\n        fa[find (x)] = find (y);\n    }\n    void main () {\n        for (int i = 1; i <= n; i ++ ) fa[i] = i, vis[i] = 0;\n        for (int i = 1; i <= n; i ++ ) {\n            for (int j = 1; j <= n; j ++ ) {\n                if (!vis[j] && (i == n || find (j) != find (p[i]))) {\n                    ans[i] = j; vis[j] = 1; merge (j, p[i]);\n                    break;\n                }\n            }\n        }\n        for (int i = 1; i <= n; i ++ ) printf (\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n    }\n}\n```\n\n## $\\text{subtask3}$ \u6811\u662f\u4e00\u6761\u94fe $N \\leq 160$\n\u5982\u679c\u60f3\u51fa\u94fe\u7684\u90e8\u5206\u5206\uff0c\u6b63\u89e3\u4e5f\u5c31\u4e0d\u8fdc\u4e86\u3002\n\n\u9996\u5148\u6309\u7167\u83ca\u82b1\u56fe\u7684\u601d\u8def\uff0c\u6211\u4eec\u8981\u8ba9\u6570\u5b57$i$\u8d70\u5411$j$\u70b9\u3002\n\n\u6211\u4eec\u89c4\u5b9a\u4e09\u7c7b\u70b9(\u6b63\u89e3\u4e5f\u8981\u7528\u5230)\n\n**1.\u8d77\u70b9 \u6570\u5b57$i$\u6240\u5728\u7684\u70b9\u3002**\n\n**2.\u9014\u7ecf\u70b9\uff1a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u8def\u8fc7\u7684\u90a3\u4e9b\u70b9\u3002**\n\n**3.\u7ec8\u70b9\uff1a$j$\u70b9\u7684\u4f4d\u7f6e\u3002**\n\n\u6211\u4eec\u5148\u628a\u94fe$dfs$\u5904\u7406\u4e00\u4e0b\uff0c\u8bb0\u5f55\u94fe\u4e0a\u7b2c$i$\u4e2a\u70b9\u662f$a_i$\uff0c$u$\u70b9\u662f\u7b2c$num_u$\u4e2a\u3002\n```CPP\ninline void dfs (int u, int f) { \n\ta[num[u] = ++ cnt] = u; \n\tfor (int i = head[u]; i; i = edge[i].nxt) { \n\t\tint v = edge[i].to; \n\t\tif (v == f) continue; \n\t\tdfs (v, u); \n\t} \n}\n```\n\u9996\u5148\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5220\u8fb9\u987a\u5e8f\u6709\u4e24\u79cd\uff0c\u5148\u5220\u6389\u5de6\u540e\u5220\u53f3\uff0c\u5148\u5220\u53f3\u540e\u5220\u5de6\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2a$tag$\u6570\u7ec4\u8868\u793a\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5220\u8fb9\u987a\u5e8f\u3002$tag = 0$\u8868\u793a\u8fd9\u4e2a\u70b9\u6ca1\u6709\u6807\u8bb0\uff0c$tag = 1$\u8868\u793a\u5148\u5220\u6389\u5de6\u540e\u5220\u53f3\uff0c$tag = 2$\u8868\u793a\u5148\u5220\u53f3\u540e\u5220\u5de6\u3002\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u60f3\u8ba9\u6570\u5b57$i$\u8d70\u5411$j$\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u3002\n\u5982\u679c$num_{p_i} \\leq num_j$ \u90a3\u4e48\u76f8\u5f53\u4e8e\u6570\u5b57$i$\u5411\u5de6\u8d70\u3002\n#### \u8d77\u70b9\n\u6211\u4eec\u8003\u8651\u8d77\u70b9$p_i$\u7684\u5220\u8fb9\u987a\u5e8f\uff0c$p_i$\u8981\u5f80\u5de6\u8d70\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u5148\u53f3\u540e\u5de6\uff0c\u4e0d\u7136$p_i$\u4e0a\u7684\u70b9\u5c31\u4e0d\u662f$p_i$\n#### \u9014\u7ecf\u70b9\n\u6211\u4eec\u8003\u8651\u9014\u7ecf\u70b9\uff0c\u5982\u679c$p_i$\u60f3\u5f80\u5de6\u8d70\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u5148\u5220\u6389\u5de6\u8fb9\u7136\u540e\u5220\u6389\u53f3\u8fb9\uff0c\u4e0d\u7136\u6574\u6761\u8def\u5f84\u5c31\u65ad\u4e86\u3002\n#### \u7ec8\u70b9\n\u6211\u4eec\u8003\u8651\u7ec8\u70b9\u5220\u8fb9\u987a\u5e8f\uff0c\u5982\u679c\u6211\u4eec\u5148\u5220\u5de6\u540e\u5220\u53f3\u7684\u8bdd\uff0c\u90a3\u4e48\u7ec8\u70b9\u7684\u70b9\u5c31\u88ab\u53f3\u8fb9\u7684\u70b9\u66ff\u6362\u6389\u4e86\uff0c\u6240\u4ee5\u4e5f\u8981\u5148\u53f3\u540e\u5de6\u3002\n\n\u53cd\u4e4b$num_{p_i} > num_j$\u4e5f\u540c\u7406\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5bf9\u5e94\u7684\u6253\u4e00\u4e2a$tag$\u4e0a\u53bb\u3002\n\u5982\u679c\u60f3\u8ba9\u6570\u5b57$i$\u8d70\u5411\u70b9$j$ \u90a3\u4e48\u5c31\u8981\u4e0e\u5148\u524d\u7684$\\text{tag}$\u4e0d\u91cd\u5408\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta (N^3)$ \u4f46\u662f\u53ef\u4ee5\u8fc7$\\text {ccf}$ $N \\leq 2000$\u7684\u6570\u636e\u3002\n\n$\\Theta (N^3)$\u7684\u4ee3\u7801\n```CPP\nnamespace subtask3 {\n    int cnt, a[N], ans[N], tag[N], num[N];\n    bool vis[N];\n    inline void dfs (int u, int f) {\n        a[num[u] = ++ cnt] = u;\n        for (int i = head[u]; i; i = edge[i].nxt) {\n            int v = edge[i].to;\n            if (v == f) continue;\n            dfs (v, u);\n        }\n    }\n//    tag[1] \u8868\u793a\u5148\u5de6\u540e\u53f3\n//    tag[2] \u8868\u793a\u5148\u53f3\u540e\u5de6 \n    inline bool check_l (int p1, int p2) { //\u5224\u65adp1->p2\u7684\u53ef\u884c\u6027\n        if (tag[p1] == 1 || tag[p2] == 1) return false;\n        for (int i = p1 + 1; i < p2; i ++ ) if (tag[i] == 2) return false;\n        return true;\n    }\n    inline void push_l (int p1, int p2) { //\u6253\u6807\u8bb0\n        if (p1 != 1 && p1 != n) tag[p1] = 2;\n        if (p2 != 1 && p2 != n) tag[p2] = 2;\n        for (int i = p1 + 1; i < p2; i ++ ) tag[i] = 1;\n        return;\n    }\n    inline bool check_r (int p1, int p2) {\n        if (tag[p1] == 2 || tag[p2] == 2) return false;\n        for (int i = p2 + 1; i < p1; i ++ ) if (tag[i] == 1) return false;\n        return true;\n    }\n    inline void push_r (int p1, int p2) {\n        if (p1 != 1 && p1 != n) tag[p1] = 1;\n        if (p2 != 1 && p2 != n) tag[p2] = 1;\n        for (int i = p2 + 1; i < p1; i ++ ) tag[i] = 2;\n        return;        \n    }\n    void main () {\n        for (int i = 1; i <= n; i ++ ) tag[i] = vis[i] = 0; cnt = 0;\n        for (int i = 1; i <= n; i ++ ) if (in[i] == 1) {dfs (i, 0); break;}\n//\u5c06\u6570\u5b57i\u79fb\u52a8\u5230j\u70b9  \n        for (int i = 1; i <= n; i ++ ) {\n            for (int j = 1; j <= n; j ++ ) {\n                if (!vis[j] && num[j] != num[p[i]]) {\n                    bool flag = false;\n                    if (num[p[i]] <= num[j]) {\n                        if (check_l (num[p[i]], num[j])) push_l (num[p[i]], num[j]), flag = true;\n                    }\n                    else {\n                        if (check_r (num[p[i]], num[j])) push_r (num[p[i]], num[j]), flag = true;\n                    }\n                    if (flag) {ans[i] = j; vis[j] = 1;break;}\n                }\n            }\n        }\n        for (int i = 1; i <= n; i ++ ) printf (\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n    }\n}\n```\n\n## $\\text {subtask4}$ \u6811\u662f\u4e00\u6761\u94fe $N \\leq 2000$\n\u90a3\u4e48\u5982\u4f55$\\Theta (N ^ 2)$\u89e3\u51b3\u94fe\u7684\u95ee\u9898\u5462\uff1f\n\n\u5bf9\u4e8e\u6570\u5b57$i$\u6211\u4eec\u53ef\u4ee5$\\text{dfs}$\u904d\u5386\u6574\u6761\u94fe\u627e\u5230\u6700\u5c0f\u7684\u5408\u6cd5\u7684\u4f4d\u7f6e\u3002\u7136\u540e\u518d\u6807\u8bb0\u4e00\u4e0b\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6570\u5b57\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta (N)$\n\n\u627e\u70b9\u548c\u6807\u8bb0\u7684\u590d\u6742\u5ea6$\\Theta (N)$\n\n\u603b\u590d\u6742\u5ea6$\\Theta (N^2)$\n\n```CPP\nnamespace subtask4 {\n    int cnt, a[N], ans[N], tag[N], num[N];\n    bool vis[N];\n    inline void dfs (int u, int f) {\n        a[num[u] = ++ cnt] = u;\n        for (int i = head[u]; i; i = edge[i].nxt) {\n            int v = edge[i].to;\n            if (v == f) continue;\n            dfs (v, u);\n        }\n    }\n    inline void push_l (int p1, int p2) { //\u6253\u6807\u8bb0\n        if (p1 != 1 && p1 != n) tag[p1] = 2;\n        if (p2 != 1 && p2 != n) tag[p2] = 2;\n        for (int i = p1 + 1; i < p2; i ++ ) tag[i] = 1;\n        return;\n    }\n    inline void push_r (int p1, int p2) {\n        if (p1 != 1 && p1 != n) tag[p1] = 1;\n        if (p2 != 1 && p2 != n) tag[p2] = 1;\n        for (int i = p2 + 1; i < p1; i ++ ) tag[i] = 2;\n        return;        \n    }\n    inline int find_l (int u) {\n        int res = n + 1;\n        if (tag[num[u]] == 2) return res;\n        for (int j = num[u] - 1; j >= 1; j -- ) {\n            if (tag[j] == 1) {\n                if (!vis[j]) res = min (res, a[j]);\n                break;\n            } \n            if (tag[j] == 0 && !vis[j]) res = min (res, a[j]);\n        }\n        return res;\n    }\n    inline int find_r (int u) {\n        int res = n + 1;\n        if (tag[num[u]] == 1) return res;\n        for (int j = num[u] + 1; j <= n; j ++ ) {\n            if (tag[j] == 2) {\n                if (!vis[j]) res = min (res, a[j]);\n                break;\n            }\n            if (tag[j] == 0 && !vis[j]) res = min (res, a[j]);\n        }\n        return res;\n    }\n    void main () {\n        for (int i = 1; i <= n; i ++ ) tag[i] = vis[i] = 0; cnt = 0;\n        for (int i = 1; i <= n; i ++ ) if (in[i] == 1) {dfs (i, 0); break;}\n        for (int i = 1; i <= n; i ++ ) {\n            int rt = find_l (p[i]), tp;\n            if (rt < (tp = find_r (p[i]))) push_r (num[p[i]], num[rt]);\n            else rt = tp, push_l (num[p[i]], num[rt]);\n            ans[i] = rt;\n            vis[num[rt]] = 1;\n        }\n        for (int i = 1; i <= n; i ++ ) printf (\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n    }\n}\n```\n\n## $\\text{subtask5}$ \u6811\u5f62\u6001\u4efb\u610f $N \\leq 2000$\n~~fuck \u4e3a\u4ec0\u4e48\u7ec6\u8282\u8fd9\u4e48\u591a~~\n\u6211\u4eec\u53ef\u4ee5\u5411\u94fe$\\Theta (N^2)$\u7b97\u6cd5\u4e00\u6837\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u8fde\u63a5\u5b83\u7684\u8fb9\uff0c\u5220\u8fb9\u5fc5\u7136\u6709\u987a\u5e8f\uff0c\u800c\u4e14\u6bcf\u4e2a\u70b9\u7684\u5220\u8fb9\u987a\u5e8f\u4e92\u4e0d\u5f71\u54cd\u3002 \u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u70b9\u7684\u5220\u8fb9\u987a\u5e8f\u96c6\uff0c\u8fd9\u4e2a\u987a\u5e8f\u96c6\u6784\u6210\u4e00\u6761\u94fe\u7684\u5f62\u5f0f\u3002\n\n\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5220\u8fb9\u987a\u5e8f\u96c6\uff0c\u5f53\u524d\u70b9\u7684\u6700\u5148\u5220\u9664\u7684\u8fb9\u7684\u5e8f\u53f7\uff0c\u6700\u540e\u5220\u9664\u70b9\u7684\u8fb9\u7684\u5e8f\u53f7\uff0c\u5f53\u524d\u70b9\u6709\u591a\u5c11\u6761\u8fb9\u672a\u5220\u9664\u3002\n\n$fir_u$\u4e3a\u8fd9\u4e2a\u70b9\u5220\u8fb9\u96c6\u7684\u6700\u5148\u5220\u9664\u7684\u8fb9\u3002\n\n$lst_u$\u4e3a\u8fd9\u4e2a\u70b9\u5220\u8fb9\u96c6\u7684\u6700\u540e\u5220\u9664\u7684\u8fb9\u3002\n\n$pre_p$\u8868\u793a\u8fd9\u6761\u8fb9\u662f\u5426\u6709\u524d\u9a71\u3002\n\n$nxt_p$\u8868\u793a\u8fd9\u6761\u8fb9\u662f\u5426\u6709\u540e\u7ee7\u3002\n\n\u6211\u4eec\u8fd8\u662f\u8003\u8651\u5982\u4f55\u5c06\u6570\u5b57$i$\u79fb\u52a8\u5230$j$\u70b9\uff0c\u8fd8\u662f\u8d77\u70b9\uff0c\u9014\u7ecf\u70b9\uff0c\u7ec8\u70b9\u8003\u8651\u3002\n\n#### \u8d77\u70b9\n\u6211\u4eec\u8003\u8651\u8d77\u70b9$p_i$\u5f00\u59cb\u5b58\u653e\u7684\u662f$i$\uff0c\u5982\u679c\u6211\u4eec\u6709\u5220\u8fb9\u7684\u8bdd\uff0c\u90a3\u4e48\u6570\u5b57$i$\u5c31\u4e0d\u4f1a\u518d\u539f\u4f4d\u7f6e\uff0c\u8bf4\u660e\u6211\u4eec\u5fc5\u987b\u8ba9$p_i$\u8d70\u5411$j$\u70b9\u7684\u8fb9\u6700\u5148\u5220\u9664\u3002\n\n\u5176\u6b21\u6211\u4eec\u8981\u8003\u8651\uff0c\u5982\u679c\u5f53\u524d\u70b9\u6700\u540e\u5220\u8fb9\u5df2\u7ecf\u786e\u5b9a$last_u$\uff0c\u5982\u679c\u4ed6\u4eec\u5728\u540c\u4e00\u96c6\u5408\uff0c\u4f46\u662f\u8fd8\u6709$>1$\uff0c\u90a3\u4e48\u8bf4\u660e\u6709\u70b9\u4e0d\u5728\u5220\u8fb9\u5e8f\u5217\u91cc\u9762\uff0c\u4f46\u662f$last_u$\u548c\u8d77\u70b9\u8fb9\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u8bf4\u660e\u8981\u4e48\u6709\u8fb9\u5728\u8d77\u70b9\u8fb9\u524d\uff0c\u8981\u4e48\u6709\u8fb9\u5728\u8d77\u70b9\u8fb9\u540e\uff0c\u5426\u5219\u5f62\u6210\u7684\u5c31\u4e0d\u662f\u4e00\u6761\u94fe\uff0c\u4f46\u662f\u65e2\u7136\u662f\u8d77\u70b9\u8fb9\u5c31\u4e0d\u4f1a\u6709\u6bd4\u4ed6\u524d\u7684\u8fb9\uff0c\u7ec8\u70b9\u8fb9\u4e5f\u4e0d\u53ef\u80fd\u6709\u66f4\u540e\u9762\u7684\u8fb9\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u5fc5\u5b9a\u662f\u8981\u6392\u9664\u3002\n\n#### \u9014\u7ecf\u70b9\n\u6211\u4eec\u627e\u4e00\u4e2a$p_i$\u5230$j$\u70b9\u8981\u7ecf\u8fc7\u7684\u70b9$u$\n\u5047\u8bbe\u8981\u4ece$p_i$\u5230$j$\u70b9\u8981\u7ecf\u8fc7$u$\u7684\u8fb9$(v,u)$\u548c$(u,w)$\u8bbe\u8fd9\u4e24\u6761\u8fb9\u7f16\u53f7\u4e3a$p_1$\u548c$p_2$\n\u90a3\u4e48\u8fd9\u4e24\u6761\u8fb9\u7684\u7f16\u53f7 \u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u5148\u5220$p_1$\uff0c\u518d\u5220$p_2$\uff0c\u4e0d\u7136\u5230\u4e86$u$\u70b9\u7684\u6570\u5b57$i$\u5c31\u4f1a\u8dd1\u5230\u5176\u4ed6\u5730\u65b9\u53bb\u4e86\u3002\n\n\u9996\u5148\u5982\u679c\u7740\u4e24\u6761\u8fb9\u5df2\u7ecf\u5728\u540c\u4e00\u6761\u5173\u7cfb\u94fe\u91cc\u9762\uff0c\u56e0\u4e3a$p_1$\u548c$p_2$\u4e0d\u53ef\u80fd\u4e3a\u6b63\u786e\u7684\u524d\u540e\u5173\u7cfb\uff0c\u56e0\u4e3a\u6811\u7684\u6027\u8d28\uff0c\u4e24\u4e24\u70b9\u8def\u5f84\u552f\u4e00\u786e\u5b9a\u3002\n\n\u5982\u679c$p2$\u4e3a\u5220\u9664\u7684\u8d77\u70b9\u8fb9\uff0c\u6216\u8005$p_1$\u4e3a\u5220\u9664\u7684\u7ec8\u70b9\u8fb9\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u5408\u6cd5\uff0c\u4e0d\u7136\u65e0\u6cd5\u4fdd\u8bc1$p_1$\u5728$p_2$\u524d\u9762\u4e14\u76f8\u90bb\u3002\n\n\u5982\u679c$pre_{p_2}$\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u6216\u8005$nxt_{p_1}$\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u56e0\u4e3a$p_1$\u548c$p_2$\u4e0d\u5728\u4e00\u4e2a\u504f\u5e8f\u94fe\u4e4b\u4e2d\uff0c\u6240\u4ee5\u5fc5\u7136\u4e0d\u5408\u6cd5\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u5c31\u662f\u4e0d\u80fd\u8ba9\u8fd9\u6761\u94fe\u63d0\u524d\u95ed\u5408\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86$fir_u$\u548c$las_u$\uff0c\u5e76\u4e14$fir_u$\u548c$p_1$\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c$las_u$\u548c$p_2$\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u9664\u975e\u672a\u88ab\u5220\u9664\u7684\u70b9\u53ea\u6709\u4e24\u6761\uff0c\u5426\u5219\u5c06$p_1$\u548c$p_2$\u8fde\u5728\u4e00\u8d77\uff0c\u65e0\u6cd5\u5f62\u6210\u4e00\u6761\u5b8c\u6574\u7684\u94fe\n\n\n#### \u7ec8\u70b9\n\n\u7ec8\u70b9\u5224\u65ad\u7684\u8bdd\u53ea\u9700\u8981\u4ed6\u662f\u5165\u8fb9$p$\u662f\u6700\u540e\u5220\u9664\u7684\u3002\n\n\u5982\u679c\u4ed6\u8981\u662f\u7ec8\u70b9\uff0c\u9996\u5148\u4ed6\u4e0d\u80fd\u662f\u8d77\u70b9(\u663e\u7136)\u3002\n\n\u5176\u6b21\u7ec8\u70b9$u$\u70b9\u7684\u6700\u540e\u5220\u9664\u8fb9$lst_u$\u8981\u4e48\u4e3a$0$(\u672a\u5b9a\u4e49)\uff0c\u8981\u4e48\u4e3a$p$\uff0c\u5982\u679c\u6709$nxt_p$\u7684\u8bdd\uff0c\u5fc5\u7136\u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u7ec8\u70b9\u3002\n\n\u4e3a\u4e86\u9632\u6b62\u4ed6\u63d0\u524d\u95ed\u5408\uff0c\u5982\u679c$fir_u$\u548c$p$\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u90a3\u4e48\u4e3a\u52a0\u5165\u70b9\u7684\u6570\u91cf\u5fc5\u987b\u662f$1$(\u5373\u53ea\u6709$p$\u6ca1\u6709\u52a0\u5165)\u3002\n\n```CPP\ninline  int  dfs (int u, int f) {//f\u8868\u793a\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002\n\tint res = n +  1;\n\tif (f && (!t[u].lst  ||  t[u].lst  == f) ) {\n\t\tif (!t[u].nxt[f] && !(t[u].fir  &&  in[u] >  1  &&  t[u].same (f, t[u].fir)))\n\t\t\tres = u;\n\t}\n\tfor (int i =  head[u]; i; i =  edge[i].nxt) {\n\t\tint v =  edge[i].to, id = i >>  1;\n\t\tif (f == id) continue;\n\t\tif (!f) {\n\t\t\tif (!t[u].fir  ||  t[u].fir  == id) {\n\t\t\tif (t[u].pre[id]) continue;\n\t\t\tif (t[u].lst  &&  in[u] >  1  &&  t[u].same (t[u].lst, id)) continue;\n\t\t\tchkmin (res, dfs (v, id));\n\t\t\t} else  continue;\n\t//\u8d77\u70b9\u5224\u65ad\n\t\t} else {\n\t//\u9014\u7ecf\u70b9\n\t\t\tif (t[u].fir  == id ||  t[u].lst  == f ||  t[u].same (id, f)) continue;\n\t\t\tif (t[u].pre[id] ||  t[u].nxt[f]) continue;\n\t\t\tif (t[u].fir  &&  t[u].lst  &&  in[u] >  2  &&  t[u].same (t[u].fir, f) &&  t[u].same (t[u].lst, id)) continue;\t\n\t\t\tchkmin (res, dfs (v, id));\n\t\t}\n\t}\n\treturn res;\n}\n```\n\n\u7136\u540e\u6211\u4eec\u65e2\u7136\u627e\u5230\u4e86\u7ec8\u70b9$i$\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6109\u5feb\u7684\u5220\u9664\u64cd\u4f5c\u4e86\u3002\n```CPP\ninline bool push (int u, int f, int ed) {\n\tif (u == ed) {\n\t\tt[u].lst = f;\n\t\treturn true;\n\t}\n\tfor (int i = head[u]; i; i = edge[i].nxt) {\n\t\tint v = edge[i].to, id = i >> 1;\n\t\tif (id == f) continue;\n\t\tif (push (v, id, ed)) {\n\t\t\tif (!f) {\n\t\t\t\tt[u].fir = id;\n\t\t\t} else {\n\t\t\t\tt[u].nxt[f] = t[u].pre[id] = 1; in[u] -- ;\n\t\t\t\tt[u].merge (f, id);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n\u7ec8\u4e8e$AC$\u4e86\uff0c\u6fc0\u52a8\u3002\n```CPP\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <map>\n#include <queue>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int INF = 2139062143;\n\ntemplate <typename T> void chkmax(T &x, T y) {x = x > y ? x : y;}\ntemplate <typename T> void chkmin(T &x, T y) {x = x > y ? y : x;}\n\ntemplate <typename T> void read (T &x) {\n    x = 0; bool f = 1; char ch;\n    do {ch = getchar(); if (ch == '-') f = 0;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0'; ch = getchar();} while (ch >= '0' && ch <= '9');\n    x = f ? x : -x;\n}\n\ntemplate <typename T> void write (T x) {\n    if (x < 0) x = ~x + 1, putchar ('-');\n    if (x > 9) write (x / 10);\n    putchar (x % 10 + '0');\n}\n\nconst int N = 2000 + 50;\nconst int M = 4000 + 50;\n\nstruct EDGE {\n    int u, to, nxt;\n} edge[M];\n\nint T, n, E, Max_In, p[N], x[N], y[N], in[N], head[N];\n\ninline void addedge (int u, int v) {\n    edge[++E].to = v;\n    edge[E].nxt = head[u];\n    head[u] = E;\n}\n\ninline void Clear () {\n    E = 1; Max_In = 0;\n    for (int i = 0; i <= n; i ++ ) head[i] = in[i] = 0;\n}\n\nnamespace subtask2 {\n    int fa[N], ans[N];\n    bool vis[N];\n    inline int find (int x) {\n        return x == fa[x] ? x : fa[x] = find (fa[x]);\n    }\n    inline void merge (int x, int y) {\n        fa[find (x)] = find (y);\n    }\n    void main () {\n        for (int i = 1; i <= n; i ++ ) fa[i] = i, vis[i] = 0;\n        for (int i = 1; i <= n; i ++ ) {\n            for (int j = 1; j <= n; j ++ ) {\n                if (!vis[j] && (i == n || find (j) != find (p[i]))) {\n                    ans[i] = j; vis[j] = 1; merge (j, p[i]);\n                    break;\n                }\n            }\n        }\n        for (int i = 1; i <= n; i ++ ) printf (\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n    }\n}\n\nnamespace subtask4 {\n    int cnt, a[N], ans[N], tag[N], num[N];\n    bool vis[N];\n    inline void dfs (int u, int f) {\n        a[num[u] = ++ cnt] = u;\n        for (int i = head[u]; i; i = edge[i].nxt) {\n            int v = edge[i].to;\n            if (v == f) continue;\n            dfs (v, u);\n        }\n    }\n    inline void push_l (int p1, int p2) { //\u6253\u6807\u8bb0\n        if (p1 != 1 && p1 != n) tag[p1] = 2;\n        if (p2 != 1 && p2 != n) tag[p2] = 2;\n        for (int i = p1 + 1; i < p2; i ++ ) tag[i] = 1;\n        return;\n    }\n    inline void push_r (int p1, int p2) {\n        if (p1 != 1 && p1 != n) tag[p1] = 1;\n        if (p2 != 1 && p2 != n) tag[p2] = 1;\n        for (int i = p2 + 1; i < p1; i ++ ) tag[i] = 2;\n        return;        \n    }\n    inline int find_l (int u) {\n        int res = n + 1;\n        if (tag[num[u]] == 2) return res;\n        for (int j = num[u] - 1; j >= 1; j -- ) {\n            if (tag[j] == 1) {\n                if (!vis[j]) res = min (res, a[j]);\n                break;\n            } \n            if (tag[j] == 0 && !vis[j]) res = min (res, a[j]);\n        }\n        return res;\n    }\n    inline int find_r (int u) {\n        int res = n + 1;\n        if (tag[num[u]] == 1) return res;\n        for (int j = num[u] + 1; j <= n; j ++ ) {\n            if (tag[j] == 2) {\n                if (!vis[j]) res = min (res, a[j]);\n                break;\n            }\n            if (tag[j] == 0 && !vis[j]) res = min (res, a[j]);\n        }\n        return res;\n    }\n    void main () {\n        for (int i = 1; i <= n; i ++ ) tag[i] = vis[i] = 0; cnt = 0;\n        for (int i = 1; i <= n; i ++ ) if (in[i] == 1) {dfs (i, 0); break;}\n        for (int i = 1; i <= n; i ++ ) {\n            int rt = find_l (p[i]), tp;\n            if (rt < (tp = find_r (p[i]))) push_r (num[p[i]], num[rt]);\n            else rt = tp, push_l (num[p[i]], num[rt]);\n            ans[i] = rt;\n            vis[num[rt]] = 1;\n        }\n        for (int i = 1; i <= n; i ++ ) printf (\"%d%c\", ans[i], i == n ? '\\n' : ' ');\n    }\n}\n\nnamespace subtask5 {\n    struct UnionFindSet {\n        int fa[N], fir, lst;\n        bool pre[N], nxt[N];\n        inline void build () {\n            for (int i = 1; i <= n; i ++ ) pre[i] = nxt[i] = false, fa[i] = i;\n            fir = lst = 0;\n        }\n        inline int find (int x) {\n            return x == fa[x] ? x : fa[x] = find (fa[x]);\n        }\n        inline bool same (int x, int y) {\n            return find (x) == find (y);\n        }\n        inline void merge (int x, int y) {\n            fa[find (x)] = find (y);\n        }\n    } t[N];\n\n        inline int dfs (int u, int f) {\n            int res = n + 1;\n            if (f && (!t[u].lst || t[u].lst == f) ) {\n                if (!t[u].nxt[f] && !(t[u].fir && in[u] > 1 && t[u].same (f, t[u].fir))) \n                    res = u;\n            }\n            for (int i = head[u]; i; i = edge[i].nxt) {\n                int v = edge[i].to, id = i >> 1;\n                if (f == id) continue;\n                if (!f) {\n                    if (!t[u].fir || t[u].fir == id) {\n                        if (t[u].pre[id]) continue;\n                        if (t[u].lst && in[u] > 1 && t[u].same (t[u].lst, id)) continue;\n                        chkmin (res, dfs (v, id));\n                    } else continue;\n                } else {\n                    if (t[u].fir == id || t[u].lst == f || t[u].same (id, f)) continue;\n                    if (t[u].pre[id] || t[u].nxt[f]) continue;\n                    if (t[u].fir && t[u].lst && in[u] > 2 && t[u].same (t[u].fir, f) && t[u].same (t[u].lst, id)) continue;\n                    chkmin (res, dfs (v, id));\n                }\n            }\n            return res;\n        }\n    \n    inline bool push (int u, int f, int end) {\n        if (u == end) {\n            t[u].lst = f;\n            return true; \n        }\n        for (int i = head[u]; i; i = edge[i].nxt) {\n            int id = i >> 1, v = edge[i].to;\n            if (id == f) continue;\n            if (push (v, id, end)) {\n                if (!f) t[u].fir = id;\n                else {\n                    t[u].nxt[f] = t[u].pre[id] = true; in[u] -- ;\n                    t[u].merge (f, id);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    inline void main () {\n        for (int i = 1; i <= n; i ++ ) t[i].build ();\n        for (int i = 1; i <= n; i ++ ) {\n            int ret = dfs (p[i], 0);\n            push (p[i], 0, ret);\n            printf (\"%d%c\", ret, i == n ? '\\n' : ' ');\n        }\n    }\n}\n\nint main () {\n    read (T);\n    while (T -- ) {\n        read (n); Clear ();\n        for (int i = 1; i <= n; i ++ ) read (p[i]);\n        for (int i = 1, u, v; i < n; i ++ ) {\n            read (u); read (v);\n            x[i] = u; y[i] = v;\n            addedge (u, v);\n            addedge (v, u);\n            in[u] ++ ; in[v] ++ ;\n            chkmax (Max_In, max (in[u], in[v]));\n        }\n        if (Max_In == n - 1) subtask2::main ();\n        else if (Max_In == 2) subtask4::main ();\n        else subtask5::main ();\n    }\n    return 0;\n}\n```",
        "postTime": 1583050224,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5659 \u3010\u6811\u4e0a\u7684\u6570\u3011"
    }
]