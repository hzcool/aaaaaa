[
    {
        "content": "\u505a\u6cd5\uff1a\u5e73\u8861\u6811\uff08Splay\uff09\u7ef4\u62a4\u54c8\u5e0c\u503c\n\n---\n\n\u8fd9\u7bc7\u9898\u89e3\u4f1a\u5177\u4f53\u8bb2\u8bb2 Splay \u7684\u8fc7\u7a0b\uff0c\u4f9b\u65b0\u624b\u53c2\u8003\u3002\n\n---\n\n\u89c2\u5bdf\u63d2\u5165\u64cd\u4f5c\uff0c\u63d2\u5165\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e0b\u6807\uff0c\u6bd4\u5982\u5728\u4e0b\u6807 2 \u548c 3 \u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u5b57\u6bcd a\uff0c\u76f8\u5f53\u4e8e\u63d2\u5165\u4e86\u4e00\u4e2a\u4f4d\u4e8e 2.5 \u7684 a \uff08\u8111\u8865\u5373\u53ef\uff09\u3002\u5bf9\u4e8e\u6b64\u7c7b\u95ee\u9898\uff0c\u5e73\u8861\u6811\u4e0a\u7684\u5173\u952e\u5b57\u8bbe\u4e3a\u4e0b\u6807\uff0c\u800c\u5b83\u7684\u503c\u5219\u4e3a\u5b83\u8868\u793a\u7684\u5b57\u6bcd\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u662f\u5728\u4e0b\u6807\u6bd4\u5b83\u5c0f\u7684\u5b57\u7b26\uff0c\u53f3\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u662f\u4e0b\u6807\u6bd4\u5b83\u5927\u7684\u5b57\u7b26\u3002\n\n\u5148\u8bf4\u67e5\u8be2\u64cd\u4f5c\u3002  \n\u4e8c\u5206\u6c42 Hash \u503c\u7684\u505a\u6cd5\u6bd4\u8f83\u660e\u663e\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2\u533a\u95f4\u67e5\u8be2 Hash\u3002\u5f53\u6211\u4eec\u67e5\u8be2\u533a\u95f4 $[l,r]$ \u7684 Hash \u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u628a\u5b83\u8f6c\u6362\u4e3a\u6811\u7684 Hash \u503c\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cjq3c3ej.png)\n\n\u90a3\u4e48\uff0cA \u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0b\u6807\u5927\u4e8e $l-1$ \u4e14\u5c0f\u4e8e $r+1$ \u7684\u6570\uff0c\u5b9e\u9645\u5c31\u662f\u533a\u95f4 $[l,r]$\u3002\n\n\u7ef4\u62a4 Hash \uff1a`s[x].hs=s[s[x].son[0]].hs+(ull)s[x].val*p[s[s[x].son[0]].sz] + s[s[x].son[1]].hs*p[s[s[x].son[0]].sz+1];`\n\n\u5176\u4e2d\uff0c$p(i)$ \u8868\u793a\u8fdb\u5236\u7684 $i$ \u6b21\u65b9\u3002\n\n---\n\n\u4fee\u6539\u64cd\u4f5c\n\n\n\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u628a\u5f85\u4fee\u6539\u7684\u8282\u70b9\u65cb\u8f6c\u81f3\u6839\u8282\u70b9\u540e\u76f4\u63a5\u4fee\u6539\u5373\u53ef\u3002\n\n---\n\n\u63d2\u5165\u64cd\u4f5c\n\n\u6bd4\u5982\u6211\u4eec\u9700\u8981\u63d2\u5165\u4e0b\u6807\u4e3a 2.5 \u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63d2\u5728\u8fd9\u91cc\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/91yvoyct.png)\n\n\u867d\u7136\u4e0d\u80fd\u771f\u7684\u63d2\u5165 2.5 \u4f46\u6211\u4eec\u53ea\u8981\u628a\u8282\u70b9\u63d2\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u65e0\u8bba\u5982\u4f55\u65cb\u8f6c\u5b83\u90fd\u80fd\u7ef4\u6301\u4e0b\u6807\u4e3a 2.5 \u7684\u6027\u8d28\u3002\n\n---\n\n\u63d0\u4f9b\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ull unsigned long long\nint read() {\n\tint x=0, f=1; char ch=' ';\n\twhile(!isdigit(ch)) {ch=getchar(); if(ch=='-') f=-1;}\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48), ch=getchar();\n\treturn x*f;\n}\nint n, root, size;\null p[1000005];\nstruct AB{\n\tint val, f, son[2], sz;\n\tull hs;\n}s[1000005];\nint get_son(int x) {\n\treturn x==s[s[x].f].son[1];\n}\nvoid update(int x) {\n\tif(!x) return;\n\ts[x].sz=1;\n\tif(s[x].son[0]) s[x].sz+=s[s[x].son[0]].sz;\n\tif(s[x].son[1]) s[x].sz+=s[s[x].son[1]].sz;\n\ts[x].hs=s[s[x].son[0]].hs+(ull)s[x].val*p[s[s[x].son[0]].sz] + s[s[x].son[1]].hs*p[s[s[x].son[0]].sz+1];\n}\nvoid build(int l, int r, int x) {\n\tif(l>r) return;\n\tint mid=(l+r)>>1;\n\tif (mid >= x) s[x].son[1] = mid;\n\telse s[x].son[0] = mid;\n\ts[mid].f = x, s[mid].sz = 1;\n\tif (l==r) return;\n\tbuild(l, mid-1, mid), build(mid+1, r, mid);\n\tupdate(mid);\n\treturn ;\n}\nvoid rotate(int x) {\n\tint fa=s[x].f, ffa=s[fa].f, wson=get_son(x);\n\ts[fa].son[wson]=s[x].son[wson^1];\n\ts[s[fa].son[wson]].f=fa;\n\ts[x].son[wson^1]=fa;\n\ts[fa].f=x;\n\ts[x].f=ffa;\n\tif(ffa) s[ffa].son[s[ffa].son[1]==fa]=x;\n\tupdate(fa);\n\tupdate(x);\n} \nvoid splay(int x, int goal) {\n\tfor(int fa;(fa=s[x].f)!=goal;rotate(x)) {\n\t\tif(s[fa].f!=goal) {\n\t\t\trotate((get_son(x)==get_son(fa))?fa:x);\n\t\t}\n\t}\n\tupdate(x);\n\tif(goal==0) root=x;\n}\nint find(int x) {\n\tint now=root;\n\twhile(1) {\n\t\tif (s[s[now].son[0]].sz+1 == x) return now;\n\t\tif (s[s[now].son[0]].sz+1 < x) x -= (s[s[now].son[0]].sz+1), now = s[now].son[1];\n\t\telse now = s[now].son[0];\n\t}\n}\nint get_hash(int l, int r) {\n\tint x=find(l), y=find(r+2);\n\tsplay(x, 0), splay(y, root);\n\treturn s[s[s[root].son[1]].son[0]].hs;\n}\nchar ch[1000005];\nint t;\nint main() {\n\tscanf(\"%s\", ch+1);\n\tn=strlen(ch+1);\n\tp[0]=1;\n\tfor(int i=1;i<=n*2;i++) p[i]=p[i-1]*27ull;\n\tfor(int i=2;i<=n+1;i++) {\n\t\ts[i].val=s[i].hs=ch[i-1]-'a'+1;\n\t}\n\tbuild(1, n+2, root);\n\troot = (n+3) >> 1, size=n+2;\n\tcin>>t;\n\twhile(t--) {\n\t\tchar type[3], ch[3];\n\t\tscanf(\"%s\", type);\n\t\tif(type[0]=='Q') {\n\t\t\tint x=read(), y=read();\n\t\t\tif(x>y) swap(x, y);\n\t\t\tint l=0, r=size-y-1, mid;\n\t\t\twhile(l<r) {\n\t\t\t\tmid=(l+r+1)>>1;\n\t\t\t\tif(get_hash(x, x+mid-1)==get_hash(y, y+mid-1)) l=mid;\n\t\t\t\telse r=mid-1;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\", l);\n\t\t}\n\t\tif(type[0]=='R') {\n\t\t\tint x=read();\n\t\t\tscanf(\"%s\", ch);\n\t\t\tsplay(find(x+1), 0);\n\t\t\ts[root].val=ch[0]-'a'+1;\n\t\t\tupdate(root);\n\t\t}\n\t\tif(type[0]=='I') {\n\t\t\tint u=read();\n\t\t\tscanf(\"%s\", ch);\n\t\t\tint x=find(u+1), y=find(u+2);\n\t\t\tsplay(x, 0); splay(y, x);\n\t\t\ts[s[root].son[1]].son[0] = ++size;\n\t\t\ts[size].f = s[root].son[1];\n\t\t\ts[size].val = s[size].hs = ch[0]-'a'+1;\n\t\t\tsplay(size, 0);\n\t\t}\n\t}\n}\n```\n\n\n",
        "postTime": 1591065311,
        "uid": 93041,
        "name": "__Watcher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "#### \u66ff\u7f6a\u7f8a\u6811+\u54c8\u5e0c+\u500d\u589e\n\n2008\u5e74\u7684\u9898\uff0c\u73b0\u5728\u60f3\u6765\uff0c\u90a3\u65f6\u5019\u7684OI\u5708\u53ef\u771f\u662f\u7f8e\u597d\uff0c\u4ece\u4e0d\u6076\u610f\u5361\u67d0\u79cd\u7b97\u6cd5\u3002\u5509\uff0c\u65f6\u4ee3\u53d8\u4e86\n\n\u7531\u4e8e\u8fd9\u9898\u8981\u641e\u8fd9\u4e48\u4e2aLCP\uff0c\u8fd8\u8981\u652f\u6301\u63d2\u5165\u3001\u4fee\u6539\u64cd\u4f5c\uff0c\u90a3\u540e\u7f00\u6570\u7ec4\u5c31\u6ca1\u6cd5\u641e\u4e86\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u6574\u68f5\u5b50\u6811\u7684\u54c8\u5e0c\u503c\uff0c\u5047\u8bbe\u53f3\u5b50\u6811\u5927\u5c0f\u4e3a$R$\uff0c\u7136\u540e\u8bbe$pw[x]$\u8868\u793a$base$\u7684$x$\u6b21\u65b9\uff0c\u90a3\u4e48\u54c8\u5e0c\u503c\u7ef4\u62a4\u516c\u5f0f\u5c31\u662f\uff1a$sum[x]=sum[rson[x]]+val[x]*pw[R]+sum[lson[x]]*pw[R+1]$\n\n\u54c8\u5e0c\u6a21\u6570\u8981\u5c3d\u91cf\u5927\u4e00\u4e9b\uff0c\u867d\u7136\u51fa\u9898\u4eba\u5584\u826f\uff0c\u4f46\u6a21\u6570\u5c0f\u8fd8\u662f\u4f1aWA\uff0c\u5efa\u8bae\u4f7f\u7528ULL\u81ea\u7136\u6ea2\u51fa\n\n\u90a3\u4e48\u6c42\u4e24\u4e32\u7684lcp\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u7684\u601d\u60f3\u6765\u641e\u3002\n\n\u9996\u5148\u9700\u8981\u5199\u4e00\u4e2a\u51fd\u6570$find(l,r)$\uff0c\u5b83\u7684\u529f\u80fd\u662f\u6c42\u5f97$l$\u5230$r$\u8fd9\u4e2a\u5b50\u4e32\u7684\u54c8\u5e0c\u503c\u3002\u90a3\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u62c6\u533a\u95f4\u8be2\u95ee\u7684\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u5e73\u8861\u6811\u7684\u62c6\u533a\u95f4\u8be2\u95ee\u66f4\u96be\u5199\uff0c\u601d\u8def\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e2a\u76f4\u63a5\u770b\u4ee3\u7801\u5c31\u5f88\u76f4\u89c2\u4e86\n\n\u7136\u540e\u5c31\u662f\u500d\u589e\u7684\u601d\u60f3\uff0c\u679a\u4e3e$k=17\\to 0$\uff0c\u5982\u679c\u5b50\u4e32$[x,x+2^k)$\u7684\u54c8\u5e0c\u503c\u4e0e\u5b57\u4e32$[y,y+2^k)$\u7684\u76f8\u7b49\uff0c\u90a3\u5c31$x,y$\u90fd\u5411\u53f3\u79fb\u52a8$2^k$\u6b65\uff0c\u540c\u65f6\u4ee4\u7b54\u6848\u52a0\u4e0a$2^k$\u3002\u5f53\u7136\u4f60\u8bf4\u4e8c\u5206\u90a3\u4e5f\u53ef\u4ee5\uff0c\u4f46\u6211\u5904\u7406\u4e8c\u5206\u8fb9\u754c\u7684\u80fd\u529b\u5b9e\u5728\u592a\u5f31\u4e86\uff0c\u5c31\u4e0d\u5199\u4e8c\u5206\u4e86\n\n\u81f3\u4e8e\u7528\u4ec0\u4e48\u6811\uff0c\u90fd\u884c\u3002\u6211\u7528\u7684\u66ff\u7f6a\u7f8a\uff0c\u597d\u5199\u53c8\u8dd1\u5f97\u5feb\uff0c\u76ee\u524d\u662fRank 1\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace IO\n{\n    const int S=(1<<20)+5;\n    char buf[S],*H,*T;\n    inline char Get()\n    {\n        if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n        if(H==T) return -1;return *H++;\n    }\n    inline int read()\n    {\n        int x=0;char c=Get();\n        while(!isdigit(c)) c=Get();\n        while(isdigit(c)) x=x*10+c-'0',c=Get();\n        return x;\n    }\n    inline char readc()\n    {\n        char c=Get();\n        while((c<'A'||c>'Z')&&(c<'a'||c>'z')) c=Get();\n        return c;\n    }\n    char obuf[S],*oS=obuf,*oT=oS+S-1,c,qu[55];int qr;\n    inline void flush(){fwrite(obuf,1,oS-obuf,stdout);oS=obuf;}\n    inline void putc(char x){*oS++ =x;if(oS==oT) flush();}\n    template <class I>inline void print(I x)\n    {\n        if(!x) putc('0');\n        while(x) qu[++qr]=x%10+'0',x/=10;\n        while(qr) putc(qu[qr--]);\n        putc('\\n');\n    }\n}\n\nusing namespace IO;\ntypedef unsigned long long ull;\nconst int N=150010;\nconst double alpha=0.75;\nint lc[N],rc[N],sz[N],tot=0,rt=0;\null val[N],sum[N],pw[N];\nvector<int> A;\n\nbool isbad(int o){return sz[lc[o]]>alpha*sz[o]+5||sz[rc[o]]>alpha*sz[o]+5;}\nvoid maintain(int o)\n{\n    sum[o]=sum[rc[o]]+val[o]*pw[sz[rc[o]]]+sum[lc[o]]*pw[sz[rc[o]]+1];\n    sz[o]=sz[lc[o]]+sz[rc[o]]+1;\n}\n\nvoid flatten(int o)\n{\n    if(!o) return;\n    flatten(lc[o]);\n    A.push_back(o);\n    flatten(rc[o]);\n}\n\nvoid rebuild(int &o,int l,int r)\n{\n    int mid=(l+r)/2;\n    o=A[mid-1];\n    lc[o]=rc[o]=0;\n    if(l<mid) rebuild(lc[o],l,mid-1);\n    if(r>mid) rebuild(rc[o],mid+1,r);\n    maintain(o);\n}\n\nvoid insert(int &o,int k,int x)\n{\n    if(!o)\n    {\n        o=++tot;\n        lc[o]=rc[o]=0;\n        val[o]=sum[o]=x;\n        sz[o]=1;\n        return;\n    }\n    if(isbad(o))\n    {\n        A.clear();flatten(o);\n        rebuild(o,1,A.size());\n    }\n    int szl=sz[lc[o]];\n    if(k<=szl) insert(lc[o],k,x);\n    else insert(rc[o],k-szl-1,x);\n    maintain(o);\n}\n\nvoid modify(int o,int k,int x)\n{\n    int szl=sz[lc[o]];\n    if(k==szl+1) val[o]=x;\n    else if(k<=szl) modify(lc[o],k,x);\n    else modify(rc[o],k-szl-1,x);\n    maintain(o);\n}\n\null find(int o,int l,int r,int nl,int nr)\n{\n    if(l==nl&&r==nr) return sum[o];\n    int szl=sz[lc[o]];ull res=0;\n    if(nr<l+szl) return find(lc[o],l,l+szl-1,nl,nr);\n    if(nl>l+szl) return find(rc[o],l+szl+1,r,nl,nr);\n    if(nl<l+szl) res=find(lc[o],l,l+szl-1,nl,l+szl-1);\n    if(nl<=l+szl&&nr>=l+szl) res=res*pw[1]+val[o];\n    if(nr>l+szl) res=res*pw[nr-l-szl]+find(rc[o],l+szl+1,r,l+szl+1,nr);\n    return res;\n}\n\nint lcp(int x,int y)\n{\n    int res=0;\n    for(int i=17;i>=0;i--)\n    {\n        if(x+(1<<i)-1>tot) continue;\n        if(y+(1<<i)-1>tot) continue;\n        ull s1=find(rt,1,tot,x,x+(1<<i)-1);\n        ull s2=find(rt,1,tot,y,y+(1<<i)-1);\n        if(s1!=s2) continue;\n        res|=1<<i;x+=1<<i;y+=1<<i;\n    }\n    return res;\n}\n\nint main()\n{\n    pw[0]=1;\n    for(int i=1;i<N;i++)\n        pw[i]=pw[i-1]*131;\n    static char ss[N];\n    scanf(\"%s\",ss+1);\n    tot=strlen(ss+1);\n    for(int i=1;i<=tot;i++)\n        A.push_back(i),val[i]=ss[i]-'a'+1;\n    rebuild(rt,1,tot);\n    for(int m=read();m;m--)\n    {\n        char opt=readc();\n        if(opt=='I')\n        {\n            int x=read();\n            char d=readc();\n            insert(rt,x,d-'a'+1);\n        }\n        if(opt=='R')\n        {\n            int x=read();\n            char d=readc();\n            modify(rt,x,d-'a'+1);\n        }\n        if(opt=='Q') print(lcp(read(),read()));\n    }\n    flush();\n    return 0;\n}\n```\n\n### \u6700\u540e\u5410\u69fd\u51e0\u53e5\n\n\u5199\u5b8c\u540e\u60ca\u53f9\u6240\u6709\u4eba\u90fd\u4e0d\u7ea6\u800c\u540c\u5730\u5199\u4e86Splay\u6216\u975e\u65cbTreap\uff0c\u6ca1\u89c1\u4e00\u4e2a\u4eba\u7528\u5176\u5b83\u4e1c\u897f\u3002\u5176\u5b9e\u6309\u7167\u6211\u7684\u65b9\u6cd5\uff0c\u7528\u4ec0\u4e48\u5e73\u8861\u6811\u90fd\u53ef\u4ee5\u554a\uff0c\u666e\u901aTreap\u3001SBT\u4ec0\u4e48\u7684\u90fd\u53ef\u4ee5\u7684\u554a\u3002\u7136\u540e\u4ed4\u7ec6\u60f3\u4e86\u60f3\uff0c\u53d1\u73b0\u7528Splay\u6839\u672c\u4e0d\u9700\u8981\u5199\u90a3\u4e2a\u6076\u5fc3\u7684\u62c6\u533a\u95f4\u8be2\u95ee\uff0c\u76f4\u63a5\u628a\u5de6\u7aef\u70b9\u4f38\u5c55\u5230\u6839\uff0c\u53f3\u7aef\u70b9\u4f38\u5c55\u5230\u6839\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u5c31\u76f4\u63a5\u662f\u90a3\u4e00\u6bb5\u7684\u54c8\u5e0c\u503c\u4e86\u2026\u2026\n\n\u4e0d\u7ba1\u4e86\uff0c\u867d\u7136\u4f60\u4eecSplay\u597d\u5199\uff0c\u4f46\u4f60\u4eec\u5e38\u6570\u5927\uff0c\u4f60\u4eec\u8dd1\u4e0d\u8fc7\u6211\uff08Flag\u9ad8\u9ad8\u7acb\u8d77\uff09",
        "postTime": 1537881531,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "emmm\u3002\u3002\u3002\u9898\u610f\u505a\u6cd5\u524d\u9762\u90fd\u8bf4\u7684\u5f88\u660e\u767d\u4e86\n\n\u53d1\u73b0\uff08\u4e5f\u53ef\u80fd\u662f\u6211\u6ca1\u627e\u5230\uff09\u7adf\u7136\u6ca1\u4eba\u7528Fhq Treap\u505a~~\u4f60\u4eec\u662f\u4e0d\u662f\u770b\u4e0d\u8d77Treap~~\n\nFhq Treap\u652f\u6301\u5355\u70b9\u63d2\u5165\uff0c\u5355\u70b9\u5220\u9664\uff08\u4fee\u6539\u65f6\u7528\uff09\uff0c\u533a\u95f4\u67e5\u8be2\n\n\u8fd8\u662f\u5f88\u597d\u5199\u7684~~\u6211\u2122\u8fd8WA\u4e86\u8fd9\u4e48\u591a\u6b21~~\n\n\u6ce8\u610f\u6811\u4e0a\u70b9\u8981\u8d4b\u521d\u503c\u4e0d\u7136\u53ea\u670930\u5206\n\n\u7528unsigned int\u4f3c\u4e4e\u6bd4int\u5feb\u4e86\u4e0d\u6b62\u4e00\u70b9\u3002\u3002\u3002\u4f3c\u4e4e\u662f\u5904\u7406\u8d1f\u6570\u8d39\u65f6\u95f4\n\n\u4ee3\u7801\uff1a\n```cpp\n# include<iostream>\n# include<cstring>\n# include<cstdio>\n# include<cstdlib>\n# define LL unsigned int\nusing namespace std;\nconst int MAX=2e5+1;\nint rt,tot,n,m;\nstring A;\nLL ha[MAX];\nstruct Fhq_Treap{\n    int pos[MAX],siz[MAX],Ch[MAX];\n    LL w[MAX];\n    int son[MAX][2];\n    void pus(int x)\n    {\n        siz[x]=siz[son[x][1]]+siz[son[x][0]]+1;\n        w[x]=w[son[x][0]]*ha[siz[son[x][1]]+1]+ha[siz[son[x][1]]]*Ch[x]+w[son[x][1]];\n    }\n    int merge(int x,int y)\n    {\n        if(!x||!y) return x+y;\n        if(pos[x]<pos[y])\n        {\n            son[x][1]=merge(son[x][1],y);\n            pus(x);\n            return x;\n        }\n        else\n        {\n            son[y][0]=merge(x,son[y][0]);\n            pus(y);\n            return y;\n        }\n    }\n    void split(int i,int k,int &a,int &b)\n    {\n        if(!i) a=b=0;\n        else\n        {\n            if(k<=siz[son[i][0]])\n            b=i,split(son[i][0],k,a,son[i][0]);\n            else a=i,split(son[i][1],k-siz[son[i][0]]-1,son[i][1],b);\n            pus(i);\n        }\n    }\n    void ins(int x,char ch)\n    {\n        int a,b;\n        split(rt,x,a,b);\n        w[++tot]=Ch[tot]=ch-'a'+1,siz[tot]=1,pos[tot]=rand();\n        rt=merge(merge(a,tot),b);\n    }\n    void cut(int x)\n    {\n        int a,b,c;\n        split(rt,x,a,c);\n        split(a,x-1,a,b);\n        b=merge(son[b][0],son[b][1]);\n        rt=merge(merge(a,b),c);\n    }\n    LL ask(int l,int r)\n    {\n        int L=r-l+1;\n        int a,b,c,d;\n        split(rt,l-1,a,b);\n        split(b,L,c,d);\n        LL ans=w[c];\n        rt=merge(a,merge(c,d));\n        return ans;\n    }\n    bool look(int x,int y,int mid)\n    {\n        LL ans1=ask(x,x+mid-1),ans2=ask(y,y+mid-1);\n        return ans1==ans2;\n    }\n}Tree;\nstring Read()\n{\n    string a=\" \";\n    char ch=getchar();\n    for(;ch>'z'||ch<'a';ch=getchar());\n    for(;ch<='z'&&ch>='a';a+=ch,ch=getchar());\n    return a;\n}\nchar read_char()\n{\n    char ch=getchar();\n    for(;ch>'z'||ch<'A';ch=getchar());\n    return ch;\n}\nint read()\n{\n    int x=0;\n    char ch=getchar();\n    for(;!isdigit(ch);ch=getchar());\n    for(;isdigit(ch);x=x*10+ch-48,ch=getchar());\n    return x;\n}\nint main()\n{\n    A=Read(),n=A.length()-1,m=read();\n    ha[0]=1;\n    for(int i=1;i<MAX;++i)\n      ha[i]=ha[i-1]*27;\n    for(int i=1;i<=n;++i)\n      Tree.ins(i,A[i]);\n    for(int i=1;i<=m;++i)\n      {\n      \tchar op=read_char();\n      \tif(op=='Q')\n      \t{\n      \t\tint x=read(),y=read();\n      \t\tint l=1,r=min(n-x,n-y)+1,ans=0;\n      \t\twhile(l<=r)\n      \t\t{\n      \t\t\tint mid=(l+r>>1);\n      \t\t\tif(Tree.look(x,y,mid)) l=mid+1,ans=mid;\n      \t\t\telse r=mid-1;\n            }\n            printf(\"%d\\n\",ans);\n        }\n        else if(op=='R')\n        {\n            int x=read();\n            Tree.cut(x),Tree.ins(x-1,read_char());\n        }\n        else if(op=='I')\n        {\n            int x=read();\n            ++n,Tree.ins(x,read_char());\n        }\n      }\n    return 0;\n}\n```",
        "postTime": 1525700095,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "~~\u8bdd\u8bf4\u8fd9\u9898\u65f6\u9650\u4e0d\u662f10\u79d2\u5417\u600e\u4e48\u8dd1\u6d1b\u8c37\u4e0a\u5c311s\u4e86~~\n\n\u6709\u63d2\u5165\u95ee\u9898\uff0c\u60f3\u5230\u5e73\u8861\u6811\n\n\u8003\u8651\u8be2\u95ee\uff0c\u6211\u4eec\u53d1\u73b0\u5355\u6b21\u67e5\u8be2$O(\\log^2n )$\u53ef\u4ee5\u63a5\u53d7\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u8fdb\u884c\u4e00\u4e0b\u4e8c\u5206\u957f\u5ea6\uff0c\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u5462\uff1f\u6211\u4eec\u60f3\u5230\u4e86~~\u4e0d\u9760\u8c31~~\u7684\u54c8\u5e0c\n\n\u90a3\u4e48\u600e\u4e48\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u533a\u95f4\u54c8\u5e0c\u503c\u5462\uff1f\u6839\u636e\u54c8\u5e0c\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u6709\n\n$$hash[x]=hash[lc]\\times base^{siz[rc]+1}+val[x]\\times^{siz[rc]}+hash[rc]$$\n\n\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u8fd8\u662f\u9700\u8981\u5b58\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u5b57\u7b26\u7684\uff0c\u4e0d\u80fd\u7528$hash[x]$\u66ff\u6362$val[x]$\uff0c~~\u6211\u5c31\u5728\u8fd9\u91cc\u8c03\u4e86\u597d\u4e45~~\n\n\u5bf9\u4e8e\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\uff0c\u4e8c\u5206\u51fa\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528$fhq\\  treap$\u628a\u8fd9\u4e00\u6bb5\u533a\u95f4\u62ce\u51fa\u6765\uff0c\u7136\u540e\u6c42\u51fa\u54c8\u5e0c\u503c\u5c31\u53ef\u4ee5\u4e86\n\n\u5bf9\u4e8e\u54c8\u5e0c\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f$unsigned\\  int$\u81ea\u7136\u6ea2\u51fa\uff0c~~\u56e0\u4e3a\u8fd9\u6837\u8dd1\u7684\u5feb\u70b9~~\uff0c\u5982\u679c\u53d6\u6a21\u7684\u8bdd\u5c31\u4f1a\u53d8\u5f97\u8d85\u7ea7\u8d85\u7ea7\u6162\n\n\u5f53\u7136\u56e0\u4e3a\u6211\u81ea\u5e26\u5927\u5e38\u6570\u6700\u540e\u8fd8\u662f\u88ab\u8feb\u5438\u6c27\u4e86\n\n\u636e\u8bf4\u8fd9\u9898$splay$\u8dd1\u7684\u66f4\u5feb\uff1f\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=1e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\ntypedef unsigned int ull;\nconst int base=29;\n\nint n,m;\nchar s[N];\nint son[N][2],siz[N],val[N],treap[N];\null haxi[N],poww[N];\nint rt,tot;\n\nint newnode(int value){\n    int u=++tot;\n    siz[u]=1,treap[u]=rand();\n    haxi[u]=val[u]=value;\n    return u;\n}\n\nvoid update(int x){\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n    haxi[x]=haxi[son[x][0]]*poww[siz[son[x][1]]+1]+val[x]*poww[siz[son[x][1]]]+haxi[son[x][1]];\n}\n\nint merge(int u,int v){\n    if(!u||!v)return u|v;\n    int rt;\n    if(treap[u]<treap[v])son[rt=u][1]=merge(son[u][1],v);\n    else son[rt=v][0]=merge(u,son[v][0]);\n    return update(rt),rt;\n}\n\nvoid split(int o,int &u,int &v,int k){\n    if(!o){u=v=0;return;}\n    int rank=siz[son[o][0]]+1;\n    if(rank<=k)split(son[u=o][1],son[o][1],v,k-rank);\n    else split(son[v=o][0],u,son[o][0],k);\n    update(o);\n}\n\null gethash(int l,int r){\n    int x,y,z;\n    split(rt,x,z,r);\n    split(x,x,y,l-1);\n    ull res=haxi[y];\n    rt=merge(merge(x,y),z);\n    return res;\n}\n\nint main()\n{\n    srand(19260817);\n    poww[0]=1;\n    Rep(i,1,1e5)poww[i]=poww[i-1]*base;\n    scanf(\"%s\",s+1);\n    n=strlen(s+1);\n    Rep(i,1,n)rt=merge(rt,newnode(s[i]-'a'));\n    read(m);\n    Rep(i,1,m){\n        char opt[10];\n        scanf(\"%s\",opt);\n        if(opt[0]=='Q'){\n            int x,y;\n            read(x),read(y);\n            if(x>y)swap(x,y);\n            int l=1,r=siz[rt]-y+1,res=0;\n            while(l<=r){\n                int mid=l+r>>1;\n                if(gethash(x,x+mid-1)==gethash(y,y+mid-1))res=mid,l=mid+1;\n                else r=mid-1;\n            }\n            printf(\"%d\\n\",res);\n        } \n        if(opt[0]=='R'){\n            int x,y,z;read(x);\n            char ch;cin>>ch;\n            int pos=x,value=ch-'a';\n            split(rt,x,z,pos);\n            split(x,x,y,pos-1);\n            haxi[y]=val[y]=value;\n            rt=merge(merge(x,y),z);\n        }\n        if(opt[0]=='I'){\n            int x,y;read(x);\n            char ch;cin>>ch;\n            int k=x,val=ch-'a';\n            split(rt,x,y,k);\n            rt=merge(merge(x,newnode(val)),y);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1589098228,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "# \u524d\u8a00~~\u4e00\u4e9b\u95f2\u626f~~\n\u8fd9\u9053\u9898\u8003\u573a\u4e0a\u7684\u6bd2\u7624\u9898\u76ee\uff0c\u521a\u5f00\u59cb\u6253\u4e86\u4e00\u4e2a\u5206\u5757\u7136\u540e\u53d1\u73b0\u81ea\u5df1\u6839\u672c\u4e0d\u4f1a\u7ef4\u62a4\u63d2\u5165\u64cd\u4f5c\uff0c\u89c2\u5bdf\u5230\u8be2\u95ee\u4e2a\u6570\u6bd4\u8f83\u5c11\uff0c\u89c9\u5f97\u62ff50pts\u8fd8\u4e0d\u5982\u53bb\u8d4c\u6570\u636e\u4e8e\u662f\u6572\u4e86\u4e2avector + \u4e8c\u5206\uff0c\u679c\u4e0d\u5176\u7136\u7701\u9009\u9898\u76ee\u6570\u636e\u9001\u6211\u81ea\u95ed\u2026\u2026  \n# \u6b63\u6587  \n\u8fd9\u9053\u9898\u6211\u4eec\u770b\u5230\u63d2\u5165\u64cd\u4f5c\uff0c\u53c8\u53d1\u73b0\u8981\u7ef4\u62a4\u4e00\u4e2a~~\u5047LCP~~\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u5728\u8fd9\u91cc\u6211\u6253\u4e86\u4e2aSplay\u3002  \n\u9996\u5148\u8003\u8651\u5efa\u6811\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u4e2a~~\u5047LCP~~\uff0c\u770b\u5230\u5b57\u7b26\u4e32\u8981\u5224\u76f8\u7b49\u679c\u65ad\u5199hash\uff0c\u4e8e\u662f\u6211\u4eec\u7684Splay\u5c31\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\u662f\u4ec0\u4e48\u4ee5\u53ca\u5f53\u524d\u5b50\u6811\u7684hash\u503c\u5373\u53ef\uff0c\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\u5b9a\u4e49\uff1a\n\n```cpp\nstruct node\n{\n\tint ch[2],size,ff;//\u5de6\u53f3\u513f\u5b50\uff0c\u5b50\u6811\u5927\u5c0f\uff0c\u7236\u4eb2\u8282\u70b9 \n\tint c;//\u5f53\u524d\u5b57\u7b26\u662f\u4ec0\u4e48(\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u5b57\u7b26\u6700\u540e\u8ba1\u7b97hash\u65f6\u7528c - '0'\u5c31\u884c\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u8bb0\u5f55-'0'\u7684\u503c\u65b9\u4fbf\u4e00\u4e9b) \n\tunsigned long long hash;//\u5f53\u524d\u5b50\u6811\u7684hash\u503c \n}t[Len];\n```  \n\nupdate()\n\nupdate\u51fd\u6570\u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u5927\u5c0f\u4ee5\u53cahash\u503c\uff0c\u5b50\u6811\u5927\u5c0f\u5c31\u662f\u5957\u8def\u4e86\uff0c\u800chash\u503c\u8fd9\u91cc\u5c31\u9700\u8981\u7528\u5230hash\u7684\u5b9a\u4e49\u3002  \n\u8bb0rsize\u4e3a\u53f3\u5b50\u6811\u7684\u5927\u5c0f\uff0c```b[i]```\u4e3aK\u7684i\u6b21\u65b9\uff0c\u5f53\u524d\u4e3au\u5b50\u6811\u3002  \n\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u8fd9\u4e2a\u5b50\u6811\u8fd8\u662f\u7b26\u5408\u4ee5\u7f16\u53f7\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u5b50\u6811hash\u503c\u5c31\u4e3a\u5de6\u5b50\u6811\u7684hash\u503c\u4e58\u4e0a```b[rsize + 1]```(\u5728\u5e8f\u5217\u4e0a\u5c31\u76f8\u5f53\u4e8e\u4e58\u4e0a```b[r - l + 1]```)\u52a0\u4e0a```t[u].c``` * ```b[rsize]``` (\u4e2d\u95f4\u4e00\u4e2a\u5b57\u7b26\u7684hash)\u52a0\u4e0a\u53f3\u5b50\u6811\u7684hash\u503c\u3002\u8f6c\u6210\u6570\u5b66\u516c\u5f0f\uff0c\u5373\uff1a\n```\nhash[u] = hash[ls(u)] * b[rsize + 1] + c[u] * b[rsize] + hash[rs(u)];\n```\n\u9644\u90e8\u5206\u4ee3\u7801\uff1a  \n```cpp\nvoid update(int x)\n{\n\tt[x].size = t[t[x].ch[0]].size + t[t[x].ch[1]].size + 1;\n\tint rsize = t[t[x].ch[1]].size;\n\tt[x].hash = t[t[x].ch[1]].hash + (unsigned long long)t[x].c * b[rsize] + t[t[x].ch[0]].hash * b[rsize + 1];\n}\n```\n\nbuild()\n\nbuild\u5c31\u6bd4\u8f83\u5957\u8def\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003[P3391\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\u7684\u5efa\u6811\u8fc7\u7a0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u6839\u636eid\u5efa\u6811\u561b\uff0c\u5728\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002  \n\u9644\u90e8\u5206\u4ee3\u7801\uff1a  \n```cpp\nvoid build(int l,int r,int x)\n{\n\tif(l > r) return;\n\tint mid = (l + r) >> 1;\n\tif(mid >= x) t[x].ch[1] = mid;\n\telse t[x].ch[0] = mid;\n\tt[mid].ff = x,t[mid].size = 1;\n\tif(l == r) return;\n\tbuild(l , mid - 1, mid) , build(mid + 1 , r , mid);\n\tupdate(mid);\n}\nint main()\n{\n\n\tfor(int i = 2 ; i <= n + 1; i ++) t[i].c = t[i].hash = s[i - 1] - '0';\n\tbuild(1 , n + 2 , root);\n\troot = (n + 3) >> 1,tot = n + 2;\n}\n```\n\nrotate(),Splay()\n\nrotate(),Splay()\u51fd\u6570~~\u90fd\u662f\u5957\u8def~~\uff0cSplay\u7684\u6a21\u677f\u5f80\u4e0a\u5957\u5c31\u5b8c\u4e86\u3002\u6ce8\u610f\u5728Spaly\u8f6c\u5b8c\u540e\u8981\u66f4\u65b0\u4e00\u4e0broot\u3002  \n\nFind()\n\nFind(x)\u5373\u5bfb\u627e\u7b2cx - 1\u4e2a\u6570\u5728\u54ea\u91cc\u3002\u4e3a\u4ec0\u4e48\u662f\u7b2cx - 1\u4e2a\u6570\u5462\uff1f\u4f60\u4e4b\u524d\u63d2\u5165\u7684\u65f6\u5019\u76841\u548cn + 2\u662fINF\uff0c\u6240\u4ee5\u624d\u662f\u7b2cx - 1\u4e2a\u6570\u5bf9\u5427\u3002  \n\u8fd9\u91cc\u7531\u4e8e\u4e4b\u548c\u6211\u4eec\u7684\u63d2\u5165\u987a\u5e8f\u6709\u5173\uff0c\u6240\u4ee5\u4e0d\u80fd\u50cf\u4f20\u7edf\u65b9\u5f0f\u4e00\u6837\u76f4\u63a5\u627e\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u67e5\u627e\u6392\u540d\u4e3ax\u7684\u6570\uff0c\u4e8e\u662f\u6839\u636e\u5b50\u6811\u5927\u5c0f\u6765\u5199\u5c31OK\u4e86(\u8fd8\u4e0d\u7406\u89e3\u7684\u4eba\u5c31\u628a\u4ed6\u5f53getnum(rank)\u5427\u2026\u2026)  \n\u9644\u90e8\u5206\u4ee3\u7801\uff1a\n```cpp\nint Find(int x)\n{\n\tint u = root;\n\twhile(u)\n\t{\n\t\tint lsize = t[t[u].ch[0]].size;\n\t\tif(lsize + 1 == x) return u;\n\t\telse if(lsize + 1 < x) x -= lsize + 1,u = t[u].ch[1];\n\t\telse u = t[u].ch[0];\n\t}\n}\n```\n\ninsert()\n\ninsert()\u51fd\u6570\u4e5f\u6709\u70b9\u4e0d\u4e00\u6837\u3002\u8fd9\u91cc\u4f60\u53c8\u4e0d\u80fd\u76f4\u63a5\u53bb\u901a\u8fc7val\u503c\uff08\u5b9e\u9645\u4e5f\u6ca1\u6709\uff09\u6765insert\uff0c\u6211\u4eec\u5c31~~\u7a0d\u5fae\u6076\u6bd2\u4e00\u70b9~~\u3002  \n\u8bbe\u63d2\u5165\u7684\u6570\u4f4d\u7f6e\u4e3aidx  \n\u9996\u5148\u4e00\u6ce2\u64cd\u4f5c\u627e\u5230idx\u548cidx + 1\uff0c\u7136\u540e\u628aidx\u65cb\u8f6c\u5230root\uff0cidx + \u65cb\u8f6c\u5230root\u7684\u53f3\u513f\u5b50\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u73b0\u5728\u7684\u8fd9\u4e2a\u5b57\u7b26\u63d2\u5165root\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u4e86\u5bf9\u5427\u3002  \n\u7136\u540e\u5462\uff1f  \n\u63d2\u5165\u5457\u2026\u2026  \n```cpp\nvoid insert(int x,int w)\n{\n\tint pre = Find(x + 1) , nex = Find(x + 2);\n\tSplay(pre , 0);\n\tSplay(nex , pre);\n\tt[nex].ch[0] = ++ tot;\n\tint Fx = tot;\n\tt[Fx].ff = nex;\n\tt[Fx].hash = t[Fx].c = w;\n\tSplay(Fx , 0);\n}\n```\n\nHash()\n\n\u6c42\u4e00\u6bb5\u533a\u95f4\u7684Hash\u503c\u8fd8\u662f\u548c\u6587\u827a\u5e73\u8861\u6811\u4e00\u6837\u7684\u5957\u8def\uff0c\u628apre\u7ffb\u5230root\u7136\u540e\u628anex\u7ffb\u5230pre\u7684\u53f3\u513f\u5b50\u7136\u540enex\u7684\u5de6\u4e8c\u5b50\u5c31\u662fl ~ r\u533a\u95f4\u5bf9\u5427\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u67e5\u8be2\u8fd9\u9897\u5b50\u6811\u7684Hash\u5927\u5c0f\u5373\u53ef\u3002\n```cpp\nunsigned long long Hash(int l,int r)\n{\n\tint pre = Find(l), nex = Find(r + 2);\n\tSplay(pre , 0);\n\tSplay(nex , pre);\n\tint Fx = t[nex].ch[0];\n\treturn t[Fx].hash; \n}\n```\n# PS\n\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff1a  \n1.~~\u8001\u751f\u5e38\u8c08~~Splay\u522b\u5199\u9519\u4e86\u2026\u2026  \n2.\u6ce8\u610f\u4e00\u4e0b\u4ec0\u4e48\u65f6\u5019update\uff0c\u4e0d\u653e\u5fc3\u7684~~\u591aupdate\u51e0\u6b21\u4e5f\u4e0d\u4f1a\u6b7b\u4eba\u5bf9\u5427~~\uff1b  \n3.\u8fd8\u662f\u6ce8\u610f\u4e00\u4e0b\u63d2\u5165\u7684\u8fb9\u754c\u503c1\u548cn + 2\uff0c\u7136\u540e\u6bcf\u6b21\u67e5\u8be2\u4fee\u6539\u63d2\u5165\u7684x\u4e00\u5b9a\u8981+1\u54e6~  \n\u5dee\u4e0d\u591a\u4e86  \n\u653e\u4ee3\u7801\uff1a  \n\u8fd9\u91cc\u501f\u9274\u4e86\u4e00\u4e0b[@\u9093\u672c\u6c38](https://www.luogu.com.cn/user/93041)\u7684\u4ee3\u7801\uff0c\u6bd5\u7adf\u6211\u81ea\u5df1\u5199\u7684\u2026\u2026\u8c8c\u4f3c\u6709\u70b9\u4e11\u8bf6\uff01  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int Len = 4e5 + 5, K = 1e9 + 7;\nint n,m,opt,x,y,root,tot;\nunsigned long long b[Len];\nstruct node\n{\n\tint ch[2],size,ff;//\u5de6\u53f3\u513f\u5b50\uff0c\u5b50\u6811\u5927\u5c0f\uff0c\u7236\u4eb2\u8282\u70b9 \n\tint c;//\u5f53\u524d\u5b57\u7b26\u662f\u4ec0\u4e48(\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u5b57\u7b26\u6700\u540e\u8ba1\u7b97hash\u65f6\u7528c - '0'\u5c31\u884c\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u8bb0\u5f55-'0'\u7684\u503c\u65b9\u4fbf\u4e00\u4e9b) \n\tunsigned long long hash;//\u5f53\u524d\u5b50\u6811\u7684hash\u503c \n}t[Len];\nchar s[Len],ss[2],sss[2];\nvoid update(int x)\n{\n\tt[x].size = t[t[x].ch[0]].size + t[t[x].ch[1]].size + 1;\n\tint rsize = t[t[x].ch[1]].size;\n\tt[x].hash = t[t[x].ch[1]].hash + (unsigned long long)t[x].c * b[rsize] + t[t[x].ch[0]].hash * b[rsize + 1];\n}\nvoid build(int l,int r,int x)\n{\n\tif(l > r) return;\n\tint mid = (l + r) >> 1;\n\tif(mid >= x) t[x].ch[1] = mid;\n\telse t[x].ch[0] = mid;\n\tt[mid].ff = x,t[mid].size = 1;\n\tif(l == r) return;\n\tbuild(l , mid - 1, mid) , build(mid + 1 , r , mid);\n\tupdate(mid);\n}\nvoid rotate(int x)\n{\n\tint y = t[x].ff,z = t[y].ff,k = t[y].ch[1] == x;\n\tt[z].ch[t[z].ch[1] == y] = x;\n\tt[x].ff = z;\n\t//\n\tt[y].ch[k] = t[x].ch[k ^ 1];\n\tt[t[x].ch[k ^ 1]].ff = y;\n\t//\n\tt[x].ch[k ^ 1] = y;\n\tt[y].ff = x;\n\tupdate(y),update(x); \n}\nvoid Splay(int x,int goal)\n{\n\twhile(t[x].ff != goal)\n\t{\n\t\tint y = t[x].ff,z = t[y].ff;\n\t\tif(z != goal) (t[y].ch[1] == x) ^ (t[z].ch[1] == y) ? rotate(x) : rotate(y);\n\t\trotate(x);\n\t}\n\tupdate(x);\n\tif(goal == 0) root = x;\n}\nint Find(int x)\n{\n\tint u = root;\n\twhile(u)\n\t{\n\t\tint lsize = t[t[u].ch[0]].size;\n\t\tif(lsize + 1 == x) return u;\n\t\telse if(lsize + 1 < x) x -= lsize + 1,u = t[u].ch[1];\n\t\telse u = t[u].ch[0];\n\t}\n}\nvoid insert(int x,int w)\n{\n\tint pre = Find(x + 1) , nex = Find(x + 2);\n\tSplay(pre , 0);\n\tSplay(nex , pre);\n\tt[nex].ch[0] = ++ tot;\n\tint Fx = tot;\n\tt[Fx].ff = nex;\n\tt[Fx].hash = t[Fx].c = w;\n\tSplay(Fx , 0);\n}\n\nunsigned long long Hash(int l,int r)\n{\n\tint pre = Find(l), nex = Find(r + 2);\n\tSplay(pre , 0);\n\tSplay(nex , pre);\n\tint Fx = t[nex].ch[0];\n\treturn t[Fx].hash; \n}\nint main()\n{\n\tscanf(\"%s\",s + 1);\n\tn = strlen(s + 1);\n\tb[0] = 1;\n\tfor(int i = 1 ; i <= 250000 ; i ++) b[i] = b[i - 1] * K;\n\tfor(int i = 2 ; i <= n + 1; i ++) t[i].c = t[i].hash = s[i - 1] - '0';\n\tbuild(1 , n + 2 , root);\n\troot = (n + 3) >> 1,tot = n + 2;\n\tscanf(\"%d\",&m);\n\twhile(m --)\n\t{\n\t\tscanf(\"%s\",ss);\n\t\tif(ss[0] == 'Q')\n\t\t{\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tif(x > y) swap(x , y);\n\t\t\tint l = 0,r = tot - y - 1;\n\t\t\twhile(l < r)\n\t\t\t{\n\t\t\t\tint mid = (l + r + 1) >> 1;\n\t\t\t\tif(Hash(x , x + mid - 1) == Hash(y , y + mid - 1)) l = mid;\n\t\t\t\telse r = mid - 1;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",l);\n\t\t}\n\t\telse if(ss[0] == 'R')\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tscanf(\"%s\",sss);\n\t\t\tchar chan = sss[0];\n\t\t\tSplay(Find(x + 1) , 0);\n\t\t\tt[root].c = chan - '0';\n\t\t\tupdate(root);\n\t\t}\n\t\telse if(ss[0] == 'I')\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tscanf(\"%s\",sss);\n\t\t\tchar chan = sss[0];\n\t\t\tinsert(x , chan - '0');\n\t\t}\n\t}\n\treturn 0;\n}\n```\n# \u5b8c\u7ed3\u6492\u82b1\uff01\n",
        "postTime": 1596008899,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "\u7ed9\u540c\u5b66\u770b\u4e86\u770b\u81ea\u5df1\u968f\u673a\u8df3\u5230\u7684\u8fd9\u9053\u9898\uff0c\u7136\u540e\u4ed6\u7ed9\u6211\u79d2\u6307\u539f\u9898\uff08\u5c31\u662f\u8fd9\u9053\uff09...\u679c\u7136\u5237\u9898\u591a\u5c31\u662f\u4e0d\u4e00\u6837\u3002\u3002\u3002\u4e8e\u662f\u505a\u4e86\u8fd9\u9053\u9898\u53c8\u6eda\u53bb\u90a3\u9053\u591a\u7ec4\u6570\u636e\u7684\u4e86\n\n# noteskey\n\n\n\u6211\u4eec\u8003\u8651\u4e00\u773c\u770b\u53bb\u6ca1\u6709\u4fee\u6539\u7684\u8bdd\u679c\u65ad\u6574\u4e2a\u4e32\u5012\u8fc7\u6765\u5efa\u4e2a SAM \u500d\u589e\u8dd1 LCP\n\n\u4f46\u662f\u6709\u4fee\u6539\u554a\uff01\n\n## Query\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e8c\u5206 + HASH \u5728 log \uff08~~\u7528\u4e86\u5e73\u8861\u6811\u8981\u5e26\u5e73\u65b9\u7684\u5427\uff1f~~\uff09 \u65f6\u95f4\u5185\u5904\u7406\u8be2\u95ee\n\n## Replace\n\n\u6211\u4eec\u8003\u8651\u5728\u5e73\u8861\u6811\u4e0a\u76f4\u63a5\u5220\u9664 + \u63d2\u5165\n\n## Insert\n\n\u6211\u4eec\u5728\u5e73\u8861\u6811\u4e0a\u63d2\u5165\u5373\u53ef\n\n## pushup\n\n\u6709\u70b9\u5173\u952e\u7684\u5176\u5b9e\u662f\u5e73\u8861\u6811\u4e2d\u7684 $pushup$ \uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u4e4b\u524d\u8be2\u95ee\u91cc\u8bf4\u7684 $HASH$ \u505a\u6cd5\uff0c\u4ee4\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u7528\u9884\u5904\u7406\u7684 pw \u957f\u5ea6 $HASH$ \u6570\u7ec4 \u7ef4\u62a4\u7684\u5de6\u513f\u5b50 + \u5f53\u524d\u70b9 + \u53f3\u513f\u5b50\u7684 $HASH$ \u503c\uff0c \u800c\u957f\u5ea6\u5c31\u662f\u5b50\u8282\u70b9\u7684 $size$\n\n\n## Build\n\n\u6211\u4eec\u8003\u8651\u76f4\u63a5 $Insert$ \u7684\u8bdd\u53ef\u80fd\u6709\u70b9\u6162\uff0c\u4e8e\u662f\u6211\u4eec\u7b1b\u5361\u5c14\u6811 $O(n)$ \u6784\u9020\uff0c\n\n\n>FAQ \uff1awoc\u5361\u5e38\uff1f\u8fd9\u73a9\u610f\u513f\u6709\u4ec0\u4e48\u597d\u5361\u7684\n\n>\u6ca1\u529e\u6cd5\u6211\u5e38\u6570\u5927\u6211\u4e5f\u5f88\u7edd\u671b\u554a\uff0c\u4e0a\u6b21\u6211\u6253\u6807\u7b97\u9000\u5316\u6210\u66b4\u529b\u5206\u5462\uff01\n\n\n## \u5e73\u8861\u6811\n\n\n\u7136\u540e\u5e73\u8861\u6811\u9996\u63a8 FHQ Treap \n\n\u4f60\u95ee\u6211\u4e3a\u4ec0\u4e48\uff1f\u771f\u7231\u515a\u4e0d\u89e3\u91ca\n\n\n\n# care\n\n\u7136\u540e\u6ce8\u610f\u8fd9\u91cc\u6709\u591a\u7ec4\u6570\u636e...\u522b\u5fd8\u4e86\u6e05\n\n\u8fd8\u6709 newnode \u91cc\u628a son \u4fe1\u606f\u5f52\u96f6\n\n\n# code\n\n~~\u53c8\u538b\u884c\uff0c\u53c8\u538b\u884c\uff01~~\n\n```\n//by Judge\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define fp(i,a,b) for(int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(int i=(a),I=(b)-1;i>I;--i)\n#define go(G,u) for(int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define ll unsigned int\nusing namespace std;\nconst int M=2e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline char cread(){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar()); return c;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar()); s=\" \";\n\tfor(;isalpha(c);c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(int x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n,m; string s; ll ha[M]={1};\nnamespace FHQTreap{ int root,tot,top,stk[M],son[M][2]; ll w[M]; arr siz,pos,ch;\n\tinline int Rand(){static int seed=131; return seed=int(seed*48271ll%(~0ull>>1));}\n\tinline int newnode(int x){int a=++tot; son[a][0]=son[a][1]=0;\n\t\treturn siz[a]=1,w[a]=ch[a]=x,pos[a]=Rand(),a;\n\t}\n\tinline void pushup(int x){ siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n\t\tw[x]=w[son[x][0]]*ha[siz[son[x][1]]+1]+ch[x]*ha[siz[son[x][1]]]+w[son[x][1]];\n\t}\n\tinline void build(string& s,int n){\n\t\tint a,b,c; b=stk[top=1]=newnode(s[1]-'a'+1);\n\t\tfp(i,2,n){ c=newnode(s[i]-'a'+1),a=0;\n\t\t\tfor(;top&&pos[stk[top]]>pos[c];a=stk[top--],pushup(a));\n\t\t\tif(top) son[stk[top]][1]=c; son[c][0]=a;\n\t\t\tstk[++top]=c; if(top==1) b=c;\n\t\t} for(;top;--top) pushup(stk[top]); root=b;\n\t}\n\tint merge(int x,int y){ if(!x||!y) return x|y;\n\t\tif(pos[x]<pos[y]) return son[x][1]=merge(son[x][1],y),pushup(x),x;\n\t\telse return son[y][0]=merge(x,son[y][0]),pushup(y),y;\n\t}\n\tvoid split(int u,int k,int& x,int& y){ if(!u) return x=y=0,void();\n\t\tif(siz[son[u][0]]>=k) return split(son[y=u][0],k,x,son[u][0]),pushup(u),void();\n\t\telse return split(son[x=u][1],k-siz[son[u][0]]-1,son[u][1],y),pushup(u),void();\n\t}\n\tinline void Insert(int x,int ch){ int a,b=newnode(ch),c;\n\t\tsplit(root,x,a,c),root=merge(a,merge(b,c));\n\t}\n\tinline void Delete(int x){ int a,b,c;\n\t\tsplit(root,x-1,a,b),split(b,1,b,c),root=merge(a,c);\n\t}\n\tinline ll ask(int l,int r){ int a,b,c;\n\t\tsplit(root,r,a,c),split(a,l-1,a,b); ll ans=w[b];\n\t\treturn root=merge(a,merge(b,c)),ans;\n\t}\n\tinline bool query(int x,int y,int len){\n\t\treturn ask(x,x+len-1)==ask(y,y+len-1);\n\t}\n} using namespace FHQTreap;\ninline int Min(int a,int b){return a<b?a:b;}\nint main(){ int op,x,y,l,r,mid;\n\treads(s),n=s.length()-1,m=read();\n\tfp(i,1,2e5) ha[i]=ha[i-1]*131; build(s,n);\n\tfp(kkk,1,m){ op=cread();\n\t\tif(op=='Q'){ x=read(),y=read();\n\t\t\tfor(l=1,r=Min(n-x,n-y)+1;l<=r;) mid=(l+r)>>1,\n\t\t\t\tquery(x,y,mid)?l=mid+1:r=mid-1; print(r);\n\t\t} else if(op=='I') x=read(),++n,y=cread()-'a'+1,Insert(x,y);\n\t\telse if(op=='R') x=read(),y=cread()-'a'+1,Delete(x),Insert(x-1,y);\n\t} return Ot(),0;\n}\n```\n\n\n# more\n\n\u53cc\u500d\u7ecf\u9a8c\uff08\u591a\u7ec4\u6570\u636e\uff01\uff09\uff1a  [STRLCP - Longest Common Prefix](https://www.luogu.org/problemnew/show/SP3109)\n\n\n",
        "postTime": 1553693343,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "[\u6765\u6c34\u4e00\u7bc7\u9898\u89e3](http://www.cnblogs.com/xzz_233/p/7489297.html)\n\n\u540e\u7f00\u6570\u7ec4\u663e\u7136\u4e0d\u884c\n\nLCP\u662f\u53ef\u4ee5\u4e8c\u5206+\u54c8\u5e0c\u7b97\u51fa\u6765\u7684\n\n\u56e0\u4e3a\u6709\u63d2\u5165\u64cd\u4f5c\u6240\u4ee5\u5e73\u8861\u6811\u7ef4\u62a4\n\n\u7136\u540e\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e0b\uff0c\u628a\u54c8\u5e0c\u503c\u62a0\u51fa\u6765\u6bd4\u8f83\u5c31\u884c\u4e86\n\n\n$hash[i]=hash[ls]+ch \\times base^{size[rs]}+hash[rs]\\times base^{size[ls]+1}$\n\n\n\uff08\u636e\u8bf4bzoj\u5361\u53cc\u54c8\u5e0c\uff1f\uff1f\uff1f\n\n\n```cpp\n// luogu-judger-disable-o2\n// It is made by XZZ\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define Fname \"bzoj_1014\"\nusing namespace std;\n#define rep(a,b,c) for(rg int a=b;a<=c;a++)\n#define drep(a,b,c) for(rg int a=b;a>=c;a--)\n#define erep(a,b) for(rg int a=fir[b];a;a=nxt[a])\n#define il inline\n#define rg register\n#define vd void\n#define fir first\n#define sec second\n#define pr pair<point,point>\n#define mp make_pair\ntypedef unsigned int ll;\nil int gi(){\n    rg int x=0;rg char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x;\n}\ntypedef struct node* point;\npoint null;\nint seed=2333;\nil int Rand(){return seed=seed*19260817ll%2147483647;}\nconst int maxn=1e5+2;\nll base[maxn],Base[maxn];\nstruct node{\n    int size,rand,ch;\n    ll h,H;\n    point ls,rs;\n    node(char _ch){\n    ch=_ch-'`',rand=Rand(),size=1,ls=rs=null;\n    h=H=ch;\n    }\n    il vd reset(){\n    size=ls->size+rs->size+1;\n    h=ls->h+base[ls->size]*ch+base[ls->size+1]*rs->h;\n    H=ls->H+Base[ls->size]*ch+Base[ls->size+1]*rs->H;\n    }\n};\npoint root;\nil point build(){\n    char str[100010];\n    scanf(\"%s\",str+1);\n    int n=strlen(str+1);\n    point now,stk[n+2],lst;int top=0;\n    rep(i,1,n){\n    now=new node(str[i]),lst=null;\n    while(top&&stk[top]->rand>now->rand)lst=stk[top],stk[top--]->reset();\n    if(top)stk[top]->rs=now;\n    now->ls=lst,stk[++top]=now;\n    }\n    while(top)stk[top--]->reset();\n    return stk[1];\n}\nil point merge(point a,point b){\n    if(a==null){b->reset();return b;}\n    if(b==null){a->reset();return a;}\n    if(a->rand<b->rand){a->rs=merge(a->rs,b);a->reset();return a;}\n    else{b->ls=merge(a,b->ls);b->reset();return b;}\n}\nil pr split(point now,int num){\n    if(now==null)return mp(null,null);\n    point ls=now->ls,rs=now->rs;\n    if(num==now->ls->size){now->ls=null,now->reset();return mp(ls,now);}\n    if(num==now->ls->size+1){now->rs=null,now->reset();return mp(now,rs);}\n    if(now->ls->size>num){\n    pr T=split(now->ls,num);\n    now->ls=T.sec,now->reset();\n    return mp(T.fir,now);\n    }else{\n    pr T=split(now->rs,num-now->ls->size-1);\n    now->rs=T.fir,now->reset();\n    return mp(now,T.sec);\n    }\n}\nil vd Get(char&ch){do ch=getchar();while(ch<'a'||ch>'z');}\nil vd change(){\n    int k=gi();char ch;Get(ch);\n    pr T=split(root,k-1),TT=split(T.sec,1);\n    TT.fir->ch=TT.fir->h=TT.fir->H=ch-'`';\n    root=merge(T.fir,merge(TT.fir,TT.sec));\n}\nil vd ins(){\n    int k=gi();char ch;Get(ch);\n    pr T=split(root,k);\n    root=merge(T.fir,merge(new node(ch),T.sec));\n}\nil pair<ll,ll>GetHash(int l,int r){\n    pair<ll,ll>ret;\n    pr T=split(root,l-1),TT=split(T.sec,r-l+1);\n    ret=mp(TT.fir->h,TT.fir->H);\n    root=merge(T.fir,merge(TT.fir,TT.sec));\n    return ret;\n}\nil bool check(int&x,int&y,int mid){\n    pair<ll,ll>a=GetHash(x,x+mid-1),b=GetHash(y,y+mid-1);\n    return a.fir==b.fir&&a.sec==b.sec;\n}\nil vd solve(){\n    int x=gi(),y=gi();\n    int mid,l=0,r=min(root->size-x+1,root->size-y+1);\n    while(l<r){\n    mid=(l+r)>>1;\n    if(check(x,y,mid+1))l=mid+1;\n    else r=mid;\n    }printf(\"%d\\n\",l);\n}\nint main(){\n    null=new node('`');\n    null->size=0;\n    null->ls=null->rs=null;\n    base[0]=1;\n    rep(i,1,1e5)base[i]=base[i-1]*29;\n    Base[0]=1;\n    rep(i,1,1e5)Base[i]=Base[i-1]*23333;\n    root=build();\n    int m=gi();char opt;\n    while(m--){\n    do opt=getchar();while(opt<'A'||opt>'Z');\n    if(opt=='Q')solve();\n    else if(opt=='R')change();\n    else ins();\n    }\n    return 0;\n}\n```",
        "postTime": 1516257738,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "# \u706b\u661f\u4eba\n\u9898\u89e3\uff1a\n\u7b2c\u4e00\u773c\u5c31\u662f\u540e\u7f00\u6570\u7ec4\uff0c\u4f46\u662f\u53d1\u73b0\u6709\u5355\u70b9\u63d2\u5165\u64cd\u4f5c\u679c\u65ad$pass$\u3002\n\n\u4e00\u4e2a\u5e8f\u5217\u652f\u6301\u5355\u70b9\u63d2\u5165\u80af\u5b9a\u6700\u5c11\u662f\u4e2a\u5e73\u8861\u6811\u3002\n\n\u53c8\u53d1\u73b0$log^2n$\u597d\u50cf\u80fd\u8fc7\uff0c\u6211\u4eec\u5c31\u5bf9\u5e8f\u5217\u5efa\u7acb\u975e\u65cb\u8f6c$Treap$\u7136\u540e\u7ef4\u62a4\u5b50\u6811$hash$\u503c\u3002\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u7684\u65f6\u5019\u4e8c\u5206\u3002\n\n\u4e8c\u5206\u5730\u627e\u51fa\u4ece\u5f53\u524d\u4f4d\u7684\u7b54\u6848\u3002\n\n\u7136\u540e\u6495\u51fa\u533a\u95f4\u66b4\u529b\u9a8c\u8bc1\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(mlog^2n)$\u3002\n\nCode\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define N 100010 \nusing namespace std;\ntypedef unsigned int ull;\nconst ull base = 97 ;\nint root,cnt; char s[N];\null B[1000010];\n#define nc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nchar buf[100000],*p1,*p2;\ninline int rd()\n{\n\tregister int x=0;register char c=nc();\n\twhile(c<'0'||c>'9')c=nc();\n\twhile(c>='0'&&c<='9')x=((x+(x<<2))<<1)+(c^48),c=nc();\n\treturn x;\n}\nstruct Node\n{\n\tint ls,rs,size,key;\n\tull sum,val;\n}a[N<<1];\nstruct par {int x,y;};\ninline void pushup(int x)\n{\n\tint ls=a[x].ls,rs=a[x].rs;\n\ta[x].sum=a[x].val; a[x].size=1;\n\tif(ls) a[x].sum-=a[x].val,a[x].sum+=a[ls].sum+a[x].val*B[a[ls].size],a[x].size+=a[ls].size;\n\tif(rs) a[x].sum+=a[rs].sum*B[a[ls].size+1],a[x].size+=a[rs].size;\n}\nint merge(int x,int y)\n{\n\tif(!x||!y) return x|y;\n\tif(a[x].key>a[y].key)\n\t{\n\t\ta[x].rs=merge(a[x].rs,y); pushup(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\ta[y].ls=merge(x,a[y].ls); pushup(y);\n\t\treturn y;\n\t}\n}\npar split(int x,int k)\n{\n\tif(!k) return (par){0,x};\n\tint ls=a[x].ls,rs=a[x].rs;\n\tif(k==a[ls].size)\n\t{\n\t\ta[x].ls=0; pushup(x);\n\t\treturn (par){ls,x};\n\t}\n\telse if(k==a[ls].size+1)\n\t{\n\t\ta[x].rs=0; pushup(x);\n\t\treturn (par){x,rs};\n\t}\n\telse if(k<a[ls].size)\n\t{\n\t\tpar t=split(ls,k);\n\t\ta[x].ls=t.y; pushup(x);\n\t\treturn (par){t.x,x};\n\t}\n\telse\n\t{\n\t\tpar t=split(rs,k-a[ls].size-1);\n\t\ta[x].rs=t.x; pushup(x);\n\t\treturn (par){x,t.y};\n\t}\n}\ninline int newnode(ull val)\n{\n\tint x=++cnt;\n\ta[x].ls=a[x].rs=0; a[x].size=1;\n\ta[x].sum=a[x].val=val; a[x].key=rand()*rand();\n\treturn x;\n}\nvoid insert(int x,ull val)\n{\n\tpar t=split(root,x);\n\troot=merge(t.x,merge(newnode(val),t.y));\n}\null query(int x,int k)\n{\n\tpar t1=split(root,x-1),t2=split(t1.y,k);\n\tull re=a[t2.x].sum;\n\troot=merge(t1.x,merge(t2.x,t2.y));\n\treturn re;\n}\nvoid update(int x,ull y)\n{\n\tpar t1=split(root,x-1),t2=split(t1.y,1);\n\troot=merge(t1.x,merge(newnode(y),t2.y));\n}\nvoid output(int x)\n{\n\tint ls=a[x].ls,rs=a[x].rs;\n\tif(ls) output(ls);\n\tprintf(\"%lld \",a[x].val);\n\tif(rs) output(rs);\n}\nint build(int l,int r)\n{\n\tif(l==r) return newnode(s[l]-'a'+1);\n\tint mid=(l+r)>>1;\n\treturn merge(build(l,mid),build(mid+1,r));\n}\nint main()\n{\n\tsrand(20021214);\n\tB[0]=1;\n\tfor(int i=1;i<=1000000;i++) B[i]=B[i-1]*base;\n\tscanf(\"%s\",s+1); int n=strlen(s+1);\n\troot=build(1,n);\n\tint m=rd(); while(m--)\n\t{\n\t\tchar opt=nc(); while(opt!='Q'&&opt!='R'&&opt!='I')opt=nc(); int x=rd();\n\t\tif(opt=='Q')\n\t\t{\n\t\t\tint y=rd();\n\t\t\tint r=min(n-x+1,n-y+1)+1,l=0;\n\t\t\t// printf(\"%d %d\\n\",x,y);\n\t\t\twhile(l<r)\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\t// printf(\"%d %lld %lld\\n\",mid,query(x,mid),query(y,mid));\n\t\t\t\tif(query(x,mid)==query(y,mid)) l=mid+1;\n\t\t\t\telse r=mid;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",l-1);\n\t\t\t// printf(\"djhdjhfjhfgjuhdfgiodfg=%d\\n\",query(x,5)==query(y,5));\n\t\t\t// r--;\n\t\t\t// int d,p=0;\n\t\t\t// for(d=1;d<=r&&query(x,d)==query(y,d);d<<=1) ;\n\t\t\t// for(d>>=1;d;d>>=1) if(p+d<=r&&query(x,p+d)==query(y,p+d)) p+=d;\n\t\t\t// // printf(\"djhdjhfjhfgjuhdfgiodfg=%d\\n\",query(x,5)==query(y,5));\n\t\t\t// printf(\"%d\\n\",p);\n\t\t}\n\t\telse if(opt=='R')\n\t\t{\n\t\t\tchar d=nc();while(d<'a'&&d>'z')d=nc(); ull val=d-'a'+1;\n\t\t\tupdate(x,val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn++;\n\t\t\tchar d=nc();while(d<'a'&&d>'z')d=nc(); ull val=d-'a'+1;\n\t\t\tinsert(x,val);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u63a8\u9500\u4e2a\u4ebablog [JZYshuraK](https://www.cnblogs.com/ShuraK/p/10132440.html)",
        "postTime": 1546857369,
        "uid": 58178,
        "name": "JZYshuraK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": " \n http://www.elijahqi.win/2018/01/23/bzoj1014/\n\n http://blog.csdn.net/elijahqi/article/details/79139088\n\nDescription\n\n\n\n\u706b\u661f\u4eba\u6700\u8fd1\u7814\u7a76\u4e86\u4e00\u79cd\u64cd\u4f5c\uff1a\u6c42\u4e00\u4e2a\u5b57\u4e32\u4e24\u4e2a\u540e\u7f00\u7684\u516c\u5171\u524d\u7f00\u3002\u6bd4\u65b9\u8bf4\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1amadamimadam\uff0c\n\n\u6211\u4eec\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5404\u4e2a\u5b57\u7b26\u4e88\u4ee5\u6807\u53f7\uff1a\u5e8f\u53f7\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u5b57\u7b26 m a d a m i m a d a m \u73b0\u5728\uff0c\n\n\u706b\u661f\u4eba\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570LCQ(x, y)\uff0c\u8868\u793a\uff1a\u8be5\u5b57\u7b26\u4e32\u4e2d\u7b2cx\u4e2a\u5b57\u7b26\u5f00\u59cb\u7684\u5b57\u4e32\uff0c\u4e0e\u8be5\u5b57\u7b26\u4e32\u4e2d\u7b2cy\u4e2a\u5b57\u7b26\u5f00\u59cb\u7684\u5b57\u4e32\n\n\uff0c\u4e24\u4e2a\u5b57\u4e32\u7684\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002\u6bd4\u65b9\u8bf4\uff0cLCQ(1, 7) = 5, LCQ(2, 10) = 1, LCQ(4, 7) = 0 \u5728\u7814\u7a76LCQ\u51fd\u6570\u7684\u8fc7\u7a0b\n\n\u4e2d\uff0c\u706b\u661f\u4eba\u53d1\u73b0\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u5173\u8054\uff1a\u5982\u679c\u628a\u8be5\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\u6392\u597d\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5f88\u5feb\u5730\u6c42\u51faLCQ\u51fd\u6570\u7684\u503c\uff1b\u540c\u6837\uff0c\n\n\u5982\u679c\u6c42\u51fa\u4e86LCQ\u51fd\u6570\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5f88\u5feb\u5730\u5c06\u8be5\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u6392\u597d\u5e8f\u3002 \u5c3d\u7ba1\u706b\u661f\u4eba\u806a\u660e\u5730\u627e\u5230\u4e86\u6c42\u53d6LCQ\u51fd\u6570\u7684\u5feb\u901f\n\n\u7b97\u6cd5\uff0c\u4f46\u4e0d\u7518\u5fc3\u8ba4\u8f93\u7684\u5730\u7403\u4eba\u53c8\u7ed9\u706b\u661f\u4eba\u51fa\u4e86\u4e2a\u96be\u9898\uff1a\u5728\u6c42\u53d6LCQ\u51fd\u6570\u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u6539\u53d8\u5b57\u7b26\u4e32\u672c\u8eab\u3002\u5177\u4f53\u5730\u8bf4\n\n\uff0c\u53ef\u4ee5\u66f4\u6539\u5b57\u7b26\u4e32\u4e2d\u67d0\u4e00\u4e2a\u5b57\u7b26\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u3002\u5730\u7403\u4eba\u60f3\u8003\u9a8c\u4e00\u4e0b\uff0c\u5728\u5982\u6b64\n\n\u590d\u6742\u7684\u95ee\u9898\u4e2d\uff0c\u706b\u661f\u4eba\u662f\u5426\u8fd8\u80fd\u591f\u505a\u5230\u5f88\u5feb\u5730\u6c42\u53d6LCQ\u51fd\u6570\u7684\u503c\u3002\n\nInput\n\n\u7b2c\u4e00\u884c\u7ed9\u51fa\u521d\u59cb\u7684\u5b57\u7b26\u4e32\u3002\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570M\uff0c\u8868\u793a\u64cd\u4f5c\u7684\u4e2a\u6570\u3002\u63a5\u4e0b\u6765\u7684M\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u64cd\u4f5c\u3002\u64cd\n\n\u4f5c\u67093\u79cd\uff0c\u5982\u4e0b\u6240\u793a\n\n1\u3001\u8be2\u95ee\u3002\u8bed\u6cd5\uff1aQxy\uff0cx,y\u5747\u4e3a\u6b63\u6574\u6570\u3002\u529f\u80fd\uff1a\u8ba1\u7b97LCQ(x,y)\u9650\u5236\uff1a1<=x,y<=\u5f53\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\n\n2\u3001\u4fee\u6539\u3002\u8bed\u6cd5\uff1aRxd\uff0cx\u662f\u6b63\u6574\u6570\uff0cd\u662f\u5b57\u7b26\u3002\u529f\u80fd\uff1a\u5c06\u5b57\u7b26\u4e32\u4e2d\u7b2cx\u4e2a\u6570\u4fee\u6539\u4e3a\u5b57\u7b26d\u3002\u9650\u5236\uff1ax\u4e0d\u8d85\u8fc7\u5f53\u524d\u5b57\n\n\u7b26\u4e32\u957f\u5ea6\u3002\n\n3\u3001\u63d2\u5165\uff1a\u8bed\u6cd5\uff1aIxd\uff0cx\u662f\u975e\u8d1f\u6574\u6570\uff0cd\u662f\u5b57\u7b26\u3002\u529f\u80fd\uff1a\u5728\u5b57\u7b26\u4e32\u7b2cx\u4e2a\u5b57\u7b26\u4e4b\u540e\u63d2\u5165\u5b57\u7b26d\uff0c\u5982\u679cx=0\uff0c\u5219\u5728\u5b57\n\n\u7b26\u4e32\u5f00\u5934\u63d2\u5165\u3002\u9650\u5236\uff1ax\u4e0d\u8d85\u8fc7\u5f53\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\n\nOutput\n\n\u5bf9\u4e8e\u8f93\u5165\u6587\u4ef6\u4e2d\u6bcf\u4e00\u4e2a\u8be2\u95ee\u64cd\u4f5c\uff0c\u4f60\u90fd\u5e94\u8be5\u8f93\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\u3002\u4e00\u4e2a\u7b54\u6848\u4e00\u884c\u3002\n\nSample Input\n\nmadamimadam\n\n7\nQ 1 7\nQ 4 8\nQ 10 11\n\nR 3 a\nQ 1 7\nI 10 a\nQ 2 11\nSample Output\n\n5\n1\n0\n2\n1\nHINT\n\n1\u3001\u6240\u6709\u5b57\u7b26\u4e32\u81ea\u59cb\u81f3\u7ec8\u90fd\u53ea\u6709\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002\n\n\n2\u3001M<=150,000\n\n\n3\u3001\u5b57\u7b26\u4e32\u957f\u5ea6L\u81ea\u59cb\u81f3\u7ec8\u90fd\u6ee1\u8db3L<=100,000\n\n\n4\u3001\u8be2\u95ee\u64cd\u4f5c\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc710,000\u4e2a\u3002\n\n\n\u5bf9\u4e8e\u7b2c1\uff0c2\u4e2a\u6570\u636e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u81ea\u59cb\u81f3\u7ec8\u90fd\u4e0d\u8d85\u8fc71,000\n\n\n\u5bf9\u4e8e\u7b2c3\uff0c4\uff0c5\u4e2a\u6570\u636e\uff0c\u6ca1\u6709\u63d2\u5165\u64cd\u4f5c\u3002\n\n\n\u4e4b\u524d\u542c\u95fb\u8fc7 \u8bf4\u8fd9\u662f\u4e2a\u5e73\u8861\u6811\u7684\u9898\uff1f\u4eca\u5929\u60f3\u4e86\u60f3\u55ef\uff1f\uff1f\u8fd9\u600e\u4e48\u505a \u54e6 \u5bf9\u5bf9\u54e6\u8fd9\u4e2a\u53ef\u4ee5\u90a3splay\u7ef4\u62a4\u4e0bhash\u503c\u7684  \u600e\u4e48\u641e \u6211\u9996\u5148\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u51fa\u6765 \u7136\u540e\u540c\u65f6\u66f4\u65b0\u7684\u65f6\u5019\u8ba1\u7b97hash\u503c \u600e\u4e48\u7b97 \u5c31hash[l]\\*(size[r]+1)+hash[x]\\*size[r]+hash[r]  \u7136\u540e\u600e\u4e48\u7b97\u7b54\u6848 \u5c31\u662f\u6211\u4eec\u9488\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u6211\u53bb\u4e8c\u5206\u4e00\u4e0b\u957f\u5ea6 \u7136\u540e\u6bcf\u6b21\u90fd\u628a\u8fd9\u4e2a\u957f\u5ea6\u7684\u53d6\u51fa\u6765\u6bd4\u8f83\u4e0bhash\u503c\u5373\u53ef \u5176\u4ed6\u64cd\u4f5c\u90fd\u540csplay\u7684\u57fa\u672c\u64cd\u4f5c\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 110000\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nint n,c[N][2],fa[N],size[N],root,cnt,m;\nchar s[N],v[N],op[10];\nunsigned int hs[N],p[N];\ninline void update(int x){\n    int l=c[x][0],r=c[x][1];\n    size[x]=size[l]+size[r]+1;\n    hs[x]=hs[l]*(p[size[r]+1])+p[size[r]]*(v[x]-'a'+1)+hs[r];\n}\ninline void build(int f,int l,int r){\n    if (l>r) return;int mid=l+r>>1;\n    c[f][mid>f]=mid;fa[mid]=f;v[mid]=s[mid];hs[mid]=s[mid]-'a'+1;\n    if (l==r) {size[l]=1;return;}\n    build(mid,l,mid-1);build(mid,mid+1,r);update(mid);\n} \ninline void rotate(int x,int &tar){\n    int y=fa[x],z=fa[y];\n    if (y==tar) tar=x;else c[z][c[z][1]==y]=x;\n    int l=c[y][1]==x,r=l^1;\n    fa[c[x][r]]=y;fa[y]=x;fa[x]=z;\n    c[y][l]=c[x][r];c[x][r]=y;update(y);update(x);\n}\ninline void splay(int x,int &tar){\n    while(x!=tar){\n        int y=fa[x],z=fa[y];\n        if (y!=tar){\n            if (c[y][0]==x^c[z][0]==y) rotate(x,tar);else rotate(y,tar);\n        }rotate(x,tar);\n    }\n}\ninline int find(int x,int sz){\n    int l=c[x][0],r=c[x][1];\n    if (size[l]+1==sz) return x;\n    if (sz<=size[l]) return find(l,sz);else return find(r,sz-size[l]-1);\n}\ninline int split(int x,int y){\n    int xx=find(root,x),yy=find(root,y);\n    splay(yy,root);splay(xx,c[root][0]);return c[xx][1];\n}\ninline bool check(int x,int y,int mid){\n    int xx=split(x,x+mid+1),tmp=hs[xx];\n    int yy=split(y,y+mid+1),tmp1=hs[yy];\n    return tmp==tmp1;\n}\ninline void print(int x){\n    if (c[x][0]) print(c[x][0]);\n    printf(\"%c %u\\n\",v[x],hs[x]);\n    if (c[x][1]) print(c[x][1]);\n}\nint main(){\n    freopen(\"bzoj1014.in\",\"r\",stdin);\n    scanf(\"%s\",s+2);n=strlen(s+2);root=n+3>>1;p[0]=1;m=read();cnt=n+2;\n    for (int i=1;i<=100100;++i) p[i]=p[i-1]*27;build(0,1,n+2);\n//    print(root);puts(\"\");\n    for (int i=1;i<=m;++i){\n        scanf(\"%s\",op);\n        if (op[0]=='Q'){\n            int x=read(),y=read();int l=1,r=min(cnt-x-1,cnt-y-1);\n            while(l<=r){\n                int mid=l+r>>1;\n                if (check(x,y,mid)) l=mid+1;else r=mid-1;\n            } printf(\"%d\\n\",r);\n        }\n        if (op[0]=='R'){\n            int x=read();char cc[2];scanf(\"%s\",cc);\n            int tmp=split(x,x+2);v[tmp]=cc[0];hs[tmp]=cc[0]-'a'+1;\n            update(fa[tmp]);update(root);\n        }\n        if (op[0]=='I'){\n            int x=read()+1;char cc[2];scanf(\"%s\",cc);\n            int xx=find(root,x),yy=find(root,x+1);splay(yy,root);splay(xx,c[root][0]);\n            v[++cnt]=cc[0];hs[cnt]=cc[0]-'a'+1;size[cnt]=1;fa[cnt]=xx;c[xx][1]=cnt;\n            update(xx);update(root);\n        } \n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1516688081,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u7b54\u6848\u6765\u8ba1\u7b97\u3002\n\n\u81f3\u4e8e\u6dfb\u52a0\u548c\u4fee\u6539\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Splay\u6765\u7ef4\u62a4\u590d\u6742\u5ea6O(mlogn)\u5f53\u7136Splay\u5e38\u6570\u5f88\u5927\u3002\n\n\u00b7#include<bits/stdc++.h>\n\n```cpp\nusing namespace std;\nconst int N=150005,mod=9875321;\ntypedef long long ll;\nint size[N],fa[N],c[N][2],v[N],h[N],p[N],n,m,cnt,rt;\nchar ch[N];\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid update(int x)\n{\n    size[x]=size[c[x][0]]+size[c[x][1]]+1;\n    h[x]=(h[c[x][0]]+1ll*v[x]*p[size[c[x][0]]]%mod+1ll*h[c[x][1]]*p[size[c[x][0]]+1]%mod)%mod;\n}\nvoid rotate(int x,int &k)\n{\n    int y=fa[x],z=fa[y],l,r;\n    l=(c[y][1]==x);r=l^1;\n    if(k==y)k=x;else c[z][c[z][1]==y]=x;\n    fa[y]=x;fa[x]=z;fa[c[x][r]]=y;\n    c[y][l]=c[x][r];c[x][r]=y;\n    update(y);update(x);\n}\nvoid splay(int x,int &k)\n{\n    while(x!=k)\n    {\n        int y=fa[x],z=fa[y];\n        if(y!=k)\n        {\n            if(c[y][0]==x^c[z][0]==y)rotate(x,k);\n            else rotate(y,k);\n        }\n        rotate(x,k);\n    }\n}\nint find(int x,int k)\n{\n    if(size[c[x][0]]+1==k)return x;\n    else if(size[c[x][0]]>=k)return find(c[x][0],k);\n    else return find(c[x][1],k-size[c[x][0]]-1);\n}\nvoid insert(int k,int w)\n{\n    int x=find(rt,k),y=find(rt,k+1);\n    splay(x,rt);splay(y,c[x][1]);\n    int z=++cnt;c[y][0]=z;fa[z]=y;v[z]=w;\n    update(z);update(y);update(x);\n}\nint query(int k,int w)\n{\n    int x=find(rt,k);int y=find(rt,k+w+1);\n    splay(x,rt);splay(y,c[x][1]);\n    int z=c[y][0];\n    return h[z];\n}\nint solve(int x,int y)\n{\n    int l=1,r=min(cnt-x,cnt-y)-1,ans=0;\n    while(l<=r)\n    {\n        int mid=l+r>>1;\n        if(query(x,mid)==query(y,mid))l=mid+1,ans=mid;\n        else r=mid-1;\n    }\n    return ans;\n}\nvoid build(int l,int r,int f)\n{\n    if(l>r)return;\n    int mid=l+r>>1;\n    fa[mid]=f;c[f][mid>=f]=mid;v[mid]=ch[mid]-'a'+1;\n    if(l==r){\n        size[mid]=1;h[mid]=v[mid];return;\n    }\n    build(l,mid-1,mid);build(mid+1,r,mid);\n    update(mid);\n}\nint main()\n{\n    scanf(\"%s\",ch+2);\n    n=strlen(ch+2);int x,y;\n    p[0]=1;for(int i=1;i<=150004;++i)p[i]=p[i-1]*27%mod;cnt=n+2;\n    build(1,n+2,0);rt=(n+3)>>1;\n    m=read();char s[5],d[5];\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%s\",s);\n        if(s[0]=='Q'){\n            x=read();y=read();printf(\"%d\\n\",solve(x,y));\n        }\n        else if(s[0]=='R'){\n            x=read();scanf(\"%s\",d+1);x=find(rt,x+1);splay(x,rt);\n            v[rt]=d[1]-'a'+1;update(rt);\n        }\n        else{\n            x=read();scanf(\"%s\",d+1);insert(x+1,d[1]-'a'+1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1516073896,
        "uid": 25438,
        "name": "\u5927\u5955\u54e5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4036 \u3010[JSOI2008]\u706b\u661f\u4eba\u3011"
    }
]