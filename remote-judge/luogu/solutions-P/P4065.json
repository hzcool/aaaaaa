[
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u7528\u81ea\u5df1\u5199\u6570\u636e\u7ed3\u6784\u8fc7\u6b64\u9898\u7684\u9898\u89e3\u3002\u3002\u3002\n\n\u5408\u6cd5\u7684\u533a\u95f4\u5c31\u662f\u5305\u542b\u6240\u6709\u7684\u5728\u533a\u95f4\u5185\u51fa\u73b0\u8fc7\u5f97\u989c\u8272\u3002\u3002\n\n\u8fd9\u79cd\u9898\u6709\u4e00\u79cd\u795e\u5947\u7684hash\u505a\u6cd5\u3002\u3002\u3002\n\n\u6211\u4eec\u7ed9\u6240\u6709\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\u8d4b\u4e00\u4e2a\u503c\uff0c\u4f7f\u5f97\u540c\u8272\u7684\u4f4d\u7f6e\u7684\u503c\u52a0\u8d77\u6765\u7b49\u4e8e0\n\n\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65b9\u6cd5\u6bd4\u8f83\u663e\u7136\uff0c\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u7136\u540e\u4e24\u4e2a\u524d\u7f00\u548c\u76f8\u540c\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u641e\u51fa\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4\u3002\u3002\n\n\u81f3\u4e8e\u8fd9\u79cd\u505a\u6cd5\u7684\u6b63\u786e\u6027\u3002\u3002\u3002\u611f\u89c9\u8bb0\u5f97\u67d0\u5927\u4f6c\u66fe\u7ecf\u8bc1\u8fc7\u3002\u3002\u3002\u4f46\u662f\u7a9d\u4e0d\u4f1a\u3002\u3002\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<vector>\n#include<map>\n#define LL long long\nusing namespace std;\nconst int N=3e5+10;\nconst LL mod=1e12;\nint n;\nint a[N];\nmap<LL,LL> mp;\nLL f[N];\nvector<int> ve[N];\nint main(){\n    int T;scanf(\"%d\",&T);\n    LL re=0,x,op,ans=0;\n    while(T--){\n        scanf(\"%d\",&n);ans=0;\n        for(int i=1;i<=n;++i){\n            scanf(\"%d\",&a[i]);\n            ve[a[i]].push_back(i);\n        }\n        for(int i=1;i<=n;++i){\n            if(ve[i].size()==0) continue;\n            if(ve[i].size()==1) f[ve[i][0]]=0;\n            re=0;\n            for(int j=0;j<ve[i].size()-1;++j){\n                x=rand()*rand()%mod*rand()%mod*rand()%mod;\n                op=rand()&1;if(op) x=-x;\n                f[ve[i][j]]=x;re+=x;\n            }\n            f[ve[i][ve[i].size()-1]]=-re;\n        }\n        mp.clear();re=0;mp[0]=1;\n        for(int i=1;i<=n;++i){\n            re+=f[i];\n            ans+=mp[re];\n            ++mp[re];\n        }\n        printf(\"%lld\\n\",ans);\n        for(int i=1;i<=n;++i) ve[i].clear();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1542285441,
        "uid": 46755,
        "name": "Iscream2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "\u975e\u5e38\u4f20\u7edf\u7684\u4e00\u9053\u7ebf\u6bb5\u6811\u9898\uff1f\n\n\u4e0b\u9762\u4ee5\u8fd9\u9053\u9898\u4e3a\u4f8b\u4ecb\u7ecd\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u5e94\u7528\u2014\u2014\u6c42\u70b9\u5bf9\u8d21\u732e\n\n# \u672c\u9898\u9898\u89e3\n\n\u6211\u4eec\u53d1\u73b0\u5220\u5b8c\u989c\u8272\u4e4b\u540e\u5269\u4f59\u5143\u7d20\u5fc5\u5b9a\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4~~(\u8fd9\u4e0d\u662f\u9898\u76ee\u8981\u6c42\u561b)~~\n\n\u663e\u7136\u4e24\u4e2a\u4e0d\u540c\u7684\u8fde\u7eed\u533a\u95f4\u5bf9\u5e94\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u5220\u9664\u989c\u8272\u65b9\u6848\n\n\u6240\u4ee5\u6211\u4eec\u7edf\u8ba1\u65b9\u6848\u6570\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u533a\u95f4\n\n\u800c\u533a\u95f4\u662f\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u70b9\u5bf9\u7684\u3002\n\n\u6240\u4ee5\u4e0b\u9762\u5c31\u662f\u7ecf\u5178\u7684\u6c42\u70b9\u5bf9\u7684\u603b\u8d21\u732e\u7684\u7edf\u8ba1\u95ee\u9898\u4e86\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u6c38\u8fdc\u662f\u4e00\u4e2a\u2014\u2014\u5148\u679a\u4e3e\u4e00\u4e2a\u7aef\u70b9\uff0c\u518d\u7528\u6570\u636e\u7ed3\u6784\u89e3\u51b3\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9(\u901a\u5e38\u662f\u7ebf\u6bb5\u6811)\n\n\u6362\u53e5\u8bdd\u8bb2\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u5408\u6cd5\u5de6\u7aef\u70b9\uff0c\u52a0\u5728\u4e00\u8d77\u5c31\u662f\u7b54\u6848\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u4e5f\u662f\u76f8\u540c\u7684\u601d\u8def\u7edf\u8ba1\uff0c\u6211\u4eec\u73b0\u5728\u679a\u4e3e\u53f3\u7aef\u70b9\n\n\u5047\u8bbe\u6211\u4eec\u679a\u4e3e\u7684\u53f3\u7aef\u70b9\u662fi\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5de6\u7aef\u70b9l\u5728\u4ec0\u4e48\u65f6\u5019\u5408\u6cd5\n\n\u663e\u7136i\u4e4b\u540e\u7684\u6240\u6709\u989c\u8272\u8981\u88ab\u5220\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u6574\u4e2a\u5e8f\u5217\u4f1a\u88ab\u5207\u5272\u6210\u51e0\u4e2a\u5c0f\u6bb5\n\n\u800c\u8fd9\u4e2al\u53ea\u80fd\u5728\u548ci\u5728\u540c\u4e00\u4e2a\u533a\u95f4\u91cc\n\n\u6211\u4eec\u8bbe**\u989c\u8272**\u4e3ai\u7684\u70b9\u7684\u4f4d\u7f6e\u6700\u5927\u503c\u4e3a$max_{i}$\uff0c\u4f4d\u7f6e\u6700\u5c0f\u503c\u4e3a$min_{i}$\n\n\u663e\u7136\u6240\u6709$max_{k}$\u5927\u4e8e$i$\u7684\u989c\u8272\u90fd\u4f1a\u88ab\u5220\u53bb\uff0c\u56e0\u6b64\u5408\u6cd5\u5de6\u7aef\u70b9\u81f3\u5c11\u4fdd\u8bc1\u5728\u5b83\u548ci\u4e4b\u95f4\u4e0d\u5b58\u5728\u4e00\u5b9a\u4f1a\u88ab\u5220\u53bb\u7684\u989c\u8272\n\n**\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u627e\u5230$max_{col_{j}}$\u5927\u4e8e$i$\uff0c\u4e14\u79bbi\u6700\u8fd1\u7684\u70b9j**\n\n\u7136\u540e\u6211\u4eec\u9009\u62e9\u7684\u5de6\u7aef\u70b9\u5c31\u5fc5\u987b\u5728j~i\u4e4b\u95f4\uff0c\u4e14\u4e0d\u80fd\u9009j\n\n(\u663e\u7136j~i\u91cc\u8fb9\u7684\u70b9\u81f3\u5c11\u4e0d\u4f1a\u88ab\u5220\u53bb(\u56e0\u4e3a\u6700\u53f3\u7684\u989c\u8272\u8fd8\u662f\u5728i\u4ee5\u5185)\uff0c\u4f46\u662f\u8d8a\u8fc7j\u4e4b\u540e\u56e0\u4e3aj\u7684\u989c\u8272\u4e00\u5b9a\u4f1a\u88ab\u5220\u6389(\u56e0\u4e3a$max_{col_{j}}$\u5927\u4e8e$i$)\u6240\u4ee5\u4e0d\u53ef\u4ee5\u8d8a\u8fc7j)\n\n\u4f46\u662f\u8fd8\u6ca1\u6709\u5b8c\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u989c\u8272j\u7684$max$\u5c0f\u4e8e$i$\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5de6\u7aef\u70b9\u4e0d\u53ef\u4ee5\u843d\u5728$(min_{j},max_{j}]$\u4e4b\u95f4\uff0c\u56e0\u4e3a\u5982\u679c\u843d\u5728\u4e86\u8fd9\u4e2a\u533a\u95f4\u91cc\uff0c\u663e\u7136\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u989c\u8272j\u4f1a\u88ab\u5220\u6389(\u56e0\u4e3a$min_{j}$\u5728\u5de6\u7aef\u70b9\u4e4b\u524d)\uff0c\u4f46\u662f$max_{j}$\u53c8\u5728\u533a\u95f4\u91cc\uff0c\u6b64\u65f6\u6211\u4eec\u7684\u533a\u95f4\u5c31\u4e0d\u662f\u8fde\u7eed\u7684\u4e86\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\uff0c\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u53f3\u7aef\u70b9i\n\n\u5982\u679c\u8fd9\u4e2a\u70b9$i=max_{col_{i}}$\u7684\u8bdd\uff0c\n\u6211\u4eec\u5c31\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4$(min_{col_{i}},max_{col_{i}}]$\u8d4b\u503c\u4e3a1\uff0c\u8868\u793a\u8fd9\u4e9b\u70b9\u88ab\u7981\u7528\n\n\u73b0\u5728\u6211\u4eec\u552f\u4e00\u7684\u95ee\u9898\u53d8\u6210\u5982\u4f55\u786e\u5b9a$max_{col_{j}}$\u5927\u4e8e$i$\uff0c\u4e14\u79bbi\u6700\u8fd1\u7684\u70b9j\uff0c\n\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u5c06\u70b9ipush\u8fdb\u4e00\u4e2a\u6808\u91cc\uff0c\u7136\u540e\u6211\u4eec\u5f00\u59cb\u8d2a\u5fc3\uff0c\u5982\u679c\u6808\u9876\u7684$max$\u5df2\u7ecf\u5c0f\u4e8ei\u4e86\u6211\u4eec\u5c31pop,\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a$max$\u5927\u4e8ei\u7684\u70b9\u4f5c\u4e3a\u5de6\u7aef\u70b9l\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6b64\u65f6i\u5230l\u91cc\u672a\u88ab\u7981\u7528\u7684\u70b9\u5c31\u662f\u6240\u6709\u7684\u5408\u6cd5\u5de6\u7aef\u70b9\uff0c(i-l)\u518d\u51cf\u53bb\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u548c\u5c31\u662f\u8fd9\u4e2a\u53f3\u7aef\u70b9i\u7684\u6240\u6709\u5408\u6cd5\u5de6\u7aef\u70b9\u6570\u91cf\u4e86\uff0c\u679a\u4e3e\u6240\u6709\u7684\u53f3\u7aef\u70b9i\u7136\u540e\u628a\u5408\u6cd5\u5de6\u7aef\u70b9\u6570\u91cf\u52a0\u5728\u4e00\u8d77\u5c31\u662f\u7b54\u6848\u4e86\n\n\u4ee3\u7801\u7684\u8bdd\u5f88\u77ed\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\u548c\u4e00\u4e2a\u6808\u7684\u4ee3\u7801\u91cf\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<vector>\nusing namespace std;const int N=3*1e5+10;typedef long long ll;\nint n;int mi[N];int ma[N];int cnt;int col[N];ll res;int T;\nstruct linetree//\u8d44\u74f7\u533a\u95f4\u6c42\u548c\uff0c\u533a\u95f4\u8d4b\u503c \n{\n\tint val[4*N];int sev[4*N];\n\tinline void pushdown(int p,int len)\n\t{if(sev[p]){val[p<<1]=len/2;val[p<<1|1]=len-len/2;sev[p<<1]=1;sev[p<<1|1]=1;}}\n\tvoid setval(int p,int l,int r,int dl,int dr)\n\t{\n\t\tif(dl==l&&dr==r){val[p]=r-l;sev[p]=1;return;}\n\t\tint mid=(l+r)/2;pushdown(p,r-l);\n\t\tif(dl<mid){setval(p<<1,l,mid,dl,min(mid,dr));}\n\t\tif(mid<dr){setval(p<<1|1,mid,r,max(dl,mid),dr);}\n\t\tval[p]=val[p<<1]+val[p<<1|1];\n\t}\n\tint sum(int p,int l,int r,int dl,int dr)\n\t{\n\t\tif(dl==l&&dr==r){return val[p];}\n\t\tint mid=(l+r)/2;int res=0;pushdown(p,r-l);\n\t\tif(dl<mid){res+=sum(p<<1,l,mid,dl,min(dr,mid));}\n\t\tif(mid<dr){res+=sum(p<<1|1,mid,r,max(dl,mid),dr);}\n\t\treturn res;\n\t}\n}lt;\nstruct data{int col;int pos;};stack <data> s;//\u5f00\u4e86\u4e00\u4e2a\u6808 \ninline void clear(stack <data>& st){stack <data> emp;swap(emp,st);}\ninline void solve()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){scanf(\"%d\",&col[i]);}\n\tfor(int i=1;i<=n;i++){mi[i]=0x3f3f3f3f;ma[i]=0;}\n\tfor(int i=1;i<=4*n;i++){lt.val[i]=0;lt.sev[i]=0;}\n\tfor(int i=1;i<=n;i++){mi[col[i]]=min(mi[col[i]],i);}//\u5904\u7406min \n\tfor(int i=1;i<=n;i++){ma[col[i]]=max(ma[col[i]],i);}//\u5904\u7406max \n\tfor(int i=1;i<=n;i++)//\u5f00\u59cb\u679a\u4e3e\u53f3\u7aef\u70b9 \n\t{\n\t\tif(i==ma[col[i]]&&ma[col[i]]!=mi[col[i]])//\u5982\u679c\u662f\u53f3\u7aef\u70b9\u7684\u8bdd\u5c31\u533a\u95f4\u8d4b\u503c\u8868\u793a\u7981\u7528 \n\t\t{lt.setval(1,0,n,mi[col[i]],ma[col[i]]);}\n\t\telse {s.push((data){col[i],i});}\n\t\tfor(;!s.empty()&&ma[s.top().col]<=i;s.pop());//\u627e\u5230\u5de6\u7aef\u70b9\u4e0b\u9650l \n\t\tint l=(s.empty())?0:s.top().pos;//\u5982\u679c\u6808\u662f\u7a7a\u7684\u8bdd\u610f\u5473\u7740\u6240\u6709\u5de6\u7aef\u70b9\u90fd\u53ef\u80fd\u5408\u6cd5 \n\t\tif(i!=l){res+=i-l-lt.sum(1,0,n,l,i);}//\u7136\u540e\u51cf\u53bb\u7981\u7528\u7684\u70b9\u6570\u5c31\u597d\u4e86 \n\t}printf(\"%lld\\n\",res);res=0;clear(s);//\u8bb0\u5f97\u6e05\u7a7a \n}\nint main(){scanf(\"%d\",&T);for(int z=1;z<=T;z++){solve();}return 0;}//\u62dc\u62dc\u7a0b\u5e8f~ \n```\n",
        "postTime": 1522657046,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "\u611f\u8c22 @Iscream \u7684\u601d\u8def\uff0c\u8fd9\u91cc\u501f\u9274\u4ed6\u7684\u601d\u8def\uff0c\u987a\u4fbf\u8fdb\u884c\u4e00\u4e0b\u4e0d\u662f\u5f88\u4e25\u683c\u7684\u8bc1\u660e\n\n\u4e3a\u4e86\u65b9\u4fbf\u8bc1\u660e\uff0c\u6211\u4eec\u5c06\u4ed6\u505a\u6cd5\u7684\u52a0\u6539\u6210\u5f02\u6216\u3002\u5373\uff1a**\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u8d4b\u4e00\u4e2a$[0,2^{60})$\u4e4b\u95f4\u7684\u968f\u673a\u503c\uff0c\u4f7f\u5f97\u6240\u6709\u989c\u8272\u76f8\u540c\u4f4d\u7f6e\u4e0a\u7684\u503c\u5f02\u6216\u548c\u4e3a$0$**\n\n\u5148\u6765\u8003\u8651\u533a\u95f4\u5f02\u6216\u548c\u7684\u6027\u8d28\u3002\u5bf9\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5206\u5f00\u8003\u8651\u3002\u7531\u4e8e\u6240\u6709\u6570\u90fd\u662f\u7b49\u6982\u7387\u968f\u673a\u7684\uff0c\u6240\u4ee5\u67d0\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e3a$1$\u7684\u6570\u7684\u6570\u91cf\u7684\u5947\u5076\u6027\u80af\u5b9a\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u4e00\u6bb5\u533a\u95f4\u5f02\u6216\u548c\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u503c\u663e\u7136\u5c31\u662f\u7b49\u6982\u7387\u968f\u673a\u7684\uff0c\u6545\u4e00\u6bb5\u533a\u95f4\u7684\u5f02\u6216\u548c\u662f\u7b49\u6982\u7387\u968f\u673a\u7684\n\n\u5f53\u4e00\u6bb5\u4e0d\u5408\u6cd5\u533a\u95f4\u7684\u5f02\u6216\u548c\u4e3a$0$\u65f6\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u4f1a\u51fa\u9519\n\n\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u989c\u8272\u6ca1\u6709\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u989c\u8272\u5728\u672c\u533a\u95f4\u5185\u7684\u6240\u6709\u503c\u90fd\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u533a\u95f4\u7684\u5f02\u6216\u548c\u662f\u968f\u673a\u7684\u3002\u4e00\u5171\u6709\u4e0d\u8d85\u8fc7$n^2-ans$\u79cd\u4e0d\u5408\u6cd5\u533a\u95f4\uff0c\u6240\u4ee5\u603b\u7684\u51fa\u9519\u6982\u7387\u662f$1-(1-2^{-60})^{n^2-ans}$\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u5927\u6982\u4e3a$0.0000000781$\uff0c\u8fd9\u4e2a\u6570\u5b57\u5df2\u7ecf\u975e\u5e38\u5c0f\u4e86\n\n\u5177\u4f53\u505a\u7684\u65f6\u5019\u76f4\u63a5\u7528map\u7edf\u8ba1\u524d\u7f00\u5f02\u6216\u548c\u4e3a$c$\u7684\u4f4d\u7f6e\u7684\u6570\u91cf\u5c31\u884c\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\nconst int N=300010;\nmap<LL,int> cnt;\nvector<int> col[N];\nLL val[N];int qwq,n;\n\nLL Rand(){return (LL)rand()<<30|rand();}\n\nvoid _main_()\n{\n    scanf(\"%d\",&n);\n    for(int i=1,x;i<=n;i++)\n        scanf(\"%d\",&x),col[x].push_back(i);\n    for(int i=1;i<=n;i++)\n        if(!col[i].empty())\n        {\n            LL sum=0;\n            for(int j=0;j<col[i].size()-1;j++)\n                sum^=(val[col[i][j]]=Rand());\n            val[col[i].back()]=sum;\n        }\n    LL sum=0,ans=0;cnt[0]=1;\n    for(int i=1;i<=n;i++)\n    {\n        sum^=val[i];\n        ans+=cnt[sum];\n        cnt[sum]++;\n    }\n    cout<<ans<<\"\\n\";\n    for(int i=1;i<=n;i++)\n        col[i].clear(),val[i]=0;\n    cnt.clear();\n}\n\nint main()\n{\n    srand(time(0));\n    scanf(\"%d\",&qwq);\n    while(qwq--) _main_();\n    return 0;\n}\n```",
        "postTime": 1557148864,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P4065)\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u989c\u8272\u5e8f\u5217\uff0c\u5047\u8bbe\u5220\u53bb\u989c\u8272\u96c6\u5408\u4e3a$A$,\u6c42\u6ee1\u8db3\u5220\u53bb$A$\u540e\u539f\u6765\u5e8f\u5217\u4e2d\u5143\u7d20\u662f\u8fde\u7eed\u7684\u65b9\u6848\u6570\n\n\u4f8b\u5982\u989c\u8272\u5e8f\u5217 $\\{1, 2, 3, 4, 5\\}$\uff0c\u5220\u9664\u989c\u8272 $3$ \u540e\u5e8f\u5217\u53d8\u6210\u4e86 $\\{1, 2\\}$ \u548c $\\{4, 5\\}$ \u4e24\u6bb5\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u3002\u800c\u5220\u9664\u989c\u8272 $1$ \u540e\u5e8f\u5217\u53d8\u6210\u4e86 $\\{2, 3, 4, 5\\}$\uff0c\u6ee1\u8db3\u6761\u4ef6\u3002\uff08\u9898\u76ee\u4f8b\u6817\u5b50\uff09\n\n\u8fd9\u9898\u6700\u5de7\u5999\u7684\u6015\u4e0d\u5c31\u662f\u628a\u6761\u4ef6\u8f6c\u5316\u4e3a\u6c42\u5408\u6cd5\u533a\u95f4\u4e86\u5427...(\u6211\u5c31\u8fd9\u91cc\u5361\u4e86\u5f88\u4e45)\n\n\u56e0\u4e3a\u5220\u53bb\u540e\u8981\u6c42\u8fde\u7eed\uff0c\u6240\u4ee5\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5220\u53bb\u540e\u662f\u4e00\u6bb5\u533a\u95f4\n\n\u8003\u8651\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u533a\u95f4\uff0c\u4ed6\u4eec\u5220\u53bb\u7684\u989c\u8272\u96c6\u5408\u4e00\u5b9a\u4e0d\u540c\uff0c\u56e0\u4e3a\u5220\u53bb\u7684\u989c\u8272\u76f8\u540c\u6700\u540e\u53ea\u4f1a\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff08\u5426\u5219\u4f60\u5c31\u53d1\u73b0\u4e86\u6570\u5b66\u4e2d\u7684\u4e0d\u786e\u5b9a\u6027\u539f\u7406\uff0c\u6ed1\u7a3d\uff09\n\n\u8fd9\u91cc\u6307\u7684\u5408\u6cd5\u4e0e\u5426\u662f\u6307\u5269\u4e0b\u7684\u533a\u95f4$[L,R]$\u542b\u6709\u7684\u6bcf\u4e2a\u989c\u8272\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0$fir>=L,$\u6700\u540e\u4e00\u6b21\u51fa\u73b0$end<=R$\uff0c\u8fd9\u6837\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u7b26\u5408\u9898\u610f\uff08\u8fd9\u91cc\u53ea\u662f\u5c06\u9898\u76ee\u8981\u6c42\u7684\u6761\u4ef6\u8f6c\u5316\u4e86\u4e00\u4e0b\uff09\n\n\u5173\u4e8e\u6c42\u5408\u6cd5\u533a\u95f4\uff0c\u5c31\u4e0d\u96be\u60f3\u5230$ \\ \\ \\ $\u7528\u679a\u4e3e\u4e00\u4e2a\u7aef\u70b9\uff0c\u6c42\u53e6\u4e00\u4e2a\u7aef\u70b9\u5408\u6cd5\u60c5\u51b5$\\ \\ $ \u7684\u65b9\u6cd5\n\n\u7136\u540e\u8003\u8651$r$\u679a\u4e3e\u5230\u4e86$i$\uff0c\u600e\u4e48\u6c42\u6240\u6709\u6ee1\u8db3\u7684$l$\n\n\u8003\u8651\u5176\u4e2d\u4e00\u79cd\u989c\u8272\uff0c\u53d1\u73b0\u5176\u5b9e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u4ee4\u8be5\u989c\u8272\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a$fir$,\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e$end$\uff0c\u5f53\u524d\u5904\u7406\u5230\u7684\u53f3\u7aef\u70b9\u4f4d\u7f6e\u4e3a$R(fir<=end)$\n\n1. R<fir\n\n1. fir<=R && R<end\n\n1. end<=R\n\n\u5176\u5b9e\u7b2c1\u79cd\u5b8c\u5168\u662f\u4e0d\u7528\u8003\u8651\u7684\uff0c\u4e3b\u8981\u8003\u86512\uff0c3\n\n$2 :$\u56e0\u4e3a\u6211\u4eec\u662f\u679a\u4e3e\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5$[R+1,n]$\u7684\u989c\u8272\u5176\u5b9e\u5e94\u8be5\u662f\u5168\u88ab\u5220\u53bb\u7684,\u90a3\u4e48\u6211\u4eec\u5728$[1,R]$\u5c31\u4e0d\u80fd\u9009\u5728$[R+1,n]$\u51fa\u73b0\u7684\u989c\u8272\n\n\u5047\u8bbe$L$\u662f$i<=R\\&\\&end[col[i]]>R(i\\in[0,R])$\u4e2d\u6700\u5927\u7684\uff08\u9ed8\u8ba4$end[a[0]]=inf$\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5de6\u7aef\u70b9\u4e0d\u80fd\u9009$[1,L]$\u56e0\u4e3a\u4e00\u65e6\u9009\u4e86$L$\uff0c\u800c$[R+1,n]$\u8fd8\u5b58\u5728$col[L]$\u5c31\u4e0d\u662f\u5408\u6cd5\u7684\u4e86\n\n$3 :end<=R$\u90a3\u4e48$[fir+1,end]$\u90fd\u662f\u4e0d\u80fd\u9009\u7684\u4e86,\u56e0\u4e3a\u4e00\u65e6\u9009\u4e86$[fir+1,end]$\uff0c\u603b\u4f1a\u6709$fir$\u6ca1\u88ab\u9009\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684,\u6240\u4ee5\u5c31\u53ef\u4ee5$[fir+1,end]$\u7528\u7ebf\u6bb5\u6811\u6253\u6807\u8bb0\uff0c\u6807\u8bb0\u662f\u4e0d\u80fd\u9009\u7684\u5c31\u884c\u4e86\n\n\u9644\u4e0a\u56fe\u7247\u4e00\u5f20\n\n![](https://cdn.luogu.com.cn/upload/pic/53412.png)\n\n\u8003\u8651\u591a\u79cd\u989c\u8272\u9664\u4e86$\\ $\u7b2c2\u79cd\u60c5\u51b5$\\ $L\u8981\u53d6\u6700\u5927\u4e4b\u5916\u4e0e\u4e00\u79cd\u989c\u8272\u5e76\u6ca1\u4ec0\u4e48\u4e0d\u540c\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u8bb0\u5f55,\u56e0\u4e3a\u6211\u4eec$R$\u662f\u5355\u589e\u7684,\u6211\u4eec\u52a0\u5165\u6808\u7684\u5143\u7d20\u4f4d\u7f6e\u4e00\u5b9a\u4e5f\u662f\u5355\u589e\u7684\uff0c\u90a3\u53ea\u8981\u627e\u5230\u6808\u4e2d\u7b2c\u4e00\u4e2a$end[col[i]]<=R$\u5c31\u597d\u4e86\uff0c\u5b83\u5bf9\u5e94\u7684$pos[i]$\u4e00\u5b9a\u662f$<=R$\u4e2d\u6700\u5927\u7684\n\n\u5173\u4e8e\u521d\u59cb\u5316$:$\u6211\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u76f4\u63a5\u662f\u5c06$x$\u5de6\u53f3\u513f\u5b50\u6e050\uff0c$s[x]=tag[x]=0$\u521d\u59cb\u5316\u7684\uff0c\u8fd9\u6837\u5b50\u6700\u574f\u60c5\u51b5\u662f\u6e052*n\u6b21\uff0c\u4e00\u822c\u60c5\u51b5\u8fd8\u662f\u5e94\u8be5\u5feb\u5f88\u591a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline void read(int &x){x=0;int f=1;char ch=getchar();while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}x=x*f;}\ntypedef long long LL;\nconst int N=300010,M=N<<1;\nint stc[N],sti[N],r;//stc:\u6808\u4e2d\u7b2ci\u4e2a\u7684\u989c\u8272col,sti:\u6808\u4e2d\u7b2ci\u4e2a\u7684\u7f16\u53f7id \nint a[N],fir[N],end[N],n;//fir:\u989c\u8272\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e,end:\u6700\u540e\u4e00\u4e2a\u7684\u4f4d\u7f6e \nLL ans;//long long \u4e00\u5b9a\u8981 \nstruct Segment_tree{\n    int s[M],l[M],r[M],rt,cnt; //s:\u533a\u95f4\u53ef\u4ee5\u9009\u54ea\u4e9b\u70b9(\u5373\u53bb\u6389\u7b2c\u4e09\u79cd\u4e0d\u80fd\u9009\u7684\u70b9\u8fd8\u80fd\u9009\u54ea\u4e9b) \n    #define lc l[x]//\u7b80\u5316\u4e66\u5199 \n    #define rc r[x]\n    inline void pushup(int x){s[x]=s[lc]+s[rc];}//\u4e0d\u89e3\u91ca \n    inline void build(int &x,int L,int R){//\u521d\u59cb\u5efa\u6811 \n\t\tx=++cnt;lc=rc=0;s[x]=R-L+1;//\u521d\u59cb\u5316\u90fd\u80fd\u9009 \n\t\tif(L==R)return;int mid=(L+R)>>1;\n\t\tbuild(lc,L,mid);build(rc,mid+1,R);\n\t}\n    inline void Del(int &x,int L,int R,int ll,int rr){//\u5c06[ll,rr]\u6807\u8bb0\u4e3a\u4e0d\u80fd\u9009 \n    \tif(!x)return;\n        if(ll<=L&&R<=rr){x=0;return;}//\u56e0\u4e3as[x]=0,\u4e0d\u4f1a\u5bf9\u4e0a\u9762\u9020\u6210\u4efb\u4f55\u8d21\u732e,\u6240\u4ee5\u76f4\u63a5\u5220\u9664\u5373\u53ef \n        int mid=(L+R)>>1;\n        if(ll<=mid)Del(lc,L,mid,ll,rr);\n        if(rr>mid)Del(rc,mid+1,R,ll,rr);\n        pushup(x);\n    }inline int get(int x,int L,int R,int ll,int rr){//\u6c42[ll,rr]\u6ee1\u8db3\u7684\u5de6\u7aef\u70b9\u4f4d\u7f6e\u4e2a\u6570 \n        if(!x)return 0;//\u4e0d\u5b58\u5728x\u8bf4\u660e\u6211\u4eec\u5220\u53bb\u4e86,\u90fd\u4e0d\u80fd\u9009\u5373s[x]=0 \n        if(ll<=L&&R<=rr)return s[x];\n        int mid=(L+R)>>1;\n        if(ll<=mid&&rr>mid)return get(lc,L,mid,ll,rr)+get(rc,mid+1,R,ll,rr);\n        else if(ll<=mid)return get(lc,L,mid,ll,rr);\n        else return get(rc,mid+1,R,ll,rr);\n    }\n}T;\nvoid slove(){\n    read(n);for(int i=1;i<=n;++i){read(a[i]);fir[i]=0;}\n    for(int i=1;i<=n;++i){if(!fir[a[i]])fir[a[i]]=i;end[a[i]]=i;}\n    T.rt=0;T.cnt=0;ans=0;T.build(T.rt,1,n);\n    for(int i=1;i<=n;++i){\n        if(i==end[a[i]]&&end[a[i]]!=fir[a[i]])T.Del(T.rt,1,n,fir[a[i]]+1,end[a[i]]);//\u7b2c\u4e09\u79cd\u60c5\u51b5\u51fa\u73b0\u4e86 \n        else {stc[++r]=a[i];sti[r]=i;}//\u7b2c\u4e8c\u79cd\u60c5\u51b5,\u66f4\u65b0\u4e00\u4e0b\u6808 \n        while(r&&end[stc[r]]<=i)r--;//\u56e0\u4e3a\u6808\u4e2d\u4f4d\u7f6e\u662f\u5355\u8c03\u7684,\u90a3\u4e48\u53ea\u8981\u627e\u5230\u7b2c\u4e00\u4e2aend[x]>i\u7684\u5373\u53ef \n        int l=(r?sti[r]:0);\n        if(i!=l)ans+=T.get(T.rt,1,n,l+1,i);//[1,l]\u90fd\u662f\u4e0d\u80fd\u9009\u7684,\u4ecel+1\u5f00\u59cb \n    }printf(\"%lld\\n\",ans);r=0;\n}int t;\nint main(){\n    read(t);\n    while(t--)slove();\n    return 0;\n}\n\n```\n\u7a0b\u5e8f\u62dc\u62dc~~",
        "postTime": 1551671992,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "P4065 [JXOI2017]\u989c\u8272"
    },
    {
        "content": "\u8d21\u732e\u4e00\u4e2a\u548c\u5176\u5b83\u7684\u9898\u89e3\u4f3c\u4e4e\u90fd\u4e0d\u4e00\u6837\u7684\u65b9\u6cd5\u3002\n\n\u8003\u8651\u9898\u76ee\u5b9e\u9645\u4e0a\u662f\u7559\u4e0b\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u5bf9\u4e8e\u6240\u6709\u989c\u8272\u8981\u4e48\u4e0d\u5305\u542b\u8981\u4e48\u5168\u90fd\u5305\u542b\u3002\n\n\u8003\u8651\u5148\u679a\u4e3e\u53f3\u7aef\u70b9$i$\u3002\n\n\u53d1\u73b0\u5728$i$\u540e\u9762\u7684\u989c\u8272\u662f\u8981\u5168\u90e8\u5220\u6389\u7684\uff0c\u90a3\u4e48\u8bb0$i$\u540e\u9762\u7684\u989c\u8272\u5728$i$\u4e4b\u524d\u51fa\u73b0\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u4e3a$j$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e2a$set$\u6765\u9884\u5904\u7406\u3002\n\n\u90a3\u4e48\u663e\u7136\u5de6\u7aef\u70b9\u5fc5\u987b\u5f97$>j$\u3002\n\n\u90a3\u4e48\u73b0\u5728\u8981\u6c42\u7684\u662f$[j+1,i-1]$\u4e4b\u95f4\u6709\u591a\u5c11\u4e2a\u4f5c\u4e3a\u5de6\u7aef\u70b9\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u8003\u8651\u5224\u65ad\u7684\u6761\u4ef6\u662f\u4ec0\u4e48\u3002\n\n\u53d1\u73b0\u65e2\u7136\u628a\u540e\u9762\u7684\u70b9\u548c\u524d\u9762\u7684\u70b9\u90fd\u5220\u6389\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u8fd9\u4e2a$[j+1,i]$\u91cc\u9762\u662f\u6ca1\u6709$i$\u4e4b\u540e\u7684\u989c\u8272\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u8fd9\u6bb5\u533a\u95f4\u5185\u4efb\u610f\u4e00\u6bb5\u4ee5$i$\u4e3a\u540e\u7f00\u7684\u533a\u95f4\u800c\u8a00\uff0c\u5bf9\u4e8e\u4e00\u79cd\u989c\u8272\uff0c\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u70b9\u5fc5\u5b9a\u662f\u6700\u53f3\u8fb9\u7684\u70b9\uff08\u8fd9\u4e0d\u662f\u5e9f\u8bdd\u5417\uff09\uff0c\u90a3\u53ea\u9700\u8981\u8003\u8651\u6700\u5de6\u8fb9\u7684\u70b9\u9650\u5236\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u5de6\u53f3\u90fd\u88ab\u9650\u5236\u4e86\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u8fd9\u6bb5\u533a\u95f4\u5185\u6700\u5de6\u8fb9\u7684\u70b9\u7684\u4e2a\u6570\u7b49\u4e8e\u6700\u53f3\u8fb9\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u90a3\u5b83\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u5426\u5219\u4e0d\u5408\u6cd5\u3002\n\n\u90a3\u4e48\u5982\u679c\u628a\u4e00\u79cd\u989c\u8272\u7684\u5de6\u7aef\u70b9\u770b\u6210$-1$\uff0c\u53f3\u7aef\u70b9\u770b\u6210$1$\u7684\u8bdd\uff0c\u8981\u6c42\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u533a\u95f4\u548c\u4e3a$0$\u7684\u533a\u95f4\u6570\u91cf\u3002\n\n\u90a3\u4e48\u8981\u6c42\u7684\u5b9e\u9645\u4e0a\u5c31\u662f$k\\in[j,i-1]$\u6ee1\u8db3$sum[k]=sum[i]$\u7684$k$\u7684\u4e2a\u6570\uff0c\u5176\u4e2d$sum[i]$\u662f\u4e0a\u9762\u5047\u8bbe\u4e0b\u7684\u524d\u7f00\u548c\u3002\n\n\u8fd9\u4e2a\u7528\u4e2a\u4e3b\u5e2d\u6811\u7ef4\u62a4\u5373\u53ef\uff08\u53ef\u80fd\u4e5f\u6709\u5176\u4ed6\u65b9\u6cd5\uff09\u3002\n\n\u590d\u6742\u5ea6$O(Tnlogn)$\u3002\n\ncode\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<set>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<bitset>\n#define eps 1e-15\n#define maxn 300010\n#define maxm 410\n#define inf 1000000007\n#define mod 1000000007\n#define mp(x,y) make_pair(x,y)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef pair<int,int>pii;\nint read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch-'0'<0||ch-'0'>9){if(ch=='-') f=-1;ch=getchar();}\n    while(ch-'0'>=0&&ch-'0'<=9){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint T,n;\nint a[maxn],mx[maxn],book[maxn],sum[maxn],rt[maxn];\nvector<int>v[maxn];\nset<int>s;\nstruct Segment_Tree{\n    int t[maxn*20],ls[maxn*20],rs[maxn*20],tot;\n    void update(int k)\n    {\n        t[k]=t[ls[k]]+t[rs[k]];\n    }\n    void modi(int &k1,int k2,int l,int r,int x)\n    {\n        k1=++tot;\n        if(l==r)\n        {\n            t[k1]=t[k2]+1;\n            return;\n        }\n        int mid=(l+r)/2;\n        if(mid>=x)  rs[k1]=rs[k2],modi(ls[k1],ls[k2],l,mid,x);\n        else        ls[k1]=ls[k2],modi(rs[k1],rs[k2],mid+1,r,x);\n        update(k1);\n    }\n    int query(int k1,int k2,int l,int r,int x)\n    {\n        if(l==r)  return t[k1]-t[k2];\n        int mid=(l+r)/2;\n        if(mid>=x)  return query(ls[k1],ls[k2],l,mid,x);\n        return query(rs[k1],rs[k2],mid+1,r,x);\n    }\n}S;\nint main()\n{\n    T=read();\n    while(T--)\n    {\n        n=read();\n        for(int i=1;i<=n;i++)  a[i]=read();\n        for(int i=1;i<=n;i++)  v[a[i]].push_back(i);\n        for(int i=n;i>=1;i--)\n        {\n            set<int>::iterator it=s.end();\n            if(s.size())  it--,mx[i]=(*it);\n            else          mx[i]=0;\n            if(book[a[i]])  s.erase(v[a[i]].back());\n            else            book[a[i]]=1;\n            v[a[i]].pop_back();\n            if(v[a[i]].size())  s.insert(v[a[i]].back());\n        }\n        for(int i=1;i<=n;i++)  book[i]=0;\n        for(int i=1;i<=n;i++)\n          if(!book[a[i]])  sum[i]-=1,book[a[i]]=1;\n        for(int i=1;i<=n;i++)  book[i]=0;\n        for(int i=n;i>=1;i--)\n          if(!book[a[i]])  sum[i]+=1,book[a[i]]=1;\n        for(int i=1;i<=n;i++)  sum[i]+=sum[i-1];\n        for(int i=0;i<=n;i++)  sum[i]+=n;\n        for(int i=1;i<=n;i++)  S.modi(rt[i],rt[i-1],1,n,sum[i-1]);\n        ll ans=0;\n        for(int i=1;i<=n;i++)\n        {\n            if(mx[i]>i)  continue;\n            ans+=S.query(rt[i],rt[mx[i]],1,n,sum[i]);\n        }\n        printf(\"%lld\\n\",ans);\n        for(int i=1;i<=S.tot;i++)  S.ls[i]=S.rs[i];\n        S.tot=0;s.clear();\n        for(int i=0;i<=n;i++)  v[i].clear(),sum[i]=book[i]=0;\n    }\n    return 0;\n}\n```",
        "postTime": 1580559298,
        "uid": 46396,
        "name": "justin_cao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "\u8003\u524d\u53d1\u4e00\u6ce2\u9898\u89e3\u6512rp\u3002\n\n\u9898\u89e3\u53c2\u8003pxy\u5927\u4f6c\uff08%%%pxy\u5927\u4f6c\uff09\u3002\n\n\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u679a\u4e3e\u533a\u95f4\u53f3\u7aef\u70b9r\uff0c\u5047\u8bbe\u5de6\u7aef\u70b9l\u5408\u6cd5\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\uff0c\u8981\u4e48\u5206\u5e03\u5728[1,l]\u222a[r,n]\uff0c\u8981\u4e48\u5206\u5e03\u5728[l,r]\u3002\n\n\u5bf9\u4e8e\u6ee1\u8db3\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u989c\u8272\uff0c\u8bb0prec\u4e3a\u5176r\u5728\u4e4b\u524d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8981\u6ee1\u8db3l>max{prec}\uff0c\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u6ee1\u8db3\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7684\u989c\u8272\uff0c\u8bb0firstc\u548clastc\u4e3a\u5176\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9996\u5148\u8981\u6ee1\u8db3r>=lastc\uff0c\u7136\u540e\u8981\u5728\u4f18\u5148\u961f\u5217\u4e2d\u5220\u9664c\u51fa\u73b0\u7684\u90a3\u4e9b\u4f4d\u7f6e\uff0c\u7136\u540el\u662f\u4e0d\u80fd\u5728[firstc,lastc]\u4e4b\u4e2d\u7684\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0\u4e00\u4e0b\u3002\n\n\u4e8e\u662f\u95ee\u9898\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u5e26\u5220\u9664\u64cd\u4f5c\u7684\u4f18\u5148\u961f\u5217\uff0c\u5e76\u4e14\u4f1a\u4e0d\u65ad\u7ed9\u4e00\u4e9b\u533a\u95f4\u6807\u8bb0\uff0c\u5e76\u4e14\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4[max{prec},r]\u4e2d\u6709\u591a\u5c11\u4e2a\u672a\u6807\u8bb0\u7684\u70b9\uff0c\u7528\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 \n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstring>\n\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 300010;\n\nusing namespace std;\n\nint T;\nint N;\nint C[maxn];\n\nlong long ans;\nint c[maxn];\nint maxi[maxn], mini[maxn], pre[maxn];\n\nstruct Node\n{\n\tint setv, sumv;\n\tNode() : setv(0), sumv(0) {}\n};\n\nNode seg[4 * maxn];\n\nvoid build(int o, int L, int R)\n{\n\tseg[o].setv = -1;\n\tseg[o].sumv = 0;\n\tif (L == R) return;\n\tint M = (L + R) / 2;\n\tbuild(o * 2, L, M);\n\tbuild(o * 2 + 1, M + 1, R);\n}\n\nvoid pushdown(int o)\n{\n\tif (seg[o].setv >= 0)\n\t{\n\t\tseg[o * 2].setv = seg[o * 2 + 1].setv = seg[o].setv;\n\t\tseg[o].setv = -1;\n\t}\n}\n\nvoid maintain(int o, int L, int R)\n{\n\tif (seg[o].setv != -1) seg[o].sumv = seg[o].setv * (R - L + 1);\n\telse if (L == R) seg[o].sumv = 0;\n\telse seg[o].sumv = seg[o * 2].sumv + seg[o * 2 + 1].sumv;\n}\n\nvoid update(int o, int L, int R, int l, int r, int x)\n{\n\tif (l > r) return;\n\tif (l <= L && R <= r) seg[o].setv = x;\n\telse\n\t{\n\t\tpushdown(o);\n\t\tint M = (L + R) / 2;\n\t\tif (l <= M) update(o * 2, L, M, l, r, x);\n\t\telse maintain(o * 2, L, M);\n\t\tif (M < r) update(o * 2 + 1, M + 1, R, l, r, x);\n\t\telse maintain(o * 2 + 1, M + 1, R);\n\t}\n\tmaintain(o, L, R);\n}\n\nint query(int o, int L, int R, int l, int r)\n{\n\tif (seg[o].setv >= 0) return seg[o].setv * (min(R, r) - max(L, l) + 1);\n\tif (l <= L && R <= r) return seg[o].sumv;\n\tint ret = 0;\n\tint M = (L + R) / 2;\n\tif (l <= M) ret += query(o * 2, L, M, l, r);\n\tif (M < r) ret += query(o * 2 + 1, M + 1, R, l, r);\n\treturn ret;\n}\n\nstruct Heap\n{\n\tpriority_queue<int> q, d;\n\tvoid push(int x) { q.push(x); }\n\tvoid pop() { q.pop(); }\n\tvoid pop(int x) { d.push(x); }\n\tint top()\n\t{\n\t\twhile (!d.empty() && q.top() == d.top())\n\t\t{\n\t\t\tq.pop();\n\t\t\td.pop();\n\t\t}\n\t\treturn q.empty() ? 0 : q.top();\n\t}\n\tvoid clear()\n\t{\n\t\twhile (!q.empty()) q.pop();\n\t\twhile (!d.empty()) d.pop();\n\t}\n};\n\nHeap q;\n\nint main()\n{\n\tscanf(\"%d\", &T);\n\twhile (T--)\n\t{\n\t\tscanf(\"%d\", &N);\n\t\tbuild(1, 0, N);\n\t\tans = 0;\n\t\tq.clear();\n\t\tmemset(c, 0, sizeof c);\n\t\tmemset(maxi, 0, sizeof maxi);\n\t\tmemset(mini, 0x3f, sizeof mini);\n\t\tfor (int i = 1; i <= N; i++)\n\t\t{\n\t\t\tscanf(\"%d\", &C[i]);\n\t\t\tpre[i] = c[C[i]]; c[C[i]] = i;\n\t\t\tmaxi[C[i]] = max(maxi[C[i]], i);\n\t\t\tmini[C[i]] = min(mini[C[i]], i);\n\t\t}\n\t\tfor (int i = 1; i <= N; i++)\n\t\t{\n\t\t\tq.push(i);\n\t\t\tif (maxi[C[i]] == i)\n\t\t\t{\n\t\t\t\tfor (int j = i; j; j = pre[j]) q.pop(j);\n\t\t\t\tupdate(1, 0, N, mini[C[i]] + 1, maxi[C[i]], 1);\n\t\t\t}\n\t\t\tint l = q.top();\n\t\t\tif (i != l) ans += i - l - query(1, 0, N, l + 1, i);\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1524810390,
        "uid": 19632,
        "name": "iao113",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "##\u7ebf\u6bb5\u6811 + \u4e3b\u5e2d\u6811##\n\n\u4e00\u5b9a\u53ea\u6709\u6211\u8fd9\u79cd\u667a\u969c\u4f1a\u7528\u8fd9\u4e48\u5947\u602a\u7684\u65b9\u6cd5\u505a\u8fd9\u9053\u9898\u3002\u3002\n\n\u6240\u4ee5\u51b3\u5b9a\u53d1\u4e2a\u9898\u89e3\n\n\u7531\u9898\u6211\u4eec\u77e5\u9053\u6700\u540e\u5269\u4f59\u7684\u4e00\u5b9a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u800c\u4e14\u533a\u95f4\u5185\u7684\u989c\u8272\u4e0d\u5b58\u5728\u4e8e\u533a\u95f4\u5916\n\n\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u627e\u5230\u8fd9\u6837\u7684\u533a\u95f4\u7684\u6570\u91cf\n\n\u533a\u95f4\u7531\u5de6\u53f3\u7aef\u70b9\u786e\u5b9a\uff0c\u6211\u4eec\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u5c1d\u8bd5\u7ef4\u62a4\u5de6\u7aef\u70b9\u6570\u91cf\n\n\u2460\n\n\u5f53\u6211\u4eec\u4ece\u53f3\u5411\u5de6\u679a\u4e3e\u5230$r$\uff0c$r$\u53f3\u8fb9\u7684\u989c\u8272\u5df2\u7ecf\u5728\u533a\u95f4\u5916\uff0c\u4e00\u5b9a\u4e0d\u80fd\u88ab\u5305\u542b\u5165\u533a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u4e00\u4e2a\u540c\u8272\u4f4d\u7f6e$pre[i]$\uff0c\u6307\u9488$r$\u6bcf\u8d8a\u8fc7\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u5728$pre[i]$\u5904\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u88ab\u5305\u542b\u3002\n\n\u4e4b\u540e\u6211\u4eec\u6bcf\u6b21\u627e\u5230$r$\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6807\u8bb0\u7684\u4f4d\u7f6e\uff0c\u518d\u5f80\u5de6\u4e00\u5b9a\u4e0d\u5408\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6211\u4eec\u7684\u521d\u59cb\u533a\u95f4\uff0c\u8bb0\u4e3a$[l,r]$\u3002\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u2461\n\n\u8003\u8651\u8fd9\u4e2a\u533a\u95f4\u8fd8\u4f1a\u6709\u4ec0\u4e48\u4e0d\u6ee1\u8db3\u7684\u5730\u65b9\n\n\u5c31\u662f\u533a\u95f4\u5185\u7684\u989c\u8272\u4e0d\u80fd\u51fa\u73b0\u5728\u533a\u95f4\u5916\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5728$r$\u5de6\u4fa7\u7684\u4f4d\u7f6e$i$\uff0c\u989c\u8272\u4e3a$c$\uff0c\u8bb0\u989c\u8272$c$\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u4e3a$p$\uff0c\u90a3\u4e48$[p + 1,i]$\u90fd\u4e0d\u80fd\u88ab\u9009\u62e9\uff0c\u56e0\u4e3a\u9009\u62e9\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u90fd\u4f1a\u4f7f\u989c\u8272$c$\u88ab\u5206\u5272\n\n\u5982\u4f55\u7ef4\u62a4\uff1f\n\n\u53e6\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4$set$\u4e3a$1$\u5373\u53ef\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u88ab\u591a\u4e2a\u533a\u95f4\u53e0\u52a0\uff0c\u4f46\u53ea\u80fd\u8d21\u732e$1$\n\n\u7531\u4e8e\u533a\u95f4$set$\u64cd\u4f5c\u4e0d\u80fd\u88ab\u64a4\u56de\uff0c\u6240\u4ee5\u6211\u4eec\u66f4\u65b0\u987a\u5e8f\u53ea\u80fd\u4ece\u5de6\u5230\u53f3\uff0c\u4f46\u6211\u4eec\u662f\u4ece\u53f3\u5230\u5de6\u679a\u4e3e\u7684\uff0c\u600e\u4e48\u529e\uff1f\n\n\u90a3\u5c31\u5f3a\u884c\u4ece\u5de6\u5230\u53f3\u66f4\u65b0\uff0c\u5e76\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u2014\u2014\u6c38\u4e45\u5316\u6807\u8bb0\u4e3b\u5e2d\u6811\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u505a\u5b8c\u4e86\u8fd9\u9053\u9898\n\u590d\u6742\u5ea6$O(nlogn)$\n```C++\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<map>\n#define Redge(u) for (int k = h[u],to; k; k = ed[k].nxt)\n#define REP(i,n) for (int i = 1; i <= (n); i++)\n#define mp(a,b) make_pair<int,int>(a,b)\n#define cls(s) memset(s,0,sizeof(s))\n#define cp pair<int,int>\n#define LL long long int\nusing namespace std;\nconst int maxn = 300005,maxm = 8000005,INF = 1000000000;\ninline int read(){\n\tint out = 0,flag = 1; char c = getchar();\n\twhile (c < 48 || c > 57){if (c == '-') flag = -1; c = getchar();}\n\twhile (c >= 48 && c <= 57){out = (out << 3) + (out << 1) + c - 48; c = getchar();}\n\treturn out * flag;\n}\nint ls[maxm],rs[maxm],Sum[maxm],tag[maxm],rt[maxn],cnt;\nvoid Upd(int u){\n\tSum[u] = Sum[ls[u]] + Sum[rs[u]];\n}\nvoid Set(int& u,int pre,int l,int r,int L,int R){\n\tu = ++cnt; ls[u] = ls[pre]; rs[u] = rs[pre]; tag[u] = Sum[u] = 0;\n\ttag[u] = tag[pre];\n\tif (tag[u]){\n\t\tSum[u] = r - l + 1;\n\t\treturn;\n\t}\n\tif (l >= L && r <= R){\n\t\ttag[u] = 1; Sum[u] = r - l + 1;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif (mid >= L) Set(ls[u],ls[pre],l,mid,L,R);\n\tif (mid < R) Set(rs[u],rs[pre],mid + 1,r,L,R);\n\tUpd(u);\n}\nint Query(int u,int l,int r,int L,int R){\n\tif (tag[u]) return R - L + 1;\n\tif (l >= L && r <= R) return Sum[u];\n\tint mid = l + r >> 1;\n\tif (mid >= R) return Query(ls[u],l,mid,L,R);\n\tif (mid < L) return Query(rs[u],mid + 1,r,L,R);\n\treturn Query(ls[u],l,mid,L,mid) + Query(rs[u],mid + 1,r,mid + 1,R);\n}\nint sum[maxn << 2],mp[maxn << 2];\nvoid upd(int u,int l,int r){\n\tsum[u] = sum[u << 1] + sum[u << 1 | 1];\n\tint mid = l + r >> 1;\n\tif (mp[u << 1 | 1] == 0) mp[u] = 0;\n\telse if (mp[u << 1] == 0) mp[u] = mp[u << 1 | 1];\n\telse if (mp[u << 1 | 1] == mid + 1) mp[u] = mp[u << 1];\n\telse mp[u] = mp[u << 1 | 1];\n}\nvoid modify(int u,int l,int r,int pos){\n\tif (l == r) {sum[u] = 1; mp[u] = 0; return;}\n\tint mid = l + r >> 1;\n\tif (mid >= pos) modify(u << 1,l,mid,pos);\n\telse modify(u << 1 | 1,mid + 1,r,pos);\n\tupd(u,l,r);\n}\nint query(int u,int l,int r,int L,int R){\n\tif (!sum[u]) return l;\n\tif (l >= L && r <= R) return mp[u];\n\tint mid = l + r >> 1;\n\tif (mid >= R) return query(u << 1,l,mid,L,R);\n\tif (mid < L) return query(u << 1 | 1,mid + 1,r,L,R);\n\tint t1 = query(u << 1,l,mid,L,R),t2 = query(u << 1 | 1,mid + 1,r,L,R);\n\tif (t2 == 0) return 0;\n\telse if (t1 == 0) return t2;\n\telse if (t2 == mid + 1) return t1;\n\telse return t2;\n}\nvoid build(int u,int l,int r){\n\tsum[u] = 0;\n\tif (l == r){\n\t\tmp[u] = l;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(u << 1,l,mid);\n\tbuild(u << 1 | 1,mid + 1,r);\n\tupd(u,l,r);\n}\nint last[maxn],pre[maxn],F[maxn];\nint n,A[maxn];\nint main(){\n\tint T = read();\n\twhile (T--){\n\t\tn = read(); REP(i,n) A[i] = read();\n\t\tcnt = 0; build(1,1,n);\n\t\tfor (int i = 1; i <= n; i++) last[i] = 0;\n\t\tfor (int i = 1; i <= n; i++){\n\t\t\tif (!last[A[i]]) F[A[i]] = i;\n\t\t\tpre[i] = last[A[i]];\n\t\t\tlast[A[i]] = i;\n\t\t\trt[i] = rt[i - 1];\n\t\t\tif (F[A[i]] < i) Set(rt[i],rt[i - 1],1,n,F[A[i]] + 1,i);\n\t\t}\n\t\tLL ans = 0;\n\t\tfor (int i = n; i; i--){\n\t\t\tint l = query(1,1,n,1,i),r = i;\n\t\t\tif (pre[i]) modify(1,1,n,pre[i]);\n\t\t\tif (!l) continue;\n\t\t\tint t = Query(rt[i],1,n,l,r);\n\t\t\tans += (r - l + 1) - t;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1527084580,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "\u4e8b\u5b9e\u4e0a\uff0c$ODT$ \u4e5f\u53ef\u4ee5\u9ad8\u6548\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u7b80\u5355\u9605\u8bfb\u9898\u76ee\u540e\uff0c\u53d1\u73b0\u662f\u8981\u6211\u4eec\u6c42\u8fd9\u4e48\u4e00\u4e2a\u4e1c\u897f\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4e2a\u989c\u8272\uff0c\u8be2\u95ee\u6709\u591a\u5c11\u79cd\u5220\u9664\u989c\u8272\u7684\u65b9\u6848\u4f7f\u5f97\u5220\u6389\u8fd9\u4e9b\u989c\u8272\u540e\u5269\u4e0b\u7684\u5143\u7d20\u8fd8\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u65b9\u6848\uff0c\u6267\u884c\u8fd9\u4e24\u4e2a\u65b9\u6848\u540e\u6240\u5269\u4e0b\u7684\u8fde\u7eed\u533a\u95f4\u957f\u7684\u4e00\u5b9a\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n\u6240\u4ee5\uff0c\u9898\u76ee\u8981\u6211\u4eec\u6c42\u6709\u591a\u5c11\u79cd\u5220\u9664\u7684\u65b9\u6848\uff0c\u5176\u5b9e\u5c31\u7b49\u4ef7\u4e8e\u6c42\u6709\u591a\u5c11\u79cd\u5408\u6cd5\u7684\u5269\u4f59\u533a\u95f4\u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u5b83\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u80af\u5b9a\u4e0d\u4f1a\u5728\u8fd9\u4e2a\u533a\u95f4\u5916\u51fa\u73b0\u3002\n\n\u4e00\u4e2a\u533a\u95f4\u53ef\u4ee5\u8868\u793a\u6210\u4e00\u5bf9\u70b9 $(l,r)$ \uff0c\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u60f3\u6cd5\u662f\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u5728 $logn$ \u7684\u65f6\u95f4\u5185\u7b97\u51fa\u53e6\u4e00\u4e2a\u7aef\u70b9\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u3002\n\n\u4e0d\u59a8\u679a\u4e3e\u53f3\u7aef\u70b9\u3002\n\n\u6211\u4eec\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u7684\u53f3\u7aef\u70b9\u662f $R$ \uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u989c\u8272\uff0c\u6211\u4eec\u8ba4\u4e3a $fir[x]$ \u662f\u5b83\u5728\u6570\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c $sec[x]$ \u662f\u5b83\u7684\u6570\u5217\u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5b83\u4eec\u53ef\u80fd\u7684\u60c5\u51b5\u53ea\u6709\u4e09\u79cd\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/74fd56m0.png)\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4ed6\u662f\u4e0d\u4f1a\u5f71\u54cd\u5230\u6211\u4eec\u53bb\u5de6\u8fb9\u53d6\u5de6\u7aef\u70b9\u7684\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5728 $R$ \u5de6\u8fb9\u6700\u8fd1\u4e00\u4e2a\u4f4d\u7f6e $k$ \u4e14\u6ee1\u8db3 $sec[color[k]]>i$ \uff0c\u663e\u7136\u53ea\u6709 $[k+1,r]$ \u662f\u6211\u4eec\u53ef\u4ee5\u9009\u7684\n\n\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u8981\u4e0d\u9009 $[fir[x]+1,sec[x]]$ \u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u9700\u8981\u5b9e\u65f6\u5730\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u53ef\u4e0d\u53ef\u4ee5\u9009\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u559c\u95fb\u4e50\u89c1\u7684\u533a\u95f4\u63a8\u5e73\uff0c $ODT$ \u53ef\u4ee5\u9ad8\u6548\u5730\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e6+10;\n\ntemplate <class T>\ninline void write(T x)\n{\n    if(x>9)\n    {\n        write(x/10);\n    }\n    putchar(x%10+'0');\n}\n\ninline char nc()\n{\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void read(int &sum)\n{\n    char ch=nc();\n    int tf=0;\n    sum=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=nc();\n    tf=((ch=='-')&&(ch=nc()));\n    while(ch>='0'&&ch<='9') sum=sum*10+(ch-48),ch=nc();\n    (tf)&&(sum=-sum);\n}\n\nstruct node\n{\n    int l,r,v;\n    node(){}\n    node(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n    bool operator <(const node &o) const\n    {\n        return l<o.l;\n    }\n};\n\nset<node> s;\n\ninline void merge(int l)\n{\n    set<node>::iterator it1,it2,it3;\n    it2=s.lower_bound(l);\n    if(it2==s.begin())\n        return;\n    it1=it2,it3=it2;\n    --it1,++it3;\n    bool pd3=(it3!=s.end());\n    if(pd3&&it1->v==it2->v&&it2->v==it3->v&&it1->v==it3->v)\n    {\n        int l=it1->l,r=it3->r,v=it2->v;\n        s.erase(it1,++it3);\n        s.insert(node(l,r,v));\n    }\n    else if(it1->v==it2->v)\n    {\n        int l=it1->l,r=it2->r,v=it2->v;\n        s.erase(it1,++it2);\n        s.insert(node(l,r,v));\n    }\n    else if(pd3&&it2->v==it3->v)\n    {\n        int l=it2->l,r=it3->r,v=it2->v;\n        s.erase(it2,++it3);\n        s.insert(node(l,r,v));\n    }\n}\n\ninline set<node>::iterator split(int pos)\n{\n    set<node>::iterator it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos) return it;\n    --it;\n    int L=it->l,R=it->r,V=it->v;\n    s.erase(it);\n    s.insert(node(L,pos-1,V));\n    return s.insert(node(pos,R,V)).first;\n}\n\ninline void assignval(int l,int r,int v)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,v));\n}\n\ninline int query(int l,int r)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    int ret=0;\n    for(;itl!=itr;++itl)\n        if(itl->v==1) ret+=(itl->r-itl->l+1);\n    return ret;\n}\n\nint a[MAXN],fir[MAXN],sec[MAXN];\nint stcolor[MAXN],stindex[MAXN],tp=0;\nint n;\nlong long ans=0;\n\nint main()\n{\n    int t;\n    read(t);\n    while(t--)\n    {\n        tp=0;\n        ans=0;\n        s.clear();\n        read(n);\n        for(int i=1;i<=n;++i)\n            read(a[i]),fir[i]=0;\n        for(int i=1;i<=n;++i)\n        {\n            if(!fir[a[i]])\n                fir[a[i]]=i;\n            sec[a[i]]=i;\n        }\n        s.insert(node(1,n,1));\n        for(int i=1;i<=n;++i)\n        {\n            if(i==sec[a[i]]&&sec[a[i]]!=fir[a[i]])\n            {\n                assignval(fir[a[i]]+1,sec[a[i]],0);\n                merge(fir[a[i]]+1);\n                merge(sec[a[i]]);\n            }\n            else\n            {\n                ++tp;\n                stcolor[tp]=a[i];\n                stindex[tp]=i;\n            }\n            while(tp&&sec[stcolor[tp]]<=i) --tp;\n            int l=(tp?stindex[tp]:0);\n            if(i!=l)\n            {\n                ans+=query(l+1,i);\n                merge(i+1);\n                merge(l+1);\n            }\n        }\n        write(ans);\n        putchar('\\n');\n    }\n    return 0;\n}\n```\n",
        "postTime": 1571317952,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "$Orz$ \u5404\u4f4d\u9898\u89e3\u5927\u4f6c\uff0c\u6211\u6765\u819c\u62dc\u4e00\u53d1\n\n~~\u8fd8\u6709\u5355\u8c03\u6808\u5b9e\u5728\u6ca1\u5f04\u61c2~~\n\n### \u6cd5\u4e00\uff1a\u7ebf\u6bb5\u6811+\u5806\n\n\u9996\u5148\uff0c\u8ba8\u8bba\u533a\u95f4\u7684\u4e2a\u6570\u7684\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u679a\u4e3e\u4e00\u4e2a\u7aef\u70b9$r$\uff0c\u627e\u5230\u6240\u6709\u7684$l$\n\n\u6211\u4eec\u4e0d\u59a8\u8bbe\uff1a$ml[i]$\u4e3a\u7b2ci\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6700\u5c0f\u4f4d\u7f6e\uff0c$mr[i]$\u4e3a\u7b2ci\u79cd\u51fa\u73b0\u7684\u6700\u5927\u4f4d\u7f6e\n\n\u6211\u4eec\u60f3\u5230\u5bf9\u4e8e\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u4ed6\u6709\u90a3\u4e9b\u503c\u662f\u4e0d\u80fd\u9009\u7684\uff1a\n\n\u5047\u8bbe\u6709\u4e00\u79cd\u989c\u8272\u7684$mr$\u503c\u6bd4\u5f53\u524d\u679a\u4e3e\u7684\u53f3\u7aef\u70b9\u5c0f\uff0c\u5219$[ml, mr]$\u91cc\u9762\u7684\u6240\u6709\u7684\u5de6\u7aef\u70b9\u90fd\u4e0d\u80fd\u9009\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e2d\u5c31\u662f\u533a\u95f4\u8d4b\u62100\n\n\u518d\u5047\u8bbe\u6709\u4e00\u79cd\u989c\u8272\uff0c\u5f53\u524d\u679a\u4e3e\u7684\u53f3\u7aef\u70b9\u5728$[ml[i], mr[i]]$\u4e4b\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a$last[i]$\uff0c\u8868\u793a\u5c0f\u4e8e\u5f53\u524d\u53f3\u7aef\u70b9\u7684\u6700\u5927\u7684i\n\n\u90a3\u4e48$[1, last[i]]$\u6240\u6709\u7684\u503c\u90fd\u4e0d\u80fd\u9009\n\n\u7136\u540e\u6211\u4eec\u8981\u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684last\uff0c\u7528\u4e00\u4e2a\u5806\u5373\u53ef\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define int long long\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define mem(k, p) memset(k, p, sizeof(k))\n#define ls k * 2\n#define rs k * 2 + 1\n#define maxn 300005\nint n, m, a[maxn], last[maxn], ans, ml[maxn], mr[maxn], tag[maxn << 2], sum[maxn << 2];\nstruct node {int id, val; il bool operator < (const node&x) const{return val < x.val;}};\npriority_queue<node> q;\nil void pushdown(int k, int l, int r, int mid) {\n\tif(tag[k] == -1) return;\n\tsum[ls] = (mid - l + 1) * tag[k], sum[rs] = (r - mid) * tag[k];\n\ttag[ls] = tag[rs] = tag[k]; tag[k] = -1;\n}\nil void modify(int k, int l, int r, int ll, int rr, int x) {\n\tif(l > rr || ll > r) return;\n\tif(ll <= l && r <= rr) return (void)(tag[k] = x, sum[k] = (r - l + 1) * x);\n\tint mid = (l + r) >> 1; pushdown(k, l, r, mid);\n\tmodify(ls, l, mid, ll, rr, x), modify(rs, mid + 1, r, ll, rr, x);\n\tsum[k] = sum[ls] + sum[rs];\n}\nil int query(int k, int l, int r, int ll, int rr) {\n\tif(l > rr || ll > r) return 0;\n\tif(ll <= l && r <= rr) return sum[k];\n\tint mid = (l + r) >> 1; pushdown(k, l, r, mid);\n\treturn query(ls, l, mid, ll, rr) + query(rs, mid + 1, r, ll, rr);\n}\nil void solve() {\n\tn = read(), ans = 0, mem(tag, -1), modify(1, 1, n, 1, n, 1);\n\twhile(!q.empty()) q.pop();\n\trep(i, 1, n) ml[i] = n + 1, mr[i] = last[i] = 0;\n\trep(i, 1, n) a[i] = read(), ml[a[i]] = min(ml[a[i]], i), mr[a[i]] = max(mr[a[i]], i);\n\trep(i, 1, n) {\n\t\tlast[a[i]] = i, q.push((node){a[i], last[a[i]]});\n\t\tif(i == mr[a[i]]) modify(1, 1, n, ml[a[i]] + 1, mr[a[i]], 0);\n\t\twhile(!q.empty()) {\n\t\t\tint x = q.top().id;\n\t\t\tif(last[x] == mr[x]) q.pop();\n\t\t\telse break;\n\t\t}\n\t\tint pax = (q.empty() ? 1 : q.top().val + 1);\n\t\tans += query(1, 1, n, pax, i);\n\t}\n\tprintf(\"%lld\\n\", ans);\n}\nsigned main() {\n\tint T = read();\n\twhile(T --) solve();\n\treturn 0;\n}\n```\n### \u968f\u673a\u5316\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u9700\u8981\u968f\u673a\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u9700\u8981\u4fdd\u8bc1\u76f8\u540c\u7684\u989c\u8272\u7684\u6240\u6709\u7684\u968f\u673a\u503c\u5f02\u6216\u7ed3\u679c\u4e3a$0$\n\n\u7531\u4e8e\u5f02\u6216\u6ee1\u8db3$a\\ $^$\\ b = 0$\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6bcf\u4e2a\u989c\u8272\u7684\u9664\u4e86\u6700\u540e\u4e00\u9879\u7684\u6240\u6709\u968f\u673a\u503c\u5f02\u6216\u8d77\u6765\uff0c\u8ba9\u6700\u540e\u4e00\u4f4d\u7b49\u4e8e\u8fd9\u4e2a\u968f\u673a\u503c\n\n\u7136\u540e\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u4ed6\u7684\u5f02\u6216\u7684\u503c\u663e\u7136\u662f\u7b49\u4e8e0\u7684\n\n\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\u6709\u591a\u5c11\u533a\u95f4\u7684\u5f02\u6216\u548c\u7b49\u4e8e0\n\n\u7531\u4e8e\u4e0a\u8ff0\u5f02\u6216\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7528$map$\u5b58\u4e00\u4e0b\u5373\u53ef\n\n\u8ddf\u636e@$Ebola$\u5927\u4f6c\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u7684\u9519\u8bef\u7387\u662f\u5f88\u5c0f\u7684\u3002\n\n### $Code:$\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define int long long\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define Next(i, u) for(re int i = head[u]; i; i = e[i].next)\n#define mem(k, p) memset(k, p, sizeof(k))\n#define lb(x) (x)&(-(x))\n#define ls k * 2\n#define rs k * 2 + 1\n#define maxn 300005\nint n, m, a[maxn], val[maxn];\nvector<int>q[maxn];\nmap<int, int> p;\nil int Random() {\n\treturn 1ll * rand() * rand() * rand();\n}\nsigned main() {\n\tsrand(time(0));\n\tint T = read();\n\twhile(T --) {\n\t\tn = read();\n\t\trep(i, 1, n) a[i] = read(), q[a[i]].push_back(i), val[i] = 0;\n\t\trep(i, 1, n) {\n\t\t\tint sum = 0;\n\t\t\tfor(re int j = 0; j < q[i].size(); ++ j) {\n\t\t\t\tif(j == q[i].size() - 1) val[q[i][j]] = sum;\n\t\t\t\telse sum ^= (val[q[i][j]] = Random());\n\t\t\t}\n\t\t\tq[i].clear();\n\t\t}\n\t\tint ans = 0, now = 0; p[0] = 1;\n\t\trep(i, 1, n) now ^= val[i], ans += p[now], ++ p[now];\n\t\trep(i, 1, n) now ^= val[i], p[now] = 0;\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1567605613,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    },
    {
        "content": "\u4f17\u6240\u5468\u77e5\uff0c\u7edf\u8ba1\u533a\u95f4\u4e2a\u6570\u7684\u4e3b\u8981\u5957\u8def\u6709\u4e24\u4e2a\uff1a\u2460\u679a\u4e3e\u53f3\u7aef\u70b9\u627e\u6709\u591a\u5c11\u5de6\u7aef\u70b9\uff0c\u2461\u5206\u6cbb\uff0c\u8fd9\u91cc\u6765\u4e00\u4e2a\u628a\u8fd9\u4e24\u4e2a\u7ed3\u5408\u8d77\u6765\u7684\u505a\u6cd5\u3002\n\n\u663e\u7136\u8fd9\u9898\u7684\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u6210\u6c42\u6709\u591a\u5c11\u533a\u95f4\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u989c\u8272\u53ea\u51fa\u73b0\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\uff0c\u90a3\u4e48\u53ef\u4ee5\u6839\u636e\u5957\u8def\u6211\u4eec\u641e\u51fa\u6bcf\u79cd\u989c\u8272\u6700\u5de6\u8fb9\u51fa\u73b0\u7684\u4f4d\u7f6e$minl$\u548c\u6700\u53f3\u8fb9\u51fa\u73b0\u7684\u4f4d\u7f6e$maxl$\uff0c\u7136\u540e\u5982\u679c\u6211\u4eec\u679a\u4e3e\u53f3\u7aef\u70b9$r$\u7684\u8bdd\u90a3\u5408\u6cd5\u7684\u5de6\u7aef\u70b9$l$\u663e\u7136\u5fc5\u987b\u6ee1\u8db3$[l,r]$\u4e4b\u95f4\u7684\u6700\u5c0f\u7684$minl>=l$\uff0c\u5e76\u4e14\u6700\u5927\u7684$maxl<=r$\uff0c\u540e\u8005\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u6c42\u51fa\u6bcf\u4e2a$i$\u4e4b\u524d\u7b2c\u4e00\u4e2a\u7684$maxl>i$\u7684\u4f4d\u7f6e\uff0c\u8bb0\u4e3a$lim_i$\uff0c\u5de6\u7aef\u70b9\u4e0d\u4f1a\u5728$lim_i$\u4e4b\u524d\u3002\n\n\u4f46\u662f$minl>=l$\u8fd9\u4e2a\u4e0d\u592a\u597d\u6ee1\u8db3\uff0c\u6211\u4eec\u8003\u8651\u5206\u6cbb\uff0c\u5de6\u7aef\u70b9\u843d\u5728$[l,mid]$\u4e0a\uff0c\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a$x\\in[l,mid]$\u6ee1\u8db3$[x,mid]$\u4e2d\u7684\u6700\u5c0f\u7684$minl>=x$\uff0c\u7136\u540e\u518d\u679a\u4e3e\u53f3\u7aef\u70b9$t$\uff0c\u6c42$[mid+1,t]$\u4e2d\u6700\u5c0f\u7684$minl$\uff0c\u663e\u7136\u5408\u6cd5\u7684$x$\u4e0d\u80fd\u8d85\u8fc7\u5b83\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5c0f\u4e8e\u7b49\u4e8e$lim_t$\uff0c\u7136\u540e\u7528\u4e2a\u524d\u7f00\u548c\u7edf\u8ba1\u5408\u6cd5\u7684$x$\u5c31\u884c\u5566~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define ll long long\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tint ints[300001], minl[300001], maxl[300001];\n\tint maxn[2000001];\n\tvoid build(int l, int r, int tree) {\n\t    if (l == r) {\n\t        maxn[tree] = maxl[ints[l]];\n\t        return;\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    build(l, mid, ls(tree));\n\t    build(mid + 1, r, rs(tree));\n\t    maxn[tree] = max(maxn[ls(tree)], maxn[rs(tree)]);\n\t}\n\tint query(int rl, int rr, int l, int r, int tree, int num) {\n\t    if (rl > rr || maxn[tree] <= num)\n\t        return (0);\n\t    if (l == r)\n\t        return (l);\n\t    int mid = (l + r) >> 1;\n\t    if (rl == l && rr == r) {\n\t        if (maxn[rs(tree)] > num)\n\t            return (query(mid + 1, r, mid + 1, r, rs(tree), num));\n\t        return (query(l, mid, l, mid, ls(tree), num));\n\t    }\n\t    if (rl > mid)\n\t        return (query(rl, rr, mid + 1, r, rs(tree), num));\n\t    if (rr <= mid)\n\t        return (query(rl, rr, l, mid, ls(tree), num));\n\t    int cjr = query(mid + 1, rr, mid + 1, r, rs(tree), num);\n\t    if (cjr)\n\t        return (cjr);\n\t    return (query(rl, mid, l, mid, ls(tree), num));\n\t}\n\tint lim[300001], sums[300001];\n\tll ans = 0;\n\tvoid digui(int l, int r) {\n\t    if (l == r) {\n\t        if (minl[ints[l]] == l && maxl[ints[r]] == r)\n\t            ans++;\n\t        return;\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    digui(l, mid);\n\t    digui(mid + 1, r);\n\t    sums[l - 1] = 0;\n\t    int imin = 1234567890;\n\t    for (register int i = mid; i >= l; i--) {\n\t        imin = min(imin, minl[ints[i]]);\n\t        if (imin >= i)\n\t            sums[i]++;\n\t    }\n\t    for (register int i = l; i <= mid; i++) sums[i] += sums[i - 1];\n\t    imin = 1234567890;\n\t    for (register int i = mid + 1; i <= r; i++) {\n\t        imin = min(imin, minl[ints[i]]);\n\t        if (imin < l || lim[i] >= mid)\n\t            continue;\n\t        int dl = max(l, lim[i] + 1), dr = min(imin, mid);\n\t        if (dl > dr)\n\t            continue;\n\t        ans += (sums[dr] - sums[dl - 1]);\n\t    }\n\t    for (register int i = l; i <= mid; i++) sums[i] = 0;\n\t}\n\tvoid ywymain() {\n\t    int t = get();\n\t    while (t) {\n\t        t--;\n\t        int n = get();\n\t        for (register int i = 1; i <= n; i++) {\n\t            ints[i] = get();\n\t            minl[ints[i]] = 1234567890;\n\t            maxl[ints[i]] = -1234567890;\n\t        }\n\t        for (register int i = 1; i <= n; i++)\n\t            minl[ints[i]] = min(minl[ints[i]], i), maxl[ints[i]] = max(maxl[ints[i]], i);\n\t        build(1, n, 1);\n\t        for (register int i = 1; i <= n; i++) lim[i] = query(1, i, 1, n, 1, i);\n\t        ans = 0;\n\t        digui(1, n);\n\t        printf(\"%lld\\n\", ans);\n\t    }\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1551858891,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4065 \u3010[JXOI2017]\u989c\u8272\u3011"
    }
]