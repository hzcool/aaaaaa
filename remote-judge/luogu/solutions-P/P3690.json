[
    {
        "content": "\u535a\u5ba2\u592a\u957f\u5566\uff01\u4e8e\u662f\u5c06\u91cd\u8981\u7684\u90e8\u5206\u7559\u5728\u9898\u89e3\u4e2d\uff0cLCT\u7684\u6982\u5ff5\u3001\u4e09\u4e2a\u57fa\u672c\u6027\u8d28\u7b49\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003[\u6211\u7684\u535a\u5ba2LCT\u603b\u7ed3](http://www.cnblogs.com/flashhu/p/8324551.html)\n\n## $access(x)$\nLCT\u6838\u5fc3\u64cd\u4f5c\uff0c\u4e5f\u662f\u6700\u96be\u7406\u89e3\u7684\u64cd\u4f5c\u3002\u5176\u5b83\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u5b8c\u6210\u7684\u3002\n\n\u56e0\u4e3a\u6027\u8d283\uff0c\u6211\u4eec\u4e0d\u80fd\u603b\u662f\u4fdd\u8bc1\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u662f\u76f4\u63a5\u8fde\u901a\u7684\uff08\u5728\u4e00\u4e2aSplay\u4e0a\uff09\u3002\n\naccess\u5373\u5b9a\u4e49\u4e3a\u6253\u901a\u6839\u8282\u70b9\u5230\u6307\u5b9a\u8282\u70b9\u7684\u5b9e\u94fe\uff0c\u4f7f\u5f97\u4e00\u6761\u4e2d\u5e8f\u904d\u5386\u4ee5\u6839\u5f00\u59cb\u3001\u4ee5\u6307\u5b9a\u70b9\u7ed3\u675f\u7684Splay\u51fa\u73b0\u3002\n\n~~\u849f\u84bb\u6df1\u77e5\u6ca1\u56fe\u7684\u75db\u82e6qwq~~\n\n\u6240\u4ee5\u8fd8\u662f\u6765\u51e0\u5f20\u56fe\u5427\u3002\n\n\u4e0b\u9762\u7684\u56fe\u7247\u53c2\u8003[YangZhe\u7684\u8bba\u6587](https://wenku.baidu.com/view/75906f160b4e767f5acfcedb)\n\n\u6709\u4e00\u68f5\u6811\uff0c\u5047\u8bbe\u4e00\u5f00\u59cb\u5b9e\u8fb9\u548c\u865a\u8fb9\u662f\u8fd9\u6837\u5212\u5206\u7684\uff08\u865a\u7ebf\u4e3a\u865a\u8fb9\uff09\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123095924037-1618037447.png)\n\n\u90a3\u4e48\u6240\u6784\u6210\u7684LCT\u53ef\u80fd\u4f1a\u957f\u8fd9\u6837\uff08\u7eff\u6846\u4e2d\u4e3a\u4e00\u4e2aSplay\uff0c\u53ef\u80fd\u4e0d\u4f1a\u957f\u8fd9\u6837\uff0c\u4f46\u53ea\u8981\u6ee1\u8db3\u4e2d\u5e8f\u904d\u5386\u6309\u6df1\u5ea6\u9012\u589e\uff08\u6027\u8d281\uff09\u5c31\u5bf9\u7ed3\u679c\u65e0\u5f71\u54cd\uff09\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123095955350-1680422636.png)\n\n\u73b0\u5728\u6211\u4eec\u8981$access(N)$\uff0c\u628a$A-N$\u7684\u8def\u5f84\u62c9\u8d77\u6765\u53d8\u6210\u4e00\u6761Splay\u3002\n\n\u56e0\u4e3a\u6027\u8d282\uff0c\u8be5\u8def\u5f84\u4e0a\u5176\u5b83\u94fe\u90fd\u8981\u7ed9\u8fd9\u6761\u94fe\u8ba9\u8def\uff0c\u4e5f\u5c31\u662f\u628a\u6bcf\u4e2a\u70b9\u5230\u8be5\u8def\u5f84\u4ee5\u5916\u7684\u5b9e\u8fb9\u53d8\u865a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u865a\u5b9e\u8fb9\u91cd\u65b0\u5212\u5206\u6210\u8fd9\u6837\u3002\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123101901740-2118178734.png)\n\n\u7136\u540e\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u6211\u4eec\u8981\u4e00\u6b65\u6b65\u5f80\u4e0a\u62c9\u3002\n\n\u9996\u5148\u628a$splay(N)$\uff0c\u4f7f\u4e4b\u6210\u4e3a\u5f53\u524dSplay\u4e2d\u7684\u6839\u3002\n\n\u4e3a\u4e86\u6ee1\u8db3\u6027\u8d282\uff0c\u539f\u6765$N-O$\u7684\u91cd\u8fb9\u8981\u53d8\u8f7b\u3002\n\n\u56e0\u4e3a\u6309\u6df1\u5ea6$O$\u5728$N$\u7684\u4e0b\u9762\uff0c\u5728Splay\u4e2d$O$\u5728$N$\u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u6240\u4ee5\u76f4\u63a5\u5355\u65b9\u9762\u5c06$N$\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$0$\uff08\u8ba4\u7236\u4e0d\u8ba4\u5b50\uff09\n\n\u7136\u540e\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\u2014\u2014\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123110136115-1112016464.png)\n\n\u6211\u4eec\u63a5\u7740\u628a$N$\u6240\u5c5eSplay\u7684\u865a\u8fb9\u6307\u5411\u7684$I$\uff08\u5728\u539f\u6811\u4e0a\u662f$L$\u7684\u7236\u4eb2\uff09\u4e5f\u8f6c\u5230\u5b83\u6240\u5c5eSplay\u7684\u6839\uff0c$splay(I)$\u3002\n\n\u539f\u6765\u5728$I$\u4e0b\u65b9\u7684\u91cd\u8fb9$I-K$\u8981\u53d8\u8f7b\uff08\u540c\u6837\u662f\u5c06\u53f3\u513f\u5b50\u53bb\u6389\uff09\u3002\n\n\u8fd9\u65f6\u5019$I-L$\u5c31\u53ef\u4ee5\u53d8\u91cd\u4e86\u3002\u56e0\u4e3a$L$\u80af\u5b9a\u662f\u5728$I$\u4e0b\u65b9\u7684\uff08\u521a\u624d$L$\u6240\u5c5eSplay\u6307\u5411\u4e86$I$\uff09\uff0c\u6240\u4ee5I\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$N$\uff0c\u6ee1\u8db3\u6027\u8d281\u3002\n\n\u7136\u540e\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\u2014\u2014\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123110156272-1242463729.png)\n\n$I$\u6307\u5411$H$\uff0c\u63a5\u7740$splay(H)$\uff0c$H$\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$I$\u3002\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123110209772-2057141058.png)\n\n$H$\u6307\u5411$A$\uff0c\u63a5\u7740$splay(A)$\uff0c$A$\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$H$\u3002\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123110213709-49169640.png)\n\n$A-N$\u7684\u8def\u5f84\u5df2\u7ecf\u5728\u4e00\u4e2aSplay\u4e2d\u4e86\uff0c\u5927\u529f\u544a\u6210\uff01\n\n\u4ee3\u7801\u5176\u5b9e\u5f88\u7b80\u5355\u3002\u3002\u3002\u3002\u3002\u3002\u5faa\u73af\u5904\u7406\uff0c\u53ea\u6709\u56db\u6b65\u2014\u2014\n1. \u8f6c\u5230\u6839\uff1b\n2. \u6362\u513f\u5b50\uff1b\n3. \u66f4\u65b0\u4fe1\u606f\uff1b\n4. \u5f53\u524d\u64cd\u4f5c\u70b9\u5207\u6362\u4e3a\u8f7b\u8fb9\u6240\u6307\u7684\u7236\u4eb2\uff0c\u8f6c1\n\n```cpp\ninline void access(int x){\n\tfor(int y=0;x;y=x,x=f[x])\n\t\tsplay(x),c[x][1]=y,pushup(x);//\u513f\u5b50\u53d8\u4e86\uff0c\u9700\u8981\u53ca\u65f6\u4e0a\u4f20\u4fe1\u606f\n}\n```\n## $makeroot(x)$\n\u53ea\u662f\u628a\u6839\u5230\u67d0\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u62c9\u8d77\u6765\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u8981\u3002\u66f4\u591a\u65f6\u5019\uff0c\u6211\u4eec\u8981\u83b7\u53d6\u6307\u5b9a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4fe1\u606f\u3002\n\n\u7136\u800c\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8def\u5f84\u4e0d\u80fd\u6ee1\u8db3\u6309\u6df1\u5ea6\u4e25\u683c\u9012\u589e\u7684\u8981\u6c42\u7684\u60c5\u51b5\u3002\u6839\u636e\u6027\u8d281\uff0c\u8fd9\u6837\u7684\u8def\u5f84\u4e0d\u80fd\u5728\u4e00\u4e2aSplay\u4e2d\u3002\n\nThen what can we do?\n\n$makeroot$\u5b9a\u4e49\u4e3a\u6362\u6839\uff0c\u8ba9\u6307\u5b9a\u70b9\u6210\u4e3a\u539f\u6811\u7684\u6839\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u5229\u7528\u5230$access(x)$\u548cSplay\u7684\u7ffb\u8f6c\u64cd\u4f5c\u3002\n\n$access(x)$\u540e$x$\u5728Splay\u4e2d\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u5bf9\u5427\u3002\n\n$splay(x)$\u540e\uff0c$x$\u5728Splay\u4e2d\u5c06\u6ca1\u6709\u53f3\u5b50\u6811\uff08\u6027\u8d281\uff09\u3002\u4e8e\u662f\u7ffb\u8f6c\u6574\u4e2aSplay\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u7684\u6df1\u5ea6\u90fd\u5012\u8fc7\u6765\u4e86\uff0c$x$\u6ca1\u4e86\u5de6\u5b50\u6811\uff0c\u53cd\u5012\u6210\u4e86\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff08\u6839\u8282\u70b9\uff09\uff0c\u8fbe\u5230\u4e86\u6211\u4eec\u7684\u76ee\u7684\u3002\n\n\u4ee3\u7801\n```cpp\ninline void pushr(int x){//Splay\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\n    swap(c[x][0],c[x][1]);\n    r[x]^=1;//r\u4e3a\u533a\u95f4\u7ffb\u8f6c\u61d2\u6807\u8bb0\u6570\u7ec4\n}\ninline void makeroot(int x){\n    access(x);splay(x);\n    pushr(x);\n}\n```\n\u5173\u4e8epushdown\u548cmakeroot\u7684\u4e00\u4e2a\u76f8\u5173\u7684\u5c0f\u95ee\u9898\u8be6\u89c1\u4e0b\u65b9update\uff08\u5173\u4e8epushdown\u7684\u8bf4\u660e\uff09\n\n## $findroot(x)$\n\u627e$x$\u6240\u5728\u539f\u6811\u7684\u6811\u6839\uff0c\u4e3b\u8981\u7528\u6765\u5224\u65ad\u4e24\u70b9\u4e4b\u95f4\u7684\u8fde\u901a\u6027\uff08findroot(x)==findroot(y)\u8868\u660e$x,y$\u5728\u540c\u4e00\u68f5\u6811\u4e2d\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\ninline int findroot(R x){\n    access(x); splay(x);\n    while(c[x][0])pushdown(x),x=c[x][0];\n//\u5982\u8981\u83b7\u5f97\u6b63\u786e\u7684\u539f\u6811\u6811\u6839\uff0c\u4e00\u5b9apushdown\uff01\u8be6\u89c1\u4e0b\u65b9update\uff08\u5173\u4e8efindroot\u4e2dpushdown\u7684\u8bf4\u660e\uff09\n    splay(x);//\u4fdd\u8bc1\u590d\u6742\u5ea6\n    return x;\n}\n```\n\u540c\u6837\u5229\u7528\u6027\u8d281\uff0c\u4e0d\u505c\u627e\u5de6\u513f\u5b50\uff0c\u56e0\u4e3a\u5176\u6df1\u5ea6\u4e00\u5b9a\u6bd4\u5f53\u524d\u70b9\u6df1\u5ea6\u5c0f\u3002\n\n## $split(x,y)$\n\n\u795e\u5947\u7684$makeroot$\u5df2\u7ecf\u51fa\u73b0\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u7684\u4e00\u6761\u5728\u539f\u6811\u4e2d\u7684\u94fe\u5566\uff01\n\nsplit(x,y)\u5b9a\u4e49\u4e3a\u62c9\u51fa$x-y$\u7684\u8def\u5f84\u6210\u4e3a\u4e00\u4e2aSplay\uff08\u672c\u849f\u84bb\u4ee5$y$\u4f5c\u4e3a\u8be5Splay\u7684\u6839\uff09\n\n\u4ee3\u7801\n```cpp\ninline void split(int x,int y){\n    makeroot(x);\n    access(y);splay(y);\n}\n```\nx\u6210\u4e3a\u4e86\u6839\uff0c\u90a3\u4e48x\u5230y\u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u7528$access(y)$\u76f4\u63a5\u62c9\u51fa\u6765\u4e86\uff0c\u5c06y\u8f6c\u5230Splay\u6839\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbf\u95ee$y$\u6765\u83b7\u53d6\u8be5\u8def\u5f84\u7684\u6709\u5173\u4fe1\u606f\n\n## $link(x,y)$\n\n\u8fde\u4e00\u6761$x-y$\u7684\u8fb9\uff08\u672c\u849f\u84bb\u4f7f$x$\u7684\u7236\u4eb2\u6307\u5411$y$\uff0c\u8fde\u4e00\u6761\u8f7b\u8fb9\uff09\n\n\u4ee3\u7801\n```cpp\ninline bool link(int x,int y){\n    makeroot(x);\n    if(findroot(y)==x)return 0;//\u4e24\u70b9\u5df2\u7ecf\u5728\u540c\u4e00\u5b50\u6811\u4e2d\uff0c\u518d\u8fde\u8fb9\u4e0d\u5408\u6cd5\n    f[x]=y;\n    return 1;\n}\n```\n\u5982\u679c\u9898\u76ee\u4fdd\u8bc1\u8fde\u8fb9\u5408\u6cd5\uff0c\u4ee3\u7801\u5c31\u53ef\u4ee5\u66f4\u7b80\u5355\n```cpp\ninline void link(int x,int y){\n    makeroot(x);\n    f[x]=y;\n}\n```\n## $cut(x,y)$\n\n\u5c06$x-y$\u7684\u8fb9\u65ad\u5f00\u3002\n\n\u5982\u679c\u9898\u76ee\u4fdd\u8bc1\u65ad\u8fb9\u5408\u6cd5\uff0c\u5012\u662f\u5f88\u65b9\u4fbf\u3002\n\n\u4f7f$x$\u4e3a\u6839\u540e\uff0c$y$\u7684\u7236\u4eb2\u4e00\u5b9a\u6307\u5411$x$\uff0c\u6df1\u5ea6\u76f8\u5dee\u4e00\u5b9a\u662f$1$\u3002\u5f53$access(y),splay(y)$\u4ee5\u540e\uff0c$x$\u4e00\u5b9a\u662f$y$\u7684\u5de6\u513f\u5b50\uff0c\u76f4\u63a5\u53cc\u5411\u65ad\u5f00\u8fde\u63a5\n```cpp\ninline void cut(int x,int y){\n    split(x,y);\n    f[x]=c[y][0]=0;\n    pushup(y);//\u5c11\u4e86\u4e2a\u513f\u5b50\uff0c\u4e5f\u8981\u4e0a\u4f20\u4e00\u4e0b\n}\n```\n\u90a3\u5982\u679c\u4e0d\u4e00\u5b9a\u5b58\u5728\u8be5\u8fb9\u5462\uff1f\n\n\u5145\u5206\u5229\u7528\u597dSplay\u548cLCT\u7684\u5404\u79cd\u57fa\u672c\u6027\u8d28\u5427\uff01\n\n\u6b63\u786e\u59ff\u52bf\u2014\u2014\u5148\u5224\u4e00\u4e0b\u8fde\u901a\u6027\uff08\u6ce8\u610f$findroot(y)$\u4ee5\u540e$x$\u6210\u4e86\u6839\uff09\uff0c\u518d\u770b\u770b$x,y$\u662f\u5426\u6709\u7236\u5b50\u5173\u7cfb\uff0c\u8fd8\u8981\u770b$y$\u662f\u5426\u6709\u5de6\u513f\u5b50\u3002\n\n\u56e0\u4e3a$access(y)$\u4ee5\u540e\uff0c\u5047\u5982y\u4e0ex\u5728\u540c\u4e00Splay\u4e2d\u800c\u6ca1\u6709\u76f4\u63a5\u8fde\u8fb9\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4e0a\u5c31\u4e00\u5b9a\u4f1a\u6709\u5176\u5b83\u70b9\uff0c\u5728\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4f1a\u4ecb\u4e8e$x$\u4e0e$y$\u4e4b\u95f4\u3002\n\n\u90a3\u4e48\u53ef\u80fd$y$\u7684\u7236\u4eb2\u5c31\u4e0d\u662f$x$\u4e86\u3002\n\n\u4e5f\u53ef\u80fd$y$\u7684\u7236\u4eb2\u8fd8\u662f$x$\uff0c\u90a3\u4e48\u5176\u5b83\u7684\u70b9\u5c31\u5728$y$\u7684\u5de6\u5b50\u6811\u4e2d\n\n```cpp\ninline bool cut(int x,int y){\n\tmakeroot(x);\n\tif(findroot(y)!=x||f[y]!=x||c[y][0])return 0;\n\tf[y]=c[x][1]=0;//x\u5728findroot(y)\u540e\u88ab\u8f6c\u5230\u4e86\u6839\n\tpushup(x);\n\treturn 1;\n}\n```\n\u5982\u679c\u7ef4\u62a4\u4e86$size$\uff0c\u8fd8\u53ef\u4ee5\u6362\u4e00\u79cd\u5224\u65ad\n```cpp\ninline bool cut(int x,int y){\n    makeroot(x);\n    if(findroot(y)!=x||sz[x]>2)return 0;\n    f[y]=c[x][1]=0;\n    pushup(x);\n    return 1;\n}\n```\n\u89e3\u91ca\u4e00\u4e0b\uff0c\u5982\u679c\u4ed6\u4eec\u6709\u76f4\u63a5\u8fde\u8fb9\u7684\u8bdd\uff0c$access(y)$\u4ee5\u540e\uff0c\u4e3a\u4e86\u6ee1\u8db3\u6027\u8d281\uff0c\u8be5Splay\u53ea\u4f1a\u5269\u4e0b$x,y$\u4e24\u4e2a\u70b9\u4e86\u3002\n\n\u53cd\u8fc7\u6765\u8bf4\uff0c\u5982\u679c\u6709\u5176\u5b83\u7684\u70b9\uff0c$size$\u4e0d\u5c31\u5927\u4e8e$2$\u4e86\u4e48\uff1f\n\n ---\n\n\u5176\u5b9e\uff0c\u8fd8\u6709\u4e00\u4e9bLCT\u4e2d\u7684Splay\u7684\u64cd\u4f5c\uff0c\u8ddf\u6211\u4eec\u4ee5\u5f80\u5b66\u4e60\u7684\u7eafSplay\u7684\u67d0\u4e9b\u64cd\u4f5c\u7ec6\u8282\u4e0d\u751a\u76f8\u540c\u3002\n\n\u5305\u62ec$splay(x),rotate(x),nroot(x)$\uff08\u770b\u5230\u8bb8\u591a\u7248\u672cLCT\u5199\u7684\u662f$isroot(x)$\uff0c\u4f46\u6211\u89c9\u5f97\u53cd\u8fc7\u6765\u4f1a\u65b9\u4fbf\u4e9b\uff09\n\n\u8fd9\u4e9b\u533a\u522b\u4e4b\u5904\u8be6\u89c1\u4e0b\u9762\u7684\u6a21\u677f\u9898\u6ce8\u91ca\u3002\n\n### update\uff08\u5173\u4e8efindroot\u4e2dpushdown\u7684\u8bf4\u660e\uff09\n\u849f\u84bb\u771f\u7684\u4e00\u65f6\u6ca1\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898\u3002\u3002\u3002\u3002\u3002\u3002Splay\u6839\u672c\u6ca1\u5b66\u597d\n\n\u627e\u6839\u7684\u65f6\u5019\uff0c\u5f53\u7136\u4e0d\u80fd\u4fdd\u8bc1Splay\u4e2d\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u7ffb\u8f6c\u6807\u8bb0\u5168\u653e\u6389\u3002\n\n\u6240\u4ee5\u6700\u597d\u628apushdown\u5199\u4e0a\u3002\n\n[Candy\u5de8\u4f6c\u7684\u603b\u7ed3](https://www.cnblogs.com/candy99/p/6271344.html)\u5bf9pushdown\u95ee\u9898\u6709\u8be6\u7ec6\u7684\u5206\u6790\n\n\u53ea\u4e0d\u8fc7\u849f\u84bb\u540e\u6765\u7ecf\u5e38\u4e60\u60ef\u8fd9\u6837\u5224\u8fde\u901a\u6027\uff08~~\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u517b\u6210\u7684~~\uff09\n```cpp\nmakeroot(x);\nif(findroot(y)==x)//\u540e\u7eed\u7701\u7565\n```\n\u8fd9\u6837\u597d\u50cf\u6ca1\u51fa\u8fc7\u95ee\u9898\uff0c\u90a3\u5e94\u8be5\u53ef\u4ee5\u8bc1\u660e\u662f\u6ca1\u95ee\u9898\u7684\uff08makeroot\u4fdd\u8bc1\u4e86x\u5728LCT\u7684\u9876\u7aef\uff0caccess(y)+splay(y)\u4ee5\u540e\uff0c\u5047\u5982x,y\u5728\u4e00\u4e2aSplay\u91cc\uff0c\u90a3x\u5230y\u7684\u8def\u5f84\u4e00\u5b9a\u5168\u90e8\u653e\u5b8c\u4e86\u6807\u8bb0\uff09\n\n\u5bfc\u81f4\u5f88\u4e45\u6ca1\u6709\u53d1\u73b0\u9519\u8bef\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u53e6\u5916\u63d0\u4e00\u4e0b\uff0c\u5047\u5982LCT\u9898\u76ee\u5728\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u60c5\u51b5\u4e2d\u53ea\u53ef\u80fd\u51fa\u73b0\u5408\u5e76\u800c\u4e0d\u4f1a\u51fa\u73b0\u5206\u79bb\u7684\u8bdd\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u54e6\uff01\uff08\u5b9e\u8df5\u8bc1\u660efindroot\u5f88\u6162\uff09\n\n\u8fd9\u6837\u7684\u4f8b\u5b50\u6709\u4e0d\u5c11\uff0c\u6bd4\u5982\u201c\u7ef4\u62a4\u94fe\u4e0a\u7684\u8fb9\u6743\u4fe1\u606f\u201d\u90e8\u5206\u7684\u4e24\u9053\u9898\u90fd\u662f\u7684\u3002\n\n\u751a\u81f3\u542c\u5230Julao\u4eec\u8bf4\u6709\u5c11\u91cf\u9898\u76ee\u8fd8\u4e13\u95e8\u5361\u8fd9\u4e2a\u5e38\u6570\u3002\u3002\u3002\u3002\u3002\u3002[XZY\u5de8\u4f6c\u7684\u535a\u5ba2](https://www.zybuluo.com/xzyxzy/note/1027479)\u5c31\u63d0\u5230\u4e86\n\n### update\uff08\u5173\u4e8epushdown\u7684\u8bf4\u660e\uff09\n\u6211pushdown\u548cmakeroot\u6709\u65f6\u5019\u4f1a\u8fd9\u6837\u5199\uff0c\u5e38\u6570\u5c0f\u4e00\u70b9\n```cpp\nvoid pushdown(int x){\n    if(r[x]){\n        r[x]=0;\n        int t=c[x][0];\n        r[c[x][0]=c[x][1]]^=1;\n        r[c[x][1]=t]^=1;\n    }\n}\nvoid makeroot(int x){\n    access(x);splay(x);\n    r[x]^=1;\n}\n```\n\u8fd9\u79cd\u5199\u6cd5\u7b49\u4e8e\u8bf4\u5f53x\u6709\u61d2\u6807\u8bb0\u65f6\uff0cx\u7684\u5de6\u53f3\u513f\u5b50\u8fd8\u662f\u53cd\u7684\n\n~~\u90a3\u4e48\u5982\u679cfindroot\u91cc\u5b9e\u5728\u8981\u5199pushdown\uff0c\u90a3\u4e48\u8fd9\u79cdpushdown\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898~~\uff08\u53c2\u8003cnblogs\u8bc4\u8bba\u533a@ zjp_shadow\u5de8\u4f6c\u7684\u6307\u6b63\uff09\n\n**\u518d\u6b21update\uff0c\u849f\u84bb\u53d1\u73b0\u8fd9\u79cd\u95ee\u9898\u8fd8\u662f\u53ef\u4ee5\u907f\u514d\u7684\uff0c\u82e5\u7528\u8fd9\u79cdpushdown\uff0cfindroot\u53ef\u4ee5\u5199\uff0c\u8fd9\u6837\u5199\u5c31\u597d\u5566**\n\n```cpp\ninline int findroot(int x){\n    access(x);splay(x);\n    pushdown(x);\n    while(lc)pushdown(x=lc);\n    splay(x);\n    return x;\n}\n```\n\u6240\u4ee5\u6b64\u603b\u7ed3\u4ee5\u53ca\u4e0b\u9762\u6a21\u677f\u91cc\u7684pushdown\uff0c\u5e38\u6570\u5927\u4e86\u4e00\u70b9\u70b9\uff0c\u5374\u662f\u66f4\u7a33\u59a5\u3001\u4e25\u8c28\u7684\u5199\u6cd5\n```cpp\n//pushr\u540c\u4e0a\u65b9makeroot\u90e8\u5206\nvoid pushdown(int x){\n    if(r[x]){\n        if(c[x][0])pushr(c[x][0]);//copy\u81ea\u6a21\u677f\uff0c\u7136\u540e\u53d1\u73b0if\u53ef\u4ee5\u4e0d\u5199\n        if(c[x][1])pushr(c[x][1]);\n        r[x]=0;\n    }\n}\nvoid makeroot(int x){\n    access(x);splay(x);\n    pushr(x);//\u53ef\u4ee5\u770b\u5230\u4e24\u79cd\u5199\u6cd5\u9020\u6210makeroot\u90fd\u662f\u4e0d\u4e00\u6837\u7684\n}\n```\n\u8fd9\u79cd\u5199\u6cd5\u7b49\u4e8e\u8bf4\u5f53x\u6709\u61d2\u6807\u8bb0\u65f6\uff0cx\u7684\u5de6\u53f3\u513f\u5b50\u5df2\u7ecf\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e86\uff0c\u53ea\u662f\u513f\u5b50\u7684\u513f\u5b50\u8fd8\u662f\u53cd\u7684\n\n\u90a3\u4e48\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u95ee\u9898\u5566\n\n\u4e24\u79cd\u5199\u6cd5\u5dee\u522b\u8fd8\u786e\u5b9e\u6709\u70b9\u5927\u5462\n\n\u5f53\u9898\u76ee\u4e2d\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0e\u5de6\u53f3\u513f\u5b50\u987a\u5e8f\u6709\u5173\u7684\u65f6\u5019\uff0cpushdown\u5982\u679c\u7528\u8fd9\u79cd\u4e0d\u4e25\u8c28\u5199\u6cd5\u4f1a\u662f\u9519\u7684\n\n\u6bd4\u5982[NOI2005]\u7ef4\u62a4\u6570\u5217\uff08\u8fd9\u662fSplay\u9898\uff09\u548c\u6d1b\u8c37P3613 \u7761\u89c9\u56f0\u96be\u7efc\u5408\u5f81\n\n## \u4ee3\u7801\n\u6700\u57fa\u672c\u7684LCT\u64cd\u4f5c\u90fd\u5728\u8fd9\u91cc\uff0c\u4e5f\u6ca1\u6709\u66f4\u591a\u989d\u5916\u7684\u590d\u6742\u64cd\u4f5c\u4e86\uff0c\u786e\u5b9e\u5f88\u6a21\u677f\u3002\n```cpp\n#include<bits/stdc++.h>\n#define R register int\n#define I inline void\n#define G if(++ip==ie)if(fread(ip=buf,1,SZ,stdin))\n#define lc c[x][0]\n#define rc c[x][1]\nusing namespace std;\nconst int SZ=1<<19,N=3e5+9;\nchar buf[SZ],*ie=buf+SZ,*ip=ie-1;\ninline int in(){\n\tG;while(*ip<'-')G;\n\tR x=*ip&15;G;\n\twhile(*ip>'-'){x*=10;x+=*ip&15;G;}\n\treturn x;\n}\nint f[N],c[N][2],v[N],s[N],st[N];\nbool r[N];\ninline bool nroot(R x){//\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3a\u4e00\u4e2aSplay\u7684\u6839\uff08\u4e0e\u666e\u901aSplay\u7684\u533a\u522b1\uff09\n\treturn c[f[x]][0]==x||c[f[x]][1]==x;\n}//\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5982\u679c\u8fde\u7684\u662f\u8f7b\u8fb9\uff0c\u4ed6\u7684\u7236\u4eb2\u7684\u513f\u5b50\u91cc\u6ca1\u6709\u5b83\nI pushup(R x){//\u4e0a\u4f20\u4fe1\u606f\n\ts[x]=s[lc]^s[rc]^v[x];\n}\nI pushr(R x){R t=lc;lc=rc;rc=t;r[x]^=1;}//\u7ffb\u8f6c\u64cd\u4f5c\nI pushdown(R x){//\u5224\u65ad\u5e76\u91ca\u653e\u61d2\u6807\u8bb0\n\tif(r[x]){\n\t\tif(lc)pushr(lc);\n\t\tif(rc)pushr(rc);\n\t\tr[x]=0;\n\t}\n}\nI rotate(R x){//\u4e00\u6b21\u65cb\u8f6c\n\tR y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n\tif(nroot(y))c[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;//\u989d\u5916\u6ce8\u610fif(nroot(y))\u8bed\u53e5\uff0c\u6b64\u5904\u4e0d\u5224\u65ad\u4f1a\u5f15\u8d77\u81f4\u547d\u9519\u8bef\uff08\u4e0e\u666e\u901aSplay\u7684\u533a\u522b2\uff09\n\tif(w)f[w]=y;f[y]=x;f[x]=z;\n\tpushup(y);\n}\nI splay(R x){//\u53ea\u4f20\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u56e0\u4e3a\u6240\u6709\u64cd\u4f5c\u7684\u76ee\u6807\u90fd\u662f\u8be5Splay\u7684\u6839\uff08\u4e0e\u666e\u901aSplay\u7684\u533a\u522b3\uff09\n\tR y=x,z=0;\n\tst[++z]=y;//st\u4e3a\u6808\uff0c\u6682\u5b58\u5f53\u524d\u70b9\u5230\u6839\u7684\u6574\u6761\u8def\u5f84\uff0cpushdown\u65f6\u4e00\u5b9a\u8981\u4ece\u4e0a\u5f80\u4e0b\u653e\u6807\u8bb0\uff08\u4e0e\u666e\u901aSplay\u7684\u533a\u522b4\uff09\n\twhile(nroot(y))st[++z]=y=f[y];\n\twhile(z)pushdown(st[z--]);\n\twhile(nroot(x)){\n\t\ty=f[x];z=f[y];\n\t\tif(nroot(y))\n\t\t\trotate((c[y][0]==x)^(c[z][0]==y)?x:y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\n/*\u5f53\u7136\u4e86\uff0c\u5176\u5b9e\u5229\u7528\u51fd\u6570\u5806\u6808\u4e5f\u5f88\u65b9\u4fbf\uff0c\u4ee3\u66ff\u4e0a\u9762\u7684\u624b\u5de5\u6808\uff0c\u5c31\u50cf\u8fd9\u6837\nI pushall(R x){\n\tif(nroot(x))pushall(f[x]);\n\tpushdown(x);\n}*/\nI access(R x){//\u8bbf\u95ee\n\tfor(R y=0;x;x=f[y=x])\n\t\tsplay(x),rc=y,pushup(x);\n}\nI makeroot(R x){//\u6362\u6839\n\taccess(x);splay(x);\n\tpushr(x);\n}\nint findroot(R x){//\u627e\u6839\uff08\u5728\u771f\u5b9e\u7684\u6811\u4e2d\u7684\uff09\n\taccess(x);splay(x);\n\twhile(lc)pushdown(x),x=lc;\n\tsplay(x);\n\treturn x;\n}\nI split(R x,R y){//\u63d0\u53d6\u8def\u5f84\n\tmakeroot(x);\n\taccess(y);splay(y);\n}\nI link(R x,R y){//\u8fde\u8fb9\n\tmakeroot(x);\n\tif(findroot(y)!=x)f[x]=y;\n}\nI cut(R x,R y){//\u65ad\u8fb9\n\tmakeroot(x);\n\tif(findroot(y)==x&&f[y]==x&&!c[y][0]){\n\t\tf[y]=c[x][1]=0;\n\t\tpushup(x);\n\t}\n}\nint main()\n{\n\tR n=in(),m=in();\n\tfor(R i=1;i<=n;++i)v[i]=in();\n\twhile(m--){\n\t\tR type=in(),x=in(),y=in();\n\t\tswitch(type){\n\t\tcase 0:split(x,y);printf(\"%d\\n\",s[y]);break;\n\t\tcase 1:link(x,y);break;\n\t\tcase 2:cut(x,y);break;\n\t\tcase 3:splay(x);v[x]=y;//\u5148\u628ax\u8f6c\u4e0a\u53bb\u518d\u6539\uff0c\u4e0d\u7136\u4f1a\u5f71\u54cdSplay\u4fe1\u606f\u7684\u6b63\u786e\u6027\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1517802229,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "LCT\u6a21\u7248\u9898\u3002\r\n\r\n\u52a8\u6001\u6811\u662f\u4e00\u7c7b\u7ef4\u62a4\u68ee\u6797\u8fde\u901a\u6027\u7684\u95ee\u9898\uff0c\u76ee\u524d\u6700(wo)\u5e38(zhi)\u89c1(hui)\u7684\u52a8\u6001\u6811\u5c31\u662fLCT(Link-Cut-Tree),\u7136\u800cLCT\u4f3c\u4e4e\u662f\u5904\u7406\u8def\u5f84\u7684\uff0c\u5904\u7406\u5b50\u6811\u53ef\u80fd\u529b\u4e0d\u8db3\u3002\u636e\u8bf4\u6709\u4e00\u79cd\u79f0\u4e3a\\*Top Tree\\*\u7684**\u6570\u636e\u7ed3\u6784**,\u53ef\u4ee5\u5904\u7406\u6240\u6709\u3002\u4f46\u662f\u5b66\u4e0d\u52a8\u4e86Orz\r\n\r\nLCT\u4e2d\u6700\u4e3b\u8981\u7684\u662fAccess\u64cd\u4f5c\uff0cAccess(u)\u64cd\u4f5c\u7684\u542b\u4e49\u662f\uff0c\u4ece\u5f53\u524d\u7684\u8282\u70b9u\u5411\u4ed6\u6240\u5728\u7684\u6839\u8282\u70b9\u8fde\u4e00\u6761**\u91cd\u8def\u5f84**\uff0c\u8fd9\u662f\u76f8\u5f53\u4e8e\u628a\u6cbf\u8def\u7684\u91cd\u8def\u5f84\u5168\u90fd\u65ad\u5f00\uff0c\u91cd\u65b0\u62c9\u4e00\u6761\u4eceu\u5230\u6839\u7684\u91cd\u8def\u5f84\u3002\r\n\r\nmakeroot(x)\u64cd\u4f5c\uff1a\r\n\r\n\u82e5\u60f3\u8ba9u\u6210\u4e3a\u5f53\u524d\u6811\u7684\u6839\u8282\u70b9\uff0c\u5219\u53ef\u4ee5\u5148access(u)\uff0c\u518dsplay(u)\uff0c\u628au\u8f6c\u4e3a\u5f53\u524dsplay\u7684\u6839\u8282\u70b9\u3002\u56e0\u4e3asplay\u7ef4\u62a4\u7684\u662f\u6df1\u5ea6\uff0c\u6240\u4ee5u\u6ca1\u6709\u53f3\u513f\u5b50\uff08\u6ca1\u6709\u6bd4u\u8fd8\u8981\u6df1\u7684\u70b9\uff0c\u56e0\u4e3a\u91cd\u94fe\u5b9a\u4e49\uff09\uff0c\u6240\u4ee5\u6362\u6839\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u533a\u95f4\u7ffb\u8f6c\uff0c\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u5373\u5b8c\u6210\u533a\u95f4\u7ffb\u8f6c\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u6253\u6807\u8bb0\u4e86\u3002\r\n\r\n\r\n\u6240\u4ee5\uff0c**makeroot=access+splay+rev**\r\n\r\n\u8fd8\u6709\u4e00\u4e2aisroot\u64cd\u4f5c\uff0c\u8d85\u7ea7\u7b80\u5355\uff0c\u5c31\u662f\u5224\u65ad\u8fd9\u662f\u4e0d\u662f\u4e00\u6761\u91cd\u8def\u5f84\u7684\u6839\uff0c\u53ea\u8981\u4ed6\u7684fa\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u4e0d\u662f\u4ed6\uff08\u8bc1\u660e\u6b64\u65f6\u8fd9\u662f\u4e00\u6761\u865a\u8fb9\uff09\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u68f5\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\r\n\r\nlink(x,y)\u64cd\u4f5c\uff1a\r\n\r\n\u5728u\u548cv\u4e4b\u95f4\u8fde\u8fb9\uff0c\u53ef\u4ee5makeroot(u)\uff0c\u518d\u8ba9u\u7684\u7236\u4eb2\u4e3av\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8ev\u672c\u8eab\u662f\u4e00\u68f5splay\uff0c\u800cu\u548cv\u4e4b\u95f4\u8fde\u4e86\u6761\u8f7b\u8fb9\u3002\r\n\r\ncut(u,v)\u64cd\u4f5c\uff1a\r\n\r\n\u65ad\u5f00u\u548cv\u4e4b\u95f4\u7684\u8fb9\uff0c\u53ef\u4ee5\u5148makeroot(u)\uff0c\u518daccess(v)\uff0c\u518dsplay(v)\uff0c\u6b64\u65f6v\u7684\u5de6\u513f\u5b50\u5fc5\u5b9a\u4e3au\uff0c\u4e8e\u662f\u65ad\u5f00v\u548cv\u7684\u5de6\u513f\u5b50\u5373\u53ef\u3002\r\n\r\n\u81f3\u4e8e\u7ffb\u8f6c\u6807\u8bb0\u7684\u4f20\u9012\uff0c\u5c31\u662f\u8ddfSplay\u4e00\u6837\u5c31\u884c\u4e86\u3002\r\n\r\n\u4f46\u6807\u8bb0\u4e0b\u653e\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u56e0\u4e3asplay\u662f\u65f6\u65f6\u523b\u523b\u5728\u5206\u88c2\u4e0e\u5408\u5e76\u7684\uff0c\u56e0\u4e3a\u8981\u52a8\u6001\u7ef4\u62a4\u6bcf\u6761\u91cd\u94fe\uff0c\u6240\u4ee5\u5728splay\u4e4b\u524d\uff0c\u8981\u5148**\u628a\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u5168\u90e8\u4e0b\u653e\u4e00\u904d\u6807\u8bb0**\uff0c\u9632\u6b62\u6807\u8bb0\u4e0b\u653e\u4e0d\u5b8c\u5168\u3002\r\n\r\nsplit(x,y)\u64cd\u4f5c\uff1a\r\n\r\nsplit\u76f8\u5f53\u4e8e\u628a\u4e24\u4e2a\u5b50\u6811\u5206\u5f00\uff0c\u8003\u8651\u5230\u6211\u4eeccut\u7684\u65f6\u5019\u7b2c\u4e00\u6b65\u4e5f\u662f\u5206\u5f00\uff0c\u6240\u4ee5$split=makeroot(u)+access(v)+splay(v)$\r\n\r\n\u7136\u540e\u8fd8\u8981\u4fdd\u5b58\u4e00\u4e9b\u8f7b\u8fb9\uff08\u865a\u8fb9\uff09\uff0c\u5bf9\u4e8e\u8f7b\u8fb9\u6211\u4eec\u9700\u8981\u5355\u72ec\u8bb0\u5f55\u5904\u7406\u3002\u5728\u539f\u6811\u4e0a\uff0c\u5f53\u524d\u91cd\u94fe\u7684\u9876\u7aef\u8282\u70b9\u4e0e\u4ed6\u7684\u7236\u4eb2\u7684\u8fb9\u5373\u4e3a\u8f7b\u8fb9\uff0c\u5982\u679c\u4e0d\u8bb0\u5f55\uff0c\u6811\u5c06\u662f\u4e0d\u5b8c\u6574\u7684\u3002\r\n\r\n\u5177\u4f53\u5230\u4ee3\u7801\u5b9e\u73b0\uff0c\u53ef\u4ee5\u662f\u5f53\u524dsplay\u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u5373\u4e3a\u5f53\u524dsplay\u4e0a\u9762\u7684\u90a3\u4e2a\u91cd\u94fe\u6240\u5728\u7684splay\u4e0a\u7684\u70b9\uff0c\u4f46\u4e0a\u9762\u7684splay\u7684\u513f\u5b50\u5e76\u4e0d\u6307\u5411\u5f53\u524dsplay\u7684\u7236\u4eb2\uff0c\u5373\u4e3a\u7528splay\u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u6765\u5b58\u50a8\u8f7b\u8fb9\u3002\r\n\r\n\u52a8\u6001\u6811\u7684\u4e3b\u8981\u65f6\u95f4\u6d88\u8017\u5728Access\u4e0a\uff0c\u800cAccess\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlogn)$\r\n\r\n\u597d\u50cf\u6700\u540e\u5728UOJ\u7fa4\u91cc\u770b\u5230\u4e00\u53e5\u8bdd\uff1a\r\n\r\n**\u6811\u5256\u80fd\u505a\u7684\uff0c\u52a8\u6001\u6811\u90fd\u80fd\u505a\uff0c\u53ea\u4e0d\u8fc7\u6709\u7684\u4e1c\u897f\u52a8\u6001\u6811\u505a\u8d77\u6765\u6bd4\u6811\u5256\u70e6\u7684\u591a**\r\n\r\n\u4ee5\u4e0a\u5185\u5bb9\u6765\u81ea\u6211\u7684blog\u5566\u3002\u592a\u83dc\u5c31\u4e0d\u653elink\u4e86\u3002\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define N 300005\r\nusing namespace std;\r\nint n,m,val[N];\r\nstruct Link_Cut_Tree{\r\n    int top,c[N][2],fa[N],xr[N],q[N],rev[N];\r\n    inline void pushup(int x){xr[x]=xr[c[x][0]]^xr[c[x][1]]^val[x];}\r\n    inline void pushdown(int x){\r\n        int l=c[x][0],r=c[x][1];\r\n        if(rev[x]){\r\n            rev[l]^=1;rev[r]^=1;rev[x]^=1;\r\n            swap(c[x][0],c[x][1]);\r\n        }\r\n    }\r\n    inline bool isroot(int x){return c[fa[x]][0]!=x&&c[fa[x]][1]!=x;}\r\n    void rotate(int x){\r\n        int y=fa[x],z=fa[y],l,r;\r\n        if(c[y][0]==x)l=0;else l=1;r=l^1;\r\n        if(!isroot(y)){if(c[z][0]==y)c[z][0]=x;else c[z][1]=x;}\r\n        fa[x]=z;fa[y]=x;fa[c[x][r]]=y;\r\n        c[y][l]=c[x][r];c[x][r]=y;\r\n        pushup(y);pushup(x);\r\n    }\r\n    void splay(int x){\r\n        top=1;q[top]=x;\r\n        for(int i=x;!isroot(i);i=fa[i])q[++top]=fa[i];\r\n        for(int i=top;i;i--)pushdown(q[i]);\r\n        while(!isroot(x)){\r\n            int y=fa[x],z=fa[y];\r\n            if(!isroot(y)){\r\n                if((c[y][0]==x)^(c[z][0]==y))rotate(x);\r\n                else rotate(y);\r\n            }rotate(x);\r\n        }\r\n    }\r\n    void access(int x){for(int t=0;x;t=x,x=fa[x])splay(x),c[x][1]=t,pushup(x);}\r\n    void makeroot(int x){access(x);splay(x);rev[x]^=1;}\r\n    int find(int x){access(x);splay(x);while(c[x][0])x=c[x][0];return x;}\r\n    void split(int x,int y){makeroot(x);access(y);splay(y);}\r\n    void cut(int x,int y){split(x,y);if(c[y][0]==x&&c[x][1]==0)c[y][0]=0,fa[x]=0;}\r\n    void link(int x,int y){makeroot(x);fa[x]=y;}\r\n}T;\r\ninline int read(){\r\n    int f=1,x=0;char ch;\r\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\r\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\r\n    return f*x;\r\n}\r\nint main(){\r\n    n=read();m=read();\r\n    for(int i=1;i<=n;i++)val[i]=read(),T.xr[i]=val[i];\r\n    while(m--){\r\n        int opt=read();\r\n        if(opt==0){\r\n            int x=read(),y=read();T.split(x,y);\r\n            printf(\"%d\\n\",T.xr[y]);\r\n        }\r\n        if(opt==1){\r\n            int x=read(),y=read(),xx=T.find(x),yy=T.find(y);\r\n            if(xx!=yy)T.link(x,y);\r\n        }\r\n        if(opt==2){\r\n            int x=read(),y=read(),xx=T.find(x),yy=T.find(y);\r\n            if(xx==yy)T.cut(x,y);\r\n        }\r\n        if(opt==3){\r\n            int x=read(),y=read();\r\n            T.access(x);T.splay(x);val[x]=y;T.pushup(x);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1493459833,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u8fd9\u91cc](http://www.cnblogs.com/zwfymqz/p/8972914.html)\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- \u5fc5\u987b\u8981\u7406\u89e3[splay](http://www.cnblogs.com/zwfymqz/p/7896036.html)\n- \u6700\u597d\u5b66\u8fc7[\u6811\u94fe\u5256\u5206](http://www.cnblogs.com/zwfymqz/p/8094500.html)\n\n\n## \u57fa\u7840\u5b9a\u4e49\n\nLCT\u662f\u4e00\u79cd\u89e3\u51b3\u52a8\u6001\u6811\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u7531tarjan~~(\u4e3a\u4ec0\u4e48\u53c8\u662f\u4ed6)~~\u57281982\u5e74\u63d0\u51fa\uff0c\u6700\u539f\u59cb\u7684\u8bba\u6587\u5728[\u8fd9\u91cc](https://pan.baidu.com/s/1eBpsyxQd7OAku_1dhzWjLA),\u5728\u8bba\u6587\u4e2d\uff0ctarjan\u9664\u4e86\u4ecb\u7ecd\u4e86\u5747\u644a\u590d\u6742\u5ea6\u4e3a$O(log^2n)$\u7684LCT\u4e4b\u5916\uff0c\u8fd8\u4ecb\u7ecd\u4e86\u4e00\u79cd\u4e25\u683c$O(log^2n)$\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u672c\u4eba\u592a\u5f31\u4e86\uff0c\u770b\u4e0d\u61c2tarjan\u8bb2\u4e86\u4e9b\u5565\uff0c\u4e5f\u6ca1\u627e\u5230\u5176\u4ed6\u7684\u5b66\u4e60\u8d44\u6599\uff0c\u56e0\u6b64\u8fd9\u79cd\u7b97\u6cd5\u6211\u4eec\u4e0d\u505a\u8ba8\u8bba\n\n## \u80fd\u591f\u89e3\u51b3\u7684\u95ee\u9898\n\n1. \u6c42LCA\n2. \u6c42\u6700\u5c0f\u751f\u6210\u6811\n3. \u7ef4\u62a4\u94fe\u4e0a\u4fe1\u606f(\u6700\u5927\u6700\u5c0f\uff0c\u94fe\u4e0a\u548c\u7b49)\n4. \u7ef4\u62a4\u8054\u901a\u6027\n5. \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f(\u9700\u8981\u914d\u5408AAA\u6811)\n6. \u4f18\u5316\u5355\u7eaf\u6027\u7b97\u6cd5\uff0c\u5728$O(mnlog(n))$\u7684\u590d\u6742\u5ea6\u4e0b\u6c42\u6700\u5927\u6d41\uff08\u8fd9\u4e24\u4e2a\u662ftarjan\u5728\u5b83\u7684\u8bba\u6587\u6700\u5f00\u5934\u63d0\u5230\u7684\uff0c\u4f46\u662f\u6211\u9664\u4e86\u5728\u4e00\u672c\u4e66\u4e2d\u770b\u5230\u8fc7\u6709\u5173\u7684\u7b80\u4ecb(\u6ca1\u6709\u4ee3\u7801)\u4e4b\u5916\uff0c\u518d\u6ca1\u770b\u5230\u8fc7\u5173\u4e8e\u5b83\u7684\u4efb\u4f55\u8d44\u6599\uff0c\uff09\n\n## \u6784\u9020\n\n\u5728\u89e3\u51b3\u6811\u4e0a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6709\u4e00\u79cd\u975e\u5e38\u5e38\u89c1\u7684\u64cd\u4f5c\u53eb\u505a\u94fe\u5256\u5206\n\n\u94fe\u5256\u5206\u4e00\u822c\u5206\u4e3a\u4e09\u79cd\n- \u91cd\u94fe\u5256\u5206\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u63d0\u5230\u7684\u201c\u6811\u5256\u201d\uff0c\u5256\u5206\u7684\u539f\u7406\u662f\u628a\u8282\u70b9\u4e2a\u6570\u6700\u591a\u7684\u513f\u5b50\u5f53\u505a\u91cd\u513f\u5b50\n\n- \u957f\u94fe\u5256\u5206\uff0c\u5e76\u4e0d\u662f\u5f88\u5e38\u89c1\uff0c\u53ef\u4ee5$O(1)$\u6c42$k$\u7ea7\u7956\u5148\uff0c\u539f\u7406\u662f\u628a\u6df1\u5ea6\u6700\u6df1\u7684\u513f\u5b50\u5f53\u505a\u91cd(\u957f)\u513f\u5b50\n\n- \u5b9e\u94fe\u5256\u5206\uff0c\u4e5f\u5c31\u662fLCT\u6240\u7528\u5230\u7684\u5256\u5206\u65b9\u6cd5\uff0c\u8fd9\u91cc\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0b\n\n\u5728\u5b9e\u94fe\u5256\u5206\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u513f\u5b50\u4f5c\u4e3a\u91cd\u513f\u5b50\uff0c\u628a\u8fde\u63a5\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u8fb9\u4f5c\u4e3a\u91cd\u8fb9\uff0c\u8fde\u63a5\u5176\u4ed6\u513f\u5b50\u7684\u8fb9\u4f5c\u4e3a\u8f7b\u8fb9\u3002\n\n\u4e0e\u524d\u4e24\u79cd\u5256\u5206\u4e0d\u540c\u7684\u662f\uff0c\u5b9e\u94fe\u5256\u5206\u4e2d\u7684\u91cd\u513f\u5b50\u662f\u53ef\u4ee5\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u56e0\u6b64\u5728\u6574\u68f5\u6811\u4e2d\u7684\u91cd\u94fe\u548c\u8f7b\u94fe\u4e5f\u662f\u5728\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u7528\u66f4\u7075\u6d3b\u4e00\u4e9b\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u4e00\u6761\u94fe\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7684\u662f\u94fe\u8868\uff0c\u4f46\u662f\u7528\u94fe\u8868\u6765\u7ef4\u62a4\u6811\u4e0a\u6743\u503c\u548c\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u80af\u5b9a\u662f$O(n^2)$\u7684\uff0c\u5373\u4f7f\u662f\u5757\u72b6\u94fe\u8868\u4e5f\u53ea\u80fd\u505a\u5230$O(n \\sqrt{n})$\n\n\u56e0\u6b64\u6211\u4eec\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u94fe\u4e0a\u4fe1\u606f\uff0c\u90a3\u4e48\u7528\u4ec0\u4e48\u5e73\u8861\u6811\u5462\uff1f\u7406\u8bba\u4e0asplay\u548cfhq treap\u90fd\u662f\u53ef\u4ee5\u7684\uff0ctreap\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7ef4\u62a4\u7ffb\u8f6c\u4fe1\u606f\uff0c\u5728\u8fd9\u91cc\u6211\u6bd4\u8f83\u63a8\u8350splay\uff0c\u56e0\u4e3a\u7f51\u4e0a\u6709\u5173LCT\u7684\u9898\u76ee\u5927\u591a\u6570\u9898\u89e3\u90fd\u662f\u7528splay\u5199\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5b66\u4e60\u96be\u5ea6\u4e5f\u4f1a\u5c0f\u4e00\u70b9\uff0c\u800c\u4e14\u6211\u81ea\u6d4bsplay\u7684\u5e38\u6570\u8981\u6bd4fhq treap\u5c0f\u5f88\u591a\n\n\u6211\u4eec\u7528splay\u7ef4\u62a4\u6bcf\u4e00\u6761\u5b9e\u8def\u5f84(\u4ec5\u7531\u5b9e\u8fb9\u7ec4\u6210\u7684\u8def\u5f84)\uff0c\u56e0\u4e3a\u6bcf\u6761\u5b9e\u8def\u5f84\u90fd\u5bf9\u5e94\u4e00\u6761\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u94fe\uff0c\u8fd9\u6837\u7684\u8bdd\u8def\u5f84\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\u5728splay\u4e2d\uff0c\u6211\u4eec\u6309\u6df1\u5ea6\u4f5c\u4e3a\u5173\u952e\u5b57\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u5b69\u5b50\u6240**\u5bf9\u5e94\u7684\u539f\u8282\u70b9**\u6df1\u5ea6\u6bd4\u5b83\u5c0f\uff0c\u53f3\u513f\u5b50\u6240**\u5bf9\u5e94\u7684\u539f\u8282\u70b9**\u6df1\u5ea6\u6bd4\u5b83\u5927\n\n\uff08\u8fd9\u91cc\u63d2\u4e00\u53e5\u95f2\u8bdd\uff0cLCT\u4e4b\u6240\u4ee5\u96be\u4e8e\u7406\u89e3\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u521d\u5b66\u8005\u5206\u4e0d\u6e05\u539f\u6811/splay\uff0c\u56e0\u6b64\u6211\u5e0c\u671b\u5927\u5bb6\u5728\u7ee7\u7eed\u5f80\u4e0b\u8bfb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u5206\u6e05\u695a\u6211\u6240\u8bf4\u7684\u6982\u5ff5\u5230\u65f6\u6307\u7684\u662f\u539f\u6811\u8fd8\u662fsplay\u6811\uff09\n\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u867d\u7136\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5728\u4e86splay\u4e2d\uff0c\u4f46\u662f\u6bcf\u4e2asplay\u4e4b\u95f4\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u5728\u5404\u4e2asplay\u4e2d\u5efa\u7acb\u8054\u7cfb\uff0c\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5047\u8bbe\u5b83\u6709\u4e09\u4e2a\u513f\u5b50\uff0c\u5176\u4e2d\u6700\u591a\u6709\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u548c\u4ed6\u5728\u4e00\u4e2asplay\u4e2d\uff0c\u53e6\u5916\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u5c5e\u4e8e\u4e0d\u540c\u7684splay\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u6027\u8d28\u2014\u2014\u53e6\u5916\u4e24\u4e2a\u513f\u5b50\u5728\u4ed6\u4eec\u6240\u5728\u7684\u5b50\u6811\u4e2d\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2asplay\u4e2d\u7684\u6839\u8282\u70b9\u6307\u5411splay\u4e2d \u4e2d\u5e8f\u904d\u5386\u7f16\u53f7\u6700\u5c0f(\u4e5f\u5c31\u662f\u539f\u6811\u4e2d\u6df1\u5ea6\u6700\u5c0f)\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u6709\u70b9\u7ed5\uff0c\u5e0c\u671b\u5927\u5bb6\u597d\u597d\u7406\u89e3\u4e00\u4e0b\n\n\u5bf9\u4e8e\u4e00\u68f5\u8fd9\u6837\u7684\u6811\n(\u56fe\u7247\u6765\u6e90\uff1aFlashHu\u7684\u535a\u5ba2)\n\n\n![](http://ou46et6i2.bkt.clouddn.com/%E5%8E%9F%E6%A0%91.png)\n\n\n\u5b83\u7684splay\u6811\u53ef\u80fd\u957f\u8fd9\u4e2a\u6837\u5b50\n\n![](http://ou46et6i2.bkt.clouddn.com/splay%E6%A0%91.png)\n\n\n## LCT\u57fa\u7840\u64cd\u4f5c\n\n### $access(x)$\n\n\u5c06\u6839\u8282\u70b9\u5230$x$\u70b9\u7684\u8def\u5f84\u53d8\u4e3a\u5b9e\u8def\u5f84\uff0c\u4e14$x$\u4e0e\u5176\u513f\u5b50\u4e4b\u95f4\u7684\u8fb9\u90fd\u53d8\u4e3a\u865a\u8fb9\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u64cd\u4f5c\u6709\u4ec0\u4e48\u76ee\u7684\uff0c\u6709\u4e86\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6839\u8282\u70b9\u5230$x$\u7684\u8fd9\u6761\u8def\u5f84\u653e\u5728\u540c\u4e00\u68f5splay\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f88\u65b9\u4fbf\u901a\u8fc7\u5728splay\u4e0a\u6253\u6807\u8bb0\u5f97\u5230\u8def\u5f84\u4fe1\u606f\n\n\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u8fd8\u662f\u4e0a\u9762\u90a3\u5f20\u56fe\n\n![](http://ou46et6i2.bkt.clouddn.com/%E5%8E%9F%E6%A0%91.png)\n\n\u5982\u679c\u6211\u4eec\u8981\u6267\u884c$access(N)$\uff0c\n\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u5f80\u4e0a\u4f9d\u6b21\u5904\u7406\uff0c\u9996\u5148\u6211\u4eec\u8981\u4f7f\u5f97$N-O$\u8fd9\u6761\u8fb9\u53d8\u4e3a\u8f7b\u8fb9\uff0c\u56e0\u4e3a\u5728splay\u4e2d\uff0c\u8282\u70b9\u7684\u6df1\u5ea6\u662f\u552f\u4e00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u628a$N$\uff0c\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u6837\u5b83\u53f3\u8fb9\u7684\u8282\u70b9\u4e00\u5b9a\u662f$O$\uff0c\u7136\u540e\u76f4\u63a5\u628a$N$\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$0$\u5c31\u53ef\u4ee5\u4e86\n\n\n\n\u7ee7\u7eed\u5f80\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u4f7f$I-K$\u8fd9\u6761\u8fb9\u53d8\u4e3a\u8f7b\u8fb9\uff0c\u540c\u65f6\u4f7f$I-L$\u8fd9\u6761\u8fb9\u53d8\u4e3a\u91cd\u8fb9\n\n\u8003\u8651\u5982\u4f55\u4f7f$I-K$\u53d8\u4e3a\u8f7b\u8fb9\u3002\u548c\u4e0a\u9762\u7684\u601d\u8def\u4e00\u6837\uff0c\u6211\u4eec\u9996\u5148\u4f7f$I$\u8f6c\u5230\u6240\u5728splay\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u7684\u53f3\u513f\u5b50\u4e00\u5b9a\u662f$K$\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u65ad\u5f00$I-K$\u8fd9\u6761\u8fb9\u5373\u53ef\n\n\u8003\u8651\u5982\u4f55\u4f7f$I-L$\u53d8\u4e3a\u91cd\u8fb9\u3002\u8fd9\u4e2a\u5c31so easy\u4e86\uff0c\u76f4\u63a5\u5c06$I$\u7684\u53f3\u513f\u5b50\u7f6e\u4e3a$L$\u5373\u53ef\n\n\u6b64\u65f6$I$\u6240\u5728\u7684splay\u7684\u7236\u4eb2\u6307\u5411$H$\n\n\u7ee7\u7eed\u5f80\u4e0a\u601d\u8def\u5c31\u662f\u4e00\u6837\u7684\u4e86\uff0c\u6309\u7167\u540c\u6837\u7684\u5957\u8def\u4f7f\u5f97$H-J$\u53d8\u4e3a\u8f7b\u8fb9\uff0c\u4f7f$H-I$\u53d8\u4e3a\u91cd\u8fb9\uff0c\n\n\u6b64\u65f6$H$\u6307\u5411$A$\uff0c\u7136\u540e\u8ba9$A$\u8f6c\u5230\u6240\u5728splay\u7684\u6839\u8282\u70b9\uff0c\u628a\u53f3\u513f\u5b50\u7f6e\u4e3a$H$\u5373\u53ef\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86$access$\u64cd\u4f5c\uff0c\u6309\u7167\u4e0a\u9762\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u4e0d\u96be\u603b\u7ed3\u51fa\u7b97\u6cd5\u6846\u67b6\n\n1. \u5c06\u8981\u5904\u7406\u7684\u8282\u70b9\u8f6c\u5230\u6839\n2. \u66f4\u6539\u53f3\u513f\u5b50\n3. \u66f4\u65b0\u6807\u8bb0\n\n\u4ee3\u7801\u7684\u8bdd\uff0c\uff0c\u9996\u5148\u8bf4\u4e00\u4e0b\u5404\u79cd\u5b9a\u4e49\n```cpp\nstruct node {\n    int f, ch[2], s;\n    //f\uff1a\u7236\u4eb2\n    //ch[0]/[1]:\u5de6/\u53f3\u513f\u5b50\n    //s:\u6807\u8bb0\uff0c\u4f9d\u9898\u76ee\u800c\u53d8\n    bool r;//\u662f\u5426\u7ffb\u8f6c\n}T[MAXN];\n```\n\naccess\n```cpp\nvoid access(int x) {//\u8bbf\u95eex\u8282\u70b9 \n    for(int y = 0; x; x = fa(y = x))\n        splay(x), rs(x) = y, update(x);\n    //\u9996\u5148\u628ax splay\u5230\u6240\u5728\u5e73\u8861\u6811\u7684\u6839\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u7684\u53f3\u5b69\u5b50\u5c31\u662f\u5728\u539f\u6811\u4e2d\u5bf9\u5e94\u7684\u91cd\u94fe(\u53f3\u5b69\u5b50\u6df1\u5ea6\u6bd4\u5b83\u5927)\n    //y\u662fsplay\u4e2dx\u7684\u513f\u5b50\uff0c\u628ax\u7684\u53f3\u513f\u5b50\u6539\u6210y\uff0c\u4e5f\u5c31\u662f\u628ax\u548cy\u4e4b\u95f4\u7684\u8fb9\u53d8\u6210\u5b9e\u8fb9\n    //\u66f4\u6539\u4e86\u8282\u70b9\u987a\u5e8f\uff0c\u9700\u8981update \n}\n```\n\n\n### $makeroot(x)$\n\n\u5c06$x$\u53d8\u4e3a\u539f\u6811\u7684\u6839\n\n\u8003\u8651\u8fd9\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u6811\u4e0a\u8be2\u95ee\u6765\u8bf4\uff0c\u90fd\u662f\u8be2\u95ee\u4e00\u6761\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0c\u7531\u4e8eLCT\u7684\u6784\u9020\u7684\u7f18\u6545\uff0c\u8fd9\u79cd\u8be2\u95ee\u5904\u7406\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\u3002\u4f46\u662f\u5f53\u8be2\u95ee\u7684\u4e00\u7aef\u5728\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5904\u7406\u8d77\u6765\u5c31\u5bb9\u6613\u7684\u591a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\u5728\u4e8e\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u5904\u7406\u8be2\u95ee\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u5b9e\u73b0\u601d\u8def\uff1a\n\n\u9996\u5148\u6211\u4eec\u9700\u8981$access(x)$\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u6839\u8282\u70b9\u548c$x$\u653e\u5230\u4e86\u540c\u4e00\u68f5splay\u4e2d\n\n\u6b64\u65f6$x$\u662f\u4e0d\u542b\u53f3\u513f\u5b50\u7684\uff08\u6ca1\u6709\u6df1\u5ea6\u6bd4\u4ed6\u5927\u7684\u70b9\uff09\n\n\u7136\u540e\u6211\u4eec\u9700\u8981$splay(x)$\uff0c\u6b64\u65f6$x$\u4f1a\u6210\u4e3asplay\u7684\u6839\u8282\u70b9\uff0c\u4e14$x$\u4e0d\u542b\u53f3\u513f\u5b50\u3002\n\n\u4f46\u662f\u5728\u6839\u8282\u70b9\u6240\u5728\u7684splay\u4e2d\uff0c\u6839\u8282\u70b9\u6ca1\u6709\u5de6\u513f\u5b50\uff08\u6ca1\u6709\u6df1\u5ea6\u6bd4\u4ed6\u5c0f\u7684\u8282\u70b9\uff09\n\n\u8fd9\u53ef\u600e\u4e48\u529e\u5462\uff1f\uff1f\n\n\u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u9a9a\u64cd\u4f5c\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u5c06$x$\u7684\u5de6\u53f3\u5b50\u6811\u7ffb\u8f6c\uff01\n\n\u8fd9\u6837$x$\u4e0d\u5c31\u6ca1\u6709\u5de6\u513f\u5b50\u4e86\u4e48\uff1f233\n\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u6837\u662f\u5bf9\u7684\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid makeroot(int x) {//\u628ax\u6539\u4e3a\u539f\u6811\u7684\u6839\u8282\u70b9 \n    access(x);\n    splay(x);\n    T[x].r ^= 1;//\u66f4\u65b0\u7ffb\u8f6c\u6807\u8bb0\n}\n```\n\n### $findroot(x)$\n\n\u627e\u5230$x$\u6240\u5728\u539f\u6811\u7684\u6839\n\n\u4f60\u521a\u5f00\u59cb\u53ef\u80fd\u8ddf\u6211\u4e00\u6837\u5f88\u5446\u840c\u7684\u8ba4\u4e3a\uff1a$x$\u6240\u5728\u539f\u6811\u7684\u6839\u4e0d\u5c31\u662f\u6839\u8282\u70b9\u4e48\uff1f\n\n\u4f46\u662f\u3002\u3002\n\n\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1aLCT\u7ef4\u62a4\u7684\u662f\u68ee\u6797\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u68f5\u6811\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u539f\u6811\u7684\u6839\u8282\u70b9\u5f80\u5f80\u662f\u4e0d\u540c\u7684\n\n\n\u8003\u8651\u8fd9\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\uff1a\n\n\u5927\u5bb6\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u8ddf\u5e76\u67e5\u96c6\u4e2d\u627e\u7956\u5148\u7684\u64cd\u4f5c\u5f88\u7c7b\u4f3c\uff1f\u6ca1\u9519\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7684\u7528\u5904\u5c31\u662f\u5224\u65ad\u4e24\u4e2a\u8282\u70b9\u7684\u8054\u901a\u6027\uff08\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff09\n\n\u5b9e\u73b0\u7684\u8bdd\uff0c\u6211\u4eec\u5229\u7528\u4e86\u4e00\u4e2a\u6027\u8d28\uff1a\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u4e00\u5b9a\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\n\n\u8fd9\u6837\u6211\u4eec\u5148$accexx(x)$\uff0c\u7136\u540e$splay(x)$\uff0c\u518d\u4e0d\u65ad\u7684\u5f80\u5de6\u8d70\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230$x$\u6240\u5728\u6811\u7684\u6839\u8282\u70b9\u4e86\uff01\n\n\u6ce8\u610f\uff01\u5f80\u5de6\u8d70\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4e0b\u4f20\u6807\u8bb0\uff0c\u5426\u5219\u5728\u67d0\u4e9b\u9898\u76ee\u4e2d\u4f60\u4f1a\u6302\u7684\u5f88\u60e8\uff01\n\n\u4ee3\u7801\n\n```cpp\nint findroot(int x) {//\u627e\u5230x\u5728\u539f\u6811\u4e2d\u7684\u6839\u8282\u70b9 \n    access(x);splay(x);\n    pushdown(x);\n    while(ls(x)) pushdown(x = ls(x));//\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5373\u4e3a\u6839\u8282\u70b9 \n    return x;\n}\n```\n\n### $split(x,y)$\n\n\u83b7\u53d6\u5230$x-y$\u6240\u5bf9\u5e94\u7684\u8def\u5f84\uff0c\n\n\u8fd9\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\u5c31\u975e\u5e38\u663e\u7136\u4e86\n\n\u5b9e\u73b0\u4e5f\u975e\u5e38\u597d\u60f3\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\n\n\u8fd9\u6837\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee$y$\u8282\u70b9\u6765\u83b7\u53d6\u5230\u6709\u5173\u8def\u5f84\u7684\u4fe1\u606f\n\n```cpp\nvoid split(int x, int y) {\n    makeroot(x);//\u9996\u5148\u628ax\u7f6e\u4e3a\u6839\u8282\u70b9 \n    access(y); splay(y);\n    //\u7136\u540e\u8bbf\u95ee\u4e00\u4e0by\uff0c\u518d\u628ay\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u6837y\u7ef4\u62a4\u7684\u5c31\u662fx - y \u8def\u5f84\u4e0a\u7684\u4fe1\u606f \n}\n```\n\n### $link(x,y)$\n\n\u8fde\u63a5$x,y$\n\n\u8fd9\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\u4e5f\u5f88\u663e\u7136\n\n\u9996\u5148\u6211\u4eec\u9700\u8981$makeroot(x)$\uff0c\u7136\u540e$access(y),splay(y)$\uff0c\u6700\u540e\u628a$x$\u7684\u7236\u4eb2\u6307\u5411$y$\u5c31\u53ef\u4ee5\n\n\u6ce8\u610f\u5728\u4e00\u4e9b\u6bd2\u7624\u9898\u4e2d\u4e0d\u4fdd\u8bc1$x,y$\u672a\u8054\u901a\uff0c\u8fd9\u6837\u8fd8\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u8054\u901a\u6027\n\n```cpp\nvoid link(int x, int y) {\n    makeroot(x);//\u628ax\u7f6e\u4e3a\u6839\u8282\u70b9 \n    if(findroot(y) != x ) fa(x) = y;\n    //\u5982\u679cx\u4e0ey\u4e0d\u5728\u540c\u4e00\u4e2asplay\u4e2d\uff0c\u5c31\u628ay\u7f6e\u4e3ax\u7684\u7236\u4eb2 \n    //findroot(y)\u7684\u65f6\u5019\u5df2\u7ecf\u6267\u884c\u4e86access(y),splay(y)\n}\n```\n\n### $cut(x,y)$\n\n\u65ad\u5f00$x-y$\u8fd9\u6761\u8fb9\n\n\u610f\u4e49\u4e5f\u975e\u5e38\u663e\u7136\n\n\u5b9e\u73b0\u7684\u8bdd\u770b\u4e0a\u53bb\u6bd4\u8f83\u5bb9\u6613\n\n\u6211\u4eec\u9700\u8981$split(x,y)$\uff0c\u6b64\u65f6$x$\u7684\u7236\u4eb2\u662f$y$\uff0c$y$\u56e0\u4e3a\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\uff0c\u6240\u4ee5\u5b83\u7684\u5de6\u513f\u5b50\u662f$x$\uff0c\n\n\u7136\u540e\u65ad\u7edd\u7236\u5b50\u5173\u7cfb\u5c31\u597d\u4e86\n\n\u4f46\u662f\uff01\uff01\uff0c\u5982\u679c\u51fa\u9898\u4eba\u4e0d\u4fdd\u8bc1$x-y$\u76f8\u8fde\u5462\uff1f\uff1f\n\n\u5982\u679c\u4ecd\u7136\u8fd9\u6837\u6539\u7684\u8bdd\u6574\u68f5\u6811\u5c31\u4e71\u4e86\n\n\u56e0\u6b64\u6211\u4eec\u8fd8\u8981\u52a0\u4e00\u5768\u5224\u65ad\n\n1. \u9996\u5148$x,y$\u4e00\u5b9a\u8981\u5728\u4e00\u68f5\u6811\u5185\n2. $x$\u7684\u7236\u4eb2\u662f$y$\uff0c\u4e14$y$\u7684\u5de6\u513f\u5b50\u662f$x$\n   \u8fd9\u4e24\u4e2a\u6bd4\u8f83\u663e\u7136\n\n3. $x$\u6ca1\u6709\u53f3\u513f\u5b50\n\n\u8fd9\u4e2a\u53ef\u80fd\u5c31\u4e0d\u662f\u90a3\u4e48\u663e\u7136\u4e86\n\n\u6211\u4eec\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\uff0c$x$\u7684\u53f3\u513f\u5b50\u4ee3\u8868\u7740\u6df1\u5ea6\u6bd4\u4ed6\u5927\u7684\u8282\u70b9\uff0c$y$\u7684\u5de6\u513f\u5b50\u4ee3\u8868\u7740\u6df1\u5ea6\u6bd4\u4ed6\u5c0f\u7684\u8282\u70b9\n\n\u90a3\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\n\n![](https://images2018.cnblogs.com/blog/1309909/201803/1309909-20180311171742813-1632507362.jpg)\n\n\u7136\u540e\u6211\u4eec\u5c31GG\u4e86\uff0c\n\n\u6216\u8005\u4f60\u53ef\u4ee5\u8bd5\u8bd5\u8fd9\u7ec4\u6570\u636e\n\n```cpp\n5 6 1 2 3 4 5\n1 1 2\n1 2 3\n1 3 4\n1 4 5\n2 1 5\n0 1 5\n```\n\n\u56e0\u6b64\u6211\u4eec\u6709\u5fc5\u8981\u52a0\u4e0a\u8fd9\u4e2a\u5224\u65ad\n\n\u4ee3\u7801\uff1a\n\n```cppp\nvoid cut(int x, int y) {\n    makeroot(x);\n    if(findroot(y) == x && fa(x) == y && ls(y) == x && !rs(x)) { \n        fa(x) = T[y].ch[0] = 0;\n        update(y);\n    }\n}\n```\n\n## \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u4ee5\u4e0a\u64cd\u4f5c\u7684\u5e73\u644a\u590d\u6742\u5ea6\u5747\u4e3a$O(log^2N)$\n\n\u5177\u4f53\u7684\u8bc1\u660e\u53ef\u4ee5\u53c2\u8003YangZhe\u7684\u8bba\u6587\n\n## \u5c0f\u7ed3\n\nLCT\u7684\u64cd\u4f5c\u4e5f\u5c31\u662f\u8fd9\u4e48\u591a\u4e86\uff0c\n\n\u4e0d\u8fc7LCT\u6709\u5f88\u591a\u62d3\u5c55\uff0c\u9898\u76ee\u7c7b\u578b\u4e5f\u6709\u5f88\u591a\uff0c\u5927\u90e8\u5206\u6211\u8fd8\u6ca1\u505a\u8fc7\n\n\u7b49\u4ee5\u540e\u6162\u6162\u6574\u7406\u5427\n\n\u6d1b\u8c37\u7684\u677f\u5b50\u9898\u4ee3\u7801\uff1a\n\n\u5176\u4e2d\u7684splay\u548crotate\u90fd\u662f\u6211\u81ea\u5df1yy\u7684\uff0c\u5e76\u4e0d\u662f\u5f88\u4e3b\u6d41\u7684\u5199\u6cd5\uff0c\u4e0d\u8fc7\u8dd1\u7684\u6bd4\u8f83\u5feb\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define swap(x,y) x ^= y, y ^= x, x ^= y\nconst int MAXN=3 * 1e5 + 10;\ninline int read()\n{\n    char c = getchar();int x = 0,f = 1;\n    while(c < '0' || c > '9'){if(c == '-')f = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){x = x * 10 + c - '0',c = getchar();}\n    return x * f;\n}\n#define fa(x) T[x].f\n#define ls(x) T[x].ch[0]\n#define rs(x) T[x].ch[1]\nint v[MAXN];\nstruct node {\n    int f, ch[2], s;\n    bool r;\n}T[MAXN];\nint ident(int x) {\n    return T[fa(x)].ch[0] == x ? 0 : 1;//\u5224\u65ad\u8be5\u8282\u70b9\u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u513f\u5b50 \n}\nint connect(int x,int fa,int how) {\n    T[x].f=fa;\n    T[fa].ch[how]=x;//\u8fde\u63a5 \n}\ninline bool IsRoot(int x) {//\u82e5\u4e3asplay\u4e2d\u7684\u6839\u5219\u8fd4\u56de1 \u5426\u5219\u8fd4\u56de0 \n    return ls( fa(x) ) != x && rs( fa(x) ) != x;\n    //\u7528\u5230\u4e86\u4e24\u4e2a\u6027\u8d28\n    //1.\u82e5x\u4e0efa(x)\u4e4b\u95f4\u7684\u8fb9\u662f\u865a\u8fb9\uff0c\u90a3\u4e48\u5b83\u7684\u7236\u4eb2\u7684\u5b69\u5b50\u4e2d\u4e0d\u4f1a\u6709\u4ed6\uff08\u4e0d\u5728\u540c\u4e00\u4e2asplay\u5185\uff09\n    //2. splay\u7684\u6839\u8282\u70b9\u4e0e\u5176\u7236\u4eb2\u4e4b\u95f4\u7684\u8fb9\u662f\u865a\u8fb9 \n}\nvoid update(int x) {\n    T[x].s = T[ls(x)].s ^ T[rs(x)].s ^ v[x];//\u7ef4\u62a4\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c \n}\nvoid pushdown(int x) {\n    if(T[x].r) {\n        swap(ls(x),rs(x));\n        T[ls(x)].r ^= 1;\n        T[rs(x)].r ^= 1;\n        T[x].r = 0;//\u6807\u8bb0\u4e0b\u4f20 \n    }\n}\nvoid rotate(int x) {\n    int Y = T[x].f, R = T[Y].f, Yson = ident(x), Rson = ident(Y);\n    int B = T[x].ch[Yson ^ 1];\n    T[x].f = R;\n    if(!IsRoot(Y))\n        connect(x, R, Rson);\n    //\u8fd9\u91cc\u5982\u679c\u4e0d\u5224\u65ady\u662f\u5426\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5f53y\u662f\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c0\u8282\u70b9\u7684\u513f\u5b50\u5c31\u4f1a\u88ab\u66f4\u65b0\u4e3ax\n    //\u8fd9\u6837x\u5c31\u6c38\u8fdc\u4e0d\u80fd\u88ab\u5224\u65ad\u4e3a\u6839\u8282\u70b9\uff0c\u4e5f\u5c31\u4f1a\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\u4e86\n    //\u4f46\u662f\u8fd9\u91cc\u4e0d\u66f4\u65b0x\u7684\u7236\u4eb2\u7684\u8bdd\u5c31\u4f1a\u51fa\u73b0\u65e0\u9650\u9012\u5f52\u7684\u60c5\u51b5 \n    connect(B, Y, Yson);\n    connect(Y, x, Yson ^ 1);\n    update(Y); update(x);\n}\nint st[MAXN];\nvoid splay(int x) {\n    int y = x, top = 0;\n    st[++top] = y;\n    while(!IsRoot(y)) st[++top] = y = fa(y);\n    //\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4\u6240\u6709\u7684\u6807\u8bb0\n    while(top) pushdown(st[top--]);\n    //\u56e0\u4e3a\u5728\u65cb\u8f6c\u7684\u65f6\u5019\u4e0d\u4f1a\u5904\u7406\u6807\u8bb0\uff0c\u6240\u4ee5splay\u4e4b\u524d\u5e94\u8be5\u4e0b\u4f20\u6240\u6709\u6807\u8bb0 \n    for(int y = fa(x); !IsRoot(x); rotate(x), y = fa(x))//\u53ea\u8981\u4e0d\u662f\u6839\u5c31\u8f6c \n        if(!IsRoot(y)) \n            rotate( ident(x) == ident(y) ? x : y );\n}\nvoid access(int x) {//\u8bbf\u95eex\u8282\u70b9 \n    for(int y = 0; x; x = fa(y = x))\n        splay(x), rs(x) = y, update(x);\n}\nvoid makeroot(int x) {//\u628ax\u6539\u4e3a\u539f\u6811\u7684\u6839\u8282\u70b9 \n    access(x);\n    splay(x);\n    T[x].r ^= 1;\n    pushdown(x);\n}\nint findroot(int x) {//\u627e\u5230x\u5728\u539f\u6811\u4e2d\u7684\u6839\u8282\u70b9 \n    access(x);splay(x);\n    pushdown(x);\n    while(ls(x)) pushdown(x = ls(x));//\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5373\u4e3a\u6839\u8282\u70b9 \n    return x;\n}\nvoid split(int x, int y) {\n    makeroot(x);//\u9996\u5148\u628ax\u7f6e\u4e3a\u6839\u8282\u70b9 \n    access(y); splay(y);\n}\nvoid link(int x, int y) {\n    makeroot(x);//\u628ax\u7f6e\u4e3a\u6839\u8282\u70b9 \n    if(findroot(y) != x ) fa(x) = y;\n}\nvoid cut(int x, int y) {\n    makeroot(x);\n    if(findroot(y) == x && fa(x) == y && ls(y) == x && !rs(x)) { \n        fa(x) = T[y].ch[0] = 0;\n        update(y);\n    }\n}\nint main()\n{\n    #ifdef WIN32\n    freopen(\"a.in\",\"r\",stdin);\n    //freopen(\"a.out\",\"w\",stdout);\n    #else\n    #endif\n    int N = read(), M = read();\n    for(int i = 1; i <= N; i++) v[i] = read();\n    for(int i = 1; i <= M; i++) {\n        int opt = read(), x = read(), y = read();\n        if(opt == 0) split(x, y), printf(\"%d\\n\",T[y].s);\n        else if(opt == 1) link(x, y);\n        else if(opt == 2) cut(x, y);\n        else if(opt == 3) splay(x), v[x] = y;\n    }\n    return 0;\n}\n```\n\n## \u53c2\u8003\u8d44\u6599\n\n[FlashHu\u7684\u535a\u5ba2](http://www.cnblogs.com/flashhu/)\n\n[YangZhe-QTREE\u89e3\u6cd5\u7684\u4e00\u4e9b\u7814\u7a76](https://wenku.baidu.com/view/75906f160b4e767f5acfcedb)\n\n\u300a\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u300b-\u6797\u539a\u4ece\n\n",
        "postTime": 1525156661,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "> P3690 \u52a8\u6001\u6811\u6a21\u677f\n\n> \u6709 $n$ \u4e2a\u70b9\uff0c\u6709\u70b9\u6743\u3002\u521d\u59cb\u6ca1\u6709\u8fb9\uff0c\u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c\uff1a\n\n> - \u8be2\u95ee\u8def\u5f84\u6743\u503c\u5f02\u6216\n> - \u5728\u4e24\u70b9\u95f4\u8fde\u8fb9\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u5219\u4e0d\u8fde\n> - \u5220\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\u8fb9\u5219\u4e0d\u5220\n> - \u6539\u53d8\u4e00\u4e2a\u70b9\u7684\u6743\u503c\n\n> $1 \\leq n \\leq 10^5$\uff0c$1 \\leq m \\leq 3 \\times 10^5$\n\n\u52a8\u6001\u6811\uff0c\u53c8\u79f0 LCT\uff0c\u5168\u79f0 Link-Cut-Tree\n\n\u524d\u829d\u77e5\u8bc6\uff1a\n\n1. Splay\n2. \u91cd\u94fe\u5256\u5206\n3. \u5e76\u67e5\u96c6\n\n## LCT \u80fd\u5e72\u5417\uff1f\n\nLCT \u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6709\u6839\u6811\u68ee\u6797\uff0c\u652f\u6301\u5bf9\u6811\u7684\u5206\u5272\uff08cut\uff09\uff0c\u5408\u5e76\uff08link\uff09\u7b49\u64cd\u4f5c\u7684\u95ee\u9898\u3002\n\n\u901a\u4fd7\u5730\u6765\u8bb2\uff1a\u5b83\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n- \u67e5\u8be2\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff08\u5982\u548c\u3001\u5f02\u6216\u548c\u7b49\uff09\n- \u8fde\u8fb9\n- \u5220\u8fb9\n- \u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u6027\n\n## LCT \u600e\u4e48\u5b9e\u73b0\uff1f\n\n\u9996\u5148\uff0c\u5b66\u8fc7\u91cd\u94fe\u5256\u5206\u7684\u5e94\u8be5\u77e5\u9053\uff0c\u94fe\u5256\u5206\u5206\u4e3a\u4e09\u7c7b\uff1a\u91cd\u94fe\u5256\u5206\u3001\u5b9e\u94fe\u5256\u5206\u548c\u957f\u94fe\u5256\u5206\u3002\u5b83\u4eec\u7684\u5171\u540c\u601d\u60f3\u662f\u628a\u4e00\u68f5\u6811\u5212\u5206\u6210\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u94fe\uff0c\u6ee1\u8db3\n\n1. \u6bcf\u4e00\u4e2a\u70b9\u6070\u597d\u5c5e\u4e8e\u4e00\u6761\u94fe\n2. \u5728\u540c\u4e00\u6761\u94fe\u4e2d\u4e0d\u5b58\u5728\u6df1\u5ea6\u76f8\u540c\u7684\u70b9\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u8f6c\u5316\u4e3a\u82e5\u5e72\u6761\u94fe\u4e0a\u7684\u533a\u95f4\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\n\n\u5173\u4e8e\u91cd\u94fe\u5256\u5206\uff0c\u5b9e\u9645\u4e0a\u662f\u6839\u636e\u5b50\u6811\u7684\u5927\u5c0f\u5c06\u6bcf\u6761\u8fb9\u5212\u5206\u4e3a\u201c\u91cd\u8fb9\u201d\u548c\u201c\u8f7b\u8fb9\u201d\uff0c\u8fdb\u800c\u5b9e\u73b0\u94fe\u5256\u5206\u7684\u3002\n\n\u5173\u4e8e\u957f\u94fe\u5256\u5206\uff0c\u7531\u4e8e\u6ca1\u5b66\u8fc7\uff0c\u6211\u4eec\u4e5f\u4e0d\u6562\u4e71\u8bf4\u3002\n\n\u5173\u4e8e\u5b9e\u94fe\u5256\u5206\uff0c\u5b9e\u9645\u4e0a\u662f\u628a\u6bcf\u6761\u8fb9\u5212\u5206\u4e3a\u201c\u5b9e\u8fb9\u201d\u548c\u201c\u865a\u8fb9\u201d\u3002\u5373\u4f60\u53ef\u4ee5\u6307\u5b9a\u6bcf\u4e2a\u70b9\u4e00\u4e2a\u201c\u5b9e\u513f\u5b50\u201d\uff0c\u5176\u5b83\u513f\u5b50\u4e3a\u201c\u865a\u513f\u5b50\u201d\uff0c\u5982\u679c\u5c06\u6bcf\u4e2a\u70b9\u4e0e\u5b83\u7684\u5b9e\u513f\u5b50\u8fde\u8d77\u6765\u5c31\u53ef\u4ee5\u5f62\u6210\u5b9e\u8fb9\uff0c\u9664\u5b9e\u8fb9\u4e4b\u5916\u7684\u8fb9\u662f\u865a\u8fb9\uff0c\u5c06\u5b9e\u8fb9\u8fde\u8d77\u6765\u53ef\u4ee5\u5f97\u5230\u82e5\u5e72\u6761\u5b9e\u94fe\u3002\n\n\u533a\u522b\u4e8e\u91cd\u94fe\u5256\u5206\u7684\u662f\u6bcf\u6761\u8fb9\u7684\u865a\u5b9e\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\uff0c\u800c\u91cd\u94fe\u5256\u5206\uff0c\u4e00\u65e6\u9047\u5230\u6811\u7684\u5f62\u6001\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u5f7b\u5e95\u840e\u4e86\u3002\n\n\u662f\u4e0d\u662f\u542c\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff1f\u4e0d\u8fc7\uff0c\u5b9e\u94fe\u5256\u5206\u6700\u574f\u60c5\u51b5\u4e0b\u8fd8\u662f $\\mathcal O(n)$ \u7684\uff0c\u8fd9\u6837\u7b97\u4e0a\u67e5\u8be2\u590d\u6742\u5ea6\uff0c\u5c31\u4f1a\u53d8\u6210 $\\mathcal O(n^2)$\uff01\uff01\uff01\n\n\u4e0d\u8fc7\uff0c\u5982\u679c\u7528\u5f3a\u5927\u7684 $\\texttt{splay}$ \u7ef4\u62a4\u5b9e\u94fe\u5256\u5206\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5747\u644a $\\mathcal O(logn)$ \u7684 LCT\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b9e\u94fe\uff0c\u5efa\u4e00\u68f5 $\\texttt{splay}$ \u91cc\u9762\u5305\u542b\u6240\u6709\u8fd9\u6761\u94fe\u91cc\u7684\u8282\u70b9\u3002\u8fd9\u9897 $\\texttt{splay}$ \u7684\u4e2d\u5e8f\u904d\u5386\u6070\u597d\u6309\u7167\u8fd9\u4e2a\u94fe\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u6392\u5e8f\u3002\u5373\u94fe\u9876\uff08\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff09\u4f4d\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4f4d\uff0c\u94fe\u5e95\uff08\u6df1\u5ea6\u6700\u5927\u7684\u70b9\uff09\u4f4d\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4f4d\u3002\n\n\u5f53\u7136\uff0c\u7531\u4e8e\u8fd9\u68f5\u6811\u7684\u5b8c\u6574\u6027\uff0c\u6211\u4eec\u53ea\u9700\u5efa\u51fa\u4e00\u68f5 $\\texttt{splay}$ \u51fa\u6765\uff0c\u5177\u4f53\u89c1\u4e0b\u65b9\u8bf4\u660e\u3002\n\n\u4f8b\u5982\u6709\u4e00\u68f5\u6811\u5982\u4e0b\u56fe\uff0c\u6839\u4e3a $1$\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/b27e3vhn.png)\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5b83\u5206\u6210\u5982\u4e0b\u7684\u94fe\uff1a\uff08\u7eff\u8272\u8868\u793a\u5b9e\u8fb9\uff0c\u7ea2\u8272\u8868\u793a\u865a\u8fb9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/to8yymmx.png)\n\n\u8fd9\u68f5\u6811\u4e2d $6$ \u6761\u94fe\u5206\u522b\u662f\n\n- $\\{1,2\\}$\n\n- $\\{3,6,8\\}$\n\n- $\\{4\\}$\n\n- $\\{5\\}$\n\n- $\\{7,9\\}$\n\n- $\\{10\\}$\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u8fd9\u6837\u5efa $\\texttt{splay}$\u3002\n\n\u4ee5\u8def\u5f84 $\\{3,6,8\\}$ \u4e3a\u4f8b\uff0c\u8282\u70b9 $3$ \u8ba4\u4e00\u4e2a\u7236\u4eb2 $1$\uff0c\u4f46\u662f $1$ \u5374\u4e0d\u8ba4\u8fd9\u4e2a\u513f\u5b50\u3002\u4ed6\u53ea\u6709\u4e00\u4e2a\u513f\u5b50 $2$\u3002\u5f53\u7136\uff0c$2$ \u4e5f\u8ba4\u8fd9\u4e2a\u7236\u4eb2\u3002\n\n\u4ece\u6b64\u6211\u4eec\u53ef\u4ee5\u770b\u51fa**\u865a\u8fb9\u53ea\u6709\u513f\u5b50\u8ba4\u7236\u4eb2\uff0c\u7236\u4eb2\u4e0d\u8ba4\u513f\u5b50\u3002\u800c\u5b9e\u8fb9\u513f\u5b50\u8ba4\u7236\u4eb2\uff0c\u7236\u4eb2\u4e5f\u8ba4\u513f\u5b50\u3002**\n\n\u4e0a\u8ff0\u56fe\u5efa\u6210 $\\texttt{splay}$ \u5c31\u662f\u4e0b\u56fe\uff08\u4e00\u4e2a\u624b\u6ed1\u6d82\u53cd\u4e86\uff0c\u7eff\u8272\u8868\u793a\u865a\u8fb9\uff0c\u7ea2\u8272\u8868\u793a\u5b9e\u8fb9\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tebepivc.png)\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff1a**\u4e00\u68f5\u5b9e\u5b50\u6811\u8868\u793a\u4e00\u6761\u94fe\u4e0a\u7684\u4fe1\u606f**\u3002\u4f8b\u5982 $6$ \u7684\u5b9e\u5b50\u6811\u5c31\u8868\u793a\u4e86 $3 \\leftrightarrow 6 \\leftrightarrow 8$ \u8fd9\u6761\u94fe\u4e0a\u7684\u4fe1\u606f\u3002\n\n\u5f53\u7136\uff0c\u9664\u4e86\u5b9e\u5b50\u6811\u8fd8\u6709\u865a\u5b50\u6811\u3002\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $\\texttt{splay}$ \u4e2d\u4e00\u4e2a\u8282\u70b9 $x$ \u7684\u5b50\u6811\uff08\u4e0d\u8bba\u865a\u5b9e\uff09\u5305\u542b\u4e86\u4e09\u4e2a\u90e8\u5206\uff1a\n\n- \u5de6\u5b50\u6811\uff0c\u5728\u539f\u6811\u4e2d\u662f $x$ \u7684\u7236\u4eb2\u53ca\u5176\u7956\u5148\u3002\n\n- \u53f3\u5b50\u6811\uff0c\u5728\u539f\u6811\u4e2d\u662f $x$ \u6240\u5728\u7684\u94fe\u4e2d\uff0c$x$ \u4e0b\u65b9\u7684\u8282\u70b9\n\n- \u865a\u5b50\u6811\uff0c\u5305\u542b\u4e86 $x$ \u7684\u865a\u513f\u5b50\u53ca\u5176\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u3002\n\n\u638c\u63e1\u4e86 $\\texttt{splay}$ \u7684\u6784\u9020\uff0c\u5c31\u8981\u8bb2\u8bb2 LCT \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\u9996\u5148\u662f\u8282\u70b9\u4fe1\u606f\u4e0e $pushup$\uff0c\u5b66\u8fc7 $\\texttt{splay}$ \u7684\u5e94\u8be5\u90fd\u4e0d\u662f\u592a\u96be\u7406\u89e3\uff1a\n\n```cpp\nstruct node{\n\tint f,ls,rs,val,sum;\n} s[100005];\ninline void pushup(int k){\n\ts[k].sum=s[s[k].ls].sum^s[s[k].rs].sum^s[k].val;//\u7ef4\u62a4\u5b50\u6811\u5f02\u6216\u548c\n}\n```\n\n$f$ \u8868\u793a\u8282\u70b9 $i$ \u7684\u7236\u4eb2\uff0c$ls,rs$ \u8868\u793a\u5de6\u53f3\u513f\u5b50\uff0c$val$ \u8868\u793a\u8282\u70b9\u4e0a\u7684\u503c\uff0c$sum$ \u8868\u793a\u5f02\u6216\u548c\u3002\n\n\u63a5\u4e0b\u6765\u662f $identify$ \u4e0e $connect$\uff0c$identify(x)$ \u8868\u793a $x$ \u662f $x$ \u7684\u7236\u4eb2\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u3002\u4e0e\u666e\u901a\u7684 $\\texttt{splay}$ \u4e0d\u540c\u7684\u4e00\u70b9\u662f\u5982\u679c $x$ \u662f\u5f53\u524d\u6240\u5728 $\\texttt{splay}$ \u7684\u6839\u90a3\u4e48\u8fd4\u56de $-1$\u3002\n\n```cpp\ninline int identify(int k){\n\tif(s[s[k].f].ls==k)\treturn 0;\n\tif(s[s[k].f].rs==k)\treturn 1;\n\treturn -1;\n}\ninline void connect(int k,int f,int op){\n\ts[k].f=f;\n\tif(op==1)\ts[f].rs=k;\n\tif(op==0)\ts[f].ls=k;\n}\n```\n\n$rotate$ \u4e0e $splay$ \u51fd\u6570\uff0c\u4e5f\u6709\u4e9b\u4e0d\u540c\uff1a\n\n```cpp\ninline void rotate(int x){\n\tint y=s[x].f;\n\tint z=s[y].f;\n\tint opy=identify(y);\n\tint opx=identify(x);\n\tint u=0;\n\tif(opx==1)\t\tu=s[x].ls;\n\tif(opx==0)\t\tu=s[x].rs;\n\tconnect(u,y,opx);\n\tconnect(y,x,opx^1);\n\tconnect(x,z,opy);\n\tpushup(y);\n\tpushup(x);\n}\ninline void splay(int k){\n\twhile(identify(k)!=-1){\n\t\tregister int up=s[k].f;\n\t\tif(identify(up)==-1)\t\t\t\trotate(k);\n\t\telse if(identify(k)==identify(up))\trotate(up),rotate(k);\n\t\telse\t\t\t\t\t\t\t\trotate(k),rotate(k);\n\t}\n}\n```\n\n\u5e38\u89c4\u64cd\u4f5c\u8bb2\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u662f LCT \u7684\u91cd\u5934\u620f\uff1a\n\n$access(x)$\uff1a\u6253\u901a $x$ \u5230\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\uff08\u6ce8\u610f\uff1a\u4e0d\u662f $x$ \u6240\u5728\u7684 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff09\u7684\u8def\u5f84\u5e76\u628a\u5b83\u4eec\u6253\u5305\u6210\u4e00\u4e2a $\\texttt{splay}$\uff0c\u5e76\u81ea\u52a8\u628a\u5176\u4ed6\u8fb9\u8bbe\u4e3a\u865a\u8fb9\u3002\n\n\u4f8b\u5982\u5982\u679c\u6211\u4eec\u60f3\u6253\u901a $10$ \u5230\u6839\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aako07vc.png)\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u60f3\u5230\u4e86 $\\texttt{splay}$ \u7684\u57fa\u7840\u64cd\u4f5c $splay$\uff0c\u5c06\u4e00\u4e2a\u70b9\u8f6c\u5230\u4ed6\u6240\u5728\u7684 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff08\u4e0d\u8981\u641e\u6df7\u6dc6\uff0c\u662f**\u6240\u5728 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9**\uff0c\u8ddf\u4e4b\u524d\u90a3\u4e2a\u4e0d\u540c\uff09\n\n\u6211\u4eec\u4ece\u4e0b\u5f80\u4e0a\u8df3\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f $9 \\rightarrow 7 \\rightarrow 6 \\rightarrow 3 \\rightarrow 1$\uff09\uff0c\u6211\u4eec\u5148\u628a $9$ \u65cb\u8f6c\u5230\u6240\u5728 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u628a\u5b83\u7684\u53f3\u513f\u5b50\u8bbe\u4e3a $0$\u3002\u7531\u4e8e\u6211\u4eec\u628a $9$ \u5230\u6839\u6253\u5305\u6210\u4e00\u4e2a $\\texttt{splay}$\uff0c\u6240\u4ee5\u539f\u6765 $9$ \u7684\u5b9e\u513f\u5b50\u5c31\u53d8\u6210\u4e86\u865a\u513f\u5b50\u3002\n\n\u540c\u7406\uff0c\u628a $7$ \u65cb\u8f6c\u5230\u5b83\u6240\u5728\u7684 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5b83\u7684\u53f3\u513f\u5b50\u8bbe\u4e3a\u4e0b\u4e00\u5c42\u8282\u70b9 $9$\u3002\u540c\u7406\uff0c\u628a $6$ \u65cb\u8f6c\u5230\u5b83\u6240\u5728\u7684 $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5b83\u7684\u53f3\u513f\u5b50\u8bbe\u4e3a\u4e0b\u4e00\u5c42\u8282\u70b9 $7$\u3002\u4ee5\u6b64\u7c7b\u63a8\u5c31\u884c\u4e86\u3002\n\n\u7b80\u5355\u6765\u8bf4\u53ea\u6709\u4ee5\u4e0b\u51e0\u6b65\uff1a\n\n1. \u8f6c\u5230 $\\texttt{splay}$ \u6839\u8282\u70b9\n2. \u6539\u53d8\u53f3\u513f\u5b50\u7684\u503c\uff0c\u6362\u4e3a\u4e0b\u4e00\u5c42\u8282\u70b9\n3. \u66f4\u65b0\u4fe1\u606f\n4. \u5f80\u4e0a\u8df3\n\n\u4ee3\u7801\uff1a\n```cpp\ninline void access(int k){\n\tint l=0;\n\twhile(k){\n\t\tsplay(k);\n\t\ts[k].rs=l;\n\t\tpushup(k);\n\t\tl=k;\n\t\tk=s[k].f;\n\t}\n}\n```\n\n\u6709\u4e86\u5f3a\u5927\u7684 $access$ \u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u5f15\u7533\u51fa\u8bb8\u591a\u5176\u5b83\u7c7b\u578b\u7684\u64cd\u4f5c\u4e86\uff1a\n\n$makeroot(x)$\uff1a\u5c06 $x$ \u53f7\u8282\u70b9\u8bbe\u4e3a\u6240\u5728\u8054\u901a\u5757\u7684\u6839\u3002\n\n\u9996\u5148\u6253\u901a $x$ \u5230\u5f53\u524d\u6240\u5728\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u6b64\u65f6 $x$ \u4e00\u5b9a\u662f\u8fd9\u4e2a $\\texttt{splay}$ \u4e2d\u6df1\u5ea6\u6700\u5927\u7684\uff0c\u4f4d\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4f4d\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u6211\u4eec\u628a\u5b83\u8bbe\u4e3a\u6839\u8282\u70b9\uff08\u6df1\u5ea6\u4e3a $0$\uff09\uff0c\u6240\u4ee5\u5b83\u5c31\u53d8\u4e3a\u4e86\u8fd9\u4e2a $\\texttt{splay}$ \u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\n\n\u540c\u7406\uff0c\u539f\u672c $x$ \u53f7\u8282\u70b9\u7684\u7236\u4eb2\u5e94\u8be5\u662f $\\texttt{splay}$ \u4e2d\u6df1\u5ea6\u7b2c\u4e8c\u5927\u7684\u8282\u70b9\uff0c\u5373\u6392\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u5012\u6570\u7b2c\u4e8c\u4f4d\u3002\u73b0\u5728\u7ecf\u4f60\u8fd9\u4e48\u4e00 $makeroot$\uff0c\u53d8\u6210\u4e86 $x$ \u7684\u513f\u5b50\uff0c\u6df1\u5ea6\u4e3a $1$\uff0c\u5904\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u7b2c\u4e8c\u4f4d\u3002\n\n\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\u7ffb\u8f6c\u3002\u7ef4\u62a4\u7ffb\u8f6c\u7684\u61d2\u6807\u8bb0\uff0c\u8bb0\u4e3a $lz$\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u6253\u901a $x$ \u5230\u6839\u7684\u8def\u5f84\uff0c\u628a $x$ \u8f6c\u5230\u6839\u8282\u70b9\uff0c\u7ed9 $x$ \u6253\u6807\u8bb0\u3002\n\n```cpp\nstruct node{\n\tint f,ls,rs,val,sum,lz;\n} s[100005];\ninline void pushdown(int k){\n\tif(s[k].lz){\n\t\tswap(s[k].ls,s[k].rs);\n\t\tif(s[k].ls)\ts[s[k].ls].lz^=1;\n\t\tif(s[k].rs)\ts[s[k].rs].lz^=1;\n\t\ts[k].lz=0;\n\t}\n}\ninline void makeroot(int k){\n\taccess(k);\n\tsplay(k);\n\tswap(s[k].ls,s[k].rs);//\u6253\u6807\u8bb0\n\tif(s[k].ls)\ts[s[k].ls].lz^=1;\n\tif(s[k].rs)\ts[s[k].rs].lz^=1;\n}\n```\n\n\u53e6\u5916\uff0c\u5728\u5c06\u4e00\u4e2a\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06\u6839\u5230 $x$ \u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u4f9d\u6b21 $pushdown$\uff0c\u5373\u4e0b\u9762\u7684 $pushall$ \u51fd\u6570\uff1a\n\n```cpp\ninline void pushall(int x){\n\tif(identify(x)!=-1)\tpushall(s[x].f);\n\tpushdown(x);\n}\n```\n\n\u5e76\u5728 $splay$ \u51fd\u6570\u7b2c\u4e00\u884c\u52a0\u4e0a\n\n```cpp\npushall(k);\n```\n\n$split(x,y)$\uff1a\u628a $x - y$ \u7684\u8def\u5f84\u62c9\u6210\u4e00\u4e2a $\\texttt{splay}$\u3002\n\n\u6709\u4e86 $makeroot$ \u548c $access$\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u663e\u5f97\u8f7b\u800c\u6613\u4e3e\u4e86\u3002\u5206\u522b\u6267\u884c $makeroot(x)$\uff0c$access(y)$\uff0c$splay(y)$ \u4e09\u6b65\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\u3002\n\n```cpp\ninline void split(int x,int y){\n\tmakeroot(x);\n\taccess(y);splay(y);\n}\n```\n\n$findroot(x)$\uff1a\u67e5\u627e $x$ \u6240\u5728\u8054\u901a\u5757\u7684\u6839\n\n\u5148\u6253\u901a $x$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u5e76\u628a $x$ \u65cb\u5230 $\\texttt{splay}$ \u7684\u6839\uff0c\u7531\u4e8e\u6839\u8282\u70b9\u662f\u8fd9\u4e2a $\\texttt{splay}$ \u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4e0d\u505c\u7684\u5f80\u5b83\u7684\u5de6\u513f\u5b50\u65b9\u5411\u8df3\u3002\u6ce8\u610f\u6bcf\u8df3\u4e00\u6b65\u5c31 $pushdown$\u3002\n\n```cpp\ninline int findroot(int k){\n\taccess(k);\n\tsplay(k);\n\twhile(s[k].ls)\tpushdown(k),k=s[k].ls;\n\tsplay(k);\n\treturn k;\n}\n```\n\n$link(x,y)$\uff1a\u5728 $x$ \u4e0e $y$ \u4e4b\u95f4\u8fde\u8fb9\n\n\u7c7b\u4f3c\u5e76\u67e5\u96c6\uff0c\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u8054\u901a\u5757\u3002\u5982\u679c\u4e0d\u5728\uff0c\u5c31\u6307\u5b9a\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u4e3a\u53e6\u4e00\u4e2a\u70b9\uff0c\u5373\u8fde\u4e00\u6761\u865a\u8fb9\u3002\n\n```cpp\ninline void link(int x,int y){\n\tmakeroot(x);\n\tif(findroot(y)==x)\treturn;\n\ts[x].f=y;\n}\n```\n\n$cut(x,y)$\uff1a\u5c06 $(x,y)$ \u8fb9\u65ad\u5f00\n\n\u8fd9\u5e94\u8be5\u662f\u6bd4\u8f83\u96be\u7406\u89e3\u7684\u64cd\u4f5c\u4e86\u3002\n\n\u9996\u5148\uff0c\u9700\u8981\u5224\u65ad $x,y$ \u662f\u5426\u5728\u4e00\u4e2a\u8054\u901a\u5757\u3002\u5982\u679c $findroot(x) \\neq findroot(y)$\uff0c\u90a3\u4e48\u76f4\u63a5\u8df3\u51fa\u53bb\u3002\n\n\u5426\u5219\uff0c\u5148\u628a $x-y$ \u62c9\u6210\u4e00\u4e2a $\\texttt{splay}$\u3002\u7531\u4e8e\u5728 $split$ \u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u6307\u5b9a $x$ \u4e3a\u8054\u901a\u5757\u7684\u6839\uff0c$y$ \u4e3a $\\texttt{splay}$ \u7684\u6839\uff0c\u56e0\u6b64 $x,y$ \u4e4b\u95f4\u6709\u8fb9\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u6df1\u5ea6\u5dee\u4e3a $1$\uff0c\u5373\u5728 $\\texttt{splay}$ \u7684\u4e2d\u5e8f\u904d\u5386\u4e2d\u76f8\u90bb\u3002\u8fd9\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n1. $x$ \u7684\u7236\u4eb2\u4e3a $y$\uff0c\u56e0\u4e3a\u4e00\u5b9a\u662f\u5148\u8bbf\u95ee $y$ \u7684\u5de6\u513f\u5b50\u7d27\u63a5\u7740\u8bbf\u95ee $y$\u3002\n2. $x$ \u4e0d\u80fd\u6709\u53f3\u5b50\u6811\u3002\u4e0d\u7136\u8bbf\u95ee\u5b8c $x$ \u4e4b\u540e\u4e00\u5b9a\u4f1a\u8bbf\u95ee $x$ \u7684\u53f3\u5b50\u6811\u3002\n\n```cpp\ninline bool cut(int x,int y){\n\tif(findroot(x)!=findroot(y))\treturn 0;\n\tsplit(x,y);\n\tif(s[x].f!=y||s[x].rs)\t\treturn 0;\n\ts[x].f=s[y].ls=0;\n\tpushup(x);\n\treturn 1;\n}\n```\n\n\u67e5\u8be2\u64cd\u4f5c\uff1a\u9996\u5148\u628a $x-y$ \u62c9\u6210\u4e00\u4e2a $\\texttt{splay}$\uff0c\u7531\u4e8e LCT \u4e2d\u4e00\u4e2a $\\texttt{splay}$ \u7684\u5b50\u6811\u7ef4\u62a4\u4e00\u6761\u94fe\u4e0a\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8fd4\u56de\u8fd9\u4e2a $\\texttt{splay}$ \u7684\u6839\u8282\u70b9\uff0c\u5373 $y$ \u53f7\u8282\u70b9\u7684 $sum$ \u503c\u5c31\u662f\u7ed3\u679c\u3002\n\n\u6a21\u677f\u9898\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi\t\t\tfirst\n#define se\t\t\tsecond\n#define fz(i,a,b)\tfor(int i=a;i<=b;i++)\n#define fd(i,a,b)\tfor(int i=a;i>=b;i--)\n#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define all(a)\t\ta.begin(),a.end()\n#define giveup(...) return printf(__VA_ARGS__),0;\n#define fill0(a)\tmemset(a,0,sizeof(a))\n#define fill1(a)\tmemset(a,-1,sizeof(a))\n#define fillbig(a)\tmemset(a,0x3f,sizeof(a))\n#define fillsmall(a) memset(a,0xcf,sizeof(a))\n#define mask(a)\t\t(1ll<<(a))\n#define maskx(a,x)\t((a)<<(x))\n#define _bit(a,x)\t(((a)>>(x))&1)\n#define _sz(a)\t\t((int)(a).size())\n#define filei(a)\tfreopen(a,\"r\",stdin);\n#define fileo(a)\tfreopen(a,\"w\",stdout);\n#define fileio(a) \tfreopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#define put(x)\t\tputchar(x)\n#define eoln        put('\\n')\n#define space\t\tput(' ')\n#define y1\t\t\ty_chenxiaoyan_1\n#define y0\t\t\ty_chenxiaoyan_0\ntypedef pair<int,int> pii;\ninline int read(){\n\tint x=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-')\tneg=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\tx=x*10+c-'0',c=getchar();\n\treturn x*neg;\n}\ninline void print(int x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tprint(abs(x));\n\t\treturn;\n\t}\n\tif(x<=9)\tputchar(x+'0');\n\telse{\n\t\tprint(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\ninline int qpow(int x,int e,int _MOD){\n\tint ans=1;\n\twhile(e){\n\t\tif(e&1)\tans=ans*x%_MOD;\n\t\tx=x*x%_MOD;\n\t\te>>=1;\n\t}\n\treturn ans;\n}\nstruct LCT{\n\tstruct node{\n\t\tint f,ls,rs,val,sum,lz;\n\t} s[100005];\n\tinline void pushup(int k){\n\t\ts[k].sum=s[s[k].ls].sum^s[s[k].rs].sum^s[k].val;\n\t}\n\tinline void pushdown(int k){\n\t\tif(s[k].lz){\n\t\t\tswap(s[k].ls,s[k].rs);\n\t\t\tif(s[k].ls)\ts[s[k].ls].lz^=1;\n\t\t\tif(s[k].rs)\ts[s[k].rs].lz^=1;\n\t\t\ts[k].lz=0;\n\t\t}\n\t}\n\tinline int identify(int k){\n\t\tif(s[s[k].f].ls==k)\treturn 0;\n\t\tif(s[s[k].f].rs==k)\treturn 1;\n\t\treturn -1;\n\t}\n\tinline void connect(int k,int f,int op){\n\t\ts[k].f=f;\n\t\tif(op==1)\ts[f].rs=k;\n\t\tif(op==0)\ts[f].ls=k;\n\t}\n\tinline void rotate(int x){\n\t\tint y=s[x].f;\n\t\tint z=s[y].f;\n\t\tint opy=identify(y);\n\t\tint opx=identify(x);\n\t\tint u=0;\n\t\tif(opx==1)\t\tu=s[x].ls;\n\t\tif(opx==0)\t\tu=s[x].rs;\n\t\tconnect(u,y,opx);\n\t\tconnect(y,x,opx^1);\n\t\tconnect(x,z,opy);\n\t\tpushup(y);\n\t\tpushup(x);\n\t}\n\tinline void pushall(int x){\n\t\tif(identify(x)!=-1)\tpushall(s[x].f);\n\t\tpushdown(x);\n\t}\n\tinline void splay(int k){\n\t\tpushall(k);\n\t\twhile(identify(k)!=-1){\n\t\t\tregister int up=s[k].f;\n//\t\t\tcout<<k<<\" \"<<up<<endl;\n\t\t\tif(identify(up)==-1)\t\t\t\trotate(k);\n\t\t\telse if(identify(k)==identify(up))\trotate(up),rotate(k);\n\t\t\telse\t\t\t\t\t\t\t\trotate(k),rotate(k);\n\t\t}\n\t}\n\tinline void access(int k){\n\t\tint l=0;\n\t\twhile(k){\n\t\t\tsplay(k);\n\t\t\ts[k].rs=l;\n\t\t\tpushup(k);\n\t\t\tl=k;\n\t\t\tk=s[k].f;\n\t\t}\n\t}\n\tinline void makeroot(int k){\n\t\taccess(k);\n//\t\tputs(\"-1\");\n\t\tsplay(k);\n//\t\tputs(\"-1\");\n\t\tswap(s[k].ls,s[k].rs);\n\t\tif(s[k].ls)\ts[s[k].ls].lz^=1;\n\t\tif(s[k].rs)\ts[s[k].rs].lz^=1;\n\t}\n\tinline int findroot(int k){\n\t\taccess(k);\n\t\tsplay(k);\n\t\twhile(s[k].ls)\tpushdown(k),k=s[k].ls;\n\t\tsplay(k);\n\t\treturn k;\n\t}\n\tinline void split(int x,int y){\n\t\tmakeroot(x);\n\t\taccess(y);splay(y);\n\t}\n\tinline bool link(int x,int y){\n\t\tmakeroot(x);\n\t\tif(findroot(y)==x)\treturn 0;\n\t\ts[x].f=y;\n\t\treturn 1;\n\t}\n\tinline bool cut(int x,int y){\n\t\tif(findroot(x)!=findroot(y))\treturn 0;\n\t\tsplit(x,y);\n\t\tif(s[x].f!=y||s[x].rs)\t\treturn 0;\n\t\ts[x].f=s[y].ls=0;\n\t\tpushup(x);\n\t\treturn 1;\n\t}\n} lct;\nint n=read(),m=read();\nsigned main(){\n\tfz(i,1,n)\tlct.s[i].val=read(),lct.s[i].sum=lct.s[i].val;\n\tfz(i,1,m){\n\t\tint opt=read(),x=read(),y=read();\n\t\tif(opt==0)\t\tlct.split(x,y),cout<<lct.s[y].sum<<endl;\n\t\tif(opt==1)\t\tlct.link(x,y);\n\t\tif(opt==2)\t\tlct.cut(x,y);\n\t\tif(opt==3)\t\tlct.splay(x),lct.s[x].val=y;\n\t}\n\treturn 0;\n}\n```\n\n\u521b\u4f5c\u58f0\u660e\uff1a\n\n\u90e8\u5206\u5185\u5bb9\u501f\u9274\u4e86 FlashHu \u7684\u9898\u89e3\n\n~~\u5199\u9898\u89e3\u4e0d\u5bb9\u6613\uff0c\u5feb\u5feb\u70b9\u4e2a\u8d5e\u5457~~",
        "postTime": 1585554608,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "\u975e\u65cbtreap\u5f88\u4e07\u80fd\uff0c\u53c8\u5f88\u597d\u5199\uff0c\u4f46\u4e00\u822clct\u90fd\u662f\u7528splay\u5199\u7684\uff0c\u5176\u5b9e\u975e\u65cbtreap\u4e5f\u80fd\u7ef4\u62a4lct\uff0c\u4ee3\u7801\u548c\u901f\u5ea6\u90fd\u4e0d\u9519\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<cstdlib>\n    #define maxn 300030\n    using namespace std;\n    int n,m;\n    void get(int &x){\n        x=0;\n        bool b=0;\n        char c=getchar();\n        while((c<'0'||c>'9')&&c!='-')\n        c=getchar();\n        if(c=='-')b=1,c=getchar();\n        while(c>='0'&&c<='9')\n        x=x*10+c-48,c=getchar();\n        if(b==1)x=-x;\n    }\n    struct LCT{\n        bool s[maxn];\n        int top;\n        struct treap{\n            int l,r,fa,k,pre,v,x;\n            bool p;\n        }t[maxn];\n        struct node{\n            int x,y;\n        };\n        void init(){\n            srand((unsigned long long)new char);\n            for(int i=1;i<=n;++i)\n            t[i].k=rand();\n        }\n        inline bool isroot(int o){\n            return (t[t[o].fa].l!=o&&t[t[o].fa].r!=o)||!t[o].fa;\n        }\n        inline void pushdown(int o){\n            if(t[o].p){\n                t[o].p=0;\n                swap(t[o].l,t[o].r);\n                t[t[o].l].p^=1,t[t[o].r].p^=1;\n            }\n        }\n        inline void updata(int o){\n            t[o].x=t[o].v^t[t[o].l].x^t[t[o].r].x;\n            if(t[o].l)t[t[o].l].fa=o;\n            if(t[o].r)t[t[o].r].fa=o;\n        }\n        int merge(int x,int y){\n            if(!x||!y)return x+y;\n            if(t[x].k<t[y].k){\n                pushdown(x);\n                t[x].r=merge(t[x].r,y);\n                updata(x);\n                return x;\n            }\n            else{\n                pushdown(y);\n                t[y].l=merge(x,t[y].l);\n                updata(y);\n                return y;\n            }\n        }\n        int findroot(int o){\n            top=0;\n            while(!isroot(o)){\n                s[++top]=(t[t[o].fa].l==o);\n                o=t[o].fa;\n            }\n            return o;\n        }\n        int findleft(int o){\n            o=findroot(o);\n            pushdown(o);\n            while(t[o].l){\n                o=t[o].l;\n                pushdown(o);\n            }\n            return o;\n        }\n        node split(int o){\n            node tmp;\n            if(!top){\n                pushdown(o);\n                tmp=(node){o,t[o].r};\n                t[o].r=0;\n                updata(o);\n                return tmp;\n            }\n            bool d=s[top--];\n            d^=t[o].p;\n            pushdown(o);\n            if(d){\n                tmp=split(t[o].l);\n                t[o].l=tmp.y;\n                updata(o);\n                return (node){tmp.x,o};\n            }\n            else{\n                tmp=split(t[o].r);\n                t[o].r=tmp.x;\n                updata(o);\n                return (node){o,tmp.y};\n            }\n        }\n        int access(int o){\n            int last=0;\n            while(o){\n                node tmp=split(findroot(o));\n                t[findleft(last)].pre=0;\n                last=merge(tmp.x,last);\n                t[findleft(tmp.y)].pre=o;\n                o=t[findleft(last)].pre;\n            }\n            return last;\n        }\n        int root(int o){\n            return findleft(access(o));\n        }\n        void changeroot(int o){\n            t[access(o)].p^=1;\n        }\n        void link(int x,int y){\n            changeroot(x);\n            t[x].pre=y;\n        }\n        void cut(int x,int y){\n            changeroot(x);\n            access(y),access(x);\n            t[y].pre=0;\n        }\n        int query(int x,int y){\n            changeroot(x);\n            access(y);\n            node tmp=split(findroot(y));\n            int ans=t[tmp.x].x;\n            merge(tmp.x,tmp.y);\n            return ans;\n        }\n        void change(int o,int v){\n            changeroot(o);\n            node tmp=split(findroot(o));\n            t[o].v=v;\n            merge(tmp.x,tmp.y);\n        }\n    }lct;\n    void init(){\n        get(n),get(m);\n        lct.init();\n        for(int i=1;i<=n;++i){\n            get(lct.t[i].v);\n            lct.t[i].x=lct.t[i].v;\n        }\n    }\n    void solve(){\n        while(m--){\n            int opt,x,y;\n            get(opt),get(x),get(y);\n            if(!opt)printf(\"%d\\n\",lct.query(x,y));\n            else if(opt==1&&lct.root(x)!=lct.root(y))lct.link(x,y);\n            else if(opt==2)lct.cut(x,y);\n            else if(opt==3)lct.change(x,y);\n        }\n    }\n    int main(){\n        init(); \n        solve();\n        return 0;\n}\n```",
        "postTime": 1515490213,
        "uid": 39216,
        "name": "Shadows",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "#### \u524d\u8a00\n\n$LCT$\uff0c\u771f\u7684\u662f\u4e00\u4e2a\u65e0\u6bd4\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u5b83\u53ef\u4ee5**\u52a8\u6001**\u7ef4\u62a4**\u94fe\u4fe1\u606f**\u3001**\u8fde\u901a\u6027**\u3001**\u8fb9\u6743**\u3001**\u5b50\u6811\u4fe1\u606f**\u7b49\u5404\u79cd\u795e\u5947\u7684\u4e1c\u897f\u3002\n\n\u800c\u4e14\uff0c\u5b83\u5176\u5b9e\u5e76\u4e0d\u96be\u7406\u89e3\u3002\n\n~~\u5c31\u7b97\u7406\u89e3\u4e0d\u4e86\uff0c\u5b83\u7b80\u77ed\u7684\u4ee3\u7801\u4e5f\u5f88\u597d\u80cc\u3002~~\n\n------\n\n#### $LCT$\u4e0e\u5b9e\u8fb9\u7684\u5b9a\u4e49\n\n$LCT$\uff0c\u5168\u79f0$Link\\ Cut\\ Tree$\uff0c\u4e2d\u6587\u540d**\u52a8\u6001\u6811**\u3002\n\n\u5b83\u7684\u5b9e\u73b0\u6709\u70b9\u7c7b\u4f3c\u4e8e[**\u6811\u94fe\u5256\u5206**](https://www.cnblogs.com/chenxiaoran666/p/TreeChainDissection.html)\uff0c\u4f46\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u7684\u662f**\u91cd\u8fb9**\u548c**\u8f7b\u8fb9**\uff08\u6545\u53c8\u79f0**\u91cd\u94fe\u5256\u5206**\uff09\uff0c\u800c$LCT$\u7ef4\u62a4\u7684\u5219\u662f**\u5b9e\u8fb9**\u548c**\u865a\u8fb9**\u3002\n\n\u4ec0\u4e48\u662f\u5b9e\u8fb9\uff1f\n\n\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u4e0e\u5176\u4e00\u4e2a\u513f\u5b50\u7684\u8fde\u8fb9\u4e3a\u5b9e\u8fb9\uff0c\u4e0e\u5176\u4ed6\u513f\u5b50\u7684\u8fde\u8fb9\u4e3a\u865a\u8fb9\uff0c\u8fd9\u91cc\u7684\u5b9e\u8fb9\u662f\u53ef\u4ee5\u968f\u65f6\u53d8\u5316\u7684\u3002\n\n\u800c\u5b9e\u94fe\u5256\u5206\u4e0e\u6811\u94fe\u5256\u5206\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6811\u94fe\u5256\u5206\u662f\u9759\u6001\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\uff0c\u800c\u5b9e\u94fe\u5256\u5206\u5219\u662f\u52a8\u6001\u7684\uff0c\u56e0\u6b64\u5c31\u9700\u8981\u7528\u4e00\u4e2a\u66f4\u4e3a\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014[$Splay$](https://www.cnblogs.com/chenxiaoran666/p/Splay.html)\u6765\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u4e8e\u662f\uff0c\u5c31\u6709\u4e86$LCT$\u8fd9\u4e2a\u5965\u79d8\u91cd\u91cd\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n------\n\n#### $LCT$\u7684\u7b80\u5355\u6027\u8d28\n\n\u4ece\u4e0a\u9762\u7684\u5185\u5bb9\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c$LCT$\u5c06\u4e00\u68f5\u6811\u7684\u8fb9\u5206\u6210\u4e86**\u5b9e\u8fb9**\u548c**\u865a\u8fb9**\u3002\n\n\u800c\u8fde\u7eed\u7684\u82e5\u5e72\u6761\u5b9e\u8fb9\u6784\u6210\u4e86**\u5b9e\u94fe**\u3002\n\n\u800c\u6211\u4eec**\u5bf9\u6bcf\u6761\u5b9e\u94fe\u5206\u522b\u5bf9\u6bcf\u4e2a$Splay$\u8fdb\u884c\u7ef4\u62a4**\uff0c\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u6bcf\u4e2a$Splay$\u4e2d\u7ef4\u62a4\u7684\u8282\u70b9\u6309**\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u987a\u5e8f**\u5728\u539f\u6811\u4e2d**\u6df1\u5ea6\u4f9d\u6b21\u589e\u52a0$1$**\uff08\u8bc1\u660e\uff1a\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u8fde\u7eed\u7684\u94fe\u554a\uff09\u3002\n\n\u800c\u865a\u8fb9\u7684\u4f5c\u7528\u5219\u662f\u5c06\u8fd9\u4e9b$Splay$\u7ed9\u94fe\u63a5\u8d77\u6765\uff0c\u5927\u4f53\u8fde\u63a5\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n- \u627e\u5230\u8be5$Splay$\u4e2d\u5728\u539f\u6811\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u8bb0\u5176\u4e3a$k$\u3002\uff08\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u65f6\u662f\u65e0\u9700\u6c42\u51fa\u8fd9\u4e2a$k$\u7684\uff0c\u8fd9\u91cc\u53ea\u662f\u65b9\u4fbf\u7406\u89e3\uff09\n- \u5982\u679c$k$\u662f\u539f\u6811\u4e2d\u7684\u6839\u8282\u70b9\uff0c\u5219\u65e0\u9700\u8fde\u8fb9\u3002\n- \u5426\u5219\uff0c\u6211\u4eec\u627e\u5230$fa_k$\uff0c\u5c06\u8be5$Splay$\u7684\u6839\u8282\u70b9\u4e0e$fa_k$\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u628a\u6240\u6709$Splay$\u8fde\u5728\u4e86\u4e00\u8d77\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\u513f\u5b50\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u53ea\u5b58\u50a8\u4e00\u4e2a\u513f\u5b50\uff0c\u67d0\u5927\u4f6c\u7528\u4e00\u53e5\u5f88\u7cbe\u8f9f\u7684\u8bdd\u5bf9\u5176\u8fdb\u884c\u4e86\u603b\u7ed3\uff1a**\u8ba4\u7236\u4e0d\u8ba4\u5b50**\u3002\n\n------\n\n#### $LCT$\u7684\u57fa\u672c\u64cd\u4f5c\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u4ecb\u7ecd\u51e0\u4e2a$LCT$\u7684\u57fa\u672c\u64cd\u4f5c\u3002\n\n- $IsRoot(x)$\n\n  $IsRoot(x)$\u7684\u4f5c\u7528\u662f\u5224\u65ad\u4e00\u4e2a\u8282\u70b9$x$\u662f\u5426\u662f\u5f53\u524d**\u5b9e\u6811**\u7684\u6839\u3002\n\n  \u7531\u4e8e\u6211\u4eec\u77e5\u9053$LCT$\u662f\u8ba4\u7236\u4e0d\u8ba4\u5b50\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u662f\u5426\u4e3a\u5f53\u524d\u8282\u70b9\u5373\u53ef\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline bool IsRoot(int x)//\u5224\u65ad\u4e00\u4e2a\u8282\u70b9x\u662f\u5426\u662f\u5f53\u524d\u5b9e\u6811\u7684\u6839\n{\n  \treturn node[node[x].Father].Son[0]^x&&node[node[x].Father].Son[1]^x;//\u5224\u65adfa[x]\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u662f\u5426\u4e3ax\n}\n```\n\n\n- $Rotate(x)\\&\\&Splay(x)$\n\n  \u5173\u4e8e\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u884c\u53c2\u8003[\u7b80\u6790\u5e73\u8861\u6811\uff08\u4e09\uff09\u2014\u2014\u6d45\u8c08Splay](https://www.cnblogs.com/chenxiaoran666/p/Splay.html)\u3002\n\n  \u7136\u800c$Splay$\u548c$LCT$\u4e2d\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5176\u5b9e\u8fd8\u662f\u6709\u4e00\u5b9a\u533a\u522b\u7684\u3002\n\n  \u6bd4\u5982\u8bf4\uff0c$LCT$\u6bcf\u6b21\u56fa\u5b9a\u5c06\u8282\u70b9\u65cb\u5230\u6839\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff08\u867d\u7136\u6211\u535a\u5ba2\u4e2d$Splay$\u7684\u7b2c\u4e00\u4e2a\u6a21\u677f\u4e5f\u662f\u53ea\u4f20\u4e00\u4e2a\u53c2\u7684\uff09\u3002\n\n  \u518d\u6bd4\u5982\uff0c$LCT$\u5728$Splay$\u524d\u9700\u8981\u5148\u5c06\u5f53\u524d\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u4ece\u4e0a\u5f80\u4e0b$PushDown()$\u4e00\u904d\u3002\u8fd9\u53ef\u4ee5\u51fd\u6570\u9012\u5f52\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6808\u6a21\u62df\u3002\n\n  \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#define Which(x) (node[node[x].Father].Son[1]==x)\n#define Connect(x,y,d) (node[node[x].Father=y].Son[d]=x)\ninline void Rotate(int x)\n{\n  \tregister int fa=node[x].Father,pa=node[fa].Father,d=Which(x);\n  \t!IsRoot(fa)&&(node[pa].Son[Which(fa)]=x),node[x].Father=pa,Connect(node[x].Son[d^1],fa,d),Connect(fa,x,d^1),PushUp(fa),PushUp(x);\n}\ninline void Splay(int x)\n{\n  \tregister int fa=x,Top=0;\n  \twhile(Stack[++Top]=fa,!IsRoot(fa)) fa=node[fa].Father;//\u5b58\u5165\u6808\u4e2d\n  \twhile(Top) PushDown(Stack[Top]),--Top;//\u4f9d\u6b21PushDown\n  \twhile(!IsRoot(x)) fa=node[x].Father,!IsRoot(fa)&&(Rotate(Which(x)^Which(fa)?x:fa),0),Rotate(x);\n}\n```\n\n\n- $Access(x)$\n\n  $Access(x)$\u7684\u4f5c\u7528\u662f**\u628a\u6839\u8282\u70b9\u5230$x$\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8\u53d8\u4e3a\u5b9e\u8fb9**\u3002\n\n  \u5219\u6211\u4eec\u9996\u5148\u8003\u8651\u5728\u5f53\u524d$Splay$\u4e2d\u5c06$x$\u65cb\u5230\u6839\uff0c\u7136\u540e\u5c06$x$\u4e0e$fa_x$\u95f4\u7684\u8fde\u8fb9\u66f4\u65b0\u4e3a\u5b9e\u8fb9\uff0c\u5373\u66f4\u65b0$fa_x$\u7684\u53f3\u513f\u5b50\u4e3a$x$\uff1b\u518d\u5c06$fa_x$\u5728\u5176\u6240\u5728$Splay$\u4e2d\u65cb\u5230\u6839\uff0c\u540c\u7406\u66f4\u65b0$fa_{fa_x}$\u7684\u53f3\u513f\u5b50\u4e3a$fa_x$... ...\n\n  \u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5904\u7406\u5230\u6839\u8282\u70b9\u6240\u5728\u7684$Splay$\u4e3a\u6b62\u3002\n\n  \u8fd9\u6837\u5c31\u6253\u901a\u4e86\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230$x$\u7684\u8def\u5f84\u3002\n\n  $Access(x)$\u53ef\u8c13\u662f$LCT$\u6700\u6838\u5fc3\u7684\u64cd\u4f5c\uff0c\u4e5f\u662f\u540e\u9762\u8bb8\u591a\u64cd\u4f5c\u7684\u57fa\u7840\u3002\n\n  \u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\ninline void Access(int x)//\u628a\u6839\u8282\u70b9\u5230x\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8\u53d8\u4e3a\u5b9e\u8fb9\n{\n  \tfor(register int son=0;x;x=node[son=x].Father)\n  \t\tSplay(x),node[x].Son[1]=son,PushUp(x);//\u6ce8\u610fAccess\u8fc7\u7a0b\u4e2d\u8981PushUp\n}\n```\n\n- $FindRoot(x)$\n\n  $FindRoot(x)$\u7684\u4f5c\u7528\u662f**\u627e\u5230$x$\u6240\u5728\u7684\u539f\u6811\u4e2d\u7684\u6839\u8282\u70b9**\uff0c\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8fde\u901a\u6027\uff0c\u5b9e\u73b0**\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\u3002\n\n  \u6211\u4eec\u9996\u5148$Access(x)$\u6253\u901a\u4e00\u6761\u4ece\u6839\u5230$x$\u7684\u8def\u5f84\uff0c\u6b64\u65f6$x$\u5c31\u4e0e\u6839\u8282\u70b9\u5728\u540c\u4e00\u4e2a$Splay$\u5185\u4e86\u3002\n\n  \u7136\u540e$Splay(x)$\u5c06$x$\u65cb\u5230\u6839\u3002\n\n  \u8bb0\u4f4f\u524d\u9762\u63d0\u5230\u7684$LCT$\u7684\u6027\u8d28\uff1a\u6bcf\u4e2a$Splay$\u4e2d\u7ef4\u62a4\u7684\u8282\u70b9\u6309**\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u987a\u5e8f**\u5728\u539f\u6811\u4e2d**\u6df1\u5ea6\u4f9d\u6b21\u589e\u52a0$1$**\u3002\n\n  \u6240\u4ee5\u6839\u8282\u70b9\u5fc5\u7136\u662f$Splay$\u4e2d**\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a$1$\u7684\u8282\u70b9**\u3002\n\n  \u800c\u8fd9\u5176\u5b9e\u5c31\u662f$x$\u5c3d\u91cf\u5411\u5de6\u513f\u5b50\u62d3\u5c55\u6700\u540e\u5f97\u5230\u7684\u8282\u70b9\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline int FindRoot(int x) \n{\n  \tAccess(x),Splay(x);//\u4e00\u6ce2\u64cd\u4f5c\uff0c\u5c06x\u8f6c\u5230\u6839\u8282\u70b9\u6240\u5728Splay\u7684\u6839\n  \twhile(node[x].Son[0]) PushDown(x),x=node[x].Son[0];//\u5c3d\u91cf\u5411\u5de6\u513f\u5b50\u62d3\u5c55\uff0c\u6ce8\u610f\u6bcf\u6b21\u62d3\u5c55\u524d\u5148PushDown\n  \treturn Splay(x),x;//\u6700\u540e\u4e0d\u5fd8Splay\u7684\u4f18\u826f\u4f20\u7edf\uff1a\u6bcf\u6267\u884c\u5b8c\u4e00\u4e2a\u64cd\u4f5c\u5c31Splay\u4e00\u4e0b\uff0c\u9632\u88ab\u5361\n}\n```\n\n- $MakeRoot(x)$\n\n  $MakeRoot(x)$\u7684\u4f5c\u7528\u662f**\u5c06$x$\u4f5c\u4e3a\u539f\u6811\u4e2d\u7684\u65b0\u7684\u6839\u8282\u70b9**\u3002\n\n  \u9996\u5148\uff0c\u4f9d\u7136\u662f\u5148$Access(x)$\u6253\u901a\u4e00\u6761\u4ece\u6839\u5230$x$\u7684\u8def\u5f84\uff0c\u7136\u540e$Splay(x)$\u5c06$x$\u65cb\u5230\u6839\u3002\n\n  \u7531\u524d\u9762\u7684\u64cd\u4f5c\u53ef\u77e5\uff0c\u6839\u8282\u70b9\u662f$Splay$\u4e2d**\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a$1$\u7684\u8282\u70b9**\u3002\n\n  \u800c\u6b64\u65f6\uff0c$x$\u5fc5\u7136\u662f$Splay$\u4e2d\u4e2d\u5e8f\u904d\u5386\u6700\u540e\u5f97\u5230\u7684\u70b9\u3002\n\n  \u56e0\u6b64\u6211\u4eec\u53ea\u8981\u7ffb\u8f6c\u8be5$Splay$\uff0c$x$\u5c31\u53d8\u6210\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u4e3a$1$\u7684\u8282\u70b9\u4e86\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Rever(int x)//\u7ffb\u8f6c\u5b50\u6811\n{\n  \tswap(node[x].Son[0],node[x].Son[1]),node[x].Rev^=1;//\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u7136\u540e\u66f4\u65b0\u6807\u8bb0\n}\ninline void MakeRoot(int x)//\u5c06x\u4f5c\u4e3a\u539f\u6811\u4e2d\u7684\u65b0\u7684\u6839\u8282\u70b9\n{\n  \tAccess(x),Splay(x),Rever(x);//\u5c06x\u8f6c\u5230\u6839\u8282\u70b9\u6240\u5728Splay\u7684\u6839\uff0c\u7136\u540e\u7ffb\u8f6cSplay\n}\n```\n\n- $Link(x,y)$\n\n  $Link(x,y)$\u7684\u4f5c\u7528\u662f**\u5728$x$\u548c$y$\u4e24\u4e2a\u8282\u70b9\u95f4\u8fde\u4e00\u6761\u8fb9**\u3002\n\n  \u9996\u5148\uff0c\u6211\u4eec\u5c06$x$\u4f5c\u4e3a\u5b83\u6240\u5728\u6811\u7684\u6839\uff0c\u5373$MakeRoot(x)$\u3002\n\n  \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad$x$\u4e0e$y$\u662f\u5426\u8054\u901a\u3002\u7531\u4e8e$x$\u662f\u5176\u6240\u5728\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u56e0\u6b64\u53ea\u8981\u5224\u65ad$FindRoot(y)$\u662f\u5426\u4e3a$x$\u5373\u53ef\u3002\n\n  \u8fde\u63a5\u53ea\u9700\u8981\u66f4\u65b0$x$\u7684\u7236\u4eb2\u4e3a$y$\u5373\u53ef\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Link(int x,int y)//\u5728x\u548cy\u4e24\u4e2a\u8282\u70b9\u95f4\u8fde\u4e00\u6761\u8fb9\n{\n  \tMakeRoot(x),FindRoot(y)^x&&(node[x].Father=y);//\u5224\u65adx\u548cy\u7684\u8fde\u901a\u6027\uff0c\u7136\u540e\u8fde\u63a5\n}\n```\n\n- $Cut(x,y)$\n\n  $Cut(x,y)$\u7684\u4f5c\u7528\u662f**\u5220\u9664$x$\u548c$y$\u4e4b\u95f4\u7684\u8fb9**\u3002\n\n  \u9996\u5148\uff0c\u6211\u4eec\u4f9d\u7136\u5c06$x$\u4f5c\u4e3a\u5b83\u6240\u5728\u6811\u7684\u6839\u3002\n\n  \u5219\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u82e5$x$\u548c$y$\u6709\u8fb9\u76f8\u8fde\uff0c\u4e00\u5b9a\u6ee1\u8db3\u4e00\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a\n\n  1. $y$\u6240\u5728\u6811\u7684\u6839\u4e3a$x$\uff0c\u5373$FindRoot(y)==x$\u3002\n  2. $y$\u7684\u7236\u4eb2\u8282\u70b9\u4e3a$x$\uff0c\u5373$fa_y==x$\u3002\n  3. $y$\u6ca1\u6709\u5de6\u513f\u5b50\u3002\u56e0\u4e3a\u5982\u679c$y$\u6709\u5de6\u513f\u5b50\uff0c\u7531\u4e8e$LCT$\u7684\u6027\u8d28\uff0c\u53ef\u5f97$Depth_x<Depth_{leftson_y}<Depth_y$\uff0c\u5219$x$\u548c$y$\u5fc5\u7136\u4e0d\u76f8\u8fde\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Cut(int x,int y)//\u5220\u9664x\u548cy\u4e4b\u95f4\u7684\u8fb9\n{\n  \tMakeRoot(x),!(FindRoot(y)^x)&&!(node[y].Father^x)&&!node[y].Son[0]&&(node[y].Father=node[x].Son[1]=0,PushUp(x));//\u5224\u65adx\u548cy\u7684\u8fde\u901a\u6027\uff0c\u7136\u540e\u5220\u8fb9\n}\n```\n\n- $Split(x,y)$\n\n  $Split(x,y)$\u7684\u4f5c\u7528\u662f**\u4ece$LCT$\u4e2d\u62a0\u51fa$x$\u4e0e$y$\u4e4b\u95f4\u7684\u8def\u5f84**\u3002\n\n  \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u65b9\u4fbf\u6211\u4eec\u67e5\u8be2\u4e86\u3002\n\n  \u8fd9\u4e2a\u64cd\u4f5c\u7b2c\u4e00\u6b65\u4fbf\u662f\u5c06$x$\u4f5c\u4e3a\u6839\uff0c\u7136\u540e\u6253\u901a$x$\u5230$y$\u7684\u8def\u5f84\u3002\n\n  \u53ef\u4ee5\u4fdd\u8bc1\uff0c\u6b64\u65f6$x$\u4e0e$y$\u6240\u5728\u7684$Splay$\u5185**\u53ea\u5305\u542b$x$\u4e0e$y$\u8def\u5f84\u4e0a\u7684\u8282\u70b9**\u3002\n\n  \u7136\u540e\u6211\u4eec\u5c06$Splay(y)$\u5c06$y$\u65cb\u81f3$Splay$\u7684\u6839\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2$y$\u7684\u4fe1\u606f\u6765\u8fdb\u884c\u8be2\u95ee\u4e86\u3002\n\n  \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Split(int x,int y)//\u4eceLCT\u4e2d\u62a0\u51fax\u4e0ey\u4e4b\u95f4\u7684\u8def\u5f84\n{\n  \tMakeRoot(x),Access(y),Splay(y);//\u5c06x\u4f5c\u4e3a\u6839\uff0c\u6253\u901ax\u4e0ey\u7684\u8def\u5f84\u5e76\u5c06y\u65cb\u5230\u6839\n}\n```\n\n------\n\n#### \u6a21\u677f\uff08[\u677f\u5b50\u9898](https://www.luogu.org/problemnew/show/P3690)\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define N 300000\n#define swap(x,y) (x^=y^=x^=y)\nusing namespace std;\nint n,a[N+5];\nclass Class_FIO\n{\n    private:\n        #define Fsize 100000\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,Fsize,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (FoutSize<Fsize?Fout[FoutSize++]=ch:(fwrite(Fout,1,Fsize,stdout),Fout[(FoutSize=0)++]=ch))\n        int Top,FoutSize;char ch,*A,*B,Fin[Fsize],Fout[Fsize],Stack[Fsize];\n    public:\n        Class_FIO() {A=B=Fin;}\n        inline void read(int &x) {x=0;while(!isdigit(ch=tc()));while(x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));}\n        inline void writeln(int x) {while(Stack[++Top]=x%10+48,x/=10);while(Top) pc(Stack[Top--]);pc('\\n');}\n        inline void clear() {fwrite(Fout,1,FoutSize,stdout),FoutSize=0;}\n}F;\nclass Class_LCT\n{\n    private:\n        #define LCT_SIZE N\n        #define PushUp(x) (node[x].Sum=node[x].Val^node[node[x].Son[0]].Sum^node[node[x].Son[1]].Sum)\n        #define Rever(x) (swap(node[x].Son[0],node[x].Son[1]),node[x].Rev^=1)\n        #define PushDown(x) (node[x].Rev&&(Rever(node[x].Son[0]),Rever(node[x].Son[1]),node[x].Rev=0))\n        #define Which(x) (node[node[x].Father].Son[1]==x)\n        #define Connect(x,y,d) (node[node[x].Father=y].Son[d]=x)\n        #define IsRoot(x) (node[node[x].Father].Son[0]^x&&node[node[x].Father].Son[1]^x)\n        #define MakeRoot(x) (Access(x),Splay(x),Rever(x))\n        #define Split(x,y) (MakeRoot(x),Access(y),Splay(y)) \n        int Stack[LCT_SIZE+5];\n        struct Tree\n        {\n            int Val,Sum,Father,Rev,Son[2];\n        }node[LCT_SIZE+5];\n        inline void Rotate(int x)\n        {\n            register int fa=node[x].Father,pa=node[fa].Father,d=Which(x);\n            !IsRoot(fa)&&(node[pa].Son[Which(fa)]=x),node[x].Father=pa,Connect(node[x].Son[d^1],fa,d),Connect(fa,x,d^1),PushUp(fa),PushUp(x);\n        }\n        inline void Splay(int x)\n        {\n            register int fa=x,Top=0;\n            while(Stack[++Top]=fa,!IsRoot(fa)) fa=node[fa].Father;\n            while(Top) PushDown(Stack[Top]),--Top;\n            while(!IsRoot(x)) fa=node[x].Father,!IsRoot(fa)&&(Rotate(Which(x)^Which(fa)?x:fa),0),Rotate(x);\n        }\n        inline void Access(int x) {for(register int son=0;x;x=node[son=x].Father) Splay(x),node[x].Son[1]=son,PushUp(x);}\n        inline int FindRoot(int x) {Access(x),Splay(x);while(node[x].Son[0]) PushDown(x),x=node[x].Son[0];return Splay(x),x;}\n    public:\n        inline void Init(int len,int *data) {for(register int i=1;i<=len;++i) node[i].Val=data[i];}\n        inline void Link(int x,int y) {MakeRoot(x),FindRoot(y)^x&&(node[x].Father=y);}\n        inline void Cut(int x,int y) {MakeRoot(x),!(FindRoot(y)^x)&&!(node[y].Father^x)&&!node[y].Son[0]&&(node[y].Father=node[x].Son[1]=0,PushUp(x));}\n        inline void Update(int x,int v) {Splay(x),node[x].Val=v;}\n        inline int Query(int x,int y) {return Split(x,y),node[y].Sum;}\n}LCT;\nint main()\n{\n    register int query_tot,i,op,x,y;\n    for(F.read(n),F.read(query_tot),i=1;i<=n;++i) F.read(a[i]);\n    for(LCT.Init(n,a);query_tot;--query_tot)\n    {\n        F.read(op),F.read(x),F.read(y);\n        switch(op)\n        {\n            case 0:F.writeln(LCT.Query(x,y));break;\n            case 1:LCT.Link(x,y);break;\n            case 2:LCT.Cut(x,y);break;\n            case 3:LCT.Update(x,y);break;\n        }\n    }\n    return F.clear(),0;\n} \n```",
        "postTime": 1545469089,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "(\u4e3a\u81ea\u5df1\u7684\u535a\u5ba2\u6253\u4e2a\u5e7f\u544a[\u770b\u770b\u5427](https://www.luogu.org/blog/wjr5082/))\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3690)\n\n\u56e0\u4e3alct\u6709\u5404\u79cddalao\u8bb2\u89e3\u4e86\uff0c\u6211\u8fd9\u91cc\u5c31\u4e0d\u505a\u539f\u7406\u8bb2\u89e3\u3002\n\n\u4ee3\u7801\u6709\u8be6\u7ec6\u8bb2\u89e3\uff0c\u6211\u8fd9\u91cc\u76f4\u63a5\u5728\u4ee3\u7801\u4e0a\u6ce8\u91ca\u4e86\u4e00\u4e0b**\u5bb9\u6613\u9519**\u548c**\u96be\u60f3**\u7684\u5730\u65b9\uff08\u76f8\u4fe1\u80fd\u5e2e\u5230\u4f60\u4eec\u4e0d\u591a\u8d70\u5f2f\u8def\uff01\uff09\n\nUpdate:\u6211\u5f53\u65f6\u505a\u8fd9\u9898\u7684\u65f6\u5019\u8c8c\u4f3clink\u4e0d\u4f1a\u51fa\u73b0\u5df2\u7ecf\u8054\u901a\uff0c\u4ee5\u524d\u7684\u4ee3\u7801\u5728\u6539\u4e86\u6570\u636e\u540e\u5c31\u51fa\u4e86\u95ee\u9898\uff0c\u4e0d\u8fc7\u73b0\u5728\u5df2\u7ecf\u4fee\u590d\uff0c\u4ee3\u7801\u53ef\u4ee5AC 2020.10.19\u7684\u6570\u636e\n\n\u53e6\uff1a\u5bf9\u90e8\u5206\u5730\u65b9\u8fdb\u884c\u5fae\u8c03\uff0c\u4f7f\u5f97\u4ee3\u7801\u5199\u8d77\u6765\u548c\u770b\u8d77\u6765\u80fd\u66f4\u8212\u670d\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nint n,m;\nstruct node{\n    int fa,ch[2],sum,val,lazy;\n}t[310000];\n#define lc t[x].ch[0]\n#define rc t[x].ch[1]\n//\u65b9\u4fbf\u4e66\u5199 \n//lc\u8868\u793ax\u5de6\u513f\u5b50\n//rc\u8868\u793ax\u53f3\u513f\u5b50 \ninline bool root(int x){//\u5224\u65ad\u662f\u5426\u662fsplay\u6839\u8282\u70b9,\u56e0\u4e3a\u5b58\u5728\u865a\u8fb9,\u6240\u4ee5\u4e0d\u80fd\u901a\u8fc7\u5224\u65adfa==0\u6765\u5224\u65ad \n    int g=t[x].fa;\n    return t[g].ch[0]!=x&&t[g].ch[1]!=x;//\u82e5\u4e3a\u6839,\u5219\u7236\u4eb2\u8282\u70b9\u4e0d\u5e94\u8be5\u6709\u8fd9\u4e2a\u513f\u5b50(\u7236\u4e0d\u8ba4\u5b50)\n}\ninline void pushup(int x){\n    t[x].sum=t[x].val^t[lc].sum^t[rc].sum;\n}\ninline void pushr(int x){//\u4e0d\u89e3\u91ca \n    if(!x)return;\n    swap(lc,rc);\n    t[x].lazy^=1;\n}\ninline void pushdown(int x){\n    if(t[x].lazy){\n        pushr(lc);\n        pushr(rc);\n        t[x].lazy=0;\n    }\n}\ninline void push(int x){//\u56e0\u4e3a \u6b63\u5e38splay\u64cd\u4f5c\u4e0b ,\u90fd\u8981\u5148kth\u6216\u8005\u662f\u76f4\u63a5\u5728splay\u64cd\u4f5c\u4e2d\u52a0pushdown,\u800clct\u4e2d\u5219\u6ca1\u6709\n    if(!root(x))push(t[x].fa);// \u56e0\u6b64\u8981\u4ece\u6839\u5230x\u5168\u90e8pushdown \n    pushdown(x);\n}\ninline void rotate(int x){\n    int y=t[x].fa;\n    int z=t[y].fa;\n    int k=t[y].ch[1]==x;\n    if(!root(y)) t[z].ch[t[z].ch[1]==y]=x;//\u6b63\u5e38splay,\u6839\u7684fa\u4e3a 0,\u56e0\u6b64\u4e0d\u7528\u5224\u65ad,\u8fd9\u91cc\u5fc5\u987b\u7279\u5224!! \n    t[x].fa=z;\n    t[y].ch[k]=t[x].ch[k^1];\n    if(t[x].ch[k^1])t[t[x].ch[k^1]].fa=y;\n    t[y].fa=x;\n    t[x].ch[k^1]=y;\n    pushup(y);\n}\ninline void splay(int x){\n    int y,z;\n    push(x);//\u5148pushdown,\u5426\u5219\u4f1a\u7834\u574f\u6807\u8bb0,splay\u4e2d\u5927\u90e8\u5206\u5148\u67e5\u627e\u7b2ck\u5927\u518d\u64cd\u4f5c\u90a3\u65f6\u5df2\u7ecf\u4e0b\u653e\u6807\u8bb0,lct\u7edd\u5bf9\u4e0d\u5b58\u5728 \n    while(!root(x)){\n        y=t[x].fa,z=t[y].fa;\n        if(!root(y))\n            (t[z].ch[0]==y)^(t[y].ch[0]==x)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    pushup(x);\n}\ninline void access(int x){//\u5c06x\u4e0e\u6839\u653e\u5728\u540c\u4e00\u4e2asplay\u6811,\u6b64\u65f6\u6839\u4e3asplay\u6700\u5de6\u8fb9\u7684\u8282\u70b9,x\u4e3asplay\u6700\u53f3\u8fb9\u7684\u8282\u70b9 \n    for(int y=0;x;y=x,x=t[x].fa){\n        splay(x);rc=y;pushup(x);//\u56e0\u4e3a\u6309\u7167\u6df1\u5ea6\u6392\u5e8f,\u5c06\u4e0a\u9762\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8bbe\u4e3a\u81ea\u5df1,\u90a3\u4e48\u4e4b\u524d\u7684\u5b9e\u8fb9\u5c31\u53d8\u4e3a\n    }                                   //\u865a\u8fb9\u4e86,\u5373\u6ca1\u6709\u8fd9\u4e2a\u513f\u5b50\u4e86,\u4f46\u662ffa\u6807\u8bb0\u8fd8\u5728,\u6b64\u65f6\u8981pushup \n}\ninline void makeroot(int x){//\u5c06x\u4f5c\u4e3a\u539f\u6811\u7684\u6839 \n    access(x);splay(x);//access\u540e,x\u80af\u5b9a\u4e3asplay\u6811\u7684\u6700\u53f3\u8fb9\u8282\u70b9,\u56e0\u4e3a\u4e0b\u9762\u548c\u4ed6\u8fde\u7684\u8fb9\u5168\u53d8\u6210\u4e86\u865a\u8fb9 \n    pushr(x);          //\u6240\u4ee5\u6b64\u65f6\u65cb\u8f6c\u5230\u6839\u540e,\u6392\u5e8f\u987a\u5e8f\u76f8\u53cd,\u6240\u4ee5\u8981\u53cd\u8f6c\u4f7f\u5176\u6ee1\u8db3\u5de6\u8fb9\u6df1\u5ea6\u5c0f,\u53f3\u8fb9\u6df1\u5ea6\u5927 \n}\ninline void split(int x,int y){//\u5c06x,y\u8fd9\u6761\u8def\u5f84\u53d8\u4e3a\u4e00\u9897splay\u4e2d\u7684\u8282\u70b9 \n    makeroot(x);\n    access(y);\n    splay(y);//\u8fd9\u53e5\u8bdd\u4e00\u5b9a\u8981,\u56e0\u4e3aaccess\u65f6,\u5047\u5982x,y\u548caccess\u5230\u7684z\u5df2\u7ecf\u5728\u4e00\u68f5splay\u6811,z\u4e3asplay\u7684\u6839\u800c\u4e0d\u4e00\u5b9az\u5c31\u662fy,\u7136\u540ez\u5f80\u4e0a\u8df3\u5c31\u662f0\n    //\u53ef\u4ee5\u753b\u4e2a\u56fe\u770b\u4e00\u4e0b\u5462, y\u548cz \u4e00\u5b9a\u662f\u5728\u4e00\u68f5splay\u4e0a\u7684,\u518d\u5206z,x\u4e0a\u5426\u5728\u4e00\u68f5splay\u4e0a\u8ba8\u8bba,\u4f1a\u53d1\u73b0splay(y)(\u6216splay(x))\u4e00\u5b9a\u8981 \n}\ninline void link(int x,int y){//\u5c06x,y\u8fd9\u4e24\u4e2a\u5206\u522b\u5c5e\u4e8e\u4e0d\u540clct\u7684\u70b9\u8fde\u8fb9\n    makeroot(x);//\u8fd9\u53e5\u8bdd\u4e00\u5b9a\u8981,\u56e0\u4e3a\u662f\u5c06x,y\u8fde\u8fb9 ,\u800c\u539f\u6765 x\u53ef\u80fd\u8fd8\u6709fa\n    t[x].fa=y;\n}\ninline void cut(int x,int y){//\u5c06x,y\u7684\u8fb9\u5207\u65ad \n    makeroot(x);\n    access(y);\n    splay(y);\n    if(t[y].ch[0]!=x||rc)return;//\u5982\u679cx,y\u76f4\u63a5\u76f8\u8fde,\u5373\u4e2d\u95f4\u6ca1\u6709\u70b9,\u5e76\u4e14\u6bd4y\u6df1\u5ea6\u5c0f\u7684\u662fx(makeroot\u4e86,\u5f3a\u5236dep(x)<dep(y)) \n    //y\u7684\u5de6\u513f\u5b50\u4e0d\u662fx\u8bf4\u660ex\u4e0ey\u4e0d\u76f8\u8fde\u6216\u8005\u4e4b\u95f4\u5b58\u5728\u5176\u4ed6\u7684\u70b9,x\u53f3\u513f\u5b50\u5b58\u5728\u4e5f\u8bf4\u660exy\u4e4b\u95f4\u5b58\u5728\u5176\u4ed6\u7684\u70b9\n\t//\u5373x,y\u7684\u8fb9\u4e0d\u5b58\u5728 \n    t[x].fa=t[y].ch[0]=0;\n    pushup(x);\n}inline int findroot(int x){\n\taccess(x),splay(x);\n\twhile(lc)pushdown(x),x=lc;\n\tpushdown(x);\n\treturn x;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i){\n        scanf(\"%d\",&t[i].val);\n        t[i].sum=t[i].val;\n    }\n    int opt,a,b;\n    while(m--){\n        scanf(\"%d%d%d\",&opt,&a,&b);\n        switch(opt){\n            case 0:{\n                if(a==b){\n                    printf(\"%d\\n\",t[a].val);\n                    break;\n                }\n                split(a,b);\n                pushup(b);\n                printf(\"%d\\n\",t[b].sum);\n                break;\n            }\n            case 1:{\n                if(findroot(a)!=findroot(b))link(a,b);\n                break;\n            }\n            case 2:{\n                cut(a,b);\n                break;\n            }\n            case 3:{\n                splay(a);\n                t[a].val=b;\n                pushup(a);\n                break;\n            }\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1547557012,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "lct\u4ee3\u7801\u8bb2\u89e3"
    },
    {
        "content": "\u4eba\u751f\u4e2d\u7b2c\u4e00\u6b21\u61c2\u4e86 LCT\uff0c\u542c\u8fc7\u4e0d\u4e0b\u516d\u56de\u4e86\uff0c\u4f46\u662f\u4e00\u76f4\u662f\u4ef0\u6b62\u3002\u7ec8\u4e8e\u4e0b\u5b9a\u51b3\u5fc3\u53bb\u597d\u597d\u5b66\uff0c\u53d1\u73b0\u5e76\u4e0d\u96be\uff1f\n\n\u8bf4\u4e00\u4e2a\u6897\uff1a\u6709\u4e00\u5929\uff0c\u6211 Splay \u5199\u5230\u4e00\u534a\u5fd8\u4e86\u600e\u4e48\u5220\u9664\uff0c\u4e8e\u662f\u6211\u6253\u4e86\u68f5 LCT\u3002\n\n\u8bf4\u5b9e\u8bdd\u81f3\u5c11\u8fd9\u4e00\u9053\u9898\u76ee\u4e2d\uff0cSplay \u5360\u4e86\u9898\u76ee\u7248\u9762\u7684\u5927\u90e8\u5206\uff0cLCT \u7684\u90e8\u5206\u4ec5\u9650\u4e8e\u57fa\u672c\u7684 `access`\u3001`makeroot`\u3001`findroot`\u3001`split`\u3001`link`\u3001`cut` \u51e0\u4e2a\u3002\n\n\u73b0\u5728\u60f3\u8d77\u6765\uff0cLCT \u4e5f\u6ca1\u6709\u60f3\u8c61\u4e2d\u7684\u90a3\u4e48\u96be\u7406\u89e3\u3002\u6709\u4e00\u4e2a\u5f62\u8c61\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4e00\u4e2a Splay \u770b\u4f5c\u4e00\u4e2a\u9762\u5305\uff0c\u90a3\u4e48 LCT \u5c31\u662f\u82e5\u5e72\u4e2a\u9762\u5305\u6446\u51fa\u6765\u7684\u4e00\u4e2a\u5f62\u72b6\uff0c\u9762\u5305\u5185\u90e8\u53ef\u4ee5\u8fdb\u884c Splay \u80fd\u8fdb\u884c\u7684\u795e\u5947\u64cd\u4f5c\uff0c\u5f53\u6211\u4eec\u9700\u8981\u5bf9\u4e8e\u4e24\u4e2a\u9762\u5305\u4e4b\u95f4\u505a\u4e00\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u628a\u4e00\u4e2a\u63b0\u65ad\uff0c\u548c\u53e6\u4e00\u4e2a\u63a5\u4e0a\u5c31\u597d\u4e86\u3002\n\n`access` \u5c31\u662f\u628a\u67d0\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u6253\u901a\u7684\u4e00\u4e2a\u8fc7\u7a0b\u3002\n\n`makeroot`\u3001`findroot`\u3001`link`\u3001`cut` \u987e\u540d\u601d\u4e49\u5c31\u662f\u4f7f\u67d0\u4e00\u4e2a\u70b9\u53d8\u4e3a\u6839\u3001\u67e5\u8be2\u6839\u3001\u8fde\u63a5/\u65ad\u5f00\u4e24\u4e2a\u70b9\u3002\n\n\u81f3\u4e8e `split`\uff0c\u5c31\u662f\u5c06\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9 x\u3001y \u653e\u5230\u4e00\u8d77\uff0c\u5176\u5b9e\u4e5f\u6ca1\u5565\u7528\u3002\n\n\u8be6\u7ec6\u7684\u539f\u7406\u548c\u5b9e\u73b0\u7f51\u4e0a\u6709\u8bf4\u5f97\u597d\u591a\u7684\uff0c\u5c31\u4e0d\u590d\u8bfb\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110005;\n\n/* LCT {{{ */\nstruct LCT {\n  int tree[N], val[N], fa[N], son[N][2], rev[N];\n  int top, sta[N];\n  bool isroot(int t) {\n    return t != son[fa[t]][0] && t != son[fa[t]][1];\n  }\n  bool isson(int t) { return t == son[fa[t]][1]; }\n  void update(int t) {\n    tree[t] = tree[son[t][0]] ^ tree[son[t][1]] ^ val[t];\n  }\n  void pushdown(int t) {\n    if (rev[t]) {\n      rev[son[t][0]] ^= 1, rev[son[t][1]] ^= 1;\n      swap(son[t][0], son[t][1]);\n      rev[t] = 0;\n    }\n  }\n  void rotate(int t) {\n    int f = fa[t], g = fa[f], fis = isson(f), tis = isson(t);\n    fa[t] = g;\n    if (!isroot(f)) son[g][fis] = t;\n    fa[son[t][tis ^ 1]] = f, son[f][tis] = son[t][tis ^ 1];\n    fa[f] = t, son[t][tis ^ 1] = f;\n    update(f), update(t);\n  }\n  void splay(int t) {\n    sta[top = 1] = t;\n    int x = t;\n    while (!isroot(x)) x = fa[x], sta[++top] = x;\n    while (top) pushdown(sta[top--]);\n    while (!isroot(t)) {\n      int f = fa[t];\n      if (isroot(f)) rotate(t);\n      else if (isson(f) == isson(t)) rotate(f), rotate(t);\n      else rotate(t), rotate(t);\n    }\n    update(t);\n  }\n  void access(int t) {\n    for (int i = 0; t; i = t, t = fa[t])\n      splay(t), son[t][1] = i, update(t);\n  }\n  void makeroot(int t) {\n    access(t), splay(t), rev[t] ^= 1;\n  }\n  int findroot(int t) {\n    access(t), splay(t);\n    while (son[t][0]) \n      pushdown(t), t = son[t][0];\n    splay(t);\n    return t;\n  }\n  void split(int u, int v) {\n    makeroot(v), access(u), splay(u);\n  }\n  void link(int u, int v) {\n    makeroot(u);\n    if (findroot(v) != u)\n      fa[u] = v;\n  }\n  void cut(int u, int v) {\n    split(u, v);\n    if (son[u][0] == v && !son[v][1]) \n      son[u][0] = 0, fa[v] = 0;\n  }\n};\n/* }}} */\n\nLCT lct;\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"lct.in\", \"r\", stdin);\n  freopen(\"lct.out\", \"w\", stdout);\n#endif\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; ++i) scanf(\"%d\", &lct.val[i]);\n  for (int i = 1; i <= m; ++i) {\n    int opt, x, y;\n    scanf(\"%d%d%d\", &opt, &x, &y);\n    if (opt == 0) \n      lct.split(x, y), printf(\"%d\\n\", lct.tree[x]);\n    if (opt == 1)\n      lct.link(x, y);\n    if (opt == 2)\n      lct.cut(x, y);\n    if (opt == 3)\n      lct.splay(x), lct.val[x] = y;\n  }\n  return 0;\n}\n```",
        "postTime": 1571926035,
        "uid": 20522,
        "name": "ccviolett",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u91cc\u597d\u50cf\u6ca1\u4eba\u7528\u6307\u9488\u5199\uff0c\u90a3\u6211\u5c31\u53d1\u4e00\u4e2a\u6307\u9488\u7248LCT\u7684\u677f\u5b50\uff0cLCT\u7684\u76f8\u5173\u64cd\u4f5c\u697c\u4e0a\u5df2\u7ecf\u8bb2\u5f97\u5f88\u8be6\u7ec6\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\nconst int maxn=300010;\n\nclass LinkCutTree{\n    public:\n    \n    class SplayNode{//Splay \n        public:\n        \n        SplayNode(int ID,int Val){\n            Index=ID;Value=Val;Sum=Val;\n            isRev=false;\n            Lson=Rson=Fa=Top=NULL;\n        }\n        \n        int Index,Value,Sum; //Index - \u7ed3\u70b9\u7f16\u53f7\uff0cValue - \u7ed3\u70b9\u6743\u503c\uff0cSum - Splay\u4e2d\u4ee5\u5f53\u524d\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684xor\u548c \n        bool isRev;\n        SplayNode *Lson,*Rson,*Fa,*Top;\n        // Lson - \u5de6\u513f\u5b50\uff0cRson - \u53f3\u513f\u5b50\uff0cFa - \u7236\u4eb2\u7ed3\u70b9\uff0cTop - \u94fe\u7684\u9876\u7aef \n        \n        void Push_Down(){ //\u4e0b\u653eSplay\u7684\u7ffb\u8f6c\u6807\u8bb0 \n            if(this->isRev==false) return;\n            this->isRev=false;\n            if(this->Lson!=NULL) this->Lson->isRev^=1;\n            if(this->Rson!=NULL) this->Rson->isRev^=1;\n            swap(this->Lson,this->Rson);//\u4ea4\u6362\u5de6\u53f3\u513f\u5b50 \n            return;\n        }\n        void Push_Up(){//\u4e0a\u4f20Splay\u7684xor\u548c \n            int Val=this->Value;\n            if(this->Lson!=NULL) Val^=this->Lson->Sum;\n            if(this->Rson!=NULL) Val^=this->Rson->Sum;\n            this->Sum=Val;\n            return;\n        }\n        void Left_Rotate(){//\u5de6\u65cb \n            SplayNode *y=this->Fa;\n            this->Fa=y->Fa;\n            if(y->Fa!=NULL){\n                if(y->Fa->Lson==y) y->Fa->Lson=this;\n                else y->Fa->Rson=this;\n            }\n            y->Rson=this->Lson;\n            if(this->Lson!=NULL) this->Lson->Fa=y;\n            this->Lson=y;\n            y->Fa=this;\n            y->Push_Up();\n            this->Push_Up();\n            this->Top=y->Top;\n            y->Top=NULL;\n            return;\n        }\n        void Right_Rotate(){//\u53f3\u65cb \n            SplayNode *y=this->Fa;\n            this->Fa=y->Fa;\n            if(y->Fa!=NULL){\n                if(y->Fa->Lson==y) y->Fa->Lson=this;\n                else y->Fa->Rson=this;\n            }\n            y->Lson=this->Rson;\n            if(this->Rson!=NULL) this->Rson->Fa=y;\n            this->Rson=y;\n            y->Fa=this;\n            y->Push_Up();\n            this->Push_Up();\n            this->Top=y->Top;\n            y->Top=NULL;\n            return;\n        }\n        static void Splay(SplayNode *x){//Splay\u7684\u4f38\u5c55\u64cd\u4f5c \n            if(x==NULL) return;\n            while(x->Fa!=NULL){\n                SplayNode *y=x->Fa;\n                y->Push_Down();\n                if(y->Lson!=NULL) y->Lson->Push_Down();\n                if(y->Rson!=NULL) y->Rson->Push_Down(); //\u65cb\u8f6c\u524d\u5148\u4e0b\u653e\u6807\u8bb0 \n                if(y->Lson==x) x->Right_Rotate();\n                else x->Left_Rotate();\n            }\n            return;\n        }\n    };\n    \n    LinkCutTree(){\n        NodeCount=0;\n        memset(Position,0,sizeof(Position));\n        memset(Node,0,sizeof(Node));\n    }\n    \n    int NodeCount;//LCT\u4e2d\u7684\u7ed3\u70b9\u4e2a\u6570 \n    int Position[maxn];// Position[ID] \u8868\u793a\u7f16\u53f7\u4e3aID\u7684\u7ed3\u70b9\u5728\u5185\u5b58\u6c60Node\u4e2d\u7684\u4f4d\u7f6e \n    SplayNode *Node[maxn];//\u5185\u5b58\u6c60\uff0c\u6307\u5411Splay\u7684\u7ed3\u70b9 \n    \n    void Build_Tree(int ID,int Val){//\u5728LCT\u4e2d\u9020\u4e00\u68f5\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u6811 \n        int Pos=++NodeCount;\n        Position[ID]=Pos;\n        Node[Pos]=new SplayNode(ID,Val);// new\u4e00\u4e2aSplay\u7ed3\u70b9 \n        return;\n    }\n    void Access(SplayNode *x){//\u5f00\u8f9f\u4e00\u6761\u4ece\u7ed3\u70b9x\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84 \n        if(x==NULL) return;\n        SplayNode::Splay(x);\n        x->Push_Down();\n        if(x->Rson!=NULL){\n            x->Rson->Fa=NULL;\n            x->Rson->Top=x;\n            x->Rson=NULL;\n        }\n        x->Push_Up();\n        while(x->Top!=NULL){//\u4fee\u6539Splay\u7ef4\u62a4\u7684\u94fe \n            SplayNode *temp=x->Top;\n            SplayNode::Splay(temp);\n            temp->Push_Down();\n            if(temp->Rson!=NULL){\n                temp->Rson->Fa=NULL;\n                temp->Rson->Top=temp;\n                temp->Rson=NULL;\n            }\n            temp->Rson=x;\n            x->Fa=temp;\n            x->Top=NULL;\n            temp->Push_Up();\n            x=temp;\n        }\n        SplayNode::Splay(x);\n        return;\n    }\n    SplayNode *Find_Root(SplayNode *x){//\u5bfb\u627e\u7ed3\u70b9x\u6240\u5728\u6811\u7684\u6839 \n        if(x==NULL) return NULL;\n        Access(x);\n        SplayNode::Splay(x);\n        x->Push_Down();\n        while(x->Lson!=NULL) x=x->Lson;\n        SplayNode::Splay(x);\n        return x;\n    }\n    void Evert(SplayNode *x){//\u5c06\u7ed3\u70b9x\u53d8\u6210\u8fd9\u68f5\u6811\u4e2d\u7684\u6839 \n        if(x==NULL) return;\n        Access(x);\n        SplayNode::Splay(x);\n        x->isRev^=1;\n        x->Push_Down();\n        return;\n    }\n    bool isConnect(SplayNode *u,SplayNode *v){//\u5224\u65ad\u7ed3\u70b9u\u548c\u8282\u70b9v\u662f\u5426\u8fde\u901a \n        if(Find_Root(u)==Find_Root(v)) return true;//\u8fde\u901a\uff0c\u8fd4\u56detrue \n        else return false;\n    }\n    void Link(SplayNode *u,SplayNode *v){//\u8fde\u63a5\u7ed3\u70b9u\u548cv \n        if(isConnect(u,v)==true) return;\n        Evert(u);\n        SplayNode::Splay(u);\n        u->Push_Down();\n        Access(v);\n        SplayNode::Splay(v);\n        v->Push_Down();\n        u->Lson=v;\n        v->Fa=u;\n        v->Top=NULL;\n        u->Push_Up();\n        return;\n    }\n    void Cut(SplayNode *u,SplayNode *v){//\u5220\u9664\u7ed3\u70b9u\u548cv\u4e4b\u95f4\u7684\u8fb9 \n        if(isConnect(u,v)==false) return;//u\u548cv\u4e0d\u8fde\u901a\uff0c\u8be5\u8fb9\u4e0d\u5b58\u5728 \n        Evert(u);\n        Access(v);\n        SplayNode::Splay(v);\n        v->Push_Down();\n        if(v->Lson!=NULL){\n            if(v->Lson->Index!=u->Index) return;\n            if(v->Lson->Index==u->Index && v->Lson->Rson!=NULL) return;//\u8be5\u8fb9\u4e0d\u5b58\u5728 \n            v->Lson->Fa=NULL;\n            v->Lson->Top=NULL;\n            v->Lson=NULL;\n        }\n        v->Push_Up();\n        return;\n    }\n    void Change(SplayNode *x,int Val){//\u5c06\u7ed3\u70b9x\u7684\u6743\u503c\u6539\u4e3aVal \n        SplayNode::Splay(x);\n        x->Push_Down();\n        x->Value=Val;\n        x->Push_Up();\n        return;\n    }\n    int Query(SplayNode *u,SplayNode *v){//\u67e5\u8be2\u7ed3\u70b9u\u5230\u7ed3\u70b9v\u8def\u5f84\u4e0a\u7684xor\u548c \n        Evert(u);\n        SplayNode::Splay(u);\n        u->Push_Down();\n        Access(v);\n        SplayNode::Splay(v);\n        v->Push_Down();\n        return v->Sum;\n    }\n    void Add_Edge(int u,int v){//\u65b0\u5efa\u4e00\u6761\u8fde\u63a5u\u3001v\u7684\u8fb9 \n    \t//Node[Position[u]] \u8868\u793a\u4ece\u5185\u5b58\u6c60Node\u4e2d\u53d6\u5230\u6307\u5411\u7f16\u53f7\u4e3au\u7684\u7ed3\u70b9\u7684\u6307\u9488\t \n        Link(Node[Position[u]],Node[Position[v]]);\n        return;\n    }\n    void Destroy_Edge(int u,int v){//\u5220\u9664\u8fde\u63a5u\u3001v\u7684\u8fb9 \n        Cut(Node[Position[u]],Node[Position[v]]);\n        return;\n    }\n    void Change_Node(int u,int Add){//\u5c06\u7ed3\u70b9u\u7684\u6743\u503c\u6539\u4e3aAdd\n        Change(Node[Position[u]],Add);\n        return;\n    }\n    int Query_Line(int u,int v){//\u67e5\u8be2\u7ed3\u70b9u\u5230\u7ed3\u70b9v\u8def\u5f84\u4e0a\u7684xor\u548c \n        return Query(Node[Position[u]],Node[Position[v]]);\n    }\t\n};\n\nLinkCutTree LCT;//\u65b0\u5efa\u4e00\u68f5LCT \n\nint main(){\n    int N,M;\n    scanf(\"%d %d\",&N,&M);\n    for(register int i=1;i<=N;i++){\n        int Val;\n        scanf(\"%d\",&Val);\n        LCT.Build_Tree(i,Val);\n    }\n    while(M--){\n        int opt,u,v;\n        scanf(\"%d %d %d\",&opt,&u,&v);\n        if(opt==0) printf(\"%d\\n\",LCT.Query_Line(u,v));//\u67e5\u8be2\u7ed3\u70b9u\u5230\u7ed3\u70b9v\u8def\u5f84\u4e0a\u7684xor\u548c \n        else if(opt==1) LCT.Add_Edge(u,v);//\u65b0\u5efa\u4e00\u6761\u8fde\u63a5u\u3001v\u7684\u8fb9 \n        else if(opt==2) LCT.Destroy_Edge(u,v);//\u5220\u9664\u8fde\u63a5u\u3001v\u7684\u8fb9 \n        else if(opt==3) LCT.Change_Node(u,v);//\u4fee\u6539\u7ed3\u70b9\u7684\u6743\u503c\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1527678393,
        "uid": 28172,
        "name": "AE\u9171",
        "ccfLevel": 7,
        "title": "\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09"
    },
    {
        "content": "\u9605\u8bfb\u524d\u8bf7\u786e\u4fdd\u4f60\u4f1a$\\text{splay}$\u3002     \n$\\text{LinkCutTree}$\u6a21\u677f\uff0c\u7b80\u79f0$\\text{lct}$\u3002  \n\u9996\u5148\u6211\u4eec\u628a\u4e00\u68f5\u6811\u91cc\u6240\u6709\u8282\u70b9\u90fd\u5168\u90e8\u5212\u5206\u5728\u4e00\u4e9b$\\text{splay}$\u91cc,\u6bcf\u4e00\u4e2a$\\text{splay}$\u7ef4\u62a4\u7684\u4e1c\u897f\u90fd\u662f\u4e00\u6761\u5728\u539f\u6811\u4e0a\u4ece\u4e0a\u5230\u4e0b\u6309\u6df1\u5ea6\u9012\u589e\u7684\u4e00\u6761\u94fe\u3002      \n\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u6bcf\u6761\u8fb9\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u5b9e\u6216\u8005\u865a\u3002     \n\u5176\u4e2d\u5b9e\u8fb9\u4ee3\u8868\u7684\u662f\u5728\u67d0\u4e2a$\\text{splay}$\u5185\u90e8\u7684\u8fb9\uff0c\u800c\u865a\u8fb9\u5219\u662f\u67d0\u4e00\u4e2a$\\text{splay}$\u6240\u6307\u5411\u53e6\u4e00\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u8fb9\u3002      \n\u7136\u540e\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u5b9e\u94fe\u5256\u5206\u201d\u4e86\u3002\u800c\u6211\u4eec\u5927\u5bb6\u6240\u719f\u77e5\u7684\u6811\u5256\u5219\u662f\u201c\u91cd\u94fe\u5256\u5206\u201d\u3002          \n\u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u4e00\u770b\u5404\u79cd\u64cd\u4f5c\u3002       \n$\\text{access}$\u64cd\u4f5c    \n\u8fd9\u4e2a\u64cd\u4f5c\u4ee3\u8868\u7684\u662f\u6253\u901a\u4e00\u6761\u6839\u8282\u70b9\u5230\u73b0\u5728\u8282\u70b9\u7684\u5b9e\u94fe\u3002  \n\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u4ece\u4e0b\u5f80\u4e0a\u62c9\u3002     \n\u6bcf\u6b21\u8ba9\u8981\u64cd\u4f5c\u7684\u8282\u70b9\u6210\u4e3a\u5f53\u524d$\\text{splay}$\u7684\u6839\uff0c\u7136\u540e\u5c06\u5b83\u7684\u53f3\u5b50\u6811\u53d8\u6210$\\text{0}$\uff0c\u63a5\u7740\u5728\u6839\u636e\u865a\u8fb9\u5f80\u4e0a\u62c9\u3002   \n\u4f60\u4eec\u53ef\u4ee5\u753b\u4e00\u68f5\u6811\u51fa\u6765\uff0c\u66f4\u719f\u6089\u7684\u7406\u89e3\u4e00\u4e0b\u3002           \n**$\\text{access}$\u64cd\u4f5c\u662f$\\text{lct}$\u7684\u57fa\u7840\uff0c\u5176\u4ed6\u64cd\u4f5c\u5168\u662f\u5728$\\text{access}$\u7684\u57fa\u7840\u4e0a\u5b8c\u6210\u7684\u3002**     \n$\\text{makeroot}$\u64cd\u4f5c\u3002            \n\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u6362\u6839\u64cd\u4f5c\u3002   \n\u6211\u4eec\u5148\u8981\u77e5\u9053\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u6211\u4eec$\\text{access}$\u540e\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u5f53\u524d$\\text{splay}$\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u3002\uff08\u5e94\u8be5\u5bb9\u6613\u7406\u89e3\uff0c\u53ef\u4ee5\u81ea\u884c\u601d\u8003\u4e00\u4e0b\uff09\u3002     \n\u6b64\u65f6\u6211\u4eec\u518d\u8ba9\u6b64\u8282\u70b9\u6210\u4e3a\u5f53\u524d$\\text{splay}$\u7684\u6839\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u6ca1\u6709\u53f3\u5b50\u6811\u7684\u3002   \n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u6709\u4e00\u4e2a\u795e\u5947\u7684\u601d\u8def:     \n\u76f4\u63a5\u628a\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u4e0d\u5c31\u6210\u4e86\u6839\u4e86\u5417\uff1f      \n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u79cd\u601d\u8def\u662f\u53ef\u884c\u7684\u3002               \n$\\text{findroot}$\u64cd\u4f5c     \n\u627e$\\text{x}$\u6240\u5728\u7684\u6811\u4e2d\u7684\u6839\u3002\n\u6211\u4eec\u5148$\\text{access}$\u4e00\u6b21\uff0c\u7136\u540e\u518d$\\text{splay}$\u4e00\u6b21\u3002        \n\u6b64\u65f6\u7684\u6240\u6709\u70b9\u90fd\u5728\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811\u91cc\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u539f\u6765\u7684\u6811\u6839\u5c31\u662f\u76ee\u524d\u4e3a\u6b62\u4e00\u76f4\u5de6\u5b50\u6811\u5230\u6700\u540e\u4e00\u4e2a\u7684\u70b9\u3002     \n$\\text{split}$\u64cd\u4f5c        \n\u8fd9\u4e2a\u64cd\u4f5c\u7684\u542b\u4e49\u5b9a\u4e49\u4e3a\u62c9\u51fa\u4e00\u6761\u4ece$\\text{x}$\u5230$\\text{y}$\u7684\u94fe\u3002            \n\u6211\u4eec\u5148$\\text{makeroot(x)}$\uff0c\u7136\u540e$\\text{access(y)}$\uff0c\u6b64\u65f6\u7531\u4e8e$\\text{x}$\u662f\u6839\u8282\u70b9\uff0c\u6240\u4ee5$\\text{x}$\u548c$\\text{y}$\u5c31\u5904\u5728\u4e86\u540c\u4e00\u4e2a$\\text{splay}$\u4e2d\u3002      \n\u8fd9\u65f6\u6211\u4eec\u518d\u5c06$\\text{y}$\u53d8\u6210\u73b0\u5728$\\text{splay}$\u91cc\u7684\u6839\u5c31\u597d\u4e86\u3002        \n$\\text{link}$\n\u64cd\u4f5c            \n\u5b9a\u4e49\u542b\u4e49\u4e3a\u8fde\u63a5\u67d0\u4e00\u6761\u8fb9\u3002        \n\u6211\u4eec\u53d1\u73b0$\\text{makeroot}$\u4e4b\u540e\u7531\u4e8e\u662f\u6839\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u662f\u6ca1\u6709\u7236\u4eb2\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8d4b\u4e3a$\\text{y}$\u5c31\u597d\u4e86\u3002         \n$\\text{cut}$\u64cd\u4f5c       \n\u5b9a\u4e49\u4e3a\u5220\u6389$\\text{x}$\u5230$\\text{y}$\u7684\u8fb9\n\u6211\u4eec\u9996\u5148\u62c9\u51fa\u4e00\u6761\u4ece$\\text{x}$\u5230$\\text{y}$\u7684\u94fe\u3002   \n\u4e00\u822c\u6765\u8bf4$\\text{cut}$\u7684\u65f6\u5019\u4e00\u5b9a\u662f\u5b58\u5728$\\text{x}$\u5230$\\text{y}$\u7684\u8fb9\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u4ee5\u9632\u4e07\u4e00\uff0c\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u4e5f\u8981\u5904\u7406\u4e00\u4e0b\u3002      \n\u6709\u51e0\u79cd\u60c5\u51b5\uff1a       \n1:$\\text{y}$\u4e0d\u4ec5\u6709$\\text{x}$\u4e00\u4e2a\u513f\u5b50\u3002       \n2:$\\text{x}$\u7684\u7236\u4eb2\u4e0d\u662f$\\text{y}$       \n3:$\\text{x}$\u6709\u53f3\u5b69\u5b50\u3002       \n\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5199\u51fa$\\text{lct}$\u4e86\u3002     \n\u4e0a\u4ee3\u7801:         \n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#define il inline\nconst int maxn = 3e5 + 10; \nusing namespace std;\ntemplate<class T> il void rd(T& res) {\n    res = 0;char c;bool sign = 0;\n    for(c = getchar();!isdigit(c);c = getchar()) sign |= c == '-';\n    for(;isdigit(c);c = getchar()) res = (res << 1) + (res << 3) + (c ^ 48);    \n    (sign) && (res = -res);\n    return; \n} \nint n,m,i,j,k,root;     \nint ch[maxn][2],size[maxn],fa[maxn],val[maxn],sum[maxn];         \nbool tag[maxn],dbg;       \nil bool isroot(int o) {\n    return ch[fa[o]][0] != o && ch[fa[o]][1] != o;\n}  \nil void push_up(int o) {\n    size[o] = size[ch[o][0]] + size[ch[o][1]] + 1;\n    sum[o] = sum[ch[o][0]] ^ sum[ch[o][1]] ^ val[o];\n    return;\n}\nil void _swap(int& x,int& y) {\n    x ^= y ^= x ^= y;\n    return; \n}\nil void push_down(int o) {\n    if(tag[o]) {\n        _swap(ch[o][0],ch[o][1]); \n        tag[ch[o][0]] ^= 1;\n        tag[ch[o][1]] ^= 1;\n        tag[o] = 0;\n    }\n    return;\n}\nil int which(int o) {\n    return ch[fa[o]][1] == o;\n}\nil void rotate(int o) {\n    int f = fa[o],gf = fa[f],whi = which(o);    \n    if(!isroot(f)) ch[gf][which(f)] = o;      \n    ch[f][whi] = ch[o][whi ^ 1];\n    fa[ch[o][whi ^ 1]] = f;         \n    ch[o][whi ^ 1] = f;        \n    fa[f] = o;fa[o] = gf;       \n \tpush_up(f);push_up(o);\n    return;\t\n}            \nil void splay(int o) {\n    stack<int> sta;\n    while(!sta.empty()) sta.pop();sta.push(o);            \n    for(int i = o;!isroot(i);i = fa[i]) sta.push(fa[i]);             \n    while(!sta.empty()) push_down(sta.top()),sta.pop();\n    for(int f = fa[o];!isroot(o);rotate(o),f = fa[o]) {   \n        if(!isroot(f)) rotate(which(f) == which(o) ? f : o);     \n    //\tif(!dbg) printf(\"%d\\n\",o); \n    }    \n    push_up(o);\n    return;\n}                                 \nil void access(int o) {        \n    for(int y = 0;o;o = fa[y = o]) {           \n        splay(o);      \n        ch[o][1] = y;          \n        push_up(o);\n    }\n}    \nil int get_root(int o) {    \n    access(o);splay(o);\n    while(ch[o][0]) push_down(o),o = ch[o][0];    \n    return o;\n}\nil void make_root(int o) {\n    access(o);\n    splay(o);          \n    tag[o] ^= 1;\n    return; \t\n} \nil void link(int x,int y) {\n    make_root(x);    \n    fa[x] = y;\n}\nil void split(int x,int y) {\n    make_root(x);\n    access(y);\n    splay(y);        \n}\nil void cut(int x,int y) {\n    split(x,y);\n    if(ch[y][which(x) ^ 1] || fa[x] != y || ch[x][1]) return;\n    fa[x] = ch[y][0] = 0;\n    push_up(y);\n    return;\n}\nint main() {\n    rd(n);rd(m);   \n    for(int i = 1;i <= n;i++) rd(val[i]),sum[i] = val[i];\n    for(int i = 1,op,x,y;i <= m;i++) {\n        rd(op);rd(x);rd(y);     \n        switch(op) {\n            case 0: {\n                split(x,y);   \n                printf(\"%d\\n\",sum[y]);\n                break;\n            }\n            case 1: {            \n                if(get_root(x) != get_root(y)) link(x,y);\n                break;\n            }\n            case 2: {\n                if(get_root(x) == get_root(y)) cut(x,y);\n                break;\n            }\n            case 3: {\n                val[x] = y;\n                access(x);\n                splay(x);\n                push_up(x);\n                break;\n            }\n        }\n    }\n    return 0;\n}\n\n\n\n\n```\n",
        "postTime": 1552742466,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "LCT\uff0c\u662f\u8fde\u732b\u6811\uff08link-cat-tree\uff09\u7684\u7f29\u5199\u3002\u5b83\u662f\u6811\u94fe\u5256\u5206\u548csplay\u7684\u7ed3\u5408\u7248\u672c\u3002\n\n\u7531\u4e8e\u6709\u5f88\u591a\u5173\u4e8eLCT\u7684\u6587\u7ae0\u4ee5\u53ca\u8fd9\u5e76\u4e0d\u662f\u5bf9\u52b2\u7684\u6587\u7ae0\uff0c\u5e76\u4e0d\u5bf9\u52b2\u7684\u4eba\u5e76\u4e0d\u6253\u7b97\u8bb2\u5f97\u592a\u8be6\u7ec6\u3002\n\n\u63a8\u8350\uff1a\u8be6\u7ec6\u7684LCT\uff0d\uff1e[LCT](http://blog.csdn.net/wxjor/article/details/79512079)\n\n\u5f88\u5bf9\u52b2\u7684\u592a\u5200\u6d41\uff0d\uff1e[Destinies](http://www.cnblogs.com/gdc-destinies/)\n\n\u5e76\u4e0d\u5bf9\u52b2\u7684\u7247\u624b\u6d41\uff0d\uff1e[*\u2014\u2014*](http://www.cnblogs.com/xzyf/p/8549832.html)\n\n\u60f3\u5fc5\u5927\u5bb6\u90fd\u77e5\u9053splay+\u6811\u5256=LCT\n\nsplay\u867d\u7136\u5e38\u6570\u8f83\u5927\uff0c\u4f46\u662f\u5b83\u597d\u5199\u597d\u8c03\uff08\u5927\u90e8\u5206\u64cd\u4f5c\u90fd\u53ef\u4ee5\u628a\u5de6\u53f3\u8fb9\u754c\u8f6c\u4e0a\u53bb\u7136\u540e\u76f4\u63a5\u64cd\u4f5c\uff09\uff0c\u800c\u4e14\u8fd8\u80fd\u7ef4\u62a4\u5e8f\u5217\u3002\n\n\u6811\u5256\u662f\u5c06\u4e00\u68f5\u6811\u5207\u5206\u6210\u5f88\u591a\u6761\u94fe\uff0c\u518d\u5c06\u5b83\u4eec\u9996\u5c3e\u76f8\u63a5\u62fc\u6210\u4e00\u4e2a\u5e8f\u5217\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5e8f\u5217\uff0c\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u80fd\u63d2\u5165\u548c\u5220\u9664\u3002\n\n\u90a3\u4e48\u7528splay\u6765\u7ef4\u62a4\u533a\u95f4\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63d2\u5165\u548c\u5220\u9664\u4e86\u5462\uff1f\u60f3\u5fc5\u662f\u53ef\u4ee5\u7684\u3002\u4f46\u662f\u63d2\u5165\u548c\u5220\u9664\u4f1a\u5bfc\u81f4\u5b50\u6811\u5927\u5c0f\u6709\u53d8\u5316\uff0c\u8fd9\u6837\u8f7b\u91cd\u94fe\u5256\u5206\u5c31\u4e0d\u9002\u7528\u4e86\u3002\u4e0d\u8fc7\uff0c\u548csplay\u7c7b\u4f3c\u5730\uff0c\u867d\u7136\u542c\u4e0a\u53bb\u5f88\u7384\u5b66\uff0c\u4f46\u662f\u671f\u671b\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u88ab\u8bc1\u660e\u4e3alog\u7ea7\u522b\u7684\uff1b\u548csplay\u7c7b\u4f3c\u5730\uff0c\u5e76\u4e0d\u5bf9\u52b2\u7684\u4eba\u5e76\u4e0d\u4f1a\u8bc1\u660e\u3002\n\n\u8bb2\u8bb2\u51e0\u4e2a\u64cd\u4f5c\u5427\uff1a\n\n1.\u4e0a/\u4e0b\u4f20\u6807\u8bb0\uff0c\u5224\u65ad\u662f\u5de6/\u53f3\u513f\u5b50\n\n```cpp\nvoid mark(int u){if(u)swap(ls,rs),re[u]^=1;}\nvoid pu(int u){sum[0]=0,sum[u]=sum[ls]^sum[rs]^key[u],sum[0]=0;}\nvoid pd(int u){if(re[u])mark(ls),mark(rs),re[u]=0;}\nint getso(int u){return son[fa[u]][0]==u?0:1;}\n\n```\n\n\u548csplay\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u4e3a\u4e86\u9632\u6b62\u4e0d\u5c0f\u5fc3pushup(0)\uff0cpushup\u65f6\u53ef\u4ee5\u5728\u8ba1\u7b97\u524d\u540e\u90fd\u5f3a\u884c\u4ee4sum[0]=0\u3002\n\n\u603b\u7ed3push up&down\u51fa\u73b0\u7684\u5730\u65b9\uff1a\n\npushup\uff1arotate\uff0caccess\uff08\u4ece\u4e0b\u5f80\u4e0a\uff09\uff1b\n\npushdown\uff1asplay\uff0cgetroot\uff08\u4ece\u4e0a\u5f80\u4e0b\uff09\uff1b\n\n2.\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u4e3asplay\u7684\u6839\n\n```cpp\nint notrt(int u){return son[fa[u]][0]==u||son[fa[u]][1]==u;}\n\n```\nsplay\u76f4\u63a5\u5224\u65ad\u6709\u6ca1\u6709\u7236\u4eb2\uff08\u6211\uff09\u3002\u4f46\u662fLCT\u662f\u7531\u5f88\u591a\u68f5\u5bf9\u5e94\u4e00\u6761\u91cd\u94fe\u7684splay\u7ec4\u6210\u7684\u3002\u8fd9\u6837\u3010\u540c\u4e00\u6811\u7684\u4e0d\u540csplay\u3011\u4e3a\u4e86\u4e0e\u3010\u540c\u4e00splay\uff08\u7236\u3001\u5b50\u5173\u7cfb\u90fd\u6709\uff09\u3011\u548c\u3010\u4e0d\u540c\u6811\uff08\u7236\u3001\u5b50\u5173\u7cfb\u90fd\u6ca1\u6709\uff09\u3011\u533a\u5206\uff0c\u662f\u6709\u3010\u8ba4\u7236\uff08\u6211\uff09\u4e0d\u8ba4\u5b50\uff08\u4f60\uff09\u3011\u7684\u89c4\u5b9a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csplay\u7684\u6839\u53ef\u80fd\u6709\u7236\u4eb2\uff08\u6211\uff09\uff0c\u4f46\u662f\u5b83\u7684\u7236\u4eb2\uff08\u6211\uff09\u672a\u5fc5\u8ba4\u5b83\u8fd9\u4e2a\u513f\u5b50\uff08\u4f60\uff09\u3002\n\n3.\u65cb\u8f6c\uff08rotate\uff09\n\n```cpp\nvoid rot(int u)\n{\n    int fu=fa[u],ffu=fa[fu],l=getso(u),fl=getso(fu),rson=son[u][l^1];\n    if(notrt(fu))son[ffu][fl]=u;son[fu][l]=rson,son[u][l^1]=fu, fa[rson]=fu,fa[u]=ffu,fa[fu]=u;\n    pu(rson),pu(fu),pu(u),pu(ffu);\n}\n```\n\n\u548csplay\u533a\u522b\u4e0d\u5927\u3002\u4f46\u662f\u88ab\u65cb\u8f6c\u70b9u\u7684\u7956\u7236\u53ef\u80fd\u548cu\u4e0d\u5728\u540c\u4e00\u68f5splay\u4e0a\uff0c\u8981\u5224\u65ad\u65cb\u8f6c\u70b9\u7684\u7236\u4eb2\u662f\u4e0d\u662f\u6839\u3002\n\n4.\u4f38\u5c55\uff08splay\uff09\n\n```cpp\nvoid splay(int u)\n{\n    int v=u;top=0,st[++top]=v;while(notrt(v))st[++top]=v=fa[v];\n    while(top)pd(st[top--]);\n    while(notrt(u)){int fu=fa[u];if(notrt(fu))rot(getso(u)^getso(fu)?u:fu);rot(u);}\n}\n```\n\n\u5728\u666e\u901a\u7684splay\u4e2d\uff0c\u53ea\u6709\u4ece\u6839\u8d70\u5230\u67d0\u4e2a\u70b9\u624d\u80fd\u5c06\u8fd9\u4e2a\u70b9\u4f38\u5c55\uff0c\u8fd9\u6837\u80af\u5b9a\u7ecf\u8fc7\u4e86\u3010\u6839\u5230\u67d0\u70b9\u7684\u8def\u5f84\u3011\uff0c\u90a3\u4e48\u8def\u5f84\u4e0a\u7684\u6240\u6709\u6807\u8bb0\u5e94\u8be5\u5df2\u7ecf\u88ab\u4e0b\u4f20\u4e86\u3002\u4f46\u662fLCT\u4e2d\uff0c\u5e76\u4e0d\u4f1a\u4ece\u6839\u8d70\u5230\u90a3\u4e2a\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u90a3\u4e2a\u70b9\u4e0a\u9762\u53ef\u80fd\u6709\u672a\u4e0b\u4f20\u7684\u6807\u8bb0\u3002\u6240\u6709\u8981\u5148\u4e0b\u4f20\u3010\u6839\u5230\u67d0\u70b9\u7684\u8def\u5f84\uff08\u662fsplay\u7684\u6839\uff01\uff01\uff09\u3011\u4e0a\u7684\u6240\u6709\u6807\u8bb0\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u3002\n\n5.\u5c06\u3010\u6839\u5230\u67d0\u70b9\u7684\u8def\u5f84\u3011\u53d8\u6210\u91cd\u94fe\uff08access\uff09\n\n```cpp\nvoid acs(int u){for(int v=0;u;v=u,u=fa[u])splay(u),rs=v,pu(u);}\n```\n\n\u65e0\u8bba\u600e\u4e48\u6539\u91cd\u94fe\uff0c\u5b83\u4eec\u90fd\u4f1a\u8fd8\u5728\u540c\u4e00\u68f5\u6811\u91cc\uff0c\u6240\u4ee5\u4e0d\u7528\u6539\u7236\u4eb2\uff08\u6211\uff09\u3002\n\n6.\u6c42\u51fa\u67d0\u70b9\u6240\u5728\u6811\u7684\u6839\uff08getroot\uff09\n\n```cpp\nint getrt(int u){acs(u),splay(u);while(u){pd(u);if(!ls)break;u=ls;}return u;}\n```\n\nsplay\u7ef4\u62a4\u7684\u5e8f\u5217\u4e2d\u7684\u6570\u7684\u987a\u5e8f\u662f\u5148\u8d70\u91cd\u94fe\u7684DFS\u5e8f\uff0c\u6240\u4ee5\u6839\u5728DFS\u5e8f\u4e2d\u80af\u5b9a\u6bd4\u67d0\u70b9\u9760\u524d\u3002\u628a\u6839\u548c\u8be5\u70b9\u653e\u5728\u540c\u4e00\u4e2asplay\u540e\uff0csplay\u7ef4\u62a4\u7684\u5e8f\u5217\u7684\u6700\u524d\u9762\u7684\u90a3\u4e2a\u6570\u5c31\u662f\u6839\u3002\n\n7.\u5c06\u67d0\u70b9\u53d8\u6210\u6839\uff08chroot\uff09\n\n```cpp\nvoid chrt(int u){acs(u),splay(u),mark(u);}\n```\n\n\u5c06\u8be5\u70b9access\u540e\uff0c\u4f1a\u53d1\u73b0\u5b83\u6070\u5de7\u662f\u8fd9\u6761\u91cd\u94fe\u7684splay\u5bf9\u5e94\u7684\u5e8f\u5217\u4e2d\u6700\u9760\u540e\u7684\u3002\u800c\u6839\u662f\u6700\u9760\u524d\u7684\u3002\u6240\u4ee5\u628a\u5e8f\u5217\u7ffb\u8f6c\u5c31\u884c\u4e86\u3002\n\n8.\u6c42\u67d0\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u548c\uff08getroad\uff09\n\n```cpp\nvoid getrd(int u,int v){chrt(u),acs(v),splay(v);}\n```\n\n\u8ba9\u4e00\u70b9\u4e3a\u6839\uff0c\u4f7f\u4e24\u70b9\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u3002\u8fd9\u65f6\u8fd9\u68f5splay\u7ef4\u62a4\u7684\u5e8f\u5217\u4e2d\u6700\u9760\u524d\u7684\u662f\u6839\uff0c\u6700\u9760\u540e\u7684\u662f\u53e6\u4e00\u4e2a\u70b9\uff0c\u8fd9\u68f5splay\u5c31\u662f\u60f3\u8981\u6c42\u548c\u7684\u90e8\u5206\u3002\n\n9.\u5c06\u4e24\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff08link\uff09\n\n```cpp\nvoid link(int u,int v){chrt(u);if(getrt(v)!=u)fa[u]=v;}\n```\n\n\u5c06\u4e00\u4e2a\u70b9\u8f6c\u5230\u6839\u540e\u5224\u65ad\u53e6\u4e00\u4e2a\u70b9\u7684\u6839\u662f\u4e0d\u662f\u5b83\u3002\u7531\u4e8egetroot\u662f\u5df2\u7ecf\u5c06\u53e6\u4e00\u4e2a\u70b9\u8f6c\u5230splay\u7684\u6839\uff0c\u76f4\u63a5\u6309\u3010\u8ba4\u7236\u4e0d\u8ba4\u5b50\u3011\u7684\u89c4\u5219\u5c06\u5728\u6811\u6839\u7684\u70b9\u63a5\u5230\u5728splay\u6839\u7684\u70b9\u4e0a\u3002\u5408\u5e76\u4e4b\u540e\u8fd9\u68f5\u6811\u7684\u6839\u662fv\u6240\u5728splay\u7684\u6700\u9760\u524d\u7684\u70b9\u3002\n\n10.\u65ad\u5f00\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\uff08cat\uff09\n\n```cpp\nvoid cat(int u,int v){chrt(u);if(getrt(v)==u&&fa[u]==v&&!rs)fa[u]=son[v][0]=0;pu(v);}\n```\n\n\u8fd8\u662f\u5c06\u4e00\u4e2a\u70b9\u8f6c\u5230\u6839\u3002\u5148\u5224\u65adv\u662f\u4e0d\u662f\u5728\u4ee5u\u4e3a\u6839\u7684\u6811\u4e0a\uff08\u8fd9\u65f6v\u5df2\u7ecf\u5728splay\u6839\u4e0a\u4e86\uff09\uff0c\u518d\u5224\u65ad\u5b83\u4eec\u5728splay\u7684\u5e8f\u5217\u4e2d\u662f\u5426\u76f8\u90bb\u3002\u4e24\u6761\u90fd\u6ee1\u8db3\u5c31\u53ef\u4ee5\u65ad\u4e86\uff0c\u8981\u628a\u7236\u5b50\u5173\u7cfb\u90fd\u65ad\u5e72\u51c0\u3002splay\u6839\u7684\u513f\u5b50\u60c5\u51b5\u6539\u53d8\uff0c\u6240\u4ee5\u9700\u8981pushup\u3002\n",
        "postTime": 1521182294,
        "uid": 33242,
        "name": "echo6342",
        "ccfLevel": 0,
        "title": "\u5e76\u4e0d\u5bf9\u52b2\u7684LCT"
    },
    {
        "content": "Link-Cut Tree\u662f\u4e00\u79cd\u901a\u8fc7\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u52a8\u6001\u6811\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\u3002\n\nLink-Cut Tree\u91c7\u7528\u7c7b\u4f3c\u6811\u94fe\u5256\u5206\u7684\u8f7b\u91cd\u8fb9\u8def\u5f84\u5256\u5206\uff0c\u628a\u6811\u8fb9\u5206\u4e3a\u5b9e\u8fb9\u548c\u865a\u8fb9\uff0c\u901a\u5e38\u7528 Splay \u6765\u7ef4\u62a4\u6bcf\u4e00\u6761\u5b9e\u8def\u5f84\u3002\u6bcf\u4e00\u6761\u8def\u5f84\u4e0a\u7684Splay\u90fd\u4ee5\u6df1\u5ea6\u4e3a\u5173\u952e\u5b57\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2aSplay\u7ef4\u62a4\u7684\u90fd\u662f\u4e00\u6761\u5728\u539f\u6811\u4e2d\u6df1\u5ea6\u4e25\u683c\u9012\u589e\u7684\u8def\u5f84\uff0c\u4e14\u4e2d\u5e8f\u904d\u5386Splay\u5f97\u5230\u7684\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u5e8f\u5217\u4e25\u683c\u9012\u589e\u3002LCT\u548c\u6811\u94fe\u5256\u5206\u90fd\u5c5e\u4e8e\u5bf9\u6811\u4e0a\u94fe\u8fdb\u884c\u5206\u6cbb\u7ef4\u62a4\uff0c\u4f46\u666e\u901a\u6811\u5256\u4f9d\u9760\u91cd\u94fe\u5256\u5206\uff0c\u800cLCT\u4f9d\u9760\u7684\u662f\u5b9e\u94fe\u5256\u5206\u8fdb\u884c\u7ef4\u62a4\u3002  \n\nLink-Cut Tree \u7684\u57fa\u672c\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a\u5747\u644a $O(logn)$\uff0c\u4f46\u5e38\u6570\u8f83\u5927\uff0c\u4e00\u822c\u5b9e\u9645\u6548\u7387\u4f4e\u4e8e\u6811\u5256\u3002  \n\n\u4e00\u68f5 LCT \u4e0a\u7684\u8fb9\u5206\u4e3a\u4e24\u79cd\uff1a\u5b9e\u8fb9\u548c\u865a\u8fb9\u3002\u6bcf\u4e00\u79cd\u8fb9\u90fd\u662f\u6709\u5411\u7684\uff0c\u7531\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9\u3002LCT\u5c06\u67d0\u4e00\u4e2a\u513f\u5b50\u7684\u8fde\u8fb9\u5212\u5206\u4e3a\u5b9e\u8fb9\uff0c\u800c\u8fde\u5411\u5176\u4ed6\u5b50\u6811\u7684\u8fb9\u5212\u5206\u4e3a\u865a\u8fb9\u3002  \n\nLCT\u4e0e\u6811\u94fe\u5256\u5206\u7684\u533a\u522b\u5728\u4e8eLCT\u7684\u865a\u5b9e\u8fb9\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\uff0c\u56e0\u6b64\u8981\u4f7f\u7528\u66f4\u7075\u6d3b\u7684Splay\u6765\u7ef4\u62a4\u6bcf\u4e00\u6761\u7531\u82e5\u5e72\u5b9e\u8fb9\u8fde\u63a5\u800c\u6210\u7684\u5b9e\u94fe\u3002\u5b9e\u8fb9\u76f8\u5f53\u4e8e\u4e00\u68f5Splay\u5185\u90e8\u8fde\u63a5\u7684\u8fb9\uff0c\u865a\u8fb9\u76f8\u5f53\u4e8eSplay\u4e4b\u95f4\u4e92\u76f8\u8fde\u63a5\u7684\u8fb9\u3002  \n\nLCT\u5e38\u5e38\u7528\u4e8e\u7ef4\u62a4\u94fe\u4e0a\u4fe1\u606f\uff0c\u6362\u6839\u64cd\u4f5c\uff0c\u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u6027\u7b49\u64cd\u4f5c\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint x=0; int f=1; char ch=getchar();\n\twhile(!isdigit(ch)) {if(ch=='-')f=-1; ch=getchar();}\n\twhile(isdigit(ch)) {x=x*10+ch-'0'; ch=getchar();}\n\treturn x*f;\n}\n\nconst int MAXN = 300005;\nint dat[MAXN],s[MAXN],st[MAXN];\nint rev[MAXN],fa[MAXN],ch[MAXN][2];\nint n,q;\n\ninline void pushup(int x)\n\t{s[x]=s[ch[x][0]]^s[ch[x][1]]^dat[x];}\n\ninline void pushr(int x)\n\t{swap(ch[x][0],ch[x][1]),rev[x]^=1;}\n\ninline void pushdown(int x)\n{\n\tif(!rev[x]) return;\n\tif(ch[x][0]) pushr(ch[x][0]);\n\tif(ch[x][1]) pushr(ch[x][1]);\n\trev[x]=0;\n}\n\ninline bool notroot(int x)\n\t{return ch[fa[x]][0]==x || ch[fa[x]][1]==x;}\n\ninline void rotate(int x)\n{\n\tint y=fa[x],z=fa[y];\n\tint k=ch[y][1]==x,w=ch[x][k^1];\n\tif(notroot(y)) ch[z][ch[z][1]==y]=x;\n\tch[x][k^1]=y; ch[y][k]=w;\n\tif(w) fa[w]=y;\n\tfa[y]=x,fa[x]=z;\n\tpushup(y);\n}\n\ninline void splay(int x)\n{\n\tint y=x,z=0; st[++z]=y;\n\twhile(notroot(y)) st[++z]=y=fa[y];\n\twhile(z) pushdown(st[z--]);\n\twhile(notroot(x))\n\t{\n\t\ty=fa[x],z=fa[y];\n\t\tif(notroot(y))\n\t\t\trotate((ch[z][1]==y)^(ch[y][1]==x) ? x : y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\n\ninline void access(int x)\n{\n\tfor(int y=0; x; x=fa[x])\n\t\tsplay(x),ch[x][1]=y,pushup(x),y=x;\n}\n\ninline void makeroot(int x)\n\t{access(x),splay(x),pushr(x);}\n\ninline void split(int x,int y)\n\t{makeroot(x),access(y),splay(y);}\n\ninline void link(int x,int y)\n\t{split(x,y),fa[x]=y;}\n\ninline void cut(int x,int y)\n{\n\tsplit(x,y);\n\tif(fa[x]!=y) return;\n\tch[y][0]=fa[x]=0;\n\tpushup(y);\n}\n\ninline int query(int x,int y)\n\t{split(x,y); return s[y];}\n\nint main(int argc, char const *argv[])\n{\n\tn=read(); q=read();\n\tfor (int i = 1; i <= n; ++i)\n\t\tdat[i]=read();\n\tint opt,x,y;\n\twhile(q--)\n\t{\n\t\topt=read(); x=read(); y=read();\n\t\tif(opt==0) printf(\"%d\\n\", query(x,y));\n\t\tif(opt==1) link(x,y);\n\t\tif(opt==2) cut(x,y);\n\t\tif(opt==3) splay(x),dat[x]=y;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574161691,
        "uid": 107735,
        "name": "shiroi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n$$\\color{violet}{\\mathcal{LCT}}$$\n# Link-Cut-Tree\n\u524d\u7f6e\u829d\u58eb\uff1aSplay  \u63a8\u8350\u5148\u505a[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problem/P3391)\n\n\u4e3a\u4ec0\u4e48\u8981\u7528Splay\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u8981\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\uff08\u76ee\u524d\u6211\u6240\u89c1\u5230\u7684\u533a\u95f4\u7ffb\u8f6c\u7528\u5230\u7684\u57fa\u672c\u4e0a\u90fd\u662fSplay\u548cFHQ~~Splay\u592a\u5f3a\u4e86\uff01\uff01\uff01~~\uff09\n\nLCT\u5c5e\u4e8e\u6811\u94fe\u5256\u5206\uff0c\u786e\u5207\u5730\u8bb2\u5e94\u8be5\u662f\u5b9e\u94fe\u5256\u5206\u3002 \u7c7b\u4f3c\u4e8e\u91cd\u94fe\u5256\u5206\uff0c\u4e0d\u518d\u8fc7\u591a\u8d58\u8ff0~~\u61d2~~\u3002LCT\u7ef4\u62a4\u7684\u662f\u68ee\u6797\u7684\u8fde\u901a\u6027\u95ee\u9898\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4ed6\u53ebLink\uff08\u94fe\u63a5\uff09-Cut\uff08\u5207\u65ad\uff09-Tree\uff08\u6811~~\u68ee\u6797~~\uff09\u7684\u539f\u56e0\u3002\u5e76\u4e14\u6211\u4eec\u7528Splay\u6765\u7ef4\u62a4\u4e00\u6761\u5b9e\u8def\u5f84\u3002Splay\u7684\u5927\u5c0f\u6807\u51c6\u662f\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u76f4\u63a5\u5f00\u8bb2\u3002\u3002\u3002\n\nLCT\u6700\u6838\u5fc3\u64cd\u4f5c\uff0cAccess\uff08x\uff09\uff0c\u6253\u901a\u4ecex\u5230\u4ed6\u6240\u5728\u6811\u7684\u6839\u7ed3\u70b9\u7684\u8def\u5f84\uff08\u4f7f\u8fd9\u6761\u8def\u5f84\u4e0a\u5168\u662f\u5b9e\u8fb9\uff09\u3002\u8fd9\u4e2a\u64cd\u4f5c\u592a\u91cd\u8981\u4e86\u3002\u3002\u3002\u600e\u4e48\u5199\u5462\uff1f\n\n\u4e0d\u65ad\u8df3fa\uff0c\u5e76\u7236\u5b50\u76f8\u8ba4\uff08\u5c31\u662f\u628a\u8fd9\u6761\u8def\u5f84\u53d8\u4e3a\u4e86\u5b9e\u8fb9\uff09\u3002\n```cpp\ninline void access(node *x) {for(node *y = NULL;x;x = (y = x) -> fa) splay(x) , x -> ch[1] = y , x -> up();}\n```\nmakeroot\uff08x\uff09\uff0c\u628a\u8fd9\u4e2a\u70b9\u53d8\u4e3a\u6839\uff0c\u5c31\u662f\u8981\u628a\u4ed6\u5230\u539f\u6839\u8282\u70b9\u7684\u8def\u5f84\u7ffb\u8f6c\uff0c\u80af\u5b9a\u4e0d\u80fd\u66b4\u529b\uff0c\u4e8e\u662f\u7528\u5230Splay\u6253\u6807\u8bb0\uff08\u8bb0\u5f97\u4e0b\u653e\u54e6\uff0c\u4e0d\u7136\u4f1a\u6b7b\u7684\u5f88\u60e8\uff01\uff01\uff01\uff09\u3002\n\u5148\u7528access\u5f00\u8def\uff0csplay\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u6253\u4e0a\u6807\u8bb0\uff0c\u5b8c\u4e8b\u3002\n```cpp\ninline void makeroot(node *x) { access(x); splay(x); x -> tag ^= 1;}\n```\nfindroot\uff0c\u627e\u5230\u6839\u8282\u70b9\u3002access\u5f00\u8def\uff0csplay\u8f6c\u4e0a\u53bb\uff0c\u6839\u7684\u6df1\u5ea6\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u4e0d\u65ad\u627e\u5de6\u513f\u5b50\u5c31\u884c\u4e86\u3002\n```cpp\ninline node *findroot(node *x)\n\t{\n\t\taccess(x) , splay(x);\n\t\twhile(x -> down() , x -> ch[0]) x = x -> ch[0];\n\t\treturn x;\n\t}\n```\nlink\uff0c\u8fde\u63a5\u4e24\u4e2a\u70b9\uff0c\u8ba9\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u518d\u8ba9\u53e6\u4e00\u4e2a\u70b9\u5f53\u4ed6\u7684fa\u5c31\u884c\u4e86\n```cpp\ninline void link(node *x,node *y)\n\t{\n\t\tif(findroot(x) == findroot(y))\treturn;\n\t\tmakeroot(x); x -> fa = y;\n\t}\n```\ncut\uff0c\u5207\u65ad\u4e00\u6761\u8fb9\uff0c\u8ba9x\u6210\u4e3a\u6839\uff0caccess\uff08y\uff09\uff0c\u5219y\u4e00\u5b9a\u662fx\u7684\u513f\u5b50\uff0c\u518d\u628aysplay\u4e0a\u53bb\uff0cx\u4e00\u5b9a\u662fy\u7684\u5de6\u513f\u5b50\uff0c\u7236\u5b50\u4e0d\u76f8\u8ba4\u5373\u53ef\u3002\n```cpp\ninline void cut(node *x,node *y)\n\t{\n\t\tmakeroot(x); access(y); splay(y);\n\t\tif(y -> ch[0] == x)\ty -> ch[0] = x -> fa = NULL;\n\t}\n```\n\n\u4fee\u6539\uff0c\u7ef4\u62a4splay\u5373\u53ef\u3002\n```cpp\ninline void chenge(node *x,int y) {splay(x); x -> val = y; x -> up();}\n\tinline int query(node *x,node *y) {makeroot(x); access(y); splay(y); return y -> sum;}\n```\n\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int N = 100005;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m;\nstruct Link_Cut_Tree\n{\n\tstruct node\n\t{\n\t\tnode *ch[2] , *fa;\n\t\tint val , sum , tag;\n\t\tnode(int val = 0,int sum = 0,int tag = 0) : val(val) , sum(sum) , tag(tag) {ch[0] = ch[1] = fa = NULL;}\n\t\tinline bool ntr() {return fa && (fa -> ch[0] == this || this == fa -> ch[1]);}\n\t\tinline bool isr() {return this == fa -> ch[1];}\n\t\tinline void up() \n\t\t{\n\t\t\tsum = val;\n\t\t\tif(ch[0]) sum ^= ch[0] -> sum;\n\t\t\tif(ch[1]) sum ^= ch[1] -> sum;\n\t\t}\n\t\tinline void down()\n\t\t{\n\t\t\tif(!tag) return;\n\t\t\tswap(ch[0],ch[1]);\n\t\t\tif(ch[0]) ch[0] -> tag ^= 1;\n\t\t\tif(ch[1]) ch[1] -> tag ^= 1;\n\t\t\ttag = 0;\n\t\t}\n\t}*root[N] , *st[N];\n\tint top = 0;\n\tinline void rot(node *x)\n\t{\n\t\tbool k = x -> isr();\n\t\tnode *y = x -> fa , *z = y -> fa , *w = x -> ch[!k]; \n\t\tif(y -> ntr())\tz -> ch[y -> isr()]\t = x;\n\t\tx -> ch[!k] = y; y -> ch[k] = w;\n\t\ty -> fa = x; x -> fa = z;\n\t\tif(w) w -> fa = y;\n\t\ty -> up(); x -> up(); \n\t}\n\tinline void splay(node *x)\n\t{\n\t\tst[top = 1] = x;\n\t\twhile(st[top] -> ntr()) st[top + 1] = st[top] -> fa , top ++;\n\t\twhile(top) st[top --] -> down();\n\t\twhile(x -> ntr())\n\t\t{\n\t\t\tif(x -> fa -> ntr()) rot(x -> isr() ^ x -> fa -> isr() ? x : x -> fa);\n\t\t\trot(x);\n\t\t}\n\t}\n\tinline void access(node *x) {for(node *y = NULL;x;x = (y = x) -> fa) splay(x) , x -> ch[1] = y , x -> up();}\n\tinline void makeroot(node *x) { access(x); splay(x); x -> tag ^= 1;}\n\tinline node *findroot(node *x)\n\t{\n\t\taccess(x) , splay(x);\n\t\twhile(x -> down() , x -> ch[0]) x = x -> ch[0];\n\t\treturn x;\n\t}\n\tinline void link(node *x,node *y)\n\t{\n\t\tif(findroot(x) == findroot(y))\treturn;\n\t\tmakeroot(x); x -> fa = y;\n\t}\n\tinline void cut(node *x,node *y)\n\t{\n\t\tmakeroot(x); access(y); splay(y);\n\t\tif(y -> ch[0] == x)\ty -> ch[0] = x -> fa = NULL;\n\t}\n\tinline void chenge(node *x,int y) {splay(x); x -> val = y; x -> up();}\n\tinline int query(node *x,node *y) {makeroot(x); access(y); splay(y); return y -> sum;}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1 , val;i <= n;i ++) { val = read();root[i] = new node(val,val);}\n\t\tfor(int i = 1 , opt , x , y;i <= m;i ++)\n\t\t{\n\t\t\topt = read(); x = read(); y = read();\n\t\t\tif(opt == 0) printf(\"%d\\n\",query(root[x],root[y]));\n\t\t\tif(opt == 1) link(root[x],root[y]);\n\t\t\tif(opt == 2) cut(root[x],root[y]);\n\t\t\tif(opt == 3) chenge(root[x],y);\n\t\t}\t\t\t\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1569321404,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    },
    {
        "content": "LCT\u6a21\u677f\u9898\u3002\u3002\u3002\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u5f31\u7684cut\u3002\u3002\u3002\n\n\u539f\u6765\u7528**STL stack\u5bb3\u6b7b\u4eba**\uff0c\u5404\u79cdTLE\u5361\u4e0d\u8fc7\u53bb\uff0c\u624b\u6253\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u70b9\u5feb\u4e861000ms\u3002\u3002\u3002\n\n\u770b\u6765\u4e0d\u8981\u8f7b\u4fe1\u6807\u51c6\u5e93\n\n\u53d1\u4e00\u6ce2LCT\u8bb2\u89e3\u94fe\u63a5[link-cut tree](http://blog.csdn.net/tgop\\_knight/article/details/44539555)\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std\nconst int maxn=320000\nint cnt[maxn]\nint s[maxn]\nint fa[maxn]\nint ch[maxn][2]\nbool rev[maxn]\nstatic inline void pushup(const int o):\n    s[o]=s[ch[o][0]] xor s[ch[o][1]] xor cnt[o]\nstatic inline void pushdown(const int o):\n    if(rev[o]):\n        swap(ch[o][0],ch[o][1])\n        int t\n        if((t=ch[o][0])):\n            rev[t]=not rev[t]\n        if((t=ch[o][1])):\n            rev[t]=not rev[t]\n        rev[o]=false\nstatic inline int get(const int o):\n    return ch[fa[o]][1]==o\nstatic inline bool isroot(const int o):\n    return ch[fa[o]][0]!=o&&ch[fa[o]][1]!=o\nstatic void rotate(const int l2):\n    const int l1=fa[l2]\n    const int l0=fa[l1]\n    const int g2=get(l2)\n    const int l3=ch[l2][not g2]\n    const int g1=get(l1)\n    if(not isroot(l1)):\n        ch[l0][g1]=l2\n    fa[l2]=l0\n    ch[l1][g2]=l3\n    if(l3):\n        fa[l3]=l1\n    ch[l2][not g2]=l1\n    fa[l1]=l2\n    pushup(l1)\nstatic void splay(const int o):\n    static int stk[maxn]\n    int cnt=0\n    stk[cnt++]=o\n    for(int i=o;not isroot(i);stk[cnt++]=i=fa[i])\n    for(;--cnt>=0;pushdown(stk[cnt]))\n    while(not isroot(o)):\n        if(not isroot(fa[o])):\n            rotate(get(o)==get(fa[o])?fa[o]:o)\n        rotate(o)\n    pushup(o)\nstatic void access(int o):\n    for(int t=0;o;):\n        splay(o)\n        ch[o][1]=t\n        t=o\n        o=fa[o]\nstatic inline void makeroot(const int o):\n    access(o)\n    splay(o)\n    rev[o]=not rev[o]\nstatic inline void link(const int a,const int b):\n    makeroot(a)\n    fa[a]=b\nstatic inline void modify(const int o,const int v):\n    splay(o)\n    cnt[o]=v\n    pushup(o)\nstatic void cut(const int a,const int b):\n    makeroot(a)\n    access(b)\n    splay(b)\n    if(ch[b][0]==a):\n        ch[b][0]=fa[a]=0\nstatic inline int query(const int a,const int b):\n    makeroot(a)\n    access(b)\n    splay(b)\n    return s[b]\nstatic int findroot(int o):\n    access(o)\n    splay(o)\n    for(;ch[o][0];o=ch[o][0])\n    return o\nstatic void awd():\n    int n,m\n    scanf(\"%d%d\",&n,&m)\n    for(int i=1;i<=n;++i):\n        scanf(\"%d\",cnt+i)\n        s[i]=cnt[i]\n    while(m--):\n        int op,a,b\n        scanf(\"%d%d%d\",&op,&a,&b)\n        if(op==0):\n            printf(\"%d\\n\",query(a,b))\n        else if(op==1):\n            if(findroot(a)!=findroot(b)):\n                link(a,b)\n        else if(op==2):\n            cut(a,b)\n        else if(op==3):\n            modify(a,b)\nint main():\n    return awd(),0\n```",
        "postTime": 1492747374,
        "uid": 35091,
        "name": "tttnns",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3690 \u3010\u3010\u6a21\u677f\u3011Link Cut Tree \uff08\u52a8\u6001\u6811\uff09\u3011"
    }
]