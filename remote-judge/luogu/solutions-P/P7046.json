[
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32\u3002\u7ef4\u62a4\u4e00\u4e2a\u7531\u5176\u5b50\u4e32\u6784\u6210\u7684\u96c6\u5408\u3002\u652f\u6301\u63d2\u5165\u64cd\u4f5c\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u4e32\uff09\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u662f\u96c6\u5408\u4e2d $>k$ \u4e2a\u5143\u7d20\u7684\u540e\u7f00\u3002\n\n\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u540e\u56de\u7b54\uff1a\u6709\u51e0\u4e2a\u5b57\u7b26\u4e32\u662f\u597d\u7684\uff0c\u6700\u957f\u7684\u597d\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u591a\u5c11\u3002\n## \u9898\u89e3\n\u9996\u5148\u5efa\u51fa\u540e\u7f00\u81ea\u52a8\u673a\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5176\u4e2d\u6709\u7528\u7684\u90e8\u5206\u662f\u540e\u7f00\u81ea\u52a8\u673a\u7684 parent \u6811\u3002\n\n\u901a\u8fc7 parent \u6811\u7684\u6027\u8d28\uff0c\u6211\u4eec\u77e5\u9053\u4efb\u4f55\u4e00\u6761**\u70b9\u5230\u6839**\u7684\u8def\u5f84\u4ee3\u8868\u4e00\u4e2a**\u5b50\u4e32**\u3002\u540c\u6837\uff0c\u4e00\u4e2a\u5b50\u4e32 $s$ \u662f\u53e6\u4e00\u4e2a\u5b50\u4e32 $s'$ \u7684\u540e\u7f00\u5f53\u524d\u4ec5\u5f53 $s$ \u5728\u540e\u7f00\u6811\u4e0a\u7684\u4f4d\u7f6e\u662f $s'$ \u5230\u6839\u8def\u5f84\u4e0a\u7684\u67d0\u4e2a\u8282\u70b9/\u8fb9\u3002\n\n\u6211\u4eec\u8bd5\u56fe\u8ba9\u6240\u6709\u5b50\u4e32\u5b9a\u4f4d\u5230\u70b9\u4e0a\u3002\u4f46\u662f\u5b9a\u4f4d\u5e76\u4e0d\u603b\u662f\u6210\u529f\u7684\uff0c\u56e0\u4e3a\u6709\u4e00\u4e9b\u70b9\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u88ab\u76f4\u63a5\u7f29\u53bb\u4e86\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5b9a\u4f4d\u5230\u7684\u662f\u4e00\u6761\u8fb9\u3002\n\n\u6240\u4ee5\u4e00\u4e2a\u5b50\u4e32\u8981\u4e48\u5b9a\u4f4d\u5230\u4e00\u4e2a\u56fa\u5b9a\u7684\u70b9\uff0c\u8981\u4e48\u5bf9\u5e94\u5230\u4e00\u6761\u56fa\u5b9a\u8fb9\u4e0a\u7684\u4e00\u4e2a\u88ab\u201c\u538b\u7f29\u201d\u6389\u7684\u8282\u70b9\u3002\n\n\u5177\u4f53\u7684\u5b9a\u4f4d\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u6811\u4e0a\u500d\u589e\u662f\u5176\u4e2d\u4e00\u79cd\u3002\u5373\u9884\u5904\u7406\u51fa\u540e\u7f00\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5f80\u4e0a\u8df3 $i$ \u4e2a\u7236\u4eb2\u7684\u7ed3\u679c\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u4e8e\u500d\u589e $\\text{LCA}$ \u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n\n\u627e\u5230\u6bcf\u4e2a\u5b50\u4e32\u7684\u5bf9\u5e94\u4f4d\u7f6e\u540e\uff0c\u7531\u4e8e\u8fd9\u9053\u9898\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u4e0d\u59a8\u79bb\u7ebf\u8bfb\u5165\u6240\u6709\u5b50\u4e32\uff0c\u5168\u90e8\u63d2\u5165\u8fdb\u540e\u7f00\u6811\u4e2d\uff0c\u88ab\u201c\u538b\u7f29\u201d\u6389\u7684\u8282\u70b9\u590d\u539f\u51fa\u6765\uff0c\u5f62\u6210\u4e00\u9897\u65b0\u7684\u6811\u3002\n\n\u6bd4\u5982\u6837\u4f8b\u5efa\u51fa\u7684\u6811\u5c31\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/htxrlcwi.png)\n\n\u5176\u4e2d $\\varnothing$ \u8868\u793a\u7684\u662f\u7a7a\u4e32\uff08\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u5e94\u8be5\u662f\u5728\u4e00\u8d77\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u62c6\u6210\u4e24\u4e2a\u70b9\uff09\uff0c\u70b9 $1$ \u81f3 $6$ \u5bf9\u5e94\u662f parent \u6811\u4e0a\u7684\u70b9\uff0c$7$ \u81f3 $11$ \u5bf9\u5e94\u662f\u56e0\u8be2\u95ee\u800c\u63d2\u5165\u7684\u70b9\u3002\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u65b0\u5efa\u4e86\u4e00\u4e2a\u70b9\u3002\u8fd9\u6837\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u590d\u6742\u5ea6\u53d8\u52a3\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u65b0\u6811\u7684\u70b9\u6743\u4e3a\u5176\u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0e\u5728\u540e\u7f00\u6811\u4e0a\u7236\u4eb2\u7684\u957f\u5ea6\u4e4b\u5dee\u3002\u5373 $w_u=len_u-len_{fa_u}$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c $u$ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u662f\u597d\u7684\uff0c\u90a3\u4e48 $u$ \u5230 $fa_u$ \u8fb9\u4e0a\u7684\u6240\u6709\u88ab\u7f29\u6389\u70b9\u8868\u793a\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u597d\u7684\uff0c\u603b\u4e2a\u6570\u5c31\u662f $w_u$ \u4e2a\u3002\n\n\u8fd9\u6837\u539f\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u70b9\u67d3\u8272\uff0c\u5b9a\u4e49\u5b50\u6811\u5927\u5c0f\u662f\u5b50\u6811\u4e2d\u67d3\u8272\u70b9\u7684\u6570\u91cf\uff0c\u8981\u6c42\u6bcf\u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u6ee1\u8db3\u5b50\u6811\u5927\u5c0f $>k$ \u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c \u4e0e $len_u$ \u7684\u6700\u5927\u503c\u3002\n\n\u968f\u7740\u65b0\u70b9\u7684\u63d2\u5165\uff0c\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e00\u5b9a\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002\u540c\u6837\uff0c\u4efb\u53d6\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u4ece\u5e95\u5411\u4e0a\u5176\u5b50\u6811\u5927\u5c0f\u4e5f\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002\n\n\u800c\u6839\u636e parent \u6811\u7684\u6027\u8d28\uff0c\u4ece\u5e95\u5411\u4e0a\u7684 $len_u$ \u59cb\u7ec8\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u6761\u94fe\uff0c\u5f53\u6211\u4eec\u786e\u5b9a\u4e86\u8fd9\u6761\u94fe\u7684\u6700\u6df1\u7684\u70b9\uff0c\u4f7f\u5f97\u5176\u6ee1\u8db3\u5b50\u6811\u5927\u5c0f $>k$ \u540e\uff0c\u8fd9\u6761\u94fe\u4e0a\u6240\u6709\u6df1\u5ea6\u6bd4\u5b83\u5c0f\u7684\u70b9\u90fd\u662f\u7b26\u5408\u6761\u4ef6\u7684\u3002\n\n\u540c\u65f6\u5b83\u7684 $len_u$ \u4e5f\u662f\u6700\u957f\u7684\u3002\u6240\u4ee5\u8fd9\u6837\u6700\u6df1\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u7684\u6df1\u5ea6\u968f\u65b0\u70b9\u7684\u63d2\u5165\u4e5f\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u65b0\u6811\u4f7f\u7528\u8f7b\u91cd\u94fe\u5256\u5206\u3002\u5373\u5bf9\u4e8e\u4e00\u6761\u94fe\u6211\u4eec\u7ef4\u62a4\u5176\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u5bf9\u5e94\u524d\u7f00 $[1,l]\\ +1$\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\u66b4\u529b\u5224\u65ad\u6700\u6df1\u7684\u70b9\u4f1a\u4e0d\u4f1a\u5f80\u4e0b\u79fb\u52a8\u3002\u5982\u679c\u4f1a\u90a3\u4e48\u66b4\u529b\u66f4\u65b0\u6700\u6df1\u7684\u70b9\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u4fee\u6539\u7b54\u6848\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u4fee\u6539\u64cd\u4f5c\u6211\u4eec\u8981 $O(1)$ \u8fdb\u884c\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6700\u6df1\u7684\u70b9\u662f\u4e00\u6b65\u4e00\u6b65\u5411\u4e0b\u8df3\u7684\uff0c\u8003\u8651\u5dee\u5206\uff0c\u5148\u7ed9\u603b\u6743\u503c $+1$\uff0c\u518d\u7ed9 $l+1$ \u4f4d\u7f6e $-1$\uff0c\u610f\u601d\u662f\u8fd9\u6b21 $+1$ \u5230 $l+1$ \u4f4d\u7f6e\u5c31\u5931\u6548\u4e86\u3002\u6bcf\u6b21\u66f4\u65b0\u6700\u6df1\u7684\u70b9\u65f6\u52a0\u4e0a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u4ee3\u4ef7\u5373\u53ef\u3002\n\n\u7279\u522b\u7684\uff0c\u5047\u5982\u66f4\u65b0\u4f4d\u7f6e\u5df2\u7ecf\u9ad8\u4e8e\u6700\u6df1\u70b9\u4f4d\u7f6e\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd9\u6b21\u66f4\u65b0\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\uff0c\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef\u3002\n\n\u7531\u4e8e\u603b\u94fe\u957f\u662f $O(n)$\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u70b9\u67d3\u8272\u9700\u8981\u8df3 $\\log n$ \u6761\u94fe\uff0c\u52a0\u4e0a\u9884\u5904\u7406\u65f6\u500d\u589e\u7684 $O(\\log n)$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)\\log n)$\uff0c\u7a7a\u95f4 $O(n\\log n)$\u3002\n\n\u6ce8\u610f\u8fd9\u9898\u6709\u4e00\u4e2a\u5751\u70b9\uff0c\u5c31\u662f\u5982\u679c\u63d2\u5165\u672c\u8d28\u76f8\u540c\u7684\u5b50\u4e32\u5e94\u5f53\u53ea\u7b97\u4e00\u6b21\u3002\u8fd9\u4e2a\u5728\u63d2\u5165\u65f6\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n#include<set>\n#define ll long long\n#define N 1000010\n#define D 25\nusing namespace std;\nint nxt[N<<2],to[N<<2],head[N<<1],rcnt;\nvoid add(int u,int v){nxt[++rcnt]=head[u];to[rcnt]=v;head[u]=rcnt;}\nint las=1,scnt=1,fa[N<<1],f[N][D],ch[N][26],len[N<<1],acnt,k;\nint insert(int c)\n{\n    int p=las,q=las=++scnt;\n    len[q]=len[p]+1;\n    for(;p && !ch[p][c];p=fa[p]) ch[p][c]=q;\n    if(!p) fa[q]=1;\n    else\n    {\n        int np=ch[p][c];\n        if(len[np]==len[p]+1) fa[q]=np;\n        else\n        {\n            int nq=++scnt;\n            memcpy(ch[nq],ch[np],sizeof(ch[nq]));\n            len[nq]=len[p]+1;\n            fa[nq]=fa[np];\n            fa[np]=fa[q]=nq;\n            for(;p && ch[p][c]==np;p=fa[p]) ch[p][c]=nq;\n        }\n    }\n    return q;\n}\nint pos[N],nd[N];\nvector<int>ad[N];\nset<int>s[N];\nbool cmp(int a,int b){return len[a]<len[b];}\nint work()\n{\n    int l,r;\n    scanf(\"%d%d\",&l,&r);\n    int u=pos[r];\n    ++acnt;\n    len[acnt]=r-l+1;\n    for(int i=D-1;i>=0;i--)\n        if(f[u][i] && len[f[u][i]]>=len[acnt]) u=f[u][i];\n    if(s[u].count(r-l+1)) return 0;//\u7279\u5224\u91cd\u590d\u7684\u63d2\u5165\n    s[u].insert(r-l+1);\n    ad[u].push_back(acnt);\n    return acnt;\n}\nvoid build()\n{\n    for(int i=2;i<=scnt;i++)\n    {\n        int p=fa[i];sort(ad[i].begin(),ad[i].end(),cmp);//\u6309\u957f\u5ea6\u6392\u5e8f\u540e\u4f9d\u6b21\u8fde\u8fb9\u5373\u53ef\n        for(int v:ad[i]) add(p,v),p=v;\n        add(p,i);\n    }\n}\nint son[N<<1],siz[N<<1],dep[N<<1],ldep[N<<1];\nvoid dfs1(int u)\n{\n    siz[u]=1;\n    ldep[u]=1;\n    for(int i=head[u];i;i=nxt[i])\n    {\n        int v=to[i];dep[v]=dep[u]+1;\n        fa[v]=u;\n        dfs1(v);\n        if(siz[v]>siz[son[u]]) son[u]=v;\n        siz[u]+=siz[v];\n    }\n    ldep[u]=ldep[son[u]]+1;\n}\nint ar[N*20],par;\nint* _new(int k){par+=k;return ar+(par-k);}//\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u51cf\u5c0f\u5e38\u6570\nint* b[N<<1];int g[N<<1],d[N<<1];\nint top[N<<1],pp[N<<1];\nvoid dfs2(int u,int topp)\n{\n    top[u]=topp;\n    if(son[u]) dfs2(son[u],topp);\n    for(int i=head[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(v!=son[u]) dfs2(v,v);\n    }\n    if(u==topp) b[u]=_new(ldep[u]+1),pp[u]=u;\n}\nll ans;int res;\nvoid upd(int u)\n{\n    if(dep[u]<dep[pp[top[u]]]) return;\n    b[top[u]][dep[u]-dep[top[u]]+1]--;g[top[u]]++;\n    u=top[u];\n    while(pp[u])\n    {\n        if(g[u]+b[u][dep[pp[u]]-dep[u]]>k)\n        {\n            ans+=len[pp[u]]-len[fa[pp[u]]];\n            res=max(res,len[pp[u]]);\n            g[u]+=b[u][dep[pp[u]]-dep[u]];\n            pp[u]=son[pp[u]];\n        }\n        else break;\n    }\n}\nvoid ins(int u){for(;u;u=fa[top[u]]) upd(u);}\nchar str[N];\nint main()\n{\n    int n,m;\n    scanf(\"%d%d%d%s\",&n,&m,&k,str+1);\n    for(int i=1;i<=n;i++) pos[i]=insert(str[i]-'a');\n    for(int i=1;i<=scnt;i++) f[i][0]=fa[i];\n    for(int j=1;j<D;j++)\n        for(int i=1;i<=scnt;i++) f[i][j]=f[f[i][j-1]][j-1];\n    acnt=scnt;\n    for(int i=1;i<=m;i++) nd[i]=work();\n    for(int i=1;i<=scnt;i++) s[i].clear();\n    build();\n    len[0]=-1;\n    dfs1(1);dfs2(1,1);\n    for(int i=1;i<=m;i++)\n    {\n        if(nd[i]) ins(nd[i]);\n        printf(\"%lld %d\\n\",ans,res);\n    }\n    return 0;\n}\n```",
        "postTime": 1604407770,
        "uid": 52902,
        "name": "Flying2018",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7046 \u3010\u300cMCOI-03\u300d\u8bd7\u97f5\u3011"
    },
    {
        "content": "$\\text{SAM}$ \u597d\u9898\uff01\u524d\u6392\u819c\u62dc\u51fa\u9898\u4eba\u3002\n\n#### \u524d\u7f6e\u829d\u58eb\uff1aSAM\u3001\u6811\u4e0a\u500d\u589e\u3001\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n\n\u770b\u5230\u9898\u76ee\u4e2d\u97f5\u811a\u7684\u5b9a\u4e49\u662f\u6700\u957f\u516c\u5171\u540e\u7f00\u957f\u5ea6\uff0c\u800c\u4e14 $N\\le 5\\times 10^5$ \u53ea\u9700 $\\text{2.33s}$\uff0c\u53ef\u4ee5\u731c\u6d4b\u662f\u4e00\u9053\u6b63\u5b97\u7684 $\\text{SAM}$ \u9898\u3002\n\n\u5bf9\u5b57\u7b26\u4e32\u5efa\u51fa $\\text{SAM}$\uff0c\u7528\u6811\u4e0a\u500d\u589e\u5c06\u4e32\u6302\u5728 $\\text{SAM}$ \u7684\u5bf9\u5e94\u4f4d\u7f6e\u3002\u82e5\u76f4\u63a5\u5728\u7ebf\u505a\uff0c\u8981\u652f\u6301\u7ef4\u62a4\u94fe\u5e76\u7684\u6570\u636e\u7ed3\u6784\uff0c~~\u603b\u4e4b\u6211\u4e0d\u4f1a~~\uff0c\u6240\u4ee5\u8003\u8651\u53cd\u7740\u505a\uff0c\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u3002\u56e0\u4e3a\u53ea\u6709\u63d2\u5165\u64cd\u4f5c\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u6700\u591a\u53ea\u6709 $|P|+1$ \u79cd\uff0c$|P|$ \u4e3a\u6302\u5728\u8fd9\u4e2a\u7ed3\u70b9\u4e32\u7684\u4e2a\u6570\u3002\u7b97\u51fa\u8fd9\u4e9b\u8d21\u732e\u5bf9\u5e94\u7684\u65f6\u95f4\u8f74\u533a\u95f4\uff0c\u5c31\u53ef\u4ee5\u5728\u7b54\u6848\u5e8f\u5217\u5dee\u5206\u4e00\u4e0b\uff0c\u6700\u540e\u7edf\u4e00\u7b97\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u7b97\u4e00\u4e2a\u8282\u70b9\u4e0d\u540c\u8d21\u732e\u7684\u65f6\u95f4\u8f74\u533a\u95f4\u3002\n\n\u7531\u4e8e\u8d5b\u4e2d\u6ca1\u6253\uff0c\u8d5b\u540e\u60f3\u4e86\u4e24\u5929\uff0c\u60f3\u5230\u4e86\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684\u65b9\u6cd5\u3002\n\n$\\text{SAM}$ \u4e0a\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u957f\u5ea6\u533a\u95f4\u662f $(len_{fa_p},len_p]$\u3002\u8bbe\u6302\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u957f\u5ea6\u5e8f\u5217\u4e3a $l_0=len_{fa_p},l_1,l_1,...,l_{|P|},l_{|P|+1}=len_p$\uff0c\u6211\u4eec\u7b97 $l_{i}-l_{i-1}(1\\le i\\le |P|+1)$ \u7684\u8d21\u732e\u3002\n\n\u4f7f\u8fd9\u6bb5\u6709\u8d21\u732e\u7684\u6700\u5c0f\u7684 $T$ \u8981\u6ee1\u8db3\u4ece\u8fd9\u4e2a\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e2a\u8282\u70b9\u4e0a $\\ge l_i$ \u7684\u4e32\u7684\u4e2a\u6570+\u8fd9\u4e2a\u8282\u70b9\u5728 $\\text{parent}$ \u6811\u4e0a\u5b50\u6811\uff08\u4e0d\u5305\u62ec\u6b64\u8282\u70b9\uff09\u7684\u4e32\u7684\u4e2a\u6570 $>K$\u3002\u524d\u8005\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8282\u70b9\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff1b\u540e\u8005\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u8005 $\\text{dfs}$ \u5e8f\u4e0a\u4e3b\u5e2d\u6811\u3002\u76f4\u63a5\u4e8c\u5206+\u9a8c\u8bc1\u663e\u7136\u4f1a $\\text{TLE}$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u3002\u65f6\u95f4 $\\mathcal{O}((n+m)\\log n)$\u3002\n\n~~\u81ea\u5df1\u611f\u89c9\u5199\u7684\u8fd8\u662f\u633a\u7b80\u6d01\u7684~~\n\n\u6ce8\u610f\uff0c\u7a7a\u4e32\u8981\u7279\u5224\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define fi first\n#define se second\nconst int maxn=1000005;\nconst int inf=0x3f3f3f3f;\nint n,m,k,ch[maxn][26],fa[maxn],len[maxn],pos[maxn],f[maxn][21],last=1,cnt=1;\nchar s[maxn]; ll ans[maxn][2];\nvector<int> g[maxn];\nvector<pii> p[maxn];\ninline void insert(int c,int id)\n{\n\tint p=last,q=++cnt; len[q]=len[p]+1,last=pos[id]=q;\n\tfor(;p && !ch[p][c];p=fa[p]) ch[p][c]=q;\n\tif(!p) fa[q]=1;\n\telse\n\t{\n\t\tint r=ch[p][c];\n\t\tif(len[r]==len[p]+1) fa[q]=r;\n\t\telse\n\t\t{\n\t\t\tint s=++cnt; len[s]=len[p]+1;\n\t\t\tmemcpy(ch[s],ch[r],sizeof(ch[r]));\n\t\t\tfa[s]=fa[r],fa[r]=fa[q]=s;\n\t\t\tfor(;p && ch[p][c]==r;p=fa[p]) ch[p][c]=s;\n\t\t}\n\t}\n}\ninline void jump(int l,int r,int id)\n{\n\tint L=r-l+1,x=pos[r];\n\tfor(int i=20;i>=0;i--)\n\t\tif(f[x][i] && len[f[x][i]]>=L) x=f[x][i];\n\tp[x].push_back(pii(L,id));\n}\nint rt[maxn],ls[maxn*24],rs[maxn*24],sum[maxn*24],S[maxn<<2],sz;\nvoid modify(int rt,int l,int r,int u,int v)\n{\n\tS[rt]+=v;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tif(u<=mid) modify(rt<<1,l,mid,u,v);\n\telse modify(rt<<1|1,mid+1,r,u,v);\n}\nvoid update(int &rt,int l,int r,int u,int v)\n{\n\tif(!rt) rt=++sz,ls[rt]=rs[rt]=sum[rt]=0;\n\tsum[rt]+=v;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tif(u<=mid) update(ls[rt],l,mid,u,v);\n\telse update(rs[rt],mid+1,r,u,v);\n}\nint merge(int x,int y)\n{\n\tif(!x || !y) return x|y;\n\tls[x]=merge(ls[x],ls[y]);\n\trs[x]=merge(rs[x],rs[y]);\n\tsum[x]=sum[ls[x]]+sum[rs[x]];\n\treturn x;\t\n}\nint query(int u,int v,int l,int r,int k)\n{\n\tif(l==r) return sum[u]+S[v]<=k?l:0;\n\tint mid=(l+r)>>1,siz=sum[ls[u]]+S[v<<1];\n\tif(k<siz) return query(ls[u],v<<1,l,mid,k);\n\telse return max(mid,query(rs[u],v<<1|1,mid+1,r,k-siz));\n}\nvoid dfs(int x)\n{\n\tfor(auto y:g[x])\n\t\tdfs(y),rt[x]=merge(rt[x],rt[y]);\n\tsort(p[x].begin(),p[x].end());\n\tint sz=(int)p[x].size();\n\tfor(int i=sz-1;i>0;i--)\n\t\tif(p[x][i].fi!=p[x][i-1].fi)\n\t\t{\n\t\t\tif(p[x][i].se>0 && p[x][i].se<=m)\n\t\t\t\tmodify(1,1,m,p[x][i].se,1);\n\t\t\tif(sum[rt[x]]+S[1]>k)\n\t\t\t{\n\t\t\t\tint T=query(rt[x],1,1,m,k)+1;\n\t\t\t\tif(T<=m)\n\t\t\t\t\tans[T][0]=max(ans[T][0],(ll)p[x][i].fi),ans[T][1]+=p[x][i].fi-p[x][i-1].fi; \n\t\t\t}\t\n\t\t}\n\tfor(int i=sz-1;i>0;i--)\n\t\tif(p[x][i].fi!=p[x][i-1].fi && p[x][i].se>0 && p[x][i].se<=m)\n\t\t\tmodify(1,1,m,p[x][i].se,-1),update(rt[x],1,m,p[x][i].se,1);\n}\nint main()\n{\n\tscanf(\"%d%d%d%s\",&n,&m,&k,s+1);\n\tfor(int i=1;i<=n;i++) insert(s[i]-'a',i);\n\tfor(int i=2;i<=cnt;i++) g[fa[i]].push_back(i);\n\tfor(int i=1;i<=cnt;i++) f[i][0]=fa[i];\n\tfor(int j=1;j<=20;j++)\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\tf[i][j]=f[f[i][j-1]][j-1];\n\tfor(int i=2;i<=cnt;i++) p[i].push_back(pii(len[fa[i]],0));\n\tint l,r;\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d\",&l,&r),jump(l,r,i);\n\tfor(int i=2;i<=cnt;i++) p[i].push_back(pii(len[i],inf));\n\tdfs(1),ans[k+1][1]++;\n\tfor(int i=1;i<=m;i++)\n\t\tans[i][0]=max(ans[i][0],ans[i-1][0]),ans[i][1]+=ans[i-1][1],printf(\"%lld %lld\\n\",ans[i][1],ans[i][0]);\n\treturn 0;\n}\n```",
        "postTime": 1604408411,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P7046 \u3010\u300cMCOI-03\u300d\u8bd7\u97f5\u3011"
    },
    {
        "content": "\u5728[\u6211\u7684\u535a\u5ba2](https://oierwanhong.cc/2020/11/03/Luogu%20P7046%20%E3%80%8CMCOI-03%E3%80%8D%E8%AF%97%E9%9F%B5/)\u4e2d\u67e5\u770b\n\n\n\u7ed9\u4e00\u4e2a\u4e32 $ T $ \uff0c\u548c\u4e00\u4e2a\u5927\u5c0f\u4e3a $ m $ \u7684\u5b50\u4e32\u96c6\u5408 $ \\{T[l_i,r_i]|1\\le i\\le m\\} $ ,\u8bb0\u4e3a $ S $ .\u548c\u4e00\u4e2a\u5b9a\u503c $ K $ .\n\n\u5b9a\u4e49 $ \\text{CS}(A) $ \u8868\u793a $ A $ \u4e2d\u6240\u6709\u4e32\u7684 CS\uff08\u516c\u5171\u540e\u7f00\uff09\u7684\u96c6\u5408\u3002\n\n\u6c42 $ |{\\bigcup_{A\\subset S,|A|>K}}\\ \\text{CS(A)}| $ \u548c $ \\max_{A\\subset S,|A|>K}\\max(\\text{CS(A)}) $ .\n\n $ |T|\\le 5\\times 10^5,m\\le 5\\times 10^5,0\\le K\\le m. $   \u53ef\u80fd\u5f62\u5f0f\u5316\u4e4b\u540e\u53cd\u800c\u4e0d\u592a\u6e05\u695a\u4e86\uff0c\u53ef\u4ee5\u53bb\u770b\u770b\u539f\u9898\u9762\u3002\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u91cd\u5de5\u4e1a\u505a\u6cd5\u3002\n\n\n\u5148\u5efa T \u7684 SAM\u3002\u5bf9\u4e8e\u6bcf\u4e2a $ T[l_i,r_i] $ \u6211\u4eec\u627e\u5230\u5176\u5728SAM\u4e0a\u7684\u5bf9\u5e94\u8282\u70b9\uff08\u6700\u6d45\u7684\u6ee1\u8db3 $ maxlen\\ge r_i-l_i+1 $ \u7684\u70b9\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u4e32\u7684\u957f\u5ea6\u6070\u597d\u7b49\u4e8e\u8be5\u70b9\u7684 $ maxlen $ \uff0c\u90a3\u4e48\u5176\u8d21\u732e\u5c31\u662f\u8be5\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u51fa\u73b0\u6b21\u6570+1\uff1b\u5426\u5219\u5bf9\u8fd9\u4e2a\u70b9\u6765\u8bf4\uff0c\u957f\u5ea6 $ \\le r_i-l_i+1 $ \u7684\u4e32\u51fa\u73b0\u6b21\u6570+1\uff0c\u7136\u540e\u7956\u5148\u7684\u51fa\u73b0\u6b21\u6570+1.\u4e00\u4e2a\u70b9\u8868\u793a\u7684\u4e0d\u540c\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u4e0d\u540c\u5f88\u96be\u641e\uff0c\u5e72\u8106\u76f4\u63a5\u7ed9\u8fd9\u4e2a\u5b50\u4e32\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u653e\u5728\u539f\u672c\u7684\u70b9\u548c\u539f\u672c\u7684\u7236\u4eb2\u4e2d\u95f4\uff0c\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u8868\u793a\u7684\u6240\u6709\u4e32\u51fa\u73b0\u6b21\u6570\u90fd\u76f8\u540c\uff08\u8fd9\u6837\u52a0\u70b9\u540e\u6211\u4eec\u4ecd\u7136\u4fdd\u7559\u4e86parent \u6811\u6700\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5373\u7956\u5148\u8868\u793a\u7684\u4e32\u90fd\u662f\u5f53\u524d\u4e32\u7684\u540e\u7f00\uff09\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u8981\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n0. \u5728\u4e00\u6761\u94fe\u4e0a\u627e\u5230\u4e00\u4e2a\u6700\u6d45\u7684\u70b9\u6ee1\u8db3 $ maxlen\\ge r-l+1 $ .\u540c\u65f6\u53ef\u80fd\u8981\u5728\u8fd9\u4e2a\u70b9\u548c\u5176\u7236\u4eb2\u4e2d\u52a0\u5165\u4e00\u4e2a\u70b9\n1. \u94fe\u4e0a\u6240\u6709\u70b9\u51fa\u73b0\u6b21\u6570+1\n2. \u8be2\u95ee\u6574\u68f5\u6811\u4e0a\u6240\u6709\u6ee1\u8db3\u51fa\u73b0\u6b21\u6570 $ >k $ \u7684\u5b50\u4e32\u7684\u6570\u91cf\u548c\u6700\u5927\u957f\u5ea6\u3002\n\n~~\u4ec0\u4e48\u6bd2\u7624~~\n\n\u5bf9\u4e8e\u64cd\u4f5c0\uff0c\u7531\u4e8e\u8981\u52a8\u6001\u52a0\u70b9\uff0c\u500d\u589e\u6ca1\u6cd5\u7ef4\u62a4\uff0c\u90a3\u5c31\u7528 LCT \u7ef4\u62a4\uff0c\u5e76\u4ee4 splay \u4e0a\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u4e2d\u6700\u5927len\u503c\uff0c\u627e\u4e00\u4e2a\u6700\u6d45\u7684\u6ee1\u8db3 $ maxlen\\ge r-l+1 $ \u7684\u70b9\u5c31\u5148`access`\u7136\u540e\u5728 splay \u4e0a\u4e8c\u5206\u627e\u3002\n\n\u6b64\u5916\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5148\u505a\u5b8c\u6240\u67090\u64cd\u4f5c\u518d\u53bb\u505a1\u548c2\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u5373\u5bf9\u4e8e\u64cd\u4f5c1,2\uff0c\u6811\u662f\u9759\u6001\u7684\u3002\n\n\u4f46\u8fd8\u662f\u4e0d\u592a\u53ef\u505a\uff0c\u5f3a\u884c\u505a\u53ef\u80fd\u4f1a\u51fa\u73b0\u6811\u5256\u7136\u540e\u6811\u5957\u6811\u7684\u8be1\u5f02\u4e1c\u897f\u3002\u8f6c\u800c\u8003\u8651\u79bb\u7ebf\uff0c\u5bf9\u52a0\u70b9\u540e\u7684 SAM \u4e0a\u6bcf\u4e2a\u70b9\u6c42\u5176\u51fa\u73b0\u6b21\u6570 $ >k $ \u7684\u6700\u65e9\u65f6\u95f4\u3002\u8fd9\u4e1c\u897f\u6211\u4eec\u53ef\u4ee5\u6574\u4f53\u4e8c\u5206\uff0c\u7136\u540e\u94fe\u52a0\u53d8\u6210\u5355\u70b9\u4fee\u6539\u8be2\u95ee\u5b50\u6811\u548c\uff0c\u5c31\u53ef\u4ee5\u5728dfs\u5e8f\u4e0a\u5efa\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e86\u3002\n\n\u4ee4\u52a0\u70b9\u540e\u7684 parent \u6811\u70b9\u6570\u4e3a $ n $ ,\u5219\u590d\u6742\u5ea6\u5206\u6790\u5982\u4e0b\uff1a\n\n0\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u662f $ \\mathcal O(m\\log n) $ ,log \u662f LCT \u7684 log\u3002LCT \u53ea\u8981\u7528\u6709\u6839\u6811 LCT\uff0c\u6240\u4ee5\u5e38\u6570\u4e5f\u4e0d\u592a\u5927\u3002\n\n1\u548c2\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6 $ \\mathcal O((n+m)\\log^ 2n) $ .\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u7206\u5c0f\uff0c\u6240\u4ee5\u80fd\u8fc7\u3002\n\n```cpp\n/**********/\n#define MAXN 2000011\nint n,m,k,dfn[MAXN],edn[MAXN],cur;\nnamespace BIT\n{\n\tint t[MAXN];\n#define lowb (i&-i)\n\tvoid modify(int i,int k)\n\t{\n\t\twhile(i<=cur)t[i]+=k,i+=lowb;\n\t}\n\tint Qsum(int i)\n\t{\n\t\tint res=0;\n\t\twhile(i)res+=t[i],i-=lowb;\n\t\treturn res;\n\t}\n\tint Qsum(int l,int r){ return Qsum(r)-Qsum(l-1);}\n}\n\nnamespace SAM\n{\n\tint t[MAXN/2][26],pre[MAXN],len[MAXN];\n\tint last=1,tot=1;\n\tvoid extend(int w)\n\t{\n\t\tint pos=last,cur=++tot;\n\t\tlen[cur]=len[pos]+1,last=cur;\n\t\twhile(pos&&!t[pos][w])t[pos][w]=cur,pos=pre[pos];\n\t\tif(!pos){pre[cur]=1;return;}\n\t\tint nxt=t[pos][w];\n\t\tif(len[nxt]==len[pos]+1)pre[cur]=nxt;\n\t\telse\n\t\t{\n\t\t\tint tmp=++tot;\n\t\t\tlen[tmp]=len[pos]+1,memcpy(t[tmp],t[nxt],sizeof t[nxt]);\n\t\t\tpre[tmp]=pre[nxt],pre[cur]=pre[nxt]=tmp;\n\t\t\twhile(pos&&t[pos][w]==nxt)t[pos][w]=tmp,pos=pre[pos];\n\t\t}\n\t}\n}\nstruct LCT\n{\n    int fa[MAXN],son[MAXN][2],mx[MAXN];\n    void init(){for(int i=2;i<=SAM::tot;++i)fa[i]=SAM::pre[i];}\n    bool not_root(int x){return son[fa[x]][0]==x||son[fa[x]][1]==x;}\n    void pushup(int x){mx[x]=max(SAM::len[x],max(mx[son[x][0]],mx[son[x][1]]));}\n\tvoid rotate(int x)\n    {\n        int y=fa[x],z=fa[y],k=(son[y][1]==x);\n        if(not_root(y))son[z][son[z][1]==y]=x;\n        fa[x]=z;\n        son[y][k]=son[x][!k],fa[son[x][!k]]=y;\n        son[x][!k]=y,fa[y]=x;\n\t\tpushup(y);\n    }\n\tvoid splay(int x)\n\t{\n\t\twhile(not_root(x))\n\t\t{\n\t\t\tint y=fa[x];\n\t\t\tif(not_root(y))rotate((son[y][1]==x)==(son[fa[y]][1]==y)?y:x);\n\t\t\trotate(x);\n\t\t}\n\t\tpushup(x);\n\t}\n\tvoid access(int x)\n\t{\n\t\tfor(int y=0;x;y=x,x=fa[x])\n\t\t\tsplay(x),son[x][1]=y;\n\t}\n\tvoid link(int x,int y){access(x),splay(x),fa[x]=y;}\n\tvoid cutfa(int x){access(x),splay(x), fa[son[x][0]]=0,son[x][0]=0,pushup(x);}\n\tint find(int x,int len)\n\t{\n\t\taccess(x),splay(x);\n\t\twhile(1)\n\t\t{\n\t\t\tif(mx[son[x][0]]>=len)x=son[x][0];\n\t\t\tif(SAM::len[x]>=len)break;\n\t\t\tx=son[x][1];\n\t\t}\n\t\treturn splay(x),x;\n\t}\n}lct;\nstruct edge{int v,nxt;}e[MAXN<<1|1];\nint cnt=0,last[MAXN];\nvoid adde(int u,int v){e[++cnt].v=v,e[cnt].nxt=last[u],last[u]=cnt;}\nvoid dfs(int u)\n{\n\tdfn[u]=++cur;\n\tfor(int i=last[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v!=SAM::pre[u])dfs(v);\n\t}\n\tedn[u]=cur;\n}\nint ed[MAXN];\nchar ss[MAXN];\nstruct one{int u,r;}a[MAXN],la[MAXN],ra[MAXN];\nint res[MAXN],node[MAXN];\nll c[MAXN],mx[MAXN];\nvoid solve(int begin,int end,int dep,int l,int r)\n{\n\tif(begin>end)return;\n\tif(l==r)\n\t{\n\t\tfor(int i=begin;i<=end;++i)res[a[i].u]=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1,itl=0,itr=0;\n\tfor(int i=l;i<=mid;++i)\n\t\tif(node[i])BIT::modify(dfn[node[i]],1);\n\tfor(int i=begin;i<=end;++i)\n\t{\n\t\tint c=BIT::Qsum(dfn[a[i].u],edn[a[i].u]);\n\t\tif(a[i].r<=c)la[++itl]=a[i];\n\t\telse a[i].r-=c,ra[++itr]=a[i];\n\t}\n\tfor(int i=l;i<=mid;++i)\n\t\tif(node[i])BIT::modify(dfn[node[i]],-1);\n\tfor(int i=1;i<=itl;++i)a[begin+i-1]=la[i];\n\tfor(int i=1;i<=itr;++i)a[begin+itl+i-1]=ra[i];\n\tsolve(begin,begin+itl-1,dep+1,l,mid),solve(begin+itl,end,dep+1,mid+1,r);\n}\nbool vis[MAXN];\nint main()\n{\n\tn=read(),m=read(),k=read();\n\tscanf(\"%s\",ss+1);\n\tfor(int i=1;i<=n;++i)SAM::extend(ss[i]-'a'),ed[i]=SAM::last;\n\tlct.init();\t\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint l=read(),r=read();\n\t\tint p=lct.find(ed[r],r-l+1);\n\t\tif(SAM::len[p]==r-l+1)node[i]=vis[p]?0:p;\n\t\telse{SAM::len[++SAM::tot]=r-l+1,SAM::pre[SAM::tot]=SAM::pre[p],SAM::pre[p]=SAM::tot,lct.cutfa(p),lct.link(SAM::tot,SAM::pre[SAM::tot]),lct.link(p,SAM::tot);node[i]=SAM::tot;}\n\t\tvis[node[i]]=1;\n\t}\n\tfor(int i=1;i<=SAM::tot;++i)a[i]=one{i,k+1},adde(SAM::pre[i],i);\n\tdfs(1);\n\tSAM::len[0]=-1;\n\tsolve(1,SAM::tot,0,1,m+1);\n\tfor(int i=1;i<=SAM::tot;++i)c[res[i]]+=SAM::len[i]-SAM::len[SAM::pre[i]],umax(mx[res[i]],SAM::len[i]);\n\tfor(int i=1;i<=m;++i)c[i]+=c[i-1],umax(mx[i],mx[i-1]),printf(\"%lld %lld\\n\",c[i],mx[i]);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1604403985,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P7046 \u3010\u300cMCOI-03\u300d\u8bd7\u97f5\u3011"
    },
    {
        "content": "\u770b\u5230 @Cadence \u795e\u4ed9\u573a\u5207\u4e86\u8fd9\u9898\uff0c\u4e8e\u662f\u5728\u5b66\u6821\u7684\u65f6\u5019\u65e0\u804a\u82b1\u4e24\u5929\u60f3\u4e86\u4e2a\u505a\u6cd5\uff0c\u5148\u8bb0\u5f55\u4e00\u4e0b\u7b49\u4f1a\u8865\u4ee3\u7801\u3002\n\n\u5c31\u662f\u4f60\u4f1a\u53d1\u73b0\u6211\u4e0d\u4f1a\u505a\u8fd9\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u8ba1\u7b97\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u4e32\u7684\u8d21\u732e\u3002\n\n\u79bb\u7ebf\u628a\u6240\u6709\u4e32\u5148\u4e22\u5230 SAM \u4e0a\u53bb\u6302\u8d77\u6765\uff0c\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u7684\u65f6\u5019\u628a\u8fd9\u4e9b\u4e32\u5f04\u4e0b\u6765\u548c SAM \u672c\u6765\u5c31\u6709\u7684\u8282\u70b9\u4e00\u8d77\u62c6\u70b9\u5efa\u4e00\u4e2a\u65b0\u6811\uff08\u4ee3\u7801\u91cc\u5927\u6982\u4e0d\u9700\u8981\u663e\u5f0f\u5efa\u51fa\uff09\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u5c31\u53ef\u4ee5\u4e00\u8d77\u7b97\u4e86\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u5f53\u5b50\u6811\u5185\u5df2\u7ecf\u6709 $k+1$ \u4e2a\u5b50\u4e32\u88ab\u52a0\u5230\u96c6\u5408\u91cc\u4e86\u4ee5\u540e\u624d\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u6211\u4eec\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u662f\u5565\u65f6\u5019\u5f00\u59cb\u6709\u8d21\u732e\u7684\u3002\u62ff\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n~~\u8c1c \u8bed \u4eba \u9898 \u89e3~~\n\n\u6211\u731c\u548c @Owen_codeisking \u795e\u4ed9\u7684\u9898\u89e3\u5dee\u4e0d\u591a\uff1f\u4f46\u662f\u6211\u4e0d\u592a\u770b\u5f97\u61c2\u4ed6\u7684\u9898\u89e3\uff08\n\n------------\nupd\uff1a\u4ee3\u7801\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e5+5;\nint n,m,k;\nchar t[maxn];\nint sz,last,len[maxn*2],link[maxn*2],nxt[maxn*2][26];\nvector<int> ch[maxn*2];\nvoid init(){\n\tsz=1;\n\tlast=0;\n\tlen[0]=0;\n\tlink[0]=-1;\n}\nint extend(int c){\n\tint cur=sz++;\n\tlen[cur]=len[last]+1;\n\tint p=last;\n\twhile(p>=0&&!nxt[p][c]){\n\t\tnxt[p][c]=cur;\n\t\tp=link[p];\n\t}\n\tif(p<0) link[cur]=0;\n\telse{\n\t\tint q=nxt[p][c];\n\t\tif(len[p]+1==len[q]) link[cur]=q;\n\t\telse{\n\t\t\tint clone=sz++;\n\t\t\tlen[clone]=len[p]+1;\n\t\t\tlink[clone]=link[q];\n\t\t\tmemcpy(nxt[clone],nxt[q],sizeof(nxt[q]));\n\t\t\twhile(p>=0&&nxt[p][c]==q){\n\t\t\t\tnxt[p][c]=clone;\n\t\t\t\tp=link[p];\n\t\t\t}\n\t\t\tlink[q]=link[cur]=clone;\n\t\t}\n\t}\n\treturn last=cur;\n}\nint cur[maxn];\nint size[maxn*2],hson[maxn*2];\nvoid dfs1(int u){\n\tsize[u]=1;\n\thson[u]=-1;\n\tfor(int i=0;i<(int)ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tdfs1(v);\n\t\tsize[u]+=size[v];\n\t\tif(hson[u]<0||size[v]>size[hson[u]]) hson[u]=v;\n\t}\n}\nvector<int> f;\nint pos[maxn*2],top[maxn*2];\nvoid dfs2(int u){\n\tpos[u]=f.size();\n\tf.push_back(u);\n\tif(hson[u]<0) return;\n\ttop[hson[u]]=top[u];\n\tdfs2(hson[u]);\n\tfor(int i=0;i<(int)ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tif(v==hson[u]) continue;\n\t\ttop[v]=v;\n\t\tdfs2(v);\n\t}\n}\nint find(int l,int r){\n\tint u=cur[r];\n\twhile(top[u]&&len[link[top[u]]]>=r-l+1) u=link[top[u]];\n\tint lb=pos[top[u]],rb=pos[u];\n\twhile(lb<rb){\n\t\tint mid=lb+(rb-lb)/2;\n\t\tif(len[f[mid]]>=r-l+1) rb=mid;\n\t\telse lb=mid+1;\n\t}\n\treturn f[rb];\n}\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint s;\n\tnode(int l,int r):l(l),r(r),s(0){\n\t\tch[0]=ch[1]=0;\n\t}\n\tvoid modify(int x){\n\t\ts++;\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tif(x<=mid){\n\t\t\tif(!ch[0]) ch[0]=new node(l,mid);\n\t\t\tch[0]->modify(x);\n\t\t}\n\t\telse{\n\t\t\tif(!ch[1]) ch[1]=new node(mid+1,r);\n\t\t\tch[1]->modify(x);\n\t\t}\n\t}\n\tint query(int k){\n\t\tif(l==r) return r;\n\t\tif(ch[0]&&k<=ch[0]->s) return ch[0]->query(k);\n\t\telse return ch[1]->query(ch[0]?k-ch[0]->s:k);\n\t}\n};\nnode* merge(node* a,node* b){\n\tif(!a) return b;\n\tif(!b) return a;\n\ta->s+=b->s;\n\ta->ch[0]=merge(a->ch[0],b->ch[0]);\n\ta->ch[1]=merge(a->ch[1],b->ch[1]);\n\tdelete b;\n\treturn a;\n}\nnode* rt[maxn*2];\ntypedef pair<int,int> pii;\nvector<pii> q[maxn*2];\nlong long ans1[maxn];\nint ans2[maxn];\nvoid dfs(int u){\n\trt[u]=new node(0,m-1);\n\tfor(int i=0;i<(int)ch[u].size();i++){\n\t\tint v=ch[u][i];\n\t\tdfs(v);\n\t\trt[u]=merge(rt[u],rt[v]);\n\t}\n\tsort(q[u].begin(),q[u].end());\n\tfor(int i=(int)q[u].size()-1;i>=0;i--){\n\t\tif(i&&q[u][i].first==q[u][i-1].first) continue;\n\t\tif(q[u][i].second<m) rt[u]->modify(q[u][i].second);\n        //\u8fd9\u4e2a\u505a\u6cd5\u7684\u5e38\u6570\u74f6\u9888\uff1a\u5982\u679c\u4e0d\u52a0\u8fd9\u4e2a\u5224\u65ad\uff0c\u65f6\u7a7a\u4f1a\u591a\u4e24\u500d\u5e38\u6570\uff01\n\t\tif(rt[u]->s>k){\n\t\t\tint x=rt[u]->query(k+1);\n\t\t\tif(i) ans1[x]+=q[u][i].first-q[u][i-1].first;\n\t\t\telse ans1[x]+=u?q[u][i].first-len[link[u]]:1;\n\t\t\tans2[x]=max(ans2[x],q[u][i].first);\n\t\t}\n\t}\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tm=readint();\n\tk=readint();\n\tscanf(\"%s\",t+1);\n\tinit();\n\tfor(int i=1;i<=n;i++) cur[i]=extend(t[i]-'a');\n\tfor(int i=1;i<sz;i++) ch[link[i]].push_back(i);\n\tdfs1(0);\n\tdfs2(0);\n\tfor(int i=0;i<m;i++){\n\t\tint l,r;\n\t\tl=readint();\n\t\tr=readint();\n\t\tint u=find(l,r);\n\t\tq[u].push_back(pii(r-l+1,i));\n\t}\n\tfor(int i=0;i<sz;i++) q[i].push_back(pii(len[i],m));\n\tdfs(0);\n\tfor(int i=1;i<m;i++){\n\t\tans1[i]+=ans1[i-1];\n\t\tans2[i]=max(ans2[i],ans2[i-1]);\n\t}\n\tfor(int i=0;i<m;i++) printf(\"%lld %d\\n\",ans1[i],ans2[i]);\n\treturn 0;\n}\n```",
        "postTime": 1604556205,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7046 \u3010\u300cMCOI-03\u300d\u8bd7\u97f5\u3011"
    },
    {
        "content": "\u524d\u534a\u90e8\u5206\u505a\u6cd5\u548c\u5176\u4ed6\u9898\u89e3\u76f8\u540c\uff0c\u5148\u7528 SAM \u5efa\u51fa $T$ \u7684\u540e\u7f00\u6811\uff0c\u7136\u540e\u7528\u6811\u4e0a\u500d\u589e\u628a\u8be2\u95ee\u6302\u5230\u5bf9\u5e94\u7684\u70b9\u4e0a\uff0c\u5efa\u4e00\u68f5\u65b0\u6811\u590d\u539f\u51fa\u88ab\u538b\u7f29\u7684\u8be2\u95ee\u8282\u70b9\u3002\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u8be6\u7ec6\u505a\u6cd5\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u3002\n\n\u5bf9\u540e\u534a\u90e8\u5206\u7684\u5904\u7406\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u505a\u6cd5\uff1a\u7531\u4e8e\u5b50\u4e32 $s'$ \u4e3a\u5b50\u4e32 $s$ \u7684\u540e\u7f00\u5f53\u4e14\u4ec5\u5f53\u5728\u540e\u7f00\u6811\u4e2d $s$ \u5bf9\u5e94\u7684\u8282\u70b9\u5728 $s'$ \u5bf9\u5e94\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u56e0\u6b64\u5047\u8bbe\u5f53\u524d\u6811\u4e0a\u6709\u82e5\u5e72\u8be2\u95ee\u70b9\u6253\u4e86\u6807\u8bb0\uff0c\u6211\u4eec\u60f3\u77e5\u9053\u67d0\u4e2a\u5b50\u4e32 $s$ \u662f\u5426\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u97f5\u811a\uff0c\u53ea\u9700\u627e\u5230 $s$ \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u67e5\u8be2\u5b50\u6811\u4e2d\u7684\u6807\u8bb0\u6570\u91cf\u662f\u5426\u5927\u4e8e $K$ \u5373\u53ef\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u5230\uff0c\u6bcf\u6b21\u5f80\u6811\u4e0a\u7684\u67d0\u4e2a\u8282\u70b9\u6253\u6807\u8bb0\u65f6\uff0c\u53ea\u6709\u8be5\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u72b6\u6001\u53ef\u80fd\u4f1a\u88ab\u66f4\u65b0\uff08\u5373\u4ece\u4e0d\u4e3a\u97f5\u811a\u53d8\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u97f5\u811a\uff09\uff0c\u5e76\u4e14\u5b50\u6811\u4e2d\u7684\u6807\u8bb0\u6570\u91cf\u5177\u6709\u5355\u8c03\u6027\uff0c\u8fd9\u610f\u5473\u7740\u5408\u6cd5\u7684\u97f5\u811a\u6240\u5bf9\u5e94\u7684\u70b9\u4e00\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a\u5305\u542b\u6839\u8282\u70b9\u7684\u8fde\u901a\u5757\u3002\u663e\u7136\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u66f4\u65b0\u4e00\u6b21\uff0c\u56e0\u6b64\u6bcf\u6b21\u7ed9\u67d0\u4e2a\u8282\u70b9\u6253\u6807\u8bb0\u65f6\u53ea\u9700\u500d\u589e\u5f80\u4e0a\u627e\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u66f4\u65b0\u7684\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u76f4\u5230\u627e\u5230\u4e86\u4e00\u4e2a\u4e0d\u4e3a\u97f5\u811a\u7684\u70b9\u6216\u8005\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u90fd\u88ab\u66f4\u65b0\u4e3a\u6b62\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m) \\log n)$\uff0c\u7a0d\u5fae\u6709\u70b9\u5361\u7a7a\u95f4\u3002\n\n```cpp\nconst int MN = 1.5e6 + 5;\n\nint N, M, K, Ans2; long long Ans1; char Str[MN];\n\nint lst, cnt, len[MN], nxt[MN], ch[MN][26];\ninline void Insert(int c) {\n    int p = lst, o = ++cnt;\n    len[o] = len[p] + 1;\n    while (p && !ch[p][c]) ch[p][c] = o, p = nxt[p];\n    if (!p) nxt[o] = 1;\n    else {\n        int q = ch[p][c];\n        if (len[q] == len[p] + 1) nxt[o] = q;\n        else {\n            int cl = ++cnt;\n            for (int i = 0; i < 26; i++) ch[cl][i] = ch[q][i];\n            len[cl] = len[p] + 1, nxt[cl] = nxt[q], nxt[q] = nxt[o] = cl;\n            while (ch[p][c] == q) ch[p][c] = cl, p = nxt[p]; \n        }\n    }\n    lst = o;\n}\n\nstruct Node {\n    int nxt, to;\n} e[MN];\nint fr[MN], tot;\ninline void add(int u, int v) {\n    e[++tot] = (Node){ fr[u], v }, fr[u] = tot;\n}\n\nint pos[MN], L[MN], R[MN], fa[MN][20], st[MN], ed[MN], dfc, p[MN], pN, pr[MN], id[MN], vis[MN];\nset <int> s[MN]; vector <int> Buc[MN];\nset <int> :: iterator it;\ninline void DFS(int u) {\n    st[u] = ++dfc;\n    for (int p = fr[u], v; p; p = e[p].nxt) {\n        v = e[p].to, fa[v][0] = u, DFS(v);\n    }\n    ed[u] = dfc;\n}\ninline void Work(int o, int l, int r) {\n    int p = pos[r], x = r - l + 1;\n    for (int i = 19; i >= 0; i--) {\n        if (len[fa[p][i]] >= x) p = fa[p][i];\n    }\n    if (!s[p].count(x)) s[p].insert(x), Buc[p].pb(o); \n}\n\nstruct BIT {\n    int tr[MN];\n    inline int lowbit(int x) {\n        return x & (-x);\n    }\n    inline void Modify(int x, int k) {\n        for (int i = x; i <= cnt; i += lowbit(i)) tr[i] += k;\n    }\n    inline int Query(int x) {\n        int ret = 0;\n        for (int i = x; i; i -= lowbit(i)) ret += tr[i];\n        return ret;\n    }\n} T;\n\nconst int Diana_is_God = 1;\n\nsigned main(void) {\n    N = read(), M = read(), K = read();\n    scanf(\"%s\", Str + 1), lst = cnt = 1;\n    for (int i = 1; i <= N; i++) Insert(Str[i] - 'a'), pos[i] = lst;\n    for (int i = 1; i <= cnt; i++) fa[i][0] = nxt[i];\n    for (int j = 1; j <= 19; j++) {\n        for (int i = 1; i <= cnt; i++) fa[i][j] = fa[fa[i][j - 1]][j - 1];\n    }\n    for (int i = 1; i <= M; i++) L[i] = read(), R[i] = read(), Work(i, L[i], R[i]);\n    for (int i = 1; i <= cnt; i++) p[i] = i, s[i].insert(len[i]);\n    sort(p + 1, p + cnt + 1, [&](int i, int j){ return len[i] < len[j]; });\n    pN = cnt, pr[cnt = 1] = 1;\n    for (int i = 2; i <= pN; i++) {\n        int x = p[i];\n        sort(Buc[x].begin(), Buc[x].end(), [&](int i, int j) { return R[i] - L[i] < R[j] - L[j]; });\n        pr[x] = pr[nxt[x]], it = s[x].begin();\n        int j = 0; \n        while (Diana_is_God) {\n            cnt++, add(pr[x], cnt), pr[x] = cnt;\n            int w = *it;\n            len[cnt] = w;\n            while (j < (int)Buc[x].size() && R[Buc[x][j]] - L[Buc[x][j]] + 1 <= w) id[Buc[x][j]] = cnt, j++;\n            it++;\n            if (it == s[x].end()) break;\n        }\n        vector <int> (Buc[x]).swap(Buc[x]);\n    }\n    DFS(1), vis[0] = 1, len[0] = -1;\n    for (int j = 1; j <= 19; j++) {\n        for (int i = 1; i <= cnt; i++) fa[i][j] = fa[fa[i][j - 1]][j - 1];\n    }\n    // for (int i = 1; i <= cnt; i++) printf(\"%lld %lld\\n\", st[i], ed[i]);\n    for (int i = 1; i <= M; i++) {\n        int p = id[i];\n        if (!p) {\n            printf(\"%lld %d\\n\", Ans1, Ans2);\n            continue;\n        }    \n        // printf(\"Modify Node %lld on %lld\\n\", p, st[p]);\n        T.Modify(st[p], 1);\n        if (vis[p]) {\n            printf(\"%lld %d\\n\", Ans1, Ans2);\n            continue;\n        }\n        while (!vis[p]) {\n            int x = p;\n            for (int j = 19; j >= 0; j--) {\n                if (!vis[fa[x][j]]) x = fa[x][j]; \n            }\n            int w = T.Query(ed[x]) - T.Query(st[x] - 1);\n            // printf(\"Query Node %lld : [%lld, %lld] = %lld\\n\", x, st[x], ed[x], w);\n            if (w > K) vis[x] = 1, Ans1 += len[x] - len[fa[x][0]], Ans2 = max(Ans2, len[x]);\n            else break;\n        } \n        printf(\"%lld %d\\n\", Ans1, Ans2);\n    }\n    return 0; \n}\n```\n",
        "postTime": 1644741340,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P7046 \u3010\u300cMCOI-03\u300d\u8bd7\u97f5\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ef4\u62a4\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u652f\u6301\u52a0\u5165\u7ed9\u5b9a\u6bcd\u4e32\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u67e5\u8be2\u81f3\u5c11\u4e3a\u96c6\u5408\u5185 $K+1$ \u4e2a\u5143\u7d20\u7684\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0c\u548c\u5b83\u4eec\u7684\u6700\u957f\u957f\u5ea6\u3002\r\n\r\n\u66b4\u529b\u601d\u8def\uff1a\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u7ed9\u5b83\u6240\u6709\u7684\u540e\u7f00\u6253\u4e00\u6b21\u6807\u8bb0\u3002\u90a3\u4e48\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u5c31\u662f\u90a3\u4e9b\u88ab\u6253\u4e86\u81f3\u5c11 $K+1$ \u6b21\u6807\u8bb0\u7684\u4e32\u3002\u5b57\u7b26\u4e32\u5230\u6807\u8bb0\u6b21\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(NM)$\u3002\r\n\r\n\u8003\u8651\u5982\u4f55\u5bf9\u8fd9\u4e2a\u601d\u8def\u8fdb\u884c\u4f18\u5316\u3002\u6ce8\u610f\u5230\u4e00\u4e2a\u4e32\u7684\u6240\u6709\u540e\u7f00\u5bf9\u5e94\u4e86\u540e\u7f00\u81ea\u52a8\u673a fail \u6811\u4e0a\u8fd9\u4e2a\u4e32\u5bf9\u5e94\u8282\u70b9\u7684\u6240\u6709\u7236\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u540e\u7f00\u81ea\u52a8\u673a fail \u6811\uff0c\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u540e\u7f00\u6807\u8bb0\u8f6c\u5316\u4e3a\u67d0\u70b9\u5230\u6839\u7684\u94fe\u6807\u8bb0\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\u662f\u4e00\u4e2a\u7b49\u4ef7\u7c7b\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8981\u6253\u6807\u8bb0\u7684\u4e32\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u4e00\u90e8\u5206\u8fd9\u79cd\u60c5\u51b5\u3002\u53ef\u4ee5\u6309\u7167\u957f\u5ea6\u8fdb\u884c\u62c6\u70b9\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u6807\u8bb0\u7684\u90fd\u5305\u542b\u4e86\u6574\u4e2a\u8282\u70b9\u3002\r\n\r\n\u62c6\u5b8c\u70b9\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u68f5\u6811\uff0c\u73b0\u5728\u8981\u505a\u7684\u662f\uff1a\u67d0\u70b9\u5230\u6839\u7684\u94fe\u6253\u6807\u8bb0\uff0c\u67e5\u8be2\u6807\u8bb0\u81f3\u5c11 $K+1$ \u6b21\u7684\u70b9\u7684\u4fe1\u606f\u3002\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\r\n\r\n\u5728\u7ebf\u505a\u6cd5\uff0c\u7528\u91cd\u94fe\u5256\u5206\u6216\u8005\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u628a\u94fe\u4fee\u6539\u8f6c\u5316\u4e3a\u533a\u95f4\u4fee\u6539\uff0c\u7531\u4e8e\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u5728\u7b2c $K+1$ \u6b21\u6807\u8bb0\u7684\u65f6\u5019\u66f4\u65b0\u4e00\u6b21\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u66b4\u529b\u66f4\u65b0\u3002\u590d\u6742\u5ea6 $O(M\\log^2N+N\\log N)$\uff08\u6734\u7d20\u91cd\u94fe\u5256\u5206\uff09\u6216\u8005 $O((M+N)\\log N)$\uff08\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\uff09\u3002\r\n\r\n\u79bb\u7ebf\u505a\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u70b9\u7b2c $K+1$ \u6b21\u6807\u8bb0\u662f\u5728\u4ec0\u4e48\u65f6\u5019\u3002\u628a\u6bcf\u6b21\u94fe\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u95f4\u63d2\u5165\u5230\u94fe\u5e95\u8282\u70b9\u4e0a\uff0c\u90a3\u4e48\u67d0\u4e2a\u70b9\u7b2c $K+1$ \u6b21\u6807\u8bb0\u7684\u65f6\u95f4\u5c31\u662f\u5b50\u6811\u91cc\u7b2c $K+1$ \u5c0f\u7684\u6570\u5b57\u3002\u901a\u8fc7 dfs \u5e8f\u628a\u5b50\u6811\u67e5\u8be2\u8f6c\u5316\u6210\u533a\u95f4\u67e5\u8be2\uff0c\u8fd9\u662f\u4e2a\u9759\u6001\u533a\u95f4 kth \u95ee\u9898\uff0c\u53ef\u4ee5\u4e3b\u5e2d\u6811\u89e3\u51b3\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O((N+M)\\log N)$\u3002\u5b50\u6811 kth \u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c\u3002",
        "postTime": 1521030376,
        "uid": 90893,
        "name": "\u93e1\u97f3\u30ea\u30f3",
        "ccfLevel": 10,
        "title": "\u3010\u9898\u89e3\u3011MCOI-03 \u8bd7\u97f5"
    },
    {
        "content": "### \u58f0\u660e\n\n\u5728\u672c\u7bc7\u9898\u89e3\u7684\u590d\u6742\u5ea6\u8868\u793a\u65f6\uff0c\u8bb0\u5b57\u7b26\u4e32\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a $|\\Sigma|$\uff0c\u4e14\u8ba4\u4e3a $N,M,K$ \u540c\u9636\uff0e\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u652f\u6301\u63d2\u5165\u56fa\u5b9a\u6bcd\u4e32\u7684\u4e00\u4e2a\u5b50\u4e32\uff0e\u6bcf\u63d2\u5165\u4e00\u4e2a\u4e32\u540e\u8f93\u51fa\u6709\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u662f\u96c6\u5408\u4e2d\u81f3\u5c11 $(K+1)$ \u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u7f00\uff0c\u4ee5\u53ca\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0e\u5141\u8bb8\u79bb\u7ebf\uff0e\n\n### \u505a\u6cd5 $\\bf 1$\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u4e32\u540e\uff0c\u8ba1\u7b97\u51fa\u5176\u6240\u6709\u540e\u7f00\u7684\u54c8\u5e0c\u503c\uff0c\u5c06\u54c8\u5e0c\u8868\u5bf9\u5e94\u952e\u503c $+1$\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4e32\u51fa\u73b0\u7b2c $(K+1)$ \u6b21\u51fa\u73b0\u7684\u65f6\u95f4\uff0e\u6700\u540e\u524d\u7f00\u548c\u5373\u53ef\uff0e\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(N^2)$\uff0c\u671f\u671b\u5f97\u5206 $35$ pt\uff0e\n\n### \u505a\u6cd5 $\\bf 2$\n\n\u663e\u7136\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u6bcd\u4e32\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u8003\u8651\u5efa\u7acb\u5bf9\u4e8e\u6bcd\u4e32\u7684\u540e\u7f00\u6811\uff0e\u5bf9\u4e8e\u540e\u7f00\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\uff0e\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u4e32\u540e\uff0c\u5c06\u8fd9\u4e2a\u4e32\u7684\u6240\u6709\u540e\u7f00\u5bf9\u5e94\u540e\u7f00\u6811\u7684\u7ed3\u70b9\u7684\u6743\u503c $+1$\uff0e\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u6743\u503c\u7b2c\u4e00\u6b21\u5927\u4e8e\u7b49\u4e8e $(K+1)$ \u7684\u65f6\u523b\uff0e\u7136\u540e\u4f7f\u7528\u7c7b\u4f3c\u505a\u6cd5 1 \u7684\u65b9\u6cd5\u89e3\u51b3\uff0e\n\n\u6839\u636e\u540e\u7f00\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u4e32\u7684\u540e\u7f00\u5bf9\u5e94\u7684\u7ed3\u70b9\u4e00\u5b9a\u662f\u8fd9\u4e2a\u4e32\u5bf9\u5e94\u7684\u7ed3\u70b9\u6216\u8005\u8be5\u7ed3\u70b9\u7684\u7956\u5148\uff0e\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u63a8\u8bba\uff1a\n\n> \u6bcf\u6b21\u5411\u96c6\u5408\u63d2\u5165\u5b57\u7b26\u4e32\u65f6\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7ed3\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u70b9\u6743 $+1$\uff0e\n\n\u4f46\u4f60\u4f1a\u53d1\u73b0\u4e0a\u8ff0\u63a8\u8bba\u662f\u9519\u8bef\u7684\uff0c\u8003\u8651\u5f53\u6bcd\u4e32 $= \\texttt{abc}$ \u65f6\uff0c\u4f9d\u6b21\u63d2\u5165 $\\texttt{bc}$ \u548c $\\texttt{c}$\uff0e\u7531\u4e8e\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684 endpos \u96c6\u5408\u76f8\u7b49\uff0c\u5373\u5bf9\u5e94\u540e\u7f00\u6811\u4e0a\u7684\u7ed3\u70b9\u76f8\u540c\uff0c\u6545\u4e0a\u8ff0\u505a\u6cd5\u4f1a\u8ba4\u4e3a\u5b57\u7b26\u4e32 $\\texttt{bc}$ \u4f5c\u4e3a\u4e86\u96c6\u5408\u4e2d $2$ \u4e2a\u4e32\u7684\u540e\u7f00\u51fa\u73b0\uff0c\u5f97\u5230\u9519\u8bef\u7684\u7b54\u6848\uff0e\n\n\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5bf9\u540e\u7f00\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u8fdb\u884c\u62c6\u70b9\uff0e\u6839\u636e endpos \u7b49\u4ef7\u7c7b\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u540c\u4e00\u7b49\u4ef7\u7c7b\uff0c\u5c06\u7c7b\u4e2d\u7684\u6240\u6709\u5b50\u4e32\u6309\u957f\u5ea6\u975e\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e2a\u5b50\u4e32\u90fd\u4e0d\u4f1a\u6bd4\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u957f\uff0c\u4e0e\u6b64\u540c\u65f6\u6bcf\u4e2a\u5b50\u4e32\u4e5f\u662f\u5b83\u524d\u4e00\u4e2a\u5b50\u4e32\u7684\u540e\u7f00\uff0e\u6211\u4eec\u53ef\u4ee5\u5c06\u540e\u7f00\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210\u4e00\u6761\u94fe\uff0c\u94fe\u4e2d\u7ed3\u70b9\u4e2a\u6570\u7b49\u4e8e\u8be5\u7ed3\u70b9\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0e\u4ee5\u6b64\u4fdd\u8bc1\u6b63\u786e\u6027\uff0e\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u82e5\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u62c6\u70b9\u540e\u5f97\u5230\u7684\u6811\u4e2d\u7684\u7ed3\u70b9\u4e2a\u6570\u7b49\u4e8e\u6bcd\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u5176\u662f $O(N^2)$ \u7ea7\u522b\uff0e\u89c2\u5bdf\u53d1\u73b0\uff0c\u62c6\u70b9\u540e\u5f97\u5230\u7684\u6811\u6709\u4e9b\u70b9\u662f\u300c\u4e0d\u9700\u8981\u62c6\u300d\u7684\uff0c\u8003\u8651\u8be2\u95ee\u79bb\u7ebf\uff0c\u53ea\u62c6\u9700\u8981\u62c6\u7684\u70b9\uff0c\u5f97\u5230\u4e00\u4e2a\u7c7b\u4f3c\u7c7b\u4f3c\u865a\u6811\u7684\u4e1c\u897f\uff0c\u4ee5\u6b64\u540c\u65f6\u4fdd\u8bc1\u6b63\u786e\u6027\u548c\u65f6\u95f4\u590d\u6742\u5ea6\uff0e\n\n\u63a5\u4e0b\u6765\u8981\u89e3\u51b3\u7684\u662f\u5982\u4f55\u5728\u540e\u7f00\u6811\u4e0a\u5b9a\u4f4d\u4e00\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0e\u8003\u8651\u6784\u5efa SAM \u65f6\u8bb0\u5f55\u6bcd\u4e32\u7684\u6bcf\u4e2a\u524d\u7f00\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0e\u9884\u5904\u7406\u500d\u589e\u7236\u4eb2\u6570\u7ec4\uff0c\u67e5\u8be2\u65f6\u4ece\u524d\u7f00\u5bf9\u5e94\u7684\u7ed3\u70b9\u5f00\u59cb\u5411\u4e0a\u500d\u589e\u8df3\uff0c\u8df3\u5230\u6df1\u5ea6\u6700\u5c0f\u7684\u6ee1\u8db3 $\\mathrm{len} \\ge r-l+1$ \u7684\u7ed3\u70b9\u5373\u4f4d\u7b26\u5408\u8981\u6c42\u7684\u7ed3\u70b9\uff0e\n\n\u8003\u8651\u91c7\u7528\u91cd\u94fe\u5256\u5206\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6811\u4e0a\u4fee\u6539\uff0e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u7531\u4e8e\u6bcf\u4e2a\u503c\u53ea\u4f1a\u7531\u5c0f\u4e8e $K$ \u5230\u5927\u4e8e\u7b49\u4e8e $K$ \u53d8\u6362\u4e00\u6b21\uff0e\u6545\u53ef\u4ee5\u505a\u4ee5\u4e0b\u8f6c\u5316\uff1a\u6bcf\u6b21\u4fee\u6539\u540e\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u5927\u4e8e $K$ \u7684\u4f4d\u7f6e\uff0c\u8bb0\u5f55\u540e\u5c06\u5176\u4fee\u6539\u4e3a $-\\infty$\uff0e\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N|\\Sigma| + N \\log^2 N)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(N|\\Sigma| + N \\log N)$\uff0c\u671f\u671b\u5f97\u5206 $60$ pt\uff0e\n\n### \u505a\u6cd5 $\\bf 3$\n\n\u524d\u9762\u90e8\u5206\u5e94\u8be5\u662f\u65e0\u6cd5\u518d\u7ee7\u7eed\u4f18\u5316\u4e86\uff0c\u8003\u8651\u4f18\u5316\u540e\u9762\u7684\u6570\u636e\u7ed3\u6784\u90e8\u5206\uff0e\n\n\u8003\u8651\u4e00\u79cd\u79bb\u7ebf\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u653e\u4e00\u4e2a\u65f6\u95f4\u7ef4\u7684\u7ebf\u6bb5\u6811\uff0c\u7b2c $i$ \u6b21\u94fe\u52a0\u5c31\u628a\u94fe\u7aef\u70b9\u4e0a\u7684\u7ebf\u6bb5\u6811 $i$ \u4f4d\u7f6e $+1$\uff0c\u6700\u540e DFS \u4e00\u904d\u628a\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u7236\u4eb2\u4e0a\uff0c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u524d\u7f00\u548c\u5927\u4e8e $K$ \u7684\u4f4d\u7f6e\uff0c\u5c31\u4e3a\u7b2c\u4e00\u6b21\u53d8\u5316\u5230\u6743\u503c\u5927\u4e8e $K$ \u7684\u65f6\u95f4\uff0e\n\n\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u500d\u589e\u6570\u7ec4\u5927\u5c0f\u53ea\u9700\u5f00\u5230 SAM \u7684\u7ed3\u70b9\u6570\u5373\u53ef\uff0c\u4e0d\u8981\u56e0\u4e3a\u5f00\u4e86\u8fc7\u5927\u6570\u7ec4\u9020\u6210\u5185\u5b58\u8d85\u9650\uff0e\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N|\\Sigma| + N \\log N)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(N|\\Sigma| + N \\log N)$\uff0c\u671f\u671b\u5f97\u5206 $100$ pt\uff0e",
        "postTime": 1664422696,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "P7046 \u9898\u89e3"
    }
]