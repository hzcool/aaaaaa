[
    {
        "content": "# Flight Safety (BZOJ1020)\n\n(\u5f53\u7136\u5148\u63a8\u8350\u4e00\u4e0b\u535a\u5ba2[\u70b9\u8fd9\u91cc](http://mina.moe/archives/5323))\n\n### \u9898\u610f\n\n\u4e16\u754c\u4e0a\u6709\u5f88\u591a\u5c9b\u5c7f\uff0c\u53ef\u4ee5\u770b\u6210\u662fC\u4e2a\u8fb9\u5f62($C\\leq20$\uff0c\u6bcf\u4e2a\u70b9\u6570M\u4e0d\u8d85\u8fc730\uff0c\u53ef\u4ee5\u975e\u51f8)\u3002\u4e00\u67b6\u98de\u673a\u6cbf\u4e00\u6761N\u70b9\u6298\u7ebf\u98de\u884c($N\\leq20$)\uff0c\u6c42\u822a\u7ebf\u4e0a\u4e00\u4e2a\u70b9\uff0c\u6700\u5927\u5316\u5176\u5230\u6700\u8fd1\u5c9b\u5c7f\u7684\u8ddd\u79bb\u3002\u7ed9\u51fa\u7684\u6240\u6709\u70b9\u90fd\u662f$[-1000,10000]$\u5185\u7684\u6574\u6570\u5750\u6807\u3002\u8981\u6c42\u6700\u7ec8\u7b54\u6848\u7cbe\u5ea6\u5728$10^{-2}$\u4ee5\u4e0b(\u5728UVA\u63d0\u4ea4\u7cbe\u5ea6$10^{-3}$)\u3002\n\n![fig.1](http://mina.moe/wp-content/uploads/2018/04/1.jpg\")\n\n### \u5206\u6790\n\n\u9996\u5148\u6211\u60f3\uff0c\u65e2\u7136\u822a\u7ebf\u88ab\u5212\u5206\u6210\u4e86\u201c\u5728\u5c9b\u4e0a\u201d-\u201c\u5728\u6d77\u4e0a\u201d-\u201c\u5728\u5c9b\u4e0a\u201d-...\u7684\u4ea4\u66ff\u6a21\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5728\u6d77\u4e0a\u7684\u6bb5\u6c42\u6700\u8fdc\u8ddd\u79bb\u4e0d\u662f\u5f88\u5bb9\u6613\u5417\uff1f\u53d6\u4e2a\u4e2d\u70b9\u4e0d\u5c31\u884c\u4e86\u3002\n\n\u53cd\u4f8b(\u4e2d\u70b9\u663e\u7136\u4e0d\u662f\u6700\u4f18\u7684)\uff1a\n\n![fig.1](http://mina.moe/wp-content/uploads/2018/04/2.jpg\")\n\n\u90a3\u4e48\u6c42\u622a\u5f97\u8fd9\u6bb5\u6d77\u4e0a\u822a\u7ebf\u7684\u4e24\u6761\u7ebf\u6bb5\u7684\u89d2\u5e73\u5206\u7ebf\u4e0e\u822a\u7ebf\u7684\u4ea4\u70b9\u4e0d\u5c31\u662f\u6700\u8fdc\u70b9\u5417\uff1f\n\n\u53cd\u4f8b\uff1a\n\n![fig.1](http://mina.moe/wp-content/uploads/2018/04/3.jpg\")\n\n\u989d\u3002\u3002\u3002\u8fd9\u4e2a\u91cc\u9762\u7684\u82b1\uff0c\u6211\u4eec\u6216\u8bb8\u53ea\u80fd\u7528\u66f4\u5947\u602a\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\u4e86\u3002\n\n### \u722c\u5c71(90pts)\n\n\u722c\u5c71\u7b97\u6cd5\u662f\u6c42\u89e3\u602a\u5f02\u51fd\u6570\u7684\u6700\u4f18\u5316\u95ee\u9898\u7684\u5e38\u7528\u65b9\u6cd5\u3002\n\n\u5982\u679c\u5c06\u822a\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u5230\u6700\u8fd1\u5c9b\u5c7f\u7684\u8ddd\u79bb\u770b\u6210\u6709\u5173\u98de\u884c\u8ddd\u79bb\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u975e\u5e38\u53ef\u7231\u7684\u51fd\u6570\u56fe\u50cf\u3002\u8fd9\u4e2a\u56fe\u50cf\u6709\u5982\u4e0b\u6027\u8d28\uff1a\u659c\u7387\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002\u539f\u56e0\u662f\uff1a\u4ece\u4efb\u610f\u4e00\u5904\u51fa\u53d1\uff0c\u5411\u4efb\u610f\u65b9\u5411\u98de\u884c\uff0c\u4f60\u4e0e\u6700\u8fd1\u5c9b\u5c7f\u7684\u8ddd\u79bb\u53d8\u5316\u901f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7\u4f60\u98de\u884c\u7684\u901f\u5ea6\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u8bc1\u660e\u4e86\u8fd9\u4e2a\u51fd\u6570\u662f\u4e0d\u4f1a\u7a81\u53d8\u7684\u3002\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u8ba9\u5f88\u591a\u4e2a\u5c0f\u4eba\u4ece\u4e0d\u540c\u4f4d\u7f6e\u722c\u8fd9\u4e2a\u56fe\u50cf\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u56e0\u4e3a\u51fd\u6570\u7a81\u53d8\u800c\u6454\u6b7b\u6216\u8005\u722c\u4e0d\u52a8(\u5373\u82e5\u51fd\u6570\u4e0d\u8fde\u7eed\u5219\u722c\u5c71\u7b97\u6cd5\u4e0d\u53ef\u89e3\u6781\u503c)\u3002\u8fd9\u6837\uff0c\u6700\u7ec8\u722c\u5730\u6700\u9ad8\u7684\u5c0f\u4eba\u5c31\u4ee3\u8868\u7740\u51fd\u6570\u7684\u6781\u503c\u3002\n\n\u8fd9\u79cd\u7b97\u6cd5\u7684\u57fa\u672c\u6b65\u9aa4\u662f\uff1a\n\n- 1.\u6309\u4e00\u5b9a\u95f4\u9694\u653e\u7f6e\u5c0f\u4eba\n- 2.\u6bcf\u4e2a\u5c0f\u4eba\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6b65\u957fs\n- 3.\u5c0f\u4eba\u5411\u7740\u51fd\u6570\u589e\u957f\u7684\u65b9\u5411\u722cs\u7684\u957f\u5ea6\n- 4.s\u53d8\u5c0f\n\n\u6700\u7ec8\u6bcf\u4e2a\u5c0f\u4eba\u90fd\u4f1a\u7a33\u5b9a\u5728\u4e00\u5ea7\u5c71\u5cf0\u5904\u3002\n\n\u4f46\u662f\u6211\u4eec\u5728\u51c6\u5907\u5b9e\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u4e4b\u524d\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a\n\n- \u8981\u591a\u5c11\u4e2a\u5c0f\u4eba\u53ef\u4ee5\u4fdd\u8bc1\u51e0\u4e4e\u6bcf\u4e2a\u5cf0\u90fd\u88ab\u627e\u5230\uff0c\u6216\u6ca1\u627e\u5230\u7684\u4e0d\u4f1a\u5f71\u54cd\u7cbe\u5ea6\n- \u5c0f\u4eba\u7684\u521d\u59cb\u6b65\u957fs\n- \u5c0f\u4eba\u6b65\u957f\u7684\u51cf\u5c11\u7387v\n- \u5c0f\u4eba\u8981\u722c\u591a\u5c11\u6b65\n- \u4ee5\u4e0a\u7684\u7b97\u6cd5\u5982\u679c\u53ef\u4ee5100%\u627e\u5230\u6700\u4f18\u89e3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5426\u5141\u8bb8\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u4e24\u4e2a\u5c0f\u4eba\u95f4\u8ddd\u5c0f\u4e8e$10^{-2}$\u624d\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u6700\u4f18\u89e3\uff0c\u800c\u8fd9\u548c\u66b4\u529b\u627e\u70b9\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e0d\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5192\u9669\u5c06\u95f4\u8ddd\u8c03\u5927\uff0c\u722c\u5c71\u6b65\u6570\u8c03\u5c0f\uff0c\u51cf\u5c11\u7387\u8bbe\u4e3a2/3\uff0c\u5e76\u4e14\u9762\u5411\u6570\u636e\u7f16\u7a0b\uff0c\u5c31\u53ef\u4ee5\u5728\u6d1b\u8c37\u83b7\u5f9790\u5206\u7684\u597d\u6210\u7ee9(\u6211\u63d0\u4ea4\u4e8650\u591a\u6b21)\u3002\n\n### \u4e8c\u5206(100pts)\n\n\u6211\u5e76\u6ca1\u6709\u4eb2\u8eab\u5c1d\u8bd5\u8fd9\u4e2a\u6050\u6016\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u662f\u590d\u6742\u5ea6\u4e25\u683c$O(NMClogA)$\u7684(A\u4e3a\u7b54\u6848\u5927\u5c0f)\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4f18\u79c0\u7684\u590d\u6742\u5ea6\uff0c\u8c01\u770b\u4e86\u90fd\u60f3\u6253\uff0c\u4f46\u662f\u4e0d\u5de7\uff0c\u770b\u770b\u5b83\u662f\u600e\u4e48\u505a\u7684\u4f60\u5c31\u4e0d\u60f3\u6253\u4e86\u3002\n\n- \u4e8c\u5206\u8ddd\u79bbx\n- \u5c06\u6bcf\u4e2a\u591a\u8fb9\u5f62\u7684\u8fb9\u5411\u5916\u5e73\u79fbx\uff0c\u5f62\u6210\u591a\u4e2a\u7531\u5706\u5f27\u548c\u7ebf\u6bb5\u7ec4\u6210\u7684\u5f62\u72b6\n- \u6c42\u822a\u7ebf\u4e0e\u8fd9\u4e9b\u5f62\u72b6\u7684\u4ea4\u70b9\uff0c\u5e76\u5bf9\u4ea4\u70b9\u79bb\u6563\u5316\u540e\u9006\u5dee\u5206\uff0c\u6c42\u51fa\u6bcf\u4e00\u6bb5\u88ab\u5f62\u72b6\u8986\u76d6\u7684\u6b21\u6570\n- \u5982\u679c\u5b58\u5728\u4e00\u6bb5\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5219x\u6269\u5927\uff0c\u53cd\u4e4b\u51cf\u5c0f\u3002\n\n\u770b\u5230\u4e86\u90a3\u4e2a\u201c\u7531\u5706\u5f27\u548c\u7ebf\u6bb5\u7ec4\u6210\u7684\u5f62\u72b6\u201d\u4e86\u6ca1\uff1f\u8fd9\u4e1c\u897f\u539f\u672c\u5c31\u53ca\u5176\u7684\u6050\u6016\uff0c\u8fd8\u9700\u8981\u6c42\u548c\u7ebf\u6bb5\u7684\u4ea4\u70b9\uff0c\u5b9e\u5728\u662f\u592a\u96be\u6253\u3002\n\n### \u8fed\u4ee3(100pts)\n\n\u4e8e\u662f\u6211\u4eec\u7ee7\u7eed\u5229\u7528\u722c\u5c71\u7684\u90a3\u79cd\u5077\u61d2\u7684\u601d\u60f3\u3002\n\n\u5206\u6790\u722c\u5c71\u4e0d\u53ef\u884c\u7684\u539f\u56e0\uff0c\u662f\u6709\u5f88\u591a\u6ca1\u7528\u7684\u4eba\u5728\u722c\u3002\u56fd\u5bb6\u4f9b\u517b\u4e0d\u8d77\u90a3\u4e48\u591a\u5e9f\u7269\uff0c\u4e8e\u662f\u5c31TLE\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u6e05\u7406\u6389\u66f4\u591a\u7684\u5e9f\u7269\uff0c\u4fdd\u7559\u6700\u6709\u53ef\u80fd\u722c\u4e0a\u6700\u9ad8\u5cf0\u7684\u4eba\u3002\n\n\u4e8e\u662f\u8fed\u4ee3\u7b97\u6cd5\u5c31\u5e94\u8fd0\u800c\u751f\u4e86\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u7ebf\u6bb5\uff0c\u5b83\u5230\u6700\u8fd1\u5c9b\u5c7f\u7684\u8ddd\u79bb\u4e00\u5b9a\u662f\u5728$[D-\\frac{L}{2},D+\\frac{L}{2}]$\u7684\u533a\u95f4\u5185\u7684(D\u4e3a\u5176\u4e2d\u70b9\u5230\u6700\u8fd1\u5c9b\u5c7f\u7684\u8ddd\u79bb\uff0cL\u4e3a\u5176\u957f\u5ea6)\u3002\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u548c$[X,+\\infty]$(X\u4e3a\u5df2\u77e5\u7684\u6700\u8fdc\u8ddd\u79bb)\u6ca1\u6709\u4ea4\u96c6\uff0c\u6216\u8005L\u5df2\u7ecf\u975e\u5e38\u77ed\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u6761\u7ebf\u6bb5\u5c31\u662f\u4e2a\u5e9f\u7269\uff0c\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u62c6\u6210\u524d\u534a\u6bb5\u548c\u540e\u534a\u6bb5\u9012\u5f52\u5904\u7406\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u961f\u5217(\u751a\u81f3\u6709\u9650\u961f\u5217)\u7ef4\u62a4\u5f53\u524d\u6240\u6709\u6709\u7528\u7684\u7ebf\u6bb5\uff0c\u6bcf\u6b21\u751f\u6210\u4e24\u4e2a\u7ebf\u6bb5\uff0c\u5c06\u6709\u7528\u7684\u4fdd\u7559\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u4f1a\u7528\u6709\u7528\u7684\u7ebf\u6bb5\u8fdb\u884c\u7c7b\u4f3c\u722c\u5c71\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u5feb\u83b7\u5f97\u7b54\u6848\u3002\n\n# \u4ee3\u7801\n\n#### \u722c\u5c71\n\n```cpp\n#pragma GCC optimize(3)\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define eps 1e-8\n#define oo 1e5\n#define MX 102\n\nusing namespace std;\n\nstruct vec\n{\n\tdouble x,y;\n\tvoid input(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid output(){printf(\"%.3lf %.3lf\\n\",x,y);}\n\tvec (){}\n\tvec (const double& a,const double& b){x=a,y=b;}\n\tvec operator + (const vec& t)const{return vec(x+t.x,y+t.y);}\n\tvec operator - (const vec& t)const{return vec(x-t.x,y-t.y);}\n\tvec operator * (const double& t)const{return vec(x*t,y*t);}\n\tvec operator / (const double& t)const{return vec(x/t,y/t);}\n\tdouble len(){return sqrt(x*x+y*y);}\n\tvec normal(){return *this/(len()+eps);}\n};\ndouble dot(const vec& a,const vec& b){return a.x*b.x+a.y*b.y;}\ndouble crs(const vec& a,const vec& b){return a.x*b.y-a.y*b.x;}\nbool seg_seg_int(const vec& ap,const vec& aq,const vec& bp,const vec& bq)\n{\n\tif(\tmin(ap.x,aq.x)>max(bp.x,bq.x)||\n\t\tmin(bp.x,bq.x)>max(ap.x,aq.x)||\n\t\tmin(ap.y,aq.y)>max(bp.y,bq.y)||\n\t\tmin(bp.y,bq.y)>max(ap.y,aq.y))return 0;\n\tif(\tcrs(bq-aq,ap-aq)*crs(bp-aq,ap-aq)>0||\n\t\tcrs(ap-bq,bp-bq)*crs(aq-bq,bp-bq)>0)return 0;\n\treturn 1;\n}\ndouble p_to_seg(const vec& a,const vec& p,const vec& q)\n{\n\tvec v=q-p;\n\tdouble t=dot(a-p,v)/dot(v,v);\n\tif(t<0||t>1)return min((a-p).len(),(a-q).len());\n\tvec b=p+(v*t);\n\treturn (a-b).len();\n}\nbool p_in_poly(const vec& a,const vec* p,int n)\n{\n\tint cnt=0;\n\tvec far=a+vec(1,+oo);\n\tfor(int i=1;i<=n;i++)cnt+=seg_seg_int(a,far,p[i],p[i%n+1]);\n\treturn (cnt&1);\n}\nint C,N,M[MX];\nvec line[MX];\nvec poly[MX][MX];\n\ndouble mindis(const vec& a)\n{\n\tdouble ans=+oo;\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tif(M[i]>=3&&p_in_poly(a,poly[i],M[i]))return 0;\n\t\tif(M[i]>=2)for(int j=1;j<=M[i];j++)ans=min(ans,p_to_seg(a,poly[i][j],poly[i][j%M[i]+1]));\n\t\telse ans=min(ans,(poly[i][1]-a).len());\n\t}\n\treturn ans;\n}\n\nvoid input()\n{\n\tscanf(\"%d%d\",&N,&C);\n\tfor(int i=1;i<=C;i++)line[i].input();\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tscanf(\"%d\",&M[i]);\n\t\tfor(int j=1;j<=M[i];j++)poly[i][j].input();\n\t}\n}\n\ndouble cal_max(const vec& p,const vec& q)\n{\n\tvec v=q-p;\n\tdouble len=v.len(),ret=0,di=max(1e-2/len,2e-3);\n\tfor(double i=0;i<=1;i+=di)\n\t{\n\t\tdouble now=i,stp=di/2,lf=mindis(p+v*now);\n\t\tfor(int j=1;j<=21;j++)\n\t\t{\n\t\t\tdouble tr=min(1.0,now+stp);\n\t\t\tdouble nowf=lf,nxtf=mindis(p+v*tr);\n\t\t\tif(nxtf>nowf)now=tr,lf=nxtf;\n\t\t\telse now=max(0.0,now-stp),lf=mindis(p+v*now);\n\t\t\tif(nowf+stp*1.857142857<=ret)break;\n\t\t\tstp*=0.65;\n\t\t}\n\t\tret=max(ret,mindis(p+v*now));\n\t}\n\treturn ret;\n}\n\nvoid work()\n{\n\tdouble ans=0;\n\tfor(int i=1;i<C;i++)ans=max(ans,cal_max(line[i],line[i+1]));\n\tprintf(\"%.2lf\\n\",ans);\n}\n\nint main()\n{\n    input();\n    work();\n\treturn 0;\n}\n```\n\n#### \u8fed\u4ee3\n\n```cpp\n#pragma GCC optimize(3)\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define eps 1e-8\n#define oo 1e5\n#define MX 102\n\nusing namespace std;\n\nstruct vec\n{\n\tdouble x,y;\n\tvoid input(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid output(){printf(\"%.3lf %.3lf\\n\",x,y);}\n\tvec (){}\n\tvec (const double& a,const double& b){x=a,y=b;}\n\tvec operator + (const vec& t)const{return vec(x+t.x,y+t.y);}\n\tvec operator - (const vec& t)const{return vec(x-t.x,y-t.y);}\n\tvec operator * (const double& t)const{return vec(x*t,y*t);}\n\tvec operator / (const double& t)const{return vec(x/t,y/t);}\n\tdouble len(){return sqrt(x*x+y*y);}\n\tvec normal(){return *this/(len()+eps);}\n};\nstruct itv\n{\n\tvec l,r;\n\titv (){}\n\titv (const vec& a,const vec& b){l=a,r=b;}\n\tvec mid(){return (l+r)/2.0;}\n\tdouble len(){return (r-l).len();}\n};\ndouble dot(const vec& a,const vec& b){return a.x*b.x+a.y*b.y;}\ndouble crs(const vec& a,const vec& b){return a.x*b.y-a.y*b.x;}\nbool seg_seg_int(const vec& ap,const vec& aq,const vec& bp,const vec& bq)\n{\n\tif(\tmin(ap.x,aq.x)>max(bp.x,bq.x)||\n\t\tmin(bp.x,bq.x)>max(ap.x,aq.x)||\n\t\tmin(ap.y,aq.y)>max(bp.y,bq.y)||\n\t\tmin(bp.y,bq.y)>max(ap.y,aq.y))return 0;\n\tif(\tcrs(bq-aq,ap-aq)*crs(bp-aq,ap-aq)>0||\n\t\tcrs(ap-bq,bp-bq)*crs(aq-bq,bp-bq)>0)return 0;\n\treturn 1;\n}\ndouble p_to_seg(const vec& a,const vec& p,const vec& q)\n{\n\tvec v=q-p;\n\tdouble t=dot(a-p,v)/dot(v,v);\n\tif(t<0||t>1)return min((a-p).len(),(a-q).len());\n\tvec b=p+(v*t);\n\treturn (a-b).len();\n}\nbool p_in_poly(const vec& a,const vec* p,int n)\n{\n\tint cnt=0;\n\tvec far=a+vec(1,+oo);\n\tfor(int i=1;i<=n;i++)cnt+=seg_seg_int(a,far,p[i],p[i%n+1]);\n\treturn (cnt&1);\n}\nint C,N,M[MX];\nvec line[MX];\nvec poly[MX][MX];\n\ndouble mindis(const vec& a)\n{\n\tdouble ans=+oo;\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tif(M[i]>=3&&p_in_poly(a,poly[i],M[i]))return 0;\n\t\tif(M[i]>=2)for(int j=1;j<=M[i];j++)ans=min(ans,p_to_seg(a,poly[i][j],poly[i][j%M[i]+1]));\n\t\telse ans=min(ans,(poly[i][1]-a).len());\n\t}\n\treturn ans;\n}\n\nvoid input()\n{\n\tscanf(\"%d%d\",&N,&C);\n\tfor(int i=1;i<=C;i++)line[i].input();\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tscanf(\"%d\",&M[i]);\n\t\tfor(int j=1;j<=M[i];j++)poly[i][j].input();\n\t}\n}\n\nitv use[1000001];\nvoid work()\n{\n\tdouble best=0;\n\tint h=0,t=1;\n\tfor(int i=1;i<C;i++)use[++h]=itv(line[i],line[i+1]);\n\tfor(int i=1;i<=300000&&h>=t;i++)\n\t{\n\t\titv now=use[t++],nxt1,nxt2;\n\t\tbest=max(best,mindis(now.mid()));\n\t\tnxt1=itv(now.l,now.mid());\n\t\tnxt2=itv(now.mid(),now.r);\n\t\tif(nxt1.len()>=1e-4&&mindis(nxt1.mid())+nxt1.len()/2.0>best)use[++h]=nxt1;\n\t\tif(nxt2.len()>=1e-4&&mindis(nxt2.mid())+nxt2.len()/2.0>best)use[++h]=nxt2;\n\t}\n\tprintf(\"%.6lf\\n\",best);\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\",&t);\n\tfor(int i=1;i<=t;i++)\n\t{\n\t\tinput();\n\t\twork();\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1525153070,
        "uid": 41155,
        "name": "totorato",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4286 \u3010[SHOI2008]\u5b89\u5168\u7684\u822a\u7ebf\u3011"
    },
    {
        "content": "> \u65e2\u7136\u697c\u4e0b\u7528\u722c\u5c71\u9a97\u5206\uff0c\u90a3\u6211\u4e3a\u4f55\u4e0d\u7528\u6a21\u62df\u9000\u706b\uff1f\n\n\n\n\u7ebf\u6bb5$AB$\u4e0a\u4efb\u610f\u4e00\u70b9\u90fd\u53ef\u4ee5\u8868\u793a\u6210$Ak+B(1-k)$\u7684\u5f62\u5f0f\uff0c\u5176\u4e2d$k\\in[0,1]$\u3002\u8003\u8651\u4ee5$k$\u4e3a\u53d8\u91cf\uff0c\u9000\u706b\u6c42\u6bcf\u6839\u7ebf\u6bb5\u4e0a\u7684\u5b64\u5730\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u53ea\u8981\u8ba1\u7b97\u7ed9\u5b9a\u70b9\u5230\u6bcf\u4e2a\u591a\u8fb9\u5f62\u7684\u8ddd\u79bb\uff0c\u518d\u53d6\u6700\u5c0f\u503c\u3002\u53ef\u4ee5\u5148\u5224\u65ad\u70b9\u662f\u5426\u5728\u591a\u8fb9\u5f62\u4e2d\uff0c\u82e5\u5728\u5219\u7b54\u6848\u4e3a$0$\uff0c\u5426\u5219\u7b54\u6848\u4e3a\u70b9\u5230\u591a\u8fb9\u5f62\u5404\u8fb9\u7684\u6700\u5c0f\u8ddd\u79bb\u3002\n\n\u5224\u65ad\u70b9\u5728\u591a\u8fb9\u5f62\u4e2d\u53ef\u4ee5\u4ece\u70b9\u5411\u5916\u5f15\u4e00\u6761\u5c04\u7ebf\uff0c\u6c42\u5c04\u7ebf\u4e0e\u591a\u8fb9\u5f62\u5404\u8fb9\u7684\u4ea4\u70b9\u4e2a\u6570\uff0c\u4e3a\u5947\u5219\u5728\u91cc\u8fb9\uff0c\u4e3a\u5076\u5219\u5728\u5916\u9762\u3002\n\n\u6c42\u70b9\u5230\u7ebf\u6bb5\u7684\u6700\u5c0f\u8ddd\u79bb\u53ef\u4ee5\u8fd0\u7528\u70b9\u79ef\u548c\u53c9\u79ef\u3002\u60f3\u8c61\u4ece\u70b9\u5230\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4f5c\u5782\u7ebf\uff0c\u82e5\u5782\u8db3\u5728\u7ebf\u6bb5\u4e0a\u5219\u76f4\u63a5\u5411\u91cf\u53c9\u79ef\uff0c\u5426\u5219\u4e3a\u70b9\u5230\u7aef\u70b9\u7684\u8ddd\u79bb\u3002\u5224\u65ad\u5782\u8db3\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\u53ef\u4ee5\u6bd4\u8f83\u7ebf\u6bb5\u4e0e\"\u70b9\u5230\u7aef\u70b9\u7684\u76f4\u7ebf\"\u95f4\u7684\u5939\u89d2\u4e0e$90\\degree$\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u79ef\u7684\u6b63\u8d1f\u53f7\u5224\u65ad\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <iostream>\nusing namespace std;\n\nstruct vec { // \u5411\u91cf\n\tdouble x, y;\n\tvec() { x = y = 0.0; }\n\tvec(double a, double b) { x = a, y = b; }\n\tdouble length() { return sqrt(x * x + y * y); }\n\tvec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n\tvec operator-(const vec &v) const { return vec(x - v.x, y - v.y); }\n\tdouble operator*(const vec &v) const { return x * v.x + y * v.y; }\n\tvec operator*(double k) const { return vec(x * k, y * k); }\n\tdouble operator&(const vec &v) const { return x * v.y - y * v.x; } // \u53c9\u4e58\n};\n\nstruct Poly {\n\tint m;\n\tint x[40], y[40];\n\tvoid read()\n\t{\n\t\tscanf(\"%d\", &m);\n\t\tfor (int i = 1; i <= m; i++)\n\t\t\tscanf(\"%d %d\", x + i, y + i);\n\t}\n\tint inside(double xx, double yy) // \u5224\u65ad\u70b9\u5728\u591a\u8fb9\u5f62\u91cc\uff0c\u6211\u9009\u7684\u5c04\u7ebf\u662f\u7ad6\u76f4\u5411\u4e0a\u7684\n\t{\n\t\tint flag = 0;\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tdouble a = x[i], c = x[i % m + 1];\n\t\t\tdouble b = y[i], d = y[i % m + 1];\n\t\t\tif (a == c) // \u5e73\u884c/\u91cd\u5408\u5747\u89c6\u4f5c\u4e0d\u76f8\u4ea4\n\t\t\t\tcontinue;\n\t\t\tif (a > c) {\n\t\t\t\tswap(a, c);\n\t\t\t\tswap(b, d);\n\t\t\t}\n\t\t\tif (xx < a || xx > c)\n\t\t\t\tcontinue; // \u8fd9\u6837\u4e8c\u8005\u4e0d\u53ef\u80fd\u76f8\u4ea4\n\t\t\tdouble k = (double)(d - b) / (c - a);\n\t\t\tif (k * (xx - a) + b > yy) // y = k(x - a) + b\u662f\u76f4\u7ebf\u7684\u89e3\u6790\u5f0f\n\t\t\t\tflag ^= 1;\n\t\t}\n\t\treturn flag;\n\t}\n\tdouble dist(double xx, double yy)\n\t{ // \u6c42\u70b9\u5230\u591a\u8fb9\u5f62\u7684\u8ddd\u79bb\n\t\tif (inside(xx, yy))\n\t\t\treturn 0.0;\n\t\tdouble ans = 1e100;\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tvec p1(x[i % m + 1], y[i % m + 1]), p2(x[i], y[i]), p(xx, yy);\n\t\t\tvec u = p1 - p, v = p2 - p, w = p2 - p1;\n\t\t\tif (u * w > 0)\n\t\t\t\tans = min(ans, u.length());\n\t\t\telse if (v * w < 0)\n\t\t\t\tans = min(ans, v.length());\n\t\t\telse // \u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u662f\u5782\u8db3\u5728\u7ebf\u6bb5\u5916\u7684\u60c5\u51b5\n\t\t\t\tans = min(ans, abs(u & v) / w.length());\n\t\t}\n\t\treturn ans;\n\t}\n} poly[30];\nint n, m;\nvec p[30];\n\ndouble calc(const vec &p1, const vec &p2, double k)\n{\n\tvec p = p2 * k + p1 * (1 - k);\n\tdouble dist = 1e100;\n\tfor (int i = 1; i <= n; i++)\n\t\tdist = min(dist, poly[i].dist(p.x, p.y));\n\treturn dist;\n}\n\ndouble rando()\n{\n\treturn (double)rand() / RAND_MAX;\n}\n\ndouble calc(vec p1, vec p2) // \u6a21\u62df\u9000\u706b\n{\n\tdouble T = 1, k = rando(), ans = calc(p1, p2, k);\n\twhile (T >= 1e-7) {\n\t\tdouble k2 = k + (rando() * 2 - 1) * T;\n\t\tk2 = max(0., min(k2, 1.));\n\t\tdouble tmp = calc(p1, p2, k2);\n\t\tif (tmp > ans || rando() < exp((tmp - ans) / T)) {\n\t\t\tans = tmp;\n\t\t\tk = k2;\n\t\t}\n\t\tT *= .98;\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= m; i++)\n\t\tscanf(\"%lf %lf\", &p[i].x, &p[i].y);\n\tfor (int i = 1; i <= n; i++)\n\t\tpoly[i].read();\n\tdouble ans = 0;\n\tfor (int i = 1; i < m; i++)\n\t\tans = max(ans, calc(p[i], p[i + 1]));\n\tprintf(\"%.2f\\n\", ans);\n}\n```",
        "postTime": 1596249730,
        "uid": 88403,
        "name": "acniu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4286 \u3010[SHOI2008]\u5b89\u5168\u7684\u822a\u7ebf\u3011"
    }
]