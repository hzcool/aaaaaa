[
    {
        "content": "### \u9898\u5916\u8bdd\n\n\u8fd9\u9898\u5404\u4f4ddalao\u90fd\u8bf4\u662f\u88f8\u7684LCT\uff0c\u5c31\u6211\u4e00\u4e2a\u4eba\u60f3\u5230splay\u3002\u3002\u3002\n\n\u7136\u540e\u51fa\u9898\u4eba\u4e5f\u53ea\u60f3\u5230LCT\uff0c\u800c\u4e14\u8dd1\u5f97\u5de8\u5feb\uff0c\u4e8e\u662f\u6bd4\u8d5b\u65f6\u65f6\u9650\u662f1s\u3002\u3002\u3002\n\n\u53c8\u56e0\u4e3a\u6211\u662f\u849f\u84bb\uff0c\u81ea\u5e26\u5927\u5e38\u6570\uff0c\u7adf\u7136\u6bd4LCT\u8fd8\u6162\u3002\u3002\u3002\u54ed\u6b7b\n\n\u7ed3\u679c\u51fa\u9898\u4eba\u5584\u826f\u5730~~\u5728\u6bd4\u8d5b\u65f6\u5361\u6211\u5e38\u6570~~\u5728\u8d5b\u540e\u628a\u65f6\u9650\u8c03\u52302s\n\n\n\n------------\n\n### \u6b63\u9898\n\n\u8fd9\u9898\u6211\u4e00\u773c\u5e73\u8861\u6811\uff0c\u53c8\u56e0\u4e3atreap\u4e0d\u719f\uff0c\u4e8e\u662f\u5199\u4e86splay\n\n\u4e00\u5f00\u59cb\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u90fd\u5efa\u4e00\u68f5splay\u3002\n\n\u82e5\u5408\u5e76\uff1a\n\n{\n\n\t\u8bbex\u5408\u5e76\u5230y\u540e\u9762\n\n\t\u6734\u7d20\u505a\u6cd5\uff1a\n    \n    x=getfa(x);y=getfa(y);\n    if (x==y) return;\n\twhile (rs[B]) B=rs[B];\n\tfa[A]=B;rs[B]=A;\n\tsplay(A,0);\n\n\t\u5361\u5e38\uff1a\u52a0\u542f\u53d1\u5f0f\u5373\u53ef\n}\n\n\u65ad\u5f00\uff1a\n\n{\n\n\tsplay(x,0);\n    fa[ls[x]]=0;ls[x]=0;\n    pushup(x)\n    \n}\n\n\u67e5\u8be2\uff1a\n\n{\n\n\tif (x==y) return a[x];\n\tfx=getfa(x);fy=getfa(y);\n    if (fx!=fy) return -1;\n    splay(x,0);splay(y,x);\n    return rs[x]==y?a[x]+a[y]+sum[ls[y]]:a[x]+a[y]+sum[rs[y]];\n    \n}\n\n\u5b8c\u3002\n\n\n\n------------\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 201010\nusing namespace std;\ntypedef long long ll;\nstruct FastIO\n{\n\tinline FastIO& operator>>(int& x)\n\t{\n\t\tx=0;char f=0,ch=getchar();\n\t\twhile(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n\t\twhile(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n\t\treturn x=(f?-x:x),*this;\n\t}\n\tinline FastIO& operator>>(ll& x)\n\t{\n\t\tx=0;char f=0,ch=getchar();\n\t\twhile(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n\t\twhile(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n\t\treturn x=(f?-x:x),*this;\n\t}\n\tinline FastIO& operator>>(double& x)\n\t{\n\t\tx=0;char f=0,ch=getchar();\n\t\tdouble d=0.1;\n\t\twhile(ch>'9'||ch<'0') f|=(ch=='-'),ch=getchar();\n\t\twhile(ch<='9'&&ch>='0') x=x*10+ch-48,ch=getchar();\n\t\tif(ch=='.')\n\t\t{\n\t\t\tch=getchar();\n\t\t\twhile(ch<='9'&&ch>='0') x+=d*(ch^48),d*=0.1,ch=getchar();\n\t\t}\n\t\treturn x=(f?-x:x),*this;\n\t}\n}read;\n\nvoid file()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"a.txt\",\"r\",stdin);\n\t#endif\n}\n\nll a[sz];\n\nstruct hh{int fa,dep,ch[2];ll sum;}tr[sz];\n\nint getfa(int x){while (tr[x].fa) x=tr[x].fa;return x;}\nvoid pushup(int x)\n{\n\ttr[x].sum=tr[tr[x].ch[0]].sum+tr[tr[x].ch[1]].sum+a[x];\n\ttr[x].dep=max(tr[tr[x].ch[0]].dep,tr[tr[x].ch[1]].dep)+1;\n}\nbool get(int x){return tr[tr[x].fa].ch[1]==x;}\nvoid rotate(int x)\n{\n\tint y=tr[x].fa,z=tr[y].fa;\n\tint k=get(x),w=tr[x].ch[!k];\n\tif (z) tr[z].ch[get(y)]=x;tr[x].ch[!k]=y;tr[y].ch[k]=w;\n\tif (w) tr[w].fa=y;tr[x].fa=z;tr[y].fa=x;\n\tpushup(y);pushup(x);\n}\nvoid splay(int x,int to)\n{\n\twhile (tr[x].fa!=to)\n\t{\n\t\tint y=tr[x].fa;\n\t\tif (tr[y].fa!=to) rotate(get(x)==get(y)?y:x);\n\t\trotate(x);\n\t}\n}\nvoid connect(int x,int y) //head[x]->tail[y]\n{\n\tx=getfa(x);y=getfa(y);\n\tif (x==y) return;\n\tif (tr[x].dep>tr[y].dep)\n\t{\n\t\twhile (tr[x].ch[0]) x=tr[x].ch[0];\n\t\ttr[x].ch[0]=y;tr[y].fa=x;\n\t\tsplay(y,0);\n\t}\n\telse\n\t{\n\t\twhile (tr[y].ch[1]) y=tr[y].ch[1];\n\t\ttr[y].ch[1]=x;tr[x].fa=y;\n\t\tsplay(x,0);\n\t}\n}\nvoid cut(int x)\n{\n\tsplay(x,0);\n\ttr[tr[x].ch[0]].fa=0;tr[x].ch[0]=0;\n\tpushup(x);\n}\nll query(int x,int y)\n{\n\tif (x==y) return a[x];\n\tint fx=getfa(x),fy=getfa(y);\n\tif (fx!=fy) return -1;\n\tsplay(x,0);splay(y,x);\n\tint ls=tr[y].ch[0],rs=tr[y].ch[1];\n\treturn get(y)?tr[ls].sum+a[x]+a[y]:tr[rs].sum+a[x]+a[y];\n}\nint main()\n{\n\tfile();\n\tint n,m,i,x,y;\n\tread>>n>>m;\n\tfor (i=1;i<=n;i++) read>>a[i];\n\tfor (i=1;i<=n;i++) pushup(i);\n\twhile (m--)\n\t{\n\t\tchar ch;cin>>ch;\n\t\tif (ch=='M') read>>x>>y,connect(x,y);\n\t\telse if (ch=='D') read>>x,cut(x);\n\t\telse read>>x>>y,printf(\"%lld\\n\",query(x,y));\n\t}\n}\n```\n\n\n\n------------\n\n### \u5410\u69fd\n\n\u51fa\u9898\u4eba\u592a\u6076\u5fc3\u5566\uff01\uff01\u8fd9\u4efd\u4ee3\u7801\u6700\u6162\u7684\u70b9\u8dd1\u4e861200ms\uff0c\u6bd4\u8d5b\u65f6\u65f6\u96501000ms\uff01\uff01\uff01\u6211\u7684\uff21\uff23\u6ca1\u5566\uff01\uff01\uff01",
        "postTime": 1535347940,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u7b97\u662f\u4e00\u9053\u4e0d\u9519\u7684\u975e\u65cbtreap\u7ec3\u624b\u7684\u9898\u76ee\u5427\u3002\n\u8bfb\u5b8c\u9898\u540e\uff0c\u5e94\u8be5\u80fd\u60f3\u5230\u9898\u76ee\u5c31\u662f\u8981\u5206\u88c2\u5408\u5e76\u4e00\u4e9b\u5e8f\u5217\uff0c\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u60f3\u5230\u975e\u65cbtreap\u5566\uff01\n\n\u9996\u5148\u8981\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u8868\u793ax\u6240\u5728\u7684\u5e8f\u5217\u5462\uff1f\n\u4ee3\u8868\u4e00\u4e2a\u5e8f\u5217\u7684\u80af\u5b9a\u662f\u8fd9\u4e2a\u5e8f\u5217\u7684\u6811\u7684\u6839\u8282\u70b9\uff0c\n\u90a3\u4e48\u53ea\u8981\u6cbf\u7740x\u5411\u4e0a\u8df3\uff0c\u4e00\u76f4\u8df3\u5230\u6839\u7ed3\u70b9\u5c31\u884c\u5566\uff01\n\u4e0d\u8981\u62c5\u5fc3\uff0c\u975e\u65cbtreap\u7684\u6df1\u5ea6\u5927\u7ea6\u662flog\u7684\uff0c\n\u6240\u4ee5\u627e\u4e00\u6b21\u6839\u8282\u70b9\u5c31\u662flog\u7684\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7ef4\u62a4\u8282\u70b9\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c\n\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\uff0c\u7236\u5b50\u5173\u7cfb\u5728merge\u548csplit\u7684\u65f6\u5019\u4f1a\u6539\u53d8\uff0c\n\u90a3\u4e48\u6bcf\u6b21merge\u4e4b\u540e\u5c31\u8981\u7ef4\u62a4merge\u5b8c\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\n\u6bcf\u6b21split\u518d\u5355\u72ec\u8bb0\u5f55split\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\n\u8fd9\u91cc\u53ef\u80fd\u6bd4\u8f83\u7ed5\uff08\u6bd5\u7adf\u662f\u5728\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u91cc\uff09\uff0c\n\u770b\u4ee3\u7801\u5c31\u597d\u4e86\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5f97\u5230\u8282\u70b9\u5728\u6811\u4e2d\u7684\u6392\u540d\u5462\uff1f\n\u8fd9\u4e2a\u5728\u7ef4\u62a4\u5b8c\u7236\u4eb2\u8282\u70b9\u4e4b\u540e\u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002\n\u8bbe\u6392\u540d\u4e3ak\uff0c\u90a3\u4e48k\u5148\u52a0\u4e0a\u8be5\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\n\u7136\u540e\u4e00\u76f4\u5f80\u4e0a\u8df3\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662f\u53f3\u5b50\u6811\uff0c\n\u90a3\u4e48k\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\u518d\u52a01\uff0c\u5982\u679c\u662f\u5de6\u5b50\u6811\u5c31\u4e0d\u7528\u52a0\u4e86\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\n\u4e00\u76f4\u5904\u7406\u5230\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u8fd4\u56dek\u4e86\u3002\n\n\u73b0\u5728\u6765\u5904\u7406\u64cd\u4f5c\uff01\n\nM\u64cd\u4f5c\u76f4\u63a5\u5206\u522bget\u5230x\u548cy\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5408\u5e76\u4ed6\u4eec\u5c31\u884c\u4e86\u3002\n\nD\u64cd\u4f5c\u5148\u67e5\u8be2x\u7684\u6392\u540d\uff0c\u5728\u6392\u540d\u5904split\u4e00\u4e0bx\u7684\u6839\u8282\u70b9\u5c31\u884c\u4e86\u3002\n\nQ\u64cd\u4f5c\u5c06x\uff0cy\u8fd9\u6bb5\u533a\u95f4\u4ece\u6839\u8282\u70b9\u4e2dsplit\u51fa\u6765\uff0c\u76f4\u63a5\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\ntypedef long long ll;\nconst int N=200005;\nstruct FHQTREAP{\n\tint ls,rs,siz,rnd,fa;\n\tll sum,val;\n}tr[N];\n#define lt tr[u].ls\n#define rt tr[u].rs\nvoid pushup(int u){\n\ttr[u].sum=tr[lt].sum+tr[u].val+tr[rt].sum;\n\ttr[u].siz=tr[lt].siz+1+tr[rt].siz;\n}\nint merge(int u,int v){\n\tif(!u||!v) return u^v;\n\tif(tr[u].rnd>tr[v].rnd){\n\t\trt=merge(rt,v);\n\t\ttr[rt].fa=u;\n\t\tpushup(u);\n\t\treturn u;\n\t}\n\telse{\n\t\ttr[v].ls=merge(u,tr[v].ls);\n\t\ttr[tr[v].ls].fa=v;\n\t\tpushup(v);\n\t\treturn v;\n\t}\n}\nvoid split(int u,int k,int &x,int &y,int fx,int fy){\n\tif(!u){\n\t\tx=y=0;return;\n\t}\n\tif(k<=tr[lt].siz){\n\t\ty=u;\n\t\tsplit(lt,k,x,lt,fx,u);\n\t}\n\telse{\n\t\tx=u;\n\t\tsplit(rt,k-1-tr[lt].siz,rt,y,u,fy);\n\t}\n\tif(x) tr[x].fa=fx;\n\tif(y) tr[y].fa=fy;\n\tpushup(u);\n}\nint ances(int u){\n\treturn (!tr[u].fa)?u:ances(tr[u].fa);\n}\nint getrnk(int u){\n\tint k=tr[lt].siz;\n\twhile(tr[u].fa){\n\t\tif(tr[tr[u].fa].rs==u)\n\t\t\tk+=tr[tr[tr[u].fa].ls].siz+1;\n\t\tu=tr[u].fa;\n\t}\n\treturn k+1;\n}\nint n,m;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&tr[i].val);\n\t\ttr[i].sum=tr[i].val;\n\t\ttr[i].fa=0;\n\t\ttr[i].rnd=rand();\n\t\ttr[i].siz=1;\n\t}\n\twhile(m--){\n\t\tchar opr[5];\n\t\tscanf(\"%s\",opr);\n\t\tif(opr[0]=='M'){\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tint au=ances(u),av=ances(v);\n\t\t\tif(au!=av)\n\t\t\t\tmerge(av,au);\n\t\t}\n\t\telse if(opr[0]=='D'){\n\t\t\tint u;\n\t\t\tscanf(\"%d\",&u);\n\t\t\tint k=getrnk(u);\n\t\t\tint x,y;\n\t\t\tsplit(ances(u),k-1,x,y,0,0);\n\t\t}\n\t\telse{\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tint au=ances(u),av=ances(v);\n\t\t\tif(au!=av)\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\telse{\n\t\t\t\tint ku=getrnk(u);\n\t\t\t\tint kv=getrnk(v);\n\t\t\t\tif(ku>kv){\n\t\t\t\t\tswap(u,v);\n\t\t\t\t\tswap(ku,kv);\n\t\t\t\t}\n\t\t\t\tint x,y,z;\n\t\t\t\tsplit(au,kv,x,z,0,0);\n\t\t\t\tsplit(x,ku-1,x,y,0,0);\n\t\t\t\tprintf(\"%lld\\n\",tr[y].sum);\n\t\t\t\tmerge(merge(x,y),z);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546776902,
        "uid": 18029,
        "name": "\u97f5\u57ce\u5c0f\u7ba1\u5bb6",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u505a\u5b8c\u8fd9\u9898\u5185\u5fc3:???\u8fd9\u4e48\u66b4\u529b\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u5417???\u8fd9\u9898\u771f\u7684\u80fdLCT\u505a\u5417???\n\n~~\u53cd\u6b63\u80fd\u8fc7\u5c31\u884c~~\n\n\u9996\u5148\u8fd9\u9898\u7ef4\u62a4\u7684$LCT$\u91cc\u5168\u90fd\u662f\u5b9e\u94fe\uff0c\u6ca1\u6709\u865a\u94fe\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u80fd\u62ff\u6765\u5e72\u4ec0\u4e48\n\n\u56e0\u4e3a\u5e8f\u5217\u662f\u6709\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u53ef\u4ee5\u6362\u6839\n\n1. \u628a$x$\u6240\u5728\u5e8f\u5217$X$\u63a5\u5230$y$\u6240\u5728\u5e8f\u5217$Y$\u4e0a\n\n\u5148$findroot$\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u4e2a$Splay$\u91cc\uff0c\u7136\u540e\u66b4\u529b\u627e\u5230$X$\u7684\u961f\u9996\u3001$Y$\u7684\u961f\u5c3e\uff0c\u628a\u8fd9\u4e24\u4e2a\u8fde\u8d77\u6765\uff0c\u7136\u540e\u5728$X$\u7684\u961f\u5c3e\u90a3\u4e2a\u5730\u65b9$access$\u4e00\u4e0b\u66f4\u65b0\u4fe1\u606f\uff0c\u603b\u4e4b\u66b4\u529b\u65e0\u6bd4\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u590d\u6742\u5ea6\u5bf9\u4e0d\u5bf9\n\n2. \u65ad\u8fb9\n\n$splay$\u5b8c\u76f4\u63a5\u65ad\u5de6\u513f\u5b50\n\n3. \u533a\u95f4\u548c\n\n\u4e0d\u80fd$findroot$\u5c31\u6539\u6210\u524d\u7f00\u548c\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e0b$size$\u5224\u65ad\u54ea\u4e2a\u5728\u524d\u9762\uff0c\u7136\u540e\u66b4\u529b$splay$\u5b8c\u67e5\u8be2.\u5df2\u7ecf\u4e0d\u77e5\u9053\u591a\u5c11\u4e2a$splay$\u4e86.\n\n\u8fd9\u9898\u56e0\u4e3a\u7ef4\u62a4\u7684\u662f\u5f88\u591a\u6761\u94fe\u6240\u4ee5\u76f4\u63a5$Splay/FHQ\\ Treap$\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9...\u6211\u89c9\u5f97$Splay$\u5df2\u7ecf\u5feb\u88ab\u73a9\u574f\u4e86...\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define nroot(x) (ch[f[x]][0]==x||ch[f[x]][1]==x)\nusing namespace std;\nconst int N=4e5;\nlong long s[N];\nint f[N],size[N],ch[N][2],n,m,w[N];\nvoid pushup(int x){s[x]=s[ch[x][0]]+s[ch[x][1]]+w[x];size[x]=size[ch[x][0]]+size[ch[x][1]]+1;}\nvoid rotate(int x)\n{\n\tint y=f[x],z=f[y],wh=ch[y][1]==x,w=ch[x][wh^1];\n\tif(nroot(y))ch[z][ch[z][1]==y]=x;\n\tch[x][wh^1]=y,ch[y][wh]=w;\n\tf[x]=z,f[y]=x,f[w]=y;pushup(y);\n}\nvoid splay(int x)\n{\n\twhile(nroot(x))\n\t{\n\t\tint y=f[x],z=f[y];\n\t\tif(nroot(y))rotate((ch[y][1]==x)^(ch[z][1]==y)?x:y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\nvoid access(int x){for(int y=0;x;x=f[y=x])splay(x),ch[x][1]=y,pushup(x);}\nvoid Link(int x,int y)\n{\n\tsplay(x);int tt=x;while(ch[x][0])x=ch[x][0];\n\tint t=y;splay(y);while(ch[t][0])t=ch[t][0];\n\tif(x==t)return;\n\twhile(ch[y][1])y=ch[y][1];\n\tsplay(x),f[x]=y;while(ch[tt][1])tt=ch[tt][1];access(tt);\t\n}\nvoid cut(int x){splay(x),ch[x][0]=f[ch[x][0]]=0;pushup(x);}//\u76f4\u63a5\u65ad\nlong long query(int x,int y)\n{\n\tsplay(x);int tx=x,szx=size[ch[x][0]];long long sx=s[ch[x][0]];int wx=w[x];//splay\u5b8c\u5de6\u513f\u5b50\u5c31\u662f\u4e0d\u542b\u672c\u8eab\u7684\u524d\u7f00\u548c\n\twhile(ch[tx][0])tx=ch[tx][0];\n\tsplay(y);int ty=y,szy=size[ch[y][0]];long long sy=s[ch[y][0]];int wy=w[y];\n\twhile(ch[ty][0])ty=ch[ty][0];\n\treturn tx==ty?(szx<szy?sy+wy-sx:sx+wx-sy):-1;//\u8bb0size\u5224\u65ad\n} \nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",w+i),size[i]=1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;char st[2];\n\t\tscanf(\"%s%d\",st+1,&x);\n\t\tswitch(st[1])\n\t\t{\n\t\t\tcase 'M':scanf(\"%d\",&y),Link(x,y);break;\n\t\t\tcase 'D':cut(x);break;\n\t\t\tcase 'Q':scanf(\"%d\",&y),printf(\"%lld\\n\",query(x,y));break;\n\t\t}\n\t}\n } \n ```",
        "postTime": 1555244012,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u7531\u61d2\u4ebaGKxx\u5199\u7684\u61d2\u4eba\u9898\u89e3\u3002\n\n\u5148\u7b80\u5355\u770b\u4e00\u773c\u64cd\u4f5c\uff1a\u5408\u5e76\uff0c\u5206\u88c2\uff0c\u533a\u95f4\u548c\u67e5\u8be2\uff0c\u975e\u5e38\u7684\u6a21\u677f\u3002\u800c\u4e14\u8fd9\u91cc\u7684\u5408\u5e76\u662f\u628a\u4e00\u4e2a\u5e8f\u5217\u6574\u4f53\u63a5\u5728\u53e6\u4e00\u4e2a\u5e8f\u5217\u540e\u9762\uff0c\u6240\u4ee5\u6839\u672c\u4e0d\u9700\u8981\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u53ea\u8981\u6b63\u5e38\u7684\u5e73\u8861\u6811\u5408\u5e76\u5373\u53ef\u3002\u5bf9\u4e8e\u975e\u65cbtreap\uff0c\u5c31\u662f\u6b63\u5e38\u7684merge\u64cd\u4f5c\uff1b\u5bf9\u4e8esplay\uff0c\u53ea\u8981\u628a\u4e24\u4e2a\u6811\u6839$X,Y$\u627e\u5230\uff0c\u5728$X$\u6811\u4e2d\u627e\u5230\u6700\u9760\u53f3\u7684\u70b9\u8f6c\u5230\u6839\uff0c\u628a$Y$\u63a5\u5230\u53f3\u5b69\u5b50\u4e0a\u5c31\u597d\u4e86\u3002\n\n\u5206\u88c2\u5176\u5b9e\u4e5f\u662f\u88f8\u7684\u5e73\u8861\u6811\u5206\u88c2\uff0c\u5982\u679c\u662f\u975e\u65cbtreap\u7684\u8bdd\u5f97\u5148\u67e5\u8be2\u7ed3\u70b9$x$\u7684\u6392\u540d\uff0c\u518d\u6309\u6392\u540d\u5206\u88c2\uff1bsplay\u5c31\u76f4\u63a5\u628a$x$splay\u5230\u6839\uff0c\u628a\u53f3\u5b69\u5b50\u65ad\u4e86\u5373\u53ef\u3002\n\n\u67e5\u8be2\u5c31\u6b63\u5e38\u63d0\u53d6\u533a\u95f4\u5373\u53ef\u3002\n\n\u4f46\u662f\u7531\u4e8e\u6211\u5b9e\u5728\u662f\u592a\u61d2\u4e86\uff0c\u6240\u4ee5\u6211\u5199\u7684\u4e0d\u662f\u7eaf\u79cd\u7684splay\uff0c\u800c\u662f\u5355\u65cb\u7684spaly\u3002\u8fd9\u90fd\u80fd\u4e0d\u88ab\u5361\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u51fa\u9898\u4eba\u662f\u771f\u7684\u826f\u5fc3\u3002\u3002\u3002\n\n\u4e3a\u4ec0\u4e48\u5199spaly\u5462\u3002\u3002\u3002\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u64cd\u4f5c\uff1a\n\n```cpp\nspaly(x); spaly(y);\n```\n\n\u5982\u679cx\u548cy\u5728\u540c\u4e00\u68f5\u5b50\u6811\u91cc\uff0c\u90a3\u4e48\u8fd9\u884c\u4ee3\u7801\u6267\u884c\u5b8c\u4e4b\u540e\uff0cx\u4e00\u5b9a\u662fy\u7684\u5de6\u5b69\u5b50\u6216\u53f3\u5b69\u5b50\u3002\u53cc\u65cb\u662f\u6ca1\u6709\u8fd9\u6837\u7684\u6027\u8d28\u7684\u3002\n\n\u4e8e\u662f\u6211\u5c31\u501f\u52a9\u8fd9\u4e2a\u6027\u8d28\u7b80\u5316\u4e86\u90e8\u5206\u4ee3\u7801\u3002\n\n\u4ec5\u4f9b\u53c2\u8003\uff0c\u6b63\u5f0f\u8003\u8bd5\u65f6\u5199spaly\u5c0f\u5fc3\u88ab\u5361\u3002\u3002\u3002\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\ntemplate <typename T> inline void read(T& x) {\n    int f = 0, c = getchar(); x = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) x = x * 10 + c - 48, c = getchar();\n    if (f) x = -x;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& x, Args&... args) {\n    read(x); read(args...); \n}\ntemplate <typename T> void write(T x) {\n    if (x < 0) x = -x, putchar('-');\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T> void writeln(T x) { write(x); puts(\"\"); }\n\ntypedef long long LL;\nconst int maxn = 2e5 + 207;\nint fa[maxn], ch[maxn][2], value[maxn];\nLL sum[maxn];\nint n, m;\n\ninline int iden(int x) {\n\treturn ch[fa[x]][0] == x ? 0 : (ch[fa[x]][1] == x ? 1 : -1);\n}\ninline void update(int x) {\n    sum[x] = sum[ch[x][0]] + sum[ch[x][1]] + value[x];\n}\ninline void rotate(int x) {\n    int d = iden(x), y = fa[x];\n    if (~iden(y)) ch[fa[y]][iden(y)] = x;\n    fa[x] = fa[y];\n    if ((ch[y][d] = ch[x][d ^ 1])) fa[ch[x][d ^ 1]] = y;\n    fa[ch[x][d ^ 1] = y] = x;\n    update(y); update(x);\n}\ninline void spaly(int x) {\n    while (fa[x]) rotate(x);\n}\ninline void merge(int x, int y) {\n    if (x == y) return;\n    spaly(x); spaly(y);\n    if (ch[y][0] == x || ch[y][1] == x) return;\n    int z = x;\n    while (ch[z][1]) z = ch[z][1];\n    spaly(z);\n    fa[ch[z][1] = y] = z;\n    update(z);\n}\ninline void split(int x) {\n    spaly(x);\n    fa[ch[x][1]] = 0;\n    ch[x][1] = 0;\n    update(x);\n}\ninline LL query(int x, int y) {\n    if (x == y) return value[x];\n    spaly(x); spaly(y);\n    if (ch[y][0] == x) return sum[ch[x][1]] + value[x] + value[y];\n    else if (ch[y][1] == x) return sum[ch[x][0]] + value[x] + value[y];\n    else return -1;\n}\n\nint main() {\n    read(n, m);\n    for (int i = 1; i <= n; ++i) read(value[i]), sum[i] = value[i];\n    for (int i = 1; i <= m; ++i) {\n        int c = getchar(); while (isspace(c)) c = getchar();\n        if (c == 'M') {\n            int x, y; read(x, y);\n            merge(x, y);\n        } else if (c == 'D') {\n            int x; read(x);\n            split(x);\n        } else {\n            int x, y; read(x, y);\n            writeln(query(x, y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1545405880,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u4e00\u773c\u4e0b\u53bb LCT\u3002  \n~~\u539f\u8c05\u6211 LCT \u8c03\u4e86\u6574\u6574\u4e00\u5929\u3002~~  \n\u53ef\u4ee5\u53d1\u73b0\uff0c\u672c\u9898\u5176\u5b9e\u5c31\u662f\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a\n - \u5c06\u4e24\u6761\u94fe\u5408\u5e76\u4e3a\u4e00\u6761\u94fe\uff1b\n - \u5c06\u4e00\u6761\u94fe\u65ad\u4e3a\u4e24\u6761\u94fe\uff1b\n - \u5224\u65ad\u4e24\u70b9\u8fde\u901a\u6027\u53ca\u6c42\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u503c\u548c\u3002\n\n\u50cf\u8fd9\u79cd\u53c8\u65ad\u8fb9\u53c8\u8fde\u8fb9\u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bd5\u8bd5 LCT\u3002  \n\u7531\u4e8e\u672c\u9898\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u4e00\u4e2a\u5b69\u5b50\uff08\u56e0\u4e3a\u662f\u94fe\uff09\uff0c\u6240\u4ee5 LCT \u6ca1\u6709\u865a\u8fb9\u3002  \n\n***\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u3002\n - \u5408\u5e76\uff1a\u5148\u5224\u65ad\u662f\u5426\u8fde\u901a\uff0c\u5206\u522b\u53bb\u627e\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u94fe\u7684\u6700\u6df1\u7684\u70b9\uff08LCT \u4e0a\u8868\u73b0\u4e3a\u6240\u5728 splay \u7684\u6839\u8282\u70b9\u4e00\u76f4\u8df3\u53f3\u513f\u5b50\u80fd\u8df3\u5230\u7684\u6700\u8fdc\u7684\u70b9\uff09\u548c\u6700\u6d45\u7684\u70b9\uff08LCT \u4e0a\u8868\u73b0\u4e3a\u6240\u5728 splay \u7684\u6839\u8282\u70b9\u4e00\u76f4\u8df3\u5de6\u513f\u5b50\u80fd\u8df3\u5230\u7684\u6700\u8fdc\u7684\u70b9\uff09\uff0c\u76f4\u63a5 `link` \u5373\u53ef\u3002\n - \u65ad\u8fb9\uff1a\u53ea\u7ed9\u4e00\u4e2a\u53c2\u6570\uff0c\u9700\u8981\u81ea\u884c\u53bb\u627e\u94fe\u4e0a\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5728 LCT \u4e0a\u6709\u4e00\u4e2a trick :\u628a\u5b83 splay \u4e3a\u5f53\u524d splay \u7684\u6839\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u5c31\u662f\u9700\u8981\u5206\u79bb\u7684\u90e8\u5206\uff08\u94fe\u4e0a\u6df1\u5ea6\u90fd\u6bd4\u5b83\u672c\u8eab\u5c0f\uff09\uff0c\u76f4\u63a5\u65ad\u8fb9\u5373\u53ef\u3002\n - \u67e5\u8be2\uff1a\u5148\u5224\u65ad\u8fde\u901a\u6027\uff0c\u8003\u8651\u7ef4\u62a4\u4ece\u94fe\u9876\u5230\u8be5\u8282\u70b9\u8def\u5f84\u4e0a\u70b9\u6743\u503c\u548c\uff08\u4e5f\u5c31\u662f\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u5728 LCT \u4e0a\u8868\u73b0\u4e3a\u7ef4\u62a4\u5de6\u5b50\u6811\u7684\u548c\u52a0\u4e0a\u672c\u8eab\u8282\u70b9\u6743\u503c\uff09\uff0c\u4e24\u4e2a\u8282\u70b9\u524d\u7f00\u548c\u4f5c\u5dee\u5f97\u5230\u7b54\u6848\u3002  \n \n***\n\n\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\n - `long long`\n - \u5982\u679c\u4f60\u7684\u4ee3\u7801\u53bb\u9664\u4e86 `access` \u7b49\u6709\u5173\u865a\u5b50\u6811\u4e00\u7c7b\u7684\u64cd\u4f5c\uff0c\u52a1\u5fc5\u6ce8\u610f `link` \u7684\u65f6\u5019\u8fde\u53cc\u5411\u8fb9\uff0c`cut` \u7684\u65f6\u5019\u65ad\u53cc\u5411\u8fb9\uff0c\u6ce8\u610f\u5148 `f[ls (p)] = 0` \uff0c\u518d `ls (p) = 0` \u3002~~\uff08\u8840\u6cea\u53f2\uff09~~  \n \n***\n\n**code**  \n\n```cpp\n#include <bits/stdc++.h>\n#define fq(i,a,b) for (int i = (a); i <= (b); i++)\n#define fnq(i,a,b) for (int i = (a); i < (b); i++)\n#define nfq(i,a,b) for (int i = (a); i >= (b); i--)\n#define nfnq(i,a,b) for (int i = (a); i > (b); i--)\n#define fqs(i,a,b,c) for (int i = (a); i <= (b); i += (c))\n#define fnqs(i,a,b,c) for (int i = (a); i < (b); i += (c))\n#define nfqs(i,a,b,c) for (int i = (a); i >= (b); i -= (c))\n#define nfnqs(i,a,b,c) for (int i = (a); i > (b); i -= (c))\n#define elif else if\nusing namespace std;\n#define int long long\n\ninline int rd () {\n\tint f = 1;\n\tchar ch = getchar ();\n\twhile (!isdigit (ch)) (ch == '-' ? (f = -1) : 0), ch = getchar ();\n\tint num = 0;\n\twhile (isdigit (ch)) num = num * 10 + ch - '0', ch = getchar ();\n\treturn num * f;\n}\n#define d rd ()\n\n// \u4e0d\u652f\u6301\u865a\u5b50\u6811\u6709\u5173\u7684 LCT\nconst int maxn = 200200;\nint ch[maxn][2], f[maxn], sum[maxn], val[maxn], tag[maxn];\n#define ls(p) ch[p][0]\n#define rs(p) ch[p][1]\nvoid push_up (int p) {sum[p] = sum[ls (p)] + sum[rs (p)] + val[p];}\nbool isroot (int p) {return p && ls (f[p]) != p && rs (f[p]) != p;}\nvoid rev (int p) {swap (ls (p), rs (p)); tag[p] ^= 1;}\nvoid push_down (int p) {if (tag[p]) {if (ls (p)) rev (ls (p)); if (rs (p)) rev (rs (p)); tag[p] = 0;}}\nint which (int p) {return ch[f[p]][1] == p;}\nvoid connect (int p, int fa, int w) {ch[fa][w] = p, f[p] = fa;}\nvoid rotate (int p) {\n\tint fa = f[p], ffa = f[fa], wp = which (p), wfa = which (fa), pson = ch[p][wp ^ 1];\n\tif (!isroot (fa)) connect (p, ffa, wfa); else f[p] = ffa;\n\tconnect (pson, fa, wp); connect (fa, p, wp ^ 1); push_up (fa); push_up (p);\n}\nvoid push_all (int p) {if (!isroot (p)) push_all (f[p]); push_down (p);}\nvoid splay (int p) {\n\tpush_all (p);\n\tfor (int fa; fa = f[p], !isroot (p); rotate (p)) if (!isroot (fa))\n\t\trotate (which (fa) == which (p) ? fa : p);\n}\nint find (int p, int w) {\n\tsplay (p); push_down (p);\n\twhile (ch[p][w]) push_down (ch[p][w]), p = ch[p][w];\n\tsplay (p); return p; \n}\n#define findroot(p) find(p, 0)\n#define findleaf(p) find(p, 1)\nvoid cut (int p) {splay (p); f[ls (p)] = 0; ls (p) = 0; push_up (p);}\nint sm (int p) {splay (p); return sum[ls (p)] + val[p];}\nsigned main () {\n\tint n = d, m = d;\n\tfq (i, 1, n) val[i] = d;\n\twhile (m--) {\n\t\tchar op[10]; scanf (\"%s\", op);\n\t\tif (op[0] == 'M') {\n\t\t\tint x = d, y = d;\n\t\t\t// link \u653e main \u91cc\u9762\u4e86\n\t\t\tif (findroot (x) != findroot (y))\n\t\t\t\tf[findroot (x)] = findleaf (y), rs (findleaf (y)) = findroot (x), push_up (findleaf (y));\n\t\t} elif (op[0] == 'D') cut (d); \n\t\telse {\n\t\t\tint x = d, y = d;\n\t\t\tif (findroot (x) != findroot (y)) puts (\"-1\");\n\t\t\telse {\n\t\t\t\tint vx = sm (x), vy = sm (y);\n\t\t\t\tprintf (\"%lld\\n\", (vx > vy ? vx - vy + val[y] : vy - vx + val[x]));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1658383708,
        "uid": 300313,
        "name": "_luanyi_",
        "ccfLevel": 6,
        "title": "P4847"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\u7ef4\u62a4\u82e5\u5e72\u4e2a\u5e8f\u5217\uff0c\u8d44\u74f7\u4e00\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u5c06\u4e24\u4e2a\u5e8f\u5217\u62fc\u63a5\u5728\u4e00\u8d77\n\n2. \u5c06\u4e00\u4e2a\u5e8f\u5217\u4ece\u67d0\u5904\u65ad\u5f00\n\n3. \u67e5\u8be2\u4e24\u70b9\u4e4b\u95f4\u6743\u503c\u548c\n\n\u53c8\u770b\u8fd9\u4e2a\u9898\u76ee\uff0c\u5c31\u662f\u5728\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4\u7684\u57fa\u7840\u4e0a\u9762\u52a0\u4e86\u53ef\u4ee5\u65ad\u5f00\u7684\u64cd\u4f5c\uff0c\u800c\u4e14\u5e76\u67e5\u96c6\u672c\u8d28\u662f\u4e00\u5ea7\u68ee\u6797\uff0c\u5728\u6bd4\u7ebf\u6027\u8fd8\u8981\u5feb\u7684\u65f6\u95f4\u5185\u7ef4\u62a4\u68ee\u6797\uff0c\u60f3\u5230LCT\u3002\n\n\u800c\u4e14\u8fd9\u9053\u9898\u7684\u786e\u662fLCT\u3002\u3002\u3002\u4e0d\u8fc7\u7531\u4e8e\u9898\u76ee\u7684\u7279\u6b8a\u6027\uff0c\u6bcf\u9897Splay\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u94fe\uff0c\u5e76\u4e0d\u9700\u8981Access\u64cd\u4f5c\u3002\n\n\u5e76\u4e14\uff0cSplay\u548crotate\u64cd\u4f5c\u4e5f\u4e0d\u9700\u8981\u6539\u52a8\u3002\uff08\u56e0\u4e3a\u9898\u76ee\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u9053\u9898\u6ca1\u6709\u865a\u8fb9\uff09\n\n\u8981\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bfb\u627e\u4e00\u4e2a\u8282\u70b9\u672b\u5c3e\u548c\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\uff0c\u8fde\u63a5\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6709\u4e86\u4ee5\u4e0b\u4e24\u4e2a\u64cd\u4f5c\uff1a\n```cpp\ninline int findroot(int u){\n    Splay(u);\n    while(chi[u][0])u=chi[u][0];\n    Splay(u);\n    return u;\n}\ninline int findleaf(int u){\n    Splay(u);\n    while(chi[u][1])u=chi[u][1];\n    Splay(u);\n    return u;\n}\n```\n\u770b\u51fd\u6570\u540d\u4e5f\u80fd\u770b\u61c2\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u5e72\u561b\u5427qwq\n\n\u56e0\u4e3a\u662f\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981Access\u64cd\u4f5c\uff0c\u76f4\u63a5Splay\u5c31\u5b8c\u4e86QAQ\n\n\u7136\u540e\u5c31\u662f\u8fde\u63a5\u548c\u65ad\u5f00\u64cd\u4f5c\u4e86\uff0c\u7279\u522b\u677f\u5b50\uff1a\n```cpp\ninline void link(int u,int v){\n    if(findroot(u)==findroot(v))return;\n    connect(findroot(u),findleaf(v),1);\n}\ninline void cut(int u){\n    Splay(u);\n    f[chi[u][0]]=0;\n    chi[u][0]=0;\n}\n```\n\u770b\u5230\u6ca1\u6709\uff0c\u4ee3\u7801\u5982\u6b64\u7b80\u6d01\u3002\n\n\u7136\u540e\u94fe\u4e0a\u6c42\u548c\uff0c\u76f4\u63a5\u524d\u7f00\u548c\u51cf\u524d\u7f00\u548c\uff0c\u6700\u540e\u5224\u65ad\u4e00\u4e0b\u54ea\u4e2a\u8282\u70b9\u6df1\u5ea6\u66f4\u6d45\uff0c\u52a0\u4e0a\u8be5\u8282\u70b9\u7684\u6743\u503c\u3002\uff08\u56e0\u4e3a\u88ab\u7b97\u6389\u4e86QAQ\uff09\n\n\u56e0\u4e3a\u6ca1\u6709\u8d1f\u6743\uff0c\u5e76\u4e0d\u9700\u8981Splay\u5224\u65ad\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u76f4\u63a5\u6bd4\u8f83\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u8fd9\u90e8\u5206\u4ee3\u7801\uff1a\n```cpp\ninline ll Sum(int u){\n    Splay(u);\n    return siz[chi[u][0]]+val[u];\n}\ninline ll Query(int u,int v){\n    if(findroot(u)!=findroot(v))return -1;\n    ll a=Sum(u),b=Sum(v);\n    if(a>b)return a-b+val[v];\n    else return b-a+val[u];\n}\n```\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u6700\u540e\u505a\u4e00\u9053\u586b\u7a7a\u9898\u5427\uff1a\u4e09\u5e74\uff08       \uff09\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00\uff08       \uff09\u89c1\u7956\u5b97\u3002\n\n\u4ee3\u7801\u7ed9\u4e00\u4e0b\u5427\uff1a\n```cpp\n#include<iostream>\nconst int M=2e5+5;\ntypedef long long ll;\nint f[M],chi[M][2];\nll val[M],siz[M];\nint n,m;\ninline bool son(int u){\n    return chi[f[u]][1]==u;\n}\ninline void connect(int u,int v,bool son){\n    f[u]=v;chi[v][son]=u;\n}\ninline void update(int u){\n    siz[u]=siz[chi[u][0]]+siz[chi[u][1]]+val[u];\n}\ninline void rotate(int x){\n    int y=f[x],z=f[y],f1=son(x),f2=son(y);\n    connect(chi[x][!f1],y,f1);\n    connect(x,z,f2);\n    connect(y,x,!f1);\n    update(y);\n}\ninline void Splay(int u){\n    for(int v;v=f[u];rotate(u))if(f[v]){\n        rotate(son(u)^son(v)?u:v);\n    }\n    update(u);\n}\ninline int findroot(int u){\n    Splay(u);\n    while(chi[u][0])u=chi[u][0];\n    Splay(u);\n    return u;\n}\ninline int findleaf(int u){\n    Splay(u);\n    while(chi[u][1])u=chi[u][1];\n    Splay(u);\n    return u;\n}\ninline void link(int u,int v){\n    if(findroot(u)==findroot(v))return;\n    connect(findroot(u),findleaf(v),1);\n}\ninline void cut(int u){\n    Splay(u);\n    f[chi[u][0]]=0;\n    chi[u][0]=0;\n}\ninline ll Sum(int u){\n    Splay(u);\n    return siz[chi[u][0]]+val[u];\n}\ninline ll Query(int u,int v){\n    if(findroot(u)!=findroot(v))return -1;\n    ll a=Sum(u),b=Sum(v);\n    if(a>b)return a-b+val[v];\n    else return b-a+val[u];\n}\nsigned main(){\n    int i;\n    std::cin>>n>>m;\n    for(i=1;i<=n;++i)std::cin>>val[i];\n    for(i=1;i<=m;++i){\n        char s;int u,v;\n        std::cin>>s;\n        if(s=='M'){\n            std::cin>>u>>v;\n            link(u,v);\n        }\n        if(s=='Q'){\n            std::cin>>u>>v;\n            std::cout<<Query(u,v)<<'\\n';\n        }\n        if(s=='D'){\n            std::cin>>u;\n            cut(u);\n        }\n    }\n}\n```\n\u4e0d\u8fc7\u8fd9\u9053\u9898\u8fd8\u53ef\u4ee5\u7528FHQ\u76f4\u63a5\u505a\uff0c\u601d\u8def\u4e5f\u5f88\u597d\u60f3\u3002\u4e0d\u8fc7\u8981\u6ce8\u610f\u7ef4\u62a4\u7236\u6307\u9488QAQ",
        "postTime": 1595169219,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 LCT P4847\u9898\u89e3"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8\uff1a[P4847 \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2](https://www.luogu.com.cn/problem/P4847)\n\n\u89e3\u9898\u601d\u8def\uff1a\n\n\u5927\u7e41\u81f3\u7b80\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u624b\u6a21\u4e00\u4e0b\u8fc7\u7a0b\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u4e00\u5171\u6709 $n$ \u4e2a\u5206\u6563\u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u7684\u5927\u5c0f\u662f $1$ \uff0c\u521d\u8bc6\u65f6\u7b2c $i$ \u5e8f\u5217\u91cc\u7684\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u662f $val_i$ \uff0c\u8fd9\u4e2a\u5143\u7d20\u7684\u6807\u8bb0\u503c\u662f $i$ \uff0c\u662f\u4e0d\u53d8\u7684\u3002\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u662f\u5c06\u6807\u8bb0\u503c\u4e3a $x$ \u6240\u5728\u7684\u6574\u4e2a\u5e8f\u5217\u79fb\u52a8\u5230\u6807\u8bb0\u503c\u4e3a $y$ \u7684\u5e8f\u5217\u540e\u9762\u5e76\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\uff0c\u5982\u679c\u6807\u8bb0\u503c\u4e3a $x$ \u548c\u6807\u8bb0\u503c\u4e3a $y$ \u6240\u5728\u7684\u662f\u540c\u4e00\u4e2a\u5e8f\u5217\uff0c\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u662f\u5c06\u6807\u8bb0\u503c\u4e3a $x$ \u6240\u5728\u7684\u5e8f\u5217\u5206\u88c2\u6210\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u662f $x$ \u4e4b\u524d\u7684\uff0c\u540e\u4e00\u90e8\u5206\u662f $x$ \u53ca $x$ \u4ee5\u540e\u7684\uff0c\u6ce8\u610f\uff0c\u5e8f\u5217\u5e76\u4e0d\u662f\u6309\u7167\u6807\u8bb0\u503c\u6392\u5e8f\uff0c\u800c\u662f\u6309\u7167\u5206\u88c2\u5408\u5e76\u540e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u5982 $15\\ 14\\ 13\\ 12\\ 11$ \u7684\u6807\u8bb0\u503c\u662f $1\\ 2\\ 3\\ 4\\ 5$ \u5c06\u6807\u8bb0\u503c\u4e3a $1$ \u7684\u5143\u7d20\u6240\u5728\u5e8f\u5217\u79fb\u5230\u6807\u8bb0\u503c\u4e3a $5$ \u7684\u5143\u7d20\u6240\u5728\u7684\u5e8f\u5217\u540e\u9762\u5e76\u5408\u5e76\uff0c\u6240\u5448\u73b0\u51fa\u7684\u5143\u7d20 $val$ \u5e8f\u5217\u662f $14\\ 13\\ 12\\ 11\\ 15$ \uff0c\u6b64\u65f6\u6700\u540e\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u5e8f\u5217\u5185\uff0c\u5982\u679c\u8981\u5206\u88c2\u6807\u8bb0\u503c\u4e3a $5$ \u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u5206\u88c2\u540e\u7684\u4ecd\u662f $14\\ 13\\ 12\\ 11\\ 15$ \uff0c\u4f46\u6700\u540e\u4e24\u4e2a\u5143\u7d20\u5df2\u4e0d\u5728\u540c\u4e00\u4e2a\u5e8f\u5217\u5185\u4e86\u3002\n\n\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u662f\u67e5\u8be2\u540c\u4e00\u4e2a\u5e8f\u5217\u5185\u6807\u8bb0\u503c\u4e3a $x$ \u7684\u5143\u7d20\u5230\u6807\u8bb0\u503c\u4e3a $y$ \u7684\u5143\u7d20\u7684\u548c\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5f53\u6807\u8bb0\u503c\u4e3a $5\\ 1$ \u7684\u5e8f\u5217\u5143\u7d20\u503c\u4e3a $11\\ 15$ \u6211\u4eec\u67e5\u8be2 $5\\ 1$ \u548c $1\\ 5$ \u662f\u7b49\u4ef7\u7684\uff0c\u5f53\u7136\u5982\u679c\u4e24\u4e2a\u6807\u8bb0\u503c\u4e0d\u5728\u540c\u4e00\u5e8f\u5217\u5185\u5c31\u8f93\u51fa $-1$ \u3002\n\n\u63a5\u4e0b\u91cc\u6211\u4eec\u63d0\u70bc\u4e00\u4e0b\uff0c\u5728\u91cc\u9762\u51fa\u73b0\u9891\u7387\u6700\u591a\u7684\u9664\u4e86\u6807\u8bb0\u503c\u5c31\u662f\u5206\u88c2\u3001\u5408\u5e76\uff0c\u518d\u54c1\u5473\u4e00\u4e0b\uff0c\u5206\u88c2\uff0c\u5408\u5e76\uff0c\u5e8f\u5217\uff0c\u67e5\u8be2\u3002\n\n### fhq-treap!\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053fhq-treap\u662f\u4ec0\u4e48\uff0c\u7ed9\u51fa\u4e00\u7bc7luogu\u65e5\u62a5\u3002\n\n[\u6d1b\u8c37\u65e5\u62a5\u7b2c43\u671f [Chanis]\u4e0d\u7528\u65cb\u8f6c\u7684treap\uff1f\u2014\u2014fhq treap](https://www.luogu.org/blog/Chanis/fhq-treap)\n\n\u5982\u679c\u4f60\u5bf9fhq-treap\u7684\u6027\u8d28\u4e0d\u751a\u660e\u4e86\uff0c\u7ed9\u51fa\u81ea\u5df1\u7684\u4e00\u7bc7\u535a\u5ba2\uff0c\u91cc\u9762\u7b2c\u4e00\u7bc7\u5c31\u662ffhq-treap\u3002\n\n[\u8bba\u7b97\u6cd5\u53ca\u6570\u636e\u7ed3\u6784](https://www.luogu.com.cn/blog/85514/lun-ping-heng-shu)\n\n\u5982\u679c\u4f60\u8ba4\u771f\u9605\u8bfb\u5e76\u7406\u89e3\u4e86\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5bf9fhq-treap\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u4e86\uff0c\u4e0d\u8bba\u6211\u4eec\u600e\u4e48\u5206\u88c2\u5408\u5e76fhq-treap\uff0c\u53ea\u6709\u597d\u597d\u5730pushup\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5e73\u8861\u6811\u7ef4\u62a4\u7ed3\u70b9\u7684\u6b63\u786e\u6027\u3002\n\n\u90a3\u4e48\u8fd9\u4e00\u9898\u5c31\u662ffhq-treap\u7684\u666e\u901a\u64cd\u4f5c\u4e86\uff0c\u521d\u59cb\u60c5\u51b5\u4e0b\u6211\u4eec\u6709 $n$ \u9897\u5927\u5c0f\u4e3a $1$ \u7684\u5e73\u8861\u6811\uff0c\u5408\u5e76\u5c31\u6b63\u5e38\u5408\u5e76\uff0c\u5206\u88c2\u5c31\u6b63\u5e38\u5206\u88c2\uff0c\u4f46\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\u5408\u5e76\u7684\u6807\u8bb0\u503c\u6240\u5728\u7684\u5e8f\u5217\u800c\u975e\u6807\u8bb0\u503c\u6240\u5728\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u4e00\u4e2a\u5e8f\u5217\u7684\u4ee3\u8868\u5c31\u662f\u5b83\u7684\u6839\u8282\u70b9\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8bb0\u5f55\u5b83\uff0c\u8bb0\u5f55\u4e86\u53cd\u800c\u590d\u6742\u5ea6\u66f4\u5927\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\uff0c\u4e00\u76f4\u5f80\u4e0a\u8df3\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6839\u8282\u70b9\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6839\u8282\u70b9\u7684\u7236\u4eb2\u4e3a $0$ \uff0c\u7531\u4e8e\u5e73\u8861\u6811\u7684\u6811\u6df1\u5927\u6982\u662f $\\log(n)$ \u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f88\u4f18\u79c0\u5730\u627e\u5230\u6811\u6839\u5e76\u5408\u5e76\u3002\n\n\u6211\u4eec\u8981\u5206\u88c2\u65f6\u5982\u4f55\u5206\u88c2\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6807\u8bb0\u503c\u4e3a $x$ \u7684\u5143\u7d20\u662f\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff0c\u53ea\u9700\u8981\u4e00\u76f4\u5f80\u4e0a\u8df3\u7236\u4eb2\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u6392\u540d\u5927\u4e8e\u5de6\u5b50\u6811\u7684\u6392\u540d\uff0c\u5148\u52a0\u4e0a\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u5176\u7236\u4eb2\u53f3\u513f\u5b50\uff0c\u5219\u52a0\u4e0a\u7236\u4eb2\u7684\u5de6\u5b50\u6811\u5927\u5c0f\u52a0\u4e00\uff0c\u5426\u5219\u4e0d\u52a0\uff0c\u518d\u8df3\u5230\u7236\u4eb2\uff0c\u76f4\u5230\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\uff01\u8fdb\u884c\u5206\u88c2\u64cd\u4f5c\u65f6\u867d\u7136\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4fdd\u8bc1\u6b63\u786e\uff0c\u4f46\u7236\u4eb2\u5fc5\u987b\u662f\u5728\u5176\u6709\u7236\u4eb2\u7684\u60c5\u51b5\u4e0b\u624d\u4f1apushup\uff0c\u6240\u4ee5\u5206\u88c2\u51fa\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u4e0d\u4f1a\u6e05\u96f6\uff0c\u9700\u8981\u624b\u52a8\u6e05\u96f6\u3002\n\n\u7136\u540e\u8fd9\u9898\u5c31\u6ca1\u4e86\uff0c\u6700\u540e\u63d0\u9192\uff1a\u4e0d\u5f00longlong\u89c1\u7956\u5b97\uff0c\u5f00\u4e86longlong\u8fd4\u56deint\u7167\u6837\u89c1\u7956\u5b97\uff08\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\u3002\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int maxn=2e5+5;\nint n,m,cnt,x,y,z;\nstruct node{\n\tint ls,rs,fa,val,siz,rnd;\n\tLL sum;\n}tree[maxn];\nvoid new_node(int i,int v){\n\ttree[i].siz=1,tree[i].sum=tree[i].val=v,tree[i].rnd=rand();\n}\nvoid pushup(int now){\n\ttree[now].siz=tree[tree[now].ls].siz+tree[tree[now].rs].siz+1;\n\ttree[now].sum=tree[tree[now].ls].sum+tree[tree[now].rs].sum+tree[now].val;\n\ttree[tree[now].ls].fa=tree[tree[now].rs].fa=now;\n}\nvoid split(int now,int k,int &x,int &y){\n\tif(!now){x=y=0;return;}\n\tif(k<=tree[tree[now].ls].siz)y=now,split(tree[now].ls,k,x,tree[now].ls);\n\telse x=now,split(tree[now].rs,k-tree[tree[now].ls].siz-1,tree[now].rs,y);\n\tpushup(now);\n}\nint merge(int u,int v){\n\tif(!u||!v)return u|v;\n\tif(tree[u].rnd<tree[v].rnd){\n\t\ttree[u].rs=merge(tree[u].rs,v);\n\t\tpushup(u);\n\t\treturn u;\n\t}\n\telse{\n\t\ttree[v].ls=merge(u,tree[v].ls);\n\t\tpushup(v);\n\t\treturn v;\n\t}\n}\nint get(int now){\n\twhile(tree[now].fa)now=tree[now].fa;\n\treturn now;\n}\nvoid mymerge(int a,int b){\n\ta=get(a),b=get(b);\n\tif(a!=b)merge(b,a);\n}\nint mykth(int now){\n\tint cnt=tree[tree[now].ls].siz+1;\n\twhile(now){\n\t\tif(tree[tree[now].fa].rs==now)cnt+=(tree[tree[tree[now].fa].ls].siz+1);\n\t\tnow=tree[now].fa;\n\t}\n\treturn cnt;\n}\nvoid mysplit(int a){\n\tint root=get(a);\n\ta=mykth(a);\n\tsplit(root,a-1,x,y);\n\ttree[x].fa=0,tree[y].fa=0;\n}\nLL query(int a,int b){\n\tint tmpx=get(a),tmpy=get(b);\n\tif(tmpx!=tmpy)return -1;\n\tint c=mykth(a),d=mykth(b);\n\tif(c>d)swap(c,d);\n\tsplit(tmpx,d,x,z);\n\tsplit(x,c-1,x,y);\n\tLL tmpz=tree[y].sum;\n\tmerge(merge(x,y),z);\n\treturn tmpz;\n}\nint main(){\n\tsrand((unsigned)time(NULL));\n\tint a,b;\n\tchar opt[5];\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a);\n\t\tnew_node(i,a);\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%s%d\",opt,&a);\n\t\tif(opt[0]=='M'){\n\t\t\tscanf(\"%d\",&b);\n\t\t\tmymerge(a,b);\n\t\t}\n\t\telse if(opt[0]=='D'){\n\t\t\tmysplit(a);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&b);\n\t\t\tprintf(\"%lld\\n\",query(a,b));\n\t\t}\t\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1581684766,
        "uid": 85514,
        "name": "\u4e07\u4e07\u6ca1\u60f3\u5230",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P4847 \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2"
    },
    {
        "content": "\u88f8\u7684\u5e73\u8861\u6811\uff08\u539f\u672c\u60f3\u627elct\u7684\u9898\u505a\u7ed3\u679c\u770b\u5230\u8fd9\u4e2a\u8bc4\u5206\u6709\u8bef+\u5b8c\u5168\u4e0d\u9700\u8981lct\u7684\u9898\u3002\u3002\n\n\u4f46\u662f\u6709\u9898\u89e3\u4e2d\u63d0\u5230splay\u7684\u5e38\u6570\u8c8c\u4f3c\u5199\u70b8\u4e86\uff08\u7ef4\u62a4\u4e86\u4e2adep\uff09\u3002\u3002~~\u6211\u5199splay\u5176\u5b9e\u4e5f\u662f\u56e0\u4e3a\u4e0d\u4f1atreap~~\n\n\u4f46\u5176\u5b9esplay\u5199\u8fd9\u4e2a\u8fd8\u662f\u5f88\u4f18\u79c0\u7684\u5427\uff0c\u4ee3\u7801\u957f\u5ea6\u4e0d\u52302k\uff0c\u52a0\u4e86\u8bfb\u4f18\u540e\u4e0d\u5438\u6c27500ms+\uff0c\u5438\u6c27\u624d\u4e0d\u5230300ms\u3002\u3002\u7a7a\u95f4\u624d5.1m\uff08\u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u8c8c\u4f3c\u6ca1\u770b\u5230\u7a7a\u95f4\u66f4\u5c0f\u7684\u4e86\uff1f\n\n------\n\nsolution:\n\n\u628ax\u7684\u5e8f\u5217\u653e\u5728y\u4e4b\u540e\uff0c\u5148splay x\u518dsplay y\uff0c\u5982\u679c\u6b64\u65f6x\u4e0d\u662f\u6839\uff0c\u663e\u7136y\u548cx\u5728\u4e00\u68f5\u6811\u4e0a\u3002\u7136\u540e\u76f4\u63a5\u627ey\u4e3a\u6839\u7684\u6811\u4e0a\u6700\u53f3\u8fb9\u7684\u8282\u70b9u\uff08\u76f4\u63a5\u7528\u7cfb\u7edf\u6808\u9012\u5f52\u4e00\u4e0b\u5c31\u597d\u4e86\uff09\uff0c\u628au\u548cx\u8fde\u8fb9\u7136\u540e\u9012\u5f52\u56de\u6765\u7684\u65f6\u5019pushup\u4e00\u4e0b\u3002\uff08\u8fd9\u91cc\u8c8c\u4f3c\u7531\u4e8e\u6df1\u5ea6\u4e0d\u6df1\uff0c\u7ecf\u5c1d\u8bd5\u9012\u5f52\u6bd4\u81ea\u5df1\u5199\u6808\u8fd8\u5feb\uff09\n\ncut\u64cd\u4f5c\uff0c\u76f4\u63a5\u628axsplay\u5230\u6839\uff0c\u7136\u540e\u628ax\u548c\u5de6\u513f\u5b50\u7684\u8fde\u8fb9\u5207\u65ad\uff0c\u6700\u540epushup\n\n\u8be2\u95ee\u64cd\u4f5c\uff0c\u5982\u679cx\u548cy\u4e00\u6837\u76f4\u63a5\u8fd4\u56deval[x]\uff08\u5e9f\u8bdd\uff09\uff0c\u5426\u5219\u5148splayx\uff0c\u8bb0\u5f55\u5de6\u5b50\u6811\u7684\u5b50\u6811\u548c\uff0c\u518dsplay y\uff0c\u8bb0\u5f55\u5de6\u5b50\u6811\u7684\u5b50\u6811\u548c\u3002\u540c\u6837\u5982\u679csplay y\u4e4b\u540ex\u672c\u8eab\u8fd8\u662f\u6811\u7684\u6839\uff0c\u663e\u7136\u5b83\u4eec\u4e0d\u518d\u4e00\u4e2a\u6811\u4e0a\uff0c\u4e0d\u8003\u8651\u3002\u5426\u5219\u770b\u770bx\u548cy\u8c01\u5de6\u5b50\u6811\u5c0f\uff0c\u7c7b\u4f3c\u5730\u505a\u4e2a\u524d\u7f00\u548c\u7684\u5dee\u5c31\u597d\u4e86\u3002\n\nCode:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n#define MAXN 200006\nint n , m;\n\nint read() {\n    char ch = ' '; int x = 0;\n    while( ch > '9' || ch < '0' ) ch = getchar();\n    while( ch <= '9' && ch >= '0' ) { x *= 10,x += ch - '0',ch = getchar(); }\n    return x;\n}\n\nint ch[MAXN][2] , fa[MAXN] , val[MAXN];\nll sw[MAXN];\n\ninline void pushup( int x ) {\n    sw[x] = sw[ch[x][0]] + sw[ch[x][1]] + val[x];\n}\ninline void rotate( int u ) {\n    int f = fa[u] , g = fa[f] , w = ch[f][1] == u , k = ch[u][w^1];\n    if( g ) ch[g][ch[g][1]==f] = u; ch[u][w^1] = f , ch[f][w] = k;\n    if( k ) fa[k] = f; fa[f] = u , fa[u] = g;\n    pushup( f ) , pushup( u );\n}\ninline void splay( int u ) {\n    int f , g;\n    while( fa[u] ) {\n        f = fa[u] , g = fa[f];\n        if( g ) rotate( ( (ch[g][1]==f) ^ (ch[f][1]==u) ) ? u : f );\n        rotate( u );\n    }\n}\nvoid update( int x , int y ) {\n    if( ch[x][1] ) update( ch[x][1] , y );\n    else ch[x][1] = y , fa[y] = x;\n    pushup( x );\n}\ninline void pb( int x , int y ) {\n    if( x == y ) return;\n    splay( x ) , splay( y );\n    if( fa[x] ) return;\n    update( y , x );\n}\ninline void cut( int x ) {\n    splay( x );\n    fa[ch[x][0]] = 0 , ch[x][0] = 0;\n    pushup( x );\n}\ninline ll que( int x , int y ) {\n    if( x == y ) return (ll)val[x];\n    ll resx , resy;\n    splay( x ) , resx = sw[ch[x][0]];\n    splay( y ) , resy = sw[ch[y][0]];\n    if( !fa[x] ) return -1;\n    if( resx > resy ) return resx - resy + val[x];\n    else return resy - resx + val[y];\n}\n\nint main() {\n// \tfreopen(\"input\",\"r\",stdin);\n    cin >> n >> m;\n    for( int i = 1 ; i <= n ; ++ i ) val[i] = read();\n    char opt[3]; int x , y;\n    while( m-- ) {\n        scanf(\"%s\",opt);\n        if( opt[0] == 'M' ) {\n            x = read() , y = read();\n            pb( x , y );\n        } else if( opt[0] == 'D' ) {\n            x = read();\n            cut( x );\n        } else if( opt[0] == 'Q' ) {\n            //cout << ch[1][0] << endl;\n            x = read() , y = read();\n            printf(\"%lld\\n\",que( x , y ));\n        } \n    }\n}//qwq\n```\n\n",
        "postTime": 1562212198,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u7ec3\u4e60**\u5e26\u7236\u6307\u9488** $\\text{Splay}$ \u7684\u597d\u9898\n### \u4e3a\u4ec0\u4e48\u8981\u5e26\u7236\u6307\u9488\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5e73\u8861\u6811\u5b9e\u73b0\u4e8c\u53c9\u67e5\u627e\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u6bcf\u79cd\u5e73\u8861\u6811\u90fd\u53ef\u4ee5\u505a\u5230   \n\u53e6\u5916\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u5e73\u8861\u6811\u5b9e\u73b0\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u7684\u5e8f\u5217\u64cd\u4f5c\uff0c  \n\u8fd9\u91ccOI\u4e2d\u51e0\u4e4e\u5168\u90e8\u901a\u8fc7 $\\text{Splay,fhq-treap}$ \u5b9e\u73b0\uff0c  \n\u5c24\u5176\u662f $\\text{fhq-treap}$\uff0c\u5b9e\u73b0\u65b9\u4fbf\uff0c\u4fbf\u4e8e\u53ef\u6301\u4e45\u5316\n\n\u4f46\u662f\uff0c\u5f53\u5e8f\u5217\u64cd\u4f5c\u662f\u57fa\u4e8e\u8282\u70b9\u800c\u4e0d\u662f\u5e8f\u53f7\u7684\u65f6\u5019\uff08\u5982LCT\uff09\uff0c  \n\u5c31\u5fc5\u987b\u5e26\u4e0a\u7236\u6307\u9488\uff0c\u800c $\\text{Splay}$ \u7684\u5e26\u7236\u6307\u9488\u5b9e\u73b0\u5219\u66f4\u52a0\u5bb9\u6613\n\n### \u5e26\u7236\u6307\u9488 $\\text{Splay}$ \u7684\u5b9e\u73b0\n\u5e26\u4e0a\u7236\u6307\u9488\u540e\uff0c$\\text{Splay}$ \u7684\u5e38\u6570\u548c\u7801\u91cf\u5c06\u7ffb\u4e00\u500d\uff0c\u56e0\u6b64\u6253\u7684\u65f6\u5019\u8981\u975e\u5e38\u7684\u8c28\u614e  \n\u9996\u5148\u5efa\u597d\u6240\u9700\u8981\u7684\u7ed3\u6784\u4f53\n```cpp\ntypedef long long ll;\ntypedef unsigned int word;\nstruct splay{\n\tll sum;\n\tword value,size;\n\tsplay *l,*r,*fa;\n\tinline void pushup(){\n\t\tsize=1,sum=value;\n\t\tif(l) size+=l->size,sum+=l->sum;\n\t\tif(r) size+=r->size,sum+=r->sum;\n\t}\\\\\u901a\u8fc7\u5b50\u8282\u70b9\u66f4\u65b0\u7236\u8282\u70b9\u6570\u636e\n}p[200010];\n```\n\u7136\u540e\u662f\u5de6\u65cb\u548c\u53f3\u65cb\uff0c\u6ce8\u610f\u4fee\u6539\u8282\u70b9\u7684\u7236\u6307\u9488(\u5305\u62ec\u6839\u8282\u70b9)\n```cpp\n#define lcycle(root) do{\t\t\t\\\n\tregister splay* oldroot=(root);\t\\\n\tregister splay* oldr=(root)->r;\t\\\n\tregister splay* oldrl=oldr->l;\t\\\n\toldr->fa=oldroot->fa,(root)=oldr;\t\t\\\n\t(root)->l=oldroot,oldroot->fa=(root);\t\\\n\tif((root)->l->r=oldrl) oldrl->fa=(root)->l;\t\\\n\t(root)->l->pushup(),(root)->pushup();\t\\\n}while(0)\n#define rcycle(root) do{\t\t\t\\\n\tregister splay* oldroot=(root);\t\\\n\tregister splay* oldl=(root)->l;\t\\\n\tregister splay* oldlr=oldl->r;\t\\\n\toldl->fa=oldroot->fa,(root)=oldl;\t\\\n\t(root)->r=oldroot,oldroot->fa=(root);\t\\\n\tif((root)->r->l=oldlr) oldlr->fa=(root)->r;\t\\\n\t(root)->r->pushup(),(root)->pushup();\t\\\n}while(0)\n//\u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684\u662f\u6839\u8282\u70b9(\u4e0d\u662f\u88ab\u65cb\u8f6c\u7684\u8282\u70b9)\uff0c\u800c\u4e14\u662f\u4f20\u5740\u8c03\u7528\n```\n\u7136\u540e\u5c31\u662f\u559c\u95fb\u4e50\u89c1\u7684\u4f38\u5c55\u64cd\u4f5c\u4e86  \n\u8fd9\u91cc\u6700\u5927\u7684\u96be\u70b9\u662f\u65cb\u8f6c\u65f6**\u5fc5\u987b\u4f20\u5165\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488**\uff0c\u624d\u53ef\u4ee5\u4fdd\u8bc1\u540c\u6b65\u4fee\u6539  \n```cpp\n#define f(a) ((a)->fa)\n#define pos(a) (f(a)->l==(a)? f(a)->l:f(a)->r)\n//\u7531\u539f\u6307\u9488\u83b7\u53d6\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n#define lsp()\t\\\n\tif(rff->l==f(root)){\t\t\\\n\t\tif(f(root)->l==root) rcycle(rff);\t\\\n\t\telse lcycle(rff->l);\t\\\n\t\trcycle(rff);\t\\\n\t}\t\\\n\telse{\t\\\n\t\tif(f(root)->r==root) lcycle(rff);\t\\\n\t\telse rcycle(rff->r);\t\\\n\t\tlcycle(rff);\t\\\n\t}\n//\u5bf9\u4e8e\u4e09\u4e2a\u8282\u70b9\u7684\u94fe\u7684\u4f38\u5c55\uff0c\u6ce8\u610f\u65cb\u8f6c\u65f6\u4f20\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n//lsp=link of splay(\u9003\ninline void Splay(splay *root){\n\twhile(f(root))\n\t\tif(f(f(root))){\n\t\t\tif(f(f(f(root)))){\n\t\t\t\tregister splay*& rff=pos(f(f(root)));\n\t\t\t\tlsp();\n\t\t\t}//\u5982\u679c\u65cb\u8f6c\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5c31\u4e00\u5b9a\u8981\u6539\u6210\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n\t\t\telse{\n\t\t\t\tregister splay* rff=f(f(root));\n\t\t\t\tlsp();\n\t\t\t}//\u5426\u5219\u7684\u8bdd\u76f4\u63a5\u4f20\u6307\u9488\u5c31\u662f\u4e86\n\t\t}else if(root->fa->l==root){\n\t\t\troot=root->fa;rcycle(root);\n\t\t}else{root=root->fa;lcycle(root);}\n     //\u5bf9\u4e8e\u6700\u540e\u4e24\u4e2a\u8282\u70b9\u7684\u94fe\uff0c\u7279\u5224\n}\n```\n\u6700\u7ec8\u7684\u64cd\u4f5c\u5c31\u5f88\u5bb9\u6613\u4e86\n\n- `M x,y` \u4f38\u5c55 $p_x,p_y$ \u5230\u6839\uff0c$p_y$ \u5de6\u65cb\u5230\u6700\u53f3\u7aef\uff0c\u63a5\u4e0a $p_x$  \n\t\uff08\u5fc5\u987b\u662f\u5de6\u65cb\uff0c\u56e0\u4e3a\u6709 `pushup()`)\n- `D x` \u4f38\u5c55 $p_x$ \u5230\u6839\uff0c\u4e22\u6389\u5de6\u513f\u5b50\uff0c`pushup()`\n- `Q x y` \u9996\u5148\u5224\u5b9a\u5e76\u8c03\u6574\u5148\u540e\u987a\u5e8f\uff0c\u5728\u4e22\u6389\u5de6\u53f3\u4e0d\u9700\u8981\u7684\u90e8\u5206\uff0c\u8f93\u51fa\u7b54\u6848\u540e\u518d\u63a5\u56de\u6765  \n\uff08\u6ce8\u610f\u63a5\u56de\u6765\u65f6\u8003\u8651\u591a\u4f59\u90e8\u5206\u4e3a\u7a7a\u7684\u60c5\u51b5\uff09 \n\n\n### \u6700\u7ec8\u4ee3\u7801 \n\u4e0d\u5f00 O2 502ms\uff0c8.68MB  \n\u5f00 O2 288ms\uff0c8.47MB \u662f\u76ee\u524d\u6700\u5feb\u7684\n\n```cpp\n#include<string.h>\n#include<stdio.h>\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int word;\nstruct READ{\n\tchar c;\n\tinline READ(){c=getchar();}\n\ttemplate<typename type>\n\tinline READ& operator >>(type & num){\n\t\twhile('0'>c||c>'9') c=getchar();\n\t\tnum=0;\n\t\twhile('0'<=c&&c<='9'){\n\t\t\tnum=(num<<1)+(num<<3)+(c-'0');\n\t\t\tc=getchar();\n\t\t}\n\t\treturn *this;\n\t}\n};//\u5feb\u8bfb(\u540ccin) \nclass WRITE{\n\tprivate:\n\t\tchar out[1<<20],*top;\n\tpublic:\n\t\tinline WRITE(){top=out;}\n\t\tinline ~WRITE(){\n\t\t\tif(top!=out) fwrite(out,1,top-out,stdout);}\n\t\tinline WRITE& operator <<(char c){\n\t\t\t*top=c;\n\t\t\tif(++top==out+(1<<20))\n\t\t\t\tfwrite(top=out,1,1<<20,stdout);\n\t\t\treturn *this;\n\t\t}\n\t\tinline WRITE& operator <<(ull num){\n\t\t\tif(num==0) return *this;\n\t\t\treturn *this<<num/10<<(char)(num%10+'0');\n\t\t}\n\t\ttemplate<typename type>\n\t\tinline WRITE& operator <<(type num){\n\t\t\tif(num==0) return *this<<'0';\n\t\t\tif(num>0) return *this<<(ull)(num);\n\t\t\treturn *this<<'-'<<(ull)(-num);\n\t\t}\n}cout;//\u5feb\u5199(\u540ccout) \nstruct splay{\n\tll sum;\n\tword value,size;\n\tsplay *l,*r,*fa;\n\tinline void pushup(){\n\t\tsize=1,sum=value;\n\t\tif(l) size+=l->size,sum+=l->sum;\n\t\tif(r) size+=r->size,sum+=r->sum;\n\t}\n}p[200010];\n#define lcycle(root) do{\t\\\n\tregister splay* oldroot=(root);\t\\\n\tregister splay* oldr=(root)->r;\t\\\n\tregister splay* oldrl=oldr->l;\t\\\n\toldr->fa=oldroot->fa,(root)=oldr;\t\t\\\n\t(root)->l=oldroot,oldroot->fa=(root);\t\\\n\tif((root)->l->r=oldrl) oldrl->fa=(root)->l;\t\\\n\t(root)->l->pushup(),(root)->pushup();\t\\\n}while(0)\n#define rcycle(root) do{\t\\\n\tregister splay* oldroot=(root);\t\\\n\tregister splay* oldl=(root)->l;\t\\\n\tregister splay* oldlr=oldl->r;\t\\\n\toldl->fa=oldroot->fa,(root)=oldl;\t\\\n\t(root)->r=oldroot,oldroot->fa=(root);\t\\\n\tif((root)->r->l=oldlr) oldlr->fa=(root)->r;\t\\\n\t(root)->r->pushup(),(root)->pushup();\t\\\n}while(0)\n//\u65cb\u8f6c\u64cd\u4f5c \n#define f(a) ((a)->fa)\n#define pos(a) (f(a)->l==(a)? f(a)->l:f(a)->r)\n#define lsp()\t\\\n\tif(rff->l==f(root)){\t\t\\\n\t\tif(f(root)->l==root) rcycle(rff);\t\\\n\t\telse lcycle(rff->l);\t\\\n\t\trcycle(rff);\t\\\n\t}\t\\\n\telse{\t\\\n\t\tif(f(root)->r==root) lcycle(rff);\t\\\n\t\telse rcycle(rff->r);\t\\\n\t\tlcycle(rff);\t\\\n\t}\ninline void Splay(splay *root){\n\twhile(f(root))\n\t\tif(f(f(root))){\n\t\t\tif(f(f(f(root)))){\n\t\t\t\tregister splay*& rff=pos(f(f(root)));\n\t\t\t\tlsp();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tregister splay* rff=f(f(root));\n\t\t\t\tlsp();\n\t\t\t}\n\t\t}else if(root->fa->l==root){\n\t\t\troot=root->fa;rcycle(root);\n\t\t}else{root=root->fa;lcycle(root);}\n}\n//\u4f38\u5c55\u64cd\u4f5c \ninline void merge(splay *rootl,splay* rootr){\n\twhile(rootl->r) lcycle(rootl);\n\trootl->r=rootr,rootr->fa=rootl,rootl->pushup();\n}\n//\u5408\u5e76\u64cd\u4f5c \nint main(){\n\tregister READ cin;\n\tword n,m;cin>>n>>m;\n\tfor(register int i=1;i<=n;i++){\n\t\tcin>>p[i].value;\n\t\tp[i].sum=p[i].value,p[i].size=1;\n\t}\n\t\n\tfor(register word x,y;m;m--){\n\t\twhile('A'>cin.c||cin.c>'Z') cin.c=getchar();\n\t\tif(cin.c=='M'){\n\t\t\tcin>>x>>y;\n\t\t\tif(x==y) continue;\n\t\t\tSplay(p+x),Splay(p+y);\n\t\t\tif(p[x].fa) continue;\n\t\t\tmerge(p+y,p+x);\n\t\t}\n\t\telse if(cin.c=='D'){\n\t\t\tcin>>x,Splay(p+x);\n\t\t\tif(p[x].l) p[x].l->fa=0,p[x].l=0,p[x].pushup();\n\t\t}\n\t\telse if(cin.c=='Q'){\n\t\t\tcin>>x>>y;\n\t\t\tif(x==y) cout<<p[x].value<<'\\n';\n\t\t\telse{\n\t\t\t\tSplay(p+x);\n\t\t\t\tregister word xid=p[x].l? p[x].l->size:0;\n\t\t\t\tSplay(p+y);\n\t\t\t\tif(p[x].fa==0) cout<<'-'<<'1'<<'\\n';\n\t\t\t\telse{\n\t\t\t\t\tregister word yid=p[y].l? p[y].l->size:0;\n\t\t\t\t\tif(xid>yid) n=x,x=y,y=n,Splay(p+y);\n\t\t\t\t\tregister splay* right=p[y].r;\n\t\t\t\t\tif(right) right->fa=0;\n\t\t\t\t\tp[y].r=0,p[y].pushup(),Splay(p+x);\n\t\t\t\t\tcout<<(p[x].l? p[x].sum-p[x].l->sum:p[x].sum)<<'\\n';\n\t\t\t\t\tSplay(p+y);\n\t\t\t\t\tif(right) right->fa=p+y;\n\t\t\t\t\tp[y].r=right,p[y].pushup();\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1602655482,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u5408\u5e76\u548c\u5206\u88c2\uff0c\u53ef\u4ee5\u8054\u60f3\u5230\u662f\u4e00\u4e2a$fhq\\ treap$\u7684\u9898\uff0c\u5f53\u7136\u7528$splay$\u4e5f\u662f\u53ef\u4ee5\u505a\u7684 ~~\u800c\u4e14\u662f\u4e0d\u662fsplay\u66f4\u597d\u5199~~\n\n\u5148\u8bf4\u5e38\u6570\u5927\u7684$splay$\n\n\u663e\u7136\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u5728\u5b50\u6811\u7684\u6839\uff0c\u5e76\u67e5\u96c6\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff0c\u6240\u4ee5\u76f4\u63a5\u4e00\u76f4\u65e0\u8111\u5f80\u4e0a\u8df3\u5c31\u597d\u4e86\uff0c\u53cd\u6b63\u590d\u6742\u5ea6\u8fd8\u662f\u4e00\u4e2a$\\log$\n\n`M x y`\u56e0\u4e3a\u5408\u5e76\u540e\u6392\u540d$x$\u4e00\u5b9a\u90fd\u6bd4$y$\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u5230$y$\u91cc\u9762\u6392\u540d\u6700\u5927\u7684\uff0c\u7136\u540e\u628a$x$\u6574\u4f53\u63a5\u8fc7\u6765\uff0c\u7136\u540e\u518d\u8f6c\u4e0a\u53bb\u5c31\u597d\n\n```cpp\nvoid link(int x,int y){// x->y\n    int u=y;\n    while(son[u][1])u=son[u][1];\n    son[u][1]=x,fa[x]=u;\n    splay(x,0);\n}\n```\n\n`D x`\u628a$x$\u8f6c\u5230\u6839\uff0c\u7136\u540e\u65ad\u6389\u5de6\u513f\u5b50\u5c31\u53ef\u4ee5\n\n```cpp\nvoid cut(int x){\n    splay(x,0);\n    son[x][0]=fa[son[x][0]]=0;\n    update(x);\n}\n```\n\n`Q x y`\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u6b63\u5e38\u7684\u533a\u95f4\u67e5\u8be2\u3002\u628a$x$\u8f6c\u5230\u6839\uff0c$y$\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u7ef4\u62a4\u4e00\u4e2a$sum$\u5c31\u53ef\u4ee5\u3002\u4f46\u662f\u56e0\u4e3a\u8fd9\u9898$x$\uff0c$y$\u8c01\u5728\u524d\u8c01\u5728\u540e\u4e0d\u77e5\u9053\uff0c\u6240\u4ee5\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff08$x=y$\u9700\u8981\u7279\u5224\uff09\n\n```cpp\nll query(int x,int y){//[x,y]\n    splay(x,0),splay(y,x);\n    return sum[son[y][0]]+a[x]+a[y];\n}\n\nin main\n    if(s[0]=='Q'){\n        read(y);\n        if(getfa(x)!=getfa(y)){puts(\"-1\");continue;}\n        int rkx=rnk(x),rky=rnk(y);\n        if(rkx==rky)printf(\"%d\\n\",a[x]);\n        else if(rkx<rky)printf(\"%lld\\n\",query(x,y));\n        else printf(\"%lld\\n\",query(y,x));\n    }\n```\n\n\u6c42$rnk$\u4ec0\u4e48\u7684\u90fd\u5f88\u7b80\u5355\uff0c\u4e0d\u8bf4\u4e86\n\n\u6211\u7684\u4ee3\u7801\u8dd1\u4e86$1.30s$\uff08\u65e0\u6c27\uff09\uff0c\u6210\u529f\u7684\u88ab\u5404\u79cd\u540a\u6253\u3002\n\n****\n\n\u63a5\u4e0b\u6765\u8bf4\u4e00\u4e0b$fhq\\ treap$\u7684\u505a\u6cd5\n\n\u56e0\u4e3a\u9700\u8981\u6c42\u6839\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6bcf\u4e2a\u70b9\u7236\u4eb2\u8282\u70b9\n\n`M x y`\u627e\u5230$x,y$\u5404\u81ea\u7684\u6839\uff0c\u7136\u540e$merge(y,x)$\u8981\u628a$x$\u63a5\u5728$y$\u540e\u9762\uff01\uff01\uff01\n\n`D x`\u627e\u5230$x$\u7684\u4f4d\u7f6e\uff0c\u7136\u540e**\u6309\u7167\u6392\u540d**$split(root(x),a,b,rnk(x)-1)$\n\n`Q x y`\u5148\u628a\u6392\u540d$[1,rky]$\u7684\u90e8\u5206\u62ce\u51fa\u6765\uff0c\u7136\u540e\u5728\u628a$[rkx,rky]$\u7684\u90e8\u5206\u62ce\u51fa\u6765\uff0c\u6c42\u51fa\u7b54\u6848\u518d\u5408\u5e76\u56de\u53bb\u5c31\u597d\n\n\u4f46\u662f\u8fd9\u4e2a\u7236\u4eb2\u8282\u70b9\u975e\u5e38\u7684\u6076\u5fc3\uff0c\u600e\u4e48\u66f4\u65b0\u5462\uff1f\u8fd9\u91cc\u6211\u7528\u7684\u662f\u4e00\u79cd\u65e0\u8111\u505a\u6cd5\uff0c\u6539\u4e00\u4e0b$update$\n\n```cpp\nvoid update(int x){\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n    sum[x]=sum[son[x][0]]+sum[son[x][1]]+val[x];\n    if(son[x][0])fa[son[x][0]]=x;\n    if(son[x][1])fa[son[x][1]]=x;\n    if(son[fa[x]][0]!=x&&son[fa[x]][1]!=x)fa[x]=0;\n}\n```\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728$merge,split$\u7684\u65f6\u5019\u66f4\u65b0\u4e86\uff0c\u8fd8\u4e0d\u7528\u4e71\u4e03\u516b\u7cdf\u7684\u5224\u65ad\n\n\u7136\u540e\u5c31\u662f\u4ee3\u7801\u4e86\uff0c\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u5f00$O2$\u662f\u8dd1\u4e86$700+ms$\uff0c\u6210\u529f\u540a\u6253$splay$/kk\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=2e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m;\nint fa[N],son[N][2],siz[N],val[N],treap[N];\nll sum[N];\nint rt,a,b,c;\n\nvoid update(int x){\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n    sum[x]=sum[son[x][0]]+sum[son[x][1]]+val[x];\n    if(son[x][0])fa[son[x][0]]=x;\n    if(son[x][1])fa[son[x][1]]=x;\n    if(son[fa[x]][0]!=x&&son[fa[x]][1]!=x)fa[x]=0;\n}\n\nint merge(int u,int v){\n    if(!u||!v)return u|v;\n    int rt;\n    if(treap[u]<treap[v])son[rt=u][1]=merge(son[u][1],v);\n    else son[rt=v][0]=merge(u,son[v][0]);\n    return update(rt),rt;\n}\n\nvoid split(int o,int &u,int &v,int k){\n    if(!o){u=v=0;return;}\n    int rank=siz[son[o][0]]+1;\n    if(rank<=k)split(son[u=o][1],son[o][1],v,k-rank);\n    else split(son[v=o][0],u,son[o][0],k);\n    update(o);\n}\n\nint getfa(int x){\n    while(fa[x])x=fa[x];\n    return x;\n}\n\nint rnk(int x){\n    int res=siz[son[x][0]]+1;\n    while(fa[x]){\n        if(son[fa[x]][1]==x)res+=siz[son[fa[x]][0]]+1;\n        x=fa[x];\n    }\n    return res;\n}\n\nint main()\n{\n    srand(19260817);//\u4e00\u822c\u8fd9\u91cc\u53ef\u4ee5\u8bbe\u6210\u81ea\u5df1\u7684\u751f\u65e5(\u96fe\n    read(n),read(m);\n    Rep(i,1,n){\n        read(val[i]);\n        sum[i]=val[i];\n        fa[i]=son[i][0]=son[i][1]=0;\n        siz[i]=1;\n        treap[i]=rand();\n    }\n    Rep(i,1,m){\n        char opt[10];\n        int x,y;\n        scanf(\"%s\",opt);\n        read(x);\n        if(opt[0]=='M'){\n            read(y);\n            x=getfa(x),y=getfa(y);\n            if(x!=y)merge(y,x);\n        }\n        if(opt[0]=='D'){\n            int fx=getfa(x),rank=rnk(x);\n            split(fx,a,b,rank-1);\n        }   \n        if(opt[0]=='Q'){\n            read(y);\n            int fx=getfa(x),fy=getfa(y);\n            if(fx!=fy){puts(\"-1\");continue;}\n            int rx=rnk(x),ry=rnk(y);\n            if(rx>ry)swap(rx,ry);\n            split(fx,a,c,ry);\n            split(a,a,b,rx-1);\n            printf(\"%lld\\n\",sum[b]);\n            merge(merge(a,b),c);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1588939706,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u6ca1\u6709LCT\u7684\u9898\u89e3QAQ\uff01\u7b80\u5355\u5730\u63cf\u8ff0\u4e00\u4e0bLCT\u7684\u505a\u6cd5\n\norz waaadreamer\uff01\n\n\u8fd9\u9053\u9898\u7684\u51fa\u9898\u4eba\u975e\u5e38\u7684\u795e\u4ed9\uff0c\u8bf4\u8fd9\u9053\u9898\u662f\u7b7e\u5230\u9898\uff0c\u5e76\u4e14\u601d\u7ef4\u96be\u5ea6\u5f88\u4f4e\uff0c\u5b9e\u73b0\u96be\u5ea6\u8f83\u9ad8qwq\n\n\u7136\u800c\u6211\u5374\u600e\u4e48\u4e5f\u60f3\u4e0d\u5230LCT\u7684\u505a\u6cd5\uff0c\u53ea\u4f1a\u5e73\u8861\u6811\u7684\u505a\u6cd5\uff01\n\n\u4f46\u662f~~\u4e2a\u4eba\u611f\u89c9\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u7b80\u5355~~\n\n\u8fd9\u4e2a\u51fa\u9898\u4ebayy\u51fa\u6765\u4e86\u4e00\u79cd\u4e0d\u6362\u6839\u7684LCT\uff0c\u590d\u6742\u5ea6~~\u597d\u50cf~~\u5f88\u5bf9\uff01\n\n\u505a\u6cd5\u5177\u4f53\u662f\u7ef4\u62a4\u7528LCT\u7ef4\u62a4\u4e00\u6bb5\u5e8f\u5217\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u4ee5\u4fbfLink\u64cd\u4f5c\uff01\n\n\u53ef\u662f\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\n\n\u65e2\u7136\u662f\u4e0d\u6362\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u5173\u952e\u5b57\uff08\u628a\u8fd9\u4e2a\u5173\u952e\u5b57\u5f53\u4e3a\u6df1\u5ea6\uff09\u63d2\u5165LCT\uff0c\u7136\u540eLCT\u6ee1\u8db3\u6bcf\u4e2asplay\u91cc\u9762\u7684root\u8282\u70b9\uff08\u5373\u5173\u952e\u5b57\u6700\u5c0f\u7684\uff0c\u5c31\u662ffindroot\u91cc\u9762\u627e\u7684root\uff09\u7ef4\u62a4\u7684\u5c31\u662f\u5de6\u7aef\u70b9\uff01\n\n\u53f3\u7aef\u70b9\u7684\u7ef4\u62a4\u65b9\u5f0f\u5c31\u662f\u5728\u6839\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2atail\u4ee3\u8868\u8fd9\u6574\u4e2asplay\u7684\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u6211\u4eec\u67e5\u8be2\u53f3\u7aef\u70b9\u7684\u65f6\u5019\u53ea\u9700\u8981\u67e5\u8be2\u6839\u8282\u70b9root\u7684tail\u5c31\u884c\uff01\n\uff08\u4e4b\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2aLCT\u8ddf\u666e\u901a\u7684LCT\u4e0d\u540c\uff0cta\u4e0d\u6362\u6839\uff09\n\n\u6700\u540e\uff0c\u6211\u4eec\u6765\u8bb2\u8bb2\u8fd9\u4e2a\u4e0d\u6362\u6839\u7684LCT\u7684Link\uff0cCut\uff0cQuery\u51fd\u6570\uff01\n\nLink:\n```cpp\ninline void Link(int x, int y) {\n\tx = findroot(x); y = findroot(y);\n\tif (x == y) return;\n\tsplay(x); fa[x] = tail[y]; tail[y] = tail[x];\n}\n```\n\u597d\u50cf\u548c\u666e\u901a\u7684LCT\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u4e0dmakeroot\uff0c\u6211\u4eec\u76f4\u63a5\u5c06x\u5411y\u7684tail\u8282\u70b9\uff0c\u5c31\u662fy\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u8fde\u4e00\u6761\u865a\u8fb9\uff08\u56e0\u4e3a\u865a\u8fb9\u662f\u6ee1\u8db3x\u7684val\u5927\u4e8etail[y]\u7684\uff09\n\n\u56e0\u6b64\u6211\u4eec\u8fd9\u4e48\u8fde\u63a5\u80af\u5b9a\u662f\u7b26\u5408splay\u4e2d\u5173\u952e\u5b57\u7684\u987a\u5e8f\u7684\uff0c\u5e76\u4e14\u8d77\u5230\u8fde\u63a5\u6548\u679c\uff01\n\n\u7136\u540e\u6211\u4eec\u66f4\u65b0 tail[y] = tail[x] \u5373\u53ef\uff01\n\nCut\uff1a\n```cpp\ninline void Cut(int x) {\n\tint r = findroot(x);\n\tif (r == x) return;\n\tint tmp = ch[x][0];\n\twhile (ch[tmp][1]) tmp = ch[tmp][1];\n\ttail[x] = tail[r]; tail[r] = tmp;\n\tfa[ch[x][0]] = 0; ch[x][0] = 0; \n}\n```\nC\u6211\u4eec\u5148\u5224\u65ad\u8fd9\u4e2a\u70b9\u5728\u5e8f\u5217\u91cc\u672c\u6765\u5c31\u662f\u7b2c\u4e00\u4e2a\uff0c\u90a3\u4e48\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u65e0\u6548\uff01\n\n\u7136\u540e\u6211\u4eec\u627e\u5230x\u7684\u5728\u8fd9\u4e2asplay\u4e2d\u7684\u524d\u9a71\uff01\n\n\u8fd9\u4e2a\u524d\u9a71\u5c31\u662fx\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u7684\u524d\u4e00\u4e2a\u6570\uff01\n\n\u8fd9\u6837\u5e8f\u5217\u5df2\u7ecf\u88ab\u5206\u4e3a\u4e24\u6bb5\uff01\n\n\u524d\u9762\u90a3\u6bb5\uff1a\n\nroot\u4e3ar\uff0ctail[r] = tmp\uff08tmp\u4e3a\u524d\u9a71\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u90a3\u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u6570\uff09;\n\n\n\u540e\u9762\u90a3\u6bb5\uff1a\n\nroot\u4e3ax\uff0ctail[x] = tail[r]\uff08\u6700\u540e\u4e00\u4e2a\u6570\u4e3a\u539f\u6765\u7684tail\uff09;\n\nQuery\uff1a\n```cpp\ninline LL Query(int x, int y) {\n\tint r1 = findroot(x); LL p = Sum[x];\n\tint r2 = findroot(y);\n\tif (r1 != r2) return -1;\n\tp -= Sum[y];\n\tif (p < 0) swap(x, y);\n\treturn abs(p) + v[y];\n}\n```\n\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u524d\u7f00\u548c\u6765\u6c42\u548c\n\n\u6211\u4eec\u5bf9\u4e8ex\uff0cy\u5206\u522b\u6c42\u51fa\u8fd9\u6bb5\u5e8f\u5217\u7684first\u5230\u5f53\u524d\u8fd9\u4e2a\u6570\u7684\u548c\n\n\uff08\u8003\u8651findroot\u5c31\u662faccess\u518dsplay\uff0c\u4e8e\u662f\u5f53\u524d\u7684sum[x]\u4fdd\u7559\u7684\u5c31\u662f\u6574\u4e2asplay\u91cc\u9762\u7684\u548c\uff0c\u5373\u4e3a\u8fd9\u6bb5\u5e8f\u5217\u7684first\u5230x\u8fd9\u4e2a\u6570\u7684\u548c\uff09\n\n\u7136\u540e\u4f5c\u5dee\u51cf\u4e00\u4e0b\uff0c\u5728\u52a0\u4e00\u4e2av[x]\u6216v[y]\u5373\u53ef\uff0c\u8fd9\u70b9\u5c0f\u7ec6\u8282\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\uff01\n\n\u603b\u4e4b\uff1a\u611f\u89c9\u4e0d\u6362\u6839\u7684LCT\u6bd4\u666e\u901a\u7684LCT\u77ed\u597d\u591a\u5440\uff0c\u4f46\u662f\u5904\u7406\u7684\u95ee\u9898\u4f1a\u6709\u5c40\u9650\u6027\uff01\n\n\u4ee3\u7801\uff1a\n\n```cpp\nnamespace LinkCutTree {\n\t\n\tint ch[MAXN][2], fa[MAXN], stk[MAXN], rev[MAXN], tail[MAXN]; LL Sum[MAXN], v[MAXN];\n\t\n\tinline bool get(int x) { return ch[fa[x]][0] == x || ch[fa[x]][1] == x; }\n\tinline bool pos(int x) { return ch[fa[x]][1] == x; }\n\tinline void update(int x) { Sum[x] = Sum[ch[x][0]] + Sum[ch[x][1]] + v[x]; }\n\tinline void rotate(int x) {\n\t\tint y = fa[x], z = fa[y], k = pos(x), tmp = ch[x][!k];\n\t\tif (get(y)) ch[z][pos(y)] = x;\n\t\tch[x][!k] = y; ch[y][k] = tmp;\n\t\tif (tmp) fa[tmp] = y;\n\t\tfa[y] = x; fa[x] = z; update(y); update(x); update(z);\n\t}\n\tinline void splay(int x) {\n\t\twhile (get(x)) {\n\t\t\tint y = fa[x], z = fa[y];\n\t\t\tif (get(y)) rotate(pos(x) != pos(y) ? x : y);\n\t\t\trotate(x);\n\t\t}\n\t\tupdate(x);\n\t}\n\t\n\tinline void access(int x) {\n\t\tfor (int y = 0; x; y = x, x = fa[x]) {\n\t\t\tsplay(x); ch[x][1] = y; fa[y] = x; update(x);\n\t\t}\n\t}\n\tinline int findroot(int x) {\n\t\taccess(x); splay(x);\n\t\twhile (ch[x][0]) x = ch[x][0];\n\t\treturn x;\n\t}\n\tinline void Link(int x, int y) {\n\t\tx = findroot(x); y = findroot(y);\n\t\tif (x == y) return;\n\t\tsplay(x); fa[x] = tail[y]; tail[y] = tail[x];\n\t}\n\tinline void Cut(int x) {\n\t\tint r = findroot(x);\n\t\tif (r == x) return;\n\t\tint tmp = ch[x][0];\n\t\twhile (ch[tmp][1]) tmp = ch[tmp][1];\n\t\ttail[x] = tail[r]; tail[r] = tmp;\n\t\tfa[ch[x][0]] = 0; ch[x][0] = 0; \n\t}\n\tinline LL Query(int x, int y) {\n\t\tint r1 = findroot(x); LL p = Sum[x];\n\t\tint r2 = findroot(y);\n\t\tif (r1 != r2) return -1;\n\t\tp -= Sum[y];\n\t\tif (p < 0) swap(x, y);\n\t\treturn abs(p) + v[y];\n\t}\n\t\n}\nusing namespace LinkCutTree;\n```\n\n\n",
        "postTime": 1577945362,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u6216\u8bb8\u53ef\u80fd\u5927\u6982\u8fd8\u7b97\u662f $LCT...$ $(?$ \n\n\u6ce8\u610f\u5230\u6b64\u9898\u5e8f\u5217\u662f\u6709\u5e8f\u7684 \u27a1 \u6240\u4ee5\u4e0d\u80fd\u6362\u8ddf\n\n$Link(X,Y)$ \u53ea\u6d89\u53ca\u5230 $X$ \u6240\u5728\u94fe\u7684\u94fe\u9996\u8282\u70b9\u548c $Y$ \u6240\u5728\u94fe\u7684\u94fe\u5c3e\u8282\u70b9\uff0c\u5bfb\u627e\u94fe\u9996\u94fe\u5c3e\u53ea\u9700\u8981 $Splay$ \u540e\u5f80\u4e00\u7aef\u8d70\u5c31\u884c\u4e86 $(LCT$ \u662f\u4ee5\u7ed3\u70b9\u6df1\u5ea6\u6765\u7ef4\u62a4\u5e73\u8861\u6811\u7684$)$\uff0c\n\u5728$X.F$ \u4e0e $Y$ \u63a5\u4e0a\u4e4b\u540e \u8fdb\u884c\u4e00\u6b21 $Access$ \u64cd\u4f5c\uff0c\u5bf9\u6574\u6761\u94fe\u7684\u4fe1\u606f\u66f4\u65b0\n\n$Cut$ \u76f4\u63a5\u65ad\u5f00\n\n$Que$ \u4e2d\u7528 $(X$\u94fe\u9996 $=$ $Y$\u94fe\u9996$)$ $?$ \u6765\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 $X$ \u4e0e $Y$ \u5728\u94fe\u4e0a$ $ $($\u5373$Splay$\u4e0a$)$ $ $\u7684\u4f4d\u7f6e\u90a3\u4e2a\u66f4\u9760\u524d\uff0c\u6240\u4ee5\u7b54\u6848\u51fa\u73b0\u8d1f\u6570\u7684\u65f6\u5019\u5c31\u662f\u53cd\u8fc7\u6765\u4e86\uff0c\u7b54\u6848\u7b49\u4e8e $0$ \u7684\u65f6\u5019\u4e5f\u4e00\u6837\uff0c\u6b64\u65f6\u662f $X$ \u4e0e $Y$ \u76f8\u90bb\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nconstexpr auto Inf = 0x3F3F3F3F;\ntypedef long long LL;\nusing namespace std;\n\nnamespace IO {\n    inline LL read() {\n        LL o = 0, f = 1; char c = getchar();\n        while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n        while (c > '/' && c < ':') { o = o * 10 + c - '0'; c = getchar(); }\n        return o * f;\n    }\n    inline char recd() {\n        char o; while ((o = getchar()) != 'M' && o != 'D' && o != 'Q'); return o;\n    }\n}\nusing namespace IO;\n\nconst int SIZE = 1E6 + 7;\n\nstruct Node {\n    int son[2], Fa; LL w, Sum;\n} Node[SIZE]; int N, M;\n\ninline int which(int now) {\n    return now == Node[Node[now].Fa].son[1];\n}\n\ninline void pushup(int now) {\n    Node[now].Sum = Node[Node[now].son[0]].Sum + Node[Node[now].son[1]].Sum + Node[now].w;\n}\n\ninline int Isroot(int now) {\n    return now != Node[Node[now].Fa].son[0] && now != Node[Node[now].Fa].son[1];\n}\n\nvoid Rot(int now) {\n    int F = Node[now].Fa, FF = Node[F].Fa, w = which(now);\n    Node[F].son[w] = Node[now].son[!w]; if (Node[now].son[!w]) Node[Node[now].son[!w]].Fa = F;\n    Node[now].Fa = FF; if (!Isroot(F)) Node[FF].son[which(F)] = now;\n    Node[now].son[!w] = F, Node[F].Fa = now; pushup(F), pushup(now);\n}\n\nvoid Splay(int now) {\n    for (int F = Node[now].Fa; !Isroot(now); Rot(now), F = Node[now].Fa)\n        if (!Isroot(F))\n            which(F) ^ which(now) ? Rot(now) : Rot(F);\n    pushup(now);\n}\n\nvoid Access(int now) {\n    for (int pos = 0; now; pos = now, now = Node[now].Fa)\n        Splay(now), Node[now].son[1] = pos, pushup(now);\n}\n\nint Fake_Fndroot(int now, int o) {\n    Splay(now);\n    while (Node[now].son[o]) now = Node[now].son[o];\n    return now;\n}\n\nvoid Lnk(int X, int Y) {\n    int L = Fake_Fndroot(X, 0);\n    if (L == Fake_Fndroot(Y, 0)) return;\n    int R = Fake_Fndroot(Y, 1);\n    Splay(L), Node[L].Fa = R;\n    Access(Fake_Fndroot(X, 1));\n}\n\nvoid Cut(int now) {\n    Splay(now); Node[now].son[0] = Node[Node[now].son[0]].Fa = 0; pushup(now);\n}\n\nLL Ask(int X, int Y) {\n    if (Fake_Fndroot(X, 0) != Fake_Fndroot(Y, 0)) return -1;\n    LL ans = 0;\n    Splay(X), ans -= Node[Node[X].son[0]].Sum;\n    Splay(Y), ans += Node[Node[Y].son[0]].Sum + Node[Y].w;\n    if (ans <= 0) {\n        ans = 0;\n        Splay(Y), ans -= Node[Node[Y].son[0]].Sum;\n        Splay(X), ans += Node[Node[X].son[0]].Sum + Node[X].w;\n    } return ans;\n}\n\nint main() {\n    N = read(), M = read();\n    for (int pos = 1; pos <= N; pos++) Node[pos].Sum = Node[pos].w = read();\n    char o; int L, R;\n    while (M--) {\n        o = recd(), L = read();\n        if (o == 'M')\n            R = read(), Lnk(L, R);\n        else if (o == 'D')\n            Cut(L);\n        else\n            R = read(), printf(\"%lld\\n\", Ask(L, R));\n    }\n}\n\n\n```\n",
        "postTime": 1550679293,
        "uid": 110572,
        "name": "\u7720\u3164\u3164\u3164",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/Memory-of-winter/p/10331946.html)\n\n**\u9898\u76ee\u5927\u610f\uff1a**\u6709$n(n\\leqslant2\\times10^5)$\u4e2a\u5e8f\u5217\uff0c\u6709$m(m\\leqslant2\\times10^5)$\u4e2a\u64cd\u4f5c\uff0c\u5206\u4e09\u79cd\uff1a\n\n1. $M\\;x\\;y$\uff1a\u628a$x$\u6240\u5728\u7684\u5e8f\u5217\u653e\u5728$y$\u6240\u5728\u5e8f\u5217\u4e4b\u540e\n2. $D\\;x$\uff1a\u628a$x$\u6240\u5728\u7684\u5e8f\u5217\u4ece\u5b83\u524d\u9762\u65ad\u5f00\n3. $Q\\;x\\;y$\uff1a\u8be2\u95ee\u82e5$x,y$\u5728\u540c\u4e00\u5e8f\u5217\u4e2d\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5143\u7d20\u548c\n\n**\u9898\u89e3\uff1a**\u5e73\u8861\u6811\uff0c\u5408\u5e76\u5c31\u6b63\u5e38\u5408\u5e76\uff0c\u6ce8\u610f\u662f\u628a$x$\u653e\u5230$y$\u540e\uff0c\u5173\u4e8e\u627e$x$\u6240\u5728\u7684\u5e8f\u5217\uff0c\u5c31\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u76f4\u63a5\u5411\u4e0a\u8df3\u7236\u4eb2\u5c31\u53ef\u4ee5\u4e86\uff0c\u5728\u5206\u88c2\u65f6\u6ce8\u610f\u7ef4\u62a4\u7236\u4eb2\u3002\n\n\u6c42\u5143\u7d20\u7684\u6392\u540d\u5c31\u770b\u4e00\u4e0b\u5b83\u662f\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u662f\u7684\u8bdd\u628a\u5b83\u5144\u5f1f\u7684\u5927\u5c0f\u52a0\u4e0a\u3002\n\n\u8be2\u95ee\u5c31\u8bb0\u5f55\u4e00\u4e2a\u533a\u95f4\u548c\u5373\u53ef\u3002\n\n\n\n**C++ Code\uff1a**\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#define maxn 200010\n\nnamespace Treap {\n\tint pri[maxn], lc[maxn], rc[maxn], fa[maxn], sz[maxn], V[maxn];\n\tlong long S[maxn];\n\tint ta, tb, tmp, res;\n\tinline void nw(int pos, int x) {\n\t\tpri[pos] = rand();\n\t\tS[pos] = V[pos] = x;\n\t\tlc[pos] = rc[pos] = fa[pos] = 0;\n\t\tsz[pos] = 1;\n\t}\n\tinline int update(int rt) {\n\t\tconst int lc = Treap::lc[rt], rc = Treap::rc[rt];\n\t\tif (lc) fa[lc] = rt;\n\t\tif (rc) fa[rc] = rt;\n\t\tsz[rt] = sz[lc] + sz[rc] + 1;\n\t\tS[rt] = S[lc] + S[rc] + V[rt];\n\t\treturn rt;\n\t}\n\tvoid split(int rt, int k, int &x, int &y) {\n\t\tif (!rt) x = y = 0;\n\t\telse {\n\t\t\tif (sz[lc[rt]] >= k) {\n\t\t\t\tsplit(lc[rt], k, x, lc[rt]);\n\t\t\t\tfa[x] = fa[rt] = 0;\n\t\t\t\ty = update(rt);\n\t\t\t} else {\n\t\t\t\tsplit(rc[rt], k - sz[lc[rt]] - 1, rc[rt], y);\n\t\t\t\tfa[rt] = fa[y] = 0;\n\t\t\t\tx = update(rt);\n\t\t\t}\n\t\t}\n\t}\n\tint merge(int x, int y) {\n\t\tif (!x || !y) return x | y;\n\t\tif (pri[x] < pri[y]) { rc[x] = merge(rc[x], y); return update(x); }\n\t\telse { lc[y] = merge(x, lc[y]); return update(y); }\n\t}\n\tinline int gtrnk(int x) {\n\t\tres = sz[lc[x]] + 1;\n\t\twhile (x) {\n\t\t\tif (rc[fa[x]] == x) res += sz[lc[fa[x]]] + 1;\n\t\t\tx = fa[x];\n\t\t}\n\t\treturn res;\n\t}\n\tinline int gtrt(int x) {\n\t\twhile (fa[x]) x = fa[x];\n\t\treturn x;\n\t}\n\n\tinline void Merge(int x, int y) {\n\t\tx = gtrt(x), y = gtrt(y);\n\t\tif (x == y) return ;\n\t\tmerge(y, x);\n\t}\n\tinline void Split(int x) {\n\t\tint rk = gtrnk(x); x = gtrt(x);\n\t\tsplit(x, rk - 1, ta, tb);\n\t}\n\tinline void query(int x, int y) {\n\t\tint root = gtrt(x);\n\t\tif (root != gtrt(y)) {\n\t\t\tputs(\"-1\");\n\t\t\treturn ;\n\t\t}\n\t\tint rkx = gtrnk(x), rky = gtrnk(y);\n\t\tif (rkx > rky) std::swap(rkx, rky);\n\t\tsplit(root, rky, ta, tb);\n\t\tsplit(ta, rkx - 1, ta, tmp);\n\t\tprintf(\"%lld\\n\", S[tmp]);\n\t\tmerge(ta, merge(tmp, tb));\n\t}\n}\n\nint n, m;\n\nint main() {\n\tsrand(20040826);\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1, x; i <= n; ++i) {\n\t\tscanf(\"%d\", &x);\n\t\tTreap::nw(i, x);\n\t}\n\twhile (m --> 0) {\n\t\tchar op;\n\t\tint x, y;\n\t\tscanf(\"%1s%d\", &op, &x);\n\t\tswitch (op) {\n\t\t\tcase 'M':\n\t\t\t\tscanf(\"%d\", &y);\n\t\t\t\tTreap::Merge(x, y);\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tTreap::Split(x);\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tscanf(\"%d\", &y);\n\t\t\t\tTreap::query(x, y);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1548683586,
        "uid": 22072,
        "name": "Memory_of_winter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    },
    {
        "content": "\u6211\u4eec\u5148\u770b\u770b\u539f\u9898\u7684\u505a\u6cd5\uff0cdsu \u8fb9\u5e26\u6743\u5bf9\u5427\u3002  \n\u518d\u770b\u8fd9\u9053\u9898\u3002\u5e8f\u5217\uff1f\u5e73\u8861\u6811\uff01\n\n\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u51e0\u4e2a\u64cd\u4f5c\uff0c\u53d1\u73b0\u4e0d\u662f Splay \u548c FHQ Treap \u7684\u5e38\u89c4\u64cd\u4f5c\u3002  \n\u5982\u679c\u5b9e\u73b0\u9700\u8981\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\u3002  \n\u7b97\u4e00\u7b97\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\n\nM \u64cd\u4f5c\uff0c\u5c31\u76f4\u63a5\u6309\u7167\u7ef4\u62a4\u5e8f\u5217\u7684\u65b9\u5f0f\u628a $y$ \u6240\u5728\u5e8f\u5217\u5408\u5e76\u5230 $x$ \u6240\u5728\u5e8f\u5217\u4e2d\u3002  \nD \u64cd\u4f5c\uff0c\u8ba9\u6211\u4eec\u60f3\u5230\u5206\u88c2\u64cd\u4f5c\uff0c\u4f46\u662f\u5b83\u7ed9\u51fa\u7684\u662f\u7ed3\u70b9\u7f16\u53f7\u800c\u975e\u6392\u540d\uff0c\u6240\u4ee5\u53ef\u4ee5\u5199\u4e00\u4e2a\u51fd\u6570\u6c42\u4e00\u4e0b\u67d0\u7ed3\u70b9\u7684\u6392\u540d\u3002  \nQ \u64cd\u4f5c\uff0c\u914d\u5408\u6c42\u7ed3\u70b9\u6392\u540d\u7684\u64cd\u4f5c\u5c31\u5f88\u5bb9\u6613\u4e86\uff0c\u7136\u540e\u6ce8\u610f\u533a\u95f4\u4e0d\u4e00\u5b9a $l \\le r$\u3002\n\n\u8fd9\u4e9b\u64cd\u4f5c\u56e0\u4e3a\u6ca1\u6709\u76f4\u63a5\u7ed9\u5b9a\u6839\u8282\u70b9\uff0cSplay \u7684\u8bdd\u5c31\u76f4\u63a5 Splay \u4e00\u4e0b\uff0cFHQ Treap \u5c31\u5f97\u627e\u6839\u3002  \n\u8fd9\u53c8\u8ba9\u6211\u4eec\u8054\u60f3\u5230\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u3002  \n\u4e0d\u8fc7\uff0c\u7531\u4e8e\u5e73\u8861\u6811\u672c\u6765\u7684\u671f\u671b\u6811\u9ad8\u5c31\u662f $\\log{n}$ \u7684\uff0c\u590d\u6742\u5ea6\u6709\u4fdd\u969c\u3002\n\n\u7136\u540e\u4e0d\u5f00 O2 \u4e5f\u53ea\u8981 500+ms\uff0c\u6bd4\u8f83\u7a33\uff0c  \n\u542c\u8bf4\u8fd8\u6709 Splay \u8dd1\u4e0d\u8fdb\u4e00\u79d2\u7684\u2026\u2026\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#define ls(p) tree[p].lson\n#define rs(p) tree[p].rson\nusing namespace std;\nconst int N = 2e5;\nint n,m;\nstruct node\n{\n    long long val,sum;\n    int rnd,sz;\n    int lson,rson,fa;\n} tree[N + 10];\ninline int get(int p)\n{\n    return tree[p].fa == p ? p : get(tree[p].fa);\n}\ninline void up(int p)\n{\n    tree[p].sz = tree[ls(p)].sz + 1 + tree[rs(p)].sz;\n    tree[p].sum = tree[ls(p)].sum + tree[p].val + tree[rs(p)].sum;\n    if(ls(p))\n        tree[ls(p)].fa = p;\n    if(rs(p))\n        tree[rs(p)].fa = p;\n}\nvoid split(int p,int k,int &x,int &y)\n{\n    if(!p)\n    {\n        x = y = 0;\n        return ;\n    }\n    if(tree[ls(p)].sz < k)\n        x = p,split(rs(p),k - tree[ls(p)].sz - 1,rs(p),y);\n    else\n        y = p,split(ls(p),k,x,ls(p));\n    tree[x].fa = x,tree[y].fa = y;\n    up(p);\n}\nint merge(int x,int y)\n{\n    if(!x || !y)\n        return x | y;\n    if(tree[x].rnd < tree[y].rnd)\n    {\n        rs(x) = merge(rs(x),y);\n        up(x);\n        return x;\n    }\n    else\n    {\n        ls(y) = merge(x,ls(y));\n        up(y);\n        return y;\n    }\n}\nint getrank(int p)\n{\n    int ret = tree[ls(p)].sz + 1;\n    while(tree[p].fa ^ p)\n    {\n        if(rs(tree[p].fa) == p)\n            ret += tree[ls(tree[p].fa)].sz + 1;\n        p = tree[p].fa;\n    }\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i = 1;i <= n;++i)\n        scanf(\"%lld\",&tree[i].val),tree[i].sum = tree[i].val,tree[i].rnd = rand(),tree[i].sz = 1,tree[i].fa = i;\n    char op;\n    int a,b;\n    while(m--)\n    {\n        scanf(\" %c\",&op);\n        if(op == 'M')\n        {\n            scanf(\"%d%d\",&a,&b);\n            int fa = get(a),fb = get(b);\n            if(fa ^ fb)\n                merge(fb,fa);\n        }\n        else if(op == 'D')\n        {\n            scanf(\"%d\",&a);\n            int fa = get(a),x,y;\n            split(fa,getrank(a) - 1,x,y);\n        }\n        else\n        {\n            scanf(\"%d%d\",&a,&b);\n            if(get(a) ^ get(b))\n                puts(\"-1\");\n            else\n            {\n                int fa = get(a);\n                int l = getrank(a),r = getrank(b);\n                int x,y,z;\n                split(fa,r,x,z);\n                split(x,l - 1,x,y);\n                printf(\"%lld\\n\",tree[y].sum);\n                fa = merge(merge(x,y),z);\n            }\n        }\n    }\n}\n```",
        "postTime": 1544858682,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4847 \u3010\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4V2\u3011"
    }
]