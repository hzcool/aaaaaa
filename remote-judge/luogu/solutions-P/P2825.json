[
    {
        "content": "# [P2825][HEOI2016/TJOI2016]\u6e38\u620f\n\nAlgorithm: \u5308\u7259\u5229\u7b97\u6cd5, \u56fe\u8bba\u5efa\u6a21\n\nCreated: Aug 10, 2020 7:07 PM\n\nDifficulty: \u7701\u9009/NOI-\n\nURL: https://www.luogu.com.cn/problem/P2825\n\n\u753b\u5916\u97f3\uff1a\u5728\u8c03\u8bd5\u65f6\u6211\u662f\u8fd9\u4e2a\u8868\u60c5\uff1a ????\uff1bAC\u4e86\u8fd9\u9898\u65f6\u6211\u662f\u8fd9\u4e2a\u8868\u60c5\uff1a ????\uff1b\u770b\u5230\u8fd9\u9898\u7684\u9898\u89e3\u8fd8\u6ca1\u6ee1\u65f6\u6211\u662f\u8fd9\u4e2a\u8868\u60c5\uff1a ????\n\n# \u9898\u76ee\u94fe\u63a5\uff1a\n\n[[HEOI2016/TJOI2016]\u6e38\u620f](https://www.luogu.com.cn/problem/P2825)\n\n[\u300cTJOI / HEOI2016\u300d\u6e38\u620f - \u9898\u76ee - LibreOJ](https://loj.ac/problem/2057)\n\n# \u9898\u89e3\uff1a\n\n\u5728\u505a\u8fd9\u9898\u524d\uff0c\u4f60\uff08\u4e0d\uff09\u9700\u8981\u5148AC\u8fd9\u9898\u5e76\u4e14\u719f\u7ec3\u638c\u63e1\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\uff1a\n\n[[ZJOI2007]\u77e9\u9635\u6e38\u620f](https://www.luogu.com.cn/problem/P1129)\n\n\u9996\u5148\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\uff0c\u82e5\u662f\u628a\u786c\u77f3\u5b50\u5168\u90e8\u5f53\u6210\u8f6f\u77f3\u5b50\uff0c\u5c31\u53ef\u4ee5\u5c06\u9898\u610f\u8f6c\u6362\u6210\uff1a\u201c\u6bcf\u6446\u653e\u4e00\u4e2a\u70b8\u5f39\uff0c\u5b83\u6240\u5728\u7684\u884c\u548c\u5217\u90fd\u4e0d\u518d\u80fd\u6446\u653e\u5176\u5b83\u7684\u68cb\u5b50\uff0c\u5176\u4e2d\u672c\u8eab\u5c31\u6709\u4e00\u4e9b\u70b9\u662f\u4e0d\u53ef\u4ee5\u6446\u653e\u70b8\u5f39\u7684\u3002\u201d\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\u5c06\u884c\u770b\u6210\u96c6\u5408 $S$\uff0c\u5c06\u5217\u770b\u6210\u96c6\u5408 $T$ \uff0c\u90a3\u4e48\u80fd\u591f\u6446\u653e\u7684\u70b8\u5f39\u7684\u4e2a\u6570\u5c31\u662f $S$ \u4e0e $T$ \u7684\u6700\u5927\u5339\u914d\uff08\u4e24\u4e2a\u96c6\u5408\u5185\u90e8\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u884c\u4e0e\u884c\u4e0d\u76f8\u4ea4\uff0c\u5217\u4e0e\u5217\u4e5f\u4e0d\u76f8\u4ea4\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5e94\u7528\u9898\u3002\n\n\u52a0\u4e86\u786c\u77f3\u5b50\uff0c\u53c8\u600e\u4e48\u505a\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u4e8c\u5206\u56fe\u7684\u672c\u8d28\u8003\u8651\u8d77\u3002\u4e8c\u5206\u56fe\u91cd\u5728\u540c\u4e00\u96c6\u5408\u5185\u90e8\u5143\u7d20\u4e0d\u76f8\u4ea4\uff0c\u4e0d\u540c\u96c6\u5408\u5143\u7d20\u6709\u76f8\u8fde\u8fb9\u3002\u90a3\u4e48\u6b64\u65f6\uff0c\u5982\u679c\u4e00\u884c\u5185\u5b58\u5728\u4e00\u4e2a\u786c\u77f3\u5b50\uff0c\u8fd9\u4e00\u884c\u5c31\u4f1a\u88ab\u5206\u6210\u4e0d\u76f8\u4ea4\u7684\u4e24\u90e8\u5206\u3002\u5982\u679c\u628a\u8fd9\u4e24\u90e8\u5206\u90fd\u770b\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u884c\uff0c\u6b64\u65f6\uff0c\u884c\u4e0e\u884c\u4ecd\u7136\u4e0d\u76f8\u4ea4\uff0c\u5217\u4e0e\u884c\u4ecd\u7136\u4f1a\u76f8\u4ea4\uff0c\u6ee1\u8db3\u4e8c\u5206\u56fe\u7684\u6027\u8d28\uff0c\u90a3\u4e48\uff0c\u6b64\u65b9\u6848\u53ef\u884c\u3002\n\n\u62ff\u6837\u4f8b\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff1a\n\n```cpp\n#***\n*#**\n**#*\nxxx#\n```\n\n\u539f\u6765\u7684\u77e9\u9635\u957f\u8fd9\u6837\n\n```cpp\n#111\n2#22\n33#3\nxxx#\n```\n\n\u5982\u679c\u5c06\u786c\u77f3\u5b50\u770b\u6210\u8f6f\u77f3\u5b50\uff0c\u6211\u4eec\u4f1a\u8fd9\u6837\u7ed9\u6bcf\u884c\u4e2d\u53ef\u4ee5\u653e\u70b8\u5f39\u7684\u8282\u70b9\u7f16\u53f7\n\n```cpp\n#111\n2#33\n44#5\nxxx#\n```\n\n\u4f46\u662f\u786c\u77f3\u5b50\u5c06\u6bcf\u884c\u5212\u5206\u6210\u4e86\u591a\u4e2a\u5355\u72ec\u7684\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5c06\u786c\u77f3\u5b50\u540e\u7684\u53ef\u653e\u77f3\u5b50\u7684\u8282\u70b9\u6240\u5904\u7684\u884c\u52a0\u4e00\u3002\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u884c\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u610f\u4e49\u4e0a\u7684\u884c\u4e86\uff0c\u8fd9\u91cc\u662f\u88ab\u786c\u77f3\u5b50\u5206\u5272\u540e\u62bd\u8c61\u51fa\u6765\u7684\u5355\u72ec\u7684\u884c\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u884c\u7684\u7f16\u53f7\u5904\u7406\u5b8c\u4e86\uff0c\u5217\u7684\u7f16\u53f7\u4e5f\u540c\u7406\u3002\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\uff0c\u8fd9\u6837\u65b9\u4fbf\u7406\u89e3\uff0c\u51e0\u4e2a\u6bd4\u8f83\u5751\u7684\u70b9\u5728\u6ce8\u91ca\u91cc\u8bb2\u4e86\uff1a\n\n```cpp\n//File: P2825.cpp\n//Author: yanyanlongxia\n//Date: 2020/8/10\n//\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,ntot,mtot,tot,head[3000],nxt[3000],ver[3000],row[60][60],col[60][60],match[3000],ans;\nbool vis[3000];\nvoid add(int x,int y)//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n{\n    ver[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nbool find(int x)//\u5308\u7259\u5229\u7b97\u6cd5\n{\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=ver[i];\n        if(!vis[y])\n        {\n            vis[y]=true;\n            if(!match[y] || find(match[y]))\n            {\n                match[y]=x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    char s[60][60];\n    bool flag=1;//\u6ce8\u610f\u7b2c\u4e00\u6b21\u9700\u8981\u5355\u5f00\u4e00\u884c\n    pair<int,int>last;//\u4e0e\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u76f8\u4f3c\uff0c\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u62bd\u8c61\u51fa\u7684\u884c\u7684\u7f16\u53f7\u90fd\u53ef\u4ee5\u7531\u4e0a\u4e00\u4e2a\u6709\u7f16\u53f7\u7684\u70b9\u8f6c\u79fb\u8fc7\u6765\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",(s[i]+1));\n        for(int j=1;j<=m;j++)\n        {\n            if(s[i][j]=='#')//\u4e0b\u4e00\u6b21\u53e6\u5f00\u4e00\u884c\uff08\u62bd\u8c61\u610f\u4e49\u4e0a\u7684\u884c\uff09\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)//\u4e0d\u9700\u8981\u52a01\n            {\n                if(s[i][j]!='x')\n                {\n                    row[i][j]=row[last.first][last.second];//row\u6570\u7ec4\u7684\u610f\u4e49\u4e3a\u8be5\u70b9\u6240\u5728\u7684\u62bd\u8c61\u7684\u884c\u7684\u7f16\u53f7\n                    last=make_pair(i,j);\n                }\n            } else\n                if(s[i][j]!='x')\n                {\n                    row[i][j]=row[last.first][last.second]+1;\n                    ntot++;\n                    last=make_pair(i,j);\n                    flag=0;//\u5f53\u524d\u7684\u52a0\u5904\u7406\u5b8c\u6bd5\n                }\n        }\n        flag=1;//\u6362\u884c\u4e00\u5b9a\u8981\u52a0\u4e00\n    }\n    flag=1;\n    last=make_pair(0,0);//\u6e05\u96f6\uff0c\u8d4b\u521d\u503c\n    for(int i=1;i<=m;i++)//\u5217\u7684\u5904\u7406\uff0c\u4e0e\u884c\u76f8\u4f3c\uff0c\u4f46\u662fi\u4e0ej\u8981\u53d6\u53cd\n    {\n        for(int j=1;j<=n;j++)\n        {\n            if(s[j][i]=='#')\n            {\n                flag=1;\n                continue;\n            }\n            if(flag==0)\n            {\n                if(s[j][i]!='x')\n                {\n                    col[j][i]=col[last.second][last.first];//col\u6570\u7ec4\u4e0erow\u6570\u7ec4\u7684\u610f\u4e49\u76f8\u4f3c\uff0c\u662f\u5217\u7684\u7f16\u53f7\n                    last=make_pair(i,j);\n                }\n            } else\n                if(s[j][i]!='x')\n                {\n                    col[j][i]=col[last.second][last.first]+1;\n                    mtot++;\n                    last=make_pair(i,j);\n                    flag=0;\n                }\n        }\n        flag=1;\n    }\n    for (int i = 1; i <= n; ++i)\n        for (int j = 1; j <= m; ++j) {\n            if (s[i][j]=='*')\n                add(row[i][j],col[i][j]);//\u52a0\u8fb9\n        }\n    for (int i = 1; i <= ntot; ++i) {\n        memset(vis,0,sizeof(vis));\n        if(find(i))\n            ans++;//\u7edf\u8ba1\u6700\u5927\u5339\u914d\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1597060679,
        "uid": 203083,
        "name": "\u708e\u708e\u9f99\u867e",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u5339\u914d\u3002\n\n\u548c$ZJOI2007$\u77e9\u9635\u6e38\u620f\u90a3\u9053\u9898\u5dee\u4e0d\u591a\u3002\u9996\u5148\uff0c\u63d0\u53d6\u51fa\u6bcf\u4e00\u884c\u91cc\u6240\u6709\u8fde\u7eed\u7684\u4e0d\u542b#\u7684\u6781\u957f\u975e\u7a7a\u5b50\u6bb5\uff0c\n\n\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a\\*xxxx##x\\*x\\*x\uff0c\u90a3\u4e48[\\*xxxx]\u548c[x\\*x\\*x]\u5c31\u662f\u63d0\u53d6\u51fa\u7684\u5408\u6cd5\u975e\u7a7a\u5b50\u6bb5\u3002\n\n\u5e76\u628a\u6bcf\u4e00\u4e2a\u5b50\u6bb5\u62bd\u8c61\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u5bf9\u6bcf\u4e00\u5217\u91cc\u4e5f\u4e00\u6837\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53ef\u653e\u70b8\u5f39\u7684\u4f4d\u7f6e$(i,j)$\uff0c\u4ece$(i,j)$\u6240\u5728\u7684**\u884c\u5185**\u5408\u6cd5\u5b50\u6bb5\u5bf9\u5e94\u7684\u8282\u70b9\u5411$(i,j)$\u6240\u5728\u7684**\u5217\u5185**\u5408\u6cd5\u5b50\u6bb5\u5bf9\u5e94\u7684\u8282\u70b9\u8fde\u4e00\u6761**\u6709\u5411\u8fb9**\uff08\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u8fde\u6709\u5411\u8fb9\uff09\u3002\n\n\u6700\u540e\u8dd1\u4e00\u904d\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u6700\u5927\u5339\u914d\u6570\u5c31\u662f\u6700\u540e\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get() {\n    char c; while ((c = getchar()) != '*' && c != 'x' && c != '#');\n    return c;\n}\nconst int N = 55, M = 2505;\nint n, m, tot, ecnt, nxt[M], adj[M], go[M], my[M], row[N][N], col[N][N];\nbool vis[M]; char a[N][N];\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nbool dfs(int u) {\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (!vis[v = go[e]]) {\n            vis[v] = 1;\n            if (!my[v] || dfs(my[v])) {\n                my[v] = u;\n                return 1;\n            }\n        }\n    return 0;\n}\nint solve() {\n    int i, ans = 0;\n    for (i = 1; i <= tot; i++) {\n        memset(vis, 0, sizeof(vis));\n        if (dfs(i)) ans++;\n    }\n    return ans;\n}\nint main() {\n    int i, j; n = read(); m = read();\n    for (i = 1; i <= n; i++) for (j = 1; j <= m; j++)\n        a[i][j] = get();\n    for (i = 1; i <= n; i++) for (j = 1; j <= m; j++) {\n        if (a[i][j] == '#') continue;\n        if (j == 1 || a[i][j - 1] == '#') tot++;\n        row[i][j] = tot;\n    }\n    for (j = 1; j <= m; j++) for (i = 1; i <= n; i++) {\n        if (a[i][j] == '#') continue;\n        if (i == 1 || a[i - 1][j] == '#') tot++;\n        col[i][j] = tot;\n    }\n    for (i = 1; i <= n; i++) for (j = 1; j <= m; j++) {\n        if (a[i][j] != '*') continue;\n        add_edge(row[i][j], col[i][j]);\n    }\n    printf(\"%d\\n\", solve());\n    return 0;\n}\n```",
        "postTime": 1503147494,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "**\u5e7f\u544a\uff1a[blog $\\biguplus$](https://www.luogu.com.cn/blog/Wendigo/)**\n\n[P2825 \u3010\\[HEOI2016/TJOI2016\\]\u6e38\u620f\u3011](https://www.luogu.com.cn/problem/P2825)\n\n### \u6b64\u9898\u7b97\u6cd5\uff1a\u7f51\u7edc\u6700\u5927\u6d41\n\n**\u7ea6\u675f\u6761\u4ef6\uff1a**\n\n\u5148\u4e0d\u8003\u8651\u8def\u969c\uff0c\u8f6c\u5316\u5df2\u6709\u7ea6\u675f\u6761\u4ef6\uff1a\n\n$$\n\n\\begin{cases}\n\\text{\u70b8\u4e00\u884c\u4e00\u5217}\\\\\n\\text{\u4e0d\u80fd\u4e92\u70b8}\n\\end{cases}\\Rightarrow\\begin{cases}\n\\text{\u540c\u4e00\u884c\u53ea\u80fd\u6709\u4e00\u4e2a\u70b8\u5f39......(1)}\\\\\n\\text{\u540c\u4e00\u5217\u53ea\u80fd\u6709\u4e00\u4e2a\u70b8\u5f39......(2)}\n\\end{cases}$$ \n\n\u7531\u4e8e**\u8def\u969c #** \u628a\u4e00\u884c\u4e00\u5217\u5206\u4e3a\u4e86\u591a\u6bb5\uff0c\u6240\u4ee5\u4e00\u4e2a\u70b8\u5f39\u5e76\u4e0d\u80fd\u70b8\u5230\u4e00\u6574\u884c\uff0c\u6240\u4ee5\uff1a\n\n$$\n\\begin{cases}\n\\text{\u70b8\u884c\u4e00\u6bb5\u5217\u4e00\u6bb5}\\\\\n\\text{\u4e0d\u80fd\u4e92\u70b8}\n\\end{cases}\\Rightarrow\\begin{cases}\n\\text{\u540c\u4e00\u884c\u6bb5\u53ea\u80fd\u6709\u4e00\u4e2a\u70b8\u5f39......(1)}\\\\\n\\text{\u540c\u4e00\u5217\u6bb5\u53ea\u80fd\u6709\u4e00\u4e2a\u70b8\u5f39......(2)}\n\\end{cases}$$ \n\n**\u6240\u4ee5\u53ea\u9700\u5982\u4e0b\u6784\u9020\u7f51\u7edc\u6d41\u6a21\u578b\uff1a**\n\n$S\\xRightarrow{flow=1}\\text{\u6bcf\u4e2a\u884c\u6bb5}$\n\n$\\text{\u6bcf\u4e2a\u5217\u6bb5}\\xRightarrow{flow=1}T$\n\n\u518d\u5bf9\u4e8e\u6bcf\u4e2a\u7a7a\u5730 $sp$\uff1a\n\n$\\text{sp\u7684\u884c\u6bb5}\\xRightarrow{flow=1}\\text{sp\u7684\u5217\u6bb5}$\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5c31\u662f\u6700\u591a\u80fd\u653e\u7684\u70b8\u5f39\u6570\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801 $+$ \u6ce8\u91ca\n\n```cpp\n/******************\n    . . \n  /\\OwO/\\\n /  ' '  \\\n\nKonny Wendigo\n******************/\n#include <bits/stdc++.h>\nusing namespace std;\n#define lng long long\n#define fo(i,a,b,c) for(int i=a;i<=b;i+=c)\n#define al(i,h,x) for(int i=h[x];i;i=e[i].nex)\nnamespace rd{\n\tconst int L=1<<16;\n\tchar buf[L],*S,*T;\n\tinline char Gc_(){\n\t\tif(S==T){T=(S=buf)+fread(buf,1,L,stdin);\n\t\t\tif(S==T) return EOF;}\n\t\treturn *S++;\n\t}\n\tinline char Gc(){return getchar();}\n\tchar c;\n\tinline int d(){\n\t\tint f=1,x;\n\t\tfor(c=Gc();c>'9'||c<'0';c=Gc())\n\t\t\tif(c=='-') f=-1;\n\t\tfor(x=0;c>='0'&&c<='9';c=Gc())\n\t\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\treturn x*f;\n\t}\n\tinline lng lld(){\n\t\tlng f=1,x;\n\t\tfor(c=Gc();c>'9'||c<'0';c=Gc())\n\t\t\tif(c=='-') f=-1;\n\t\tfor(x=0;c>='0'&&c<='9';c=Gc())\n\t\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\treturn x*f;\n\t}\n\tinline double lf(){\n\t\tdouble f=1,x,y=0.1;\n\t\tfor(c=Gc();c>'9'||c<'0';c=Gc())\n\t\t\tif(c=='-') f=-1;\n\t\tfor(x=0;c>='0'&&c<='9';c=Gc())\n\t\t\tx=x*10+c-'0';\n\t\tif(c=='.') for(c=Gc();c>='0'&&c<='9';c=Gc())\n\t\t\tx=x+(c-'0')*y,y*=0.1;\n\t\treturn x*f;\n\t}\n}//\u5feb\u8bfb\nconst int N=60;\nconst int V=3e3; //\u7f51\u7edc\u6d41\u56fe\u70b9\u8fb9\u6570\u4f30\u7b97\u5f88\u91cd\u8981\nconst int M=1e4;\nconst int inf=1e9;\nint n,m,cnth,cntk;\nint mp[N][N],h[N][N],k[N][N];\nint s,t,p,fans;\nclass edge{\npublic:\n\tint adj,nex,fw;\n}e[M];\nint g[V],top=1;\nvoid add(int x,int y,int w){\n\te[++top]=edge{y,g[x],w};\n\tg[x]=top;\n}\nvoid Add(int x,int y,int w){\n\t// printf(\"%d %d %d\\n\",x,y,w);\n\tadd(x,y,w),add(y,x,0);\n}\nint dep[V],cur[V];\nbool vis[V];\nqueue<int> q;\nbool bfs(){\n\tfo(i,1,p,1) vis[i]=0,cur[i]=g[i];\n\tq.push(s),vis[s]=1,dep[s]=0;\n\twhile(q.size()){\n\t\tint x=q.front();q.pop();\n\t\tal(i,g,x){\n\t\t\tint to=e[i].adj;\n\t\t\tif(!vis[to]&&e[i].fw){\n\t\t\t\tvis[to]=1;\n\t\t\t\tdep[to]=dep[x]+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn vis[t];\n}\nint dfs(int x,int F){\n\tif(x==t||!F) return F;\n\tint f,flow=0;\n\tal(i,cur,x){ cur[x]=i;\n\t\tint to=e[i].adj;\n\t\tif(dep[to]==dep[x]+1&&\n\t\t(f=dfs(to,min(F,e[i].fw)))>0){\n\t\t\te[i].fw-=f,e[i^1].fw+=f;\n\t\t\tF-=f,flow+=f;\n\t\t\tif(!F) break;\n\t\t}\n\t}\n\treturn flow;\n}//\u6a21\u677f\nint main(){\n\tn=rd::d(),m=rd::d();\n\tchar c=0;\n\tfo(i,1,n,1)fo(j,1,m,1){\n\t\twhile(c!='#'&&c!='*'&&c!='x')c=rd::Gc();\n\t\tmp[i][j]=(c=='#')?2:(c=='x')?1:0,c=rd::Gc();\n\t}//\u8bfb\u5165\u56fe\n\tfo(i,1,n,1)fo(j,1,m,1){\n\t\tif(mp[i][j]==2) continue;\n\t\tif(j==1||mp[i][j-1]==2) ++cnth;//\u5206\u88c2\u884c\u6bb5\n\t\th[i][j]=cnth;\n\t}\n\tfo(j,1,m,1)fo(i,1,n,1){\n\t\tif(mp[i][j]==2) continue;\n\t\tif(i==1||mp[i-1][j]==2) ++cntk;//\u5206\u88c2\u5217\u6bb5\n\t\tk[i][j]=cntk;\n\t}\n\t//\u8fd9\u6837\u5206\u88c2\u6bb5\u53ef\u4ee5\u51cf\u5c11\u65e0\u6548\u6bb5\n\tp=t=cnth+cntk+2,s=t-1;\n\tfo(i,1,cnth,1) Add(s,i,1);\n\tfo(i,1,cntk,1) Add(i+cnth,t,1);\n\tfo(i,1,n,1)fo(j,1,m,1)\n\t\tif(mp[i][j]==0) Add(h[i][j],cnth+k[i][j],1);\n\twhile(bfs()) fans+=dfs(s,inf);\n\t//\u8fde\u8fb9\u8dd1\u56fe\n\tprintf(\"%d\\n\",fans);\n\treturn 0;\n}\n```\n**\u7528 $\\LaTeX$ \u5199\u9898\u89e3\u4e0d\u6613\uff0c\u5feb\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6\uff01\uff01\n\n\n\n\n\n",
        "postTime": 1580532970,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "# P2825 [HEOI2016/TJOI2016]\u6e38\u620f\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problem/P2825)  \n[Github\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n## \u601d\u8def\n\n### \u4e8c\u5206\u56fe\u5339\u914d\n\n\u5982\u679c\u6ca1\u6709\u786c\u77f3\u5934\uff0c\u90a3\u4e48\u53ea\u9700\u5c06\u884c\u770b\u4f5c\u662f\u4e8c\u5206\u56fe\u7684\u4e00\u8fb9\uff0c\u5217\u770b\u4f5c\u53e6\u4e00\u8fb9\uff0c\u7136\u540e\u53ef\u4ee5\u653e\u7f6e\u70b8\u5f39\u7684\u5730\u65b9\uff0c\u6240\u5728\u884c\u5411\u6240\u5728\u5217\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u672c\u6765\u4e00\u884c\u53ea\u80fd\u653e\u4e00\u9897\u70b8\u5f39\uff0c\u4f46\u786c\u77f3\u5934\u7684\u51fa\u73b0\u5bfc\u81f4\u4e00\u884c\u88ab\u9694\u5f00\uff0c\u6240\u4ee5\u5728\u6709\u786c\u77f3\u5934\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u628a\u4e00\u884c\u770b\u6210\u591a\u884c\u3002\n\n### \u5373\u628a\u884c\u548c\u5217\u4f9d\u636e\u786c\u77f3\u5934\u7684\u4f4d\u7f6e\u5206\u5272\u6210\u591a\u884c\u548c\u591a\u5217\n\n\u5982\u9898\u4e2d\u793a\u4f8b\n\n\\#\\*\\*\\*  \n\\*\\#\\*\\*  \n\\*\\*\\#\\*  \nxxx\\#\n\n\u6bcf\u4e2a\u683c\u5b50\u6240\u5728\u7684\u884c\u4e3a:\n\n\\#000  \n1\\#11  \n22\\#2  \n333\\#\n\n\u8003\u8651\u5230\u786c\u77f3\u5934\uff0c\u5219\u6bcf\u4e2a\u683c\u5b50\u6240\u5728\u7684\"\u884c\"\u6539\u4e3a:\n\n\\#111  \n2\\#33  \n44\\#5  \n666\\#  \n\u5373\u539f\u6765\u7b2c0\u884c\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c1\u884c(\u4e3a\u4e86\u7f16\u7a0b\u65b9\u4fbf\uff0c\u9047\u5230\u786c\u77f3\u5934\u5c31`\u884c\u7f16\u53f7++`\uff0c\u6240\u4ee5\u8fd9\u91cc\u7f16\u53f7\u4e3a\u7b2c1\u884c\uff0c\u800c\u4e0d\u662f\u7b2c0\u884c)  \n\u539f\u6765\u7b2c1\u884c\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c2\u884c\u548c\u7b2c3\u884c  \n\u539f\u6765\u7b2c2\u884c\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c4\u884c\u548c\u7b2c5\u884c  \n\u539f\u6765\u7b2c3\u884c\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c6\u884c  \n\\#(\u786c\u77f3\u5934)\u6240\u5728\u7684\u683c\u5b50\u4e0d\u5c5e\u4e8e\u4efb\u4e00\u884c\n\n\u5bf9\u5217\u540c\u6837\u64cd\u4f5c\n\n\u521d\u59cb\u6bcf\u4e2a\u683c\u5b50\u6240\u5728\u5217:\n\n\\#123  \n0\\#23  \n01\\#3  \n012\\#\n\n\u91cd\u65b0\u7f16\u53f7\u540e\u6bcf\u4e2a\u683c\u5b50\u6240\u5728\u5217:\n\n\\#246  \n1\\#46  \n13\\#6  \n135\\#  \n\u5373\u539f\u6765\u7b2c0\u5217\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c1\u5217  \n\u539f\u6765\u7b2c1\u5217\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c2\u5217\u548c\u7b2c3\u5217  \n\u539f\u6765\u7b2c2\u5217\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c4\u5217\u548c\u7b2c5\u5217  \n\u539f\u6765\u7b2c3\u5217\u88ab\u786c\u77f3\u5934\u5206\u5272\u6210\u4e86\u7b2c6\u5217  \n\\#(\u786c\u77f3\u5934)\u6240\u5728\u7684\u683c\u5b50\u4e0d\u5c5e\u4e8e\u4efb\u4e00\u5217  \n\n\u4ee3\u7801\u4e2d\u4f7f\u7528\n```cpp\nstruct Grid {\n\tchar c;\n\tuint16_t row;\n\tuint16_t col;\n};\n```\n\u8bb0\u5f55\u6bcf\u4e2a\u683c\u5b50\u5728`\u884c\u548c\u5217\u88ab\u91cd\u65b0\u7f16\u53f7\u540e\u7684`\u7684\u884c\u548c\u5217\n\n\u7528Grid\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u6240\u6709\u683c\u5b50\uff0c\u8f93\u5165\u65f6\u5373\u53ef\u77e5\u9053```grids[i][j].c```\uff0c\n\n\u8f93\u5165\u65f6\u7528`n_rows`\u8bb0\u5f55\u5f53\u524d\u884c\u6570\uff0c\u521d\u59cb\u4e3a0\uff0c\u4e00\u884c\u8f93\u5165\u5b8c\u6bd5\u65f6`n_rows++`\uff0c\u5728\u8f93\u5165\u4e2d\u9047\u5230'\\#'\u4e5f\u8981`n_rows++`\uff0c\n\u6b64\u65f6\u7684`n_rows`\u8868\u793a\u7684\u884c\u6570\u5df2\u7ecf\u662f\u6839\u636e\u786c\u77f3\u5934\u91cd\u65b0\u7f16\u53f7\u540e\u7684\u884c\u6570\u4e86\u3002\u8f93\u5165\u65f6```grids[i][j].row = n_rows```\u5373\u53ef\u3002\n\n\u4e4b\u540e`\u6309\u5217\u904d\u5386`\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f7f\u7528`n_cols`\u8bb0\u5f55\u5f53\u524d\u5217\u6570\uff0c\u521d\u59cb\u4e3a0\uff0c\u4e00\u5217\u904d\u5386\u5b8c\u6bd5\u65f6`n_cols++`\uff0c\u5728\u904d\u5386\u4e2d\u9047\u5230'\\#'\u4e5f\u8981\n`n_cols++`\uff0c\u6b64\u65f6\u7684`n_cols`\u8868\u793a\u7684\u5217\u6570\u5df2\u7ecf\u662f\u6839\u636e\u786c\u77f3\u5934\u91cd\u65b0\u7f16\u53f7\u540e\u7684\u5217\u6570\u4e86\u3002\u904d\u5386\u65f6```girds[i][j].col = n_cols```\u5373\u53ef\u3002\n\n\u4e4b\u540e\u518d\u6b21\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\uff0c`\u6b64\u65f6\u6bcf\u4e2a\u683c\u5b50\u6240\u5728\u7684\u884c\u5411\u6240\u5728\u7684\u5217\u8fde\u8fb9\u5373\u53ef\u6784\u5efa\u4e8c\u5206\u56fe`\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u4e8c\u5206\u56fe`\u5de6\u8fb9\u9876\u70b9\u7684\u6570\u91cf\u662fn_rows`\uff0c\u7531\u4e8e\u8f93\u5165\u65f6\u6700\u540e\u4e00\u884c\u7ed3\u675f\u540e`n_rows++`\uff0c\u6240\u4ee5`n_rows`\u662f`\u884c\u91cd\u65b0\u7f16\u53f7\u540e\u6700\u5927\u7684\u884c\u7f16\u53f7+1`\uff0c\n`\u53f3\u8fb9\u9876\u70b9\u6570\u91cf\u662fn_cols`\uff0c\u7531\u4e8e\u904d\u5386\u65f6\u6700\u540e\u4e00\u5217\u7ed3\u675f\u540e`n_cols++`\uff0c\u6240\u4ee5`n_cols`\u662f`\u5217\u91cd\u65b0\u7f16\u53f7\u540e\u6700\u5927\u7684\u5217\u7f16\u53f7+1`\u3002\n\n\u4e8c\u5206\u56fe\u5339\u914d\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8fd9\u91cc\u7528\u7684\u662f\u5308\u7259\u5229\u7b97\u6cd5\u7684BFS\u5b9e\u73b0\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528DFS\u9012\u5f52\u5b9e\u73b0\u554a\uff0c\u56e0\u4e3a\u90a3\u6837\u4ee3\u7801\u5c31\u592a\u7b80\u5355\u4e86QWQ\n\n(\u9003\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <queue>\n#include \"stdint.h\"\n#include <iostream>\nusing namespace std;\n\n#define HARD '#'\n#define SOFT 'x'\n#define EMPTY '*'\n\n//\u683c\u5b50\nstruct Grid {\n\tchar c;\n\tuint16_t row;\n\tuint16_t col;\n};\n\ntypedef uint16_t vertex;\n#define NOT_A_VERTEX 0xffff\n\nsize_t hungarian(vector<vertex> * graph, size_t left_num, size_t right_num) {\n\t//\u4e8c\u5206\u56fe\u5339\u914d \u5308\u7259\u5229\u7b97\u6cd5(BFS\u5b9e\u73b0) \n\tsize_t result = 0;\n\tvertex * left_matching = new vertex[left_num];\n\tfill(left_matching, left_matching + left_num, NOT_A_VERTEX);\n\tvertex * right_matching = new vertex[right_num];\n\tfill(right_matching, right_matching + right_num, NOT_A_VERTEX);\n\tvertex * pre = new vertex[left_num];\n\tfill(pre, pre + left_num, NOT_A_VERTEX);\n\tbool * visited = new bool[right_num];\n\tqueue<vertex> vq;\n\tvertex front_v, adj_v, from, to, tmp;\n\tfor (vertex v = 0; v < left_num; v++) {\n\t\tfill(visited, visited + right_num, false);\n\t\tvq.push(v);\n\t\twhile (!vq.empty()) {\n\t\t\tfront_v = vq.front();\n\t\t\tvq.pop();\n\t\t\tfor (auto it = graph[front_v].begin(); it != graph[front_v].end(); it++) {\n\t\t\t\tadj_v = *it;\n\t\t\t\tif (!visited[adj_v]) {\n\t\t\t\t\tvisited[adj_v] = true;\n\t\t\t\t\tif (right_matching[adj_v] != NOT_A_VERTEX) {\n\t\t\t\t\t\tvq.push(right_matching[adj_v]);\n\t\t\t\t\t\tpre[right_matching[adj_v]] = front_v;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfrom = front_v;\n\t\t\t\t\t\tto = adj_v;\n\t\t\t\t\t\twhile (from != NOT_A_VERTEX) {\n\t\t\t\t\t\t\ttmp = left_matching[from];\n\t\t\t\t\t\t\tleft_matching[from] = to;\n\t\t\t\t\t\t\tright_matching[to] = from;\n\t\t\t\t\t\t\tfrom = pre[from];\n\t\t\t\t\t\t\tto = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (!vq.empty()) vq.pop();\n\t\t\t\t\t\tgoto NEXT;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //for auto\n\t\t} //while\n\tNEXT:\n\t\tif (left_matching[v] != NOT_A_VERTEX) result++;\n\t} //for (vertex v = 0; v < left_num; v++)\n\tfree(left_matching);\n\tfree(right_matching);\n\tfree(pre);\n\tfree(visited);\n\tqueue<vertex>().swap(vq);\n\treturn result;\n}\n\nint main() {\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\tGrid ** grids = new Grid*[n];\n\tsize_t i, j;\n\tuint16_t n_rows = 0, n_cols = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tgrids[i] = new Grid[m];\n\t\tfor (j = 0; j < m; j++) {\n\t\t\tcin >> (grids[i][j].c); //\u8f93\u5165\u8be5\u683c\u7684\u5b57\u7b26\n\t\t\tif (grids[i][j].c == HARD) \n\t\t\t\tn_rows++; //\u82e5\u9047\u5230\u786c\u77f3\u5934\uff0c\u5219\u8be5\u683c\u672c\u8eab\u4e0d\u8bb0\u5f55\u884c\u6570\uff0c\u800c\u672c\u884c\u5728\u786c\u77f3\u5934\u4e4b\u540e\u5269\u4e0b\u7684\u683c\u5b50\u8bb0\u4e3a\u4e0b\u4e00\u884c\n\t\t\telse grids[i][j].row = n_rows; //\u8bb0\u5f55\u6240\u5728\u884c\n\t\t}\n\t\tn_rows++; //\u8fdb\u5165\u4e0b\u4e00\u884c\n\t}\n\tfor (j = 0; j < m; j++) {  //\u6309\u5217\u904d\u5386\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tif (grids[i][j].c == HARD)\n\t\t\t\tn_cols++; //\u82e5\u9047\u5230\u786c\u77f3\u5934\uff0c\u5219\u8be5\u683c\u672c\u8eab\u4e0d\u8bb0\u5f55\u5217\u6570\uff0c\u800c\u672c\u5217\u5728\u786c\u77f3\u5934\u4e4b\u540e\u5269\u4e0b\u7684\u683c\u5b50\u8bb0\u4e3a\u4e0b\u4e00\u5217\n\t\t\telse grids[i][j].col = n_cols; //\u8bb0\u5f55\u6240\u5728\u5217\n\t\t}\n\t\tn_cols++; //\u8fdb\u5165\u4e0b\u4e00\u5217\n\t}\n\t//\u5efa\u7acb\u4e8c\u5206\u56fe\uff1a\u4ee5\u884c\u4f5c\u4e3a\u5de6\u8fb9\u9876\u70b9\uff0c\u5217\u4f5c\u4e3a\u53f3\u8fb9\u9876\u70b9\n\tvector<vertex> * graph = new vector<vertex>[n_rows]; //\u6ce8\u610f\u662fn_rows\u4e0d\u662fn\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < m; j++) \n\t\t\tif (grids[i][j].c == EMPTY) graph[grids[i][j].row].push_back(grids[i][j].col);\t //\u6240\u5728\u884c\u5411\u6240\u5728\u5217\u8fde\u8fb9\t\n\t\tfree(grids[i]);\n\t}\n\tfree(grids);\n\tprintf(\"%u\", hungarian(graph, n_rows, n_cols)); //\u8f93\u51fa\u4e8c\u5206\u56fe\u5339\u914d\u7ed3\u679c\n\tfor (i = 0; i < n_rows; i++)\n\t\tvector<vertex>().swap(graph[i]);\n\treturn 0;\n}\n```\n\n~END",
        "postTime": 1567569881,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u7684blog](http://www.cnblogs.com/dedicatus545/p/8759898.html)\n\n# \u6b63\u6587\n\n\u770b\u5230\u68cb\u76d8\u6446\u653e\u548c\u68cb\u5b50\u51b2\u7a81\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e48\u5c0f\u7684\u6570\u636e\u8303\u56f4\uff0c\u4f60\u80fd\u60f3\u5230\u4ec0\u4e48\uff1f\n\n\u7f51\u7edc\u6d41\u68cb\u76d8\u6a21\u578b\u554a\uff01\n\n\u5c31\u662f \u628a\u6e90\u70b9\u8fde\u5230\u6bcf\u4e00\u884c\uff0c\u6bcf\u4e00\u5217\u8fde\u5230\u6c47\u70b9\uff0c\u518d\u5728\u4e2d\u95f4......\n\n\u7b49\u7b49\uff0c\u8fd9\u9053\u9898\u6bcf\u884c\u4e0d\u4e00\u5b9a\u5168\u90e8\u51b2\u7a81\uff1f\uff1f\uff1f\n\n\u8fd9\u5012\u662f\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4f9d\u65e7\u96be\u4e0d\u5012\u7f51\u7edc\u6d41\u5927\u6cd5\n\n\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u884c\u4e2d\u7684\u4e00\u6bb5\u201c\u51b2\u7a81\u533a\u95f4\u201d\uff0c\u5c31\u662f\u4e24\u5757\u786c\u77f3\u5934\u4e2d\u95f4\u7684\u4e00\u6bb5\u8f6f\u77f3\u5934\u548c\u7a7a\u5730\n\n\u4f8b\u5982\u4e00\u884c\\[##\\*\\*x\\*\\*#xx\\*x##\\*\\]\u5c31\u5305\u542b\u4e09\u4e2a\u51b2\u7a81\u533a\u95f4\\[\\*\\*x\\*\\*\\]\\[xx\\*x\\]\\[\\*\\]\n\n\u90a3\u4e48\u663e\u7136\u6bcf\u4e2a\u51b2\u7a81\u533a\u95f4\u4e2d\u53ea\u80fd\u6446\u653e\u4e00\u4e2a\u77f3\u5b50\n\n\u540c\u7406\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u5217\u4e5f\u5212\u5206\u8fd9\u6837\u7684\u533a\u95f4\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7a7a\u5730(i,j)\uff0c\u6211\u4eec\u5c06\u5b83\u6240\u5904\u7684\u884c\u533a\u95f4\u548c\u6240\u5904\u7684\u5217\u533a\u95f4\u8fde\u8d77\u6765\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\n\n\u90a3\u4e48\u6b64\u9898\u7684\u7b54\u6848\u5c31\u662f\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\n\n\u6211\u4eec\u518d\u628a\u6e90\u70b9\u8fde\u5230\u6240\u6709\u884c\u533a\u95f4\u3001\u6c47\u70b9\u8fde\u5230\u6240\u6709\u5217\u533a\u95f4\uff0c\n\n\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7f51\u7edc\u6d41\u6a21\u578b\uff0c\u8dd1S-T\u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\u4e86\n\n#Code\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define inf 1e9\nusing namespace std;\ninline int read(){\n    int re=0,flag=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') flag=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n    return re*flag;\n}\nint n,m,cnt=-1,ans=0,first[10010],dep[10010],cur[10010],x[101][101]={0},bx[101][101],by[101][101]; \nstruct edge{\n    int to,next,w;\n}a[500010];\ninline void add(int u,int v,int w){\n    a[++cnt]=(edge){v,first[u],w};first[u]=cnt;\n    a[++cnt]=(edge){u,first[v],0};first[v]=cnt;\n}\nint q[10010];\nbool bfs(int s,int t){\n    int head=0,tail=1,i,u,v;\n    for(i=s;i<=t;i++) dep[i]=-1,cur[i]=first[i];\n    q[0]=s;dep[s]=0;\n    while(head<tail){\n        u=q[head++];\n        for(i=first[u];~i;i=a[i].next){\n            v=a[i].to;\n            if(~dep[v]||!a[i].w) continue;\n            dep[v]=dep[u]+1;q[tail++]=v;\n        }\n    }\n    return ~dep[t];\n}\nint dfs(int u,int t,int limit){\n    if(u==t||!limit) return limit;\n    int i,v,f,flow=0;\n    for(i=cur[u];~i;i=a[i].next){\n        v=a[i].to;cur[u]=i;\n        if(dep[v]==dep[u]+1&&(f=dfs(v,t,min(limit,a[i].w)))){\n            a[i].w-=f;a[i^1].w+=f;\n            limit-=f;flow+=f;\n            if(!limit) return flow;\n        }\n    }\n    return flow;\n}\nvoid dinic(int s,int t){\n    while(bfs(s,t)) ans+=dfs(s,t,inf);\n}\nint main(){\t\n    std::ios::sync_with_stdio(false);\n    memset(first,-1,sizeof(first));\n    cin>>n>>m;int i,j;char s[100];\n    for(i=1;i<=n;i++){\n        cin>>s;\n        for(j=1;j<=m;j++){\n            if(s[j-1]=='x') x[i][j]=2;\n            if(s[j-1]=='*') x[i][j]=1;\n            if(s[j-1]=='#') x[i][j]=0;\n        }\n    }\n    int tmp=0,tt;\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            if(!x[i][j]) continue;\n            if((j==1)||(!x[i][j-1])) add(0,++tmp,1);\n            bx[i][j]=tmp;\n        }\n    }\n    for(j=1;j<=m;j++){\n        for(i=1;i<=n;i++){\n            if(!x[i][j]) continue;\n            if((i==1)||(!x[i-1][j])) add(++tmp,n*m-1,1);\n            by[i][j]=tmp;\n        }\n    }\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            if(x[i][j]==1) add(bx[i][j],by[i][j],1);\n        }\n    }\n    dinic(0,n*m-1);\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1523257308,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u9898\u662f\u7ecf\u5178\u7684\u4e8c\u5206\u56fe\u5957\u8def\u9898\uff0c\u505a\u6cd5\u4e5f\u975e\u5e38\u7ecf\u5178\u3002\n\n\u5bf9\u4e8e\u5728\u68cb\u76d8\u4e0a\u7684\u548c\u4e00\u884c\u3001\u4e00\u5217\u6709\u5173\u7684\u9898\u76ee\uff0c\u5e94\u5f53\u628a\u6bcf\u884c\u3001\u6bcf\u5217\u4f5c\u4e3a\u4e8c\u5206\u56fe\u4e0a\u7684\u70b9\u8dd1\u6700\u5927\u5339\u914d\uff0c\u5c31\u662f\u628a\u6bcf\u884c\u548c\u6bcf\u5217\u5339\u914d\u8d77\u6765\u3002\n\n\u8fd9\u9053\u9898\u5b58\u5728\u201c\u786c\u77f3\u5934\u201d\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5e94\u5f53\u6362\u4e2a\u89d2\u5ea6\u3002\u8003\u8651\u201c\u884c\u6bb5\u201d\u548c\u201c\u5217\u6bb5\u201d\u3002\u4e00\u4e2a\u884c\u6bb5\u5373\u5728\u540c\u4e00\u884c\u7684\u8fde\u7eed\u7684\u6ca1\u6709\u786c\u77f3\u5934\u7684\u6bb5\uff0c\u5217\u6bb5\u540c\u7406\u3002\u663e\u7136\u5e94\u5f53\u6ee1\u8db3\u6bcf\u4e2a\u884c\u6bb5\u548c\u5217\u6bb5\u6700\u591a\u653e\u4e00\u4e2a\u70b8\u5f39\u3002\n\n\u8fd9\u65f6\u5019\u8003\u8651\u5728\u4e00\u4e2a\u70b9\u653e\u7f6e\u70b8\u5f39\uff0c\u4f1a **\u540c\u65f6** \u5f71\u54cd\u4e00\u4e2a\u884c\u6bb5\u548c\u4e00\u4e2a\u5217\u6bb5\u3002\u6240\u4ee5\u5728\u884c\u6bb5\u4e0e\u5217\u6bb5\u95f4\u8fde\u8fb9\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u91cc\u884c\u6bb5\u4e0e\u5217\u6bb5\u7684\u8fde\u8fb9\u5b9e\u8d28\u4e0a\u8868\u793a\u7684\u662f\u5728\u56fe\u4e2d\u653e\u70b8\u5f39\u7684\u70b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans;\nint h[10001],nxt[50001],t[50001],cnt,cnta,cntb;\nbool visit[10001];\nint v[10001];\nint ta[51][51],tb[51][51];\nchar a[51][51];\nvoid col(int flag,int x,int l,int r)\n{\n\tif (l>r) return;\n\tif (flag==0)\n\t{\n\t\tcnta++;\n\t\tfor (int i=l;i<=r;i++) ta[x][i]=cnta;\n\t}\n\telse\n\t{\n\t\tcntb++;\n\t\tfor (int i=l;i<=r;i++) tb[i][x]=cntb;\n\t}\n}\nbool dfs(int x)\n{\n\tfor (int i=h[x];i;i=nxt[i])\n\t{\n\t\tif (!visit[t[i]])\n\t\t{\n\t\t\tvisit[t[i]]=1;\n\t\t\tif (v[t[i]]==0||dfs(v[t[i]]))\n\t\t\t{\n\t\t\t\tv[t[i]]=x;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nvoid add(int x,int y)\n{\n\tt[++cnt]=y;\n\tnxt[cnt]=h[x];\n\th[x]=cnt;\n}\nint main()\n{\n\tcin >> n >> m;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=m;j++) \n\t\t{\n\t\t\tcin >> a[i][j];\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint last=1;\n\t\tfor (int j=1;j<=m;j++)\n\t\t{\n\t\t\tif (a[i][j]=='#') \n\t\t\t{\n\t\t\t\tcol(0,i,last,j-1);\n\t\t\t\tlast=j+1;\n\t\t\t}\n\t\t}\n\t\tcol(0,i,last,m);\n\t}\n\tfor (int j=1;j<=m;j++)\n\t{\n\t\tint last=1;\n\t\tfor (int i=1;i<=n;i++)\n\t\t{\n\t\t\tif (a[i][j]=='#') \n\t\t\t{\n\t\t\t\tcol(1,j,last,i-1);\n\t\t\t\tlast=i+1;\n\t\t\t}\n\t\t}\n\t\tcol(1,j,last,n);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=n;j++)\n\t\t{\n\t\t\tif (a[i][j]=='#'||a[i][j]=='x') continue;\n\t\t\tadd(ta[i][j],tb[i][j]);\n\t\t}\n\t}\n\tfor (int i=1;i<=cnta;i++)\n\t{\n\t\tmemset(visit,0,sizeof(visit));\n\t\tif (dfs(i)) ans++;\n\t}\n\tcout << ans;\n    return 0;\n}\n```\n\n\u53ef\u80fd\u7531\u4e8e\u8bc4\u6d4b\u673a\u53d8\u5feb\u7684\u7f18\u6545\uff0c\u8fd9\u4efd\u7528 cin \u8bfb\u5165\u53c8\u6ca1\u5f00 O2 \u7684\u4ee3\u7801\u6210\u4e86\u76ee\u524d\u672c\u9898\u7684\u6700\u4f18\u89e3\u3002\n",
        "postTime": 1604061713,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u597d\u9898\uff0c\u6211\u5c06\u8be6\u7ec6\u7684\u89e3\u91ca\u5982\u4f55\u60f3\u5230\u4f7f\u7528\u4e8c\u5206\u56fe\u5230\u5982\u4f55\u628a\u6b64\u9898\u8f6c\u5316\u4e3a\u666e\u904d\u7684\u4e8c\u5206\u56fe\n\u6700\u5927\u5339\u914d\u6c42\u6cd5\u3002\u5c42\u5c42\u63a8\u8fdb\uff0c\u642d\u5efa\u601d\u7ef4\u4f53\u7cfb\u3002\n\n\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u534f\u5546\u7684\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u8bf4\u7b97\u6cd5\u6d41\u7a0b\u4e86\u3002\n\u9996\u5148\u8003\u8651\u5982\u679c\u6ca1\u6709\u786c\u77f3\u5934\uff0c\u53ea\u6709\u8f6f\u77f3\u5934\u8fd9\u9898\u8be5\u600e\u4e48\u505a\u3002\n\n\u4e8c\u5206\u56fe\u5339\u914d\u6a21\u578b\u6709\u4e24\u4e2a\u8981\u7d20\uff1a\n\n$0.$ \u8282\u70b9\u80fd\u5206\u6210\u72ec\u7acb\u7684\u4e24\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u5185\u90e8\u67090\u6761\u8fb9\u3002\n\n$1.$ \u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u4e0e $1$ \u6761\u5339\u914d\u8fb9\u76f8\u8fde\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e24\u4e2a\u8981\u7d20\u7b80\u79f0\u4e3a $0$ \u8981\u7d20\u548c $1$ \u8981\u7d20\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u6a2a\u5750\u6807\u770b\u6210\u4e00\u4e2a\u9876\u70b9\u96c6\uff0c\u7eb5\u5750\u6807\u770b\u6210\u4e00\u4e2a\u9876\u70b9\u96c6\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u770b\n\u505a\u6a2a\u5750\u6807\u4e0e\u7eb5\u5750\u6807\u7684\u4e00\u4e2a\u8fde\u8fb9\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u662f\u6a2a\u5750\u6807\u4e0e\u7eb5\u5750\u6807\u4e4b\u95f4\u7684\uff0c\u9876\u70b9\u96c6\u5185\u6ca1\u6709\n\u8fb9\u3002\u6ee1\u8db3 $0$ \u8981\u7d20\u3002\u4e00\u4e2a\u70b9\u7684\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u4e4b\u95f4\u6709\u5339\u914d\u8fb9\u5c31\u610f\u5473\u7740\u9009\u4e2d\u8fd9\u4e2a\u70b9\uff0c\n\u540c\u4e00\u884c/\u540c\u4e00\u5217\u4e0d\u80fd\u51fa\u73b0\u4e24\u4e2a\u70b8\u5f39\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u51fa\u73b0\u4e00\u4e2a\u6a2a\u5750\u6807\u5bf9\u5e94\u4e24\u4e2a\u7eb5\u5750\u6807\u6216\u4e00\n\u4e2a\u7eb5\u5750\u6807\u5bf9\u5e94\u4e24\u4e2a\u6a2a\u5750\u6807\uff0c\u6ee1\u8db3 $1$ \u8981\u7d20\u3002\u6240\u4ee5\u8fd9\u4e2a\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\n\u5339\u914d\u3002\u8f6f\u77f3\u5934\u6240\u5728\u7684\u70b9\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u4e4b\u95f4\u4e0d\u8fde\u8fb9\u5c31\u884c\uff0c\u610f\u5473\u7740\u4e0d\u80fd\u9009\u8fd9\u4e2a\u70b9\u3002\u6709\u8fde\n\u8fb9\u610f\u5473\u7740\u53ef\u4ee5\u9009\u8fd9\u4e2a\u70b9\uff0c\u4f46\u5339\u914d\u8fb9\u624d\u662f\u771f\u6b63\u9009\u7684\u4e86\u70b9\u3002\u5176\u4ed6\u5c31\u662f\u6a21\u677f\u3002\n\n\u8fd9\u4e2a\u9898\u6709\u4e86\u786c\u77f3\u5934\uff0c\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n**\u5efa\u7acb\u4e8c\u5206\u56fe**\u662f\u672c\u9898\u7684\u6838\u5fc3\uff0c\u56fe\u5efa\u597d\u4e86\uff0c\u5269\u4e0b\u7684\u4e5f\u90fd\u662f\u6a21\u677f\u3002\n\n\u8003\u8651\u6211\u4eec\u4e4b\u524d\u8bf4\u7684 $0$ \u8981\u7d20\u548c $1$ \u8981\u7d20\uff0c\u7531\u4e8e\u8fd9\u91cc\u51fa\u73b0\u4e86\u786c\u77f3\u5934\uff0c\u53ef\u80fd\u4f1a\u628a\u67d0\u4e00\u884c\n\u5206\u6210\u82e5\u5e72\u4e2a\u90e8\u5206\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5c31\u662f\u4e24\u90e8\u5206\uff0c\u90a3\u5982\u679c\u6211\u4eec\u8fd8\u662f\u6309\u7167\u4e4b\u524d\u7684\u5efa\u56fe\u65b9\u5f0f\uff0c\n\u8fd8\u6ee1\u8db3 $0$ \u8981\u7d20\u548c $1$ \u8981\u7d20\u5417\uff1f\u53ea\u6709\u6ee1\u8db3 $0$ \u8981\u7d20\u548c $1$ \u8981\u7d20\u6211\u4eec\u624d\u80fd\u8f6c\u5316\u4e3a\n\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u3002\u663e\u7136\uff0c\u8981\u7d20 $1$ \u662f\u4e0d\u6ee1\u8db3\u7684\uff0c\u56e0\u4e3a\u6709\u4e86\u786c\u77f3\u5934\u963b\u6321\u5728\u4e00\u884c\u7684\u4e2d\n\u95f4\uff0c\u6211\u4eec\u5728\u4e24\u8fb9\u53ef\u4ee5\u5404\u653e\u4e00\u4e2a\u70b8\u5f39\u3002\u8fd9\u6837\u4e00\u4e2a\u6a2a\u5750\u6807\u53ef\u4ee5\u5339\u914d\u4e24\u4e2a\u7eb5\u5750\u6807\u4e86\u3002\u4f46\u8fd9\u663e\n\u7136\u4e0d\u7b26\u5408\u6211\u4eec\u4e8c\u5206\u56fe\u6c42\u6700\u5927\u5339\u914d\u7684\u524d\u63d0\u3002\u5176\u5b9e\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u4e24\u4e2a\u70b9\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\n\u5176\u4e2d\u6709\u4e00\u4e2a\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5c31\u4e0d\u80fd\u540c\u65f6\u9009\u3002\u5fc5\u987b\u6a2a\u7eb5\u5750\u6807\u90fd\u4e0d\u76f8\u540c\u624d\u80fd\u540c\u65f6\n\u9009\uff0c\u6309\u539f\u59cb\u7684\u5efa\u56fe\u65b9\u5f0f\u8fdd\u80cc\u4e86\u9898\u610f\u3002\u90a3\u6211\u4eec\u600e\u4e48\u628a\u5b83\u8f6c\u5316\u5462\uff1f\u53ef\u4ee5\u8003\u8651\u67d3\u8272\u6cd5\uff0c\u4ee5#\u4e3a\u5206\u754c\u7ebf\u67d3\u8272\uff0c\u7c7b\u4f3c\u4e8etarjan\u7f29\u70b9\u3002\u628a\u4e00\u6bb5\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\u8fd9\u6837\uff0c\u7ed9\u6bcf\u4e00\u6bb5\u8d4b\u4e88\n\u65b0\u7684\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\uff08\u8be6\u89c1\u4ee3\u7801\uff09\u540e\uff0c\u5c31\u6ee1\u8db3\u4e86\u8981\u7d20 $1$ \u3002\u8fd9\u4e00\u6bb5\u8bf7\u52a1\u5fc5\u81ea\u5df1\u753b\u56fe\u7406\u89e3\u3002\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m;\nstruct node{\n\tint nxt,to;\n}edge[3600];\nint head[3600],vis[3600],match[3600];\nint x1[60][60],y1[60][60];//\u8bb0\u5f55\u6bcf\u4e2a\u65b0\u70b9\u7684\u65b0\u7684\u6a2a\u7eb5\u5750\u6807\uff0c\u5176\u5b9e\u4e25\u683c\u610f\u4e49\u4e0a\u4e0d\u662f\u6a2a\u7eb5\uff0c\u5c31\u662f\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u7684\u3002 \nchar a[60][60];\nint ans,idx,tot;\nvoid add(int u,int v)\n{\n\tedge[++idx].nxt=head[u];\n\tedge[idx].to=v;\n\thead[u]=idx;\n}\nint dfs(int x)\n{\n\tfor(int i=head[x];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(!vis[v])\n\t\t{\n\t\t\tvis[v]=1;\n\t\t\tif(!match[v]||dfs(match[v]))\n\t\t\t{\n\t\t\t\tmatch[v]=x;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tscanf(\" %c\",&a[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(a[i][j]=='#')\n\t\t\tcontinue;\n\t\t\tif(j==1||a[i][j-1]=='#') \n\t\t\ttot++;\n\t\t\tx1[i][j]=tot;\n\t\t}\n\t}\n\tfor(int j=1;j<=m;j++)\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(a[i][j]=='#')\n\t\t\tcontinue;\n\t\t\tif(i==1||a[i-1][j]=='#') \n\t\t\ttot++;\n\t\t\ty1[i][j]=tot;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(a[i][j]!='*')\n\t\t\tcontinue;\n\t\t\tadd(x1[i][j],y1[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tans+=dfs(i);\n\t}\n\tcout<<ans;\n\treturn 0;\n}",
        "postTime": 1597400869,
        "uid": 250699,
        "name": "Herkaii",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "# \u4e8c\u5206\u56fe\u5339\u914d\n\n\u8fd9\u9053\u9898\u7528\u4e8c\u5206\u56fe\u505a\u5c0f\u6709\u96be\u5ea6\uff0c\u4f46\u8fd9\u79cd\u68cb\u76d8\u95ee\u9898\u505a\u591a\u4e86\u6709\u70b9\u5957\u8def\n\n\u5148\u6765\u770b\u53e6\u4e00\u9053\u76f8\u4f3c\u7684\u9898\n\n**[acwing373\u8f66\u7684\u653e\u7f6e](https://www.acwing.com/problem/content/375/)**\n\n**\u9898\u9762**\n\n\u7ed9\u5b9a\u4e00\u4e2aN\u884cM\u5217\u7684\u68cb\u76d8\uff0c\u5df2\u77e5\u67d0\u4e9b\u683c\u5b50\u7981\u6b62\u653e\u7f6e\u3002\n\n\u95ee\u68cb\u76d8\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\u7684\u8eca\u3002\n\n\u8eca\u653e\u5728\u683c\u5b50\u91cc\uff0c\u653b\u51fb\u8303\u56f4\u4e0e\u4e2d\u56fd\u8c61\u68cb\u7684\u201c\u8eca\u201d\u4e00\u81f4\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570N,M,T\uff0c\u5176\u4e2dT\u8868\u793a\u7981\u6b62\u653e\u7f6e\u7684\u683c\u5b50\u7684\u6570\u91cf\u3002\n\n\u63a5\u4e0b\u6765T\u884c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u8868\u793a\u4f4d\u4e8e\u7b2cx\u884c\u7b2cy\u5217\u7684\u683c\u5b50\u7981\u6b62\u653e\u7f6e\uff0c\u884c\u5217\u6570\u4ece1\u5f00\u59cb\u3002\n\n**\u8f93\u51fa\u683c\u5f0f**\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7ed3\u679c\u3002\n\n\u6570\u636e\u8303\u56f4\n1\u2264N,M\u2264200\n\n**\u8f93\u5165\u6837\u4f8b\uff1a**\n\n8 8 0\n\n**\u8f93\u51fa\u6837\u4f8b\uff1a**\n\n8\n\n**solution**\n\n\u8001\u5e08\u8bb2\u4e8c\u5206\u56fe\u5339\u914d\u65f6\uff0c\u6709\u8ddf\u6211\u4eec\u5f3a\u8c03\u8fd9\u6837\u4e00\u70b9\n\n**\u5224\u65ad\u4e00\u9053\u9898\u76ee\u53ef\u4e0d\u53ef\u4ee5\u7528\u4e8c\u5206\u56fe\u5339\u914d\u505a\uff0c\u9700\u8981\u5173\u6ce8\u201c0\u201d\u7684\u6761\u4ef6\u548c\u201c1\u201d\u7684\u6761\u4ef6**\n\n\u4ec0\u4e48\u610f\u601d\uff1f\u6211\u5927\u6982\u8fd9\u4e48\u7406\u89e3\n\n\u6307\u6709**\u4e24\u79cd\u6709\u5bf9\u5e94\u5173\u7cfb\u7684\u91cf**\uff0c **\u4ed6\u4eec\u90fd\u53ea\u80fd\u53d6\u4e00\u6b21**\u3002\u5bf9\u5e94\u5728\u8fd9\u9053\u9898\uff0c\u5c31\u662f\uff0c\u6211\u4eec\u53d6\u4e00\u884c\uff0c\u4e00\u5217\uff0c\u6765\u786e\u5b9a\u4e00\u4e2a\u8f66\u7684\u4f4d\u7f6e\uff0c\u53d6\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e00\u884c\u548c\u8fd9\u4e00\u5217\uff0c\u5c31\u90fd\u4e0d\u80fd\u518d\u53d6\u4e86\uff0c\u8fd9\u5c31\u7ffb\u8bd1\u4e86\u201c\u8f66\u4e0d\u80fd\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u201d\u7684\u6761\u4ef6\n\n\u5f53\u6211\u4eec\u627e\u5230\u4e86\u8fd9\u4e24\u79cd\u5177\u6709\u5bf9\u5e94\u5173\u7cfb\u7684\u91cf\uff0c\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7528\u4ed6\u4eec\u5efa\u7acb\u8d77\u4e00\u4e2a\u4e8c\u5206\u56fe\u6a21\u578b\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6709\u4e86\u4e0a\u9762\u7684\u5206\u6790\uff0c\u4e0d\u96be\u60f3\u5230\uff0c**\u5efa\u7acb\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u628a\u5217\u4e0e\u884c\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u5c06\u90a3\u4e9b\u80fd\u653e\u8f66\u7684\u70b9\u7684\u884c\uff0c\u5217\u5750\u6807\uff0c\u5728\u5de6\u53f3\u4e24\u8fb9\u8fde\u8d77\u6765**\n\n\u6b64\u65f6\u518d\u7528\u5308\u7259\u5229\u6c42\u89e3\uff0c\u5c31\u5f88\u663e\u7136\u4e86\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int maxn=205;\nint n,m,ans,t;\nint cnt,head[maxn],to[maxn*maxn],nex[maxn*maxn];\nint match[maxn*maxn],p[maxn*maxn];\nint blo[maxn][maxn];\nvoid add(int x,int y)\n{\n\tto[++cnt]=y;\n\tnex[cnt]=head[x];\n\thead[x]=cnt;\n}\nint dfs(int u)\n{\n\tfor(int i=head[u];i;i=nex[i])\n\t{\n\t\tint v=to[i];\n\t\tif(p[v]==1)continue;\n\t\tp[v]=1;\n\t\tif(!match[v]||dfs(match[v]))\n\t\t{\n\t\t\tmatch[v]=u;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin>>n>>m>>t;\n\twhile(t--)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tblo[x][y]=blo[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(!blo[i][j])add(i,n+j);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmemset(p,0,sizeof(p));\n\t\tans+=dfs(i);\n\t}\n\tcout<<ans;\n}\n```\n\u518d\u56de\u5230\u8fd9\u9053\u9898\uff0c\u597d\u50cf\u9664\u4e86\u591a\u4e86\u786c\u77f3\u5934\uff0c\u5c31\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u4e86\n\n\u5982\u4f55\u89e3\u51b3\u5462\uff1f\uff1f\uff1f\n\n\u6211\u4eec\u7684\u786c\u77f3\u5934\u6253\u65ad\u4e86\u539f\u6765\u6b63\u5e38\u53ef\u4ee5\u70b8\u5f97\u7cbe\u5149\u7684\u884c\u548c\u5217\uff0c\u90a3\u6211\u4eec\u5c31\u5e72\u8106**\u628a\u8fd9\u4e9b\u5206\u88c2\u51fa\u6765\u7684\u6781\u957f\u884c\uff0c\u5217\u62c6\u51fa\u6765\uff0c\u5b58\u8fdb\u7ed3\u6784\u4f53\u6570\u7ec4\u91cc\uff0c\u5e76\u91cd\u65b0\u7f16\u53f7\uff0c\u5728\u679a\u4e3e\u62c6\u51fa\u6765\u7684\u4efb\u610f\u884c\uff0c\u5217\uff0c\u5c06\u80fd\u9999\u8549\u7684\u7ec4\u90fd\u5728\u4e8c\u5206\u56fe\u4e2d\u5efa\u4e2a\u8fb9**\n\n\u7136\u540e\u5c31\u505avan\u4e86\uff1a\uff09\n\n\u5177\u4f53\u5eb7\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=55;\nint n,m,ans,tot1,tot2;\nchar ch[maxn][maxn];\nstring str;\nstruct node\n{\n\tint d,x,y;\n}a1[maxn*maxn],a2[maxn*maxn];\nint cnt,head[maxn*maxn],to[maxn*maxn*4],nex[maxn*maxn*4];\nint p[maxn*maxn],match[maxn*maxn];\nbool vis[maxn][maxn];\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')w=-1;ch=getchar();}\n\twhile(isdigit(ch)){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nvoid add(int x,int y)\n{\n\tto[++cnt]=y;\n\tnex[cnt]=head[x];\n\thead[x]=cnt;\n}\nbool dfs(int u)\n{\n\tfor(int i=head[u];i;i=nex[i])\n\t{\n\t\tint v=to[i];\n\t\tif(p[v])continue;\n\t\tp[v]=1;\n\t\tif(!match[v]||dfs(match[v])==true)\n\t\t{\n\t\t\tmatch[v]=u;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>str;\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tch[i][j]=str[j-1];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(vis[i][j])continue;\n\t\t\tif(ch[i][j]!='*')continue;\n\t\t\tint ex1=i,ex2=i;\n\t\t\tint ey1=j,ey2=j;\n\t\t\twhile(ex1>1&&ch[ex1-1][j]!='#')\n\t\t\t\tex1--;\n\t\t\twhile(ex2<n&&ch[ex2+1][j]!='#')\n\t\t\t\tex2++;\n\t\t\tfor(int k=ex1;k<=ex2;k++)\n\t\t\t\tvis[k][j]=1;\n\t\t\ta1[++tot1]=node{j,ex1,ex2};\n\t\t}\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(vis[i][j])continue;\n\t\t\tif(ch[i][j]!='*')continue;\n\t\t\tint ex1=i,ex2=i;\n\t\t\tint ey1=j,ey2=j;\n\t\t\twhile(ey1>1&&ch[i][ey1-1]!='#')\n\t\t\t\tey1--;\n\t\t\twhile(ey2<m&&ch[i][ey2+1]!='#')\n\t\t\t\tey2++;\n\t\t\tfor(int k=ey1;k<=ey2;k++)\n\t\t\t\tvis[i][k]=1;\n\t\t\ta2[++tot2]=node{i,ey1,ey2};\n\t\t}\n\t}\n/*\tcout<<\"()()()()()()()()()lie\"<<endl;\n\tfor(int i=1;i<=tot1;i++)\n\t\tcout<<a1[i].d<<' '<<a1[i].x<<' '<<a1[i].y<<endl;\n\tcout<<\"()()()()()()()()()hang\"<<endl;\n\tfor(int i=1;i<=tot2;i++)\n\t\tcout<<a2[i].d<<' '<<a2[i].x<<' '<<a2[i].y<<endl;*/\n\tfor(int i=1;i<=tot1;i++)\n\t\tfor(int j=1;j<=tot2;j++)\n\t\t\tif(a1[i].x<=a2[j].d&&a1[i].y>=a2[j].d&&a2[j].x<=a1[i].d&&a2[j].y>=a1[i].d)\n\t\t\t{\n\t\t\t\tif(ch[a2[j].d][a1[i].d]=='x')\n\t\t\t\t{\n\t\t\t\t//\tcout<<\"!!!\"<<endl;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tadd(i,j+tot1);\n\t\t\t//\tcout<<\"** \"<<i<<' '<<j<<endl;\n\t\t\t}\n\tfor(int i=1;i<=tot1;i++)\n\t{\n\t\tmemset(p,0,sizeof(p));\n\t\tans+=dfs(i);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n/*\ninput: \n5 5\n**#*x\n*#xx*\n****#\n**#*x\nx****\n\noutput:\n7\n*/\n```\n",
        "postTime": 1579615650,
        "uid": 99643,
        "name": "\u9648\u5200\u4ed4",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u597d\u5427\u8fd9\u662f\u7f51\u7edc\u6d41\u7684\u53e6\u4e00\u79cd\u5efa\u56fe\u65b9\u5f0f\n\n\u7f51\u7edc\u6d41\u662f\u53ef\u4ee5\u63cf\u8ff0\u4e92\u65a5\u5173\u7cfb\u7684\n\n\u8fd9\u5f20\u7f51\u683c\u56fe\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u7cfb\u5217\u884c\u5757\u548c\u5217\u5757\n\n\u5217\u5757\u548c\u884c\u5757\u5c31\u662f\u8bf4,\u8fd9\u4e00\u4e2a\u6a2a\u884c\u5757\u6216\u7eb5\u5217\u5757\u91cc\u81f3\u591a\u653e\u4e00\u4e2a\u70b8\u5f39\n\n\u53e6\u5916\u663e\u800c\u6613\u89c1\u7684,\u6211\u4eec\u53d1\u73b0\u9009\u4e2d\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u4f1a\u540c\u65f6\u9009\u4e2d\u4e24\u4e2a\u5757\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u8fd9\u5f20\u56fe\u6ee1\u8db3\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\n\n1.\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u9009\u4e2d\u4e00\u6b21\n\n2.\u67d0\u4e9b\u70b9\u5bf9\u4e4b\u95f4\u6709\u5fc5\u9009\u5173\u7cfb\n\n\u8fd9\u4e24\u4e2a\u9650\u5236\u4e0b,\u6700\u5927\u5316\u9009\u7684\u70b9\u5bf9\u6570,\u5c31\u662f\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u4e86\n\n\u7136\u540e\u5efa\u56fe\u7684\u65f6\u5019,\u628a\u884c\u5757\u548c\u5217\u5757\u67d3\u4e0a\u8272,\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e86\u4e00\u6761\u8fb9,\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d,\u76f4\u63a5\u7f51\u7edc\u6d41\u5373\u53ef\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nchar map[60][60];int n;int m;\nint rcnt=1;int lcnt=1;\nint row[60][60];int line[60][60];\nstruct data{int v;int nxt;int cot;}edge[20010];\nint alist[5010];int cnt=1;int s;int t;\ninline void add(int u,int v,int cot)\n{\n\tedge[++cnt].v=v;edge[cnt].nxt=alist[u];alist[u]=cnt;edge[cnt].cot=cot;\n\tedge[++cnt].v=u;edge[cnt].nxt=alist[v];alist[v]=cnt;edge[cnt].cot=0;\n}\nint dep[5010];int flow;bool book[5010];queue <int> q;\ninline void bfs()//\u7f51\u7edc\u6d41\u677f\u5b50\u5566\u5566\u5566~ \n{\n\tfor(int i=1;i<=rcnt+lcnt+2;i++){dep[i]=0;book[i]=false;}\n\tdep[s]=1;q.push(s);book[s]=true;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();q.pop();\n\t\tint nxt=alist[now];\n\t\twhile(nxt)\n\t\t{\n\t\t\tint v=edge[nxt].v;\n\t\t\tint cot=edge[nxt].cot;\n\t\t\tif(cot!=0&&book[v]==false)\n\t\t\t{dep[v]=dep[now]+1;book[v]=true;q.push(v);}\n\t\t\tnxt=edge[nxt].nxt;\n\t\t}\n\t}\n}\ninline int dfs(int x,int lim)//\u4e0d\u4f1a\u677f\u5b50\u7684\u8bdd\u8fd8\u662f\u5148\u95ee\u5ea6\u5a18\u597d\u54af \n{\n\tif(x==t)return lim;int nxt=alist[x];\n\twhile(nxt)\n\t{\n\t\tint v=edge[nxt].v;int cot=edge[nxt].cot;\n\t\tif(dep[v]==dep[x]+1&&cot!=0)\n\t\t{\n\t\t\tint del=dfs(v,min(lim,cot));\n\t\t\tif(del!=0)\n\t\t\t{edge[nxt].cot-=del;edge[nxt^1].cot+=del;return del;}\n\t\t}nxt=edge[nxt].nxt;\n\t}return 0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){scanf(\"%s\",map[i]+1);}\n\tfor(int i=0;i<=n;i++){map[i][0]='#';}//\u8fd9\u91cc\u5148\u8bbe\u7f6e\u597d\u5899 \n\tfor(int i=1;i<=m;i++){map[0][i]='#';}\n\tfor(int i=1;i<=n;i++)//\u4e71\u4e03\u516b\u7cdf\u7684n^2\u67d3\u8272\u6cd5 \n\t{\n\t\tbool flag=false;\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(map[i][j]=='*'){row[i][j]=rcnt;flag=true;}\n\t\t\tif(map[i][j]=='#'&&map[i][j-1]!='#'){rcnt++;flag=false;}\n\t\t}if(flag)rcnt++;//\u8fd9\u91cc\u662f\u4fdd\u8bc1\u6bcf\u4e2a\u7f16\u53f7\u90fd\u80fd\u7528\u5230 \n\t}\n\tfor(int j=1;j<=m;j++)\n\t{\n\t\tbool flag=false;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(map[i][j]=='*'){line[i][j]=lcnt;flag=true;}\n\t\t\tif(map[i][j]=='#'&&map[i-1][j]!='#'){lcnt++;flag=false;}\n\t\t}if(flag)lcnt++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(map[i][j]=='*')//\u6bcf\u4e2a\u7a7a\u5730\u90fd\u662f\u4e00\u6761\u8fb9 \n\t\t\t{add(row[i][j],rcnt+line[i][j],1);}\n\t\t}\n\t}\n\ts=rcnt+lcnt+1;t=rcnt+lcnt+2;\n\tfor(int i=1;i<=rcnt;i++){add(s,i,1);}//\u6109\u5feb\u7684\u8dd1\u6700\u5927\u5339\u914d \n\tfor(int i=1;i<=lcnt;i++){add(rcnt+i,t,1);}\n\tbfs();\n\twhile(book[t])\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tint p=dfs(s,0x3f3f3f);if(p==0)break;flow+=p;\n\t\t}bfs();\n\t}\n\tprintf(\"%d\\n\",flow);\n\treturn 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n",
        "postTime": 1517630016,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "[\u849f\u84bb\u7684\u535a\u5ba2](http://www.cnblogs.com/Mr-WolframsMgcBox/)\n\n##\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5308\u7259\u5229\u7b97\u6cd5\n\n\u8fd9\u9053\u9898\uff0c\u5982\u679c\u6ca1\u6709\u786c\u77f3\u5934\u7684\u9650\u5236\uff0c\u90a3\u4e48\u5c31\u4e0e[ZJOI 2007\u77e9\u9635\u6e38\u620f](https://www.luogu.org/problemnew/show/1129)\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u662f\u5982\u679c\u6709\u4e86\u786c\u77f3\u5934\u7684\u9650\u5236\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u5c06\u6574\u884c\u6574\u5217\u4f5c\u4e3a\u5143\u7d20\u5efa\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u786c\u77f3\u5934\u4e3a\u8fb9\u754c\uff0c\u5c06\u6bcf\u4e00\u884c\u3001\u6bcf\u4e00\u5217\u5206\u6210\u82e5\u5e72\u6bb5\u5efa\u56fe\uff0c\u7136\u540e\u8dd1\u4e8c\u5206\u56fe\u5339\u914d\u5373\u53ef\u3002\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nint init(){\n    int rv=0,fh=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-') fh=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        rv=(rv<<1)+(rv<<3)+c-'0';\n        c=getchar();\n    }\n    return rv*fh;\n}\nint m,n,tot=1,tag1[55][55],tag2[55][55],g[2505][1000],match[10505];\nchar dt[55][55];\nbool f[2505];\nbool hungarian(int u){\n    for(int i=1;i<=g[u][0];i++){\n        int v=g[u][i];\n        if(!f[v]){\n            f[v]=1;\n            if(!match[v]||hungarian(match[v])){\n                match[v]=u;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\nint main(){\n    n=init();m=init();\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            scanf(\" %c \",&dt[i][j]);\n        }\n    }\n    for(int i=1;i<=n;i++){\n        int j=1;\n        while(j<=m){\n            if(dt[i][j]=='#') {if(j!=1)  tot++;}\n            else tag1[i][j]=tot;\n            j++;\n        }\n        tot++;\n    }\n    int ma=tot-1;\n    for(int j=1;j<=m;j++){\n        int i=1;\n        while(i<=n){\n            if(dt[i][j]=='#') {if(i!=-1) tot++;}\n            else tag2[i][j]=tot;\n            i++;\n        }\n        tot++;\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(dt[i][j]=='*'){\n                int a=tag1[i][j],b=tag2[i][j];\n                g[a][++g[a][0]]=b;\n            }\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=ma;i++){\n        memset(f,0,sizeof(f));\n        if(hungarian(i)) ans++;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1515677581,
        "uid": 45753,
        "name": "Mr_Wolfram",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u601d\u8def\u540c\u4e0b\uff0c\u7528\u7684\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u4ee3\u7801\u5b9e\u73b0\u7528\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u66f4\u7b80\u6d01\u4e00\u70b9\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m,cnt1,cnt2;\nchar map[60][60];\nint G[2505][2505],row[60][60],col[60][60];\nint vis[2505],match[2505];\nbool dfs(int u)\n{\n    for(int v=1;v<=cnt2;v++)\n    {\n        if(G[u][v]&&!vis[v])\n        {\n            vis[v]=1;\n            if(!match[v]||dfs(match[v]))\n            {\n                match[v]=u;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            cin>>map[i][j];\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            if(j==1||map[i][j-1]=='#')\n                cnt1++;\n            row[i][j]=cnt1;\n        }\n    for(int i=1;i<=m;i++)\n        for(int j=1;j<=n;j++)\n        {\n            if(j==1||map[j-1][i]=='#')\n                cnt2++;\n            col[j][i]=cnt2;\n        }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(map[i][j]=='*')\n                G[row[i][j]][col[i][j]]=1;\n    int ans=0;\n    for(int i=1;i<=cnt1;i++)\n    {\n        memset(vis,0,sizeof(vis));\n        if(dfs(i))\n            ans++;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1503372344,
        "uid": 28703,
        "name": "misaka0111",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u6700\u5927\u72ec\u7acb\u96c6?\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4$O(3^{\\frac{V}{3}})$,\u6216\u8005$O(V2^{\\frac{V}{2}})$\u7684\u4e00\u822c\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u7b97\u6cd5\u90fd\u662f\u4e0d\u53ef\u80fd\u8fc7\u7684.  \n\n-----\n\n~~\u4f5c\u4e3a\u5f31\u667a\u9009\u624b,\u9047\u5230\u8fd9\u79cd\u4e8c\u7ef4\u7f51\u683c\u4e0a\u7684\u6700\u4f18\u5316\u95ee\u9898,\u80af\u5b9a\u5148\u9ed1\u767d\u67d3\u8272\u4e00\u53d1(bushi),\u7136\u540e\u94a6\u5b9a\u5b83\u662f\u4e8c\u5206\u56fe\u5199dinic\u6c42\u6700\u5927\u6d41~~  \n\n\n### insight\n\u5bf9\u4e8e\u6a2a\u5411/\u7eb5\u5411\u7684\\[#???#\\]\u8fd9\u6837\u7684$1\\times k,k\\times 1$\u7684\u90e8\u5206,\u53ea\u80fd\u653e\u4e00\u4e2a(\u4e24\u7aef\u8981\u4e48\u662f#,\u8981\u4e48\u662f\u8fb9\u754c,\u5185\u90e8\u53ea\u5141\u8bb8\\*\u548cx)  \n\n### sol\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u6a2a\u5411\u7684,\u6781\u5927\u7684\u4e0d\u542b#\u7684$1\\times k$\u77e9\u5f62,\u5982\u679c\u5728\u5176\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e$i$\u9009\u62e9\u653e\u70b8\u5f39,\u90a3\u4e48$i$\u6240\u5728\u7684\u7eb5\u5411\u7684,\u6781\u5927\u4e0d\u542b#\u7684\u77e9\u5f62\u4e2d\u662f\u4e0d\u80fd\u653e\u70b8\u5f39\u7684.  \n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3,\u5bf9\u4e8e\u6240\u6709\u6a2a\u5411,\u7eb5\u5411\u7684\u6781\u5927\u4e0d\u542b#\u7684\u533a\u95f4,\u5206\u522b\u8bb0\u4e3a\u96c6\u5408$A,B$.\u653e\u4e00\u4e2a\u70b8\u5f39,\u5c31\u662f\u9009\u4e00\u4e2a\u4f4d\u7f6e$(i,j)$,\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6.\n\n- $(i,j)$\u5bf9\u5e94\u4e00\u4e2a*\n- A\u4e2d\u5b58\u5728\u4e00\u4e2a\u5305\u542b$(i,j)$\u7684\u6a2a\u5411\u6846\u6846.\n- B\u4e2d\u5b58\u5728\u4e00\u4e2a\u5305\u542b$(i,j)$\u7684\u7eb5\u5411\u6846\u6846.\n\n\u8003\u8651\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848,\u5728$(x_1,y_1),(x_2,y_2)\\dots (x_k,y_k)$\u653e\u7f6e\u4e86\u70b8\u5f39.  \n\u6bcf\u4e2a\u70b8\u5f39,\u5206\u522b\u5728$A,B$\u4e2d\u9009\u53d6\u4e86$a_i,b_j$.\u90a3\u4e48\u4efb\u610f\u4e00\u4e2a$a_i$,\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21,\u4efb\u610f\u4e00\u4e2a$b_j$\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21.\u8fd9\u975e\u5e38\u50cf\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5408\u6cd5\u65b9\u6848.  \n\n\u6211\u4eec\u8003\u8651\u628aA\u4e2d\u6240\u6709\u5143\u7d20$a_1,a_2\\dots $,\u653e\u5728\u5de6\u4fa7;B\u4e2d\u6240\u6709\u5143\u7d20$b_1,b_2\\dots $,\u653e\u5728\u53f3\u4fa7.  \n\u5bf9\u4e8e$a_i\\cap b_j=(x,y)$\u4e14(x,y)\u662f\\*\u7684,\u6211\u4eec\u8fde$(a_i,b_j)$.\u90a3\u4e48\u6240\u6709\u5408\u6cd5\u70b8\u5f39\u653e\u7f6e\u65b9\u5f0f\u4e0e\u4e8c\u5206\u56fe\u5408\u6cd5\u5339\u914d\u65b9\u6848,\u4e00\u4e00\u5bf9\u5e94.  \n\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b,\u6211\u4eec\u9009\u4e00\u4e2a\u6a2a\u5411/\u7eb5\u5411\u7684\u683c\u5b50,\u5c31\u662f\u9009\u4e00\u4e2a\u7206\u70b8\u8303\u56f4,\u8fd9\u6837\u9009\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u4e0d\u51b2\u7a81\u7684.  \n\u4e8e\u662f,\u6211\u4eec\u6c42\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u5373\u53ef.  \n\n### code\n\n```\n#include <bits/stdc++.h>\nconst int INF=int(1e9);\nnamespace Net{\n\tconst int N=100000+10;\n\tstruct E{ int v,w;\n\t\tE(int a,int b):v(a),w(b){}\n\t}; std::vector<E> es;\n\tstd::vector<int> g[N];\n\tvoid link(int a,int b,int c){\n\t\tg[a].push_back(es.size());\n\t\tes.push_back(E(b,c));\n\t\tg[b].push_back(es.size());\n\t\tes.push_back(E(a,0));\n\t}\n\t\n\tint S,T,vcnt;\n\tint q[N],ql,qr,cur[N],dis[N];\n\tint bfs(){\n\t\tfor(int i=0;i<=vcnt;i++) cur[i]=dis[i]=0;\n\t\tdis[q[ql=0]=S]=1; qr=1; while(ql<qr){\n\t\t\tint u=q[ql++]; for(int i=0;i<g[u].size();i++){\n\t\t\t\tint j=g[u][i],v=es[j].v,w=es[j].w;\n\t\t\t\tif(w>0&&dis[v]==0) dis[q[qr++]=v]=dis[u]+1;\n\t\t\t}\n\t\t}\n\t\treturn dis[T]>0;\n\t}\n\tint dfs(int u,int in){\n\t\tif(u==T||in==0) return in;\n\t\tint flow=0;\n\t\tfor(int &i=cur[u];i<g[u].size();i++){\n\t\t\tint j=g[u][i],v=es[j].v,w=es[j].w;\n\t\t\tif(w>0&&dis[v]==dis[u]+1){\n\t\t\t\tint f=dfs(v,std::min(in,w));\n\t\t\t\tin-=f; flow+=f;\n\t\t\t\tes[j].w-=f; es[j^1].w+=f;\n\t\t\t\tif(in==0) break;\n\t\t\t}\n\t\t}\n\t\tif(in) dis[u]=-N;\n\t\treturn flow;\n\t}\n\tint dinic(){int f=0; while(bfs())f+=dfs(S,INF); return f;}\n}\nconst int N=50+3;\nint n,m; char map[N][N];\nstd::vector<int> row,col;\nstd::vector<int> at[2][N][N];\nint main(){\n\tstd::cin>>n>>m;\n\tfor(int i=1;i<=n;i++) std::cin>>(map[i]+1);\n\n\tint tmp=0;\n\tfor(int i=1;i<=n;i++){ //\u63d0\u53d6\u51fa\u6bcf\u4e00\u884c\u4e2d,\u6a2a\u5411\u7684\u6700\u5927\u4e0d\u542b#\u7684\u533a\u95f4.\n\t\tint l=1,r=1;\n\t\twhile(l<=m){ int cs=0;\n\t\t\twhile(r<=m&&map[i][r]!='#') cs+=('*'==map[i][r++]);\n\t\t\tif(cs>0){ tmp++;\n\t\t\t\tfor(int j=l;j<r;j++) at[0][i][j].push_back(tmp);\n\t\t\t\trow.push_back(tmp);\n\t\t\t}\n\t\t\twhile(r<=m&&map[i][r]=='#') r++; l=r;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){ // \u8fd9\u4ee3\u7801\u5bf9\u79f0\u6027\u5f88\u597d...\u7c7b\u4f3c\u4e0a\u9762,\u8fd9\u91cc\u662f\u63d0\u53d6\u7eb5\u5411\u6781\u5927\u4e0d\u542b#\u533a\u95f4\u7684.\n\t\tint l=1,r=1;\n\t\twhile(l<=n){ int cs=0;\n\t\t\twhile(r<=n&&map[r][i]!='#') cs+=('*'==map[r++][i]);\n\t\t\tif(cs>0){ tmp++;\n\t\t\t\tfor(int j=l;j<r;j++) at[1][j][i].push_back(tmp);\n\t\t\t\tcol.push_back(tmp);\n\t\t\t}\n\t\t\twhile(r<=n&&map[r][i]=='#') r++; l=r;\n\t\t}\n\t}\n\tusing Net::S; using Net::T; using Net::link;\n\tS=0; T=Net::vcnt=++tmp;\n\tfor(int i=0;i<row.size();i++) link(S,row[i],1);\n\tfor(int i=0;i<col.size();i++) link(col[i],T,1);\n\n// \u679a\u4e3e\u6ee1\u8db3map(i,j)='*'\u7684(i,j),\u6211\u4eec\u8fde\u51fa\u8fb9\u6765.\n// \u8fd9\u91cc\u626f\u4e00\u4e0b\u8fb9\u7684\u5bb9\u91cf\u7684\u4e8b\u60c5,\u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7,\u8fd9\u4e2a\u56fe\u4e0a\u7684\u5339\u914d,\u90fd\u662f\u5408\u6cd5\u65b9\u6848,\u800c\u4fdd\u8bc1\u5339\u914d\u5408\u6cd5,\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u9650\u5236(S->ai),(bj->T)\u7684\u8fb9\u5c31\u884c\u4e86,\u5b83\u662f\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u51fa\u73b0\u4e00\u6b21\u7684.\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) if(map[i][j]=='*'){\n\t\tfor(int x=0;x<at[0][i][j].size();x++) for(int y=0;y<at[1][i][j].size();y++)\n\t\t\tlink(at[0][i][j][x],at[1][i][j][y],INF);\n\t}\n\tstd::cout<<Net::dinic()<<std::endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1582435678,
        "uid": 15295,
        "name": "hehelego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u9898\u76ee\u63cf\u8ff0\u4e2d\uff0c\"#\"\u662f\u53ef\u4ee5\u6321\u4f4f\u70b8\u5f39\u7206\u70b8\u8303\u56f4\u7684\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u4e0d\u59a8\u5bf9\u5730\u56fe\u4ee5\"#\"\u6765\u5206\u5272\u5730\u56fe\u7684\u6a2a\u884c\u7eb5\u5217\u3002\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u5730\u56fe\u5b57\u7b26\u4e32\u4e0a\u6a2a\u7eb5\u4ee5\"#\"\u62c6\u5206\u82e5\u5e72\u5b50\u4e32\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u5b50\u4e32\u770b\u505a\u4e00\u4e2a\u70b9\u3002\n\n\u663e\u7136\uff0c\u70b8\u5f39\u53ea\u80fd\u653e\u7f6e\u5728\"\\*\"\u4e0a\u9762\uff0c\u800c\u4e00\u65e6\u653e\u7f6e\u4e00\u4e2a\u70b8\u5f39\uff0c\u5fc5\u5b9a\u5728\u5176\u56db\u5468\u65e0\"#\"\u963b\u6321\u7684\u4e32\u4e0a\u9762\u4e0d\u5f97\u518d\u653e\u7f6e\u70b8\u5f39\u3002\n\n\u90a3\u4e48\uff0c\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u7684\u6a21\u578b\u4e86\uff0c\u4ee5\u6e90\u70b9\u5411\u6bcf\u4e2a\u6a2a\u884c\u7684\u5408\u6cd5\u5b50\u4e32\u8fde\u6709\u5411\u8fb9\uff0c\u7136\u540e\u518d\u4ee5\u6bcf\u4e2a\u7eb5\u5217\u5b50\u4e32\u5411\u6c47\u70b9\u8fde\u6709\u5411\u8fb9\u3002\n\n\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6a2a\u884c\u5b50\u4e32\u4e0a\u8bfe\u53ef\u4ee5\u653e\u7f6e\u7684\u4f4d\u7f6e\uff0c\u5411\u6bcf\u4e00\u4e2a\u7eb5\u884c\u5b50\u4e32\u4e0a\u9762\u53ef\u4ee5\u653e\u7f6e\u7684\u4f4d\u7f6e\u8fde\u6709\u5411\u8fb9\u3002\u6ce8\u610f\u662f\u53ef\u4ee5\u653e\u7f6e\u7684\u4f4d\u7f6e\uff0c\u5b50\u4e32\u91cc\u9762\u8fd8\u5305\u62ec\u6709\"x\"\uff0c\u8fd9\u91cc\u4e0d\u80fd\u653e\u7f6e\u70b8\u5f39\uff0c\u4e00\u5b9a\u4e0d\u80fd\u8fde\u8fb9\u3002\n\n\u8dd1\u7f51\u7edc\u6d41\uff0c\u6e90\u70b9\u5230\u6c47\u70b9\u6700\u5927\u6d41\uff0c\u540c\u65f6\u4e5f\u662f\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=5010;\nconst int inf=0x7fffffff;\n\ntypedef struct EdgeNode//\u524d\u5411\u661f\u5b58\u8fb9\n{\n    int to,flow;\n    EdgeNode *next,*turn;\n}*Edge;\n\nEdge head[maxn],cur[maxn];\nint s,t,n,m,cnt;//cnt\u4e3a\u5b50\u4e32\u7f16\u53f7\nint Lv[maxn];\nchar graph[60][60];//\u5730\u56fe\nint x[60][60],y[60][60];//\u7528\u4e8e\u5b58\u50a8\u5b50\u4e32\u7684\u7f16\u53f7\n\nvoid add(int u,int v,int w)\n{\n    Edge node1=new EdgeNode,node2=new EdgeNode;\n    node1->to=v,node2->to=u;\n    node1->flow=w,node2->flow=0;       \n    node1->turn=node2,node2->turn=node1;\n    node1->next=head[u],node2->next=head[v];\n    head[u]=node1,head[v]=node2;\n}\n\n//\u4ee5\u4e0b\u7f51\u7edc\u6d41\u7684\u677f\u5b50\nbool bfs()\n{\n    queue<int> que;\n    memset(Lv,-1,sizeof Lv);\n    que.push(s);\n    Lv[s]=0;\n    while(!que.empty())\n    {\n        int u=que.front();\n        que.pop();\n        for(Edge node=head[u];node;node=node->next)\n        {\n            int v=node->to;\n            if(node->flow&&!~Lv[v])\n            {\n                Lv[v]=Lv[u]+1;\n                que.push(v);\n            }\n        }\n    }\n    return ~Lv[t];\n}\n\nint dfs(int pos,int flow)\n{\n    if(pos==t)\n        return flow;\n    int sum=0;\n    for(Edge node=cur[pos];node;node=node->next)\n    {\n        int v=node->to;\n        if(Lv[v]==Lv[pos]+1&&node->flow)\n        {\n            int fl=dfs(v,min(flow-sum,node->flow));\n            node->flow-=fl,node->turn->flow+=fl,sum+=fl;\n            if(node->flow)//\u5f27\u4f18\u5316\n                cur[pos]=node;\n            if(sum==flow)\n                break;\n        }\n    }\n    return sum;\n}\n\nint dinic()\n{\n    int flow=0;\n    while(bfs())\n    {\n        memcpy(cur,head,sizeof(head));\n        flow+=dfs(s,inf);\n    }\n    return flow;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    s=0,t=maxn-1;//\u6e90\u70b9\u6c47\u70b9\n    for(int i=1;i<=n;i++)\n    \tscanf(\"%s\",graph[i]+1); \n    for(int i=1;i<=n;i++)//\u679a\u4e3e\u6a2a\u884c\u7eb5\u5217\n        for(int j=1;j<=m;j++)\n            if(graph[i][j]!='#')//\u4ee5\"#\"\u5206\u5272\u5f53\u7136\u4e0d\u5305\u62ec\"#\"\u533a\u57df\n            {\n                if(j==1||graph[i][j-1]=='#')//\u4ee5\"#\"\u5206\u5272\uff0c\u5e76\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u7f16\u53f7\u7ed9\u5f53\u524d\u5b50\u4e32\n                    add(s,++cnt,1);//\u6e90\u70b9\u5411\u6a2a\u884c\u5f53\u524d\u7f16\u53f7\u5b50\u4e32\u8fde\u8fb9\n                x[i][j]=cnt;\n            }\n    for(int i=1;i<=m;i++)\n        for(int j=1;j<=n;j++)\n            if(graph[j][i]!='#')\n            {\n                if(j==1||graph[j-1][i]=='#')//\u540c\u7406\n                    add(++cnt,t,1);//\u6c47\u70b9\u5411\u5f53\u524d\u7f16\u53f7\u7684\u7eb5\u884c\u8fde\u8fb9\n                y[j][i]=cnt;\n            }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(graph[i][j]=='*')//\u6ce8\u610f\uff0c\u53ea\u6709\"*\"\u5904\u53ef\u4ee5\u653e\u7f6e\u70b8\u5f39\n                add(x[i][j],y[i][j],1);\n    printf(\"%d\\n\",dinic());//\u8dd1\u7f51\u7edc\u6d41\u6c42\u51fa\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n    return 0;\n}\n```",
        "postTime": 1520175833,
        "uid": 48500,
        "name": "AntaresQAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016/TJOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u697c\u4e0b\u7684\u795e\u7287\u8bb2\u7684\u5f88\u597d\uff0c\u8865\u5145\u4e00\u70b9\uff0c\u4ee5\u6bcf\u884c/\u6bcf\u5217\u8fde\u901a\u5757\u4e3a\u70b9\uff0c\u8fb9\u5b9e\u8d28\u4e0a\u5c31\u662f\u5176\u4ea4\u70b9\u3002\u6211\u4eec\u5728\u627e\u6700\u5927\u5339\u914d\u65f6\uff0c\u9009\u53d6\u7684\u4e8c\u5206\u56fe\u91cc\u7684\u8fb9\u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u539f\u56fe\u7684\u70b9\uff0c\u90a3\u4e48\u663e\u7136\u4ea4\u70b9\u662f\u8f6f\u77f3\u5934\u7684\u65f6\u5019\u662f\u4e0d\u80fd\u8fde\u8fb9\u7684(\u4e0d\u80fd\u653e\u70ae)\uff0c\u732e\u4e0a\u4e11\u964b\u7684pascal\u4ee3\u7801\u3002\n\n\n\n\n\n\n```cpp\nconst maxn=2500;\ntype link=^node;\n     node=record\n       data:longint;\n       next:link;\n     end;\nvar i,j,k,l,m,n,ans,totx,toty:longint;\n    maps,pic:array[1..50,1..50]of longint;\n    y:array[1..maxn]of longint;\n    v:array[1..maxn]of boolean;\n    a:array[1..maxn]of link;\nprocedure adds(x,y:longint);\nvar s:link;\nbegin\n    new(s);s^.data:=y;s^.next:=a[x];\n    a[x]:=s;\nend;\nprocedure init;\nvar i,j,k:longint;\n    ch:char;\nbegin\n    fillchar(maps,sizeof(maps),0);\n    fillchar(pic,sizeof(pic),0);\n    fillchar(y,sizeof(y),0);\n    totx:=0;toty:=0;\n    readln(n,m);\n    for i:=1 to n do\n    begin\n      for j:=1 to m do\n      begin\n        read(ch);\n        if ch='#' then maps[i,j]:=-1;\n        if ch='x' then pic[i,j]:=1;\n      end;\n      readln;\n    end;\nend;\nprocedure previous;\nvar i,j,k,head,tail:longint;\nbegin\n    for i:=1 to m do\n    begin\n      head:=1;tail:=1;\n      while tail<=n do\n        if(maps[tail,i]>=0)then\n        begin\n          while(maps[tail,i]>=0)and(tail<=n)do inc(tail);\n          inc(totx);for j:=head to tail-1 do maps[j,i]:=totx;\n          head:=tail;\n        end\n        else\n        begin\n          inc(head);\n          inc(tail);\n        end;\n    end;\n    for i:=1 to n do\n    begin\n      head:=1;tail:=1;\n      while tail<=m do\n        if(maps[i,tail]>=0)then\n        begin\n          while(maps[i,tail]>=0)and(tail<=m)do inc(tail);\n          inc(toty);\n          for j:=head to tail-1 do\n            if(pic[i,j]=0)then adds(maps[i,j],toty);\n          head:=tail;\n        end\n        else\n        begin\n          inc(head);\n          inc(tail);\n        end;\n    end;\nend;\nfunction find(i:longint):boolean;\nvar s:link;\nbegin\n    s:=a[i];\n    while s<>nil do\n    begin\n      if(v[s^.data])then\n      begin\n        v[s^.data]:=false;\n        if(y[s^.data]=0)or(find(y[s^.data]))then\n        begin\n          y[s^.data]:=i;\n          exit(true);\n        end;\n      end;\n      s:=s^.next;\n    end;\n    exit(false);\nend;\nprocedure work;\nvar i,j:longint;\nbegin\n    previous;ans:=0;\n    for i:=1 to totx do\n    begin\n      fillchar(v,sizeof(v),true);\n      if(find(i))then inc(ans);\n    end;\n    writeln(ans);\nend;\nbegin\n    init;\n    work;\nend.\n\n```",
        "postTime": 1477745024,
        "uid": 20390,
        "name": "lwhllw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016]\u6e38\u620f\u3011"
    },
    {
        "content": "\u601d\u8def\u540c\u4e0b...\u8fd9\u91cc\u8d34\u4e00\u4e0b\u7f51\u7edc\u6d41\u7684\u7a0b\u5e8f...\n\n\u5982\u679c\u80fd\u5e2e\u5230\u7ec3\u4e60\u7f51\u7edc\u6d41\u7684\u4eba\u5c31\u597d\u4e86\u5462.....\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define inf 1<<30\n#define R register\n#define N 30200\nusing namespace std;\nchar map[60][60];\nint n,m;\nint itx[60][60],ity[60][60],have[N];\nint sum=1;\nint s=1,t;\nint head[N],to[N],next[N],cup[N];\nint mflow,tot=1;\nvoid buidit(int u,int v,int c)\n{\n    next[++tot]=head[u];\n    head[u]=tot;\n    cup[tot]=c;\n    to[tot]=v;\n}\nqueue<int> q;\nint vis[N],itc[N],use[N];\nbool bfs()\n{\n    memset(vis,0,sizeof(vis));\n    memset(itc,0,sizeof(itc));\n    itc[s]=1;\n    vis[s]=1;\n    q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=next[i])\n        {\n            int j=to[i];\n            if(cup[i]>0&&!vis[j])\n            {\n                vis[j]=1;\n                itc[j]=itc[now]+1;\n                q.push(j);\n            }\n        }\n    }\n    return vis[t];\n}\nint didit(int now,int want)\n{\n    if(now==t||want==0) {return want;}\n    R int f,iget=0;\n    for(int i=use[now];i;i=next[i])\n    {\n        R int j=to[i];\n        if(itc[j]==itc[now]+1)\n        {\n            f=didit(j,min(want,cup[i]));\n            if(f==0) continue;\n            iget+=f;\n            want-=f;\n            cup[i]-=f;\n            cup[i^1]+=f;\n            use[now]=i;\n        }\n    }\n   return iget;\n}\nvoid max_flow()\n{\n    while(bfs())\n    {\n        for(int i=1;i<=t;++i)\n        {\n            use[i]=head[i];\n       }\n        mflow+=didit(s,inf);\n    }\n}\nstring aaa;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n    {\n        cin>>aaa;\n        for(int j=0;j<m;++j)\n        {\n            map[i][j+1]=aaa[j];\n        }\n    }\n    for(int i=1;i<=n;++i)\n    {\n        R int fl=1;\n        for(int j=1;j<=m;++j)\n        {\n            if(map[i][j]!='#'&&fl)\n            {\n                itx[i][j]=++sum;\n                fl=0;\n            }\n            else if(map[i][j]!='#') itx[i][j]=sum;\n            else fl=1;\n        }\n    }\n    for(int i=2;i<=sum;++i)\n    {\n        buidit(s,i,1);\n        buidit(i,s,0);\n     }\n     int sassy=sum;\n    for(int j=1;j<=m;++j)\n    {\n        R int fl=1;\n        for(int i=1;i<=n;++i)\n        {\n            if(map[i][j]!='#'&&fl)\n            {\n                ity[i][j]=++sum;\n                fl=0;\n            }\n            else if(map[i][j]!='#') ity[i][j]=sum;\n            else fl=1;\n        }\n    }\n    t=++sum;\n    for(int i=sassy+1;i<=sum;++i)\n    {\n        buidit(t,i,0);\n        buidit(i,t,1);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<=m;++j)\n        {\n            if(map[i][j]=='#'||map[i][j]=='x') continue;\n            buidit(itx[i][j],ity[i][j],1);\n            buidit(ity[i][j],itx[i][j],0);\n        }\n    }\n    max_flow();\n    printf(\"%d\",mflow);\n    return 0;\n}\n```\n/\\*\n4 4\n#***\n\\*#**\n**#\\*\nxxx#\n\u4eca\u5929\u4e5f\u4f9d\u7136\u6ca1\u6709\u635e\u5230\u5c9b\u98ce47\u538c\u6218\u5462...\n\n\\*/",
        "postTime": 1505809163,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2825 \u3010[HEOI2016]\u6e38\u620f\u3011"
    }
]