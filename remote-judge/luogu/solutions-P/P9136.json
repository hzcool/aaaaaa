[
    {
        "content": "### Part1 \u524d\u8a00\n\nWBTT \u6682\u65f6\u88ab\u6211\u8ba4\u4e3a\u662f\u8003\u573a\u4e0d\u53ef\u5199\u4f5c\u7684\uff0c\u4e5f\u5c31\u662f\u5b83\u628a\u6211\u529d\u9000\u4e86\u3002\n\n\u4f46\u672c\u9898\u611f\u89c9\u628a WBTT \u5199\u5230\u8138\u4e0a\u4e86\uff0c\u4f46\u6211\u8bf4\u4e86 WBTT \u8003\u573a\u4e0d\u53ef\u5199\u4f5c\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528 WBTT\u3002\n\n\u7136\u800c\uff0c\u505a\u6cd5\u4f9d\u65e7\u662f zx2003 \u6559\u6211\u7684\uff0c\u867d\u7136\u6211\u6ca1\u6709\u548c\u4ed6\u89c1\u8fc7\u9762\uff0c\u4e5f\u4e0d\u5728\u4e00\u4e2a\u5b66\u6821\u3002\n\n### Part2 \u8003\u573a\u505a\u6cd5\n\n\u6811\u5206\u5757\u662f\u5e73\u51e1\u4e14\u4e0d\u5177\u6709\u6269\u5c55\u6027\u7684\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u5f52\u7ea6\u4e3a Link-Cut \u94fe\u52a0\u94fe rank\uff0c\u653e\u5728\u5e8f\u5217\u4e0a\u662f\u7ecf\u5178\u5206\u5757\u95ee\u9898\u3002\n\n\u4e8e\u662f\u6211\u5c06 [WBTT](https://zx2003.blog.uoj.ac/blog/7884) \u4e2d\u7684 WBTT \u6362\u6210\u4e86 LCT \u5c31\u8fc7\u4e86\u3002\n\n\u5177\u4f53\u5730\uff0c\u5bf9 LCT \u4e0a\u8282\u70b9\u7684 $sz$ \u505a\u6839\u53f7\u5206\u6cbb\uff0c\u5728 `pushup` \u65f6\uff0c\u53ea\u6709 $sz_x\\le\\sqrt n$ \u624d\u4f1a\u5c06\u4e24\u4e2a\u5b50\u6811\u7684 `vector` \u5f52\u5e76\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u4fee\u6539\u590d\u6742\u5ea6\u4e3a $O(\\sqrt n\\log n)$\u3002\n\n\u67e5\u8be2\u9012\u5f52\u5230\u6bcf\u4e00\u68f5 $sz_x\\le\\sqrt n$ \u7684\u5b50\u6811\u4e8c\u5206\u5c31\u884c\u4e86\uff0c\u8fd9\u4e00\u6b65\u662f $O(\\sqrt n\\log n)$ \u7684\u3002\n\n### Part3 \u5bf9\u4f4e\u590d\u6742\u5ea6\u505a\u6cd5\u7684\u63a2\u8ba8\n\n\u7136\u540e\u6211\u8003\u540e\u53d1\u73b0\u67e5\u8be2\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\u3002\n\n\u539f\u56e0\u662f\uff0c\u5982\u679c\u5f53\u65f6 `splay` \u5b58\u5728\u8f83\u957f\u94fe\uff0c\u8fd9\u4e00\u6b65\u5c31\u5fc5\u987b\u8981\u4f38\u5c55\uff0c\u5426\u5219\u5c31\u4e0d\u5bf9\uff0c\u4e0d\u8fc7\u51fa\u9898\u4eba\u5e76\u6ca1\u6709\u5361\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u6211\u81ea\u5df1\u5c31\u80fd\u5361\u6389\u3002\n\n\u5982\u679c\u4f60\u8fd9\u4e00\u6b65\u9009\u62e9\u4f38\u5c55\uff0c\u90a3\u4e48\u4f38\u5c55\u590d\u6742\u5ea6\u662f $O(\\sqrt n\\log n)$ \u7684\uff0c$O(nq\\log n)$ \u6709\u5b58\u5728\u7684\u5fc5\u8981\u5417\uff1f\n\n\u5176\u5b9e\u8fd8\u662f\u6709\u65b9\u6cd5\u7684\uff0c\u4f7f\u7528 `fhqTreap` \u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u5efa Top Tree\uff0c\u4e0d\u7136 $O(q\\sqrt n\\log^2 n)$ \u4e5f\u5df2\u7ecf\u6e10\u8fd1\u66b4\u529b\u4e86\u3002\n\n\u76f4\u63a5\u7528 `fhqTreap` \u5b9e\u73b0 $\\text{Rand Top Tree}$ \u662f $O(q\\sqrt n\\log n)$ \u7684\uff0c\u8fd9\u4e00\u6b65\u6211\u5e76\u4e0d\u4f1a\u8bc1\u3002\n\n### Part4 \u7528\u5e38\u6570\u6362\u590d\u6742\u5ea6\n\n\u6211\u8981\u534a\u4e2a $\\log$\uff01\u867d\u7136\u534a $\\log$ \u6807\u7b97\u7684\u9898\u76ee\u662f\u6781\u5c11\u7684\u3002\n\n\u4f60\u9700\u8981\u4f1a\u5206\u6563\u5c42\u53e0\u7b97\u6cd5\u3002\n\n\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f $sz_x>B$\uff0c\u6211\u4eec\u4e5f\u8fdb\u884c\u4e24\u4e2a\u5b50\u6811\u7684\u5206\u6563\u5c42\u53e0\u5408\u5e76\uff0c\u7136\u540e\u5c06 $B\\leftarrow\\sqrt{\\dfrac n{\\log n}}$ \u4e8e\u662f\u65f6\u7a7a\u590d\u6742\u5ea6 $O(n\\sqrt{n\\log n})$\u3002\n\n\u7136\u800c\u5e38\u6570\u592a\u5927\u4e86\uff0c\u5206\u6563\u5c42\u53e0\u5728\u76ee\u524d\u7684\u5e94\u7528\u5927\u591a\u6570\u90fd\u505c\u7559\u5728\u7406\u8bba\u5206\u6790\u3002\n\n\u6807\u7b97\u7684\u5b9a\u671f\u91cd\u6784\u6811\u5206\u5757\u662f\u5e73\u51e1\u7684\uff0c\u5373\u4f7f\u6709\u8f83\u5c0f\u7684\u5e38\u6570\u4f18\u52bf\u4f46\u5e76\u4e0d\u5177\u6709\u53ef\u6269\u5c55\u6027\uff0c\u6211\u8981\u4f60\u771f\u7684 Link-Cut \u4f60\u5c31\u6ca1\u4e86\u3002\n\n\u5f53\u7136\uff0cWBTT \u5fc5\u5b9a\u662f\u4e25\u683c $O(n\\sqrt n)$ \u7684\u3002\n\n### Part5 \u540e\u8bb0\n\n\u6211\u5df2\u7ecf\u4e0b\u5b9a\u51b3\u5fc3\u77ed\u65f6\u95f4\u5185\u4e0d\u518d\u7814\u7a76 $\\text{Top Tree}$ \u7684\u66f4\u6df1\u5185\u5bb9\u4e86\uff0c\u4e00\u9053\u9898\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u8ba9\u6211\u56de\u6765\uff1f\n\n\u5e0c\u671b\u6709\u4e00\u5929\u6211\u80fd\u591f\u771f\u6b63\u5730\u5b66\u4f1a WBTT \u5427\uff0c\u81f3\u5c11\u4e0a\u9ad8\u4e2d\u4e4b\u540e\u4e86\u3002",
        "postTime": 1678232788,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "LCT \u7ef4\u62a4\u6811\u5206\u5757"
    },
    {
        "content": "- **\u524d\u7f6e\u77e5\u8bc6**\uff1a[P8353 [SDOI/SXOI2022] \u65e0\u5904\u5b58\u50a8](https://www.luogu.com.cn/problem/P8353) \u7684\u968f\u673a\u6492\u70b9\u6811\u5206\u5757\u505a\u6cd5\n\n- **\u7406\u8bba\u90e8\u5206**\n\n\u9996\u5148\u6ce8\u610f\u5230\u8fd9\u9898\u4e2d\u5bf9\u6811\u6539\u53d8\u5f62\u6001\u7684\u64cd\u4f5c\u5341\u5206\u7279\u6b8a\uff0c\u4e00\u79cd\u662f\u5728\u8fb9\u4e0a\u52a0\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u52a0\u53f6\u5b50\uff0c\u8fdc\u8fdc\u5f31\u4e8e LCT \u4e2d\u7684 Link/Cut \u64cd\u4f5c\u3002\u5bf9\u4e8e\u8fd9\u79cd\u5f62\u6001\u7684\u6811\uff0c\u7528\u968f\u673a\u6492\u70b9\u6811\u5206\u5757\u7684\u65b9\u5f0f\u7ef4\u62a4\u662f\u4e00\u79cd\u597d\u65b9\u6cd5\u3002\n\n\u968f\u673a\u6492 $A$ \u4e2a\u70b9\u5e76\u5efa\u7acb\u865a\u6811\uff0c\u4efb\u610f\u70b9\u5230\u5173\u952e\u70b9 / \u865a\u6811\u7684\u8ddd\u79bb\u4e3a $O(\\dfrac{n}{A})$ \u7ea7\u522b\uff0c\u865a\u6811\u4e0a\u4e24\u76f8\u90bb\u70b9\u4e4b\u95f4\u7684\u94fe\u957f\u4e5f\u4e3a $O(\\dfrac{n}{A})$ \u7ea7\u522b\uff0c\u4ece\u4efb\u610f\u70b9\u8df3\u5230\u6839\u7ecf\u8fc7\u7684\u94fe\u6570\u4e3a $O(A)$ \u7ea7\u522b\u3002\n\n\u8ddf\u666e\u901a\u7684\u6811\u94fe\u5256\u5206\u4e00\u6837\uff0c\u6211\u4eec\u5256\u5206\u865a\u6811\u4e2d\u76f8\u90bb\u5173\u952e\u70b9\u7684\u94fe\uff0c\u6bcf\u6761\u94fe\u7528\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u6765\u7ef4\u62a4\u3002\u4e00\u6761\u94fe\u5efa\u7acb / \u91cd\u6784\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{n}{A}\\log n)$\uff0c\u63d2\u5165\u7ed3\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{n}{A})$\u3002\n\n\u67e5\u8be2\u65f6\uff0c\u6563\u70b9\u66b4\u529b\u67e5\u8be2 $O(1)$\uff0c\u6574\u6761\u94fe\u53ef\u4ee5\u4e8c\u5206\u627e\u5230\u94fe\u4e0a\u6709\u591a\u5c11\u4e2a\u6570 $\\ge w$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log n)$\uff0c\u5355\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6 $O(A\\log n+\\dfrac{n}{A})$\u3002\n\n\u4fee\u6539\u65f6\uff0c\u6563\u70b9\u66b4\u529b\u4fee\u6539\uff0c\u6574\u6761\u94fe\u53ef\u4ee5\u6253\u4e00\u4e2a\u6c38\u4e45\u5316\u6807\u8bb0\u3002\u800c\u5bf9\u4e8e\u4e00\u6761\u4e0d\u5b8c\u6574\u7684\u94fe\u7684\u4fee\u6539\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u5e8f\u6570\u7ec4\u80fd\u5206\u6210\u4e24\u4e2a\u5b50\u5e8f\u5217\uff08\u8981\u4fee\u6539\u548c\u4e0d\u8981\u4fee\u6539\u7684\uff09\uff0c\u5bf9\u5176\u4e2d\u4e00\u4e2a\u5b50\u5e8f\u5217\u8fdb\u884c\u4fee\u6539\uff0c\u4fee\u6539\u5b8c\u540e\u5f52\u5e76\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u3002\u5355\u6b21\u4fee\u6539\u65f6\u95f4\u590d\u6742\u5ea6 $O(A+\\dfrac{n}{A})$\u3002\n\n\u4e0d\u59a8\u4ee4 $A=\\sqrt\\dfrac{n}{\\log n}$\uff0c\u5219\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\sqrt{n\\log n})$\u3002\n\n\u4f46\u662f\u52a0\u70b9\u53ef\u80fd\u4f1a\u7834\u574f\u539f\u6765\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5b9a\u671f\u91cd\u6784\uff0c\u6bcf\u6b21\u91cd\u6784\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u4ee5 $T=\\sqrt{n\\log n}$ \u4e3a\u5468\u671f\u91cd\u6784\uff0c\u91cd\u6784\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u4e3a $O(m\\sqrt{n\\log n})$\u3002\n\n- **\u5b9e\u8df5\u90e8\u5206**\n\n**\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u7ef4\u62a4\u7684\u8ddf\u539f\u6811\u5f62\u6001\u76f8\u5173\u7684\u4fe1\u606f\u53ea\u6709\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\u662f\u8c01\u3002**\n\n\u9996\u5148\u968f\u673a\u6492\u70b9\u6811\u5206\u5757\u7684\u865a\u6811\u5b8c\u5168\u4e0d\u9700\u8981\u7528\u6309\u7167 dfs \u5e8f\u6392\u5e8f\u7136\u540e\u6808\u7ef4\u62a4\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u66b4\u529b\u4e00\u70b9\uff0c\u4ece\u5173\u952e\u70b9\u8df3\u5230\u6839\u5e76\u6cbf\u9014\u6253\u6807\u8bb0\uff0c\u5982\u679c\u8def\u8fc7\u6807\u8bb0\u70b9\u5219\u505c\u6b62\u64cd\u4f5c\uff0c\u5e76\u5c06\u8be5\u70b9\u52a0\u5165\u865a\u6811\u3002\u8fd9\u6837\u4e0d\u4ec5\u80fd\u5efa\u51fa\u865a\u6811\uff0c\u8fd8\u80fd\u591f\u6807\u8bb0\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u865a\u94fe\u4e0a\u3002\n\n\u6c42 LCA \u7684\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u6811\u5256\uff0c\u8fd9\u91cc\u9700\u8981\u5148\u5c06\u70b9\u8df3\u5230\u865a\u94fe\u4e0a\uff0c\u518d\u5728\u865a\u94fe\u4e0a\u66b4\u529b\u8df3\u5173\u952e\u70b9\uff0c\u5355\u6b21\u662f $O(A+\\dfrac{n}{A})$ \u7684\u3002\n\n\u94fe\u52a0\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5f53\u524d\u70b9\u5230\u6839\u7684\u52a0 / \u51cf\u3002\u6bd4\u5982\uff0c$sum(x,y)=sum(x)+sum(y)-sum(LCA(x,y))-sum(fa_{LCA(x,y)})$\u3002\u94fe\u67e5\u4e5f\u53ef\u4ee5\u7528\u76f8\u540c\u65b9\u5f0f\u8f6c\u5316\u3002\n\n\u7531\u4e8e\u8fb9\u4e0a\u52a0\u70b9\u64cd\u4f5c\u7684\u5b58\u5728\uff0c\u6df1\u5ea6\u662f\u8f83\u96be\u7ef4\u62a4\u7684\uff0c\u8003\u8651\u4ec5\u7ef4\u62a4\u5173\u952e\u70b9\u7684\u6df1\u5ea6\u3002\u6bcf\u6b21\u52a0\u70b9\u65f6\uff0c\u9700\u8981\u5c06\u5b50\u6811\u4e2d\u7684\u6240\u6709\u5173\u952e\u70b9\u6df1\u5ea6 +1\u3002\u4f46\u52a0\u70b9\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u865a\u6811\u5f62\u6001\uff0c\u6240\u4ee5\u8fd8\u662f\u53ef\u4ee5\u5b58\u50a8\u865a\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u7136\u540e\u8fdb\u884c dfs\u3002\u5355\u6b21\u64cd\u4f5c\u662f $O(A)$ \u7684\u3002\n\n\u7528\u90bb\u63a5\u8868\u5b58\u56fe\u3002vector \u4f1a\u8d85\u65f6\u3002\u5b9e\u9645\u4e0a\u5982\u679c\u6309\u7167\u7406\u8bba\u65b9\u6cd5\u9009\u53d6\u6492\u70b9\u4e2a\u6570\u548c\u91cd\u6784\u95f4\u9694\u4f1a\u8d85\u65f6\uff0c$A=T=10^3$ \u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\u672c\u9898\u8bfb\u5165\u8f93\u51fa\u91cf\u8f83\u5927\uff0c\u4f46 [\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P8353) \u5df2\u7ecf\u5e2e\u4f60\u5199\u597d\u4e86\u5feb\u8bfb\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=4e5,T=1000;\n\nnamespace INPUT_SPACE{\n\tconst int S=(1<<20)+5;char B[S],*H,*T;inline int gc() { if(H==T) T=(H=B)+fread(B,1,S,stdin);return (H==T)?EOF:*H++; }\n\tinline int read() { int x,ch,f=1;while((ch=gc())<'0'||ch>'9')if(ch=='-')f=-1;x=ch^'0';while((ch=gc())>='0'&&ch<='9')x=x*10+(ch^'0');return x*f; }\n}using INPUT_SPACE::read;\ninline void write(int x)\n{\n    if(x>=10) write(x/10);\n    putchar(x%10+'0');\n}\n\nstruct Node{int to,nxt;} Edge[Maxn*4+5];\nint tot,Head[Maxn+5],Head2[Maxn+5];\ninline void Addedge(int x,int y) {Edge[++tot]=(Node){y,Head[x]},Head[x]=tot;}\ninline void Addedge2(int x,int y) {Edge[++tot]=(Node){y,Head2[x]},Head2[x]=tot;}\n\nint n,m,B,ans,nxt[Maxn+5];\nint p[Maxn+5],fa[Maxn+5],flg[Maxn+5]; ll tag[Maxn+5],a[Maxn+5];\nint dep[Maxn+5],anc[Maxn+5],vis[Maxn+5],chk[Maxn+5];\nmt19937 rnd(time(0));\n\nstruct Array\n{\n    vector<pair<ll,int>> v;\n    inline void Clear() {v.clear(),v.shrink_to_fit();}\n    inline void Remake(int x)\n    {\n        v.clear(),v.shrink_to_fit();\n        for(int i=x;i!=anc[x];i=fa[i]) v.emplace_back(a[i],i);\n        sort(v.begin(),v.end());\n    }\n    inline void Insert(int x)\n    {\n        auto res=make_pair(a[x],x);\n        for(auto it=v.begin();it!=v.end();it++)\n            if(res<*it) {v.insert(it,res); return;}\n        v.push_back(res);\n    }\n    inline void Merge(vector<pair<ll,int>> x,vector<pair<ll,int>> y)\n    {\n        auto il=x.begin(),ir=y.begin(); v.clear();\n        while(il!=x.end() && ir!=y.end()) if((*il)<(*ir)) v.push_back(*il++); else v.push_back(*ir++);\n        while(il!=x.end()) v.push_back(*il++); while(ir!=y.end()) v.push_back(*ir++);\n    }\n    inline int Count(ll w) {return v.end()-lower_bound(v.begin(),v.end(),make_pair(w,0));}\n} tr[Maxn+5];\n\ninline void dfs0(int x,int f)\n{\n    fa[x]=f,dep[x]=dep[f]+1;\n    for(int i=Head[x];i;i=Edge[i].nxt) {int y=Edge[i].to; if(y!=f) dfs0(y,x);}\n}\ninline void dfs1(int x) {dep[x]++; for(int i=Head2[x];i;i=Edge[i].nxt) dfs1(Edge[i].to);}\ninline int GetDep(int x) {int res=0; while(!vis[x]) res++,x=fa[x]; return dep[x]+res;}\ninline int Find(int x) {while(!vis[fa[x]]) x=fa[x]; return nxt[x];}\ninline int GetLca(int x,int y) {while(x!=y) if(dep[x]>dep[y]) x=anc[x]; else y=anc[y]; return x;}\ninline int LCA(int x,int y)\n{\n    if(x==y) return x;\n    int a=x,b=y,dx=GetDep(x),dy=GetDep(y);\n    while(!chk[a]) a=fa[a]; while(!chk[b]) b=fa[b];\n    if(a==b) {while(x!=y) if(dx>dy) x=fa[x],dx--; else y=fa[y],dy--; return x;}\n    x=a,y=b,a=(vis[x]?x:Find(x)),b=(vis[y]?y:Find(y));\n    if(a==b) return (GetDep(x)<GetDep(y)?x:y);\n    int k=GetLca(a,b);\n    if(k==a) return x; else if(k==b) return y; else return k;\n}\ninline void Insert(int x,int w) {fa[++n]=x,a[n]=w;}\ninline void Insert(int x,int y,int w)\n{\n    if(fa[y]==x) swap(x,y);\n    int k=++n; fa[x]=k,fa[k]=y,a[k]=w;\n    if(vis[y] && chk[x]) nxt[k]=nxt[x],nxt[x]=0;\n    if(chk[x] && chk[y])\n    {\n        chk[k]=1; int id=(vis[x]?x:Find(k));\n        a[k]-=tag[id],tr[id].Insert(k),dfs1(id);\n    }\n}\ninline void PushDown(int x) {for(int i=x;i!=anc[x];i=fa[i]) a[i]+=tag[x]; tag[x]=0;}\ninline void Modify(int x,int k)\n{\n    if(!x) return;\n    while(!chk[x]) a[x]+=k,x=fa[x];\n    if(!vis[x])\n    {\n        int id=Find(x);\n        vector<pair<ll,int>> v1,v2;\n        for(int i=x;!vis[i];i=fa[i]) flg[i]=1;\n        for(auto i:tr[id].v)\n        {\n            if(flg[i.second]) v2.emplace_back(i.first+k,i.second);\n            else v1.push_back(i);\n        }\n        tr[id].Merge(v1,v2);\n        for(int i=x;!vis[i];i=fa[i]) flg[i]=0;\n        while(!vis[x]) a[x]+=k,x=fa[x];\n    }\n    for(int i=x;i;i=anc[i]) tag[i]+=k;\n}\ninline void Modify(int x,int y,int k)\n{\n    int l=LCA(x,y);\n    if(l==x) Modify(y,k),Modify(fa[x],-k);\n    else if(l==y) Modify(x,k),Modify(fa[y],-k);\n    else Modify(x,k),Modify(y,k),Modify(l,-k),Modify(fa[l],-k);\n}\ninline int Count(int x,int w)\n{\n    if(!x) return 0;\n    int res=0;\n    while(!chk[x]) res+=(a[x]>=w),x=fa[x];\n    if(!vis[x])\n    {\n        int id=Find(x);\n        while(!vis[x]) res+=(a[x]+tag[id]>=w),x=fa[x];\n    }\n    for(int i=x;i;i=anc[i]) res+=tr[i].Count(w-tag[i]);\n    return res;\n}\ninline int Count(int x,int y,int w)\n{\n    int l=LCA(x,y),res=0;\n    if(l==x) res=Count(y,w)-Count(fa[x],w);\n    else if(l==y) res=Count(x,w)-Count(fa[y],w);\n    else res=Count(x,w)+Count(y,w)-Count(l,w)-Count(fa[l],w);\n    return res;\n}\ninline void Clear()\n{\n    tot=0;\n    for(int id=1,i=p[1];id<=B;i=p[++id])\n        PushDown(i),tr[i].Clear(),Head2[i]=0;\n    For(i,1,n) chk[i]=vis[i]=dep[i]=anc[i]=nxt[i]=Head[i]=0;\n    For(i,2,n) Addedge(fa[i],i);\n}\ninline void ReBuild()\n{\n    Clear(),dfs0(1,0),B=T;\n    For(i,1,B) p[i]=rnd()%n+1; p[++B]=1;\n    sort(p+1,p+B+1),B=unique(p+1,p+B+1)-p-1;\n    For(i,1,B) vis[p[i]]=1; chk[1]=1;\n    for(int id=1,i=p[1],j;id<=B;i=p[++id])\n    {\n        for(j=i;!chk[j];j=fa[j]) chk[j]=1;\n        if(!vis[j]) vis[j]=1,p[++B]=j;\n    }\n    sort(p+1,p+B+1);\n    for(int id=2,i=p[2],x,y;id<=B;i=p[++id])\n    {\n        for(x=i,y=fa[i];!vis[y];x=y,y=fa[y]);\n        anc[i]=y,nxt[x]=i;\n        if(anc[i]) Addedge2(anc[i],i);\n    }\n    For(i,1,B) tr[p[i]].Remake(p[i]);\n}\n\nint main()\n{\n    n=read(),m=read();\n    For(i,1,n) a[i]=read();\n    For(i,1,n-1)\n    {\n        int x=read(),y=read();\n        Addedge(x,y),Addedge(y,x);\n    }\n    dfs0(1,0),ReBuild();\n    for(int i=1,cnt=0;i<=m;++i)\n    {\n        int op=read(),x=read()^ans,y=read()^ans,z;\n        if(op==1) z=read()^ans,Insert(x,y,z),cnt++;\n        if(op==2) Insert(x,y),cnt++;\n        if(op==3) z=read()^ans,Modify(x,y,z);\n        if(op==4) z=read()^ans,write(ans=Count(x,y,z)),putchar('\\n');\n        if(cnt>=T) cnt=0,ReBuild();\n    }\n    return 0;\n}\n```",
        "postTime": 1678449576,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P9136 [THUPC 2023 \u521d\u8d5b] \u79cd\u82f9\u679c"
    },
    {
        "content": "\u6628\u5929\u690d\u6811\u8282\u4f46\u662f\u662f\u5468\u65e5\uff0c\u4eca\u5929\u8865\u4e0a\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u52a0\u70b9\u5b9e\u5728\u662f\u592a\u5f31\u4e86\uff0c\u6240\u4ee5\u9996\u5148\u4ee5 $B$ \u4e3a\u5757\u957f\u5212\u5206\u6210\u82e5\u5e72\u7c07\uff0c\u7136\u540e\u53ef\u4ee5\u5212\u51fa\u6765\u9876\u591a $2\\frac nB$ \u4e2a\u754c\u70b9\uff0c\u6bcf\u6b21\u52a0\u70b9\u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u7c07\u5927\u5c0f\u8d85\u8fc7 $2B$ \u90a3\u4e48\u5c31\u628a\u5f53\u524d\u7c07\u7684\u91cd\u5fc3\u518d\u5212\u6210\u4e00\u4e2a\u754c\u70b9\uff0c\u7136\u540e\u518d\u52a0\u4e00\u4e2a\u754c\u70b9\u6765\u4fdd\u8bc1\u5206\u5f00\u7684\u4e1c\u897f\u662f\u4e2a\u7c07\uff0c\u7136\u540e\u628a\u5f53\u524d\u7c07\u5185\u7684\u4fe1\u606f\u5206\u5230\u5404\u4e2a\u65b0\u7c07\u4e2d\uff0c\u8fd9\u6837\u7c07\u5927\u5c0f\u603b\u5c0f\u4e8e\u7b49\u4e8e $B$\uff0c\u754c\u70b9\u4e2a\u6570\u6700\u591a\u4e3a $2\\frac nB+2\\frac mB$\uff0c\u66b4\u529b\u5212\u5206\u6b21\u6570\u81f3\u591a\u4e3a $B$\u3002\n\n\u7136\u540e\u770b\u770b\u8981\u7ef4\u62a4\u4ec0\u4e48\u4e1c\u897f\uff0c\u94fe\u52a0\u94fe\u6392\u540d\u5f3a\u5236\u5728\u7ebf\u503c\u57df\u4e71\u98de\uff0c\u8fd9\u4e2a\u653e\u5230\u5e8f\u5217\u4e0a\u4e5f\u662f\u4e00\u4e2a\u5341\u5206\u91cd\u91cf\u7ea7\u7684\u73a9\u610f\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u505a\u5230\u7c7b $O(m\\sqrt{n\\log n})$ \u5373\u53ef\u3002\n\n\uff08\u542c\u8bf4\u53ef\u4ee5\u5206\u6563\u5c42\u53e0\uff1f\u4e0d\u4f1a\u90a3\u4e2a\u4e1c\u897f\u3002\uff09\n\n\u7531\u4e8e\u6bcf\u4e2a\u7c07\u4e24\u7aef\u6700\u591a\u4e24\u4e2a\u754c\u70b9\uff0c\u6240\u4ee5\u628a\u6bcf\u4e2a\u7c07\u5185\u7ef4\u62a4\u7684\u70b9\u5206\u6210\u4e24\u79cd\uff0c\u754c\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u70b9\u548c\u5176\u4ed6\u70b9\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e24\u7aef\u7684\u7c07\u76f4\u63a5\u66b4\u529b\u67e5\u8be2\uff0c\u4e2d\u95f4\u7684\u7c07\u53ea\u4f1a\u6d89\u53ca\u5230\u524d\u9762\u90a3\u79cd\u70b9\uff0c\u5728\u6309\u6743\u503c\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e0a\u4e8c\u5206\uff0c\u53ef\u4ee5\u505a\u5230 $O(mB+m\\frac nB\\log B+m\\frac mB\\log B)$\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u4e24\u7aef\u7684\u7c07\u76f4\u63a5\u91cd\u6784\uff0c\u5185\u90e8\u7684\u7c07\u53ea\u4f1a\u6539\u524d\u9762\u90a3\u79cd\uff0c\u7136\u540e\u754c\u70b9\u603b\u5171\u624d\u90a3\u4e48\u591a\u6240\u4ee5\u6d89\u53ca\u5230\u7684\u7c07\u9876\u591a $O(\\frac nB+\\frac mB)$ \u4e2a\uff0c\u6253\u6807\u8bb0\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(mB+m\\frac nB+m\\frac mB)$\uff0c\u5f53\u7136\u91cd\u6784\u7684\u65f6\u5019\u8981\u5199\u7531\u4e43\u6253\u6251\u514b\u7684\u90a3\u4e2a\u628a\u6570\u7ec4\u5206\u5f00\u518d\u5f52\u5e76\u7684\u4f18\u5316\u3002\n\n\u52a0\u70b9\u8981\u63d2\u5165\uff0c\u4f46\u662f\u4e00\u4e2a\u63d2\u5165\u53ea\u4f1a\u5f71\u54cd\u4e00\u4e2a\u7c07\uff0c\u76f4\u63a5\u63d2\u5165\u7ef4\u62a4\u7684\u6570\u7ec4\u5c31\u884c\uff0c\u590d\u6742\u5ea6 $O(mB)$\u3002\n\n\u7136\u540e\u7c07\u5206\u88c2\uff0c\u5c31\u662f\u4e0a\u9762\u7684\u7b2c\u4e00\u53e5\u8bdd\u91cc\u7684\u7c07\u91cd\u6784\uff0c\u8fd9\u4e2a\u7531\u4e8e\u4f1a\u6709\u539f\u5148\u4e0d\u5728\u754c\u70b9\u4e2d\u7684\u70b9\u53d8\u6210\u754c\u70b9\u4e2d\u7684\u70b9\uff0c\u610f\u5473\u7740\u8fd8\u8981\u5728\u4e4b\u524d\u7ef4\u62a4\u4e00\u4e2a\u6bcf\u4e2a\u7c07\u4e2d\u4e0d\u5728\u754c\u70b9\u4e2d\u7684\u70b9\u7684\u6392\u540d\u6570\u7ec4\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u5230\u6700\u540e\u7684\u90a3\u4e2a\u6839\u53f7\uff0c\u590d\u6742\u5ea6 $O(B^2)$\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\u754c\u70b9\u4e5f\u662f\u70b9\uff0c\u800c\u4e14\u4e0d\u5728\u4efb\u4f55\u7c07\u5185\uff0c\u4f46\u662f\u5b83\u4eec\u66b4\u529b\u7ef4\u62a4\u5c31\u884c\u3002\n\n\u521d\u59cb\u5316\u7684\u65f6\u5019\u81f3\u5c11\u8981\u6392\u4e2a\u5e8f\uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u65f6\u53ef\u4ee5\u59cb\u7ec8\u7ef4\u62a4\u539f\u6811\u5f62\u6001\uff0c\u7531\u4e8e\u4e24\u4e2a\u754c\u70b9\u7684 `lca` \u4ecd\u662f\u4e00\u4e2a\u754c\u70b9\uff08\u8981\u6c42\u6839\u8282\u70b9\u4e3a\u754c\u70b9\uff09\uff0c\u6240\u4ee5\u6bcf\u4e2a\u754c\u70b9\u53ea\u7528\u5b58\u5b83\u5728\u6536\u7f29\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u4e0d\u7528\u7ef4\u62a4\u6574\u68f5\u6536\u7f29\u6811\u7684\u5f62\u6001\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u8be2\u95ee\u65f6\u8981\u77e5\u9053\u6bcf\u4e2a\u754c\u70b9\u7684\u6df1\u5ea6\uff0c\u5982\u679c\u4e0a\u9762\u6ca1\u6709\u7ef4\u62a4\u6574\u68f5\u6536\u7f29\u6811\u7684\u5f62\u6001\u7684\u8bdd\u8fd9\u4e2a\u662f\u4e0d\u80fd\u5728\u91cd\u6784\u65f6\u76f4\u63a5\u6c42\u7684\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u6bcf\u6b21\u6c42\u5b8c\u6df1\u5ea6\u7684\u65f6\u5019\u628a\u7ed3\u679c\u8bb0\u4e0b\u6765\uff0c\u987a\u4fbf\u8bb0\u4e00\u4e0b\u5f53\u524d\u754c\u70b9\u4e2a\u6570\uff0c\u8fd9\u6837\u91cd\u6784\u65f6\u5c31\u4e0d\u9700\u8981\u76f4\u63a5\u6539\u8fd9\u4e2a\u8bb0\u5fc6\u5316\u6570\u7ec4\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u4e00\u4e0b\u5728\u54ea\u4e2a\u7c07\u91cc\u4ee5\u53ca\u5b83\u662f\u5426\u5728\u4e24\u4e2a\u754c\u70b9\u95f4\uff0c\u5bf9\u4e8e\u754c\u70b9\u8bb0\u5f55\u5b83\u7236\u4eb2\u5728\u54ea\u4e2a\u7c07\u91cc\uff0c\u7279\u6b8a\u5730\u7ed9\u6839\u7684\u7236\u4eb2\u627e\u4e2a\u865a\u7c07\u65b9\u4fbf\u8ba8\u8bba\uff0c\u6bcf\u4e2a\u7c07\u8fd8\u8981\u5b58\u5b83\u4e0b\u9762\u7684\u754c\u70b9\uff08\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff09\u548c\u4e0a\u9762\u7ef4\u62a4\u7684\u4e24\u4e2a\u6570\u7ec4\u3002\n\n\u590d\u6742\u5ea6 $O(B^2+n\\log n+mB+m\\frac nB\\log B+m\\frac mB\\log B)$\uff0c\u8ba9\u540e\u9762\u90a3\u4e2a $m\\frac mB\\log B$ \u5047\u88c5\u88ab $m\\frac nB\\log B$ \u541e\u4e86\uff0c$B=\\sqrt{n\\log n}$ \u53ef\u4ee5\u505a\u5230 $(n\\log n+m\\sqrt{n\\log n})$\u3002\n\n\uff08\u4f46\u662f\u4e8b\u5b9e\u4e0a $B$ \u53d6 $\\sqrt n$ \u8dd1\u5f97\u98de\u5feb\uff0c\u53d6 $B=\\sqrt{n\\log n}$ \u4f1a `T` \u6210\u72d7\uff0c\u8c14\u8c14\uff09\n\n\uff08\u53ef\u80fd\u662f\u4e24\u8fb9\u5e38\u6570\u8fc7\u4e8e\u4e0d\u5747\u8861\u5bfc\u81f4\u7684\u3002\uff09\n\n\uff08\u6b64\u9898\u76ee\u524d\u662f\u6211\u5386\u53f2\u7801\u91cf\u699c\u4e00\uff0c\u76f4\u63a5\u6012\u7801\u56db\u767e\u4e94\u5341\u884c\u5171 `11.25KB`\u3002\uff09\n\n[\u4ee3\u7801\u3002](https://www.luogu.com.cn/paste/orbyiqm2)\n",
        "postTime": 1678716413,
        "uid": 336630,
        "name": "dcmfqw",
        "ccfLevel": 0,
        "title": "\u4fdd\u62a4\u73af\u5883\uff0c\u4eba\u4eba\u6709\u8d23"
    },
    {
        "content": "\u4e0d\u559c\u6b22\u8fd9\u9053\u7f1d\u5408\u9898\uff0c\u4f46\u662f\u5199\u4e86\u5f88\u4e45\u3002\n\n## \u9898\u610f\n\n\u7ed9\u4e00\u9897\u6811\uff0c\u652f\u6301\u52a0\u70b9\u3001\u8fb9\u4e2d\u52a0\u70b9\u3001\u6811\u94fe\u52a0\u3001\u6811\u94fe\u67e5\u8be2 $k$ \u7684\u6392\u540d\u3002\n\n$n,m\\le 2\\times10^5$\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u505a\u6559\u4e3b\u7684\u9b54\u6cd5\uff0c\u7136\u540e\u505a\u65e0\u5904\u50a8\u5b58\u3002\n\n\u7136\u540e\u628a\u4e24\u9053\u9898\u878d\u5408\u5373\u53ef\u901a\u8fc7\u672c\u9898\uff0c\u968f\u673a\u6492\u70b9\u6811\u94fe\u5206\u5757\u7136\u540e\u5757\u5185\u6392\u5e8f\uff0c\u67e5\u8be2\u65f6\u5bf9\u6574\u5757\u5757\u5185\u4e8c\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n\\log n})$\u3002\n\n~~\u53ef\u89c1\u672c\u9898\u53ea\u6709\u84dd\u9898\u96be\u5ea6\u3002~~\n\n\u5bf9\u4e8e\u52a0\u70b9\uff0c\u5206\u6210\u82e5\u5e72\u60c5\u51b5\u8ba8\u8bba\u7136\u540e\u628a\u94fe\u91cd\u65b0\u8fde\u4e00\u4e0b\u5373\u53ef\u3002\n\n## \u5b9e\u73b0\n\n\u4f46\u662f\u7b2c\u4e00\u6b21\u5199\u6811\u94fe\u5206\u5757\uff0c\u6240\u4ee5\u5199\u6302\u4e86\u3002\n\n\u7ec6\u8282\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\n\n- \u6df1\u5ea6\u662f\u6bd4\u8f83\u96be\u7ef4\u62a4\u7684\uff0c\u6240\u4ee5\u6c42 LCA \u76f4\u63a5\u4ee4\u4e00\u4e2a\u70b9\u8df3\u5230\u6839\u5e76\u6807\u8bb0\u8def\u5f84\uff0c\u7136\u540e\u4ee4\u53e6\u4e00\u4e2a\u70b9\u53bb\u627e\u6807\u8bb0\uff0c\u6ce8\u610f\u540c\u5728\u4e00\u6761\u94fe\u4e0a\u65f6\u8981\u66b4\u529b\u5224\u4e00\u4e0b\u54ea\u4e2a\u6bd4\u8f83\u6d45\uff08\u8bb0\u5f97\u6e05\u7a7a\u6807\u8bb0\uff09\u3002\n- \u8fde\u94fe\u7684\u65f6\u5019\u6309\u7167 $B$ \u4e3a\u4e00\u8282\u62c6\u5f00\uff0c\u6700\u540e\u4fdd\u7559\u4e00\u8282\u5c0f\u4e8e $2B$ \u7684\uff08\u4ee4\u91cd\u94fe\u957f\u5ea6\u4e0d\u5c0f\u4e8e $B$\uff09\uff0c\u81ea\u52a8\u4fdd\u8bc1\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u7136\u540e\u8bb0\u5f97\u4e0b\u653e\u4e2d\u95f4\u7684\u94fe\u7684\u4fe1\u606f\u3002\n- \u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e\u6563\u70b9\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u65b9\u6700\u957f\u94fe\u7684\u957f\u5ea6\uff0c\u5728\u5411\u4e0a\u627e\u94fe\u7684\u65f6\u5019\u7ef4\u62a4\u5373\u53ef\u3002\n- \u5bf9\u4e8e\u8fb9\u4e2d\u95f4\u52a0\u70b9\u6709\u56db\u79cd\u60c5\u51b5\uff1a\n    1. \u5728\u94fe\u4e2d\u95f4\uff0c\u8fd9\u79cd\u60c5\u51b5\u5148\u628a\u94fe\u7684\u4fe1\u606f\u4e0b\u653e\u4e0b\u53bb\uff0c\u7136\u540e\u91cd\u8fde\u3002\n    2. \u5728\u4e24\u6761\u94fe\u7684\u4e2d\u95f4\uff0c\u56e0\u4e3a\u94fe\u662f\u4e0b\u95ed\u4e0a\u5f00\u7684\uff0c\u6240\u4ee5\u4e0b\u653e\u4e0b\u65b9\u94fe\u7684\u4fe1\u606f\uff0c\u7136\u540e\u91cd\u8fde\u4e0b\u65b9\u94fe\u5230\u4e0a\u65b9\u94fe\u7684\u9876\u90e8\u3002\n    3. \u5728\u4e0a\u65b9\u94fe\u7684\u5e95\u90e8\uff0c\u76f4\u63a5\u8fde\u5230\u4e0a\u65b9\u94fe\uff08\u8fd9\u79cd\u60c5\u51b5\u5f53\u6563\u70b9\u4e5f\u884c\uff09\u3002\n    4. \u5728\u6563\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u8981\u5224\u65ad\u4e0b\u65b9\u6700\u957f\u94fe\u7684\u957f\u5ea6\u52a0\u4e0a\u65b9\u5230\u94fe\u4e0a\u7684\u8ddd\u79bb\uff0c\u591f\u5927\u5c31\u4ece\u5e95\u90e8\u8fde\u4e0a\u6765\u3002\n- \u6ce8\u610f\u8fb9\u4e2d\u95f4\u52a0\u70b9\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u94fe\u4fe1\u606f\u9700\u8981**\u63d0\u524d\u624b\u52a8\u4e0b\u653e**\uff0c\u4e0d\u7136\u65b0\u70b9\u8fde\u597d\u4e4b\u540e\u518d\u4e0b\u653e\u4fe1\u606f\u4f1a\u6709\u95ee\u9898\u3002\n- \u5728\u70b9\u4e0b\u52a0\u70b9\u8981\u5224\u65ad\u4e0a\u65b9\u5230\u94fe\u4e0a\u7684\u8ddd\u79bb\uff0c\u7ef4\u62a4\u4e00\u4e0b\u7ed3\u6784\u3002\n- \u7ed3\u70b9 $1$ \u662f\u4e0d\u5728\u4efb\u4f55\u94fe\u4e2d\u7684\uff0c\u8fd9\u4e2a\u4e00\u5b9a\u8981\u6ce8\u610f\u3002\n- \u6839\u636e\u5b9e\u73b0\u590d\u6742\u5ea6\u8fd8\u4f1a\u6709\u82e5\u5e72\u7ec6\u8282\uff08\u4ee5\u4e0a\u662f\u6211\u7cbe\u7b80\u4ee3\u7801\u4e4b\u540e\u4ec5\u5269\u7684\uff09\u3002\n\n## \u5173\u4e8e\u5e38\u6570\n\n~~\u6211\u53bb\u9664\u4e86\u5927\u90e8\u5206\u7684\u8fd0\u884c\u7528\u65f6\uff0c\u4f46\u4fdd\u7559\u4e86\u4e00\u5c0f\u90e8\u5206\uff0c\u597d\u8ba9\u8bc4\u6d4b\u673a\u77e5\u9053\u5b83\u8bc4\u6d4b\u7684\u662f N \u6839\u53f7 Log\u3002~~\n\n\u8fd9\u4e2a\u505a\u6cd5\u5e94\u8be5\u4e0d\u5361\u5e38\uff0c\u6211\u7b2c\u4e00\u904d\u8c03\u51fa\u6765\u5c31 3.7s\uff0c\u4e2a\u4eba\u611f\u89c9\u8be2\u95ee\u5206\u5757\u7136\u540e\u91cd\u6784\u7684\u65b9\u6cd5\u662f\u6bd4\u8f83\u5361\u5e38\u7684\uff0c\u56e0\u4e3a\u6211\u8d5b\u540e\u5199\u4e86\u4e00\u4efd\u73b0\u5728\u6ca1\u8fc7\u3002\n\n---\n\n\u5199\u6302\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2a\u5361\u5e38\u5c0f\u5bc4\u5de7\uff0c\u5bf9\u4e8e\u6240\u6709\u975e\u6839\u7684\u70b9\u603b\u662f\u4fdd\u7559\u7b2c\u4e00\u6761\u94fe\u4e0d\u8fde\u6210\u94fe\uff08\u65e0\u8bba\u4efb\u4f55\u60c5\u51b5\u90fd\u4e0d\u8fde\u63a5\uff09\uff0c\u8ba9\u4e0a\u9762\u7684\u70b9\u8fde\u3002\n\n\u7136\u540e\u5c31\u662f\u5bf9\u4e8e\u66b4\u529b\u4fee\u6539\u5c0f\u4e8e\u4e00\u5b9a\u9608\u503c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u3002\n\n\u5757\u957f\u8c03\u5c0f\uff0c\u8dd1\u7684\u5f88\u5feb\uff0c2.5s \u5de6\u53f3\u3002\n\n## CODE\n\n\u542b\u5c11\u91cf\u6ce8\u91ca\u3002\n\n```c++\n#include<cstdio>\n#include<vector>\n#include<random>\n#include<chrono>\n#include<algorithm>\nusing namespace std;\nconst int N=400010,FSIZE=1<<24,B=280;\nint n,m,p[N],fa[N],up[N],in[N],dp[N],hs[N],path[N],tag[N],tmp[N];\nbool v[N];\nvector<int> t[N];\nvector<pair<int,int>> c[N];\nchar BuF[FSIZE],*InF=BuF,WuF[FSIZE],*OnF=WuF;\ntemplate<typename T>void read(T &x){\n    bool f=0;\n    for(x=0;48>*InF||*InF>57;*InF++=='-'&&(f=1));\n    for(;47<*InF&&*InF<58;x=x*10+(*InF++^48));\n    f&&(x=-x);\n}\nvoid write(int x){\n    char st[12]={},*c=st;\n    for(!x&&(*OnF++=48);x;x/=10) *++c=x%10^48;\n    for(;c!=st;*OnF++=*c--);\n    *OnF++='\\n';\n}\nvoid reset(int u){    // \u4e0b\u653e\u94fe\u7684\u4fe1\u606f\uff0c\u5e76\u5220\u9664\u8fd9\u6761\u94fe\n    c[u].clear();\n    if(int &i=tag[u]){\n        for(int x=up[u];u!=x;u=fa[u]) p[u]+=i;\n        i=0;\n    }\n}\nvoid set(int x,int y){    // \u5c06 x->y \u8fde\u63a5\u6210\u82e5\u5e72\u6761\u94fe\n    for(tmp[tmp[0]=1]=x;x!=y;tmp[++tmp[0]]=x=fa[x])\n        if(x==in[x]) reset(x);\n    for(int *i=tmp+1,*j=i,*r=tmp+tmp[0];i<r;i=j){\n        int *nxt=i+B;\n        if(nxt+B>r) nxt=r;\n        for(;j<nxt;++j){\n            up[*j]=*nxt;\n            c[in[*j]=*i].emplace_back(p[*j],*j);\n        }\n        sort(c[*i].begin(),c[*i].end());\n    }\n}\nint dfs(int x){    // \u9884\u5904\u7406\u521d\u59cb\u6492\u70b9\u60c5\u51b5\n    int re=0;\n    for(int i:t[x]) if(i!=fa[x]){\n        fa[i]=x;\n        if(int tmp=dfs(i)){\n            if(re){\n                set(tmp,x);\n                v[x]=1;\n            }else re=tmp;\n        }\n        if(dp[i]>dp[hs[x]]) hs[x]=i;\n    }\n    dp[x]=dp[hs[x]]+1;\n    return(!re&&v[x]?x:re);\n}\npair<int,int> getup(int i){    // \u83b7\u53d6\u5230\u4e0a\u65b9\u94fe\u7684\u8ddd\u79bb\u53ca\u7f16\u53f7\uff0c\u5e76\u7ef4\u62a4\u5411\u4e0b\u6700\u957f\u94fe\u7684\u957f\u5ea6\n    for(int x,dis=0;;++dis,i=x){\n        if(dp[i]>dp[hs[x=fa[i]]]) dp[x]=dp[hs[x]=i]+1;\n        if(in[x]||x==1) return(make_pair(x,dis));\n    }\n}\nvoid add(int u,int w){    // \u70b9\u4e0b\u52a0\u70b9\n    fa[++n]=u;\n    p[n]=w;\n    auto m=getup(n);\n    if(m.second>=B) set(n,m.first);\n}\nvoid add(int u,int v,int w){    // \u8fb9\u4e2d\u52a0\u70b9\n    if(fa[u]==v) swap(u,v);\n    if(in[v]) reset(in[v]);    // \u63d0\u524d\u624b\u52a8\u4e0b\u653e\n    fa[fa[v]=++n]=u;\n    p[n]=w;\n    if(in[v]&&in[v]!=in[u]) return(set(in[v],u));    // \u5728\u4e24\u6761\u94fe\u4e2d\u95f4\n    if(in[u]) return(set(u==in[u]?n:in[u],up[u]));    // \u5728\u94fe\u4e2d\u95f4\u6216\u5e95\u90e8\n    dp[n]=dp[hs[n]=v]+1;\n    auto m=getup(n);\n    if(m.second+dp[n]>=B+B){\n        int x=n;\n        for(;hs[x];x=hs[x]);\n        set(x,m.first);\n    }\n}\nint check(int u,int v){    // \u8fd4\u56de\u4e24\u7ed3\u70b9\u4e2d\u8f83\u6d45\u7684\u4e00\u4e2a\n    int x=in[u];\n    for(;x!=v&&x!=u;x=fa[x]);\n    return(x==v?u:v);\n}\nint lca(int u,int v){    // \u5982\u540d\n    int x=u,re=0;\n    for(;!up[x]&&x>1;x=fa[x]) path[x]=1;\n    for(;!up[v]&&v;v=fa[v])\n        if(path[v]){\n            re=v;\n            break;\n        }\n    for(;!up[u]&&u>1;u=fa[u]) path[u]=0;\n    if(re) return(re);\n    for(;x>1;x=up[x]) path[in[x]]=x;\n    for(;v>1;v=up[v])\n        if(path[in[v]]){\n            re=check(path[in[v]],v);\n            break;\n        }\n    for(;u>1;u=up[u]) path[in[u]]=0;\n    return(re?re:1);\n}\nvoid modify2(int u,int v,int w){    // \u5bf9\u94fe\u5185\uff08\u6216\u6563\u70b9\uff09\u66b4\u529b\u4fee\u6539\n    int b=in[u],sz=0;\n    for(;u!=v;u=fa[u],++sz) p[u]+=w;\n    if(b){\n        for(auto &x:c[b]) x.first=p[x.second];\n        if(sz<8)\n            for(auto i=c[b].begin()+1;i<c[b].end();++i)\n                for(auto j=i;j>c[b].begin()&&j[-1]>*j;--j) swap(j[-1],*j);\n        else sort(c[b].begin(),c[b].end());\n    }\n}\nvoid modify1(int u,int x,int w){    // \u4fee\u6539\u7956\u5148\u540e\u4ee3\u94fe\n    for(;!up[u]&&u!=x;u=fa[u]) modify2(u,fa[u],w);\n    for(;in[u]!=in[x];u=up[u])\n        if(in[u]==u) tag[u]+=w;\n        else modify2(u,up[u],w);\n    modify2(u,x,w);\n}\nvoid modify(int u,int v,int w){    // \u5982\u540d\n    int l=lca(u,v);\n    modify1(u,l,w);\n    modify1(v,l,w);\n    modify2(l,fa[l],w);\n}\nint query2(int u,int x,int w){    // \u5bf9\u94fe\u5185\uff08\u6216\u6563\u70b9\uff09\u66b4\u529b\u8be2\u95ee\n    int re=0;\n    for(w-=tag[in[u]];u!=x;u=fa[u]) re+=p[u]>=w;\n    return(re);\n}\nint query1(int u,int x,int w){    // \u8be2\u95ee\u7956\u5148\u540e\u4ee3\u94fe\n    int re=0;\n    for(;!up[u]&&u!=x;u=fa[u]) re+=p[u]>=w;\n    for(;in[u]!=in[x];u=up[u])\n        if(u==in[u])\n            re+=c[u].end()-lower_bound(c[u].begin(),c[u].end(),make_pair(w-tag[u],0));\n        else re+=query2(u,up[u],w);\n    return(query2(u,x,w)+re);\n}\nint query(int u,int v,int w){    // \u5982\u540d\n    int l=lca(u,v),re=p[l]>=w-tag[in[l]];\n    re+=query1(u,l,w);\n    re+=query1(v,l,w);\n    return(re);\n}\nint main(){\n    fread(BuF,1,FSIZE,stdin);\n    read(n);read(m);\n    for(int i=1;i<=n;++i) read(p[i]);\n    for(int i=1,x,y;i<n;++i){\n        read(x);read(y);\n        t[x].push_back(y);\n        t[y].push_back(x);\n    }\n    mt19937 rnd(chrono::steady_clock().now().time_since_epoch().count());\n    for(int i=v[1]=1;i<=n;i+=B) v[rnd()%n+1]=1;\n    set(dfs(1),1);    // \u6ce8\u610f\u624b\u52a8\u8fde\u63a5\u6700\u540e\u4e00\u6761\u4f20\u4e0a\u6765\u7684\u94fe\n    for(int i=0,o,x,y,w,lastans=0;i<m;++i){\n        read(o);read(x);read(y);\n        x^=lastans;\n        y^=lastans;\n        if(o!=2){\n            read(w);\n            w^=lastans;\n            switch(o){\n            case 1:add(x,y,w);break;\n            case 3:modify(x,y,w);break;\n            case 4:write(lastans=query(x,y,w));\n            }\n        }else add(x,y);\n    }\n    fwrite(WuF,1,OnF-WuF,stdout);\n    return(0);\n}\n```\n\n",
        "postTime": 1678353510,
        "uid": 111069,
        "name": "UNVRS",
        "ccfLevel": 0,
        "title": "[THUPC 2023 \u521d\u8d5b] \u79cd\u82f9\u679c \u9898\u89e3"
    }
]