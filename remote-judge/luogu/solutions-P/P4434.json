[
    {
        "content": "**\u7b97\u6cd5\uff1a\u6700\u8fd1\u516c\u5171\u7956\u5148\uff1b\u5e76\u67e5\u96c6\uff1b2-SAT**\n\n---\n\n\u6bcf\u4e00\u6761\u8fb9\u53ea\u6709\u4e24\u79cd\u5b9a\u5411\u7684\u72b6\u6001\uff0c\u4e00\u79cd\u4ece\u6839\u5f80\u53f6\u5b50\uff0c\u6211\u4eec\u4e0d\u59a8\u79f0\u201c\u5f80\u4e0b\u201d\uff1b\u4e00\u79cd\u4ece\u53f6\u5b50\u5f80\u6839\uff0c\u6211\u4eec\u4e0d\u59a8\u79f0\u201c\u5f80\u4e0a\u201d\n\n\u6bcf\u4e00\u5bf9\u7ea6\u675f\u90fd\u4f1a\u4f7f\u5f97\u82e5\u5e72\u6761\u8fb9\u4ea7\u751f\u201c\u4f60\u9009\u4e86\u4e00\u4e2a\u65b9\u5411\uff0c\u6211\u5c31\u5fc5\u987b\u9009\u4e00\u4e2a\u65b9\u5411\u201d\u7684\u9650\u5236\uff0c\u800c\u4e14\u5982\u679c\u6211\u4eec\u6784\u9020\u51fa\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\uff0c\u628a\u6bcf\u6761\u8fb9\u53cd\u5411\u540e\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u3002\u4e5f\u5c31\u662f\u5177\u6709\u5bf9\u79f0\u6027\n\n\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f88\u663e\u7136\u7684 2-SAT \u95ee\u9898\u4e86\n\n---\n\n\u63a5\u4e0b\u6765\u8981\u5c06\u8fd9\u4e9b\u201c$u$ \u5230 $v$ \u5b58\u5728\u8def\u5f84\u201d\u7684\u7ea6\u675f\u6761\u4ef6\u8f6c\u6210 2-SAT \u4e0a\u8fb9\u4e0e\u8fb9\u72b6\u6001\u7684\u7ea6\u675f\u6761\u4ef6\n\n\u6211\u4eec\u5c06\u8def\u5f84\u5206\u4e3a\u4e24\u79cd\uff1a\n\n- \u8fd9\u662f\u4e00\u6761\u4ece\u4e0a\u5230\u4e0b\u7684\u8def\u5f84\u3002\u4e5f\u5c31\u662f\u8bf4\u6df1\u5ea6\u8f83\u5c0f\u7684\u90a3\u4e2a\u70b9\u4e8b\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\u7684\u7956\u5148\n- \u8fd9\u6761\u8def\u5f84\u5148\u5f80\u4e0a\u8d70\uff0c\u518d\u5f80\u4e0b\u8d70\n\n\u5224\u65ad\u5c5e\u4e8e\u54ea\u79cd\u8def\u5f84\u7684\u65b9\u6cd5\u633a\u7b80\u5355\uff0c\u770b\u4e00\u4e0b\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u4e0d\u662f\u6df1\u5ea6\u8f83\u5c0f\u7684\u90a3\u4e2a\u70b9\u5373\u53ef\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u65b9\u5411\u90fd\u8981\u662f\u76f8\u540c\u7684\n\n\u8fd9\u6837\u4e0d\u9700\u8981\u5efa $n^2$ \u6761\u8fb9\uff0c\u56e0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u5177\u6709\u4f20\u9012\u6027\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u4e00\u6761\u8fb9\u5411\u5b83\u76f8\u90bb\u7684\u8fb9\u8fde\u5c31\u597d\u4e86\n\n\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u94fe\u4e0a\u8fde\u7eed\u7684\u4e09\u4e2a\u70b9 $g, f, x$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06 $g - f$ \u8fd9\u6761\u8fb9\u5230 $f - x$ \u8fd9\u6761\u8fb9\u8fde\u4e00\u4e0b\u9650\u5236\u6761\u4ef6\u5c31\u597d\u4e86\n\n\u6ce8\u610f\u8981\u8fde\u53cc\u5411\u3002\u4e5f\u5c31\u662f\u4e24\u6761\u8fb9 $x, y$\uff0c\u8bbe $0$ \u662f\u5411\u4e0a\u7684\u72b6\u6001\uff0c$1$ \u662f\u5411\u4e0b\u7684\u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u8fde\u63a5 $x_0 \\leftrightarrow y_0, x_1 \\leftrightarrow y_1$\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u8def\u5f84\uff0c\u6211\u4eec\u8bbe\u8def\u5f84\u4e24\u7aef\u70b9\u4e3a $u, v$\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u79f0\u4e3a $a$\n\n\u90a3\u4e48\u5728 $a \\sim u$ \u548c $a \\sim v$ \u8fd9\u4e24\u6761\u8def\u5f84\u4e0a\uff0c\u5c31\u548c\u7b2c\u4e00\u7c7b\u8def\u5f84\u7c7b\u4f3c\u4e86\n\n\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\uff0c$a \\sim u$ \u548c $a \\sim v$ \u8fd9\u4e24\u6761\u8def\u5f84\u7684\u8fb9\u65b9\u5411\u5fc5\u987b\u4e0d\u540c\uff08\u56e0\u4e3a\u8981\u5148\u4e0a\u540e\u4e0b\uff09\n\n\u8fd9\u6837\u5c31\u5728 $u$ \u5f80 $u$ \u7236\u4eb2\u7684\u8fb9\uff08\u8bb0\u4f5c $x$\uff09\uff0c$v$ \u5f80 $v$ \u7236\u4eb2\u7684\u8fb9\uff08\u8bb0\u4f5c $y$\uff09\uff0c\u52a0\u4e0a\u9650\u5236\u6761\u4ef6 $x_o \\leftrightarrow y_1, x_1 \\leftrightarrow y_0$ \u5c31\u597d\u4e86\n\n---\n\n\u7136\u540e\u65b0\u7684\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u8fd9\u6837\u66b4\u529b\u8fde\u662f $\\mathcal{O}(mn)$ \u7684\uff0c\u592a\u6162\u4e86\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4f1a\u597d\u591a\u6b21\u6784\u5efa\u4e00\u6761\u8fb9\u4e0e\u5b83\u76f8\u90bb\u7684\u8fb9\u7684\u5173\u7cfb\n\n\u6211\u4eec\u5e0c\u671b\u6bcf\u5bf9\u5173\u7cfb\u90fd\u53ea\u88ab\u6784\u5efa\u4e00\u6b21\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\n\n\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a $par_i$\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u5f80\u4e0a\u6700\u65e9\u7684\u6ca1\u6709\u88ab\u5408\u5e76\u7684\u8fb9\uff08\u8fde\u63a5\u7684\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\uff09\uff0c\u4e00\u5f00\u59cb $par_i = i$\n\n\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u5b8c\uff0c\u628a $par_i$ \u8d4b\u4e3a $fa_i$\uff0c\u5176\u4e2d $fa_i$ \u8868\u793a $i$ \u7684\u7236\u4eb2\u8282\u70b9\uff0c\u8868\u793a\u8fd9\u6761\u8fb9\u5904\u7406\u8fc7\u4e86\n\n\u8fd9\u6837\u6bcf\u6b21\u8df3\u8fb9\u7684\u65f6\u5019\u76f4\u63a5 $i = \\texttt{Find(i)}$\uff0c\u800c\u4e0d\u9700\u8981\u6bcf\u4e00\u6b21 $\\texttt{i = fa[i]}$ \u4e86\u3002\u8def\u5f84\u538b\u7f29\u540e\u53ef\u4ee5\u5feb\u5f88\u591a\n\n\n\u8fd9\u91cc\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f18\u5316\u5230 $\\mathcal{O}(n \\log n)$ \u4e86\n\n---\n\n\u8fd9\u8fb9 2-SAT \u7684\u9650\u5236\u6761\u4ef6\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\n\n\u7136\u540e\u6211\u4eec\u628a 2-SAT \u8dd1\u5b8c\u4e86\n\n\u9996\u5148\u5224\u4e00\u4e0b\u65e0\u89e3\u2014\u2014\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u72b6\u6001\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\n\n\u5426\u5219\u8ba1\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u4e3a $S$\uff0c\u7b54\u6848\u4e3a $2^{\\frac{S}{2}}$\n\n\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u5757\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u679c\u628a\u6240\u6709\u8fb9\u53cd\u5411\uff0c\u663e\u7136\u4ecd\u7136\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u4e14\u4e0d\u662f\u4e00\u5757\u5f3a\u8fde\u901a\u5206\u91cf\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\n\n\u800c\u7531\u4e8e\u8fd9\u5f20\u56fe\u662f\u5bf9\u79f0\u7684\uff0c\u6240\u4ee5\u8981\u628a $S$ \u9664\u4ee5 $2$\n\n---\n\n\u6700\u540e\u770b\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u6c42 LCA\uff1a$\\mathcal{O}(m \\log n)$\n\n\u5efa\u56fe\uff1a$\\mathcal{O}(m + n \\log n)$\n\n2-SAT\uff1a\u8fb9\u6570\u6700\u5927\u5230 $4m + 4(n - 1)$\uff0c\u70b9\u6570\u4e3a $2(n - 1)$\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n + m)$\n\n\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n \\log n + m \\log n)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nconst int MaxN = 300000 + 5, MaxM = 300000 + 5;\nconst int MaxV = 600000 + 5, MaxE = 1800000 + 5;\nconst int MaxLog = 20;\nconst int Mod = 1000000007;\n\nstruct Graph {\n  int cnte;\n  int Head[MaxV], To[MaxE], Next[MaxE];\n\n  inline void add_edge(int from, int to) {\n//    printf(\"add edge from %d to %d\\n\", from, to);\n    cnte++; To[cnte] = to;\n    Next[cnte] = Head[from]; Head[from] = cnte;\n  }\n};\n\nint N, M, S;\nint A[MaxM], B[MaxM], par[MaxN];\nint fa[MaxLog + 1][MaxN], dep[MaxN], tf[MaxN];\nint dfc, low[MaxV], dfn[MaxV], bel[MaxV];\nint stk[MaxV], tp; bool in_stack[MaxV];\nGraph G, D;\n\ninline int add(int x, int y) { return (x += y) >= Mod ? x - Mod : x; }\ninline int sub(int x, int y) { return (x -= y) < 0 ? x + Mod : x; }\ninline int mul(int x, int y) { return 1LL * x * y % Mod; }\ninline int pw(int x, int y) { int z = 1; for (; y; y >>= 1, x = mul(x, x)) if (y & 1) z = mul(z, x); return z; }\n\nvoid init() {\n  scanf(\"%d %d\", &N, &M);\n  for (int i = 1; i < N; ++i) {\n    int u, v;\n    scanf(\"%d %d\", &u, &v);\n    G.add_edge(u, v); G.add_edge(v, u);\n  }\n  for (int i = 1; i <= M; ++i) {\n    scanf(\"%d %d\", &A[i], &B[i]);\n  }\n}\n\nvoid dfs(int u) {\n  for (int i = G.Head[u]; i; i = G.Next[i]) {\n    int v = G.To[i];\n    if (v == fa[0][u]) continue;\n    fa[0][v] = u; tf[v] = (i + 1) / 2;\n    dep[v] = dep[u] + 1;\n    for (int j = 1; (1 << j) <= dep[v]; ++j)\n      fa[j][v] = fa[j - 1][fa[j - 1][v]];\n    dfs(v);\n  }\n}\n\ninline int getLca(int u, int v) {\n  if (dep[u] < dep[v]) std::swap(u, v);\n  int d = dep[u] - dep[v];\n  for (int i = MaxLog; i >= 0; --i)\n    if (d & (1 << i)) u = fa[i][u];\n  if (u == v) return u;\n  for (int i = MaxLog; i >= 0; --i)\n    if (fa[i][u] != fa[i][v]) {\n      u = fa[i][u];\n      v = fa[i][v];\n    }\n  return fa[0][u];\n}\n\nint Find(int x) { return x == par[x] ? x : par[x] = Find(par[x]); }\n\nvoid Tarjan(int u) {\n  low[u] = dfn[u] = ++dfc;\n  stk[++tp] = u; in_stack[u] = true;\n  for (int i = D.Head[u]; i; i = D.Next[i]) {\n    int v = D.To[i];\n    if (dfn[v] == 0) {\n      Tarjan(v);\n      low[u] = std::min(low[u], low[v]);\n    } else if (in_stack[v] == true) {\n      low[u] = std::min(low[u], dfn[v]);\n    }\n  }\n  if (low[u] == dfn[u]) {\n    S++;\n    do {\n      int v = stk[tp--];\n      bel[v] = S;\n      in_stack[v] = false;\n    } while (stk[tp + 1] != u);\n  }\n}\n\ninline void Merge_path(int u, int f) {\n//  printf(\"Merge_path(%d, %d)\\n\", u, f);\n  for (int i = Find(u); dep[i] > dep[f]; i = Find(i)) {\n    int e = tf[i], pe = tf[fa[0][i]];\n    if (fa[0][i] == f) break;\n    D.add_edge(e, pe);\n    D.add_edge(pe, e);\n    D.add_edge(e + N - 1, pe + N - 1);\n    D.add_edge(pe + N - 1, e + N - 1);\n    pe = e;\n    par[i] = fa[0][i];\n  }\n}\n\nvoid solve() {\n  dfs(1);\n\n  for (int i = 1; i <= N; ++i) par[i] = i;\n  for (int i = 1; i <= M; ++i) {\n    int u = A[i], v = B[i];\n    if (dep[u] < dep[v]) std::swap(u, v);\n    int Lca = getLca(u, v);\n//    printf(\"u = %d, v = %d, Lca = %d\\n\", u, v, Lca);\n    if (Lca == v) {\n      Merge_path(u, v);\n    } else {\n      Merge_path(u, Lca);\n      Merge_path(v, Lca);\n      D.add_edge(tf[u], tf[v] + N - 1);\n      D.add_edge(tf[u] + N - 1, tf[v]);\n      D.add_edge(tf[v] + N - 1, tf[u]);\n      D.add_edge(tf[v], tf[u] + N - 1);\n    }\n  }\n\n  for (int i = 1; i <= (N - 1) * 2; ++i)\n    if (dfn[i] == 0) Tarjan(i);\n  for (int i = 1; i < N; ++i)\n    if (bel[i] == bel[i + N - 1]) {\n      printf(\"%d\\n\", 0);\n      return;\n    }\n  printf(\"%d\\n\", pw(2, S / 2));\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```\n\n> PS: \u5982\u679c\u60a8\u5bf9\u8fd9\u4e9b\u7b97\u6cd5\u638c\u63e1\u5f97\u719f\u7ec3\u7684\u8bdd\uff0c\u60a8\u4f1a\u53d1\u73b0\u8fd9\u4e09\u4e2a\u8fc7\u7a0b\u6709\u4e00\u4e2a\u795e\u5947\u7684\u5171\u6027\uff1a\n>\n> \u6c42 LCA\u3001\u5efa\u56fe\u3001\u89e3 2-SAT \u8fd9\u4e09\u4e2a\u6b65\u9aa4**\u90fd\u53ef\u4ee5\u901a\u8fc7\u5e76\u67e5\u96c6\u6765\u89e3\u51b3\uff01**\n>\n> ~~\u8fd9\u6ca1\u529e\u6cd5\u8c01\u53eb\u4eba\u5bb6 Tarjan \u5bf9\u5e76\u67e5\u96c6\u4e86\u5982\u6307\u638c\u5462~~\n>\n> \u7136\u540e\u53ea\u9700\u8981\u5199\u4e09\u4e2a\u5e76\u67e5\u96c6\u5c31 A \u6389\u8fd9\u9053\u9898\u4e86\uff01\u6ca1\u6709\u5176\u5b83\u7b97\u6cd5\uff01\n>\n> \u771f\u7684\u60ca\u4e86\u2026\u2026",
        "postTime": 1557462912,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4434 \u3010[COCI2017-2018#2] \u200b\u200bUsmjeri\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1aLCA\uff0c\u5e76\u67e5\u96c6\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\uff0c\u4e00\u6761\u4ece $u$ \u5230 $v$ \u7684\u8def\u5f84\u53ef\u4ee5\u62c6\u5206\u4e3a\u4e24\u6761\uff1a\n\n- \u4ece $u$ \u8d70 $a$ \u6b21\u5411\u4e0a\u7684\u5230\u4e24\u70b9\u7684 $lca$\n\n- \u4ece\u4e24\u70b9\u7684 $lca$ \u8d70 $b$ \u6b21\u5411\u4e0b\u7684\u5230 $v$\n\n**$a$ \u548c $b$ \u53ef\u4ee5\u4e3a $0$**\n\n\u90a3\u4e48\u5982\u679c\u8981\u4f7f\u4ece $u$ \u53ef\u4ee5\u8d70\u5230 $v$ \u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- \u9700\u8981\u7b2c\u4e00\u6761\u8def\u4e0a\u6240\u6709\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\uff0c\u7b2c\u4e8c\u6761\u8def\u4e0a\u6240\u6709\u8fb9\u7684\u65b9\u5411\u4e5f\u4e00\u81f4\n\n- \u4e24\u6761\u8def\u7684\u65b9\u5411\u4e0d\u540c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u6761\u4ef6\u3002\n\n\u90a3\u8981\u4e4b\u540e\u8981\u5e72\u795e\u9a6c\u5462\uff1f\n\n\u9996\u5148\u770b\u5982\u4f55\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u6761\u8def\u4e0a\u7684\u6240\u6709\u8fb9\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e9b\u8fb9\u65b9\u5411\u76f8\u7b49\u4e86\u3002\n\n~~\u7b80\u7b80\u5355\u5355~~\n\n\u90a3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5462\uff1f\n\n\u5f88\u5bb9\u6613\u770b\u51fa\uff0c**\u5982\u679c\u6709 $A$ \u8fb9\u4e0e $B$ \u8fb9\u7684\u65b9\u5411\u4e0d\u76f8\u7b49\uff0c\u4e14 $A$ \u8fb9\u4e0e $C$ \u8fb9\u7684\u65b9\u5411\u4e5f\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48 $B$ \u8fb9\u4e0e $C$ \u8fb9\u7684\u65b9\u5411\u4e00\u5b9a\u76f8\u7b49**\u3002\n\n\u5927\u5bb6\u60f3\u5230\u4ec0\u4e48\uff1f\n\n\u5bf9\uff1c\uff08\uff3e\uff0d\uff3e\uff09\uff1e\u79cd\u7c7b\u5e76\u67e5\u96c6\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u79cd\u7c7b\u5e76\u67e5\u96c6\u7684\u601d\u60f3\u89e3\u51b3\u8fd9\u4e2a\u6761\u4ef6\uff01\n\n\u4f46\u662f\u8fd9\u65f6\u7684\u5e76\u67e5\u96c6\u5c31\u8981\u5f00\u4e24\u500d\u7a7a\u95f4\u3002\n\n## \u4f18\u5316\n\n\u4e0d\u8fc7\u8fd9\u662f\u51fa\u73b0\u7684\u65b0\u7684\u95ee\u9898\uff1a\u65f6\u95f4\u662f $O(nm)$ \u592a\u6162\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6bcf\u6b21\u5408\u5e76\u603b\u4f1a\u6709\u4e00\u4e9b\u96c6\u5408\u662f\u5408\u5e76\u8fc7\u4e86\u7684\u3002\n\n\u6240\u4ee5\u80fd\u4e0d\u80fd\u5728\u6bcf\u6b21\u5408\u5e76\u65f6\u53ea\u5408\u5e76\u6ca1\u5408\u5e76\u8fc7\u7684\u96c6\u5408\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a $par$ \u6570\u7ec4\u5b58\u50a8\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u9762\uff0c\u6700\u65e9\uff08\u6df1\u5ea6\u6700\u5927\uff09\u6ca1\u6709\u88ab\u5408\u5e76\u7684\u8fb9\u8fde\u63a5\u7684\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u8282\u70b9\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u627e\u5230\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u6240\u6709\u6ca1\u6709\u88ab\u5408\u5e76\u7684\u8fb9\u3002\n\n\u65f6\u95f4\u5c31\u88ab\u4f18\u5316\u5230\u4e86 $O(\\log_2{n})$ \u4e86\u3002\n\n## \u7b54\u6848\n\n\u90a3\u6700\u540e\u8f93\u51fa\u7684\u7b54\u6848\u662f\u4ec0\u4e48\uff1f\n\n\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\u7684\u8fb9\u65b9\u5411\u90fd\u8981\u76f8\u7b49\uff0c\u90a3\u4e48\u7b54\u6848\u80af\u5b9a\u548c\u5e76\u67e5\u96c6\u6570\u91cf\u6709\u5173\u3002\n\n\u5047\u8bbe\u5e76\u67e5\u96c6\u6570\u91cf\u4e3a $x$\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7b54\u6848\u5e94\u8be5\u662f $2^x$\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u662f\u79cd\u7c7b\u5e76\u67e5\u96c6\uff0c\u6570\u91cf\u91cc\u9762\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u865a\u8bbe\u7684\u8282\u70b9\uff0c\u6240\u6709\u6700\u540e\u7b54\u6848\u662f $2^{\\frac{x}{2}}$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 1000005\nint n,m,A[N],B[N],LCA[N];\nvector <int> t[N];\nint fa[N][25],dep[N];\nint par[N];\nint ans;\n#undef N\n#define s t[p][i]\ninline void dfs(int p,int f){\n    fa[p][0]=f;dep[p]=dep[f]+1;\n    for(int i(1);i<=20;++i) fa[p][i]=fa[fa[p][i-1]][i-1];\n    for(int i(0);i<t[p].size();++i){if(s^f){dfs(s,p);}}\n}\n#undef s\ninline int getlca(int x,int y){\n    if(dep[x]<dep[y]) swap(x,y);\n    for(int i(20);i>=0;--i){if(dep[fa[x][i]]>=dep[y]){x=fa[x][i];}}\n    if(x^y){\n        for(int i(20);i>=0;--i){if(fa[x][i]^fa[y][i]){x=fa[x][i];y=fa[y][i];}}\n        return fa[x][0];\n    }\n    return x;\n}\ninline int Find(int x){return par[x]^x?par[x]=Find(par[x]):x;}\ninline void merge(int x,int pre){\n    while(dep[fa[x][0]]>dep[pre]){\n        int f(fa[x][0]);\n        par[Find(x)]=Find(f);\n        par[Find(x+n)]=Find(f+n);\n        x=Find(x);\n    }\n}\n#define mod 1000000007\ninline int Pow(int a,int b){\n    int res(1);\n    for(;b;a=(1LL*a*a)%mod,b>>=1){if(b&1){res=(1LL*a*res)%mod;}}\n    return res;\n}\n#undef mod\nint main(){\n    std::ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i(1);i<=(n<<1);++i) par[i]=i;\n    for(int i(1);i<n;++i){\n        int u,v;cin>>u>>v;\n        t[u].push_back(v);\n        t[v].push_back(u);\n    }\n    dfs(1,0);\n    for(int i(1);i<=m;++i){\n        int x,y;cin>>x>>y;\n        if(dep[x]<dep[y]) swap(x,y);\n        A[i]=x;B[i]=y;\n        int lca(getlca(x,y));\n        LCA[i]=lca;\n        merge(x,lca);\n        merge(y,lca);\n    }\n    for(int i(1);i<=m;++i){\n        int x(A[i]),y(B[i]);\n        if(LCA[i]^y){\n            par[Find(x+n)]=Find(y);\n            par[Find(y+n)]=Find(x);\n        }\n    }\n    for(int i(2);i<=n;++i){\n        if(Find(i)==Find(i+n)){\n            puts(\"0\");\n            return 0;\n        }\n        ans+=(Find(i)==i)+(Find(i+n)==i+n);\n    }\n    cout<<Pow(2,ans>>1)<<endl;\n    return 0;\n}\n```",
        "postTime": 1646459863,
        "uid": 554574,
        "name": "gyyyyx",
        "ccfLevel": 0,
        "title": "[COCI2017-2018#2] \u200b\u200bUsmjeri"
    },
    {
        "content": "## \u63d0\u4f9b\u4e00\u79cd\u6811\u94fe\u5256\u5206+\u79cd\u7c7b\u5e76\u67e5\u96c6\u7684\u505a\u6cd5\n\n\n**\u524d\u7f6e\u829d\u58eb\uff1a\u6811\u5256\uff0c\u79cd\u7c7b\u5e76\u67e5\u96c6\u3002**\n\n\u5047\u8bbe\u6811\u4ee5 $1$ \u4e3a\u6839\uff0c\u8fb9\u7684\u65b9\u5411\u5206\u4e3a\u5411\u4e0a\uff08\u8fde\u5411\u6839\u8282\u70b9\uff09\u548c\u5411\u4e0b\uff08\u8fde\u5411\u5b50\u8282\u70b9\uff09\u3002\n\n\u8003\u8651\u4e00\u7ec4 $(x,y)$ \u7684\u9650\u5236\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/k0686g5x.png)\n\n\u5982\u56fe\uff0c\u8be5\u9650\u5236\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4e09\u4e2a\u6761\u4ef6\uff1a\n\n- $\\text{\\{x}\\rightarrow \\text{lca\\}}$ \u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\u3002\n\n- $\\text{\\{y}\\rightarrow \\text{lca\\}}$ \u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\u3002\n\n- $\\text{\\{x}\\rightarrow \\text{lca\\}},\\text{\\{y}\\rightarrow \\text{lca\\}}$ \u4e24\u6bb5\u8def\u5f84\u4e0a\u8fb9\u7684\u65b9\u5411\u4e0d\u540c\u3002\n\n\u5f88\u660e\u663e\uff0c\u4e0a\u56fe\u7684\u4fe1\u606f\u5c31\u662f\u79cd\u7c7b\u5e76\u67e5\u96c6\u53ef\u4ee5\u7ef4\u62a4\u7684\u4e1c\u897f\u3002\u53c8\u56e0\u4e3a\u5728\u6811\u4e0a\uff0c\u6240\u4ee5\u8981\u5957\u6811\u5256\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5e76\u67e5\u96c6\u7684 $f$ \u6570\u7ec4\u3002\u5982\u679c\u5c06\u533a\u95f4 $[l,r]$ \u5168\u90e8\u5408\u5e76\u5230  $X$\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06\u533a\u95f4 $[l,r]$ \u5168\u90e8\u63a8\u5e73\u4e3a $X$\u3002\n\n\u4f46\u5728\u63a8\u5e73\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u9012\u5f52\u533a\u95f4\u88ab $[l,r]$ \u5168\u90e8\u5305\u542b\uff0c\u4e0d\u80fd\u76f4\u63a5\u6253\u61d2\u6807\u8bb0\uff0c\u8fd8\u8981\u6ee1\u8db3\u9012\u5f52\u533a\u95f4\u5185\u5143\u7d20\u5728\u540c\u4e00\u96c6\u5408 $Y$ \u4e2d\u3002\u6b64\u65f6\u5408\u5e76\u96c6\u5408 $X,Y$\uff0c\u7136\u540e\u518d\u6253\u61d2\u6807\u8bb0\u3002\n\n\u867d\u7136\u8be5\u64cd\u4f5c\u6700\u9ad8\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u5230 $\\text{O(nlogn)}$\uff0c\u4f46\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f $\\text{O(nlogn)}$ \u7ea7\u7684\u3002\n\n**\u8bc1\u660e**\uff1a\n\n\u8bbe\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u5143\u7d20\u5728 $k$ \u4e2a\u4e0d\u540c\u7684\u96c6\u5408\u5185\uff0c\u5219\u4e00\u6b21\u63a8\u5e73\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\text{O(klogn)}$\u3002\u800c\u63a8\u5e73\u540e\uff0c\u603b\u96c6\u5408\u6570\u91cf\u51cf\u5c11 $(k-1)$ \u4e2a\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\text{O((}\\sum\\text{k)logn)=O(nlogn)}$\u3002\n\n\u90a3\u4e48\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f $2^{\u96c6\u5408\u6570}$\u3002\u5982\u679c\u5728\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e0d\u5408\u6cd5\u60c5\u51b5\uff0c\u76f4\u63a5\u8f93\u51fa $0$\u3002\n\n**\u4e00\u4e9b\u6613\u9519\u70b9\uff1a**\n\n- \u6ce8\u610f\u4ec0\u4e48\u65f6\u5019\u7528\u8282\u70b9 $\\text{dfn}$ \u5e8f\uff0c\u4ec0\u4e48\u65f6\u5019\u7528\u8282\u70b9\u7f16\u53f7\uff08\u662f\u6811\u5256\u8001\u6613\u9519\u70b9\u4e86\uff09\u3002\n\n- \u5982\u679c $\\text{y=lca}$\uff0c\u4e0d\u8981\u8003\u8651 $\\text{\\{x}\\rightarrow \\text{lca\\}},\\text{\\{y}\\rightarrow \\text{lca\\}}$ \u65b9\u5411\u4e0d\u4e00\u81f4\u7684\u6761\u4ef6\u3002\n\n- \u628a $\\text{\\{u}\\rightarrow \\text{v\\}}$ \u5408\u5e76\u5230\u96c6\u5408 $X$ \u65f6\uff0c\u8981\u627e\u5bf9 $X$\u3002\n\n$\\text{O(nlog}^\\text{2}\\text{n)}$ \u52a0\u81f3\u5c11\u516b\u500d\u5927\u5e38\u6570\uff0c\u7ec6\u8282\u5f88\u591a\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1000010;\nconst int N=maxn*5;\nconst int mod=1e9+7;\ninline int read(){\n\tint x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x;\n}\nstruct edge{\n\tint v,to;\n}e[maxn];\nint head[maxn],ecnt;\nvoid addedge(int u,int v){\n\te[++ecnt].v=v,e[ecnt].to=head[u],head[u]=ecnt;\n}\nbool k[N];\nint data[N],lz[N];\nint n,m,nn,f[maxn],F[maxn],dep[maxn],DFN[maxn],idx;\nint dfn[maxn],top[maxn],fa[maxn],zson[maxn]; \nint Find(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=Find(f[x]);\n}\nbool Query(int x,int y){//\u5408\u5e76\u96c6\u5408x,y\n\tint xx=(x>n?x-n:x+n);\n\tint yy=(y>n?y-n:y+n);\n\tf[Find(x)]=Find(y);\n\tif(Find(xx)==Find(x)||Find(y)==Find(yy)) return 0;\n    //\u4e0e\u5148\u524d\u4fe1\u606f\u77db\u76fe\n\treturn 1;\n}\nint fastpow(int n,int m){\n\tint S=1,a=n;\n\twhile(m){\n\t\tif(m&1) S=(S*1ll*a)%mod;\n\t\ta=(a*1ll*a)%mod,m>>=1;\n\t}\n\treturn S;\n}\nvoid pushdown(int i){\n\tif(!lz[i]) return ;\n\tlz[i<<1]=lz[i<<1|1]=lz[i];\n\tdata[i<<1]=data[i<<1|1]=lz[i];\n\tlz[i]=0;\n}\nbool Check(int i){//\u5224\u65ad\u533a\u95f4\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u5185\n\treturn (k[i<<1]&&k[i<<1|1]&&(Find(data[i<<1])==Find(data[i<<1|1])||!data[i<<1]||!data[i<<1|1]));\n}\nvoid build(int i,int l,int r){\n\tif(l>r){\n\t\tk[i]=1;//\u5982\u679cl>r,\u4e5f\u8ba4\u4e3a\u533a\u95f4\u5728\u540c\u4e00\u96c6\u5408\u4e2d\n\t\treturn ;\n\t} \n\tif(l==r){\n\t\tdata[i]=f[DFN[l]],k[i]=1;\n\t\treturn ;\n\t}\n\tint mid=l+r>>1;\n\tbuild(i<<1,l,mid);\n\tbuild(i<<1|1,mid+1,r);\n\tk[i]=Check(i),data[i]=data[i<<1];\n}\nvoid merge(int i,int l,int r,int L,int R,int x){\n\tif(l>R||r<L) return ;\n\tif(l>=L&&r<=R&&k[i]){ //\u9012\u5f52\u533a\u95f4\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u4e14\u88ab[l,r]\u5305\u542b\n\t\tif(!Query(data[i],x)){\n\t\t\tprintf(\"0\\n\");\n\t\t\texit(0);//\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\n\t\t} \n\t\tdata[i]=x,lz[i]=x;\n\t\treturn ;\n\t}\n\tpushdown(i);\n\tint mid=l+r>>1;\n\tmerge(i<<1,l,mid,L,R,x);\n\tmerge(i<<1|1,mid+1,r,L,R,x);\n\tk[i]=Check(i),data[i]=data[i<<1];\n}\nvoid Out(int i,int l,int r){//\u5c06\u5f53\u524d\u7684f\u6570\u7ec4\u5b58\u5230F\u4e2d\n\tif(l==r){\n\t\tF[DFN[l]]=Find(data[i]);\n\t\treturn ;\n\t}\n\tpushdown(i);\n\tint mid=l+r>>1;\n\tOut(i<<1,l,mid);\n\tOut(i<<1|1,mid+1,r);\n}\nint dfs1(int fath,int x){\n\tfa[x]=fath,dep[x]=dep[fath]+1;\n\tint sum=1,Max=-1,xx;\n\tfor(int i=head[x];i;i=e[i].to)\n\t\tif(e[i].v!=fath){\n\t\t\tsum+=(xx=dfs1(x,e[i].v));\n\t\t\tif(xx>Max) Max=xx,zson[x]=e[i].v;\n\t\t}\n\treturn sum;\n}\nvoid dfs2(int x){\n\tdfn[x]=++idx,dfn[x+n]=idx+n,DFN[idx]=x,DFN[idx+n]=n+x;\n\tif(zson[fa[x]]==x) top[x]=top[fa[x]];\n\telse top[x]=x;\n\tif(zson[x]) dfs2(zson[x]);\n\tfor(int i=head[x];i;i=e[i].to)\n\t\tif(e[i].v!=fa[x]&&e[i].v!=zson[x])\n\t\t\tdfs2(e[i].v);\n}\nvoid Solve(int x,int y){\n\tint X=0,Y=0,xx=x,yy=y;\n\t//{x->lca}\u5408\u5e76\u5230\u96c6\u5408X\n\t//{y->lca}\u5408\u5e76\u5230\u96c6\u5408Y\n  while(top[xx]^top[yy])//\u5148\u8dd1\u4e00\u6b21\u6811\u5256\u627e\u5230X\u548cY\n\t\tif(dep[top[xx]]>dep[top[yy]]) X=xx,xx=fa[top[xx]];\n\t\telse Y=yy,yy=fa[top[yy]];\n\tif(dep[xx]>dep[yy]) X=xx;\n\telse if(dep[yy]>dep[xx]) Y=yy;\t\n\twhile(top[x]^top[y])\n\t\tif(dep[top[x]]>dep[top[y]]){\n\t\t\tif(Y) merge(1,1,nn,dfn[top[x]],dfn[x],n+Y),merge(1,1,nn,dfn[top[x]]+n,dfn[x]+n,Y);\n\t\t\tif(X) merge(1,1,nn,dfn[top[x]],dfn[x],X),merge(1,1,nn,dfn[top[x]]+n,dfn[x]+n,X+n);\n\t\t\tx=fa[top[x]];\n\t\t}\t\n\t\telse{\n\t\t\tif(X) merge(1,1,nn,dfn[top[y]],dfn[y],n+X),merge(1,1,nn,dfn[top[y]]+n,dfn[y]+n,X);\n\t\t\tif(Y) merge(1,1,nn,dfn[top[y]],dfn[y],Y),merge(1,1,nn,dfn[top[y]]+n,dfn[y]+n,Y+n);\n\t\t\ty=fa[top[y]];\n\t\t}\n\tif(x==y) return ;\n\tif(dep[x]>dep[y]) {\n\t\tif(X) merge(1,1,nn,dfn[y]+1,dfn[x],X),merge(1,1,nn,dfn[y]+1+n,dfn[x]+n,n+X);\n\t\tif(Y) merge(1,1,nn,dfn[y]+1,dfn[x],Y+n),merge(1,1,nn,dfn[y]+1+n,dfn[x]+n,Y);\n\t}\n\telse{\n\t\tif(Y) merge(1,1,nn,dfn[x]+1,dfn[y],Y),merge(1,1,nn,dfn[x]+1+n,dfn[y]+n,n+Y); \n\t\tif(X) merge(1,1,nn,dfn[x]+1,dfn[y],X+n),merge(1,1,nn,dfn[x]+1+n,dfn[y]+n,X);\n\t\t//\u5982\u679cX,Y\u4e0d\u5b58\u5728(\u5373lca=x\u6216lca=y)\u5c31\u4e0d\u5408\u5e76,\u5408\u5e76\u53cd\u800c\u6709\u95ee\u9898\n\t\t//(\u76f8\u5f53\u4e8e\u5408\u5e76\u5230\u96c6\u54080\u4e2d,\u4f1a\u8bef\u5224\u4e0d\u5408\u6cd5)\n\t} \n}\nint main(){\n\tint x,y,cnt=0;\n\tn=read(),m=read(),nn=n+n;\n\tfor(int i=1;i<n;i++){\n\t\tx=read(),y=read();\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tfor(int i=1;i<=nn;i++) f[i]=i;\n\tdfs1(0,1),dfs2(1),build(1,1,nn);\n\tfor(int i=1;i<=m;i++){\n\t\tx=read(),y=read();\n\t\tSolve(x,y);\n\t}\n\tOut(1,1,nn);\n\tfor(int i=2;i<=n;i++)\n\t\tif(Find(F[i])==i) cnt++;\n\tprintf(\"%d\\n\",fastpow(2,cnt));\n\treturn 0;\n}\n```",
        "postTime": 1639632431,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "[COCI2017-2018#2] \u200b\u200bUsmjeri \u9898\u89e3"
    },
    {
        "content": "\u8fdc\u53e4\u6a21\u62df\u8d5b\u91cc\u7684\u4e00\u9053\u9898\uff0c\u524d\u6765\u5199\u7bc7\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\u3002  \n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u663e\u7136\u7684\u8f6c\u5316\u3002\u5c06\u6bcf\u6761\u8fb9\u67d3\u8272\uff0c\u90a3\u4e48\u539f\u95ee\u9898\u7b49\u4ef7\u4e8e\u6c42\u4e0b\u9762\u7684\u67d3\u8272\u7684\u65b9\u6848\u6570\uff1a  \n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5bf9 $a,b$\uff0c\u6211\u4eec\u8bb0 $\\operatorname{lca}(a,b)=c$ \u6709\n- $a\\sim c$ \u4e0a\u7684\u6240\u6709\u8fb9\u540c\u8272\u3002\n- $b\\sim c$ \u4e0a\u7684\u6240\u6709\u8fb9\u540c\u8272\u3002\n- $a\\sim c$ \u548c $b\\sim c$ \u4e0a\u7684\u8fb9\u4e0d\u540c\u8272\u3002  \n\n\u518d\u6b21\u8f6c\u5316\u3002\u6784\u9020\u4e00\u5f20\u56fe $(*)$\uff0c\u8fd9\u5f20\u56fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\u662f\u539f\u56fe\u7684\u4e00\u6761\u8fb9\u3002\u8fd9\u5f20\u56fe\u6ee1\u8db3\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 $a,b,c$\uff0c$a/b\\sim c$ \u4e0a\u7684\u6240\u6709\u8fb9\uff08\u65b0\u56fe\u7684\u70b9\uff09\u7528\u84dd\u8272\u8fb9\u8fde\u63a5\uff0c\u4e14\u5bf9\u4e8e $c\\not =a,b$ \u7528\u7ea2\u8272\u8fb9\u8fde\u63a5 $(a,fa[a])$ \u548c $(b,fa[b])$\u3002  \n\n\u73b0\u5728\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff0c\u5bf9\u8fd9\u5f20\u65b0\u56fe\u7684\u70b9\u67d3\u8272\uff0c\u4f7f\u5f97\u7528\u84dd\u8272\u8fb9\u8fde\u63a5\u7684\u70b9\u989c\u8272\u76f8\u540c\uff0c\u7528\u7ea2\u8272\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u989c\u8272\u4e0d\u540c\u3002\u663e\u7136\u6211\u4eec\u5148\u5206\u522b\u6c42\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u7ed3\u679c\u5373\u53ef\u3002\n\u8fd9\u6837\u8003\u8651\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u7684\u989c\u8272\u552f\u4e00\u786e\u5b9a\u4e86\u8fd9\u5f20\u56fe\u7684\u6240\u6709\u70b9\u7684\u989c\u8272\u3002\u8fd9\u4e5f\u540c\u65f6\u610f\u5473\u7740\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5408\u7406\u7684\u6d82\u8272\u65b9\u6848\uff0c\u6211\u4eec\u5bf9\u8fd9\u5f20\u56fe\u5b8c\u5168\u989c\u8272\u53cd\u8f6c\uff0c\u7ed3\u679c\u6ca1\u6709\u53d8\u5316\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u8fde\u901a\u5757\u662f\u5426\u4e0d\u5b58\u5728\u5408\u6cd5\u65b9\u6848\uff0c\u641c\u4e00\u4e0b\u5c31\u884c\u3002\u8fd9\u6837\u6211\u4eec\u7ecf\u8fc7\u591a\u6b21\u8f6c\u5316\uff0c\u95ee\u9898\u53ef\u4ee5\u8f7b\u6613\u89e3\u51b3\u3002\u5982\u679c\u5b58\u5728\u4e0d\u5408\u6cd5\u7684\u8fde\u901a\u5757\uff0c\u7b54\u6848\u4e3a $0$\uff0c\u5426\u5219\u662f $2^m$\uff0c\u5176\u4e2d $m$ \u4e3a\u8fde\u901a\u5757\u6570\u91cf\u3002  \n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\uff0c\u6211\u4eec\u5982\u4f55\u6784\u9020\u56fe $(*)$\u3002\u5982\u679c\u6211\u4eec\u66b4\u529b\u7684\u5efa\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7206\u70b8\u3002\u6211\u4eec\u8003\u8651 $(x,fa\n[x])$ \u662f\u5426\u548c $(fa[x],fa[fa[x]])$ \u7528\u84dd\u8272\u8fb9\u8fde\u63a5\uff0c\u53ef\u4ee5\u53e6\u5199\u4e00\u4e2a\u51fd\u6570 $\\operatorname{connect}(x)$\uff0c\u4ed6\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9\u5df2\u5411 $x$ \u5b50\u6811\u4e2d\u7684\u8282\u70b9\u8fde\u84dd\u8272\u8fb9\u7684\u6700\u5c0f\u6df1\u5ea6\u3002\u8fd9\u4e2a\u51fd\u6570\u503c\u53d6\u51b3\u4e8e\u5b83\u5b50\u8282\u70b9\u7684\u503c\u548c\u76f4\u63a5\u5411 $x$ \u8fde\u84dd\u8272\u8fb9\u7684\u70b9\u7684\u6df1\u5ea6\u3002\u540e\u8005\u53ef\u4ee5\u76f4\u63a5\u7528\u6bcf\u4e2a\u7ed9\u5b9a\u70b9\u5bf9\u7684 LCA \u66f4\u65b0\u5373\u53ef\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6 $O((m+n)\\log n)$\u3002  \n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nint connect(int x, int p) {\n\tfor (auto it : E[x])\n\t\tif (it != p) {\n\t\t\tint tmp = connect(it, x);\n\t\t\thigh[x] = min(high[x], tmp);\n\t\t\tif (tmp < depth[x])\n\t\t\t\tadd_edge(it, x, 0);\n\t\t}\n\treturn high[x];\n}\nint main(){\n\t while (m--) {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        int c = lca(a, b);\n        hi[a] = min(hi[a], depth[c]);\n        hi[b] = min(hi[b], depth[c]);\n        if (a != c && b != c)\n            add_edge(a, b, 1);\n    }\n}\n\t\n\tconnect(1, 0);\n```\n",
        "postTime": 1685520190,
        "uid": 762646,
        "name": "Piggy424008",
        "ccfLevel": 6,
        "title": "P4434 \u9898\u89e3"
    },
    {
        "content": "_\u6765\u6e90\uff1axsy **CSP-J \u6a21\u62df\u8d5b** 18C\u3002_  \n\u6458\u8981\uff1a**\u6bd4\u4e4b\u524d\u76f8\u540c\u9898\u89e3\u7b80\u5355**\u3002\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c\u500d\u589e/\u6811\u5256 $\\tt LCA$\u3002\n\n---\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u800c\u8a00\uff0c\u53ea\u8981\u56fa\u5b9a\u4e86\u5176\u4e2d\u4e00\u6761\u8fb9\u7684\u65b9\u5411\uff0c\u6574\u4e2a\u8def\u5f84\u7684\u65b9\u5411\u90fd\u4f1a\u56fa\u5b9a\u3002 \n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u5982\u679c\u4e24\u6761\u8def\u5f84\u7684\u8fb9\u6709\u4ea4\u96c6\uff0c\u8fd9\u4e24\u6761\u8def\u5f84\u7684\u65b9\u5411\u662f\u540c\u6b65\u7684\u3002\n\n\u6211\u4eec\u628a\u540c\u6b65\u7684\u82e5\u5e72\u8def\u5f84\u7684\u8fb9\u89c6\u4e3a\u4e00\u4e2a\u8054\u901a\u5757\u3002\u8fd9\u4e2a\u8054\u901a\u5757\u662f\u540c\u6b65\u7684\uff0c\u56e0\u6b64\u53ea\u4f1a\u6709\u6b63\u7740\u8d70\u548c\u53cd\u8fc7\u6765\u4e24\u79cd\u60c5\u51b5\u3002\n\n\u8bbe\u8054\u901a\u5757\u4e2a\u6570\u4e3a $x$\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8054\u901a\u5757\u90fd\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u4e3a $2^x$\u3002\n\n---\n\n\u63d0\u5230\u8054\u901a\u5757\uff0c\u53ef\u4ee5\u81ea\u7136\u60f3\u5230\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u8003\u8651\u600e\u4e48\u627e\u8054\u901a\u5757\u3002\u9996\u5148\u5bf9\u4e8e\u8be2\u95ee\u7684\u8def\u5f84\u90fd\u52a0\u4e00\u4e2a $1$ \u7684\u6743\u503c\u3002\n\n![](https://img-blog.csdnimg.cn/fcd5abf0be1e4a15a144f97c68a55f6c.png)\n\n\uff08\u6837\u4f8b $\\tt2$\uff0c\u84dd\u6846\u548c\u7ea2\u6846\u5206\u522b\u662f\u4e24\u6761\u8def\u5f84\uff09\n\n\u7136\u540e\u6211\u4eec\u5927\u80c6\u731c\u6d4b\uff0c\u76f8\u90bb\u7684\u4e24\u4e2a\u6743\u503c\u975e $0$ \u7684\u8fb9\u662f\u4e00\u4e2a\u8054\u901a\u5757\u7684\uff08\u771f\u7684\u662f\u8fd9\u6837\u5417\uff09\u3002\u8dd1\u4e00\u904d $\\tt dfs$ \u5c31\u505a\u5b8c\u4e86\u3002\n\n\u5982\u4e0a\u56fe\uff0c\u56db\u6761\u6709\u6743\u503c\u7684\u8fb9\u662f\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u4e24\u4e2a\u6743\u503c\u4e3a $0$ \u7684\u8fb9\u662f\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u7b54\u6848\u5c31\u662f $2^3=8$\u3002\n\n---\n\n\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u6837\u4f8b $\\tt3$\uff0c\u53d1\u73b0\u6709\u51fa\u73b0\u77db\u76fe\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u7b54\u6848\u662f $0$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u77db\u76fe\u6e90\u4e8e\uff1a\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84 $u\\to v$\uff0c$u\\to\\tt LCA$ \u6bb5\u7684\u65b9\u5411\u548c $v\\to\\tt LCA$ \u6bb5\u7684\u65b9\u5411\u5fc5\u662f\u4e00\u4e0a\u4e00\u4e0b\u521a\u597d\u76f8\u53cd\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u80fd\u5efa\u6b63\u53cd\u8fb9\u7684\u5e76\u67e5\u96c6\uff1a\u6269\u5c55\u57df\u5e76\u67e5\u96c6\u3002\u8303\u56f4\u4e3a $2n$\uff0c\u7528 $i+n$ \u8868\u793a $i$ \u7684\u53cd\u70b9\u3002\n\n+ $i$ \u548c $j$ \u8fde\u6b63\u8fb9\uff1a\u8fde $i\\longleftrightarrow j$\u3001$i+n\\longleftrightarrow j+n$\u3002\n+ $i$ \u548c $j$ \u8fde\u53cd\u8fb9\uff1a\u8fde $i+n\\longleftrightarrow j$\u3001$i\\longleftrightarrow j+n$\u3002\n\n\u7136\u540e\u6211\u4eec\u628a\u8def\u5f84\u62c6\u5206\u6210 $u\\to\\tt LCA$ \u548c $v\\to\\tt LCA$ \u6bb5\uff0c\u5e76\u5728\u8fd9\u4e24\u6bb5\u4e2d\u4efb\u53d6\u4e24\u70b9\u8fde\u4e0a\u4e00\u6761\u53cd\u8fb9\uff0c\u63a5\u7740\u4e24\u6bb5\u5185\u90e8\u90fd\u8fde\u6b63\u8fb9\u5c31\u884c\u3002\u8fd9\u6837\u5982\u679c\u6b63\u53cd\u51fa\u73b0\u51b2\u7a81\u90a3\u7b54\u6848\u5c31\u662f $0$\u3002\n\n---\n\n\u672c\u6765\u4ee5\u4e3a\u505a\u5b8c\u4e86\uff0c\u4f46\u662f\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4e24\u6761\u8def\u5f84\u521a\u597d\u76f8\u90bb\uff0c\u6309\u7167\u6211\u4eec\u7684\u5224\u5b9a\u8fd9\u4e24\u4e2a\u8def\u5f84\u662f\u540c\u6b65\u7684\u3002\u5b9e\u5219\u4e0d\u7136\u3002\n\n\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4\u4e24\u4e2a\u6743\u503c\uff0c\u4e00\u4e2a\u5c31\u662f\u5355\u7eaf\u7684\u8def\u5f84\u52a0\uff0c\u53e6\u4e00\u4e2a\u4e0d\u52a0\u8def\u5f84\u7684\u6700\u4e0a\u65b9\u8fb9\u3002\n\n---\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\n\nconst int N = 3e5 + 5;\nconst ll mod = 1e9 + 7;\n\nint n,m,a[N],b[N],ft[2 * N];\nint dep[N],fa[21][N],cnt;\nll res = 1;\nvector<int> G[N];\n\nint fnd(int x){\n\treturn x == ft[x] ? x : ft[x] = fnd(ft[x]);\n}\n\nvoid mrg(int x,int y,bool f){\n\tft[fnd(x)] = fnd(y + n - f * n);\n\tft[fnd(x + n)] = fnd(y + f * n);\n}\n\nvoid dfs(int u,int ft){\n\tdep[u] = dep[fa[0][u] = ft] + 1;\n\tfor(int i = 1;i <= 20;++i)\n\t\tfa[i][u] = fa[i - 1][fa[i - 1][u]];\n\tfor(int v : G[u]) if(v != ft) dfs(v,u);\n}\n\nint lca(int u,int v){\n\tif(dep[u] < dep[v]) swap(u,v);\n\tfor(int i = 20;~i;--i)\n\t\tif(dep[fa[i][u]] >= dep[v]) u = fa[i][u];\n\tif(u == v) return u;\n\tfor(int i = 20;~i;--i)\n\t\tif(fa[i][u] != fa[i][v]) u = fa[i][u],v = fa[i][v];\n\treturn fa[0][u];\n}\n\nint jump(int u,int d){\n\tif(d < 0) return -1;\n\tfor(int i = 20;~i;--i)\n\t\tif(d >> i & 1) u = fa[i][u];\n\treturn u;\n}\n\nvoid dfs(int u){\n\tfor(int v : G[u]) if(v != fa[0][u])\n\t\tdfs(v),a[u] += a[v],b[u] += b[v];\n\tfor(int v : G[u]) if(v != fa[0][u])\n\t\tif(b[v] && a[u]) mrg(u,v,1);\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1,u,v;i < n;++i){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tfor(int i = 1;i <= 2 * n;++i) ft[i] = i;\n\tdfs(1,0);\n\tfor(int i = 1,u,v,p;i <= m;++i){\n\t\tscanf(\"%d%d\",&u,&v),p = lca(u,v);\n\t\t++a[u],++a[v],a[p] -= 2;\n\t\tint x = jump(u,dep[u] - dep[p] - 1);\n\t\tint y = jump(v,dep[v] - dep[p] - 1);\t\t\n\t\tif(~x) ++b[u],--b[x];\n\t\tif(~y) ++b[v],--b[y];\n\t\tif(~x && ~y) mrg(x,y,0);\n\t}\n\tdfs(1);\n\tfor(int i = 2;i <= n;++i){\n\t\tif(fnd(i) == fnd(i + n)) res = 0;\n\t\tcnt += (ft[i] == i) + (ft[i + n] == i + n);\n\t}\n\tcnt /= 2; while(cnt--) (res *= 2) %= mod;\n\tprintf(\"%lld\\n\",res);\n\treturn 0;\n}\n```",
        "postTime": 1672995771,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "P4434 [COCI2017-2018#2] \u200b\u200bUsmjeri\u3010xsy CSP-J 18C\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problem/P4434)\n# \u5206\u6790\n\u8fd9\u9053\u9898\u5173\u952e\u7684\u5730\u65b9\u4fbf\u662f\u5982\u4f55\u786e\u5b9a\u65e0\u89e3\u60c5\u51b5(\u5982\u4f55\u4e3a\u8fb9\u5b9a\u5411)\uff0c\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u7528\u641c\u7d22\u89e3\u51b3\u95ee\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u6761\u8fb9\u80af\u5b9a\u5728\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u51fa\u73b0\u5728**\u591a\u6761\u4e0d\u540c\u7684\u8def\u5f84\u4e0a**\uff0c\u800c\u4e14\u8fd9\u6761\u8fb9\u5728\u4e0d\u540c\u8def\u5f84\u4e0a\u65b9\u5411\u4e5f\u4e0d\u540c\u7684\u8bdd\u663e\u7136\u5c31\u662f\u65e0\u89e3\u4e86\u3002\u5206\u79bb\u8def\u5f84\u6211\u4eec\u53ef\u4ee5\u7528[\u5f3a\u8fde\u901a\u5206\u91cf](https://www.luogu.org/blog/23j/you-xiang-tu-di-qiang-lian-tong-wen-ti)\u89e3\u51b3\uff0c\u4e0d\u8fc7\u65e2\u7136\u5df2\u7ecf\u6709\u5927\u4f6c\u8bb2\u4e86\u8fd9\u79cd\u505a\u6cd5\uff0c\u90a3~~\u849f\u84bb~~\u5c31\u6765\u8bb2\u8bb2\u5e76\u67e5\u96c6\u505a\u6cd5\u5427\u3002\n\n\u6211\u4eec\u5728\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u89e3\u51b3\u65f6\uff0c\u901a\u8fc7\u5c06\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u70b9\u540c\u65f6\u6253\u4e0a$scc$\u7684\u6807\u8bb0\u3002\u8fd9\u79cd\u505a\u6cd5\u5f88\u7c7b\u4f3c\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u3002\u6211\u4eec\u4e3a\u4e86\u8868\u793a\u53cc\u5411\u8def\u5f84\uff0c\u663e\u7136\u8981\u7528**\u865a\u70b9**\u7684\u601d\u60f3\u89e3\u51b3\u3002\u5bf9\u4e8e\u6bcf\u4e2a$(x_i,y_i)$\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5c06\u4e24\u79cd\u8def\u5f84\u8bbe\u7f6e\u51fa\u6765(\u4ece$y_i$\u5230$x_i$\u6216\u4ece$x_i$\u5230$y_i$)\u3002\u663e\u7136\uff0c\u6811\u4e0a\u8def\u5f84\u8981\u7ecf\u8fc7$lca$\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa$lca(x_i,y_i)$\u3002\u4f46\u662f\uff0c\u6811\u4e0a\u8def\u5f84\u7684\u6240\u6709\u8fb9\u663e\u7136\u90fd\u9700\u8981\u8fdb\u884c\u5e76\u67e5\u96c6\u7684\u66f4\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u66f4\u6539\u65f6\u9700\u8981**\u66b4\u529b\u722c\u5c71**\u3002\n\n\u81f3\u4e8e\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u82e5\u6709\u89e3\uff0c\u90a3\u4e48\u663e\u7136\u6240\u6709\u8fb9\u53cd\u5411\u4e5f\u662f\u4e00\u79cd\u3002\u5bf9\u4e8e\u6574\u4e2a\u56fe\uff0c\u6211\u4eec\u7684\u5e76\u67e5\u96c6\u5f88\u6709\u53ef\u80fd\u4e0d\u662f\u4e00\u68f5\uff0c**\u800c\u662f\u68ee\u6797**\u3002\u800c\u4e0d\u540c\u6811\u8fdb\u884c\u8fb9\u7684\u53cd\u5411\u662f**\u4e92\u76f8\u4e0d\u5f71\u54cd\u7684**\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u68f5\u6811\u5bf9\u7ed3\u679c\u7684\u8d21\u732e\u662f$2$\uff0c\u800c\u6211\u4eec\u5047\u8bbe\u5171\u6709$sum$\u68f5\u6811\uff0c\u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff1a\u7b54\u6848\u662f$2^{sum}$\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u5efa\u4e86\u865a\u70b9\uff0c\u6240\u4ee5$sum$\u68f5\u6811\u4e2d\u5305\u62ec\u4e86\u6709\u865a\u70b9\u7ec4\u6210\u7684\u6811\u3002\u800c\u865a\u70b9\u4e0e\u5b9e\u70b9\u7684\u6570\u91cf\u76f8\u7b49\uff0c\u90a3\u4e48\u6811\u7684\u4e2a\u6570\u4e5f\u5e94\u76f8\u7b49\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a$2^{\\frac{sum}{2}}$\u3002\n\n$Code:$\n```\n#pragma GCC optimize(2)\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 300000\n#define mod 1000000007\n#define LL long long\n\nint n , m;\nvector<int> graph[N + 2];\nint f[N + 2][21];\nint father[2 * N + 4];\nint deep[N + 2];\nLL ans;\nint x[N + 2] , y[N + 2] , lca[N + 2];\n\nvoid makeset(int n) {\n\tfor(int i = 1; i <= n; ++ i) father[i] = i;\n}\n\nint findset(int x) {\n\tif(x != father[x]) father[x] = findset(father[x]);\n\treturn father[x];\n}\n\nvoid in(int &x) {\n\tx = 0;\n\tchar c = getchar();\n\tbool f = 1;\n\twhile(c < '0' or c > '9') {\n\t\tif(c == '-') f = 0;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' and c <= '9') {\n\t\tx = (x << 1) + (x << 3) + c - '0';\n\t\tc = getchar(); \n\t}\n\tif(!f) x = (~x) + 1;\n}\n\nvoid pre(int u , int father) {\n\tdeep[u] = deep[father] + 1;\n\tf[u][0] = father;\n\tfor(int i = 0; i <= 18; ++ i) f[u][i + 1] = f[f[u][i]][i];\n\tint son = graph[u].size();\n\tfor(int i = 0; i < son; ++ i) {\n\t\tint v = graph[u][i];\n\t\tif(v == father) continue;\n\t\tpre(v , u);\n\t}\n}\n\nint ask(int x , int y) {\n\tif(deep[x] < deep[y]) swap(x , y);\n\tfor(int i = 19; i >= 0; -- i) {\n\t\tif(deep[f[x][i]] >= deep[y]) x = f[x][i];\n\t\tif(x == y) return x;\n\t}\n\tfor(int i = 19; i >= 0; -- i)\n\t\tif(f[x][i] != f[y][i]) {\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\treturn f[x][0];\n}\n\nvoid merge(int u , int lca) {\n\twhile(deep[f[u][0]] > deep[lca]) {\n\t\tfather[findset(u)] = findset(f[u][0]);\n\t\tfather[findset(u + n)] = findset(f[u][0] + n);\n\t\tu = findset(f[u][0]);\n\t}\n}\n\nLL qkpow(LL x , int y) {\n\tLL ret = 1;\n\twhile(y) {\n\t\tif(y & 1) ret = (ret * x) % mod;\n\t\tx = (x * x) % mod;\n\t\ty >>= 1;\n\t}\n\treturn ret;\n}\n\nint main() {\n\tin(n) , in(m);\n\tint u , v;\n\tmakeset(2 * n);\n\tfor(int i = 1; i < n; ++ i) {\n\t\tin(u) , in(v);\n\t\tgraph[u].push_back(v);\n\t\tgraph[v].push_back(u);\n\t}\n\tpre(1 , 0);\n\tfor(int i = 1; i <= m; ++ i) {\n\t\tin(x[i]);in(y[i]);\n\t\tlca[i] = ask(x[i] , y[i]);\n\t\tmerge(x[i] , lca[i]);\n\t\tmerge(y[i] , lca[i]);\n\t\t\n\t}\n\tfor(int i = 1; i <= m; ++ i) \n\t\tif(lca[i] != x[i] and lca[i] != y[i])\n\t\t\tfather[findset(x[i] + n)] = findset(y[i]) , father[findset(y[i] + n)] = findset(x[i]);\n\tfor(int i = 1; i <= n; ++ i) \n\t\tif(findset(i) == findset(i + n)) {\n\t\t\tputs(\"0\");\n\t\t\treturn 0;\n\t\t}\n\tint sum = 0;\n\tfor(int i = 1; i <= 2 * n; ++ i) {\n\t\tif(i % n == 1) continue;\n\t\tif(father[i] == i) sum ++;\n\t}\n\tans = qkpow(1LL * 2 , sum / 2);\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1564293376,
        "uid": 124142,
        "name": "C2021PBW",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4434 \u3010[COCI2017-2018#2] \u200b\u200bUsmjeri\u3011"
    }
]