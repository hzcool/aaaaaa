[
    {
        "content": "** _\u8fd9\u7bc7\u535a\u5ba2\u6211\u6253\u7b97\u76ae\u4e00\u4e0bqwq\uff0c\u9002\u5408\u521d\u5b66\u8005\u9605\u8bfb\uff08\u56e0\u4e3a\u8bb2\u7684\u662f\u5728\u592a\u7ec6\u4e86\uff09_ **\n# \u4e00\u3001\u9996\u5148\u7406\u89e3\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u610f\u4e49\uff1a\n  ## ~~\u6ca1\u610f\u4e49~~\n\n$emmmmmm$\u5176\u5b9e\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u610f\u4e49\u662f\u5f88\u6d45\u663e\u7684\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u63a8\u8350\u641c\u7d22\u554a\uff0c\u6bd4\u5982\u67e5\u627e\u6bd4\u5bf9\u4e00\u7bc7\u9898\u89e3\u91cc\u6709\u591a\u5c11\u4e2a\u76f8\u540c\u6216\u8005\u4e0d\u540c\u7684\u810f\u5b57\u7136\u540e$kkksc03$\u518d\u6839\u636e\u5176\u6570\u91cf\u3001\u6076\u52a3\u7a0b\u5ea6\u51b3\u5b9a\u7528\u591a\u5927\u7684\u5200\u5c06\u535a\u4e3b$kill$\u6389\u3002\u3002\u3002\u6240\u4ee5\u5b57\u7b26\u4e32\u64cd\u4f5c\u5f88\u91cd\u8981\u554a\u5582$qwq$\u3002\n   \n  \u518d\u6765\u8003\u8651\u65f6\u95f4\uff1a\u5982\u679c\u767e\u5ea6\u5bf9\u4e8e\u4e00\u4e2a\u4eba\u7684\u4e00\u6b21\u201c\u5e38\u641c\u201d\u63a8\u8350\u9700\u8981$10s$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5168\u56fd\u7f51\u53cb\u6765\u8bf4\uff0c\u540c\u65f6\u4e0a\u7f51\u7684\u4eba\u7fa4\u57fa\u6570\u5f88\u9ad8\uff0c\u90a3\u4e48\u5982\u679c\u670d\u52a1\u5668\u6027\u80fd\u4e0d\u597d\u7684\u8bdd\uff0c\u6015\u4e0d\u662f\u8981\u4e09\u661f$note7$ $qwq$\uff1f\uff1f\uff1f\n  \n  \u6240\u4ee5\u554a\uff0c\u6253\u9020\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u7b97\u6cd5\u662f\u5f88\u6709\u5fc5\u8981\u6ef4\uff01\n  \n# \u4e8c\u3001\u8a00\u5f52\u6b63\u4f20\uff0c\u6d45\u6790\u5b57\u7b26\u4e32\u54c8\u5e0c\n   \u54c8\u5e0c\u5176\u5b9e\u662f\u6240\u6709\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e2d\uff0c\u7b14\u8005\u8ba4\u4e3a\u6700\u7b80\u5355\u7684\u64cd\u4f5c\u4e86\uff08except\u8f93\u5165\u8f93\u51faqwq\uff09\u3002\u54c8\u5e0c\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u53ef\u4ee5\u770b\u4f5c**\u5bf9\u4e00\u4e2a\u4e32\u7684\u5355\u5411\u52a0\u5bc6\u8fc7\u7a0b**\uff0c\u5e76\u4e14\u9700\u8981\u4fdd\u8bc1\u6240\u52a0\u7684\u5bc6**\u4e0d\u80fd\u9ad8\u6982\u7387\u91cd\u590d**\uff08\u5c31\u50cf\u4e0d\u80fd\u8ba9\u9694\u58c1\u8001\u738b\u8f7b\u6613\u5730\u7528\u5b83\u5bb6\u7684\u94a5\u5319\u6253\u5f00\u4f60\u5bb6\u95e8\u4e00\u6837qwq\uff09\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u66ff\u4ee3\u4e00\u4e9b\u5f88\u8d39\u65f6\u95f4\u7684\u64cd\u4f5c\u3002\n   \n   \u6bd4\u5982\uff0c\u6700\u5e38\u89c1\u7684\uff0c\u5f53\u7136\u5c31\u662f\u901a\u8fc7\u54c8\u5e0c\u6570\u7ec4\u6765\u5224\u65ad\u51e0\u4e2a\u4e32\u662f\u5426\u76f8\u540c\uff08\u6d1b\u8c37P3370\uff09\u3002\u6b64\u5904\u7684\u64cd\u4f5c\u5462\uff0c\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\uff0c**\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u56fa\u5b9a\u7684\u8f6c\u6362\u65b9\u5f0f\uff0c\u5c06\u76f8\u540c\u7684\u4e32\u4f7f\u5176\u7684\u201c\u5bc6\u201d\u4e00\u5b9a\u76f8\u540c\uff0c\u4e0d\u540c\u7684\u4e32   _\u5c3d\u91cf_  \u4e0d\u540c\u3002**\n   \n   \u6b64\u5904\u6709\u4eba\u6307\u51fa\uff1a\u90a3\u96be\u9053\u4e0d\u80fd\u5148\u6bd4\u5bf9\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u7136\u540e\u6bd4\u5bf9ASCLL\u7801\u4e4b\u548c\u5417\uff1f\u4e8b\u5b9e\u4e0a\u663e\u7136\u662f\u4e0d\u884c\u7684\uff08\u6bd4\u5982ab\u548cba\uff0c\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u4e32\uff0c\u4f46\u662f\u5982\u662f\u505a\u5374\u4f1a\u8ba9\u5176\u8ba4\u4e3a\u662fqwq\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u5c31\u53eb\u505a**$hash$\u51b2\u7a81**\uff0c\u5e76\u4e14\u5728\u5982\u6b64\u7684\u5355\u5411\u52a0\u5bc6\u54c8\u5e0c\u4e2d\uff0c$hash$\u51b2\u7a81\u7684\u60c5\u51b5\u5728\u6240\u96be\u514d\uff08bzoj\u5c31\u6709\u8fd9\u79cd\u8ba9\u4f60\u7ed9\u51fa\u4e00\u7ec4\u6837\u4f8b\uff0c\u4f7f\u5f97\u4e00\u6bb5\u54c8\u5e0c\u4ee3\u7801\u51b2\u7a81\u7684\u9898\uff0c\u8bfb\u8005\u53ef\u4ee5\u5c1d\u8bd5\u5c1d\u8bd5\uff09\u3002\n   \n   \u800c\u6211\u4eec\u6b64\u5904\u4ecb\u7ecd\u7684\uff0c\u5373\u662f\u6700\u5e38\u89c1\u7684\u4e00\u79cd\u54c8\u5e0c\uff1a**\u8fdb\u5236\u54c8\u5e0c**\u3002\u8fdb\u5236\u54c8\u5e0c\u7684\u6838\u5fc3\u4fbf\u662f**\u7ed9\u51fa\u4e00\u4e2a\u56fa\u5b9a\u8fdb\u5236$base$\uff0c\u5c06\u4e00\u4e2a\u4e32\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u770b\u505a\u4e00\u4e2a\u8fdb\u5236\u4f4d\u4e0a\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e32\u5c31\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a$base$\u8fdb\u5236\u7684\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5c31\u662f\u8fd9\u4e2a\u4e32\u7684\u54c8\u5e0c\u503c\uff1b\u5219\u6211\u4eec\u901a\u8fc7\u6bd4\u5bf9\u6bcf\u4e2a\u4e32\u7684\u7684\u54c8\u5e0c\u503c\uff0c\u5373\u53ef\u5224\u65ad\u4e24\u4e2a\u4e32\u662f\u5426\u76f8\u540c**\n   \n   \u5949\u4e0a$P3370ac$\u4ee3\u7801\uff08\u5355\u54c8\u5e0c\uff09\uff1a\n   \n   ```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\ntypedef unsigned long long ull;\null base=131;\null a[10010];\nchar s[10010];\nint n,ans=1;\nint prime=233317; \null mod=212370440130137957ll;\null hashe(char s[])\n{\n\tint len=strlen(s);\n\tull ans=0;\n\tfor (int i=0;i<len;i++)\n    ans=(ans*base+(ull)s[i])%mod+prime;\n    return ans;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t\ta[i]=hashe(s);\n\t}\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tif(a[i]!=a[i+1])\n\t\tans++;\n\t}\n\tprintf(\"%d\",ans);\n} \n   \n```\n   \n   \u5f53\u7136\uff0c\u518d\u597d\u7684\u54c8\u5e0c\u4e5f\u4f1a\u6709\u51b2\u7a81\uff0c\u6b64\u65f6\u6709\u4e24\u79cd\u505a\u6cd5\u53ef\u4ee5\u89e3\u51b3\u6216\u8005\u964d\u4f4e\u54c8\u5e0c\u51b2\u7a81\u7684\u53ef\u80fd\u6027\n   \n  ## 1\u3001\u65e0\u9519\u54c8\u5e0c\n   \n   \u5176\u5b9e\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6211\u4eec\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5df2\u7ecf\u8bde\u751f\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u503c\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6765\u5224\u65ad\u662f\u5426\u548c\u5df2\u6709\u7684\u54c8\u5e0c\u503c\u51b2\u7a81\uff0c\u5982\u679c\u51b2\u7a81\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u65b0\u7684\u54c8\u5e0c\u503c\u4e0d\u65ad\u52a0\u4e0a\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u76f4\u5230\u4e0d\u518d\u51b2\u7a81\uff08\u6bd4\u5982somebody\u2019s birthday qwq\uff09\u3002\n   \n   \u5148\u8d34\u4ee3\u7801\uff1a\n```cpp\nfor(int i=1;i<=m;i++)//m\u4e2a\u4e32\n{\ncin>>str;//\u4e0b\u4e00\u884c\u7684check\u4e3abool\u578b \nwhile(check[hash(str)])hash[i]+=19260817;\nhash[i]+= hash(str) ;\n}\n```\n\u6b63\u5982\u4e0b\u56fe\uff08\u4eb2\u624b\u505a\u7684~~\u82f1\u6587\u9ad8\u903c\u683c~~\uff09\uff1a\n\n![](http://images.cnblogs.com/cnblogs_com/pks-t/1233651/o_bwb.png)\n\n\u4f46\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7c7b\u4f3c\u6876\u67e5\u627e\uff0c\u4f46\u662f\u6876\u67e5\u627e\u7684\u5f0a\u7aef2\u5c31\u4f1a\u5f88\u6076\u5fc3\u2014\u2014\u6570\u636e\u8fc7\u5927\uff0c$check$\u6570\u7ec4\u65e0\u80fd\u4e3a\u529b\u6765\u652f\u6301\u4e0a\u4ebf\u4e2a\u7a7a\u95f4\uff08\u5f0a\u7aef1\u662f\u7531\u4e8e\u6570\u636e\u5177\u6709\u8df3\u8dc3\u6027\uff0c\u6d6a\u8d39\u6700\u540e\u7684\u7edf\u8ba1\u6b21\u6570\uff0c\u4f46\u5728\u6b64\u4e0d\u662f\u7279\u522b\u660e\u663e\uff0c\u5c31\u5f53\u6211\u76ae\u4e86\u4e00\u4e0bqwq\uff09\n\n## 2\u3001\u591a\u91cd\u54c8\u5e0c\n\n\u8fd9\u5176\u5b9e\u5c31\u662f\u4f60\u7528\u4e0d\u540c\u7684\u4e24\u79cd\u6216\u591a\u79cd\u65b9\u5f0f\u54c8\u5e0c\uff0c\u7136\u540e\u5206\u522b\u6bd4\u5bf9\u6bcf\u4e00\u79cd\u54c8\u5e0c\u503c\u662f\u5426\u76f8\u540c\u2014\u2014\u663e\u7136\u662f\u589e\u52a0\u4e86\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u4e5f\u786e\u5b9e\u589e\u52a0\u4e86\u5176\u6b63\u786e\u6027\u3002\n\n![](http://images.cnblogs.com/cnblogs_com/pks-t/1233651/o_owo.png)\n\n\u4e0b\u9762\u76ae\u4e00\u4e2a\u54c8\u5e0c\u81ea\u52a8\u673aqwq\uff08\u4e0d\u7528\u767e\u5ea6\u4e86\uff0c\u540d\u5b57\u81ea\u5df1\u8d77\u7684\uff09\n\n```cpp\n//\u54c8\u5e0c\u81ea\u52a8\u673a,\u9700\u8981\u4e8c\u7ef4hash\u6570\u7ec4 \nfor\u4f2a\u4ee3\u7801\u6392\u5e8f\uff0c\u7528\u6765\u4f7f\u54c8\u5e0c\u503c\u5355\u8c03\uff08\u66f4\u597d\u5224\u65ad\u76f8/\u4e0d\u540c\u7684\u6570\u91cf\uff09 \nfor(int i=1;i<=m;i++){\n\tcheck=1\uff1b \n\tfor(int j=1;j<=qwq;j++)//\u76ae\u4e00\u4e0b\n\t\tif(hash[j][i]==hash[j][i+1]){check=0;break;} \n\tif(check)ans++;//\u6b64\u4e3a\u5224\u65ad\u76f8\u540c\u4e2a\u6570 \n} \n\n```\n\n# \u4e09\u3001\u5b57\u5178\u6811\u6d45\u6790\n\n##   1\u3001\u7b80\u8981\u4ecb\u7ecd\n\n\u9996\u5148\u8981\u77e5\u9053\uff0c\u5b57\u5178\u6811\u662f\u4e00\u79cd\u5047\u60f3\u6570\u636e\u7ed3\u6784\uff08\u6570\u636e\u7ed3\u6784\u4e0d\u90fd\u662f\n\u5047\u60f3\u7684\u5417qwq\uff09\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\u2014\u2014\u4e3a\u4ec0\u4e48\u662f\u8981\u7528\u5b57\u5178\u6811\u5462\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u7528\u7c7b\u4f3c\u5b57\u5178\u94fe\u8868\u4e4b\u7c7b\u7684\u4e1c\u897f\u5462\uff1f\u5f88\u7b80\u5355\uff0c\u6240\u6709\u6811\u5f62\u7ed3\u6784\n\u90fd\u6709\u4e00\u4e2a\u57fa\u672c\u7279\u70b9\uff0c\u5c31\u662f\n\n**\u5143\u7d20\u4e0e\u5143\u7d20\u95f4\u7684\u5173\u7cfb\u4e3a\u7ee7\u627f\u7684\u4e00\u5bf9\u591a\u5173\u7cfb**\u3002\n\n\u62ff\u5b57\u5178\u6811\u6765\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u6709\u51e0\u4e2a\u5b50\u5143\u7d20\uff0c\u4f5c\u4e3a\u5b83\u4e4b\u540e\u7684\u5b57\u6bcd\uff1b**\u800c\u5018\u82e5\u8981\u6bd4\u5bf9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\uff0c\u53ea\u9700\u8981\u6bd4\u5bf9\u5728\u8fd9\u68f5\u5b57\u5178\u6811\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u4e32\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7956\u5148\u94fe(\u5373\u524d\u7f00)\u662f\u5426\u76f8\u540c\uff0c\u5e76\u4e14\u5bf9\u4e8e\u7956\u5148\u94fe\u6765\u8bf4\uff0c\u5e76\u4e0d\u7528\u9010\u4e2a\u6bd4\u8f83\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u8bbf\u95ee\u5c31\u884c**\n\n\u6bd4\u5982\u4e0b\u56fe\u5c31\u662f\u4e00\u68f5$Trie$\uff0c\u8fd9\u91cc\u7528\u989c\u8272\u533a\u5206\u5355\u8bcd\u8def\u5f84\u4e0a\u7684\u70b9\n![](http://images.cnblogs.com/cnblogs_com/pks-t/1233651/o_qwq.png)\n\n ## 2\u3001\u5b57\u5178\u6811\u57fa\u7840\u4e0e\u5982\u4f55\u5efa\u6811\uff08\u63d2\u5165\u64cd\u4f5c\uff09\n \n\u9996\u5148\uff0c\u5173\u4e8e\u5b57\u5178\u6811\uff0c\u6211\u4eec\u4e00\u822c\u4e0d\u662f\u7528\u70b9\u6765\u5b58\u50a8\u5b57\u7b26\u7684\uff0c\u800c\u662f\u7528\u8fb9\u2014\u2014\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e4b\u540e\u518d\u8bf4\uff08\u5341\u5206\u76ae\u5730\u5356\u4e2a\u5173\u5b50qwq\uff09\u3002\n \n\u91cd\u65b0\u9996\u5148\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5b57\u5178\u6811\u662f\u4e0d\u4f1a\u4f7f\u7528\u6839\u8282\u70b9\u7684\uff0c\u539f\u56e0\u5f88\u6d45\u663e\uff0c**\u56e0\u4e3a\u6839\u8282\u70b9\u7684\u4e2a\u6570\u51b3\u5b9a\u7a76\u7adf\u6709\u51e0\u68f5\u5b57\u5178\u6811**\uff0c\u800c\u901a\u5e38\u5b57\u5178\u6811\u662f\u53ea\u6709\u4e00\u68f5\u7684\uff0c\u5426\u5219\u4ea7\u751f\u68ee\u6797\u4f1a\u5f88\u9ebb\u70e6\uff08qwq\u4f60\u76ae\u4f60\u5c31splay\uff0c\u5e76\u4e14\u5982\u679c\u6709\u68ee\u6797\u7684\u8bdd\u5e94\u8be5\u53eb\u505a\u201c\u5b57\u5178\u68ee\u6797\u201d\u554a\u5582\uff09\u3002\n\n\u4f46\u662f\u6211\u4eec\u8981\u77e5\u9053\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u9898\u4e2d\u6240\u6709\u7684\u4e32\u90fd\u6709\u516c\u5171\u524d\u7f00\uff08\u80af\u5b9a\u4e0d\u4f1a\u7684\u5427qwq\uff09\uff0c**\u53ef\u5982\u679c\u6839\u8282\u70b9\u552f\u4e00\uff0c\u5c31\u4ee3\u8868\u4ed6\u4eec\u4e00\u5b9a\u6709\u516c\u5171\u524d\u7f00\uff0c\u5e76\u4e14\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e1**\u3002\n\n\u5176\u6b21\uff0c**\u5b57\u5178\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u90fd\u80af\u5b9a\u4f1a\u5c0f\u4e8e\u67d0\u4e2a\u6570\u3002**\n\n\u5982\u679c\u5b57\u5178\u6811\u91cc\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u90a3\u4e48\u201c\u67d0\u4e2a\u6570\u201d\u5c31\u662f26\uff1b\u5982\u679c\u5927\u5c0f\u5199\u90fd\u6709\uff0c\u201c\u67d0\u4e2a\u6570\u201d\u5c31\u5e94\u8be5\u662f52\uff08\u8bc1\u660e\u8fc7\u7a0b\uff1a\u663e\u7136\uff09\uff1b\n\n\u5e76\u4e14**\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u7684\u8fb9\u90fd\u4e0d\u540c**\uff0c\u8fd9\u6761\u6027\u8d28\u53ef\u4ee5\u4fbf\u4e8e\u6211\u4eec\u5224\u65ad\u5728\u67d0\u4e00\u68f5\u5b57\u5178\u6811\u5230\u5e95\u6709\u6ca1\u6709\u67d0\u6761\u94fe\uff1a**\u53ea\u8981\u524d\u7f00\u4e0d\u7b26\u5408\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u5224\u65ad\uff0c\u56e0\u4e3a\u5fc5\u7136\u6ca1\u6709\uff08\u540c\u4e00\u6df1\u5ea6\u3001\u540c\u4e00\u7236\u4eb2\uff0c\u8fb9\u4e0e\u8fb9\u5fc5\u5b9a\u4e92\u5f02\uff09**\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u9009\u62e9\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u6811\uff0c\u5177\u4f53\u89e3\u91ca\u89c1\u6ce8\u91ca\uff1a\n \n```cpp\n//\u5efa\u6811\uff08\u5176\u5b9e\u5c31\u662f\u5b58\u70b9\u5566\uff09\nstruct nodes{\n\tint son[26];\n//\u6b64\u5904\u53ea\u8003\u8651\u5c0f\u5199\u5b57\u6bcd\u5b57\u5178\u6811\n    bool mark;\n// \u6b64\u4e3a\u6807\u8bb0\uff0c\u4f5c\u7528\u4e0b\u9762\u8bf4 \n}trie[10001]; \nint root=0,num=0;\n//\u6839\u8282\u70b9\u6c38\u4e45\u4e3a0 qwq \nbool insert_check(char *str)\n{\n\tint position=root;//\u521d\u59cb\u5316\u4f4d\u7f6e,\u8ddf\u6df1\u5ea6\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb \n\tfor(int i=0;str[i];i++)\n\t{\n\t\tint symbol=(int)str[i]-'a';\n/*\u6b64\u5904\u5b9e\u9645\u662f\u56e0\u4e3a\u6211\u4eec\u7684trie\u90fd\u662f\u5b58int\u7684,\u5982\u679c\u8d38\u7136\u5b58char\u4f1a\n\u5f88\u522b\u626dqwq\uff0c\u5e76\u4e14\u6b64\u5904\u7531\u4e8e\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u6240\u4ee5 -\u2018a\u2019 ,\u5982\u679c\n\u5b58\u4e86\u522b\u7684\u7c7b\u578b\u7684\u5b57\u7b26\uff0c\u9700\u8981\u7279\u5224\uff0c\u4fdd\u8bc1\u5b57\u7b26\u5bb9\u6613\u786e\u5b9a */\t\n\t    if(!trie[position].son[symbol]) //\u8fd8\u6ca1\u6709\u88ab\u7f16\u53f7\n\t    trie[position].son[symbol]=++num;//\u7f16\u4e00\u4e2a\u53f7\n\t\t\n\t\tposition=trie[position].son[symbol] ;\n\t\t//\u66f4\u65b0\u8fed\u4ee3\u4f4d\u7f6e\uff0c\u76f4\u5230\u5b57\u7b26\u94fe\u7684\u6700\u672b\u7aef \n\t} \n\tint temp=trie[position].mark;\n\ttrie[position].mark =1;\n//\u5c06\u8fd9\u6761\u94fe\u7684\u6700\u672b\u7aef\u7f6e\u4e3a1\uff0c\u5982\u679c\u8fd8\u6709\u91cd\u590d\u7684\u4e32\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u51fa\u73b0\n//\u6700\u672b\u7aef\u76f8\u540c ;\u53cd\u4e4b\uff0c\u6700\u672b\u7aef\u8282\u70b9\u7684mark\u76f8\u540c\u4e5f\u53ef\u4ee5\u63a8\u51fa\u94fe\u76f8\u540c\uff0c\n//\u501f\u6b64\u6765\u5224\u65ad\u4e32\u662f\u5426\u76f8\u540c \n\treturn temp!=0;\n/*\u6700\u540e\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981\u7f16\u53f7\uff1a\u6211\u4eec\u6839\u636e\u7a0b\u5e8f\u53ef\u4ee5\u770b\u51fa\uff0c\u5b57\u7b26\u4e32\u662f\n\u6309\u79e9\u63d2\u5165\u6811\uff0c\u6240\u4ee5\u4e00\u6761\u94fe\u4e0a\u7684\u7f16\u53f7\u80af\u5b9a\u6ee1\u8db3\u5355\u8c03\uff0c\u4fbf\u4e8e\u6211\u4eec\u67e5\u627e\n\u548c\u6bd4\u5bf9*/ \n} \n```\n\n\u4e8e\u662f\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u5bf9\u5b57\u7b26\u4e32\uff0c\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n\uff09\u5927\u591a\u7528\u4e8e\u6bd4\u5bf9\u3002\n\n  ##  3\u3001\u5173\u4e8e\u5b57\u5178\u6811\u7684\u67e5\u627e\n   \n   \u67e5\u627e\u524d\u7f00\u6bd4\u8f83\u597d\u5199\uff0c\u53ea\u9700\u8981\u4e00\u8fb9\u5224\u65ad\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u4e00\u8fb9\u5224\u65ad\u662f\u5426\u7ee7\u7eed\u8fed\u4ee3\u5373\u53ef\u3002\n   \n   ```cpp\nint root=0;\nbool find(char* str)\n{\n\tint pos=root;\n\tfor(int i=0;str[i];i++)\n\t{\n\t\tint x=str[i]-'a';\n\t\tif(trie[pos].son[x]==0)return false;\n\t\t//\u5982\u679c\u5728\u5efa\u5b8c\u6811\u4e4b\u540e\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u88ab\u7f16\u53f7\uff0c\n\t\t//\u90a3\u4e48\u5c31\u80af\u5b9a\u4e0d\u5b58\u5728\u8fd9\u6761\u94fe\u3002\uff08\u4e92\u5f02\u6027\uff09 \n\t\tpos=trie[pos].son[x] ;//\u7ee7\u7eed\u8fed\u4ee3 \n\t}\n\treturn true; \n}\n\n```\n\u5176\u5b9e\u67e5\u8be2\u5355\u8bcd\u548c\u67e5\u8be2\u524d\u7f00\u5dee\u522b\u4e0d\u5927\uff0c\u53ea\u662f\u6211\u4eec**\u6bcf\u6b21\u90fd\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a$check[i]$\uff08$bool$\uff09**\uff0c\u5b58\u5728\u5355\u8bcd\u94fe\u7684**\u672b\u5c3e**\u3002\n\n\u6bcf\u5f53\u4e00\u4e2a\u65b0\u5b57\u7b26\u5df2\u7ecf\u88ab\u6807\u8bb0\u65f6\uff08\u5373\u6240**\u67e5\u8be2\u5355\u8bcd\u7684\u8fd9\u4e2a\u5b57\u6bcd\u53ca\u5176\u524d\u7f00\u90fd\u5728\u6811\u7684\u67d0\u6761\u94fe\u4e0a**\uff09\uff0c\u6211\u4eec**\u4f7f\u8fd9\u4e2a\u5b57\u7b26$check$\u5f02\u4e8e\u5b83\u7956\u5148\u4eec\u7684$check$**\uff0c\u6700\u540e\u5224\u65ad**\u8be5\u6761\u5339\u914d\u94fe\u7ed3\u5c3e\u5b57\u7b26\u7684$check$\u662f\u5426\u5f02\u4e8e\u94fe\u4e0a\u5176\u4ed6\u5b57\u7b26\u7684$check$**\u5373\u53ef\u5224\u65ad\u662f\u5426\u6709\u8fd9\u4e2a\u5355\u8bcd\uff08\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u672b\u5c3e\u7684$check$\u80af\u5b9a\u4e0e\u94fe\u4e0a\u5176\u4ed6\u7684\u76f8\u540c\u554aqwq\uff09\n\n\u81f3\u4e8e\u524d\u7f00\u51fa\u73b0\u6b21\u6570\uff0c\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5c06\u6bcf\u4e00\u4e2a\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570\u5b58\u5230\u5b83\u76f8\u8fde\u7684\u5b50\u8282\u70b9\uff0c\u6700\u540e\u8f93\u51fa\u524d\u7f00\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6240\u5e26\u7684\u6b21\u6570\u5373\u53ef\uff08\u53ef\u4ee5\u7528\u6570\u7ec4\u7ef4\u62a4\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u5728\u7ed3\u6784\u4f53\u91cc\uff09\n   \n \u597d\u5566\uff0c\u5c31\u662f\u8fd9\u6837\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\n##  \u65e5\u62f1\u4e00\u5352\uff0c\u529f\u4e0d\u5510\u6350\uff01",
        "postTime": 1518104488,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u5b57\u7b26\u4e32\u5b66\u4e60\u7b14\u8bb0\u00b7\u54c8\u5e0c\uff08HASH\uff09\u4e0e\u5b57\u5178\u6811\uff08Trie\uff09"
    },
    {
        "content": "[\u535a\u5ba2](http://www.yhzq-blog.cc/\u5b57\u7b26\u4e32hash\u603b\u7ed3/)\n\n\n\u636e\u6211\u7684\u7406\u89e3\uff0cHash\u5c31\u662f\u4e00\u4e2a\u50cf\u51fd\u6570\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u4f60\u653e\u8fdb\u53bb\u4e00\u4e2a\u503c\uff0c\u5b83\u7ed9\u4f60\u8f93\u51fa\u6765\u4e00\u4e2a\u503c\u3002\u8f93\u51fa\u7684\u503c\u5c31\u662fHash\u503c\u3002\u4e00\u822cHash\u503c\u4f1a\u6bd4\u539f\u6765\u7684\u503c\u66f4\u597d\u50a8\u5b58(\u66f4\u5c0f)\u6216\u6bd4\u8f83\u3002\n\n\n\u90a3\u5b57\u7b26\u4e32Hash\u5c31\u975e\u5e38\u597d\u7406\u89e3\u4e86\u3002\u5c31\u662f\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\u7684\u51fd\u6570\u3002\u800c\u4e14\u8981\u5c3d\u91cf\u505a\u5230\u4f7f\u5b57\u7b26\u4e32\u5bf9\u5e94\u552f\u4e00\u7684Hash\u503c\u3002\n\n\n\u5b57\u7b26\u4e32Hash\u7684\u79cd\u7c7b\u8fd8\u662f\u6709\u5f88\u591a\u79cd\u7684\uff0c\u4e0d\u8fc7\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u53ea\u4f1a\u7528\u5230\u4e00\u79cd\u540d\u4e3a\u201cBKDR Hash\u201d\u7684\u5b57\u7b26\u4e32Hash\u7b97\u6cd5\u3002\n\n\n\u5b83\u7684\u4e3b\u8981\u601d\u8def\u662f\u9009\u53d6\u6070\u5f53\u7684\u8fdb\u5236\uff0c\u53ef\u4ee5\u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u5927\u6570\u5b57\u4e2d\u7684\u6bcf\u4e00\u4f4d\u6570\u5b57\uff0c\u4e0d\u8fc7\u6bd4\u8f83\u5b57\u7b26\u4e32\u548c\u6bd4\u8f83\u5927\u6570\u5b57\u7684\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u4ec0\u4e48\u533a\u522b(\u9ad8\u7cbe\u6570\u7684\u6bd4\u8f83\u4e5f\u662f$O(n)$\u7684)\uff0c\u4f46\u53ea\u8981\u628a\u5b83\u5bf9\u4e00\u4e2a\u6570\u53d6\u6a21\uff0c\u7136\u540e\u8ba4\u4e3a\u53d6\u6a21\u540e\u7684\u7ed3\u679c\u76f8\u7b49\u539f\u6570\u5c31\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u7684\u9519\u8bef\u7387\u7684\u57fa\u7840\u4e0a$O(1)$\u8fdb\u884c\u5224\u65ad\u4e86\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u4ec0\u4e48\u8fdb\u5236\u6bd4\u8f83\u597d\uff1f\n\n\n\u9996\u5148\u4e0d\u8981\u628a\u4efb\u610f\u5b57\u7b26\u5bf9\u5e94\u5230\u6570\u5b570\uff0c\u6bd4\u5982\u5047\u5982\u628aa\u5bf9\u5e94\u5230\u6570\u5b570\uff0c\u90a3\u4e48\u5c06\u4e0d\u80fd\u53ea\u4eceHash\u7ed3\u679c\u4e0a\u533a\u5206ab\u548cb\uff08\u867d\u7136\u53ef\u4ee5\u989d\u5916\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u4f46\u4e0d\u628a\u4efb\u610f\u5b57\u7b26\u5bf9\u5e94\u5230\u6570\u5b570\u66f4\u52a0\u7701\u4e8b\u4e14\u6ca1\u6709\u4efb\u4f55\u526f\u4f5c\u7528\uff09\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u628aa-z\u5bf9\u5e94\u5230\u6570\u5b571-26\u6bd4\u8f83\u5408\u9002\u3002\n\n\n\u5173\u4e8e\u8fdb\u5236\u7684\u9009\u62e9\u5b9e\u9645\u4e0a\u975e\u5e38\u81ea\u7531\uff0c\u5927\u4e8e\u6240\u6709\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u5b57\u7684\u6700\u5927\u503c\uff0c\u4e0d\u8981\u542b\u6709\u6a21\u6570\u7684\u8d28\u56e0\u5b50(\u90a3\u8fd8\u6a21\u4ec0\u4e48)\uff0c\u6bd4\u5982\u4e00\u4e2a\u5b57\u7b26\u96c6\u662fa\u5230z\u7684\u9898\u76ee\uff0c\u9009\u62e927\u3001233\u3001**19260817** \u90fd\u662f\u53ef\u4ee5\u7684\u3002\n\n\n\u6a21\u6570\u7684\u9009\u62e9\uff08\u5c3d\u91cf\u8fd8\u662f\u8981\u9009\u62e9\u8d28\u6570\uff09\uff1a\n\n\n\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u8981\u9009\u62e9\u4e00\u4e2a$10^9$\u7ea7\u522b\u7684\u6570\uff0c\u56e0\u4e3a\u8fd9\u6837\u968f\u673a\u6570\u636e\u90fd\u4f1a\u6709Hash\u51b2\u7a81\uff0c\u6839\u636e\u751f\u65e5\u6096\u8bba\uff0c\u968f\u4fbf\u627e\u4e0a$\\sqrt{10^9}$\u4e2a\u4e32\u5c31\u6709\u5927\u6982\u7387\u51fa\u73b0\u81f3\u5c11\u4e00\u5bf9Hash \u503c\u76f8\u7b49\u7684\u4e32\uff08\u53c2\u89c1BZOJ 3098 Hash Killer II\uff09\u3002\n\n\n\u6700\u7a33\u59a5\u7684\u529e\u6cd5\u662f\u9009\u62e9\u4e24\u4e2a$10^9$\u7ea7\u522b\u7684\u8d28\u6570\uff0c\u53ea\u6709\u6a21\u8fd9\u4e24\u4e2a\u6570\u90fd\u76f8\u7b49\u624d\u5224\u65ad\u76f8\u7b49\uff0c\u4f46\u5e38\u6570\u7565\u5927\uff0c\u4ee3\u7801\u76f8\u5bf9\u96be\u5199\uff0c\u76ee\u524d\u6682\u65f6\u6ca1\u6709\u529e\u6cd5\u5361\u6389\u8fd9\u79cd\u5199\u6cd5\uff08\u9664\u4e86\u5361\u65f6\u95f4\u8ba9\u5b83\u8d85\u65f6\uff09\uff08\u53c2\u89c1BZOJ 3099 Hash Killer III\uff09\u3002\n\n\n\u5982\u679c\u80fd\u80cc\u8fc7\u6216\u5728\u8003\u573a\u4e0a\u627e\u51fa\u4e00\u4e2a$10^18$\u7ea7\u522b\u7684\u8d28\u6570(Miller-Rabin)\uff0c\u4e5f\u76f8\u5bf9\u9760\u8c31\uff0c\u4e3b\u8981\u7528\u4e8e\u524d\u4e00\u79cd\u62c5\u5fc3\u4f1a\u8d85\u65f6\uff0c\u540e\u4e00\u79cd\u62c5\u5fc3\u88ab\u5361\u3002\n\n\n\u5077\u61d2\u7684\u5199\u6cd5\u5c31\u662f\u76f4\u63a5\u4f7f\u7528unsigned long long\uff0c\u4e0d\u624b\u52a8\u8fdb\u884c\u53d6\u6a21\uff0c\u5b83\u6ea2\u51fa\u65f6\u4f1a\u81ea\u52a8\u5bf9$2^64$\u8fdb\u884c\u53d6\u6a21\uff0c\u5982\u679c\u51fa\u9898\u4eba\u6bd4\u8f83\u826f\u5fc3\uff0c\u8fd9\u79cd\u505a\u6cd5\u4e5f\u4e0d\u4f1a\u88ab\u5361\uff0c\u4f46\u8fd9\u4e2a\u662f\u5b8c\u5168\u53ef\u4ee5\u5361\u7684\uff0c\u5361\u7684\u65b9\u6cd5\u53c2\u89c1BZOJ 3097 Hash Killer I\u3002\n\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n\n\u8fd9\u662f\u81ea\u7136\u6ea2\u51fahash(100)\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\null base=131;\null a[10010];\nchar s[10010];\nint n,ans=1;\null hashs(char s[])\n{\n    int len=strlen(s);\n    ull ans=0;\n    for (int i=0;i<len;i++)\n        ans=ans*base+(ull)s[i];\n    return ans&0x7fffffff;\n}\nmain()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",s);\n        a[i]=hashs(s);\n    }\n    sort(a+1,a+n+1);\n    for (int i=2;i<=n;i++)\n        if (a[i]!=a[i-1])\n            ans++;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\u8fd9\u662f\u5355\u6a21\u6570hash(80)\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\null base=131;\null a[10010];\nchar s[10010];\nint n,ans=1;\null mod=19260817;\null hashs(char s[])\n{\n    int len=strlen(s);\n    ull ans=0;\n    for (int i=0;i<len;i++)\n        ans=(ans*base+(ull)s[i])%mod;\n    return ans;\n}\nmain()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",s);\n        a[i]=hashs(s);\n    }\n    sort(a+1,a+n+1);\n    for (int i=2;i<=n;i++)\n        if (a[i]!=a[i-1])\n            ans++;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\u8fd9\u662f\u53cchash(100)\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\null base=131;\nstruct data\n{\n    ull x,y;\n}a[10010];\nchar s[10010];\nint n,ans=1;\null mod1=19260817;\null mod2=19660813;\null hash1(char s[])\n{\n    int len=strlen(s);\n    ull ans=0;\n    for (int i=0;i<len;i++)\n        ans=(ans*base+(ull)s[i])%mod1;\n    return ans;\n}\null hash2(char s[])\n{\n    int len=strlen(s);\n    ull ans=0;\n    for (int i=0;i<len;i++)\n        ans=(ans*base+(ull)s[i])%mod2;\n    return ans;\n}\nbool comp(data a,data b)\n{\n    return a.x<b.x;\n}\nmain()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",s);\n        a[i].x=hash1(s);\n        a[i].y=hash2(s);\n    }\n    sort(a+1,a+n+1,comp);\n    for (int i=2;i<=n;i++)\n        if (a[i].x!=a[i-1].x || a[i-1].y!=a[i].y)\n            ans++;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\u8fd9\u662f\u53ea\u7528\u4e00\u4e2a10^18\u8d28\u6570\u7684hash(100)\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\null base=131;\null a[10010];\nchar s[10010];\nint n,ans=1;\null mod=212370440130137957ll;//\u662f\u8d28\u6570\uff01\uff01\null hashs(char s[])\n{\n    int len=strlen(s);\n    ull ans=0;\n    for (int i=0;i<len;i++)\n        ans=(ans*base+(ull)s[i])%mod;\n    return ans;\n}\nmain()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",s);\n        a[i]=hashs(s);\n    }\n    sort(a+1,a+n+1);\n    for (int i=2;i<=n;i++)\n        if (a[i]!=a[i-1])\n            ans++;\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1502069145,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u6b63\u89e3\u516d\u884c\uff08~~\u5ffd\u7565\u9898\u76ee\u7684\u8bdd~~\uff09\n```\nn,s= int(input()),set()\nfor i in range(n) :\n    a = input()\n    s.add(a)\n    pass\nprint(len(s))\n```",
        "postTime": 1540862603,
        "uid": 92086,
        "name": "wpgwhpg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "#### ~~\u5e72\u561b\u8981\u7528hash\u5462\uff1f~~\n### ~~\u5e72\u561b\u8981\u7528hash\u5462\uff1f~~\n## ~~\u5e72\u561b\u8981\u7528hash\u5462\uff1f~~\n\nc++\u515a\u6709\u4e00\u4e2a\u798f\u5229\uff0c\u53ebSTL\u5e93\n\n\u4f46\u662f\uff0cSTL\u91cc\u8c8c\u4f3c\u6ca1\u6709hash\u8868\n\n\u600e\u4e48\u529e\u5462\uff1f\n\n~~\u8c01\u8bf4\u8981\u7528\u54c8\u5e0c\u8868\u7684\uff1f~~\n\n~~\u7ea2\u9ed1\u6811\u4e5f\u53ef\u4ee5~~\n\n\u4e8e\u662f\u4e4e\uff0cset\u534e\u4e3d\u767b\u573a\n\n>STL \u5bf9\u8fd9\u4e2a\u5e8f\u5217\u53ef\u4ee5\u8fdb\u884c\u67e5\u627e\uff0c\u63d2\u5165\u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u5b8c\u6210\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u540c\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u7684\u5bf9\u6570\u6210\u6bd4\u4f8b\u5173\u7cfb\uff0c\u5e76\u4e14\u5f53\u6e38\u6807\u6307\u5411\u4e00\u4e2a\u5df2\u5220\u9664\u7684\u5143\u7d20\u65f6\uff0c\u5220\u9664\u64cd\u4f5c\u65e0\u6548\u3002\u800c\u4e00\u4e2a\u7ecf\u8fc7\u66f4\u6b63\u7684\u548c\u66f4\u52a0\u5b9e\u9645\u7684\u5b9a\u4e49\u5e94\u8be5\u662f\uff1a\u4e00\u4e2a\u96c6\u5408(set)\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u5b83\u5176\u4e2d\u6240\u5305\u542b\u7684\u5143\u7d20\u7684\u503c\u662f\u552f\u4e00\u7684\u3002\u8fd9\u5728\u6536\u96c6\u4e00\u4e2a\u6570\u636e\u7684\u5177\u4f53\u503c\u7684\u65f6\u5019\u662f\u6709\u7528\u7684\u3002\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6309\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u5217\uff0c\u5e76\u88ab\u4f5c\u4e3a\u96c6\u5408\u4e2d\u7684\u5b9e\u4f8b\u3002\u4e00\u4e2a\u96c6\u5408\u901a\u8fc7\u4e00\u4e2a\u94fe\u8868\u6765\u7ec4\u7ec7\uff0c\u5728\u63d2\u5165\u64cd\u4f5c\u548c\u5220\u9664\u64cd\u4f5c\u4e0a\u6bd4\u5411\u91cf(vector)\u5feb\uff0c\u4f46\u67e5\u627e\u6216\u6dfb\u52a0\u672b\u5c3e\u7684\u5143\u7d20\u65f6\u4f1a\u6709\u4e9b\u6162\u3002\u5177\u4f53\u5b9e\u73b0\u91c7\u7528\u4e86\u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6570\u636e\u7ed3\u6784\u3002\u2014\u2014\u767e\u5ea6\u767e\u73c2\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nset<string> a;\nint main()\n{\n    string p;\n    int n,i;\n    cin>>n;\n    for(i=0;i<n;i++)\n    {\n    \tcin>>p;\n    \ta.insert(p);\n\t}\n\tcout<<a.size();\n}\n```\n",
        "postTime": 1574684913,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff1f\n\n##  [\u535a\u5ba2\u9605\u8bfb\u6548\u679c\u66f4\u4f73\u54e6233](http://www.cnblogs.com/henry-1202/p/8868414.html)\n\n###  \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0bhash\uff1f\n\n~~\u4e8b\u5b9e\u4e0a\u662f\u4e00\u79cd\u53eb\u505a\u86e4\u4e1d\u7684\u75c5\u6bd2~~\n\nhash\u7684\u505a\u6cd5\uff1a\n\n\u9996\u5148\u8bbe\u4e00\u4e2a\u8fdb\u5236\u6570base\uff0c\u5e76\u8bbe\u4e00\u4e2a\u6a21\u6570mod\n\n\u800c\u54c8\u5e0c\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u662fbase\u8fdb\u5236\u7684\uff0c\u50a8\u5b58\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6ce8\u610f\u4e00\u4e0b\u5728\u5b58\u5165\u7684\u65f6\u5019\u53d6\u6a21\u4e00\u4e0b\u5373\u53ef\n\n\u6bd4\u5982\u8bf4\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32orzc\n\n\u679a\u4e3e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\u5f97\u5230ans\uff0c\u7136\u540emod\u4e00\u4e0b\uff0c\u5c31\u5f97\u5230orzc\u7684\u54c8\u5e0c\u503c\n\n\u4f46\u662f\u54c8\u5e0c\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u5f0a\u7aef\uff1a\n ##### \u54c8\u5e0c\u51b2\u7a81\n\n\u4ec0\u4e48\u662f\u54c8\u5e0c\u51b2\u7a81\u5462\uff1f\n\n\u5c31\u6bd4\u5982\u6240orzc\u7684\u54c8\u5e0c\u503c\u662f233\uff0c\u800corzhjw\u7684\u54c8\u5e0c\u503c\u4e5f\u662f233\n\n\u90a3\u4e48\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4ee3\u7801\u4f1a\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u76f8\u540c\u7684\uff0c\u4f46\u663e\u7136\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u540c\u7684\n\n\u51cf\u5c11\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u5f88\u591a\n\n\u81ea\u7136\u6ea2\u51fa\u6cd5\uff0c\u53cc\u54c8\u5e0c\u4e4b\u7c7b\u7684\n\n\u8fd9\u9053\u9898\u7684\u8bdd\uff0c\u5355\u54c8\u5e0c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\uff0cmod\u5b9a\u5927\u4e00\u70b9\u5c31\u597d\n\n\u770b\u4e00\u6bb5\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\n\n```cpp\n#define base 233\n#define inf 1<<30\null mod=inf;\n//\u5b9a\u4e49\u4e00\u4e2a\u5927\u6570(\u6700\u597d\u662f\u8d28\u6570)\u4f5c\u4e3a\u6a21\u6570\uff0c\u8fd9\u91cc\u7528\u7684\u662f1<<30\n//\u5b9a\u4e49\u4e00\u4e2abase\u8fdb\u5236\uff0c\u8fd9\u91cc\u662f233\nil ull hash(char s[]){\n    ll ans=0,len=strlen(s);\n    for(ll i=0;i<len;i++){\n        ans=(base*ans+(ull)s[i])%mod;\n    }\n    return ans;\n    //\u679a\u4e3e\u8be5\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\uff0c\u8f6c\u5316\u4e3abase\u8fdb\u5236\uff0c\u52a0(ull)\u662f\u4e3a\u4e86\u9632\u6b62\u7206\u6808\u641e\u51fa\u4e00\u4e2a\u8d1f\u6570\uff0c(ull)\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u4f46\u5176\u5b9e\u52a0\u4e86\u4e00\u4e2aull\u662f\u53ef\u4ee5\u4e0d\u7528mod\u7684\uff0c\u52a0\u4e2amod\u66f4\u4fdd\u9669\n    //\u7136\u800c\u52a0\u4e86mod\u4f1a\u5f88\u7384\u5b66\uff0c\u83ab\u540d\u6bd4\u4e0d\u52a0mod\u6162\u4e86300\u591ams\n}\n\n```\n\u56e0\u4e3a\u61d2\u5c31\u6ca1\u6709\u53bb\u627e\u4e00\u4e2a\u5927\u8d28\u6570\u6765\u5f53mod\uff0c\u7528\u4e861<<30\u4ee3\u66ff\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u627e\u4e00\u4e2a\u5927\u8d28\u6570\u5f53mod\uff08\u641c\u7d22\u4e00\u4e0b\u751f\u65e5\u6096\u8bba\uff1f\u5927\u6982\u5c31\u4f1a\u660e\u767d\u539f\u56e0\u4e86,\u597d\u50cf\u697c\u4e0b\u6709dalao\u8bc1\u660e\u4e86\u4e00\u4e0b\uff0c\u6211\u5c31\u4e0d\u8bc1\u660e\u4e86\uff09\n\n------------\n\n\u653e\u4e00\u4e0b\u5355\u54c8\u5e0cac\u7684\u4ee3\u7801\n\n\uff08\u4f46\u5176\u5b9e\u8fd9\u4e2a\u4ee3\u7801\u91cc\u9762\u4e5f\u6709\u7528\u5230\u4e00\u70b9\u81ea\u7136\u6ea2\u51fa\u7684\u65b9\u6cd5\uff09\n\n\uff08\u8fd9\u4e2a\u662f\u6700\u5feb\u7684 108ms\uff09\n\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ll int\n#define inf 1<<30\n#define mt(x,y) memset(x,y,sizeof(x))\n#define il inline \n#define ull unsigned long long\nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll abs(ll x){return x>0?x:-x;}\nil ll swap(ll x,ll y){ll t=x;x=y;y=t;}\nil void read(ll &x){\n    x=0;ll f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nusing namespace std;\n#define N 10001\n#define base 233\null mod=212370440130137957ll;\nll f[N],n;\nchar a[N];\null hash(char s[]){\n    ull ans=0,len=strlen(s);\n    for(ll i=0;i<len;i++){\n        ans=base*ans+(ull)s[i];\n        //\u8fd9\u91cc\u4e0d\u4f7f\u7528mod\u8ba9\u5b83\u81ea\u7136\u6ea2\u51fa\uff0c\u5b9a\u4e49\u4e3aull\u7684\u6570\u5728\u8d85\u8fc72^32\u7684\u65f6\u5019\u4f1a\u81ea\u7136\u6ea2\u51fa\n        //\u5982\u679c\u628a\u8fd9\u4e2a\u6362\u6210\u4e0a\u9762\u7684hash\u5c31\u4f1a400ms+\n        //\u6240\u4ee5\u8bf4\u81ea\u7136\u6ea2\u51fa\u5927\u6cd5\u597d\n    }\n    return ans;\n}\nint main(){\n    read(n);\n    for(ll i=1;i<=n;i++){\n        scanf(\"%s\",a);\n        f[i]=hash(a);\n    }\n    sort(f+1,f+n+1);ll ans=1;\n    for(ll i=1;i<n;i++){\n        if(f[i]!=f[i+1])ans++;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n------------\n\u7136\u540e\u6765\u4e00\u4e2a\u53cchash\u7684\u4ee3\u7801\uff0c\u540c\u6837\u662fac\u7684\n\n\uff08\u4f46\u662f\u4f1a\u6162\u5f88\u591a\uff0c\u53cchash\u5e38\u6570\u5f88\u5927\uff0c700ms+\uff0c\u800c\u4e14\u5bb9\u6613\u88ab\u5361\uff0c\u66f4\u63a8\u8350\u5199\u81ea\u7136\u6ea2\u51fa\u6cd5\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ll int\n#define inf 1<<30\n#define mt(x,y) memset(x,y,sizeof(x))\n#define il inline \n#define ull unsigned long long\nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll abs(ll x){return x>0?x:-x;}\nil ll swap(ll x,ll y){ll t=x;x=y;y=t;}\nil void read(ll &x){\n    x=0;ll f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nusing namespace std;\n#define N 10001\n#define base 233\null mod1=212370440130137957ll;\null mod2=inf;\nll n;\nchar a[N];\nstruct node{ll x,y;}f[N];\nil ull hash1(char s[]){\n    ll ans=0,len=strlen(s);\n    for(ll i=0;i<len;i++){\n        ans=(base*ans+(ull)s[i])%mod1;\n    }\n    return ans;\n}\nil ull hash2(char s[]){\n\tll ans=0,len=strlen(s);\n\tfor(ll i=0;i<len;i++){\n\t\tans=(base*ans+(ull)s[i])%mod2;\n\t}\n\treturn ans;\n}\nil bool cmp1(node a,node b){return a.x<b.x;}\nil bool cmp2(node a,node b){return a.y<b.y;}\nint main(){\n    read(n);\n    for(ll i=1;i<=n;i++){\n        scanf(\"%s\",a);\n        f[i].x=hash1(a);\n        f[i].y=hash2(a);\n    }\n    sort(f+1,f+n+1,cmp1);sort(f+1,f+n+1,cmp2);\n\tll ans=1;\n    for(ll i=1;i<n;i++){\n        if(f[i].x!=f[i+1].x||f[i].y!=f[i+1].y)ans++;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u603b\u7684\u6765\u8bf4\u4e2a\u4eba\u54c8\u5e0c\u7684\u8fd9\u4e09\u79cd\u505a\u6cd5\u6211\u6700\u63a8\u8350\u81ea\u7136\u6ea2\u51fa\u6cd5\uff0c~~\u867d\u7136\u90fd\u5bb9\u6613\u88ab\u5361~~\uff0c\u4f46\u662f\u81ea\u7136\u6ea2\u51fa\u6cd5\u88ab\u5361\u7684\u51e0\u7387\u4f1a\u66f4\u5c0f\u4e00\u70b9\n\n\u5f53\u7136\uff0c\u8fd9\u9053\u9898\u4e5f\u662f\u53ef\u4ee5\u6253\u5b57\u5178\u6811\u7684\uff0crank1\u7684dalao\u5c31\u662f\u7528\u7684\u5b57\u5178\u6811\uff0c\u4e0d\u8fc7\u5c31\u4e0d\u4ecb\u7ecd\u4e86\uff0c\u5176\u4ed6\u7684\u9898\u89e3\u91cc\u9762\u4e5f\u6709\uff0c\u51b5\u4e14\u65e2\u7136\u662f\u54c8\u5e0c\u6a21\u677f\uff0c\u5c31\u597d\u597d\u6253\u54c8\u5e0c\u54af233\n\n~~\u6211\u662f\u4e0d\u4f1a\u627f\u8ba4\u56e0\u4e3a\u6211\u61d2\u800c\u4e14\u4e0d\u662f\u5f88\u61c2\u5b57\u5178\u6811\u624d\u4e0d\u653e\u5b57\u5178\u6811\u505a\u6cd5\u7684~~",
        "postTime": 1523945329,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "hash\u8be6\u89e3"
    },
    {
        "content": "\u8bb2\u8bb2\u8fd9\u9898\u7684\u51e0\u79cd\u505a\u6cd5\uff1a\n\n# \u66b4\u529b\u5339\u914d\u6cd5\n\nrt\uff0c\u66b4\u529b\u5339\u914d\uff0c\u5373\u628a\u5b57\u7b26\u4e32\u5b58\u8d77\u6765\u4e00\u4f4d\u4e00\u4f4d\u5224\u76f8\u7b49\n\n\u65f6\u95f4\u590d\u6742\u5ea6$ O(n^2\u00b7m) $\n\n\u518d\u770b\u770b\u6570\u636e\u8303\u56f4\n\n$n\\le10^5,m\\le10^3$\n\n\u5f53\u573a\u7206\u70b8\u3002~~\u5f53\u7136\u6709\u66b4\u529b\u5206~~\n\n\u4ee3\u7801\uff0820pts\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nchar c[100001][1001];\nbool pd(int x, int y)\n{\n\tint l1 = strlen(c[x]), l2 = strlen(c[y]);\n\tif(l1 != l2) return 0;\n\tfor(int i = 0; i < l1; i++)\n\t{\n\t\tif(c[x][i] != c[y][i]) return 0;\n\t}\n\treturn 1;\n}\nint main()\n{\n\tint n;\n\tcin >> n;\n\tint ans = n;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcin >> c[i];\n\t\tfor(int j = 1; j < i; j++)\n\t\t{\n\t\t\tif(pd(i, j)) ans--;\n\t\t}\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n\n![~~\u597d\u6f02\u4eae\u5440~~](https://cdn.luogu.com.cn/upload/image_hosting/baeub6lq.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n~~\u597d\u6f02\u4eae\u5440~~\n\n~~\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48WA\u4e86\uff0c\u6211\u4e5f\u6ca1\u60f3\u8c03~~\n\n# string\u6cd5\n**\u6bd4\u8f83**\u6b63\u5e38\u7684\u65b9\u6cd5\n\n\u601d\u8def\u5c31\u662f\u628a\u6240\u6709\u4e32\u5b58\u4e0b\u6765\uff0c\u7528string\u81ea\u5e26\u7684\u8fd0\u7b97\u7b26\uff08\u5927\u4e8e\u7b49\u4e8e\u5c0f\u4e8e\uff09\u8fdb\u884c\u5b57\u5178\u5e8f\u6392\u5e8f\n\n\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u5224\u65ad\u662f\u5426\u91cd\u590d\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u561b\n\n$O(n\u00b7logn)$\u7684\uff0c\u53ef\u4ee5~~\u5361~~\u8fc7\n\n\u4ee3\u7801\uff08100pts\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstring s[10001];\nint main()\n{\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcin >> s[i];\n\t}\n\tsort(s + 1, s + n + 1);//\u56e0\u4e3astring\u81ea\u5e26\u5927\u4e8e\u548c\u5c0f\u4e8e\u6240\u4ee5\u4e0d\u7528cmp\n\tint ans = n;\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(s[i] == s[i + 1]) ans--;\n     \t\t//\u82e5\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\u5219\u4ed6\u4eec\u7684\u5b57\u5178\u5e8f\u4e00\u5b9a\u662f\u76f8\u90bb\u7684\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n# C++STL\u6cd5\n\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u7528\u4e07\u80fd\u7684STL\u505a\u5566~\n\n\u5148\u6765\u601d\u8003\uff1a\u6211\u4eec\u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u91cd\u590d\u662f\u4ec0\u4e48\u65b9\u6cd5\u5462\uff1f\n\n**\u5f53\u7136\u662fbool used[1001] \u5566**\n\n\u800c\u8fd9\u9898\u8981\u6c42\u5224\u65ad\u7684\u662f\u5b57\u7b26\u4e32\u600e\u4e48\u529e\n\n**\u628a\u6570\u7ec4\u4e0b\u6807\u5f04\u6210string\u7c7b\u578b\u5457**\n\n\u8bf7\u51fa\u4e3b\u89d2\uff1amap\n\n\u7b80\u5355\u6765\u8bb2\uff0c\u6211\u4eec\u5728\u5b9a\u4e49\u6570\u7ec4\u65f6\uff0c\u53ea\u80fd\u786e\u5b9a\u6570\u7ec4\u4e2d\u6570\u7684\u7c7b\u578b\uff08\u6bd4\u5982char\u3001bool\u3001int\u3001long long\u7b49\u7b49\uff09\uff0c\u800c\u4e0b\u6807\u7c7b\u578b\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u6574\u6570\u578b\n\n\u7136\u800cmap\u53ef\u4ee5\u786e\u5b9a\u8fd9\u4e24\u4e2a\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u628a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e0b\u6807\uff0c\u6570\u5b57\u4f5c\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u6765\u4e00\u4e2a\u201c\u53cd\u6570\u7ec4\u201d~~(\u522b\u95ee\u6211\u53cd\u6570\u7ec4\u662f\u5565\uff0c\u5b57\u9762\u610f\u601d)~~\n\n~~\uff08\u90a3\u662f\u4e0d\u662f\u8981\u5199\u6210$a_{interesting} = 3$\u4e86\uff09~~\n\n\u90a3\u4e48~~\u7ed3\u5408\u4e0a\u4e0a\u4e0a\u4e0a\u4e0a\u4e0a\u4e0a\u53e5\u8bdd~~\uff0c\u8fd9\u9898\u5c31\u53ef\u505a\u5566\uff01\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u660e ~~\u53cd\u6b63\u80fd\u8fc7\u5c31\u662f\u4e86~~\n\n\u4ee3\u7801\uff08100pts\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nmap < string , bool > m;//\u5b9a\u4e49\u4e00\u4e2a\u4ee5string\u7c7b\u578b\u4e3a\u4e0b\u6807\u7684bool\u6570\u7ec4\nstring s;\nint main()\n{\n\tint n;\n\tcin >> n;\n\tint ans = n;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcin >> s;\n\t\tif(m[s]) ans--;\n\t\telse m[s] = 1;\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n~~\u6bd4\u66b4\u529b\u77ed~~\n\n# HASH\u6cd5\n\n~~\u4e0d\u8981\u95ee\u4e3a\u4ec0\u4e48\u662f\u6700\u540e\uff0c\u4f60\u89c1\u8fc7\u54ea\u4e2a\u6e38\u620f\u8ba9\u4f60\u4e00\u5f00\u59cb\u5c31\u6253BOSS\u7684\uff1f~~\n\n\u8fd9\u4e2a\u548cC++STL\u6cd5\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999 ~~\u8bf4\u53cd\u4e86\u5427~~\n\n\u65e2\u7136\u5b57\u7b26\u4e32\u5f53\u4e0d\u4e86\u4e0b\u6807\uff0c\u6211\u4eec\u5c31\u628a\u5b57\u7b26\u4e32\u8f6c\u6210\u6570\u5b57\u561b\u3002\n\n\u5177\u4f53\u8bf7\u770b\u90a3\u4e2a\u6709\u51e0\u767e\u4e2a\u8d5e\u7684dalao\u7684\u9898\u89e3\u5427\uff08~~orz@_\u768e\u6708\u534a\u6d12\u82b1%%%%%%~~\uff09\n\n\u4ee3\u7801\uff08\u5355hash\uff0c100pts\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define ull unsigned long long\nusing namespace std;\null base = 131;\null a[100001];\nchar c[10001];\null hashe(char s[])\n{\n\tint l = strlen(s);\n\tull ans = 0;\n\tfor(int i = 0; i < l; i++)\n\t{\n\t\tans = (ans * base + (ull)(s[i])) % 200408020617;\n\t}\n\treturn ans;\n}\nint main()\n{\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcin >> c;\n\t\ta[i] = hashe(c);\n\t}\n\tsort(a + 1, a + n + 1);\n\tull ans = 1;\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(a[i] != a[i + 1]) ans++;\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```\n\u6ce8\uff1a\u6a21\u6570\u53ea\u5199\u9633\u5386\u751f\u65e5\u592a\u77ed\u4f1a\u88ab\u5361\uff1f\u90a3\u5c31\u628a ~~\u5973\u670b\u53cb\u7684~~ \u9634\u5386\u751f\u65e5\u52a0\u5728\u540e\u9762\u9e2d",
        "postTime": 1569983719,
        "uid": 75954,
        "name": "AuCloud",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3370"
    },
    {
        "content": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ull unsigned long long\nconst int o=1524,oo=10024;\nint n,ans;\nint len[o],lk[o][oo];\nchar s[oo][o];\null base=131,h[oo];\n/*\n\u611f\u89c9\u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u592a\u5570\u55e6\uff0c\u6bd5\u7adf\u597d\u591a\u65b0\u624b\u4e0d\u6562\u770b\n\u8fd9\u4e48\u957f\uff0c\u592a\u590d\u6742\uff0c\u4e0d\u60f3\u770b~~~\n\u73b0\u5728\u6211\u6765\u6d45\u8c08\u4e00\u4e0b\u54c8\u5e0c\n\n\u54c8\u5e0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u4e0d\u4f1a\u592a\u964c\u751f\u5427\uff08\u6bcf\u4e00\u4e2a\u4e32\u90fd\u4f1a\u6709\u5b83\u7684\u54c8\u5e0c\u503c\uff0c\u6240\u8c13\u54c8\u5e0c\u503c\u5c31\u662f\u8fd9\u4e2a\u4e32\u7684\u4ef7\u503c\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u4e32\u7684\u4ef7\u503c\u8bb0\u4e0b\uff0c\u6240\u8c13\u54c8\u5e0c\uff0c\u5176\u5b9e\u5c31\u662f\u51cf\u5c0f\u8bef\u5dee\u7f62\u4e86\n\u6bcf\u6b21\u7531  \u524d\u9762\u4e00\u4e2a*\u4e00\u4e2a\u7d20\u6570 + \u5f53\u524d\u6570\u7ec4\u5143\u7d20\u7684\u503c\n\u7136\u540e\u8bb0\u4e0b\u7d20\u6570\u7684\u9636\u4e58p[i]\n\u6bcf\u6b21\u7531\u540e\u9762 r\u4f4d\u7f6e \u51cf\u53bb \u524d\u9762 l\u4f4d\u7f6e*p[r-l+1\uff08\u533a\u95f4\u957f\u5ea6\uff09]\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u8be5\u4e32\u7684\u4ef7\u503c\n\u4f46\u662f\u6b64\u9898\u4e0d\u5fc5\u8fd9\u6837\uff0c\u89e3\u91ca\u770b\u4ee3\u7801\u597d\u4e86\n*/\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s[i]+1);\n\t\tint ln=strlen(s[i]+1);\n\t\tlk[ln][++len[ln]]=i;//\u957f\u5ea6\u4e3aln\u7684\u5b57\u7b26\u4e32\u8bb0\u5f55\u4e0b\u4f4d\u7f6e\n\t\tull k=0;\n\t\tfor(int j=1;j<=ln;j++)\n\t\t\tk=k*base+(ull)(s[i][j]-'0');\n\t\th[i]=k;//\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u4e32\u7684\u4ef7\u503c\n\t\tfor(int j=1;j<len[ln];j++)\n\t\t{\n\t\t\tint pos=lk[ln][j];//\u627e\u5230\u7b2cj\u4e2a\u957f\u5ea6\u4e3aln\u7684\u5b57\u7b26\u4e32\u7684\u7f16\u53f7\n\t\t\tif(h[pos]==k)//\u5982\u679c\u51fa\u73b0\u8fc7\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u91cd\u590d\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",n-ans);//\u7528\u603b\u5171\u7684\u51cf\u53bb\u91cd\u590d\u7684\n\treturn 0;\n}\n```",
        "postTime": 1532761142,
        "uid": 70862,
        "name": "\u98ce\u706b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "# \u5b57\u7b26\u4e32\u54c8\u5e0c|Hash\n\n\u672c\u9898\u4e3b\u4f53\u662f\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u4f46\u8fd9\u91cc\u6211\u4e3b\u8981\u5728\u7ef4\u62a4\u6570\u636e\u7ed3\u6784\uff0c\u6709\u70b9\u53cd\u5ba2\u4e3a\u4e3b\u4e86\uff0c\u4f46\u8fd8\u662f\u8d34\u51fa\u6765\u5427\n\n**\u76ee\u524d\u6700\u5feb->24ms**\n\n\u5148\u8bb2Hash\\_Code\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5047\u5b9a\u4e3aabc;\n\na = 97 b = 98 c = 99 (AsciiCode)\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7528\u4e00\u4e2a\u503c\u6765\u4ee3\u66ff\u4ee5\u4fbf\u4e8e\u67e5\u8be2\u3002\n\n\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n$a * k^2+ b * k +c$  => $97k^2 + 98k + 99$\n\n\u5f53\u5b57\u7b26\u4e32\u5f88\u957f\u65f6\u6211\u4eec\u8981\u628a\u5b83\u53d6\u819c\uff0c\u7531\u4e8eUnsign Int \u7c7b\u578b\u53ef\u4ee5\u81ea\u5df1\u53d6\u819c$2^{32}$\u6211\u4eec\u5373\u53ef\u7528\u4e00\u4e2aUnsigned Int(Long Long)\u6765\u8ba1\u7b97.\u73b0\u5728\u6211\u4eec\u518d\u6765\u770bk,\u8981\u4f7f\u8ba1\u7b97\u7ed3\u679c\u6709\u5f88\u5927\u533a\u522b\uff0c\u4e0d\u4ee5\u91cd\u590d\uff0c\u6211\u4eec\u8981\u6c42k\u4e0e$2^{32}$\u4e92\u8d28\uff0c\u6700\u597d\u662f\u8d28\u6570\uff0c\u56e0\u4e3aByte(Char)\u7c7b\u578b\u6700\u5927\u4e3a128\uff0c\u6211\u4eec\u5c31\u53d6k=127(\u4fe1\u4ef0).\n\n\u4e0b\u9762\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n\n\n\n```cpp\n        const usigned int key = 127;\n        //\u7528\u79e6\u4e5d\u662d\u516c\u5f0f\u7b97\u51fa\u8868\u8fbe\u5f0f\u503c\n        inline usigned int Get_HashCode(string A){\n            int all = A.size();\n            usigned int ans = 0;\n            for( int i = 0;i ^ all;i ++){\n                ans += A[i];\n                ans *= key;\n            }\n            return all;\n        }\n(-_-):\u6216\u8005\u7528STL\u7684Hash\u51fd\u6570\uff1f\u3002\u3002\u3002\u3002\u3002\u3002\n```\n-----\n\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u4f60\u6709N\u4e2aHash\\_Code,\u9700\u8981\u5224\u91cd\uff0c<Set>??\n\nNONONO,It's slow;\n\nWe need get faster;\n\nTRIE,\u5bf9\u4f60\u770b\u7684\u6ca1\u9519\u5c31\u662f\u5927\u5199\u7684Trie\uff08\u5b57\u5178Tree\uff09\n\nTrie\u4e0d\u662f\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5417\uff1f\u7136\u540e\u4f60\u521a\u53d1\u6b64\u95ee\uff0cTrie\u4fbf\u8f6c\u8fc7\u5934\u6765\uff0c\u72e1\u9ee0\u4e00\u7b11\u3002\n\n\u5df2\u77e5Usigned Int <= $2^{32}$,\n\nSo  0000,0000,0000,0000,0000,0000,0000,0000 8\u4f4d16\u8fdb\u5236\u5373\u53ef\u88c5\u4e0b\uff0c\u54c8\u54c8\n\n\u4e0d\u5982\uff0c\u6362\u621016\u8fdb\u5236\uff0c\u7136\u540e\uff0c\u5b57\u7b26\u4e32\u67e5\u8be2\u5b58\u5728\uff0c\uff1f\uff1f\uff1f\uff0c\n\n\u7136\u540e\uff0c\u5c31A\u4e86\uff0c\u7136\u540e\u5c31\u5361\u5e38\uff0c\u7136\u540e\u5c3124ms,\u4e0a\u4ee3\u7801\uff1a\n\n\n\n    short ans = 0;\n\nunsigned int table[16]\n\n```cpp\n    ={1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,\n                            16384,32768};\n    struct Trie{\n        bool value;\n        unsigned int index ;//\u6807\u8bb0\u5b50\u8282\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\n        Trie *next[16];\n        inline Trie(){\n            index = value = 0;\n        }\n    } *mt = new Trie();\n    //\u4ee5\u4e0a\u662f16\u53c9\u7684Trie,set\u7684\u4e8c\u53c9\u6811\uff0c\u989d\uff0c\u7b97\u4e86\u5427\n    void push(unsigned int hash_code){\n        Trie **s = &mt;\n        while(hash_code){\n            short next = hash_code & 15;\n            if(!(((*s) -> index) & table[next])){\n                (*s) -> index |= table[next];\n                (*s) -> next[next] = new Trie();\n            }\n            s = &((*s) -> next[next]);\n            hash_code >>= 3;\n        }\n        ans += ((*s)->value) ^ 1;\n        (*s) -> value = true;\n    }\n\u4ee3\u7801\u5f88\u4e11\uff0c\u7528\u4e86\u5f88\u591a\u4f4d\u8fd0\u7b97\uff0c\u6307\u9488\uff08\u5361\u5e38\uff0c\u4e0d\u4f1a\u7684\u5efa\u8bae\u53bb\u8865\u4e60\u4e00\u4e0b\uff09\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8bfb\u61c2\u3002\n```",
        "postTime": 1512905729,
        "uid": 47240,
        "name": "bzy369258147",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370"
    },
    {
        "content": "# \u53cchash\n\nemm\u3002\u770b\u5230\u9898\u89e3\u90a3\u4e48\u591a\u975e\u6b63\u89e3\u3002\u3002\u3002\u6211\u5c31\u6765\u53d1\u4e00\u4e2a\u53cchash\u5427\n\n\u5224\u65ad\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u5224\u65adhash1\u548chash2\u662f\u5426\u90fd\u76f8\u7b49\u624d\u8ba4\u4e3a\u76f8\u7b49\uff0c\u5176\u5b9e\u53cchash\u51b2\u7a81\u7684\u6982\u7387\u5f88\u5c0f\u5f88\u5c0f\u4e86\n\n\u4e09hash\u548c\u56dbhash\u4e2a\u4eba\u611f\u89c9\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002\u3002\u3002\uff08\u849f\u84bb\u8868\u793a\u9898\u89e3\u91cc\u7684dalao\u592a\u5f3a\n\n\u6211\u7684\u4ee3\u7801\u8dd1\u7684\u8fd8\u633a\u5feb\u7684\u3002\u3002\u53ef\u4ee5\u5f53\u505a\u6a21\u677f\u5427\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\nusing namespace std;\nint n;char S[1500];\ninline int Read(){\n    char ch=getchar();int u=0,f=1;\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){u=u*10+ch-48;ch=getchar();}\n    return u;\n}\nnamespace Hash{\n    typedef unsigned long long ull;\n    struct node{ull hash1,hash2;}a[10000];\n    const int mod1=19260817;const int mod2=2333333333;\n    inline void gethash1(int pos,char *s){\n        int len=strlen(s);ull tmp=0;\n        for(register int i=0;i<len;i++)\n            tmp=(tmp*255+s[i])%mod1;\n        a[pos].hash1=tmp;\n    }\n    inline void gethash2(int pos,char *s){\n        int len=strlen(s);ull tmp=0;\n        for(register int i=0;i<len;i++)\n            tmp=(tmp*255+s[i])%mod2;\n        a[pos].hash2=tmp;\n    }\n    inline void get_hash(int pos,char *s){gethash1(pos,s);gethash2(pos,s);}\n    inline bool cmp(node x,node y){return x.hash1<y.hash1||(x.hash1==y.hash1&&x.hash2<y.hash2);}\n    bool operator != (node x,node y){return !((x.hash1==y.hash1)&&(x.hash2==y.hash2));}\n    inline void solve(){\n        sort(a+1,a+1+n,cmp);int cnt=0;\n        for(int i=1;i<=n;i++)\n            if(a[i]!=a[i-1]||i==1) \n                a[++cnt]=a[i];\n        printf(\"%d\",cnt);\n        exit(0);\n    }\n}\nusing namespace Hash;\nint main(){\n    scanf(\"%d\",&n);\n    for(register int i=1;i<=n;i++){scanf(\"%s\",S+1);get_hash(i,S+1);}\n    solve();\n    return 0;\n}\n```",
        "postTime": 1508143097,
        "uid": 42857,
        "name": "Edgration",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "### \u5173\u4e8e\u4e00\u79cd~~\u6700\u77ed\u7684~~\u975e\u54c8\u5e0c\u7684\u6253\u6cd5\n### \u8fd9\u9898\u53ef\u4ee5\u7528\u5230STL\u5e93\u91cc\u7684\u4e00\u4e2d\u6570\u636e\u7ed3\u6784\uff1a\n## \u94fe\u8868\n### \u56e0\u4e3aC++\u81ea\u5e26\u94fe\u8868\u4e14\u6709\u6392\u5e8f\u4e0e\u53bb\u91cd\u7684\u64cd\u4f5c\n#### \u6240\u4ee5\u8fd9\u9898\u53ef\u7528\u94fe\u8868\u505a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlist<string>q;//\u94fe\u8868\nint n;\nint main()\n{\n\tcin >> n;\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tstring s;\n\t\tcin >> s;//\u8f93\u5165\n\t\tq.push_front(s);//\u52a0\u5165\u94fe\u8868\n\t}\n\tq.sort();//\u6392\u5e8f\n\tq.unique();//\u53bb\u91cd\n\tcout << q.size();//\u8f93\u51fa\n}\n```\n",
        "postTime": 1539237739,
        "uid": 49450,
        "name": "Red_Bands_whk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "## $ELF\\ Hash$\n\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u9519\u4f4d\u53e0\u52a0\u54c8\u5e0c\uff1a\n```cpp\ninline uint hs(char *s){\n\treg uint sm=0;\n\treg char *p=s;\n\twhile(*p)sm=(sm<<4)+*p++;\n\treturn (sm&0x7fffffff);\n}\n```\n\u4f46\u662f\u8fd9\u4e2a\u54c8\u5e0c\u51fd\u6570\u663e\u7136\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u4ece\u800c\u589e\u52a0\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u3002\n\n\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff0c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u8f85\u52a9\u53d8\u91cfx\uff0c\u6bcf\u6b21\u66f4\u65b0\u54c8\u5e0c\u503c\u7684\u65f6\u5019\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n```cpp\n(x=sm&0xf0000000)&&(sm^=(x>>24),sm&=~x);\n//\u4e3a\u4e86\u538b\u884c+\u5361\u5e38\u6570\u8fdb\u884c\u4e86\u6539\u5199\uff0c\u5b9e\u9645\u4e0a\u7b49\u540c\u5982\u4e0b\u4ee3\u7801\uff1a\nx=sm;\nif(x&0xf0000000)sm^=(x>>24),sm&=~x;\n```\n\u5b83\u7684\u610f\u4e49\u662f\uff1a\u53d6x\u7684\u53ef\u80fd\u6ea2\u51fa\u7684\u6700\u9ad8\u4e00\u4f4d\uff0c\u82e5\u4e0d\u4e3a\u96f6\u5219\u6709\u6ea2\u51fa\u98ce\u9669\uff0c\u8fd9\u65f6\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u76f4\u63a5\u66b4\u529b\u5730\u628a\u6ea2\u51fa\u7684\u5185\u5bb9\u8f6c\u79fb\u5230\u4f4e\u4f4d\uff0c\u8fd9\u6837\u65e2\u53ef\u4fdd\u8bc1\u6bcf\u4e00\u4f4d\u90fd\u5bf9hash\u503c\u6709\u5f71\u54cd\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u7684\u54c8\u5e0c\u65b9\u5f0f\u6b63\u786e\u7387\u662f\u6781\u9ad8\u7684\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\ntypedef unsigned int uint;\nuint hsh[10001],ans=1,n;\nstatic char str[10001];\ninline uint hs(char *s){\n\treg uint sm=0,x=0;\n\treg char *p=s;\n\twhile(*p)\n\t\tsm=(sm<<4)+*p,\n\t\t(x=sm&0xf0000000)&&(sm^=(x>>24),sm&=~x),\n\t\t++p;\n\treturn (sm&0x7fffffff);\n}\nint main(){\n\tfreopen(\"1.in\",\"r\",stdin);\n\tscanf(\"%d\",&n);\n\tfor(reg int i=1;i<=n;++i)\n\t\tscanf(\"%s\",str),hsh[i]=hs(str);\n\tsort(hsh+1,hsh+n+1);\n\tfor(reg int i=1;i<n;++i)\n\t\tans+=hsh[i]!=hsh[i+1];\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1565424245,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u5e0c\u671b\u6211\u4eec\u628a\u5b57\u7b26\u4e32\u5b58\u5165HASH\u8868\u4e2d,\u76f8\u4e92\u51b2\u7a81\u7684\u518d\u6392\u5e8f\u53bb\u91cd\n\n\u7136\u800c,~~\u54c8\u5e0c\u662f\u4e0d\u53ef\u80fd\u7684\u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fd\u7684~~\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u600e\u4e48AC\u5462?\u5b57\u5178\u6811\u5417?\u5de8\u5927\u7684\u7a7a\u95f4\u5f00\u9500\u5fc5\u5b9a\u65f6\u7a7a\u4e24\u7206\u70b8\n\n\u4e8e\u662f\u4ecb\u7ecd\u6b64\u9898\u5bf9\u4e8e\u4e8c\u8005\u7684\u66ff\u4ee3\u7b97\u6cd5\u2014\u2014\u57fa\u6570\u6392\u5e8f\n\n-----------------------\n\n\u4ec0\u4e48\u662f\u57fa\u6570\u6392\u5e8f\n------------\n\n\u9996\u5148,\u6211\u4eec\u8fd9\u91cc\u6709\u4e00\u4e32\u6570\u5217\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/i4aj7ic6.png)\n\n\u6211\u4eec\u6309\u4ece\u5de6\u5f80\u53f3\u7684\u987a\u5e8f\u904d\u5386\u4e32,\n\n\u6309\u7b2c\u4e00\u4f4d\u4f9d\u6b21\u653e\u5165\u76f8\u5e94\u7684\u6876(\u5b9e\u73b0\u4e3a\u961f\u5217)\u4e2d\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sio7ir2u.png)\n\n\u7136\u540e\u4f9d\u5e8f\u904d\u5386\u6876,\u5c06\u6876\u4e2d\u7684\u6570\u636e\u6309\u63d2\u5165\u7684\u987a\u5e8f\u53d6\u51fa\u6765\u6062\u590d\u5230\u8868\u4e2d\n\n(\u5176\u5b9e\u5c31\u662f\u4ece\u961f\u5217\u4e2d\u5f39\u51fa)\n\n(\u5faa\u73af\u961f\u5217\u53ef\u7528\u5185\u5b58\u62f7\u8d1d\u51fd\u6570memcpy\u5b9e\u73b0\u6574\u4f53\u6062\u590d)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1oyjlhuf.png)\n\n\u8fd9\u65f6,\u6240\u6709\u7684\u6570\u90fd\u6309\u7b2c\u4e00\u4f4d\u6392\u5e8f\u4e86\n\n\u518d\u628a\u7b2c\u4e8c\u4f4d\u6309\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4sazqs1s.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0s1qt7jx.png)\n\n\u8fd9\u65f6,\u6211\u4eec\u53d1\u73b0\u6570\u5217**\u5728\u6ee1\u8db3\u7b2c\u4e8c\u4f4d\u4ece\u5c0f\u5230\u5927\u7684\u524d\u63d0\u4e0b,\u4e5f\u6ee1\u8db3\u524d\u9762\u7684\u987a\u5e8f**\n\n**(\u5305\u62ec\u6309\u7b2c\u4e00\u4f4d\u4ece\u5c0f\u5230\u5927\u548c\u521d\u59cb\u987a\u5e8f)**\n\n\u8fd9\u4fbf\u662f\u57fa\u6570\u6392\u5e8f\u7684\u601d\u60f3:\u6309\u5173\u952e\u5b57\u591a\u6b21\u653e\u6876\u3002\u5b83\u662f\u6876\u6392\u5e8f\u7684\u6539\u8fdb\n\n\u5982\u6b64\u53cd\u590d\u8fdb\u884c,\u76f4\u5230\u904d\u5386\u5230\u6700\u9ad8\u6570\u7684\u6700\u540e\u4e00\u4f4d,\u6392\u5e8f\u5c31\u5b8c\u6210\u4e86\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tshxxdhf.png)\n\n----------------------\n\n\n\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\n------------\n\n\u6211\u4eec\u8bbe\u5f85\u6bd4\u5bf9\u7684\u5171\u6709n\u4e2a\u503c,\u6bcf\u4e2a\u503c\u6709q\u4e2a\u5173\u952e\u5b57,\u8303\u56f4\u4e3a1~m\n\n1. **\u65f6\u95f4\u590d\u6742\u5ea6**\n\n   \u6bcf\u4e2a\u503c\u5165\u6876q\u6b21,\u51fa\u6876q\u6b21,\u5171\u5165\u6876n * q\u6b21,\u51fa\u6876n * q\u6b21\n\n   \u4e14\u6bcf\u6b21\u51fa\u6876\u90fd\u8981\u904d\u5386\u6bcf\u4e2a\u6876,\u6bcf\u4e2a\u6876\u904d\u5386\u4e86q\u6b21\n\n   \u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO((n+m)q)\n   \n   m\u8f83\u5c0f\u65f6(100\u4ee5\u5185),\u662f\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684,\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5c31\u8fd1\u4f3c\u4e8eO(nq)\n   \n   \u3164\u3164\u3164\u3164\n   \n2. **\u7a7a\u95f4\u590d\u6742\u5ea6**\n\n   \u5bf9\u4e8e\u6bcf\u4e2a\u6876,\u8981\u7528\u4e00\u4e2a\u961f\u5217\u6765\u5b58\u50a8\n    \n   \u5982\u679c\u4f7f\u7528STL\u7684\u961f\u5217\u7684\u8bdd,\u9700\u8981O(n)\u7684\u8f85\u52a9\u7a7a\u95f4(\u4e0d\u7b97\u7a7a\u961f\u5217\u7684\u6307\u9488)\n   \n   \u4f46STL\u6548\u7387\u8f83\u4f4e,\u5982\u679c\u4f7f\u7528\u5faa\u73af\u961f\u5217,\u9700\u8981O(n * m)\u7684\u8f85\u52a9\u7a7a\u95f4\n\n\t\u3164\u3164\u3164\u3164\n\n3. **\u5bf9\u4e8e\u6574\u578b\u548c\u5b57\u7b26\u4e32\u7684\u65f6\u7a7a\u590d\u6742\u5ea6**\n\n   \u5bf9\u4e8e\u6574\u578b,\u82e5\u6700\u5927\u503c\u4e3amax\n  \n   - \u5982\u679c\u6309\u5341\u8fdb\u5236\u5165\u6876,q=log10(max),m=10,\n   \n     \u5f00\u5faa\u73af\u961f\u5217\u5171\u9700\u8981\u5341\u500d\u7684\u7a7a\u95f4\u5b58\u50a8\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6\u8fd1\u4f3c\u4e8eO(log10(n))\n     \n     \u3164\u3164\u3164\u3164\n     \n   - \u5982\u679c\u6309\u4e8c\u8fdb\u5236\u5165\u6876,q=log2(max),m=2\n   \n     \u5f00\u5faa\u73af\u961f\u5217\u53ea\u9700\u8981\u4e24\u500d\u7a7a\u95f4\u5b58\u50a8,\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6\u8fd1\u4f3c\u4e8eO(log2(n)),\u53ef\u4e0e\u5feb\u901f\u6392\u5e8f,\u5f52\u5e76\u6392\u5e8f\u548c\u5806\u6392\u5e8f\u5ab2\u7f8e\n   \n   \u3164\u3164\u3164\u3164\n   \n   \u5bf9\u4e8e\u5b57\u7b26\u4e32,\u5173\u952e\u5b57\u5373\u5b57\u7b26,\u662f\u4ece\u540e\u5f80\u524d\u626b\u7684\n   \n   \u5165\u6876\u548c\u51fa\u6876\u7684\u662f\u5b83\u4eec\u7684\u4e0b\u6807(\u6216\u5934\u6307\u9488),\u4e0e\u957f\u5ea6\u65e0\u5173,\u56e0\u6b64\u7528\u5faa\u73af\u961f\u5217\u4ecd\u53ea\u9700O(n * m)\u7684\u8f85\u52a9\u7a7a\u95f4\n   \n   \u5b57\u7b26\u4e32\u957f\u5ea6\u7ea6\u4e3an * q,\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(\u5b57\u7b26\u4e32\u603b\u957f),\u4e0e\u5b57\u5178\u6811\u548c\u54c8\u5e0c\u76f8\u540c\n\n------------------------\n\n\u57fa\u6570\u6392\u5e8f\u7684\u4f18\u52bf\n------------\n\n- \u76f8\u5bf9\u4e8e\u6876\u6392,\u56e0\u6570\u636e\u8303\u56f4\u5bfc\u81f4\u7684\u989d\u5916\u7a7a\u95f4\u548c\u65f6\u95f4\u5927\u5e45\u51cf\u5c11\n  (\u5c24\u5176\u662f\u7a7a\u95f4)\n  \n\u3164\u3164\u3164\u3164 \n- \u76f8\u5bf9\u4e8e\u5176\u5b83\u6392\u5e8f\u7b97\u6cd5,\u53ef\u8fbe\u5230O(log2(n))\u7ea7\u522b,\u4e14\u9002\u7528\u4e8e\u5b57\u7b26\u4e32\n\n\u3164\u3164\u3164\u3164\n- \u76f8\u5bf9\u4e8e\u5b57\u5178\u6811,\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c,\u7a7a\u95f4\u4e0a\u7684\u5e38\u6570\u66f4\u5c0f  \n  (\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u57fa\u6570\u6392\u5e8f\u53ef\u4ee5AC\u8fd9\u9053\u9898)\n \n-------------\n\n\u6700\u540e,\u8ba9\u6211\u4eec\u56de\u5230\u8fd9\u9053\u9898\n\n\u8fd9\u9053\u9898\u5982\u679c\u4e0d\u7528\u54c8\u5e0c,\u5c31\u53ef\u4ee5\u5bf9\u6240\u6709\u5b57\u7b26\u4e32\u8fdb\u884c\u57fa\u6570\u6392\u5e8f\n\n\u8fd9\u6837\u7b5b\u9009\u65f6\u53ea\u9700\u8981\u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u4e24\u4e24\u6bd4\u5bf9,\u7136\u540e\u8f93\u51fa\u5373\u53ef\n\n\u57fa\u6570\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6O(\u5b57\u7b26\u4e32\u603b\u957f),\u4e24\u4e24\u6bd4\u5bf9\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(\u5b57\u7b26\u4e32\u603b\u957f),\u6700\u540e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3aO(\u5b57\u7b26\u4e32\u603b\u957f)\n\n\u5e38\u6570\u4e00\u822c\u662f\u900a\u4e8e\u54c8\u5e0c\u7684,\u4f46\u5f88\u660e\u663e\u6ca1\u6709\u54c8\u5e0c\u51b2\u7a81\u7684\u62c5\u5fe7\n\nAC\u4ee3\u7801(1.51s,15.81MB)\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nconst int size=10000;\nstruct queue{//\u5faa\u73af\u961f\u5217 \n\tshort list[10001];\n\tshort head,tail; \n\tvoid clear(){//\u961f\u5217\u6e05\u7a7a \n\t\thead=tail=0;\n\t}\n\tvoid push(short in){//\u961f\u5217\u63d2\u5165 \n\t\tlist[tail]=in;\n\t\ttail++;\n\t\tif(tail==size) tail=0;\n\t}\n\tint set(short *p){//\u7528memcpy\u5b9e\u73b0\u6574\u4f53\u6062\u590d \n\t\tif(head==tail) return 0;\n\t\tif(head<tail){\n\t\t\tmemcpy(p,list+head,sizeof(short)*(tail-head));\n\t\t\treturn tail-head;\n\t\t}\n\t\tmemcpy(p,list+head,sizeof(short)*(size-head));\n\t\tmemcpy(p,list,sizeof(short)*tail);\n\t\treturn size-head+tail;\n\t}\n};\nqueue q[64];\nint ans=1;\nshort n,id[10000];\nchar s[10000][1510];\nbool compare(short id1,short id2){//\u5355\u5b57\u7b26\u4e32\u6bd4\u5bf9 \n\tfor(int i=0;i<1500;i++)\n\t\tif(s[id1][i]!=s[id2][i]) return 1;\n\treturn 0;\n}\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;i++){//\u8f93\u5165\u5b57\u7b26\u4e32,\u5c06\u4e0b\u6807\u653e\u5165\u8868 \n\t\tscanf(\"%s\",s[i]);\n\t\tid[i]=i;\n\t}\n\tfor(int cmp=1500;cmp>=0;cmp--){//\u57fa\u6570\u6392\u5e8f \n\t\tfor(int i=0;i<n;i++){//\u6839\u636e\u5173\u952e\u5b57\u653e\u5165\u76f8\u5e94\u961f\u5217 \n\t\t\tif('0'<=s[id[i]][cmp]&&s[id[i]][cmp]<='9') \n\t\t\t\tq[s[id[i]][cmp]-'0'].push(id[i]);\n\t\t\telse if('a'<=s[id[i]][cmp]&&s[id[i]][cmp]<='z')\n\t\t\t\tq[s[id[i]][cmp]-'a'+10].push(id[i]);\n\t\t\telse if('A'<=s[id[i]][cmp]&&s[id[i]][cmp]<='Z')\n\t\t\t\tq[s[id[i]][cmp]-'a'+36].push(id[i]);\n\t\t\telse q[63].push(id[i]);\n\t\t}\n\t\tfor(int i=0,copy=0;i<64;i++){//\u4ece\u961f\u5217\u4e2d\u6062\u590d \n\t\t\tcopy+=q[i].set(id+copy);\n\t\t\tq[i].clear();\n\t\t}\n\t}\n\tfor(int i=1;i<n;i++)//\u4e24\u4e24\u6bd4\u5bf9 \n\t\tans+=compare(id[i-1],id[i]);\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1569317173,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u5728\u75af\u72c2\u5730\u7528\u7ebf\u6027\u7b5b\u6cd5\u7b5b\u9664N\u591a\u7d20\u6570\u540e\uff0c\u7ec8\u4e8e\u53d1\u73b0\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u6570\u5b57\uff1a33951943\uff0c\u4f4d\u6570\u53ea\u67098\u4f4d\u4e0d\u4f1a\u5361\u5185\u5b582333\n\n\u5177\u4f53\u5bf9\u8fd9\u4e2a\u6570\u5b57\u7684\u5229\u7528\u770b\u4ee3\u78012333\uff08\u53ea\u628a\u8f93\u5165\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u7684ascll\u7801\u4e58\u5728\u4e00\u8d77\u5728%33951943\u5c31\u884c\u4e862333\uff09\n\n#pra\\\n```cpp\ngma GCC optimize (\"O3\")\n#include<stdio.h>\nusing namespace std;\nint n,ans;\nunsigned int now=1;\nbool s[33951943];\nchar a[2000];\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;++i){\n        scanf(\"%s\",&a);\n        for(int j=0;a[j];++j){\n            now*=a[j];//\u628a\u6bcf\u4e2a\u5b57\u7b26\u4e58\u8d77\u6765\n            now%=33951943;//%\u4e00\u4e0b\u5c31\u53ef\u4ee5\u55662333\n        }\n        if(!s[now]){\n            ++ans;\n            s[now]=1;\n        }\n        now=1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1494079571,
        "uid": 27138,
        "name": "mrkrnblsa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u5e94\u8be5\u6ca1\u6709python\u7684\u9898\u89e3\u5427\uff1f\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nn=int(input())\ns=set() #\u96c6\u5408\nfor i in range(n):\n    c=input()\n    s.add(c)\nprint(len(s))\n```\nPython3\u662f\u771f\u7684**\u77ed**\u554a!(~~\u9003~~)\n\n\u518d\u6765\u4e00\u4efdc++\u7684\uff1a\nHash\u5c31\u662f\u4e00\u4e2a\u50cf\u51fd\u6570\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u4f60\u653e\u8fdb\u53bb\u4e00\u4e2a\u503c\uff0c\u5b83\u7ed9\u4f60\u8f93\u51fa\u6765\u4e00\u4e2a\u503c\u3002\u8f93\u51fa\u7684\u503c\u5c31\u662fHash\u503c\u3002\u4e00\u822cHash\u503c\u4f1a\u6bd4\u539f\u6765\u7684\u503c\u66f4\u597d\u50a8\u5b58(\u66f4\u5c0f)\u6216\u6bd4\u8f83\u3002\u8fd9\u4e1c\u897f\u6bd4\u8f83\u770b\u8138\u548c\u7ecf\u9a8c\u53ea\u8981\u4e0d\u51b2\u7a81\u5c31\u6ca1\u95ee\u9898.\n\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u7bc7\u535a\u5ba2\uff1a[\u4f20\u9001\u95e8](https://www.cnblogs.com/Slager-Z/p/7807011.html)\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<stack>\n#include<vector>\n#include<map>\n#include<string>\n#include<cstring>\n#define ll long long int\n#define mod 1000000007\nusing namespace std;\nconst long long int  maxn=99999999999999;\nconst int minn=-999999999;\nlong long  base=131;\nlong long  a[15010];\nchar s[15010];\nint n,ans=1;\nlong long hash(char s[]) {\n\tint len=strlen(s);\n\tlong long  ans=0;\n\tfor (int i=0; i<len; i++)\n\t\tans=ans*base+(long long )s[i];\n\treturn ans%maxn;\n}\nmain() {\n\tscanf(\"%d\",&n);\n\tfor (int i=1; i<=n; i++) {\n\t\tscanf(\"%s\",s);\n\t\ta[i]=hash(s);\n\t}\n\tsort(a+1,a+n+1);\n\tfor (int i=2; i<=n; i++)\n\t\tif (a[i]!=a[i-1])\n\t\t\tans++;\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1557113095,
        "uid": 122557,
        "name": "pyyyyyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u849f\u84bb\u53d1\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u4e00\u4e9b\u6ca1\u6709\u601d\u8def\u7684\u540c\u5b66\u627e\u5230\u4e00\u6761\u53ef\u884c\u601d\u8def\u3002\n\n\u5148\u8bf4\uff1a\u8fd9\u9898\u6d6a\u8d39\u4e86\u6211\u5feb\u4e00\u4e2a\u6708\u7684\u65e0\u804a\u65f6\u5149\uff0c\u5728\u5c1d\u8bd5\u8fc7\u591a\u79cd\u591a\u6837\u7684Hash\u65b9\u6cd5\u540e\uff0c\u6211\u627e\u5230\u4e86\u4e00\u6761\u5f88\u72ec\u7279\u7684\u601d\u8def\u2026\u2026\n\n# \u6838\u5fc3\u7b97\u6cd5\uff1a**\u54c8\u5e0c**\n\n\u7b97\u6cd5\u539f\u7406\uff1a\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u5c06\u4e00\u6bb5\u5b57\u7b26\u4e32\uff08\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff09\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u50a8\u5b58\uff0c\u5bf9\u6bd4\u548c\u67e5\u627e\u3002\u4ece\u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u4e24\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u54c8\u5e0c\u503c\u76f8\u540c\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u54c8\u5e0c\u503c\u6765\u5bf9\u5b57\u7b26\u4e32\u5224\u91cd\u3002\n\n\n## \u7279\u6b8a\u6280\u5de7\uff1a\n\n- \u7531\u4e8e\u4e00\u822c\u54c8\u5e0c\u7b97\u6cd5\u7684\u9650\u5236\uff0c\u4e0d\u540c\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u5bf9\u5e94\u540c\u4e00\u54c8\u5e0c\u503c\uff08\u53c8\u53eb\u505a**\u54c8\u5e0c\u78b0\u649e**\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u591a\u4e2a\u4e0d\u540cHash\u51fd\u6570\u6765\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u697c\u4e0b\u7684\u5927\u795e\u4eec\u90fd\u63d0\u8fc7\u4e86\uff0c\u518d\u6b64\u4e5f\u4e0d\u518d\u8d58\u8ff0\u3002\n\n- \u9632\u6b62Hash\u78b0\u649e\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\u94fe\u5730\u5740\u6cd5\uff0c\u56e0\u4e3a\u4e5f\u6709\u5927\u4f6c\u7528\u8fc7\uff0c\u6240\u4ee5\u4e5f\u4e0d\u518d\u91cd\u590d\n\n- \u7b2c\u4e09\u79cd\u964d\u4f4e\u78b0\u649e\u6982\u7387\u7684\u65b9\u6cd5\uff1a\u5206\u6bb5Hash\u6cd5\uff08\u6211\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u6548\u7387\u8f83\u4f4e\u4f46\u539f\u7406\u8f83\u7b80\u5355\uff09\n\n\n### \u5b9e\u73b0\u65b9\u6cd5\uff1a\u9996\u5148\u7528\u4e00\u4e2aHash\u51fd\u6570\u5bf9\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u7b2c\u4e00\u6b21\u5168\u6587Hash\uff0c\u5c06Hash\u7ed3\u679c\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u653e\u5165\u5176\u5bf9\u5e94\u7684Hash\u503c\u4e0b\u7684vector\u4e2d\uff0c\u7136\u540e\u5728\u5404\u4e2avector\u4e2d\u5c06**\u6bcf50\u4f4d**Hash\u503c\u90fd\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u5408\u5e76\uff08\u5220\u53bb\u5176\u4e2d\u4e00\u4e2a\uff09\uff0c\u6700\u540e\u7edf\u8ba1\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u5728\u5404\u4e2avector\u4e2d\u3002\n\n\n\u4e0d\u8bf4\u591a\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<climits>//\u4e00\u4e2a\u6709\u5404\u79cd\u7c7b\u578b\u8fb9\u754c\u503c\u5e38\u91cf\u7684\u5e93\u6587\u4ef6\n#include<vector>\nusing namespace std;\n\nstruct Str{\n    int leng,fullres;//leng->\u4e32\u957f fullres->\u5bf9\u6574\u4e2a\u5b57\u7b26\u4e32Hash\u5f97\u5230\u7684\u7ed3\u679c\uff080-19999\uff09\n    string str; //\u539f\u4e32\n    int parthash(int n)//\u90e8\u5206Hash\u51fd\u6570\uff0c\u5bf9str\u4e32\u4e2dn\u5230n+50\u4f4d\u8fdb\u884cHash\u64cd\u4f5c\u5e76\u8fd4\u56deHash\u503c\n    {\n        int hashnum=131;\n        for(int i=n;i<n+50&&i<str.length();i++)\n            hashnum=((hashnum<<4)+str[i]*i)%(INT_MAX>>5);\n        return hashnum;\n    }\n    int allhash()//\u5168\u4e32Hash\u51fd\u6570\uff0c\u5bf9str\u4e32\u5168\u6587\u5185\u5bb9Hash\n    {\n        int hashnum=131;\n        for(int i=0;i<str.length();i++)\n            hashnum=((hashnum<<4)+str[i]*i)%(20000);\n        return hashnum;\n    }\n} arr[20000]; \n\nbool check(Str a,Str b)//\u68c0\u67e5\u4e32a\u548c\u4e32b\u662f\u5426\u76f8\u7b49\uff08\u4e32\u957f\u548c\u5404\u90e8\u5206Hash\u503c\u662f\u5426\u76f8\u540c\uff09\n{\n    if(a.leng!=b.leng) return 0;\n    for(int i=0;i<=a.leng;i+=50)//\u6bcf\u969450\u4f4dHash\u4e00\u6b21\u5e76\u6bd4\u8f83\u7ed3\u679c\uff0c\u5982\u4e0d\u540c\u5219\u4e24\u4e32\u4e0d\u540c\n    {\n        if(a.parthash(i)!=b.parthash(i)) return 0;\n    }\n    return 1;//\u5982\u679c\u672a\u53d1\u73b0\u4e0d\u540c\uff0c\u5219\u8fd4\u56de\u4e24\u4e32\u76f8\u540c\n}\n\nvector<int> hashtable[20000];//\u5b58\u653e\u5168\u6587Hash\u7ed3\u679c\u7684vector\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        cin>>arr[i].str;//\u8bfb\u5165\u4e32\n        arr[i].leng=arr[i].str.length();//\u8ba1\u7b97\u4e32\u957f\n        arr[i].fullres=arr[i].allhash();//\u8ba1\u7b97\u539f\u4e32\u5168\u4e32Hash\u503c\n    }\n    for(int i=1;i<=n;i++)//\u8fd9\u91cd\u5faa\u73af\u679a\u4e3e\u5404\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u4f4d\u7f6e\n    {\n        bool flag=0;\n        for(int j=0;j<hashtable[arr[i].fullres].size();j++)//\u5982\u679cvector\u4e2d\u4e3a\u7a7a\uff0c\u5219\u5c06\u4e32\u653e\u5165vector\u4e2d\uff0c\u5426\u5219\u5c06\u5176\u4e0e\u5bf9\u5e94vector\u4e2d\u7684\u5b57\u4e32\u4e00\u4e00\u5bf9\u6bd4\uff0c\u627e\u5230\u4e0d\u540c\u5219\u653e\u5165\uff0c\u76f8\u540c\u5c31break\n        {\n            if(check(arr[hashtable[arr[i].fullres][j]],arr[i])==1) {flag=1; break;}\n        }\n        if(!flag) hashtable[arr[i].fullres].push_back(i);\n    }\n    int ans=0;\n    for(int i=0;i<20000;i++)//\u7edf\u8ba1\u4e0d\u540c\u5b57\u7b26\u4e32\u603b\u6570\n    {\n        ans+=hashtable[i].size();\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1508427462,
        "uid": 9198,
        "name": "\u59041a2b3c4d",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u7136\u800c\u8fd9\u4e2a\u9898\uff0c\u5355\u54c8\u5e0c\u4e5f\u80fd\u8fc7\uff0c\u6570\u636e\u5e94\u8be5\u52a0\u5f3a\u3002\n\n\u4e8b\u5b9e\u4e0a\u5e38\u7528\u7684\u54c8\u5e0c\u51fd\u6570\u4e5f\u5c31\u90a3\u4e48\u51e0\u4e2a\u3002\u7f16\u7801\u6548\u7387\u548c\u8fd0\u884c\u6548\u679c\u6700\u597d\u7684\u5927\u6982\u5c31\u662fBKDRHash\u7b97\u6cd5\u4e86\u3002\n\n\u5bf9\u4e8eBKDRHash\uff0c\u5982\u679c\u6709\u51b2\u7a81\u5c31\u6362\u4e00\u4e2a\u79cd\u5b50\u5c31\u597d\u4e86\u3002\u53ef\u4ee5\u6709131,13131\u7b49\u5404\u79cd\u5404\u6837\u5947\u602a\u7684\u79cd\u5b50\uff08\u90fd\u4e0d\u4fdd\u9669\uff0c\u6b63\u7edf\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5199\u4e2a\u94fe\u8868\u6216\u8005\u540e\u79fb\uff09\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nchar ch[10000];int n,cnt;\nunsigned int a[10000];\ninline unsigned int BKDRHash(char *str)\n{\n    unsigned int seed = 131;\n    unsigned int hash = 0;\n    while (*str)\n        hash = hash * seed + (*str++);\n    return (hash & 0x7FFFFFFF);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%s\",ch);\n        a[i]=BKDRHash(ch);\n    }\n    sort(a,a+n);\n    for(int i=0;i<n;i++)\n        if(a[i]!=a[i+1])\n            cnt++;\n    printf(\"%d\",cnt);\n    return 0;\n}\n```\n\u849f\u84bb\u6e23\u6e23\u4ee3\u7801\u3002\u5224\u91cd\u5199\u7684\u975e\u5e38\u4e11\u3002\n\n\u53cb\u60c5\u63d0\u793a\uff1a\u5bf9\u4e8eHash\u51fd\u6570\uff0c\u5efa\u8bae\u52a0\u4e0ainline\u63d0\u9ad8\u6548\u7387\uff0c\u4f1a\u6709\u610f\u60f3\u4e0d\u5230\u7684\u6548\u7387\u63d0\u5347\uff08~1200ms->~200ms\uff09\n\n\u5bf9\u4e8e\u5927\u6570\u636e\uff0c\u8bf7\u5584\u7528scanf\u4e0eprintf\u3002\n\n\u5c31\u9171\u3002\n",
        "postTime": 1494289057,
        "uid": 35485,
        "name": "Hatsune_Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "# Hash\uff0c\u54c8\u5e0c\uff1f\n### \u5b57\u7b26\u4e32\u54c8\u5e0c\uff1a\u8fd9\u662f\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u53bb\u91cd\u7684\u7b97\u6cd5\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u5b83\u8f6c\u6210\u4e00\u4e2a\u6570\uff0c\u518d\u5b58\u8d77\u6765\uff0c\u7136\u518d\u5728\u8fdb\u884c\u53bb\u91cd\u3002\n## \u600e\u4e48\u8f6c\u6210\u6570\uff1f\n\u732e\u4e0a\u4e00\u4efd\u4f2a\u4ee3\u7801\uff1a\n```cpp\n#define unsigned long long\n...\nscanf(\"%s\",str);\nlen=strlen(str);\nfor(int j=0;j<len;j++)\n{\n\ta[i]=(a[i]*131+(ull)str[j]);\n}\n```\n\u8fd9\u91cc\u5e94\u7528\u7684\u81ea\u7136\u6ea2\u51fa\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3aunsigned long long\u4f1a\u5728\u6ea2\u51fa\u7684\u65f6\u5019\u5c06\u6570\u53d6\u6a21\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u624b\u52a8\u53d6\u6a21\uff0c\u4f46\u5fc5\u987b\u6a21\u4e00\u4e2a\u5f88\u5927\u7684\u7d20\u6570\u3002\u8fd9\u4e00\u90e8\u5206\u5e94\u8be5\u90fd\u770b\u61c2\u4e86\u5427\u3002\n## \u91cd\u5934\u620f\uff1a\u51b2\u7a81\n\u5bf9\uff0c\u6709\u53ef\u80fd\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u76f8\u7b49\uff0c\u4f46\u662f\u5b83\u4eec\u751f\u6210\u7684\u6570\u76f8\u7b49\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\uff08\u867d\u7136\u8fd9\u4e00\u9898\u7528\u81ea\u7136\u6ea2\u51fa\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\uff09\u6ca1\u5173\u7cfb\uff0c\u5982\u679c\u60f3\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cc\u54c8\u5e0c\uff0c\u5c31\u662f\u7528\u4e24\u4e2a\u6570\u6765\u5b58\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u8fd9\u6837\u505a\u5927\u5927\u7684\u51cf\u5c11\u4e86\u51b2\u7a81\u7684\u6982\u7387\u3002\n## \u4ee3\u7801\uff08\u81ea\u7136\u6ea2\u51fa\u7248\u672c\uff09\uff1a\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define ull unsigned long long\nusing namespace std;\nint len,a[10010],n,ans;\nchar str[100010];\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",str);\n\t\tlen=strlen(str);\n\t\tfor(int j=0;j<len;j++)\n\t\t{\n\t\t\ta[i]=(a[i]*131+(ull)str[j]);\n\t\t}\n\t}\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=n;i++)if(a[i]!=a[i-1])ans++;\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n## \u5176\u4ed6\u65b9\u6cd5\u2014\u2014map\n\u8fd9\u4e00\u9898\u867d\u7136\u662f\u54c8\u5e0c\u7684\u6a21\u677f\u9898\uff0c\u4f46\u53ef\u4ee5\u7528\u522b\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002\u5982C++ STL\u4e2d\u7684map\u8fd9\u65f6\u5019\u5c31\u6d3e\u4e0a\u4e86\u7528\u573a\u3002\n## C++\u7684map\u662f\u5565\uff1f\u662f\u5730\u56fe\u5417\uff1f\n\u5f53\u7136\u4e0d\u662f\u5730\u56fe\u4e86\u3002C++\u7684map\u662f\u7ea2\u9ed1\u6811\uff0c\u53ef\u4ee5\u5f53\u505a\u6570\u7ec4\u6765\u7528\uff0c\u800c\u4e14\u4e0b\u6807\u6ca1\u6709\u5927\u5c0f\u9650\u5236\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b9a\u4e49\u6210\u4efb\u4f55\u7c7b\u578b\u7684\u3002\n## \u4ee3\u7801\uff08map\u7248\u672c\uff09\uff1a\n```cpp\n#include<map>\n#include<string>\n#include<iostream>\nusing namespace std;\nmap<string,bool> a;\n//\u5b9a\u4e49\u4e00\u4e2a\u4e0b\u6807\u7c7b\u578b\u4e3astring,\u53d8\u91cf\u7c7b\u578b\u4e3abool\u7684\u6570\u7ec4\uff08\u7ea2\u9ed1\u6811\uff09\nstring s[10100];\nint n,ans;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>s[i];\n\t\ta[s[i]]=true;\n\t\t//map\u7684\u64cd\u4f5c\u8ddf\u666e\u901a\u6570\u7ec4\u7684\u64cd\u4f5c\u57fa\u672c\u4e00\u6837\u3002\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(a[s[i]])\n\t\t{\n\t\t\ta[s[i]]=false;\n\t\t\tans++;\n\t\t}\n\t}\n\tcout<<ans;\n}\n```\n## \u7ed3\u675f\u4e86\uff08\u9003\uff09",
        "postTime": 1573116054,
        "uid": 99506,
        "name": "_LHF_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "# STL\u5927\u6cd5\u4e07\u5c81\uff01\n\n\n### \u9898\u610f:\u6c42n\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a _\u4e0d\u540c\u7684_ \u5b57\u7b26\u4e32 \u3002\n\n### \u601d\u8def:\u770b\u5230\u201c\u4e0d\u540c\u7684\u201d\u5c31\u60f3\u5230\u53bb\u91cd\uff0c\u4f7f\u7528unique\u3002\n\n## unique\u683c\u5f0f :int q=unique(a+1,a+n+1)-a-1;(\u5907\u6ce8:unique\u4e0d\u662f\u76f4\u63a5\u628a\u91cd\u590d\u7684\u7ed9\u53bb\u6389\uff0c\u800c\u662f\u653e\u6570\u7ec4\u540e\u9762\uff0c\u6240\u4ee5\u6700\u540e\u8981-\uff08a+1\uff09\uff0cq\u5c31\u662f\u53bb\u91cd\u540e\u65b0\u6570\u7ec4\u7684\u957f\u5ea6)\n\n## \u7279\u522b\u6ce8\u610f\uff1aunique\u9700\u8981\u5148sort\uff01\uff01\n\n# Code:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstring s[10001];\nint main() {\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tcin>>s[i];\n\t}\n\tsort(s+1,s+n+1);\n\tint u=unique(s+1,s+n+1)-s-1;\n\tcout<<u;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1570240003,
        "uid": 150190,
        "name": "Antarctican",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "# pb_ds \u5927\u6cd5\u597d\n\n\n\u770b\u5230\u6ca1\u6709\u4eba\u7528pbds\u5c31\u6765\u666e\u53ca\u4e00\u7bc7\n\n~~\u5bf9\u6bd4\u8d77stl\u662f\u771f\u5fc3\u5feb~~\n\npbds hash table\u5b98\u7f51[pbds hash table](https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/hash_based_containers.html)\n\npbds\u63d0\u4f9b\u4e24\u79cd\u7b97\u6cd5[cc_hash_table](https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/cc_hash_table.html)\u548c[gp_hash_table](https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/gp_hash_table.html)\n\ncc_hash_table\u662f\u62c9\u94fe\u6cd5\n\ngp_hash_table\u662f\u67e5\u63a2\u6cd5\n\ngp\u7684\u7ed3\u679c\u662f\uff1a\u7528\u65f6: 641ms / \u5185\u5b58: 19628KB\n\ncc\u7684\u7ed3\u679c\u662f\uff1a\u7528\u65f6: 611ms / \u5185\u5b58: 11404KB\n\npbds\u7684hash\u662f\u652f\u6301find\u548coperator\u7684\n\n\u4e0d\u8fc7\u4f7f\u7528\u65f6\u8981\u6ce8\u610f\u547d\u540d\u7a7a\u95f4\uff0cstring\u662fstd\u7684\n```\ntypedef basic_string<char> string;\n```\n\u6240\u4ee5\u4e00\u5b9a\u8981\u5f53\u5fc3\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n```\n#include <iostream>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\n#define pbds __gnu_pbds\nusing namespace std;\n\npbds::gp_hash_table<string,int> h;\n/*\ncc\u7684\u5b9a\u4e49\u662f\npbds::cc_hash_table<string,int> h;\n*/\nint main()\n{\n    int n,ans;\n    cin>>n;\n    ans=n;\n    for (int i=1;i<=n;i++){\n        string a;\n        cin>>a;\n        h[a]++;\n        if (h[a]>1){ans--;h[a]=1;}\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1534952831,
        "uid": 25169,
        "name": "mureZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u7528set\uff01\uff01\uff01~~\n---\n\u5267\u900f\u7684\u4f5c\u8005\u5df2\u88ab\u6253\u6b7b\uff01\uff01\uff01\n---\n\u8fd9\u9053\u9898\u7528set\u53ef\u4ee5\u5f88\u7b80\u4fbf\u7684\u5199\u51fa\u4ee3\u7801\uff01\n\n-----------\n\u8fd9\u91cc\u5229\u7528\u4e86set\u7684\u4e00\u4e2a\u6027\u8d28!\n---\nset\u91cc\u9762\u7684\u4e1c\u897f\u90fd\u662f\u4e92\u5f02\u7684\uff0c\u901a\u4fd7\u6765\u8bb2\u5c31\u662f\u91cc\u9762\u7684\u5143\u7d20\u5404\u4e0d\u76f8\u540c\uff0c\u5982\u679cinsert\u76f8\u540c\u7684\u4e1c\u897f\uff0csize\u4e0d\u4f1a\u6539\u53d8\uff0cset\u91cc\u9762\u7684\u5143\u7d20\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002\n\n---\n\u56e0\u6b64\u8fd9\u9053\u9898\u8f93\u5165\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0cset\u91cc\u7684size\u4e0d\u4f1a\u6539\u53d8\uff01\u6240\u4ee5\u7528set\u662f\u4e00\u4e2a\u597d\u65b9\u6cd5\uff01\uff01\uff01\n\n---\n```cpp\n#include<iostream>\n#include<set>\nusing namespace std;\nset<string> s;\nint N;\nint main()\n{\n    string ss;\n    cin>>N;\n    for(int i=1;i<=N;i++)\n    {\n        cin>>ss;\n        s.insert(ss);\n        //cin\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0cinsert\u4e00\u4e2a\u5b57\u7b26\u4e32\n    }\n    cout<<s.size();\n    //\u6700\u540e\u76f4\u63a5\u8f93\u51fasize\u5373\u53ef\uff01\uff01\uff01\n    return 0;\n}\n```",
        "postTime": 1533525983,
        "uid": 113633,
        "name": "lg_lihaoyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u6b63\u5e38\u6765\u8bb2\u54c8\u5e0c\u7684\u67e5\u627e/\u4fee\u6539\u662fO(1)\u7684\uff08\u4e0d\u5f97\u4e0d\u8bf4\u5f88\u4f18\u7f8e\uff0c\u4e5f\u5f88\u4f18\u79c0\uff09\uff0c\u800cset\u3001map\u3001unordered_map\u4e4b\u7c7b\u7684\u4e1c\u897f\u90fd\u662fO(logn)\u7684\uff0c\u800c\u4e14\u636e\u8bf4\u5b57\u7b26\u4e32\u7528>\u3001<\u3001\u548c=\u7684\u6bd4\u8f83\u90fd\u662fO(lenth)\u7684\u3002\u4f46\u662f\u5e94\u4e3a\u8fd9\u9898\u6570\u636e\u6bd4\u8f83\u6c34\uff0c\u5c31\u8fc7\u4e86\u3002\n\n## # **\u5148\u6765\u770b\u4e00\u4e0b\u624b\u5199\u7684\u6392\u5e8f\u6811\uff08\u849f\u84bb\u4e0d\u4f1a\u5199\u5e73\u8861\u6811\uff09\uff1a**# \n\u5b57\u7b26\u4e32\u5982\u679c\u7528> \u3001<\u3001=\u6bd4\u8f83\u5927\u5c0f\u53ef\u80fd\u6bd4\u8f83\u7384\u5b66\uff0c\u4f46\u8fd9\u4e0d\u91cd\u8981\uff0c\u53ea\u8981\u4fdd\u8bc1\u89c4\u5219\u4e0d\u6539\u53d8\u5c31\u884c\u4e86\u3002\u81f3\u4e8e\u6392\u5e8f\u6811\uff0c\u5c31\u628a\u6b63\u5e38\u7684\u6811\u5220\u6389\u4e00\u5806\u529f\u80fd\uff0c\u518d\u628aint\u6539\u6210string\u5c31\u884c\u4e86\u3002\n```cpp\n#include<iostream>\nusing namespace std;\n\nint n,size;//\u8ba1\u7b97\u6570\u91cf\nstring s;\n\nstruct node\n{\n\tstring v;\n\tnode *lc,*rc;//\u53ea\u4f1a\u6307\u9488\u7248\u7684\uff08\u4e5f\u662f\u65b9\u4fbf\u4ee5\u540e\u5e73\u8861\u6811\u7684\u65cb\u8f6c\u64cd\u4f5c\uff09\n    node(string v=\"\",node *l=NULL,node *r=NULL)\n\t{\n\t\tthis->v=v;\n\t\tthis->lc=l;\n\t\tthis->rc=r;\n\t}//\u521d\u59cb\u5316\uff08\u867d\u7136\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\uff09\n}*root=new node;//\u7533\u8bf7\u5185\u5b58\n\nvoid insert(string val,node *cur)//\u63d2\u5165\uff08\u61d2\u5f97\u5199\u6210\u5458\u51fd\u6570\uff09\n{\n\tif(cur->v>val)\n\t\tif(cur->lc==NULL)\n\t\t{\n\t\t\tnode *c=new node;\n\t\t\tcur->lc=c;\n\t\t\tc->v=val;\n\t\t}\n\t\telse\n\t\t\tinsert(val,cur->lc);\n\telse\n\t{\n\t\tif(cur->rc==NULL)\n\t\t{\n\t\t\tnode *c=new node;\n\t\t\tcur->rc=c;\n\t\t\tc->v=val;\n\t\t}\n\t\telse\n\t\t\tinsert(val,cur->rc);\n\t}\n}//\u6807\u51c6\u6392\u5e8f\u6811\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n\nbool find(string v,node *cur)//\u67e5\u627e\n{\n\tif(cur->v==v)\n\t\treturn true;\n\telse if(cur->v>v)\n\t\tif(cur->lc==NULL)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn find(v,cur->lc);\n\telse\n\t\tif(cur->rc==NULL)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn find(v,cur->rc);\n}\n\nint main()\n{\n\tcin>>n;\n\tcin>>s;\n\tinsert(s,root);\n\tsize++;//\u7b2c\u4e00\u4e2a\u80af\u5b9a\u4e0d\u4f1a\u91cd\u5408\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tcin>>s;\n\t\tif(!find(s,root))\n\t\t{\n\t\t\tsize++;\n\t\t\tinsert(s,root);\n\t\t}\n\t}\n\tcout<<size;//\u7ecf\u4eba\u5de5\u4eb2\u6d4b\uff0c\u4e0d\u5199return 0;\u4e0d\u4f1a\u6b7b\u4eba\n}\n```\n## \u518d\u770bSTL\u7684set/map/unordered_map\uff08\u5176\u5b9e\u57fa\u672c\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u5199\u4e00\u79cd\uff09\n```cpp\n#include<iostream>\n#include<unordered_map>//c++11\u65b0\u7279\u6027\nusing namespace std;\n\nint n;\nstring s;\nunordered_map<string,bool>m;//\u7533\u8bf7\n\nint main()\n{\n\tcin>>n;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tcin>>s;\n\t\tm[s]=1;//\u7b49\u4e8e\u51e0\u4e0d\u91cd\u8981\uff0c\u6709\u5c31\u884c\n\t}\n\tcout<<m.size();//\u61d2\n}\n```\n\n[\u535a\u5ba2](https://www.luogu.org/blog/mayinfei/solution-p3370)",
        "postTime": 1523098172,
        "uid": 27950,
        "name": "fly20040720",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528c++11 \u4e2d\u7684hash\u6a21\u677f\u51fd\u6570\u6765\u505a\uff01\n\n\u5c31\u4e0d\u7528\u518d\u624b\u5199\u54c8\u5e0c\u4e86\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4f1a\u51fa\u73b0\u78b0\u649e\u7684\u95ee\u9898\uff08c++\u81ea\u5e26\u7684\u51fd\u6570\u78b0\u649e\u51e0\u7387\u5f88\u5c0f\uff09\n\n\u53ea\u9700\u8981\u5f15\u5165\u4e00\u4e2a<functional>\u5934\u6587\u4ef6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#include <functional>\n#include <string>\nusing namespace std;\nvector<unsigned long long >a;\nint main(int argc, char *argv[]) {\n    ios::sync_with_stdio(0);\n\n    std::hash<std::string> h;\n    \n    int n;\n    cin>>n;\n    string s;\n    for(int i=0;i<n;i++){\n        cin>>s;\n        a.push_back(h(s));\n    }\n    sort(a.begin(),a.end());\n    a.erase(unique(a.begin(),a.end()),a.end());\n    cout<<(int)a.size()<<endl;\n\n    return 0;\n}\n```",
        "postTime": 1512898459,
        "uid": 3276,
        "name": "zqqian123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370"
    },
    {
        "content": "#\u770b\u5230\u8fd9\u4e48\u591ahash,\u53d1\u4e00\u4e2a\u7528C++string\u66b4\u529b\u7684\u9898\u89e3\n\n\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5b57\u7b26\u4e32\u5224\u65ad\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u4e0e\u4e4b\u76f8\u540c\uff0c\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\n\n\u7528flag\u6807\u8bb0\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u5b83\u4e4b\u524d\u5df2\u7ecf\u6709\u5b57\u7b26\u4e32\u4e0e\u4e4b\u76f8\u540c\uff0c\u82e5\u76f8\u540c\u5c31\u8df3\u8fc7\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<algorithm>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<queue>\nusing namespace std;\nstring s[10010];\nlong long ans;\nbool flag[10010];\nint main()\n{\n     //freopen(\"1.in\",\"r\",stdin);\n    // freopen(\"1.out\",\"w\",stdout);\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        cin>>s[i];\n    for(int i=1;i<=n;i++)\n    {\n        if(flag[i]==1)\n        {\n            ans++;\n            continue;\n        }\n        for(int j=i+1;j<=n;j++)\n            if(s[i]==s[j])\n            {\n                flag[j]=1;\n                flag[i]=1;\n            }\n    }\n    printf(\"%lld\",n-ans);\n}\n```",
        "postTime": 1510047792,
        "uid": 34125,
        "name": "cchhqq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "### pb\\_ds\u5927\u6cd5\u597d\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u6b63\u513f\u516b\u7ecf\u7684\u4e0d\u7528\u624b\u5199\u7684\u54c8\u5e0c\u8868\u2014\u2014pb\\_ds\u5e93\u91cc\u7684hash\\_table\u3002\n\n\u56e0\u4e3amap\u5185\u90e8\u6392\u4e86\u5e8f\uff0c\u6240\u4ee5\u4f1a\u6162\u4e00\u4e9b\uff0c\u800chash\\_table\u5c31\u548c\u624b\u5199\u7684\u51e0\u4e4e\u5dee\u4e0d\u591a\u4e86\u3002\n\n\u5f53\u7136\u5728\u6211\u7684\u4ee3\u7801\u4e2d\uff0c\u628agetline\u6362\u6389\u5e94\u8be5\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002\n\n**\u4f7f\u7528pb\\_ds\u5e93\u7684hash\\_table\u9700\u8981\u5305\u542b\u4e24\u4e2a\u5934\u6587\u4ef6**~~\uff0c\u5176\u5b9e\u6211\u89c9\u5f97pb\\_ds\u5e93\u6700\u96be\u7684\u5c31\u662f\u80cc\u5934\u6587\u4ef6\u4e86~~\n\n\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp>\n#define f(i,a,b) for(register int i=int(a);i<=int(b);++i)\nusing namespace std;\n__gnu_pbds::cc_hash_table<string,int>ht;//\u6216\u8005gp_hash_table,\u8c8c\u4f3c\u6162\u4e00\u70b9 \nint main()\n{\n    int n,sum=0;\n    string s,instead;\n    scanf(\"%d\",&n);getline(cin,instead);\n    f(i,1,n)\n    {\n        getline(cin,s);\n        if(!ht[s])ht[s]=1,++sum;\n    }\n    printf(\"%d\\n\",sum);\n}\n```",
        "postTime": 1503474869,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "# \u5176\u5b9e\u8fd9\u9898\u4e0d\u7528\u54c8\u5e0c\uff0c\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\n### \u4ec0\u4e48\u662f\u4e8c\u53c9\u641c\u7d22\u6811\n1. \u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u5173\u952e\u5b57\u90fd\u4e0d\u540c\uff1b\u56e0\u6b64\uff0c\u6240\u6709\u7684\u5173\u952e\u5b57\u90fd\u662f\u552f\u4e00\u7684\u3002\n2. \u5728\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\uff0c\u5143\u7d20\u7684\u5173\u952e\u5b57\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u90fd\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u5173\u952e\u5b57\u3002\n3. \u5728\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u5143\u7d20\u7684\u5173\u952e\u5b57\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u90fd\u5927\u4e8e\u6839\u8282\u70b9\u7684\u5173\u952e\u5b57\u3002\n4. \u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\n\n\u5982\u56fe\uff1a\u8fd9\u4e24\u68f5\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811\n![mIkmef.png](https://s2.ax1x.com/2019/08/27/mIkmef.png)\n\n\u7531\u6b64\u770b\u51fa\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a*O*(h) ,h\u4e3a\u6811\u7684\u9ad8\u5ea6\u3002\u4e5f\u5c31\u662f\u8bf4\u4e8c\u53c9\u641c\u7d22\u6811\u7684**\u5e73\u5747**\u65f6\u95f4\u4e3a*O*(log n),**\u6700\u574f**\u4e3a*O*(n)\u3002\u968f\u673a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u6700\u574f\u7684\u51e0\u7387\u5f88\u5c0f\u3002\n\n\u4f9d\u9898\u610f\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5173\u952e\u5b57 key\u7531\u6570\u5b57\u6539\u4e3a\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n### \u63d2\u5165\n\u8981\u63d2\u5165 D \uff0c\u56e0\u4e3a\u6811\u4e3a\u7a7a\uff0c\u6240\u4ee5\u76f4\u63a5\u63d2\u5165\u5230\u6839\u8282\u70b9\uff0c\u63d2\u5165\u6210\u529f\u3002\n![mXGi1U.png](https://s2.ax1x.com/2019/08/30/mXGi1U.png)\n\n\u7136\u540e\u8981\u63d2\u5165 A, \u56e0\u4e3aD\u7684\u5b57\u5178\u5e8f\u6bd4A\u5927\uff0c\u6307\u9488\u6307\u5411D\u7684\u5de6\u5b50\u6811\uff0c\u53d1\u73b0D\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u6240\u4ee5\u63d2\u5165\u5230D\u7684\u5de6\u5b50\u6811\uff0c\u63d2\u5165\u6210\u529f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n![mX8q1S.png](https://s2.ax1x.com/2019/08/30/mX8q1S.png)\n\n\u7136\u540e\u8981\u63d2\u5165 F, \u56e0\u4e3aD\u7684\u5b57\u5178\u5e8f\u6bd4F\u5c0f\uff0c\u6307\u9488\u6307\u5411D\u7684\u53f3\u5b50\u6811\uff0c\u53d1\u73b0D\u7684\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u6240\u4ee5\u63d2\u5165\u5230D\u7684\u5de6\u5b50\u6811\uff0c\u63d2\u5165\u6210\u529f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n[![mXGyHs.png](https://s2.ax1x.com/2019/08/30/mXGyHs.png)](https://imgchr.com/i/mXGyHs)\n\n\u7136\u540e\u8981\u63d2\u5165 E\uff0c\u56e0\u4e3aD\u7684\u5b57\u5178\u5e8f\u6bd4E\u5c0f\uff0c\u6307\u9488\u6307\u5411D\u7684\u53f3\u5b50\u6811\uff08\u4e5f\u5c31\u662f\u6307\u9488\u6307\u5411F\uff09\uff0c\u4e4b\u540e\u53d1\u73b0 E\u7684\u5b57\u5178\u5e8f\u6bd4 F\u5c0f\uff0c\u6307\u9488\u6307\u5411 F\u7684\u5de6\u5b50\u6811\uff0c\u53d1\u73b0\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u6240\u4ee5\u63d2\u5165\u5230F\u7684\u5de6\u5b50\u6811\uff0c\u63d2\u5165\u6210\u529f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n![mXY9QU.png](https://s2.ax1x.com/2019/08/30/mXY9QU.png)\n\n\u6700\u540e\u8981\u63d2\u5165 A\uff0c\u56e0\u4e3aD\u7684\u5b57\u5178\u5e8f\u6bd4A\u5927\uff0c\u6307\u9488\u6307\u5411D\u7684\u5de6\u5b50\u6811\uff0c**\u6ce8\u610f\u7684\u5730\u65b9\u6765\u4e86\n\uff0c\u53d1\u73b0 A\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u6240\u4ee5\u63d2\u5165\u5931\u8d25**\u3002\n![mXNcsU.png](https://s2.ax1x.com/2019/08/30/mXNcsU.png)\n\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u8fd9\u8981\u7edf\u8ba1 \u63d2\u5165\u6210\u529f \u7684\u6b21\u6570\uff0c\u628a\u4ed6\u8f93\u51fa\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7528\u94fe\u8868\u5199\u51fa\u4e8c\u53c9\u641c\u7d22\u6811\u6765\u3002\n```cpp\n\n#include <iostream>\n#include<cstdio>\n#include<string>\ntemplate<typename A, typename B>\nclass Binary_Search_Tree\n{\npublic:\n\tBinary_Search_Tree()\n\t{\n\t\troot = NULL;\n\t\ttreesize = 0;\n\t}\n\t~Binary_Search_Tree()\n\t{\n\t}\n\t/*\u63d2\u5165\u5143\u7d20*/\n\tvoid ins(const A thekey, const B thedate)\n\t{\n\t\tnode *q = root, *qq = NULL;\n\t\twhile (q != NULL)\n\t\t{\n\t\t\tqq = q;\n\t\t\tif (thekey > q->key)/*\u5982\u679c\u8981\u67e5\u627e\u7684\u5173\u952e\u5b57\u5927\u4e8e\u6839\u8282\u70b9\u7684\u5173\u952e\u5b57\uff0c\u5219\u53d6\u53f3\u5b50\u6811\u627e*/\n\t\t\t\tq = q->right;\n\t\t\telse if (thekey < q->key)/*\u5982\u679c\u8981\u67e5\u627e\u7684\u5173\u952e\u5b57\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u5173\u952e\u5b57\uff0c\u5219\u53d6\u5de6\u5b50\u6811\u627e*/\n\t\t\t\tq = q->left;\n\t\t\telse\n\t\t\t{\n\t\t\t\tq->date = thedate;\t/*\u5982\u679c\u76f8\u540c\u5173\u952e\u5b57\uff0c\u5219\u8986\u76d6\u65e7\u7684\u503c*/\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n        /*\u65b0\u5efa\u8282\u70b9*/\n\t\tnode *newnode = new node(thekey, thedate);\n\t\tif (root != NULL)\t/*\u5982\u679c\u6811\u4e0d\u4e3a\u7a7a*/\n\t\t{\n\t\t\tif (thekey > qq->key)\n\t\t\t\tqq->right = newnode;\n\t\t\telse qq->left = newnode;\n\t\t}\n\t\telse\t/*\u5982\u679c\u6811\u4e3a\u7a7a*/\n\t\t\troot = newnode;\n\t\ttreesize++;\n\t}\n    /*\u8fd4\u56de\u8282\u70b9\u4e2a\u6570*/\n\tinline unsigned int size()const\n\t{\n\t\treturn treesize;\n\t}\nprivate:\n\tstruct node\n\t{\n\t\tA key;\n\t\tB date;\n\t\tnode *left, *right;\n\t\tnode(A _key,B _date)\n\t\t{\n\t\t\tkey = _key;\n\t\t\tdate = _date;\n\t\t\tleft = NULL;\n\t\t\tright = NULL;\n\t\t}\n\t}*root;\n\tunsigned int treesize;\n};\nBinary_Search_Tree<std::string, bool> t;\nint main()\n{\n\tint n;\n\tscanf(\"%d\", &n);\n\tstd::string tmp;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tstd::cin >> tmp;\n\t\tt.ins(tmp, 1);\n\t}\n\tprintf(\"%d\", t.size());\n\treturn 0;\n}\n```\n\u4e8c\u53c9\u641c\u7d22\u6811\u8fd8\u6709\u5f88\u591a\u529f\u80fd\uff08\u67e5\u627e\u3001\u5220\u9664\u3001\u6700\u5c0f\u503c\u3001\u6700\u5927\u503cand so on\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u672c\u9898\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u4e86\uff0c\u5982\u679c\u60f3\u5b66\u4e60\u7684\u81ea\u884c\u767e\u5ea6\u3002\u5982\u679c\u4f60\u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u8bf7\u5b66\u4e60\u7279\u6b8a\u7684\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1aAVL\u6811\uff0c\u5b83\u80fd\u4fdd\u8bc1\u6811\u7684\u9ad8\u5ea6\u4e3a*log*(n)\uff0c\u4e5f\u5c31\u662f\u67e5\u627e\uff0c\u63d2\u5165\uff0c\u5220\u9664\u7684\u590d\u6742\u5ea6\u90fd\u4e3a*log*(n)\u3002\n\n\u5982\u679c\u8fd8\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5\u70b9\u6211\u5934\u50cf\u79c1\u4fe1\u6211\uff0c**\u5982\u679c\u4f60\u53d1\u73b0\u672c\u9898\u89e3\u6709\u95ee\u9898\u6216\u6709\u5199\u5f97\u4e0d\u6e05\u695a\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u79c1\u4fe1\u6216\u5728\u8bc4\u8bba\u533a\u7559\u8a00**\u3002",
        "postTime": 1566898714,
        "uid": 57365,
        "name": "\u6a31\u82b1\u98de\u821e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "#### \u9898\u9762\u63cf\u8ff0:\n\n\u5c31\u662f\u6a21\u677f\uff0c\u95ee\u4e00\u5806\u5b57\u7b26\u4e32\u4e2d\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u3002\n\n#### \u601d\u8def:\n\n\u6211\u4eec\u6765\u76ae\u4e00\u628a\uff0c\u770b\u770bSTL\u7684\u5a01\u529bqaq\n\n\u5927\u5bb6\u90fd\u77e5\u9053\uff0cset\u662f\u53ef\u4ee5\u53bb\u91cd\u7684\u2026\u2026\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u63d2\u5165\u4e00\u4e2aset\u4e2d\uff0c\u6700\u540e\u8f93\u51faset\u5927\u5c0f\u5373\u53ef\u3002\n\n#### \u4ee3\u7801\u4e0e\u89e3\u6790:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nunordered_set<string> us;//\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u4e0d\u6392\u5e8f\u5e76\u4e14\u53bb\u91cd\uff0c\u4f46\u53ea\u652f\u6301C++11\u6216\u4ee5\u4e0a\uff0c\u6240\u4ee5NOIP\u522b\u7528\nint main(){\n\tint n;\n\tstring s;\n\tcin>>n;//\u8f93\u5165\u5b57\u7b26\u4e32\u4e2a\u6570\n\tfor(int i=0;i<n;i++){\n\t\tcin>>s;//\u8f93\u5165\u5b57\u7b26\u4e32\n\t\tus.insert(s);//\u63d2\u5165\u5230set\u4e2d\n\t}\n\tcout<<us.size();//\u53ea\u9700\u8f93\u51faset\u5927\u5c0f\u5373\u53ef\n\treturn 0;\n}\n```\n",
        "postTime": 1565960343,
        "uid": 149872,
        "name": "\u5c0f\u5c0f\u5c0f\u670b\u53cb",
        "ccfLevel": 5,
        "title": "P3370 \u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c"
    },
    {
        "content": "### \u4ee3\u7801\n\nC++ STL\u505a\u6cd5\uff1a\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\nvector <string> linker[1502];\nint ans;                                 //\u7528\u4e8e\u8bb0\u5f55\u5b57\u7b26\u4e32\u7684\u6570\u91cf\nvoid ins(string s) {\n    int v=s.length();                    //\u4ee5\u957f\u5ea6\u5206\u7c7b\n    for (int i=0;i<linker[v].size();i++) //\u4ece\u5bb9\u5668\u7684\u5934\u904d\u5386\u5230\u5c3e\n       if (linker[v][i]==s)              //\u5982\u679c\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n            return;\n    linker[v].push_back(s);              //\u5426\u5219\u8ffd\u52a0\u5230\u672b\u5c3e\n    ans++;                               //\u6570\u91cf++\n}\nint main() {\n    int n;\n    string x;\n    cin >> n;\n    for (int i=0;i<n;i++) {\n        cin >> x;\n        ins(x);\n    }\n    cout << ans;\n    return 0;\n}\n```\n\n\u6ee1\u5206AC\n\n### \u5206\u6790\n\n\u6211\u770b\u5230\u9898\u89e3\u533a\u91cc\u7684\u4eba\u597d\u50cf\u90fd\u662f\u7528\u6807\u51c6\u505a\u6cd5~~To Be Continued~~\u4e5f\u5c31\u662f\u628a\u5b57\u7b26\u4e32\u91cc\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26balabala\u2026\u2026~~\u4e3a\u4ec0\u4e48\u7701\u7565\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u505a~~\n\n\u800c\u6211\u7684\u505a\u6cd5\uff0c\u5219\u662f\u6309\u7167\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6765\u8fdb\u884chash\uff0c\u8be6\u89c1\u6ce8\u91ca\n\n\u5f53\u7136\u53ef\u4ee5\u7528map\u505a\uff0c\u4e0d\u8fc7\u6ca1\u6709\u6311\u6218\u6027\uff0c~~\u6211\u4eec\u4e00\u822c\u79f0\u8fd9\u79cd\u4eba\u4e3a\u6302B~~",
        "postTime": 1565675608,
        "uid": 155107,
        "name": "\u5144\u4e3b\u7684\u4ed9\u4eba\u638c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u8981\u7528\u4e00\u4e2a\u4e1c\u897f\uff0c\u53ebset\uff01\uff01\uff01\n\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bset\uff0c\u4f60\u628a\u4e00\u5927\u5806\u4e1c\u897f\u6254\u8fdbset\uff0cset\u4f1a\u6392\u5e8f\uff0c\u8fd8\u6709\uff0cset\u53ef\u4ee5\u53bb\u91cd\uff01\uff01\n\nset\u7684\u4e3b\u8981\u51fd\u6570\u6709\n\ninsert(a)   \u3000\u3000     ,\u5c06a\u52a0\u8fdbset          \n\nbegin()     \u3000\u3000 ,\u8fd4\u56deset\u5bb9\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\nend() \u3000\u3000\u3000\u3000 ,\u8fd4\u56deset\u5bb9\u5668\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n\nclear()   \u3000\u3000     ,\u5220\u9664set\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u7684\u5143\u7d20\n\nempty() \u3000\u3000\u3000,\u5224\u65adset\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\n\nmax_size() \u3000 ,\u8fd4\u56deset\u5bb9\u5668\u53ef\u80fd\u5305\u542b\u7684\u5143\u7d20\u6700\u5927\u4e2a\u6570\n\nsize() \u3000\u3000\u3000\u3000 ,\u8fd4\u56de\u5f53\u524dset\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\n\n\u4ee3\u7801\uff0c\u53ea\u6709\u5341\u51e0\u884c\u3002\n```cpp\n#include <iostream>\n#include <set>//set\u7684\u5934\u6587\u4ef6\n#include <string>\nusing namespace std;\nset<string> se;//set\u5b9a\u4e49\u4e3a\"set<\u7c7b\u578b> \u540d\u5b57\"\nint main()\n{\n    string a;\n    int n;\n    cin >> n;\n    for(int i = 0;i < n;i++){cin >> a;se.insert(a);}//\u5c06a\u52a0\u8fdbset\n    cout << se.size();//\u76f4\u63a5\u8f93\u51fa\u957f\u5ea6\u5373\u53ef\n    return 0;\n}\n\n```\n",
        "postTime": 1561456275,
        "uid": 167465,
        "name": "max0810",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u6069\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u9053\u6a21\u677f\u9898\u7684\u6570\u636e\u7565\u6c34\uff0c\u56e0\u4e3a\u6211\u53d1\u73b0map\u662f\u53ef\u4ee5\u8fc7\u7684\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5e93 \nusing namespace std;\nmap <string,bool> mp;//\u5b9a\u4e49\u4e00\u4e2a\u952e\u503c\u4e3astring,\u6620\u5c04\u503c\u4e3abool\u7684map \nint ans,n;\nstring a;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a;\n        if(!mp.count(a))//\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u8fc7\u8fd9\u4e2a\u6620\u5c04 \n        {\n            ans++;//\u7b54\u6848\u52a0\u4e00 \n            mp[a]=1;//\u8bb0\u5f55 \n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1506433238,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u62c9\u4e86\u94fe\u7684hash\u5c31\u4f1a\u5728\u6b8b\u66b4\u6570\u636e\u4e0b\u8deaTLE\uff0c\u5e72\u8106\u591a\u5f04\u4e9b\u8d28\u6570\uff0c\u6211\u4e00\u5f00\u59cb\u968f\u4fbf\u5f04\u4e863\u4e2a\u8d28\u6570\uff0c\u5361\u6389\u4e86\u4e00\u4e2a\u70b9\u3002\u7136\u540e\u5f044\u4e2a\u5c31ac\u4e86\uff0c\n\n\u5f04\u8d28\u6570\u641e\u4e2a\u7ebf\u6027\u7b5b\u5c31\u884c\u4e86\u3002\n\n\u7b80\u5355\u8bb2\u4e0b\u600e\u4e48\u4e2ahash\u641e\u6cd5\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5b9a\u4e49\u5b83\u7684hash\u503c\u4e3a\uff08s[0]+seed\uff09^l%Mod+(s[1]+seed)^(l-1)%Mod+(s[2]+seed)^(l-2)%Mod......+(s[n]+seed)%Mod\n\nseed\u561b\u5c31\u662f\u6211\u4eec\u968f\u673a\u9009\u62e9\u7684\u4e00\u4e2a\u79cd\u5b50\uff0c\u4e00\u822c\u90fd\u53d6131,13131,131313131.\u3002\u3002\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528233,23333\u3010\u624b\u52a8\u6ed1\u7a3d\u3011\n\nMod\u5c31\u662f\u6211\u4eec\u5f04\u5f97\u8d28\u6570\u8868\u3002l\u5c31\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5e42\u4e0d\u597d\u76f4\u63a5\u5f04\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u6b65\u6b65\u5c55\u5f00\u5c31\u884c\u4e86\uff08\u6362\u8ba1\u5212\u8bf4\uff0c\u5c31\u662f\u628a10\u8fdb\u5236\u8f6c\u5316\u4e3aseed\u8fdb\u5236\uff09\n\n\u60f3\u95ee\u95ee\u8def\u8fc7\u7684dalao\uff0c\u6709\u6ca1\u6709\u624b\u5199set\u7684\u3010\u624b\u52a8\u6ed1\u7a3d\u3011\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int N=200000;\nconst int seed=131;\nint Mod[4]={101701,100271,100447,164023};\nbool f[N],g[N],h[N],t[N];\nint n;\nchar s[N];\nint makeID(int bo){\n    int len=strlen(s),tmp=0;\n    for (int i=0;i<len;i++)\n        tmp=(tmp*seed+s[i])%Mod[bo];\n    return tmp;\n}\nint main(){\n    scanf(\"%d\",&n);\n    int ans=n;\n    for (int i=1;i<=n;i++){\n        scanf(\"%s\",s);\n        int id1=makeID(0),id2=makeID(1),id3=makeID(2),id4=makeID(3);\n        if (f[id1] && g[id2] && h[id3] && t[id4])ans--;\n        f[id1]=g[id2]=h[id3]=t[id4]=1;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1503650781,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8865\u5145\u4e00\u4e2a\u62c9\u94fe\u7684\u505a\u6cd5\uff0c\u4e3a\u4e86\u89e3\u51b3\u54c8\u5e0c\u78b0\u649e\uff0c\u53ef\u4ee5\u628a\u54c8\u5e0c\u51fd\u6570\u76f8\u540c\u7684\u4e32\u6210\u94fe\u8868\uff0c\u6bcf\u6b21\u53ea\u8981\u987a\u7740\u8fd9\u4e2a\u94fe\u8868\u5f80\u4e0b\u627e\u6bd4\u8f83\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define f(i,l,r) for(i=(l);i<=(r);i++)\nusing namespace std;\nconst int MAXN=10005,MAXM=1505,MOD=5000011,Base=233;\nint n;\nstring a[MAXN];\nstruct Edge{\n    string v;\n    int next;\n}e[MAXN];\nint head[MOD],tot;\ninline int H(int x)\n{\n    int i,l=a[x].length();\n    int key=0;\n    f(i,0,l-1){\n        key=(key*Base+a[x][i])%MOD;\n    }\n    return key;\n}\ninline int add(int x)\n{\n    int i,ha=H(x);\n    for(i=head[ha];i;i=e[i].next){\n        if(e[i].v==a[x]) return 0;\n    }\n    e[++tot].v=a[x];\n    e[tot].next=head[ha];\n    head[ha]=tot;\n    return 1;\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    int i,j,ans=0;\n    cin>>n;\n    f(i,1,n){\n        cin>>a[i];\n        ans+=add(i);\n    }\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1503565706,
        "uid": 18601,
        "name": "\u6770\u68ee\u7684\u4f2f\u6069",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u6211\u7231\u54c8\u5e0c\u8eab\u4f53\u597d\u597d~\n\n\u9644\u6838\u5fc3\u4ee3\u7801\n\n```cpp\nint khash(string s)\n{\n    int hanum=0,tmp=31;              //\u770b31\u987a\u773c\u5c31\u519931\u4e86\u3002\u3002\n    for (int i=0;i<s.length();i++)\n        hanum=hanum*tmp+s[i];           //\u6700\u6734\u7d20\u7684hash\u7b97\u6cd5\n    hanum=hanum&0x7fffffff;               //\u8fd4\u56de\u4e8c\u8fdb\u5236\u4e0b\u7b2c\u4e00\u4e2a1\u7684\u4f4d\u7f6e\n    return hanum;\n}\nint insert(string s)            //\u63d2\u5165\n{\n    int hanum=khash(s);         //\u6c42hash\u503c\n    hanum%=bnum;\n    while (hash[hanum]!=\"\"&&hash[hanum]!=s)          //\u5f53\u4e0d\u51b2\u7a81\u65f6\n    {\n        hanum++;\n        if (hanum==bnum) hanum=0;        //\u8bb0\u5f97\u5224\u65ad\u6570\u7ec4\u5927\u5c0f\n    }\n    hash[hanum]=s;            //\u63d2\u5165\n    return 0;\n}\nint find(string s)\n{\n    int hanum=khash(s);\n    hanum%=bnum;\n    while (hash[hanum]!=\"\"&&hash[hanum]!=s)\n    {\n        hanum++;\n        if (hanum==bnum) hanum=0;\n    }     //\u4ee5\u4e0a\u5185\u5bb9insert\u627e\u3002\u3002\u3002\u3002\n    return (hash[hanum]!=s);       //1\u4e3a\u627e\u5230\uff0c\u53cd\u5219\u6ca1\u627e\u5230\n}\n\n```",
        "postTime": 1481893656,
        "uid": 9087,
        "name": "fl_334",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u666e\u901a\u7684trie\u5f53\u7136\u505a\u4e0d\u4e86\u5566\uff0c\u6bd5\u7adf\u8f93\u5165\u8fd9\u4e48\u5927\u3002\n\n\u6b63\u786e\u7684\u59ff\u52bf\u5e94\u8be5\u662f\u538b\u7f29\u5b57\u5178\u6811\u5427\uff0c\u56e0\u4e3aN\u7684\u89c4\u6a21\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u538b\u7f29\u5b57\u5178\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5c0f\u3002\n\n\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u67e5\u627e\u2014\u2014\u6211\u662f\u5728\u9012\u5f52\u5efa\u6811\u65f6\u5b58\u4e00\u4e0b\u6709\u6ca1\u6709\u5bf9\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u6709\u4fee\u6539\u8fc7\u5c31\u628a\u7b54\u6848+1(s)\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u610f\u5473\u7740\u627e\u5230\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u4e32\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e86\u3002\n\n\u5f53\u7136\uff0c\u901f\u5ea6\u8fd8\u662f\u8981\u6bd4hash\u6162\u4e0d\u5c11\u7684\u3002\n\n\u4e0d\u77e5\u4e3a\u4f55\u8bfb\u5165\u5199\u9519\u4e86= =wa\u4e86\u597d\u51e0\u6b21\u3002\n\n\u9644\u4ee3\u7801\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct Node{\n    int st,ed,cnt;\n    Node *ch[64];\n    char sus[64];\n};\nint ans=0;\nchar sus[20000000],c[20000],re;\nNode *t=new(Node),*tnode;\nint n,cmq,len,size,tmp;\nvoid clear(Node *p){\n    p->st=p->ed=size;\n    p->cnt=0;\n}\nint same(Node *p,int st){\n    int i;\n    for(i=0;p->st+i < p->ed&&st+i<len&&c[st+i]==sus[ p->st +i];i++);\n    return i;\n}\nvoid diliver(Node * &p,int len){\n    Node *t=new(Node);\n    t->st=p->st;\n    t->ed=t->st+len;\n    t->cnt=1;\n    t->sus[0]=sus[t->ed];\n    t->ch[0]=p;\n    p->st=t->ed;\n    p=t;\n}\nint find(Node *p,char ch){\n    for(int i=0;i< p->cnt;i++)\n        if(p->sus[i]==ch)\n            return i;\n    return -1;\n}\nvoid insert(Node *&p,int st,int flag){\n    int ll;\n    ll=same(p,st);\n    if(ll==p->ed - p->st){\n        st=st+ll;\n    }\n    else{\n        diliver(p,ll);\n        flag=1;\n        st=st+ll;\n    }\n    if(st==len){\n        if(flag) ans++;\n        return;\n    }\n    else{\n        tmp=find(p,c[st]);\n        if(tmp!=-1) insert(p->ch[tmp],st,flag);\n        else{\n            tnode=new(Node);\n            p->ch[p->cnt]=tnode;\n            p->sus[p->cnt]=c[st];\n            p->cnt++;\n            clear(tnode);\n            for(int i=st;i<len;i++)\n                sus[tnode->ed++]=c[i];\n            size=tnode->ed;\n            flag=1;\n            if(flag) ans++;\n            return;\n        }\n    }\n}\nint main(){\n    clear(t);\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>c;\n        len=strlen(c);\n        insert(t,0,0);\n    }\n    cout<<ans<<\"\\n\";\n    return 0;\n}\n```",
        "postTime": 1481800222,
        "uid": 26393,
        "name": "\u6211\u7684\u59b9\u59b9syf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u3002\u3002\u3002\u8fd9\u9898\u5176\u5b9e\u633a\u5751\u7684\uff0c\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u7528map\u548cset\u6c34\u8fc7\u53bb\uff08MDZZ\u8fd9\u9898\u5c31\u662f\u5f88\u6c34\u561b\uff09\n\n\u9996\u5148\u8fd9\u9053\u9898\u770b\u6570\u636e\u89c4\u6a21\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u6811\u5199\uff0c\u8dd1\u7684\u98de\u5feb\uff0c\u7136\u800c\u6211\u5e76\u6ca1\u6709\u8fd9\u4e48\u5199\u3002\u6240\u4ee5\u5199\u4e2a\u5b57\u7b26\u4e32hash\u7136\u540e\u7528hash\u503c\u8dd1\u4e8c\u832c\u641c\u7d22\u6811\uff08OI\u6ca1\u6709\u9519\u522b\u5b57\uff01\uff01\uff09\uff0c\u7136\u800c\u8fd9\u9898\u5bf9hash\u7b97\u6cd5\u5361\u7684\u8fd8\u662f\u633a\u4e25\u7684\u3002\n\n\u4e00\u5f00\u59cb\u5199\u7684\u662f\u88f8\u7684\u81ea\u7136\u6ea2\u51fa\u7b97\u6cd5\uff0c\u8dd1\u7684\u662f\u98de\u5feb\uff0c\u7136\u800c\u4f1a\u88ab\u5361\u524d\u4e09\u4e2a\u70b9\u3002\u5783\u573e\u6570\u636e\u6bc1\u6211\u4eba\u751f\u3002\n\n\u7136\u540e\u4ece\u7f51\u4e0a\u5b66\u4e86\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u7b97\u6cd5\u53ebAPHash\uff0c\u4e5f\u975e\u5e38\u4e0d\u9519\uff0c\u4ece\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7b97\u51fa\u81ea\u7136\u6ea2\u51fa\u4e0eAPHash\u4e24\u4e2ahash\u503c\uff0c\u7136\u540e\u8fdb\u884c\u53cc\u5173\u952e\u5b57\u6bd4\u8f83\uff0c\u8fd9\u9898\u76ee\u5c31\u53ef\u4ee5AC\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nstruct node\n{\n    unsigned long long h1,h2;//\u4f7f\u7528unsigned long long\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u81ea\u7136\u6ea2\u51fa\u7684\u91cd\u590d\u51e0\u7387\n    int l,r;\n};\nchar ch[1505];\nint n,tot,len;\nnode tree[10005];\nunsigned long long hash1(char ch[],int len)//\u81ea\u7136\u6ea2\u51fa\u7b97\u6cd5\n{\n    if(!len)\n        return 0;\n    unsigned long long ans=0;\n    for(int i=0;i<len;i++)\n        ans=ans*131+ch[i];\n    return ans;\n}\nunsigned long long hash2(char ch[],int len)//APhash\u7b97\u6cd5\n{\n    if(!len)\n        return 0;\n    unsigned long long ans=0;\n    for(int i=0;i<len;i++)\n        if(i&1)\n            ans^=((ans<<7)^ch[i]^(ans>>3));\n    return ans;\n}\nbool operator <(const node &a,const node &b)//\u91cd\u8f7d\u4e0b\u8fd0\u7b97\u7b26\uff0c\u5199\u8d77\u6765\u6bd4\u8f83\u8212\u670d\uff0c\u8fd9\u91cc\u641e\u6210\u53cc\u5173\u952e\u5b57\u7684\u5c31\u53ef\u4ee5\u4e86\n{\n    if(a.h1!=b.h1)\n        return a.h1<b.h1;\n    return a.h2<b.h2;\n}\nbool operator ==(const node &a,const node &b)//\u91cd\u8f7d\u4e0b\u8fd0\u7b97\u7b26\uff0c\u5199\u8d77\u6765\u6bd4\u8f83\u8212\u670d\n{\n    return (a.h1==b.h1)&&(a.h2==b.h2);\n}\nbool operator >(const node &a,const node &b)//\u540c\u4e0a\n{\n    return !(a<b)&&!(a==b);\n}\nvoid finds(int x)//\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u8be2\u4e0e\u5efa\u6811\u64cd\u4f5c\n{\n    if(tree[x]==tree[tot])\n    {\n        tot--;\n        return;\n    }\n    if(tree[tot]>tree[x])\n    {\n        if(tree[x].r)\n            finds(tree[x].r);\n        else\n            tree[x].r=tot;\n        return;\n    };\n    if(tree[x].l)\n        finds(tree[x].l);\n    else\n        tree[x].l=tot;\n}\nint main()//\u4e3b\u7a0b\u5e8f\uff0c\u8f93\u5165\u5e76\u5904\u7406\uff0c\u6570\u636e\u89c4\u6a21\u592a\u5c0f\u5b9e\u5728\u61d2\u5f97\u6253\u5feb\u8bfb\u4e86\n{\n    scanf(\"%d\",&n);\n    scanf(\"%s\",ch),len=strlen(ch),tree[++tot].h1=hash1(ch,len),tree[tot].h2=hash2(ch,len);\n    for(int i=2;i<=n;i++)\n        scanf(\"%s\",ch),len=strlen(ch),tree[++tot].h1=hash1(ch,len),tree[tot].h2=hash2(ch,len),finds(1);\n    printf(\"%d\",tot);\n}\n```",
        "postTime": 1478736692,
        "uid": 11799,
        "name": "losered",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "#**c07\u4f60\u53c8\u641e\u4e8b\u60c5\u2026\u2026**\n\nhash\u6a21\u677f\u9898\u4e0d\u7528hash\u4e0d\u4f1a\u7ed9\u4eba\u4e00\u79cd\u94a6\u5b9a\u7684\u611f\u89c9\u5417\u2026\u2026\n\n\u76f4\u63a5\u6252\u62c9\u4e86\u5e7f\u641c\u7684\u5176\u4e2d\u4e00\u6bb5\u4ee3\u7801\u2026\u2026\n\n\u96be\u9053\u9898\u76ee\u63cf\u8ff0\u7ed9\u51fa\u7684\u4e09\u9053\u9898\u53ea\u662f\u60f3\u8ba9\u6211\u4eec\u53bb\u6311\u6218\u4e00\u4e0b\u5417\u2026\u2026\n\n\u597d\u5427\u4f60\u4eec\u4f1a\u73a9\u2026\u2026\n\n```cpp\n#include<iostream>\n#include<cstdlib>\nusing namespace std;\nstring data[1000007],m;\nint list[1000007]={0},next[1000007]={0},u,sum,cnt,tail=0,n;\nint hash(string h)\n{\n    sum=0;\n    for(int i=0;i<h.size();i++){sum=sum*33+h[i];}//\u627e\u4f4d\u7f6e\n    sum=abs(sum%1000007),u=list[sum];\n    while(u){if(data[u]==h){return 0;}u=next[u];}//\u5982\u679c\u51fa\u73b0\u8fc7\u5219\u4e0d\u52a0\u5165\n    data[++cnt]=h,next[cnt]=list[sum],list[sum]=cnt;//\u63a5\u4e0a\n    return 1;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>m;\n        if(hash(m)){tail++;}//\u7528\u94fe\u5224\u65ad\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\n    }\n    cout<<tail;\n    return 0;\n}\n```",
        "postTime": 1475075455,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "## \u6211\u770b\u5230\u4e0b\u9762\u5927\u4f6c\u4ee3\u7801\u597d\u957f\u554a\uff01\uff01\uff01\n### \u76f4\u63a5\u7531\u66b4\u529b\u5c31\u662f\u4e86\u5457\uff0c\u53c8\u4e0d\u4f1a\u8d85\u65f6(\u6211\u7684\u4ee3\u7801\u5171\u75281282s)\n### \u65b0\u624b\u53ef\u4ee5\u6765\u770b\u4e00\u4e0b\n#### \u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>//cin,cout\u5fc5\u5907\n#include<string>//\u597d\u50cf\u8fd9\u91cc\u6ca1\u7528\nusing namespace std;//\u5fc5\u987b\u52a0\u7684\u4e1c\u4e1c\nint main()//\u4e3b\u51fd\u6570\n{\n\tbool c;\n\tint n,num=0;//n\u4e3a\u5b57\u7b26\u4e32\u4e2a\u6570\uff0cnum\u4e3a\u4e0d\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\n\tcin>>n;//\u8f93\u5165\n\tstring a[n],b;//a\u4e3a\u5b58\u4e92\u4e0d\u76f8\u540c\u7684\u5b57\u7b26\u4e32\n\tfor(int i=0;i<n;i++)\n\t{\n    \tc=0;//\u4fee\u6539\u72b6\u6001\n\t\tcin>>b;//\u8f93\u5165\n\t\tfor(int j=0;j<num;j++)//\u4e00\u4e2a\u4e00\u4e2a\u627e\n\t\t\tif(a[j]==b) {c=1;break;}//\u4fee\u6539\u72b6\u6001+\u8df3\u8fc7\u6b64\u5c42\u5faa\u73af\n\t\tif(c==0) {a[num]=b;num++;}//\u5224\u65ad\n\t}\n\tcout<<num;//\u8f93\u51fa\n    while(1);//\u9632\u6284\u88ad\n\treturn 0;\n} \n```",
        "postTime": 1535457092,
        "uid": 78206,
        "name": "ricky_lin",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "[P3370 \u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c](https://www.luogu.org/problemnew/show/P3370)\n\nproblem:\u7ed9\u5b9aN\u4e2a\u5b57\u7b26\u4e32\uff08\u7b2ci\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3aMi\uff0c\u5b57\u7b26\u4e32\u5185\u5305\u542b\u6570\u5b57\u3001\u5927\u5c0f\u5199\u5b57\u6bcd\uff0c\u5927\u5c0f\u5199\u654f\u611f\uff09\uff0c\u8bf7\u6c42\u51faN\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5171\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff08\u4e25\u8c28\u4e9b\u53ef\u4ee5\u7406\u89e3\u4e3a\u5305\u542b\u6240\u6709\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u7684\u5143\u7d20\u5171\u6709\u591a\u5c11\u4e2a\uff09\u3002\n\n\u8fd9\u79cd\u9898\u6211\u4eec\u5f88\u591a\u65f6\u5019\u4e0d\u80fd\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5224\u91cd\uff0c\u6545\u4e00\u4e2a\u53ef\u884c\u7684\u597d\u65b9\u6cd5\u5c31\u662f\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u901a\u8fc7\u6bcf\u4e00\u4e2a\u6570\u5b57\uff08\u5373\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u4ece\u800c\u6c42\u51faN\u3002\n\n\u4f46\u95ee\u9898\u662f\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u5b58\u6bcf\u4e00\u4e2a\u6570\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u7528\u6876\u6392\u90a3\u79cd\u65b9\u5f0f\uff08\u51fa\u73b0\u6570\u5b57\u6700\u5927\u591a\u5c11\u5f00\u591a\u5927\u6570\u7ec4\uff09\uff0c\u663e\u7136\u4f1a\u70b8\u3002\n\n\u90a3\u6211\u4eec\u5b58\u6570\u65f6\u5bf9\u4e8e\u51fa\u73b0\u7684\u6bd4\u8f83\u5927\u7684\u6570\u53d6\u4e00\u4e0b\u6a21\uff1f\n\n\u73b0\u5728\u5c31\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u5b58\u6570:\n\n\u7531\u4e8eascll\u7801\u5171\u5bf9\u5e94127\u4e2a\u5b57\u7b26,\u6240\u4ee5\u6211\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u7528127\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u5b58\u6570\u3002\u5177\u4f53\u4ee3\u7801\uff1a\n\n```cpp\n\tscanf(\"%d\",&n);//\u6709\u51e0\u4e2a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32 \n\tp=1<<30;//\u6a21\u7684\u6570\u8d8a\u5927\u8d8a\u597d\uff08\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u4f60\u7684qq\u53f7\uff0c\u663e\u7136\u6211\u8fd9\u91cc\u4e0d\u4f7f\u4e86\uff09 \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tlen=strlen(s),now=0;//now\u4ee3\u8868\u5c06\u5b57\u7b26\u4e32\u6240\u8f6c\u6362\u7684\u6570 \n\t\tfor(int j=0;j<=len;j++)\n\t\t\tnow=(now*127+s[j])%p;//\u4ee5\u524d\u7684now\u5404\u4f4d\u5168\u8fdb\u4e00\u4f4d(\u7528\u5341\u8fdb\u5236\u8868\u793a\u5373\u539f\u6765now*\u8fdb\u4f4d(127)),\n\t\t\t\t\t\t\t\t //\u65b0\u6dfb\u7684\u4e00\u4f4d\u7531\u4e8e\u5728127\u4f4d\u6570\u4e3a\u672b\u4f4d\uff0c\u6240\u4ee5\u76f4\u63a5\u52a0\u5176ascll\u7801\u5373\u53ef \n\t\tinsert(now);//\u6dfb\u6570\u51fd\u6570 \n\t}\n```\n\n\u4f46\u95ee\u9898\u53c8\u6765\u4e86\uff1a\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\uff0c\u5982\u679c\u4f60\u5b58\u6570\u65f6\u5bf9\u6bcf\u4e00\u4e2a\u6570%100000\uff0c\u90a3\u4e48\u6211\u5b58\u7684\u6570\u4e3a2\u65f6\u548c\u4e3a100002\u65f6\uff0c\u4e8c\u8005\u53d6\u6a21\u90fd\u662f2\uff0c\u90a3\u5bf9\u4e8e\u8fd9\u9898\u6765\u8bb2\u5c82\u4e0d\u5c34\u5c2c\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5148\u5f00\u4e24\u4e2a\u6570\u7ec4\uff1a\n\n1.t[x]:\u5b58\u50a8\u4e00\u4e2a\u6570\n\n2.g[x]:\u8868\u793at[x]\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 \n\n\u5148\u770b\u770b\u6211\u4eec\u600e\u4e48\u5b58\u6570:\n\n```cpp\nvoid insert(long long A)//\uff08insert:verb \u63d2\u5165\uff09 \n//\u6ce8\u610f\u7ed9\u7684\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503cA\u53ef\u80fd\u5f88\u5927\uff0c\u6709\u53ef\u80fd\u7206int\uff0c\u6545\u5f00longlong \n{\n\tint x=A%MOD;//\u6211\u4eec\u7684hash\u8868t,g\u6700\u5927\u5f00\u52300~MOD-1\uff0c\u6240\u4ee5\u8981\u5bf9A%MOD \n\twhile(g[x]>0&&t[x]!=A)//\u6ce8\u91ca\u89c1\u540e \n\t{\n\t\tx++;\n\t\tif(x>=MOD)\n\t\t\tx-=MOD;\n//\u7531\u4e8ex\u521d\u59cb\u503c\u6709\u53ef\u80fd\u5f88\u63a5\u8fd1mod\uff0c\u6545\u5355\u7eaf\u641ct[x]~t[mod]\u53ef\u80fd\u627e\u4e0d\u5230\u53ef\u4ee5\u5b58A\u7684\u5730\u65b9\uff0c\u8fd9\u65f6\u8ba9x\u4ece1\u91cd\u65b0\u641c \n\t}\n\tt[x]=A;//\u5b58\u503c \n\tg[x]++;//\u8be5\u503c\u51fa\u73b0\u6b21\u6570+1; \n}\n```\n\n\u5148\u8ba9\u6211\u4eec\u7740\u91cd\u89e3\u91cawhile(g[x]>0&&t[x]!=A)\u662f\u5565\u610f\u601d:\n\n\u5982\u679c\u5728g[A%MOD]\u5df2\u7ecf\u6709\u4e00\u4e2a\u6570\u7684\u8bdd\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n1. t[x]=A ;   2.t[x]!=A( E:2\u4e0ek*MOD+2\uff0ck>=1\u4e14k\u4e3a\u6574\u6570)\n\n\u82e5\u7b26\u54081\u60c5\u51b5\uff0c\u76f4\u63a5\u6267\u884cwhile\u540e\u8bed\u53e5\u5373\u53ef,\u82e5\u7b26\u54082,\u5219\u73b0\u4e3aA\u627e\u5230\u4e2a\u5b58\u7684\u4f4d\u7f6e\n\n\u597d\u50cf\u662f\u5bf9\u7684\uff0c\u4f46\u8fd8\u6709\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6211\u4e4b\u524d\u5df2\u7ecf\u5b58\u4e865\uff0c\u5f53\u6211\u518d\u5b585\u65f6\uff0c\u6211\u8be5\u600e\u4e48\u627e\u4e4b\u524d\u5b58\u76845\u4ece\u800c\u5b9e\u73b0\u5176\u6b21\u6570\u7684\u7d2f\u52a0\u5462\uff1f\n\n\u6839\u636ewhile(g[x]>0&&t[x]!=A)\uff0c\u5f53\u4f60\u5faa\u73af\u65f6\u78b0\u89c1\u4e86\u4e00\u4e2a\u6570\u6b63\u597d\u548cA\u76f8\u540c\u65f6\uff0c\u90a3\u5c31\u4f1a\u7ed3\u675f\u5faa\u73af,\u6267\u884c\u540e\u9762\u7684\u8bed\u53e5\u3002\u6240\u4ee5\u8fd9\u95ee\u9898\u4e0d\u5b58\u5728\u3002\n\n\u8f93\u51fa\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u53ea\u9700\u628ag[x]\u626b\u4e00\u904d\u5373\u53ef:\n\n```\n\tfor(int i=1;i<=MOD-1;i++) \n\t{\n\t\tif(g[i]>=2)\n\t\t\ttot+=g[i]-1;//\u91cd\u590d\u591a\u5c11\u4e2a\u628a\u591a\u51fa\u6765\u7684\u53bb\u6389\uff08\u5373g[i]-1\uff09 \n\t}\n\tprintf(\"%d\",n-tot);//tot:\u6709\u591a\u5c11\u91cd\u590d\u7684\u5b57\u7b26\u4e32\n```\n\nAC\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream> \nusing namespace std;\nvoid insert(long long A);\nconst int MOD=10000001;//hash\u8868\u7684\u5927\u5c0f \nlong long t[MOD],g[MOD],now,p;//\u8fd9\u51e0\u4e2a\u53d8\u91cf\u529f\u80fd\u548c\u4e0a\u9762\u7684\u51e0\u6bb5\u4ee3\u7801\u4e2d\u7684\u529f\u80fd\u4e00\u81f4 \n//\u8003\u8651\u5230t[MOD],now,p\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u6545\u5f00long long \nint n,len,tot;\nchar s[MOD];\nint main()\n{\n    scanf(\"%d\",&n); \n    p=1<<30; \n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",s);\n        len=strlen(s),now=0;\n        for(int j=0;j<=len;j++)\n            now=(now*127+s[j])%p;\n        insert(now);//\u6dfb\u6570\u51fd\u6570 \n    }\n    for(int i=1;i<=MOD-1;i++) \n    {\n        if(g[i]>=2)\n            tot+=g[i]-1;\n    }\n    printf(\"%d\",n-tot); \n    return 0;\n}\nvoid insert(long long A) \n{\n    int x=A%MOD;\n    while(g[x]>0&&t[x]!=A)\n    {\n        x++;\n        if(x>=MOD)\n            x-=MOD;\n    }\n    t[x]=A; \n    g[x]++;\n}\n```\n",
        "postTime": 1518596879,
        "uid": 53774,
        "name": "\u5403\u74dc\u7fa4\u4f17syc",
        "ccfLevel": 0,
        "title": "P3370 \u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u6ca1\u6709\u7528pair\u7684\uff0c\u849f\u84bb\u6765\u8865\u4e00\u53d1\u2014\u2014\n\nhash\u8868\u7684\u5173\u952e\u5c31\u5728\u4e8e\u9632\u6b62\u54c8\u5e0c\u7ed3\u679c\u7684\u91cd\u590d\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e2a\u5de8\u957f\u65e0\u6bd4\u7684\u5b57\u7b26\u4e32\uff0c\u53d6\u6a21\u662f\u4e00\u4e2a\u7edd\u5bf9\u7684\u5fc5\u8981\u64cd\u4f5c\n\n\u6240\u4ee5\u4e00\u4e2a\u7ecf\u5e38\u4f1a\u51fa\u73b0\u7684\u9677\u9631\u83ab\u8fc7\u4e8e\u2014\u2014\n\nint a=hash(string x)=mod+a;\n\nint b=hash(string y)=a;\n\n\u800c\u5bfc\u81f4\u4ee5\u4e0a\u9519\u8bef\u7684\u6700\u4e3b\u8981\u539f\u56e0\uff0c\u5c31\u662fx\u548cy\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u89c4\u6a21\uff08\u4e5f\u5c31\u662f\u957f\u5ea6\uff09\u6709\u660e\u663e\u4e0d\u540c\uff0c\u5bfc\u81f4\u8ba1\u7b97\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u201c\u6b63\u597d\u591a\u4e00\u4e2amod\"\u7684\u60c5\u51b5\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u8fd9\u79cd\u7279\u4f8b\uff0c\u7528pair<hash\u503c\uff0c\u957f\u5ea6>\u4f5c\u4e3a\u5224\u91cd\u7684\u6807\u51c6\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar l[1505];\nmap<pair<int,int>,bool>h_map;\npair<int,int> hash(string a){\n    int len=a.size();\n    int mod=10000007;\n    int res=0;\n//    const int nul=67;\n    for(int i=0;i<len;i++){\n        if(a[i]<='9'&&a[i]>='0') res=((long long)(res<<6)+(res<<2)-res+a[i]-'0')%mod;\n        if(a[i]<='z'&&a[i]>='a') res=((long long)(res<<6)+(res<<2)-res+a[i]-'a'+10)%mod;\n        if(a[i]<='Z'&&a[i]>='A') res=((long long)(res<<6)+(res<<2)-res+a[i]-'A'+36)%mod;\n    }\n    return make_pair(res,len);\n}\nint main(){\n    int n;\n    int ans=0;\n    scanf(\"%d\",&n);\n    while(n--){\n        scanf(\"%s\",l);\n        if(!h_map[hash(l)]) ++ans;\n        h_map[hash(l)]=true;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1512633376,
        "uid": 38283,
        "name": "Dog_Two",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "emm \u4e00\u4e2a\u88f8\u7684hash\u9898\uff0c\u5229\u7528\u6876\u601d\u60f3\u6765\u505a\u3002\u3002\u3002\u4e0d\u8fc7\u56e0\u4e3ahash\u78b0\u649e\u7684\u539f\u56e0\uff0c\u6211\u9009\u62e9\u4f7f\u7528\u53cchash\u6765\u5224\u65ad\n\n\u697c\u4e0b\u7684dalao\u6709\u7528\u94fe\u8868\u7684 \u83dc\u9e21\u4e0d\u4f1a\u554a\uff0c\u3002\u3002\n\n\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7528map\u6765\u6a21\u62dfhash = = \u4e0d\u8fc7\u597d\u50cf\u6709\u70b9\u4f5c\u5f0a\n\n\n\u53cc\u54c8\u5e0c\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define MAX 10000000\nusing namespace std;\nunsigned long long int num1[MAX],num2[MAX];\nint k,tot;\n\nunsigned long long int hash(string a){\n    int len = a.size();\n    unsigned long long int seed = 255;\n    unsigned long long int mod = 2333333;\n    unsigned long long int tmp = 0;\n    for(register int i = 0;i < len;i++){    \n        tmp = (tmp*seed+a[i])%mod;\n    }\n    return tmp;\n}\n\nunsigned long long int hash2(string a){\n    int len = a.size();\n    unsigned long long int seed = 163;\n    unsigned long long int mod = 1000007;\n    unsigned long long int tmp = 0;\n    for(register int i = 0;i < len;i++){    \n        tmp = (tmp*seed+a[i])%mod;\n    }\n    return tmp;\n}\n\nint main(){\n    freopen(\"data.in\",\"r\",stdin);\n    cin >> k;\n    for(register int i = 1;i <= k;i++){\n        string str;\n        cin >> str;\n        unsigned long long int tmp1 = hash(str);\n        unsigned long long int tmp2 = hash2(str);\n        if(num1[tmp1] && num2[tmp2])\n            continue;\n        tot++;\n        num1[tmp1] = 1;\n        num2[tmp2] = 1;\n    }\n    cout << tot << endl;\n    return 0;\n}\n```\n\nmap\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <map>\n#include <cstring>\n#define MAX 3000\nusing namespace std;\n// long long int num[MAX];\nint k,tot;\nmap<string,int> mp;\n\nint main(){\n    // freopen(\"data.in\",\"r\",stdin);\n    cin >> k;\n    for(register int i = 1;i <= k;i++){\n        string str;\n        cin >> str;\n        if(!mp[str]){\n            mp[str] = ++tot;\n        }\n        continue;\n    }\n    cout << tot << endl;\n    return 0;\n}\n```",
        "postTime": 1509887205,
        "uid": 20788,
        "name": "DarkEyeR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c31\u662f\u88f8\u7684\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u4fdd\u5b58\u5b83\u7684\u54c8\u5e0c\u503c\u3002\u7136\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u5728\u4e00\u7cfb\u5217\u54c8\u5e0c\u503c\u4e2d\u6709\u591a\u5c11\u4e2a\u4e0d\u4e00\u6837\u7684\u3002\n\n\u90a3\u4e48\u5c31\u5f88\u7b80\u5355\u4e86\uff0csort\u4e4b\u540e\u76f4\u63a5unique\u3002\n\n\n\u6211\u4eec\u5bf9\u4e8e\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u5904\u7406\uff0c\u5c31\u662f\u4e00\u4f4d\u4e00\u4f4d\u5730\u54c8\u5e0c\uff0c\u6700\u540e\u5f97\u5230\u5168\u4e32\u3002\u6bcf\u4e00\u4f4d\u90fd\u4e58\u4ee5\u6211\u4eec\u7684base(\u81ea\u5df1\u9009\u7684\u4e00\u4e2a\u6570)\uff0c\u7136\u540e\u52a0\u4e0a\u4ece\u4e00\u5230\u524d\u4e00\u4f4d\u8fd9\u4e48\u4e00\u6bb5\u7684\u54c8\u5e0c\u503c\u3002\n\n\n\u4ee3\u7801\u4e0d\u591f\u5feb\uff0c\u5e76\u6ca1\u6709\u5728\u610f\u5e38\u6570\u3002\n\n\n\n\n\n\n```cpp\n# include <bits/stdc++.h>\nconst unsigned long long Base = 100137 ;\nchar ss [1234567] ;\nstd :: vector < unsigned long long > str ;\nint main ( )  {\n    int n ;\n    scanf ( \"%d\", & n ) ;\n    while ( n -- )  {\n        scanf ( \"%s\", ss ) ;\n        unsigned long long hs ( 1 ) ;\n        for ( char* pt = ss ; *pt ; ++ pt )    hs = hs * Base + *pt ;\n        str.push_back ( hs ) ;\n    }\n    std :: sort ( str.begin ( ), str.end ( ) ) ;\n    str.erase ( std :: unique ( str.begin ( ), str.end ( ) ), str.end ( ) ) ;\n    printf ( \"%d\\n\", ( int ) str.size ( ) ) ;\n}\n```",
        "postTime": 1509787267,
        "uid": 33891,
        "name": "Lazer2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "#\u4e00\u987f\u80e1\u4e71\u64cd\u4f5c\n\n\n\u6839\u636e\u7b97\u6cd5\u7684\u786e\u5b9a\u6027\uff08\u540c\u4e00\u4e2a\u8f93\u5165\u6570\u636e\u5728\u540c\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u5f97\u51fa\u7684\u7ed3\u679c\u76f8\u540c\uff09\uff0c\u5b8c\u5168\u76f8\u540c\u5b57\u7b26\u4e32\uff0c\u5728\u540c\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u4e71\u641e\u4e4b\u540e\uff0c\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002\n\n\u6240\u4ee5\uff0c\u53ea\u8981\u80fd\u786e\u4fdd\u8ba9\u4e0d\u540c\u5b57\u7b26\u4e32\u901a\u8fc7\u7b97\u6cd5\u540e\u53d8\u6210\u4e0d\u4e00\u6837\u7684\uff0c\u5c31\u80fd\u8fbe\u5230Hash\u7684\u6548\u679c\uff0c\u6211\u7684\u60f3\u6cd5\u662f\uff1a\n\n###1\uff1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u5947\u8469\u7684X\u8fdb\u5236\u6570\n\n###2\uff1a\u5728\u6bcf\u4e00\u6b21\u8ba1\u7b97\u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5927\u7d20\u6570\uff08\u8fd9\u91cc\u6211\u7528\u4e8619260817\uff09\n\n###3\uff1a\u4e3a\u4e86\u4e0d\u7528\u624b\u52a8Mod\uff0c\u7528\u4e0a\u81ea\u7136\u6ea2\u51fa\uff08\u5c31\u662f\u4f7f\u7528unsigned long long\uff0c\u7136\u540e\u5c31\u4e0d\u7528\u624b\u52a8\u53bbmod\u4e86\uff09\n\n\u56e0\u4e3a1\u30012\u4e2d\u7684\u64cd\u4f5c\uff0c\u8ba1\u7b97\u4e2d\u7684\u6570\u53ef\u80fd\u4f1a\u8d85\u7ea7\u5927\uff0c\u6240\u4ee5\uff0c\u7528\u81ea\u7136\u6ea2\u51fa\u662f\u6700\u9ad8\u6548\u7387\u7684\n\n\n\u4ee5\u4e0b\u662f\u6211\u7684\u4ee3\u7801\uff08\u4ee3\u7801\u5728HASH\u5224\u91cd\u90e8\u5206\u501f\u9274\u4e86\u4e0b\u9762\u7684\u9898\u89e3\uff0c\u5728\u6b64\u9e23\u8c22\uff09\uff1a\n\n\n\u2018\u2019\u2018cpp\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm> //\u7528\u5230qsort \nusing namespace std;\ntypedef unsigned long long ULL;\nstring s[10005];//\u4fdd\u5b58\u5b57\u7b26\u4e32 \nint n,i,j,k,sl;\nULL h[10005];//\u4fdd\u5b58Hash\u51fa\u6765\u7684\u6570 \nconst ULL yu = 19260817;//\u4e00\u4e2a\u5927\u7d20\u6570 \nint main(){\n    cin>>n;//\u4e0d\u9700\u8981\u8bfb\u5165\u4f18\u5316 \n    for(i=0;i<n;i++)cin>>s[i];//\u800c\u4e14\u8fd9\u4e2a\u8bfb\u5165\u4f18\u5316\u5f88\u96be\u5199\uff0c\u6240\u4ee5\u6211\u6ca1\u5199\u8bfb\u5165\u4f18\u5316 \n    for(i=0;i<n;i++)\n    {\n        sl=s[i].length();//\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6 \n        for(j=sl-1;j>=0;j--)//\u4ece\u540e\u5f80\u524dHash \n        {\n            h[i]+=s[i][j];\n            h[i]*=13;//13\u8fdb\u5236 \n            h[i]+=yu;//\u67d0\u4e2a\u5947\u8469\u64cd\u4f5c \uff0c\u52a0\u4e0a\u4e00\u4e2a\u5927\u7d20\u6570 \n        }\n    }\n    sort(h,h+n);//\u7ed9Hash\u51fa\u6765\u7684\u4e1c\u897f\u6392\u4e2a\u5e8f\n    //\u56e0\u4e3a\u4e0d\u9700\u8981\u518d\u83b7\u53d6\u539f\u6765\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u53ef\u4ee5\u6392\u5e8f\u4e00\u4e0b\u4fbf\u4e8e\u5224\u91cd \n    int cnt=-1;\n    for(i=0;i<n;i++)\n     if(h[i]!=h[i-1]||i==0) //\u501f\u9274\u4e86\u4e0b\u9762\u7684\u9898\u89e3\u7684\u65b9\u6cd5\uff0cO\uff08n\uff09\u5224\u91cd \n        h[++cnt]=h[i];\n    printf(\"%d\\n\",++cnt);\n    return 0;//\u5230\u8fd9\u91cc\u6211\u624d\u53d1\u73b0\u6211\u5fd8\u4e86return 0\u5c31\u4ea4\u4e0a\u53bb\u4e86\uff0c\u867d\u7136\u5728\u6d1b\u8c37AC\u4e86\uff0c\u4f46\u662fNOIP\u91cc\u9762\u5343\u4e07\u4e0d\u80fd\u5fd8 \n}\n\u2019\u2018\u2019\n```",
        "postTime": 1509450859,
        "uid": 46639,
        "name": "Robert",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u4ee5\u524d\u53d1\u8fc7\u4e00\u4e2a\u8bc1\u660e\u66b4\u529b\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u53ef\u884c\u6027\uff0c\u4f46\u662f\u5bf9\u4e8e\u54c8\u5e0c\u7684\u9898\u76ee\uff0c\u679c\u7136\u5e94\u8be5\u7528\u54c8\u5e0c\u7684\u65b9\u6cd5\u6765\u505a\u3002\n\n\n\u54c8\u5e0c\u7b97\u6cd5\u6700\u9ebb\u70e6\u7684\u5730\u65b9\u662f\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\uff0c\u6bd4\u5982\u901a\u8fc7\u62c9\u94fe\u4ec0\u4e48\u7684\u3002\n\n\u4f46\u662f\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5199\u62c9\u94fe\u6bd4\u5199\u54c8\u5e0c\u51fd\u6570\u8981\u591a\u8d39\u6570\u500d\u7684\u65f6\u95f4\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u4e0d\u5199\u89e3\u51b3\u51b2\u7a81\u7684\u65b9\u6848\u5462\uff1f\n\n\n\u901a\u5e38\u6765\u8bf4\u662f\u4e0d\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6709\u871c\u6c41\u7684\u6570\u636e\u6765\u5361\u54c8\u5e0c\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u54c8\u5e0c\u503c\u4e0a\u6709\u51b2\u7a81\uff08\u6216\u51b2\u7a81\u8fc7\u591a\uff09\uff0c\u5f80\u5f80\u4f1a\u5bfc\u81f4\u6574\u4f53\u7684\u5d29\u6e83\u3002\n\n\u4f46\u662f\uff0c\u5927\u6570\u636e\u5904\u7406\u4e2d\u7684\u795e\u5947\u7b97\u6cd5\u201c**Bloom filter**\u201d\uff0c\u5c31\u662f\u4e00\u79cd\u53ef\u4ee5\u4e0d\u89e3\u51b3\u51b2\u7a81\u7684\u54c8\u5e0c\u65b9\u6cd5\uff08\u727a\u7272\u51c6\u786e\u6027\u548c\u65f6\u95f4\u6765\u8282\u7701\u7a7a\u95f4\uff08\u4e0e\u7b97\u6cd5\u96be\u5ea6\uff09\uff09\u3002\n\n\n\u5bf9\u4e8e\u5df2\u7ecf\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5c06\u5176\u89c6\u4e3a\u96c6\u5408 S \u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5bf9\u96c6\u5408\u5185\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c N \u6b21\u54c8\u5e0c\uff08\u591a\u91cd\u54c8\u5e0c\uff09\uff0c\u5efa\u7acb N \u4e2a\u8868\uff0c\u4ee5\u8bb0\u5f55\u6bcf\u91cd\u54c8\u5e0c\u7684\u54c8\u5e0c\u503c\u662f\u5426\u5df2\u7ecf\u88ab\u8ba1\u7b97\u51fa\u3002\n\n\u6bcf\u5f53\u6267\u884c\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u5bf9\u8be5\u5143\u7d20\u8fdb\u884c\u540c\u6837\u7684N\u6b21\u54c8\u5e0c\uff0c\u5e76\u68c0\u67e5\u6bcf\u4e2a\u8868\u3002\n\n\u6839\u636e\u5fb7\u6469\u6839\u5b9a\u7406\uff0c\u6211\u4eec\u6613\u77e5\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u68c0\u67e5\u51fa\u5b58\u5728\u72b6\u6001\uff0c\u5219\u5176\u53ef\u80fd\u5b58\u5728\uff1b\u5982\u679c\u6709\u4efb\u610f\u4e00\u6b21\u6ca1\u6709\u68c0\u67e5\u5230\u5b58\u5728\uff0c\u5219\u5fc5\u7136\u4e0d\u5b58\u5728\u3002\n\n\u7ee7\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u53ef\u80fd\u5b58\u5728\u7684\u5143\u7d20\u8fdb\u884c\u904d\u5386\u68c0\u9a8c\uff0c\u4ee5\u6c42\u51fa\u5176\u662f\u5426\u7684\u786e\u5b58\u5728\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b CPP\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\nbool ex[6][0x10000];\nchar s[10020][1520];\nchar temp[1520];\nint N;\nint NumofDiff ;\nbool ExistPossible();\nvoid SaveExist();\nunsigned short hash0(char* str);\nunsigned short hash1(char* str);\nunsigned short hash2(char* str);\nunsigned short hash3(char* str);\nunsigned short hash4(char* str);\nunsigned short hash5(char* str);\nint main()\n{\n    scanf(\"%d\",&N);\n    for(int i=0; i<N; i++)\n    {\n        memset(temp,0x00,sizeof(temp));\n        scanf(\"%s\",&temp);\n        if( ExistPossible() ) // \u53ef\u80fd\u91cd\u590d\n        {\n            bool ExistReal = false ;\n            for(int j=0;j<NumofDiff;j++)\n            {\n                if( strcmp(s[j] , temp ) == 0 )\n                {\n                    ExistReal = true ;\n                    break ;\n                }\n            }\n            if( ExistReal )continue ;\n            else\n            {\n                SaveExist();\n            }\n        }\n        else\n        {\n            SaveExist();\n        }\n    }\n    printf(\"%d\",NumofDiff);\n}\n\n\nbool ExistPossible()\n{\n    unsigned short key0 = hash0(temp);\n    unsigned short key1 = hash1(temp);\n    unsigned short key2 = hash2(temp);\n    unsigned short key3 = hash3(temp);\n    unsigned short key4 = hash4(temp);\n    unsigned short key5 = hash5(temp);\n    bool exp = true ;\n    exp &= ( ex[0][key0] ) ;\n    exp &= ( ex[1][key1] ) ;\n    exp &= ( ex[2][key2] ) ;\n    exp &= ( ex[3][key3] ) ;\n    exp &= ( ex[4][key4] ) ;\n    exp &= ( ex[5][key5] ) ;\n    return exp ;\n}\n\nvoid SaveExist()\n{\n    memcpy(s[NumofDiff++],temp,sizeof(temp));\n    unsigned short key0 = hash0(temp);\n    unsigned short key1 = hash1(temp);\n    unsigned short key2 = hash2(temp);\n    unsigned short key3 = hash3(temp);\n    unsigned short key4 = hash4(temp);\n    unsigned short key5 = hash5(temp);\n    ex[0][key0] = true ;\n    ex[1][key1] = true ;\n    ex[2][key2] = true ;\n    ex[3][key3] = true ;\n    ex[4][key4] = true ;\n    ex[5][key5] = true ;\n    return ;\n}\n\n\nunsigned short hash0(char* str)\n{\n    unsigned short key = 1 ;\n    for(char* p = str ; *p ; p++ )key *= *p ;\n    return key ;\n}\nunsigned short hash1(char* str)\n{\n    unsigned short key = 0 ;\n    for(char* p = str ; *p ; p++ )key += *p ;\n    return key ;\n}\nunsigned short hash2(char* str)\n{\n    unsigned short key = 0 ;\n    for(char* p = str+1 ; *p ; p++ )key += (*p)%(*(p-1));\n    return key ;\n}\nunsigned short hash3(char* str)\n{\n    unsigned short key = 0 ;\n    for(char* p = str ; *p ; p++ )key ^= *p ;\n    return key ;\n}\nunsigned short hash4(char* str)\n{\n    unsigned short key = 0xF731 ;\n    char *prp = str , *pop = str ;\n    for(;*(pop+1);pop++);\n    for(;prp <= pop ; prp++ , pop--)key ^= ( (*prp) & (*pop) );\n    return key ;\n}\nunsigned short hash5(char* str)\n{\n    unsigned short key = 0x7A4D ;\n    char *prp = str , *pop = str ;\n    \n    for(;*(pop+1);pop++);\n    for(;prp <= pop ; prp++ , pop--);\n    \n    for( ; prp >= str && (*pop) ; prp-- , pop ++ )\n    {\n        key ^= ( (*prp) | (*pop) );\n    }\n    return key ;\n}\n```",
        "postTime": 1508055166,
        "uid": 30310,
        "name": "RedContritio",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u5916\u95e8\u90aa\u9053\u7684\u8bdd\n\nset\u4e5f\u53ef\u4ee5a\u8fd9\u4e2a\u9898\n\n###\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nstring t;\nstd::set<string> s;\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        cin>>t;\n        s.insert(t);\n    }\n    cout<<s.size()<<endl;\n    return 0;\n}\n//\u4e0d\u8fc7\u8fd8\u662f\u597d\u597d\u7ec3\u7ec3\u54c8\u5e0c\u5427\n```",
        "postTime": 1507295963,
        "uid": 27495,
        "name": "bymlg001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u9898\u8c8c\u4f3c\u633a\u6c34...\u4e0b\u9762\u7ed9\u601d\u8def..\n\n\u9996\u5148\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u4e2a\u4eba\u611f\u89c9C++string\u914d\u5408cin\u8db3\u591f\u5e94\u4ed8\uff0c\u6216\u8bb8\u52a0\u5f3a\u6570\u636e\u4e4b\u540e\u9700\u8981\u52a0\u901f\uff1f...\n\n\u7136\u540e\u6211\u7684\u54c8\u5e0c\u7b97\u6cd5\u601d\u8def\u662f\u5e73\u65b9\u53d6\u4e2d\u9879\uff0c\u628a\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7801\u76f8\u52a0\uff0c\u518d\u52a0\u4e0a\u5b57\u7b26\u4e32\u957f\u5ea6\u907f\u514d\u78b0\u649e\uff0c\u7136\u540e\u5e73\u65b9\u53d6\u4e2d\u9879\u3002\n\n\u89e3\u51b3\u54c8\u5e0c\u78b0\u649e\u6211\u7528\u7684\u662f\u62c9\u94fe\u8868\u7684\u65b9\u5f0f\uff0cmyhash\u548cmyfind\u90fd\u7528\u4e86\u4f20\u5f15\u7528\u51cf\u5c11\u590d\u5236\u53c2\u6570\u7684\u65f6\u95f4\u3002\n\n\u4e0b\u9762\u4e00\u4e9b\u7ec6\u8282\u5728\u4ee3\u7801\u6ce8\u91ca\u7ed9\u51fa\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n\nusing namespace std;\nconst int MAXN = 10000;\nint ans = 0;\n\nstruct hashmap\n{\n    string str;\n    hashmap *next = NULL;//\u6307\u9488\u8bb0\u5f97\u6307\u5411\u7a7a...\n}a[MAXN*10];\n\nbool myfind(hashmap &x, string &in)\n{\n    if(x.str == in) return false;\n    if(x.next == NULL)\n    {\n        x.str = in;\n        x.next = new hashmap;//\u4e0d\u662f\u5f88\u61c2\u7684\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b\uff0cnew+\u7c7b\u578b\u540d\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u7684\u6307\u9488\n        return true;                  //\u6bcf\u6b21\u5b58\u5165\u4e3a\u540e\u9762\u53ef\u80fd\u51fa\u73b0\u7684\u78b0\u649e\u505a\u51c6\u5907\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u4f1a\u6d6a\u8d39\u7a7a\u95f4...\u4e0d\u8fc7\u9898\u6c34\u662f\u5427QWQ\n    }\n    return myfind(*x.next, in);//\u9012\u5f52\u641c\u7d22\u94fe\u8868\n}\n\nvoid myhash(string &in)//\u6563\u5217\u8fc7\u7a0b\uff0c\u4e0d\u89e3\u91ca\n{\n    long long hashnum = in.length();\n    for(int i = 0; i < in.length(); i++) hashnum += in[i];\n    hashnum *= hashnum;\n    hashnum = hashnum >> 4;//\u4f4d\u8fd0\u7b97\uff0c\u5411\u53f3\u79fb4\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u770b\u505ahashnum /= 10000;\u4e0d\u8fc7\u4f4d\u8fd0\u7b97\u903c\u683c\u9ad8\uff0c\u901f\u5ea6\u5febQWQ\n    hashnum %= (MAXN*10);\n    if(myfind(a[hashnum], in)) ans++;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++)\n    {\n        string putin;\n        cin >> putin;\n        myhash(putin);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1507289877,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u4f7f\u7528hash\uff0c\u8fd9\u9898\u9700\u8981\u4e00\u4e2a\u5947\u5947\u602a\u602a\u7684\u5224\u91cd\uff0c\u4e8e\u662f\u6211\u673a\uff08zhi\uff09\u667a( zhang )\u7684\u7528\u4e86\u7b2c\u4e8c\u6b21\u79bb\u6563\u5316\uff01\n\n\u79bb\u6563\u4e00\u6ce2hash\u503c\uff0c\u6765\u8bb0\u5f55\u51fa\u73b0\u7684\u4e0d\u540c\u79cd\u7c7b\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\nusing namespace std; \nstring a[10005];\nmap <int ,int> m;\nint t=0;\nvoid gethash(string a)\n{\n    int key=0;\n    int l=a.length();\n    for(int i=0;i<l;i++)\n        key=(key*29+a[i])%0x7fffffff;\n    if(!m[key]) m[key]=++t;\n    return;\n}\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i];\n        gethash(a[i]);\n    }\n    cout<<t<<endl;\n    return 0;\n}\n```",
        "postTime": 1503454277,
        "uid": 28954,
        "name": "FlyingAnt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "#\u6211\u53d1\u73b0\u8fd9\u9053\u9898\u6839\u672c\u6ca1\u51e0\u4e2a\u4eba\u597d\u597d\u505a\n\n#\u57fa\u672c\u5c31\u662fmap\u6216\u8005\u76f4\u63a5\u5224\u65adhash\u7684key\u662f\u5426\u76f8\u540c\n\n\u6211\u7684\u57fa\u672c\u601d\u8def\u662f\u7528\u4e00\u4e2aBKDRhash\u7b97key\uff0c\u7136\u540e\u7528\u62c9\u94fe\u6cd5\uff08\u5c31\u662f\u62c9\u4e00\u4e2a\u94fe\u8868\u51fa\u6765\uff09\u6765\u505a\n\nBKDRhash\u662f\u628a\u5b57\u7b26\u4e32\u770b\u6210\u4e00\u4e2aBASE\u8fdb\u5236\u7684\u6570\n\n\u56e0\u4e3aASCII\u6700\u591a127\uff0c\u6240\u4ee5\u6211\u7684BASE\u9009131\n\n\u5f53\u7136BASE\u900913131\uff0c1313131\u2026\u2026\u4e5f\u6ca1\u95ee\u9898\n\n\u6a21\u6570\u7684\u9009\u53d6\u4e5f\u662f\u5173\u952e\uff0c\u9009\u5927\u4e86MLE\uff0c\u9009\u5c0f\u4e86TLE\n\n~~\u6bd4\u5982\u8bf4\u6211\u6700\u4e00\u5f00\u59cb\u9009\u4e8619260817\uff0c\u679c\u65adMLE~~\n\n\u6216\u8005\u76f4\u63a5\u8ba9hash\u51fd\u6570\u8fd4\u56de1\u5c31\u662fTLE\uff08\u6bcf\u6b21\u90fd\u8981\u67e5\u627e\u4e00\u6761\u957f\u957f\u7684\u94fe\u8868\uff09\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u6734\u7d20\u7684\u62c9\u94fe\u6cd5\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\nconst int BASE=131,MOD=100003;\nstruct node {\n    std::string st;\n    node*nxt;\n} khash[MOD+10];\nstd::string st;\nint cnt=0;\ninline int BKDRhash(std::string st) {\n    register int len=st.size(),key=0;\n    for(register int i=0; i<len; ++i) key=(key*BASE+st[i])%MOD;\n    return key;\n}\nint main() {\n    register int n,tot=0;\n    std::cin>>n;\n    for(register int i=1; i<=n; ++i) {\n        std::cin>>st;\n        register int key=BKDRhash(st);\n        if(khash[key].st[0]=='\\0') khash[key].st=st;\n        else {\n            node*tt=&khash[key];\n            if((tt->st)==st) {\n                ++tot;\n                continue;\n            }\n            register bool f=1;\n            while(tt->nxt!=NULL) {\n                tt=tt->nxt;\n                if((tt->st)==st) {\n                    f=0;\n                    ++tot;\n                    break;\n                }\n            }\n            if(f) {\n                tt->nxt=new node();\n                tt=tt->nxt;\n                tt->st=st;\n            }\n        }\n    }\n    std::cout<<n-tot;\n    return 0;\n}\n```",
        "postTime": 1503213256,
        "uid": 24397,
        "name": "__\u4e16\u754c\u7b2c\u4e00\u5f31__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u662f\u7528\u4f20\u8bf4\u4e2d\u7684STL\u8fc7\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u4e00\u4e2aset\u6765\u5b58\uff0c\u56e0\u4e3aset\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u5165\u52a0\u8f93\u51faset\u7684size\u5c31\u884c\u4e86\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <set>\nusing namespace std;\nset<string>t;//\u5b9a\u4e49\u4e00\u4e2aset\nint main(){\n    int n;\n    string s;\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        cin>>s;//\u8bfb\u5165\u5b57\u7b26\u4e32\n        t.insert(s);//\u63d2\u5165\uff0c\u82e5\u91cd\u590d\u5b83\u662f\u4e0d\u4f1a\u7b97\u8fdb\u53bb\u7684\n    }\n    cout<<t.size(); //\u8f93\u51fa\u5927\u5c0f\n}\n```",
        "postTime": 1502361406,
        "uid": 50945,
        "name": "c201904",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u867d\u7136\u53ef\u4ee5\u7528map\u6c34\u8fc7\u53bb\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u8981\u7528\u6b63\u89e3\u53bb\u505a\u8fd9\u9053\u9898\u7684\u3002\n\n[blog](http://www.cnblogs.com/cellular-automaton/p/6862661.html)\n\n\u5b9e\u9645\u4e0ahash\u5c31\u662f\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210base\u8fdb\u5236\u6570\u7684\u8fc7\u7a0b\u3002\n\n\u4f8b\u598210010=1\\*2^4+0\\*2^3+0\\*2^2+1\\*2^1+0\\*2^0=16+2=18\n\n\u518d\u4f8b\u5982123=1\\*10^2+2\\*10^1+3\\*10^0\n\nhash\u4e5f\u662f\u4e00\u6837\uff0cHash=Hash\\*base+s[i]\uff0c\u53ef\u4ee5\u770b\u5230\uff0chash\u4f7f\u7528\u4e00\u4e2abase\u8fdb\u5236\u7684\u6570\u6765\u533a\u5206\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u5229\u7528\u8fd9\u4e2a\u6570\u6765\u5224\u91cd\u3002\n\nbase\u662f\u8d28\u6570\uff0c\u4e14\u636e\u6211\u89c2\u5bdf\u4e00\u822c\u5728100\u4ee5\u4e0a\uff0c\u5982107,131,163(\u4e3a\u5565\uff1f)\n\n\u53d1\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef unsigned long long ULL;\nULL h[100000];\nULL seed=163;\ninline ULL hash(string x){\n    ULL Hash=0;\n    int len=x.length()-1;\n    for(int i=0;i<=len;++i){\n        Hash=Hash*seed+x[i]-'0';\n    }\n    return Hash;\n}\n\nint main(){\n    int n;\n    cin>>n;\n    string que;\n    for(int i=1;i<=n;++i){\n        cin>>que;\n        h[i]=hash(que);\n    }\n    sort(h+1,h+n+1);\n    int ans=0;\n    for(int i=1;i<=n;++i){\n        if(h[i]!=h[i+1])    ans++;\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1494933155,
        "uid": 25815,
        "name": "\u5c01\u766b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "hash\u7ec3\u624b\u9898\uff0chashs[i]=((long long)hashs[i-1]\\*p%mod+idxs[a[i]-'0'])%mod\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6709\u4e2as\uff0c\u4e4b\u524d\u4e0d\u52a0\u7f16\u8bd1\u9519\u8bef\uff08\u4f30\u8ba1\u51b2\u7a81\u4e86\uff09 \u6240\u4ee5\u5c31\u52a0\u4e86\n\nhash\u5b9e\u9645\u4e0a\u5c31\u662f\u5b57\u7b26\u4e32\u5230\u6574\u6570\u7684\u6620\u5c04\uff0c\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04\u6210\u6574\u6570\uff0c\u7136\u540e\u5982\u679c\u5927\u5c0f\u76f8\u7b49\u5c31\u5224\u65ad\u4e3a\u540c\u4e00\u4e2a\u4e32hash\u4e00\u6b21\u662fO(len)\u7684\uff0c\u5fc5\u8981\u65f6\u53ef\u4ee5\u7528\u53cchash\u4e00\u822cmod\u53bb\u8f83\u5927\u7d20\u6570p\u53d6\u6bd4\u8f83\u5c0f\u7684\u7d20\u6570\u3002\n\n\u4ee3\u7801\uff1a\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nconst int maxm = 1500+5;\nconst int maxn = 10000+7;\nconst int mod  =1e9+7;\nconst int  p   =31;\nusing namespace std;\nint n,cnt,ans;\nint nums[maxn],idxs[80],hashs[maxm];\nchar a[maxm];\nint main(){\n    for(int i=1;i<=80;i++) idxs[i]=i;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",a);\n        for(int i=0;i<strlen(a);i++){\n            if(i==0) hashs[i]=idxs[a[i]-'0'];\n            else hashs[i]=((long long)hashs[i-1]*p%mod+idxs[a[i]-'0'])%mod;\n        }\n        nums[cnt++]=hashs[strlen(a)-1];\n        memset(a,0,sizeof(a));\n    }    \n    sort(nums,nums+n);\n    for(int i=0;i<n;i++){\n        if(i==0){\n            ans++;\n            continue;\n        }\n        if(nums[i]==nums[i-1]) continue;\n        else ans++;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1492492616,
        "uid": 23195,
        "name": "zzozz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define h1 9905411//hash1\u503c\n#define h2 9900589//hash2\u503c\n#define h3 8599951//hash3\u503c\n#define h4 1000000007//hash4\u503c\n#define Size 2000000\n#define ull unsigned long long//\u7528unsigned long long \u81ea\u7136\u6ea2\u51fa\nusing namespace std;\nstruct node{\n    ull ha1,ha2,ha3,ha4;\n}tree[Size];\nint cnt;\nchar s[10000];\n//4\u4e2ahash,\u9632\u6b62\u871c\u6c41\u78b0\u5bf9\null hash1(char *s,int len){ull ans=0;for(int i=0;i<len;i++)ans=ans*h1+s[i];return ans;}\null hash2(char *s,int len){ull ans=0;for(int i=0;i<len;i++)ans=ans*h2+s[i];return ans;}\null hash3(char *s,int len){ull ans=0;for(int i=0;i<len;i++)ans=ans*h3+s[i];return ans;}\null hash4(char *s,int len){ull ans=0;for(int i=0;i<len;i++)ans=ans*h4+s[i];return ans;}\ninline bool cmp(node a,node b){return a.ha1<b.ha1;}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",s);\n        int    len=strlen(s);\n        tree[++cnt].ha1=hash1(s,len);\n        tree[cnt].ha2=hash2(s,len);\n        tree[cnt].ha3=hash3(s,len);\n        tree[cnt].ha4=hash4(s,len);\n    }\n//\u7ed9hash1\u503c\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\n    sort(tree+1,tree+cnt+1,cmp);\n    int ans=0;\n    for(int i=1;i<=cnt;i++){\n                //\u5168\u90e8\u76f8\u540c\u624d\u4f1ai++\n        while(tree[i].ha1==tree[i+1].ha1){\n            if(tree[i].ha2==tree[i+1].ha2){\n                if(tree[i].ha3==tree[i+1].ha3){\n                    if(tree[i].ha4==tree[i+1].ha4){\n                        i++;\n                    }\n                }\n            }\n        }\n        ans++;//\u5168\u90e8\u4e0d\u76f8\u540c\u5c31ans++\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1479440849,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u53d1\u4e00\u4e2a\u6b63\u89e3hash~\n\n\u6211\u53ef\u4e0d\u50cf\u67d0\u67d0\u540c\u5b66\uff08cly\uff09\u90a3\u6837\u4e0d\u5b88\u89c4\u77e9\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<string>\n#include<cmath>                                            //\u4e00\u5768\u5934\u6587\u4ef6\nusing namespace std;\nint n,ans=0,cnt=0;\nstring a,data[10007];\nint list[10001]={0};\nint next[10001]={0};\nint ok(string h)\n{\n    int sum=0;\n    for(int i=0;i<h.size();i++)sum=sum*33+h[i];                   //\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\u518d\u6765hash\u3002\u3002\u3002\n    sum=abs(sum%10007);                                         //\u7167\u5e38\u819c\u86e4\u3002\u3002\u3002\u5c31\u662f\u6ce8\u610f\u8981abs\uff0c\u56e0\u4e3asum\u662fint\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u4e00\u957f\u5c31\u4f1a\u7206\u6210\u8d1f\u6570\uff0c\u4e0d\u8fc7\u6ca1\u4e8b\uff0c\u4e0d\u4f1a\u8ba9\u7a0b\u5e8f\u51fa\u9519\u3002\u3002\u3002\u53ea\u8981\u4e0d\u662f\u8d1f\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\u3002\n    int u=list[sum];\n    while(u)\n    {\n        if(data[u]==h)return 0;                          //\u5224\u65ad\u524d\u9762\u662f\u5426\u6709\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u3002\u3002\n        u=next[u];\n    }\n    cnt++;\n    data[cnt]=h;\n    next[cnt]=list[sum];\n    list[sum]=cnt;                                              //\u5982\u679csum\u6240\u5728\u7684\u4f4d\u7f6e\u6709\u4e1c\u897f\uff0c\u5c31\u8981\u628a\u5b83\u201c\u540a\u201d\u5728\u4e0b\u9762\u3002\u3002\u3002\uff08\u5c31\u662f\u7c7b\u4f3c\u94fe\u8868\u7684\u4e1c\u897f\uff09\n    return 1;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a;\n        if(ok(a))ans++;                                   //\u5982\u679c\u6ca1\u6709\u91cd\u590d\u5c31ans++\n    }\n    cout<<ans<<endl;                                   //\u8f93\u51fa\n    return 0;                                                 //\u56de\u5bb6\n}\n```",
        "postTime": 1479393630,
        "uid": 14474,
        "name": "2016jzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u90a3\u6211\u5c31\u53d1\u4e2a\u771fhash\u2026\u2026\n\n\u9009\u4e86\u4e09\u4e2aP\uff0c\u540c\u65f6\u5b58\u5728\u624d\u8ba4\u4e3a\u5b58\u5728\u3002\n\n```cpp\n#include<cstdio>\nconst int LEN=1510,P[3]={1000003,1000117,1000151};\nchar s[LEN];\nbool ext[3][1000152];\nint n,cnt;\nbool in(char* r){\n    int v=0;\n    for(int i=0;i<=2;i++) {\n        int hv=1;\n        char* s=r;\n        while(*s) hv=hv*131+*(s++),hv%=P[i];\n        v+=ext[i][hv];\n        ext[i][hv]=1;\n    }\n    return v<3;\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {\n        scanf(\"%s\",s);\n        cnt+=in(s);\n    }\n    printf(\"%d\",cnt);\n}\n```",
        "postTime": 1475660054,
        "uid": 15183,
        "name": "Rapiz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u4e00\u6837\u7684\u9898\u89e3\u554a\u3002\u3002\u3002\u5c31\u968f\u4fbf\u53d1\u4e00\u4e0b\u3002\u3002\u3002hash+map\uff0cmap\u76f4\u63a5\u6c34\u8fc7\uff0c\u7528\u4e00\u4e2amap\u4eceunsigned long long\u7684\u5b57\u7b26\u4e32hash\u540e\u7684\u503c\u6620\u5c04\u5230\u4e00\u4e2aint\u6574\u6570\u578b\u8868\u793a\u662f\u5426\u5b58\u5728\u5c31\u884c\u4e86\u3002\u3002\u5934\u6587\u4ef6\u6211\u5c31\u4e0d\u8865\u4e86\n\n\n\n\n```cpp\ntypedef unsigned long long ull;\null x = 45321;\nmap<ull,int> vis;\nint ans = 0,n;\nchar s[1005];\null hash(char *s)\n{\n    int len  = strlen(s);\n    ull res = 0;\n    for(int i = 0;i<len;i++)\n    {\n        res+=s[i];\n        res*=x;\n    }\n    return res;\n}\nint main()\n{\n    //freopen(\"std.in\",\"r\",std5in);\n    //freopen(\"std.out\",\"w\",stdout);\n    cin>>n;\n    for(int i = 1;i<=n;i++)\n    {\n        cin>>s;\n        ull tmp = hash(s);\n        if(vis[tmp]==1) continue;\n        vis[tmp] = 1;\n        ans++;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1493277773,
        "uid": 36129,
        "name": "Decide",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3370 \u3010\u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c\u3011"
    }
]