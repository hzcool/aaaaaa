[
    {
        "content": "From \u591a\u5e74\u4e0d\u5199\u9898\u89e3\u7684\u849f\u84bb\n\n###### ~~\u5148\u5410\u69fd\u4e00\u53e5\u67d0\u8c37\u7684\u8bc4\u6d4b\u673a,\u6211\u6709\u4e00\u4efd\u63d0\u4ea4\u4e00\u76f4N/A~~\n\n*\u6b63\u89e3\u4e3a \uff1a\u6811\u7684\u76f4\u5f84+\u6570\u5b66\u63a8\u65ad*\n\n\n-------------------------------\u4e0b\u9762\u662f\u771f_\u9898\u89e3--------------------\n\n**RT**,\u6709\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u6211\u4eec\u5728\u6811\u4e0a\u52a0\u4e0a1~2\u4e24\u6761\u8fb9\uff0c\u662f\u8b66\u5bdf\u904d\u5386\u65f6\u7ecf\u8fc7\u7684\u8def\u5f84\u6700\u77ed\uff0c\u5173\u4e8e\u8def\u5f84\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42\n\n1. \u9020\u51fa\u6765\u7684\u8def\u5fc5\u987b\u4e14\u4ec5\u7ecf\u8fc7\u4e00\u904d\n1. \u5141\u8bb8\u51fa\u73b0\u67d0\u6761\u8def\u6709\u67d0\u70b9\u8fde\u5411\u540c\u4e00\u4e2a\u70b9\n1. \u4ece1\u597d\u8282\u70b9\u51fa\u53d1\uff0c\u56de\u5230\u4e00\u53f7\u8282\u70b9\n\n\u597d\u4e86\u8ba9\u6211\u4eec\u5f00\u59cb\u601d\u8003\uff0c\u53ea\u8981\u6211\u4eec\u8ba4\u771f\u5730\u8bfb\u9898\u4e86\uff0c\u5c31\u4f1a\u53d1\u73b0*k*\u53ea\u6709\u4e24\u79cd\u60c5\u51b5:k==1\u6216k==2\uff0c\u90a3\u4e48\u4e0d\u59a8\u8fdb\u884c\u4e00\u6ce2\u5206\u7c7b\u8ba8\u8bba\n\n# *k==1*\u65f6\n\n\u5f53k==1\u65f6\uff0c\u53d1\u73b0\uff0c\u53ea\u8981\u4e0dzz\u4e00\u822c\u5730\u4ece\u81ea\u5df1\u8fde\u5230\u81ea\u5df1(\u9020\u7684\u8def\u5fc5\u987b\u901a\u8fc7)\uff0c\u90fd\u662f\u53ef\u4ee5\u5e2e\u8b66\u5bdf\u7701\u4e0b\u8def\u7a0b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\u5730\u9009\u62e9\uff0c\u5373\u9009\u62e9\u6811\u4e0a\u8ddd\u79bb\u6700\u957f\u7684\u4e24\u70b9\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u6211\u4eec\u9009\u62e9\u4e86\u90a3\u4e24\u4e2a\u70b9\uff0c\u7701\u4e0b\u7684\u8ddd\u79bb\u90fd\u662f*\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb - 1\uff08\u8d70\u9020\u7684\u90a3\u6761\u8def\u8fd8\u8981 1\uff09*\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u627e\u5230\u8ddd\u79bb\u6700\u5927\u7684\u4e24\u4e2a\u70b9\u5c31\u53ef\u4ee5\u7701\u4e0b\u6700\u957f\u7684\u8def\u7a0b\u8fd9\u5c31\u5f15\u51fa\u4e86\u6211\u4eec\u7684\u4e3b\u89d2\u2014\u2014**\u6811\u7684\u76f4\u5f84**\n\n## \u6811\u7684\u76f4\u5f84\n\u4ec0\u4e48\u662f\u6811\u7684\u76f4\u5f84\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u6811\u4e0a\u8ddd\u79bb\u76f8\u5dee\u6700\u5927\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u6982\u5ff5\u975e\u5e38\u597d\u7406\u89e3\uff0c\u4ee3\u7801\u4e5f\u4e0d\u957f\n\n### \u600e\u4e48\u6811\u7684\u76f4\u5f84\n\n1. \u4e24\u6b21dfs\n2. \u6811\u5f62dp\n\n\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\u5c06\u5728\u5148\u95ee\u4e2d\u8bb2\u5230\n\n#### dfs\u6c42\u6811\u7684\u76f4\u5f84\n\u5176\u5b9e\u5c31\u662f\u5728\u6811\u4e0a\u968f\u673a\u9009\u4e00\u4e2a\u70b9\uff0c\u5bf9\u4ed6\u8fdb\u884c\u4e00\u6b21dfs\u6c42\u51fa\u8ddd\u79bb\u5b83\u8ddd\u79bb\u6700\u8fdc\u7684\u4e00\u4e2a\u70b9*A*,\u7136\u540e\u518d\u7528\u90a3\u4e00\u4e2a\u70b9dfs\u56de\u6765\u627e\u5230\u4e00\u4e2a\u79bb*A*\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684*B*\u70b9\uff0c*AB*\u4e4b\u95f4\u7684\u8def\u5f84\u5373\u4e3a\u6811\u7684\u76f4\u5f84\n\n\u4ee3\u7801:(dfs)\n```cpp\nvoid dfs(int x,int father,int weight){\n    if(weight>=_max){\n        _max=weight;\n        id=x;\n    }\n    for(int i=linkk[x];i;i=e[i].nxt)\n        if(e[i].to!=father)\n            dfs(e[i].to,x,weight+e[i].value);\n}\n```\n\n\u4f18\u70b9:\u53ef\u4ee5\u8bb0\u5f55\u76f4\u5f84\u7684\u8d77\u70b9\uff0c\u91cd\u70b9\uff0c\u518d\u914d\u5408\u4e00\u4e2adfs\u53ef\u4ee5\u6c42\u51fa\u76f4\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\n\n\u7f3a\u70b9:\u9047\u5230\u526f\u8fb9\u6743\u7684\u6811\u5c31*GG*\n\n#### \u6811\u4e0adp\u6c42\u6811\u7684\u76f4\u5f84\n\n\u901a\u8fc7\u6811\u5f62dp\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u6c42\u51fa\u5dee\u4e0d\u591a\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6c42\u6700\u5927\u503c\uff0c\u542c\u4e0a\u53bb\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u4f46\u5b66\u8fc7\u6811\u5f62dp\u7684\u540c\u5b66\u5e94\u8be5\u90fd\u77e5\u9053\u7801\u91cf\u6bd4\u8f83\u5c0f\n\n\u4ee3\u7801:(\u6811\u4e0adp)\n\n```cpp\nvoid Dp_to_Find_D_afther(int now,int father){\n    for(int i=linkk[now];i;i=e[i].nxt){\n        if(e[i].to==father)  continue;\n        Dp_to_Find_D_afther(e[i].to,now);\n        Dafter=max(Dafter,dis[now]+dis[e[i].to]+e[i].value);\n        dis[now]=max(dis[now],dis[e[i].to]+e[i].value);\n    }\n}\n```\n\n\u4f18\u70b9:\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u6743\u7684\u6811\n\n\u7f3a\u70b9:\u771f\u7684\u53ea\u80fd\u6c42\u4e00\u4e2a\u6811\u7684\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u5176\u4ed6\u7684\u6c42\u4e0d\u51fa\n\n**\u4e24\u79cd\u65b9\u6cd5\u4e92\u76f8\u8865\u5145\uff0c\u6b63\u662f\u8fd9\u9898\u7684\u4f18\u79c0\u4e4b\u5904\uff0c\u5b83\u540c\u65f6\u8003\u5230\u4e86\u4e24\u79cd\u7b97\u6cd5**\n\n\u7136\u540e\u5f53k==1\u65f6\uff0c\u5c31\u53ef\u4ee5\u7701\u4e0b*\u6811\u7684\u76f4\u5f84-1*\u7684\u8def\u5566(\u663e\u7136\u8fd9\u662f\u7701\u7684\u6700\u591a\u7684)\uff0c\u7531\u4e8e\u672c\u6765\u8981\u8d70\u7684\u8def\u7a0b\u662f*(N-1)<<1*(\u6bcf\u6761\u8def\u8d70\u4e24\u6b21),\u6211\u4eec\u5f53*k==1*\u65f6\u7684\u7b54\u6848\u5c31\u662f\n```cpp\n            (2*(N-1)-Dfront+1)//Dfront\u662f\u6811\u7684\u76f4\u5f84\n```\n\n# k==2\u65f6\n\u8fd9\u662f\u8fd9\u9053\u9898\u76ee\u7684\u96be\u70b9\u6240\u5728\uff0c\u4f46\u5982\u679c\u60f3\u901a\u4e86k==1\u65f6\u7684\u60c5\u51b5\u7684\u8bdd\uff0c\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u96be~~\u7136\u800c\u672c\u849f\u84bb\u8fd8\u662f\u5361\u4e86\u5dee\u4e0d\u591a\u4e00\u4e2a\u4e0a\u5348~~\u6211\u4eec\u5728\u6c42\u51fa\u4e86\u4e00\u5f00\u59cb\u6c42\u51fa\u4e86\u6811\u7684\u76f4\u5f84\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u9020\u7684\u90a3\u6761\u8fb9\u5148\u5ffd\u7565\u6389\uff0c\u7136\u800c\uff0c\u8981\u600e\u4e48\u89e3\u51b3\u6709\u4e9b\u8fb9\u5df2\u7ecf\u88ab\u7701\u4e0b\u7684\u60c5\u51b5\u5462\uff1f\n\n\u9996\u5148\uff0c\u6211\u4eec\u5f97\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u52a0\u5165\u4e86\u4e00\u6761\u8fb9\u540e\uff0c\u5c31\u591a\u4e86\u4e00\u4e2a\u73af~~\u8fd9\u68f5\u6811\u5c31\u53d8\u6210\u4e86\u4e00\u9897\u57fa\u73af\u6811~~\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u52a0\u5165\u7b2c\u4e8c\u6761\u8fb9\u65f6\uff0c\u4ed6\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u73af\uff0c\u8fd9\u4e2a\u73af\u7684\u60c5\u51b5\u4e5f\u4e0d\u591a\uff0c\u4e0d\u5982\u518d\u6765\u4e00\u6ce2\u5206\u7c7b\u8ba8\u8bba\n\n1. \u6b64\u73af\u7684\u8fb9\u548c\u7b2c\u4e00\u4e2a\u73af\u6709\u91cd\u53e0\n1. \u6b64\u73af\u7684\u8fb9\u548c\u7b2c\u4e00\u4e2a\u73af\u6ca1\u6709\u91cd\u53e0\n\n\u5f53\u7b2c\u4e8c\u79cd\u60c5\u51b5\u65f6\uff0c\u4e0d\u7528\u60f3\u5c31\u5e94\u8be5\u77e5\u9053\uff0c\u53ea\u8981\u518d\u8d2a\u5fc3\u4e00\u6b21(\u628a\u7b2c\u4e00\u6761\u76f4\u5f84\u4e0a\u7684\u8fb9\u5ffd\u7565)\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u7684\u6311\u6218\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\n\n**\u6572\u9ed1\u677f\uff0c\u4ee5\u4e0b\u662f\u91cd\u70b9**\n\n\u5f53\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u73af\u6709\u4e0e\u7b2c\u4e00\u4e2a\u73af\u6709\u91cd\u8fb9\u65f6\uff0c\u56e0\u4e3a\u9020\u51fa\u6765\u7684\u8def\u5fc5\u987b\u53ea\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a\u73af\u80af\u5b9a\u662f\u8981\u904d\u5386\u4e00\u6b21\u7684\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u7b2c\u4e00\u6b21\u9020\u8def\u5e76\u6ca1\u6709\u5e2e\u91cd\u53e0\u7684\u8fb9\u7701\u4e0b\u8def\u7a0b\uff0c\u90a3\u4e48\u600e\u4e48\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\uff1f\n\n\u60f3\u5fc5\u5404\u4f4d*dalao*\u90fd\u77e5\u9053\uff0c\n```cpp\n                       x-y-(-y)=x\n```\n\n*bingo!!!*\u6211\u4eec\u53ea\u8981\u628a\u7b2c\u4e00\u6761\u76f4\u5f84\u4e0a\u7684\u8fb9\u7684\u8fb9\u6743\u6539\u4e3a* -1 (\u6216\u4e00\u4e2a\u4f60\u559c\u6b22\u7684\u8d1f\u6570) *\u5c31\u884c\u5566\n\n**\u6572\u9ed1\u677f\uff0c\u91cd\u70b9\u7ed3\u675f**\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u6837\u624d\u80fd\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u6539\u4e3a* -1 *\u5462\uff1f\n\n\u540c\u5b66\uff0c\u4f60\u77e5\u9053\u5417\uff1fSTL\u5e93\u91cc\u6709\u4e00\u4e2a\u4e1c\u897f\uff0c\u4ed6\u53eb\u505a**map**,\u6839\u636e\u6811\u7684\u6027\u8d28\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c**\u6709\u4e14\u53ea\u6709**\u4e00\u6761\uff0c\u6240\u4ee5\u5f53\u4e24\u4e2a\u70b9\u90fd\u662f\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u70b9\u65f6\uff0c\u8fde\u63a5\u4ed6\u4eec\u7684\u8fb9\u4e00\u5b9a\u662f\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u6539\u4e3a* -1 *\u5566\n\n## map\n\nmap\u662fSTL\u5e93\u4e00\u79cd\u4e1c\u897f(\u6211\u4e5f\u4e0d\u77e5\u9053\u7b97\u4e0d\u7b97\u6570\u636e\u7ed3\u6784)\n\n\u5b83\u5f62\u4f3c**map<int,bool>Mymap**,\u5b83\u652f\u6301\u4ee5\u524d\u4e00\u4e2a\u6570\u4e3a\u4e0b\u6807(\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u6216\u5b57\u7b26\u4e32)\uff0c\u8fd4\u56de\u540e\u4e00\u4e2a\u503c\uff0c\u5b83\u7684\u4e3b\u8981\u51fd\u6570\u53eb\u505a\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n```cpp\n\tmap<int,bool>Mymap;//\u5b9a\u4e49\u4e00\u4e2a\u53ebMymap\u7684map\n    \tif(Mymap.count(x)==1)//\u5224\u65adx\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5728map\u4e2d,\u662f\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\n    \t\t\u2026\u2026\u2026\u2026\uff1b//\u4e00\u6ce2\u64cd\u4f5c\n    Mymap[x]=1;//\u5c06x\u8fd9\u4e2a\u5143\u7d20\u52a0\u5165Mymap\u4e2d\n```\n\u4e0d\u77e5\u9053\u8fd9\u4e48\u8bf4\u5408\u4e0d\u5408\u9002\uff0c\u5176\u5b9e*map*\u662f\u975e\u5e38\u597d\u7528\u7684\uff0c\u5e38\u88ab\u6211\u7528\u6765\u4ee3\u66ff\u5b57\u7b26\u4e32Hash\n\n\u90a3\u4e48\u95ee\u9898\u53c8\u88ab\u6211\u4eec\u7b80\u5316\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u8981\u6c42\u51fa\u76f4\u5f84\u4e0a\u6709\u90a3\u4e9b\u70b9\u5c31\u53ef\u4ee5\u4e86,\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f53\u73b0\u51fa\u4e86dfs\u7684\u5f3a\u5927\n\n\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a*fr*\u6570\u7ec4\u6765\u8bb0\u5f55\u6211\u4eec\u7684\u76f4\u5f84\u4e0a\u7684\u70b9\n\n\u4ee3\u7801(\u6c42\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u70b9)\n```cpp\nvoid dfs_for_D(int now,int father,int tar/*\u9700\u8981\u5230\u7684\u76ee\u6807\u70b9*/){\n    if(flag_find_D==true)  return;//\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u627e\u5230\u4e86\u6240\u6709\u70b9\n    for(int i=linkk[now];i;i=e[i].nxt){\n        if(flag_find_D==true)  return;\n        if(e[i].to==father)  continue;\n        if(e[i].to==tar){\n            fr[now]=e[i].to;//\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u8fde\u5411\u7684\u4e0b\u4e00\u4e2a\u70b9\n            flag_find_D=true;\n            return;\n        }\n        fr[now]=e[i].to;\n        //\u5982\u679c\u8fd9\u5e76\u4e0d\u662f\u9700\u8981\u7684\u70b9\uff0c\u4e0d\u7528\u62c5\u5fc3\uff0c\u4ed6\u4f1a\u5728\u4ee5\u540e\u7684dfs\u4e2d\u88ab\u8986\u76d6\n        dfs_for_D(e[i].to,now,tar);\n        if(flag_find_D==true)  return;\n    }\n}\n\ndfs_for_D(start,0,end);//start,end\u5206\u522b\u4e3a\u76f4\u5f84\u7684\u8d77\u70b9\uff0c\u7ec8\u70b9\n\n```\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c31\u628a\u6811\u7684\u76f4\u5f84\u4e2d\u7684\u6240\u6709\u70b9\u5b58\u5728\u4e86*fr*\u4e2d\n\u4e0b\u9762\u6211\u4eec\u9700\u8981\u5229\u7528*map*\u8bb0\u5f55\u4e0b\u8fd9\u4e9b\u70b9\uff0c\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c*fr*\u6570\u7ec4\u7684\u601d\u60f3\u7c7b\u4f3c\u4e8e\u90bb\u63a5\u8868\uff0c\u6240\u4ee5\u4fbf\u5386\u4e5f\u4e0e\u90bb\u63a5\u8868\u76f8\u4f3c\n\n```cpp\nfor(int i=start;i!=end;i=fr[i])\n        __map[i]=1;//\u5982\u679c\u8fd9\u4e2a\u70b9\u5728\u76f4\u5f84\u4e0a\uff0c\u628a\u4ed6\u6253\u4e0atag(__map\u662f\u5b9a\u4e49\u7684map)\n```\n\u4f46\u662f\uff0c\u7531\u4e8e*for*\u5faa\u73af\u7684\u7f18\u6545\uff0c\u6211\u4eec\u76f4\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u88ab\u6253\u4e0a\u6807\u8bb0\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u52a0:\n\n```cpp\n                          __map[end]=1;\n```\n\n\u73b0\u5728\uff0c\u6240\u6709\u76f4\u5f84\u4e0a\u7684\u70b9\u90fd\u88ab\u6211\u4eec\u6253\u4e0a\u4e86*tag*\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u8fde\u7740\u8fd9\u4e9b\u70b9\u7684\u8fb9\u7684\u6743\u503c\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u505a\u6cd5\u5f88\u7b80\u5355\n\n\u4ee3\u7801(\u4fee\u6539\u6743\u503c)\n```cpp\n for(int i=1;i<=N;++i)//\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\n        if(__map.count(i)==1)//\u8fb9\u7684\u8d77\u70b9\u9996\u5148\u8981\u88ab\u6253\u4e0a\u8fc7\u6807\u8bb0\n            for(int j=linkk[i];j;j=e[j].nxt)//\u904d\u5386\u8fd9\u4e2a\u70b9\u6240\u884d\u751f\u51fa\u7684\u8fb9\n                if(__map.count(e[j].to)==1)//\u7ec8\u70b9\u4e5f\u6253\u4e0a\u6807\u8bb0\u8868\u793a\u8fd9\u5c31\u662f\u76f4\u5f84\u4e0a\u7684\u70b9\n                    e[j].value=-1;//\u4fee\u6539\u6743\u503c\n```\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c31\u6210\u529f\u5730\u628a\u8fd9\u4e2a\u56fe\u52a0\u5de5\u6210\u4e86\u6211\u4eec\u9700\u8981\u7684\u4e1c\u897f\uff0c\u518d\u6c42\u4e00\u904d\u6811\u7684\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\uff0c\u7b49\u7b49_\u6ce8\u610f\u8981\u7528\u6811\u5f62dp\u6c42\uff0c\u56e0\u4e3a\u8fd9\u68f5\u6811\u6b64\u65f6\u5df2\u7ecf\u6709\u4e86\u8d1f\u8fb9\u6743\u7684\u8fb9\uff01\uff01~~\u8bf6\u5466\u6211\u53bb\uff0c\u8fd9\u4e2a\u5361\u4e86\u6211\u597d\u4e45\uff0c\u592a\u83dc\u4e86\uff0c\u6ca1\u6709\u529e\u6cd5~~\n\n\u6211\u4eec\u5e2e\u8b66\u5bdf\u53d4\u53d4\u7701\u4e0b\u7684\u8def\u5c31\u662f\n```cpp\n               2*(N-1)-(Dfront-1)-(Dafter-1)\n              =2*N-Dfront_Dafter\n```\n\u56e0\u4e3a\u5728\u7b2c\u4e8c\u6b21\u6c42\u8fb9\u6743\u662f\u7684\u8fb9\u7684\u6743\u503c\u662f* -1 *  \u6240\u4ee5\u7b2c\u4e8c\u4e2a\u73af\u7684\u91cd\u8fb9,\u5728\u8ba1\u7b97\u65f6\u5df2\u7ecf\u4ece\u7701\u4e0b\u7684\u8def\u5f84\u4e2d\u51cf\u53bb\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5927\u80c6\u5730\u8fd9\u4e48\u8ba1\u7b97\n\n\n\u5949\u732e\u4e00\u6ce2AC\u7801(339ms(whithout O-2),5696kb)~~\u5e94\u8be5\u5f88\u5c11\u6709\u4eba\u8fd9\u4e48\u5199\u5427~~\n```cpp\n#include <bits/stdc++.h>\n#define C getchar()\nusing namespace std;\nconst int maxn=100010;\ninline int read(){\n    int x=0;char ch;bool flag=true;\n    for(;!isdigit(ch);ch=C)  flag=ch=='-'?false:true;\n    for(;isdigit(ch);ch=C)   x=(x<<3)+(x<<1)+(ch^48);\n    return flag?x:-x;\n}//\u795e\u4ed9\u5feb\u8bfb\n\nint N,K;\nstruct edge{\n    int nxt;\n    int to;\n    int value;\n}e[maxn<<1]={};//\u90bb\u63a5\u8868,\u6ce8\u610f\u5f00\u4e24\u500d\nint linkk[maxn]={};\nint len,x,y,_max,id,Dfront,Dafter,start,end,fr[maxn]={},dis[maxn]={};\nbool flag_find_D=false;\nmap<int,bool>__map;//\u5b9a\u4e49\u4e00\u4e2amap\n\nvoid insert(int x,int y){\n    e[++len].to=y;\n    e[len].nxt=linkk[x];\n    e[len].value=1;\n    linkk[x]=len;\n}\n\nvoid dfs(int x,int father,int weight){\n    if(weight>=_max){\n        _max=weight;\n        id=x;\n    }\n    for(int i=linkk[x];i;i=e[i].nxt)\n        if(e[i].to!=father)\n            dfs(e[i].to,x,weight+e[i].value);\n}//dfs\u6c42\u6811\u7684\u76f4\u5f84\n\nvoid dfs_for_D(int now,int father,int tar){\n    if(flag_find_D==true)  return;\n    for(int i=linkk[now];i;i=e[i].nxt){\n        if(flag_find_D==true)  return;\n        if(e[i].to==father)  continue;\n        if(e[i].to==tar){\n            fr[now]=e[i].to;\n            flag_find_D=true;\n            return;\n        }\n        fr[now]=e[i].to;\n        dfs_for_D(e[i].to,now,tar);\n        if(flag_find_D==true)  return;\n    }\n}//\u8bb0\u5f55\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u70b9\n\nvoid Dp_to_Find_D_afther(int now,int father){\n    for(int i=linkk[now];i;i=e[i].nxt){\n        if(e[i].to==father)  continue;\n        Dp_to_Find_D_afther(e[i].to,now);\n        Dafter=max(Dafter,dis[now]+dis[e[i].to]+e[i].value);\n        dis[now]=max(dis[now],dis[e[i].to]+e[i].value);\n    }\n}//\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n\nint main(){\n    N=read(),K=read();\n    for(int i=2;i<=N;++i){\n        x=read(),y=read();\n        insert(x,y);\n        insert(y,x);\n    }//\u5efa\u56fe\n    dfs(1,0,0);//\u7b2c\u4e00\u6b21dfs(\u4ece\u4e00\u4e2a\u4f60\u559c\u6b22\u7684\u8282\u70b9\u5f00\u59cb)\n    start=id,_max=0;\n    dfs(start,0,0);//\u7b2c\u4e8c\u6b21dfs(\u4ece\u5230\u4f60\u559c\u6b22\u7684\u8282\u70b9\u7684\u6700\u8fdc\u7684\u54ea\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb)\n    Dfront=_max,end=id;//\u6c42\u51fa\u9020\u7b2c\u4e00\u6761\u8def\u65f6\u7684\u6811\u7684\u76f4\u5f84\u2014\u2014Dfront\n    if(K==1){\n        printf(\"%d\",(2*(N-1)-Dfront+1));\n        return 0;\n    }//k==1\u65f6\u76f4\u63a5\u8f93\u51fa\u5e76\u9000\u51fa(30\u5206)\n    dfs_for_D(start,0,end);//\u8bb0\u5f55\u76f4\u5f84\u2014\u2014Dfront\u4e0a\u7684\u70b9\n    __map[end]=1;\n    __map[start]=1;\n    for(int i=start;i!=end;i=fr[i])\n        __map[i]=1;//\u7ed9\u76f4\u5f84\u2014\u2014Dfront\u4e0a\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\n    for(int i=1;i<=N;++i)\n        if(__map.count(i)==1)\n            for(int j=linkk[i];j;j=e[j].nxt)\n                if(__map.count(e[j].to)==1)\n                    e[j].value=-1;//\u4fee\u6539\u8fb9\u6743\n    Dp_to_Find_D_afther(1,0);//\u6811\u4e0adp\u6c42\u9020\u7b2c\u4e8c\u6761\u8def\u65f6\u6811\u7684\u76f4\u5f84\u2014\u2014Dafter(\u6b64\u65f6\u6709\u8d1f\u8fb9\u6743\u7684\u8fb9)\n    printf(\"%d\",2*N-Dfront-Dafter);//k==2\u65f6\u8f93\u51fa\u5e76\u9000\u51fa\n    return 0;\n}\n```",
        "postTime": 1537618765,
        "uid": 103762,
        "name": "Wow_Goodjob",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9898\u9898\u89e3\u4e00\u7247\u7a7a\u767d\uff0c\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u4e5f\u60f3\u4e3a\u793e\u4f1a\u505a\u70b9\u8d21\u732e\u2026\u2026\n\n\u9996\u5148\u8981\u77e5\u9053\uff1a\n\n1.\u5047\u5982\u4e0d\u52a0\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u8981\u8d70\u4e24\u6b21\u3002\n\n2.\u5047\u5982\u52a0\u4e86\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u800c\u4e14\u73af\u4e0a\u7684\u8fb9\u53ea\u9700\u8981\u8d70\u4e00\u6b21\uff0c\u5176\u4f59\u7684\u8fb9\u8981\u8d70\u4e24\u6b21\u3002\n\n\uff08\u81ea\u5df1yy\u4ee5\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff09\n\n\u5bf9\u4e8ek=1\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8981\u4f7f\u73af\u4e0a\u7684\u8fb9\u5c3d\u91cf\u591a\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u627e\u6811\u7684\u76f4\u5f84\uff0c\u4f7f\u5f97\u6811\u7684\u76f4\u5f84\u5728\u73af\u5185\u3002\n\n\u800c\u5bf9\u4e8ek=2\u7684\u8bdd\uff0c\u518d\u52a0\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u4f1a\u518d\u591a\u4e00\u4e2a\u73af\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u8981\u77e5\u9053\uff1a\n\n1.\u5982\u679c\u4e00\u6761\u8fb9\u4ec5\u5728\u7b2c\u4e8c\u4e2a\u73af\u51fa\u73b0\u8fc7\uff0c\u53ea\u7528\u8d70\u4e00\u6b21\u3002\n\n2.\u5982\u679c\u4e00\u6761\u8fb9\u5728\u4e24\u4e2a\u73af\u90fd\u51fa\u73b0\u8fc7\uff0c\u8981\u8d70\u4e24\u6b21\u3002\n\n3.\u5982\u679c\u4e00\u6761\u8fb9\u5728\u4e24\u4e2a\u73af\u90fd\u6ca1\u51fa\u73b0\u8fc7\uff0c\u8981\u8d70\u4e24\u6b21\u3002\n\n\uff08\u81ea\u5df1yy\u4ee5\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff09\n\n\u6240\u4ee5\u6211\u4eec\u7ed9\u7b2c\u4e00\u4e2a\u73af\u4e0a\u7684\u8fb9-1\u7684\u6743\u503c\uff0c\u5176\u4f59\u8fb9\u7ed91\u7684\u6743\u503c\uff0c\u6c42\u51fa\u6811\u4e0a\u6743\u503c\u6700\u5927\u7684\u4e00\u6761\u8def\u5f84\uff08\u5047\u76f4\u5f84O(\u2229\\_\u2229)O\uff09\n\n\u7136\u540e\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002\n\n\n\u9644\u4e0a\u849f\u84bb\u7684\u4ee3\u7801\uff0c\u6211\u7684100\u6765\u884c\uff0c\u540c\u4e00\u673a\u623f\u795e\u7287\u7684\u4ee3\u780160+\u884c\n\nCODE\uff1a\n\n\n\n\n\n\n\n    \n```cpp\n#include<iostream>\n#include<fstream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\nint n,k,root1,root2,cir,cir2;\nint cur,head[100010],d[100010],heavy[100010],w[100010];\nstruct tedge\n{\n    int to,nex;\n}e[200010];\nstruct data\n{\n    int e,v;\n}son[100010];\nvoid Add(int u,int v)\n{\n    cur++;\n    e[cur].to = v;\n    e[cur].nex = head[u];\n    head[u] = cur;\n}\nbool cmp(data a,data b)\n{\n    return a.e>b.e;\n}\nvoid dfs(int u,int f)\n{\n    int cnts=0;\n    for (int i=head[u]; i!=-1; i=e[i].nex)\n    {\n        int v=e[i].to;\n        if (v==f) continue;\n        dfs(v,u);\n        if (d[u]<d[v]+w[v]) \n        {\n            d[u] = d[v]+w[v];\n            heavy[u] = v;\n        }\n    }\n    for (int i=head[u]; i!=-1; i=e[i].nex)\n    {\n        int v=e[i].to;\n        if (v==f) continue;\n        cnts++;  son[cnts].e = d[v]+w[v];  son[cnts].v = v;\n    }\n    sort(son+1,son+1+cnts,cmp);\n    if (cnts==0) d[u] = 0;\n    if (cnts>=1&&cir<son[1].e) \n    {\n        cir = son[1].e;\n        root1 = son[1].v;\n    }\n    if (cnts>=2&&cir<son[1].e+son[2].e)\n    {\n        cir = son[1].e+son[2].e;\n        root1 = son[1].v;  root2 = son[2].v;\n    }\n}\nvoid Change()\n{\n    int u = root1;\n    while (u!=0)\n    {\n        w[u] = -1;  u = heavy[u];\n    }\n    u = root2;\n    while (u!=0)\n    {\n        w[u] = -1;  u = heavy[u];\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for (int i=0; i<=n; i++)\n    head[i] = -1;\n    for (int i=2; i<=n; i++)\n    w[i] = 1;\n    for (int i=1; i<n; i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        Add(x,y);  Add(y,x);\n    }\n    cir = 0;\n    dfs(1,0);\n    if (k==1)\n    {\n        printf(\"%d\\n\",2*(n-1)-cir+1);\n        return 0;\n    }\n    Change();\n    cir2 = cir;  cir = -1e9;\n    for (int i=1; i<=n; i++)\n    d[i] = -1e9;\n    dfs(1,0);\n    printf(\"%d\\n\",2*(n-1)-cir-cir2+2);\n    return 0;\n}\n```",
        "postTime": 1504534052,
        "uid": 29324,
        "name": "\u6700\u7ec8\u60ca\u5413\u8005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "# **\u867d\u7136\u6709\u5f88\u591aDalao\u53d1\u8fc7\u5f88\u591a\u975e\u5e38\u8be6\u7ec6\u7684\u9898\u89e3\uff0c\u4f46\u662f\u672c\u849f\u84bb\u8fd8\u662f\uff08\u51ed\u7740\u521d\u751f\u725b\u728a\u4e0d\u6015\u864e\u7684\u7cbe\u795e\uff09\u6765\u53d1\u4e00\u7bc7\u9898\u89e3\u3002**\n\n### **\u56e0\u4e3a\u6700\u8fd1\u6b63\u5728\u590d\u4e60\u539f\u6765\u5b66\u4e60\u7684\u56fe\u8bba\uff0c~~\u6b63\u5de7~~\uff08~~\u4e00\u70b9\u4e5f\u4e0d\u5de7~~\uff09\u770b\u5230\u4e86\u8fd9\u9053\u9898,\u7136\u540e\u5c31\u2026\u2026\u70b9\u4e86\u8fdb\u6765**\u3002\n\u5176\u5b9e\u521a\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6709\u4e00\u70b9\u61f5\u7684\uff08\u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u9053\u56fe\u8bba\u662f\u6ca1\u5f97\u8dd1\u7684\uff09\u3002\n\u7136\u540e\uff0c\u6211\u5c31\u4ece\u5934\u7406\u4e86\u4e00\u4e0b\u601d\u8def\u3002  \n\u9996\u5148\uff1a  \n1\u3001\u8be5\u56fe\u4e0a\u7684\u6240\u6709\u9053\u8def\u90fd\u8981\u5230\u8fbe\u3002  \n2\u3001\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u4ece\u4e00\u53f7\u70b9\u5f00\u59cb\uff0c\u4e00\u53f7\u70b9\u7ed3\u675f\u3002  \n3\u3001\u8981\u4f7f\u5f97\u5de1\u903b\u8ddd\u79bb\u8f83\u77ed\u3002  \n \n## **\u7b2c\u4e00\u6b65**\n\u6211\u4eec\u5148\u8003\u8651\u4e0d\u52a0\u8fb9\u7684\u60c5\u51b5  \n\u4ece\u4e00\u53f7\u70b9\u51fa\u53d1\uff0c\u8981\u628a\u6bcf\u4e2a\u8fb9\u904d\u5386\u4e00\u904d\u518d\u56de\u52301\u53f7\u70b9\uff0c\u4f1a\u6070\u597d\u7ecf\u8fc7\u6bcf\u6761\u8fb92\u6b21\uff0c~~\u603b\u8def\u7ebf~~\u54e6\u4e0d\uff0c\u662f\u7ecf\u8fc7\u7684\u8def\u7ebf\u603b\u957f\u4e3a2(n-1)\u3002\n*****\n## **\u7b2c\u4e8c\u6b65**\n\n\u6211\u4eec\u6765\u8003\u8651 k==1 \u7684\u60c5\u51b5\u3002  \n\u5efa\u7acb\u4e00\u6761\u65b0\u8fb9\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u65b0\u5efa\u7684\u8fb9\u90fd\u8981\u3002\n## **\u6070\u597d**     \u7ecf\u8fc7\u4e00\u6b21\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u52a0\u4e0a\u4e00\u6761\u8fb9\u65f6\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u800c\u8fd9\u4e2a\u73af\u4fbf\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u56fe\u5728\u904d\u5386\u65f6\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d\u8d70\u7684\u8fb9\u3002\n\u5982\u56fe\uff08~~\u4e0d\u662f\u5f88~~**\u975e\u5e38**\u4e11\uff09\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/61584.png )  \n\n\u56e0\u4e3a\u8fd9\u4e2a\u73af\u6240\u5e26\u6765\u7684\u91cd\u590d\u8def\u5f84\u7684\u51cf\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u6784\u5efa\u73af\u65f6\u8981\u627e\u5230\u6b64\u65f6\u6811\u4e2d\u6700\u957f\u7684\u94fe\u8fdb\u884c\u6784\u9020\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9898\u4e0a\u7684\u6700\u77ed\u89e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u6765\u63a8\u4e00\u4e0b\u516c\u5f0f\uff1a \n \n`2(n-1)-L+1`   \n\u5982\u679c\u4f60\u5df2\u7ecf\u60f3\u5230\u8fd9\u91cc\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u4f60\u5df2\u7ecf\u6210\u529f\u5730\u62ff\u5230\u4e8630\u5206\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u5982\u4f55AC\u8fd9\u9053\u9898\u3002\n***  \n## **\u7b2c\u4e09\u6b65**\n\u7b2c\u4e00\u6761\u8def\u5efa\u5b8c\u4ee5\u540e\uff0c\u6211\u4eec\u6765\u8003\u8651\u7b2c\u4e8c\u6761\u8def\u3002\u5f53\u7b2c\u4e8c\u6761\u65b0\u8def\uff08u\uff0cv\uff09\u5efa\u7acb\u4e4b\u540e\uff0c\u53c8\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u5f53\u8fde\u4e2a\u73af\u4e0d\u91cd\u53e0\u7684\u65f6\u5019\uff0c\u7b54\u6848\u4f1a\u4e00\u76f4\u7f29\u5c0f\u3002\u4f46\u662f\u5982\u679c\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u5c31\u4f1a\u6709\u4e00\u90e8\u5206\u7684\u8def\u4e0d\u4f1a\u88ab\u5de1\u903b\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ea\u597d\u5c06\u8f66\u91cd\u65b0\u5de1\u903b\u8fd9\u6761\u8fb9\uff0c\u6700\u540e\u8fd4\u56de\u3002\u8fd9\u6b65\u64cd\u4f5c\u6700\u7ec8\u53c8\u4f7f\u90a3\u6761\u8fb9\u91cd\u590d\u7ecf\u8fc7\u4e86\u4e00\u6b21\u3002  \n\u5177\u4f53\u89c1\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/61586.png )\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6700\u77ed\u7684\u8def\u5f84\u3002  \n\u603b\u7ed3\u4e00\u4e0b\u5177\u4f53\u7684\u6b65\u9aa4\uff1a  \n1\u3001\u5148\u5728\u539f\u6811\u4e0a\u627e\u5230\u8be5\u6811\u7684\u76f4\u5f84\uff0c\u8bb0\u4e3aL1\uff0c\u7136\u540e\u5c06\u8fb9\u6743\u6539\u4e3a-1\uff08\u540e\u9762\u4f1a\u89e3\u91ca\u4e3a\u4ec0\u4e48\u662f-1\uff09\u3002  \n2\u3001\u5728\u53d6\u53cd\u8fb9\u6743\u540e\u518d\u6b21\u5bfb\u627e\u8be5\u6811\u7684\u76f4\u5f84\u8bb0\u4e3aL2\u3002  \n3\u3001\u8ba1\u7b97\u7b54\u6848\u3002   \n## **\u516c\u5f0f**\n\u7531\u524d\u9762\u7684\u8bb2\u89e3\u53ef\u63a8\u77e5\uff1a  \n```\nans=2(n-1)-(L1-1)-(L2-1)\n\u5373\nans=2n-L1-L2\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\u5c31\u5341\u5206\u7684\u76f4\u89c2\u4e3aO(n)\u3002  \n***\n\u524d\u9762\u7684\u601d\u8def\u5c31\u8bb2\u89e3\u5230\u8fd9\u91cc\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u8bb2\u4e00\u8bb2\u4ee3\u7801\u5b9e\u73b0\u3002  \n## **\u9996\u5148**\n\u8fd9\u9053\u9898\u7684\u4e00\u4e2a\u6700\u76f4\u89c2\u7684\u8003\u70b9\u2014\u2014\u6811\u7684\u76f4\u5f84  \n\u6240\u4ee5\u4e0b\u9762\u5c31\u4ecb\u7ecd\u4e00\u4e0b\u6811\u7684\u76f4\u5f84\u8fd9\u4e2a\u8003\u70b9\u3002  \n\u6811\u7684\u76f4\u5f84\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6811\u4e2d\u6700\u957f\u7684\u94fe\uff0c\u4e0b\u9762\u5c06\u6709\u4e24\u79cdO(n)\u7684\u65b9\u6cd5\u6765\u6c42\u6811\u7684\u76f4\u5f84\u3002  \n\u80cc\u666f\uff1a\u5047\u8bbe\u6811\u4ee5N\u4e2a\u8282\u70b9N-1\u6761\u8fb9\u4ee5\u65e0\u5411\u56fe\u7684\u5f62\u5f0f\u7ed9\u51fa\u5e76\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002  \n## **\u7b2c\u4e00\u79cd\uff1a\u6811\u5f62DP\u6c42\u6811\u7684\u76f4\u5f84**\n\u6211\u4eec\u7528d[x]\u8868\u793a\u8ddd\u79bb\uff0cf[x]\u5219\u8868\u793a\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002  \n\u4ee3\u7801\u5b9e\u73b0\uff1a  \n```c++\nvoid dp(int x){\n    v[x]=1;\n    for(int i=head[x];i;i=e[i].next){\n        int y=e[i].to;\n        if(v[y])continue;\n        dp(y);\n        ans=max(ans,dis[x]+dis[y]+e[i].w);\n        dis[x]=max(dis[x],dis[y]+e[i].w);\n    }\n}\n```\n\u7528\u6811\u5f62dp\u6765\u6c42\u89e3\u7684\u8bdd\uff0c\u4e00\u4e2a\u5341\u5206\u660e\u663e\u7684\u4f18\u70b9\u5c31\u662f\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u503c\u7684\u95ee\u9898\n***\n## **\u7b2c\u4e8c\u79cd\uff1a\u4e24\u6b21BFS\u6c42\u6811\u7684\u76f4\u5f84**\n\u901a\u8fc7\u4e24\u6b21BFS\u6c42\u51fa\u76f4\u5f84\uff0c\u66f4\u6613\u7b97\u51fa\u76f4\u5f84\u4e0a\u7684\u76f4\u5f84\u4e0a\u7684\u5177\u4f53\u8282\u70b9\u3002   \n\u6b65\u9aa4 \uff1a  \n\u2460\u4ece\u6811\u4e0a\u4efb\u610f\u4e00\u70b9\u51fa\u53d1P\uff0c\u627e\u5230\u4e0e\u5176\u8ddd\u79bb\u6700\u5927\u7684\u70b9M   \n\u2461\u4ece\u70b9M\u51fa\u53d1\uff0c\u627e\u5230\u4e0e\u5176\u8ddd\u79bb\u6700\u5927\u7684\u70b9N   \n\u2462MN\u5373\u4e3a\u6811\u7684\u76f4\u5f84   \n\u4e0b\u9762\u662f\u5177\u4f53\u8bc1\u660e\uff08\u8bc1\u660e\u8fc7\u7a0b\u6458\u81ea\u8001\u5e08ppt\uff09\u3002   \n### \u53cd\u8bc1\u6cd5\uff1a\u5047\u8bbeM\u4e0d\u662f\u76f4\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\uff0cAB\u662f\u6811\u7684\u76f4\u5f84\u3002  \n\u2460 \u5982\u679cP\u662f\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u5982\u56fe\uff0cPM>PB\u5219AP+PM>AP+PB=AB\u8fd9\u4e0eAB\u662f\u76f4\u5f84\u77db\u76fe\u3002\n![](https://cdn.luogu.com.cn/upload/pic/61590.png )  \n\n\u2461-1 \u82e5P\u4e0d\u5728\u76f4\u5f84\u4e0a\uff1aP\u5230M\u8def\u5f84\u4e0eA\u5230B\u8def\u5f84\u6709\u516c\u5171\u7ed3\u70b9TPT+TM>PT+TB\uff0c\u5219TM>TB\uff0c\u6545AT+TM>AT+TB=AB\uff0c\u77db\u76fe  \n![](https://cdn.luogu.com.cn/upload/pic/61591.png )  \n\n\u2461-2 P\u5230M\u7684\u8def\u5f84\u4e0eA\u5230B\u7684\u8def\u5f84\u65e0\u516c\u5171\u7ed3\u70b9PC+CM>PC+CD+BD\uff0c\u5219CM>CD+BD\uff0cCM+CD>BD\u6545CM+CD+AD>BD+AD=AB\uff0c\u77db\u76fe\u3002  \n![](https://cdn.luogu.com.cn/upload/pic/61592.png )   \n\u8fd9\u6837\u4e24\u8fb9BFS\u7684\u6b63\u786e\u6027\u5c31\u8bc1\u660e\u5b8c\u6bd5\u3002  \n\u4ee3\u7801\uff1a   \n\n```c++\nvoid bfs(int x,int ck){\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    queue<int >q;\n    q.push(x);\n    vis[x]=1;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=e[i].next){\n            int y=e[i].to;\n            if(!vis[y]){\n                vis[y]=1;\n                dis[y]=dis[now]+e[i].w;\n                q.push(y);\n                if(ck)f[y]=now;//\u8bb0\u5f55\u7236\u8282\u70b9\uff0c\u4fee\u6539\u65f6\u4f1a\u7528\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(ans<dis[i])ans=dis[i],point=i;\n    }\n}\n```\n\u4e24\u904dBFS\u6c42\u6811\u7684\u76f4\u5f84\u7684\u4f18\u70b9\u5f88\u660e\u663e\uff0c\u4f46\u662f\u7f3a\u70b9\u4e5f\u5f88\u7a81\u51fa\uff0c\u5c31\u662f\u65e0\u6cd5\u5904\u7406\u8d1f\u6743\u503c\u3002  \n\u6240\u4ee5\u6211\u4eec\u5728\u5904\u7406\u8fc7\u7b2c\u4e00\u6b21\u7684\u76f4\u5f84\u540e\u5c06\u6743\u503c\u8d4b\u4e3a\u4e86-1\uff0c\u5c31\u662f\u8fd9\u4e2a\u539f\u56e0\u3002   \n\n\n------------\n\n\u4e0b\u9762\u5c31\u662f\u8fd9\u9053\u9898\u7684AC\u4ee3\u7801\u4e86\n```c\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename type>\nvoid scan(type &x){\n    type f=1;x=0;char s=getchar();\n    while(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n    while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nconst int N=1e5+7;\nstruct node{\n    int to,w,next;\n}e[N*2];\nint head[N],cnt;\nvoid add(int a,int b,int c){\n    e[++cnt].to=b;\n    e[cnt].next=head[a];\n    head[a]=cnt;\n    e[cnt].w=1;\n}\nint dis[N],vis[N],l1,l2,n,k,point,f[N],d[N],v[N];\nint ans=0;\nvoid bfs(int x,int ck){\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    queue<int >q;\n    q.push(x);\n    vis[x]=1;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=e[i].next){\n            int y=e[i].to;\n            if(!vis[y]){\n                vis[y]=1;\n                dis[y]=dis[now]+e[i].w;\n                q.push(y);\n                if(ck)f[y]=now;//\u8bb0\u5f55\u7236\u8282\u70b9\uff0c\u4fee\u6539\u65f6\u4f1a\u7528\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(ans<dis[i])ans=dis[i],point=i;\n    }\n}\nvoid change(int a){//\u4fee\u6539\u8fb9\u6743\u503c\n    while(f[a]){\n        int fa=f[a];\n        for(int i=head[fa];i;i=e[i].next){\n                // e[i].w=-1;\n                if(e[i].to==a){\n                //    e[i].w=e[i^1].w=-1;\n                   e[i].w=-1;\n                   break; \n                }\n        }\n        for(int i=head[a];i;i=e[i].next){\n            if(e[i].to==fa){\n                e[i].w=-1;\n                break;\n            }\n        }\n        a=fa;\n    }\n}\nvoid dp(int x){\n    v[x]=1;\n    for(int i=head[x];i;i=e[i].next){\n        int y=e[i].to;\n        if(v[y])continue;\n        dp(y);\n        ans=max(ans,dis[x]+dis[y]+e[i].w);\n        dis[x]=max(dis[x],dis[y]+e[i].w);\n    }\n\n}\n\nint main(){\n   scan(n);scan(k);\n\t// scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<n;i++){\n        int a;int b;\n       scan(a);scan(b);\n\t\t// scanf(\"%d%d\",&a,&b);\n        add(a,b,1);\n        add(b,a,1);\n    }\n    if(k==1){\n        bfs(1,0);\n        bfs(point,0);\n        printf(\"%d\",2*n-dis[point]-1);\n    }else{\n        bfs(1,0);\n        bfs(point,1);\n        l1=dis[point];\n        change(point);\n        memset(dis,0,sizeof(dis));\n        memset(vis,0,sizeof(vis));\n        ans=0;\n        dp(1);\n        // printf(\"%d\\n\",l1);\n        // printf(\"%d\\n\",ans);\n        printf(\"%d\",2*n-ans-l1);\n    }\n    return 0;\n}\n```\n# \u5e0c\u671b\u7ba1\u7406\u5927\u5927\u901a\u8fc7\u4e00\u4e0b^_^    \n# \u6700\u540e\u5b89\u5229\u4e00\u6ce2[\u535a\u5ba2](https://www.cnblogs.com/xishirujin/)\uff0c\u5e0c\u671b\u5927\u5bb6\u5173\u6ce8\u4e00\u6ce2\u3002",
        "postTime": 1561713734,
        "uid": 103452,
        "name": "\u60dc\u65f6\u5982\u91d1",
        "ccfLevel": 0,
        "title": "\u6811\u7684\u76f4\u5f84&&\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "  \u52a0\u4e00\u6761\u8fb9\u76f8\u5f53\u4e8e\u9009\u4e00\u6761\u6811\u4e0a\u8def\u5f84\u5e76\u52a0\u4ed6\u4eec\u8fde\u63a5\uff0c\u52a0\u4e24\u6761\u8fb9\u76f8\u5f53\u4e8e\u9009\u4e24\u6761\u3002\u5f88\u591a\u9898\u89e3\u4f3c\u4e4e\u76f4\u63a5\u9ed8\u8ba4\u5176\u4e2d\u4e00\u6761\u5fc5\u9009\u76f4\u5f84\u5374\u6ca1\u6709\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\n  \n \u6211\u4eec\u7528\u4e00\u79cd\u4e0d\u9700\u8981\u8003\u8651\u76f4\u5f84\u7684\u529e\u6cd5\u3002\u6ce8\u610f\u5230\u5982\u679c\u9009\u4e86\u4e24\u6761\u8def\u5f84\uff0c\u4ed6\u4eec\u91cd\u590d\u7684\u90e8\u5206\u76f8\u5f53\u4e8e\u6ca1\u6709\u7528\u8fd8\u662f\u8981\u8d70\u4e24\u6b21\uff0c\u6240\u4ee5\u672c\u9898\u76f8\u5f53\u4e8e\u9009\u4e24\u6761\u6811\u4e0a\u8def\u5f84\u4f7f\u4ed6\u4eec\u7684\"\u5f02\u6216\u201d\u8fb9\u6570\u6700\u5927\u3002\n  \n  \u89c2\u5bdf\u5230\u4e24\u6761\u6811\u4e0a\u8def\u5f84\u7684\u76f8\u4ea4\u4e5f\u662f\u4e00\u6bb5\u6811\u4e0a\u8fde\u7eed\u7684\u8def\u5f84\u3002\u6240\u4ee5\u5176\u5b9e\u4e24\u6761\u6811\u4e0a\u8def\u5f84\u7684\u201c\u5f02\u6216\u201d\u53ef\u4ee5\u770b\u6210\u4e24\u6761\u4e0d\u76f8\u4ea4\u7684\u6811\u4e0a\u8def\u5f84\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528DP\u6765\u6c42\u5728\u6811\u4e2d\u9009\u4e24\u6761\u4e0d\u76f8\u4ea4\u8def\u5f84\u7684\u6700\u5927\u957f\u5ea6\u3002\n  \n  \u8fd9\u4e2aDP\u53ef\u4ee5\u770b\u4f5c\u6c42\u6811\u76f4\u5f84DP\u7684\u6269\u5c55\uff0c\u7528$f[x][0-3]$\u8868\u793ax\u5411\u4e0b\u524d\u56db\u6df1\u7684\u8def\u5f84\uff0c\u7528$g[x]$\u8868\u793a\u5728$X$\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u53ef\u4ee5\u9009\u51fa\u7684\u6700\u957f\u8def\u5f84\uff0c\u7528$w[x]$\u8868\u793a\u5728\u4ee5$x$\u4e3a\u6839\u5b50\u6811\u91cc\uff0c\u9009\u4e00\u6761\u4ece$x$\u5411\u4e0b\u7684\u8def\u5f84\u518d\u9009\u53e6\u4e00\u6761\u548c\u5b83\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u7684\u6700\u5927\u53ef\u80fd\u603b\u957f\u5ea6\u3002\n  \n  \u7136\u540e\u6211\u4eec\u53ef\u7528\u4ed6\u4eec\u7ec4\u5408\u51fa\u7b54\u6848\u7684\u5907\u9009\u65b9\u6848\uff0c\u679a\u4e3e$x$\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u7ec4\u5408\u65b9\u6cd5\uff1a\n  \n (1) $f[x][0]+f[x][1]+f[x][2]+f[x][3]$ \n     \n   (2) $g[y_1]+g[y_2]$\uff0c$y_1,y_2$\u662f$x$\u7684\u4e24\u4e2a\u4e0d\u540c\u7684\u513f\u5b50\n   \n   (3) $f[x][i]+f[x][j]+g[y]$,\u5176\u4e2d$y$\u662f$x$\u7684\u4e00\u4e2a\u513f\u5b50\u4e14$f[x][i],f[x][j]$\u4e0d\u6765\u81ea$y$\u8fd9\u68f5\u5b50\u6811\u3002\n   \n   (4) $f[x][i]+w[y]$\uff0c\u5176\u4e2d$y$\u662f$x$\u7684\u4e00\u4e2a\u513f\u5b50\u4e14$f[x][i]$\u4e0d\u6765\u81ea$y$\u8fd9\u68f5\u5b50\u6811\u3002\n   \n   \n   ```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint const N=2e5+1;\nstruct edge{\n\tint from,to,pre;\n}e[N];\nint cnt,n,k,ans,f[N][4],d[N],g[N],w[N],last[N];\nbool comp(int a, int b){\n\treturn d[a]>d[b];\n}\nvoid add(int a, int b){\n\te[++cnt]={a,b,last[a]};\n\tlast[a]=cnt;\n}\nvoid update(int i, int j){\n\tif (d[j]>d[f[i][3]]) f[i][3]=j;\n\tsort(f[i],f[i]+4,comp);\n}\nvoid dfs(int x, int father){\n\tfor (int i=last[x];i;i=e[i].pre)\n\t\tif (e[i].to!=father){\n\t\t\tdfs(e[i].to,x);\n\t\t\tw[x]=max(w[x],w[e[i].to]+1);\n\t\t\td[x]=max(d[x],d[e[i].to]);\n\t\t\tupdate(x,e[i].to);\n\t\t}\n\tw[x]=max(w[x],d[f[x][0]]+d[f[x][1]]+d[f[x][2]]);\n\td[x]++;\n\tfor (int i=last[x];i;i=e[i].pre)\n\t\tif (e[i].to!=father){\n\t\t\tans=min(ans,2*n-2+k-g[e[i].to]-g[x]);\n\t\t\tg[x]=max(g[x],g[e[i].to]);\n\t\t\tif (e[i].to==f[x][0]) {\n\t\t\t\tans=min(ans,2*n-2+k-d[f[x][1]]-d[f[x][2]]-g[e[i].to]);\n\t\t\t\tans=min(ans,2*n-2+k-d[f[x][1]]-w[e[i].to]-1);\n\t\t\t\tw[x]=max(w[x],d[f[x][1]]+g[e[i].to]);\n\t\t\t} else{\n\t\t\t\tans=min(ans,2*n-2+k-d[f[x][0]]-w[e[i].to]-1);\n\t\t\t\tw[x]=max(w[x],d[f[x][0]]+g[e[i].to]);\n\t\t\t\tif (e[i].to==f[x][1]) ans=min(ans,2*n-2+k-d[f[x][0]]-d[f[x][2]]-g[e[i].to]);\n\t\t\t\telse ans=min(ans,2*n-2+k-d[f[x][0]]-d[f[x][1]]-g[e[i].to]);\n\t\t\t}\n\t\t}\n\tg[x]=max(g[x],d[f[x][0]]+d[f[x][1]]);\n\tans=min(ans,2*n-2+k-d[f[x][0]]-d[f[x][1]]-d[f[x][2]]-d[f[x][3]]);\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>k;\n\tans=2*(n-1)+k;\n\tfor (int i=1;i<=n-1;i++){\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tdfs(1,0);\n\tif (k==1){\n\t\tans=2*n-2+k;\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tans=min(ans,2*n-2+k-d[f[i][0]]-d[f[i][1]]);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n} \n```",
        "postTime": 1549657533,
        "uid": 95804,
        "name": "wu3412790",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "# P3629\n\u89e3\u91ca\u8be6\u7ec6\uff0c\u9898\u76ee\u601d\u8def\u548c\u6240\u6709\u6d89\u53ca\u5230\u7684\u7b97\u6cd5\u90fd\u6709\u8bb2\u89e3\u3002\n\n\u4ee3\u7801\u7cbe\u7b80\u6e05\u6670\uff0c\u4e0d\u7528STL\uff0c\u65e0\u538b\u884c\u4ee3\u780159\u884c\u3002(\u6838\u5fc3\u4ee3\u7801\u53ea\u6709\uff1a\u4e24\u6b21 dfs \u517110\u884c\uff0c\u6807\u8bb0\u76f4\u5f84 2\u884c\uff0cdp 10\u884c\uff09\n## \u6838\u5fc3\u7b97\u6cd5\n\n**\u4e24\u6b21dfs\u6c42\u6811\u7684\u76f4\u5f84 + \u6811\u4e0aDP\u6c42\u6811\u7684\u76f4\u5f84 + \u6570\u5b66\u601d\u8003**\n\n## \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\uff0c\u521a\u5f00\u59cb\u8fd9\u662f\u4e00\u9897\u6811\uff0c\u6240\u4ee5\u8b66\u8f66\u8981\u5c06\u6574\u4e2a\u6811\u904d\u5386\u4e00\u904d\u518d\u56de\u5230\u8d77\u70b9\uff0c\u8fb9\u90fd\u4e3a1,\u8d70\u7684\u8def\u7a0b\u662f $2*(n-1)$ \u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7b97\u51fa\u4fee\u5efa\u65b0\u7684\u9053\u8def\u53ef\u4ee5\u8ba9\u8b66\u8f66\u5c11\u8d70\u7684\u8fb9\u6570\uff0c\u51cf\u4e00\u4e0b\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u9898\u76ee\u4e2d\u7684 K \u53ea\u80fd\u662f 1 \u6216 2 \uff0c\u6240\u4ee5\u6211\u4eec\u5148\u6765\u770b k=1 \u7684\u60c5\u51b5\u3002\n\n\u4fee\u4e86\u4e00\u6761\u9053\u8def\u540e\uff0c\u8fd9\u68f5\u6811\u4e2d\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af\uff08\u4e5f\u5c31\u662f\u57fa\u73af\u6811\uff0c\u4e0d\u77e5\u9053\u4e5f\u6ca1\u5173\u7cfb\uff09\uff0c\u53cd\u6b63\u73b0\u5728\u5b83\u6709\u4e00\u4e2a\u73af\uff0c\u800c\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u7ecf\u8fc7\u65b0\u4fee\u7684\u9053\u8def\u4e00\u6b21\uff080 \u548c 2 \u90fd\u4e0d\u884c\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u8981\u5c06\u8fd9\u4e2a\u73af\u8d70\u4e00\u904d\u3002\u5047\u8bbe\u8fd9\u4e2a\u73af\u4e2d\u9664\u53bb\u65b0\u52a0\u7684\u8fb9\u957f\u5ea6\u4e3a L \uff0c\u90a3\u4e48\u6211\u4eec\u5c11\u8d70\u7684\u957f\u5ea6\u5c31\u662f L \uff08\u539f\u6765\u8981\u8d70\u4e24\u904d\uff0c\u73b0\u5728\u53ea\u8981\u4e00\u904d\uff09\u3002\u518d\u52a0\u4e0a\u65b0\u7684\u8fb9\uff0c\u56e0\u6b64\u8981\u8d70\u7684\u8def\u5c31\u662f $2*(n-1)-L+1$ \uff0c\u663e\u7136\u5f53 L \u6700\u5927\u65f6\u8fd9\u5c31\u662f\u7b54\u6848\u3002\u4e00\u9897\u6811\u4e2d\u6700\u957f\u7684\u4e00\u6761\u8def\u5f84\u5c31\u662f\u5b83\u7684\u76f4\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u53ea\u8981\u6c42\u51fa\u5b83\u7684\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e24\u6b21dfs\u6c42\u6811\u7684\u76f4\u5f84\uff08\u539f\u56e0\u4e0b\u9762\u4f1a\u8bb2\uff09\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u77e5\u9053\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u8fdb\u800c\u786e\u5b9a\u6574\u4e2a\u76f4\u5f84\u7684\u8def\u7ebf\u3002\n\n**\u77e5\u9053dfs\u6c42\u6811\u7684\u76f4\u5f84\u7684\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206**\n\n\u6811\u7684\u76f4\u5f84\u6709\u4e00\u4e2a\u6027\u8d28\uff1a**\u8ddd\u79bb\u6811\u4e0a\u4e00\u4e2a\u70b9\u6700\u8fdc\u7684\u70b9\u5fc5\u5b9a\u662f\u76f4\u5f84\u7684\u7aef\u70b9\uff08\u4e4b\u4e00\uff09**\u3002\n\n\u8bc1\u660e\uff1a\u53cd\u8bc1\u6cd5\u3002\u5047\u8bbe $a,b$ \u662f\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $i$ \uff0c \u5047\u5982\u8282\u70b9 $c$ \u8ddd\u79bb $i$ \u6bd4$a,b$ \u8ddd\u79bb $i$ \u90fd\u8981\u8fdc\uff0c\u90a3\u4e48 $c$ \u4e00\u5b9a\u53ef\u4ee5\u548c $a,b$ \u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u6784\u6210\u4e00\u6761\u66f4\u957f\u7684\u8def\u5f84\uff0c\u4e0e\u5047\u8bbe\u4e0d\u7b26\u3002\u6027\u8d28\u6210\u7acb\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u6b21 dfs \u6bd4\u8f83\u6df1\u5ea6\uff0c\u6c42\u51fa\u4e86\u76f4\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u518d\u4ee5\u7aef\u70b9\u4e3a\u6839\u6765\u4e00\u6b21 dfs \uff0c\u6807\u8bb0\u8def\u5f84\u5e76\u8bb0\u5f55\u957f\u5ea6\u3002\n\n\u4e24\u6b21dfs\u4ee3\u7801\u57fa\u672c\u4e00\u6837\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21\u8981\u5904\u7406 $fa$ \u6570\u7ec4\u3002$fa$ \u6570\u7ec4\u7528\u6765\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u3002\n\n```cpp\n#define N 100010\nint head[N],ne[N<<1],to[N<<1],size[N<<1];//\u90bb\u63a5\u8868\u5b58\u8fb9,size[ ] \u5b58\u8fb9\u6743\uff0c\u4e00\u5f00\u59cb\u90fd\u662f 1\nint fa[N],de[N];//de[ ] \u5b58\u6df1\u5ea6\n```\n\n```cpp\nvoid dfs(int x,int pre,int z,int t){//x\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0cpre \u662f\u5b83\u7684\u7236\u4eb2\uff0cz\u7684\u8fb9\u6743\uff0ct\u8868\u793a\u7b2c\u51e0\u6b21 dfs \u3002\n\tde[x]=de[pre]+z;\n\tif(t==2) fa[x]=pre;//\u7b2c\u4e8c\u6b21\u8dd1dfs\u8bb0\u5f55\u76f4\u5f84 \n\tfor(int i=head[x];i;i=ne[i]){\n\t\tint y=to[i],z=size[i];\n\t\tif(y==pre) continue;\n\t\tdfs(y,x,z,t);\n\t}\n\tif(de[x]>de[leaf]) leaf=x;//leaf \u5b58\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u6613\u77e5\u5b83\u4e00\u5b9a\u662f\u53f6\u8282\u70b9\n}\n```\n\n\u6b64\u65f6 k=1 \u7684\u60c5\u51b5\u5c31\u89e3\u51b3\u4e86\uff0c\u4f60\u53ef\u4ee5\u62ff\u5230 30\u5206 \u3002\n\n------------\n\u5efa\u7acb\u7b2c\u4e8c\u6761\u9053\u8def\u540e\uff0c\u53c8\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u82e5\u4e24\u4e2a\u73af\u4e0d\u91cd\u53e0\uff0c\u6211\u4eec\u53ea\u8981\u50cf\u521a\u624d\u90a3\u6837\u5904\u7406\u5c31\u597d\u4e86\u3002\u4f46\u5982\u679c\u91cd\u53e0\u5462\uff1f\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\uff0c\u65b0\u8fb9\u5fc5\u987b\u88ab\u8d70\u4ec5\u4e00\u6b21\uff0c\u6240\u4ee5\u91cd\u53e0\u7684\u8fb9\u5fc5\u987b\u8d70\u4e24\u904d\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qezn9ak7.png)\n\n\u5982\u56fe\uff0c\u6211\u4eec\u4ece\u7ea2\u8272\u70b9\u5f00\u59cb\u8d70\uff0c\u9ec4\u8272\u8fb9\u4e3a\u65b0\u4fee\u5efa\u7684\u8fb9\uff0c\u7ea2\u8272\u8fb9\u4e3a\u91cd\u53e0\u8fb9\uff0c\u6613\u77e5\u7ea2\u8fb9\u8981\u8d70\u4e24\u6b21\u3002\n\u6240\u4ee5\u5728\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5c06\u91cd\u53e0\u8fb9\u51cf\u53bb\u6216\u662f\u4e0d\u9009\u91cd\u53e0\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06**\u7b2c\u4e00\u6b21\u6c42\u7684\u76f4\u5f84\u53d6\u53cd**\u8fd9\u6837\u5982\u679c\u9009\u5230\u4e86\u539f\u76f4\u5f84\u4e0a\u7684\u8fb9\u5c31\u76f8\u5f53\u4e8e\u51cf\u53bb\u4e86\u8fd9\u90e8\u5206,\u4fdd\u8bc1\u4e86\u7b54\u6848\u6b63\u786e\u3002**\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u521a\u624d\u9700\u8981\u7528dfs\u6c42\u76f4\u5f84\u7684\u539f\u56e0\u3002** \n\n\u5c06\u8fb9\u6743\u53d6\u53cd\u540e\u65b0\u7684\u6811\u4e0a\u518d\u6c42\u76f4\u5f84\uff0c\u8bbe\u957f\u5ea6\u4e3a L2\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $2*(n-1)-(L1-1)-(L2-1)=2*n-L1-L2$\n\n**\u5982\u4f55\u6807\u8bb0\u521a\u624d\u6c42\u51fa\u7684\u76f4\u5f84\u5462\uff1f**\n\u6211\u4eec\u53ea\u8981\u4ece\u521a\u624d\u6c42\u51fa\u7684 leaf \uff08\u7aef\u70b9\uff09\u5f00\u59cb\u5f80\u4e0a\u6807\u8bb0\u76f4\u5f84\u4e2d\u7684\u8282\u70b9\u5c31\u597d\u4e86\u3002\n\n```cpp\nfor(int i=leaf;i;i=fa[i]) v[i]=1;\n```\n\n\u5982\u679c\u78b0\u5230\u4e24\u4e2a\u70b9\u90fd\u88ab\u6807\u8bb0\u7684\u60c5\u51b5\uff0c\u5c31\u5c06\u8fd9\u6761\u8fb9\u8fb9\u6743\u53d6\u53cd\u3002\n\n\u56e0\u4e3adfs\u4e0d\u80fd\u5904\u7406\u8d1f\u8fb9\u6743\u60c5\u51b5\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u6c42\u76f4\u5f84\u9700\u8981\u7528 DP \u3002\u77e5\u9053DP\u6c42\u6811\u7684\u76f4\u5f84\u7684\u540c\u5fd7\u5c31\u53ef\u4ee5\u7ed3\u675f\u8fd9\u7bc7\u9898\u89e3\u4e86\uff08\u80fd\u7ed9\u4e2a\u8d5e\u5c31\u66f4\u597d\u4e86\uff09\u3002\n\n\u6211\u4eec\u5148\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\uff08\u6bd4\u59821\u53f7\u70b9\uff09\uff0c\u628a\u8fd9\u4e2a\u65e0\u6839\u6811\u5f53\u6210\u6709\u6839\u6811\uff0c $d[x]$ \u8868\u793a\u4ece x \u51fa\u53d1\u8d70\u5411\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u53ef\u4ee5\u8d70\u5230\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u663e\u7136\u53f6\u5b50\u8282\u70b9 $i$ \u7684 $d[i] = 0$  \uff0c\u5b83\u7236\u4eb2\u8282\u70b9 $j$ \u7684 $d[j]=max(d[j],d[i]+edge_{i,j})$ \u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u5730\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684 $d$ \u3002\u7136\u540e\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f\u4e24\u4e2a\u70b9\u7684 $d$ \u4e4b\u548c\u52a0\u4e0a\u4ed6\u4eec\u76f4\u5f84\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f $d[x]+d[y]+edge_{x,y}$ \uff0c\u5f53\u6211\u4eec\u9012\u5f52\u5730\u5904\u7406\u65f6\uff0c\u5047\u5982 x \u662f\u7236\u8282\u70b9\uff0c\u5904\u7406\u5230 y \u65f6\u80af\u5b9a\u5df2\u7ecf\u5c06\u524d\u9762\u7684\u51e0\u4e2a\u8282\u70b9\u5904\u7406\u8fc7\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u5f84\u66f4\u65b0$ans$ \u3002\u4e5f\u5c31\u662f $ans=max(ans,d[x]+d[y]+size[i])$ \uff08\u6211\u7528 size \u5b58\u8fb9\u6743\uff09\n\nDP\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\nvoid dp(int x,int pre){//pre \u662f\u7236\u4eb2 \n\tfor(int i=head[x];i;i=ne[i]){\n\t\tint y=to[i];\n\t\tif(y==pre) continue;//\u65e0\u6839\u6811 \n\t\tif(v[x]&&v[y]) size[i]=-1;//\u4e24\u70b9\u6709\u6807\u8bb0\uff0c\u8fb9\u6743\u53d8\u8d1f \n\t\tdp(y,x);//\u9012\u5f52\u5904\u7406 \n\t\tL2=max(L2,d[x]+d[y]+size[i]);//\u66f4\u65b0\u7b54\u6848 \n\t\td[x]=max(d[x],d[y]+size[i]);\n\t} \n}\n```\n\n## \u5b8c\u6574AC\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvoid read(int &x){\n\tint f=1;x=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=x*10+ch-'0';ch=getchar();}\n\tx*=f;\n}\n#define N 100010\nint n,k,tot,leaf=1,leaf1=1,L1,L2; \nint head[N],ne[N<<1],to[N<<1],size[N<<1];\nint fa[N],de[N];\nint v[N],d[N];\nvoid add(int x,int y,int z){\n\tto[++tot]=y;\n\tne[tot]=head[x];\n\tsize[tot]=z;\n\thead[x]=tot;\n}\nvoid dfs(int x,int pre,int z,int t){//x\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0cpre \u662f\u5b83\u7684\u7236\u4eb2\uff0cz\u7684\u8fb9\u6743\uff0ct\u8868\u793a\u7b2c\u51e0\u6b21 dfs \u3002\n\tde[x]=de[pre]+z;\n\tif(t==2) fa[x]=pre;//\u7b2c\u4e8c\u6b21\u8dd1dfs\u8bb0\u5f55\u76f4\u5f84 \n\tfor(int i=head[x];i;i=ne[i]){\n\t\tint y=to[i],z=size[i];\n\t\tif(y==pre) continue;\n\t\tdfs(y,x,z,t);\n\t}\n\tif(de[x]>de[leaf]) leaf=x;//leaf \u5b58\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u6613\u77e5\u5b83\u4e00\u5b9a\u662f\u53f6\u8282\u70b9\n}\nvoid dp(int x,int pre){//pre \u662f\u7236\u4eb2 \n\tfor(int i=head[x];i;i=ne[i]){\n\t\tint y=to[i];\n\t\tif(y==pre) continue;//\u65e0\u6839\u6811 \n\t\tif(v[x]&&v[y]) size[i]=-1;//\u4e24\u70b9\u6709\u6807\u8bb0\uff0c\u8fb9\u6743\u53d8\u8d1f \n\t\tdp(y,x);//\u9012\u5f52\u5904\u7406 \n\t\tL2=max(L2,d[x]+d[y]+size[i]);//\u66f4\u65b0\u7b54\u6848 \n\t\td[x]=max(d[x],d[y]+size[i]);\n\t} \n}\nint main(){\n\tread(n),read(k);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(x,y,1),add(y,x,1);\n\t}\n\tdfs(1,0,0,1);\n\tdfs(leaf,0,0,2);\n\tL1=de[leaf];\n\tif(k==1){\n\t\tprintf(\"%d\",2*(n-1)-L1+1);\n\t\treturn 0;\n\t}\n\tfor(int i=leaf;i;i=fa[i]) v[i]=1;\n\tdp(1,0);\n\tcout<<n*2-L1-L2;\t\n\treturn 0;\n}\n\n\n```\n\n\u6709\u4ec0\u4e48\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u6216\u5efa\u8bae\u53ef\u4ee5\u8bc4\u8bba\u6216\u79c1\u4fe1\u6211\uff0c\u5982\u679c\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u7ed9\u4e2a\u8d5e\u5457\u3002",
        "postTime": 1595920884,
        "uid": 235658,
        "name": "llzzxx712",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u6211\u6765\u4e00\u4efd\u9898\u89e3\u5427\u3002\n\n\u7f51\u4e0a\u5f88\u591a\u8be5\u9898\u7684\u9898\u89e3\u5ffd\u7565\u4e86\u4e00\u79cd\u60c5\u51b5\uff0c\u4f46\u5374\u6ca1\u6709\u53bb\u8bc1\u660e\u8be5\u60c5\u51b5\u4e0d\u9700\u8981\u8ba1\u7b97\u3002\n\n\u6211\u5728\u4e0b\u9762\u4f1a\u63d0\u5230\u3002\n\n\n\u9996\u5148\uff0ck=1\u7684\u65f6\u5019 \u5373\u627e\u51fa\u6811\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\u96be\u70b9\u5728k=2\u7684\u65f6\u5019\n\n\u7b2c\u4e00\u6761\u8fb9\u80af\u5b9a\u662f\u8fde\u76f4\u5f84\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6761\u8fb9\u600e\u4e48\u8fde\uff1f\n\n\u56e0\u4e3a\u8981\u6c42\u5fc5\u987b\u7ecf\u8fc7\u65b0\u8fde\u7684\u8fb9\uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u672c\u6765\u53ea\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21\u7684\u8fb9\uff0c\u5728\u8fde\u4e86\u7b2c\u4e8c\u6761\u8fb9\u4e4b\u540e\u5c31\u5fc5\u987b\u518d\u8d70\u4e00\u6b21\uff0c\u6211\u4eec\u79f0\u8be5\u4e8b\u4ef6\u4e3a\u4e8b\u4ef6A\u3002\n\n\n\u6211\u4eec\u753b\u56fe\u5f97\u51fa\u5982\u4e0b\u7ed3\u8bba\n\n\u8bbe\u6211\u4eec\u9009\u7684\u7b2c\u4e8c\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a s,t\n\n\u5982\u679c s,t\u5747 \u4e0d\u5728\u76f4\u5f84\u4e0a\u4efb\u610f\u4e00\u70b9\uff08\u96641\u5916)\u7684\u5b50\u6811\u5185 \u5219\u4e0d\u4f1a\u51fa\u73b0\u4e8b\u4ef6A\n\n\u5982\u679cs\u6216t\u5728\u76f4\u5f84\u4e0a\u4efb\u610f\u4e00\u70b9\uff08\u96641\u5916)\u7684\u5b50\u6811\u5185 \u5219\u4f1a\u51fa\u73b0\u4e8b\u4ef6A\n\n\u6211\u4eec\u76f4\u63a5\u53bb\u8003\u8651s\u548ct\u5747\u5728\u76f4\u5f84\u7684\u5b50\u6811\u4e2d\u7684\u60c5\u51b5\uff1a\n\n\u753b\u56fe\u53ef\u77e5\uff0c\u7b2c\u4e8c\u6761\u8fb9\u8fde\u540e \u8981\u91cd\u590d\u7ecf\u8fc7\u7684\u8fb9\u6709\u4e24\u79cd\u9009\u62e9\n\n\u7b2c\u4e00\u79cd\u662fs\u5230t\u7684\u90a3\u6761\u94fe\n\n\u7b2c\u4e8c\u79cd\u662f s\u5f80\u4e0b\u8d70\uff0c\u7ecf\u8fc7\u65b0\u8fde\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u518d\u5f80\u4e0a\u8d70\uff0c\u4ece\u800c\u5230\u8fbet\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u76f4\u5f84\u4e0a\u7684\u8fb9\u8d4b\u4e0a\u6743\u503c -1\uff0c\u5176\u4ed6\u8fb9\u6743\u503c\u4e3a1 \u7136\u540e\u627e\u51fa\u6b64\u65f6\u6811\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u53c8\u8be5\u5982\u4f55\u505a\u5462\n\n\u6211\u4eec\u4e0d\u53ef\u80fd\u8fde\u8fb9\u540e\u5bf9\u56fe\u8dd1dp\uff0c\u8fd9\u662f\u5f88\u96be\u505a\u7684\uff0c\u4e5f\u4e0d\u53ef\u80fd\u65ad\u8fb9\u3002\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679cs\u548ct\u662f\u6309\u7167\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8d70\u7684\uff0c\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u635f\u5931 s\u5230\u76f4\u5f84\u9876\u7aef\u7684\u957f\u5ea6+t\u5230\u76f4\u5f84\u7684\u53e6\u4e00\u9876\u7aef\u7684\u957f\u5ea6+1\u7684\u6536\u76ca\uff0c\n\n\u83b7\u5f97 s\u7684\u5b50\u6811\uff08\u4e0d\u5305\u62ec\u76f4\u5f84\u6240\u5728\u5b50\u6811\uff09\u4e2d\u6700\u957f\u94fe\u957f\u5ea6+t\u7684\u5b50\u6811\uff08\u4e0d\u5305\u62ec\u76f4\u5f84\u6240\u5728\u5b50\u6811\uff09\u4e2d\u6700\u957f\u94fe\u957f\u5ea6\n\n\u7a81\u7136\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff1a  \u56e0\u4e3as\u548ct\u662f\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u6240\u4ee5\n\ns\u5230\u76f4\u5f84\u9876\u7aef\u7684\u957f\u5ea6>=s\u7684\u5b50\u6811\uff08\u4e0d\u5305\u62ec\u76f4\u5f84\u6240\u5728\u5b50\u6811\uff09\u4e2d\u6700\u957f\u94fe\u957f\u5ea6\n\nt\u5230\u76f4\u5f84\u9876\u7aef\u7684\u957f\u5ea6>=t\u7684\u5b50\u6811\uff08\u4e0d\u5305\u62ec\u76f4\u5f84\u6240\u5728\u5b50\u6811\uff09\u4e2d\u6700\u957f\u94fe\u957f\u5ea6\n\n\u8fd9\u662f\u76f4\u5f84\u7684\u6027\u8d28\uff0c\u65e0\u9700\u5728\u6b64\u8bc1\u660e\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u8bdd\u6536\u76ca\u662f\u8d1f\u7684\uff01\u8fd8\u4e0d\u5982\u8fde\u4e2a\u81ea\u73af\uff01\n\n\u6240\u4ee5\uff0c\u60c5\u51b5\u4e8c\u65e0\u9700\u8003\u8651\uff01\n\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u5706\u6ee1\u5730\u89e3\u51b3\u4e86\u3002\n\n\u9898\u89e3\u505a\u6cd5\uff1a\n\n1.\u627e\u51fa\u6811\u7684\u76f4\u5f84\n\n2.\u5c06\u76f4\u5f84\u4e0a\u7684\u8fb9\u8d4b\u503c\u4e3a-1\uff0c\u5176\u4ed6\u8fb9\u4e3a1\uff0c\u518d\u627e\u76f4\u5f84\n\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define o 200100\nusing namespace std;\nqueue<int> q;\nint head[o],nxt[o*2],point[o*2],weight[o*2],f[o],deep[o],father[o];\nbool vis[o];\nint tot=1,n,k,ui,vi,zoom,cnt;\nvoid addedge(int x,int y){\n    tot++;nxt[tot]=head[x];head[x]=tot;point[tot]=y;weight[tot]=1;\n    tot++;nxt[tot]=head[y];head[y]=tot;point[tot]=x;weight[tot]=1;\n}\nint solve(int root){\n    memset(vis,0,sizeof(vis));\n    father[root]=0;\n    vis[root]=true; \n    deep[root]=0;\n    int ans=root;\n    q.push(root);\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        for(int tmp=head[now];tmp;tmp=nxt[tmp]){\n            int v=point[tmp];\n            if(!vis[v]){\n                father[v]=now;\n                deep[v]=deep[now]+1;\n                if(deep[v]>deep[ans])ans=v;\n                q.push(v);\n                vis[v]=true;\n            }\n        }\n    }\n    return ans;\n}\nvoid sign(int now){\n    for(int tmp=head[now];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        if(v!=father[now]){\n            if(vis[now]&&vis[v])\n                weight[tmp]=weight[tmp^1]=-1;\n            sign(v);\n        }\n    }\n}\nvoid dfs(int now){\n    int maxnum=0;\n    for(int tmp=head[now];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        if(v!=father[now]){\n            dfs(v);\n            zoom=max(zoom,maxnum+f[v]+weight[tmp]);\n            maxnum=max(maxnum,f[v]+weight[tmp]);\n        }\n    }\n    zoom=max(zoom,maxnum);\n    f[now]=maxnum;\n}\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<n;i++){\n        scanf(\"%d%d\",&ui,&vi);\n        addedge(ui,vi);\n    }\n    int s,t;\n    s=solve(1);\n    t=solve(s);\n    solve(1);\n    memset(vis,0,sizeof(vis));\n    if(deep[s]<deep[t])swap(s,t);\n    vis[s]=vis[t]=true;\n    while(deep[s]>deep[t]){\n        s=father[s];\n        vis[s]=true;\n        cnt++;\n    }\n    while(s!=t){\n        s=father[s];\n        t=father[t];\n        vis[s]=vis[t]=true;    \n        cnt+=2;\n    }\n    if(k==1){\n        printf(\"%d\\n\",(n-1)*2+1-cnt);\n        return 0;\n    }\n    if(cnt==n-1){\n        printf(\"%d\\n\",n+1);\n        return 0;\n    }\n    sign(1);\n    dfs(1);\n    printf(\"%d\\n\",(n-1)*2+2-cnt-zoom);\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1508420513,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u9047\u5230\u8fd9\u79cd\u9898\u5f53\u7136\u9009\u62e9\u624b\u73a9\u6570\u636e\u5566\n\n\u6211\u4eec\u53d1\u73b0\uff1a\u5bf9\u4e8e\u521d\u59cb\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u5f97\u7ecf\u8fc7\u4e24\u6b21\uff0c\u5f53\u8fde\u51fa\u4e00\u4e2a\u73af\u65f6\uff0c\u73af\u4e0a\u7684\u8fb9\u5168\u90fd\u53ea\u7ecf\u8fc7\u4e86\u4e00\u6b21\u3002\n\n\u90a3\u4e48k=1\u768430\u5206\u5c31\u62ff\u5230\u4e86\uff0c\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n------------\nk=2\u65f6\uff0c\u7f51\u4e0a\u5927\u591a\u6570\u7684\u505a\u6cd5\u662f\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u7f6e-1\u518d\u6c42\u4e00\u904d\u76f4\u5f84\uff0c\u6211\u63d0\u4f9b\u4e00\u79cd\u5927\u540c\u5c0f\u5f02\u5374\u9ebb\u70e6\u4e00\u70b9\u7684\u505a\u6cd5\uff08\u53ef\u80fd\u5bf9\u6211\u6765\u8bf4\u6bd4\u8f83\u597d\u60f3\u5427\uff09\n\n\u5bf9\u94fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u4ee5\u5b83\u4e3a\u6839\u505a\u4e00\u904d\u6811\u7684\u76f4\u5f84\uff0c\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u7edf\u8ba1\u51fa\u8fd9\u9897\u5b50\u6811\u7684\u76f4\u5f84\u548c\u5b83\u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n\u76f4\u5f84\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\uff0c\u4f46\u8fd9\u6837\u5e76\u4e0d\u5168\uff0c\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u4e00\u79cd\u60c5\u51b5\n\n![](http://m.qpic.cn/psb?/V14VFGnz4fbJRr/n5Y4Jss*Wk2dztsomYqzSm2pX0hIQKSIOgRNPvyzsDw!/b/dC4BAAAAAAAA&bo=oQL3AKEC9wADCSw!&rf=viewer_4)\n\n\u9ec4\u94fe\u4e3a\u76f4\u5f84\uff0c\u800c~~\u7d2b~~\u84dd\u94fe\u4e3a\u7b2c\u4e8c\u6b21\u8fde\u51fa\u7684\u73af\u3002\n\n\u6700\u5927\u6df1\u5ea6\u5c31\u5728\u8fd9\u65f6\u5019\u7528\u4e00\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u626b\u63cf\u4e00\u904d\u76f4\u5f84\uff0c\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5f53\u524d\u6700\u4f18\u6df1\u5ea6\uff08\u8bb0\u5f97\u51cf\u53bb\u539f\u672c\u5728\u76f4\u5f84\u4e0a\u7684\u8fb9\uff09\uff0c\u66f4\u65b0\u7b54\u6848\u5373\u53ef\n\n[\u9732\u8fed\u6708\u55b5~~](http://www.cnblogs.com/ppprseter/)\n\n\u53c2\u8003\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\nint max(int x,int y){return x>y?x:y;}\nconst int N=100010;\nint head[N],to[N<<1],next[N<<1],F[N],cnt,dis[N],mx,mxl,l,r,n,k,q[N][2],is[N],f[N];\nvoid add(int u,int v)\n{\n    to[++cnt]=v;next[cnt]=head[u];head[u]=cnt;\n}\nvoid dfs1(int now,int len,int fa)\n{\n    if(len>mxl)\n    {\n        l=now;\n        mxl=len;\n    }\n    for(int i=head[now];i;i=next[i])\n    {\n        int v=to[i];\n        if(!is[v]&&fa!=v)\n            dfs1(v,len+1,now);\n    }\n}\nvoid dfs2(int now,int len,int fa)\n{\n    if(mx<len)\n    {\n        r=now;\n        mx=len;\n    }\n    for(int i=head[now];i;i=next[i])\n    {\n        int v=to[i];\n        if(!is[v]&&fa!=v)\n        {\n            f[v]=now;\n            dfs2(v,len+1,now);\n        }\n    }\n}\nvoid get_d(int s)\n{\n    mx=0,mxl=0,l=0,r=0;\n    dfs1(s,0,0);\n    is[s]=0;\n    dfs2(l,0,0);\n    is[s]=1;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    int u,v;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add(u,v),add(v,u);\n    }\n    get_d(1);\n    is[1]=0;\n    int L=l,R=r,D=mx,ans=0;\n    if(k>1)\n    {\n        int now=R;\n        while(now)\n        {\n            is[now]=1;\n            F[now]=f[now];\n            now=f[now];\n        }\n        for(int i=1;i<=n;i++)\n            if(is[i])\n            {\n                get_d(i);\n                dis[i]=mxl;\n                ans=max(ans,mx);\n            }\n        now=R;\n        int cntt=1,ll=1,rr=0;\n        memset(q,-0x3f,sizeof(q));\n        while(now)\n        {\n            if(ll<=rr)\n                ans=max(ans,q[ll][0]-cntt+q[ll][1]+dis[now]);\n            while(ll<=rr&&dis[now]>=q[ll][0]-cntt+q[ll][1]) ll++;\n            q[++rr][0]=dis[now],q[rr][1]=cntt;\n            cntt++;\n            now=F[now];\n        }\n    }\n    ans+=D;\n    printf(\"%d\\n\",(n-1<<1)+k-ans);\n    return 0;\n}\n\n```",
        "postTime": 1530169378,
        "uid": 63727,
        "name": "ButterflyDew",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u86ee\u6709\u610f\u601d\u7684\uff0c\u53ef\u4ee5\u6765\u770b\u770b\u3002\n\n\u9898\u76ee\u91cc\u8bf4\uff0c\u6211\u4eec\u6700\u540e\u8981**\u56de\u5230\u8b66\u5bdf\u5c40**\uff0c\u6240\u4ee5\u663e\u7136\uff0c\u6bcf\u4e00\u6761\u8def\u9700\u8981\u8dd1\u4e24\u904d\u3002\n\n\u5f53 $k=1$ \u65f6\uff0c\u6211\u4eec\u6309\u7167\u9898\u76ee\u8981\u6c42\u5efa\u4e00\u6761\u8def\uff0c\u4e5f\u5c31\u662f\u5efa\u51fa\u4e00\u4e2a\u73af\u3002\u4f60\u5982\u679c\u8981\u5728\u73af\u4e0a\u5de1\u903b\u5e76\u4e14\u56de\u5230\u539f\u70b9\u7684\u8bdd\uff0c\u6bcf\u6761\u8fb9\u53ea\u9700\u8981\u8d70\u4e00\u6b21\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8fde\u63a5\u54ea\u4e24\u70b9\u5462\uff1f\n\n\u6211\u4eec\u80af\u5b9a\u60f3\u8ba9\u73af\u957f\u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u5c31\u5728\u76f4\u5f84\u4e24\u7aef\u5efa\u54af\u3002\n\n`ans=(n-1)<<1-d+1`\u3002\uff08`d`\u4e3a\u76f4\u5f84\uff0c`+1`\u52a0\u7684\u662f\u65b0\u5efa\u8fb9\u957f\uff09\n\n\u73b0\u5728\u4f60\u5df2\u7ecf\u6709\u4e8630pts\u3002\n\n\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b $k=2$ \u65f6\u7684\u60c5\u51b5\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5efa\u4e24\u4e2a\u73af\u3002\n\n\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1. \u4e24\u73af\u6709\u91cd\u53e0\u90e8\u5206\u3002\n\n   \u5c31\u50cf\u6837\u4f8b\u56fe(c)\uff0c\u4e24\u73af\u91cd\u53e0\u90e8\u52061-3-5-8\uff0c\u957f\u5ea6\u4e3a3\uff1b\u8f66\u5b50\u8fd8\u8981\u8dd1\u6b63\u597d\u4e00\u904d1-8\u8fd9\u6761\u65b0\u8def\uff0c\u5c31\u5bfc\u81f41-3-5-8\u8981\u591a\u8d70\u4e00\u904d\uff0c\u82b1\u8d39\u589e\u52a0\u4e864\uff0c\u8fd8\u4e0d\u5982\u5efa\u4e2a\u81ea\u73af\u3002\n   \n   \u90a3\u6211\u4eec\u600e\u4e48\u8ba1\u7b97\u591a\u5efa\u4e00\u6761\u8def\u5e94\u8be5\u89c1\u5728\u54ea\u513f\uff0c\u548c\u4e4b\u540e\u82b1\u8d39\u53d8\u5316\u91cf\u5462\uff1f\n   \n   \u9996\u5148\uff0c\u8fd8\u662f\u8981\u5efa\u5728\u6811\u7684\u76f4\u5f84\u4e24\u7aef\uff0c\u4e0d\u8fc7\u6811\u7684\u8fb9\u6743\u8981\u6539\u4e00\u4e0b\u4e86\u2014\u2014\n   \n   \u4f17\u6240\u5468\u77e5\uff0c$x-(-y)=x+y$\u3002\n   \n   \u90a3\u6211\u4eec\u5c31\u628a**\u53ef\u80fd\u7684\u91cd\u53e0\u90e8\u5206**\uff0c\u4e5f\u5c31\u662f\u539f\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u53d6\u53cd\uff08`1->-1`\uff09\uff0c\u7136\u540e\u518d\u6c42\u4e00\u904d\u6811\u7684\u76f4\u5f84\uff0c\u7edf\u8ba1\u6700\u540e\u7b54\u6848\u65f6`ans=((n-1)<<1)-d1-d2+2`\uff0c`d1`\u4e3a\u539f\u6811\u76f4\u5f84\uff0c`d2`\u4e3a\u53d6\u53cd\u540e\u76f4\u5f84\uff0c`+2`\u52a0\u7684\u662f\u65b0\u5efa\u4e24\u6761\u8fb9\u957f\u5ea6\u3002\n   \n   \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e24\u73af\u91cd\u53e0\u5c3d\u91cf\u5c11\uff0c\u5e76\u4e14\u7edf\u8ba1\u7b54\u6848\u65f6\u4e24\u73af\u91cd\u53e0\u90e8\u5206\u5728`d1`\u4e2d\u7684\u8fb9\u6743\u5c06\u4f1a\u88ab`d2`\u4e2d\u5bf9\u5e94\u7684\u8d1f\u8fb9\u6743\u52a0\u56de\u6765\u3002\n\n2. \u4e24\u73af\u65e0\u91cd\u53e0\u90e8\u5206\u3002\n\n   \u65e2\u7136\u6ca1\u91cd\u53e0\uff0c\u90a3\u8fb9\u6743\u53d6\u53cd\u5bf9\u7b54\u6848\u7edf\u8ba1\u65e0\u5f71\u54cd\uff08\u5012\u662f\u5bf9\u9009\u76f4\u5f84\u6709\u5f71\u54cd\uff09\uff0c\u76f4\u63a5\u6309\u4e0a\u9762\u65b9\u6cd5\u505a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\uff1a\n\n1. \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\u65f6\u53ea\u80fd\u7528dp\u6c42\u76f4\u5f84\u3002\n\n2. \u6df1\u641c/\u5e7f\u641c\u8981\u641c\u4e24\u904d\uff0c\u4e24\u904d\u4e2d\u95f4\u4e00\u5b9a\u8981\u628a\u201c\u662f\u5426\u8bbf\u95ee\u8fc7\u201d`book`\u6570\u7ec4\uff0c\u201c\u6807\u8bb0\u8def\u5f84\u201d`fa`\u6570\u7ec4\u6e05\u7a7a\u3002\n\n3. \u65e0\u5411\u8fb9\u8981\u5b58\u4e24\u904d\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u53d6\u53cd\u65f6\u628a\u4e24\u4e2a\u65b9\u5411\u90fd\u53d6\u53cd\n\n\u8fd8\u6709\uff0c\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u9898\u89e3\u91cc\u90fd\u7528dfs\u5199\u76f4\u5f84\uff1f\n\n\u6211\u559c\u6b22bfs,\u65e0\u9012\u5f52\u4e0d\u7206\u6808\u5e38\u6570\u5c0f\u3002\n\n```cpp\n#include <iostream>\n#include <utility>\n#include <queue>\n#include <cstring>\n#define rgi register int\nusing namespace std;\nconst int maxn=100005;\nconst int maxm=maxn<<1;\nint n,m,k,ans,d[maxn],pairs[maxm],fa[maxn];\n//pairs\u6807\u8bb0\u53cd\u5411\u8fb9\u7f16\u53f7\uff0cfa\u6807\u8bb0\u8def\u5f84\uff0cd\u4e3adp\u7528\u6570\u7ec4\nint u[maxm],v[maxm],w[maxm],fst[maxn],nxt[maxm];//\u90bb\u63a5\u8868\nbool book[maxn];\nvoid dp(int x)//\u7801\u957f\u8d85\u77ed\uff0c\u4f60\u503c\u5f97\u62e5\u6709\n{\n\tbook[x]=1;\n\tfor(rgi i=fst[x];i;i=nxt[i])\n\t{\n\t\tint y=v[i];\n\t\tif(book[y])\n\t\t\tcontinue;\n\t\tdp(y);\n\t\tans=max(ans,d[x]+d[y]+w[i]);\n\t\td[x]=max(d[x],d[y]+w[i]); \n\t}\n}\npair<int,int> bfs(int s)\n//first\u8fd4\u56de\u76f4\u5f84\u957f\u5ea6\uff0csecond\u8fd4\u56de\u76f4\u5f84\u4e00\u7aef\n//\u6ce8\u610f\u8fd9\u91cc\u53ea\u6709\u4e00\u904dbfs\uff0c\u4f46\u6c42\u4e00\u6b21\u76f4\u5f84\u8981\u5199\u4e24\u904d\n{\n\tpair<int,int> ret;\n\tret.first=0,ret.second=0;\n\tqueue< pair<int,int> > que;\n\tque.push(make_pair(s,0));\n\tbook[s]=1;\n\twhile(!que.empty())\n\t{\n\t\tint x=que.front().first,val=que.front().second;\n\t\tif(val>ret.first)\n\t\t{\n\t\t\tret.first=val;\n\t\t\tret.second=x;\n\t\t}\n\t\tque.pop();\n\t\tfor(rgi i=fst[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=v[i];\n\t\t\tif(book[y])\n\t\t\t\tcontinue;\n\t\t\tfa[y]=i;\n            //\u6807\u8bb0\u6765\u8def\uff0c\u5728\u8fb9\u6743\u4e3a1\u7684\u524d\u63d0\u4e0bbfs\u641c\u5230\u4e86\u5c31\u662f\u6700\u4f18\u89e3\uff0c\u5927\u80c6\u653e\u5fc3\u6807\u8bb0\n\t\t\tbook[y]=1;\n\t\t\tque.push(make_pair(y,val+w[i]));\n\t\t}\n\t}\n\treturn ret;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin>>n>>k;\n\tm=n-1;\n\tfor(rgi i=1;i<=m;++i)\n\t{\n\t\tcin>>u[i]>>v[i];\n\t\tw[i]=1;\n\t\tnxt[i]=fst[u[i]];\n\t\tfst[u[i]]=i;\n\t\trgi j=i+m;\n\t\tu[j]=v[i],v[j]=u[i];\n\t\tw[j]=1;\n\t\tnxt[j]=fst[u[j]];\n\t\tfst[u[j]]=j;\n\t\tpairs[i]=j,pairs[j]=i;\n\t}\n\tif(k==1)\n\t{\n\t\tdp(1);\n\t\tcout<<(m<<1)-ans+1<<endl;\n\t}\n\telse\n\t{\n\t\tpair<int,int> tans=bfs(1);//\u539f\u6811\u76f4\u5f84\u7b2c\u4e00\u6b65\n\t\tmemset(book,0,sizeof(book));\n\t\tmemset(fa,0,sizeof(fa));//\u591a\u6d4b\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea\n\t\ttans=bfs(tans.second);//\u6c42\u76f4\u5f84\uff1a\u786e\u5b9a\u4e00\u7aef\u540e\u786e\u5b9a\u53e6\u4e00\u7aef\n\t\tfor(rgi i=fa[tans.second];i;i=fa[u[i]])\n\t\t\tw[i]=-1,w[pairs[i]]=-1;//\u53d6\u53cd\n\t\tmemset(book,0,sizeof(book));//\u4e24\u884c\u6cea\n\t\tdp(1);\n\t\tcout<<(n<<1)-tans.first-ans<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572760550,
        "uid": 78302,
        "name": "gznpp",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f$:$\n\n\u7ed9\u4f60\u4e00\u68f5\u6811,\u4f60\u53ef\u4ee5\u65b0\u5efa$k$\u6761\u8fb9,\u6c42\u65b0\u5efa\u8fb9\u540e\u81f3\u5c11\u5c06\u6240\u6709\u8fb9\u7ecf\u5386\u4e00\u6b21\u7684\u6700\u5c0f\u4ee3\u4ef7,\u6240\u6709\u8fb9\u6743\u503c\u5747\u4e3a$1$,\u4e14\u65b0\u52a0\u5165\u7684\u8fb9\u53ea\u80fd\u7ecf\u8fc7\u521a\u597d\u4e00\u6b21.$n<=100000,1<=k<=2.$\n\n\u9996\u5148,\u5728\u4e0d\u52a0\u8fb9\u7684\u60c5\u51b5\u4e0b,\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u77e5,\u7531\u4e8e\u8981\u56de\u5230\u8d77\u70b9,\u6bcf\u6761\u8fb9\u5fc5\u987b\u7ecf\u8fc7\u4e24\u6b21,\u5373\u8fdb\u5165\u5f53\u524d\u5b50\u6811\u65f6\u4e00\u6b21,\u51fa\u5b50\u6811\u65f6\u4e00\u6b21,\u6b64\u65f6\u5de1\u903b\u8def\u7ebf\u957f\u5ea6\u4e3a$2*(n-1)$,\u5982\u56fe$:$\n\n![](https://i.loli.net/2019/08/21/eNj9pV5ZFCaLunA.png)\n\n\u800c\u5f53\u6211\u4eec\u8981\u65b0\u5efa\u4e00\u6761\u8fb9\u65f6,\u7531\u4e8e\u6240\u6709\u7684\u8fb9\u53ea\u9700\u8981\u7ecf\u8fc7\u81f3\u5c11\u4e00\u6b21\u5373\u53ef,\u90a3\u4e48\u65b0\u5efa\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u53ea\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21,\u8bbe\u4e24\u7aef\u70b9\u8def\u5f84\u957f\u5ea6\u4e3a$l_1$,\u90a3\u4e48\u73b0\u5728\u7684\u5de1\u903b\u8def\u7ebf\u957f\u5ea6\u4e3a$2*(n-1)-l_1+1$,\u800c\u6b64\u65f6\u4e3a\u4e86\u6700\u5927\u5316\u51cf\u5c11\u7684\u957f\u5ea6,\u6b64\u65f6\u5728\u6811\u7684\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u95f4\u4fee\u5efa\u4e00\u6761\u8fb9\u6700\u4f18.\n\n\u800c\u5f53\u6211\u4eec\u4fee\u5efa\u7b2c\u4e8c\u6761\u8fb9\u65f6,\u5982\u679c\u6211\u4eec\u8fd9\u6b21\u4fee\u5efa\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u8def\u5f84\u4e0e\u4e0a\u6b21\u7684\u8def\u5f84\u6709\u91cd\u590d,\u90a3\u4e48\u7531\u4e8e\u4e24\u4e2a\u73af\u4e0a\u7684\u6bcf\u6761\u8def\u5f84\u90fd\u8981\u7ecf\u8fc7,\u90a3\u4e48\u73af\u4e0a\u7684\u91cd\u590d\u90e8\u5206\u53c8\u4f1a\u8ba1\u7b97\u4e24\u6b21.\n\n$($\u5728\u4e0a\u56fe\u7684\u57fa\u7840\u4e0a,\u5728$2-6$,$1-4$\u4e4b\u95f4\u52a0\u4e86\u4e00\u6761\u8fb9,\u7eff\u8272\u4e3a\u53ea\u7ecf\u8fc7\u4e00\u6b21\u7684\u8fb9,\u7ea2\u8272\u4e3a\u7ecf\u8fc7\u4e24\u6b21\u7684\u7684\u8fb9$)$\n\n![](https://i.loli.net/2019/08/21/UXwjfJlgAoteMHB.png)\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5c06\u539f\u6765\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u53d8\u4e3a$-1$,\u8868\u793a\u9009\u62e9\u8fd9\u6761\u8def,\u4f1a\u4f7f\u7b2c\u4e00\u6761\u8def\u51cf\u5c11\u7684\u904d\u5386\u4f1a\u589e\u52a0\u4e00\u6b21\u904d\u5386,\u7136\u540e\u5728\u627e\u4e00\u6761\u6811\u7684\u76f4\u5f84\u5373\u53ef.\n\n\u4e0d\u8fc7,\u6b64\u65f6\u7531\u4e8e\u6709\u8d1f\u8fb9\u6743,\u6240\u4ee5\u8981\u7528$dp$\u6c42\u6811\u7684\u76f4\u5f84,\u6b64\u65f6\u4ee3\u7801\u5982\u4e0b$:$\n\n```cpp\n\ninline void dfs_2(int g,int f){\n\tfor(int i=head[g],v;i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(v==f)continue;;\n\t\tdfs_2(v,g);\n\t\tl2=max(dis[v]+dis[g]+w[i],l2);\n\t\tdis[g]=max(dis[g],dis[v]+w[i]);\n\t}\n\treturn ;\n}\n```\n\n$dis[g]$\u8868\u793a\u5728\u4ee5$g$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d,$g$\u6240\u80fd\u5230\u8fbe\u7684\u6700\u957f\u8def\u5f84,$l_2$\u5373\u6b64\u65f6\u7684\u76f4\u5f84,\u5bf9\u4e8e$g$\u7684\u5b50\u8282\u70b9$v$,\u53ef\u4ee5\u4e0e$g$\u7684\u53e6\u5916\u7684\u5b50\u8282\u70b9\u4e4b\u95f4\u5f62\u6210\u4e00\u6761\u8def\u5f84,\u7528$v$\u4e0a\u7684\u6700\u5927\u8def\u5f84\u4e0e\u5df2\u7ecf\u904d\u5386\u8fc7\u7684\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u6765\u66f4\u65b0$l_2$,\u7136\u540e\u5728\u66f4\u65b0$dis[g]$\u5373\u53ef.\n\n\u6700\u7ec8\u7b54\u6848$ans=(n-1)*2-l_1+1-l_2+1$,$(n-1)*2$\u662f\u539f\u672c\u9700\u8981\u8d70\u7684\u8fb9\u6570,\u800c$l_1$\u662f\u7b2c\u4e00\u6761\u8fb9\u53ef\u4ee5\u51cf\u5c11\u7684\u8fb9\u6570,\u7531\u4e8e\u65b0\u52a0\u4e86\u4e00\u6761\u8fb9,\u6240\u4ee5\u9700\u8981\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9,\u5bf9\u4e8e\u7b2c\u4e8c\u6761\u8fb9\u540c\u7406.\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b$:$\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nconst int N=1e5+2;\nint to[N<<1],nex[N<<1],head[N],w[N<<1],dis[N],n,k,tt,pos,st,ed;\nint fa[N],vis[N];\ninline void add(int x,int y){\n\tto[++tt]=y,nex[tt]=head[x],w[tt]=1,head[x]=tt;\n\treturn ;\n}\ninline void dfs(int g,int f){\n\tif(dis[g]>dis[pos]||pos==st)pos=g;//\u66f4\u65b0\u76f4\u5f84\u7aef\u70b9;\n\tfa[g]=f;\n\tfor(int i=head[g],v;i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(v==f)continue;\n\t\tdis[v]=dis[g]+w[i];\n\t\tdfs(v,g);\n\t}\n\treturn ;\n}\ninline void change(int g,int f){\n\tfor(int i=head[g],v;i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(v==f)continue;\n\t\tif(vis[v])w[i]=-1,w[((i-1)^1)+1]=-1;//\u94fe\u8868\u52a0\u8fb9\u65f6,\u53cc\u5411\u8fb9\u662f\u76f8\u90bb\u7684,\u6240\u4ee5\u5c06\u8fb9\u6743\u53d8\u4e3a-1\u76f4\u63a5\u7528\u6210\u5bf9\u53d8\u6362\u5c06\u53cc\u5411\u8fb9\u66f4\u6539;\n\t\tchange(v,g);\n\t}\n\treturn ;\n}\nint l2;\ninline void dfs_2(int g,int f){\n\tfor(int i=head[g],v;i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(v==f)continue;;\n\t\tdfs_2(v,g);\n\t\tl2=max(dis[v]+dis[g]+w[i],l2);//\u66f4\u65b0\u7b2c\u4e8c\u6b21\u7684\u76f4\u5f84;\n\t\tdis[g]=max(dis[g],dis[v]+w[i]);//\u66f4\u65b0dis[g];\n\t}\n\treturn ;\n}\nint main(){\n\tcin>>n>>k;\n\tint x,y;\n\tfor(int i=1;i<n;++i)cin>>x>>y,add(x,y),add(y,x);\n\tpos=1,dis[1]=0,st=1,dfs(st,0),st=pos;\n\tpos=st,fa[st]=0,dis[st]=0,dfs(st,0),ed=pos;//\u627e\u76f4\u5f84;\n\tint l1=dis[ed];\n\tint p=ed;\n\twhile(p)vis[p]=1,p=fa[p];//\u6807\u8bb0\u76f4\u5f84\u4e0a\u7684\u70b9;\n\tchange(st,0);\n\tmemset(dis,0,sizeof dis);\n\tdfs_2(st,0);\n\tif(k==1)l2=1;\n\tcout<<n*2-l1-l2<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1566376225,
        "uid": 124890,
        "name": "bugaile",
        "ccfLevel": 0,
        "title": "P3629 [APIO2010] \u5de1\u903b"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5728\u7d2b\u9898\u5e76~~\u4e0d\u7b97\u96be~~\uff0c\u6700\u521d\u8003\u8bd5\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u9053\u9898\u4e4b\u540e~~\u6211\u592a\u6c34\uff0c\u53ea\u6709k==1\u7684\u5206\u6570~~\u3002\n\u9996\u5148\u6765\u5206\u6790\u4e00\u4e0bk==1\u7684\u60c5\u51b5\uff0c\u5f53k==1\u65f6\u5019\uff0c\u52a0\u4e00\u6761\u8fb9\uff0c\u7701\u53bb\u7684\u76f8\u5f53\u4e8e\u4e24\u70b9\u539f\u6765\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\uff0c\u4e3a\u4e86\u7701\u53bb\u7684\u5c3d\u53ef\u80fd\u591a\uff0c\u6211\u4eec\u8003\u8651\u6700\u957f\u7684\u8def\u5f84\uff08~~\u5356\u5173\u5b50~~\uff09\n\n\u6700\u957f\u7684\u8def\u5f84\u662f\u4ec0\u4e48\uff1f\uff1f\uff1f**\u76f4\u5f84**\uff01\n\n\u6240\u4ee5\uff0c\u5f53k=1\u65f6\uff0c\u95ee\u9898\u5c31\u7b80\u5355\u4e86\uff08\u867d\u7136\u6211\u5f53\u65f6\u6253\u4e86\u5f88\u4e45\uff09\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u5728\u76f4\u5f84\uff0c\u5728\u5176\u4e0a\u5efa\u8fb9\u3002\u82e5\u76f4\u5f84\u957fl\uff0c\u7b54\u6848\u5c31\u662f2(n-1)-l+12(n\u22121)\u2212l+1\u3002\n\u4e8e\u662fk==1\u5c31\u8fd9\u6837~~\u4e0d~~\u8f7b\u677e\u5730\u89e3\u51b3\u4e86\u3002\n\u7136\u540e\u3002\u3002\u3002\u7531\u4e8e\u4e0d\u600e\u4e48\u4f1a\u6811\u7684\u76f4\u5f84\uff0c\u5c31\u6253\u4e86\u4e2adfs\n\u7279\u522b\u4e11\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define FOR(i,n,m) for(int i=n;i<=m;++i)\n#define FR(i,n,m) for(int i=n;i>=m;--i)\nconst int N=100010;\nint n,h[N<<1],cnt;\nstruct node {\n\tint next,to,w;\n} e[N<<1];\n#define add(u,v,w) e[++cnt]= (node){h[u],v,w};h[u]=cnt;\n#define n(i) e[i].next\n#define t(i) e[i].to\n#define QXX(u) for(int i=h[u],v;v=t(i),i;i=n(i))\nusing namespace std;\nint f[N],_max,k;\n\nvoid dfs(int u,int fa,int w) {\n\tf[u]=w;\n\tQXX(u) if(v!=fa) dfs(v,u,w+e[i].w);\n}\n\nint main() {\n\tscanf(\"%d\",&n);\n\tFOR(i,1,n-1) {\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w) add(v,u,w)\n\t}\n\tdfs(1,0,0);_max=0;\n\tFOR(i,1,n) if(f[i]>_max) _max=f[i],k=1;\n\tdfs(k,0,0);\n\tFOR(i,1,n) if(f[i]>_max) _max=f[i];\n\tcout<<_max;\n\treturn 0;\n}\n```\n\uff08\u8fd9\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u6811\u7684\u76f4\u5f84\uff09\u3002\n**but**\uff0c\u60b2\u4f24\u7684\u662f\uff0c\u8fd8\u6709k=2\u7684\u5b58\u5728\uff0c\u90a3\u4e48k=2\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\u53ef\u4ee5Tarjan\u5427...\u542c\u5927\u4f6c\u4eec\u8bb2\u7684...\u4f46\u662f\u6211\u4e0d\u4f1a...\n\u53ef\u4ee5\u4fee\u6539\u6743\u503c\uff0c\u4fee\u6539\u4e3a0\u5427...\u4f46\u662f\u6211\u7528\u7684\u524d\u5411\u661f\u4e5f\u4e0d\u4f1a\u4fee\u6539...\n\u7136\u540e\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\u60f3\u5230\u4e86bfs\uff0c\u641c\u51fa\u7b2c\u4e00\u6b21\u7ecf\u8fc7\u7684\u70b9\uff0c\u8fdb\u884c\u6807\u8bb0...\u592a\u590d\u6742...\u7136\u540e\u60f3\u5230\u4e86\u5728\u7b2c\u4e00\u6b21\u8dd1\u6811\u7684\u76f4\u5f84\u7684\u7b2c\u4e8c\u6b21dfs\u4e2d\u5bf9\u7236\u4eb2\u505a\u4e00\u4e0b\u6807\u8bb0\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5904\u7406\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200010;\nint head[N],to[N],nextt[N],tot = 1,k,n;\nint maxx,p,q,fa[N],vis[N],ans,sum,f[N];\nvoid add(int x,int y) {\n\tto[tot] = y;\n\tnextt[tot] = head[x];\n\thead[x] = tot++;\n}\nvoid dfs1(int u,int faa,int len) {\n\tif (len > maxx) {\n\t\tmaxx = len;\n\t\tp = u;\n\t}\n\tfor (int i = head[u]; i; i = nextt[i]) {\n\t\tint v = to[i];\n\t\tif (v == faa)\n\t\t\tcontinue;\n\t\tdfs1(v,u,len + 1);\n\t}\n}\nvoid dfs2(int u,int faa,int len) {\n\tif (len > maxx) {\n\t\tmaxx = len;\n\t\tq = u;\n\t}\n\tfa[u] = faa; //\u8bb0\u5f55\u7236\u4eb2\n\tfor (int i = head[u]; i; i = nextt[i]) {\n\t\tint v = to[i];\n\t\tif (v == faa)\n\t\t\tcontinue;\n\t\tdfs2(v,u,len + 1);\n\t}\n}\n\nvoid dfs3(int u,int faa) {\n\tfor (int i = head[u]; i; i = nextt[i]) {\n\t\tint v = to[i];\n\t\tif (v == faa)\n\t\t\tcontinue;\n\t\tdfs3(v,u);\n\t\tint temp = 1;\n\t\tif (vis[u] && vis[v])\n\t\t\ttemp = -1;\n\t\tans = max(ans,f[u] + f[v] + temp);\n\t\tf[u] = max(f[u],f[v] + temp);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tfor (int i = 1; i < n; i++) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs1(1,0,0);\n\tmaxx = 0;\n\tdfs2(p,0,0);\n\tif (k == 1) {\n\t\tprintf(\"%d\\n\",2 * (n - 1) - maxx + 1);\n\t\treturn 0;\n\t}\n\twhile (q != 0) { //\u6807\u8bb0\n\t\tvis[q] = 1;\n\t\tq = fa[q];\n\t}\n\tdfs3(1,0);\n\tsum = 2 * (n - 1) - maxx + 1;\n\tprintf(\"%d\\n\",sum - ans + 1);\n\n\treturn 0;\n}\n\n```\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u5f88~~\u8f7b\u677e~~\u7684\u89e3\u51b3\u4e86",
        "postTime": 1541509862,
        "uid": 119086,
        "name": "zijinjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u89c9\u5f97\u6b64\u524d\u7684\u9898\u89e3\u4e0d\u591f\u4e25\u8c28\uff0c\u4e8e\u662f\u6211\u8865\u5145\u4e00\u4e0b\u65b0\u7684\u8bc1\u660e\u601d\u8def\uff1a\n\n\u5f53k==1\u65f6\uff0c\u5f88\u5bb9\u6613\u5bdf\u89c9\u5230\u8fde\u63a5\u6700\u957f\u7684\u8def\u5f84\u7684\u4e24\u7aef\u5373\u53ef\u3002\n\n\u5f53k==2\u65f6\uff0c\u9700\u8981\u627e\u5230\u8fb9\u6743\u548c\u6700\u5927\u7684\u4e24\u6761\u8def\u5f84\u3002\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u5e76\u4e0d\u662f\u5206\u60c5\u51b5\u53bb\u8ba8\u8bba\u7684\uff0c\u4e24\u4e2a\u73af\u662f\u5426\u76f8\u4ea4\u8bf4\u660e\u4e0d\u4e86\u4ec0\u4e48\uff0c\u65e0\u6cd5\u8bc1\u660e\u6bcf\u6b21\u9009\u62e9\u76f4\u5f84\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u6b63\u786e\u7684\u3002\n\n\u6b63\u786e\u7684\u8bc1\u660e\u601d\u8def\u5e94\u8be5\u662f\u7528\u7f51\u7edc\u6d41\u4e2d\u7528\u5230\u7684\u589e\u5e7f\u8def\u6765\u89e3\u91ca\u3002\n\n\u5373\u5f53\u6211\u4eec\u9009\u62e9\u4e00\u6761\u6700\u957f\u7684\u8def\u5f84\u4e4b\u540e\uff0c\u628a\u8fd9\u6761\u8def\u5f84\u7684\u4e0a\u7684\u8fb9\u6743\u5168\u90e8\u6807\u8bb0\u4e3a\u8d1f\uff0c\u610f\u5473\u7740\uff1a\u518d\u6b21\u9009\u62e9\u8fd9\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u76f8\u5f53\u4e8e\u4e4b\u524d\u4e0d\u9009\u8fd9\u6761\u8fb9\u3002\n\n\u8fd9\u6837\u4ee5\u540e\uff0c\u6bcf\u6b21\u6c42\u76f4\u5f84\u5c31\u662f\u53bb\u627e\u80fd\u591f\u4f7f\u5f97\u8def\u5f84\u548c\u589e\u52a0\u7684\u6700\u591a\u7684\u65b9\u6848\u3002\n\n\u5f88\u660e\u663e\uff0c\u5982\u679c\u56fe\u4e2d\u5df2\u6709\u4e00\u6761\u76f4\u7ebf\uff0c\u518d\u753b\u4e00\u6761\u4e0a\u53bb\uff0c\u628a\u4e24\u76f4\u7ebf\u91cd\u5408\u90e8\u5206\u64e6\u53bb\uff0c\u4f9d\u7136\u662f\u65b0\u7684\u4e24\u6761\u76f4\u7ebf\u3002\n\n\u4f46\u5982\u679c\u56fe\u4e2d\u5df2\u6709\u4e24\u6761\u76f4\u7ebf\uff0c\u518d\u753b\u4e00\u6761\uff0c\u5c31\u53ef\u80fd\u6709\u56db\u6761\uff0c\u6240\u4ee5\u4e0d\u80fd\u4fdd\u8bc1\u7528\u4e09\u6761\u76f4\u7ebf\u80fd\u591f\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u8fd9\u4e5f\u662f1<=k<=2\u7684\u539f\u56e0\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#define INF 0x3f3f3f3f\n#define maxn 100010\nusing namespace std;\n\nint n,k,sz,fa[maxn],ans,pos;\nstruct pii\n{\n\tint f,s;\n}arr[maxn];\nstruct edge\n{\n\tint from,to,value,next;\n}err[2*maxn];\n\nint front[maxn];\nvoid add(int a,int b,int c)\n{\n\terr[++sz].from=a;\n\terr[sz].to=b;\n\terr[sz].value=c;\n\terr[sz].next=front[a];\n\tfront[a]=sz;\n}\n\nvoid dfs(int u)\n{\n\tfor (int i=front[u];i!=-1;i=err[i].next)\n\t{\n\t\tint v=err[i].to;\n\t\tif (fa[u]==v) continue;\n\t\tfa[v]=u;\n\t\tdfs(v);\n\t\tint temp=arr[v].f+err[i].value;\n\t\tif (temp>arr[u].f)\n\t\t{\n\t\t\tarr[u].s=arr[u].f;\n\t\t\tarr[u].f=temp;\n\t\t} else if (temp>arr[u].s)\n\t\t{\n\t\t\tarr[u].s=temp; \n\t\t}\n\t\tif (arr[u].f+arr[u].s>arr[pos].f+arr[pos].s) pos=u;\n\t}\n}\n\nint vis;\n\nvoid update(int u,int deep)\n{\n\tfor (int i=front[u];i!=-1;i=err[i].next)\n\t{\n\t\tint v=err[i].to;\n\t\tif (vis==v || fa[u]==v) continue;\n\t\tif (deep-1==arr[v].f)\n\t\t{\n\t\t\tif (u==pos) vis=v;\n\t\t\terr[i].value=-err[i].value;\n\t\t\tupdate(v,deep-1);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tcin >> n >>k;\n\tmemset(fa,0,sizeof(fa));\n\tmemset(front,-1,sizeof(front));\n\tsz=ans=0;\n\tfor (int i=0;i<n-1;i++)\n\t{\n\t\tint a,b;\n\t\tcin >> a >> b;\n\t\tadd(a,b,1);\n\t\tadd(b,a,1);\n\t}\n\tfor (int i=0;i<k;i++)\n\t{\t\n\t\tmemset(arr,0,sizeof(arr));\t\n\t\tpos=0;\n\t\tdfs(1);\n\t\tif (pos==0) continue;\n\t\tans+=arr[pos].f+arr[pos].s; \n\t\tvis=0;\n\t\tupdate(pos,arr[pos].f);\n\t\tupdate(pos,arr[pos].s);\n\t}\n\tcout << 2*(n-1)-ans+k << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1586608951,
        "uid": 320329,
        "name": "\u5c71\u86d9or\u5c71\u5154",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zgjjj.github.io/)\n\n# \u9898\u76ee\u94fe\u63a5\n\n[P3629 [APIO2010]\u5de1\u903b](https://www.luogu.org/problemnew/show/P3629)\n\n# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6709$n$\u4e2a\u70b9\u548c$n - 1$\u6761\u8fb9\uff0c**\u65e0\u91cd\u8fb9\u548c\u81ea\u73af**\uff0c\u8fb9\u957f\u90fd\u4e3a$1$\uff0c\u7ed9\u5b9a\u6e90\u70b9$1$\uff0c\u65b0\u5efa$k$\u6761\u9053\u8def\uff0c\u8981\u6c42\u4ece\u6e90\u70b9\u51fa\u53d1\uff0c\u6bcf\u6761\u9053\u8def**\u5fc5\u987b**\u7ecf\u8fc7**\u81f3\u5c11\u4e00\u6b21**\uff0c\u4e14**\u65b0\u5efa\u7684\u9053\u8def\u5fc5\u987b\u4ec5\u7ecf\u8fc7\u4e00\u6b21**\uff0c\u6c42\u53ef\u80fd\u7684\u65b0\u5efa\u9053\u8def\u7684\u65b9\u6848\uff0c\u4f7f**\u904d\u5386\u8def\u5f84\u6700\u77ed**\u3002\n\n\n# \u89e3\u9898\u601d\u60f3\n\n\u66b4\u529b\u5c31\u4e0d\u8bb2\u4e86\uff0c\u5e94\u8be5\u90fd\u80fd\u60f3\u5230\u3002\n\n\u6211\u4eec\u76f4\u63a5\u8003\u8651$100\\%$\u7684\u6570\u636e\u3002\n\n\u6ce8\u610f\u539f\u9898\u4e2d\u7684$1\\le k \\le 2$\uff0c\u6211\u4eec\u8003\u8651**\u5206\u7c7b\u8ba8\u8bba**\u3002\n\n## \u5148\u6765\u8003\u8651$k == 1$\u7684\u60c5\u51b5\u3002\n\n\u5728`k == 1`\u65f6\uff0c\u8fd9\u9053\u9898\u548c[\u8349\u9274\u5b9a](https://www.luogu.org/problemnew/show/P3119)\u6709\u70b9\u50cf\uff0c\u4f46\u662f\u8bfb\u5b8c\u9898\u76ee\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e24\u9053\u9898\u7684\u65b9\u5411\u662f\u76f8\u53cd\u7684\uff0c\u8981\u6c42\u4e5f\u4e0d\u540c\u3002\n\n\u90a3\u8981\u600e\u4e48\u505a\u5462\uff1f\n\n\u5148\u6765\u770b\u9898\u76ee\uff1a\n\n>  \u6709$n$\u4e2a\u70b9\u548c$n - 1$\u6761\u8fb9\uff0c**\u65e0\u91cd\u8fb9\u548c\u81ea\u73af**\n\n\u8fd9\u53e5\u8bdd\u544a\u8bc9\u6211\u4eec\uff0c\u9898\u4e2d\u7684\u56fe\u5b9e\u8d28\u4e0a\u662f\u4e00\u9897**\u65e0\u6839\u6811**\u3002\n\n\u770b\u5230\u9898\u76ee\u4e2d\u63cf\u8ff0\u7684**\u65b0\u9053\u8def**\u751a\u81f3\u53ef\u4ee5\u662f**\u81ea\u73af**\uff08\u9898\u610f\u7b80\u8ff0\u4e2d\u6ca1\u5199\uff09\uff0c\u6211\u4eec\u5148\u6765\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n\u5f53\u65b0\u9053\u8def\u662f\u4e00\u4e2a\u81ea\u73af\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u5b83\u6765\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u3002\u800c\u53c8\u56e0\u9898\u76ee\u8981\u6c42\uff0c\u65b0\u9053\u8def\u5fc5\u987b\u7ecf\u8fc7\u4e00\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u4f1a\u5728\u65b0\u9053\u8def\u4e0a\u6d6a\u8d39$1$\u5de1\u903b\u8ddd\u79bb\uff0c\u5982\u56fe\uff1a\uff08\u8fd9\u662f**\u6837\u4f8b1**\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/60199.png)\n\n\u6839\u636e`DFS`\u7684\u601d\u60f3\uff0c\u6211\u4eec\u8981\u60f3\u904d\u5386\u9014\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u9700\u8981\u8bbf\u95ee\u6bcf\u4e00\u6761\u8fb9\u4e24\u6b21\uff08\u8bbf\u95ee\u4e00\u6b21\uff0c\u56de\u6eaf\u4e00\u6b21\uff09\u3002\u53ef\u4ee5\u5f97\u5230\u5de1\u903b\u8ddd\u79bb\u4e3a$2 \\times (8 - 1)  = 14$\u3002\n\n\u5982\u679c\u6211\u4eec\u6dfb\u52a0\u7684\u65b0\u9053\u8def\u4e3a\u8282\u70b9$2$\u7684\u81ea\u73af\uff0c\u6211\u4eec\u5c31\u4f1a\u5728\u8bbf\u95ee\u8282\u70b9$2$\u65f6\u88ab**\u5f3a\u5236**\u7ecf\u8fc7\u65b0\u9053\u8def\u4e00\u6b21\uff0c\u4f46\u662f\u81ea\u73af\u8bbf\u95ee\u5b8c\u540e\uff0c\u4f9d\u7136\u8981\u4ece$2$\u56de\u6eaf\u81f3$3$\uff0c\u56e0\u6b64\u6dfb\u52a0**\u4efb\u610f\u7684\u81ea\u73af**\u90fd\u4ec5\u4f1a\u4f7f**\u6700\u5c0f\u8bbf\u95ee\u8ddd\u79bb\u53d8\u5927**\uff0c\u820d\u5f03\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5728**\u4e24\u4e2a\u4e0d\u540c\u7684\u8282\u70b9\u4e4b\u95f4**\u8fde\u8fb9\u3002\n\n\u5728\u4e00\u68f5\u6811\u4e0a\u8fde\u4e00\u6761\u8fb9\u7684\u8bdd\uff0c\u539f\u6811\u5c31\u4f1a\u53d8\u6210\u4e00\u9897**\u57fa\u73af\u6811**\u3002\n\n\u5982\u56fe\uff1a\u8fde\u63a5\u4e86$7,2$\u4e24\u70b9\u3002\n![](https://i.loli.net/2019/06/06/5cf87f5b6abe427205.png)\n\n\u90a3\u4e48\u5982\u679c\u5fc5\u987b\u7ecf\u8fc7\u65b0\u5efa\u9053\u8def\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u7ecf\u8fc7**\u57fa\u73af\u6811\u7684\u73af**\uff0c\u8fd9\u6837\uff0c\u73af\u4e0a\u7684\u9053\u8def\u90fd\u53ea\u9700\u8981**\u904d\u5386\u4e00\u6b21**\uff08\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u73af\u6765\u56de\u5230\u67d0\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u904d\u5386\u5b8c\u73af\u540e**\u76f4\u63a5\u56de\u6eaf**\uff0c\u800c\u73af\u4e0a\u7684\u8fb9\u5c31\u4e0d\u9700\u8981\u518d\u589e\u52a0\u56de\u6eaf\u65f6\u7684\u8d39\u7528\uff09\u3002\u4e8e\u662f\u8003\u8651\u8ba9\u8fd9\u4e2a\u73af\u7684\u957f\u5ea6**\u6700\u5927**\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba9\u8fde\u8fb9\u524d\u7684**\u94fe**\u6700\u957f\uff0c\u4e8e\u662f\u53ef\u4ee5\u6c42\u51fa\u539f\u6811\u7684\u76f4\u5f84`L`\uff0c\u7136\u540e\u5c06\u76f4\u5f84\u7684\u4e24\u7aef\u8fde\u8fb9\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$2 * (n - 1) - L + 1$\u3002\n\n\u5176\u4e2d$2 * (n - 1)$\u4e3a\u904d\u5386\u539f\u6811\u7684\u8d39\u7528\uff0cL - 1\u4e3a\u73af\u7684\u957f\u5ea6\uff08\u4e0d\u660e\u767d\u7684\u52a8\u624b\u5728\u4e0a\u9762\u7684\u56fe\u4e2d\u6570\u4e00\u6570\uff09\u3002\n\n~~30\u5206\u5230\u624b\u4e86\u4e0d\u505a\u4e86~~\n\n## \u518d\u6765\u8003\u8651$k == 2$\u7684\u60c5\u51b5\n\n\u548c$k == 1$\u65f6\u76f8\u4f3c\uff0c\u81ea\u73af\u4f9d\u7136\u662f\u88ab\u820d\u5f03\u7684\uff0c\u8fd9\u4e2a\u81ea\u5df1\u7406\u89e3\u3002\n\n\u6211\u4eec\u7684\u7b2c\u4e00\u6761\u8fb9\u4f9d\u7136\u8fde\u5728\u76f4\u5f84\u4e24\u7aef\uff0c\u63a5\u7740\u8003\u8651\u7b2c\u4e8c\u6761\u8fb9\u7684\u4f4d\u7f6e\uff1a\n\u4e0d\u96be\u770b\u51fa\u6709\u5982\u4e0b\u4e24\u79cd\u53ef\u80fd\uff1a\n\n- \u73af\u91cd\u53e0\n- \u73af\u4e0d\u91cd\u53e0\n\n\u5148\u6765\u8fde\u63a5\u76f4\u5f84\u7684**\u4e24\u7aef**\uff0c\u5982\u56fe\uff1a\n\n![](https://i.loli.net/2019/06/06/5cf87f7daad8544803.png)\n\n\u8fd9\u65f6\u7684\u70b9$1 -  2 - 6 - 5 - 3$\u6784\u6210\u4e86\u4e00\u4e2a\u73af\u3002\u6211\u4eec\u8003\u8651\u8ba9\u73af\u4e0d\u91cd\u53e0\uff0c\u8fde\u63a5\u70b9$7,8$\uff0c\u5982\u56fe\uff1a\n\n![](https://i.loli.net/2019/06/06/5cf87f8ec23b499834.png)\n\n\u8fd9\u65f6\uff0c\u65b0\u7684\u73af\u4e0a\u7684\u8fb9\u4e5f\u4ec5\u9700\u7ecf\u8fc7\u4e00\u6b21\uff0c\u770b\u4e0a\u53bb\u975e\u5e38\u7684~~\u5b9e\u60e0~~\u3002\n\n\u522b\u6025\uff0c\u6211\u4eec\u518d\u6765\u8003\u8651\u4e00\u4e0b**\u91cd\u53e0**\u7684\u60c5\u51b5\uff0c\u5982\u56fe\uff1a\n\n![](https://i.loli.net/2019/06/06/5cf87f9e7c8d375395.png)\n\n\u8fd9\u6b21\u8fde\u63a5\u4e86$4,7$\u4e24\u4e2a\u70b9\u3002\u770b\u4e0a\u53bb\u5f62\u6210\u4e86\u4e00\u4e2a\u66f4\u5927\u7684\u73af\uff0c**\u8282\u7701**\u4e86\u4e2d\u95f4\u91cd\u53e0\u90e8\u5206\u7684\u8d39\u7528\uff0c\u4f46\u662f\u662f\u8fd9\u6837\u561b\uff1f\n\n\u518d\u6b21\u56de\u53bb\u770b\u4e00\u904d\u9898\u76ee\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u8981\u6c42\uff1a\n\n> \u6bcf\u6761\u9053\u8def**\u5fc5\u987b**\u7ecf\u8fc7**\u81f3\u5c11\u4e00\u6b21**\n\n\u8fd9\u6837\uff0c\u4e2d\u95f4\u7684\u9053\u8def\u5c31**\u4e0d\u80fd\u4e0d\u8d70**\uff0c\u5982\u679c\u8d70\u7684\u8bdd\uff0c\u4e0d\u4ec5\u6ca1\u6709\u8282\u7701\u8d39\u7528\uff0c\u76f8\u53cd\u4f1a\u56e0\u4e3a\u4e24\u4e2a\u73af\u90fd\u8981\u7ecf\u8fc7\u800c\u589e\u52a0\u4e86**\u91cd\u53e0\u957f\u5ea6**\u7684\u8d39\u7528\u3002\n\n\u7ed3\u679c\u5c31\u5f88\u663e\u7136\u4e86\uff0c\u9700\u8981\u8fde\u63a5\u4e24\u4e2a**\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u73af**\u7684\u70b9\u3002\n\n\u90a3\u4e48\u8981\u8fde\u63a5**\u54ea\u4e24\u4e2a**\uff1f\u600e\u4e48\u6837\u624d\u4f1a\u5bfc\u81f4**\u4e0d\u91cd\u73af**\uff1f\n\n\u8003\u8651$k == 1$\u65f6\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u5c1d\u8bd5\u627e\u4e00\u6761**\u6b21\u957f\u94fe**\uff0c\u800c\u4e14\u4e0d\u4e0e\u539f\u94fe**\u91cd\u590d**\u3002\u6709\u4e86\u7b2c\u4e8c\u4e2a\u8981\u6c42\uff0c\u6211\u4eec\u53cd\u800c\u4f1a\u6bd4\u8f83\u597d\u505a\uff1a\n\n\u53ea\u9700\u8981\u5c06\u539f\u76f4\u5f84\u4e0a\u7684\u8fb9**\u6bc1\u6389**\uff0c\u7136\u540e\u5efa\u7acb\u4e00\u9897\u65b0\u7684\u6811\uff0c\u518d\u5728\u8fd9\u68f5\u6811\u4e0a\u6c42\u51fa\u76f4\u5f84\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u67d0\u4e9b~~dl~~\u6570\u636e\uff0c\u8ba9\u8fde\u8fb9\u540e\u4e0d\u5f97\u4e0d\u91cd\u73af\uff0c\u5176\u5b9e\u8ba1\u7b97\u540e\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c**\u4e0d\u8bba\u662f\u5426\u91cd\u73af**\uff0c\u90fd\u9700\u8981\u7528\u539f\u56fe\u957f\u5ea6\u51cf\u53bb\u4e24\u4e2a\u73af\u7684\u5927\u5c0f\uff0c\u800c\u91cd\u53e0\u7684\u90e8\u5206\u88ab\u51cf\u4e86\u4e24\u6b21\uff08\u4e0d\u9700\u8981\u5bb9\u65a5\u7684\uff09\uff0c\u8fd9\u70b9\u6211\u4eec\u901a\u8fc7\u6c42\u51fa\u76f4\u5f84\u540e\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u503c\u53d6\u53cd\u5c31\u80fd\u8fbe\u5230\u3002\n\n\u53d6\u53cd\u7684\u5b9e\u73b0\u7c7b\u4f3c\u4e8e`EK`\u7b97\u6cd5\u7684`upd()`\u64cd\u4f5c\uff0c\u9700\u8981\u5728\u7b2c\u4e00\u904d`bfs()`\u6c42\u76f4\u5f84\u65f6\u7ef4\u62a4\u4e00\u4e2a`pre[]`\u6570\u7ec4\u3002\n\n\u7b2c\u4e8c\u6761\u76f4\u5f84\u53ef\u4ee5**\u6811\u4e0adp**\u6765\u6c42\u3002\n\n# \u53c2\u8003\u4ee3\u7801\n\n>  \u6070\u5f53\u7684\u51fd\u6570\u4f7f\u7528\u53ef\u4ee5\u6781\u5927\u51cf\u5c11\u7801\u91cf\n\n```cpp\n//Author: zgjjj\n#include <cstdio>\n#include <cctype>\n\nnamespace FastIO {\n    inline int read() {\n        char ch = getchar(); int r = 0, w = 1;\n        while(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();}\n        while(isdigit(ch)) {r = r * 10 + ch - '0', ch = getchar();}\n        return r * w;\n    }\n    void _write(int x) {\n        if(x < 0) putchar('-'), x = -x;\n        if(x > 9) _write(x / 10);\n        putchar(x % 10 + '0');\n    }\n    inline void write(int x) {\n        _write(x);\n        puts(\"\");\n    }\n}\n\nusing namespace FastIO;\n\nconst int N = 100010;\nconst int M = N << 2;\n\ntemplate <typename T> inline T max(T a, T b) {return a > b ? a : b;}\n\ntemplate <typename T>\nclass queue {\n    private:\n        int head, tail;\n        T q[N << 1];\n    public:\n        queue() {head = tail = 0;}\n        inline bool empty() {return head >= tail;}\n        inline void push(T x) {q[++tail] = x;}\n        inline void pop() {if(!empty()) head++;}\n        inline T front() {return q[head + 1];}\n};\n\nint head[N], nxt[M], edge[M], ver[M], d[N], pre[N];\nint cnt = 1, n, k, l, r, l1, l2;\nbool v[N];\n\ninline void add(int x, int y, int z) {\n    ver[++cnt] = y, edge[cnt] = z, nxt[cnt] = head[x], head[x] = cnt;\n}\n\ninline int bfs(int s) {\n    for(register int i = 1; i <= n; i++) d[i] = 0xcfcfcfcf, pre[i] = v[i] = 0;\n    int ans = 0;\n    d[s] = 0;\n    queue <int> q;\n    q.push(s);\n    while(!q.empty()) {\n        int x = q.front();\n        q.pop();\n        v[x] = 1;\n        for(register int i = head[x]; i; i = nxt[i]) {\n            int y = ver[i], z = edge[i];\n            if(v[y]) continue;\n            d[y] = d[x] + z;\n            pre[y] = i;\n            q.push(y);\n        }\n    }\n    for(register int i = 1; i <= n; i++) if(d[ans] < d[i]) ans = i;\n    return ans;\n}\n\nvoid dp(int x) {\n    v[x] = 1;\n    for(register int i = head[x]; i; i = nxt[i]) {\n        int y = ver[i], z = edge[i];\n        if(v[y]) continue;\n        dp(y);\n        l2 = max(l2, d[y] + d[x] + z);\n        d[x] = max(d[x], d[y] + z);\n    }\n}\n\nint main() {\n    n = read(), k = read();\n    for(register int i = 1; i < n; i++) {\n        int x = read(), y = read();\n        add(x, y, 1);\n        add(y, x, 1);\n    }\n    l = bfs(1);\n    r = bfs(l);\n    l1 = d[r];\n    if(k == 1)\n        return write(2 * (n - 1) - l1 + 1), 0;\n    int x = r;\n    while(x != l) {\n        int i = pre[x];\n        edge[i] = edge[i ^ 1] = -1;\n        x = ver[i ^ 1];\n    }\n    for(register int i = 1; i <= n; i++) d[i] = v[i] = 0;\n    dp(1);\n    return write(2 * n - l1 -l2), 0;\n}\n```\n\n",
        "postTime": 1559789568,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 [APIO2010]\u5de1\u903b"
    },
    {
        "content": "## \u601d\u8def\uff1a\u6c42\u6811\u7684\u76f4\u5f84*2\n\n#### \u4f46\u662f\uff0c\u4e24\u79cd\u65b9\u6cd5\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n\u6c42\u6811\u7684\u76f4\u5f84\u7684\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n### 1. dfs\n\n\u4f18\u70b9\uff1a\u53ef\u4ee5\u6c42\u51fa\u76f4\u5f84\u5177\u4f53\u5305\u542b\u54ea\u4e9b\u8fb9\uff1b\n\n\u7f3a\u70b9\uff1a\u4e0d\u80fd\u5305\u542b\u8d1f\u8fb9\u6743\uff1b\n\n\u4ee3\u7801\uff1a\n\n```cpp\n//f\u8bb0\u5f55\u7236\u8282\u70b9\uff0cdis\u4e3a\u957f\u5ea6\uff08\u6df1\u5ea6\uff09\uff0cmaxx\u4e3a\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u70b9\uff0cv\u4e3a\u8fb9\u6743\nvoid dfs(int x,int fa)\n{\n\tf[x]=fa;\n\tif(dis[x]>dis[maxx])\n\tmaxx=x;\n\tfor(int i=h[x];i;i=q[i].nxt)\n\t{\n\t\tint y=q[i].to;\n\t\tif(y==fa)\n\t\tcontinue;\n\t\tdis[y]=dis[x]+v[i];\n\t\tdfs(y,x);\n\t}\n}\n\n//\u4ee5\u4e0b\u4e3a\u4e3b\u51fd\u6570\u5185\u7684\u4ee3\u7801\n\nmemset(dis,0,sizeof(dis));\ndfs(1,0);\ndis[maxx]=0;//\u627e\u5230\u79bb\u6839\u8282\u70b9\uff081\uff09\u6700\u8fdc\u7684\u70b9\u5e76\u4ee5\u5b83\u4e3a\u6839\u518d\u6b21dfs\uff08\u5176\u5b9e\u5b83\u5c31\u662f\u6811\u76f4\u5f84\u7684\u4e00\u7aef\uff09\ndfs(maxx,0);\n//\u6b64\u65f6\u7684maxx\u4e3a\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u53e6\u4e00\u7aef\u5219\u4e3a\u6811\u6839\n```\n### 2. dp \n\n\u4f18\u70b9\uff1a\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u6743\uff1b\n\n\u7f3a\u70b9\uff1a\u65e0\u6cd5\u5177\u4f53\u6c42\u51fa\u76f4\u5f84\u5305\u542b\u7684\u8fb9\uff0c\u53ea\u80fd\u6c42\u51fa\u5176\u957f\u5ea6\uff1b\n\n\u4ee3\u7801\uff1a\n\n```cpp\n\n//max2\u8bb0\u5f55\u76f4\u5f84\u957f\u5ea6\uff0cdis\u6b64\u5904\u8868\u793a\u8282\u70b9\u53ef\u5411\u4e0b\u5ef6\u7533\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u5176\u4ed6\u53d8\u91cf\u540c\u4e0a\u9762\u7684dfs\u90e8\u5206\u7684\u4ee3\u7801\nvoid dp(int x,int fa)\n{\n\tfor(int i=h[x];i;i=q[i].nxt)\n\t{\n\t\tif(q[i].to==fa)\n\t\tcontinue;\n\t\tdp(q[i].to,x);\n\t\tmax2=max(max2,dis[x]+dis[q[i].to]+v[i]);\n\t\tdis[x]=max(dis[x],dis[q[i].to]+v[i]);\n\t}\n}\n\n```\n\n### \u56de\u5f52\u9898\u76ee:\n\n 1. \u5982\u679c\u4e0d\u4fee\u5efa\u4efb\u4f55\u9053\u8def\uff0c\u5219\u6bcf\u6761\u9053\u8def\u90fd\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u904d\uff0c\u5373$ans=(n-1)*2$\u3002\n\n 2. \u5982\u679c\u4fee\u5efa\u4e00\u6761\u9053\u8def\u8fde\u63a5\u4efb\u610f\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u70b9\uff0c\u5219\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u7684\u8fb9\u90fd\u53ea\u4f1a\u88ab\u7ecf\u8fc7\u4e00\u6b21\uff0c\u5219$ans$\u4f1a\u5728```1```\u7684\u57fa\u7840\u4e0a\u51cf\u53bb\u73af\u4e0a\u8fb9\u7684\u4e2a\u6570\u518d\u52a02\uff0c\u6b64\u65f6\u4fee\u5efa\u7684\u9053\u8def\u8fde\u63a5\u6811\u76f4\u5f84\u7684\u4e24\u7aef\u6700\u4f73\uff08\u4f7f\u7528dfs\u6c42\u76f4\u5f84\uff09\u3002\n \n 3. \u5982\u679c\u5728```2```\u7684\u57fa\u7840\u4e0a\u518d\u4fee\u5efa\u4e00\u6761\u9053\u8def\uff0c\u5219\u6b64\u73af\u4e0a\u7684\u8fb9\u4e5f\u53ea\u4f1a\u88ab\u7ecf\u8fc7\u4e00\u6b21\uff0c\u4f46\u662f\u5982\u679c\u6811\u4e0a\u67d0\u4e00\u8fb9\u540c\u65f6\u5728\u4e24\u4e2a\u73af\u4e0a\uff0c\u5219\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u904d\u3002\n \n \t\u6240\u4ee5\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u73af\u4e0a\u7684\u8fb9\u6743\u6807\u4e3a$-1$\uff0c\u518d\u6b21\u6c42\u76f4\u5f84\uff0c\u4f7f\u4fee\u5efa\u7684\u9053\u8def\u8fde\u63a5\u76f4\u5f84\u4e24\u7aef\uff08\u56e0\u4e3a\u6709\u8d1f\u8fb9\u6743\uff0c\u6240\u4ee5\u4f7f\u7528dp\u6c42\u76f4\u5f84\uff09\n    \n   \u5c0f\u7ec6\u8282\uff1a\n   \n   - \u6240\u6709\u65b0\u5efa\u9053\u8def\u90fd\u8981\u88ab\u5168\u90e8\u7ecf\u8fc7\uff1b\n   \n   - \u65b0\u5efa\u7684\u9053\u8def\u5fc5\u987b\u4e3aK\u6761\uff0c\u4e0d\u662f$ \\le K$\uff1b\n   \n   \u5b8c\u6574\u4ee3\u7801\uff1a\n  ```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,ans;\nstruct node\n{\n\tint to,nxt;\n}q[1000010];\nint cnt,h[1000010],maxx,f[1000010],dis[1000010],v[1000010],max2=0;//\u7528\u5904\u4e0a\u9762\u8bf4\u8fc7\u4e86\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\nbool b[1000010];//b\u7528\u6765\u6807\u8bb0\u7b2c\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\nvoid add(int x,int y)\n{\n\tq[++cnt].to=y;\n\tq[cnt].nxt=h[x];\n\th[x]=cnt;\n}\nvoid dfs(int x,int fa)//dfs\u6c42\u76f4\u5f84\n{\n\tf[x]=fa;\n\tif(dis[x]>dis[maxx])\n\tmaxx=x;\n\tfor(int i=h[x];i;i=q[i].nxt)\n\t{\n\t\tint y=q[i].to;\n\t\tif(y==fa)\n\t\tcontinue;\n\t\tif(dis[y]<dis[x]+v[i])\n\t\tdis[y]=dis[x]+v[i];\n\t\tdfs(y,x);\n\t}\n}\nvoid dp(int x,int fa)//dp\u6c42\u76f4\u5f84\n{\n\tfor(int i=h[x];i;i=q[i].nxt)\n\t{\n\t\tif(q[i].to==fa)\n\t\tcontinue;\n\t\tdp(q[i].to,x);\n\t\tmax2=max(max2,dis[x]+dis[q[i].to]+v[i]);\n\t\tdis[x]=max(dis[x],dis[q[i].to]+v[i]);\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tans=(n-1)*2;//\u521d\u59cb\u5316ans\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=cnt;i++)//\u521d\u59cb\u5316v\n\t{\n\t\tv[i]=1;\n\t}\n\tdis[1]=0;\n\tdfs(1,0);\n\tdis[maxx]=0;\n\tdfs(maxx,0);//\u7b2c\u4e00\u6b21\u6c42\u73af\n\tfor(int i=maxx;i;i=f[i])\n\t{\n\t\tans--;\n\t\tb[i]=1;\n\t}\n\tfor(int i=maxx;i;i=f[i])//\u628a\u73af\u4e0a\u8fb9\u7684\u8fb9\u6743\u6539\u4e3a-1\uff08\u65b9\u6cd5\u66b4\u529b\u4e86\u70b9\uff09\n\t{\n\t\tfor(int j=h[i];j;j=q[j].nxt)\n\t\t{\n\t\t\tif(b[q[j].to])\n\t\t\tv[j]=-1;\n\t\t}\n\t}\n\tans+=2;\n\tif(m==1)\n\t{\n\t\tcout<<ans;\n\t\treturn 0;\n\t}\n\tmemset(dis,0,sizeof(dis));//\u4e8c\u6b21\u5229\u7528dis\u6570\u7ec4\n\tdis[1]=0;\n\tdp(1,0);\n\tans-=max2;\n\tans+=1;\n\tcout<<ans;\n}\n```\n\u4ee3\u7801\u6ca1\u6709\u592a\u591a\u4f18\u5316\uff08~~\u5176\u5b9e\u6839\u672c\u6ca1\u6709\uff0c\u56e0\u4e3a\u672c\u4eba\u592a\u83dc~~\uff09\u4e0d\u5438\u6c27\u80fd\u8dd1\u5230628ms\u3002",
        "postTime": 1588306918,
        "uid": 169422,
        "name": "v\u0435ctorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "#### \u9898\u610f\n\n\u5728\u6811\u4e0a\u4ece\u4e00\u4e2a\u70b9(\u4e00\u53f7\u70b9)\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\u518d\u8fd4\u56de\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u8fd8\u8981\u52a0\u4e00\u6761\u6216\u4e24\u6761\u8fb9\uff0c\u8981\u6c42\u8d70\u8fc7\u7684\u6700\u77ed\u8ddd\u79bb\n\n\u6837\u4f8b\u56fe:\n\n![e3s43t.png](https://s2.ax1x.com/2019/07/29/e3s43t.png)\n\n\u52a0\u8fb9\u540e\u7684\u56fe\uff1a\n\n![e3yiE4.png](https://s2.ax1x.com/2019/07/29/e3yiE4.png)\n\n\u6837\u4f8b\u52a0\u4e00\u67612-8\u7684\u8fb9\u540e(\u5982(a))\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u4ece1\u51fa\u53d1\u8d70\u52308\u540e\n\n\u53ef\u4ee5\u8d708-2\uff0c2-1\u8fd4\u56de1\u8fd9\u4e2a\u8282\u70b9\n\n\u4e8e\u662f2-1-3-5-8\u8fd9\u6761\u94fe\u4e0a\u7684\u6bcf\u6761\u8fb9\u90fd\u53ea\u7528\u8d70\u4e00\u6b21(\u53ea\u4e0d\u8fc7\u591a\u8d70\u4e86\u4e00\u6b218-2)\n\n\u82e5\u518d\u52a0\u4e00\u6761\u8fb96-7(\u5982(b))\u5219\u53c8\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\n\n\u8fd9\u4e24\u4e2a\u73af\u4e0a\u7684\u8fb9\u90fd\u4e0d\u91cd\u5408\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u73af\u7684\u60c5\u5f62\u548c\u7b2c\u4e00\u4e2a\u4e00\u6837(5-7\uff0c5-6\u53ea\u7528\u8d70\u4e00\u6b21)\n\n\u90a3\u4e48\u6211\u4eec\u6765~~\u4f5c\u6b7b~~\u8003\u8651\u4e00\u4e0b\u53e6\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4e24\u4e2a\u73af\u53c8\u91cd\u53e0\u90e8\u5206\u7684\u60c5\u51b5(\u5982(c))\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u4e24\u4e2a\u73af\u90fd\u5206\u522b\u4f1a\u7ecf\u8fc7\u4e00\u6b21\u91cd\u53e0\u7684\u90e8\u5206\uff0c\u53ca\u91cd\u53e0\u7684\u90e8\u5206\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u6b21(\u548c\u6700\u521d\u4e0d\u662f\u4e00\u6837\u7684\u5417(\u00b4\uff65\u03c9\uff65\u00b4) )\n\n\u8fd9\u65f6\u4e0d\u4ec5\u4e0d\u80fd\u5c11\u8d70\uff0c\u53cd\u800c\u8981\u518d\u8d70\u4e00\u6b21\n\n\u7ecf\u8fc7\u4e00\u6ce2\u901a\u4fd7\u6613\u61c2\u7684\u5206\u6790\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u52a0\u8fb9\u53ea\u7528\u627e\u5230\u6700\u957f\u94fe\uff0c\u518d\u5728\u94fe\u7684\u4e24\u7aef\u52a0\u4e0a\u4e00\u6761\u8fb9\u5373\u53ef\u3002\n\n\u5982\u6709\u91cd\u53e0\u7279\u6b8a\u5904\u7406\u5373\u53ef\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline void DFS(int x,int y,int z)//(\u4e24\u6b21)DFS\u6c42\u76f4\u5f84\n{\n\tint i,j;\n\tif(y>=sum)\n\t{\n\t\tsum=y;\n\t\tbj=x;\n\t}\n\tfor(i=h[x];i;i=a[i].next)\n\t{\n\t\tj=a[i].to;\n\t\tif(j==z)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tDFS(j,y+a[i].v,x);\n\t}\n}\ninline bool DFSA(int x,int y,int z)//\u8def\u5f84\u53d6\u53cd\n{\n\tint i,j;\n\tif(y==L1)\n\t{\n\t\tbjj[x]++;\n\t\treturn true;\n\t}\n\tfor(i=h[x];i;i=a[i].next)\n\t{\n\t\tj=a[i].to;\n\t\tif(j==z)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tif(DFSA(j,y+a[i].v,x))\n\t\t{\n\t\t\tbjj[x]++;\n\t\t\ta[i].v=-a[i].v;\n\t\t\ta[i^1].v=a[i].v;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\ninline void DP(int x,int y)//\u6811\u5f62DP\u6c42\u76f4\u5f84\n{\n\tint i,j;\n\tfor(i=h[x];i;i=a[i].next)\n\t{\n\t\tj=a[i].to;\n\t\tif(j==y)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tDP(j,x);\n\t\tsum=max(sum,D[x]+D[j]+a[i].v);\n\t\tD[x]=max(D[x],D[j]+a[i].v);\n\t}\n}\nint main()\n{\n\tint i,x,y;\n\tscanf(\"%d%d\",&n,&k);\n\tfor(i=1;i<=n-1;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tzsz(x,y,1);\n\t\tzsz(y,x,1);\n\t}//\u8bfb\u5165\u5efa\u8fb9\n\tbj=1;\n\tsum=0;\n\tDFS(bj,0,0);\n\tsum=0;\n\tS1=bj;\n\tDFS(bj,0,0);\n\tL1=sum;//\u7b2c\u4e00\u6b21\u51cf\u5c11\u7684\u8ddd\u79bb\n\tT1=bj;\n//\u5148\u7528\u4e24\u6b21DFS\u6c42\u76f4\u5f84\uff0c\u987a\u4fbf\u8bb0\u5f55\u76f4\u5f84\u7684\u7aef\u70b9\n\tDFSA(S1,0,0);\n//\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u6539\u4e3a\u8d1f\u6570\uff0c\u5373\u5f53\u518d\u6b21\u8d70\u5230\u8fd9\u6761\u8fb9\u65f6\u89c6\u4e3a\u91cd\u53e0\uff0c\u4e0d\u51cf\u53cd\u52a0\n\tsum=0;\n\tDP(1,0);//\u6811\u5f62DP\u6c42\u76f4\u5f84\n\tL2=sum;//\u7b2c\u4e8c\u6b21\u51cf\u5c11\u7684\u8ddd\u79bb\n\tif(k==1)\n\t{\n\t\tprintf(\"%d\",2*n-L1-1);\n\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%d\",2*n-L1-L2);\n\t\t}\n\treturn 1;\n}\n```\n\nUpd:\u65e9\u5e74\u9898\u89e3\uff0c\u628a\u683c\u5f0f\u6539\u4e86\uff0c\u8fc7\u4e0d\u8fc7\u90fd\u884c\u3002",
        "postTime": 1564385646,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "P3629\u3010APIO2010\u3011\u5de1\u903b"
    },
    {
        "content": "## P3629 \u3010\u5de1\u903b\u3011\r\n\r\n\u9898\u610f\u76f8\u5f53\u4e8e\u9009\u4e24\u6761\u8def\u5f84\uff0c\u8ba9\u5b83\u4eec\u4e0d\u76f8\u4ea4\u90e8\u5206\u7684\u957f\u5ea6\u6700\u5927\u3002\r\n\r\n\u5927\u591a\u9898\u89e3\u7684\u505a\u6cd5\u90fd\u662f\u5148\u9009\u76f4\u5f84\u3001\u4fee\u6539\u6743\u503c\u540e\u518d\u9009\u76f4\u5f84\uff0c\u5373\u9ed8\u8ba4 **\u5176\u4e2d\u4e00\u6761\u8def\u5f84\u5c31\u662f\u539f\u6811\u7684\u76f4\u5f84**\uff0c\u4e14\u5927\u5bb6\u4f3c\u4e4e\u90fd\u6ca1\u6709\u8bc1\u660e\uff0c\u4f3c\u4e4e\u662f\u552f\u4e00\u610f\u8bc6\u5230\u8fd9\u70b9\u7684@[wu3412790](https://www.luogu.com.cn/blog/wu3412790/solution-p3629) \u4e5f\u53ea\u7ed9\u51fa\u4e86\u53e6\u4e00\u79cd\u505a\u6cd5\u3002\u8fd9\u91cc\u4e3b\u8981\u7ed9\u51fa\u8bc1\u660e\u3002\r\n\r\n### \u8bc1\u660e\r\n\r\n\u6a21\u62df\u5176\u5b83\u9898\u89e3\u7684\u505a\u6cd5\uff0c\u8bbe\u6811\u7684\u4e00\u6761\u76f4\u5f84\u4e3a $AB$\uff0c\u9009\u7684\u53e6\u4e00\u6761\u8def\u5f84\u4e3a $CD$\u3002\u82e5\u4e24\u8def\u5f84\u4e0d\u76f8\u4ea4\uff0c\u5f97\u5230\u7684\u7b54\u6848\u4e3a $d(A,B)+d(C,D)$\uff1b\u82e5\u4e24\u8def\u5f84\u76f8\u4ea4\uff0c\u5982\u56fe\uff0c\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/ex8iwyl8.png)\r\n\r\n\u5f97\u5230\u7684\u7b54\u6848\u4e3a $d(A,C)+d(B,D)$\uff08\u4e5f\u53ef\u80fd\u662f $d(A,D)+d(B,C)$\uff09\u3002\r\n\r\n\u6240\u4ee5\u53ef\u4ee5\u628a\u9898\u610f\u6539\u4e3a\uff1a\u9009\u4e24\u6761 **\u6ca1\u6709\u91cd\u590d\u8fb9** \u7684\u8def\u5f84\uff0c\u8ba9\u5b83\u4eec\u7684\u957f\u5ea6\u6700\u5927\u3002\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u4e4b\u540e\u7684\u53d9\u8ff0\u90fd\u6309\u8fd9\u4e2a\u65b0\u7684\u9898\u610f\u3002\r\n\r\n+ \u5f15\u7406\uff1a\u5982\u679c\u6700\u4f18\u89e3\u4e2d\u7684\u4e24\u6761\u8def\u5f84\u7684\u5176\u4e2d\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a $A$ \u548c $B$\uff0c\u8fd9\u79cd\u505a\u6cd5\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002\r\n+ \u8bc1\u660e\uff1a\u82e5\u4e24\u6761\u8def\u5f84\u5206\u522b\u4e3a $AB$ \u548c $CD$\uff0c\u90a3\u663e\u7136\u6b63\u786e\uff1b\u82e5\u4e24\u6761\u8def\u5f84\u5206\u522b\u4e3a $AC$ \u548c $BD$\uff0c\u90a3\u7b2c\u4e8c\u6761\u8def\u5f84\u9009 $CD$ \u4e5f\u80fd\u83b7\u5f97\u6700\u4f18\u89e3\u3002\u5f97\u8bc1\u3002\r\n\r\n\u90a3\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u8bc1\u660e\uff1a\u6700\u4f18\u89e3\uff08\u4e4b\u4e00\uff09\u7684\u4e24\u6761\u8def\u5f84\u4e00\u5b9a\u6709\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a $A$ \u548c $B$\u3002\r\n\r\n\u82e5\u9009\u7684\u4e24\u6761\u8def\u5f84 $C_1D_1$ \u548c $C_2D_2$ \u5747\u4e0e $AB$ \u6ca1\u6709\u91cd\u590d\u8fb9\uff0c\u90a3\u4e48\u628a\u5176\u4e2d\u4efb\u4e00\u6761\u6539\u6210 $AB$ \u4e00\u5b9a\u4e0d\u4f1a\u66f4\u52a3\u3002\u731c\u60f3\u6210\u7acb\u3002\r\n\r\n\u82e5 $C_1D_1$ \u4e0e $AB$ \u6709\u91cd\u590d\u8fb9\u800c $C_2D_2$ \u6ca1\u6709\uff0c\u628a $C_1D_1$ \u6539\u6210 $AB$ \u4e5f\u4e0d\u4f1a\u66f4\u52a3\uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002\u731c\u60f3\u6210\u7acb\u3002\r\n\r\n\u82e5\u4e24\u6761\u8def\u5f84\u90fd\u548c $AB$ \u6709\u91cd\u590d\u8fb9\uff0c\u5982\u56fe\uff0c\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/3a94u09m.png)\r\n\r\n\u628a\u4e24\u6761\u8def\u5f84\u5206\u522b\u6539\u4e3a $AD_1$ \u548c $BC_2$ \u4e0d\u4f1a\u66f4\u52a3\u3002\u731c\u60f3\u6210\u7acb\u3002\r\n\r\n\u7efc\u4e0a\uff0c\u82e5\u6309\u521d\u59cb\u9898\u610f\uff0c\u6700\u4f18\u89e3\uff08\u4e4b\u4e00\uff09\u9009\u62e9\u7684\u5176\u4e2d\u4e00\u6761\u8def\u5f84\u5c31\u662f\u539f\u6811\u7684\u76f4\u5f84\u3002",
        "postTime": 1676890928,
        "uid": 246014,
        "name": "Cutest_Junior",
        "ccfLevel": 6,
        "title": "P3629 \u3010\u5de1\u903b\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5][1]\n[1]:https://www.luogu.org/problemnew/show/P3629\n\u2014\u2014\u840c\u65b0\u7b2c\u4e00\u4efd\u9898\u89e3\n\n## \u9898\u610f\u7b80\u8ff0\nn\u4e2a\u6751\u5e84\u8fde\u6210\u4e00\u68f5\u6811\uff0c\u6bcf\u6761\u8fb9\u957f1\u3002\u8b66\u5bdf\u8700\u9ecd\u8981\u4ece1\u53f7\u8282\u70b9\u5f00\u59cb\u8dd1\uff0c\u8dd1\u904d\u6240\u6709\u8fb9\uff08\u53ef\u4ee5\u91cd\u590d\uff09\uff0c\u56de\u5230\u8d77\u70b9\u3002\u4e3a\u4e86\u7701\u6cb9\u8d39\uff0c\u53ef\u4ee5\u65b0\u5efak\u6761\u8fb9$(1\\le k\\le2)$\uff0c\u65b0\u5efa\u7684\u8fb9\u53ea\u80fd\u4e14\u5fc5\u987b\u8dd1\u4e00\u6b21\u3002\u95ee\u8981\u8dd1\u7684\u6700\u5c0f\u8ddd\u79bb\u3002\n## \u9898\u89e3\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u6751\u5e84\u61d2\u5f97\u4fee\u8def\u7684\u60c5\u51b5\u3002\n\u56e0\u4e3a\u6bcf\u6761\u8fb9\u90fd\u9700\u8981\u8dd1\u4e00\u6b21\uff0c\u4e14\u6700\u7ec8\u8981\u56de\u5230\u8d77\u70b9\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u90fd\u4f1a\u7ecf\u8fc7\u4e24\u6b21\uff0c\u603b\u8def\u7a0b\u4e3a$2(n-1)$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u5728\u4e24\u70b9\u4e4b\u95f4\u65b0\u5efa\u8fb9\u65f6\uff0c\u7701\u53bb\u7684\u6cb9\u8d39\u76f8\u5f53\u4e8e**\u4e24\u70b9\u539f\u6765\u7684\u8ddd\u79bb**\uff0c\u56e0\u4e3a\u8dd1\u4e86\u65b0\u8fb9\u5c31\u53ef\u4ee5\u5c11\u8dd1\u4e00\u6b21\u539f\u6765\u7684\u8def\u5f84\u3002\u90a3\u4e48\uff0c\u4e3a\u4e86\u7701\u53bb\u66f4\u591a\u7684\u6cb9\u8d39\uff0c\u9009\u62e9\u8df3\u8fc7\u7684\u8def\u5f84\u9700\u5c3d\u91cf\u957f\u3002\n\n**\u6700\u957f\u7684\u8def\u5f84\uff1f\u76f4\u5f84\uff01**\n\n\u6240\u4ee5\uff0c\u5f53$k=1$\u65f6\uff0c\u95ee\u9898\u5c31\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u5728**\u76f4\u5f84\u7684\u4e24\u7aef\u70b9**\u95f4\u5efa\u8fb9\u5373\u53ef\u3002\u82e5\u76f4\u5f84\u957f$L$\uff0c\u7b54\u6848\u5c31\u662f$2(n-1)-L+1$\u3002\n\n\u540c\u7406\uff0c\u82e5\u8981\u5efa\u7b2c\u4e8c\u6761\u65b0\u8fb9\uff0c\u540c\u6837\u4f1a\u518d\u51fa\u73b0\u4e00\u4e2a\u73af\u3002\n\n\u82e5\u4e24\u6b21\u5efa\u8fb9\u5f62\u6210\u7684\u73af**\u4e0d\u91cd\u53e0**\uff0c\u90a3\u4e48\u7b54\u6848\u76f4\u63a5\u518d\u51cf\u53bb\u8fd9\u6b21\u7701\u53bb\u7684\u6cb9\u8d39\u5373\u53ef\u3002\n\n\u82e5**\u91cd\u53e0**\uff0c\u539f\u672c\u53ea\u8dd1\u4e00\u6b21\u7684\u8fb9\u4e00\u8d9f\uff0c\u53d8\u6210\u4e00\u6b21\u90fd\u4e0d\u8dd1\u3002\u800c\u9898\u76ee\u8981\u6c42\u6240\u6709\u8fb9\u90fd\u5fc5\u987b\u8dd1\uff0c\u82e6\u903c\u7684\u8b66\u5bdf\u8700\u9ecd\u8fd8\u5f97\u518d\u53bb\u8dd1\u8fd9\u4e9b\u8fb9\uff0c\u518d\u8dd1\u56de\u6765\uff0c\u4e00\u8d9f\u53c8\u53d8\u56de\u4e86\u4e24\u8d9f\u2026\u2026\n\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u9700\u8981**yy**\u4e00\u4e0b\uff0c\u4fbf\u53ef\u5f97\u51fa\u6b63\u89e3\uff1a\n\n**1.** \u5728\u539f\u6811\u4e0a\u6c42\u76f4\u5f84\uff0c\u957f\u4e3a$L1$\uff0c\n\n**2.** \u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u90fd\u53d6\u53cd\uff08\u8fb9\u6743\u6539\u4e3a$-1$\uff09\n\n**3.** \u518d\u6c42\u4e00\u904d\u76f4\u5f84\uff0c\u957f\u4e3a$L2$\n\n**4.** \u7b54\u6848\u4e3a$2(n-1)-(L1-1)-(L2-1)$\n\n\u5176\u5b9e\u8003\u8651\u91cd\u53e0\u7684\u8fb9\uff0c\u7b2c\u4e00\u6b21\u51cf\u51cf\u53bb\u7684\u662f$1$\uff0c\u7b2c\u4e8c\u6b21\u518d\u51cf\u51cf\u53bb\u7684\u662f$-1$\uff0c\u76f8\u5f53\u4e8e**\u8d70\u4e24\u8d9f**\u53d8\u4e3a**\u8d70\u4e00\u8d9f**\u518d\u53d8\u4e3a**\u8d70\u4e24\u8d9f**\uff0c\u6b64\u505a\u6cd5\u6b63\u786e\u6027\u5f97\u8bc1\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n\n\u2014\u2014\u7528\u4e86\u4e24\u79cd\u627e\u76f4\u5f84\u65b9\u6cd5\u4f9b\u53c2\u8003\uff08\u539f\u7406\u4e0d\u518d\u8d58\u8ff0\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010;\nint n,k;\nint a,b;\nint len,lin[N];\nstruct nc{int y,nxt,v;}e[N<<1];\nint d[N],mx,id;\nint u,v;\nbool f;\nint ans;\ninline int read()\n{\n    int N=0,C=0;\n    char tf=getchar();\n    while(!isdigit(tf))C=tf=='-',tf=getchar();\n    while(isdigit(tf))N=(N<<1)+(N<<3)+(tf^48),tf=getchar();\n    return C?-N:N;\n}\ninline void ins(int x,int y)\n{\n    e[++len].nxt=lin[x];\n    lin[x]=len;\n    e[len].y=y;\n    e[len].v=1;\n}\nvoid dfs(int x,int fa)\n{\n    for(int i=lin[x];i;i=e[i].nxt)\n    {\n        int y=e[i].y,v=e[i].v;\n        if(y==fa)continue;\n        d[y]=d[x]+v;//\u8fd9\u91cc\u7684d[x]\u8868\u793a\u4ece\u6839\u5230x\u7684\u8ddd\u79bb\n        if(d[y]>mx)mx=d[y],id=y;\n        dfs(y,x);\n    }\n}\nvoid change(int x,int fa)\n{\n    if(x==v){f=1;return;}//\u627e\u5230\u76f4\u5f84\n    for(int i=lin[x];i;i=e[i].nxt)\n    {\n        int y=e[i].y;\n        if(y==fa)continue;\n        change(y,x);\n        if(f)\n        {\n            e[i].v=-1;\n            i&1?e[i+1].v=-1:e[i-1].v=-1;//\u53cc\u5411\u8fb9\n            return;\n        }\n    }\n}\nvoid dp(int x,int fa)\n{\n    for(int i=lin[x];i;i=e[i].nxt)\n    {\n        int y=e[i].y,v=e[i].v;\n        if(y==fa)continue;\n        dp(y,x);\n        mx=max(mx,d[x]+d[y]+v);//\u8fd9\u91cc\u7684d[x]\u8868\u793ax\u5f80\u5b83\u7684\u5b50\u6811\u8d70\u7684\u6700\u8fdc\u8ddd\u79bb\n        d[x]=max(d[x],d[y]+v);\n    }\n}\nint main()\n{\n    n=read(),k=read();\n    ans=(n-1)<<1;\n    for(int i=1;i<n;++i)\n    {\n        a=read(),b=read();\n        ins(a,b),ins(b,a);\n    }\n    d[1]=mx=0,dfs(1,0),u=id;\n    d[u]=mx=0,dfs(u,0),v=id;//\u7b2c\u4e00\u6b21\u9700\u8981\u627e\u51fa\u76f4\u5f84\u4e24\u7aef\u70b9u,v\n    ans-=mx-1;\n    if(k==1){printf(\"%d\",ans);return 0;}\n    change(u,0);//\u53d6\u53cd\n    memset(d,0,sizeof(d));\n    mx=0,dp(1,0);//\u7b2c\u4e8c\u6b21\u53ea\u9700\u627e\u51fa\u76f4\u5f84\u957f\u5ea6\n    ans-=mx-1;\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\u5acc\u4ee3\u7801\u4e11\u7684\u5927\u4f6c\u52ff\u55b7>_<\n\n\u6b22\u8fce\u63d0\u95ee\u2026\u2026\u548chack\u2026\u2026",
        "postTime": 1539827680,
        "uid": 100635,
        "name": "yingyudou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u2026\u662f\u67d0\u4e66\u4e0a\u9762\u7684\u4f8b\u9898...\n\n------\n\n### 30\u5206\u505a\u6cd5\n\n\u76f4\u63a5\u6c42\u6811\u7684\u76f4\u5f84\u7684\u957f\u5ea6(\u8bbe $L_1 = $ \u6811\u7684\u76f4\u5f84), \u7136\u540e\u7528\u4e00\u4e2a\u5f0f\u5b50:$2 \\times (n - 1) -L_1 + 1$ (\u5176\u4e2d$- L_1 $\u8868\u793a:\u76f4\u5f84\u4e0a\u7684\u53ea\u7528\u8d70\u4e00\u6b21)\n\n~~\u7b97\u4e86\u8fd8\u662f\u653e\u4e00\u4e0b\u4ee3\u7801\u5427QWQ~~:\n```cpp\n#include <bits/stdc++.h>\n\nconst int MaxN = 100000 + 10;\nconst int MaxM = MaxN * 2;\n\nint n, k, v[MaxM], next[MaxM], last[MaxN], edgeNum = 0, p = 0, q = 0, maxLen = 0, fuck = 0;\n\ninline int GetInt() {\n    int x = 0, f = 1; char ch;\n    do {ch = getchar(); if (ch == '-') f = -1;} while (ch < '0' || ch > '9');\n    do {x = x * 10 + ch - '0'; ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\ninline void AddEdge(const int &x, const int &y) {\n    v[++edgeNum] = y;\n    next[edgeNum] = last[x];\n    last[x] = edgeNum;\n}\n\nbool visit[MaxN];\n\nvoid DFS1(int now, int len) {\n    visit[now] = true;\n    if (len > maxLen) {\n        p = now;\n        maxLen = len;\n    }\n    for (int i = last[now]; i; i = next[i]) {\n        int end = v[i];\n        if (!visit[end]) {\n            DFS1(end, len + 1);\n        }\n    }\n}\n\nint main() {\n    n = GetInt(); k = GetInt();\n    for (int i = 1; i <= n - 1; ++i) {\n        int x = GetInt(), y = GetInt();\n        AddEdge(x, y); AddEdge(y, x);\n    }\n    memset(visit, false, sizeof visit);\n    DFS1(1, 0);\n    memset(visit, false, sizeof visit);\n    DFS1(p, 0);\n    std::cout << 2 * (n - 1) - maxLen + 1 << std::endl;\n    return 0;\n}\n\n/*\u672c\u505a\u6cd5\u53ea\u5bfb\u627e\u6811\u7684\u76f4\u5f84, \u9884\u8ba1\u5f97\u520630\u5206*/\n```\n\n-------\n\n### 100\u5206\u505a\u6cd5\n\n\u4e0a\u9762\u7684\u76f4\u63a5\u53ef\u4ee5\u7528\u5728$k = 1$\u7684\u4efb\u52a1\u91cc.\n\n\u81f3\u4e8e...$k = 2$\u65f6:\n\n\u9996\u5148: \u7b2c\u4e8c\u6761\u8fb9\u7684\u9009\u62e9:\n   \u7531\u4e8e\u9009\u62e9\u7b2c\u4e8c\u6761\u8fb9\u4e4b\u540e\u53c8\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af, \u6211\u4eec\u8981\u8003\u8651:\n      1. \u7b2c\u4e8c\u6761\u8fb9\u7684\u73af\u4e0e\u7b2c\u4e00\u6761\u8fb9\u5f62\u6210\u7684\u73af\u76f8\u91cd\u53e0.\n      \n      2. \u4e0d\u91cd\u5408.  \n   \u5bf9\u5e94\u60c5\u51b5:\n      1. \u91cd\u53e0\u7684\u8bdd, \u610f\u5473\u7740\u4e24\u4e2a\u73af\u91cd\u53e0\u7684\u90e8\u5206\u53c8\u8981\u88ab\u5de1\u903b\u4e24\u904d.\n      2. \u4e0d\u91cd\u5408, \u90a3\u4e48\u65b0\u7684\u73af\u53c8\u53ea\u9700\u8981\u8d70\u4e00\u904d.\n\u7efc\u4e0a\u6240\u8ff0, \u6211\u4eec\u5f97\u5230\u5982\u4e0b\u7b97\u6cd5:\n\n1. \u5728\u6700\u521d\u7684\u6811\u4e0a\u6c42\u76f4\u5f84, \u8bbe\u7b2c\u4e00\u6b21\u5f97\u5230\u7684\u76f4\u5f84\u4e3a$L_1$, \u7136\u540e\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u53d6\u53cd(\u4ece$1$\u6539\u4e3a$-1$).\n\n2. \u5728\u6700\u957f\u94fe\u8fb9\u6743\u53d6\u53cd\u540e\u7684\u6811\u4e0a\u518d\u6b21\u6c42\u76f4\u5f84, \u8bbe\u76f4\u5f84\u4e3a$L_2$.\n\n\u7b54\u6848\u5c31\u662f$2 \\times (n - 1) - L_1 + 1 - L_2 + 1$\n\n(\u597d\u5427\u4e0a\u9762\u90a3\u4e48\u5b66\u672f\u53c8\u62bd\u8c61\u7684\u7b97\u6cd5\u5f15\u7528\u81ea\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b).\n\n\u4ee3\u7801:\n```cpp\n#include <bits/stdc++.h>\n\nconst int MaxN = 100000 + 10;\nconst int MaxM = MaxN * 2;\n\nint n, k, v[MaxM], next[MaxM], last[MaxN], edgeNum = 1, p = 0, q = 0, maxLen = 0, weight[MaxM], dis[MaxN];\n\ninline int GetInt()\n{\n    int x = 0, f = 1;\n    char ch;\n    do\n    {\n        ch = getchar();\n        if (ch == '-')\n            f = -1;\n    } while (ch < '0' || ch > '9');\n    do\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    } while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\ninline void AddEdge(const int &x, const int &y, const int &w)\n{\n    v[++edgeNum] = y;\n    next[edgeNum] = last[x];\n    weight[edgeNum] = w;\n    last[x] = edgeNum;\n}\n\nbool visit[MaxN];\n\nvoid DFS1(int now, int len)\n{\n    visit[now] = true;\n    if (len > maxLen)\n    {\n        p = now;\n        maxLen = len;\n    }\n    dis[now] = len;\n\n    for (int i = last[now]; i; i = next[i])\n    {\n        int end = v[i];\n        if (!visit[end])\n        {\n            DFS1(end, len + weight[i]);\n        }\n    }\n    visit[now] = false;\n}\n\nint MarkEdgeDfs(const int &now)\n{\n\n    if (!dis[now])\n        return 1;\n    for (int i = last[now]; i; i = next[i])\n    {\n        int end = v[i];\n        // std::cerr << \"QAQ\" << v[i] << \"\\n\";\n        if (dis[end] == dis[now] - 1)\n        {\n            if (MarkEdgeDfs(end))\n            {\n                weight[i] = weight[i ^ 1] = -1;\n                // std::cerr << \"QAQQAQ\\n\";\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\nvoid DP(const int &now)\n{\n    visit[now] = 1;\n    for (int i = last[now]; i; i = next[i])\n    {\n        int end = v[i];\n        if (visit[end])\n            continue;\n        DP(end);\n        maxLen = std::max(maxLen, dis[now] + dis[end] + weight[i]);\n        // std::cerr << \"mx == \" << maxLen << \"\\n\";\n        dis[now] = std::max(dis[now], dis[end] + weight[i]);\n    }\n}\n\ninline void debug1()\n{\n    for (int i = 1; i <= edgeNum + 5; ++i)\n    {\n        // std::cerr << \"weight[\" << i << \"] == \" << weight[i] << \"\\n\";\n    }\n}\n\nint main()\n{\n    n = GetInt();\n    k = GetInt();\n    int ans = 2 * (n - 1);\n    for (int i = 1; i <= n - 1; ++i)\n    {\n        int x = GetInt(), y = GetInt();\n        AddEdge(x, y, 1);\n        AddEdge(y, x, 1);\n    }\n    memset(visit, false, sizeof visit);\n    DFS1(1, 0);\n    maxLen = -1e9;\n    memset(dis, 0, sizeof dis);\n    DFS1(p, 0);\n    ans = ans - maxLen + 1;\n    if (k == 1)\n    {\n        std::cout << ans << std::endl;\n        return 0;\n    }\n    // std::cerr << \"p == \" << p << \"dist == \" << dis[p] << \"\\n\";\n    MarkEdgeDfs(p);\n    debug1();\n    maxLen = 0;\n    memset(visit, false, sizeof visit);\n    memset(dis, 0, sizeof dis);\n    DP(1);\n    std::cout << ans - maxLen + 1;\n    return 0;\n}\n\n```\n~~\u4e3a\u4ec0\u4e48\u6ee1\u5206\u505a\u6cd5\u7684\u4ee3\u7801\u98ce\u683c\u5982\u6b64\u9b3c\u755c\u5462~~\n\n~~\u56e0\u4e3a\u6211\u628a\u8fd9\u7bc7\u4ee3\u7801\u642c\u8fd0\u56devs code\u540e\u53d1\u751f\u4e86\u5947\u5999\u7684\u683c\u5f0f\u5316~~\n\n\u80fd\u7528$DP$\u6c42\u7b2c\u4e00\u6b21\u7684\u6811\u7684\u76f4\u5f84\u5417?\n\n\u597d\u50cf\u4e0d\u884c, \u56e0\u4e3a\u201c\u5c06\u76f4\u5f84\u53d6\u53cd\u7684\u65f6\u5019\u201d, \u8981\u8bb0\u4f4f\u76f4\u5f84\u6240\u5728\u7684\u8282\u70b9.\n\n~~\u81f3\u4e8e\u6211\u8fd9\u79cd\u505a\u6cd5\u90a3\u90fd\u662f\u9898\u89e3\u533adalao\u4eec\u7684\u5947\u6280\u6deb\u5de7QWQ~~",
        "postTime": 1535686335,
        "uid": 51211,
        "name": "yjxyjx",
        "ccfLevel": 0,
        "title": "P3629 [APIO2010]\u5de1\u903b"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zybuluo.com/ysner/note/1164854)\n##\u9898\u9762\n\n\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u73b0\u53ef\u52a0\u5165$k$\uff08$k=1,2$\uff09\u6761\u8fb9\uff0c\u95ee\u5728\u52a0\u8fb9\u540e\uff0c\u4ece$1$\u53f7\u8282\u70b9\u51fa\u53d1\u8d70\u904d\u6240\u6709\u70b9\u518d\u56de\u5230$1$\u53f7\u70b9\u6700\u5c0f\u8ddd\u79bb\u662f\u591a\u5c11\uff1f\n##\u89e3\u6790\n\n\uff08\u5927\u524d\u63d0\uff1a\u52a0\u5165\u865a\u8fb9\uff0c\u7edf\u8ba1\u5b9e\u8fb9\uff09\n\n$k$\u7684\u8303\u56f4\u8010\u4eba\u5bfb\u5473\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528\u5206\u7c7b\u8ba8\u8bba\u5b8c\u6210\u6b64\u9898\u3002\n###$k=1$\n\u6ca1\u52a0\u8fb9\u65f6\uff0c\u6700\u5c0f\u8ddd\u79bb\u662f**\u8fb9\u6570\u00d72**\u3002\n\u8981\u51cf\u8ddd\u79bb\u5c31\u4ece\u8fd9\u4e9b  \u672c\u6765\u5c31\u5b58\u5728\u7684\u8fb9\u4e0a  \u6765\u3002\n\u52a0\u4e86\u4e00\u6761\u865a\u8fb9\uff08*\u4e0d\u662f\u81ea\u73af*\uff09\u540e\uff0c\u6574\u4e2a\u56fe\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u73af\u5957\u6811\u3002\n\u73af\u8d8a\u5927\uff0c\u8ddd\u79bb\u8d8a\u5c0f\u3002\n\u5982\u4f55\u8ba9\u73af\u7684\u5927\u5c0f\u6700\u5927\uff1f\n\u628a\u6811\u7684\u76f4\u5f84\u4e24\u7aef\u8fde\u8d77\u6765\u5373\u53ef\u3002\n\u8fd9\u65f6\u6700\u5c0f\u8ddd\u79bb\u6539\u53d8\u4e3a**\u73af\u7684\u5927\u5c0f+\u73af\u5916\u8fb9\u6570\u00d72**\n\u51cf\u5c11\u7684\u8ddd\u79bb\u4e3a**\u73af\u7684\u5927\u5c0f-2**\uff08\u56e0\u5728\u52a0\u8fb9\u4e4b\u524d\uff0c\u73af\u5176\u5b83\u8fb9\u5bf9\u8ddd\u79bb\u7684\u8d21\u732e\u4e3a**\uff08\u73af\u7684\u5927\u5c0f-1\uff09\u00d72**,\u52a0\u5b8c\u540e\u53d8\u4e3a**\u73af\u7684\u5927\u5c0f**\uff09\u3002\n\u540c\u65f6\u7b49\u4ef7\u4e8e**\u6811\u7684\u76f4\u5f84-1**\n\n###$k=2$\n\u8fd9\u65f6\u6211\u4eec\u8981\u5728\u73af\u5957\u6811\u4e0a\u52a0\u4e00\u6761\u865a\u8fb9\u3002\n\u518d\u52a0\u4e00\u6761\u8fb9\uff0c\u4f1a\u5f15\u8d77\u4ec0\u4e48\u6539\u53d8\u5462\uff1f\n\n$step\\ 1$ **\u865a\u8fb9\u4e24\u7aef\u70b9\u90fd\u5728\u73af\u5916**\n\n\u8fd9\u80af\u5b9a\u662f\u66f4\u4f18\u7684,\u51cf\u5c11\u7684\u8ddd\u79bb\u8fd8\u662f**\u6811\u7684\u76f4\u5f84-1**\u3002($1$\u4ee3\u8868\u65b0\u52a0\u5165\u7684\u8fb9\uff09\n\n$step\\ 2$ **\u865a\u8fb9\u4e00\u7aef\u70b9\u5728\u73af\u5185**\n\n\u8fd9\u6837\u4f1a\u5f62\u6210\u4e24\u4e2a\u6709\u516c\u5171\u8fb9\u7684\u73af\u3002\n\n\u8981\u7b26\u5408\u8981\u6c42\u5730\u8d70\u5b8c\u5b83\uff0c\u5c31\u8981\u989d\u5916\u628a\u516c\u5171\u8fb9\u591a\u8d70\u4e00\u904d\u3002\uff08\u753b\u56fe\u7406\u89e3\uff09\n\n\u5219\u8ddd\u79bb\u51cf\u5c11\u91cf\u4e3a**-\u516c\u5171\u8fb9\u6570\u91cf+\u65b0\u7eb3\u5165\u73af\u7684\u5b9e\u8fb9\u6570-1**($1$\u4ee3\u8868\u65b0\u52a0\u5165\u7684\u8fb9\uff09\n\n$step\\ 3$ **\u865a\u8fb9\u4e24\u7aef\u70b9\u90fd\u5728\u73af\u5185**\n\n\u8fd9\u79cd\u60c5\u51b5\u8c8c\u4f3c\u662f\u4e0a\u4e00\u79cd\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u56e0\u4e3a**\u65b0\u7eb3\u5165\u73af\u7684\u5b9e\u8fb9\u6570=0**\n\n\u6240\u4ee5\u8fd9\u79cd\u505a\u6cd5\u662f\u4e0d\u5b58\u5728\u7684\u3002\n\n##\u5b9e\u73b0\n\n\u53d1\u73b0$step\\ 1$\u548c$step\\ 2$\u5f0f\u5b50\u53ef\u4ee5\u5408\u5e76\uff0c$so\\ happy...$\n\n\u80af\u5b9a\u5148\u627e\u4e00\u904d\u6811\u7684\u76f4\u5f84\u3002\n\n\u7136\u540e\u628a\u5728\u73af\u4e2d\u7684\u8fb9\u6743\u6807\u4e3a$-1$\uff0c\u518d\u627e\u4e00\u904d\u3002\n\n**\u6ce8\u610f\u5230\u8fd9\u6b21\u5c31\u4e0d\u80fd\u7528bfs\u627e\u76f4\u5f84\u4e86\uff0c\u53ea\u80fd\u7528DP\uff0c\u53cd\u6b63\u4e0d\u7528\u627e\u51fa\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u8fb9**\n\n\u627e\u51fa\u7684\u76f4\u5f84\u662f\u4e0d\u662f\u6b63\u6570\uff0c\u8bf4\u660e\u52a0\u8fb9\u80af\u5b9a\u4e8f\uff0c\u90a3\u5c31\u52a0\u81ea\u73af\u5427\u3002\n```\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register\n#define il inline\n#define fp(i,a,b) for(re int i=a;i<=b;i++)\n#define fq(i,a,b) for(re int i=a;i>=b;i--)\nusing namespace std;\nconst int N=1e5+100;\nint n,k,h[N],cnt=1,mx,pos,dis[N],ans;\nbool vis[N];\nstruct Edge{int to,next,w;}e[N<<1];\nil void add(re int u,re int v){e[++cnt]=(Edge){v,h[u],1};h[u]=cnt;}\nil int gi()\n{\n  re int x=0,t=1;\n  re char ch=getchar();\n  while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n  if(ch=='-') t=-1,ch=getchar();\n  while(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n  return x*t;\n}\nil void dpdp(re int u)\n{\n  vis[u]=1;\n  for(re int i=h[u];i+1;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(vis[v]) continue;\n      dpdp(v);\n      mx=max(mx,dis[u]+dis[v]+e[i].w);\n      dis[u]=max(dis[u],dis[v]+e[i].w);\n    }\n}     \nil void dfs(re int u,re int len)\n{\n  vis[u]=1;if(len>mx) mx=len,pos=u;dis[u]=len;\n  for(re int i=h[u];i+1;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(vis[v]) continue;\n      dfs(v,len+e[i].w);\n    }\n  vis[u]=0;\n}\nil int dfsb(re int u)\n{\n  if(!dis[u]) return 1;\n  for(re int i=h[u];i+1;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(dis[v]==dis[u]-1)\n    if(dfsb(v)) {e[i].w=e[i^1].w=-1;return 1;}\n    }\n  return 0;\n}\nint main()\n{\n  memset(h,-1,sizeof(h));\n  n=gi();k=gi();ans=(n-1)*2;\n  fp(i,1,n-1)\n    {\n      re int u=gi(),v=gi();\n      add(u,v);add(v,u);\n    }\n  dfs(pos=1,0);\n  mx=-1e9;memset(dis,0,sizeof(dis));\n  dfs(pos,0);//printf(\"%d\\n\",pos);\n  ans-=mx-1;\n  if(k==1) {printf(\"%d\\n\",ans);return 0;}\n  dfsb(pos);mx=0;memset(vis,0,sizeof(vis));memset(dis,0,sizeof(dis));\n  dpdp(1);\n    ans-=mx-1;\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n```",
        "postTime": 1527604530,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "sry_\u4e24\u5e74\u524d\u5c31\u5207\u4e86\u8fd9\u9053\u9898orz%%%\n\n\u8fd9\u9898\u4e3b\u8981\u662f\u6d89\u53ca\u4e86\u4e00\u4e9b\u6709\u5173\u4e8e\u6811\u7684\u76f4\u5f84\u7684\u5957\u8def\u3002\n\n\u6211\u4eec\u5728\u6709\u5173\u4e8e\u4e00\u4e9b\u6700\u5c0f\u5316\u4ec0\u4e48\u8ddd\u79bb\u4e4b\u7c7b\u7684\u9898\u76ee\uff0c\u5927\u90e8\u5206\u4f1a\u7528\u5230\u4e00\u4e9b\u5173\u4e8e\u6811\u7684\u76f4\u5f84\u76f8\u5173\u7684\u95ee\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u5f53k=0\u7684\u65f6\u5019\u5c31\u662f\u6bcf\u6761\u8fb9\u90fd\u8d70\u4e00\u904d\u3002\n\n\u5982\u679ck=1\u7684\u65f6\u5019\u5c31\u662f\u76f4\u5f84\u4e0a\u7684\u70b9\u4e0d\u9700\u8981\u8d70\uff0c\u7136\u540e\u5176\u4ed6\u6ca1\u6761\u8fb9\u90fd\u8981\u8d70\u4e00\u904d\u3002\n\n\u4f9d\u6b21\u7c7b\u63a8\uff0c\u6211\u4eec\u611f\u89c9k=2\u7684\u65f6\u5019\u4e5f\u662f\u6709\u6709\u5173\u4e8e\u6700\u4f18\u6027\u7684\u89c4\u5f8b\u7684\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e24\u4e2a\u73af\u6709\u4ea4\uff0c\u6709\u4ea4\u7684\u8fb9\u5c31\u662f\u8d70\u4e24\u904d\uff0c\u5176\u4ed6\u5728\u73af\u4e0a\u7684\u70b9\u6211\u4eec\u8d70\u4e00\u904d\uff0c\u5269\u4e0b\u7684\u6211\u4eec\u4e5f\u8981\u8d70\u4e24\u904d\u3002\n\n\u5173\u4e8e\u8fd9\u4e2a\u600e\u4e48\u5904\u7406\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u6c42\u4e00\u4e2a\u76f4\u5f84\uff0c\u7136\u540e\u7b2c\u4e8c\u904d\u505a\u7684\u65f6\u5019\u7b2c\u4e00\u6761\u76f4\u5f84\u4e0a\u7684\u8fb9\u8bbe\u4e3a-1\uff0c\u5176\u4ed6\u4e3a1\uff0c\u518d\u8dd1\u4e00\u904d\u76f4\u5f84\u5c31ok\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u6709\u8d1f\u6743\u7684\u8fb9\uff0c\u6211\u4eec\u6c42\u76f4\u5f84\u8981\u7528\u4e00\u4e2adp\uff0c\u7136\u540e\u7b2c\u4e00\u904d\u53ef\u4ee5dfs\u6216\u8005bfs\u3002\n\n\u5927\u6982\u8fd9\u4e2a\u8bc1\u660e\u53ef\u4ee5\u610f\u4f1a\u4e00\u4e0b\uff0c\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u7b2c\u4e00\u6761\u76f4\u5f84\u5982\u679c\u6709\u591a\u4e2a\u76f8\u540c\u7684\uff0c\u53d6\u54ea\u4e2a\u90fd\u4e00\u6837\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define pb push_back\n#define pii pair<int,int>\nusing namespace std;\nconst int N=1e5+5;\nstruct Graph{int u,v;}gra[N];\nint n,k,res;\nvector<pii>adj[N];\nvoid adde(int u,int v,int w){adj[u].pb(pii(v,w));}\nnamespace T1{\n\tint fa[N],oth,md,pos;bool od[N];\n\tvoid dfs(int u,int d,int f){\n\t\tfa[u]=f;if(d>md)md=d,pos=u;\n\t\tfor(auto edg:adj[u]){\n\t\t\tint v=edg.first,w=edg.second;\n\t\t\tif(v!=f)dfs(v,d+w,u);\n\t\t}\n\t}\n\tvoid solve(){\n\t\tmd=-1;dfs(1,0,0);oth=pos;\n\t\tmd=-1;dfs(pos,0,0);\n\t\twhile(pos!=oth)od[pos]=true,pos=fa[pos],res++;\n\t\tod[oth]=true;\n\t\tif(k==1){printf(\"%d\\n\",((n-1)<<1)-res+1);exit(0);} \n\t\tfor(int i=1;i<=n;i++)adj[i].clear();\n\t\tfor(int i=1,u,v;i<n;i++){\n\t\t\tu=gra[i].u;v=gra[i].v;\n\t\t\tif(od[u]&&od[v])adde(u,v,-1),adde(v,u,-1);\n\t\t\telse adde(u,v,1),adde(v,u,1);\n\t\t}\n\t}\n}\nnamespace T2{\n\tint ans,d[N];\n\tvoid dfs(int u,int f){\n\t\tfor(auto edg:adj[u]){\n\t\t\tint v=edg.first,w=edg.second;\n\t\t\tif(v!=f)dfs(v,u),ans=max(ans,d[u]+d[v]+w),d[u]=max(d[u],d[v]+w);\n\t\t}\n\t}\n\tvoid solve(){\n\t\tdfs(1,0);\n\t\tprintf(\"%d\\n\",((n-1)<<1)-res+1-ans+1); \n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1,u,v;i<n;i++)\n\t\tscanf(\"%d%d\",&u,&v),gra[i]=(Graph){u,v},adde(u,v,1),adde(v,u,1);\n\tT1::solve();T2::solve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1600416429,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "### \u5173\u4e8e\u6811\u7684\u76f4\u5f84\n\n\u8fde\u63a5\u6811\u4e0a\u76f8\u8ddd\u6700\u8fdc\u7684\u4e24\u70b9\u7684\u8def\u5f84\u88ab\u79f0\u4f5c\u8fd9\u68f5\u6811\u7684\u6700\u957f\u94fe\u3002\u6811\u7684\u76f4\u5f84\u6307\u8fd9\u6761\u6700\u957f\u94fe\u6216\u8005\u5b83\u7684\u957f\u5ea6\u3002\n\n### \u6811\u7684\u76f4\u5f84\u7684\u6c42\u6cd5\n\n\u4e00\u822c\u6765\u5c06\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u6c42\u6570\u7684\u76f4\u5f84\uff0c\u5b83\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(n)$\u3002\n\n#### \u4e24\u6b21\u641c\u7d22\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u6b21 DFS \u6216\u4e24\u6b21 BFS \u6765\u6c42\u6811\u7684\u76f4\u5f84\uff0c\u5176\u539f\u7406\u975e\u5e38\u7b80\u5355\uff1a\u4ece\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 $start$ \u51fa\u53d1\u8fdb\u884c\u7b2c\u4e00\u6b21\u641c\u7d22\uff0c\u627e\u5230\u8ddd\u79bb\u8d77\u70b9\u6700\u8fdc\u7684\u70b9\uff08\u8bb0\u4e3a $deepest$\uff09\uff0c\u518d\u4ece $deepest$ \u51fa\u53d1\u8fdb\u884c\u7b2c\u4e8c\u6b21\u641c\u7d22\uff0c\u627e\u5230\u8ddd\u79bb\u5b83\u6700\u8fdc\u7684\u70b9\uff08\u8bb0\u4e3a $ending$\uff09\u3002$deepest$ \u548c $ending$ \u4e4b\u95f4\u7684\u8def\u5f84\u4fbf\u662f\u8fd9\u68f5\u6811\u7684\u76f4\u5f84\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d $deepest$ \u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u5426\u5219\u7b2c\u4e00\u6b21\u641c\u7d22\u7684\u7ed3\u679c\u4e00\u5b9a\u4e0d\u662f $deepest$\uff0c\u56e0\u4e3a\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e2d\u4e00\u5b9a\u6709\u4e00\u4e2a\u6bd4 $deepest$ \u79bb $start$ \u8fdc\u3002\n\n```cpp\n#define des edge[i].destinationVertex\ninline void BFS(int x, int secondTime){\n    Reset();\n    queue<int> q;\n    q.push(x);\n    vertex[x].vis = true;\n    while(!q.empty()){\n        int cur = q.front();\n        q.pop();\n        for(int i=head[cur];i;i=edge[i].nextEdge){\n            if(!vertex[des].vis){\n                vertex[des].vis = true;\n                vertex[des].depth = vertex[cur].depth + edge[i].value;\n                q.push(des);\n                if(secondTime) vertex[des].father = cur;\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n        if(treeLength < vertex[i].depth){\n            treeLength = vertex[i].depth;\n            deepest = i;\n        }\n}\n```\n\n\u4e0d\u540c\u4e8e\u63a5\u4e0b\u6765\u53ea\u80fd\u7edf\u8ba1\u76f4\u5f84\u957f\u5ea6\u7684\u6811\u5f62 DP\uff0c\u5728\u7b2c\u4e8c\u6b21\u641c\u7d22\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u65f6\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u6700\u540e\u4ece\u641c\u7d22\u5230\u7684 $ending$ \u5f80\u56de\u8d70\uff0c\u5c31\u53ef\u4ee5\u53d6\u5f97\u8fd9\u6761\u76f4\u5f84\u3002\u4e24\u6b21\u641c\u7d22\u7684\u65b9\u6cd5\u867d\u7136\u7801\u91cf\u7a0d\u5927\uff0c\u4f46\u662f\u5b83\u8bb0\u5f55\u4fe1\u606f\u91cf\u5927\uff0c\u4e14\u601d\u7ef4\u7b80\u5355\u5bb9\u6613\u7406\u89e3\u2014\u2014\u4e0d\u8fc7\u5b83\u771f\u6b63\u7684\u81f4\u547d\u7f3a\u70b9\u5728\u4e8e\u9047\u5230\u8d1f\u6743\u8fb9\u5c31\u4f1a\u66b4\u6bd9\u3002\n\n#### \u6811\u5f62 DP\n\n\u8bbe $d[x]$ \u8868\u793a\u4ece x \u51fa\u53d1\u8d70\u5411\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u6240\u80fd\u591f\u5230\u8fbe\u7684\u6700\u8fdc\u8282\u70b9\u7684\u6df1\u5ea6\uff0c$f[x]$ \u8868\u793a\u7ecf\u8fc7 x \u7684\u6811\u4e0a\u6700\u957f\u94fe\u7684\u957f\u5ea6\uff0cx \u7684\u5b50\u8282\u70b9\u5206\u522b\u4e3a $y_1,y_2,\u2026,y_k$\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 $d[x]=max_{1\u2264i\u2264k}(d[y_i]+edge[x,y_i])$\u3002\n\n\u5bf9\u4e8e x \u7684\u4efb\u610f\u4e24\u5b50\u8282\u70b9 $y_i,y_j(j<i)$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7ecf\u8fc7 x \u7684\u6700\u957f\u94fe\u957f\u5ea6\u62c6\u6210 4 \u4e2a\u90e8\u5206\uff1a$d[y_i],d[y_j],edge[x,y_i],edge[x,y_j]$\u3002\u4e8e\u662f\u6709 $f[x]=max_{1\u2264j\u2264i\u2264k}(d[y_i],d[y_j],edge[x,y_i],edge[x,y_j])$\u3002\n\n\u4e8b\u5b9e\u4e0a\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 $y_i,y_j$ \u4e24\u4e2a\u53c2\u6570\u6765\u66f4\u65b0 $f[x]$\u2014\u2014 \u56de\u987e\u4e00\u4e0b $d[x]$ \u7684\u5b9a\u4e49\uff1a\u4ece x \u51fa\u53d1\u8d70\u5411\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u6240\u80fd\u8fbe\u5230\u7684\u6700\u8fdc\u8282\u70b9\u7684\u6df1\u5ea6 \u2014\u2014 \u5728\u5faa\u73af\u679a\u4e3e\u5230 $i$ \u4e4b\u524d\uff0c$d[x]$ \u6240\u8868\u793a\u7684\u5c31\u662f $max_{1\u2264j\u2264i}(d[y_j]+edge[x,y_j])$\uff0c\u5f53\u7136\u8fd9\u4e2a\u503c\u662f $f[x]$ \u7684\u4e00\u90e8\u5206\u3002\u4e5f\u5c31\u662f\u53ef\u4ee5\u5148\u7528 $d[x]+d[y]+edge(x,y)$ \u66f4\u65b0 $f[x]$\uff0c\u518d\u7528 $d[y]+edge[x,y]$ \u66f4\u65b0 $d[x]$\u3002\n\n```cpp\n#define des edge[i].destinationVertex\ninline void DP(int x){\n    vertex[x].vis = true;\n    for(int i=head[x];i;i=edge[i].nextEdge){\n        if(vertex[des].vis) continue;\n        DP(des);\n        treeLength = max(treeLength, vertex[x].depth + vertex[des].depth + edge[i].value);\n        vertex[x].depth = max(vertex[x].depth, vertex[des].depth + edge[i].value);\n    }\n}\n```\n\nDP \u65b9\u6cd5\u7684\u7801\u91cf\u660e\u663e\u5c0f\u4e8e\u641c\u7d22\u65b9\u6cd5\uff0c\u4f46\u662f\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u7531\u4e8e\u53ea\u5173\u6ce8\u72b6\u6001\u7684\u8f6c\u79fb\uff0cDP \u65b9\u6cd5\u53ea\u80fd\u6c42\u51fa\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u7531\u4e8e\u5728\u6811\u5f62\u56fe\u4e0a\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $O(n)$\uff0cDP \u8282\u7ea6\u65f6\u95f4\u7684\u65b9\u6cd5\u5728\u8fd9\u91cc\u53d8\u6210\u4e86\u5b83\u7684\u52a3\u52bf\u3002\u4f46\u662f DP \u65b9\u6cd5\u4e5f\u5f25\u8865\u4e86\u641c\u7d22\u65b9\u6cd5\u6700\u5927\u7684\u4e0d\u8db3 \u2014\u2014 \u5b83\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u79cd\u77ed\u5c0f\u7cbe\u608d\u7684\u65b9\u6cd5\u4e86\u3002\n\n### \u4f8b\u9898\n\n\u4e00\u9053\u6211\u4e2a\u4eba\u611f\u89c9\u633a\u597d\u7684\u9898\uff0c\u8fd9\u91cc\u5f53\u4f5c\u4f8b\u9898\u6765\u505a\uff1a[P3629 \u5de1\u903b](https://www.luogu.com.cn/problem/P3629)\n\n#### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5 n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u6761\u8fb9\u8fb9\u6743\u90fd\u4e3a 1\u3002\u6211\u4eec\u89c4\u5b9a\u201c\u5de1\u903b\u8ddd\u79bb\u201d\u662f\u4ece 1 \u53f7\u70b9\u51fa\u53d1\u5c06\u6811\u4e0a\u6240\u6709\u904d\u5386\u81f3\u5c11\u4e00\u6b21\u518d\u56de\u5230\u8d77\u70b9\u6240\u8d70\u8fc7\u7684\u8fb9\u6743\u548c\u3002\u73b0\u5728\u5728\u6811\u4e0a\u6dfb\u52a0 1 \u6216 2 \u6761\u8fb9\uff0c\u89c4\u5b9a\u6dfb\u52a0\u7684\u8fb9**\u5fc5\u987b\u4e14\u53ea\u80fd\u8d70\u4e00\u6b21**\uff0c\u6c42\u6700\u77ed\u7684\u5de1\u903b\u8ddd\u79bb\u3002\n\n#### \u601d\u8def\n\n\u5728\u8fd8\u6ca1\u6709\u6dfb\u52a0\u4efb\u4f55\u8fb9\u7684\u65f6\u5019\uff0c\u5de1\u903b\u8ddd\u79bb\u663e\u7136\u662f $2*(n-1)$\uff0c\u56e0\u4e3a\u5728\u6811\u4e0a\u5de1\u903b\u4e00\u6b21\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u904d DFS\uff0c\u6bcf\u6761\u8fb9\u90fd\u4f1a\u88ab\u9012\u4e00\u6b21\u5f52\u4e00\u6b21 \u2014\u2014 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7531\u4e8e\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u4ece 1 \u53f7\u70b9\u5230\u8fbe\u6bcf\u4e00\u70b9\u7684\u6700\u77ed\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $vertex[i]$\uff0c\u76f4\u63a5\u8fde\u63a5\u5b83\u7684\u8fb9 $edge[j]$ \u90fd\u4f1a\u5728\u5230\u8fbe $vertex[i]$ \u548c\u4ece $vertex[i]$ \u8fd4\u56de\u65f6\u5404\u88ab\u8d70\u4e00\u904d\u3002\n\n![\u6dfb\u52a0\u4e00\u6761\u8fb9.png](https://i.loli.net/2020/06/04/qT4RLzgUOuF9amc.png)\u6dfb\u52a0\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6dfb\u52a0\u4e00\u6761\u8fb9\u76f8\u5f53\u4e8e\u5728\u56fe\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u73af\uff0c\u7531\u4e8e\u6bcf\u6761\u8fb9\u90fd\u8981\u5de1\u903b\u5230\uff0c\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u73af\u5b8c\u6574\u5730\u8d70\u4e00\u904d\u3002\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6837\u4f8b\u6811\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u6761 $edge_{2,8}$\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u6709\u7531 8\uff0c5\uff0c3\uff0c1\uff0c2 \u6784\u6210\u7684\u73af\u3002\u539f\u672c\u904d\u5386\u73af\u4e0a\u7684\u8fb9\uff08\u9664\u4e86\u65b0\u6dfb\u52a0\u7684\u90a3\u6761\uff09\u5de1\u903b\u8ddd\u79bb\u4e3a 8\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8d70\u8fd9\u4e2a\u73af\u8ddd\u79bb\u5c31\u53ea\u6709 5 \u2014\u2014 \u73af\u4e0a\u6bcf\u6761\u8fb9\u90fd\u5c11\u8d70\u4e86\u4e00\u6b21\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u8d70\u4e86\u4e00\u6b21\u65b0\u6dfb\u52a0\u7684\u8fb9\u3002\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u5982\u679c\u7528\u5176\u4e24\u7aef\u70b9\u4e3a $i,j$\uff0c\u5176\u957f\u5ea6\u4e3a $chain[i][j]$\uff0c\u90a3\u4e48\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u904d\u5386\u8fd9\u4e2a\u94fe\u53ea\u9700\u8981 $chain[i][j]+1$ \u7684\u8def\u7a0b\uff0c\u5373\u53ef\u4ee5\u8282\u7ea6 $chain[i][j]-1$ \u7684\u8def\u7a0b\u3002\n\n\u6240\u4ee5\u6dfb\u52a0\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u957f\u5ea6 $treeLength$\uff0c\u5de1\u903b\u8def\u5f84\u957f\u5ea6\u4fbf\u662f $2*(n-1)-(treeLength-1)$\u3002\n\n\u6dfb\u52a0\u4e24\u6761\u8fb9\u65f6\uff0c\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u601d\u8def\u6dfb\u52a0\u597d\u7b2c\u4e00\u6761\u8fb9\uff0c\u91cd\u70b9\u5904\u7406\u7b2c\u4e8c\u6761\u8fb9\u3002\u6dfb\u52a0\u7b2c\u4e8c\u6761\u8fb9\u5c31\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u73af\uff0c\u5982\u679c\u8fd9\u4e2a\u73af\u4e0e\u7b2c\u4e00\u4e2a\u73af\u6beb\u4e0d\u76f8\u5e72\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u73af\u8282\u7ea6\u7684\u8def\u5f84\u957f\u5ea6\u3002\n\n![\u6dfb\u52a0\u4e24\u6761\u8fb9.png](https://i.loli.net/2020/06/04/5vs4JYrUhQm9VRa.png)\u4f46\u662f\u5f53\u7b2c\u4e8c\u4e2a\u73af\u4e0e\u7b2c\u4e00\u4e2a\u73af\u6709\u91cd\u5408\u7684\u8fb9\u65f6\uff0c\u4e8b\u60c5\u5c31\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u4e86\u3002\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6837\u4f8b\u6811\uff0c\u518d\u6dfb\u52a0\u4e00\u6761 $edge_{4,6}$\uff0c\u5c31\u5f62\u6210\u4e86\u7531 3\uff0c5\uff0c6\uff0c4 \u6784\u6210\u7684\u7b2c\u4e8c\u4e2a\u73af\u3002\u6b64\u65f6 $edge_{3,5}$ \u65e2\u5728\u7b2c\u4e00\u4e2a\u73af\u4e0a\u53c8\u5728\u7b2c\u4e8c\u4e2a\u73af\u4e0a\u3002\u7531\u4e8e\u6bcf\u6761\u8fb9\u90fd\u8981\u88ab\u5de1\u903b\u5230\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u628a\u7b2c\u4e8c\u4e2a\u73af\u4e5f\u5b8c\u6574\u5730\u8d70\u4e00\u904d\u3002\u8fd9\u6837\u4e00\u6765 $edge_{3,5}$ \u5c31\u88ab\u8d70\u4e86\u4e24\u8fb9\uff0c\u548c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u8fb9\u7684\u65f6\u5019\u76f8\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\u6dfb\u52a0\u7b2c\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u51cf\u5c11\u7684\u90a3\u6b21\uff0c\u53c8\u88ab\u8d70\u56de\u6765\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6dfb\u52a0\u4e00\u6761\u8fb9\u65f6\u6c42\u51fa\u7684\u76f4\u5f84\u662f\u201c\u8981\u88ab\u51cf\u5c11\u7684\u8ddd\u79bb\u201d\uff0c\u56e0\u4e3a\u6709\u76f4\u5f84\u957f\u5ea6\u7684\u8fb9\u88ab\u5c11\u8d70\u4e86\u4e00\u6b21\u3002\u73b0\u5728\u6dfb\u52a0\u7b2c\u4e8c\u6761\u8fb9\u65f6\u6709\u4e9b\u8fb9\u5c11\u8d70\u7684\u90a3\u4e00\u6b21\u88ab\u52a0\u56de\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7b2c\u4e00\u6b21\u6c42\u51fa\u7684\u76f4\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u6743\u53d6\u8d1f\uff0c\u8fd9\u6837\u5728\u8d70\u7b2c\u4e8c\u4e2a\u73af\u7684\u65f6\u5019\u8d70\u4e0a\u8fd9\u4e9b\u91cd\u5408\u7684\u8fb9\uff0c\u5c06\u4f1a\u5728\u7b54\u6848\u4e2d\u51cf\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u5373\u201c\u4e0d\u4ec5\u6ca1\u6709\u518d\u51cf\u5c11\u8ddd\u79bb\uff0c\u53cd\u800c\u8fd8\u8ba9\u672c\u6765\u88ab\u51cf\u5c11\u7684\u8fb9\u53c8\u88ab\u8d70\u4e86\u201d\u3002\n\n\u518d\u4fee\u6539\u540e\u7684\u6811\u4e0a\u6c42\u76f4\u5f84\u6dfb\u52a0\u7b2c\u4e8c\u6761\u8fb9\uff0c\u8fd9\u4e2a\u9898\u5c31\u57fa\u672c\u505a\u5b8c\u4e86\u3002\u540c\u6dfb\u52a0\u7b2c\u4e00\u6761\u8fb9\u4e00\u6837\uff0c\u8282\u7701\u7684\u8def\u5f84\u957f\u5ea6\u662f $treeLength-1$\u3002\n\n\u56de\u8fc7\u5934\u6765\u770b\uff0c\u7b2c\u4e00\u6b21\u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u6c42\u51fa\u6811\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u6c42\u51fa\u76f4\u5f84\u7684\u5177\u4f53\u65b9\u6848\uff0c\u56e0\u6b64\u4f7f\u7528\u4e24\u6b21\u641c\u7d22\u7684\u65b9\u6cd5\uff1b\u7b2c\u4e8c\u6b21\u53ea\u9700\u8981\u6c42\u51fa\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u4e14\u56e0\u4e3a\u4fee\u6539\u540e\u51fa\u73b0\u4e86\u8d1f\u6743\u8fb9\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u6811\u5f62 DP \u7684\u65b9\u6cd5\u6c42\u76f4\u5f84 \u2014\u2014 \u4e00\u6b21\u5c31\u628a\u4e24\u79cd\u65b9\u6cd5\u7ec3\u4e86\uff0c\u8fd9\u96be\u9053\u4e0d\u662f\u4e00\u9053\u5f88\u5999\u7684\u9898\u5417\uff1f\n\n#### Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<queue>\n#define des edge[i].destinationVertex\nusing namespace std;\nconst int MaxN = 100005;\nstruct Edge{\n    int destinationVertex, nextEdge, value;\n}edge[MaxN * 2];\nstruct Vertex{\n    int depth, father;\n    bool vis;\n}vertex[MaxN];\nint head[MaxN], tot, n, k, deepest, treeLength;\nbool vis[MaxN];\n\ninline void AddEdge(int u, int v){\n    tot++;\n    edge[tot].destinationVertex = v;\n    edge[tot].nextEdge = head[u];\n    edge[tot].value = 1;\n    head[u] = tot;\n}\n\ninline void Reset(){\n    for(int i=1;i<=n;i++){\n        vertex[i].depth = 0;\n        vertex[i].vis = false;\n    }\n}\n\ninline void BFS(int x, int secondTime){\n    Reset();\n    queue<int> q;\n    q.push(x);\n    vertex[x].vis = true;\n    while(!q.empty()){\n        int cur = q.front();\n        q.pop();\n        for(int i=head[cur];i;i=edge[i].nextEdge){\n            if(!vertex[des].vis){\n                vertex[des].vis = true;\n                vertex[des].depth = vertex[cur].depth + edge[i].value;\n                q.push(des);\n                if(secondTime) vertex[des].father = cur;\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n        if(treeLength < vertex[i].depth){\n            treeLength = vertex[i].depth;\n            deepest = i;\n        }\n}\n\ninline void Change(int x){\n    while(vertex[x].father){\n        int fa = vertex[x].father;\n        for(int i=head[fa];i;i=edge[i].nextEdge){\n            if(des == x){\n                edge[i].value = -1;\n                break;\n            }\n        }   \n        for(int i=head[x];i;i=edge[i].nextEdge){\n            if(des == fa){\n                edge[i].value = -1;\n                break;\n            }\n        }\n        x = fa;\n    }\n}\n\ninline void DP(int x){\n    vertex[x].vis = true;\n    for(int i=head[x];i;i=edge[i].nextEdge){\n        if(vertex[des].vis) continue;\n        DP(des);\n        treeLength = max(treeLength, vertex[x].depth + vertex[des].depth + edge[i].value);\n        vertex[x].depth = max(vertex[x].depth, vertex[des].depth + edge[i].value);\n    }\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<n;i++){\n        int u, v;\n        scanf(\"%d%d\",&u,&v);\n        AddEdge(u,v), AddEdge(v,u);\n    }\n    if(k == 1){\n        BFS(1, 0);\n        BFS(deepest, 0);\n        printf(\"%d\", 2 * n - vertex[deepest].depth - 1);\n    }\n    else{\n        BFS(1, 0);\n        BFS(deepest, 1);\n        int firstLength = vertex[deepest].depth;\n        Change(deepest);\n        Reset();\n        treeLength = 0;\n        DP(1);\n        printf(\"%d\", 2 * n - treeLength - firstLength);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1591375326,
        "uid": 235832,
        "name": "potatoler",
        "ccfLevel": 4,
        "title": "\u6811\u5b66\u6742\u8c081: \u6811\u7684\u76f4\u5f84"
    },
    {
        "content": "\u8003\u8651\u4e0d\u52a0\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u8981\u56de\u6eaf\u4e00\u904d\uff0c\u7b54\u6848\u4e3a$2*(n-1)$\n\n\u52a0\u4e0a\u4e00\u6761\u8fb9\u540e\uff0c\u7b54\u6848\u4e3a$2*(n-1)-l+1$(`l`\u4e3a\u6700\u957f\u94fe\u957f\u5ea6\uff09\u3002\n\n\u518d\u8003\u8651\u52a0\u4e0a\u4e24\u6761\u8fb9\uff0c\u53ef\u4ee5\u5148\u6c42\u51fa\u6700\u957f\u94fe\u7684\u8ddd\u79bb\uff0c\u5c06\u6700\u957f\u94fe\u4e0a\n\n\u7684\u8fb9\u6743\u90fd\u53d6\u53cd\uff0c\u518d\u6c42\u4e00\u6b21\u6700\u957f\u94fe\uff0c\u56e0\u4e3a\u52a0\u4e0a\u7b2c\u4e8c\u6761\u8fb9\u53ef\u4ee5\u5206\n\n\u4e3a\u4e0e\u7b2c\u4e00\u6761\u8fb9\u73af\u91cd\u5408\u6216\u8005\u4e0d\u91cd\u5408\uff0c\u4f46\u65e0\u8bba\u662f\u54ea\u79cd\uff0c\u90fd\u53ef\u4ee5\u526a\u6389\u4e24\u4e2a\u73af\u7684\u5927\u5c0f\uff0c\u53ea\u4e0d\u8fc7\u91cd\u5408\u7684\u65f6\u5019\u8981\u52a0\u4e0a\u91cd\u5408\u90e8\u5206\u800c\u5df2.\n\n\u6240\u4ee5\u53ef\u4ee5\u5c06\u6700\u957f\u94fe\u7684\u8fb9\u6743\u53d6\u53cd\uff0c\u7b54\u6848\u4e3a$(n-1)*2-(L1-1)-(L2-1)$\n\n\u601d\u7ef4\u96be\u5ea6\u8fd8\u662f\u6709\uff0c\u7279\u522b\u5c31\u662f\u5728\u6700\u957f\u94fe\u53d6\u53cd\u90a3\u91cc\uff0c\u526a\u6389\u91cd\u5408\u90e8\u5206\u4e00\u4e2a\u4e0d\u597d\u6c42\u7684\u95ee\u9898\u88ab\u53d6\u53cd\u64cd\u4f5c\u5de7\u5999\u7684\u89e3\u51b3\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#define re register int\n#define ll long long \n#define MAXN 100010\n#define inf 0x3f3f3f3f;\nusing namespace std;\nstruct EDGE{\n\tint u,v,w,nxt;\n}e[MAXN*2];\nint a[MAXN],head[MAXN],d[MAXN],pre[MAXN],vis[MAXN];\nint n,m,k,l1,l2,cnt=1;//\u53cd\u5411\u8fb9\nvoid add(int u,int v,int w){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\te[cnt].w=w;\n\thead[u]=cnt;\n}\nint bfs(int x){\n\tmemset(d,0,sizeof(d));\n    memset(vis,0,sizeof(vis));\n    memset(pre,0,sizeof(pre));\n\tint ans=0;\n\tqueue<int>q;\n\tq.push(x);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=1;\n\t\tfor(re i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v,w=e[i].w;\n\t\t\tif(vis[v])continue;\n\t\t\td[v]=d[u]+w;\n\t\t\tpre[v]=i;\n\t\t\tq.push(v);\n\t\t}\n\t}\n\tfor(re i=1;i<=n;i++)\n\t\tif(d[ans]<d[i])ans=i;\n\treturn ans;\n}\nvoid dp(int u){\n\tvis[u]=1;\n\tfor(re i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(vis[v])continue;\n\t\tdp(v);\n\t\tl2=max(l2,d[v]+d[u]+w);\n\t\td[u]=max(d[u],d[v]+w);\n\t}\n\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(re i=1;i<=n-1;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v,1);\n\t\tadd(v,u,1);\n\t}\n\tint l=bfs(1);\n\tint r=bfs(l);\n\tl1=d[r];\n//\tprintf(\"%d\\n\",l1);\n\tif(k==1){\n\t\tprintf(\"%d\\n\",2*(n-1)-l1+1);\n\t\treturn 0;\n\t}\n\tint x=r;\n\twhile(x!=l){\n\t\tint i=pre[x];\n\t\te[i].w=e[i^1].w=-1;\n\t\tx=e[i^1].v;\n\t}//\u5c06\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u53d6\u53cd\n\tmemset(vis,0,sizeof(vis));\n    memset(d,0,sizeof(d));\n\tdp(1);\n\tprintf(\"%d\\n\",2*n-l1-l2);\n  //\u5176\u5b9e\u539f\u6765\u662f2*(n-1)-(l1-1)-(l2-1),\u82e5\u4e24\u4e2a\u73af\u6709\u91cd\u53e0\uff0c\u76f8\u5f53\u4e8e\u52a0\u4e0a\u91cd\u53e0\u90e8\u5206\n\treturn 0;\n}\n```\n",
        "postTime": 1567297187,
        "uid": 57823,
        "name": "\u7ea2\u8272OI\u518d\u4e34",
        "ccfLevel": 0,
        "title": "P3629\u5de1\u903b"
    },
    {
        "content": "## **\u9898\u76ee\u5927\u610f\uff1a\u5728\u4e00\u4e2an\u4e2a\u70b9\uff0c\uff08n-1\uff09\u6761\u8fb9\u65e0\u5411\u56fe\u4e2d\u6dfb\u52a0k\u6761\u8fb9\uff08k\u4e3a1/2\uff09\uff0c\u7136\u540e\u6c42\u904d\u5386\u5b8c\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u8ddd\u79bb//\u9898\u76ee\u58f0\u660e\u6bcf\u6761\u8fb9\u7684\u8ddd\u79bb\u90fd\u4e3a1**\n### \u90a3\u4e48\u5c31\u53ef\u4ee5\u770b\u51fak\u7684\u503c\u975e\u5e38\u5c0f\uff0c\u53ea\u80fd\u53d61\u62162\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6765\u5bf9k\u8fdb\u884c\u5206\u6790\u5165\u624b\uff1a\n### 1.\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u4efb\u4f55\u4e00\u6761\u8fb9\u65f6\uff1a\n####  \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u8981\u641c\u5b8c\u6240\u6709\u8fb9\uff0c\u5c31\u5fc5\u987b\u8981\u7ecf\u8fc72(n-1)\u7684\u8ddd\u79bb\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u6709\u8fb9\u8fde\u63a5\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8fb9\uff0c\u6211\u4eec\u641c\u7d22\u65f6\u5c31\u8981\u9012\u5f52\u4e00\u6b21\uff0c\u56de\u6eaf\u4e00\u6b21\u3002\u5373\u6bcf\u4e00\u6761\u8fb9\u90fd\u4f1a\u88ab\u7ecf\u8fc72\u6b21\u3002\uff08\u8fd9\u4e2a\u5f88\u663e\u7136\u5427\uff0c\u6015~~\u5946\u5946\u4eec~~\u4e0d\u7406\u89e3\uff0c\u7ed9\u5f20\u56fe\u4e86\u89e3\u4e00\u4e0b\uff09\n#  (^-^)\n![](https://t1.picb.cc/uploads/2019/07/29/grjBwi.png)\n### 2.\u65b0\u52a0\u5165\u4e00\u6761\u8fb9\u65f6\uff1a\n#### \u6211\u4eec\u4f1a\u53d1\u73b0\u53d8\u6210\u4e86n\u4e2a\u70b9\uff0cn\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u5b9a\u4f1a\u6709\u73af\u7684\u51fa\u73b0\uff0c\u4f46\u662f\u7a0d\u5fae\u89c2\u5bdf\u4e00\u4e0b\u5373\u53ef\u53d1\u73b0\uff1a\u65b0\u6210\u7684\u90a3\u4e2a\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ea\u7528\u7ecf\u8fc7\u4e00\u6b21\u4e86\uff01\uff01 :) \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7701\u4e86\u5f88\u591a\u8ddd\u79bb\uff0c\u4e5f\u5c31\u4e0e\u6211\u4eec\u8981\u6c42\u7684\u4e1c\u897f\u5408\u4e0a\u62cd\u4e86\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u7b54\u6848\u6700\u5c0f\uff0c\u5c31\u53ea\u9700\u8981\u627e\u5230\u8fd9\u9897\u6811\u4e0a\u76f8\u8ddd\u6700\u8fdc\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u627e\u5230\u6811\u7684\u76f4\u5f84\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3aL\uff0c\u5c06\u4ed6\u4eec\u8fde\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5c31\u6709\u4e86\u7b54\u6848\uff0cans=2*(n-1)-L+1=2n-2-L+1=2n-L-1;\n![](https://t1.picb.cc/uploads/2019/07/29/grpZLM.jpg)\n###### //\u84dd\u8272\u7684\u90e8\u5206\u6bcf\u6761\u8fb9\u53ea\u7528\u904d\u5386\u4e00\u6b21\n### 3.\u8981\u52a0\u51652\u6761\u8fb9\u65f6\uff1a\n#### \u5728\u65b0\u52a0\u5165\u4e00\u6761\u8fb9\u7684\u57fa\u7840\u4e0a\uff0c\u53c8\u4f1a\u591a\u51fa\u6765\u4e00\u4e2a\u65b0\u7684\u73af\u5982\u679c\u4e24\u4e2a\u73af\u4e0d\u91cd\u5408\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd8\u662f\u6bcf\u4e2a\u73af\u4e0a\u7684\u8fb9\u90fd\u53ea\u7528\u904d\u5386\u4e00\u6b21\uff1b\u5982\u679c\u6709\u91cd\u5408\u90e8\u5206\u7684\u8bdd\uff0c\u90a3\u4e48\u4e3a\u4e86\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u90fd\u904d\u5386\u5230\uff0c\u90a3\u5c31\u53ea\u6709\u904d\u5386\u90a3\u4e24\u6761\u8fb9\u4e24\u6b21\uff1b\n![](https://t1.picb.cc/uploads/2019/07/29/grpUHJ.jpg)//\u84dd\u8272\u90e8\u5206\u8981\u904d\u53862\u6b21\n### \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7531\u4ee5\u4e0a\u601d\u8def\u63a8\u5f97\u4e00\u4e2a\u9898\u89e3\u601d\u8def\n#### Step One:\u5728\u6700\u521d\u7684\u6811\u4e0a\u6c42\u76f4\u5f84\uff0c\u8bbe\u76f4\u5f84\u4e3aL1\uff0c\u518d\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u53d6\u53cd\u3002\n/***\u4e3a\u4ec0\u4e48\u8981\u53bb\u53d6\u53cd\u5462\uff1f\uff1f\nBecause:\u6211\u4eec\u8fd8\u8981\u518d\u4e00\u6b21\u6c42\u76f4\u5f84\uff0c\u4f46\u662f\u5982\u679c\u8ba9\u4ed6\u4eec\u4e0d\u6539\u53d8\u7684\u8bdd\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97\u540c\u4e00\u6761\u76f4\u5f84\uff0c\u91cd\u590d\u8ba1\u7b97\u4e0d\u4f46\u4e0d\u4f1a\u53d8\u5c11\uff0c\u8fd8\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927,\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fb9\u6743\u53d8\u6210\u76f8\u53cd\u6570\uff0c\u5373\u53ef\u907f\u514d\u8fd9\u79cd\u60c5\u51b5***/\n#### //ps\uff1a\u5982\u679c\u53ea\u7528\u52a0\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u5c31\u8ba1\u7b97\u5b8c\u7b2c\u4e00\u904d\u76f4\u5f84\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u4e86\uff0cans=a*n-L1-1\u3002\u4e0e\u540e\u9762\u7684\u8ba1\u7b97\u5b8c\u5168\u6ca1\u6709\u4e00\u70b9\u5173\u7cfb\u6240\u4ee5\u8981\u8bb0\u5f97\u5206\u7c7b\u8ba8\u8bba\n#### Step Two\uff1a\u5728\u540e\u6765\u7684\u6811\u4e0a\u518d\u6b21\u6c42\u76f4\u5f84\uff0c\u8bbe\u76f4\u5f84\u4e3aL2\n### **Thus\uff0c\u6211\u4eec\u8981\u7684\u7b54\u6848\u5c31\u662f2*(n-1)-(L1-1)-(L2-1)=2n-L1-L2*\n#### //\u7ecf\u8fc7\u6211\u4eec\u7684\u7b2c\u4e00\u6ce2\u64cd\u4f5c\uff0c\u4e24\u4e2a\u73af\u7684\u91cd\u53e0\u90e8\u5206\uff08\u90a3\u4e2a\u672c\u6765\u8981\u7ecf\u8fc7\u4e24\u6b21\u7684\u8fb9\uff09\u5c31\u53d8\u6210\u53ea\u7528\u7ecf\u8fc7\u4e00\u6b21\u4e86\uff0c\u800c\u5728\u8ba1\u7b97\u4e00\u6b21\u540e\u5c31\u76f8\u5f53\u4e8e\u628a\u6211\u4eec\u4e4b\u524d\u51cf\u53bb\u7684\u53c8\u52a0\u4e86\u56de\u6765\uff08\u53d6\u4e86\u53cd\uff09\n\n\n~~\u653e\u4e00\u6ce2\u4ee3\u7801\uff0c\u884c\u5584\u79ef\u5fb7~~\n------------\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,bj,S1,maxx,maxxx,maxn,cnt=1,h[200005],vst[200005],dis[200005],prt[200005],edge[200005],deep[200005];\nstruct edge\n{\n\tint to,next,w;\n}a[200005];\nvoid addedge(int x,int y)//\u524d\u5411\u661f\u5efa\u8fb9\u65f6\u987a\u624b\u5c06\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u8d4b\u4e3a1 \n{\n\tcnt++;\n\ta[cnt].to=y;\n\ta[cnt].next=h[x];\n\ta[cnt].w=1;\n\th[x]=cnt;\n}\nvoid dfs(int x,int d/*d\u662f\u76ee\u524d\u5c42\u6570\uff08\u51e0\u5c42\u5c31\u6709\u591a\u8fdc\u3002\u3002\u8ddd\u79bb\u552f\u4e00\uff09\uff0cdfs1\u4e2d\u76f8\u540c*/)\n{\n\tif(maxx<d)\n\t{\n\t\tmaxx=d;\n\t\tbj=x;\n\t}\n\tvst[x]=1;\n\tfor(int i=h[x];i;i=a[i].next)\n\t{\n\t\tint y=a[i].to;\n\t\tif(vst[y])\n\t\t\tcontinue;\n\t\tdfs(y,d+a[i].w);\n\t}\n}\nbool dfs1(int x,int d)\n{\n\tif(d==maxx)\n\t\treturn 1;\n\tvst[x]=1;\n\tfor(int i=h[x];i;i=a[i].next)\n\t{\n\t\tint y=a[i].to;\n\t\tif(vst[y])\n\t\t\tcontinue;\n\t\tif(dfs1(y,d+1))\n\t\t{\n\t\t\ta[i].w=a[i^1].w=-a[i].w;//\u6211\u4eec\u7684cnt\u521d\u59cb\u4e3a\u4e00\uff0c\u4e3a\u4e86\u8fd9\u91cc,\u8fd9\u6837\u7684\u8bdd\u7f16\u53f7\u5c31\u662f\u4ece2->2n-1\u4e86\n            //\u6ca1\u6709\u4e861\u8fd9\u4e2a\u7279\u6b8a\u73a9\u610f\u5c31\u53ef\u4ee5\u7528\u5f02\u6216\u6765\u627e\u4e24\u70b9\u95f4\u7684\u53e6\u4e00\u6761\u8fb9\uff0c\u6253\u4e2a\u6bd4\u65b9\uff0c2^1=3,3^1=2     ^-^\u5176\u5b9e\u5c31\u662f\u81ea\u5df1\u90a3\u6761\u8fb9\uff0c\u6211\u4eec\u5efa\u7684\u662f\u53cc\u8fb9\uff0c\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\nvoid dp(int x)//\u7531\u4e8e\u6211\u4eec\u7b2c\u4e8c\u6b21\u53ea\u8981\u6c42\u76f4\u5f84\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u7528dfs\u6216bfs\u6765\u627e\u5566 \n{\n\tvst[x]=1;\n\tfor(int i=h[x];i;i=a[i].next)\n\t{\n\t\tint y=a[i].to;\n\t\tif(vst[y])\n\t\t\tcontinue;\n\t\tdp(y);\n\t\tmaxxx=max(maxxx,dis[x]+dis[y]+a[i].w);\n\t\tdis[x]=max(dis[x],dis[y]+a[i].w);\n\t}\n}\n/*\n\u591a\u4e00\u53e5\u5634\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528dp\uff0c\u8fd8\u6709\u4e00\u70b9\u539f\u56e0:\n\u6211\u4eec\u5728\u4e4b\u524d\u5c31\u5c06\u8fb9\u6743\u53d6\u53cd\u4e86\uff0c\u8fb9\u7684\u957f\u5ea6\u53d8\u6210\u4e86\u8d1f\u6570\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4ec5\u7b80\u5355\u7684\u7528dfs\u6216bfs\u6765\u7d2f\u52a0\u4e86\ndfs\u6216bfs\u7684\u672c\u8d28\u5c31\u662f\u7d2f\u52a0\u8fb9\u6743,\u800cdp\u5219\u662f\u53d6\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6837-1\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\u4e86 \n*/\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdfs(1,0);\n\tS1=bj;\n\tmemset(vst,0,sizeof(vst));\n\tdfs(bj,0);\n\tif(m==1)\n\t{\n\t\tprintf(\"%d\\n\",2*n-maxx-1);\n\t\treturn 0;\n\t}\n\tmemset(vst,0,sizeof(vst));\n\tdfs1(S1,0);\n\tmemset(vst,0,sizeof(vst));\n\tdp(1);\n\tprintf(\"%d\\n\",2*n-maxx-maxxx);\n\treturn 0;\n}\n/*\n8 1\n1 2\n3 1\n3 4\n5 3\n7 5\n8 5\n5 6\n*/\n/*\n8 2\n1 2\n3 1\n3 4\n5 3\n7 5\n8 5\n5 6\n*/\n/*\n5 2\n1 2\n2 3\n3 4\n4 5\n*/\n```\n\n",
        "postTime": 1564389746,
        "uid": 71987,
        "name": "iamY",
        "ccfLevel": 0,
        "title": "BSOJ 2743 -- \u3010APIO2010\u3011\u5de1\u903b"
    },
    {
        "content": "\u5982\u679c\u8003\u8651\u4e0d\u7b97\u4e0a\u65b0\u4fee\u7684\u9053\u8def\uff0c\u90a3\u4e48\u7b54\u6848\u663e\u7136\u4e3a$2*(n-1)$\u3002\n\n\u8003\u8651$k=1$\u7684\u60c5\u51b5\uff0c\u4f1a\u53d1\u73b0\u5982\u679c\u6211\u4eec\u65b0\u4fee\u5efa\u4e00\u4e2a\u9053\u8def\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u4e00\u6bb5\u8def\u7a0b\u5c11\u8d70\u4e00\u904d\u3002\u8fd9\u65f6\u9009\u62e9\u8fde\u63a5\u6811\u7684\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n\n\u96be\u5c31\u96be\u5728$k=2$\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u4e0a\u9762\u7684\u601d\u8def\uff0c\u9996\u5148\u80af\u5b9a\u8fde\u63a5\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\u6700\u4f18\u3002\u5047\u8bbe\u6211\u4eec\u8fde\u63a5\u7684\u662f$x,y$\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5b83\u4eec\u5230\u76f4\u5f84\u7684\u8ddd\u79bb\u5206\u522b\u4e3a$dis[x],dis[y]$\uff0c\u5e76\u8bbe\u76f4\u5f84\u4e0a\u4e24\u70b9\u7684\u8ddd\u79bb\u4e3a$d[u,v]$\uff0c\u8fd9\u91cc$u,v$\u5206\u522b\u4e3a\u53f6\u5b50\u7ed3\u70b9\u6240\u5728\u94fe\u548c\u76f4\u5f84\u7684\u4ea4\u70b9\u3002\n\n\u56e0\u6b64\u6700\u540e\u7684\u7b54\u6848\u4f1a\u589e\u52a0$d[u,v]-dis[x]-dis[y]$\u3002\u8981\u4f7f\u7b54\u6848\u6700\u5c0f\uff0c\u90a3\u4e48\u4e5f\u5c31\u4e5f\u662f\u4f7f\u5f97$dis[x]+dis[y]-d[u,v]$\u6700\u5927\u3002\u8111\u8865\u4e00\u4e0b\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u6240\u6709\u76f4\u5f84\u4e0a\u9762\u7684\u8fb9\u6743\u53d6\u53cd\u8fc7\u540e\uff0c\u6811\u7684\u6700\u957f\u94fe\u3002\n\n\u6240\u4ee5\u518d\u6c42\u4e00\u6b21\u6811\u7684\u76f4\u5f84\u5c31\u597d\u4e86\u3002\u56e0\u4e3a\u6700\u540e\u6709\u8d1f\u8fb9\u6743\u5b58\u5728\uff0c\u901a\u8fc7$dfs/bfs$\u6765\u6c42\u4f1a\u51fa\u9519\u3002\u6240\u4ee5\u6700\u540edp\u4e00\u6b21\u5c31\u597d\u5566\u3002\n\n\u4ee3\u7801\u5982\u4e0b:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5 + 5;\nint n, k;\nstruct Edge{\n    int u, v, next, w;\n}e[N << 1];\nint head[N], tot;\nvoid adde(int u, int v) {\n    e[tot].w = 1; e[tot].v = v; e[tot].next = head[u]; head[u] = tot++;\n}\nint vis[N], f[N], d[N], dp[N];\nvoid dfs(int u, int fa) {\n    f[u] = fa;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(v != fa) {\n            d[v] = d[u] + e[i].w;\n            dfs(v, u) ;\n        }\n    }\n}\nint mx, p, L;\nvoid Get(int x) {\n    d[x] = mx = 0;\n    dfs(x, 0);\n    for(int i = 1; i <= n; i++)\n        if(d[i] > mx) mx = d[i], p = i;\n}\nint solve() {\n    Get(1);Get(p);\n    return mx;\n}\nvoid dfs2(int u, int fa) {\n    vis[u] = 1;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(v == fa || !vis[v]) continue ;\n        e[i].w = e[i ^ 1].w = -1;\n        dfs2(v, u) ;\n    }\n}\nvoid Dp(int u, int fa) {\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(v == fa) continue ;\n        Dp(v, u);\n        L = max(L, dp[u] + dp[v] + e[i].w) ;\n        dp[u] = max(dp[u], dp[v] + e[i].w) ;\n    }\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    cin >> n >> k;\n    memset(head, -1, sizeof(head)) ;\n    for(int i = 1; i < n; i++) {\n        int u, v;\n        cin >> u >> v;\n        adde(u, v); adde(v, u);\n    }\n    int l = solve() ;\n    int ans = 2 * (n - 1) - l + 1;\n    if(k == 2) {\n        int u = p;\n        while(u != 0) {\n            vis[u] = 1;\n            u = f[u];\n        }\n        dfs2(p, 0) ;\n        Dp(1, 0) ;\n        ans = ans - L + 1;\n    }\n    cout << ans ;\n    return 0;\n}\n\n```\n",
        "postTime": 1557409399,
        "uid": 29563,
        "name": "heyuhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "## \u6211\u8981\u8bf4\uff1a\u8d1f\u6743\u6811\u5343\u4e07\u522b\u7528dfs\u627e\u76f4\u5f84\u3002\u3002\u3002\n\n### ~~\u672c\u6765\u770b\u4e86\u770b\u9898\u89e3\uff0c\u540e\u6765\u89c9\u5f97\u9898\u89e3\u90fd\u592a\u4e0d\u53cb\u597d\uff08\u6211\u592a\u83dc\u4e86\uff09\uff0c\u4e00\u6c14\u4e4b\u4e0b\u81ea\u5df1\u6253\u3002\u3002\u3002\u4e00\u6253\u6253\u5230\u7b2c\u4e8c\u5929QAQ\u3001\u3001\u3001\u7ba1\u7406\u5458\u5927\u5927\u6c42\u8fc7\u554a\u3002\u3002\u3002\u3002~~\n\u5176\u5b9e\u81ea\u5df1\u4e0d\u660e\u767d\u7684\u4e3b\u8981\u662f\u6811\u7684\u76f4\u5f84\u7684\u8bb0\u5f55\u3002\u3002\u3002\u6240\u4ee5\u5c31\u81ea\u5df1\u7528\u9012\u5f52\u6253\u4e86\u4e00\u4e2a\u51fd\u6570 ~~\uff0c\u5c31\u662f\u6162\u4e8630ms\uff1f~~\n\n\u9996\u5148\u4ec0\u4e48\u8fb9\u4e5f\u4e0d\u52a0\u65f6\uff0c\u603b\u8def\u7a0b\u5c31\u662f\n#### 2*(n-1)\n\n\u8003\u8651k=1\u7684\u65f6\u5019\uff0c\u7b54\u6848\u663e\u7136\u662f\n\n#### 2*(n-1)-\u76f4\u5f84+1=2*n-\u76f4\u5f84-1\uff0c\n\n\u5982\u679c\u80fd\u52a0\u4e00\u6761\u8fb9\u7684\u8bdd\uff0c\u56e0\u4e3a\u5e0c\u671b\u51cf\u5c11\u7684\u5c3d\u53ef\u80fd\u591a\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u628a\u76f4\u5f84\u7684\u9996\u5c3e\u63a5\u8d77\u6765\uff0c\u5c31\u4e0d\u9700\u8981\u6765\u56de\u8d70\uff0c\u52a0\u4e00\u5c31\u662f\u52a0\u4e86\u8fd9\u4e00\u6761\u65b0\u52a0\u5165\u7684\u8fb9\u3002\n\n\u800ck=2\u7684\u65f6\u5019\uff0c\u9996\u5148\u8fd8\u662f\u5f80\u6700\u957f\u94fe\u4e0a\u9762\u601d\u8003\u3002\u7136\u800c\u505ak=1\u7684\u65f6\u5019\u5df2\u7ecf\u7528\u6389\u4e86\u4e00\u6bb5\uff0c\u6211\u4eec\u9700\u8981k=2\u7684\u548ck=1\u7684\u4e0d\u91cd\u53e0\u3002\n\n\u4e8e\u662f\u4e4e\uff0c\u6211\u4eec\u8dd1\u5b8c\u76f4\u5f84\u540e\u4e4b\u540e\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u5168\u90e8\u4fee\u6539\u4e3a-1\uff0c\u518d\u8dd1\u4e00\u904d\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\u3002\u90a3\u6743\u503c\u4e3a-1\u7684\u8fb9\u53c8\u88ab\u9009\u4e86\u5c31\u662f\u8003\u8651\u7b2c\u4e00\u6b21\u7b97\u8fd9\u6761\u8fb9\u7684\u65f6\u5019\u52a0\u4e861\uff0c\u7b2c\u4e8c\u6b21\u7684\u65f6\u5019\u662f-1\uff0c\u76f8\u5f53\u4e8e\u662f\u8fd9\u6761\u8fb9\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u8d21\u732e\u3002\u6240\u4ee5\u6700\u540e\u7b54\u6848\u662f\n#### 2*(n-1)-(\u76f4\u5f841-1)-(\u76f4\u5f842-1)=2*n-\u76f4\u5f841-\u76f4\u5f842\n\n\n\u8d1f\u6743\u7684\u6811\u4e00\u5b9a\u8981\u7528DP\u8dd1\u76f4\u5f84\uff0c\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u50bb\u4e4e\u4e4e\u7684\u7528dfs\uff08\u5984\u60f3dfs\u4e00\u77f3\u4e8c\u9e1f\uff0c\u4f55\u4e0d\u5982\u76f4\u63a5\u5168DP\uff08\u4f46\u6211\u4e0d\u4f1a\u7528DP\u8bb0\u8def\u5f84\uff09\uff09\n\n\u54ea\u4f4d\u5927\u4f6c\u80fd\u6559\u6559\u6211DP\u8bb0\u8def\u5f84\u5417\u3002\u3002\u3002\u3002\u611f\u6fc0\u4e0d\u5c3d( \u2299 o \u2299 )\u554a\uff01\n\u6211\u7684\u50bb\u4e4e\u4e4e\u7684\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define R register int\nusing namespace std;\nconst int N=100010,Inf=0x3f3f3f3f;\ninline int g() {\n\tR ret=0,fix=1; register char ch; while(!isdigit(ch=getchar())) fix=ch=='-'?-1:fix;\n\tdo ret=ret*10+(ch^48); while(isdigit(ch=getchar())); return ret*fix;\n}\nint n,k,mx,mx1,cnt,st,ed;\nint pre[N],fir[N],cnte[N],d[N];\nstruct edge{\n\tint v,w,nxt;\n\t#define v(i) e[i].v\n\t#define w(i) e[i].w\n\t#define nxt(i) e[i].nxt\n}e[N<<1];\ninline void add(int u,int v,int w) {v(++cnt)=v,w(cnt)=w,nxt(cnt)=fir[u],fir[u]=cnt;}\nnamespace _dp {\n\tvoid dp(int u,int fa) {\n\t\tfor(R i=fir[u];i;i=nxt(i)) {\n\t\t\tR v=v(i);\n\t\t\tif(v==fa) continue;\n\t\t\tdp(v,u);\n\t\t\tmx=max(mx,d[u]+d[v]+w(i));\n\t\t\td[u]=max(d[u],d[v]+w(i));\n\t\t}\n\t}\n\tinline void solve() {\n\t\tmemset(d,0,sizeof(d));\n\t\tdp(1,0);\n\t}\n}\ninline void dfs(int u,int fa) {\n\tfor(R i=fir[u];i;i=nxt(i)) {\n\t\tR v=v(i);\n\t\tif(v==fa) continue;\n\t\td[v]=d[u]+w(i);\n\t\tdfs(v,u);\n\t}\n}\ninline void solve() {\n\tmemset(d,0x3f,sizeof(d));\n\td[1]=0; dfs(1,0); mx=-Inf; st=0,ed=0;\n\tfor(R i=1;i<=n;++i) if(d[i]>mx&&d[i]!=Inf&&i!=1)\n\t\tmx=d[i],st=i;\n\tmemset(d,0x3f,sizeof(d));\n\td[st]=0,dfs(st,0); mx=-Inf;\n\tfor(R i=1;i<=n;++i) if(d[i]>mx&&d[i]!=Inf&&i!=st) \n\t\tmx=d[i],ed=i;\n}\ninline void fd_p(int u,int fa) {\n\tfor(R i=fir[u];i;i=nxt(i)) {\n\t\tR v=v(i);\n\t\tif(v==fa) continue;\n\t\tfd_p(v,u);\n\t\tpre[v]=u; \n\t\tcnte[v]=i;\n\t}\n}\nsigned main() {\n\tn=g(),k=g();\n\tfor(R i=1,u,v;i<n;++i) u=g(),v=g(),add(u,v,1),add(v,u,1);\n\tsolve();\n\tif(k==1) {printf(\"%d\\n\",2*n-mx-1); return 0;}\n\tfd_p(st,0); mx1=mx; pre[st]=0;\n\tfor(R i=ed;i;i=pre[i]) if(cnte[i]&1) w(cnte[i])=-1,w(cnte[i]+1)=-1; else w(cnte[i])=-1,w(cnte[i]-1)=-1;\n\tmx=0;\n\t_dp::solve();\n\tprintf(\"%d\\n\",2*n-mx1-mx);\n}\n```\n",
        "postTime": 1554138518,
        "uid": 115086,
        "name": "Tari",
        "ccfLevel": 7,
        "title": "Jack's \u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\n\u82e5$k=0$\u65f6\uff0c\u5219\u6ca1\u6709\u8d70\u8fc7\u4efb\u4f55\u4e00\u4e2a\u65b0\u5efa\u9053\u8def,\u6240\u4ee5\u7b54\u6848\u4e3a$2\\times (n-1)$\uff0c\u56e0\u4e3a\u7528$dfs$\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6761\u8fb9\u7ecf\u8fc7\u4e00\u6b21\uff0c\u56de\u6eaf\u4e00\u6b21\n\n\u8bbe\u6811\u7684\u76f4\u5f84\u4e3a$L1$\n\n\u82e5$k=1$\u65f6\uff0c\u5219\u6211\u4eec\u53d1\u73b0\u82e5\u8fde\u63a5$(u,v)$,\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u73af\uff0c\u73af\u4e2d\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e00\u6b21\uff0c\u5176\u4f59\u90fd\u7ecf\u8fc7\u4e24\u6b21\uff0c\u5219\u7b54\u6848\u662f$2\\times{(n-1)}-L1+1$,+1\u662f\u56e0\u4e3a\u8981\u8d70\u8fc7\u8fd9\u6761\u8fb9\uff0c\u518d\u76f4\u5f84\u7684\u8fde\u8fb9\n\n\u82e5$k=2$\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u80af\u5b9a\u662f\u8981\u9009\u5f53$k=1$\u65f6\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u540e\u9762\u5e94\u8be5\u600e\u6837\u53bb\u9009\u62e9\u5462\u3002\u82e5\u9009\u8fb9$(u1,v1)$,\u5219\u6709\u80af\u5b9a\u53c8\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u76ee\u524d\u4e24\u4e2a\u73af\uff0c\u73af\u4e2d\u82e5\u4e24\u73af\u6709\u5171\u8fb9\uff0c\u5219\u8d70\u4e24\u6b21\uff0c\u5176\u4f59\u73af\u5185\u5c31\u8d70\u4e00\u6b21\u5373\u53ef\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u60f3\u5230\u8ba9\u7b2c\u4e00\u6b21\u7684\u6811\u4e0a\u76f4\u5f84\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9$-1$\uff0c\u7136\u540e\u5728\u627e\u4e00\u4e2a\u5f53\u524d\u6811\u4e0a\u7684\u76f4\u5f84$(L2)$\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a$2\\times{(n-1)}-(L1-1)-(L2-1)$\n\n\u5373\u53ef\u6c42\u6811\u4e0a\u76f4\u5f84\u7684\u65b9\u6cd5:1.$dfs$,$bfs$2.$dp$\uff08\u4e24\u8005\u90fd\u5199\u4e86,I think \u7b2c\u4e00\u79cd\u53ea\u9002\u5e94\u90fd\u4e3a\u6b63\u6743\u7684\u8fb9\uff0c\u6709\u8d1f\u7684\u5c31\u5d29\u4e86\uff09\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read()\n{\n    int f=1,ans=0;char c;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){ans=ans*10+c-'0';c=getchar();}\n    return f*ans;\n}\nstruct node{\n    int u,v,w,nex;\n}x[200001];\nint head[200001],n,k,cnt,dis[200001];\nvoid add(int u,int v,int w){\n    x[cnt].u=u,x[cnt].v=v,x[cnt].w=w,x[cnt].nex=head[u],head[u]=cnt++;\n}\nvoid dfs(int f,int fa){\n    for(int i=head[f];i!=-1;i=x[i].nex){\n        if(x[i].v==fa) continue;\n        dis[x[i].v]=dis[f]+x[i].w;\n        dfs(x[i].v,f);\n    }\n}\nbool ff;\nvoid dfs1(int f,int fa,int end){\n    if(ff) return;\n    if(f==end){\n        ff=true;\n        return;\n    }\n    for(int i=head[f];i!=-1;i=x[i].nex){\n        if(x[i].v==fa) continue;\n        x[i].w=-1;\n        x[i^1].w=-1;\n        dfs1(x[i].v,f,end);\n        if(ff) return;\n        x[i^1].w=1;\n        x[i].w=1;\n    }\n}\nint get(){\n    memset(dis,0,sizeof(dis));\n    dfs(1,0);\n    int maxn=0,pos;\n    for(int i=1;i<=n;i++){\n        if(dis[i]>maxn) maxn=dis[i],pos=i;\n    } \n    memset(dis,0,sizeof(dis));\n    int sta=pos;\n    dfs(pos,0);\n    maxn=0;\n    for(int i=1;i<=n;i++){\n        if(dis[i]>maxn) maxn=dis[i],pos=i;\n    }\n    int end=pos;\n    dfs1(sta,0,end);\n    return maxn;\n}\nint d[200001],maxn;\nint dp(int f,int fath){\n    for(int i=head[f];i!=-1;i=x[i].nex){\n        if(x[i].v==fath) continue;\n        dp(x[i].v,f);\n        maxn=max(maxn,d[f]+d[x[i].v]+x[i].w);\n        d[f]=max(d[f],d[x[i].v]+x[i].w);\n    }\n    return maxn;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    n=read(),k=read();\n    for(int i=1;i<n;i++)\n    {\n        int u=read(),v=read();\n        add(u,v,1),add(v,u,1);\n    }\n    int L1=get();\n    if(k==1)printf(\"%d\\n\",(n-1)*2-L1+1);\n    else{\n        int L2=dp(1,0);\n        printf(\"%d\\n\",n*2-L1-L2);\n    }\n}\n```",
        "postTime": 1546009166,
        "uid": 87382,
        "name": "_sry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "\u6811\u5f62dp \u597d\u9898\uff0c\u8003\u5bdf\u7684\u4e3b\u8981\u662f\u6811\u7684\u76f4\u5f84\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\n\n\u9996\u5148\u6211\u4eec\u770b\u5230 K \u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1 \\ 2\n\n# $first$\n\n\u5bf9\u4e8e 1 \u7684\u60c5\u51b5\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u8003\u8651\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6811\u662f\u4ee5 1 \u53f7\u70b9\u4e3a\u6839\u7684\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u8fde\u7684\u8fb9\u5fc5\u7136\u53ef\u4ee5\u548c\u8fd9\u68f5\u6811\u4e2d\u7684\u4e00\u6761\u8def\u5f84\u5f62\u6210\u73af\uff08\u5e76\u4e14\u4e00\u822c\u7684\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\u4f5c\u4e3a\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u601d\u8003\u8fd9\u6761\u8def\u5f84\u7684\u8d21\u732e\uff1a\u8fd9\u6761\u65b0\u52a0\u7684\u8fb9\u4f7f\u8fde\u4e0a\u7684\u8def\u5f84\u51cf\u5c11\u4e86\u4e00\u6b21\u8bbf\u95ee\u3002\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u6761\u65b0\u8fb9\u7684\u8d21\u732e\u5c31\u662f\u8def\u5f84\u957f\u5ea6-1\uff08\u56e0\u4e3a\u65b0\u52a0\u7684\u8fb9\u8981\u8d70\u4e00\u6b21\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u627e\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u628a\u7aef\u70b9\u8fde\u8d77\u6765\u5c31\u597d\u4e86\u3002\n\n# $second$\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u9996\u5148\u662f\u57fa\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\u7684\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u5148\u6765\u4e00\u904d $first$ \u4e2d\u7684\u6b65\u9aa4\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u8003\u8651\u518d\u52a0\u4e00\u6761\u8fb9\u3002\n\n\u90a3\u4e48\u5bb9\u6613\u5f97\u51fa\uff1a\u5982\u679c\u65b0\u52a0\u7684\u8fd9\u6761\u8fb9\u6240\u6db5\u76d6\u7684\u8def\u5f84\u4e0e $first$ \u4e2d\u5904\u7406\u51fa\u7684\u76f4\u5f84\u7684\u8fb9\u6beb\u65e0\u4ea4\u96c6\u7684\u8bdd\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u8d21\u732e\u662f\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\u7684\u3002\n\n\u90a3\u4e48\u5982\u679c\u76f8\u4ea4\u4e86\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u5728\u8349\u7a3f\u7eb8\u4e0a\u753b\u4e00\u753b\u5c31\u77e5\u9053\u4e86\uff1a\u76f8\u4ea4\u7684\u8fb9\u4f1a\u8d70\u4e24\u6b21\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u91cd\u53e0\u7684\u8fb9\u8d21\u732e\u62b5\u6d88\u4e86\uff08\u7b2c\u4e8c\u6b21\u52a0\u8fb9\u4e5f\u8bb8\u4f1a\u8d77\u90e8\u5206\u53cd\u4f5c\u7528\uff09\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06 $first$ \u6b65\u9aa4\u4e2d\u7684\u76f4\u5f84\u4e2d\u7684\u8fb9\u7684\u8fb9\u6743\uff08\u4e00\u5f00\u59cb\u662f 1 \uff09\uff0c\u5168\u90e8\u6539\u6210 -1\u3002 \u7136\u540e\u518d\u8dd1\u4e00\u904d\u76f4\u5f84\uff0c\u8fd9\u65f6\u5019\u7b2c\u4e8c\u6b21\u52a0\u8fb9\u7684\u6700\u5927\u8d21\u732e\u5c31\u51fa\u6765\u4e86\u3002\n\n\u90a3\u4e48\u5982\u679c\u8fd9\u68f5\u6811\u662f\u4e00\u6761\u94fe\u5462\uff1f\u90a3\u4e48\u6211\u4eec\u5728\u7b2c\u4e8c\u6b21\u8fde\u8fb9\u7684\u65f6\u5019\u968f\u4fbf\u8fde\u4e00\u6761\u81ea\u73af\uff08\u9898\u76ee\u4e2d\u6709\u8bf4\u53ef\u4ee5\u81ea\u73af\uff09\u5c31\u597d\u4e86\u3002\n\n\n# $third$\n\n\u65e2\u7136\u8bf4\u8981\u627e\u76f4\u5f84\u6240\u8986\u76d6\u7684\u8fb9\u3002\u3002\u3002\u90a3\u4e48\u63a8\u8350\u505a\u4e00\u4e0b\u8fd9\u4e00\u9053\u9898\uff1a\n\n  $Loj 10159$ [\u300c\u4e00\u672c\u901a 5.2 \u7ec3\u4e60 2\u300d\u65c5\u6e38\u89c4\u5212](https://loj.ac/problem/10159)\n\n\n----\n\n\n### \u7136\u540e\u662f...\n\n\u7070\u5e38\u7b80\u6d01\u7684\u4ee3\u7801...\uff08\u5efa\u8bae\u5728 dev \u4e2d $ctrl + shift + A$ \u4e86\u4e4b\u540e\u518d\u770b\uff09\n\n\n```cpp\n//by Judge\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int M=1e5+111;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} int n,K,pat,res,ans,root,head[M],fir[M],sec[M],ch[M][2];\nstruct Edge{ int to,val,next; Edge(int to,int val,int next):to(to),val(val),next(next){} Edge(){} }e[M<<1];\ninline void add(int u,int v){ e[++pat]=Edge(v,1,head[u]),head[u]=pat, e[++pat]=Edge(u,1,head[v]),head[v]=pat; }\n#define v e[i].to\nint dfs(int u,int fa){ //\u627e\u5f53\u524d\u6811\u7684\u76f4\u5f84\n\tfir[u]=sec[u]=0,ch[u][1]=ch[u][0]=-1;\n\tfor(int i=head[u],dis;i;i=e[i].next){\n\t\tif(v==fa) continue; dis=dfs(v,u)+e[i].val;\n\t\tif(dis>=fir[u]) sec[u]=fir[u],fir[u]=dis,ch[u][1]=ch[u][0],ch[u][0]=v;\n\t\telse if(dis>=sec[u]) sec[u]=dis,ch[u][1]=v;\n\t} if(ans<fir[u]+sec[u]) ans=fir[u]+sec[u],root=u; return fir[u];\n}\n//\u627e\u76f4\u5f84\u8def\u5f84\nvoid dfs(int u){ for(int i=head[u];i;i=e[i].next) if(v==ch[u][0]) e[i].val=-1,dfs(v);  }\n#undef v\nsigned main(){\n\tn=read(),K=read(),res=n-1<<1,ans=0;\n\tfor(int i=1,u,v;i<n;++i) u=read(),v=read(),add(u,v);\n\tdfs(1,0),res-=ans-1,ans=0; if(K==1) return !printf(\"%d\\n\",res); //=1 \u76f4\u63a5\u8f93\u51fa\n\tfor(int i=head[root];i;i=e[i].next) //\u627e\u76f4\u5f84\u7684\u8fb9\n\t\tif(e[i].to==ch[root][0] || e[i].to==ch[root][1])\n\t\t\te[i].val=-1,dfs(e[i].to);\n\tdfs(1,0),res-=ans-1; return !printf(\"%d\\n\",res);\n}\n```",
        "postTime": 1536415816,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "[luogu3629](https://www.luogu.org/problemnew/show/P3629)\n\nans\u672c\u6765\u662f2*(n-1)\n\n\u5148\u6c42\u4e00\u6b21\u6811\u7684\u76f4\u5f84 L1,ans\u53d8\u6210ans-L1+1\n\n\u5982\u679ck=1\uff0c\u5c31\u53ef\u4ee5\u7ed3\u675f\u7a0b\u5e8f\u4e86\n\n\u628a\u8be5\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u90fd\u53d8\u6210-1(\u628a\u73af\u91cd\u53e0\u7684\u90e8\u5206\u52a0\u56de\u6765)\n\n\u518d\u6c42\u4e00\u6b21\u6811\u7684\u76f4\u5f84 L2(\u4e0d\u80fd\u7528\u4e24\u6b21bfs\u4e86\uff0c\u8981\u7528\u6811\u5f62dp)\n\n\u8f93\u51fa2*n-L1-L2\n\n\u6ce8\u610f\uff1a\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0cN\u8981\u8bbe\u62102e5\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200005\n\nusing namespace std;\n\nint n,k,ans,ma,po;\nbool vis[N];\nint head[N],cnt;\nint dis[N],pre[N];\nstruct nd{int next,to,v;}e[N];\nvoid add(int x,int y){e[++cnt]=(nd){head[x],y,1};head[x]=cnt;}\nqueue<int> q;\n\nvoid dp(int x)\n{\n    vis[x]=1;\n    for(int i=head[x];i;i=e[i].next)\n    {\n        int y=e[i].to;\n        if(vis[y]) continue;\n        dp(y);\n        ma=max(ma,dis[x]+dis[y]+e[i].v);\n        dis[x]=max(dis[x],dis[y]+e[i].v);\n    }\n}\nvoid del(int now)\n{\n    while(pre[now])\n    {\n        int fa=pre[now];\n        for(int i=head[fa];i;i=e[i].next)\n            if(e[i].to==now){e[i].v=-1;break;}\n\n        for(int i=head[now];i;i=e[i].next)\n            if(e[i].to==fa){e[i].v=-1;break;}\n        now=fa;\n    }\n}\nvoid bfs(int f,int pd)\n{\n    q.push(f);\n\twhile(q.size())\n\t{\n\t\tint d=q.front();q.pop();\n\n\t\tfor(int i=head[d];i;i=e[i].next)\n\t\t{\n\t\t\tint t=e[i].to;\n\t\t\tif(t==f||dis[t]) continue;\n\t\t\tdis[t]=dis[d]+1;\n            if(pd)pre[t]=d;\n\t\t\tq.push(t);\n\t\t}\n\t}\n}\nvoid clear()\n{\n    ma=0;\n    memset(dis,0,sizeof dis);\n}\nvoid get()\n{\n    ma=0;\n    for(int i=1;i<=n;i++)\n\t\tif(dis[i]>ma)\n\t\t\tma=dis[i],po=i;\n}\nint main()\n{\n\tcin>>n>>k;\n\tfor(int x,y,i=1;i<n;i++){cin>>x>>y;add(x,y);add(y,x);}\n\tbfs(1,0);\n    get();\n    clear();\n\tbfs(po,1);\n\tget();\n    ans=2*n-ma;\n    if(k==1){cout<<ans-1;return 0;}\n\tdel(po);\n    clear();\n    dp(1);\n\tcout<<ans-ma;\n\treturn 0;\n}\n\n```",
        "postTime": 1520671777,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[APIO2010]\u5de1\u903b\u2014\u2014\u6811\u7684\u76f4\u5f84"
    },
    {
        "content": "\u9996\u5148\u770b\u9898\uff0c\u4ece1\u53f7\u7ed3\u70b9\u5f00\u59cb\uff0c\u5168\u90e8\u904d\u5386\u5e76\u56de\u52301\u53f7\u7ed3\u70b9\u4f1a\u6070\u597d\u7ecf\u8fc7\u6240\u6709\u7684\u8fb9\u4e24\u6b21\uff0c\u8fd9\u6837\u603b\u957f\u5ea6\u4e3a $2*(n-1)$\u3002\n\u90a3\u4e48\u5982\u679c\u5efa\u7acb\u4e00\u6761\u8def\u4ee5\u540e\uff0c\u7531\u9898\u610f\u53ef\u77e5\u65b0\u9053\u8def\u5fc5\u987b\u7ecf\u8fc7\u6070\u597d\u4e00\u6b21\uff0c\u4e5f\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6240\u4ee5\u65b0\u8def\u4ecex\u5230y\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u65b0\u8def\u7684\u6743\u503c1\u6765\u4ee3\u66ff\u8001\u8def\u5f84\u4e2d\u4ecex\u5230y\u7684\u8def\u5f841\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ecex\u5230y\u4e4b\u95f4\u7684\u8def\u5f84\u5728\u5efa\u7acb\u4e86\u65b0\u8def\u4ee5\u540e\u53ea\u9700\u8981\u518d\u7ecf\u8fc7\u4e00\u6b21\u5c31\u884c\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u6700\u77ed\uff0c\u80af\u5b9a\u8981\u628a\u6574\u68f5\u6811\u4e0a\u7684\u6700\u957f\u94fe\u4e5f\u5c31\u662f\u6811\u7684\u76f4\u5f84\u7701\u6389\u7b54\u6848\u6700\u4f18\u3002\u6240\u4ee5\u5f53k = 1 \u65f6\uff0c\u6211\u4eec\u627e\u5230\u6700\u957f\u94fe\uff0c\u5728\u8fd9\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u52a0\u4e00\u6761\u65b0\u8def\uff0c\u8bbe\u76f4\u5f84\u4e3aL\uff0c\u5219\u7b54\u6848$ans = 2*(n-1) - L +1$\uff08+1\u662f\u56e0\u4e3a\u8981\u8d70\u4e00\u6b21\u65b0\u52a0\u7684\u65b0\u8def\uff09\u3002\n\n\u5f53k = 2\u65f6\uff0c\u6211\u4eec\u6309\u7167\u521a\u521a\u7684\u7406\u8bba\uff0c\u518d\u6c42\u4e00\u6b21\u6700\u957f\u94fe\u3002\u8fd9\u6837\u5f62\u6210\u4e24\u4e2a\u73af\uff0c\u7b2c\u4e00\u6761\u80af\u5b9a\u4e0d\u80fd\u8ddf\u7b2c\u4e8c\u6761\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u6c42\u5b8c\u7b2c\u4e00\u6761\u4ee5\u540e\u8981\u628a\u7b2c\u4e00\u6761\u6700\u957f\u94fe\u7ed9\u5220\u53bb\u3002\u8fd9\u91cc\u627e\u5230\u7b2c\u4e00\u6b21\u7684\u6700\u957f\u94fe\uff0c\u904d\u5386\u4e00\u904d\uff0c\u5c06\u503c\u4ece1\u53d8\u6210-1\u3002\n\u5982\u679c\u7b2c\u4e8c\u6761\u4e0e\u7b2c\u4e00\u6761\u94fe\u6ca1\u6709\u91cd\u53e0\uff0c\u90a3\u4e48\u5c31\u8ddf\u7b2c\u4e00\u6761\u94fe\u4e00\u6837\uff0c\u76f4\u63a5\u51cf\u53bb\u5373\u53ef\u3002\n\u82e5\u7b2c\u4e8c\u6761\u8fde\u4e0e\u7b2c\u4e00\u6761\u94fe\u6709\u91cd\u53e0\uff0c\u90a3\u4e48\u7531\u4e8e\u672c\u5e94\u53ea\u8d70\u4e00\u6b21\u7684\u8def\u5f84\u4f1a\u8d70\u4e24\u6b21\uff0c\u591a\u51cf\u53bb\u7684\u503c\u9700\u8981\u52a0\u56de\u6765\uff0c\u4f46\u662f\u7531\u4e8e\u7b2c\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u8fb9\u5df2\u7ecf\u53d6\u53cd\u4e3a-1\uff0c\u8fd9\u6837\u51cf\u53bb\u8d1f\u6570\u53c8\u76f8\u5f53\u4e8e\u52a0\u4e0a\u8fd9\u4e2a\u6570\uff0c\u6240\u4ee5\u4e24\u79cd\u7b54\u6848\u662f\u4e00\u6837\u7684\u3002\n\u6700\u7ec8\u7684\u7b54\u6848\u4e3a$ans = 2*(n-1) - (L_1-1) - (L_2-1) = 2*n - L_1 - L_2$\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\n\n\u8fd9\u91cc\u5c06\u7b2c\u4e00\u6761\u94fe\u7684\u503c\u5168\u90e8\u8d4b\u503c\u4e3a-1\u7684\u65f6\u5019\u7528\u5230\u4e86\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u7684\u5c0f\u6280\u5de7  \u2014\u2014 \u6210\u5bf9\u53d8\u6362\u3002\n\n> \u5f53n\u4e3a\u5076\u6570\u7684\u65f6\u5019\uff0cn XOR 1 = n + 1 \u5f53n\u4e3a\u5947\u6570\u7684\u65f6\u5019\uff0cn XOR 1 = n - 1\n> \n> \u5229\u7528\u8fd9\u4e2a\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65f6\u5019\u521d\u59cb\u5316tot\u7b49\u4e8e1\uff0c\u8fd9\u6837\u6bcf\u5929\u65e0\u5411\u8fb9\u770b\u6210\u7684\u4e24\u6761\u6709\u5411\u8fb9\u4f1a\u6210\u5bf9\u5b58\u50a8\u5728ver\u548cedge\u6570\u7ec4\u7684\u4e0b\u6807\u4e3a2\u548c3\uff0c4\u548c5...\u7684\u4f4d\u7f6e\u4e0a\uff0c\u901a\u8fc7\u5bf9\u4e0b\u6807\u8fdb\u884cXOR1\u8fd0\u7b97\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4f4d\u5230\u5f53\u524d\u8fb9\u7684\u53cd\u5411\u7684\u8fb9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679cver[i]\u662f\u7b2ci\u6761\u8fb9\u7684\u7ec8\u70b9\uff0c\u90a3\u4e48ver[i xor1]\u5c31\u662f\u7b2ci\u6761\u8fb9\u7684\u8d77\u70b9\u3002\n> \u2014\u2014\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\n\n\u653e\u5230\u4ee3\u7801\u91cc\u5c31\u662f\u8fd9\u6837\uff1a\n```cpp\n while(fa[q]){//\u6210\u5bf9\u53d8\u6362\n            edge[fa[q]] = edge[fa[q]^1] = -1;\n            q = ver[fa[q]^1];\n        }\n```\n\u5177\u4f53\u7684\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u597d\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<math.h>\n#include<cstring>\n#include<bitset>\n#include<vector>\n#include<queue>\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define over(i,s,t) for(register int i = s;i <= t;++i)\n#define lver(i,t,s) for(register int i = t;i >= s;--i)\n//#define int __int128\n#define lowbit(p) p&(-p)\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int INF = 0x3f3f3f3f;\nconst int N = 1e5+7;\nconst int M = 2007;\nint n,k;\nint ver[N << 1],edge[N << 1],nex[N << 1],head[N],tot = 1;\nint fa[N];\nbool vis[N];\nint dis[N];\n\nvoid add(int u,int v,int val){\n    ver[++tot] = v;\n    edge[tot] = val;\n    nex[tot] = head[u];\n    head[u] = tot;\n}\n\nvoid dfs(int x,int &t){//\u4e0d\u80fd\u5904\u7406\u8d1f\u503c\n    vis[x] = 1;\n    for(int i = head[x];i;i = nex[i]){\n        int y = ver[i],z = edge[i];\n        if(vis[y])continue;\n        dis[y] = dis[x] + z;\n        if(dis[y] >= dis[t])t = y;\n        fa[y] = i;//\u5b58\u8def\u5f84,\u7528\u4e8e\u6210\u5bf9\u53d8\u6362\uff0c\u5b58\u7684\u662f\u524d\u5411\u661f\u7684\u6307\u9488\n        dfs(y,t);\n    }\n    vis[x] = 0;//\u56de\u6eaf\n}\n\nvoid DP(int x,int &t){//\u53ef\u4ee5\u5904\u7406\u8d1f\u503c\n    vis[x] = 1;\n    for(int i= head[x];i;i = nex[i]){\n        int y = ver[i],z = edge[i];\n        if(vis[y])continue;\n        DP(y,t);\n        t = max(t,dis[x] + dis[y] + z);\n        dis[x] = max(dis[x],dis[y] + z);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    over(i,1,n-1){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y,1);\n        add(y,x,1);\n    }\n    int p = 1;//\u4e24\u6b21dfs\u627e\u6700\u8fdc\u7684p\u548cq\n    dfs(1,p);\n    dis[p] = fa[p] = 0;//\u627e\u5230\u4e4b\u540e\u628a\u5b83\u5f53\u6210\u6839\u8282\u70b9\n    int q = p;\n    dfs(p,q);\n    int ans = ((n - 1) * 2) - dis[q] + 1;// + 1\u662f\u56e0\u4e3a\u65b0\u589e\u4e86\u4e00\u6761\u5fc5\u987b\u8d70\u4e00\u6b21\u7684\u8fb9\n    if(k == 2){\n        while(fa[q]){//\u6210\u5bf9\u53d8\u6362\n            edge[fa[q]] = edge[fa[q]^1] = -1;\n            q = ver[fa[q]^1];\n        }\n        q = 0;\n        memset(dis,0,sizeof dis);\n        DP(p,q);\n        ans -= q - 1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1592042236,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "**\u524d\u7f6e\u77e5\u8bc6**\uff1a \u6811\u7684\u76f4\u5f84\uff0c\u6811\u7684\u6700\u957f\u94fe\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u5f53\u4e0d\u5efa\u7acb\u65b0\u7684\u9053\u8def\u65f6\uff0c\u4ece1\u53f7\u7ed3\u70b9\u51fa\u53d1\uff0c\u628a\u6811\u4e0a\u6bcf\u4e00\u6761\u8fb9\u904d\u5386\u4e00\u6b21\uff0c\u5728\u8fd4\u56de1\u53f7\u8282\u70b9,\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u6bcf\u6761\u8fb9\u6070\u597d\u4e24\u6b21\uff0c**\u6240\u4ee5\u8def\u7ebf\u603b\u957f\u5ea6\u4e3a$\\bold{2\u00d7(n-1)}$**\u3002\n\n\u5efa\u7acb1\u6761\u65b0\u7684\u9053\u8def\u540e\uff0c\u56e0\u4e3a\u65b0\u7684\u9053\u8def\u4e00\u5b9a\u8981\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6240\u4ee5\u6cbf\u7740\u65b0\u5efa\u9053\u8def$(x_1,y_1)$\u5de1\u903b\u8fc7\u4e4b\u540e\uff0c\u8981\u8fd4\u56de$x_1$\uff0c\u5c31\u5fc5\u987b\u6cbf\u7740\u539f\u6765\u7684\u6811\u4e0a$y_1$\u81f3$x_1$\u7684\u8def\u5f84\u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$x_1$\u81f3$y_1$\u7684\u8def\u5f84\u4ece\u4e0d\u5efa\u65b0\u8fb9\u7684\u6811\u4e2d\u9700\u8981\u8d702\u6b21\u5230\u5efa\u7acb1\u6761\u65b0\u8fb9\u540e\u53ea\u9700\u8d70\u4e00\u6b21\u3002\n\n\u56e0\u6b64\uff0c\u5f53$k=1$\u65f6\uff0c\u6211\u4eec\u8981\u627e\u5230\u6811\u7684\u6700\u957f\u94fe\uff0c\u5728\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e4b\u95f4\u589e\u52a0\u4e00\u6761\u65b0\u7684\u9053\u8def\uff0c\u5c31\u80fd\u4f7f\u5de1\u903b\u603b\u8ddd\u79bb\u6700\u5c0f\u3002\u6211\u4eec\u8bbe\u6811\u7684\u76f4\u5f84\u4e3a$L_1$,**\u5219\u8def\u7ebf\u603b\u957f\u5ea6\u4e3a$\\bold{2\u00d7(n-1)-L_1+1}$**\u3002\n\n\u5efa\u7acb\u7b2c2\u6761\u65b0\u8fb9$(x_2,y_2)$\u540e\uff0c\u53c8\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u63a8\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u5efa\u7acb1\u6761\u8fb9\u540e\u7684\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u4e3a$L_2$\uff0c**\u6240\u4ee5\u73b0\u5728\u8def\u7ebf\u603b\u957f\u5ea6\u4e3a$\\bold{2\u00d7(n-1)-L_1+1-L_2+1} = \\bold{2\u00d7n-L_1-L_2}$**\u3002\n\u4f46\u662f\u4e24\u6b21\u6c42\u7684\u6811\u7684\u6700\u957f\u94fe\u4f1a\u6709\u91cd\u590d\u7684\u90e8\u5206\uff08\u5982\u4e0b\u56fe\uff09\uff0c\u5e76\u4e14\u9898\u76ee\u8981\u6c42\u6211\u4eec\u8981\u904d\u5386\u6240\u6709\u7684\u8fb9.\u56fe\u4e2d$(3,5)$\u7684\u8fb9\u5c31\u662f\u4e24\u6761\u76f4\u5f84\u91cd\u590d\u7684\u8fb9\uff0c\u6ca1\u6709\u88ab\u904d\u5386\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c06\u7b2c\u4e00\u6761\u6700\u957f\u94fe\u4e0a\u7684\u6240\u6709\u8fb9\u6743\u503c\u91cd\u65b0\u8d4b\u503c\u4e3a$-1$\uff0c\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wvhkjj86.png)\n\n**\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u7b97\u6cd5**\uff1a\n\n1. \u5728\u6700\u521d\u7684\u6811\u4e0a\u6c42\u76f4\u5f84\uff0c\u8bbe\u76f4\u5f84\u4e3a$L_1$\u3002\u7136\u540e\u628a\u76f4\u5f84\u4e0a\u7684\u8fb9\u6743\u503c\u53d6\u53cd\uff081\u53d8\u4e3a-1\uff09\u3002\n2. \u5728\u6700\u957f\u94fe\u8fb9\u6743\u53d6\u53cd\u4e4b\u540e\u7684\u6811\u4e0a\u518d\u6b21\u6c42\u76f4\u5f84\uff0c\u8bbe\u76f4\u5f84\u4e3a$L_2$,\u7b54\u6848\u5c31\u662f$\\bold{2\u00d7(n-1)-L_1+1-L_2+1} = \\bold{2\u00d7n-L_1-L_2}$\u3002\n\n\u5173\u4e8e\u6811\u7684\u76f4\u5f84\u5982\u4f55\u6c42\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n1. \u6811\u5f62dp\n2. \u4e24\u904ddfs\u6216bfs\n\n\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u81ea\u884c\u53bb\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002\n\n**\u9644\u4ee3\u7801**\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define N 100010\n\nusing namespace std;\n\nstruct node{\n\tint u,v,w,next;\n}edge[N<<1];//\u524d\u5411\u661f\u5b58\u6811\nint head[N],tot;\nint vis[N],fr[N];//vis\u5224\u65ad\u662f\u5426\u4e3a\u6700\u957f\u94fe\u4e0a\u7684\u70b9\uff0cfr\u5229\u7528\u524d\u5411\u661f\u5b58\u6811\u7684\u6700\u957f\u94fe\nint n,k;\nint ans1,ans2;//ans1\u4e3a\u5efa\u7acb\u7b2c\u4e00\u6761\u8fb9\u540e\u7684\u6811\u7684\u76f4\u5f84\uff0cans2\u4e3a\u5efa\u7acb\u7b2c\u4e8c\u6761\u8fb9\u540e\u7684\nint id,start,end,res;//start,end\u5206\u522b\u5b58\u6811\u7684\u6700\u957f\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\nint flag;\nint dis[N];\n\nvoid add(int x,int y,int z){\n\ttot++;\n\tedge[tot].u=x;\n\tedge[tot].v=y;\n\tedge[tot].w=z;\n\tedge[tot].next=head[x];\n\thead[x]=tot;\n}//\u52a0\u5165\u8fb9\n\nvoid dfs(int x,int fa,int sum){\n\tif(sum>=res){\n\t\tres=sum;\n\t\tid=x;\n\t}\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint y=edge[i].v;\n\t\tif(y!=fa)\n\t\t\tdfs(y,x,sum+edge[i].w);\n\t}\n}//\u4e24\u904ddfs\u6c42\u6811\u7684\u76f4\u5f84\n\nvoid get_path(int now,int nex,int fa){\n\tif(flag) return;//flag\u5224\u65ad\u662f\u5426\u5230\u8fbe\u6700\u957f\u94fe\u53e6\u4e00\u7aef\uff0c\u5230\u4e86\u76f4\u63a5return\n\tfor(int i=head[now];i;i=edge[i].next){\n\t\tif(flag) return;\n\t\tint y=edge[i].v;\n\t\tif(y==fa) continue;//\u5224\u65ad\u662f\u5426\u4e3a\u7236\u4eb2\u8282\u70b9\n\t\tif(y==nex){//\u5982\u679c\u5230\u8fbe\u7ec8\u70b9\uff0cflag=1\uff0c\u5e76return\n\t\t\tfr[now]=y;\n\t\t\tflag=1;\n\t\t\treturn;\n\t\t}\n\t\tfr[now]=y;\n\t\tget_path(y,nex,now);//\u9012\u5f52\u627e\u8def\u5f84\n\t}\n}//\u627e\u51fa\u6811\u7684\u76f4\u5f84\u7ecf\u8fc7\u7684\u8def\u5f84\n\nvoid dp(int x,int fa){\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint y=edge[i].v;\n\t\tif(y==fa) continue;\n\t\tdp(y,x);\n\t\tans2=max(ans2,dis[x]+dis[y]+edge[i].w);\n\t\tdis[x]=max(dis[x],dis[y]+edge[i].w);\n\t}\n}//\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n\nint main(){\n\tcin>>n>>k;\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tadd(u,v,1);\n\t\tadd(v,u,1);\n\t}\n//----------------------------------\n\tdfs(1,0,0);//\u4e24\u904ddfs\u6c42\u6811\u7684\u76f4\u5f84\n\tres=0;\n\tstart=id;\n\tdfs(id,0,0);\n\tend=id;\n\tans1=res;\n//----------------------------------\n\tif(k==1){\n\t\tcout<<2*(n-1)-res+1<<endl;\n\t\treturn 0;\n\t}\n\tget_path(start,end,0);\n\tvis[start]=vis[end]=1;\n\tfor(int i=start;i!=end;i=fr[i])\n\t\tvis[i]=1;//\u628a\u6811\u7684\u6700\u957f\u94fe\u4e0a\u7684\u70b9\u5168\u90e8\u6807\u8bb0\u4e3a1\n\tfor(int i=1;i<=n;i++)//\u6700\u957f\u94fe\u6743\u503c\u53d6\u53cd\n\t\tif(vis[i])\n\t\t\tfor(int j=head[i];j;j=edge[j].next){\n\t\t\t\tint y=edge[j].v;\n\t\t\t\tif(vis[y])\n\t\t\t\t\tedge[j].w=-1;\n\t\t\t}\n\tdp(1,0);//\u6811\u5f62dp\u6c42\u6811\u7684\u76f4\u5f84\n\tcout<<2*n-ans1-ans2<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1590410016,
        "uid": 158846,
        "name": "xixike",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "**\u6613\u9519\u70b9\uff1a**\n\n- l2\u5fc5\u987b\u8981\u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf\u800c\u4e0d\u80fd\u8bbe\u7f6e\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u662f\u7531\u4e8e\u8bbe\u7f6e\u5c40\u90e8\u53d8\u91cf\u65e0\u6cd5\u517c\u987e\u6240\u6709\u60c5\u51b5\u9020\u6210\u7684.\n- bfs\u5e76\u8bbe\u7f6e\u76f4\u5f84\u4e0a\u8fb9\u6743\u4e3a-1\u540e\uff0c\u5982\u679ck=2\u5219\u4e0d\u80fd\u7ee7\u7eed\u76f4\u63a5\u4f7f\u7528bfs\u83b7\u5f97\u7b54\u6848\uff0c\u8fd9\u662fbfs\u7684\u62d3\u5c55\u52a0\u70b9\u6027\u9020\u6210\u7684\uff08\u7c7b\u6bd4dijkstra\uff09.\n- \u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf\u5bfc\u51fa\u5c31\u7528\u4e00\u4e2a\u53d8\u91cf.\u00a0\n\n**BFS\u65b9\u6cd5\u6b63\u786e\u6027\u7684\u8bc1\u660e\uff1a**\n- \u5982\u679c\u6e90\u70b9\u5728\u76f4\u5f84\u4e0a\uff1a\u663e\u7136\u6b63\u786e.\n- \u5982\u679c\u6e90\u70b9\u4e0d\u5728\u76f4\u5f84\u4e0a\uff1a\u65e2\u7136\u6e90\u70b9\u4e0d\u5728\u76f4\u5f84\u4e0a\u90a3\u4e48\u76f4\u5f84\u4e00\u5b9a\u5728\u6e90\u70b9\u7684\u67d0\u68f5\u5b50\u6811\u5185\u3002\u7531\u6811\u548c\u76f4\u5f84\u7684\u6027\u8d28\u53ef\u77e5\u6b64\u65f6\u76f4\u63a5\u53d6\u6700\u8fdc\u70b9\u7136\u540e\u518d\u8fdb\u884c\u4e00\u6b21bfs\u5373\u53ef\u6c42\u5f97\u76f4\u5f84.\n\n------------\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int MAXN=2e5,INF=0x3f3f3f3f;\nstruct Edge{\n\tint from,to,w,nxt;\n}e[MAXN*2];\nint head[MAXN],edgeCnt=1;\nvoid addEdge(int u,int v,int w){\n\te[++edgeCnt].from=u;\n\te[edgeCnt].to=v;\n\te[edgeCnt].w=w;\n\te[edgeCnt].nxt=head[u];\n\thead[u]=edgeCnt;\n}\nint n;\nint d[MAXN],pre[MAXN];\nint bfs(int p){\n\tmemset(d,0x3f,sizeof(d));\n\tqueue<int> q;\n\tq.push(p);\n\td[p]=pre[p]=0;\n\twhile(!q.empty()){\n\t\tint nowNode=q.front();q.pop();\n\t\tfor(int i=head[nowNode];i;i=e[i].nxt){\n\t\t\tint nowV=e[i].to;\n\t\t\tif(d[nowV]==INF){\n\t\t\t\td[nowV]=d[nowNode]+e[i].w;\n\t\t\t\tpre[nowV]=i;\n\t\t\t\tq.push(nowV);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(d[i]>d[ans])ans=i;//\u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf\u5bfc\u51fa\u5c31\u7528\u4e00\u4e2a\u53d8\u91cf. \n\t}\n\treturn ans;\n}\nint p;\nint get(){\n\tp=bfs(1);\n\tp=bfs(p);\n\treturn d[p];\n}\nvoid change(){\n\tfor(;pre[p];p=e[pre[p]].from){\n\t\te[pre[p]].w=e[pre[p]^1].w=-1;\n\t}\n}\nbool vis[MAXN];\nint f[MAXN],l2;\nvoid dfs(int p){\n\tvis[p]=1;\n\tfor(int i=head[p];i;i=e[i].nxt){\n\t\tint nowV=e[i].to;\n\t\tif(!vis[nowV]){\n\t\t\tdfs(nowV);\n\t\t\tl2=max(l2,f[p]+f[nowV]+e[i].w);\n\t\t\tf[p]=max(f[p],f[nowV]+e[i].w);\n\t\t}\n\t}\n}\nint main(){\n\tint k;\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n-1;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddEdge(a,b,1);\n\t\taddEdge(b,a,1);\n\t}\n\tint l1=get();\n\tif(k==1){\n\t\tprintf(\"%d\\n\",2*(n-1)-l1+1);\n\t\treturn 0;\n\t}else{\n\t\tchange();\n\t\tdfs(1);\n\t\tprintf(\"%d\\n\",2*n-l1-l2);\n\t\treturn 0;\n\t}\n}\n```\n",
        "postTime": 1567607930,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    },
    {
        "content": "[\u6b22\u8fce](https://blog.csdn.net/jokingcoder/article/details/88077214)[\u6765](https://blog.csdn.net/jokingcoder/article/details/88077214)[CSDN](https://blog.csdn.net/jokingcoder/article/details/88077214)[\u8e6d](https://blog.csdn.net/jokingcoder/article/details/88077214)[\u8bbf\u95ee](https://blog.csdn.net/jokingcoder/article/details/88077214)[\u91cf](https://blog.csdn.net/jokingcoder/article/details/88077214)\n\n\u9898\u76ee\u7684\u610f\u601d\u662f\u8ba9\u4f60\u5728\u4e00\u68f5\u6811\u4e0a\u52a0K\u6761\u8fb9\uff0c\u518d\u4ece1\u51fa\u53d1\u7ecf\u8fc7\u6240\u6709\u8282\u70b9\u548c\u6240\u6709\u8fb9\uff08\u70b9\u548c\u8fb9\u5747\u53ef\u91cd\u590d\uff09\u56de\u52301\u7684\u6700\u77ed\u8def\u5f84\n\n\u9274\u4e8e`K == 1 || K == 2`\uff0c\u5206\u7c7b\u8ba8\u8bba\u5c31\u597d\u4e86\n\n### K = 1\n\n\u4e0d\u52a0\u8fb9\u7684\u65f6\u5019`ans = edges_sum * 2`\n\n\u52a0\u4e00\u6761\u8fb9\u80fd\u5c06ans\u51cf\u5c11\u8fd9\u6761\u8fb9\u4e24\u70b9\u4e4b\u95f4\u539f\u6765\u7684\u8ddd\u79bb-1\n\n\u663e\u7136\u627e\u76f4\u5f84\u662f\u6700\u5408\u9002\u7684\u3002\u3002\n\n\u6240\u4ee5`ans = edges_sum * 2 - diameter + 1`\n\n### K = 2\n\n\u5728`K == 1`\u7684\u65f6\u5019\u5f62\u6210\u7684\u57fa\u73af\u6811\u5728\u52a0\u4e00\u6761\u8fb9\uff0c\u5219\u7ea2\u8272\u90e8\u5206\u8981\u8d70\u4e24\u904d\uff0c\u6240\u4ee5ans\u53c8\u51cf\u5c11\u4e86\u7eff\u8272\u90e8\u5206\u7684\u957f\u5ea6-\u7ea2\u8272\u90e8\u5206\u7684\u957f\u5ea6-1\n\n![](https://img-blog.csdnimg.cn/20190302160221268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pva2luZ2NvZGVy,size_16,color_FFFFFF,t_70)\n\n\u6c42[\u7eff](https://blog.csdn.net/jokingcoder/article/details/88077214)\u8272\u90e8\u5206\u7684\u957f\u5ea6-[\u7ea2](https://blog.csdn.net/jokingcoder/article/details/88077214)\u8272\u90e8\u5206\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c\u6709\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u6cd5\n\n\u2014\u2014\u628a\u7ea2\u8272\u90e8\u5206\uff08\u5176\u5b9e\u662f\u73af\u4e0a\u7684\u90e8\u5206\uff09\u7684\u8fb9\u6743\u5168\u90fd\u53d8\u6210-1\uff08\u6492\u82b1\u82b1\n\n\u518d\u6b21\u8dd1\u76f4\u5f84\n\n------\n\n~~\u5982\u679c\u4f60\u73b0\u5728\u8dd1\u53bb\u5199\u4ee3\u7801\uff0c\u90a3\u4e48\u606d\u559c\u4f60\u670950%\u7684\u51e0\u7387\u50cf\u6211\u4e00\u6837DeBuG\u597d\u4e45~~\n\n**\u56e0\u4e3a\u542b\u6709\u8d1f\u6743\u8fb9\u7684\u76f4\u5f84\u4e0d\u80fd\u7528\u4e24\u4e2adfs/bfs\u6c42(\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u5c31\u662f\u8fd9\u6837)\uff0c\u6240\u4ee5\u5f97\u5199\u6811\u5f62dp\u6c42\u76f4\u5f84**\n\n\n\n[\u8d34\u4e0a\u4ee3\u7801](https://blog.csdn.net/jokingcoder/article/details/88077214)\uff1b\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define N 100010\n#define INF 0x3f3f3f3f\n\nusing namespace std;\n\nstruct Node{\n\tint to, nxt, len;\n}e[N << 1];\n\nint dep, lst[N], cnt, d[N], v[N], x[N], y[N], n, K, tot, dx[N];\n\ninline void add(int u, int v) {\n\te[++cnt].to = v;\n\te[cnt].nxt = lst[u];\n\tlst[u] = cnt;\n\te[cnt].len = 1;\n}\n\ninline void dfs(int x, int fa, int dep) {\n\td[x] = dep;\n\tfor (int i = lst[x]; i; i = e[i].nxt) {\n\t\tint son = e[i].to;\n\t\tif (son == fa) continue;\n\t\tdfs(son, x, dep + e[i].len);\n\t}\n}\n\ninline int dfs1(int x, int fa, int goal) {\n\tif (x == goal) return 1;\n\tfor (int i = lst[x]; i; i = e[i].nxt) {\n\t\tint son = e[i].to;\n\t\tif (son == fa) continue;\n\t\tif (dfs1(son, x, goal)) {\n\t\t\te[i].len = -1;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\ninline void make(int x, int fa) {\n\tfor (int i = lst[x]; i; i = e[i].nxt) {\n\t\tint son = e[i].to;\n\t\tif (son == fa) continue;\n\t\tmake(son, x);\n\t\ttot = max(tot, dx[x] + dx[son] + e[i].len);\n\t\tdx[x] = max(dx[x], dx[son] + e[i].len);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &K);\n\tfor (int i = 1; i < n; ++i) {\n\t\tscanf(\"%d%d\", &x[i], &y[i]);\n\t\tadd(x[i], y[i]);\n\t\tadd(y[i], x[i]);\n\t}\n\tint ans = n - 1 << 1;\n\tint dmax = 0, imax = 0;\n\tdfs(1, 1, 0);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (d[i] > dmax) {\n\t\t\tdmax = d[i];\n\t\t\timax = i;\n\t\t}\n\t}\n\tmemset(d, 0, sizeof d);\n\tdfs(imax, imax, 0);\n\tdmax = 0;\n\tint iimax = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (d[i] > dmax) {\n\t\t\tdmax = d[i];\n\t\t\tiimax = i;\n\t\t}\n\t}\n\tans -= dmax - 1;\n\tif (K == 1) {\n\t\tprintf(\"%d\\n\", ans);\n\t\treturn 0;\n\t}\n\tdfs1(imax, imax, iimax);\n\tdfs1(iimax, iimax, imax);//\u6b63\u53cd\u4e24\u6b21\u628a\u73af\u4e0a\u7684\u6240\u6709\u8fb9\u641e\u6210-1\n\tmake(1, 1);\n\tans -= tot - 1;\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1551514212,
        "uid": 27711,
        "name": "fangxk2003",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3629 \u3010[APIO2010]\u5de1\u903b\u3011"
    }
]