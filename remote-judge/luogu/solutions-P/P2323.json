[
    {
        "content": "**\u9996\u5148\uff0c\u9898\u76ee\u5e94\u8be5\u662f\u6709\u4e9b\u6c34\u7684\u3002**\n\u5148\u8bf4\u601d\u8def\uff0c\u5176\u5b9e\u975e\u5e38\u6e05\u6670\uff0c\u56e0\u4e3a\u5b83\u81f3\u5c11\u8981\u6709k\u6761\u4e00\u7ea7\u516c\u8def\uff0c\u6240\u4ee5\u5148\u5c06\u4e00\u7ea7\u516c\u8def\u7684\u82b1\u8d39\u6392\u5e8f\uff0c\u7528kruskal\u8fdb\u884c\u5904\u7406\u3002\u7136\u540e\u518d\u5c06\u5269\u4e0b\u7684\u516c\u8def\u6839\u636e\u4e8c\u7ea7\u516c\u8def\u7684\u82b1\u8d39\u6392\u5e8f\uff0c\u7528kruskal2\u8fdb\u884c\u5904\u7406\uff0c\u4e4b\u540e\u518d\u5c06\u7b54\u6848\u6309\u9898\u76ee\u8981\u6c42\u6392\u5e8f\u5373\u53ef\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct node\n{\n       int u;\n       int v;\n       int w1;\n       int w2;\n       int num;//num\u8bb0\u8bfb\u5165\u8fb9\u7684\u987a\u5e8f\uff0c\u540e\u9762\u7684\u8f93\u51fa\u4f1a\u7528\u5230 \n}road[20005];\nstruct nodee\n{\n       int bh;\n       int gl;\n}ans[20005];\nint flag=0;\nint book[20005];//book\u5b58\u8fd9\u6761\u8def\u6709\u6ca1\u6709\u5efa\u9020\u8fc7 \nint father[20005];//\u7236\u8282\u70b9 \nint n,k,m,minn=0;//n\uff0cm\uff0ck\u5982\u9898 minn\u5b58\u82b1\u8d39\u6700\u591a\u7684\u70b9\u7684\u4ef7\u503c \nbool merge(int ,int );\nint getfather(int );\nvoid kruskal1();//\u5efa\u4e00\u7ea7\u516c\u8def \nvoid kruskal2();//\u5efa\u4e8c\u7ea7\u516c\u8def \nbool cmp1(node ,node);//\u6309\u4e00\u7ea7\u516c\u8def\u82b1\u8d39\u6392\u5e8f \nbool cmp2(node ,node);//\u6309\u4e8c\u7ea7\u516c\u8def\u82b1\u8d39\u6392\u5e8f \nbool cmp3(nodee ,nodee);//\u628a\u7b54\u6848\u6309\u516c\u8def\u7684\u5e8f\u53f7\u987a\u5e8f\u6392\u5e8f \nint main()\n{\n    scanf(\"%d%d%d\",&n,&k,&m);\n    memset(book,0,sizeof(book));\n    for(int i=1;i<=n;i++)\n            father[i]=i;\n    for(int i=1;i<=m-1;i++)\n    {\n            scanf(\"%d%d%d%d\",&road[i].u,&road[i].v,&road[i].w1,&road[i].w2);\n            road[i].num=i;\n    }//\u521d\u59cb\u5316\u51c6\u5907 \n    sort(road+1,road+m,cmp1);\n    kruskal1();\n    sort(road+1,road+m,cmp2);\n    kruskal2();\n    sort(ans+1,ans+n,cmp3);\n    printf(\"%d\\n\",minn);\n    for(int i=1;i<=n-1;i++)\n            printf(\"%d %d\\n\",ans[i].bh,ans[i].gl);\n    getchar();\n    getchar();\n    return 0;\n}\nbool cmp1(node x,node y)\n{\n      return x.w1<y.w1;\n}\nbool cmp2(node x,node y)\n{\n     return x.w2<y.w2;\n}\nbool cmp3(nodee x,nodee y)\n{\n     return x.bh<y.bh;\n}\nint getfather(int x)\n{\n    if(x==father[x])\n                    return x;\n    else\n    {\n        father[x]=getfather(father[x]);\n        return father[x];\n    }\n}\nbool merge(int x,int y)\n{\n     int f1=getfather(x),f2=getfather(y);\n     if(f1==f2)\n               return false;\n     else\n     {\n         father[f2]=f1;\n         return true;\n     }\n}\nvoid kruskal1()\n{\n     int step=0;\n     for(int i=1;i<=m-1;i++)\n     {\n             if(book[road[i].num]==0)//\u8fd9\u4e2a\u516c\u8def\u7684\u5e8f\u53f7\u5728book\u4e2d\u6ca1\u6709\u88ab\u7528\u8fc7 \n                           if(merge(road[i].u,road[i].v))\n                           {\n                                                         book[road[i].num]=1;\n                                                         flag++;\n                                                         step++;\n                                                         minn=max(minn,road[i].w1);\n                                                         ans[flag].bh=road[i].num;\n                                                         ans[flag].gl=1;\n                           }\n             if(step==k)\n                        return ;\n     }\n}\nvoid kruskal2()\n{\n     int step=0;\n     for(int i=1;i<=m-1;i++)\n     {\n             if(book[road[i].num]==0)//\u8fd9\u4e2a\u516c\u8def\u7684\u5e8f\u53f7\u5728book\u4e2d\u6ca1\u6709\u88ab\u7528\u8fc7 \n                           if(merge(road[i].u,road[i].v))\n                           {\n                                                         book[road[i].num]=1;\n                                                         flag++;\n                                                         step++;\n                                                         minn=max(minn,road[i].w2);\n                                                         ans[flag].bh=road[i].num;\n                                                         ans[flag].gl=2;\n                           }\n             if(step==n-1-k)\n                        return ;\n     }\n}\n```\n\u4e0b\u6765\u8bf4\u8bf4\u9898\u6c34\u5728\u4f55\u5904\n\n- \u9898\u76ee\u7684\u8981\u6c42\uff08\u5373\u4e8c\u5206\u7b54\u6848\uff09\u5728\u6d4b\u8bd5\u6570\u636e\u4e2d\u6839\u672c\u6ca1\u6709\u4f53\u73b0\uff0c\u56e0\u4e3a\u9898\u76ee\u53ea\u8bf4\u81f3\u5c11k\u6761\u4e00\u7ea7\u516c\u8def\uff0c\u6ca1\u8bf4\u4e0d\u80fd\u8d85\u8fc7k\u6761\u3002\u4e07\u4e00\u6709\u8981\u5efa\u9020\u7684\u4e8c\u7ea7\u516c\u8def\u7684\u82b1\u8d39\u6bd4\u524d\u9762k\u6761\u4e00\u7ea7\u516c\u8def\u82b1\u8d39\u9ad8\u600e\u4e48\u529e\uff1f\u90a3\u5c31\u53ea\u80fd\u518d\u5efa\u4e00\u6761\u4e00\u7ea7\u516c\u8def\uff08\u4fdd\u8bc1\u5efa\u7684\u8fd9\u6761\u6bd4\u53e6\u4e00\u6761\u4e8c\u7ea7\u516c\u8def\u82b1\u8d39\u5c11\uff09\n- \u6ca1\u6709\u8981\u6c42\u5efa\u9020\u516c\u8def\u7684\u603b\u8d39\u7528\u6700\u5c0f\uff0ckruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u4e2a\u7279\u6027\u76f4\u63a5\u88ab\u5ffd\u7565\u4e86\n\n\u63a5\u4e0b\u6765\u5927\u81f4\u8bf4\u4e00\u4e0b\u5982\u679c\u8fd9\u9898\u4e0d\u6c34\u8be5\u600e\u4e48\u5408\u7406ac\n\n\u5927\u81f4\u601d\u8def\uff1a\n**\u552f\u4e00\u4e0d\u540c\uff1a\u5efa\u4e24\u4e2a\u90bb\u63a5\u8868 \u4e00\u4e2a\u5b58\u4e00\u7ea7\u516c\u8def\u82b1\u8d39\u65f6\u95f4 \u4e00\u4e2a\u5b58\u4e8c\u7ea7\u516c\u8def\u82b1\u8d39\u65f6\u95f4**\n```cpp\nvoid kruskal1()\n{\n     int step=0;\n     for(int i=1;i<=m-1;i++)\n     {\n             if(book[road[i].num]==0)//\u8fd9\u4e2a\u516c\u8def\u7684\u5e8f\u53f7\u5728book\u4e2d\u6ca1\u6709\u88ab\u7528\u8fc7 \n                           if(merge(road[i].u,road[i].v))\n                           {\n                                                         book[road[i].num]=1;\n                                                         flag++;\n                                                         step++;\n                                                         minn=max(minn,road[i].w1);\n                                                         ans[flag].bh=road[i].num;\n                                                         ans[flag].gl=1;\n                           }\n             if(step==k)//\u6b64\u5904\u6539\u4e3a\u627e\u5230\u4e00\u4e2a\u5c31\u8fd4\u56de\n                        return ;\n     }\n}\n```\n\u8fd9\u6837 \u5148\u5faa\u73afk\u6b21kruskal1\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8981\u5220\u9664\u5df2\u7ecf\u5efa\u4e86\u7684\u8fb9\uff0c\u7136\u540e\u5faa\u73af\u5b8c\u6bd5\u540e\uff0c\u518d\u7528sort1\u6392\u5e8f\u4e00\u6b21\u5b58\u4e00\u7ea7\u516c\u8def\u82b1\u8d39\u7684\u90bb\u63a5\u8868\uff0c\u518d\u7528sort2\u3002\u7136\u540e\u6bd4\u8f83\u73b0\u5728\u7684\u6700\u5c0f\u7684\u4e00\u7ea7\u516c\u8def\u82b1\u8d39\u548c\u4e8c\u7ea7\u516c\u8def\u82b1\u8d39\u3002\u5982\u679c\u524d\u5c0f\u4e8e\u540e\uff0c\u7ee7\u7eed\u5efa\u9020\u4e00\u7ea7\u516c\u8def\uff0c\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u4e8c\u7ea7\u516c\u8def\u82b1\u8d39\u5927\u4e8e\u4e00\u7ea7\u516c\u8def\u3002\u7136\u540e\u7528\u4e00\u6b21kruskal2.\n\n\u8fd9\u91cc\u5176\u5b9e\u5c31\u7528\u4e86**\u8d2a\u5fc3**\u6216\u8005\u8bf4**\u4e8c\u5206\u7b54\u6848**\u7684\u601d\u60f3\uff0c\u4e24\u8005\u5728\u6b64\u9898\u4e2d\u90fd\u53ef\u4ee5\u89e3\u91ca\u3002",
        "postTime": 1540994135,
        "uid": 96934,
        "name": "\u65c5\u4eba\u675c",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37 p2323 \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u5927\u4f53\u6709\u4e24\u79cd\u505a\u6cd5\uff1aKruskal\u548c\u4e8c\u5206\u7b54\u6848\uff0c\u590d\u6742\u5ea6\u5206\u522b\u4e3a$O(m\\log m)$\u548c$O(m\\log_2(30000) )$\uff0c\u5176\u5b9e\u5dee\u4e0d\u591a\u3002\n\n## Kruskal\n\n\u6211\u4eec\u65e2\u7136\u8981\u60f3\u8d39\u7528\u5c3d\u53ef\u80fd\u7684\u5c11\uff0c\u4f46\u662f\u4ed6\u53c8\u5fc5\u987b\u81f3\u5c11\u6709$k$\u4e2a\u4e00\u7c7b\u516c\u8def\uff0c\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u5c31\u5c3d\u53ef\u80fd\u5c11\u7684\u53d6\u4e00\u7c7b\u516c\u8def\uff0c\u5373\uff0c\u53ea\u53d6$k$\u6761\u4e00\u7c7b\u516c\u8def\u3002\u6211\u4eec\u7528Kruskal\u751f\u6210$k$\u6761\u4e00\u7c7b\u516c\u8def\u5e76\u4e0d\u4f1a\u51fa\u73b0\u6d6a\u8d39\uff08\u56de\u8def\uff09\u3002\u5269\u4e0b\u7684\u9053\u8def\u6211\u4eec\u5c31\u9009$n-1-k$\u6761\u4e8c\u53f7\u516c\u8def\uff0c\u4e5f\u7528Kruskal\u5728\u5269\u4e0b\u7684\u516c\u8def\u4e2d\u89e3\u51b3\uff08\u6ce8\u610f\u4e24\u6b21\u6392\u5e8f\u7684\u4f9d\u636e\u4e0d\u540c\uff09\u3002\u6240\u6709\u9009\u7684\u8fb9\u4ee3\u4ef7\u53d6\u4e00\u4e2a\u6700\u5927\u503c\u5c31\u597d\u3002\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e4+5,M=2e4+5;\nint fa[N];\nstruct type {\n\tint u,v,w,tt;\n\tint ididi,choo;\n}a[M],b[M];\nvector<type> o;\nint find(int x){\n\tif(x==fa[x]) return x;\n\telse return fa[x]=find(fa[x]);\n}\nvoid unite(int x,int y){\n\tfa[find(x)]=find(y);\n}\nbool cmp(type a,type b){\n\treturn a.w<b.w;\n}\nbool cmp_(type a,type b){\n\treturn a.tt<b.tt;\n}\nbool _cmp(type a,type b){\n\treturn a.ididi<b.ididi;\n}\nint main()\n{\n\tint n,k,m,ta,tb,tc1,tc2,m1=0,m2=0,ans=0;\n\tcin>>n>>k>>m;\n\tfor(int i=1;i<=m-1;i++){\n\t\tcin>>ta>>tb>>tc1>>tc2;\n\t\ta[++m1].u=ta,a[m1].v=tb;\n\t\ta[m1].w=tc2,a[m1].tt=tc1,a[m1].ididi=i;\n\t}\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tsort(a+1,a+m1+1,cmp_);\n\tint y=n-1-k,i;\n\tfor(i=1;i<=m1&&k;i++){\n\t\tif(find(a[i].u)!=find(a[i].v)){\n\t\t\tunite(a[i].u,a[i].v);\n\t\t\tans=max(ans,a[i].tt);\n\t\t\tk--;\n\t\t\ta[i].choo=1;\n\t\t\to.push_back(a[i]);\n\t\t}\n\t}\n\tsort(a+i,a+m1+1,cmp);\n\tfor(;i<=m1;i++){\n\t\tif(find(a[i].u)!=find(a[i].v)){\n\t\t\tunite(a[i].u,a[i].v);\n\t\t\tans=max(ans,a[i].w);\n\t\t\ta[i].choo=2;\n\t\t\to.push_back(a[i]);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\tsort(o.begin(),o.end(),_cmp);\n\tfor(int i=0;i<o.size();i++)\n\t    cout<<o[i].ididi<<' '<<o[i].choo<<endl;\n\treturn 0;\n}\n```\n## \u4e8c\u5206\u7b54\u6848\n\n\u5927\u4f53\u601d\u8def\u662f\uff0c\u5bf9\u4e8e\u4e8c\u5206\u5230\u7684\u8fd9\u4e2a\u503c$mid$\uff0c\u770b\u770b\u6211\u4eec\u5728\u6bcf\u6b21\u6240\u9700\u8d39\u7528\u4e0d\u8d85\u8fc7$mid$\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u591a\u5730\u9009\u62e9\u4e00\u7c7b\u516c\u8def\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u8fbe\u5230$n-1$\u90a3\u4e48\u5269\u4e0b\u7684\u7528\u4e8c\u7c7b\u516c\u8def\u3002\u5982\u679c\u65e2\u6ee1\u8db3\u4e00\u7c7b\u516c\u8def\u6761\u6570\u5927\u4e8e\u7b49\u4e8e$k$\u53c8\u6ee1\u8db3\u603b\u5171\u9009\u62e9\u5927\u4e8e\u7b49\u4e8e$n-1$\u6761\u8def\uff0c\u90a3\u4e48\u8fd9\u4e2a$mid$\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\u3002\u5426\u5219\u8bf4\u660e$mid$\u5c0f\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint m1;\nint n,k,m,ta,tb,tc1,tc2;\nconst int N=1e4+5,M=2e4+5;\nint fa[N],vis[M],ans[M];\nstruct type {\n\tint u,v,w1,w2;\n}a[M],b[M];\nint find(int x){\n\tif(x==fa[x]) return x;\n\telse return fa[x]=find(fa[x]);\n}\nvoid unite(int x,int y){\n\tfa[find(x)]=find(y);\n}\nbool check(int pp){\n    int cnt=0,ss=0;\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tmemset(vis,0,sizeof(vis));\n    for(int i=1;i<=m1;i++){\n        if(find(a[i].u)!=find(a[i].v)){\n\t\t\tif(a[i].w1<=pp){\n\t\t\t\tvis[i]=1;\n        \t    cnt++;\n        \t    ss++;\n        \t    unite(a[i].u,a[i].v);\n        \t}\n        }\n    }\n    for(int i=1;i<=m1;i++){\n        if(find(a[i].u)!=find(a[i].v)){\n        \tif(a[i].w2<=pp){\n        \t\tvis[i]=2;\n        \t\tunite(a[i].u,a[i].v);\n        \t\tss++;\n\t\t\t}\n    \t}\n    }\n    if(cnt>=k&&ss>=n-1){\n        for(int i=1;i<=m1;i++) ans[i]=vis[i];\n        return true;\n    }\n    else return false;\n}\nint main(){\n\tcin>>n>>k>>m;\n\tfor(int i=1;i<=m-1;i++){\n\t\tcin>>ta>>tb>>tc1>>tc2;\n\t\ta[++m1].u=ta,a[m1].v=tb;\n\t\ta[m1].w1=tc1,a[m1].w2=tc2;\n\t}\n\tint l=0,r=30000,mid;\n\twhile(l<r-1){\n\t    mid=(l+r)/2;\n\t    if(check(mid)) r=mid;\n\t    else l=mid;\n\t}\n\tcout<<r<<endl;\n\tfor(int i=1;i<=m1;i++){\n\t\tif(ans[i]) cout<<i<<' '<<ans[i]<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1594952007,
        "uid": 300078,
        "name": "pengyule",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u3010\u53c2\u8003\u8d44\u6599\u3011\n\nliusu201601\u7684\u535a\u5ba2\uff1ahttps://blog.csdn.net/liusu201601\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\nOI island\u662f\u4e00\u4e2a\u975e\u5e38\u6f02\u4eae\u7684\u5c9b\u5c7f\uff0c\u81ea\u5f00\u53d1\u4ee5\u6765\uff0c\u5230\u8fd9\u513f\u6765\u65c5\u6e38\u7684\u4eba\u5f88\u591a\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8be5\u5c9b\u5c7f\u521a\u521a\u5f00\u53d1\u4e0d\u4e45\uff0c\u6240\u4ee5\u90a3\u91cc\u7684\u4ea4\u901a\u60c5\u51b5\u8fd8\u662f\u5f88\u7cdf\u7cd5\u3002\u6240\u4ee5\uff0cOIER Association\u7ec4\u7ec7\u6210\u7acb\u4e86\uff0c\u65e8\u5728\u5efa\u7acbOI island\u7684\u4ea4\u901a\u7cfb\u7edf\u3002\n\nOI island\u6709$n$\u4e2a\u65c5\u6e38\u666f\u70b9\uff0c\u4e0d\u59a8\u5c06\u5b83\u4eec\u4ece1\u5230n\u6807\u53f7\u3002\u73b0\u5728\uff0cOIER Association\u9700\u8981\u4fee\u516c\u8def\u5c06\u8fd9\u4e9b\u666f\u70b9\u8fde\u63a5\u8d77\u6765\u3002\u4e00\u6761\u516c\u8def\u8fde\u63a5\u4e24\u4e2a\u666f\u70b9\u3002\u516c\u8def\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u4e0d\u59a8\u79f0\u5b83\u4eec\u4e3a\u4e00\u7ea7\u516c\u8def\u548c\u4e8c\u7ea7\u516c\u8def\u3002\u4e00\u7ea7\u516c\u8def\u4e0a\u7684\u8f66\u901f\u5feb\uff0c\u4f46\u662f\u4fee\u8def\u7684\u82b1\u8d39\u8981\u5927\u4e00\u4e9b\u3002 \n\nOIER Association\u6253\u7b97\u4fee$n-1$\u6761\u516c\u8def\u5c06\u8fd9\u4e9b\u666f\u70b9\u8fde\u63a5\u8d77\u6765\uff08\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u666f\u70b9\u4e4b\u95f4\u90fd\u4f1a\u6709\u4e00\u6761\u8def\u5f84\uff09\u3002\u4e3a\u4e86\u4fdd\u8bc1\u516c\u8def\u7cfb\u7edf\u7684\u6548\u7387, OIER Association\u5e0c\u671b\u5728\u8fd9$n-1$\u6761\u516c\u8def\u4e4b\u4e2d,\u81f3\u5c11\u6709$k(0 \\leq k \\leq n-1)$\u6761\u4e00\u7ea7\u516c\u8def\u3002OIER Association\u4e5f\u4e0d\u5e0c\u671b\u4e3a\u4e00\u6761\u516c\u8def\u82b1\u8d39\u592a\u591a\u7684\u94b1\u3002\u6240\u4ee5\uff0c\u4ed6\u4eec\u5e0c\u671b\u5728\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u82b1\u8d39\u6700\u591a\u7684\u4e00\u6761\u516c\u8def\u7684\u82b1\u8d39\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\u800c\u4f60\u7684\u4efb\u52a1\u5c31\u662f\uff0c\u5728\u7ed9\u5b9a\u4e00\u4e9b\u53ef\u80fd\u4fee\u5efa\u7684\u516c\u8def\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9$n-1$\u6761\u516c\u8def\uff0c\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u3011\n\n- \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6570$n(1 \\leq n \\leq 10000),k(0 \\leq k \\leq n-1),m(n-1 \\leq m \\leq 20000)$\uff0c\u8fd9\u4e9b\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5f00\u3002\n\n$N$\u548c$k$\u5982\u524d\u6240\u8ff0\uff0c$m$\u8868\u793a\u6709$m$\u5bf9\u666f\u70b9\u4e4b\u95f4\u53ef\u4ee5\u4fee\u516c\u8def\u3002\n\n\u4ee5\u4e0b\u7684$m-1$\u884c\uff0c\u6bcf\u4e00\u884c\u6709$4$\u4e2a\u6b63\u6574\u6570$a,b,c1,c2(1 \\leq a,b \\leq n,a \\not= b,1 \\leq c2 \\leq c1 \\leq 30000)$\u3002\n\n\u8868\u793a\u5728\u666f\u70b9$a$\u4e0e$b$\u4e4b\u95f4\u53ef\u4ee5\u4fee\u516c\u8def\uff0c\u5982\u679c\u4fee\u4e00\u7ea7\u516c\u8def\uff0c\u5219\u9700\u8981$c1$\u7684\u82b1\u8d39\uff0c\u5982\u679c\u4fee\u4e8c\u7ea7\u516c\u8def\uff0c\u5219\u9700\u8981$c2$\u7684\u82b1\u8d39\u3002\n\n**\u6ce8\u610f\uff0c\u5728\u5b9e\u9645\u8bc4\u6d4b\u65f6\uff0c\u5c06\u53ea\u4f1a\u6709$m-1$\u6761\u516c\u8def\u3002**\n\n- \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6570\u636e\uff0c\u8868\u793a\u82b1\u8d39\u6700\u5927\u7684\u516c\u8def\u7684\u82b1\u8d39\u3002\n\n\u63a5\u4e0b\u6765\u7684$n-1$\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6b63\u6574\u6570$t$\u548c$p$\uff0c$t$\u548c$p$\u8868\u793a\u5728\u8f93\u5165\u7684\u7b2c$t$\u5bf9\uff08\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u4ece1\u5f00\u59cb\u6807\u53f7\uff09\u666f\u70b9\u4e4b\u95f4\u4fee\u5efa$p$\u7ea7\u516c\u8def\u3002\n\n$n-1$\u6761\u516c\u8def\u7684\u8f93\u51fa\u5fc5\u9009$t$\u7684\u5927\u5c0f\u9012\u589e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u65b9\u6848\u4f7f\u82b1\u8d39\u6700\u5927\u7684\u516c\u8def\u82b1\u8d39\u6700\u5c0f\uff0c\u90a3\u4e48\u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u3011\n\n- \u8f93\u5165\u6837\u4f8b\n```\n4 2 5 \n1 2 6 5\n1 3 3 1\n2 3 9 4\n2 4 6 1\n```\n- \u8f93\u51fa\u6837\u4f8b\n```\n6\n1 1\n2 1\n4 2\n```\n\n\u611f\u8c22@lutaiye dalao\u63d0\u51fa\u7684\u5efa\u8bae\uff0c\u5df2\u4fee\u6539\u6837\u4f8b\u3002\n\n\u3010\u9898\u89e3\u3011\n\n- \u6211\u4f1a\u641c\u7d22\uff01\n\n\u8003\u8651\u76f4\u63a5\u641c\u7d22\u5224\u65ad\u7528\u90a3\u4e00\u6761\u8fb9\uff0c\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u4e0d\u9ad8\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u671f\u671b\u5f97\u5206$0$~$35$\u5206\u3002\n\n- \u6211\u4f1a\u6700\u5c0f\u751f\u6210\u6811\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u9009$k$\u6761\u9ad8\u4ef7\u8def\uff0c$c1$\u5c0f\u7684\u8fb9\u4f18\u5148\u9009\uff08\u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86$px1()$\u51fd\u6570\u6765\u8fdb\u884c\u6392\u5e8f\uff09\u3002\u7531\u4e8e\u8003\u8651\u5230$m \\leq 20000$\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u6392\u5e8f\u7684\u65f6\u5019\u8981\u7528\u5feb\u6392\u3002\u9009\u5b8c\u4e86\u8fd9$k$\u6761\u9ad8\u4ef7\u8def\u540e\u6211\u4eec\u8fd8\u8981\u9009$(n-1)-k$\u6761\u4f4e\u4ef7\u8def\uff0c\u7531\u4e8e$c2 \\leq c1$\uff0c\u4e5f\u5373\u9ad8\u4ef7\u8def\u4e00\u5b9a\u6bd4\u4f4e\u4ef7\u8def\u8981\u8d35\uff0c\u6240\u4ee5\u9009\u62e9\u4f4e\u4ef7\u8def\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u8fd8\u8981\u6392\u4e00\u6b21\u5feb\u6392\uff0c$c2$\u5c0f\u7684\u8fb9\u4f18\u5148\u9009\u62e9\uff08\u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86$px2()$\u51fd\u6570\u6765\u8fdb\u884c\u6392\u5e8f\uff09\uff0c\u5728\u9009\u7f16\u7684\u65f6\u5019\u8981\u5c06\u65b9\u6848\u5b58\u5230\u6570\u7ec4$fa[][]$\u91cc\u9762\u53bb\u3002\u5728\u8fd9\u91cc\u6211\u7528\u4e86$fa[][0]$\u6765\u8868\u793a$t$\uff0c\u5e76\u4e14\u6211\u7528\u4e86$fa[][1]$\u6765\u8868\u793a$p$\uff0c\u5728\u8fd9\u91cc\u6211\u7528\u4e86$f[i].su$\u6765\u8868\u793a\u6392\u5e8f\u540e\u7684\u7b2c$i$\u6761\u8fb9\u7684\u8f93\u5165\u7684\u7f16\u53f7\u662f\u591a\u5c11\u3002\u6700\u540e\u518d\u6309$t$\u7684\u5927\u5c0f\u6765\u6392\u4e0b\u5e8f\u5373\u53ef\uff08\u5728\u8fd9\u91cc\u6211\u7528\u4e86\u51fd\u6570$px3()$\u6765\u5b9e\u73b0\u8fd9\u4e00\u90e8\u5206\uff09\u3002\u7531\u4e8e\u6211\u662f\u7528\u624b\u5199\u5feb\u6392\u7684\uff0c\u6240\u4ee5\u6211\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u957f\u4e00\u4e9b\u3002\u4e0b\u9762\u4e0a\u5feb\u6392\u7684\u90e8\u5206\uff08$px1()$\u548c$px2()$\u4ee5\u53ca$px3()$\uff09\uff0c\u4ee5\u53ca\u6700\u5c0f\u751f\u6210\u6811\u7684\u90e8\u5206\uff08$kruskal()$\uff0c\u5728\u8fd9\u91cc\u6211\u7528$kruskal(1)$\u6765\u8868\u793a\u9009\u62e9\u90a3$k$\u6761\u9ad8\u4ef7\u8def\u7684\u90e8\u5206\uff0c\u5e76\u7528$kruskal(2)$\u6765\u8868\u793a\u9009\u62e9\u90a3$(n-1)-k$\u6761\u4f4e\u4ef7\u8def\u7684\u90e8\u5206\uff0c\u5e76\u4e14\u6211\u7528\u4e86\u4e00\u4e2a\u53d8\u91cf$ans$\u6765\u8bb0\u5f55\u7b54\u6848\uff0c\u4e5f\u5373\u82b1\u8d39\u6700\u591a\u7684\u90a3\u6761\u516c\u8def\u7684\u82b1\u8d39\u6700\u5c0f\u662f\u591a\u5c11\uff09\u3002\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5728\u6392$c1$\u7684\u65f6\u5019\u6709\u76f8\u540c\u7684\uff0c\u90a3\u4e48$c2$\u5927\u7684\u4f18\u5148\u3002\u56e0\u4e3a\u5982\u679c\u6709\u8fb9\u7684$c1$\u7684\u6743\u503c\u76f8\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u7559\u4e0b\u90a3\u4e2a$c2$\u5c0f\u7684\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u6837\u5b50\u4f1a\u66f4\u52a0\u7684\u4f18\u54e6\u3002\n\n\u4e0b\u9762\u4e0aAC\u4ee3\u7801~\n```\n#include <cstdio>\nstruct node{ int x,y,c1,c2,su; } e[1000001];\nint len=0,ans=0,n=0,m=0,k=0;\nint fa[10001][2],f[10001];\nint max(int x,int y)\n{\n\treturn x>y?x:y;\n}\nvoid px1(int l,int r)\n{\n\tint x=l,y=r,mid=e[(l+r)/2].c1,t=e[(l+r)/2].c2;\n\twhile(x<=y)\n\t{\n\t\twhile(e[x].c1<mid || (e[x].c1==mid && e[x].c2>t))\n\t\t{\n\t\t\tx++;\n\t\t}\n\t\twhile(e[y].c1>mid || (e[y].c1==mid && e[y].c2<t))\n\t\t{\n\t\t\ty--;\n\t\t}\n\t\tif(x<=y)\n\t\t{\n\t\t\tnode t=e[x];\n\t\t\te[x]=e[y];\n\t\t\te[y]=t;\n\t\t\tx++;\n\t\t\ty--;\n\t\t}\n\t}\n\tif(l<y)\n\t{\n\t\tpx1(l,y);\n\t}\n\tif(x<r)\n\t{\n\t\tpx1(x,r);\n\t}\n}\nvoid px2(int l,int r)\n{\n\tint x=l,y=r,mid=e[(l+r)/2].c2;\n\twhile(x<=y)\n\t{\n\t\twhile(e[x].c2<mid)\n\t\t{\n\t\t\tx++;\n\t\t}\n\t\twhile(e[y].c2>mid)\n\t\t{\n\t\t\ty--;\n\t\t}\n\t\tif(x<=y)\n\t\t{\n\t\t\tnode t=e[x];\n\t\t\te[x]=e[y];\n\t\t\te[y]=t;\n\t\t\tx++;\n\t\t\ty--;\n\t\t}\n\t}\n\tif(l<y)\n\t{\n\t\tpx2(l,y);\n\t}\n\tif(x<r)\n\t{\n\t\tpx2(x,r);\n\t}\n}\nint find(int x)\n{\n\tif(x==f[x])\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\treturn f[x]=find(f[x]);\n\t}\n}\nvoid kruskal(int x)\n{\n\tif(x==1)\n\t{\n\t\tint p=0;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint tx=find(e[i].x);\n\t\t\tint ty=find(e[i].y);\n\t\t\tif(tx!=ty)\n\t\t\t{\n\t\t\t\tf[tx]=ty;\n\t\t\t\tfa[++len][0]=e[i].su;\n\t\t\t\tfa[len][1]=1;\n\t\t\t\tans=max(ans,e[i].c1);\n\t\t\t\tp++;\n\t\t\t\tif(p==k)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(x==2)\n\t{\n\t\tint p=k;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint tx=find(e[i].x);\n\t\t\tint ty=find(e[i].y);\n\t\t\tif(tx!=ty)\n\t\t\t{\n\t\t\t\tf[tx]=ty;\n\t\t\t\tfa[++len][0]=e[i].su;\n\t\t\t\tfa[len][1]=2;\n\t\t\t\tans=max(ans,e[i].c2);\n\t\t\t\tp++;\n\t\t\t\tif(p==n-1)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid px3(int l,int r)\n{\n\tint x=l,y=r,mid=fa[(l+r)/2][0];\n\twhile(x<=y)\n\t{\n\t\twhile(fa[x][0]<mid)\n\t\t{\n\t\t\tx++;\n\t\t}\n\t\twhile(fa[y][0]>mid)\n\t\t{\n\t\t\ty--;\n\t\t}\n\t\tif(x<=y)\n\t\t{\n\t\t\tint t=fa[x][0];\n\t\t\tfa[x][0]=fa[y][0];\n\t\t\tfa[y][0]=t;\n\t\t\tt=fa[x][1];\n\t\t\tfa[x][1]=fa[y][1];\n\t\t\tfa[y][1]=t;\n\t\t\tx++;\n\t\t\ty--;\n\t\t}\n\t}\n\tif(l<y)\n\t{\n\t\tpx3(l,y);\n\t}\n\tif(x<r)\n\t{\n\t\tpx3(x,r);\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&k,&m);\n\tm--;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\te[i].su=i;\n\t\tscanf(\"%d %d %d %d\",&e[i].x,&e[i].y,&e[i].c1,&e[i].c2);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i]=i;\n\t}\n\tpx1(1,m);\n\tkruskal(1);\n\tpx2(1,m);\n\tkruskal(2);\n\tprintf(\"%d\\n\",ans);\n\tpx3(1,len);\n\tfor(int i=1;i<=len;i++)\n\t{\n\t\tprintf(\"%d %d\\n\",fa[i][0],fa[i][1]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1522054253,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9 $m - 1$ \u6761\u65e0\u5411\u8fb9\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u79cd\u8fb9\u6743\uff0c\u8d35\u4e00\u70b9\u7684\u548c\u4fbf\u5b9c\u4e00\u70b9\u7684\u3002\u8981\u6c42\u81f3\u5c11\u9009\u62e9 $k$ \u6761\u8d35\u8fb9\u4f7f\u5f97\u56fe\u8054\u901a\u4e14\u82b1\u8d39\u6700\u5927\u7684\u8fb9\u6743\u503c\u6700\u5c0f\u3002\n\n## Input\n\n\u7b2c\u4e00\u884c\u662f\u4e09\u4e2a\u6574\u6570 $n,m,k$\u3002\n\n\u4e0b\u9762 $m - 1$ \u884c\u6bcf\u884c\u63cf\u8ff0\u4e00\u6761\u8fb9\u3002\n\n## Output\n\n\u8f93\u51fa\u6700\u5c0f\u82b1\u8d39\u4e0e\u65b9\u6848\u3002\n\n## Hint\n\n$1~\\leq~n~\\leq~10000,1~\\leq~m~\\leq~20000$ \uff0c\u8fb9\u6743 $\\leq~30000$\n\n## Solution\n\n\u4e24\u79cd\u505a\u6cd5\u3002\n\n\u9996\u5148\u9898\u9762\u5df2\u7ecf\u975e\u5e38\u660e\u663e\u7684\u63d0\u793a\u4e8c\u5206\u7b54\u6848\uff0c\u4e8e\u662f\u6211\u4eec\u4e8c\u5206\u6700\u5927\u82b1\u8d39\uff0c\u7136\u540e\u5bf9\u4e24\u79cd\u8fb9\u5206\u522b\u8dd1\u514b\u9c81\u65af\u5361\u5c14\u5373\u53ef\u3002\u7531\u4e8e\u8f83\u8d35\u7684\u8fb9\u6709\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u4f18\u5148\u8dd1\u8f83\u8d35\u7684\u8fb9\u7684\u514b\u9c81\u5c14\u5361\u5c14\uff0c\u8dd1\u5b8c\u518d\u8dd1\u4fbf\u5b9c\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u6761\u5408\u6cd5\u7684\u4e24\u4e2a\u4e0d\u540c\u7684\u8054\u901a\u5757\u4e4b\u95f4\u7684\u8fb9\uff0c\u4ed6\u88ab\u679a\u4e3e\u5230\u7684\u65f6\u5019\u662f\u4e00\u5b9a\u4f1a\u88ab\u9009\u62e9\u7684\u3002\n\n\u6ce8\u610f\u5230\u514b\u9c81\u65af\u5361\u5c14\u7684\u590d\u6742\u5ea6\u4e3a\u6392\u5e8f $O(m \\log m)$\uff0c\u4e3b\u7b97\u6cd5 $O(m~\\alpha(n))$\uff0c\u672c\u9898\u4e0d\u9700\u8981\u6392\u5e8f\uff0c\u4f46\u662f\u4e00\u5171\u8dd1\u4e86 $O(\\log c)$ \u6b21\u4e3b\u7b97\u6cd5\uff0c\u6240\u4ee5\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m~\\alpha(n)~\\log c)$\n\n\u770b\u8d77\u6765\u90a3\u4e2a $O(\\alpha(n)~\\times~\\log c)$ \u975e\u5e38\u4e0d\u4f18\u7f8e\uff0c\u76f4\u89c9\u544a\u8bc9\u6211\u8fd9\u4e00\u90e8\u5206\u662f\u53ef\u4ee5\u88ab\u53bb\u6389\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4f18\u5316\u4e0a\u8ff0\u7b97\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u5728\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u5bf9\u8fb9\u6743\u662f\u5426\u6392\u5e8f\u662f\u4e0d\u5f71\u54cd\u7b54\u6848\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5bf9\u8d35\u7684\u8fb9\u8fdb\u884c\u6392\u5e8f\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u5bf9\u8d35\u7684\u8fb9\u8dd1 MST \u7684\u65f6\u5019\u7b49\u4ef7\u4e8e\u9009\u62e9\u51fa\u81f3\u5c11 $k$ \u6761\u4e0d\u540c\u8054\u901a\u5757\u4e4b\u95f4\u7684\u8fb9\u3002\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u8d2a\u5fc3\u7684\u9009\u51fa $k$ \u6761\u8fb9\u6743\u6700\u5c0f\u7684\u4e14\u80fd\u6784\u6210\u5408\u6cd5\u8054\u901a\u5757\u7684\u8fb9\u3002\u5373\u5bf9\u8d35\u7684\u8fb9\u8dd1 MST \u76f4\u5230\u9009\u51fa $k$ \u6761\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5269\u4e0b\u7684\u8fb9\u9009\u8d35\u7684\u8fd8\u662f\u4fbf\u5b9c\u7684\u662f\u65e0\u6240\u8c13\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u4ed6\u4eec\u6df7\u5728\u4e00\u8d77\u6392\u5e8f\uff0c\u518d\u5bf9\u5269\u4e0b\u7684\u8fb9\u8dd1\u4e00\u904d MST \u5373\u53ef\u5f97\u7b54\u6848\u3002\n\n\u8fd9\u6837\u505a\u6211\u4eec\u4e00\u5171\u8fdb\u884c\u4e86 $O(1)$ \u6b21\u514b\u9c81\u65af\u5361\u5c14 $O(m~\\alpha(n))$ \u7684\u4e3b\u7b97\u6cd5\uff0c\u6392\u5e8f\u590d\u6742\u5ea6\u4e3a $O(m~\\log m)$\u3002\u7531\u4e8e \u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(m~(\\log m + \\alpha(n))$\u3002\u6210\u529f\u7684\u53bb\u6389\u4e86\u4e58\u79ef\n\n## Code\n\n$O(m~\\alpha(n)~\\log c)$:\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n    const int L = 1000000;\n    char buf[L], *front=buf, *end=buf;\n    char GetChar() {\n        if (front == end) {\n            end = buf + fread(front = buf, 1, L, stdin);\n            if (front == end) return -1;\n        }\n        return *(front++);\n    }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n    char ch = IPT::GetChar(), lst = ' ';\n    while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n    while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n    if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n    char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n    if (x < 0) {x = -x, putchar('-');}\n    int top=0;\n    do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n    while (top) putchar(OPT::buf[top--]);\n    if (pt) putchar(aft);\n}\n\nconst int maxn = 10010;\nconst int maxm = 20010;\n\nstruct Edge {\n    int from, to, v, id;\n    \n    inline void build(int x, int y, int z, int w) {\n        from = x; to = y; v = z; id = w;\n    }\n\n    inline bool operator<(const Edge &_others) const {\n        return this->v < _others.v;\n    }\n};\nEdge com[maxm], expen[maxm];\n\nint n, m, k, dn;\nstd::vector< std::pair<int, int> > MU;\nint ufs[maxn], rk[maxn];\n\nbool check(int, bool);\nint find(ci);\nvoid  unionn(int, int);\n\nint main() {\n    freopen(\"1.in\", \"r\", stdin);\n    qr(n); qr(k); qr(m); dn = n - 1;\n    for (int i = 1, a, b, c; i < m; ++i) {\n        a = b = c = 0; qr(a); qr(b); qr(c);\n        expen[i].build(a, b, c, i);\n        c = 0; qr(c);\n        com[i].build(a, b, c, i);\n    }\n    int l = 1, r = 30000, mid, ans = 0; \n    while (l <= r) {\n        mid = (l + r) >> 1;\n        if (check(mid, false)) ans = mid, r = mid - 1;\n        else l = mid + 1;\n    }\n    qw(ans, '\\n', true); check(ans, true); std::sort(MU.begin(), MU.end());\n    for (int i = 0; i < dn; ++i) {\n        qw(MU[i].first, ' ', true); qw(MU[i].second, '\\n', true);\n    }\n    return 0;\n}\n\nbool check(int x, bool rec) {\n    for (int i = 1; i <= n; ++i) ufs[i] = i, rk[i] = 1;\n    int cnt = 0;\n    for (int i = 1; i < m; ++i) if (expen[i].v <= x) {\n        int fa = find(expen[i].from), fb = find(expen[i].to);\n        if (fa == fb) continue;\n        unionn(fa, fb);\n        if (rec) MU.push_back(std::make_pair(expen[i].id, 1));\n        ++cnt;\n    }\n    if (cnt < k) return false;\n    for (int i = 1; i < m; ++i) if (com[i].v <= x) {\n        int fa = find(com[i].from), fb = find(com[i].to);\n        if (fa == fb) continue;\n        unionn(fa, fb);\n        if (rec) MU.push_back(std::make_pair(com[i].id, 2));\n        ++cnt;\n        if (cnt == dn) return true;\n    }\n    return cnt == dn;\n}\n\nint find(int x) {return ufs[x] == x ? x : ufs[x] = find(ufs[x]);}\n\nvoid unionn(int fa, int fb) {\n    if (rk[fa] < rk[fb]) ufs[fa] = fb;\n    else if (rk[fb] < rk[fa]) ufs[fb] = fa;\n    else ufs[fb] = fa, ++rk[fa];\n}\n```\n\n$O(m (\\log m + \\alpha(n)))$:\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\tchar ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\tint top=0;\n\tdo {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 20010;\nconst int maxm = 40010;\n\nstruct Edge {\n\tint from, to, v, id, tp;\n\t\n\tinline void build(int x, int y, int z, int w, int u) {\n\t\tfrom = x; to = y; v = z; id = w; tp = u;\n\t}\n\n\tinline bool operator<(const Edge &_others) const {\n\t\treturn this->v < _others.v;\n\t}\n};\nEdge expen[maxn], tmp, edge[maxm];\nstd::vector< std::pair<int, int> >ans;\n\nint n, k, m, ecnt, maxans;\nint ufs[maxn], rk[maxn];\n\nint find(int);\nvoid unionn(int, int);\nvoid printans();\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(n); qr(k); qr(m); int dn = n - 1;\n\tfor (int i = 1, a, b, c; i < m; ++i) {\n\t\ta = b = c = 0; qr(a); qr(b); qr(c);\n\t\texpen[i].build(a, b, c, i, 1); c = 0; qr(c);\n\t\tedge[++ecnt].build(a, b, c, i, 2);\n\t}\n\tstd::sort(expen + 1, expen + m);\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; ++i) ufs[i] = i, rk[i] = 1;\n\tfor (int i = 1; i < m; ++i) {\n\t\tint fa = find(expen[i].from), fb = find(expen[i].to);\n\t\tif (fa == fb) {\n\t\t\tedge[++ecnt] = expen[i];\n\t\t} else {\n\t\t\tunionn(fa, fb);\n\t\t\tmaxans = expen[i].v;\n\t\t\tans.push_back(std::make_pair(expen[i].id, 1));\n\t\t\tif ((++cnt) == k) break;\n\t\t}\n\t} \n\tstd::sort(edge + 1, edge + 1 + ecnt);\n\tfor (int i = 1; cnt !=  dn; ++i) {\n\t\tint fa = find(edge[i].from), fb = find(edge[i].to);\n\t\tif (fa == fb) continue;\n\t\tunionn(fa, fb);\n\t\tmaxans = std::max(maxans, edge[i].v);\n\t\tans.push_back(std::make_pair(edge[i].id, edge[i].tp));\n\t\t++cnt;\n\t}\n\tprintans();\n\treturn 0;\n}\n\nint find(int x) {return ufs[x] == x ? x : ufs[x] = find(ufs[x]);}\n\nvoid unionn(int a, int b) {\n\tif (rk[a] < rk[b]) ufs[a] = b;\n\telse if (rk[a] > rk[b]) ufs[b] = a;\n\telse ufs[b] = a, ++rk[b];\n}\n\nvoid printans() {\n\tqw(maxans, '\\n', true);\n\tstd::sort(ans.begin(), ans.end());\n\tfor (auto i : ans) {\n\t\tqw(i.first, ' ', true); qw(i.second, '\\n', true);\n\t}\n}\n```\n\n",
        "postTime": 1550647459,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u505a\u6cd5\u662fKruskal\u3002\n\n\u9996\u5148\u6309\u7167c1\u6392\u5e8f\uff0c\u9009\u51fa\u524dk\u6761\u8fb9\u3002\n\n\u7136\u540e\u6309\u7167c2\u6392\u5e8f\uff0c\u9009\u51fa\u5269\u4e0bn-1-k\u6761\u8fb9\u3002\n\nCode\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,k,m;\nstruct type {\n\tint t,u,v,c1,c2;\n} path[20003];\nvoid init() {\n\tcin>>n>>k>>m; m--;\n\tfor (int i=1;i<=m;i++) {\n\t\tcin>>path[i].u>>path[i].v>>path[i].c1>>path[i].c2;\n\t\tpath[i].t=i;\n\t\tif (path[i].u>path[i].v) swap(path[i].u,path[i].v);\n\t}\n\treturn;\n}\n\nbool cmp1(struct type x,struct type y) {\n\treturn (x.c1<y.c1)||((x.c1==y.c1)&&(x.c2>y.c2));\n}\n\nint tree[10003];\n\nint father(int son) {\n\tif (tree[son]==son) return son;\n\tint temp=father(tree[son]);\n\ttree[son]=temp;\n\treturn temp;\n}\n\nbool cmp2(struct type x,struct type y) {\n\treturn x.c2<y.c2;\n}\n\nint ans=INT_MIN;\npair<int,int> rec[10003];\nvoid kruskal() {\n\tfor (int i=1;i<=n;i++) tree[i]=i;\n\tint now=1;\n\tfor (int i=1;i<=k;i++) {\n\t\twhile (father(path[now].u)==father(path[now].v)) now++;\n\t\tans=max(ans,path[now].c1); tree[father(path[now].v)]=father(path[now].u);\n\t\trec[i].first=path[now].t; rec[i].second=1; \n\t\tnow++;\n\t}\n\tsort(path+now,path+1+m,cmp2);\n\tfor (int i=k+1;i<=n-1;i++) {\n\t\twhile (father(path[now].u)==father(path[now].v)) now++;\n\t\tans=max(ans,path[now].c2); tree[father(path[now].v)]=father(path[now].u);\n\t\trec[i].first=path[now].t; rec[i].second=2; \n\t\tnow++;\n\t}\n\treturn;\n}\n\nbool cmp3(pair<int,int> x,pair<int,int> y) {\n\treturn x.first<y.first;\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tinit();\n\tsort(path+1,path+1+m,cmp1);\n\t//for (int i=1;i<=m;i++) cout<<path[i].t<<endl;\n\tkruskal();\n\tcout<<ans<<endl;\n\tsort(rec+1,rec+n,cmp3);\n\tfor (int i=1;i<n;i++) cout<<rec[i].first<<' '<<rec[i].second<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1526359357,
        "uid": 72520,
        "name": "\u5170\u4ead\u6155\u96e8",
        "ccfLevel": 0,
        "title": "P2323 \u89e3\u9898\u62a5\u544a By Dean"
    },
    {
        "content": "# \uff01 \u5de8\u8d2a\u65e0\u6bd4 \uff01\n\n\n- \u8fd9\u9053\u9898\u7f51\u4e0a\u7edd\u5927\u90e8\u5206\u7684\u5199\u6cd5\u5c31\u662f\u4e8c\u5206\uff0c\u4f46\u662f\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4e8c\u5206\u3002\n\n\n- \u4e0d\u59a8\u60f3\u4e00\u60f3\u8d2a\u5fc3\u7684\u601d\u8def\uff0c\u7b80\u76f4\u662f\u5999\u4e0d\u53ef\u8a00\u554a\u3002\u5b8c\u5168\u51cf\u4f4e\u4e86\u96be\u5ea6\u3002\n\n\n- \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u8981\u6c42\u81f3\u5c11\u6709k\u6761\u4e00\u7ea7\u516c\u8def\uff0c\u90a3\u6211\u4eec\u5c31\u6392\u4e00\u904d\u5e8f\uff0c\u6309\u7167C1\u6765\u6392\u5e8f\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u662f\u5426\u6dfb\u52a0\u6210\u529f\uff08\u56e0\u4e3a\u53ea\u80fd\u52a0n-1\u6761\uff0c\u6240\u4ee5\u4e24\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u8fd9\u6761\u8fb9\u5c31\u4e0d\u9700\u8981\u52a0\uff09\u3002\n\n\n- \u5f53\u6dfb\u52a0\u4e86k\u6b21\u6210\u529f\u4e4b\u540e\uff08\u6ce8\u610f\u4e0d\u662f\u524dk\u6761\uff0c\u662f\u6210\u529fK\u6761\uff09\uff0c\u518d\u5c06\u5269\u4e0b\u7684\u5143\u7d20\u518d\u6b21\u6392\u5e8f\uff0c\u8fd9\u6b21\u662f\u6309\u7167C1\u4e0eC2\u7684\u6700\u5c0f\u503c\u6765\u6392\u5e8f\u7684\uff0c\u524d\u9762\u7684\u5931\u8d25\u7684\u8fb9\u4e0d\u9700\u8981\u7ba1\uff0c\u56e0\u4e3a\u5b83\u662f\u56e0\u4e3a\u51b2\u7a81\u624d\u5931\u8d25\u7684\u3002\u518d\u6b21\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u52a0\u8fb9\uff0c\u77e5\u9053\u6240\u6709\u7684\u70b9\u90fd\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u7b54\u6848\u81ea\u7136\u5c31\u51fa\u6765\u4e86\u3002\n\n- \u7b80\u76f4\u5999\u4e0d\u53ef\u8a00\u554a\uff01\n\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=11000,MAXM=21000;\nint n,k,m,TOT,ans,top,now;//TOT\u8868\u793a\u96c6\u5408\u4e2a\u6570\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5b8c\u6210\u4e86\u52a0\u8fb9\u3002\nint father[MAXN];\nstruct ed\n{\n  int from,to,c1,c2,id;\n}edge[MAXM];\nstruct gg\n{\n  int id,lv;\n}way[MAXM];\nbool comp(ed x,ed y)//\u7b2c\u4e00\u6b21\u6392\u5e8f\n{\n  if(x.c1!=y.c1)\n    return x.c1<y.c1;\n  return x.c2<y.c2;\n}\nbool cmp(ed x,ed y)//\u7b2c\u4e8c\u6b21\u6392\u5e8f\uff08\u6309\u7167\u6700\u5c0f\u503c\u6392\u5e8f\uff09\n{\n  return min(x.c1,x.c2)<min(y.c1,y.c2);\n}\nbool cop(gg x,gg y)//\u5bf9\u7b54\u6848\u8fdb\u884c\u6392\u5e8f\n{\n  return x.id<y.id;\n}\nint find(int x)\n{\n  if(x!=father[x])\n    father[x]=find(father[x]);\n  return father[x];\n}\nvoid Union(int x,int y)\n{\n  TOT--;\n  int X=find(x);\n  int Y=find(y);\n  father[X]=Y;\n}\nint main()\n{\n  scanf(\"%d%d%d\",&n,&k,&m);\n  TOT=n;m--;\n  for(int i=1;i<=n;i++)\n    father[i]=i;\n  for(int i=1,a,b,c1,c2;i<=m;i++)\n    {\n      scanf(\"%d%d%d%d\",&a,&b,&c1,&c2);\n      edge[i].from=a;\n      edge[i].to=b;\n      edge[i].c1=c1;\n      edge[i].c2=c2;\n      edge[i].id=i;\n    }\n  sort(edge+1,edge+m+1,comp);\n  int tot=1;\n  for(now=1;now<=m;now++)\n    {\n      if(tot>k)break;//\u524dK\u4e2a\u6210\u529f\u52a0\u5165\u3002\n      if(find(edge[now].from)!=find(edge[now].to))\n    {\n      tot++;\n      Union(edge[now].from,edge[now].to);\n      way[++top].id=edge[now].id;\n      way[top].lv=1;\n    }\n    }\n  ans=max(ans,edge[now-1].c1);\n  sort(edge+now,edge+m+1,cmp);//\u518d\u6b21\u6392\u5e8f\uff0c\u53ea\u8981\u6392\u5e8f\u540e\u9762\u7684\u3002\n  for(int i=now;i<=m;i++)\n    {\n      if(TOT==1)break;\n      if(find(edge[i].from)!=find(edge[i].to))\n    {\n      ans=max(ans,min(edge[i].c1,edge[i].c2));\n      Union(edge[i].from,edge[i].to);\n      way[++top].id=edge[i].id;\n      if(edge[i].c1<edge[i].c2)\n        way[top].lv=1;\n      else\n        way[top].lv=2;\n    }\n    }\n  sort(way+1,way+1+top,cop);\n  cout<<ans<<endl;\n  for(int i=1;i<=top;i++)\n    printf(\"%d %d\\n\",way[i].id,way[i].lv);\n  return /*  Made by \u201cD O Time\u201d  */0;\n}\n```",
        "postTime": 1509716510,
        "uid": 38711,
        "name": "DOTime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u201c\u6700\u5927\u6743\u503c\u7684\u6700\u5c0f\u503c\u201d\uff0c\u5355\u8c03\u7b54\u6848\uff0c\u90a3\u5c31\u4e8c\u5206\u54af\uff1b  \n\u201c\u8fde\u63a5\u6240\u6709\u666f\u70b9\u201d\uff0c\u90a3\u5c31\u6700\u5c0f\u751f\u6210\u6811\u54af\u3002\n\n\u5bf9\u4e8e\u4e8c\u5206\uff0c\u628a\u51fa\u73b0\u8fc7\u7684\u8fb9\u503c\u90fd\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4(co[ ])\u91cc\uff0c\u6392\u5e8f\u540e\u5c31\u53ef\u4ee5\u53d6mid\u4e86\u3002  \u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e24\u4e2a\u7ed3\u6784\u4f53\u50a8\u5b58\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u5404\u4e00\u4e2a\u6743\u503c\u53ca\u8fb9\u7684\u7f16\u53f7\u3002\n\n\u9898\u76ee\u8981\u6c42\u6700\u5c11k\u6761c1\uff0c\u6240\u4ee5\u5927\u4e8ek\u6761\u4e5f\u6ca1\u95ee\u9898\u3002\u90a3\u4e48\u601d\u8def\u5c31\u7b80\u5355\u4e86\uff0c**\u628a\u6240\u6709\u80fd\u7528\u7684c1\u90fd\u7528\u4e0a\uff0c\u4e0d\u591f\u5c31\u627ec2\u8865**\uff1a\n\n\u628a\u4e24\u4e2a\u7ed3\u6784\u4f53\u90fd\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5148\u4ece\u50a8\u5b58c1\u7684\u7ed3\u6784\u4f53\u91cc\u9762\u627e\uff1a  \n\u5982\u679c\u6743\u503c\u5927\u4e8emid\uff0c\u5c31break(\u540e\u9762\u7684\u8fb9\u6743\u503c\u66f4\u5927)\uff0c\u5982\u679c\u8fb9\u4e24\u7aef\u5df2\u7ecf\u8fde\u901a\u5c31continue(\u5e76\u67e5\u96c6\u5224\u65ad)\uff0c\u5426\u5219\u8bb0\u5f55\u7b54\u6848\u3002  \nc1\u7ed3\u6784\u4f53\u627e\u5b8c\u540e\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u5df2\u7ecf\u56fe\u5df2\u7ecf\u8fde\u901a\uff0c\u5c31return 1\uff1b\u5982\u679c\u8fde\u63a5\u7684\u8fb9\u5c0f\u4e8ek\uff0c\u5c31return 0\u3002  \n\u63a5\u4e0b\u6765\u5bfb\u627ec2\u7684\u7ed3\u6784\u4f53\uff0c\u5c31\u548c\u666e\u901akruskal\u4e00\u6837\u4e86\u3002\n\n\u7ec6\u8282\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\uff0c\u81ea\u8ba4\u5199\u7684\u4e0d\u7b97\u4e71\uff1a\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nconst int maxn = 2e5 + 10;\nint cpy[maxn],ans[maxn],f[maxn],co[maxn],n,m,k,a,b,c,d,cnt,p;\nbool book[maxn];\nstruct data{\n    int from,to,c,id;\n} edge1[maxn],edge2[maxn];\n\nvoid init();\nbool cmp(data,data);  \nvoid add(int,int,int,int,int);\nvoid input(); \nint find(int);\nbool merge(int,int);\nbool kruskal(int);\nvoid solve(); \nvoid output();\n\nint main(){\n    input();\n    solve();\n    output();\n    return 0;\n} \n\nvoid init(){\n    for (int i = 1; i <= n; i++)\n        f[i] = i;\n    memset(book,0,sizeof(book));\n    memset(ans,0,sizeof(ans));\n}\n\nbool cmp(data a, data b){\n    return a.c < b.c;\n}\n\nvoid add(int id, int a, int b, int c, int d){\n    edge1[cnt].id = id;\n    edge1[cnt].from = a;\n    edge1[cnt].to = b;\n    edge1[cnt].c = c;\n    edge2[cnt].id = id;\n    edge2[cnt].from = a;\n    edge2[cnt].to = b;\n    edge2[cnt].c = d;\n    cnt++;\n}\n\nvoid input(){\n    scanf(\"%d%d%d\",&n,&k,&m);\n    for (int i = 1; i < m; i++){\n        scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n        add(i,a,b,c,d);\n        if (!book[c]) book[c] = 1, co[++co[0]] = c;\n        if (!book[d]) book[d] = 1, co[++co[0]] = d;\n    }\n    sort(edge1,edge1+cnt,cmp);\n    sort(edge2,edge2+cnt,cmp);\n    sort(co+1,co+co[0]+1);\n}\n\nint find(int id){\n    return id==f[id] ? id : f[id]=find(f[id]);\n}\n\nbool merge(int a, int b){\n    int x = find(a);\n    int y = find(b);\n    if (x == y) return false;\n    f[y] = x; return true;\n}\n\nbool kruskal(int limit){\n    int done = 1;\n    for (int i = 0; i < cnt; i++){\n        int from = edge1[i].from, to = edge1[i].to;\n        int c = edge1[i].c, id = edge1[i].id;\n        if (c > limit) break;\n        if (merge(from,to)) {\n            ans[id] = 1;\n            if (++done == n) break;\n        }\n    }\n    if (done - 1 < k) return false;\n    if (done == n) return true;\n\n    for (int i = 0; i < cnt; i++){\n        int from = edge2[i].from, to = edge2[i].to;\n        int c = edge2[i].c, id = edge2[i].id;\n        if (c > limit) break;\n        if (merge(from,to)){\n            ans[id] = 2;\n\t\t\tif (++done == n) break;\n\t\t}\n    }\n    if (done == n) return true;\n    else return false;\n} \n\nvoid solve(){\n\tint l = 1, r = co[0];\n    while (l <= r){\n        init();\n        int pos = (l+r)>>1;\n        int mid = co[pos];\n        if (kruskal(mid)) r = pos - 1, p = mid, memcpy(&cpy,&ans,sizeof(ans));\n        else l = pos + 1;\n    }\n}\n\nvoid output(){\n    printf(\"%d\\n\",p);\n    for (int i = 1; i < m; i++)\n        if (cpy[i]) \n\t\t\tprintf(\"%d %d\\n\",i,cpy[i]);\n}\n```\n",
        "postTime": 1554400135,
        "uid": 129873,
        "name": "ReModer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "# \u516c\u8def\u4fee\u5efa\u95ee\u9898\u9898\u89e3\n\n\u4e00\u770b\u5230\u9898\u76ee\u4e2d\u201c\u82b1\u8d39\u6700\u5927\u7684\u516c\u8def\u6700\u5c0f\u201d\uff0c\n\n\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u4e8c\u5206\uff0c\n\n\u4e8e\u662f\u4e4e\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u6700\u5927\u7684\u8fb9x\uff0c\n\n\u8fd8\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u662f\uff1a\n\n1.\u6709k\u6761\u82b1\u8d39\u5c0f\u4e8ex\u7684\u4e00\u7ea7\u516c\u8def\uff0c\u4e14\u8fd9k\u6761\u4e0d\u6784\u6210\u73af\uff08\u56e0\u4e3a\u662f\u8981\u6811\u4e2d\u6709k\u6761\u4e00\u7ea7\u516c\u8def\uff09\n\n2.\u6240\u6709\u82b1\u8d39\u5c0f\u4e8ex\u7684\u516c\u8def\u80fd\u6784\u6210\u4e00\u6761\u6700\u5c0f\u751f\u6210\u6811\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\uff0c\u7528Kruskal\u7684\u601d\u60f3\u80fd\u52a0\u5c31\u5c3d\u91cf\u52a0\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=20006;\nint n,k,m,p,t,f[N];\nstruct xd{int x,y,c1,c2;}a[N];\ninline int read(){\n   int T=0,F=1; char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-') F=-1; ch=getchar();}\n   while(ch>='0'&&ch<='9') T=(T<<3)+(T<<1)+(ch-48),ch=getchar();\n   return F*T;\n}\nint getf(int u){return f[u]==u?u:f[u]=getf(f[u]);}\nbool merge(int u,int v){\n     u=getf(u),v=getf(v);\n     if(u==v) return 0;\n     f[u]=v; return 1;\n}\nbool check(int u){\n     p=0;\n     for(int i=1;i<=n;++i) f[i]=i;\n     for(int i=1;i<=m;++i) if(a[i].c1<=u) if(merge(a[i].x,a[i].y)) ++p; \n     if(p<k) return 0;\n     for(int i=1;i<=m;++i) if(a[i].c2<=u) if(merge(a[i].x,a[i].y)) ++p; \n     if(p<n-1) return 0;\n     return 1;\n}\nint ef(int l,int r){\n    int mid=(l+r>>1);\n    if(l==r) return l;\n    if(check(mid)) return ef(l,mid);\n    else return ef(mid+1,r);\n}\nint main(){\n    n=read(),k=read(),m=read()-1;\n    for(int i=1;i<=m;++i) a[i].x=read(),a[i].y=read(),a[i].c1=read(),a[i].c2=read();\n    t=ef(1,30000),printf(\"%d\\n\",t);\n    for(int i=1;i<=n;++i) f[i]=i;\n    for(int i=1;i<=m;++i) if(a[i].c1<=t) if(merge(a[i].x,a[i].y)) printf(\"%d %d\\n\",i,1);\n    for(int i=1;i<=m;++i) if(a[i].c2<=t) if(merge(a[i].x,a[i].y)) printf(\"%d %d\\n\",i,2);\n    return 0;\n} \n```\n",
        "postTime": 1565225083,
        "uid": 44180,
        "name": "ljk123",
        "ccfLevel": 0,
        "title": "\u516c\u8def\u4fee\u5efa\u95ee\u9898\u9898\u89e3"
    },
    {
        "content": "### \u76f4\u63a5$Kruskal$\uff08\u6211\u51c6\u5907\u53bb\u8003\u8651\u4e00\u4e0b\u4e8c\u5206...\uff09\n\n\u6982\u62ec\u4e00\u4e0b\uff0c\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u5bf9\u4e8e\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u6743\u503c(\u4e00\u7ea7&\u4e8c\u7ea7)\uff0c\u4e00\u7ea7\u6743\u503c$>=$\u4e8c\u7ea7\u6743\u503c\uff0c\u8981\u6c42\u5fc5\u987b\u9009\u81f3\u5c11$k$\u6761\u4e00\u7ea7\u516c\u8def\u3002\n\n\u56e0\u4e3a\u4e00\u7ea7\u6743\u503c\u59cb\u7ec8\u6bd4\u4e8c\u7ea7\u5168\u804c\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u9009$k$\u6761\u4e00\u7ea7\u516c\u8def\uff0c\u6c42\u8fd9\u6837\u6784\u5efa\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u6700\u957f\u7684\u4e00\u6761\u5927\u5c0f\u4e0e\u9009\u62e9\u7b2c\u51e0\u6761\u516c\u8def\u548c\u7ea7\u522b\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u5199\u4e09\u4e2a\u6392\u5e8f\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u6309\u7167\u4e00\u7ea7\u516c\u8def\u6743\u503c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9009\u51fa$k$\u6761\u516c\u8def\u3002\u7b2c\u4e8c\u4e2a\u6309\u7167\u4e8c\u7ea7\u516c\u8def\u6743\u503c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9009\u51fa$n-1-k$\u6761\u516c\u8def\uff0c\u8bb0\u5f55\u4e0b\u6765\u7b54\u6848\u9700\u8981\u7684\u503c\u540e\u6700\u540e\u8fdb\u884c\u7b2c\u4e09\u6b21\u6392\u5e8f\uff0c\u6309\u7167\u516c\u8def\u5e8f\u53f7\u7531\u5c0f\u5230\u5927\u6392\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u679a\u4e3e\u7684\u662f\u6bcf\u4e00\u6761\u8fb9\u540e\u5728\u5224\u65ad\u5404\u79cd\u6761\u4ef6\uff0c\u8fd8\u8981\u6ce8\u610f\u9898\u76ee\u7ed9\u7684\u662f$m-1$\u6761\u516c\u8def\uff0c\u4ee5\u53ca\u8c03\u7528\u5feb\u6392\u51fd\u6570\u65f6\u7684\u5404\u79cd\u8303\u56f4...\uff08$qwq$\uff09\n\n$Code$\u5982\u4e0b$:$\n\n```cpp\n#include<iostream>\n#include<sstream>\n#include<fstream>\n#include<vector>\n#include<list>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<map>\n#include<set>\n#include<bitset>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<cmath>\n#include<ctime>\n#include<iomanip>\n#include<complex>\n#include<climits>\n#define re register\n#define in inline\n#define pi acos(-1.0)\n#define inf 2147483640\n#define cd complex<double>\nusing namespace std;\nin int read()\n{\n    int sum=0,negative=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')negative=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        sum=sum*10+ch-'0';\n        ch=getchar();\n    }\n    return sum*negative;\n}\nin void write(int X)\n{\n    if(X<0)putchar('-'),X=-X;\n    if(X>=10)write(X/10);\n    putchar(X%10+'0');\n}\nconst int maxn=1e4+10;\nconst int maxm=5e4+10;\nstruct node{\n\tint u,v,w1,w2,num;\n}edge[maxm<<1];\nstruct p{\n\tint fir,sec;\n}pr[maxm<<1];\nint n,m,k,ans=-1e9,fa[maxn];\nint find(int x){\n\tif(x==fa[x]){\n\t\treturn x;\n\t}\n\treturn fa[x]=find(fa[x]);\n}\nbool cmp1(const node &x,const node &y){\n\tif(x.w1==y.w1){\n\t\treturn x.w2>y.w2;\n\t}\n\treturn x.w1<y.w1;\n}\nbool cmp2(const node &x,const node &y){\n\treturn x.w2<y.w2;\n}\nbool cmp3(const p &x,const p &y){\n\treturn x.fir<y.fir;\n}\nvoid kruskal(){\n\tint now=0;\n\tfor(re int i=1;i<=m;i++){\n\t\tint uu=find(edge[i].u),vv=find(edge[i].v);\n\t\tif(uu==vv){\n\t\t\tcontinue;\n\t\t}\n\t\tfa[uu]=fa[vv];\n\t\tans=max(ans,edge[i].w1);\n\t\tpr[now].fir=edge[i].num;\n\t\tpr[now].sec=1;\n\t\t++now;\n\t\tif(now==k){\n\t\t\tbreak;\n\t\t}\n\t}\n\tsort(edge+1,edge+m,cmp2);\n\tfor(re int i=1;i<=m;i++){\n\t\tint uu=find(edge[i].u),vv=find(edge[i].v);\n\t\tif(uu==vv){\n\t\t\tcontinue;\n\t\t}\n\t\tfa[uu]=fa[vv];\n\t\tans=max(ans,edge[i].w2);\n\t\tpr[now].fir=edge[i].num;\n\t\tpr[now].sec=2;\n\t\t++now;\n\t\tif(now+1==n){\n\t\t\tbreak;\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read();\n\tk=read();\n\tm=read();\n\tfor(re int i=1;i<=n;i++){\n\t\tfa[i]=i;\n\t}\n\tfor(re int i=1;i<m;i++){\n\t\tedge[i].u=read();\n\t\tedge[i].v=read();\n\t\tedge[i].w1=read();\n\t\tedge[i].w2=read();\n\t\tedge[i].num=i;\n\t}\n\tsort(edge+1,edge+m,cmp1);\n\tkruskal();\n\tsort(pr,pr+n-1,cmp3);\n\twrite(ans);\n\tputs(\"\");\n\tfor(re int i=0;i<n-1;i++){\n\t\twrite(pr[i].fir);\n\t\tprintf(\" \");\n\t\twrite(pr[i].sec);\n\t\tputs(\"\");\n\t}\n    return 0;\n}\n```\n\n>Thanks For Watching!",
        "postTime": 1586509021,
        "uid": 115291,
        "name": "\u8fc7\u5f80\u68a6\u9b47\u4e4b\u6b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u9898\u76ee\u7684\u610f\u601d\u662f\u5f88\u7b80\u5355\u7684\u5c31\u662f\u7ed9\u51fa\u4f60n\u4e2a\u70b9\uff0c\u7136\u540e\u7ed9\u4f60\u7ed9\u51fam-1\u6761\u8fb9\u3002\u8ba9\u4f60\u9009\n      \u51fan-1\u6761\u8fb9\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u90fd\u53ef\u4ee5\u5230\u8fbe\u3002\n\u9650\u5236\u6761\u4ef6\uff1a\u6bcf\u6761\u8fb9\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u7ea7\u516c\u8def\u548c\u4e8c\u7ea7\u516c\u8def\u3002\n          \u5fc5\u987b\u8981\u5148\u9009\u591fk\u6761\u4e00\u7ea7\u516c\u8def\uff0c\u7136\u540e\u5176\u4ed6\u7684\u4efb\u9009\uff0c\u8981\u6c42\u6700\u5927\u7684\u8fb9\u6743\u503c\u6700\n          \u5c0f\u3002\n\u601d\u8def\uff1a\u6211\u4eec\u5148\u5bf9\u4e00\u7ea7\u516c\u8def\u6392\u4e00\u904d\u5e8f\uff0c\u5148\u9009\u51fak\u6761\u8fb9\u3002\u5e76\u4e14\u6807\u8bb0\u8fd9\u6761\u8fb9\u5df2\u88ab\u9009\uff0c\u7136\n      \u540e\u52a0\u5165\u4e8c\u7ea7\u516c\u8def\u7684\u8fb9\uff0c\u8dd1\u5b8c\u6700\u5c0f\u751f\u6210\u6811\u3002\u987a\u4fbf\u5728\u6574\u4e2a\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u6761\n      \u8fb9\u662f\u9009\u62e9\u5efa\u7acb\u4e00\u7ea7\u516c\u8def\u8fd8\u662f\u4e8c\u7ea7\u516c\u8def\u3002\nAC\u4ee3\u7801\uff1a\n\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 10010\n#define MAXP 55\n#define maxnode 50010\n#define sigma_size 26\n#define mod 1000000007\n#define INF 0x3f3f3f3f\n#define lc  (id<<1)\n#define rc  (id<<1|1)\nusing namespace std;\ntypedef long long LL;\n\n\nint n,k,m,ans,cost;\nstruct Edge\n{\n    int from,to,c,pos,tp;\n    Edge(int from=0,int to=0,int c=0,int pos=0,int tp=0):from(from),to(to),c(c),pos(pos),tp(tp){};\n};\n\nEdge P[2*MAXN];\nbool vis[MAXN];\nint Q[MAXN];\n\nint pre[MAXN];\n\nint Find(int x)\n{\n    return pre[x]==x?x:Find(pre[x]);\n}\n\nvoid init(int nn)\n{\n    for(int i=0;i<=nn;i++)\n    {\n        pre[i]=i;\n    }\n}\n\nbool comp(Edge A,Edge B)\n{\n    return A.c<B.c;\n}\n\nbool comp_1(Edge A,Edge B)\n{\n    return A.pos<B.pos;\n}\n\nint main()\n{\n    scanf(\"%d %d %d\",&n,&k,&m);\n    int nn=m-1;\n    cost=0;\n    init(n);\n    for(int i=0;i<nn;i++)\n    {\n        scanf(\"%d %d %d %d\",&P[i].from,&P[i].to,&P[i].c,&P[i+nn].c);\n        P[i+nn].from=P[i].from,P[i+nn].to=P[i].to;\n        P[i].pos=i,P[i+nn].pos=i,P[i].tp=1,P[i+nn].tp=2;\n    }\n    sort(P,P+nn,comp);\n    memset(vis,false,sizeof(vis));\n    for(int pp=0;pp<nn;pp++)\n    {\n        int xx=Find(P[pp].from);\n        int yy=Find(P[pp].to);\n        if(xx!=yy)\n        {\n            pre[xx]=yy;\n            vis[P[pp].pos]=true;\n            cost=max(cost,P[pp].c);\n            Q[P[pp].pos]=P[pp].tp;\n            ans++;\n        }\n        if(ans==k)\n            break;\n    }\n    sort(P,P+2*nn,comp);\n    for(int i=0;i<2*nn;i++)\n    {\n        if(vis[P[i].pos])\n            continue;\n        int xx=Find(P[i].from);\n        int yy=Find(P[i].to);\n        if(xx!=yy)\n        {\n            pre[xx]=yy;\n            vis[P[i].pos]=true;\n            cost=max(cost,P[i].c);\n            Q[P[i].pos]=P[i].tp;\n        }\n    }\n    printf(\"%d\\n\",cost);\n    for(int i=0;i<nn;i++)\n    {\n        if(Q[i])\n        {\n            printf(\"%d %d\\n\",i+1,Q[i]);\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1577781147,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u516c\u8def\u4fee\u5efa\u95ee\u9898\n\n\u6d1b\u8c37\u4e0a\u597d\u50cf\u6709\u597d\u51e0\u9053\u548c\u8fd9\u9053\u9898\u5f88\u76f8\u4f3c\u7684\u9898\uff0c\u4f3c\u4e4e\u90fd\u548c\u516c\u8def\u6709\u5173\uff0c\u8fd8\u6709\u4e00\u9053\u53eb\u8425\u6551\uff0c\u4e0d\u8fc7\u8fd9\u9898\u662f\u6700\u6076\u5fc3\u7684\uff0c\u56e0\u4e3a\u8fd8\u8981\u8f93\u51fa\u4fee\u7684\u8def\uff0c\u5e76\u4e14\u6709\u4e00\u4e8c\u7ea7\u516c\u8def\u4e4b\u5206\u3002\n\n\u8fd9\u4e00\u5806\u9898\u6211\u4f3c\u4e4e\u90fd\u662f\u7528**\u8fd1\u4e4e\u540c\u4e00\u79cd\u65b9\u6cd5**\u8fc7\u7684\u3002\n\n**\u4e8c\u5206\u7b54\u6848+\u5e76\u67e5\u96c6\u5224\u8054\u901a**\n\n\u9898\u89e3\u91cc\u90fd\u662f\u4ec0\u4e48 **kruskal** \uff0c\u611f\u89c9\u81ea\u5df1\u597d\u83dc\uff0c\u4e0d\u8fc7\u8dd1\u4e24\u6b21 kruskal \u4e5f\u633a\u597d\u5199\u7684\n\nkruskal \u7684\u601d\u8def\u5c31\u662f\u5148\u4f18\u5148\u505a\u4e00\u7ea7\u516c\u8def\u7684\u6700\u5c0f\u751f\u6210\u6811(\u4f2a)\uff0c\u518d\u505a\u4e8c\u7ea7\u516c\u8def\u7684\uff0c\u8dd1\u4e24\u904d\u5b8c\u4e8b\u3002\n\n\u4e8c\u5206\u7b54\u6848\u5c31\u662f\u5148\u5224\u5b9a\u7b54\u6848\uff0c\u518d\u4e00\u6761\u8fb9\u4e00\u6761\u8fb9\u7684\u770b\uff0c**\u4f18\u5148\u4fee\u5b8c mid \u4e4b\u5185\u7684\u4e00\u7ea7\u516c\u8def\uff0c\u518d\u4fee mid \u4e4b\u5185\u7684\u4e8c\u7ea7\u516c\u8def**\uff0c\u8fd9\u6837\u65e2\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u7ea7\u516c\u8def\u7684\u6570\u91cf\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u8d39\u7528\u3002\u6bd4\u8f83\u7c97\u66b4\uff0c\u4e5f\u6bd4\u8f83\u597d\u60f3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log c1_{max})$ \u3002\n\n\u51e0\u9053\u7c7b\u4f3c\u7684\u9898\u76ee [P1111 \u4fee\u590d\u516c\u8def](https://www.luogu.com.cn/problem/P1111) [P1396 \u8425\u6551](https://www.luogu.com.cn/problem/P1396) \u3002\n\n\u65b9\u6cd5\u4e0d\u53ea\u9650\u4e8e\u8fd9\u4e00\u79cd\uff0c\u9898\u76ee\u7684\u672c\u8d28\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<cstring>\n#include<vector>\nusing namespace std;\n\nstruct node {\n\tlong long u,v;\n}a[20005],tmp[20005];\n\nlong long n,m,k,l,r,mid,sum,tot,ans,cnt;\n\nlong long u[20005],v[20005],c1[20005],c2[20005],fa[10005];\n\nint find(int x) {\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nvoid uni(int x,int y) {\n\tfa[find(x)]=find(y);\n}\n\nbool check(long long mid) {\n\tfor(int i=1; i<=n; i++)fa[i]=i;\n\tsum=0;\n\ttot=0;\n\tcnt=0;\n\tfor(long long i=1; i<m; i++) if(find(u[i])!=find(v[i])) {\n\t\tif(c1[i]<=mid) {\n\t\t\tuni(u[i],v[i]);\n\t\t\ttmp[++tot].u=i;\n\t\t\ttmp[tot].v=1;\n\t\t\tsum++;cnt++;\n\t\t}\n\t}\n\t\n\t\n\t\n\tfor(long long i=1; i<m; i++) if(find(u[i])!=find(v[i])) {\n\t\tif(c2[i]<=mid) {\n\t\t\tuni(u[i],v[i]);\n\t\t\ttmp[++tot].u=i;\n\t\t\ttmp[tot].v=2;\n\t\t\tcnt++;\n\t\t}\n\t}\n\n\tif(cnt!=n-1)return 0;\n\tif(sum>=k) {\n\t\tans=tot;\n\t\tfor(int i=1;i<=tot;i++)\n\t\t{\n\t\t\ta[i].u=tmp[i].u;\n\t\t\ta[i].v=tmp[i].v;\n\t\t}\n\t}\n\treturn sum<k?0:1;\n}\n\nbool cmp(node x,node y) {\n\tif(x.u==y.u)\n\treturn x.v<y.v;\n\treturn x.u<y.u;\n}\n\nint main() {\n\n\n\tcin>>n>>k>>m;\n\n\tfor(long long i=1; i<m; i++) {\n\t\tscanf(\"%lld%lld%lld%lld\",&u[i],&v[i],&c1[i],&c2[i]);\n\t\tr=max(r,c1[i]);\n\t\tr=max(r,c2[i]);\n\t}\n\n\n\n\twhile(l<r) {\n\t\tmid=(l+r)/2;\n\t\tcheck(mid)?r=mid:l=mid+1;\n\t}\n\n\tprintf(\"%lld\\n\",l);\n\t\n\tsort(a+1,a+ans+1,cmp);\n\n\tfor(long long i=1; i<=ans; i++) {\n\t\tprintf(\"%lld %lld\\n\",a[i].u,a[i].v);\n\t}\n\n\treturn 0;\n}\n```\n",
        "postTime": 1581219960,
        "uid": 154279,
        "name": "Apolynth",
        "ccfLevel": 0,
        "title": "P2323"
    },
    {
        "content": "### Slove\n\n\u7528[Kruskal](https://five-shifts-forever.blog.luogu.org/kruskal)\u5efa\u7acb\u6700\u5c0f\u751f\u6210\u6811\uff08MST)\n\n1.\u4e00\u7ea7\u516c\u8def\u662f\u4e00\u5b9a\u8981\u4fee\u7684\uff0c\u800c\u4e14\u6700\u5c11\u4e3ak\u4e2a\u3002\u6240\u4ee5\uff0c\u628a\u6240\u6709\u7684\u8fb9\u5148\u6309\u4e00\u7ea7\u516c\u8def\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n2.\u8fde\u63a5\u524dk\u4e2a\u201c\u5b89\u5168\u8fb9\u201d\uff0c\u5373\u5728Kruskal\u7b97\u6cd5\u4e2d\u53ef\u4ee5\u52a0\u5165\u7684\u8fb9\u3002\n\n3.\u628a\u540e\u51e0\u6761\u8fb9\uff0c\u6309\u4e8c\u7ea7\u516c\u8def\u7684\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n4.\u7ee7\u7eedKruskal\u3002\n\n### Tips\n\n1.\u4e3a\u4ec0\u4e48\u6b65\u9aa43\u4e2d\u6392\u5e8f\u76f4\u63a5\u5ffd\u7565\u4e86\u4e00\u7ea7\u516c\u8def\u7684\u6743\u503c\u5462\uff1f\n\n\u201c\u4e00\u7ea7\u516c\u8def\u4e0a\u7684\u8f66\u901f\u5feb\uff0c\u4f46\u4fee\u8def\u7684\u82b1\u8d39\u8981\u5927\u4e00\u4e9b\uff08\u6458\u81ea\u9898\u76ee\u63cf\u8ff0\u7684\u7b2c\u516d\u884c\uff09\u201d\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u540c\u4e00\u6761\u8fb9\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u7ea7\u516c\u8def\u7684\u6743\u503c\u662f\u8981\u5927\u4e8e\u4e8c\u7ea7\u516c\u8def\u7684\uff0c\u6240\u4ee5\u9009\u4e8c\u7ea7\u4e00\u5b9a\u4e0d\u6bd4\u9009\u4e00\u7ea7\u5dee\uff08\u5f53\u7136\uff0c\u6b64\u9898\u6709SJ,\u4e0d\u5f71\u54cd\u7ed3\u679c\u7684\u8bdd\uff0c\u9009\u4e00\u7ea7\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\u3002\n\n2.\u5728\u5b9e\u9645\u8bc4\u6d4b\u65f6\uff0c\u5c06\u53ea\u4f1a\u6709m-1\u884c\u516c\u8def\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u8981\u5c11\u4e00\u6761\uff09\n\n### Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;  //\u6807\u51c6\u5f00\u5934\nconst int N=20010;\nint n,m,k;  //\u540c\u9898\nint f[N];  //f[i]\u2014\u2014\u8282\u70b9i\u7684\u7236\u8282\u70b9\nstruct note{\n\tint u,r,c1,c2,num;\n}d[N];  //\u540c\u9898\uff0cu\uff0cr\u2014\u2014\u7aef\u70b9\uff0cnum\u2014\u2014\u5e8f\u53f7\nint s[N];  //\u8bb0\u5f55\u6bcf\u6761\u8fb9\u7684\u60c5\u51b5\nint ans;  //\u7b54\u6848\nint cnt;  //\u8bb0\u5f55\u524dk\u4e2a\u5b89\u5168\u8fb9\nbool cmp1(const note &a,const note &b){  //\u6392\u5e8f1\n\treturn a.c1<b.c1;\n}\nbool cmp2(const note &a,const note &b){  //\u6392\u5e8f2\n\treturn a.c2<b.c2;\n}\nint find(int h){\n\tif(h!=f[h]) f[h]=find(f[h]);\n\treturn f[h];\n}\nint main()\n{\n\tcin>>n>>k>>m;\n\tm--;\n\tfor(int i=1;i<=n;i++) f[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>d[i].u>>d[i].r>>d[i].c1>>d[i].c2;\n\t\td[i].num=i;\n\t}\n\tsort(d+1,d+1+m,cmp1);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tx=find(d[i].u);\n\t\ty=find(d[i].r);\n\t\tif(x!=y){\n\t\t\tf[y]=x;\n\t\t\tans=max(ans,d[i].c1);\n\t\t\ts[d[i].num]=1;\n\t\t\tcnt++;\n\t\t}\n\t\tif(cnt==k){\n\t\t\tk=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tsort(d+k+1,d+1+m,cmp2);\n\tfor(int i=k+1;i<=m;i++){\n\t\tint x,y;\n\t\tx=find(d[i].u);\n\t\ty=find(d[i].r);\n\t\tif(x!=y){\n\t\t\tf[y]=x;\n\t\t\tans=max(ans,d[i].c2);\n\t\t\ts[d[i].num]=2;\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=m;i++){  //\u5b8c\u7f8e\u8f93\u51fa\n\t\tif(s[i]>=1) cout<<i<<\" \"<<s[i]<<endl;\n\t}\n\treturn 0;\n}\n```\n~~\u8bdd\u8bf4\u4e3a\u5565\u8fd9\u4e48\u4e2a\u9898\u90fd\u662f\u84dd\u7684~~",
        "postTime": 1560915185,
        "uid": 70151,
        "name": "\u52a0\u52d2\u6bd4\u00b7\u53f2\u52aa\u6bd4",
        "ccfLevel": 0,
        "title": "P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e4b\u524d\u7684\u9898\u89e3\u4e5f\u90fd\u8bf4\u4e86\uff0c\u76f4\u63a5Kruskal\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u800c\u6211\u4e00\u5f00\u59cb\u5e76\u4e0d\u660e\u767d\u8fd9\u6837\u505a\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff0c\u540e\u6765\u60f3\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u662f\u6211Kruskal\u6ca1\u5b66\u660e\u767d\uff0c\u53c8\u5b66\u4e60\u4e86\u4e00\u4e0bKruskal\u7684\u8bc1\u660e\u3002\n\n\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\uff1a\n\nKruskal\u7684\u6b63\u786e\u6027\u662f\u7531\u4e00\u4e2a\u63a8\u8bba\u5f97\u5230\u7684\uff1a\n\n**\u5bf9\u4e8e\u56fe\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9x\uff0c\u5bf9\u4e8ex\u70b9\u8fde\u51fa\u53bb\u7684\u6240\u6709\u8fb9\uff0c\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u81f3\u5c11\u5b58\u5728\u4e8e\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0a**\n\n\u53ef\u4ee5\u63a8\u5e7f\u5f97\u5230\uff1a\n\n**\u4efb\u610f\u4e00\u4e2a\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u5b50\u56fe\uff08\u5b50\u6811\uff09\uff0c\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u5b50\u56fe\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811**\n\n\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u89c1\u7f51\u4e0a\u7684\u8bb8\u591a\u535a\u5ba2\uff0c\u6211\u5c31\u4e0d\u5177\u4f53\u8bf4\u660e\u4e86\n\n\u5f97\u5230\u628a\u7ed3\u8bba\u63a8\u5e7f\u5230\u8fd9\u9053\u9898\uff0c\u53d1\u73b0\u6709\u4e24\u4e2a\u8fb9\u6743\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\u6240\u4ee5\u5f97\u5230\u76f4\u63a5\u6700\u5c0f\u751f\u6210\u6811\u7684\u6b63\u786e\u6027\uff0c\u5373\u4f18\u5148\u9009\u5c0f\u8fb9\u6743\u6700\u540e\u5f97\u5230\u7684\u89e3\u4e00\u5b9a\u6700\u4f18\u3002\n\n\u81f3\u4e8e\u4ee3\u7801\u5176\u5b9e\u548c\u4e4b\u524d\u7684\u9898\u89e3\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u3002\u3002\n```\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=2e4+99;\nint n,k,m,fa[N];\nstruct node{\n\tint u,v,c1,c2,id;\n}a[N];\nstruct put{\n\tint t,p;\n}ans[N];\nint find(int x){\n\tif(fa[x]!=x)return fa[x]=find(fa[x]);\n\treturn x;\n}\nbool cmp1(node q,node w){\n\treturn q.c1<w.c1;\n}\nbool cmp2(node q,node w){\n\treturn q.c2<w.c2;\n}\nbool cmp3(put q,put w){\n\treturn q.t<w.t;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&k,&m);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tm--;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d%d\",&a[i].u,&a[i].v,&a[i].c1,&a[i].c2);\n\t\ta[i].id=i;\n\t}\n\tsort(a+1,a+1+m,cmp1);\n\tint tot=0,maxx=0;\n\tfor(int i=1;i<=m;i++){\n\t\tint r1=find(a[i].u),r2=find(a[i].v);\n\t\tif(r1!=r2){\n\t\t\tfa[r1]=r2;\n\t\t\tans[++tot].t=a[i].id,ans[tot].p=1;\n\t\t\tmaxx=max(maxx,a[i].c1);\n\t\t\tif(tot==k)break;\n\t\t}\n\t}\n\tsort(a+1,a+1+m,cmp2);\n\tfor(int i=1;i<=m;i++){\n\t\tint r1=find(a[i].u),r2=find(a[i].v);\n\t\tif(r1!=r2){\n\t\t\tfa[r1]=r2;\n\t\t\tans[++tot].t=a[i].id,ans[tot].p=2;\n\t\t\tmaxx=max(maxx,a[i].c2);\n\t\t\tif(tot==n-1)break;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",maxx);\n\tsort(ans+1,ans+n,cmp3);\n\tfor(int i=1;i<n;i++)printf(\"%d %d\\n\",ans[i].t,ans[i].p);\n\treturn 0;\n}\n```",
        "postTime": 1539768440,
        "uid": 55549,
        "name": "Cris",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u6765\u53d1\u4e2a\u6700\u77ed\u7684\u9898\u89e3\uff08\u5c31\u8fd9\u4e48\u81ea\u4fe1\uff09\n\n\u601d\u8def\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8d2a\u5fc3+Kruskal\uff0c\u6ce8\u610f\u5904\u7406\u5b8ck\u4e2a\u4e00\u7ea7\u516c\u8def\u540e\u8981\u518d\u6392\u5e8f\u4e00\u6b21\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint n,m,x,y,k,ans,fa[10005],vis[20005];\nstruct typ\n{\n    int u,v,c1,c2,num;\n}a[20005];\nint find(int kk)\n{\n    if(kk!=fa[kk]) fa[kk]=find(fa[kk]);\n    return fa[kk];\n}\nint cmp1(typ xx,typ yy)\n{\n    return xx.c1<yy.c1;\n}\nint cmp2(typ xx,typ yy)\n{\n    return xx.c2<yy.c2;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&k,&m);\n    for(int i=1;i<m;++i) scanf(\"%d%d%d%d\",&a[i].u,&a[i].v,&a[i].c1,&a[i].c2),a[i].num=i;\n    for(int i=1;i<=n;++i) fa[i]=i;\n    sort(a+1,a+m,cmp1);\n    for(int i=1;i<m;++i)\n    {\n        x=find(a[i].u);y=find(a[i].v);\n        if(x!=y)\n        {\n            fa[x]=y;\n            ans=a[i].c1;\n            vis[a[i].num]=1;\n            k--;\n            if(k==0)\n            {\n                k=i+1;\n                break;\n            }\n        }\n    }\n    sort(a+k,a+m,cmp2);\n    for(int i=k;i<m;++i)\n    {\n        x=find(a[i].u);y=find(a[i].v);\n        if(x!=y)\n        {\n            fa[x]=y;\n            vis[a[i].num]=2;\n            ans=max(ans,a[i].c2);\n        }\n    }\n    printf(\"%d\\n\",ans);\n    for(int i=1;i<m;++i)\n        if(vis[i])\n            printf(\"%d %d\\n\",i,vis[i]);\n    return 0;\n}\n```",
        "postTime": 1513781272,
        "uid": 27677,
        "name": "day_dream",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540eKRUSCAL\u8d2a\u5fc3\u751f\u6210\u6811\u3002\n\n\u6ce8\u610f\u4e0d\u8981\u7528\u5feb\u8bfb\uff0c\u4f1aT\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<deque>\n#include<vector>\n#include<queue>\n#include<ctime>\n#include<list>\n#include<string>\n#include<cassert>\n#define pb  push_back\n#define ft first\n#define sd second\n#define ll long long\n#define M make_pair\n#define P pair<int,int>\n#define C(i) cout<<i<<endl\n#define F(i,n) for(int i=1;i<=n;i++)\n#define REF(i,n) for(int i=n;i>=1;i--)\n#define N 20002\n#define get(a,i) a&(1<<(i-1))\n#define clr(a,b) memset(a,b,sizeof(a))\n#define setlargestack(x) int size=x<<20;char *p=(char*)malloc(size)+size;__asm__(\"movl %0, %%esp\\n\" :: \"r\"(p));\nusing namespace std;\nstruct p{\n    int x,y,w,ww;\n}e[N*2];\nint num,n,m,a,b,c1,c2,k;\nint numb;\nint father[N],rt;\nint l,r,mid;\nvoid put(int x)\n{\n    int numm = 0; char c[15];\n    while(x) c[++numm] = (x%10)+48, x /= 10;\n    while(numm) putchar(c[numm--]);\n}\nvoid add(int x,int y,int c1,int c2){\n    e[++rt].x=x;e[rt].y=y;e[rt].w=c1;e[rt].ww=c2;\n}\nint getfather(int x)\n{\n    return father[x]==x?x:father[x]=getfather(father[x]);\n}\nstruct pp{short data;int id;}ans[N];\nbool cmp(pp a,pp b){return a.id<b.id;}\nvoid done(int lim)\n{\n    for (int i = 1;i <= n;i ++)\n        father[i] = i;\n    numb = 0;\n    for (int i = 1;i <= rt;i ++)\n        if (e[i].w <= lim)\n        {\n            int x = getfather(e[i].x),y = getfather(e[i].y);\n            if (father[x] != father[y])\n            { \n                father[father[y]] = father[x];\n                numb ++;ans[numb].id=i;ans[numb].data=1;\n            }\n        }\n    for (int i = 1;i <= rt;i ++)\n        if (e[i].ww <= lim)\n        {\n            int x = getfather(e[i].x),y = getfather(e[i].y);\n            if (father[x] != father[y])\n            { \n                father[father[y]] = father[x];\n                numb ++;ans[numb].id=i;ans[numb].data=2;\n            }\n        }\n}\nbool check(int lim)\n{\n    for (int i = 1;i <= n;i ++)\n        father[i] = i;\n    int num = 0;\n    for (int i = 1;i <= rt;i ++)\n        if (e[i].w <= lim)\n        {\n            int x = getfather(e[i].x),y = getfather(e[i].y);\n            if (father[x] != father[y])\n            { \n                father[father[y]] = father[x];\n                num ++;\n            }\n        }\n    if (num < k) return false;\n    for (int i = 1;i <= rt;i ++)\n        if (e[i].ww <= lim)\n        {\n            int x = getfather(e[i].x),y = getfather(e[i].y);\n            if (father[x] != father[y])\n            { \n                father[father[y]] = father[x];\n                num ++;\n            }\n        }\n    if (num == n - 1) return 1;\n    else return false;\n}\ninline int read(){int x=0,f=1;char c=getchar();while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}while(c<='9'&&c>='0'){    x=x*10+c-'0';c=getchar();}return x*f;}\nint main()\n{\n    n=read();k=read();m=read();\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d%d\",&a,&b,&c1,&c2);\n        add(a,b,c1,c2);\n        r=max(r,c1);\n    }\n    while(r-l>1){\n        mid=(l+r)>>1;\n        if(check(mid))r=mid;else l=mid;\n    }\n    if(!check(l))l++;put(l);putchar('\\n');done(l);sort(ans+1,ans+1+numb,cmp);\n    for(int i=1;i<=numb;i++){put(ans[i].id);putchar(' ');put(ans[i].data);putchar('\\n');}\n}\n```",
        "postTime": 1478581848,
        "uid": 22404,
        "name": "Freak",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2323 \u3010[HNOI2006]\u516c\u8def\u4fee\u5efa\u95ee\u9898\u3011"
    }
]