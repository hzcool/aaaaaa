[
    {
        "content": "\u5982\u679c $b, e, c$ \u5f00\u5230 1e9 \u9898\u89e3\u4e2d\u7684\u505a\u6cd5\u4f1a TLE\n\n\u5b9e\u9645\u4e0a\u6709 $\\mathcal O(m \\times (n+m) \\log m)$ \u7684\u505a\u6cd5\u3002\n\n\u82e5\u5b58\u5728\u4e00\u6761\u8def\u4f7f\u5f97\u5728\u6bcf\u4e00\u6761\u9a6c\u8def\u4e0a\u65f6\u95f4\u90fd\u6ca1\u6709\u5361\u5728\u65f6\u95f4\u4e0a\u9650\uff0c\u90a3\u4e48\u81f3\u5c11\u53ef\u4ee5\u5728 $s$ \u8def\u53e3\u591a\u505c\u7559\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u3002\u4f9d\u6b64\u7c7b\u63a8\uff0c\u6700\u4f18\u7b54\u6848\u5fc5\u7136\u8d70\u8fc7\u4e00\u6761\u521a\u597d\u5361\u5728\u65f6\u95f4\u4e0a\u9650\u7684\u9a6c\u8def\u3002\u90a3\u4e48\u6211\u4eec\u679a\u4e3e\u8fd9\u6761\u9a6c\u8def\uff0c\u4ece\u8fd9\u6761\u9a6c\u8def\u7684\u4e24\u4e2a\u8def\u53e3\u5206\u522b\u51fa\u53d1(\u63d0\u524d\u5efa\u597d\u53cd\u5411\u8fb9)\u8d70\u5230 $s$ \u548c $t$\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u6240\u4ee5\u679a\u4e3e\u6bcf\u6761\u8fb9\u8dd1 dij / spfa \u5c31\u884c\u4e86\n\ncode\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m, beg, end, x, y, xx, yy, z, ans = 707406378;\nint disa[1000001], disb[1000001], team[1000001], teamb[1000001];\nint tot, next[1000001], first[1000001], front[1000001], \n\tgo[1000001], ta[1000001], tb[1000001], value[1000001];\nint totb, nextb[1000001], firstb[1000001], frontb[1000001], \n\tgob[1000001], tab[1000001], tbb[1000001], valueb[1000001];\nvoid Add(int x, int y, int xx, int yy, int z)\n{\n\tnext[++tot] = first[x];\n\tfirst[x] = tot;\n\tfront[tot] = x;\n\tgo[tot] = y;\n\tta[tot] = xx;\n\ttb[tot] = yy;\n\tvalue[tot] = z;\n}\nvoid Addd(int x, int y, int xx, int yy, int z)\n{\n\tnextb[++totb] = firstb[x];\n\tfirstb[x] = totb;\n\tfrontb[totb] = x;\n\tgob[totb] = y;\n\ttab[totb] = xx;\n\ttbb[totb] = yy;\n\tvalueb[totb] = z;\n}\nvoid SpfaOne(int x, int ti)\n{\n\tint t = 0, w = 1;\n\tteam[w] = x;\n\tdisa[x] = 0;\n\twhile (t < w)\n\t{\n\t\tint u = team[++t];\n\t\tfor (int i = first[u]; i; i = next[i])\n\t\t{\n\t\t\tint v = go[i];\n\t\t\tif (disa[u] + ti + value[i] <= tb[i])\n\t\t\t{\n\t\t\t\tif (disa[u] + ti < ta[i])\n\t\t\t\t{\n\t\t\t\t\tif (disa[v] > ta[i] + value[i] - ti)\n\t\t\t\t\t{\n\t\t\t\t\t\tdisa[v] = ta[i] + value[i] - ti;\n\t\t\t\t\t\tteam[++w] = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (disa[v] > disa[u] + value[i])\n\t\t\t\t{\n\t\t\t\t\tdisa[v] = disa[u] + value[i];\n\t\t\t\t\tteam[++w] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid SpfaTwo(int x, int ti)\n{\n\tint t = 0, w = 1;\n\tteamb[w] = x;\n\tdisb[x] = 0;\n\twhile (t < w)\n\t{\n\t\tint u = teamb[++t];\n\t\tfor (int i = firstb[u]; i; i = nextb[i])\n\t\t{\n\t\t\tint v = gob[i];\n\t\t\tif (ti - disb[u] - valueb[i] >= tab[i])\n\t\t\t{\n\t\t\t\tif (ti - disb[u] > tbb[i])\n\t\t\t\t{\n\t\t\t\t\tif (disb[v] > ti - tbb[i] + valueb[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tdisb[v] = ti - tbb[i] + valueb[i];\n\t\t\t\t\t\tteamb[++w] = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (disb[v] > disb[u] + valueb[i])\n\t\t\t\t{\n\t\t\t\t\tdisb[v] = disb[u] + valueb[i];\n\t\t\t\t\tteamb[++w] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tfreopen(\"road.in\", \"r\", stdin);\n\tfreopen(\"road.out\", \"w\", stdout);\n\tscanf(\"%d%d%d%d\", &n, &m, &beg, &end);\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tscanf(\"%d%d%d%d%d%\", &x, &y, &xx, &yy, &z);\n\t\tif (z <= yy - xx) // \u82e5\u5f00\u653e\u7684\u65f6\u95f4\u90fd\u4e0d\u591f\u901a\u8fc7\u5219\u4e0d\u9700\u8981\u8fd9\u4e00\u6761\u8fb9 \n\t\t{\n\t\t\tAdd(x, y, xx, yy, z);\n\t\t\tAddd(y, x, xx, yy, z);// \u53cd\u5411\u8fb9\n\t\t}\n\t}\n\tfor (int i = 1; i <= tot; ++i)\n\t{\n\t\tfor (int j = 1; j <= n; ++j) disa[j] = disb[j] = 707406378;\n\t\tSpfaOne(go[i], tb[i]);// \u8dd1\u5230\u7ec8\u70b9\n\t\tSpfaTwo(front[i], tb[i] - value[i]); // \u8dd1\u5230\u8d77\u70b9\n\t\tif (ans > disa[end] + disb[beg] + value[i]) // \u66f4\u65b0\u6700\u5927\u503c\n\t\t\tans = disa[end] + disb[beg] + value[i];\n\t}\n\tif (ans < 707406378)\n\t\tprintf(\"%d\", ans);\n\telse printf(\"Impossible\"); // \u65e0\u89e3\n\tfclose(stdin), fclose(stdout);\n}\n\n```",
        "postTime": 1628426678,
        "uid": 128195,
        "name": "chzhc",
        "ccfLevel": 7,
        "title": "P1813 \u62ef\u6551\u5c0ftim"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u4e00\u9053\u9898\u662f\u4e00\u9053\u88f8\u7684spfa\uff0c\u5f53\u7136\u56e0\u4e3a\u4e24\u4e2a\u70b9\u4e2d\u95f4\u6709\u591a\u6761\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u4e0d\u540c\u5f00\u653e\u65f6\u95f4\uff0c\u6240\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\u5fc5\u987b\u5f00100*100*1000\uff0c\u7ea69MB\uff0c\u4f46\u662f\u7528\u90bb\u63a5\u77e9\u9635\u53bb\u627e\u8fb9\u65f6\u590d\u6742\u5ea6\u662fO\uff08n*m\uff09\u52a0\u4e0aspfa\u548c\u4ece1\u5230n\u90fd\u8981\u7b97\uff0c\u603b\u590d\u6742\u5ea6\u4e3a\uff0cO\uff08k*m*n*m*n),\u8fbe\u52301e+12,\u5c31\u5b8c\u7f8e\u7684TLE\u4e86\u3002\u6240\u4ee5\u53ea\u80fd\u7528\u90bb\u63a5\u8868\uff0c\u590d\u6742\u5ea6\u4e3aO\uff08k*m*n),\u53ef\u4ee5AC\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5224\u5b9a\u52a0\u8fdb\u7684\u8fd9\u6761\u8fb9\u6ee1\u8db3\u8981\u6c42\uff0c\u7528dis[i]\u8868\u793a\u8d77\u70b9\u5230i\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u7528a[i].st,a[i].en,a[i].c,\u8868\u793a\u7b2ci\u6761\u8fb9\u4ecest\u5230en\u5747\u5f00\u653e\uff0c\u901a\u8fc7\u9700\u8981c\u7684\u65f6\u95f4\u3002\u5219\u82e5\uff08dis[u]+a[i].c<a[i].en \u4e14 max(dis[u],a[i].st)+a[i].c<dis[v]\uff09\u5373\u53ef\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\n\n------------//\u5206\u9694\u7ebf\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n \nstruct que{\n    int next,to,c,st,en;\n}a[5009];//\u90bb\u63a5\u8868\u5b9a\u4e49 \n \nint n,m,s,t,head[1009],dis[1009],tot,mx,flag[1009],ans;\n \nqueue <int> q;//stl\u961f\u5217 \n \nvoid add(int from,int to,int st,int en,int c)\n{\n    tot++;\n    a[tot].next=head[from];\n    a[tot].to=to;\n    a[tot].c=c;\n    a[tot].st=st;\n    a[tot].en=en;\n    head[from]=tot;\n}//\u90bb\u63a5\u8868\u5b58\u56fe \n \nvoid spfa(int k)//spfa\u6700\u77ed\u8def \n{\n    for(int i=1;i<=n;i++) dis[i]=1e+9;\n    memset(flag,0,sizeof(flag));\n    q.push(s);dis[s]=k;flag[s]=1;\n    while(!q.empty())\n    {\n        int u=q.front();flag[u]=0;q.pop();\n        if(u==t) ans=min(ans,dis[u]-k);//\u5230\u8fbe\u7ec8\u70b9\u8fdb\u884c\u6bd4\u8f83 \n        for(int i=head[u];i;i=a[i].next)//\u90bb\u63a5\u8868\u8bb0\u4e0b\u6bcf\u4e00\u6761\u8fb9 \n        {\n            int v=a[i].to;\n            if(dis[u]+a[i].c<=a[i].en && max(dis[u],a[i].st)+a[i].c<dis[v])//\u6ee1\u8db3\u6761\u4ef6 \n            {\n                dis[v]=max(dis[u],a[i].st)+a[i].c;\n                if(!flag[v])\n                {\n                    q.push(v);\n                    flag[v]=1;\n                }\n            }\n        }\n    }\n}\n \nint main(){\n    memset(head,0,sizeof(head));\n    tot=0;mx=-1;\n    cin>>n>>m>>s>>t;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,b,e,c;\n        scanf(\"%d%d%d%d%d\",&x,&y,&b,&e,&c);\n        if(b+c<=e) add(x,y,b,e,c);//\u51cf\u6389\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8fb9 \n        if(e>mx) mx=e;//\u627e\u6700\u957f\u7684\u65f6\u95f4 \n    }\n    ans=1e+9;//\u521d\u59cb\u5316 \n    for(int i=1;i<=mx;i++) spfa(i);//\u6bcf\u4e2a\u65f6\u95f4\u90fd\u6c42\u4e00\u904d\u6700\u77ed\u8def \n    if(ans==1e+9) printf(\"Impossible\");//\u5982\u679c\u8d70\u4e0d\u5230\u5c31\u8f93\u51faImpossible \n    else printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1540465039,
        "uid": 80859,
        "name": "\u6c64\u59c6\u91cc\u5fb7\u5c14",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0802\uff09\u3011"
    },
    {
        "content": "[\u8f6c\u81ea\u8fd9\u7bc7\u6587\u7ae0](https://blog.csdn.net/Cliu__/article/details/76973796)\n\n\u8fd9\u5c31\u662f\u4e00\u4e2aSPFA\u7684\u6a21\u677f\u9898\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\uff08\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u65f6\u95f4\u70b9\u8fdb\u884cSPFA\u3002\uff09\n\n1.\u9996\u5148\uff0c\u5982\u679c\u5230\u4e86\u5f53\u524d\u8282\u70b9\u800c\u5f53\u524d\u7684\u8def\u8fd8\u6ca1\u6709\u5f00\u653e\uff0c\u90a3\u5c31\u5e94\u8be5\u6309\u7167\u5f00\u653e\u7684\u65f6\u95f4\u70b9\u5411\u4e0b\u8d70\uff0c\u5982\u679c\u5f00\u653e\u4e86\u800c\u665a\u5230\u4e86\uff0c\u90a3\u5c31\u6309\u665a\u5230\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u5e94\u8be5\u53d6max\u3002\n\n2.\u6309\u7167\u51fa\u53d1\u7684\u65f6\u95f4\u70b9\u8fdb\u884cspfa\uff0c\u53d6\u6700\u65e9\u7684\u51fa\u53d1\u70b9\u548c\u6700\u665a\u7684\u51fa\u53d1\u70b9\u8fdb\u884cSPFA\u3002\n\n3.SPFA\u65f6\uff0c\u70b9\u80fd\u8fdb\u5165\u961f\u5217\u6709\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n\t\u2460.\u5728\u9053\u8def\u5173\u95ed\u4e4b\u524d\u5230\u8fbe\u3002\u2461.\u65f6\u95f4\u6700\u77ed\u3002\n\n\u4e8e\u662f\u4e4e\u5c31\u5f97\u51fa\u8fd9\u6837\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nqueue<int>q;\nstruct node\n{\n    int from,to,l,r,ds;\n}list[1005];\nint minn,k,maxx=-1e9,n,m,s,t,x,y,l,r,c,ans;\nint head[1005],dis[1005],v[1005];\nvoid add(int x,int y,int l,int r,int c) //\u90bb\u63a5\u8868\u6dfb\u8fb9\n{\n    list[++k].from=head[x];\n    list[k].to=y;\n    list[k].l=l;\n    list[k].r=r;\n    list[k].ds=c;\n    head[x]=k;\n}\nvoid spfa(int x)//\u6700\u77ed\u8def\u90e8\u5206\n{\n    memset(dis,127/3,sizeof(dis));\n    memset(v,0,sizeof(v));\n    q.push(s);dis[s]=x;v[s]=1;\n    while(!q.empty()){\n        int u=q.front();q.pop();v[u]=0;\n        for (int i=head[u];i;i=list[i].from){\n\n        if (max(dis[u],list[i].l)+list[i].ds<=list[i].r)\n        if (max(dis[u],list[i].l)+list[i].ds<dis[list[i].to]){\n            dis[list[i].to]=max(dis[u],list[i].l)+list[i].ds;\n            if (!v[list[i].to]){\n                v[list[i].to]=1;\n                q.push(list[i].to);\n            }\n        }\n    }\n}\n}\nint main()\n{\n    cin>>n>>m>>s>>t;\n    ans=minn=1e9;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d%d%d\",&x,&y,&l,&r,&c);\n        if (l>r) swap(l,r);\n        if (l+c>r) continue;\n        if (x==s)\n        {\n            minn=min(minn,l);\n            maxx=max(maxx,r-c);\n        }\n        add(x,y,l,r,c);\n    }\n    for (int i=minn;i<=maxx;i++)\n    {\n        spfa(i);\n        if (dis[t]==dis[0]) break;//\u4f18\u5316\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u5230\u8fbe\u4e0d\u4e86\uff0c\u90a3\u540e\u6765\u7684\u4e5f\u5c31\u5230\u8fbe\u4e0d\u4e86\u4e86\u3002\n        ans=min(ans,dis[t]-dis[s]);\n    }\n    if (ans==1e9) cout<<\"impossible\";\n    else cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1537086646,
        "uid": 49655,
        "name": "\u6a59\u5b50\u6c41",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0802\uff09\u3011"
    },
    {
        "content": "\u8003\u8bd5\u7adf\u7136\u8003\u4e86\u8fd9\u79cd\u9898\uff08\u8fd8\u6709\u4eba\u7206\u96f6\uff09\n\n\u4e0d\u4f1a\u5427\uff0c\u8bb2\u771f\u5f88\u677f\u5b50\uff0c\u5c31\u662f\u5728\u5806\u4f18\u5316 $Dijkstra$ \uff08\u6700\u5f00\u59cb\u5fd8\u8bb0\u67d3\u8272\u5bfc\u81f4\u6210\u4e86 $SPFA$ \uff09\u4e0a\u52a0\u4e86\u4e00\u4e2a\u5bf9\u4e8e\u65f6\u95f4\u7684\u5224\u65ad\uff0c\u800c\u4e14\u8fd9\u9053\u9898\u7684\u53ef\u4f18\u5316\u578b\u5f88\u591a\uff08\u6211\u505a\u4e86\u4e00\u4e0b\u5c1d\u8bd5\uff09\u3002\n\n\u9996\u5148\u770b\u5230\u9898\u9762\uff0c\u7b2c\u4e00\u773c\u5f88\u5947\u602a\uff0c\u5c24\u5176\u662f\u6ca1\u6709\u6570\u636e\u8303\u56f4\u3002\u4ed4\u7ec6\u4e00\u60f3\u5176\u5b9e\u633a\u7b80\u5355\u7684\u3002\n\n\u91cd\u70b9\u5c31\u5728\u4e8e\u5f00\u653e\u65f6\u95f4\uff0c\u6240\u4ee5\u6709\u4e9b\u8def\u662f\u6839\u672c\u8d70\u4e0d\u4e86\u7684\uff0c\u8fd9\u91cc\u53ef\u4e5f\u9884\u5904\u7406\u53bb\u9664\u3002\n\n\u540c\u65f6\u53ef\u4ee5\u5728\u4e00\u4e2a\u70b9\u4e0d\u52a8\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u662f\u8feb\u4e0d\u5f97\u5df2\uff0c\u5f85\u7740\u4e0d\u52a8\u4e00\u5b9a\u4e0d\u662f\u6700\u4f18\u89e3\uff08\u6700\u77ed\u8def\uff09\u6240\u4ee5\u53ea\u8981\u5728\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u8003\u8651\u4e00\u4e0b\u662f\u5426\u4e00\u5b9a\u8981\u7b49\u5f85\u8def\u5f84\u5f00\u542f\u3002\n\n\u6700\u540e\u8003\u8651\u4e00\u4e0b\u4f1a\u5728\u8d77\u70b9\u505c\u51e0\u79d2\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u95f4\u4e0d\u8bb0\u5f55\u5728\u5185\uff0c\u6240\u4ee5\u679a\u4e3e\u5b9e\u73b0\u5373\u53ef\uff1a\n\n# code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int SIZE = 1050;\nconst int NUM = 100;\n\ninline int read()\n{\n\tint x = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\nint n,m,s,t,num_edge;\nint head[SIZE],dis[SIZE];\nbool vis[SIZE];\nstruct node\n{\n\tint to,nxt,val,start,end;\n};\nnode edge[SIZE];\nstruct point\n{\n\tint u,dis;\n\tfriend bool operator < (point a,point b)\n\t{\n\t\treturn a.dis < b.dis;\n\t}\n};\n\npriority_queue <point> que;\n\ninline void add(int u,int v,int start,int end,int val)\n{\n\tedge[++num_edge].to = v;\n\tedge[num_edge].nxt = head[u];\n\tedge[num_edge].start = start;\n\tedge[num_edge].end = end;\n\tedge[num_edge].val = val;\n\thead[u] = num_edge;\n}\n\ninline int dijkstra(int T)\n{\n\tpoint u;\n\tu.u = s;\n\tu.dis = 0;\n\tdis[s] = T;\n\tque.push(u);\n\twhile (!que.empty())\n\t{\n\t\tu = que.top();\n        que.pop();\n        if (vis[u.u]) continue;\n        vis[u.u] = true;\n\t\tfor (int i = head[u.u]; i ; i = edge[i].nxt)\n\t\t{\n\t\t\tint v = edge[i].to;\n\t\t\tint tmp = dis[u.u];\n\t\t\tif (tmp + edge[i].val > edge[i].end) continue;\n\t\t\ttmp = max(edge[i].start,tmp) + edge[i].val;\n\t\t\tif (tmp < dis[v])\n\t\t\t{\n\t\t\t\tdis[v] = tmp;\n\t\t\t\tpoint x;\n\t\t\t\tx.u = v;x.dis = dis[v];\n\t\t\t\tque.push(x);\n\t\t\t}\n\t\t}\n\t}\n\tif (dis[t] == 1061109567) return 1061109567;\n\treturn dis[t] - dis[s];\n}\n\nint main()\n{\n\tint maxn = 0,minn = 1e9;\n\tn = read();m = read();s = read();t = read();\n\tfor (int i = 0; i < m; ++i)\n\t{\n\t\tint u = read(), v = read(), start = read(), end = read(), val = read();\n\t\tif (start + val > end) continue;\n\t\tadd(u,v,start,end,val);\n\t\tif (u == s) maxn = max(maxn,end - val),minn = min(minn,start);\n\t}\n\tint ans = 1061109567;\n\tfor (int i = minn; i <= maxn; ++i)\n\t{\n\t\tmemset(dis,0x3f,sizeof(dis));\n\t\tmemset(vis,false,sizeof(vis));\n\t\tint x = dijkstra(i);\n\t\tans = ans < x ? ans : x;\n\t}\n\tif(ans == 1061109567) printf(\"Impossible\");\n\telse printf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1603881505,
        "uid": 415231,
        "name": "nomonick",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim\u3011"
    },
    {
        "content": "\u6700\u4f18\u89e3\u7b97\u6cd5\uff08\u65e0\u5361\u5e38\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x1rkk6xv.png)\n\n------------\n\n\u6700\u77ed\u8def\u6a21\u677f $+1$ \n\n[P1813 \u62ef\u6551\u5c0ftim](https://www.luogu.com.cn/problem/P1813)\n\n\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2a\u88f8\u7684 $Dijkstra$ \u6a21\u677f\uff08\u5f53\u7136\u53ef\u4ee5\u8bc6\u522b\u7684\u6700\u77ed\u8def\uff0c\u6211\u7528\u4e86 $Dijkstra$ \uff09\n\n\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728\u4e8e\uff0c\u4ed6\u7684\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u5f00\u653e\u65f6\u95f4\uff0c\u53ea\u6709\u5728\u8fd9\u4e2a\u5f00\u653e\u65f6\u95f4\u91cc\uff0c\u8fd9\u6761\u8fb9\u624d\u8054\u901a\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7279\u6027\u641e\u5f97\u4f60\u7126\u5934\u70c2\u989d\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6761\u8fb9\u8ba9\u4f60\u4f18\u5316\u7b97\u6cd5\uff08\u53bb\u6389\u4e0d\u5408\u6cd5\u7684\u8fb9\uff09\u3002\n\n\u8fd9\u4e2a\u4e4b\u540e\u518d\u8bb2\uff0c\u9996\u5148\u5148\u4e86\u89e3\u5982\u4f55\u64cd\u4f5c\uff0c\u5728 $Dijkstra$ \u7684\u8fc7\u7a0b\u4e2d\uff0c$tim$ \u53ef\u4ee5\u5728\u4e00\u4e2a\u70b9\u4e0d\u52a8\uff0c\u5c31\u5982\u540c\u5728\u4e00\u4e2a\u70b9\u4e0a\u8fde\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a $1$ \u7684\u8fb9\uff08\u81ea\u73af\uff09\n\n\u4f46\u662f\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8fd9\u6761\u8fb9\u662f\u4e0d\u8d70\u7684\uff0c\u540c\u65f6\u8bfb\u9898\uff0c\u53ea\u6709\u5728\u8d77\u70b9\u505c\u7559\u7684\u65f6\u95f4\uff0c\u4e0d\u7528\u8bb0\u5f55\u5728\u603b\u65f6\u95f4\u91cc\u3002\n\n\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u679a\u4e3e\u8d77\u6b65\u65f6\u95f4\u6765\u8fd0\u7b97\uff0c\u90a3\u4e48\uff0c\u679a\u4e3e\u591a\u5c11\u5462\uff1f\uff1f\n\n\u6211\u4eec\u8981\u4fdd\u8bc1\uff0c\u5728\u671f\u5f85\u70b9\u8d77\u6b65\uff0c\u53ef\u4ee5\u51fa\u53d1\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u679a\u4e3e\u5230\u8d77\u70b9\u7684 $\\min b_i$\n\n\u7136\u540e\u51e0\u4e4e\u662f\u88f8\u7684 $Dijkstra$ \uff1a\n\n\u53ea\u8981\u52a0\u4e0a\u51e0\u4e2a\u4f18\u5316\uff08\u5220\u9664\uff09\u5373\u53ef\n\n\u5728\u505a\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u628a\u8def\u5f84\u8d77\u59cb\u65f6\u95f4\uff0c\u548c\u524d\u4e00\u4e2a\u70b9\u6700\u77ed\u65f6\u95f4\u53d6\u6700\u5927\uff1a\n\n$$ \ndis[v] = \\max(edge[i].start,tmp)+edge[i].val;\n$$\n\n\u6700\u540e\u8bb0\u5f97\u5224 \u65e0\u89e3\n\n# code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int SIZE = 1050;\nconst int NUM = 100;\n\ninline int read()\n{\n\tint x = 0,f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn f * x;\n}\n\nint n,m,s,t,num_edge;\nint head[SIZE],dis[SIZE];\nstruct node\n{\n\tint to,nxt,val,start,end;\n};\nnode edge[SIZE];\nstruct point\n{\n\tint u,dis;\n\tfriend bool operator < (point a,point b)\n\t{\n\t\treturn a.dis < b.dis;\n\t}\n};\n\npriority_queue <point> que;\n\ninline void add(int u,int v,int start,int end,int val)\n{\n\tedge[++num_edge].to = v;\n\tedge[num_edge].nxt = head[u];\n\tedge[num_edge].start = start;\n\tedge[num_edge].end = end;\n\tedge[num_edge].val = val;\n\thead[u] = num_edge;\n}\n\ninline int dijkstra(int T)\n{\n\t//for (int i = 1; i <= n; ++i) dis[i] = 1e9;\n\tpoint u;\n\tu.u = s;\n\tu.dis = 0;\n\tdis[s] = T;\n\tque.push(u);\n\twhile (!que.empty())\n\t{\n\t\tu = que.top();que.pop();\n\t\tfor (int i = head[u.u]; i ; i = edge[i].nxt)\n\t\t{\n\t\t\tint v = edge[i].to;\n\t\t\tint tmp = dis[u.u];\n\t\t\tif (tmp + edge[i].val > edge[i].end) continue;\n\t\t\ttmp = max(edge[i].start,tmp) + edge[i].val;\n\t\t\tif (tmp < dis[v])\n\t\t\t{\n\t\t\t\tdis[v] = tmp;\n\t\t\t\tpoint x;\n\t\t\t\tx.u = v;x.dis = dis[v];\n\t\t\t\tque.push(x);\n\t\t\t}\n\t\t}\n\t}\n\tif (dis[t] == 1061109567) return 1061109567;\n\treturn dis[t] - dis[s];\n}\n\nint main()\n{\n\tint maxn = 0,minn = 1e9;\n\tn = read();m = read();s = read();t = read();\n\tfor (int i = 0; i < m; ++i)\n\t{\n\t\tint u = read(), v = read(), start = read(), end = read(), val = read();\n\t\tif (start + val > end) continue;\n\t\tadd(u,v,start,end,val);\n\t\tif (u == s) maxn = max(maxn,start),minn = min(minn,start);\n\t}\n\tint ans = 1061109567;\n\tfor (int i = minn; i <= maxn; ++i)\n\t{\n\t\tmemset(dis,0x3f,sizeof(dis));\n\t\tint x = dijkstra(i);\n\t\tans = min(ans,x);\n\t}\n\tif(ans == 1061109567) printf(\"Impossible\");\n\telse printf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1603454338,
        "uid": 129390,
        "name": "yangwenbin",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim\u3011"
    },
    {
        "content": "###\u7b80\u5355\u7684\u8981\u547d\u3002\u3002\u3002\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\n\n\u2460n^3\u7684floyd\uff0c\u4f46\u66f4\u65b0\u7684\u65f6\u5019\u9700\u7528\u8981\u5224\u65ad\u3002\n\n\u2461 n^2\u7684dijsktra\u6700\u77ed\u8def\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u4e5f\u9700\u8981\u5224\u65ad\u3002\n\n\u2462\u8d2a\u5fc3\u601d\u60f3\uff0c\u5728\u6bcf\u6b21\u627e\u8def\u7ebf\u65f6\uff0c\u627e\u5230\u4e00\u4e2a\u5173\u95ed\u65f6\u95f4\u548c\u4f60\u8def\u8fc7\u7684\u65f6\u95f4\u5dee\u8ddd\u6700\u5c0f\u7684\u65f6\u95f4\uff0c\u4ee5\u8fd9\u4e2a\u65f6\u95f4\u4f5c\u4e3a\u589e\u91cf\u6765\u5f97\u5230\u4e0b\u4e00\u6b21\u5f00\u59cb\u884c\u52a8\u7684\u65f6\u95f4\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u4ee3\u7801\u732e\u4e0a\uff0c\u4e24\u79cd\u65b9\u6cd5\uff08c++\uff09\n\n\u65b9\u6cd5\u4e00\uff1a\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5e93\nusing namespace std;\nconst int maxn = 1005;\nint n,m,cnt;\nint x,y,o,c,z,s,t,ans=1e9,minn=1e9,maxx;\nint f[maxn],head[maxn];\nbool vis[maxn];\nqueue<int> q;\nstruct Edge{\n    int to,next,s,t,val;\n}e[maxn*5];\nvoid addEdge(int u,int v,int s,int t,int w){\n    e[++cnt].to=v;e[cnt].val=w;e[cnt].next=head[u];head[u]=cnt;\n    e[cnt].s=s,e[cnt].t=t;\n}\nvoid spfa(int x){\n    for(int i=1;i<=n;i++)\n        vis[i]=0,f[i]=1e9;\n    f[s]=x;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();vis[u]=0;\n        if(u==t)    ans=min(ans,f[u]-x);\n        for(int i=head[u];i;i=e[i].next){\n            int v=e[i].to;\n            if(f[u]+e[i].val<=e[i].t){    //\u80fd\u5728\u5173\u95e8\u4e4b\u524d\u8d76\u5230 \n                if(max(e[i].s,f[u])+e[i].val<f[v]){    //\u4e0b\u9762\u5c5e\u4e8espfa\u64cd\u4f5c \n                    f[v]=max(e[i].s,f[u])+e[i].val;\n                    if(!vis[v])    q.push(v),vis[v]=0;\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m>>s>>t;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>o>>c>>z;\n        if(c-z<o)    continue;//\u5220\u6389\u4e0d\u7b26\u6761\u4ef6\u7684\u8fb9 \n        if(x==s)    minn=min(minn,o),maxx=max(maxx,c-z);\n        addEdge(x,y,o,c,z);\n    }\n    for(int i=minn;i<=maxx;i++)\n        spfa(i);\n    if(ans<1e9)    cout<<ans;\n    else cout<<\"Impossible\";\n}\n```\n\u7b2c\u4e8c\u79cd\uff1a\n```cpp\n#include<bits/stdc++.h>/\u8fd8\u662f\u4e07\u80fd\u5e93\nusing namespace std;\nconst int maxn = 1005;\nint n,m,cnt;\nint x,y,o,c,z,s,t,ans=1e9,minn=1e9,maxx;\nint f[maxn];\nint head[maxn],ind[maxn],in[maxn];\nqueue<int> q;\nstruct Edge{\n    int to,next,s,t,val;\n}e[maxn*10];\nvoid addEdge(int u,int v,int w,int s,int t){\n    e[++cnt].to=v;e[cnt].next=head[u];head[u]=cnt;\n    e[cnt].s=s,e[cnt].t=t,e[cnt].val=w;\n    ind[v]++;\n}\nvoid topo(int x){\n    q.push(s);\n    for(int i=1;i<=n;i++)\n        in[i]=ind[i],f[i]=1e9;\n    f[s]=x;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        if(u==t)    ans=min(ans,f[u]-x);\n        for(int i=head[u];i;i=e[i].next){\n            int v=e[i].to;\n            if(f[u]+e[i].val<=e[i].t)\n                f[v]=min(f[v],max(f[u],e[i].s)+e[i].val);\n            in[v]--;\n            if(in[v]==0)    q.push(v);\n        }\n    }\n}\nint main(){\n    cin>>n>>m>>s>>t;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>o>>c>>z;\n        if(c-o<z)    continue;\n        if(x==s)    minn=min(minn,o),maxx=max(maxx,c-z);\n        addEdge(x,y,z,o,c);\n    }\n    for(int i=minn;i<=maxx;i++)\n        topo(i);\n    if(ans!=1e9)cout<<ans;\n    else cout<<\"Impossible\";\n}*/\n```",
        "postTime": 1509777823,
        "uid": 42425,
        "name": "zhenghongzhe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0802\uff09\u3011"
    },
    {
        "content": "\u7531\u4e8e\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa\u8def\u53e3\u5f00\u653e\u7684\u65f6\u523b\u8303\u56f4\uff0c\u6240\u4ee5\u53ea\u80fd\u8bf4\u4e00\u4e2a\u6ca1\u6709\u65f6\u95f4\u590d\u6742\u5ea6\u4fdd\u8bc1\u7684\u7b97\u6cd5\u3002\n\n\u5148\u627e\u5230\u6700\u665a\u7684\u51fa\u53d1\u65f6\u95f4MAX\\_START\\_TIME\uff0c\u5c31\u662f\u4ece\u8d77\u70b9\u51fa\u53d1\u7684\u6240\u6709\u8def\u4e2de-c\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u679a\u4e3e\u51fa\u53d1\u65f6\u95f4start\\_time\u4eceMAX\\_START\\_TIME\u52300\uff0c\u5bf9\u6bcf\u4e2astart\\_time\u7528SPFA\u6c42\u51fa\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u53ef\u4ee5\u4f18\u5316\u7684\u4e00\u70b9\u5c31\u662f\uff0c\u679a\u4e3e\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u5c06\u6700\u77ed\u8def\u590d\u539f\u6210\u65e0\u7a77\u5927\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u8d77\u70b9\u7684\u65f6\u95f4\uff0c\u7136\u540e\u63a5\u7740\u505aspfa\uff08\u5176\u5b9e\u53d8\u6210\u4e86bfs\uff09\u5373\u53ef\u3002\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(MAX\\_START\\_TIME\\*M)\n",
        "postTime": 1509722818,
        "uid": 54522,
        "name": "\u51b7\u6708\u51b0\u77b3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1813 \u3010\u62ef\u6551\u5c0ftim_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0802\uff09\u3011"
    }
]