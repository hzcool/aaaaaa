[
    {
        "content": "\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u957f\u5ea6\u4e3a$k$\u7684\u533a\u95f4\uff0c\u7b97\u51fa\u628a\u8fd9\u6bb5\u533a\u95f4\u5168\u90e8\u53d8\u6210\u4e00\u4e2a\u503c\u7684\u4ee3\u4ef7\uff0c\u5bf9\u4e8e\u6240\u6709\u533a\u95f4\u53d6\u6700\u5c0f\u503c\u5373\u53ef\n\n### 1\uff0c\u628a\u8fd9\u6bb5\u533a\u95f4\u53d8\u6210\u51e0\n\n\u53ef\u80fd\u80fd\u591f\u731c\u51fa\u53d8\u6210\u4e2d\u4f4d\u6570\uff0c\u522b\u4eba\u90fd\u662f\u663e\u7136\uff0c\u53ea\u6709\u6211\u8bc1\u4e86\u8bc1\uff08\u592a\u5f31\u4e86\uff09\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u8bc1\u660e\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217$S$\uff0c\u8bbe\u5b83\u7684\u4e2d\u4f4d\u6570\u4e3a$x$\n\n\u8bbe\u5e8f\u5217\u4e2d\u6709$a$\u4e2a\u6570\u5c0f\u4e8e$x$\uff0c$b$\u4e2a\u6570\u5927\u4e8e$x$\uff0c$c$\u4e2a\u6570\u7b49\u4e8e$x$\n\n\u8bbe\u5c06\u8fd9\u6bb5\u533a\u95f4\u53d8\u4e3a$x$\u7684\u4ee3\u4ef7\u4e3a$W$\n\n\u8003\u8651\u628a\u8fd9\u6bb5\u533a\u95f4\u53d8\u4e3a$x+1$\uff0c\u65b0\u4ee3\u4ef7\u4e3a$W+a+c-b$\uff0c\u56e0\u4e3a\n\n$$a+c>=k/2\\text{\uff08\u4e2d\u4f4d\u6570\u561b\uff09}$$\n\n$$a+b+c=k$$\n\n$$a+c>=b$$\n\n\uff0c\u6240\u4ee5\u65b0\u4ee3\u4ef7\u5927\u4e8e\u7b49\u4e8e\u539f\u4ee3\u4ef7\n\n\u53d8\u4e3a$x-1$\u540c\u7406\n\n\u8003\u8651\u4e24\u4e2a\u4e2d\u4f4d\u6570\u4e0d\u540c\uff0c\u9009\u54ea\u4e2a\n\n\u8bbe\u5e8f\u5217\u4e2d\u6709$c$\u4e2a\u6570\u7b49\u4e8e\u8f83\u5c0f\u4e2d\u4f4d\u6570$x$\uff0c\u8f83\u5927\u4e2d\u4f4d\u6570\u4e3a$y$\n\n\u8003\u8651\u4e0a\u5f0f\uff0c\u4e24\u4e2a\u4e2d\u4f4d\u6570\u4e0d\u540c\uff0c\u5bf9\u4e8e\u6ee1\u8db3$x+tmp<=y$\uff0c$a,b,c$\u662f\u4e0d\u53d8\u7684\uff0c$a+c=b=k/2$\uff0c\u65b0\u4ee3\u4ef7\u7b49\u4e8e\u65e7\u4ee3\u4ef7\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u4e0d\u4ec5\u4e24\u4e2a\u4e2d\u4f4d\u6570\u4ee3\u4ef7\u76f8\u540c\uff0c\u800c\u4e14\u4e24\u4e2a\u4e2d\u4f4d\u6570\u4e4b\u95f4\u6240\u6709\u6570\u4ee3\u4ef7\u76f8\u540c\n\n### 2\uff0c\u5177\u4f53\u6c42\u4ee3\u4ef7\n\n\u5e8f\u5217\u548c\u4e0e\u4e2d\u4f4d\u6570\u4e58\u5e8f\u5217\u957f\u5ea6\u4f5c\u5dee\uff1f\n\n\u76f4\u63a5\u4f5c\u5dee\u4e0d\u884c\uff0c\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e\u4e2d\u4f4d\u6570\u7684\u6570\u6c42\u548c\u51cf\u53bb\u4e2d\u4f4d\u6570\u4e58\u5b83\u4eec\u7684\u4e2a\u6570\n\n\u5bf9\u4e8e\u5c0f\u4e8e\u4e2d\u4f4d\u6570\u7684\u6570\uff0c\u4e2d\u4f4d\u6570\u4e58\u5b83\u4eec\u7684\u4e2a\u6570\u51cf\u53bb\u5b83\u4eec\u7684\u548c\uff0c\u4e24\u9879\u6c42\u548c\u5373\u53ef\n\n\u9009\u62e9\u4e00\u4e2a\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\uff08\u4e2d\u4f4d\u6570\uff0c\u5c0f\u4e8e\u548c\uff0c\u63d2\u5165\u5220\u9664\uff09\u7684\u6570\u636e\u7ed3\u6784\u5427\uff0c\u6211\u9009\u62e9\u4e86\u4e3b\u5e2d\u6811\n\n\u7136\u540e\u5c31\u662f\u66b4\u529b\u6253\u7801\u4e86\uff0c\u4e0d\u89e3\u91ca\u4e86\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst int maxn=1e5+10,maxv=1e6+1;\nstruct tree{\n    int v,ls,rs,sum;\n}a[25*maxv];\nint n,k,rt[maxn],cnt,v[maxn],ans=1e15,p,all,ave;\nvoid insert(int pre,int cur,int p,int l,int r)\n{\n    if(l==r)\n    {\n        a[cur].v=a[pre].v+1;\n        a[cur].sum=a[pre].sum+l;\n        return;\n    }\n    int m=l+r>>1;\n    if(p<=m)\n    {\n        a[cur].ls=++cnt;\n        a[cur].rs=a[pre].rs;\n        insert(a[pre].ls,a[cur].ls,p,l,m);\n    }\n    else\n    {\n        a[cur].rs=++cnt;\n        a[cur].ls=a[pre].ls;\n        insert(a[pre].rs,a[cur].rs,p,m+1,r);\n    }\n    a[cur].v=a[a[cur].ls].v+a[a[cur].rs].v;\n    a[cur].sum=a[a[cur].ls].sum+a[a[cur].rs].sum;\n}\nint kth(int x,int y,int k,int l,int r)\n{\n    if(l==r)\n        return l;\n    int m=l+r>>1,num=a[a[y].ls].v-a[a[x].ls].v;\n    if(num>=k)\n        return kth(a[x].ls,a[y].ls,k,l,m);\n    else\n        return kth(a[x].rs,a[y].rs,k-num,m+1,r);\n}\nint sum(int x,int y,int k,int l,int r)\n{\n    if(l==r)\n        return min(k,a[y].v-a[x].v)*l;\n\tint m=l+r>>1,num=a[a[y].ls].v-a[a[x].ls].v;\n\t//printf(\"%d %d %d\\n\",m,num,k);\n    if(num>=k)\n    \treturn sum(a[x].ls,a[y].ls,k,l,m);\n    else\n        return a[a[y].ls].sum-a[a[x].ls].sum+sum(a[x].rs,a[y].rs,k-num,m+1,r);\n}\nsigned main()\n{\n    scanf(\"%lld%lld\",&n,&k);\n    for(int i=1;i<k;i++)\n    {\n    \tscanf(\"%lld\",&v[i]);\n        rt[i]=++cnt,all+=v[i];\n        insert(rt[i-1],rt[i],v[i],0,1e6);\n\t}\n    for(int i=k;i<=n;i++)\n    {\n        scanf(\"%lld\",&v[i]);\n        rt[i]=++cnt,all+=v[i]-v[i-k];\n        insert(rt[i-1],rt[i],v[i],0,1e6);\n        int pos=k+1>>1,tmp=kth(rt[i-k],rt[i],pos,0,1e6),res=sum(rt[i-k],rt[i],pos,0,1e6);\n        res=all-2*res-(k-pos)*tmp+pos*tmp;\n        if(res<ans)\n        {\n        \tans=res;\n        \tp=i,ave=tmp;\n\t\t}\n    }\n    printf(\"%lld\\n\",ans);\n    for(int i=1;i<=n;i++)\n    \tif(p<i+k&&p>=i)\n    \t\tprintf(\"%lld\\n\",ave);\n    \telse\n    \t\tprintf(\"%lld\\n\",v[i]);\n    return 0;\n}\n```",
        "postTime": 1537262926,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u679a\u4e3e\u8981\u6c42\u6700\u7ec8\u4e00\u6837\u7684\u957f\u5ea6\u4e3a$k$\u7684\u533a\u95f4$[l,r]$\n\n\u5219\u9700\u8981\u9009\u62e9\u4e00\u4e2a$x$\uff0c\u6700\u5c0f\u5316$sigma_{i=l}^{r} |x-a[i]|$\u3002\n\u663e\u7136$x$\u8981\u53d6\u4e2d\u4f4d\u6570\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u8be2$k$\u5927\u3001\u6c42$<x$\u7684\u6570\u7684\u548c\u3001\u6c42$>x$\u7684\u6570\u7684\u548c\u3002\n\n$zkw$\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u65f6\u95f4$O(nlogn)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,l,r) for(int i=l;i<=r;++i)\n#define gc (c=getchar())\nint read()\n{\n    char c;\n    while(gc<'0');\n    int x=c-'0';\n    while(gc>='0')x=x*10+c-'0';\n    return x;\n}\nconst int N=1e5+5,U=1e6+5;\nint n,k,a[N],dy[U],ndy[N];\nint half;\nnamespace ZKW\n{\n#define cl (i*2)\n#define cr (cl+1)\nll s[N*3];\nint sz[N*3],d;\nvoid init(int n)\n{\n    d=1;while(d<n)d<<=1;d-=1;\n}\nvoid add(int x,int w)\n{\n    int i=dy[x]+d;\n    while(i){sz[i]+=w;s[i]+=w*x;i>>=1;}\n}\nint m;\nll get()\n{\n    int i=1;\n    int x=half;\n    while(i<=d)\n    if(x<=sz[cl])i=cl;\n    else {x-=sz[cl];i=cr;}\n    m=ndy[i-d];\n    ll ans=(ll)m*((half-x)-(k-(half-x+sz[i])));\n    while(i>1)\n    {\n        if(i&1)ans-=s[i-1];\n        else ans+=s[i+1];\n        i>>=1;\n    }\n    return ans;\n}\n};\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    n=read();k=read();\n    rep(i,1,n)dy[a[i]=read()]=1;\n    \n    rep(i,1,U-1)dy[i]+=dy[i-1];\n    ZKW::init(dy[U-1]);\n    rep(i,1,n)ndy[dy[a[i]]]=a[i];\n    \n    rep(i,1,k)ZKW::add(a[i],1);\n    half=k+1>>1;\n    ll ans=ZKW::get();int ansm=ZKW::m,ansi=k;\n    rep(i,k+1,n)\n    {\n        ZKW::add(a[i-k],-1);ZKW::add(a[i],1);\n        ll now=ZKW::get();\n        if(now<ans)\n        {\n            ans=now;ansm=ZKW::m;ansi=i;\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    rep(i,ansi-k+1,ansi)a[i]=ansm;\n    rep(i,1,n)printf(\"%d\\n\",a[i]);\n}\n```",
        "postTime": 1515748378,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u8fd9\u9898\u600e\u4e48\u4eba\u5747$fhq$\u554a\uff0c\u8ba9$STL$\u9009\u624b\u60c5\u4f55\u4ee5\u582a\uff1f\n\n\u4e8e\u662f\u5c31\u6765\u4e00\u53d1$priority$_$queue$~~+map~~\u7684\u9898\u89e3\u5427\uff08\u7a81\u7136\u53d1\u73b0map\u597d\u6162\u554a\uff09\u3002\n\n\u601d\u8def\u4e0a\u9762\u51e0\u4f4d\u90fd\u8bf4\u5f97\u6bd4\u8f83\u6e05\u6670\u4e86\uff0c\u5c31\u662f\u52a8\u6001\u7ef4\u62a4\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u6bcf\u6b21\u6c42\u6700\u5c0f\u4ee3\u4ef7\uff0c\u5f53\u65f6\u6211\u8111\u888b\u4e00\u70ed\uff0c\u5c31\u60f3\u5230\u4e86\u5bf9\u9876\u5806\uff0c\u5c31\u662f\u5b9a\u4e491\u4e2a\u5c0f\u6839\u5806\u548c1\u4e2a\u5927\u6839\u5806\uff0c\u6bcf\u6b21\u5224\u65ad\u5f53\u524d\u7684\u6570\u5982\u679c\u5c0f\u4e8e\u5927\u6839\u5806\u9876\uff0c\u5c31\u52a0\u5165\u5927\u6839\u5806\uff0c\u5426\u5219\u52a0\u5165\u5c0f\u6839\u5806\uff0c\u8fd9\u6837\u7684\u8bdd\u5927\u6839\u5806\u91cc\u7684\u6240\u6709\u7684\u6570\u90fd\u6bd4\u5c0f\u6839\u5806\u91cc\u7684\u6570\u5c0f\u4e86\uff0c\u7ef4\u62a42\u4e2a\u5806\u7684\u5927\u5c0f\u76f8\u5dee\u4e0d\u8d85\u8fc71\u540e\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d6\u51fa\u4e2d\u4f4d\u6570\u4e86\u3002\u4e8e\u662f\u7801\u7801\u7801\u4e4b\u540e\u53d1\u73b0\uff1a\n### \u597d\u50cf\u8981\u652f\u6301\u5220\u9664\u554a...\n\u4e0d\u8fc7\u8fd8\u6709\u529e\u6cd5\uff0c\u652f\u6301\u641e\u51fa\u5220\u9664\u7684\u5806\u7684\u5957\u8def\u67092\u79cd\uff08~~pb_ds\u7684\u8d70\u5f00~~\uff09\uff1a\n\n\u4e00\u662f\u628a\u5220\u9664\u7684\u6570\u585e\u5230\u53e6\u4e00\u4e2a\u5806\u91cc\u9762\uff0c\u5982\u679c2\u4e2a\u5806\u9876\u76f8\u540c\uff0c\u5c31\u540c\u65f6\u5220\u9664\uff08\u6ce8\u610f\u5fc5\u987b**\u90fd\u662f**\u5c0f\u6839\u5806\u6216\u5927\u6839\u5806\uff09\n\n\u7b2c\u4e8c\u662f\u628a\u6570\u76f4\u63a5\u653e\u5165$map$\u4e2d\uff0c**\u6bcf\u6b21\u53d6\u51fa\u65f6\u8981\u7279\u5224**\u3002\n\n\u672c\u6765\u672c\u849f\u84bb\u7528\u7684\u662f$map$\uff0c\u7ed3\u679c\u4e0d\u5f00$O_2$\u52c7\u593a\u6700\u4f18\u89e3\u5012\u6570\u7b2c\u4e8c\uff0c\u5b9e\u5728\u662f\u4e0d\u6562\u770b\uff0c\u6240\u4ee5\u6539\u6210\u4e86\u7b2c\u4e00\u79cd\u65b9\u6cd5\u3002\u56e0\u4e3a\u5bf9\u9876\u5806\u662f\u4e00\u4e2a\u5927\u6839\u5806\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u5220\u9664\u7684\u5806\u4e5f\u89812\u4e2a\u3002\n\n\u7136\u540e\u662f\u8ba1\u7b97\u4ee3\u4ef7\u7684\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u56e0\u4e3a\u662f\u8ba1\u7b97\u7edd\u5bf9\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u662f\u4e0d\u80fd\u628a\u533a\u95f4\u7684\u6570\u52a0\u8d77\u6765\u518d\u51cf\u53bb\u4e2d\u4f4d\u6570\u4e58\u533a\u95f4\u6570\u7684\u3002\u4f46\u662f\u4e5f\u597d\u529e\uff0c\u6211\u4eec\u53ea\u8981\u7edf\u8ba1\u5927\u6839\u5806\u4e2d\u7684\u6570\u7684\u548c$sum_1$,\u6570\u7684\u4e2a\u6570$size_1$\u4ee5\u53ca\u5c0f\u6839\u5806\u7684\u6570\u7684\u548c$sum_2$,\u6570\u7684\u4e2a\u6570$size_2$,\u90a3\u4e48\u4ee3\u4ef7\u4e3a\uff1a\n$$Cost=mid*size_1-sum_1+sum_2-mid*size_2$$\n\u539f\u56e0\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u5927\u6839\u5806\u4e2d\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u4e2d\u4f4d\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e00\u8d77\u52a0\u51cf\uff0c\u5c0f\u6839\u5806\u7684\u6570\u90fd\u5927\u4e8e\u7b49\u4e8e\u4e2d\u4f4d\u6570\uff0c\u6240\u4ee5\u540c\u7406\u3002\n\n### \u4ee3\u7801\uff08\u5f00$O_2$\u540e\u8dd1\u5230\u4e86\u6700\u4f18\u89e3$Rank1$)\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n//\u7b54\u6848\u53ef\u80fd\u4f1a\u7206int\ninline void read(int &x){\n    x=0;int fh=1;char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')fh=-1; c=getchar();}\n    while('0'<=c&&c<='9'){\n        x=x*10+c-48;\n        c=getchar();\n    }\n    x*=fh;\n}//\u5feb\u8bfb\ninline int max(int a,int b){return a>b?a:b;}\ninline int min(int a,int b){return a<b?a:b;}\npriority_queue<int>Q1,Q2,D1,D2;\n//\u5206\u522b\u8868\u793a\u5927\u6839\u5806\u3001\u5c0f\u6839\u5806\u3001\u7528\u4e8e\u5220\u9664\u76842\u4e2a\u5806\n//\u56e0\u4e3a\u672c\u849f\u84bb\u8bb0\u4e0d\u4f4fpq\u7684\u683c\u5f0f\uff0c\u5c31\u628aQ2\u91cc\u7684\u6570\u5168\u90e8\u52a0\u8d1f\u53f7\u6765\u5f53\u6210\u5c0f\u6839\u5806\u7528\uff0c\u6240\u4ee5\u4e0b\u6587\u4e5f\u4f1a\u52a0\u8d1f\u53f7\u8fd8\u539f\nint n,k,a[100005],siz1,siz2,sum1,sum2,ans,Begin,ANS;\n//siz1\u548csiz2\u8868\u793a\u5728Q1\u548cQ2\u4e2d\u6709\u591a\u5c11\u6570\u5e94\u88ab\u5220\u9664\u4f46\u8fd8\u5728\u5806\u91cc\nvoid balance(){\n    while(Q1.size()-siz1>Q2.size()-siz2+1){\n        if(!D1.empty()&&D1.top()==Q1.top()){D1.pop();Q1.pop();siz1--;continue;}\n        sum2+=Q1.top();\n        sum1-=Q1.top();\n        Q2.push(-Q1.top());\n        Q1.pop();\n    }\n    while(Q1.size()-siz1<Q2.size()-siz2){\n        if(!D2.empty()&&D2.top()==Q2.top()){D2.pop();Q2.pop();siz2--;continue;}\n        sum1+=-Q2.top();\n        sum2-=-Q2.top();\n        Q1.push(-Q2.top());\n        Q2.pop();\n    }\n\n}\n//\u4fdd\u63012\u4e2a\u5806\u7684\u5e73\u8861\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u94a6\u5b9a\u5927\u6839\u5806\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e\u5c0f\u6839\u5806\u6570\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u53d6\u4e2d\u4f4d\u6570\u5c31\u53ef\u4ee5\u5728\u5927\u6839\u5806\u91cc\u53d6\u4e86\nsigned main(){\n    ans=1e17;\n    read(n);read(k);\n    for(int i=1;i<=n;++i)read(a[i]);\n    for(int i=1;i<=n;++i){\n        if((!Q1.empty()&&a[i]>Q1.top())){Q2.push(-a[i]);sum2+=a[i];}\n        else {Q1.push(a[i]);sum1+=a[i];}\n        balance();\n        if(i>=k){\n            int mid=-1;\n            while(mid==-1){\n                balance();\n                if(Q1.size()-siz1>=Q2.size()-siz2){\n                    if(!D1.empty()&&D1.top()==Q1.top()){D1.pop();Q1.pop();siz1--;}\n                        else mid=Q1.top();\n                }\n            }\n            //\u627e\u4e2d\u4f4d\u6570\n            if(ans>(Q1.size()-siz1)*mid-sum1+sum2-(Q2.size()-siz2 )*mid){\n                ans=(Q1.size()-siz1)*mid-sum1+sum2-(Q2.size()-siz2 )*mid;\n                Begin=i-k+1;\n                ANS=mid;\n            }\n            //\u6c42\u6700\u5c0f\u4ee3\u4ef7\n            if(Q1.top()>=a[i-k+1]){\n                siz1++;\n                D1.push(a[i-k+1]);\n                sum1-=a[i-k+1];\n            }\n            else{\n                siz2++;\n                D2.push(-a[i-k+1]);\n                sum2-=a[i-k+1];\n            }\n            //\u5220\u9664\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    for(int i=1;i<=n;++i)if(i>=Begin&&i<Begin+k)printf(\"%lld\\n\",ANS);\n    else printf(\"%lld\\n\",a[i]);\n    return 0;\n}\n\n\n\n```",
        "postTime": 1562132688,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "## \u89e3\u6cd5\uff1a$FHQ_Treap$\n## \u5f53\u7136\u4e5f\u4e0d\u662f\u88f8\u7684Treap $QwQ$\n## \u5148\u884c\u63d0\u9192\uff1a\u8bb0\u5f97\u5f00longlong $QwQ$\n------------\n## \u6839\u636e\u9898\u610f\uff0c\u5f88\u60f3\u51fa\u6b65\u9aa4\uff1a\n-\t1.\u679a\u4e3e\u4e00\u4e2a**\u957f\u5ea6\u4e3ak**\u7684\u533a\u95f4\uff08\u4ece$[1,k]$\u5230$[n-k+1,n]$)\n\n-\t2.\u8ba1\u7b97\u4e2d\u4f4d\u6570\u3002\n\n-\t3.\u5c06**\u4e2d\u4f4d\u6570\u5de6\u8fb9**\u7684\u6570\u5206\u522b\u52a0\u5230\u4e2d\u4f4d\u6570\uff0c**\u53f3\u8fb9\u7684\u6570**\u5206\u522b\u51cf\u5230\u4e2d\u4f4d\u6570\n\n\t\u5f53\u7136\uff0c\u8fd9\u4e2a**\u4e0d\u9700\u8981\u6a21\u62df**\uff0c\u7eaf\u8ba1\u7b97\u5c31\u597d\uff0c\u8bbe\u5de6\u8fb9\u7684\u5143\u7d20\u6709$l$\u4e2a\uff0c\u53f3\u8fb9\u6709$r$\u4e2a,\u5de6\u8fb9\u7684\u5143\u7d20\u4e3a$Al$\uff0c\u53f3\u8fb9\u7684\u5143\u7d20\u4e3a$Ar$\uff08**\u5de6\u53f3\u90fd\u4e0d\u5305\u62ec\u4e2d\u4f4d\u6570**\uff09,\u4e2d\u4f4d\u6570\u4e3a$m$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u7b54\u6848\u5c31\u662f\uff1a\n    \n    ### $ans=(l*m-\\sum Al)+(\\sum Ar-r*m)$\n    \n    \u8ba1\u7b97\u4e24\u8fb9**\u9700\u8981\u8865\u4e0a**\u548c**\u4e22\u6389**\u7684\u7816\u5757\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u7684 $QwQ$\n\n------------\n## \u89e3\u6cd5\u5f88\u591a\uff1a\u5bf9\u9876\u5806\uff0c\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u2026\u2026\n## \u8fd9\u91cc\u8bb2\u8bb2\u5355\u68f5\u5e73\u8861\u6811\u600e\u4e48\u505a\n-\t\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u52a0\u5165\u4e00\u4e2asum\u6570\u7ec4**\u8bb0\u5f55\u5b50\u6811\u548c**\u5c31\u597d\uff0c**size\u66f4\u65b0\u7684\u65f6\u5019sum\u8ddf\u7740\u66f4\u65b0**\uff0c\u5f88\u7b80\u5355\uff1a\n\n\t### $sum[now]=sum[lson]+sum[rson]+val[now]$;\n\n-\t\u6bcf\u6b21**\u56fa\u5b9a\u5e73\u8861\u6811\u6709k\u4e2a\u5143\u7d20**\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u679a\u4e3e\u7684\u533a\u95f4\uff0c\u79fb\u52a8\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u5728Treap\u4e0a**\u5220\u6389\u6700\u5de6\u7684\u6570**\uff0c\u52a0\u5165**\u6700\u53f3\u8fb9+1**\uff08\u4e5f\u5c31\u662f\u5f85\u52a0\u5165\u533a\u95f4\uff09\u7684\u6570\u3002\n\n-\t\u4e2d\u4f4d\u6570\u7528\u6c42**\u6392\u540d\u7684\u65b9\u6cd5**\u5f88\u597d\u505a\u5230\uff0c\u6ce8\u610f\u5982\u679c**k\u4e3a\u5947\u6570\u5076\u6570**\u8ba1\u7b97\u4e2d\u4f4d\u6570\u7684\u533a\u522b\uff08\u5c0f\u5b66\u77e5\u8bc6\uff0c\u4e0d\u77e5\u9053\u5c31\u81ea\u5df1\u767e\u5ea6\u5427QwQ\uff09\n\n-\t\u77e5\u9053\u4e86\u4e2d\u4f4d\u6570\uff0c\u6211\u4eec\u628a\u5806**\u5206\u6210x,y,z\u4e09\u4e2a\u5806**\uff0c**\u4f7f\uff08x\u5806\u6240\u6709\u5143\u7d20\uff09<mid**\uff0c\uff08**y\u5806\u6240\u6709\u5143\u7d20\uff09==mid**\uff0c**\uff08z\u5806\u6240\u6709\u5143\u7d20\uff09>mid**\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\t### $split(root,mid,x,z),split(x,mid-1,x,y);$\n\n-\t\u56e0\u4e3a\u6211\u4eec\u6709**sum\u548csize\u6570\u7ec4**\uff0c\u5f88\u5bb9\u6613\u80fd\u5f97\u5230**\u5de6\u53f3\u7684\u5143\u7d20\u4e2a\u6570**\u5206\u522b\u662f$size[x],size[z]$\uff0c**\u5de6\u53f3\u5143\u7d20**\u548c\u5206\u522b\u662f$sum[x],sum[z]$\u3002\u67e5\u8be2\u5b8c\u8bb0\u5f97\u5408\u5e76\u5806\u3002\u518d\u6309\u7167\u4e0a\u9762\u7b97ans\u7684\u5f0f\u5b50\u7b97\u4e00\u4e0b\uff0c\u548c\u6700\u7ec8\u7b54\u6848\u53d6min\u5c31\u597d\u3002\n\n-\t\u8ba1\u7b97\u5b8c\u5982\u679c\u6bd4\u6700\u7ec8\u7b54\u6848\u5c0f\u7684\u8bdd**\u8bb0\u5f97\u8bb0\u5f55\u533a\u95f4$[l,r]$\u548c\u4e2d\u4f4d\u6570$m$**\uff0c\u6700\u540e\u8f93\u51fa\u6700\u540e\u72b6\u6001\u7684\u65f6\u5019**\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u8f93\u51fa**\uff0c\u5230$[l,r]$\u7684\u65f6\u5019\u8bb0\u5f97**\u5168\u90e8\u6362\u6210$m$**\u5373\u53ef\u3002\n\n------------\n## CODE\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nconst long long maxn=2e5+5,INF=0x7fffffffffffff;\nlong long a[maxn];\nlong long n,k;\nlong long l,r;\nlong long ans_mid,ans_l,ans_r,ans=INF;\n\nstruct Fhq_Treap\n{\n\tlong long l[maxn],r[maxn],sz[maxn],val[maxn],heap[maxn],sum[maxn];\n\tlong long num,root,x,y,z;\n\t\n\tinline void update(long long pst) \n\t{\n\t\tsz[pst]=sz[l[pst]]+sz[r[pst]]+1;\n\t\tsum[pst]=sum[l[pst]]+sum[r[pst]]+val[pst];\n\t\treturn;\n\t}\n\t\n\tinline long long new_node(long long key) \n\t{\n\t\tsz[++num]=1,sum[num]=val[num]=key,heap[num]=rand();\n\t\treturn num;\n\t}\n\t\n\tinline void split(long long pst,long long key,long long &x,long long &y)\n\t{\n\t\tif(!pst)\n\t\t{\n\t\t\tx=y=0;\n\t\t\treturn;\n\t\t}\n\t\tif(val[pst]<=key)\n\t\t\tx=pst,split(r[pst],key,r[pst],y);\n\t\telse \n\t\t\ty=pst,split(l[pst],key,x,l[pst]);\n\t\tupdate(pst);\n\t\treturn;\n\t}\n\t\n\tinline long long merge(long long x,long long y)\n\t{\n\t\tif(!x||!y)\n\t\t\treturn x+y;\n\t\tif(heap[x]<heap[y])\n\t\t{\n\t\t\tr[x]=merge(r[x],y),update(x);\n\t\t\treturn x;\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tl[y]=merge(x,l[y]),update(y);\n\t\t\treturn y;\n\t\t}\t\n\t}\n\t\n\tinline long long kth(long long pst,long long rak)\n\t{\n\t\tif(rak<=sz[l[pst]])\n\t\t\treturn kth(l[pst],rak);\n\t\tif(rak==sz[l[pst]]+1)\n\t\t\treturn val[pst];\n\t\treturn kth(r[pst],rak-sz[l[pst]]-1);\n\t}\n\t\n\tinline void add(long long key)\n\t{\n\t\tsplit(root,key,x,y);\n\t\troot=merge(x,merge(new_node(key),y));\n\t\treturn;\n\t}\n\t\n\tinline void del(long long key)\n\t{\n\t\tsplit(root,key,x,z),split(x,key-1,x,y);\n\t\ty=merge(l[y],r[y]);\n\t\troot=merge(x,merge(y,z));\n\t\treturn;\n\t}\n\t\n\tinline long long query(long long key)\n\t{\n\t\tsplit(root,key,x,z),split(x,key-1,x,y);\n\t\tlong long sz1=sz[x],sz2=sz[z];\n\t\tlong long ans1=sum[x],ans2=sum[z];\n\t\troot=merge(x,merge(y,z));\n\t\tlong long l=sz1*key-ans1,r=ans2-sz2*key;\n\t\treturn l+r;\n\t}\n\t\n}FT;\n\nsigned main(void)\n{\n\tscanf(\"%lld %lld\",&n,&k);\n\tfor(long long i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&a[i]);\n\t\t\n\tfor(long long i=0;i<k;i++)\n\t\tFT.add(a[i]);\n\t\n\tl=0,r=k-1;\n\tfor(long long i=k,mid;i<=n;i++)\n\t{\n\t\tl++,r++;\n\t\tFT.del(a[l-1]),FT.add(a[r]);\n\t\tif(k&1)\n\t\t\tmid=FT.kth(FT.root,(k>>1)+1);\n\t\telse\n\t\t\tmid=(FT.kth(FT.root,k>>1)+FT.kth(FT.root,(k>>1)+1))>>1;\n\t\tlong long temp=FT.query(mid);\n\t\tif(temp<ans)\n\t\t\tans=temp,ans_mid=mid,ans_l=l,ans_r=r;\n\t}\n\t\n\tprintf(\"%lld\\n\",ans);\n\tfor(long long i=1;i<ans_l;i++)\n\t\tprintf(\"%lld\\n\",a[i]);\n\tfor(long long i=ans_l;i<=ans_r;i++)\n\t\tprintf(\"%lld\\n\",ans_mid);\n\tfor(long long i=ans_r+1;i<=n;i++)\n\t\tprintf(\"%lld\\n\",a[i]);\n\t\t\n\treturn 0;\n}\n```\n------------\n### \u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u7684\u6a21\u677f\u5e93\uff0c\u6709\u5404\u79cd~~\u6807\u51c6~~\u6a21\u677f\uff0c\u60f3\u5b66\u4ec0\u4e48\u90fd\u53ef\u4ee5\u6765\u770b\u770b\u5440qwq\n### [\u4e13\u4f9b\u795e\u7287\u70b9\u51fb\u7684\u94fe\u63a5](https://yu123123.blog.luogu.org/mu-qian-di-mu-ban-ku)\n",
        "postTime": 1535624847,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u697c\u4e0b\u5b54\u7237\u7684\u9898\u89e3\u592a\u5f3a\u5566\u3002\u3002\u5c45\u7136\u53ea\u7528\u7ebf\u6bb5\u6811\u5c31\u79d2\u4e86\u6b64\u9898%%%\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u540c\u7684\u601d\u8def\u3002\u3002\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u7684\u4e2d\u4f4d\u6570\u3002\u3002\u7528\u5e73\u8861\u6811\u7684\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u3002\u3002\u76f4\u63a5\u66b4\u529b\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5\u8be2\u4e2d\u4f4d\u6570\u5c31\u597d\u4e86\u3002\u3002\n\n\u8bb0\u5f97\u8981\u5f00longlong\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<map>\n#define N 100050\n#define mod 100003\n#define ept 1e-10\n#define LL long long\n#define inf 2000000000\nusing namespace std;\ninline int Read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,K,hash=1,siz=0,rt;\nint pjs,L,R;\nLL ans,Lsum,Rsum;\nint a[N];\nstruct date{\n    int l,r,v,w,siz,rnd;\n    LL sum;\n}tr[N];\nint Hash(){\n    hash=hash*1009%mod;return hash;\n}\nvoid lturn(int &k){\n    int t=tr[k].r;tr[k].r=tr[t].l;tr[t].l=k;tr[t].siz=tr[k].siz;\n    tr[k].siz=tr[tr[k].l].siz+tr[tr[k].r].siz+tr[k].w;\n    tr[t].sum=tr[k].sum;tr[k].sum=tr[tr[k].l].sum+tr[tr[k].r].sum+(LL)tr[k].w*tr[k].v;\n    k=t;\n}\nvoid rturn(int &k){\n    int t=tr[k].l;tr[k].l=tr[t].r;tr[t].r=k;tr[t].siz=tr[k].siz;\n    tr[k].siz=tr[tr[k].l].siz+tr[tr[k].r].siz+tr[k].w;\n    tr[t].sum=tr[k].sum;tr[k].sum=tr[tr[k].l].sum+tr[tr[k].r].sum+(LL)tr[k].w*tr[k].v;\n    k=t;\n}\nvoid insert(int &k,int x){\n    if(!k){k=++siz;tr[k].siz=tr[k].w=1;tr[k].sum=tr[k].v=x;tr[k].rnd=Hash();return;}\n    tr[k].siz++;tr[k].sum+=(LL)x;\n    if(tr[k].v==x) tr[k].w++;\n    else if(tr[k].v<x){\n        insert(tr[k].r,x);\n        if(tr[tr[k].r].rnd<tr[k].rnd) lturn(k);\n    }\n    else{\n        insert(tr[k].l,x);\n        if(tr[tr[k].l].rnd<tr[k].rnd) rturn(k);\n    }\n}\nvoid del(int &k,int x){\n    if(!k)return;\n    if(tr[k].v==x){\n        if(tr[k].w>1) {tr[k].w--;tr[k].sum-=(LL)x;tr[k].siz--;return;}\n        if(tr[k].l*tr[k].r==0) k=tr[k].l+tr[k].r;\n        else if(tr[tr[k].l].rnd<tr[tr[k].r].rnd){rturn(k);del(k,x);}\n        else {lturn(k);del(k,x);}\n    }\n    else if(x>tr[k].v){tr[k].sum-=(LL)x;tr[k].siz--;del(tr[k].r,x);}\n    else {tr[k].sum-=(LL)x;tr[k].siz--;del(tr[k].l,x);}\n}\nint query_num(int k,int x){\n    if(!k)return 0;\n    if(x<=tr[tr[k].l].siz) {\n        Rsum+=(LL)tr[k].v*(LL)tr[k].w+tr[tr[k].r].sum;\n        return query_num(tr[k].l,x);\n    }\n    else if(x>tr[tr[k].l].siz+tr[k].w){\n        Lsum+=(LL)tr[k].v*(LL)tr[k].w+tr[tr[k].l].sum;\n        return query_num(tr[k].r,x-tr[tr[k].l].siz-tr[k].w);\n    }\n    else {\n        Lsum+=tr[tr[k].l].sum+(LL)(x-tr[tr[k].l].siz-1)*(LL)tr[k].v;\n        Rsum+=tr[tr[k].r].sum+(LL)(tr[tr[k].l].siz+tr[k].w-x)*(LL)tr[k].v;\n        return tr[k].v;\n    }\n}\nint main(){\n    n=Read();K=Read();\n    for(int i=1;i<=n;i++)a[i]=Read();\n    for(int i=1;i<=K;i++) insert(rt,a[i]);\n    int kk=K+1>>1;\n    Lsum=Rsum=0;\n    pjs=query_num(rt,kk);L=1;R=K;\n    ans=(LL)((LL)(kk-1)*(LL)pjs-Lsum+Rsum-(LL)(K-kk)*(LL)pjs);\n    for(int i=K+1;i<=n;i++){\n        insert(rt,a[i]);del(rt,a[i-K]);\n        Lsum=Rsum=0;\n        int j=query_num(rt,kk);LL S=(LL)((LL)(kk-1)*(LL)j-Lsum+Rsum-(LL)(K-kk)*(LL)j);\n        if(S<ans){ans=S;pjs=j;L=i-K+1;R=i;}\n    }\n    printf(\"%lld\\n\",ans);\n    for(int i=1;i<=n;i++){\n        if(i>=L&&i<=R) printf(\"%d\\n\",pjs);\n        else printf(\"%d\\n\",a[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1515910683,
        "uid": 46755,
        "name": "Iscream2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1$splay$\u7684\u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u8981\u679a\u4e3e\u533a\u95f4$[l,r]$\uff0c\u53d6\u8ba9\u8fd9\u4e2a\u533a\u95f4\u53d8\u6210\u4e00\u6837\u7684\u7684\u6b65\u6570\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u53d8\u6210\u4e00\u6837\u7684\u53d8\u6210\u591a\u5c11\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u611f\u6027\u8bc1\u660e\u2014\u2014\u4ed6\u662f\u4e2d\u4f4d\u6570\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u53ef\u4ee5\u8bbf\u95ee\u9759\u6001\u533a\u95f4\u7b2cK\u5927\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4e3b\u5e2d\u6811\u3002\n\n\u4f46\u662f\u65e2\u7136\u6211\u662f\u641c\u7740$splay$\u7684\u6807\u7b7e\u8fdb\u6765\u7684\uff0c\u90a3\u5c31\u6253\u4e2a$splay$\u5427\n\n\u6bcf\u6b21\u90fd\u8ba9$splay$\u4e2d\u7684\u6570\u91cf\u4e3ak\uff0c\u5411\u53f3\u79fb\u7684\u65f6\u5019\u63d2\u5165\u5220\u9664\u5c31\u53ef\u4ee5\u4e86\n\n\u6ce8\u610f\u8bbf\u95ee\u5de6\u53f3\u5b50\u6811\u7684\u5927\u5c0f\u7684\u65f6\u5019\u8981\u6ce8\u610f\u987a\u5e8f\uff0c\u5148\u52a0\u518d\u6539\u53d8u\u7684\u503c\n\n```cpp\n# define int long long\n\nint n,k,p,ans,ls,rs;\nint a[N];\nint fa[N],son[N][2],siz[N],key[N],recy[N],sum[N];\nint rt,sz;\n\nvoid clear(int x){\n\tfa[x]=son[x][0]=son[x][1]=siz[x]=key[x]=recy[x]=sum[x]=0;\t\n}\n\nbool locate(int x){\n\treturn son[fa[x]][1]==x;\t\n}\n\nvoid update(int x){\n\tif(x){\n\t\tsiz[x]=recy[x];\n\t\tsum[x]=key[x]*recy[x];\n\t\tif(son[x][0])siz[x]+=siz[son[x][0]],sum[x]+=sum[son[x][0]];\n\t\tif(son[x][1])siz[x]+=siz[son[x][1]],sum[x]+=sum[son[x][1]];\n\t}\n}\n\nvoid rotate(int x){\n\tint faz=fa[x],grand=fa[faz],side=locate(x);\n\tson[faz][side]=son[x][side^1],fa[son[faz][side]]=faz;\n\tson[x][side^1]=faz,fa[faz]=x;\n\tfa[x]=grand;\n\tif(grand)son[grand][son[grand][1]==faz]=x;\n\tupdate(faz),update(x);\t\n}\n\nvoid splay(int x){\n\tfor(int faz;faz=fa[x];rotate(x))\n\t\tif(fa[faz])\n\t\t\trotate(locate(x)==locate(faz)?faz:x);\n\trt=x;\t\n}\n\nvoid find(int x){\n\tint u=rt;\n\tif(!u)return;\n\twhile(son[u][x>key[u]]&&key[u]!=x)u=son[u][x>key[u]];\n\tsplay(u);\n}\n\nint pre(){\n\tint x=son[rt][0];\n\twhile(son[x][1])x=son[x][1];\n\treturn x;\t\t\n}\n\nvoid insert(int x){\n\tif(!rt){\n\t\tsz++;\n\t\tfa[sz]=son[sz][0]=son[sz][1]=0;\n\t\tsiz[sz]=recy[sz]=1;\n\t\tkey[sz]=sum[sz]=x;\n\t\trt=sz;\n\t\treturn;\n\t}\n\tint u=rt,faz=0;\n\twhile(1){\n\t\tif(x==key[u]){\n\t\t\trecy[u]++;\n\t\t\tsum[u]+=key[u];\n\t\t\tupdate(u),update(faz);\n\t\t\tsplay(u);\n\t\t\treturn;\t\n\t\t}\n\t\tfaz=u,u=son[u][x>key[u]];\n\t\tif(!u){\n\t\t\tsz++;\n\t\t\tson[sz][0]=son[sz][1]=0;\n\t\t\tsiz[sz]=recy[sz]=1;\n\t\t\tkey[sz]=sum[sz]=x;\n\t\t\tfa[sz]=faz;\n\t\t\tson[faz][x>key[faz]]=sz;\n\t\t\tupdate(faz);\n\t\t\tsplay(sz);\n\t\t\treturn;\t\n\t\t}\n\t}\n}\n\nvoid erase(int x){\n\tfind(x);\n\tif(recy[rt]>1){\n\t\trecy[rt]--;\n\t\tsum[rt]-=key[rt];\n\t\tupdate(rt);\n\t\treturn;\n\t}\n\tif(!son[rt][0]&&!son[rt][1]){\n\t\tclear(rt);\n\t\trt=0;\n\t\treturn;\t\n\t}\n\tif(!son[rt][0]){\n\t\tint old=rt;\n\t\trt=son[rt][1];\n\t\tfa[rt]=0;\n\t\tclear(old);\n\t\treturn;\t\n\t}\n\tif(!son[rt][1]){\n\t\tint old=rt;\n\t\trt=son[rt][0];\n\t\tfa[rt]=0;\n\t\tclear(old);\n\t\treturn;\t\n\t}\n\tint old=rt,lft=pre();\n\tsplay(lft);\n\tson[rt][1]=son[old][1];\n\tfa[son[old][1]]=rt;\n\tclear(old);\n\tupdate(rt);\n}\n\nint kth(int x){\n\tint u=rt;\n\twhile(1){\n\t\tif(son[u][0]&&x<=siz[son[u][0]]){\n\t\t\trs+=recy[u]*key[u]+sum[son[u][1]];\n\t\t\tu=son[u][0];\n\t\t}\n\t\telse if(x>siz[son[u][0]]+recy[u]){\n\t\t\tls+=recy[u]*key[u]+sum[son[u][0]];\n\t\t\tx-=siz[son[u][0]]+recy[u];\n\t\t\tu=son[u][1];//\u8fd9\u91cc\uff0c\u6211\u5f00\u59cb\u7684\u65f6\u5019\u628au=son[u][1]\u5199\u5230\u4e0a\u9762\u53bb\u4e86\u5bfc\u81f4\u51fa\u9519\n\t\t}\n\t\telse{\n\t\t\tls+=sum[son[u][0]]+key[u]*(x-siz[son[u][0]]-1);\n\t\t\trs+=sum[son[u][1]]+key[u]*(siz[son[u][0]]+recy[u]-x);\n\t\t\treturn key[u];\t\n\t\t}\n\t}\n}\n\nsigned main()\n{\n\tread(n),read(k);\n\tRep(i,1,n)read(a[i]);\n\tp=k+1>>1;\n\tRep(i,1,k)insert(a[i]);\n\tint l=1,r=k;\n\tls=0,rs=0;\n\tint mid=kth(p);\n\tans=(p-1)*mid-ls+rs-(k-p)*mid;\n//\tprintf(\"%d %d %d %d\\n\",ls,rs,mid,ans);\n\tRep(i,k+1,n){\n//\t\tRep(i,1,n)printf(\"%d \",sum[i]);\n//\t\tputs(\"\");\n\t\tinsert(a[i]),erase(a[i-k]);\n\t\tls=0,rs=0;\n\t\tint newmid=kth(p);\n\t\tint newans=(p-1)*newmid-ls+rs-(k-p)*newmid;\n\n//\t\tprintf(\"%d %d %d %d\\n\",ls,rs,newmid,newans);\n\t\tif(newans<ans){\n\t\t\tans=newans;\n\t\t\tmid=newmid;\n\t\t\tl=i-k+1,r=i;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n\tRep(i,1,n)\n\t\tif(i>=l&&i<=r)printf(\"%d\\n\",mid);\n\t\telse printf(\"%d\\n\",a[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1580117883,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u601d\u8def\u5b54\u7237\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\n\u6211\u6765\u8865\u4e00\u53d1fhq treap\u7684\u4ee3\u7801\u3002\n\n```\n//by zykykyk\n#include<cstdio>\n#include<ctime>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<string>\n#include<set>\n#include<vector>\n#include<queue>\n#include<map>\n#define rg register\n#define il inline\n#define vd void\n#define ll long long\n#define N 100010\n#define For(i,x,y) for (int i=(x);i<=(y);i++)\n#define Dow(i,x,y) for (int i=(x);i>=(y);i--)\n#define cross(i,k) for (int i=first[k];i;i=last[i])\nusing namespace std;\nil int read(){\n    int x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nil vd print(ll x){\n    if (x<0) putchar('-'),x=-x;\n    if (x>=10) print(x/10),putchar(x%10+'0');\n        else putchar(x+'0');\n}\nint n,m,x,y,z,mid,ans_l,ans_r,ans_mid,a[N];\nll ans;\n\nint root,tot,pri[N],size[N],son[N][2];\nll sum[N],val[N];\nil int make_node(int v){\n\tsize[++tot]=1;\n\tpri[tot]=rand();\n\tsum[tot]=val[tot]=v;\n\treturn tot;\n}\nil vd pushup(int u){\n\tsize[u]=size[son[u][0]]+size[son[u][1]]+1;\n\tsum[u]=sum[son[u][0]]+sum[son[u][1]]+val[u];\n}\nil vd Split(int u,int v,int &x,int &y){\n\tif (!u) x=y=0;\n\telse {\n\t\tif (val[u]<=v) x=u,Split(son[u][1],v,son[u][1],y);\n\t\telse y=u,Split(son[u][0],v,x,son[u][0]);\n\t\tpushup(u);\n\t}\n}\nil int Merge(int x,int y){\n\tif (!x||!y) return x+y;\n\tif (pri[x]<pri[y]){\n\t\tson[x][1]=Merge(son[x][1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse {\n\t\tson[y][0]=Merge(x,son[y][0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\nil int Kth(int u,int k){\n\twhile (2333){\n\t\tif (size[son[u][0]]+1<k) k-=size[son[u][0]]+1,u=son[u][1];\n\t\telse if (size[son[u][0]]>=k) u=son[u][0];\n\t\telse return u;\n\t}\n}\nil vd insert(int v){\n\tSplit(root,v,x,y);\n\troot=Merge(Merge(x,make_node(v)),y);\n}\nil vd Delete(int v){\n\tSplit(root,v,x,z),Split(x,v-1,x,y);\n\ty=Merge(son[y][0],son[y][1]);\n\troot=Merge(Merge(x,y),z);\n}\nint main(){\n\tsrand(time(0));\n\tn=read(),m=read();\n\tFor(i,1,n) a[i]=read();\n\tans=2333333333333333;\n\tFor(i,1,n){\n\t\tinsert(a[i]);\n\t\tif (i<m) continue;\n\t\tif (i!=m) Delete(a[i-m]);\n\t\tmid=val[Kth(root,(m>>1)+1)];\n\t\tSplit(root,mid,x,z),Split(x,mid-1,x,y);\n\t\tll Sum=1ll*mid*size[x]-sum[x]+sum[z]-1ll*mid*size[z];\n\t\tif (Sum<ans){\n\t\t\tans=Sum;\n\t\t\tans_l=i-m+1,ans_r=i,ans_mid=mid;\n\t\t}\n\t\troot=Merge(Merge(x,y),z);\n\t}\n\tprint(ans),putchar('\\n');\n\tFor(i,1,n)\n\t\tif (i>=ans_l&&i<=ans_r) print(ans_mid),putchar('\\n');\n\t\telse print(a[i]),putchar('\\n');\n}\n```",
        "postTime": 1519048702,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u672c\u9898\u89e3\u4ec5\u4f9b\u53c2\u8003\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\r\n\r\n\u7531\u9898\u610f\u53ef\u77e5\uff0c\u8fd9\u4e2a\u9898\u7684\u9898\u610f\u5c31\u662f\u628a\u67d0\u6bb5\u957f\u5ea6\u4e3ak\u7684\u6570\u6bb5\u6539\u4e3abb\uff0c\u4f7f\u5f97\u8be5\u6bb5\u4e2dabs\uff08ai-bb\uff09\u7684\u548c\u6700\u5927\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u6ee1\u8db3\u8be5\u6027\u8d28\u7684\u6570\u662f\u8be5\u6bb5\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\uff0c\u7531\u4e8e\u9700\u8981\u7ef4\u62a4\u67d0\u6bb5\u8fde\u7eed\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u800c\u4f5c\u4e3a\u849f\u84bb\u53c8\u4e0d\u4f1a\u5199\u4e3b\u5e2d\u6811\u8fd9\u6837\u7684\u9ad8\u5927\u4e0a\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u5199\u4e86\u4e00\u68f5SBT\uff0c\u4e00\u8fb9\u5220\u9664\uff0c\u4e00\u8fb9\u63d2\u5165\uff0c\u4f7f\u5f97\u533a\u95f4\u603b\u4fdd\u6301\u5728k\u4e2a\u6570\u3002\r\n\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\n#include<stdio.h>\r\n#include<math.h>\r\n#include<iostream>\r\nusing namespace std;\r\n#include<stdlib.h>\r\n#include<algorithm>\r\n#define min(a,b)(a<b?a:b)\r\n#include<assert.h>\r\n#define int long long\r\nint li[1000010],s[1000000],b[1000000],ans=1e17+1;\r\ntypedef struct Node{\r\n    Node *l,*r;\r\n    int val,size,cnt,sum;\r\n}SBT,*LE;\r\nLE Null,root;\r\nvoid L_Rotate(LE&k){\r\n    LE tmp=k->r;\r\n    k->r=tmp->l;\r\n    tmp->l=k;\r\n    tmp->size=k->size;\r\n    tmp->sum=k->sum;\r\n    k->size=k->l->size+k->r->size+k->cnt;\r\n    k->sum=k->l->sum+k->r->sum+k->val*k->cnt;\r\n    k=tmp;\r\n}\r\nvoid R_Rotate(LE&k){\r\n    LE tmp=k->l;\r\n    k->l=tmp->r;\r\n    tmp->r=k;\r\n    tmp->size=k->size;\r\n    tmp->sum=k->sum;\r\n    k->size=k->l->size+k->r->size+k->cnt;\r\n    k->sum=k->l->sum+k->r->sum+k->cnt*k->val;\r\n    k=tmp;\r\n}\r\nvoid Insert(LE&k,int val){\r\n    if(k==Null){\r\n        k=new Node;\r\n        k->size=k->cnt=1;\r\n        k->val=k->sum=val;\r\n        k->l=k->r=Null;\r\n        return;\r\n    }\r\n    k->size++;\r\n    k->sum+=val;\r\n    if(val<k->val){\r\n        Insert(k->l,val);\r\n        if(k->l->l->size>k->r->size)\r\n            R_Rotate(k);\r\n    }\r\n    else\r\n    if(val>k->val){\r\n        Insert(k->r,val);\r\n        if(k->r->r->size>k->l->size)\r\n            L_Rotate(k);\r\n    }\r\n    else\r\n    if(val==k->val){\r\n        k->cnt++;\r\n        return;\r\n    }\r\n}\r\nvoid Delete(LE&k,int val,int cnt){\r\n    k->sum-=val;\r\n    if(k==Null)return;\r\n    k->size-=cnt;\r\n    if(k->val<val){\r\n        Delete(k->r,val,cnt);\r\n        return;\r\n    }\r\n    else\r\n    if(k->val>val){\r\n        Delete(k->l,val,cnt);\r\n        return;\r\n    }\r\n    else\r\n    if(k->val==val){\r\n        k->cnt-=cnt;\r\n        if(k->cnt)return;\r\n        if(!k->cnt){\r\n            if(k->l==Null){\r\n                k=k->r;\r\n            }\r\n            else if(k->r==Null){\r\n                k=k->l;\r\n            }\r\n            else{\r\n            //    assert(Null != k);\r\n                LE tmp=k->l;\r\n                while(tmp->r!=Null)\r\n                    tmp=tmp->r;\r\n            k->val=tmp->val;\r\n            k->cnt=tmp->cnt;\r\n            Delete(k->l,k->val,k->cnt);\r\n            }\r\n        }\r\n    }\r\n}\r\nint Query(LE k,int rank){\r\n    //assert(k->l);\r\n    if(k==Null)return 1;\r\n    if(rank<=k->l->size)\r\n        return Query(k->l,rank);\r\n    if(rank<=k->l->size+k->cnt)\r\n        return k->val;\r\n    rank-=k->l->size+k->cnt;\r\n    return Query(k->r,rank);\r\n}\r\nint Query_sum_1(LE k,int val){//da\r\n//assert(k->l);\r\n    if(val<k->val){\r\n        return Query_sum_1(k->l,val)+k->val*k->cnt+k->r->sum;\r\n    }\r\n    if(val>k->val){\r\n        return Query_sum_1(k->r,val);\r\n    }\r\n    if(val==k->val){\r\n        return k->r->sum;\r\n    }\r\n}\r\nint Query_sum_2(LE k,int val){//xiao\r\n//assert(k->l);\r\n    if(val<k->val){\r\n        return Query_sum_2(k->l,val);\r\n    }\r\n    if(val>k->val){\r\n        return Query_sum_2(k->r,val)+k->cnt*k->val+k->l->sum;\r\n    }\r\n    if(val==k->val){\r\n        return k->l->sum;\r\n    }\r\n}\r\nsigned main()\r\n{\r\n    int n,k;\r\n    Null=new Node;\r\n    Null->size=Null->cnt=0;\r\n    Null->sum=0;\r\n    Null->val=-1;\r\n    root=Null;\r\n    //cin>>n>>k;\r\n    scanf(\"%lld%lld\",&n,&k);\r\n    for(int i=1;i<=n;i++){\r\n        //cin>>li[i];\r\n        scanf(\"%lld\",&li[i]);\r\n    }\r\n    for(int i=1;i<=k;i++){\r\n        Insert(root,li[i]);\r\n    }\r\n    int head=k,tail=0;\r\n    int bb=k/2+1;\r\n    while(head<=n){\r\n        int cc=Query(root,bb);\r\n        int aa=Query_sum_1(root,cc);\r\n        int dd=Query_sum_2(root,cc);\r\n        int mm=aa-(k-bb)*cc+(bb-1)*cc-dd;\r\n        ans=min(ans,mm);\r\n        Delete(root,li[++tail],1);\r\n        Insert(root,li[++head]);\r\n    }\r\n    printf(\"%lld\",ans);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1504337247,
        "uid": 25606,
        "name": "G_hz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u652f\u6301\u5355\u70b9\u51cf\u4e00\uff0c\u5355\u70b9\u52a0\u6cd5\u7684\u64cd\u4f5c\uff0c\u95ee\u628a\u4e00\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684\u533a\u95f4\u91cc\u7684\u503c\u53d8\u6210\u540c\u6837\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002\n\n## \u9898\u89e3\n\n\u633a\u597d\u7684\u4e00\u9053\u5e73\u8861\u6811\u7ec3\u624b+\u731c\u7ed3\u8bba\u9898\u3002\uff08\u96fe\n\n\u5316\u7b80\u4e00\u4e0b\u9898\u610f\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u503c $m$ \u4e14 $m$ \u4f7f\u5f97 $\\sum_{i=1}^{r}\\mid a_{i}-x\\mid$ \u6700\u5c0f\u3002\n\n\u5176\u4e2d $r-l+1=k$\u3002\n\n\u5927\u7ea6\u53ef\u4ee5\u731c\u5230\u8fd9\u91cc\u9700\u8981\u53d6\u4e2d\u4f4d\u6570\u3002\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u628a $a_{l},a_{l+1},\\cdots,a_{r}$ \u6392\u5e8f\u540e\u5982\u679c\u6bcf\u4e2a\u6570\u8981\u53d6\u6700\u5c0f\u53ea\u80fd\u53d6\u4e2d\u4f4d\u6570\u3002\n\n\u53ef\u4ee5\u5f53\u6210\u4e00\u4e2a\u7ed3\u8bba\u5f0f\u7684\u4e1c\u897f\u79ef\u7d2f\u8d77\u6765\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5 $k_{th}$\u3002\n\n\u8fd9\u91cc\u6211\u9009\u62e9\u7684\u662fZip-Tree\uff0c\u4e5f\u5c31\u662f\u56fd\u5185\u5e38\u8bf4\u7684FHQ-Treap\u3002\n\n\u5177\u4f53\u7684\u505a\u6cd5\u662f\uff0c\u679a\u4e3e\u6bcf\u4e2a\u957f\u5ea6\u4e3a $k$ \u7684\u533a\u95f4 $[l,r]$\uff0c\u9996\u5148\u6211\u4eec\u628a $a_{1},a_{2},\\cdots,a_{k}$ \u63d2\u5165\u5e73\u8861\u6811\uff0c\u7136\u540e\u6839\u636e $k$ \u7684\u5947\u5076\u6027\u7528 $k_{th}$ \u64cd\u4f5c\u627e\u5230\u4e2d\u4f4d\u6570\uff08\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u6839\u636e\u5e8f\u5217\u7684\u957f\u5ea6\u5947\u5076\u6027\u4e0d\u540c\u6709\u533a\u522b\uff09\u3002\n\n\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u5373\u53ef\uff0c\u987a\u624b\u8bb0\u5f55\u4e00\u4e0b\u533a\u95f4\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u8f93\u51fa\u7b54\u6848\u3002\n\n\u8d21\u732e\u7684\u8ba1\u7b97\u53ef\u4ee5\u5206\u6210\u5927\u4e8e\u4e2d\u4f4d\u6570\uff0c\u5c0f\u4e8e\u4e2d\u4f4d\u6570\uff0c\u7b49\u4e8e\u4e2d\u4f4d\u6570\u7684\u60c5\u51b5\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <climits>\n#define int long long\n\nconst int Maxn = 1e5 + 5;\nint n, k, rt, tot, isa[Maxn];\nstruct Treap\n{\n\tint l, r, siz, sum, key, val;\n} t[Maxn];\n\nint newnode(int val)\n{\n\tt[++tot].val = val;\n\tt[tot].sum = val;\n\tt[tot].key = rand();\n\tt[tot].siz = 1;\n\treturn tot;\n}\n\nvoid maintain(int x)\n{\n\tt[x].siz = t[t[x].l].siz + t[t[x].r].siz + 1;\n\tt[x].sum = t[t[x].l].sum + t[t[x].r].sum + t[x].val;\n}\n\nvoid Split(int now, int val, int &x, int &y)\n{\n\tif (now == 0)\tx = y = 0;\n\telse\n\t{\n\t\tif (val >= t[now].val)\n\t\t{\n\t\t\tx = now;\n\t\t\tSplit(t[now].r, val, t[now].r, y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t y = now;\n\t\t\t Split(t[now].l, val, x, t[now].l);\n\t\t}\n\t\tmaintain(now);\n\t}\n}\n\nint Merge(int x, int y)\n{\n\tif (x == 0 || y == 0)\treturn x + y;\n\telse\n\t{\n\t\tif (t[x].key > t[y].key)\n\t\t{\n\t\t\tt[x].r = Merge(t[x].r, y);\n\t\t\tmaintain(x);\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt[y].l = Merge(x, t[y].l);\n\t\t\tmaintain(y);\n\t\t\treturn y;\n\t\t}\n\t}\n}\n\nint rt1, rt2, rt3;\nvoid Insert(int val)\n{\n\tSplit(rt, val, rt1, rt2);\n\trt = Merge(rt1, Merge(newnode(val), rt2));\n}\n\nvoid Remove(int val)\n{\n\tSplit(rt, val, rt1, rt3);\n\tSplit(rt1, val - 1, rt1, rt2);\n\trt2 = Merge(t[rt2].l, t[rt2].r);\n\trt = Merge(rt1, Merge(rt2, rt3));\n}\n\nint Find_Kth(int rnk)\n{\n\tint now = rt;\n\twhile (now)\n\t{\n\t\tif (t[t[now].l].siz + 1 == rnk) \tbreak;\n\t\telse if (t[t[now].l].siz >= rnk) \tnow = t[now].l;\n\t\telse\n\t\t{\n\t\t\trnk -= t[t[now].l].siz + 1;\n\t\t\tnow = t[now].r;\n\t\t}\n\t}\n\treturn t[now].val;\n}\n\nint Query(int mid)\n{\n\tSplit(rt, mid, rt1, rt3);\n\tSplit(rt1, mid - 1, rt1, rt2);\n\tint lth = rt1, mth = rt3;\n\tint cont_l = t[lth].siz * mid - t[lth].sum;\n\tint cont_r = t[mth].sum - t[mth].siz * mid;\n\trt = Merge(rt1, Merge(rt2, rt3));\n\treturn cont_l + cont_r;\n}\n\nsigned main()\n{\n\tsrand((unsigned)(time(NULL)));\n\tint MID, LEFT, RIGHT, ANS = LONG_LONG_MAX;\n\tscanf(\"%lld %lld\", &n, &k);\n\tfor (int i = 1; i <= n; ++i)\tscanf(\"%lld\", &isa[i]);\n\tfor (int i = 1; i <= k; ++i) \tInsert(isa[i]);\n\tint l = 1, r = k;\n\tfor (int i = k; i <= n; ++i)\n\t{\n\t\tint mid;\n\t\tif (k & 1)\tmid = Find_Kth((k >> 1) + 1);\n\t\telse \tmid = (Find_Kth(k >> 1) + Find_Kth((k >> 1) + 1)) >> 1;\n\t\tint xxx = Query(mid);\n\t\tif (ANS > xxx)\n\t\t{\n\t\t\tANS = xxx;\n\t\t\tMID = mid;\n\t\t\tLEFT = l - 1;\n\t\t\tRIGHT = r + 1;\n\t\t}\n\t\tl++, r++;\n\t\tRemove(isa[l - 1]);\n\t\tInsert(isa[r]);\n\t}\n\tprintf(\"%lld\\n\", ANS);\n\tfor (int i = 1; i <= LEFT; ++i) \tprintf(\"%lld\\n\", isa[i]);\n\tfor (int i = LEFT + 1; i <= RIGHT - 1; ++i) \tprintf(\"%lld\\n\", MID);\n\tfor (int i = RIGHT; i <= n; ++i) \tprintf(\"%lld\\n\", isa[i]);\n\treturn 0;\n}\n```",
        "postTime": 1595762115,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5\uff08[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.org/problem/P2263)\uff09\n\n\u7531\u4e8e\u6211\u5148\u5199\u7684\u662f\u94fe\u63a5\u7684\u9898\uff0c\u90a3\u9898\u8981\u7528\u79bb\u6563\u5316\uff0c\u6240\u4ee5\u6b64\u9898\u6211\u76f4\u63a5\u628a\u4ee3\u7801\u642c\u4e86\u8fc7\u6765\u6ca1\u6709\u6539\uff0c\u4f46\u672c\u9898\u7531\u4e8e\u9ad8\u5ea6\u4e0d\u5927\u65e0\u9700\u79bb\u6563\u5316\u3002\n\n\u8003\u8651\u4e00\u4e2a\u6709\u5e8f\u6570\u5217\u7684\u4e2d\u4f4d\u6570\u662f\u7b2cx\u4e2a\u6570\uff0c\u5171\u6709n\u4e2a\u6570\n\n\u90a3\u4e48\u79fb\u52a8\u6b21\u6570\u4e3a\uff08\u4e2d\u4f4d\u6570-a1) + (\u4e2d\u4f4d\u6570-a2) + \u2026\u2026 + \uff08\u4e2d\u4f4d\u6570-ax\uff09 + (ax+1 - \u4e2d\u4f4d\u6570) + \u2026\u2026 + \uff08an - \u4e2d\u4f4d\u6570\uff09\n\n\u516c\u5f0f\u957f\u8fd9\u6837\uff1a\n\n$\\sum_{i=1}^{x-1} ax-ai + \\sum_{i=x+1}^{n} an-ax$\n\n\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u4e2d\u4f4d\u6570\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u6c42\u548c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7684\u524d\u7f00\u548c\u6765\u7ef4\u62a4\uff0c\u90a3\u4e48\u600e\u4e48\u6c42\u4e2d\u4f4d\u6570\u5462\uff1f\n\n\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u4e2a\u6570\u5bf9\u4e8e\u957f\u5ea6\u7684\u8d21\u732e\u662f1\uff0c\u90a3\u4e48\u7b2c(k + 1 >> 1)\u7684\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u4e8c\u5206\u627e\u51fa\u7b2c\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\uff08k + 1 >> 1\uff09\u7684\u3002\n\n\uff08\u5927\u4e8e\u7b49\u4e8e\u662f\u56e0\u4e3a\u6709\u4e9b\u6570\u76f8\u7b49\u53ef\u80fd\u5bfc\u81f4\u957f\u5ea6\u6709\u65ad\u88c2\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long ll;\n\ntemplate <typename T>\ninline void read (T& s) {\n\ts = 0;\n\tstatic char c = getchar ();\n\twhile (c < '0' || c > '9') c = getchar ();\n\twhile (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c & 15), c = getchar ();\n\treturn ;\n}\n\nint qu[53];\ntemplate <typename T>\ninline void write (T s) {\n    if (!s) {putchar ('0'); return ;}\n    if (s < 0) {\n        putchar ('-');\n        s = -s;\n    }\n    int v = 0;\n    while (s) qu[++v] = s % 10, s /= 10;\n    while (v) putchar (qu[v--] + '0');\n    return ;\n}\n\nconst int N = 100003;\nint n, k, m, pos[N], num[N], lastl, lasth;\nint h[N], a[N];\nll sum[N], ans = (1ll << 62);\n\ninline void add (int x, ll y, int z) {\n\tfor (; x <= m; x += x & (x ^ x - 1)) {\n\t\tsum[x] += y;\n\t\tnum[x] += z;\n\t}\n\treturn ;\n}\n\ninline int ask1 (int x) {int ans = 0; for (; x; x &= x - 1) ans += num[x]; return ans;}\ninline ll ask2 (int x) {ll ans = 0; for (; x; x &= x - 1) ans += sum[x]; return ans;}\n\ninline void work (int sx) {\n\tint L = 1, R = m, mid, x = (1 << 30), t, e = (k + 1 >> 1), now;\n\twhile (L <= R) {\n\t\tmid = L + R >> 1;\n\t\tt = ask1 (mid);\n\t\tif (t >= e) {\n\t\t\tx = min (x, mid);\n\t\t\tnow = t;\n\t\t\tR = mid - 1;\n\t\t} //\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e(k+1>>1)\u7684\n\t\telse L = mid + 1;\n\t}\n\tll zh = a[x]; //zh\u662f\u4e2d\u4f4d\u6570\n\tll tot = zh * now - ask2 (x) + (ask2 (m) - ask2 (x) - zh * (k - now)); //now\u8868\u793a\u4e2d\u4f4d\u6570\u7684\u5728\u6570\u7ec4\u4e2d\u7684\u6392\u540d\n    if (tot < ans) {\n        ans = tot;\n        lastl = sx;\n        lasth = zh;\n    }\n\treturn ;\n}\n\nint main () {\n\tread (n), read (k);\n\tint i, j; for (i = 1; i <= n; ++i) {\n\t\tread (h[i]);\n\t\ta[i] = h[i];\n\t}\n\tsort (a + 1, a + 1 + n);\n\tm = unique (a + 1, a + 1 + n) - a - 1;\n\tfor (i = 1; i <= n; ++i) pos[i] = lower_bound (a + 1, a + 1 + m, h[i]) - a; //\u8bf7\u65e0\u89c6\u79bb\u6563\u5316\u64cd\u4f5c\n\tfor (i = 1; i < k; ++i) add (pos[i], h[i], 1);\n\tfor (i = 1; i + k - 1 <= n; ++i) {\n\t\tj = i + k - 1;\n\t\tadd (pos[j], h[j], 1); //\u7b2ci~\u5230i+k-1\u4e2a\u6570\u5165\u6811\u72b6\u6570\u7ec4\n\t\twork (i);\n\t\tadd (pos[i], -h[i], -1); //\u7b2ci\u4e2a\u6570\u51fa\u53bb\n\t}\n\tcout << ans << '\\n';\n    for (i = 1; i < lastl; ++i) write (h[i]), putchar ('\\n');\n    for (i = lastl; i <= lastl + k - 1; ++i) write (lasth), putchar ('\\n');\n    for (i = lastl + k; i <= n; ++i) write (h[i]), putchar ('\\n');\n\treturn 0;\n}\n\n```\n",
        "postTime": 1568299200,
        "uid": 31193,
        "name": "\u68a7\u6850\u706f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "## \u672c\u9898 $FHQ\\;Treap$ \u5199\u6cd5\n\n\u9898\u76ee\u610f\u601d\u5c31\u662f\uff0c\u7ed9\u5b9a $n$ \u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6570\u52a0\u4e00\u6216\u8005\u51cf\u4e00\uff0c\u8981\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u5f97\u6709 $m$ \u4e2a\u8fde\u7eed\u76f8\u540c\u7684\u6570\u5b57\n\n\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u533a\u95f4\uff0c\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e2a\u6570\u90fd\u53d8\u6210\u8fd9\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\n\n\u8bc1\u660e\u5982\u4e0b\uff1a\n\n**\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e2a\u6570\u90fd\u53d8\u6210 $x$**\n\n**\u4ee4\u6bd4 $x$ \u5c0f\u7684\u6570\u7684\u4e2a\u6570\u4e3a $siz1$\uff0c\u6bd4 $x$ \u5927\u7684\u6570\u7684\u4e2a\u6570\u4e3a $siz2$**\n\n**\u6bd4 $x$ \u5c0f\u7684\u6570\u7684\u548c\u4e3a $add1$\uff0c\u6bd4 $x$ \u5927\u7684\u6570\u7684\u548c\u4e3a $add2$**\n\n**\u5219\u4ee3\u4ef7\u4e3a $add3=add2-siz2\\times x+x\\times siz1-add1$**\n\n**\u5f53 $x$ \u4e3a\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\uff0c\u6709 $siz1=siz2$\uff0c\u5219 $add3=add2-add1$\uff0c\u4ee3\u4ef7\u6700\u5c0f**\n\n\u5f53 $m$ \u4e3a\u5076\u6570\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u7684\u4e2d\u4f4d\u6570\u4e3a\u6574\u6570\uff0c\u4e3a\u4e86\u907f\u514d\u9ebb\u70e6\uff08\u6709\u4e9b\u60c5\u51b5\u4e0b\u8981\u52a0\u4e0a $x$ \u6216\u51cf\u53bb $x$\uff09\uff0c\u8fd8\u662f\u5206\u522b\u6c42\u51fa\u4e86 $siz1$ \u548c $siz2$\uff0c\u7528\u4e0a\u8ff0\u516c\u5f0f\u8ba1\u7b97\n\n### \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define random(x) rand()*100%x\n#define INF 20040121\n#define N 4000010\nusing namespace std;\n\nint size[N],t[N],sum[N],heap[N],son[N][2],a[N];\nint cnt,root,n,m,add1,add2,ans,x,k,x1,add3,siz1,siz2;\n\nvoid add(int val){t[++cnt]=val,size[cnt]=1,sum[cnt]=val,heap[cnt]=random(INF);}\n\nvoid update(int x)\n{\n    size[x]=size[son[x][0]]+size[son[x][1]]+1;\n    if (t[x]!=INT_MAX) sum[x]=sum[son[x][0]]+sum[son[x][1]]+t[x];\n    else sum[x]=sum[son[x][0]]+sum[son[x][1]];\n}\n\nvoid split(int now,int &a,int &b,int val)\n{\n    if (!now) {a=b=0;return;}\n    if (t[now]<=val) a=now,split(son[now][1],son[a][1],b,val);\n    else b=now,split(son[now][0],a,son[b][0],val);\n    update(now);\n}\n\nvoid merge(int &now,int a,int b)\n{\n    if (a==0 || b==0) {now=a+b;return;}\n    if (heap[a]<heap[b]) now=a,merge(son[now][1],son[a][1],b);\n    else now=b,merge(son[now][0],a,son[b][0]);\n    update(now);\n}\n\nvoid insert(int val)\n{\n    int x=0,y=0;\n    add(val);\n    int o=cnt;\n    split(root,x,y,val);\n    merge(x,x,o);merge(root,x,y);\n}\n\nvoid del(int val)\n{\n    int x=0,y=0,o=0;\n    split(root,x,y,val);split(x,x,o,val-1);\n    merge(o,son[o][0],son[o][1]);\n    merge(x,x,o);merge(root,x,y);\n}\n\nint findnum(int now,int x)\n{\n    if (size[son[now][0]]+1==x) return t[now];\n    if (size[son[now][0]]>=x) return findnum(son[now][0],x);\n    else return findnum(son[now][1],x-size[son[now][0]]-1);\n}\n\nvoid query1(int now,int val)\n{\n    int x=0,y=0;\n    split(root,x,y,val-1);  \\\\\u6309 val-1 \u5288\u6210\u4e24\u68f5\u6811\uff0c\u4ee5 x \u4e3a\u6839\u5b50\u6811\u7684 size \u503c\u5c31\u662fsiz1\uff0c\u5176 sum \u503c\u5c31\u662fadd1\n    add1=sum[x];\n    siz1=size[x];\n    merge(root,x,y);\n}\n\nvoid query2(int now,int val)\n{\n    int x=0,y=0;\n    split(root,x,y,val);   \\\\\u540c\u4e0a\n    add2=sum[y];\n    siz2=size[y]-1;\n    merge(root,x,y);\n}\n\nsigned main()\n{\n    srand((int)(time(0)));\n    scanf(\"%lld%lld\",&n,&m);\n    ans=100000000001ll;    \\\\\u7531\u4e8e\u8fd9\u4e2a\u521d\u59cb\u503c\u51fa\u9505\uff0c\u70b8\u4e86\u597d\u4e45\n    add(INT_MAX);root=1;heap[root]=-INT_MAX;sum[root]=0;\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&a[i]);\n        insert(a[i]);\n        if (i>m) del(a[i-m]);\n        else if (i<m) continue;\n        x=findnum(root,(m+1)/2);\n        query1(root,x);query2(root,x);\n        add3=add2-x*siz2+x*siz1-add1;\n        if (add3<ans) ans=add3,k=i,x1=x;  \\\\\u7528 k \u8bb0\u5f55\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u6c42\u51fa\u4fee\u6539\u540e\u7684\u6570\u5217\n    }\n    for (int i=k-m+1;i<=k;i++)\n        a[i]=x1;\n    printf(\"%lld\\n\",ans);\n    for (int i=1;i<=n;i++)\n        printf(\"%lld\\n\",a[i]);\n    return 0;\n}\n```",
        "postTime": 1559818966,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P3466 [POI2008]KLO-Building blocks"
    },
    {
        "content": "\u5982\u679c\u6211\u4eec\u5df2\u77e5\u662f\u5728\u54ea\u4e00\u4e2a\u533a\u95f4 \u663e\u7136\u9009\u53d6\u7684\u4e2d\u95f4\u70b9\u662f\u4e2d\u4f4d\u6570 \n\n\n\u800c\u8ba1\u7b97\u7b54\u6848\u65f6 \u628a\u540e\u4e00\u534a\u6c42\u548c-\u524d\u4e00\u534a\u6c42\u548c\u5373\u53ef \n\n\u56e0\u4e3ak\u662f\u56fa\u5b9a\u7684 \u6240\u4ee5\u4e00\u5171O(n)\u4e2a\u533a\u95f4 \u8003\u8651\u4e24\u4e2a\u533a\u95f4\u7aef\u70b9 \u6bcf\u6b21\u53f3\u79fb\n\n1.\u52a0\u5165\u4e00\u4e2a\u6570 \n\n2.\u5220\u9664\u4e00\u4e2a\u6570 \n\n3.\u7ef4\u62a4\u4e2d\u4f4d\u6570\u5e76\u8ba1\u7b97 \n\n\u5f00\u4e24\u4e2aset\u8868\u793a\u6709\u5e8f\u7684\u5de6\u8fb9\u4e00\u534a\u548c\u53f3\u8fb9\u4e00\u534a \u65b0\u52a0\u5165\u7684\u4e00\u4e2a\u6570\u5b57\u548c\u4e2d\u4f4d\u6570\u6bd4\u8f83 \u7136\u540e\u5224\u4e00\u4e0b\u52a0\u5165\u54ea\u4e00\u534a \u5220\u9664\u540c\u7406",
        "postTime": 1541215627,
        "uid": 19821,
        "name": "FarmerJohn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    },
    {
        "content": "\u600e\u4e48\u6ca1\u6709\u7528\u4e3b\u5e2d\u6811\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u533a\u95f4\u4e0a\u7684\u4e2d\u70b9\u95ee\u9898\u3002\n\n$$\\mathrm{cost} = \\sum | \\overline{x} - a_i |$$\n\n\u7136\u540e\u4e8b\u60c5\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\u3002\n\n\u6743\u503c\u4e3b\u5e2d\u6811 -> \u67e5\u8be2\u533a\u95f4\u7b2c $\\mathrm{k}$ \u5927\u53ef\u4ee5\u6c42\u5f97\u4e2d\u70b9\u3002\n\n\u6ce8\u610f\u8003\u8651\u533a\u95f4\u957f\u5ea6\u662f\u5076\u6570\u7684\u95ee\u9898\u3002\u3002\u8fd9\u4e2a\u6211\u4eec\u53bb\u53d6\u5e73\u5747\u503c\u5c31\u597d\u4e86\u3002\n\n\u6c42\u51fa\u6765\u4f4d\u7f6e\u4e4b\u540e\u6211\u4eec\u5728\u4e3b\u5e2d\u6811\u4e0a\u8d70\u4e00\u904d\uff0c\u5bf9\u4e8e\u4e0d\u5305\u542b\u4e2d\u70b9\u7684\u533a\u95f4\u6211\u4eec\u76f4\u63a5\u53ef\u4ee5\u7b97\u51fa\u8d21\u732e\uff0c\u5305\u542b\u7684\u9012\u5f52\u8fdb\u53bb\u7b97\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<cstdlib>\n#include<iterator>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define LCH PGT[inx].ch[0]\n#define RCH PGT[inx].ch[1]\n#define NLCH PGT[newx].ch[0]\n#define NRCH PGT[newx].ch[1]\nusing namespace std;\n\nstruct Pre_Tree\n{\n    int ch[2];\n    ll val,siz;\n}PGT[1000010*22];\nint tsiz=0,troo[1000010];\nll _val,lx,rx,_pos,kv;\n\nll n,K,seq[1000010];\n\nvoid readx(ll& x)\n{\n    x=0; ll k=1; char ch=0;\n    while (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n    while (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n    x*=k;\n}\n\nvoid Upd(int inx,int& newx)\n{\n    newx=++tsiz;\n    PGT[newx].val=PGT[inx].val+_val;\n    PGT[newx].siz=PGT[inx].siz+1;\n    if (lx==rx) return;\n    \n    NLCH=LCH; NRCH=RCH;\n    int mid=(lx+rx)>>1;\n    if (_val<=mid) { rx=mid; Upd(LCH,NLCH); }\n    else { lx=mid+1; Upd(RCH,NRCH); }\n}\n\nll k_th(int inx,int newx)\n{\n    if (lx==rx) return lx;\n    kv=PGT[NLCH].siz-PGT[LCH].siz;\n    int mid=(lx+rx)>>1;\n    if (kv>=_val) { rx=mid; return k_th(LCH,NLCH); }\n    else { _val-=kv; lx=mid+1; return k_th(RCH,NRCH); }\n}\n\nll qry(int inx,int newx)\n{\n    if (lx==rx) return 1LL*abs(lx-_pos)*(PGT[newx].siz-PGT[inx].siz);\n    int mid=(lx+rx)>>1;\n    if (_pos<=mid)\n    {\n        ll ret=(PGT[NRCH].val-PGT[RCH].val)-(_pos*(PGT[NRCH].siz-PGT[RCH].siz));\n        rx=mid;\n        return qry(LCH,NLCH)+ret;\n    }\n    else\n    {\n        ll ret=(_pos*(PGT[NLCH].siz-PGT[LCH].siz))-(PGT[NLCH].val-PGT[LCH].val);\n        lx=mid+1;\n        return qry(RCH,NRCH)+ret;\n    }\n}\n\nint get_mid(int l,int r)\n{\n    int len=(r-l+1);\n    if (len&1) \n    {\n        lx=1; rx=1000001; _val=len/2+1;\n        return k_th(troo[l-1],troo[r]);\n    }\n    else\n    {\n        lx=1; rx=1000001; _val=len/2;\n        ll ret=k_th(troo[l-1],troo[r]);\n        lx=1; rx=1000001; _val=len/2+1;\n        ret+=k_th(troo[l-1],troo[r]);\n        return ret/2;\n    }\n}\n\nint main()\n{\n    readx(n); readx(K);\n    for (int i=1;i<=n;i++) readx(seq[i]);\n    for (int i=1;i<=n;i++)\n    {\n        seq[i]++;\n        lx=1; rx=1000001; _val=seq[i];\n        Upd(troo[i-1],troo[i]);\n    }\n    ll ans=1e18,ans2=0,pos;\n    for (int i=1;i+K-1<=n;i++)\n    {\n        _pos=get_mid(i,i+K-1); lx=1; rx=1000001;\n        ll tmp=qry(troo[i-1],troo[i+K-1]);\n        if (tmp<ans) \n        {\n            ans=tmp; ans2=_pos;\n            pos=i;\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    for (int i=1;i<=n;i++)\n    {\n        if (i>=pos && i<=pos+K-1) printf(\"%lld\\n\",ans2-1);\n        else printf(\"%lld\\n\",seq[i]-1);\n    }\n}\n```",
        "postTime": 1537359328,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3466 \u3010[POI2008]KLO-Building blocks\u3011"
    }
]