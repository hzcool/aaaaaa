[
    {
        "content": "\u9996\u5148\u5410\u69fd\u4e00\u4e0b\u8fd9\u4e2a\u53cd\u4eba\u7c7b\u5b9a\u4e49\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/q3br482j.png)\n\n\u6839\u636e\u90a3\u4e2a\u53cd\u4eba\u7c7b\u5f00\u533a\u95f4\u5b9a\u4e49\uff0c\u5176\u5b9e\u4ece\u5cb8\u662f\u53ef\u4ee5\u8df3\u5230 $f$ \u8fd9\u6839\u6728\u5934\u7684\u3002\u4e0d\u96be\u770b\u51fa\u90a3\u4e2a\u5b9a\u4e49\u6709\u591a\u53cd\u4eba\u7c7b/fn\u3002\n\n\u56de\u5f52\u6b63\u9898\uff0c\u8fd9\u9898\u5176\u5b9e\u53ef\u4ee5\u770b\u6210\u4e00\u9053\u4f18\u5316\u5efa\u56fe\u7684\u677f\u9898\u4e86\u3002\n\n\u8003\u8651\u4e00\u4e2a\u66b4\u529b $m^2$ \u5efa\u8fb9\uff0c\u679a\u4e3e\u4e24\u4e2a\u6728\u5934\u7136\u540e\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u5408\u6cd5\u5373\u5efa\u8fb9\uff0c\u5efa\u8fb9\u540e\u8dd1\u6700\u77ed\u8def\u3002\n\n\u4f46\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6cbf\u7528 [CF1557D](https://www.luogu.com.cn/blog/Picking-up/solution-cf1557d) \u7684\u505a\u6cd5\uff0c\u626b\u63cf\u7ebf\u626b\u8fc7\u53bb\uff0c\u78b0\u5230\u4e00\u6839\u6728\u5934\u7684\u5de6\u7aef\u70b9\u52a0\u5165\u8fd9\u6839\u6728\u5934\uff0c\u53f3\u7aef\u70b9\u5220\u9664\u8fd9\u6839\u6728\u5934\uff0c\u4e0d\u96be\u53d1\u73b0\u6709\u7528\u7684\u8fb9\u53ea\u6709\u5728\u52a0\u5165\u540e\u5176\u76f8\u90bb\u4e24\u6839\u6728\u5934\u4e0e\u4e4b\u7684\u8fb9\u548c\u5220\u9664\u65f6\u5269\u4f59\u76f8\u90bb\u4e24\u6839\u6728\u5934\u4e2d\u95f4\u7684\u8fb9\uff0c\u53ef\u4ee5\u76f4\u63a5 set \u7ef4\u62a4\u3002\u603b\u8fb9\u6570 $O(n)$ \u5c31\u53ef\u4ee5\u76f4\u63a5\u6700\u77ed\u8def\u4e86\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u5de6\u5f00\u53f3\u5f00\u7684\u539f\u56e0\uff0c\u5904\u7406\u4e00\u4e2a\u7eb5\u5750\u6807\u7684\u6240\u6709\u4e8b\u4ef6\u7684\u65f6\u5019\u8981\u5148\u5904\u7406\u5220\u8fb9\u518d\u5904\u7406\u52a0\u8fb9\u3002\n\n```c++\n//\u6211\u8033\u6735\u778e\u6389\u62c9~~\n#define setI(x) freopen(x,\"r\",stdin)\n#define setO(x) freopen(x,\"w\",stdout)\n#include<bits/stdc++.h>\n#define poly vector<int>\n#define IOS ios::sync_with_stdio(false)\n#define ll long long\n#define mp make_pair\n#define mt make_tuple\n#define pa pair < int,int >\n#define fi first\n#define se second\n#define inf 2e9\n#define mod 998244353\n#define int ll\n#define N 500005\nusing namespace std;\ninline char gc(){static char buf[1000000],*p1=buf,*p2=buf;return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;}\n#define gc getchar\ninline ll read(){char c=gc();ll su=0,f=1;for (;c<'0'||c>'9';c=gc()) if (c=='-') f=-1;for (;c>='0'&&c<='9';c=gc()) su=su*10+c-'0';return su*f;}\ninline void write(ll x){if (x<0){putchar('-');write(-x);return;}if (x>=10) write(x/10);putchar(x%10+'0');}\ninline void writesp(ll x){write(x),putchar(' ');}\ninline void writeln(ll x){write(x);putchar('\\n');}\nint n,X[N],L[N],R[N],V[N];\npoly G;\nint dis[N];\npoly I[N],E[N];\nset<pa>S;\nvector<pa>g[N];\npriority_queue<pa>q;\nbool cmp(int x,int y)\n{\n    return X[x]<X[y];\n}\nvoid ad(int x,int y,int w)\n{\n    g[x].push_back(mp(y,w));\n}\nvoid BellaKira()\n{\n    n=read();\n    for (int i=1;i<=n;i++)\n    {\n        X[i]=read(),L[i]=read(),R[i]=read()-1;V[i]=read();\n        G.push_back(L[i]);\n        G.push_back(R[i]+1);\n    }\n    sort(G.begin(),G.end());\n    G.erase(unique(G.begin(),G.end()),G.end());\n    for (int i=1;i<=n;i++)\n    {\n        L[i]=lower_bound(G.begin(),G.end(),L[i])-G.begin()+1;\n        R[i]=lower_bound(G.begin(),G.end(),R[i]+1)-G.begin()+1;\n        I[L[i]].push_back(i);\n        E[R[i]].push_back(i);\n    }\n    S.insert(mp(0,0));\n    S.insert(mp(inf,n+1));\n    for (int i=1;i<=G.size();i++)\n    {\n        for (auto u:E[i])\n        {\n            S.erase(mp(X[u],u));\n        }\n        for (auto u:E[i])\n        {\n            auto it=(S.lower_bound(mp(X[u]+1,0)));\n            auto it1=(S.lower_bound(mp(X[u],0)));\n            if (it1!=S.begin())\n            {\n                it1--;\n                if (it!=S.end())\n                {\n                    int x=(*it1).se,y=(*it).se;\n                    if (!(x==0&&y==n+1))\n                    {\n                        ad(x,y,V[x]);\n                        ad(y,x,V[y]);\n                    }\n                }\n            }\n        }\n\n        \n        for (auto u:I[i])\n        {\n            S.insert(mp(X[u],u));\n        }\n        for (auto u:I[i])\n        {\n            auto it=(S.lower_bound(mp(X[u]+1,0)));\n            auto it1=(S.lower_bound(mp(X[u],0)));\n            if (it1!=S.begin())\n            {\n                it1--;\n                int x=(*it1).se,y=u;\n                ad(x,y,V[x]);\n                ad(y,x,V[y]);\n            }\n            if (it!=S.end())\n            {\n                int x=(*it).se,y=u;\n                ad(x,y,V[x]);\n                ad(y,x,V[y]);\n            }\n\n        }\n    }\n    memset(dis,0x3f,sizeof(dis));\n    dis[0]=0;\n    q.push(mp(0,0));\n    while (!q.empty())\n    {\n        int ds=-q.top().fi,u=q.top().se;\n        q.pop();\n        if (ds!=dis[u]) continue;\n        for (auto U:g[u])\n        {\n            int v=U.fi,w=U.se;\n            if (dis[v]>dis[u]+w)\n            {\n                dis[v]=dis[u]+w;\n                q.push(mp(-dis[v],v));\n            }\n        }\n    }\n    writeln(dis[n+1]);\n\n}\nsigned main()\n{\n    int T=1;\n    while (T--)\n    {\n        BellaKira();\n    }\n}\n/*\n\n*/\n```",
        "postTime": 1648172527,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P8237 [AGM 2022 \u8d44\u683c\u8d5b] \u8fc7\u6cb3"
    }
]