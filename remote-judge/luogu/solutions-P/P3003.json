[
    {
        "content": "\u672c\u6765\u8fd9\u662f\u9053\u88f8\u9898\uff0c\u663e\u7136\u6700\u77ed\u8def\u4e00\u5b9a\u662f$min(dis[s][a],dis[s][b])+dis[a][b]$\u3002\u5f00\u59cb\u6211\u601d\u7ef4\u6df7\u4e71\uff0c\u4e00\u76f4\u5728\u60f3\u4ece\u8d77\u70b9\u8dd1\u5230$a$\u540e\u662f\u5426\u8dd1\u56de\u8d77\u70b9\u518d\u53bb$b$\u70b9\u4f1a\u66f4\u5feb\uff1f\u4f46\u6211\u53ca\u65f6\u9192\u609f\u4e86\uff0c\u4ece$a$\u5230\u8d77\u70b9\u518d\u5230$b$\u70b9\u5982\u679c\u6700\u77ed\uff0c\u81ea\u7136\u4e5f\u4f1a\u5305\u62ec\u5728$a,b$\u7684\u6700\u77ed\u8def\u5f84\u91cc\uff0c\u65e0\u9700\u989d\u5916\u5224\u65ad\u3002\u6240\u4ee5\u8981\u6c42\u7684\u5c31\u662f\u4e0a\u9762\u90a3\u4e2a\u4e1c\u897f\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u4e24\u6b21\u6700\u77ed\u8def\u5c31\u591f\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9898\u7a0d\u5fae\u5361\u4e86\u4e00\u4e0bSPFA\uff0cSPFA\u5e94\u8be5\u53ea\u670970\u5206~~\u4e3a\u4ec0\u4e48\u6211\u670980~~\uff0c\u6240\u4ee5\u5e76\u4e0d\u662f\u771f\u7684\u90a3\u4e48\u6a21\u677f\u3002dijkstra\u597d\uff0c\u4f46\u6211\u61d2\u5f97\u6253\u3002\u6545\u4ecb\u7ecd\u4e00\u4e2a\u5341\u5206\u7b80\u5355\uff0c\u4f46\u8bb8\u591a\u4eba\u5e76\u4e0d\u77e5\u9053\u7684\u4f18\u5316\u3002\n\nSLF\uff1a\u677e\u5f1b\u64cd\u4f5c\u65f6\u4f18\u5316\u5165\u961f\uff0c\u4ee3\u7801\uff1a\n\n```cpp\nif(b.size()&&dis[edge[i].to]<dis[b.front()])\n\tb.push_front(edge[i].to);\nelse\n\tb.push_back(edge[i].to);\n```\n\n\n\u4f18\u5148\u9009\u62e9dis\u503c\u66f4\u5c0f\u7684\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u663e\u7136\u7b97\u6cd5\u53ef\u4ee5\u8dd1\u5f97\u66f4\u5feb\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/56c4t4ou.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u4f18\u5316\u633a\u660e\u663e\u3002\n\n\u8fd8\u6709\u4e2alll\u4f18\u5316\uff1a\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\u3002\u636e\u8bf4\u672c\u9898\u5361\u4e86\uff0c\u6211\u6ca1\u6253\u3002\n\n\u6b63\u6743\u56fe\u8fd8\u662f\u8981\u7528dijkstra\uff0cSPFA\u592a\u597d\u5361\u4e86\u3002\n\n\u6700\u540e\u6ce8\u610f\u4e00\u70b9\uff1a\u5728\u5e2e\u5927\u4f6c\u6539\u4ee3\u7801\u65f6\u603b\u51fa\u73b0\u5947\u602a\u7684CPU\u62a5\u9519\uff0c\u4f46\u611f\u89c9\u5374\u548c\u6211\u7684AC\u4ee3\u7801\u4ec0\u4e48\u533a\u522b\u4e5f\u6ca1\u6709\uff0c\u4e8e\u662f\u628a\u6211\u4ea4\u4e86\u7684\u4ee3\u7801\u62f7\u4e0b\u6765\u53c8\u8dd1\u4e86\u4e00\u904d\uff0c\u53d1\u73b0\u6628\u5929\u597d\u597d\u7684\u4ee3\u7801\u53d1\u751f\u4e86\u540c\u6837\u7684\u9519\u8bef\u2026\u2026\u771f\u4e0d\u77e5\u9053\u6211\u662f\u600e\u4e48A\u7684\u3002\u5176\u5b9e\u662f\u5728\u8fdb\u884cSLF\u4f18\u5316\u65f6\u672a\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u5c31\u76f4\u63a5\u8bbf\u95ee$b.front()$\uff0cRE\u4e0e\u5426\u5168\u9760\u8fd0\u6c14\u2026\u2026\u5728\u8bbf\u95ee\u524d\u52a0\u4e2a\u5224\u65ad\u5c31\u597d\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u7684\u57fa\u7840\u4e0a\u4fee\u590d\u4e86\u4e0a\u9762\u7684\u95ee\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\nstruct node\n{\n\tint from,to,dis,next;\n}edge[400001];\nint n,m,num,head[200001],dis[200001],book[200001];\nstd::deque<int> b;\nvoid add(int u,int v,int w)\n{\n\tedge[++num].from=u;\n\tedge[num].to=v;\n\tedge[num].dis=w;\n\tedge[num].next=head[u];\n\thead[u]=num;\n\treturn;\n}\n\nint spfa(int s,int t)\n{\n\tmemset(book,0,sizeof(book));\n\tmemset(dis,0x7f,sizeof(dis));\n\tb.push_front(s);\n\tbook[s]=1;\n\tdis[s]=0;\n\twhile(b.size())\n\t{\n\t\tint x=b.front();\n\t\tb.pop_front();\n\t\tbook[x]=0;\n\t\tfor(int i=head[x];i;i=edge[i].next)\n\t\t\tif(dis[edge[i].to]>dis[x]+edge[i].dis)\n\t\t\t{\n\t\t\t\tdis[edge[i].to]=dis[x]+edge[i].dis;\n\t\t\t\tif(!book[edge[i].to])\n\t\t\t\t{\n\t\t\t\t\tbook[edge[i].to]=1;\n\t\t\t\t\tif(b.size()&&dis[edge[i].to]<dis[b.front()])\n\t\t\t\t\t\tb.push_front(edge[i].to);\n\t\t\t\t\telse\n\t\t\t\t\t\tb.push_back(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t}\n\n\treturn dis[t];\n}\n\nint main()\n{\n\tint s,a,b;\n\tscanf(\"%d%d%d%d%d\",&m,&n,&s,&a,&b);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\t\n\tprintf(\"%d\",std::min(spfa(s,a),spfa(s,b))+spfa(a,b));\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1569590713,
        "uid": 143841,
        "name": "Star1_3st",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "~~\u4e00\u9053\u4f1a\u6700\u77ed\u8def\u5c31\u80fd\uff08\u57fa\u672c\u4e0a\uff09\u505a\u51fa\u7684\u9898\u554a\uff0c\u5efa\u8bae\u6539\u6210\u9ec4\u9898~~\n\n### \u8fdb\u5165\u6b63\u9898\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u76ee\u6807\u70b9\u3002\u90a3\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\u4e86\uff1a\u8981\u4e48\u5148\u53bb\u7b2c\u4e00\u4e2a\uff0c\u8981\u4e48\u5148\u53bb\u7b2c\u4e8c\u4e2a\u3002\n\n\u6240\u4ee5\uff0c\u7528$Dijkstra$\u8dd1\u4e00\u904d\u4ee5$PB$ \u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\uff0c\u518d\u8dd1\u4e00\u904d\u4ee5 $PA$_$1$\u4e3a\u8d77\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6c42\u51fa$min(dis[PB][PA1],dis[PB][PA2])+dis[PA1][PA2]$\u5c31\u884c\u4e86~\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst ll inf=2147483647;\ninline ll r()\n{\n    char c=getchar();ll x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nll n,m,ss,s1,s2;\nll dis[1000010];\nll head[1000010];\nstruct edge{\n\tll u,v,w,nx;\n}e[1000010];\nstruct node{\n\tll w,now;\n\tinline bool operator <(const node &x)const{\n\t\treturn w>x.w;\n\t}\n};\nll tot;\nbool vis[100010];\nvoid add(ll u,ll v,ll w){\n\tll i=++tot;\n\te[i].u=u;\n\te[i].v=v;\n\te[i].w=w;\n\te[i].nx=head[u];\n\thead[u]=i;\n}\npriority_queue<node> q;\nll s_to_1,s_to_2,_to_2;\nint main() {\n\tm=r(),n=r(),ss=r(),s1=r(),s2=r();\n\tfor(int i=1;i<=n;i++)dis[i]=inf;\n\tfor(int i=1;i<=m;i++){\n\t\tll u=r(),v=r(),w=r();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdis[ss]=0;\n\tq.push((node){0,ss});\n\twhile(!q.empty()){\n\t\tll u=q.top().now;\n\t\tq.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].nx){\n\t\t\tll v=e[i].v;\n\t\t\tif(dis[v]>dis[u]+e[i].w){\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.push((node){dis[v],v});\n\t\t\t}\n\t\t}\n\t}\n\ts_to_1=dis[s1];\n\ts_to_2=dis[s2];\n\tmemset(dis,0,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;i++)dis[i]=inf;\n\tdis[s1]=0;\n\tq.push((node){0,s1});\n\twhile(!q.empty()){\n\t\tll u=q.top().now;\n\t\tq.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].nx){\n\t\t\tll v=e[i].v;\n\t\t\tif(dis[v]>dis[u]+e[i].w){\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.push((node){dis[v],v});\n\t\t\t}\n\t\t}\n\t}\n\t_to_2=dis[s2];\n\tprintf(\"%lld\",min(s_to_1,s_to_2)+_to_2);\n\treturn 0;\n}\n```\n",
        "postTime": 1589542841,
        "uid": 90706,
        "name": "_jimmywang_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]Apple Delivery S\u3011"
    },
    {
        "content": "\u9996\u5148\u4e0d\u96be\u770b\u51fa\u8fd9\u662f\u6700\u77ed\u8def\n\n\u7136\u540e\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e24\u4e2a\u7ec8\u70b9\u3002\n\n\u4ece\u8d77\u70b9\u8dd1\u4e00\u8fb9dij\uff0c\u6bd4\u8f83\u5230\u4e24\u4e2a\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u9009\u5c0f\u7684\u90a3\u4e2a\uff0c\u518d\u4ee5\u5176\u4e2d\u4e00\u4e2a\u7ec8\u70b9\u4e3a\u8d77\u70b9\uff0c\u8dd1dij\uff0cans\u52a0\u4e0a\u5230\u53e6\u4e00\u4e2a\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nstruct node{\n    int to,nxt,dis;\n}e[400010];\nstruct edge{\n    int val,nm;\n    bool operator < (const edge &x) const {\n        return val > x.val;\n    }\n};\npriority_queue<edge> dij;\nint head[100001],in[100001],d[100001];\nint cnt;\nint n,m,s1,s2,s3;\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\ninline void add(int from,int to,int dis){\n    e[++cnt]=(node){to,head[from],dis};\n    head[from]=cnt;\n}\ninline void di(int s){\n    for(int i=1;i<=n;++i)d[i]=2147483647;\n    memset(in,0,sizeof(in));\n\tdij.push((edge){0,s});\n    d[s]=0;\n    while(!dij.empty()){\n        int t=dij.top().nm;\n        dij.pop();\n        if(in[t])continue;\n        in[t]=1;\n        for(int i=head[t];i!=0;i=e[i].nxt){\n            if(!in[e[i].to]&&d[t]+e[i].dis<d[e[i].to]){\n                d[e[i].to]=d[t]+e[i].dis;\n                dij.push((edge){d[e[i].to],e[i].to});\n            }\t\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d%d%d\",&m,&n,&s1,&s2,&s3);\n    int x,y,z;\n    for(int i=1;i<=m;++i){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);add(y,x,z);\n    }\n    di(s1);\n    int ans=min(d[s2],d[s3]);\n    di(s2);\n    ans+=d[s3];\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1568465312,
        "uid": 151768,
        "name": "\u6d41\u901d\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u7684\u6a21\u677f\u9898\uff1a\n\u5206\u6790\uff1a\n\n\u76ee\u6807\u70b9\u5fc5\u987b\u5230\n\n\u76ee\u6807\u70b9\u7684\u8ddd\u79bb\u4e00\u5b9a\n\n\u5c31\u6709\u4ee5\u4e0b\u65b9\u5f0f\uff1a\n\n- \u8d70\u7b2c\u4e00\u4e2a\u518d\u8d70\u7b2c\u4e8c\u4e2a\n\n- \u8d70\u7b2c\u4e8c\u4e2a\u518d\u8d70\u7b2c\u4e00\u4e2a\n\n~~\uff08\u8fd9\u4e0d\u663e\u800c\u6613\u89c1\u5417\uff09~~\n\nans = min(dist[\u70b91]\uff0cdist[\u70b92])+dist[\u70b92\u5230\u70b91]\n\n\u89e3\u51b3\uff1a\n1. \u6c42\u51fa\u6e90\u70b9\u52302\u4e2a\u76ee\u6807\u70b9\u7684\u8ddd\u79bb\n\n1. \u76ee\u6807\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8o6klwzp.png)\n\n\u8fd9\u662f\u6837\u4f8b\u7684\u6700\u77ed\u8def\u5f84\n\n\n\u8fd9\u9898\u5361SPFA\uff0c\u4f46\u662f\n~~\uff08\u4ed6\u8fd8\u6ca1\u6709\u6b7b\uff09~~\n\u8fd8\u53ef\u4ee5\u4f18\u5316\n\n\u4e3b\u8981\u601d\u8def\u662f\u4e0e\u5934\u5143\u7d20\u7684dist\u503c\u6bd4\u8f83\uff0c\u5927\u4e86\u5c31\u63d2\u540e\u9762\uff0c\u5426\u5219\u63d2\u524d\u9762\n\n\u8fd9\u6837\u53ef\u4ee5\u8d70\u4e00\u4e2a\u8f83\u4f18\u7684\u4e00\u6761\u8def\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100010;\nint head[N<<2],cnt = 0,n,m,to_1,to_2,from,dist[N];\nbool vis[N];\nstruct EDGE{\n\tint next;\n\tint to;\n\tint w;\n}edge[N<<2];\ndeque<int> q;\nvoid add(int x,int y,int w)\n{\n\tcnt++;\n\tedge[cnt].next = head[x];\n\tedge[cnt].to = y;\n\tedge[cnt].w = w;\n\thead[x] = cnt;\n}\nvoid SPFA(int s)\n{\n\tmemset(dist,0x3f,sizeof(dist));\n\tmemset(vis,false,sizeof(vis));\n\tdist[s] = 0;\n\tq.push_back(s);\n\twhile(!q.empty())\n\t{\n\t\tint x = q.front();\n\t\tq.pop_front();\n\t\tvis[x] = false;\n\t\tfor(int i = head[x];i;i = edge[i].next)\n\t\t{\n\t\t\tint y = edge[i].to;\n\t\t\tif(edge[i].w<dist[y]-dist[x])\n\t\t\t{\n\t\t\t\tdist[y] = dist[x] + edge[i].w;\n\t\t\t\tif(vis[y]) continue;\n\n\t\t\t\tq.push_back(y);\n\t\t\t\tvis[y]=true;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n\tcin>>m>>n>>from>>to_1>>to_2;\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t}\n\tint ans = 0;\n\tSPFA(from);\n\tans = min(dist[to_1],dist[to_2]);\n\tSPFA(to_1);\n\tcout<<ans+dist[to_2]<<endl;\n\treturn 0;\n}\n```\n\n\n\u5c45\u7136dijkstra\u7b97\u6cd5\u8fd8\u662f\u8981\u6162\u4e00\u4e9b\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9ix3xt5t.png)\n\n\u8fd9\u91cc\u628adij\u7684\u4ee3\u7801\u53d1\u4e00\u4e0b\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N = 100010;\nint head[N<<2],cnt = 0,n,m,to_1,to_2,from,dist[N];\nbool vis[N];\nstruct EDGE{\n\tint next;\n\tint to;\n\tint w;\n}edge[N<<2];\nstruct node{\n\tint pos;\n\tint dist;\n\tbool operator <(const node& S)const{\n\treturn dist>S.dist;\n\t}\n};\npriority_queue<node> q;\nvoid add(int x,int y,int w)\n{\n\tcnt++;\n\tedge[cnt].next = head[x];\n\tedge[cnt].to = y;\n\tedge[cnt].w = w;\n\thead[x] = cnt;\n}\nvoid dj(int s)\n{\n\tmemset(dist,0x3f,sizeof(dist));\n\tmemset(vis,false,sizeof(vis));\n\tdist[s] = 0;\n\tq.push((node){s,dist[s]});\n\twhile(!q.empty())\n\t{\n\t\tint x = q.top().pos;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x] = true;\n\t\tfor(int i = head[x];i;i = edge[i].next)\n\t\t{\n\t\t\tint y = edge[i].to;\n\t\t\tif(edge[i].w<dist[y]-dist[x])\n\t\t\t{\n\t\t\t\tdist[y] = dist[x] + edge[i].w;\n\t\t\t\tq.push((node){y,dist[y]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n\tcin>>m>>n>>from>>to_1>>to_2;\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t}\n\tint ans = 0;\n\tdj(from);\n\tans = min(dist[to_1],dist[to_2]);\n\tdj(to_1);\n\tcout<<ans+dist[to_2]<<endl;\n\treturn 0;\n}\n```\n\n\n\u5982\u6709\u4e0d\u61c2\u79c1\u804aQwQ\n\n",
        "postTime": 1573631063,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003"
    },
    {
        "content": "## P3003 [USACO10DEC]Apple Delivery S \u9898\u89e3\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a [dijkstra \u5806\u4f18\u5316](https://oiwiki.com/graph/shortest-path/)\n\n\n\u548c\u4ed6\u7684\u6a21\u677f\uff1a [\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248](https://www.luogu.com.cn/problem/P4779)\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4e00\u4e2a\u56fe\uff0c\u6ce8\u610f\u8fb9\u662f**\u53cc\u5411**\u7684\uff0c\u7136\u540e\u7ed9\u51fa $s1,s2,s3$ ,\u5176\u4e2d $s1$ \u662f\u8d77\u70b9\u3002\u7136\u540e\u8981\u6c42$ s1$ \u5230 $s2$ \u52a0\u4e0a $s2$ \u5230 $s3$ \u548c $s1$ \u5230 $s3$ \u52a0\u4e0a $s2$ \u5230 $s3$  \u54ea\u4e00\u4e2a\u66f4\u5c0f\u3002\n\n\u5c31\u662f\uff1a\n\n $ans=min(dis[s1][s2]+dis[s2][s3],dis[s1][s3]+dis[s2][s3])$\n\n\u6240\u4ee5\u4e0a\u8ff0\u5f0f\u5b50\u53ef\u4ee5\u8f6c\u6362\u4e3a\uff1a\n\n$ans=min(dis[s1][s2],dis[s1][s3])+dis[s2]+[s3]$\n\n\uff08\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u624d\u628a $dis$ \u5199\u6210\u4e8c\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\uff0c\u5728\u4ee3\u7801\u4e2d\u662f\u5df2\u7ecf\u786e\u5b9a\u8d77\u70b9\u4e86\u7684\u3002\uff09\n\n\u6700\u540e\u9700\u8981\u6ce8\u610f $m$ \u548c $n$ \u7684\u8f93\u5165\u987a\u5e8f\u3002\n\n\u6240\u4ee5\u4ee3\u7801\u4fbf\u662f\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N =4000;\nconst int INF =1e6+10;\n#define int long long\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;\nstruct node\n{\n\tint w,to,next;\n}e[INF];\nlong long n,m,cnt,head[INF],dis[INF],s1,s2,s3;\nbool vis[INF];\nvoid add(int u,int v,int w)\n{\n\te[++cnt].to=v;\n\te[cnt].w=w;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n}\nvoid dijkstra(int x)\n{\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,127,sizeof(dis));\n\tq.push(make_pair(0,x));\n\tdis[x]=0;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.top().second;\n\t\tq.pop();\n\t\tif(vis[now])\n\t\t\tcontinue;\n\t\tvis[now]=1;\n\t\tfor(int i=head[now];i;i=e[i].next)\n\t\t\tif(dis[now]+e[i].w<dis[e[i].to])\n\t\t\t{\n\t\t\t\tdis[e[i].to]=dis[now]+e[i].w;\n\t\t\t\tq.push(make_pair(dis[e[i].to],e[i].to));\n\t\t\t}\n\t}\n}\nsigned main()\n{\n\tcin>>m>>n>>s1>>s2>>s3;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdijkstra(s1);\n\tint minn=min(dis[s2],dis[s3]);\n\tdijkstra(s2);\n\tminn+=dis[s3];\n\tcout<<minn<<endl;\n}\n```\n",
        "postTime": 1649914503,
        "uid": 361141,
        "name": "_JF_",
        "ccfLevel": 0,
        "title": "P3003 [USACO10DEC]Apple Delivery S"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u9898\u601d\u8def\u5f88\u6e05\u6670\uff0c\u56e0\u4e3a\u53ea\u6709\u4e24\u6761\u8def\uff0cs->1->2\u6216s->2->1\uff0c\u56e0\u6b64\u5206\u522b\u75281\u548c2\u505a\u4e24\u904dSPFA\uff0c\u53d6\u8f83\u5c0f\u7684\u4e00\u4e2a\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u9898\u503c\u5f97\u6ce8\u610f\u7684\u662f\u65f6\u95f4\uff0c\u5f88\u591a\u4eba\u662f70\u5206\uff0c\u4f60\u4e00\u5b9a\u662f\u7528\u7684\u88f8\u7684SPFA\uff0c\u56e0\u4e3a\u6211\u5c31\u662f\u8fd9\u4e48\u5e72\u7684\uff0c\u7136\u540e3\u4e2aTLE\uff0c\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u5c31\u8981\u7528\u5230SPFA\u7684\u4f18\u5316\u4e86\uff0c\u54d4\uff08\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\uff09\uff0c\u6709\u8bf7SLF\u51fa\u573a\uff01\n\nSLF\uff08Small Label First\uff09\uff0c\u610f\u601d\u5c31\u662f\u5c0f\u7684\u5728\u524d\uff0c\u5177\u4f53\u5c31\u662f\uff1a\u5047\u8bbe\u8981\u8fdb\u961f\u7684\u70b9\u662ft\uff0c\u961f\u9996\u5143\u7d20\u662ff\uff0c\u90a3\u4e48\u5982\u679cd[t]< d[f]\uff0c\u5c31\u628at\u653e\u961f\u9996\uff0c\u5426\u5219\u653e\u961f\u5c3e\u3002\n\n\u6b64\u65f6\u80af\u5b9a\u6709\u4eba\u95ee\uff0c\u600e\u4e48\u653e\u961f\u9996\u5462\uff1f\u529e\u6cd5\u8fd8\u662f\u51fa\u81eac++\u7684STl\uff0cc++\u5f3a\u5927\u7684STl\u4e2d\u6709\u4e00\u4e2a\u53cc\u7aef\u961f\u5217deque\uff0c\u5934\u5c3e\u90fd\u53ef\u4ee5\u52a0\u5143\u7d20\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\u5b83\u7684\u539f\u7406\u5e94\u8be5\u548cdijkstra\u662f\u4e00(bu)\u6837(tong)\u7684\u3002\n\n\u8c8c\u4f3c\u8fd8\u6709\u4e00\u4e2a\u4f18\u5316\u66f4\u597d\uff0c\u53ebLLL\uff0cLarge Label Last\uff0c\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\uff0c\u6211\u4e0d\u591a\u505a\u4ecb\u7ecd\u3002\n\nSLF\u53ef\u4ee5\u4f18\u531615%~20%\uff0cLLL\u53ef\u4ee5\u4f18\u531650%\uff0c\u81ea\u5df1\u770b\u60c5\u51b5\u4f7f\u7528\uff08\u4e0d\u8fc7\u6b64\u9898SLF\u5c31\u8fc7\u4e86\uff09\u3002\n\n\u4e0b\u6765\u8d34\u4ee3\u7801\uff1a( \u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u53ef\u4ee5\u6765\u770b\u770b\u6211\u7684\u535a\u5ba2\uff1a<http://blog.csdn.net/stone41123/article/details/74157231> )\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2100000000\nusing namespace std;\nstruct edge{\n    int to,next,w;\n}e[400001];\nint m,n,s,a,b,tot=0;\nint d[100001];\nint head[100001];\nint in[100001];\nvoid addedge(int x,int y,int l){\n    tot++;\n    e[tot].to=y;\n    e[tot].w=l;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\ndeque<int> q;\nvoid spfa(int st){\n    memset(in,0,sizeof(in));\n    memset(d,127,sizeof(d));\n    d[st]=0;\n    in[st]=1;\n    q.push_front(st);\n    while(!q.empty()){\n        int k=q.front();\n        q.pop_front();\n        in[k]=0;\n        for(int i=head[k];i!=0;i=e[i].next){\n            if(d[k]+e[i].w<d[e[i].to]){\n                d[e[i].to]=d[k]+e[i].w;\n                if(!in[e[i].to]){\n                    if(!q.empty()&&d[e[i].to]<d[q.front()]){\n                        q.push_front(e[i].to);\n                    }\n                    else{\n                        q.push_back(e[i].to);\n                    }\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>m>>n>>s>>a>>b;\n    for(int i=1;i<=m;i++){\n        int x,y,l;\n        scanf(\"%d %d %d\",&x,&y,&l);\n        addedge(x,y,l);\n        addedge(y,x,l);\n    }\n    int ans1=0;\n    int ans2=0;\n    spfa(a);\n    ans1+=d[b]+d[s];\n    spfa(b);\n    ans2+=d[a]+d[s];\n    int ans=min(ans1,ans2);\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1499000517,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u4e3a\u5565\u667a\u9893\u603b\u662f\u7ed9\u6211\u63a8\u6076\u8bc4\u5462\u2026\u2026\n\n---\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a $P$ \u4e2a\u8282\u70b9\uff0c $C$ \u6761\u8fb9\u7684\u56fe\uff0c\u8981\u6c42\u4e00\u6761\u6700\u77ed\u8def\u5f84\u4ece $PB$ \u51fa\u53d1\uff0c\u8def\u5f84\u4e0a\u5fc5\u987b\u7ecf\u8fc7 $PA_1$ \u4e0e $PA_2$ \u4e24\u4e2a\u8282\u70b9\u3002\n\n### \u9898\u76ee\u89e3\u6790\n\n\u4e00\u9053\u6700\u77ed\u8def\u7684\u677f\u9898\uff0c\u8fd9\u91cc\u7528\u7684\u5806\u4f18 + Dij\uff0c\u53ea\u9700\u8981\u6c42 $dis(PA_1,PA_2) + min(dis(PB,PA_1),dis(PB,PA_2))$  \u5373\u53ef\u3002\n\n\u56e0\u4e3a\u663e\u7136\u53ea\u6709\u5148\u8d70\u7b2c\u4e00\u4e2a\u518d\u4ece\u7b2c\u4e00\u4e2a\u8d70\u7b2c\u4e8c\u4e2a\u6216\u8005\u53cd\u8fc7\u6765\u8fd9\u4e24\u79cd\u8d70\u6cd5\uff0c\u90a3\u4e48\u4ee3\u7801\u4e5f\u5c31\u5f88\u597d\u5199\u4e86\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n#define MAX_N 100010\nconst int inf = 0x3f3f3f3f;\nstruct graph{\n    vector<int> next;\n    vector<int> nextw;\n}node[MAX_N];\nint dis[MAX_N],n,m,s;\nbool vis[MAX_N];\nvoid dijkstra(int v){\n    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n    q.push(make_pair(0,v));\n    for(int i = 1;i <= n;i++)\n       dis[i] = inf,vis[i] = 0;\n    dis[v] = 0;\n    while(!q.empty()){\n        int u = q.top().second;\n        q.pop();\n        if(vis[u] == 1) \n           continue;\n        vis[u] = 1;\n        for(int i = 0;i < node[u].next.size();i++){\n            if(dis[node[u].next[i]] > dis[u] + node[u].nextw[i]){\n                dis[node[u].next[i]] = dis[u] + node[u].nextw[i];\n                q.push(make_pair(dis[node[u].next[i]],node[u].next[i]));\n            }\n        }\n    }\n}\nint main(){\n    int a,b;\n    cin >> m >> n >> s >> a >> b;\n    for(int i = 1;i <= m;i++){\n        int x,y,z;\n        cin >> x >> y >> z;\n        node[x].next.push_back(y);\n        node[x].nextw.push_back(z);\n        node[y].next.push_back(x);\n        node[y].nextw.push_back(z);\n    }\n    dijkstra(a);\n    int ans = dis[b];\n    dijkstra(s);\n    cout << ans + min(dis[a],dis[b]) << endl;\n    return 0;\n}\n```\n",
        "postTime": 1621134287,
        "uid": 355559,
        "name": "FutureThx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\n\n# Dij+\u5806\u4f18\u5316+\u5206\u7c7b\u8ba8\u8bba\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff0c\u5c0f\u725b~~\u5996~~\u8981\u5230\u8fbe\u4e24\u4e2a\u7267\u573a\uff0c\u95ee\u6700\u77ed\u8def\u662f\u591a\u5c11\u3002\u5982\u679c\u76f4\u63a5\u7528\u88f8\u7684dij\u4f1aTLE\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5e94\u8be5\u7528dij+\u5806\u4f18\u5316\uff0c\u6211\u4eec\u6240\u719f\u6089\u7684\u6700\u77ed\u8def\u4e00\u822c\u53ea\u6709\u4e00\u4e2a\u76ee\u6807\u8282\u70b9\uff0c\u8fd9\u9898\u6709\u4e24\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\n\np1:\u51fa\u53d1\u70b9\n\np2:\u76ee\u68071\n\np3:\u76ee\u68072\n\n\u5219\u53ef\u4ee5\u63a8\u51fa\u4e09\u79cd\u8def\u7ebf\n\n1.p1->p2\n\n2.p2->p3\n\n3.p1->p3\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e24\u904ddij\u4e00\u6b21\u4ecep1\u51fa\u53d1\uff0ch[1][2]\u8868\u793ap1->p2,h[1][3]\u8868\u793ap1->p3,\u7b2c\u4e8c\u6b21\u4ecep2\u51fa\u53d1\uff0ch[2][3]\u8868\u793ap2->p3\uff0c\u6700\u540e\u5728\u53d6h[1][2],h[1][3]\u7684\u6700\u5c0f\u503c\u518d\u52a0\u4e0ah[2][3]\uff0c\u8fd8\u8981\u8bb0\u4f4f\u6570\u7ec4\u5f00\u5927\u70b9\uff01\n\n\u601d\u8def\u5982\u4e0a\n\n\u6765\u5230\u4ee3\u7801\u90e8\u5206\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<iomanip>\n#include<bits/stdc++.h>\nusing namespace std;\nint const maxn=200000+10;\nint n,m,num,v[maxn],p1,p2,p3;\nint h[5][5];\nlong long d[maxn],head[maxn*2],a,b,c,ans;\npriority_queue<pair<int,int> > q;\nstruct Edge\n{\n\tint to,next;\n\tlong long cost;\n}edge[maxn*2];\nvoid add_edge(int from,int to,long long cost)\n{\n\tnum++;\n\tedge[num].to=to;\n\tedge[num].cost=cost;\n\tedge[num].next=head[from];\n\thead[from]=num;\n}\nvoid dijkstra(int s)\n{\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\td[s]=0;\n\tq.push(make_pair(0,s));\n\twhile(q.size())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif(v[u]) continue;\n\t\tv[u]=1;\n\t\tfor(int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tint cost=edge[i].cost;\n\t\t\tif(d[to]>d[u]+cost)\n\t\t\t{\n\t\t\t\td[to]=d[u]+cost;\n\t\t\t\tq.push(make_pair(-d[to],to));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>m>>n>>p1>>p2>>p3;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\tadd_edge(a,b,c);\n\t\tadd_edge(b,a,c);\n\t}\n\t//1:p1,2:p2,3:p3\n\tdijkstra(p1);\n\th[1][2]=d[p2];\n\th[1][3]=d[p3];\n\tdijkstra(p2);\n\th[2][1]=d[p1];\n\th[2][3]=d[p3];\n\tans=min(h[1][2],h[1][3])+h[2][3];\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\u9898\u89e3\u5230\u8fd9\u91cc\u6765\u5230\u4e86\u5c3e\u58f0\uff0c\u6700\u540e\u672c\u4eba\u63d0\u4f9b\u4e00\u9053\u601d\u8def\u5dee\u4e0d\u591a\u7684\u9898\u76ee\uff0c\u662f\u8fd9\u9053\u9898\u7684\u5347\u7ea7\u7248\uff0c\u4e5f\u7528dij\u52a0\u5806\u4f18\u5316\uff0c\u9644\u4e0a\u8fde\u63a5(\u66f4\u591a\u4f18\u8d28\u9898\u89e3\u656c\u8bf7\u5173\u6ce8\u4e2a\u4eba\u535a\u5ba2[\u4e2a\u4eba\u535a\u5ba2](https://www.luogu.org/blog/173239/))\n\n[P4943 \u5bc6\u5ba4](https://www.luogu.org/problem/P4943)\n\n\u671b\u7ba1\u7406\u5927\u5927\u901a\u8fc7",
        "postTime": 1569647035,
        "uid": 173239,
        "name": "\u9ec4\u6c5d\u9e4f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff0c\u5982\u6709\u9519\u8bef\u8bf7\u6307\u51fa\u3002\n\n\u8fd9\u9053\u9898\u76ee\u62ff\u5230\u6700\u4f18\u89e3\u6709\u4e00\u70b9\u96be\u5ea6\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u4e00\u9053\u6a21\u677f\u9898\u3002\n\n\u6309\u7167\u9898\u610f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u672c\u8d28\u5c31\u662f\u4ece\u56fa\u5b9a\u7684\u70b9\u5f00\u59cb\u8fdb\u884c\u6700\u77ed\u8def\u641c\u7d22\uff0c\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u60f3\u5230\u4e86\u7528 `Dijskra` \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u53ef\u80fd\u6709\u4e9b\u5927\u4f6c\u7ecf\u8fc7\u7cbe\u5bc6\u7684\u8ba1\u7b97\u53ef\u4ee5\u53d1\u73b0\u7528\u4e24\u6b21 `Dijskra` \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u662f\u5176\u5b9e\u7528\u4e09\u6b21 `Dijskra` \u5c31\u53ef\u4ee5\u8fc7\u3002\n\n\u9996\u5148\u9700\u8981\u90bb\u63a5\u8868\u7684\u4ee3\u7801\uff1a\n```cpp\ninline void add(long long x,long long y,long long z){\n\tw[++tot]=z;\n\tson[tot]=y;\n\tnxt[tot]=fir[x];\n\tfir[x]=tot;\n}\n```\n\n\n\u5148\u4e0a `Dijskra` \u7684\u6a21\u677f\u4ee3\u7801\uff1a\n```cpp\ninline void Dijstra(long long s,long long opt){\n\tmemset(vis,false,sizeof(vis));\n\tdis[opt][s]=0;\n\tcnt=0;\n\twhile(!q.empty()) q.pop();\n\tq.push((data){0,s});\n\twhile(cnt<p&&!q.empty()){\n\t\ttem1=q.top().dis,tem2=q.top().num;\n\t\tq.pop();\n\t\tif(vis[tem2]) continue ;\n\t\tvis[tem2]=true ;\n\t\tfor(long long i=fir[tem2];i;i=nxt[i]){\n\t\t\tif(vis[son[i]]) continue ;\n\t\t\tif(dis[opt][son[i]]>tem1+w[i]){\n\t\t\t\tdis[opt][son[i]]=tem1+w[i];\n\t\t\t\tq.push((data){dis[opt][son[i]],son[i]});\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u8fd9\u91cc\u6211\u52a0\u4e0a\u4e86\u5806\u4f18\u5316\uff0c\u53ef\u4ee5\u52a0\u5feb\u901f\u5ea6\u3002\n\n\u7ed3\u5c3e\u6211\u4eec\u52a0\u4e0a\u4e09\u6b21 `Dijskra`\uff0c\u5c31\u53ef\u4ee5\u5706\u6ee1\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u6211\u7528\u4e86\u4e00\u4e2a `opt` \u6765\u50a8\u5b58\u6b21\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u4e86\uff0c\u8fd9\u6837\u76f4\u63a5\u8c03\u7528\u4e09\u6b21 `Dijskra` \u5c31\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u6700\u540e\u7ed9\u5927\u5bb6\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long tem1,tem2,cnt,c,p,pb,pa1,pa2,x,y,z,fir[500005],nxt[500005],son[500005],w[500005],tot,dis[5][200005];\nstruct data{\n\tlong long dis,num;\n\tfriend bool operator > (data x,data y){\n\t\treturn x.dis>y.dis;\n\t}\n};\npriority_queue<data, vector<data >, greater<data > > q;\nbool vis[200005];\ninline void read(long long &res){\n\tres=0;long long f=1;char ch=getchar();\n\twhile('0'>ch||ch>'9'){\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile('0'<=ch&&ch<='9'){\n\t\tres=(res<<1)+(res<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\tres=res*f;\n}\ninline void put(long long x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) put(x/10);\n\tputchar((x%10)^48);\n}\ninline void add(long long x,long long y,long long z){\n\tw[++tot]=z;\n\tson[tot]=y;\n\tnxt[tot]=fir[x];\n\tfir[x]=tot;\n}\ninline void Dijstra(long long s,long long opt){\n\tmemset(vis,false,sizeof(vis));\n\tdis[opt][s]=0;\n\tcnt=0;\n\twhile(!q.empty()) q.pop();\n\tq.push((data){0,s});\n\twhile(cnt<p&&!q.empty()){\n\t\ttem1=q.top().dis,tem2=q.top().num;\n\t\tq.pop();\n\t\tif(vis[tem2]) continue ;\n\t\tvis[tem2]=true ;\n\t\tfor(long long i=fir[tem2];i;i=nxt[i]){\n\t\t\tif(vis[son[i]]) continue ;\n\t\t\tif(dis[opt][son[i]]>tem1+w[i]){\n\t\t\t\tdis[opt][son[i]]=tem1+w[i];\n\t\t\t\tq.push((data){dis[opt][son[i]],son[i]});\n\t\t\t}\n\t\t}\n\t}\n}\ninline long long min(long long x,long long y){\n\treturn x<y?x:y;\n}\nint main(){\n\tmemset(dis,127,sizeof(dis));\n\tread(c),read(p),read(pb),read(pa1),read(pa2);\n\tfor(long long i=1;i<=c;i++){\n\t\tread(x),read(y),read(z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tDijstra(pb,0),Dijstra(pa1,1),Dijstra(pa2,2);\n\tput(min(dis[0][pa1]+dis[1][pa2],dis[0][pa2]+dis[2][pa1]));\n\treturn 0;\n}\n```\n",
        "postTime": 1666673047,
        "uid": 461359,
        "name": "huangrenheluogu",
        "ccfLevel": 5,
        "title": "P3003\u9898\u89e3"
    },
    {
        "content": "# P3003 [USACO10DEC]Apple Delivery S\u9898\u89e3\n\n## \u524d\u8a00\uff1a\n\n\u751f\u65e5\u524d\u53d1\u4e86\u4e2a\u9898\u89e3\uff0c\u987a\u5e26\u5199\u4e86\u4e24\u9898 P2006\uff0cP1227\uff0c\u5f53\u505a\u81ea\u5df1\u7684\u751f\u65e5\u793c\u7269\u4e86\u3002\n\n## \u9898\u610f\uff1a\n\nn \u4e2a\u70b9\uff0cm \u6761\u8fb9\uff0c1 \u4e2a\u8d77\u70b9\uff0c2 \u4e2a\u7ec8\u70b9\uff0c\u6c42\u4ece\u8d77\u70b9\u5f00\u59cb\uff0c\u8981\u6c42\u7ecf\u8fc7\u4e24\u4e2a\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n## \u601d\u8def\uff1a\n\n\u8fd9\u6709\u84dd\u9898\uff1f\u8fd9\u9898\u6015\u4e0d\u662f\u6bd4 [P6833](https://www.luogu.com.cn/problem/P6833) \u8fd8\u7b80\u5355\uff1f\n\n\u601d\u8def\u5728\u4f60\u5316\u7b80\u5b8c\u9898\u610f\u540e\u5c31\u5f88\u6e05\u6670\u4e86\uff0c\u7528 dijkstra\uff0c\u53ea\u8981\u6c42 $\\min(dis_{s, f1} + dis_{f1, f2}, dis_{s, f2} + dis_{f2, f1})$ \u5373\u53ef\u3002\n\n\u90a3\u4e48\u7531\u4e8e\u8fd9\u4e2a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5 $dis_{f1, f2}$ \u4e0e $dis_{f2, f1}$ \u662f\u7b49\u4ef7\u7684\u3002\n\n\u5373 $ans = \\min(dis_{s, f1}, dis_{s, f2}) + dis_{f1, f2}$\u3002\n\n\u8dd1\u6700\u77ed\u8def\u53bb\u5427\u3002\n\n## \u7ec6\u8282\uff1a\n\n1.n \u548c m \u522b\u8f93\u5165\u53cd\u4e86\uff0c\u8840\u6cea\u6559\u8bad\uff01\uff01\uff01\n\n2.\u6ce8\u610f\u8981\u5806\u4f18\u5316\u3002\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n\n#define inf 0x3f3f3f3f\n\nusing namespace std;\n\nconst int N = 1e5 + 7;\nconst int M = 2e5 + 7;\n\nstruct Edge {\n\tint to, next, w;\n} edge[M << 1];\n\nint head[N], cnt;\n\nint n, m, s, f1, f2;\n\nstruct node {\n\tint x, id;\n};\n\nstruct HEAP {\n\tnode heap[N << 2 | 1];\n\tint sz;\n\t\n\tinline bool empty() {\n\t\treturn sz == 0;\n\t}\n\t\n\tinline node top() {\n\t\treturn heap[1];\n\t}\n\t\n\tinline void push(node a) {\n\t\tint now = ++ sz;\n\t\t\n\t\theap[now].x = a.x, heap[now].id = a.id;\n\t\t\n\t\twhile (now != 1) {\n\t\t\tint fa = now >> 1;\n\t\t\t\n\t\t\tif (heap[fa].x > heap[now].x)\n\t\t\t\tswap(heap[fa], heap[now]);\n\t\t\telse break;\n\t\t\t\n\t\t\tnow = fa;\n\t\t} \n\t\t\n\t\treturn ;\n\t}\n\t\n\tinline void pop() {\n\t\tswap(heap[1], heap[sz]);\n\t\t\n\t\tsz --;\n\t\t\n\t\tint now = 1;\n\t\t\n\t\twhile (now << 1 <= sz) {\n\t\t\tint son = now << 1;\n\t\t\t\n\t\t\tif (son + 1 <= sz && heap[son].x > heap[son + 1].x) son ++;\n\t\t\t\n\t\t\tif (heap[son].x < heap[now].x)\n\t\t\t\tswap(heap[son], heap[now]);\n\t\t\telse break;\n\t\t\t\n\t\t\tnow = son;\n\t\t}\n\t\t\n\t\treturn ;\n\t} \n} Heap;\n\nint dis[N];\n\nbool flag[N];\n\nint ans;\n\ninline int mina(int a, int b) {\n\tif (a < b)\n\t\treturn a;\n\treturn b;\n}\n\ninline void addedge(int u, int v, int w) {\n\tedge[++ cnt] = (Edge){v, head[u], w};\n\thead[u] = cnt;\n}\n\ninline void dijkstra(int b) {\n\tmemset(dis, inf, sizeof(dis));\n\tmemset(flag, 0, sizeof(flag));\n\t\n\tdis[b] = 0;\n\t\n\tHeap.push((node) {dis[b], b});\n\t\n\twhile (! Heap.empty()) {\n\t\tint k = Heap.top().id;\n\t\t\n\t\tHeap.pop();\n\t\t\n\t\tif (flag[k]) continue;\n\t\t\n\t\tflag[k] = 1;\n\t\t\n\t\tfor (int i = head[k]; ~i; i = edge[i].next) {\n\t\t\tint v = edge[i].to;\n\t\t\t\n\t\t\tif (dis[v] > dis[k] + edge[i].w) {\n\t\t\t\tdis[v] = dis[k] + edge[i].w;\n\t\t\t\tHeap.push((node) {dis[v], v});\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/*cout << b << endl;\n    for (int i = 1; i <= n; i ++)\n    \tcout << dis[i] << \" \";\n    cout << endl;*/\n}\n\nint main() {\n\tmemset(head, -1, sizeof(head));\n\t\n\tscanf(\"%d %d %d %d %d\", &m, &n, &s, &f1, &f2);\n\t\n\tfor (int i = 1; i <= m; i ++) {\n\t\tint u, v, w;\n\t\t\n\t\tscanf(\"%d %d %d\", &u, &v, &w);\n\t\t\n\t\taddedge(u, v, w);\n\t\taddedge(v, u, w); \n\t}\n\t\n\tdijkstra(f1);\n\t\n\tans += dis[f2];\n\t\n\tdijkstra(s);\n\t\n\tans += mina(dis[f1], dis[f2]);\n\t\n\tprintf(\"%d\\n\", ans);\n\t\n\treturn 0;\n}\n```\n\n## \u540e\u8bb0\uff1a\n\n1.\u5efa\u8bae\u8fd9\u9898\u8bc4\u9ec4\u8272\u3002\n\n2.skyyyr\u540c\u5b66\uff1a\n\n\u751f\u65e5\u5feb\u4e50\uff0c\u8bf7\u4f60\u7ee7\u7eed\u52a0\u6cb9\uff0c\u4e89\u53d6\u5728\u660e\u5e74\u62ff\u5230 TG1=\u3002\n\n\u660e\u5e74\uff0c\u4f60\u5c31\u9ad8\u4e00\u4e86\uff0c\u522b\u8ba9\u6211\u4eec\u5931\u671b\u3002\n\n$Atlantis.$",
        "postTime": 1640523034,
        "uid": 328170,
        "name": "Kalium",
        "ccfLevel": 0,
        "title": "P3003 [USACO10DEC]Apple Delivery S\u9898\u89e3"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u7b2c\u591a\u5c11\u7bc7\u6700\u77ed\u8def\u9898\u89e3\u4e86\u2026\u2026  \n\n\n------------\n\u73b0\u5728\u770b\u5230\u8fd9\u79cd\u9898\u53ef\u4ee5\u76f4\u63a5\u65e0\u8111 Dijkstra \u4e86\uff0c\u6bd5\u7adf\u5728\u8fd9\u79cd\u6ca1\u6709\u8d1f\u73af\u7684\u9898\u91cc SPFA \u6ca1\u5565\u597d\u5904 ~~\uff0c\u6398\u5893\u97ad\u5c38\u4e5f\u4e0d\u592a\u9053\u5fb7\u554a~~\u3002  \n\n\n------------\n\u5927\u90e8\u5206\u540c\u5b66\u5bf9 Dijkstra \u656c\u800c\u8fdc\u4e4b\u7684\u4e3b\u8981\u539f\u56e0\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d\u90e8\u5206\u7684\u95ee\u9898\uff0c\u4ee5\u4e0b\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d\u7684\u4ee3\u7801\uff1a\n```cpp\nbool operator < (const node &that) const {\n\treturn dis>/*\u8fd9\u91cc\u5c31\u662f\u5927\u4e8e\u53f7*/that.dis;\n}\n```\n------------\n\u8865\u5145\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u9700\u8981\u8fdb\u884c\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4ee3\u7801\u4e2d\u7684\u7b2c 2 \u884c\u4f7f\u7528\u4e86\u5927\u4e8e\u53f7\uff1a  \n\u6b64\u5904\u7684 Dijkstra \u4f7f\u7528\u4e86\u4f18\u5148\u961f\u5217\uff0c\u800c\u4f18\u5148\u961f\u5217\u9ed8\u8ba4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff08\u6700\u5927\u7684\u5143\u7d20\u6700\u5148\u51fa\u961f\uff09\u5e76\u4f7f\u7528\u5c0f\u4e8e\u53f7 `<` \u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u91cd\u8f7d\u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff08\u7ed3\u6784\u4f53\u6ca1\u6709\u81ea\u5e26\u7684\u6bd4\u8f83\u65b9\u5f0f\uff09\uff0c\u5e76\u4e14\u4e3a\u4e86\u5b9e\u73b0 Dijkstra\u201c\u6570\u503c\u8f83\u5c0f\u7684\u5143\u7d20\u5148\u51fa\u961f\u201d\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u53cd\u8fc7\u6765\u3002  \n\u4e8b\u5b9e\u4e0a\u8fd8\u6709\u4e24\u79cd\u5199\u6cd5\uff1a  \n### \u5f3a\u8feb\u75c7\u65b9\u6cd5\n\u9996\u5148\u6b63\u5e38\u91cd\u8f7d\u4e00\u4e2a\u5927\u4e8e\u53f7\uff1a\n```cpp\nbool operator > (const node &that) const {\n\treturn dis>that.dis;\n}\n```  \n\u7136\u540e\u5f00\u4f18\u5148\u961f\u5217\u7684\u65f6\u5019\u8fd9\u4e48\u5199\uff1a  \n```cpp\npriority_queue<node,vector<node>,greater<node> >;\n```\n\u5c31\u884c\u4e86\uff0c\u6548\u679c\u4e00\u6837\uff08\u4f7f\u7528\u4e86\u4f18\u5148\u961f\u5217\u7684\u53e6\u4e00\u79cd\u6392\u5e8f\u65b9\u5f0f\uff09\u3002  \n\u6211\u79f0\u5176\u4e3a\u5f3a\u8feb\u75c7\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6b64\u5904\u7684\u5927\u4e8e\u53f7\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u201c\u5927\u4e8e\u201d\u3002\n### `pair` \u5199\u6cd5\nSTL \u5927\u6cd5\u597d\u3002\u5173\u4e8e\u8fd9\u79cd\u5199\u6cd5\u53ef\u4ee5\u81ea\u5df1\u53bb\u67e5\u6587\u6863\u3002\n\n------------\n\n\u63a5\u4e0b\u6765\u662f\u9898\u76ee\u7684\u4e3b\u4f53\uff1a  \n+ \u663e\u7136\uff0c\u9898\u76ee\u4e2d Bessie \u8d70\u8fc7\u7684\u8def\u5f84\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e24\u6bb5\uff08PB \u5230 PA1/PA2 \u548c PA1/PA2 \u5230 PA2/PA1\uff09  \n+ \u6700\u4f18\u79c0\u65b9\u6848\u4e2d Bessie \u9700\u8981\u8d70\u8fc7\u7684\u8ddd\u79bb\u4e3a  \n$$\\min [\\textrm{dist(PB, PA1)},\\textrm{dist(PB, PA2)}] + \\textrm{dist(PA1, PA2)}$$\n$\\color{silver}\\tiny\\text{*\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0cPA1 \u548c PA2 \u7684\u8ddd\u79bb\u53ea\u9700\u8981\u6c42\u4e00\u6b21\uff0c\u4e0d\u5b58\u5728\u4e24\u4e2a\u65b9\u5411\u8ddd\u79bb\u4e0d\u540c\u7684\u95ee\u9898}$    \n+ \u5176\u4e2d $\\min$ \u4e2d\u7684\u4e24\u9879\u53ef\u4ee5\u7528\u4efb\u610f\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\uff08\u4e0d\u8003\u8651\u590d\u6742\u5ea6\u60c5\u51b5\u4e0b\uff0c\u672c\u9898\u4e2d\u4f7f\u7528 Dijkstra\uff09\u4e00\u6b21\u6c42\u51fa\uff0cPA1 \u548c PA2 \u7684\u8ddd\u79bb\u4e5f\u53ef\u4ee5\u5982\u6b64\u5f97\u51fa\n\n\u77e5\u9053\u4e86\u8fd9\u4e9b\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4ee3\u7801\u4e86\uff1a  \n$\\color{silver}\\tiny\\text{*\u697c\u4e3b\u8fd8\u662f\u63a8\u8350\u5927\u5bb6\u81ea\u5df1\u5199\u5199\uff0c\u6bd5\u7adf\u8fd9\u9898\u5b9e\u5728\u662f\u592a\u6c34\u4e86\u2026\u2026}$   \n```cpp\n//Luogu-P3003\n//Luogu @Enterpr1se (Userid 363523)\n//@_Qijia(Userid 363524) AK IOI!\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define regint register int\n#define regshort register short\n#define _Qijia using\n#define AK namespace\n#define IOI std\n_Qijia AK IOI;\nint p,c,pb,pa1,pa2,ecnt,last[100005],ans1,dist[100005],flag[100005],u,v,w;\nint min(int a,int b){\n\treturn a<b?a:b;\n}\nstruct node{//Dijkstra \u6240\u4f7f\u7528\u7684\u7ed3\u6784\u4f53 \n\tint id,dis;\n\tbool operator < (const node &that) const {\n\t\treturn dis>that.dis;\n\t}\n};\nstruct edge{//\u94fe\u5f0f\u524d\u5411\u661f\n\tint to,val,prev;\n} fig[400005];\ninline void add(int s,int e,int v){//\u94fe\u5f0f\u524d\u5411\u661f\uff08\u52a0\u8fb9\uff09 \n\t++ecnt;\n\tfig[ecnt]={e,v,last[s]};\n\tlast[s]=ecnt;\n\t++ecnt;\n\tfig[ecnt]={s,v,last[e]};\n\tlast[e]=ecnt;\n\treturn;\n}\ninline void Dijkstra(int stt/*\u8d77\u70b9*/){//Dijkstra \u6a21\u677f\n\t//\u5f00\u53d8\u91cf\uff0c\u521d\u59cb\u5316 \n\tnode curr,targ;\n\tpriority_queue<node> qu;\n\tmemset(flag,false,sizeof(flag));\n\tmemset(dist,0x3f,sizeof(dist));\n\tdist[stt]=0;\n\tqu.push({stt,0});\n\t\n\twhile(qu.size()){\n\t\tcurr=qu.top();\n\t\tqu.pop();\n\t\tflag[curr.id]=true;//\u6ce8\u610f Dijkstra \u662f\u51fa\u961f\u6253\u6807\u8bb0\uff08SPFA \u662f\u8fdb\u961f\u6253\uff09 \n\t\tfor(regint i=last[curr.id];i;i=fig[i].prev){\n\t\t\ttarg={fig[i].to,dist[curr.id]+fig[i].val};\n\t\t\tif(flag[targ.id]) continue;\n\t\t\tif(dist[targ.id]>targ.dis){\n\t\t\t\tdist[targ.id]=targ.dis;\n\t\t\t\tqu.push(targ);\n\t\t\t}\n\t\t}\t\n\t}\n\treturn;\n}\nint main(){\n\tscanf(\"%d%d%d%d%d\",&c,&p,&pb,&pa1,&pa2);\n\tfor(regint i=1;i<=c;++i)\n\t\tscanf(\"%d%d%d\",&u,&v,&w),add(u,v,w);\n\tDijkstra(pb);//\u4ee5 PB \u4e3a\u8d77\u70b9\u505a\u5355\u6e90\u6700\u77ed\u8def \n\tif(dist[pa1]<dist[pa2]){//\u82e5 PA1 \u66f4\u8fd1\uff0cLn64 \n\t\tans1=dist[pa1];//\u4fdd\u5b58 PB \u5230 PA1 \u7684\u8ddd\u79bb \n\t\tDijkstra(pa1);//\u4ee5 PA1 \u4e3a\u8d77\u70b9\u505a\u5355\u6e90\u6700\u77ed\u8def\uff08\u6c42 PA1 \u548c PA2 \u4e4b\u95f4\u7684\u8ddd\u79bb\uff09 \n\t\tprintf(\"%d\",ans1+dist[pa2]);\n\t}\n\telse{//\u82e5 PA2 \u66f4\u8fd1 \n\t\tans1=dist[pa2];//\u4fdd\u5b58 PB \u5230 PA2 \u7684\u8ddd\u79bb \n\t\tDijkstra(pa2);//\u4ee5 PA2 \u4e3a\u8d77\u70b9\u505a\u5355\u6e90\u6700\u77ed\u8def\uff08\u6c42 PA2 \u548c PA1 \u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n\t\tprintf(\"%d\",ans1+dist[pa1]);\n\t}//Ln73\n\treturn 0;\n}\n```  \n\u8865\u5145\u8bf4\u660e\uff1a  \n\u7531\u4e8e\u5728\u6c42\u51fa PB \u5230 PA1/PA2 \u4e2d\u8fd1\u8005\u7684\u8ddd\u79bb\u540e\u8981\u6c42\u7684\u53ea\u662f PA1 \u548c PA2 \u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u65e0\u5411\u56fe\uff0cPA1 \u5230 PA2 \u7684\u8ddd\u79bb\u548c PA2 \u5230 PA1 \u7684\u8ddd\u79bb\u59cb\u7ec8\u76f8\u7b49\uff09\uff0c\u672c\u7a0b\u5e8f\u7684 Ln64 \u5230 Ln73 \u90e8\u5206\u8fd8\u6709\u53e6\u4e00\u79cd\u5199\u6cd5\uff1a  \n```cpp\nans1=min(dist[pa1],dist[pa2]);\nDijkstra(pa1);\nprintf(\"%d\",ans1+dist[pa2]);\n```  \n\uff08\u8fd9\u79cd\u505a\u6cd5\u660e\u663e\u66f4\u7b80\u6d01\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u903c\u6b7b\u5f3a\u8feb\u75c7  \n$\\mathtt{Thanks}\\text{ }\\mathtt{for}\\text{ }\\mathtt{reading.}\\text{ }$",
        "postTime": 1627959602,
        "uid": 363523,
        "name": "Enterpr1se",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3003 \u3010Apple Delivery\u3011\uff0cUSACO 2010 Dec - Silver"
    },
    {
        "content": "## Description\n\n\u4e00\u4e2a $n$ \u4e2a\u9876\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u56fe\uff0c\u4ece $s$ \u70b9\u51fa\u53d1\uff0c\u5230 $A,B$ \u4e24\u70b9\uff0c\u6c42\u4ece $s \\to A \\to B$ \u5c0f\u8fd8\u662f $s \\to B \\to A$ \u5c0f\u3002\n\n$1 \\leq n \\leq 10 ^ 5,1 \\leq m \\leq 2 \\times 10 ^ 5$\u3002\n\n\u8bdd\u8bf4\u8fd9\u4e2a\u9898\u76ee\u662f\u6076\u8bc4\u5427\uff0c\u8dd1\u51e0\u904d\u6700\u77ed\u8def\u5c31\u51fa\u6765\u4e86\u3002\n\n\u8fd9\u8fb9\u5efa\u8bae\u4f60\u5199 $Dijkstra$\uff0c\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u7528 $spfa$ \u88ab\u5361\u4e86\uff0c\u8fd8\u52a0\u4e86\u4e2a\u4f18\u5316\u624d\u8fc7\u3002\n\n## Solution\n\n\u9996\u5148\u5206\u522b\u6c42\u51fa $s \\to A$\uff0c$s \\to B$\uff0c$A \\to B$\uff0c$B \\to A$ \u7684\u6700\u77ed\u8def\u3002\n\n\u5206\u522b\u8bbe\u4e3a $M_1,M_2,M_3,M_4$\u3002\n\n\u4e4b\u540e\u5224\u65ad $M_1 + M_3$ \u548c $M_2 + M_4$ \u53d6\u5c0f\u7684\u90a3\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff0c\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u53ef\u80fd\u53d8\u91cf\u4e0e\u4ee3\u7801\u4e2d\u7684\u4e0d\u76f8\u540c\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int Maxk = 400050;\nint n,m,s,e1,e2;\nint M1,M2,M3,M4,M5;\nstruct Node{\n  int to,dis;\n};\nint w[Maxk],f[Maxk];\nvector <Node> e[Maxk];\ndeque <int> qp;\ninline int read()\n{\n\tint s = 0, f = 0;char ch = getchar();\n\twhile (!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\nvoid spfa(int x)\n{\n  while(qp.size()) qp.pop_front();\n  memset(w,INF,sizeof w);\n  memset(f,0,sizeof f);\n  qp.push_front(x);\n  f[x] = 1;\n  w[x] = 0;\n  while(!qp.empty()) {\n    int now = qp.front();\n    qp.pop_front();\n    f[now] = 0;\n    for(int i = 0;i < e[now].size();i ++) {\n      int y = e[now][i].to;\n      if(w[y] > w[now] + e[now][i].dis) {\n        w[y] = w[now] + e[now][i].dis;\n        if(!f[y]) {\n          f[y] = 1;\n          if(qp.empty()) {\n            qp.push_front(y);\n            continue;\n          }\n          int num = qp.front();\n          if(w[y] < w[num]) qp.push_front(y);\n          else qp.push_back(y);\n        }\n      }\n    }\n  }\n  return;\n}\nsigned main()\n{\n  scanf(\"%d%d%d%d%d\",&m,&n,&s,&e1,&e2);\n  for(int i = 1;i <= m;i ++) {\n    int x = read(),y = read(),z = read();\n    e[x].push_back((Node){y,z});\n    e[y].push_back((Node){x,z});\n  }\n  spfa(s);\n  M1 = w[e1],M2 = w[e2];\n  spfa(e1);\n  M3 = w[e2];\n  spfa(e2);\n  M4 = w[e1];\n  int Ans = 0;\n  //cout << M1 << \" \" << M2 << \" \" << M3 << \" \" << M4 << endl;\n  Ans = (M1 + M3 < M2 + M4 ? M1 + M3 : M2 + M4);\n  cout << Ans << endl;\n  return 0;  \n}\n\n\n```",
        "postTime": 1621172557,
        "uid": 381904,
        "name": "\u659c\u63fd\u6b8b\u7bab",
        "ccfLevel": 6,
        "title": "\u3010P3003 [USACO10DEC]Apple Delivery S\u3011\u9898\u89e3"
    },
    {
        "content": "## $\\text{Solution of Dijkstra algorithm} $\n\n\u672c\u9898\u662f\u4e00\u4e2a\u88f8\u7684 ``Dijkstra`` \u6a21\u677f\u3002\u4eca\u5929\u6765\u7ed9\u5927\u5bb6\u8bb2\u8bb2 ``Dijkstra`` \u7b97\u6cd5\u3002\n\n\u53ef\u4ee5\u8bf4\uff0c``Dijkstra`` \u662f ``SPFA`` \u7b97\u6cd5\u7684\u4f18\u5316\u3002\u6bcf\u6b21\u5728\u961f\u5217\u4e2d\uff0c\u53d6 $ dis_x$ \u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a $x$ \u8fdb\u884c\u641c\u7d22\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u8fdb\u884c\u4f18\u5316\u3002\n\n\u4e3a\u4e86\u51cf\u5c11\u4ee3\u7801\u91cf\uff0c\u6211\u4eec\u6d3e\u4e0a\u4e86\u597d\u4e1c\u897f\u2014\u2014``pair<int,int>`` \u3002\u5b83\u53ef\u4ee5\u5b58\u50a8\u4e24\u4e2a\u6570\u503c\uff0c\u5e76\u4e14\u4e24\u4e2a ``pair`` \u76f8\u6bd4\u8f83\u7684\u65f6\u5019\u6bd4\u8f83\u7b2c\u4e00\u5173\u952e\u5b57\u3002\u6211\u4eec\u53ef\u4ee5\u628a $dis_x$ \u653e\u5728\u524d\uff0c$x$ \u653e\u5728\u540e\uff0c\u8fd9\u6837\u65b9\u4fbf\u6781\u4e86\u3002\n\n\u8bbe $\\operatorname{DIS}(sta,fin)$ \u8868\u793a\u4ece $sta$ \u5230 $fin$ \u7684\u6700\u77ed\u8def\u5f84\u548c\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a\uff1a\n\n$\\min \\{ \\operatorname{DIS}(PB,PA1)+\\operatorname{DIS}(PA_1,PA_2),\\operatorname{DIS}(PB,PA2)+\\operatorname{DIS}(PA_2,PA_1)\\}$\n\nCode:\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> P;\n#define maxn 200010\n#define mkp(a,b) make_pair(a,b)\nint m,n,u,v,w,st,st1,st2;\nstruct Edge{\n    int to,w,next;\n}edge[maxn<<1];\nint head[maxn<<1],tot;\nvoid add(int u,int v,int w){\n    tot++;\n    edge[tot].to=v;\n    edge[tot].w=w;\n    edge[tot].next=head[u];\n    head[u]=tot;\n}\nint dis[maxn],vis[maxn];\nint DIS(int sta,int fin){\n    priority_queue<P,vector<P>,greater<P> >q;\n    q.push(mkp(0,sta));\n    memset(dis,0x3f,sizeof(dis)); memset(vis,0,sizeof(vis)); dis[sta]=0;\n    while(!q.empty()){\n        int x=q.top().second;\n        q.pop();\n        if(vis[x]) continue; vis[x]=1;\n        for(register int i=head[x];i;i=edge[i].next){\n            int tmp=edge[i].to,val=edge[i].w;\n            if(dis[tmp]>dis[x]+val){\n                dis[tmp]=dis[x]+val;\n                if(!vis[tmp]) q.push(mkp(dis[tmp],tmp));\n            }\n        }\n    }\n    return dis[fin];\n}\nint minn(int a,int b){return a<b?a:b;}\nint main(){\n    scanf(\"%d%d%d%d%d\",&m,&n,&st,&st1,&st2);\n    for(register int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w); add(v,u,w);\n    }\n    printf(\"%d\\n\",minn(DIS(st,st1)+DIS(st1,st2),DIS(st,st2)+DIS(st2,st1)));\n    return 0;\n}\n```",
        "postTime": 1606305676,
        "uid": 334727,
        "name": "BreakPlus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]Apple Delivery S\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u548c\u8d77\u59cb\u70b9\uff0c\u7ec8\u70b91\u7ec8\u70b92\uff0c\u95ee\u7ecf\u8fc7\u4e24\u4e2a\u7ec8\u70b9\u7684\u8def\u5f84\u548c\u6700\u77ed\u662f\u591a\u5c11\u3002\n## \u9898\u89e3\uff1a\n\u88f8\u7684\u6700\u77ed\u8def\u95ee\u9898\u4e0d\u8bb2\u4e86\u3002\n\n\u8fd9\u9053\u9898\u5982\u679c\u7528\u88f8\u7684SPFA\u505a\u4f1aTLE\uff0c\u6240\u4ee5\u8981\u52a0\u4f18\u5316\u3002\n\n\u5982\u679c\u6709\u50cf20\u5206\u949f\u4e4b\u524d\u7684\u6211\u4e00\u6837\u5bf9SPFA\u7b97\u6cd5\u4f18\u5316\u4e00\u65e0\u6240\u77e5\u7684\u4eba\uff0c\u8bf7\u79fb\u6b65\u6211\u7684\u4e00\u7bc7\u535a\u5ba2\uff1a\n\n[\u4f18\u5316SPFA\u57fa\u7840\u77e5\u8bc6\u4f20\u9001\u95e8](https://www.cnblogs.com/fusiwei/p/11289019.html)\n\n\u4f46\u662f\u5149\u77e5\u9053\u600e\u4e48\u4f18\u5316\u662f\u4e0d\u591f\u7684\uff0c\u6211\u4eec\u8fd8\u8981\u5c31\u8fd9\u4e2a\u9898\u60f3\u4e00\u60f3\u600e\u4e48\u5199\u3002\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9898\u7684\u6e90\u70b9\u4e0d\u518d\u662f\u4e00\uff0c\u6240\u4ee5SPFA\u7684\u65f6\u5019\u8981\u4f20\u53c2\u6570\u3002\n\n\u5176\u6b21\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u8981\u6bd4\u8f83\u4e00\u4e0b\u3002\n\n\u6700\u540e\uff0c\u62cd\u4e00\u904dSPFA\u6a21\u677f\uff08SLF LLL\u4f18\u5316\u7248\u90fd\u53ef\u4ee5\uff09\uff08\u672c\u849f\u84bb\u6bd4\u8f83\u559c\u6b22SLF\uff09\uff0cAC\u3002\n\n\u6ce8\u610f\u53cc\u5411\u8fb9\u7684\u95ee\u9898\u3002\n\nCODE:\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nint m,n,s,t1,t2;\nint tot,to[400001],val[400001],nxt[400001],head[100001];\nint dist[100001],v[100001];\nvoid add(int x,int y,int z)\n{\n    to[++tot]=y;\n    val[tot]=z;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid spfa(int start)\n{\n    memset(v,0,sizeof(v));\n    memset(dist,0x3f,sizeof(dist));\n    deque<int> q;\n    dist[start]=0;\n    v[start]=1;\n    q.push_front(start);\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop_front();\n        v[x]=0;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            int y=to[i];\n            if(dist[x]+val[i]<dist[y])\n            {\n                dist[y]=dist[x]+val[i];\n                if(!v[y])\n                {\n                    if(!q.empty() && dist[y]<dist[q.front()])\n                        q.push_front(y);\n                    else\n                        q.push_back(y);\n                    v[y]=1;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d%d\",&m,&n,&s,&t1,&t2);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    int ans1=0;\n    int ans2=0;\n    spfa(t1);\n    ans1+=dist[t2]+dist[s];\n    spfa(t2);\n    ans2+=dist[t1]+dist[s];\n    int ans=min(ans1,ans2);\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1564735236,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528SPFA\u4f1a\u88ab\u5361\u8981\u4f18\u5316\uff0c\u5efa\u8bae\u7528dijstra\u5806\u4f18\u5316\uff0c\u6211\u5934\u4e00\u6b21\u4ea4SPFA\u6709\u4e24\u4e2a\u70b9TLE\u4e86\u3002\u56e0\u4e3a\u9898\u76ee\u8bf4\u7684\u4ece\u8d77\u70b9\u90012\u4e2a\u82f9\u679c\u5230PA_1\u548cPA_2\u4e24\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8dd1\u4e00\u6b21\u8d77\u70b9\u7684\u548c\u4e00\u6b21PA_1\u6216\u8005PA_2\u70b9\u7684\uff0c\u56e0\u4e3a\u56fe\u793a\u53cc\u5411\u7684\uff0c\u6240\u4ee5PA_1\u5230PA_2\u548cPA_2\u5230PA_1\u7684\u8ddd\u79bb\u662f\u76f8\u7b49\u7684\u3002\n\u8fd9\u91cc\u9644\u4e0a\u4e24\u5f20\u56fe\u7406\u89e3![\u9996\u5148\u9009\u62e9\u8d77\u70b9\u5230\u4e24\u4e2a\u82f9\u679c\u4e2d\u6700\u77ed\u7684\u90a3\u4e2a](http://ae01.alicdn.com/kf/HTB1thDXa1L2gK0jSZPh761hvXXad.png)\n\n\u56e0\u4e3a\u53f3\u8fb9\u76841+2+2<\u5de6\u8fb9\u76847\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u5148\u9001\u53bb4\n\n![\u56e0\u4e3a\u56fe\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ece1\u52304\u7684\u8ddd\u79bb\u548c\u4ece4\u52301\u7684\u8ddd\u79bb\u662f\u4e00\u6837\u7684](http://ae01.alicdn.com/kf/HTB1WwTca4D1gK0jSZFK763JrVXaI.png)\n\n\u56fe\u662f\u53cc\u5411\u7684\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u4ece1\u52304\u7684\u8ddd\u79bb\u548c\u4ece4\u52301\u7684\u8ddd\u79bb\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8dd1\u7b2c\u4e8c\u6b21\u7684\u65f6\u5019\u8d77\u70b9\u662fPA_1\u6216\u8005PA_2\u90fd\u884c\uff0c\u7ec8\u70b9\u662f\u53e6\u4e00\u4e2a\u5c31\u884c\u4e86\u3002\n\u5982\u679c\u4e0d\u4f1adijstra\u5806\u4f18\u5316\u7684\u5efa\u8bae\u5148\u53bb\u505a[P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09](https://www.luogu.org/problemnew/show/P4779)\n\n\u4e0b\u9762\u9644\u4e0a\u6211\u7684AC\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s,e1,e2,cnt,dis[500050],dis1[500050],head[500050];\nint ans;\nbool vis[500050];\nstruct f{\n\tint to,next,dis;\n}a[500050];\ninline void add(int u,int v,int d)\n{\n\tcnt++;\n\ta[cnt].to=v;\n\ta[cnt].dis=d;\n\ta[cnt].next=head[u];\n\thead[u]=cnt;\n}\nstruct node{\n\tint dis,p;\n\tbool operator < (const node &x)const\n\t{\n\t\treturn x.dis<dis;\n\t}\n};\nvoid spfa(int f)\n{\n\tmemset(vis,false,sizeof(vis));\n\tpriority_queue<node>q;\n\tq.push((node){0,f});\n\tdis[f]=0;\n\twhile(!q.empty())\n\t{\n\t\tnode temp=q.top();\n\t\tq.pop();\n\t\tint u=temp.p;\n\t\tif(vis[u])\n\t\tcontinue;\n\t\tvis[u]=true;\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint t=a[i].to;\n\t\t\tif(dis[t]>a[i].dis+dis[u])\n\t\t\t{\n\t\t\t\tdis[t]=a[i].dis+dis[u];\n\t\t\t\tif(!vis[t])\n\t\t\t\t{\n\t\t\t\t\tq.push((node){dis[t],t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d%d%d\",&m,&n,&s,&e1,&e2);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,d;\n\t\tscanf(\"%d%d%d\",&u,&v,&d);\n\t\tadd(u,v,d);\n\t\tadd(v,u,d);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdis[i]=0x7fffffff;\n\t}\n\tspfa(s);\n\tans+=min(dis[e1],dis[e2]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdis[i]=0x7fffffff;\n\t}\n\tspfa(e1);\n\tans+=dis[e2];\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1563714373,
        "uid": 155626,
        "name": "\u8001\u54b8\u9c7c\u4e86",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u4e3b\u8981\u601d\u8def\uff1a  \n\u4e24\u904ddijk  \n1.\u7b2c\u4e00\u6b21\uff0c\u6c42\u51fas\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def  \n2.\u7b2c\u4e8c\u6b21\uff0c\u6c42\u51fae1\u70b9\u6216e2\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def  \n\u7b54\u6848\u5c31\u662f\u4e24\u4e2a\u70b9\u7684\u6700\u5c0f\u503c  \n\u63d0\u4f9b\u4e00\u79cd\u8bb0\u5f55\u5404\u4e2ad\u503c\u7684\u65b9\u6cd5\uff1a\u5373d\u6570\u7ec4\u8dd1\u6700\u77ed\u8def\uff0cdi\u8bb0\u5f55i\u70b9\u5230\u5176\u4ed6\u70b9\u6700\u77ed\u8def  \n\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5199\u4e09\u904ddijk   \n\u4e0a\u4ee3\u7801   \n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 100010\n#define M 400010 \nusing namespace std;\nint ans,n,m,d[N],d3[N],d1[N],d2[N],B,E,P,tot,head[N],s,e1,e2;\nbool vis[N];\nstruct Edge{\n\tint v,next,val;\n}edge[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return x*f;\n}\ninline void add(int x,int y,int z){edge[++tot].v=y;edge[tot].next=head[x];edge[tot].val=z;head[x]=tot;}\nvoid dijk(int s){\n\tpriority_queue<pair<int,int> >q;\n\tmemset(d,0x3f,sizeof(d));memset(vis,0,sizeof(vis));\n\tq.push(make_pair(0,s));d[s]=0;\n\twhile(q.size()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(vis[u])continue;vis[u]=1;\n\t\tfor(int i=head[u];i;i=edge[i].next){\n\t\t\tint v=edge[i].v,z=edge[i].val;\n\t\t\tif(d[v]>d[u]+z){\n\t\t\t\td[v]=d[u]+z;\n\t\t\t\tq.push(make_pair(-d[v],v)); \n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tm=read(),n=read(),s=read(),e1=read(),e2=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);add(y,x,z);\n\t} \n\tdijk(s);for(int i=1;i<=n;i++)d1[i]=d[i];\n\tdijk(e1);for(int i=1;i<=n;i++)d2[i]=d[i];\n\tans=min(d1[e1]+d2[e2],d1[e2]+d2[e2]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n",
        "postTime": 1555245376,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u9898\u76ee\u4f20\u9001\u95e8\uff1a\t\t[P3003 [USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery](https://www.luogu.org/problemnew/show/P3003)\n\n\u8bb0\u539f\u70b9\u4e3as\uff0c\u4e24\u4e2a\u7ec8\u70b9\u5206\u522b\u4e3at1\u3001t2\n\n\u5206\u522b\u4ee5s\u3001t1\u3001t2\u8dd1\u4e00\u904ddij\uff0c\u8bb0\u4e0bs~t1\u3001s~t2\u548ct1~t2\u7684\u8ddd\u79bb\n\n\u6700\u540e\u7b54\u6848\u5373\u4e3amin(d[s][t1],d[s][t2])+d[t1][t2])\n\uff08\u5148t1\u540et2,\u6216\u8005\u5148t2\u540et1\uff09\n\n\u6ce8\u610f\u662f\u603b\u8fb9\u6570\u5728\u524d\uff0c\u603b\u70b9\u6570\u5728\u524d~~\uff08\u5bb3\u6b7b\u4eba\u4e86\uff09~~\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=100000 + 3;\nconst int MAXM=200000 + 3;\n//\u5feb\u8bfb\nint read()\n{\n\tint  x=0,w=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-48;c=getchar();}\n\treturn x*w;\t\n}\n\nstruct Edge\n{\n\tint to,next,w;\n}e[MAXM*2];\nint head[MAXN]={0},cnt=0; \ninline void add(int u,int v,int w)\n{\n\te[++cnt].to=v,e[cnt].w=w,e[cnt].next=head[u],head[u]=cnt;\t\n}\n\nint n,m,d[MAXN],vis[MAXN]={0};\nvoid dij(int s)\n{\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,127,sizeof(d));\n\tpriority_queue<pair<int,int> > Q;\n\td[s]=0,Q.push(make_pair(-d[s],s));\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.top().second;\n\t\tQ.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(d[v]>d[u]+e[i].w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+e[i].w;\n\t\t\t\tQ.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tm=read(),n=read();\n\tint s=read(),t1=read(),t2=read();\n\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tint g[3][3];//0\u8868\u793as\u30011\u8868\u793at1\u30012\u8868\u793at2\n   //\u7528g\u8bb0\u4e0b\u4e09\u70b9\u76f8\u4e92\u4e4b\u95f4\u7684\u8ddd\u79bb\n\tdij(s);\n\tg[0][1]=d[t1],g[0][2]=d[t2];\n\tdij(t1);\n\tg[1][0]=d[s],g[1][2]=d[t2];\n\tint ans;\n\t\n\tans=min(g[0][1],g[0][2])+g[1][2];\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\t\n} \n```\n",
        "postTime": 1554028390,
        "uid": 88736,
        "name": "Sober_Clever",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 \u6d1b\u8c373003"
    },
    {
        "content": "## \u4e24\u904d\u5806\u4f18\u5316dijkstra\u5c31\u597d\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint pre[800001],now[800001],son[800001],dist[800001],V[800001],tot;\nbool vis[800001];\nint n,m,s;\nvoid read(int &x) {\n\tchar ch; bool ok;\n\tfor(ok=0,ch=getchar(); !isdigit(ch); ch=getchar()) if(ch=='-') ok=1;\n\tfor(x=0; isdigit(ch); x=x*10+ch-'0',ch=getchar()); if(ok) x=-x;\n}\nstruct node{\n    int dis;\n    int pos;\n    bool operator <( const node &x )const\n    {\n      return x.dis < dis;\n    }\n};\nvoid put(int x,int y,int z)\n{\n  pre[++tot]=now[x];\n  now[x]=tot;\n  son[tot]=y;\n  V[tot]=z;\n}\nvoid dijkstra()//\u5806\u4f18\u5316\n{\n\tmemset(vis,0,sizeof(vis));\n  priority_queue<node>q;\n  for(int i=1;i<=n;i++)\n    dist[i]=99999999;\n  dist[s]=0;\n  q.push((node){dist[s],s});\n  while(!q.empty())\n  {\n    node temp=q.top();\n    q.pop();\n    int x=temp.pos;\n    int d=temp.dis;\n    if(vis[x])\n    continue;\n    vis[x]=1;\n    for(int i=now[x];i;i=pre[i])\n    {\n      int y=son[i];\n      if(dist[y]>dist[x]+V[i])\n      {\n        dist[y]=dist[x]+V[i];\n        if(!vis[y])\n        q.push((node){dist[y],y});\n      }\n    }\n  }\n}\nint main()\n{\n\tint t1,t2;\n  read(m),read(n),read(s);\n\tread(t1),read(t2);\n\tint top=s;\n  int x,y,z;\n  for(int i=1;i<=m;i++)\n    read(x),read(y),read(z),put(x,y,z),put(y,x,z);\n\t\tint ans1,ans2;\n\t\ts=t1;\n     dijkstra();\n     ans1=dist[top]+dist[t2];//\u7b97\u7b54\u6848\u4e24\u904d\uff0c\u56e0\u4e3a\u8981\u53d6\u6700\u4f18\u503c\n\t\t s=t2;\n     dijkstra();\n     ans2=dist[top]+dist[t1];\n     printf(\"%d\\n\",min(ans1,ans2));//\u6bd4\u8f83\uff0c\u8f93\u51fa\n\n}\n\n```\n",
        "postTime": 1553341720,
        "uid": 95392,
        "name": "zengxr",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53c8\u53cc\u53d2\u53d5\u5361Spfa\u2026\u2026\n\n\u4ec0\u4e48SLF\u3001LLL\u7684\u6211\u90fd\u4e0d\u4f1a\u554a\u2026\u2026\n\n\u5728\u8fd9\u65e0\u5c3d\u7684SpfaTLE\u4e2d\uff0c\u552f\u6709\u5806\u4f18\u5316Dij\u795e\u901f\u7684\u4ee3\u7801\u8fd8\u6709\u4e00\u4e1d\u6e29\u6696\u2026\u2026\n\n\u505a\u6cd5\u5f88\u7b80\u5355\u2026\u2026\u8dd1\u4e09\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u770b\u770b\u662fpb-pa1-pa2\u77ed\u8fd8\u662fpb-pa2-pa1\u77ed\u5373\u53ef\n\n\u5148\u7ed9\u51faSpfa\u7684TLE\uff0880 2773ms\uff09\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nqueue <int> q;\nint cnt,fst[100005],nxt[400005],to[400005],w[400005];\nint n,m,dis[100005][3],pb,pa1,pa2;\nbool inq[100005];\nvoid AddEdge(int u,int v,int c)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n\tw[cnt]=c;\n}\nvoid Spfa(int x,int id)\n{\n\tq.push(x);\n\tdis[x][id]=0;\n\tinq[x]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tinq[u]=0;\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(dis[v][id]>dis[u][id]+w[i])\n\t\t\t{\n\t\t\t\tdis[v][id]=dis[u][id]+w[i];\n\t\t\t\tif(!inq[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(dis,60,sizeof(dis));\n\tscanf(\"%d %d %d %d %d\",&m,&n,&pb,&pa1,&pa2);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t}\n\tSpfa(pb,0);\n\tSpfa(pa1,1);\n\tSpfa(pa2,2);\n\tint tmp1=dis[pa1][0]+dis[pa2][1],tmp2=dis[pa2][0]+dis[pa1][2];\n\tprintf(\"%d\\n\",min(tmp1,tmp2));\n\treturn 0;\n}\n```\n\n\u7136\u540e\u662f\u5806\u4f18\u5316Dij\u7684AC\uff08100 417ms\uff09\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Node\n{\n\tint u,dis;\n\tbool operator < (const Node &x) const\n\t{\n\t\treturn x.dis<dis;\n\t}\n};\nint cnt,fst[100005],nxt[400005],to[400005],w[400005];\nint n,m,dis[100005][3],pb,pa1,pa2;\npriority_queue <Node> q;\nvoid AddEdge(int u,int v,int c)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n\tw[cnt]=c;\n}\nvoid Spfa(int x,int id)\n{\n\tdis[x][id]=0;\n\tq.push((Node){x,0});\n\twhile(!q.empty())\n\t{\n\t\tNode now=q.top();\n\t\tq.pop();\n\t\tint u=now.u,d=now.dis;\n\t\tif(d!=dis[u][id]) continue;\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(dis[v][id]>dis[u][id]+w[i])\n\t\t\t{\n\t\t\t\tdis[v][id]=dis[u][id]+w[i];\n\t\t\t\tq.push((Node){v,dis[v][id]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(dis,60,sizeof(dis));\n\tscanf(\"%d %d %d %d %d\",&m,&n,&pb,&pa1,&pa2);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t}\n\tSpfa(pb,0);\n\tSpfa(pa1,1);\n\tSpfa(pa2,2);\n\tint tmp1=dis[pa1][0]+dis[pa2][1],tmp2=dis[pa2][0]+dis[pa1][2];\n\tprintf(\"%d\\n\",min(tmp1,tmp2));\n\treturn 0;\n}\n```\n\n\u6700\u540e\n\n## \u5173\u4e8eSpfa\n\n### \u00b7\u5b83\u6b7b\u4e86 \n\n\uff08\u5176\u5b9e\u8fd9\u9898\u6ca1\u6709\u5361SLF\u548cLLL\u5df2\u7ecf\u662f\u4e07\u5e78\u4e86233\uff09",
        "postTime": 1542164957,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "# \u9898\u610f\n\u95ee\u4e00\u6761\u6700\u77ed\u8def\u5f84\uff0c\u6ee1\u8db3\u4ece $ PB $ \u51fa\u53d1\uff0c\u540c\u65f6\u7ecf\u8fc7 $ PA_1 $ \u4e0e $ PA_2 $\u3002\n# \u57fa\u672c\u601d\u8def\n\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053\u8def\u5f84\u4e00\u5b9a\u662f\u5148\u5230 $ PA_1 $ \u518d\u5230 $ PA_2 $\uff0c\u6216\u5148\u5230 $ PA_2 $ \u518d\u5230 $ PA_1 $ \u7684\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u8d70\uff0c\u8d70\u7684\u5176\u4ed6\u8def\u662f\u6ca1\u6709\u7528\u5904\u7684\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u6700\u77ed\uff0c\u8fd9\u6837\u5c31\u4e0d\u6ee1\u8db3\u6700\u77ed\uff0c\u4e5f\u8bb8\u6709\u4eba\u4f1a\u95ee\uff0c\u53ef\u4ee5\u5148\u56de\u53bb\uff0c\u4f46\u662f\u8fd9\u6837\u76f8\u5bf9\u4e8e\u76f4\u63a5\u4ece $ PA_1 $ \u5230 $ PA_2 $ \u6216\u4ece $ PA_2 $ \u5230 $ PA_1 $ \u53ea\u4f1a\u66f4\u957f\uff0c\u4e0d\u4f1a\u66f4\u77ed\u3002\n# \u5b9e\u73b0\n\u8fd9\u5c31\u662f\u6700\u77ed\u8def\u7684\u677f\u5b50\u9898\u4e86\uff0c\u4ece\u6211\u4eec\u4ece $ PB $ \uff0c $ PA_1 $ \uff0c $ PA_2 $ \u51fa\u53d1\u5404\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u4e24\u6761\u8def\u5f84\u7684\u503c\uff0c\u5728\u53d6\u8f83\u5c0f\u503c\u8f93\u51fa\u5373\u53ef\u3002\n# \u6ce8\u610f\u4e8b\u9879\n\u8fd9\u9898 $ \\text{Pascal} $ \u57fa\u672c\u4e0d\u53ef\u7528 $ \\text{SPFA} $ \u8fc7\uff0c\u5efa\u8bae\u4f7f\u7528 $ \\text{Dijkstra+} $\u5806\u4f18\u5316\u3002\n# \u4ee3\u7801\n```pascal\nUses Math;\nvar hs,s,f1,f2,n,m,len:Longint;\n    Used : array[0..100001] of Boolean;\n    d : array[0..100001] of Longint;\n    v,l,head,w:array[0..400001] of longint;\n    h,ih:array[0..100001] of longint;\nProcedure Swap(var o,o2: longint);\nvar buf:longint;\nbegin\n buf:=o; o:=o2; o2:=buf;\nend;\nprocedure addvertex(a , b, c :longint);\nbegin\n inc(len);\n v[len]:=b;\n l[len]:=head[a];\n w[len]:=c;\n head[a]:=len;\nend;\nprocedure Siftdown;\nvar cur,x:longint;\nbegin\n cur:=1;\n While cur shl 1<=hs do begin\n \tx:=cur;\n \tif (cur shl 1<=hs) and (d[h[x]] > d[h[cur shl 1]]) then x:=cur shl 1;\n \t if ((cur shl 1) + 1 <=hs) and (d[h[x]] > d[h[(cur shl 1) + 1]]) then\n \t   x:=(cur shl 1) + 1;\n \t  if cur = x then break else begin\n \t  \tSwap(ih[h[cur]],ih[h[x]]);\n \t  \tSwap(h[cur],h[x]);\n \t  \tcur:=x;\n \t  end;\n end;\nend;\nFunction getmin : longint;\nbegin\n If (hs <=0) or (d[h[1]] = maxlongint) then\n  getmin:=-1 else begin\n  \tgetmin:=h[1];\n  \tih[h[1]]:=-1;\n  \th[1]:=h[hs];\n  \tih[h[1]]:=1;\n  \th[hs]:=0;\n  \tdec(hs);\n  \tSiftdown;\n  end;\nend;\nProcedure Siftup(x : Longint);\nbegin\n While  ( x > 1 ) and (d[h[x]] < d[h[x shr 1]]) do begin\n \tSwap(ih[h[x]], ih[h[x shr 1]]);\n \tSwap(h[x], h[x shr 1]);\n \tx:=x shr 1;\n end;\nend;\nFunction Dist ( a , b:longint) : longint;\nvar i,j:longint;\nbegin\n hs:=n;\n For i:=1 to n do begin\n \tused[i]:=false;\n \td[i]:=MaxLongint;\n \tih[i]:=i;\n \th[i]:=i;\n end;\n Swap(h[a],h[1]);\n Swap(ih[a] , ih[1]);\n d[a]:=0;\n While Not Used[b] do begin\n \ti:=GetMin;\n \tif i = -1 then Break else begin\n \t\tUsed[i]:=true;\n \t\tj:=head[i];\n \t\tWhile j > 0 do begin\n \t\t   If (Not Used[v[j]]) and (d[i] + w[j] < d[v[j]]) then begin\n \t\t   \td[v[j]]:=d[i] + w[j];\n \t\t   \tSiftup(ih[v[j]]);\n \t\t   end;\n \t\t j:=l[j];\n \t\tend;\n \tend;\n end;\n dist:=d[b];\nend;\nFunction Path1 : longint;\nbegin\n Path1:= Dist(s, f1) + dist(f1, f2);\nend;\nFunction Path2 : longint;\nbegin\n Path2:= Dist(s, f2) + Dist( f2 , f1 );\nend;\nProcedure reading;\nvar a,b,c,i:longint;\nbegin\n readln(m,n,s,f1,f2); len:=0;\n For i:=1 to m do begin\n  readln(a,b,c);\n  addvertex(a,b,c);\n  addvertex(b,a,c);\n end;\n writeln(Min( Path1, Path2 ));\nend;\nbegin\n  reading;\nend.    \n```\n",
        "postTime": 1532493305,
        "uid": 77615,
        "name": "OIerAlbedo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    },
    {
        "content": "\u6ca1\u4eba\u5199dijkstra\u7684\u561b\u3002\u3002\u3002\n\u601d\u8def\u90fd\u662f\u4e00\u6837\u7684\n### \u6bd4\u8d77spfa\u6765\u8bf4\u4e0d\u9700\u8981\u7279\u522b\u7684\u4f18\u5316\uff08spfa\u5f97\u7528slf\u6216\u8005lll\uff09\n~~\u6211\u89c9\u5f97\u8fd8\u662f\u633a\u6613\u61c2\u7684~~\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int N=100001;\nconst int M=200001;\nconst int INF=0x7fffffff/2;\n\nstruct Edge{\n    int to,next;\n    int dis;\n}edge[M*2];\n\nstruct Node{\n    int node,dis;\n    bool operator<(const Node &a) const{\n        return dis>a.dis;\n    }\n};\n\nint n,m,s,t1,t2;\nint head[N];\nint edge_num;\nint dis[N];\nbool done[N];\npriority_queue<Node> q;\n\ninline void Read(int &x){\n    x=0;char c=getchar();int flag=1;\n    while (c==' '||c=='\\r'||c=='\\n') c=getchar();\n    if (c=='-') flag=-1;\n        else x=c-48;\n    while (isdigit(c=getchar())) x=x*10+c-48;\n    x*=flag;\n}\n\ninline void Add_Edge(int from,int to,int dis){\n    edge_num++;\n    edge[edge_num].to=to;\n    edge[edge_num].dis=dis;\n    edge[edge_num].next=head[from];\n    head[from]=edge_num;\n}\n\nvoid Dijkstra(int start){\n    for (int i=1;i<=n;i++) dis[i]=INF;\n    memset(done,0,sizeof done);\n    dis[start]=0;\n    q.push((Node){start,dis[start]});\n    while (!q.empty()){\n        Node x=q.top();q.pop();\n        int u=x.node;\n        if (done[u]) continue;\n        done[u]=true;\n        for (int i=head[u];i;i=edge[i].next){\n            int to=edge[i].to;\n            if (dis[to]>dis[u]+edge[i].dis){\n                dis[to]=dis[u]+edge[i].dis;\n                q.push((Node){to,dis[to]});\n            }\n        }\n    }\n}\n\nint main(){\n    Read(m);Read(n);Read(s);Read(t1);Read(t2);\n    int x,y,d;\n    for (int i=1;i<=m;i++){\n        Read(x);Read(y);Read(d);\n        Add_Edge(x,y,d);\n        Add_Edge(y,x,d);\n    }\n    int ans1,ans2;\n    Dijkstra(t1);\n    ans1=dis[s]+dis[t2];\n    Dijkstra(t2);\n    ans2=dis[s]+dis[t1];\n    printf(\"%d\\n\",min(ans1,ans2));\n    return 0;\n}\n```",
        "postTime": 1521810085,
        "uid": 37701,
        "name": "wangsz12",
        "ccfLevel": 0,
        "title": "P3003 \u6765\u4e00\u53d1dijkstra"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u597d\u505a\uff0c\u76f4\u63a5\u5957slf\u4f18\u5316\u7684\u6a21\u677f\uff0c\u8dd1\u4e24\u6b21\u53d6\u6700\u5c0f\u503c\uff0c\u5c31\u597d\u4e86\uff0c\u672c\u4eba\u5148\u5f00\u59cb\u628aslf\u548clll\u4f18\u5316\u4e00\u8d77\u52a0\u4e86\u8fdb\u53bb\uff0c\u4f46\u662f\u7531\u4e8elll\u88ab\u5e38\u6570\u5361\u7206\u4e86\uff0c\u5361\u5230\u6307\u6570\u7ea7\u53bb\u4e86\uff0c\u7136\u540e\u600e\u4e48\u4f18\u5316\u90fd\u4f1aT\u6389\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u5982\u679c\u7528lll\u4f18\u5316\u4f1aT\u63894\u4e2a\u70b9\uff08\u672c\u4eba\u4eb2\u624b\u5b9e\u9a8c\uff09\uff0c\u7528slf\u53ef\u4ee5A\u6389\uff0c\u800c\u4e14\u5f88\u5feb\u3002\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\u3002\n\n\n\n\n\n```cpp\n#include<algorithm>\n#include <iostream>\n#include  <cstdlib>\n#include  <cstring>\n#include  <climits>\n#include   <cstdio>\n#include   <string>\n#include    <cmath>\n#include    <stack>\n#include    <queue>\n#include    <deque>\nusing namespace std;\nconst int gg=450000;\nconst int INF=1e9;\nint head[gg];\nstruct node\n{\n    int next;\n    int w;\n    int to;\n} a[gg];\nint dis[gg];\nbool vis[gg];\nint c,p,pb,pa1,pa2,cnt;\nint ans;\nint ans2;\nint sum,tot;\nint rans;\ninline void add(int i,int j,int w)\n{\n    a[++cnt].to=j;\n    a[cnt].next=head[i];\n    a[cnt].w=w;\n    head[i]=cnt;\n}\ninline void spfa(int s)\n{\n    deque<int>q;\n    memset(vis,false,sizeof(vis));\n    memset(dis,0x7f,sizeof(dis));\n    dis[s]=0;\n    vis[s]=true;\n    q.push_back(s);\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop_front();\n        vis[u]=false;\n        for(register int i=head[u]; i; i=a[i].next)\n        {\n            int v=a[i].to;\n            if(dis[v]>dis[u]+a[i].w)\n            {\n                dis[v]=dis[u]+a[i].w;\n                if(!vis[v])\n                {\n                    vis[v]=true;\n                    if(q.empty()||dis[v]>dis[q.front()])\n                    {\n                        q.push_back(v);\n                    }\n                    else\n                        q.push_front(v);\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d%d\",&c,&p,&pb,&pa1,&pa2);\n    for(register int i=1; i<=c; i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    spfa(pa1);\n    ans+=dis[pa2]+dis[pb];\n    spfa(pa2);\n    ans2+=dis[pa1]+dis[pb];\n    rans=min(ans,ans2);\n    printf(\"%d\\n\",rans);\n    return 0;\n}\n```",
        "postTime": 1510221213,
        "uid": 34939,
        "name": "Hammer_cwz_77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3003 \u3010[USACO10DEC]\u82f9\u679c\u4ea4\u8d27Apple Delivery\u3011"
    }
]