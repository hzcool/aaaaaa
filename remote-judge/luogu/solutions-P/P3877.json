[
    {
        "content": "# \u5199\u5728\u524d\u9762\uff1a\n\u5982\u60f3\u83b7\u53d6\u66f4\u4f73\u9605\u8bfb\u6548\u679c\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://blog.csdn.net/kkkksc03/article/details/89043231)\uff0c\u4efb\u4f55\u7591\u95ee\u6b22\u8fce\u79c1\u4fe1\u4f5c\u8005\uff01\n\n# \u5206\u6790\uff1a\n\u9996\u5148\u6574\u7406\u4e00\u4e0b\u6761\u4ef6\uff1a\n1\u3001\u6070\u597d\u8fdb\u51fa\u6bcf\u4e2a\u9700\u6253\u626b\u7684\u623f\u95f4\u5404**\u4e00\u6b21**\n\n2\u3001\u8fdb\u51fa\u6bcf\u4e2a\u623f\u95f4\u4e0d\u80fd\u901a\u8fc7\u540c\u4e00\u4e2a\u95e8\n\n\uff08\u5176\u5b9e\u524d\u4e24\u4e2a\u6761\u4ef6\u662f\u4e00\u56de\u4e8b\uff09\n\n3\u3001\u8981\u6c42\u6bcf\u6761\u8def\u7ebf\u90fd\u662f\u4e00\u4e2a**\u95ed\u5408\u7684\u73af\u7ebf**\n\n4\u3001\u6bcf\u6761\u8def\u7ebf\u7ecf\u8fc7\u7684\u623f\u95f4\u6570\u5927\u4e8e**2**\n\n\u8ba9\u4f60\u5728\u4e00\u4e2an*m\u7684\u77e9\u9635\u4e2d\uff0c\u627e\u51fa\u662f\u5426\u80fd\u6309\u7167\u7ea6\u5b9a\u65b9\u6848\u6253\u626b\u5168\u90e8\u6307\u5b9a\u623f\u95f4\u3002\n\n### \u9996\u5148\u4e0d\u96be\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u6709\u5947\u6570\u4e2a\u9700\u8981\u6253\u626b\u7684\u623f\u95f4\u65f6\u4e00\u5b9a\u65e0\u89e3\u3002\n\n#### \u8bc1\u660e\uff1f\n\u6bcf\u4e00\u6b21\u6253\u626b\u90fd\u8981\u6ee1\u8db3\u6761\u4ef63\u548c4\uff0c\u800c\u95ed\u5408\u7684\u73af\u7ebf\u4e3a\u591a\u8fb9\u5f62\uff0c\u663e\u7136\u5fc5\u987b\u5bf9\u79f0\uff08\u5373\u901a\u8fc7\u5e73\u79fb\u53ef\u5f97\u5230\u77e9\u5f62\uff09\uff0c\u4e0d\u96be\u770b\u51fa\uff1a\u6bcf\u4e00\u6b21\u90fd\u80fd\u4e14\u53ea\u80fd\u6253\u626b**\u5076\u6570**\u4e2a\u623f\u95f4\u3002\n\n\u7136\u540e\u7a0d\u4f5c\u5206\u6790\uff0c\u53d1\u73b0\u6bcf\u4e2a\u683c\u5b50\u7684\u5ea6\u4e3a**2**\uff08\u5373\u8fdb\u5165\u6b64\u623f\u518d\u51fa\u53bb\uff09\u3002\n\n#### \u8003\u8651\u5efa\u56fe\u3002\n\n\n\u4e00\u4e2a\u623f\u95f4\u4e0a\u4e0b\u5de6\u53f3\u6709\u95e8\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u60f3\u5230\u4e00\u4e2a\u70b9\u5411\u5468\u56f4\u56db\u4e2a\u8fde\u8fb9\uff0c\u5c31\u6784\u6210\u4e86\u9ed1\u767d\u67d3\u8272\u7684\u6a21\u578b\u3002\n\n\u4e00\u4e2a\u77e9\u9635\u4e2d\u7684\u623f\u95f4\u6700\u591a\u7528\u4e24\u6761\u8def\u7ebf\u6253\u626b\u5373\u53ef\u3002\n\n\u6bcf\u4e2a\u70b9\u90fd\u8981\u8d70\u5230\u3002\n\u6240\u4ee5\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u5411\u4e0a\u4e0b\u5de6\u53f3\u5f02\u8272\u683c\u70b9\u6d41\u51fa1\uff0c\u540c\u65f6\u4e5f\u4f1a\u63a5\u53d7\u53e6\u4e00\u4e2a\u70b9\u7684\u6d41\u5165\u3002\n\n\u6211\u4eec\u8fd9\u65f6\u5c06\u767d\u70b9\u6d41\u5411\u9ed1\u70b9\u7684\u6d41\u53cd\u5411\uff0c\u8fd9\u6837\u6bcf\u4e2a\u767d\u70b9\u6d41\u51652\uff0c\u6bcf\u4e2a\u9ed1\u70b9\u6d41\u51fa2\u3002\n\n\u4e8e\u662f\u6bcf\u4e2a\u70b9\u67092\u7684\u6d41\u91cf\uff0c\u6765\u8bf4\u660e\u53ef\u4ee5\u6709\u4e24\u6761\u8fb9\u548c\u5b83\u76f8\u8fde\u3002\n\n\u9ed1\u70b9\u90fd\u5411S\u8fde\u8fb9\uff0c\u767d\u70b9\u90fd\u5411T\u8fde\u8fb9\n\n\u7136\u540e\u56fe\u5efa\u597d\u4e86\uff0c\u5f00\u59cb\u8dd1\u7f51\u7edc\u6d41\uff0c\u5982\u679c\u6ee1\u6d41\u5c31\u8bc1\u660e\u6240\u6709\u7684\u70b9\u90fd\u8fdb\uff0c\u51fa\u8fc7\u4e00\u6b21\uff0c\u6253\u626b\u5b8c\u6bd5\uff0c\u8f93\u51fayes\uff1b\u5426\u5219no\n\n### \u5efa\u56fe\u603b\u7ed3\uff1a\n\n - \u8282\u70b9\u542b\u4e49\uff1a\u623f\u95f4\n - \u8fb9\u7684\u542b\u4e49\uff1a\u6253\u626b\u8def\u7ebf\n - \u8fb9\u5982\u4f55\u76f8\u8fde\uff1a\u56db\u8fde\u901a\n - \u6e90\u70b9S\uff1a\u77e9\u9635\u5916\u4e00\u70b9\n - \u6c47\u70b9T\uff1a\u77e9\u9635\u5916\u4e00\u70b9\n\n# \u4ee3\u7801\uff1a\n\n```cpp\n\n#include<cstdio>\n#include<vector> \n#include<iostream>\n#include<queue>\n#include<cstring>\nusing namespace std;\n#define inf 0x7fffffff\nint n,m,s,t,ans;\nint gx[5]={0,0,-1,0,1};\nint gy[5]={0,-1,0,1,0};\n//int gy[5]={0,-1,1,0,0};\n//int gx[5]={0,0,0,-1,1};\nint d[1000],id[105][105];\nchar a[105][105];\nstruct edge\n{\n    int to,val,rev;\n    edge(int _to,int _val,int _rev)\n    {\n        to=_to;\n        val=_val;\n        rev=_rev;\n    }\n};\nvector<edge>e[1000];\nvoid add(int x,int y,int w)\n{\n    e[x].push_back(edge(y,w,e[y].size()));\n    e[y].push_back(edge(x,0,e[x].size()-1));\n}\nbool bfs()\n{\n   memset(d,-1,sizeof(d));\n    \n    queue<int>q;\n   \n    q.push(s);\n    d[s]=0;\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        for(int i=0;i<e[x].size();i++)\n        {\n            int y=e[x][i].to;\n            if((d[y]==-1)&&e[x][i].val)\n            {\n            \tq.push(y);\n                d[y]=d[x]+1;\n                \n            }\n        }\n    }\n    if(d[t]==-1)\n    return 0;\n    else\n    return 1;\n}\nint dfs(int x,int low)\n{\n    if(x==t||low==0)return low;\n    int totflow=0;\n    for(int i=0;i<e[x].size();i++)\n    {\n        int y=e[x][i].to;\n        int rev=e[x][i].rev;\n        if((d[y]==(d[x]+1))&&e[x][i].val)\n        {\n            int a=dfs(y,min(low,e[x][i].val));\n            e[x][i].val-=a;\n            e[y][rev].val+=a;\n            low-=a;\n            totflow+=a;\n            if(low==0)return totflow;\n        }\n    }\n    if(low!=0)d[x]=-1;\n    return totflow;\n}\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        for(int i=0;i<=1000;i++)\n        e[i].clear();\n        int cnt=0,tot=0,sum=0;\n        scanf(\"%d%d\",&n,&m);\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=1;j<=m;j++)\n            {\n                cin>>a[i][j];\n                id[i][j]=++cnt;\n                if(a[i][j]=='.')tot++;\n            }\n        }\n        s=0;\n        t=cnt+1;\n        if(tot%2==1)\n        {\n            printf(\"NO\\n\");\n            continue;\n        }\n        if((n==1)||(m==1))\n        {\n        \tprintf(\"NO\\n\");\n            continue;\n        }\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=1;j<=m;j++)\n            {\n                    if(a[i][j]=='.')\n                    {\n                if(((i+j)%2)==1)\n                {\n                        add(s,id[i][j],2);\n                        sum+=2;\n                        for(int k=1;k<=4;k++)\n                        {\n                            int nx=i+gx[k];\n                            int ny=j+gy[k];\n                            if((nx>=1)&&(nx<=n)&&(ny>=1)&&(ny<=m)&&(a[nx][ny]!='#'))\n                                add(id[i][j],id[nx][ny],1);\n                        }\n                }\n                else\n                {\n                    add(id[i][j],t,2);\n                }\n                    }\n            }\n        }\n        ans=0;\n        while(bfs())\n        {\n     \n        ans+=dfs(s,inf);\n   \t\t}\n        if(ans==tot)\n        {\n            printf(\"YES\\n\");\n        }\n        else\n        printf(\"NO\\n\");\n    }\n    return 0;\n} \n\n\n```\n\n",
        "postTime": 1555158234,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3877 \u3010[TJOI2010]\u6253\u626b\u623f\u95f4\u3011"
    },
    {
        "content": "\u9996\u5148\u5f88\u663e\u7136\u7684\u7ed3\u8bba\u662f\u5947\u6570\u4e2a\u70b9\u662f `NO` \uff08\u8bc1\u660e\u8003\u8651\u8def\u5f84\u662f\u95ed\u7684\uff0c\u957f\u5ea6\u6709\u7c7b\u4f3c\u5bf9\u79f0\u7684\u6027\u8d28\uff09\n\n\u7136\u540e\u6211\u5148\u60f3\u5230\u7684\u662f\u63d2\u5934 DP \uff0c\u53ef\u60dc\u8fc7\u4e0d\u53bb\u3002\u7136\u540e\u8ba4\u771f\u60f3\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u8303\u56f4\u4f30\u8ba1\u5c31\u662f\u7f51\u7edc\u6d41\u3002\n\n\u7136\u540e\u5f80\u7f51\u7edc\u6d41\u4e0a\u9760\u3002 \u9996\u5148\u8003\u8651\u8fd9\u9898\u76ee\u7684\u7ea6\u675f\u6761\u4ef6\u5c31\u662f\u8981\u6240\u6709\u683c\u90fd\u8d70\uff0c\u5e76\u4e14\u56de\u8def\u3002\n\n\u6240\u6709\u683c\u90fd\u8d70\u770b\u8d77\u6765\u6293\u4e0d\u51fa\u4ec0\u4e48\u6027\u8d28\uff0c\u6211\u4eec\u770b\u56de\u8def\u3002\n\n\u65e2\u7136\u662f\u56de\u8def\uff0c~~\u5982\u679c\u6709\u4e00\u4e9b\u63d2\u5934 DP \u7684\u57fa\u7840\u7684\u8bdd\uff0c~~ \u6bd4\u8d77\u666e\u901a\u7684\u884c\u8d70\u8def\u5f84\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u3001\u975e\u5e38\u4f18\u79c0\u7684\u6027\u8d28\uff1a\u6bcf\u4e2a\u683c\u7684\u5ea6\u90fd\u662f $2$ \u3002\u8fd9\u4e2a\u6027\u8d28\u672c\u8eab\u8db3\u591f\u4f18\u79c0\uff0c\u4e00\u4e2a\u5c40\u9762\u53ea\u8981\u6ee1\u8db3\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u518d\u52a0\u4e0a\u5408\u7406\u7684\u683c\u5b50-\u683c\u5b50\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u5c31\u80fd\u51fa\u89e3\u3002\n\n\u8fd9\u6837\u5e76\u6ca1\u6709\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\u3002\u56e0\u4e3a\u4f60\u5efa\u4e0d\u51fa\u56fe\u3002\n\n\u671d\u7740\u5efa\u56fe\u7684\u65b9\u5411\u8003\u8651\u3002\u6211\u4eec\u5c1d\u8bd5\u628a\u683c\u5b50\u548c\u683c\u5b50\u4e4b\u95f4\u7684\u8fb9\u7528\u7f51\u7edc\u6d41\u56fe\u4e0a\u7684\u8fb9\u4ee3\u66ff\u3002\u8003\u8651\u4e00\u4e2a\u70b9\u53ea\u80fd\u5411\u56db\u8fde\u901a\u7684\u70b9\u8fde\u8fb9\uff0c\u8fd9\u6837\u662f\u4e00\u4e2a\u9ed1\u767d\u683c\u7684\u6a21\u578b\u3002\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u9ed1\u767d\u67d3\u8272\u3002\n\n\u8fd9\u5927\u6982\u5c31\u662f\u6211\u7684\u6574\u4e2a\u601d\u8003\u8fc7\u7a0b\u3002\u518d\u6765\u786e\u8ba4\u4e00\u4e0b\uff0c\u9ed1\u767d\u683c\u6b63\u597d\u6784\u6210\u4e8c\u5206\u56fe\uff0c\u8fd9\u6837\u767d\u683c\u5411\u9ed1\u683c\u8d70\u6d41\u91cf\uff0c\u6bcf\u4e2a\u8fb9\u90fd\u8bbe\u5355\u4f4d\u6d41\u91cf\u8868\u793a\u8fd9\u4e2a\u767d\u683c\u548c\u8fd9\u4e2a\u9ed1\u683c\u8fde\u63a5\u3002 \u9ed1\u767d\u5206\u522b\u8fde\u5230 $S,T$ \uff0c\u6bcf\u4e2a\u683c\u7ed9 $2$ \u7684\u6d41\u91cf\u8868\u793a\u80fd\u8fde\u51fa\u4e24\u6761\u8fb9\uff0c\u5b9e\u73b0 $2$ \u7684\u5ea6\u6570\u3002\u8fd9\u6837\u5c31\u884c\u4e86\n\n\u6700\u540e\uff0c\u5982\u679c\u6ee1\u6d41\u663e\u7136\u662f `YES` \uff0c\u5982\u679c\u975e\u6ee1\u6d41\uff0c\u90a3\u80af\u5b9a\u6709\u683c\u5b50\u5ea6\u6570\u4e0d\u5230 $2$ \uff0c\u662f `NO`\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<queue>\n#include<vector>\n#define ll long long\nusing namespace std;\n\nstruct ed\n{\n\tint pre,to,cap;\n}edge[1000010];\nint at=1,ptr[100010];\n\nint ss,tt,totflow;\n\nint n,m,mapx[110][110],id[110][110],col[110][110];\nint dx[4]={0,-1,0,1},dy[4]={-1,0,1,0};\n\ntemplate<typename int_t>\nvoid readx(int_t& x)\n{\n\tx=0; int_t k=1; char ch=0;\n\twhile (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n\twhile (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n\tx*=k;\n}\n\nvoid Is(int fx,int tx,int wx)\n{\n\tat++;\n\tedge[at].pre=ptr[fx];\n\tedge[at].to=tx;\n\tedge[at].cap=wx;\n\tptr[fx]=at;\n\tat++;\n\tedge[at].pre=ptr[tx];\n\tedge[at].to=fx;\n\tedge[at].cap=0;\n\tptr[tx]=at;\n}\n\n// Dinic\nint lvl[100010],cur[100010];\nqueue<int> que;\nbool BFS()\n{\n\tmemset(lvl,0,sizeof lvl); lvl[ss]=1; que.push(ss); int cac;\n\twhile (!que.empty())\n\t{\n\t\tcac=que.front(); que.pop();\n\t\tfor (int v=ptr[cac];v;v=edge[v].pre)\n\t\t\tif ((!lvl[edge[v].to]) && edge[v].cap)\n\t\t\t{\n\t\t\t\tlvl[edge[v].to]=lvl[cac]+1;\n\t\t\t\tque.push(edge[v].to);\n\t\t\t}\n\t}\n\tif (!lvl[tt]) return 0;\n\tmemcpy(cur,ptr,sizeof ptr);\n\treturn 1;\n}\nint DFS(int now,int minf)\n{\n\tif (!minf || now==tt) return minf;\n\tint sumf=0,needf=0;\n\tfor (int v=cur[now];v;v=edge[v].pre) if (lvl[edge[v].to]==lvl[now]+1)\n\t{\n\t\tcur[now]=v;\n\t\tif ( (needf=DFS(edge[v].to,min(minf,edge[v].cap))) )\n\t\t{\n\t\t\tsumf+=needf; minf-=needf;\n\t\t\tedge[v].cap-=needf; edge[v^1].cap+=needf;\n\t\t\tif (!minf) break;\n\t\t}\n\t}\n\treturn sumf;\n}\n\nvoid Solve()\n{\n\tmemset(ptr,0,sizeof ptr); at=1;\n\tmemset(id,0,sizeof id); totflow=0;\n\tmemset(mapx,0,sizeof mapx);\n\t\n\tchar ch; int tmp=0,cnt=0,qwq=0;\n\treadx(n); readx(m); \n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m;j++)\n\t\t{\n\t\t\tch=0; while (ch!='#' && ch!='.') ch=getchar();\n\t\t\tif (ch=='.') { mapx[i][j]=1; qwq++; } \n\t\t\telse mapx[i][j]=0;\n\t\t\tid[i][j]=++tmp;\n\t\t}\n\tif (qwq%2) { printf(\"NO\\n\"); return; }\n\t\n\t// Build Graph\n\tss=0; tt=tmp+1;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m;j++) \n\t\t{\n\t\t\tif ( ((i+j)&1) && mapx[i][j]) // white points\n\t\t\t{\n\t\t\t\tIs(ss,id[i][j],2); cnt+=2;\n\t\t\t\tfor (int w=0;w<4;w++) if (mapx[i+dx[w]][j+dy[w]])\n\t\t\t\t\tIs(id[i][j],id[i+dx[w]][j+dy[w]],1);\n\t\t\t}\n\t\t\telse if (!( (i+j)&1 )) // black points\n\t\t\t\tIs(id[i][j],tt,2); \n\t\t}\n\t\t\n\twhile (BFS()) totflow+=DFS(ss,2*1e9);\n\tif (totflow==cnt) printf(\"YES\\n\");\n\telse printf(\"NO\\n\");\n}\n\nint main()\n{\n\tint T; readx(T); \n\twhile (T--) Solve();\n}\n```",
        "postTime": 1546965625,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3877 \u3010[TJOI2010]\u6253\u626b\u623f\u95f4\u3011"
    },
    {
        "content": "## Solution\n\n\u5514\uff0c\u4e4d\u770b\u4e0a\u53bb\u6bd4\u8f83\u50cf\u662f\u4e00\u4e2a\u641c\u7d22\u9898\u3002\u3002\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\u7f51\u7edc\u6d41\u9ed1\u767d\u67d3\u8272\u7ef4\u62a4\u8fd9\u4e2a\u9898\u5e76\u4e0d\u662f\u4e00\u4ef6\u5f88\u56f0\u96be\u7684\u4e8b\u3002\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u80fd\u4ece\u4e00\u4e2a\u95e8\u51fa\u53bb\uff0c\u90a3\u4e48\u6211\u4eec\u53cd\u8fc7\u6765\u8d70\u4e00\u5b9a\u53ef\u4ee5\u4ece\u540c\u4e00\u4e2a\u95e8\u8fdb\u6765\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5b9e\u73b0\uff0c\u628a\u6bcf\u4e2a\u9ed1\u683c\u5b50\u4e0e\u6e90\u70b9\u8fde\u6d41\u91cf\u4e3a2\u7684\u8fb9\uff0c\u6bcf\u4e2a\u767d\u683c\u5b50\u4e0e\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a2\u7684\u8fb9\uff0c\u9ed1\u683c\u5b50\u548c\u767d\u683c\u5b50\u4e4b\u95f4\u7528\u6d41\u91cf\u4e3a1\u8868\u793a\u8f6c\u79fb\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u8fd9\u9053\u9898\u3002\n\n## Code\n\n```cpp\n#pragma comment(linker, \"/STACK:1024000000,1024000000\")\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define re register\n#define inf 400000000\n#define MAXN 10001\n#define MAXM 100001\nusing namespace std;\nint n,s,q,dis[2000011],t,l,cur[200051],m,tot,sum;\nstruct po\n{\n    int nxt,to,w;\n}edge[MAXM];\nint head[MAXN],dep[MAXN],num=-1;\nchar a[101][101];\nint id[101][101],nm;\nint dx[5]={0,1,0,-1,0};\nint dy[5]={0,0,1,0,-1};\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch>'9'||ch<'0')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\ninline void add_edge(int from,int to,int w)\n{\n    edge[++num].nxt=head[from];\n    edge[num].to=to;\n    edge[num].w=w;\n    head[from]=num;\n}\ninline void add(int from,int to,int w)\n{\n    add_edge(from,to,w);\n    add_edge(to,from,0);\n}\ninline bool bfs()\n{\n    memset(dep,0,sizeof(dep));\n    queue<int> q;\n    while(!q.empty())\n    q.pop();\n    q.push(s);\n    dep[s]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(re int i=head[u];i!=-1;i=edge[i].nxt)\n        {\n            int v=edge[i].to;\n            if(dep[v]==0&&edge[i].w>0)\n            {\n                dep[v]=dep[u]+1;\n                if(v==t)\n                return 1;\n                q.push(v);\n            }\n        }\n    }\n    return 0;\n}\ninline int dfs(int u,int dis)\n{\n    if(u==t)\n    return dis;\n    int diss=0;\n    for(re int& i=cur[u];i!=-1;i=edge[i].nxt)\n    {\n        int v=edge[i].to;\n        if(edge[i].w!=0&&dep[v]==dep[u]+1)\n        {\n            int check=dfs(v,min(dis,edge[i].w));\n            if(check>0)\n            {\n                dis-=check;\n                diss+=check;\n                edge[i].w-=check;\n                edge[i^1].w+=check;\n                if(dis==0) break;\n            }\n        }\n    }\n    return diss;\n}\ninline int dinic()\n{\n    int ans=0;\n    while(bfs())\n    {\n        for(re int i=0;i<=t;i++)\n        cur[i]=head[i];\n        while(int d=dfs(s,inf))\n        ans+=d;\n    }\n    return ans;\n}\ninline void prepare()\n{\n\tmemset(head,-1,sizeof(head));\n\tnum=-1;nm=0;\n\tsum=0;tot=0;\n}\nint main() \n{\n    //freopen(\"date.in\",\"r\",stdin);\n    int T=read();\n    while(T--){\n    \tprepare();\n    \tn=read();m=read();\n    \tfor(re int i=1;i<=n;i++)\n    \t\tfor(re int j=1;j<=m;j++){\n    \t\t\tcin>>a[i][j];\n    \t\t\tid[i][j]=++nm;\n    \t\t\tif(a[i][j]!='#') tot++;\n    \t\t}\n    \ts=0;t=n*m+1;\n    \tif(tot%2==1){cout<<\"NO\"<<endl;continue;}\n    \tfor(re int i=1;i<=n;i++)\n    \t\tfor(re int j=1;j<=m;j++){\n    \t\t\tif(i+j&1==1){\n    \t\t\t\tif(a[i][j]!='#'){\n    \t\t\t\t\tadd(s,id[i][j],2);sum+=2;\n    \t\t\t\t\tfor(re int k=1;k<=4;k++){\n    \t\t\t\t\t\tint lx=i+dx[k],ly=j+dy[k];\n    \t\t\t\t\t\tif(lx>=1&&lx<=n&&ly>=1&&ly<=m&&a[lx][ly]!='#')\n    \t\t\t\t\t\t\tadd(id[i][j],id[lx][ly],1);\n    \t\t\t\t\t}\n    \t\t\t\t} \n    \t\t\t}else add(id[i][j],t,2);\n    \t\t}\n    \tint d=dinic();\n    \tif(d==sum) cout<<\"YES\"<<endl;\n    \telse cout<<\"NO\"<<endl;\n    }\n    return 0;\n}\n\n```",
        "postTime": 1525432083,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3877 \u3010[TJOI2010]\u6253\u626b\u623f\u95f4\u3011"
    }
]