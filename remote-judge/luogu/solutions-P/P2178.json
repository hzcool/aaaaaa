[
    {
        "content": "\u8003\u8651\u6700\u88f8\u7684\u66b4\u529b\n\n\u679a\u4e3e\u6bcf\u6b21\u7684\u957f\u5ea6\n\n\u4ee5\u53ca\u4e24\u4e2a\u5f00\u59cb\u7684\u4f4d\u7f6e\n\n\u68c0\u67e5\u4ee5\u4e0b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\n\n\u590d\u6742\u5ea6$O(n^3)$\n\n$15\uff5e20$\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define ll long long\n#define MAX 320000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nint n;\nchar s[MAX];\nint lg[MAX],v[MAX];\nstruct SA\n{\n    int p[20][MAX],a[MAX];\n    int x[MAX],y[MAX],t[MAX];\n    int SA[MAX],height[MAX],rk[MAX];\n    bool cmp(int i,int j,int k){return y[i]==y[j]&&y[i+k]==y[j+k];}\n    void init()\n        {\n            memset(SA,0,sizeof(SA));\n            memset(height,0,sizeof(height));\n            memset(rk,0,sizeof(rk));\n            memset(x,0,sizeof(x));\n            memset(y,0,sizeof(y));\n            memset(t,0,sizeof(t));\n            memset(a,0,sizeof(a));\n        }\n    void GetSA()\n        {\n            int m=50;\n            for(int i=1;i<=n;++i)t[x[i]=a[i]]++;\n            for(int i=1;i<=m;++i)t[i]+=t[i-1];\n            for(int i=n;i>=1;--i)SA[t[x[i]]--]=i;\n            for(int k=1;k<=n;k<<=1)\n            {\n                int p=0;\n                for(int i=n-k+1;i<=n;++i)y[++p]=i;\n                for(int i=1;i<=n;++i)if(SA[i]>k)y[++p]=SA[i]-k;\n                for(int i=0;i<=m;++i)t[i]=0;\n                for(int i=1;i<=n;++i)t[x[y[i]]]++;\n                for(int i=1;i<=m;++i)t[i]+=t[i-1];\n                for(int i=n;i>=1;--i)SA[t[x[y[i]]]--]=y[i];\n                swap(x,y);\n                x[SA[1]]=p=1;\n                for(int i=2;i<=n;++i)\n                    x[SA[i]]=cmp(SA[i],SA[i-1],k)?p:++p;\n                if(p>=n)break;\n                m=p;\n            }\n            for(int i=1;i<=n;++i)rk[SA[i]]=i;\n            for(int i=1,j=0;i<=n;++i)\n            {\n                if(j)--j;\n                while(a[i+j]==a[SA[rk[i]-1]+j])++j;\n                height[rk[i]]=j;\n            }\n        }\n    void Pre()\n        {\n            memset(p,63,sizeof(p));\n            for(int i=1;i<=n;++i)p[0][i]=height[i];\n            for(int j=1;j<20;++j)\n                for(int i=1;i<=n;++i)\n                    p[j][i]=min(p[j-1][i],p[j-1][i+(1<<(j-1))]);\n        }\n    int Query(int i,int j)\n        {\n            return min(p[lg[j-i+1]][i],p[lg[j-i+1]][j-(1<<lg[j-i+1])+1]);\n        }\n    int lcp(int i,int j)\n        {\n            int l=min(rk[i],rk[j])+1,r=max(rk[i],rk[j]);\n            return Query(l,r);\n        }\n}SA;\nint main()\n{\n    n=read();\n    for(int i=2;i<=n;++i)lg[i]=lg[i>>1]+1;\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i)SA.a[i]=s[i]-96;\n    SA.GetSA();SA.Pre();\n    for(int i=1;i<=n;++i)v[i]=read();\n    for(int len=0;len<n;++len)\n    {\n        ll ans1=0,ans2=-1e18;\n        for(int i=1;i<=n;++i)\n            for(int j=i+1;j<=n;++j)\n            {\n                if(SA.lcp(i,j)>=len)\n                    ans1++,ans2=max(ans2,1ll*v[i]*v[j]);\n            }\n        if(ans1)printf(\"%lld %lld\\n\",ans1,ans2);\n        else\n        {\n            for(int j=len;j<n;++j)puts(\"0 0\");\n            break;\n        }\n    }\n    return 0;\n}\n\n```\n\n\n---\n\n\u7ee7\u7eed\u8003\u8651\uff0c\n\n\u89c2\u5bdf\u5230\u5982\u679c\u4e24\u676f\u9152\u662f$k$\u76f8\u4f3c\u7684\n\n\u90a3\u4e48\uff0c\u4ed6\u4eec\u4e00\u5b9a\u662f$j(j<=k)$\u76f8\u4f3c\u7684\n\n\u968f\u610f\u53ea\u9700\u8981\u679a\u4e3e\u4e24\u676f\u9152\n\n\u68c0\u67e5\u4ed6\u4eec\u662f\u591a\u5c11\u76f8\u4f3c\n\n\u7136\u540e\u505a\u4e00\u4e2a\u524d\u7f00\u548c\u5c31\u597d\u4e86\n\n\u590d\u6742\u5ea6$O(n^2)$\n\n$40$\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define ll long long\n#define MAX 320000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nint n;\nchar s[MAX];\nint lg[MAX],v[MAX];\nll ans1[MAX],ans2[MAX];\nstruct SA\n{\n    int p[20][MAX],a[MAX];\n    int x[MAX],y[MAX],t[MAX];\n    int SA[MAX],height[MAX],rk[MAX];\n    bool cmp(int i,int j,int k){return y[i]==y[j]&&y[i+k]==y[j+k];}\n    void init()\n        {\n            memset(SA,0,sizeof(SA));\n            memset(height,0,sizeof(height));\n            memset(rk,0,sizeof(rk));\n            memset(x,0,sizeof(x));\n            memset(y,0,sizeof(y));\n            memset(t,0,sizeof(t));\n            memset(a,0,sizeof(a));\n        }\n    void GetSA()\n        {\n            int m=50;\n            for(int i=1;i<=n;++i)t[x[i]=a[i]]++;\n            for(int i=1;i<=m;++i)t[i]+=t[i-1];\n            for(int i=n;i>=1;--i)SA[t[x[i]]--]=i;\n            for(int k=1;k<=n;k<<=1)\n            {\n                int p=0;\n                for(int i=n-k+1;i<=n;++i)y[++p]=i;\n                for(int i=1;i<=n;++i)if(SA[i]>k)y[++p]=SA[i]-k;\n                for(int i=0;i<=m;++i)t[i]=0;\n                for(int i=1;i<=n;++i)t[x[y[i]]]++;\n                for(int i=1;i<=m;++i)t[i]+=t[i-1];\n                for(int i=n;i>=1;--i)SA[t[x[y[i]]]--]=y[i];\n                swap(x,y);\n                x[SA[1]]=p=1;\n                for(int i=2;i<=n;++i)\n                    x[SA[i]]=cmp(SA[i],SA[i-1],k)?p:++p;\n                if(p>=n)break;\n                m=p;\n            }\n            for(int i=1;i<=n;++i)rk[SA[i]]=i;\n            for(int i=1,j=0;i<=n;++i)\n            {\n                if(j)--j;\n                while(a[i+j]==a[SA[rk[i]-1]+j])++j;\n                height[rk[i]]=j;\n            }\n        }\n    void Pre()\n        {\n            memset(p,63,sizeof(p));\n            for(int i=1;i<=n;++i)p[0][i]=height[i];\n            for(int j=1;j<20;++j)\n                for(int i=1;i<=n;++i)\n                    p[j][i]=min(p[j-1][i],p[j-1][i+(1<<(j-1))]);\n        }\n    int Query(int i,int j)\n        {\n            return min(p[lg[j-i+1]][i],p[lg[j-i+1]][j-(1<<lg[j-i+1])+1]);\n        }\n    int lcp(int i,int j)\n        {\n            int l=min(rk[i],rk[j])+1,r=max(rk[i],rk[j]);\n            return Query(l,r);\n        }\n}SA;\nint main()\n{\n    n=read();\n    for(int i=2;i<=n;++i)lg[i]=lg[i>>1]+1;\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i)SA.a[i]=s[i]-96;\n    SA.GetSA();SA.Pre();\n    for(int i=1;i<=n;++i)v[i]=read();\n    memset(ans2,-63,sizeof(ans2));\n    for(int i=1;i<=n;++i)\n        for(int j=i+1;j<=n;++j)\n        {\n            int len=SA.lcp(i,j);\n            ans1[0]++;ans1[len+1]--;\n            ans2[len]=max(ans2[len],1ll*v[i]*v[j]);\n        }\n    for(int i=1;i<=n;++i)ans1[i]+=ans1[i-1];\n    for(int i=n;i>=0;--i)ans2[i]=max(ans2[i],ans2[i+1]);\n    for(int i=0;i<n;++i)printf(\"%lld %lld\\n\",ans1[i],!ans1[i]?0:ans2[i]);\n    return 0;\n}\n\n```\n\n---\n\n\u5982\u679c\u6211\u4eec\u6c42\u51fa$height$\u6570\u7ec4\u4e4b\u540e\n\n\u679a\u4e3e\u4e00\u4e2a\u957f\u5ea6$len$\uff0c\u6309\u7167$height$\u5206\u7c7b\n\n\u5982\u679c\u4e00\u6bb5\u8fde\u7eed\u7684$height$\u90fd\u4e0d\u5c0f\u4e8e\u4e86$len$\n\n\u8bc1\u660e\u8fd9\u4e00\u6bb5\u90fd\u4f1a\u4ea7\u751f\u8d21\u732e\n\n\u6240\u4ee5\u8bb0\u5f55\u8fd9\u4e00\u6bb5\u4ea7\u751f\u7684\u8d21\u732e\uff0c\n\n\u81f3\u4e8e\u6700\u5927\u503c\uff0c\u5c31\u5728\u8fd9\u4e00\u6bb5\u91cc\u9762\u8bb0\u5f55\u6700\u5927\uff0c\u6b21\u5927\uff0c\u6700\u5c0f\uff0c\u6b21\u5c0f\u503c\n\n\u62fc\u8d77\u6765\u7b97\u4e00\u4e0b\n\n\n\u56e0\u4e3a$height$\u6700\u5927\u503c\u53ef\u4ee5\u5f88\u5c0f\n\n\u6240\u4ee5\u8fd9\u6837\u53ef\u4ee5\u8fc7$50$\u5206\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define ll long long\n#define MAX 320000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nint n;\nchar s[MAX];\nint lg[MAX],v[MAX];\nll ans1[MAX],ans2[MAX];\nstruct SA\n{\n    int p[20][MAX],a[MAX];\n    int x[MAX],y[MAX],t[MAX];\n    int SA[MAX],height[MAX],rk[MAX];\n    bool cmp(int i,int j,int k){return y[i]==y[j]&&y[i+k]==y[j+k];}\n    void init()\n        {\n            memset(SA,0,sizeof(SA));\n            memset(height,0,sizeof(height));\n            memset(rk,0,sizeof(rk));\n            memset(x,0,sizeof(x));\n            memset(y,0,sizeof(y));\n            memset(t,0,sizeof(t));\n            memset(a,0,sizeof(a));\n        }\n    void GetSA()\n        {\n            int m=50;\n            for(int i=1;i<=n;++i)t[x[i]=a[i]]++;\n            for(int i=1;i<=m;++i)t[i]+=t[i-1];\n            for(int i=n;i>=1;--i)SA[t[x[i]]--]=i;\n            for(int k=1;k<=n;k<<=1)\n            {\n                int p=0;\n                for(int i=n-k+1;i<=n;++i)y[++p]=i;\n                for(int i=1;i<=n;++i)if(SA[i]>k)y[++p]=SA[i]-k;\n                for(int i=0;i<=m;++i)t[i]=0;\n                for(int i=1;i<=n;++i)t[x[y[i]]]++;\n                for(int i=1;i<=m;++i)t[i]+=t[i-1];\n                for(int i=n;i>=1;--i)SA[t[x[y[i]]]--]=y[i];\n                swap(x,y);\n                x[SA[1]]=p=1;\n                for(int i=2;i<=n;++i)\n                    x[SA[i]]=cmp(SA[i],SA[i-1],k)?p:++p;\n                if(p>=n)break;\n                m=p;\n            }\n            for(int i=1;i<=n;++i)rk[SA[i]]=i;\n            for(int i=1,j=0;i<=n;++i)\n            {\n                if(j)--j;\n                while(a[i+j]==a[SA[rk[i]-1]+j])++j;\n                height[rk[i]]=j;\n            }\n        }\n    void Pre()\n        {\n            memset(p,63,sizeof(p));\n            for(int i=1;i<=n;++i)p[0][i]=height[i];\n            for(int j=1;j<20;++j)\n                for(int i=1;i<=n;++i)\n                    p[j][i]=min(p[j-1][i],p[j-1][i+(1<<(j-1))]);\n        }\n    int Query(int i,int j)\n        {\n            return min(p[lg[j-i+1]][i],p[lg[j-i+1]][j-(1<<lg[j-i+1])+1]);\n        }\n    int lcp(int i,int j)\n        {\n            int l=min(rk[i],rk[j])+1,r=max(rk[i],rk[j]);\n            return Query(l,r);\n        }\n}SA;\nbool cmp(int a,int b){return SA.height[a]>SA.height[b];}\nint id[MAX];\nvoid update(int x,int &zd,int &cd,int &zx,int &cx)\n{\n    if(x>zd)cd=zd,zd=x;\n    else if(x>cd)cd=x;\n    if(x<zx)cx=zx,zx=x;\n    else if(x<cx)cx=x;\n}\nll check_max(int zd,int cd,int zx,int cx)\n{\n    ll ret=-1e18;\n    if(zd!=-2e9&&cd!=-2e9)ret=max(ret,1ll*zd*cd);\n    if(zx!=+2e9&&cx!=+2e9)ret=max(ret,1ll*zx*cx);\n    return ret;\n}\nint main()\n{\n    n=read();\n    for(int i=2;i<=n;++i)lg[i]=lg[i>>1]+1;\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i)SA.a[i]=s[i]-96;\n    SA.GetSA();SA.Pre();\n    for(int i=1;i<=n;++i)v[i]=read(),id[i]=i;;\n    memset(ans2,-63,sizeof(ans2));\n\n    sort(&id[1],&id[n+1],cmp);\n\n    for(int len=0;len<=n;++len)\n    {\n        int zd,zx,cd,cx,cnt=0;\n        zd=cd=-2e9;zx=cx=2e9;\n        for(int i=2;i<=n;++i)\n        {\n            if(SA.height[i]<len)\n            {\n                ans2[len]=max(ans2[len],check_max(zd,cd,zx,cx));\n                zd=cd=-2e9;zx=cx=2e9;\n                cnt=0;\n            }\n            else\n            {\n                update(v[SA.SA[i]],zd,cd,zx,cx);\n                if(!cnt)update(v[SA.SA[i-1]],zd,cd,zx,cx);\n                ans1[len]+=cnt;\n                if(!cnt)ans1[len]++,cnt++;\n                cnt++;\n            }\n        }\n        ans2[len]=max(ans2[len],check_max(zd,cd,zx,cx));\n        if(!ans1[len])break;\n    }\n    for(int i=n;i>=0;--i)ans2[i]=max(ans2[i],ans2[i+1]);\n    for(int i=0;i<n;++i)printf(\"%lld %lld\\n\",ans1[i],!ans1[i]?0:ans2[i]);\n    return 0;\n}\n\n```\n\n---\n\n\u60f3\u60f3\u4e0a\u9762\u7684\u4e1c\u897f\u600e\u4e48\u4f18\u5316\uff1f\n\n\u6211\u4eec\u6bcf\u6b21\u4ece\u5c0f\u5f80\u5927\u679a\u4e3e\n\n\u5982\u679c\u6709\u4e00\u6bb5\u8fde\u7eed\u7684$height$\u90fd\u5927\u4e8e\u4e86$len$\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5728$0..len-1$\u7684\u65f6\u5019\u4e5f\u90fd\u4f1a\u88ab\u679a\u4e3e\u4e00\u904d\n\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u8003\u8651\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\n\n\u5982\u679c\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u4ed6\u4eec\u7f29\u6210\u4e00\u4e2a\u533a\u95f4\n\n\u540c\u65f6\u8bb0\u5f55\u8fd9\u4e2a\u533a\u95f4\u7684\u5927\u5c0f\uff0c\u4ee5\u53ca\u6700\u5927\uff0c\u6700\u5c0f\u503c\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u7684\u679a\u4e3e\u53ef\u4ee5\u628a\u4e00\u6bb5\u533a\u95f4\u53d8\u6210\u4e00\u4e2a\u70b9\n\n\n\u8003\u8651\u8fd9\u4e2a\u601d\u8def\uff0c\u4e5f\u4e0d\u53ef\u80fd\u6bcf\u6b21\u626b\u4e00\u8fb9\u6240\u6709\u7684\u503c\n\n\n\u6240\u4ee5\u76f4\u63a5\u628a$height$\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\n\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a$height$\u5c31\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\n\n\u5e76\u4e14\u8ba1\u7b97\u4ea7\u751f\u7684\u8d21\u732e\n\n\u6700\u540e\u6c42\u4e00\u4e2a\u540e\u7f00\u548c\u5c31\u597d\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define ll long long\n#define MAX 320000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nint n,v[MAX];\nchar s[MAX];\nll ans1[MAX],ans2[MAX];\nstruct SA\n{\n    int a[MAX];\n    int x[MAX],y[MAX],t[MAX];\n    int SA[MAX],height[MAX],rk[MAX];\n    bool cmp(int i,int j,int k){return y[i]==y[j]&&y[i+k]==y[j+k];}\n    void GetSA()\n        {\n            int m=50;\n            for(int i=1;i<=n;++i)t[x[i]=a[i]]++;\n            for(int i=1;i<=m;++i)t[i]+=t[i-1];\n            for(int i=n;i>=1;--i)SA[t[x[i]]--]=i;\n            for(int k=1;k<=n;k<<=1)\n            {\n                int p=0;\n                for(int i=n-k+1;i<=n;++i)y[++p]=i;\n                for(int i=1;i<=n;++i)if(SA[i]>k)y[++p]=SA[i]-k;\n                for(int i=0;i<=m;++i)t[i]=0;\n                for(int i=1;i<=n;++i)t[x[y[i]]]++;\n                for(int i=1;i<=m;++i)t[i]+=t[i-1];\n                for(int i=n;i>=1;--i)SA[t[x[y[i]]]--]=y[i];\n                swap(x,y);\n                x[SA[1]]=p=1;\n                for(int i=2;i<=n;++i)\n                    x[SA[i]]=cmp(SA[i],SA[i-1],k)?p:++p;\n                if(p>=n)break;\n                m=p;\n            }\n            for(int i=1;i<=n;++i)rk[SA[i]]=i;\n            for(int i=1,j=0;i<=n;++i)\n            {\n                if(j)--j;\n                while(a[i+j]==a[SA[rk[i]-1]+j])++j;\n                height[rk[i]]=j;\n            }\n        }\n}SA;\nbool cmp(int a,int b){return SA.height[a]>SA.height[b];}\nint id[MAX];\nint f[MAX],mm[MAX],mi[MAX],size[MAX];\nll ans[MAX];\nint getf(int x){return x==f[x]?x:f[x]=getf(f[x]);}\nvoid Merge(int x,int y,int len)\n{\n    x=getf(x);y=getf(y);\n    f[y]=x;\n    ans1[len]+=1ll*size[x]*size[y];\n    size[x]+=size[y];\n    ans[x]=max(ans[x],ans[y]);\n    ans[x]=max(ans[x],max(1ll*mm[x]*mm[y],1ll*mi[x]*mi[y]));\n    ans[x]=max(ans[x],max(1ll*mm[x]*mi[y],1ll*mi[x]*mm[y]));\n    mm[x]=max(mm[x],mm[y]);\n    mi[x]=min(mi[x],mi[y]);\n    ans2[len]=max(ans2[len],ans[x]);\n}\nint main()\n{\n    n=read();\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i)SA.a[i]=s[i]-96;\n    SA.GetSA();\n    for(int i=1;i<=n;++i)v[i]=read(),id[i]=i;;\n    for(int i=1;i<=n;++i)f[i]=i,size[i]=1,mm[i]=mi[i]=v[i],ans[i]=-1e18;\n    memset(ans2,-63,sizeof(ans2));\n    sort(&id[2],&id[n+1],cmp);\n    for(int i=2;i<=n;++i)\n        Merge(SA.SA[id[i]],SA.SA[id[i]-1],SA.height[id[i]]);\n    for(int i=n;i>=0;--i)ans1[i]+=ans1[i+1];\n    for(int i=n;i>=0;--i)ans2[i]=max(ans2[i],ans2[i+1]);\n    for(int i=0;i<n;++i)printf(\"%lld %lld\\n\",ans1[i],!ans1[i]?0:ans2[i]);\n    return 0;\n}\n\n```",
        "postTime": 1517020926,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u7f55\u89c1\u7684\u6284\u4e86\u4e00\u53d1\u9898\u89e3\u2026\u2026\u6bd5\u7adfNOI\u539f\u9898\u54ea\u6709\u90a3\u4e48\u5bb9\u6613\u5199\u51fa\u6765\u7684\u9053\u7406\n\n\u5e76\u6ca1\u6709\u4ec0\u4e48\u7f55\u89c1\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u601d\u8def\u8fd8\u662f\u5f88\u5de7\u5999\u7684\n\n\u4e00\u5f00\u59cb\u6211\u7684\u60f3\u6cd5\u662f\u7528\u5355\u8c03\u6808\uff0c\u800c\u4e14\u597d\u50cf\u7684\u786e\u6709\u8fd9\u79cd\u7b97\u6cd5\u7684std\uff0c\u4e0d\u8fc7\u6211\u4e71\u641e\u4e86\u4e00\u4e0b\u5348\u6837\u4f8b\u90fd\u6ca1\u8fc7\u4e8e\u662f\u53ea\u597d\u4f5c\u7f62\n\n\u6539\u4e3a\u5927\u4f17\u5e76\u67e5\u96c6\u505a\u6cd5\u3002\n\n\u9996\u5148\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u5bf9r\u76f8\u4f3c\uff0c\u5b83\u4e00\u5b9a\u662fk(0<k<r)\u76f8\u4f3c\u7684 \n\n\u6240\u4ee5\u6c42\u51faheight\u6570\u7ec4\u540e\u6309\u5176\u4e2d\u7684\u503c\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u505a\n\n\u5f53\u524d\u9700\u8981\u5904\u7406\u7684\u4e32\u4e3ai\u548ci-1\uff0c\u8bbe\u524d\u7f00\u957f\u5ea6\u4e3ak \n\n\u6613\u77e5\u82e5\u5c06\u4e24\u4e2a\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u5219\u5f53\u524d\u7684\u524d\u7f00\u5728\u5e76\u67e5\u96c6\u4e2d\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u6240\u4ee5Ans[k][0]+=\u4e24\u68f5\u6811size\u7684\u4e58\u79ef\uff08\u56e0\u4e3a\u4efb\u610f\u4e24\u4e24\u524d\u7f00\u90fd\u662fk\u76f8\u4f3c\u7684\uff0c\u53ef\u4ee5\u914d\u5bf9\uff09\n\n\u9664\u4e86\u5e76\u67e5\u96c6\u7684size\uff0c\u8fd8\u7ef4\u62a4\u4e00\u4e0b\u5e76\u67e5\u96c6\u7684max\u548cmin\u503c\uff0c\n\n\u5219Ans[k][1]=max(Ans[k][1],Max1*Max2,Min1*Min2)\n\n\u7ef4\u62a4min\u503c\u662f\u4e3a\u4e86\u9632\u6b62\u6709\u5f88\u5c0f\u7684\u8d1f\u6570\u8fd9\u79cd\u60c5\u51b5\uff08\u8d1f\u8d1f\u5f97\u6b63\uff09 \n\n\u6700\u540e\u56e0\u4e3aAns[i]\u4e5f\u662f\u6ee1\u8db3Ans[i+1]\u7684\uff0c\u6240\u4ee5\u505a\u4e2a\u524d\u7f00\u548c\u5408\u5e76\u4e00\u4e0b\u7b54\u6848\u5c31\u597d\n\n[\u4ee3\u7801](http://www.cnblogs.com/refun/p/8679198.html)",
        "postTime": 1522710429,
        "uid": 41890,
        "name": "Refun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n$\\forall i\\in[0,n)$\u6c42\u6709\u591a\u5c11\u5bf9\u540e\u7f00\u6ee1\u8db3$Len(lcp)\\ge i$,\u4ee5\u53ca\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u540e\u7f00\u7684\u6743\u503c\u4e58\u79ef\u7684\u6700\u5927\u503c\n\n---\n\n### \u9898\u89e3\n\n\u5927\u4e8e\u7b49\u4e8e\u53ef\u4ee5\u53d8\u6210\u6c42$Len(lcp)=i$,\u7136\u540e\u6c42\u4e00\u904d\u540e\u7f00\u548c,\u540e\u7f00\u6700\u5927\u503c\u5373\u53ef\n\n\u8003\u8651$Len(lcp)$\u5c31\u662f\u8fd9\u4e24\u4e2a\u540e\u7f00\u5728\u540e\u7f00\u6811\u4e0a\u7684$lca$\u6df1\u5ea6\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5efa\u51fa\u540e\u7f00\u6811,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9$DP$\u4e00\u4e0b,$DP$\u65b9\u6cd5\u548c[\u5dee\u5f02](https://blog.csdn.net/benoble_/article/details/79643433)\u4e00\u6837~~\u5dee\u5f02\u8fd9\u9053\u9898\u771f\u662f\u4e00\u9053\u597d\u6a21\u677f\u554a~~\n\n\u81f3\u4e8e\u6700\u5927\u503c,\u56e0\u4e3a\u6709\u8d1f\u6570,\u5c31\u8981\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u5b50\u6811\u91cc\u7684\u6700\u5927\u6700\u5c0f\u503c\u548c\u6b21\u5927\u6b21\u5c0f\u503c,\u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u6240\u5bf9\u4e8e\u6df1\u5ea6\u7684\u7b54\u6848\u8f6c\u79fb\u5c31\u597d\u4e86\n\n\u5f53\u7136,\u5982\u679c\u8fd9\u9897\u5b50\u6811\u91cc\u540e\u7f00\u8282\u70b9\u6570\u76ee$\\lt2$\u65f6,\u662f\u53ef\u4ee5\u76f4\u63a5\u9000\u6389\u7684\n\n```\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(register int i=a,I=b-1;i>I;--i)\n#define go(u) for(register int i=fi[u],v=e[i].to;i;v=e[i=e[i].nx].to)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nusing namespace std;\nchar ss[1<<17],*A=ss,*B=ss;\ninline char gc(){return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?-1:*A++;}\ntemplate<class T>inline void sd(T&x){\n    char c;T y=1;while(c=gc(),(c<48||57<c)&&c!=-1)if(c==45)y=-1;x=c-48;\n    while(c=gc(),47<c&&c<58)x=x*10+c-48;x*=y;\n}\ninline void gs(char*s){char c;while(c=gc(),c<32);*s++=c;while(c=gc(),c>32)*s++=c;}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ntemplate<class T>inline void we(T x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=' ';\n}\nconst int N=3e5+5,M=2*N,inf=1e9+7;\ntypedef long long ll;\ntypedef int arr[M];\nint n,w[N];char s[N];\nstruct SAM{\n    int las,T,ch[M][26];arr fa,len,sz;\n    SAM(){las=T=1;}\n    inline void ins(int c,int w){\n        int p=las,np;fa[np=las=++T]=1,len[np]=len[p]+1;\n        for(;p&&!ch[p][c];p=fa[p])ch[p][c]=np;\n        mx[T]=mi[T]=w,mx2[T]=-inf,mi2[T]=inf,sz[T]=1;\n        if(p){\n            int q=ch[p][c],nq;\n            if(len[p]+1==len[q])fa[np]=q;\n            else{\n                nq=++T;mx[T]=mx2[T]=-inf,mi[T]=mi2[T]=inf;\n                fa[nq]=fa[q],len[nq]=len[p]+1,memcpy(ch[nq],ch[q],4*26);\n                for(fa[np]=fa[q]=nq;ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n            }\n        }\n    }\n    struct eg{int nx,to;}e[M];\n    int ce;arr fi,mx,mx2,mi,mi2,sx;ll sum[M],ans[M];\n    inline void add(int u,int v){e[++ce]=(eg){fi[u],v},fi[u]=ce;}\n    inline void ck1(int u,int w){if(w>mx[u])mx2[u]=mx[u],mx[u]=w;else if(w>mx2[u])mx2[u]=w;}\n    inline void ck2(int u,int w){if(w<mi[u])mi2[u]=mi[u],mi[u]=w;else if(w<mi2[u])mi2[u]=w;}\n    void dfs(int u){\n        int siz=0;\n        go(u){\n            dfs(v);siz+=sz[v];\n            ck1(u,mx[v]),ck1(u,mx2[v]);\n            ck2(u,mi[v]),ck2(u,mi2[v]);\n\n        }if(siz+sz[u]<2)return;\n        cmax(ans[len[u]],max((ll)mx[u]*mx2[u],(ll)mi[u]*mi2[u]));\n        go(u)sum[len[u]]+=(ll)sz[u]*sz[v],sz[u]+=sz[v];\n    }\n    inline void sol(){\n    \tmx[1]=mx2[1]=-inf,mi[1]=mi2[1]=inf;\n        memset(ans,-63,sizeof ans);\n        fp(i,2,T)add(fa[i],i);dfs(1);\n        fd(i,n-1,0)sum[i]+=sum[i+1],cmax(ans[i],ans[i+1]);\n        fp(i,0,n-1)we(sum[i]),we(!sum[i]?0:ans[i]),sr[++C]='\\n';\n    }\n}p;\nint main(){\n    #ifndef ONLINE_JUDGE\n        file(\"s\");\n    #endif\n    sd(n),gs(s+1);fp(i,1,n)sd(w[i]);\n    fd(i,n,1)p.ins(s[i]-'a',w[i]);p.sol();\nreturn Ot(),0;\n}\n```",
        "postTime": 1521721145,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u539f\u9898\u610f\uff1a\u6709\u591a\u5c11\u4e2a\u4e32\u7684$lcp(i, j) >= r$(\u5176\u4e2dr\u4e3a1~n\u4e2d\u6bcf\u4e00\u4e2a\u6570)\n\n\u6211\u4eec\u5148\u4e0d\u7ba1\u7b2c\u4e8c\u95ee\uff0c\u53ea\u770b\u7b2c\u4e00\u95ee\n\n### \u7b2c\u4e00\u6b21\u8f6c\u5316\n\u9996\u5148\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u4e00\u4e2ar\u76f8\u4f3c\u7684\u4e24\u676f\u9152\uff0c\u4ed6\u4eec\u80af\u5b9a\u4e5f\u662fr-1\u76f8\u4f3c\uff0cr-2\u76f8\u4f3c\u2026\u2026\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u8003\u5f55\u5012\u5e8f\u679a\u4e3e\uff0c\u65bc\u662f\u95ee\u9898\u8f6c\u5316\u6210\u4e86\uff1a\u6709\u591a\u5c11\u4e2a\u4e32\u7684$lcp(i, j) == r$(\u5176\u4e2dr\u4e3a1~n\u4e2d\u6bcf\u4e00\u4e2a\u6570)\n\n### \u7b2c\u4e8c\u6b21\u8f6c\u5316\n\n\u770b\u5230lcp\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u540e\u7f00\u6570\u7ec4\uff0c$lcp(i, j) == r$ \u53c8\u7b49\u4ef7\u4e8e$min(he[i + 1], he[i + 2], \u2026\u2026, he[j])$\n\n\u4e8e\u662f\u6211\u4eec\u628a\u95ee\u9898\u91cd\u65b0\u8003\u8651\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\u6c42\u51fahe\u6570\u7ec4\uff0c\u7136\u540e\u95ee\u6709\u591a\u5c11\u4e2a\u6570\u5bf9\uff0c\u6ee1\u8db3$i - j$\u7684he\u7684\u6700\u5c0f\u503c\u6070\u597d\u7b49\u4e8er\n\n### \u7b2c\u4e09\u6b21\u8f6c\u5316\n\n\u6211\u4eec\u628ahe\u6570\u7ec4\u964d\u5e8f\u6392\u4e00\u904d\u5e8f\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u63d2\u5165\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u7406\u89e3\u6210\uff1a\u5bf9\u4e8e\u6bcf\u6b21\u63d2\u5165\uff0c\u6211\u53ef\u4ee5\u8fde\u63a5\u8fde\u7eed\u4e24\u5806\u6570\uff0c\u7136\u540e\u8fd9\u4e24\u5806\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u503c\u90fd\u6bd4r\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e00\u5806\u6570\u7684\u4e2a\u6570\u548c\u7b2c\u4e8c\u5806\u6570\u7684\u4e2a\u6570\u76f8\u4e58\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e24\u5806\u6570\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n\u5047\u8bbe\u6211\u73b0\u5728\u7684\u6570\u5217\u957f\u8fd9\u6837\uff08\u8fd8\u672a\u88ab\u63d2\u5165\u7684\u6570\uff08\u5373\u6bd4r\u5c0f\u7684\u6570\uff09\u4e3a*\uff09\uff1a$5\\ 4\\ *\\ 4\\ 5\\ 6\\ 7\\ *\\ *\\ 4\\ *\\ 8$\n\n\u7136\u540e\u6211\u73b0\u5728\u8981\u5728\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a3\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u5171\u6709$(2 + 1) * (4 + 1) - 1 = 14$\u79cd\u65b9\u6848\uff08+1\u662f\u56e0\u4e3a3\u672c\u8eab\u4e5f\u53ef\u4ee5\u7b97\u8fdb\u6765\uff0c -1\u662f\u56e0\u4e3a$[3, 3]$\u4e0d\u80fd\u7b97\uff09\n\n\u6240\u4ee5\u8fd9\u4e2a\u5408\u5e76\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u5e76\u67e5\u96c6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2asize\u5c31\u53ef\u4ee5\u6c42\u51fa\u7b2c\u4e00\u95ee\u4e86\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u5373\u53ef\uff08\u7ef4\u62a4\u6700\u5c0f\u503c\u662f\u56e0\u4e3a\u6709\u590d\u6570\uff09\n\n\n\u4ee3\u7801\u5982\u4e0b\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define int long long\n#define inf 1234567890000000000\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define _ 300005\nint n, m, sa[_], rk[_], tp[_], a[_], he[_], val[_], ans1[_], ans2[_], now, num, b[_];\nchar c[_];\nvector<int> q[_];\nstruct set {int size, mi, ma, fa;}e[_];\nil void Qsort() {\n\trep(i, 1, m) a[i] = 0;\n\trep(i, 1, n) ++ a[rk[i]];\n\trep(i, 1, m) a[i] += a[i - 1];\n\tdrep(i, 1, n) sa[a[rk[tp[i]]] --] = tp[i];\n}\nil void get_sort() {\n\tfor(re int w = 1, p = 0; p < n && w <= n; m = p, p = 0, w <<= 1) {\n\t\trep(i, n - w + 1, n) tp[++ p] = i;\n\t\trep(i, 1, n) if(sa[i] > w) tp[++ p] = sa[i] - w;\n\t\tQsort(), swap(tp, rk), rk[sa[1]] = p = 1;\n\t\trep(i, 2, n) rk[sa[i]] = (tp[sa[i]] == tp[sa[i - 1]] && tp[sa[i] + w] == tp[sa[i - 1] + w]) ? p : ++ p;\n\t}\n}\nil void get_height() {\n\tint j = 0;\n\trep(i, 1, n) {\n\t\tif(rk[i] == 1) continue;\n\t\tif(j) -- j;\n\t\twhile(c[i + j] == c[sa[rk[i] - 1] + j]) ++ j;\n\t\the[rk[i]] = j;\n\t}\n}\nil int find(int x) {\n\twhile(x != e[x].fa) x = e[x].fa = e[e[x].fa].fa;\n\treturn x;\n}\nil void merge(int a, int b) {\n\tint x = find(a), y = find(b);\n\tnow += e[x].size * e[y].size, num = max(num, max(e[x].ma * e[y].ma, e[x].mi * e[y].mi));\n\te[y].fa = x, e[x].size += e[y].size, e[x].ma = max(e[x].ma, e[y].ma), e[x].mi = min(e[x].mi, e[y].mi);\n}\nsigned main() {\n\tn = read(), scanf(\"%s\", c + 1), m = 26, num = -inf;\n\trep(i, 1, n) b[i] = read(), rk[i] = c[i] - 'a' + 1, tp[i] = i;\n\tQsort(), get_sort(), get_height();\n\trep(i, 1, n) e[i].fa = i, e[i].size = 1, e[i].ma = e[i].mi = b[sa[i]], q[he[i]].push_back(i);\n\tdrep(i, 0, n - 1) {\n\t\tint pax = q[i].size();\n\t\trep(j, 0, pax - 1) merge(q[i][j], q[i][j] - 1);\n\t\tif(now) ans1[i] = now, ans2[i] = num;\n\t}\n\trep(i, 0, n - 1) printf(\"%lld %lld\\n\", ans1[i], ans2[i]);\n\treturn 0;\n}\n```",
        "postTime": 1566967316,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "**\u601d\u8def:\u540e\u7f00\u6570\u7ec4\uff0b\u5355\u8c03\u6808**\n\n\u6211\u4eec\u5148\u8ba1\u7b97\u4e25\u683ck\u76f8\u4f3c\u7684\u4e24\u74f6\u9152\u7684\u7b54\u6848\uff0c\u6240\u8c13\u4e25\u683ck\u76f8\u4f3c\uff0c\u5c31\u662f\u4ee5\u8fd9\u4e24\u74f6\u9152\u5bf9\u5e94\u7684\u540e\u7f00\u5f00\u5934\uff08\u6ce8\u89e3\uff1a\u5b57\u9762\u610f\u601d\uff0c\u4e00\u4e2a\u540e\u7f00\u7684\u5f00\u5934\u4f4d\u7f6e\uff09\uff0c\u5b83\u4eec\u7684\u6700\u957f\u524d\u7f00\u957f\u5ea6\u6b63\u597d\u662fk\u3002\u7136\u540e\u8f93\u51fa\u7b54\u6848\u524d\u4ece\u540e\u5f80\u524d\u628a\u65b9\u6848\u6570\u7d2f\u8ba1\u4e00\u4e0b\uff0c\u628a\u6700\u5927\u503c\u53d6max\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u9996\u5148\u540e\u7f00\u6570\u7ec4\u548cHeight\u90fd\u5904\u7406\u51fa\u6765\uff0c\u7136\u540e\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u6392\u540d\u4e3ai\u548cj\u7684\u4e24\u4e2a\u540e\u7f00($i<j$)\uff0c\u5b83\u4eec\u7684lcp\u5c31\u662f$Height_i$\u5230$Height_j$\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\n\n\u6211\u4eec\u6309\u7167\u6392\u540d\u4ece\u5c0f\u5230\u5927\u5f00\u59cb\u5904\u7406\u3002\n\n\u8fd9\u4e2a\u5355\u8c03\u6808\u4e0d\u662f\u4e00\u822c\u7684\u5355\u8c03\u6808\uff0c\u91cc\u9762\u5b58\u7684\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u4e00\u4e2a\u540e\u7f00\u5f00\u5934\uff0c\u800c\u662f\u4e00\u4e2a\u6309\u7167\u6392\u540d\u8fde\u7eed\u7684\u540e\u7f00\u5f00\u5934\u533a\u95f4\u3002\u5e76\u4e14\u6211\u4eec\u8981\u987a\u8def\u7ef4\u62a4\uff1a\n\n**st**\uff1a\u533a\u95f4\u672b\u5c3eHeight\u503c\uff0c\u5373\u5982\u679c\u8be5\u533a\u95f4\u540e\u9762\u7684\u4e00\u4e2a\u540e\u7f00\u5f00\u5934\u8981\u548c\u8be5\u533a\u95f4\u91cc\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u642d\u914d\uff0c\u9152\u90fd\u662fst\u76f8\u4f3c\u7684\u3002\u8fd9\u4e5f\u662f\u5355\u8c03\u6808\u4e2d\u8981\u5355\u8c03\u7684\u4e1c\u897f\u3002\n\n**sz**:\u533a\u95f4\u5143\u7d20\u4e2a\u6570\n\n**mx**:\u533a\u95f4\u6700\u5927\u503c\n\n**mi**:\u533a\u95f4\u6700\u5c0f\u503c\n\n\u65e2\u8981\u7ef4\u62a4\u6700\u5927\u503c\u53c8\u8981\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u662f\u56e0\u4e3a\u8d1f\u8d1f\u5f97\u6b63\uff0c\u4e24\u4e2a\u8d1f\u6570\u7684\u4e58\u79ef\u53ef\u80fd\u662f\u6700\u5927\u503c\u3002\n\n\u7136\u540e\u6309\u6392\u540d\u4ece\u5927\u5230\u5c0f\u5904\u7406\u65f6\uff0c\u5bf9\u4e8e\u540e\u7f00\u5f00\u5934i,\u5982\u679c$Height_{i+1}$\u5c0f\u4e8e$st(top)$\uff0c\u8bf4\u660e\u518d\u5f80\u540e\u7684\u540e\u7f00\u5f00\u5934\u548ci\u53ca\u6808\u9876\u533a\u95f4\u7684\u540e\u7f00\u5f00\u5934\u642d\u914d\u7684\u65f6\u5019\uff0c\u9152\u4e0d\u518d\u662f$st(top)$\u76f8\u4f3c\u7684\uff0c\u800c\u53d8\u6210\u4e86$Height_{i+1}$\u76f8\u4f3c\u7684\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8ba1\u7b97i\u4e0e\u6808\u9876\u533a\u95f4\u5143\u7d20\u642d\u914d\u7684\u8d21\u732e\uff0c\u518d\u5c06i\u548c\u6808\u9876\u533a\u95f4\u5408\u5e76\uff0c\u6808\u9876\u5f39\u51fa\u3002\u5bf9\u4e8e\u65b0\u7684\u6808\u9876\uff0c\u4ee5\u6b64\u7c7b\u63a8......\n\n\u6700\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u8fd8\u7559\u5728\u6808\u91cc\u7684\u82e5\u5e72\u533a\u95f4\uff0c\u4ece\u540e\u5f80\u524d\u7528\u76f8\u4f3c\u7684\u65b9\u6cd5\u5904\u7406\u4e00\u8fb9\u5373\u53ef\u3002\n\n\u5177\u4f53\u5904\u7406\u65b9\u6cd5\u6709\u70b9\u8bb2\u4e0d\u6e05\u695a\uff0c\u770b\u4ee3\u7801work\u51fd\u6570\u5427\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tint q=0,w=1;char ch=' ';\n\twhile(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n\tif(ch=='-') w=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\n\treturn q*w;\n}\n#define RI register int\ntypedef long long LL;\nconst int N=300005,inf=0x3f3f3f3f;\nint n,m;\nint v[N],a[N],x[N],y[N],T[N],SA[N],Hei[N];\nchar s[N];\nvoid Rsort() {\n\tfor(RI i=0;i<=m;++i) T[i]=0;\n\tfor(RI i=1;i<=n;++i) ++T[x[y[i]]];\n\tfor(RI i=1;i<=m;++i) T[i]+=T[i-1];\n\tfor(RI i=n;i>=1;--i) SA[T[x[y[i]]]--]=y[i];\n}\nint cmp(RI i,RI j,RI num) {return y[i]==y[j]&&y[i+num]==y[j+num];}\nvoid getSA() {\n\tfor(RI i=1;i<=n;++i) a[i]=s[i-1]-'a'+1,x[i]=a[i],y[i]=i;\n\tm=26,Rsort();\n\tfor(RI km=1,num=1;km<n;num+=num,m=km) {\n\t\tkm=0;\n\t\tfor(RI i=n-num+1;i<=n;++i) y[++km]=i;\n\t\tfor(RI i=1;i<=n;++i) if(SA[i]>num) y[++km]=SA[i]-num;\n\t\tRsort(),swap(x,y),x[SA[1]]=km=1;\n\t\tfor(RI i=2;i<=n;++i) x[SA[i]]=cmp(SA[i],SA[i-1],num)?km:++km;\n\t}\n}\nvoid getHei() {\n\tRI lcp=0;\n\tfor(RI i=1;i<=n;++i) {\n\t\tif(lcp) --lcp;\n\t\tRI j=SA[x[i]-1];\n\t\twhile(i+lcp<=n&&j+lcp<=n&&a[i+lcp]==a[j+lcp]) ++lcp;\n\t\tHei[x[i]]=lcp;\n\t}\n}\nLL ans1[N],ans2[N];int sz[N],mx[N],mi[N],st[N],top;\nvoid work() {\n\tRI ksz,kmx,kmi;\n\tfor(RI i=1;i<=n;++i) ans2[i]=LLONG_MIN;\n\tfor(RI i=2;i<=n;++i) {\n\t\tksz=1,kmx=kmi=v[SA[i-1]];\n\t\twhile(top&&st[top]>=Hei[i]) {\n\t\t\tans1[st[top]]+=1LL*sz[top]*ksz;//\u65b9\u6848\u8d21\u732e\n\t\t\tans2[st[top]]=max(ans2[st[top]],max(1LL*mx[top]*kmx,1LL*mi[top]*kmi));//\u6700\u5927\u503c\u8d21\u732e\n\t\t\tksz+=sz[top],kmx=max(kmx,mx[top]),kmi=min(kmi,mi[top]);//\u5408\u5e76\n\t\t\t--top;\n\t\t}\n\t\t++top,st[top]=Hei[i],sz[top]=ksz,mi[top]=kmi,mx[top]=kmx;\n\t}\n\tksz=1,kmx=kmi=v[SA[n]];\n\tfor(RI i=top;i>=1;--i) {\n\t\tans1[st[i]]+=1LL*sz[i]*ksz;//\u65b9\u6848\u8d21\u732e\n\t\tans2[st[i]]=max(ans2[st[i]],max(1LL*mx[i]*kmx,1LL*mi[i]*kmi));//\u6700\u5927\u503c\u8d21\u732e\n\t\tksz+=sz[i],kmx=max(kmx,mx[i]),kmi=min(kmi,mi[i]);//\u5408\u5e76\n\t}\n}\nint main()\n{\n\tn=read(),scanf(\"%s\",s);\n\tfor(RI i=1;i<=n;++i) v[i]=read();\n\tgetSA(),getHei(),work();\n\tfor(RI i=n-2;i>=0;--i) ans1[i]+=ans1[i+1],ans2[i]=max(ans2[i],ans2[i+1]);\n\tfor(RI i=0;i<n;++i)\n\t\tprintf(\"%lld %lld\\n\",ans1[i],(ans1[i]==0?0:ans2[i]));\n\treturn 0;\n}\n```",
        "postTime": 1523175637,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "# \u9898\u89e3\n\n\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u51fb[\u8fd9\u91cc](https://monan2016.github.io/2019/04/20/%E3%80%90BZOJ4199%E3%80%91%E3%80%90NOI2015%E3%80%91%E5%93%81%E9%85%92%E5%A4%A7%E4%BC%9A/)\n\uff0c\u8bf7\u5404\u4f4d\u5927\u4f6c\u5230\u6211\u7684blog\u770b\u770b\u3002\n\n## \u77e5\u8bc6\u70b9\uff1a\n\n\u540e\u7f00\u6811\uff0c\u540e\u7f00\u6570\u7ec4\uff0cLCP\uff0c\u6811\u5f62DP\n\n## \u5206\u6790\uff1a\n\n\u8fd9\u9053\u9898\u662f\u6211\u521d\u5b66\u540e\u7f00\u7ed3\u6784\u7684\u8fd1\u671f\u8bad\u7ec3\u6700\u540e\u4e00\u9053\u7ec3\u4e60\u9898\uff0c\u4e00\u5f00\u59cb\u53ea\u60f3\u5230$\\Theta(n^2)$\u7684\u65b9\u6cd5\u548c\u201c\u4e0d\u5b58\u572810\u76f8\u4f3c\u201d\u7684\u60c5\u51b5\u3002\u540e\u6765\u770b\u4e86\u4e00\u5e74\u524dwj\u54e5\u54e5\u7684slide\uff0c\u624d\u77e5\u9053\u771f\u6b63\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u7684\u9898\u610f\u662f\u8fd9\u6837\u7684\uff1a\u6211\u4eec\u8981\u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u5b50\u4e32\u7684LCP\u5927\u4e8e\u7b49\u4e8e\u6bcf\u4e2a$i\\in [1,n]$\u4e2d\u7684$i$\uff0c\u7b2c\u4e8c\u95ee\u8981\u6c42\u51fa\u6bcf\u4e2a\u7ec4\u5f53\u4e2d$a[i]$\u503c\u4e24\u4e24\u4e58\u79ef\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u662f\u591a\u5c11\uff08\u800c\u4e14$a[i]\\in \\mathbb Z$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u53ef\u80fd\u6709\u975e\u6b63\u6570\uff09\u3002\u6211\u4eec\u53d1\u73b0\u76f4\u63a5\u505aLCP\u5927\u4e8e\u7b49\u4e8e\u7684\u60c5\u51b5\u5f88\u4e0d\u597d\u5199\uff0c\u6240\u4ee5\u5148\u8003\u8651\u6c42\u51fa\u7b49\u4e8e\u7684\u60c5\u51b5\uff0c\u800c\u7b2c\u4e8c\u95ee\u4e5f\u4e0d\u7b97\u6838\u5fc3\uff0c\u76f4\u63a5\u7528\u4e00\u4e2aDP\u8bb0\u5f55\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u53ef\u4ee5\u5148\u653e\u4e00\u653e\u3002\n\n\u4e0b\u9762\u5148\u7b80\u4ecb\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n### \u65b9\u6cd5\u4e00\uff1a\u540e\u7f00\u6570\u7ec4\n\n\u7b2c\u4e00\u95ee\u5b9e\u9645\u4e0a\u662f\u6c42\u6709\u591a\u5c11\u4e2a\u533a\u95f4$[l,r]\u4f7f\u5f97height[l..r]\u7684\u6700\u5c0f\u503c\u4e3ai$\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u540e\u7f00\u96c6\u5408\uff0c\u4ece$n-1$\u5230$0$\u679a\u4e3e\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u540e\u7f00\u957f\u5ea6$i$\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u6bcf\u4e2a\u96c6\u5408\u5185\u90e8\u7684\u4efb\u610f\u4e24\u4e2a\u540e\u7f00\u7684$LCP$ \u90fd\u5927\u4e8e$i$\u3002\u8fd9\u65f6\u5047\u5982\u6709\u4e24\u4e2a\u6392\u540d\u76f8\u90bb\u7684\u5e76\u4e14$LCP$ \u4e3a$i $\u7684\u540e\u7f00\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u6240\u5904\u7684\u96c6\u5408\u5408\u5e76\u8d77\u6765\u3002\n\n\u5177\u4f53\u5730\uff0c\u628a$height$\u503c\u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u7136\u540e\u628a$ans[heght]$\u7684\u503c\u52a0\u4e0a\u5f53\u524d\u5408\u5e76\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u96c6\u5408\u7684\u5927\u5c0f\u4e58\u79ef\uff08\u56e0\u4e3a\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u6bcf\u4e2a\u533a\u95f4\u4e2d\uff0c\u4f9d\u6b21\u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\uff0c\u662f\u6709\u4e58\u79ef\u4e2d\u60c5\u51b5\uff09\u3002\u7136\u540e\u5408\u5e76\u96c6\u5408\u3002\n\n\u8bb0\u5f55\u7684\u65f6\u5019\u8981\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5408\u5e76\u7684\u65f6\u5019\u90fd\u662f\u5408\u5e76\u6392\u540d\u76f8\u90bb\u7684\u4e00\u4e9b\u540e\u7f00\uff0c\u6240\u4ee5\u51fa\u73b0\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u540e\u7f00\u5fc5\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u96c6\u5408\u7684\u5de6\u53f3\u7aef\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5408\u5e76\u7684\u65f6\u5019\u4e5f\u53ea\u7528\u66f4\u6539\u7aef\u70b9\u7684\u503c\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u6211\u4eec\u5728\u5408\u5e76\u7684\u65f6\u5019\u53ef\u4ee5\u628a$a[i]$\u7684\u503c\u4e5f\u987a\u8def\u5408\u5e76\uff08\u5177\u4f53\u65b9\u6cd5\u53ef\u89c1\u65b9\u6cd5\u4e8c\uff0c\u5927\u540c\u5c0f\u5f02\uff09\u3002\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(n\\log_2n)$\n\n\n\n### \u65b9\u6cd5\u4e8c\uff1a\u540e\u7f00\u6811\n\n\u628a\u540e\u7f00\u6811\u5efa\u51fa\u6765\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u89c2\u5730\u53d1\u73b0LCP\u5c31\u53d8\u6210\u4e86LCA\uff08\u4e24\u4e2a\u70b9\u7684LCA\u8282\u70b9\u5728\u540e\u7f00\u6811\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u957f\u5ea6\u503c\u5c31\u662fLCP\u7684\u957f\u5ea6\uff09\u3002\u800c\u6bcf\u4e2a\u5b50\u6811\u4e0b\u7684\u540e\u7f00\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u5c31\u662f\u90a3\u68f5\u6811\u7684\u8d21\u732e\u3002\n\n\u5982\u56fe\uff1a\n\n![8](https://cdn.luogu.com.cn/upload/pic/57165.png)![8](8.PNG)\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u84dd\u70b9\u7684\u5b50\u6811\u7edf\u8ba1\u597d\u540e\u7f00\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5bf9\u5176LCA\uff08\u7ea2\u70b9\uff09\u8fdb\u884c\u7edf\u8ba1\uff0c\u7136\u540e\u9014\u4e2d\u7684\u201clen\u201d\u5c31\u662f\u4ed6\u4eecLCP\u7684\u957f\u5ea6\uff08\u5047\u8bbe\u4ece\u7ea2\u70b9\u5f80\u4e0a\u4e00\u76f4\u8d70\u4e86\u5f88\u591a\u4e2a\u8282\u70b9\u540e\u5230\u8fbe\u4e86\u6574\u68f5\u540e\u7f00\u6811\u7684\u6839\u8282\u70b9\uff08\u9ec4\u70b9\uff09\uff0c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u8fb9\u6743\u4e4b\u548c\uff09\u5c31\u662flen\uff09\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u51fa\u540e\u7f00\u6811\u3002\u7136\u540e\u8fdb\u884c\u6811\u5f62DP\uff08\u7406\u89e3\u4e3aDFS\u4e5f\u884c\uff09\u3002\u600e\u4e48\u7edf\u8ba1\u540e\u7f00\u8282\u70b9\u7684\u4e2a\u6570\u5462\uff1f\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5bf9\u5176\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4fe1\u606f\u8fdb\u884c\u7d2f\u52a0\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u6211\u4eec\u77e5\u9053\u600e\u4e48\u6837\u7684\u8282\u70b9\u624d\u53ef\u80fd\u662f\u540e\u7f00\u8282\u70b9\u3002\u5728\u5efa\u6811\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a0\u8fdb\u53bb\u7684\u4e00\u5b9a\u662f\u540e\u7f00\u70b9\uff0c\u901a\u8fc7\u4e00\u6761\u539f\u6765\u5f88\u957f\u5b8c\u6574\u7684\u8fb9\uff08\u91cc\u9762\u5305\u542b\u4e0d\u6b62\u4e00\u4e2a\u5b57\u7b26\u7684\uff09\u7684\u5206\u88c2\u5f97\u5230\u7684\u70b9\uff0c\u4e00\u5b9a\u4e0d\u662f\u540e\u7f00\u70b9\uff0c\u8fd9\u4e2a\u5728\u5efa\u6811\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u4f46\u662f\u7b54\u6848\u4e00\u5b9a\u662f\u8fd9\u4e2a\u5417\uff1f\n\n\u5f53\u7136\u4e0d\u662f\uff01\n\n\u56de\u5230\u90a3\u5e45\u56fe\uff0c\u8003\u8651\u73b0\u5728\u5728\u7ea2\u70b9\u7edf\u8ba1\u7b54\u6848\u3002\u8fd9\u65f6\u5019\u7684\u5355\u4f4d\u8d21\u732e\u5c31\u662f$len$,\u5c0f\u5b66\u6570\u5b66\u544a\u8bc9\u6211\u4eec\uff1a$\u5355\u4f4d\u8d21\u732e\\times\u6570\u91cf=\u603b\u5171\u8d21\u732e$\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u7edf\u8ba1\u6570\u91cf\u3002\u6570\u91cf\u662f\u6709\u591a\u5c11\u4e2a\u540e\u7f00\u8282\u70b9\u5bf9\uff08\u65e0\u5e8f\u7684\uff09\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u8003\u8651\u5bf9\u84dd\u8272\u70b9\u6807\u53f7$1,2,3,\\cdots,k$,\u6bcf\u4e2a\u84dd\u70b9\u4e3a\u5b50\u6811\uff08\u5305\u542b\u84dd\u70b9\uff0c\u5c31\u662f\u8bf4\u5047\u5982\u84dd\u70b9\u662f\u540e\u7f00\u70b9\uff0c\u90a3\u4e5f\u7b97\u8fdb\u53bb\uff09\u7684\u603b\u5171\u540e\u7f00\u8282\u70b9\u6570\u4e3a$v_1,v_2,v_3,\\cdots,v_k$,\u90a3\u4e48\u5bf9\u4e8e\u7ea2\u70b9\u7684\u8d21\u732e\u6570\u91cf\u5c31\u662f$\\displaystyle\\sum_{i=1}^{k-1}\\sum_{j=i+1}^{k}v_i\\times v_j$,\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u91cd\u4e0d\u6f0f\uff08\u5927\u5bb6\u53ef\u4ee5\u628a\u90a3\u56db\u4e2a\u84dd\u70b9\u7684\u60c5\u51b5\u76f4\u63a5\u5199\u51fa\u6765\uff0c\u770b\u4e00\u4e0b\u5bf9\u4e0d\u5bf9\uff0c\u6211\u5f53\u65f6\u63a8\u7684\u5f0f\u5b50\u662f$v_1\\times v_2+v_1\\times v_3+v_1\\times v_4+v_2\\times v_3+v_2\\times v_4+v_3\\times v_4$),\u53ef\u4ee5\u53d1\u73b0\u5b83\u6211\u4e0a\u9762\u7ed9\u51fa\u7684\u53cc\u91cd\u548c\u5f0f\u7684\u610f\u4e49\u662f\u4e00\u6837\u7684\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u5f0f\u5b50\u6c42\u51fa\u6765\u7684\u6700\u5927\u590d\u6742\u5ea6\u662f$\\Theta(n^2)$\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u8003\u8651\u5bf9\u5f0f\u5b50\u8fdb\u884c\u5c55\u5f00\uff0c\u5148\u5bf9\u539f\u5f0f$\\times2$,\u7136\u540e\u518d$\\div2$,\n\n\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u5f97\u5230$\\text{\u539f\u5f0f}=\\frac{\\displaystyle\\sum_{i=1}^{k}\\sum_{j=1\\land j\\not =i}^{k}v_i\\times v_j}{2}$(\u4e3e\u4f8b\uff0c\u5c31\u662f$\\frac{v_1\\times(v_2+v_3+v_4)+v_2\\times(v_1+v_3+v_4)+v_3\\times(v_1+v_2+v_4)+v_4\\times(v_1+v_2+v_3)}{2}$)\n\n\u7b2c\u4e8c\u6b65\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u597d\u50cf\u5dee\u4e86\u70b9\u4ec0\u4e48\uff0c\u6240\u4ee5\u7ee7\u7eed\u6dfb\u52a0\u9879\uff0c\u6dfb\u52a0\u4e3a$v_1\\times(v_1+v_2+v_3+v_4)$\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u591a\u52a0\u4e86\u4e00\u4e2a$v_1^2$,\u6240\u4ee5\u628a\u5b83\u51cf\u53bb\u3002\u6b64\u65f6\u5047\u5982\u5927\u5bb6\u628a\u540e\u9762\u51e0\u9879\u4e5f\u8fd9\u6837\u62c6\u5f00\uff0c\u5c31\u53ef\u53d1\u73b0\u540e\u9762\u90fd\u662f$(v_1+v_2+v_3+v_4)$\uff0c\u524d\u9762\u662f$v_i\\times$\u540e\u9762\u7684\u90a3\u4e2a\u62ec\u53f7\u3002\u521d\u4e2d\u6570\u5b66\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u5e94\u8be5\u5408\u5e76\u540c\u7c7b\u9879\uff0c\u53d8\u6210$(v_1+v_2+v_3+v_4)^2$,\u8fd9\u6837\uff0c\u5c31\u662f\u975e\u5e38\u7b80\u4fbf\u7684\u4e86\u3002\n\n\u7b2c\u4e09\u6b65\uff0c\u5bf9\u7b2c\u4e8c\u6b65\u7684\u5f0f\u5b50\u8fdb\u884c\u5316\u7b80\uff0c\u5199\u6210\u539f\u5f0f$=\\frac{(\\displaystyle\\sum_{i=1}^{k}{v_i})^2-\\displaystyle\\sum_{i=1}^{k}{v_i^2}}{2}$\n\n\u7136\u540e\u8fd9\u4e2a\u5f0f\u5b50\u5c31\u53ef\u4ee5$\\Theta(n)$\u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6765\uff0c\u53ef\u4ee5\u63a5\u53d7\uff08\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u6c42\u4e00\u6b21\u548c\u4e0e\u4e00\u6b21\u5e73\u65b9\u548c\u5c31\u597d\u4e86\uff09\u3002\u8fd9\u79cd\u63a8\u5f0f\u5b50\u7684\u65b9\u6cd5\u597d\u50cf\u548c\u5f88\u591a\u9898\u89e3\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u4f46\u662f\u672c\u8d28\u8981\u6c42\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u6211\u4eec\u8981\u8bbe\u6cd5\u66f4\u65b0$a[i]$\u7684\u6700\u5927\u503c\u3002\u56e0\u4e3a\u6b64\u9898\u4e2d$a[i]$\u7684\u503c\u662f\u53ef\u6b63\u53ef\u8d1f\u7684\uff0c\u6240\u4ee5\u5c31\u4e0d\u53ef\u4ee5\u53ea\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4e0b\u7684\u6700\u5927\u548c\u6b21\u5927\u503c\u3002\u53c2\u7167\u6211\u53bb\u5e74\u505a\u8fc7\u7684\u4e00\u9053\u73af\u5f62DP\u9898\uff08\u3010IOI1998\u3011Polygon\uff09\u4e2d\u7684\u601d\u60f3\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u6700\u5927\u548c\u6b21\u5927\u4e0e\u6700\u5c0f\u548c\u6b21\u5c0f\u503c\u3002\u56e0\u4e3a\u5982\u679c\u6700\u5c0f\u548c\u6b21\u5c0f\u503c\u662f\u4e2a\u8d1f\u6570\uff0c\u4e24\u8005\u76f8\u4e58\u4f1a\u53d8\u6210\u4e00\u4e2a\u6b63\u6570\uff0c\u8fd9\u4e2a\u6b63\u6570\u7684\u6709\u53ef\u80fd\u6bd4\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u4e58\u79ef\u8981\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765\u66f4\u65b0\u7b54\u6848\u3002\n\n\u4e0d\u8fc7\u5343\u4e07\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u5f04\u61c2\u5176\u4e2d\u7684\u903b\u8f91\u5173\u7cfb\u3002\u8fd9\u91cc\u8ba1\u7b97\u51fa\u6765\u7684\u503c\uff08\u6700\u5c0f\u6b21\u5c0f\u7684\u4e58\u79ef\uff0c\u6700\u5927\u6b21\u5927\u7684\u4e58\u79ef\uff09\u90fd\u53ea\u662f\u7528\u6765\u66f4\u65b0$ans[len]$\u7684\uff0c\u800c\u5408\u5e76\u5230\u7236\u8282\u70b9\uff08\u4e0a\u56fe\u7684\u7ea2\u70b9\uff09\u7684\u4fe1\u606f\uff0c\u4f9d\u65e7\u662f\u539f\u6765\u7684\u6700\u5927\u6700\u5c0f\u7b49\u7b49\u7684\u503c\uff08\u5c31\u662f\u66f4\u65b0\u7b54\u6848\u7684\u65f6\u5019\u4e00\u76f4\u90fd\u662f\u7528\u539f\u6765\u7684\u4fe1\u606f\uff0c\u4e0d\u662f\u4e58\u79ef\uff09\u3002\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u4e00\u76f4\u7528\u539f\u6709\u7684\u4fe1\u606f\u53bb\u66f4\u65b0\u6bcf\u4e00\u4e2a\u503c\uff0c\u800c\u4e0d\u662f\u8ba1\u7b97\u540e\u66f4\u65b0\u3002\n\n\u5177\u4f53\u5730\uff0c\u521d\u59cb\u5316\u4e00\u5b9a\u8981\u505a\u597d\u3002\u628a\u6bcf\u4e2a\u540e\u7f00\u8282\u70b9\u7684\u521d\u59cb\u6700\u5927\u6700\u5c0f\u503c\u8bbe\u4e3a$a[i]$\uff0c\u800c\u6b21\u5927\u6b21\u5c0f\u5206\u522b\u8bbe\u6210\u8d1f\u65e0\u7a77\u548c\u6b63\u65e0\u7a77\u3002\u52a0\u5165\u975e\u540e\u7f00\u8282\u70b9\u65f6\uff08\u5206\u88c2\u8282\u70b9\uff09\uff0c\u628a\u56db\u4e2a\u503c\u5206\u522b\u8bbe\u6210\u6b63\u8d1f\u65e0\u7a77\uff08\u56e0\u4e3a\u8fd9\u4e9b\u8282\u70b9\u672c\u6765\u5c31\u9700\u8981\u522b\u7684\u70b9\u53bb\u66f4\u65b0\u5b83\u4eec\uff0c\u5b83\u4eec\u81ea\u5df1\u672c\u6765\u5c31\u6ca1\u6709\u6743\u503c\uff09\u3002\u800c\u4ec0\u4e48\u4e1c\u897f\u90fd\u6ca1\u6709\u7684\u6839\u8282\u70b9\uff0c\u4e5f\u8981\u8bbe\u6210\u6b63\u8d1f\u65e0\u7a77\u3002\u5728\u6811\u5f62DP\u7684\u65f6\u5019\uff0c\u5047\u5982\u6211\u4eec\u9700\u8981\u66f4\u65b0\u7236\u8282\u70b9$u$\u7684\u4fe1\u606f\uff0c\u5f53\u524d\u679a\u4e3e\u5230\u7684\u5b50\u8282\u70b9\u662f$v$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a$u$\u548c$v$\u7684\u6700\u5927\u6700\u5c0f\u6b21\u5927\u6b21\u5c0f\u62ff\u51fa\u6765\uff0c\u5927\u7684\u6392\u4e00\u904d\u5e8f\uff0c\u53d6\u6700\u5927\u90a3\u4e24\u4e2a\u66f4\u65b0$u$\u8282\u70b9\u7684\u4fe1\u606f\u3002\u5bf9\u4e8e\u5c0f\u7684\u503c\u540c\u7406\uff0c\u4e5f\u662f\u62ff\u51fa\u6765\u6392\u4e00\u904d\u5e8f\uff0c\u7136\u540e\u53d6\u6700\u5c0f\u7684\u4e24\u4e2a\u653e\u56de\u53bb\u3002\u6b64\u5904\u7ecf\u8fc7\u8ba1\u7b97\u53ef\u5f97\uff0c\u5192\u6ce1\u6392\u5e8f\u662f\u7406\u8bba\u4e0a\u8ba1\u7b97\u6b21\u6570\u76f8\u5bf9\u5c11\u7684\u800c\u5199\u8d77\u6765\u53c8\u5f88\u65b9\u4fbf\u7684\u4e00\u79cd\u6392\u5e8f\uff0c\u6bcf\u4e00\u6b21\u66f4\u65b0\u53ea\u752812\u6b21\u7684\u8fd0\u7b97\uff08\u8fdc\u8fdc\u5c0f\u4e8e\u5feb\u6392\uff09\uff0c\u6240\u4ee5\u5e38\u6570\u4f1a\u5c0f\u5f88\u591a\u3002\u4e0d\u8fc7\u770b\u5230\u6709\u4e00\u79cd\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5206\u522b\u6bd4\u8f83\u4e24\u4e2a\u6700\u503c\uff0c\u7136\u540e\u76f4\u63a5\u5f80\u540e\u66f4\u65b0\uff0c\u611f\u89c9\u8fd9\u79cd\u597d\u50cf\u66f4\u5feb\uff0c\u4f46\u662f\u5f53\u65f6\u6211\u89c9\u5f97\u5199\u8fd9\u79cd\u597d\u50cf\u98ce\u9669\u6709\u70b9\u5927\uff0c\u6015\u5199WA\u3002\u5982\u679c\u5f53\u524d\u7684\u7edf\u8ba1\u5b8c\u53d1\u73b0\u6574\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u5c0f\u4e8e2\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u79bb\u5f00\u4e86\uff0c\u56e0\u4e3a\u6784\u4e0d\u6210\u4e24\u4e24\u4e4b\u95f4\u7684 LCP\u4e86\uff0c\u8fd9\u6837\u6ca1\u6cd5\u66f4\u65b0\u7b54\u6848\uff08\u4e0d\u8fc7\u5b50\u6811\u5927\u5c0f\u8fd8\u662f\u8981\u66f4\u65b0\u7684\uff0c\u540e\u9762\u6709\u7528\uff09\u3002\n\n\u6700\u540e\u7684\u6c42\u4e00\u6b21\u540e\u7f00\u548c\u4e0e\u540e\u7f00\u6700\u5927\u503c\uff0c\u5c31\u4ece\u540e\u9762\u5f80\u524d\u66f4\u65b0\uff08\u56e0\u4e3a\u9898\u76ee\u8bf4$r$\u76f8\u4f3c\u7684\u4e24\u4e2a\u4e32\u540c\u65f6\u4e5f\u662f$r-i$\u76f8\u4f3c\u7684\uff09\uff0c\u6240\u4ee5\u5047\u5982\u5f53\u524d\u7684\u540e\u7f00\u548c\u8fd8\u662f$0$\uff0c\u90a3\u4e48\u5c31\u628a\u6700\u5927\u503c\u4e5f\u8bbe\u6210$0$\uff08\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u6700\u5927\u503c\u6709\u53ef\u80fd\u662f\u4e00\u4e9b\u4e0d\u53ef\u9884\u77e5\u7684\u6570\uff09\u3002\u7136\u540e\u6ce8\u610f\u7ec6\u8282\uff0c\u6ce8\u610f\u66f4\u65b0\u7684\u987a\u5e8f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(n)$\n\n### \u5c0f\u7ed3\uff1a\n\n\u5bf9\u6bd4\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u3002\u65b9\u6cd5\u4e00\u4e2d\u5408\u5e76$height$\u7684\u8fc7\u7a0b\u5c31\u662f\u6a21\u62df\u4e86\u540e\u7f00\u6811\u4e0a\u4e24\u4e24\u5408\u5e76LCA\u7684\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u6811\u5f62\u7ed3\u6784\u66f4\u52a0\u4fbf\u4e8e\u7406\u89e3\u548c\u5b9e\u8df5\u3002\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u52a3\uff0c\u4f46\u662f\u7406\u8bba\u590d\u6742\u5ea6\u4e0a\u540e\u7f00\u6811\u4f1a\u66f4\u4f73\u4e00\u4e9b\u3002\u5b9e\u73b0\u4e0a\uff0c\u65b9\u6cd5\u4e00\u96be\u5728\u7b2c\u4e00\u95ee\u7684\u5408\u5e76\uff08\u597d\u50cf\u633a\u96be\u5199\u7684\uff09\uff0c\u65b9\u6cd5\u4e8c\u96be\u5728\u7b2c\u4e8c\u95ee\u7684\u7edf\u8ba1$a[i]$\u7684\u7b54\u6848\u548c\u7ec6\u8282\u8c03\u9519\u4e0a\uff0c\u6bd5\u7adf\u6811\u5f62\u7ed3\u6784\u96be\u4ee5\u8c03\u8bd5\uff0c\u7ec6\u8282\u8d85\u591a\u3002\u4e0d\u7528\u540e\u7f00\u81ea\u52a8\u673a\u89e3\u9898\u7684\u539f\u56e0\u662f\uff0c\u540e\u7f00\u81ea\u52a8\u673a\u60f3\u8d77\u6765\u6ca1\u6709\u540e\u7f00\u6811\u597d\u60f3\uff0c\u4f46\u662f\u5b9e\u73b0\u8d77\u6765\u5374\u4e0e\u540e\u7f00\u6811\u5927\u540c\u5c0f\u5f02\uff0c\u8fd8\u8981\u7528$parents$\u6811\u8fdb\u884c\u518d\u4e00\u6b21\u7684\u8f6c\u5316\uff0c\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\uff0c\u6bd5\u7adf\u6811\u7684\u6027\u8d28\u662f\u6bd4DAG\u8981\u591a\u7684\uff0c\u8981\u66f4\u4e3a\u65b9\u4fbf\u7684\u3002\n\n## \u4ee3\u7801\uff1a\n\n\u8fd9\u9053\u9898\u6211\u4e00\u5171\u4ea4\u4e86\u56db\u6b21\u624dAC\u3002\u6211\u7528\u7684\u662f\u65b9\u6cd5\u4e8c\uff08\u611f\u89c9\u66f4\u597d\u5199\uff09\u3002\n\n![3](https://cdn.luogu.com.cn/upload/pic/57166.png)![3](3.PNG)\n\n\u53ef\u4ee5\u770b\u89c1\u5176\u5b9e\u7ec6\u8282\u5f88\u591a\u3002\u6211\u89c9\u5f97\u5bf9\u4e8e\u66f4\u65b0\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u65f6\u662f\u6700\u4e3a\u9ebb\u70e6\u7684\u3002\u5927\u5bb6\u5343\u4e07\u5c0f\u5fc3\u3002\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn=300010;\ntypedef long long ll;\nint n,m,tot,cnt,tp,rt,head[maxn<<1];//\u6ce8\u610f\u8282\u70b9\u6570\u4f1a\u53d8\u62102n\uff0c\u6240\u4ee5\u5b58\u6811\u7684\u65f6\u5019\u4e5f\u4e00\u5b9a\u8981\u5f00\u8fd9\u4e48\u5927\u7684\u7a7a\u95f4\nll b[maxn];//\u8fd9\u4e2a\u662f\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684a[i]\nconst ll inf=1000000007;//\u4e8b\u5b9e\u8bc1\u660eINF\u8981\u5f00\u5230\u6bd41e9\u5927\u624d\u53ef\u4ee5\nchar s[maxn];\nstruct node\n{\n    int fa,p,len,siz;//\u7236\u4eb2\uff0c\u5f53\u524d\u4f4d\u7f6e\uff0c\u540e\u7f00\u957f\u5ea6\uff0c\u5b50\u6811\u5927\u5c0f\n    ll _min1,_max1,_min2,_max2;//\u6700\u5c0f\uff0c\u6700\u5927\uff0c\u6b21\u5c0f\uff0c\u6b21\u5927\n    int trans[27];\n}a[maxn<<1];\nstruct data\n{\n    int nxt,to;\n}edge[maxn<<1];//\u5b58\u6811\uff0c\u8fb9\u53ea\u7528\u5f002n\u5c31\u591f\u4e86\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u7528\u5355\u5411\u8fb9\u6765\u5b58\u7236\u4eb2\u5230\u513f\u5b50\u5c31\u597d\u4e86\nstruct result\n{\n    ll sum,val;//\u540e\u7f00\u8282\u70b9\u7684\u5bf9\u6570\uff0c\u6700\u5927\u503c\n}ans[maxn];//\u8bb0\u5f55\u7b54\u6848\n#define min(a,b) (a<b?a:b)//\u6700\u5c0f\n#define max(a,b) (a>b?a:b)//\u6700\u5927\n#define isdigit(c) (c>=48&&c<=57)//\u5224\u65ad\u662f\u5426\u662f\u6570\u5b57\uff0c\u7528\u4e8e\u8bfb\u5165\u4f18\u5316\n#define swap(a,b) (a^=b^=a^=b)//\u4ea4\u6362\n\nll read()\n{\n    ll x=0,f=1;\n    char c=getchar();\n    while (!isdigit(c))\n        f=c=='-'?-1:1,c=getchar();\n    while (isdigit(c))\n        x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return x*f;\n}\n\nint ins(int u,int p,int c)//\u5efa\u540e\u7f00\u6811\n{\n    int x=++tot,v;\n    a[x].len=a[u].len+1;\n    a[x].p=p;\n    a[x].siz=1;//\u8fd9\u4e00\u5b9a\u662f\u540e\u7f00\u70b9\n    a[x]._min1=a[x]._max1=b[p];//\u6ce8\u610f\u6700\u5c0f\u6700\u5927\u8d4b\u503c\u6210a[i]\n    a[x]._min2=inf;//\u5176\u4f59\u8d4b\u503c\u6210\u6b63\u8d1f\u65e0\u7a77\n    a[x]._max2=-inf;\n    for (;u&&!a[u].trans[c];a[u].trans[c]=x,u=a[u].fa);\n    if (!u)\n        a[x].fa=rt;\n    else\n    {\n        v=a[u].trans[c];\n        if (a[v].len==a[u].len+1)\n            a[x].fa=v;\n        else\n        {\n            int w=++tot;\n            a[w]=a[v];\n            a[w].len=a[u].len+1;\n            a[w]._max1=a[w]._max2=-inf;//\u5206\u88c2\u70b9\u6ca1\u6709\u6743\u503c\uff0c\u53ea\u80fd\u88ab\u522b\u4eba\u66f4\u65b0\uff0c\u6240\u4ee5\u521d\u59cb\u4e3a\u6b63\u8d1f\u65e0\u7a77\n            a[w]._min1=a[w]._min2=inf;\n            a[w].siz=0;//\u5206\u88c2\u70b9\u4e00\u5b9a\u4e0d\u662f\u540e\u7f00\u70b9\n            a[v].fa=a[x].fa=w;\n            for (;u&&a[u].trans[c]==v;a[u].trans[c]=w,u=a[u].fa);\n        }\n    }\n    return x;\n}\n\nvoid cmp(int u,int v)//\u7528\u6765\u66f4\u65b0\u6700\u5927\u6700\u5c0f\u6b21\u5927\u6b21\u5c0f\u503c\uff0cu\u662f\u7236\u4eb2\uff0cv\u662f\u513f\u5b50\n{\n    int i,j;\n    ll p[10];\n    memset(p,0,sizeof(p));\n    p[1]=a[u]._max1;\n    p[2]=a[u]._max2;\n    p[3]=a[v]._max1;\n    p[4]=a[v]._max2;\n    for (i=1;i<=3;i++)//\u5192\u6ce1\n        for (j=1;j<=4-i;j++)\n            if (p[j]<p[j+1])\n                swap(p[j],p[j+1]);\n    a[u]._max1=p[1];\n    a[u]._max2=p[2];\n    memset(p,0,sizeof(p));\n    p[1]=a[u]._min1;\n    p[2]=a[u]._min2;\n    p[3]=a[v]._min1;\n    p[4]=a[v]._min2;\n    for (i=1;i<=3;i++)\n        for (j=1;j<=4-i;j++)\n            if (p[j]>p[j+1])\n                swap(p[j],p[j+1]);\n    a[u]._min1=p[1];\n    a[u]._min2=p[2];\n}\n\nvoid dfs(int u)//\u6811\u5f62DP\u7edf\u8ba1\u7b54\u6848\n{\n    int i,v;\n    ll tmp=0;//tmp\u662f\u6bcf\u4e2a\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u7684\u5e73\u65b9\u4e4b\u548c\n    for (i=head[u];i;i=edge[i].nxt)\n    {\n        v=edge[i].to;\n        dfs(v);\n        a[u].siz+=a[v].siz;//\u52a0\u4e0a\u5b50\u6811\u5927\u5c0f\n        tmp+=(a[v].siz+0ll)*(a[v].siz+0ll);//\u8bb0\u5f55\u5e73\u65b9\u548c\n        cmp(u,v);//\u7edf\u8ba1\u6700\u5927\u6700\u5c0f\u503c\n    }\n    if (a[u].siz<2)//\u6784\u4e0d\u6210LCP\u5c31\u8fd4\u56de\n        return; \n    ans[a[u].len].sum+=((a[u].siz+0ll)*(a[u].siz+0ll)-tmp)/2ll;//\u8bb0\u5f55\u6709\u591a\u5c11\u70b9\u5bf9\n    ans[a[u].len].val=max(ans[a[u].len].val,max((a[u]._max1*a[u]._max2),(a[u]._min1*a[u]._min2)));//\u8bb0\u5f55\u6b64\u5904\u7684\u4e58\u79ef\u6700\u5927\u503c\n}\n\nvoid add(int u,int v)//\u628a\u6811\u5f62\u7ed3\u6784\u5efa\u7acb\u8d77\u6765\n{\n    edge[++cnt]=(data){head[u],v};\n    head[u]=cnt;\n}\n\nint main()\n{\n    int i,j;\n    scanf(\"%d%s\",&n,s+1);\n    for (i=1;i<=n;i++)\n        b[i]=read();\n    rt=tp=++tot;\n    for (i=n;i>=1;i--)\n    {\n        tp=ins(tp,i,s[i]-'a'+1);\n        ans[i].val=-(inf*inf);//\u521d\u59cb\u5316\u6bcf\u4e2a\u8282\u70b9\uff0c\u6ce8\u610f\u662f\u8981INF\u7684\u5e73\u65b9\u624d\u884c\uff08\u56e0\u4e3a\u8fd9\u4e2a\u662f\u4e58\u79ef\uff09\n    }\n    for (i=2;i<=tot;i++)\n        add(a[i].fa,i);//\u5efa\u8fb9\n    a[rt]._min1=a[rt]._min2=inf;\n    a[rt]._max1=a[rt]._max2=-inf; //\u6839\u8282\u70b9\u8981\u66f4\u65b0\n    dfs(rt);//\u6811\u5f62DP\n    for (i=n-1;i>=0;i--)//\u7edf\u8ba1\u540e\u7f00\u548c\u3001\u540e\u7f00\u6700\u5927\u503c\n    {\n        if (ans[i].sum==0)//\u5982\u679c\u5f53\u524d\u4e3a0\uff0c\u90a3\u4e48\u5168\u90fd\u4e3a0\n            ans[i].val=0;\n        if (i<=n-2&&ans[i+1].sum!=0)//\u4e0a\u4e00\u4e2a\u4e0d\u4e3a0\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b0\n            ans[i].val=max(ans[i].val,ans[i+1].val);\n        ans[i].sum+=ans[i+1].sum;//\u66f4\u65b0\u548c\n    }\n    for (i=0;i<=n-1;i++)\n        printf(\"%lld %lld\\n\",ans[i].sum,ans[i].val);\n    return 0;\n}\n```\n\n\u7136\u540e\u6211\u53c8\u4ea4\u5230\u7684UOJ\u4e0a\uff0c\u53d1\u73b0\u88ab\u4ebaHack\u6389\u4e86\u3002\n\n```cpp\nin\uff1a\n2\naa\n1000000000 -1000000000\n    \nout\uff1a\n1 -1000000000000000000\n1 -1000000000000000000\n```\n\n\u8fd9\u6837\u7684\u6570\u636e\u53ef\u4ee5\u6162\u6162\u8c03\uff0c\u603b\u80fd\u641e\u597d\u7684\u3002\n\n\n\n## \u603b\u7ed3\uff1a\n\n\u8fd9\u662f\u6211\u4eba\u751f\u7b2c\u4e00\u9053\u6d1b\u8c37\u9ed1\u9898\u554a\uff01\n\n\u867d\u7136\u7528\u4e86\u4e00\u5929\u53bb\u5199\uff0c\u4f46\u4e5f\u611f\u89c9\u5f88\u503c\u5f97\u3002\n\n\u601d\u8def\u5f88\u6709\u8da3\uff0c\u5f88\u591a\u7684\u5b9e\u73b0\u7ec6\u8282\u4e5f\u5f88\u6709\u4ef7\u503c\u3002",
        "postTime": 1555894877,
        "uid": 38036,
        "name": "\u5357\u65b9\u4e0d\u8d25",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u5207\u5165\u70b9\u4e0d\u540c\u7684\u540e\u7f00\u6570\u7ec4\u505a\u6cd5\u3002\r\n\r\n- \u4e8b\u5148\u58f0\u660e\uff1a\u7531\u4e8e\u6211\u9700\u8981\u5229\u7528 $r$ \u8868\u793a\u533a\u95f4\u53f3\u7aef\u70b9\uff0c\u6240\u4ee5\u9898\u76ee\u4e2d\u7684 $r$ \u76f8\u4f3c\u5728\u672c\u6587\u4e2d\u5747\u8868\u793a\u4e3a $k$ \u76f8\u4f3c\r\n\r\n\u9996\u5148\u8003\u8651\uff0c\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u4e00\u4e9b\u540e\u7f00\u662f\u4e24\u4e24 $k$ \u76f8\u4f3c\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u5176\u5168\u90e8\u653e\u5728\u533a\u95f4 $[l,r]$ \u5185\uff0c\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u591a\u5c11\u8d21\u732e\u3002\r\n\r\n\u663e\u7136\uff0c\u5bf9\u4e8e\u65b9\u6848\u6570\uff0c\u5176\u8d21\u732e\u4e3a $C_{r-l+1}^2$\uff1b\u5bf9\u4e8e\u7f8e\u5473\u5ea6\uff0c\u5176\u8d21\u732e\u4e3a\u8fd9\u4e2a\u533a\u95f4\u91cc\u6700\u5927\u7f8e\u5473\u5ea6\u3002\u6700\u5927\u7f8e\u5473\u5ea6\u53ef\u80fd\u662f\u533a\u95f4\u6700\u5927\u4e0e\u6b21\u5927\u7684\u4e58\u79ef\uff0c\u4e5f\u53ef\u80fd\u662f\u533a\u95f4\u6700\u5c0f\u4e0e\u6b21\u5c0f\u7684\u4e58\u79ef\u3002\r\n\r\n\u800c\u627e\u5230\u4e24\u4e24 $k$ \u76f8\u4f3c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u540e\u7f00\u6570\u7ec4\uff0c\u6784\u9020\u51fa $height$ \u548c $sa$ \u6570\u7ec4\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u5c06\u4e24\u4e24 $k$ \u76f8\u4f3c\u7684\u4e32\u653e\u5728\u4e86\u4e00\u4e2a\u533a\u95f4\u4e2d\u3002\u8fd9\u4e00\u90e8\u5206\u4e0d\u4f1a\u7684\u51fa\u95e8\u53f3\u8f6c[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P3809)\u3002\r\n\r\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u6b21\u5c0f\u503c\u3002\u5373\u53ef\u5728\u533a\u95f4\u5df2\u77e5\u7684\u60c5\u51b5\u4e0b $O(\\log n)$ \u7edf\u8ba1\u8d21\u732e\u3002\u5176\u4e2d\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u57fa\u4e8e\u540e\u7f00\u6570\u7ec4\u3002\r\n\r\n```cpp\r\ntree merge(tree x,tree y){\r\n\tif(y.maxn>x.maxn)x.smax=x.maxn,x.maxn=y.maxn;\r\n\telse if(y.maxn>x.smax)x.smax=y.maxn;\r\n\tif(y.smax>x.maxn)x.smax=x.maxn,x.maxn=y.smax;\r\n\telse if(y.smax>x.smax)x.smax=y.smax;\r\n\tif(y.minn<x.minn)x.smin=x.minn,x.minn=y.minn;\r\n\telse if(y.minn<x.smin)x.smin=y.minn;\r\n\tif(y.smin<x.minn)x.smin=x.minn,x.minn=y.smin;\r\n\telse if(y.smin<x.smin)x.smin=y.smin;\r\n\treturn x;\r\n}\r\n```\r\n\r\n\u73b0\u5728\u8003\u8651\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u627e\u533a\u95f4+\u7edf\u8ba1\u7b54\u6848\r\n\r\n\u540e\u7f00\u6570\u7ec4\u6709\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u7b56\u7565\uff0c\u5373\u57fa\u4e8e $height$ \u5206\u7ec4\u3002\u6211\u4eec\u679a\u4e3e\u5f53\u524d\u8981\u627e $k$ \u76f8\u4f3c\u7684 $k$\uff0c\u90a3\u4e48\u6839\u636e $k$ \u5bf9 $height$ \u5206\u7ec4\uff0c\u4f7f\u5f97\u6bcf\u7ec4 $[l,r]$ \u6ee1\u8db3 $height_{r+1}<k$ \u4e14 $height_{l+1\\dots r}\\ge k$\u3002\u90a3\u4e48\u663e\u7136\uff0c\u6bcf\u4e00\u7ec4\u90fd\u662f\u4e00\u6bb5\u6781\u957f\u7684 $k$ \u76f8\u4f3c\u533a\u95f4\u3002\u914d\u5408\u7ebf\u6bb5\u6811\u7edf\u8ba1\u7b54\u6848\u3002\r\n\r\n\u590d\u6742\u5ea6\uff1a\u679a\u4e3e\u957f\u5ea6 $O(n)$\uff0c\u5206\u7ec4 $O(n)$\uff0c\u67e5\u8be2 $O(\\log n)$\uff0c\u603b\u590d\u6742\u5ea6 $O(n^2\\log n)$\u3002\u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\r\n\r\n\u5f88\u591a\u9898\u89e3\u5230\u8fd9\u91cc\u9009\u62e9\u5012\u5e8f\u679a\u4e3e\u3001\u5408\u5e76\u533a\u95f4\uff0c\u4f46\u6bd5\u7adf\u54b1\u4e0d\u4e00\u5b9a\u80fd\u60f3\u5230\u561b\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136**\u987a\u5e8f\u679a\u4e3e\u3001\u5206\u88c2\u533a\u95f4**\u3002\r\n\r\n\u8003\u8651\u6211\u4eec\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u54ea\u91cc\u3002\u90a3\u4e48\u5206\u7ec4\u548c\u679a\u4e3e\u7684\u590d\u6742\u5ea6\u81f3\u5c11\u8981\u62a0\u6389\u4e00\u4e2a\u3002\r\n\r\n\u53d1\u73b0\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u6027\u8d28\uff1a\r\n\r\n- \u82e5\u533a\u95f4 $[l,r]$ \u662f $k$ \u76f8\u4f3c\u7684\uff0c\u4e14\u540e\u7f00 $p$ \u4e0d\u5728\u5176\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684 $k+1$ \u76f8\u4f3c\uff0c$p$ \u4e00\u5b9a\u4e0d\u5728\u5176\u4e2d\u3002\r\n\r\n\u5f88\u597d\u7406\u89e3\uff0c\u8fd9\u4e2a\u57fa\u4e8e\u540e\u7f00\u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u6216\u8005 $k$ \u76f8\u4f3c\u7684\u5b9a\u4e49\u90fd\u53ef\u4ee5\u8bc1\u3002\r\n\r\n\u8fd9\u4e2a\u6027\u8d28\u544a\u8bc9\u6211\u4eec\uff1a\u627e\u5230\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4e0d\u7528\u8003\u8651\u533a\u95f4\u5916\u7684\u6570\u5bf9\u8fd9\u4e2a\u533a\u95f4\u5206\u7ec4\u7684\u5f71\u54cd\u4e86\u3002\r\n\r\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u6709\u542f\u53d1\u6027\u7684\u7ed3\u8bba\u3002\u90a3\u4e48\u8003\u8651\u5982\u4f55\u5bf9\u4e00\u4e2a\u533a\u95f4\u91cd\u5206\u7ec4\u3002\r\n\r\n- \u6027\u8d28\uff1a\u4ece $k$ \u76f8\u4f3c\u5230 $k+1$ \u76f8\u4f3c\uff0c\u533a\u95f4 $[l,r]$ \u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u88ab\u5206\u6210\u591a\u6bb5\uff0c\u4e14\u6bcf\u6bb5\u8d77\u59cb\u4f4d\u7f6e $t$ \u6ee1\u8db3 $t=l$ \u6216 $height_t=k$\u3002\r\n\r\n\u8fd9\u4e2a\u53ef\u4ee5\u6839\u636e\u5206\u7ec4\u5b9a\u4e49\u76f4\u63a5\u8bc1\u5f97\u3002\r\n\r\n\u6839\u636e\u8fd9\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u9ad8\u6548\u7684\u91cd\u5206\u7ec4\u65b9\u5f0f\uff1a\r\n\r\n- \u5047\u8bbe\u533a\u95f4 $[l,r]$ \u662f $k$ \u76f8\u4f3c\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u627e\u5230 $[l+1,r]$ \u4e2d\u6240\u6709 $height=k$ \u7684\u4f4d\u7f6e\uff0c\u5916\u52a0 $l$ \u548c $r$\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u5206\u6bb5\uff0c\u5904\u7406\u6bcf\u4e00\u6bb5\u7684 $k+1$ \u76f8\u4f3c\u95ee\u9898\u3002\r\n\r\n- $l=r$ \u600e\u4e48\u529e\uff1f \u8fd9\u65f6\u5df2\u7ecf\u9009\u4e0d\u51fa\u4e24\u676f\u9152\uff0c\u6240\u4ee5\u76f4\u63a5\u7ed3\u675f\u5c31\u597d\u3002\r\n\r\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u627e\u5230\u533a\u95f4\u5185\u6240\u6709 $height=k$ \u7684\u4f4d\u7f6e\u3002\u6bd4\u8f83\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u76f4\u63a5\u5728\u6876\u91cc\u53bb\u4e8c\u5206\u627e\uff0c\u6216\u8005\u7528 $set$ \u7ef4\u62a4\u4f4d\u7f6e\u3002\u5f53\u7136\u90fd\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u672c\u4eba\u4e00\u65f6\u8111\u62bd\uff0c\u5199\u4e86\u4e2a\u5e73\u8861\u6811\u3002\r\n\r\n\u6211\u4eec\u5bf9\u6bcf\u4e2a $height$ \u503c\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u67e5\u627e\u65f6\u76f8\u5f53\u4e8e\u627e\u5230\u4e0a\u4e00\u4e2a\u65ad\u70b9\u7684\u540e\u7ee7\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u540e\u7ee7\u6216\u8005\u4e0b\u4e00\u4e2a\u540e\u7ee7\u4f4d\u7f6e\u8d85\u8fc7 $r$\u3002\u7531\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e $height$ \u552f\u4e00\uff0c\u4e14\u81f3\u591a\u4f1a\u5728\u4e00\u4e2a\u533a\u95f4\u5185\u88ab\u8be2\u95ee\u3002\u6240\u4ee5\u6bcf\u4e2a\u4f4d\u7f6e\u6700\u591a\u6210\u4e3a\u4e00\u6b21\u67e5\u8be2\u524d\u9a71\u7684\u7b54\u6848\u3002\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u5747\u644a\u4e3a\u5355\u6b21 $O(\\log n)$\u3002\r\n\r\n\u6b64\u5916\uff0c\u6211\u4eec\u820d\u5f03\u65e0\u6cd5\u5207\u5272\u7684\u7ee7\u627f\uff0c\u6bcf\u6b21\u76f4\u63a5\u627e\u5230\u4e0b\u4e00\u4e2a\u4f1a\u4ea7\u751f\u65b0\u7684\u5207\u5272\u533a\u95f4\u7684\u76f8\u4f3c\u5ea6\u8fdb\u884c\u8f6c\u79fb\u3002\u8fd9\u4e00\u6bb5\u7684\u533a\u95f4\u76f8\u540c\uff0c\u8d21\u732e\u4e00\u5b9a\u76f8\u540c\uff0c\u653e\u5728\u7b54\u6848\u533a\u95f4\u4e0a\u7b49\u540c\u4e8e\u533a\u95f4\u52a0\u548c\u533a\u95f4\u53d6 $\\max$\u3002\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u5229\u7528\u5dee\u5206\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u7ebf\u6bb5\u6811\u3002\u4ee3\u7801\u91cc\u662f\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002\r\n\r\n\u81f3\u4e8e\u627e\u5230\u4e0b\u4e00\u4e2a\u5207\u5206\u70b9\uff0c\u5176\u5b9e\u5c31\u662f $\\min\\{height_{l+1\\dots r}\\}+1$\u3002\u76f4\u63a5\u4e0a $ST$ \u8868\u5c31\u53ef\u3002\r\n\r\n\u8fd9\u6837\u5212\u5206\u533a\u95f4\u7684\u590d\u6742\u5ea6\u770b\u4f3c\u5f88\u7384\u5b66\uff0c\u4f46\u662f\u53ef\u4ee5\u8bc1\u660e\u662f $O(n)$ \u7ea7\u522b\u7684\uff01\r\n\r\n\u8bc1\u660e\uff1a\u8003\u8651\u6bcf\u4e2a\u533a\u95f4\u3002\u957f\u5ea6\u4e0a\u5347\u65f6\uff0c\u8981\u4e48\u65b0\u533a\u95f4\u76f4\u63a5\u7ee7\u627f\uff0c\u8981\u4e48\u533a\u95f4\u88ab\u5207\u5272\u6210\u82e5\u5e72\u6bb5\u3002\u7ed3\u675f\u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff0c\u5373 $n$ \u76f8\u4f3c\u548c\u957f\u5ea6\u4e3a $1$\uff0c\u7531\u4e8e $height\\le n-1$\uff0c\u6240\u4ee5\u8fd9\u4e24\u79cd\u60c5\u51b5\u672c\u8d28\u76f8\u540c\u3002\u56e0\u4e3a\u7ee7\u627f\u5df2\u7ecf\u88ab\u6211\u4eec\u7edf\u4e00\u5904\u7406\u4e86\uff0c\u6240\u4ee5\u53ea\u8003\u8651\u5207\u5272\u3002\u6bcf\u6b21\u8f6c\u79fb\u5fc5\u5b9a\u4ea7\u751f\u533a\u95f4\u5207\u5272\uff0c\u5e76\u4e14\u4e00\u4e2a\u4f4d\u7f6e\u81f3\u591a\u88ab\u5207 $1$ \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u6070\u597d\u5207\u4e86 $n-1$ \u6b21\uff0c\u5373\u4ea7\u751f\u81f3\u591a $n-1$ \u6b21\u6709\u6548\u8f6c\u79fb\u3002\u6240\u4ee5\u6709\u6548\u533a\u95f4\u4e2a\u6570\u4e3a $O(n)$ \u7ea7\u522b\u3002\r\n\r\n\u5bf9\u6bcf\u4e2a\u533a\u95f4\u5904\u7406\u5355\u6b21\u590d\u6742\u5ea6 $O(\\log n)$\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\r\n\r\n\u5bf9\u4e8e\u8fb9\u754c\u7ec6\u8282\uff0c\u5f88\u591a\u9898\u89e3\u90fd\u6709\u5f3a\u8c03\uff0c\u5982\u5404\u7c7b\u521d\u503c $\\pm 10^{18}$ \u4e4b\u7c7b\u3002\r\n\r\n\u6b64\u5916\uff0c\u8003\u8651\u5230\u6807\u8bb0\u6c38\u4e45\u5316\u6bd4\u6807\u8bb0\u4e0b\u653e\u597d\u5199\uff0c\u6240\u4ee5\u6211\u5bf9\u7b54\u6848\u7ebf\u6bb5\u6811\u91c7\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u65b9\u5f0f\u7edf\u8ba1\u7b54\u6848\u3002\r\n\r\n\u56e0\u4e3a\u540c\u65f6\u7528\u4e86\u4e09\u68f5\u6811\uff0c\u6240\u4ee5\u4ee3\u7801\u53ef\u80fd\u7565\u957f\u3002\u5728\u5fc5\u8981\u7684\u5730\u65b9\u6dfb\u52a0\u6ce8\u91ca\u4e86\u3002\r\n```cpp\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<cstdlib>\r\n#include<ctime>\r\nconst int inf=1<<30;\r\nconst long long inff=1ll<<60;\r\nusing namespace std;\r\nstruct treap{\r\n\tint son[2],val;\r\n\tlong long key;\r\n}trp[500001];\r\nstruct tree{\r\n\tlong long maxn,smax;\r\n\tlong long minn,smin;\r\n\t//smax/min \u8868\u793a\u6b21\u5927/\u6b21\u5c0f\u503c\u3002\r\n}tre[4000001];\r\nstruct ans{\r\n\tlong long tag,rev;\r\n\t//tag \u7ef4\u62a4\u65b9\u6848\u6570\u8be2\u95ee\uff0crev \u7ef4\u62a4\u6700\u503c\u8be2\u95ee\u3002\r\n}tr[4000001];\r\nint root[400001],size;\r\n//\u6bcf\u4e2a root \u4ee3\u8868 height \u7684\u4e00\u79cd\u53d6\u503c\uff0c\u5e73\u8861\u6811\u5185\u7ef4\u62a4\u4e0b\u6807\u3002\r\n//treap \u90e8\u5206\r\nvoid rotate(int &k,int fx){\r\n\tint x=trp[k].son[fx^1];\r\n\ttrp[k].son[fx^1]=trp[x].son[fx];\r\n\ttrp[x].son[fx]=k;\r\n\tk=x;\r\n}\r\nvoid insert(int &k,int val){\r\n\tif(!k){\r\n\t\tk=++size;\r\n\t\ttrp[k].key=rand();\r\n\t\ttrp[k].val=val;\r\n\t\treturn;\r\n\t}\r\n\tif(trp[k].val==val)return;\r\n\telse if(trp[k].val>val){\r\n\t\tinsert(trp[k].son[0],val);\r\n\t\tif(trp[k].key<trp[trp[k].son[0]].key)rotate(k,1);\r\n\t}\r\n\telse{\r\n\t\tinsert(trp[k].son[1],val);\r\n\t\tif(trp[k].key<trp[trp[k].son[1]].key)rotate(k,0);\r\n\t}\r\n}\r\nint qlas(int id,int val){\r\n\tint x=root[id],res=0;\r\n\twhile(x){\r\n\t\tif(trp[x].val<=val)x=trp[x].son[1];\r\n\t\telse res=trp[x].val,x=trp[x].son[0];\r\n\t}\r\n\treturn res;\r\n}\r\n//\u540e\u7f00\u6570\u7ec4\u5168\u5bb6\u6876\r\nint n,sa[500001],rk[500001],height[500001];\r\nint tsa[500001],trk[1000001],cnt[500001];\r\nint a[500001],st[500001][20],lg[500001];\r\nchar s[500001];\r\nlong long max(long long x,long long y){\r\n\treturn x>y?x:y;\r\n}\r\nlong long min(long long x,long long y){\r\n\treturn x<y?x:y;\r\n}\r\nint qmin(int l,int r){\r\n\tint k=lg[r-l+1];\r\n\treturn min(st[l][k],st[r-(1<<k)+1][k]);\r\n}\r\ntree merge(tree x,tree y){\r\n\tif(y.maxn>x.maxn)x.smax=x.maxn,x.maxn=y.maxn;\r\n\telse if(y.maxn>x.smax)x.smax=y.maxn;\r\n\tif(y.smax>x.maxn)x.smax=x.maxn,x.maxn=y.smax;\r\n\telse if(y.smax>x.smax)x.smax=y.smax;\r\n\tif(y.minn<x.minn)x.smin=x.minn,x.minn=y.minn;\r\n\telse if(y.minn<x.smin)x.smin=y.minn;\r\n\tif(y.smin<x.minn)x.smin=x.minn,x.minn=y.smin;\r\n\telse if(y.smin<x.smin)x.smin=y.smin;\r\n\treturn x;\r\n}\r\nvoid build(int k,int l,int r){\r\n\ttre[k].maxn=tre[k].smax=-inf;\r\n\ttre[k].minn=tre[k].smin=inf;\r\n\ttr[k].rev=-inff;\r\n\t//\u4e0d\u5904\u7406 0 \u76f8\u4f3c\u7b54\u6848\u5f88\u5927\u4e00\u4e2a\u539f\u56e0\u5c31\u662f\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u53ef\u4ee5\u5c11\u6253\u4e00\u4e2a build\r\n\tif(l==r){\r\n\t\ttre[k].maxn=tre[k].minn=a[sa[l]];\r\n\t\treturn;\r\n\t}\r\n\tint mid=l+r>>1;\r\n\tbuild(k<<1,l,mid);\r\n\tbuild(k<<1|1,mid+1,r);\r\n\ttre[k]=merge(tre[k<<1],tre[k<<1|1]);\r\n}\r\ntree query(int k,int l,int r,int x,int y){\r\n\t//\u8fd9\u56db\u4e2a\u67e5\u8be2\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u4e0d\u65b9\u4fbf\u5355\u72ec\u67e5\u8be2\u3002\r\n\t//\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u628a\u533a\u95f4\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u63d0\u53d6\u51fa\u6765\u3002\r\n\tif(l>=x&&r<=y)return tre[k];\r\n\tint mid=l+r>>1;\r\n\tif(mid>=y)return query(k<<1,l,mid,x,y);\r\n\tif(x>mid)return query(k<<1|1,mid+1,r,x,y);\r\n\treturn merge(query(k<<1,l,mid,x,y),query(k<<1|1,mid+1,r,x,y));\r\n}\r\nvoid modify(int k,int l,int r,int x,int y,long long w1,long long w2){\r\n\t//\u5bf9\u7b54\u6848\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\uff0cw1 \u662f\u65b9\u6848\uff0cw2 \u662f\u6700\u503c\r\n\tif(l>=x&&r<=y){\r\n\t\ttr[k].tag+=w1;\r\n\t\ttr[k].rev=max(tr[k].rev,w2);\r\n\t\treturn;\r\n\t}\r\n\tint mid=l+r>>1;\r\n\tif(x<=mid)modify(k<<1,l,mid,x,y,w1,w2);\r\n\tif(mid<y)modify(k<<1|1,mid+1,r,x,y,w1,w2);\r\n}\r\nlong long qmax(int k,int l,int r,int x){\r\n\tif(l==r)return tr[k].rev;\r\n\tint mid=l+r>>1;\r\n\tlong long res=tr[k].rev;\r\n\tif(x<=mid)res=max(res,qmax(k<<1,l,mid,x));\r\n\telse res=max(res,qmax(k<<1|1,mid+1,r,x));\r\n\treturn res;\r\n}\r\nlong long qsum(int k,int l,int r,int x){\r\n\tif(l==r)return tr[k].tag;\r\n\tint mid=l+r>>1;\r\n\tlong long res=tr[k].tag;\r\n\tif(x<=mid)res+=qsum(k<<1,l,mid,x);\r\n\telse res+=qsum(k<<1|1,mid+1,r,x);\r\n\treturn res;\r\n}\r\nvoid solve(int l,int r,int minx){\r\n\t//\u4e3b\u4f53\u90e8\u5206\u3002\u8868\u793a\u5f53\u524d\u5904\u7406\u533a\u95f4 [l,r] \u662f minx \u76f8\u4f3c\u7684\u3002\r\n\tif(l>=r||minx==n)return;\r\n\ttree rst=query(1,1,n,l,r);\r\n\tint nxt=qmin(l+1,r);\r\n\t//\u76f4\u63a5\u627e\u5230\u4e0b\u4e00\u4e2a\u5207\u70b9\u957f\u5ea6\r\n\tlong long res=max(rst.maxn*rst.smax,rst.minn*rst.smin),as=1ll*(r-l+1)*(r-l)/2;\r\n\tif(minx)modify(1,1,n,minx,nxt,as,res);\r\n\t//\u5bf9 0 \u76f8\u4f3c\u5355\u72ec\u89e3\u51b3\u539f\u56e0\u89c1 build \u51fd\u6570\u3002\r\n\t//0 \u76f8\u4f3c\u662f\u6574\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5 O(1) \u89e3\u51b3\u3002\r\n\tint ps=l;\r\n\twhile(ps<=r){\r\n\t\tint t=qlas(nxt,ps);\r\n\t\tif(!t||t>r)t=r+1;\r\n\t\tsolve(ps,t-1,nxt+1);\r\n\t\tps=t;\r\n\t}\r\n}\r\nint main(){\r\n\tsrand((unsigned)time(NULL));\r\n\tint i,j;\r\n\tscanf(\"%d%s\",&n,s+1);\r\n\tfor(i=1;i<=n;i++)scanf(\"%d\",&a[i]);\r\n\tfor(i=1;i<=n;i++)rk[i]=s[i]-'a'+1,cnt[rk[i]]++;;\r\n\tfor(i=1;i<=26;i++)cnt[i]+=cnt[i-1];\r\n\tfor(i=n;i;i--)sa[cnt[rk[i]]--]=i;\r\n\tfor(i=1;i<=n;i++){\r\n\t\tif(s[sa[i]]==s[sa[i-1]])rk[sa[i]]=rk[sa[i-1]];\r\n\t\telse rk[sa[i]]=rk[sa[i-1]]+1;\r\n\t}\r\n\tfor(j=1;j<n;j*=2){\r\n\t\tmemcpy(tsa,sa,sizeof(sa));\r\n\t\tmemcpy(trk,rk,sizeof(rk));\r\n\t\tint tot=0;\r\n\t\tfor(i=n;i>n-j;i--)sa[++tot]=i;\r\n\t\tfor(i=1;i<=n;i++)if(tsa[i]>j)sa[++tot]=tsa[i]-j;\r\n\t\tfor(i=1;i<=n;i++)rk[i]=trk[sa[i]];\r\n\t\tmemset(cnt,0,sizeof(cnt));\r\n\t\tfor(i=1;i<=n;i++)cnt[rk[i]]++;\r\n\t\tfor(i=1;i<=n;i++)cnt[i]+=cnt[i-1];\r\n\t\tfor(i=n;i;i--)tsa[cnt[rk[i]]--]=sa[i];\r\n\t\tmemcpy(sa,tsa,sizeof(sa));\r\n\t\tfor(i=1;i<=n;i++){\r\n\t\t\tif(trk[sa[i]]==trk[sa[i-1]]&&trk[sa[i]+j]==trk[sa[i-1]+j])rk[sa[i]]=rk[sa[i-1]];\r\n\t\t\telse rk[sa[i]]=rk[sa[i-1]]+1;\r\n\t\t}\r\n\t\tif(rk[sa[n]]==n){\r\n\t\t\tfor(i=1;i<=n;i++)sa[rk[i]]=i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tint len=0;\r\n\tfor(i=1;i<=n;i++){\r\n\t\tif(len)len--;\r\n\t\twhile(s[i+len]==s[sa[rk[i]-1]+len])len++;\r\n\t\theight[rk[i]]=len;\r\n\t}\r\n\tfor(i=1;i<=n;i++)insert(root[height[i]],i);\r\n\tfor(i=1;i<=n;i++)st[i][0]=height[i];\r\n\tfor(i=2;i<=n;i++)lg[i]=lg[i/2]+1;\r\n\tfor(i=1;i<=lg[n];i++)for(j=1;j+(1<<i)-1<=n;j++)st[j][i]=min(st[j][i-1],st[j+(1<<i-1)][i-1]);\r\n\tbuild(1,1,n);\r\n\tsolve(1,n,0);\r\n\ttree ss=query(1,1,n,1,n);\r\n\tprintf(\"%lld %lld\\n\",1ll*n*(n-1)/2,max(ss.maxn*ss.smax,ss.minn*ss.smin));\r\n\tfor(i=1;i<n;i++){\r\n\t\tlong long num=qsum(1,1,n,i);\r\n\t\tprintf(\"%lld %lld\\n\",num,num?qmax(1,1,n,i):0);\r\n\t\t//\u6709\u65b9\u6848\uff0c\u6211\u4eec\u8f93\u51fa\u65b9\u6848\uff1b\u6ca1\u6709\u65b9\u6848\uff0c\u6211\u4eec\u8f93\u51fa\u7ea6\u5b9a\u7684 0\r\n\t}\r\n}\r\n```",
        "postTime": 1654768505,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "P2178 \u54c1\u9152\u5927\u4f1a\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u697c\u4e0b\u7ed9\u4e86\u4e00\u79cdO\uff08N\uff09\u7684\u505a\u6cd5\uff0c\u8ba9\u6211\u4eec\u6765YY\u4e00\u79cd\u540c\u6837O\uff08N\uff09\u4f46\u6ca1\u6709\u540e\u7f00\u6811\u7684\u505a\u6cd5\u3002\n\n\u6240\u8c13\u7684\u201cr\u76f8\u4f3c\u201d\u5176\u5b9e\u6307\u7684\u662f\u4e24\u4e2a\u4f4d\u7f6e\u7684LCP\u957f\u5ea6>=r\uff0c\u8054\u7cfb\u5230\u540e\u7f00\u6570\u7ec4\uff0c\u8f6c\u5316\u6210\u4e24\u4e2a\u4f4d\u7f6e\u5728hei\u6570\u7ec4\u6240\u5939\u7684\u4e00\u6bb5\u533a\u95f4>=r\uff0c\u5982\u4f55\u5728hei\u6570\u7ec4\u4e0a\u7edf\u8ba1\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u6216\u8005\u5e76\u67e5\u96c6\u505a\u5230O\uff08N\uff09\uff08\u5e76\u67e5\u96c6\u867d\u7136\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0b\u7684O\uff08N\uff09\uff0c\u4f46\u7531\u4e8e\u53cd\u963f\u514b\u66fc\u51fd\u6570\u589e\u957f\u7f13\u6162\uff0c\u53ef\u4ee5\u770b\u505aO\uff08N \uff09\uff09\n\n\u8003\u8651\u540e\u7f00\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528DC3\u505a\u5230O\uff08N\uff09\uff0c\u5269\u4e0b\u7684\u4e5f\u5f88\u53ef\u505a\uff0c\u6240\u4ee5\u5c31\u662fO\uff08N\uff09\uff0c\u4e0d\u7528\u540e\u7f00\u81ea\u52a8\u673a\u6216\u8005\u540e\u7f00\u6811\uff0c\u4e5f\u53ef\u4ee5\u7528string\n",
        "postTime": 1439807948,
        "uid": 7428,
        "name": "yjqqqaq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u7b2c$600ac$\uff0c\u5199\u4e2a\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002   \n\u8bbe$ans1(i)$\u8868\u793a\u9009\u51fa$(i-1)$\u76f8\u4f3c\u9152\u7684\u65b9\u6848\u6570\uff0c   \n$ans2(i)$\u8868\u793a$(i-1)$\u76f8\u4f3c\u9152\u53ef\u5f97\u5230\u7684\u6700\u5927\u7f8e\u5473\u5ea6\u3002    \n\u6211\u4eec\u6c42\u51fa$height$\u6570\u7ec4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002  \n\u8003\u8651\u5e76\u67e5\u96c6\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u52a0\u3002   \n\u56e0\u4e3a\u6211\u4eec\u9884\u5148\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u8fc7\u4e86\u6240\u4ee5\u52a0\u7684\u4e32\u7684\u524d\u7f00\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u6b64\u65f6\u6839\u636e\u9898\u610f\uff1a\u5bf9\u4e8e$2$\u4e2a$r$\u76f8\u4f3c\u7684\u4e32\uff0c\u5219\u5b83\u4eec\u4e5f\u4e00\u5b9a\u662f$0 < r'< r$\u76f8\u4f3c\u7684\u3002     \n\u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u4e00\u4e0b\u5e76\u67e5\u96c6\u6bcf\u4e2a\u5355\u5143\u7684\u5927\u5c0f$sz$\u3002       \n\u5bf9\u65b9\u6848\u6570\u4ea7\u751f\u7684\u8d21\u732e\u5c31\u662f\u8fd9\u4e24\u4e2a\u5355\u5143\u7684$sz$\u4e58\u79ef\u3002\uff08\u4e58\u6cd5\u539f\u7406\u3002\uff09         \n\u5bf9\u4e8e\u7b97$ans2$\u7684\u8d21\u732e\uff0c\u8fd9\u4e2a\u5c31\u5f88\u7b80\u5355\u4e86\u3002    \n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u5e76\u67e5\u96c6\u5355\u5143\u91cc\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002   \n\u6bcf\u6b21\u66f4\u65b0\u65f6\u5c31\u53d6\u6700\u5927\u503c\u7684\u4e58\u79ef\u548c\u6700\u5c0f\u503c\u7684\u4e58\u79ef\u7684\u8f83\u5927\u503c\u3002\uff08\u6700\u5c0f\u503c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d1f\u8d1f\u5f97\u6b63\u6781\u5927\u7684\u60c5\u51b5\u3002\uff09   \n\u6700\u540e\u518d\u5408\u5e76\u7edf\u8ba1\u4e00\u4e0b\u7b54\u6848\u5373\u53ef\u3002    \n### My code  \n```cpp\n#include <bits/stdc++.h>\n\nusing ll = long long;\nusing std::min;\nusing std::max;\nconst int maxn = 3e5 + 10;\nconst ll inf = 1ll << 62;\nint n, m, i, j, k, tot;\nchar s[maxn];\nint v[maxn], fa[maxn], id[maxn];\nint cnt[maxn], sa[maxn], sec[maxn], he[maxn], rnk[maxn];\nll mn[maxn], mx[maxn], sz[maxn], ans1[maxn], ans2[maxn];\n\ninline void radix_sort() {\n  for (int i = 0; i <= m; i++) cnt[i] = 0;\n  for (int i = 1; i <= n; i++) cnt[rnk[sec[i]]]++;\n  for (int i = 1; i <= m; i++) cnt[i] += cnt[i - 1];\n  for (int i = n; i >= 1; i--) sa[cnt[rnk[sec[i]]]--] = sec[i];\n}\ninline void get_sa() {\n  m = 122, radix_sort();\n  for (int l = 1, tot; l <= n; m = tot, l <<= 1) {\n    tot = 0;\n    for (int i = n - l + 1; i <= n; i++) sec[++tot] = i;\n    for (int i = 1; i <= n; i++)\n      if (sa[i] > l) sec[++tot] = sa[i] - l;\n    radix_sort();\n    std::swap(rnk, sec), rnk[sa[1]] = tot = 1;\n    for (int i = 2; i <= n; i++)\n      rnk[sa[i]] = (sec[sa[i]] == sec[sa[i - 1]] && sec[sa[i] + l] == sec[sa[i - 1] + l]) ? tot : ++tot;\n    if (tot == n) break;\n  }\n}\ninline void get_he() {\n  for (int i = 1; i <= n; i++) rnk[sa[i]] = i;\n  for (int i = 1, k = 0; i <= n; i++) {\n    if (rnk[i] == 1) continue;\n    if (k) k--;\n    int j = sa[rnk[i] - 1];\n    while (i + k <= n && j + k <= n && s[i + k] == s[j + k]) k++;\n    he[rnk[i]] = k;\n  }\n}\n\nint find(int u) { return u == fa[u] ? u : fa[u] = find(fa[u]); }\ninline void Union(int u, int v) {\n  int ru = find(u), rv = find(v);\n  int x = he[u];\n  ans1[x] += 1ll * sz[ru] * sz[rv];\n  ans2[x] = max(ans2[x], max(1ll * mx[ru] * mx[rv], 1ll * mn[ru] * mn[rv]));\n  mx[ru] = max(mx[ru], mx[rv]), mn[ru] = min(mn[ru], mn[rv]);\n  fa[rv] = ru, sz[ru] += sz[rv];\n}\n\nint main() {\n  scanf(\"%d\\n%s\", &n, s + 1);\n  for (int i = 1; i <= n; i++)\n    scanf(\"%d\", v + i);\n  for (int i = 1; i <= n; i++)\n    rnk[i] = s[i], sec[i] = i;\n  get_sa(), get_he();\n  for (int i = 1; i <= n; i++)\n    id[i] = fa[i] = i, ans1[i] = 0, ans2[i] = -inf, sz[i] = 1, mx[i] = mn[i] = v[sa[i]];\n  std::sort(id + 1, id + n + 1, [](int a, int b){return he[a] > he[b];});\n  for (int i = 1, x, y; i <= n; i++)\n    if (find(id[i]) != find(id[i] - 1)) Union(id[i], id[i] - 1);\n  for (int i = n - 2; i >= 0; i--)\n    ans1[i] += ans1[i + 1], ans2[i] = max(ans2[i], ans2[i + 1]);\n  for (int i = 0; i < n; i++)\n    printf(\"%lld %lld\\n\", ans1[i], !ans1[i] ? 0 : ans2[i]);\n  return 0;\n}\n```\n\n\n",
        "postTime": 1569862062,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u8bf4\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a+\u7ebf\u6bb5\u6811\u7684\u65e0\u8111\u505a\u6cd5\n\n\u9996\u5148\u5efa\u51faSAM\uff0c\u7136\u540e\u5bf9parent\u6811\u8fdb\u884cdp\uff0c\u7ef4\u62a4\u6700\u5927\u6b21\u5927\u503c\uff0c\u6700\u5c0f\u6b21\u5c0f\u503c\n\n\u663e\u7136\u4e00\u4e2a\u4e32\u80fd\u66f4\u65b0\u7b54\u6848\u7684\u533a\u95f4\u662f$[len_{fa_{x}} + 1, len_x]$\uff0c\u65b9\u6848\u6570\u5c31\u76f8\u5f53\u4e8e\u662f\u4ece$siz_x$\u91cc\u9762\u9009\u4e24\u4e2a\uff0c\u4e5f\u5c31\u662f$\\frac{siz_x  (siz_x - 1)}{2}$\n\n\u76f4\u63a5\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u4e00\u4e0b\u7092\u9e21\u597d\u5199~\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long \n#define LL long long \nusing namespace std;\nconst int MAXN = 1e6 + 10;\nconst LL INF = 2e18 + 10;\ntemplate <typename A, typename B> inline bool chmin(A &a, B b){if(a > b) {a = b; return 1;} return 0;}\ntemplate <typename A, typename B> inline bool chmax(A &a, B b){if(a < b) {a = b; return 1;} return 0;}\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\nint N, a[MAXN];\nchar s[MAXN];\nint root = 1, tot = 1, las = 1, ch[MAXN][26], fa[MAXN], len[MAXN], rev[MAXN];\nLL mx[MAXN], mx2[MAXN], ans[MAXN], ans1[MAXN], mn[MAXN], mn2[MAXN], tmp[MAXN], siz[MAXN];\nvector<int> v[MAXN];\nvoid insert(int x, int id) {\n\tint now = ++tot, pre = las; las = now; siz[now] = 1; len[now] = len[pre] + 1; mx[now] = a[id]; mx2[now] = -INF; mn[now] = a[id]; mn2[now] = INF; rev[id] = now;\n\tfor(; pre && !ch[pre][x]; pre = fa[pre]) ch[pre][x] = now;\n\tif(!pre) {fa[now] = root; return ;}\n\tint q = ch[pre][x];\n\tif(len[pre] + 1 == len[q]) fa[now] = q;\n\telse {\n\t\tint nq = ++tot; fa[nq] = fa[q]; len[nq] = len[pre] + 1; \n\t\tmemcpy(ch[nq], ch[q], sizeof(ch[q]));\n\t\tfa[now] = fa[q] = nq;\n\t\tfor(; pre && ch[pre][x] == q; pre = fa[pre]) ch[pre][x] = nq;\n\t}\n}\nvoid BuildDAG() {\n\tfor(int i = 1; i <= tot; i++) assert(fa[i] != i), v[fa[i]].push_back(i);\n}\n\nint rt, Node, ls[MAXN], rs[MAXN], ad[MAXN], si[MAXN];\nLL sum[MAXN], tag[MAXN];\nvoid Build(int &k, int l, int r) {\n\tif(!k) k = ++Node, tag[k] = -INF, si[k] = r - l + 1;\n\tif(l == r) return ;\n\tint mid = l + r >> 1;\n\tBuild(ls[k], l, mid);\n\tBuild(rs[k], mid + 1, r);\n}\nvoid IntMax(int k, int l, int r, int ql, int qr, LL v) {\n\tif(ql <= l && r <= qr) {chmax(tag[k], v); return ;\t}\n\tint mid = l + r >> 1;\n\tif(ql <= mid) IntMax(ls[k], l, mid, ql, qr, v);\n\tif(qr  > mid) IntMax(rs[k], mid + 1, r, ql, qr, v);\n}\nvoid IntAdd(int k, int l, int r, int ql, int qr, LL v) {\n\tif(ql <= l && r <= qr) {sum[k] += v; return ;}\n\tint mid = l + r >> 1;\n\tif(ql <= mid) IntAdd(ls[k], l, mid, ql, qr, v);\n\tif(qr  > mid) IntAdd(rs[k], mid + 1, r, ql, qr, v);\n}\nLL QueryNum(int k, int l, int r, int pos) {\n\tif(!k) return 0;\n\tLL now = sum[k];\n\tif(l == r || !k) return now;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) now += QueryNum(ls[k], l, mid, pos);\n\telse now += QueryNum(rs[k], mid + 1, r, pos);\n\treturn now;\n}\nLL QueryMax(int k, int l, int r, int pos) {\n\tif(!k) return -INF;\n\tLL now = tag[k];\n\tif(l == r || !k) return now;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) chmax(now, QueryMax(ls[k], l, mid, pos));\n\telse chmax(now, QueryMax(rs[k], mid + 1, r, pos));\n\treturn now;\n}\nvoid dfs(int x) {\n\tfor(auto &to : v[x]) {\n\t\tdfs(to);\n\t\tsiz[x] += siz[to];\n\t\tif(mx2[to] > mx[x]) chmax(mx2[x], mx[x]), mx[x] = mx2[to];\n\t\telse chmax(mx2[x], mx2[to]);\n\t\tif(mx[to] > mx[x]) chmax(mx2[x], mx[x]), mx[x] = mx[to];\n\t\telse chmax(mx2[x], mx[to]);\n\t\t\n\t\tif(mn2[to] < mn[x]) chmin(mn2[x], mn[x]), mn[x] = mn2[to];\n\t\telse chmin(mn2[x], mn2[to]);\n\t\tif(mn[to] < mn[x]) chmin(mn2[x], mn[x]), mn[x] = mn[to];\n\t\telse chmin(mn2[x], mn[to]); \n\t}\n\tif(siz[x] > 1 && x != root) {\n\t\tIntMax(rt, 1, N, len[fa[x]] + 1, len[x], mx[x] * mx2[x]);\n\t\tIntMax(rt, 1, N, len[fa[x]] + 1, len[x], mn[x] * mn2[x]);\n\t\t\n\t\tIntAdd(rt, 1, N, len[fa[x]] + 1, len[x], 1ll * siz[x] * (siz[x] - 1) / 2);\n\t}\n}\n\nsigned main() {\n\tN = read();\n\tBuild(rt, 1, N);\n\tscanf(\"%s\", s + 1);\n\treverse(s + 1, s + N + 1);\n\tfor(int i = 1; i <= N; i++) tmp[i] = a[i] = read(), assert(a[i] != 0);\n\treverse(a + 1, a + N + 1);\n\tfor(int i = 1; i <= N; i++) insert(s[i] - 'a', i);\n\tfor(int i = 1; i <= tot; i++) {\n\t\tans[i] = -INF;\n \t\tif(!mx[i]) mx[i] = -INF;\n\t\tif(!mx2[i]) mx2[i] = -INF;\n\t\tif(!mn[i]) mn[i] = INF;\n\t\tif(!mn2[i]) mn2[i] = INF;\t\n\t}\n\tBuildDAG();\n \tdfs(1);\n \tfor(int i = 1; i < N; i++) {\n\t\tans1[i] = QueryNum(root, 1, N, i);\n\t\tans[i] = QueryMax(root, 1, N, i);\n\t\t\n\t}\n\tsort(tmp + 1, tmp + N + 1, greater<int>());\n\tcout << 1ll * N * (N - 1) / 2 << \" \" << max(tmp[1] * tmp[2], tmp[N] * tmp[N - 1]) << '\\n';\n \tfor(int i = 1; i < N; i++) cout << ans1[i] <<  \" \" << (ans[i] <= -INF ? 0 : ans[i]) << '\\n';\n    return 0;\n}\n/*\n2\naa\n-100000000 100000000\n12\nabaabaabaaba\n1 -2 3 -4 5 -6 7 -8 9 -10 11 -12\n*/\n```",
        "postTime": 1550446498,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u9ad8\u7ec4\u7684\u849f\u84bb\u3010\u5212\u6389\u3011\u3001\u521a\u5b66\u4e86\u540e\u7f00\u6570\u7ec4\u7684\u849f\u84bb\u3010\u5212\u6389\u3011\u6765\u505a\u8fd9\u9053\u9898\u786e\u5b9e\u6709\u70b9\u6076\u5fc3\u2026\u2026\u505a\u4e86\u6574\u65747\u4e2ah\u624dA\u6389\u3002\n\n\u4e0d\u4f1a\u540e\u7f00\u81ea\u52a8\u673a\u3001\u6ca1\u542c\u8bf4\u8fc7\u540e\u7f00\u6811\u3001\u53ea\u4f1a\u540e\u7f00\u6570\u7ec4\u677f\u5b50\u2014\u2014\u600e\u4e48\u529e\uff1f\n\n\u56e0\u4e3a\u540e\u7f00\u6570\u7ec4\u6784\u5efa\u662fnlogn\u6211\u65e0\u6cd5\u4f18\u5316\uff0c\u6240\u4ee5\u771f\u6b63\u8981\u641e\u7684\u5730\u65b9\u662f\u67e5\u8be2\u7684\u5730\u65b9\u3002\n\nN\u65b9\u66b4\u529b\u67e5\u8be2\uff1f\u592a\u5929\u771f\u3002\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5O\uff08n\uff09\u67e5\u8be2\u7684\u3002\n\n\u9996\u5148\u8981\u660e\u767d\u4e00\u70b9\uff1a\n\n\u6211\u4eec\u5047\u8bbeheight\u6570\u7ec4\u4e0a\u7b2ci\u4e2a\u70b9\u7684\u503c\u662fR\uff0c\u90a3\u4e48\u4ecei\u70b9\u5f00\u59cb\u6269\u5c55\uff08\u60f3\u8c61\u4e00\u4e0b\u4e00\u6ef4\u6c34\u7684\u6269\u5c55\uff09\uff0c\u76f4\u5230\u9047\u5230\u6bd4\u4ed6\u5c0f\u7684\u5730\u65b9\u5c31\u505c\u4e0b\uff0c\u90a3\u4e48\u73b0\u5728\u6269\u5c55\u7684\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6240\u4ee5\u6570\u90fd\u6ee1\u8db3\u76f8\u4f3c\u5ea6\u4e3aR\u3002\u90a3\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684Rank1\u548cRank2\u5373\u53ef\u3002\u6211\u4eec\u5148\u5c06height\u6570\u7ec4\u7528\u5176\u4ed6\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u5f00\u59cb\u6269\u5c55\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u987a\u5e8f\u662f\u4ece\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u5728\u6269\u5c55A\u70b9\u65f6\uff0c\u6240\u9047\u5230\u7684\u6240\u6709\u5df2\u6269\u5c55\u8fc7\u7684\u533a\u95f4\u6211\u4eec\u662f\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u533a\u95f4\u7684height\u503c\u4e00\u5b9a\u5927\u4e8eA\u7684height\u503c\uff08\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\u3002\n\n\u5bf9\u4e8e\u65b9\u6848\u6570\u7684\u8ba1\u7b97\uff0c\u90a3\u5c31\u662f\u7b80\u5355\u7684\u7ec4\u5408\u6570\u3002\u56e0\u4e3a\u89c4\u5b9a\u90092\u4e2a\uff0c\u6240\u4ee5\u5c31\u662f  n\\*\uff08n-1)/2 \u3010n\u4e3a\u4f60\u6269\u5c55\u7684\u533a\u95f4\u7684\u70b9\u7684\u4e2a\u6570\u3011\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u6bcf\u4e2a\u70b9\u53ea\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u51fa\u6765\u662fO\uff08n\uff09\u7684\u67e5\u8be2\u6548\u7387\u3002\n\n\u5982\u679c\u4f60\u8fd9\u6837\u5199\u4e86\uff0c\u5374\u53d1\u73b0\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\uff1f\n\n\u6ca1\u9519\uff0c\u8fd9\u4e2a\u91cc\u9762\u662f\u6709\u5f88\u591a\u5f88\u591a\u7ec6\u8282\u7684\u3002\u9996\u5148\u7f8e\u5473\u503c\u53ef\u80fd\u662f\u8d1f\u6570\uff01\u8fd9\u5c31\u8981\u6c42\u6211\u4eec\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6269\u5c55\u7684\u533a\u95f4\u4e0d\u4ec5\u4fdd\u5b58\u6b63\u7684Rank1\u548cRank2\uff0c\u8fd8\u8981\u50a8\u5b58\u8d1f\u7684Negrank1\u548cNegrank2\uff01\uff01\uff01\uff01\n\n\u4e0d\u4ec5\u5982\u6b64\uff0c\u8fd8\u6709\u4e00\u5806\u4e00\u5806\u5c0f\u7ec6\u8282\u9700\u8981\u53bb\u6ce8\u610f\u3002\u6bd4\u5982\u5728\u5408\u5e76\u533a\u95f4\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u662f\u5426\u4f1a\u91cd\u590d\u50a8\u5b58rank\u503c\uff1b\u5728\u8ba1\u7b97sum\u7684\u65f6\u5019\uff0c\u8003\u8651\u6b64\u533a\u95f4\u6709\u6ca1\u6709\u5230\u6700\u5de6\u8fb9\u2026\u2026\u7b49\u7b49\u7b49\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u9700\u8981\u4f60\u53bb\u6162\u6162\u5199\uff0c\u6162\u6162\u8c03\u3002\n\n\u63a5\u7740\uff0c\u8981\u660e\u767dheight\u6570\u7ec4\u7684\u610f\u4e49\uff0cheight\u662f\u6307sa[i]\u548csa[i-1]\u7684LCP\uff0c\u6240\u4ee5\u5728cnt\u4e0a\u8fd8\u8981\u7ec6\u60f3.\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u5728\u521d\u59cb\u5316\u7b54\u6848\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u8981\u521d\u59cb\u5316\u5230-1e18\uff01\uff01\u56e0\u4e3a\u6570\u7279\u522b\u5927\uff01\uff01\uff01\u5e76\u4e14\uff0c\u4e00\u5b9a\u8981\u5f00long long~\uff01\u3010\u8fd9\u4e0d\u5e9f\u8bdd\u5417\u3011\n\n\u7ec6\u8282\u51b3\u5b9a\u6210\u8d25\u3002\u672c\u4eba\u4ee3\u7801\u5f88\u4e11\uff0c\u4f60\u4eec\u51d1\u5408\u7740\u770b\u5427\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath> \n#define o 300001 \nusing namespace std;\nlong long a[o];  \nlong long n,len,tot,cnt,minnum,maxnum,what;\nlong long t1[o],t2[o],sa[o],Rank[o],height[o],cc[o],num[o],rem[o],sign[o]; \nchar s[o];\nstruct sumu\n{\n    long long l,r,rank1,rank2,sum,negrank1,negrank2;\n    bool hehe;\n}zoom[o];\nstruct yc\n{\n    long long total,nice;\n}ans[o];\nint vis[o];\nint min(int a,int b){return a<b?a:b;}\nbool cmp(int a,int b){return height[a]>height[b];}\ninline bool compare(long long *y,long long a,long long b,int k)\n{\n    int arank1,brank1,arank2,brank2;\n    arank1=y[a];\n    brank1=y[b];\n    arank2=a+k>=len?-1:y[a+k];\n    brank2=b+k>=len?-1:y[b+k];\n    return arank1==brank1&&arank2==brank2; \n}\nvoid make_sa()\n{\n    long long *x=t1,*y=t2,m=26;\n    for(int i=0;i<m;i++)cc[i]=0;\n    for(int i=0;i<len;i++)++cc[x[i]=s[i]-'a'];\n    for(int i=1;i<m;i++)cc[i]+=cc[i-1];\n    for(int i=len-1;i>=0;i--)sa[--cc[x[i]]]=i;\n    for(int k=1;k<=len;k<<=1)\n    {\n        int p=0;\n        for(int i=len-k;i<len;i++)y[p++]=i;\n        for(int i=0;i<len;i++)if(sa[i]>=k)y[p++]=sa[i]-k;\n        for(int i=0;i<m;i++)cc[i]=0;\n        for(int i=0;i<len;i++)++cc[x[y[i]]];\n        for(int i=1;i<m;i++)cc[i]+=cc[i-1];\n        for(int i=len-1;i>=0;i--)sa[--cc[x[y[i]]]]=y[i];\n        swap(x,y);\n        m=1;x[sa[0]]=0;\n        for(int i=1;i<len;i++)\n        x[sa[i]]=compare(y,sa[i],sa[i-1],k)?m-1:m++;\n        if(m>=len)break; \n    }\n}\nvoid make_height()\n{\n    for(int i=0;i<len;i++)Rank[sa[i]]=i;\n    height[0]=0;\n    int k=0;\n    for(int i=0;i<len;i++)\n    {\n        rem[Rank[i]]=a[i];\n        if(!Rank[i])continue;\n        int j=sa[Rank[i]-1];\n        if(k)k--;\n        while(s[i+k]==s[j+k])\n            k++;\n        height[Rank[i]]=k;\n    }\n}\nvoid check(long long value,long long top,long long type)\n{\n    if(type>=0)\n    {\n        if(value==minnum)return;\n        if(value<=zoom[top].rank2)return;\n        if(value>=zoom[top].rank1)\n        {\n            zoom[top].rank2=zoom[top].rank1;\n            zoom[top].rank1=value;\n        }\n        else\n            zoom[top].rank2=value;        \n    }\n    else\n    {\n        if(value==maxnum)return;\n        if(value>=zoom[top].negrank1)return;\n        if(value<=zoom[top].negrank2)\n        {\n            zoom[top].negrank1=zoom[top].negrank2;\n            zoom[top].negrank2=value;\n        }\n        else\n            zoom[top].negrank1=value;\n    }\n    \n}\nvoid make(int R)  //\u66f4\u65b0\u7b54\u6848 \n{\n    if(zoom[tot].rank1!=minnum&&zoom[tot].rank2!=minnum)\n        if(zoom[tot].rank1*zoom[tot].rank2>ans[R].nice) ans[R].nice=zoom[tot].rank1*zoom[tot].rank2;\n    if(zoom[tot].negrank1!=maxnum&&zoom[tot].negrank2!=maxnum)\n        if(zoom[tot].negrank1*zoom[tot].negrank2>ans[R].nice) ans[R].nice=zoom[tot].negrank1*zoom[tot].negrank2;\n    if(zoom[tot].rank1!=minnum&&zoom[tot].negrank2!=maxnum)\n        if(zoom[tot].rank1*zoom[tot].negrank2>ans[R].nice) ans[R].nice=zoom[tot].rank1*zoom[tot].negrank2;\n    if(zoom[tot].rank2!=minnum&&zoom[tot].negrank1!=maxnum)\n        if(zoom[tot].rank2*zoom[tot].negrank1>ans[R].nice) ans[R].nice=zoom[tot].rank2*zoom[tot].negrank1;\n    if(zoom[tot].rank1!=minnum&&zoom[tot].negrank1!=maxnum)\n        if(zoom[tot].rank1*zoom[tot].negrank1>ans[R].nice) ans[R].nice=zoom[tot].rank1*zoom[tot].negrank1;\n    if(zoom[tot].rank2!=minnum&&zoom[tot].negrank2!=maxnum)\n        if(zoom[tot].rank2*zoom[tot].negrank2>ans[R].nice) ans[R].nice=zoom[tot].rank2*zoom[tot].negrank2;\n}\nmain()\n{\n    scanf(\"%lld\",&n);\n    scanf(\"%s\",s);\n    len=strlen(s);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%lld\",&a[i]),num[i]=i;\n        //\u521d\u59cb\u5316ans \n        ans[i].nice=-1e18-1000;  \n        ans[i].total=0;\n        if(a[i]<minnum)minnum=a[i];\n        if(a[i]>maxnum)maxnum=a[i];\n    }\n    minnum--;\n    maxnum++;\n    make_sa();\n    make_height();\n    sort(num,num+n,cmp);\n    memset(vis,127,sizeof(vis));\n    for(int i=0;i<n;i++)\n    if(vis[num[i]]>=n)\n    {\n        long long l,r,now,R;\n        l=r=now=num[i],R=height[now];\n        tot++;cnt=0;\n        \n        //\u521d\u59cb\u5316zoom[tot]\n         \n        zoom[tot].rank1=zoom[tot].rank2=minnum;\n        zoom[tot].negrank1=zoom[tot].negrank2=maxnum;\n        zoom[tot].sum=0;\n        zoom[tot].hehe=false;\n    \n        // \u521d\u59cb\u5316\u5b8c\u6210 \n        while(height[l]>=height[now]&&l>=0)\n        { \n            if(vis[l]>R&&vis[l]<n)\n            {\n                cnt+=zoom[sign[l]].sum;\n                if(zoom[sign[l]].hehe)\n                    ans[R].total-=(zoom[sign[l]].sum-1)*zoom[sign[l]].sum/2;\n                else\n                    ans[R].total-=(zoom[sign[l]].sum+1)*zoom[sign[l]].sum/2;\n                //\u8fd9\u91cc\u9700\u8981\u52a0\u7279\u5224\u2014\u2014\u56e0\u4e3aL\u5230R\u533a\u95f4\u7684rank1\u6216\u8005rank2\u53ef\u80fd\u8bb0\u5f55\u7684\u662f ram[r]!\n                //\u6ce8\u610f\uff0c\u5904\u7406\u6b63\u65f6\u5148\u5c0f\u540e\u5927\uff0c\u5904\u7406\u8d1f\u65f6\u5148\u5927\u540e\u5c0f \n                if(zoom[sign[l]].rank2!=rem[l])\n                    check(zoom[sign[l]].rank2,tot,1);\n                if(zoom[sign[l]].rank1!=rem[l])\n                    check(zoom[sign[l]].rank1,tot,1);\n                if(zoom[sign[l]].negrank1!=rem[l])\n                check(zoom[sign[l]].negrank1,tot,-1);\n                if(zoom[sign[l]].negrank2!=rem[l])\n                    check(zoom[sign[l]].negrank2,tot,-1);\n                \n                long long ll,rr,hehe;\n                ll=zoom[sign[l]].l;\n                rr=zoom[sign[l]].r;\n                hehe=zoom[sign[l]].l-1;\n                sign[ll]=tot;\n                sign[rr]=tot;\n                l=hehe;\n            }\n            else\n            {\n                vis[l]=R;\n                sign[l]=tot;\n                if(l>0)\n                {\n                    check(rem[l-1],tot,rem[l-1]);\n                    cnt++;\n                }\n                else zoom[tot].hehe=true;\n                l--;\n            }\n        }\n        while(height[r]>=height[now]&&r<n)\n        {\n            if(vis[r]>R&&vis[r]<n)\n            {\n                cnt+=zoom[sign[r]].sum;\n                if(zoom[sign[r]].hehe)\n                    ans[R].total-=(zoom[sign[r]].sum-1)*zoom[sign[r]].sum/2;\n                else\n                    ans[R].total-=(zoom[sign[r]].sum+1)*zoom[sign[r]].sum/2;\n                //\u8fd9\u91cc\u9700\u8981\u52a0\u4e00\u4e2a\u7279\u5224\u2014\u2014\u56e0\u4e3aL\u5230R\u533a\u95f4\u7684rank1\u6216\u8005rank2\u53ef\u80fd\u8bb0\u5f55\u7684\u662f ram[L-1]!\n                //\u6ce8\u610f\uff0c\u5904\u7406\u6b63\u65f6\u5148\u5c0f\u540e\u5927\uff0c\u5904\u7406\u8d1f\u65f6\u5148\u5927\u540e\u5c0f \n                if(zoom[sign[r]].rank2!=rem[r-1]) \n                    check(zoom[sign[r]].rank2,tot,1);\n                if(zoom[sign[r]].rank1!=rem[r-1]) \n                    check(zoom[sign[r]].rank1,tot,1);\n                if(zoom[sign[r]].negrank1!=rem[r-1]) \n                    check(zoom[sign[r]].negrank1,tot,-1);\n                if(zoom[sign[r]].negrank2!=rem[r-1]) \n                    check(zoom[sign[r]].negrank2,tot,-1);\n                int ll,rr,hehe;\n                ll=zoom[sign[r]].l;\n                rr=zoom[sign[r]].r;\n                hehe=zoom[sign[r]].r+1;\n                sign[ll]=tot;\n                sign[rr]=tot;\n                r=hehe;\n            }\n            else\n            {\n                vis[r]=R;\n                sign[r]=tot;\n                check(rem[r],tot,rem[r]);\n                cnt++;r++;\n            }\n        }\n        zoom[tot].l=l+1;\n        zoom[tot].r=r-1;\n        if(zoom[tot].hehe)\n            zoom[tot].sum=cnt;\n        else\n            zoom[tot].sum=cnt-1;\n        ans[R].total+=cnt*(cnt-1)/2;\n        make(R);\n    } \n    for(int i=n-2;i>=0;i--)\n    {\n        ans[i].total+=ans[i+1].total;\n        if(ans[i+1].nice>ans[i].nice)ans[i].nice=ans[i+1].nice;\n    }\n        \n    for(int i=0;i<n;i++)\n    {\n        if(ans[i].total==0)ans[i].nice=0;\n        printf(\"%lld %lld\\n\",ans[i].total,ans[i].nice);\n    }\n    return 0;\n}\n```",
        "postTime": 1490582827,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u8fd9\u9898\u51fa\u9898\u4eba\u7ed9\u7684\u9898\u89e3\u662f\u7528\u540e\u7f00\u6570\u7ec4O(nlogn)\u89e3\u51b3\u7684\uff0c\u8fd8\u7528\u4e86\u5355\u8c03\u6808\u6216\u5e76\u67e5\u96c6\u3002\u4f46\u8fd9\u79cd\u590d\u6742\u5ea6\u8fd8\u6709\u53ef\u80fd\u88ab\u5361\u5e38\u6570\uff0c\u5b9e\u73b0\u4e0a\u4e5f\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u73b0\u5728\u6211\u4eec\u6765YY\u4e00\u79cdO(n)\u7684\u5e38\u6570\u66f4\u5c0f\u5b9e\u73b0\u66f4\u7b80\u5355\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u9898\u76ee\u4e2d\u7684r\u76f8\u4f3c\u5b9a\u4e49\u4e3a\u4ecep\u3001q\u4e24\u4e2a\u70b9\u5f00\u59cb\u6709\u957f\u5ea6\u4e0d\u5c11\u4e8er\u7684\u5b50\u4e32\u3002\u5982\u679c\u6211\u4eec\u80fd\u7edf\u8ba1\u51fa\u6240\u6709p\u3001q\u7684LCP\u957f\u5ea6\uff0c\u5e76\u4e14\u53ea\u66f4\u65b0\u957f\u5ea6\u6070\u597d\u4e3aLCP\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u540e\u7f00\u548c\u548c\u540e\u7f00\u6700\u5927\u503c\u83b7\u5f97\u9898\u76ee\u8981\u6c42\u7684\u7b54\u6848\u3002\n\n\u8003\u8651\u540e\u7f00\u6811\u3002\u5047\u8bbe\u6211\u4eec\u795e\u5947\u7684\u83b7\u5f97\u4e86\u4e00\u68f5\u540e\u7f00\u6811\uff0c\u5219\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u7edf\u8ba1\u4e24\u4e2a\u4fe1\u606f\uff1a1\u3001\u6709\u591a\u5c11\u5bf9\u53f6\u5b50\u7684LCA\u662f\u5b83\uff1b2\u3001\u5b83\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u53f6\u5b50\u4e2d\uff0c\u4e58\u79ef\u6700\u5927\u503c\u662f\u591a\u5c11\u3002\u7136\u540e\u7528\u8fd9\u4e24\u4e2a\u4fe1\u606f\u66f4\u65b0\u201c\u8be5\u8282\u70b9\u6df1\u5ea6\u201ddep\u76f8\u4f3c\u7684\u7b54\u6848\u3002\u6811\u5f62DP\u89e3\u51b3\u3002\u5b9e\u73b0\u4e0a\u8981\u6ce8\u610f\u5982\u679c\u4e32\u90fd\u662f\u76f8\u540c\u5b57\u7b26\uff0c\u53ef\u80fd\u4f1a\u7206\u6808\uff0c\u5e94\u91c7\u7528BFS\uff0c\u7531\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u3002\n\n\u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u4e00\u68f5\u540e\u7f00\u6811\u3002\u8003\u8651\u7528\u540e\u7f00\u81ea\u52a8\u673a\u6784\u9020\u540e\u7f00\u6811\u3002\u6211\u4eec\u5012\u7740\u63d2\u5165\u539f\u4e32\uff08\u5f00\u5934\u8981\u5148\u63d2\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\uff09\uff0c\u5e76\u6784\u5efaparent\u6811\u3002\u6211\u4eec\u53d1\u73b0\u7528\u4e8e\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\u7684len\u6570\u7ec4\u6070\u597d\u5c31\u662f\u5bf9\u5e94\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u8be5\u8282\u70b9\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\u7684\u6df1\u5ea6\u3002\u8fd9\u91cc\u4e5f\u6709\u9700\u8981\u6ce8\u610f\u7684\uff1a1\u3001\u7531\u4e8e\u6dfb\u52a0\u4e86\u7279\u6b8a\u5b57\u7b26\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u9700-1\uff1b2\u3001\u5b58\u5728\u4e00\u4e2a-1\u540e\u6df1\u5ea6\u4e3a0\u7684\u53f6\u5b50\u8282\u70b9\uff08\u8868\u793a\u7a7a\u540e\u7f00\uff09\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u9700\u8981\u6254\u6389\u3002\n\n\u81f3\u6b64\uff0c\u95ee\u9898\u5b8c\u7f8e\u89e3\u51b3\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u5c31\u7b97\u7528string\u4f30\u8ba1\u4e5f\u4e0d\u4f1a\u88ab\u5361\u4e86\u3002\n",
        "postTime": 1437721407,
        "uid": 8214,
        "name": "warrior_cat",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "[P2178 [NOI2015] \u54c1\u9152\u5927\u4f1a](https://www.luogu.com.cn/problem/P2178)\n\n\u9898\u610f\uff1a$\\forall i\\in [0,n)$ \u6c42\u6709\u591a\u5c11\u5bf9\u540e\u7f00\u6ee1\u8db3$len(lcp)\\ge i$\uff0c\u4ee5\u53ca\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u540e\u7f00\u7684\u6743\u503c\u4e58\u79ef\u7684\u6700\u5927\u503c\u3002\n\n\n$len(lcp)\\ge i$\u53ef\u4ee5\u8f6c\u5316\u4e3a$len(lcp)$\u6070\u597d\u4e3a$i$\uff0c\u7136\u540e\u5bf9\u4e2a\u6570\u6c42\u540e\u7f00\u548c\uff0c\u6743\u503c\u6c42\u540e\u7f00$\\max$\u3002\u56e0\u4e3a$lcp(sa[i],sa[j])=\\min_{k=i+1}^j(height[k])$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u4e2a\u540e\u7f00\u7684$lcp$\u53d6\u51b3\u4e8e\u4ed6\u4eec\u4e4b\u95f4\u7684$ht$\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a$ht_i$\uff0c\u627e\u5230\u5b83\u80fd\u7684\u8d21\u732e\u8303\u56f4$[l,r]$\uff0c\u4e5f\u5c31\u662f\u518d\u5f80\u5de6\u6216\u53f3\u7684$ht$\u4f1a\u6bd4$ht_i$\u5927\uff0c\u8fd9\u4e2a\u8d21\u732e\u8303\u56f4\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u6765\u6c42\u3002\n\n\u8ba1\u7b97\u6709\u591a\u5c11\u5bf9\u540e\u7f00$(x,y)(x<y)$\u6ee1\u8db3$len(lcp(suf_x,suf_y))=ht_i$\n\n\u56e0\u4e3a$height[i]=lcp(sa[i],sa[i-1])$\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a$ht$\u662f\u53cd\u6620\u4e24\u4e2a\u540e\u7f00\u7684$lcp$\u5e76\u4e14$ht_1$**\u65e0\u610f\u4e49**\uff0c\u6240\u4ee5$ht_i$\u63a7\u5236\u7684\u540e\u7f00\u8303\u56f4\u4e3a$[l-1,r]$\u3002\u56e0\u4e3a\u662f\u8981\u6ee1\u8db3\u4e24\u4e2a\u540e\u7f00\u7684\u6700\u5c0f\u503c\u4e3a$ht_i$\uff0c\u6240\u4ee5\u9009\u7684\u4e24\u4e2a\u540e\u7f00\u4e00\u5b9a\u8981\u8de8\u8fc7$ht_i$\uff0c\u6240\u4ee5$x\\in [l-1,x-1],y\\in[x,r]$\u4e3a\uff0c$ht_i$\u7684\u8d21\u732e\u4e3a$(x-l+1)\\times (r-x+1)$\u3002\n\n\u6c42\u6743\u503c\u4e58\u79ef\u7684\u6700\u5927\u503c\u53ef\u4ee5\u7528$ST$\u8868\u6765\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u548c\u533a\u95f4\u6700\u5c0f\u503c\uff08\u56e0\u4e3a\u6709\u8d1f\u6570\uff09\uff0c\u6ce8\u610f$f[i][0]=a[sa[i]]$\uff0c\u7b54\u6848\u4e3a$\\max(\\min_{i=l-1}^{x-1}a[i]\\times min_{i=x}^ra[i],\\max_{i=l-1}^{x-1}a[i]\\times max_{i=x}^ra[i])$\u3002\n\n\u56e0\u4e3a$ht_1$\u65e0\u610f\u4e49\uff0c\u6240\u4ee5\u4ece$ht_2$\u5f00\u59cb\uff0c$ht_2$\u7684\u5de6\u7aef\u70b9\u4e3a$1$\u3002\n\n\u5efa\u8bae\u8ba4\u771f\u601d\u8003\u533a\u95f4\u8fb9\u754c\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 300010\n#define ll long long\nusing namespace std;\ninline int read(){\n\tint w=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=0;\n\t\tch=getchar();\n\t}\n\twhile(ch<='9'&&ch>='0'){\n\t\tw=(w<<3)+(w<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn f?w:-w;\n}\nchar s[N];\nll res[N],sum[N],f[2][N<<1][25];\nint a[N],n,m,sa[N],rk[N],se[N],cnt[N],ht[N],logg[N],stac[N],top,p[N];\ninline void qsort(){\n\tfor(int i=0;i<=m;i++) cnt[i]=0;\n\tfor(int i=1;i<=n;i++) cnt[rk[i]]++;\n\tfor(int i=1;i<=m;i++) cnt[i]+=cnt[i-1];\n\tfor(int i=n;i>=1;i--) sa[cnt[rk[se[i]]]--]=se[i];\n}\ninline void get_sa(){\n\tm=122;\n\tfor(int i=1;i<=n;i++) rk[i]=s[i],se[i]=i;\n\tqsort();\n\tfor(int w=1;w<=n;w<<=1){\n\t\tint num=0;\n\t\tfor(int i=n-w+1;i<=n;i++) se[++num]=i;\n\t\tfor(int i=1;i<=n;i++) if(sa[i]>w) se[++num]=sa[i]-w;\n\t\tqsort();swap(rk,se);rk[sa[1]]=num=1;\n\t\tfor(int i=2;i<=n;i++) rk[sa[i]]=(se[sa[i]]==se[sa[i-1]]&&se[sa[i]+w]==se[sa[i-1]+w])?num:++num;\n\t\tif(num==n)break;m=num;\n\t}\n\tfor(int i=1,j=0;i<=n;i++){\n\t\tif(j)j--;\n\t\twhile(s[sa[rk[i]]+j]==s[sa[rk[i]-1]+j])j++;\n\t\tht[rk[i]]=j;\n\t}\n}\ninline ll askmi(int l,int r){\n\tint k=logg[r-l+1];\n\treturn min(f[0][l][k],f[0][r-(1<<k)+1][k]);\n}\ninline ll askma(int l,int r){\n\tint k=logg[r-l+1];\n\treturn max(f[1][l][k],f[1][r-(1<<k)+1][k]);\n}\nint main(){\n\tn=read();scanf(\"%s\",s+1);\n\tfor(int i=1;i<=n;i++) a[i]=read(),res[i]=-2e18;\n\t//\u6c42ht\u6570\u7ec4\n\tget_sa();\n\t//ST\u8868\n\tfor(int i=1;i<=n;i++) f[0][i][0]=f[1][i][0]=a[sa[i]];\n\tfor(int i=2;i<N;i++) logg[i]=logg[i>>1]+1;\n\tfor(int j=1;j<=logg[n];j++)\n\t\tfor(int i=1;i+(1<<(j-1))-1<=n;i++)\n\t\t\tf[0][i][j]=min(f[0][i][j-1],f[0][i+(1<<(j-1))][j-1]),\n\t\t\tf[1][i][j]=max(f[1][i][j-1],f[1][i+(1<<(j-1))][j-1]);\n\t//\u5355\u8c03\u6808\u6c42\u8d21\u732e\u533a\u95f4\n\tstac[top]=1;//\u6ce8\u610f\u4e0d\u8981\u7b97ht[1]\u7684\u8d21\u732e\n\tfor(int i=2;i<=n;i++){\n\t\twhile(top&&ht[stac[top]]>ht[i]){\n\t\t\tint x=stac[top],l=p[x],r=i-1;\n\t\t\tsum[ht[x]]+=1ll*(x-l+1)*(r-x+1);//\u4e2a\u6570\n\t\t\tif(l<=r) res[ht[x]]=max(res[ht[x]],max(askmi(l-1,x-1)*askmi(x,r),askma(l-1,x-1)*askma(x,r)));//\u6743\u503c\u6700\u5927\u503c\n\t\t\ttop--;\n\t\t}\n\t\tp[i]=stac[top]+1;//\u5de6\u7aef\u70b9\n\t\tstac[++top]=i;\n\t}\n\t//\u5c06\u6808\u4e2d\u5143\u7d20\u6e05\u7a7a\n\twhile(top){\n\t\tint x=stac[top],l=p[x],r=n;//\u540e\u9762\u6ca1\u6709\u6bd4\u5b83\u5c0f\u7684\uff0c\u53f3\u7aef\u70b9\u5c31\u53ea\u80fd\u4e3an\n\t\tsum[ht[x]]+=1ll*(x-l+1)*(r-x+1);\n\t\tif(l<=r) res[ht[x]]=max(res[ht[x]],max(askmi(l-1,x-1)*askmi(x,r),askma(l-1,x-1)*askma(x,r)));\n\t\ttop--;\n\t}\n\tfor(int i=n-1;i>=0;i--) sum[i]+=sum[i+1],res[i]=max(res[i],res[i+1]);//\u6c42\u4e2a\u540e\u7f00\u548c/max\n\tfor(int i=0;i<n;i++) printf(\"%lld %lld\\n\",sum[i],res[i]==-2e18?0:res[i]);\n\treturn 0;\n}\n```",
        "postTime": 1631102844,
        "uid": 56835,
        "name": "CJzjy",
        "ccfLevel": 0,
        "title": "P2178 [NOI2015] \u54c1\u9152\u5927\u4f1a"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2178)\n\n# \u9898\u89e3\n\n\u9996\u5148\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 $\\text{Len}(lcp)=i$ \u7684\u6709\u591a\u5c11\uff0c\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8be2\u95ee\u6c42\u540e\u7f00\u548c\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8be2\u95ee\u6c42\u540e\u7f00\u6700\u5927.\n\n\u5bf9\u4e8e $\\tt SAM$ \u6709\u4e2a\u6027\u8d28\uff1a\u5bf9\u4e8e $S$ \u4e2d\u7684\u4e24\u4e2a\u5b50\u4e32\uff0c\u627e\u5230\u5b83\u4eec\u6240\u5c5e\u7684\u70b9 $u,\\;v$\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684**\u6700\u957f\u516c\u5171\u540e\u7f00**\u5c31\u662f $\\text{longest}(LCA(u,v))$\uff0c\u5176\u4e2d $LCA(u,v)$ \u5b9a\u4e49\u5728 $\\text{parent tree}$ \u4e0a.\n\n\u8bc1\u660e\u7565\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u7684\u662f\u524d\u7f00\uff0c\u521a\u597d\u548c\u6027\u8d28\u76f8\u53cd\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u628a\u4e32\u5012\u7740\u5efa $\\tt SAM$\uff0c\u5bf9\u4e8e\u8fd9\u4e2a $\\tt SAM$ \u5f97\u5230\u7684 $\\text{parent tree}$ \u7684\u6bcf\u4e2a\u70b9\uff0c\u4ed6\u4eec\u7684\u5b50\u6811\u4e4b\u5185\u6240\u6709\u7684\u70b9\u76f8\u4e92\u5339\u914d\uff0c\u90fd\u53ef\u4ee5\u5f97\u5230\u521a\u521a\u597d $\\text{Len}(lcp)=i$ \u7684\u7ec4\u5408\uff0c\u5728\u6811\u4e0a\u505a $DP$\uff08\u5176\u5b9e\u4e0d\u80fd\u7b97 $DP$\uff09\u5c31\u53ef\u4ee5\u4e86.\n\n# \u4ee3\u7801\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\nnamespace Elaina{\n    # define rep(i,l,r) for(int i=l, i##_end_ = r; i <= i##_end_; ++ i)\n    # define fep(i,l,r) for(int i=l, i##_end_ = r; i >= i##_end_; -- i)\n    # define fi first\n    # define se second\n    # define Endl putchar('\\n')\n    # define writc(x, c) fwrit(x), putchar(c)\n    // # define int long long\n    typedef long long ll;\n    typedef pair<int, int> pii;\n    typedef unsigned long long ull;\n    typedef unsigned int uint;\n    template<class T>inline T Max(const T x, const T y){return x < y ? y : x;}\n    template<class T>inline T Min(const T x, const T y){return x < y ? x : y;}\n    template<class T>inline T fab(const T x){return x < 0 ? -x : x;}\n    template<class T>inline void getMax(T& x, const T y){x = Max(x, y);}\n    template<class T>inline void getMin(T& x, const T y){x = Min(x, y);}\n    template<class T>T gcd(const T x, const T y){return y ? gcd(y, x % y) : x;}\n    template<class T>inline T readin(T x){\n        x=0; int f = 0; char c;\n        while((c = getchar()) < '0' || '9' < c) if(c == '-') f = 1;\n        for(x = (c ^ 48); '0' <= (c = getchar()) && c <= '9'; x = (x << 1) + (x << 3) + (c ^ 48));\n        return f ? -x : x;\n    }\n    template<class T>void fwrit(const T x){\n        if(x < 0)return putchar('-'), fwrit(-x);\n        if(x > 9)fwrit(x / 10); putchar(x % 10 ^ 48);\n    }\n}\nusing namespace Elaina;\n\nconst int maxn = 3e5;\nconst ll inf = (1ll << 60);\n\nint tre[maxn * 2 + 5][26];\nint fa[maxn * 2 + 5];\nint len[maxn * 2 + 5];\nint sz[maxn * 2 + 5];\nll mx[maxn * 2 + 5], mn[maxn * 2 + 5];\nint lst = 1, cnt = 1;\ninline void add(const int c, const int w){\n    int p = lst;\n    int u = lst = ++ cnt;\n    len[u] = len[p] + 1, sz[u] = 1;\n    mx[u] = mn[u] = w;\n    for(; p && !tre[p][c]; p = fa[p]) tre[p][c] = u;\n    if(!p) fa[u] = 1;\n    else{\n        int q = tre[p][c];\n        if(len[q] == len[p] + 1) fa[u] = q;\n        else{\n            int nq = ++ cnt;\n            mx[nq] = -inf, mn[nq] = inf;\n            rep(i, 0, 25) tre[nq][i] = tre[q][i];\n            fa[nq] = fa[q], len[nq] = len[p] + 1;\n            fa[q] = fa[u] = nq;\n            for(; p && tre[p][c] == q; p = fa[p])\n                tre[p][c] = nq;\n        }\n    }\n}\n\nstruct edge{int to,nxt;\n    edge(const int T = 0, const int N = 0) : to(T), nxt(N){}\n}e[maxn * 2 + 5];\nint tail[maxn * 2 + 5], ecnt;\ninline void add_edge(const int u, const int v){\n    // printf(\"u == %d, v == %d\\n\", u, v);\n    e[++ ecnt] = edge(v, tail[u]); tail[u] = ecnt;\n}\n\nchar s[maxn + 5];\nint a[maxn + 5], n;\n\ninline void init(){\n    n = readin(1); scanf(\"%s\", s + 1);\n    rep(i, 1, n) a[i] = readin(1);\n}\n\n// the first query, the count of appearance\nll ans1[maxn + 5];\n// the second query, the maximum value to match\nll ans2[maxn + 5];\n\ninline int check(const int u){\n    return mx[u] != -inf && mn[u] != inf;\n}\n\nvoid dfs(const int u){\n    if(!mx[u]) mx[u] = -inf, mn[u] = inf;\n    for(int i = tail[u], v; i; i = e[i].nxt){\n        dfs(v = e[i].to);\n        ans1[len[u]] += 1ll * sz[u] * sz[v];\n        sz[u] += sz[v];\n        if(check(u))\n            ans2[len[u]] = Max(ans2[len[u]], Max(1ll * mx[u] * mx[v], 1ll * mn[u] * mn[v]));\n        mx[u] = Max(mx[u], mx[v]), mn[u] = Min(mn[u], mn[v]);\n    }\n}\n\nsigned main(){\n    init();\n    fep(i, n, 1) add(s[i] - 'a', a[i]);\n    rep(i, 2, cnt) add_edge(fa[i], i);\n    rep(i, 0, n + 1) ans2[i] = -inf;\n    dfs(1);\n    fep(i, n - 1, 0) ans2[i] = Max(ans2[i], ans2[i + 1]), ans1[i] += ans1[i + 1];\n    rep(i, 0, n - 1) printf(\"%lld %lld\\n\", ans1[i], ans1[i] == 0 ? 0 : ans2[i]);\n    return 0;\n}\n```\n\n# \u672c\u9898\u5173\u952e\n\n$\\tt SAM$ \u7684\u6027\u8d28\uff0c\u5bf9\u4e8e $S$ \u4e2d\u7684\u4e24\u4e2a\u5b50\u4e32\uff0c\u627e\u5230\u5b83\u4eec\u6240\u5c5e\u7684\u70b9 $u,\\;v$\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684**\u6700\u957f\u516c\u5171\u540e\u7f00**\u5c31\u662f $\\text{longest}(LCA(u,v))$\uff0c\u5176\u4e2d $LCA(u,v)$ \u5b9a\u4e49\u5728 $\\text{parent tree}$ \u4e0a.",
        "postTime": 1610526402,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015] \u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u4e24\u4e2a\u4ee5 $i,j$ \u5f00\u5934\u7684\u540e\u7f00\uff0c\u663e\u7136\u4ed6\u4f1a\u5bf9 $0\\sim LCP(i,j)$ \u7684\u76f8\u4f3c\u5ea6\u7684\u7b54\u6848\u6709\u8d21\u732e\n\n\u6240\u4ee5\u8003\u8651\u5148\u7528 SA \u6c42\u51fa $height$ \u6570\u7ec4\n\n\u56e0\u4e3a $LCP(i,j)=\\min\\{height_k\\},k\\in(i,j]$\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $height_i$\uff0c\u6211\u4eec\u627e\u5230\u5de6\u53f3\u7b2c\u4e00\u4e2a $height$ \u4e0d\u5c0f\u4e8e\u4ed6\u7684\u4f4d\u7f6e\uff0c\u8bbe\u4e3a $l,r$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $p\\in(l,i),q\\in[i,r),LCP(p,q)=height_i$\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u5f97\u5230\u8fd9\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5229\u7528\u7ec4\u5408\u6570\u5b66\u548cST\u8868\u5c31\u53ef\u4ee5\u6c42\u51fa $LCP$ \u7684\u4f4d\u7f6e\u4e0a\u7684\u7b54\u6848\u4e86\uff0c\u7136\u540e\u505a\u4e00\u4e0b\u540e\u7f00\u548c/\u540e\u7f00max\n\n\u6ce8\u610f\u8fd9\u91cc\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4ed6\u5de6\u8fb9/\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u4ed6\u7684\u4f4d\u7f6e\u521a\u597d\u7b49\u4e8e\u4ed6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u4f1a\u51fa\u73b0\u95ee\u9898\uff08\u5982\u6837\u4f8b1\uff09\n\n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u627e\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u4ed6\u7684\uff0c\u548c\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u7684\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u7684\u8ba1\u7b97\u4e86\n\n```cpp\n# include <bits/stdc++.h>\n\nusing namespace std;\n\n# define Rep(i,a,b) for(register int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(register int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=3e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m;\nchar s[N];\nint a[N];\nll ans1[N];\nll ans2[N];\nint stk[N],top;\nint sa[N],rk[N],dy[N],sum[N];\nint L[N],R[N];\nint height[N];\nint mx[N][20],mi[N][20],lg[N];\n\nvoid RadixSort(){\n\tRep(i,1,m)sum[i]=0;\n\tRep(i,1,n)sum[rk[i]]++;\n\tRep(i,1,m)sum[i]+=sum[i-1];\n\t_Rep(i,n,1)sa[sum[rk[dy[i]]]--]=dy[i];\n}\n\nvoid SA(){\n\tm='z';\n\tRep(i,1,n)rk[i]=s[i],dy[i]=i;\n\tRadixSort();\n\tfor(int k=1,t=0;t<n;k<<=1,m=t){\n\t\tt=0;\n\t\t_Rep(i,n,n-k+1)dy[++t]=i;\n\t\tRep(i,1,n)if(sa[i]>k)dy[++t]=sa[i]-k;\n\t\tRadixSort();\n\t\tswap(rk,dy);\n\t\trk[sa[1]]=t=1;\n\t\tRep(i,2,n)\n\t\t\trk[sa[i]]=dy[sa[i]]==dy[sa[i-1]]&&(sa[i]+k<=n&&sa[i-1]+k<=n&&dy[sa[i]+k]==dy[sa[i-1]+k])?t:++t; \n\t}\n\tRep(i,1,n)rk[sa[i]]=i;\n\tint k=0;\n\tRep(i,1,n){\n\t\tif(rk[i]==1)continue;\n\t\tif(k)k--;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(i+k<=n&&j+k<=n&&s[i+k]==s[j+k])k++;\n\t\theight[rk[i]]=k;\t\n\t}\n}\n\nvoid init(){\n\tmemset(mx,-0x3f,sizeof(mx));\n\tmemset(mi,0x3f,sizeof(mi));\n\tlg[1]=0;\n\tRep(i,2,n)lg[i]=lg[i>>1]+1;\n\t_Rep(i,n,1){\n\t\tmx[i][0]=mi[i][0]=a[sa[i]];\n\t\tRep(j,1,19){\n\t\t\tif(i+(1<<j-1)>n)break;\n\t\t\tmx[i][j]=max(mx[i][j-1],mx[i+(1<<j-1)][j-1]);\n\t\t\tmi[i][j]=min(mi[i][j-1],mi[i+(1<<j-1)][j-1]);\t\n\t\t}\n\t}\t\n}\n\nint getmax(int i,int j){\n\tint k=lg[j-i+1];\n\treturn max(mx[i][k],mx[j-(1<<k)+1][k]);\t\n}\n\nint getmin(int i,int j){\n\tint k=lg[j-i+1];\n\treturn min(mi[i][k],mi[j-(1<<k)+1][k]);\t\n}\n\nint main()\n{\n\tmemset(ans2,-0x3f,sizeof(ans2));\n\tread(n);\n\tscanf(\"%s\",s+1);\n\tRep(i,1,n)read(a[i]);\n\tSA();\n\tRep(i,2,n){\n\t\twhile(top&&height[stk[top]]>=height[i])top--;\n\t\tL[i]=top?stk[top]:1;\n\t\tstk[++top]=i;\t\n\t}\n\ttop=0;\n\t_Rep(i,n,2){\n\t\twhile(top&&height[stk[top]]>height[i])top--;\n\t\tR[i]=top?stk[top]:n+1;\n\t\tstk[++top]=i;\t\n\t}\n\tRep(i,2,n)ans1[height[i]]+=1ll*(i-L[i])*(R[i]-i);\n\t_Rep(i,n,0)ans1[i]+=ans1[i+1]; \n\tinit();\n\tRep(i,2,n)\n\t\tans2[height[i]]=max(ans2[height[i]],max(1ll*getmax(L[i],i-1)*getmax(i,R[i]-1),1ll*getmin(L[i],i-1)*getmin(i,R[i]-1)));\n\t_Rep(i,n,0)ans2[i]=max(ans2[i],ans2[i+1]);\n\tRep(i,0,n-1)printf(\"%lld %lld\\n\",ans1[i],ans1[i]?ans2[i]:ans1[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1607673101,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "### \u540e\u7f00\u6570\u7ec4X\u540e\u7f00\u6811\n\n(\u540e\u7f00\u7684\u8868\u793a\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32S\uff0c\u6570\u5b57i\u8868\u793a\u4ecei\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u7f00)\n\u65e0\u8bba\u662f\u540e\u7f00\u6570\u7ec4\u8fd8\u662f\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u90fd\u662f\u540d\u4e3a\"\u540e\u7f00\u6811\"\u7684\u6570\u636e\u7ed3\u6784\u7684\u4e00\u79cd\u538b\u7f29\n\n\u4ec0\u4e48\u662f\u540e\u7f00\u6811\u5462\uff0c\u6211\u4eec\u628a\u5b57\u7b26\u4e32S\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\u63d2\u5165\u5230trie\u6811\u91cc\uff0c\u90a3\u4e48\u540e\u7f00\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7740S\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u540e\u7f00\u6811\u7684\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u5bf9\u5e94\u7740\u539f\u4e32\u7684\u4e00\u4e2a\u540e\u7f00\uff0c\u4e24\u4e2a\u540e\u7f00\u7684lcp\u957f\u5ea6\u5c31\u662f\u4e24\u4e2a\u540e\u7f00\u5bf9\u5e94\u8282\u70b9\u5728\u540e\u7f00\u6811\u4e0a\u7684lca\u6df1\u5ea6\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5c3d\u7ba1\u540e\u7f00\u53ef\u4ee5\u65b9\u4fbf\u7684\u5904\u7406\u5404\u4e2a\u540e\u7f00\u95f4\u7684\u5173\u7cfb\uff0c\u5224\u5b50\u4e32\u627elcp\u4ec0\u4e48\u7684\u4e5f\u975e\u5e38\u597d\u4f7f\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u540e\u7f00\u6811\u7684\u8282\u70b9\u4e2a\u6570\u662fO(n^2)\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u540e\u7f00\u6811\u8fdb\u884c\"\u538b\u7f29\"\uff0c\u540e\u7f00\u6570\u7ec4\u5c31\u662f\u538b\u7f29\u6280\u672f\u4e2d\u7684\u4e00\u79cd\n\n### \u540e\u7f00\u6570\u7ec4\u539f\u7406\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u77e5\u9053\u6240\u6709\u5b50\u4e32\u7684\u4fe1\u606f\u6709\u70b9\u8d2a\u4e86\u2026\u2026\u5927\u90e8\u5206\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5b50\u4e32\u7406\u89e3\u4e3a\u67d0\u4e2a\u540e\u7f00\u7684\u524d\u7f00\u5373\u53ef\uff0c\u56e0\u6b64\u975e\u5e38\u6709\u7528\u7684\u662f\u5173\u4e8e\u540e\u7f00\u7684\u4fe1\u606f\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u540e\u7f00\u53ea\u6709O(N)\u4e2a\uff0c\u800c\u4e14\uff0c\u540e\u7f00\u6811\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5982\u679c\u540e\u7f00a\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u540e\u7f00b\u7684\u5b57\u5178\u5e8f\uff0c\u90a3\u4e48a\u7684\u540e\u7f00\u6811\u4e0a\u5bf9\u5e94\u8282\u70b9\u7684dfs\u5e8f\u4e5f\u662f\u5c0f\u4e8eb\u7684dfs\u5e8f\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5982\u679c\u53ef\u4ee5\u5c06\u540e\u7f00\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u90e8\u5206\u8fd8\u539f\u540e\u7f00\u6811\u7684\u4fe1\u606f\uff0c\u800c\u6709\u4e9b\u65f6\u5019\u8fd9\u4e9b\u4fe1\u606f\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\uff0c\u5176\u5b9e\u6709\u70b9\u50cf\u865a\u6811\uff0c\u4e0d\u5efa\u6811\u5374\u53ef\u4ee5\u5b9e\u65bd\u67d0\u4e9b\u6811\u4e0a\u64cd\u4f5c\n\n\u90a3\u4e48\u5f00\u59cb\u8bb2\u5982\u4f55\u5c06\u540e\u7f00\u6392\u5e8f\u5427\uff0c\u9996\u5148\u8bf4\u660eO(N)\u7684DC3\u6211\u662f\u4e0d\u4f1a\u7684\uff0c\u6211\u53ea\u4f1aO(NlogN)\u7684\u500d\u589e\u505a\u6cd5\uff0c\u8fd9\u9053\u98983\\*10^5\u7684\u53ea\u80fd\u8bf4\u662f\u52c9\u5f3a\u5361\u8fc7\u53bb\uff0c\u6240\u4ee5\u8bf7\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u6ce8\u610f\u5e38\u6570\\~\n\n#### \u57fa\u6570\u6392\u5e8fX\u6876\u6392\u5e8f/\u8ba1\u6570\u6392\u5e8f\n\n _\uff08\u5982\u679c\u4f60\u8ba4\u771f\u8bfb\u8fc7\u7b97\u5bfc\u7684\u6392\u5e8f\u7b97\u6cd5\u90e8\u5206\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u4e86\u89e3\u7684\u8bdd\uff0c\u8fd8\u662f\u6765\u770b\u770b\u5427\u2026\u2026\uff09_ \n\n\u500d\u589e\u5b9e\u73b0\u6cd5\u8981\u6c42\u4e00\u4e2a**\u590d\u6742\u5ea6\u4e3aO(N)\u7684\u7a33\u5b9a\u6392\u5e8f**\uff0c\u90a3\u4e48\u4ec0\u4e48sort\u4e4b\u7c7b\u7684\u5c31\u4e0d\u7528\u60f3\u4e86\u2026\u2026\uff0c\u53ef\u4ee5\u505a\u5230\u8fd9\u4e2a\u53ea\u6709\u57fa\u6570\u6392\u5e8f\u548c\u6876\u6392\u5e8f\u4ee5\u53ca\u8ba1\u6570\u6392\u5e8f\uff0c\u800c\u57fa\u6570\u6392\u5e8f\u53c8\u9700\u8981\u4e00\u4e2a**\u590d\u6742\u5ea6\u4e3aO(N)\u7684\u7a33\u5b9a\u6392\u5e8f**\uff0c\u90a3\u4e48\u5c31\u53ea\u5269\u4e0b\u6876\u6392\u548c\u8ba1\u6392\u4e86\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u7528\u54ea\u79cd\u90fd\u53ef\u4ee5\u2026\u2026\uff0c\u4f46\u662f\u63a8\u8350\u4f7f\u7528\u8ba1\u6392\uff0c\u56e0\u4e3a\u6876\u6392\u5e38\u6570\u5927\u2026\u2026\uff0c\u8fd9\u9053\u9898\u4f60\u5361\u4e0d\u8fc7\u53bb30w\u7684\u70b9\u7684\n\n\u5148\u4ecb\u7ecd\u5565\u53eb**\u8ba1\u6570\u6392\u5e8f**\uff0c\u8ba1\u6570\u6392\u5e8f\u57fa\u4e8e\u8fd9\u4e00\u70b9\uff0c\u8981\u6392\u7684\u6570\uff0c\u503c\u57df\u4e0d\u4f1a\u592a\u5927\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5143\u7d20\u7684\u503c\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u503c\u7684\u6392\u540d,\u7136\u540e\u6211\u4eec\u7684\u601d\u8def\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u503c\uff0c\u5148\u8ba1\u7b97\u4e00\u6ce2\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u5c31\u662f\u8fd9\u4e2a\u503c\uff0c\u8bb0sum\\[i]\u8868\u793a\u503c\u4e3ai\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9sum\\[]\u505a\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5b9e\u9645\u4e0a\u662f\u8ba1\u7b97\u51fa\u6765\u6bcf\u4e2a\u503c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5728\u6392\u5e8f\u540e\u6570\u7ec4\u91cc\u7684\u4e0b\u6807(\u6ce8\u610f\u4e00\u4ef6\u4e8b\uff0c\u5f53\u6211\u4eec\u8bf4\u6392\u540d\uff0c\u610f\u5473\u7740\u76f8\u540c\u503c\u7684\u5143\u7d20\u6392\u540d\u76f8\u540c\uff0c\u4f46\u662f\u6211\u4eec\u8bf4\u6570\u7ec4\u4e0b\u6807\u7684\u65f6\u5019\uff0c\u8fd9\u610f\u5473\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u90fd\u662f\u4e0d\u540c\u7684)\n\n\u4e3a\u4e86\u8d77\u5230\u7a33\u5b9a\u7684\u6548\u679c\uff0c\u6211\u4eec\u4ece\u540e\u5f80\u524d\u626b\u4e00\u904d\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c\u5c06\u5176\u653e\u5728\u5b83\u7684**\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\u4e0a**\uff0c\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u590d\u5236\u4e0b\u539f\u6570\u7ec4\uff0c\u4ee5\u514d\u6d17\u6389\u4e0d\u8be5\u6d17\u7684\u4e1c\u897f\uff0c\u5728\u6b64\u671f\u95f4\uff0csum\\[i]\u59cb\u7ec8\u8868\u793a\u503c\u4e3ai\u7684\u5143\u7d20\u5728\u6392\u597d\u5e8f\u540e\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5f53\u6211\u4eec\u78b0\u5230\u4e86\u7b2c\u4e00\u4e2a\u503c\u4e3ai\u7684\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u56e0\u4e3a\u5012\u7740\u626b\u7684\u7f18\u6545\uff0c\u5b83\u5176\u5b9e\u662f\u539f\u6570\u7ec4\u4e2d\u6700\u9760\u540e\u7684\u5143\u7d20\uff0c\u5b83\u5c31\u5e94\u8be5\u5f85\u5728sum\\[i]\u4e0a\uff0c\u4f46\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u503c\u4e3ai\u7684\u5143\u7d20\u5c31\u4e0d\u80fd\u5f85\u5728sum\\[i]\u4e0a\u4e86\n\u4e3a\u6b64\u6211\u4eec\u8ba9sum\\[i]--\u5c31\u53ef\u4ee5\u4e86\uff0c\u5c31\u662f\u628a\u4e0b\u4e00\u4e2a\u5143\u7d20\u653e\u5728\u8fd9\u4e2a\u5143\u7d20\u5de6\u8fb9\u7684\u4f4d\u7f6e\u4e0a\u3002\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0O(N+K)(K\u4e3a\u503c\u57df)\u7684\u6392\u5e8f\u4e86\n\n\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f**\u6876\u6392\u5e8f**\uff0c\u6309\u7406\u6765\u8bb2\u5e94\u8be5\u662f\u9664\u6cd5\u6563\u5217\u7684\u2026\u2026\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u5047\u8bbe\u503c\u57df\u4e0d\u662f\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6563\u5217\u51fd\u6570H(x)=x,(\u770b\uff01\u7edd\u5bf9\u6ca1\u51b2\u7a81\u7684hash\uff01)\n\n\u5177\u4f53\u601d\u8def\u5982\u4e0b\uff0c\u6b63\u5411\u626b\u4e00\u904d\uff0c\u6211\u4eec\u5f00\u4e0aK\u4e2a\u961f\u5217(K\u4e3a\u503c\u57df),\u7136\u540e\u6211\u4eec\u628a\u6bcf\u4e2a\u503c\u4e3ai\u7684\u5143\u7d20push\u8fdb\u7b2ci\u4e2a\u961f\u5217\u91cc\uff0c\u6700\u540e\u4ece\u5927\u5230\u5c0f\u7684\u626b\u4e00\u904d\u961f\u5217\u6570\u7ec4\uff0c\u6bcf\u6b21\u78b0\u5230\u4e00\u4e2a\u961f\u5217\uff0c\u628a\u5b83pop\u7a7a\uff0c\u5012\u8fdb\u5f85\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u7531\u4e8e\u961f\u5217\u5148\u8fdb\u5148\u51fa\uff0c\u76f8\u5f53\u4e8e\u9690\u6027\u7684\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u8d77\u5230\u4e86\u7a33\u5b9a\u7684\u76ee\u7684\n\n\u4e0b\u9762\u662f**\u57fa\u6570\u6392\u5e8f**\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e9bD\u4f4d\u6570\uff0c\u76f8\u5f53\u4e8e\u6700\u9ad8\u4f4d\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u6b21\u9ad8\u4f4d\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u4e00\u76f4\u5230\u7b2cD\u5173\u952e\u5b57\uff0c\u4e8e\u662f\u6211\u4eec\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u6bcf\u6b21\u4ee5**\u5f53\u524d\u4f4d\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u7a33\u5b9a\u6392\u5e8f**\u7531\u4e8e\u662f\u7a33\u5b9a\u6392\u5e8f\uff0c\u56e0\u6b64\u7b2cK\u8f6e\u5176\u5b9e\u662f\u4ee5\u7b2cK\u4f4d\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cK-1\u4f4d\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u8fed\u4ee3\u8d77\u6765\uff0c\u5c31\u662f\u4f4d\u6570\u8d8a\u9ad8\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u5c31\u5b9e\u73b0\u4e86\u6392\u597d\u8fd9\u4e9bN\u4f4d\u6570\u7684\u76ee\u7684\u3002\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3aO(N)\u7684\u7a33\u5b9a\u6392\u5e8f(\u8ba1\u6392/\u6876\u6392)\u4f5c\u4e3a\u57fa\u6392\u7684\u5e95\u5c42\u6392\u5e8f\uff0c\u5c31\u80fd\u505a\u5230O(D\\*N)\u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\uff0c\u8fd8\u662f\u7a33\u5b9a\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4f4d\u6392\u5e8f\u4ee5\u7b2c\u4e00\u4f4d\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4f4d\u7f6e\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n#### \u500d\u589e\u6cd5\n\u500d\u589e\u6cd5\u7684\u601d\u8def\uff0c\u65e2\u7136\u8981\u6392\u540e\u7f00\uff0c\u6211\u4eec\u89c2\u5bdf\u540e\u7f00\u7684\u6bd4\u8f83\u89c4\u5219\uff0c\u4ece\u524d\u5411\u540e\u6bd4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u6bd4\u7b2c1\u4f4d\uff0c\u518d\u6bd4\u7b2c2\u4f4d\u2026\u2026\u4e14\u6162\uff0c\u96be\u9053\u6211\u4eec\u771f\u7684\u8981\u6bd4N\u6b21\uff1f\u6211\u4eec\u53d1\u73b0\u6bd4\u5b8c\u7b2c2\u4e3a\u4e4b\u540e\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a\u957f\u5ea6\u4e3a2\u7684\u5b50\u4e32\u7684\u6392\u540d\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5b50\u4e32\u62fc\u63a5\u8d77\u6765\uff0c\u5148\u6bd4\u524d\u4e00\u534a\u518d\u6bd4\u540e\u4e00\u534a\uff0c\u4ece\u800c\u5f97\u51fa\u957f\u5ea6\u4e3a4\u7684\u5b50\u4e32\u7684\u6392\u540d\uff0c\u5f97\u51fa\u957f\u5ea6\u4e3a4\u7684\u6392\u540d\u4e4b\u540e\uff0c\u518d\u53bb\u6392\u957f\u5ea6\u4e3a8\u7684\uff0c\u5982\u6b64\uff0c\u76f4\u5230\u957f\u5ea6\u8d85\u8fc7N\u5b50\u4e32\u5c31\u6210\u4e86\u540e\u7f00\n\n\u90a3\u4e48\u6bcf\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b50\u4e32\u7684\u524d\u4e00\u534a\u6392\u540d\u53d8\u6210\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u540e\u4e00\u534a\u6392\u540d\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u4e22\u8fdb\u53bb\u505a\u57fa\u6570\u6392\u5e8f\uff0c\u5904\u7406\u51fa\u6392\u540d\uff0c\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8fd9\u5c31\u662f\u500d\u589e\u6cd5\u4e86\u3002\n\n#### \u5982\u4f55\u8ba1\u7b97lcp\n\u6211\u4eec\u554a\uff0c\u4f1a\u53d1\u73b0\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u6027\u8d28\uff0c\u8bbe\u6392\u597d\u5e8f\u4e4b\u540e\u7684\u540e\u7f00\u6784\u6210\u7684\u6570\u7ec4\u4e3asa\\[]\n\u5982\u679c\u6211\u4eec\u4ee4ht\\[i]=lcp(sa\\[i],sa\\[i-1]);\u4ee4rk\\[sa\\[i]]=i\n\u90a3\u4e48\u6709ht\\[rk\\[i]]>=ht\\[rk\\[i-1]]-1\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u66b4\u529b\u6c42ht\u4e86\n\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6c42\u51fa\u540e\u7f00\u6811\u4e0adfs\u5e8f\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9lca\u6df1\u5ea6\n\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u548c\u865a\u6811\u5e72\u7684\u4e8b\u6ca1\u5dee\u522b\uff0c\u6c42dfs\u5e8f\uff0c\u76f8\u90bbdfs\u5e8f\u641elca\n\u5bf9\u4e8e\u4e24\u4e2a\u540e\u7f00p,q,lcp(p,q)=rmq(sa\\[p],sa\\[q])(\u533a\u95f4min)\uff0c\u6240\u4ee5\u8981\u6c42\u4efb\u610f\u7684\u8bddst\u8868\u9884\u5904\u7406\u5c31\u884c\uff0c\u67e5\u8be2O(1)\n\n### \u672c\u9898\u89e3\u6cd5\n\u5bf9\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6c42\u4e00\u53d1\u540e\u7f00\u6570\u7ec4\uff0c(\u5e95\u5c42\u6392\u5e8f\u7528\u8ba1\u6392\uff01\uff01\uff01\u6876\u6392\u5e38\u6570\u5927\u4f1aT\u98de)\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff0c\u5176\u4e2d\u7684\u540e\u7f00\u4e24\u4e24R\u76f8\u4f3c\u8be5\u591a\u597d\uff0c\u7b54\u6848\u77ac\u95f4\u51fa\u6765\u4e86\uff0cC(siz,2)\uff0c\u4ee5\u53camax(\u6700\u5927\\*\u6b21\u5927\uff0c\u6700\u5c0f\\*\u6b21\u5c0f)\n\u800c\u4e14\u6211\u4eec\u8fd8\u53d1\u73b0\u4e00\u4e2a\u7f8e\u5999\u7684\u6027\u8d28\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u540e\u7f00\uff0c\u548c\u5176\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20r\u76f8\u4f3c\uff0c\u90a3\u4e48\u548c\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20r\u76f8\u4f3c\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e2a\u6027\u8d28\u597d\u50cf\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4~\n\n\u90a3\u4e48\u6c42\u51fa\u6765\u7684\u540e\u7f00\u6570\u7ec4\u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u4e32\u7684\u6700\u5927\u76f8\u4f3c\u7a0b\u5ea6\uff0c(lcp(sa\\[i],sa\\[i-1])=ht\\[i])\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4r\u76f8\u4f3c\u4fe1\u606f\uff0c\u5177\u4f53\u6765\u8bb2\uff0c\u628ah\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u5e76\u67e5\u96c6\u5e76\u8d77\u6765r\u76f8\u4f3c\u7684\u4e24\u4e2a\u4e32\uff0c\u5728\u5207\u6362r\u7684\u65f6\u5019\uff0c\u66f4\u65b0\u4e00\u53d1\u7b54\u6848\u5373\u53ef\u3002\n\n# \u8bb0\u5f97\u5f00 long long\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nchar mde[300010];long long val[300010];\nint sa[300010];int ra[600010];\nint x[300010];int y[300010];int ht[300010];\nint n;long long up;\nint sum[300010];int tr[300010];\ninline void rixs()//\u57fa\u6392~,\u8fd9\u91cc\u8ba4\u4e3a\u662f\u4e24\u4f4d\u6570,\u6bcf\u4e00\u4f4d\u53d6\u503c\u8303\u56f40-n\n{\n    for(int i=1;i<=n;i++){sum[i]=0;}//\u6e05\u7a7asum\n    for(int i=1;i<=n;i++){sum[y[i]]++;}\n    for(int i=1;i<=n;i++){sum[i]+=sum[i-1];}//\u8ba1\u6392\u7b2c\u4e00\u4f4d\n    for(int i=n;i>=1;i--){sa[sum[y[i]]--]=i;}//\u8ba1\u6392\u653e\u4e0b\u53bb\n    for(int i=1;i<=n;i++){sum[i]=0;}//\u6e05sum\n    for(int i=1;i<=n;i++){sum[x[sa[i]]]++;}//\u8ba1\u6392\u7b2c\u4e8c\u4f4d\n    for(int i=1;i<=n;i++){sum[i]+=sum[i-1];}\n    for(int i=1;i<=n;i++){tr[i]=sa[i];}//\u8fd9\u91cc\u8981\u590d\u5236\u5b58\u5728sa\u91cc\u7684\u4f4d\u7f6e\u4fe1\u606f\n    for(int i=n;i>=1;i--){sa[sum[x[tr[i]]]--]=tr[i];}//\u8ba1\u6392\u7b2c\u4e8c\u4f4d\u653e\u4e0b\u53bb\n    ra[sa[1]]=1;for(int i=2;i<=n;i++)//\u8ba1\u7b97rk,\u8fd9\u91cc\u53ef\u4ee5\u5199\u4e2acmp\u518d\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f,\u6211\u61d2\u5f97\u5199\u4e86\n    {if(x[sa[i]]==x[sa[i-1]]&&y[sa[i]]==y[sa[i-1]])ra[sa[i]]=ra[sa[i-1]];else ra[sa[i]]=i;}\n}\ninline void create_sa()\n{\n    for(int i=1;i<=n;i++){sum[mde[i]-'a'+1]++;}//\u9996\u5148\u5148\u5f3a\u5236\u8f6c\u6570\u5b57\n    for(int i=1;i<=26;i++){sum[i]+=sum[i-1];}//\u8fd8\u662f\u8ba1\u6392\n    for(int i=n;i>=1;i--){sa[sum[mde[i]-'a'+1]--]=i;}\n    ra[sa[1]]=1;for(int i=1;i<=n;i++)//\u4e00\u6837\u7684\u7b97\u6392\u540d\n    {if(mde[sa[i]]==mde[sa[i-1]])ra[sa[i]]=ra[sa[i-1]];else ra[sa[i]]=i;}\n    for(int k=1;k<=n;k<<=1)//\u500d\u589e\u73b0\u5728\u8981\u6392\u7684\u5b50\u4e32\u957f\u5ea6\n    {\n        for(int i=1;i<=n;i++)x[i]=ra[i];//\u524d\u4e00\u534a\u7b2c\u4e00\u5173\u952e\u5b57\n        for(int i=1;i<=n;i++)y[i]=ra[i+k];//\u540e\u4e00\u534a\u7b2c\u4e8c\u5173\u952e\u5b57\n        rixs();//\u57fa\u6392\n    }return;\n}\ninline void calch()\n{\n    int j=0;int k=0;\n    for(int i=1;i<=n;ht[ra[i++]]=k)//\u7ef4\u62a4\u5f00\u59cb\u5339\u914d\u7684\u4f4d\u7f6e,\u66b4\u529b\u5339\u914d\u5373\u53ef\n        for(k=k?k-1:k,j=sa[ra[i]-1];mde[i+k]==mde[j+k];k++);\n}\nstruct bcj//\u8981\u5f00longlong,\u6309\u5740\u5408\u5e76\u8def\u5f84\u538b\u7f29\u8fd8\u662f\u90fd\u7528\u4e0a\u5427,\u6bd5\u7adf\u5355\u7528\u90fd\u662flog\u7684\n{\n    int fa[300010];int size[300010];\n    long long ma[300010];long long nxtma[300010];\n    long long mi[300010];long long nxtmi[300010];\n    inline void ih()\n    {\n        for(int i=1;i<=n;i++)\n        {\n            fa[i]=i;size[i]=1;\n            ma[i]=val[sa[i]];nxtma[sa[i]]=-up;\n            mi[i]=val[sa[i]];nxtmi[sa[i]]=up;\n        }\n    }\n    inline void rfrma(long long x,int p)//\u5237\u65b0\u6700\u5927,\u6b21\u5927\u503c\n    {if(x>=ma[p]){nxtma[p]=ma[p];ma[p]=x;}else if(x>nxtma[p]){nxtma[p]=x;}}\n    inline void rfrmi(long long x,int p)//\u5237\u65b0\u6700\u5c0f,\u6b21\u5c0f\u503c\n    {if(x<=mi[p]){nxtmi[p]=mi[p];mi[p]=x;}else if(x<nxtmi[p]){nxtmi[p]=x;}}\n    inline int f(int x)\n    {return fa[x]=(fa[x]==x)?x:f(fa[x]);}\n    inline void u(int x,int y)\n    {\n        int u=f(x);int v=f(y);if(size[u]<size[v])swap(u,v);\n        size[u]+=size[v];fa[v]=u;\n        rfrma(ma[v],u);rfrma(nxtma[v],u);\n        rfrmi(mi[v],u);rfrmi(nxtmi[v],u);\n    }\n    inline long long get_size(int x){return size[f(x)];}\n    inline long long get_ma(int x)\n    {int u=f(x);return max(ma[u]*nxtma[u],mi[u]*nxtmi[u]);}\n}s;\nstruct data//\u8fd9\u91cc\u7528\u6765\u6392\u5e8fh\u7684\u7ed3\u6784\u4f53\n{\n    int n;int t;\n    friend bool operator <(data a,data b){return a.t>b.t;}\n}d[300010];long long ans1[300010];long long ans2[300010];\nint main()\n{\n    up=pow(2LL,62);\n    scanf(\"%d\",&n);scanf(\"%s\",mde+1);\n    for(int i=1;i<=n;i++)scanf(\"%lld\",&val[i]);\n    create_sa();calch();s.ih();\n    for(int i=1;i<=n;i++)d[i].n=i,d[i].t=ht[i];//\u6392\u5e8fh\u7684\u65f6\u5019\u4fdd\u7559\u4e00\u4e2a\u7d22\u5f15\n    for(int i=1;i<=n;i++)ans2[i]=-up;\n    sort(d+1,d+n+1);int num=d[1].t;//\u7ef4\u62a4\u5f53\u524d\u66f4\u65b0\u4ec0\u4e48\u7b54\u6848\n    for(int i=1;i<=n;i++)\n    {\n        if(num!=d[i].t)//\u53ef\u80fd\u51fa\u73b0\u6839\u672c\u6ca1\u6709\u8fd9\u4e2ar\u7684\u60c5\u51b5,\u6b64\u65f6\u7b54\u6848\u540c\u4e0a\n        {for(int j=d[i].t;j<num;j++)ans1[j]=ans1[num],ans2[j]=ans2[num];num=d[i].t;}\n        if(s.f(d[i].n)!=s.f(d[i].n-1))//\u5e76\u7684\u65f6\u5019\u66f4\u65b0\u7b54\u6848,\u7701\u7684\u7edf\u8ba1\u5565\u65f6\u5019\u5207ht\n        {\n            ans1[num]+=s.get_size(d[i].n)*s.get_size(d[i].n-1);//\u8fd9\u91cc\u6362\u4e86\u4e2a\u5199\u6cd5\u7edf\u8ba1\u70b9\u5bf9\n            s.u(d[i].n,d[i].n-1);ans2[num]=max(ans2[num],s.get_ma(d[i].n));//\u540c\u65f6\u66f4\u65b0\u7b54\u6848\n        }\n    }\n    for(int i=0;i<=n-1;i++)//\u5012\u7740\u8f93\u51fa\u7b54\u6848\n    {\n        if(ans1[i]==0){printf(\"0 0\\n\");continue;}\n        printf(\"%lld %lld\\n\",ans1[i],ans2[i]);\n    }\n    return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1519474763,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u4e00\u4e2a  **\u540e\u7f00\u81ea\u52a8\u673a** \u7684\u9898\u89e3\u3002\n\nBZOJ 3238 [Ahoi2013] \u5dee\u5f02 [\u8fd9\u9898](http://www.lydsy.com/JudgeOnline/problem.php?id=3238 \"\u8fd9\u9898\")\u7684\u52a0\u5f3a\u7248\u3002\n\n\u8fd9\u9898\u9898\u9762\u7684\u8bdd UOJ \u548c LOJ \u7684\u6bd4\u8f83\u53ef\u770b...\n\n\u5982\u679c\u6709\u90e8\u5206\u5730\u65b9\u770b\u4e0d\u61c2\u9898\u89e3\u5728\u8bf4\u4ec0\u4e48\u53ef\u4ee5\u53bb\u5148\u628a\u90a3\u4e2a\u9898\u505a\u4e86\u3002\n\n\u8003\u8651\u5230\u5982\u679c\u4e00\u5bf9\u4e32 $r$ \u76f8\u4f3c\u5219 $[0,r-1]$ \u5747\u76f8\u4f3c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53ea\u8003\u8651\u4e00\u5bf9\u4e32\u7684\u6700\u957f\u76f8\u4f3c\uff0c\u6700\u540e\u7b54\u6848\u505a\u4e00\u4e0b\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u4e00\u5bf9\u4e32\u7684\u6700\u957f\u76f8\u4f3c... \u4e0d\u5c31\u662f\u8fd9\u4e24\u4e2a\u540e\u7f00\u7684 $lcp$ \u5417\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5728\u540e\u7f00\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u7684 $lca$ \u5904\u4f53\u73b0...\n\n\u4e8e\u662f\u7ffb\u8f6c\u4e32\u540e\u5efa\u540e\u7f00\u81ea\u52a8\u673a\u8f6c\u540e\u7f00\u6811\uff0c\u5bf9\u4e8e\u6811\u4e0a\u8282\u70b9\u7ef4\u62a4 $mx$ \u548c $mn$ \u5373\u53ef\uff0c\u56e0\u4e3a\u6709\u8d1f\u8d1f\u5f97\u6b63\u3002\n\n\u53e6\u5916\u4ea4\u5b8c luogu \u5efa\u8bae\u4e5f\u53bb UOJ \u4ea4\u4e00\u53d1... \u88ab hack \u6570\u636e\u6d17\u793c\u540e\u7684\u7a0b\u5e8f\u5c06\u4f1a\u66f4\u5f3a\u5927\u3002\n\n```cpp\n    #include <cmath>\n    #include <queue>\n    #include <cstdio>\n    #include <iomanip>\n    #include <cstdlib>\n    #include <cstring>\n    #include <iostream>\n    #include <algorithm>\n    #define N 600010\n    #define ll long long\n    #define inf 1000000000000000000ll\n    using namespace std;\n    inline int read()\n    {\n        int x=0,f=1;char ch=getchar();\n        while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n        while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n        return x*f;\n    }\n    struct zgz\n    {\n        int next,to;\n    }edge[N];\n    int head[N],cnt=1;\n    void add(int from,int to)\n    {\n        edge[cnt].to=to;\n        edge[cnt].next=head[from];\n        head[from]=cnt++;\n    }\n    ll ans1[N],ans2[N];\n    ll Mx_(ll a,ll b)\n    {return a>b?a:b;}\n    ll Mn_(ll a,ll b)\n    {return a<b?a:b;}\n```\nnamespace SAM\n     \n```cpp\n    {\n        int ch[N][26],fail[N];\n        int mx[N],sz[N];\n        ll Mx[N],Mn[N];\n        int last=1,tot=1;\n        void ins(int x,int w)\n        {\n            int np=++tot,p=last,q,nq;\n            last=np,mx[np]=mx[p]+1,sz[np]=1,Mx[np]=Mn[np]=w;\n            while(p&&!ch[p][x])ch[p][x]=np,p=fail[p];\n            if(p==0){fail[np]=1;return ;}\n            q=ch[p][x];\n            if(mx[q]==mx[p]+1){fail[np]=q;return ;}\n            nq=++tot,mx[nq]=mx[p]+1;\n            memcpy(ch[nq],ch[q],sizeof(ch[q]));\n            fail[nq]=fail[q],fail[q]=fail[np]=nq;\n            while(p&&ch[p][x]==q)ch[p][x]=nq,p=fail[p];\n        }\n        void build()\n        {\n            for(int i=2;i<=tot;i++)\n            add(fail[i],i);\n        }\n        bool ok(int x)\n        {return Mx[x]!=-inf&&Mn[x]!=inf;}\n        void dfs(int x)\n        {\n            if(!Mn[x]&&!Mx[x])Mn[x]=inf,Mx[x]=-inf;\n            for(int i=head[x];i;i=edge[i].next)\n            {\n                int to=edge[i].to;\n                dfs(to);\n                if(ok(x)&&ok(to))\n                ans2[mx[x]]=Mx_(ans2[mx[x]],Mx_(Mx[x]*Mx[to],Mn[x]*Mn[to]));\n                ans1[mx[x]]+=(ll)sz[x]*sz[to];\n                Mx[x]=Mx_(Mx[x],Mx[to]);\n                Mn[x]=Mn_(Mn[x],Mn[to]);\n                sz[x]+=sz[to];\n            }\n        }\n    }\n    int n;\n    char s[N];\n    ll a[N];\n    int main()\n    {\n        n=read();\n        scanf(\"%s\",s+1);\n        for(int i=1;i<=n;i++)a[i]=read();\n        for(int i=n;i>=1;i--)SAM::ins(s[i]-'a',a[i]);\n        for(int i=0;i<=n;i++)ans2[i]=-inf;\n        SAM::build();\n        SAM::dfs(1);\n        for(int i=n-1;i>=0;i--)\n        ans2[i]=Mx_(ans2[i],ans2[i+1]),ans1[i]+=ans1[i+1];\n        for(int i=0;i<=n-1;i++)\n        if(ans1[i])printf(\"%lld %lld\\n\",ans1[i],ans2[i]);\n        else puts(\"0 0\");\n}\n```",
        "postTime": 1515764584,
        "uid": 30459,
        "name": "\u6d88\u5931\u7684\u6d77\u5cb8\u7ebf",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b9a\u4e49\u4e24\u4e2a\u540e\u7f00 $ x $ \u548c $ y $ \u662f $ r $ \u5339\u914d\u7684\uff0c\u4ec5\u5f53 $ r \\leq LCP(x,y) $\uff0c\u5176\u4e2d $ x $ \u548c $ y $ \u7684\u6743\u503c\u4e3a $ a_x \\times a_y $\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6bcf\u4e00\u4e2a\u540e\u7f00\u7684\u6743\u503c\uff0c\u6c42 $ 0 $ \u5230 $ n-1 $ \u5339\u914d\u7684\u4e2a\u6570\u548c\u6700\u5927\u6743\u503c\u3002\n\n\u5927\u677f\u5b50\u3002\n\n\u9996\u5148\u540e\u7f00\u5339\u914d\u7684 LCP\uff0c\u5bb9\u6613\u77e5\u9053 $ x $ \u548c $ y $ \u7684 LCP \u5c31\u662f\u5176\u5728 parent tree \u4e0a\u7684 LCA\uff0c\u4f46\u8981\u627e\u5230\u4e24\u4e2a\u540e\u7f00\u5728 SAM \u4e0a\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u5f88\u56f0\u96be\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u53cd\u4e32\u6784\u9020 SAM \u5c31\u597d\u4e86\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u7edf\u8ba1 SAM \u6bcf\u4e2a\u8282\u70b9\u7684 siz \u548c \u6700/\u6b21 \u5927/\u5c0f \u503c\u3002\n\n\u6709\u4e00\u70b9\u513f\u7ec6\u8282\u3002\n```cpp\n#include<cstring>\n#include<cstdio>\nconst int M=3e5+5,INF=0x3f3f3f3f;\ntypedef long long ll;\nint n,lst=1,tot=1,f[M<<1],len[M<<1],chi[M<<1][26];int val[M];char s[M];\nint siz[M<<1],mx1[M<<1],mx2[M<<1],mi1[M<<1],mi2[M<<1];int CB[M],id[M<<1];\nll sum[M<<2],mx[M<<2],mi[M<<2];\ninline ll max(const ll&a,const ll&b){\n\treturn a>b?a:b;\n}\ninline ll min(const ll&a,const ll&b){\n\treturn a>b?b:a;\n}\ninline void Insert(const int&s){\n\tint q,p,nq,np;\n\tp=lst;len[np=lst=++tot]=len[p]+1;\n\twhile(p&&!chi[p][s])chi[p][s]=np,p=f[p];\n\tif(!p)f[np]=1;\n\telse{\n\t\tif(len[q=chi[p][s]]==len[p]+1)f[np]=q;\n\t\telse{\n\t\t\tlen[nq=++tot]=len[p]+1;f[nq]=f[q];f[np]=f[q]=nq;\n\t\t\tmemcpy(chi[nq],chi[q],104);while(p&&chi[p][s]==q)chi[p][s]=nq,p=f[p];\n\t\t}\n\t}\n}\nvoid Modify(const int&u,const int&l,const int&r,const ll&V,const ll&S,const int&L=1,const int&R=n){\n\tif(l>r||L>r||l>R)return;if(l<=L&&R<=r)return mx[u]=max(mx[u],V),sum[u]+=S,void();\n\tint mid=L+R>>1;Modify(u<<1,l,r,V,S,L,mid);Modify(u<<1|1,l,r,V,S,mid+1,R);\n}\nvoid DFS(const int&u,const int&L=1,const int&R=n){\n\tmx[u]=max(mx[u],mx[u>>1]);sum[u]+=sum[u>>1];\n\tif(L==R)return void(L!=n&&printf(\"%lld %lld\\n\",sum[u],sum[u]?mx[u]:0));\n\tint mid=L+R>>1;DFS(u<<1,L,mid);DFS(u<<1|1,mid+1,R);\n}\ninline ll prod(const int&x,const int&y){\n\treturn x&&y&&x^y?1ll*val[x]*val[y]:-1ll*INF*INF;\n}\nsigned main(){\n\tint i,u;ll V;scanf(\"%d%s\",&n,s+1);\n\tfor(i=1;i<=n;++i)scanf(\"%d\",val+i);\n\tfor(i=0;i<=(n<<2);++i)mx[i]=-1ll*INF*INF;\n\tfor(i=1;i<=(n<<1);++i)mi1[i]=mi2[i]=mx1[i]=mx2[i]=0;\n\tfor(i=n;i>=1;--i)Insert(s[i]-97),mx1[lst]=mi1[lst]=i,siz[lst]=1;\n\tfor(i=1;i<=tot;++i)++CB[len[i]];\n\tfor(i=1;i<=n;++i)CB[i]+=CB[i-1];\n\tfor(i=tot;i>=1;--i)id[CB[len[i]]--]=i;\n\tfor(i=tot;i>=1;--i){\n\t\tu=id[i];siz[f[u]]+=siz[u];\n\t\tif(val[mx1[u]]>val[mx1[f[u]]]||!mx1[f[u]]){\n\t\t\tmx2[f[u]]=val[mx1[f[u]]]>val[mx2[u]]?mx1[f[u]]:mx2[u];mx1[f[u]]=mx1[u];\n\t\t}\n\t\telse if(val[mx1[u]]>val[mx2[f[u]]])mx2[f[u]]=mx1[u];\n\t\tif(val[mi1[u]]<val[mi1[f[u]]]||!mi1[f[u]]){\n\t\t\tmi2[f[u]]=val[mi1[f[u]]]<val[mi2[u]]?mi1[f[u]]:mi2[u];mi1[f[u]]=mi1[u];\n\t\t}\n\t\telse if(val[mi1[u]]<val[mi2[f[u]]])mi2[f[u]]=mi1[u];\n\t\tV=max(max(prod(mx1[u],mx2[u]),prod(mi1[u],mx2[u])),max(prod(mx1[u],mi2[u]),prod(mi1[u],mi2[u])));\n\t\tV=max(V,prod(mx1[u],mi1[u]));\n\t\tif(i==1)printf(\"%lld %lld\\n\",1ll*siz[i]*(siz[i]-1)/2,V);\n\t\telse Modify(1,len[f[u]]+1,len[u],V,1ll*siz[u]*(siz[u]-1)/2);\n\t}\n\tu=id[1];siz[f[u]]+=siz[u];DFS(1);\n}\n```",
        "postTime": 1637678865,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u5b57\u7b26\u4e32 SAM P2178\u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u9898\u9996\u5148\u6c42\u51fa $sa_i$ \u548c $ht_i$\u3002\n\n\u6211\u4eec\u60f3\uff0c\u53ea\u8981\u6c42\u51fa\u5b57\u7b26\u4e32\u6070\u597d $r$ \u76f8\u4f3c\u7684\u7b54\u6848\uff0c\u518d\u7528\u524d\u7f00\u548c\u4ee5\u53ca\u540e\u7f00\u53d6 $\\max$\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u6c42\u6070\u597d $r$ \u76f8\u4f3c\u65f6\u7684 $ans1(r),ans2(r)$\u3002\n\n\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u8bb0\u5f55\u5927\u5c0f $siz$\uff0c\u6700\u5927\u3001\u6b21\u5927\u3001\u6700\u5c0f\u3001\u6b21\u5c0f\u503c\u5206\u522b\u662f $mx1,mx2,mn1,mn2$\uff08\u4e3a\u4ec0\u4e48\u8981\u8bb0\u5f55\u6700\u5c0f\u548c\u6b21\u5c0f\u503c\u5462\uff1f\u56e0\u4e3a\u6743\u503c $a_i$ \u4f1a\u6709\u8d1f\u6570\uff0c\u8d1f\u8d1f\u5f97\u6b63\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u89e3\uff09\u3002\n\n\u5408\u5e76\u65f6\uff0c$siz$ \u76f8\u52a0\uff0c\u6700\u5927\u6b21\u5927\u503c\u53d6\u4e24\u4e2a $mx1$ \u548c\u4e24\u4e2a $mx2$ \u4e2d\u7684\u524d\u4e24\u5927\u7684\u503c\uff0c\u6700\u5c0f\u6b21\u5c0f\u503c\u540c\u7406\uff0c\u6700\u5927\u89e3\u5c31\u662f $\\max(mx1\\times mx2,mn1\\times mn2)$\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u6309\u4ec0\u4e48\u987a\u5e8f\u5408\u5e76\u3002\u56e0\u4e3a $lcp(i,j)=\\min\\{ht_i\\dots ht_j\\}$\uff0c\u6240\u4ee5\u53ef\u4ee5\u6309 $ht_i$ \u7684\u964d\u5e8f\u6392\u5217\uff0c\u7136\u540e\u4f9d\u6b21\u5408\u5e76\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5728\u5408\u5e76\u5230\u5f53\u524d\u4f4d\u7f6e\u65f6\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684 $lcp$ \u957f\u5ea6\u4e00\u5b9a\u662f $ht_i$\u3002\n\n\u8bb0\u5f55\u7b54\u6848\u65f6\uff0c$ans1$ \u91c7\u7528\u5dee\u5206\uff0c\u5728 $[0,ht_i]$ \u7684\u533a\u95f4\u4e2d\u52a0\u4e0a $siz(x)\\times siz(y)$\uff0c$ans2=\\max\\{ans2,mx(x),mx(y)\\}$\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u4e0b\u9762\u662f AC \u4ee3\u7801\u3002\n\n```cpp\n/*\nluogu P2178\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n\nconst int INF = 0x7f7f7f7f;\n\nint n,k,a[300005],ans1[300005],ans2[300005];\nchar str[300005];\nint sa[300005],ht[300005],rk[300005],rk2[300005];\nint dsu[300005],mx[300005],siz[300005];\nint mx1[300005],mx2[300005],mn1[300005],mn2[300005];\npair<int,int> p[300005];\n\nbool cmp(int i,int j)\n{\n\tif(rk[i]!=rk[j])\n\t\treturn rk[i]<rk[j];\n\tint ri=(i+k<=n ? rk[i+k] : -1);\n\tint rj=(j+k<=n ? rk[j+k] : -1);\n\treturn ri<rj;\n}\n\nvoid getsa(int n,char *str)\n{\n\tfor(int i=1;i<=n;i++)\n\t\tsa[i] = i, rk[i] = str[i];\n\tfor(k=1;k<=n;k*=2)\n\t{\n\t\tsort(sa+1,sa+1+n,cmp);\n\t\trk2[sa[1]] = 1;\n\t\tfor(int i=2;i<=n;i++)\n\t\t\trk2[sa[i]] = rk2[sa[i-1]]+cmp(sa[i-1],sa[i]);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\trk[i] = rk2[i];\n\t}\n}\n\nvoid getht(int n,char *str)\n{\n\tfor(int i=1;i<=n;i++)\n\t\trk[sa[i]] = i;\n\tint h=0;\n\tht[1] = 0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint j=sa[rk[i]-1];\n\t\tif(h>0)\n\t\t\th--;\n\t\tfor(;j+h<=n&&i+h<=n;h++)\n\t\t\tif(str[j+h]!=str[i+h])\n\t\t\t\tbreak;\n\t\tht[rk[i]] = h;\n\t}\n}\n\nbool cmpp(pair<int,int> a,pair<int,int> b)\n{\n\treturn a.first>b.first;\n}\n\nint find_(int x)\n{\n\treturn dsu[x]==x ? x : dsu[x]=find_(dsu[x]);\n}\n\nvoid union_(int x,int y)\n{\n\tint p[5]={0,mx1[x],mx2[x],mx1[y],mx2[y]};\n\tint q[5]={0,mn1[x],mn2[x],mn1[y],mn2[y]};\n\tsort(p+1,p+5), sort(q+1,q+5);\n\tsiz[dsu[x]] += siz[dsu[y]];\n\tmx1[dsu[x]] = p[4], mx2[dsu[x]] = p[3];\n\tmn1[dsu[x]] = q[1], mn2[dsu[x]] = q[2];\n\tmx[dsu[x]] = max(mx[dsu[x]],max(mx1[dsu[x]]*mx2[dsu[x]],mn1[dsu[x]]*mn2[dsu[x]]));\n\tdsu[y] = dsu[x];\n}\n\nsigned main()\n{\n\tscanf(\"%lld%s\",&n,str+1);\n\tfor(int i=1;i<=n;scanf(\"%lld\",a+i),i++);\n\tgetsa(n,str), getht(n,str);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdsu[i] = i, siz[i] = 1;\n\t\tmx1[i] = a[sa[i]], mx2[i] = -(1ll<<61);\n\t\tmn1[i] = a[sa[i]], mn2[i] = 1ll<<61;\n\t\tmx[i] = -(1ll<<61);\n\t}\n\tfor(int i=2;i<=n;i++)\n\t\tp[i] = make_pair(ht[i],i);\n\tsort(p+2,p+1+n,cmpp);\n\tmemset(ans2,-INF,sizeof(ans2));\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint u=p[i].second,h=p[i].first;\n\t\tint fx=find_(u),fy=find_(u-1);\n\t\tans1[0] += siz[fx]*siz[fy];\n\t\tans1[h+1] -= siz[fx]*siz[fy];\n\t\tunion_(fx,fy);\n\t\tans2[h] = max(ans2[h],mx[fx]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tans1[i] += ans1[i-1];\n\tfor(int i=n-1;i>=0;i--)\n\t\tans2[i] = max(ans2[i],ans2[i+1]);\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%lld %lld\\n\",ans1[i],(ans1[i]>0 ? ans2[i] : 0));\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6 AC \u6109\u5feb\uff01",
        "postTime": 1622910240,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3\u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "**\u5e7f\u4e49\u540e\u7f00\u6811**\u9898\u89e3\u3002\n\n\u5bf9 $S$ \u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u6811\u3002\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a $x$\uff0c\u7236\u8fb9\u957f\u5ea6\u4e3a $len$\uff0c\u5b83\u7684\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u6709 $a$ \u4e2a\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e $(x-len)\\sim x$ \u8fd9\u4e00\u6bb5\u90fd\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u5373\u8d21\u732e $a$ \u4e2a\u4e92\u76f8 $(x-len)$ \u76f8\u4f3c\u7684\u3001 $(x-len+1)$ \u76f8\u4f3c\u7684\u3001\u2026\u2026\u3001$x$ \u76f8\u4f3c\u7684\uff0c\u4e5f\u5c31\u662f $\\Large\\frac{a(a-1)}{2}$ \u5bf9\u3002\n\n\u6700\u5927\u503c\u540c\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u4ece $i$ \u5f00\u59cb\u4e00\u6bb5\u540e\u7f00\uff0c\u6240\u4ee5\u627e\u5230\u8fd9\u4e9b\u53f6\u5b50\u7684\u6700\u5927\u6743\u503c $val_i$ \u4e58\u79ef\u5373\u53ef\u3002\u56e0\u4e3a\u8d1f\u8d1f\u5f97\u6b63\uff0c\u6240\u4ee5\u4f60\u8981\u540c\u65f6\u7ef4\u62a4\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u3001\u6b21\u5c0f\u503c\u3001\u6700\u5c0f\u503c\u3002\u4e5f\u662f\u5bf9 $(x-len)\\sim x$ \u4ea7\u751f\u8d21\u732e\u3002\n\n\u6240\u4ee5\u53d8\u6210\u4e86\u533a\u95f4\u66f4\u65b0\u3001\u5355\u70b9\u67e5\u503c\uff08\u6700\u540e\u8981\u5bf9\u4e8e $0\\sim n-1$ \u5206\u522b\u67e5\u4e00\u6b21\u503c\uff09\uff0c\u663e\u7136\u5e94\u7528\u5206\u5757\u6a21\u677f\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(n\\sqrt n)$\u3002\n\n```c++\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;++i)\n#define lon long long\n#define mar(o) rep(i,1,27)\n#define v dot[o].son[i] \nusing namespace std;\nconst int n7=301234,b7=648;const lon inf=1e9,infz=1e18+1000;\nstruct beer{int sta,len,fail;bool islaf;int son[29];}dot[n7*2];\nstruct dino{lon mxa1,mxa2,mni1,mni2,siz,cntz;};\nint n,B,kwei[n7],kl[b7],kr[b7],cr[n7];\nint cnt,now,las,rem;\nlon a[n7],blo1[n7],tag1[b7],blo2[n7],tag2[b7];\n\nint rd(){\n\tint shu=0;bool fu=0;char ch=getchar();\n\twhile( !isdigit(ch) ){if(ch=='-')fu=1;ch=getchar();}\n\twhile( isdigit(ch) )shu=(shu<<1)+(shu<<3)+ch-'0',ch=getchar();\n\treturn fu?-shu:shu;\n}\n\nvoid sesmet1(){\n\tcnt=1,now=1,dot[0].len=inf;\n}\n\nvoid sesmet2(){\n\trep(i,1,n+1)kwei[i]=(i-1)/B+1;\n\trep(i,1,B+2)kl[i]=(i-1)*B+1,kr[i]=i*B;\n\trep(i,1,n+1)blo2[i]=-infz;\n\trep(i,1,B+2)tag2[i]=-infz;\t\n}\n\nint Dnew(int sta,int len){\n\tcnt++,dot[cnt]=(beer){sta,len,1,(len==inf)};\n\treturn cnt;\n}\n\nvoid isert(int id){\n\trem++,las=1;\n\twhile(rem){\n\t\twhile(rem>dot[ dot[now].son[ cr[id-rem+1] ] ].len){\n\t\t\tnow=dot[now].son[ cr[id-rem+1] ];\n\t\t\trem-=dot[now].len;\n\t\t}\n\t\tint &z=dot[now].son[ cr[id-rem+1] ];\n\t\tint ch=cr[ dot[z].sta+rem-1 ];\n\t\tif(!z||cr[id]==ch){\n\t\t\tdot[las].fail=now,las=now;\n\t\t\tif(!z)z=Dnew(id,inf);\n\t\t\telse return;\n\t\t}\n\t\telse{\n\t\t\tint fut=Dnew(dot[z].sta,rem-1);\n\t\t\tdot[fut].son[ch]=z;\n\t\t\tdot[fut].son[ cr[id] ]=Dnew(id,inf);\n\t\t\tdot[z].sta+=rem-1,dot[z].len-=rem-1;\n\t\t\tz=fut,dot[las].fail=fut,las=fut;\n\t\t}\n\t\tif(now==1)rem--;\n\t\telse now=dot[now].fail;\n\t}\n}\n\nvoid fixinf(int len){\n\trep(i,1,cnt){\n\t\tif(dot[i].islaf)dot[i].len=len-dot[i].sta+1-1;\n\t}\n}\n\n//blo1 siz ; blo2 max\nvoid updat(int l,int r,lon siz,lon mxa){\n\tif(l>r)l=r=0;\n\tl++,r++;\n\tif(kwei[l]==kwei[r]){\n\t\trep(i,l,r)blo1[i]+=siz,blo2[i]=max(blo2[i],mxa);\n\t}\n\telse{\n\t\trep(i,l,kr[ kwei[l] ])blo1[i]+=siz,blo2[i]=max(blo2[i],mxa);\n\t\trep(i,kl[ kwei[r] ],r)blo1[i]+=siz,blo2[i]=max(blo2[i],mxa);\n\t\trep(i,kwei[l]+1,kwei[r]-1)tag1[i]+=siz,tag2[i]=max(tag2[i],mxa);\n\t}\n}\n\ndino dfs(int o,int sep){\n\tsep+=dot[o].len;\n\tdino z=(dino){-inf,-inf,inf,inf,0,0};\n\tif(dot[o].islaf){\n\t\tif(sep)z.siz=1,z.cntz=1,z.mxa1=z.mni1=a[n-sep+1];\n\t}\n\telse{\n\t\tmar(o){\n\t\t\tif(v){\n\t\t\t\tdino tmp=dfs(v,sep);\n\t\t\t\tz.siz+=tmp.siz,z.cntz+=tmp.cntz;\n\t\t\t\t\n\t\t\t\tif(tmp.mxa1>=z.mxa1)z.mxa2=z.mxa1,z.mxa1=tmp.mxa1;\n\t\t\t\telse if(tmp.mxa1>z.mxa2)z.mxa2=tmp.mxa1;\n\t\t\t\tif(tmp.mxa2>=z.mxa1)z.mxa2=z.mxa1,z.mxa1=tmp.mxa2;\n\t\t\t\telse if(tmp.mxa2>z.mxa2)z.mxa2=tmp.mxa2;\n\t\t\t\t\n\t\t\t\tif(tmp.mni1<=z.mni1)z.mni2=z.mni1,z.mni1=tmp.mni1;\n\t\t\t\telse if(tmp.mni1<z.mni2)z.mni2=tmp.mni1;\n\t\t\t\tif(tmp.mni2<=z.mni1)z.mni2=z.mni1,z.mni1=tmp.mni2;\n\t\t\t\telse if(tmp.mni2<z.mni2)z.mni2=tmp.mni2;\n\t\t\t}\n\t\t}\t\t\n\t}\n\tlon tmp=max(z.mxa1*z.mxa2,z.mni1*z.mni2);\n\tif(z.cntz<2)tmp=-infz;\n\tupdat(sep-dot[o].len+1,sep,z.siz*(z.siz-1)/2ll,tmp);\n\treturn z;\n}\n\nint main(){\n\tn=rd(),B=sqrt(n);\n\tsesmet1(),sesmet2();\n\trep(i,1,n)cr[i]=getchar()-'a'+1,isert(i);\n\t\n\tn++;\n\tcr[n]=27,isert(n),fixinf(n);\n\tn--;\n\t\n\trep(i,1,n)a[i]=rd();\n\tdfs(1,0);\n\trep(i,1,n){\n\t\tprintf(\"%lld \",blo1[i]+tag1[ kwei[i] ]);\n\t\tif( !(blo1[i]+tag1[ kwei[i] ]) )puts(\"0\");\n\t\telse printf(\"%lld\\n\", max(blo2[i],tag2[ kwei[i] ]) );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1619706873,
        "uid": 99623,
        "name": "BlankAo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 [NOI2015] \u54c1\u9152\u5927\u4f1a"
    },
    {
        "content": "\u770b\u8fc7\u5f88\u591a\u9898\u89e3\uff0c\u53ef\u80fd\u90fd\u662f\u5927\u4f6c\u5199\u7684\uff0c\u6709\u7684\u5730\u65b9\u4e00\u7b14\u5e26\u8fc7\uff0c\u611f\u89c9\u4e0d\u662f\u5f88\u61c2\uff0c\u82b11.5h\u809d\u4e86\u8fd9\u9898\uff0c\u5199\u7bc7\u9898\u89e3\u4ee5\u4f9b\u540e\u4eba\u53c2\u8003\u3002\u81ea\u8ba4\u4e3a\u4f1a\u6bd4\u8f83\u7ec6\u81f4\u4e00\u70b9\uff0c\u8bf7\u8010\u5fc3\u9605\u8bfb\u3002\n\n\u7b14\u8005\u53ea\u4f1aSuffixArray\u3002\u6240\u4ee5\u6b64\u9898\u6211\u4f7f\u7528\u4e86\u540e\u7f00\u6570\u7ec4+\u5e76\u67e5\u96c6\u7684\u65b9\u5f0f\u901a\u8fc7\u3002\n\n\u540e\u7f00\u6570\u7ec4\u5e94\u8be5\u662f\u540e\u7f00\u6570\u636e\u7ed3\u6784\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u4e2a\uff0c\u6211\u4f7f\u7528\u500d\u589e\u540e\u7f00\u6392\u5e8f\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e00\u4e2alog\u6c42\u51fasa\u6570\u7ec4\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\uff0c\u5b83\u201cr\u76f8\u4f3c\u201d\u7684\u610f\u601d\u5c31\u662flcp(p, q)\u4e0d\u5c0f\u4e8er\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8981\u9884\u5904\u7406\u51faheight\u6570\u7ec4\u3002\n\n\u677f\u5b50\u90e8\u5206\uff1a\n\n```cpp\ninline void RadixSort(void) {\n\tfor (int i = 0; i <= m; i++) cnt[i] = 0;\n\tfor (int i = 1; i <= n; i++) ++cnt[Rank[i]];\n\tfor (int i = 1; i <= m; i++) cnt[i] += cnt[i - 1];\n\tfor (int i = n; i >= 1; i--) SA[cnt[Rank[tmp[i]]]--] = tmp[i];\n}\n\ninline void SuffixSort(void) {\n\tfor (int i = 1; i <= n; i++) Rank[i] = str[i] - '0' + 1, tmp[i] = i; RadixSort();\n\tfor (int k = 1, tot = 0; tot < n; m = tot, k <<= 1) { tot = 0;\n\t\tfor (int i = 1; i <= k; i++) tmp[++tot] = n - k + i;\n\t\tfor (int i = 1; i <= n; i++) if (SA[i] > k) tmp[++tot] = SA[i] - k;\n\t\tRadixSort(); swap(tmp, Rank); Rank[SA[1]] = tot = 1;\n\t\tfor (int i = 2; i <= n; i++)\n\t\t\tRank[SA[i]] = (tmp[SA[i - 1]] == tmp[SA[i]] && tmp[SA[i - 1] + k] == tmp[SA[i] + k]) ? tot : ++tot;\n\t}\n}\n\ninline void GetHeight(void) { int k = 0;\n\tfor (int i = 1; i <= n; i++) Rank[SA[i]] = i;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (Rank[i] == 1) continue;\n\t\tif (k) --k; int j = SA[Rank[i] - 1];\n\t\twhile (j + k <= n && i + k <= n && str[i + k] == str[j + k]) ++k;\n\t\theight[Rank[i]] = k;\n\t}\n}\n\n```\n\n\u53ef\u4ee5\u8f7b\u677e\u60f3\u5230\u4e00\u79cd\u66b4\u529b\u7b56\u7565\uff0c\u5373\u5229\u7528height\u6570\u7ec4\u66b4\u529b\u6c42lcp\uff0c\u7136\u540e\u66b4\u529b\u7edf\u8ba1\uff0c\u8fd9\u597d\u50cf\u662f3\u65b9\u7684\uff0c\u9884\u8ba1\u5f97\u520620\u5206\u3002\n\n\u90a3\u6211\u4eec\u5e94\u8be5\u6362\u4e00\u6362\u601d\u8def\u3002\n\n\u6211\u4eec\u77e5\u9053lcp(i, j) = min{height[k]} (i + 1 <= k <= j)\u3002\n\n\u90a3\u662f\u4e0d\u662f\u201cr\u76f8\u4f3c\u201d\u65f6\uff0c\u5bf9\u5176\u80fd\u9020\u6210\u8d21\u732e\u5fc5\u987b\u662flcp\u533a\u95f4\u5185\u7684height\u5927\u4e8e\u7b49\u4e8er\u3002\n\n\u8003\u8651\u5c06height\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u6765\u8ba1\u7b97\u4e24\u6bb5\u5408\u5e76\u8d21\u732e\u3002\n\n\u7531\u4e8e\u7f8e\u5473\u5ea6\u6709\u8d1f\u6570\uff0c\u6240\u4ee5\u53ef\u80fd\u51fa\u73b0\u6700\u5c0f\u503c\u4e58\u6b21\u5c0f\u503c\u5927\u4e8e\u6700\u5927\u503c\u4e58\u6b21\u5927\u503c\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4max1\uff0cmax2\uff0cmin1\uff0cmin2\u56db\u4e2a\u5143\u7d20\u6765\u6c42ans2\u3002\n\n\u7136\u540e\u7b2c\u4e00\u95ee\u8981\u6c42\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4sze\u6765\u6c42ans1\u3002\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u96c6\u5408x\uff0cy\uff0c\u5047\u8bbe\u5b83\u4eec\u6700\u591a\u662f\"z\u76f8\u4f3c\"\u7684\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9ans1[0 ~ z]\u4ea7\u751fsze[x] * sze[y]\u7684\u8d21\u732e\u3002\n\n\u65e2\u7136\u90fd\u7ef4\u62a4sze\u4e86\uff0c\u5c31\u8ba9\u5e76\u67e5\u96c6\u518d\u6309\u79e9\u5408\u5e76\uff0c\u6bd4\u5355\u7eaf\u7684\u8def\u5f84\u538b\u7f29\u5757\u4e00\u70b9\u3002\n\n\u6700\u540e\u8981\u63d0\u9192\u5927\u5bb6\u662f\u8981\u5f00long long\u800c\u4e14ans2\uff0cmax2\uff0cmin2\u7684\u521d\u503c\u7684\u7edd\u5bf9\u503c\u8981\u8bbe\u5927\u4e00\u4e9b\uff0c\u4e0d\u7136\u4f1a\u51fa\u9519\uff0c\u53ea\u670970\u5206\u3002\uff08|inf|\u6211\u5f00\u5230\u4e862\u768460\u6b21\u65b9\uff09\n\ncode\uff1a\n\n```cpp\nstruct Height {\n\tint idx, hgt;\n\tHeight(int _i = 0, int _h = 0) : idx(_i), hgt(_h) {}\n\tinline bool operator < (const Height&rhs) const { return hgt > rhs.hgt; }\n} a[Maxn]; ll max1[Maxn], max2[Maxn], min1[Maxn], min2[Maxn], w[Maxn], ans1[Maxn], ans2[Maxn];\n\ninline int getf(int x) { return f[x] = f[x] == x ? x : getf(f[x]); }\ninline void unionf(int x, int y) {\n\tll  p[5] = {0, max1[x], max2[x],  max1[y], max2[y]}, q[5] = {0, min1[x], min2[x], min1[y], min2[y]};\n\tif (sze[x] <= sze[y]) f[x] = y, sze[y] += sze[x]; else f[y] = x, sze[x] += sze[y];\n\tsort(p + 1, p + 5, greater <ll> ()); sort(q + 1, q + 5);\n\tmax1[f[x]] = p[1], max2[f[x]] = p[2]; min1[f[x]] = q[1], min2[f[x]] = q[2];\n}\n\nsigned main(void) {\n//\tfile(\"\");\n\tread(n); readstr(str + 1); m = 256;\n\tfor (int i = 1; i <= n; i++) read(w[i]);\n\tSuffixSort(); GetHeight();\n\t\n\tfor (int i = 2; i <= n; i++) a[i] = Height(i, height[i]);\n\tfor (int i = 1; i <= n; i++) {\n\t\tf[i] = i; sze[i] = 1; ans2[i] = -(1ll << 60);\n\t\tmax1[i] = w[SA[i]], max2[i] = -(1ll << 60);\n\t\tmin1[i] = w[SA[i]], min2[i] = 1ll << 60;\n\t} ans2[0] = -(1ll << 60); sort(a + 2, a + n + 1);\n\t\n\tfor (int i = 2; i <= n; i++) {\n\t\tint idx = a[i].idx, hgt = a[i].hgt;\n\t\tint fx = getf(idx), fy = getf(idx - 1);\t\t\n\t\tans1[0] += 1ll * sze[fx] * sze[fy]; \n\t\tans1[hgt + 1] -= 1ll * sze[fx] * sze[fy];\n\t\tunionf(fx , fy); fx = getf(idx);\n\t\tchkmax(ans2[hgt], max(1ll * max1[fx] * max2[fx], 1ll * min1[fx] * min2[fx]));\n\t}\n\t\n\tfor (int i = 1; i < n; i++) ans1[i] += ans1[i - 1];\n\tfor (int i = n - 1; i >= 0; i--) chkmax(ans2[i] , ans2[i + 1]);\n\tfor (int i = 0; i < n; i++) if (!ans1[i]) puts(\"0 0\"); else writeln(ans1[i], ' '), writeln(ans2[i]);\n//\tfwrite(pf, 1, o1 - pf, stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1592627513,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "# [NOI2015]\u54c1\u9152\u5927\u4f1a\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2178)\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u540e\u7f00\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u540e\u7f00\u4e2d\u4efb\u610f\u4e24\u4e2a\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e3a$i$\u7684\u4e00\u5171\u6709\u591a\u5c11\u5bf9\uff0c\u6743\u503c\u4e58\u79ef\u6700\u5927\u4e3a\u591a\u5c11\u3002\n\n## \u9898\u89e3\n\n\u540e\u7f00\u6811\u7b80\u5355\u9898\uff0c\u4f46\u7ec6\u8282\u7e41\u7410\u3002\u9996\u5148\u5efa\u7acb\u540e\u7f00\u6811\uff0c\u4e24\u4e2a\u540e\u7f00\u7684\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e3a\u90a3\u4e24\u4e2a\u540e\u7f00\u7ed3\u5c3e\u5728\u6811\u4e0a```LCA```\u7684\u6df1\u5ea6\u3002\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u4f3c\u503c$r$\uff0c\u6c42\u51fa\u76f8\u4f3c\u503c\u6070\u597d\u4e3a$r$\u7684\u6709\u591a\u5c11\u4e2a\uff0c\u7136\u540e\u8fed\u4ee3\u4e00\u4e0b\u5c31\u5f97\u51fa\u7b54\u6848\u3002\u90a3\u4e48\u5982\u4f55\u6c42\u76f8\u4f3c\u503c\u6070\u597d\u4e3a$r$\u7684\u5462\uff1f\u770b\u6df1\u5ea6\u4e3a$r$\u7684\u8282\u70b9\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u5bf9\u4e0d\u5728\u540c\u4e00\u9897\u5b50\u6811\u5185\u7684\u53f6\u8282\u70b9\u5bf9\u5373\u53ef\uff08\u8fd9\u4e2a\u5bb9\u6613\u6c42\u5427\uff0c\u5927\u4e0d\u4e86\u5c31$n^2$\u66b4\u529b\uff0c\u4e00\u5171\u9876\u591a$26$\u4e2a\u513f\u5b50\uff09\u3002\u7136\u540e\u518d\u6c42\u51fa\u5b50\u6811\u5185\u7684\u6700\u5927\u3001\u6b21\u5927\uff0c\u6700\u5c0f\u3001\u6b21\u5c0f\uff0c\u56e0\u4e3a\u6743\u503c\u79ef\u6700\u5927\u4e00\u5b9a\u4e3a\u6700\u5927\u4e0e\u6b21\u5927\u7684\u4e58\u79ef\u6216\u6700\u5c0f\u4e0e\u6b21\u5c0f\u7684\u4e58\u79ef\uff08\u8003\u8651\u6700\u5927\u6b21\u5927\u3001\u6700\u5c0f\u6b21\u5c0f\u662f\u5426\u540c\u53f7\uff09\u3002\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n## \u4ee3\u7801\n\n[Link](https://www.luogu.com.cn/paste/c4wlj3sf)",
        "postTime": 1579531310,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[NOI2015]\u54c1\u9152\u5927\u4f1a"
    },
    {
        "content": "### Description \n\n\u7ed9\u5b9a\u5b57\u7b26\u4e32 $s$ \uff0c\u548c\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6743\u503c $a_i$\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $i \\in [0, n)$ \u6c42\u51fa\u6709\u591a\u5c11\u5bf9 $(i, j)$  \u6ee1\u8db3 $LCP(sa_i, sa_j) \\ge i$ \u4ee5\u53ca\u5728\u8fd9\u4e9b $(i, j)$ \u4e2d $a_i \\times a_j$  \u6700\u5927\u662f\u591a\u5c11\u3002$sa_i$ \u8868\u793a\u4ece $i$ \u5f00\u59cb\u7684\u540e\u7f00\u3002\n\n### Solution\n\n\u5c06\u539f\u4e32\u53cd\u8fc7\u6765\u5efa SAM \u6c42\u5f97\u540e\u7f00\u6811\u3002\u8003\u8651\u540e\u7f00\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9 $u$ \uff0c\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u5b50\u4e32\u662f\u4ed6\u7684\u4efb\u610f\u540e\u4ee3\u7684\u540e\u7f00 \u3002\u6240\u4ee5\u6bcf\u4e24\u4e2a\u5728\u5176\u5b50\u6811\u4e2d\u7684\u70b9\u90fd\u4f1a\u5bf9\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u9020\u6210\u8d21\u732e\u3002\u53ea\u9700\u8981\u7ef4\u62a4 right \u96c6\u5408\u7684\u5927\u5c0f\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u4e58\u79ef\u6700\u5927\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\u4e00\u4e2a\u662f\u6700\u5927\u7684\u4e24\u4e2a\u76f8\u4e58\uff0c\u4e00\u4e2a\u662f\u6700\u5c0f\u7684\u4e24\u4e2a\u76f8\u4e58\uff08\u8d1f\u8d1f\u5f97\u6b63\uff09\u3002\u6240\u4ee5\u53ea\u9700\u8981\u5728 dfs \u7684\u65f6\u5019\u987a\u4fbf\u7ef4\u62a4\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u4e0e\u5b50\u6811\u5408\u5e76\u7684\u65f6\u5019\u7ef4\u62a4\u5904\u7b54\u6848\u3002\n\n\u6700\u540e\u518d\u4ece\u540e\u5f80\u524d\u66f4\u65b0\u4e00\u904d\u7b54\u6848\u3002\u56e0\u4e3a\u5c0f\u7684\u80af\u5b9a\u5305\u542b\u5728\u5927\u7684\u4e2d\uff0c\u5bf9\u7b2c\u4e00\u95ee\u505a\u52a0\u6cd5\uff0c\u7b2c\u4e8c\u95ee\u53d6 max\n\n\u5177\u4f53\u770b\u4ee3\u7801\n\n### Code\n\n[\u770b\u4ee3\u7801\u6233\u8fd9\u91cc](https://acfunction.github.io/2019/05/03/BZOJ4199/#Code)",
        "postTime": 1556893883,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u6709\u610f\u601d\u3002\u3002\u3002\u8fd9\u79cd parent \u6811\u4e0a\u6811\u5f62 dp \u7684\u9898\u76ee\u771f\u7684\u662f...\uff08\u770b\u591a\u4e86\u5c31\u597d\u4e86QWQ\uff09\n\n\n\u5176\u5b9e\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0csam \u5efa\u5b8c\u4e4b\u540e\u76f4\u63a5\u4e00\u904d\u6811\u5f62 dp \u5c31\u51fa\u89e3\u4e86\n\n\u5c31\u662f\u8981\u6ce8\u610f\u4e00\u4e0b\u70b9\u6743\u53ef\u80fd\u4e3a\u8d1f\u7136\u540e\u8fd8\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684 min \u4fe1\u606f\u5c31\u597d\u4e86\n\n\u597d\u50cf\u6ca1\u4ec0\u4e48\u7279\u522b\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1f\u677f\u5b50\u6539\u4e24\u4e0b\u52a0\u4e2a dfs \u5c31\u597d\u4e86\u5427...\n\n```\n//by Judge\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define fp(i,a,b) for(int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(int i=(a),I=(b)-1;i>I;--i)\n#define go(G,u) for(int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define ll long long\nusing namespace std;\nconst int inf=1e9+7;\nconst int M=6e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar());\n\tfor(;isalpha(c);c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(ll x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n,w[M]; string s;\nstruct SAM{ int las,cnt; map<char,int> to[M];\n\tarr fa,len,siz,mx,mx2,mn,mn2; ll sum[M],ans[M];\n\tSAM(){las=cnt=1;}\n\tinline void insert(char c,int w){  //\u4e3b\u8981\u5f97\u5230 parent \u6811 \n\t\tint p=las,np=++cnt; las=np,len[np]=len[p]+1,las=np;\n\t\tfor(;p&&!to[p].count(c);p=fa[p]) to[p][c]=np;\n\t\tmx[np]=mn[np]=w,mx2[np]=-inf,mn2[np]=inf,siz[np]=1;\n\t\tif(!p) fa[np]=1;\n\t\telse{ int q=to[p][c];\n\t\t\tif(len[q]==len[p]+1) fa[np]=q;\n\t\t\telse{ int nq=++cnt; len[nq]=len[p]+1;\n\t\t\t\tmx[nq]=mx2[nq]=-inf,mn[nq]=mn2[nq]=inf;\n\t\t\t\tto[nq]=to[q],fa[nq]=fa[q],fa[q]=fa[np]=nq;\n\t\t\t\tfor(;to[p][c]==q;p=fa[p]) to[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tstruct Gr{ int pat,head[M];\n\t\tstruct Edge{ int to,nxt; }e[M<<1];\n\t\tinline void add(int u,int v){\n\t\t\te[++pat]={v,head[u]},head[u]=pat;\n\t\t}\n\t}G;\n\ttemplate<class T>inline T Max(T a,T b){return a>b?a:b;}\n\ttemplate<class T>inline T Min(T a,T b){return a<b?a:b;}\n\tinline void cmax(int u,int w){\n\t\tif(w>mx[u]) mx2[u]=mx[u],mx[u]=w;\n\t\telse mx2[u]=Max(mx2[u],w);\n\t}\n\tinline void cmin(int u,int w){\n\t\tif(w<mn[u]) mn2[u]=mn[u],mn[u]=w;\n\t\telse mn2[u]=Min(mn2[u],w);\n\t}\n\tvoid dfs(int u){ int sz=0;  //\u5728 parent \u6811\u4e0a\u6811\u5f62 dp  \n\t\tgo(G,u) dfs(v),sz+=siz[v],\n\t\t\tcmax(u,mx[v]),cmax(u,mx2[v]),\n\t\t\tcmin(u,mn[v]),cmin(u,mn2[v]);\n\t\tif(sz+siz[u]<2) return ;\n\t\tans[len[u]]=Max(ans[len[u]],Max(1ll*mx[u]*mx2[u],1ll*mn[u]*mn2[u]));  //\u70b9\u6743\u6709\u8d1f\u6570\u8981\u6ce8\u610f\uff08\u8d1f\u8d1f\u5f97\u6b63\uff09 \n\t\tgo(G,u) sum[len[u]]+=1ll*siz[u]*siz[v],siz[u]+=siz[v];  //\u5f97\u5230\u5f53\u524d\u70b9\u7684 siz \u548c sum \uff0csum \u4e3a\u603b\u65b9\u6848\u6570 \n\t}\n\tinline void calc(){\n\t\tmx[1]=mx2[1]=-inf,mn[1]=mn2[1]=inf;  //\u6ce8\u610f\u6839\u8282\u70b9\u8981\u8bbe\u65e0\u89e3\uff08\u4e0d\u8bbe\u597d\u50cf\u6ca1\u5173\u7cfb\uff1f\uff09 \n\t\tmemset(ans,-63,sizeof ans);\n\t\tfp(i,2,cnt) G.add(fa[i],i); dfs(1);\n\t\tfd(i,n-1,0) sum[i]+=sum[i+1],ans[i]=Max(ans[i],ans[i+1]);\n\t\tfp(i,0,n-1) print(sum[i],' '),print(!sum[i]?0:ans[i]);\n\t}\n}p;\nint main(){ n=read(),reads(s);\n\tfp(i,0,n-1) w[i]=read();\n\tfd(i,n-1,0) p.insert(s[i],w[i]);\n\treturn p.calc(),Ot(),0;\n}\n```\n\n\n\u4f46\u6211\u8fd8\u60f3\u8981\u8bf4\u7684\u662f\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u7528 dfs \n\n\u6211\u4eec\u8003\u8651\u7528 sa \u7684\u6a21\u578b\u4ee3\u66ff\u6811\u5f62 dp \uff08\u6ce8\u610f\u7740\u5b9e\u8d28\u4e0a\u8fd8\u662f\u6811\u5f62 dp \uff09\n\n\u4e8e\u662f\u5e38\u6570-- \uff0c\u7801\u91cf--\uff0c\u601d\u8003\uff1f++\u5427...\n\n```\n//by Judge\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define fp(i,a,b) for(int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(int i=(a),I=(b)-1;i>I;--i)\n#define ll long long\nusing namespace std;\nconst int inf=1e9+7;\nconst int M=6e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar());\n\tfor(;isalpha(c);c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(ll x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n,w[M]; string s;\nstruct SAM{ int las,cnt; map<char,int> to[M];\n\tarr c,sa,fa,len,siz,mx,mx2,mn,mn2; ll sum[M],ans[M];\n\tSAM(){las=cnt=1;}\n\tinline void insert(char c,int w){  //\u4e3b\u8981\u5f97\u5230 parent \u6811 \n\t\tint p=las,np=++cnt; las=np,len[np]=len[p]+1,las=np;\n\t\tfor(;p&&!to[p].count(c);p=fa[p]) to[p][c]=np;\n\t\tmx[np]=mn[np]=w,mx2[np]=-inf,mn2[np]=inf,siz[np]=1;\n\t\tif(!p) fa[np]=1;\n\t\telse{ int q=to[p][c];\n\t\t\tif(len[q]==len[p]+1) fa[np]=q;\n\t\t\telse{ int nq=++cnt; len[nq]=len[p]+1;\n\t\t\t\tmx[nq]=mx2[nq]=-inf,mn[nq]=mn2[nq]=inf;\n\t\t\t\tto[nq]=to[q],fa[nq]=fa[q],fa[q]=fa[np]=nq;\n\t\t\t\tfor(;to[p][c]==q;p=fa[p]) to[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\ttemplate<class T>inline T Max(T a,T b){return a>b?a:b;}\n\ttemplate<class T>inline T Min(T a,T b){return a<b?a:b;}\n\tinline void cmax(int u,int w){ if(w>mx[u]) mx2[u]=mx[u],mx[u]=w; else mx2[u]=Max(mx2[u],w); }\n\tinline void cmin(int u,int w){ if(w<mn[u]) mn2[u]=mn[u],mn[u]=w; else mn2[u]=Min(mn2[u],w); }\n\tinline void solv(){ fp(i,1,cnt) ++c[len[i]]; memset(ans,-63,sizeof ans);\n\t\tfp(i,2,cnt) c[i]+=c[i-1]; fp(i,1,cnt) sa[c[len[i]]--]=i;\n\t\tfd(i,cnt,1){ int p=sa[i]; sum[len[fa[p]]]+=1ll*siz[fa[p]]*siz[p],siz[fa[p]]+=siz[p];\n\t\t\tcmax(fa[p],mx[p]),cmax(fa[p],mx2[p]),cmin(fa[p],mn[p]),cmin(fa[p],mn2[p]);\n\t\t\tif(siz[p]>1) ans[len[p]]=Max(ans[len[p]],Max(1ll*mx[p]*mx2[p],1ll*mn[p]*mn2[p]));\n\t\t}\n\t\tfd(i,n-1,0) sum[i]+=sum[i+1],ans[i]=Max(ans[i],ans[i+1]);\n\t\tfp(i,0,n-1) print(sum[i],' '),print(!sum[i]?0:ans[i]);\n\t}\n}p;\nint main(){ n=read(),reads(s);\n\tfp(i,0,n-1) w[i]=read();\n\tfd(i,n-1,0) p.insert(s[i],w[i]);\n\treturn p.solv(),Ot(),0;\n}\n```\n\n",
        "postTime": 1553305756,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "###\n**$\\Longrightarrow\\Longrightarrow\\Longrightarrow$[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/y2823774827y/p/10515232.html)**\n\n\u540e\u7f00\u6570\u7ec4\u4e00\u773c\u9898\u7cfb\u5217\n\n$r$\u76f8\u4f3c\u7528$height$\u6570\u7ec4\u5904\u7406\uff0c\u6bcf\u6b21\u6309$height$\u5206\u88c2\u533a\u95f4\uff0c\u663e\u7136\u662f\u6709\u5355\u8c03\u6027\u7684\n\n\u6240\u6c42\u7684$r_0^{n-1}$\uff0c$O(n^2)$\u662f\u8fc7\u4e0d\u4e86\u7684\n\u5229\u7528\u5355\u8c03\u6027\uff0c\u4e0a\u70c2\u5927\u8857\u7684\u79bb\u7ebf\u5e76\u67e5\u96c6\n\u5e76\u67e5\u96c6\u8981\u7ef4\u62a4\uff1a\u5927\u5c0f,\u6700\u5927\u503c,\u6b21\u5927\u503c,\u6700\u5c0f\u503c,\u6b21\u5c0f\u503c(\u7531\u4e8e\u8fd9\u91cc$a_i$\u4e3a\u6574\u6570\uff0c\u6240\u4ee5\u7b54\u6848\u53ef\u80fd\u7531\u6700\u5c0f\u503c\u4e0e\u6b21\u5c0f\u503c\u8d21\u732e)\n\n\u7ec6\u8282\u8fd8\u662f\u633a\u591a\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#include<vector>\nusing namespace std;\ntypedef long long LL;\ninline LL Read(){\n    LL x(0),f(1); char c=getchar();\n    while(c<'0' || c>'9'){ if(c=='-') f=-1; c=getchar(); }\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+c-'0', c=getchar();\n    return x*f;\n}\nconst LL maxn=1e6+9,inf=(1e18+1);\nLL n,ans,sum,va,m;\nLL c[maxn],x[maxn],sa[maxn],y[maxn],size[maxn],fa[maxn],rk[maxn],hei[maxn],w[maxn],tmp[maxn][2];\nLL mx[maxn],cx[maxn],mi[maxn],ci[maxn];\nbool visit[maxn],vx[maxn],vi[maxn];\nchar s[maxn];\ninline void Get_sa(){\n    for(LL i=1;i<=n;++i) ++c[x[i]=(LL)(s[i]-'a'+1)];\n    for(LL i=2;i<=m;++i) c[i]+=c[i-1];\n    for(LL i=n;i>=1;--i) sa[c[x[i]]--]=i;\n    for(LL len=1;len<=n;len<<=1){\n        LL num(0);\n        for(LL i=n-len+1;i<=n;++i) y[++num]=i;\n        for(LL i=1;i<=n;++i) if(sa[i]>len) y[++num]=sa[i]-len;\n        for(LL i=1;i<=m;++i) c[i]=0;\n        for(LL i=1;i<=n;++i) ++c[x[i]];\n        for(LL i=2;i<=m;++i) c[i]+=c[i-1];\n        for(LL i=n;i>=1;--i) sa[c[x[y[i]]]--]=y[i],y[i]=0;\n        memcpy(y,x,sizeof(x));\n        x[sa[1]]=num=1;\n        for(LL i=2;i<=n;++i)\n            x[sa[i]]=(y[sa[i]]==y[sa[i-1]] && y[sa[i]+len]==y[sa[i-1]+len])?num:++num;\n        if(num==n) break;\n        m=num;\n    }\n    for(LL i=1;i<=n;++i) rk[sa[i]]=i;\n    LL ret(0);\n    for(LL i=1;i<=n;++i){\n        if(ret) --ret;\n        LL j(sa[rk[i]-1]);\n        while(s[j+ret]==s[i+ret]) ++ret;\n        hei[rk[i]]=ret;\n    }\n}\nLL Get_f(LL x){ return fa[x]==x?x:fa[x]=Get_f(fa[x]); }\ninline void Del(LL x){\n    sum-=((size[x]-1)*size[x])/2;\n}\ninline void Merge(LL x,LL y){\n    fa[x]=y;\n    if(mx[x]>mx[y]){\n        cx[y]=mx[y];\n        mx[y]=mx[x];\n        if(vx[x] && cx[x]>cx[y])\n            cx[y]=cx[x];\n    }else\n        cx[y]=(vx[y]?max(cx[y],mx[x]):mx[x]);\n    if(mi[x]<mi[y]){\n        ci[y]=mi[y];\n        mi[y]=mi[x];\n        if(vi[x] && ci[x]<ci[y])\n            ci[y]=ci[x];\n    }else\n        ci[y]=(vi[y]?min(ci[y],mi[x]):mi[x]);\n    vx[y]=vi[y]=true;\n    size[y]+=size[x];\n    sum+=((size[y]-1)*size[y]>>1);\n    ans=max(ans,max(mx[y]*cx[y],mi[y]*ci[y]));\n}\nvector<LL>mark[maxn];\nint main(){\n    n=Read();\n    scanf(\" %s\",s+1);\n    for(LL i=1;i<=n;++i) w[i]=Read();\n    m=26; Get_sa();\n    for(LL i=1;i<=n;++i) mark[hei[i]].push_back(i);\n    for(LL i=1;i<=n;++i) fa[i]=i;\n    for(LL i=1;i<=n;++i){\n        mx[i]=mi[i]=w[i];\n        vx[i]=vi[i]=false;\n    }\n    ans=-inf;\n    for(LL i=1;i<=n;++i) size[i]=1;\n    for(LL i=n-1;i>=0;--i){\n        for(LL j=0;j<mark[i].size();++j){\n            LL x(sa[mark[i][j]]);\n            visit[x]=true;\n            LL sax(rk[x]), nxt(sa[sax+1]),pre(sa[sax-1]);\n            LL fy(Get_f(pre));\n            Del(x); Del(fy);\n            Merge(x,fy);\n        }\n        tmp[i][0]=sum; tmp[i][1]=(ans<=-inf?0:ans);\n    }\n    for(LL i=0;i<n;++i) printf(\"%lld %lld\\n\",tmp[i][0],tmp[i][1]);\n    return 0;\n}\n```",
        "postTime": 1552359191,
        "uid": 88804,
        "name": "y2823774827y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u53ef\u80fd\u662f\u6700\u50bb\u7684\u505a\u6cd5\u4e86\n\n\u66b4\u529b\u5355\u8c03\u6808+$st$\u8868\n\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\u5c31\u57fa\u672c\u77e5\u9053\u8fd9\u662f\u4e2a$SA$\u4e86\uff0c\u5148\u65e0\u8111\u6572\u4e0a$SA$\u548c\u6c42$height$\u7684\u677f\u5b50\n\n\u4e4b\u540e\u5c1d\u8bd5\u641e\u4e00\u4e0b\u7b2c\u4e00\u95ee\n\n\u53d1\u73b0\u7b2c\u4e00\u95ee\u5c31\u662f\u6c42\u51fa\u6ee1\u8db3$lcp(i,j)>=k$\u7684$(i,j)$\u6709\u591a\u5c11\u5bf9\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u66b4\u529b\u5408\u5e76\u7684\u5355\u8c03\u6808\u6765\u505a\n\n\u73b0\u5728\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u51fa$height$\u6570\u7ec4\u6240\u6709\u5b50\u533a\u95f4\u7684\u6700\u5c0f\u503c\u7684\u548c\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u52a8\u6001\u5f80\u5e8f\u5217\u672b\u5c3e\u52a0\u6570\u7684\u8fc7\u7a0b\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u5f80\u672b\u5c3e\u52a0\u4e00\u4e2a\u6570\u90fd\u4f1a\u548c\u4e4b\u524d\u6240\u6709\u7684\u6570\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\n\n\u8003\u8651\u5feb\u901f\u7b97\u51fa\u8fd9\u4e9b\u533a\u95f4\u7684\u6700\u5c0f\u503c\u7684\u548c\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6570\u5b58\u50a8\u4e00\u4e2a$a_i$\uff0c\u8868\u793a$i$\u5230\u5f53\u524d\u5e8f\u5217\u672b\u5c3e\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\n\n\u6211\u4eec\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\u53ef\u4ee5\u5bf9\u66f4\u65b0\u4e00\u4e0b\u6240\u6709\u7684$a_i$\uff0c\u628a\u6240\u6709\u6bd4\u5f53\u524d\u52a0\u5165\u7684\u6570\u5927\u7684$a_i$\u53d8\u6210\u5f53\u524d\u6570\u5c31\u597d\u4e86\n\n\u8fd9\u4e0d\u5c31$T$\u4e86\u5417\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6240\u6709$a_i$\u7684\u548c\uff0c\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e2a$i$\u6765\u81ea\u54ea\u91cc\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u76f8\u7b49\u7684$a_i$\u653e\u5728\u4e00\u8d77\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a\u6570\u5c31\u66b4\u529b\u626b\u4e00\u904d\u628a\u90a3\u4e9b\u6bd4\u5f53\u524d\u52a0\u5165\u6570\u5927\u7684\u5408\u5e76\u5230\u4e00\u4e2a$a_i$\n\n\u770b\u8d77\u6765\u590d\u6742\u5ea6\u5e76\u4e0d\u79d1\u5b66\uff0c\u4f46\u662f\u6700\u574f\u60c5\u51b5\u4e0b\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u4e86\uff0c$O(n)$\u7684\uff0c\u8dd1\u7684\u8fd8\u633a\u5feb\u7684\n\n\u540c\u65f6\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u5728\u88ab\u5408\u5e76\u7684\u65f6\u5019\u5229\u7528\u65f6\u95f4\u6233\u7edf\u8ba1\u4e00\u4e0b\u8fd9\u4e2a\u5143\u7d20\u7684\u8d21\u732e\n\n\u4e4b\u540e\u7b2c\u4e8c\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f3a\u4e0a\u5355\u8c03\u6808\n\n\u5de6\u53f3\u4e24\u8fb9\u90fd\u5148\u7528\u5355\u8c03\u6808\u626b\u4e00\u904d\uff0c\u626b\u51fa\u6bcf\u4e2a\u70b9\u5f80\u5de6\u5f80\u53f3\u80fd\u6700\u8fdc\u8fbe\u5230\u54ea\u91cc\uff0c\u4e4b\u540e\u6211\u4eec\u7528\u4e00\u4e2a$st$\u8868\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u4ece\u8fd9\u4e2a\u70b9\u5de6\u8fb9\u7684\u533a\u95f4\u548c\u53f3\u8fb9\u7684\u533a\u95f4\u91cc\u9009\u51fa\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u6765\u7ec4\u5408\u5c31\u884c\u4e86\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define re register\n#define LL long long\n#define maxn 300005\ninline LL read()\n{\n\tre char c=getchar();re LL x=0,r=1;\n\twhile(c<'0'||c>'9') {if(c=='-') r=-1;c=getchar();}\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return r*x;\n}\nint n,m,top;\nint a[maxn],cnt[maxn],T[maxn],L[maxn],R[maxn];\nchar S[maxn];\nint tp[maxn],tax[maxn],sa[maxn],rk[maxn],het[maxn],log_2[maxn],st[maxn];\nLL pre[maxn],Ans[maxn];\nLL St[2][maxn][20];\ninline void qsort()\n{\n\tfor(re int i=0;i<=m;i++) tax[i]=0;\n\tfor(re int i=1;i<=n;i++) tax[rk[i]]++;\n\tfor(re int i=1;i<=m;i++) tax[i]+=tax[i-1];\n\tfor(re int i=n;i;--i) sa[tax[rk[tp[i]]]--]=tp[i];\n} \ninline LL max(LL a,LL b){return (a>b)?a:b;}\ninline LL min(LL a,LL b){return (a<b)?a:b;}\ninline LL ask(int o,int l,int r)\n{\n\tint k=log_2[r-l+1];\n\tif(o) return max(St[1][l][k],St[1][r-(1<<k)+1][k]);\n\t\telse return min(St[0][l][k],St[0][r-(1<<k)+1][k]);\n}\nint main()\n{\n\tn=read();scanf(\"%s\",S+1);\n\tmemset(St[0],0x3f3f3f3f,sizeof(St[0]));\n\tmemset(St[1],-0x3f3f3f3f,sizeof(St[1]));\n\tmemset(Ans,-0x3f3f3f3f,sizeof(Ans));\n\tm=750;\n\tfor(re int i=1;i<=n;i++) rk[i]=S[i],tp[i]=i;\n\tqsort();\n\tfor(re int w=1,p=0;p<n;m=p,w<<=1)\n\t{\n\t\tp=0;\n\t\tfor(re int i=1;i<=w;i++) tp[++p]=n-w+i;\n\t\tfor(re int i=1;i<=n;i++) if(sa[i]>w) tp[++p]=sa[i]-w;\n\t\tqsort();\n\t\tfor(re int i=1;i<=n;i++) std::swap(rk[i],tp[i]);\n\t\trk[sa[1]]=p=1;\n\t\tfor(re int i=2;i<=n;i++) rk[sa[i]]=(tp[sa[i-1]]==tp[sa[i]]&&tp[sa[i-1]+w]==tp[sa[i]+w])?p:++p;\n\t}\n\tint k=0;\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tif(k) --k;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(S[i+k]==S[j+k]) ++k;\n\t\thet[rk[i]]=k;\n\t}\n\tfor(re int i=2;i<=n;i++)\n\t{\n\t\tint now=1;\n\t\twhile(top&&a[top]>=het[i])\n\t\t\tnow+=cnt[top],pre[a[top]]+=(LL)((LL)i-(LL)T[top])*(LL)cnt[top],top--;\n\t\ta[++top]=het[i],T[top]=i,cnt[top]=now;\n\t}\n\twhile(top) pre[a[top]]+=(LL)((LL)n+1ll-(LL)T[top])*(LL)cnt[top],top--;\n\tfor(re int i=n-1;i>=0;--i) pre[i]+=pre[i+1];\n\t\n\tfor(re int i=1;i<=n;i++)\n    {\n        while(top&&het[i]<het[st[top]]) R[st[top]]=i,top--;\n        st[++top]=i;\n    }\n    while(top) R[st[top]]=n+1,top--;\n    for(re int i=n;i;--i)\n    {\n        while(top&&het[i]<het[st[top]]) L[st[top]]=i,top--;\n        st[++top]=i;\n    }\n    while(top) L[st[top]]=1,top--;\n    \n    for(re int i=1;i<=n;i++) St[0][rk[i]][0]=St[1][rk[i]][0]=read();\n\tfor(re int i=2;i<=n;i++) log_2[i]=1+log_2[i>>1];\n\tfor(re int j=1;j<=19;j++)\n\t\tfor(re int i=1;i+(1<<j)-1<=n;i++)\n\t\t\tSt[0][i][j]=min(St[0][i][j-1],St[0][i+(1<<(j-1))][j-1]),\n\t\t\tSt[1][i][j]=max(St[1][i][j-1],St[1][i+(1<<(j-1))][j-1]);\n\t\t\t\n    for(re int i=1;i<=n;i++)\n\t{\n    \tint l=L[i],r=R[i]-1;\n    \tif(l>i-1) continue;\n\t\tif(i>r) continue; \n\t\tLL A=ask(1,l,i-1),B=ask(0,l,i-1),C=ask(1,i,r),D=ask(0,i,r);\n    \tif(Ans[het[i]]<A*C) Ans[het[i]]=A*C; if(Ans[het[i]]<B*D) Ans[het[i]]=B*D;\n    \tif(Ans[het[i]]<A*D) Ans[het[i]]=A*D; if(Ans[het[i]]<B*C) Ans[het[i]]=B*C;\n\t}\n\tfor(re int i=n-1;i>=0;--i) Ans[i]=max(Ans[i],Ans[i+1]);\n\tfor(re int i=0;i<n;i++)\n\tif(pre[i]) printf(\"%lld %lld\\n\",pre[i],Ans[i]);\n\t\telse printf(\"%lld \",pre[i]),putchar(48),putchar(10);\n\treturn 0;\n}\n```",
        "postTime": 1545729061,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u53ef\u80fd\u662f\u5f53\u5e74\u7b2c\u4e8c\u7b80\u5355\u9898\u2026\u2026\n\n\u9996\u5148\u8003\u8651\u4e24\u676f\u9152\u7684\u6700\u5927\u76f8\u4f3c\u5ea6\u5c31\u662f\u8fd9\u4e24\u4e2a\u540e\u7f00\u7684lcp\n\n\u8003\u8651\u53cd\u4e32sam\u8f6c\u540e\u7f00\u6811\uff0c\u697c\u4e0b\u5f88\u6e05\u695a\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5728lca\u5904\u7edf\u8ba1\u65f6\uff0c\u7b2c\u4e8c\u95ee\u7b54\u6848\u8981\u7ef4\u62a4\u6700\u5927\u503cmx\uff0c\u6b21\u5927\u503c_mx\uff0c\u6700\u5c0f\u503cmn\uff0c\u6b21\u5c0f\u503c_mn\uff0c\u7b54\u6848\u5c31\u662fmax(mx \u00d7 _mx,mn \u00d7 _mn)\n\n\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u628a\u540e\u7f00\u6811\u5efa\u51fa\u6765\uff0c\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\u4e5f\u53ef\u4ee5\uff08\u5077\u61d2\uff09\n\n\u53e6\u5916\u76f8\u4f3c\u5ea6\u4e3a0\u8981\u7279\u5224~~\u53ef\u80fd\u662f\u6211\u5199\u7cdf\u4e86~~\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\nusing namespace std;\nconst int maxn=300005,inf=1e9+5;\nchar str[maxn];\nint n,v[maxn];\ntypedef long long LL;\nstruct SAM//\u540e\u7f00\u81ea\u52a8\u673a\n{\n\tint ch[maxn<<1][26],l[maxn<<1],fa[maxn<<1],cnt,last;\n\tint mx[maxn<<1],_mx[maxn<<1],mn[maxn<<1],_mn[maxn<<1];\n\tint a[maxn<<1],c[maxn<<1],siz[maxn<<1];//\u6700\u5927\u503c\uff0c\u6b21\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u6b21\u5c0f\u503c\n\tLL sum[maxn<<1],maxi[maxn<<1];\n\tinline void ins(int c,int val)//\u57fa\u672c\u64cd\u4f5c\n\t{\n\t\tint p=last,np=++cnt;\n\t\tlast=np;\n\t\tsiz[np]=1;\n\t\tl[np]=l[p]+1; \n\t\tmx[np]=mn[np]=val;\n\t\t_mx[np]=-inf;\n\t\t_mn[np]=inf;\n\t\tfor(;p&&!ch[p][c];p=fa[p])ch[p][c]=np;\n\t\tif(!p)fa[np]=1;else\n\t\t{\n\t\t\tint q=ch[p][c];\n\t\t\tif(l[p]+1==l[q])fa[np]=q;else\n\t\t\t{\n\t\t\t\tint nq=++cnt;\n\t\t\t\tmx[nq]=_mx[nq]=-inf;\n\t\t\t\tmn[nq]=_mn[nq]=inf;\n\t\t\t\tl[nq]=l[p]+1;\n\t\t\t\tmemcpy(ch[nq],ch[q],sizeof ch[q]);\n\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n\t\t\t\tfor(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tinline void build()//\u5efasam\n\t{\n\t\tscanf(\"%d\",&n);\n\t\tlast=cnt=1;\n\t\tmx[1]=_mx[1]=-inf;\n\t\tmn[1]=_mn[1]=inf;\n\t\tscanf(\"%s\",str+1);\n\t\tfor(int i=1;i<=n;i++)scanf(\"%d\",&v[i]);\n\t\tfor(int i=n;i;i--)ins(str[i]-'a',v[i]);\n\t}\n\tinline void up_max(int&mx1,int&_mx1,int mx2,int _mx2)\n\t{\n\t\tif(mx2>mx1){_mx1=max(mx1,_mx2);mx1=mx2;}else _mx1=max(_mx1,mx2);\n\t}\n\tinline void up_min(int&mx1,int&_mx1,int mx2,int _mx2)\n\t{\n\t\tif(mx2<mx1){_mx1=min(mx1,_mx2);mx1=mx2;}else _mx1=min(_mx1,mx2);\n\t}\n\tinline void solve()//\u62d3\u6251\u6392\u5e8f\n\t{\n\t\tfor(int i=1;i<=cnt;i++)c[l[i]]++;\n\t\tfor(int i=1;i<=cnt;i++)c[i]+=c[i-1];\n\t\tfor(int i=1;i<=cnt;i++)a[c[l[i]]--]=i;\n\t\tfor(int i=0;i<=n+1;i++)maxi[i]=-1LL*inf*inf;\n\t\tfor(int i=cnt;i;i--)\n\t\t{\n\t\t\tint p=a[i];\n\t\t\tif(siz[p]>1)maxi[l[p]]=max(maxi[l[p]],max(1LL*mx[p]*_mx[p],1LL*mn[p]*_mn[p]));//\u66f4\u65b0\u6700\u5927\u503c\n\t\t\tup_max(mx[fa[p]],_mx[fa[p]],mx[p],_mx[p]);\n\t\t\tup_min(mn[fa[p]],_mn[fa[p]],mn[p],_mn[p]);\n\t\t\tsum[l[fa[p]]]+=1LL*siz[fa[p]]*siz[p];//\u66f4\u65b0\u65b9\u6848\u6570\n\t\t\tsiz[fa[p]]+=siz[p];\n\t\t}\n\t\tfor(int i=n-1;i>=0;i--)\n\t\t{\n\t\t\tsum[i]+=sum[i+1];//\u76f8\u4f3c\u5ea6\u7684\u6027\u8d28\n\t\t\tmaxi[i]=max(maxi[i],maxi[i+1]);\n\t\t}\n\t\tsum[0]=1LL*n*(n-1)/2;\n\t\tfor(int i=0;i<n;i++)printf(\"%lld %lld\\n\",sum[i],sum[i]?maxi[i]:0);\n\t}\n}sam;\nint main(){sam.build();sam.solve();}\n```",
        "postTime": 1522696754,
        "uid": 10291,
        "name": "fighter_OI",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u601d\u8def{\n\n\n\u5927\u529b\u51fa\u5947\u8ff9\uff01\uff01\u4e0d\u662f\u4e00\u822c\u7684\u9b3c\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u9996\u5148\u770b\u5230\u9898\u9762\u80af\u5b9a\u662f\u540e\u7f00\u6570\u7ec4\u4e86\u5566\u3002\u3002\u3002\u3002\u3002\n\n\n\u6700\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u66b4\u529b\u5c06height\u5206\u7ec4\u67e5\u8be2\uff0c\u7528\u8ba1\u6570\u539f\u7406\u7edf\u8ba1\u3002\u8fd9\u6837\u670940\u5206\n\n\n(\u7136\u800c\uff0c\u6211\u53ea\u670930....\u67e5\u8be2\u6700\u5c0f\u548c\u6b21\u5c0f,\u6700\u5927\u548c\u6b21\u5927\u7684\u7279\u5224\u592a\u591a\u4e86\u3002\u3002\u3002)\n\n\n\u8003\u8651\u4f18\u5316\u3002\n\n\n1.\u7531\u4e8e\u6bcf\u4e24\u4e2a\u76f8\u540c\u5b50\u4e32(\u8bbe\u4e32\u957f\u4e3aR)\u5b83\u7684\u7b54\u6848\u4e5f\u662f\u5728\u8fd9\u4e24\u7aef\u4e2d\u6bd4R\u5c0f\u7684\u4e32\u957f\u7684\u7b54\u6848\u7684\u4e00\u90e8\u5206,\n\n\n\u90a3\u6211\u5c31\u6309R\u4ece\u5927\u5230\u5c0f\u6392\u5e8f,\u6240\u4ee5\u7528\u5230\u4e86height\u6570\u7ec4\u3002\n\n\n2.\u600e\u4e48\u66f4\u65b0\u7b54\u6848\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4height\u7684sa[i]\u4e0esa[i-1]\u7684Max,Min,Sz.\u6211\u4eec\u53ea\u5173\u5fc3\u7684\u662f\u5f53\u524d\u5339\u914d\u7684\u8fd9\u4e2a\u70b9\u7684\u6570\u91cf\uff0c\u53ea\u9700\u7edf\u8ba1\u5f53\u524d\u7684\u5373\u53ef\uff0c\n\n\n\u53c8\u7531\u4e8e\u53ef\u80fd\u4f1a\u6709\u9057\u6f0f(\u5728for\u679a\u4e3e\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8003\u8651R\u5305\u542b\u7684\u60c5\u51b5)\u5728\u6700\u540e\u8fd8\u8981\u5728\u66f4\u65b0\u4e00\u4e0b\u3002\n\n\n\u5177\u4f53\u4e0d\u8bf4\u4e86\uff0c\u8fd9\u4e2a\u4e5f\u662f\u9700\u8981\u81ea\u5df1YY\u7684\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n}",
        "postTime": 1501324699,
        "uid": 23122,
        "name": "\u57c3\u7f57\u8292\u963f\u8001\u5e08\u00b7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u597d\u96be\n\n\u81ea\u5df1\u53e3\u80e1\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811+\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5\n\n\u5efa\u51fa\u5176\u53cd\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u7684 $parent$ \u6811\n\n\u8dd1\u4e00\u904d\u6811\u5f62DP\u5373\u53ef\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u957f\u5ea6\u7684 $ans$ \uff0c\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\ntypedef long long LL;\nconst LL inf = 2e18;\nconst int N = 6e5 + 100;\ninline int read() {\n\tint res(0), f(1); char ch(getchar()); \n\twhile (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); }\n\twhile ('0' <= ch && ch <= '9') res = (res << 1) + (res << 3) + (ch ^ 48), ch = getchar();\n\treturn res * f;\n}\n\nstruct Edge {\n\tint to;\n\tEdge *nxt;\n\tEdge(int to, Edge *nxt) : to(to), nxt(nxt) {}\n} *head[N];\n\nint len[N], siz[N], a[N], link[N], ch[N][26], tot, last, Max[N], Min[N], fuck[N];\nLL ans[N], cnt[N];\n\ninline void insert(int c, int x) {\n\tint p = last, cur = ++ tot; last = cur; len[cur] = len[p] + 1; siz[cur] = 1; a[cur] = x;\n\tfor (; p && ch[p][c] == 0; p = link[p]) ch[p][c] = cur;\n\tif (!p) { link[cur] = 1; return; }\n\tint q = ch[p][c];\n\tif (len[p] + 1 == len[q]) link[cur] = q;\n\telse {\n\t\tint nq = ++ tot;\n\t\tlink[nq] = link[q]; len[nq] = len[p] + 1;\n\t\tfor (int i = 0; i < 26; ++ i) ch[nq][i] = ch[q][i];\n\t\tlink[q] = link[cur] = nq;\n\t\tfor (; p && ch[p][c] == q; p = link[p]) ch[p][c] = nq;\n\t}\n}\n\ninline void Get_Tree() {\n\tfor (int i = 2; i <= tot; ++ i) head[link[i]] = new Edge(i, head[link[i]]);\n}\n\n#define mid ((l + r) >> 1)\nstruct node {\n\tint l, r;\n\tLL Max, sum;\n\tnode *li, *ri;\n\tnode(int _l, int _r) : l(_l), r(_r), Max(-inf), sum(0) {\n\t\tif (l == r) return;\n\t\tli = new node(l, mid);\n\t\tri = new node(mid + 1, r);\n\t}\n\n\tvoid chenge(int L, int R, LL MAX, LL tot) {\n\t\tif (L > R) return;\n\t\tif (L <= l && r <= R) {\n\t\t\tsum += tot;\n\t\t\tMax = std::max(MAX, Max);\n\t\t\treturn;\n\t\t}\n\t\tif (mid >= L) li->chenge(L, R, MAX, tot);\n\t\tif (mid < R)  ri->chenge(L, R, MAX, tot);\n\t}\n\n\tvoid print(int n, LL MAX, LL tot) {\n\t\tif (l == r) {\n\t\t\tif (l == n) return;\n\t\t\tprintf(\"%lld %lld\\n\", tot + sum, std::max(MAX, Max) == -inf ? 0 : std::max(MAX, Max));\n\t\t\treturn;\n\t\t}\n\t\tli->print(n, std::max(MAX, Max), tot + sum);\n\t\tri->print(n, std::max(MAX, Max), tot + sum);\n\t}\n\n} *root;\n\nvoid dfs(int x) {\n\tans[x] = -inf;\n\tMax[x] = std::max(Max[x], a[x]);\n\tMin[x] = std::min(Min[x], a[x]);\n\tfor (Edge *i = head[x]; i; i = i->nxt) {\n\t\tdfs(i->to);\n\t\tans[x] = std::max(ans[x], std::max((LL)Min[x] * Min[i->to], (LL)Max[x] * Max[i->to]));\n\t\tans[x] = std::max(ans[i->to], ans[x]);\n\t\tMax[x] = std::max(Max[x], Max[i->to]);\n\t\tMin[x] = std::min(Min[x], Min[i->to]);\n\t\tsiz[x] += siz[i->to];\n\t}\n\tif (siz[x] == 2 && Max[x] && Min[x]) ans[x] = (LL)Min[x] * (LL)Max[x];\n\troot->chenge(x != 1 ? len[link[x]] + 1 : 0, len[x], ans[x], siz[x] * (siz[x] - 1) / 2);\n}\n\nchar s[N];\n\nsigned main() {\n\ttot = last = 1;\n\tint n(read());\n\tscanf(\"%s\", s + 1); root = new node(0, n);\n\tfor (int i = 1; i <= n; ++ i) fuck[i] = read();\n\tfor (int i = n; i >= 1; -- i) insert(s[i] - 'a', fuck[i]);\n\tGet_Tree();\n\tdfs(1);\n\troot->print(n, -inf, 0);\n}\n\n```",
        "postTime": 1576149748,
        "uid": 162451,
        "name": "__wfx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u95ee\u76f4\u63a5\u5efa\u51fa\u540e\u7f00\u6570\u7ec4\u4e4b\u540e\uff0c\u7b97\u51fa\u6bcf\u4e00\u4e2a\u70b9\u6709\u8d21\u732e\u7684\u533a\u95f4\uff0c\u7528height\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u66f4\u65b0\u7b54\u6848\u3002 \n\n\u7b2c\u4e8c\u95ee\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\uff0c\u56e0\u4e3a\u662f\u4ece\u5c0f\u5230\u5927\u505a\u7684\uff0c\u6240\u4ee5\u4ea7\u751f\u8d21\u732e\u7684\u533a\u95f4\u4f1a\u4e0d\u65ad\u6269\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6bcf\u6b21\u628a\u4ea7\u751f\u8d21\u732e\u7684\u533a\u95f4[l,r]\u5e76\u8d77\u6765\uff0c\u5e76\u4e14\u8fd9\u4e00\u6bb5\u4e2d\u7684\u5143\u7d20\u6700\u591a\u53ea\u4f1a\u5c5e\u4e8e\u4e24\u4e2a\u96c6\u5408\uff0c\u6bcf\u6b21\u5728\u5e76\u67e5\u96c6\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u96c6\u5408\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u66f4\u65b0\u7b54\u6848\u5c31\u884c\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define LL long long\nconst int N=300010;\nchar s[N];\nLL sum[N],ans[N];\nint n,m,t1[N],t2[N],c[N],sa[N],rank[N],height[N],stack[N],l[N],r[N],top,point[N],next[N],tot,en[N],b[N],fa[N],maxn[N],minn[N];\ninline int in(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void add(int x,int y){\n    next[++tot]=point[x];point[x]=tot;en[tot]=y;\n}\ninline bool cmp(int *y,int p,int q,int k){\n    int o0,o1;\n    o0=p+k>=n?-1:y[p+k];\n    o1=q+k>=n?-1:y[q+k];\n    return o0==o1&&y[p]==y[q];\n}\ninline void build_sa(){\n    int i,k,p,*x=t1,*y=t2;\n    for(m=26,i=0;i<m;++i) c[i]=0;\n    for(i=0;i<n;++i) ++c[x[i]=s[i]-'a'];\n    for(i=1;i<m;++i) c[i]+=c[i-1];\n    for(i=n-1;~i;--i) sa[--c[x[i]]]=i;\n    for(k=1;k<=n;k<<=1){\n        for(p=0,i=n-k;i<n;++i) y[p++]=i;\n        for(i=0;i<n;++i) if(sa[i]>=k) y[p++]=sa[i]-k;\n        for(i=0;i<m;++i) c[i]=0;\n        for(i=0;i<n;++i) ++c[x[y[i]]];\n        for(i=1;i<m;++i) c[i]+=c[i-1];\n        for(i=n-1;~i;--i) sa[--c[x[y[i]]]]=y[i];\n        swap(x,y);\n        x[sa[0]]=0;m=1;\n        for(i=1;i<n;++i) x[sa[i]]=cmp(y,sa[i],sa[i-1],k)?m-1:m++;\n        if(m>=n) break;\n    }\n}\ninline void build_height(){\n    int i,j,k=0;\n    for(i=0;i<n;++i) rank[sa[i]]=i;\n    for(i=0;i<n;++i){\n        if(!rank[i]) continue;\n        k=k?k-1:k;\n        j=sa[rank[i]-1];\n        while(s[i+k]==s[j+k]) ++k;\n        height[rank[i]]=k;\n    }\n}\ninline int find(int x){\n    if(x!=fa[x]) fa[x]=find(fa[x]);\n    return fa[x];\n}\nint main(){\n    int i,j;\n    n=in();\n    for(i=0;i<n;++i){\n        char ch=getchar();\n        while(ch<'a'||ch>'z') ch=getchar();\n        s[i]=ch;\n    }\n    build_sa();\n    build_height();\n    for(i=0;i<n;++i){\n        fa[i]=i;\n        b[i]=minn[rank[i]]=maxn[rank[i]]=in();\n    }\n    stack[top=1]=0;\n    for(l[0]=0,i=1;i<n;++i){\n        while(top&&height[stack[top]]>height[i]) --top;\n        l[i]=top?stack[top]+1:0;\n        stack[++top]=i;\n    }\n    stack[top=1]=n-1;\n    for(r[n-1]=n-1,i=n-2;i>=0;--i){\n        while(top&&height[stack[top]]>=height[i]) --top;\n        r[i]=top?stack[top]-1:n-1;\n        stack[++top]=i;\n    }\n    for(i=0;i<n;++i) add(height[i],i);\n    memset(ans,128,sizeof(ans));\n    for(i=n-1;i;--i){\n        sum[i]=sum[i+1];\n        ans[i]=ans[i+1];\n        for(j=point[i];j;j=next[j]){\n            int o=en[j],L=l[o],R=r[o];\n            sum[i]+=(LL)(o-L+1)*(LL)(R-o+1);\n            int r1=find(L-1),r2=find(R);\n            ans[i]=max(ans[i],max((LL)maxn[r1]*(LL)maxn[r2],(LL)minn[r1]*(LL)minn[r2]));\n            fa[r2]=r1;\n            maxn[r1]=max(maxn[r1],maxn[r2]);\n            minn[r1]=min(minn[r1],minn[r2]);\n        }\n    }\n    sort(b,b+n);\n    ans[i]=max((LL)b[0]*(LL)b[1],(LL)b[n-1]*(LL)b[n-2]);\n    sum[0]=(LL)n*(LL)(n-1)/2;\n    for(i=0;i<n;++i) ans[i]=sum[i]?ans[i]:0;\n    for(i=0;i<n;++i) printf(\"%lld %lld\\n\",sum[i],ans[i]);\n}\n```",
        "postTime": 1530586130,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2178 \u3010[NOI2015]\u54c1\u9152\u5927\u4f1a\u3011"
    }
]