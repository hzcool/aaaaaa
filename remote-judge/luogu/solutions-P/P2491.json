[
    {
        "content": "\u5176\u4ed6\u697c\u5c42\u7684\u5927\u4f6c\u4eec\u6709\u8d2a\u5fc3\u7684\uff0c\u6709\u4e8c\u5206\u7684\uff0c\u751a\u81f3\u8fd8\u6709LCA\u7684\u3002\u3002\u3002\n\n\u7136\u800c\u6211\u4ec0\u4e48\u90fd\u6ca1\u7528\u5230\uff08~~\u5176\u5b9e\u662f\u4e0d\u4f1a~~\uff09\u3002\u3002\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a\n\n1\u3001\u67a2\u7ebd\u4e00\u5b9a\u5728\u76f4\u5f84\u4e0a\u3002\n\n2\u3001\u5982\u679c\u6709\u591a\u6761\u76f4\u5f84\uff0c\u6bcf\u4e00\u6761\u90fd\u662f\u7b49\u6548\u7684\uff0c\u67a2\u7ebd\u5efa\u5728\u4e0d\u540c\u76f4\u5f84\u4e0a\u5bf9\u6700\u957f\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u5e76\u6ca1\u6709\u5f71\u54cd\u3002\n\n3\u3001\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u5230\u67a2\u7ebd\u7684\u8ddd\u79bb\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u957f\u7684\uff08\u6211\u770b\u6709\u7684\u5927\u4f6c\u8bf4\u9519\u4e86\uff09\u3002\n\n3\uff08\u53d8\u5f0f\uff09\u3001\u5f53\u6574\u6761\u76f4\u5f84\u90fd\u4f5c\u4e3a\u67a2\u7ebd\u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u53d8\u6210\u4e86\u975e\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u76f4\u5f84\u7684\u6700\u957f\u8ddd\u79bb\u3002\n\n\u89e3\u91ca\u4e00\u4e0b3\uff1a\n\n\u5bf9\u4e8e\u4ee5\u4e0b\u8fd9\u5f20\u56fe\n\n![sdoi2011](https://cdn.luogu.com.cn/upload/image_hosting/ei2uxiwk.png)\n\n\u5047\u8bbe($x$,6)\u662f\u6811\u7684\u76f4\u5f84\uff0c\u5f53\u524d\u67a2\u7ebd\u5df2\u7ecf\u4ece$x$\u6269\u5c55\u5230\u4e862\u3002\u5bf9\u4e8e2\u6765\u8bf4\uff0c\u79bb\u67a2\u7ebd\u6700\u8fdc\u7684\u70b9\u662f6\uff1b\u4f46\u5f53\u67a2\u7ebd\u6269\u5c55\u52303\uff0c\u79bb\u67a2\u7ebd\u6700\u8fdc\u7684\u70b9\u5c31\u662f\u975e\u76f4\u5f84\u76845\u3002\n\n\u77e5\u9053\u8fd9\u4e9b\u540e\u672c\u9898\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u6211\u4eec\u9996\u5148\u8981\u627e\u51fa\u4e00\u6761\u76f4\u5f84\uff0c\u679a\u4e3e\u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u70b9$u$\u4f5c\u4e3a\u67a2\u7ebd\u7684\u8d77\u70b9\uff0c\u7136\u540e\u5411\u4e0b\u6269\u5c55\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u6700\u8fdc\u7684$v$\u3002\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff08$u$,$v$\uff09\u8ba1\u7b97\u51fa\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u5230$u$\u548c$v$\u7684\u8ddd\u79bb\uff0c\u6700\u540e\u518d\u5bf9\u975e\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u76f4\u5f84\u7684\u6700\u8fdc\u8ddd\u79bb\u53d6\u4e00\u4e2a$max$\u5373\u53ef\u3002\n\nAC\u4ee3\u7801(\u7565\u4e11\u8f7b\u55b7)\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nint n,s,num_edge,head[300008],dis[300008],maxx=-1,x,y,pre[300008],ans;\n\nbool pd[300008];\n\nstruct Edge{\n\tint from,to,dis,next;\n}edge[600008];\n\nlong long read()\n{\n\tlong long x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nvoid addedge(int from,int to,int dis)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].from=from;\n\tedge[num_edge].to=to;\n\tedge[num_edge].dis=dis;\n\thead[from]=num_edge;\n}\n\nvoid dfs(int xx,int fa,int f)//\u5bfb\u627e\u76f4\u5f84 \n{\n\tfor(int i=head[xx];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==fa) continue;\n\t\tif(f) pre[v]=xx;\n\t\tdis[v]=dis[xx]+edge[i].dis;\n\t\tdfs(v,xx,f);\n\t}\n}\n\nint find(int xx,int len)//\u5224\u65ad\u6838\u7684\u5927\u5c0f \n{\n\tfor(int i=head[xx];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==pre[xx]&&len>=edge[i].dis)\n\t\t{\n\t\t\treturn find(v,len-edge[i].dis);\n\t\t}\n\t}\n\treturn xx;\n}\n\nint work(int xx,int len)//\u5bfb\u627e\u6700\u957f\u8ddd\u79bb \n{\n\tint num1=dis[xx],po=find(xx,len);\n\tint num2=dis[x]-dis[po];\n\treturn max(num1,num2);\n}\n\nvoid ask(int xx,int fa)//\u5bfb\u627e\u5176\u4ed6\u70b9\u5230\u76f4\u5f84\u4e0a\u7684\u6700\u5927\u8ddd\u79bb \n{\n\tfor(int i=head[xx];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(pd[v]) continue;\n\t\tif(v==fa) continue;\n\t\tdis[v]=dis[xx]+edge[i].dis;\n\t\task(v,xx);\n\t}\n}\n\nint main()\n{\n\tn=read();s=read();\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint a,b,c;\n\t\ta=read();b=read();c=read();\n\t\taddedge(a,b,c);\n\t\taddedge(b,a,c);\n\t}\n\tdfs(1,0,0);//\u5bfb\u627e\u76f4\u5f84\u4e00\u70b9 \n\tfor(int i=1;i<=n;++i)\n\t\tif(dis[i]>maxx)\n\t\t{\n\t\t\tx=i;\n\t\t\tmaxx=dis[i];\n\t\t}\n\tmaxx=-1;\n\tdis[x]=0;\n\tdfs(x,0,1);//\u5bfb\u627e\u76f4\u5f84\u53e6\u4e00\u70b9 \n\tfor(int i=1;i<=n;++i)\n\t\tif(dis[i]>maxx)\n\t\t{\n\t\t\tmaxx=dis[i];\n\t\t\ty=i;\n\t\t}\n\tmemset(dis,0,sizeof(dis));\n\tint now=y;\n\tdis[now]=0;\n\tpd[now]=1;\n\twhile(now!=x)//\u5904\u7406\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u5230y\u7684\u8ddd\u79bb \n\t{\n\t\tfor(int j=head[now];j;j=edge[j].next)\n\t\t{\n\t\t\tint v=edge[j].to;\n\t\t\tif(v==pre[now])\n\t\t\t{\n\t\t\t\tpd[v]=1;\n\t\t\t\tdis[v]=dis[now]+edge[j].dis;\n\t\t\t}\n\t\t}\n\t\tnow=pre[now];\n\t}\n\tnow=y;\n\tint ans=1e9;\n\twhile(now!=x)//\u5904\u7406\u76f4\u5f84\u7aef\u70b9\u7684\u8ddd\u79bb\n\t{\n\t\tans=min(ans,work(now,s));\n\t\tnow=pre[now];\n\t}\n\tans=min(ans,work(x,s));\n\tmemset(dis,0,sizeof(dis));\n\tnow=y;\n\twhile(now!=x)//\u5904\u7406\u5176\u4ed6\u70b9\u5230\u76f4\u5f84\u7684\u8ddd\u79bb \n\t{\n\t\task(now,0);\n\t\tnow=pre[now];\n\t}\n\task(x,0);\n\tfor(int i=1;i<=n;++i)\n\t\tans=max(ans,dis[i]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n\u6700\u540e\u5077\u5077\u544a\u8bc9\u4f60\u4eec\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u6bcf\u4e00\u4e2a\u6570\u636e\u7684$s$\u90fd\u5927\u4e8e\u76f4\u5f84\u7684\u603b\u957f\u5ea6\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5bfb\u627e\u975e\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u76f4\u5f84\u7684\u6700\u8fdc\u8ddd\u79bb\u4e86\uff0c\u4e24\u4e2a$dfs$\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\n",
        "postTime": 1571880543,
        "uid": 107651,
        "name": "\u98de\u96ea\u8fde\u5929",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "/\\*\n%20\u7684\u6570\u636e\u662f\u6811\u7f51\u7684\u6838\uff0c\u76f4\u63a5O(n^3)\uff0c\u600e\u4e48\u66b4\u529b\u600e\u4e48\u6253\u3002\n\n%50\u7684\u8bdd\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u641e\uff0c\u80fd\u60f3\u51fa50\uff0c\u6b63\u89e3\u5e94\u8be5\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\u3002\n\n\u7136\u540e\u6b63\u89e3\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u9700\u8981\u9009\u7684\u8def\u5f84\u7684\u6240\u6709\u8fb9\u90fd\u5728\u76f4\u5f84\u4e0a\u662f\u6700\u4f18\u7684\u3002\n\n\u56e0\u4e3a\u79bb\u6811\u4e0a\u4efb\u610f\u4e00\u70b9\u6700\u8fdc\u7684\u70b9\u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u7684\u8def\u5f84\u8981\u4e0e\u76f4\u5f84\u76f8\u4ea4\u4e0a\u624d\u4f1a\u4ea7\u751f\u6700\u4f18\u89e3\uff0c\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6574\u6761\u8def\u5f84\u90fd\u5728\u76f4\u5f84\u4e0a\u6700\u4f18\uff0c\n\n\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u68f5\u6811\uff0c\n\n\u5c06\u76f4\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6211\u4eec\u8981\u9009\u7684\u8def\u5f84\u4e0a\u7684\u4e00\u70b9\uff0c\n\n\u6211\u4eec\u8981\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u4e2d\u5fc3\u6269\u5c55\u51fa\u4e00\u6761\u8def\u5f84\uff0c\n\n\u79bb\u8fd9\u4e2a\u70b9\u6700\u8fdc\u7684\u70b9\u4e00\u5b9a\u662f\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u5f53\u524d\u7684\u6700\u5927\u503c\u5c31\u662f\u8fd9\u4e2a\u957f\u5ea6\u3002\n\n\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u9009\u7684\u4e00\u6761\u8fb9\u4e0d\u5728\u76f4\u5f84\u4e0a\uff0c\u5e76\u4e0d\u4f1a\u66f4\u65b0\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\n\n\u8fd9\u6837\u5373\u4f7f\u4e0d\u80fd\u7ee7\u7eed\u5728\u76f4\u5f84\u4e0a\u5ef6\u957f\uff0c\u4e5f\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\uff0c\n\n\u4e8e\u662f\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u5c06\u6574\u6761\u8def\u5f84\u90fd\u653e\u5728\u76f4\u5f84\u4e0a\uff0c\n\n\u4f46\u662f\u8fd9\u4e9b\u4e0d\u5728\u76f4\u5f84\u4e0a\u7684\u8def\u5f84\u7684\u957f\u5ea6\u4e0d\u80fd\u5ffd\u7565\uff0c\u9700\u8981\u8fdb\u884c\u5904\u7406\uff0c\n\n\u60f3\u901a\u4e86\u8fd9\u4e9b\uff0c\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u7528\u4e24\u904dbfs\u6c42\u51fa\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u518d\u628a\u6574\u6761\u76f4\u5f84\u627e\u51fa\u6765\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u76f4\u5f84\u4e0a\u7684\u70b9\u6211\u4eec\u505a\u4e00\u6b21dfs\uff0c\u6c42\u51fa\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u7684\u4ee5\u8fd9\u4e2a\u70b9\u6e90\u7684\u8def\u5f84\u7684\u6700\u5927\u957f\u5ea6\uff0c\u4e00\u8d77\u53d6\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u7b54\u6848\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u770b\u4e0a\u53bb\u662fO(N^2)\uff0c\u800c\u5b9e\u9645\u4e0a\u6211\u4eec\u5bf9\u4e8e\u6574\u68f5\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u53ea\u4f1a\u8dd1\u4e00\u6b21\uff0c\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\u3002\n\n\u6700\u540e\u6211\u4eec\u518d\u4ee5\u4e4b\u524d\u6c42\u5f97\u7684\u6700\u5927\u503c\u4e3a\u5de6\u7aef\u70b9\uff0c\u76f4\u5f84\u7684\u957f\u5ea6\u4e3a\u53f3\u7aef\u70b9\uff0c\u4e8c\u5206\u7b54\u6848\uff0c\u5c31\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5f97\u51fa\u7ed3\u679c\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u5199\u7684\u6709\u70b9\u4e11\n\n\\*/\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+20;\nint a[N],to[N*2],nex[N*2],w[N*2],b[N],c[N];\nint ll,rr,l,r;\nint bfs(int x)\n{\n    memset(c,0,sizeof(c));//\u4e24\u904dbfs\u6c42\u51fa\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\n    b[1]=x;\n    int head=0,tail=1;\n    int ans,s=0;\n    while(head!=tail)\n    {\n        head++;\n        for(int i=a[b[head]];i;i=nex[i])\n        {\n            if(!c[to[i]]&&to[i]!=x)\n            {\n                int y=to[i];\n                tail++;\n                c[y]=c[b[head]]+w[i];\n                b[tail]=y;\n                if(c[y]>s)\n                {\n                    s=c[y];\n                    ans=y;\n                }\n            }\n        }\n    }\n    return ans;\n}\nvoid dfs(int s1,int s2,int x,int t)//\u5bf9\u4e8e\u6bcf\u4e2a\u76f4\u5f84\u4e0a\u7684\u70b9dfs\u4e00\u6b21\uff0c\u6c42\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u7684\u8def\u5f84\u6700\u5927\u957f\u5ea6\n{\n    l=max(l,t);\n    for(int i=a[x];i;i=nex[i])\n    {\n        if(to[i]!=s1&&to[i]!=s2)\n        {\n           dfs(x,x,to[i],t+w[i]);\n        }\n    }\n}\nvoid _dfs(int fa,int x,int y,int t,int s)//\u627e\u51fa\u76f4\u5f84\u5e76\u5bf9\u76f4\u5f84\u8def\u5f84\u957f\u5ea6\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u65b9\u4fbf\u4ee5\u540e\u5904\u7406\u3002\n{\n    if(x==y)\n    {\n        b[0]=t;\n        b[t]=s;\n        r=s;\n        return;\n    }\n    for(int i=a[x];i;i=nex[i])\n    {\n        if(fa!=to[i])\n        {\n            _dfs(x,to[i],y,t+1,s+w[i]);\n            if(b[0])\n            {\n                b[t]=s;\n                dfs(fa,to[i],x,0);\n                return;\n            }\n        }\n    }\n}\nbool pd(int t,int s)//\u5224\u65ad\u7b54\u6848\u662f\u5426\u53ef\u884c\u3002\u56e0\u4e3a\u7b54\u6848\u7684\u5de6\u7aef\u70b9\u5c31\u662f\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u7684\u6700\u5927\u8def\u5f84\u957f\uff0c\u6240\u4ee5\u53ea\u9700\u518d\u76f4\u5f84\u4e0a\u9a8c\u8bc1\u5373\u53ef\u3002\n{\n    int i,j;\n    for(i=1;i<=b[0];++i)\n    {\n        if(b[i]>t)\n        break;\n    }\n    i--;\n    for(j=i;j<=b[0];++j)\n    {\n        if(b[j]-b[i]>s)\n        break;\n    }\n    j--;\n    return b[b[0]]-b[j]<=t;\n}\nint main()\n{\n    int n,s;\n    scanf(\"%d%d\",&n,&s);\n    for(int i=1,t=0;i<n;++i)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);//\u5b58\u8fb9\n        nex[++t]=a[x];\n        to[t]=y;\n        w[t]=z;\n        a[x]=t;\n        nex[++t]=a[y];\n        to[t]=x;\n        w[t]=z;\n        a[y]=t;\n    }\n    ll=bfs(1);\n    rr=bfs(ll);\n    _dfs(0,ll,rr,1,0);\n    while(l!=r)//\u4e8c\u5206\u7b54\u6848\n    {\n        int mid=(l+r)>>1;\n        if(pd(mid,s))r=mid;\n        else\u3000l=mid+1;\n    }\n    cout<<l;\n    return 0;\n}\n```",
        "postTime": 1510215373,
        "uid": 63348,
        "name": "Cqdnse",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\n## \u77e5\u8bc6\u70b9 : \u6811\u7684\u76f4\u5f84, \u5355\u8c03\u961f\u5217 \n\n### [\u539f\u9898\u9762](https://www.luogu.org/problem/P2491)\n\n[P1099 \u6811\u7f51\u7684\u6838](https://www.luogu.org/problem/P1099) \u7684 \u6570\u636e\u52a0\u5f3a\u7248 \n\n\n### \u9898\u76ee\u8981\u6c42 : \n\n>\u7ed9\u5b9a\u4e00\u68f5\u6811 ,  \u8fb9\u6709\u8fb9\u6743  \n>\u6c42\u4e00\u6761 **\u8fb9\u957f\u5ea6\u548c $\\le s$ \u7684\u8def\u5f84** ,   \n>\u4f7f\u5176\u4ed6\u6240\u6709\u70b9 \u5230\u8fd9\u6761\u8def\u5f84\u7684\u8ddd\u79bb\u7684 \u6700\u5927\u503c\u6700\u5c0f . \n\n### \u5206\u6790\u9898\u610f :   \n\n- \u5bf9\u4e8e\u6811\u7684\u76f4\u5f84 , \u6709\u4e00 \u6027\u8d28 :     \n  \u5bf9\u4e8e \u4efb\u610f\u6811\u4e0a\u7684\u8282\u70b9 ,  \u8ddd\u79bb\u5176\u6700\u8fdc\u7684\u70b9 \u4e00\u5b9a\u4e3a\u6811\u7684\u76f4\u5f84\u7684\u7aef\u70b9  \n  - \u8bc1\u660e : \u8be6\u89c1\u6b64\u7bc7\u535a\u5ba2 : [\u6811\u7684\u76f4\u5f84 - Luckyblock - \u535a\u5ba2\u56ed](https://www.cnblogs.com/luckyblock/p/11686641.html)  \n\t\n  - \u5219\u53ef \u5148\u6c42\u5f97\u6811\u7684\u76f4\u5f84, \u5e76\u8bb0\u5f55\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u70b9   \n  \t\u7531\u4e8e\u8981\u8bb0\u5f55\u8def\u5f84 , \u4f7f\u7528 $\\text{DFS}$ \u5904\u7406\u8f83\u4e3a\u5bb9\u6613   \n  \t\u4e4b\u540e\u5c31\u53ef\u4ee5 \u679a\u4e3e\u6811\u7684\u76f4\u5f84\u4e0a \u957f\u5ea6 $\\le s$ \u7684\u5408\u6cd5\u533a\u95f4    \n\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a \u5408\u6cd5\u533a\u95f4  ,    \n  \u5982\u4f55\u6c42\u5f97 \u5176\u4ed6\u6240\u6709\u70b9 \u5230\u8fd9\u6761\u8def\u5f84\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c ?   \n  \u5bf9\u8def\u5f84\u5916\u7684\u70b9 \u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba :   \n  \n  1. \u5bf9\u4e8e\u5728\u76f4\u5f84\u4e0a\u7684\u70b9 ,    \n  \t \u663e\u7136, \u76f4\u5f84\u7684\u7aef\u70b9 \u8ddd\u79bb\u6b64\u533a\u95f4\u7684\u7aef\u70b9\u7684\u8ddd\u79bb, \u6bd4\u975e\u7aef\u70b9\u8fdc   \n\t\n\t \u5219\u53ea\u9700\u8003\u8651 \u76f4\u5f84\u4e24\u7aef\u70b9 \u5230\u8fbe\u533a\u95f4\u5bf9\u5e94\u4e24\u7aef\u70b9\u7684 \u8ddd\u79bb    \n     \u53ef\u4ee5\u5bf9 \u76f4\u5f84\u4e0a\u7684\u70b9\u4f7f\u7528\u524d\u7f00\u548c \u7ef4\u62a4\u5230\u8fbe\u4e24\u7aef\u70b9\u7684\u8ddd\u79bb , \u6765\u505a\u5230 $O(1)$ \u67e5\u8be2 \n\t\n  2. \u5bf9\u4e8e\u5728\u76f4\u5f84\u5916\u7684\u70b9 ,  \n  \t \u663e\u7136, \u5f53\u76f4\u5f84\u4e0a \u4e0e\u5176\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9 \u5728\u533a\u95f4\u5185\u65f6 , \u624d\u6709\u53ef\u80fd \u505a\u51fa\u8d21\u732e   \n\t \u5426\u5219 \u9009\u62e9\u76f4\u5f84\u7684\u7aef\u70b9 \u5fc5\u7136\u6bd4\u9009\u62e9\u5b83\u66f4\u4f18   \n\t\n\t  \u5219\u53ef\u4ee5\u7ef4\u62a4 **\u4ece\u5404\u76f4\u5f84\u70b9 , \u4e0d\u7ecf\u8fc7\u76f4\u5f84\u5176\u4ed6\u70b9, \u80fd\u5230\u8fbe\u7684\u70b9\u7684 \u6700\u8fdc\u8ddd\u79bb**   \n\t\n  \n-  \u5728\u679a\u4e3e\u533a\u95f4\u65f6 \u9700\u8981\u7ef4\u62a4 **\u8ddd\u9009\u62e9\u8def\u5f84\u4e0a\u7684\u70b9 \u6700\u8fdc\u7684 \u76f4\u5f84\u5916\u7684\u70b9**      \n   \u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u6700\u503c\u95ee\u9898 , \u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4   \n\n### \u7b97\u6cd5\u5b9e\u73b0 :\n\n1. \u5148\u4f7f\u7528 $\\text{DFS}$ \u6c42\u5f97\u76f4\u5f84\u4e0a\u7684\u70b9      \n   \u53ef\u4ee5\u901a\u8fc7 \u6c42\u5f97\u4e24\u7aef\u70b9, \u7136\u540e\u8bb0\u5f55\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7684\u524d\u9a71, \u6765\u8bb0\u5f55\u8def\u5f84\n\n2. \u4f7f\u7528 $\\text{BFS}$ \u6c42\u5f97 **\u4ece\u5404\u76f4\u5f84\u70b9 , \u4e0d\u7ecf\u8fc7\u76f4\u5f84\u5176\u4ed6\u70b9, \u80fd\u5230\u8fbe\u7684\u70b9\u7684 \u6700\u8fdc\u8ddd\u79bb**  \n   - \u5148\u5c06\u76f4\u5f84\u4e0a\u7684\u70b9 \u52a0\u5165\u961f\u5217, \u7136\u540e\u5411\u5916\u8fdb\u884c\u6269\u5c55   \n   - \u7531\u4e8e\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4 \u53ea\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84 ,    \n     \u5219\u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u8fdb\u884c\u6269\u5c55, \u6269\u5c55\u5230\u7684\u6700\u8fdc\u7684\u70b9, \u4e00\u5b9a\u4e3a **\u4ece\u6b64\u70b9, \u4e0d\u7ecf\u8fc7\u76f4\u5f84\u5176\u4ed6\u70b9, \u80fd\u5230\u8fbe\u7684\u70b9\u7684 \u6700\u8fdc\u8ddd\u79bb**\n\n3. \u4f7f\u7528\u5355\u8c03\u961f\u5217, \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4, \u5e76\u53d6\u5f97\u6700\u4f18\u89e3\n    - \u56fa\u5b9a\u5de6\u7aef\u70b9, \u627e\u5230\u5408\u6cd5\u7684\u53f3\u7aef\u70b9 ,  \n\t  \u5e76\u7ef4\u62a4 \u961f\u5217\u4e2d\u7684 **\u8ddd\u9009\u62e9\u8def\u5f84\u4e0a\u7684\u70b9 \u6700\u8fdc\u7684 \u76f4\u5f84\u5916\u7684\u70b9**  \n\t\n\t- \u5c06\u961f\u9996\u5143\u7d20 \u4e0e \u8be5\u533a\u95f4\u7aef\u70b9\u4e0e\u76f4\u5f84\u7aef\u70b9\u7684\u8ddd\u79bb \u8fdb\u884c\u6bd4\u8f83, \u6700\u5927\u503c\u5373\u8be5\u5408\u6cd5\u533a\u95f4\u7684 \u7b54\u6848    \n\t  \u53d6\u6700\u5c0f\u7684 \u5408\u6cd5\u533a\u95f4\u7b54\u6848 \u4f5c\u4e3a\u6700\u7ec8\u7b54\u6848\n\t\n\t- \u533a\u95f4\u5de6\u7aef\u70b9 \u53f3\u79fb\n\n---\n\n\u9644\u4ee3\u7801 :\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <ctype.h>\n#include <queue>\n#define int long long\n#define max(a, b) (a > b ? a : b)\n#define min(a, b) (a < b ? a : b)\nconst int INF = 1e15 + 7;\nconst int MARX = 3e5 + 10;\n//=============================================================\nstruct edge\n{\n\tint u, v, w, ne;\n}e[MARX << 1];\nint n, num, s, u, v, head[MARX];//\u5efa\u56fe\u53d8\u91cf\nint dis[MARX], pre[MARX], map[MARX];//\u6c42\u6811\u7684\u76f4\u5f84, dis\u8bb0\u5f55\u8ddd\u79bb,  pre\u8bb0\u5f55\u76f4\u5f84\u4e0a\u70b9\u7684\u524d\u9a71, map\u5b58\u76f4\u5f84\u4e0a\u4e24\u76f8\u90bb\u70b9\u7684\u8ddd\u79bb  \nint ans = 1e15, sum[MARX], dis1[MARX];//sum\u8bb0\u5f55\u76f4\u5f84\u4e0a\u8ddd\u79bb\u7684\u524d\u7f00\u548c, dis1\u8bb0\u5f55\u76f4\u5f84\u4e0a\u70b9i\u5230 \u76f4\u5f84\u5916\u70b9\u7684\u6700\u957f\u8ddd\u79bb \nint que[MARX] = {INF}, t = 0, h = 0;//\u5355\u8c03\u961f\u5217- \n//=============================================================\ninline int read()\n{\n    int s = 1, w = 0; char ch = getchar();\n    for(; ! isdigit(ch); ch = getchar()) if(ch == '-') s  = -1;\n    for(; isdigit(ch); ch = getchar()) w = w * 10 + ch - '0';\n    return s * w;\n}\nvoid add(int u, int v, int w)\n{\n\te[++ num].u = u, e[num].v = v, e[num].w = w;\n\te[num].ne = head[u], head[u] = num;\n}\nvoid dfs(int now, int fat, int sum, bool flag)//dfs\u6c42\u5f97 \u6811\u7684\u76f4\u5f84 \n{\n\tif(flag) pre[now] = fat, map[now] = sum;//\u7b2c\u4e8c\u6b21dfs\u8bb0\u5f55\u8def\u5f84 (\u524d\u9a71 \n\tdis[now] = dis[fat] + sum;//\u66f4\u65b0\u8ddd\u79bb \n\tfor(int i = head[now]; i; i = e[i].ne)\n\t  if(e[i].v != fat) dfs(e[i].v, now, e[i].w, flag);\n}\nvoid get_road()//\u6c42\u5f97 \u6811\u7684\u76f4\u5f84 \n{\n\tdfs(1, 0, 0ll, 0); //\u4e00\u6b21dfs \n\tfor(int i = 1, maxdis = 0; i <= n; i ++)//\u9009\u62e9 \u8ddd\u79bb\u6700\u8fdc\u7684\u70b9 \n\t  if(dis[i] > maxdis) u = i, maxdis = dis[i];\n\tdfs(u, 0, 0ll, 1); //\u4e8c\u6b21dfs \n\tfor(int i = 1, maxdis = 0; i <= n; i ++)//\u9009\u62e9 \u8ddd\u79bb\u6700\u8fdc\u7684\u70b9 \n\t  if(dis[i] > maxdis) v = i, maxdis = dis[i];\n}\nvoid bfs()//bfs\u5904\u7406 \u4ee5\u6bcf\u4e2a\u76f4\u5f84\u4e0a\u7684\u70b9\u4e3a\u8d77\u70b9, \u4e0d\u7ecf\u8fc7\u76f4\u5f84\u4e0a\u5176\u4ed6\u70b9, \u80fd\u5230\u8fbe\u7684\u70b9\u7684 \u6700\u8fdc\u8ddd\u79bb\n{\n\tmemset(dis, 63, sizeof(dis));\n\tstd :: queue <int> q, from;\n\tfor(int i = v; i != 0; i = pre[i]) //\u5c06\u76f4\u5f84\u4e0a\u7684\u70b9\u52a0\u5165 \u961f\u5217 \n\t  q.push(i), from.push(i), dis[i] = 0;\n\t  \n\tfor(; !q.empty();)\n\t{\n\t  int now = q.front(), fr = from.front(); q.pop(), from.pop();\n\t  for(int i = head[now]; i ; i = e[i].ne)//\u679a\u4e3e\u51fa\u8fb9 \n\t    if(dis[e[i].v] >= INF)//\u672a\u88ab\u66f4\u65b0\u8fc7 \n\t    {\n\t      dis[e[i].v] = dis[now] + e[i].w;//\u66f4\u65b0\u6700\u8fdc\u8ddd\u79bb \n\t      dis1[fr] = max(dis1[fr], dis[e[i].v]);\n\t\t  q.push(e[i].v), from.push(fr);\n\t\t}\n\t}\n}\nvoid solve()\n{\n\tpre[n + 1] = v;\n\tfor(int i = n + 1; i != 0; i = pre[i]) //\u9884\u5904\u7406\u524d\u7f00\u548c \n\t  sum[pre[i]] = sum[i] + map[i];\n\t\n\tfor(int l = v, r = v; l != 0 && r != u; l = pre[l])//\u5f53r=u\u65f6\u505c\u6b62\u679a\u4e3e,\u4e4b\u540e\u679a\u4e3e\u7684\u533a\u95f4\u90fd\u4e0d\u5408\u6cd5 \n\t{\n\t  int last = r; ++ h;\n\t  while(sum[r] - sum[l] <= s && r != 0) //\u679a\u4e3e\u53f3\u7aef\u70b9 \n\t  {\n\t  \tlast = r, r = pre[r];\n\t  \tif(r != 0 && sum[r] - sum[l] <= s)//\u5355\u8c03\u961f\u5217\u66f4\u65b0 \n\t  \t{\n\t  \t  for(;dis1[r] >= que[t] && t >= h;) t--;\n\t  \t  que[++ t] = dis1[r];\t\n\t\t}\n\t  }\n\t  if(r == 0 || sum[r] - sum[l] > s) r = last;//\u8d8a\u754c\u5904\u7406 \n\t  \n\t  int now = max(sum[l] , sum[u] - sum[r]);//\u66f4\u65b0\u7b54\u6848 \n\t  now = max(now, que[h]);\n\t  ans = min(now, ans);\n\t}\n}\n//=============================================================\nsigned main()\n{\n\tn = read(), s = read();\n\tfor(int i = 1; i < n ;i ++)\n\t{\n\t  int u1 = read(), v1 = read(), w1 = read();\n\t  add(u1, v1, w1), add(v1, u1, w1);\n\t}\n\tget_road(); bfs(); solve();\n\tprintf(\"%lld\", ans);\n}\n```",
        "postTime": 1572566352,
        "uid": 186186,
        "name": "\u7075\u4e4c\u8def\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\u8868\u793a\u5e76\u6ca1\u6709\u60f3\u5230\u6700\u4f18\u89e3\u4e00\u5b9a\u5728\u6811\u7684\u76f4\u5f84\u4e0a\u3002\n\n\u9996\u5148\u8003\u8651\u4e8c\u5206\uff0c\u4e8c\u5206\u5b8c\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u80fd\u5426\u9009\u51fa\u4e00\u6761\u957f\u5ea6$\\le s$\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u70b9\u5230\u8fd9\u6761\u8def\u5f84\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7$x$\uff1f\n\n\u8003\u8651\u7528DP\u6765\u6c42\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ee4$f[i]$\u8868\u793a\u5728$i$\u7684\u5b50\u6811\u4e2d\u9009\u51fa\u4e00\u6761\u94fe\uff0c\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u662f$i$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c$g[i]$\u8868\u793a\u5728$i$\u7684\u5b50\u6811\u4e2d\u9009\u51fa\u4e00\u6761\u94fe\uff0c\u8fd9\u6761\u94fe\u7684LCA\u662f$i$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u90a3\u4e48\u600e\u4e48\u8f6c\u79fb\u5462\uff1f\u8003\u8651\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/60601.png)\n\n\u6211\u4eec\u8bbe$maxd[i]$\u8868\u793a$i$\u7684\u5b50\u6811\u5185\u90e8\u6700\u6df1\u7684\u70b9\u7684\u6df1\u5ea6\u3002\n\n1\u3001\u5982\u679c$maxd[node]-dep[node]\\le x\\&maxd[to]-dep[node]\\le x$\uff0c\u90a3\u4e48$f[node]=0$\u3002\n\n2\u3001\u5426\u5219\uff0c\u5982\u679c$maxd[node]-dep[node]\\le x$\uff0c\u90a3\u4e48$f[node]=f[to]+w(node,to)$\u3002\n\n3\u3001\u5426\u5219\uff0c\u5982\u679c$maxd[to]-dep[node]\\le x$\uff0c\u90a3\u4e48$f[node]$\u4e0d\u53d8\u3002\n\n4\u3001\u5426\u5219\uff0c$f[node]=\\inf$\uff0c\u8fd9\u65f6\u5982\u679c$g[node]$\u8fd8\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48$g[node]=f[node]+f[to]+w(node,to)$\uff0c\u5426\u5219$g[node]=\\inf$\u3002\n\n\u81f3\u4e8e\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5230\u8fbe\u6bcf\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u7edf\u8ba1\u8fd9\u4e2a\u8282\u70b9\u4e0a\u65b9\u7684\u6240\u6709\u70b9\u5230\u5b83\u7684\u6700\u957f\u8ddd\u79bb\u662f\u5426$\\le x$\uff0c\u5982\u679c\u662f\u5c31\u7528$g[node]$\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u70b9\u95ee\u9898\uff0c\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u662f300000\uff0c\u8fd9\u4e48\u5199\u5b9e\u73b0\u4e0d\u597d\u7684\u8bdd\u53ef\u80fd\u4f1aT\uff08\u6781\u9650\u6570\u636e1.9s\uff09\uff0c\u5e38\u6570\u4f18\u5316\u6280\u5de7\u5982\u4e0b\uff1a\n\n1\u3001\u5148\u628a\u8282\u70b9\u6309\u7167dfn\u6392\u5e8f\uff0c\u8fd9\u6837\u4e8c\u5206\u5b8c\u540e\u5c31\u4e0d\u7528dfs\u4e86\uff0c\u9012\u5f52\u8f6c\u8fed\u4ee3\u3002\uff08\u4f18\u5316\u81f31.1s\uff09\n\n2\u3001\u4e8c\u5206\u4e0a\u754c\u53ef\u4ee5\u8bbe\u5230\u6811\u7684\u76f4\u5f84\u800c\u4e0d\u662f$10^9$\u3002\uff08\u4f18\u5316\u81f30.7s\uff09\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u5f00\u5fc3\u5fc3\u7684AC\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct Edge\n{\n\tint to;\n\tint nxt;\n\tint len;\n}e[600005];\nint n,m,edgenum,head[300005],pa[300005],dep[300005],maxd[300005],f[300005],g[300005];\nint up[300005],max1[300005],max2[300005],ans,p[300005],maxx;\nvoid add(int u,int v,int l)\n{\n\te[++edgenum].len=l;\n\te[edgenum].to=v;\n\te[edgenum].nxt=head[u];\n\thead[u]=edgenum;\n}\nint ind;\nvoid dfs1(int node)\n{\n\tmax1[node]=max2[node]=0;\n\tp[++ind]=node;\n\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t{\n\t\tint to=e[hd].to;\n\t\tif(to==pa[node])continue;\n\t\tdep[to]=dep[node]+e[hd].len;\n\t\tpa[to]=node;\n\t\tdfs1(to);\n\t\tif(max1[to]+e[hd].len>max1[node])\n\t\t{\n\t\t\tmax2[node]=max1[node];\n\t\t\tmax1[node]=max1[to]+e[hd].len;\n\t\t}\n\t\telse if(max1[to]+e[hd].len>max2[node])\n\t\t\tmax2[node]=max1[to]+e[hd].len;\n\t}\n\tmaxx=max(maxx,max1[node]+max2[node]);\n}\nvoid dfs2(int node)\n{\n\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t{\n\t\tint to=e[hd].to;\n\t\tif(to==pa[node])continue;\n\t\tup[to]=up[node]+e[hd].len;\n\t\tif(max1[to]+e[hd].len==max1[node])\n\t\t  up[to]=max(up[to],max2[node]+e[hd].len);\n\t\telse up[to]=max(up[to],max1[node]+e[hd].len);\n\t\tdfs2(to);\n\t}\n}\nbool check(int x)\n{\n\tans=1000000000;\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tint node=p[i];\n\t\tmaxd[node]=dep[node];\n\t\tf[node]=g[node]=0;\n\t\tfor(int hd=head[node];hd;hd=e[hd].nxt)\n\t\t{\n\t\t\tint to=e[hd].to;\n\t\t\tif(to==pa[node])continue;\n\t\t\tif(maxd[node]-dep[node]<=x&&maxd[to]-dep[node]<=x)f[node]=0;\n\t\t\telse if(maxd[node]-dep[node]<=x)f[node]=f[to]+e[hd].len;\n\t\t\telse if(maxd[to]-dep[node]<=x);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(g[node]==0)g[node]=f[node]+f[to]+e[hd].len;\n\t\t\t\telse g[node]=1000000000;\n\t\t\t\tf[node]=1000000000;\n\t\t\t}\n\t\t\tmaxd[node]=max(maxd[node],maxd[to]);\n\t\t}\n\t\tif(maxd[node]-dep[node]<=x)f[node]=0;\n\t\tif(g[node]==0)g[node]=f[node];\n\t\tif(up[node]<=x)ans=min(ans,g[node]);\n\t}\n\treturn ans<=m;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v,l;\n\t\tscanf(\"%d%d%d\",&u,&v,&l);\n\t\tadd(u,v,l);\n\t\tadd(v,u,l);\n\t}\n\tdfs1(1);\n\tdfs2(1);\n\tint l=0,r=maxx;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",l);\n\treturn 0;\n}\n```",
        "postTime": 1560215166,
        "uid": 54214,
        "name": "wucstdio",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2491)\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n\u6811\u7684\u76f4\u5f84\u3001\u5c3a\u53d6\u6cd5\uff08\u8815\u52a8\u533a\u95f4\uff09\u3002\n\n## \u7b80\u8ff0\u9898\u610f\n\n\u5728\u6811\u4e0a\u627e\u4e00\u70b9\u4f7f\u5176\u4ed6\u6240\u6709\u70b9\u5230\u4ed6**\u8ddd\u79bb\u6700\u957f**\u7684**\u6700\u5c0f\u503c**\uff0c\u6c42\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\n## \u7b80\u8ff0\u7b97\u6cd5\n\n1. \u6c42\u51fa\u6811\u7684\u76f4\u5f84\u3002\n\n2. \u901a\u8fc7\u5c3a\u53d6\uff0c\u6c42\u51fa\u6ee1\u8db3 $s$ \u8981\u6c42\u7684 $i$,$j$\uff0c\u5e76\u6c42\u51fa\u76f4\u5f84\u4e0a $i$\uff0c$j$ \u5230\u4e24\u7aef\u7684\u8ddd\u79bb\u7684**\u6700\u5927\u503c**\u3002\n\n3. \u6807\u8bb0\u76f4\u5f84\u4e0a\u7684\u70b9\u3002\n\n4. \u6c42\u51fa\u5176\u5b83\u70b9\u5230\u76f4\u5f84\u4e0a\u70b9\u7684\u8ddd\u79bb\u3002\n\n5. \u6240\u6709\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n## \u5177\u4f53\u9610\u8ff0\n\n\u9996\u5148\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u67a2\u7ebd\u4e00\u5b9a\u5728\u6811\u7684**\u76f4\u5f84**\u4e0a\uff08\u82e5\u6709\u591a\u6761\u4efb\u9009\u4e00\u6761\u4e0d\u5f71\u54cd\uff09\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u4e24\u6b21 dfs \u6c42\u51fa\u76f4\u5f84\u3002\n\n```cpp\nvoid dfs(ll x,ll ff){\n\tfa[x]=ff;\n\tif(dis[x]>dis[k]) k=x;\n\tfor(ll i=hd[x];i;i=es[i].nxt){\n\t\tll to=es[i].t;\n\t\tif(to==ff||line[to]) continue;\n\t\tdis[to]=dis[x]+es[i].va;\n\t\tdfs(to,x);\n\t}\n}\n```\n\n\u6211\u4eec\u5148\u5904\u7406\u8fd9\u6761\u76f4\u5f84\u3002\n\n\u91c7\u7528**\u5c3a\u53d6\u6cd5\uff08\u8815\u52a8\u533a\u95f4\uff09**\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5728\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u4f18\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff08\u6709\u70b9\u7ed5\uff09\u3002\n\n### \u5177\u4f53\u64cd\u4f5c\n\n\u4ece\u4e00\u7aef\u5f00\u59cb\uff0c\u6bcf\u6b21 $i$ \u5411\u53e6\u4e00\u7aef\u79fb\u52a8\u4e00\u6b21\u3002\n\n\u6211\u4eec\u53e6\u4ece\u8fd9\u4e00\u7aef\u53d6\u4e00\u4e2a $j$\u3002\n\n\u6bcf\u6b21\u53ea\u8981 $dis_{i,j}>s$\uff0c\u6211\u4eec\u5c31\u8ba9 $j$ \u79fb\u52a8\u3002\n\n\u6211\u4eec\u7528 $j$ \u5230**\u51fa\u53d1\u70b9**\u7684\u8ddd\u79bb\u548c $i$ \u5230**\u7ed3\u675f\u70b9**\u7684\u8ddd\u79bb\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\u3002\n\n```cpp\n\tfor(ll i=top,j=top;i;i=fa[i]){\n\t\twhile(dis[j]-dis[i]>s) j=fa[j];\n\t\tans=min(ans,max(dis[i],dis[top]-dis[j]));\n\t}\n```\n\n\u7136\u540e\u5176\u5b9e\u8fd8\u6709\u53ef\u80fd\u6700\u8fdc\u8ddd\u79bb\u5728**\u76f4\u5f84\u4ee5\u5916**\u7684\u70b9\u4e0a\u3002\n\n\u6211\u4eec\u5c31\u5bf9\u76f4\u5f84\u4e0a\u6bcf\u4e2a\u70b9\u8fdb\u884c\u641c\u7d22\u3002\n\n\u6bcf\u6b21\u6807\u8bb0\u597d\uff0c**\u4e0d\u91cd\u590d**\u641c\u7d22\u3002\n\n\u6700\u540e\u66f4\u65b0\u7b54\u6848\u3002\n\n```cpp\n\tfor(ll i=top;i;i=fa[i]) line[i]=1;\n\tfor(ll i=top;i;i=fa[i]){\n\t\tk=i;dis[k]=0;\n\t\tdfs(i,fa[i]);\n\t}\n\tfor(ll i=1;i<=n;i++) ans=max(ans,dis[i]);\n```\n\n## \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u6bcf\u4e2a\u73af\u8282\u90fd\u662f $O(n)$ \u7684\uff0c\u603b\u590d\u6742\u5ea6 $O(n)$\u3002\n\n## \u4e0a\u4ee3\u7801\n\n```cpp\n/*\n***\n\u8fd8\u8981\u7ee7\u7eed\u52aa\u529b\n\u6210\u4e3a\u4e00\u540d\u70e4\u5495\u5b66\u5bb6\u54e6\n***\n*/\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll N=1e6+5;\nll n,s,tot,hd[N],cnt,dis[N],ans=9999999999,top,k,fa[N],line[N];\nstruct edge{ll t,nxt,va;}es[N<<2];\ntemplate <typename T> void rd(T &x){\n\tll fl=1;x=0;char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') fl=-fl;\n\tfor(;isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n\tx*=fl;\n}\nvoid wr(ll x){\n\tif(x<0) x=-x,putchar('-');\n\tif(x<10) putchar(x+'0');\n\tif(x>9) wr(x/10),putchar(x%10+'0');\n}\nvoid add(ll u,ll v,ll w){\n    es[++tot]=(edge){v,hd[u],w},hd[u]=tot;\n}\nvoid dfs(ll x,ll ff){\n\tfa[x]=ff;\n\tif(dis[x]>dis[k]) k=x;\n\tfor(ll i=hd[x];i;i=es[i].nxt){\n\t\tll to=es[i].t;\n\t\tif(to==ff||line[to]) continue;\n\t\tdis[to]=dis[x]+es[i].va;\n\t\tdfs(to,x);\n\t}\n}\nint main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\trd(n);rd(s);\n\tfor(ll i=1,u,v,w;i<n;i++){\n\t\trd(u);rd(v);rd(w);\n\t\tadd(u,v,w);add(v,u,w);\n\t}\n\tdis[1]=1;dfs(1,0);\n\tdis[k]=0;dfs(k,0);\n\ttop=k;\n\tfor(ll i=top,j=top;i;i=fa[i]){\n\t\twhile(dis[j]-dis[i]>s) j=fa[j];\n\t\tans=min(ans,max(dis[i],dis[top]-dis[j]));\n\t}\n\tfor(ll i=top;i;i=fa[i]) line[i]=1;\n\tfor(ll i=top;i;i=fa[i]){\n\t\tk=i;dis[k]=0;\n\t\tdfs(i,fa[i]);\n\t}\n\tfor(ll i=1;i<=n;i++) ans=max(ans,dis[i]);\n\twr(ans);puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1584150542,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "[SDOI2011]\u6d88\u9632\u9898\u89e3 \u6811\u7684\u76f4\u5f84+\u5c3a\u53d6"
    },
    {
        "content": "\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6761\u8def\u5f84\u5fc5\u7136\u5728\u6811\u7684\u76f4\u5f84\u4e0a\n\n\u81f3\u4e8e\u8bc1\u660e\uff0c\u53ea\u9700\u8981\u5047\u8bbe\u8def\u5f84Q\u4e0d\u5728\u76f4\u5f84\u4e0a\uff0c\u90a3\u4e48\u5047\u8bbe\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\u4e0d\u5728\u76f4\u5f84\u4e0a\uff0c\u6613\u8bc1\u4e0d\u53ef\u80fd\uff0c\u56e0\u6b64\u8ddd\u79bb\u8fd9\u6761\u8def\u5f84Q\u6700\u8fdc\u7684\u70b9\u4e00\u5b9a\u5728\u76f4\u5f84\u4e0a\u3002\n\n\u4e4b\u540e\u518d\u5047\u8bbe\u4e00\u4e2aA\u70b9\u662f\u4e0d\u5728\u76f4\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5047\u8bbe\u76f4\u5f84\u4e0a\u6709\u4e00\u6761\u8def\u5f84P\uff0c\u5982\u679cA\u5230P\u7684\u8ddd\u79bb\u5927\u4e8e\u4e86\u76f4\u5f84\u7684\u7aef\u70b9\u5230Q\u7684\u8ddd\u79bb\uff0c\u663e\u7136\u662f\u77db\u76fe\u7684\uff0c\u56e0\u6b64\u4efb\u610f\u7684A\u70b9\u5230P\u7684\u8ddd\u79bb\u4e00\u5b9a\u5c0f\u4e8e\u76f4\u5f84\u7aef\u70b9\u5230Q\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u5f97\u8bc1\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5148dfs\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u4ece\u76f4\u5f84\u7684\u7aef\u70b9\u5f00\u59cb\u5355\u8c03\u7684\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u4fdd\u8bc1\u4e24\u4e2a\u6307\u9488\u7684\u8ddd\u79bb\u662f\u4e0d\u5927\u4e8es\u5f97\u6700\u5927\u503c\uff0c\uff08\u8fd9\u6837\u7684\u8def\u5f84\u5728\u5de6\u6307\u9488\u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u80af\u5b9a\u662f\u6700\u4f18\u7684\uff09\uff0c\u4e24\u4e2a\u6307\u9488\u4e4b\u95f4\u7684\u8def\u5f84\u5c31\u662f\u5019\u9009\u8def\u5f84\u3002\n\n\u5bf9\u6811\u7684\u76f4\u5f84\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\u3002\n\nls\u8868\u793a\u5de6\u6307\u9488\u5230\u76f4\u5f84\u7aef\u70b9\u7684\u8ddd\u79bb\u3002\n\nrs\u8868\u793a\u53f3\u6307\u9488\u5230\u76f4\u5f84\u7aef\u70b9\u7684\u8ddd\u79bb\u3002\n\nh\u8868\u793a\u5de6\u53f3\u6307\u9488\u4e4b\u95f4\u7684\u70b9\u53ef\u4ee5\u6269\u5c55\u5230\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\n\n\u8fd9\u4e09\u4e2a\u91cf\u90fd\u662f\u53ef\u4ee5\u8fdb\u884c\u5355\u8c03\u6027\u7ef4\u62a4\u7684\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5019\u9009\u8def\u5f84\uff0c\u5176\u4ed6\u6240\u6709\u57ce\u5e02\u5230\u8fd9\u6761\u8def\u5f84\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c=max(ls,rs,h);\n\n\u4e0d\u65ad\u79fb\u52a8\u5de6\u53f3\u6307\u9488\u5c31\u53ef\u4ee5\u5f97\u51fa\u6700\u7ec8\u7b54\u6848\u3002\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<cstring>\nusing namespace std;\nvector<int> a[300001],b[300001];\nint last[300001],op,u,vv,dis[300001];\nint l,r,s1,s2[300001][1],s3,l1,r1;\nbool v[300001],vs[300001];\nvoid dfs1(int o,int p,int q)\n{\n    if(p>op){op=p;u=o;}\n    for(int i=0;i<a[o].size();i++)\n        if((!v[a[o][i]])&&(a[o][i]!=q))\n        {\n            v[a[o][i]]=true;\n            dfs1(a[o][i],p+b[o][i],o);\n        }\n}\nvoid dfs2(int o,int p,int q)\n{\n    last[o]=q;\n    dis[o]=p;\n    if(p>op){op=p;vv=o;}\n    for(int i=0;i<a[o].size();i++)\n        if((!v[a[o][i]])&&(a[o][i]!=q))\n        {\n            v[a[o][i]]=true;\n            dfs2(a[o][i],p+b[o][i],o);\n        }\n}\nint main()\n{\n    int n,s;\n    cin>>n>>s;\n    for(int i=1;i<n;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        a[x].push_back(y);\n        b[x].push_back(z);\n        a[y].push_back(x);\n        b[y].push_back(z);\n    }\n    memset(v,0,sizeof(v));\n    op=0;\n    dfs1(1,0,0);\n    op=0;\n    memset(v,0,sizeof(v));\n    memset(last,0,sizeof(last));\n    dfs2(u,0,0);\n    memset(v,0,sizeof(v));\n    for(int i=vv;last[i]!=0;i=last[i]) v[i]=true;\n    l=vv;l1=r1=s1=0;\n    int ans=1000000000;\n    memset(vs,0,sizeof(vs));\n    for(int i=vv;last[i]!=0;i=last[i])\n    {\n        while((dis[l]-dis[i]>s)&&(l!=i))\n        {\n            vs[l]=true;\n            s1+=dis[l]-dis[last[l]];\n            if(vs[s2[l1][1]]==true) l1++;\n            l=last[l];\n        }\n        op=0;\n        dfs1(i,0,0);\n        int yu=op;\n        while((s2[r1][0]<yu)&&(r1>=l1)) r1--;\n        r1++;\n        s2[r1][0]=yu;\n        s2[r1][1]=i;\n        ans=min(ans,max(max(s2[l1][0],s1),dis[i]));\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1515051659,
        "uid": 79044,
        "name": "\u7834\u58c1\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "#\u672c\u9898\u89e3\u4ec5\u7528\u4e8e\u629b\u849f\u84bb\u5f15\u5927\u4f6c\n\n\u7531\u4e8e\u6211\u592a\u5f31\uff08\u61d2\uff09\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u4ee3\u7801\uff0c\u5e76\u4e14\u53ef\u80fd\u9519\u3002\u3002\u3002\u3002\n\n\u5982\u679c\u9519\u4e86\u8fd8\u8bf7\u5927\u4f6c\u6307\u51fa\n\n\u8fd9\u9053\u9898\u57fa\u672c\u5206\u4e3a\u51e0\u6b65\uff1a\n\n1. \u627e\u5230\u76f4\u5f84\n\n2. \u627e\u5230\u76f4\u5f84\u4e2d\u70b9\u5e76\u52a0\u5165\u5df2\u9009\u961f\u5217\uff08\u5982\u679c\u5728\u8fb9\u4e0a\u5219\u4e24\u8fb9\u7684\u70b9\u90fd\u9009\uff09\n\n3. \u8d2a\u5fc3\uff08\u4e8c\u5206\uff09\n\n\u63a5\u4e0b\u6765\u8be6\u89e3\n\n1\uff1a\n\u968f\u610f\u627e\u4e2a\u70b9\uff0cbfs\u627e\u8ddd\u79bb\u6700\u8fdc\u7684\u90a3\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u80af\u5b9a\u662f\u76f4\u5f84\u4e2d\u7684\u4e00\u70b9\uff0c\u518d\u4ece\u8fd9\u4e2a\u70b9bfs\u4e00\u8fb9\u5c31\u627e\u5230\u53e6\u4e00\u4e2a\u70b9\uff0c\u539f\u56e0\u53ef\u4ee5\u767e\u5ea6\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5b89\u5229\u4e86\n\n2\uff1a\n\u627e\u76f4\u5f84\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u518d\u9000\u56de\u6765\uff0c\u7528bool\u6570\u7ec4\u8bb0\u5f55\u662f\u4e0d\u662f\uff08\u6709\u7528\uff09\uff0c\u5728\u4e0a\u4e00\u6b65\u65f6\u5df2\u7ecf\u62ff\u5230\u4e86\u76f4\u5f84\u957f\uff0c\u6240\u4ee5\u5728\u627e\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u5c31\u6709\u4e2d\u70b9\u4e86\uff0c\u5982\u679c\u8d2a\u5fc3\u7528\u4f18\u5148\u961f\u5217\u5b58\n\n3\uff1a\n\u8fd9\u91cc\u53ea\u8bf4\u8d2a\u5fc3\uff0c\u4e8c\u5206\u5e94\u8be5\u90fd\u4f1a\uff08\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a\uff09\u5148\u4ece\u4e2d\u70b9dfs\u4e00\u8fb9\uff0c\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\u8bb0\u5f55\u5230\u8f83\u8fd1\u7684\u76f4\u5f84\u7aef\u70b9\u7684\u8ddd\u79bb\uff0c\u5176\u4ed6\u70b9\u8bb0\u5f55dfs\u8def\u5f84\u4e0a\u540e\u5230\u8fbe\u4e14\u672a\u56de\u5934\u7684\u53f6\u8282\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u6700\u5927\u503c\uff08\u5927\u6982\u5c31\u662f\u671d\u79bb\u76f4\u5f84\u8d8a\u6765\u8d8a\u8fdc\u7684\u90a3\u8fb9\u4e00\u8def\u8d70\u5230\u5934\u7684\u90a3\u4e2a\u70b9\uff09\uff0c\u5f00\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u8def\u957f\u6216\u5269\u4f59\u53ef\u7528\u8def\u957f\uff08\u5e94\u8be5\u90fd\u77e5\u9053\u5427\uff1f\uff09\u518d\u5f00\u4e00\u4e2abool\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u5df2\u9009\uff08\u6216\u8005\u5229\u7528\u4e0a\u6b65\u7684\u6570\u7ec4\u8bb0\u5f55\u5230\u4e2d\u70b9\u7684\u524d\u7f6e\u8282\u70b9\uff09\uff0c\u6bcf\u6b21\u53d6\u961f\u5934\uff0c\u770b\u770b\u548c\u4e4b\u524d\u90a3\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u7a0b+\u5df2\u7528\u7684\u662f\u4e0d\u662f\u5df2\u8d85\u6700\u5927\u503c\uff0c\u5982\u679c\u662f\u5c31\u8f93\u51fa\u5f53\u524d\u8282\u70b9\u8bb0\u5f55\u7684\u5230\u53f6\u8282\u70b9\u7684\u6700\u5927\u8def\u7a0b\uff08\u89c1\u4e0a\u9762\uff0c\u61d2\u7684\u6253\u5168\u4e86\u3002\u3002\u3002\uff09\u5426\u5219\u5c06\u76f8\u90bb\u672a\u9009\u8282\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6700\u540e\u5224\u4e00\u4e0b\u4f18\u5148\u961f\u5217\u662f\u4e0d\u662f\u7a7a\u4e86\uff0c\u5982\u679c\u7a7a\u4e86\u90fd\u77e5\u9053\u600e\u4e48\u529e\u5427233\n",
        "postTime": 1504788623,
        "uid": 41332,
        "name": "1000001001wj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u81ea\u5df1\u7684\u601d\u8def\u548c\u522b\u4eba\u7684\u4e0d\u592a\u4e00\u6837\u554a\uff1f\uff1f\uff1f\n\u672c\u6765\u53ea\u6253\u7b97\u62ff50%\u7684\u6570\u636e\u7684\uff0c\u7ed3\u679cA\uff1f\uff01\n\n\u611f\u89c9\u81ea\u5df1\u7684\u65b9\u6cd5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u8dd1\u5f97\u6bd4\u5176\u4ed6\u7684\u5de8\u4f6c\u8fd8\u662f\u6162\u4e9b\u3002\n\n\u8fd9\u9053\u9898\u5148\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u7136\u540e\u6211\u4eec\u4ece\u5e95\u90e8\u5f00\u59cb\u5f80\u4e0a\u679a\u4e3e\uff0c\u5f88\u663e\u7136\u7684\u4e00\u4e2a\u8d2a\u5fc3\uff1a**\u56fa\u5b9a\u4e86\u4e00\u4e2a\u7aef\u70b9\u4e4b\u540e\uff0c\u53e6\u4e00\u7aef\u70b9\u8d8a\u8fdc\u8d8a\u597d**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u7aef\u70b9\uff0c\u627e\u5230\u5b83\u7684\u53e6\u4e00\u7aef\u3002\n\u8fd9\u65f6\u5019\u6211\u901a\u8fc7LCA$O(1)$\u6765\u8ba1\u7b97\u8ddd\u79bb\uff0c\u5c31\u53ef\u4ee5\u628a\u6b64\u60c5\u51b5\u7684\u6700\u5927\u8ddd\u79bb\u7528$O(n)$\u5904\u7406\u5f97\u5230\u3002\n\n\u52a0\u4e0a\u524d\u9762\u7684\u8d2a\u5fc3\u601d\u60f3\uff0c\u5c31\u6109\u5feb\u5730AC\u4e86\uff1f\uff1f\uff1f\n\u6b22\u8fce\u8e29\u535a\u5ba2[Frozen_Heart](https://www.cnblogs.com/lsgjcya/p/9236210.html)\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nint read()\n{\n    int x=0,w=1;char ch=getchar();\n    while(ch>'9'||ch<'0') {if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*w;\n}\nint n,s,x,y,z,root,t,l,r,cnt,ans=2000000000,sum;\nint head[300010],dis[300010],f[300010][20],deep[300010],vis[300010];\nstruct node{\n    int to,next,v;\n}edge[600010];\nvoid add(int x,int y,int z)\n{\n    cnt++;\n    edge[cnt].to=y;\n    edge[cnt].next=head[x];\n    edge[cnt].v=z;\n    head[x]=cnt;\n}\nint LCA(int x,int y)\n{\n    if(deep[x]<deep[y]) swap(x,y);\n    for(int i=19;i>=0;i--)\n    {\n        if(deep[f[x][i]]>=deep[y]) x=f[x][i];\n    }\n    if(x==y) return x;\n    for(int i=19;i>=0;i--)\n    {\n        if(f[x][i]!=f[y][i])\n            x=f[x][i],y=f[y][i];\n    }\n    return f[x][0];\n}\nvoid init()\n{\n    for(int i=1;i<=9;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            f[j][i]=f[f[j][i-1]][i-1];\n        }\n    }\n}\nvoid dfs1(int k,int fa)\n{\n    for(int i=head[k];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if(v==fa) continue;\n        dis[v]=dis[k]+edge[i].v;\n        dfs1(v,k);\n    }\n}\nvoid dfs2(int k,int fa)\n{\n    for(int i=head[k];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if(v==fa) continue;\n        dis[v]=dis[k]+edge[i].v;f[v][0]=k;deep[v]=deep[k]+1;\n        dfs2(v,k);\n    }\n}\nint main()\n{\n    n=read();s=read();\n    for(int i=1;i<n;i++)\n    {\n        x=read();y=read();z=read();\n        add(x,y,z);add(y,x,z);\n    }\n    dfs1(1,0);\n    for(int i=1;i<=n;i++)\n    {\n        if(!root||dis[i]>dis[root]) root=i;\n    }\n    memset(dis,0,sizeof(dis));\n    deep[root]=1;dfs2(root,0);\n    for(int i=1;i<=n;i++)\n    {\n        if(!t||dis[i]>dis[t]) t=i;\n    }\n    init();\n    l=t;r=t;vis[t]=1;\n    while(l!=0)\n    {\n        sum=0;\n        if(dis[r]-dis[l]>s)\n        {\n            vis[r]=0;r=f[r][0];vis[r]=1;\n        }\n        else\n        {\n            while(dis[r]-dis[l]<=s&&l!=0) {l=f[l][0];vis[l]=1;}\n            int rlca;\n            for(int i=1;i<=n;i++)\n            {\n                if(vis[i]) continue;\n                int lca1=LCA(l,i),lca2=LCA(r,i);\n                if(deep[lca1]>deep[lca2]) rlca=lca1;\n                else rlca=lca2;\n                if(deep[rlca]<deep[l])\n                {\n                    sum=max(sum,dis[l]+dis[i]-2*dis[rlca]);\n                }\n                else sum=max(sum,dis[i]-dis[rlca]);\n            }\n            ans=min(ans,sum);\n            l=f[l][0];vis[l]=1;\n        }\n    }\n    cout<<ans;\n}\n```",
        "postTime": 1530108737,
        "uid": 45206,
        "name": "Frozen_Heart",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "###### \u5927\u5bb6\u90fd\u597d\u5f3a\u554aQAQ\uff0c\u8fd9\u6b21\u9898\u89e3\u5927\u591a\u770b\u4e86lyd\u7684\u4e66\n\n\n------------------\n\n### P1099 && P2491 \u9898\u89e3\n\n [Luogu\u6811\u7f51\u7684\u6838](https://www.luogu.org/problem/P1099) && [Luogu\u6d88\u9632](https://www.luogu.org/problem/P2491)\n\n\u524d\u6392\u5b89\u5229\u535a\u5ba2,[LuitaryiJack](https://www.cnblogs.com/Jackpei/) && [Chrisk](https://www.cnblogs.com/ChrisKKK/) && [\u55b5\u306e\u8033](https://www.cnblogs.com/gengyf/)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/fallen-down/p/11631117.html)\n\n~~\u8fd9\u6b21\u662f\u771f\u7684\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c~~\n\n\n------------------\n\n\n\n### \u7b80\u5316\u9898\u610f\n\n~~emmmmmm,\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u7b80\u5316\u9898\u610f(\u96fe)~~\n\u4e00\u4e2a\u65e0\u73af\u8054\u901a\u65e0\u5411\u56fe\uff0c\u5b9a\u4e49\u76f4\u5f84\u4e0a\u4e00\u6bb5\u957f\u5ea6\u4e0d\u8d85\u8fc7${S}$\u7684\u8def\u4e3a${F}$(\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u70b9)\uff0c\u5b9a\u4e49\u56fe\u4e2d\u5230${F}$\u7684\u8ddd\u79bb\u6700\u957f\u7684\u4e3a\u504f\u5fc3\u8ddd\u3002\u6c42\u4e00\u4e2a${F}$\uff0c\u4f7f\u5f97\u56fe\u4e0a\u5230${F}$\u7684\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u8ddd\u79bb\n\n### \u5206\u6790~~\u662f\u6284LYD+\u81ea\u5df1\u7406\u89e3\u7684~~\n#### \u521d\u6b65\u7ed3\u8bba\uff1a\n1. \u6811\u7684\u5404\u4e2a\u76f4\u5f84\u4e2d\u70b9\u90fd\u4ea4\u4e8e\u4e00\u70b9\n\n     -   \u8bc1\u660e([@LuitaryiJack](https://www.cnblogs.com/Jackpei/))\uff1a\u5982\u679c\u4e24\u6761\u76f4\u5f84\u6ca1\u6709\u4ea4\u4e8e\u4e00\u70b9\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u4f60\u53ef\u4ee5\u6784\u9020\u4e00\u6761\u76f4\u5f84\uff0c\u957f\u4e3a\u539f\u76f4\u5f84\u7684\u957f\u52a0\u4e0a\u4e24\u4e2a\u4e2d\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6b64\u65f6\u539f\u76f4\u5f84\u5c31\u4e0d\u7b26\u5408\u76f4\u5f84\u7684\u5b9a\u4e49\u3002\u6240\u4ee5\u6811\u7684\u5404\u4e2a\u76f4\u5f84\u4e2d\u70b9\u90fd\u4ea4\u4e8e\u4e00\u70b9\n2. \u4efb\u610f\u4e00\u6761\u76f4\u5f84\u4e0a\u6c42\u51fa\u7684\u6700\u5c0f\u504f\u5fc3\u8ddd\u90fd\u76f8\u7b49\n\n    - \u8bc1\u660e\uff1a\u7531\u7ed3\u8bba${1}$\u53ef\u77e5\uff0c\u6240\u6709\u7684\u76f4\u5f84\u90fd\u4ea4\u4e8e\u4e00\u70b9\u3002\u6240\u4ee5\u5176\u4ed6\u7684\u70b9\u5230\u8fd9\u4e9b\u76f4\u5f84\u7684\u8ddd\u79bb\u5c31\u53ef\u4ee5\u5316\u4e3a\u5230\u4e2d\u70b9\u7684\u8ddd\u79bb\u3002\u53c8\u56e0\u4e3a\u4e2d\u70b9\u90fd\u76f8\u4ea4\u4e8e\u4e00\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4efb\u610f\u4e00\u6761\u76f4\u5f84\u4e0a\u6c42\u51fa\u7684\u504f\u5fc3\u8ddd\u90fd\u662f\u76f8\u7b49\u7684\u3002\n#### \u521d\u6b65\u505a\u6cd5\n1. O(${N^{3}}$)\n   \n   \u5728\u6811\u7f51\u7684\u6838\u8fd9\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u56fe\u7684\u70b9\u6570\u8fc7\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528O(${N^{3}}$)\u7684\u65b9\u6cd5\u6c34\u8fc7\u8fd9\u9053\u9898\u3002\u5373\u66b4\u529b\u679a\u4e3e\uff1a\u5148\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u518d\u5728\u4e0a\u9762\u679a\u4e3eF\uff0c\u7136\u540e\u5728${F}$\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7528${dfs}$\u6c42\u56fe\u4e0a\u5230${F}$\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u518d\u53d6\u6700\u5c0f\u503c\u5373\u53ef\n\n2. O(${N^{2}}$)\n   \n   \u7136\u540e\u8003\u8651\u5bf9\u679a\u4e3e\u66b4\u529b\u8fdb\u884c\u4f18\u5316\u3002\u7531\u4e8e\u8d2a\u5fc3\u53ef\u77e5\uff0c\u5982\u679c\u6bcf\u6b21${F}$\u7684\u9009\u53d6\u8d8a\u957f\uff0c~~\u901a\u8fc7\u611f\u6027\u7406\u89e3~~\u6211\u4eec\u6c42\u7684\u7684\u504f\u5fc3\u8ddd\u5c31\u8d8a\u5c0f\u3002\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u5b9a${F}$\u957f\u4e3a${S}$\uff0c\u7136\u540e\u679a\u4e3e${dfs}$\u6c42\u504f\u5fc3\u8ddd\n\n#### \u4e8c\u7ea7\u7ed3\u8bba\n- \u8fd9\u9898\u6ee1\u8db3\u5355\u8c03\u7684\u6027\u8d28\uff1a\u504f\u5fc3\u8ddd\u8d8a\u5927\uff0c\u53ef\u4ee5\u5f97\u5230\u7684\u70b9\u7684\u4f4d\u7f6e\u8d8a\u96c6\u4e2d\uff0c\u4f7f\u5f97\u7531\u8fd9\u4e9b\u70b9\u6784\u6210\u7684${F}$\u8d8a\u77ed\uff0c\u5373${S}$\u8d8a\u5c0f\n\n   - \u8bc1\u660e\uff1a~~QAQ\u611f\u89c9\u6027\u8d28\u5c31\u662f\u8bc1\u660e\u554a~~\u5728\u4e8c\u5206${mid}$\u4f5c\u4e3a\u504f\u5fc3\u8ddd\u7684\u5927\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\uff1a\n\n      1. \u76f4\u5f84\u4e24\u4e2a\u7aef\u70b9\u4e3a${q}$\u548c${v}$\n      2. \u5728\u76f4\u5f84\u4e0a\uff0c\u79bb${q}$\u6700\u957f\u7684\u4e0d\u8d85\u8fc7${mid}$\u7684\u70b9\u4e3a${p}$\uff0c\u540c\u7406\uff0c${u}$\u662f\u76f8\u5bf9${v}$\u800c\u8a00\u7684\u90a3\u4e2a\u70b9\n   \n   - \u6839\u636e\u76f4\u5f84\u7684\u6700\u957f\u6027\uff0c\u4efb\u4f55\u4ece${p}$\u548c${q}$\u4e4b\u95f4\u7684\u76f4\u5f84\u4e2d\u5206\u53c9\u79bb\u5f00\u7684\u5b50\u6811\uff0c\u5176\u79bb${p}$\u6700\u8fdc\u7684\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc7${mid}$\u3002\n   - \u6240\u4ee5${p}$\u548c${u}$\u5c31\u662f\u5728\u504f\u5fc3\u8ddd\u4e0d\u8d85\u8fc7${mid}$\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u91cf\u9760\u8fd1${F}$\u7684\u70b9\n  \n#### \u4e8c\u7ea7\u505a\u6cd5~~\u4ec0\u4e48\u9b3c\u6807\u9898~~\n\n- O(${NlogSUM}$)\uff0csum\u4e3a\u6811\u7f51\u4e2d\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\n  \n  \u4e8c\u5206${mid}$\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u7ed3\u8bba\u8bc1\u660e\u627e${p}$\u548c${u}$\uff0c\u7136\u540e\u5224\u65ad\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u8d85\u8fc7${S}$\uff0c\u4ee5\u53ca\u79bb${F}$\u6700\u8fdc\u7684\u7684\u70b9\u5230\u8fd9\u4fe9\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u5408\u6cd5\u3002\u82e5\u4e24\u8005\u90fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u4ee3\u8868\u8fd9\u662f\u5408\u6cd5\u7684\n\n#### \u6700\u7ec8\u7684\u505a\u6cd5\n\n- O(${N}$)\n    \n    \u8bbe\u76f4\u5f84\u4e0a\u7684\u8282\u70b9\u4e3a${u_{1},u_{2}.....u_{t}}$\uff0c\u90a3\u4e48\u5148\u548c\u524d\u51e0\u79cd\u505a\u6cd5\u4e00\u6837\uff0c\u628a\u8fd9\u4e9b\u8282\u70b9\u6807\u8bb0\u4e3a\u5df2\u7ecf\u8bbf\u95ee\uff0c\u7136\u540e\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6c42${d[u_{i}]}$\uff0c\u542b\u4e49\u4e3a\u4ece${u_{i}}$\u51fa\u53d1\uff0c\u4e0d\u7ecf\u8fc7\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\u663e\u7136\uff0c\u504f\u5fc3\u8ddd\u8981\u4e48\u5c31\u662f\u7531\u7ed3\u8bba${2}$\u5f97\u5230\u7684\u76f4\u5f84\u4e24\u7aef\u70b9\u5230${F}$\u7684\u8ddd\u79bb\u7684\u8f83\u5927\u503c\uff0c\u8981\u4e48\u5c31\u662f\u76f4\u5f84\u5916\u5230${F}$\u7684\u6700\u5927\u7684\u8ddd\u79bb\u3002\u6240\u4ee5\uff0c\u9996\u5148\u679a\u4e3e${F}$\u7684\u4e24\u4e2a\u7aef\u70b9\u53d6${max}$\u3002\u6700\u540e\u7531\u4e8e\u6700\u540e\u8981\u7528${F}$\u5b8c\u5168\u904d\u5386\u4e00\u904d\u76f4\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u53d6${max(d[u_{i}])}$\u3002\u7136\u540e\u626b\u4e00\u8fb9\u76f4\u5f84\u5373\u53ef\u6c42\u89e3\n\n------------------\n\n### *code*\n\n\u6211\u9009\u53d6\u4e86\u6211\u4eec\u673a\u623f\u5927\u4f6c\u4eec\u7684${code}$\u7ed9\u5927\u5bb6\u505a\u53c2\u8003\u3002\u8981\u662f\u6709\u4fb5\u6743\uff0cemmmmm\uff0c\u90a3\u5c31\u4fb5\u6743\u5427~~\u624b\u52a8\u6ed1\u7a3d~~\n\n1 O(${N^{3}}$) [@\u55b5\u306e\u8033](https://www.cnblogs.com/gengyf/)\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace gengyf{\n    inline int read(){\n        int x=0,f=1;char s=getchar();\n        while(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n        while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n        return x*f;\n    }\n    const int inf=0x3f3f3f3f;\n    const int N=310;\n    int m[N][N],n,s,ans=inf;\n    int main(){\n        n=read();s=read();\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++){\n                m[i][j]=inf;\n                if(i==j)m[i][j]=0;\n            }\n        for(int i=1;i<n;i++){\n            int x,y,z;\n            x=read();y=read();z=read();\n            m[x][y]=min(z,m[x][y]);\n            m[y][x]=m[x][y];\n        }\n        for(int k=1;k<=n;k++)\n            for(int i=1;i<=n;i++)\n                for(int j=1;j<=n;j++){\n                    if(m[i][k]==inf||m[k][j]==inf)continue;\n                    else m[i][j]=min(m[i][k]+m[k][j],m[i][j]);\n                }\n        int l,r,len=0;\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++){\n                if(m[i][j]>=inf||m[i][j]<=len)continue;\n                len=m[i][j];\n                l=i;r=j;\n        }\n        for(int i=1;i<=n;i++){\n            if(m[l][i]+m[i][r]!=len)continue;\n            for(int j=1;j<=n;j++){\n                if(m[l][j]+m[r][j]!=len)continue;\n                if(m[i][j]>s)continue;\n                int ecc=-inf;\n                for(int k=1;k<=n;k++){\n                    ecc=max(ecc,m[i][k]+m[j][k]-m[i][j]>>1);\n                }\n                ans=min(ans,ecc);\n            }\n        }\n        printf(\"%d\",ans);\n        return 0;\n    }\n}\nint main(){\n    gengyf::main();\n    return 0;\n}\n```\n\nmarkdown\u7684\u4ee3\u7801\u63d2\u5165\u4e0d\u77e5\u9053\u600e\u4e48\u6298\u53e0QAQ\uff0c\u597d\u4e11\n\n2 O(${N^{2}}$) [@LuitaryiJack](https://www.cnblogs.com/Jackpei/)\n\n```cpp\n\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define R register int \nusing namespace std;\nconst int N=310;\ninline int g() {\n\tR ret=0,fix=1; register char ch; while(!isdigit(ch=getchar())) fix=ch=='-'?-1:fix;\n\tdo ret=ret*10+(ch^48); while(isdigit(ch=getchar())); return ret*fix;\n}\nstruct edge {\n\tint v,w,nxt;\n\t#define v(i) e[i].v\n\t#define w(i) e[i].w\n\t#define nxt(i) e[i].nxt\n}e[N<<1];\nint n,m,k,st,ed,mx,ans=0x3f3f3f3f,tot,cnt,fir[N],pre[N],cnte[N],d[N],mem[N],sume[N];\ninline void add(int u,int v,int w) {v(++tot)=v,w(tot)=w,nxt(tot)=fir[u],fir[u]=tot;}\nbool vis[N];\nvoid dfs(int u,int fa) {\n\t//if(vis[u]) return ;\n\tfor(R i=fir[u];i;i=nxt(i)) {\n\t\tR v=v(i);\n\t\tif(vis[v]||v==fa) continue;\n\t\td[v]=d[u]+w(i);\n\t\tdfs(v,u);\n\t\tpre[v]=u;\n\t\tcnte[v]=i;\n\t}\n}\ninline void solve() {\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,0,sizeof(d)); mx=0;\n\td[1]=0,dfs(1,0);\n\tfor(R i=1;i<=n;++i) if(d[i]>mx) mx=d[i],st=i;\n\tmemset(pre,0,sizeof(pre));\n\tmemset(d,0,sizeof(d)); mx=0;\n\td[st]=0,dfs(st,0);\n\tfor(R i=1;i<=n;++i) if(d[i]>mx) mx=d[i],ed=i;\n\tfor(R i=ed;i;i=pre[i]) mem[++cnt]=i,sume[cnt]=sume[cnt-1]+w(cnte[i]);\n\tfor(R i=1;i<=cnt;++i) { R j; mx=0;\n\t\tmemset(vis,false,sizeof(vis));\n\t\tmemset(d,0,sizeof(d));\n\t\tfor(j=i;j<=cnt;++j) if(sume[j-1]-sume[i-1]>k) break; \n\t\t--j;\n\t\tfor(R t=i;t<=j;++t) vis[mem[t]]=true;\n\t\tfor(R t=i;t<=j;++t) dfs(mem[t],0);\n\t\tfor(R i=1;i<=n;++i) if(d[i]>mx) mx=d[i];\n\t\tans=min(mx,ans);\n\t}\n}\nsigned main() {\n\tn=g(),k=g();\n\tfor(R i=1,u,v,w;i<n;++i) u=g(),v=g(),w=g(),add(u,v,w),add(v,u,w);\n\tsolve();\n\tprintf(\"%d\\n\",ans);\n}\n\n```\n\n\n3 O(${NlogSUM}$) [@LuitaryiJack](https://www.cnblogs.com/Jackpei/)\n   \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define R register int\nusing namespace std;\nint n,s,l=1,r=1;\nint fa[300010],vis[300010],fir[300010],cnt;\nlong long d[300010],ans=0x3f3f3f3f;\ninline int g() {\n\tR ret=0,fix=1; register char ch; while(!isdigit(ch=getchar())) fix=ch=='-'?-1:fix;\n\tdo ret=ret*10+(ch^48); while(isdigit(ch=getchar())); return ret*fix;\n}\nstruct node {\n\tint v,w,nxt;\n\t#define v(i) e[i].v\n\t#define w(i) e[i].w\n\t#define nxt(i) e[i].nxt\n}e[600010];\ninline void add(int u,int v,int w) {v(++cnt)=v,w(cnt)=w,nxt(cnt)=fir[u],fir[u]=cnt;}\ninline void dfs(int u) {\n\tfor(R i=fir[u];i;i=nxt(i)) {\n\t\tR v=v(i);\n\t\tif(vis[v]||fa[u]==v) continue;\n\t\tfa[v]=u;\n\t\td[v]=d[u]+w(i);\n\t\tdfs(v);\n\t}\n}\nsigned main() {\n\tn=g(),s=g();\n\tfor(R i=1,u,v,w;i<n;++i) u=g(),v=g(),w=g(),add(u,v,w),add(v,u,w);\n\tdfs(1);\n\tfor(R i=1;i<=n;++i) l=d[i]>d[l]?i:l;\n\tmemset(fa,0,sizeof(fa));\n\td[l]=0,dfs(l);\n\tfor(R i=1;i<=n;++i) r=d[i]>d[r]?i:r;\n\tR t=r;\n\tfor(R i=r;i;i=fa[i]) {\n\t\twhile(fa[t]&&d[i]-d[fa[t]]<=s) t=fa[t];\n\t\tans=min((long long)ans,max(d[t],d[r]-d[i]));\n\t}\n\tfor(R i=r;i;i=fa[i]) vis[i]=true;\n\tfor(R i=r;i;i=fa[i]) d[i]=0,dfs(i);\n\tfor(R i=1;i<=n;++i) if(!vis[i]) ans=max(ans,d[i]);\n\tprintf(\"%lld\\n\",ans);\n}\n```\n4 O(${N}$) @\u6211\u81ea\u5df1\u53c8\u4e11\u53c8\u957f\u53c8\u6162\u7684\u4ee3\u7801QAQ\n   \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn=500010;\nint head[maxn],ver[maxn<<1],nxt[maxn<<1],tot;\nint edge[maxn<<1],fa[maxn],dp[maxn],val[maxn];\nint dep[maxn],n,m,x,y,z,tmp,ans,s;bool v[maxn];\ninline int read(){\n    char c=getchar();int x=0,f=1;\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return f*x;\n}\ninline void add(int x,int y,int z){\n    ver[++tot]=y,nxt[tot]=head[x];\n    head[x]=tot;edge[tot]=z;\n}\ninline void dfs(int x){\n    for(register int i=head[x];i;i=nxt[i]){\n        if(ver[i]!=fa[x]){\n            dep[ver[i]]=dep[x]+edge[i];\n            fa[ver[i]]=x,dfs(ver[i]);\n        }\n    }\n}\ninline void diameter(){\n    dfs(1);x=1;\n    for(register int i=2;i<=n;i++)\n        if(dep[i]>dep[x]) x=i;//\u79bb\u6839\u6700\u8fdc\u7684\u70b9\n    dep[x]=0;memset(fa,0,sizeof(fa));\n    //\u6362\u4e86\u6839\uff0c\u6240\u4ee5fa\u4f1a\u53d8\n    dfs(x);y=1;//\u4e24\u904ddfs\u6c42\u6811\u7684\u76f4\u5f84\n    for(register int i=2;i<=n;i++)\n        if(dep[i]>dep[y]) y=i;//\u79bbx\u6700\u8fdc\u7684\u70b9\n    while(y!=x) v[y]=1,val[++m]=y,y=fa[y];\n    //\u628a\u76f4\u5f84\u4e0ax,y\u4e4b\u95f4\u7684\u70b9\u5168\u90e8\u6807\u8bb0\u4e0a\u8bbf\u95ee\u8fc7\n    //\u5355\u5f00val[]\u8bb0\u4e00\u4e0b\u76f4\u5f84\u4e0a\u90fd\u6709\u4ec0\u4e48\n    v[x]=1;val[++m]=x;\n}\ninline void treedp(int x){v[x]=1;\n    for(register int i=head[x];i;i=nxt[i])\n        if(!v[ver[i]]) treedp(ver[i]),\n            dp[x]=max(dp[x],dp[ver[i]]+edge[i]);\n    //\u5728\u76f4\u5f84\u4e0adp\uff0c\n    //dp[]->\u4ece[]\u51fa\u53d1\uff0c\u4e0d\u8fc7\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\n}\nint main(){\n    n=read(),s=read();ans=0x3f3f3f3f;\n    for(register int i=1;i<n;i++)\n        x=read(),y=read(),z=read(),\n        add(x,y,z),add(y,x,z);\n    diameter();register int j=m;\n    for(register int i=1;i<=m;i++) treedp(val[i]);\n    for(register int i=1;i<=m;i++)\n        tmp=max(tmp,dp[val[i]]);\n    for(register int i=m;i>=1;i--){\n        while(j>=1&&dep[val[j]]-dep[val[i]]<=s) j--;\n        ans=min(ans,max(tmp,\n            max(dep[val[i]],dep[val[1]]-dep[val[j+1]])));\n    }\n    printf(\"%d\",ans);\n}\n```\n\u597d\u50cf\u548cchrisk\u6ca1\u6709\u5173\u7cfb\u554a\uff0cQAQ\uff0c\u7b97\u4e86\uff0c\u524d\u6392\u5b89\u5229\u535a\u5ba2\u5c31\u5b89\u5229\u4e86\u5427\uff0c\u53cd\u6b63\u4e5f~~\u6ca1\u6709\u6536\u94b1~~\u90fd\u662f\u540c\u5b66QAQ\n\n--------------\n\n\u6700\u540e\u56fd\u9645\u60ef\u4f8b\uff0cthanks for your attention\n\n~~\u603b\u7b97\u5199\u5b8c\u4e86\uff0c\u7d2f\u6b7b\u4e86~~",
        "postTime": 1573691347,
        "uid": 145411,
        "name": "the_Death",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\n\u660e\u663e\u53ef\u77e5\u8fd9\u6761\u8def\u5f84\u5728\u76f4\u5f84\u4e0a\u662f\u6700\u4f18\n\u6240\u4ee5\u5148dfs\u4e24\u6b21\u627e\u51fa\u6811\u7684\u76f4\u5f84\n\n### \u65b9\u6cd5\uff1a\n\u5148\u968f\u673a\u627e\u4e00\u4e2a\u70b9\u641c\u51fa\u79bb\u4ed6\u6700\u8fdc\u7684\u4e00\u4e2a\u70b9\uff0c\u8fd9\u5c31\u662f\u76f4\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\u3002\n\u518d\u4ece\u8fd9\u4e2a\u70b9\u641c\uff0c\u627e\u79bb\u4ed6\u6700\u8fdc\u7684\u4e00\u4e2a\u70b9\uff0c\u8fd9\u5c31\u662f\u53e6\u4e00\u4e2a\u7aef\u70b9\u3002\n\u8fd9\u91cc\u6211\u5c31\u4e0d\u8bc1\u660e\u4e86\u3002\n\n\u770b\u4ee3\u7801\uff1a\n```cpp\nvoid dfs(int x,int fa,int p)\n{\n\tfor(int i=head[x];i;i=to[i])\n\t{\n\t\tif(y[i]==fa)continue;\n\t\tif(vis[y[i]]==1)continue;\n\t\tif(p==1)pre[y[i]]=x;\n\t\tdis[y[i]]=dis[x]+w[i];\n\t\tdfs(y[i],x,p);\n\t}\n}\n```\n\n```cpp\ndfs(1,0,0);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tif(maxx<dis[i])\n\t\t{\n\t\t\tk=i;\n\t\t\tmaxx=dis[i];\n\t\t}\n\t}\n\tmaxx=0;\n\tdis[k]=0;\n\tdfs(k,0,1);\n```\n### O\uff08n\uff09\n\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5728\u641c\u7d22\u65f6\u6807\u51fa\u76f4\u5f84\u4e0a\u7684\u70b9\u90fd\u6709\u8c01\n\n\u518d\u770b\u4ee3\u7801\uff1a\n```cpp\nmemset(dis,0,sizeof(dis));\n    dis[p]=0;\n    vis[p]=1;\n    while(p!=k)\n    {\n    \tfor(int i=head[p];i;i=to[i])\n    \t{\n    \t\tif(y[i]==pre[p])\n    \t\t{\n    \t\t\tdis[y[i]]=dis[p]+w[i];\n    \t\t\tvis[y[i]]=1;\n    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tp=pre[p];\n\t}\n```\n### O\uff08n\uff09\n\n\u7136\u540e\u53ef\u4ee5\u7b97\u51fa\u76f4\u5f84\u4e0a\u6bcf\u4e2a\u7b26\u5408\u7684\u8def\u5f84\u5230\u76f4\u5f84\u4e24\u7aef\u70b9\u7684\u6700\u5927\u8ddd\u79bb\u3002\n```cpp\nint find(int x,int m)\n{\n    for(int i=head[x];i;i=to[i])\n    {\n        if(y[i]==pre[x]&&m>=w[i])\n        {\n            return find(y[i],m-w[i]);\n        }\n    }\n    return x;\n}\nint work(int x,int m) \n{\n    int t1=dis[x],t=find(x,m);\n    int t2=dis[k]-dis[t];\n    return max(t1,t2);\n}\n```\n### O\uff08n\uff09\n\u6700\u540e\u518d\u6765\u4e00\u4e2a\u641c\u7d22\uff0c\u641c\u51fa\u975e\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u76f4\u5f84\u4e0a\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u90e8\u5206\u7684\u590d\u6742\u5ea6\u90fd\u662fO(n).\n\u5c31\u53ef\u4ee5\u5f00\u5fc3\u7684AC\u4e86\u3002\n",
        "postTime": 1572688682,
        "uid": 85079,
        "name": "zhoubaobao",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\u524d\u8a00\uff1a\u6211\u53c8\u6765\u5206\u4eab\u6211\u81ea\u5df1\u7684\u4e0d\u4f18\u79c0\u4f46\u662f\u80fd\u8fc7\u7684\u505a\u6cd5\u4e86qwq\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P2491)\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u68f5$n$\u4e2a\u70b9\u7684\u6811\uff0c\u6811\u7684\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u975e\u8d1f\u6743\u503c\u3002\u5b9a\u4e49\u4e00\u4e2a\u70b9\u5230\u8def\u5f84\u7684\u8ddd\u79bb\u662f\u5b83\u5230\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\uff0c\u8981\u6c42\u9009\u51fa\u4e00\u6761\u957f\u5ea6\u4e0d\u8d85\u8fc7$s$\u7684\u8def\u5f84\uff0c\u4f7f\u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u5230\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\uff08\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u5b83\u4e3a\u8fd9\u6761\u8def\u5f84\u7684\u201c\u6743\u503c\u201d\uff09\u6700\u5c0f\u3002\n\n\u55ef\uff0c\u9898\u9762\u7ed9\u51fa\u6765\u540e\u53ef\u4ee5\u8bf4\u662f\u4e00\u8138\u61f5\u903c\u3002\u4e0d\u8fc7\u6211\u4eec\u5148\u53ef\u4ee5\u8fdb\u884c\u4e00\u6ce2\u5927\u80c6\u731c\u6d4b\uff1a\n \n 1. \u5f53\u5ef6\u4f38\u4e00\u6761\u8def\u5f84\u4f7f\u5176\u957f\u5ea6\u589e\u52a0\u65f6\uff0c\u5728\u6bcf\u4e00\u6b21\u589e\u52a0\u7684\u957f\u5ea6\u90fd\u201c\u6ca1\u6709\u6d6a\u8d39\u201d\u7684\u524d\u63d0\u4e0b\uff0c\u8def\u5f84\u7684\u6743\u503c\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n \n 2. \u5f53\u9650\u5236\u957f\u5ea6\u589e\u52a0\u65f6\uff0c\u65b0\u8def\u5f84\u662f\u53ef\u4ee5\u5728\u539f\u8def\u5f84\u7684\u57fa\u7840\u4e0a\u5ef6\u4f38\u82e5\u5e72\u6761\u8fb9\u5f97\u5230\u7684\u3002\n \n 3. \u4e0a\u8ff0\u8def\u5f84\u4e00\u5b9a\u662f\u5728\u76f4\u5f84\u7684\u4e2d\u70b9\uff08\u6216\u76f8\u90bb\u7684\u8282\u70b9\uff09\u5f00\u59cb\uff0c\u5e76\u6cbf\u7740\u4e00\u6761\u76f4\u5f84\u5ef6\u4f38\n\n\u63a5\u4e0b\u6765\u5c31\u662f~~\u5e76\u4e0d\u4e25\u8c28\u7684~~\u8bc1\u660e\uff1a\n\n\u8bc11\uff1a\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u6761\u8def\u5f84$S$\uff0c**\u5982\u679c\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u5230\u5b83\u7684\u8ddd\u79bb\u6700\u5927\u7684\u70b9$p$\uff0c\u7136\u540e\u8ba9$S$\u5411\u5b83\u5ef6\u4f38\u4e00\u6761\u8fb9\uff0c\u8fd9\u6837$S$\u7684\u6743\u503c\u5c31\u51cf\u5c0f\u4e86**\uff1b**\u5982\u679c\u4e0d\u9009\u70b9$p$\u65b9\u5411\u5ef6\u4f38\uff0c\u4e5f\u5c31\u662f\u4e0d\u7f29\u5c0f$p$\u5230$S$\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u8def\u5f84\u5ef6\u957f\u540e$S$\u7684\u6743\u503c\u4f9d\u7136\u662f\u4e0d\u53d8\u7684\uff0c\u65b0\u589e\u52a0\u7684\u957f\u5ea6\u5c31\u88ab\u201c\u6d6a\u8d39\u201d\u4e86**\u3002\u6240\u4ee5\u5728\u6bcf\u4e00\u6b21\u589e\u52a0\u7684\u957f\u5ea6\u90fd\u201c\u6ca1\u6709\u6d6a\u8d39\u201d\u7684\u524d\u63d0\u4e0b\uff0c\u8def\u5f84\u7684\u6743\u503c\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n\n\u8bc12\uff1a\n\n\u7531\u4e8e\u589e\u52a0\u7684\u9650\u5236\u957f\u5ea6\u662f\u76f8\u540c\u7684(\u5373\u6743\u503c\u51cf\u5c0f\u503c\u76f8\u540c)\uff0c\u4efb\u4f55\u8def\u5f84\u7684\u521d\u59cb\u6743\u503c\u90fd\u4e0d\u5927\u4e8e\u539f\u8def\u5f84\uff0c\u6240\u4ee5\u65b0\u8def\u5f84\u662f\u53ef\u4ee5\u5728\u539f\u8def\u5f84\u7684\u57fa\u7840\u4e0a\u5ef6\u4f38\u82e5\u5e72\u6761\u8fb9\u5f97\u5230\u7684\u3002\n\n\u8bc13\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651$s=0$\u7684\u60c5\u51b5(\u4e5f\u5c31\u662f\u53ea\u9009\u4e00\u4e2a\u70b9)\uff1a\u4e00\u68f5\u6811\u4e2d\u6700\u957f\u7684\u94fe\u662f\u5b83\u7684\u76f4\u5f84\uff0c\u6240\u4ee5\u5982\u679c\u628a\u70b9\u8bbe\u5728\u76f4\u5f84\u7684\u4e0e\u4e2d\u70b9\u6700\u63a5\u8fd1\u7684\u8282\u70b9\u5904\uff0c\u90a3\u4e48\u5bb9\u6613\u5f97\u5230\u6b64\u65f6\u8def\u5f84\u7684\u6743\u503c\u6700\u5c0f(\u76f4\u5f84\u7684\u4e00\u534a~\u76f4\u5f84)\uff0c\u7136\u540e\u6839\u636e\u7ed3\u8bba1\u7684\u5ef6\u4f38\u65b9\u5f0f\uff0c\u6bcf\u4e00\u6b21\u90fd\u662f\u5411\u7740\u8ddd\u79bb\u6700\u5927\u7684\u70b9\u7684\u65b9\u5411\u5ef6\u4f38\uff0c\u800c\u8d77\u59cb\u70b9\u53c8\u662f\u5728\u76f4\u5f84\u4e0a\uff0c\u6240\u4ee5\u5ef6\u4f38\u8def\u5f84\u5f88\u660e\u663e\u5728\u76f4\u5f84\u4e0a\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4ee5\u4e0b\u505a\u6cd5\uff1a\n\n 1. \u6c42\u51fa\u76f4\u5f84\u957f\u5ea6\u548c\u4efb\u610f\u4e00\u6761\u76f4\u5f84\u7684\u6240\u6709\u70b9\u3002\n 2. \u6c42\u76f4\u5f84\u4e2d\u8ddd\u79bb\u76f4\u5f84\u4e2d\u70b9\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9$rt$\uff0c\u4ee5\u6b64\u4e3a\u57fa\u7840\u8fdb\u884c\u521a\u624d\u7684\u8d2a\u5fc3\u5ef6\u4f38(\u5806\u7ef4\u62a4)\u3002\n \n\u5ef6\u4f38\u4e5f\u6709\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n 1. \u6bcf\u6b21\u5ef6\u4f38\u90fd\u5e94\u5f53\u53d6\u5230\u76ee\u524d\u8def\u5f84\u6700\u5927\u7684\u70b9\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8eprim\u7b97\u6cd5\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5806\u8fdb\u884c\u7ef4\u62a4\u3002\n 2. \u5ef6\u4f38\u524d\u53ef\u4ee5\u5148\u8fdb\u884c\u4e00\u6ce2\u9884\u5904\u7406\uff0c\u5904\u7406\u51fa$d[i]$\u8868\u793a\u4ee5$rt$\u4e3a\u6839\u7684\u6811\u4e2d\uff0c\u4ece$i$\u51fa\u53d1\u6240\u80fd\u8d70\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u4e00\u5f00\u59cb\u548c\u6bcf\u6b21\u5ef6\u4f38\u540e\u90fd\u628a\u7aef\u70b9$x$\u7684\u513f\u5b50$ch$\u7684$d[ch]+v(x,ch)$\u4e22\u8fdb\u5806\u91cc\u8fdb\u884c\u7ef4\u62a4\u3002\n 3. \u5f53\u8def\u5f84\u7684\u957f\u5ea6\u518d\u589e\u52a0\u65f6\u4f1a\u8d85\u8fc7$s$\uff0c\u5c31\u53ef\u4ee5\u8df3\u51fa\u4e86\u3002\n 4. \u4e0d\u8981\u5fd8\u4e86\u4f60\u5728\u5ef6\u4f38\u8def\u5f84\uff0c\u6240\u4ee5\u5f53\u4f60\u4ece\u5806\u91cc\u5f97\u5230\u7684\u70b9\u5e76\u4e0d\u662f\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u65f6\uff0c\u4e5f\u5e94\u8be5\u8df3\u51fa\uff0c\u5c31\u7b97\u4f60\u5ef6\u4f38\u5176\u5b83\u7684\u8fb9\uff0c\u6743\u503c\u4e5f\u4e0d\u4f1a\u518d\u51cf\u5c0f\u4e86\u3002\n 5. \u4e0d\u7528\u62c5\u5fc3\u4f60\u5ef6\u4f38\u7684\u70b9\u662f\u5426\u5728\u76f4\u5f84\u4e2d\uff0c\u56e0\u4e3a\u201c\u5230\u8def\u5f84\u8ddd\u79bb\u6700\u5927\u201d\u8fd9\u4e2a\u6761\u4ef6\u5df2\u7ecf\u5e2e\u4f60\u9650\u5236\u4e86\u3002\uff08\u4e00\u5f00\u59cb\u5199\u7684\u65f6\u5019\u56e0\u4e3a\u8fd9\u4e2a\u65e0\u7f18\u65e0\u6545\u591a\u4e861000\u591abyte QAQ\uff09\n\n\u7136\u540e\u5c31\u5728$O(nlogn)$\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u4e86\u95ee\u9898\u3002\n\n\u7136\u800c\u5f88\u83dc\u7684\u6211\u5e76\u4e0d\u4f1a$O(n)$\u505a\u6cd5QAQ\u3001\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#define N 500005\n#define ll long long\nusing namespace std;\nint n,head[N],cnt,maxid[2],fa[N],dep[N],mid;\nbool tag[N];\nll s,dis,maxn[N][2][2],d[N],ans;\nstruct edge\n{\n\tint to,nxt,v;\n}w[N*2];\nvoid add(int x,int y,int v)\n{\n\tw[++cnt]=(edge){y,head[x],v};\n\thead[x]=cnt;\n}\ninline void equ(ll a[],ll b[])\n{\n\ta[0]=b[0],a[1]=b[1];\n}\nvoid dfs1(int x,int last)//\u6c42\u76f4\u5f84\n{\n\tfa[x]=last,dep[x]=dep[last]+1;\n\tmaxn[x][0][1]=maxn[x][1][1]=x;\n\tfor(int i=head[x];i;i=w[i].nxt)\n\t{\n\t\tint y=w[i].to;\n\t\tif(y==last)continue;\n\t\tdfs1(y,x);\n\t\tll temp[2]={maxn[y][0][0]+(ll)w[i].v,maxn[y][0][1]};\n\t\tif(temp[0]>maxn[x][0][0])equ(maxn[x][1],maxn[x][0]),equ(maxn[x][0],temp);\n\t\telse if(temp[0]>maxn[x][1][0])equ(maxn[x][1],temp);\n\t}\n\tif(dis<maxn[x][0][0]+maxn[x][1][0])\n\t{\n\t\tdis=maxn[x][0][0]+maxn[x][1][0];\n\t\tmaxid[0]=maxn[x][0][1];\n\t\tmaxid[1]=maxn[x][1][1];\n\t}\n}\nvoid get_d()\n{\n\tint x=maxid[0],y=maxid[1];\n\tif(dep[x]<dep[y])swap(x,y);\n\twhile(dep[x]>dep[y])tag[x]=1,x=fa[x];\n\twhile(x!=y)tag[x]=tag[y]=1,x=fa[x],y=fa[y];\n\ttag[x]=1;\n}\nvoid get_mid()//\u6c42\u79bb\u76f4\u5f84\u4e2d\u70b9\u6700\u8fd1\u7684\u8282\u70b9\n{\n\tint x=maxid[0],last=0;\n\tll sum=0;\n\twhile(x!=maxid[1])\n\t{\n\t\tint y,v;\n\t\tfor(int i=head[x];i;i=w[i].nxt)\n\t\t\tif(tag[w[i].to]==1&&w[i].to!=last)y=w[i].to,v=w[i].v;\n\t\tif(2*sum<dis&&2*(sum+v)>=dis)\n\t\t{\n\t\t\tmid=(2*(sum+v)-dis)<(dis-2*sum)?y:x;return;\n\t\t}\n\t\tsum+=v,last=x,x=y;\n\t}\n}\nvoid dfs_pre(int x,int last)//\u9884\u5904\u7406\n{\n\td[x]=0;\n\tfor(int i=head[x];i;i=w[i].nxt)\n\t{\n\t\tint y=w[i].to;\n\t\tif(y==last)continue;\n\t\tdfs_pre(y,x);\n\t\td[x]=max(d[x],d[y]+(ll)w[i].v);\n\t}\n}\nstruct node\n{\n\tint id,id2;ll d,d2;\n\tbool operator<(const node &b)const\n\t{\n\t\treturn d<b.d;\n\t}\n};\npriority_queue<node>q;\nvoid calc()//\u5ef6\u4f38\n{\n\tfor(int i=head[mid];i;i=w[i].nxt)\n\t\tq.push((node){mid,w[i].to,d[w[i].to]+w[i].v,w[i].v});\n\tint l=mid,r=mid;\n\tll sum=0;\n\twhile(!q.empty())\n\t{\n\t\tint last=q.top().id,last2=q.top().id2;\n\t\tll v=q.top().d,v2=q.top().d2;\n\t\tq.pop();\n\t\tif((last!=l&&last!=r)||sum+v2>s)\n\t\t{\n\t\t\tans=v;return;\n\t\t}\n\t\tsum+=v2;\n\t\tif(l==last)l=last2;\n\t\telse if(r==last)r=last2;\n\t\tfor(int i=head[last2];i;i=w[i].nxt)\n\t\t\tif(w[i].to!=last)q.push((node){last2,w[i].to,d[w[i].to]+w[i].v,w[i].v});\n\t}\n}\nint main()\n{\n\tscanf(\"%d %lld\",&n,&s);\n\tfor(int i=1,x,y,v;i<n;i++)\n\t{\n\t\tscanf(\"%d %d %d\",&x,&y,&v);\n\t\tadd(x,y,v),add(y,x,v);\n\t}\n\tdfs1(1,0);\n\tget_d(),get_mid();\n\tdfs_pre(mid,0);\n\tcalc();\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1570505247,
        "uid": 110471,
        "name": "Tommy_clas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "### \u4e8c\u5206+\u8d2a\u5fc3\n\u6700\u5927\u503c\u6700\u5c0f\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u3002\n\n\u4e8c\u5206\u51fa\u6240\u6709\u70b9\u5230\u8def\u5f84\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u6700\u5927\u503c\u662f\u5426\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002 \n\n\u4e00\u5b9a\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u8fd9\u4e2a\u8def\u5f84\u5728\u6811\u7684\u6700\u957f\u94fe\u4e0a\u3002\u8bc1\u660e\u7684\u8bdd\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u8be5\u8def\u5f84\u4e0d\u5728\u6700\u957f\u94fe\u4e0a\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6848\u7684\u6700\u5927\u503c\u4e00\u5b9a\u4e0d\u6bd4\u5728\u6700\u957f\u94fe\u4e0a\u7684\u66f4\u4f18\u3002 \n\n\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u8d2a\u5fc3\u7684\u7b56\u7565\u3002\n\n\u9996\u5148\u786e\u5b9a\u6811\u7684\u6700\u957f\u94fe\uff0c\u7136\u540e\u6c42\u51fa\u6700\u957f\u94fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u5230\u4e0d\u662f\u6700\u957f\u94fe\u4e0a\u7684\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\u5982\u679c\u6700\u957f\u94fe\u4e0a\u5b58\u5728\u4e00\u4e2a\u70b9\u5b83\u5230\u5176\u4ed6\u70b9\u5f97\u6700\u8fdc\u8ddd\u79bb>mid\u7684\u8bdd\uff0c\u8bf4\u660e\u5b83\u6839\u672c\u4e0d\u53ef\u80fd\u8d70\u5230\u6700\u957f\u94fe\u4e0a\uff0c\u90a3\u4e48\u5c31\u5224\u65ad\u65e0\u89e3\u3002 \n\n\u6c42\u51fa\u4e86\u6700\u8fdc\u8ddd\u79bb\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5269\u4f59\u7684\u8ddd\u79bb\u8bb0\u4e3amid-\u6700\u8fdc\u8ddd\u79bb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u79bb\u5b83\u6700\u8fdc\u7684\u70b9\u8d70\u5230\u8fd9\u4e2a\u70b9\u4e86\u4e4b\u540e\u8fd8\u80fd\u8d70\u591a\u5c11\u3002\u7136\u540e\u8ba9\u6700\u957f\u94fe\u7684\u5de6\u53f3\u7aef\u70b9\u5411\u4e2d\u95f4\u79fb\uff0c\u76f4\u5230\u4e0d\u80fd\u52a8\u4e3a\u6b62\u3002\u7136\u540e\u5224\u65ad\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u662f\u5426<=s\uff0c\u662f\u7684\u8bdd\u5c31\u6709\u89e3\uff0c\u5426\u5219\u65e0\u89e3\u3002\n\n\n# code\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=300010;\nint n,s,x,y,z,Max,dMax,pt,inf,ans;\nint tot,point[maxn],nxt[maxn*2],v[maxn*2],c[maxn*2];\nint h[maxn],father[maxn],edge[maxn],leaf[maxn],tmp[maxn],len[maxn],goal[maxn],dis[maxn];\nbool vis[maxn];\nvoid add(int x,int y,int z){\n    nxt[++tot]=point[x];point[x]=tot;v[tot]=y;c[tot]=z;\n}\nvoid dfs(int x,int fa,int dep){\n    father[x]=fa;h[x]=dep;\n    if(h[x]>Max) Max=h[x],pt=x;\n    bool flag=false;\n    for(int i=point[x];i;i=nxt[i])\n        if(v[i]!=fa){\n            dfs(v[i],x,dep+c[i]),flag=true;\n            edge[v[i]]=c[i];\n        }\n    if(!flag) leaf[++leaf[0]]=x;\n}\nvoid chain(int x){\n    while(h[x]!=0){\n        vis[x]=true;\n        tmp[++tmp[0]]=x;\n        x=father[x];\n    }\n    tmp[++tmp[0]]=x;vis[x]=true;\n}\nvoid length(int x,int fa,int dep,int st){\n    dis[st]=max(dis[st],dep);\n    for(int i=point[x];i;i=nxt[i])\n        if(v[i]!=fa&&!vis[v[i]])\n            length(v[i],x,dep+c[i],st);\n}\nbool check(int mid){\n    for(int i=1;i<=tmp[0];++i)\n        if(dis[tmp[i]]<=mid) len[tmp[i]]=dis[tmp[i]]-mid;\n        else return false;\n\n    len[tmp[1]]=len[tmp[tmp[0]]]=mid;\n    for(int i=1;i<=tmp[0];++i)\n        if(len[tmp[i]]>=edge[tmp[i]]){\n            len[tmp[i+1]]=min(len[tmp[i+1]],len[tmp[i]]-edge[tmp[i]]);\n            len[tmp[i]]=inf;\n        }\n        else break;\n    for(int i=tmp[0];i>=1;--i)\n        if(len[tmp[i]]>=edge[tmp[i-1]]){\n            len[tmp[i-1]]=min(len[tmp[i-1]],len[tmp[i]]-edge[tmp[i-1]]);\n            len[tmp[i]]=inf;\n        }\n        else break;\n    int l=0,a=0,b=0;\n    for(int i=1;i<=tmp[0];++i) if(len[tmp[i]]!=inf) {a=i;break;}\n    for(int i=tmp[0];i>=1;--i) if(len[tmp[i]]!=inf) {b=i;break;}\n    for(int i=a;i<b;++i) l+=edge[tmp[i]];\n    if(l<=s) return 1;\n    else return 0;\n}\nint find(){\n    int l=0,r=dMax,mid,ans;\n    while(l<=r){\n        mid=(l+r)/2;\n        if(check(mid)) ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    return ans;\n}\nint main(){\n    scanf(\"%d%d\",&n,&s);\n    for(int i=1;i<n;++i){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);add(y,x,z);dMax+=z;\n    }\n    dfs(1,0,0);\n    leaf[0]=1,h[pt]=0,Max=0,edge[pt]=0,dfs(pt,0,0);\n    chain(pt);\n    memset(len,127,sizeof(len));\n\tinf=len[0];\n    for(int i=1;i<=tmp[0];++i) length(tmp[i],0,0,tmp[i]);\n    ans=find();\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1548286182,
        "uid": 111961,
        "name": "D_14134",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "\u522b\u7684\u9898\u89e3\u600e\u4e48\u90fd\u90a3\u4e48\u9ebb\u70e6\n\n\u7528\u4e0d\u7740\u4e8c\u5206\uff0c\u76f4\u63a5\u8d2a\u5fc3\u53d6\u5c31\u53ef\u4ee5\n\n\u542c\u8bf4\u5fc5\u987b\u8981\u53d6\u6811\u7684\u76f4\u5f84\u4e0a\u7684\u8def\u5f84\n\n\u5148$dfs$\u9884\u5904\u7406\u51fa\u6811\u7684\u76f4\u5f84\n\n\u7136\u540e\u6bcf\u6b21\u5728\u6811\u7684\u76f4\u5f84\u4e0a\u53d6\u4e0d\u8d85\u8fc7s\u7684\u8def\u5f84\n\n\u66f4\u65b0\u7b54\u6848\n\n\u6700\u540e\u6c42\u51fa\u4e0d\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u6240\u9009\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\uff08\u5f88\u663e\u7136\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 1000010\n#define B 2010\n\nusing namespace std;\ntypedef long long ll;\nstruct node {\n\tint next, to, dis;\n}edge[A];\nint head[A], num_edge;\nvoid add_edge(int from, int to, int dis) {\n\tedge[++num_edge].next = head[from];\n\tedge[num_edge].to = to;\n\tedge[num_edge].dis = dis;\n\thead[from] = num_edge;\n}\nint dis[A], vis[A], n, s, a, b, c, st = 1, en, fa[A], ans = INT_MAX;\nvoid dfs(int fr) {\n\tfor (int i = head[fr]; i; i = edge[i].next) {\n\t\tint ca = edge[i].to;\n\t\tif (ca == fa[fr] or vis[ca]) continue;\n\t\tfa[ca] = fr;\n\t\tdis[ca] = dis[fr] + edge[i].dis;\n\t\tdfs(ca);\n\t}\n}\n\nint main(int argc, char const *argv[]) {\n\tscanf(\"%d%d\", &n, &s);\n\tfor (int i = 1; i < n; i++) {\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tadd_edge(a, b, c);\n\t\tadd_edge(b, a, c);\n\t}\n    /******************\u6811\u7684\u76f4\u5f84*******************/\n\tdfs(st);\n\tfor (int i = 1; i <= n; i++)\n\t\tif (dis[i] > dis[st])\n\t\t\tst = i;\n\tmemset(fa, 0, sizeof fa), dis[st] = 0; dfs(st);\n\tfor (int i = 1; i <= n; i++)\n\t\tif (dis[i] > dis[en])\n\t\t\ten = i;\n\tint tmp = en;\n    /**********************************************/\n\tfor (int i = en; i; i = fa[i]) { //\u4e0d\u65ad\u53d6<=s\u7684\u8def\u5f84\n\t\twhile (fa[tmp] and dis[i] - dis[fa[tmp]] <= s) tmp = fa[tmp];\n\t\tans = min(ans, max(dis[tmp], dis[en] - dis[i]));\n\t}\n    //\u4e0d\u5728\u76f4\u5f84\u4e0a\u7684\u70b9\u5230\u6240\u9009\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\n\tfor (int i = en; i; i = fa[i]) vis[i] = 1;\n\tfor (int i = en; i; i = fa[i]) dis[i] = 0, dfs(i);\n\tfor (int i = 1; i <= n; i++)\n\t\tif (!vis[i])\n\t\t\tans = max(ans, dis[i]);\n\tprintf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1546759387,
        "uid": 78064,
        "name": "\u826f\u6708\u6faa\u4e8c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    },
    {
        "content": "/\\*\n20%\u7684\u6570\u636e,\u5c31\u662fNOIP\u90a3\u9053\u6811\u7f51\u7684\u6838\u3002\n\n100%\u8fd9\u4e48\u5927\u7684\u6570\u636e\u8303\u56f4\uff0c\u82e5\u76f4\u5f84\u957f\u5ea6\u4e3ad\uff0cdlogd\u53ef\u80fd\u4f1a\u88ab\u5361\n\n\n\u5148bfs\u4e24\u904d\u6c42\u51fa\u6811\u7684\u76f4\u5f84(\u9632\u7206\u6808)\uff0cO(n)\u7684\n\n\u7136\u540e\u7ef4\u62a4 g[i]\u8868\u793ai\u662f\u8def\u5f84\u53f3\u7aef\u70b9\u65f6\uff0c\u53f3\u8fb9\u90a3\u6bb5\u5220\u6389\u7684\u76f4\u5f84\u957f\u5ea6\u3002\n\nf[i]\u8868\u793ai\u662f\u8def\u5f84\u5de6\u7aef\u70b9\u65f6\uff0c\u5de6\u8fb9\u90a3\u6bb5\u5220\u6389\u7684\u76f4\u5f84\u957f\u5ea6\u3002\n\nh[i]\u8868\u793ai\u662f\u76f4\u5f84\u4e0a\u7684\u70b9\uff0c\u6bcf\u4e2a\u76f4\u5f84\u4e0a\u7684\u70b9\u4e0d\u662f\u90fd\u6709\u4e00\u68f5\uff08\u6216\u8005\u5f88\u591a\u68f5\uff09\n\n\u7531\u975e\u6b64\u76f4\u5f84\u4e0a\u70b9\u7ec4\u6210\u7684\u6811\uff08\u68ee\u6797\uff09\u561b\uff0c\u70b9i\u5230\u8fd9\u4e9b\u5b50\u8282\u70b9\u4e2d\u6700\u8fdc\u7684\u90a3\u4e2a\u7684\u8ddd\u79bb\u3002\n\n\u7136\u540e\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u8dd1\u53cc\u6307\u9488\u3002\u5c31\u662f\u8def\u5f84\u957f\u5ea6\u4e0d\u662f\u6709\u9650\u5236\u561b\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u7136\u540e\u53f3\u7aef\u70b9\u662f\u975e\u4e25\u683c\u5355\u8c03\u53f3\u79fb\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\u800c\u5bf9\u4e8e\u4e00\u6bb5\u8def\u5f84\u533a\u95f4[l,r]\uff0c\u5b83\u4f5c\u4e3a\u67a2\u7ebd\u65f6\u7684\u7b54\u6848\u4e3a\n\nmax(max(f[l],g[r]),max{hi,i\u2208[l,r]}) \n\n\u7136\u540e\u6700\u53f3\u8fb9\u90a3\u4e2a\u600e\u4e48\u641e\u5462\uff1f \u5355\u8c03\u961f\u5217\uff0c\u7ef4\u62a4hi\u6700\u5927\u503c\u554a~\n\n\\*/\n\n\n\n\n\n\n    \n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define N 3000007\n#define inf 0x3f3f3f3f\nusing namespace std;\nint n,m,k,s,t,ans,cnt,num,L,R;\nint head[N],f[N],g[N],h[N],fa[N],vis[N];\nint belong[N],tmp[N],que[N],id[N];\nstruct edge{\n    int v,net,w;\n}e[N<<1];\nqueue<int>q;\ninline int read()\n{\n    int x=0,f=1;char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\ninline void add(int u,int v,int w)\n{\n    e[++cnt].v=v;e[cnt].w=w,e[cnt].net=head[u];head[u]=cnt;\n}\nint bfs(int s,int Time)\n{\n    int len=0;q.push(s);\n    g[s]=0,fa[s]=s,vis[s]=Time;\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        for(int i=head[u];i;i=e[i].net)\n        {\n            int v=e[i].v;\n            if(vis[v]==Time) continue;\n            g[v]=g[u]+e[i].w;len=max(len,g[v]);\n            fa[v]=u;vis[v]=Time;\n            q.push(v);\n        }\n    }return len;\n}\nvoid solve()\n{\n    int i;\n    for(s=1,bfs(s,++num),i=1;i<=n;i++)\n      if(g[i]>g[s]) s=i;\n    for(bfs(s,++num),i=1;i<=n;i++)\n      if(g[i]>g[t]) t=i;\n    belong[n=1]=t;num++;\n    do{\n        t=fa[t],belong[++n]=t,vis[t]=num;\n    }while(t!=s);\n    for(i=1;i<=n;i++) f[i]=g[belong[1]]-g[belong[i]];\n    for(i=1;i<=n;i++) tmp[i]=g[belong[i]];\n    for(i=1;i<=n;i++) h[i]=bfs(belong[i],num);\n    for(i=1;i< n;i++) g[i]=tmp[i];g[n]=0;    \n}\nint main()\n{\n    int x,y,z;\n    n=read();m=read();\n    for(int i=1;i<n;i++)\n    {\n        x=read();y=read();z=read();\n        add(x,y,z);add(y,x,z);\n    }\n    solve();\n    int l=1,r=0;ans=inf;\n    for(l=1;l<=n;l++)\n    {\n        while(r<n && f[r+1]-f[l]<=m)\n        {\n            ++r;while(L<=R && que[R]<h[r]) R--;\n            que[++R]=h[r];id[R]=r;\n        }\n        ans=min(ans,max(max(f[l],g[r]),que[L]));\n        if(id[L]<=l)L++;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1509009070,
        "uid": 20833,
        "name": "\u5b89\u597d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2491 \u3010[SDOI2011]\u6d88\u9632\u3011"
    }
]