[
    {
        "content": "\u4ece\u6211\u8ba4\u771f\u8bb0\u5f55\u4ee5\u6765\u7b2c $3$ \u9053\u7531\u4e8e\u8bfb\u9519\u9898\u9762\u800c**GG**\u7684\u9898\u76ee\uff08\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u663e\u7136\u6709\u4e00\u4e2a\u5916\u5c42\u4e8c\u5206\u7684\u6a21\u578b\uff0c\u4e8c\u5206\u8ddd\u79bb\u7684\u6700\u5927\u503c\u4f5c\u4e3a\u4e0a\u754c\u3002\n\n\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a**\u4e00\u68f5\u6811\u4e0a\u9009 $m$ \u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9 $m$ \u4e2a\u70b9\u4e0e\u5173\u952e\u8282\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u4e0d\u8d85\u8fc7$mid$\u3002**\n\n\u7136\u540e\u53d1\u73b0\u4e0a\u9762\u90a3\u4e2a\u95ee\u9898\u662f\u4e0d\u597d\u89e3\u51b3\u7684\uff0c\u6839\u636e\u4e8c\u5206\u5224\u5b9a\uff0c\u95ee\u9898\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f6c\u5316\uff1a**\u4e00\u68f5\u6811\u4e0a\u9009 $tot$ \u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9 $tot$ \u4e2a\u70b9\u4e0e\u5173\u952e\u8282\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u4e0d\u8d85\u8fc7mid\uff0c\u6700\u5c0f\u5316 $tot$\u3002**\n\n\u8fd9\u5927\u6982\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u95ee\u9898\uff0c\u7528\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u5173\u952e\u8282\u70b9\u3002\n\n\u4e0b\u9762\u662f\u6211\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\u7ed9\u51fa\u7684\u4e00\u4e9b\u5b9a\u4e49\uff1a\n\n> \u79f0\u70b9 $x$ \u8986\u76d6\u70b9 $y$\uff0c\u5f53\u4e14\u4ec5\u5f53\u70b9 $x$ \u4e0e\u70b9 $y$\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u7684\u8ddd\u79bb\u9650\u5236 $mid$\u3002\uff08\u4ee5\u4e0b\u5c31\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u4e0d\u518d\u91cd\u590d\uff09\n\n>  \u800c\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u5b9a\u4e49\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5173\u952e\u8282\u70b9 $y$ \uff0c\u9009\u5b9a\u7684 $tot$ \u4e2a\u70b9\u4e2d\u6709**\u4efb\u610f**\u4e00\u4e2a\u70b9 $x$ \u5230\u70b9 $y$ \u7684\u8ddd\u79bb\u4e0d\u5927\u4e8e\u7ed9\u5b9a\u7684\u8ddd\u79bb\u9650\u5236 $mid$\uff0c\u4ee4 $tot$ \u6700\u5c0f\u3002\n\n> \u9009\u5b9a\u8282\u70b9\u4e3a\u4f60\u9009\u62e9\u7684\u8282\u70b9\uff0c\u5173\u952e\u8282\u70b9\u540c\u9898\u76ee\u5b9a\u4e49\u3002\n\n\u63a5\u4e0b\u6765\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u68f5\u5b50\u6811\u7684\u6839 $root$ \u5230\u6700\u8fdc\u7684\u5173\u952e\u8282\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8e $mid$ \uff0c\u90a3\u610f\u5473\u7740\u8fd9\u6574\u68f5\u5b50\u6811\u662f\u53ef\u4ee5\u88ab\u8fd9\u4e2a $root$ \u8986\u76d6\u7684.\u5e76\u4e14\u5982\u679c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u81ea\u5e95\u800c\u4e0a\u9012\u5f52\uff0c\u4e00\u5b9a\u80fd\u591f\u5f97\u51fa\u4e00\u79cd\u65b9\u6848\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6848\u5f88\u660e\u663e\u4e0d\u662f\u6700\u4f18\u89e3\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6bcf\u6b21\u8d2a\u5fc3\u7684\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u6bcf\u6b21\u4f1a\u91cd\u590d\u8986\u76d6\u4e00\u4e9b\u70b9\uff0c\u8fd9\u6837\u5c31\u4f1a\u5f97\u4e0d\u5230\u6700\u4f18\u89e3\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6bcf\u6b21\u672a\u88ab\u4e4b\u524d\u8986\u76d6\u7684\u5173\u952e\u8282\u70b9\u5230 $root$ \u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u6389\u591a\u4f59\u7684\u8986\u76d6\u3002\n\n\u4e3a\u4ec0\u4e48\u8bf4\u53eb\u505a**\u51cf\u5c11**\u591a\u4f59\u7684\u8986\u76d6\uff0c\u800c\u4e0d\u662f**\u6d88\u9664**\u6240\u6709\u591a\u4f59\u7684\u8986\u76d6\u5462\uff1f\u7ecf\u8fc7\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u8986\u76d6\u6574\u9897\u5b50\u6811 $root$ \u65f6\uff0c\u4e0d\u4e00\u5b9a\u4f1a\u9009\u5b9a $root$ \u4f5c\u4e3a\u7528\u6765\u8986\u76d6\u8fd9\u68f5\u5b50\u6811\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528 $root$ \u4e0b\u7684\u5b50\u5b59 $y$ \u6765\u8986\u76d6\u6574\u9897\u5b50\u6811\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u4f18\u89e3\u3002\n\n\u6839\u636e\u4e0a\u9762\u7684\u4e24\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u8bbe $f_{root}$ \u8868\u793a\u8ddd $root$ \u6700\u8fdc\u7684\u672a\u88ab\u8986\u76d6\u7684\u5173\u952e\u8282\u70b9\u5230 $root$ \u7684\u8ddd\u79bb\uff0c$g_{root}$\u4e3a $root$ \u5230\u8be5\u5b50\u6811\u4e0b\u7684\u88ab\u9009\u5b9a\u8282\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u3002\n\nDP\u8fc7\u7a0b\u5c31\u4e3a\uff1a\n\n- \u521d\u503c\uff1a$f_{root}=-\\infty,g_{root}=\\infty$\n\n- $f_x=\\max \\{f_y+1\\}$\uff0c$g_x=\\min\\{f_y+1\\}$\n\n\u8fd9\u6837\u5c31\u7ed3\u675f\u4e86\u4e48\uff1f\u662f\u4e0d\u662f\u5f88\u597d\u5947\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7528\u5230$d_i$\uff1f\n\n\u6211\u4eec\u8fd8\u9700\u8981\u7279\u5224\u51e0\u79cd\u60c5\u51b5\u4ee5\u53ca\u7edf\u8ba1\u6700\u5c0f\u70b9\u8986\u76d6\u3002\n\n- \u5f53$f_x+g_x<=mid$ \uff0c\u8bf4\u660e\u53ea\u7528\u5df2\u9009\u5b9a\u8282\u70b9\u4e2d\u5230 $x$ \u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u5c31\u80fd\u591f\u8986\u76d6\u5230\u6700\u8fdc\u7684\u5173\u952e\u8282\u70b9\uff0c\u6574\u68f5\u5b50\u6811\u81ea\u7136\u53ef\u4ee5\u88ab\u5b8c\u5168\u8986\u76d6\u3002\u5c31\u6709$f_x=-\\infty$\n- \u5f53$f_x = mid$ \uff0c\u8bf4\u660e\u6700\u8fdc\u7684\u5173\u952e\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u521a\u597d\u4e3a$mid$\uff0c\u5982\u679c\u6211\u4eec\u6b64\u65f6\u4e0d\u5c06 $x$ \u8282\u70b9\u4f5c\u4e3a\u88ab\u9009\u5b9a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6700\u8fdc\u7684\u5173\u952e\u8282\u70b9\u5c06\u6c38\u8fdc\u65e0\u6cd5\u88ab\u8986\u76d6\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u9009\u5b9a $x$ \u8282\u70b9\u4f5c\u4e3a\u9009\u5b9a\u8282\u70b9\u3002\u65e2\u7136\u9009\u5b9a\u4e86\u6211\u4eec\u4e5f\u8981\u628a\u5b83\u8ba1\u7b97\u5230 $tot$ \u91cc\u3002$f_x=-\\infty$\uff0c$g_x=0$\uff0c$++tot$(\u81ea\u8eab\u88ab\u9009\u5b9a\u4e86\u663e\u7136\u662f $0$ \u554a)\n- \u5f53$g_x>mid \\text{\u4e14} d_i=1$\uff0c\u8bf4\u660e\u5230 $root$ \u6700\u8fd1\u7684\u9009\u5b9a\u8282\u70b9\u65e0\u6cd5\u88ab\u4f7f\u7528\uff0c$root$ \u81ea\u8eab\u4e5f\u662f\u4e00\u4e2a\u5173\u952e\u8282\u70b9\u3002\u6240\u4ee5\u8fd9\u68f5\u5b50\u6811\u65e0\u6cd5\u88ab\u5b83\u7684\u5b50\u5b59\u8986\u76d6\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u68f5\u5b50\u6811\u53ef\u80fd\u65e0\u6cd5\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u53ef\u4ee5\u4e22\u7ed9\u5b83\u7684\u7236\u4eb2\u5904\u7406\u3002$f_x=\\max(f_x,0)$ (\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48)\u3002\n\n\u4ee5\u4e0aDP\u8fc7\u7a0b\u5927\u6982\u89e3\u91ca\u4e00\u4e0b\uff0c\u5f53\u6211\u4eec\u5c06 $f_x$ \u7f6e\u4e3a $-\\infty$ \u65f6\uff0c\u8bf4\u660e\u8be5\u5b50\u6811\u5df2\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5176\u7956\u5148\u7684 $f$ \u503c\u3002\n\n**\u4e00\u5b9a\u8981\u8bb0\u5f97\u7279\u5224\u6839\u554a\uff01\uff01\uff01**\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\n//f[i] \u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u672a\u88ab\u8986\u76d6\u7684\u6700\u8fdc\u8ddd\u79bb\n//g[i] \u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u88ab\u9009\u62e9\u7684\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\n#define max(a,b) ((a)>(b)? (a):(b))\n#define min(a,b) ((a)<(b)? (a):(b))\ntypedef long long ll;\nconst ll inf=1e8;\nint n,m,res=0,cnt=0,tot=0;\nint b[300005];\nll f[300005],g[300005];\nint h[300005],to[600005],ver[600005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void add(int x,int y) {\n\tto[++cnt]=y;\n\tver[cnt]=h[x];\n\th[x]=cnt;\n}\nvoid dfs(int x,int fa,int mid) {\n\tf[x]=-inf;g[x]=inf;\n\tfor(register int i=h[x];i;i=ver[i]) {\n\t\tint y=to[i];\n\t\tif(y==fa) continue;\n\t\tdfs(y,x,mid);\n\t\tf[x]=max(f[x],f[y]+1);\n\t\tg[x]=min(g[x],g[y]+1);\n\t}\n\tif(f[x]+g[x]<=mid) f[x]=-inf;//\u4e0d\u9700\u8981\u518d\u88ab\u8986\u76d6\uff0c\u76f4\u63a5\u7f6e\u4e3a-inf\n\tif(g[x]>mid&&b[x]==1) f[x]=max(f[x],0);//\u5f53\u524d\u65e0\u6cd5\u8986\u76d6\uff0c\u9700\u8981\u7236\u4eb2\u5e2e\u5fd9\n\tif(f[x]==mid) f[x]=-inf,g[x]=0,++tot;//\u4e0d\u9700\u8981\u518d\u88ab\u8986\u76d6\n}\nint check(int x) {\n\ttot=0;\n\tdfs(1,-1,x);\n\tif(f[1]>=0) ++tot;\n\treturn tot<=m;\n}\nint main() {\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;++i) b[i]=read();\n\tfor(register int i=1;i<n;++i) {\n\t\tint x=read(),y=read();\n\t\tadd(x,y);add(y,x);\n\t}\n\tint L=0,R=n;\n\twhile(L<=R) {\n\t\tint mid=L+R>>1;\n\t\tif(check(mid)) {R=mid-1;res=mid;}\n\t\telse {L=mid+1;}\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1584361571,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3523 \u3010[POI2011]DYN-Dynamite\u3011"
    },
    {
        "content": "\u9898\u610f:\u7ed9\u4e00\u68f5\u6811,\u6811\u4e0a\u6709\u4e00\u4e9b\u5173\u952e\u8282\u70b9,\u9009m\u4e2a\u70b9,\u4f7f\u5f97\u5173\u952e\u8282\u70b9\u5230\u8fd9\u4e9b\u70b9\u4e2d\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u6700\u5c0f\n\n\u6700\u5927\u503c\u6700\u5c0f,\u679c\u65ad\u4e8c\u5206\u7b54\u6848\n\n\u6211\u4eec\u53ea\u9700\u8981\u5224\u5b9a\u662f\u5426\u5b58\u5728m\u4e2a\u70b9\u80fd\u591f\u5728mid\u8303\u56f4\u5185\u5230\u8fbe\u6240\u6709\u5173\u952e\u70b9\n\n\u66b4\u529b:\u4ece\u6bcf\u4e2a\u70b9bfs\u4e00\u904d\u770b\u770bmid\u8303\u56f4\u80fd\u662f\u5426\u80fd\u8986\u76d6\u5230\u6240\u6709\u7684\u70b9,o(n^2logn)\n\n\u53d1\u73b0\u53ef\u4ee5\u8d2a\u5fc3,\u4e00\u4e2a\u5173\u952e\u70b9\u8981\u4e48\u88ab\u5b83\u7684\u5b50\u6811\u5185\u7684\u70b9\u7ba1\u7406,\u8981\u4e48\u88ab\u5b83\u5b50\u6811\u5916\u7684\u70b9\u7ba1\u7406,\u4e8e\u662f\u6211\u4eec\u8bb0\u5f55\u4e2apair/struct\n\nfirst\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u76ee\u524d\u8fd8\u6ca1\u6709\u4eba\u7ba1\u7406\u7684\u5173\u952e\u70b9\u8ddd\u79bbx\u7684\u6700\u8fdc\u7684\u8ddd\u79bb,second\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9009\u62e9\u4e86\u7684\u70b9\u8ddd\u79bbx\u7684\u6700\u8fd1\u7684\u8ddd\u79bb.\n\n\u2460if(first+second<=mid)\u4ee5x\u4e3a\u6839\u7684\u6811\u662f\u53ef\u4ee5\u81ea\u5df1\u5904\u7406\u7684\n\n\u2461if(first==mid)\u5c31\u610f\u5473\u7740\u5fc5\u987b\u8981\u9009\u62e9x\u8fd9\u4e2a\u70b9\u4e86\n\n\u56e0\u4e3a\u518d\u5411\u4e0a\u4e00\u4e2a\u70b9\u8ddd\u79bb\u5c31\u8d85\u8fc7mid\u4e86,\u8fd9\u65f6\u5019\u5f3a\u5236\u9009\u62e9x\u8fd9\u4e2a\u70b9,\u5e76\u66f4\u65b0first\uff0csecond\u5373\u53ef\n\n\u2462if(\u8fd9\u4e2a\u70b9\u662f\u5173\u952e\u70b9&&second>mid)\u5c31\u8981\u66f4\u65b0first\u4e86\n\n\u6ce8\u610f\u51fa\u6765\u7684\u65f6\u5019\u8981\u7279\u52241(\u6811\u6839)\n",
        "postTime": 1509415931,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3523 \u3010[POI2011]DYN-Dynamite\u3011"
    },
    {
        "content": "\u770b\u5230\u4ee4\u6700\u5927\u503c\u6700\u5c0f\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e8c\u5206\u3002\u53c8~~\u5f88\u5957\u8def\u5730~~\u60f3\u5230\u8fd9\u4e2a\u8d2a\u5fc3\uff1a\u6309\u6df1\u5ea6\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u8003\u5bdf\u6240\u6709\u5173\u952e\u7ed3\u70b9\uff0c\u5047\u5982\u79bb\u5b83\u6700\u8fd1\u7684\u5df2\u9009\u62e9\u7ed3\u70b9\u8ddd\u79bb\u5176\u8d85\u8fc7\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\uff0c\u5219\u518d\u9009\u62e9\u4e00\u4e2a\u5b83\u7684\u5c3d\u91cf\u9760\u8fd1\u6839\u7ed3\u70b9\u7684\u7956\u5148\u3002\u6700\u540e\u5224\u65ad\u9009\u62e9\u7684\u7ed3\u70b9\u603b\u6570\u662f\u5426\u5c0f\u4e8e$M$\u3002  \n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u96be\u4ee5\u5feb\u901f\u627e\u51fa\u5f53\u524d\u70b9\u96c6\u4e2d\u8ddd\u79bb\u67d0\u4e2a\u7ed9\u5b9a\u7ed3\u70b9\u6700\u8fd1\u7684\u5143\u7d20\u3002\u5f88\u591a\u4eba\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\u624d\u653e\u5f03\u4e86\u8fd9\u4e2a\u505a\u6cd5\u7684\u3002\u4f46\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67d0\u4e9b\u529e\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0b\u9762\u662f\u4e24\u4e2a\u5b9e\u73b0\u8be5\u529f\u80fd\u7684\u65b9\u6cd5\u3002  \n\u4e00.\u6839\u53f7\u91cd\u6784\u6cd5  \n\u6839\u53f7\u91cd\u6784\u7ecf\u5e38\u88ab\u7528\u6765\u89e3\u51b3\u5404\u79cd\u52a8\u6001\u7ef4\u62a4\u95ee\u9898\uff0c\u6bd4\u5982P2137 Gty\u7684\u59b9\u5b50\u6811 \u548c \u671d\u9c9c\u6811 \u90fd\u7528\u5230\u4e86\u8fd9\u4e2a\u601d\u60f3\u3002  \n\u5177\u4f53\u5230\u672c\u9898\uff0c\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684\u70b9\u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u6b21dfs\uff08\u4e00\u6b21\u5904\u7406\u5b50\u6811\uff0c\u4e00\u6b21\u5904\u7406\u7956\u5148\uff09\u6765\u8f7b\u677e$O(n)$\u627e\u51fa\u8ddd\u79bb\u6bcf\u4e2a\u6811\u4e0a\u7ed3\u70b9\u6700\u8fd1\u7684\u70b9\u96c6\u5143\u7d20\u3002\u73b0\u5728\u9700\u8981\u5b9e\u73b0\u5411\u70b9\u96c6\u4e2d\u52a0\u5165\u5143\u7d20\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\uff1a  \n\u5f53\u6536\u5230\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5148\u4e0d\u6025\u7740\u66f4\u65b0\u6bcf\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u7684\u6700\u8fd1\u5143\u7d20\uff0c\u800c\u662f\u628a\u5b83\u50a8\u5b58\u8fdb\u4e00\u4e2a\u5f85\u4fee\u6539\u961f\u5217\uff0c\u7b49\u5230\u6512\u591f$\\sqrt{n}$\u4e2a\u64cd\u4f5c\u540e\u7edf\u4e00dfs\u4fee\u6539\u3002\u671f\u95f4\u6bcf\u6b21\u6536\u5230\u67e5\u8be2\u64cd\u4f5c\uff0c\u90fd\u8981\u904d\u5386\u6574\u4e2a\u961f\u5217\uff0c\u8003\u8651\u52a0\u5165\u961f\u5217\u4e2d\u7684\u5143\u7d20\u540e\u7684\u5f71\u54cd\u3002\u4e3a\u4e86\u52a0\u5feb\u901f\u5ea6\uff0c\u6211\u4eec\u4f7f\u7528\u6b27\u62c9\u5e8f\u6765$O(1)$\u6c42LCA\u548c\u7ed3\u70b9\u95f4\u8ddd\u79bb\u3002  \n\u8fd9\u6837\uff0c\u5747\u644a\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230$O(n\\sqrt{n})$\u3002\u901a\u8fc7\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c\u5f88\u5bb9\u6613\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u662f\u6700\u4f18\u7684\u3002\u7b97\u4e0a\u4e8c\u5206\u67e5\u627e\u7684\u5f00\u9500\uff0c\u603b\u5171$O(n\\sqrt{n}logn)$\u3002\u7ecf\u672c\u4eba\u6d4b\u8bd5\uff0c\u4e09\u5341\u4e07\u7684\u6570\u636e\u9700\u8981\u8fd0\u884c\u516d\u79d2\u5de6\u53f3\uff0c\u63d0\u4ea4\u4e0a\u53bb\u80fd\u5f97\u523080\u5206\u3002~~\u6216\u8bb8\u6709\u4eba\u80fd\u5361\u8fc7\u5462\uff1f~~  \n\u4ee3\u7801\u6700\u540e\u4e00\u8d77\u653e\u3002  \n\u4e8c.\u52a8\u6001\u70b9\u5206\u6cbb  \n\u5176\u5b9e\u4e86\u89e3\u8fc7\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u4eba\u4e0d\u96be\u60f3\u5230\u8fd9\u4e2a\u505a\u6cd5\u3002   \n\u9996\u5148\u5efa\u7acb\u70b9\u5206\u6cbb\u6811\uff0c\u5728\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u8054\u901a\u5757\u7684\u6240\u6709\u7ed3\u70b9\u4e2d\u6bcf\u4e2a\u5c5e\u4e8e\u70b9\u96c6\u7684\u7ed3\u70b9\u5230\u5206\u6cbb\u4e2d\u5fc3\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u67e5\u8be2\u548c\u4fee\u6539\u90fd\u662f\u4e00\u8def\u4ece\u64cd\u4f5c\u7ed3\u70b9\u722c\u5230\u6839\u7ed3\u70b9\u4fee\u6539\u3002  \n\u6bcf\u4e2a\u64cd\u4f5c$O(log^2n)$\uff0c\u4f46\u5bf9\u4e8e\u5e76\u975e\u4e13\u95e8\u6784\u9020\u7684\u6570\u636e\u5e38\u6570\u4e0d\u5927\u3002\u6240\u4ee5\u7b97\u4e0a\u4e8c\u5206\u67e5\u627e\u7684\u5f00\u9500\uff0c\u603b\u5171$O(nlog^3n)$\uff0c\u4f46\u5bf9\u4e8e\u6781\u9650\u6570\u636e\u7684\u5b9e\u9645\u8fd0\u884c\u65f6\u95f4\u5df2\u7ecf\u5f88\u63a5\u8fd1\u901a\u8fc7\u4e86\u3002\u4e0d\u8fc7\u6211\u5b9e\u73b0\u7684\u4e0d\u591f\u597d\uff0c\u53ea\u9a97\u5230\u4e8690\u5206\u3002\u5982\u679c\u6709\u5927\u4f6c\u628azkw\u7ebf\u6bb5\u6811\u4e4b\u7c7b\u7684\u4e1c\u897f\u90fd\u7528\u4e0a\uff0c\u5e94\u8be5\u662f\u53ef\u4ee5\u8fc7\u53bb\u7684\u3002  \n  \n \u4e0b\u9762\u662f\u4e24\u4efd\u4ee3\u7801\u3002\u9996\u5148\u662f\u6839\u53f7\u91cd\u6784\u6cd5\u3002\n ```\n#include <stdio.h>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <time.h>\n\n#pragma warning(disable:4996)\n\ntemplate<typename T> T min(T x, T y)\n{\n    return x < y ? x : y;\n}\ntemplate<typename T> T max(T x, T y)\n{\n    return x > y ? x : y;\n}\n\nconst int MAXN = 300005;\nconst int B = 400;\nconst int INF = 2000000005;\n\nstruct node {\n    int to;\n    node *next;\n};\nvoid addnode(node *&head, int to)\n{\n    node *p = new node;\n    p->to = to;\n    p->next = head;\n    head = p;\n}\n\nint N, M;\nnode *edge[MAXN];\nint deep[MAXN], fa[MAXN][25], key[MAXN], cnt;\nint rank[MAXN], st[MAXN * 2][25], len;\nint f[MAXN], list[MAXN], num;\nbool mark[MAXN];\n\nbool cmp(const int u, const int v)\n{\n    return deep[u] > deep[v];\n}\n\nint anc(int x, int k)\n{\n    for (int i = 0; i < 25; i++)\n        if (k&(1 << i))\n            x = fa[x][i];\n    return x;\n}\nint LCA(int x, int y)\n{\n    x = rank[x];\n    y = rank[y];\n    if (x > y)\n        std::swap(x, y);\n    int len = y - x + 1;\n    int t = 0;\n    while (1 << t <= len)\n        t++;\n    t--;\n    y = y - (1 << t) + 1;\n    return deep[st[x][t]] > deep[st[y][t]]? st[y][t] : st[x][t];\n}\nint dis(int x, int y)\n{\n    return deep[x] + deep[y] - 2 * deep[LCA(x, y)];\n}\n\nint nearest(int v)\n{\n    int x = f[v];\n    for (int i = 1; i <= num; i++)\n        x = min(x, dis(v, list[i]));\n    return x;\n}\n\nvoid dfs1(int v)\n{\n    f[v] = mark[v]? 0: INF;\n    for (node *p = edge[v]; p; p = p->next)\n        if (p->to != fa[v][0])\n        {\n            dfs1(p->to);\n            f[v] = min(f[v], f[p->to] + 1);\n        }\n}\nvoid dfs2(int v)\n{\n    f[v] = min(f[v], f[fa[v][0]] + 1);\n    for (node *p = edge[v]; p; p = p->next)\n        if (p->to != fa[v][0])\n            dfs2(p->to);\n}\n\nvoid insert(int v)\n{\n    list[++num] = v;\n    if (num == B)\n    {\n        for (int i = 1; i <= num; i++)\n            mark[list[i]] = true;\n        dfs1(1);\n        dfs2(1);\n        num = 0;\n    }\n}\n\nbool judge(int d)\n{\n    int i, n = 0;\n    num = 0;\n    memset(mark, 0, sizeof(mark));\n    memset(f, 63, sizeof(f));\n\n    for (i = 1; i <= cnt; i++)\n    {\n        if (nearest(key[i]) > d)\n        {\n            n++;\n            insert(anc(key[i], min(d, deep[key[i]])));\n        }\n    }\n    return n <= M;\n}\n\nvoid dfs(int v)\n{\n    st[++len][0] = v;\n    rank[v] = len;\n    for (int i = 1; i < 25; i++)\n        fa[v][i] = fa[fa[v][i - 1]][i - 1];\n    for (node *p = edge[v]; p; p = p->next)\n        if (p->to != fa[v][0])\n        {\n            fa[p->to][0] = v;\n            deep[p->to] = deep[v] + 1;\n            dfs(p->to);\n            st[++len][0] = v;\n        }\n}\n\nvoid init()\n{\n    int i, j, u, v;\n    \n    scanf(\"%d %d\", &N, &M);\n    for (i = 1; i <= N; i++)\n    {\n        scanf(\"%d\", &u);\n        if (u)\n            key[++cnt] = i;\n    }\n    for (i = 1; i < N; i++)\n    {\n        scanf(\"%d %d\", &u, &v);\n        addnode(edge[u], v);\n        addnode(edge[v], u);\n    }\n\n    dfs(1);\n    std::sort(key + 1, key + cnt + 1, cmp);\n\n    deep[0] = INF;\n    for (i = 1; i < 25; i++)\n    {\n        int r = min(1 << (i - 1), len);\n        for (j = 1; j <= len; j++)\n        {\n            if (r < len)\n                r++;\n            st[j][i] = cmp(st[j][i - 1], st[r][i - 1]) ?\n                st[r][i - 1] : st[j][i - 1];\n        }\n    }\n}\n\nint main()\n{\n    int l = -1, r = MAXN;\n\n    init();\n    while (r - l > 1)\n    {\n        int mid = (l + r) / 2;\n        if (judge(mid))\n            r = mid;\n        else\n            l = mid;\n    }\n\n    printf(\"%d\\n\", r);\n\n    return 0;\n}\n ```  \n \u63a5\u4e0b\u6765\u662f\u52a8\u6001\u70b9\u5206\u6cbb\n ```\n#include <stdio.h>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <time.h>\n\n#pragma warning(disable:4996)\n\ntemplate<typename T> T min(T x, T y)\n{\n    return x < y ? x : y;\n}\ntemplate<typename T> T max(T x, T y)\n{\n    return x > y ? x : y;\n}\n\nconst int MAXN = 300005;\nconst int INF = 2000000005;\n\nstruct tree{\nprivate:\n    int l;\n    int r;\n    int mn;\n    tree *lson;\n    tree *rson;\npublic:\n    tree(int L, int R)\n    {\n        l = L;\n        r = R;\n        mn = INF;\n        lson = rson = NULL;\n    }\t\n    void fixup()\n    {\n        mn = INF;\n        if(lson)\n            mn = min(mn, lson->mn);\n        if(rson)\n            mn = min(mn, rson->mn);\n    }\n    void update(int id, int k)\n    {\n        if(l == r)\n        {\n            mn = k;\n            return;\n        }\n        int mid = (l + r) / 2;\n        if(id <= mid)\n        {\n            if(!lson)\n                lson = new tree(l, mid);\n            lson->update(id, k);\n        }\n        else\n        {\n            if(!rson)\n                rson = new tree(mid + 1, r);\n            rson->update(id, k);\n        }\n        fixup();\n    }\n    int query(int L, int R)\n    {\n        if(l >= L && r <= R)\n            return mn;\n        int mid = (l + r) / 2;\n        int x = INF;\n        if(L <= mid && lson)\n            x = min(x, lson->query(L, R));\n        if(R > mid && rson)\n            x = min(x, rson->query(L, R));\n        return x;\n    }\n    void clear()\n    {\n        mn = INF;\n        if(lson)\n            lson->clear();\n        if(rson)\n            rson->clear();\n    }\n};\n\nstruct node {\n    int to;\n    node *next;\n};\nvoid addnode(node *&head, int to)\n{\n    node *p = new node;\n    p->to = to;\n    p->next = head;\n    head = p;\n}\n\nint N, M;\nnode *edge[MAXN];\nint deep[MAXN], fa[MAXN][25], key[MAXN], cnt;\nint rank[MAXN], st[MAXN * 2][25], len;\n\nbool cmp(const int u, const int v)\n{\n    return deep[u] > deep[v];\n}\n\nint anc(int x, int k)\n{\n    for (int i = 0; i < 25; i++)\n        if (k&(1 << i))\n            x = fa[x][i];\n    return x;\n}\nint LCA(int x, int y)\n{\n    x = rank[x];\n    y = rank[y];\n    if (x > y)\n        std::swap(x, y);\n    int len = y - x + 1;\n    int t = 0;\n    while (1 << t <= len)\n        t++;\n    t--;\n    y = y - (1 << t) + 1;\n    return deep[st[x][t]] > deep[st[y][t]]? st[y][t] : st[x][t];\n}\nint dis(int x, int y)\n{\n    return deep[x] + deep[y] - 2 * deep[LCA(x, y)];\n}\n\nnamespace DIV\n{\n    int fa[MAXN], cnt[MAXN];\n    bool mark[MAXN];\n    tree *T[MAXN];\n    int *list[MAXN];\n    \n    bool vis[MAXN];\n    int size[MAXN], mxs[MAXN], root, tot;\n    void dfs(int v, int fa)\n    {\n        size[v] = 1;\n        mxs[v] = 0;\n        for(node *p = edge[v]; p; p = p->next)\n            if(p->to != fa && !vis[p->to])\n            {\n                dfs(p->to, v);\n                size[v] += size[p->to];\n                mxs[v] = max(mxs[v], size[p->to]);\n            }\n        mxs[v] = max(mxs[v], tot - size[v]);\n        if(!root || mxs[root] > mxs[v])\n            root = v;\n    }\n    int getr(int v)\n    {\n        dfs(v, 0);\n        tot = size[v];\n        root = 0;\n        dfs(v, 0);\n        return root;\n    }\n    void pushin(int v, int fa, int *a, int &cur)\n    {\n        a[++cur] = v;\n        for(node *p = edge[v]; p; p = p->next)\n            if(p->to != fa && !vis[p->to])\n                pushin(p->to, v, a, cur);\n    }\n    void build(int v)\n    {\n        dfs(v, 0);\n        cnt[v] = size[v];\n        T[v] = new tree(1, cnt[v]);\n        list[v] = new int[cnt[v] + 2];\n        cnt[v] = 0;\n        pushin(v, 0, list[v], cnt[v]);\n        std::sort(list[v] + 1, list[v] + cnt[v] + 1);\t\n        \n        vis[v] = true;\n        for(node *p = edge[v]; p; p = p->next)\n            if(!vis[p->to])\n            {\n                int t = getr(p->to);\n                fa[t] = v;\n                build(t);\n            }\n    }\n    void update(int v)\n    {\n        mark[v] ^= 1;\n        int p = std::lower_bound(list[v] + 1, list[v] + cnt[v] + 1, v) - list[v];\n        if(mark[v])\n            T[v]->update(p, 0);\n        else\n            T[v]->update(p, INF);\n        int x = v;\n        while(fa[v])\n        {\n            v = fa[v];\n            p = std::lower_bound(list[v] + 1, list[v] + cnt[v] + 1, x) - list[v];\n            T[v]->update(p, mark[x]? dis(v, x): INF);\n        }\n    }\n    int query(int v)\n    {\n        if(mark[v])\n            return 0;\n        int x = v;\n        int d = T[v]->query(1, cnt[v]);\n        while(fa[v])\n        {\n            v = fa[v];\n            d = min(d, dis(v, x) + T[v]->query(1, cnt[v]));\n        }\n        return d;\n    }\n    void clear()\n    {\n        memset(mark, 0, sizeof(mark));\n        for(int i = 1; i <= N; i++)\n            T[i]->clear();\n    }\n}\n\nbool judge(int d)\n{\n    int i, n = 0;\n    DIV::clear();\n\n    for (i = 1; i <= cnt; i++)\n    {\n        if (DIV::query(key[i]) > d)\n        {\n            n++;\n            DIV::update(anc(key[i], min(d, deep[key[i]])));\n        }\n    }\n    return n <= M;\n}\n\nvoid dfs(int v)\n{\n    st[++len][0] = v;\n    rank[v] = len;\n    for (int i = 1; i < 25; i++)\n        fa[v][i] = fa[fa[v][i - 1]][i - 1];\n    for (node *p = edge[v]; p; p = p->next)\n        if (p->to != fa[v][0])\n        {\n            fa[p->to][0] = v;\n            deep[p->to] = deep[v] + 1;\n            dfs(p->to);\n            st[++len][0] = v;\n        }\n}\n\nvoid init()\n{\n    int i, j, u, v;\n    \n    scanf(\"%d %d\", &N, &M);\n    for (i = 1; i <= N; i++)\n    {\n        scanf(\"%d\", &u);\n        if (u)\n            key[++cnt] = i;\n    }\n    for (i = 1; i < N; i++)\n    {\n        scanf(\"%d %d\", &u, &v);\n        addnode(edge[u], v);\n        addnode(edge[v], u);\n    }\n\n    dfs(1);\n    std::sort(key + 1, key + cnt + 1, cmp);\n\n    deep[0] = INF;\n    for (i = 1; i < 25; i++)\n    {\n        int r = min(1 << (i - 1), len);\n        for (j = 1; j <= len; j++)\n        {\n            if (r < len)\n                r++;\n            st[j][i] = cmp(st[j][i - 1], st[r][i - 1]) ?\n                st[r][i - 1] : st[j][i - 1];\n        }\n    }\n    \n    DIV::build(DIV::getr(1));\n}\n\nint main()\n{\n    int l = -1, r = MAXN;\n\n    init();\n    while (r - l > 1)\n    {\n        int mid = (l + r) / 2;\n        if (judge(mid))\n            r = mid;\n        else\n            l = mid;\n    }\n\n    printf(\"%d\\n\", r);\n\n    return 0;\n}\n ``` \n \u5c31\u8fd9\u4e48\u591a\u5566\uff01~~\u7136\u800c\u6211\u6700\u540e\u8fd8\u662f\u5199\u7684\u6b63\u89e3\u624d\u5361\u8fc7\u3002\u3002~~",
        "postTime": 1544459585,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3523 \u3010[POI2011]DYN-Dynamite\u3011"
    },
    {
        "content": "## \u9898\u89e3- P3523 DYN-Dynamite\n\n* **\u9898\u76ee\u610f\u601d**\n\t\n    \u5c31\u662f\u5728\u4e00\u9897\u6811\u4e2d\u9009$m$\u4e2a\u70b9\u4f7f\u5f97\u8fd9$m$\u4e2a\u70b9\u5230\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\u3002\n    \n* $Sol$\n\t\n    * [\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P3942)\n    \n    \u603b\u7b97\u770b\u61c2\u9898\u89e3\u6765\u91cd\u65b0\u7406\u89e3\u4e00\u904d\uff0c\u52a0\u6df1\u8bb0\u5fc6\u3002\u3002\n    \n    \u56de\u5f52\u6b63\u9898\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6211\u4eec\u6c42\u6700\u5927\u503c\u6700\u5c0f\u663e\u7136\u4f1a\u60f3\u5230\u4e8c\u5206\u3002\n    \n    \u9996\u5148\u6211\u4eec\u8bbe\u51e0\u4e2a\u53d8\u91cf\uff1a\n    \n    $f_i$\u8868\u793a\u4ee5$i$\u4e3a\u5b50\u6811\u6700\u8fd1\u9009\u62e9\u8282\u70b9\u7684\u8ddd\u79bb\n    \n    $g_i$\u8868\u793a\u4ee5$i$\u4e3a\u5b50\u6811\u6700\u8fdc\u8fd8\u6ca1\u6709\u9009\u62e9\u7684\u5173\u952e\u70b9\u8ddd\u79bb\n    \n    $mid$\u8868\u793a\u6211\u4eec\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\n    \n    \u5bf9\u4e8e\u6c42$f_i,g_i$\u8fd8\u662f\u6bd4\u8f83\u57fa\u7840\u7684\uff1a\n    \t\n    $f_u=\\min\\{f_v+1,f_u\\},v\u2208u$\n    \n    $g_u=\\max\\{g_v+1,g_u\\},v\u2208u$\n    \n    \u4f46\u662f\u91cd\u70b9\u6765\u4e86\uff01\n    \n    \u8981\u5206$3$\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\uff1a\n    \n    $(i) f_u>mid$\u5e76\u4e14$u$\u4e3a\u5173\u952e\u70b9\\\n\t\t$g_u=\\max\\{g_u,0\\}$\n        \n     \u5982\u4f55\u7406\u89e3\u5462\uff1f\u56e0\u4e3a\u6700\u8fd1\u7684\u70b9\u6682\u65f6\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\n     \n    $(ii) f_u+g_u\\leq mid $\n    \n    \u73b0\u5728$g_u=-oo$,\u56e0\u4e3a\u4ee5$u$\u4e3a\u5b50\u6811\u7684\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u6ca1\u6709\u65e0\u6cd5\u8986\u76d6\u7684\u70b9\u6545$g_u=-oo$\n    \n    $(iii) g_u=mid$\n    \n    \u73b0\u5728\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u6700\u8fdc\uff0c\u65e0\u6cd5\u9009\u62e9\u66f4\u8fdc\u7684\u5566\u3002\u6240\u4ee5\u8fd9\u4e2a\u70b9\u5fc5\u987b\u8981\u9009\uff0c\u6545$f_u=0$\u56e0\u4e3a\u81ea\u5df1\u9009\u81ea\u5df1\u6700\u8fd1\u4e3a$0$\uff0c$g_u=-oo$\u3002\n    \n    \u4f46\u662f\u6700\u540e\u8fd8\u8981\u5224\u65ad\u6839\u8282\u70b9\u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002\n    \n```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint sum=0,ff=1; char ch=getchar();\n\twhile(!isdigit(ch))\n\t{\n\t\tif(ch=='-') ff=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch))\n\t\tsum=sum*10+(ch^48),ch=getchar();\n\treturn sum*ff;\n}\n\nconst int N=5e5+5;\n\nint n,m,cnt,f[N],g[N],is[N],head[N],ans,gs;\n\nstruct nood\n{\n\tint nex,to;\n};\nnood e[N*2];\n\ninline void jia(int u,int v)\n{\n\te[++cnt].nex=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;\n}\n\ninline void dfs(int u,int fa,int x)\n{\n\tf[u]=1e9;\n\tg[u]=-1e9;\n\tfor ( int i=head[u];i;i=e[i].nex )\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs(v,u,x);\n\t\tf[u]=min(f[v]+1,f[u]);\n\t\tg[u]=max(g[v]+1,g[u]);\n\t}\n\tif(is[u]&&f[u]>x) g[u]=max(g[u],0);\n\tif(g[u]+f[u]<=x) g[u]=-1e9;\n\tif(g[u]==x)\n\t\tgs++,g[u]=-1e9,f[u]=0;\n}\n\ninline bool check(int mid)\n{\n\tgs=0;\n\tdfs(1,0,mid);\n\tgs+=(g[1]>=0);\n\treturn gs<=m;\n}\n\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor ( int i=1;i<=n;i++ ) \n\t\tis[i]=read();\n\tfor ( int i=1;i<n;i++ )\n\t{\n\t\tint x,y;\n\t\tx=read(),y=read();\n\t\tjia(x,y);\n\t\tjia(y,x);\n\t}\n\tint l=0,r=n;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\t\n```\n\n    ",
        "postTime": 1582615106,
        "uid": 308464,
        "name": "\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3523 \u3010[POI2011]DYN-Dynamite\u3011"
    },
    {
        "content": "### [POI2011]DYN-Dynamite\n\n\u6211\u4eec\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\uff0c\u81ea\u7136\u5730\u60f3\u5230\u4e8c\u5206\uff0c\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u9898\u76ee\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u70b9\u80fd\u8986\u76d6mid\u8303\u56f4\u5185\u7684\u70b9\uff0c\u6c42\u8981\u6709\u51e0\u4e2a\u70b9\u80fd\u5168\u90e8\u8986\u76d6\u6240\u6709\u7684\u7279\u6b8a\u70b9\u3002\u60f3\u5230\u6d88\u9632\u5c40\u7684\u8bbe\u7acb\uff1a\u4f46\u662f\u8fd9\u9053\u9898\u76ee\u53c8\u4e0d\u80fd\u90a3\u4e48\u505a\u3002\u8003\u8651DP\uff0c\u8bbeF[i]\u8868\u793a\n\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u6700\u8fdc\u7684\u70b9\uff0cg[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u8ddd\u79bbi\u6700\u8fd1\u7684\u5df2\u8bbe\u7acb\u7684\u70b9\uff08\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u64cd\u4f5c?\u8003\u8651\u6811\u5f62dp\u4e00\u822c\u662f\u5012\u7740\u8dd1dfs\u7684\uff0c\u6211\u4eec\u6289\u62e9\u8981\u4e0d\u8981\u8bbe\u7acb\u70b9\u80af\u5b9a\u8981\u8003\u8651\u8ddd\u79bb\u5b83\u6700\u8fdc\u7684\u672a\u88ab\u8986\u76d6\u7684\u70b9\uff0c\u800c\u8ddd\u79bb\u8be5\u70b9\u8f83\u8fdc\u7684\u5df2\u8bbe\u7acb\u7684\u70b9\u4e00\u5b9a\u5df2\u7ecf\u5728\u4e4b\u524d\u8003\u8651\u8fc7\u4e86\uff09\u8fd9\u6709\u65e0\u540e\u6548\u6027\u5462\uff1f\u57fa\u4e8e\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u5982\u679cF[i]==mid,\u6211\u4eec\u5fc5\u987b\u9009\u8fd9\u4e2a\u70b9\uff08\u6b63\u786e\u6027\u663e\u7136\uff09\u3002\u6700\u540e\uff0c\u5982\u679c\u8be5\u70b9\u5fc5\u987b\u8981\u88ab\u8986\u76d6\u4f46g[i]>mid,\u6211\u4eec\u5c31\u8981\u66f4\u65b0\u4e00\u4e0bf[i],\u6700\u540e\u7279\u5224\u4e00\u4e0b\u6839\u8282\u70b9\u3002\n## code\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int maxn=700006;\nint n,m;\nbool pan[maxn];\nstruct hzw\n{\n\tint to,next,v;\n}e[maxn];\nint head[maxn],cur,tot,noc[maxn],hc[maxn];\ninline void add(int a,int b)\n{\n\te[cur].to=b;\n\te[cur].next=head[a];\n\thead[a]=cur++;\n}\ninline void dfs(int s,int k,int fa)\n{\n\tnoc[s]=-0x3f3f3f3f,hc[s]=0x3f3f3f3f;\n\tfor (int i=head[s];i!=-1;i=e[i].next)\n\t{\n\t\tif (e[i].to==fa) continue;\n\t\tdfs(e[i].to,k,s);\n\t\tnoc[s]=max(noc[s],noc[e[i].to]+1);\n\t\thc[s]=min(hc[s],hc[e[i].to]+1);\n\t}\n\tif (pan[s]&&hc[s]>k) noc[s]=max(noc[s],0);\n\tif (hc[s]+noc[s]<=k) noc[s]=-0x3f3f3f3f;\n\tif (noc[s]==k) {tot++;hc[s]=0,noc[s]=-0x3f3f3f3f;}\n}\ninline bool check(int mid)\n{\n\ttot=0;\n\tdfs(1,mid,1);\n\tif (noc[1]>=0) tot++;\n\treturn tot<=m;\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tcin>>n>>m;\n\tfor (int i=1;i<=n;++i) scanf(\"%d\",&pan[i]);\n\tfor (int i=1,a,b;i<=n-1;++i)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tint l=0,r=n,ans=n;\n\twhile (l<=r)\n\t{\n\t\t\n\t\tint mid=(l+r)>>1;\n\t\tif (check(mid))\n\t\t{\n\t\t\tr=mid-1;\n\t\t\tans=min(ans,mid);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t}\t\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1536406529,
        "uid": 54926,
        "name": "Apricot",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3523 \u3010[POI2011]DYN-Dynamite\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e4d\u4e00\u770b\u975e\u5e38\u6bd2\u7624~~\uff08\u5176\u5b9e\u6211\u8fde\u9898\u90fd\u6ca1\u770b\u61c2\uff09~~\n\n\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\uff0c\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u7b54\u6848\n\n\u6211\u4eec\u76f4\u63a5\u4e8c\u5206\u51fa\u9898\u76ee\u6240\u6c42\u7684\u201c\u5173\u952e\u8282\u70b9\u5230\u8fd9\u4e9b\u70b9\u4e2d\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u201d\n\n\u7136\u540e\u9898\u610f\u8f6c\u5316\u6210\u4e3a\uff1a\u5df2\u77e5\u4e00\u4e2a\u70b9\u53ef\u4ee5\u8986\u76d6\u7684\u8303\u56f4\uff0c\u5224\u65ad\u80fd\u5426\u7528\u4e0d\u8d85\u8fc7m\u4e2a\u70b9\u8986\u76d6\u6574\u68f5\u6811\n\n\u90a3\u4e48\u5982\u4f55check\u4e8c\u5206\u7684\u7b54\u6848\u5462\uff1f\n\n\u53ef\u4ee5\u7528\u8d2a\u5fc3\u89e3\u51b3~~\uff08\u867d\u7136\u6211\u4e5f\u662f\u770b\u4e86\u9898\u89e3\uff09~~\n\n\u4ece1\u53f7\u8282\u70b9\u5f00\u59cbdfs\uff0c\u76f4\u5230\u5f53\u524d\u8282\u70b9k\u4e0e\u5173\u952e\u8282\u70b9\u7684\u8ddd\u79bb\u8fbe\u5230mid\uff0c\u5c31\u628ak\u9009\u4e2d\n\n\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff1a\n\n\u5982\u679c\u5728k\u7684\u5b50\u6811\u4e2d\u9009\u62e9\u4e86\u8282\u70b9\uff0c\u5219\u5176\u5411\u4e0a\u80fd\u8986\u76d6\u7684\u8303\u56f4\u4e00\u5b9a\u4e0d\u4f1a\u8d85\u8fc7k\u7684\u8986\u76d6\u8303\u56f4\n\n\u697c\u4e0bKelin\u5927\u4f6c\u8bb2\u5f97\u975e\u5e38\u8be6\u7ec6~~\uff08\u592a\u5f3a\u4e86\uff09~~\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=3e5+5;\nstruct edge\n{\n\tint to,nxt;\n}edge[N<<1];\nint n,m,num,t,tot,f[N],fa[N],cnt[N],head[N];\nbool ex[N];\ninline int read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile (!isdigit(c)&&c!='-') c=getchar();\n\tif (c=='-') c=getchar(),w=-1;\n\twhile (isdigit(c))\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\ninline void add_edge(int from,int to)\n{\n\tedge[++num].nxt=head[from];\n\tedge[num].to=to;\n\thead[from]=num;\n}\nvoid dfs(int k)//\u5df2\u77e5\u8986\u76d6\u8303\u56f4\uff0c\u7528\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6574\u68f5\u6811\uff08\u4ece\u4e0b\u5411\u4e0a\u8d2a\u5fc3\uff0c\u5fc5\u987b\u9009\u624d\u9009\uff09 \n{\n\tint tmp1=ex[k]?0:-1e7,tmp2=-1e7;\n\tfor (reg int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (v==fa[k]) continue;\n\t    fa[v]=k; dfs(v);\n\t    if (cnt[v]==1) tmp1=max(tmp1,f[v]+1);\n\t    if (cnt[v]==2) tmp2=max(tmp2,f[v]-1);\n\t}\n\tif (tmp1>tmp2)\n\t  if (tmp1==t) ++tot,cnt[k]=2,f[k]=t;\n\t  else cnt[k]=1,f[k]=tmp1;\n\telse cnt[k]=2,f[k]=tmp2;\n}\ninline bool check(int k)//\u5373\u4e00\u4e2a\u9009\u62e9\u70b9\u80fd\u8986\u76d6\u7684\u8303\u56f4 \n{\n\tt=k; tot=0; dfs(1);\n\tif (f[1]>=0&&cnt[1]==1) ++tot;\n\treturn tot<=m;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor (reg int i=1;i<=n;ex[i++]=read());\n\tfor (reg int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tint l=0,r=n,ans=0;\n\twhile (l<=r)\n\t{\n\t\tint mid=(l+r)>>1;//\u5173\u952e\u70b9\u4e0e\u9009\u62e9\u70b9\u4e4b\u95f4\u8ddd\u79bb\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c \n\t\tif (check(mid))\n\t\t{\n\t\t\tans=mid; r=mid-1;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1522147995,
        "uid": 43471,
        "name": "Captain_Paul",
        "ccfLevel": 0,
        "title": "P3523 [POI2011]DYN-Dynamite"
    }
]