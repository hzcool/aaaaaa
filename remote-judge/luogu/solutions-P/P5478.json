[
    {
        "content": "\u8fd9\u4e2a\u9898\u5176\u5b9e~~\u5e76\u6ca1\u6709~~\u505a\u6cd5\u663e\u7136\n\n\u9996\u5148\u6211\u4eec\u628a\u64cd\u4f5c\u62bd\u8c61\u4e3a3\u79cd\n\n1 .\u67e5\u8be2\u8def\u5f84\u4e0a\u7684\u7b2ck\u5927\u503c\n\n2 .\u5220\u9664\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u6743\u503c\n\n3 .\u7ed9\u67d0\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a\u6743\u503c\n\n\u90a3\u4e48\u9a91\u58eb\u642c\u5bb6\u548c\u6b66\u529b\u503c\u4fee\u6b63\u5c31\u7edf\u4e00\u4e86\n\n\u90a3\u4e48\u975e\u5e38\u81ea\u7136\u7684\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u7528\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4,\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5b58\u7684\u5c31\u662f\u76f8\u5e94\u533a\u95f4\u7684\u524dk\u5927\u503c(\u524dk\u4e2a,\u5373\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u6570\u7ec4).\u81f3\u4e8e\u539f\u56fe\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u6709\u591a\u4e2a\u6743\u503c\u600e\u4e48\u5904\u7406\u5462?\u975e\u5e38\u7b80\u5355,\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2amultiset\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\n\n\u4e0b\u9762\u76f4\u63a5\u8d34\u4ee3\u7801,\u5e94\u8be5\u4e0d\u662f\u5f88\u96be\u61c2,\u53d8\u91cf\u540d\u5e94\u8be5\u8fd8\u662f\u86ee\u6e05\u6670\u7684\n\n```cpp\n#include <bits/stdc++.h>\n#define LS tree[rt].son[0]\n#define RS tree[rt].son[1]\nusing namespace std;\n\nconst int N=1e5+5;\n\nint n,m,root,q,k;\n\nint power[N];\nmultiset<int,greater<int> > s[N];\nmultiset<int>::iterator it;\n\nstruct Tree {\n\tint rank[25];\n\tint son[2];\n} tree[N*20];\nint tot;\n\nbool cmp(int a,int b) {\n\treturn a>b;\n}\n\nvoid push_up(int rt) {\n\ttree[rt].rank[0]=0;\n\tint j=1;\n\tfor(int i=1; i<=tree[RS].rank[0]; i++) {\n\t\tfor(; j<=tree[LS].rank[0]&&tree[LS].rank[j]>tree[RS].rank[i]; j++) {\n\t\t\ttree[rt].rank[++tree[rt].rank[0]]=tree[LS].rank[j];\n\t\t\tif(tree[rt].rank[0]>=k) return;\n\t\t}\n\t\ttree[rt].rank[++tree[rt].rank[0]]=tree[RS].rank[i];\n\t\tif(tree[rt].rank[0]>=k) return;\n\t}\n\tfor(; j<=tree[LS].rank[0]; j++) {\n\t\ttree[rt].rank[++tree[rt].rank[0]]=tree[LS].rank[j];\n\t\tif(tree[rt].rank[0]>=k) return;\n\t}\n\treturn;\n}\n\nvoid build(int &rt,int l,int r) {\n\tif(!rt) rt=++tot;\n\tif(l>=r) {\n\t\tfor(it=s[l].begin(); it!=s[l].end(); it++) {\n\t\t\ttree[rt].rank[++tree[rt].rank[0]]=*it;\n\t\t\tif(tree[rt].rank[0]>=k) break;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(LS,l,mid);\n\tbuild(RS,mid+1,r);\n\tpush_up(rt);\n}\n\nvoid modify(int &rt,int l,int r,int pos,int val) {\n\tif(!rt) rt=++tot;\n\tif(l>=r) {\n\t\ttree[rt].rank[0]=0;\n\t\tif(val<0) {\n\t\t\ts[pos].erase(s[pos].find(-val));\n\t\t} else s[pos].insert(val);\n\t\tfor(it=s[pos].begin(); it!=s[pos].end(); it++) {\n\t\t\ttree[rt].rank[++tree[rt].rank[0]]=*it;\n\t\t\tif(tree[rt].rank[0]>=k) break;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(pos<=mid) modify(LS,l,mid,pos,val);\n\telse modify(RS,mid+1,r,pos,val);\n\tpush_up(rt);\n}\n\nvoid query(int rt,int l,int r,int ll,int rr) {\n\tif(ll<=l&&rr>=r) {\n\t\tfor(int i=1; i<=tree[rt].rank[0]; i++)\n\t\t\tpower[++power[0]]=tree[rt].rank[i];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(ll<=mid) query(LS,l,mid,ll,rr);\n\tif(rr>mid) query(RS,mid+1,r,ll,rr);\n}\n\nstruct Edge {\n\tint v,next;\n} edge[N<<1];\nint head[N],cnt;\nvoid add(int u,int v) {\n\tedge[++cnt].v=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\n\nint deep[N],id[N],top[N],son[N],siz[N],parent[N],tim;\n\nvoid dfs1(int u,int fa) {\n\tdeep[u]=deep[fa]+1;\n\tparent[u]=fa;\n\n\tsiz[u]=1;\n\tfor(int i=head[u]; i; i=edge[i].next) {\n\t\tint v=edge[i].v;\n\t\tif(v==fa) continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int tp) {\n\tid[u]=++tim;\n\ttop[u]=tp;\n\tif(son[u]) dfs2(son[u],tp);\n\tfor(int i=head[u]; i; i=edge[i].next) {\n\t\tint v=edge[i].v;\n\t\tif(v==son[u]||deep[v]<deep[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nvoid treequery(int x,int y) {\n\tpower[0]=0;\n\twhile(top[y]!=top[x]) {\n\t\tif(deep[top[y]]>deep[top[x]]) swap(x,y);\n\t\tquery(root,1,n,id[top[x]],id[x]);\n\t\tx=parent[top[x]];\n\t}\n\tif(deep[y]>deep[x]) swap(x,y);\n\tquery(root,1,n,id[y],id[x]);\n\tif(power[0]==0) {\n\t\tputs(\"-1\");\n\t\treturn ;\n\t}\n\tsort(power+1,power+power[0]+1,cmp);\n\tfor(int i=1; i<=min(power[0],k); i++) printf(\"%d \",power[i]);\n\tputs(\"\");\n\treturn;\n}\n\nint loc[N],w[N];\n\n\n\nint main() {\n//\tfreopen(\"out.txt\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tfor(int i=1,u,v; i<n; i++) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tscanf(\"%d\",&m);\n\tfor(int i=1; i<=m; i++) {\n\t\tscanf(\"%d%d\",&w[i],&loc[i]);\n\t\ts[id[loc[i]]].insert(w[i]);\n\t}\n\tscanf(\"%d%d\",&q,&k);\n\tbuild(root,1,n);\n\tfor(int i=1,t,x,y; i<=q; i++) {\n\t\tscanf(\"%d%d%d\",&t,&x,&y);\n\t\tif(t==1) treequery(x,y);\n\t\tif(t==2) {\n\t\t\tmodify(root,1,n,id[loc[x]],-w[x]);\n\t\t\tloc[x]=y;\n\t\t\tmodify(root,1,n,id[loc[x]],w[x]);\n\t\t}\n\t\tif(t==3) {\n\t\t\tmodify(root,1,n,id[loc[x]],-w[x]);\n\t\t\tw[x]=y;\n\t\t\tmodify(root,1,n,id[loc[x]],w[x]);\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*\n5\n1 2\n1 3\n2 4\n2 5\n4\n10 1\n6 1\n14 5\n7 3\n6 3\n1 2 3\n1 5 3\n1 4 4\n3 1 4\n2 1 4\n1 2 3\n*/\n```\n\u8fd9\u91cc\u6211\u8fd8\u8111\u8865\u4e86\u53e6\u5916\u4e00\u79cd\u505a\u6cd5,\u6743\u5f53\u629b\u7816\u5f15\u7389~~\u56e0\u4e3a\u6211\u6ca1\u6709\u6572\u8fc7,\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7~~\n\n\u5982\u679c\u4e0d\u5e26\u4fee\u7684\u8bdd\u6211\u4eec\u7684\u6807\u51c6\u505a\u6cd5\u5c31\u662f\u4e3b\u5e2d\u6811\u4e0a\u6811,\u90a3\u5e26\u4fee\u600e\u4e48\u529e\u5462?\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5e26\u4fee\u4e3b\u5e2d\u6811,\u5373\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u7ebf\u6bb5\u6811.\u90a3\u4e48\u5982\u4f55\u5c06\u5176\u8fc1\u79fb\u5230\u6811\u4e0a\u5462?\u6211\u4eec\u53ef\u4ee5\u8003\u8651dfn\u5e8f.\n\n\u8003\u8651\u6211\u4eec\u5982\u679c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u6bb5\u5e8f\u5217(\u5c31\u662f\u5927\u5bb6\u5e73\u65f6\u505a\u7684\u52a8\n\u6001\u533a\u95f4k\u5c0f/\u5927\u503c),\u5355\u70b9\u4fee\u6539\u7684\u5f71\u54cd\u5c31\u662f\u8be5\u70b9\u4ee5\u53ca\u5176\u4ee5\u540e\u7684\u6240\u6709\u6743\u503c\u7ebf\u6bb5\u6811.\n\u5bf9\u4e8e\u8be5\u9898\u6211\u4eec\u5bf9\u4e8e\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811,\u8bb0\u5f55\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u4fe1\u606f(\u5c31\u662f\u6811\u4e0a\u4e3b\u5e2d\u6811\u7684\u505a\u6cd5).\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u53ea\u4f1a\u5f71\u54cd\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f.\u90a3\u4e48\u4e0e\u666e\u901a\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\u5c31\u5728\u8fd9\u91cc.\u6211\u4eec\u6bcf\u6b21\u4fee\u6539\u7684\u5f71\u54cd\u53ea\u6709\u5b50\u6811,\u56e0\u4e3a\u5b50\u6811\u5728dfn\u5e8f\u4e0a\u8868\u73b0\u4e3a\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4,\u90a3\u4e48\u6211\u4eec\u4e5f\u5c31\u80fd\u5904\u7406\u4e86.\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u6572\u4e00\u6572,\u770b\u4e00\u770b",
        "postTime": 1573037218,
        "uid": 122072,
        "name": "ykyyyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5478 \u3010[BJOI2015]\u9a91\u58eb\u7684\u65c5\u884c\u3011"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://registergen.github.io/post/solution-luogu-5478/)\n\n\u9707\u60ca\uff01\u6211\u7701\u7701\u9009\u7adf\u7136\u51fa\u677f\u9898\uff01\n\n# Solution\n\n\u5bb9\u6613\u60f3\u5230\uff0c\u76f4\u63a5\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u7684 $k$ \u4e2a\u6570\u5373\u53ef\u3002pushup \u5c31\u76f4\u63a5\u66b4\u529b\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5f00 $n$ \u4e2a `std::vector` $a$\uff0c$a_i$ \u8868\u793a\u5c45\u4f4f\u5728\u7b2c $i$ \u4e2a\u57ce\u5e02\u7684\u4eba\u7684\u96c6\u5408\u3002\u663e\u7136\uff0c\u6211\u4eec\u8981\u6839\u636e $a_i$ \u6765\u6784\u5efa\u53f6\u5b50\u7ed3\u70b9\u3002\n\n\u4fee\u6539\u5c31\u66b4\u529b\u91cd\u6784\u53f6\u5b50\u7ed3\u70b9\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u66b4\u529b\u5728 $a$ \u4e2d\u627e\u5230\u60f3\u6539\u7684\u4e1c\u897f\u3002\u4e8e\u662f\u6211\u4eec\u628a $a$ \u6362\u6210 `std::multiset` \u5373\u53ef\u3002\n\n\u5f53\u7136\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u9898\u662f\u5728\u6811\u4e0a\u641e\u4e8b\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u6811\u5256\u3002\n\n# Code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<functional> // for std::greater\n#include<set>\n\nconst int N=4e4;\n\nstruct Edge{int to,nxt;}e[N*2+10];int head[N+10],tote=1;\ninline void addEdge(int u,int v){e[++tote].to=v;e[tote].nxt=head[u];head[u]=tote;}\n\nint n,m,q,k,f[N+10],p[N+10]; // \u542b\u4e49\u540c\u9898\u9762\nstd::multiset<int,std::greater<int> > a[N+10];\nint fa[N+10],siz[N+10],son[N+10],dep[N+10],dfn[N+10],rk[N+10],top[N+10],cnt; // \u7528\u4e8e\u6811\u5256\u7684 8 \u4e2a\u53d8\u91cf\n\n// segment tree\nstruct SegTree{\n\tstruct Node{\n\t\tint res[25];\n\t\tNode(){memset(res,0,sizeof(res));}\n\t\tinline int& operator[](int i){return res[i];}\n\t};\n\n\tNode t[N*4+10];\n\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n\n\t// pushup\uff08\u66b4\u529b\u5408\u5e76\uff09\n\tinline Node pushUp(Node L,Node R){\n\t\tNode res;\n\t\tint tmp[45]={0},tott=0;\n\t\tfor(int i=1;i<=k;i++)\n\t\t\ttmp[++tott]=L[i],tmp[++tott]=R[i];\n\t\tstd::sort(tmp+1,tmp+tott+1,std::greater<int>());\n\t\tfor(int i=1;i<=k;i++)\n\t\t\tres[i]=tmp[i];\n\t\treturn res;\n\t}\n\n\t// \u5efa\u6811\n\tvoid build(int i,int l,int r){\n\t\tif(l==r){\n\t\t\tint cnt=0;\n\t\t\t// \u66b4\u529b\u53d6 std::multiset \u4e2d\u6700\u5927\u7684 k \u4e2a\u6570 \n\t\t\tfor(std::multiset<int,std::greater<int> >::iterator it=a[rk[l]].begin();it!=a[rk[l]].end()&&cnt<k;it++)\n\t\t\t\tt[i][++cnt]=*it;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ls(i),l,mid);\n\t\tbuild(rs(i),mid+1,r);\n\t\tt[i]=pushUp(t[ls(i)],t[rs(i)]);\n\t}\n\n\t// \u5c06\u7b2c rk[pos] \u4e2a\u57ce\u5e02\u7684\u6b66\u529b\u503c\u4e3a x \u7684\u4eba\u7684\u6b66\u529b\u503c\u6539\u4e3a y\n\t// \u6ce8\u610f\uff1a\u53ea\u80fd\u6539\u4e00\u4e2a\n\t// x = -1 \u65f6\u8868\u793a\u589e\u52a0\u4e00\u4e2a\u6b66\u529b\u503c\u4e3a y \u7684\u4eba\n\t// y = -1 \u65f6\u8868\u793a\u51cf\u5c11\u4e00\u4e2a\u6b66\u529b\u503c\u4e3a x \u7684\u4eba\n\tvoid modify(int i,int l,int r,int pos,int x,int y){\n\t\tif(l==r){\n\t\t\tif(x!=-1)a[rk[pos]].erase(a[rk[pos]].find(x)); // \u6ce8\u610f\u662f rk[pos] \u4e0d\u662f pos\uff01\n\t\t\tif(y!=-1)a[rk[pos]].insert(y);\n\t\t\tt[i]=Node();\n\t\t\tint cnt=0;\n\t\t\t// \u66b4\u529b\u91cd\u6784\n\t\t\tfor(std::multiset<int,std::greater<int> >::iterator it=a[rk[pos]].begin();it!=a[rk[pos]].end()&&cnt<k;it++)\n\t\t\t\tt[i][++cnt]=*it;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)modify(ls(i),l,mid,pos,x,y);\n\t\tif(pos>mid) modify(rs(i),mid+1,r,pos,x,y);\n\t\tt[i]=pushUp(t[ls(i)],t[rs(i)]);\n\t}\n\n\t// \u67e5\u8be2\u524d k \u5927\n\tNode query(int i,int l,int r,int ql,int qr){\n\t\tif(ql<=l&&r<=qr)return t[i];\n\t\tint mid=(l+r)>>1;\n\t\tif(qr<=mid)return query(ls(i),l,mid,ql,qr);\n\t\tif(ql>mid) return query(rs(i),mid+1,r,ql,qr);\n\t\treturn pushUp(query(ls(i),l,mid,ql,qr),query(rs(i),mid+1,r,ql,qr));\n\t}\n\n#undef ls\n#undef rs\n\n}t;\n\n// \u6811\u5256\u57fa\u672c\u64cd\u4f5c 1\nvoid DFS1(int u,int _fa){\n\tfa[u]=_fa;\n\tdep[u]=dep[_fa]+1;\n\tsiz[u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==_fa)continue;\n\t\tDFS1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\n\n// \u6811\u5256\u57fa\u672c\u64cd\u4f5c 2\nvoid DFS2(int u,int _fa,int _top){\n\tdfn[u]=++cnt;\n\trk[cnt]=u;\n\ttop[u]=_top;\n\tif(son[u])DFS2(son[u],u,_top);\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==_fa||v==son[u])continue;\n\t\tDFS2(v,u,v);\n\t}\n}\n\n// \u6811\u5256\u57fa\u672c\u64cd\u4f5c 3\uff08\u6811\u4e0a\u67e5\u8be2\uff09\nSegTree::Node query(int u,int v){\n\tSegTree::Node res;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])std::swap(u,v);\n\t\tres=t.pushUp(res,t.query(1,1,n,dfn[top[u]],dfn[u]));\n\t\tu=fa[top[u]];\n\t}\n\tif(dfn[u]>dfn[v])std::swap(u,v);\n\tres=t.pushUp(res,t.query(1,1,n,dfn[u],dfn[v]));\n\treturn res;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;scanf(\"%d%d\",&u,&v);\n\t\taddEdge(u,v);addEdge(v,u);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",f+i,p+i);\n\t\ta[p[i]].insert(f[i]);\n\t}\n\tscanf(\"%d%d\",&q,&k);\n\tDFS1(1,0),DFS2(1,0,0),t.build(1,1,n);\n\twhile(q--){\n\t\tint opt,x,y;\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt==1){\n\t\t\tSegTree::Node res=query(x,y);\n\t\t\tint ans[25]={0},tota=0;\n\t\t\tfor(int i=1;i<=k;i++)\n\t\t\t\tif(res[i])ans[++tota]=res[i];\n\t\t\tif(tota==0){puts(\"-1\");continue;}\n\t\t\tstd::sort(ans+1,ans+tota+1,std::greater<int>());\n\t\t\tfor(int i=1;i<=tota;i++)\n\t\t\t\tprintf(\"%d%c\",ans[i],\" \\n\"[i==tota]);\n\t\t}\n\t\tif(opt==2){\n\t\t\tt.modify(1,1,n,dfn[p[x]],f[x],-1);\n\t\t\tp[x]=y; // \u522b\u5fd8\u4e86\u6539\u8fd9\u4e2a\n\t\t\tt.modify(1,1,n,dfn[p[x]],-1,f[x]);\n\t\t}\n\t\tif(opt==3){\n\t\t\tt.modify(1,1,n,dfn[p[x]],f[x],y);\n\t\t\tf[x]=y; // \u522b\u5fd8\u4e86\u6539\u8fd9\u4e2a\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614265611,
        "uid": 242702,
        "name": "registerGen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5478 \u3010[BJOI2015]\u9a91\u58eb\u7684\u65c5\u884c \u9898\u89e3\u3011"
    },
    {
        "content": "## [Link](https://www.luogu.com.cn/problem/P5478)\n\n\u5728\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a ```multiset```\uff0c\u6bcf\u4e2a\u96c6\u5408\u91cc\u9762\u5b58\u5728\u8be5\u70b9\u4e0a\u9762\u7684\u9a91\u58eb\u7684\u6b66\u529b\u503c\u3002\n\n\u7136\u540e\u6811\u5256\uff0c\u5efa\u7ebf\u6bb5\u6811\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u533a\u95f4 $[l,r]$ \u4e2d\u524d $k$ \u5927\u7684\u9a91\u58eb\u7684\u7269\u7406\u503c\uff0c\u4e0d\u6ee1 $k$ \u4e2a\u5c31\u4e0d\u6ee1 $k$ \u4e2a\u3002\n\n\u8be2\u95ee\u5c31\u5728\u67e5\u8be2\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u66b4\u529b\u5408\u5e76\u9a91\u58eb\u7684\u6b66\u529b\u503c\u3002\u4e0d\u662f\u524d $k$ \u5927\u5c31\u76f4\u63a5\u4e22\u6389\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u4fee\u6539\u5148\u5c06\u5f53\u524d\u9a91\u58eb\u4ece\u5b83\u76ee\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u5220\u6389\uff0c\u628a\u7b2c $k+1$ \u5927\u66ff\u6362\u6210\u7b2c $k$ \u5927\u3002\u7136\u540e\u6dfb\u52a0\u5230\u65b0\u7684\u4f4d\u7f6e\u3002\u5728\u7ebf\u6bb5\u6811\u4e0a\u76f4\u63a5\u66b4\u529b\u6539\u5c31\u884c\u4e86\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u4fee\u6539\uff0c\u5148\u5c06\u5f53\u524d\u9a91\u58eb\u4ece\u5b83\u76ee\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u5220\u6389\uff0c\u5224\u65ad\u65b0\u52a0\u5165\u7684\u662f\u5426\u4e3a\u524d $k$ \u5927\uff0c\u662f\u5c31\u52a0\u5165\u3002\n\n\u56e0\u4e3a\u53ea\u9700\u8981\u7ef4\u62a4\u524d $k$ \u5927\uff0c\u6240\u4ee5\u540e\u9762\u53ef\u4ee5\u76f4\u63a5\u820d\u53bb\u3002\n\n\u6545\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((q+n)k\\log^2 n)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint s=0;char c=getchar();\n\tfor(;!isdigit(c);c=getchar());\n\tfor(;isdigit(c);c=getchar())\n\t\ts=s*10+c-'0';\n\treturn s;\n}\nint n,m,q,lim,a[40005],b[40005];\nint tot,head[40005];\nstruct edge{\n\tint to,nxt;\n}e[80005];\ninline void add(int u,int v)\n{\n\te[++tot].to=v;\n\te[tot].nxt=head[u];\n\thead[u]=tot;\n}\nint dep[40005],fa[40005],siz[40005],son[40005];\nvoid dfs1(int u,int father)\n{\n\tdep[u]=dep[father]+1,siz[u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==father)continue;\n\t\tfa[v]=u;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\nint top[40005],cnt,pos[40005];\nmultiset<int>val[40005],temp[40005];\nvoid dfs2(int u,int up)\n{\n\ttop[u]=up,pos[u]=++cnt,temp[cnt]=val[u];\n\tif(son[u])dfs2(son[u],up);\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\nstruct node{\n\tint l,r;\n\tvector<int>v;\n}s[160005];\ninline vector<int> merge(vector<int>x,vector<int>y)\n{\n\tint l1=0,l2=0;\n\tvector<int>res;\n\twhile(l1<x.size()&&l2<y.size())\n\t{\n\t\tif(x[l1]<y[l2])\n\t\t\tres.push_back(x[l1++]);\n\t\telse res.push_back(y[l2++]);\n\t\tif(res.size()==lim)return res;\n\t}\n\twhile(l1<x.size())\n\t{\n\t\tres.push_back(x[l1++]);\n\t\tif(res.size()==lim)return res;\n\t}\n\twhile(l2<y.size())\n\t{\n\t\tres.push_back(y[l2++]);\n\t\tif(res.size()==lim)return res;\n\t}\n\treturn res;\n}\nvoid build(int l,int r,int p)\n{\n\ts[p].l=l,s[p].r=r;\n\tif(l==r)\n\t{\n\t\tfor(multiset<int>::iterator it=temp[l].begin();it!=temp[l].end();it++)\n\t\t{\n\t\t\ts[p].v.push_back(*it);\n\t\t\tif(s[p].v.size()>=lim)break;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(l,mid,p*2);\n\tbuild(mid+1,r,p*2+1);\n\ts[p].v=merge(s[p*2].v,s[p*2+1].v);\n}\nvoid update_del(int pos,int val,int p)\n{\n\tif(pos>s[p].r||pos<s[p].l)return;\n\tif(s[p].l==s[p].r)\n\t{\n\t\tint ps=lower_bound(s[p].v.begin(),s[p].v.end(),val)-s[p].v.begin();\n\t\tif(s[p].v.begin()+ps!=s[p].v.end())\n\t\t\tif(*(s[p].v.begin()+ps)==val)\n\t\t\t\ts[p].v.erase(s[p].v.begin()+ps);\n\t\treturn;\n\t}\n\tupdate_del(pos,val,p*2),update_del(pos,val,p*2+1);\n\ts[p].v=merge(s[p*2].v,s[p*2+1].v);\n}\nvoid update_add(int pos,int val,int p)\n{\n\tif(pos>s[p].r||pos<s[p].l)return;\n\tif(s[p].l==s[p].r)\n\t{\n\t\tint ps=lower_bound(s[p].v.begin(),s[p].v.end(),val)-s[p].v.begin();\n\t\ts[p].v.insert(s[p].v.begin()+ps,val);\n\t\tif(s[p].v.size()>lim)s[p].v.pop_back();\n\t\treturn;\n\t}\n\tupdate_add(pos,val,p*2),update_add(pos,val,p*2+1);\n\ts[p].v=merge(s[p*2].v,s[p*2+1].v);\n}\nvector<int>zero;\nvector<int> query(int ql,int qr,int p)\n{\n\tif(ql>s[p].r||qr<s[p].l)return zero;\n\tif(ql<=s[p].l&&s[p].r<=qr)\n\t\treturn s[p].v;\n\treturn merge(query(ql,qr,p*2),query(ql,qr,p*2+1));\n}\ninline void ask(int u,int v)\n{\n\tvector<int>ans;ans.clear();\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tans=merge(ans,query(pos[top[u]],pos[u],1));\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])swap(u,v);\n\tans=merge(ans,query(pos[u],pos[v],1));\n\tif(ans.size()==0)printf(\"-1\");\n\telse for(int i=0;i<ans.size();i++)\n\t\tprintf(\"%d \",-ans[i]);\n\tprintf(\"\\n\");\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tadd(u,v),add(v,u);\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta[i]=-read(),b[i]=read();\n\t\tval[b[i]].insert(a[i]);\n\t}\n\tq=read(),lim=read();\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,n,1);\n\twhile(q--)\n\t{\n\t\tint op=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tint u=read(),v=read();\n\t\t\task(u,v);\n\t\t}\n\t\telse if(op==2)\n\t\t{\n\t\t\tint id=read(),u=read();\n\t\t\tupdate_del(pos[b[id]],a[id],1);\n\t\t\tval[b[id]].erase(val[b[id]].find(a[id]));\n\t\t\tif(val[b[id]].size()>=lim)\n\t\t\t{\n\t\t\t\tmultiset<int>::iterator it=val[b[id]].begin();\n\t\t\t\tfor(int i=1;i<lim;i++)it++;\n\t\t\t\tupdate_add(pos[b[id]],*it,1);\n\t\t\t}\n\t\t\tupdate_add(pos[u],a[id],1);\n\t\t\tval[u].insert(a[id]);\n\t\t\tb[id]=u;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint id=read(),k=-read();\n\t\t\tupdate_del(pos[b[id]],a[id],1);\n\t\t\tval[b[id]].erase(val[b[id]].find(a[id]));\n\t\t\tif(val[b[id]].size()<lim)\n\t\t\t\tupdate_add(pos[b[id]],k,1);\n\t\t\telse\n\t\t\t{\n\t\t\t\tmultiset<int>::iterator it=val[b[id]].begin();\n\t\t\t\tfor(int i=1;i<lim;i++)it++;\n\t\t\t\tif(-*it>=-k)update_add(pos[b[id]],*it,1);\n\t\t\t\telse update_add(pos[b[id]],k,1);\n\t\t\t}\n\t\t\tval[b[id]].insert(k);\n\t\t\ta[id]=k;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1673005393,
        "uid": 306049,
        "name": "Utilokasteinn",
        "ccfLevel": 0,
        "title": "P5478 [BJOI2015]\u9a91\u58eb\u7684\u65c5\u884c"
    }
]