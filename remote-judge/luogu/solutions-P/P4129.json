[
    {
        "content": "# \u524d\u8a00\n\n[\u8fd9\u91cc\u662f\u9898\u76ee\u3002](https://www.luogu.com.cn/problem/P4129)\n\n\u4e3b\u4f53\u4ee3\u7801\u6ca1\u95ee\u9898\uff0c\u9ad8\u7cbe\u5ea6\u6123\u662f\u641e\u4e86\u597d\u4e45\u3002\u3002\u3002\n\n# \u601d\u8def\n\n\n\u8fd9\u9898\u6211\u4eec\u9996\u5148\u8981\u5224\u65ad\u56fe\u662f\u4e0d\u662f\u4ed9\u4eba\u638c\uff0c\u7136\u540e\u8981\u6c42\u51fa\u628a\u4ed9\u4eba\u638c\u8fdb\u884c\u5220\u8fb9\u4e4b\u540e\u5f97\u5230\u7684\u56fe\u4ecd\u7136\u662f\u8fde\u901a\u56fe\u7684\u65b9\u6848\u6570\u3002\n\n\u5148\u770b\u770b\u8fd9\u4e2a\u65b9\u6848\u6570\u600e\u4e48\u6c42\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4ed9\u4eba\u638c\u56fe\u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\uff0c\u663e\u7136\u6211\u4eec\u53ea\u80fd\u5220\u73af\u4e0a\u7684\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u6761\u8fb9\u5220\u6389\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u5220\u3002\u8bbe\u7b2c $i$ \u4e2a\u73af\u7684\u8fb9\u6570\u4e3a $num_i$\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\u5f97\u5230\u7b54\u6848 $ans$\uff1a\n\n$$ ans = \\prod\\limits_{i=1}^{\\texttt{\u73af\u7684\u603b\u6570}}num_i + 1$$\n\n\u7136\u540e\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u600e\u4e48\u6c42\u73af\u548c $num_i$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 $\\text{dfs}$\uff0c\u6784\u9020\u51fa\u56fe\u7684\u751f\u6210\u6811\u3002\u5728 $\\text{dfs}$ \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9 $x$ \u7684\u521d\u59cb\u8bbf\u95ee\u65f6\u95f4 $dfn_x$ \u548c\u80fd\u591f\u5f80\u4e0a\u6700\u5927\u7a0b\u5ea6\u8ffd\u6eaf\u5230\u7684\u8282\u70b9 $low_x$\u3002\u5982\u679c\u8d70\u4e86\u8fd4\u79df\u8fb9\uff08\u8bbf\u95ee\u5230\u4e86\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u8bf4\u660e\u51fa\u73b0\u4e86\u73af\u3002\n\n\u90a3\u73af\u7684\u8fb9\u6570\u5462\uff1f\u6211\u4eec\u6784\u9020\u51fa\u6765\u751f\u6210\u6811\uff0c\u5982\u679c\u6709\u8fd4\u79df\u8fb9\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u5148\u4e00\u76f4\u5411\u4e0b\u8bbf\u95ee\u3001\u6784\u9020\uff0c\u7136\u540e\u5230\u4e86\u67d0\u4e2a\u8282\u70b9 $a$ \u5c31\u7a81\u7136\u5f80\u4e0a\u5230\u4e86\u53e6\u4e00\u4e2a\u8282\u70b9 $b$\u3002\u7531\u4e8e\u6211\u4eec\u4e00\u76f4\u5411\u4e0b\u6784\u9020\uff0c\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9\u56de\u5230 $b$\uff0c\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u8fd9\u4e2a\u73af\u7684\u8fb9\u6570\u5c31\u662f\u6211\u4eec\u4ece $b$ \u4e00\u76f4\u5411\u4e0b\u8d70\u5230 $a$ \u8d70\u7684\u8fb9\u6570\u52a0\u4e0a\u8fd9\u6761\u8fd4\u79df\u8fb9\u3002\u8fd9\u4e2a\u8fb9\u6570\u6211\u4eec\u53ef\u4ee5\u7528\u6df1\u5ea6\u7684\u5dee\u5f97\u5230\uff0c\u8bbe\u7b2c $i$ \u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a $dep_i$\uff0c\u5219\u73af\u7684\u8fb9\u6570\u4e3a $dep_b - dep_a + 1$\u3002\n\n\u5269\u4e0b\u7684\u95ee\u9898\u662f\u600e\u4e48\u5224\u65ad\u56fe\u662f\u4e0d\u662f\u4ed9\u4eba\u638c\u4e86\u3002\u7531\u56fe\u89c2\u5bdf\u53ef\u77e5\uff0c\u5982\u679c \u67d0\u4e2a\u8282\u70b9\u7684\u5b50\u5b59\u7684\u8fd4\u79df\u8fb9\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9\u4e4b\u4e0a \u4e0e \u8fd9\u4e2a\u8282\u70b9\u53d1\u51fa\u7684\u8fd4\u79df\u8fb9 \u7684\u548c $\\ge 2$\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e2a\u8282\u70b9\u5728\u4e24\u4e2a\u73af\u91cc\u4e86\uff0c\u8be5\u56fe\u4e0d\u662f\u4ed9\u4eba\u638c\u3002 \n\n\u60a8\u53ef\u80fd\u8981\u95ee\u4e3a\u5565\u4e0d\u7528 $\\text{bfs}$~~\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u83dc\u9e21\u8ba4\u4e3a $\\text{bfs}$ \u6709\u70b9\u96be\u641e\uff0c\u5e76\u4e14\u6bd4\u8f83\u64c5\u957f $\\text{dfs}$\u3002~~ $\\text{dfs}$ \u53ef\u4ee5\u6784\u9020\u51fa\u751f\u6210\u6811\uff0c\u6bd4\u8f83\u597d\u5904\u7406\u70b9\u6216\u8fb9\u51fa\u73b0\u7684\u987a\u5e8f\u5173\u7cfb\uff08\u4f8b\u5982\u53ef\u4ee5\u5904\u7406\u6df1\u5ea6\uff0c\u5229\u7528 $dfn$ \u548c $low$ \u5904\u7406\u73af\uff09\uff0c\u6240\u4ee5\u9009\u62e9\u7528 $\\text{dfs}$\u3002\n\n# \u4ee3\u7801\n\n>\u6ce8\u610f\u6700\u540e\u7684\u7b54\u6848\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u5927\u5f88\u5927\u7684\u6570\u3002\n\n\u6211\u4eec\u8981\u7528\u9ad8\u7cbe\u5ea6\u5b58\u7b54\u6848\u3002\n\n\u53ef\u80fd\u8981\u7528\u538b\u4f4d\u9ad8\u7cbe\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u83dc\u9e21 MLE \u4e86\u597d\u591a\u53d1\uff0c\u6700\u540e\u628a $base$ \u6539\u6210 $1e14$ \u624d\u8fc7\u7684\u3002\n\n```cpp\nvoid dfs(int x, int fa) {\n\t++num;\n\tint cnt = 0;                         // \u6c42\u8be5\u8282\u70b9\u6240\u5728\u73af\u7684\u4e2a\u6570 \n\tdfn[x] = low[x] = ++tot;\n\tfor (int i = he[x]; i; i = ne[i]) {\n\t\tint y = e[i];\n\t\tif (y == fa) continue; \n\t\tif (!dfn[y]) {                   // \u5982\u679c\u662f\u6811\u679d\u8fb9 \n\t\t\tdep[y] = dep[x] + 1;         // \u8ba1\u7b97\u6df1\u5ea6 \n\t\t\tdfs(y, x);\n\t\t\tlow[x] = min(low[x], low[y]);// \u6c42\u6700\u5927\u7a0b\u5ea6\u8ffd\u6eaf\u7684\u8282\u70b9 \n\t\t\tif (low[y] < dfn[x]) ++cnt;  // \u6709\u4e2a\u513f\u5b50\u7684\u8fd4\u79df\u8fb9\u5728 y \u4e4b\u4e0a\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f < \uff0c\u9898\u76ee\u4e2d\u8bf4\u7684\u662f\u8fb9 \n\t\t} else if (dfn[y] < dfn[x]) {    // \u662f\u8fd4\u79df\u8fb9 \n\t\t\tif (dep[x] - dep[y] > 1) ans = ans * (dep[x] - dep[y] + 2); // \u8ba1\u7b97\u7b54\u6848 \n\t\t\t++cnt;\n\t\t\tlow[x] = min(low[x], dfn[y]);// \u6c42\u6700\u5927\u7a0b\u5ea6\u8ffd\u6eaf\u7684\u8282\u70b9 \n\t\t}\n\t\tif (cnt == 2) ok = 0;            // \u4e0d\u662f\u4ed9\u4eba\u638c \n\t}\n}\nint main() {\n\tans = 1;\n\tn = read(), m = read();\n\tfor (int i = 1, t, lst; i <= m; ++i) {\n\t\tt = read(), lst = read();\n\t\tfor (int j = 2, x; j <= t; ++j) {\n\t\t\tx = read();\n\t\t\te[++tot] = x, ne[tot] = he[lst], he[lst] = tot;\n\t\t\te[++tot] = lst, ne[tot] = he[x], he[x] = tot;\n\t\t\tlst = x;\n\t\t}\n\t}\n\ttot = 0;\n\tdfs(1, 1);\n\tif (num != n) ok = 0;               // \u4e0d\u8fde\u901a    \n\tif (ok) ans.pr();\n\telse puts(\"0\");\n\treturn 0;\n}\n```\n\n\n# \u540e\u8bb0\n\n\u5efa\u8bae\u5148\u5199\u4e3b\u4f53\u90e8\u5206\u518d\u52a0\u9ad8\u7cbe\u677f\u5b50\uff0c\u8981\u4e0d\u7136\u5f88\u96be\u77e5\u9053\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u3002\u7528 `int` \u80fd\u6709 $70$ \u5206\u3002",
        "postTime": 1673970768,
        "uid": 365825,
        "name": "Orange_qwq",
        "ccfLevel": 0,
        "title": "P4129 [SHOI2006]\u4ed9\u4eba\u638c"
    },
    {
        "content": "~~\u88654.15\u7684CF\u5b9e\u5728\u81ea\u95ed \u5199\u4e00\u9053\u9ad8\u9759\u51b7\u9759\u4e00\u4e0b~~\n\n\u8fd9\u9053\u9898\u8981\u6c42\u6211\u4eec\u6c42\u4ed9\u4eba\u638c\u7684\u652f\u6491\u5b50\u56fe\u7684\u4e2a\u6570.\n\n\u9996\u5148\u8981\u5224\u5b9a\u4ed9\u4eba\u638c\u3002\n\n\u8fb9\u5728\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u73af\u4e2d\uff0c\u8fd9\u4e2a\u6761\u4ef6\u548c\u8fb9\u53cc\u548c\u70b9\u53cc\u5173\u7cfb\u4e0d\u5927\u3002\n\n\u4f46\u662f\u6709\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u89e3\u51b3\u3002\n\n\u6811\u4e0a\u5dee\u5206\u3002\n\n\u6784\u5efa\u51fadfs\u6811 \u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u4e00\u6761\u8fb9\u8fd4\u7956\u8fb9\u5f62\u6210\u4e86\u73af\u6211\u4eec\u5c31\u628a\u8def\u5f84\u4e0a\u7684\u8fb9\u88ab\u73af\u8986\u76d6\u6570\u91cf+1.\n\n\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u6709\u4e00\u6761\u8fb9\u51fa\u73b0\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u73af\u4e4b\u4e2d \u90a3\u4e48\u8fd9\u6761\u8fb9\u6700\u540e\u7684\u5dee\u5206\u503c>1.\n\n\u5c06\u8fb9\u7684\u5dee\u5206\u503c\u653e\u5230\u513f\u5b50\u4e0a\u66f4\u597d\u5904\u7406\u3002\n\n\u6ce8\u610f \u8fd8\u8981\u5224\u65ad\u56fe\u662f\u5426\u8fde\u901a\u3002\n\n\u63a5\u4e0b\u6765\u662f\u7b54\u6848\u7684\u5904\u7406.\n\n\u628a\u6240\u6709\u73af\u7684\u5927\u5c0f\u5f97\u5230 \u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u901a\u8fc7dfs\u6811\u5f97\u5230.\n\n\u7b80\u5355\u7684\u4e00\u4e2adp $f[i][0/1]$\u8868\u793a\u524di\u4e2a\u73af\u6240\u6784\u6210\u7684\u65b9\u6848\u6570\u4e14\u7b2ci\u4e2a\u73af\u4f7f\u7528\u4e86\u6ca1\u6709.\n\n$f[i][0]+=(f[i-1][0]+f[i-1][1])$\n\n$f[i][1]+=(f[i-1][0]+f[i-1][1])\\cdot w[i]$\n\n\u5176\u5b9e\u7ef4\u62a4\u4e00\u4e2a$ans$\u6bcf\u6b21\u5c06ans\u4e58\u4e0a$w[i]+1$\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u9ad8\u9759 \u538b\u4f4d\u9ad8\u7cbe\u5ea6\u5f88\u597d\u5199 \u901f\u5ea6\u4e5f\u5f88\u5feb\u3002\n\n```\nconst int MAXN=20010,maxn=1000010;\nint n,m,len=1,top,flag;\nint dis[MAXN],vis[MAXN],q[MAXN],c[MAXN];\nint lin[MAXN],ver[maxn<<1],nex[maxn<<1];\nll ans[maxn];\ninline void add(int x,int y)\n{\n\tver[++len]=y;\n\tnex[len]=lin[x];\n\tlin[x]=len;\n}\ninline void dfs(int x,int las)\n{\n\tdis[x]=dis[ver[las^1]]+1;\n\tvis[x]=1;\n\tgo(x)\n\t{\n\t\tif(i==(las^1))continue;\n\t\tif(!vis[tn])dfs(tn,i);\n\t\telse\n\t\t{\n\t\t\tif(dis[x]>dis[tn])\n\t\t\t{\n\t\t\t\tq[++top]=dis[x]-dis[tn]+1;\n\t\t\t\t++c[x];--c[tn];\n\t\t\t}\n\t\t}\n\t}\n}\ninline void dfs(int x)\n{\n\tvis[x]=1;\n\tgo(x){if(!vis[tn])dfs(tn),c[x]+=c[tn];}\n\tif(c[x]>1){flag=1;}\n}\nint main()\n{\n\tfreopen(\"1.in\",\"r\",stdin);\n\tget(n);get(m);\n\trep(1,m,i)\n\t{\n\t\tint get(x);int get(y);\n\t\trep(2,x,j)\n\t\t{\n\t\t\tint get(z);\n\t\t\tadd(y,z);add(z,y);y=z;\n\t\t}\n\t}\n\tdfs(1,0);\n\trep(1,n,i)if(!vis[i])flag=1;else vis[i]=0;\n\tdfs(1);\n\tif(flag){puts(\"0\");return 0;}\n\tans[0]=1;int le=0;\n\trep(1,top,i)\n\t{\n\t\t++q[i];\n\t\trep(0,le,j)ans[j]=ans[j]*q[i];\n\t\trep(1,le+1,j)ans[j]+=ans[j-1]/mod,ans[j-1]%=mod;\n\t\tif(ans[le+1]>0)++le;\n\t}\n\tint mark=0;\n\tfep(le,0,i)\n\t{\n\t\tif(mark)printf(\"%014lld\",ans[i]);\n\t\telse printf(\"%lld\",ans[i]),mark=1;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1587042038,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4129 \u3010[SHOI2006]\u4ed9\u4eba\u638c\u3011"
    },
    {
        "content": "\u597d\u50cfSHOI2006\u6ca1\u8fd9\u9053\u9898\u5427\u3002\u3002\u3002\n\n\u5207\u5165\u8fd9\u9898\uff0c\u8fd9\u9898\u6bd4\u65e0\u5f52\u5c9b\u8fd8\u8981\u88f8\u3002\u660e\u6446\u7684\u4ed9\u4eba\u638c\u56fe\uff0c\u6ce8\u610f\u4e00\u4e0b\u8fd9\u9898\u8981\u9ad8\u7cbe\u5ea6\uff0c\u6211\u5c31\u662f\u56e0\u4e3a\u9ad8\u7cbe\u5ea6\u5361\u4e86\u8d85\u7ea7\u4e45\u7684\u3002\n\n\u8d81\u8fd9\u9053\u9898\u6c34\uff0c\u5c31\u7a0d\u5fae\u8bb2\u89e3\u4e00\u4e0b\u4ed9\u4eba\u638c\u56fe\u7684\u51e0\u4e2a\u6027\u8d28\u3002\n\n\u9996\u5148\uff0c\u5173\u4e8e\u5982\u4f55\u5224\u65ad\u4ed9\u4eba\u638c\u56fe\uff0c\u65b9\u6cd5\u5176\u5b9e\u662f\u8bb0\u5f55\u73af\u4e0a\u70b9\u7684\u5ea6\u6570\u3002\u82e5\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u8d85\u8fc72\uff0c\u5219\u4e0d\u662f\u4ed9\u4eba\u638c\u56fe\u3002\n```\nfor(res i=x; i!=rt; i=fa[i]) {\n        du[i]++;\n        if(du[i]>1) {\n            puts(\"0\");\n            exit(0);\n        }\n    }\n```\n\u7136\u540e\uff0c\u73af\u4e0a\u6709\u51e0\u4e2a\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u6765\u76f4\u63a5\u8868\u793a\u3002\n```\ndp[++tot]=deep[x]-deep[rt]+1;\n```\n\u6700\u540e\u662ftarjan\u627e\u73af\n```\nlow[x]=dfn[x]=++num;\n    for(res i=head[x]; ~i; i=edge[i].next) {\n        res tox=edge[i].to;\n        if(tox==fa[x])continue;\n        if(!dfn[tox]) fa[tox]=x,deep[tox]=deep[x]+1,tarjan(tox),low[x]=min(low[x],low[tox]);\n        else low[x]=min(low[x],dfn[tox]);\n    }\n    for(res i=head[x]; ~i; i=edge[i].next) {\n        res tox=edge[i].to;\n        if(fa[tox]!=x&&dfn[x]<dfn[tox])DP(x,tox);\n    }\n```\n\u6240\u4ee5\u8fd9\u9898\u53ea\u7528\u5c06\u73af\u4e0a\u7684\u70b9\u7684\u6570\u91cf\u5168\u90e8\u7b97\u51fa\u6765\uff0c\u7136\u540e\u6bcf\u4e2a\u73af\u4e0a\u70b9\u7684\u6570\u91cf+1\u518d\u76f8\u4e58\uff0c\u5957\u4e0a\u9ad8\u7cbe\u5ea6\u5c31\u597d\u4e86\u3002\n\ncode\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\ninline int read() {\n    int s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {\n        if(ch=='-')w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\ninline void write(res x) {\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\n//\nconst int maxn = 10000;\nstruct bign {\n    int d[maxn], len;\n    void clean() {\n        while(len > 1 && !d[len-1]) len--;\n    }\n    bign()          {\n        memset(d, 0, sizeof(d));\n        len = 1;\n    }\n    bign(int num)   {\n        *this = num;\n    }\n    bign(char* num) {\n        *this = num;\n    }\n    bign operator = (const char* num) {\n        memset(d, 0, sizeof(d));\n        len = strlen(num);\n        for(int i = 0; i < len; i++) d[i] = num[len-1-i] - '0';\n        clean();\n        return *this;\n    }\n    bign operator = (int num) {\n        char s[20];\n        sprintf(s, \"%d\", num);\n        *this = s;\n        return *this;\n    }\n    bign operator + (const bign& b) {\n        bign c = *this;\n        int i;\n        for (i = 0; i < b.len; i++) {\n            c.d[i] += b.d[i];\n            if (c.d[i] > 9) c.d[i]%=10, c.d[i+1]++;\n        }\n        while (c.d[i] > 9) c.d[i++]%=10, c.d[i]++;\n        c.len = max(len, b.len);\n        if (c.d[i] && c.len <= i) c.len = i+1;\n        return c;\n    }\n    bign operator - (const bign& b) {\n        bign c = *this;\n        int i;\n        for (i = 0; i < b.len; i++) {\n            c.d[i] -= b.d[i];\n            if (c.d[i] < 0) c.d[i]+=10, c.d[i+1]--;\n        }\n        while (c.d[i] < 0) c.d[i++]+=10, c.d[i]--;\n        c.clean();\n        return c;\n    }\n    bign operator * (const bign& b)const {\n        int i, j;\n        bign c;\n        c.len = len + b.len;\n        for(j = 0; j < b.len; j++) for(i = 0; i < len; i++)\n                c.d[i+j] += d[i] * b.d[j];\n        for(i = 0; i < c.len-1; i++)\n            c.d[i+1] += c.d[i]/10, c.d[i] %= 10;\n        c.clean();\n        return c;\n    }\n    bign operator / (const bign& b) {\n        int i, j;\n        bign c = *this, a = 0;\n        for (i = len - 1; i >= 0; i--) {\n            a = a*10 + d[i];\n            for (j = 0; j < 10; j++) if (a < b*(j+1)) break;\n            c.d[i] = j;\n            a = a - b*j;\n        }\n        c.clean();\n        return c;\n    }\n    bign operator % (const bign& b) {\n        int i, j;\n        bign a = 0;\n        for (i = len - 1; i >= 0; i--) {\n            a = a*10 + d[i];\n            for (j = 0; j < 10; j++) if (a < b*(j+1)) break;\n            a = a - b*j;\n        }\n        return a;\n    }\n    bign operator += (const bign& b) {\n        *this = *this + b;\n        return *this;\n    }\n\n    bool operator <(const bign& b) const {\n        if(len != b.len) return len < b.len;\n        for(int i = len-1; i >= 0; i--)\n            if(d[i] != b.d[i]) return d[i] < b.d[i];\n        return false;\n    }\n    bool operator >(const bign& b) const {\n        return b < *this;\n    }\n    bool operator<=(const bign& b) const {\n        return !(b < *this);\n    }\n    bool operator>=(const bign& b) const {\n        return !(*this < b);\n    }\n    bool operator!=(const bign& b) const {\n        return b < *this || *this < b;\n    }\n    bool operator==(const bign& b) const {\n        return !(b < *this) && !(b > *this);\n    }\n\n    string str() const {\n        char s[maxn]= {};\n        for(int i = 0; i < len; i++) s[len-1-i] = d[i]+'0';\n        return s;\n    }\n};\nistream& operator >> (istream& in, bign& x) {\n    string s;\n    in >> s;\n    x = s.c_str();\n    return in;\n}\nostream& operator << (ostream& out, const bign& x) {\n    out << x.str();\n    return out;\n}\n//\nconst int M=2*1e6+10,N=1e5+10;\nstruct mdzz {\n    int next,to;\n    mdzz() {}\n    mdzz(res next,res to):next(next),to(to) {}\n} edge[M];\nint head[N],cnt;\ninline void addedge(res u,res v) {\n    edge[++cnt]=mdzz(head[u],v),head[u]=cnt;\n    edge[++cnt]=mdzz(head[v],u),head[v]=cnt;\n}\nint n,m;\nint dfn[N],low[N],num,fa[N],deep[N],tot,du[N],dp[N];\nint pos,mp[N];\ninline void DP(res rt,res x) {\n    dp[++tot]=deep[x]-deep[rt]+1;\n    for(res i=x; i!=rt; i=fa[i]) {\n        du[i]++;\n        if(du[i]>1) {\n            puts(\"0\");\n            exit(0);\n        }\n    }\n}\ninline void tarjan(res x) {\n    low[x]=dfn[x]=++num;\n    for(res i=head[x]; ~i; i=edge[i].next) {\n        res tox=edge[i].to;\n        if(tox==fa[x])continue;\n        if(!dfn[tox]) fa[tox]=x,deep[tox]=deep[x]+1,tarjan(tox),low[x]=min(low[x],low[tox]);\n        else low[x]=min(low[x],dfn[tox]);\n    }\n    for(res i=head[x]; ~i; i=edge[i].next) {\n        res tox=edge[i].to;\n        if(fa[tox]!=x&&dfn[x]<dfn[tox])DP(x,tox);\n    }\n}\nbign sum=1;\nint main() {\n    memset(head,-1,sizeof(head));\n    n=read(),m=read();\n    for(res i=1; i<=m; i++) {\n        res k=read(),last=read();\n        if(!mp[last])pos++,mp[last]=1;\n        for(res j=2; j<=k; j++) {\n            res x=read();\n            addedge(x,last);\n            last=x;\n            if(!mp[x])pos++,mp[x]=1;\n        }\n    }\n    if(pos<n) {\n        puts(\"0\");\n        exit(0);\n    }\n    tarjan(1);\n    for(res i=1; i<=tot; i++)sum=sum*(dp[i]+1);\n    //printf(\"%d %d %d \",tot,dp[1],dp[2]);\n    cout<<sum;\n    return 0;\n}\n```",
        "postTime": 1530860762,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010LG P4129\u3011\u4ed9\u4eba\u638c"
    },
    {
        "content": "\u663e\u7136\u6c42\u51fa\u6bcf\u4e00\u4e2a\u73af\u7684\u5927\u5c0f\u3002\n\nAns=\u220f i\u200b (siz[i]+1)\n\n\u6ce8\u610f\u7528\u9ad8\u7cbe\u5ea6\u5b58\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    int ans=0;\n    char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch))ans=(ans<<3)+(ans<<1)+(ch^48),ch=getchar();\n    return ans;\n}\nconst int N=2e4+5,M=1e6+5;\nint n,m,first[N],cnt=0,dfn[N],low[N],du[N],dep[N],fa[N],tot=0,siz=0;\nstruct edge{int v,next;}e[M<<1];\nstruct bignum{\n    int s[N<<1],len;\n    bignum(){memset(s,0,sizeof(s)),len=0;}\n    inline bignum operator=(int x){\n        while(x)s[++len]=x-x/10*10,x/=10;\n        return *this;\n    }\n    inline bignum operator*(const bignum&x){\n        bignum ret;\n        int maxlen=x.len+len-1;\n        for(int i=1;i<=len;++i)for(int j=1;j<=x.len;++j)ret.s[i+j-1]+=s[i]*x.s[j];\n        for(int i=1;i<=maxlen;++i)if(ret.s[i]>=10)ret.s[i+1]+=ret.s[i]/10,ret.s[i]=ret.s[i]-ret.s[i]/10*10;\n        while(ret.s[maxlen+1]){\n            ++maxlen;\n            if(ret.s[maxlen]>=10)ret.s[maxlen+1]+=ret.s[maxlen]/10,ret.s[maxlen]=ret.s[maxlen]-ret.s[maxlen]/10*10;\n        }\n        return ret.len=maxlen,ret;\n    }\n    inline void output(){for(int i=len;i;--i)printf(\"%d\",s[i]);}\n}ans;\ninline void add(int u,int v){e[++cnt].v=v,e[cnt].next=first[u],first[u]=cnt;}\ninline void calc(int st,int ed){\n    for(int i=ed;i!=st;i=fa[i])if(++du[i]==2)puts(\"0\"),exit(0);\n    bignum tmp;\n    tmp=(dep[ed]-dep[st]+2);\n    ans=ans*tmp;\n}\ninline void tarjan(int p){\n    ++siz;\n    dfn[p]=low[p]=++tot;\n    for(int i=first[p];i;i=e[i].next){\n        int v=e[i].v;\n        if(v==fa[p])continue;\n        if(!dfn[v])dep[v]=dep[p]+1,fa[v]=p,tarjan(v),low[p]=min(low[p],low[v]);\n        else low[p]=min(low[p],dfn[v]);\n    }\n    for(int i=first[p];i;i=e[i].next){\n        int v=e[i].v;\n        if(fa[v]!=p&&dfn[p]<dfn[v])calc(p,v);\n    }\n}\nint main(){\n    n=read(),m=read(),ans.len=ans.s[1]=1;\n    while(m--){\n        int k=read()-1,x=read(),y;\n        while(k--)y=read(),add(y,x),add(x,y),x=y;\n    }\n    tarjan(1);\n    if(siz!=n)puts(\"0\"),exit(0);\n    ans.output();\n    return 0;\n}\n\n\n```\n",
        "postTime": 1569422543,
        "uid": 27055,
        "name": "\u53eb\u6211\u9175\u6bcd\u541b",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4129 \u3010[SHOI2006]\u4ed9\u4eba\u638c\u3011"
    }
]