[
    {
        "content": "# \u7f51\u7edc\u6700\u5927\u6d41\n\n#### \u76ee\u5f55\n\n- \u524d\u8a00\n\n- \u53cc\u500d\u7ecf\u9a8c\n\n- \u7f51\u7edc\u6d41\u521d\u6b65\n\n- \u7f51\u7edc\u6700\u5927\u6d41\n\n- $EK$\u589e\u5e7f\u8def\u7b97\u6cd5\n\n- $Dinic$\u7b97\u6cd5\n\n------------\n#### \u524d\u8a00\n\n\u8fd9\u7bc7\u9898\u89e3\u662f\u5f53\u505a\u5b66\u4e60\u8bb0\u5f55\u5199\u7684\uff0c\u6240\u4ee5\u4f1a\u5bf9\u7f51\u7edc\u6700\u5927\u6d41\u8fd9\u4e2a\u6982\u5ff5\u8fdb\u884c\u8bb2\u89e3\uff08$dalao$\u4eec\u53ef\u4ee5\u5ffd\u7565\u849f\u84bb$orz$\uff09\n\n#### \u53cc\u500d\u7ecf\u9a8c$Time$\n\n1. [\u6d1b\u8c37P3376 \u3010\u6a21\u677f\u3011](https://www.luogu.com.cn/problem/P3376) \uff08$Ek$\u7b97\u6cd5 / $Dinic$\u7b97\u6cd5\uff09\n\n2. [\u6d1b\u8c37P2740 [USACO4.2]\u8349\u5730\u6392\u6c34Drainage Ditches](https://www.luogu.com.cn/problem/P2740)\n\n------------\n#### \u7f51\u7edc\u6d41\u521d\u6b65\n\n\u8fd9\u91cc\u4e3b\u8981\u8ba8\u8bba\u4e00\u4e0b\u7f51\u7edc\u6d41\u7b97\u6cd5\u53ef\u80fd\u4f1a\u6d89\u53ca\u5230\u7684\u4e00\u4e9b\u6982\u5ff5\u6027\u95ee\u9898\n\n- \u5b9a\u4e49\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u5f20**\u6709\u5411\u56fe**\uff08\u4e5f\u5c31\u662f**\u7f51\u7edc**\uff09\uff0c\u5176\u4e2d\u6709$N$\u4e2a\u70b9\u3001$M$\u6761\u8fb9\u4ee5\u53ca\u6e90\u70b9$S$\u548c\u6c47\u70b9$T$\n\n\u7136\u540e\u6211\u4eec\u628a$c(x,y)$\u79f0\u4e3a\u8fb9\u7684**\u5bb9\u91cf**\n\n- \u8f6c\u6362\n\n\u4e3a\u4e86\u901a\u4fd7\u6613\u61c2\uff0c\u6211\u4eec\u6765\u7ed3\u5408\u751f\u6d3b\u5b9e\u9645\u7406\u89e3\u4e0a\u9762\u7f51\u7edc\u7684\u5b9a\u4e49\uff1a\n\n\u5c06\u6709\u5411\u56fe\u7406\u89e3\u4e3a\u6211\u4eec\u57ce\u5e02\u7684**\u6c34\u7f51**\uff0c\u6709$N$\u6237\u5bb6\u5ead\u3001$M$\u6761\u7ba1\u9053\u4ee5\u53ca\u4f9b\u6c34\u70b9$S$\u548c\u6c47\u5408\u70b9$T$\n\n\u662f\u4e0d\u662f\u597d\u7406\u89e3\u4e00\u70b9\uff1f\u73b0\u5728\u7ed9\u51fa\u4e00\u5f20\u7f51\u7edc\uff08\u56fe\u4e11\u52ff\u602a\u554aQAQ\uff09\uff1a\n\n![](https://img2020.cnblogs.com/blog/2055990/202007/2055990-20200709150110449-380364997.png)\n\n$S->C->D->E->T$\u5c31\u662f\u8be5\u7f51\u7edc\u7684\u4e00\u4e2a\u6d41\uff0c$2$\u8fd9\u4e2a\u6d41\u7684\u6d41\u91cf\n\n- \u6d41\u51fd\u6570\n\n\u548c\u4e0a\u9762\u7684$c$\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u628a$f(x,y)$\u79f0\u4e3a\u8fb9\u7684**\u6d41\u91cf**\uff0c\u5219$f$\u79f0\u4e3a\u7f51\u7edc\u7684\u6d41\u51fd\u6570\uff0c\u5b83\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\n\n1. $s(x,y)\u2264c(x,y)$\n\n2. $f(x,y)=-f(y,x)$\n\n3. $\\forall$ $x$\u2260$S$\uff0c$x\u2260T$, $\\sum_{(u,x)\u2208E }f(u,x)=\\sum_{(x,v)\u2208E }f(x,v)$ \n\n\u8fd9\u4e09\u4e2a\u6761\u4ef6\u5176\u5b9e\u4e5f\u662f\u6d41\u51fd\u6570\u7684\u4e09\u5927\u6027\u8d28\uff1a\n\n1. \u5bb9\u91cf\u9650\u5236\uff1a\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u603b\u4e0d\u53ef\u80fd\u5927\u4e8e\u8be5\u8fb9\u7684\u5bb9\u91cf\u7684\uff08\u4e0d\u7136\u6c34\u7ba1\u5c31\u7206\u4e86\uff09\n\n2. \u659c\u5bf9\u79f0\uff1a\u6b63\u5411\u8fb9\u7684\u6d41\u91cf=\u53cd\u5411\u8fb9\u7684\u6d41\u91cf\uff08\u53cd\u5411\u8fb9\u540e\u9762\u4f1a\u5177\u4f53\u8bb2\uff09\n\n3. \u6d41\u91cf\u5b88\u6052\uff1a\u6b63\u5411\u7684\u6240\u6709\u6d41\u91cf\u548c=\u53cd\u5411\u7684\u6240\u6709\u6d41\u91cf\u548c\uff08\u5c31\u662f\u603b\u91cf\u59cb\u7ec8\u4e0d\u53d8\uff09\n\n- \u6b8b\u91cf\u7f51\u7edc\n\n\u5728\u4efb\u610f\u65f6\u523b\uff0c\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e$0$\u7684\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u88ab\u79f0\u4e3a**\u6b8b\u91cf\u7f51\u7edc**\n\n------------\n#### \u6700\u5927\u6d41\n\n\u5bf9\u4e8e\u4e0a\u9762\u7684\u7f51\u7edc\uff0c\u5408\u6cd5\u7684\u6d41\u51fd\u6570\u6709\u5f88\u591a\uff0c\u5176\u4e2d\u4f7f\u5f97\u6574\u4e2a\u7f51\u7edc\u6d41\u91cf\u4e4b\u548c\u6700\u5927\u7684\u6d41\u51fd\u6570\u79f0\u4e3a\u7f51\u7edc\u7684**\u6700\u5927\u6d41**\uff0c\u6b64\u65f6\u7684\u6d41\u91cf\u548c\u88ab\u79f0\u4e3a\u7f51\u7edc\u7684**\u6700\u5927\u6d41\u91cf**\n\n\u6700\u5927\u6d41\u80fd\u89e3\u51b3\u8bb8\u591a\u5b9e\u9645\u95ee\u9898\uff0c\u6bd4\u5982\uff1a\u4e00\u6761\u5b8c\u6574\u8fd0\u8f93\u9053\u8def\uff08\u542b\u591a\u6761\u7ba1\u9053\uff09\u7684\u4e00\u6b21\u6700\u5927\u8fd0\u8f93\u6d41\u91cf\uff0c\u8fd8\u6709**\u4e8c\u5206\u56fe**\uff08\u849f\u84bb\u8fd8\u6ca1\u5b66\u4e8c\u5206\u56fe\uff0c\u5b66\u4e86\u4e4b\u540e\u4f1a\u66f4\u65b0\u7684qwq\uff09\n\n\u4e0b\u9762\u5c31\u6765\u4ecb\u7ecd\u8ba1\u7b97\u6700\u5927\u6d41\u7684\u4e24\u79cd\u7b97\u6cd5\uff1a$EK$\u589e\u5e7f\u8def\u7b97\u6cd5\u548c$Dinic$\u7b97\u6cd5\n\n------------\n#### $Edmonds-Karp$\u589e\u5e7f\u8def\u7b97\u6cd5\n\n\uff08\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4e60\u60ef\u79f0\u4e3a$EK$\u7b97\u6cd5\uff09\n\n- \u9996\u5148\u6765\u8bb2\u589e\u5e7f\u8def\u662f\u4ec0\u4e48\uff1a\n\n\u82e5\u4e00\u6761\u4ece$S$\u5230$T$\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\u90fd\u5927\u4e8e0\uff0c\u5219\u79f0\u8fd9\u6837\u7684\u8def\u5f84\u4e3a\u4e00\u6761**\u589e\u5e7f\u8def**\uff08\u5269\u4f59\u6d41\u91cf\uff1a$c(x,y)-f(x,y)$\uff09\n\n- \u7136\u540e\u5c31\u662f$EK$\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u5566\uff1a\n\n\u5982\u4e0a\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e00\u80a1\u6d41\u6cbf\u7740\u589e\u5e7f\u8def\u4ece$S$\u6d41\u5230$T$\uff0c\u7136\u540e\u4f7f\u7f51\u7edc\u7684\u6d41\u91cf\u589e\u5927\n\n$EK$\u7b97\u6cd5\u7684\u601d\u60f3\u5c31\u662f**\u4e0d\u65ad\u7528**BFS**\u5bfb\u627e\u589e\u5e7f\u8def\u5e76\u4e0d\u65ad\u66f4\u65b0\u6700\u5927\u6d41\u91cf\u503c\uff0c\u76f4\u5230\u7f51\u7edc\u4e0a\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u4e3a\u6b62**\n\n- \u518d\u6765\u8bb2\u7406\u8bba\u5b9e\u73b0\u8fc7\u7a0b\uff1a\n\n\u5728$BFS$\u5bfb\u627e\u4e00\u6761\u589e\u5e7f\u8def\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651**\u5269\u4f59\u6d41\u91cf\u4e0d\u4e3a$0$\u7684\u8fb9**\uff0c\u7136\u540e\u627e\u5230\u4e00\u6761\u4ece$S$\u5230$T$\u7684\u8def\u5f84\uff0c\u540c\u65f6\u8ba1\u7b97\u51fa\u8def\u5f84\u4e0a**\u5404\u8fb9\u5269\u4f59\u5bb9\u91cf\u503c\u7684\u6700\u5c0f\u503c$dis$**\uff0c\u5219\u7f51\u7edc\u7684\u6700\u5927\u6d41\u91cf\u5c31\u53ef\u4ee5\u589e\u52a0$dis$\uff08**\u7ecf\u8fc7\u7684\u6b63\u5411\u8fb9\u5bb9\u91cf\u503c\u5168\u90e8\u51cf\u53bb$dis$\uff0c\u53cd\u5411\u8fb9\u5168\u90e8\u52a0\u4e0a$dis$**\uff09\n\n- **\u53cd\u5411\u8fb9**\n\n\u63d2\u5165\u8bb2\u89e3\u4e00\u4e0b\u53cd\u5411\u8fb9\u8fd9\u4e2a\u6982\u5ff5\uff0c\u8fd9\u662f\u7f51\u7edc\u6d41\u4e2d\u7684\u4e00\u4e2a\u91cd\u70b9\n\n\u4e3a\u4ec0\u4e48\u8981\u5efa\u53cd\u5411\u8fb9\uff1f\n\n\u56e0\u4e3a\u53ef\u80fd**\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u5305\u542b\u4e8e\u591a\u6761\u589e\u5e7f\u8def\u5f84**\uff0c\u6240\u4ee5\u4e3a\u4e86\u5bfb\u627e\u6240\u6709\u7684\u589e\u5e7f\u8def\u7ecf\u6211\u4eec\u5c31\u8981\u8ba9\u8fd9\u4e00\u6761\u8fb9\u6709**\u591a\u6b21\u88ab\u9009\u62e9\u7684\u673a\u4f1a**\n\n\u800c\u6784\u5efa\u53cd\u5411\u8fb9\u5219\u662f\u8fd9\u6837\u4e00\u4e2a\u673a\u4f1a\uff0c\u76f8\u5f53\u4e8e\u7ed9\u7a0b\u5e8f\u4e00\u4e2a**\u53cd\u6094**\u7684\u673a\u4f1a\uff01\n\n\u4e3a\u4ec0\u4e48\u662f\u53cd\u6094\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u5728\u627e\u5230\u4e00\u4e2a$dis$\u540e\uff0c\u5c31\u4f1a\u5bf9\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u8fdb\u884c\u51cf\u6cd5\u64cd\u4f5c\uff0c\u800c**\u76f4\u63a5\u66f4\u6539\u503c\u5c31\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u5bfb\u627e\u53e6\u5916\u7684\u589e\u5e7f\u8def**\uff01\n\n\u8fd8\u4e0d\u597d\u7406\u89e3\uff1f\u90a3\u6211\u4eec\u4e3e\u4e2a~~\u901a\u4fd7\u6613\u61c2\u7684~~\u4f8b\u5b50\u5427\uff1a\n\n![](https://img2020.cnblogs.com/blog/2055990/202007/2055990-20200709161217956-287497289.png)\n\n\u539f\u672c$A$\u5230$B$\u7684\u6b63\u8fb9\u6743\u662f1\u3001\u53cd\u8fb9\u6743\u662f0\uff0c\u5728\u7b2c\u4e00\u6b21\u7ecf\u8fc7\u8be5\u8fb9\u540e\uff08\u5047\u8bbe$dis$\u503c\u4e3a1\uff09\uff0c\u5219\u6b63\u8fb9\u6743\u53d8\u4e3a0\uff0c\u53cd\u8fb9\u6743\u53d8\u4e3a1\n\n\u5f53\u6211\u4eec\u9700\u8981\u7b2c\u4e8c\u6b21\u7ecf\u8fc7\u8be5\u8fb9\u65f6\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u901a\u8fc7\u8d70\u53cd\u5411\u8fb9\u6062\u590d\u8fd9\u6761\u8fb9\u7684\u539f\u6837\uff08\u53ef\u80fd\u6709\u70b9\u7ed5\uff0c\u5927\u5bb6\u597d\u597d\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u4ee5\u4e0a\u90fd\u662f\u6211\u4e2a\u4eba\u7684\u7406\u89e3\uff0c\u73b0\u5728\u7ed9\u51fa\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\u4e0a\u5173\u4e8e\u53cd\u5411\u8fb9\u7684\u8bc1\u660e\uff1a\n\n\u201c**\u5f53\u4e00\u6761\u8fb9\u7684\u6d41\u91cf$f(x,y)>0$\u65f6\uff0c\u6839\u636e\u659c\u5bf9\u79f0\u6027\u8d28\uff0c\u5b83\u7684\u53cd\u5411\u8fb9\u6d41\u91cf$f(y,x)<0$\uff0c\u6b64\u65f6\u5fc5\u5b9a\u6709$f(y,x)<c(y,x)$\uff0c\u6240\u4ee5$EK$\u7b97\u6cd5\u9664\u4e86\u904d\u5386\u539f\u56fe\u7684\u6b63\u5411\u8fb9\u4ee5\u5916\u8fd8\u8981\u8003\u8651\u904d\u5386\u6bcf\u6761\u53cd\u5411\u8fb9**\u201d\n\n- **\u90bb\u63a5\u8868\u201c\u6210\u5bf9\u5b58\u50a8\u201d**\n\n\u6211\u4eec\u5c06\u6b63\u5411\u8fb9\u548c\u53cd\u5411\u8fb9\u5b58\u5728\u201c2\u548c3\u201d\u3001\u201c4\u548c5\u201d\u3001\u201c6\u548c7\u201d\u00b7\u00b7\u00b7\u00b7\n\n\u4e3a\u4ec0\u4e48\uff1f\n\n\u56e0\u4e3a\u5728\u66f4\u65b0\u8fb9\u6743\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528$xor 1$\u7684\u65b9\u5f0f\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u6b63\u5411\u8fb9\u548c\u53cd\u5411\u8fb9\uff08\u5947\u6570\u5f02\u62161\u76f8\u5f53\u4e8e-1\uff0c\u5076\u6570\u5f02\u62161\u76f8\u5f53\u4e8e+1\uff09\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff08\u6574\u4e2a\u66f4\u65b0\u8fb9\u6743\u7684\u64cd\u4f5c\u51fd\u6570\uff09\uff1a\n\n```cpp\ninline void update() {\n    int x=t;\n    while(x!=s) {\n        int v=pre[x];\n        e[v].val-=dis[t];\n        e[v^1].val+=dis[t];\n        x=e[v^1].to;\n    }\n    ans+=dis[t];\n}\n```\n\n- \u9002\u7528\u8303\u56f4\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nm^2)$\uff0c\u4e00\u822c\u80fd\u5904\u7406$10^3$~$10^4$\u89c4\u6a21\u7684\u7f51\u7edc**\n\n- \u4ee3\u7801$Code$\n\n\uff08\u4ee5\u672c\u9053\u6a21\u677f\u9898\u7684\u4ee3\u7801\u4e3a\u51c6\uff0c\u5176\u4ed6\u9898\u53ef\u4ee5\u5c06$longlong$\u6362\u6210$int$\u5e76\u4e14\u53ef\u4ee5\u53bb\u6389\u5904\u7406\u91cd\u8fb9\u64cd\u4f5c\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,s,t,u,v;\nlong long w,ans,dis[520010];\nint tot=1,vis[520010],pre[520010],head[520010],flag[2510][2510];\n\nstruct node {\n\tint to,net;\n\tlong long val;\n} e[520010];\n\ninline void add(int u,int v,long long w) {\n\te[++tot].to=v;\n\te[tot].val=w;\n\te[tot].net=head[u];\n\thead[u]=tot;\n\te[++tot].to=u;\n\te[tot].val=0;\n\te[tot].net=head[v];\n\thead[v]=tot;\n}\n\ninline int bfs() {  //bfs\u5bfb\u627e\u589e\u5e7f\u8def \n\tfor(register int i=1;i<=n;i++) vis[i]=0;\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=1;\n\tdis[s]=2005020600;\n\twhile(!q.empty()) {\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];i;i=e[i].net) {\n\t\t\tif(e[i].val==0) continue;  //\u6211\u4eec\u53ea\u5173\u5fc3\u5269\u4f59\u6d41\u91cf>0\u7684\u8fb9 \n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]==1) continue;  //\u8fd9\u4e00\u6761\u589e\u5e7f\u8def\u6ca1\u6709\u8bbf\u95ee\u8fc7 \n\t\t\tdis[v]=min(dis[x],e[i].val);\n\t\t\tpre[v]=i;  //\u8bb0\u5f55\u524d\u9a71\uff0c\u65b9\u4fbf\u4fee\u6539\u8fb9\u6743 \n\t\t\tq.push(v);\n\t\t\tvis[v]=1;\n\t\t\tif(v==t) return 1;  //\u627e\u5230\u4e86\u4e00\u6761\u589e\u5e7f\u8def \n\t\t}\n\t}\n\treturn 0;\n}\n\ninline void update() {  //\u66f4\u65b0\u6240\u7ecf\u8fc7\u8fb9\u7684\u6b63\u5411\u8fb9\u6743\u4ee5\u53ca\u53cd\u5411\u8fb9\u6743 \n\tint x=t;\n\twhile(x!=s) {\n\t\tint v=pre[x];\n\t\te[v].val-=dis[t];\n\t\te[v^1].val+=dis[t];\n\t\tx=e[v^1].to;\n\t}\n\tans+=dis[t];   //\u7d2f\u52a0\u6bcf\u4e00\u6761\u589e\u5e7f\u8def\u7ecf\u7684\u6700\u5c0f\u6d41\u91cf\u503c \n}\n\nint main() {\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(register int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%lld\",&u,&v,&w);\n\t\tif(flag[u][v]==0) {  //\u5904\u7406\u91cd\u8fb9\u7684\u64cd\u4f5c\uff08\u52a0\u4e0a\u8fd9\u4e2a\u6a21\u677f\u9898\u5c31\u53ef\u4ee5\u7528Ek\u7b97\u6cd5\u8fc7\u4e86\uff09 \n\t\t\tadd(u,v,w);\n\t\t\tflag[u][v]=tot;\n\t\t}\n\t\telse {\n\t\t\te[flag[u][v]-1].val+=w;\n\t\t}\n\t}\n\twhile(bfs()!=0) {  //\u76f4\u5230\u7f51\u7edc\u4e2d\u4e0d\u5b58\u5728\u589e\u5e7f\u8def \n\t\tupdate();\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n------------\n#### $Dinic$\u7b97\u6cd5\n\n$EK$\u7b97\u6cd5\u6bcf\u6b21\u90fd\u53ef\u80fd\u4f1a\u904d\u5386\u6574\u4e2a\u6b8b\u91cf\u7f51\u7edc\uff0c\u4f46\u53ea\u627e\u51fa\u4e00\u6761\u589e\u5e7f\u8def\n\n\u662f\u4e0d\u662f\u6709\u70b9\u4e0d\u5212\u7b97\uff1f\u80fd\u4e0d\u80fd\u4e00\u6b21\u627e\u591a\u6761\u589e\u5e7f\u8def\u5462\uff1f\n\n\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff1a$Dinic$\u7b97\u6cd5\n\n- \u5206\u5c42\u56fe&$DFS$\n\n\u6839\u636e$BFS$\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$x$\uff0c\u6211\u4eec\u7528$d[x]$\u6765\u8868\u793a\u5b83\u7684**\u5c42\u6b21**\uff0c\u5373$S$\u5230$x$\u6700\u5c11\u9700\u8981\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\uff0c\u6ee1\u8db3$d[y]=d[x]+1$\u7684\u8fb9$(x,y)$\u6784\u6210\u7684\u5b50\u56fe\u88ab\u79f0\u4e3a**\u5206\u5c42\u56fe**\uff08\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u63a5\u89e6\u8fc7\u4e86\u5427\uff09\uff0c\u800c\u5206\u5c42\u56fe\u5f88\u660e\u663e\u662f\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\n\n\u4e3a\u4ec0\u4e48\u8981\u5efa\u5206\u5c42\u56fe\uff1f\n\n\u8bb2\u8fd9\u4e2a\u539f\u56e0\u4e4b\u524d\uff0c \u6211\u4eec\u8fd8\u8981\u77e5\u9053\u4e00\u70b9\uff1a**$Dinic$\u7b97\u6cd5\u8fd8\u9700\u8981$DFS$**\n\n\u73b0\u5728\u518d\u653e\u4e0a\u7b2c\u4e00\u5f20\u56fe\uff0c\u6211\u4eec\u6765\u7406\u89e3\n\n![](https://img2020.cnblogs.com/blog/2055990/202007/2055990-20200709150110449-380364997.png)\n\n\u6839\u636e\u5c42\u6b21\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff1a\n\n```\n\u7b2c0\u5c42\uff1aS\n\u7b2c1\u5c42\uff1aA\u3001C\n\u7b2c2\u5c42\uff1aB\u3001D\n\u7b2c3\u5c42\uff1aE\u3001T\n```\n\u5728$DFS$\u4e2d\uff0c\u4ece$S$\u5f00\u59cb\uff0c\u6bcf\u6b21\u6211\u4eec\u5411\u4e0b\u4e00\u5c42\u6b21\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\uff0c\u76f4\u5230\u5230\u8fbe$T$\uff0c\u7136\u540e\u518d\u4e00\u5c42\u4e00\u5c42\u56de\u6eaf\u56de\u53bb\uff0c\u7ee7\u7eed\u627e\u8fd9\u4e00\u5c42\u7684\u53e6\u5916\u7684\u70b9\u518d\u5f80\u4e0b\u641c\u7d22\n\n\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86\u6211\u4eec\u540c\u65f6\u6c42\u51fa\u591a\u6761\u589e\u5e7f\u8def\u7684\u9700\u6c42\uff01\n\n- $Dinic$\u7b97\u6cd5\u6846\u67b6\n\n1. \u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a$BFS$\u6c42\u51fa\u8282\u70b9\u7684\u5c42\u6b21\uff0c\u6784\u9020\u5206\u5c42\u56fe\n\n2. \u5728\u5206\u5c42\u56fe\u4e0a$DFS$\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u5728\u56de\u6eaf\u65f6\u540c\u65f6\u66f4\u65b0\u8fb9\u6743\n\n- \u9002\u7528\u8303\u56f4\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2m)$\uff0c\u4e00\u822c\u80fd\u591f\u5904\u7406$10^4$~$10^5$\u89c4\u6a21\u7684\u7f51\u7edc\n\n\u76f8\u8f83\u4e8e$EK$\u7b97\u6cd5\uff0c\u663e\u7136$Dinic$\u7b97\u6cd5\u7684\u6548\u7387\u66f4\u4f18\u4e5f\u66f4\u5feb\uff1a\u867d\u7136\u5728\u7a00\u758f\u56fe\u4e2d\u533a\u522b\u4e0d\u660e\u663e\uff0c\u4f46\u5728\u7a20\u5bc6\u56fe\u4e2d$Dinic$\u7684\u4f18\u52bf\u4fbf\u51f8\u663e\u51fa\u6765\u4e86\uff08\u6240\u4ee5$Dinic$\u7b97\u6cd5\u7528\u7684\u66f4\u591a\uff09\n\n\u6b64\u5916\uff0c$Dinic$\u7b97\u6cd5\u6c42\u89e3\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m\\sqrt{n})$\n\n- \u4ee3\u7801$Code$\n\n\u8fd9\u4efd\u4ee3\u7801\u662f\u672c\u6a21\u677f\u9898\u7684AC\u4ee3\u7801\uff0c\u4f46\u662f\u4f7f\u7528\u5230\u4e86$Dinic$\u7b97\u6cd5\u7684\u4e24\u4e2a\u4f18\u5316\uff1a**\u5f53\u524d\u5f27\u4f18\u5316+\u526a\u679d**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst long long inf=2005020600;\nint n,m,s,t,u,v;\nlong long w,ans,dis[520010];\nint tot=1,now[520010],head[520010]; \n\nstruct node {\n\tint to,net;\n\tlong long val;\n} e[520010];\n\ninline void add(int u,int v,long long w) {\n\te[++tot].to=v;\n\te[tot].val=w;\n\te[tot].net=head[u];\n\thead[u]=tot;\n\t\n\te[++tot].to=u;\n\te[tot].val=0;\n\te[tot].net=head[v];\n\thead[v]=tot;\n}\n\ninline int bfs() {  //\u5728\u60e8\u91cf\u7f51\u7edc\u4e2d\u6784\u9020\u5206\u5c42\u56fe \n\tfor(register int i=1;i<=n;i++) dis[i]=inf;\n\tqueue<int> q;\n\tq.push(s);\n\tdis[s]=0;\n\tnow[s]=head[s];\n\twhile(!q.empty()) {\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];i;i=e[i].net) {\n\t\t\tint v=e[i].to;\n\t\t\tif(e[i].val>0&&dis[v]==inf) {\n\t\t\t\tq.push(v);\n\t\t\t\tnow[v]=head[v];\n\t\t\t\tdis[v]=dis[x]+1;\n\t\t\t\tif(v==t) return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\ninline int dfs(int x,long long sum) {  //sum\u662f\u6574\u6761\u589e\u5e7f\u8def\u5bf9\u6700\u5927\u6d41\u7684\u8d21\u732e\n\tif(x==t) return sum;\n\tlong long k,res=0;  //k\u662f\u5f53\u524d\u6700\u5c0f\u7684\u5269\u4f59\u5bb9\u91cf \n\tfor(register int i=now[x];i&&sum;i=e[i].net) {\n\t\tnow[x]=i;  //\u5f53\u524d\u5f27\u4f18\u5316 \n\t\tint v=e[i].to;\n\t\tif(e[i].val>0&&(dis[v]==dis[x]+1)) {\n\t\t\tk=dfs(v,min(sum,e[i].val));\n\t\t\tif(k==0) dis[v]=inf;  //\u526a\u679d\uff0c\u53bb\u6389\u589e\u5e7f\u5b8c\u6bd5\u7684\u70b9 \n\t\t\te[i].val-=k;\n\t\t\te[i^1].val+=k;\n\t\t\tres+=k;  //res\u8868\u793a\u7ecf\u8fc7\u8be5\u70b9\u7684\u6240\u6709\u6d41\u91cf\u548c\uff08\u76f8\u5f53\u4e8e\u6d41\u51fa\u7684\u603b\u91cf\uff09 \n\t\t\tsum-=k;  //sum\u8868\u793a\u7ecf\u8fc7\u8be5\u70b9\u7684\u5269\u4f59\u6d41\u91cf \n\t\t}\n\t}\n\treturn res;\n}\n\nint main() {\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(register int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%lld\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\twhile(bfs()) {\n\t\tans+=dfs(s,inf);  //\u6d41\u91cf\u5b88\u6052\uff08\u6d41\u5165=\u6d41\u51fa\uff09 \n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n- **\u5f53\u524d\u5f27\u4f18\u5316**\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$x$\uff0c\u5f53\u5b83\u5728$DFS$\u4e2d\u8d70\u5230\u4e86\u7b2c$i$\u6761\u5f27\u65f6\uff0c\u524d$i-1$\u6761\u5f27\u5230\u6c47\u70b9\u7684\u6d41\u4e00\u5b9a\u5df2\u7ecf\u88ab\u6d41\u6ee1\u800c\u6ca1\u6709\u53ef\u884c\u7684\u8def\u7ebf\u4e86\n\n\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u8bbf\u95ee$x$\u8282\u70b9\u65f6\uff0c\u524d$i-1$\u6761\u5f27\u5c31\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u4e86\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u679a\u4e3e\u8282\u70b9$x$\u6240\u8fde\u7684\u5f27\u65f6\uff0c\u6539\u53d8\u679a\u4e3e\u7684\u8d77\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5220\u9664\u8d77\u70b9\u4ee5\u524d\u7684\u6240\u6709\u5f27\uff0c\u6765\u8fbe\u5230\u4f18\u5316\u526a\u679d\u7684\u6548\u679c\n\n\u5bf9\u5e94\u5230\u4ee3\u7801\u4e2d\uff0c\u5c31\u662f$now$\u6570\u7ec4\n\n------------\n#### \u540e\u5e8f\n\n\u7ec8\u4e8e\u5199\u5b8c\u4e86....\u73b0\u5728\u6765\u7279\u522b\u611f\u8c22\u4e00\u4e9b\uff1a@\u90a3\u4e00\u6761\u53d8\u963b\u5668 \u5bf9\u4e8e\u4f7f\u7528$EK$\u7b97\u6cd5\u8fc7\u6389\u672c\u9898\u7684\u5e2e\u52a9  \u4ee5\u53ca  @\u53d6\u4ec0\u4e48\u540d\u5b57  \u8bb2\u89e3$Dinic$\u7b97\u6cd5\u7684$DFS$\u90e8\u5206\u5185\u5bb9\n\n\u5982\u679c\u672c\u7bc7\u9898\u89e3\u6709\u4efb\u4f55\u9519\u8bef\u6216\u60a8\u6709\u4efb\u4f55\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u7559\u8a00\u533a\u8bc4\u8bba\uff0c\u6211\u4f1a\u53ca\u65f6\u56de\u590d\u3001\u66f4\u6b63\uff0c\u8c22\u8c22\u5927\u5bb6orz\uff01\n\n------------\n\n",
        "postTime": 1594286588,
        "uid": 145205,
        "name": "Eleven\u8c26",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "~~\u6708\u8d5b\u6253\u4e0d\u4e0b\u53bb\u4e86\uff0c\u4e8e\u662f\u6765\u5199\u8fd9\u9898\u7684\u9898\u89e3\u4ee5\u63d0\u9ad8\u4f30\u503c~~\n\n\u7adf\u7136\u6ca1\u6709 $ISAP$ \u7684\u9898\u89e3\uff1f $ISAP$ \u662f\u6211\u5927\u7ea6\u4e00\u5e74\u524d\u63a5\u89e6\u5230\u7684\uff0c\u90a3\u4e2a\u65f6\u5019\u662f\u81ea\u5df1\u5bf9\u7167\u7740[\u8fd9\u4e2a\u535a\u5ba2](https://www.luogu.com.cn/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp)\u81ea\u5b66\u7684\uff0c~~\u53d7\u76ca\u532a\u6d45~~\u3002\n\n\u6709\u4e9b\u4eba\u53ef\u80fd\u5c31\u4f1a\u95ee\u4e86\u65e2\u7136\u6709 $dinic$ \u4e86\uff0c\u4e3a\u4f55\u8fd8\u8981\u6709 $ISAP$ \uff1f \u56e0\u4e3a $ISAP$ \u66f4\u5feb\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6bd2\u7624\u51fa\u9898\u4eba\u4e5f\u90fd\u4e0d\u592a\u4f1a\u5361 $ISAP$ \u3002\u5177\u4f53\u60c5\u51b5\u53ef\u4ee5\u53c2\u8003 [\u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0\u5de8\u4f6c\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/McHf/p4722-network-flows-HLPP)\u7684\u6587\u672b\u6709\u5404\u5927\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u6548\u7387\u5bf9\u6bd4\u3002\u56e0\u4e3a\u535a\u5ba2 $markdown$ \u5d29\u4e86\uff0c\u6545\u8fd9\u91cc\u7ed9\u51fa\u539f\u6587\u4e2d\u7684\u8868\u683c\n\n| \u5e8f\u53f7 | $ Dinic $|$ FF $| $EK$ |\u7ec8\u6781 $HLPP$ | $ISAP$  |\n| -----------: | -----------: |-----------: |-----------: |-----------: |-----------: \n 1 |0.625s | TLE | 0.171s |0.125s| 0.265s | \n 2 | 0.562s | TLE | 0.156s | 0.093s | 0.265s | \n 3 | 0.828s | TLE | 0.625s | 0.093s | 0.390s | |\n  4 | 0.578s | TLE | 0.312s | 0.093s | 0.328s | |\n 5 | 2.468s | 24.000s | 0.046s | 0.078s | 0.218s | |\n 6 | 5.546s | TLE | 0.078s | 0.140s | 0.203s | |\n 7 | 5.218s | 10.984s | 0.109s | 0.125s | 0.328s | |\n  8 | 7.812s | 49.953s | 0.218s | 0.109s | 0.265s | |\n   9 | 1.281s | TLE | 0.375s | 0.078s | 0.375s | |\n  10 | 0.781s | TLE | 0.156s | 0.062s | 0.187s | |\n 11 | 0.312s | TLE | 0.046s | 0.093s | 0.203s | |\n 12 | 0.875s | TLE |2.703s | 0.078s | 0.328s | |\n 13 | 0.703s | TLE | 0.156s | 0.156s | 0.203s | |\n  14 | 0.500s | TLE |0.328s | 0.109s | 0.218s | |\n  15 |0.296s |TLE | 0.171s | 0.109s | 0.296s | |\n 16 | 0.562s | TLE | 0.234s | 0.125s | 0.296s | |\n 17 | 4.687s | TLE | 0.140s | 0.093s | 0.343s | |\n  18 | 2.921s | TLE | 0.031s | 0.156s | 0.296s | |\n 19 | 2.359s | TLE | 0.040s | 0.078s | 0.312s | |\n 20 | 4.656s | TLE | 0.078s | 0.062s | 0.390s | |\n 21 | 0.500s | TLE | 0.312s | 0.093s | 0.218s | |\n  22 |1.000s | TLE | 0.203s | 0.109s | 0.234s | |\n   23 | 0.343s | TLE | 0.062s | 0.156s | 0.265s | |\n 24 | 1.015s | TLE | 0.281s | 0.140s | 0.328s | \n | \u603b\u7528\u65f6 |46.428s|-| 7.037s|2.553s|6.754s|\n \n \u6211\u4eec\u53d1\u73b0\u9664\u53bb$HLPP$\uff0c$ISAP$ \u540a\u6253\u5168\u573a\u3002\n \n \u4e0b\u9762\u5c31\u6765\u542c\u6211\u8bb2\u89e3 $ISAP$ \u3002\n \n\n------------\n$\\texttt{ISAP(Improved Shortest Augumenting Path)}$\n\n\u5728 $dinic$ \u4e2d\uff0c\u6211\u4eec\u8981\u8dd1\u8bb8\u591a\u904d $bfs$ \uff0c\u8fd9\u5c31\u6709\u53ef\u80fd\u5bfc\u81f4\u7b97\u6cd5\u6548\u7387\u4e0d\u9ad8\u3002\n\n\u4e8e\u662f $ISAP$ \u5c31\u8fd9\u6837\u51fa\u73b0\u4e86\uff0c\u5b83\u53ea\u9700\u8981\u8dd1\u4e00\u904d $bfs$ !\n\n\u5927\u4f53\u8fd0\u884c\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n$\u00b7\\texttt{1.\u4ecet(\u6c47\u70b9)\u5230s\uff08\u6e90\u70b9\uff09\u8dd1bfs }$\n\n$\u00b7\\texttt{2.\u4eces\u5230t\u8dd1dfs}$\n\n$\u00b7\\texttt{3.\u91cd\u590d\u64cd\u4f5c2\u76f4\u5230\u51fa\u73b0\u65ad\u5c42}$\n\n\u53ef\u80fd\u770b\u5230\u8fd9\u5927\u5bb6\u90fd\u6709\u70b9\u61f5\uff0c\u5fc3\u4e2d\u6709\u8bb8\u591a\u95ee\u53f7\uff0c\u6ca1\u5173\u7cfb\uff0c\u4e0b\u9762\u6765\u4ecb\u7ecd\u539f\u7406\u3002\n\n$ISAP$ \u53ea\u8dd1\u4e00\u904d $bfs$ \u6807\u8bb0\u6df1\u5ea6\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u968f\u7740\u4e00\u6b21\u6b21 $dfs$ \u800c\u53d8\u9ad8\u3002\n\n\u8fd9\u6837\u6211\u4eec\u9700\u8981\u5f15\u8fdb $gap$ \u6570\u7ec4\uff0c $gap[i]$ \u8868\u793a\u9ad8\u5ea6\u4e3a $i$ \u7684\u70b9\u7684\u4e2a\u6570\u3002\u663e\u800c\u6613\u89c1\uff0c\u5f53 $gap[i]=0$ \u65f6\u4f1a\u51fa\u73b0\u65ad\u5c42\uff0c\u4e5f\u5c31\u662f $s$ \u548c $t$ \u4e0d\u518d\u8054\u901a\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u505c\u6b62\u5bfb\u627e\u3002\n\n\u4e0b\u9762\u5219\u662f**\u91cd\u70b9**\n\n\u6211\u4eec\u4ece\u7ec8\u70b9\u5411\u8d77\u70b9\u8dd1\u5b8c $bfs$ \u5f97\u5230\u6700\u521d\u7684\u9ad8\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u6b64\u65f6\u8fd8\u5269\u4e0b\u4e00\u4e9b\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5176\u9ad8\u5ea6\u63d0\u9ad8\uff0c\u4e0b\u4e00\u6b21\u904d\u5386\u65f6\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6d41\u63a8\u7ed9\u5176\u4ed6\u8fb9\u3002\n\n\u5f53\u7136\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u56e0\u4e3a\u4f5c\u8005\u65f6\u95f4\u5173\u7cfb\uff0c\u540e\u7eed\u66f4\u65b0\u3002\n\u5148\u653e\u51fa\u88f8\u7684 $ISAP$ (\u8fd9\u4e2a\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u662f\u6211\u4e00\u5e74\u524d\u5199\u7684\uff0c\u6709\u4e9b\u7e41\u7410\uff0c\u8fd8\u8bf7\u539f\u8c05)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=2147483647;//inf:\u6700\u5927\u503c \nint cnt=1,head[505];//cnt:\u7b2cCNT\u6761\u8fb9head[i]:\u7b2ci\u4e2a\u70b9\u5c5e\u4e8e\u7b2c\u51e0\u6761\u8fb9 \nint n,m,s,t;//n\u4e2a\u70b9m\u6761\u8fb9s:\u6e90\u70b9t:\u6c47\u70b9 \ninline int Read()\n{\n    int x=0;\n    char c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return x;\n}\nstruct Node\n{\n    int v;//\u5f53\u524d\u70b9 \n    int next;//\u8fde\u63a5\u70b9 \n    int val;//\u5bb9\u91cf \n}node[100010];//node[i]:\u7b2ci\u6761\u8fb9\u7684\u60c5\u51b5 \ninline void addedge(int u,int v,int val)\n{\n    node[++cnt].v=v;\n    node[cnt].val=val;\n    node[cnt].next=head[u];\n    head[u]=cnt;\n}\nint dep[505],gap[505];//dep[i]\u8868\u793a\u8282\u70b9i\u7684\u6df1\u5ea6\uff0cgap[i]\u8868\u793a\u6df1\u5ea6\u4e3ai\u7684\u70b9\u7684\u6570\u91cf \nvoid bfs()//\u5012\u7740\u641c \n{\n    memset(dep,-1,sizeof(dep));//\u628a\u6df1\u5ea6\u53d8\u4e3a-1(0\u4f1a\u5bfc\u81f4gap\u5d29\u574f) \n    memset(gap,0,sizeof(gap));\n    dep[t]=0;//\u6c47\u70b9\u6df1\u5ea6\u4e3a0 \n    gap[0]=1;//\u6df1\u5ea6\u4e3a0\u7684\u70b9\u67091\u4e2a \n    queue<int>q; \n    q.push(t);//t\u70b9\u5165\u6808 \n    while(!q.empty())\n\t{\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t\t{\n            int v=node[i].v;//v\u4e3a\u5f53\u524d\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9 \n            if(dep[v]!=-1)\tcontinue;//dep[v]!=-1\u76f8\u5f53\u4e8ev\u70b9\u5df2\u88ab\u904d\u5386||\u4e0d\u7ba1 \n            q.push(v);\n            dep[v]=dep[u]+1;//v\u70b9\u7684\u6df1\u5ea6\u6bd4u\u70b9\u59271 \n            gap[dep[v]]++;\n        }//\u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u904d\u5386\u8fc7 \n    }\n    return;\n}//\u4ecet\u5230s\u8dd1\u4e00\u904dbfs\uff0c\u6807\u8bb0\u6df1\u5ea6\nlong long maxflow;\nint dfs(int u,int flow)\n{\n    if(u==t)\n\t{\n        maxflow+=flow;\n        return flow;\n    }\n    int used=0;\n    for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t{\n        int d=node[i].v;\n        if(node[i].val&&dep[d]+1==dep[u])//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u6b8b\u91cf\u5927\u4e8e0,\u4e14\u6ca1\u6709\u65ad\u5c42 \n\t\t{\n            int mi=dfs(d,min(node[i].val,flow-used));\n            if(mi){\n                node[i].val-=mi;\n                node[i^1].val+=mi;\n                used+=mi;\n            }\n            if(used==flow)return used;\n        }\n    }\n    //\u5982\u679c\u5df2\u7ecf\u5230\u4e86\u8fd9\u91cc\uff0c\u8bf4\u660e\u8be5\u70b9\u51fa\u53bb\u7684\u6240\u6709\u70b9\u90fd\u5df2\u7ecf\u6d41\u8fc7\u4e86\n    //\u5e76\u4e14\u4ece\u524d\u9762\u70b9\u4f20\u8fc7\u6765\u7684\u6d41\u91cf\u8fd8\u6709\u5269\u4f59\n    //\u5219\u6b64\u65f6\uff0c\u8981\u5bf9\u8be5\u70b9\u66f4\u6539dep\n    //\u4f7f\u5f97\u8be5\u70b9\u4e0e\u8be5\u70b9\u51fa\u53bb\u7684\u70b9\u5206\u9694\u5f00\n    --gap[dep[u]];\n    if(gap[dep[u]]==0)dep[s]=n+1;//\u51fa\u73b0\u65ad\u5c42\uff0c\u65e0\u6cd5\u5230\u8fbet\u4e86\n    dep[u]++;//\u5c42++ \n    gap[dep[u]]++;//\u5c42\u6570\u5bf9\u5e94\u4e2a\u6570++\n    return used; \n}\nlong long ISAP()\n{\n    maxflow=0;\n    bfs();\n    while(dep[s]<n)\tdfs(s,inf);//\u6bcf\u8d70\u4e00\u904d\u589e\u5e7f\u8def,s\u7684\u5c42\u6570\u4f1a\u52a01,\u5982\u679c\u4e00\u76f4\u6ca1\u6709\u51fa\u73b0\u65ad\u5c42,\u6700\u591a\u8dd1n-dep(\u521abfs\u5b8c\u65f6s\u7684\u6df1\u5ea6)\u6761\u589e\u5e7f\u8def\u5171\u6709n\u4e2a\u70b9 \n    return maxflow;\n}\nint main()\n{\n    n=Read(),m=Read(),s=Read(),t=Read();\n    int u,v,w;\n    for(int i=1;i<=m;i++)\n\t{\n\t\tu=Read();\n\t\tv=Read();\n\t\tw=Read();\n\t\taddedge(u,v,w);//\u6b63\u5411\u8fb9 \n\t\taddedge(v,u,0);//\u53cd\u5411\u8fb9 \n\t}  \n    printf(\"%lld\\n\",ISAP());\n    return 0;\n}\n```\n### update 2020.8.9\n\n$\\texttt{ISAP \u306e \u5f53\u524d\u5f27\u4f18\u5316}$\n\n$\\texttt{Attention:}$ \u524d\u6587\u7684\u4ee3\u7801\u662f\u4f5c\u8005\u53bb\u5e74\u5199\u7684\uff0c\u540e\u6587\u5f53\u524d\u5f27\u4f18\u5316\u7684\u4ee3\u7801\u5219\u662f\u4eca\u5929\u5199\u7684\uff0c\u6545\u6570\u7ec4\u5b9a\u4e49\u540d\u79f0\u6709\u6240\u533a\u522b\uff0c\u5e76\u4e14\u7531\u7ed3\u6784\u4f53\u5b58\u8fb9\u6539\u4e3a\u6570\u7ec4\u5b58\u8fb9\uff0c\u8fd8\u8bf7\u8bfb\u8005\u539f\u8c05\u3002\u539f\u5148\u4ee3\u7801\u4e2d\u7684 $head$ \u6570\u7ec4\u662f\u8fd9\u4e2a\u4e0b\u6587\u7684 $h$ \u6570\u7ec4 $node[i].v$ \u5bf9\u5e94 $t[i]......$ \n\n\u5177\u4f53\u539f\u7406\u548c $dinic$ \u4e00\u6837\uff0c\u968f\u7740 $dfs$ \u800c\u6539\u53d8\u3002\u6211\u4eec\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u8fb9\u65f6\uff0c\u5c31\u628a\u5f53\u524d\u8282\u70b9\uff08$dfs$ \u4e2d\u7684 $u$ \uff09\u5bf9\u5e94\u7684 $cur$ \u4fee\u6539\u4e3a\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u3002\u90a3\u4e48\u4e0b\u6b21\u904d\u5386\u5230 $u$ \u70b9\u65f6\uff0c\u5c31\u76f4\u63a5\u4ece $cur[u]$ \u5f00\u59cb\uff08\u4e5f\u5c31\u662f\u8bf4\u4ece $h[u]$ \u5230 $cur[u]$ \u8fd9\u4e00\u6bb5\u76f4\u63a5\u4e0d\u7ba1\uff09\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u5462\uff1f\n\n\u5f53\u6211\u4eec $dfs$ \u65f6\u5148\u88ab\u904d\u5386\u7684\u8fb9\u5fc5\u7136\u5df2\u7ecf\u589e\u5e7f\u6216\u65e0\u6cd5\u7ee7\u7eed\u589e\u5e7f\uff0c\u8fd9\u6837\u7684\u8fb9\u4ec0\u4e48\u7528\u90fd\u6ca1\u6709\uff0c~~\u9664\u4e86\u6d6a\u8d39\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4~~\uff0c\u6545\u4e0b\u6b21\u518d\u904d\u5386\u5f53\u524d\u8282\u70b9\u65f6\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u6ca1\u7528\u7684\u70b9\u8fb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u4e00\u4e9b\u65f6\u95f4\u3002\n\n![](https://s1.ax1x.com/2020/08/09/aTV5DK.png)\n\n\u2191 $1.$ \u5f53\u524d\u5f27\u4f18\u5316 $2.$ \u666e\u901a $ISAP$\n\n\u4e0b\u9762\u653e\u51fa\u5173\u952e\u90e8\u5206\u4ee3\u7801\n```cpp\nint dfs(int u,int flow)\n{\n\tif(u==T)\n\t{\n\t\tmaxflow+=flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int p=cur[u];p;p=nxt[p])\n\t{\n\t\tcur[u]=p;//\u66f4\u65b0\u5f53\u524d\u5f27\n\t\tint v=t[p];\n\t\tif(val[p]&&dep[v]+1==dep[u])\n\t\t{\n\t\t\tint mi=dfs(v,min(flow-used,val[p]));\n\t\t\tif(mi)\n\t\t\t{\n\t\t\t\tval[p]-=mi;\n\t\t\t\tval[p^1]+=mi;\n\t\t\t\tused+=mi;\n\t\t\t}\n\t\t\tif(used==flow)\treturn used;\n\t\t} \n\t}\n\tif(--gap[dep[u]]==0)\tdep[s]=n+1;\n\tdep[u]++;\n\tgap[dep[u]]++;\n\treturn used;\n}\ninline long long ISAP()\n{\n\tmaxflow=0;\n\tbfs();\n\twhile(dep[s]<n)\tmemcpy(cur,h,sizeof(h)),dfs(s,INF);\n\treturn maxflow;\n}\n```\n\u2740\u5b8c\u7ed3\u6492\u82b1\u2740\n",
        "postTime": 1596877751,
        "uid": 181775,
        "name": "_Fontainebleau_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u6765\u7bc7EK\u7b97\u6cd5\u7684\u9898\u89e3\u3002\n\n------------\n\n\u8fd9\u91cc\u7528\u7684\u662f\u90bb\u63a5\u8868\uff0c\u8dd1\u7684\u5feb\u4e00\u70b9\uff0c\u56e0\u4e3a\u53ef\u4ee5\u538b\u7f29\u4e00\u4e0b\u91cd\u8fb9\u3002\n\nEK\u7b97\u6cd5\u7684\u672c\u8d28\u5c31\u662f\u4e0d\u65ad\u7684\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u7136\u540e\u628a\u627e\u5230\u7684\u6240\u6709\u589e\u5e7f\u8def\u7684\u6d41\u91cf\u7d2f\u52a0\u8d77\u6765\u3002\u8be6\u7ec6\u7684\u53ef\u4ee5\u770b\u4e00\u4e0b\u6d1b\u5495\u65e5\u62a5\u7684[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/ONE-PIECE/wang-lao-liu-di-zong-jie)\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\u4f1a\u5728\u4ee3\u7801\u91cc\u9762\u6307\u51fa\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nlong long n , m , s , t , ans;\nlong long pre[200010] , dis[2010][2010] , vis[200010] , minn[200010];\nvector<int> e[200010];\nbool bfs(){\n\tmemset(vis , 0 , sizeof(vis));\n\tqueue<int> q;\n\tvis[s] = 1;\n\tq.push(s);\n\tminn[s] = 0x3ffffff;\n\twhile(!q.empty()){\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < e[x].size(); i++){\n\t\t\tint nx = e[x][i];\n\t\t\tif(dis[x][nx] > 0){\n\t\t\t\tif(vis[nx]) continue;\n\t\t\t\tminn[nx] = min(minn[x] , dis[x][nx]);\t//\u627e\u51fa\u6700\u5c0f\u5bb9\u91cf \n\t\t\t\tpre[nx] = x;\t//\u8bb0\u5f55\u524d\u9a71 \n\t\t\t\tq.push(nx);\n\t\t\t\tvis[nx] = 1;\n\t\t\t\tif(nx == t) return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nvoid update(){\t//\u66f4\u65b0\u5269\u4f59\u5bb9\u91cf \n\tint x = t;\n\twhile(x != s){\n\t\tint px = pre[x];\n\t\tdis[x][px] += minn[t];\n\t\tdis[px][x] -= minn[t];\n\t\tx = px;\n\t}\n\tans += minn[t]; \n}\nint main(){\n\tcin >> n >> m >> s >> t;\n\tfor(int i = 1; i <= m; i++){\n\t\tint x , y , z;\n\t\tcin >> x >> y >> z;\n\t\te[x].push_back(y);\n\t\tdis[x][y] += z;\t//\u6709\u53ef\u80fd\u4f1a\u6709\u91cd\u8fb9\uff0c\u9700\u8981\u628a\u5bb9\u91cf\u7d2f\u52a0\u8d77\u6765\uff0c\u5982\u679c\u76f4\u63a5\u91cd\u65b0\u5efa\u4e00\u6761\u8fb9\u7684\u8bdd\uff0c\u4f1a\u56e0\u4e3a\u8fb9\u592a\u591a\u8d85\u65f6 \u8fd9\u4e2a\u5730\u65b9\u7684+=\u6211\u67e5\u4e86\u51e0\u4e2a\u5c0f\u65f6/kk \n\t\te[y].push_back(x);\t//\u53cd\u5411\u8fb9 \n\t}\n\twhile(bfs()) update();\n\tcout << ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1594282737,
        "uid": 117662,
        "name": "\u90a3\u4e00\u6761\u53d8\u963b\u5668",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "~~\u770b\u7740\u666e\u901a\u7248\u6ca1\u6709\u9884\u6d41\u63a8\u8fdb\u5c31\u6765\u6c34\u4e00\u53d1\u9898\u89e3~~\n\n~~\u5982\u679c\u89c9\u5f97\u6211\u8bb2\u7684\u4e0d\u597d\u8fd8\u8bf7\u79fb\u6b65[\u8fd9\u91cc](https://www.luogu.com.cn/problem/solution/P4722)~~\n\n~~\u7531\u4e8e\u8fd9\u662f\u76f4\u63a5\u4ece[\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb](https://www.luogu.com.cn/problem/P4722)\u7684\u4ee3\u7801\u6539\u8fc7\u6765\u7684~~\n\n~~\u6240\u4ee5\u52a0\u4e0a\u4e86\u5404\u79cd\u5947\u5947\u602a\u602a\u7684\u4f18\u5316~~\n\n~~\u5728\u6b63\u5f0f\u5f00\u59cb\u4e4b\u524d\u518dbb\u4e00\u53e5\uff1a~~\n\n~~```auto``` yyds!~~\n\n## \u9884\u6d41\u63a8\u8fdb\u7a0b\u5e8f\u6846\u67b6\n\n### \u9884\u6d41\u63a8\u8fdb\u4e3b\u7a0b\u5e8f\uff1a\n\n1. \u91cd\u7f6e\u70b9\u9ad8\u5ea6 \uff08\u6e90\u70b9\u4e3an\uff0c\u5176\u4f59\u4e3a0\uff09\n\t\n    \u91cd\u7f6e\u8fed\u4ee3\u5668\u3001\u70b9\u96c6\n    \n    \u91cd\u7f6egap\u6570\u7ec4\n    \n    \u91cd\u7f6e\u8d85\u989d\u6d41\n    \n    \uff08\u6e90\u70b9\u8d85\u989d\u6d41\u65e0\u9650\u5927\uff0c\u6c47\u70b9\u65e0\u9650\u5c0f\uff09\n\n2. \u4ece\u6e90\u70b9\u63a8\u6d41\n\n3. \u5168\u5c40\u91cd\u8d34\u6807\u7b7e\n\n4. \u904d\u5386\u6876\u6392\u6570\u7ec4\u5e76\u63a8\u6d41\n\n\t\uff08\u6876\u6392\u6570\u7ec4\u4e3a\u539f\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684\u4f18\u5148\u961f\u5217\u7684\u6539\u8fdb\uff0c\n    \n    \u53ef\u4ee5O(1)\u8bfb\u53d6\u6bcf\u4e2a\u70b9\uff09\n\n### \u5168\u5c40\u91cd\u8d34\u6807\u7b7e\uff1a\n\n1. \u91cd\u7f6e\u70b9\u9ad8\n\n\t\uff08\u6c47\u70b9\u4e3a0\uff0c\u5176\u4f59\u4e3an\uff0c\u5373\u4e0d\u518d\u5f53\u524d\u7f51\u7edc\u5185\uff09\n    \n    \u91cd\u7f6egap\u6570\u7ec4\n    \n2. \u4ece\u6c47\u70b9\u5f00\u59cb\u53cd\u5411\u5e7f\u641c\n\n3. \u91cd\u7f6e\u6876\u6392\u6570\u7ec4\u3001\u70b9\u96c6\n\n4. \u628a\u5728\u7f51\u7edc\u4e2d\u7684\u70b9\u52a0\u5165\u5176\u9ad8\u5ea6\u5bf9\u5e94\u7684\u70b9\u96c6\n\n\t\u82e5\u6709\u8d85\u989d\u6d41\u5c31\u540c\u65f6\u52a0\u5165\u6876\u6392\u6570\u7ec4\n    \n5. \u8bbe\u7f6e\u6700\u9ad8\u9ad8\u5ea6\u4e0e\u5f53\u524d\u63a8\u6d41\u9ad8\u5ea6\n\n### \u63a8\u6d41\u51fd\u6570\uff1a\n\n1. \u904d\u5386\u5f53\u524d\u70b9\u6240\u6709\u7684\u8fb9\u5e76\u4e14\u5c3d\u53ef\u80fd\u63a8\u6d41\n\n\t\u5982\u679c\u5f53\u524d\u8fb9\u6240\u8fde\u63a5\u7684\u70b9\u9ad8\u5ea6\u8fc7\u4f4e\n    \n    \u66f4\u65b0\u6700\u4f4e\u53ef\u884c\u7684\u9ad8\u5ea6\n\n2. \u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u4e0b\u53ea\u6709\u4e00\u4e2a\u70b9\n\n\t\uff08\u7531\u4e8e\u7a0b\u5e8f\u80fd\u591f\u8fd0\u884c\u5230\u8fd9\u91cc\uff0c\n    \n    \u6240\u4ee5\u8fd9\u610f\u5473\u7740\u5f53\u524d\u70b9\u65e0\u6cd5\u63a8\u51fa\u6240\u6709\u8d85\u989d\u6d41\uff0c\n    \n    \u56e0\u6b64\u6240\u6709\u6bd4\u5f53\u524d\u70b9\u9ad8\u7684\u70b9\u90fd\u65e0\u6cd5\u518d\u63a8\u6d41\uff09\n    \n    \u5c06\u6bd4\u5f53\u524d\u9ad8\u5ea6\u9ad8\u7684\u6240\u6709\u70b9\u90fd\u79fb\u51fa\u7f51\u7edc\n    \n    \u66f4\u65b0\u6700\u9ad8\u9ad8\u5ea6\n    \n3. \u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u4e0b\u4e0d\u6b62\u4e00\u4e2a\u70b9\n\n\t\u66f4\u65b0\u5f53\u524d\u70b9\u7684\u65b0\u9ad8\u5ea6\n    \n    \u66f4\u65b0\u6700\u9ad8\u9ad8\u5ea6\n    \n    \u5bf9\u5f53\u524d\u70b9\u91cd\u65b0\u63a8\u6d41\n\n\u4ee5\u4e0a\u662f\u5bf9\u5bf9\u9884\u6d41\u63a8\u8fdb\u7684\u7b97\u6cd5\u6846\u67b6\u7684\u5927\u81f4\u4ecb\u7ecd\n\n\u5177\u4f53\u7b97\u6cd5\u7ec6\u8282\u5728\u4ee3\u7801\u4e2d\u6709\u8fdb\u4e00\u6b65\u7684\u6ce8\u91ca\n\n~~\u7801\u98ce\u602a\u5f02 \u8bf7\u52ff\u5728\u610f~~\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n//\u300a\u5173\u4e8e\u52a0\u5f3a\u7248\u4e0d\u5361longlong\u800c\u666e\u901a\u7248\u5361longlong\u7684\u8fd9\u4ef6\u4e8b\u300b\nusing namespace std;\n\nconst int INF = 9223372036854775807;\n\nint n, m, s, t, highest, now_height, tmp, u, v, w;\n\nstruct Edge\n{\n\tint next, targ, wght;\n    //next\u6307\u5411\u5f53\u524d\u8fb9\u5bf9\u5e94\u7684\u53cd\u5411\u8fb9 targ\u662f\u5f53\u524d\u8fb9\u6307\u5411\u7684\u76ee\u6807\u70b9 wght\u662f\u5f53\u524d\u8fb9\u7684\u6743\u503c\n\tEdge(int N, int T, int W) :next(N), targ(T), wght(W) {}\n};\n\nvector<list<int>::iterator>it;//it[i]\u662f\u5bf9\u5e94h[i]\u7684\u8fed\u4ee3\u5668\n\nvector<Edge>head[120005];//\u90bb\u63a5\u8868\u5b58\u8fb9\n\nvector<int>l, gap, ph, bs[1205];\n//l\u662f\u8d85\u989d\u6d41 gap\u662f\u4f18\u5316\u7528\u6570\u7ec4 ph\u662f\u70b9\u7684\u9ad8\u5ea6 bs\u662f\u6876\u6392\u6570\u7ec4\n\nqueue<int>q;\n\nlist<int>h[120005];\n//h\u662f\u4e00\u4e2a\u9ad8\u5ea6\u6240\u5bf9\u5e94\u7684\u70b9\u96c6\n\nvoid add(int u, int v, int w)//\u6b63\u53cd\u5b58\u8fb9\n{\n\thead[u].push_back(Edge(head[v].size(), v, w));\n\thead[v].push_back(Edge(head[u].size() - 1, u, 0));\n}\n\nvoid relabel()//\u91cd\u8d34\u6807\u7b7e(\u5168\u5c40\u7248\u672c)\n{\n\tph.assign(n + 5, n);//\u521d\u59cb\u5316ph(\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6),\u5168\u90e8\u8bbe\u4e3an\n\tgap.assign(n + 5, 0);//\u521d\u59cb\u5316gap(\u5b58\u6bcf\u4e2a\u9ad8\u5ea6\u6709\u591a\u5c11\u70b9)\n\tph[t] = 0;//\u6c47\u70b9\u9ad8\u5ea6\u8bbe\u4e3a0\n\tq.push(t);//\u6c47\u70b9\u5165\u961f \u53cd\u5411\u641c\u7d22\u5e76\u521d\u59cb\u5316\u9ad8\u5ea6\n\twhile (!q.empty())\n\t{\n\t\ttmp = q.front();\n\t\tq.pop();\n\t\tfor (auto p = head[tmp].begin(); p != head[tmp].end(); p++)//\u904d\u5386\u5f53\u524d\u70b9\u7684\u6240\u6709\u53cd\u5411\u8fb9\n\t\t\tif (ph[p->targ] == n && head[p->targ][p->next].wght)//\u5982\u679c\u76ee\u6807\u70b9\u65e0\u9ad8\u5ea6\u4e14\u4e24\u8005\u4e4b\u95f4\u8fde\u63a5\n\t\t\t{\n\t\t\t\tgap[ph[p->targ] = ph[tmp] + 1]++;//\u91cd\u8bbe\u76ee\u6807\u70b9\u9ad8\u4e3a\u5f53\u524d\u9ad8\u5ea6+1 \u5e76\u4e14gap\u6570\u7ec4++\n\t\t\t\tq.push(p->targ);//\u76ee\u6807\u70b9\u5165\u961f\n\t\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)//\u521d\u59cb\u5316\n\t{\n\t\tbs[i].clear();\n\t\th[i].clear();\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tif (ph[i] < n)//\u5982\u679c\u5f53\u524d\u70b9\u5728\u7f51\u7edc\u4e2d\n\t\t{\n\t\t\tit[i] = h[ph[i]].insert(h[ph[i]].begin(), i);//\u5c06\u5f53\u524d\u70b9\u52a0\u5165\u5176\u9ad8\u5ea6\u6240\u5bf9\u5e94\u7684\u70b9\u96c6,\u66f4\u65b0\u8fed\u4ee3\u5668\n\t\t\tif (l[i])//\u5982\u679c\u5f53\u524d\u70b9\u8fd8\u6709\u8d85\u989d\u6d41\n\t\t\t\tbs[ph[i]].push_back(i);//\u52a0\u5165\u63a8\u6d41\u7528\u7684\u6876\u6570\u7ec4\n\t\t}\n\thighest = (now_height = ph[tmp]);\n    //\u8bbe\u7f6e\u6700\u9ad8\u9ad8\u5ea6\u548c\u5f53\u524d\u9ad8\u5ea6 \u8fd9\u91cc\u7684tmp\u662f\u5e7f\u641c\u4e2d\u6700\u540e\u5f39\u51fa\u7684\u70b9 \u663e\u7136\u5b83\u7684\u9ad8\u5ea6\u662f\u6700\u9ad8\u7684\n}\n\nvoid push(int u, Edge& e)//push\u5b50\u51fd\u6570\n{\n\tint v = e.targ, df = min(l[u], e.wght);\n\te.wght -= df;//\u66f4\u65b0\u5f53\u524d\u8fb9\u4e0a\u6d41\u7684\u5927\u5c0f\n\thead[v][e.next].wght += df;//\u66f4\u65b0\u76ee\u6807\u8fb9\u4e0a\u6d41\u7684\u5927\u5c0f\n\tl[u] -= df;//\u5f53\u524d\u70b9\u8d85\u989d\u6d41\u51cf\u5c11\n\tl[v] += df;//\u76ee\u6807\u70b9\u8d85\u989d\u6d41\u589e\u52a0\n\tif (l[v] && l[v] <= df)//\u5982\u679c\u5f53\u524d\u70b9\u539f\u5148\u65e0\u8d85\u989d\u6d41\n\t\tbs[ph[v]].push_back(v);//\u52a0\u5165\u63a8\u6d41\u7528\u6876\u6570\u7ec4\n}\n\nvoid push(int u)//\u5bf9\u70b9u\u8fdb\u884c\u63a8\u6d41\n{\n\tint new_height = n, u_height = ph[u];\n\tfor (auto p = head[u].begin(); p != head[u].end(); p++)\n\t\tif (p->wght)//\u5982\u679c\u5f53\u524d\u8fb9\u8fd8\u6709\u4f59\u6d41\n\t\t{\n\t\t\tif (ph[u] == ph[p->targ] + 1)//\u5982\u679c\u9ad8\u5ea6\u80fd\u591f\u6d41\n\t\t\t{\n\t\t\t\tpush(u, *p);//\u63a8\u6d41\n\t\t\t\tif (l[u] <= 0)//\u5982\u679c\u5f53\u524d\u70b9\u65e0\u8d85\u989d\u6d41\n\t\t\t\t\treturn;//\u76f4\u63a5\u7ed3\u675f\n\t\t\t}\n\t\t\telse//\u5982\u679c\u4e0d\u80fd\u6d41\n\t\t\t\tnew_height = min(new_height, ph[p->targ] + 1);//\u66f4\u65b0\u5f53\u524d\u70b9\u7684\u6700\u4f4e\u65b0\u9ad8\u5ea6\n\t\t}\n    //\u4ee3\u7801\u5982\u679c\u80fd\u591f\u6267\u884c\u5b8cfor\u5faa\u73af\u5230\u8fbeif \u5c31\u8bf4\u660e\u6b64\u65f6\u5f53\u524d\u70b9\u65e0\u6cd5\u63a8\u5b8c\u6240\u6709\u6d41 \u5fc5\u987b\u66f4\u65b0\u70b9\u7684\u9ad8\u5ea6\n\tif (gap[u_height] == 1)//\u5982\u679c\u6ca1\u6709\u4e0e\u5f53\u524d\u70b9\u7684\u9ad8\u5ea6\u76f8\u540c\u7684\u70b9\n\t{\n\t\tfor (int i = u_height; i <= highest; i++)//\u904d\u5386\u9ad8\u5ea6\u6bd4\u5f53\u524d\u70b9\u9ad8\u7684\u70b9\n\t\t\tfor (auto p = h[i].begin(); p != h[i].end(); p++)//\u5f39\u6389\u6240\u6709\u70b9\n\t\t\t{\n\t\t\t\tgap[ph[*p]]--;//gap--\n\t\t\t\tph[*p] = n;//\u628a\u70b9\u79fb\u51fa\u7f51\u7edc\n\t\t\t}\n\t\thighest = u_height - 1;//\u66f4\u65b0\u6700\u9ad8\u9ad8\u5ea6\u4e3a\u5f53\u524d\u70b9\u9ad8\u5ea6-1\n\t}\n\telse//\u5982\u679c\u6709\n\t{\n\t\tgap[u_height]--;//\u628a\u5f53\u524d\u70b9\u79fb\u51fagap\n\t\tit[u] = h[u_height].erase(it[u]);//\u628a\u5f53\u524d\u70b9\u79fb\u51fa\u5b83\u5bf9\u5e94\u7684\u70b9\u96c6\n\t\tph[u] = new_height;//\u66f4\u65b0\u5f53\u524d\u70b9\u7684\u9ad8\u5ea6\n\t\tif (new_height == n)//\u70b9\u53ef\u80fd\u88ab\u79fb\u51fa\u7f51\u7edc\n\t\t\treturn;\n\t\tgap[new_height]++;//\u628a\u5f53\u524d\u70b9\u79fb\u56degap\n\t\tit[u] = h[new_height].insert(h[new_height].begin(), u);//\u628a\u5f53\u524d\u70b9\u79fb\u56de\u5b83\u73b0\u5728\u5bf9\u5e94\u7684\u70b9\u96c6\n\t\thighest = max(highest, now_height = new_height);//\u66f4\u65b0\u6700\u9ad8\u9ad8\u5ea6\n\t\tbs[new_height].push_back(u);//\u628a\u5f53\u524d\u70b9\u91cd\u65b0\u52a0\u5165\u63a8\u6d41\u6876\u6570\u7ec4\n\t}\n}\n\nint HLPP()\n{\n\tnow_height = highest = 0;\n\tph.assign(n + 5, 0);//\u91cd\u7f6e\u70b9\u9ad8\n\tph[s] = n;//\u8bbe\u6e90\u70b9\u9ad8\u5ea6\u4e3an\n\tit.resize(n + 5);//\u91cd\u7f6e\u8fed\u4ee3\u5668\n\tfor (int i = 1; i <= n; i++)\n\t\tif (i != s)\n\t\t\tit[i] = h[ph[i]].insert(h[ph[i]].begin(), i);//\u628a\u8fed\u4ee3\u5668\u4e0e\u70b9\u96c6\u5bf9\u5e94\n\tgap.assign(n + 5, 0);//\u91cd\u7f6egap\n\tgap[0] = n - 1;//\u5f53\u524d\u9ad8\u5ea6\u4e3a0\u7684\u6709n-1\u4e2a\uff08\u5373\u9664\u6e90\u70b9\u4e4b\u5916\u7684\u70b9\uff09\n\tl.assign(n + 5, 0);//\u91cd\u7f6e\u8d85\u989d\u6d41\n\tl[s] = INF;//\u8bbe\u6e90\u70b9\u6709\u65e0\u9650\u5927\u7684\u8d85\u989d\u6d41\n\tl[t] = -INF;//\u4fdd\u8bc1\u6c47\u70b9\u4e0d\u4f1a\u6ea2\u51fa\n\tfor (auto p = head[s].begin(); p != head[s].end(); p++)//\u4ece\u6e90\u70b9\u5f00\u59cb\u63a8\u6d41\n\t\tpush(s, *p);\n\trelabel();//\u5168\u5c40\u91cd\u8d34\u6807\u7b7e\n\tfor (int i; now_height;)\n\t{\n\t\tif (bs[now_height].empty())//\u5982\u679c\u5f53\u524d\u9ad8\u5ea6\u7684\u6240\u6709\u70b9\u904d\u5386\u5b8c\u4e86\u5c31\u964d\u5230\u4e0b\u4e00\u4e2a\u9ad8\u5ea6\n\t\t\tnow_height--;\n\t\telse\n\t\t{\n\t\t\ti = bs[now_height].back();//\u6309\u987a\u5e8f\u63a8\u6d41\n\t\t\tbs[now_height].pop_back();\n\t\t\tpush(i);\n\t\t}\n\t}\n\treturn l[t] + INF;//\u9632\u6ea2\u51fa\u5199\u6cd5\n}\n\nsigned main()\n{\n\tcin >> n >> m >> s >> t;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tcin >> u >> v >> w;\n\t\tadd(u, v, w);\n\t}\n\tcout << HLPP();\n}\n```\n\n\u672c\u4eba\u5bf9\u9884\u6d41\u63a8\u8fdb\u7684\u7406\u89e3\u5168\u9760\u5543\u539f\u9898\u89e3\u7684\u4ee3\u7801\n\n\u6240\u4ee5\u5bf9\u67d0\u4e9b\u8bed\u53e5\u7684\u5b9e\u9645\u610f\u4e49\u89e3\u8bfb\u53ef\u80fd\u6709\u8bef\n\n\u6c42dalao\u8f7b\u55b7\uff08",
        "postTime": 1603769815,
        "uid": 252015,
        "name": "Shiroko",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\n[\u66f4\u597d\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Aswert/p/13287851.html)\n\n# \u7f51\u7edc\u6d41\n \n## \u7f51\u7edc\u6d41\u7684\u6982\u5ff5\n\n\u5728\u4e00\u4e2a\u6709\u5411\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u6e90\u70b9\uff0c\u4e00\u4e2a\u6c47\u70b9\uff0c\u6bcf\u4e00\u6761\u8fb9\u4e0a\u90fd\u6709\u4e00\u4e2a\u6d41\u91cf\u4e0a\u9650\uff08\u4ee5\u4e0b\u79f0\u4e3a\u5bb9\u91cf\uff09\uff0c\u5373\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u6d41\u91cf\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u4e0a\u754c\uff0c\u540c\u65f6\uff0c\u9664\u6e90\u70b9\u548c\u6c47\u70b9\u5916\uff0c\u6240\u6709\u70b9\u7684\u5165\u6d41\u548c\u51fa\u6d41\u90fd\u76f8\u7b49\uff0c\n\u800c\u6e90\u70b9\u53ea\u6709\u6d41\u51fa\u7684\u6d41\uff0c\u6c47\u70b9\u53ea\u6709\u6c47\u5165\u7684\u6d41\u3002\u8fd9\u6837\u7684\u56fe\u53eb\u505a\u7f51\u7edc\u6d41\u3002\n\n \n## \u7f51\u7edc\u6d41\u7684\u76f8\u5173\u5b9a\u4e49\n\n \n\n  \u6e90\u70b9\uff1a\u6709 $ n $ \u4e2a\u70b9\uff0c\u6709 $ m $ \u6761\u6709\u5411\u8fb9\uff0c\u6709\u4e00\u4e2a\u70b9\u5f88\u7279\u6b8a\uff0c\u53ea\u51fa\u4e0d\u8fdb\uff0c\u53eb\u505a\u6e90\u70b9\u3002\n\n  \u6c47\u70b9\uff1a\u53e6\u4e00\u4e2a\u70b9\u4e5f\u5f88\u7279\u6b8a\uff0c\u53ea\u8fdb\u4e0d\u51fa\uff0c\u53eb\u505a\u6c47\u70b9\u3002\n\n\u5bb9\u91cf\u548c\u6d41\u91cf\uff1a\u6bcf\u6761\u6709\u5411\u8fb9\u4e0a\u6709\u4e24\u4e2a\u91cf\uff0c\u5bb9\u91cf\u548c\u6d41\u91cf\uff0c\u4ecei\u5230j\u7684\u5bb9\u91cf\u901a\u5e38\u7528$ c[i,j] $\u8868\u793a,\u6d41\u91cf\u5219\u901a\u5e38\u662f $ f[i,j] $\n\n\u3000\u3000\u901a\u5e38\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8fb9\u60f3\u8c61\u6210\u9053\u8def\uff0c\u6d41\u91cf\u5c31\u662f\u8fd9\u6761\u9053\u8def\u7684\u8f66\u6d41\u91cf\uff0c\u5bb9\u91cf\u5c31\u662f\u9053\u8def\u53ef\u627f\u53d7\u7684\u6700\u5927\u7684\u8f66\u6d41\u91cf\u3002\n\n\u3000\u3000\u5f88\u663e\u7136\u7684\uff0c\u6d41\u91cf<=\u5bb9\u91cf\u3002\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u662f\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u7684\u60f3\u8c61\u6210\u6ca1\u6709\u5b58\u50a8\u529f\u80fd\u7684\u8d27\u7269\u7684\u4e2d\u8f6c\u7ad9\uff0c\n\n\u3000\u3000\u6240\u6709\u201c\u8fdb\u5165\u201d\u4ed6\u4eec\u7684\u6d41\u91cf\u548c\u7b49\u4e8e\u6240\u6709\u4ece\u4ed6\u672c\u8eab\u201c\u51fa\u53bb\u201d\u7684\u6d41\u91cf\u3002\n  \n#   \u6700\u5927\u6d41\n\n   \u6700\u5927\u6d41\uff1a\u628a\u6e90\u70b9\u6bd4\u4f5c\u5de5\u5382\u7684\u8bdd\uff0c\u95ee\u9898\u5c31\u662f\u6c42\u4ece\u5de5\u5382\u6700\u5927\u53ef\u4ee5\u53d1\u51fa\u591a\u5c11\u8d27\u7269\uff0c\u662f\u4e0d\u81f3\u4e8e\u8d85\u8fc7\u9053\u8def\u7684\u5bb9\u91cf\u9650\u5236\uff0c\u4e5f\u5c31\u662f\uff0c\u6700\u5927\u6d41\u3002\n\n \n## \u3000\u3000Ford-Fulkerson \u589e\u5e7f\u8def\u7b97\u6cd5\n\n\u3000\u3000  \u3000\u8be5\u65b9\u6cd5\u901a\u8fc7\u5bfb\u627e\u589e\u5e7f\u8def\u6765\u66f4\u65b0\u6700\u5927\u6d41\uff0c\u6709 EK,dinic,SAP,ISAP \u4e3b\u6d41\u7b97\u6cd5\u3002\n\n\u3000    \u3000\u6c42\u89e3\u6700\u5927\u6d41\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8ba4\u8bc6\u4e00\u4e9b\u6982\u5ff5\u3002\n\n\u3000\u3000\u3000**\u589e\u5e7f\u8def**\uff1a\u5728\u56fe\u4e2d\u82e5\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684 \u5269\u4f59\u5bb9\u91cf\u90fd\u5927\u4e8e 0 \uff08\u6ce8\u610f\u662f\u5927\u4e8e\u4e0d\u662f\u5927\u4e8e\u7b49\u4e8e\uff09\uff0c\u8fd9\u6761\u8def\u88ab\u79f0\u4e3a\u589e\u5e7f\u8def\u3002\n\n\u3000\u3000\u3000![](https://images0.cnblogs.com/blog/464052/201403/291452163127554.jpg)\n   \n## \t EK\u7b97\u6cd5  O($ nm^2 $)\n\n \n### \u3000\u6c42\u89e3\u601d\u8def\uff1a\n\n\u3000\u3000\u3000\u4ece\u56fe\u4e2d\u627e\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u7136\u540e\u589e\u5e7f\uff0c\u600e\u4e48\u627e\uff1f\n\n\u3000\u3000\u30001.\u4ece\u6e90\u70b9\u5f00\u59cbbfs\uff0c\u627e\u5230\u5230\u6c47\u70b9\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5e76\u8bb0\u5f55\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u5269\u4f59\u6d41\u91cf\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u8981\u627e\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u5728bfs\u65f6\u8981\u5224\u65ad\u4e00\u4e0b\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\u662f\u5426\u4e3a0\uff0c\u8bb0\u5f97\u7528\u4e00\u4e2apre\u6570\u7ec4\u8bb0\u5f55\u4e0b\u8def\u5f84\u3002\n\n\u3000\u3000\u30002.\u627e\u5230\u8def\u5f84\u540e\uff0c\u5bf9\u5176\u8fdb\u884c\u589e\u5e7f\uff08\u4ee3\u7801\u91cc\u7684up\u51fd\u6570\uff09\uff0c\u589e\u5e7f\u5c31\u662f\u628a\u8fd9\u6761\u8def\u5f84\u7684\u6bcf\u6761\u8fb9\u90fd\u51cf\u53bb\u8fd9\u4e9b\u8fb9\u4e2d\u5269\u4f59\u6d41\u91cf\u7684\u6700\u5c0f\u503c\uff08bfs\u65f6\u8bb0\u5f55\uff09\uff0c\u53cd\u5411\u8fb9\u52a0\u4e0a\u8fd9\u4e2a\u6700\u5c0f\u503c\uff08\u5173\u4e8e\u65b9\u5411\u8fb9\u4e0b\u9762\u518d\u89e3\u91ca\uff09\u3002\n\n\u3000\u3000\u30003.\u4e00\u76f4\u627e\u589e\u5e7f\u8def\u589e\u5e7f\uff0c\u76f4\u5230\u4e0d\u80fd\u589e\u5e7f\u4e3a\u6b62\uff08\u627e\u4e0d\u5230\u589e\u5e7f\u8def\uff09\u3002\n\n\u3000\u3000\u3000\u53ef\u4ee5\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\u3002\n\n![](https://images.cnblogs.com/cnblogs_com/SYCstudio/1036212/o_WLL1.gif)\n\n\u3000\u3000\u3000\u611f\u8c22SYCstudio\u7684\u56fe\uff08\u672c\u4eba\u8f83\u83dc\u61d2\u4e0d\u4f1a\u753b\uff09\u3002\n\n\u3000\u3000\u3000\u4e0a\u9762\u6211\u4eec\u63d0\u5230\u4e86\u53cd\u5411\u8fb9\uff0c\u4e0b\u9762\u6211\u4eec\u89e3\u91ca\u4e0b\u4e3a\u4ec0\u4e48\u8981\u5efa\u53cd\u5411\u8fb9\u3002\n\n![](https://img2020.cnblogs.com/blog/2094580/202007/2094580-20200714154311880-526682392.png)\n\n\u3000\u3000\u3000\u50cf\u6211\u4eec\u4e0a\u9762\u8fd9\u5f20\u56fe\uff0c\u56e0\u4e3a\u6211\u4eecbfs\u65f6\u4e0d\u80fd\u786e\u5b9a\u7b2c\u4e00\u6b21\u8d70\u54ea\u6761\u8fb9\uff0c\u8981\u662f\u4f60\u8fd0\u6c14\u4e0d\u597d\uff0c\n\n\u3000\u3000\u3000\u5982\u679cbfs\u7b2c\u4e00\u6b21\u627e\u5230\u7684\u589e\u5e7f\u8def\u662f1\u21923\u21922\u21921\u7684\u8bdd\uff0c\u6211\u4eec\u6700\u540e\u6c42\u5f97\u7684\u6700\u5927\u6d41\u5c31\u662f1.\n\n\u3000\u3000\u3000\u4f46\u662f\u5f88\u660e\u663e\u8fd9\u5f20\u56fe\u6700\u5927\u6d41\u662f2\uff0c\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u7b2c\u4e00\u6b21\u627e\u7684\u589e\u5e7f\u8def\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u65f6\u5019\u4f60\u5c31\u51c9\u4e86\u3002\n\n\u3000\u3000\u3000\u90a3\u6211\u4eec\u600e\u4e48\u89e3\u51b3\u5462\u53cd\u5411\u8fb9\uff0c\u53cd\u5411\u8fb9\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u53cd\u6094\u7684\u673a\u4f1a\uff0c\u4e5f\u5c31\u662f\u8ba9\u6d41\u8fc7\u7684\u6d41\u91cf\u6d41\u56de\u53bb\u3002\n\n\u3000\u3000\u3000\u5982\u679c\u8fd8\u4e0d\u660e\u767d\u7684\u8bdd\u8fd8\u5b66\u4ec0\u4e48\u7f51\u7edc\u6d41\uff0c\u4e0b\u9762\u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u3000\u3000\u3000\u5148\u8bf4\u4e00\u4e0b\u53cd\u5411\u8fb9\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u53cd\u5411\u8fb9\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53\u6b63\u5411\u8fb9\u5269\u4f59\u6d41\u91cf\u51cf\u5c11\u7684\u662f\u65f6\u5019\uff0c\n\n\u3000\u3000\u3000\u53cd\u5411\u8fb9\u6d41\u91cf\u589e\u52a0\u540c\u6837\u7684\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u53cd\u6094\u7684\u6d41\u91cf\u7b49\u4e8e\u5df2\u7ecf\u4ece\u8fd9\u6761\u8fb9\u6b63\u5411\u6d41\u8fc7\u7684\u6d41\u91cf\u3002\n\n\u3000\u3000\u3000\u4e0b\u9762\u770b\u4e00\u4e0b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u53cd\u5411\u8fb9\u53cd\u6094\u7684\u53c8\u8981\u505a\u56feqaq\u3002\n\n\u3000\u3000\u3000\u56e0\u4e3a\u6211\u4e0d\u4f1a\u753b\u53cd\u5411\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5047\u8bbe\u20181/0\u2019\u5de6\u8fb9\u90a3\u4e2a\u6570\u5b57\u8868\u793a\u6b63\u5411\u53d8\u8fb9\u6743\uff0c\u53f3\u8fb9\u662f\u53cd\u5411\u8fb9\u3002\n\n\u3000\u3000\u3000\u4e0b\u9762\u8fd9\u5f20\u56fe\u5c31\u662f\u5efa\u5b8c\u8fb9\u540e\u7684\u56fe\u3002\n\n\u3000\u3000\u3000\n   ![](https://img2020.cnblogs.com/blog/2094580/202007/2094580-20200714160411195-140230024.png)\n\n\u3000\u3000\u3000\u5982\u679c\u6211\u4eec\u7b2c\u4e00\u6b21\u627e\u5230\u7684\u589e\u5e7f\u8def\u662f1\u21923\u21922\u21921\u7684\u8bdd\uff0c\u603b\u6d41\u91cf+1=1\uff0c\u56fe\u5c31\u53d8\u6210\u4e86\n\n\u3000\u3000\u3000![](https://img2020.cnblogs.com/blog/2094580/202007/2094580-20200714161121310-318879515.png)\n\n\u3000\u3000\u3000\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8fd8\u53ef\u4ee5\u627e\u5230\u589e\u5e7f\u8def1\u21922\u21923\u21924\uff0c\u603b\u6d41\u91cf+1=2\uff0c\u56fe\u53d8\u6210\n\n\u3000\u3000\u3000![](https://img2020.cnblogs.com/blog/2094580/202007/2094580-20200714161433010-1924014758.png)\n\n\u3000\u3000\u3000\u7136\u540e\u53d1\u73b0\uff0c\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u4e86\uff0c\u7a0b\u5e8f\u7ed3\u675f\u4e0d\u7528\u4f5c\u56fe\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\u518d\u627e\u589e\u5e7f\u8def\u7684\u8fc7\u7a0b\u4e2d3\u21922\u8fd9\u6761\u8fb9\u6b63\u5411\u4e00\u6b21\uff0c\u53cd\u5411\u4e00\u6b21\uff0c\u76f8\u5f53\u4e8e\u6d41\u91cf\u4e3a0.\n\n\u3000\u3000\u3000\u8fd9\u5c31\u662f\u53cd\u5411\u8fb9\u7684\u4f5c\u7528\u3002\n\n\u3000\u3000\u3000\u53e6\u5916\u63d0\u4f9b\u4e00\u79cd\u5c0f\u6280\u5de7\uff0c\u4f7f\u7528\u90bb\u63a5\u8868\u5efa\u56fe\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fb9\u7684\u7f16\u53f7\u4ece2\u5f00\u59cb\u5efa\uff0c\u6211\u4eec\u77e5\u9053\n\n\u3000\u3000\u30002^1=3,3^1=2\u2026\u2026\n\n\u3000\u3000\u3000\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f02\u6216\u5f97\u5230\u53cd\u5411\u8fb9\u7684\u7f16\u53f7\uff08\u8bb0\u5f97\u5efa\u5b8c\u6b63\u5411\u8fb9\uff0c\u7d27\u63a5\u7740\u5c31\u5efa\u53cd\u5411\u8fb9\uff09\uff0c\u5177\u4f53\u770b\u4ee3\u7801\n\n\u3000\u3000\u3000\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO( $ nm^2 $ )\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u672c\u4eba\u5f88\u83dc\u4e0d\u4f1a\uff0c\u53e6\u5916\uff0c\u4e00\u822c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u503c\u7684\u3002\n\u3000\n\n### \u4ee3\u7801\uff08EK\uff09\n\n\u3000\u3000\u3000\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define LL long long\nusing namespace std;\nconst int inf=1<<29;\nconst int N=207;\nconst int M=5e3+7;\nint n,m,s,t,cnt=1;//\u4ece\u7f16\u53f72\u5f00\u59cb\u5efa\u8fb9 \nLL maxf;//\u6700\u5927\u6d41 \nint head[N],vis[N],pre[N];\nLL incf[N];\nLL v[N][N]; \nstruct edge{\n    int v,nxt;\n    LL w;\n}e[M<<1];//\u56e0\u4e3a\u8981\u5efa\u53cd\u5411\u8fb9\uff0c\u6240\u4ee5\u5f00\u4e8c\u500d\u7a7a\u95f4 \nvoid add_edge(int u,int v,LL w){//\u5b58\u8fb9 \n    cnt++;\n    e[cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\nbool bfs(){\n    memset(vis,0,sizeof(vis));\n    queue<int>q;\n    q.push(s);\n    vis[s]=1;\n    incf[s]=inf;\n    while(q.size()){\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=e[i].nxt){\n            if(e[i].w==0||vis[e[i].v])continue;\n            int to=e[i].v;\n            incf[to]=min(incf[now],e[i].w);//\u8bb0\u5f55\u8def\u5f84\u6700\u5c0f\u8fb9\u7684\u6d41\u91cf \n            pre[to]=i;//\u8bb0\u5f55\u8def\u5f84\u8fb9\u7684\u7f16\u53f7 \n            q.push(to);\n            vis[to]=1;\n            if(to==t)return 1;\n        }\n    }\n    return 0;\n}\nvoid up(){\n    int x=t;\n    while(x!=s){\n        int i=pre[x];\n         e[i].w-=incf[t];\n         e[i^1].w+=incf[t];\n         x=e[i^1].v;//\u53cd\u5411\u8fb9\u52a0\u4e0a\u6b63\u5411\u8fb9\u51cf\u5c11\u7684\u6d41\u91cf \n    }\n    maxf+=incf[t];\n} \ninline int read()\n{\n    int x = 0 , f = 1;  char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-')  f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    return x * f;\n}\nint main(){\n    n = read(); m = read(); s = read(); t = read();\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        x = read(); y = read(); z = read();\n        v[x][y] += z;\n    }\n    for(int i = 1;i <= n;i ++) for(int j = 1;j <= n;j ++) if(v[i][j]) add_edge(i,j,v[i][j]),add_edge(j,i,0);\n    while(bfs())up();\n    cout<<maxf<<endl;\n}//\u53ef\u80fd\u8ddf\u4f60\u4eec\u7801\u98ce\u4e0d\u540c\uff0c\u256e(\u256f\u25bd\u2570)\u256d\n\n```\n\n \n### \u3000\u3000Dinic\n\n\u3000\u3000\u3000\u4f1a\u4e86Dinic\u8fd8\u5b66EK\u6709\u4ec0\u4e48\u7528\u5462\uff0c\u6709\u7528\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e0b\u4e0b\u9762\u8fd9\u5f20\u56fe\u4e0d\u5c0f\u5fc3\u628a\u989c\u8272\u6539\u4e86\u4e0b\u3002\n   \n   ![](https://img2020.cnblogs.com/blog/2094580/202007/2094580-20200714153910807-1308536711.png)\n\n\u3000\u3000\u3000\u5982\u679c\u4f60\u8fd0\u6c14\u4e0d\u597d\u7684\u8bdd\uff0c\u82e5\u4f60\u6bcf\u6b21\u627e\u5230\u7684\u589e\u5e7f\u8def\u90fd\u7ecf\u8fc7\u4e862\u21923\u62163\u21922\u8fd9\u6761\u8fb9\u7684\u8bdd\u4f60\u53c8\u51c9\u4e86\n\n\u3000\u3000\u3000\u6240\u4ee5\u8fd9\u65f6\u5019\u5c31\u7528\u5230\u4e86\u6211\u4eec\u7684Dinic\u7b97\u6cd5\u3002\n\n\u3000\u3000\u3000Dinic \u7b97\u6cd5 \u7684\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\u6bcf\u6b21\u589e\u5e7f\u524d\uff0c\u6211\u4eec\u5148\u7528 BFS \u6765\u5c06\u56fe\u5206\u5c42\u3002\u8bbe\u6e90\u70b9\u7684\u5c42\u6570\u4e3a1 \uff0c\n\n\u3000\u3000\u3000\u90a3\u4e48\u4e00\u4e2a\u70b9\u7684\u5c42\u6570\u4fbf\u662f\u5b83\u79bb\u6e90\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\u3002\n\n\u3000\u3000\u3000\u5c42\u6b21\u7528\u6570\u7ec4dep\u8868\u793a\u3002\u5206\u5c42\u56fe\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u6ee1\u8db3 $ dep[v]=dep[u]+1 $\u3002\n\n\u3000\u3000\u3000\u6211\u4eec\u601d\u8003\uff0cEK\u7b97\u6cd5\u6bcf\u8f6e\u53ef\u80fd\u4f1a\u904d\u5386\u6574\u4e2a\u56fe\uff0c\u4f46\u53ea\u627e\u51fa\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5c5e\u4e8e\u5355\u8def\u589e\u5e7f\u3002\n\n\u3000\u3000\u3000\u800cDinic\u5c5e\u4e8e\u591a\u8def\u589e\u5e7f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O( $ n^2m $)\n\u3000\u3000\u3000\u6c42\u89e3\u601d\u8def\uff1a\n\n\u3000\u3000\u30001.bfs\u6c42\u51fa\u8282\u70b9\u7684\u5c42\u6b21\uff0c\u6784\u5efa\u5206\u5c42\u56fe\n\n\u3000\u3000\u30002.\u5bf9\u4e8e\u6c42\u51fa\u7684\u5206\u5c42\u56fe\uff0c\u7528dfs\u8fdb\u884c\u591a\u8def\u589e\u5e7f\uff0c\u7531\u4e8e\u672c\u4eba\u83dc\uff0c\u8bb2\u7684\u4e0d\u662f\u5f88\u660e\u767d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4ee3\u7801\n\n\u3000\u3000\u30003.\u5f53\u524d\u5f27\u4f18\u5316 \uff1acur[]\u6570\u7ec4\u7684\u5e94\u7528\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u5df2\u7ecf\u88ab\u589e\u5e7f\u8fc7\uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u53ef\u80fd\u88ab\u589e\u5e7f\u7b2c\u4e8c\u6b21\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u4e0b\u4e00\u6b21\u8fdb\u884c\u589e\u5e7f\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u518d\u8d70\u90a3\u4e9b\u5df2\u7ecf\u88ab\u589e\u5e7f\u8fc7\u7684\u8fb9\u3002\n\n\u3000\u3000\u3000\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nconst int N=210;\nconst int M=5e3+7;\nusing namespace std;\nint n,m,s,t,cnt=1;\nLL max_flow;\nint dep[N],head[N],cur[N];\nstruct edge{\n    int v,w,nxt;\n}e[M<<1];//\u6570\u7ec4\u542b\u4e49\u4e0e\u4e0a\u4e00\u7bc7EK\u542b\u4e49\u4e00\u6837\uff0ccur[]\u6570\u7ec4\u662fdinic\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u4e0b\u9762\u4f1a\u63d0\u5230 \nvoid add_edge(int u,int v,int w){\n    cnt++;\n    e[cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\n\nint bfs(){//\u6784\u5efa\u5206\u5c42\u56fe \n    for(int i=1;i<=n;i++) dep[i]=0;//\u6bcf\u4e2a\u8282\u70b9\u5c42\u6b21\u521d\u59cb\u5316 \n    queue<int>q;\n    q.push(s);\n    dep[s]=1;//\u6e90\u70b9\u521d\u59cb\u5316\u4e3a1\uff1b \n    while(q.size()){\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=e[i].nxt){\n            int to=e[i].v,val=e[i].w;\n            if(val&&(!dep[to])){//\u6784\u5efa\u5206\u5c42\u56fe\u7684\u65f6\u5019\u8981\u4fdd\u8bc1\u8fb9\u4e0d\u4e3a0,\u5982\u679cdep[]\u5df2\u7ecf\u88ab\u66f4\u65b0\u5c31\u4e0d\u7528\u66f4\u65b0\u4e86 \n                q.push(to);\n                dep[to]=dep[now]+1;\n                if(to==t)return 1;//\u5982\u679c\u5230\u8fbe\u6c47\u70b9\uff0c\u8fdb\u884cdfs \n            }\n        }\n    }\n    return 0;\n}\n\nint dfs(int u,int flow){\n    if(u==t)return flow;\n    int rest=flow,k;//rest\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u6700\u5927\u5141\u8bb8\u901a\u8fc7\u6d41\u91cf \n    for(int i=cur[u];i&&rest;i=e[i].nxt){//\u5f53\u524d\u5f27\u4f18\u5316 \n        cur[u]=i;\n        int to=e[i].v,val=e[i].w;\n        if(val&&(dep[to]==dep[u]+1)){\n            int k=dfs(to,min(rest,val));\n            if(!k)dep[to]=0;\n            e[i].w-=k;\n            e[i^1].w+=k;\n            rest-=k;\n        }\n    }\n    return flow-rest;\n}\n\nint main(){\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add_edge(x,y,z);\n        add_edge(y,x,0);\n    }\n    int flow=0;\n    while(bfs()){\n        for(int i=1;i<=n;i++){\n            cur[i]=head[i]; \n        }\n        while(flow=dfs(s,1<<29))max_flow+=flow;\n    }\n    cout<<max_flow<<\"\\n\";\n}\n```\n\n## \u6700\u5c0f\u5272\n\n\u3000\u3000\u3000\u6700\u5c0f\u5272\u95ee\u9898\u662f\u6307\uff1a\u7ed9\u51fa\u4e00\u79cd\u6709\u5411\u56fe\uff08\u65e0\u5411\u56fe\uff09\u548c\u4e24\u4e2a\u70b9s\uff0ct\u4ee5\u53ca\u56fe\u4e2d\u7684\u8fb9\u7684\u8fb9\u6743\uff0c\n\n\u3000\u3000\u3000\u6c42\u4e00\u4e2a\u6743\u503c\u548c\u6700\u5c0f\u7684\u8fb9\u96c6\uff0c\u4f7f\u5f97\u5220\u9664\u8fd9\u4e9b\u8fb9\u4e4b\u540e\u662fs\uff0ct\u4e0d\u8fde\u901a\u3002\u8fd9\u7c7b\u95ee\u9898\uff0c\u4e00\u822c\u8fd0\u7528\u6700\n\n\u3000\u3000\u3000\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u6d41\u5b9a\u7406\uff0c\u6c42\u51fa\u6700\u5927\u6d41\u6765\u89e3\u51b3\u3002\u8bc1\u660e\u81ea\u884c\u767e\u5ea6\u767e\u79d1\n\n\u3000\u3000\u3000\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n  int bfs(){\n      for(int i=1;i<=2*n;i++)dep[i]=0;\n      queue<int>q;\n      q.push(s);\n      dep[s]=1;\n      while(q.size()){\n          int now=q.front();\n          q.pop();\n          for(int i=head[now];i;i=e[i].nxt){\n              int to=e[i].v,val=e[i].w;\n              if(val&&!dep[to]){\n                  q.push(to);\n                  dep[to]=dep[now]+1;\n                  if(to==t)return 1;\n              }\n\n    int dfs(int u,int flow){\n        if(u==t)return flow;\n        int rest=flow,k;\n      for(int i=cur[u];i;i=e[i].nxt){\n          cur[u]=i;\n          int to=e[i].v,val=e[i].w;\n          if(val&&(dep[to]==dep[u]+1)){\n              k=dfs(to,min(val,rest));\n              if(!k)dep[to]=0;\n              e[i].w-=k;\n              e[i^1].w+=k;\n              rest-=k;\n          }\n      }\n      return flow-rest;\n  }\n```\n## \u8d39\u7528\u6d41\n\n\u3000\u3000\u3000\u8d39\u7528\u6d41\u5c31\u662f\u6bcf\u6761\u8fb9\u9664\u4e86\u6709\u5bb9\u91cf\u9650\u5236\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5355\u4f4d\u8d39\u7528 w(x,y)\uff0c\n\n\u3000\u3000\u3000\u5f53\u6d41\u8fc7(x,y)\u8fd9\u6761\u8fb9\u65f6\uff0c\u8981\u82b1\u8d39 f(x,y)*w(x,y)\u7684\u8d39\u7528\n\n\u3000\u3000\u3000\u4e00\u822c\u6c42\u89e3\u7684\u95ee\u9898\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u548c\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\uff0c\n\n\u3000\u3000\u3000\u57fa\u4e8e\u4e4b\u524d\u63d0\u5230\u7684Ek\u7b97\u6cd5\uff0c\u628abfs\u6539\u6210spfa\u5373\u53ef\uff0c\n\n\u3000\u3000\u3000\u5c31\u662f\u6bcf\u6b21\u5148\u589e\u5e7f\u8d39\u7528\u6700\u5c0f\u7684\u6d41\u3002\u3002\u3002\n\n\u3000\u3000\u3000\n```cpp\n  \nint spfa(){//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n    for(int i=0;i<=n;i++)dis[i]=inf,vis[i]=0;\n    queue<int>q;\n    q.push(s);\n    dis[s]=0;\n    vis[s]=1;\n    incf[s]=inf;\n    while(q.size()){\n        int now=q.front();\n        vis[now]=0;\n        q.pop();\n        for(int i=head[now];i;i=e[i].nxt){\n            int to=e[i].v,val=e[i].w;\n            if(!val)continue;\n            if(dis[to]>dis[now]+e[i].f){\n                dis[to]=dis[now]+e[i].f;\n                incf[to]=min(incf[now],val);\n                pre[to]=i;\n                if(!vis[to]){\n                    vis[to]=1;\n                    q.push(to);\n                }\n            }\n        }\n    }\n    if(dis[t]==inf)return 0;\n    return 1;\n}\nint up(){\n    int x=t;\n    max_flow+=incf[t];\n    min_cost+=dis[t]*incf[t];\n    while(x!=s){\n        int i=pre[x];\n        e[i].w-=incf[t];\n        e[i^1].w+=incf[t];\n        x=e[i^1].v;\n    }\n}\n```\n  end......",
        "postTime": 1599567409,
        "uid": 101283,
        "name": "highscore",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\n>\u4e4b\u524d\u7684\u6570\u636e\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u8fc7\u5f31\u800c\u5361\u4e0d\u4f4f\u5b58\u5728\u4e00\u8f66 bug \u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u7406\u8bba\u590d\u6742\u5ea6\u8fc7\u4e8e\u79bb\u8c31\u7b49\u7b49\uff0c\u76ee\u524d\u65b0\u6362\u4e86\u4e00\u4efd\u6570\u636e\u5e76\u4fee\u6539\u4e86\u4e00\u4e2a\u76f8\u5bf9\u5408\u7406\u7684\u6570\u636e\u8303\u56f4\u3002\n\u5982\u679c\u60a8\u4ee5\u524d\u7684\u4ee3\u7801\u4f7f\u7528\u7684\u662f int \u6765\u5b58\u50a8\u6570\u636e\uff0c\u91cd\u65b0\u63d0\u4ea4\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5c06\u5176\u6539\u4e3a long long\uff0c\u5426\u5219\u65e0\u6cd5\u901a\u8fc7\u3002\n\u540c\u65f6\uff0c\u7531\u4e8e\u539f\u6709\u9898\u89e3\u5df2\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\uff0c\u6545\u64a4\u4e0b\u5df2\u6709\u9898\u89e3\uff0c\u5e76\u91cd\u65b0\u5f00\u542f\u9898\u89e3\u63d0\u4ea4\u3002\u2014\u2014 @\u4e00\u6276\u82cf\u4e00\n\n~~\u5df2\u7ecf\u6ca1\u6709\u9898\u89e3\u4e86\uff0c\u672c\u849f\u84bb\u745f\u745f\u53d1\u6296\uff0c\u5e0c\u671b\u9898\u89e3\u80fd\u8fc7~~\n\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bDinic\u7b97\u6cd5\u5427\n## Dinic\n\nDinic\u7b97\u6cd5\u662f\u7f51\u7edc\u6d41\u6700\u5927\u6d41\u7684\u4f18\u5316\u7b97\u6cd5\u4e4b\u4e00\uff0c\u6bcf\u4e00\u6b65\u5bf9\u539f\u56fe\u8fdb\u884c\u5206\u5c42\uff0c\u7136\u540e\u7528DFS\u6c42\u589e\u5e7f\u8def\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^2*m)\uff0cDinic\u7b97\u6cd5\u6700\u591a\u88ab\u5206\u4e3an\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u5305\u62ec\u5efa\u5c42\u6b21\u7f51\u7edc\u548c\u5bfb\u627e\u589e\u5e7f\u8def\u4e24\u90e8\u5206\u3002 \nDinic\u7b97\u6cd5\u7684\u601d\u60f3\u662f\u5206\u9636\u6bb5\u5730\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u589e\u5e7f\u3002\u5b83\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5\u4e0d\u540c\u4e4b\u5904\u662f\uff1a\u6700\u77ed\u589e\u5e7f\u8def\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u5b8c\u4e00\u6b21BFS\u589e\u5e7f\u540e\uff0c\u8981\u91cd\u65b0\u542f\u52a8BFS\u4ece\u6e90\u70b9Vs\u5f00\u59cb\u5bfb\u627e\u53e6\u4e00\u6761\u589e\u5e7f\u8def;\u800c\u5728Dinic\u7b97\u6cd5\u4e2d\uff0c\u53ea\u9700\u4e00\u6b21DFS\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u589e\u5e7f\u3002\n\n## \u5c42\u6b21\u56fe\uff1a\n\n\u5c42\u6b21\u56fe\uff0c\u5c31\u662f\u628a\u539f\u56fe\u4e2d\u7684\u70b9\u6309\u7167\u70b9\u5230\u6e90\u7684\u8ddd\u79bb\u5206\u201c\u5c42\u201d\uff0c\u53ea\u4fdd\u7559\u4e0d\u540c\u5c42\u4e4b\u95f4\u7684\u8fb9\u7684\u56fe\u3002\n\n## \u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n \n1\u3001\u6839\u636e\u6b8b\u91cf\u7f51\u7edc\u8ba1\u7b97\u5c42\u6b21\u56fe\u3002 \n2\u3001\u5728\u5c42\u6b21\u56fe\u4e2d\u4f7f\u7528DFS\u8fdb\u884c\u589e\u5e7f\u76f4\u5230\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \n3\u3001\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u65e0\u6cd5\u589e\u5e7f\u3002\n\n## \u5b9e\u73b0\n\n\u9996\u5148\u5bf9\u6bcf\u6761\u5f27\u5b58\u4e00\u6761\u53cd\u5411\u5f27\uff0c\u521d\u59cb\u6d41\u91cf\u4e3a0\uff0c\u5f53\u6b63\u5411\u5f27\u5269\u4f59\u6d41\u91cf\u51cf\u5c11\u65f6\uff0c\u53cd\u5411\u5f27\u5269\u4f59\u6d41\u91cf\u968f\u4e4b\u589e\u52a0\uff0c\u8fd9\u6837\u5c31\u4e3a\u6bcf\u6761\u5f27\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53cd\u6094\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u6d41\u6cbf\u53cd\u5411\u5f27\u9000\u56de\u800c\u53bb\u5bfb\u627e\u66f4\u4f18\u7684\u8def\u7ebf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u6d41\u56fe\uff0c\u7528bfs\u5c06\u56fe\u5206\u5c42\uff0c\u53ea\u4fdd\u7559\u6bcf\u4e2a\u70b9\u5230\u4e0b\u4e00\u4e2a\u5c42\u6b21\u7684\u5f27\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u5bfb\u627e\u589e\u5e7f\u8def\u7684\u4ee3\u4ef7\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u53ef\u884c\u7684\u589e\u5e7f\u64cd\u4f5c\uff0c\u7528dfs\u7684\u65b9\u6cd5\u5bfb\u627e\u4e00\u6761\u7531\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84\u5e76\u83b7\u5f97\u8fd9\u6761\u8def\u5f84\u7684\u6d41\u91cfc\u3002\u6839\u636e\u8fd9\u6761\u8def\u5f84\u4fee\u6539\u6574\u4e2a\u56fe,\u5c06\u6240\u7ecf\u4e4b\u5904\u6b63\u5411\u8fb9\u6d41\u91cf\u51cf\u5c11c\uff0c\u53cd\u5411\u8fb9\u6d41\u91cf\u589e\u52a0c\u3002\u5982\u6b64\u53cd\u590d\u76f4\u5230bfs\u627e\u4e0d\u5230\u53ef\u884c\u7684\u589e\u5e7f\u8def\u7ebf\u3002\n\n## \u5f53\u524d\u5f27\u4f18\u5316\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9x\uff0c\u5f53\u5b83\u5728dfs\u4e2d\u8d70\u5230\u4e86\u7b2ci\u6761\u5f27\u65f6\uff0c\u524di-1\u6761\u5f27\u5230\u6c47\u70b9\u7684\u6d41\u4e00\u5b9a\u5df2\u7ecf\u88ab\u6d41\u6ee1\u800c\u6ca1\u6709\u53ef\u884c\u7684\u8def\u7ebf\u4e86\u3002\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u8bbf\u95eex\u8282\u70b9\u7684\u65f6\u5019\uff0c\u524di-1\u6761\u5f27\u5c31\u53ef\u4ee5\u88ab\u5220\u6389\u800c\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u679a\u4e3e\u8282\u70b9x\u6240\u8fde\u7684\u5f27\u65f6\uff0c\u6539\u53d8\u679a\u4e3e\u7684\u8d77\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5220\u9664\u8d77\u70b9\u4ee5\u524d\u7684\u6240\u6709\u5f27\u4ee5\u8fbe\u5230\u4f18\u5316\u7684\u6548\u679c\u3002\n\n\n\u672c\u9898\u589e\u5f3a\u4e86\u6570\u636e\uff0c\u65f6\u95f4\u66f4\u662f\u5361\u5230\u4e86500ms\uff0c\u4ee5\u524d\u7684\u597d\u591a\u9898\u89e3\u90fd\u8fc7\u4e0d\u53bb\u4e86\u3002\n\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6211\u4f7f\u7528\u5f27\u4f18\u5316\u6700\u540e\u4e24\u4e2a\u70b9\u8dd1\u4e86750ms T \u4e86\uff0c\u4f46\u662f\u6211\u628a\u5f27\u4f18\u5316\u53bb\u6389\u4e86\u4ee5\u540e\u53ea\u8dd1\u4e8660ms\uff0c\u6210\u529fAC\uff0c\u771f\u662f\u5f88\u7384\u5b66\u3002\n\n## \u66f4\u65b0\uff01\n\n\u6211\u77e5\u9053\u54ea\u91cc\u7684\u95ee\u9898\u4e86\uff0c\u84dd\u4e66\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\u4e0a\u7684\u5f27\u4f18\u5316\u597d\u50cf\u6709\u70b9\u95ee\u9898\uff0c$now[x] = i$\u597d\u50cf\u5e94\u8be5\u653e\u5230for\u5faa\u73af\u91cc\u9762\uff0c\u6211\u53c2\u7167\u7684[\u6d1b\u8c37\u65e5\u62a5](https://www.luogu.com.cn/blog/ONE-PIECE/wang-lao-liu-jiang-xie-zhi-dinic)\u4e0a\u7684\u5199\u6cd5\uff0c\u8dd1\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\u53ea13ms\u3002\uff08\u54ea\u4f4d\u5927\u4f6c\u80fd\u4e0d\u80fd\u544a\u8bc9\u6211\u4e3a\u4ec0\u4e48\uff09\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<math.h>\n#include<cstring>\n#include<queue>\n//#define ls (p<<1)\n//#define rs (p<<1|1)\n#define over(i,s,t) for(register int i = s;i <= t;++i)\n#define lver(i,t,s) for(register int i = t;i >= s;--i)\n//#define int __int128\n//#define lowbit(p) p&(-p)\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll INF = 1e18;\nconst int N = 5e2+7;\nconst int M = 2e5+7;\n\nint head[N],nex[M],ver[M],tot = 1;\nll edge[M];\nint n,m,s,t;\nll maxflow;\nll deep[N];//\u5c42\u7ea7\u6570\uff0c\u5176\u5b9e\u5e94\u8be5\u662flevel\nint now[M];//\u5f53\u524d\u5f27\u4f18\u5316\nqueue<int>q;\n\ninline void read(int &x){\n    int f=0;x=0;char c=getchar();\n    while(c<'0'||c>'9')f|=c=='-',c=getchar();\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    x=f?-x:x;\n}\n\ninline void add(int x,int y,int z){//\u5efa\u6b63\u8fb9\u548c\u53cd\u5411\u8fb9\n    ver[++tot] = y;edge[tot] = z;nex[tot] = head[x];head[x] = tot;\n    ver[++tot] = x;edge[tot] = 0;nex[tot] = head[y];head[y] = tot;\n}\n\ninline bool bfs(){//\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u6784\u9020\u5206\u5c42\u56fe\n    over(i,1,n)deep[i] = INF;\n    while(!q.empty())q.pop();\n    q.push(s);deep[s] = 0;now[s] = head[s];//\u4e00\u4e9b\u521d\u59cb\u5316\n    while(!q.empty()){\n        int x = q.front();q.pop();\n        for(int i = head[x];i;i = nex[i]){\n            int y = ver[i];\n            if(edge[i] > 0 && deep[y] == INF){//\u6ca1\u8d70\u8fc7\u4e14\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0\n                q.push(y);\n                now[y] = head[y];//\u5148\u521d\u59cb\u5316\uff0c\u6682\u65f6\u90fd\u4e00\u6837\n                deep[y] = deep[x] + 1;\n                if(y == t)return 1;//\u627e\u5230\u4e86\n            }\n        }\n    }\n    return 0;\n}\n\n//flow\u662f\u6574\u6761\u589e\u5e7f\u8def\u5bf9\u6700\u5927\u6d41\u7684\u8d21\u732e\uff0crest\u662f\u5f53\u524d\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf\uff0c\u7528rest\u53bb\u66f4\u65b0flow\nll dfs(int x,ll flow){//\u5728\u5f53\u524d\u5206\u5c42\u56fe\u4e0a\u589e\u5e7f\n    if(x == t)return flow;\n    ll ans = 0,k,i;\n    for(i = now[x];i && flow;i = nex[i]){\n        now[x] = i;//\u5f53\u524d\u5f27\u4f18\u5316\uff08\u907f\u514d\u91cd\u590d\u904d\u5386\u4ecex\u51fa\u53d1\u7684\u4e0d\u53ef\u62d3\u5c55\u7684\u8fb9\uff09\n        int y = ver[i];\n        if(edge[i] > 0 && (deep[y] == deep[x] + 1)){//\u5fc5\u987b\u662f\u4e0b\u4e00\u5c42\u5e76\u4e14\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0\n            k = dfs(y,min(flow,edge[i]));//\u53d6\u6700\u5c0f\n            if(!k)deep[y] = INF;//\u526a\u679d\uff0c\u53bb\u6389\u589e\u5e7f\u5b8c\u6bd5\u7684\u70b9\n            edge[i] -= k;//\u56de\u6eaf\u65f6\u66f4\u65b0\n            edge[i ^ 1] += k;//\u6210\u5bf9\u53d8\u6362\n            ans += k;\n            flow -= k;\n        }\n        //if(!flow)return rest;\n    }\n\n    return ans;\n}\n\nvoid dinic(){\n    while(bfs())\n        maxflow += dfs(s,INF);\n}\n\nint main()\n{\n    read(n);read(m);read(s);read(t);\n    tot = 1;//\u6210\u5bf9\u53d8\u6362\n    over(i,1,m){\n        int x,y,z;\n        read(x);read(y);read(z);\n        add(x,y,z);\n    }\n    dinic();\n    printf(\"%lld\\n\",maxflow);\n    return 0;\n}\n```\n",
        "postTime": 1592558389,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "$upd:$\u5220\u53bb\u4e86\u67d0\u4e9b\u8bfb\u8005\u8ba4\u4e3a\u5f88\u7e41\u7410\u7684\u7b14\u8005\u7684\u601d\u8003\u8fc7\u7a0b\n\n# \u8fd9\u662f\u4e00\u5957\u7f51\u7edc\u6d41\u5b66\u4e60\u7b14\u8bb0\n\n\u901a\u8fc7\u9605\u8bfb\u6b64\u6587\uff0c\u60a8\u80fd\u4e86\u89e3\u7f51\u7edc\u6d41\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5b66\u4f1a$EK,Dinic$\u7b49\u6700\u5927\u6d41\u7b97\u6cd5\uff0c\u5e76\u4e14\u80fd\u5b66\u4f1a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u505a\u6cd5\uff08\u4ece\u800c\u987a\u4fbf$AC$\u5176\u6a21\u677f\uff09\u3002\n\n\u672c\u6587\u539f\u672c\u8fd8\u4ecb\u7ecd\u4e86\u5339\u914d\u95ee\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6587\u4e0d\u5bf9\u9898\u5c31\u5220\u4e86\uff0c\u5982\u679c\u8fd8\u60f3\u4e86\u89e3\u5173\u4e8e\u5339\u914d\u7b97\u6cd5\u7684\u77e5\u8bc6\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://www.cnblogs.com/BUAA-Wander/p/13311261.html)\n\n## \u7f51\u7edc\u6d41\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\n\n\n### \u6e90\u70b9\n\n\u6709\u5411\u56fe\u4e2d\u5165\u5ea6\u4e3a$0$\u7684\u70b9\uff0c\u53ea\u51fa\u4e0d\u8fdb\u3002\n\n### \u6c47\u70b9\n\n\u6709\u5411\u56fe\u4e2d\u51fa\u5ea6\u4e3a$0$\u7684\u70b9\uff0c\u53ea\u8fdb\u4e0d\u51fa\u3002\n\n\n### \u589e\u5e7f\u8def\n\n\u5728\u5339\u914d\u95ee\u9898\u4e2d\uff1a\u59cb\u4e8e\u975e\u5339\u914d\u70b9\u4e14\u7ec8\u4e8e\u975e\u5339\u914d\u70b9\u7684\u4ea4\u9519\u8def\u3002\u663e\u7136\uff0c\u589e\u5e7f\u8def\u4e0a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a$1$\u3002\n\n\u5728\u7f51\u7edc\u6d41\u95ee\u9898\u4e2d\uff1a\u4ece\u6e90\u70b9$s$\u5230\u6c47\u70b9$t$\u7684\u4e00\u6761\u8def\uff0c\u4e14\u8fd9\u6761\u8def\u4e0a\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf$-$\u5b9e\u9645\u6d41\u91cf$>0$\u3002\n\n\n## \u57fa\u672c\u7b97\u6cd5\u4e0e\u5b9e\u73b0\n\n### EK\uff08Edmond-Karp\uff09\u7b97\u6cd5\n\n\u8be5\u7b97\u6cd5\u7528\u4e8e\u89e3\u51b3\u6700\u5927\u6d41\u95ee\u9898\uff0c\u5373\u4ece$s$\u6ce8\u6c34\uff0c\u95ee\u6700\u591a\u6709\u591a\u5c11\u6c34\u80fd\u5230$t$\u3002\n\n\u8003\u8651\u80fd\u4ece$s$\u5230$t$\u7684\u6240\u6709\u8def\u5f84\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u5f84\u6765\u8bf4\uff0c\u5b83\u80fd\u6d41\u5230$t$\u7684\u6d41\u91cf\uff0c\u6700\u5927\u4e0d\u4f1a\u8d85\u8fc7\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u4ee5\u6b64\u4e3a\u57fa\u672c\u76ee\u6807\uff0c\u6211\u4eec\u4e0d\u65ad\u5728\u7f51\u7edc\u4e2d\u627e\u589e\u5e7f\u8def\uff0c\u6bcf\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5c31\u628a\u8fd9\u6761\u8def\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u8fb9\u6743\u51cf\u53bb\u8be5\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743$minweight$\uff0c\u610f\u5473\u7740\u8fd9\u4e9b\"\u7ba1\u9053\"\u90fd\u5df2\u7ecf\u88ab\u5360\u7528\u4e86$minweight$\u7684\u6d41\u91cf\u4e86\uff0c\u5728\u627e\u5176\u4ed6\u8def\u65f6\u5c31\u4e0d\u80fd\u6309\u7167\u539f\u8fb9\u6743\u53bb\u6d41\u4e86\u3002\u5f53\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u6d41\u91cf\u5c31\"\u5e94\u8be5\"\u6700\u5927\u4e86\u3002\n\n\u4f46\u662f\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0e\u641c\u7d22\u7684\u987a\u5e8f\u6709\u5173\u7cfb\uff0c\u5f88\u6709\u53ef\u80fd\u6709\u4e00\u4e2a\u672c\u80fd\u6d41\u8fc7\u5f88\u5927\u6d41\u91cf\u7684\u7ba1\u9053\u88ab\u5176\u4ed6\u5f88\u591a\u5c0f\u6d41\u5360\u7528\uff0c\u800c\u8fd9\u4e9b\u5c0f\u6d41\u672c\u53ef\u4ee5\u8d70\u5176\u4ed6\u7684\u6d41\u91cf\u5c0f\u7684\u7ba1\u9053\uff0c\u8fd9\u5bfc\u81f4\u771f\u7684\u5927\u6d41\u6765\u7684\u65f6\u5019\u53cd\u800c\u6d41\u4e0d\u52a8\u4e86\uff08\u8fd9\u4e2a\u95ee\u9898\u548c\u5728\u505a\u80cc\u5305\u95ee\u9898\u65f6\u7528\u8d2a\u5fc3\u7b56\u7565\u51fa\u7684\u95ee\u9898\u662f\u4e00\u4e2a\u9053\u7406\uff09\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u524d\u4e24\u5f20\u56fe\u6765\u611f\u6027\u7406\u89e3\u8fd9\u79cd\u60c5\u51b5\uff0c\u770b\u8fc7\u4e4b\u540e\u8bf7\u56de\u6765\u770b\u89e3\u51b3\u65b9\u6848\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u5728\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u6700\u66b4\u529b\u7684\u66b4\u641c\u505a\u6cd5\u867d\u7136\u6548\u7387\u4f4e\uff0c\u4f46\u4fdd\u8bc1\u4e86\u6b63\u786e\u6027\uff0c\u539f\u56e0\u662f\u5b83\u53ef\u4ee5\u56de\u6eaf\uff0c\u56de\u6eaf\u4e4b\u540e\u76f8\u5f53\u4e8e\u628a\u7269\u54c1\u4ece\u80cc\u5305\u4e2d\u53c8\u62ff\u4e86\u51fa\u6765\uff0c\u4ee5\u6d88\u9664\u5f53\u65f6\u51b3\u7b56\u7684\u5f71\u54cd\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6765\u505a\u5462\uff1f\u611f\u89c9\u8fd9\u6837\u9700\u8981$dfs$\u5957$bfs$\uff0c\u5b9e\u73b0\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u6548\u7387\u7684\u8bdd\uff0c\u7531\u4e8e\u6240\u6709\u7684\u60c5\u51b5\u90fd\u88ab\u679a\u4e3e\u4e86\uff0c\u6240\u4ee5\u6548\u7387\u4e5f\u4e0d\u592a\u597d\u3002\n\n\u90a3\u4e48\u600e\u4e48\u505a\u80fd\u6548\u7387\u66f4\u9ad8\u5730\u89e3\u51b3\u6b63\u786e\u6027\u95ee\u9898\u5462\uff1f\u6211\u4eec\u518d\u56de\u987e\u4e00\u4e0b\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\uff1a==**\u5c0f\u6d41\u91cf\u4e0d\u5c0f\u5fc3\u6d41\u5230\u4e86\u5927\u6d41\u91cf\u7684\u7ba1\u9053\u91cc\u9762\uff0c\u4f7f\u5f97\u5927\u6d41\u91cf\u7ba1\u9053\u5728\u4e4b\u540e\u6ca1\u6cd5\u8ba9\u5927\u6d41\u91cf\u901a\u8fc7\u90a3\u4e48\u591a\u4e86**==\u3002\u6211\u4eec\u5f53\u7136\u4e0d\u53ef\u80fd\u4e3b\u52a8\u5730\u8ba9\u5c0f\u6d41\u91cf\u5f80\u5c0f\u7ba1\u9053\u91cc\u8dd1\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5047\u5982\u6211\u7684\u5c0f\u6d41\u91cf\u771f\u7684\u4e0d\u5c0f\u5fc3\u6d41\u5230\u4f60\u7684\u5927\u6d41\u91cf\u7ba1\u9053\u91cc\u9762\u4e86\uff0c\u6211\u53ef\u4ee5\u505a\u4e00\u4e2a\u6807\u8bb0\uff1a\u867d\u7136\u6211\u5360\u7528\u4e86\u60a8\u7684\u5927\u6d41\u91cf\u7ba1\u9053\uff0c\u4f46\u662f\u73b0\u5728\u6211\u7684\u5c0f\u6d41\u91cf\u7ba1\u9053\u662f\u7a7a\u7740\u7684\uff0c\u60a8\u4f46\u7528\u65e0\u59a8\u3002\n\n$EK$\u7b97\u6cd5\u5c31\u662f\u7528\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e2a\u6807\u8bb0\u7684\uff1a\u5728\u56fe\u4e2d\u52a0\u53cd\u5411\u8fb9\u3002\u521d\u59cb\u65f6\u5bf9\u4e8e\u6bcf\u6761\u539f\u56fe\u4e2d\u7684\u8fb9\uff0c\u6211\u4eec\u90fd\u52a0\u4e00\u6761\u5bb9\u91cf\u4e3a$0$\u7684\u53cd\u5411\u8fb9\u3002\u5f53\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\u65f6\uff0c\u9664\u4e86\u8ba9\u6bcf\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u51cf\u53bb$minweight$\u4e4b\u5916\uff0c\u6211\u4eec\u8ba9\u8fd9\u6761\u8def\u4e0a\u6240\u6709\u7684\u53cd\u5411\u8fb9\u52a0\u4e0a$minweight$\u3002\n\n\u6bd4\u5982\uff0c\u539f\u7f51\u7edc\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://img2020.cnblogs.com/blog/1747402/202007/1747402-20200716101435894-70196458.png)\n\n\n\n\u6211\u4eec\u627e\u5230\u4e86$1->3->2->4$\u8fd9\u6761\u8def\uff0c\u5e76\u4e14\u8ba9\u6d41\u91cf\u6d41\u8fc7\u53bb\u4e86\uff0c\u5219\u56fe\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n![](https://img2020.cnblogs.com/blog/1747402/202007/1747402-20200716101448723-1495658803.png)\n\n\n\n\u663e\u7136\uff0c\u539f\u672c\u80fd\u6700\u5927\u6d41$101$\u7684\u7f51\u7edc\uff0c\u73b0\u5728\u53ea\u80fd\u6d41$99+1=100$\u4e86\uff0c\u56e0\u4e3a\u4e0a\u9762\u7684\u5c0f\u6d41\u8d70\u9519\u8def\u4e86\uff0c\u4e3a\u4e86\u4fee\u6b63\uff0c\u6211\u4eec\u8003\u8651\u6309\u7167$EK$\u7b97\u6cd5\u8fc7\u7a0b\u52a0\u53cd\u5411\u8fb9\u4e4b\u540e\u7684\u7ed3\u679c\uff08$upd:$\u624b\u753b\u53cd\u5411\u8fb9\u4fee\u590d\u4e86\u8fb9\u6743\u91cd\u53e0\u7684\u95ee\u9898\uff09\uff1a\n\n\n![](https://img2020.cnblogs.com/blog/1747402/202007/1747402-20200717002828310-200435668.png)\n\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u518d\u627e\u589e\u5e7f\u8def\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230$1->2->4$\u4ee5\u53ca$1->2->3->4$\uff0c\u5176\u4e2d\u540e\u8005\u5c31\u662f\u4e0a\u9762\u6240\u8bf4\u7684\"\u867d\u7136\u6211\u5360\u7528\u4e86\u60a8\u7684\u5927\u6d41\u91cf\u7ba1\u9053\uff0c\u53ef\u56e0\u6b64\u73b0\u5728\u6211\u7684\u5c0f\u6d41\u91cf\u7ba1\u9053\u662f\u7a7a\u7740\u7684\uff0c\u60a8\u4f46\u7528\u65e0\u59a8\"\u3002\u663e\u7136\uff0c==**\u5982\u679c\u6ca1\u6709\u53cd\u5411\u8fb9\uff0c\u7b2c\u4e8c\u6761\u8def\u5728\u539f\u56fe\u4e2d\u662f\u4e0d\u53ef\u80fd\u8d70\u7684**==\uff0c\u6240\u4ee5\u4e00\u7cfb\u5217\u53cd\u5411\u8fb9\u5c31\u662f\u7ed9\u540e\u6765\u6d41\u8fc7\u7684\u6d41\u7684\u6807\u8bb0\u3002\n\n==**\u53cd\u5411\u8fb9\u6700\u5f00\u59cb\u5c31\u5e94\u8be5\u5168\u90e8\u52a0\u4e0a**==\u3002\u5982\u679c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u5047\u5982\u5f53\u524d\u8fb9\u7684\u7f16\u53f7\u662f$now$\uff0c\u5219$now\\ xor\\ 1$ \u5c31\u662f\u53cd\u5411\u8fb9\u7684\u7f16\u53f7\u4e86\uff0c\u539f\u7406\u4e0d\u96be\u7406\u89e3\uff1a\u6211\u4eec\u4e00\u6b21\u52a0\u4e24\u6761\u76f8\u53cd\u7684\u8fb9\uff0c\u5047\u5982\u8fb9\u4e0b\u6807\u4ece$0$\u5f00\u59cb\u5b58\uff0c\u4e00\u4e2a\u4e3a\u5947\u6570\u8fb9\uff0c\u4e00\u4e2a\u4e3a\u5076\u6570\u8fb9\uff0c\u5f02\u6216\u6b63\u597d\u5c31\u662f\u8fd9\u4e24\u4e2a\u4e92\u76f8\u8f6c\u5316\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c$EK$\u7b97\u6cd5\u7684\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\u4e86\uff1a\u4e0d\u65ad\u5bfb\u627e\u4ece$s$\u5230$t$\u7684\u589e\u5e7f\u8def\uff08\u8fd9\u91cc\u5c31\u662f\u6700\u5c0f\u8fb9\u6743$>0$\u7684\u8def\u5f84\uff09\uff0c\u627e\u5230\u4e4b\u540e\u5c31\u628a\u8def\u5f84\u4e0a\u7684\u6b63\u5411\u8fb9\u7684\u8fb9\u6743\u90fd\u51cf\u53bb$minweight$\uff0c\u53cd\u5411\u8fb9\u8fb9\u6743\u90fd\u52a0\u4e0a$minweight$\uff0c$ans+=minweight$\uff0c\u6700\u540e\u76f4\u5230\u627e\u4e0d\u5230\u589e\u5e7f\u8def\uff0c\u90a3\u4e48$ans$\u5c31\u662f\u6700\u5927\u6d41\u4e86\u3002\n\n\u4e0b\u9762\u8003\u8651\u4ee3\u7801\u5b9e\u73b0\u3002\u6211\u5148\u662f\u7ecf\u5386\u4e86\u4e00\u756a\u81ea\u5df1\u7684\u601d\u8003\u548c\u5b9e\u73b0\uff0c\u5199\u51fa\u4e86\u4e2a\u5927\u6982\uff0c\u901a\u8fc7\u4e86\u4e00\u5b9a\u6570\u91cf\u7684\u6d4b\u8bd5\u70b9\uff0c\u7ec3\u4e86\u7ec3\u4ee3\u7801\u80fd\u529b\uff0c\u4f46\u662f\u56e0\u4e3a\u5b9e\u73b0\u592a\u5dee\u800c\u7206\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u6545\u4e0d\u518d\u5c55\u5f00\u8bf4\u81ea\u5df1\u7684\u5c1d\u8bd5\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u770b\u522b\u4eba\u7684\u4f18\u79c0\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u3002\n\n\u4e00\u79cd\u5b9e\u73b0\u662f\u8fd9\u6837\u7684\uff0c\u5b58\u50a8\u8def\u5f84\u65f6\u8fd9\u6837\u8bbe\u8ba1\u7ed3\u6784\u4f53\uff1a\n\n```cpp\nstruct Pre{\n    ll v; //\u5f53\u524d\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\n    ll edgenum; //v\u4e0e\u5f53\u524d\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\n};\n```\n\n\u5b9e\u73b0\u4ee3\u7801\u65f6\uff0c\u5927\u4f6c\u7684\u601d\u8def\u662f\u5148$bfs$\u4e00\u6b21\uff0c\u627e\u5230\u6700\u77ed\u7684\u4e00\u6761\u589e\u5e7f\u8def\uff08\u5982\u679c\u80fd\u7684\u8bdd\uff09\uff0c\u589e\u5e7f\u8def\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u4e86\u4e00\u4e2a\u516c\u7528\u7684\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u5f80\u524d\u626b\u4e00\u904d\u8d70\u8fc7\u7684\u8fb9\uff0c\u627e\u5230\u6700\u5c0f\u503c\uff0c\u7136\u540e\u518d\u91cd\u65b0\u626b\u4e00\u904d\u8d70\u8fc7\u7684\u8fb9\uff0c\u52a0\u51cf\u76f8\u5e94\u7684\u6743\u503c\u3002\n\n$EK$\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f$O(nm^2)$\u7684\uff0c\u5e76\u4e0d\u80fd\u901a\u8fc7\u672c\u9898\uff0c\u4f46\u662f\u4f5c\u4e3a\u51e0\u4e4e\u6700\u7b80\u5355\u7684\u6700\u5927\u6d41\u7b97\u6cd5\uff0c\u8fd8\u662f\u8981\u5b66\u4f1a\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define INF 999999999999\nusing namespace std;\nconst int N=205;\nconst int M=1e4+9;\ntypedef struct{\n\tll v;\n\tll edgenum;\n}NB;\ntypedef struct{\n\tll from,to,nxt,weight;\n}Edge;\nEdge edge[M];\nll head[N],cnt,n,m,s,t,ans;\nNB pre[M];\nbool inqueue[N];\nint bfs();\nvoid EK();\nvoid add(ll x,ll y,ll w);\nint main(){\n\tll x,y,w;\n\tscanf(\"%lld %lld %lld %lld\",&n,&m,&s,&t);\n\tfor(int i=1;i<=n;i++){\n\t\thead[i]=-1;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%lld %lld %lld\",&x,&y,&w);\n\t\tadd(x,y,w);\n\t\tadd(y,x,0);\n\t}\n\tEK();\n\treturn 0;\n}\nvoid EK(){\n\twhile(bfs()){\n\t\tll minweight=INF;\n\t\tfor(ll i=t;pre[i].v>0;i=pre[i].v){ //\u627e\u5230\u6700\u5c0f\u8fb9\u6743 \n\t\t\tminweight=min(minweight,edge[pre[i].edgenum].weight);\n\t\t}\n\t\tfor(ll i=t;pre[i].v>0;i=pre[i].v){ //\u4f9d\u6b21\u52a0\u4e0a\u6216\u8005\u51cf\u53bb \n\t\t\tedge[pre[i].edgenum].weight-=minweight;\n\t\t\tedge[pre[i].edgenum^1].weight+=minweight;\n\t\t}\n\t\tans+=minweight;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\nint bfs(){\n\tqueue<ll> q;\n\tll now;\n\tfor(int i=0;i<M;i++){\n\t\tpre[i].edgenum=0;\n\t\tpre[i].v=0;\n\t}\n\tfor(int i=0;i<N;i++){\n\t\tinqueue[i]=false;\n\t}\n\tq.push(s);\n\tinqueue[s]=true;\n\twhile(!q.empty()){\n\t\tnow=q.front();\n\t\tq.pop();\n\t\tfor(ll i=head[now];i>=0;i=edge[i].nxt){\n\t\t\tif(!inqueue[edge[i].to] && edge[i].weight>0){ //\u4e4b\u524d\u6ca1\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u4e14\u662f\u589e\u5e7f\u8def \n\t\t\t\tpre[edge[i].to].edgenum=i; //\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7 \n\t\t\t\tpre[edge[i].to].v=now; //\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u70b9\n\t\t\t\tinqueue[edge[i].to]=true; //\u5165\u961f \n\t\t\t\tq.push(edge[i].to); \n\t\t\t}\n\t\t}\n\t\tif(now==t){//\u5982\u679c\u5f53\u524d\u70b9\u662f\u7ec8\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u627e\u5230\u4e86\u589e\u5e7f\u8def \n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n} \ninline void add(ll x,ll y,ll w){\n\tedge[cnt].from=x;\n\tedge[cnt].to=y;\n\tedge[cnt].nxt=head[x];\n\tedge[cnt].weight=w;\n\thead[x]=cnt++;\n}\n```\n\n### Dinic\u7b97\u6cd5\n\n\u524d\u9762\u6240\u8bb2\u7684$EK$\u7b97\u6cd5\uff0c\u9664\u4e86\u52a0\u53cd\u5411\u8fb9\u4ee5\u5916\uff0c\u53ef\u4ee5\u8bf4\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u81ea\u7136\u7684\u3002\u4f46\u662f\uff0c$EK$\u7b97\u6cd5\u5e76\u4e0d\u9ad8\u6548\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5047\u8bbe\u7f51\u7edc\u4e2d\u6709\u5f88\u591a\u6761\u589e\u5e7f\u8def\uff0c\u7136\u800c\u6211\u4eec\u505a\u4e00\u6b21$bfs$\uff0c\u53ea\u662f\u627e\u5230\u6700\u77ed\u7684\u4e00\u6761\uff0c\u7136\u540e\u628a\u8fb9\u6743\u4fee\u6539\u5b8c\u4e4b\u540e\u8fd8\u8981\u91cd\u65b0$bfs$\uff0c\u8fd9\u6837\u662f\u4e00\u79cd\u6d6a\u8d39\u3002\u5982\u679c\u6211\u4eec\u80fd\u5728\u4e00\u6b21\u5b8c\u6574\u7684$bfs$\u4e4b\u540e\uff0c\u627e\u5230\u5f88\u591a\u6761\u7f51\u7edc\u4e2d\u7684\u589e\u5e7f\u8def\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u901a\u8fc7\u51cf\u5c11$bfs$\u7684\u6b21\u6570\u800c\u63d0\u9ad8\u4e86\u6548\u7387\u3002\n\n$Dinic$\u7b97\u6cd5\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u90a3\u6837\u3002\u6211\u4eec\u8003\u8651\u5230$EK$\u4e2d\u4e00\u6b21$bfs$\u6c42\u51fa\u6765\u4e00\u6761\u7f51\u7edc\u91cc\u7684\u6700\u77ed\u589e\u5e7f\u8def\u5c31\u8349\u8349return\u4e86\uff0c\u4f46\u6211\u4eec\u4e0d\u6ee1\u8db3\u5440\uff0c\u8981\u662f\u5b83\u80fd\u627e\u5230\u5f53\u524d\u7f51\u7edc\u4e2d\u6240\u6709\u7684\u6700\u77ed\u589e\u5e7f\u8def\u5c31\u597d\u4e86\u3002\u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u7528$bfs$\u5bf9\u56fe\u8fdb\u884c\u5206\u5c42\uff0c\u5373\u6807\u8bb0$s$\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u6b65\u6570\uff0c\u628a\u6b65\u6570\u76f8\u540c\u7684\u70b9\u770b\u6210\u540c\u5c42\u70b9\u3002\u5982\u679c\u6bcf\u6b21\u6211\u4eec\u90fd\u4ece\u67d0\u4e00\u5c42\u5f80\u4e0b\u4e00\u5c42\u8df3\uff0c\u5e76\u6700\u7ec8\u80fd\u8df3\u5230$t$\u7684\u8bdd\uff0c\u90a3\u5b83\u663e\u7136\u5c31\u662f\u4e00\u6761\u6700\u77ed\u589e\u5e7f\u8def\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u5bb9\u6613\u53d1\u73b0\u6ee1\u8db3\u8fd9\u6837\u7684\u8df3\u8dc3\u6761\u4ef6\u7684\u8def\u4e00\u822c\u90fd\u4e0d\u53ea\u4e00\u6761\uff0c\u6240\u4ee5\u901a\u8fc7\u5206\u5c42$bfs$\u5c31\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u6240\u6709\u7684\u4ece$s$\u5230$t$\u7684\u6700\u77ed\u589e\u5e7f\u8def\u3002\n\n\u522b\u9ad8\u5174\u5f97\u592a\u65e9\uff0c\u867d\u7136\u6211\u4eec\u4e00\u6b21$bfs$\u5c31\u627e\u5230\u4e86\u597d\u51e0\u6761\u6700\u77ed\u589e\u5e7f\u8def\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u5f97\u60f3\u60f3\u600e\u4e48\u5feb\u901f\u4fee\u6539\u8fd9\u4e9b\u589e\u5e7f\u8def\u7684\u8fb9\u6743\u3002\u4ee5\u524d\u5728$EK$\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ecf\u8fc7\u70b9\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u73b0\u5728\u6709\u597d\u591a\u8def\uff0c\u90fd\u5b58\u4e0b\u6765\u592a\u8d39\u7a7a\u95f4\u4e86\uff0c\u5f97\u60f3\u4e2a\u529e\u6cd5\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u60f3\u5230\u521a\u624d\u8bf4\u7684\u6bcf\u6b21\u5f80\u4e0b\u4e00\u5c42\u8df3\uff0c\u5982\u679c\u8fd9\u6837\u80fd\u8df3\u5230$t$\uff0c\u5c31\u4e00\u5b9a\u662f\u6700\u77ed\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u6839\u672c\u6ca1\u5fc5\u8981\u8bb0\u5f55\u8def\u5f84\uff0c\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21$dfs$\uff0c\u6bcf\u6b21\u5230\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u5f3a\u5236\u5f80\u6bd4\u5b83\u6df1\u4e00\u5c42\u7684\u70b9\u53bb\u8df3\uff0c$dfs$\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6700\u5c0f\u8fb9\u6743\uff0c\u8d70\u5230\u5934\u5c31\u56de\u6eaf\u56de\u53bb\u51cf\u6389\u6700\u5c0f\u8fb9\u3002\n\n\u8003\u8651\u5230$dfs$\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u8fd9\u4e48\u4e00\u4e2a\u5b9e\u73b0\u65b9\u6848\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u70b9$u$\u6765\u8bf4\uff0c\u5b83\u53ef\u80fd\u5728\u591a\u6761\u589e\u5e7f\u8def\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u53ef\u80fd\u6709\u591a\u4e2a\u524d\u9a71\u548c\u540e\u7ee7\u3002\u8003\u8651\u4e00\u4e0b\u4e4b\u524d\u600e\u4e48\u6c42\u4e00\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u662f\u6bcf\u7b97\u5b8c\u4e00\u68f5\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u7136\u540e\u52a0\u5230\u7236\u4eb2\u7ed3\u70b9\u4e0a\uff0c\u6700\u7ec8\u7b97\u51fa\u6811\u7684\u5927\u5c0f\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u601d\u60f3\uff0c\u5148\u7edf\u8ba1\u8fd9\u4e2a\u70b9\u5230\u5e95\u8981\u51cf\u53bb\u591a\u5c11\u6d41\u91cf\uff0c\u7edf\u8ba1\u5b8c\u4e4b\u540e\u5728\u56de\u6eaf\u65f6\u4e00\u6b65\u5230\u4f4d\u76f4\u63a5\u51cf\u6389\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4e00\u6b21$dfs$\u5c31\u4fee\u6539\u4e86\u591a\u6761\u589e\u5e7f\u8def\uff0c\u771f\u6b63\u5b9e\u73b0\u4e86\u52a0\u901f\u3002\u7528\u4ee3\u7801\u63cf\u8ff0\u5c31\u662f\u8fd9\u6837\uff1a\n\n```cpp\nwhile(bfs()){\n    ans+=dfs();\n}\n```\n\n\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u5199\u51fa\u4ee3\u7801\uff0c\u63d0\u4ea4\u4e00\u6b21\u4e4b\u540e\u4f1a\u60ca\u5947\u5730\u53d1\u73b0\uff0c$TLE\\ on\\ case\\ 9$ \uff0c\u867d\u7136\u8fd9\u4e2a\u5df2\u7ecf\u6bd4$EK$\u4f18\u79c0\u4e86\uff0c\u4f46\u662f\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u7684\u6837\u5b50\u3002\n\n\u6ca1\u9519\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u7684\u3002\n\n\u5148\u8bb2\u7b2c\u4e00\u4e2a\u4f18\u5316\uff1a\u526a\u679d\u3002\u6211\u4eec\u8003\u8651$dfs$\u4e2d\u7684\u8fd9\u53e5\u8bdd\uff1a\n\n```cpp\nll k=dfs(edge[i].to,min(edge[i].weight,sumflow));\n```\n\n\u5982\u679c$k=0$\uff0c\u90a3\u4e48\u610f\u5473\u7740\u540e\u9762\u7684\u5168\u90fd\u6d88\u8017\u5b8c\u4e86\uff0c\u6240\u4ee5$edge[i].to$\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u4e4b\u540e\u7684\u70b9\u5728\u672c\u6b21$dfs$\u4e2d\u518d\u6b21\u88ab\u8d70\u5230\u65f6\u5c31\u4e0d\u80fd\u518d\u8d70\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee4$depth[edge[i].to]=-1$\uff0c\u7834\u574f\u5c42\u6b21\u5173\u7cfb\uff0c\u4e00\u884c\u4ee3\u7801\u5c31\u80fd\u52a0\u901f\u3002\u6d1b\u8c37\u6a21\u677f\u9898\u52a0\u4e0a\u8be5\u4f18\u5316\u4e4b\u540e\u5373\u53ef$AC$\u3002\n\n\u4e0b\u9762\u5c31\u662f\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86(==**\u4e0d\u52a0\u4f18\u5316\u548c\u4f18\u5316\u4e00\u53ea\u5dee\u4e00\u884c\uff0c\u5728$dfs$\u51fd\u6570\u91cc\u9762\uff0c\u4ec5\u591a\u4e86\u4e00\u884c\u526a\u679d**==)\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long \n#define INF 999999999999999\nusing namespace std;\nconst int N=205;\nconst int M=1e4+9;\ntypedef struct{\n\tll from,to,nxt,weight;\n}Edge;\ntypedef struct{\n\tll head[N],cnt,n,m,s,t,depth[N],maxflow; //\u5b9a\u4e49\u56fe\u76f8\u5173\u6570\u636e\n\tEdge edge[M];\n\tbool inqueue[N];\n    \n    //\u5b9a\u4e49\u64cd\u4f5c\u56fe\u7684\u65b9\u6cd5\n\t\n\tinline void init(){ //\u56fe\u7684\u521d\u59cb\u5316 \n\t\tn=read();\n\t\tm=read();\n\t\ts=read();\n\t\tt=read();\n\t\tfor(int i=0;i<=n;i++){\n\t\t\thead[i]=-1;\n\t\t\tinqueue[i]=false;\n\t\t}\n\t\tcnt=0;\n\t\tmaxflow=0;\n\t}\n\t\n\tinline void fresh(){ //\u6bcf\u6b21bfs\u524d\u90fd\u8981\u8c03\u7528\u4e00\u6b21\uff0c\u6d88\u9664\u6389\u4e0a\u4e00\u6b21bfs\u7684\u7ed3\u679c \n\t\tfor(int i=0;i<=n;i++){\n\t\t\tinqueue[i]=false;\n\t\t\tdepth[i]=-1; \n\t\t}\n\t}\n\t\n\tinline void add(){ //\u52a0\u8fb9\uff0c\u540c\u65f6\u52a00\u53cd\u5411\u8fb9\n\t\tll x,y,w;\n\t\tx=read();\n\t\ty=read();\n\t\tw=read();\n\t\tedge[cnt].from=x;\n\t\tedge[cnt].to=y;\n\t\tedge[cnt].weight=w;\n\t\tedge[cnt].nxt=head[x];\n\t\thead[x]=cnt++;\n\t\tedge[cnt].from=y;\n\t\tedge[cnt].to=x;\n\t\tedge[cnt].weight=0;\n\t\tedge[cnt].nxt=head[y];\n\t\thead[y]=cnt++;\n\t}\n\t\n\tinline bool bfs(){ //\u5bf9\u6b8b\u91cf\u7f51\u7edc\u8fdb\u884cbfs\uff0c\u627e\u5230\u6700\u77ed\u7684\u589e\u5e7f\u8def\uff0c\u5e76\u4e14\u5bf9\u56fe\u8fdb\u884c\u5206\u5c42 \n\t\tqueue<ll> q;\n\t\tll now;\n\t\tfresh(); //\u628a\u4e0a\u4e00\u8f6ebfs\u7684pre\u548cdepth\u6d88\u9664\u4e86 \n\t\tq.push(s);\n\t\tdepth[s]=0;\n\t\tinqueue[s]=true;\n\t\twhile(!q.empty()){\n\t\t\tnow=q.front();\n\t\t\tq.pop();\n\t\t\tfor(ll i=head[now];i>=0;i=edge[i].nxt){\n\t\t\t\tif(!inqueue[edge[i].to] && edge[i].weight>0){ //\u627e\u6ca1\u8bbf\u95ee\u8fc7\u7684\u4e14\u6709\u5269\u4f59\u6d41\u91cf\u7684\u8fb9 \n\t\t\t\t\tinqueue[edge[i].to]=true; //\u5165\u961f\u6807\u8bb0\u9632\u6b62\u91cd\u590d\u8bbf\u95ee \n\t\t\t\t\tdepth[edge[i].to]=depth[now]+1; //\u5206\u5c42 \n\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(depth[t]==-1) { //\u5bf9\u6574\u4e2a\u56febfs\u5b8c\u4e86\u4e4b\u540e\u518d\u770b\u80fd\u5426\u5230t \n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\tll dfs(ll now,ll sumflow){\n\t\t//sumflow\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6d41\u5165\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf \n\t\tll useflow=0; //\u7edf\u8ba1\u6d41\u51fa\u7684\u6d41\u91cf \n\t\tif(now==t){\n\t\t\treturn sumflow;\n\t\t}\n\t\tfor(ll i=head[now];i>=0 && sumflow>0;i=edge[i].nxt){ //\u6ce8\u610f\u6d41\u91cf\u4e0d\u80fd\u53d8\u6210\u8d1f\u7684\n\t\t\tif(depth[edge[i].to]==depth[now]+1 && edge[i].weight>0){ //\u65e2\u4e0d\u80fd\u8d85\u8fc7\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8d85\u8fc7\u5269\u4e0b\u7684\u6ca1\u6d41\u8d70\u7684\u6d41\u91cf\n\t\t\t\tll k=dfs(edge[i].to,min(edge[i].weight,sumflow));\n\t\t\t\tif(k==0) depth[edge[i].to]=-1; //\u91cd\u8981\u7684\u526a\u679d \n\t\t\t\tedge[i].weight-=k;\n\t\t\t\tedge[i^1].weight+=k;\n\t\t\t\tuseflow+=k;\n\t\t\t\tsumflow-=k;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn useflow;\n\t} \n\t\n\tvoid dinic(){ //\u56fe\u7684\u6700\u5927\u6d41\u7b97\u6cd5\n\t\twhile(bfs()){\n\t\t\tmaxflow+=dfs(s,INF);\n\t\t}\n\t}\n\t\n\tinline ll read(){ //\u5feb\u8bfb\uff0c\u53ef\u4ee5\u4e0d\u8981\n\t\tll ret=0,f=1;\n\t\tchar ch=getchar();\n\t\twhile(ch<'0' || ch>'9'){\n\t\t\tif(ch=='-'){\n\t\t\t\tf=-1;\n\t\t\t}\n\t\t\tch=getchar();\n\t\t}\n\t\twhile(ch>='0' && ch<='9'){\n\t\t\tret=10*ret+ch-'0';\n\t\t\tch=getchar();\n\t\t}\n\t\treturn ret*f;\n\t}\n}Graph;\nGraph graph;\nint main(){\n//\t#define DEBUG\n\t\n\t#ifdef DEBUG\n\t\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\tgraph.init();\n\tfor(int i=0;i<graph.m;i++){\n\t\tgraph.add();\n\t}\n\tgraph.dinic();\n\tprintf(\"%lld\\n\",graph.maxflow);\n\treturn 0;\n}\n```\n\n\u7b2c\u4e8c\u4e2a\u4f18\u5316\u53eb\u505a\u5f53\u524d\u5f27\u4f18\u5316\u3002$dfs$\u4e2d\uff0c\u5148\u88ab\u904d\u5386\u5230\u7684\u8fb9\u80af\u5b9a\u662f\u5df2\u7ecf\u589e\u5e7f\u8fc7\u4e86\uff0c\u5e76\u4e14\u5df2\u7ecf\u786e\u5b9a\u65e0\u6cd5\u7ee7\u7eed\u589e\u5e7f\u4e86\uff0c\u8fd9\u6761\u8fb9\u4ee5\u540e\u5fc5\u7136\u4e0d\u4f1a\u8d70\u3002\u90a3\u4e48\u4e0b\u6b21\u6211\u4eec\u518d\u5230\u8fbe\u8be5\u8282\u70b9\u65f6\uff0c\u5c31\u53ef\u4ee5\u5728\u5faa\u73af\u8d77\u59cb\u5c31\u8bbe\u7f6e\u4e0d\u904d\u5386\u8fd9\u4e9b\u8fb9\u3002\u5728\u5b9e\u73b0\u4e0a\uff0c\u6211\u4eec\u5c31\u8bb0$cur[i]$\u4e3a$i$\u7ed3\u70b9\u5f53\u524d\u5df2\u7ecf\u8d70\u8fc7\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u5176\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u7684$head[i]$\uff0c\u7136\u540e\uff0c\u6211\u4eec\u6bcf\u6b21$dfs$\u5c31\u4ece$cur[now]$\u800c\u4e0d\u662f$head[now]$\u5f00\u59cb\u8d70\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c==**\u8bf7\u6ce8\u610f\u6bd4\u8f83\u548c\u4e0a\u4e00\u4efd\u4ee3\u7801\u7684\u4e0d\u540c\uff0c\u60a8\u53ef\u4ee5\u628a\u4e24\u4efd\u4ee3\u7801\u62f7\u8d1d\u5230**[\u8fd9\u91cc](http://www.jq22.com/textDifference)**\u8fc5\u901f\u770b\u51fa\u4ed6\u4eec\u7684\u4e0d\u540c**==\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long \n#define INF 999999999999999\nusing namespace std;\nconst int N=205;\nconst int M=1e4+9;\ntypedef struct{\n\tll from,to,nxt,weight;\n}Edge;\ntypedef struct{\n\tll head[N],cnt,n,m,s,t,depth[N],maxflow; //\u5b9a\u4e49\u56fe\u76f8\u5173\u6570\u636e\n\tEdge edge[M];\n\tbool inqueue[N];\n\tll cur[N]; \n    \n    //\u5b9a\u4e49\u64cd\u4f5c\u56fe\u7684\u65b9\u6cd5\n\t\n\tinline void init(){ //\u56fe\u7684\u521d\u59cb\u5316 \n\t\tn=read();\n\t\tm=read();\n\t\ts=read();\n\t\tt=read();\n\t\tfor(int i=0;i<=n;i++){\n\t\t\thead[i]=-1;\n\t\t\tcur[i]=-1;\n\t\t\tinqueue[i]=false;\n\t\t}\n\t\tcnt=0;\n\t\tmaxflow=0;\n\t}\n\t\n\tinline void fresh(){ //\u6bcf\u6b21bfs\u524d\u90fd\u8981\u8c03\u7528\u4e00\u6b21\uff0c\u6d88\u9664\u6389\u4e0a\u4e00\u6b21bfs\u7684\u7ed3\u679c \n\t\tfor(int i=0;i<=n;i++){\n\t\t\tinqueue[i]=false;\n\t\t\tdepth[i]=-1; \n\t\t}\n\t}\n\t\n\tinline void add(){ //\u52a0\u8fb9\uff0c\u540c\u65f6\u52a00\u53cd\u5411\u8fb9\n\t\tll x,y,w;\n\t\tx=read();\n\t\ty=read();\n\t\tw=read();\n\t\tedge[cnt].from=x;\n\t\tedge[cnt].to=y;\n\t\tedge[cnt].weight=w;\n\t\tedge[cnt].nxt=head[x];\n\t\thead[x]=cnt++;\n\t\tedge[cnt].from=y;\n\t\tedge[cnt].to=x;\n\t\tedge[cnt].weight=0;\n\t\tedge[cnt].nxt=head[y];\n\t\thead[y]=cnt++;\n\t}\n\t\n\tinline bool bfs(){ //\u5bf9\u6b8b\u91cf\u7f51\u7edc\u8fdb\u884cbfs\uff0c\u627e\u5230\u6700\u77ed\u7684\u589e\u5e7f\u8def\uff0c\u5e76\u4e14\u5bf9\u56fe\u8fdb\u884c\u5206\u5c42 \n\t\tqueue<ll> q;\n\t\tll now;\n\t\tfresh(); //\u628a\u4e0a\u4e00\u8f6ebfs\u7684pre\u548cdepth\u6d88\u9664\u4e86 \n\t\tq.push(s);\n\t\tdepth[s]=0;\n\t\tinqueue[s]=true;\n\t\tcur[s]=head[s];\n\t\twhile(!q.empty()){\n\t\t\tnow=q.front();\n\t\t\tq.pop();\n\t\t\tfor(ll i=head[now];i>=0;i=edge[i].nxt){\n\t\t\t\tif(!inqueue[edge[i].to] && edge[i].weight>0){ //\u627e\u6ca1\u8bbf\u95ee\u8fc7\u7684\u4e14\u6709\u5269\u4f59\u6d41\u91cf\u7684\u8fb9 \n\t\t\t\t\tinqueue[edge[i].to]=true; //\u5165\u961f\u6807\u8bb0\u9632\u6b62\u91cd\u590d\u8bbf\u95ee \n\t\t\t\t\tdepth[edge[i].to]=depth[now]+1; //\u5206\u5c42 \n\t\t\t\t\tcur[edge[i].to]=head[edge[i].to];\n\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(depth[t]==-1) { //\u5bf9\u6574\u4e2a\u56febfs\u5b8c\u4e86\u4e4b\u540e\u518d\u770b\u80fd\u5426\u5230t \n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\tll dfs(ll now,ll sumflow){\n\t\t//sumflow\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6d41\u5165\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf \n\t\tll useflow=0; //\u7edf\u8ba1\u6d41\u51fa\u7684\u6d41\u91cf \n\t\tif(now==t){\n\t\t\treturn sumflow;\n\t\t}\n\t\tfor(ll i=cur[now];i>=0 && sumflow>0;i=edge[i].nxt){\n\t\t\tcur[now]=i;\n\t\t\tif(depth[edge[i].to]==depth[now]+1 && edge[i].weight>0){ //\u65e2\u4e0d\u80fd\u8d85\u8fc7\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8d85\u8fc7\u5269\u4e0b\u7684\u6ca1\u6d41\u8d70\u7684\u6d41\u91cf\n\t\t\t\tll k=dfs(edge[i].to,min(edge[i].weight,sumflow));\n\t\t\t\tif(k==0) depth[edge[i].to]=-1; //\u91cd\u8981\u7684\u526a\u679d \n\t\t\t\tedge[i].weight-=k;\n\t\t\t\tedge[i^1].weight+=k;\n\t\t\t\tuseflow+=k;\n\t\t\t\tsumflow-=k;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn useflow;\n\t} \n\t\n\tvoid dinic(){ //\u56fe\u7684\u6700\u5927\u6d41\u7b97\u6cd5\n\t\twhile(bfs()){\n\t\t\tmaxflow+=dfs(s,INF);\n\t\t}\n\t}\n\t\n\tinline ll read(){ //\u5feb\u8bfb\uff0c\u53ef\u4ee5\u4e0d\u8981\n\t\tll ret=0,f=1;\n\t\tchar ch=getchar();\n\t\twhile(ch<'0' || ch>'9'){\n\t\t\tif(ch=='-'){\n\t\t\t\tf=-1;\n\t\t\t}\n\t\t\tch=getchar();\n\t\t}\n\t\twhile(ch>='0' && ch<='9'){\n\t\t\tret=10*ret+ch-'0';\n\t\t\tch=getchar();\n\t\t}\n\t\treturn ret*f;\n\t}\n}Graph;\nGraph graph;\nint main(){\n//\t#define DEBUG\n\t\n\t#ifdef DEBUG\n\t\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\tgraph.init();\n\tfor(int i=0;i<graph.m;i++){\n\t\tgraph.add();\n\t}\n\tgraph.dinic();\n\tprintf(\"%lld\\n\",graph.maxflow);\n\treturn 0;\n}\n```\n### \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\n\n\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6211\u4eec\u7684\u7f51\u7edc\u4e2d\u7684\u7ba1\u9053\u4e0d\u4ec5\u6709\u6d41\u91cf\u8fd9\u4e00\u5c5e\u6027\uff0c\u8fd8\u6709\u5355\u4f4d\u6d41\u91cf\u6d41\u7ecf\u7684\u82b1\u8d39\u7684\u5c5e\u6027\uff08\u6bd4\u5982\u60a8\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e70\u7968\u5750\u8f66\uff0c\u6bcf\u4e2a\u4eba\u8d70\u7684\u65f6\u5019\u90fd\u8981\u4e70\u7968\uff0c\u4e0d\u540c\u8def\u7684\u7968\u4ef7\u540c\uff09\u3002\u6211\u4eec\u60f3==**\u5728\u4fdd\u8bc1\u6700\u5927\u6d41\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8017\u6700\u5c0f\u8d39\u7528**==\uff08\u6ce8\u610f\u4e0d\u8981\u628a\u95ee\u9898\u63cf\u8ff0\u9519\u4e86\uff09\u3002\n\n\u663e\u7136\uff0c\u4e0d\u7ba1\u5b83\u6bcf\u6761\u8def\u82b1\u8d39\u600e\u4e48\u6837\uff0c\u6211\u4eec\u90fd\u5f97\u5148\u4fdd\u8bc1\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u80af\u5b9a\u8fd8\u662f\u8981\u627e\u589e\u5e7f\u8def\u4e0d\u65ad\u589e\u5e7f\uff0c\u76f4\u5230\u6ca1\u6cd5\u589e\u5e7f\u4e3a\u6b62\u3002\u53ea\u4e0d\u8fc7\uff0c\u5728\u6c42\u589e\u5e7f\u8def\u7684\u65f6\u5019\uff0c\u6211\u4eec\u60f3\u8ba9\u8d39\u7528\u6700\u5c0f\u3002\u5bf9\u4e8e\u4e00\u6761\u589e\u5e7f\u8def\u6765\u8bf4\uff0c\u5176\u4ece$s$\u5230$t$\u7ecf\u8fc7\u7684\u7ba1\u9053\u4e2d\u7684\u6d41\u91cf\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u6700\u5c0f\u7684\u90a3\u4e2a\u6d41\u91cf\u503c\uff0c\u6240\u4ee5\u5728\u6d41\u91cf\u4e00\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u8ba9\u82b1\u8d39\u6700\u5c11\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u8fd9\u6761\u8def\u4ece$s$\u5230$t$\u7684\u6d41\u91cf\u7684==**\u5355\u4f4d\u82b1\u8d39\u4e4b\u548c**==\u6700\u5c0f\u5c31\u597d\u4e86\u3002\u4e3a\u4e86\u8ba9\u5355\u4f4d\u82b1\u8d39\u4e4b\u548c\u6700\u5c0f\uff0c\u76f8\u5f53\u4e8e\u6c42\u6700\u77ed\u8def\uff0c\u53e6\u5916\u522b\u5fd8\u4e86\u6211\u4eec\u73b0\u5728\u662f\u5728\u627e\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u6700\u77ed\u8def\u7b97\u6cd5\u6765\u4ee3\u66ff$bfs$\u7684\u8fc7\u7a0b\u3002\u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86$spfa$\u7b97\u6cd5\uff0c\u56e0\u4e3a\u5728\u52a0\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u53cd\u5411\u8fb9\u4f1a\u8bbe\u7f6e$cost_{reverse}=-cost$ \uff0c\u539f\u56e0\u53ef\u4ee5\u7406\u89e3\u4e3a\u53cd\u5411\u8d70\u8981\u9000\u94b1\u3002\u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86$EK$\u6700\u5927\u6d41\u7b97\u6cd5\uff0c\u8fd9\u8db3\u4ee5$AC$\uff08$2020/7/18$\uff09\u6d1b\u8c37\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\u9898\uff0c\u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u7528$dinic$\u505a\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define INF 999999999999\nusing namespace std;\nconst int N=5e3+9;\nconst int M=1e5+9;\ntypedef struct{\n\tll to,nxt,capacity,cost;\n}Edge;\ntypedef struct{\n\tll edgenum;\n\tll nodenum;\n}Pre;\ntypedef struct{\n\tEdge edge[M];\n\tll head[N],n,m,s,t,cnt,dist[N],maxflow,mincost;\n\tPre pre[N];\n\tbool inqueue[N];\n\t\n\tinline void init(){\n\t\tscanf(\"%lld %lld %lld %lld\",&n,&m,&s,&t);\n\t\tcnt=0;\n\t\tfor(int i=0;i<=n;i++){\n\t\t\thead[i]=-1;\n\t\t}\t\n\t\tmaxflow=0;\n\t\tmincost=0;\n\t}\n\t\n\tinline void add(ll x,ll y,ll w,ll f){\n\t\tedge[cnt].to=y;\n\t\tedge[cnt].nxt=head[x];\n\t\tedge[cnt].capacity=w;\n\t\tedge[cnt].cost=f;\n\t\thead[x]=cnt++;\n\t}\n\t\n\tinline void fresh(){\n\t\tfor(ll i=0;i<=n;i++){\n\t\t\tinqueue[i]=false;\n\t\t\tpre[i].edgenum=-1;\n\t\t\tpre[i].nodenum=0;\n\t\t\tdist[i]=INF;\n\t\t}\n\t}\n\t\n\tinline bool spfa(){ //\u627e\u6d88\u8d39\u6700\u4f4e\u7684\u589e\u5e7f\u8def\u8fdb\u884c\u589e\u5e7f \n\t\tfresh();\n\t\tqueue<ll> q;\n\t\tll now;\n\t\tq.push(s);\n\t\tinqueue[s]=true;\n\t\tdist[s]=0;\n\t\twhile(!q.empty()){\n\t\t\tnow=q.front();\n\t\t\tq.pop();\n\t\t\tinqueue[now]=false;\n\t\t\tfor(ll i=head[now];i>=0;i=edge[i].nxt){\n\t\t\t\tif(edge[i].capacity>0 && dist[edge[i].to]>dist[now]+edge[i].cost){\n\t\t\t\t\tdist[edge[i].to]=dist[now]+edge[i].cost; //\u6ce8\u610f\uff0c\u53ea\u770b\u5355\u4f4d\u6d41\u91cf\u6d88\u8d39\u5c31\u597d\u4e86\n\t\t\t\t\tpre[edge[i].to].edgenum=i;\n\t\t\t\t\tpre[edge[i].to].nodenum=now;\n\t\t\t\t\tif(!inqueue[edge[i].to]){\n\t\t\t\t\t\tinqueue[edge[i].to]=true;\n\t\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(pre[t].nodenum){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tinline void EK(){\n\t\tll minweight=INF;\n\t\twhile(spfa()){\n\t\t\tminweight=INF;\n\t\t\tfor(ll i=t;pre[i].nodenum>0;i=pre[i].nodenum){\n\t\t\t\tminweight=min(minweight,edge[pre[i].edgenum].capacity);\n\t\t\t}\n\t\t\tfor(ll i=t;i;i=pre[i].nodenum){\n\t\t\t\tmincost+=minweight*edge[pre[i].edgenum].cost;\n\t\t\t\tedge[pre[i].edgenum].capacity-=minweight;\n\t\t\t\tedge[pre[i].edgenum^1].capacity+=minweight;\n\t\t\t}\n\t\t\tmaxflow+=minweight;\n\t\t}\n\t}\n}Graph;\nGraph graph;\nint main(){\n\tll x,y,w,f;\n\tgraph.init();\n\tfor(ll i=0;i<graph.m;i++){\n\t\tscanf(\"%lld %lld %lld %lld\",&x,&y,&w,&f);\n\t\tgraph.add(x,y,w,f);\n\t\tgraph.add(y,x,0,-f);\n\t}\n\tgraph.EK();\n\tprintf(\"%lld %lld\\n\",graph.maxflow,graph.mincost);\n\treturn 0;\n}\n```",
        "postTime": 1595043904,
        "uid": 158879,
        "name": "WanderOvO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u6700\u8fd1\u5728\u5b66\u4e60\u7f51\u7edc\u6d41\u8fd9\u4e9b\uff0c\u4e8e\u662f\u5207\u4e86\u6b64\u9898\uff0c\u5e76\u6253\u7b97\u5199\u9898\u89e3\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u50cf\u5b8c\u6574\u7684\u5b66\u4e60\u4e00\u904d\u7f51\u7edc\u6d41\uff0c\u5efa\u8bae\u53bb[\u8fd9\u91cc](https://www.bilibili.com/video/av21945401/)\u5b66\u4e60\uff0c\u8bb2\u7684\u5f88\u597d\u3002\u7136\u540e\uff0c\u8fd9\u662f\u4e00\u4efd**Dinic**\u7684\u9898\u89e3\u3002\n\n### \u7f51\u7edc\u6d41\u5b9a\u4e49\n\n-  \u5b9a\u4e49$1$\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u56fe$G = (V,E)$\u4e5f\u5c31\u662f\u6709$V$\u4e2a\u70b9\uff0c$E$\u6761\u8fb9\u7ec4\u6210\u7684\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5b83\u7684\u6bcf\u6761\u8fb9$(u,v) \\in E$\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u8fd9\u4e2a\u6743\u503c\u6211\u4eec\u79f0\u5176\u4e3a\u5bb9\u91cf$c(u,v)$\uff0c\u5bf9\u4e8e$(u,v) \\not \\in E$\u7684\u5bb9\u91cf$c(u,v) = 0$\u3002\n\n- \u5b9a\u4e49$2$\uff1a\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u4e0a\uff0c\u8fd8\u53ef\u4ee5\u6709\u4e00\u4e2a\u503c\u4e3a\u53ef\u4ee5\u4ece\u8fd9\u6761\u8fb9\u6d41\u8fc7\u53bb\u7684\u6743\u503c\uff0c\u8bb0\u4f5c\u51c0\u6d41$f(u,v)$\u3002\n\n- \u5bb9\u91cf\u9650\u5236\uff1a\n$f(u,v) \\leq c(u,v)$\n       **\u4e00\u6761\u8fb9\u80fd\u6d41\u8fc7\u53bb\u7684\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u4ed6\u7684\u5bb9\u91cf**\u3002\n       \n    \n    \n       \n       \n -  \u5269\u4f59\u6d41\u91cf\uff1a\n \n \u6307\u4e00\u6761\u8fb9\u4e0a$c(u,v)-f(u,v)$\u7684\u503c\u3002\n \n       \n- \u589e\u5e7f\u8def\uff1a\n\n\u82e5\u4e00\u6761\u4ece$S$\u5230$T$\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\u90fd\u5927\u4e8e$0$\uff0c\u8fd9\u6837\u7684\u8def\u53eb\u589e\u5e7f\u8def\u3002\n\n - \u6d41\u5b88\u6052\uff1a\n \n \u9664\u975e$u=s$\u6216 $u=t$\uff0c\u5426\u5219 $\u2211w\u2208V f(u,w)=0$\u4e00\u7ed3\u70b9\u7684\u51c0\u6d41\u662f\u96f6\uff0c\u9664\u4e86\u201c\u5236\u9020\u201d\u6d41\u7684\u6e90\u70b9\u548c\u201c\u6d88\u8017\u201d\u6d41\u7684\u6c47\u70b9\u3002\n - \u659c\u5bf9\u79f0\uff1a\n \n $f(u,v)$ $= - f(v,u) $\u7531 $u$\u5230 $v$\u7684\u51c0\u6d41\u5fc5\u987b\u662f\u7531 $v$\u5230 $u$\u7684\u51c0\u6d41\u7684\u76f8\u53cd\u3002\n - \u6b8b\u91cf\u7f51\u7edc:\n \n \u5728**\u4efb\u610f\u65f6\u523b**\uff0c\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e$0$\u7684\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u88ab\u79f0\u4e3a\u6b8b\u91cf\u7f51\u7edc\n\n \u5f53\u7136\uff0c\u5176\u5b9e\u4f60\u53ea\u9700\u8981\u628a\u524d\u4e94\u4e2a\u77e5\u9053\u4e86\u5c31\u884c\u4e86\u3002\n###  Dinic\u7b97\u6cd5\n\u9996\u5148\u4f60\u9700\u8981\u77e5\u9053$EK$\u7b97\u6cd5\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u53bb\u770b[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/ONE-PIECE/wang-lao-liu-di-zong-jie)\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6211\u4eec\u7684$EK$\u7b97\u6cd5\u662f\u53bb\u627e\u589e\u5e7f\u8def\u7136\u540e\u8ba1\u7b97\u7684\uff0c\u4f46\u662f$EK$\u7b97\u6cd5\u6bcf\u8f6e\u904d\u5386\u6574\u4e2a\u6b8b\u91cf\u7f51\u7edc\uff0c\u6700\u7ec8\u5374\u53ea\u627e\u51fa\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u6709\u70b9\u6162\uff0c\u800c$Dinic$\u7b97\u6cd5\u5219\u662f\u5bf9EK\u7b97\u6cd5\u7684\u4f18\u5316\uff0c**\u4e00\u6b21\u627e\u591a\u6761\u589e\u5e7f\u8def**\u3002\n\u90a3\u4e48\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\u65b9\u6cd5\u5982\u4e0b\uff1a\n>- $BFS$\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u6b21$d[x]$\u8868\u793a\u7684\u4e3a\u6e90\u70b9$S$\u5230$X$\u8fd9\u4e2a\u70b9\u6700\u5c11\u8981\u7528\u7684\u8fb9\u6570\uff0c\u6784\u9020\u5206\u5c42\u56fe\n>- \u5728\u5206\u5c42\u56fe\u4e0a\u9762\u53bb$DFS$\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u5728\u56de\u6eaf\u65f6\u66f4\u65b0\u5269\u4f59\u7684\u5bb9\u91cf\u3002\u7136\u540e\u8fdb\u884c\u7b54\u6848\u7684\u7edf\u8ba1\u5c31\u5b8c\u4e86\u3002\n#### add\u548c\u5b9a\u4e49\u7684\u4ee3\u7801\n```cpp\nint n,m,s,t,num=1,nex[N],first[N],v[N],flow[N],no[N];\n//\u6ce8\u610f\u6211\u662f\u628anum\u521d\u59cb\u5316\u4e3a\u4e861\uff0c\u56e0\u4e3a\u6211\u4eec\u5728dfs\u4e2d\u8981\u7528\u5230\u53cd\u8fb9\uff0c\u4e3a\u4e86\u5229\u7528\u5f02\u6216\u7684\u6210\u5bf9\u53d8\u6362\u6027\uff0c\u5219\u8bbenum\u521d\u59cb\u5c31\u4e3a1.\nvoid add(int from,int to,int V){\n\tnex[++num]=first[from];\n\tfirst[from]=num;\n\tv[num]=to;\n\tflow[num]=V;\n}\n```\n\n#### BFS\u7684\u4ee3\u7801\n```cpp\nbool bfs(int s,int t){//\u4eces\u70b9\u5230t\u70b9\n\tmemset(dep,0,sizeof(dep));//\u9996\u5148\u521d\u59cb\u5316dep\u6570\u7ec4\n\tq[1]=s;//\u5165\u961f\n\tdep[s]=1;//\u521d\u59cb\u5316\u6df1\u5ea6\n\tno[s]=first[s];//\u5b9a\u4e49\u4e00\u4e2a\u548cfirst\u6570\u7ec4\u503c\u4e00\u6837\u7684\u6570\u7ec4\uff0c\u540e\u9762dfs\u53ef\u4ee5\u526a\u679d\u7528\n\tint head=0,tail=1;\n\twhile(head!=tail){\n\t\tint u=q[++head];\n\t\tfor(int i=first[u];i;i=nex[i]){\n\t\t\tint to=v[i];\n\t\t\tif(flow[i] && !dep[to]){//\u5982\u679c\u5f53\u524d\u7684\u5269\u4f59\u6d41\u91cf\u4e0d\u4f1a0\uff0c\u4e14\u6df1\u5ea6\u4e3a0\n\t\t\t\tno[to]=first[to];\n\t\t\t\tdep[to] = dep[u] + 1;\n\t\t\t\tq[++tail] = to;\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=0;\n}\n```\n#### DFS\u7684\u4ee3\u7801\n```cpp\nint dfs(int now,int fl){\n\tif(now==aim) return fl;//\u5230\u4e86\u5c31\u8fd4\u56de\n\tint f=0;\n\tfor(int i=no[now];i&&fl;i=nex[i]){\n\t\tno[now]=i;//\u5f27\u5ea6\u4f18\u5316\n\t\tint to=v[i];\n\t\tif(flow[i] && dep[to] == dep[now]+1){\n\t\t\tint x=dfs(to,min(fl,flow[i]));\n\t\t\tflow[i]-=x;\n\t\t\tflow[i^1]+=x;//\u53cd\u8fb9\u52a0\u4e0ax\uff0c\u53cd\u6094\u7528\n\t\t\tfl-=x;\n\t\t\tf+=x; \n\t\t}\n\t}\n\tif(!f) dep[now]=-2;//\u70b8\u70b9\u4f18\u5316\uff0c\u5982\u679c\u8fd9\u91cc\u5df2\u7ecf\u4e0d\u884c\u4e86\uff0c\u90a3\u540e\u9762\u90fd\u4e0d\u884c\u4e86\uff0c\u51cf\u53bb\u5197\u6742\u7684\u641c\u7d22\n\treturn f;\n}\n```\n\u6ce8\u610f\u5f00\u59cb$fl$\u7684\u503c\u4f60\u8981\u8d4b\u503c\u65e0\u7a77\u5927\uff0c\u56e0\u4e3a\u6700\u540e\u4f60\u5230\u8fbe\u65f6\u80fd\u7559\u7684\u662f\u4f60\u8def\u5f84\u4e0a\u5269\u4f59\u6d41\u91cf\u6700\u5c0f\u7684\u90a3\u4e48\u591a\u6d41\u91cf\u3002\n\n### \u540e\u8bb0\n\u5c31\u5b8c\u7ed3\u4e86\uff0c\u7136\u540e\u89c1\u56fe\u4e2d\u53cd\u8fb9\u521d\u59cb\u5316\u4e3a$0$\uff0c\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u987a\u4fbf\u8bf4\u4e00\u53e5$Dinic$\u590d\u6742\u5ea6\u4e0a\u754c\u662f$O(n^2m)$\uff0c\u4f46\u5b9e\u9645\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u91cc\uff0c\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u70b9\u7684\u6570\u636e\uff0c\u7136\u540e\u800c\u5206\u56fe\u4ec0\u4e48\u7684\u5e94\u7528\u5c31\u4e0d\u63d0\u4e86\uff0c\u849f\u84bb\u4e0d\u4f1a$qAq$",
        "postTime": 1609641162,
        "uid": 206021,
        "name": "Pitiless0514",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\n------------\n## \u7f51\u7edc\u6d41\n\n\u90a3\u4e48\u505a\u8fd9\u9053\u6a21\u677f\u9898\u4e4b\u524d\u8fd8\u662f\u5148\u4e86\u89e3\u4e00\u4e0b\u7f51\u7edc\u6d41\u5230\u5e95\u662f\u4e2a\u4ec0\u4e48\u5427\uff08\u56e0\u4e3a\u6211\u4e5f\u662f\u4e2a\u521d\u5b66\u8005\uff0c\u5982\u679c\u6709\u8bb2\u9519\u6216\u8005\u4e0d\u6e05\u695a\u7684\u5730\u65b9\u53ef\u4ee5\u8bc4\u8bba\u6216\u8005\u5728\u5176\u4ed6dalao\u7684\u9898\u89e3\u6216\u662f\u535a\u5ba2\u4e2d\u5b66\u4e60\uff09\n\n\u5bf9\u4e8e\u4e00\u4e2a**\u7f51\u7edc** $G=(V,E)$ \u662f\u4e00\u4e2a**\u6709\u5411\u56fe**\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u4e00\u4e2a\u8fb9\u5708 $c(x,y)$ \u8868\u793a\u8fd9\u6761\u8fb9\u7684**\u5bb9\u91cf**\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u4e2a\u4e0b\u6c34\u9053\u7cfb\u7edf\uff08\uff1f\uff1f\uff1f\uff09\uff0c\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u4e00\u4e2a\u7ba1\u9053\uff0c\u6bcf\u4e2a\u7ba1\u9053\u6709\u81ea\u5df1\u5141\u8bb8\u6d41\u901a\u7684\u6c34\u7684**\u6700\u5927\u503c**\u3002\u5bf9\u4e8e\u4e24\u4e2a\u7279\u6b8a\u8282\u70b9\uff0c $S$ \u548c $T$ \uff08$S$ \u2260 $T$\uff09\uff0c\u5982\u679c\u6709 $S\\in G$ \u4e14 $T\\in G$\uff0c\u79f0$S$\u4e3a**\u6e90\u70b9**\uff0c $T$ \u4e3a**\u6c47\u70b9**\uff0c\u6240\u6709\u6c34\u4ece $S$ \u6d41\u5411 $T$\n\n\u5f62\u5982\u4ee5\u4e0b\u8fd9\u4e2a\u56fe\uff1a\n![](https://img2020.cnblogs.com/blog/2055991/202007/2055991-20200709151012458-2121003297.png)\n\n\u90a3\u4e48 $S->A->B->T$ \u5c31\u662f\u8be5\u7f51\u7edc\u7684\u4e00\u4e2a\u6d41\uff0c\u8fd9\u4e2a\u6d41\u7684\u6d41\u91cf\u4e3a2\uff08\u8be5\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u7684\u5bb9\u91cf\uff09\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u6d41\u91cf\uff0c\u5e94\u8be5\u5982\u4f55\u5b9a\u4e49\u5462\uff1f\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6d41\u51fd\u6570\uff08\u6458\u81ea\u674e\u715c\u4e1c\u7684\u300a\u7b97\u6cd5\u8fdb\u9636\u300b\uff09\n\n$f(x,y)$\u4e3a\u5b9a\u4e49\u5728\u8282\u70b9\u4e8c\u5143\u7ec4\uff08$x$\u2208$V$,$y$\u2208$V$\uff09\u4e0a\u7684\u5b9e\u6570\u51fd\u6570\uff0c\u6ee1\u8db3\uff1a\n\n1. $f(x,y)$ \u2264 $c(x,y)$\n2. $f(x,y)$ \uff1d $-f(y,x)$\n3. $\\forall$ $x$\u2260$S$\uff0c$x\u2260T$, $\\sum_{(u,x)\u2208E }f(u,x)=\\sum_{(x,v)\u2208E }f(x,v)$\n\n$f$\u79f0\u4e3a\u8be5\u7f51\u7edc\u7684\u6d41\u51fd\u6570\uff0c\u5bf9\u4e8e$(x,y)$\u2208$E$,$f(x,y)$\u4e3a\u8fb9\u7684\u6d41\u91cf\uff0c$c(x,y)-f(x,y)$\u4e3a\u8be5\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\n\n\u8fd9\u4e09\u6761\u6027\u8d28\u5206\u522b\u4e3a**\u5bb9\u91cf\u9650\u5236**\uff0c**\u659c\u5bf9\u79f0**\u548c**\u6d41\u91cf\u5b88\u6052**\u3002\u5176\u4e2d\u6d41\u91cf\u5b88\u6052\u544a\u8bc9\u6211\u4eec\u53ea\u6709\u6e90\u70b9\u548c\u6c47\u70b9\u624d\u4f1a\u5b58\u50a8\u6d41\uff0c\u5176\u6d41\u5165\u603b\u91cf\u7b49\u4e8e\u6d41\u51fa\u603b\u91cf\n\n\n\n------------\n\n## \u6700\u5927\u6d41\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\uff0c\u6709\u5f88\u591a\u7684\u6d41\u51fd\u6570$f$\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u4f7f\u5f97\u6574\u4e2a\u7f51\u7edc\u7684$\\sum_{(S,v)\u2208E }f(S,v)$\u6700\u5927\u7684\u6d41\u51fd\u6570\u79f0\u4e3a\u8be5\u7f51\u7edc\u7684**\u6700\u5927\u6d41**\uff0c\u6b64\u65f6\u7684\u6d41\u91cf\u4e3a\u8be5\u7f51\u7edc\u7684**\u6700\u5927\u6d41\u91cf**\n\n\u90a3\u4e48\u6c42\u8fd9\u4e2a\u6700\u5927\u6d41\uff0c\u6211\u4f1a\u8bb2\u89e3 **Edmonds-Karp**\u589e\u5e7f\u8def\u7b97\u6cd5 \u548c **Dinic**\u7b97\u6cd5\uff0c\u5f53\u7136\u8fd8\u6709**ISAP**\u548c**HLPP**\u7b49\u66f4\u52a0\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u56e0\u4e3a\u849f\u84bb\u4e0d\u592a\u4f1a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4ecb\u7ecd\uff0c\u5982\u679c\u5b66\u4f1a\u4e86\u4f1a\u66f4\u65b0\u7684\n\n### **Edmonds-Karp**\u589e\u5e7f\u8def\u7b97\u6cd5\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nm^2)$\n\n\u5148\u4ecb\u7ecd\u4e00\u4e0b**\u589e\u5e7f\u8def**\u662f\u4e2a\u4ec0\u4e48\uff1a\u5bf9\u4e8e $S$ \u5230 $T$ \u7684\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0a\u5404\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0\uff0c\u5219\u8fd9\u4e00\u6761\u8def\u5f84\u5c31\u662f\u4e00\u6761\u589e\u5e7f\u8def\n\n\u90a3\u4e48\u4ed4\u7ec6\u4e00\u60f3\uff0c\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e2d\u8fd8\u5b58\u5728\u7740\u90a3\u4e48\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u90a3\u4e48\u8bf4\u660e\u6211\u7684\u6d41\u91cf\u8fd8\u53ef\u4ee5\u66f4\u5927\uff08\u89c1\u589e\u5e7f\u8def\u7684\u5b9a\u4e49\u548c\u5269\u4f59\u5bb9\u91cf\u7684\u5b9a\u4e49\uff09\uff0c\u90a3\u4e48EK\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u4e0d\u65ad\u5730\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u76f4\u5230\u65e0\u6cd5\u627e\u51fa\u6700\u5e7f\u8def\u4e4b\u540e\uff0c\u8bf4\u660e\u627e\u51fa\u4e86\u7f51\u7edc\u4e2d\u7684\u6700\u5927\u6d41\n\n\u90a3\u4e48\u6ce8\u610f\u5728\u5b9e\u73b0\u5bfb\u627e\u589e\u5e7f\u8def\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e7f\u641c\u5b9e\u73b0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u627e\u5230\u6bcf\u4e00\u6761\u589e\u5e7f\u8def\n\n\u5728\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\u65f6\uff0c\u8def\u5f84\u4e0a\u7684\u5bb9\u91cf\u5e94\u8be5\u51cf\u53bb\u8fd9\u6761\u589e\u5e7f\u8def\u7684\u6d41\u91cf\uff0c\u90a3\u4e48\u5728\u5904\u7406\u8fd9\u4e2a\u4e1c\u897f\u4e4b\u540e\u5c31\u4f1a\u5f71\u54cd\u5230\u5176\u5b83\u589e\u5e7f\u8def\uff0c\u8fd9\u4e2a\u65f6\u5019\u5efa\u53cd\u5411\u8fb9\u52a0\u4e0a\u51cf\u53bb\u7684\u6d41\u91cf\uff0c\u5c31\u53ef\u4ee5\u8d77\u5230\u4e00\u4e2a\u53cd\u6094\u7684\u4f5c\u7528\n\n\u90a3\u4e48\u6574\u4e2a\u7684\u6a21\u62df\u8fc7\u7a0b\u5982\u4e0b\uff08\u4ece\u5de6\u5f80\u53f3\u770b\uff09\uff1a\n\n![](https://img2020.cnblogs.com/blog/2055991/202007/2055991-20200709161656022-1126516460.png)\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u6765\u7b2c\u4e00\u4efd\u7a0b\u5e8f\u4e86\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=50000;\nconst int INF=2147483649; //\u8bb0\u5f97\u521d\u59cb\u503c\u5199\u5927\u70b9 \nint n,m,s,t;\nstruct node{\n\tint net,to,w;\n}e[MAXN];\nint head[MAXN],tot=1;//\u6ce8\u610f\u8fd9\u91cc\u662f1\uff0c\u5176\u5b9e-1\u4e5f\u884c\uff0c\u770b\u4e2a\u4eba\u7231\u597d \nvoid add(int x,int y,int z){\n\te[++tot].net=head[x];\n\te[tot].to=y;\n\te[tot].w=z;\n\thead[x]=tot;\n}\n//\u9886\u63a5\u8868\u5b58\u8fb9 \nint ans;\nint bian[MAXN],minn[MAXN]; //bian\u662f\u7528\u6765\u8bb0\u5f55\u8def\u5f84\u7684\uff0cminn\u8868\u793a\u589e\u5e7f\u8def\u4e0a\u5404\u8fb9\u7684\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf \nbool v[MAXN];\nbool bfs(){\n\tfor(register int i=1;i<=n;i++) v[i]=false;\n\tqueue<int>q;\n\tq.push(s);\n\tv[s]=true;\n\tminn[s]=INF;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];i;i=e[i].net){\n\t\t\tif(e[i].w!=0){ //\u4e0d\u4e3a0\u624d\u8d70 \n\t\t\t\tint y=e[i].to,z=e[i].w;\n\t\t\t\tif(v[y]==true) continue; //\u589e\u5e7f\u8def\u8d70\u8fc7\u5c31\u4e0d\u7ba1\u4e86 \n\t\t\t\tminn[y]=min(minn[x],z);  \n\t\t\t\tbian[y]=i;\n\t\t\t\tv[y]=true;\n\t\t\t\tq.push(y);\n\t\t\t\tif(y==t) return true; //\u53ef\u4ee5\u5230\u8fbe\u6c47\u70b9 \n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nvoid update(){\n\tint x=t;\n\twhile(x!=s){\n\t\tint i=bian[x];\n\t\te[i].w-=minn[t]; //\u6b63\u5411\u8fb9-\n\t\te[i^1].w+=minn[t]; //\u53cd\u5411\u8fb9+ \n\t\tx=e[i^1].to;\n\t}\n\t//\u8fd9\u4e2a\u5f02\u62161\u5176\u5b9e\u975e\u5e38\u7684\u79d2\n\t//\u56e0\u4e3a\u4e4b\u524d\u5728\u5b58\u50a8\u8fb9\u7684\u65f6\u5019\uff0c\u662f\u76f4\u63a5\u6b63\u5411\u53cd\u5411\u4e00\u8d77\u5b58\n\t//\u6240\u6709\u53cd\u5411\u8fb9=\u6b63\u5411\u8fb9+1\n\t//\u4e00\u4e2a\u5076\u6570\u5f02\u62161=\u5076\u6570+1\n\t//\u4e00\u4e2a\u5947\u6570\u5f02\u62161=\u5947\u6570-1 \n\tans+=minn[t]; //\u66f4\u65b0\u7b54\u6848 \n}\nint main(){\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(register int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z); //\u6709\u5411\u8fb9\u5b58\u50a8 \n\t\tadd(y,x,0); //\u5148\u5b58\u4e00\u4e2a\u8fb9\u6743\u4e3a0\u7684\u53cd\u5411\u8fb9\uff0c\u6709\u7528 \n\t}\n\twhile(bfs()==true) update(); //\u4e0d\u65ad\u66f4\u65b0\u589e\u5e7f\u8def \n\tprintf(\"%d\",ans); //\u7b54\u6848 \n\treturn 0;\n}\n```\n\nTLE\u7684\u90a3\u4e24\u4e2a\u70b9\u5176\u5b9e\u662f\u56e0\u4e3a\u6709\u592a\u591a\u7684\u91cd\u8fb9\uff0c\u90a3\u4e48\u5176\u5b9e\u5bf9\u4e8e\u91cd\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u91cd\u8fb9\u7d2f\u52a0\uff0c\u4e5f\u53ef\u4ee5AC\u7684\uff08@\u90a3\u4e00\u6761\u53d8\u963b\u5668\uff0c\u4ed6\u7528vector\u8fd9\u4e48\u8fc7\u7684\uff09\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,s,t,u,v;\nint w,ans,dis[520010];\nint tot=1,vis[520010],pre[520010],head[520010],flag[2510][2510];\n\nstruct node {\n\tint to,net;\n\tint val;\n} e[520010];\n\ninline void add(int u,int v,int w) {\n\te[++tot].to=v;\n\te[tot].val=w;\n\te[tot].net=head[u];\n\thead[u]=tot;\n\te[++tot].to=u;\n\te[tot].val=0;\n\te[tot].net=head[v];\n\thead[v]=tot;\n}\n\ninline int bfs() {\n\tfor(register int i=1;i<=n;i++) vis[i]=0;\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=1;\n\tdis[s]=2005020600;\n\twhile(!q.empty()) {\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];i;i=e[i].net) {\n\t\t\tif(e[i].val==0) continue;\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]==1) continue;\n\t\t\tdis[v]=min(dis[x],e[i].val);\n\t\t\tpre[v]=i;\n\t\t\tq.push(v);\n\t\t\tvis[v]=1;\n\t\t\tif(v==t) return 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\ninline void update() {\n\tint x=t;\n\twhile(x!=s) {\n\t\tint v=pre[x];\n\t\te[v].val-=dis[t];\n\t\te[v^1].val+=dis[t];\n\t\tx=e[v^1].to;\n\t}\n\tans+=dis[t];\n}\n\nint main() {\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(register int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tif(flag[u][v]==0) {\n\t\t\tadd(u,v,w);\n\t\t\tflag[u][v]=tot; //\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e00\u6761\u8fb9 \n\t\t}\n\t\telse {\n\t\t\te[flag[u][v]-1].val+=w; //\u7d2f\u52a0\u91cd\u8fb9 \n\t\t}\n\t}\n\twhile(bfs()!=0) {\n\t\tupdate();\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```\n\n### **Dinic**\u7b97\u6cd5\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(n^2m)$\n\n\u76f8\u5bf9\u4e8e\u4e4b\u524dEK\u7b97\u6cd5\u6765\u8bf4\uff0c\u5728\u7a00\u758f\u56fe\u4e2d\u7684\u8868\u73b0\u5176\u5b9e\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u4f46\u662f\u5728\u7a20\u5bc6\u56fe\u4e2d\u5c31\u5feb\u5f88\u591a\u4e86\n\n\u8bb2Dinic\u4e4b\u524d\uff0c\u6211\u4eec\u4e0d\u59a8\u518d\u5f15\u5165\u4e00\u4e2a\u4e1c\u897f\uff1a**\u6b8b\u91cf\u7f51\u7edc**\u3002\u4efb\u610f\u65f6\u523b\uff0c\u5728\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0\u7684\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u53eb\u505a\u6b8b\u91cf\u7f51\u7edc\u3002\u5728EK\u7b97\u6cd5\u4e2d\uff0c\u6bcf\u8f6eBFS\u4f1a\u904d\u5386\u6574\u4e2a\u6b8b\u91cf\u7f51\u7edc\uff0c\u4f46\u53ea\u66f4\u65b0\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u8fd9\u5c31\u6d6a\u8d39\u4e86\u5f88\u591a\u65f6\u95f4\uff0c\u5c31\u9700\u8981\u7528Dinic\u7b97\u6cd5\u4e86\n\n\u6211\u4eec\u8bbe\u4e00\u4e2a $d[x]$ \u8868\u793a $x$ \u7684\u5c42\u6b21\uff0c\u5982\u679c\u6ee1\u8db3$d[y]=d[x]+1$ \u7684\u8fb9$(x,y)$\uff0c\u5219\u5b83\u662f\u4e00\u4e2a\u5206\u5c42\u56fe\uff0c\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\n\n\u4e3a\u4ec0\u4e48\u7528Dinic\u4f1a\u66f4\u4f18\u5462\uff0c\u6211\u4eec\u5148\u7528BFS\u6c42\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u5728\u5206\u5c42\u56fe\u4e0aDFS\u53ea\u53bb\u5bfb\u627e\u5230\u4e0b\u4e00\u5c42\u7684\u8fb9\uff0c\u6bcf\u4e00\u6b21\u627e\u51fa\u591a\u6761\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u5c31\u4f1a\u5feb\u5f88\u591a\n\n\u8fd9\u5176\u4e2d\u8fd8\u4f1a\u6d89\u53ca\u4e00\u4e2a**\u5f53\u524d\u5f27\u4f18\u5316**\uff0c\u5c31\u662f\u5728\u66f4\u65b0\u7b2c$i$\u6761\u8fb9\u65f6\uff0c\u524d\u9762$i-1$\u6761\u8fb9\u5230\u6c47\u70b9\u7684\u6d41\u5df2\u7ecf\u6d41\u6ee1\u5e76\u4e14\u6ca1\u6709\u8def\u53ef\u4ee5\u8d70\u4e86\uff0c\u53ef\u4ee5\u4e0d\u53bb\u66f4\u65b0\uff0c\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u53bb\u8dd1\u4e4b\u524d\u7684\u8fb9\n\n\u81f3\u4e8e\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u8bb2\u89e3\u597d\u4e86\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=2147483;\nconst int MAXN=50000;\nint n,m,s,t;\nstruct node{\n\tint net,to;\n\tint w;\n}e[MAXN];\nint head[MAXN],tot;\nvoid add(int x,int y,int z){\n\te[++tot].net=head[x];\n\te[tot].to=y;\n\te[tot].w=z;\n\thead[x]=tot;\n}\nint de[MAXN]; //\u5b58\u50a8\u6bcf\u4e00\u4e2a\u70b9\u7684\u5c42\u6b21 \nint now[MAXN];//\u8fd9\u4e2anow\u53ef\u4ee5\u6682\u65f6\u770b\u4e3ahead\u7684\u4e00\u4e2a\u526f\u672c\uff0c\u6240\u6709\u503c\u90fd\u4e00\u6837 \n\nbool bfs(){\n\tqueue<int>q;\n\tfor(register int i=1;i<=n;i++) de[i]=INF;\n\tq.push(s);\n\tde[s]=0;\n\tnow[s]=head[s]; //\u5145\u5206\u53d1\u6325\u4e00\u4e2a\u4f5c\u4e3a\u526f\u672c\u7684\u4f5c\u7528 \n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];i;i=e[i].net){\n\t\t\tint y=e[i].to,z=e[i].w;\n\t\t\tif(z!=0&&de[y]==INF){ //\u5982\u679c\u5f53\u524d\u8fb9\u53ef\u4ee5\u8d70\u4e14\u8fd8\u6ca1\u627e\u8fc7 \n\t\t\t\tq.push(y);\n\t\t\t\tnow[y]=head[y];\n\t\t\t\tde[y]=de[x]+1; //\u66f4\u65b0\u5c42\u6b21 \n\t\t\t\tif(y==t) return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\t//\u5176\u5b9e\u548cEK\u7684BFS\u5dee\u4e0d\u4e86\u591a\u5c11\u7684 \n}\n\nint dfs(int x,int liu){ \n\tif(x==t) return liu; //\u76f4\u63a5\u8fd4\u56de \n\tint k,ans=0; //k\u662f\u5f53\u524d\u6700\u5c0f\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\n\tfor(register int i=now[x];i&&liu;i=e[i].net){\n\t\tnow[x]=i;//\u5f53\u524d\u5f27\u4f18\u5316 \n\t\tint y=e[i].to;\n\t\tif(e[i].w!=0&&(de[y]==de[x]+1)){\n\t\t\tk=dfs(y,min(liu,e[i].w)); //\u6bd4\u8f83\u51fa\u4e00\u6761\u66f4\u5c0f\u7684 \n\t\t\tif(!k) de[y]=INF;   //\u526a\u679d\uff0c\u53bb\u6389\u589e\u5e7f\u540e\u7684\u70b9 \n\t\t\te[i].w-=k;\n\t\t\te[i^1].w+=k; //\u6b63\u5411\u53cd\u5411\u66f4\u65b0 \n\t\t\tans+=k; //\u6d41\u51fa\u53bb\u7684\u6d41\u91cf\u548c \n\t\t\tliu-=k; //\u5269\u4f59\u6d41\u91cf\u51cf\u5c11 \n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&m,&n,&s,&t);\n\ttot=1;\n\tfor(register int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,0);\n\t}\n\tint maxx=0; //\u6700\u5927\u6d41 \n\twhile(bfs()) maxx+=dfs(s,INF);//\u8bb0\u5f55\u7b54\u6848 \n\tprintf(\"%d\",maxx);\n\treturn 0;\n}\n```\n\n\u611f\u8c22\u4e00\u4e0b@\u90a3\u4e00\u6761\u53d8\u963b\u5668\u548c@\u53d6\u4ec0\u4e48\u540d\u5b57 \u4e24\u4e2a\u5927\u4f6c\u7684\u6307\u70b9\uff0c\u5f53\u7136\u8fd8\u6709\u5176\u4ed6\u9898\u89e3\uff08\u56e0\u4e3a\u6211\u6700\u5f00\u59cb\u81ea\u5df1\u4e5f\u4e0d\u4f1a\u7f16\u554a~~~\uff09",
        "postTime": 1594341479,
        "uid": 113537,
        "name": "Poetic_Rain",
        "ccfLevel": 0,
        "title": "P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41"
    },
    {
        "content": "\u7f51\u7edc\u6700\u5927\u6d41\u7684\u6a21\u677f\u9898\u3002\n\u867d\u7136 $clg$ \u8001\u5e08\u4e0a\u8bfe\u8bb2\u4e86 $noip$ \u4e0d\u8003\u7f51\u7edc\u6d41\u7684\u4e8b\u60c5\uff0c\u4e0d\u8fc7~~\u4e3a\u4e86\u4e0d\u6389\u793e\u533a\u8d21\u732e~~\u4e3a\u4e86\u52a0\u6df1\u4e00\u4e0b\u5370\u8c61\uff0c\u8fd8\u662f\u53d1\u4e00\u7bc7\u9898\u89e3\u3002\n\n# \u601d\u8def\n\u4e2a\u4eba\u63a8\u8350 $ISAP$\uff0c\u597d\u7406\u89e3\u4ee3\u7801\u4e5f\u77ed\uff0c\u6bd4 $dinic$ \u5feb\uff0c\u53c8\u4e0d\u50cf $HLPP$ \u4ee3\u7801\u53c8\u957f\u53c8\u8981\u52a0\u8fa3\u4e48\u591a\u5947\u5947\u602a\u602a\u7684\u4f18\u5316\uff0c\u53ef\u8c13\u662f\u5c45\u5bb6\u5207\u9898\u4e4b\u5fc5\u5907\u826f\u54c1\u3002\n\n\u56de\u987e\u4e00\u4e0b $dinic$ \u7b97\u6cd5\uff1a\u6bcf\u6b21 $bfs$ \u904d\u5386\u52a0 $dfs$ \u627e\u589e\u5e7f\u8def\uff0c\u663e\u7136\u591a\u6b21 $bfs$ \u4f1a\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u4ec0\u4e48\u529e\u6cd5\u53ea\u7528\u4e00\u6b21 $bfs$ \u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u5462\uff1f\n\n\u5f53\u7136\u53ef\u4ee5\u3002\u6211\u4eec\u53ea\u8981\u5012\u7740\u4ece\u6c47\u70b9\u5230\u6e90\u70b9 $bfs$\uff0c\u7136\u540e\u6bcf\u6b21\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u628a\u7ecf\u8fc7\u7684\u70b9\u6df1\u5ea6\u52a0\u4e00\uff0c\u4e00\u76f4\u5230\u51fa\u73b0\u65ad\u5c42\u5c31\u505c\u6b62\u7ee7\u7eed\u627e\u589e\u5e7f\u8def\u4e86\u3002\n# code\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define N 100005\n#define INF 0x7f7f7f7f7f7f7f7f\nusing namespace std;\nint cnt=1;//\u6ce8\u610f\u5f02\u6216\u7684\u539f\u7406\nint head[N],to[N],w[N],next[N],deep[N];\nint maxflow,used,gap[N];\nint n,m,s,t;\nqueue<int>q;\nvoid add(int u,int v,int c){\n\tcnt++;\n\tto[cnt]=v;\n\tw[cnt]=c;\n\tnext[cnt]=head[u];\n\thead[u]=cnt;\n}\nvoid bfs(){\n\tmemset(gap,0,sizeof(gap));\n\tmemset(deep,-1,sizeof(deep));//\u521d\u59cb\u5316\u4e3a0\u4f1a\u70b8\n\tq.push(t);\n\tdeep[t]=0;\n\tgap[0]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\tint v=to[i];\n\t\t\tif(deep[v]==-1){\n\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\tgap[deep[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint dfs(int u,int flow){\n\tif(u==t){\n\t\tmaxflow+=flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=head[u];i;i=next[i]){\n\t\tint v=to[i];\n\t\tif(w[i]&&deep[v]+1==deep[u]){\n\t\t\tint quan=dfs(v,min(w[i],flow-used));\n\t\t\tif(quan){\n\t\t\t\tw[i]-=quan;\n\t\t\t\tw[i^1]+=quan;\n\t\t\t\tused+=quan;\n\t\t\t}\n\t\t\tif(flow==used) return used;\n\t\t}\n\t}\n\t--gap[deep[u]];\n\tif(gap[deep[u]]==0){\n\t\tdeep[s]=n+1;\n\t}\n\tdeep[u]++;\n\tgap[deep[u]]++;\n\treturn used;\n}\nint ISAP(){\n\tmaxflow=0;\n\tbfs();\n\twhile(deep[s]<n){\n\t\tdfs(s,INF);//\u521d\u59cb\u6d41\u91cf\u4e3a\u65e0\u7a77\u5927\n\t}\n\treturn maxflow;\n}\nsigned main(){\n\tcin>>n>>m>>s>>t;\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t\tadd(v,u,0);//\u5efa\u53cd\u5411\u8fb9\n\t}\n\tcout<<ISAP();\n\treturn 0;\n}\n```\n",
        "postTime": 1605366956,
        "uid": 244165,
        "name": "_121017_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u201c\u54ea\u6765\u90a3\u4e48\u591a\u9ebb\u70e6\u4e8b\uff0c\u76f4\u63a5\u4e0a$Dinic$\u5b83\u4e0d\u9999\u5417?\"      \n-----\u67d0\u795e\u7287     \n\u65e2\u7136\u795e\u7287\u90fd\u8bf4\u597d\u7528\uff0c\u8fd9\u80af\u5b9a\u80fd\u51d1\u4e0d\u5c11\u667a\u5546      \n\u672c\u849f\u84bb\u5b66\u4e86\u4e4b\u540e\u611f\u89c9\u5b9e\u529b\u5927\u589e     \n\u6240\u4ee5\u8fd9\u662f\u6240\u6709\u9898\u89e3\u91cc\u552f\u4e00\u4e00\u7bc7\u8be6\u8bb2$Dinic$\u7684\u9898\u89e3    \n*    1.$BFS$     \n\u76f4\u63a5\u66b4\u529b\u641c$(+O_2)$\u4e5f\u80fd\u5728\u6bd4\u8d5b\u65f6\u62ff\u4e0d\u5c11\u5206     \n*    2.\u589e\u5e7f\u8def    \n\u589e\u5e7f\u8def\uff1b\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6269\u5927\u7684\u8def\u5f84    \n\u5728\u7f51\u7edc\u6d41\u91cc\u8868\u793a\u4e00\u6761\u4ece$S$\u5230$T$\u7684\u8def\u5f84\u8fd8\u53ef\u4ee5\u589e\u6d41    \n*    3.\u589e\u5e7f\u8def\u5b9a\u7406    \n\u5728\u4e00\u5f20\u7f51\u7edc\u4e2d\uff0c\u5982\u679c\u4e0d\u542b\u589e\u5e7f\u8def\uff0c\u90a3\u4e48\u5f53\u524d$S$\u6d41\u51fa\u7684\u6d41\u91cf\u5c31\u662f\u4e86\u6700\u5927\u6d41    \n\u8bc1\u660e\uff1a   \n\u2235\u5f53\u524d\u4e0d\u80fd\u589e\u5e7f    \n\u2234\u5f53\u524d\u5fc5\u6709\u67d0\u6761\u5f27\u7684\u6d41\u91cf\u6d41\u6ee1       \n\u5c06\u6240\u6709\u6d41\u91cf\u6d41\u6ee1\u7684\u8fb9\u5220\u6389   \n\u663e\u7136\u4f1a\u5f62\u6210$2$\u4e2a\u4ee5\u4e0a\u7684\u8fde\u901a\u5757    \n\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u95f4\u4e0d\u80fd\u6709\u6d41   \n\u2234\u8bc1\u6bd5     \n*    4.$01BFS$    \n$01BFS$\u662f\u4e00\u79cd\u6bcf\u4e2a\u70b9\u53ea\u8fdb\u961f\u4e00\u6b21\u7684$BFS$     \n\u8fd9\u4f7f\u5176\u53ef\u4ee5\u5728$O(n+m)$\u65f6\u95f4\u5185\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb    \n*    5.$Dinic$    \n\u6bcf\u6b21\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u8dd1$01BFS$   \n\u6784\u9020\u5c42\u6b21\u56fe   \n\u8dd1\u589e\u5e7f\u8def\u5b9a\u7406   \n\u8d34\u4ee3\u7801\uff1a \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=200+10;\nconst int MR=5e3+10;\n#define int long long\nstruct edge{\n\tint to,next,val;\n}g[MR<<1];\nint tot=1;\nint fte[NR];\nint now[NR];\nvoid add(int x,int y,int z){\n      g[++tot]=(edge){y,fte[x],z};\n      fte[x]=now[x]=tot;\n}\nint dist[NR];\nint s,t;\nbool bfs(){\n      queue<int>q;\n      memset(dist,999999,sizeof(dist));\n      dist[s]=0;\n      q.push(s);\n      now[s]=fte[s];\n      bool flag=false;\n      while(!q.empty()){\n          int x=q.front();\n          q.pop();\n          for(int i=fte[x];i;i=g[i].next)\n              if(dist[g[i].to]>1e9&&g[i].val>0){\n                  now[g[i].to]=fte[g[i].to];\n                  dist[g[i].to]=dist[x]+1;\n                  q.push(g[i].to);\n                  if(g[i].to==t)return true;\n              }\n      }\n      return flag;\n}\nint Dinic(int id,long long sum){\n      if(id==t)return sum;\n      long long k,res=0;\n      for(int i=now[id];i&&sum;i=g[i].next){\n          now[id]=i;\n          int x=g[i].to;\n          if(dist[x]==dist[id]+1&&g[i].val){\n              k=Dinic(x,min(sum,g[i].val));\n              if(!k)dist[x]=0x3f3f3f3f;\n              g[i].val-=k;\n              g[i^1].val+=k;\n              res+=k;\n              sum-=k;\n          }\n      }\n      return res;\n}\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n      int n,m;\n      cin>>n>>m>>s>>t;\n      for(int i=1;i<=m;i++){\n          int x,y,z;\n          cin>>x>>y>>z;\n          add(x,y,z);\n          add(y,x,0);\n      }\n      long long ans=0;\n      while(bfs())ans+=Dinic(s,0x3f3f3f3f);\n      cout<<ans;\n      return 0;\n}\n\n\n\n\n```\n",
        "postTime": 1596882751,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3376 \u3010\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41\u3011"
    }
]