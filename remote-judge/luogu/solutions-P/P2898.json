[
    {
        "content": "**\u5e7f\u544a\uff1a[blog$\\spadesuit$](https://www.luogu.com.cn/blog/Wendigo/)**\n\n[P2898 \u3010\\[USACO08JAN\\]haybale\u731c\u6d4bHaybale Guessing\u3011](https://www.luogu.com.cn/problem/P2898)\n\n**\u9898\u610f\uff1a\u6709\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u7684\u6b63\u6574\u6570\u5e8f\u5217\uff0c\u6bcf\u53e5\u8bdd\u544a\u8bc9\u4f60 $l\\sim r$ \u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3a $f$\uff0c\u6c42\u7b2c\u4e00\u53e5\u4e0e\u524d\u9762\u77db\u76fe\u7684\u8bdd\u3002**\n\n### \u6b64\u9898\u7b97\u6cd5\uff1a\u5e76\u67e5\u96c6 $+$ \u4e8c\u5206\n\n**\u4e8c\u5206\u679a\u4e3e\u7b2c\u4e00\u53e5\u77db\u76fe\u7684\u8bdd $x$ \u3002**\n\n\u62ff\u51fa $1\\sim x$ \u53e5\u8bdd\uff0c\u6309 $f$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u4ece\u5de6\u5230\u53f3\u8bfb\u6bcf\u4e00\u53e5\u8bdd\uff1a\n\n\u5982\u679c\u51fa\u73b0\u4e24\u6bb5**\u6ca1\u6709\u91cd\u5408\u533a\u57df\u7684\u8bdd\u6ee1\u8db3 $f$ \u76f8\u7b49**\uff0c\u5f97\u51fa\u77db\u76fe\u3002\n\n![\u77db\u76fe1.jpg](https://i.loli.net/2020/01/11/SMXmeJdxVONUtGc.jpg)\n\n\u5982\u679c\u51fa\u73b0**\u6240\u6709 $f$ \u76f8\u7b49\u7684\u8bdd $\\ll$\u533a\u57df\u4ea4$\\gg$ \u5df2\u7ecf\u5168\u4e3a\u4e00\u5757**\uff0c\u5f97\u51fa\u77db\u76fe\u3002\n\n![newtest.jpg](https://i.loli.net/2020/01/11/wfMbJBKeEnIF6Oi.jpg)\n\n**\u5c06\u6240\u6709\u76f8\u540c $f$ \u76f8\u7b49\u7684\u8bdd $\\ll$\u533a\u57df\u5e76$\\gg$ \u5408\u5e76\u4e3a\u4e00\u5757**\u3002 \n\n\u5982\u679c\u90fd\u4e0d\u6ee1\u8db3\u77db\u76fe\uff0c\u5c31\u5f97\u51fa\u7b26\u5408\u3002\n\n\u6700\u540e\u7ed3\u675f\u4e8c\u5206\uff0c\u5f97\u51fa\u7b2c\u4e00\u53e5\u77db\u76fe\u7684\u8bdd\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801 $+$ \u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+10;\nconst int Q=3e4+10;\nint d(){int x;scanf(\"%d\",&x);return x;}\nint n,q;\nstruct ask{int l,r,f;}a[Q],cp[Q];\nbool cmp(ask x,ask y){ //\u6309 f \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\tif(x.f==y.f) return x.l<y.l;\n\treturn x.f>y.f;\n}\nstruct mas{ //\u5e76\u67e5\u96c6\n\tint f[N];\n\tvoid clear(int x){\n\t\tfor(int i=1;i<=x;i++)\n\t\t\tf[i]=i;\n\t}\n\tint find(int x){\n\t\tif(f[x]==x) return x;\n\t\treturn f[x]=find(f[x]); \n\t}\n}s;\nbool check(int x){ //\u5224\u65ad1~x\u8fd9\u4e9b\u8bdd\u77db\u4e0d\u77db\u76fe\uff0c\u539f\u7406\u5982\u4e0a\n\ts.clear(n+1);\n\tfor(int i=1;i<=x;i++)\n\t\tcp[i]=a[i];\n\tsort(cp+1,cp+x+1,cmp);\n\tint p=cp[1].f,lx,ln,rx,rn;\n\tlx=ln=cp[1].l,rx=rn=cp[1].r;\n\tfor(int i=2;i<=x;i++){\n\t\tif(p==cp[i].f){\n\t\t\tln=min(ln,cp[i].l);\n\t\t\trn=min(rn,cp[i].r);\n\t\t\tlx=max(lx,cp[i].l);\n\t\t\trx=max(rx,cp[i].r);\n\t\t\tif(lx>rn) return 0;\n\t\t} else {\n\t\t\tif(s.find(lx)>rn) return 0;\n\t\t\tfor(int j=s.find(ln);;j=s.find(j+1))\n\t\t\t\tif(j>rx) break;\n\t\t\t\telse s.f[j]=s.f[j+1];\n\t\t\tp=cp[i].f;\n\t\t\tlx=ln=cp[i].l;\n\t\t\trx=rn=cp[i].r;\n\t\t}\n\t}\n\treturn s.find(lx)<=rn;\n}\nint main(){\n\tn=d(),q=d();\n\tfor(int i=1;i<=q;i++)\n\t\ta[i].l=d(),a[i].r=d(),a[i].f=d();\n\tint l=0,r=q+1;\n\twhile(l<r-1){ //\u4e8c\u5206\u5f97\u51fa\u7b54\u6848\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) l=mid;\n\t\telse r=mid;\n\t}\n\tif(r==q+1) puts(\"0\");\n\telse printf(\"%d\\n\",r);\n\treturn 0;\n}\n```\n\n\u7528\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u505a\u5230\uff0c\u4f46\u53c8\u9ebb\u70e6\u53c8\u6162\u3002\n\n**\u753b\u56fe\u3001\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u5feb\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6! !\n\n\n\n\n\n",
        "postTime": 1578732842,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "\u697c\u4e0b\u8001\u54e5\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\u597d\u662f\u5de7\u5999\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bb2\u5177\u4f53\u5982\u4f55\u7528\u5e76\u67e5\u96c6\u6765\n\n\u8986\u76d6\u533a\u95f4\u4ee5\u81f3\u4e8e\u6211\u67e5\u4e86\u597d\u591a\u8d44\u6599\u624d\u641e\u660e\u767d\u3002\u3002\u3002\uff08\u4e5f\u8bb8\u662f\u56e0\u4e3a\u6211\u2468\uff09\n\n\u6240\u4ee5\uff0c\u5728\u6b64\u5c06\u5e76\u67e5\u96c6\u5b9e\u73b0\u8fd9\u9898\u7684\u539f\u7406\u8bb2\u4e00\u8bb2\u3002\n\n---\n\n\u6709\u5982\u4e0b\u95ee\u9898\uff1a\n\n\u957f\u4e3a$n$\u7684\u5e8f\u5217\uff0c\u5f00\u59cb\u5747\u65e0\u989c\u8272\uff0c\n\n\u6709$m$\u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06$l$\u5230$r$\u7684\u6570\u5168\u67d3\u6210$c$\u8272\uff0c\n\n\u6c42\u6700\u7ec8\u7684\u5e8f\u5217\u3002\n\n\n\u6211\u4eec\u8003\u8651\u5c06\u67d3\u8272\u53cd\u7740\u6765\uff0c\u5219\u4e00\u4e2a\u6570\u82e5\u88ab\u67d3\u8272\u4e00\u6b21\uff0c\n\n\u5219\u8fd9\u5c31\u662f\u5b83\u7684\u6700\u7ec8\u989c\u8272\uff0c\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u6240\u4ee5\u4e0b\u6b21\u82e5\u5728\u9047\u5230\u8fd9\u4e2a\u6570\u5219\u9700\u8981\u8df3\u8fc7\uff0c\n\n\u4e5f\u5c31\u662f\u5bf9\u5df2\u7ecf\u67d3\u8272\u7684\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u4ee4\u5176\u4e2d\u7684\u6240\u6709\u6570\u90fd\u6709\u4e00\u4e2a\u6307\u9488\uff0c\n\n\u4ee5\u6307\u5411\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u8fd8\u6ca1\u6709\u64cd\u4f5c\u7684\u6570\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4ee4$father[i]$\u8868\u793a$i$\u53f3\u8fb9\uff08\u5305\u62ec$i$\u672c\u8eab\uff09\u7b2c\u4e00\u4e2a\u6ca1\u6709\u67d3\u8272\u7684\u6570\uff0c\n\n\u5c06$i$\u67d3\u8272\u540e\uff0c\u4ee4$father[i] = find(i + 1)$,\n\n\u4e4b\u540e\u5c31\u662f\u6b63\u5e38\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\u4e86\u3002\n\n-----------------\n\n\u7136\u540e\u8fd9\u9898\u662f\u4e2a\u7279\u4f8b\uff0c\u67d3\u8272\u867d\u7136\u662f\u6b63\u7740\u6765\u7684\uff0c\u4f46\u67d3\u7684\u989c\u8272\u5168\u662f\u4e00\u79cd\uff0c\n\n\u53ea\u5b58\u5728$0 - >1$\uff0c\u67d3\u4e00\u6b21\u5219\u4ee5\u540e\u4e0d\u53d8\u8272\uff0c\u6240\u4ee5\u4e5f\u53ef\u7528\u8fd9\u79cd\u65b9\u6cd5\u505a\u3002",
        "postTime": 1564740229,
        "uid": 59098,
        "name": "Mizuhara",
        "ccfLevel": 0,
        "title": "\u5e76\u67e5\u96c6-\u533a\u95f4\u67d3\u8272"
    },
    {
        "content": "\u6284\u9898\u89e3.jpg\n\n\u5b8c\u5168\u5b8c\u5168\u4e0d\u4f1a\u554a\uff0c\u8fd9\u9053\u9898\u7b80\u76f4\u592a\u795e\u4e86\n\n\u4e0d\u8fc7\u6284\u9898\u89e3\u53ef\u771f\u5f00\u5fc3\n\n\u9996\u5148\u8fd9\u9053\u9898\u76ee\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u90a3\u4e48\u5c31\u80fd\u5f97\u5230\u7b2c\u4e00\u79cd\u5224\u65ad\u4e0d\u5408\u6cd5\u7684\u65b9\u5f0f\n\n**\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e00\u6837\uff0c\u4f46\u662f\u4e24\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6\u4e3a\u7a7a\u96c6\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5408\u6cd5\u7684**\n\n\u56e0\u4e3a\u6700\u5c0f\u503c\u80af\u5b9a\u6765\u81ea\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\n\n\u4e4b\u540e\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/42224.png)\n\n\u4e0a\u9762\u90a3\u4e24\u4e2a\u7ea2\u8272\u533a\u95f4\u7684\u6700\u5c0f\u503c\u662f$4$\uff0c\u4f46\u662f\u4e0b\u9762\u90a3\u4e2a\u88ab\u5b8c\u5168\u5305\u542b\u7684\u7eff\u8272\u533a\u95f4\u7684\u6700\u5c0f\u503c\u662f$3$\u8fd9\u663e\u7136\u975e\u5e38\u4e0d\u5408\u6cd5\n\n\u4f46\u662f\u5982\u679c\u662f\u8fd9\u4e2a\u6837\u5b50\u5462\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/42225.png)\n\n\u663e\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u90a3\u4e9b$3$\u53ef\u4ee5\u6765\u81ea\u7ea2\u8272\u533a\u95f4\u4ee5\u5916\u7684\u4f4d\u7f6e\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/42226.png)\n\n\u5c31\u6709\u4e0d\u884c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019$3$\u53c8\u53ea\u80fd\u6765\u81ea\u4e8e\u90a3\u4e2a\u8f83\u5c0f\u7684\u7eff\u8272\u533a\u95f4\u4e86\uff0c\u800c\u90a3\u4e2a\u8f83\u5c0f\u7684\u7eff\u8272\u533a\u95f4\u53c8\u88ab\u7ea2\u8272\u5b8c\u5168\u8986\u76d6\u4e86\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u80fd\u5f97\u51fa\u7b2c\u4e8c\u4e2a\u5224\u65ad\u65b9\u6cd5\n\n**\u5982\u679c\u6700\u5c0f\u503c\u76f8\u540c\u7684\u533a\u95f4\uff0c\u5176\u4ea4\u96c6\u88ab\u6700\u5c0f\u503c\u6bd4\u5b83\u7684\u533a\u95f4\u7684\u5e76\u96c6\u8986\u76d6\uff0c\u90a3\u4e48\u5c31\u4e0d\u5408\u6cd5**\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u5e76\u96c6\uff0c\u5224\u65ad\u4ea4\u96c6\u662f\u5426\u88ab\u5b8c\u5168\u8986\u76d6\n\n\u663e\u7136\u533a\u95f4\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u968f\u624b\u5c31\u80fd\u6c42\u51fa\u6765\uff0c\u4f46\u662f\u8986\u76d6\u8fd9\u4e2a\u95ee\u9898\u5f97\u9700\u8981\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u5224\u65ad\n\n\u540c\u65f6\u4e3a\u4e86\u65b9\u4fbf\u7684\u8fdb\u884c\u5224\u65ad$2$\uff0c\u6211\u4eec\u5f97\u8ba9\u533a\u95f4\u7684\u6700\u5c0f\u503c\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u626b\u662f\u884c\u4e0d\u901a\u4e86\uff0c\u6211\u4eec\u5f97\u4e8c\u5206\u7b54\u6848\uff0c\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e$+1$\u5c31\u662f\u7b54\u6848\u4e86\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define LL long long\n#define re register\n#define maxn 25005\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nstruct Seg\n{\n\tint x,y,q;\n}a[maxn],b[maxn];\nint l[4000005],r[4000005],d[4000005],tag[4000005];\nint n,m;\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')\n\t\tx=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\nvoid build(int x,int y,int i)\n{\n\tl[i]=x,r[i]=y;\n\tif(x==y) return;\n\tint mid=x+y>>1;\n\tbuild(x,mid,i<<1),build(mid+1,y,i<<1|1);\n}\nvoid clear(int x,int y,int i)\n{\n\td[i]=0,tag[i]=0;\n\tif(x==y) return;\n\tint mid=x+y>>1;\n\tclear(x,mid,i<<1),clear(mid+1,y,i<<1|1);\n}\ninline void pushdown(int i)\n{\n\tif(!tag[i]) return;\n\ttag[i<<1]=tag[i<<1|1]=1;\n\td[i<<1]=r[i<<1]-l[i<<1]+1;\n\td[i<<1|1]=r[i<<1|1]-l[i<<1|1]+1;\n\ttag[i]=0;\n}\nvoid change(int x,int y,int i)\n{\n\tif(x<=l[i]&&y>=r[i]) \n\t{\n\t\td[i]=r[i]-l[i]+1;\n\t\ttag[i]=1;\n\t\treturn;\n\t}\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) change(x,y,i<<1);\n\t\telse if(x>mid) change(x,y,i<<1|1);\n\t\t\telse change(x,y,i<<1|1),change(x,y,i<<1);\n\td[i]=d[i<<1]+d[i<<1|1];\n}\nint query(int x,int y,int i)\n{\n\tif(x<=l[i]&&y>=r[i]) return d[i];\n\tpushdown(i);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) return query(x,y,i<<1);\n\tif(x>mid) return query(x,y,i<<1|1);\n\treturn query(x,y,i<<1)+query(x,y,i<<1|1);\n}\ninline int cmp(Seg A,Seg B)\n{\n\treturn A.q>B.q;\n}\ninline int check(int now)\n{\n\tfor(re int i=1;i<=now;i++)\n\t\tb[i]=a[i];\n\tstd::sort(b+1,b+now+1,cmp);\n\tclear(1,n,1);\n\tint pre=1,nl=b[1].x,nr=b[1].y,Ul=b[1].x,Ur=b[1].y;\n\tfor(re int i=2;i<=now;i++)\n\t{\n\t\tif(b[i].q==b[pre].q)\n\t\t{\n\t\t\tnl=max(nl,b[i].x);\n\t\t\tUl=min(Ul,b[i].x);\n\t\t\tUr=max(Ur,b[i].y);\n\t\t\tnr=min(nr,b[i].y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(nl>nr) return 0;\n\t\t\tif(query(nl,nr,1)==nr-nl+1) return 0;\n\t\t\tchange(Ul,Ur,1);\n\t\t\tpre=i;\n\t\t\tnl=Ul=b[i].x,nr=Ur=b[i].y;\n\t\t}\n\t}\n\tif(nl>nr) return 0; \n\tif(query(nl,nr,1)==nr-nl+1) return 0;\n\treturn 1;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(re int i=1;i<=m;i++) a[i].x=read(),a[i].y=read(),a[i].q=read();\n\tbuild(1,n,1);\n\tint L=1,R=m;\n\tint ans=0;\n\twhile(L<=R)\n\t{\n\t\tint mid=L+R>>1;\n\t\tif(check(mid)) L=mid+1,ans=mid;\n\t\t\telse R=mid-1;\n\t}\n\tif(ans==m) puts(\"0\");\n\t\telse printf(\"%d\\n\",ans+1);\n\treturn 0;\n}\n```",
        "postTime": 1541412550,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6+\u4e8c\u5206\n\n\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e9b\u533a\u95f4\u7684\u6700\u5c0f\u503c \u6c42\u95ee \u6700\u65e9\u54ea\u4e2a\u95ee\u9898\u4f1a\u4ea7\u751f\u77db\u76fe \u8f93\u51fa\n\n\u9488\u5bf9\u8fd9\u4e2a\u4ea7\u751f\u77db\u76fe \u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u5224\u65ad \u54ea\u4e2a\u5730\u65b9\u6700\u65e9\u51fa\u73b0\u77db\u76fe\n\n\u7136\u540e\u6bcf\u6b21\u9488\u5bf9\u4e8c\u5206\u7684\u4e00\u4e2a\u503c \u6211\u53bb\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6210\u7acb \u6211\u9996\u5148\u9488\u5bf9\u6743\u503c\u6392\u5e8f\n\n\u7136\u540e\u4ece\u5927\u5230\u5c0f\u53bb\u8986\u76d6 \u51fa\u73b0\u7b2c\u4e00\u4e2a\u65e0\u6cd5\u8986\u76d6\u7684\u533a\u57df\u6211\u5c31\u8fd4\u56defalse\n\n\u6bcf\u6b21\u6211\u662f\u5224\u65ad\u4ea4\u96c6 \u8986\u76d6\u5e76\u96c6 \u7528\u5e76\u67e5\u96c6\u53ef\u4ee5\u5b8c\u6210\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define Q 30000\n#define N 1100000\n#define inf 0x3f3f3f3f\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*T,*S;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0;char ch=gc();\n    while (ch<'0'||ch>'9') ch=gc();\n    while (ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=gc();}\n    return x;\n}\nstruct node{\n    int l,r,v;\n}data[Q],data1[Q];\ninline bool cmp(node a,node b){\n    if (a.v>b.v) return true;else if (a.v<b.v) return false;\n    return a.l<b.l;\n}\nint fa[N],n;\ninline int find(int x){\n    return x==fa[x]?x:fa[x]=find(fa[x]);\n}\ninline bool check(int x){\n    int l=0,r=inf;int l1=inf,r1=0;\n    for (int i=1;i<=n+1;++i) fa[i]=i;\n    for (int i=1;i<=x;++i) data[i]=data1[i];sort(data+1,data+x+1,cmp);\n    int last_v=data[1].v;l=l1=data[1].l;r=r1=data[1].r; \n    for (int i=2;i<=x;++i){\n        if (last_v!=data[i].v){\n            int x=find(l);\n            if(x<=r) {int now=find(l1);\n                while (now<=r1) fa[now]=fa[now+1],now=find(now+1);\n            }else return false;\n            last_v=data[i].v;l=l1=data[i].l;r=r1=data[i].r;\n        }else{\n            l=max(l,data[i].l);r=min(r,data[i].r);l1=min(l1,data[i].l);r1=max(r1,data[i].r);\n            if (l>r) return false;\n        };\n    }if (find(l)>r) return false;\n    return true;\n}\nint l,r,q;\nint main(){\n    //freopen(\"bzoj1594.in\",\"r\",stdin);\n    n=read();q=read();\n    for (int i=1;i<=q;++i) data1[i].l=read(),data1[i].r=read(),data1[i].v=read();\n    l=0;r=q;\n    while (l<=r){\n        int mid=l+r>>1;\n        if (check(mid)) l=mid+1;else r=mid-1;\n    }if (l>q)printf(\"0\");else printf(\"%d\",l);\n    return 0;\n}\n```\n\u7ebf\u6bb5\u6811+\u4e8c\u5206\n\n\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898  \u90a3\u5c31\u662f\u53ef\u4ee5\u6bcf\u6b21nlogn\u91cd\u5efa\u7ebf\u6bb5\u6811 \u4f46\u662f\u663e\u7136\u52a8\u6001\u52a0\u70b9\u7ebf\u6bb5\u6811\u6548\u679c\u4f1a\u66f4\u597d \u8fd9\u91cc \u5176\u5b9e\u8fd9\u4e2a\u9898\u76ee\u662f\u6709\u4e2a\u5751\u7684 \u90a3\u5c31\u662f \u5982\u679c\u6211\u8ba4\u4e3a\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c\u662f1e9\u90a3\u4e48\u56e0\u4e3a\u6211\u6bcf\u4e2a\u6570\u90fd\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21 \u6240\u4ee5\u5176\u5b9e\u8fd9\u4e2a\u8be2\u95ee\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\u6240\u4ee5\u6211\u53ef\u4ee5\u8003\u8651\u6bcf\u6b21\u8d2a\u5fc3\u7684\u628a\u5927\u7684\u586b\u5165 \u7136\u540e\u770b\u4e00\u4e0b \u6211\u8fd9\u6b21\u9700\u8981\u586b\u5165\u591a\u5c11\u4e2a \u7136\u540e\u518d\u5224\u65ad\u4e0b \u5927\u7684\u6570\u8fd8\u80fd\u586b\u591a\u5c11 \u636e\u6b64\u5224\u65ad\u662f\u5426\u53ef\u884c\u5373\u53ef\n\n\u7ebf\u6bb5\u6811\u7684\u8be6\u7ec6\u89e3\u6cd5 \u697c\u4e0b\u5df2\u7ecf\u5199\u7684\u633a\u6e05\u695a\u4e86 \u5c31\u662f\u52a8\u6001\u52a0\u70b9\u7ebf\u6bb5\u6811\u6210\u529f\u7684\u628a\u8fd9\u9898\u8dd1\u8fdb\u4e86100ms\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define Q 33000\n#define N 1100000\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*T,*S;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0;char ch=gc();\n    while (ch<'0'||ch>'9') ch=gc();\n    while (ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=gc();}\n    return x;\n}\nstruct node{\n    int l,r,v;\n}data1[Q],data[Q];\nstruct node1{\n    int l,r,left,right,v,lazy;\n}tree[N<<2];\ninline bool cmp(node a,node b){\n    if (a.v>b.v) return true;else if (a.v<b.v) return false;\n    return a.l<b.l;\n}\nint num,n,q,root;\ninline void init(int &x){\n    x=++num;tree[x].left=tree[x].right=tree[x].l=tree[x].r=tree[x].lazy=tree[x].v=0;\n}\ninline void pushdown(int x){\n    if (!tree[x].lazy) return ;\n    int mid=tree[x].l+tree[x].r>>1;\n    if (!tree[x].left) init(tree[x].left);\n    if (!tree[x].right) init(tree[x].right);\n    int l=tree[x].left,r=tree[x].right;\n    tree[l].l=tree[x].l;tree[l].r=mid;tree[r].l=mid+1;tree[r].r=tree[x].r;\n    tree[l].v=mid-tree[x].l+1;tree[r].v=tree[x].r-mid;\n    tree[l].lazy=tree[r].lazy=tree[x].lazy;\n    tree[x].lazy=0;\n} \ninline void update(int x){\n    int l=tree[x].left,r=tree[x].right;\n    tree[x].v=tree[l].v+tree[r].v;\n}\nvoid insert1(int &x,int l,int r,int l1,int r1){\n    if(l>r) return; \n    if (!x) init(x);tree[x].l=l;tree[x].r=r;\n    if (l1<=l&&r1>=r){tree[x].v=tree[x].r-tree[x].l+1;tree[x].lazy=1;return;}\n    int mid=tree[x].l+tree[x].r>>1;pushdown(x);\n    if (l1<=mid) insert1(tree[x].left,l,mid,l1,r1);\n    if (r1>mid) insert1(tree[x].right,mid+1,r,l1,r1);\n    update(x);\n}\nint query(int x,int l,int r){\n    if (l>r) return 0;\n    if (!x) return 0;\n    if (l<=tree[x].l&&r>=tree[x].r) return tree[x].v;\n    int mid=tree[x].l+tree[x].r>>1;pushdown(x);int tmp=0;\n    if (l<=mid) tmp+=query(tree[x].left,l,r);\n    if (r>mid) tmp+=query(tree[x].right,l,r);\n    return tmp;\n}\ninline bool check(int x){\n    for (int i=1;i<=x;++i) data[i]=data1[i];int tot=1e9;\n    sort(data+1,data+x+1,cmp);num=0;int l,r,l1,r1;root=0;tree[0].l=tree[0].r=tree[0].left=tree[0].right=0;\n    int last_v=data[1].v;l=l1=data[1].l;r=r1=data[1].r; int differ=0;\n    for (int i=2;i<=x;++i){\n        if (data[i].v!=last_v){\n            if (query(root,l,r)==r-l+1) return false;int pre=tree[root].v;\n            insert1(root,1,n,l1,r1);differ=tree[root].v-pre;\n            if (tot-last_v+1<differ) return 0;tot-=differ;\n            l=l1=data[i].l;r=r1=data[i].r;last_v=data[i].v;\n        }else{\n            l=max(l,data[i].l);r=min(r,data[i].r);l1=min(l1,data[i].l);r1=max(r1,data[i].r);\n            if (l>r) return false;\n        };\n        \n    }\n    if (query(root,l,r)==r-l+1) return false;\n    int pre=tree[root].v;\n    insert1(root,1,n,l1,r1);differ=tree[root].v-pre;\n    if (tot-last_v+1<differ) return 0;tot-=differ;\n    return true;\n}\nint main(){\n    freopen(\"bzoj1594.in\",\"r\",stdin);\n    n=read();q=read();\n    for (int i=1;i<=q;++i){data1[i].l=read();data1[i].r=read();data1[i].v=read();}\n    int l=1,r=q;\n    while (l<=r){\n        int mid=l+r>>1;\n        if (check(mid)) l=mid+1;else r=mid-1;\n    }\n    if (l>q) printf(\"0\");else printf(\"%d\",l);\n    return 0;\n}\n```",
        "postTime": 1510039200,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "\u7b80\u8981\u9898\u610f\uff1a\u5c0f\u6bcd\u725b\u56de\u7b54\u4f60 $q$ \u6b21\u533a\u95f4 $[l,r]$ \u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u5224\u65ad\u6700\u65e9\u54ea\u4e2a\u53e5\u5b50\u4f1a\u51fa\u73b0\u77db\u76fe\u3002\n\n\u8fd9\u9898\u6709\u70b9\u7c73\u5947\u5999\u5999\u5c4b\u3002\n\n\u5148\u6765\u601d\u8003\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u77e5\u9053\u4e24\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u5982\u4f55\u5224\u5b9a\u77db\u76fe\uff1f\n\n\u663e\u7136\u8fd9\u79cd\u60c5\u51b5\u662f\u77db\u76fe\u7684\uff1a\n\n![1](https://i.loli.net/2020/10/12/UW9lgOiCYhmHKbu.png)\n\n\u7136\u800c\u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e2a\u6761\u4ef6\uff0c\u5e8f\u5217\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e $a_i$ \u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e5f\u4e0d\u53ef\u80fd\u53d1\u751f\uff1a\n\n![2](https://i.loli.net/2020/10/12/Kz8oM9vImnDCsSE.png)\n\n\u8fd8\u6709\u4e00\u79cd $l_2$ \u53ea\u6709\u4e00\u4e2a\u7aef\u70b9 $\\in$ $l_1$ \u7684\u60c5\u51b5\u2014\u2014\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u4f46\u4e0d\u662f\u5b8c\u5168\u8986\u76d6 $\\Rightarrow$ \u533a\u95f4\u6700\u5c0f\u503c\u53ef\u4ee5\u4e0d\u4e00\u6837\u4e5f\u53ef\u4ee5\u4e00\u6837\u3002\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n\n- \u4e24\u533a\u95f4**\u65e0\u4ea4\u96c6**\uff0c\u4ed6\u4eec\u7684\u6700\u5c0f\u503c\u4e0d\u5e94\u8be5\u76f8\u540c\u3002\n\n- \u4e00\u4e2a\u533a\u95f4**\u88ab**\u5927\u533a\u95f4**\u5b8c\u5168\u8986\u76d6**\uff0c\u5b83\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u5927\u4e8e\u7b49\u4e8e\u5927\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8fd9\u9053\u9898\u7684\u5224\u5b9a\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u5224\u5b9a\u95ee\u9898\uff0c\u662f\u5426\u51fa\u73b0\u77db\u76fe\u6211\u4eec\u901a\u8fc7\u533a\u95f4\u8986\u76d6\u7684\u5173\u7cfb\u6765\u6c42\u3002\n\n\u6211\u4eec\u5c06\u533a\u95f4\u6700\u5c0f\u503c\u4ece\u5927\u5f80\u5c0f\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\u6bd4\u8f83\u5c0f\uff0c\u4f46\u5b83\u88ab\u5927\u533a\u95f4\u8986\u76d6\u4e86\uff08\u76f8\u5e94\u5730 \u8fd9\u4e2a\u5927\u533a\u95f4\u7684\u6700\u5c0f\u503c\u6bd4\u5b83\u5927\uff0c\u6392\u5728\u524d\u9762\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u5bf9\u52b2\uff1b\u5982\u679c\u679a\u4e3e\u5230\u51e0\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\u76f8\u540c\uff0c\u4f46\u4ed6\u4eec\u4e92\u4e0d\u76f8\u5e72\uff0c\u4e5f\u80fd\u63a8\u5bfc\u51fa\u77db\u76fe\u5173\u7cfb\u3002\u6240\u4ee5\u8fd9\u6837\u5904\u7406\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u8986\u76d6\u95ee\u9898\u3002\n\n![\u8fd8\u633a\u725b](https://i.loli.net/2020/10/12/3I2zXLHON7nscF6.png)\n\n\u597d\u5566\u6211\u4f1a\u505a\u5566\uff01\u628a $1$ \u5230 $q$ \u7684\u56de\u7b54\u6309 $val$ \u6392\u5e8f\uff0c\u518d\u8bb0\u4e00\u4e2a\u56de\u7b54\u7684\u7f16\u53f7 `q[i].id` \u641e\u641e\uff0c\u8fd9\u6837\u5c31\u80fd\u77e5\u9053\u5565\u65f6\u5019\u6709\u77db\u76fe\u4e86\uff01\n\nnaive!\n\n\u8fd9\u9053\u9898\u6c42\u7684\u662f\u6700\u65e9\u7684\u77db\u76fe\u51fa\u73b0\u65f6\u95f4\uff0c\u5982\u679c\u6392\u5e8f\u540e\u4e00\u4e2a $id=4$ \u7684\u533a\u95f4\u88ab $id=5$ \u7684\u533a\u95f4\u8986\u76d6\u4e14\u51fa\u73b0\u4e86\u77db\u76fe\uff0c\u80fd\u8bf4\u660e\u6700\u65e9\u7684\u77db\u76fe\u5728 $4$ \u5417\uff1f\u4e0d\u80fd\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u80fd\u77e5\u9053\u5728\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u6709\u77db\u76fe\uff0c\u4f46\u662f\u6ca1\u6cd5\u5b9a\u4f4d\u6700\u65e9\u7684\u77db\u76fe\u3002\u53c8\u56e0\u4e3a\u5728 $1-k$ \u7684\u53e5\u5b50\u4e2d\u6ca1\u6709\u77db\u76fe\uff0c$1-k'(k'\\le k)$ \u4e2d\u80af\u5b9a\u4e5f\u6ca1\u6709\u77db\u76fe\uff0c\u8fd9\u4e2a\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u6709\u5355\u8c03\u6027\u7684\u3002\u95ee\u9898\u53ea\u4f1a\u51fa\u73b0\u5728 \u6ca1\u6709\u95ee\u9898\u7684\u65f6\u95f4 \u4e4b\u540e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u8fd9\u4e2a\u65f6\u95f4 $k$\uff0c\u5982\u679c\u6ca1\u77db\u76fe\u90a3\u4e48\u4e8c\u5206\u540e\u9762\u7684\uff0c\u51fa\u73b0\u77db\u76fe\u5219\u5f80\u524d\u4e8c\u5206\u3002\n\n\u533a\u95f4\u8986\u76d6\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u533a\u95f4 set \u6765\u505a\u3002\u8fd9\u4e2a\u533a\u95f4\u80fd\u88ab\u5b8c\u6574\u67e5\u8be2\u5230\u5219\u8bf4\u660e\u88ab\u8986\u76d6\u4e86\u3002\u5982\u679c\u6709 $val$ \u76f8\u540c\u7684\u6211\u4eec\u66f4\u65b0\u4e00\u4e0b\u4ea4\u96c6\u548c\u5e76\u96c6\uff0c\u90fd\u6709\u4ea4\u96c6\u7684\u8bdd\u90a3\u80af\u5b9a\u6ca1\u4e8b\u4e86\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u6bb5\u7684\u5e76\u96c6 update \u5230\u6811\u4e0a\u3002\u8fd9\u4e2a\u65f6\u5019\u5b83\u4eec\u7684\u5e76\u96c6\u80af\u5b9a\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u533a\u95f4\u6bb5\u7684\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u533a\u95f4\u548c\u524d\u9762\u7684 $val$ \u76f8\u540c\u7684\u6ca1\u4ea4\u96c6\u5c31\u51fa\u9519\u4e86\u3002\u8981\u662f\u6ca1\u6709 $val$ \u76f8\u540c\u7684\u6211\u4eec\u5c31\u5224\u65ad\u4e00\u4e0b $q_i$ \u8fd9\u4e2a\u533a\u95f4\u6bb5\u80fd\u4e0d\u80fd\u88ab\u67e5\u5230\uff0c\u66f4\u65b0\u5c31\u66f4\u65b0\u5b83\u8fd9\u4e00\u6bb5\u5c31\u597d\u4e86\u3002\n\n\u6211\u611f\u89c9\u5e94\u8be5\u8bb2\u7684\u6bd4\u8f83\u8be6\u7ec6\u4e86\uff0c\u7ed3\u5408\u4ee3\u7801\u770b\u770b\u5e94\u8be5\u6bd4\u8f83\u597d\u61c2\u3002\n\n```cpp\nconst int inf = 1000000000;\n\ninline int read() {\n    register int x = 0, c = getchar();\n    bool f = 1;\n    for(; !isdigit(c); c = getchar()) f ^= c == '-';\n    for(; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n    return f ? x : -x;\n}\n\nstruct A {\n    int l, r, mn;\n    inline bool operator<(const A &rhs) const {\n        return mn == rhs.mn ? l < rhs.l : mn > rhs.mn; // \u6309 val \u6392\u5e8f\n    }\n} a[MAXN], b[MAXN];\n\nint n, m;\n\nstruct Node {\n    int sum, tag;\n} tr[MAXN * 4];\n\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\n\ninline void maintain(int p, int l, int r, int v) {\n    tr[p].sum = (r - l + 1) * v;\n    tr[p].tag = v; // segtree \u533a\u95f4set\n}\n\ninline void pushDw(int p, int l, int r) {\n    int mid = (l + r) >> 1;\n    maintain(ls(p), l, mid, tr[p].tag);\n    maintain(rs(p), mid + 1, r, tr[p].tag);\n    tr[p].tag = 0;\n}\n\nvoid update(int p, int l, int r, int ql, int qr, int v) {\n    if(ql > qr) return;\n    if(ql <= l && r <= qr) return maintain(p, l, r, v);\n    if(tr[p].tag) pushDw(p, l, r);\n    int mid = (l + r) >> 1;\n    if(ql <= mid) update(ls(p), l, mid, ql, qr, v);\n    if(qr > mid) update(rs(p), mid + 1, r, ql, qr, v);\n    tr[p].sum = tr[ls(p)].sum + tr[rs(p)].sum;\n}\n\nint query(int p, int l, int r, int ql, int qr) {\n    if(ql > qr) return 0;\n    if(ql <= l && r <= qr) return tr[p].sum;\n    if(tr[p].tag) pushDw(p, l, r);\n    int mid = (l + r) >> 1, ret = 0;\n    if(ql <= mid) ret += query(ls(p), l, mid, ql, qr);\n    if(qr > mid) ret += query(rs(p), mid + 1, r, ql, qr);\n    return ret;\n}\n\ninline bool chk(int x) {\n    memset(tr, 0, sizeof tr);\n    for(int i = 1; i <= x; ++i)\n        b[i] = a[i];\n    sort(b + 1, b + x + 1);\n    int ul, ur, nl, nr;\n    for(int i = 1; i <= x;) {\n        int j = i;\n        while(j <= x && b[j].mn == b[i].mn) ++j;\n        ul = nl = b[i].l, ur = nr = b[i].r; // ul ur \u5e76\u96c6\uff1bnl nr \u4ea4\u96c6\n        for(int k = i + 1; k < j; ++k) { // \u5982\u679cj=i\u5f00\u59cb\u5f80\u540e\u626b \u6700\u540ei=j\u66f4\u65b0i\u7684\u8bdd\uff0c\u6ce8\u610f\u5faa\u73af\u8303\u56f4\n            ul = min(b[k].l, ul);\n            ur = max(b[k].r, ur);\n            nl = max(b[k].l, nl);\n            nr = min(b[k].r, nr);\n        }\n        if(nl > nr) return 0;\n        if(query(1, 1, n, nl, nr) == nr - nl + 1) return 0;\n        update(1, 1, n, ul, ur, 1); // \u5982\u679c\u6ca1\u6709\u76f8\u540c\u7684\u8fd9\u6837\u5199\u5c31\u76f8\u5f53\u4e8e bi.l bi.r\n        i = j;\n    }\n    return 1;\n}\n\nint main(void) {\n    n = read(), m = read();\n    for(int i = 1; i <= m; ++i)\n        a[i].l = read(), a[i].r = read(), a[i].mn = read();\n    int l = 1, r = m + 1;\n    while(l < r) {\n        int mid = (l + r) >> 1;\n        if(chk(mid)) l = mid + 1;\n        else r = mid;\n    }\n    printf(\"%d\\n\", l == m + 1 ? 0 : l);\n    // \u6ce8\u610f\u8fd9\u91cc\uff0c\u8fd9\u79cd\u4e8c\u5206\u5199\u6cd5 (l + r) / 2 \u662f\u53d6\u4e0d\u5230 r \u7684\uff0c\u4f46\u662f\u8fd9\u91cc r=m \u662f\u53ef\u4ee5\u6210\u4e3a\u7b54\u6848\u7684\n    // \u6240\u4ee5\u8fd9\u79cd\u5199\u6cd5\u9700\u8981\u7531\u539f\u6765\u7684 [1,x] \u6269\u5c55\u5230 [1,x+1]\uff0cx \u4e3a r \u7684\u53d6\u503c\u70b9\n    return 0;\n}\n\n```",
        "postTime": 1602471626,
        "uid": 80358,
        "name": "Rbu_nas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "## \u9898\u89e3 P2898 \u3010[USACO08JAN]Haybale Guessing G\u3011\n\n[\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2898)\n\n\u6211\u4eec\u5148\u6765\u8003\u8651\u4e00\u4e0b\uff0c\u4ec0\u4e48\u6837\u7684\u60c5\u51b5\u4f1a\u77db\u76fe\uff1f\n\n\u9898\u76ee\u4e2d\u8bf4\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u4e0d\u540c\u3002\u90a3\u5c31\u8bf4\u660e\u540c\u4e00\u4e2a\u6570\u6240\u5bf9\u5e94\u7684\u51e0\u4e2a\u533a\u95f4\u5fc5\u5b9a\u6709\u4ea4\u96c6\u3002\u90a3\u4e48\uff0c\u6ca1\u6709\u4ea4\u96c6\u5fc5\u7136\u662f\u77db\u76fe\u7684\u3002\u5982\u4e0b\u56fe\u5c31\u662f\u77db\u76fe\u7684\u60c5\u51b5\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ystri4xp.png)\n\n\u8fd8\u6709\uff0c\u5927\u533a\u95f4\u5185\u6709\u6570\u66f4\u5c0f\u7684\u533a\u95f4\uff0c\u90a3\u8fd9\u5fc5\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u5982\u4e0b\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0gk71jtp.png)\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e00\u5171\u6709\u4e24\u79cd\u60c5\u51b5\u4f1a\u4ea7\u751f\u77db\u76fe\uff1a\n1. \u6570\u76f8\u540c\u7684\u533a\u95f4\u65e0\u4ea4\u96c6\n1. \u5927\u6570\u7684\u533a\u95f4\u5185\u6709\u8f83\u5c0f\u6570\u7684\u533a\u95f4\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u5982\u4f55\u5224\u65ad\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5224\u65ad\u4ea4\u96c6\u3002\u8fd9\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4f5c\u8fc7\u591a\u7684\u89e3\u91ca\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u8003\u8651\u3002\u6838\u5fc3\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u4e0a\u5b58\u5728\u70b9\u88ab\u8f83\u5927\u7684\u533a\u95f4\u8986\u76d6\uff0c\u90a3\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5e76\u67e5\u96c6\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u70b9\u90fd\u6307\u5411\u533a\u95f4\u6700\u53f3\u4fa7\u7684\u7aef\u70b9\u3002\u8fd9\u6837\uff0c\u91cc\u9762\u5c0f\u533a\u95f4\u7684\u70b9\u6240\u6307\u5411\u7684\u989d\u70b9\uff0c\u5c31\u4f1a\u4e0d\u5728\u8fd9\u4e2a\u5c0f\u533a\u95f4\u91cc\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u6700\u540e\uff0c\u5224\u65ad\u662f\u7b2c\u51e0\u53e5\u8bdd\u65f6\uff0c\u53ea\u9700\u8981\u4e8c\u5206\u4e00\u4e2a $\\mathrm{mid}$\uff0c\u53bb\u5224\u65ad\u7b2c $1$ \u53e5\u5230\u7b2c $\\mathrm{mid}$ \u53e5\u8bdd\u662f\u5426\u90fd\u5408\u6cd5\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662f AC \u4ee3\u7801\n```cpp\n/*\nluogu P2898\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 0x7f7f7f7f;\n\nint n,m;\nint lj,rj,lb,rb;\nstruct quer{\n\tint l,r,f;\n}a[25005],b[25005];\nstruct dsu{\n\tint fa[1000005];\n\tvoid init()\n\t{\n\t\tfor(int i=1;i<=n+2;fa[i]=i,i++);\n\t}\n\tint find_(int x)\n\t{\n\t\treturn x==fa[x] ? x : fa[x]=find_(fa[x]);\n\t}\n}c;\n\nbool cmp(quer a,quer b)\n{\n\treturn a.f==b.f ? a.l<b.l : a.f>b.f;\n}\n\nbool legal(int m)\n{\n\tc.init();\n\tfor(int i=1;i<=m;a[i]=b[i],i++);\n\tsort(a+1,a+1+m,cmp);\n\ta[m+1].f = 0;\n\tint num=0;\n\tfor(int i=1;i<=m+1;i++)\n\t{\n\t\tif(a[i].f!=num)\n\t\t{\n\t\t\tif(i!=1)\n\t\t\t{\n\t\t\t\tif(lj>rj)\n\t\t\t\t\treturn false;\n\t\t\t\tif(c.find_(lj)>rj)\n\t\t\t\t\treturn false;\n\t\t\t\tfor(int j=c.find_(lb);j<=rb;j=c.find_(j+1))\n\t\t\t\t\tc.fa[j] = c.fa[j+1];\n\t\t\t}\n\t\t\tnum = a[i].f;\n\t\t\tlj = rb = -INF, rj = lb = INF;\n\t\t}\n\t\tif(a[i].f==num)\n\t\t{\n\t\t\tlj = max(lj,a[i].l), rj = min(rj,a[i].r);\n\t\t\tlb = min(lb,a[i].l), rb = max(rb,a[i].r);\n\t\t}\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;cin>>b[i].l>>b[i].r>>b[i].f,i++);\n\tint l=1,r=m,ans=1;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(legal(mid))\n\t\t{\n\t\t\tans = mid;\n\t\t\tl = mid+1;\n\t\t}\n\t\telse\n\t\t\tr = mid-1;\n\t}\n\tcout<<(ans==m ? 0 : ans+1)<<endl;\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6 AC \u6109\u5feb\uff01",
        "postTime": 1595322464,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]Haybale Guessing G\u3011"
    },
    {
        "content": "# \u9898\u89e3\n\n\u4e8c\u5206+\u7ebf\u6bb5\u6811\n\u6709\u4eba\u7528\u795e\u5947\u59ff\u52bf\u306e\u5e76\u67e5\u96c6\u6765\u4ee3\u66ff\u7ebf\u6bb5\u6811\u6765\u641e..\u4f46\u662f\u6211\u4e0d\u61c2QwQ\n\u4e8e\u662f\u6211\u5c31\u6253\u4e86\u7ebf\u6bb5\u6811\u3002\u3002\u4ee3\u7801\u8ff7\u306e\u957f&\u8ff7\u306e\u6162\u3002\u3002orzorz\n\u6211\u4eec\u8981\u5148\u60f3\u77db\u76fe\u4e4b\u5904\u4f1a\u5728\u54ea\u91cc\u3002\n\n1\u3001\u6ca1\u6709\u4ea4\u96c6\u7684\u4e24\u4e2a\u533a\u95f4\u51fa\u73b0\u4e86\u76f8\u540c\u7684\u6700\u5c0f\u503cx\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6570\u5404\u4e0d\u76f8\u540c\u3002\u5373x\u7684\u4ea4\u96c6\u4e0d\u5408\u6cd5\u6216\u8005\u8bf4\u6ca1\u6709\u4ea4\u96c6\u3002\n\n2\u3001\u5df2\u77e5\u67d0\u6bb5\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3ax\uff0c\u4f46\u662f\u8fd9\u6bb5\u533a\u95f4\u4e2d\u7684\u67d0\u4e2a\u5b50\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3ay\uff0c\u800cy<x\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5df2\u77e5\u7684\u6761\u4ef6\u5c31\u77db\u76fe\u4e86\u3002\u5373x\u6240\u5728\u533a\u95f4\u7684\u5e76\u96c6\u5305\u542b\u4e86y\u6240\u5728\u533a\u95f4\u7684\u4ea4\u96c6\u7684\u8bdd\u5c31\u77db\u76fe\u4e86(x>y)\u3002\n\n\u4e8c\u5206\u7b54\u6848\uff0c\u628a\u8be2\u95ee\u6392\u5e8f\u3002\n\n\u600e\u4e48\u6392\uff1f\u6309\u503c\u4ece\u5927\u5230\u5c0f\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u5904\u7406\u77db\u76fe2\u3002\n\n\u628ax\u7684\u533a\u95f4\u90fd\u627e\u5230\uff0c\u5f97\u5230\u5176\u4ea4\u96c6\u548c\u5e76\u96c6\u7684\u533a\u95f4\u3002\n\u76f4\u63a5\u7528\u4ea4\u96c6\u7684\u533a\u95f4\u5224\u65ad\u77db\u76fe1\u54af\u3002\n\n\u5bf9\u4e8e\u77db\u76fe\u4e8c\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6807\u8bb0\u4e0b\u5728\u54ea\u6bb5\u533a\u95f4\uff08\u7528\u5e76\u96c6\u6807\u8bb0\uff09\u5df2\u7ecf\u77e5\u9053\u6700\u5c0f\u503c\u3002\n\n\u56e0\u4e3a\u4ece\u5927\u5230\u5c0f\u6392\u7684\u5e8f\uff0c\u6240\u4ee5\u66f4\u65b0\u5728\u7ebf\u6bb5\u6811\u91cc\u6807\u8bb0\u7684\u90fd\u662f\u6bd4\u73b0\u5728\u7684\u6570\u5927\u7684\u6570\u6807\u8bb0\u7684\u3002\u90a3\u4e48\u5982\u679c\u67e5\u8be2\u5230\u73b0\u5728\u8fd9\u4e2a\u6570\u7684\u4ea4\u96c6\u533a\u95f4\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u5c31\u662f\u77db\u76fe2\u554a\u6709\u77db\u76fe\u4e86\u3002\n\u7136\u540e\uff0c\uff0c\uff0c\u5c31\u8fd9\u6837\u554a\u3002\u3002\u3002\n\n```cpp\n#include<cstdio>  \n#include<cstdlib>  \n#include<cstring>  \n#include<iostream>  \n#include<algorithm>  \nusing namespace std;  \n#define maxn 2000010  \n#define Q 30000  \n  \nstruct node {int l,r,c;}a[Q],b[Q];  \nbool cmp(node x,node y){return x.c>y.c;}  \nstruct tree  \n{  \n    int l,r,lc,rc;bool c;  \n}tr[maxn];int len,n;  \nvoid bt(int l,int r)  \n{  \n    len++;int now=len;  \n    tr[now].l=l;tr[now].r=r;  \n    tr[now].lc=tr[now].rc=-1;  \n    tr[now].c=0;  \n    if (l<r)  \n    {  \n        int mid=(l+r)>>1;  \n        tr[now].lc=len+1;bt(l,mid);  \n        tr[now].rc=len+1;bt(mid+1,r);  \n    }  \n}  \nvoid change(int now,int l,int r)  \n{  \n    if (tr[now].l==l && tr[now].r==r) {tr[now].c=1;return;}  \n    int mid=(tr[now].l+tr[now].r)>>1,lc=tr[now].lc,rc=tr[now].rc;  \n    if (r<=mid) change(lc,l,r);  \n    else if (l>mid) change(rc,l,r);  \n    else change(lc,l,mid),change(rc,mid+1,r);  \n    if (!tr[now].c) tr[now].c=(tr[lc].c&tr[rc].c);  \n}  \nbool query(int now,int l,int r)  \n{  \n    if (tr[now].c) return true;  \n    if (tr[now].l==l && tr[now].r==r) return tr[now].c;  \n    int mid=(tr[now].l+tr[now].r)>>1,lc=tr[now].lc,rc=tr[now].rc;  \n    if (r<=mid) return query(lc,l,r);  \n    else if (l>mid) return query(rc,l,r);  \n    else return (query(lc,l,mid)&query(rc,mid+1,r));  \n}  \nint mymin(int x,int y) {return (x<y)?x:y;}  \nint mymax(int x,int y) {return (x>y)?x:y;}  \nbool check(int mid)  \n{  \n    int i,j,k,l1,l2,r1,r2;  \n    for (i=1;i<=n*2;i++) tr[i].c=0;  \n    for (i=1;i<=mid;i++) b[i]=a[i];  \n    sort(b+1,b+1+mid,cmp);  \n    for (i=1;i<=mid;)  \n    {  \n        for (j=i;j<=mid && b[j].c==b[i].c;j++);  \n        l1=l2=b[i].l;r1=r2=b[i].r;//[l1,r1]\u662f\u4ea4\u96c6\u533a\u95f4 [l2,r2]\u662f\u5e76\u96c6\u533a\u95f4  \n        for (k=i+1;k<j;k++)  \n        {  \n            l1=mymin(l1,b[k].l);  \n            l2=mymax(l2,b[k].l);  \n            r1=mymax(r1,b[k].r);  \n            r2=mymin(r2,b[k].r);  \n        }  \n        if (l2>r2) return true;  \n        if (query(1,l2,r2)) return true;  \n        change(1,l1,r1);i=j;  \n    }return false;  \n}  \nint main()  \n{  \n    freopen(\"bales.in\",\"r\",stdin);  \n    freopen(\"bales.out\",\"w\",stdout);  \n    int q,i,l,r,bk;  \n    scanf(\"%d%d\",&n,&q);  \n    len=0;bt(1,n);  \n    for (i=1;i<=q;i++)  \n        scanf(\"%d%d%d\",&a[i].l,&a[i].r,&a[i].c);  \n    l=1;r=q;bk=0;  \n    while (l<=r)//\u4e8c\u5206  \n    {  \n        int mid=(l+r)>>1;  \n        if (check(mid)) {bk=mid;r=mid-1;}  \n        else l=mid+1;  \n    }  \n    printf(\"%d\\n\",bk);  \n    return 0;  \n}\n```\n\n\n",
        "postTime": 1579411043,
        "uid": 188823,
        "name": "APOI",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "[P2898](https://www.luogu.com.cn/problem/P2898)\n\n\u5e76\u67e5\u96c6\u505a\u6cd5\u786e\u5b9e\u5f88\u5de7\u5999\uff0c\u4f46\u5b9e\u9645\u4e0a\u6700\u4f18\u89e3\u662f**\u7ebf\u6bb5\u6811**\n\u76ee\u524d\u672c\u4eba\u6700\u4f18\u89e3\u7b2c\u4e09\uff0c\u6b64\u5904\u8bb2\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\n\n\n\u9996\u5148\u4e8c\u5206\u4e0d\u518d\u8d58\u8ff0\n\n\u77db\u76fe\u7684\u6761\u4ef6\n=\n1. \u540c\u4e00\u6570\u503c\uff0c\u591a\u6b21\u51fa\u73b0\uff0c\u51e0\u4e2a\u533a\u95f4\u95f4\u4ea4\u96c6\u4e3a\u7a7a\u96c6\uff08\u56e0\u4e3a\u6bcf\u4e2a\u6570\u503c\u5b58\u5728\u4e00\u4e2a\uff09\n2. \u4e00\u4e2a\u6570\u503c\u51fa\u73b0\u65f6\uff0c\u5b83\u7684\u533a\u95f4\u5df2\u7ecf\u88ab\u8f83\u5927\u503c\u7684\u533a\u95f4\u8986\u76d6\uff08\u6b64\u65f6\u672c\u6570\u503c\u653e\u5728\u533a\u95f4\u5185\u4efb\u610f\u4f4d\u7f6e\uff0c\u90fd\u4f1a\u4f7f\u4e4b\u524d\u7ed9\u51fa\u7684\u4fe1\u606f\u4e0d\u6210\u7acb\uff09\n\n\u5177\u4f53\u7684\u64cd\u4f5c\uff1a\n=\n1. \u9884\u5904\u7406 \u5bf9\u6570\u503c\u79bb\u6563\u5316\n2. \u5148\u628a\u91cd\u590d\u6570\u503c\u5904\u7406\uff0c\u6c42\u4ea4\u96c6\u548c\u5e76\u96c6\uff08\u5b83\u7684\u4ea4\u96c6\u662f\u5b83**\u53ef\u4ee5\u5b58\u5728\u7684\u533a\u95f4**\uff0c\u5b83\u7684\u5e76\u96c6\u662f\u5b83**\u53ef\u4ee5\u8986\u76d6\u7684\u533a\u95f4**\uff09\uff0c\u82e5\u65e0\u4ea4\u96c6\u5219\u77db\u76fe\n3. \u5bf9\u4e8c\u5206\u53d6\u5b9a\u7684\u524d K \u6761\u4fe1\u606f\u8fdb\u884c\u6392\u5e8f\uff0c\u5148\u5904\u7406\u8f83\u5927\u6570\u503c\uff08\u56e0\u4e3a\u6bcf\u4e2a\u6570\u503c\u4f1a\u4e0d\u4f1a\u88ab\u8986\u76d6\u53ea\u8ddf\u5927\u4e8e\u5b83\u7684\u6570\u6709\u5173\uff09\n4. \u8bbf\u95ee\u5230\u67d0\u6761\u4fe1\u606f\u65f6\uff0c\u5148\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u672c\u533a\u95f4**\u662f\u5426\u6709\u4f4d\u7f6e\u672a\u88ab\u8986\u76d6**\uff0c \u82e5\u6709\u5219\u8be5\u6570\u503c\u8fd8\u6709\u751f\u5b58\u7a7a\u95f4\uff0c\u82e5\u65e0\u8fd4\u56de 0 \uff0c\u7136\u540e\u4fee\u6539\u5b83\u7684\u533a\u95f4\n\n\u5b58\u50a8\n-\n\u4f17\u6240\u5468\u77e5\u8fd9\u662f\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u95ee\u9898\uff0c\u4f46\u662f**\u4e00\u4e2a\u8f83\u5c0f\u503c\u7684\u533a\u95f4\u88ab\u54ea\u4e2a\u503c\u8986\u76d6\u5e76\u4e0d\u91cd\u8981**\uff0c \u6240\u4ee5\u7ebf\u6bb5\u6811\u91cc\u53ea\u9700\u8981\u5b58 bool \uff0c \u88ab\u8986\u76d6\u5219\u4e3a \u771f \uff0c\u5426\u5219\u4e3a \u5047\n\n\u7136\u540e\uff0c\u56e0\u4e3a\u8981\u67e5\u8be2\u7684\u662f\u662f\u5426\u6709**\u672a\u88ab\u8986\u76d6\u7684\u4f4d\u7f6e**\uff0c \u6240\u4ee5\u5b58\u7684\u662f\u533a\u95f4\u6240\u6709\u6570\u503c\u7684\u4e0e, \u4e5f\u5c31\u662f\n$$t[k] = t[lt]\\,\\&\\,t[rt]$$\n\n\u4fee\u6539&\u67e5\u8be2\n-\n0. \u7528\u4ea4\u96c6\u67e5\u8be2\uff0c\u7528\u5e76\u96c6\u4fee\u6539\n1. \u4fee\u6539\u65f6\u7684\u64cd\u4f5c\u5168\u90e8\u90fd\u662f  $t[k]\\,\\|\\,=1$ \n\u56e0\u4e3a\u9012\u5f52\u65f6\u5f53\u524d\u6811\u4e0a\u8282\u70b9\u5bf9\u5e94**\u533a\u95f4\u8d8a\u6765\u8d8a\u5c0f**\uff0c\u6240\u4ee5\u82e5\u5f53\u524d\u8282\u70b9\u503c\u4e3a \u771f \uff0c\u518d\u5f80\u4e0b\u4e5f\u90fd\u662f \u771f \uff0c\u6240\u4ee5\u5c31**\u4e0d\u7528\u518d\u5f80\u4e0b\u9012\u5f52**\n2. \u67e5\u8be2\u65f6\u540c\u4e0a\u6761\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u662f \u771f \uff0c\u90a3\u4e48\u4e0d\u518d\u9012\u5f52\n3. \u5f53\u524d\u8282\u70b9\u503c\u4e3a \u771f \uff0c\u8bf4\u660e\u5b83\u5b50\u6811\u8282\u70b9\u90fd\u4f1a\u662f \u771f \uff0c\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e0e \u5ef6\u8fdf\u6807\u8bb0 \u4e0d\u662f\u4e00\u6837\u5417\uff1f\u6240\u4ee5\u8282\u70b9\u503c\u53ef\u4ee5\u517c\u804c \u5ef6\u8fdf\u6807\u8bb0\n\n\u8bb0\u5f97\u5efa\u6811\u521d\u59cb\u5316\uff08\u4e0d\u7528 pushup \uff09\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<vector>\n#include<algorithm>\n#define reg register int\n#define ttT template <typename T>\n#define EL puts(\"Elaina\")\nusing namespace std;\ninline char gc(){\n    static char buf[1<<20],*p1,*p2;\n    if(p1==p2){p1=buf,p2=buf+fread(buf,1,1<<20,stdin);if(p1==p2)return EOF;}\n    return *p1++;\n}\nttT inline void read(T &x){\n    x=0;int f=1;char ch=gc();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=gc();}\n    x*=f;\n}\nttT inline void write(T x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar((x%10)^48);\n}\nconst int maxn=1e6+3,maxm=25000+3,INF=0x7fffffff;\nint n,m,b[maxm];\nstruct qestion{\n    int l,r,v;\n}a[maxm];\nstruct nump{\n    int l,r;//\u4ea4\n    int l2,r2;//\u5e76\n}c[maxm];//\u4e0b\u6807\u4e3a\u6570\u503c\uff08\u8349\u5806\u6570\uff09\n#define lt (k<<1)\n#define rt (k<<1|1)\nstruct tree{\n    int l,r;\n    bool v;\n}t[maxn<<2];\ninline void pushup(int k){\n    t[k].v=t[lt].v&t[rt].v;\n}\ninline void pushdown(int k){\n    if(t[k].v)t[lt].v=t[rt].v=true;\n}\ninline void build(int k,int l,int r){\n    t[k].l=l,t[k].r=r,t[k].v=false;\n    if(l==r)return;\n    else{\n        int mid=(l+r)>>1;\n        build(lt,l,mid);\n        build(rt,mid+1,r);\n    }\n}\ninline bool query(int L,int R,int k){\n    if(t[k].v)return true;\n    if(L<=t[k].l&&t[k].r<=R)return t[k].v;\n    else{\n        pushdown(k);\n        bool ans=true;\n        if(L<=t[lt].r)ans&=query(L,R,lt);\n        if(R>=t[rt].l)ans&=query(L,R,rt);\n        return ans;\n    }\n}\ninline void updata(int L,int R,int k){\n    if(t[k].v)return;\n    if(L<=t[k].l&&t[k].r<=R)t[k].v=true;\n    else{\n        pushdown(k);\n        if(L<=t[lt].r)updata(L,R,lt);\n        if(R>=t[rt].l)updata(L,R,rt);\n        pushup(k);\n    }\n}\n/*\n1\u3001\u76f8\u540c\u6570\u5b57\uff0c\u591a\u6b21\u51fa\u73b0\uff0c\u67d0\u4e24\u4e2a\u533a\u95f4\u4e0d\u91cd\u53e0\n2\u3001\u4fee\u6539\u540e\u5931\u53bb\u67d0\u4e2a\u6570\u503c\n\u5bf9\u6570\u503c \u79bb\u6563\u5316\n\u4fee\u6539\uff1a\u8f83\u5927\u503c\u8986\u76d6\u8f83\u5c0f\u503c\n*/\ninline bool check(int k){\n    if(!k)return true;\n    memset(c,0,sizeof(c));\n    vector <int> apr;//\u51fa\u73b0\u8fc7\u7684\u6570\u503c\n    int minv=INF,maxv=-INF;\n    for(reg i=1;i<=k;++i){\n        int v=a[i].v;\n        minv=min(minv,a[i].l),maxv=max(maxv,a[i].r);//\u9700\u8981\u5efa\u6811\u7684\u533a\u95f4\n        if(!c[v].l){\n            c[v].l=c[v].l2=a[i].l,c[v].r=c[v].r2=a[i].r;\n            apr.push_back(v);\n        }\n        else{\n            c[v].l=max(c[v].l,a[i].l),c[v].r=min(c[v].r,a[i].r);\n            if(c[v].l>c[v].r)return false;\n            c[v].l2=min(c[v].l2,a[i].l),c[v].r2=max(c[v].r2,a[i].r);\n        }\n    }\n    sort(apr.begin(),apr.end());\n    build(1,minv,maxv);\n    for(reg i=apr.size()-1;i>=0;--i){\n        int v=apr[i];\n        if(query(c[v].l,c[v].r,1))return false;\n        updata(c[v].l2,c[v].r2,1);\n    }\n    return true;\n}\nvoid solve(){\n    read(n),read(m);\n    for(reg i=1;i<=m;++i){\n        read(a[i].l),read(a[i].r),read(a[i].v);\n        b[i]=a[i].v;\n    }\n    sort(b+1,b+m+1);\n    int lb=unique(b+1,b+m+1)-b-1;\n    for(reg i=1;i<=m;++i)\n        a[i].v=lower_bound(b+1,b+lb+1,a[i].v)-b;\n    int l=0,r=m,mid,ans;\n    while(l<=r){\n        mid=(l+r)>>1;\n        if(check(mid))ans=mid,l=mid+1;\n        else r=mid-1;\n    }\n    if(ans==m)ans=-1;\n    write(ans+1),puts(\"\");\n}\nint main(){\n    solve();\n    return 0;\n}\n```\n",
        "postTime": 1642384734,
        "uid": 280633,
        "name": "Muel_imj",
        "ccfLevel": 7,
        "title": "P2898 Hayble Guessing"
    },
    {
        "content": "\u51fa\u73b0\u77db\u76fe\u7684\u533a\u95f4\u7b26\u5408\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\uff1a\n\n1.\u9898\u76ee\u4e2d\u7684\u4e24\u4e2a\u5e72\u8349\u5806\u6ca1\u6709\u4efb\u4f55\u6570\u91cf\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\u5e76\u4e14\u5b83\u4eec\u7684\u6700\u5c0f\u503c\u76f8\u540c\uff0c\u5219\u8fd9\u4e24\u4e2a\u533a\u95f4\u4ea7\u751f\u77db\u76fe\n\n2.\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5305\u542b\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u88ab\u5305\u542b\u7684\u533a\u95f4\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u5219\u4e24\u4e2a\u533a\u95f4\u4ea7\u751f\u77db\u76fe\n\n\n\n\u8003\u8651\u5bf9\u539f\u5148\u95ee\u7b54\u7684\u987a\u5e8f\u8fdb\u884c\u4e8c\u5206\u7b54\u6848\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5206\u51fa\u7684mid\u4f5c\u5982\u4e0b\u5904\u7406\uff1a\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u77db\u76fe2\uff0c\u5c06\u4ece1\u5230mid\u7684\u6bcf\u4e2a\u533a\u95f4\u7684\u503c\u6309\u7167\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u6392\u5e8f\n\n\n\u5bf9\u4e8e\u503c\u76f8\u540c\u7684\u533a\u95f4\uff0c\u6c42\u51fa\u5e76\u96c6\u548c\u4ea4\u96c6\u7684\u8303\u56f4\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5e76\u96c6\uff0c\u5219mid\u4e0d\u53ef\u884c\n\n\n\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u5c06\u4ea4\u96c6\u7684\u533a\u95f4\u8986\u76d6\u4e3a1\n\n\n\u67e5\u8be2\u5e76\u96c6\u7684\u533a\u95f4\u662f\u5426\u88ab\u8986\u76d6\u4e3a1\uff0c\u5982\u679c\u662f\uff0c\u5219mid\u4e0d\u53ef\u884c\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define MAXN 1000050\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct Node\n{\n    int l,r,val;\n    friend bool operator <(Node a,Node b){return a.val>b.val;}\n}a[25005],b[25005];\nstruct Tree\n{\n    int l,r;\n    bool c;\n}s[MAXN*4];\nint n,m;\ninline void build(int l,int r,int pos)\n{\n    s[pos].l=l,s[pos].r=r;\n    s[pos].c=0;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    build(l,mid,pos<<1);\n    build(mid+1,r,pos<<1|1);\n}\ninline void clear(int l,int r,int pos)\n{\n    s[pos].c=0;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    clear(l,mid,pos<<1);\n    clear(mid+1,r,pos<<1|1);\n}\ninline void update(int l,int r,int pos)\n{\n    if(l==s[pos].l&&s[pos].r==r){s[pos].c=1;return;}\n    int mid=(s[pos].l+s[pos].r)>>1;\n    if(r<=mid) update(l,r,pos<<1);\n    else if(l>mid) update(l,r,pos<<1|1);\n    else update(l,mid,pos<<1),update(mid+1,r,pos<<1|1);\n    if(!s[pos].c) s[pos].c=(s[pos<<1].c&s[pos<<1|1].c);\n}\ninline bool query(int l,int r,int pos)\n{\n    if(s[pos].c) return 1;\n    if(l==s[pos].l&&s[pos].r==r) return s[pos].c;\n    int mid=(s[pos].l+s[pos].r)>>1;\n    if(r<=mid) return query(l,r,pos<<1);\n    else if(l>mid) return query(l,r,pos<<1|1);\n    else return (query(l,mid,pos<<1)&query(mid+1,r,pos<<1|1));\n}\nbool check(int mid)\n{\n    clear(1,n,1);\n    for(int i=1;i<=mid;i++) b[i]=a[i];\n    sort(b+1,b+mid+1);\n    int l1,l2,r1,r2,j;\n    for(int i=1;i<=mid;i=j)\n    {\n        j=i;\n        while(j<=mid&&b[j].val==b[i].val) j++;\n        l1=r2=999999999;l2=r1=-1;\n        for(int k=i;k<j;k++)\n        {\n            l1=min(l1,b[k].l);\n            l2=max(l2,b[k].l);\n            r1=max(r1,b[k].r);\n            r2=min(r2,b[k].r);\n        }\n        if(l2>r2) return 0;\n        if(query(l2,r2,1)) return 0;\n        update(l1,r1,1);\n    }\n    return 1;\n}\nint main()\n{\n    n=read(),m=read();\n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n        a[i].l=read(),a[i].r=read(),a[i].val=read();\n    int l=1,r=m,ans=0;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid))\n        {\n            ans=mid;\n            l=mid+1;\n        }\n        else r=mid-1;\n    }\n    printf(\"%d\",(ans+1)%(m+1));\n}\n```cpp",
        "postTime": 1500639294,
        "uid": 38096,
        "name": "Position",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2898 \u3010[USACO08JAN]haybale\u731c\u6d4bHaybale Guessing\u3011"
    },
    {
        "content": "**\u9898\u610f\uff1a\u6709\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u6570\u7684\u957f\u4e3a $n$ \u7684\u6b63\u6574\u6570\u5e8f\u5217\uff0c\u4f9d\u6b21\u7ed9\u51fa $q$ \u4e2a\u6761\u4ef6\uff0c\u8868\u793a $[l,r]$ \u533a\u95f4\u7684\u6700\u5c0f\u503c\u4e3a $x$\uff0c\u6c42\u7b2c\u4e00\u4e2a\u4e0e\u4e4b\u524d\u7684\u6761\u4ef6\u77db\u76fe\u7684\u6761\u4ef6\u3002**\n\n## 1. \u5173\u4e8e\u8be5\u505a\u6cd5\n\n\u5b9e\u8d28\u4e0a\u672c\u9898\u8fd9\u79cd\u6c42\u6700\u65e9\u77db\u76fe\u5904\u7684\u7c7b\u578b\u65e0\u975e\u662f\u5e76\u67e5\u96c6\u6216\u8005\u4e8c\u5206\uff0c\u5176\u4e2d\u672c\u9898\u8fd0\u7528\u4e8c\u5206\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u4e00\u7cfb\u5217\u975e\u5e38\u7b80\u5355\u7684\u533a\u95f4\u8986\u76d6\u7684\u505a\u6cd5\uff0c\u800c\u533a\u95f4\u8986\u76d6\u95ee\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u505a\u4e5f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u8fd9\u6837\u6700\u4f18\u53ef\u4ee5\u8fbe\u5230 $O(q\\log q \\operatorname\\alpha(n))$ \u7684\u590d\u6742\u5ea6\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u7531\u4e8e\u5e38\u6570\u5c0f\u53ef\u4ee5\u8dd1\u51fa\u6700\u4f18\u89e3\uff0c\u5728\u601d\u7ef4\u4e0a\u4e5f\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\u3002\n\n\u4f46\u662f\u8fd9\u79cd\u601d\u8def\u7684\u6838\u5fc3\u662f\u6bcf\u6b21 `check` \u65f6\u628a\u524d\u7f00\u7684\u4e00\u90e8\u5206\u8be2\u95ee\u6309\u7167 $x$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u5904\u7406\u8986\u76d6\u3002\u800c\u5176\u5b9e\u672c\u9898\u53ef\u4ee5\u91c7\u7528\u79bb\u7ebf\u505a\u6cd5\u76f4\u63a5\u6574\u4f53\u6309 $x$ \u6392\u5e8f\uff0c\u7136\u540e\u5229\u7528 **\u533a\u95f4\u5386\u53f2\u6700\u503c** \u7684\u65b9\u5f0f\u5f97\u5230\u4e00\u4e2a\u533a\u95f4\u51fa\u73b0\u51b2\u7a81\u7684 **\u65f6\u95f4**\u3002\u8fd9\u79cd\u505a\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u4e0d\u4f7f\u7528\u4e8c\u5206\uff0c\u800c\u662f\u901a\u8fc7\u7ebf\u6bb5\u6811\u5904\u7406\u51fa\u82e5\u5e72\u6b21\u51b2\u7a81\u53d1\u751f\u7684\u65f6\u95f4\uff0c\u901a\u8fc7 **\u53d6 `min`** \u7684\u65b9\u5f0f\u66f4\u65b0\u7b54\u6848\u6700\u540e\u8f93\u51fa\u3002\u590d\u6742\u5ea6\u4e3a $O(q \\log n)$\u3002\n\n## 2. \u601d\u60f3\n\n\u672c\u9898\u4e00\u5171\u5b58\u5728 **\u4e09\u79cd\u77db\u76fe\u60c5\u51b5**\uff0c\u5206\u522b\u662f\uff1a\n\n1. \u6ce8\u610f\u5230\u8fd9\u4e2a\u6570\u7ec4\u5143\u7d20\u90fd\u4e0d\u8d85\u8fc7 $10^9$ \u5e76\u4e14\u6ca1\u6709\u91cd\u590d\u6570\uff0c\u90a3\u4e48\u5047\u5982 $x$ \u5f88\u5927\u4ee5\u81f3\u4e8e\u5c31\u7b97\u628a $x,x+1,...,10^9$ \u90fd\u653e\u5728\u7ed9\u5b9a\u533a\u95f4\u5185\u4e5f\u586b\u4e0d\u6ee1\u8fd9\u4e00\u533a\u95f4\u7684\u957f\u5ea6 $(r-l+1)$\uff0c\u663e\u7136\u81ea\u76f8\u77db\u76fe\u3002\n\n2. \u5bf9\u4e8e\u76f8\u540c $x$ \u503c\u7684\u82e5\u5e72\u4e2a\u6761\u4ef6\uff0c\u5b83\u4eec\u5b9e\u8d28\u4e0a\u9650\u5b9a\u4e86\u8fd9\u4e2a $x$ \u4e00\u5b9a\u51fa\u73b0\u5728\u5b83\u4eec\u7ed9\u5b9a\u533a\u95f4\u7684 **\u4ea4** \u533a\u95f4\u4e2d\uff08\u56e0\u4e3a\u6ca1\u6709\u91cd\u590d\uff09\uff0c\u90a3\u4e48\u5982\u679c\u51fa\u73b0\u6ca1\u6709\u4ea4\u96c6\u7684\u60c5\u51b5\u5373\u4e3a\u77db\u76fe\u3002\n\n3. \u8003\u8651\u5b83\u4eec\u7684\u4ea4\u96c6 $[l,r]$\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6 $(l',r',x')$ \u4f7f\u5f97 $x'>x$\uff0c\u90a3\u4e48 $[l`,r`]$ \u533a\u95f4\u5185\u90fd\u4e0d\u80fd\u653e $x$ \u8fd9\u4e2a\u6570\uff0c\u6211\u4eec\u79f0 $[l`,r`]$ \u88ab\u8986\u76d6\u3002\u5047\u5982 $[l,r]$ \u5168\u90e8\u88ab\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u5176\u5b83\u533a\u95f4\u8986\u76d6\uff0c\u90a3\u5c31\u6ca1\u6709\u4f4d\u7f6e\u653e\u7f6e $x$\uff0c\u77db\u76fe\u3002\n\n\u628a\u4e09\u79cd\u77db\u76fe\u60c5\u51b5\u5404\u6b21\u53d1\u751f\u7684\u65f6\u95f4\u53d6 $min$ \u5373\u53ef\u3002\n\n**\u9996\u5148\u8003\u8651\u6ca1\u6709\u91cd\u590d $x$ \u503c\u7684\u60c5\u51b5\u3002**\n\n\u6211\u4eec\u628a\u8be2\u95ee\u6392\u5e8f\uff0c\u6309 $x$ \u4ece\u5927\u5230\u5c0f\u8bbf\u95ee\u6bcf\u4e2a\u533a\u95f4\u3002\u8fd9\u6837\u4f9d\u6b21\u533a\u95f4\u67e5\u8be2\u5e76\u5728\u7ebf\u6bb5\u6811\u4e0a\u8986\u76d6 $[l,r]$\uff0c\u90a3\u4e48\u5982\u679c\u88ab\u67e5\u8be2\u7684\u533a\u95f4\u5168\u90e8\u88ab\u8986\u76d6\u8fc7\u5c31\u5b58\u5728\u77db\u76fe\u3002\n\n\u4f46\u662f\u95ee\u9898\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u53d1\u751f\u77db\u76fe\u7684\u5177\u4f53\u65f6\u95f4\u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u65f6\u5019\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u6709\u88ab\u8986\u76d6\u548c\u6ca1\u88ab\u8986\u76d6\u4e24\u79cd\u72b6\u6001\uff0c\u6ca1\u6709\u5145\u5206\u5229\u7528\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6743\u503c\u3002\u4e8e\u662f\u53ef\u4ee5**\u7528\u8282\u70b9\u7684\u6743\u503c\u7ef4\u62a4\u65f6\u95f4**\u3002\n\n\u8bbe\u4ece\u5927\u5230\u5c0f\u904d\u5386\u5230\u7b2c $j$ \u4e2a\u533a\u95f4\uff0c\u628a $[l,r]$ \u4fee\u6539\u6210\u8fd9\u4e2a\u6761\u4ef6**\u5728\u8f93\u5165\u987a\u5e8f\u4e2d**\u7684\u4e0b\u6807 $i$\uff0c\u7ef4\u62a4\u6bcf\u4e00\u4f4d\u7f6e\u7684\u5386\u53f2\u6700\u5c0f\u503c\uff0c**\u4e5f\u5c31\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u7b2c\u4e00\u6b21\u88ab\u6bd4\u5f53\u524d $x$ \u66f4\u5927\u7684\u533a\u95f4\u8986\u76d6\u7684\u65f6\u95f4**\uff0c\u521d\u59cb\u6bcf\u4e00\u4f4d\u7f6e\u662f $\u221e$\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4**\u5386\u53f2\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c**\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u7b2c\u4e00\u6b21\u51fa\u73b0\u65e0\u6cd5\u653e\u7f6e $x$ \u7684\u60c5\u51b5\u65f6\u95f4\uff0c\u5982\u679c\u4e0d\u662f $\u221e$ \u90a3\u4e48\u5b58\u5728\u77db\u76fe\uff0c\u518d\u7528\u8fd9\u4e2a\u6700\u5927\u503c\u4e0e\u7b2c $j$ \u4e2a\u533a\u95f4\u7684 $i$ \u503c\u53d6 $max$ \u7684\u503c\u66f4\u65b0 $ans$\u3002\n\n\u533a\u95f4\u5386\u53f2\u6700\u503c\u53ef\u4ee5\u7528 ~~\u5409\u8001\u5e08\u7ebf\u6bb5\u6811~~ _Segment Tree Beats_ \u6765\u7ef4\u62a4\u3002\u8fd9\u79cd\u505a\u6cd5\u5728 [\u6d1b\u8c37\u65e5\u62a5](https://www.luogu.com.cn/blog/Hakurei-Reimu/seg-beats) \u7b49\u6587\u7ae0\u4e2d\u6709\u8be6\u7ec6\u7684\u8bf4\u660e\u3002\n\n**\u8003\u8651\u6709\u91cd\u590d $x$ \u503c\u7684\u60c5\u51b5\u3002**\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u8003\u8651\u5230\u533a\u95f4 **\u4ea4** \u7684\u95ee\u9898\u3002\u53ef\u4ee5\u53d1\u73b0\u5047\u5982\u6309\u7167\u8f93\u5165\u987a\u5e8f\u5904\u7406\uff0c\u90a3\u4e48\u6bcf\u8bfb\u5165\u4e00\u4e2a\u6761\u4ef6 $(l,r,x)$\uff0c\u90fd\u610f\u5473\u7740\u80fd\u653e\u7f6e $x$ \u7684\u533a\u95f4\u7f29\u5c0f\u5230\u4e86 $[l,r]$ \u4e0e\u4e4b\u524d\u6240\u6709 $x$ \u76f8\u7b49\u7684\u533a\u95f4\u7684\u4ea4\u533a\u95f4\u3002\u4f46\u662f\u4ea4\u533a\u95f4\u5fc5\u987b**\u6309\u7167\u539f\u987a\u5e8f**\u9010\u6b65\u7f29\u5c0f\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec**\u4ee5 $x$ \u4ece\u5927\u5230\u5c0f\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u521d\u59cb\u4e0b\u6807 $i$ \u4ece\u5c0f\u5230\u5927\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u628a\u6761\u4ef6\u6392\u5e8f**\u3002\u904d\u5386\u6240\u6709\u6761\u4ef6\uff0c\u628a\u6240\u6709 $x$ \u76f8\u540c\u7684\u533a\u95f4\u6309\u7167\u987a\u5e8f\u7edf\u4e00\u5904\u7406\uff0c\u5e76\u4e14\u67e5\u8be2\u5f53\u524d\u4ea4\u533a\u95f4\u7684\u5386\u53f2\u6700\u503c\u3002\u628a\u8fd9\u4e2a\u503c\u548c\u5f53\u524d\u904d\u5386\u5230\u7684\u533a\u95f4\u7684 $i$ \u503c\u53d6 $min$\uff0c\u4e5f\u5c31\u662f\u8bf4\u5230 $i$ \u8fd9\u4e2a\u65f6\u5019\u4ea4\u533a\u95f4\u88ab\u7f29\u5c0f\u5230\u4e0d\u80fd\u518d\u5bb9\u7eb3 $x$ \u7684\u7a0b\u5ea6\u3002\n\n## 3. \u5b9e\u73b0\n\n1. \u533a\u95f4\u5386\u53f2\u6700\u503c\u7ebf\u6bb5\u6811\u7a7a\u95f4\u5e38\u6570\u8f83\u5927\uff0c\u6700\u597d\u7528\u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811\u6765\u538b\u7f29\u7a7a\u95f4\u3002\n2. \u4e3a\u4e86\u907f\u514d\u540c $x$ \u503c\u7684\u533a\u95f4\u4e92\u76f8\u8986\u76d6\u5f71\u54cd\u7b54\u6848\uff0c\u5e94\u8be5\u5728\u8fd9\u4e9b\u533a\u95f4\u90fd\u67e5\u8be2\u5b8c\u6bd5\u540e\u518d\u7edf\u4e00\u5904\u7406\u4fee\u6539\u3002\n\n```cpp\n#include<iostream>\n#include<fstream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#define inf 0x3f3f3f3f\nusing namespace std;\n\n//STB\nstruct SegTree {\n    int l,r,cnt=1;\n    int mx,ms,tag=-1;\n} t[2000010];\nint T,n,m,tot,ans=inf;\nvoid maintain(int p){\n    t[p].mx=max(t[t[p].l].mx,t[t[p].r].mx);\n    t[p].ms=max(t[t[p].l].ms,t[t[p].r].ms);\n    if(t[t[p].l].mx!=t[t[p].r].mx) t[p].ms=max(t[p].ms,min(t[t[p].l].mx,t[t[p].r].mx));\n    t[p].cnt=0;\n    t[p].cnt+=(t[p].mx==t[t[p].l].mx?t[t[p].l].cnt:0);\n    t[p].cnt+=(t[p].mx==t[t[p].r].mx?t[t[p].r].cnt:0);\n}\nint build(int l,int r){\n    int p=++tot;\n    if(l==r) t[p].mx=inf;\n    else {\n        int mid=(l+r)>>1;\n        t[p].l=build(l,mid);\n        t[p].r=build(mid+1,r);\n        maintain(p);\n    }\n    return p;\n}\nvoid update(int p,int k){\n    if(k<t[p].mx) t[p].mx=t[p].tag=k;\n}\nvoid spread(int p){\n    if(~t[p].tag){\n        update(t[p].l,t[p].tag);\n        update(t[p].r,t[p].tag);\n        t[p].tag=-1;\n    }\n}\nvoid change(int p,int pl,int pr,int l,int r,int x){\n    if(pl>r||pr<l||x>=t[p].mx) return;\n    else if(l<=pl&&pr<=r&&x>t[p].ms) update(p,x);\n    else {\n        spread(p);\n        int mid=(pl+pr)>>1;\n        if(l<=mid) change(t[p].l,pl,mid,l,r,x);\n        if(r>mid) change(t[p].r,mid+1,pr,l,r,x);\n        maintain(p);\n    }\n}\nint ask(int p,int pl,int pr,int l,int r){\n    if(pl>=l&&pr<=r) return t[p].mx;\n    spread(p);\n    int mid=(pl+pr)>>1;\n    int ans=0;\n    if(l<=mid) ans=max(ans,ask(t[p].l,pl,mid,l,r));\n    if(r>mid) ans=max(ans,ask(t[p].r,mid+1,pr,l,r));\n    return ans;\n}\ninline int read(){\n    char c=getchar();\n    int x=0, f=1;\n    while(!isdigit(c)) f=(c=='-'?-1:f),c=getchar();\n    while(isdigit(c)) x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    return x*f;\n}\nstruct Lim {\n    int l,r,x,i;\n} a[30010];\nbool cmp(Lim x,Lim y){\n    return x.x==y.x?x.i<y.i:x.x>y.x;\n};\nint main(){\n    cin>>m>>n;\n    for(int i=1;i<=n;i++){\n        a[i].i=i,a[i].l=read(),a[i].r=read(),a[i].x=read();\n        // \u77db\u76fe\u60c5\u51b5 1\n        if(1e9-a[i].x<a[i].r-a[i].l) ans=min(a[i].i,ans);\n    }\n    sort(a+1,a+1+n,cmp);\n    build(1,m);\n    int k=1;\n    // \u8bb0\u5f55\u5f53\u524d\u4ea4\u533a\u95f4\n    Lim tmp=a[1];\n    for(int i=1;i<=n;i++){\n        // \u7edf\u4e00\u5904\u7406\u533a\u95f4\u4fee\u6539\n        if(a[i].x!=a[k].x){\n            for(int j=k;j<i;j++) change(1,1,m,a[j].l,a[j].r,a[j].i);\n            tmp=a[i],k=i;\n        }\n        // \u77db\u76fe\u60c5\u51b5 2\n        tmp.l=max(tmp.l,a[i].l);\n        tmp.r=min(tmp.r,a[i].r);\n        if(tmp.l>tmp.r){\n            ans=min(ans,a[i].i);\n            continue;\n        }\n        // \u77db\u76fe\u60c5\u51b5 3\n        int t=ask(1,1,m,tmp.l,tmp.r);\n        if(t!=inf) ans=min(ans,max(a[i].i,t));\n    }\n    cout<<(ans==inf?0:ans);\n    return 0;\n}\n```\n",
        "postTime": 1638533191,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P2898 [USACO08JAN]Haybale Guessing G \u9898\u89e3"
    },
    {
        "content": "## pre\n\n\u9996\u5148\u6ce8\u610f\u4e00\u4e0b\u7ffb\u8bd1\u91cc\u9762\u5e76\u6ca1\u6709\u63d0\u5230\u7684\u4e00\u70b9\uff0c\u4e5f\u662f\u8ba9\u6211\u6ca1\u770b\u61c2\u6837\u4f8b\u7684\u4e00\u70b9\uff0c\u5c31\u662f\u8fd9\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4\u91cc\u9762\u7684\u6570**\u5404\u4e0d\u76f8\u540c**\u3002\n\n\u6709\u5f88\u591a\u4eba\u7528\u5e76\u67e5\u96c6\u5199\u7684\u8fd9\u9053\u9898\uff0c\u9898\u89e3\u91cc\u9762\u4e5f\u6709\u4e00\u4e9b\u7528\u7ebf\u6bb5\u6811\u5199\u7684\uff0c\u4e0d\u8fc7\u6211\u8ba4\u4e3a\u6211\u7684\u505a\u6cd5\u548c\u5404\u4f4d\u7ebf\u6bb5\u6811\u5927\u4f6c\u7684\u6709\u4e9b\u8bb8\u4e0d\u540c\u3002\n\n## solution\n\n\u540c\u6837\uff0c\u5355\u8c03\u6027\u548c\u4e8c\u5206\u67e5\u627e\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u76f4\u63a5\u8bf4\u7ed9\u5b9a $n$ \u4e2a\u6761\u4ef6\uff0c\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u5408\u6cd5\u3002\n\n\u6839\u636e\u6837\u4f8b\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u6570 $num$ \uff0c\u5982\u679c\u7ed9\u5b9a\u4e86\u591a\u4e2a\u5f62\u5982 $[l_i,r_i]->num$ \u7684\u6761\u4ef6\uff0c\u662f\u53ef\u4ee5\u7f29\u5c0f\u8fd9\u4e2a\u6570\u7684\u8303\u56f4\u7684\u3002\n\n\u901a\u4fd7\u7684\u8bf4\uff0c**\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u4e0a\u9762\u4fe1\u606f $data$ \u7684\u610f\u4e49\u8bbe\u7f6e\u4e3a\u5f53\u524d\uff08\u4f4d\u7f6e/\u533a\u95f4\uff09\u53ef\u4ee5\u653e\u7f6e\u7684\u6700\u5c0f\u7684\u6570**\u3002\n\n\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u62ff\u5230\u8fd9\u4e9b\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u7ed9\u6761\u4ef6\u4ee5 $num$ \u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4e00\u533a\u95f4\u4fee\u6539 $[l_i,r_i]->num$  \uff0c\u6b63\u597d\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u8981\uff0c\u56e0\u4e3a\u4e00\u4e2a\u533a\u95f4\u5982\u679c\u6700\u5c0f\u503c\u4e3a $num$ \uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u7684\u6700\u5c0f\u503c\u90fd\u662f $num$ \uff0c**\u56e0\u4e3a\u4e4b\u524d\u653e\u7684\u6570\u80af\u5b9a\u6bd4\u5f53\u524d\u5c0f**\uff0c\u6240\u4ee5\u76f4\u63a5\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u6b21\u904d\u5386\u6240\u6709\u6761\u4ef6\uff0c\u770b\u80fd\u5426\u627e\u5230\u77db\u76fe\u3002\n\n\uff08\u5899\u70c8\u63a8\u8350\u5927\u5bb6\u6839\u636e\u60c5\u51b5\u6a21\u62df\u51e0\u4e2a\u4f8b\u5b50\u6709\u5229\u4e8e\u7406\u89e3\uff09\n\n\u60c5\u51b5\u4e00\uff1a\u6211\u4eec\u67e5\u8be2 $[l_i,r_i]$ \u7684\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6700\u5c0f\u503c\u5927\u4e8e $num_i$ \uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\u56e0\u4e3a**\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5f53\u4e14\u4ec5\u5f53\u4ed6\u7684\u8fd9\u4e2a\u533a\u95f4\u5b8c\u5168\u88ab\u6bd4\u4ed6\u5927\u7684\u6570\u8986\u76d6\u4e86**\uff0c\u90a3\u4e48\u5fc5\u5b9a\u6709\u77db\u76fe\u3002\n\n\u60c5\u51b5\u4e8c\uff1a\u6211\u4eec\u67e5\u8be2 $[l_i,r_i]$ \u7684\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6700\u5c0f\u503c\u7b49\u4e8e $num_i$ \uff0c\u90a3\u8bf4\u660e\u8fd9\u4e2a\u6761\u4ef6\u5fc5\u5b9a\u6ca1\u6709\u77db\u76fe\uff0c\u76f4\u63a5\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u60c5\u51b5\u4e09\uff1a\u6211\u4eec\u67e5\u8be2 $[l_i,r_i]$ \u7684\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u8fd9\u4e2a\u6700\u5c0f\u503c\u5c0f\u4e8e $num_i$ \uff0c**\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u552f\u4e00\u53ef\u80fd\u5c31\u662f\u5b58\u5728\u4e00\u4e2a $num_j$ \uff0c\u4ed6\u7684\u5b9e\u9645\u8303\u56f4\u88ab\u591a\u4e2a\u6761\u4ef6\u7f29\u5c0f\u5230\u4e86\u4e00\u4e2a\u8303\u56f4\uff0c\u7136\u540e\u67e5\u8be2 $[l_i,r_i]$ \u7684\u65f6\u5019\u6709\u66f4\u5c0f\u7684\u6570\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762**\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u6bd4 $num_i$ \u5c0f\u7684\u6570\u5b8c\u5168\u5305\u542b\u4e8e $[l_i,r_i]$ \uff0c\u90a3\u4e48\u8bf4\u660e\u4e0d\u5408\u6cd5\u3002\n\n\u5426\u5219\u65e0\u6cd5\u8bf4\u660e\u4e0d\u5408\u6cd5\uff0c\u76f4\u63a5\u53bb\u627e\u4e0b\u4e00\u4e2a\u6761\u4ef6\u3002\n\n## code\n\uff08\u653e\u8fd9\u4e48\u4e11\u7684\u4ee3\u7801\u771f\u662f\u5bf9\u4e0d\u8d77\u5927\u5bb6\u7684\u773c\u775b\u5566\uff09\n```c++\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#define mp make_pair\n#define R register int\n#define int long\n#define printf Ruusupuu = printf\n\nint Ruusupuu ;\n\nusing namespace std ;\ntypedef long long L ;\ntypedef long double D ;\ntypedef unsigned long long G ;\ntypedef pair< int , int > PI ;\nconst int N = 1e6 + 10 ;\nconst int M = 3e4 + 10 ;\nconst int Inf = 0x3f3f3f3f ;\n\ninline int read(){\n\tint w = 0 ; bool fg = 0 ; char ch = getchar() ;\n\twhile( ch < '0' || ch > '9' ) fg |= ( ch == '-' ) , ch = getchar() ;\n\twhile( ch >= '0' && ch <= '9' ) w = ( w << 1 ) + ( w << 3 ) + ( ch ^ '0' ) , ch = getchar() ;\n\treturn fg ? -w : w ; \n}\n\nint n , q , mid , lx , rx , dlt , fg [N] ;\nstruct QS{ int l , r , num ; } a [M] , fq [M] , as [M] ;\ninline bool cmp( QS a , QS b ){ return a.num < b.num ; }  \n\nint l [N << 2] , r [N << 2] , data [N << 2] , lz [N << 2] ;\n#define ud( x ) data [x] = data [x << 1] < data [x << 1 | 1] ? data [x << 1] : data [x << 1 | 1] ;\n\ninline void sp( int x ){\n\tif( !lz [x] ) return ;\n\tint k = lz [x] ; lz [x] = 0 ;\n\tdata [x << 1] = lz [x << 1] = data [x << 1 | 1] = lz [x << 1 | 1] = k ;\n}\n\nvoid build( int x , int ll , int rr ){\n\tl [x] = ll , r [x] = rr , data [x] = Inf ; lz [x] = 0 ;\n\tif( ll == rr ) return ; \n\tint mid = ( ll + rr ) >> 1 ;\n\tbuild( x << 1 , ll , mid ) , build( x << 1 | 1 , mid + 1 , rr ) ;\n}\n\nvoid cge( int x ){\n\tif( l [x] >= lx && r [x] <= rx ){ data [x] = lz [x] = dlt ; return ; }\n\tsp( x ) ; \n\tint mid = ( l [x] + r [x] ) >> 1 ;\n\tif( lx <= mid ) cge( x << 1 ) ;\n\tif( rx > mid ) cge( x << 1 | 1 ) ;\n\tud( x ) ;  \n}\n\nint ask( int x ){\n\tif( l [x] >= lx && r [x] <= rx ) return data [x] ;\n\tsp( x ) ;\n\tint mid = ( l [x] + r [x] ) >> 1 , ans = Inf ;\n\tif( lx <= mid ) ans = min( ans , ask( x << 1 ) ) ;\n\tif( rx > mid ) ans = min( ans , ask( x << 1 | 1 ) ) ;\n\treturn ans ;\n}\n\nvoid sc(){\n\tn = read() , q = read() ;\n\tfor( R i = 1 ; i <= q ; i ++ ) a [i].l = read() , a [i].r = read() , a [i].num = read() ;\n}\n\ninline bool check(){\n\tbuild( 1 , 1 , n ) ; \n\tfor( R i = 1 ; i <= mid ; i ++ ) fq [i] = a [i] , as [i].l = as [i].r = as [i].num = fg [i] = 0 ;\n\tsort( fq + 1 , fq + 1 + mid , cmp ) ;\n\n\tint ls = fq [1].l , rs = fq [1].r , now = fq [1].num , top = 0 ;\n\t\n\t//\u591a\u6b21\u4f7f\u7528\u8bb0\u5f97\u6e05\u7a7a \n\t\n\tfor( R i = 2 ; i <= mid ; i ++ ){\n\t\tif( now != fq [i].num ){\n\t\t\tas [++ top].num = now , as [top].l = ls , as [top].r = rs ;\n\t\t\tlx = ls , rx = rs , dlt = now , cge( 1 ) ;\n\t\t\tnow = fq [i].num , ls = fq [i].l , rs = fq [i].r ;\n\t\t}\n\t\t \n\t\telse{\n\t\t\tls = max( ls , fq [i].l ) , rs = min( rs , fq [i].r ) ;\n\t\t\tif( rs < ls ) return 0 ;\n\t\t}\n\t} \n\tas [++ top].num = now , as [top].l = ls , as [top].r = rs ;\n\tlx = ls , rx = rs , dlt = now , cge( 1 ) ;\n\t\n\t//\u5148\u628a\u6240\u6709\u6761\u4ef6\u90fd\u63d2\u5165\n\t\n\tfor( R i = 1 ; i <= mid ; i ++ ){\n\t\tlx = fq [i].l , rx = fq [i].r ;\t\n\t\tint sn = ask( 1 ) ; \n\t\tif( sn > fq [i].num ) return 0 ;\n\t\tif( sn < fq [i].num ){\n\t\t\tfor( R j = 1 ; j <= top ; j ++ )\t\n\t\t\t\tif( as [j].num == sn ){\n\t\t\t\t\tif( as [j].l >= lx && as [j].r <= rx ) return 0 ;\n\t\t\t\t\telse break ;\n\t\t\t\t}\n\t\t} \n\t}  // \u518d\u9010\u4e00\u5bfb\u627e\u77db\u76fe\n\t\n\treturn 1 ;\n\n}\n\nvoid work(){\n\tint lside = 1 , rside = q , ans = 0 ;\n\twhile( lside <= rside ){\n\t\tmid = ( lside + rside ) >> 1 ;\n\t\tif( check() ) ans = mid , lside = mid + 1 ;\n\t\telse rside = mid - 1 ;\n\t}\n\tprintf( \"%ld\\n\" , ( ans + 1 ) % ( q + 1 ) ) ; //\u76f4\u63a5\u4e00\u4e2a\u7b80\u6d01\u5199\u6cd5\uff0c\u4e0d\u7528if else\n}\n\nsigned main(){\t\n\tsc() ;\n\twork() ;\n\treturn 0 ;\n} \n```\n",
        "postTime": 1625366146,
        "uid": 365246,
        "name": "YksKuusiTAlv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u2014P2898 [USACO08JAN]Haybale Guessing G"
    }
]