[
    {
        "content": "\u867d\u7136\u4ee3\u7801\u548c\u8bf8\u4f4d\u5927\u4f6c\u76f8\u53bb\u4e0d\u8fdc\uff0c\u4f46\u6211\u7684\u601d\u8def\u4f3c\u4e4e\u6709\u6240\u4e0d\u540c\u3002\n\n\u5047\u5b9a**\u6240\u6709\u7684A\u673a\u5668\u540c\u65f6\u5f00\u59cb\uff0c\u6240\u6709\u7684B\u673a\u5668\u540c\u65f6\u7ed3\u675f\u3002**\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1f\u56e0\u4e3a\u7ed3\u675f\u65f6\u95f4\u4e0d\u4e00\u6837\u67d0\u79cd\u5b89\u6392\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u90a3\u53f0\u6700\u665a\u7ed3\u675f\u7684B,\u7136\u540e\u628a\u6bd4\u5b83\u65e9\u7ed3\u675f\u7684\u63a8\u8fdf\u4e00\u70b9\uff0c\u8fd9\u6837\u65e2\u4e0d\u5f71\u54cd\u5168\u5c40\u7ed3\u675f\u65f6\u95f4\uff0c\u53c8\u597d\u7406\u89e3\u3002\n\n\u9996\u5148\u8003\u8651\u6bcf\u4e00\u4e2a\u7269\u54c1\uff0c\u4ee4f[i]\u8868\u793a\u7b2ci\u4e2a\u5f00\u59cb\u52a0\u5de5\u7684\u7269\u54c1\u5904\u7406\u5b8c\u6bd5\u7684\u6700\u77ed\u65f6\u95f4\uff0cg[i]\u8868\u793a\u5f00\u59cb\u52a0\u5de5\u5012\u6570\u7b2ci\u4e2a\u5b8c\u6210\u7684\u7269\u54c1\u8ddd\u79bb\u201c\u8bbe\u5b9a\u7ed3\u675f\u65f6\u95f4\u201d\u7684\u6700\u77ed\u65f6\u95f4\uff08\u5176\u5b9e\u548cf[i]\u662f\u4e00\u4e2a\u610f\u601d\uff09\u3002\n\n\u7136\u540e\uff0c\u5b8c\u6210\u4e00\u4e2a\u6210\u54c1\u5c31\u9700\u8981f[i]+g[j]\u7684\u65f6\u95f4\uff08i,j<=n\uff09\n\n\u6700\u540e\u8d2a\u5fc3\u7684\u60f3\uff0c**\u5148\u5b8c\u6210\u7684\u7269\u54c1\u8981\u79bb\u7ed3\u675f\u5c3d\u91cf\u8fdc\uff0c\u540e\u5b8c\u6210\u7684\u7269\u54c1\u8981\u79bb\u7ed3\u675f\u5c3d\u91cf\u8fd1**\u3002\u56e0\u6b64\u4e0d\u5982\u76f4\u63a5\u628a\u79bb\u7ed3\u675f\u6700\u8fd1\u7684\u548c\u6700\u665a\u5f00\u59cb\u7684\u51d1\u6210\u4e00\u5bf9\uff0c\u79bb\u7ed3\u675f\u7b2c\u4e8c\u8fd1\u7684\u548c\u7b2c\u4e8c\u665a\u5f00\u59cb\u7684\u51d1\u6210\u4e00\u5bf9......\u8fd9\u6837\u6bcf\u4e00\u4e2a\u7269\u54c1\u90fd\u6709\u4e86\u7740\u843d\uff0c\u8017\u65f6\u6700\u957f\u7684\u7269\u54c1\u5c31\u662f\u5168\u5c40\u65f6\u95f4\u3002\n\n\u4f46\uff0c\u8003\u8651\u4e00\u4e0b\uff0c\u8fd9\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff1f\u6211\u7684\u610f\u601d\u662f\uff0cf[i]+g[j]\u600e\u4e48\u5c31\u4e00\u5b9a\u80fd\u8868\u793a\u4e00\u79cd\u53ef\u884c\u89e3\u5462\uff1f\u96be\u9053\u4e0d\u4f1a\u51fa\u73b0\uff0c\u540e\u5b8c\u573a\u7684\u53cd\u800c\u5148\u505a\u7684\u60c5\u51b5\u5417\uff1f\n\n\u5b9e\u9645\u4e0a\uff0c\u5047\u5982i,j\u771f\u7684\u4efb\u610f\u53d6\uff0c\u7684\u786e\u4f1a\u8fd9\u6837\u3002\u4f46\u5728\u4e0a\u8ff0\u7684\u201c\u957f\u914d\u77ed\u201d\u5339\u914d\u5f53\u4e2d\uff0c\u5df2\u7ecf\u4fdd\u8bc1\u4e86 \u5148\u88abA\u52a0\u5de5\u5b8c\u4e86\u7684\u7269\u54c1 \uff0c\u4e00\u5b9a\u4e0d\u4f1a\u6392\u5728 \u540e\u88abA\u52a0\u5de5\u5b8c\u7684\u7269\u54c1 \u4e4b\u540e\u53bb\u88abB\u52a0\u5de5\u3002\n\n\u601d\u8def\u6e05\u5947\uff0c\u4f46\u4ee3\u7801\u5374\u5341\u5206\u7b80\u6d01\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#define N 100\n#define M 2020\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\nusing namespace std;\nint n,A,B,a[N],b[N],x[N],y[N],f[M],g[M],p,q,ans;\nint main(){\n\tscanf(\"%d%d%d\",&n,&A,&B);\n\tFOR(i,1,A) scanf(\"%d\",&a[i]),x[i]=a[i];\n\tFOR(i,1,B) scanf(\"%d\",&b[i]),y[i]=b[i];\n\tFOR(i,1,n){\n\t\tf[i]=g[i]=1000010000;\n\t\tFOR(j,1,A) if(x[j]<f[i]) p=j,f[i]=x[j];\n\t\tFOR(j,1,B) if(y[j]<g[i]) q=j,g[i]=y[j];\n\t\tx[p]+=a[p],y[q]+=b[q]; \n\t}FOR(i,1,n) ans=max(ans,f[i]+g[n-i+1]);\n\tprintf(\"%d %d\",f[n],ans);\n}\n```",
        "postTime": 1526907395,
        "uid": 62267,
        "name": "BJpers2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    },
    {
        "content": "ID: redbag\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u8d2a\u5fc3\n\n\u5f00\u59cb\u4ece\u524d\u5f80\u540e\u8d2a\uff0c\u6839\u636e\u5b8c\u6210\u65f6\u95f4\u9009\u62e9\u52a0\u5de5\u6bcf\u4ef6\u7269\u54c1\u7684\u673a\u5668\uff08\u5b8c\u6210\u65f6\u95f4=\u7b49\u5f85\u65f6\u95f4+\u52a0\u5de5\u65f6\u95f4\uff09\n\n\u7136\u540e\u7b2c\u4e8c\u95ee\u4ece\u540e\u5f80\u524d\u8d2a\uff0c\u8ba9\u6700\u540e\u4e00\u4e2a\u5b8c\u6210\u64cd\u4f5cA\u7684\u7269\u54c1 \u7528\u6548\u7387\u6700\u9ad8\u7684\u673a\u5668\u5b8c\u6210\u64cd\u4f5cB\n\n\u55ef\u4ee3\u7801\u633a\u8be6\u7ec6\u7684\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<cstdlib>\n#include<list>\n#include<map>\n#include<set>\n#include<list>\n#include<stack> \nusing namespace std;\nint n,A,B;//n:\nint m;\nint i,j;\nstruct node\n{\n    int s;//\u76ee\u524d\u8fd9\u53f0\u673a\u5668 \u5b8c\u6210\u76ee\u524d\u7269\u54c1 \u7ed3\u675f\u7684\u65f6\u95f4 \n    int v;//\u8be5\u673a\u5668\u901f\u5ea6 \n    bool operator<(node k)const\n    {\n        return s>k.s;\n    } //\u5c0f\u6839\u5806 \n};\npriority_queue<node> q; \nint t[2000]; \nint ans;\nint main()\n{\n    freopen(\"job.in\",\"r\",stdin);\n    freopen(\"job.out\",\"w\",stdout);\n    scanf(\"%d%d%d\",&n,&A,&B); \n    node x;\n    for (i=1;i<=A;i++)\n    {\n        scanf(\"%d\",&x.v);\n        x.s=x.v;\n        q.push(x);//\u628a\u901f\u5ea6\u538b\u5165\u4f18\u5148\u961f\u5217\u4e2d  \n    }\n    for (i=1;i<=n;i++)\n    {\n        x=q.top();//\u53d6\u51fa\u6700\u5c0f\u503c \n        q.pop();//\u628a\u6700\u5c0f\u503c\u5f39\u51fa \n        t[i]=x.s;//t[i]\u5b58\u7684\u662f\u7b2ci\u4e2a\u7269\u54c1\u5b8c\u6210\u64cd\u4f5cA \u7ed3\u675f\u7684\u65f6\u95f4 \n        x.s+=x.v;//\u7136\u540e\u4e0b\u4e00\u4e2a\u7269\u54c1\u8981\u7528\u8fd9\u53f0\u673a\u5668 \u7ed3\u675f\u7684\u65f6\u95f4\u5c31\u8981+x.v \n        q.push(x);//\u518d\u6b21\u538b\u5165\u6808 \n    } \n    while (!q.empty()) q.pop(); \n    for (i=B;i>=1;i--)\n    {\n        scanf(\"%d\",&x.v);\n        x.s=x.v;\n        q.push(x);\n    } \n    ans=0;\n    for (i=n;i>=1;i--)\n    {\n        x=q.top();//\u53d6\u51fa\u6700\u5c0f\u503c \n        q.pop();//\u628a\u6700\u5c0f\u503c\u5f39\u51fa \n        if (x.s+t[i]>ans) ans=x.s+t[i];//\u6c42\u6700\u665a\u7ed3\u675f\u65f6\u95f4 \n        x.s+=x.v;//\u7136\u540e\u4e0b\u4e00\u4e2a\u7269\u54c1\u8981\u7528\u8fd9\u53f0\u673a\u5668 \u7ed3\u675f\u7684\u65f6\u95f4\u5c31\u8981+x.v \n        //\u7136\u800c\u4f3c\u4e4e\u5f00\u59cb\u7528\u8fd9\u53f0\u673a\u5668\u7684\u64cd\u4f5c\u8be5\u7269\u54c1\u65f6\u5019\uff0c\u53ef\u80fd\u4e0a\u4e00\u4e2a\u7269\u54c1\u7528\u8fd9\u53f0 \n        //\u673a\u5668\u5df2\u7ecf\u5b8c\u6210\u4efb\u52a1\u4e86\uff0c\u7136\u800c\u8fd9\u5e76\u4e0d\u5f71\u54cdQAQ \n        q.push(x);\n    }\n    printf(\"%d %d\\n\",t[n],ans); \n    return 0;\n}\n```",
        "postTime": 1499072103,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    },
    {
        "content": "\n\u7b2c\u4e00\u95ee\uff1a\u8d2a\u5fc3\n\n\n\u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u6709M1\u53f0\u6548\u7387\u4e0d\u540c\u7684\u6d17\u8863\u673a\uff0cn\u4ef6\u8863\u670d\uff0c\u8981\u6c42\u6700\u77ed\u65f6\u95f4\u5185\u6d17\u5b8c\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f\n\n\u2014\u2014\u5148\u628a\u6240\u6709\u6d17\u8863\u673a\u585e\u6ee1\u5e76\u6253\u5f00\uff0c\u6709\u4efb\u4f55\u4e00\u53f0\u6d17\u597d\u4e86\u5c31\u9a6c\u4e0a\u518d\u585e\u4e00\u4ef6\u8863\u670d\u8fdb\u53bb\u3002\n\n\n\u5982\u679c\u8863\u670d\u90fd\u585e\u5b8c\u4e86\u8fd8\u6709\u7a7a\u95f2\u7684\u6d17\u8863\u673a\uff0c\u5728\u5176\u4ed6\u5728\u6d17\u7684\u6d17\u8863\u673a\u91cc\u627e\u51fa\u8fd8\u9700\u7528\u65f6\u6700\u4e45\u6d17\u5b8c\u5f53\u524d\u8863\u670d\u7684\u6d17\u8863\u673a\uff0c\u4e0e\u7a7a\u95f2\u6d17\u8863\u673a\u4e2d\u6700\u5feb\u7684\u6bd4\u8f83\uff0c\u82e5\u901f\u5ea6\u6bd4\u5b83\u6d17\u5b8c\u6240\u7528\u65f6\u95f4\u5c11\uff0c\u5c31\u53d6\u51fa\u6765\u585e\u5230\u8fd9\u53f0\u7a7a\u95f2\u673a\u5b50\u91cc\u53bb\u3002\n\n\n\u7c7b\u6bd4\u6d17\u8863\u673a\u4e0eA\u673a\u5668\uff0c\u90a3\u4e48\u7b2c\u4e00\u95ee\u5c31\u88ab\u6211\u4eec\u89e3\u51b3\u4e86~\n\n\n\u7b2c\u4e8c\u95ee\uff1a\u8fd8\u662f\u8d2a\u5fc3\n\n\n\u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u73b0\u5728\u65b0\u83b7\u5f97\u4e86M2\u53f0\u70d8\u5e72\u673a\u5e76\u5f97\u5230\u65b0\u4efb\u52a1\u2014\u2014\u8981\u6c42\u6700\u77ed\u65f6\u95f4\u5185\u6d17\u5b8c\u5e76\u70d8\u5e72\u3002\n\n\n\u6d17\u5b8c\u4e00\u4ef6\u9a6c\u4e0a\u585e\u4e00\u4ef6\u5230\u6700\u5feb\u7684\u7a7a\u95f2\u70d8\u5e72\u673a\u53bb\uff1f\n\n\u663e\u7136\u6709\u95ee\u9898\uff1a\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u6700\u540e\u4e00\u4ef6\u6d17\u5b8c\u7684\u8863\u670d\u51b3\u5b9a\u4e86\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\uff0c\u4f46\u5b83\u5e76\u4e0d\u4e00\u5b9a\u5f97\u5230\u6700\u4f18\u5f85\u9047\u2014\u2014\u6700\u5feb\u7684\u70d8\u5e72\u673a\u3002\n\n\n\u90a3\uff0c\u7ed9\u6700\u540e\u4e00\u4ef6\u6d17\u5b8c\u7684\u8863\u670d\u914d\u6700\u5feb\u7684\u70d8\u5e72\u673a\u5c31\u662f\u7b54\u6848\uff1f\n\n\u8fd8\u662f\u8fc7\u4e0d\u53bb\u6837\u4f8b\u3002\n\n\u56e0\u4e3a\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u2014\u2014\n\n\u4e24\u4ef6\u8863\u670d\uff0c\u7b2c\u4e00\u4ef6\u6d17\u5b8c\u65f6\u95f4\u4e3at,\u7b2c\u4e8c\u4ef6\u4e3at+1,\u4e24\u53f0\u70d8\u5e72\u673a\uff0c\u901f\u5ea6\u4e3a1\u548c3\u3002\n\n\u663e\u7136\u7b54\u6848\u662ft+3,\u800c\u4e0a\u9762\u7684\u8d2a\u5fc3\u7b54\u6848\u662ft+2\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4e0a\u9762\u8d2a\u5fc3\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u51fa\u73b0\u6700\u540e\u4e00\u4ef6\u70d8\u5e72\u7684\u8863\u670d\u5e76\u4e0d\u662f\u6700\u540e\u4e00\u4ef6\u6d17\u5b8c\u7684\u8863\u670d\u7684\u60c5\u51b5\u3002\n\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u60f3\u8c61\uff1a\n\n\u5bf9\u4e8e\u4ece\u540e\u5f80\u524d\u7684\u6bcf\u4e00\u4ef6\u8863\u670d\uff0c\u4e3a\u5b83\u50cf\u7b2c\u4e00\u95ee\u4e00\u6837\u51c6\u5907\u4e00\u53f0\u5f53\u524d\u6700\u597d\u7684\u3001\u80fd\u7528\u7684\u70d8\u5e72\u673a\uff0c\u7ed9\u5b83\u70d8\u5e72\uff0c\u7136\u540e\u8bb0\u5f55\u8fd9\u53f0\u70d8\u5e72\u673a\u5728\u6211\u4eec\u7684\u89c4\u5212\u4e2d\u5c06\u70d8\u5e72\u8fd9\u4ef6\u8863\u670d\uff0c\u5373\u5728\u5b83\u9700\u8981\u70d8\u5e72\u4e00\u4ef6\u8863\u670d\u7684\u901f\u5ea6\u4e0a\u52a0\u4e0a\u81ea\u5df1\u6700\u5f00\u59cb\u7684\u901f\u5ea6\uff0c\u7ee7\u7eed\u626b\u63cf\uff0c\u6700\u540e\u6309\u89c4\u5212\u6765\uff0c\u5c31\u80fd\u8fc7\u6837\u4f8b(AC)\u4e86\uff01\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5\uff1a\n\n\u5bf9\u6bcf\u53f0\u70d8\u5e72\u673a\u8bb0\u5f55\u76f8\u5f53\u4e8e\u8bf4\uff1a\u5728\u5b83\u6d17\u5b8c\u4e0a\u4e00\u4ef6\u8863\u670d\u540e\u8981\u6c42\u5b83\u6d17\u8bb0\u5f55\u7684\u8fd9\u4ef6\u8863\u670d\uff0c\u5219\u6211\u4eec\u5728\u7edf\u8ba1\u7b54\u6848\u65f6\u8fd9\u4e2a\u7ed3\u675f\u65f6\u95f4\u4fbf\u4f1a\u88ab\u7b97\u5728\u6211\u4eec\u540e\u9762\u626b\u63cf\u5230\u7684\u8863\u670d\u4e0a\u2014\u2014\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u6267\u884c\u65f6\u5148\u7528\u8fd9\u53f0\u70d8\u5e72\u673a\u70d8\u5e72\u4e86\u540e\u9762\u4f7f\u7528\u5b83\u7684\u8863\u670d\uff0c\u518d\u7528\u5b83\u70d8\u5e72\u4e86\u6211\u4eec\u8bb0\u5f55\u7684\u8fd9\u4ef6\u8863\u670d\u3002\n\n\n\u7c7b\u6bd4\u70d8\u5e72\u673a\u548cB\u673a\u5668\uff0c\u7b2c\u4e8c\u95ee\u4e5f\u89e3\u51b3\u4e86~\n\n\u5b9e\u73b0\u4e0a\uff0c\u4e00\u4e2a\u4e8c\u53c9\u5806\uff08\u66f4\u7701\u4e8b\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\uff09\u968f\u4fbf\u641e\u641e\uff08\u6a21\u62df\uff09\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nstruct node\n{\n    int nt,v;\n    bool operator<(node k)const\n    {\n        return nt>k.nt;\n    }\n};\n\nint n,cnta,cntb,ansa,ansb;\nint t[1060];\n\npriority_queue<node> q;\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&cnta,&cntb);\n    \n    for(int i=1;i<=cnta;i++)\n    {\n        node koishi;\n        scanf(\"%d\",&koishi.v);\n        koishi.nt=koishi.v;\n        q.push(koishi);\n    }\n    //\u63a8\u5165\u4e00\u4e2a\u4f18\u5148\u961f\u5217 \n    for(int i=1;i<=n;i++)\n    {\n        node koishi=q.top();\n        q.pop();\n        t[i]=koishi.nt;\n        koishi.nt+=koishi.v;\n        q.push(koishi);\n    }\n    ansa=t[n];\n    //\u6a21\u62df[\u6709\u7a7a\u95f2\u6d17\u8863\u673a\u5c31\u585e]\u8fc7\u7a0b \n    //\u7b2c\u4e00\u95ee\u5b8c\u6bd5 \n    \n    while(!q.empty())q.pop();\n    \n    for(int i=1;i<=cntb;i++)\n    {\n        node koishi;\n        scanf(\"%d\",&koishi.v);\n        koishi.nt=koishi.v;\n        q.push(koishi);\n    }\n    //\u540c\u4e0a\u63a8\u5165\u961f\u5217 \n    ansb=0;\n    for(int i=n;i>=1;i--)//\u4ece\u540e\u5f80\u524d,\u8fd9\u70b9\u5f88\u91cd\u8981 \n    {\n        node koishi=q.top();\n        q.pop();\n        if(koishi.nt+t[i]>ansb)\n            ansb=koishi.nt+t[i]; \n        koishi.nt+=koishi.v;//\u8bb0\u5f55\u5f53\u524d\u70d8\u5e72\u673a\u8981\u5728\u5c06\u6765\u70d8\u5e72\u7b2ci\u4ef6\u8863\u670d\n        q.push(koishi);\n    }\n    //\u6a21\u62df\u89c4\u5212\u70d8\u5e72\u7684\u8fc7\u7a0b\n     \n    printf(\"%d %d\\n\",ansa,ansb);\n    \n    return 0;\n}\n```",
        "postTime": 1490025916,
        "uid": 19293,
        "name": "zltttt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    },
    {
        "content": "\uff08\u788e\u788e\u5ff5\uff09-\u3002-\u4e00\u5f00\u59cb\u60f3\u4e86\u4e2a\u7279\u522b\u590d\u6742\u7684\u505a\u6cd5\uff0c\u540e\u6765\u53d1\u73b0\u5199\u4e0d\u51fa\u6765233\n\n\u5148\u8003\u8651A\u5de5\u5e8f\n\u8003\u8651\u5230\u4ea7\u54c1\u662f\u4e00\u4e2a\u4e2a\u5b8c\u6210\u7684\uff0c\u800c\u6240\u7528\u673a\u5668\u4e4b\u95f4\u5e73\u884c\u5de5\u4f5c\uff0c\u9898\u95ee\u7684\u662f\u65f6\u95f4\u8f74\u4e0a\u7684\u6700\u665a\u70b9\n\u628a\u673a\u5668\u5728\u65f6\u95f4\u8f74\u4e0a\u5e73\u884c\u6392\u5f00\uff0c\u4e3a\u6bcf\u4e2a\u673a\u5668\u5206\u914d\u4e00\u4e9b\u5de5\u4ef6\uff0c\u6700\u540e\u6700\u665a\u5b8c\u6210\u6700\u540e\u4e00\u4e2a\u673a\u5668\u7684\u65f6\u95f4\u8f74\u4e0a\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u201c\u65f6\u95f4\u603b\u548c\u201d\n\u90a3\u4e48\u5982\u4f55\u5206\u914d\u5de5\u4ef6\u5462\uff0c\u53d1\u73b0\u673a\u5668\u7684\u6548\u7387\u662f\u5df2\u77e5\u7684\uff0c\u7ed3\u5408\u673a\u5668\u66fe\u7ecf\u5de5\u4f5c\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u7528\u8fd9\u4e2a\u673a\u5668\u5b8c\u6210\u7b2ci\u4e2a\u5de5\u4ef6\u7684\u65f6\u95f4\u70b9\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u66f4\u65b0\u673a\u5668\u7684\u66fe\u7ecf\u5de5\u4f5c\u65f6\u95f4\u3002\u540c\u65f6\u8bb0\u5f55\u4e0b\u7b2ci\u4e2a\u5de5\u4ef6\u5b8c\u6210\u7684\u6700\u65e9\u65f6\u95f4tim1[i]\n\n\uff08\u65f6\u95f4\u70b9\uff0c\u5c31\u662f\u76ee\u524d\u7684\u6700\u665a\u65f6\u95f4\uff0c\u6700\u540e\u4e00\u4e2a\u5904\u7406\u7684\u5de5\u4ef6\u4e00\u5b9a\u662f\u6700\u665a\u5904\u7406\u5b8c\u7684\u3002\u5982\u679c\u8bf4\u4e0d\u662f\u6700\u665a\u5904\u7406\u5b8c\u7684\uff0c\u4e0a\u4e00\u4e2a\u5de5\u4ef6\u6bd4\u4ed6\u65e9\u5904\u7406\uff0c\u5904\u7406\u5b8c\u8fd8\u6bd4\u4ed6\u665a\uff0c\u90a3\u6211\u5728\u5904\u7406\u4e0a\u4e00\u4e2a\u5de5\u4ef6\u65f6\uff0c\u7531\u4e8e\u6211\u662f\u8d2a\u5fc3\u5730\u5b89\u6392\u5de5\u5e8f\uff0c\u6211\u4e0d\u53ef\u80fd\u8bf4\u6709\u80fd\u66f4\u65e9\u5904\u7406\u5b8c\u7684\u65b9\u6848\uff0c\u6211\u9009\u62e9\u4e86\u66f4\u665a\u5904\u7406\u7684\u65b9\u6848\uff0c\u7559\u66f4\u597d\u7684\u673a\u5668\u7ed9\u4e0b\u4e00\u4e2a\u5de5\u4ef6\uff09\n\n\u5bf9\u4e8eB\u5de5\u5e8f\uff0c\u4ecd\u7136\u91c7\u7528\u4e0a\u8ff0\u65b9\u6cd5\u6c42\u51fatim\u6570\u7ec4\uff0c\u8bb0\u4f5ctim2[i]\uff0c\u56e0\u4e3aA\u5de5\u5e8f\u5fc5\u987b\u5148\u4e8eB\u5de5\u5e8f\uff0c\u90a3\u4e48\u60f3\u8981\u5bf9\u7b2ci\u4e2a\u5de5\u4ef6\u52a0\u5de5\u5fc5\u987b\u8981\u5728tim1[i]\u4e4b\u540e\n\n\u5148\u4e0d\u7ba1A\u7684\u8bdd\uff0ctim2\u6570\u7ec4\u8868\u793a\u7684\u662f\uff0c\u5728B\u5de5\u5e8f\u4e2d\uff0c\u7b2ci\u5feb\u5b8c\u6210\u7684\u4ea7\u54c1\u6240\u82b1\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u8003\u8651A\uff0c\u5047\u8bbe\u67d0\u4e2a\u5de5\u4ef6\u5728A\u4e2d\u662f\u7b2cx\u4e2a\u5b8c\u6210\u7684\uff0c\u5728B\u4e2d\u662f\u7b2cy\u4e2a\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u5c31\u662ftm1[x] + tm2[y]\uff0c\u60f3\u8981\u51cf\u5c11\u603b\u65f6\u95f4\uff0c\u56e0\u4e3a\u4e0d\u80fd\u6539\u53d8A\uff0c\u53ea\u80fd\u6539\u53d8\u4ece\u201c\u7f13\u51b2\u533a\u201d\u7ed9B\u52a0\u5de5\u7684\u5de5\u4ef6\u6b21\u5e8f\uff0c\u6bd4\u5982\u8bf4A\uff0c1s\uff0c3s\u65f6\u5206\u522b\u51fa\u4e86\u4e24\u4e2a\u4ea7\u54c1x1,x2\uff0c\u6539\u53d8x1,x2\u5728B\u4e2d\u5904\u7406\u7684\u6b21\u5e8f\u3002\n\n\u663e\u7136\uff0ctm1\u5c0f\u7684\u5de5\u4ef6\uff0c\u4ed6\u7684tm2\u5e94\u8be5\u5c3d\u91cf\u5927\uff0c\u624d\u80fd\u4f7f\u6700\u540e\u65f6\u95f4\u66f4\u5e73\u5747\uff08\u603b\u65f6\u95f4\u662ftm1  + tm2\uff09\n\n\u6240\u4ee5\u6211\u4eec\u628atm1\u6700\u5c0f\u7684\u5b89\u6392\u6210tm2\u6700\u5927\u7684\uff0c\u7b2c\u4e8c\u5c0f\u7684\u5b89\u6392\u6210\u7b2c\u4e8c\u5927\u7684\uff0c\u6700\u540e\u7b54\u6848\u662f`max(tm1[i] + tm2[n-i+1])`\n```c++\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int MAXN = 1000 + 10;\nint n,ma[MAXN],mb[MAXN],maa,mbb,at[MAXN],bt[MAXN],ans1,ans2,tm1[MAXN],tm2[MAXN];\nint main() {\n\tcin >> n >> maa >> mbb;\n\tfor(int i=1; i<=maa; i++) {\n\t\tcin >> ma[i];\n\t}\n\tfor(int i=1; i<=mbb; i++) {\n\t\tcin >> mb[i];\n\t}\n\t\n\tfor(int i=1; i<=n; i++) {\n\t\tint minj=1<<30, mint=1<<30;\n\t\tfor(int j=1; j<=maa; j++) {\n\t\t\tif(at[j] + ma[j] < mint) {\n\t\t\t\tminj = j, mint = at[j] + ma[j];\n\t\t\t}\n\t\t}\n\t\tat[minj] = mint;\n\t\ttm1[i] = mint;\n\t\tif(i == n) ans1 = mint;\n\t}\n\tcout << ans1 << \" \";\n\tfor(int i=1; i<=n; i++) {\n\t\tint minj=1<<30, mint=1<<30;\n\t\tfor(int j=1; j<=mbb; j++) {\n\t\t\tif(bt[j] + mb[j] < mint) {\n\t\t\t\tminj = j, mint = bt[j] + mb[j];\n\t\t\t}\n\t\t}\n\t\tbt[minj] = mint;\n\t\ttm2[i] = mint;\n\t}\n\tfor(int i=1; i<=n; i++) {\n\t\tans2 = max(ans2, tm1[i] + tm2[n-i+1]);\n\t}\n\tcout << ans2;\n\treturn 0;\n}\n```",
        "postTime": 1532315329,
        "uid": 35862,
        "name": "Zolrk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    },
    {
        "content": "\u663e\u7136\uff0c\u8fd9\u662f\u4e00\u9053\u8d2a\u5fc3\u9898\u3002\n\n$f_i$ \u8868\u793a\u52a0\u5de5\u65f6\u95f4\u6392\u540d\u7b2c $i$ \u7684\u96f6\u4ef6\u7684\u4ea7\u51fa\u65f6\u95f4\u5373\u5728 A \u673a\u5668\u52a0\u5de5\u5b8c\u6210\u7684\u65f6\u95f4\uff0c$g_i$ \u7edf\u8ba1\u5728 B \u673a\u5668\u4e2d\u52a0\u5de5\u65f6\u95f4\u6392\u540d\u5012\u6570\u7b2c $i$ \u7684\u96f6\u4ef6\u7684\u52a0\u5de5\u65f6\u95f4\u3002\n\n\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u8bbe\u8ba1 $f$ \u6570\u7ec4\u548c $g$ \u6570\u7ec4\u3002\u501f\u9274\u4e00\u4e0b\u4e58\u8239\u95ee\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8ba9\u6700\u5148\u5728 A \u673a\u5668\u4ea7\u51fa\u7684\u96f6\u4ef6\u8fdb\u5165\u5230 B \u673a\u5668\u4e2d\u6548\u7387\u6700\u6162\u7684\u90a3\u4e00\u53f0\uff0c\u4ece\u800c\u8fbe\u5230\u65f6\u95f4\u6700\u77ed\u7684\u76ee\u7684\u3002\u4e8e\u662f\u4e4e\u6211\u4eec\u9700\u8981\u8ba9 A \u673a\u5668\u4e2d\u7684\u6b63\u6570\u7b2c $i$ \u548c B \u673a\u5668\u4e2d\u7684\u5012\u6570\u7b2c $i$ \u914d\u5bf9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u5806\u4f18\u5316\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5982\u679c\u4f7f\u7528\u5806\uff0c\u53ef\u4ee5\u81ea\u52a8\u6392\u5e8f\uff0c\u4e8e\u662f\u4e4e\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u7ec4 $f$\u3001$g$ \u7528\u4f18\u5148\u961f\u5217\u9898\u89e3\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\uff08\u8fd9\u91cc\u63d0\u4f9b\u7684\u662f\u5806\u4f18\u5316\u7684\u7248\u672c\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=1005;\nint N,M1,M2,ans[maxn];\n\nstruct node\n{\n\tint id,t;//id\u662f\u673a\u5668\u7f16\u53f7\uff0ct\u662f\u4ea7\u51fa\u5f53\u524d\u7269\u54c1\u548c\u4e4b\u524d\u6240\u6709\u7269\u54c1\u9700\u8981\u6d88\u8017\u7684\u603b\u65f6\u95f4\n\tfriend bool operator < (node a,node b)\n\t{\n\t\treturn a.t>b.t;\n\t}\n}mach[maxn];\n\npriority_queue<node> q1;\npriority_queue<node> q2;\n\nint main()\n{\n\tcin>>N>>M1>>M2;\n\tint tmp;\n   //\u5bf9\u4e8e\u6bcf\u4e00\u53f0\u673a\u5668\u6765\u8bf4\uff0c\u5b83\u4ea7\u51fa\u7b2c\u4e00\u4e2a\u7269\u54c1\u7684\u65f6\u95f4\u4e00\u5b9a\u662f\u5b83\u7684\u521d\u59cb\u6548\u7387\u65f6\u95f4\n\tfor(int i=1;i<=M1;i++) cin>>tmp,q1.push({tmp,tmp});\n\tfor(int i=1;i<=M2;i++) cin>>tmp,q2.push({tmp,tmp});\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tnode now=q1.top();q1.pop();\n\t\tans[i]+=now.t;\n\t\tq1.push({now.id,now.id+now.t});//\u628a\u66f4\u65b0\u4e4b\u540e\u7684\u65f6\u95f4\u538b\u5165\n\t}\n\tcout<<ans[N]<<' ';\n\tfor(int i=N;i;i--)//\u6ce8\u610f\u56e0\u4e3a\u5efa\u7acb\u7684\u662f\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u8981\u5012\u7740\u679a\u4e3e\n\t{\n\t\tnode now=q2.top();q2.pop();\n\t\tans[i]+=now.t;\n\t\tq2.push({now.id,now.id+now.t});\n\t}\n\tsort(ans+1,ans+N+1);\n\tcout<<ans[N];\n\treturn 0;\n}\n```",
        "postTime": 1675134500,
        "uid": 822239,
        "name": "ncwzdlsd",
        "ccfLevel": 3,
        "title": "P2751\u9898\u89e3"
    },
    {
        "content": "\u5148\u8bf4\u660e\uff0c\u6211\u7684\u4ee3\u7801\u53ca\u89e3\u91ca\u5b8c\u5584\u697c\u4e0b\u7684\u9898\u89e3\n\n\u7b2c\u4e00\u95ee:\n\n\u4ece\u524d\u5f80\u540e\u8d2a\u5fc3\uff0c\u7528f[i]\u8bb0\u5f55\u7b2ci\u4e2a\u96f6\u4ef6\u5b8c\u6210\u7684\u6700\u5c0f\u65f6\u95f4\n\n\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8bb0\u5f55\n\nv:\u6bcf\u4e00\u53f0\u673a\u5668\u5b8c\u6210\u4e00\u4e2a\u96f6\u4ef6\u7684\u65f6\u95f4\u548c\n\ns:\u5b8c\u6210\u4e0b\u4e00\u4e2a\u96f6\u4ef6\u5230\u8fbe\u7684\u65f6\u95f4\u70b9\uff08\u4f1a\u4e0d\u65ad\u53d8\u5316\uff09\n\n\u4ece\u524d\u5f80\u540e\u6bcf\u6b21\u627e\u5b8c\u90fd\u8981\u6392\u5e8f\n\n\u6700\u540e\u8f93\u51faf[n]\n\n\u7b2c\u4e8c\u95ee\uff1a\n\nf\u6570\u7ec4\u80af\u5b9a\u662ff[i]<=f[i+1],\u4e3a\u4e86\u8ba9\u6700\u957f\u65f6\u95f4\u5c3d\u91cf\u5c11\uff0c\u6211\u4eec\u5c31\u5c3d\u91cf\n\n\u8ba9A,B\u8fde\u4e2a\u6b65\u9aa4\u7684\u603b\u65f6\u95f4\u5e73\u5747\uff0c,\u6240\u4ee5\u8981 **\u4ece\u540e\u5f80\u524d** \u627e\n\u67e5\u627e\u7684\u65b9\n\n\u5f0f\u548c\u524d\u9762\u7684\u51e0\u4e4e\u4e00\u6837\uff0c\u4f46\u8981\u8bb0\u5f97+f[i]\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 1100\nusing namespace std;\nint n,a,b;\nstruct node\n{\n\tint s,v;\n\t//\u5c0f\u6839\u5806\uff0c\u5728\u6808\u91cc\u9762\u81ea\u52a8\u6392\u5e8f\uff0c\u975e\u5e38\u6709\u7528\uff0c\u503c\u5f97\u8bb0\u4e00\u4e0b \n\tbool operator<(node k)const\n\t{\n\t\tif(s>k.s) return true;//\u8fd9\u91cc\u628a\u5b8c\u6210\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u4e00\u6b21\u5e8f \n\t\treturn false;\n\t}\n};\npriority_queue<node> q;//\u6808\uff0c\u60f3\u5b66\u8d2a\u5fc3\u5fc5\u5148\u5b66\u6808 \nint f[MAXN];//\u8bb0\u5f55\u7b2ci\u4e2a\u96f6\u4ef6\u5b8c\u6210\u7684\u6700\u5c0f\u65f6\u95f4\nint main()\n{\n\tint i;node x;\n\tscanf(\"%d%d%d\",&n,&a,&b);\n\tfor(i=1;i<=a;i++)\n\t{\n\t\tscanf(\"%d\",&x.v); \n\t\tx.s=x.v;\n\t\t//\u8fd9\u91cc\u672c\u6765\u53ef\u4ee5\u4e3a0\uff0c\u4f46\u662f\u4e3a\u4e86\u8ba9\u6392\u5e8f\u65b9\u4fbf\u5f88\u591a\n\t\t//\u800c\u4e14\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u60c5\u51b5\u53d1\u751f  \n\t\t//\u6bd4\u5982\u8bf4\u67d0\u4e00\u53f0\u673a\u5668\u8fd0\u8f6c\u65f6\u95f4\u6bd4\u53e6\u4e00\u53f0\u9ad8\u51fa\u4e86\u5f88\u591a \n\t\tq.push(x);//\u653e\u8fdb\u6808 \n\t}\n\tfor(i=1;i<=n;i++)//\u4ece\u524d\u5f80\u540e \n\t{\n\t\tx=q.top();//\u53d6\u51fa\u6700\u5c0f\u503c \n\t\tq.pop();\n\t\tf[i]=x.s;//\u8bb0\u5f55 \n\t\tx.s=x.s+x.v;//\u4e3a\u4e0b\u4e00\u4e2a\u505a\u51c6\u5907\t\n\t\tq.push(x);//\u7ee7\u7eed\u653e\u8fdb\u6808\u91cc\u9762\u6392\u5e8f \n\t}\n\twhile(q.empty()==false) q.pop();//\u627e\u5b8c\u4e86A\uff0c\u518d\u6765\u627eB\uff0c\u6240\u4ee5\u5f97\u628aq\u5168\u90e8\u5f39\u51fa\u53bb \n\tfor(i=1;i<=b;i++)\n\t{\n\t\tscanf(\"%d\",&x.v);//\u548c\u4e0a\u9762\u51e0\u4e4e\u4e00\u6837\u7684\u64cd\u4f5c \n\t\tx.s=x.v;\n\t\tq.push(x);\n\t}\n\tint t=0;//t\u8bb0\u5f55\u7528\u65f6\u6700\u957f\u7684\u90a3\u4e2a \n\tfor(i=n;i>=1;i--)//\u4ece\u540e\u5f80\u524d \n\t{\n\t\tx=q.top();\n\t\tq.pop();\n\t\tt=max(t,x.s+f[i]);//\u8bb0\u5f97+f[i]\uff0cx\u4e0d\u7528\u81ea\u5df1\u52a0f[i] \n\t\tx.s=x.s+x.v;\n\t\tq.push(x);\n\t}\n\tprintf(\"%d %d\\n\",f[n],t);//\u8f93\u51fa \n\treturn 0;\n}\n```",
        "postTime": 1526449723,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u6709\u82e5\u5e72\u5de5\u4ef6\u9700\u8981**\u4f9d\u6b21**\u7ecf\u5386\u4e24\u9053\u5de5\u5e8f\u52a0\u5de5\u3002\u6bcf\u9053\u5de5\u5e8f\u5404\u6709\u82e5\u5e72\u53f0\u673a\u5668\u4f9b\u4f7f\u7528\uff0c\u52a0\u5de5\u65f6\u95f4\u5404\u4e0d\u76f8\u540c\u3002\u6c42\u52a0\u5de5\u5b8c\u8fd9\u4e9b\u5de5\u4ef6\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4\uff08\u6302\u949f\u65f6\u95f4\uff09\u3002\n\n## \u89e3\u9898\u601d\u8def\n\n\u5047\u5982\u53ea\u6709\u4e00\u9053\u5de5\u5e8f\uff0c\u90a3\u662f\u5f88\u5bb9\u6613\u7684\u3002\u5c31\u662f\u8d2a\u5fc3\u5730\u52a0\u5de5\u6bcf\u4e2a\u96f6\u4ef6\uff0c\u54ea\u4e2a\u673a\u5668\u52a0\u5de5\u5b8c\u540e\u7684\u6302\u949f\u65f6\u95f4\u77ed\u5c31\u7528\u54ea\u4e2a\u3002\n\n\u4f46\u662f\uff0c\u6709\u4e24\u9053\u5de5\u5e8f\uff0c\u90a3\u4e48\u5b8c\u6210\u5de5\u5e8f A \u540e\uff0c\u4e0d\u597d\u5224\u65ad\u5148\u52a0\u5de5\u8c01\uff0c\u540e\u52a0\u5de5\u8c01\u3002\u5373\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u76f4\u63a5\u4f9d\u6b21\u6a21\u62df\u4e24\u9053\u5de5\u5e8f\u6765\u5f97\u5230\u7b54\u6848\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8003\u8651\u5206\u5f00\u8fdb\u884c\u4e24\u6b65\u7684\u52a0\u5de5\uff1a\u5373\u5047\u8bbe\u5728 B \u673a\u5668\u540e\u9762\u4e5f\u6709\u540c\u6837\u6570\u91cf\u7684\u5de5\u4ef6\uff08\u79f0\u4e3a\u201c\u65b0\u5de5\u4ef6\u201d\uff09\u5728\u7b49\u7740\uff0c\u4e00\u4e2a\u5de5\u4ef6\u7684\u5de5\u5e8f A \u5b8c\u6210\u540e\uff0c\u5bf9\u5e94\u7684\u65b0\u5de5\u4ef6\u7acb\u5373\u8fdb\u5165 B \u673a\u5668\u3002\u5b83\u4eec\u5728\u4e2d\u95f4\u201c\u4f1a\u5408\u201d\uff0c\u6784\u6210\u6210\u54c1\u3002\u8003\u8651\u5230\u8fd9\u6837\u505a\uff0c\u5de5\u5e8f A\u3001B \u4e4b\u95f4\u5e76\u65e0\u4f9d\u8d56\u5173\u7cfb\uff0c\u6545\u6211\u4eec\u53ef\u4ee5**\u5206\u522b\u8ba1\u7b97**\u6bcf\u4e2a\u5de5\u4ef6\u7ecf\u5386\u4e24\u4e2a\u5de5\u5e8f\u7684\u65f6\u95f4\uff0c\u4e14\u4e00\u4e2a\u5de5\u4ef6\u6240\u7528\u7684\u65f6\u95f4\uff0c\u5c31\u662f\u5176\u4e24\u9053\u5de5\u5e8f\u7684\u65f6\u95f4**\u4e4b\u548c**\u3002\n\n\u6709\u4eba\u8981\u95ee\u4e86\uff1a\u8fd9\u6837\u505a\u4e0e\u9898\u610f\u4e0d\u4e00\u81f4\uff0c\u662f\u5426\u4f1a\u6539\u53d8\u7b54\u6848\u5462\uff1f\u5e76\u4e0d\u4f1a\u3002\u56e0\u4e3a\u201c\u65b0\u5de5\u4ef6\u201d\u8fdb\u5165 B \u673a\u5668\u662f\u5728\u5bf9\u5e94\u7684\u5de5\u4ef6\u5df2\u7ecf\u5b8c\u6210 A \u5de5\u5e8f\u4e4b\u540e\u3002\u5e76\u4e0d\u4f1a\u6709\u4e00\u5bf9\u201c\u5bf9\u5e94\u7684\u201d\u5de5\u4ef6\u540c\u65f6\u5728\u4e24\u4e2a\u673a\u5668\u91cc\u7684\u60c5\u51b5\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nint n, m1, m2, t, ans, a[35], b[35], t1[35], t2[35], f[1005];\n// t1, t2 \u5206\u522b\u4e3a\u4e24\u79cd\u673a\u5668\u52a0\u5de5\u5b8c\u6210\u540e\u7684\u6302\u949f\u65f6\u95f4\n\nint main() {\n    scanf(\"%d%d%d\", &n, &m1, &m2);\n    for(int i = 1; i <= m1; i++) scanf(\"%d\", a+i);\n    for(int i = 1; i <= m2; i++) scanf(\"%d\", b+i);\n\n    for(int i = 1; i <= n; i++) {\n        for(int j = t = 1; j <= m1; j++)\n            if(t1[j] + a[j] <= t1[t] + a[t]) t = j;\n        f[i] = t1[t] += a[t];\n    }\n    printf(\"%d \", f[n]);\n\n    for(int i = n; i; i--) {\n        for(int j = t = 1; j <= m2; j++)\n            if(t2[j] + b[j] <= t2[t] + b[t]) t = j;\n        f[i] += t2[t] += b[t];\n    }\n    printf(\"%d\\n\", *std::max_element(f+1, f+n+1));\n\n    return 0;\n}\n```",
        "postTime": 1677398605,
        "uid": 470348,
        "name": "oddy",
        "ccfLevel": 5,
        "title": "P2751 \u9898\u89e3"
    },
    {
        "content": "\u597d\u597d\u7684\u4e8c\u5206\u7b54\u6848\u88ab\u6211\u7528\u4e8c\u53c9\u5806\u505a\u662f\u4e0d\u662f\u4e0d\u592a\u597d\uff08\u975e\u6b63\u89e3\u8f7b\u55b7\uff09\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u7b2c\u4e00\u95ee\u4e8c\u5206\u7b54\u6848\u5c31\u53ef\u4ee5\u505a\uff0c\u81f3\u4e8e\u7b2c\u4e8c\u95ee\u5c31\u8981\u7528\u8d2a\u5fc3\u4e86\u3002\n\n\u4e0b\u9762\u662f\u672c\u849f\u84bb\u7684\u4e0d\u4e25\u683c\u7684\u8bc1\u660e\uff1a\n\n\u56e0\u4e3a,\u4e00\u4ef6\u7269\u54c1\u7684\u5b8c\u6210\u65f6\u95f4=a\u52a0\u5de5\u65f6\u95f4+b\u52a0\u5de5\u65f6\u95f4\u3002\u800c\u6211\u4eec\u6c42\u7684\u662f\u6700\u5927\u503c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u5c31\u8981\u4f7ftimea and timeb\u5c3d\u91cf\u5c0f\u3002\n\n\u6240\u4ee5\u7b2c\u4e00\u4e2a\u8d2a\u5fc3\u5c31\u662f\u5148\u6c42\u51fata\u548ctb\u6700\u5c0f\u7684n\u4e2a\u503c\u5b58\u5230pa\u548cpb\u4e2d\u3002\u4ecepa\u548cpb\u4e2d\u6c42\u5f97\u7b54\u6848\uff0c\u56e0\u4e3a\u5982\u679c\u5b8c\u6210\u65f6\u95f4\u7531\u4e0d\u662f\u524dn\u5c0f\u7684\u6570\u76f8\u52a0\u5f97\u5230\uff0c\u90a3\u4e48\u8be5\u7b54\u6848\u4e00\u5b9a\u4e0d\u4f1a\u4f18\u4e8e\u7531\u524dn\u5c0f\u7684\u6570\u76f8\u52a0\u5f97\u5230\u3002\n\n\u90a3\u4e48\u5c31\u7528\u4e8c\u53c9\u5806\u6c42\u51fapa\u548cpb,\u7279\u522b\u7684\uff0c\u8981\u628a\u4e00\u4e2a\u673a\u5668\u52a0\u5de5\u4e24\u6b21\u5f97\u5230\u4e24\u4ef6\u7269\u54c1\u7b49\u6548\u4e3a\u4e24\u4e2a\u65f6\u95f4\u76f8\u5dee\u4e00\u500d\u7684\u673a\u5668\u52a0\u5de5\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\u8f6c\u5316\u540e\u7684\u4efb\u4f55\u673a\u5668\u53ea\u52a0\u5de5\u4e00\u6b21\uff0c\u8be6\u89c1\u4ee3\u7801\uff09\n\n\u90a3\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u5c31\u662fpa[n]\uff08\u6709\u5e8f\uff09\uff0c\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u5728pa\u4e2d\u6700\u6709\u53ef\u80fd\u76f8\u52a0\u5f97\u5230\u6700\u5927\u5b8c\u6210\u65f6\u95f4\u7684\u4e00\u5b9a\u662f\u6700\u5927\u6570\u3002\u6211\u4eec\u9996\u5148\u8003\u8651pa\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570\uff0c\u5bf9\u5b83\u800c\u8a00\uff0c\u4e00\u5b9a\u8981\u9009pb\u4e2d\u7684\u6700\u5c0f\u6570\uff0c\u8fd9\u6837\u5f97\u51fa\u7684\u7b54\u6848\u624d\u4f1a\u662f\u6700\u4f18\u7684\u3002\u5f53\u4e24\u8005\u5339\u914d\u540e\uff0c\u5ffd\u7565\u8fd9\u4e8c\u8005\u518d\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b\u3002\u5728\u6c42\u51fa\u7684\u5b8c\u6210\u65f6\u95f4\u4e2d\u7684\u6700\u5927\u503c\u5e94\u8be5\u5c31\u662f\u7b54\u6848\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6o(nlogn)\n\n\u672c\u6765\u4ee5\u4e3a\u4f1a\u9519\u7684\uff0c\u7ed3\u679c\u5c45\u7136ac\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u672c\u849f\u84bb\u4e11\u964b\u7684\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<cstdio>\n#include<queue>\n#include<stack>\n#include<set>\n#include<map>\n#include<vector>\n#include<climits>\n#define rep(i,s,n) for(int (i)=(s);(i)<=(n);(i)++)\nusing namespace std;\nconst int maxn=1100,maxm=50;\nint hr=0;struct H{int d,v;}h[maxn];\nvoid ins(const H& T)\n{\n    int i;for(i=++hr;i!=1&&h[i>>1].v>T.v;i>>=1) h[i]=h[i>>1];h[i]=T;\n}\nvoid dlt()\n{\n    hr--;int i;for(i=1;(i<<1)<=hr&&(h[i<<1].v<h[hr+1].v||h[i<<1|1].v<h[hr+1].v);)\n    i<<1!=hr&&(h[i<<1|1].v<h[i<<1].v)?(h[i]=h[i<<1|1],i=i<<1|1):(h[i]=h[i<<1],i<<=1);\n    h[i]=h[hr+1];\n}\n```\nstatic int a[maxm],b[maxm],n,ma,mb,\n\n```cpp\n           pa[maxn],pb[maxn],cnt;\nint main()\n{\n     scanf(\"%d%d%d\",&n,&ma,&mb);\n     rep(i,1,ma) scanf(\"%d\",&a[i]);\n     rep(i,1,mb) scanf(\"%d\",&b[i]);\n    rep(i,1,ma) ins((H){i,a[i]});\n    while(++cnt<=n)\n    {\n        pa[cnt]=h[1].v;\n        H tmp=h[1];\n        dlt();ins((H){tmp.d,tmp.v+a[tmp.d]});\n    }\n    printf(\"%d \",pa[n]);\n    memset(h,0,sizeof(h));hr=0;\n    rep(i,1,mb) ins((H){i,b[i]});\n    while(--cnt)\n    {\n        pb[cnt]=h[1].v;\n        H tmp=h[1];\n        dlt();ins((H){tmp.d,tmp.v+b[tmp.d]});\n    }\n    int ans=-1<<29;\n    rep(i,1,n) \n    {\n        ans=max(ans,pa[i]+pb[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}//by lyyz-ljy\n\n```",
        "postTime": 1474178060,
        "uid": 17378,
        "name": "Vin_1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2751 \u3010[USACO4.2]\u5de5\u5e8f\u5b89\u6392Job Processing\u3011"
    }
]