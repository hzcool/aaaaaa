[
    {
        "content": "\u89e3\u9898\u601d\u8def:\n\u8bb0\u5f55\u6240\u6709\u7269\u54c1\u5728\u54ea\u4e00\u5929\u5f00\u59cb\u6253\u6298\uff0c\u5728\u54ea\u4e00\u5929\u7ed3\u675f\u6253\u6298\u3002\n\n\u79bb\u6563\u5316\u6240\u6709\u65f6\u95f4\uff0c\u5148\u66b4\u529b\u6240\u6709\u7269\u54c1\u672a\u6253\u6298\u7684\u6700\u5c0f\u503c\uff08\u4f7f\u7528 multiset \u5feb\u901f\u627e\u51fa\uff09\uff0c\u518d\u679a\u4e3e\u6bcf\u4e00\u5929\uff0c\u8ba1\u7b97\u8d21\u732e\uff0c\u5feb\u901f\u5f97\u51fa\u5f53\u5929\u82b1\u8d39\u7684\u6700\u5c0f\u503c\uff0c\u6700\u7ec8\u5373\u53ef\u5f97\u51fa\u7b54\u6848\u3002\n\n\u4ee3\u7801\u6709\u6ce8\u91ca\u3002\n\n\u6ce8\u610f\u4e8b\u9879:\n\u6253\u6298\u65f6\u95f4\u4e3a $[s,t]$\uff0c\u610f\u5473\u7740\u7b2c $t+1$ \u5929\u624d\u7ed3\u675f\u6253\u6298\u3002\n\n\u53c2\u8003\u4ee3\u7801:\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n \n// 2023 OneWan\n \nconst int MAXM = 100000 + 5;\nint s[MAXM], t[MAXM], p[MAXM], c[MAXM]; // \u5bf9\u5e94\u9898\u76ee\u8f93\u5165\u7684\u5404\u6570\u7ec4\nmultiset<long long> st[MAXM]; // st[i] \u4e3a \u7269\u54c1 i \u5728\u6240\u6709\u5546\u5e97\u7684\u4ef7\u683c\nvector<vector<pair<int, int>>> v(MAXM); // v[i][j] \u4e3a \u5546\u5e97 i \u51fa\u552e\u7684 \u7b2c j \u4e2a\u7269\u54c1\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    int n, m;\n    cin >> n >> m;\n    vector<int> time; // \u7528\u4e8e\u79bb\u6563\u5316 \u65f6\u95f4\n    for (int i = 0 ; i < m ; i++) {\n        cin >> s[i] >> t[i] >> p[i] >> c[i];\n        time.emplace_back(s[i]);\n        time.emplace_back(t[i] + 1); // \u6253\u6298\u662f\u95ed\u533a\u95f4 \u6240\u4ee5\u9700\u8981+1\u624d\u662f\u6ca1\u6709\u6253\u6298\u622a\u6b62\n        for (int j = 0 ; j < c[i] ; j++) {\n            int a, b; // \u7269\u54c1\u7f16\u53f7\u53ca\u539f\u4ef7\n            cin >> a >> b;\n            v[i].emplace_back(a, b);\n        }\n    }\n    sort(time.begin(), time.end()); // \u6392\u5e8f\u65f6\u95f4\n    time.resize(unique(time.begin(), time.end()) - time.begin()); // \u79bb\u6563\u5316\u65f6\u95f4\n    auto get = [&](int t) {\n        return lower_bound(time.begin(), time.end(), t) - time.begin();\n    }; // \u83b7\u53d6\u79bb\u6563\u5316\u540e\u7684\u4e0b\u6807\n    int len = time.size();\n    vector<vector<pair<int, int>>> startD(len), endD(len);\n    // startD[i] \u4e3a \u7b2c i \u5929 \u5f00\u59cb\u6253\u6298\u7684\u7269\u54c1\u7f16\u53f7 \u548c \u6253\u6298\u540e\u7684\u4ef7\u683c\n    // endD[i] \u4e3a \u7b2c i \u5929 \u7ed3\u675f\u6253\u6298\u7684\u7269\u54c1\u7f16\u53f7 \u548c \u6253\u6298\u540e\u7684\u4ef7\u683c\n    for (int i = 0 ; i < m ; i++) {\n        int starts = get(s[i]), ends = get(t[i] + 1); // \u83b7\u53d6\u6253\u6298\u5f00\u59cb\u4e0e\u7ed3\u675f\u65f6\u95f4\u79bb\u6563\u5316\u540e\u7684\u4e0b\u6807\n        for (auto& [x, y] : v[i]) {\n            int t = 1LL * y * p[i] / 100; // \u6253\u6298\u540e\u7684\u4ef7\u683c\n            st[x].insert(y); // \u628a\u7269\u54c1\u539f\u4ef7\u653e\u5165\n            startD[starts].emplace_back(x, t);\n            endD[ends].emplace_back(x, t);\n        }\n    }\n    long long temp = 0; // \u7528\u4e8e\u5b58\u6bcf\u5929\u8d2d\u4e70\u6240\u6709\u7269\u54c1\u6240\u7528\u7684\u4ef7\u683c\n    for (int i = 1 ; i <= n ; i++) temp += *st[i].begin(); // \u8ba1\u7b97\u4e0d\u8fdb\u884c\u6253\u6298\u65f6\u8d2d\u4e70\u6240\u6709\u7269\u54c1\u6240\u7528\u7684\u4ef7\u683c\n    long long ans = temp;\n    for (int i = 0 ; i < len ; i++) {\n        long long k = 0; // \u6253\u6298\u4e0e\u4e0d\u6253\u6298\u5bf9\u4ef7\u683c\u7684\u8d21\u732e\n        for (auto& [x, y] : startD[i]) { // \u904d\u5386\u5f53\u5929\u6240\u6709\u5f00\u59cb\u6253\u6298\u7684\u7269\u54c1 \u6253\u6298\u524d\u4ef7\u683c\u6700\u5c0f\u503c\u4e3aa, \u6253\u6298\u540e\u4ef7\u683c\u6700\u5c0f\u503c\u4e3ab, \u8d21\u732e\u4e3ab - a\n            k -= *st[x].begin();\n            st[x].insert(y);\n            k += *st[x].begin();\n        }\n        for (auto& [x, y] : endD[i]) { // \u904d\u5386\u5f53\u5929\u6240\u6709\u7ed3\u675f\u6253\u6298\u7684\u7269\u54c1 \u6253\u6298\u524d\u4ef7\u683c\u6700\u5c0f\u503c\u4e3aa, \u6253\u6298\u540e\u4ef7\u683c\u6700\u5c0f\u503c\u4e3ab, \u8d21\u732e\u4e3ab - a\n            k -= *st[x].begin();\n            int t = st[x].count(y);\n            st[x].erase(y);\n            for (int j = 1 ; j < t ; j++) st[x].insert(y);\n            k += *st[x].begin();\n        }\n        temp += k; // \u52a0\u4e0a\u8d21\u732e, \u7531\u524d\u4e00\u6bb5\u8f6c\u79fb\u5230\u540e\u4e00\u6bb5\n        ans = min(ans, temp); // \u627e\u82b1\u8d39\u6700\u5c0f\n    }\n    cout << ans;\n    return 0;\n}\n  ```\n  \n----------------\n\n\u4e0d\u559c\u52ff\u55b7\uff01",
        "postTime": 1680417317,
        "uid": 616996,
        "name": "tmp_get_zip_diff",
        "ccfLevel": 0,
        "title": "P8812\u9898\u89e3"
    }
]