[
    {
        "content": "\u6765\u4e2a\u6211\u81ea\u5df1\u80e1\u51fa\u6765\u7684\u5206\u5c42\u56fe\u89e3\u6cd5~\n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u4e0a\u5982\u679c\u6709\u591a\u4e2a\u8349\u5806\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u6709\u7f8e\u5473\u503c\u6700\u5927\u7684\u90a3\u4e00\u6346\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u5c31\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u70b9\u4e0a\u53ea\u6709\u4e00\u5806\u8349\u7684\u95ee\u9898\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u4e00\u53ea\u725b\u53ea\u80fd\u7ecf\u8fc7\u4e00\u4e2a\u8349\u5806\uff0c\u6240\u4ee5\u8003\u8651\u5206\u4e24\u5c42\uff0c\u7b2c\u4e00\u5c42\u8868\u793a\u6ca1\u6709\u7ecf\u8fc7\u8349\u5806\uff0c\u7b2c\u4e8c\u5c42\u8868\u793a\u5df2\u7ecf\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u8349\u5806\u3002\n\n\u73b0\u5728\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u5c31\u5f88\u660e\u663e\u4e86\uff1a\n\n\u5bf9\u4e8e\u539f\u56fe\u7684\u6bcf\u4e00\u6761\u8fb9 $<u\\leftrightarrow v,w>$\uff0c\u8fde\u8fb9 $<u\\leftrightarrow v,w>$ \u548c $<u+n\\leftrightarrow v+n,w>$\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8349\u5806 $(i,y_i)$\uff0c\u8fde\u8fb9 $<i+n\\rightarrow i,-y_i>$\u3002\n\n\u7136\u540e\u4ee5 $n$ \u4e3a\u6e90\u70b9\u8dd1\u4e00\u904d SPFA\uff0c\u8bbe\u7ed3\u679c\u4e3a $d_1$\uff1b\u518d\u4ee5 $2n$ \u4e3a\u6e90\u70b9\u8dd1\u4e00\u904d SPFA\uff0c\u8bbe\u7ed3\u679c\u4e3a $d_2$\u3002\n\n\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $i<n$\uff0c\u5224\u65ad\u5982\u679c $d_{1,i} \\geq d_{2,i}$\uff0c\u5219\u8f93\u51fa $1$\uff1b\u5426\u5219\u8f93\u51fa $0$\u3002\n\n\u95ee\u9898\u89e3\u51b3~\n\n\u6700\u540e\u7684\u590d\u6742\u5ea6\u5c31\u662f $O(\\text{SPFA})$\uff0c\u6700\u574f\u662f $O(NM)$\uff0c\u4f46\u662f\u80fd\u8fc7\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\n#define int long long\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nstruct Edge {\n\tint to, len, nxt;\n\tEdge() {\n\t\tnxt = -1;\n\t}\n};\nint hd[100005], pnt, n, m, k, val[100005], dist[2][100005], inq[100005];\nEdge e[500005];\n\ninline void AddEdge(int u, int v, int w) {\n\te[++pnt].to = v;\n\te[pnt].len = w;\n\te[pnt].nxt = hd[u];\n\thd[u] = pnt;\n}\n\ninline void Read() {\n\tn = qread(); m = qread(); k = qread();\n\tfor (register int i = 1;i <= m;i++) {\n\t\tregister int u = qread(), v = qread(), w = qread();\n\t\tAddEdge(u, v, w);\n\t\tAddEdge(v, u, w);\n\t\tAddEdge(u + n, v + n, w);\n\t\tAddEdge(v + n, u + n, w);\n\t}\n\tfor (register int i = 1;i <= k;i++) {\n\t\tregister int x = qread(), y = qread();\n\t\tval[x] = Max(val[x], y);\n\t}\n}\n\ninline void SPFA(int s, int k) {\n\tqueue <int> que;\n\tmemset(inq, 0, sizeof(inq));\n\tmemset(dist[k], 0x3f, sizeof(dist[k]));\n\tdist[k][s] = 0;\n\tque.push(s);\n\tinq[s] = 1;\n\twhile (!que.empty()) {\n\t\tregister int u = que.front();\n\t\tque.pop();\n\t\tinq[u] = 0;\n\t\tfor (register int i = hd[u];~i;i = e[i].nxt) {\n\t\t\tif (dist[k][e[i].to] > dist[k][u] + e[i].len) {\n\t\t\t\tdist[k][e[i].to] = dist[k][u] + e[i].len;\n\t\t\t\tif (!inq[e[i].to]) {\n\t\t\t\t\tinq[e[i].to] = 1;\n\t\t\t\t\tque.push(e[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void Solve() {\n\tfor (register int i = 1;i <= n;i++) {\n\t\tif (val[i]) AddEdge(i + n, i, -val[i]);\n\t}\n\tSPFA(n << 1, 1);\n\tfor (register int i = 1;i < n;i++) {\n\t\t//printf(\"%lld %lld\\n\", dist[0][i], dist[1][i]);\n\t\tif (dist[0][i] >= dist[1][i]) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\t//printf(\"%lld %lld\\n\", dist[0][n], dist[1][n]);\n}\n\nsigned main() {\n\tmemset(hd, -1, sizeof(hd));\n\tRead();\n\tSPFA(n, 0);\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1585646310,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining G\u3011"
    },
    {
        "content": "### \u5eb7\u5230\u697c\u4e0b\u5168\u7528\u7684~~\u67d0\u5df2\u6b7b\u7b97\u6cd5~~$SPFA$\uff0c\u7a9d\u5c31\u6765\u7528\u4e00\u4e2a$dijkstra!$\n\n\u601d\u8def\uff1a\u5efa\u5b8c\u56fe\uff0c\u4ee5 $N$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u8fb9 $dijkstra$\uff0c\u8bb0\u5f55 $N$ \u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u518d\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u7684`\u5e72\u8349\u5806\u64cd\u4f5c`\uff0c\u5c06 $N+1$ \u4e0e $pos$ \u4e4b\u95f4\u5efa\u4e00\u6761\u957f\u5ea6\u4e3a $N$ \u5230\u8fd9\u4e2a\u4e2a\u70b9\u7684\u8ddd\u79bb\u51cf $x$ \u7684\u8fb9\u3002\u518d\u4ee5 $N+1$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u8fb9 $dijkstra$ \u540e\uff0c\u4ece $1$ \u5230 $N-1$ \u679a\u4e3e\uff0c\u5982\u679c $N$ \u5230 $i$ \u7684\u6700\u77ed\u8def\u5c0f\u4e8e $N+1$ \u5230 $i$ \u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa $1$\uff0c\u5426\u5219\u8f93\u51fa $0$\u3002\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int MAXN=50010;\ntypedef long long ll;\nint n,m,k;\nll d[MAXN],a[MAXN],ans[MAXN];\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\n\treturn s*w;\n}\ninline ll read_ll()\n{\n\tll s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\n\treturn s*w;\n}\nstruct edge\n{\n\tint to;\n\tll cost;\n\tedge(int to,ll cost):to(to),cost(cost){}\n};\nvector<edge>G[MAXN];\ntypedef pair<ll,int>P;\nvoid dijkstra(int s)\n{\n\tpriority_queue<P,vector<P>,greater<P> >q;\n\tfor(register int i=1;i<=n;i++) d[i]=0x3f3f3f3f;\n\td[s]=0;\n\tq.push(make_pair(0,s));\n\twhile(!q.empty())\n\t{\n\t\tP p=q.top();\n\t\tq.pop();\n\t\tint v=p.second;\n\t\tif(d[v]<p.first) continue;\n\t\tfor(register int i=0;i<G[v].size();i++)\n\t\t{\n\t\t\tedge e=G[v][i];\n\t\t\tif(d[e.to]>d[v]+e.cost)\n\t\t\t{\n\t\t\t\td[e.to]=d[v]+e.cost;\n\t\t\t\tq.push(make_pair(d[e.to],e.to));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),m=read(),k=read();\n\twhile(m--)\n\t{\n\t\tint u=read(),v=read();\n\t\tll w=read_ll(); \n\t\tG[u].push_back(edge(v,w));\n\t\tG[v].push_back(edge(u,w));\n\t}\n\tdijkstra(n);\n\tfor(register int i=1;i<=n;i++) ans[i]=d[i];\n\tfor(register int i=1;i<=k;i++)\n\t{\n\t\tint pos=read();\n\t\tll x=read_ll();\n\t\tG[n+1].push_back(edge(pos,d[pos]-x));\n\t}\n\tdijkstra(n+1);\n\tfor(register int i=1;i<n;i++)\n\t\tif(d[i]<=ans[i]) printf(\"%d\\n\",1);\n\t\telse printf(\"%d\\n\",0);\n\treturn 0;\n}\n```\n\u7b2c\u4e00\u7bc7\u7d2b\u9898\u9898\u89e3\uff0c\u73c2\u4ee5\u70b9\u4e2a\u8d5e\u5728\u8d70\u4e48\uff1fOrz",
        "postTime": 1590283049,
        "uid": 342090,
        "name": "Fangfx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining G\u3011"
    },
    {
        "content": "   \u770b\u5230\u6b64\u9898\u6211\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u5148\u6c42\u6bcf\u4e2a\u70b9\u53bb\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u53ea\u8981\u628a\u7ec8\u70b9\u4f5c\u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d$SPFA$\u6216$Dijkstra$\u5c31\u53ef\u4ee5\u4e86\n   \n   \u4f46\u662f\u9898\u76ee\u8981\u6c42\u7684\u662f\u6bcf\u5934\u725b\u80fd\u5426\u7ecf\u8fc7\u67d0\u4e2a\u5e72\u8349\u579b\u5728\u56de\u5230\u7ec8\u70b9\uff0c\u4e14\u65f6\u95f4\u4e0e\u6700\u77ed\u7684\u76f8\u6bd4\u4e0d\u80fd\u8d85\u8fc7\u5176\u7f8e\u5473\u503c(\u4e0d\u59a8\u8bb0\u505a$v[i]$)\uff0c\u8fd9\u91cc\u7684\u7f8e\u5473\u503c\u76f8\u5f53\u4e8e\u662f\u7528\u6765\u62b5\u6d88\u65f6\u95f4\u7684\uff0c\u90a3\u4e48\u600e\u4e48\u505a\u5462\uff1f\n   \n   \u5b9a\u4e49$f[i]$\u8bb0\u505a\u4ece\u7b2c$i$\u4e2a\u70b9\u5f00\u59cb\u5230$n$\u7684\u6700\u77ed\u65f6\u95f4\n   \n   * \u7b2c\u4e00\u79cd\u601d\u8def\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u70b9$i$\uff0c\u6bcf\u4e2a\u90fd\u8dd1$1$\u904d\u6700\u77ed\u8def\uff0c$f2[j]$\u5c31\u8868\u793a\u4ece\u7b2c$i$\u4e2a\u70b9\u51fa\u53d1\uff0c\u5230\u8fbe\u70b9$j$\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u7136\u540e\u518d\u679a\u4e3e\u5e72\u8349\u579b$k_i(1\u2264_i\u2264k)$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$k_i$\uff0c\u5982\u679c\u4f7f\u5f97\n   \n   $f2[k_i]+f[k_i]-v[k_i]\u2264f[i]$\n   \n   \u90a3\u4e48\u7b2c$i$\u5934\u5976\u725b\u5c31\u7b26\u5408\u9898\u610f\uff0c\u8f93\u51fa$1$\n   \n\u5f88\u663e\u7136\u8fd9\u592a\u66b4\u529b\uff0c\u5149\u662f\u679a\u4e3e\u5c31\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(nk)$\uff0c\u66f4\u522b\u63d0\u8dd1\u6700\u77ed\u8def\u7684\u590d\u6742\u5ea6\u4e86\uff0c\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002\n\n\u90a3\u5982\u679c\u628a\u601d\u8def\u8f6c\u6362\u4e00\u4e0b\uff0c\u6c42**\u4ece\u6bcf\u4e2a\u5e72\u8349\u579b\u53bb\u5230\u6bcf\u5934\u5976\u725b\u7684\u6700\u77ed\u65f6\u95f4**\u5462\uff1f\n\n\u8fd9\u65f6\u5019\u5c31\u4ea7\u751f\u4e86\u4e00\u79cd\u5de7\u5999\u7684\u505a\u6cd5\uff1a\n   * \u65b0\u5efa\u4e00\u4e2a\u70b9$n+1$\uff0c\u628a\u5b83\u4e0e\u6bcf\u4e2a\u5e72\u8349\u579b\u5efa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u7136\u540e\u4ee5$n+1$\u4e3a\u8d77\u70b9\uff0c\u4fdd\u8bc1\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u8349\u579b\uff0c$so$\u8dd1\u4e00\u904d$SPFA$\u5c31\u53ef\u4ee5\u6c42\u51fa\u4e0a\u9762\u7684\u95ee\u9898\u4e86\u3002\u867d\u7136\u73b0\u5728\u5df2\u6c42\u51fa\u67d0\u4e2a\u70b9\u53bb\u5230\u67d0\u4e2a\u8349\u579b\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u4f46\u662f\u5e76\u4e0d\u77e5\u53bb\u7684\u662f\u54ea\u4e2a\u8349\u579b\u3002\u6240\u4ee5\uff0c\u5c31\u8981\u628a\u65b0\u52a0\u7684\u6709\u5411\u8fb9\u7684\u6743\u503c\u8bbe\u4e3a$f[i]-v[i]$($i$\u8868\u793a\u7b2c$i$\u4e2a\u8349\u579b)\uff0c\u8fd9\u6837\u4e00\u6765\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u3002\n   \n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a$f[i]-v[i]$\u662f\u7528\u7f8e\u5473\u503c**\u5148\u53bb\u62b5\u6d88**\u603b\u7684\u65f6\u95f4\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e86\u89e3\u53bb\u7684\u662f\u54ea\u4e2a\u8349\u579b\u4e86\uff0c\u8fd9\u91cc\u603b\u7684\u65f6\u95f4\u662f\u6307 $f[i]+$\u67d0\u4e2a\u70b9\u5230\u8349\u579b$i$\u7684\u6700\u77ed\u65f6\u95f4 \uff0c\u8dd1\u5b8c\u7b2c\u4e8c\u904d$SPFA$\u540e\uff0c\u628a\u7ed3\u679c\u653e\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\uff08\u5047\u8bbe\u662f$D[i]$\u5427\uff09\u3002\u6700\u540e\u8f93\u51fa\u65f6\u5224\u65ad\u4e00\u4e0b$D[i]\u2264f[i]$\uff0c\u662f\u5c31\u8f93\u51fa$1$\uff0c\u5426\u5219\u8f93\u51fa$0$\u3002\n\n\u987a\u4fbf\u8d34\u4e0a\u4ee3\u7801\u5427\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,k;\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\nstruct node{\n    int v;\n    long long tim;\n    node *nxt;\n    node(int v=0,int tim=0,node *nxt=NULL):v(v),tim(tim),nxt(nxt){}\n}*head[50000];\n\nbool vis[50000];\n\nlong long f[50000];//\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n\nlong long f2[50000];//\u7ecf\u8fc7\u8349\u579b\u7684\u65f6\u95f4\n\nvoid add(int u,int v,long long c){\n    node *A=new node(v,c,head[u]);\n    head[u]=A;\n}\n//spfa\u6a21\u677f\nvoid spfa(int s){\n    for(int i=1;i<=n;i++)\n        f[i]=100000000000000;\n    f[s]=0;\n    queue<int>q;\n    q.push(s);\n    memset(vis,0,sizeof(vis));\n    vis[s]=true;\n    while(!q.empty()){\n        int cur=q.front();\n        q.pop();\n        vis[cur]=false;\n        for(node *i=head[cur];i!=NULL;i=i->nxt){\n            if( f[cur]+i->tim < f[i->v] ){\n                f[i->v]=f[cur]+i->tim;\n                if(!vis[i->v]){\n                    q.push(i->v);\n                    vis[i->v]=true;\n                }\n            }\n        }\n    }\n    return;\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        int x,y;\n        long long z;\n        scanf(\"%d%d%lld\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);//\u5efa\u53cc\u5411\u8fb9\n    }\n    spfa(n);//\u5148\u6c42\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n    for(int i=1;i<=n;i++)\n        f2[i]=f[i];\n    for(int i=1;i<=k;i++){\n        int x;\n        long long d;\n        scanf(\"%d%lld\",&x,&d);\n        add(n+1,x,f[x]-d);//\u65b0\u5efa\u6709\u5411\u8fb9\uff0c\u5e76\u7528\u7f8e\u5473\u503c\u5148\u62b5\u6d88\u603b\u65f6\u95f4\n    }\n    spfa(n+1);//\u6c42\u51fa\u7ecf\u8349\u579b\u5230\u7ec8\u70b9\u7684\u65f6\u95f4\n    for(int i=1;i<n;i++){\n        if(f[i]<=f2[i]) puts(\"1\");\n        else puts(\"0\");\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1547974241,
        "uid": 52881,
        "name": "super\u849f\u84bb",
        "ccfLevel": 10,
        "title": "luogu-P5122"
    },
    {
        "content": "##\n\u548c\u5176\u4ed6\u4eba\u7684\u601d\u8def\u4e0d\u5927\u4e00\u6837\uff0c\u8fd9\u4e2a\u9898\u5e76\u4e0d\u75282\u6b21spfa\u6765\u505a\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u5206\u5c42\u56fe\u6700\u77ed\u8def\u6765\u5b9e\u73b0\uff0c\u4ee3\u7801\u96be\u5ea6\u504f\u4f4e\uff0c\u53ea\u8981\u80fd\u5efa\u597d\u56fe\u5c31\u662f\u4e2a\u5355\u7eaf\u7684\u6700\u77ed\u8def\u95ee\u9898\u4e86\uff1b\n```\n#include<iostream>\n#include<queue>\n#include<cstring>\nusing namespace std;\n\nconst int N=5*100005;\nconst int M=11*10005; \n\nlong long cnt=0,ver[N],head[M],edge[N],nexts[N];//\u5206\u5c42\u56fe\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u5927\uff0c\u6839\u636e\u5c42\u6570\u548c\u70b9\u6570\u6765\u786e\u5b9a\uff0c\u5982\u679c\u5b9e\u5728\u4e0d\u786e\u5b9a\u5c31\u52b2\u91cf\u5f00\u5927\u70b9\uff1b\n\nlong long vis[M],dis[M];\n\nvoid add(int x,int y,int z)\n{\n\tver[++cnt]=y,edge[cnt]=z,nexts[cnt]=head[x],head[x]=cnt;\n}\n\nint n,m,k;\n\nvoid spfa()\n{\n\tqueue<int>q;\n\tmemset(dis,0x7f,sizeof(dis));\n\tq.push(n);\n\tvis[n]=1;\n\tdis[n]=0;\n\twhile(!q.empty())\n\t{\n\t\tint w=q.front();\n\t\tq.pop();\n\t\tvis[w]=0;\n\t\tfor(int i=head[w];i;i=nexts[i])\n\t\t{\n\t\t\tint v=ver[i];\n\t\t\tif(dis[v]>dis[w]+edge[i])\n\t\t\t{\n\t\t\t\tdis[v]=dis[w]+edge[i];\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}//\u6c42\u6700\u77ed\u8def\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684QwQ,\u7b80\u5355\u5427;\n\nint main()\n{\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t\tadd(x+n,y+n,z);\n\t\tadd(y+n,x+n,z);//\u5206\u5c42\u56fe\u6700\u77ed\u8def\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u5efa\u56fe\uff0c\u6211\u4eec\u8fd9\u4e2a\u9898\u53ef\u4ee5\u5efa2\u4e2a\u56fe\u4e00\u4e2a\u4ee3\u8868\u6ca1\u6709\u7ecf\u8fc7\u7518\u8349\u7684\uff0c\u4e00\u4e2a\u4ee3\u8868\u7ecf\u8fc7\u7518\u8349\u7684\uff0c\u663e\u7136x+n\u662f\u4ee3\u8868\u5403\u8fc7\u8349\u540e\u7684\u8def\u5f84\uff0c\u800cx\u5c31\u662f\u672a\u5403\u8349\u7684\u8def\u5f84\uff1b\n\t}\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x;\n\t\tlong long y;\n\t\tcin>>x>>y;\n\t\tadd(x,x+n,-y);//\u5c06\u6709\u7518\u8349\u7684\u8fde\u8fb9\uff0c\u5c31\u662fx\u4e0ex+n\u76f8\u8fde\uff0c\u8fb9\u6743\u5c31\u662f\u8d1f\u7684\u7f8e\u5473\u5ea6;\n\t}\n\tspfa();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tif(dis[i]>=dis[n+i])cout<<1<<endl;//\u5982\u679c\u5403\u8fc7\u8349\u7684\u6bd4\u6ca1\u5403\u8349\u7684\u8fdc\u5c31\u4ee3\u8868\u4e0d\u884c\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\u5df2\u7ecf\u51cf\u53bb\u7f8e\u5473\u5ea6\u4e86\uff1b\n\t\telse cout<<0<<endl; \n\t}\n} \n```",
        "postTime": 1552831833,
        "uid": 122822,
        "name": "Merci",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f**SPFA+\u8d85\u7ea7\u6c47**\uff0c\n\u7136\u540e\u6bd4\u8f83\u4e00\u4e2a\u70b9\u5230\u7ec8\u70b9\u4e0e\u5230\u8d85\u7ea7\u6c47\u7684\u8ddd\u79bb\uff0c\u5f97\u51fa\u7b54\u6848\u3002\n\n\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a(\u7d2b\u8272\u4ee3\u8868\u7f8e\u5473\u503c)\n\n![PIC1](https://cdn.luogu.com.cn/upload/pic/52459.png)\n\n \n\u90a3\u4e48\u6211\u4eec\u5148SPFA\u4e00\u6ce2\uff0c\u5f97\u51fa\u6bcf\u4e00\u4e2a\u6570\u7684dis\u503c(\u6a59\u8272)\u3002\n\n![PIC2](https://cdn.luogu.com.cn/upload/pic/52460.png)\n\n\u7136\u540e\u5c31\u662f\u7384\u5b66\u64cd\u4f5c\uff1a\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6c47(\u7ea2\u8272)\uff0c\u628a\u7f8e\u5473\u503c\u4e3adi\u7684\u8282\u70b9ai\u6c47\u96c6\u5230\u4e00\u4e2a\u70b9\uff0c\u5e76\u4e14\u8fde\u4e0a\u4e00\u6761\u957f\u5ea6\u4e3a\uff08dis2[ai]-di\uff09\u7684\u8fb9\u3002\n\n![PIC3](https://cdn.luogu.com.cn/upload/pic/52461.png)\n\n\u4e3a\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u4e00\u5934\u725b\u8981\u53bb\u5403\u552f\u4e00\u7684\u4e00\u579b\u5e72\u8349\uff0c\u90a3\u4e48\u8fd9\u5934\u725b\u4ec0\u4e48\u6761\u4ef6\u4e0b\u4f1a\u53bb\u5403\uff1f\n\n\u5728 **\u591a\u8d70\u7684\u8def<=\u7f8e\u5473\u503c** \u7684\u65f6\u5019\u3002\n\n\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff0c\u81ea\u5e26\u7f8e\u5473\u503c\u7684\u8282\u70b9\uff0c\u5f53\u7f8e\u5473\u503c=0\uff0c\u5176\u591a\u8d70\u7684\u8def=0\uff0c\u90a3\u4e48\u8def\u5f84\u957f\u5ea6\u5e94\u5f53\u4e0d\u6539\u53d8\u3002\u5982\u679c\u81ea\u5e26\u7f8e\u5473\u503c\u7684\u8282\u70b9\uff0c\u5176\u7f8e\u5473\u503c>0\uff0c\u90a3\u4e48\u8def\u5f84\u957f\u5ea6\u4f1a\u51cf\u5c0f\u7f8e\u5473\u503c\u3002\u56e0\u4e3a\u4e00\u65e6\u5230\u8fbe\u4e86\u4efb\u610f\u4e00\u4e2a\u6709\u5e72\u8349\u7684\u8282\u70b9\uff0c\u5c31\u4e0d\u4f1a\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u6709\u5e72\u8349\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u52a0\u4e0a\u6709\u5e72\u8349\u8282\u70b9\u7684dis\u503c\uff0c\u518d\u51cf\u53bb\u83b7\u5f97\u7684\u7f8e\u5473\u503c\u52a0\u6210\u3002\n\n\u662f\u4e0d\u662f**\u5c31\u662f\u53e6\u5916\u4e00\u4e2aSPFA**\uff1f\n\n\u6709\u4e00\u70b9\u7384\u5b66\uff0c\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u3002\n\n\u63a5\u4e0b\u6765\u5230\u4e86\u5751\u70b9\u65f6\u95f4\uff0c\u5bf9\u4e8e\u6211\u505a\u8fd9\u9053\u9898\u88ab\u5751\u7684\u5730\u65b9\u7a0d\u4f5c\u8d4f\u6790\u3002\n\n1.  \u6ce8\u610f\uff0c\u548c\u8d85\u7ea7\u6c47\u76f8\u8fde\u7684\u8fb9**\u9700\u8981\u4e3a\u5355\u5411\u8fb9**\u3002\u56e0\u4e3a\u9898\u76ee\u4e0d\u4fdd\u8bc1(dis2[ai]-di)\u7684\u503c\u4e3a\u6b63\uff0c\u90a3\u4e48\u53ef\u80fd\u51fa\u73b0\u8d1f\u73af\u3002\u867d\u7136\u7406\u8bba\u4e0aSPFA\u53ef\u4ee5\u89e3\u51b3\u8d1f\u73af\uff0c\u4f46\u662f\u8fd9\u4e2a\u4f1a\u88ab\u5361\u4f4f\u3002\n\n2.  **\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u662f\u53ef\u4ee5\u7684**\uff01\u4e5f\u8981\u8f93\u51fa1\uff01\u6211\u88ab\u8fd9\u4e2a\u5361\u4e86\u534a\u4e2a\u4e0b\u5348\uff01\n\n**\u4e0d\u5efa\u8bae\u60a8\u6284\u88ad\u4ee3\u7801\uff0c\u81ea\u8ba4\u4e3a\u5199\u5f97\u6bd4\u8f83\u8be6\u7ec6\u3002\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u79c1\u4fe1\u6211\u3002**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint dis[300005],dis2[300005],n,m,s,head[300005],cnt=0,a1,a2,a3,k;\nbool vis[300005];\nstruct Node{\n    int nxt,to,w;\n}edge[300005];\nvoid addedge(int x,int y,int w){\n    edge[++cnt].nxt=head[x];\n    edge[cnt].w=w;\n    edge[cnt].to=y;\n    head[x]=cnt;\n}\nvoid spfa(int s){\n    queue <int> q;\n    memset(vis,0,sizeof(vis));\n    memset(dis,0x3f,sizeof(dis));\n    q.push(s);\n    dis[s]=0;\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        vis[x]=0;\n        for(int i=head[x];i;i=edge[i].nxt){\n            int v=edge[i].to;\n            if(dis[v]>dis[x]+edge[i].w){\n                dis[v]=dis[x]+edge[i].w;\n                if(!vis[v]){\n                    q.push(v);\n                    vis[v]=1;\n                }\n            }\n        }\n    }\n}\nint main(){//\u9053\u8def\u5343\u4e07\u6761\uff0c\u5b89\u5168\u7b2c\u4e00\u6761\u3002\u4ee3\u7801\u4e0d\u89c4\u8303\uff0c\u63d0\u4ea4\u4e24\u884c\u6cea\u3002 \n    cin>>n>>m>>k;\n    for(int i=1;i<=m;++i)\n        scanf(\"%d %d %d\",&a1,&a2,&a3),addedge(a1,a2,a3),addedge(a2,a1,a3);\n    spfa(n);\n    for(int i=1;i<=n;++i)\n        dis2[i]=dis[i];\n    for(int i=1;i<=k;++i)\n        scanf(\"%d %d\",&a1,&a2),addedge(n+1,a1,dis2[a1]-a2);\n    spfa(n+1);\n    for(int i=1;i<=n-1;++i){\n        if(dis[i]<=dis2[i])\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n}\n```\n",
        "postTime": 1550823488,
        "uid": 53058,
        "name": "Algha_Porthos",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining\u3011"
    },
    {
        "content": "\uff08\u8003\u573a\u4e0a\u628a\u7ec8\u70b9\u770b\u9519\u4e86\u8c03\u4e86\u4e862\u4e2a\u5c0f\u65f6\u624d\u8c03\u51fa\u6765  \n\u5bf9\u4e8e\u6b64\u9898\u6211\u80fd\u60f3\u5230\u7684\u6709\u4e24\u79cd\u505a\u6cd5  \n\u7b2c\u4e00\u79cd\u5c31\u662f\u8bbe\u4e00\u4e2a$dis[N][2]$\uff0c\u5176\u4e2d$dis[i][0]=$\u5230i\u70b9\u7684\u6700\u77ed\u8def,$dis[i][1]=$\u7ecf\u8fc7\u4e00\u4e2a\u8349\u579b\u540e\u5230i\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u51cf\u53bb\u7ecf\u8fc7\u7684\u8349\u579b\u7684\u7f8e\u5473\u503c\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u505a\u4e00\u904ddij\uff0c\u4f9d\u7167\u5b9a\u4e49\u66f4\u65b0\uff0c\u6700\u540e\u5982\u679c$dis[i][0]<dis[i][1]$\u5c31\u4e0d\u884c,\u5426\u5219\u53ef\u4ee5  \n\n\u7b2c\u4e8c\u79cd\u662f\u52a0\u70b9\uff0c\u8bbe$dis[i]$\u4e3a\u5230i\u70b9\u7684\u6700\u77ed\u8def  \n\u8003\u8651\u8bbe\u7f6e\u70b9n+1\uff0c\u7136\u540e$addedge(n+1,c,dis[c]-a[c])$\n\u5176\u4e2dc\u4e3a\u6709\u5e72\u8349\u579b\u7684\u70b9\uff0ca[c]\u4e3a\u5176\u7f8e\u5473\u503c  \n\u6837\u4f8b\u56fe\u53ca\u5982\u4e0b\uff0c\u4ecen+1\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5373\u4e3a\u6240\u6c42\n![](https://cdn.luogu.com.cn/upload/pic/47087.png)  \n\u4ee3\u7801\uff1f\u8fd8\u662f\u53d1\u4e00\u4e0b\u5427  \n\u7b2c\u4e00\u79cd\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005,M=200005;\nconst int inf=0x3f3f3f3f;\nint n,m,k;\nint dis[N][2],vis[N][2];\nint b[M<<1],w[M<<1],nt[M<<1],p[N];\nint num;\nint c[N];\ninline void add(int u,int v,int c){\n    num++;\n    b[num]=v,w[num]=c,nt[num]=p[u];p[u]=num;\n}\nstruct node{\n    int u,pp,dis;\n    node(int _u,int _p,int _dis){u=_u,pp=_p,dis=_dis;}\n    bool operator<(const node& t)const{\n        return dis>t.dis;\n    }\n};\ninline void spfa(int s){\n    priority_queue<node> q;\n    memset(dis,0x3f,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[s][0]=0;\n    q.push(node(s,0,0));\n    while(!q.empty()){\n        int u=q.top().u,pp=q.top().pp;q.pop();\n        if(vis[u][pp]) continue;\n        vis[u][pp]=1;\n        for(int h=p[u];h;h=nt[h]){\n            int v=b[h];\n            if(pp==0){\n                if(dis[v][0]>dis[u][0]+w[h]){\n                    dis[v][0]=dis[u][0]+w[h];\n                    q.push(node(v,0,dis[v][0]));\n                }\n                if(c[v]){\n                \tif(dis[v][1]>dis[u][0]+w[h]-c[v]){\n                \t\tdis[v][1]=dis[u][0]+w[h]-c[v];\n                \t\tq.push(node(v,1,dis[v][1]));\n                    }\n                }\n            }else {\n                if(dis[v][1]>dis[u][1]+w[h]){\n                \t\tdis[v][1]=dis[u][1]+w[h];\n                \t\tq.push(node(v,1,dis[v][1]));\n                }\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    int a,b,t;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&a,&b,&t);\n        add(a,b,t);\n        add(b,a,t);\n    }\n    for(int i=1;i<=k;i++){\n        scanf(\"%d%d\",&a,&b);\n        c[a]=max(c[a],b);\n    }\n    spfa(n);\n    \n    for(int i=1;i<n;i++)\n        if(dis[i][0]>=dis[i][1]) puts(\"1\");\n        else puts(\"0\");\n    return 0;\n}\n```\n\u7b2c\u4e8c\u79cd \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50005,M=100005;\nconst int inf=0x3f3f3f3f;\nint n,m,k;\nint dis[N],flag[N];\nint b[M<<1],w[M<<1],nt[M<<1],p[N];\nint num;\n\ninline void add(int u,int v,int c){\n    num++;\n    b[num]=v,w[num]=c,nt[num]=p[u];p[u]=num;\n}\ninline void spfa(int s){\n    queue<int> q;\n    memset(dis,0x3f,sizeof(dis));\n    memset(flag,0,sizeof(flag));\n    dis[s]=0;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        flag[u]=0;\n        for(int h=p[u];h;h=nt[h]){\n            int v=b[h];\n            if(dis[v]>dis[u]+w[h]){\n                dis[v]=dis[u]+w[h];\n                if(!flag[v]) q.push(v),flag[v]=1;\n            }\n        }\n    }\n}\nint dis0[N];\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    int a,b,t;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&a,&b,&t);\n        add(a,b,t);\n        add(b,a,t);\n    }\n    spfa(n);\n    \n    for(int i=1;i<=n;i++) dis0[i]=dis[i];\n    for(int i=1;i<=k;i++){\n        scanf(\"%d%d\",&a,&b);\n        add(n+1,a,dis0[a]-b);\n    }\n    spfa(n+1);\n    \n    for(int i=1;i<n;i++)\n        if(dis0[i]>=dis[i]) puts(\"1\");\n        else puts(\"0\");\n    return 0;\n}\n\n```",
        "postTime": 1545615994,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5122 \u3010[USACO12DEC]Fine Dining\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u6700\u77ed\u8def+dp\n\n1\u3001\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8ba1\u7b97\u51fa\u6ca1\u6709\u5e72\u8349\u579b\u6700\u5c11\u8981\u591a\u5c11\u65f6\u95f4\n\n2\u3001dp\u6c42\u51fa\u6709\u5e72\u8349\u579b\u81f3\u5c11\u9700\u8981\u591a\u5c11\u65f6\u95f4\uff0c\u7531\u4e8edp\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u7528SPFA\u8f85\u52a9\u8f6c\u79fb\uff0cdp\u65b9\u7a0b\u548c\u6c42\u6700\u77ed\u8def\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u662f\u5148\u5c06\u6709\u5e72\u8349\u579b\u7684\u62c9\u5165\u961f\u5217\u8f6c\u79fb\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\n\n\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e24\u904d\u4e00\u6a21\u4e00\u6837\u7684SPFA\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1000001\n#define INF 1926081700\nusing namespace std;\nlong long cnt,cost[maxn],from[maxn],to[maxn],Next[maxn],head[maxn];\nlong long dis[maxn],dp[maxn],point[maxn],vis[maxn];\nlong long n,m,k;\nqueue<long long>q;\nvoid add(long long x,long long y,long long z){\n    cnt++;cost[cnt]=z;\n    from[cnt]=x;to[cnt]=y;\n    Next[cnt]=head[x];head[x]=cnt;\n}\nvoid SPFA(long long S){         //SPFA\u677f\u5b50\n    for(int i=1;i<=n;i++)dis[i]=INF,vis[i]=0;\n    q.push(S);vis[S]=1;dis[S]=0;\n    while(!q.empty()){\n        long long u=q.front();q.pop();vis[u]=0;\n        for(int i=head[u];i!=-1;i=Next[i]){\n            long long v=to[i];\n            if(dis[v]>dis[u]+cost[i]){\n                dis[v]=dis[u]+cost[i];\n                if(vis[v]==0){\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nvoid BFS(int S){                //dp\n    for(int i=1;i<=n;i++)dp[i]=INF,vis[i]=0;\n    //**************************dp\u552f\u4e00\u4e0eSPFA\u4e0d\u540c\u7684\u5730\u65b9**************************\n    for(int i=1;i<=n;i++)\n    if(point[i]>0){\n        dp[i]=dis[i]-point[i];\n        q.push(i);vis[i]=1;\n    }\n    //**************************dp\u552f\u4e00\u4e0eSPFA\u4e0d\u540c\u7684\u5730\u65b9**************************\n    while(!q.empty()){\n        long long u=q.front();q.pop();vis[u]=0;\n        for(int i=head[u];i!=-1;i=Next[i]){\n            long long v=to[i];\n            if(dp[v]>dp[u]+cost[i]){\n                dp[v]=dp[u]+cost[i];\n                if(vis[v]==0){\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nint main(){\n    //freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=n;i++)point[i]=0;\n    scanf(\"%lld%lld%lld\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        long long x,y,z;\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        add(x,y,z);add(y,x,z);              //\u5efa\u8fb9\n    }\n    SPFA(n);\n    for(int i=1;i<=k;i++){\n        long long x,y;\n        scanf(\"%lld%lld\",&x,&y);\n        point[x]=max(point[x],y);           //\u52a0\u5165\u5e72\u8349\u579b\n    }\n    BFS(n);\n    for(int i=1;i<=n-1;i++){\n        if(dp[i]<=dis[i])                   //\u5224\u65ad\uff0c\u8f93\u51fa\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1547966006,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining\u3011"
    },
    {
        "content": "\u7ed9\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a $O(n\\log n)$ \u7684\u505a\u6cd5\uff0c\u663e\u7136\u8fd9\u9898\u80af\u5b9a\u662f\u53ef\u4ee5\u7528 Dij \u7684\uff0c\u7528\u4e86 SPFA \u7684\u90a3\u4e9b\u9898\u89e3\u4e5f\u6ca1\u89e3\u91ca\u4e3a\u5565\u975e\u8981\u7528 SPFA \u4e0d\u53ef\u3002\u8fd8\u6709\u4ec0\u4e48\u5206\u5c42\u56fe\u8d85\u7ea7\u6c47\u4ec0\u4e48\u7684\u6839\u672c\u4e0d\u77e5\u9053\u5565\u4e1c\u897f\u554a\uff08\n\n\u9996\u5148\u5206\u6790\u9898\u610f\uff0c\u9898\u76ee\u53ea\u8981\u6211\u4eec\u6c42\u6bcf\u4e00\u5934\u725b\u80fd\u4e0d\u80fd\u5728\u67d0\u4e2a\u5e72\u8349\u6346\u505c\u7559\u53bb\u5403\uff0c\u6761\u4ef6\u662f\u589e\u52a0\u7684\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e\u5e72\u8349\u6346\u7684\u7f8e\u5473\u503c\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u589e\u52a0\u7684\u65f6\u95f4\u662f\u76f8\u5bf9\u4e8e\u4e0d\u5403\u4efb\u4f55\u4e00\u4e2a\u5e72\u8349\u6346\u7684\u5230\u8fbe\u7b2c $N$ \u4e2a\u519c\u573a\u7684\u6700\u77ed\u65f6\u95f4\u6765\u8bf4\u7684\u3002\u90a3\u4e48\uff0c\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u4ee5 $N$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d Dij \u6c42\u51fa\u5404\u4e2a\u70b9\u5230\u7b2c $N$ \u4e2a\u519c\u573a\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\u90a3\u4e48\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5e72\u8349\u6346\uff0c\u80fd\u5403\u6389\u8fd9\u4e2a\u5e72\u8349\u6346\u7684\u6761\u4ef6\u662f\uff1a\uff08\u6b64\u5904 $i$ \u8868\u793a\u70b9\uff0c$j$ \u8868\u793a\u5e72\u8349\u6346\u7f16\u53f7\uff09\n\n$$dis_{pos_j,n}+dis_{i,pos_j}-dis_{i,n}\\leq deli_{j}$$\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u7b49\u4ef7\u4e8e\uff1a\n\n$$dis_{pos_j,n}+dis_{i,pos_j}-deli_{j}\\leq dis_{i,n}$$\n\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u7f8e\u5473\u503c\u5c31\u76f8\u5f53\u4e8e\u4ece\u5e72\u8349\u6346\u51fa\u53d1\uff0c\u7ecf\u8fc7\u7684\u8def\u7a0b\u8fd8\u6709\u5e72\u8349\u6346\u672c\u8eab\u5230 $N$ \u7684\u8def\u7a0b\u548c\u7684\u51cf\u514d\u503c\uff0c\u6b64\u65f6\u67d0\u4e2a\u5e72\u8349\u6346\u53ef\u4e0d\u53ef\u884c\u5df2\u7ecf\u548c\u5f53\u524d\u662f\u4ec0\u4e48\u70b9\u5df2\u7ecf\u201c\u6ca1\u6709\u201d\u5173\u7cfb\u4e86\u3002\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c\u4ece\u6bcf\u4e2a\u5e72\u8349\u6346\u51fa\u53d1\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8981\u662f\u6ee1\u8db3\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u662f\u80fd\u591f\u5403\u8fd9\u4e2a\u5e72\u8349\u6346\u7684\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5e72\u8349\u6346\u90fd\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u6548\u7387\u80af\u5b9a\u4e0d\u591f\u9ad8\uff0c\u9898\u76ee\u6ca1\u6709\u7ed9\u51fa $K$ \u7684\u8303\u56f4\u611f\u89c9\u8fd8\u662f\u6bd4\u8f83\u4e0d\u597d\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e00\u904d\u201c\u591a\u6e90\u6700\u77ed\u8def\u201d\uff0c\u5b9e\u8d28\u5176\u5b9e\u5c31\u662f\u4f18\u5148\u961f\u5217 BFS\u3002\u4e5f\u5c31\u662f\uff0c\u76f8\u6bd4\u5355\u6e90 Dij\uff0c\u8fd9\u79cd\u6700\u77ed\u8def\u5728\u6700\u5f00\u59cb\u7684\u65f6\u5019\u52a0\u5165\u591a\u4e2a\u8d77\u59cb\u70b9\u3002\u6ce8\u610f\u4e0d\u8981\u5728\u52a0\u5165\u5806\u7684\u65f6\u5019\u5c31\u5c06\u70b9\u6807\u8bb0\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u67d0\u4e2a\u70b9\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u72b6\u6001\u3002\n\n\u6700\u540e\u662f\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n,m,t,dis[50005],vis[50005];\nvector<pair<int,int> >to[50005];\nmultiset<pair<int,int> >mts;\nstruct node{\n    int val,cur;\n    friend bool operator<(node a,node b){\n        return a.val>b.val;\n    }\n};\npriority_queue<node>que;\nsigned main(){\n    scanf(\"%lld%lld%lld\",&n,&m,&t);\n    for(int i=1,u,v,w;i<=m;i++){\n        scanf(\"%lld%lld%lld\",&u,&v,&w);\n        to[u].push_back(make_pair(v,w));\n        to[v].push_back(make_pair(u,w));\n    }\n    memset(dis,6,sizeof(dis));\n    dis[n]=0;\n    mts.insert(make_pair(0,n));\n    while(1){\n        int cur;\n        while(!mts.empty()&&vis[mts.begin()->second])\n            mts.erase(mts.begin());\n        if(mts.empty())\n            break;\n        cur=mts.begin()->second;\n        vis[cur]=1;\n        for(int i=0;i<to[cur].size();i++)\n            if(!vis[to[cur][i].first]&&dis[to[cur][i].first]>dis[cur]+to[cur][i].second){\n                dis[to[cur][i].first]=dis[cur]+to[cur][i].second;\n                mts.insert(make_pair(dis[to[cur][i].first],to[cur][i].first));\n            }\n    }\n    memset(vis,0,sizeof(vis));\n    for(int i=1,u,v;i<=t;i++){\n        scanf(\"%lld%lld\",&u,&v);\n        que.push({dis[u]-v,u});\n    }\n    while(1){\n        while(!que.empty()&&vis[que.top().cur])\n            que.pop();\n        if(que.empty())\n            break;\n        int cur=que.top().cur,val=que.top().val;\n        que.pop();\n        vis[cur]=1;\n        for(int i=0;i<to[cur].size();i++)\n            if(!vis[to[cur][i].first]&&dis[to[cur][i].first]>=val+to[cur][i].second){\n                que.push({val+to[cur][i].second,to[cur][i].first});\n            }\n    }\n    for(int i=1;i<n;i++)\n        printf(\"%lld\\n\",vis[i]);\n}\n```",
        "postTime": 1599705684,
        "uid": 251723,
        "name": "Schwarzkopf_Henkal",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining G\u3011"
    },
    {
        "content": "### Part0.\u9898\u5916\u8bdd\n\n~~\u5976\u725b\u771f\u662f\u793e\u4fdd~~\n\n### Part1.\u601d\u8def\n\n\u5e72\u8349\u6346\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f60\u8d70\u5230\u90a3\u7684\u6700\u77ed\u8def\u51cf\u53bb\u5b83\u7684\u7f8e\u5473\u503c\n\n\u4e8e\u662f\u4f60\u53ef\u4ee5\u8fde\u4e00\u6761$n -> k$\uff0c\u6743\u4e3a$-y[k]$\u7684\u8fb9\uff08k\u662f\u6709\u5e72\u8349\u6346\u7684\u70b9\uff09\n\n\u4f46\u662f\u8fd9\u6837\u4e00\u5b9a\u6709\u8d1f\u73af\uff0c\u56e0\u4e3a\u8fd9\u6837\u5b50\u8fde\u4ee3\u8868\u6bcf\u4e2a\u5e72\u8349\u6346\u80fd\u5403\u65e0\u6570\u904d\n\n\u6240\u4ee5\u6743\u503c\u4e3a$-y[k]$\u7684\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\n\n\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u5c31\u6210\u4e86\u8fd9\u6837\uff0c\u7ed9\u4f60\u4e00\u5f20\u6b63\u6743\u65e0\u5411\u56fe\u548c\u4e00\u4e2a\u8d77\u70b9$st$\uff0c\u518d\u7ed9\u4f60$k$\u6761\u8d1f\u6743\u6709\u5411\u8fb9\uff0c\u4fdd\u8bc1\u8fd9\u4e9b\u8d1f\u6743\u6709\u5411\u8fb9\u7684\u8d77\u70b9\u90fd\u662f$st$\uff0c\u4f46\u662f\u8d1f\u6743\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u6c42\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u5c31\u6709\u4e86\u4e24\u4e2a\u601d\u8def\n\n\u7b2c\u4e00\u4e2a\u662f\u76f4\u63a5\u8d39\u7528\u6d41\uff0c\u8d1f\u6743\u7684\u6d41\u91cf\u68071\uff0c\u6b63\u6743\u6d41\u91cf\u6807inf\u3002\n\n\u4f46\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u4ec5\u6162\u800c\u4e14\u4ee3\u7801\u957f\u3002\n\n\u4f60\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\n\n> \u8d1f\u6743\u6709\u5411\u8fb9\u7684\u8d77\u70b9\u90fd\u662f$st$\n\n\u4e8e\u662f\u8fd9\u5c31\u6210\u4e86\u4e00\u4e2a\u8d85\u7ea7\u6e90\u5957\u8def\u9898\n\n\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u601d\u8def\u5c31\u662f\u53ea\u7528\u5efa\u4e00\u4e2a\u65b0\u70b9\u8ba9\u5b83\u53bb\u8fde\u6bcf\u4e00\u4e2a\u8d1f\u6743\u8fb9\u80fd\u53bb\u5230\u7684\u70b9\uff0c\u8fb9\u6743\u4e3a\u8d1f\u6743\u8fb9+\u521d\u59cb\u70b9\u5230\u5b83\u7684\u6700\u77ed\u8def\u3002\n\n\u8fd9\u6837\u5c31\u662f\u4e24\u4e2aspfa\u7684\u95ee\u9898\u4e86\n\n### Part3.Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int N = 50000 + 5;\n\nstruct spfa{\n\tint dis[N];\n\tint tot , head[N] , ver[N << 2] , nxt[N << 2] , val[N << 2];\n\tbool inq[N];\n\tspfa () {\n\t\tmemset(dis , 0x3f , sizeof dis);\n\t\tmemset(head , 0 , sizeof head);\n\t\ttot = 0;\n\t}\n\t\n\tinline void add(int u , int v , int w) {\n\t\tver[++tot] = v; val[tot] = w; nxt[tot] = head[u];\n\t\thead[u] = tot;\n\t}\n\t\n\tqueue <int> q;\n\tvoid main(int st) {\n\t\tdis[st] = 0; q.push(st); inq[st] = 1;\n\t\twhile(q.size()) {\n\t\t\tint u = q.front(); q.pop(); inq[u] = 0;\n\t\t\tfor(int i = head[u] ; i ; i = nxt[i]) {\n\t\t\t\tint v = ver[i];\n\t\t\t\tif(dis[v] > dis[u] + val[i]) {\n\t\t\t\t\tdis[v] = dis[u] + val[i];\n\t\t\t\t\tif(!inq[v]) {\n\t\t\t\t\t\tinq[v] = 1;\n\t\t\t\t\t\tq.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}sol1 , sol2;\n\nint n , m , k;\n\nint main() {\n\tscanf(\"%d %d %d\" , &n , &m , &k);\n\tfor(int i = 1 , u , v , w ; i <= m ; ++i) {\n\t\tscanf(\"%d %d %d\" , &u , &v , &w);\n\t\tsol1.add(u , v , w); sol1.add(v , u , w);\n\t\tsol2.add(u , v , w); sol2.add(v , u , w);\n\t}\n\tsol1.main(n);\n\tfor(int i = 1 , u , x ; i <= k ; ++i) {\n\t\tscanf(\"%d %d\" , &u , &x);\n\t\tsol2.add(n + 1 , u , sol1.dis[u] - x);\n\t}\n\tsol2.main(n + 1);\n\tfor(int i = 1 ; i < n ; ++i)\n\t\tprintf(\"%d\\n\" , sol1.dis[i] >= sol2.dis[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1554524291,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining\u3011"
    },
    {
        "content": "~~\u8fd9\u662f\u6211\u7b2c\u4e00\u7bc7\u7d2b\u9898\u9898\u89e3+\u7b2c\u4e00\u7bc7\u5206\u5c42\u56fe\u9898\u89e3~~  \n\u524d\u7f6e\u77e5\u8bc6\uff1a\u5355\u6e90\u6700\u77ed\u8def\u5f84  \n\n---\n\n\u5f88\u5bb9\u6613\u60f3\u51fa\u6765\u8fd9\u9053\u9898\u8981\u4ece\u8282\u70b9 $n$ \u5411\u5176\u5b83\u6240\u6709\u8282\u70b9\u8dd1\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u4f7f\u7528SPFA\u7b97\u6cd5\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e0d\u5403\u5e72\u8349\u7684\u8bdd\u6bcf\u5934\u725b\u5230\u7267\u573a $n$ \u7684\u725b\u68da\u8981\u7528\u591a\u4e45\u3002\n\u63a5\u4e0b\u6765\u89e3\u51b3\u82e5\u662f\u7ecf\u8fc7\u5e72\u8349\u5806\u7684\u8bdd\u6bcf\u5934\u725b\u5230\u7267\u573a $n$ \u7684\u725b\u68da\u8981\u7528\u591a\u4e45\u3002\n\n\u6211\u4eec\u5148\u642d\u5efa\u5206\u5c42\u56fe\u3002\u539f\u56fe\u5efa\u7acb\u5728\u8282\u70b9 $1$ \u81f3 $n$ \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec\u518d\u5c06\u7b2c\u4e8c\u5c42\u5efa\u7acb\u5728\u8282\u70b9 $n + 1$ \u81f3 $2 \\times n$ \u7684\u4f4d\u7f6e\u3002  \n\u7b2c\u4e8c\u5c42\u8bb0\u5f55\u7684\u662f\u4ece $n$ \u51fa\u6765\u540e\u672a\u7ecf\u8fc7\u5e72\u8349\u5806\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6240\u4ee5\u4e00\u65e6\u5230\u4e86\u7f8e\u5473\u503c\u4e3a $f$ \u7684\u5e72\u8349\u5806\u7684\u4f4d\u7f6e $i$ \uff0c\u6211\u4eec\u5c31\u4ece\u7b2c\u4e8c\u5c42\u56fe\u8df3\u5230\u7b2c\u4e00\u5c42\uff0c\u5373\u5efa\u7acb\u4ece $i + n$ \u5230 $i$ \u7684\u8fb9\u6743\u4e3a $-f$ \u7684\u8fb9\u3002\u4e3a\u4e86\u6700\u540e\u7684\u4e24\u79cd\u8d70\u6cd5\u7684\u6bd4\u8f83\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5c06\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u8bbe\u5b9a\u4e3a $-f$\uff0c\u8fd9\u6837\u5728\u540e\u9762\u4e0d\u7528\u5bfb\u627e\u5403\u7684\u662f\u54ea\u5806\u5e72\u8349~~\u5176\u5b9e\u6211\u4e5f\u4e0d\u4f1a\u5199~~\u3002  \n\u4e0a\u4ee3\u7801\uff1a  \n```cpp\n#include <iostream>\n#include <queue>\n#include <vector>\n#include <cstring>\nusing namespace std;\nint n,m,k;\nconst int Maxn=100005;\nstruct Node\n{\n\tint v,w;\n\tNode(int v,int w):v(v),w(w){};\n};\nvector<Node> adj[Maxn];\nint d[2][Maxn];\nbool inq[Maxn];\nvoid spfa(int s,int c)\n{\n\tmemset(d[c],0x3f,sizeof(d[c]));\n\tmemset(inq,0,sizeof(inq));\n\td[c][s]=0;\n\tinq[s]=1;\n\tqueue<int> q;\n\tq.push(s);\n\tint u,v,w;\n\twhile(!q.empty())\n\t{\n\t\tu=q.front();\n\t\tq.pop();\n\t\tinq[u]=false;\n\t\tfor(int i=0;i<adj[u].size();i++)\n\t\t{\n\t\t\tv=adj[u][i].v;\n\t\t\tw=adj[u][i].w;\n\t\t\tif(d[c][u]+w<d[c][v])\n\t\t\t{\n\t\t\t\td[c][v]=d[c][u]+w;\n\t\t\t\tif(!inq[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n}\nint f[Maxn];\nint main()\n{\n\tcin>>n>>m>>k;\n\tint u,v,w;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>u>>v>>w;\n        //\u5206\u5c42\u56fe\u8fde\u8fb9\uff0c\u4e24\u5c42\u4e0d\u80fd\u9760\u539f\u56fe\u7684\u8fb9\u6765\u8fde\u5230\u4e00\u8d77\n\t\tadj[u].push_back(Node(v,w));\n\t\tadj[v].push_back(Node(u,w));\n\t\tadj[u+n].push_back(Node(v+n,w));\n\t\tadj[v+n].push_back(Node(u+n,w));\n\t}\n\tint num,fl;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tcin>>num>>fl;\n\t\tf[num]=max(f[num],fl);//\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u5806\u5e72\u8349\uff0c\u53ea\u6709\u6700\u7f8e\u5473\u7684\u4e00\u5806\u6709\u610f\u4e49\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(f[i]) adj[i+n].push_back(Node(i,-f[i]));\n\tspfa(n,0);//\u4e0d\u8fc7\u5e72\u8349\u5806\u7684\u6700\u77ed\u8def\u5f84\n\tspfa(2*n,1);//\u8fc7\u5e72\u8349\u5806\u7684\u6700\u77ed\u8def\u5f84\uff08\u8fd9\u4e24\u4e2a\u6700\u77ed\u8def\u5f84\u53ea\u6709d[1]\u81f3d[n-1]\u6709\u610f\u4e49\uff0c\u4e0d\u8fc7\u8fd9\u6837\u5199\u66f4\u7b80\u4fbf\uff09\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tif(d[0][i]>=d[1][i]) cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}\n```",
        "postTime": 1646493367,
        "uid": 229373,
        "name": "Xeqwq",
        "ccfLevel": 5,
        "title": "\u9898\u89e3P5122 [USACO18DEC]Fine Dining G"
    },
    {
        "content": "\n\u8bb0 $ dis(i,j) $ \u8868\u793a $ i $ \u5230 $ j $ \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u8003\u8651\u5976\u725b $ x $ \u7ecf\u8fc7\u8349\u5806 $ cur $ \u7684\u6761\u4ef6\uff1a\n$$\ndis(x,cur)+dis(cur,n)\\le dis(x,n)+v_{cur}\n$$\n\u4e5f\u5c31\u662f\n$$\nminv(x)=dis(x,cur)+dis(cur,n)-v_{cur}\\le dis(x,n)\n$$\n $ dis(x,n) $ \u662f\u5b9a\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6700\u5c0f\u5316 $ minv(x) $ \u3002\u9996\u5148\u53ef\u4ee5 $ O(nk) $ \u679a\u4e3e\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u628a $ dis(cur,n)-v_{cur} $ \u505a\u4e3a $ cur $ \u4e00\u5f00\u59cb\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u8dd1\u4e00\u904d\u591a\u6e90\u6700\u77ed\u8def\u3002\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u7528Dij\uff0c\u56e0\u4e3a\u70b9 $ cur $ \u7684 $ minv $ \u53ef\u80fd\u88ab\u522b\u7684\u70b9\u66f4\u65b0\uff0c\u6240\u4ee5\u53ea\u80fd\u7528 spfa \u3002\u590d\u6742\u5ea6\u5c31\u662f spfa \u7684\u590d\u6742\u5ea6\u3002\n\n```cpp\n \n#define MAXN 200011\nstruct edge{int v,w,nxt;}e[MAXN<<1|1];\nint cnt=0,last[MAXN];\nvoid adde(int u,int v,int w){e[++cnt].v=v,e[cnt].w=w,e[cnt].nxt=last[u],last[u]=cnt;}\n \nstd::queue<int>q;\nint disn[MAXN],minv[MAXN],val[MAXN];\nbool vis[MAXN],inq[MAXN];\nvoid spfa(int* dis)\n{\n    while(q.size())\n    {\n        int u=q.front();q.pop();\n        inq[u]=0;\n        for(int i=last[u];i;i=e[i].nxt)\n        {\n            int v=e[i].v;\n            if(umin(dis[v],dis[u]+e[i].w))\n                if(!inq[v])inq[v]=1,q.push(v);\n        }\n    }\n}\n \nint main()\n{\n    int n=read(),m=read(),k=read();\n    while(m--)\n    {\n        int u=read(),v=read(),w=read();\n        adde(u,v,w),adde(v,u,w);\n    }\n    while(k--){int x=read();umax(val[x],read());}\n    memset(disn,0x3f,sizeof disn);\n    disn[n]=0,q.push(n),inq[n]=1;\n    spfa(disn);\n    memset(minv,0x3f,sizeof minv);\n    for(int i=1;i<=n;++i)\n        if(val[i]>0)minv[i]=disn[i]-val[i],q.push(i),inq[i]=1;\n    spfa(minv);\n    for(int i=1;i<n;++i)puts(minv[i]<=disn[i]?\"1\":\"0\");\n    return 0;\n}\n```\n\n",
        "postTime": 1599396090,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5122 \u3010[USACO18DEC]Fine Dining G\u3011"
    }
]