[
    {
        "content": "## \u9898\u89e3\n\n\n\u521d\u770b\u8fd9\u9053\u9898\u611f\u89c9\u5341\u5206\u96be\u505a\uff0c\u9664\u4e86\u9ebb\u70e6\u7684\u8bed\u6cd5\u5206\u6790\uff0c\u8fd8\u9700\u8981\u4f18\u5316\u5faa\u73af\u3002\n\n\n[\u5b98\u65b9\u9898\u89e3](http://www.usaco.org/current/data/sol\\_cowbasic\\_platinum\\_open17.html)\n\n\n### \u5faa\u73af\u4e0d\u5d4c\u5957\n\n\n\u6b64\u65f6\u76f4\u63a5\u6a21\u62df\u5373\u53ef\uff0c\u6700\u591a\u53ea\u670950\u4e2a\u5faa\u73af\u3002\n\n\n### \u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\n\n\n\u5f53\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u901a\u9879\u516c\u5f0f\uff0c\u4f46\u5b9e\u9645**\u5e76\u4e0d\u5b9e\u7528**\u3002\u5177\u4f53\u53ef\u53c2\u8003\u5b98\u65b9\u9898\u89e3\u3002\n\n\n### \u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\n\n\n\u7406\u8bba\u4e0a\uff0c\u901a\u8fc7\u516c\u5f0f\u4e5f\u53ef\u4ee5\u505a\u8fd9\u9053\u9898\uff0c\u4f46\u662f\u7528\u77e9\u9635\u4e58\u6cd5\u66f4\u52a0\u7b80\u6d01\u3002\n\n\n#### \u6784\u9020\u8f6c\u79fb\u77e9\u9635\n\n\n\u77e9\u9635\u4e2d\u5305\u542b\u5404\u4e2a\u53d8\u91cf\u7684\u8f6c\u79fb\u5173\u7cfb\u3002\u5bf9\u4e8e\u77e9\u9635A\u548cB\uff0c\u5148\u540e\u6267\u884c\u7b49\u4ef7\u4e8e\u4e58\u4ee5A\\*B\u3002\u800cA\u5faa\u73afn\u6b21\u5219\u7b49\u4ef7\u4e8e\u4e58\u4ee5$A^n$\u3002\n\n\n\u5bf9\u4e8e`nsq = ( nsq ) + ( ( n ) + ( ( n ) + ( 1 ) ) )`\uff0c\u6784\u9020\u77e9\u9635\u4e3a\n\n\n```cpp\n    1    n    nsq\n1    1\nn        1\nnsq    1    2    1\n```\n\n\u6ce8\u610f\u8f6c\u79fb**\u6ca1\u6709\u88ab\u8d4b\u503c**\u7684\u91cf\u3002\n\n\n\u53e6\u5916\uff0c**\u76f4\u63a5\u5ffd\u7565\u8868\u8fbe\u5f0f\u4e2d\u7684\u62ec\u53f7**\uff0c\u56e0\u4e3a\u52a0\u6cd5\u6ca1\u6709\u4f18\u5148\u7ea7\u95ee\u9898\u3002\n\n\n#### \u5904\u7406\u5d4c\u5957\u5faa\u73af\n\n\n\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4fdd\u5b58\u6bcf\u5c42\u5faa\u73af\u7684\u7ed3\u679c\u548c\u5faa\u73af\u6b21\u6570\u3002\n\n\n\u6709\u65b0\u5faa\u73af\u65f6\uff0c\u538b\u5165\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff1b\u5faa\u73af\u9000\u51fa\u65f6\uff0c\u5f39\u51fa\u6808\u9876\uff0c\u6267\u884c\u5feb\u901f\u5e42\uff0c\u5e76\u4e0e\u4e0b\u4e00\u5c42\u76f8\u4e58\u3002\n\n\n#### \u65f6\u95f4\u590d\u6742\u5ea6\n\n\n\u77e9\u9635\u5927\u5c0f\u4e0d\u8d85\u8fc7100x100\uff0c\u6700\u591a\u670950\u4e2a\u5faa\u73af\uff0c\u6bcf\u4e2a\u5faa\u73af\u6700\u591a\u8ba1\u7b97$log_2(10^5) \\sim 17$\u6b21\u77e9\u9635\u4e58\u6cd5\u3002\u5b9e\u9645\u4e0a\u8fd0\u7b97\u91cf\u4e0d\u52301\u4ebf\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u3002\n\n\n## \u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=105,MOD=1e9+7;\nint n,cnt[N];\n//cnt[]\u4fdd\u5b58\u6bcf\u5c42\u5faa\u73af\u7684\u6b21\u6570\nstruct matrix\n{\n    long long mat[N][N];\n    matrix()\n    {\n        memset(mat,0,sizeof(mat));\n    }\n    matrix operator*(const matrix& rhs)const\n    {\n        matrix ans;\n        for(int i=1;i<=n;i++)\n            for(int k=1;k<=n;k++)\n                for(int j=1;j<=n;j++)\n                {\n                    ans.mat[i][j]=(ans.mat[i][j]+mat[i][k]*rhs.mat[k][j])%MOD;\n                    assert(ans.mat[i][j]>=0);\n                }\n        return ans;\n    }\n    matrix operator*=(const matrix& rhs)\n    {\n        return *this=*this*rhs;\n    }\n}S[N];\n//\u77e9\u9635\u6808\nmatrix I()\n{\n    matrix ans;\n    for(int i=1;i<=n;i++)\n        ans.mat[i][i]=1;\n    return ans;\n}\n//\u5355\u4f4d\u77e9\u9635\nmatrix qpow(matrix a,int b)\n{\n    matrix ans=I();\n    do\n    {\n        if(b&1)\n            ans*=a;\n        a*=a;\n    }\n    while(b/=2);\n    return ans;\n}\n//\u77e9\u9635\u5feb\u901f\u5e42\nstring code[N];\ntemplate<typename T>\ninline T get_token(const string& s)\n{\n    stringstream ss(s);\n    T ret;\n    ss>>ret;\n    return ret;\n}\n//\u5c06\u5b57\u7b26\u4e32s\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5185\u5bb9\u8f6c\u6362\u4e3aT\nint main()\n{\n    map<string,int> var;\n      //\u4fdd\u5b58\u53d8\u91cf\u540d\u5bf9\u5e94\u7684\u7f16\u53f7\n    var[\"1\"]=1;\n    //\u6ca1\u4ec0\u4e48\u7528\n    int lines=0;\n    n=1;\n    while(getline(cin,code[++lines]))\n        if(code[lines].find('=')!=string::npos)\n        {\n            string name=get_token<string>(code[lines]);\n              //\u9898\u76ee\u4fdd\u8bc1\u6240\u6709\u53d8\u91cf\u90fd\u4f1a\u4e3a\u5de6\u503c\n            if(var.find(name)==var.end())\n                var[name]=++n;\n        }\n    lines--;\n    int sp=1;\n    S[sp]=I();\n    for(int i=1;i<=lines;i++)\n        if(code[i].substr(0,6)==\"RETURN\")\n            cout<<S[sp].mat[var[get_token<string>(code[i].substr(6))]][1]<<endl;\n            //\u8fd0\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728\u77e9\u9635\u7b2c\u4e00\u5217\u4e2d\n        else\n            if(code[i].find(\"MOO\")!=string::npos)\n              //\u65b0\u5faa\u73af\n            {\n                S[++sp]=I();\n                cnt[sp]=get_token<int>(code[i]);\n            }\n            else\n                if(code[i].find('}')!=string::npos)\n                  //\u5faa\u73af\u7ed3\u675f\n                {\n                    S[sp-1]=qpow(S[sp],cnt[sp])*S[sp-1];\n                    sp--;\n                }\n                else\n                {\n                    matrix now;\n                    int row=var[get_token<string>(code[i])],p=code[i].find('=')+1;\n                    stringstream ss(code[i].substr(p));\n                    string token;\n                    while(ss>>token)\n                    {\n                        if(isdigit(token[0]))\n                            now.mat[row][1]+=get_token<int>(token);\n                              //\u7d2f\u52a0\u5e38\u6570\n                        else\n                            if(isalpha(token[0]))\n                                now.mat[row][var[token]]++;\n                                  //\u7d2f\u52a0\u53d8\u91cf\n                    }\n                    for(int i=1;i<=n;i++)\n                        if(i!=row)\n                            now.mat[i][i]=1;\n                  //\u8f6c\u79fb\u672a\u8d4b\u503c\u7684\u91cf\n                    S[sp]=now*S[sp];\n                }\n    return 0;\n}\n```\n\n\u8bed\u6cd5\u5206\u6790\u65f6\u5e94\u8be5\u5145\u5206\u5229\u7528\u7a7a\u683c\uff0c\u540c\u65f6\u4e5f\u8981\u9632\u6b62\u591a\u4f59\u7684\u7a7a\u683c\u3002\n\n",
        "postTime": 1494331577,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3666 \u3010[USACO17OPEN]COWBASIC \u5976\u725bBASIC\u3011"
    },
    {
        "content": "## \u624b\u5199\u6808\u4e00\u5b9a\u8981\u6e05\u7a7a\uff01\uff01\uff01\n## \u624b\u5199\u6808\u4e00\u5b9a\u8981\u6e05\u7a7a\uff01\uff01\uff01\n## \u624b\u5199\u6808\u4e00\u5b9a\u8981\u6e05\u7a7a\uff01\uff01\uff01\n\n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\n\n\u56e0\u4e3a\u8fd9\u4e2a\u5730\u65b9debug\u4e862\u5929...\n\n[\u5f53\u7136\uff0c\u8fd8\u662f\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104652659)\n\n\u9996\u5148\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e9b\u4e1c\u897f\u90fd\u8bfb\u8fdb\u6765\uff0c\u56e0\u4e3a\u5728\u7ebf\u8bfb\u5728\u7ebf\u505a\u7684\u8bdd\u4e0d\u592a\u597d\u505a\n\n\u6211\u7b2c\u4e00\u5929\u8bd5\u7740\u8fb9\u8bfb\u8fb9\u505a\uff0c\u5e94\u8be5\u4e5f\u80fd\u5f04\uff0c\u5c31\u662f\u5224\u65ad\u4e00\u4e0b\u5c0f\u62ec\u53f7\u548c\u5927\u62ec\u53f7\u6570\u770b\u770b\u6709\u6ca1\u6709\u6362\u884c\u5c31\u53ef\u4ee5\uff0c\u4f46\u662f\u7ec6\u8282\u633a\u591a\uff0c\u4ea4\u4e0a\u53bb\u6210\u529f\u62ff\u5230\u4e866\u5206(\u6837\u4f8b\u5206\uff09\n\n\u4e8e\u662f\u7b2c\u4e8c\u5929\u6211\u9009\u62e9\u628a\u6240\u6709\u4e1c\u897f\u90fd\u8bfb\u8fdb\u6765\u505a(~~\u6d1b\u8c37\u8fd0\u52bf\uff1a\u5b9c\u91cd\u6784\u4ee3\u7801~~\uff09\uff0c\u7136\u540e\u731b\u7136\u53d1\u73b0\u7b2c\u4e00\u5929\u8111\u5b50\u62bd\u5230\u6ca1\u6709\u60f3\u5230string.find()\uff0c~~STL\u5927\u6cd5\u597d~~\n\n\u7136\u540e\u778e\u641e\uff08\u8fd9\u79cd\u9898\u80fd\u600e\u4e48\u8bf4\u505a\u6cd5\u5462...\uff09\uff0c\u6ce8\u610f\u4e0d\u80fd\u4e00\u6b21\u4e00\u6b21\u7684\u52a0\uff0c\u9700\u8981\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6709\u5e38\u6570\u9879\u7684\u56e0\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u77e9\u9635\u5927\u5c0f\u5e94\u8be5\u662f\u53d8\u91cf\u6570+1\uff0c\u8fd8\u6709\u4e00\u4e2a1\u7684\u4f4d\u7f6e\n\n\u663e\u7136\u6211\u4eec\u9700\u8981\u7528\u6808\u6765\u6a21\u62df\u5faa\u73af\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u5916\u9762\u5957\u4e0a\u4e00\u4e2a\u865a\u62df\u7684\u5faa\u73af\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u90a3\u4e9b\u5947\u5947\u602a\u602a\u7684\u95ee\u9898\n\n\u6211\u4eec\u628a\u8bed\u6cd5\u5206\u6210\u56db\u79cd\u7c7b\u578b\n\n**1.\u5f00\u59cb\u5faa\u73af\u8bed\u53e5** \n\n\u5224\u65ad\u65b9\u6cd5\uff1astring.find('{')\n\n\u505a\u6cd5\uff1a\u5411\u6808\u9876\u538b\u5165\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u7b54\u6848\n\n**2.\u7ed3\u675f\u5faa\u73af\u8bed\u53e5**\n\n\u5224\u65ad\u65b9\u6cd5\uff1astring.find('}')\n\n\u505a\u6cd5\uff1a\u8fd9\u4e2a\u5faa\u73af\u7684\u4e0a\u4e00\u4e2a\uff08\u6808\u9876-1\uff09\u4e58\u4e0a\u8fd9\u4e2a\u5faa\u73af\u7684\u77e9\u9635\u7684\u5faa\u73af\u6b21\u6570\u6b21\u5e42\n\n**3.return\u8bed\u53e5**\n\n\u5224\u65ad\u65b9\u6cd5\uff1astring.find(\"RETURN\")\n\n\u505a\u6cd5\uff1a\u8f93\u51fa\n\n**4.\u8d4b\u503c\u8bed\u53e5**\n\n\u5224\u65ad\u65b9\u6cd5\uff1aelse+else+else\n\n\u505a\u6cd5\uff1a\n\n\u56e0\u4e3a\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\u53ea\u5360\u4e00\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u6c42\u51fa\u8fd9\u4e2a\u8d4b\u503c\u8bed\u53e5\u7684\u8d4b\u503c\u53d8\u91cf\u662f\u4ec0\u4e48\uff08\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u53bb\u627e\uff0c\u62ec\u53f7\u4ec0\u4e48\u7684\u76f4\u63a5\u7565\u8fc7\uff0c\u5904\u7406\u51fa\u8fd9\u6837\u4e00\u4e2a\u77e9\u9635\uff0c\u4f46\u662f\u8fd9\u4e2a\u77e9\u9635\u53ea\u7ef4\u62a4\u4e86\u4e00\u4e2a\u53d8\u91cf\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u77e9\u9635\u5176\u5b83\u7684$a_{i,i}$\u90fd\u53d8\u62101\uff0c\u7136\u540e\u4e58\u4e0a\u8fd9\u4e2a\u77e9\u9635\u6240\u5bf9\u5e94\u7684\u7b54\u6848\n\n\u5b8c\u6210\u4e0a\u9762\u90a3\u4e9b\u4e1c\u897f\u9700\u8981\u6211\u4eec\u591a\u5199\u4e24\u4e2a\u51fd\u6570\n\n$split(string,int)$\n\n\u8868\u793a\u4ecestring\u7684int\u4f4d\u7f6e\u5f00\u59cb\u63d0\u53d6\u51fa\u4e00\u6bb5\u8fde\u7eed\u7684\u5b57\u7b26\u4e32\uff0c\u6ce8\u610fint\u4f20\u8fdb\u53bb\u5e94\u8be5\u52a0\u4e00\u4e2a&\uff0c\u56e0\u4e3a\u90a3\u4e2a\u53d8\u91cf\u5199\u9700\u8981\u53d8\n\n$todigit(string)$\n\n\u8868\u793a\u628a\u8fd9\u4e2astring\u8f6c\u5316\u6210int\u7c7b\u578b\uff08\u542c\u8bf4STL\u4e5f\u80fd\u5b9e\u73b0\uff0c\u7136\u800c\u6211\u4e0d\u4f1a\u5c31\u53ea\u80fd\u81ea\u5df1\u52a8\u624b\u5199\u4e86qwq\uff09\n\n\u7136\u540e\u4ea4\u4e0a\u53bb\uff0c\u53d1\u73b0\u662f0\u5206\n\n\u4e0b\u8f7d\u4e00\u4e0b\u6570\u636e\uff0c\u53d1\u73b0\u6709\u7f29\u8fdb\uff01\n\n\u4e8e\u662f\u6211\u4eec\u518d\u5199\u4e00\u4e2a$skip$\u8868\u793a\u8df3\u8fc7\u7a7a\u683c\n\n\u7136\u540e\u518d\u4ea4\u4e0a\u53bb\uff0c31\u5206\n\n\u8c03\u4e862\u5929\uff0c\u53d1\u73b0\u4e86\u95ee\u9898\uff0c\u6211\u5199\u7684\u662f\u628a\u77e9\u9635\u6570\u7ec4\u6574\u4e2a\u5f53\u6210\u4e00\u4e2a\u6808\u4e86\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u9700\u8981\u6bcf\u6b21\u5f00\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u628a\u8fd9\u4e2a\u70b9\u7684\u77e9\u9635\u6e05\u7a7a\u4e00\u4e0b\uff0c\u7136\u540e\u6784\u9020\u5355\u4f4d\u77e9\u9635\n\n\u4ee3\u7801\uff1a~~\u6ca1\u5220\u8c03\u8bd5\u4e4b\u524d160\u884c...~~\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=105;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\n# define int long long\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nmap<string,int> var;\nint n,num,sum;\nstring s[N];\nint inds[N];\n\nstruct matrix{\n\tint a[N][N];\n\tmatrix(){memset(a,0,sizeof(a));}\n\tvoid build(){\n        memset(a,0,sizeof(a));\n\t\tRep(i,1,num)a[i][i]=1;\t\n\t}\n\tvoid print(){\n\t\tRep(i,1,num)\n\t\t\tRep(j,1,num)\n\t\t\t\tprintf(\"%d%c\",a[i][j],j==num?'\\n':' ');\t\n\t}\n\tmatrix operator * (const matrix &m)const{\n\t\tmatrix res;\n\t\tRep(i,1,num)\n\t\t\tRep(j,1,num)\n\t\t\t\tRep(k,1,num)\n\t\t\t\t\tres.a[i][j]=1ll*(res.a[i][j]+1ll*a[i][k]*m.a[k][j])%mod;\n\t\treturn res;\t\n\t}\n}mat[N];\n\nmatrix Qpow(matrix base,int ind){\n\tmatrix res;\n\tres.build();\n\twhile(ind){\n\t\tif(ind&1)res=res*base;\n\t\tbase=base*base;\n\t\tind>>=1;\n\t}\n\treturn res;\n}\n\nvoid skip(string s,int &p){\n    while(p<s.size()&&!((s[p]>='0'&&s[p]<='9')||(s[p]>='a'&&s[p]<='z')||s[p]=='{'||s[p]=='}'||s[p]=='('||s[p]==')'))p++;\n}\n\nstring split(string s,int &p){\n\tstring res;\n    skip(s,p);\n\twhile(p<s.size()&&((s[p]>='0'&&s[p]<='9')||(s[p]>='a'&&s[p]<='z')||s[p]=='{'||s[p]=='}'||s[p]=='('||s[p]==')'))res+=s[p++];\n\treturn res;\t\n}\n\nint todigit(string s){\n\tint num=0;\n\tfor(int i=0;i<s.size();i++)\n\t\tnum=num*10+s[i]-'0';\n\treturn num;\t\n}\n\nsigned main()\n{\n    num=1;\n\twhile(getline(cin,s[++n]))\n\t\tif(s[n].find('=')!=string::npos){\n\t\t\tint zero=0;\n\t\t\tstring vars=split(s[n],zero);\n\t\t\tif(!var[vars])\n\t\t\t\tvar[vars]=++num;\t\n\t\t}\n\tsum=1;\n\tmat[sum].build();\n\tRep(i,1,n){\n\t\tint zero=0;\n\t\tif(s[i].find(\"RETURN\")!=string::npos){\n\t\t\tint seven=7;\n\t\t\tprintf(\"%lld\\n\",mat[sum].a[var[split(s[i],seven)]][1]);\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t\tif(s[i].find('{')!=string::npos){\n\t\t\t\tmat[++sum].build();\n                zero=0;\n\t\t\t\tinds[sum]=todigit(split(s[i],zero));\n\t\t\t}\n\t\t\telse\n\t\t\t\tif(s[i].find('}')!=string::npos){\n\t\t\t\t\tmat[sum-1]=Qpow(mat[sum],inds[sum])*mat[sum-1];\n\t\t\t\t\tsum--;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmatrix A;\n\t\t\t\t\tint p=0;\n\t\t\t\t\tstring t=split(s[i],p);\n                    p=s[i].find('=')+1;\n\t\t\t\t\tint vars=var[t];\n\t\t\t\t\tfor(;p<s[i].size();p++){\n                        skip(s[i],p);\n\t\t\t\t\t\tif(isdigit(s[i][p])){\n\t\t\t\t\t\t\tA.a[vars][1]+=todigit(split(s[i],p));\n                            A.a[vars][1]%=mod;\n                        }\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif(isalpha(s[i][p]))\n\t\t\t\t\t\t\t\tA.a[vars][var[split(s[i],p)]]++;\n                    Rep(i,1,num)if(i!=vars)A.a[i][i]=1;\n\t\t\t\t\tmat[sum]=A*mat[sum];\n\t\t\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1583302087,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3666 \u3010[USACO17OPEN]COWBASIC P\u3011"
    }
]