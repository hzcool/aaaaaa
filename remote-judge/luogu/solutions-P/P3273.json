[
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e9b\u70b9\u548c\u4e00\u4e9b\u64cd\u4f5c,\u8d44\u74f7\u94fe\u63a5\u4e24\u70b9,\u67d0\u4e2a\u70b9\u6240\u5728\u7684\u8054\u901a\u5757\u90fd\u52a0\u4e0a\u4e00\u4e2a\u6570,\u67d0\u4e2a\u70b9\u52a0\u4e0a\u4e00\u4e2a\u6570,\u5168\u90e8\u52a0\u4e0a\u4e00\u4e2a\u6570,\u67e5\u8be2\u5355\u70b9\u7684\u503c,\u67e5\u8be2\u67d0\u4e2a\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u4e2d\u7684\u6700\u5927\u503c,\u67e5\u8be2\u6240\u6709\u503c\u4e2d\u7684\u6700\u5927\u503c.\n\n# \u5206\u6790\n\n~~\u53ef\u5e76\u5806\u88f8\u9898~~.\u56e0\u4e3a\u8fde\u8fb9\u8fd9\u4e2a\u4e1c\u897f\u5f88\u96be\u5904\u7406,\u6240\u4ee5\u8003\u8651\u79bb\u7ebf,\u8003\u8651\u5bf9\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u4e00\u4e0b $tim_i$ \u8868\u793a\u5f53\u524d\u8282\u70b9\u8fde\u63a5\u5176\u4ed6\u8282\u70b9\u7684\u65f6\u95f4.\u518d\u8003\u8651\u5efa\u6811,\u4f46\u662f\u5982\u679c\u76f4\u63a5\u5728\u9700\u8981\u8fde\u63a5\u7684\u4e24\u70b9\u76f4\u63a5\u8fde\u8fb9\u4f1a\u51fa\u95ee\u9898,\u6ca1\u6709\u529e\u6cd5\u5904\u7406\u67d0\u4e2a\u65f6\u95f4\u7684\u8fde\u901a\u5757,\u6240\u4ee5\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b,\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u8fde\u63a5\u7236\u4eb2\u7684\u65f6\u95f4\u90fd\u662f\u5728\u81ea\u5df1\u8fde\u63a5\u7236\u4eb2\u4e4b\u524d,\u8003\u8651\u5f53\u524d\u4fee\u6539\u7684\u8fde\u901a\u5757\u5728 DFS \u5e8f\u4e2d\u5fc5\u5b9a\u662f\u8fde\u7eed\u7684\u4e00\u6bb5,\u4e14\u5de6\u7aef\u70b9\u5fc5\u5b9a\u662f\u5f53\u524d\u8282\u70b9\u7684\u67d0\u4e2a\u7956\u5148,\u90a3\u4e48\u5bfb\u627e\u7956\u5148\u5c31\u53ef\u4ee5\u7528\u500d\u589e\u6765\u7ef4\u62a4,\u5728\u77e5\u9053\u7956\u5148\u540e\u8003\u8651\u4fee\u6539\u7684\u90e8\u5206\u5fc5\u5b9a\u5305\u542b\u5f53\u524d\u8282\u70b9\u7684\u82e5\u5e72\u5b50\u6811,\u4e14\u5728\u513f\u5b50\u4e2d\u94fe\u63a5\u5f53\u524d\u8282\u70b9\u7684\u65f6\u95f4\u662f\u5355\u8c03\u9012\u589e\u7684,\u6240\u4ee5\u53ef\u4ee5\u7528\u4e8c\u5206\u6765\u5feb\u901f\u67e5\u8be2,\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6a21\u677f\u7ef4\u62a4\u533a\u95f4 $\\max$ \u5c31\u597d\u4e86.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=3e5+5;\nconst int INF=1e9;\nint n,m;\nvector<int>edge[MAXN];\nchar opt[MAXN][2];\nint x[MAXN],y[MAXN],v[MAXN];\nint father[MAXN][21];\nint Find(int now)//\u5e76\u67e5\u96c6\u90e8\u5206\n{\n\tif(now==father[now][0])\n\t{\n\t\treturn now;\n\t}\n\treturn father[now][0]=Find(father[now][0]);\n}\nint tim[MAXN]={MAXN};//\u8bb0\u5f55\u94fe\u63a5\u7236\u4eb2\u7684\u65f6\u95f4\nint val[MAXN];\nint id[MAXN];\nint dfs[MAXN];\nint dfs_cnt=0;\nint siz[MAXN];//\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\nvoid DFS(int now)//\u904d\u5386\u6240\u6709\u6811\n{\n\tREP(i,1,19)//\u500d\u589e\u9884\u5904\u7406\n\t{\n\t\tfather[now][i]=father[father[now][i-1]][i-1];\n\t}\n\tid[now]=++dfs_cnt;//\u5f53\u524d\u8282\u70b9\u5728dfs\u5e8f\u7684\u4f4d\u7f6e\n\tdfs[dfs_cnt]=now;\n\tsiz[now]=1;\n\tif(edge[now].size())\n\t{\n\t\tREP(i,0,edge[now].size()-1)//\u904d\u5386\u5b50\u8282\u70b9\n\t\t{\n\t\t\tfather[edge[now][i]][0]=now;\n\t\t\tDFS(edge[now][i]);\n\t\t\tsiz[now]+=siz[edge[now][i]];\n\t\t}\n\t}\n}\nint l,r;\nvoid Getlr(int now,int now_time)//\u5f97\u5230\u5bf9\u4e8e\u67d0\u4e2a\u65f6\u95f4\u65f6\u67d0\u4e2a\u8282\u70b9\u7684\u8054\u901a\u5feb\n{\n\tif(tim[now]<now_time)//\u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u5f53\u524d\u65f6\u95f4\u5df2\u7ecf\u8fde\u63a5\u4e86\u7236\u4eb2,\u90a3\u4e48\u5c31\u500d\u589e\u627e\u7956\u5148\n\t{\n\t\tDOW(i,19,0)\n\t\t{\n\t\t\tif(tim[father[now][i]]<now_time)\n\t\t\t{\n\t\t\t\tnow=father[now][i];\n\t\t\t}\n\t\t}\n\t\tnow=father[now][0];\n\t}\n\tint left=0,right=edge[now].size()-1,middle;\n\tl=id[now];\n\tr=id[now];\n\twhile(left<=right)//\u5728\u81ea\u5df1\u7684\u513f\u5b50\u5185\u4e8c\u5206\n\t{\n\t\tmiddle=(left+right)>>1;\n\t\tif(tim[edge[now][middle]]<now_time)\n\t\t{\n\t\t\tr=id[edge[now][middle]];\n\t\t\tleft=middle+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright=middle-1;\n\t\t}\n\t}\n\tif(r^id[now])//\u5982\u679c\u81ea\u5df1\u7684\u5b50\u6811\u6709\u4fee\u6539\u4e86\u90a3\u4e48\u8fd9\u6574\u9897\u5b50\u6811\u90fd\u4f1a\u88ab\u4fee\u6539\n\t{\n\t\tr+=siz[dfs[r]]-1;\n\t}\n}\n//\u4ee5\u4e0b\u4e3a\u4e00\u9897\u533a\u95f4\u52a0,\u533a\u95f4\u67e5\u8be2max\u7684\u7ebf\u6bb5\u6811,\u8fc7\u4e8e\u6a21\u677f\u5c31\u4e0d\u591a\u8bb2\u4e86\nstruct LazyTag\n{\n\tint add;\n\tvoid Clean()\n\t{\n\t\tadd=0;\n\t}\n}for_make;\nLazyTag MakeTag(int add)\n{\n\tfor_make.add=add;\n\treturn for_make;\n}\nstruct SegmentTree\n{\n\tlong long sum;\n\tlong long max;\n\tLazyTag tag;\n}sgt[MAXN*4];\n#define LSON (now<<1)\n#define RSON (now<<1|1)\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\n#define NOW now_left,now_right\nvoid PushUp(int now)\n{\n\tsgt[now].sum=sgt[LSON].sum+sgt[RSON].sum;\n\tsgt[now].max=max(sgt[LSON].max,sgt[RSON].max);\n}\nvoid Build(int now=1,int left=1,int right=n)\n{\n\tif(left==right)\n\t{\n\t\tsgt[now].max=sgt[now].sum=val[dfs[left]];\n\t\treturn;\n\t}\n\tBuild(LEFT);\n\tBuild(RIGHT);\n\tPushUp(now);\n}\nvoid Down(LazyTag tag,int now,int left,int right)\n{\n\tsgt[now].sum+=1ll*tag.add*(right-left+1);\n\tsgt[now].max+=tag.add;\n\tsgt[now].tag.add+=tag.add;\n}\nvoid PushDown(int now,int left,int right)\n{\n\tDown(sgt[now].tag,LEFT);\n\tDown(sgt[now].tag,RIGHT);\n\tsgt[now].tag.Clean();\n}\nvoid Updata(int now_left,int now_right,int add,int now=1,int left=1,int right=n)\n{\n\tif(now_right<left||right<now_left)\n\t{\n\t\treturn;\n\t}\n\tif(now_left<=left&&right<=now_right)\n\t{\n\t\tDown(MakeTag(add),now,left,right);\n\t\treturn;\n\t}\n\tPushDown(now,left,right);\n\tUpdata(NOW,add,LEFT);\n\tUpdata(NOW,add,RIGHT);\n\tPushUp(now);\n}\nint QueryMax(int now_left,int now_right,int now=1,int left=1,int right=n)\n{\n\tif(now_right<left||right<now_left)\n\t{\n\t\treturn -INF;\n\t}\n\tif(now_left<=left&&right<=now_right)\n\t{\n\t\treturn sgt[now].max;\n\t}\n\tPushDown(now,left,right);\n\treturn max(QueryMax(NOW,LEFT),QueryMax(NOW,RIGHT));\n}\n#undef LSON\n#undef RSON\n#undef MIDDLE\n#undef LEFT\n#undef RIGHT\n#undef NOW\nint main()\n{\n\tscanf(\"%d\",&n);\n\tREP(i,1,n)\n\t{\n\t\tscanf(\"%d\",&val[i]);\n\t\tfather[i][0]=i;\n\t}\n\tscanf(\"%d\",&m);\n\tREP(i,1,m)//\u79bb\u7ebf\n\t{\n\t\tcin>>opt[i];\n\t\tif(opt[i][0]=='U')//\u5bf9\u4e8e\u8fde\u8fb9\u64cd\u4f5c\u8fde\u8fb9\n\t\t{\n\t\t\tscanf(\"%d%d\",&x[i],&y[i]);\n\t\t\tif(Find(y[i])^Find(x[i]))\n\t\t\t{\n\t\t\t\ttim[Find(y[i])]=i;\n\t\t\t\tedge[Find(x[i])].push_back(Find(y[i]));\n\t\t\t\tfather[Find(y[i])][0]=Find(x[i]);\n\t\t\t}\n\t\t}\n\t\tif(opt[i][0]=='A')\n\t\t{\n\t\t\tif(opt[i][1]=='1')\n\t\t\t{\n\t\t\t\tscanf(\"%d%d\",&x[i],&v[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='2')\n\t\t\t{\n\t\t\t\tscanf(\"%d%d\",&x[i],&v[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='3')\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&v[i]);\n\t\t\t}\n\t\t}\n\t\tif(opt[i][0]=='F')\n\t\t{\n\t\t\tif(opt[i][1]=='1')\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&x[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='2')\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&x[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='3')\n\t\t\t{\n\n\t\t\t}\n\t\t}\n\t}\n\tREP(i,1,n)//\u83b7\u5f97\u8fd9\u4e2a\u68ee\u6797\u7684dfs\u5e8f\n\t{\n\t\tif(!tim[i])\n\t\t{\n\t\t\ttim[i]=INF;\n\t\t\tDFS(i);\n\t\t}\n\t}\n\tBuild();//\u5efa\u6811\n\tREP(i,1,m)\n\t{\n\t\tif(opt[i][0]=='A')//\u4fee\u6539\u64cd\u4f5c\n\t\t{\n\t\t\tif(opt[i][1]=='1')\n\t\t\t{\n\t\t\t\tUpdata(id[x[i]],id[x[i]],v[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='2')\n\t\t\t{\n\t\t\t\tGetlr(x[i],i);\n\t\t\t\tUpdata(l,r,v[i]);\n\t\t\t}\n\t\t\tif(opt[i][1]=='3')\n\t\t\t{\n\t\t\t\tUpdata(1,n,v[i]);\n\t\t\t}\n\t\t}\n\t\tif(opt[i][0]=='F')//\u67e5\u8be2\u64cd\u4f5c\n\t\t{\n\t\t\tif(opt[i][1]=='1')\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",QueryMax(id[x[i]],id[x[i]]));\n\t\t\t}\n\t\t\tif(opt[i][1]=='2')\n\t\t\t{\n\t\t\t\tGetlr(x[i],i);\n\t\t\t\tprintf(\"%d\\n\",QueryMax(l,r));\n\t\t\t}\n\t\t\tif(opt[i][1]=='3')\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\",QueryMax(1,n));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1588562176,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u76ee\u524d\u9898\u89e3\u4e2d\u6240\u6709\u5de6\u504f\u6811\u505a\u6cd5\u5747\u53ef\u88ab\u5361\uff08\u4e00\u6761\u94fe\uff0c\u4e0d\u505c\u5355\u70b9\u8be2\u95ee\u94fe\u5e95\u7aef\uff09\u3002\n\n\u5176\u5b9e\u8fd9\u9898\u662f\u6709\u5de6\u504f\u6811\u6b63\u89e3\u7684\uff0c\u5c31\u662f[\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.org/blog/user17667/solution-p3273)\u7684\u505a\u6cd5\uff0c\u7136\u800c\u4ed6\u662f\u66b4\u529b\u5411\u4e0a\u8df3\u627e\u6839\u7684\uff0c\u6240\u4ee5\u8fd8\u662f\u53ef\u4ee5\u88ab\u5361\u3002\n\n\u9996\u5148\uff0c\u627e\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u5806\u7684\u5806\u9876\u8981\u7528\u5e76\u67e5\u96c6\uff0c\u800c\u4e0d\u80fd\u66b4\u529b\u5411\u4e0a\u8df3\u3002\n\n\u518d\u8003\u8651\u5355\u70b9\u67e5\u8be2\uff0c\u82e5\u7528\u666e\u901a\u7684\u65b9\u6cd5\u6253\u6807\u8bb0\uff0c\u5c31\u5f97\u67e5\u8be2\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6807\u8bb0\u4e4b\u548c\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230 $\\mathcal O(n)$ \u7684\u590d\u6742\u5ea6\u3002\u5982\u679c\u53ea\u6709\u5806\u9876\u6709\u6807\u8bb0\uff0c\u5c31\u53ef\u4ee5 $\\mathcal O(\\log n)$\uff08\u53ea\u6709\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\uff09\u5730\u67e5\u8be2\u4e86\uff0c\u4f46\u5982\u4f55\u505a\u5230\u5462\uff1f\n\n\u53ef\u4ee5\u7528\u7c7b\u4f3c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65b9\u5f0f\uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u628a\u8f83\u5c0f\u7684\u90a3\u4e2a\u5806\u6807\u8bb0\u66b4\u529b\u4e0b\u4f20\u5230\u6bcf\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u628a\u8f83\u5927\u7684\u5806\u7684\u6807\u8bb0\u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u5806\u7684\u6807\u8bb0\u3002\u7531\u4e8e\u5408\u5e76\u540e\u6709\u53e6\u4e00\u4e2a\u5806\u7684\u6807\u8bb0\uff0c\u6240\u4ee5\u8f83\u5c0f\u7684\u5806\u4e0b\u4f20\u6807\u8bb0\u65f6\u8981\u4e0b\u4f20\u5176\u6807\u8bb0\u51cf\u53bb\u53e6\u4e00\u4e2a\u5806\u7684\u6807\u8bb0\u3002\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6bcf\u88ab\u5408\u5e76\u4e00\u6b21\u6240\u5728\u5806\u7684\u5927\u5c0f\u81f3\u5c11\u4e58\u4e8c\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u88ab\u4e0b\u653e $\\mathcal O(\\log n)$ \u6b21\u6807\u8bb0\uff0c\u66b4\u529b\u4e0b\u653e\u6807\u8bb0\u7684\u603b\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal O(n\\log n)$\u3002\n\n\u518d\u8003\u8651\u5355\u70b9\u52a0\uff0c\u5148\u5220\u9664\uff0c\u518d\u66f4\u65b0\uff0c\u6700\u540e\u63d2\u5165\u5373\u53ef\u3002\n\n\u7136\u540e\u662f\u5168\u5c40\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e73\u8861\u6811/\u5de6\u504f\u6811/multiset \u6765\u7ef4\u62a4\u6bcf\u4e2a\u5806\u7684\u5806\u9876\u3002\n\n\u6240\u4ee5\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u5206\u522b\u5982\u4e0b\uff1a\n\n1. \u66b4\u529b\u4e0b\u4f20\u70b9\u6570\u8f83\u5c0f\u7684\u5806\u7684\u6807\u8bb0\uff0c\u5408\u5e76\u4e24\u4e2a\u5806\uff0c\u66f4\u65b0 size\u3001tag\uff0c\u5728 multiset \u4e2d\u5220\u53bb\u5408\u5e76\u540e\u4e0d\u5728\u5806\u9876\u7684\u90a3\u4e2a\u539f\u5806\u9876\u3002\n\n2. \u5220\u9664\u8282\u70b9\uff0c\u66f4\u65b0\u503c\uff0c\u63d2\u5165\u56de\u6765\uff0c\u66f4\u65b0 multiset\u3002\u9700\u8981\u5206\u5220\u9664\u8282\u70b9\u662f\u5426\u4e3a\u6839\u6765\u8ba8\u8bba\u4e00\u4e0b\u3002\n\n3. \u5806\u9876\u6253\u6807\u8bb0\uff0c\u66f4\u65b0 multiset\u3002\n\n4. \u6253\u5168\u5c40\u6807\u8bb0\u3002\n\n5. \u67e5\u8be2\u503c+\u5806\u9876\u6807\u8bb0+\u5168\u5c40\u6807\u8bb0\u3002\n\n6. \u67e5\u8be2\u6839\u7684\u503c+\u5806\u9876\u6807\u8bb0+\u5168\u5c40\u6807\u8bb0\u3002\n\n7. \u67e5\u8be2 multiset \u6700\u5927\u503c+\u5168\u5c40\u6807\u8bb0\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <set>\n#include <cctype>\n#include <algorithm>\n\nusing namespace std;\n\nint read()\n{\n    int out=0,f=1;\n    char c;\n    for (c=getchar();!isdigit(c)&&c!='-';c=getchar());\n    if (c=='-') { f=-1; c=getchar(); }\n    for (;isdigit(c);c=getchar()) out=out*10+c-'0';\n    return out*f;\n}\n\nconst int N=300010;\n\nstruct Node\n{\n    int val,ch[2],d,fa;\n} t[N];\n\nint& rs(int x);\nint merge(int x,int y);\nvoid pushup(int x);\nvoid pushdown(int x,int y);\n\nint find(int x);\n\nint n,m,f[N],tag[N],siz[N],delta;\nchar op[10];\nmultiset<int> s;\n\nint main()\n{\n    int i,x,y;\n\n    n=read();\n\n    for (i=1;i<=n;++i)\n    {\n        t[i].val=read();\n        f[i]=i;\n        siz[i]=1;\n        s.insert(t[i].val);\n    }\n\n    m=read();\n\n    while (m--)\n    {\n        scanf(\"%s\",op);\n        if (op[0]=='U')\n        {\n            x=find(read());\n            y=find(read());\n            if (x!=y)\n            {\n                if (siz[x]>siz[y]) swap(x,y);\n                pushdown(x,tag[x]-tag[y]);\n                f[x]=f[y]=merge(x,y);\n                if (f[x]==x)\n                {\n                    s.erase(s.find(t[y].val+tag[y]));\n                    tag[x]=tag[y];\n                    siz[x]+=siz[y];\n                    tag[y]=siz[y]=0;\n                }\n                else\n                {\n                    s.erase(s.find(t[x].val+tag[y]));\n                    siz[y]+=siz[x];\n                    tag[x]=siz[x]=0;\n                }\n            }\n        }\n        else if (op[0]=='A')\n        {\n            if (op[1]=='1')\n            {\n                x=read();\n                if (x==find(x))\n                {\n                    t[t[x].ch[0]].fa=t[t[x].ch[1]].fa=0;\n                    y=merge(t[x].ch[0],t[x].ch[1]);\n                    s.erase(s.find(t[x].val+tag[x]));\n                    t[x].val+=read();\n                    t[x].fa=t[x].ch[0]=t[x].ch[1]=0;\n                    t[x].d=1;\n                    f[x]=f[y]=merge(x,y);\n                    s.insert(t[f[x]].val+tag[x]);\n                    if (f[x]==y)\n                    {\n                        tag[y]=tag[x];\n                        siz[y]=siz[x];\n                        tag[x]=siz[x]=0;\n                    }\n                }\n                else\n                {\n                    t[t[x].ch[0]].fa=t[t[x].ch[1]].fa=t[x].fa;\n                    t[t[x].fa].ch[x==t[t[x].fa].ch[1]]=merge(t[x].ch[0],t[x].ch[1]);\n                    t[x].val+=read();\n                    t[x].fa=t[x].ch[0]=t[x].ch[1]=0;\n                    t[x].d=1;\n                    y=find(x);\n                    f[x]=f[y]=merge(x,y);\n                    if (f[x]==x)\n                    {\n                        s.erase(s.find(t[y].val+tag[y]));\n                        s.insert(t[x].val+tag[y]);\n                        tag[x]=tag[y];\n                        siz[x]=siz[y];\n                        tag[y]=siz[y]=0;\n                    }\n                }\n            }\n            else if (op[1]=='2')\n            {\n                x=find(read());\n                s.erase(s.find(t[x].val+tag[x]));\n                tag[x]+=read();\n                s.insert(t[x].val+tag[x]);\n            }\n            else delta+=read();\n        }\n        else\n        {\n            if (op[1]=='1')\n            {\n                x=read();\n                printf(\"%d\\n\",t[x].val+tag[find(x)]+delta);\n            }\n            else if (op[1]=='2')\n            {\n                x=find(read());\n                printf(\"%d\\n\",t[x].val+tag[x]+delta);\n            }\n            else printf(\"%d\\n\",*s.rbegin()+delta);\n        }\n    }\n\n    return 0;\n}\n\nint& rs(int x) //\u4e00\u79cd\u6bd4\u8f83\u6e05\u5947\u7684\u5de6\u504f\u6811\u5199\u6cd5\uff0c\u65e0\u9700\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\uff0c\u628adist\u8f83\u5c0f\u7684\u89c6\u4f5c\u53f3\u513f\u5b50\u5373\u53ef\n{\n    return t[x].ch[t[t[x].ch[1]].d<t[t[x].ch[0]].d];\n}\n\nint merge(int x,int y)\n{\n    if (!x||!y) return x|y;\n    if (t[x].val<t[y].val) swap(x,y);\n    t[rs(x)=merge(rs(x),y)].fa=x;\n    pushup(x);\n    return x;\n}\n\nvoid pushup(int x) //\u4e00\u79cd\u6bd4\u8f83\u6e05\u5947\u7684\u5220\u8282\u70b9\u5199\u6cd5\uff0cmerge\u4e4b\u540e\u9012\u5f52\u5730pushup\u5373\u53ef\n{\n    if (!x) return;\n    if (t[x].d!=t[rs(x)].d+1)\n    {\n        t[x].d=t[rs(x)].d+1;\n        pushup(t[x].fa);\n    }\n}\n\nvoid pushdown(int x,int y)\n{\n    if (!x) return;\n    t[x].val+=y;\n    pushdown(t[x].ch[0],y);\n    pushdown(t[x].ch[1],y);\n}\n\nint find(int x)\n{\n    return x==f[x]?x:f[x]=find(f[x]);\n}\n```",
        "postTime": 1554337571,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "# \u9700\u8981\u7684\u77e5\u8bc6\u50a8\u5907\n\n- \u7ebf\u6bb5\u6811\n\n- \u5e76\u67e5\u96c6\n\n- \u79bb\u7ebf\u601d\u60f3\n    \n# \u5206\u6790\n\t\n###  -\u56fe\u7684\u7ed3\u6784\u4e0a \n\t \n_\u52a0\u4e00\u6761\u8fb9\uff0c\u8fde\u63a5\u7b2cx\u4e2a\u8282\u70b9\u548c\u7b2cy\u4e2a\u8282\u70b9_ \n\n\u5bf9\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5757\u5185\u8fde\u8fb9\u5e76\u4e0d\u4f1a\u6539\u53d8\u4ec0\u4e48\uff08\u672c\u9898\u7684\u67e5\u8be2\u4e5f\u53ea\u9488\u5bf9\u5355\u70b9\u548c\u8fde\u901a\u5757\uff09\n\n\u90a3\u4e48\u5f53x,y\u4e0d\u8fde\u901a\u65f6\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u4f1a\u628a\u4e24\u4e2a\u8fde\u901a\u5757\u53d8\u6210\u4e00\u4e2a\uff0c\u7c7b\u4f3c**\u5408\u5e76**\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u9053\u9898\u76ee\u7684\u8fde\u901a\u5757\u53ea\u4f1a\u5408\u5e76\u800c\u4e0d\u4f1a\u51cf\u5c11\n\n\u4e00\u7ec4\u5143\u7d20\u4e0d\u65ad\u53d6\u4e24\u4e2a\u5408\u5e76\uff0c\u8fd9\u4f7f\u6211\u4eec\u60f3\u5230\u4e86**\u5e76\u67e5\u96c6**\n\n\u5f53\u7136\uff0c\u672c\u9898\u5982\u679c\u76f4\u63a5\u5bf9\u5e76\u67e5\u96c6\u6c42\u89e3\uff0c\u5355\u70b9\u64cd\u4f5c\u671d\u4e0a\u4f20\uff0c\u8fde\u901a\u5757\u64cd\u4f5c\u671d\u4e0b\u4f20\uff0c\u5c31\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n#### \u4ee5\u4e0b\u4e3a\u9519\u8bef\u793a\u8303\u53ef\u4ee5\u8df3\u8fc7\n\n\u518d\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\n\n\u4e00\uff0c\u76f4\u63a5\u628a\u533a\u95f4\u6700\u503c\u5b58\u5230\u4ee3\u8868\u8282\u70b9\u4e0a\uff0c\u4fee\u6539\u65f6\u671d\u6240\u6709\u5b50\u8282\u70b9\u66f4\u65b0\u7b54\u6848\n\n\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u59a5\u59a5\u7684O(Qn)\uff0c\u5355\u6b21\u64cd\u4f5cO(n)\uff0c\u76f4\u63a5\u51c9\u51c9\n\n\u4e8c\uff0c\u6bcf\u6b21\u5408\u5e76\u628a\u7b54\u6848\u66f4\u65b0\u5230\u4e00\u4e2a\u65b0\u8282\u70b9\u4e0a\uff0c\u7a7a\u95f4\u590d\u6742\u5ea62\u500d\n\n\u8fd9\u79cd\u65b9\u6cd5\u770b\u4e0a\u53bb\u5f88\u4f18\u8d8a\uff0c\u65b0\u8282\u70b9\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f3c\u4e4e\u770b\u8d77\u6765\u957f\u5f97\u50cfO(logn)\u7684\u5355\u8bcd\u64cd\u4f5c\uff0c\u800c\u65b0\u8282\u70b9\u4e5f\u8ba9\u6211\u4eec\u80fd\u81ea\u7531\u5730\u4f7f\u7528lazytag\u8fdb\u884c\u4f18\u5316\n\n~~\u6211\u6253\u6b7b\u4e5f\u4e0d\u4f1a\u8bf4\u6211\u5dee\u70b9\u4ee5\u4e3a\u81ea\u5df1\u627e\u5230\u4e86\u4e0d\u9700\u8981\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u7ed3\u679c\u4e0dT\u7684\u4e09\u4e2a\u70b9\u8c03\u5230\u6b7b\u90fd\u53eaA\u4e86\u4e00\u4e2a~~\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\n\n![\u4e0d\u770b\u9519\u8bef\u793a\u8303\u7684\u670b\u53cb\u8bf7\u7ee7\u7eed\u7ffb](https://cdn.luogu.com.cn/upload/pic/46705.png)\n\n\u5c31\u6bd4\u5982\u8bf41,2,3\u53f7\u8282\u70b9\u7ec4\u6210\u7684\u8fde\u901a\u5757\uff0c\u6811\u4e0a\u603b\u8282\u70b9\u4e2a\u6570\u4e3a5\uff0clog\u503c\u7ea6\u4e3a2\n\n\u6211\u4eec\u8981\u5bf91\u53f7\u70b9\u8fdb\u884c\u64cd\u4f5c\u7684\u8bdd\uff0c\u5c31\u8981\u4e00\u76f4\u4e0a\u6eaf\uff0c\u548c\u5144\u5f1f\u8282\u70b9\u6bd4\u8f83(\u6216\u8005\u4e0a\u6eaf\u540e\u6bd4\u8f83\u513f\u5b50\u8282\u70b9)\u76f4\u5230\u7b54\u6848\u6ca1\u88ab\u66f4\u65b0\u6216\u5230\u8fbe\u6839\u8282\u70b9\u4e3a\u6b62\n\n~~\u5148\u4e0d\u8c08\u540c\u65f6\u5b58\u4e0b\u6765\u5144\u5f1f\u548c\u7236\u4eb2\u5bf9\u5e76\u67e5\u96c6\u7684\u8fdd\u80cc~~\n\n\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684\u70b9\uff0c\u6700\u4f4e\u53ef\u80fd\u76f4\u63a5\u548c\u6839\u8282\u70b9\u76f8\u8fde\uff0c\u4e00\u6b21\u4e0a\u6eaf\u5373\u53ef\n\n\u4f46\u662f\uff0c\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u53ea\u5408\u5e76\u8fdb\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48K\u6b21\u5408\u5e76\u548c\u6df1\u5ea6\u53ef\u80fd\u4e3aK+1\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4ecd\u7136\u662f\u5355\u8bcd\u64cd\u4f5cO(n)\n\n\u5b9e\u9645\u4e0a\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a\u5e38\u6570\u8f83\u5c0f\u7684O(qn)\n\n\u6240\u4ee5\u4f9d\u65e7GG\n\n~~\u66fe\u7ecf\u6211\u5929\u771f\u5730\u4ee5\u4e3a\u662f\u6781\u4e0d\u7a33\u5b9a\u7684logn~~\n\n~~\u8fd8\u6709\u4e00\u4ef6\u9b54\u6cd5\u7684\u4e8b\u5c31\u662f\u59cb\u7ec8\u8c03\u4e0d\u5bf9~~\n\n### -\u6743\u503c\u4fee\u6539/\u67e5\u8be2\u4e0a\n\n_A1 x v: \u5c06\u7b2cx\u4e2a\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0v_\n\n_A2 x v: \u5c06\u7b2cx\u4e2a\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u90fd\u589e\u52a0v_\n\n_A3 v: \u5c06\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u90fd\u589e\u52a0v_\n\n _F1 x: \u8f93\u51fa\u7b2cx\u4e2a\u8282\u70b9\u5f53\u524d\u7684\u6743\u503c_\n\n_F2 x: \u8f93\u51fa\u7b2cx\u4e2a\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u4e2d\uff0c\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\u7684\u6743\u503c_\n\n_F3: \u8f93\u51fa\u6240\u6709\u8282\u70b9\u4e2d\uff0c\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\u7684\u6743\u503c_ \n\n\u4fee\u6539\u4e00\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\uff0c\u6216\u8005\u6c42\u6700\u503c\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86**\u533a\u95f4\u4fee\u6539/\u67e5\u8be2**\u7c7b\u7684\u6570\u636e\u7ed3\u6784\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u5f20\u4e0d\u65ad\u66f4\u65b0\u7684\u56fe\uff0c**\u5e38\u89c1\u7684\u6309\u7167\u5e8f\u53f7\u6784\u9020\u533a\u95f4\u7684\u6570\u636e\u7ed3\u6784\u4f3c\u4e4e\u5f88\u96be\u76f4\u63a5\u5957\u7528**\uff0c\u56e0\u4e3a\u533a\u95f4\u5728\u5e8f\u5217\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u662f\u5f88\u96be\u786e\u5b9a\u7684\n\n\u8bd5\u60f3\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\n\n\u6bcf\u6b21\u5408\u5e76\u7684\u8fde\u901a\u5757**\u5728\u7f16\u53f7\u4e0a\u8fde\u7eed**\n\n\u56e0\u4e3a\u4e0a\u8282\u6240\u8bf4\uff0c\u672c\u9898\u5bf9\u56fe\u7684\u7ed3\u6784\u7684\u66f4\u6539\u53ea\u6709\u5408\u5e76\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e32\u88ab\u5408\u5e76\u7684\u70b9\u8bd5\u505a\u4e00\u4e2a\u5e8f\u5217\uff0c\u4e00\u6b21\u5408\u5e76\u5c31\u662f\u628a\u4e24\u4e2a\u5e8f\u5217**\u524d\u540e\u8fde**\u63a5\uff0c\u5f97\u5230\u4e00\u4e2a\u66f4\u957f\u7684\u5e8f\u5217\uff0c\u539f\u6765\u7684\u4e24\u4e2a\u5e8f\u5217\u5747\u4e3a\u5176\u8fde\u7eed\u5b50\u5e8f\u5217\n\n\u8fdb\u4e00\u6b65\u60f3\u60f3\uff0c\u6240\u6709\u7684\u5408\u5e76\u64cd\u4f5c\u90fd\u8fd9\u4e48\u5904\u7406\uff0c\u5982\u6b64\u5f80\u590d\uff0c\u90a3\u4e48\u5230\u6700\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7684\u4e0d\u5c31\u662f\u82e5\u5e72\u4e2a\u4e92\u4e0d\u5173\u8054\u7684\u5e8f\u5217\u5417\n\n\u800c\u4e14\u8fd9\u6837\u7684\u5e8f\u5217\u663e\u7136\u6ee1\u8db3\u8fd9\u6837\u7684\u6027\u8d28\n\n\u5bf9\u4e8e\u4efb\u610f\u9636\u6bb5\u5bf9\u5e94\u7684\u67e5\u8be2\u548c\u4fee\u6539\uff0c\u5bf9\u5e94\u8fde\u901a\u5757\u7684\u7b54\u6848\u5c31\u662f\u8be5**\u8fde\u7eed\u533a\u95f4**\u7684\u7b54\u6848\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c**\u7ebf\u6bb5\u6811**\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u8ba9\u8fd9\u4e2a\u5408\u5e76\u8fc7\u7a0b\u8fde\u7eed\u5462?\n\n**\u5efa\u7acb\u6620\u5c04\u5c31\u597d\u8fa3\uff01**\n\n# \u5b9e\u73b0\u601d\u8def\u4e0e\u5e38\u6570\u4f18\u5316\n\n\u8fd9\u6837\u591a\u4e2a\u8be2\u95ee\u7684\u9898\u76ee\uff0c\u7b97\u6cd5\u603b\u662f\u5206\u79bb\u7ebf\u548c\u5728\u7ebf\u7684\n\n\u5728\u7ebf\u7b97\u6cd5\u80af\u5b9a\u4e0d\u80fd\u77e5\u9053\u6700\u540e\u7684\u8fde\u63a5\u60c5\u51b5\u7684\n\n\u90a3\u4e48\u8003\u8651\u79bb\u7ebf\n\n\u5148\u5904\u7406\u6240\u6709\u7684U\u64cd\u4f5c\u5efa\u7acb\u6620\u5c04\n\n\u5728\u4e0a\u6587\u6240\u8ff0\u7684\u6620\u5c04\u5173\u7cfb\u4e0b\uff0c\u4f7f\u5408\u5e76\u8fc7\u7a0b\u4e2d\u7684\u5e8f\u53f7\u662f\u8fde\u7eed\u7684\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6539\u53d8\u9996\u4f4d\u8fde\u63a5\u987a\u5e8f\u7684\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u7528\u94fe\u8868\u7ed9\u8282\u70b9\u4e00\u7ec4\u65b0\u7684\u201c\u5e8f\u53f7\u201d\uff0c\u6620\u5c04\u4ece\u800c\u4f7f\u4e4b\u8fde\u7eed\n\n\u518d\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u4e00\u4e0b\u5bf9\u9996\u4f4d\u8282\u70b9\u7684\u67e5\u627e\n\n\uff08\u5982\u679c\u6bcf\u6b21\u90fd\u904d\u5386\u524d\u540e\u7684\u8bdd\u4f1aT\u51e0\u4e2a\uff09\n\n\u7136\u540e\u518d\u6109\u5feb\u5730\u8dd1\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u5566\n\n~~\u600e\u4e48\u8fd9\u4e48\u77ed\uff1f~~\n\n# Code\n\nlb\u4e3a\u94fe\u8868\uff0cre\u4e3a\u6620\u5c04\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5427\n\n\u6709\u4e00\u4e9b\u5e38\u6570\u4e0a\u548c\u5b9e\u73b0\u4e0a\u7684\u5197\u4f59~~\uff0c\u548c\u51cc\u4e71\u7684\u4ee3\u7801\uff0c~~\u8fd8\u8bf7\u89c1\u8c05\u3002\n\n~~\u6709\u65f6\u95f4\u6211\u4f1a\u56de\u6765\u66f4\u65b0\u4e00\u4e0b\u66f4\u7cbe\u7b80\u7684\u4ee3\u7801(\u5495\u5495)~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\nconst int Nmax=300000+5;\nint n,Q,k[Nmax],ques[Nmax][3],totq,f[Nmax],re[Nmax],leftt[Nmax],rightt[Nmax];\nstruct lb{int pre,nex;}h[Nmax];\nint a[Nmax];\nstruct tree{int l,r;long long pre,add;}t[4*Nmax];\ninline void build(int p,int l,int r)\n{\n    t[p].l=l;t[p].r=r;\n    if(l==r)\n    {\n        t[p].pre=a[l];\n        return;\n    }\n    int mid=(l+r)/2;\n    build(p*2,l,mid);\n    build(p*2+1,mid+1,r);\n    t[p].pre=max(t[p*2].pre,t[p*2+1].pre);\n}\ninline void speard(int p)\n{\n    if(t[p].add)\n    {\n        t[p*2].pre+=t[p].add;\n        t[p*2+1].pre+=t[p].add;\n        t[p*2].add+=t[p].add;\n        t[p*2+1].add+=t[p].add;\n        t[p].add=0;\n    }\n}\ninline void change(int p,int x,int y,int z)\n{\n    if(x<=t[p].l&&y>=t[p].r)\n    {\n        t[p].pre+=z;\n        t[p].add+=z;\n        return;\n    }\n    speard(p);\n    int mid=(t[p].l+t[p].r)/2;\n    if(x<=mid) change(p*2,x,y,z);\n    if(y>mid) change(p*2+1,x,y,z);\n    t[p].pre=max(t[p*2].pre,t[p*2+1].pre);\n}\ninline int ask(int p,int x,int y)\n{\n    if(x<=t[p].l&&y>=t[p].r) return t[p].pre;\n    speard(p);\n    int mid=(t[p].l+t[p].r)/2;\n    int ans=-1<<(30);\n    if(x<=mid) ans=max(ans,ask(p*2,x,y));\n    if(y>mid) ans=max(ans,ask(p*2+1,x,y));\n    return ans;\n}\ninline int cz(int k)\n{return k==f[k]?k:f[k]=cz(f[k]);}\ninline void hb(int x,int y)\n{x=cz(x);y=cz(y);f[y]=x;}\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin>>n;\n    for(register int i=1;i<=n;i++) cin>>k[i];\n    for(register int i=1;i<=n;i++) h[i].pre=h[i].nex=i,f[i]=leftt[i]=rightt[i]=i;\n    cin>>Q;\n    char opt,t;\n    int x,y;\n    while(Q--)\n    {\n        cin>>opt;\n        switch(opt)\n        {\n            case 'U':\n                totq++;\n                cin>>x>>y;\n                if(cz(x)==cz(y)) continue;\n                ques[totq][0]=0;\n                ques[totq][1]=x;\n                ques[totq][2]=y;\n                x=cz(x);y=cz(y);\n                h[rightt[x]].nex=leftt[y];h[leftt[y]].pre=rightt[x];\n                leftt[y]=rightt[x];\n                rightt[x]=rightt[y];\n                hb(x,y);\n                break;\n            case 'A':\n                cin>>t;totq++;\n                switch(t)\n                {\n                    case '1':\n                        cin>>x>>y;\n                        ques[totq][0]=1;\n                        ques[totq][1]=x;\n                        ques[totq][2]=y;\n                        break;\n                    case '2':\n                        cin>>x>>y;\n                        ques[totq][0]=2;\n                        ques[totq][1]=x;\n                        ques[totq][2]=y;\n                        break;\n                    case '3':\n                        cin>>x;\n                        ques[totq][0]=3;\n                        ques[totq][1]=x;\n                        break;\n                }\n                break;\n            case 'F':\n                cin>>t;totq++;\n                switch(t)\n                {\n                    case '1':\n                        cin>>x;\n                        ques[totq][0]=4;\n                        ques[totq][1]=x;\n                        break;\n                    case '2':\n                        cin>>x;\n                        ques[totq][0]=5;\n                        ques[totq][1]=x;\n                        break;\n                    case '3':\n                        ques[totq][0]=6;\n                        ques[totq][1]=x;\n                        ques[totq][2]=y;\n                        break;\n                }\n                break;\n        }\n    }\n    for(register int i=1;i<=n;i++) f[i]=leftt[i]=rightt[i]=i;\n    int maxt=0;\n    for(register int i=1;i<=n;i++)\n        if(h[i].pre==i) \n        {\n            int p=i;\n            while(h[p].nex!=p) a[++maxt]=k[p],re[p]=maxt,p=h[p].nex;\n            a[++maxt]=k[p];re[p]=maxt;\n        }\n    build(1,1,n);\n    int l,r;\n    for(register int o=1;o<=totq;o++)\n    {\n        switch(ques[o][0])\n        {\n            case 0:\n                leftt[cz(re[ques[o][1]])]=min(leftt[cz(re[ques[o][1]])],leftt[cz(re[ques[o][2]])]);\n                rightt[cz(re[ques[o][1]])]=max(rightt[cz(re[ques[o][1]])],rightt[cz(re[ques[o][2]])]);\n                hb(re[ques[o][1]],re[ques[o][2]]);\n                break;\n            case 1:change(1,re[ques[o][1]],re[ques[o][1]],ques[o][2]);break;\n            case 2:\n                l=leftt[cz(re[ques[o][1]])];r=rightt[cz(re[ques[o][1]])];\n                change(1,l,r,ques[o][2]);\n                break;\n            case 3:change(1,1,n,ques[o][1]);break;\n            case 4:cout<<ask(1,re[ques[o][1]],re[ques[o][1]])<<endl;break;\n            case 5:\n                l=leftt[cz(re[ques[o][1]])];r=rightt[cz(re[ques[o][1]])];\n                cout<<ask(1,l,r)<<endl;\n                break;\n            case 6:cout<<ask(1,1,n)<<endl;break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1544621361,
        "uid": 75520,
        "name": "Merc03",
        "ccfLevel": 7,
        "title": "[P3273 / SCOI2011] \u68d8\u624b\u7684\u64cd\u4f5c \u9898\u89e3"
    },
    {
        "content": "\u3000\u5206\u6790\uff1a\n\n\u3000\u3000\u771f\u662f\u4e00\u9053\u6076\u5fc3\u7684\u5de6\u504f\u6811\u9898\u3002\n\n\u3000\u3000\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u5de6\u504f\u6811\uff0c\u7b2c\u4e00\u4e2a\u7ef4\u62a4\u6b63\u5e38\u7684\u64cd\u4f5c\u4fe1\u606f\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u62a4\u6240\u6709\u70b9\u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u3000\u3000\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff1a\u5728\u7b2c\u4e00\u4e2a\u5de6\u504f\u6811\u4e2d$merge$\u5373\u53ef\uff0c\u53e6\u5916\u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u5408\u5e76\u7684\u4e24\u4e2a\u5806\u9876\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u4ece\u7b2c\u4e8c\u4e2a\u5de6\u504f\u6811\u4e2d\u5220\u9664\uff08\u6b63\u786e\u6027\u81ea\u5df1\u601d\u8003\uff09\u3002\n\n\u3000\u3000\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff1a\u5c06\u8be5\u70b9\u4ece\u4e24\u4e2a\u5de6\u504f\u6811\u4e2d\u5220\u9664\uff0c\u4fee\u6539\u503c\u4ee5\u540e\u518d\u91cd\u65b0\u653e\u56de\u53bb\u3002\n\n\u3000\u3000\u7b2c\u4e09\u79cd\u64cd\u4f5c\uff1a\u7528$lazy$\u6807\u8bb0\uff0c\u53ea\u4fee\u6539\u5806\u9876\u7684\u503c\uff0c\u540e\u9762\u518d$merge$\u6216\u8005\u5220\u9664\u8282\u70b9\u7684\u65f6\u5019\u4e0b\u65b9\u6807\u8bb0\u3002\n\n\u3000\u3000\u7b2c\u56db\u79cd\u64cd\u4f5c\uff1a\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\uff0c\u9700\u8981\u8f93\u51fa\u7684\u65f6\u5019\u518d\u52a0\u4e0a\u3002\n\n\u3000\u3000\u7b2c\u4e94\u79cd\u64cd\u4f5c\uff1a\u76f4\u63a5\u8f93\u51fa\u7b2c\u4e00\u4e2a\u5de6\u504f\u6811\u4e2d\u8be5\u8282\u70b9\u7684\u503c\u3002\n\n\u3000\u3000\u7b2c\u516d\u79cd\u64cd\u4f5c\uff1a\u76f4\u63a5\u8f93\u51fa\u7b2c\u4e00\u4e2a\u5de6\u504f\u6811\u4e2d\u8be5\u8282\u70b9\u6240\u5728\u5806\u7684\u5806\u9876\u7684\u503c\u3002\n\n\u3000\u3000\u7b2c\u4e03\u79cd\u64cd\u4f5c\uff1a\u76f4\u63a5\u8f93\u51fa\u7b2c\u4e8c\u4e2a\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\u7684\u503c\u3002\n\n\u3000\u3000\u4ee5\u4e0a\u3002\n\n\u3000\u3000\u9898\u5982\u5176\u540d\uff0c\u771f$TM$\u53c8\u68d8\u624b\u53c8\u6076\u5fc3\u3002\u3002\u3002\n\n\u3000\u3000Code\uff1a\n  ```cpp\n//It is made by HolseLee on 28th Aug 2018\n//Luogu.org P3273\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define Max(a,b) (a)>(b) ? (a) : (b)\nusing namespace std;\n\nconst int N=3e5+7;\nint n,a[N],m,allsign,root;\nstruct Leftist{\n    int ch[N][2],val[N],sign[N],fa[N],dis[N];\n\n    void clear(int x)\n    {\n        ch[x][0]=ch[x][1]=fa[x]=0;\n    }\n\n     int sum(int x)\n    {\n        int ret=0;\n        while(x=fa[x])ret+=sign[x];\n        return ret;\n    }\n\n     void pushdown(int x)\n    {\n        int ul=ch[x][0], ur=ch[x][1];\n        if( ul )val[ul]+=sign[x], sign[ul]+=sign[x];\n        if( ur )val[ur]+=sign[x], sign[ur]+=sign[x];\n        sign[x]=0;\n    }\n\n    int merge(int x,int y)\n    {\n        if(!x||!y)return x+y;\n        if( val[x]<val[y] )\n            swap(x,y);\n        pushdown(x);\n        int &ul=ch[x][0], &ur=ch[x][1];\n        ur=merge(ur,y); fa[ur]=x;\n        if( dis[ur]>dis[ul] )swap(ul,ur);\n        dis[x]=dis[ur]+1;\n        return x;\n    }\n\n     int find(int x)\n    {\n        while(fa[x])x=fa[x];\n        return x;\n    }\n\n     int delet(int x)\n    {\n        pushdown(x);\n        int fx=fa[x];\n        int ka=merge(ch[x][0],ch[x][1]);\n        fa[ka]=fx;\n        if( fx )ch[fx][x==ch[fx][1]]=ka;\n        while( fx ) {\n            if( dis[ch[fx][0]]<dis[ch[fx][1]] )\n                swap(ch[fx][0],ch[fx][1]);\n            if( dis[fx]==dis[ch[fx][1]]+1 )\n                return root;\n            dis[fx]=dis[ch[fx][1]]+1;\n            ka=fx;\n            fx=fa[fx];\n        }\n        return ka;\n    }\n\n     int add_point(int x,int v)\n    {\n        int fx=find(x);\n        if( fx==x ) {\n            if( ch[x][0]+ch[x][1]==0 ){\n                val[x]+=v; return x;\n            } else {\n                if( ch[x][0] ) fx=ch[x][0];\n                else fx=ch[x][1];\n            }\n        }\n        delet(x);\n        val[x]+=v+sum(x);\n        clear(x);\n        return merge(find(fx),x);\n    }\n\n    int build()\n    {\n        queue<int>t;\n        for(int i=1; i<=n; ++i) t.push(i);\n        int x,y,z;\n        while( t.size()>1 ) {\n            x=t.front(); t.pop();\n            y=t.front(); t.pop();\n            z=merge(x,y);t.push(z);\n        }\n        return t.front();\n    }\n}T,H;\n\n void read(int &x)\n{\n    x=0; char ch=getchar(); bool flag=false;\n    while( ch<'0' || ch>'9' ) {\n        if( ch=='-' )flag=true;\n        ch=getchar();\n    }\n    while( ch>='0' && ch<='9' ) {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    flag?x*=(-1):1;\n}\n\nint main()\n{\n    read(n);\n    T.dis[0]=H.dis[0]=-1;\n    for(int i=1; i<=n; ++i){\n        read(a[i]);\n        T.val[i]=H.val[i]=a[i];\n    }\n    root=H.build();\n    read(m);\n    char op[3];int x,y,fx,fy,temp;\n    for(int i=1; i<=m; ++i){\n        scanf(\"%s\",op);\n        if( op[0]=='A' ) {\n            switch( op[1] ){\n                case '1':\n                    read(x), read(y);\n                    root=H.delet(T.find(x));\n                    temp=T.add_point(x,y);\n                    H.val[temp]=T.val[temp];\n                    H.clear(temp);\n                    root=H.merge(root,temp);\n                    break;\n\n                case '2':\n                    read(x), read(y); fx=T.find(x);\n                    root=H.delet(fx);\n                    T.val[fx]+=y; T.sign[fx]+=y;\n                    H.val[fx]=T.val[fx];\n                    H.clear(fx);\n                    root=H.merge(root,fx);\n                    break;\n\n                case '3':\n                    read(y);\n                    allsign+=y;\n                    break;\n            }\n        } else if( op[0]=='F' ) {\n            switch( op[1] ){\n                case '1':\n                    read(x);\n                    printf(\"%d\\n\",T.val[x]+allsign+T.sum(x));\n                    break;\n\n                case '2':\n                    read(x);\n                    printf(\"%d\\n\",T.val[T.find(x)]+allsign);\n                    break;\n\n                case '3':\n                    printf(\"%d\\n\",H.val[root]+allsign);\n                    break;\n            }\n        } else {\n            read(x), read(y);\n            fx=T.find(x), fy=T.find(y);\n            if( fx==fy )continue;\n            temp=T.merge(fx,fy);\n            if( temp==fx )root=H.delet(fy);\n            else root=H.delet(fx);\n        }\n    }\n    return 0;\n}\n  ```",
        "postTime": 1535464036,
        "uid": 49058,
        "name": "HolseLee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6+\u7ebf\u6bb5\u6811\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u53ef\u4ee5\u6620\u5c04\u6210\u4e00\u4e2a\u533a\u95f4\u3002\u6240\u4ee5\uff0c\u9996\u5148\u5bf9\u4e8e\u6240\u6709\u7684U\u64cd\u4f5c\uff0c\u901a\u8fc7\u5e76\u67e5\u96c6\u9884\u5904\u7406\u51fa\u6240\u6709\u539f\u6765\u7684\u5143\u7d20\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u5e76\u6784\u5efa\u5e8f\u5217\uff0c\u4fdd\u8bc1\u4efb\u4f55\u65f6\u5019\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u533a\u95f4\uff08\u53ef\u7528\u94fe\u8868\u5b9e\u73b0\uff09\uff0c\u7136\u540e\u6b64\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5e8f\u5217\u4e0a\u7684\u4fee\u6539/\u8be2\u95ee\u3002\u7ebf\u6bb5\u6811\u5b9e\u73b0\u3002\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define p2 p << 1\n#define p3 p << 1 | 1\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get1() {\n    char c; while ((c = getchar()) != 'A' && c != 'F' && c != 'U');\n    return c;\n}\ninline int get2() {\n    char c; while ((c = getchar()) < '0' || c > '9');\n    return c - 48;\n}\nconst int N = 3e5 + 5;\nint n, a[N], fa[N], pre[N], suf[N], fir[N], lst[N], L[N], R[N],\npos[N], idx[N], T[N << 2], add[N << 2];\nstruct cyx {int op, x, y;} que[N];\nvoid build(int l, int r, int p) {\n    if (l == r) return (void) (T[p] = a[idx[l]]);\n    int mid = l + r >> 1;\n    build(l, mid, p2); build(mid + 1, r, p3);\n    T[p] = max(T[p2], T[p3]);\n}\nvoid change(int l, int r, int s, int e, int v, int p) {\n    if (l == s && r == e) return (void) (add[p] += v);\n    int mid = l + r >> 1; add[p2] += add[p]; add[p3] += add[p];\n    add[p] = 0; if (e <= mid) change(l, mid, s, e, v, p2);\n    else if (s >= mid + 1) change(mid + 1, r, s, e, v, p3);\n    else change(l, mid, s, mid, v, p2),\n        change(mid + 1, r, mid + 1, e, v, p3);\n    T[p] = max(T[p2] + add[p2], T[p3] + add[p3]);\n}\nint ask(int l, int r, int s, int e, int p) {\n    if (l == s && r == e) return T[p] + add[p];\n    int mid = l + r >> 1, res; add[p2] += add[p]; add[p3] += add[p];\n    add[p] = 0; if (e <= mid) res = ask(l, mid, s, e, p2);\n    else if (s >= mid + 1) res = ask(mid + 1, r, s, e, p3);\n    else res = max(ask(l, mid, s, mid, p2),\n        ask(mid + 1, r, mid + 1, e, p3));\n    T[p] = max(T[p2] + add[p2], T[p3] + add[p3]);\n    return res;\n}\nint cx(int x) {\n    if (fa[x] != x) fa[x] = cx(fa[x]);\n    return fa[x];\n}\nvoid zm(int x, int y) {\n    int ix = cx(x), iy = cx(y);\n    if (ix != iy) {\n        fa[iy] = ix;\n        int u = lst[ix], v = fir[iy]; lst[ix] = lst[iy];\n        pre[u] = v; suf[v] = u;\n    }\n}\nvoid wy(int x, int y) {\n    int ix = cx(x), iy = cx(y);\n    if (ix != iy) {\n        fa[iy] = ix;\n        if (L[ix] < L[iy]) R[ix] = R[iy];\n        else L[ix] = L[iy];\n    }\n}\nint main() {\n    int i, j, Q, id, tot = 0; n = read();\n    for (i = 1; i <= n; i++) a[i] = read(),\n        fa[i] = fir[i] = lst[i] = i;\n    Q = read(); for (i = 1; i <= Q; i++) {\n        char c = get1(); switch(c) {\n            case 'U':\n                que[i].x = read(); que[i].y = read();\n                zm(que[i].x, que[i].y); que[i].op = 1; \n                break;\n            case 'A': id = get2(); que[i].x = read();\n                if (id < 3) que[i].y = read();\n                que[i].op = id + 1;\n                break;\n            case 'F': id = get2();\n                if (id < 3) que[i].x = read();\n                que[i].op = id + 4;\n                break;\n        }\n    }\n    for (i = 1; i <= n; i++) if (!pre[i])\n        for (j = i; j; j = suf[j])\n            idx[pos[j] = ++tot] = j;\n    for (i = 1; i <= n; i++) fa[i] = i, L[i] = R[i] = pos[i];\n    build(1, n, 1);\n    for (i = 1; i <= Q; i++) switch(que[i].op) {\n        case 1: wy(que[i].x, que[i].y); break;\n        case 2: change(1, n, pos[que[i].x], pos[que[i].x],\n            que[i].y, 1); break;\n        case 3: id = cx(que[i].x);\n            change(1, n, L[id], R[id], que[i].y, 1);\n            break;\n        case 4: change(1, n, 1, n, que[i].x, 1); break;\n        case 5: printf(\"%d\\n\", ask(1, n, pos[que[i].x],\n            pos[que[i].x], 1)); break;\n        case 6: id = cx(que[i].x);\n            printf(\"%d\\n\", ask(1, n, L[id], R[id], 1));\n            break;\n        case 7: printf(\"%d\\n\", ask(1, n, 1, n, 1));\n            break;\n    }\n    return 0;\n}\n```",
        "postTime": 1501302602,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u7f51\u4e0a\u5bf9\u8fd9\u9053\u9898\u7684\u8bc4\u4ef7\u662f\u6bd2\u7624\u2026\u2026\n\n\u9996\u5148\u8981\u5de6\u504f\u6811\u5408\u5e76\uff0c\u8fd8\u8981\u5806\u7ef4\u62a4\u6700\u5927\u503c\uff0c\u8fd8\u6709\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u548c\u8fde\u901a\u5757\u7684\u6574\u4f53\u52a0\u503c\u2026\u2026\n\n\n\u770b\u7740\u5c31\u70e6\u2026\u2026\u7136\u540e\u6211\u5c31\u81ea\u5df1\u8111\u8865\u51fa\u4e86\u4ee5\u4e0b\u505a\u6cd5\uff0c\u662f\u901f\u5ea6\u6bd4\u8f83\u5feb\u91cc\u9762\u4ee3\u7801\u6700\u77ed\u7684\uff08pb\\_ds\u5927\u6cd5\u597d\uff09\u3002\n\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\u5e73\u8861\u6811\u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bcf\u6b21\u5408\u5e76\u4e24\u68f5\u5e73\u8861\u6811\u65f6\uff0c\u904d\u5386\u5c0f\u7684\u5f80\u5927\u7684\u91cc\u9762insert\uff0c\u8fd9\u6837\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u603b\u5171\u8bbf\u95ee$O(log_2n)$\u6b21\uff0c\u800c\u6bcf\u6b21\u8bbf\u95ee\u90fd\u4f1a\u6709$O(log_2n)$\u7684insert\u64cd\u4f5c\uff0c\u6545\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlog_2^2n)$\u3002\uff08\u6ce8\uff1asplay\u7531\u4e8e\u67d0\u4e2a\u6027\u8d28\u6700\u7ec8\u590d\u6742\u5ea6\u4e3a$O(nlog_2n)$\uff0c\u4f46\u7531\u4e8e\u5e38\u6570\u539f\u56e0\uff0c\u8dd1\u5f97\u6bd4\u4e24\u4e2alog\u7684\u8fd8\u6162\uff09\n\n\n\u63a5\u7740\u6211\u4eec\u5f00\u59cb\u4e71\u641e\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5e73\u8861\u6811\u6539\u6210\u5806\uff0c\u6211\u79f0\u4e4b\u4e3a\u201c\u5806\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u201d\u3002\n\n\u8fd9\u91cc\u6211\u9009\u7528\u914d\u5bf9\u5806\uff0c\u6bcf\u6b21insert\u64cd\u4f5c\u662f$O(1)$\u7684\uff0c\u6545\u6700\u540e\u590d\u6742\u5ea6\u4e3a$O(nlog_2n)$\u3002\n\n\u7136\u540e\u518d\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u7528\u5806\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6700\u5927\u503c\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u8bb0\u5f55\u4e00\u4e2a\u7edf\u4e00\u7684tag\u8bb0\u5f55\u52a0\u7684\u503c\uff0c\u603b\u4f53\u518d\u5f00\u4e00\u4e2atag\u8bb0\u5f55\u603b\u4f53\u52a0\u7684\u503c\u3002\n\n\n\u7136\u540e\u914d\u5bf9\u5806\u53ef\u4ee5\u7528pb\\_ds\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cctype>\n#include <ext/pb_ds/priority_queue.hpp>\n\nusing namespace std;\n\nusing node = pair<int, int>;\nusing tree = __gnu_pbds::priority_queue<node>;\nusing heap = __gnu_pbds::priority_queue<int>;\n\nconst size_t        MaxN = 300005;\n\nint        N, A[MaxN], Q;\ntree    T[MaxN];\ntree::point_iterator    Tit[MaxN];\nint        All, Tag[MaxN], Fa[MaxN];\nheap    Max;\nheap::point_iterator    Mit[MaxN];\n\nint getfa(int x)\n{ return Fa[x] == x ? x : Fa[x] = getfa(Fa[x]); }\n\nvoid merge(int x, int y)\n{\n    x = getfa(x), y = getfa(y);\n    if(T[x].size() > T[y].size())\n        swap(x, y);\n    if(x != y) {\n        for(auto i: T[x]) {\n            Tit[i.second] = T[y].push(node(i.first + Tag[x] - Tag[y], i.second));\n            A[i.second] = i.first + Tag[x] - Tag[y];\n        }\n        T[x].clear();\n        Max.erase(Mit[x]), Max.modify(Mit[y], T[y].top().first + Tag[y]);\n        Fa[x] = y;\n    }\n}\n\nint main()\n{\n    cin >> N;\n    for(int i = 1; i <= N; ++i)\n        scanf(\"%d\", A + i), Fa[i] = i,\n        Tit[i] = T[i].push(node(A[i], i)), Mit[i] = Max.push(A[i]);\n\n    cin >> Q;\n    while(Q--) {\n        char    o[5];\n        int    x, y, v;\n\n        scanf(\"%s\", o);\n        if(*o == 'U')\n            scanf(\"%d%d\", &x, &y), merge(x, y);\n        else if(*o == 'A')\n            if(o[1] == '3')\n                scanf(\"%d\", &v), All += v;\n            else {\n                scanf(\"%d%d\", &x, &v);\n                if(o[1] == '1') {\n                    int    t = getfa(x);\n                    T[t].modify(Tit[x], node(A[x] += v, x));\n                    Max.modify(Mit[t], T[t].top().first + Tag[t]);\n                } else {\n                    int    t = getfa(x);\n                    Tag[t] += v;\n                    Max.modify(Mit[t], T[t].top().first + Tag[t]);\n                }\n            }\n        else if(o[1] == '3')\n            printf(\"%d\\n\", Max.top() + All);\n        else {\n            scanf(\"%d\", &x);\n            int    t = getfa(x);\n            if(o[1] == '1')\n                printf(\"%d\\n\", A[x] + Tag[t] + All);\n            else\n                printf(\"%d\\n\", T[t].top().first + Tag[t] + All);\n        }\n    }\n\n    return 0;\n}\n```",
        "postTime": 1513437606,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u753b\u98ce\u5f88\u65b0\u5947\uff0c\u7136\u540e\u5c31\u968f\u4fbf\u6c34\u54af\n\n[bzoj 2333](https://www.lydsy.com/JudgeOnline/problem.php?id=2333)\n\n[code](https://www.luogu.org/recordnew/show/4099972)\n\n> \u6709$n$\u4e2a\u8282\u70b9\uff0c\u6807\u53f7\u4ece$1$\u5230$n$\uff0c\u8fd9$n$\u4e2a\u8282\u70b9\u4e00\u5f00\u59cb\u76f8\u4e92\u4e0d\u8fde\u901a\n> \u7b2c$i$\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u6743\u503c\u4e3a$a_i$\uff0c\u63a5\u4e0b\u6765\u6709\u5982\u4e0b\u4e00\u4e9b\u64cd\u4f5c\n> **U x y** \u52a0\u4e00\u6761\u8fb9\uff0c\u8fde\u63a5\u7b2c$x$\u4e2a\u8282\u70b9\u548c\u7b2c$y$\u4e2a\u8282\u70b9\n> **A1 x v** \u5c06\u7b2c$x$\u4e2a\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0$v$\n> **A2 x v** \u5c06\u7b2c$x$\u4e2a\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u90fd\u589e\u52a0$v$\n> **A3 v** \u5c06\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u90fd\u589e\u52a0$v$\n> **F1 x** \u8f93\u51fa\u7b2c$x$\u4e2a\u8282\u70b9\u5f53\u524d\u7684\u6743\u503c\n> **F2 x** \u8f93\u51fa\u7b2c$x$\u4e2a\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u4e2d\uff0c\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\u7684\u6743\u503c\n> **F3** \u8f93\u51fa\u6240\u6709\u8282\u70b9\u4e2d\uff0c\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\u7684\u6743\u503c\n\n\u8fde\u8fb9\u548c\u8fde\u901a\u6027\uff1f\u5e76\u67e5\u96c6\n\n\u67e5\u8be2\u70b9\uff1f\u7528vector\u5b58\u50a8\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u70b9\n\n\u8fde\u901a\u5757\u52a0\uff1f\u6253\u6807\u8bb0\n\n\u5982\u4f55\u5408\u5e76\uff1f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u540c\u65f6\u8981\u66f4\u65b0\u6807\u8bb0\n\n\u6574\u4f53\u52a0\uff1f\u5f00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e00\u4e0b\n\n\u5c40\u90e8\u548c\u5168\u5c40\u6700\u5927\u503c\uff1f\u5f00\u4e2a\u5806\u8bb0\u5f55\u4e00\u4e0b\uff0c\u9700\u8981\u652f\u6301\u53ef\u5220\u9664\u5b58\u5728\u7684\u5143\u7d20\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u652f\u6301\u53ef\u5408\u5e76\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u542f\u53d1\u5f0f\u5408\u5e76\u548c\u53ef\u5220\u5806\n\n### \u542f\u53d1\u5f0f\u5408\u5e76\n\n> \u7ed9\u5b9a\u4e00\u5806\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u6b21\u8bf8\u5982\u5408\u5e76\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6216\u8005\u5728\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u67e5\u8be2\u4e00\u4e9b\u4fe1\u606f\n> \u6570\u636e\u7ed3\u6784\u7684\u63d2\u5165\u548c\u67e5\u8be2\u590d\u6742\u5ea6\u5f88\u4f4e\uff0c\u4f46\u91cd\u6784\u7684\u590d\u6742\u5ea6\u5f88\u9ad8\n\n\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u5c06\u5927\u5c0f\uff08\u5143\u7d20\u4e2a\u6570\uff09\u5c0f\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u5230\u5927\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u8fd9\u6837\u6bcf\u6b21\u6570\u636e\u7ed3\u6784\u5927\u5c0f\u5c31\u4f1a\u7ffb\u4e00\u500d\uff0c\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u8bbf\u95ee$O(\\text{log}n)$\u6b21\n\n\u6253\u4e2a\u6bd4\u65b9\uff0c\u8981\u662f\u5408\u5e76\u4e24\u4e2a\u5806\u7684\u8bdd\uff0c\u5c0f\u7684\u90a3\u4e2a\u5806\u4e00\u76f4pop\uff0c\u5927\u7684\u90a3\u4e2a\u5806\u5c06pop\u51fa\u6765\u7684\u5143\u7d20push\u8fdb\u53bb\n\n### \u53ef\u5220\u5806\n\n> \u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\n> \u652f\u6301\u63d2\u5165\u4e00\u4e2a\u6570\n> \u5220\u9664\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u5728\u7684\u6570\n> \u67e5\u8be2\u6700\u5927\u503c\n\n\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u5206\u522b\u53eb\u505aval\u548cdel\n\n\u8fd9\u4e24\u4e2a\u5806\u7684\u6027\u8d28\u9700\u8981\u4e00\u6837\uff0c\u5373\u8981\u4e48\u540c\u65f6\u662f\u6700\u5c0f\u5806\u8981\u4e48\u540c\u65f6\u662f\u6700\u5927\u5806\n\n\u5bf9\u4e8e\u63d2\u5165\uff0c\u76f4\u63a5\u5728val\u4e2dpush\u503c\n\n\u5bf9\u4e8e\u5220\u9664\uff0c\u76f4\u63a5\u5728del\u4e2dpush\u503c\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u4e00\u76f4\u5224\u65adval\u548cdel\u7684\u5806\u9876\u662f\u5426\u76f8\u540c\uff0c\u76f8\u540c\u7684\u8bdd\u90fdpop\u6389\uff0c\u4e00\u76f4\u5230del\u4e3a\u7a7a\uff0c\u7136\u540e\u8f93\u51faval\u7684\u5806\u9876\n\n``` cpp\n%:pragma GCC optimize(2)\n\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <vector>\nusing namespace std;\nconst int N = 310000;\ntypedef long long ll;\nint n, q;\nll a[N], globalTag, localTag[N], fa[N];\nvector<ll> num[N];\nint get(int x) {return x == fa[x] ? x : fa[x] = get(fa[x]);}\nstruct heap {\n    priority_queue<ll> val, del;\n    void push(ll x) {val.push(x);}\n    void pop(ll x) {del.push(x);}\n    ll top() {while(del.size() && val.top() == del.top()) val.pop(), del.pop(); return val.top();}\n} globalMx, localMx[N];\nchar op[5];\nint main() {\n    scanf(\"%d\", &n);\n    for(int i = 1 ; i <= n ; ++ i) {\n        scanf(\"%lld\", &a[i]);\n        fa[i] = i;\n        num[i].push_back(i);\n        localMx[i].push(a[i]);\n        globalMx.push(a[i]);\n    }\n    scanf(\"%d\", &q);\n    for(int i = 1, x, y, v ; i <= q ; ++ i) {\n        scanf(\"%s\", op);\n        if(op[0] == 'U') {\n            scanf(\"%d%d\", &x, &y), x = get(x), y = get(y);\n            if(x != y) {\n                if(num[x].size() < num[y].size()) swap(x, y);\n                globalMx.pop(localMx[y].top() + localTag[y]);\n                globalMx.pop(localMx[x].top() + localTag[x]);\n                for(int j = 0 ; j < num[y].size() ; ++ j) {\n                    int id = num[y][j];\n                    fa[id] = x;\n                    a[id] = a[id] + localTag[y] - localTag[x];\n                    num[x].push_back(id);\n                    localMx[x].push(a[id]);\n                }\n                num[y].clear();\n                globalMx.push(localMx[x].top() + localTag[x]);\n            }\n        } else if(op[0] == 'A' && op[1] == '1') {\n            scanf(\"%d%d\", &x, &v);\n            globalMx.pop(localMx[get(x)].top() + localTag[get(x)]);\n            localMx[get(x)].pop(a[x]);\n            localMx[get(x)].push(a[x] += v);\n            globalMx.push(localMx[get(x)].top() + localTag[get(x)]);\n        } else if(op[0] == 'A' && op[1] == '2') {\n            scanf(\"%d%d\", &x, &v);\n            globalMx.pop(localMx[get(x)].top() + localTag[get(x)]);\n            localTag[get(x)] += v;\n            globalMx.push(localMx[get(x)].top() + localTag[get(x)]);\n        } else if(op[0] == 'A' && op[1] == '3') {\n            scanf(\"%d\", &v);\n            globalTag += v;\n        } else if(op[0] == 'F' && op[1] == '1') {\n            scanf(\"%d\", &x);\n            printf(\"%lld\\n\", a[x] + localTag[get(x)] + globalTag);\n        } else if(op[0] == 'F' && op[1] == '2') {\n            scanf(\"%d\", &x);\n            printf(\"%lld\\n\", localMx[get(x)].top() + localTag[get(x)] + globalTag);\n        } else if(op[0] == 'F' && op[1] == '3') {\n            printf(\"%lld\\n\", globalMx.top() + globalTag);\n        }\n    }\n}\n```",
        "postTime": 1524668746,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "[\u70b9\u51fb\u83b7\u53d6\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$QwQ$](https://ctz45562.github.io/2019/03/16/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P3273-%E3%80%90-SCOI2011-%E6%A3%98%E6%89%8B%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3273)\n\n\u957f\u5f97\u4e00\u70b9\u4e5f\u4e0d\u50cf\u7ebf\u6bb5\u6811\u7684\u7ebf\u6bb5\u6811\u601d\u7ef4\u9898\u3002\u3002\u3002\n\n\u770b\u5230\u8fde\u8fb9\u9996\u5148\u60f3\u5230\u4e86$LCT$\u3002\u4f46\u662f\u3002\u3002\u3002$LCT$\u4e0d\u80fd\u5bf9\u4e00\u7fa4\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u3002\n\n\u6362\u4e2a\u601d\u8def\u60f3\uff1a\u5982\u679c\u540c\u4e00\u8054\u901a\u5757\u8282\u70b9\u7f16\u53f7\u8fde\u7eed\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u5c31\u597d\u7ef4\u62a4\u4e86\u5462\uff1f\u8fd9\u6837\u95ee\u9898\u5c31\u53d8\u6210\u4e86**\u4fdd\u8bc1\u6bcf\u6b21\u8fde\u8fb9\u540e\u5f62\u6210\u7684\u8054\u901a\u5757\u7f16\u53f7\u8fde\u7eed**\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5e76\u67e5\u96c6$+$\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u3002\n\n\u9898\u76ee\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u81ea\u7136\u53ef\u4ee5\u628a\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\u3002\n\n\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u8054\u901a\u5757\uff0c\u62e5\u6709\u4e00\u4e2a\u7f16\u53f7\u5e8f\u5217\uff08\u8fd9\u91cc\u7f16\u53f7\u5e8f\u5217\u662f\u4e00\u4e2a**\u76f8\u5bf9\u4f4d\u7f6e**\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684\u8054\u901a\u5757\u7f16\u53f7\u9760\u524d\u9760\u540e\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u7684\uff09\u3002\u5f53\u8fde\u63a5\u4e24\u4e2a\u8054\u901a\u5757\u65f6\uff0c\u628a\u5b83\u4eec\u4e24\u4e2a\u7684\u5f62\u6210\u7f16\u53f7\u62fc\u63a5\u8d77\u6765\u3002\u849f\u84bb\u7528\u7684\u6734\u7d20\u7684\u94fe\u8868\uff0c\u53ef\u4ee5$O(1)$\u5730\u5c06\u4e24\u4e2a\u5757\u7f16\u53f7\u5e8f\u5217\u8fde\u63a5\u8d77\u6765\u3002\n\n\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\u5927\u5c0f\uff0c\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u7ef4\u62a4\u6700\u5927\u503c\u5c31\u597d\u4e86$QwQ$\u3002\n\n\u6ce8\u610f\uff01\u6570\u636e\u6709\u4e0d\u5408\u6cd5\u8fde\u8fb9\uff0c\u8981\u7279\u5224\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8fd8\u662f\u770b\u4ee3\u7801\u6e05\u6670\u4e00\u4e9b\uff1a\uff08\u849f\u84bb\u6ca1\u5199\u8fc7\u94fe\u8868\uff0c\u81ea\u5df1$yy$\u7528\u6570\u7ec4\u5199\u7684\u7684\u53ef\u80fd\u6bd4\u8f83\u4e11\u964b\u3002\u3002\u3002\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 300005\n#define inf 0x3f3f3f3f\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n\tT x=0;\n\tint y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nint nex[maxn],tail[maxn],a[maxn],pos[maxn],seg[maxn],fa[maxn],siz[maxn],cnt,n;\n//nex\u6307\u5411\u94fe\u8868\u8282\u70b9\u7684\u4e0b\u4e00\u9879\uff0ctail\u662f\u94fe\u8868\u5c3e\u6307\u9488\n//seg\u662f\u91cd\u65b0\u7f16\u7684\u53f7\uff0cpos\u662f\u6bcf\u4e2aseg\u5bf9\u5e94\u7684\u5b9e\u9645\u4f4d\u7f6e\n//fa\u662f\u5e76\u67e5\u96c6\nint find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\nstruct Order{\n\tint s,x,d;//s\u662f\u64cd\u4f5c\u7c7b\u578b\n}o[maxn];//\u5b58\u50a8\u64cd\u4f5c\nstruct Segment_Tree{\n\tint ma[maxn<<2],tag[maxn<<2];\t\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n\tinline void update(int node){\n\t\tma[node]=max(ma[ls(node)],ma[rs(node)]);\n\t}\n\tinline void datadown(int node,int d){\n\t\tma[node]+=d,tag[node]+=d;\n\t}\n\tinline void pushdown(int node){\n\t\tdatadown(ls(node),tag[node]);\n\t\tdatadown(rs(node),tag[node]);\n\t\ttag[node]=0;\n\t}\n\tvoid build(int l=1,int r=cnt,int node=1){\n\t\tif(l==r){\n\t\t\tma[node]=a[pos[l]];\n\t\t\tfa[l]=l,siz[l]=1;\n            //\u91cd\u7f6e\u5e76\u67e5\u96c6\u548csiz\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(l,mid,ls(node));\n\t\tbuild(mid+1,r,rs(node));\n\t\tupdate(node);\n\t}\n\tvoid add(int L,int R,int l,int r,int node,int d){\n\t\tif(L<=l&&R>=r){\n\t\t\tdatadown(node,d);\n\t\t\treturn;\n\t\t}\n\t\tif(tag[node])pushdown(node);\n\t\tint mid=l+r>>1;\n\t\tif(L<=mid)add(L,R,l,mid,ls(node),d);\n\t\tif(R>mid)add(L,R,mid+1,r,rs(node),d);\n\t\tupdate(node);\n\t}\n\tint ask(int L,int R,int l,int r,int node){\n\t\tif(L<=l&&R>=r)return ma[node];\n\t\tif(tag[node])pushdown(node);\n\t\tint mid=l+r>>1,ans=-inf;\n\t\tif(L<=mid)ans=ask(L,R,l,mid,ls(node));\n\t\tif(R>mid)ans=max(ans,ask(L,R,mid+1,r,rs(node)));\n\t\treturn ans;\n\t}\n}st;//\u7ebf\u6bb5\u6811\u5e38\u89c4\u64cd\u4f5c\nint main(){\n\tn=read();\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read(),tail[i]=fa[i]=i;\n\tint m=read();\n\tfor(register int i=1;i<=m;++i){\n\t\tchar s[5];\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='A'){\n\t\t\to[i].s=-s[1]+'0';\n\t\t\tif(s[1]<'3')o[i].x=read();\n\t\t\to[i].d=read();\n\t\t}\n\t\telse if(s[0]=='F'){\n\t\t\to[i].s=s[1]-'0';\n\t\t\tif(s[1]<'3')o[i].x=read();\n\t\t}\n\t\telse {\n\t\t\to[i].s=45562;\n\t\t\tint x=read(),y=read(),u=find(x),v=find(y);\n\t\t\to[i].x=x,o[i].d=y;\n\t\t\tif(u==v)continue;//\u7279\u5224\n\t\t\tnex[tail[u]]=v,tail[u]=tail[v],fa[v]=u;\n            //\u628a\u4e24\u6bb5\u94fe\u8868\u8fde\u8d77\u6765\n\t\t}\n\t}\n    //s<0\u4e3aA\u64cd\u4f5c\uff0c|s|\u4e3a\u5176\u540e\u8ddf\u7684\u7f16\u53f7\n    //s==45562\u8fde\u8fb9\u64cd\u4f5c\n    //s>0\u4e3aF\u64cd\u4f5c\uff0cs\u4e3a\u5176\u540e\u8ddf\u7684\u7f16\u53f7\n\tfor(register int i=1;i<=n;++i)\n\t\tif(fa[i]==i){\n            //\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u5e76\u67e5\u96c6\u91cc\u662f\u6839\u7684\u8bdd\uff0c\u5b83\u4e5f\u662f\u6240\u5728\u94fe\u8868\u7684\u5934\n\t\t\tfor(register int j=i;j;j=nex[j])seg[j]=++cnt,pos[cnt]=j;\n            //\u904d\u5386\u6bcf\u4e00\u4e2a\u94fe\u8868\uff0c\u76f4\u63a5\u6309\u94fe\u8868\u987a\u5e8f\u7f16\u53f7\n\t\t}\n\tst.build();//\u521d\u59cb\u5efa\u6811\n\tfor(register int i=1;i<=m;++i){\n\t\tint s=o[i].s;\n\t\tif(s==45562){\n\t\t\tint u=find(o[i].x),v=find(o[i].d);\n\t\t\tif(u==v)continue;\n\t\t\tsiz[u]+=siz[v],fa[v]=u;\n            //\u7ef4\u62a4\u4e00\u4e0bsiz\u4fbf\u4e8e\u83b7\u53d6\u8054\u901a\u5757\u7684\u533a\u95f4\n\t\t}\n\t\telse if(s<0){\n\t\t\tif(s==-1)st.add(seg[o[i].x],seg[o[i].x],1,cnt,1,o[i].d);\n\t\t\telse if(s==-2){\n\t\t\t\tint u=find(o[i].x);\n\t\t\t\tst.add(seg[u],seg[u]+siz[u]-1,1,cnt,1,o[i].d);\n                //\u5e76\u67e5\u96c6\u6839\u7684\u7f16\u53f7+siz-1\u5c31\u662f\u8be5\u8054\u901a\u5757\u5f53\u524d\u6240\u4ee3\u8868\u7684\u533a\u95f4\n\t\t\t}\n\t\t\telse st.add(1,cnt,1,cnt,1,o[i].d);\n\t\t}\n\t\telse {\n\t\t\tif(s==1)printf(\"%d\\n\",st.ask(seg[o[i].x],seg[o[i].x],1,cnt,1));\n\t\t\telse if(s==2){\n\t\t\t\tint u=find(o[i].x);\n\t\t\t\tprintf(\"%d\\n\",st.ask(seg[u],seg[u]+siz[u]-1,1,cnt,1));\n\t\t\t}\n\t\t\telse printf(\"%d\\n\",st.ma[1]);\n\t\t}\n\t}\n}\n\n```\n\n",
        "postTime": 1552744348,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u5b66\u4e60\u5de6\u504f\u6811\u59ff\u52bf\uff0c\u6b22\u8fce\u6765[blog](http://www.yhzq-blog.cc/\u5de6\u504f\u6811\u5b66\u4e60\u603b\u7ed3/)\n\n\n\u8fd9\u4e2a\u9898\u9700\u8981\u5de6\u504f\u6811\u7684\u4e00\u79cd\u64cd\u4f5c\uff1a\u5220\u9664\u5806\u4e2d\u4efb\u610f\u4e00\u70b9\n\n\n\u56e0\u4e3a\u5de6\u504f\u6811\u6ca1\u6709\u5e73\u8861\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u5220\u9664\u6743\u503c\u4e3a\u7279\u5b9a\u503c\u7684\u70b9\uff0c\u4e5f\u6ca1\u6cd5\u67e5\u627e\u7279\u5b9a\u503c\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\n\u4f46\u662f\u8981\u5220\u9664\u67d0\u7279\u5b9a\u4f4d\u7f6e\u7684\u70b9\u8fd8\u662f\u80fd\u505a\u5230\u7684\u3002\u6211\u4eec\u5148\u548c\u5220\u9664\u6700\u503c\u4e00\u6837\uff0c\u628a\u5b83\u7684\u5b69\u5b50\u5408\u5e76\u8d77\u6765\u3002\n\n\n<center>![](http://www.yhzq-blog.cc/wp-content/uploads/2017/09/QQ%E6%88%AA%E5%9B%BE20170904091719-344x137.png)</center>\n\n\n\u56e0\u4e3a\u6211\u4eec\u5408\u5e76\u540e\u7684\u65b0\u6811\u7684\u8ddd\u79bb\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u8981\u66f4\u65b0\u4e00\u4e0bq\u7684\u8ddd\u79bb\u3002\n\n\n\u5047\u5982q\u7684\u8ddd\u79bb\u662fp\u7684\u8ddd\u79bb+1\uff0c\u90a3\u4e48\u65e0\u8bbap\u662f\u5de6\u53f3\u5b50\u6811\u90fd\u4e0d\u9700\u8981\u8c03\u6574\u3002\n\n\n\u5047\u5982p\u7684\u8ddd\u79bb+1\u5c0f\u4e8eq\u7684\u8ddd\u79bb\uff0c\u5c31\u6539\u4e0bq\u7684\u8ddd\u79bb\uff0c\u800c\u4e14\u5047\u5982p\u662f\u5de6\u5b50\u6811\u7684\u8bdd\u9700\u8981\u4ea4\u6362\u5b50\u6811\u3002\u7531\u4e8eq\u7684\u8ddd\u79bb\u5c0f\u4e86\uff0c\u8fd8\u9700\u8981\u66f4\u65b0\u5b83\u7684\u7236\u4eb2\u3002\n\n\n\u5047\u5982p\u8ddd\u79bb\u53d8\u5927\u4e86\u7684\u8bdd\uff0c\u770b\u770bp\u662f\u4e0d\u662f\u5de6\u5b50\u6811\uff0c\u662f\u5de6\u5b50\u6811\u7684\u8bdd\u5c31\u7ed3\u675f\u4e86\u3002\u4f46\u662fp\u662f\u53f3\u5b50\u6811\u7684\u8bdd\uff0c\u5c31\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u5047\u5982p\u7684\u8ddd\u79bb\u4ecd\u7136\u5c0f\u4e8eq\u7684\u5de6\u5b50\u6811\uff0c\u90a3\u5c31\u76f4\u63a5\u6539q\u7684\u8ddd\u79bb\u5c31\u597d\u4e86\uff1b\u5927\u4e8e\u7684\u8bdd\u8fd8\u8981\u6362\u4e0b\u5b50\u6811\uff0c\u5411\u4e0a\u8d70\u3002(\u5728\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u539f\u6765\u7684\u5de6\u53f3\u5b50\u6811\u8ddd\u79bb\u4e00\u6837\uff0c\u90a3\u5c31\u4e0d\u7528\u66f4\u65b0q\u7684\u8ddd\u79bb\uff0c\u76f4\u63a5\u7ed3\u675f\u5c31\u597d\u4e86)\n\n\n```cpp\nvoid del_pos(int x)\n{\n    int q=f[x],p=merge(ch[x][0],ch[x][1]);\n    f[p]=q;val[x]=-1;\n    if (q)\n        ch[q][ch[q][1]==x]=p;\n    while(q)\n    {\n        if (dis[ch[q][0]]<dis[ch[q][1]])\n            swap(ch[q][0],ch[q][1]);\n        if (dis[ch[q][1]]+1==dis[q])\n            return;\n        dis[q]=dis[ch[q][1]]+1;\n        q=f[q];\n    }\n}\n```\n\n\u4e0b\u9762\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\n\u60c5\u51b51\uff1ap\u7684\u8ddd\u79bb\u51cf\u5c0f\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8eq\u7684\u8ddd\u79bb\u53ea\u80fd\u7f29\u5c0f\uff0c\u5f53\u5faa\u73af\u7ed3\u675f\u65f6\uff0c\u8981\u4e48\u6839\u8282\u70b9\u5904\u7406\u5b8c\u4e86\uff0cq\u4e3a\u7a7a\uff1b\u8981\u4e48p\u662fq\u7684\u53f3\u5b50\u6811\u5e76\u4e14$dis[p]+1=dis[q]$\uff1b\u5982\u679c$dis[p]+1>dis[q]$\uff0c\u90a3\u4e48p\u4e00\u5b9a\u662fq\u7684\u5de6\u5b50\u6811\uff0c\u5426\u5219\u4f1a\u51fa\u73b0q\u7684\u53f3\u5b50\u6811\u8ddd\u79bb\u7f29\u5c0f\u4e86\uff0c\u4f46\u662f\u52a01\u4ee5\u540e\u5374\u5927\u4e8eq\u7684\u8ddd\u79bb\u7684\u60c5\u51b5\uff0c\u4e0d\u7b26\u5408\u5de6\u504f\u6811\u7684\u6027\u8d28\u4e09\u3002\u4e0d\u8bba\u54ea\u79cd\u60c5\u51b5\uff0c\u5220\u9664\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7ed3\u675f\u4e86\u3002\u6ce8\u610f\u5230\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\uff0cp\u7684\u8ddd\u79bb\u90fd\u4f1a\u52a01\uff0c\u800c\u5728\u5faa\u73af\u4f53\u5185\uff0c$dis[p]+1$\u6700\u7ec8\u5c06\u6210\u4e3a\u67d0\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u3002\u6839\u636e\u6027\u8d28\u56db\uff0c\u4efb\u4f55\u7684\u8ddd\u79bb\u90fd\u4e0d\u4f1a\u8d85\u8fc7$\\log n$\uff0c\u6240\u4ee5\u5faa\u73af\u4f53\u7684\u6267\u884c\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7$\\log n$\u3002\n\n\n\u60c5\u51b52\uff1ap\u7684\u8ddd\u79bb\u589e\u5927\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5fc5\u7136\u4e00\u76f4\u4ece\u53f3\u5b50\u6811\u5411\u4e0a\u8c03\u6574\uff0c\u76f4\u81f3q\u4e3a\u7a7a\u6216p\u662fq\u7684\u5de6\u5b50\u6811\u65f6\u505c\u6b62\u3002\u4e00\u76f4\u4ece\u53f3\u5b50\u6811\u5347\u4e0a\u6765\u8fd9\u4e2a\u4e8b\u5b9e\u8bf4\u660e\u4e86\u5faa\u73af\u7684\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7$\\log n$\uff08\u6027\u8d28\u56db\uff09\u3002\n\n\n\u6700\u540e\u6211\u4eec\u770b\u5230\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5c31\u662f\u8fd9\u4e24\u79cd\u60c5\u51b5\u53ea\u4f1a\u53d1\u751f\u5176\u4e2d\u4e00\u4e2a\u3002\u5982\u679c\u67d0\u79cd\u60c5\u51b5\u7684\u8c03\u6574\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8981\u4e48q\u4e3a\u7a7a\uff0c\u8981\u4e48$dis[p]+1=dis[q]$\uff0c\u8981\u4e48p\u662fq\u7684\u5de6\u5b50\u6811\u3002\u8fd9\u4e09\u79cd\u60c5\u51b5\u90fd\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u60c5\u51b5\u53d1\u751f\u3002\u76f4\u89c2\u4e0a\u6765\u8bb2\uff0c\u5982\u679c\u5408\u5e76\u540e\u7684\u65b0\u5b50\u6811\u5bfc\u81f4\u4e86\u7236\u8282\u70b9\u7684\u4e00\u7cfb\u5217\u8ddd\u79bb\u8c03\u6574\u7684\u8bdd\uff0c\u8981\u4e48\u5c31\u4e00\u76f4\u662f\u5f80\u5c0f\u8c03\u6574\uff0c\u8981\u4e48\u662f\u4e00\u76f4\u5f80\u5927\u8c03\u6574\uff0c\u4e0d\u4f1a\u51fa\u73b0\u4ea4\u66ff\u7684\u60c5\u51b5\u3002\u8fd9\u6837\u6548\u7387\u5c31\u662f$O(\\log n)$\n\n\n1.\u5408\u5e76\u4e24\u4e2a\u5806\uff1a\u76f4\u63a5merge\n\n2.\u628a\u67d0\u4e2a\u70b9\u52a0\uff1a\u628a\u8fd9\u4e2a\u70b9\u5220\u4e86\uff0c\u518d\u52a0\u4e00\u4e2a\u66f4\u65b0\u4e86\u6743\u503c\u4e4b\u540e\u7684\u70b9\u3002\n\n3.\u6574\u4e2a\u5806\u52a0\uff1a\u5728\u6839\u4e0a\u6253mark\n\n4.\u5168\u5c40\u52a0\uff1a\u8bb0\u4e2a\u5168\u5c40mark\n\n5.\u67e5\u8be2\u5355\u70b9\uff1a\u4e00\u8def\u52a0\u4e0a\u6240\u6709\u7236\u4eb2\u7684mark\u518d\u8f93\u51fa\n\n6.\u67e5\u8be2\u5806\u6700\u5927\u503c\uff1a\u76f4\u63a5\u8f93\u51fa\n\n7.\u67e5\u8be2\u5168\u5c40\u6700\u5927\u503c\u3002\u3002\n\n\n\u7b2c\u4e03\u4e2a\u64cd\u4f5c\u9700\u8981\u628a\u6240\u6709\u5806\u7684\u6839\u63d0\u53d6\u51fa\u6765\u518d\u5efa\u4e2a\u5806\u3002\u6bcf\u6b21merge\u90fd\u8981\u628a\u5e76\u8fdb\u53bb\u7684\u5806\u5220\u6389\uff0c\u5355\u70b9\u52a0\u548c\u6574\u5806\u52a0\u90fd\u9700\u8981\u66f4\u65b0\u6700\u5927\u503c\u3002\n\n\n\u6ce8\u610f\u7ec6\u8282\n\n\n```cpp\n#include <cstdio>\n#include <queue>\n#define N 300010\nusing namespace std;\nint inline read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid swap(int &x,int &y){int t=x;x=y,y=t;}\nint n,m,add,root;\nchar com[10];\nstruct zps\n{\n    int ch[N][2],val[N],dis[N],f[N],mark[N];\n    void clear(int x){f[x]=ch[x][0]=ch[x][1]=0;}\n    int sum(int x)\n    {\n        int ans=0;\n        while(x=f[x]) ans+=mark[x];\n        return ans;\n    }\n    void pushdown(int x)\n    {\n        if (ch[x][0])\n            val[ch[x][0]]+=mark[x],\n            mark[ch[x][0]]+=mark[x];\n        if (ch[x][1])\n            val[ch[x][1]]+=mark[x],\n            mark[ch[x][1]]+=mark[x];\n        mark[x]=0;\n    }\n    int merge(int x,int y)\n    {\n        if (x*y==0)\n            return x+y;\n        if (val[x]<val[y])\n            swap(x,y);\n        pushdown(x);\n        ch[x][1]=merge(ch[x][1],y);\n        f[ch[x][1]]=x;\n        if (dis[ch[x][0]]<dis[ch[x][1]])\n            swap(ch[x][0],ch[x][1]);\n        dis[x]=dis[ch[x][1]]+1;\n        return x;\n    }\n    int getf(int x)\n    {\n        while(f[x]) x=f[x];\n        return x;\n    }\n    int del_pos(int x)\n    {\n        pushdown(x);\n        int q=f[x],p=merge(ch[x][0],ch[x][1]);\n        f[p]=q;\n        if (q)\n            ch[q][ch[q][1]==x]=p;\n        while(q)\n        {\n            if (dis[ch[q][0]]<dis[ch[q][1]])\n                swap(ch[q][0],ch[q][1]);\n            if (dis[ch[q][1]]+1==dis[q])\n                return root;\n            dis[q]=dis[ch[q][1]]+1;\n            p=q;\n            q=f[q];\n        }\n        return p;\n    }\n    void add_tree(int x,int v)\n    {\n        int fx=getf(x);\n        val[fx]+=v;\n        mark[fx]+=v;\n    }\n    int add_point(int x,int v)\n    {\n        int fx=getf(x);\n        if (fx==x)\n            if (ch[x][0]+ch[x][1]==0)\n            {\n                val[x]+=v;\n                return x;\n            }\n            else\n                if (ch[x][0])\n                    fx=ch[x][0];\n                else\n                    fx=ch[x][1];\n        del_pos(x);\n        val[x]+=v+sum(x);\n        clear(x);\n        return merge(getf(fx),x);\n    }\n    int build()\n    {\n        queue<int>que;\n        for (int i=1;i<=n;i++)\n            que.push(i);\n        while(que.size()>1)\n        {\n            int x=que.front();que.pop();\n            int y=que.front();que.pop();\n            int z=merge(x,y);\n            que.push(z);\n        }\n        return que.front();\n    }\n}h1,h2;\n\nmain()\n{\n    n=read();\n    h1.dis[0]=h2.dis[0]=-1;\n    for (int i=1;i<=n;i++)\n        h1.val[i]=read(),h2.val[i]=h1.val[i];\n    root=h2.build();\n    m=read();\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%s\",com);\n        if (com[0]=='U')\n        {\n            int x=read(),y=read();\n            int temp,fx=h1.getf(x),fy=h1.getf(y);\n            if (fx!=fy)\n            {\n                temp=h1.merge(fx,fy);\n                if (temp==fx)\n                    root=h2.del_pos(fy);\n                else\n                    root=h2.del_pos(fx);\n            }\n        }\n        else \n        if (com[0]=='A')\n            if (com[1]=='1')\n            {\n                int x=read(),v=read();\n                root=h2.del_pos(h1.getf(x));\n                int y=h1.add_point(x,v);\n                h2.val[y]=h1.val[y];\n                h2.clear(y);\n                root=h2.merge(root,y);\n            }\n            else if (com[1]=='2')\n            {\n                int x=read(),v=read(),fx=h1.getf(x);\n                root=h2.del_pos(fx);\n                h1.val[fx]+=v;\n                h1.mark[fx]+=v;\n                h2.val[fx]=h1.val[fx];\n                h2.clear(fx);\n                root=h2.merge(root,fx);\n            }\n            else if (com[1]=='3')\n            {\n                int v=read();\n                add+=v;\n            }\n            else;\n        else if (com[0]=='F')\n            if (com[1]=='1')\n            {\n                int x=read();\n                printf(\"%d\\n\",h1.val[x]+add+h1.sum(x));\n            }\n            else if (com[1]=='2')\n            {\n                int x=read();\n                printf(\"%d\\n\",h1.val[h1.getf(x)]+add);\n            }\n            else if (com[1]=='3')\n                printf(\"%d\\n\",h2.val[root]+add);\n                \n    }\n}\n```\n\n\u8dd1\u5f97\u8fd8\u662f\u633a\u5feb\u7684\u3002\n",
        "postTime": 1504569779,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "~~\u7adf\u7136\u6ca1\u6709\u91cd\u6784\u6811\u7684\u9898\u89e3\uff08~~\n\n\u5bf9\u4e8e\u52a0\u8fb9\uff0c\u4e14\u4e4b\u548c\u8fde\u901a\u6027\u6709\u5173\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u6709\u4e09\u79cd\u5904\u7406\u65b9\u5f0f\uff1a\n\n1. \u91c7\u7528\u53ef\u5408\u5e76\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u5de6\u504f\u6811\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u8005\u51b0\u8336\u59ec\n2. \u76f4\u63a5\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u6bd4\u5982 LCT\n3. \u628a\u64cd\u4f5c\u79bb\u7ebf\uff0c\u5c06\u65f6\u95f4\u4fe1\u606f\u6254\u5230\u56fe\u4e0a\uff0c\u5373\u8fd9\u4e2a\u9898\u89e3\u7528\u7684\u91cd\u6784\u6811\n\n\u6211\u4eec\u6309\u7167\u52a0\u8fb9\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u51b0\u8336\u59ec\uff0c\u5982\u679c\u4e24\u4e2a\u8054\u901a\u5757\u8fd8\u6ca1\u8054\u901a\uff0c\u5c31\u5efa\u4e00\u4e2a\u865a\u70b9\uff0c\u548c\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u6839\u8fde\u8fb9\uff0c\u540c\u65f6\u5c06\u865a\u70b9\u4f5c\u4e3a\u65b0\u8fde\u901a\u5757\u7684\u6839\uff0c\u865a\u70b9\u70b9\u6743\u662f\u8fd9\u6b21\u7684\u662f\u7b2c\u51e0\u6b21\u52a0\u8fb9\u3002\n\n\u6211\u4eec\u518d\u8bb0\u5f55\u6bcf\u4e2a\u64cd\u4f5c\u662f\u5728\u7b2c\u51e0\u6b21\u52a0\u8fb9\u4e4b\u540e\u7684\uff0c\u7136\u540e\u6b63\u5e8f\u5904\u7406\u8be2\u95ee\uff0c\u5728\u6811\u4e0a\u500d\u589e\u5230\u8fdb\u884c\u8fd9\u6b21\u64cd\u4f5c\u65f6\u8fde\u901a\u5757\u7684\u6839\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u95ee\u9898\u53d8\u6210\u4e86\u6811\u4e0a\u95ee\u9898\uff0c\u76f4\u63a5 dfs \u5e8f\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\n\n```cpp\n\n// Problem: P3273 [SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3273\n// Memory Limit: 125 MB\n// Time Limit: 1000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n\n// Happy Chinese new year! (Feb. 12th, 2021)\n\n/*\n * Codeforces @Chenkaifeng\n * Luogu @longer_name\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n#define fi first\n#define se second\n#define rg register\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n\n#define rep(i, s, t) for (rg int i = s; i <= t; i++)\n#define per(i, s, t) for (rg int i = t; i >= s; i--)\n#define OK cerr << \"OK!\\n\"\n\nnamespace fastio {\nconst int SIZE = (1 << 20) + 1;\nchar ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = obuf + SIZE - 1;\nchar _st[55];\nint _qr = 0;\n\ninline char getchar() {\n  return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin),\n          (iS == iT ? EOF : *iS++) : *iS++);\n}\ninline void qread() {}\ntemplate <typename T1, typename... T2>\ninline void qread(T1 &x, T2 &...ls) {\n  x = 0;\n  rg char ch = ' ';\n  rg int ps = 1;\n  while (!isdigit(ch) && ch != '-') ch = getchar();\n  if (ch == '-') ps = -1, ch = getchar();\n  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n  x *= ps;\n  qread(ls...);\n}\n\ninline void flush() {\n  fwrite(obuf, 1, oS - obuf, stdout);\n  oS = obuf;\n  return;\n}\ninline void putchar(char _x) {\n  *oS++ = _x;\n  if (oS == oT) flush();\n}\ntemplate <typename T>\ninline void qwrite(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x < 10) return putchar('0' + x), void();\n  qwrite(x / 10), putchar('0' + (x % 10));\n}\n\ntemplate <typename T>\ninline void qwrite(T x, char ch) {\n  qwrite(x), putchar(ch);\n}\n};  // namespace fastio\n\nconst int N = 3e5 + 5;\nconst int inf = 1e9;\n\nstruct Opt {\n\tint op, x, y;\n};\n\nOpt qry[N];\n\nint mx[N << 2], lazy[N << 2];\nint fa[N << 1][21], weight[N<<1], uni[N], rt[N];\nint dfn[N], dfncnt;\nint a[N], tot;\nint L[N<<1], R[N<<1];\nint n, m;\nint adj[N<<1][2];\n\ninline int Find(int x) {\n\treturn x == uni[x] ? x : uni[x] = Find(uni[x]);\n}\n\ninline void Lazy(int cur, int x) {\n\tmx[cur] += x;\n\tlazy[cur] += x;\n}\n\ninline void PushDown(int cur) {\n\tif(lazy[cur]) {\n\t\tLazy(cur << 1, lazy[cur]);\n\t\tLazy(cur << 1 | 1, lazy[cur]);\n\t\tlazy[cur] = 0;\n\t}\n}\n\ninline void PushUp(int cur) {\n\tmx[cur] = max(mx[cur << 1], mx[cur << 1 | 1]);\n}\n\ninline void Modify(int cur, int p, int x, int l, int r) {\n\tif(l == r) return mx[cur] = x, void();\n\tPushDown(cur);\n\trg int mid = l + r >> 1;\n\tif(p <= mid) Modify(cur << 1, p, x, l, mid);\n\telse Modify(cur << 1 | 1, p, x, mid + 1, r);\n\tPushUp(cur);\n}\n\ninline void Add(int cur, int ql, int qr, int x, int l, int r) {\n\tif(ql <= l && r <= qr) return Lazy(cur, x), void();\n\tPushDown(cur);\n\trg int mid = l + r >> 1;\n\tif(ql <= mid) Add(cur << 1, ql, qr, x, l, mid);\n\tif(mid < qr) Add(cur << 1 | 1, ql, qr, x, mid+1, r);\n\tPushUp(cur);\n}\n\ninline int Max(int cur, int ql, int qr, int l, int r) {\n\tif(ql <= l && r <= qr) return mx[cur];\n\tPushDown(cur);\n\trg int mid = l + r >> 1;\n\trg int res = -inf;\n\tif(ql <= mid) res = max(res, Max(cur << 1, ql, qr, l, mid));\n\tif(mid < qr) res = max(res, Max(cur << 1 | 1, ql, qr, mid + 1, r));\n\treturn res;\n}\n\ninline void Dfs(int u, int f) {\n\t//debug(\"Dfs={} {}\\n\", u, f);\n\tL[u] = n+1;\n\tR[u] = -1;\n\tfa[u][0] = f;\n\trep(i, 1, 20) fa[u][i] = fa[fa[u][i-1]][i-1];\n\tif(1 <= u && u <= n) {\n\t\tL[u] = R[u] = dfn[u] = ++dfncnt;\n\t\treturn;\n\t}\n\trep(i, 0, 1) {\n\t\tint v = adj[u][i];\n\t\t//if(v == 0) continue;\n\t\tDfs(v, u);\n\t\tL[u] = min(L[u], L[v]);\n\t\tR[u] = max(R[u], R[v]);\n\t}\n}\n\ninline int GetT(int x, int t) {\n\tper(i, 0, 20) {\n\t\tif(fa[x][i] && weight[fa[x][i]] <= t) x = fa[x][i];\n\t}\n\treturn x;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\trep(i, 1, n) scanf(\"%d\", &a[i]);\n\trep(i, 1, n) uni[i] = rt[i] = i;\n\tscanf(\"%d\", &m);\n\ttot = n;\n\tint p = 0;\n\trep(i, 1, m) {\n\t\tchar ch; int op;\n\t\tcin >> ch;\n\t\tif(ch == 'U') {\n\t\t\tp++;\n\t\t\tqry[i].op = 1;\n\t\t\tscanf(\"%d%d\", &qry[i].x, &qry[i].y);\n\t\t\tint x = qry[i].x, y = qry[i].y;\n\t\t\tx = Find(x);\n\t\t\ty = Find(y);\n\t\t\tif(x == y) continue;\n\t\t\ttot++;\n\t\t\tweight[tot] = p;\n\t\t\tadj[tot][0] = rt[x];\n\t\t\tadj[tot][1] = rt[y];\n\t\t\trt[y] = tot;\n\t\t\tuni[x] = y;\n\t\t} else if(ch == 'A') {\n\t\t\tscanf(\"%d%d%d\", &op, &qry[i].x, &qry[i].y);\n\t\t\tqry[i].op = 1 + op;\n\t\t} else {\n\t\t\tscanf(\"%d\", &op);\n\t\t\tif(op < 3) scanf(\"%d\", &qry[i].x);\n\t\t\tqry[i].op = 4 + op;\n\t\t}\n\t}\n\tint tm = 0;\n\tper(i, 1, tot) if(!L[i]) Dfs(i, 0);\n\trep(i, 1, n) Modify(1, dfn[i], a[i], 1, n);\n\trep(i, 1, m) {\n\t\tif(qry[i].op == 1) {\n\t\t\ttm++;\n\t\t} else if(qry[i].op == 2) {\n\t\t\tAdd(1, dfn[qry[i].x], dfn[qry[i].x], qry[i].y, 1, n);\n\t\t} else if(qry[i].op == 3) {\n\t\t\tint x = GetT(qry[i].x, tm);\n\t\t\tAdd(1, L[x], R[x], qry[i].y, 1, n);\n\t\t} else if(qry[i].op == 4) {\n\t\t\tAdd(1, 1, n, qry[i].x, 1, n);\n\t\t} else if(qry[i].op == 5) {\n\t\t\tfastio::qwrite(Max(1, dfn[qry[i].x], dfn[qry[i].x], 1, n), '\\n');\n\t\t} else if(qry[i].op == 6) {\n\t\t\tint x = GetT(qry[i].x, tm);\n\t\t\tfastio::qwrite(Max(1, L[x], R[x], 1, n), '\\n');\n\t\t} else if(qry[i].op == 7) {\n\t\t\tfastio::qwrite(mx[1], '\\n');\n\t\t}\n\t}\n  fastio::flush();\n  return 0;\n}\n```",
        "postTime": 1615699766,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "P3273 [SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c \u9898\u89e3"
    },
    {
        "content": "18\u672c\n\u697c\u4e0a @\u8fdc\u822a\u4e4b\u66f2 \u7684\u9898\u89e3\u975e\u5e38\u6b63\u786e\u3002\u867d\u7136\u8fd9\u9053\u9898\u6709\u66f4\u4f18\u79c0\u7684\u7ebf\u6bb5\u6570\u89e3\u6cd5\uff0c\u4f46\u662f\u6bd5\u7adf\u53ef\u4ee5\u4f5c\u4e3a\u53ef\u5e76\u5806\u88f8\u9898\u3002\u53ea\u662f\u8fd9\u9053\u9898\u5de6\u504f\u6811\u7684\u590d\u6742\u5ea6\u503c\u5f97\u5546\u69b7\u3002\u56e0\u4e3a\u5de6\u504f\u6811\u5e76\u4e0d\u80fd\u4fdd\u6301\u5e73\u8861\uff0c\u5176\u6df1\u5ea6\u6700\u5dee\u53ef\u80fd\u662fO\uff08n\uff09\uff0c\u800c\u5bfb\u627e\u67d0\u4e2a\u8282\u70b9\u7684\u5806\u9876\u9700\u8981\u8df3\u5230\u9876\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u7387\u53ef\u80fd\u88ab\u9000\u5316\u6210O\uff08n\uff09\u3002\n\n\u4e00\u4e9b\u7c7b\u4f3c\u7684\u9898\u76ee\u5f80\u5f80\u4e0d\u9700\u8981\u3002\n\n\u4f46\u662f\u6839\u636ebzojdiscuss\u91cc\u7684\u8bf4\u6cd5\uff0c\u8c8c\u4f3c\u6570\u636e\u662f\u7279\u522b\u8bbe\u8ba1\u7684\uff0c\u5de6\u504f\u6811\u53ef\u4ee5\u8dd1\u8fc7\uff0c\u6211\u5c31\u4e0d\u6e05\u695a\u4e86\u3002\n\n\u697c\u4e0a\u9898\u89e3\u5de6\u504f\u6811\u7684\u5199\u6cd5\uff0c\u6709\u4e00\u4e2a\u4e0b\u4f20\u6807\u8bb0\u64cd\u4f5c\uff0c\u5728Del\u64cd\u4f5c\u548cAdd\u64cd\u4f5c\u4e4b\u524d\u90fd\u9700\u8981\u4e0b\u4f20\u6807\u8bb0\u3002\u6211\u8fd9\u91cc\u6709\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b58\u5728\u7684\u5806\uff0c\u53ea\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0\uff0c\u8fd9\u4e2a\u6807\u8bb0\u7684\u6570\u503c\u8868\u793a\u8fd9\u4e2a\u5806\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u52a0\u4e86\u8fd9\u4e2a\u503c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5806\u4e2d\u67d0\u4e2a\u70b9\u7684\u5b9e\u9645\u503c\u4e3a\u70b9\u503c+\u6807\u8bb0\u503c\u3002\n\n\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u4e0d\u662f\u67d0\u4e2a\u5806\u5f97\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7edd\u5bf9\u4e0d\u4f1a\u6709mark\uff08==0\uff09\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6bcf\u6b21Merge\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u662f\u5408\u5e76\u67d0\u4e24\u4e2a\u5177\u4f53\u7684\u70b9\uff0c\u800c\u53ea\u662f\u5408\u5e76\u4ed6\u4eec\u7684\u6839\u8282\u70b9\u3002\u6bcf\u6b21\u5408\u5e76\uff0c\u53ea\u4f1a\u5728\u4e24\u4e2a\u6839\u8282\u70b9\u4e0a\u6709\u6807\u8bb0\u9700\u8981\u8003\u8651\uff08\u5176\u4ed6\u70b9\u90fd\u6ca1\u6709mark\u554a\u3002\uff09\n\n\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u80fd\u4fdd\u7559\u4e00\u4e2a\u6807\u8bb0\uff0c\u53e6\u4e00\u4e2a\u6807\u8bb0\u5c31\u5fc5\u987b\u66b4\u529b\u4e0b\u4f20\u5230\u6bcf\u4e00\u4e2a\u70b9\u3002\u8fd9\u91cc\u5982\u679c\u968f\u4fbf\u4e0b\u4f20\u4e00\u4e2a\u5806\uff0c\u4fdd\u7559\u53e6\u4e00\u4e2a\u5806\u7684mark\uff0c\u590d\u6742\u5ea6\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u3002\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u5bf9\u5806\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2asize\uff0c\u5408\u5e76\u6807\u8bb0\u7684\u65f6\u5019\u9009\u62e9\u5c0f\u7684\u5806\u4e0b\u4f20\uff0c\u5927\u7684\u5806\u6807\u8bb0\u4fdd\u7559\u3002\u8fd9\u6837\u603b\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u8bc1\u660e\u7684\u3002\n\n\u53e6\u5916\uff0c\u8981\u660e\u767d\u5408\u5e76\u4e4b\u540e\uff0c\u4e24\u4e2a\u5806\u516c\u7528\u4e00\u4e2a\u6807\u8bb0\uff08\u73b0\u5728\u662f\u4e00\u4e2a\u5806\u4e86\uff09\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u4e0b\u4f20\u5c0f\u5806\u6807\u8bb0\u7684\u65f6\u5019\u51cf\u53bb\u5927\u5806\u6807\u8bb0\u7684\u5f71\u54cd\u3002\n\n\u4f8b\u5982\uff0c\u5c0f\u5806\u7684\u67d0\u4e2a\u70b9\u662f2\uff0cmark\u4e3a1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u5b9e\u9645\u503c\u4e3a3.\u4f46\u662f\u5982\u679c\u5927\u5806\u6709\u4e00\u4e2aMARK=3\uff0c\u5408\u5e76\u4e4b\u540e\u5171\u7528\u6807\u8bb0\uff0c\u8fd9\u4e2a\u70b9\u7684\u503c\u5c31\u4f1a\u53d8\u62106\uff0c\u663e\u7136\u662f\u4e0d\u53ef\u4ee5\u7684\uff08\u56e0\u4e3a\u5408\u5e76\u524d\u5927\u5806\u7684\u6807\u8bb0\u53ea\u5bf9\u5927\u5806\u6709\u6548\uff09\u3002\u56e0\u6b64\u4e0b\u4f20\u5c0f\u5806\u6807\u8bb0\u7684\u65f6\u5019\u8981\u4e0b\u4f20mark-MARK\uff0c\u8fd9\u6837\u4e0b\u4f20\u4e4b\u540e\u8be5\u70b9\u7684\u503c\u4e3a0\uff0c\u7edf\u8ba1\u7684\u65f6\u5019\u52a0\u4e0aMARK=3\uff0c\u6b63\u597d\u7b49\u4e8e3.\n\n\u5177\u4f53\u8fd8\u6709\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002\u4e0a\u4ee3\u7801\u3002\uff08\u7406\u8bba\u590d\u6742\u5ea6\u5e76\u4e0d\u6162\uff0c\u53ea\u662f\u6211\u81ea\u5e26\u5927\u5e38\u6570\u3002\uff09\n\n\n\n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\nusing namespace std;\nstruct heap\n{\n    struct node\n    {\n        int val,dist,size;\n        int l,r,fa;\n    }e[301000];\n    int ROOT;\n    int mark[301000];\n    int getroot(int x)\n    {\n        while(e[x].fa)    x=e[x].fa;\n        return x;\n    }\n    void pushup(int x)\n    {\n        if(!x)\n            return;\n        e[x].size=1;\n        if(e[x].l)\n            e[x].size+=e[e[x].l].size;\n        if(e[x].r)\n            e[x].size+=e[e[x].r].size;\n    }\n    void pushdown(int root,int val)\n    {\n        e[root].val+=val;\n        if(e[root].l)\n            pushdown(e[root].l,val);\n        if(e[root].r)\n            pushdown(e[root].r,val);\n    }\n    void Mergemark(int x,int y)\n    {\n        int fx=getroot(x);\n        int fy=getroot(y);\n        if(fx==fy)\n            return;\n        int Y=fy,X=fx;\n        if(e[fx].size<e[fy].size)\n            swap(X,Y);\n        pushdown(Y,mark[Y]-mark[X]);\n        if(e[fx].val<e[fy].val)\n            swap(fx,fy);\n        mark[fx]=mark[X];\n        mark[fy]=0;\n    }\n    int Merge2(int x,int y)\n    {\n        if(!x)    return y;\n        if(!y)    return x;\n        int fx=getroot(x);\n        if(fx==getroot(y))\n            return fx;\n        if(e[x].val<e[y].val)\n            swap(x,y);\n//        down(x);\n        e[x].r=Merge2(e[x].r,y);\n        e[e[x].r].fa=x;\n        if(e[e[x].r].dist>e[e[x].l].dist)\n            swap(e[x].l,e[x].r);\n        if(!e[x].r)\n            e[x].dist=0;\n        else\n            e[x].dist=e[e[x].r].dist+1;\n        pushup(x);\n        return x;\n    }\n    int Merge(int x,int y)\n    {\n        Mergemark(x,y);\n        return Merge2(x,y);\n    }\n    int Del(int x)\n    {\n        if(!x)    return 0;\n        e[e[x].l].fa=0;\n        e[e[x].r].fa=0;\n        int q=e[x].fa,p=Merge(e[x].l,e[x].r);\n        pushup(p);\n        e[p].fa=q;\n        if(q&&e[q].l==x)\n            e[q].l=p;\n        if(q&&e[q].r==x)\n            e[q].r=p;\n        if(!q)\n            mark[p]=mark[x];\n        while(q)\n        {\n            if (e[e[q].l].dist<e[e[q].r].dist)\n                swap(e[q].l,e[q].r);\n            if (e[e[q].r].dist+1==e[q].dist)\n                return ROOT;\n            e[q].dist=e[e[q].r].dist+1;\n            p=q;\n            q=e[q].fa;\n            pushup(q);\n        }\n        return p;\n    }\n    void re(int x,int val)\n    {\n        mark[x]=0;\n        e[x].fa=0;\n        e[x].size=1;\n        e[x].val=val;\n        e[x].dist=0;\n        e[x].l=e[x].r=0;\n    }\n    void Add(int x,int val)\n    {\n        re(x,val);\n        if(!ROOT)    ROOT=x;\n        else    ROOT=Merge(ROOT,x);\n    }\n}hp1,hp2;\nint n;\nvoid Merge(int x,int y)\n{\n    int fx=hp1.getroot(x);\n    int fy=hp1.getroot(y);\n    if(fx==fy)\n        return;\n    hp2.ROOT=hp2.Del(fx);\n    hp2.ROOT=hp2.Del(fy);\n    int z=hp1.Merge(fx,fy);\n    hp2.Add(z,hp1.e[z].val+hp1.mark[z]);    \n}\nvoid Addpoint(int x,int v)\n{\n    int fx=hp1.getroot(x);\n    hp2.ROOT=hp2.Del(fx);\n    int val=hp1.e[x].val;\n    if(fx==x)\n        if(!hp1.e[x].l&&!hp1.e[x].r)\n        {\n            hp1.e[x].val+=v;\n            hp2.Add(x,hp1.e[x].val+hp1.mark[x]);\n            return;\n        }\n        else\n        {\n            if(hp1.e[x].l)\n                fx=hp1.e[x].l;\n            if(hp1.e[x].r)\n                fx=hp1.e[x].r;\n        }\n    hp1.Del(x);\n    int z=hp1.getroot(fx);\n    hp1.re(x,hp1.e[x].val+v+hp1.mark[z]),z=hp1.Merge(x,z);\n    hp2.Add(z,hp1.e[z].val+hp1.mark[z]);\n}\nvoid Addlink(int x,int v)\n{\n    int fx=hp1.getroot(x);\n    hp1.mark[fx]+=v;\n    hp2.ROOT=hp2.Del(fx);\n    hp2.Add(fx,hp1.e[fx].val+hp1.mark[fx]);\n}\nint buff=0;\nvoid Addheap(int v)\n{\n    buff+=v;\n}\nint Getpoint(int x)\n{\n    int addition=hp1.mark[hp1.getroot(x)];\n    return hp1.e[x].val+addition+buff;\n}\nint Getlink(int x)\n{\n    int fx=hp1.getroot(x);\n    return hp1.mark[fx]+hp1.e[fx].val+buff;\n}\nint Getheap()\n{\n    return hp2.e[hp2.ROOT].val+buff;\n}\nint a[301000];\nqueue<int> q;\nint main()\n{\n    scanf(\"%d\",&n);\n    hp2.e[0].dist=-1;\n    hp1.e[0].dist=-1;\n    for(int i=1;i<=n;++i)\n        scanf(\"%d\",&a[i]),hp1.re(i,a[i]),hp2.re(i,a[i]),q.push(i);\n    while(!q.empty())\n    {\n        int a1=q.front();\n        q.pop();\n        if(q.empty())\n            break;\n        int a2=q.front();\n        q.pop();\n        hp2.ROOT=hp2.Merge(a1,a2);\n        q.push(hp2.ROOT);\n    }\n    int q;\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        char s[3];\n        int x,y,v;\n        scanf(\"%s\",&s);\n        if(s[0]=='U')\n        {\n            scanf(\"%d %d\",&x,&y);\n            Merge(x,y);\n        }\n        if(s[0]=='A')\n        {\n            if(s[1]=='1'){    scanf(\"%d %d\",&x,&v);    Addpoint(x,v);    }\n            if(s[1]=='2'){    scanf(\"%d %d\",&x,&v);    Addlink(x,v);    }\n            if(s[1]=='3'){    scanf(\"%d\",&v);    Addheap(v);                }\n        }\n        if(s[0]=='F')\n        {\n            int ans=0;\n            if(s[1]=='1'){    scanf(\"%d\",&x);    ans=Getpoint(x);}\n            if(s[1]=='2'){    scanf(\"%d\",&x);    ans=Getlink(x);    }\n            if(s[1]=='3')    ans=Getheap();\n            printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1504609299,
        "uid": 17667,
        "name": "feilongz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u771f\u7684\u662f\u6076\u5fc3\u9898\u3002\u3002\n\n\u5efa\u7acb $n$ \u4e2a multiset \u7ef4\u62a4\u4e00\u4e2a\u8054\u901a\u5757\u5185\u4fe1\u606f\uff0c\u548c\u4e00\u4e2a\u5927\u7684 multiset \u7ef4\u62a4\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u6700\u5927\u503c\uff0c\u8fd8\u6709\u539f\u6570\u7ec4\uff0c\u548c\u4e00\u4e2a\u6253\u8054\u901a\u5757\u52a0\u6807\u8bb0\u7684\u6570\u7ec4\uff0c\u4e00\u4e2a\u5168\u5c40\u52a0\u7684\u53d8\u91cf\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u628a\u5c0f\u7684 multiset \u63d2\u5165\u5230\u5927\u7684 multiset \u4e2d\u7684\u65f6\u5019\u8981\u5148\u52a0\u4e0a\u672c\u5757\u7684\u6807\u8bb0\uff0c\u518d\u51cf\u53bb\u65b0\u5757\u7684\u6807\u8bb0\u3002\u6ce8\u610f\u8fd8\u8981\u540c\u6b65\u66f4\u65b0\u539f\u6570\u7ec4\uff0c\u6240\u4ee5\u6bcf\u5757\u7684 multiset \u5c31\u8981 pair \u4e00\u4e0b\u539f\u6570\u7ec4\u7684\u4e0b\u6807\u3002\u3002\u8bf6\u8fd8\u8981\u66f4\u65b0\u5927 multiset\u3002\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u76f4\u63a5\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539\uff0c\u7136\u540e\u540c\u6b65\u66f4\u65b0\u672c\u8054\u901a\u5757\u7684 multiset \u548c\u5927\u7684 multiset\uff0c\u5177\u4f53\u7684\u8bf4\u5c31\u662f\u5728\u672c\u8054\u901a\u5757\u7684 multiset \u4e2d\u5220\u53bb\u81ea\u5df1\uff0c\u5728\u5927 multiset \u4e2d\u5220\u53bb\u5f53\u524d\u8054\u901a\u5757\u7684\u6700\u5927\u503c\uff0c\u4fee\u6539\u81ea\u5df1\uff0c\u628a\u81ea\u5df1\u63d2\u5165\u672c\u8054\u901a\u5757\u7684 multiset\uff0c\u5728\u5927 multiset \u4e2d\u63d2\u5165\u5f53\u524d\u8054\u901a\u5757\u7684\u6700\u5927\u503c\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $3$\uff0c\u76f4\u63a5\u6253\u6807\u8bb0\u518d\u540c\u6b65\u66f4\u65b0\u5927 multiset\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $4$\uff0c\u5168\u5c40\u52a0\u6807\u8bb0\u3002\n\n\u540e\u4e09\u4e2a\u64cd\u4f5c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u4e00\u5f00\u59cb\u56e0\u4e3a\u5b9e\u73b0\u5e38\u6570\u592a\u5927\u88ab\u5361\u5e38\u4e86\u3002\u3002\u540e\u9762\u4f18\u5316\u4e86\u4e00\u4e0b\u64cd\u4f5c $1$ \u624d\u80fd\u8fc7\uff1a\u5728\u66f4\u65b0\u5927 multiset \u7684\u65f6\u5019\u5220\u53bb\u4e24\u4e2a\u8054\u901a\u5757\u7684\u6700\u5927\u503c\u4e2d\u7684\u8f83\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fd9\u79cd\u9898\u5c3d\u91cf\u4e00\u6b21\u5199\u597d\uff0c\u8981\u4e0d\u7136\u8c03\u8d77\u6765\u5f88\u96be\u53d7\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define it multiset<pair<int,int> >::iterator\nusing namespace std;\nmultiset<pair<int,int>,greater<pair<int,int> > > p[300005];\nmultiset<int> mx;\nint tag[300005];\nint a[300005];\nint f[300005];\nstatic char buf[1000000],*p1=buf,*p2=buf,obuf[1000000],*p3=obuf;\n#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\nint find(int x)\n{\n\treturn f[x]==x?x:f[x]=find(f[x]);\n}\nint read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') w=ch=='-'?-1:w,ch=getchar();\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\nvoid merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y),k;\n\tif(fx==fy) return;\n\tif(p[fx].size()>p[fy].size())\n\t\tswap(fx,fy);\n\tf[fx]=fy;\n\tmx.erase(mx.find(min((*p[fx].begin()).first+tag[fx],(*p[fy].begin()).first+tag[fy])));\n\tfor(it i=p[fx].begin();i!=p[fx].end();i++)\n\t{\n\t\tpair<int,int> u=*i;\n\t\ta[u.second]=u.first-tag[fy]+tag[fx],p[fy].insert({a[u.second],u.second});\n\t}\n\tp[fx].clear();\n}\nbool t[1000];\nvoid gc(char opt[])\n{\n\tint cnt=0;\n\tchar ch=getchar();\n\twhile(!t[ch]) ch=getchar();\n\twhile(t[ch]) opt[cnt++]=ch,ch=getchar();\n}\nint main()\n{\n\tt['U']=t['A']=t['F']=t['1']=t['2']=t['3']=1;\n\tint s=0;\n\tint i,j,n,m,fx,fy,x,y,po;\n\tchar opt[5];\n\tn=read();\n\tfor(i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();\n\t\tp[i].insert({a[i],i});\n\t\tmx.insert(a[i]);\n\t\tf[i]=i;\n\t}\n\tm=read();\n\twhile(m--)\n\t{\n\t\tgc(opt);\n\t\tif(*opt=='U') x=read(),y=read(),merge(x,y);\n\t\tif(*opt=='A'&&opt[1]=='1') \n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tfx=find(x);\n\t\t\tmx.erase(mx.find((*p[fx].begin()).first+tag[fx]));\n\t\t\tp[fx].erase(p[fx].find({a[x],x}));\n\t\t\ta[x]+=y;\n\t\t\tp[fx].insert({a[x],x});\n\t\t\tmx.insert((*p[fx].begin()).first+tag[fx]);\n\t\t}\n\t\tif(*opt=='A'&&opt[1]=='2')\t\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tfx=find(x);\n            po=(*p[fx].begin()).first+tag[fx];\n\t\t\tmx.erase(mx.find(po));\n\t\t\ttag[fx]+=y;\n\t\t\tmx.insert(po+y);\n\t\t}\n\t\tif(*opt=='A'&&opt[1]=='3')\n\t\t{\n\t\t\ty=read();\n\t\t\ts+=y;\n\t\t}\n\t\tif(*opt=='F'&&opt[1]=='1') x=read(),printf(\"%d\\n\",a[x]+tag[find(x)]+s);\n\t\tif(*opt=='F'&&opt[1]=='2') x=read(),printf(\"%d\\n\",(*p[find(x)].begin()).first+tag[find(x)]+s);\n\t\tif(*opt=='F'&&opt[1]=='3') printf(\"%d\\n\",*--mx.end()+s);\n\t}\n}\n```\n",
        "postTime": 1612509419,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "### \u6b64\u9898\u7528\u53ef\u5e76\u5806\u52c9\u5f3a\u8fc7\uff0c\u9700\u52a0\u8f93\u5165\u4f18\u5316\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\u5c31\u662fset\u603b\u662f\u8fc7\u4e0d\u4e86\u4e00\u7ec4\u6570\u636e\uff0c\u7528multiset\u65f6\u95f4\u6709\u70b9\u9ad8\uff0c\u4e0d\u61c2\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u61c2\u6b64\u95ee\u9898\u7684\u7ed9\u6211\u7559\u8a00\u3002\n## \u5de6\u504f\u6811+\u5e76\u67e5\u96c6\n# \u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <utility>\n#include <map>\n#include <set>\n#include <queue>\n#include <vector>\n#include <iostream>\n#include <stack>\nusing namespace std;\n#define INF 0x3f3f3f3f\n#define eps 1e-6\n#define CLR( a, v ) memset ( a, v, sizeof ( a ) )\n#define LL long long\n#define DBUG printf ( \"here!!!\\n\" )\n#define rep( i, a, b ) for ( int i = ( a ); i < ( b ); i ++ )\n#define PB push_back\n#define ULL unsigned long long\n#define PI acos ( -1.0 )\n#define lson l, m, rt << 1\n#define rson m+1, r, rt << 1 | 1\n#define lowbit( x ) ( ( x )&( -x ) )\n#define CASE int Test; scanf ( \"%d\", &Test ); for ( int cas = 1; cas <= Test; cas ++ )\n#define ALL( x ) x.begin ( ), x.end ( )\n#define INS( x ) x, x.begin ( )\ntypedef pair < int, int > Pii;\ntypedef pair < double, double > Pdd;\ntypedef set < int > Set;\nconst int maxn = 300005;\nint read_int ( ) {\n\tint res = 0, f = 1;\n\tint ch = getchar ( );\n\twhile ( ch < '0' || ch > '9' ) {\n\t\tif ( ch == -1 )\n\t\t\treturn -1;\n\t\tif ( ch == '-' )\n\t\t\tf = -1;\n\t\tch = getchar ( );\n\t}\n\twhile ( ch >= '0' && ch <= '9' ) {\n\t\tres = res*10+( ch-'0' );\n\t\tch = getchar ( );\n\t}\n\treturn res*f;\n}\nint rt[maxn], ch[maxn][2], sum[maxn], S[maxn], c;\nint con[maxn], fa[maxn], a[maxn], dis[maxn];\nint find ( int x ) {\n\treturn con[x] == x ? x : con[x] = find ( con[x] );\n}\nvoid PushDown ( int u ) {\n\tif ( sum[u] ) {\n\t\tif ( ch[u][0] ) {\n\t\t\tsum[ ch[u][0] ] += sum[u];\n\t\t\ta[ ch[u][0] ] += sum[u];\n\t\t}\n\t\tif ( ch[u][1] ) {\n\t\t\tsum[ ch[u][1] ] += sum[u];\n\t\t\ta[ ch[u][1] ] += sum[u];\n\t\t}\n\t\tsum[u] = 0;\n\t}\n}\nvoid PushAll ( int x ) {\n\tc = 0;\n\twhile ( x ) {\n\t\tS[c ++] = x;\n\t\tx = fa[x];\n\t}\n\twhile ( c > 0 )\n\t\tPushDown ( S[-- c] );\n}\nint Merge ( int u, int v ) {\n\tif ( u == 0 )\n\t\treturn v;\n\tif ( v == 0 )\n\t\treturn u;\n\tif ( a[u] < a[v] )\n\t\tswap ( u, v );\n\tPushDown ( u );\n\tch[u][1] = Merge ( ch[u][1], v );\n\tfa[ ch[u][1] ] = u;\n\tif ( dis[ ch[u][0] ] < dis[ ch[u][1] ] )\n\t\tswap ( ch[u][0], ch[u][1] );\n\tdis[u] = dis[ ch[u][1] ]+1;\n\treturn u;\n}\nvoid remove ( int u ) {\n\tPushAll ( u );\n\tint p = fa[u];\n\tint x = Merge ( ch[u][0], ch[u][1] );\n\tfa[x] = p;\n\tch[p][ ch[p][1] == u ] = x;\n\twhile ( p ) {\n\t\tif ( dis[ ch[p][0] ] < dis[ ch[p][1] ] )\n\t\t\tswap ( ch[p][0], ch[p][1] );\n\t\tif ( dis[ ch[p][1] ]+1 == dis[p] )\n\t\t\tbreak ;\n\t\tdis[p] = dis[ ch[p][1] ]+1;\n\t\tp = fa[p];\n\t}\n}\nmultiset < int > vis;\nvoid solve ( ) {\n\tint n, Q, x, v, fx, fy, all = 0;\n\tchar op[5];\n\tdis[0] = -1;\n\tn = read_int ( );\n\tvis.clear ( );\n\tfor ( int i = 1; i <= n; i ++ ) {\n\t\ta[i] = read_int ( );\n\t\trt[i] = con[i] = i;\n\t\tvis.insert ( a[i] );\n\t}\n\tQ = read_int ( );\n\twhile ( Q -- ) {\n\t\tscanf ( \"%s\", op );\n\t\tif ( op[0] == 'U' ) {\n\t\t\tx = read_int ( ), v = read_int ( );\n\t\t\tfx = find ( x ), fy = find ( v );\n\t\t\tif ( fx == fy )\n\t\t\t\tcontinue ;\n\t\t\tcon[fx] = fy;\n\t\t\tvis.erase ( vis.find ( min ( a[ rt[fx] ], a[ rt[fy] ] ) ) );\n\t\t\trt[fy] = Merge ( rt[fy], rt[fx] );\n\t\t\tfa[ rt[fy] ] = 0;\n\t\t} else if ( op[0] == 'A' ) {\n\t\t\tif ( op[1] == '1' ) {\n\t\t\t\tx = read_int ( ), v = read_int ( );\n\t\t\t\tfx = find ( x );\n\t\t\t\tvis.erase ( vis.find ( a[ rt[fx] ] ) );\n\t\t\t\tif ( x != rt[fx] )\n\t\t\t\t\tremove ( x );\n\t\t\t\telse {\n\t\t\t\t\tPushDown ( x );\n\t\t\t\t\trt[fx] = Merge ( ch[x][0], ch[x][1] );\n\t\t\t\t\tfa[ rt[fx] ] = 0;\n\t\t\t\t}\n\t\t\t\tsum[x] = fa[x] = ch[x][0] = ch[x][1] = 0;\n\t\t\t\ta[x] += v;\n\t\t\t\trt[fx] = Merge ( rt[fx], x );\n\t\t\t\tvis.insert ( a[ rt[fx] ] );\n\t\t\t\tfa[ rt[fx] ] = 0;\n\t\t\t} else if ( op[1] == '2' ) {\n\t\t\t\tx = read_int ( ), v = read_int ( );\n\t\t\t\tfx = find ( x );\n\t\t\t\tvis.erase ( vis.find ( a[ rt[fx] ] ) );\n\t\t\t\ta[ rt[fx] ] += v;\n\t\t\t\tvis.insert ( a[ rt[fx] ] );\n\t\t\t\tsum[ rt[fx] ] += v;\n\t\t\t} else if ( op[1] == '3' ) {\n\t\t\t\tv = read_int ( );\n\t\t\t\tall += v;\n\t\t\t}\n\t\t} else if ( op[0] == 'F' ) {\n\t\t\tif ( op[1] == '1' ) {\n\t\t\t\tx = read_int ( );\n\t\t\t\tPushAll ( x );\n\t\t\t\tprintf ( \"%d\\n\", a[x]+all );\n\t\t\t} else if ( op[1] == '2' ) {\n\t\t\t\tx = read_int ( );\n\t\t\t\tfx = find ( x );\n\t\t\t\tprintf ( \"%d\\n\", a[ rt[fx] ]+all );\n\t\t\t} else if ( op[1] == '3' )\n\t\t\t\tprintf ( \"%d\\n\", *( -- vis.find ( INF ) )+all );\n\t\t}\n\t}\n}\nint main ( ) {\n\tsolve ( );\n\treturn 0;\n}\n\n```\n# \u611f\u8c22\u89c2\u770b\n",
        "postTime": 1555484746,
        "uid": 155661,
        "name": "\u5c71\u6c34\u4e00\u7a0b_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "## Leafy Tree \u9898\u89e3\uff01\n\n~~\u51e0\u5929\u4e0d\u5199\u6570\u636e\u7ed3\u6784\u6d51\u8eab\u96be\u53d7.jpg~~\n\n\u55ef\u5450\u849f\u84bb\u5c31\u4e0d\u5e9f\u8bdd\u4e86\uff0c \u76f4\u63a5\u8fdb\u5165\u6b63\u9898qwq\n\n\n\n### \u6211\u4eec\u5c31\u76f4\u63a5\u6765\u987a\u4e00\u4e0b\u601d\u8def\u5427qwq\n\n**\u64cd\u4f5c1**\uff1a **\u52a0\u8fb9**\uff1a \u627e\u5230\u4e24\u4e2a\u6839\u76f4\u63a5\u628a\u6839merge\u8d77\u6765\n\n**\u64cd\u4f5c2**\uff1a**\u5c06x\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0k** \uff1a \u5148\u627e\u5230\u6839\uff0c \u540c\u65f6\u5bf9\u7ecf\u8fc7\u7684\u8def\u5f84\u505a\u6807\u8bb0\uff0c \u8fd9\u6837\u627e\u5230\u8ddf\u4e4b\u540e\uff0c \u6211\u4eec\u518d\u987a\u7740\u505a\u597d\u7684\u6807\u8bb0\u5f80\u4e0b\u63a8add\u6807\u8bb0\uff0c \u63a8\u56de\u5230x\u8282\u70b9\u4e4b\u540e\uff0c \u4fee\u6539x\u7684\u503c\uff0c \u7136\u540epushup\u3002\n\n**\u64cd\u4f5c3**\uff1a **x\u6240\u5728\u8fde\u901a\u5757\u6574\u4f53+k**\uff1a \u627e\u5230x\u7684\u6839\uff0c \u6253add\u6807\u8bb0\n\n**\u64cd\u4f5c4**\uff1a **\u5168\u5c40\u52a0k**\uff1a  \u6211\u4eec\u53d1\u73b0\u5168\u5c40\u52a0\u53ea\u8981\u7528\u4e00\u4e2a\u53d8\u91cfss\u7ef4\u62a4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c \u7528\u4e0d\u7740\u4fee\u6539\u6211\u4eec\u7684\u6811\u3002\n\n**\u64cd\u4f5c5**\uff1a **\u8f93\u51fa\u4e00\u4e2a\u8282\u70b9\u7684\u503c**\uff1a \u627e\u5230\u6839\uff0c \u540c\u65f6\u5bf9\u7ecf\u8fc7\u7684\u8def\u5f84\u505a\u6807\u8bb0\uff0c \u7136\u540e\u4e0b\u63a8add\u6807\u8bb0\uff0c \u6700\u540e\u8f93\u51fax\u8282\u70b9\u7684\u503c+ss\u3002\n\n**\u64cd\u4f5c6**\uff1a **\u8f93\u51fax\u8fde\u901a\u5757\u7684\u6700\u5927\u503c**\uff1a \u627e\u5230\u6839\uff0c \u76f4\u63a5\u8f93\u51fa\u6839\u6240\u7ef4\u62a4\u7684\u6700\u5927\u503c+ss\u3002\n\n**\u64cd\u4f5c7**\uff1a **\u8f93\u51fa\u5168\u5c40\u6700\u5927\u503c**\uff1a \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\uff0c \u5fc5\u987b\u5355\u72ec\u7ef4\u62a4\u4e00\u4e0b\u8fd9\u4e2a\u6700\u5927\u503c\u4e86\uff0c \u5f53\u7136\u8fd8\u662f\u53ef\u4ee5\u7528Leafy Tree\u3002 \u6211\u4eec\u4e00\u5f00\u59cb\u628a\u6240\u6709\u70b9\u7684\u6743\u503c\u90fd\u63d2\u8fdb\u8fd9\u68f5Leafy \u7136\u540e\u6bcf\u6b21\u5408\u5e76\u6216\u8005\u4fee\u6539\u7684\u65f6\u5019\u5c31\u5728\u8fd9\u68f5Leafy\u4e0a\u778e\u641e\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u91cc\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c Leafy\u4e0d\u50cf\u5de6\u504f\u6811\uff0c ta\u7684\u6811\u9ad8\u662f\u53ef\u4ee5\u4fdd\u969c\u7684\uff0c \u6240\u4ee5\u627e\u6839\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\n```\ninline int find(int x) {\n    while(fa[x])\n      x = fa[x];\n    return x;\n}\n```\n\u800c\u4e14\u6211\u4eec\u53d1\u73b0\u4e00\u5f00\u59cb\u6240\u4fdd\u5b58\u7684\u8282\u70b9\u7684\u5e8f\u53f7\u59cb\u7ec8\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c \u8fd9\u6837\u6211\u4eec\u7b2cx\u4e2a\u8282\u70b9\u7684ID\u80af\u5b9a\u662fx\uff0c \u67e5\u8be2\u7684\u65f6\u5019\u5c31\u5f88\u5bb9\u6613\u5566\u3002\n\n\u53e6\u5916\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9: \u5f00\u59cb\u7684\u65f6\u5019\u522b\u5fd8\u4e86\u52a0\u4e0a\u54e8\u5175\uff0c \u4e0d\u7136\u4f1aRE3#\uff0c \u4e14\u849f\u84bb\u7684\u4ee3\u7801\u6ca1\u6709\u624b\u5199\u5185\u5b58\u6c60\uff0c \u4e0d\u8fc7\u65e2\u7136\u4e0d\u5199\u4e5f\u80fd\u8fc7\u5c31\u61d2\u5f97\u52a0\u4e0a\u53bb\u4e86qaqaq\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u4e5f\u5c31\u6109\u5feb\u7684\u89e3\u51b3\u5566>_<\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <cstdio>\n#define maxn 18000010\n#define re register\n#define FOR(i, l, r) for(re int i = l; i <= r; ++i)\nusing namespace std;\n\nint n, m, c, r, t, x, y, z, k;\nint a[maxn], b[maxn], siz[maxn], fa[maxn], son[maxn][2], dis[maxn], maxx[maxn], tag[maxn];\nint cnt, res;\nint root; //leafy2\u7684\u6839 \nconst double alp = 1.0-sqrt(2)/2, lim = (1.0-2*alp)/(1.0-alp), spl = alp/(1.0-alp);\nint ex = 0;\nchar ch;\n\ninline void in(re int &x){\n    x=0;int f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c==-1) return;\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        x=(x<<1)+(x<<3)+(c^'0');\n        c=getchar();\n    }\n    x=x*f;\n}\n\nvoid out(int a){\n    if(a<0){\n        a*=-1;\n        putchar('-');\n    } \n    if(a>=10)out(a/10);\n    putchar(a%10+'0');\n}\n\ninline int ifr(int x) {\n    return x == son[fa[x]][1];\n}  \n\ninline int New() {\n    ++cnt;\n    return cnt;\n}\n\ninline int NNew(int x) {\n    ++cnt;\n    maxx[cnt] = x;\n    siz[cnt] = 1;\n    return cnt;\n} \n\ninline void Clear(int x) {\n    siz[x] = fa[x] = son[x][0] = son[x][1] = tag[x] = 0;\n    maxx[x] = -99999;\n}\n\ninline void push_up(int x) {\n    if(son[x][0]) {\n        siz[x] = siz[son[x][0]] + siz[son[x][1]];\n        maxx[x] = max(maxx[son[x][0]], maxx[son[x][1]]);\n    }\n} \n\ninline void push_down(int x) {\n    if(son[x][0] && tag[x]) {\n        maxx[son[x][0]] += tag[x];\n        maxx[son[x][1]] += tag[x];\n        tag[son[x][0]] += tag[x];\n        tag[son[x][1]] += tag[x];\n        tag[x] = 0;\n    }\n}\n\ninline void rotate(int x) {\n    int f = fa[x], ff = fa[f], pd1 = ifr(x), pd2 = ifr(f), t = son[x][pd1^1];\n    son[ff][pd2] = x;\n    son[x][pd1^1] = f;\n    son[f][pd1] = t;\n    fa[t] = f;\n    fa[f] = x;\n    fa[x] = ff;\n    push_up(f);\n    push_up(x);\n    if(f == root)\n      root = x;\n}\n\ninline void maintain(int x) {\n    int pd;\n    if(son[x][0]) {\n        if(siz[son[x][0]] < siz[x]*alp)\n          pd = 1;\n        else\n          if(siz[son[x][1]] < siz[x]*alp)\n            pd = 0;\n          else\n            return;\n        if(siz[son[son[x][pd]][pd^1]] >= siz[son[x][pd]]*lim)\n          rotate(son[son[x][pd]][pd^1]);\n        rotate(son[x][pd]);\n    }\n}\n\nvoid ins(int now, int x) {\n    if(!root) {\n        root = NNew(x);\n        return;\n    }\n    if(siz[now] == 1) {\n        fa[son[now][0] = NNew(x)] = now;\n        fa[son[now][1] = NNew(maxx[now])] = now;\n        if(x > maxx[now])\n          swap(son[now][0], son[now][1]);\n    }\n    else  ins(son[now][x > maxx[son[now][0]]], x);\n    push_up(now);\n    maintain(now);\n}\n\nvoid del(int now, int x) {\n    int sid = x > maxx[son[now][0]], t;\n    if(siz[son[now][sid]] == 1) {\n        Clear(son[now][sid]);\n        fa[t = son[now][sid^1]] = fa[now];\n        son[fa[now]][ifr(now)] = t;\n        Clear(now);\n        if(now == root)\n          root = t;\n        now = t;\n    }\n    else  del(son[now][sid], x);\n    push_up(now);\n    maintain(now);\n}\n\ninline int merge(int u, int v) {\n    if(!u || !v)  return u+v;\n    push_down(u), push_down(v);\n    if(siz[u] >= siz[v] && siz[v] >= siz[u]*spl || siz[v] >= siz[u] && siz[u] >= siz[v]*spl) {\n        int cur = New();\n        fa[son[cur][0] = u] = cur;\n        fa[son[cur][1] = v] = cur;\n        push_up(cur);\n        return cur;\n    } \n    if(siz[u] >= siz[v]) {\n        push_down(u);\n        int ls = son[u][0], rs = son[u][1];\n        Clear(u);\n        if(siz[ls] >= (siz[ls]+siz[rs]+siz[v])*alp) \n          return merge(ls, merge(rs, v));\n        push_down(rs);\n        int lrs = son[rs][0], rrs = son[rs][1];\n        Clear(rs);\n        return merge(merge(ls, lrs), merge(rrs, v));\n    }\n    else {\n        push_down(v);\n        int ls = son[v][0], rs = son[v][1];\n        Clear(v);\n        if(siz[rs] >= (siz[ls]+siz[rs]+siz[u])*alp) \n          return merge(merge(u, ls), rs);\n        push_down(ls);\n        int lls = son[ls][0], rls = son[ls][1];\n        Clear(ls);\n        return merge(merge(u, lls), merge(rls, rs));\n    }\n}\n\ninline int find(int x) {\n    while(fa[x])\n      x = fa[x];\n    return x;\n}\n    \ninline int mark_up(int x) { //\u6807\u8bb0\u5e76\u627e\u6839 \n    while(fa[x]) \n      dis[x] = 1, x = fa[x];\n    return x;\n}\n    \nvoid clear_down(int x, int k) { //\u987a\u7740\u6807\u8bb0\u5f80\u4e0b\u627e\u5e76\u6e05\u9664\u6807\u8bb0, \u4fee\u6539\u6570\u636e \n    if(siz[x] == 1) {\n        dis[x] = 0;\n        maxx[x] += k;\n        return;\n    }\n    push_down(x);\n    if(dis[son[x][0]])\n      clear_down(son[x][0], k);\n    if(dis[son[x][1]])\n      clear_down(son[x][1], k);\n    push_up(x);\n    dis[x] = 0; \n}\n  \nint main() {\n    in(n);\n    cnt = n;\n    ins(root, -0x7fffffff);\n    FOR(i, 1, n) {\n    \tin(maxx[i]),\n        siz[i] = 1;\n        ins(root, maxx[i]);\n    }\n    in(m);\n    FOR(i, 1, m) {\n    \tch = getchar();\n    \twhile(ch != 'U' && ch != 'A' && ch != 'F')\n    \t  ch = getchar();\n        if(ch == 'U') {\n        \tin(x), in(y);\n            int fx = find(x), fy = find(y);\n            if(fx != fy) {\n            \tdel(root, maxx[fx]);\n            \tdel(root, maxx[fy]);\n            \tins(root, maxx[merge(fx, fy)]);\n            }\n            //\u8fd9\u4e2a\u5730\u65b9\u9700\u8981\u7ef4\u62a4\u4e00\u4e0bleafy2 \n        }\n        if(ch == 'A') {\n            ch = getchar();\n            if(ch == '1') {\n                in(x), in(k);\n                int xx = mark_up(x);\n                del(root, maxx[xx]); //leafy2\n                //\u6cbf\u7740\u6807\u8bb0\u627e\u5230x\u4e14\u4e0b\u63a8\u6807\u8bb0, \u6700\u7ec8\u4fee\u6539\u5e76\u4e0a\u63a8 \n                //\u7ef4\u62a4leafy2; \n                clear_down(xx, k);\n                ins(root, maxx[xx]); //\u65b0\u65e7\u4ea4\u66ff \n            }\n            if(ch == '2') {\n                in(x), in(k);\n                int xx = find(x);\n                tag[xx] += k;\n                \n                del(root, maxx[xx]);\n                maxx[xx] += k;\n                ins(root, maxx[xx]);\n            }\n            if(ch == '3') {\n                in(k);\n                ex += k;\n            }\n        }\n        if(ch == 'F') {\n            ch = getchar();\n            if(ch == '1') {\n                in(x);\n                int xx = mark_up(x);\n            \n                clear_down(xx, 0);\t//\u6cbf\u7740\u6807\u8bb0\u627e\u5230x\u4e14\u4e0b\u63a8\u6807\u8bb0;\n                out(maxx[x]+ex), putchar(10);\n            }\n            if(ch == '2') {\n                in(x);\n                int xx = find(x);\n                out(maxx[xx]+ex), putchar(10);\n                //\u6ce8\u610f\u4e0e\u4e0a\u9762\u7684\u4e0d\u540c \n            }\n            if(ch == '3') {\n                out(maxx[root]+ex), putchar(10);\n            }\n        }\n    }\n}\n```",
        "postTime": 1553673481,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u54c7\u54c7\u54c7\u5927\u4f6c\u90fd\u51fa\u5de6\u504f\u6811\u4e86  \u7136\u800c\u6211\u5e76\u4e0d\u4f1a\n\n\u64cd\u4f5c\u5f88\u591a\uff0c\u4f46\u6bcf\u4e2a\u90fd\u6ca1\u90a3\u4e48\u590d\u6742\u3002\u5408\u5e762\u4e2a\u70b9\u6240\u5904\u7684\u8fde\u901a\u5757\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u5e76\u67e5\u96c6\u3002\n\n\u9700\u8981\u652f\u6301\u64cd\u4f5c\uff1a1.\u5408\u5e762\u4e2a\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u30022.\u5bf9\u5355\u70b9\u3001\u8fde\u901a\u5757\u8fdb\u884cadd\u3001\u6c42\u6700\u503c\u30023.\u6c42\u6240\u6709\u70b9\u4e2d\u7684\u6700\u503c\u3002\u5168\u5c40\u52a0\u5b9e\u9645\u4e0a\u6ca1\u5565\u7528\u3002\n\n\u663e\u7136\u5728\u8fde\u901a\u5757\u52a0tag\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u5e76\u67e5\u96c6\u5408\u5e76\u505a\u4e0d\u5230\uff0c\u800c\u4e14\u5168\u5c40\u6c42\u6700\u503c\u4e0d\u53ef\u884c\u3002\u53ea\u80fd\u5c06\u8fd9\u9898\u8f6c\u5316\u6210\u7ef4\u62a4\u5e8f\u5217\uff0c\u9700\u8981\u4e00\u4e2a\u652f\u6301\u52a8\u6001RMQ\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u9009\u62e9\u7ebf\u6bb5\u6811\u3002\n\n\u5982\u679c\u6309\u539f\u6765\u7684\u5e8f\u53f7\u8fdb\u884c\u5904\u7406\u5e8f\u5217\uff0c\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u70b9\u7684\u5e8f\u53f7\u6ca1\u6709\u4efb\u4f55\u987a\u5e8f\uff0c\u6839\u672c\u4e0d\u80fd\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u5e0c\u671b\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u5e8f\u53f7\u7684\u8fde\u7eed\u7684\u3002\u53ef\u4ee5\u8054\u60f3\u5230\u6811\u5256\uff0c\u901a\u8fc7dfs\u5e8f\u6765\u6784\u5efa\u5e8f\u5217\u3002\u8fd9\u91cc\u7528\u4e0d\u5230dfs\u5e8f\uff0c\u53ea\u662f\u7528\u5230\u4e86\u7ef4\u62a4\u975e\u7ebf\u6027\u5e8f\u5217\u7684\u601d\u8def\u3002\u56e0\u4e3a\u5e8f\u6570\u53d7\u5230\u5e76\u96c6\u7684\u5f71\u54cd\uff0c\u53ea\u80fd\u7528\u79bb\u7ebf\u505a\u6cd5\uff0c\u5148\u5904\u7406\u597d\u5e8f\u6570\uff0c\u518d\u56de\u7b54\u3002\n\n\u8fd9\u91cc\u6211\u7528\u4e86\u4e8c\u53c9\u6811\u3002\n\n\u5408\u5e76\u8fde\u901a\u5757\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7528\u8fde\u901a\u5757\u4e2d\u539f\u4e0b\u6807\u6700\u5c0f\u7684\u70b9\u8868\u793a\u5b83\u3002\u9700\u8981\u8bb0\u5f55\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\u6bcf\u6b21\u53ea\u5408\u5e762\u4e2a\u96c6\u5408\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u65b0\u96c6\u5408\u8868\u793a\u7684\u533a\u95f4\u662f\u4e24\u4e2a\u5b50\u96c6\u7684\u5e76\u3002\u663e\u7136\u5982\u679c\u4e24\u4e2a\u5b50\u533a\u95f4\u6b63\u597d\u76f8\u90bb\uff0c\u90a3\u4e48\u5408\u5e76\u7684\u9006\u5411\u64cd\u4f5c\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u533a\u95f4\u4ece\u4e2d\u95f4\u62c6\u5f00\uff01\u60f3\u5230\u4ec0\u4e48\u4e86\uff1f\u7ebf\u6bb5\u6811\uff01\u8fd9\u91cc\u9700\u8981\u7684\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u601d\u60f3\u3002\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u91cd\u6392n\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u6bcf\u6b21\u5408\u5e76\u7684\u90fd\u662f\u76f8\u90bb2\u4e2a\u533a\u95f4\u3002\u65b9\u4fbf\u8d77\u89c1\uff0c\u7528\u533a\u95f4\u7684\u6700\u5c0f\u4e0b\u6807\u8868\u793a\u533a\u95f4\uff0c\u9644\u52a0\u4e00\u4e2a\u533a\u95f4\u5927\u5c0f\u3002\n\n\u5408\u5e76\u533a\u95f4\u5fc5\u987b\u4fdd\u7559\u539f\u533a\u95f4\uff0c\u6240\u4ee5\u8981\u52a8\u6001\u5f00\u70b9\uff0c\u8fd9\u4e2a\u65b0\u533a\u95f4\u8981\u8bb0\u5f552\u4e2a\u5b50\u533a\u95f4\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e\u3001\u4e00\u4e2a\u7aef\u70b9\u7684\u539f\u4e0b\u6807\u3001\u533a\u95f4\u5927\u5c0f\u3002\u7528cur[i]\u8bb0\u5f55i\u6240\u5904\u7684\u6700\u5927\u96c6\u5408\u7684\u4f4d\u7f6e\u3002\u76f8\u5f53\u4e8e\u81ea\u4e0b\u800c\u4e0a\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u56e0\u4e3a\u6700\u7ec8\u5e76\u4e0d\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u662f\u68ee\u6797\u3002\u4f46\u6ca1\u5173\u7cfb\u3002\n\n\u4e0a\u9762\u8bf4\u7684\u53ef\u80fd\u4e0d\u662f\u5f88\u597d\uff0c\u6211\u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6d41\u7a0b\n\n1.  c[]\u6570\u7ec4\u5b58\u96c6\u5408\uff08\u533a\u95f4\uff09\u3002\u9884\u5904\u7406n\u4e2a\u96c6\u5408\uff08\u533a\u95f4\uff09\uff0c\u6bcf\u4e2a\u533a\u95f4\u65e0\u5b50\u533a\u95f4\uff0c\u5728c[]\u4e2d\u4e0b\u6807\u5373\u4e3ai\uff0c\u5927\u5c0f\u4e3a1\uff0cfa\u6307\u5411\u81ea\u5df1\n\n2.  \u8bfb\u5165\u6240\u6709\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u53ea\u9700\u8bb0\u5f55\u70b9\u548c\u503c\uff08\u5982\u679c\u662f\u5bf9\u8fde\u901a\u5757\u7684\u64cd\u4f5c\uff0c\u8981\u8bb0\u5f55\u7684\u662f\u8fde\u901a\u5757\u7684\u6700\u5c0f\u4e0b\u6807\uff09\u3002\u5bf9\u4e8e\u5e76\u96c6\uff0c\u5148\u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5e76\u96c6\uff08siz\u4e5f\u5e76\u4e0a\uff0c\u786e\u4fddu<v\uff0c\u5e76\u5165u\uff09\uff0cc[]\u540e\u9762\u52a0\u4e00\u4e2a\u65b0\u533a\u95f4\uff0c\u5de6\u53f3\u5b69\u5b50\u4e3acur[u]\u548ccur[v]\uff0c\u533a\u95f4\u957f\u5ea6\u4e3ac[cur[u]].siz+c[cur[v]].siz\uff0c\u7136\u540e\u66f4\u65b0cur[u]\n\n3.  \u9006\u5411\u5faa\u73af\u5efa\u6811\u3002\u8fd9\u91cc\u53ef\u4ee5\u7528\u9012\u5f52\u3002\u53d6\u51fac[i]\u8fd9\u4e2a\u96c6\u5408\uff0c\u533a\u95f4\u957f\u5ea6\u4e3ac[i].siz\uff0c\u5219\u533a\u95f4\u4e3a[s,s+c[i].siz-1]\uff08s\u4e3a\u53ef\u7528\u7684\u6700\u5c0f\u7f16\u53f7\uff09\uff0c\u5982\u679c\u5b83\u7684\u5927\u5c0f\u4e0d\u4e3a1\uff0c\u9012\u5f52\u5de6\u53f3\u7ed3\u70b9\uff0c\u8bb0\u5f97\u6839\u636e\u5b69\u5b50\u7684siz\u5206\u5272\u533a\u95f4\uff0c\u5982\u679c\u5b83\u7684\u5927\u5c0f\u4e3a1\uff0c\u8bf4\u660e\u662f\u53f6\u7ed3\u70b9\uff0cpos[i]\u5373\u4e3al\u6216r\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u60f3\u8981\u7684\u533a\u95f4\u3002\n\n4.  \u56de\u7b54\u8be2\u95ee\u3002\u521d\u59cb\u5316siz[i]\u4e3a1\uff0c\u9047\u5230\u5408\u5e76\u64cd\u4f5c\uff0c\u5c31\u53ea\u5408\u5e76siz\u3002\u5904\u7406\u8fde\u901a\u5757\u65f6\uff0c\u533a\u95f4\u4e3a[pos[u],pos[u]+siz[u]-1]\uff08\u5df2\u7ecf\u786e\u4fddu\u662f\u533a\u95f4\u5de6\u7aef\u70b9\uff09\n\n\u590d\u6742\u5ea6\u4e0d\u662f\u5f88\u4f18\u79c0\u3002\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u7279\u522b\u9ebb\u70e6\u7684\u3002\u6837\u4f8b\u5f88\u826f\u5fc3\uff0c\u6211\u8fc7\u4e86\u6837\u4f8b\u5c31\u6210\u529fA\u8fd9\u9898\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define MAXN 300010\nusing namespace std;\nint n,m,a[MAXN];\nint fa[MAXN],siz[MAXN],pos[MAXN],cur[MAXN]; //cur\u8868\u793a\u96c6\u5408\u5f53\u524d\u4e0b\u6807\nint q[MAXN][3];\nstruct node { int p,lc,rc,siz; } c[MAXN*2]; //p\u8c8c\u4f3c\u6ca1\u4ec0\u4e48\u7528\nint tot; //\u7ed3\u70b9\u6570\ninline int max(int a,int b) { return a<b ? b : a; }\ntemplate <class T,int size>\nstruct segment_tree {\n\tT addv[size],maxv[size];\n\tvoid build(int p,int l,int r,T* a){\n\t\tif (l==r) {\n\t\t\tmaxv[p]=a[l];\n\t\t} else {\n\t\t\tint mid=l+r>>1;\n\t\t\tint lc=p<<1,rc=p<<1|1;\n\t\t\tbuild(lc,l,mid,a);\n\t\t\tbuild(rc,mid+1,r,a);\n\t\t\tmaintain(p,l,r);\n\t\t}\n\t}\n\tinline void maintain(int p,int l,int r) {\n\t\tmaxv[p]=max(maxv[p<<1],maxv[p<<1|1]);\n\t}\n\tvoid pushdown(int p,int l,int r) {\n\t\tif (l>r) return;\n\t\tmaxv[p<<1]+=addv[p], maxv[p<<1|1]+=addv[p];\n\t\taddv[p<<1]+=addv[p], addv[p<<1|1]+=addv[p];\n\t\taddv[p]=0;\n\t}\n\tvoid add(int p,int l,int r,int ql,int qr,T x) {\n\t\tif (ql<=l && qr>=r) {\n\t\t\taddv[p]+=x;\n\t\t\tmaxv[p]+=x;\n\t\t} else {\n\t\t\tpushdown(p,l,r);\n\t\t\tint mid=l+r>>1;\n\t\t\tif (ql<=mid) add(p<<1,l,mid,ql,qr,x);\n\t\t\tif (qr>mid) add(p<<1|1,mid+1,r,ql,qr,x);\n\t\t\tmaintain(p,l,r);\n\t\t}\n\t}\n\tint query(int p,int l,int r,int ql,int qr) {\n\t\tif (ql<=l && qr>=r) return maxv[p];\n\t\tint mid=l+r>>1,lc=p<<1,rc=p<<1|1,ans=-1e9;\n\t\tpushdown(p,l,r);\n\t\tif (ql<=mid) ans=max(ans,query(lc,l,mid,ql,qr));\n\t\tif (qr>mid) ans=max(ans,query(rc,mid+1,r,ql,qr));\n\t\treturn ans;\n\t}\n};\nsegment_tree<int,MAXN<<2> segt;\ninline void swap(int &a,int &b) { a^=b, b^=a, a^=b; }\nint getfa(int u) {\n\twhile (u=fa[u]=fa[fa[u]],u!=fa[u]);\n\treturn u;\n}\nvoid build(int p,int l,int r) {\n\tif (!c[p].lc) {\n\t\tpos[c[p].p]=l;\n\t} else {\n\t\tint mid=l+c[c[p].lc].siz-1;\n\t\tbuild(c[p].lc,l,mid);\n\t\tbuild(c[p].rc,mid+1,r);\n\t}\n\tc[p].p=0; //\u9632\u6b62\u4e8c\u6b21\u5efa\u6811\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor (register int i=1;i<=n;i++) {\n\t\tscanf(\"%d\",a+i);\n\t\tc[i].p=i, c[i].siz=1;\n\t\tfa[i]=i;\n\t\tsiz[i]=1;\n\t\tcur[i]=i;\n\t}\n\ttot=n;\n\tscanf(\"%d\",&m);\n\tfor (register int i=0;i<m;i++) {\n\t\tchar opt[5];\n\t\tscanf(\"%s\",opt);\n\t\tswitch (opt[0]) {\n\t\t\tcase 'U':\n\t\t\t\tint u,v;\n\t\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\t\tu=getfa(u), v=getfa(v);\n\t\t\t\tif (u==v) break;\n\t\t\t\tif (u>v) swap(u,v);\n\t\t\t\tfa[v]=u;\n\t\t\t\tc[++tot]=(node){u,cur[u],cur[v],c[cur[u]].siz+c[cur[v]].siz};\n\t\t\t\tcur[u]=tot;\n\t\t\t\tq[i][0]=1, q[i][1]=u, q[i][2]=v;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tq[i][0]=opt[1]-'0'+1;\n\t\t\t\tscanf(\"%d\",q[i]+1);\n\t\t\t\tif (opt[1]!='3') scanf(\"%d\",q[i]+2);\n\t\t\t\tif (opt[1]=='2') q[i][1]=getfa(q[i][1]);\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tq[i][0]=opt[1]-'0'+4;\n\t\t\t\tif (opt[1]!='3') scanf(\"%d\",q[i]+1);\n\t\t\t\tif (opt[1]=='2') q[i][1]=getfa(q[i][1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tint s=1; //\u533a\u95f4\u8d77\u59cb\u5e8f\u53f7\n\tfor (register int i=tot;i>=1;i--) {\n\t\tif (c[i].p) build(i,s,s+c[i].siz-1), s+=c[i].siz;\n\t}\n\tfor (register int i=1;i<=n;i++) { //\u539f\u6743\u503c\n\t\tsegt.add(1,1,n,pos[i],pos[i],a[i]);\n\t}\n\tfor (register int i=0,j=0;i<m;i++) {\n\t\tswitch (q[i][0]) {\n\t\t\tcase 1: siz[q[i][1]]+=siz[q[i][2]];break;\n\t\t\tcase 2: segt.add(1,1,n,pos[q[i][1]],pos[q[i][1]],q[i][2]);break;\n\t\t\tcase 3: segt.add(1,1,n,pos[q[i][1]],pos[q[i][1]]+siz[q[i][1]]-1,q[i][2]);break;\n\t\t\tcase 4: segt.add(1,1,n,1,n,q[i][1]);break;\n\t\t\tcase 5: printf(\"%d\\n\",segt.query(1,1,n,pos[q[i][1]],pos[q[i][1]]));break;\n\t\t\tcase 6: printf(\"%d\\n\",segt.query(1,1,n,pos[q[i][1]],pos[q[i][1]]+siz[q[i][1]]-1));break;\n\t\t\tcase 7: printf(\"%d\\n\",segt.query(1,1,n,1,n));break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1535552737,
        "uid": 32771,
        "name": "\u554a\u561e\u561e\u561e\u561e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "## \u770b\u7740\u9053\u9898\u7684\u9898\u89e3\u8fd9\u4e48\u5c11\uff0c\u849f\u84bb\u4e5f\u6765\u51d1\u4e00\u7bc7\u3002\n\n\n------------\n\n### \u849f\u84bb\u8c03\u4e86\u4e24\u5929\u7684\u9898\u76ee\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u662f\u771f\u7684\u6bd2\u7624\u3002\u5927\u4f6c\u4eec\u90fd\u7528\u4ec0\u4e48\u5de6\u504f\u6811\uff0c\u53ef\u5e76\u5806\u5565\u7684\uff0c\u5f31\u5f31\u7684\u6211\u53ea\u5f97\u7528\u5e76\u67e5\u96c6+\u7ebf\u6bb5\u6811\u3002\n\n### \u5728\u8fd9\u91cc\u8fd8\u8981\u8bf4\u4e00\u4e0b\uff0c\u6211\u7528\u7684\u662fdfs\u5e8f\u7684\u7ebf\u6bb5\u6811\uff0c\u636e\u8bf4\u8981\u66f4\u4f18\u79c0\u4e00\u70b9emmm\uff0c\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u7406\u89e3\u4e00\u4e0b\uff0c\u53ea\u662f\u6807\u53f7\u65b9\u5f0f\u4e0d\u540c\uff0c\u5176\u4ed6\u4e0e\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u6ca1\u4ec0\u4e48\u4e0d\u540c\u3002\u6b64\u5904\u4e0d\u5728\u8d58\u8ff0\u3002\u6a21\u7248\u94fe\u63a5[\u7ebf\u6bb5\u6811\u6a21\u7248](http://tch.drifts.ml/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A8%A1%E7%89%88/215/)\n------------\n\n![PBgWQO.png](https://s1.ax1x.com/2018/08/04/PBgWQO.png)\n#### \u601d\u60f3\uff1a \u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5148\u6a21\u62df\u4e00\u904d\u52a0\u8fb9\u8fc7\u7a0b\uff08\u5229\u7528\u5e76\u67e5\u96c6\uff09\uff0c\u987a\u4fbf\u628a\u6570\u636e\u5b58\u50a8\u4e00\u4e0b~~\uff08\u9762\u5411\u6570\u636e\u7684\u7f16\u7a0bQAQ\uff09~~\uff0c\u7136\u540e\u91cd\u65b0\u628a\u6570\u636e\u6392\u4e2a\u5e8f\uff0c\u5c06\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\u7684\u6570\u653e\u5728\u4e00\u8d77\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5355\u70b9\u3001\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u6700\u5927\u503c\u67e5\u8be2\u3002\u5c82\u4e0d\u7f8e\u54c9\uff1f\n#### \u7136\u9e45\u601d\u60f3\u6613\u61c2\uff0c\u4ee3\u7801\u96be\u5199\u3002\u5e76\u4e14\u4e3a\u4ec0\u4e48\u8054\u901a\u5757\u5185\u7684\u70b9\u4e00\u5b9a\u5728\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u5185\u5462\uff1f\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u94fe\u8868\u4e0a\u573a\u4e86QWQ\u3002\u540c\u6458\u5f55\u4e2d\u8bf4\u7684\uff0c\u5728\u5e76\u67e5\u96c6\u8fde\u8fb9\u4e4b\u540e\uff0c\u4e00\u4e2a\u8054\u901a\u5757\u5185\u7684\u70b9\u90fd\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u6211\u4eec\u53ea\u8981\u7528\u53cc\u5411\u94fe\u8868\u628a\u5b83\u4eec\u8bb0\u4e0b\u5373\u53ef\u3002\u53ef\u8fd8\u8bb0\u5f97\u90bb\u63a5\u8868\uff0c\u7528\u76f8\u4f3c\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5199\u51fa\u4e86\u53cc\u5411\u94fe\u8868\u3002\n```cpp\nvoid unionn(int x,int y)\n{\n    int r1=find(x),r2=find(y);\n    if(r1!=r2)\n    {\n        f[r2]=r1;\n        int u=lst[r1],v=fir[r2];\n\t\tlst[r1]=lst[r2];\n        pre[u]=v,next[v]=u;//\u53cc\u5411\u94fe\u8868!!!\n    }\n   // QAQ;\n}\n```\n#### lst[]\u7528\u6765\u5b58\u4e3b\u4f53\uff08\u5c31\u50cfhead[]\u6570\u7ec4\uff09\uff0cper[]\u548cnext[]\u4e00\u4e2a\u6b63\u5411\uff0c\u4e00\u4e2a\u53cd\u5411\u3002\u540c\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u94fe\u8868\u7684\u52a0\u5165\u4e0e\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u662f\u4e00\u8d77\u7684~~\uff08\u5e9f\u8bdd\uff0c\u90fd\u5199\u5230\u4e00\u8d77\u4e86\uff09~~,\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u91cd\u5efa\u540e\u7684\u6570\u7ec4\u4e2d\u540c\u4e00\u8054\u901a\u5757\u5185\u7684\u70b9\u4e00\u5b9a\u5728\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u5185\uff0c\u800c\u4e14\u987a\u5e8f\u662f\u52a0\u5165\u7684\u5148\u540e\u987a\u5e8f\uff0c\u662f\u4e0d\u662f\u5f88\u795e\u5947\uff1fQWQ\u3002\n#### \u4e0b\u9762\u662f\u91cd\u5efa\u6570\u7ec4\u90e8\u5206\n```cpp\nint tot = 0;\n   for (int i = 1; i <= n; i++)//\u904d\u5386\u4e00\u4e0b\u627e\u8868\u5934\n        if (!pre[i])\n            for (int j = i; j; j = next[j])//\u5411\u540e\u627e\u513f\u5b50\n                pos[j] = ++tot\uff0cnewa[tot] = j;//newa->\u65b0\u6570\u7ec4\uff08\u6807\u8bb0\u5f53\u524d\u70b9\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff09\n\t\t\t\t\t\t\t//pos[]->\u53cd\u5411\u8bb0\u5f55\u4f4d\u7f6e\u3002\n```\n#### \u518d\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e86\u4e00\u4e2al[]\u3001\u4e00\u4e2ar[]\u6765\u8bb0\u5f55\u5de6\u53f3\u8fb9\u754c\uff08\u56e0\u4e3a\u8fde\u7eed\u561b\uff09\u5728\u91cd\u65b0\u5efa\u8fb9\u662f\uff0c\u53ea\u8981\u5982\u4e0b\u5c31\u597d\uff0c\u81ea\u5df1\u53ef\u4ee5\u8bd5\u7740\u7406\u89e3\u4e00\u4e0b\n### code\n```cpp\nvoid reunion(int x,int y)\n{\n    int r1=find(x),r2=find(y);\n    if(r1!=r2)\n    {\n        f[r2]=r1;\n        if(l[r1]<l[r2]) r[r1]=r[r2];\n        else l[r1]=l[r2];\n    }\n}\n```\n####  emmmm\uff0c\u7ebf\u6bb5\u6811\u90e8\u5206\u548c\u6a21\u677f\u6ca1\u4ec0\u4e48\u5dee\u522b\uff0c\u5c31\u8bb2\u8fd9\u4e48\u591a\u5427\uff0c\u6bd5\u7adf\u8fd8\u8981\u9760\u81ea\u5df1\u53bb\u609f\u554a\uff0c\u591a\u8bf4\u65e0\u76ca\uff0c\u4e0a\u4ee3\u7801\uff01\uff01\n### code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define QAQ cout<<\"debug\"<<endl\nconst int  maxn = 3000000;\nusing namespace std;\nint n,f[maxn],lst[maxn],next[maxn],pre[maxn],pos[maxn];\nint l[maxn],r[maxn],cnt=1,newa[maxn],a[maxn],fir[maxn];\nstruct option\n{\n    int x,y,v;\n    char opt;\n}data[maxn];\nstruct segtree\n{\n    int lc,rc,sum,tag;\n}tree[maxn];\n//////////////////////\nint find(int x)\n{\n    if(f[x]==x) return x;\n    else return f[x]=find(f[x]);\n}\nvoid unionn(int x,int y)\n{\n    int r1=find(x),r2=find(y);\n    if(r1!=r2)\n    {\n        f[r2]=r1;\n        int u=lst[r1],v=fir[r2];\n\t\tlst[r1]=lst[r2];\n        pre[u]=v,next[v]=u;//\u53cc\u5411\u94fe\u8868!!!\n    }\n   // QAQ;\n}\nvoid reunion(int x,int y)\n{\n    int r1=find(x),r2=find(y);\n    if(r1!=r2)\n    {\n        f[r2]=r1;\n        if(l[r1]<l[r2]) r[r1]=r[r2];\n        else l[r1]=l[r2];\n    }\n}\n/////////\u5e76\u67e5\u96c6\u90e8\u5206\uff01\uff01\n/////////////////\nvoid pushup(int u)\n{\n    tree[u].sum=max(tree[tree[u].lc].sum+tree[tree[u].lc].tag,tree[tree[u].rc].sum+tree[tree[u].rc].tag);\n}//\u4e0d\u591abb\uff1b\nvoid pushdown(int u)\n{\n    tree[tree[u].lc].tag+=tree[u].tag;\n    tree[tree[u].rc].tag+=tree[u].tag;\n    tree[u].tag=0;\n}//\u4e0d\u591abb\nvoid build(int u,int l,int r)//\u5efa\u6811\n{\n    if(l==r)\n    {\n        tree[u].sum=a[newa[l]];\n        return ;\n    }\n    tree[u].lc=++cnt;\n    int mid=(l+r)>>1;\n    build(tree[u].lc,l,mid);\n    tree[u].rc=++cnt;\n    build(tree[u].rc,mid+1,r);\n    //tree[u].sum=max(tree[tree[u].lc].sum,tree[tree[u].rc].sum);\n    pushup(u);\n}\nvoid add(int u,int l,int r,int ll,int rr,int w)\n{\n//\tQAQ;\n    if(l==ll&r==rr)\n    {\n        tree[u].tag+=w;\n        return;\n    }\n    pushdown(u);\n    int mid=(l+r)>>1;\n    if(rr<=mid) add(tree[u].lc,l,mid,ll,rr,w);\n    else if(ll>mid) add(tree[u].rc,mid+1,r,ll,rr,w);\n    else\n    {\n        add(tree[u].lc,l,mid,ll,mid,w);\n        add(tree[u].rc,mid+1,r,mid+1,rr,w);\n    }\n    pushup(u);\n}\nint query(int u,int l,int r,int ll,int rr)\n{\n\tint ans=0;\n    if(l==ll&r==rr)\n        return tree[u].sum+tree[u].tag;\n    pushdown(u);\n    int mid=(l+r)>>1;\n    if(rr<=mid) ans=query(tree[u].lc,l,mid,ll,rr);\n    else if(ll>mid) ans=query(tree[u].rc,mid+1,r,ll,rr);\n    else\n    {\n        ans=max(query(tree[u].lc,l,mid,ll,mid),query(tree[u].rc,mid+1,r,mid+1,rr));\n    }\n    pushup(u);\n    return ans;\n}\ninline int read()\n{\n    int res = 0;\n    bool bo = 0;\n    char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-')\n        ;\n    if (c == '-')\n        bo = 1;\n    else\n        res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get1()\n{\n    char c;\n    while ((c = getchar()) != 'A' && c != 'F' && c != 'U')\n        ;\n    return c;\n}\ninline int get2()\n{\n    char c;\n    while ((c = getchar()) < '0' || c > '9')\n        ;\n    return c - 48;\n}\nint main()\n{\n    int i, j, Q, id, tot = 0;\n    n = read();\n    for (i = 1; i <= n; i++)\n        a[i] = read(),\n        f[i] = fir[i] = lst[i] = i;\n    Q = read();\n    for (i = 1; i <= Q; i++)\n    {\n        char c = get1();\n        switch (c)\n        {\n        case 'U':\n            data[i].x = read();\n            data[i].y = read();\n            unionn(data[i].x, data[i].y);\n            data[i].opt = 1;\n            break;\n        case 'A':\n            id = get2();\n            data[i].x = read();\n            if (id < 3)\n                data[i].y = read();\n            data[i].opt = id + 1;\n            break;\n        case 'F':\n            id = get2();\n            if (id < 3)\n                data[i].x = read();\n            data[i].opt = id + 4;\n            break;\n        }\n    }\n    for (i = 1; i <= n; i++)\n        if (!pre[i])\n            for (j = i; j; j = next[j])\n                newa[pos[j] = ++tot] = j;\n    for (i = 1; i <= n; i++)\n        f[i] = i, l[i] = r[i] = pos[i];\n    build(1,1, n);\n    for (i = 1; i <= Q; i++)\n        switch (data[i].opt)\n        {\n        case 1:\n            reunion(data[i].x, data[i].y);\n            break;\n        case 2:\n            //cout<<data[i].y<<endl;\n            add(1,1, n, pos[data[i].x], pos[data[i].x], data[i].y);\n            break;\n        case 3:\n            id = find(data[i].x);\n            add(1,1, n, l[id], r[id], data[i].y);\n            break;\n        case 4:\n            add(1, 1,n, 1, n, data[i].x);\n            break;\n        case 5:\n            printf(\"%d\\n\", query(1,1, n, pos[data[i].x], pos[data[i].x]));\n            break;\n        case 6:\n            id = find(data[i].x);\n            printf(\"%d\\n\", query(1,1, n, l[id], r[id]));\n            break;\n        case 7:\n            printf(\"%d\\n\", query(1,1, n, 1, n));\n            break;\n        }\n    return 0;\n}\n\n```\n### PS\uff1a\u4e3b\u51fd\u6570\u501f\u9274\u4e86\u4e00\u4e0bn\u5c42\u697c\u4e0a\u7684\u4ee3\u7801\uff0c\u5728\u6b64\u58f0\u660e\u4e00\u4e0b\u3002\n# \u5b89\u5229\u4e00\u4e0b\u535a\u5ba2[\u849f\u84bb\u7684blog](http://tch.drifts.ml \"\u849f\u84bb\u7684blog\")",
        "postTime": 1533437889,
        "uid": 59032,
        "name": "\u8f7b\u5c18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u601d\u8def{\n\n\n\u770b\u5230\u5408\u5e76\uff0c\u67e5\u8be2\u6700\u5927\u503c\uff0c\u6211\u4eec\u679c\u65ad\u60f3\u5230\u4e86\u53ef\u5e76\u5806\u3002\n\n\n\u64cd\u4f5c1:\u5408\u5e76\u4e24\u4e2a\u5de6\u504f\u6811,\u627e\u51fa\u4e24\u4e2a\u8282\u70b9\u6240\u5c5e\u7684\u5de6\u504f\u6811\uff0c\u5408\u5e76\u5373\u53ef\n\n\n\u64cd\u4f5c2:\u7ed9\u4e00\u7279\u5b9a\u8282\u70b9\u7684\u503c\u589e\u52a0v\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u53d6\u51fa\u8fd9\u4e2a\u5143\u7d20\uff0c\u4fee\u6539\u5b83\u7684\u503c\uff0c\u5408\u5e76\u3002\n\n\n\u64cd\u4f5c3:\u7ed9\u4e00\u4e2a\u5de6\u504f\u6811\u7684\u6240\u6709\u503c\u589e\u52a0\u4e00\u4e2a\u6570,\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u6253\u4e2a\u6807\u8bb0\u90fd\u53ef\u4ee5\u4e86\u3002\n\n\n\u64cd\u4f5c4;\u76f4\u63a5\u641e\u4e2a\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55all\u90fd\u53ef\u4ee5\u8fa3\u3002\n\n\n\u67e5\u8be21:\u8f93\u51fax\u8282\u70b9\u7684\u6743\u503c=\u5f53\u524d\u7684\u503c\u52a0\u4e0a\u8df3\u7236\u4eb2\u7684lazy\u503c+\u5168\u5c40all\u3002\n\n\n\u67e5\u8be22:\u76f4\u63a5\u53d6\u5806\u9876\u5143\u7d20\u5373\u53ef\u3002\n\n\n\u67e5\u8be23:\u8fd9\u4e2a\u53ea\u8981\u53d6\u5404\u4e2a\u5806\u7684\u5806\u9876\u5143\u7d20\u5efa\u4e00\u4e2a\u5806\uff0c\u5728\u5404\u79cd\u64cd\u4f5c\u4e2d\u5148\u5220\u9664\uff0c\u518d\u5355\u70b9\u4fee\u6539\uff0c\u518d\u63d2\u5165\u3002\n\n\n}",
        "postTime": 1501371235,
        "uid": 23122,
        "name": "\u57c3\u7f57\u8292\u963f\u8001\u5e08\u00b7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3273 \u3010[SCOI2011]\u68d8\u624b\u7684\u64cd\u4f5c\u3011"
    }
]