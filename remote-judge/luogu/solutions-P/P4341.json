[
    {
        "content": "\u5199\u5b8c\u770b\u4e86\u4e0b\u5176\u4ed6\u4eba\u4ee3\u7801\uff0c\u6b63\u89e3\u4f3c\u4e4e\u662fSA\u3002\n\n\u4f46\u662f\u65e2\u7136n^2\u7684Trie\u6811\u7b80\u5355\u5e94\u7528\u53ef\u4ee5\u8fc7\u90a3\u8fd8\u5199\u5565\u540e\u7f00\u6570\u7ec4\u662f\u5427\u3002\n\n\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u5b50\u4e32\uff0c\u5c06trie\u6811\u4e0a\u5bf9\u5e94\u4f4d\u7f6e\u7684cnt\u503c+1\uff0c\u6700\u540e\u5148\u5e8f\u904d\u5386\u4e00\u904d\u5c31\u5b8c\u4e86\u3002\u56e0\u4e3a\u5b50\u4e32\u53ea\u6709n^2\u4e2a\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a2\uff0c\u56e0\u6b64\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3an^2\u3002\n\nn<=3000 n^2\u662f\u80af\u5b9a\u53ef\u4ee5\u8fc7\u7684\u3002\n\n\u4f30\u8ba1\u662f\u6700\u7b80\u5355\uff0c\u4ee3\u7801\u6700\u77ed\u7684\u505a\u6cd5\u4e86\u3002\n\n\n\n```cpp\n#include <cstdio>\n\nint ch[9000000][2]={0}; \nint cnt[9000000]={0};\nint tail=0;\nchar s[4000];\n\nint dfs(int root) {\n    if (cnt[root]>1) printf(\"%d\\n\",cnt[root]);\n    if (ch[root][0]) dfs(ch[root][0]);\n    if (ch[root][1]) dfs(ch[root][1]);\n    return 0;\n}\n\nint main() {\n    int n;\n    scanf(\"%d %s\", &n, &s);\n    for (int i=n;i>=1;--i) s[i]=s[i-1];\n    for (int i=1;i<=n;++i) {\n        int p=0;\n        for (int j=i;j<=n;++j) {\n            if (!ch[p][s[j]-'0']) ch[p][s[j]-'0']=++tail;\n            p=ch[p][s[j]-'0']; cnt[p]++;\n        }\n    }dfs(0);\n    return 0;\n}\n```",
        "postTime": 1529725236,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u5efa\u51fa\u6765\uff0c\u7136\u540e\u5728$Parent$\u6811\u4e0a$dfs$\u51fa$size$\u5373\u8fd9\u4e2a\u70b9\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u540e\u7f00\u81ea\u52a8\u673a\u8fdb\u884c$dfs$\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nnamespace ywy\n{\n\tchar str[3002];\n\tint sam[10001][2],fa[10001],len[10001],size[10001],heads[10001];\n\ttypedef struct _b\n\t{\n\t\tint dest;\n\t\tint nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gnn=1;\n\tinline void add(int s,int t)\n\t{\n\t\tmemchi[gnn].dest=t;\n\t\tmemchi[gnn].nxt=heads[s];\n\t\theads[s]=gnn;\n\t\tgnn++;\n\t} int gn=2;\n\tinline int zhuanyi(int p,int x)\n\t{\n\t\tint me=gn;\n\t\tgn++;\n\t\tlen[me]=len[p]+1;\n\t\tsize[me]=1;\n\t\twhile(p&&!sam[p][x])sam[p][x]=me,p=fa[p];\n\t\tif(!p)\n\t\t{\n\t\t\tfa[me]=1;\n\t\t\treturn(me);\n\t\t}\n\t\tint q=sam[p][x];\n\t\tif(len[q]==len[p]+1)\n\t\t{\n\t\t\tfa[me]=q;\n\t\t\treturn(me);\n\t\t}\n\t\tint nq=gn;\n\t\tgn++;\n\t\tlen[nq]=len[p]+1;\n\t\tsam[nq][0]=sam[q][0];\n\t\tsam[nq][1]=sam[q][1];\n\t\tfa[nq]=fa[q];\n\t\tfa[q]=fa[me]=nq;\n\t\twhile(p&&sam[p][x]==q)sam[p][x]=nq,p=fa[p];\n\t\treturn(me);\n\t}\n\tvoid print(int num)\n\t{\n\t\tif(num>=10)print(num/10);\n\t\tputchar(num%10+'0');\n\t}\n\tvoid dfs(int pt)\n\t{\n\t\tfor(register int i=heads[pt]; i; i=memchi[i].nxt)\n\t\t{\n\t\t\tdfs(memchi[i].dest);\n\t\t\tsize[pt]+=size[memchi[i].dest];\n\t\t}\n\t}\n\tvoid efs(int pt)\n\t{\n\t\tif(!pt)return;\n\t\tif(size[pt]>1&&pt!=1)print(size[pt]),putchar('\\n');\n\t\tefs(sam[pt][0]);\n\t\tefs(sam[pt][1]);\n\t}\n\tvoid ywymain()\n\t{\n\t\tint eee;\n\t\tcin>>eee;\n\t\tscanf(\"%s\",str+1);\n\t\tint n=strlen(str+1);\n\t\tint p=1;\n\t\tfor(register int i=1; i<=n; i++)p=zhuanyi(p,str[i]-'0');\n\t\tfor(register int i=2; i<gn; i++)add(fa[i],i);\n\t\tdfs(1);\n\t\tefs(1);\n\t}\n}\nint main()\n{\n\tywy::ywymain();\n\treturn(0);\n}\n```",
        "postTime": 1542442338,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u8fd9\u7bc7\u9898\u89e3\u8bb2\u7684\u662f\u66b4\u529b\u505a\u6cd5\uff0c\u60f3\u770b\u6b63\u89e3\u7684\u8bf7\u770b\u5176\u5b83\u9898\u89e3\n\n#### \u9898\u610f\n\n\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\u6c42\u6240\u4ee5\u51fa\u73b0\u6b21\u6570\u5927\u4e8e $1$ \u7684\u5b50\u4e32\u6240\u51fa\u73b0\u7684\u6b21\u6570\u3002\u8f93\u51fa\u7684\u987a\u5e8f\u6309\u5bf9\u5e94\u7684\u5b50\u4e32\u7684\u5b57\u5178\u5e8f\u6392\u5217\u3002\n\n#### \u66b4\u529b\u524d\u7f6e\u77e5\u8bc6\n\n- Trie \u6811\n\n#### \u5206\u6790\n\n\u9996\u5148\u8fd9\u9053\u7d2b\u9898\u770b\u8d77\u6765\u5f88\u96be\uff0c~~\u5b9e\u9645\u4e0a\u7684\u786e\u5f88\u96be~~\n\n\u770b\u6807\u7b7e\uff0c\u4f3c\u4e4e\u662f\u540e\u7f00\u6570\u7ec4\u3002\u4e0d\u8fc7\uff0c\u518d\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c$n\\le 3000$\uff0c\u8fd9\u4e48\u660e\u663e\u7684 $O(n^2)$ \u66b4\u529b\u90fd\u53ef\u4ee5\u8fc7\uff1f\uff01\n\n\u65e2\u7136 $n\\le 3000$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 Trie \u6811\u4e0a\u66b4\u529b\u63d2\u5165\u6240\u6709\u7684\u540e\u7f00\u3002\u56e0\u4e3a $[l,r]$ \u533a\u95f4\u7684\u5b50\u4e32\u90fd\u662f\u4ece\u7b2c $l$ \u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u7f00\u7684\u957f\u5ea6\u4e3a $r-l+1$ \u524d\u7f00\uff0c\u6240\u4ee5\u53ea\u8981\u67e5\u8be2\u540e\u7f00\u7684\u524d\u7f00\u7684\u91cd\u590d\u6b21\u6570\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u770b\u63d2\u5165\u8fc7\u7a0b\uff0c\u904d\u5386\u6240\u6709\u540e\u7f00\uff0c\u628a Trie \u6811\u4e0a\u904d\u5386\u5230\u7684\u8282\u70b9\u7684 `cnt` \u503c\u5168\u90fd\u65e0\u8111\u52a0\u4e0a $1$ \u5c31\u73c2\u4ee5\u4e86\n\n\u6700\u540e\u770b\u67e5\u8be2\uff0c\u76f4\u63a5\u4e2d\u5e8f Dfs \u904d\u5386\u6574\u68f5 Trie \u6811\u5c31\u80fd\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\u4e86\n\n#### \u4ee3\u7801\n\n```cpp\n#include<stdio.h>\nstruct node{\n\tint sons[2],cnt;\n}nodes[9000001];//\u5f00 n^2 \u4e2a \nint top;\nchar s[3001];\nint n;\nvoid dfs(int root){\n    if(nodes[root].cnt>1)printf(\"%d\\n\",nodes[root].cnt);\n    if(nodes[root].sons[0])dfs(nodes[root].sons[0]);\n    if(nodes[root].sons[1])dfs(nodes[root].sons[1]);\n}\nvoid insert(int i){//\u63d2\u5165\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u7f00 \n\tint p=0;\n    for(int j=i;j<=n;++j){\n        if(!nodes[p].sons[s[j-1]-'0'])\n\t\t\tnodes[p].sons[s[j-1]-'0']=++top;\n        p=nodes[p].sons[s[j-1]-'0'];\n\t\t++nodes[p].cnt;//\u65e0\u8bba\u662f\u4e0d\u662f\u7ed3\u675f\u8282\u70b9\u90fd\u52a0\u4e0a1 \n    }\n}\nint main(){\n    scanf(\"%d%s\",&n,s);\n    for(int i=1;i<=n;++i)\n\t\tinsert(i);\n\tdfs(0);\n}\n```",
        "postTime": 1624859694,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "P4341 [BJWC2010]\u5916\u661f\u8054\u7edc \u9898\u89e3"
    },
    {
        "content": "## \u591a\u4e45\u6ca1\u5199\u9898\u89e3\u4e86...\n\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u5927\u4f53\u6846\u67b6\u5c31\u662fbuild_sa \u7136\u540ebuild_height.\n\n\u6700\u540e\u7528height\u6c42\u89e3\u3002\n\n\u53e6\u5916\u89e3\u91ca\u4e00\u4e0b\u6700\u540e\u7684\u64cd\u4f5c\uff1a\n1. \u6309\u7167\u6392\u540d\u7528i\u679a\u4e3e\u540e\u7f00\u5b50\u4e32(\u6392\u540d\u4e3a1\u7684\u5b50\u4e32\u53ef\u4ee5\u4e0d\u679a\u4e3e)\n2. \u7528j\u679a\u4e3e\u51fa\u73b0\u65b0\u5b50\u4e32\u7684\u957f\u5ea6,\u4eceh[i-1]+1 \u5230 h[i]\n3. \u7528k\u5411\u4e0b\u8bb0\u5f55\u957f\u5ea6\u8d85\u8fc7j\u7684\u5b50\u4e32,\u76f4\u81f3\u78b0\u5230\u4e86h[k]\u5c0f\u4e8ej\u7684\u60c5\u51b5,\u6b64\u65f6k-i+1\u5c31\u662f\u5f53\u524d\u957f\u5ea6\u4e3aj\u7684\u5b50\u4e32\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n\n\n\u57fa\u672c\u601d\u8def\u548c\u697c\u4e0b\u7684bzt\u5927\u4f6c\u4e00\u6837,\u4f46\u662f\u6211\u7684code\u6709\u4e00\u70b9\u5c0f\u4f18\u5316\u53ef\u4ee5\u8ba980ms\u7684\u65f6\u95f4\u51cf\u62100ms\u3002\u5176\u5b9e\u8fd9\u4e2a\u601d\u8def\u5f88\u6734\u7d20.\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#define ll long long\nusing namespace std;\nconst int M=31000;\nconst int inf=1e9;\ninline int cread() { //\u65e5\u5e38\u5b57\u7b26\u8bfb\u4f18\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\treturn c;\n}\nchar s[M];\nint n,m,k,p,mx;\nint a[M],b[M],c[M];\nint sa[M],rk[M],hi[M],f[M];\ninline int cmpe(int i,int j) { //get sa \u5b50\u6a21\u677f\n\tint aa=i+k>n ? -1 : b[i+k],\n\t    bb=j+k>n ? -1 : b[j+k];\n\treturn (b[i]!=b[j] || aa!=bb);\n}\ninline void build_sa() { //get sa \u6a21\u677f\n\tfor(int i=1; i<=m; ++i) c[i]=0;\n\tfor(int i=1; i<=n; ++i) ++c[a[i]=s[i]];\n\tfor(int i=2; i<=m; ++i) c[i]+=c[i-1];\n\tfor(int i=n; i; --i) sa[c[a[i]]--]=i;\n\tfor(k=1,p=0; k<=n; k<<=1,m=p,p=0) {\n\t\tfor(int i=n-k+1; i<=n; ++i) b[++p]=i;\n\t\tfor(int i=1; i<=n; ++i) if(sa[i]>k)\n\t\t\t\tb[++p]=sa[i]-k;\n\t\tfor(int i=1; i<=m; ++i) c[i]=0;\n\t\tfor(int i=1; i<=n; ++i) ++c[a[i]];\n\t\tfor(int i=2; i<=m; ++i) c[i]+=c[i-1];\n\t\tfor(int i=n; i; --i) sa[c[a[b[i]]]--]=b[i];\n\t\tswap(a , b), a[sa[1]]=1, p=1;\n\t\tfor(int i=2; i<=n; ++i)\n\t\t\ta[sa[i]]=cmpe(sa[i-1],sa[i])? ++p : p;\n\t\tif(p==n) break;\n\t}\n\tfor(int i=1; i<=n; ++i)\n\t\trk[sa[i]]=i;\n}\ninline void build_hi() { //get height \u6a21\u677f\n\tk=0, hi[1]=0;\n\tfor(int i=1; i<=n; ++i)if(rk[i]>1) {\n\t\t\tint j=sa[rk[i]-1];\n\t\t\tif(k) --k;\n\t\t\twhile(i+k<=n && j+k<=n && s[i+k]==s[j+k])\n\t\t\t\t++k;\n\t\t\thi[rk[i]]=k;\n\t\t}\n}\n\nint main() {\n\tscanf(\"%d\",&n), m=127;\n\tfor(int i=1; i<=n; ++i)\n\t\ts[i]=cread();\n\tbuild_sa(), build_hi();\n\tfor(int i=2; i<=n; ++i) {\n\t\t//\u6309\u6392\u540d\u679a\u4e3e\u5b50\u4e32(\u7b2c\u4e00\u4e2a\u820d\u53bb) \n\t\tfor(int j=hi[i-1]+1; j<=hi[i]; ++j) {\n\t\t\t//j\u521d\u59cb\u503c\u4e3ahi[i-1]+1,\u5373\u6392\u540d\u4e3ai-1\u7684\u5b50\u4e32lcp,\u907f\u514d\u91cd\u590d\u8ba1\u7b97,\n\t\t\t//\u7136\u540ej\u8981<=hi[i],\u5373\u5f53\u524d\u5b50\u4e32\u4e32\u957f \n\t\t\tint k=i;\n\t\t\twhile(hi[k]>=j) ++k;\n\t\t\t//\u5bfb\u627elcp\u503c>=j\u7684\u5b50\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n\t\t\tprintf(\"%d\\n\",k-i+1);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1530686413,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "\u521a\u5b66\u51e0\u5929\u540e\u7f00\u6570\u7ec4\uff0c\u6709\u4e9b\u751f\u642c\u786c\u5957\u3002\u7ecf\u8fc7\u6b64\u9898\u4e4b\u540e\uff0c\u5bf9\u5176\u6709\u4e86\u4e00\u4e2a\u6bd4\u8f83\u6df1\u523b\u7684\u8ba4\u8bc6\n\n\u5173\u4e8e\u4ec0\u4e48\u662f\u540e\u7f00\u6570\u7ec4\uff0c\u53ef\u4ee5\u770b\u770b\u6b64blog\uff0c\u8bb2\u5f97\u5341\u5206\u8be6\u7ec6\uff0c\u76f8\u4fe1\u5927\u5bb6\u770b\u5b8c\u90fd\u80fd\u61c2\u3002\u8fd9\u91cc\u4e3b\u8981\u8bb2\u89e3\u5173\u4e8e\u672c\u9898\u7684\u601d\u8def[](https://www.cnblogs.com/victorique/p/8480093.html)https://www.cnblogs.com/victorique/p/8480093.html\n\n\u4e00\u5f00\u59cb\uff0c\u6211\u7684\u60f3\u6cd5\u662f\u7528map\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u679a\u4e3e\uff0c\u518d\u6392\u5e8f\u3002\u4f46\u8003\u8651\u5230map\u90a3\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662fO\uff08log n\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u9898\u96be\u514d\u4f1a\u7206\u6389\n\n\u6211\u4eec\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u540e\u7f00\u6570\u7ec4\uff0c\u5982\u679c\u5b50\u4e32\u4e2d\u6ca1\u6709\u6570\u7ec4\u7684\u9996\u5b57\u6bcd\uff0c\u90a3\u5b50\u4e32\u4e00\u5b9a\u4f1a\u5728\u5176\u4ed6\u7684\u6570\u7ec4\u8ba1\u7b97\u65f6\u88ab\u7d2f\u52a0\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u540e\u7f00\u6570\u7ec4\uff0c\u53ea\u8003\u8651\u5305\u542b\u5b83\u7684\u9996\u5b57\u6bcd\u7684\u5b50\u4e32\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fasa\u6570\u7ec4\u548cheight\u6570\u7ec4\u3002\u679a\u4e3ei\u4ece1\u5230n\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u5b50\u4e32\u5728\u6392\u540d\u9760\u524d\u7684\u540e\u7f00\u6570\u7ec4\u4e2d\u6c42\u51fa\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5fc5\u5b9a\u5927\u4e8e\u5728\u5176\u4e4b\u540e\u7684\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff08\u56e0\u4e3a\u6570\u7ec4\u662f\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u6240\u4ee5\u5b50\u4e32\u5fc5\u7136\u662f\u6309\u5b57\u5178\u5e8f\u9012\u589e\u7684\uff09\n\n\u5982\u4f55\u6c42\u51fa\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6240\u6709\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8bbe\u5b50\u4e32\u957f\u5ea6\u4e3aj\uff0c\u6309\u6392\u540d\u679a\u4e3e\u5728\u4ed6\u4e4b\u540e\u7684\u6bcf\u4e00\u4e2a\u6570\u7ec4\uff0c\u5982\u679cheight[k]>=j\uff0c\u8bf4\u660elct\uff08i\uff0ck\uff09>=j\uff0c\u5373\u8be5\u5b50\u4e32\u4e5f\u5728\u6570\u7ec4k\u4e2d\u51fa\u73b0\u3002\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u957f\u5ea6j\uff0c\u5982\u679c\u6bd4\u5b83\u66f4\u5927\u7684\u53ef\u884c\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53ef\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3ej\uff0c\u5012\u5e8f\u8f93\u51fa\u7b54\u6848\uff0c\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u641c\u7d22\uff08\u7b97\u662f\u4e2a\u5c0f\u4f18\u5316\u5427\uff09\n\n\u6700\u540e\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3ai\u6570\u7ec4\u524d\u9762\u957f\u5ea6\u4e3aheight[i]\u7684\u5b50\u4e32\u5fc5\u7136\u5df2\u7ecf\u88ab\u8ba1\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u679a\u4e3ej\u65f6\u5e94\u6ce8\u610fj>height[i]\n\n\u5177\u4f53\u7ec6\u8282\u770b\u6ce8\u89e3\uff0c\u4e0a\u4ee3\u7801\n\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=3050;\nchar s[N];\nint y[N],x[N],c[N],sa[N],rk[N],height[N],wt[30];\nint ans[N];\nint n,m;\nvoid read(int &res){\n    char ch;bool flag=0;\n    while(!isdigit(ch=getchar()))\n        (ch=='-')&&(flag=true);\n    for(res=ch-'0';isdigit(ch=getchar());res=res*10+ch-'0');\n    (flag)&&(res=-res);\n}\nvoid print(int x) {\n    if(!x) {\n        putchar(48);\n        return;\n    }\n    int l=0;\n    while(x) wt[++l]=x%10,x/=10;\n    while(l) putchar(wt[l--]+48);\n}\nvoid get_SA(){\n    for(int i=1;i<=n;i++) ++c[x[i]=s[i]];\n    for(int i=2;i<=m;i++) c[i]+=c[i-1];\n    for(int i=n;i>=1;i--) sa[c[x[i]]--]=i;\n    for(int k=1;k<=n;k<<=1){\n        int num=0;\n        for(int i=n-k+1;i<=n;i++) y[++num]=i;\n        for(int i=1;i<=n;i++) if(sa[i]>k) y[++num]=sa[i]-k;\n        for(int i=1;i<=m;i++) c[i]=0;\n        for(int i=1;i<=n;i++) ++c[x[i]];\n        for(int i=2;i<=m;i++) c[i]+=c[i-1];\n        for(int i=n;i>=1;i--) sa[c[x[y[i]]]--]=y[i],y[i]=0;\n        swap(x,y);\n        x[sa[1]]=1;\n        num=1;\n        for(int i=2;i<=n;i++)\n        x[sa[i]]=(y[sa[i]]==y[sa[i-1]]&&y[sa[i]+k]==y[sa[i-1]+k])?num:++num;\n        if(num==n) break;\n        m=num;\n    }\n}\nvoid get_height(){\n    int k=0;\n    for(int i=1;i<=n;i++) rk[sa[i]]=i;\n    for(int i=1;i<=n;i++){\n        if(rk[i]==1) continue;\n        if(k) k--;\n        int j=sa[rk[i]-1];\n        while(j+k<=n&&i+k<=n&&s[i+k]==s[j+k]) k++;\n        height[rk[i]]=k;\n    }\n}\nvoid solve(){\n\tfor(int i=1;i<n;i++){\n\t\tint k=i+1,l=0;\n\t\tfor(int j=n-sa[i]+1;j>height[i];j--){\n\t\t\twhile(height[k]>=j) k++;\n\t\t\tif(k>i+1) ans[++l]=k-i;\n            //\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u679a\u4e3e\uff0c\u5c06j\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\n\t\t}\n\t\tfor(int j=l;j>=1;j--)\n\t\tprint(ans[j]),putchar(10);\n        //\u6ce8\u610f\u5012\u5e8f\u8f93\u51fa\u7b54\u6848\n\t}\n}\nint main(){\n\tread(n);\n    gets(s+1);\n    m='1';\n    get_SA();\n    get_height();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1529838223,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "## \u95ee\u9898\u63cf\u8ff0\n\n [LG4341](https://www.luogu.org/problem/P4341)\n\n[BZOJ2251](https://www.lydsy.com/JudgeOnline/problem.php?id=2251)\n\nBZOJ\u9700\u8981\u6743\u9650\u53f7\n\n---\n\n## \u9898\u89e3\n\n\u5b57\u7b26\u4e32\u7684\u6027\u8d28\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32$s$\u6240\u6709\u7684\u5b57\u4e32\uff0c\u7b49\u4e8e$s$\u6240\u6709\u540e\u7f00\u7684\u524d\u7f00\u3002\n\n\u679a\u4e3e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u540e\u7f00\uff0c\u5c06\u5176\u63d2\u5165\u4e00\u4e2a$\\mathrm{Trie}$\n\n\u5728\u63d2\u5165$\\mathrm{Trie}$\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u7ef4\u62a4\u8fd9\u4e2a\u540e\u7f00\u7684\u6bcf\u4e2a\u524d\u7f00\u3002\n\n\u6700\u540e\u4ece$root$\u5f00\u59cb\u5bf9\u6574\u68f5$\\mathrm{Trie}$\u8fdb\u884c\u4e00\u6b21\u904d\u5386\u5373\u53ef\u3002\n\n---\n\n## $\\mathrm{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nvoid read(int &x){\n\tx=0;char ch=1;int fh;\n\twhile(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n\tif(ch=='-') fh=-1,ch=getchar();\n\telse fh=1;\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\tx*=fh;\n}\n\nchar s[3007];\nint ch[10000000][2],tot,root;//\u9519\u8bef\u7b14\u8bb0\uff1a\u4e00\u5f00\u59cb\u6570\u7ec4\u5f00\u5c0f\u5341\u500d\nint n,cnt[10000000];\nvoid build(){\n\troot=++tot;\n}\n\nint chk(char s){\n\treturn s-'0';\n}\n\nvoid insert(int pla){\n\tint p=root;\n\tfor(register int i=pla;i<=n;i++){\n\t\tint k=chk(s[i]);\n\t\tif(!ch[p][k]) ch[p][k]=++tot;\n\t\tp=ch[p][k];++cnt[p];\n\t}\n}\n\nvoid dfs(int x){\n\tif(cnt[x]>1&&x!=root) cout<<cnt[x]<<endl;\n\tif(ch[x][0]) dfs(ch[x][0]);\n\tif(ch[x][1]) dfs(ch[x][1]);\n}\n\nint main(){\n\tios::sync_with_stdio(0);\n\tbuild();\n\tcin>>n;cin>>(s+1);\n\tfor(register int i=n;i>=1;i--){\n\t\tinsert(i);\n\t}\n\tdfs(root);\n\treturn 0;\n}\n```",
        "postTime": 1567898060,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "LG4341/BZOJ2251 \u300cBJWC2010\u300d\u5916\u661f\u8054\u7edc  Trie"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u8fd9\u91cc](https://xenonwzh.github.io/luogu-4341/)\n\n## \u89e3\u9898\u601d\u8def\n\n\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u5c31\u9650\u5236\u4e86\u6700\u9ad8\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u5b50\u4e32\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u9897 Trie\u3002\u8bbe\u5b57\u7b26\u4e32\u5f00\u5934\u4e3a $1$\uff0c\u63d2\u5165\u5f00\u5934\u4e3a $1$\u3001$2$\u3001$3$\u3001$\\cdots$\u3001$n$\uff0c\u7ed3\u5c3e\u5747\u4e3a $n$ \u7684\u5b50\u4e32\u3002\u7136\u540e\u4ece\u6839\u904d\u5386\u5c31\u53ef\u5f97\u5230\u6240\u6709\u7684\u5b50\u4e32\u3002\u7136\u540e\u4ece\u6839 DFS \u7edf\u8ba1\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u5b57\u5178\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148 DFS $0$ \u8282\u70b9\uff0c\u518d DFS $1$ \u8282\u70b9\u3002\n\n## \u4ee3\u7801\u6f14\u793a\n\n```cpp\n#include <cstdio>\n\nconst int MAXN = 3000;\n\nint trie[MAXN * MAXN + 2][2], tot = 1;\nint end[MAXN * MAXN + 2];\n\ninline void insert(char *str, int len) {\n    int p = 1;\n    for (int i = 0; i < len; i++) {\n        int ch = str[i] - '0';\n        if (trie[p][ch] == 0) trie[p][ch] = ++tot;\n        p = trie[p][ch];\n        end[p]++;\n    }\n}\n\nvoid dfs(int p) {\n    if (end[p] > 1) printf(\"%d\\n\", end[p]);\n    if (trie[p][0]) dfs(trie[p][0]);\n    if (trie[p][1]) dfs(trie[p][1]);\n}\n\nint main() {\n    int n;\n    static char str[MAXN + 1];\n\n    scanf(\"%d\", &n);\n    scanf(\"%s\", str);\n\n    for (int i = 0; i < n; i++) {\n        insert(str + i, n - i);\n    }\n\n    dfs(1);\n\n    return 0;\n}\n```\n",
        "postTime": 1662449033,
        "uid": 135855,
        "name": "XenonWZH",
        "ccfLevel": 6,
        "title": "\u300c\u6d1b\u8c37 P4341\u300d\u5916\u661f\u8054\u7edc - Trie"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u76ee\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u7528\u4e24\u79cd\u5904\u7406\u540e\u7f00\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\n\n## 1\uff1a\u540e\u7f00\u81ea\u52a8\u673a\uff1a\n\n\u4e2a\u4eba\u89c9\u5f97\u5728\u8fd9\u4e2a\u9898\u4e2d\uff0c\u7528\u540e\u7f00\u81ea\u52a8\u673a\u53bb\u89e3\u51b3\u4f1a\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u597d\u7406\u89e3\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684\u7ed3\u70b9\u72b6\u6001$st$\uff0c\u82e5\u524d\u4e00\u4e2a\u72b6\u6001\u901a\u8fc7\u5b57\u7b26$c$\u4e0e$st$\u76f8\u8fde\uff0c\u90a3\u4e48\u7ed3\u70b9$st$\u8868\u793a\u7684\u662f$endpos$\u76f8\u540c\u7684\u5b50\u4e32\u7684\u96c6\u5408\u3002\u800c\u8be5\u70b9\u7684$endpos$\u5219\u4ee3\u8868\u7684\u662f\u4ee5$c$\u4e3a\u7ed3\u5c3e\u7684\u4e32\u7684\u51fa\u73b0\u7684\u4f4d\u7f6e\u96c6\u5408\u3002\u56e0\u6b64\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9$st$\uff0c\u5b83\u7684$endpos$\u96c6\u5408\u7684\u5927\u5c0f\u5373\u662f\u5f53\u524d\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u3002\u90a3\u4e48\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u4e00\u4e2a\u72b6\u6001$st$\u7684$|endpos|$\u6c42\u51fa\u5373\u53ef\u3002\n\n\u800c\u8981\u6c42$|endpos|$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a$parent$\u6811\u53cd\u5411\u5efa\u51fa\u6765\uff0c\u81ea\u5e95\u5411\u4e0a\u53bb\u66f4\u65b0\u5b50\u6811\u7684\u5927\u5c0f\u5373\u662f$|endpos|$\u3002\n\n\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u8d2a\u5fc3\u7684\u6839\u636e\u5b57\u5178\u5e8f\u5bf9\u6bcf\u4e00\u4e2a\u5b50\u4e32\u8fdb\u884c\u641c\u7d22\u5373\u53ef\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\mathcal{O}(n^2)$\n\n## 2\uff1a\u540e\u7f00\u6570\u7ec4\uff1a\n\n\u9996\u5148\u5927\u6982\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u6027\u8d28\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u540e\u7f00$u$,$v$\uff0c\u5982\u679c$lcp(u,v)$\u4e0d\u4e3a$0$\uff0c\u90a3\u4e48\u5b57\u7b26\u4e32$u$\u4e2d\u957f\u5ea6\u5728$[1,lcp(u,v)]$\u8303\u56f4\u5185\u7684\u524d\u7f00\u5fc5\u5b9a\u5728$v$\u4e2d\u51fa\u73b0\u8fc7\u81f3\u5c11\u4e00\u6b21\u3002\uff08\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u540e\u7f00\u90fd\u5404\u4e0d\u76f8\u540c\uff0c\u800c\u5982\u679c\u51fa\u73b0\u76f8\u540c\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u8fd9\u4e2a\u524d\u7f00\u5fc5\u5b9a\u5728\u539f\u4e32\u51fa\u73b0\u81f3\u5c11$2$\u6b21\uff09\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5c06\u6240\u6709\u7684\u540e\u7f00\u6309\u7167\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5e8f\u3002\u56e0\u4e3a\u6240\u6709\u7684\u540e\u7f00\u90fd\u6309\u7167\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5e8f\u4e86\uff0c\u90a3\u4e48\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4e32\uff0c\u6ee1\u8db3\uff1a$lcp(i,i-1)\\le lcp(i+1,1)$\uff0c\u90a3\u4e48$ Str[rk[i]] $ \u8fd9\u4e2a\u4e32\u7684\u524d\u7f00\u5fc5\u5b9a\u4e5f\u5728\u4e32 $ Str[rk[i+1]] $ \u51fa\u73b0\u8fc7\u3002\u56e0\u6b64\uff0c\u6211\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u540e\u7f00 $ rk[i] $ \uff0c\u5e76\u5206\u522b\u679a\u4e3e\u957f\u5ea6\u4e3a $ 1 \\le j \\le height[i] $ \u7684\u5b50\u4e32\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5728\u540e\u9762\u7684\u4f4d\u7f6e $ k (i+1 \\le k \\le n) $ \u4e2d\u51fa\u73b0 $ height[k] \\ge j $ \u90a3\u4e48\u8bf4\u660e\u957f\u5ea6\u4e3a $j$ \u7684\u5b50\u4e32\u4e5f\u4f1a\u5728\u7b2c $k$ \u4e2a\u540e\u7f00\u4e2d\u51fa\u73b0\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3 $ height[k] \\ge j $ \u7684\u4f4d\u7f6e $k$ \uff0c\u90a3\u4e48\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a $ k-i+1 $ \u3002\n\n\u8fd9\u6837\u7684\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\mathcal{O}(n^2)$\n\n# \u4ee3\u7801\uff1a\n\n## SAM:\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#define maxn 10005\nusing namespace std;\nchar str[maxn];\nvector<int>res;\nstruct SAM{\n    int next[maxn*2][2],fa[maxn*2],len[maxn*2];\n    int last,cnt;\n    int cntA[maxn*2],A[maxn*2];\n    int num[maxn*2];\n    void clear(){\n        last=cnt=1;\n        fa[1]=len[1]=0;\n        memset(next[1],0,sizeof(next[1]));\n    }\n    void init(char *s){\n        while(*s){\n            Insert(*s-'0');\n            s++;\n        }\n    }\n    void Insert(int c){\n        int p=last;\n        int np=++cnt;\n        memset(next[cnt],0,sizeof(next[cnt]));\n        len[np]=len[p]+1;\n        last=np;\n        while(p&&!next[p][c]) next[p][c]=np, p=fa[p];\n        if(!p) fa[np]=1;\n        else{\n            int q=next[p][c];\n            if(len[q]==len[p]+1) fa[np]=q;\n            else{\n                int nq=++cnt;\n                len[nq]=len[p]+1;\n                memcpy(next[nq],next[q],sizeof(next[q]));\n                fa[nq]=fa[q];\n                fa[np]=fa[q]=nq;\n                while(next[p][c]==q) next[p][c]=nq, p=fa[p];\n            }\n        }\n    }\n    void build(){\n        memset(cntA,0,sizeof(cntA));\n        memset(num,0,sizeof(num));\n        int n=strlen(str);\n        for(int i=1;i<=cnt;i++) cntA[len[i]]++;\n        for(int i=1;i<=n;i++) cntA[i]+=cntA[i-1];\n        for(int i=cnt;i>=1;i--) A[cntA[len[i]]--]=i;\n        int tmp=1;\n        for(int i=0;i<n;i++){\n            num[tmp=next[tmp][str[i]-'0']]=1;\n        }\n        for(int i=cnt;i>=1;i--){\n            int x=A[i];\n            num[fa[x]]+=num[x];\n        }\n    }\n    void dfs(int x){\n        if(num[x]>1&&x!=1) res.push_back(num[x]);\n        for(int i=0;i<2;i++){\n            if(next[x][i]!=0)\n                dfs(next[x][i]);\n        }\n    }\n}sam;\nint main()\n{\n    int n;\n    scanf(\"%d%s\",&n,str);\n    sam.clear();\n    sam.init(str);\n    sam.build();\n    sam.dfs(1);\n    for(auto it:res){\n        printf(\"%d\\n\",it);\n    }\n    return 0;\n}\n```\n\n## SA\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 10010\nusing namespace std;\nint n,rk[maxn],sa[maxn],height[maxn],tmp[maxn],cnt[maxn];\nchar str[maxn];\nvoid SA(int n,int m){\n    int i,j,k;\n    n++;\n    for(i=0;i<n+5;i++) rk[i]=sa[i]=height[i]=tmp[i]=0;\n    for(i=0;i<m;i++) cnt[i]=0;\n    for(i=0;i<n;i++) cnt[rk[i]=str[i]]++;\n    for(i=1;i<m;i++) cnt[i]+=cnt[i-1];\n    for(i=0;i<n;i++) sa[--cnt[rk[i]]]=i;\n    for(k=1;k<=n;k<<=1){\n        for(i=0;i<n;i++){\n            j=sa[i]-k;\n            if(j<0) j+=n;\n            tmp[cnt[rk[j]]++]=j;\n        }\n        sa[tmp[cnt[0]=0]]=j=0;\n        for(i=1;i<n;i++){\n            if(rk[tmp[i]]!=rk[tmp[i-1]]||rk[tmp[i]+k]!=rk[tmp[i-1]+k])\n                cnt[++j]=i;\n            sa[tmp[i]]=j;\n        }\n        memcpy(rk,sa,n*sizeof(int));\n        memcpy(sa,tmp,n*sizeof(int));\n        if(j>=n-1) break;\n    }\n    //get height[]\n    i=0,k=0,height[0]=0;\n    for(j=rk[0];i<n-1;i++,k++){\n        while(~k&&str[i]!=str[sa[j-1]+k]){\n            height[j]=k--;\n            j=rk[sa[j]+1];\n        }\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d%s\",&n,str);\n    int len=strlen(str);\n    SA(len,200);\n    for(int i=2;i<=n;i++){\n        for(int j=height[i-1]+1;j<=height[i];j++){\n            int k=i;\n            while(height[k]>=j) k++;\n            if(k-i+1<=0) continue;\n            printf(\"%d\\n\",k-i+1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1566799688,
        "uid": 83908,
        "name": "ChenJr",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u662f\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\n\n\u8fd9\u9053\u9898\u9898\u76ee\u5f88\u660e\u663e \u5c31\u662f\u8ba9\u6c42\u6240\u6709\u51fa\u73b0\u6b21\u6570>1\u7684\u5b50\u4e32\u51fa\u73b0\u7684\u6b21\u6570 \u5b50\u4e32\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n\n\u5148\u6c42\u51faheight\u6570\u7ec4 \u7136\u540e\u6211\u4eec\u6309\u7167\u51fa\u73b0\u6b21\u6570\u679a\u4e3e \u6bcf\u6b21\u5728height\u4e2d\u627e>=\u6b21\u6570\u7684\u8fde\u7eed\u7684\u51e0\u6bb5 \u5bf9\u4e8e\u6bcf\u4e00\u6bb5 \u6bb5\u7684\u957f\u5ea6+1\u5c31\u662f\u8fd9\u4e2a\u5b50\u4e32\u51fa\u73b0\u7684\u6b21\u6570 **\u540c\u65f6 \u6bcf\u4e00\u4e2a\u5b50\u4e32\u88ab\u4e14\u4ec5\u88ab\u4e00\u6bb5height\u6570\u7ec4\u5305\u542b**\n\n\u7531\u4e8e\u8fd9\u4e2a\u6bb5\u4e2d\u4ee3\u8868\u7684\u5b50\u4e32\uff08\u5728\u5f53\u524d\u679a\u4e3e\u957f\u5ea6\u4e0b\uff09\u662f\u4e00\u6837\u7684 \u5982\u4e24\u4e2a\u5b50\u4e32abc abcd \u5982\u679c\u679a\u4e3e\u957f\u5ea6=2 \u5c31\u662fab \u7b49\u4e8e3 \u5c31\u662fabc \u8fd9\u4e2a\u5b57\u4e32\u5c31\u662fsa[i]\u5230sa[i]+mid-1 \uff08mid\u4e3a\u5f53\u524d\u679a\u4e3e\u957f\u5ea6\uff09 \u628a\u8fd9\u4e2a\u5b50\u4e32\u52a0\u4e0a\u51fa\u73b0\u6b21\u6570(\u6bb5\u7684\u957f\u5ea6)\u5373\u53ef\n\n\u81f3\u4e8e\u5b57\u5178\u5e8f \u6211\u4eec\u7528\u4e00\u4e2amap\u7ef4\u62a4\u4e00\u5806string\u5373\u53ef map\u4f1a\u81ea\u52a8\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n\n\u4e0b\u9762\u662f\u6211\u4e11\u964b\u7684\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<map>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int maxn=20021;\n \nchar s[maxn];\nint sa[maxn],top,rk[maxn],height[maxn],tp[maxn],tax[maxn],N,M;\nmap<string,int>a;\n \nvoid Qsort()\n{\n \tfor(int i=0;i<=M;i++)tax[i]=0;\n \tfor(int i=1;i<=N;i++)tax[rk[i]]++; \n \tfor(int i=1;i<=M;i++)tax[i]+=tax[i-1];\n \tfor(int i=N;i>=1;i--)sa[tax[rk[tp[i]]]--]=tp[i];\n}\n\nvoid get_height()\n{\n\tint k=0;\n\tfor(int i=1;i<=N;i++)rk[sa[i]]=i;\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tif(rk[i]==1)continue;\n\t\tif(k)k--;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(j+k<=N&&i+k<=N&&s[i+k]==s[j+k])k++;\n\t\theight[rk[i]]=k;\n\t\ttop=max(top,k);\n\t}\n}\n\nvoid suffixsort()\n{\n \tM=75;\n \tfor(int i=1;i<=N;i++)\n \t\trk[i]=s[i]-'0'+1,tp[i]=i;\n \tQsort(); \n \tfor(int w=1,p=0;p<N;M=p,w<<=1)\n \t{\n \t\tp=0;\n \t\tfor(int i=1;i<=w;i++)tp[++p]=N-w+i;\n \t\tfor(int i=1;i<=N;i++)if(sa[i]>w)tp[++p]=sa[i]-w;\n \t\tQsort();\n \t\tstd::swap(tp,rk);\n \t\trk[sa[1]]=p=1;\n \t\tfor(int i=2;i<=N;i++)\n \t\t\trk[sa[i]]=(tp[sa[i-1]]==tp[sa[i]]&&tp[sa[i-1]+w]==tp[sa[i]+w])?p:++p; \n \t}\n}\n\nstring change(int l,int r)\n{\n\tstring ret;\n\tint p=0;\n\tchar str[maxn];\n\tfor(int i=l;i<=r;i++)\n\t{\n\t\tstr[p]=s[i];\n\t\tp++;\n\t}\n\treturn ret=str;\n}\n\nvoid work(int mid)\n{\n\tfor(int i=1;i<=N;i++)\n\t\tif(height[i]>=mid)\n\t\t{\n\t\t\tint j=i;\n\t\t\twhile(j<=N&&height[j]>=mid)\n\t\t\tj++;\n\t\t\tj--;\n\t\t\tstring num=change(sa[i],sa[i]+mid-1);\n\t\t\ta[num]+=j-i+2;\n\t\t\ti=j+1;\n\t\t}\n}\n\n\nint main()\n{\n\tscanf(\"%d\",&N);\n\tscanf(\"%s\",s+1);\n \tsuffixsort();\n \tget_height();\n \tfor(int i=1;i<=N;i++)\n \t\twork(i);\n \tfor(map<string,int>::iterator it=a.begin();it!=a.end();it++)\n\t\n\t\tif(it->second>0)cout<<it->second<<endl;\n\t}\n} \n```\n",
        "postTime": 1550668439,
        "uid": 60150,
        "name": "Alioth_",
        "ccfLevel": 8,
        "title": "P4341 \u5916\u661f\u8054\u7edc \u540e\u7f00\u6570\u7ec4"
    },
    {
        "content": "\u80fd\u7528\u540e\u7f00\u6811\u8349\u8fc7\u7684\u9898\u4e3a\u4ec0\u4e48\u8981\u7528\u540e\u7f00\u6570\u7ec4\u5462\u5bf9\u5427\u3002\n\n\u6211\u4eec\u5728\u63d2\u5165\u540e\u7f00\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u4e00\u4e0b\u4ed6\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u7ef4\u62a4 trie \u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a cnt\uff0c\u5176\u4f5c\u7528\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6211\u904d\u5386\u4e86\uff08\u5373\u51fa\u73b0\u8fc7\u4e86\uff09\u5c31\u52a0 $1$ \u3002\u6700\u540e\u6211\u4eec dfs \u904d\u5386\u6574\u68f5\u6811\uff08\u4fdd\u8bc1\u5b57\u5178\u5e8f\uff09\u65f6\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684 cnt \u503c\u662f\u5426\u5927\u4e8e $1$ \u5373\u53ef\u3002\n\n```cpp\nvoid insert(int k)\n{\n\tint p=0;\n\tfor(int i=k;i<=n;i++)\n\t{\n\t\tif(!trie[p].soon[s[i-1]-'0']) trie[p].soon[s[i-1]-'0']=++tot;\n\t\tp=trie[p].soon[s[i-1]-'0'];\n\t\ttrie[p].cnt++;\n\t}\n}\nvoid search(int qwq)\n{\n\tif(trie[qwq].cnt>1) cout<<trie[qwq].cnt<<\"\\n\";\n\tif(trie[qwq].soon[0]) search(trie[qwq].soon[0]);\n\tif(trie[qwq].soon[1]) search(trie[qwq].soon[1]);\n}\n```",
        "postTime": 1644369842,
        "uid": 369904,
        "name": "zplqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4341 [BJWC2010]\u5916\u661f\u8054\u7edc"
    },
    {
        "content": "\u65e2\u7136\u540e\u7f00\u6570\u7ec4\u3001\u540e\u7f00\u81ea\u52a8\u673a\u90fd\u80fd\u505a\uff0c\u540e\u7f00\u6811\u4e5f\u6765\u8bd5\u8bd5\uff1f\n\n___\n\n\u4e00\u4e2a\u91cd\u590d\u591a\u6b21\u7684\u5b50\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u540e\u7f00\u7684\u524d\u7f00\uff0c\u5fc5\u7136\u88ab\u5305\u62ec\u5728\u540e\u7f00\u6811\u7684\u4e00\u4e2a\u975e\u53f6\u5b50\u7684\u8282\u70b9\u4e0a\u3002\n\n\u7136\u540e\u5b83\u91cd\u590d\u7684\u6b21\u6570\u5c31\u662f\u5176\u5b50\u6811\u5185\u90e8\u53f6\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u7136\u540e\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u540e\u7f00\u6811\u4e00\u6761\u8fb9\u4e0a\u5305\u542b\u4e86\u591a\u4e2a\u5b57\u7b26\uff0c\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u7ed3\u5c3e\u90fd\u8868\u793a\u4e00\u4e2a\u4e32\uff0c\u591a\u8f93\u51fa\u51e0\u6b21\u5373\u53ef\u3002\n\n~~\u5c31\u8fd9\u5c31\u8fd9\uff1f\u6ca1\u4e86\uff0c\u771f\u7684\u6ca1\u4e86~~\n\n___\n\n\u4ee3\u7801\uff1a\n\n\u540e\u7f00\u6570\u7684\u6784\u5efa\u662f\u81ed\u540d\u662d\u8457\u7684 $\\operatorname{Ukkonen}$ \u7b97\u6cd5\uff0c\u4e0d\u4f1a\u53f3\u8f6c BFS\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\nconst int maxn = 6e3+5,INF = 0x3f3f3f3f;\ninline int max(int a,int b){return a>b?a:b;}\nint rem,last;\nint ch[maxn][3],len[maxn],beg[maxn],link[maxn],str[maxn],siz[maxn],tot,m;\nint New(int bg,int l){return len[++tot]=l,beg[tot]=bg,link[tot]=1,tot;}\nvoid append(int x){\n\tfor(int q=(str[++m]=x,++rem,1),nq;rem;last>1?last=link[last]:--rem){\n\t\tfor(;rem>len[ch[last][str[m-rem+1]]];rem-=len[last=ch[last][str[m-rem+1]]]);\n\t\tint &p = ch[last][str[m-rem+1]];\n\t\tif(!p)p=New(m-rem+1,INF),q=link[q]=last;\n\t\telse if(x==str[beg[p]+rem-1])return q=link[q]=last,void();\n\t\telse nq=New(beg[p],rem-1),ch[nq][x]=New(m,INF),ch[nq][str[beg[p]+=rem-1]]=p,len[p]-=(rem-1),(q=link[q]=p=nq); \n\t}\n}\nchar s[maxn];\nint l,ans;\nvoid dfs(int u){\n\tif(len[u] > l)return siz[u] = 1,void();\n\tfor(int i=0;i<=2;++i)\n\t\tif(ch[u][i] && (u^1||i^2))\n\t\t\tdfs(ch[u][i]),siz[u] += siz[ch[u][i]];\n}\nvoid getans(int u){\n\tif(len[u] > l)return ;\n\tif(siz[u] > 1)\n\t\tfor(int i=1;i<=len[u];++i)\n\t\t\tprintf(\"%d\\n\",siz[u]);\n\tfor(int i=0;i<=2;++i)\n\t\tif(ch[u][i]&&(u^1||i^2))getans(ch[u][i]);\n}\nint main(){\n\tscanf(\"%d\",&l);\n\tscanf(\"%s\",s);\n\tlast = tot = 1,len[0] = INF;\n\tfor(int i=0;i<l;++i)append(s[i]-'0');\n\tappend(2),dfs(1),getans(1);\n\treturn 0;\n}\n```",
        "postTime": 1611670649,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    },
    {
        "content": "# \u540e\u7f00\u81ea\u52a8\u673a\u505a\u6cd5\n\n\u770b\u5230\u5f88\u591a\u5de8\u4f6c\u7528$SA$\u6216$Trie$\uff0c\u6211\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5\u3002\u6211\u89c9\u5f97\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8bdd**\u7801\u91cf\u66f4\u5c0f\u3001\u66f4\u6613\u7406\u89e3**\u3002\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u7528\u540e\u7f00\u81ea\u52a8\u673a\u633a\u66b4\u529b\u7684\uff0c\u5176\u4e3b\u8981\u601d\u8def\u5982\u4e0b\uff1a\n\n1. **\u9996\u5148\u5148\u5bf9\u539f\u4e32\u6784\u5efa\u540e\u7f00\u81ea\u52a8\u673a\u3002**\n\n1. **\u7136\u540e\u628a\u6bcf\u4e2a\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u5728$parent$\u6811\u4e0a\u7edf\u8ba1\u51fa\u6765\uff0c\u8fd9\u4e00\u6bb5\u5c06\u4f1a\u6d89\u53ca\u5230\u57fa\u6570\u6392\u5e8f**\n\n1. **\u6700\u540e\u7528$dfs$\u6309$0\\to1$\u7684\u987a\u5e8f\u5728$parent$\u6811\u4e0a\u904d\u5386\uff0c\u8f93\u51fa\u7b54\u6848\u3002**\n\n\u5177\u4f53\u4ee3\u7801\u548c\u8be6\u7ec6\u6ce8\u91ca\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\n\n#define N 3010\n\nusing namespace std;\n\nstruct Tree\n{\n\tint ch[2],len,fa,size;//size\u6307\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u4e32\u7684\u51fa\u73b0\u6b21\u6570\n}t[N<<1];\n\nint n,last=1,tot=1,buckets[N],a[N<<1];\nchar s[N];\n\nvoid insert(int c)//\u540e\u7f00\u81ea\u52a8\u673a\u6a21\u677f\n{\n\tint p=last,np=last=++tot;\n\tt[np].len=t[p].len+1,t[np].size=1;//\u8fd9\u91cc\u628a\u8fd9\u4e2a\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u8bbe\u4e3a1\n\tfor(;p&&!t[p].ch[c];p=t[p].fa)t[p].ch[c]=np;\n\tif(!p)t[np].fa=1;\n\telse\n\t{\n\t\tint q=t[p].ch[c];\n\t\tif(t[q].len==t[p].len+1)t[np].fa=q;\n\t\telse\n\t\t{\n\t\t\tint nq=++tot;\n\t\t\tt[nq]=t[q];\n\t\t\tt[nq].len=t[p].len+1;\n\t\t\tt[nq].size=0;//\u56e0\u4e3a\u8fd9\u4e2a\u65b0\u8282\u70b9\u4e0d\u8ba1\u5165size\u7edf\u8ba1\u5185\uff08\u56e0\u4e3a\u5b83\u662f\u88ab\u522b\u4eba\u590d\u5236\u7684\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u8981\u628asize\u8bbe\u4e3a0\n\t\t\tt[np].fa=t[q].fa=nq;\n\t\t\tfor(;p&&t[p].ch[c]==q;p=t[p].fa)t[p].ch[c]=nq;\n\t\t}\n\t}\n}\n\nvoid count()\n{\n\tfor(int i=1;i<=tot;i++)buckets[t[i].len]++;//\u6309\u4e32\u7684\u957f\u5ea6\u6392\u5e8f\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u7edf\u8ba1size\u65f6\u662f\u6309\u4eceparent\u6811\u7684\u5e95\u90e8\u5230\u6839\u90e8\u7684\n\tfor(int i=1;i<=n;i++)buckets[i]+=buckets[i-1];\n\tfor(int i=1;i<=tot;i++)a[buckets[t[i].len]--]=i;\n\tfor(int i=tot;i>=1;i--)t[t[a[i]].fa].size+=t[a[i]].size;//\u7edf\u8ba1size\n}\n\nvoid dfs(int u)\n{\n\tif(!u)return;//\u5982\u679c\u662f\u7a7a\u8282\u70b9\u5c31return\n\tif(u!=1&&t[u].size>1)printf(\"%d\\n\",t[u].size);//\u6ce8\u610f\uff0c\u5f53\u8fd9\u4e2a\u70b9\u4e0d\u662f\u6839\u8282\u70b9\u4e14\u5b83\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\u65f6\u624d\u8f93\u51fa\n\tdfs(t[u].ch[0]);//\u904d\u5386\u5de6\u513f\u5b50\n\tdfs(t[u].ch[1]);//\u904d\u5386\u53f3\u513f\u5b50\n}\n\nint main()\n{\n\tscanf(\"%d%s\",&n,s+1);\n\tfor(int i=1;i<=n;i++)insert(s[i]-'0');//\u5bf9\u539f\u4e32\u6784\u9020\u540e\u7f00\u81ea\u52a8\u673a\n\tcount();//\u7edf\u8ba1size\n\tdfs(1);//\u904d\u5386parent\u6811\u5e76\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n",
        "postTime": 1558746952,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4341 \u3010[BJWC2010]\u5916\u661f\u8054\u7edc\u3011"
    }
]