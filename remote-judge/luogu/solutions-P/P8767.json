[
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[https://www.luogu.com.cn/problem/P8767](https://www.luogu.com.cn/problem/P8767)\n\n\u9e23\u8c22\uff1a\u8fd9\u9053\u9898\u7684\u987a\u5229\u89e3\u51b3\u5f97\u5230\u4e86 [7KByte](https://www.luogu.com.cn/user/119261) \u5927\u4f6c\u7684\u5927\u529b\u5e2e\u52a9\uff0c\u5728\u6b64\u518d\u6b21\u8868\u793a\u611f\u8c22\u3002\n\n\u9996\u5148\uff0c\u6211\u7684\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n\u4f7f\u7528\u4e00\u4e2a splay tree \u6765\u7ef4\u62a4\u8fd9\u4e9b\u51b0\u5c71\u7684\u4fe1\u606f\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u7684 $x$ \u548c $y$\uff1a\n1. \u5148\u5c06\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0 $x$\uff08\u8fd9\u6b65\u64cd\u4f5c\u53ea\u9700\u8981\u4fee\u6539\u6839\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e0b\u61d2\u60f0\u6807\u8bb0\u5373\u53ef\uff0c\u4ee5\u540e\u4f1a push_down \u4e0b\u53bb\u7684\uff09\n2. \u7136\u540e\u589e\u52a0\u4e00\u4e2a\u6743\u503c\u4e3a $y$ \u7684\u70b9\uff08\u5982\u679c\u6743\u503c\u4e3a $y$ \u7684\u70b9\u672c\u8eab\u5c31\u5b58\u5728\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u6570\u91cf\u589e\u52a0 $1$\uff09\n3. \u5148\u5c06\u6743\u503c $\\gt 0$ \u4e14\u6700\u5c0f\u7684\u8282\u70b9 splay \u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5176\u5de6\u5b50\u6811\uff08\u56e0\u4e3a\u6b64\u65f6\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u6743\u503c\u5747 $\\le 0$\uff09\n4. \u518d\u5c06\u6743\u503c $\\le k$ \u4e14\u6700\u5927\u7684\u8282\u70b9 splay \u4e3a\u6839\u8282\u70b9\uff0c\u6b64\u65f6\u5176\u53f3\u5b50\u6811\u5bf9\u5e94\u7684\u8282\u70b9\u90fd\u662f\u6743\u503c $\\gt k$ \u7684\uff0c\u8fd9\u4e9b\u8282\u70b9\u9700\u8981\u62c6\u89e3\u4e3a\u82e5\u5e72\u4e2a\u6743\u503c\u4e3a $k$ \u7684\u8282\u70b9\u548c\u82e5\u5e72\u4e2a\u6743\u503c\u4e3a $1$ \u7684\u8282\u70b9\uff0c\u64cd\u4f5c\u8fc7\u7a0b\u4e3a\uff1a\n    1. \u9996\u5148\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f\uff1a\n        - sum \u8868\u793a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u6743\u503c\u4e0e\u6570\u91cf\u7684\u4e58\u79ef\u4e4b\u548c\uff0c\u6bd4\u5982\uff1a\u5982\u679c\u8be5\u8282\u70b9\u6240\u5728\u5b50\u6811\u4e2d\u6709 $2$ \u4e2a\u6743\u503c\u4e3a $3$ \u7684\u70b9\uff0c$6$ \u4e2a\u6743\u503c\u4e3a $5$ \u7684\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u7684 sum \u4e3a $2 \\times 3 + 6 \\times 5 = 36$\n        - cnt \u8868\u793a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u81ea\u8ff0\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6570\u91cf\uff0c\u6bd4\u5982\uff1a\u5982\u679c\u8be5\u7ee9\u70b9\u6240\u5728\u5b50\u6811\u4e2d\u6709 $2$ \u4e2a\u6743\u503c\u4e3a $3$ \u7684\u70b9\uff0c$6$ \u4e2a\u6743\u503c\u4e3a $5$ \u7684\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u7684 cnt \u503c\u4e3a $2 + 6 = 8$\n    2. \u7136\u540e\uff0c\u5148\u8ba1\u7b97\u51fa\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684 sum \u503c\u548c cnt \u503c\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u88ab\u5206\u6210 $1$ \u4e2a\u6743\u503c\u4e3a $k$ \u7684\u8282\u70b9\u4ee5\u53ca\uff08\u5269\u4f59\u7684\uff09\u82e5\u5e72\u4e2a\u6743\u503c\u4e3a $1$ \u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u505a\u7684\u4e8b\u60c5\u662f\uff1a\n        1. \u5220\u9664\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\n        2. \u63d2\u5165 cnt \u4e2a\u6743\u503c\u4e3a $k$ \u7684\u8282\u70b9\n        3. \u63d2\u5165 `sum - cnt * k` \u4e2a\u6743\u503c\u4e3a $1$ \u7684\u8282\u70b9\n\n\uff08\u6ce8\uff1a\u8fd9\u6837\u8ba8\u8bba\u5728\u4e0b\u9762\u7684\u5b9e\u73b0\u662f\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u6ca1\u6709\u5904\u7406\uff0c\u6211\u4eec\u5728\u4e0b\u9762\u7684\u5185\u5bb9\u4e2d\u8ba8\u8bba\uff09  \n\n\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u9996\u5148\u7531\u4e8e\u6211\u7ecf\u5e38\u4f1a\u7528\u5230\u53d8\u91cf\u5c0f `k`\uff0c\u6240\u4ee5\u6211\u628a\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684 `k` \u5f00\u6210\u4e86\u5927K\uff08\u5373 `K`\uff09\u2014\u2014 \u5373\u51b0\u5c71\u7684\u6700\u5927\u5927\u5c0f\u3002  \n\n\u7136\u540e\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u7ef4\u62a4 splay tree \u91cc\u9762\u7684\u8282\u70b9\u4fe1\u606f\uff0c\u5982\u4e0b\uff1a  \n```c++\nstruct Node {\n    int s[2], p;    // s[0] \u5de6\u513f\u5b50 s[1] \u53f3\u513f\u5b50 p \u7236\u8282\u70b9\n    long long v,    // \u51b0\u5c71\u4f53\u79ef\n              num,  // \u51b0\u5c71\u4e2a\u6570\n              cnt,  // \u5b50\u6811\u5305\u542b\u51b0\u5c71\u4e2a\u6570\n              sum,  // \u5b50\u6811\u5305\u542b\u51b0\u5c71\u4f53\u79ef\u4e4b\u548c\n              flag; // \u61d2\u60f0\u6807\u8bb0\n\n    Node() {};\n    Node(long long _v, int _p) {v = _v; p = _p; s[0] = s[1] = 0; num = cnt = sum = flag = 0;}\n} tr[maxn];\n```\n\u5176\u4e2d\uff1a  \n- `s[0]` \u548c `s[1]` \u5206\u522b\u8868\u793a\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff08\u5982\u679c\u6ca1\u6709\u5219\u4e3a $0$\uff09\n- `v` \u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\uff08\u5bf9\u5e94\u7684\u5c31\u662f\u51b0\u5c71\u7684\u4f53\u79ef\uff09\n- `num` \u8868\u793a\u4f53\u79ef\u4e3a `v` \u7684\u51b0\u5c71\u6709\u591a\u5c11\u4e2a\n- `cnt` \u8868\u793a\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u5305\u542b\u7684\u51b0\u5c71\u7684\u603b\u6570\n- `sum` \u8868\u793a\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u5305\u542b\u7684\u51b0\u5c71\u7684\u603b\u4f53\u79ef\n- `flag` \u662f\u61d2\u60f0\u6807\u8bb0\uff0c\u5b83\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u7684\u4f53\u79ef\u9700\u8981\u6574\u4f53\u589e\u52a0\u7684\u91cf\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u660e\u7684\u662f\uff0c\u6211\u81ea\u5df1\u505a\u61d2\u60f0\u6807\u8bb0\u7684\u4e60\u60ef\u662f\uff1a\u4fee\u6539\u5f53\u524d\u8282\u70b9\u4fe1\u606f\u7684\u540c\u65f6\u8fdb\u884c\u61d2\u60f0\u6807\u8bb0\uff0c\u7136\u540e\u5c06\u61d2\u60f0\u6807\u8bb0\u4f20\u7ed9\u5b50\u8282\u70b9\u7684\u65f6\u5019\u4e5f\u4f1a\u4fee\u6539\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u5199\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u90fd\u662f\u8fd9\u4e48\u5199\u7684\u5c31\u4e60\u60ef\u4e86\u3002\uff08\u56e0\u4e3a\u6709\u7684\u5927\u4f6c\u53ef\u80fd\u4e60\u60ef\u662f pushdown \u7684\u65f6\u5019\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff0c\u4f46\u662f\u6211\u5df2\u7ecf\u4e60\u60ef\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5e76\u8fdb\u884c\u61d2\u60f0\u6807\u8bb0\uff0c\u7136\u540e pushdown \u7684\u65f6\u5019\u4e00\u65b9\u9762\u66f4\u65b0\u5b50\u8282\u70b9\uff0c\u53e6\u4e00\u65b9\u9762\u628a\u61d2\u60f0\u6807\u8bb0\u4f20\u7ed9\u5b50\u8282\u70b9\uff09  \n\n\u7136\u540e\u56e0\u4e3a\u5177\u4f53\u5b9e\u73b0\u662f\u7ecf\u5e38\u9700\u8981\u8fdb\u884c\u5f62\u5982 `a = (a + b) % MOD;` \u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a `add` \u51fd\u6570\u65b9\u4fbf\u5199\uff1a  \n```c++\nvoid add(long long &a, long long b) {\n    a = (a + b % MOD) % MOD;\n}\n```\n\n\u7136\u540e\u5c31\u662f\u6bd4\u8f83\u91cd\u8981\u7684 push up \u548c push down \u64cd\u4f5c\u4e86\u3002\n\n### push up\npush_up \u9700\u8981\u5c06\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u66f4\u65b0\u5230\u5f53\u524d\u8282\u70b9\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u4e00\u4e0b cnt \u548c sum\n\n\u4e3b\u8981\u64cd\u4f5c\u5c31\u662f\uff1a  \n```c++\ntr[x].cnt = tr[x].num + tr[tr[x].s[0]].cnt + tr[tr[x].s[1]].cnt;\ntr[x].sum = tr[x].num * tr[x].v + tr[tr[x].s[0]].sum + tr[tr[x].s[1]].sum;\n```\n\u9700\u8981\u53d6\u4e00\u4e0b\u6a21\u3002  \n\n### push down\npush_down \u9700\u8981\u5c06\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\uff08flag\uff0c\u5bf9\u5e94\u7684\u662f\u51b0\u5c71\u4f53\u79ef\u7684\u6574\u4f53\u589e\u91cf\uff09\u4f20\u9012\u7ed9\u5b50\u8282\u70b9\u5e76\u4e14\u540c\u65f6\u66f4\u65b0\u5b50\u8282\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5f53\u4f20\u9012\u4e86\u4e00\u4e2a\u503c\u4e3a `tmp` \u7684\u4f53\u79ef\u589e\u91cf\u65f6\uff1a\n- flag \u4f1a\u589e\u52a0 tmp\n- v \u4f1a\u589e\u52a0 tmp\n- sum \u4f1a\u589e\u52a0 `cnt * tmp`\uff08\u56e0\u4e3a\u8be5\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u5bf9\u5e94\u7684\u51b0\u5c71\u4f53\u79ef\u90fd\u4f1a\u589e\u52a0 `tmp`\uff09\n\n\u4e3b\u8981\u64cd\u4f5c\u662f\uff1a  \n```c++\nvoid t_flag(int x, long long tmp) {\n    if (x) {\n        tr[x].flag += tmp;\n        tr[x].v += tmp;\n        add(tr[x].sum, tr[x].cnt * tmp);\n    }\n}\n\nvoid push_down(int x) {\n    if (tr[x].flag) {\n        t_flag(tr[x].s[0], tr[x].flag);\n        t_flag(tr[x].s[1], tr[x].flag);\n        tr[x].flag = 0;\n    }\n}\n```\n\n### \u65cb\u8f6c\u548c splay \u64cd\u4f5c\n\u8fd9\u90e8\u5206\u7684\u64cd\u4f5c\u57fa\u672c\u6ca1\u6709\u6539\u52a8\u8fc7\uff0c\u4e4b\u524d\u7528\u5b83\u4eec\u89e3\u51b3\u8fc7 AcWing \u4e0a\u7684 splay \u4f8b\u9898\uff08\u539f\u6765\u7684\u5e16\u5b50\uff1a[https://www.acwing.com/file_system/file/content/whole/index/content/7428637/](https://www.acwing.com/file_system/file/content/whole/index/content/7428637/)\uff09\n\n\u5bf9\u5e94\u7684\u4ee3\u7801\uff08\u591a\u4e86\u4e00\u4e2a f_s(p, u, k) \u51fd\u6570\u7528\u6765\u8ba4\u4eb2\uff08u \u662f p \u7684\u513f\u5b50\uff0c\u5176\u4e2d k = 0 \u8868\u793a u \u662f p \u7684\u5de6\u513f\u5b50\uff1bk = 1 \u8868\u793a u \u662f p \u7684\u53f3\u513f\u5b50\uff09\uff1a  \n```c++\nvoid f_s(int p, int u, bool k) {\n    tr[p].s[k] = u;\n    tr[u].p = p;\n}\n\nvoid rot(int x) {\n    int y = tr[x].p, z = tr[y].p;\n    bool k = tr[y].s[1] == x;\n    f_s(z, x, tr[z].s[1]==y);\n    f_s(y, tr[x].s[k^1], k);\n    f_s(x, y, k^1);\n    push_up(y), push_up(x);\n}\n\nvoid splay(int x, int k) {\n    while (tr[x].p != k) {\n        int y = tr[x].p, z = tr[y].p;\n        if (z != k)\n            (tr[y].s[1]==x) ^ (tr[z].s[1]==y) ? rot(x) : rot(y);\n        rot(x);\n    }\n    if (!k) root = x;\n}\n```\n\n### \u63d2\u5165\u64cd\u4f5c\n`ins(v, num)` \u8868\u793a\u7684\u662f\u52a0\u5165 `num` \u4e2a\u4f53\u79ef\u4e3a `v` \u7684\u51b0\u5c71\uff1a  \n```c++\nvoid ins(long long v, long long num) {\n    int u = root, p = 0;\n    while (u && tr[u].v != v) {\n        push_down(u);\n        p = u, u = tr[u].s[v > tr[u].v];\n    }\n    if (!u) {\n        tr[u = ++idx] = Node(v, p);\n        if (p) tr[p].s[v > tr[p].v] = u;\n    }\n    else\n        push_down(u);   // \u5982\u679c\u4e0d\u662f\u65b0\u5efa\u7684\u8282\u70b9\uff0c\u9700\u8981push_down\u4e00\u4e0b\n    add(tr[u].num, num);\n    add(tr[u].cnt, num);\n    add(tr[u].sum, num * v);\n    splay(u, 0);\n}\n```\n\n### \u8c03\u6574\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a check \u51fd\u6570\uff0c\u4e3b\u8981\u7528\u6765\u5224\u65ad\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u51b0\u5c71\u4f53\u79ef\u662f\u5426\u5408\u6cd5\uff1a  \n\n```c++\nbool check(int u) {\n    return tr[u].v > 0 && tr[u].v <= K;\n}\n```\n\n\u7136\u540e\u5c31\u662f `get1()` \u51fd\u6570\u548c `get2()` \u51fd\u6570\u4e86\u3002\n\n**get1()** \u51fd\u6570\u5bf9\u5e94\u7684\u5c31\u662f\u6211\u4e0a\u9762\u8bf4\u7684\u7b2c 3 \u6b65\u64cd\u4f5c\uff1a  \n\n> 3. \u5148\u5c06\u6743\u503c $\\gt 0$ \u4e14\u6700\u5c0f\u7684\u8282\u70b9 splay \u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5176\u5de6\u5b50\u6811\uff08\u56e0\u4e3a\u6b64\u65f6\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u6743\u503c\u5747 $\\le 0$\uff09\n\n**\u8865\u5145\u4e00\u70b9\u7ec6\u8282\uff1a** \u5982\u679c\u5faa\u73af\u7ed3\u675f\u65f6\u6ca1\u6709\u627e\u5230 $\\gt 0$ \u7684\u8282\u70b9\uff08\u5373\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684 `x` \u7ed3\u675f\u65f6\u4ecd\u7136\u4e3a $0$\uff09\uff0c\u8bf4\u660e\u9700\u8981\u5c06\u6574\u68f5\u6811\u5220\u9664\u3002  \n\n```c++\nvoid get1() {\n    int u = root, p = 0, x = 0;\n    while (u) {\n        push_down(u);\n        p = u;\n        if (tr[u].v > 0) {\n            x = u;\n            u = tr[u].s[0];\n        }\n        else u = tr[u].s[1];\n    }\n    if (x) {\n        splay(x, 0);\n        tr[x].s[0] = 0;\n        push_up(x);\n    }\n    else tr[root = 0] = Node(0, 0);\n}\n```\n\n**get2()** \u51fd\u6570\u5bf9\u5e94\u7684\u5c31\u662f\u6211\u4e0a\u9762\u8bf4\u7684\u7b2c 4 \u6b65\u64cd\u4f5c\uff1a  \n\n> 4. \u518d\u5c06\u6743\u503c $\\le k$ \u4e14\u6700\u5927\u7684\u8282\u70b9 splay \u4e3a\u6839\u8282\u70b9\uff0c\u6b64\u65f6\u5176\u53f3\u5b50\u6811\u5bf9\u5e94\u7684\u8282\u70b9\u90fd\u662f\u6743\u503c $\\gt k$ \u7684\uff0c\u8fd9\u4e9b\u8282\u70b9\u9700\u8981\u62c6\u89e3\u4e3a\u82e5\u5e72\u4e2a\u6743\u503c\u4e3a $k$ \u7684\u8282\u70b9\u548c\u82e5\u5e72\u4e2a\u6743\u503c\u4e3a $1$ \u7684\u8282\u70b9\n\n**\u8865\u5145\u4e00\u70b9\u7ec6\u8282\uff1a** \u5982\u679c\u5faa\u73af\u7ed3\u675f\u65f6\u6ca1\u6709\u627e\u5230 $\\gt 0$ \u7684\u8282\u70b9\uff08\u5373\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684 `x` \u7ed3\u675f\u65f6\u4ecd\u7136\u4e3a $0$\uff09\uff0c\u8bf4\u660e\u8981\u4e48\u6811\u662f\u7a7a\u7684\uff0c\u8981\u4e48\u6240\u6709\u8282\u70b9\u90fd\u662f $\\gt K$ \u7684\uff0c\u5982\u679c\u6240\u6709\u8282\u70b9\u90fd\u662f $\\gt K$ \u7684\uff0c\u5e94\u8be5\u5904\u7406\u6574\u68f5\u6811\uff0c\u800c\u4e0d\u662f\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u3002  \n\n```c++\nvoid get2() {\n    int u = root, p = 0, x = 0;\n    while (u) {\n        push_down(u);\n        p = u;\n        if (tr[u].v <= K) {\n            x = u;\n            u = tr[u].s[1];\n        }\n        else u = tr[u].s[0];\n    }\n    int y;\n    if (x) splay(x, 0), y = tr[x].s[1];\n    else y = root;\n    if (y) {\n        long long cnt = tr[y].cnt, sum = tr[y].sum;\n        if (y != root) tr[x].s[1] = 0;\n        else tr[root = 0] = Node(0, 0);\n        push_up(root);\n        ins(K, cnt);\n        ins(1, (sum - cnt * K % MOD + MOD) % MOD);\n    }\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a  \n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e6 + 5;\nconst long long MOD = 998244353;\n\nint n, m;\nlong long K;\nstruct Node {\n    int s[2], p;    // s[0] \u5de6\u513f\u5b50 s[1] \u53f3\u513f\u5b50 p \u7236\u8282\u70b9\n    long long v,    // \u51b0\u5c71\u4f53\u79ef\n              num,  // \u51b0\u5c71\u4e2a\u6570\n              cnt,  // \u5b50\u6811\u5305\u542b\u51b0\u5c71\u4e2a\u6570\n              sum,  // \u5b50\u6811\u5305\u542b\u51b0\u5c71\u4f53\u79ef\u4e4b\u548c\n              flag; // \u61d2\u60f0\u6807\u8bb0\n\n    Node() {};\n    Node(long long _v, int _p) {v = _v; p = _p; s[0] = s[1] = 0; num = cnt = sum = flag = 0;}\n} tr[maxn];\nint root, idx;\n\nvoid add(long long &a, long long b) {\n    a = (a + b % MOD) % MOD;\n}\n\nvoid push_up(int x) {\n    tr[x].cnt = tr[x].num + tr[tr[x].s[0]].cnt + tr[tr[x].s[1]].cnt;\n    tr[x].cnt %= MOD;\n    tr[x].sum = tr[x].num * tr[x].v + tr[tr[x].s[0]].sum + tr[tr[x].s[1]].sum;\n    tr[x].sum %= MOD;\n    tr[x].sum = (tr[x].sum + MOD) % MOD;\n}\n\nvoid t_flag(int x, long long tmp) {\n    if (x) {\n        tr[x].flag += tmp;\n        tr[x].v += tmp;\n        add(tr[x].sum, tr[x].cnt * tmp);\n    }\n}\n\nvoid push_down(int x) {\n    if (tr[x].flag) {\n        t_flag(tr[x].s[0], tr[x].flag);\n        t_flag(tr[x].s[1], tr[x].flag);\n        tr[x].flag = 0;\n    }\n}\n\nvoid f_s(int p, int u, bool k) {\n    if (p) tr[p].s[k] = u;\n    tr[u].p = p;\n}\n\nvoid rot(int x) {\n    int y = tr[x].p, z = tr[y].p;\n    bool k = tr[y].s[1] == x;\n    f_s(z, x, tr[z].s[1]==y);\n    f_s(y, tr[x].s[k^1], k);\n    f_s(x, y, k^1);\n    push_up(y), push_up(x);\n}\n\nvoid splay(int x, int k) {\n    while (tr[x].p != k) {\n        int y = tr[x].p, z = tr[y].p;\n        if (z != k)\n            (tr[y].s[1]==x) ^ (tr[z].s[1]==y) ? rot(x) : rot(y);\n        rot(x);\n    }\n    if (!k) root = x;\n}\n\nvoid ins(long long v, long long num) {\n    int u = root, p = 0;\n    while (u && tr[u].v != v) {\n        push_down(u);\n        p = u, u = tr[u].s[v > tr[u].v];\n    }\n    if (!u) {\n        tr[u = ++idx] = Node(v, p);\n        if (p) tr[p].s[v > tr[p].v] = u;\n    }\n    else\n        push_down(u);   // \u5982\u679c\u4e0d\u662f\u65b0\u5efa\u7684\u8282\u70b9\uff0c\u9700\u8981push_down\u4e00\u4e0b\n    add(tr[u].num, num);\n    add(tr[u].cnt, num);\n    add(tr[u].sum, num * v);\n    splay(u, 0);\n}\n\nbool check(int u) {\n    return tr[u].v > 0 && tr[u].v <= K;\n}\n\nvoid get1() {\n    int u = root, p = 0, x = 0;\n    while (u) {\n        push_down(u);\n        p = u;\n        if (tr[u].v > 0) {\n            x = u;\n            u = tr[u].s[0];\n        }\n        else u = tr[u].s[1];\n    }\n    if (x) {\n        splay(x, 0);\n        tr[x].s[0] = 0;\n        push_up(x);\n    }\n    else tr[root = 0] = Node(0, 0);\n}\n\nvoid get2() {\n    int u = root, p = 0, x = 0;\n    while (u) {\n        push_down(u);\n        p = u;\n        if (tr[u].v <= K) {\n            x = u;\n            u = tr[u].s[1];\n        }\n        else u = tr[u].s[0];\n    }\n    int y;\n    if (x) splay(x, 0), y = tr[x].s[1];\n    else y = root;\n    if (y) {\n        long long cnt = tr[y].cnt, sum = tr[y].sum;\n        if (y != root) tr[x].s[1] = 0;\n        else tr[root = 0] = Node(0, 0);\n        push_up(root);\n        ins(K, cnt);\n        ins(1, (sum - cnt * K % MOD + MOD) % MOD);\n    }\n}\n\nint main() {\n    scanf(\"%d%d%lld\", &n, &m, &K);\n    for (int i = 0; i < n; i++) {\n        int v;\n        scanf(\"%d\", &v);\n        ins(v, 1);\n    }\n    while (m--) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        t_flag(root, x);\n        ins(y, 1);\n        get1();\n        get2();\n        printf(\"%lld\\n\", tr[root].sum);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1673850366,
        "uid": 291976,
        "name": "quanjun",
        "ccfLevel": 6,
        "title": "\u6d1b\u8c37P8767 [\u84dd\u6865\u676f 2021 \u56fd A] \u51b0\u5c71 \u9898\u89e3 splay tree"
    }
]