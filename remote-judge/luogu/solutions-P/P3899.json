[
    {
        "content": "**\u849f\u84bb\u535a\u5ba2**\uff1a[QwQ](https://www.cnblogs.com/GoldenPotato/p/9801317.html)\n\n\n------------\n\n## Solution\n\n\u4f60\u4eec\u641e\u7684\u8fd9\u9053\u9898\u554a\uff0cexciting\uff01\n\n .\n\n\u8fd9\u9898\u771f\u7684\u5f88\u6709\u610f\u601d\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7406\u89e3\u4e00\u4e0b\u9898\u9762\uff1a\u56fa\u5b9a\u4e00\u4e2aa\uff0c\u627e\u5230\u4e00\u4e2ab\uff0cc\u5c31\u662fa\u4e0eb\u7684\u516c\u5171\u5b50\u6811\u4e2d\u7684\u67d0\u4e2a\u70b9\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u628a\u8fd9\u4e2ab\u5206\u6210\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662f\u5728a\u4e0a\u9762\u7684\uff0c\u7b2c\u4e8c\u79cd\u5728a\u4e0b\u9762\u7684\u3002\n\n\n\u5bf9\u4e8eb\u5728a\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u663e\u7136\uff0cc\u4e00\u5b9a\u662fa\u7684\u5b50\u6811\u4e2d\u7684\u67d0\u4e2a\u70b9\uff0c\u7b54\u6848\u5373$min(K,depth[a])*size[a]$\n\n.\n\n\u5bf9\u4e8eb\u5728a\u4e0b\u9762\u7684\u60c5\u51b5\uff0c\u95ee\u9898\u5c31\u4f1a\u53d8\u5f97\u6bd4\u8f83exciting\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e3b\u5e2d\u6811\u6765\u641e\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8003\u8651\u5efa\u4e00\u9897\u8fd9\u6837\u7684\u4e3b\u5e2d\u6811\uff0c**\u4ee5\u8282\u70b9\u6df1\u5ea6\u4e3a\u4e3b\u5e2d\u6811\u4e0b\u6807**\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679cB\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\uff0c\u90a3\u4e48\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u663e\u7136\u662f\u5b83\u7684size-1\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u628a\u5b83\u7684\u8d21\u732e\u63d2\u5165\u5230\u5b83\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u4e2d\uff08\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\uff09\u3002\n\n\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u5f00\u4e00\u9897\u4e3b\u5e2d\u6811\uff0c\u8bb0\u5f55\u5230\u5b83\u4e3a\u6b62\u6240\u6709\u7684\u6df1\u5ea6\u7684\u7b54\u6848\u548c\uff0c\u6709\u70b9\u7c7b\u4f3c\u524d\u7f00\u548c\uff0c**\u4ee5dfs\u5e8f\u4e3a\u65f6\u95f4\u8f74**\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u6811\u4e0a\u5dee\u5206\u7684\u529e\u6cd5\u6765\u201c\u62a0\u201d\u51fa\u4e00\u9897\u5b50\u6811\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6570\uff08\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\uff09\uff0c**\u8fd9\u9897\u7ebf\u6bb5\u6570\u4e2d\u7684[depth[x]+1,depth[x]+K]\u533a\u95f4\u7684sum\u5c31\u662f\u8fd9\u4e2ax\u70b9\u7684\u7b54\u6848\u5566**\u3002\n\n \n.\n\n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u5207\u6389\u5566\u0669(\u0e51>\u25e1<\u0e51)\u06f6\n\n\n------------\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst long long N=300000+100;\nconst long long M=N*30;\nstruct SegmentTree\n{\n    #define mid ((now_l+now_r)>>1)\n    long long son[M][2],cnt;\n    long long sum[M];\n    inline void update(long long now)\n    {\n        sum[now]=sum[son[now][0]]+sum[son[now][1]];\n    }\n    void Build(long long now,long long now_l,long long now_r)\n    {\n        if(now_l==now_r) \n            return;    \n        Build(son[now][0]=++cnt,now_l,mid);\n        Build(son[now][1]=++cnt,mid+1,now_r);\n    }\n    void Add(long long x,long long num,long long now,long long pre,long long now_l,long long now_r)\n    {\n        if(now_l==now_r)\n        {\n            sum[now]=sum[pre];\n            sum[now]+=num;\n            return ;\n        }\n        if(x<=mid) son[now][1]=son[pre][1],Add(x,num,son[now][0]=++cnt,son[pre][0],now_l,mid);\n        else son[now][0]=son[pre][0],Add(x,num,son[now][1]=++cnt,son[pre][1],mid+1,now_r);\n        update(now);\n    }\n    long long Query(long long L,long long R,long long now,long long pre,long long now_l,long long now_r)\n    {\n        if(now_l>=L and now_r<=R)\n            return sum[now]-sum[pre];\n        long long ans=0;\n        if(L<=mid) ans+=Query(L,R,son[now][0],son[pre][0],now_l,mid);\n        if(R>mid) ans+=Query(L,R,son[now][1],son[pre][1],mid+1,now_r);\n        return ans;\n    }\n    void Print(long long now,long long now_l,long long now_r)\n    {\n        cerr<<\"no.\"<<now<<\" now_l&r:\"<<now_l<<\" \"<<now_r<<\" sonl&r\"<<son[now][0]<<\" \"<<son[now][1]<<\" sum:\"<<sum[now]<<endl;\n        if(now_l!=now_r)\n        {\n            Print(son[now][0],now_l,mid);\n            Print(son[now][1],mid+1,now_r);    \n        }\n    }    \n    #undef mid\n}sgt;\nvector <long long> e[N];\nlong long n,m,depth[N],size[N],dfn[N],dfn_to,r[N];\nvoid dfs2(long long now)\n{\n    dfn[now]=++dfn_to;\n    size[now]=1;\n    for(long long i=0;i<(long long)(e[now].size());i++)\n        if(depth[e[now][i]]==0)    \n        {\n            depth[e[now][i]]=depth[now]+1;\n            dfs2(e[now][i]);\n            size[now]+=size[e[now][i]];    \n        }\n}\nvoid dfs(long long now)\n{\n    r[dfn[now]]=++sgt.cnt;\n    sgt.Add(depth[now],size[now]-1,r[dfn[now]],r[dfn[now]-1],1,n);\n    //sgt.Print(r[dfn[now]],1,n);\n    //cerr<<endl;\n    for(long long i=0;i<(long long)(e[now].size());i++)\n        if(depth[e[now][i]]>depth[now])\n            dfs(e[now][i]);\n}\nint main()\n{\n    n=read(),m=read();\n    for(long long i=1;i<=n;i++)\n        e[i].reserve(4);\n    for(long long i=1;i<n;i++)\n    {\n        long long s=read(),t=read();\n        e[s].push_back(t);\n        e[t].push_back(s);    \n    }\n    \n    sgt.Build(0,1,n);\n    //sgt.Print(0,1,n);\n    //cerr<<endl;\n    depth[1]=1;\n    dfs2(1);\n    dfs(1);\n    \n    for(long long i=1;i<=m;i++)\n    {\n        long long p=read(),K=read();\n        long long ans=sgt.Query(depth[p]+1,depth[p]+K,r[dfn[p]+size[p]-1],r[dfn[p]-1],1,n);\n        ans+=min(K,depth[p]-1)*(size[p]-1);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1539742048,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u5230\u5927\u5bb6\u90fd\u7528\u4e3b\u5e2d\u6811\u6216\u8005\u6743\u503c\u7ebf\u6bb5\u6811\u7b49\u7b49\uff0c\u5176\u5b9e\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u5440orz\n\n\u53ea\u8981\u7a0d\u5fae\u60f3\u60f3\u5c31\u80fd\u53d1\u73b0\uff0c\u5b83\u5176\u5b9e\u53ef\u4ee5\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684**\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898**\u3002\n\n\u8bbe$dep_i$\u4e3a$i$\u8282\u70b9\u7684\u6df1\u5ea6\uff08\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a$0$\uff09\uff0c$sz_i$\u4e3a$i$\u8282\u70b9\u5b50\u6811\u5927\u5c0f\n\n\u5bf9\u4e8e\u8be2\u95ee$(p,k)$,\u6211\u4eec\u5c06$(a,b,c)$\u8fd9\u4e00\u4e09\u5143\u7ec4\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1)**$b$\u662f$a$\u7684\u7236\u4eb2**\u3002\u663e\u7136\uff0c\u8fd9\u65f6$c$\u53ef\u4ee5\u662f$a$\u5b50\u6811\u5185\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u6b64\u65f6\u7b54\u6848\u4e3a$(sz_p-1)\\times min(dep_p,k)$\uff0c\u56e0\u4e3a\u6709$min(dep_p,k)$\u4e2a\u5408\u6cd5\u7684$b$\u662f$a$\u7684\u7236\u4eb2\n\n2)**$b$\u662f$a$\u7684\u513f\u5b50**\u3002\u663e\u7136\uff0c\u53ea\u6709$dep_b\\in [dep_a+1,dep_a+k]$\u65f6\uff0c\u8fd9\u624d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684$b$\u3002\n\n\u800c\u5bf9\u6bcf\u4e2a$b$\uff0c\u5b83\u80fd\u8d21\u732e$sz_b-1$\u4e2a\u7b54\u6848\u3002\n\n\u800c\u5982\u4f55\u5224\u65ad\u6bcf\u4e2a$b$\u662f\u5426\u5728$a$\u7684\u5b50\u6811\u5185\u5462\uff1f\n\n**dfs\u5e8f**\n\n\u8bbe$rev_i$\u8868\u793a$i$\u8282\u70b9\u5728dfs\u5e8f\u4e2d\uff0c\u5728\u7b2c$rev_i$\u6b21\u65f6\u88ab\u8bbf\u95ee\u5230\n\n\u5219$[rev_i,rev_i+sz_i-1]$\u4e3a\u8282\u70b9$i$\u7684\u5b50\u6811\u7f16\u53f7\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u8282\u70b9$a$\uff0c\u6240\u6709\u6ee1\u8db3$dep_b\\in [dep_a+1,dep_a+k]$\u4e14$rev_b\\in[rev_a+1,rev_a+sz_a-1]$\u7684$b$\u5747\u4e3a\u5408\u6cd5\u7684$b$\u3002\n\n\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\u5982\u679c\u6211\u4eec\u4ee5$rev$\u4f5c\u4e3a$x$\u8f74\uff0c$dep$\u4f5c\u4e3a$y$\u8f74\uff0c\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u5219\u6bcf\u4e2a\u8282\u70b9i\u53ef\u4ee5\u88ab\u62bd\u8c61\u6210\u4e00\u4e2a\u70b9$(rev_i,dep_i)$\uff0c\u5e76\u4e14\u6709$sz_i-1$\u7684\u6743\u503c\u3002\n\n\u800c\u6bcf\u6b21\u8be2\u95ee\uff0c\u5c31\u53ef\u4ee5\u88ab\u62bd\u8c61\u6210\u4e00\u4e2a\u77e9\u5f62\uff0c\u67e5\u8be2\u7684\u662f\u77e9\u5f62\u5185\u90e8\u6240\u6709\u70b9\u7684\u6743\u503c\u548c\u3002\n\n\u5e76\u4e14\uff0c\u8fd9\u9053\u9898**\u53ef\u4ee5\u79bb\u7ebf**\u3002\n\n\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u7528**\u6811\u72b6\u6570\u7ec4**\u8fdb\u884c**\u4e8c\u7ef4\u6570\u70b9**\u4e86\u3002\n\n\u590d\u6742\u5ea6$O(nlog_2n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n,m,head[300100],cnt,dep[300100],rev[300100],tot,sz[300100],res[300100],BIT[300100];\nstruct Edge{\n\tint to,next;\n}edge[600100];\nint ae(int u,int v){\n\tedge[cnt].to=v,edge[cnt].next=head[u],head[u]=cnt++;\n}\nvoid dfs(int x,int fa){\n\trev[x]=++tot,sz[x]=1;\n\tfor(int i=head[x];i!=-1;i=edge[i].next)if(edge[i].to!=fa)dep[edge[i].to]=dep[x]+1,dfs(edge[i].to,x),sz[x]+=sz[edge[i].to];\n}\nstruct Point{\n\tint u,v,w;\n\tPoint(int a=0,int b=0,int c=0){\n\t\tu=a,v=b,w=c;\n\t}\n\tfriend bool operator <(const Point &x,const Point &y){\n\t\treturn x.v<y.v;\n\t}\n}p[300100];\nstruct Query{\n\tint x1,x2,y,id;\n\tQuery(int a=0,int b=0,int c=0,int d=0){\n\t\tx1=a,x2=b,y=c,id=d;\n\t}\n\tfriend bool operator <(const Query &x,const Query &y){\n\t\treturn x.y<y.y;\n\t}\n}q[600100];\nint lowbit(int x){\n\treturn x&-x;\n}\nvoid add(int x,int val){\n\twhile(x<=n)BIT[x]+=val,x+=lowbit(x);\n}\nint ask(int x){\n\tint sum=0;\n\twhile(x)sum+=BIT[x],x-=lowbit(x);\n\treturn sum;\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m),memset(head,-1,sizeof(head));\n\tfor(int i=1,x,y;i<n;i++)scanf(\"%lld%lld\",&x,&y),ae(x,y),ae(y,x);\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++)p[i]=Point(rev[i],dep[i],sz[i]-1);\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tres[i]+=(sz[x]-1)*min(dep[x],y);\n\t\tq[(i<<1)-1]=Query(rev[x],rev[x]+sz[x]-1,dep[x],-i);\n\t\tq[(i<<1)]=Query(rev[x],rev[x]+sz[x]-1,dep[x]+y,i);\n\t}\n\tsort(p+1,p+n+1);\n\tsort(q+1,q+(m*2)+1);\n\tfor(int i=1,j=1;i<=(m*2);i++){\n\t\twhile(j<=n&&p[j].v<=q[i].y)add(p[j].u,p[j].w),j++;\n\t\tif(q[i].id>0)res[q[i].id]+=ask(q[i].x2)-ask(q[i].x1);\n\t\telse res[q[i].id]-=ask(q[i].x2)-ask(q[i].x1);\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%lld\\n\",res[i]);\n\treturn 0;\n} \n```\n",
        "postTime": 1575171670,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u597d\u50cf\u6ca1\u4eba\u5199\u957f\u94fe\u5256\u5206\u7684\uff0c\u90a3\u4f5c\u4e3a\u521d\u5b66\u8005\u5c31\u6765\u5199\u4e00\u4e0b\u3002\u3002\n\n### \u9898\u89e3\n\n\u9996\u5148\u5f53 $b$ \u6bd4 $a$ \u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u65f6\uff0c\u8fd9\u4ef6\u4e8b\u5c31\u5f88 simple\u3002\n\n\u4f46\u5f53 $a$ \u6bd4 $b$ \u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u65f6\uff0c\u8fd9\u4ef6\u4e8b\u5c31\u5f88 exciting \u4e86\u3002\n\n\u8bbe $f_{u,k}=\\sum\\limits_{v\\in T(u)-\\{u\\}} [\\text{dis}(u,v)\\le k](siz_v-1)$ \u8868\u793a\u5bf9\u4e8e\u6240\u6709 $v$ \u6ee1\u8db3 $u$ \u6bd4 $v$ \u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u4e14 $v$ \u4e0e $u$ \u8c08\u7b11\u98ce\u751f\u65f6\u7684\u7b54\u6848\u3002\n\n\u5bb9\u6613\u53d1\u73b0\n\n$$ f_{u,k}=\\sum_{v\\in \\text{son}(u)} f_{v,k-1}+siz_v-1 $$\n\n\u7136\u540e\u8003\u8651\u957f\u94fe\u5256\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8282\u70b9 $u$ \u8981\u4ece $\\text{wson}_u$ \u8f6c\u79fb\u65f6\u76f4\u63a5\u5c06\u6570\u7ec4\u62f7\u8d1d\u8fc7\u53bb\uff0c\u5176\u5b83\u60c5\u51b5\u66b4\u529b\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u7684\u8bc1\u660e\u662f\u56e0\u4e3a\n\n$$ \\sum_u \\left( \\sum_{v\\in \\text{son}(u)} \\text{maxdep}_v - \\text{maxdep}_{\\text{wson}_u} \\right)=\\sum_u \\left( \\sum_{v\\in \\text{son}(u)} \\text{maxdep}_v - (\\text{maxdep}_u-1) \\right)=n $$\n\n\u4f46\u73b0\u5728\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u628a\u6570\u7ec4\u62f7\u8d1d\u8fc7\u53bb\uff0c\u56e0\u4e3a\u6211\u4eec\u52a0\u4e0a\u4e86\u4e00\u4e2a\u5e38\u91cf\u3002\u6253\u61d2\u60f0\u6807\u8bb0\u5373\u53ef\uff0c\u5e76\u5c06 $f_{u,0}$ \u51cf\u53bb\u61d2\u60f0\u6807\u8bb0\u4ee5\u64a4\u9500\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n)$\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n\ntypedef long long ll;\ninline ll max(ll a, ll b) { return a > b ? a : b; }\ninline ll min(ll a, ll b) { return a < b ? a : b; }\n\nconst int MAXN = 300005;\n\nint N, T; ll ans[MAXN];\nstruct node { int v, next; } E[MAXN << 1]; int head[MAXN], Elen;\nstruct query { int u, k; } q[MAXN];\nstruct vec { int v, next, id; } Q[MAXN]; int headQ[MAXN], Qlen;\nvoid add(int u, int v) { ++Elen, E[Elen].v = v, E[Elen].next = head[u], head[u] = Elen; }\nvoid addQ(int u, int v, int id) { ++Qlen, Q[Qlen].v = v, Q[Qlen].next = headQ[u], Q[Qlen].id = id, headQ[u] = Qlen; }\n\nint fa[MAXN], dep[MAXN], siz[MAXN], maxdep[MAXN], wson[MAXN], top[MAXN];\nvoid dfs1(int u, int ff) {\n    fa[u] = ff, dep[u] = dep[ff] + 1, siz[u] = 1;\n    for (int i = head[u]; i; i = E[i].next) if (E[i].v != ff) {\n        dfs1(E[i].v, u), siz[u] += siz[E[i].v];\n        if (maxdep[E[i].v] > maxdep[wson[u]]) wson[u] = E[i].v;\n    } maxdep[u] = maxdep[wson[u]] + 1;\n}\nvoid dfs2(int u, int ff, int tp) {\n    top[u] = tp; if (wson[u]) dfs2(wson[u], u, tp);\n    for (int i = head[u]; i; i = E[i].next) if (E[i].v != ff && E[i].v != wson[u]) dfs2(E[i].v, u, E[i].v);\n}\nll *dp[MAXN], tag[MAXN], buc[MAXN << 2], *id = buc;\nvoid dfs(int u, int ff) {\n    if (wson[u]) {\n        dp[wson[u]] = dp[u] + 1, dfs(wson[u], u);\n        dp[u][0] = 0, tag[u] = tag[wson[u]] + siz[wson[u]] - 1;\n    }\n    for (int i = head[u]; i; i = E[i].next) if (E[i].v != ff && E[i].v != wson[u]) {\n        dp[E[i].v] = id, id += maxdep[E[i].v], dfs(E[i].v, u), tag[u] += tag[E[i].v] + siz[E[i].v] - 1;\n        for (int j = 1; j <= maxdep[E[i].v]; ++j) dp[u][j] += dp[E[i].v][j - 1];\n    } dp[u][0] = -tag[u];\n    for (int i = headQ[u]; i; i = Q[i].next) ans[Q[i].id] = dp[u][min(q[Q[i].id].k, maxdep[u] - 1)] + tag[u];\n}\n\nint main() {\n    scanf(\"%d%d\", &N, &T); int i, u, v;\n    for (i = 1; i < N; ++i) scanf(\"%d%d\", &u, &v), add(u, v), add(v, u);\n    for (i = 1; i <= T; ++i) scanf(\"%d%d\", &q[i].u, &q[i].k), addQ(q[i].u, q[i].k, i);\n    dfs1(1, 0), dfs2(1, 0, 1);\n    dp[1] = id, id += maxdep[1], dfs(1, 0);\n    for (i = 1; i <= T; ++i) printf(\"%lld\\n\", ans[i] + (ll)min(dep[q[i].u] - 1, q[i].k) * (siz[q[i].u] - 1));\n    return 0;\n}\n```",
        "postTime": 1583942571,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "## \u4e00\u4e9b\u95f2\u8bdd\n\u8fd9\u9898\u65b9\u6cd5\u597d\u591a\u554aQAQ\uff0c\u79bb\u7ebf\u6709BIT\u3001\u957f\u94fe\u5256\u5206\uff0c\u5728\u7ebf\u6709\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4e3b\u5e2d\u6811\u7b49\u3002\n\u8981\u6211\u51fa\u9898\u7edd\u5bf9\u4e0d\u53ef\u80fd\u653e\u79bb\u7ebf\u8fc7\u3002\u3002\u3002\n\n# [\u65e0\u803b\u5730\u6302\u4e0a\u81ea\u5df1blog\u7684\u94fe\u63a5](https://www.cnblogs.com/cx233666/p/9721869.html)\n## \u9898\u610f\u7b80\u8ff0\n\u7b80\u5355\u7684\u770b\u4e00\u4e0b\u9898\u610f\uff0c\u5c31\u662f\u7ed9\u5b9a$a$\uff0c\u6c42\u4efb\u4f55\u4e00\u4e2a\u8ddd$a$\u8ddd\u79bb\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u7684$k$\u7684$b$\uff0c\u7136\u540e\u6c42\u4e00\u4e2a$c$\u4f7f\u5f97\u662f$a,b$\u7684\u540e\u4ee3\u3002\n## sol\n\u6211\u76f8\u4fe1\u4f60\u5df2\u7ecf\u770b\u51fa\u6765\u4e86\uff0c$abc$\u5728\u4e00\u6761\u76f4\u4e0a\u76f4\u4e0b\u7684\u94fe\u4e0a\uff0c\u4e0d\u8fc7\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u3002\u6211\u4eec\u8003\u8651\u5f53$b$\u662f$a$\u7684\u7956\u5148\u65f6\uff0c$a$\u5b50\u6811\u5185\u6240\u6709\u9664\u5b83\u81ea\u5df1\u4ee5\u5916\u7684\u70b9\u90fd\u53ef\u4ee5\u505a$c$\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u7edf\u8ba1\u3002\u5f53$a$\u662f$b$\u7684\u7956\u5148\u65f6\uff0c$b$\u5b50\u6811\u5185\u6240\u6709\u9664\u5b83\u4ee5\u5916\u7684\u70b9\u90fd\u53ef\u4ee5\u505a$c$\u3002\u90a3\u4e48\u6bcf\u4e2a\u8282\u70b9\u641e\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8fa3\u3002\u7136\u540e\u663e\u7136\u8fd9\u4e2a\u7a7a\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8fa3\u3002\n```\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define gt getchar()\n#define ll long long\n#define File(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\ninline int in()\n{\n    int k=0;char ch=gt;\n    while(ch<'-')ch=gt;\n    while(ch>'-')k=k*10+ch-'0',ch=gt;\n    return k;\n}\nconst int N=600005;\nstd::vector<int>Q[N],id[N];\nusing std::min;\nusing std::max;\nstruct node\n{\n    ll siz;int lc,rc;\n}t[N*30];\nint tot,opt;\nll query(int L,int R,int l,int r,int x)\n{\n    if(!x)return 0;\n    if(L<=l&&r<=R)return t[x].siz;\n    int mid=l+r>>1;ll res=0;\n    if(mid>=L)res+=query(L,R,l, mid ,t[x].lc);\n    if(mid< R)res+=query(L,R,mid+1,r,t[x].rc);\n    return res;\n}\nvoid upd(int l,int r,int pos,int &x,int v)\n{\n    if(!x)x=++tot;t[x].siz+=v;\n    if(l==r)return;\n    int mid=l+r>>1;\n    if(mid>=pos)upd(l,mid,pos,t[x].lc,v);\n    else upd(mid+1,r,pos,t[x].rc,v);\n}\nint merge(int u,int v,int l,int r)\n{\n    if(!u||!v)return u|v;\n    int mid=l+r>>1,x=++tot;\n    t[x].siz=t[u].siz+t[v].siz;\n    t[x].lc=merge(t[u].lc,t[v].lc,l, mid );\n    t[x].rc=merge(t[u].rc,t[v].rc,mid+1,r);\n    return x;\n}\nint siz[N],rt[N],a[N],b[N],fa[N],head[N],to[N],nxt[N],cnt,sz,dep[N];\nll ans[N];\ninline void add(int u,int v)\n{\n    to[++cnt]=v,nxt[cnt]=head[u],head[u]=cnt;\n    to[++cnt]=u,nxt[cnt]=head[v],head[v]=cnt;\n}\nvoid dfs(int u,int pa=0)\n{\n    dep[u]=dep[pa]+1;siz[u]=1;//printf(\"u=%d pa=%d\\n\",u,pa);\n    for(int i=head[u];i;i=nxt[i])\n        if(to[i]!=pa)\n            dfs(to[i],u),siz[u]+=siz[to[i]];\n    upd(1,sz,dep[u],rt[u],siz[u]-1);\n    if(pa)rt[pa]=merge(rt[pa],rt[u],1,sz);\n}\nint main()\n{\n    int n=in(),q=in();sz=n;\n    for(int i=1;i<n;++i)add(in(),in());\n    dfs(1);\n    for(int i=1;i<=q;++i)\n    {\n        int x=in(),y=in();\n        printf(\"%lld\\n\",query(dep[x]+1,dep[x]+y,1,n,rt[x])+1ll*(siz[x]-1)*min(dep[x]-1,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1538183023,
        "uid": 70788,
        "name": "Cgod",
        "ccfLevel": 0,
        "title": "\u7b2c\u4e8c\u9053\u7ebf\u6bb5\u6811\u5408\u5e76\u7eaa\u5ff5"
    },
    {
        "content": "\u4e3a\u8fd9\u9053\u9898\u63d0\u4f9b\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff0c\u590d\u6742\u5ea6O(nlognlogn)  \n\u6211\u4eec\u8003\u8651b\u70b9\u7684\u60c5\u51b5  \n\u9996\u5148\u8003\u8651b\u662fa\u7684\u7956\u5148\u5219\u6709$min(deep[a],k)*size[a-1]$\u79cd\u60c5\u51b5  \n\u8003\u8651b\u662fa\u7684\u513f\u5b50\uff0c\u5219\u60c5\u51b5\u603b\u6570\u662f\u79bba\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u5b50\u8282\u70b9size-1\u7684\u548c\uff0c\u76f4\u63a5\u6c42\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8003\u8651\u7528\u603b\u7684size\u548c\u51cf\u53bb\u8ddd\u79bb\u5927\u4e8ek\u7684  \n\u57fa\u4e8e\u6811bfs\u5e8f\u7684\u6027\u8d28\uff0c\u540c\u4e00\u6df1\u5ea6\u7684\u70b9\u90fd\u662f\u8fde\u7eed\u533a\u95f4\uff0c\u4e14\u4e00\u4e2a\u70b9\u6240\u6709\u6df1\u5ea6\u76f8\u540c\u7684\u5b50\u8282\u70b9\u7f16\u53f7\u4e5f\u90fd\u662f\u8fde\u7eed\u533a\u95f4\u6211\u4eec\u8003\u8651\u6765\u7ef4\u62a4\u8fd9\u4e00\u6bb5\u7684\u548c  \n\u6211\u4eec\u8003\u8651\u4e8c\u5206\u5bfb\u627e\u8fd9\u4e2a\u6811\u8fd9\u4e00\u6df1\u5ea6\u7684\u70b9\u5728\u6574\u4e2a\u533a\u95f4\u5185\u7684\u8d77\u59cb\u4e0e\u7ec8\u70b9\uff0ccheck\u65f6\u5c06\u4e2d\u95f4\u70b9\u627e\u5230\uff0c\u7136\u540e\u8df3\u5230\u4e0e\u5f53\u524d\u8be2\u95ee\u70b9\u6df1\u5ea6\u76f8\u540c\u7684\u7956\u5148\uff0c\u5982\u679c\u91cd\u5408\uff0c\u5c31\u8bb0\u5f55\u5e76\u6839\u636e\u60c5\u51b5\u8c03\u6574l\u4e0er\uff0c\u5426\u5219\u5982\u679c\u8df3\u5230\u7684\u70b9bfs\u5e8f\u5c0f\u4e8e\u8be2\u95ee\u70b9bfs\u5e8f\uff0c\u5c31\u6536\u7f29\u81f3\u53f3\u533a\u95f4\uff0c\u5927\u4e8e\u5219\u6536\u7f29\u81f3\u53f3\u533a\u95f4  \n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nint n,q,f[300005][21],h[300005],deep[300005],cnt,seg[300005],rev[300005],qs[300005],head,tail,size[300005],ls[300005],rs[300005],sign,maxdeep;\nlong long tree[300005],ans,sums[300005],sums2[300005];\nbool vis[300005];\nstruct Edge\n{\n\tint to,next;\n}w[600005];\nvoid dfs(int x,int fa)\n{\n\tf[x][0]=fa;\n\tdeep[x]=deep[fa]+1;\n\tmaxdeep=max(maxdeep,deep[x]);\n\tsize[x]=1;\n\tfor(int i=h[x];i;i=w[i].next)\n\t{\n\t\tint to=w[i].to;\n\t\tif(to==fa) continue;\n\t\tdfs(to,x);\n\t\tsize[x]+=size[to];\n\t\tsums[x]+=sums[to];\n\t}\n\tsums[x]+=size[x]-1;\n}\nvoid bfs(int x)\n{\n\tqs[++tail]=x;\n\thead=1;\n\tvis[x]=1;\n\tls[1]=1,rs[1]=1;\n\tseg[x]=++sign;\n\trev[sign]=x;\n\twhile(head<=tail)\n\t{\n\t\tint u=qs[head++];\n\t\tfor(int i=h[u];i;i=w[i].next)\n\t\t{\n\t\t\tint to=w[i].to;\n\t\t\tif(vis[to]) continue;\n\t\t\tvis[to]=1;\n\t\t\tqs[++tail]=to;\n\t\t\tseg[to]=++sign;\n\t\t\trev[sign]=to;\n\t\t\tls[deep[to]]=min(ls[deep[to]],sign);\n\t\t\trs[deep[to]]=max(rs[deep[to]],sign);\n\t\t}\n\t}\n}\nvoid pre()\n{\n\tfor(int j=1;(1<<j)<=n;j++)\n\tfor(int i=1;i<=n;i++)\n\tif(f[i][j-1]!=-1) f[i][j]=f[f[i][j-1]][j-1];\n}\nint main()\n{\n\tmemset(f,-1,sizeof(f));\n\tmemset(ls,0x3f,sizeof(ls));\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tw[++cnt]=(Edge){y,h[x]},h[x]=cnt;\n\t\tw[++cnt]=(Edge){x,h[y]},h[y]=cnt;\n\t}\n\tdfs(1,0);\n\tbfs(1);\n\tpre();\n\tfor(int i=1;i<=n;i++) sums2[i]=sums2[i-1]+sums[rev[i]];\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tans=0;\n\t\tint x,k;\n\t\tscanf(\"%d%d\",&x,&k);\n\t\tans+=(long long)min(deep[x]-1,k)*(size[x]-1);\n\t\tans+=sums[x]-(size[x]-1);\n\t\tif(deep[x]+k+1<=maxdeep)\n\t\t{\n\t\t\tint l=ls[deep[x]+k+1],r=rs[deep[x]+k+1];\n\t\t\tint ans1=n+1,ans2=0;\n\t\t\twhile(l<=r)\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tint now=rev[mid];\n\t\t\t\tfor(int j=log(deep[now])/log(2);j>=0;j--)\n\t\t\t\t{\n\t\t\t\t\tif(deep[now]-(1<<j)>=deep[x]) now=f[now][j];\n\t\t\t\t}\n\t\t\t\tif(now==x) ans1=mid,r=mid-1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(seg[now]<seg[x]) l=mid+1;\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl=ls[deep[x]+k+1],r=rs[deep[x]+k+1];\n\t\t\twhile(l<=r)\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tint now=rev[mid];\n\t\t\t\tfor(int j=log(deep[now])/log(2);j>=0;j--)\n\t\t\t\t{\n\t\t\t\t\tif(deep[now]-(1<<j)>=deep[x]) now=f[now][j];\n\t\t\t\t}\n\t\t\t\tif(now==x) ans2=mid,l=mid+1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(seg[now]<seg[x]) l=mid+1;\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ans1<=ans2) ans-=sums2[ans2]-sums2[ans1-1];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n} \n```",
        "postTime": 1545310797,
        "uid": 78488,
        "name": "b2019dy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "### \u4e3b\u5e2d\u6811+dfs\u5e8f\n\n\u628a\u6df1\u5ea6\u770b\u6210\u4e0b\u6807\uff0c\u6309dfs\u5e8f\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5efa\u7acb\u4e3b\u5e2d\u6811\uff0c\u6211\u4eec\u5e0c\u671b\u67e5\u8be2\u4e00\u4e2a\u5b50\u6811\u4e2d\uff0c\u6df1\u5ea6\u5728deep[p]+1--deep[p]+k\u7684\u70b9\u7684\u6743\u503c\u548c\uff0c\u7531\u4e8e\u5728dfn\u5e8f\u4e2d\uff0c\u4e00\u4e2a\u5b50\u6811\u7684\u7f16\u53f7\u8fde\u7eed\uff0c\u90a3\u4e48\u76f4\u63a5\u67e5\u8be2\u5b50\u6811\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u6743\u503c\u5dee\u5373\u53ef\uff0c\u5bf9\u4e8e\u5728p\u70b9\u4ee5\u4e0a\u7684\u7b54\u6848\u7edf\u8ba1\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u4e58\u6cd5\u539f\u7406\u5373\u53ef\uff0c\u5728\u6b64\u4e0d\u4f5c\u8d58\u8ff0\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <cmath>\n#define LL long long\n#define inf 1e9\n#define mod 989381\nusing namespace std; \n/*struct io{\n    char op[1 << 26], *s;\n    io{fread(s=op,1,s<<26,stdin);} \n    inline int read(){\n        int u = 0;\n        while(*s < 48) s++;\n        while(*s > 32) u = (u << 1) + (u << 3) + *s++ -48;\n        return u;\n    }\n}ip;\n#define read ip.read*/\n#ifndef read\ninline int read(){\n    int u=0;char c=getchar();\n    while(!isdigit(c))c=getchar();\n    while( isdigit(c))u=u*10+c-'0',c=getchar();\n    return u;\n}\n#endif\nint n,m,maxdep=1;\nvector<int>G[300300];\nint dep[300300],sz[300300],fa[300300];\nvoid dfs1(int k){\n    sz[k]=1;\n    for(int i=0;i<G[k].size();i++){\n        int kk=G[k][i];\n        if(dep[kk])continue;\n        dep[kk]=dep[k]+1;\n        maxdep=max(maxdep,dep[kk]);\n        fa[kk]=k;\n        dfs1(kk);\n        sz[k]+=sz[kk];\n    }\n}\nint sos;\nint dfn[300300];\nint root[300300];\nstruct node{\n    int ls,rs;\n    LL ans;\n}T[300300*20];\nint coc;\nvoid insert(int &p,int l,int r,LL v,int dp){\n    T[++coc]=T[p];p=coc;\n    T[p].ans+=v;\n    if(l==r)return;\n    int mid=l+r>>1;\n    if(dp<=mid)insert(T[p].ls,l,mid,v,dp);\n    else insert(T[p].rs,mid+1,r,v,dp);\n}\nLL query(int p1,int p2,int l,int r,int dpl,int dpr){\n    if(l==dpl&&r==dpr)return T[p2].ans-T[p1].ans;\n    int mid=l+r>>1;\n    if(dpr<=mid)return query(T[p1].ls,T[p2].ls,l,mid,dpl,dpr);\n    else if(dpl>mid)return query(T[p1].rs,T[p2].rs,mid+1,r,dpl,dpr);\n    else return     query(T[p1].ls,T[p2].ls,l,mid,dpl,mid)\n                +query(T[p1].rs,T[p2].rs,mid+1,r,mid+1,dpr);\n}\nvoid dfs2(int k){\n    dfn[k]=++sos;\n    root[sos]=root[sos-1];\n    insert(root[sos],1,maxdep,(LL)sz[k]-1,dep[k]);\n    for(int i=0;i<G[k].size();i++){\n        int kk=G[k][i];\n        if(fa[k]==kk)continue;\n        dfs2(kk);\n    }\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<n;i++){\n        int x=read(),y=read();\n        G[x].push_back(y);\n        G[y].push_back(x);\n    }\n    dep[1]=1;dfs1(1);\n    dfs2(1);\n    for(int i=1;i<=m;i++){\n        int p=read(),k=read();\n        LL ans=((LL)sz[p]-1)*(min(k,dep[p]-1));\n        int l=dfn[p]-1,r=dfn[p]+sz[p]-1;\n        if(dep[p]==maxdep){printf(\"0\\n\");continue;}\n        ans+=query(root[l],root[r],1,maxdep,dep[p]+1,min(maxdep,dep[p]+k));\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1507285705,
        "uid": 29674,
        "name": "Anoxiacxy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "# \u7ebf\u6bb5\u6811\u5408\u5e76\u53ea\u625312\u5206\u53ef\u592a\u96be\u4e86TvT\n\u770b\u6765\u597d\u591a\u7ea2\u540d\u5de8\u4f6c\u90fd\u8ddf\u6211\u4e00\u6837\u662f\u4ece12\u5206\u6539\u8fc7\u6765\u7684\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\u5408\u5e76u\u70b9\u7684\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u628a\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\u4fe1\u606f\u7ed9\u6539\u4e86\uff0c\u90a3\u672c\u849f\u84bb\u5c31\u4e3b\u8981\u8bf4\u8bf4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\u7406\u89e3\u3002\n## sol\n\u9996\u5148\u770b\u5982\u679cb\u548ca\u6ca1\u6709\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0ca\u548cb\u80af\u5b9a\u4e0d\u80fd\u540c\u65f6\u662fc\u7684\u7956\u5148\uff0c\u4e0d\u6210\u7acb\uff1b\n\n\u5982\u679cb\u662fa\u7684\u7956\u5148\uff0c\u65b9\u6848\u6570\u5c31\u662f$\\min(K,depth[a]-1)*(size[a]-1)$;\n\n\u5982\u679cb\u662fa\u7684\u540e\u4ee3\uff0c\u65b9\u6848\u6570\u5c31\u662f\u6df1\u5ea6\u5728depth[a]+1\u5230depth[a]+K\u4e4b\u95f4\u6bcf\u4e2ab\u7684(size[b]-1)\u4e4b\u548c\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u505a\uff0c\u7ebf\u6bb5\u6811\u4e0b\u6807\u8868\u793a\u6df1\u5ea6\uff0c\u8bb0\u533a\u95f4\u7684(size-1)\u4e4b\u548c\uff0c\u6c42\u7ebf\u6bb5\u6811\u5728(depth[a]+1,depth[a]+K)\u7684\u533a\u95f4\u548c\u3002\n\n\u4f46\u662fmerge\u51fd\u6570\u5982\u679c\u8fd9\u4e48\u5199\u7684\u8bdd\uff08\u6ca1\u65b0\u5f00\u8282\u70b9\uff0c\u76f4\u63a5\u66f4\u65b0x\u7684\u4fe1\u606f\uff09\u5c31\u4f1a\u83b7\u5f9712\u5206\u7684\u597d\u6210\u7ee9TvT\uff1a\n```cpp\nint merge(int x,int y,int tl,int tr) {\n\tif(x==0||y==0) return x|y;//\u6709\u7a7a\u8282\u70b9\u3002\n\tif(tl==tr) {\n\t\ttree[x].num=tree[x].num+tree[y].num;\n\t\treturn x;\n\t}![](lf[wpepwkf)\n\tint mid=(tl+tr)/2;\n\ttree[x].ls=merge(tree[x].ls,tree[y].ls,tl,mid);\n\ttree[x].rs=merge(tree[x].rs,tree[y].rs,mid+1,tr);\n\tup(x);//\u4e0a\u4f20\u7ef4\u62a4\u503c\u3002\n\treturn x;\n}\n```\n\n\u53ea\u6709\u65b0\u5f00\u4e86\u7ebf\u6bb5\u6811\u8282\u70b9\u624d\u80fdA\uff1a\n```cpp\nint merge(int x,int y,int tl,int tr) {\n\tif(x==0||y==0) return x|y;//\u6709\u7a7a\u8282\u70b9\u3002\n\t\n\tif(tl==tr) {\n\t\tint now=++tot;\n\t\ttree[now].num=tree[x].num+tree[y].num;\n\t\treturn now;\n\t}\n\tint mid=(tl+tr)/2,now=++tot;//\u4e3a\u4e86\u4e0d\u6539\u53d8\u513f\u5b50\u7ebf\u6bb5\u6811\u7684\u503c\uff0c\u5fc5\u987b\u65b0\u5efa\u8282\u70b9\u3002\n\ttree[now].ls=merge(tree[x].ls,tree[y].ls,tl,mid);\n\ttree[now].rs=merge(tree[x].rs,tree[y].rs,mid+1,tr);\n\tup(now);\n\treturn now;\n}\n```\n\u6240\u4ee5\u672c\u7bc7\u9898\u89e3\u8be6\u7ec6\u8bb2\u4e00\u4e0b\u4ea7\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u539f\u56e0\u3002\n\n## \u7ebf\u6bb5\u6811\u5408\u5e76\n![iakioi](http://m.qpic.cn/psb?/V11W0lxB1YaNik/i*OeVAlltmRdTdns2Bpgav1a0UN2BNxK*xomME69ATk!/b/dDYBAAAAAAAA&bo=wAMcAgAAAAADB*8!&rf=viewer_4&t=5)\n\u8981\u5408\u5e76x\u548cy\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u76f4\u63a5\u5408\u5e76\u7684\u8bdd\uff0cx\u4e0a\u76841\u53f7\u70b9\u53f3\u513f\u5b50\u76f4\u63a5\u8d4b\u6210y\u4e0a\u76842\u53f7\u70b9\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\uff0cx\u518d\u548c\u53e6\u4e00\u9897\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6709\u53ef\u80fd\u6539\u53d82\u53f7\u70b9\u4ee5\u53ca2\u53f7\u70b9\u5b50\u6811\u7684\u4fe1\u606f\uff0cy\u7684\u4fe1\u606f\u5c31\u88ab\u4e71\u6539\u4e86\u3002ovo\n\n\u5982\u679c\u6bcf\u6b21\u8981\u5408\u5e76\u7684\u65f6\u5019\u90fd\u7ed9x\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\uff0cy\u7684\u4fe1\u606f\u5c31\u4e0d\u4f1a\u88ab\u4e71\u6539\u4e86\uff0c\u6bcf\u4e2a\u70b9\u5408\u5e76\u4e4b\u540e\u513f\u5b50\u7684\u4fe1\u606f\u8fd8\u662f\u51c6\u786e\u7684\u3002$*v*$\n\n\u4f46\u662fx\u7ebf\u6bb5\u6811\u9012\u5f52\u5230\u67d0\u4e2a\u7a7a\u5b50\u6811\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u8981\u628ay\u4e0a\u5bf9\u5e94\u7684\u5b50\u6811\u62ff\u8fc7\u6765\uff0c\u8fd9\u53ef\u4ee5\u76f8\u5f53\u4e8e\u662f\u6253\u6807\u8bb0\uff0c\u6682\u65f6\u7528\u4e86y\u7684\u5b50\u6811\u3002\u6b63\u7ecf\u5408\u5e76\u7684\u65f6\u5019\u80af\u5b9a\u662f\u4e0d\u80fd\u6539\u53d8y\u7684\u4fe1\u606f\u4e86\u3002\n\n\u8fd9\u6837\u5c31\u80fdA\u6389\u8fd9\u9053\u9898\u4e86\u2026\u2026\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mv=3e5,ml=19;\n\nint n,q;\nstruct node{\n\tint ls,rs;\n\tlong long num;//\u6bcf\u4e2a\u70b9\u7684siz-1\u4e4b\u548c\u3002\n}tree[2*mv*ml+3];int tot=0;\ninline void up(int x) {\n\ttree[x].num=tree[tree[x].ls].num+tree[tree[x].rs].num;\n}\nvoid add(int x,int tl,int tr,int w,int ad) {\n\tif(tl==tr) {\n\t\ttree[x].num+=ad;\n\t\treturn;\n\t}\n\t\n\tint mid=(tl+tr)/2;\n\tif(w<=mid) {\n\t\tif(!tree[x].ls) tree[x].ls=++tot;\n\t\tadd(tree[x].ls,tl,mid,w,ad);\n\t}\n\tif(w>mid) {\n\t\tif(!tree[x].rs) tree[x].rs=++tot;\n\t\tadd(tree[x].rs,mid+1,tr,w,ad);\n\t}\n\tup(x);\n}\nlong long askS(int x,int tl,int tr,int l,int r) {\n\tif(!x) return 0;\n\tif(tl==l&&r==tr) return tree[x].num;\n\t\n\tint mid=(tl+tr)/2;long long ans=0;\n\t//\u6ca1\u5efa\u51fa\u6765\u7684\u5730\u65b9\u503c\u80af\u5b9a\u4e3a0\uff0c\u4e0d\u7528\u9012\u5f52\u3002\n\tif(l<=mid&&tree[x].ls) \n\t\tans+=askS(tree[x].ls,tl,mid,l,min(mid,r));\n\tif(r>mid&&tree[x].rs) \n\t\tans+=askS(tree[x].rs,mid+1,tr,max(l,mid+1),r);\n\treturn ans;\n}\nint merge(int x,int y,int tl,int tr) {\n\tif(x==0||y==0) return x|y;//\u6709\u7a7a\u7684\u5219\u8fd4\u56de\u975e\u7a7a\u7684\u3002\n\t\n\tif(tl==tr) {\n\t\tint now=++tot;\n\t\ttree[now].num=tree[x].num+tree[y].num;\n\t\treturn now;\n\t}\n\tint mid=(tl+tr)/2,now=++tot;//\u4e3a\u4e86\u4e0d\u6539\u53d8\u513f\u5b50\u7ebf\u6bb5\u6811\u7684\u503c\uff0c\u5fc5\u987b\u65b0\u5efa\u8282\u70b9\u3002\n\ttree[now].ls=merge(tree[x].ls,tree[y].ls,tl,mid);\n\ttree[now].rs=merge(tree[x].rs,tree[y].rs,mid+1,tr);\n\tup(now);\n\treturn now;\n}\n\nvector<int>po[mv+3];\nint fa[mv+3],h[mv+3],siz[mv+3],rtw[mv+3];\n//\u7236\u4eb2\u3001\u6df1\u5ea6\u3001\u5b50\u6811\u5927\u5c0f\u3001\u8be5\u70b9\u5bf9\u5e94\u7ebf\u6bb5\u6811\u6811\u6839\u7684\u7f16\u53f7\u3002\nvoid dfs(int u) {\n\tsiz[u]=1;\n\tfor(int j=0;j<(int)po[u].size();j++) {\n\t\tint v=po[u][j];\n\t\tif(fa[u]==v) continue;\n\t\t\n\t\tfa[v]=u;\n\t\th[v]=h[u]+1;\n\t\tdfs(v);\n\t\tsiz[u]+=siz[v];\n\t}\n\t\n\trtw[u]=++tot;\n\tadd(rtw[u],1,n,h[u],siz[u]-1);//\u5728\u7ebf\u6bb5\u6811\u6df1\u5ea6\u4e3ah\u5904\u52a0\u7b54\u6848\u3002\n\tfor(int j=0;j<(int)po[u].size();j++) {\n\t\tint v=po[u][j];\n\t\tif(fa[u]==v) continue;\n\t\t\n\t\trtw[u]=merge(rtw[u],rtw[v],1,n);//\u5408\u5e76\u3002\n\t}\n}\n\nint main() {\n\tcin>>n>>q;\n\tint u,v;\n\tfor(int e=1;e<n;e++) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tpo[u].push_back(v);\n\t\tpo[v].push_back(u);\n\t}\n\th[1]=1;//\u6df1\u5ea6\u4ece1\u5f00\u59cb\u8bb0\u3002\n\tdfs(1);\n\t\n\tint K;\n\tfor(int z=1;z<=q;z++) {\n\t\tscanf(\"%d%d\",&u,&K);\n\t\tlong long ans=1ll*min(h[u]-1,K)*(siz[u]-1);//\u4e0a\u65b9\u8c08\u7b11\u98ce\u751f\u3002\n\t\tans+=askS(rtw[u],1,n,h[u]+1,h[u]+K);//\u4e0b\u65b9\u8c08\u7b11\u98ce\u751f\u3002\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1576586910,
        "uid": 117972,
        "name": "\u4ece\u849f\u84bb\u5230\u5c0f\u7287",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6709 $m$ \u7ec4\u8be2\u95ee  \n\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $a,k$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u4e09\u5143\u7ec4 $(a,b,c)$\uff0c\u6ee1\u8db3 $a,b$ \u90fd\u662f $c$ \u7684\u7956\u5148\uff0c\u5e76\u4e14 $a,b$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $k$\n\n\u521a\u5f00\u59cb\u6ca1\u6709\u601d\u8def\uff0c\u770b\u4e86\u9898\u89e3\u7684\u5206\u7c7b\u8ba8\u8bba\u540e\u53d1\u73b0\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u5408\u5e76\n\n### \u89e3\u9898\u601d\u8def\n\u9996\u5148\uff0c\u5b9a\u4e49 $d[x]$ \u4e3a\u70b9 $x$ \u7684\u6df1\u5ea6\uff08\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a $1$\uff09  \n$s[x]$ \u4e3a\u70b9 $x$ \u7684\u5b50\u6811\u5927\u5c0f\uff08\u5305\u62ec $x$\uff09\n\u8003\u8651\u4e24\u79cd\u60c5\u51b5  \n1. $b$ \u662f $a$ \u7684\u7956\u5148\uff1a$b$ \u5c31\u5fc5\u987b\u5728 $a$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u53ef\u80fd\u65b9\u6848\u6570\u5c31\u4e3a $\\min (d[a]-1,k)$\n2.  $b$ \u5728 $a$ \u7684\u5b50\u6811\u4e2d\uff1a\u65b9\u6848\u6570\u5c31\u662f $\\sum\\limits_{d[x] \\in [d[a]+1,d[a]+k]} s[x]-1$\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684 $x$ \u5fc5\u987b\u5728 $a$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u6765\u5b9e\u73b0\u64cd\u4f5c2\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u4e24\u65b9\u6848\u6570\u4e4b\u548c\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst long long Maxn=300000+10,inf=0x3f3f3f3f;\nconst long long Maxm=6000000+10;\nlong long d[Maxn],s[Maxn];\nlong long nxt[Maxn<<1],to[Maxn<<1];\nlong long sum[Maxm],ls[Maxm],rs[Maxm];\nlong long root[Maxn],head[Maxn];\nlong long n,m,idcnt,edgecnt=1;\ninline void add(long long x,long long y)\n{\n\t++edgecnt;\n\tnxt[edgecnt]=head[x];\n\tto[edgecnt]=y;\n\thead[x]=edgecnt;\n}\ninline long long read()\n{\n\tlong long s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\ninline void push_up(long long x)\n{\n\tsum[x]=sum[ls[x]]+sum[rs[x]];\n}\nvoid modify(long long &x,long long l,long long r,long long pos,long long v)\n{\n\tif(!x)x=++idcnt;\n\tif(l==r)\n\t{\n\t\tsum[x]+=v;\n\t\treturn;\n\t}\n\tlong long mid=(l+r)>>1;\n\tif(pos<=mid)modify(ls[x],l,mid,pos,v);\n\telse modify(rs[x],mid+1,r,pos,v);\n\tpush_up(x);\n}\nlong long merge(long long x,long long y)\n{\n\tif(!x || !y)return x|y;\n\tlong long cur=++idcnt;\n\tsum[cur]=sum[x]+sum[y];\n\tls[cur]=merge(ls[x],ls[y]);\n\trs[cur]=merge(rs[x],rs[y]);\n\treturn cur;\n}\nlong long query(long long k,long long l,long long r,long long x,long long y)\n{\n\tif(x<=l && r<=y)return sum[k];\n\tlong long mid=(l+r)>>1,ret=0;\n\tif(x<=mid)ret=query(ls[k],l,mid,x,y);\n\tif(mid<y)ret+=query(rs[k],mid+1,r,x,y);\n\treturn ret;\n}\nvoid dfs(long long x,long long fa)\n{\n\td[x]=d[fa]+1,s[x]=1;\n\tfor(long long i=head[x];i;i=nxt[i])\n\t{\n\t\tlong long y=to[i];\n\t\tif(y==fa)continue;\n\t\tdfs(y,x),s[x]+=s[y];\n\t\troot[x]=merge(root[x],root[y]);\n\t}\n\tmodify(root[x],1,n,d[x],s[x]-1);\n}\nint main()\n{\n//\tfreopen(\"in.txt\",\"r\",stdin);\n\tn=read(),m=read();\n\tfor(long long i=1;i<n;++i)\n\t{\n\t\tlong long x=read(),y=read();\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs(1,0);\n\twhile(m--)\n\t{\n\t\tlong long x=read(),k=read();\n\t\tlong long ans=min(k,d[x]-1)*(s[x]-1);\n\t\tans+=query(root[x],1,n,d[x]+1,min(n,d[x]+k));\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1592787197,
        "uid": 120362,
        "name": "Priori_Incantatem",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u66f4\u4e3a\u5389\u5bb3\u3011"
    },
    {
        "content": "[\u6b22\u8fce\u8bbf\u95ee\u6211\u7684 Blog](https://zcdhj.org)\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u56e0\u4e3a\u8981\u6c42\u4e09\u5143\u7ec4 $(a,b,c)$ \u4e2d $a,b$ \u90fd\u662f $c$ \u7684\u7956\u5148\uff0c\u6240\u4ee5\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\n\n- $b$ \u662f $a$ \u7684\u7956\u5148\n\n  \u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u7edf\u8ba1\u5c31\u597d\u4e86\uff0c\u7b54\u6848\u4e3a $\\min\\{depth(a)-1,k\\}*(size(a)-1)$ \u5176\u4e2d $depth(a)$ \u4e3a $a$ \u7684\u6df1\u5ea6\uff0c$size(a)$ \u4e3a\u5b50\u6811\u5927\u5c0f\n\n- $a$ \u662f $b$ \u7684\u7956\u5148\n\n  \u968f\u4fbf\u9009\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684 $b$\uff0c\u7136\u540e $b$ \u5b50\u6811\u4e2d\u4efb\u9009\u4e00\u4e2a $c$ \u90fd\u80fd\u6ee1\u8db3\u7b54\u6848\u3002\u7b54\u6848\u4e3a $\\sum\\limits_{depth(a)+k\u2265depth(b)} size(b)-1$\u3002\u8981\u8981\u8ba1\u7b97\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u68f5\u4ee5\u6df1\u5ea6\u4e3a\u7f16\u53f7\uff0c\u4ee5 $size(x)-1$ \u4e3a\u6743\u503c\u7684\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u5c06\u5b50\u6811\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0a\u6765\u3002\n\n\u6ce8\u610f\u8981\u5f00 `long long`\u3002\n\n\u7761\u89c9\u524d\u5199\u7684 wa \u62108\u5206\uff1f\uff1f\u56de\u6765\u91cd\u6784\u4e00\u904d\u5c31\u8fc7\u4e86\uff1f\uff1f\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\ntypedef long long LL;\n#define int LL\n\nconst int MAXN = 3e5;\n\nint n, m, edge;\nint size[MAXN | 1], depth[MAXN | 1], firstE[MAXN << 1];\n\nstruct Edge { int to, nxt; Edge() {} Edge(int x, int y) : to(x), nxt(y) {} } e[MAXN << 1];\n\nstruct Segtree {\n\tint sumv;\n\tSegtree *ch[2];\n\tSegtree() : sumv(0) { ch[0] = ch[1] = NULL; }\n\tSegtree(Segtree *ch0, Segtree *ch1, int _val) : sumv(_val) { ch[0] = ch0; ch[1] = ch1; }\n} *root[MAXN << 1];\n\ninline int read() {\n\tregister int x = 0;\n\tregister char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n\treturn x;\n}\n\ninline void addEdge(int x, int y) { e[++edge] = Edge(y, firstE[x]); firstE[x] = edge; }\n\ninline void pushup(Segtree *o) { o -> sumv = (o -> ch[0] == NULL ? 0 : o -> ch[0] -> sumv) + (o -> ch[1] == NULL ? 0 : o -> ch[1] -> sumv); }\n\nvoid insert(Segtree *&o, int pos, int val, int l = 1, int r = n) {\n    if(o == NULL) o = new Segtree;\n    if(l == r) { o -> sumv += val; return; }\n    int mid = (l + r) >> 1;\n    pos <= mid ? insert(o -> ch[0], pos, val, l, mid) : insert(o -> ch[1], pos, val, mid + 1, r);\n    pushup(o);\n}\n\nint query(Segtree *o, int ql, int qr, int l = 1, int r = n) {\n    if(o == NULL) return 0;\n    if(ql <= l && r <= qr) return o -> sumv;\n    int res = 0, mid = (l + r) >> 1;\n    if(ql <= mid) res = query(o -> ch[0], ql, qr, l, mid);\n    if(mid < qr) res += query(o -> ch[1], ql, qr, mid + 1, r);\n    return res;\n}\n\nSegtree *merge(Segtree *x, Segtree *y, int l = 1, int r = n) {\n    if(x == NULL) return y;\n    if(y == NULL) return x;\n    if(l == r) return new Segtree(NULL, NULL, x -> sumv + y -> sumv);\n    int mid = (l + r) >> 1;\n    return new Segtree(merge(x -> ch[0], y -> ch[0], l, mid), merge(x -> ch[1], y -> ch[1], mid + 1, r), x -> sumv + y -> sumv);\n}\n\nvoid dfs(int x, int fa) {\n\tsize[x] = 1; depth[x] = depth[fa] + 1;\n\tfor(int k = firstE[x], to; k; k = e[k].nxt) {\n\t\tto = e[k].to;\n\t\tif(to == fa) continue;\n\t\tdfs(to, x);\n\t\tsize[x] += size[to]; root[x] = merge(root[x], root[to]);\n\t}\n\tinsert(root[x], depth[x], size[x] - 1);\n}\n\nsigned main() {\n\tn = read();\n\tm = read();\n\tfor(int i = 1, u, v; i < n; ++i) { u = read(); v = read(); addEdge(u, v); addEdge(v, u); }\n\tdfs(1, 0);\n\twhile(m--) { int p = read(), k = read(); printf(\"%lld\\n\", std::min(depth[p] - 1, k) * (size[p] - 1) + query(root[p], depth[p] + 1, depth[p] + k)); }\n\treturn 0;\n}\n```\n\n",
        "postTime": 1543580197,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u65f6\u5149\u4e0d\u5f85\uff0c\u4ed6\u771f\u7684\u8001\u4e86/\u53f9\u6c14\n\n\u4e3a\u4e86\u611f\u8c22\u8fd9\u4f4d\u548c\u853c\u8001\u4eba\uff0c\n\n\u6211\u51b3\u5b9a\u53d1\u4e00\u6ce2\u9898\u89e3/\u4e25\u8083\u8138\n\n\u9996\u5148\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff0c\u6613\u77e5\u6211\u4eec\u8981\u6c42\u7684\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6709\u5e8f\u4e09\u5143\u7ec4\uff08a,b,c)\u7684\u4e2a\u6570\u3002\n\n\u7531\u6761\u4ef61\u53ef\u77e5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0ca\u4e3a\u5b9a\u70b9\uff0c\u5373\u4e3ap\u53f7\u8282\u70b9\uff1b\u7531\u6761\u4ef62\u53ef\u77e5\uff0ca\u548cb\u90fd\u662fc\u7684\u7956\u5148\uff1b\u7531\u6761\u4ef63\u53ef\u77e5\uff0ca\u4e0eb\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ek\u3002\n\n\u7136\u800c\u5bf9\u4e8ea\u548cb\u7684\u8840\u7f18\u5173\u7cfb\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff08\u5212\u91cd\u70b9\n\n//$P.S:$\u4ee5\u4e0b$dep[]$\u4e3a\u8282\u70b9\u6df1\u5ea6\uff0c$dfn[]$\u4e3a\u65f6\u95f4\u6233,$siz[]$\u4e3a\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n\n\u5f53b\u662fa\u7684\u7956\u5148\u65f6\u9700\u6ee1\u8db3\uff1a\n\n$$dfn[a]<dfn[c]<dfn[a]+siz[a]$$\n\n$$dep[a]-k\u2264dep[b]<dep[a]<dep[c]$$\n\n\u56e0\u4e3aa\u4e3a\u5b9a\u70b9\uff0c\u6240\u4ee5c\u53ef\u4ee5\u4e3a\u4ee5a\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u4efb\u610f\u4e00\u70b9\uff0cb\u53ef\u4ee5\u4e3a\u8ddd\u79bba\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u94fe\u4e0a\u7684\u4efb\u610f\u4e00\u70b9\uff08\u6ce8\u610f\u6811\u6839\u5728\u94fe\u4e0a\u7684\u60c5\u51b5\uff09\uff0c\u6240\u4ee5\u53ef\u5f97\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a$min(dep[p],k)*(siz[p]-1)$\n\n\u5f53a\u662fb\u7684\u7956\u5148\u65f6\u9700\u6ee1\u8db3\uff1a\n$$dfn[a]<dfn[b]<dfn[a]+siz[a]$$\n$$dep[a]<dep[b]<dep[a]+k$$\n$$dfn[b]<dfn[c]<dfn[b]+siz[b]$$\n\n\u5bb9\u6613\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u6545\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\u3002\n\u4ee5$dep[]$\u4e3a\u4e0b\u6807\uff0c\u4ee5$dfn[]$\u4e3a\u7248\u672c\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u6bcf\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684b\uff0c\u5176\u5b50\u6811\u5927\u5c0f\u7684\u603b\u548c\uff0c\u6700\u540exjb\u4e71\u641e\u4e00\u4e0b\u5c31\u505a\u5b8c\u4e86$^_^$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define ll long long      //\u6ce8\u610f\u8981\u5f00long long\nusing namespace std;\nint n,q,doby;\nint root[300001];\nstruct edge {\n\tint to,next;\n}e[600001];\nint head[300001],num;\nvoid add(int a,int b)\n{\n\te[++num].next=head[a];\n\te[num].to=b;\n\thead[a]=num;\n}\nll siz[300001],dep[300001];\nint fa[300001],dfn[300001],dot[300001],tot;\nvoid dfs(int u)\n{\n\tsiz[u]=1;\n\tdot[dfn[u]=++tot]=u;\n\tfor(int i=head[u];i;i=e[i].next) {\n\t\tint v=e[i].to;\n\t\tif(fa[u]==v)continue;\n\t\tfa[v]=u;\n\t\tdep[v]=dep[u]+1;\n\t\tdfs(v);\n\t\tsiz[u]+=siz[v];\n\t}\n}   //\u9884\u5904\u7406\u4e00\u4e0b\u5404\u79cd\u6570\u7ec4\nstruct data {\n\tint l,r;\n\tll val;\n}t[6000001];\nvoid update(int l,int r,int x,int s,int pre,int &cnt)\n{\n\tcnt=++doby;t[cnt]=t[pre];\n\tt[cnt].val+=s;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(x<=mid)update(l,mid,x,s,t[pre].l,t[cnt].l);\n\telse update(mid+1,r,x,s,t[pre].r,t[cnt].r);\n}\nll query(int l,int r,int L,int R,int pre,int cnt)\n{\n\tif(r<L||l>R)return 0;\n\tif(L<=l&&r<=R)return t[cnt].val-t[pre].val;\n\tint mid=(l+r)>>1;\n\tll sum=0;\n\tif(L<=mid)sum+=query(l,mid,L,R,t[pre].l,t[cnt].l);\n\tif(mid+1<=R)sum+=query(mid+1,r,L,R,t[pre].r,t[cnt].r);\n\treturn sum;\n}   //\u6ce8\u610f\u522b\u5199\u6210\u533a\u95f4\u5355\u70b9\u67e5\u8be2/\u6ed1\u7a3d\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<n;i++) {\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++) {\n\t\tupdate(1,n,dep[dot[i]],siz[dot[i]]-1,root[i-1],root[i]);\n\t}     //\u6211\u89c9\u5f97\u5e76\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u6ce8\u91ca\u7684qwq\n\tfor(int i=1;i<=q;i++) {\n\t\tint p;\n\t\tll k;\n\t\tscanf(\"%d%lld\",&p,&k);\n\t\tprintf(\"%lld\\n\",min(dep[p],k)*(siz[p]-1)+query(1,n,dep[p]+1,dep[p]+k,root[dfn[p]],root[dfn[p]+siz[p]-1]));\n\t}   //\u6211\u4f9d\u7136\u89c9\u5f97\u5e76\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u6ce8\u91ca\u7684qwq\n\treturn 0;\n}\n```\n",
        "postTime": 1570591613,
        "uid": 14474,
        "name": "2016jzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u3010\u6a21\u677f\u3011\u4e8c\u7ef4\u504f\u5e8f\uff08\u9003\uff09\n\n\u5f53\u7136\u8fd9\u9898\u8fd8\u662f\u6709\u5f88\u591a\u4e0d\u9519\u7684\u6027\u8d28\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u56e0\u4e3aA\u548cB\u90fd\u662fC\u7684\u7956\u5148\uff0c\u6240\u4ee5A\u548cB\u5728C\u5230\u6839\u7684\u94fe\u4e0a\uff0c\u56e0\u6b64\u53ea\u9700\u5206\u7c7b\u8ba8\u8bbaA\u548cB\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002\n\n- B\u5728A\u4e0a\u65b9\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u9897\u6811\uff0c\u6240\u4ee5\u6bcf\u5f80\u4e0a\u4e00\u5c42\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u800cA\u7684\u5b50\u6811\u9664A\u5916\u7684\u4efb\u610f\u8282\u70b9\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6240\u4ee5\u8d21\u732e\u662f${\\min (k,dep_A-1)\\times  (siz_A-1)}$($-1$\u662f\u56e0\u4e3a$C$\u4e0d\u80fd\u7b49\u4e8e$A$)\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5$O(1)$\u8ba1\u7b97\n\n- B\u5728A\u4e0b\u65b9\n\n\u5b9e\u9645\u4e0a\u8d21\u732e\u5c31\u662f\n$$\\sum_{x \\in subtree_A,dep_x\\in [dep_A+1,dep_A+k]}siz_x-1$$\n\n\uff08$-1$\u662f\u56e0\u4e3a$C$\u4e0d\u80fd\u7b49\u4e8e$B$\uff09\n\n\u5c5e\u4e8eA\u7684\u5b50\u6811\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7dfs\u5e8f\u8f6c\u5316\u4e3a\u504f\u5e8f\u95ee\u9898\uff0c\u8fd9\u6837\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u4e8c\u4f4d\u504f\u5e8f\u95ee\u9898\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5dee\u5206\uff0c\u79bb\u7ebf\u540e\u6309dfs\u5e8f\u4f9d\u6b21\u63d2\u5165\u6811\u72b6\u6570\u7ec4\u4e2d\u5e76\u67e5\u8be2\u5f53\u524d\u7684\u7b54\u6848\u5373\u53ef\u3002\n\ncode:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint a=0;char c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile('0'<=c&&c<='9'){\n\t\ta=a*10+c-48;\n\t\tc=getchar();\n\t}\n\treturn a;\n}\n#define MN 300005\n#define LL long long\nint n,q,cnt,siz[MN],dep[MN],fa[MN];\nint dfn[MN],id[MN],DP;\nLL sum[MN],ans[MN];\nvector<int>edge[MN];\nstruct data{\n\tint id,l,r,op;\n\tdata(int I=0,int L=0,int R=0,int O=0){id=I;l=L;r=R;op=O;}\n};\nvector<data>Q[MN];\nvoid dfs(int x){\n\tsiz[x]=1;dfn[x]=++cnt;id[cnt]=x;\n\tDP=max(DP,dep[x]);//\u6c42\u51faDFS\u5e8f\u5e76\u627e\u5230\u6700\u5927\u7684\u6df1\u5ea6\n\tfor(int i=0;i<edge[x].size();++i)\n\t\tif(fa[x]!=edge[x][i]){\n\t\t\tfa[edge[x][i]]=x;\n\t\t\tdep[edge[x][i]]=dep[x]+1;\n\t\t\tdfs(edge[x][i]);\n\t\t\tsiz[x]+=siz[edge[x][i]];\n\t\t}\n}\nvoid add(int x,int v){\n\twhile(x<=DP)sum[x]+=v,x+=x&(-x);\n}\nLL ask(int x){\n\tLL res=0;\n\twhile(x)res+=sum[x],x-=x&(-x);\n\treturn res;\n}\nint main(){\n\tn=read();q=read();\n\tfor(int i=1;i<n;++i){\n\t\tint u=read(),v=read();\n\t\tedge[u].push_back(v);\n\t\tedge[v].push_back(u);\n\t}\n\tdep[1]=1;dfs(1);\n\tfor(int i=1;i<=q;++i){\n\t\tint p=read(),k=read();\n\t\tQ[dfn[p]-1].push_back(data(i,dep[p]+1,min(DP,dep[p]+k),-1));\n\t\tQ[dfn[p]+siz[p]-1].push_back(data(i,dep[p]+1,min(DP,dep[p]+k),1));//\u5c06\u8be2\u95ee\u5dee\u5206\n\t\tans[i]=(LL)(siz[p]-1)*min(k,dep[p]-1);\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tadd(dep[id[i]],siz[id[i]]-1);//\u6309DFS\u5e8f\u4f9d\u6b21\u63d2\u5165\n\t\tfor(int j=0;j<Q[i].size();++j){\n\t\t\tdata w=Q[i][j];\n\t\t\tans[w.id]+=(LL)w.op*(ask(w.r)-ask(w.l-1));\n\t\t}\n\t}\n\tfor(int i=1;i<=q;++i)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1580738618,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&emsp;&emsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3899)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790  \n&emsp;&emsp;\u9996\u5148\u53d1\u73b0\uff0c\u5bf9\u4e8e$(a,b,c)$\u7684\u5408\u6cd5\u4e09\u5143\u7ec4\uff0c$c$\u4e00\u5b9a\u5728$a$\u7684\u5b50\u6811\u5185\uff0c\u5e76\u4e14$b$\u4e5f\u662f$c$\u7684\u7956\u5148\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651$b$\u7684\u4f4d\u7f6e\u3002\u5982\u679c$b$\u662f$a$\u7684\u5b50\u5b59\uff0c\u90a3\u4e48$c$\u4e00\u5b9a\u5c31\u662f$b$\u7684\u5b50\u5b59\uff0c\u6b64\u65f6\u7684\u8d21\u732e\u662f$siz(b)-1$\uff08\u6211\u4eec\u4ee5\u4e0b\u90fd\u7528$siz(u)$\u8868\u793a$u$\u7684\u5b50\u6811\u5927\u5c0f\uff09\u3002\u5982\u679c$b$\u662f$a$\u7684\u7956\u5148\uff0c\u90a3\u4e48\u8d21\u732e\u5c31\u662f$siz(a)-1$\u3002  \n&emsp;&emsp;\u53d1\u73b0\uff0c\u5f53$b$\u662f$a$\u7684\u7956\u5148\u7684\u65f6\u5019\uff0c\u8d21\u732e\u53ea\u4e0e$k$\u3001$siz(a)$\u548c$a$\u7684\u6df1\u5ea6\u6709\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002  \n&emsp;&emsp;\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u6c42\u51fa\uff1a  \n$$\\sum_{dis(p,v)\\le k} (siz(v)-1)$$  \n&emsp;&emsp;\u8fd9\u662f\u4e00\u4e2a\u957f\u94fe\u5256\u5206\u53ef\u505a\u7684\u95ee\u9898\u3002~~\u4f46\u662f\u7531\u4e8e\u6211\u5f88\u84bb\uff0c\u56e0\u6b64\u6211\u4e0d\u4f1a\u3002~~  \n&emsp;&emsp;\u8003\u8651\u5230 \" $a$\u548c$b$\u8ddd\u79bb\u4e0d\u8d85\u8fc7$k$ \" \u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c$b$\u5230$a$\u7684\u6df1\u5ea6\u5dee\u4e0d\u4f1a\u8d85\u8fc7$k$\u3002\u56e0\u6b64\uff0c\u77e5\u9053\u4e86$a$\u7684\u6df1\u5ea6\u548c$k$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u5408\u6cd5\u7684$b$\u7684\u6700\u5927\u7684\u6df1\u5ea6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6700\u5927\u6df1\u5ea6\u4e3a\u4e00\u4e2a\u8be2\u95ee\u7684 \" \u53ef\u7528\u6df1\u5ea6 \" \u3002  \n&emsp;&emsp;\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u6240\u6709\u70b9\u6309\u7167\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\uff0c\u63d2\u5165\u8d21\u732e\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u5f53\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684 \" \u53ef\u7528\u6df1\u5ea6 \" \u7684\u70b9\u90fd\u88ab\u63d2\u5165\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba1\u7b97\u5b83\u6b64\u65f6\u7684\u7b54\u6848\u2014\u2014\u4e5f\u5c31\u662f\u5b83\u5b50\u6811\u5185\u7684\u8d21\u732e\u548c\u3002  \n&emsp;&emsp;\u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u67e5\u8be2\u65e2\u6ee1\u8db3\u8d21\u732e\u4e0d\u9057\u6f0f\uff0c\u4e5f\u6ee1\u8db3\u4e0d\u4f1a\u6709\u591a\u4f59\u7684\u8d21\u732e\u3002  \n&emsp;&emsp;\u5b50\u6811\u5185\u7684\u8d21\u732e\u548c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u6811\u5c55\u5f00\u4e3a DFS \u5e8f\u7684\u65b9\u6cd5\uff0c\u8f6c\u5316\u4e3a\u533a\u95f4\u6c42\u548c\uff0c\u7528 BIT \u53ef\u4ee5\u7ef4\u62a4\u3002\u70b9\u548c\u8be2\u95ee\u90fd\u53ef\u4ee5\u5728\u6392\u5e8f\u540e\u4f7f\u7528\u6307\u9488\u626b\u8fc7\u53bb\u3002  \n&emsp;&emsp;\u65f6\u95f4\u590d\u6742\u5ea6$O((n+q)\\log_2n)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int MAXN = 3e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt;\n}Graph[MAXN << 1];\n\nstruct Query\n{\n\tint dd, id, A, K;\n\tbool operator < ( const Query &b ) const { return dd < b.dd; }\n};\n\nQuery q[MAXN];\n\nLL BIT[MAXN], ans[MAXN];\nint pts[MAXN];\nint head[MAXN], dep[MAXN], pos[MAXN], siz[MAXN];\nint N, Q, cnt, ID;\n\nint lowbit( const int x ) { return x & ( -x ); }\nvoid update( int x, int v ) { for( ; x <= N ; x += lowbit( x ) ) BIT[x] += v; }\nLL getSum( int x ) { LL ret = 0; while( x ) ret += BIT[x], x -= lowbit( x ); return ret; }\nLL query( int l, int r ) { return getSum( r ) - getSum( l - 1 ); }\nbool cmp( const int &x, const int &y ) { return dep[x] < dep[y]; }\n\nvoid addEdge( const int from, const int to )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid DFS( const int u, const int fa )\n{\n\tdep[u] = dep[fa] + 1, siz[u] = 1, pos[u] = ++ ID;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ( v = Graph[i].to ) ^ fa )\n\t\t\tDFS( v, u ), siz[u] += siz[v];\n}\n\nsigned main()\n{\n\tint height = 0;\n\tread( N ), read( Q );\n\tfor( int i = 1, a, b ; i < N ; i ++ ) read( a ), read( b ), addEdge( a, b ), addEdge( b, a );\n\tDFS( 1, 0 );\n\tfor( int i = 1 ; i <= N ; i ++ ) height = MAX( height, dep[i] ), pts[i] = i;\n\tfor( int i = 1 ; i <= Q ; i ++ ) \n\t\tread( q[i].A ), read( q[i].K ), q[i].dd = MIN( dep[q[i].A] + q[i].K, height ), q[i].id = i;\n\tstd :: sort( q + 1, q + 1 + Q );\n\tstd :: sort( pts + 1, pts + 1 + N, cmp );\n\tint rig = 1, ptr = 1;\n\tfor( int i = 1 ; i <= N ; )\n\t{\n\t\tfor( ; rig <= N && dep[pts[rig]] == dep[pts[i]] ; rig ++ );\n\t\tfor( ; i < rig ; i ++ ) update( pos[pts[i]], siz[pts[i]] - 1 );\n\t\tif( q[ptr].dd == dep[pts[i - 1]] )\n\t\t{\n\t\t\tfor( ; ptr <= Q && q[ptr].dd == dep[pts[i - 1]] ; ptr ++ )\n\t\t\t{\n\t\t\t\tans[q[ptr].id] = query( pos[q[ptr].A] + 1, pos[q[ptr].A] + siz[q[ptr].A] - 1 );\n\t\t\t\tans[q[ptr].id] += 1ll * MIN( q[ptr].K, dep[q[ptr].A] - 1 ) * ( siz[q[ptr].A] - 1 );\n\t\t\t}\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= Q ; i ++ ) write( ans[i] ), putchar( '\\n' );\n\treturn 0;\n}\n```  ",
        "postTime": 1589436086,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[\u6e56\u5357\u96c6\u8bad]\u66f4\u4e3a\u5389\u5bb3/\u8c08\u7b11\u98ce\u751f"
    },
    {
        "content": "\u6765\u4e00\u7bc7\u6bd4\u8f83\u8be6\u7ec6\u7684\u9898\u89e3\uff0c~~\u4f60\u4eec\u600e\u4e48\u5bf9\u70b9$\\text{b}$\u5728\u70b9$\\text{a}$\u4e0a\u9762\u7684\u60c5\u51b5\u4e00\u5b57\u4e0d\u63d0\u554a\uff0c\u8981\u771f\u6b63**\u6e05\u6670**\u7684\u7406\u89e3\u8fd8\u662f\u9700\u8981\u4e00\u5b9a\u601d\u8003\u7684\u3002~~   \n\u60c5\u51b5$\\text{1}$\u3002$\\text{b}$\u5728\u70b9$\\text{a}$\u4e0a\u9762\u3002\u9996\u5148\u70b9$\\text{b}$\u4e00\u5b9a\u548c\u70b9$\\text{a}$\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff1f\u56e0\u4e3a\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\u4ed6\u4eec\u7684\u5b50\u6811\u6ca1\u6709\u4ea4\u96c6\u6240\u4ee5\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u3002$\\text{c}$\u70b9\u53ef\u4ee5\u9009\u7684\u8303\u56f4\u5c31\u5728$\\text{a}$\u7684\u5b50\u6811\u91cc\uff0c\u4e5f\u5c31\u662f$\\text{size}_a-1$($\\text{a}$\u70b9\u4e0d\u80fd\u9009)\u3002   \n\u7136\u540e\u70b9$\\text{a}$\u4e0a\u9762\u7684\u70b9\u5c31\u6709$\\text{depth}_a-1$\u4e2a\uff0c\u56e0\u4e3a\u6700\u591a\u53ea\u80fd\u53d6$\\text{k}$\u4e2a\uff0c\u6bcf\u4e2a\u70b9\u6240\u9020\u6210\u7684\u8d21\u732e\u662f$\\text{size}_a-1$\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u53ef\u4ee5$O(1)$\u5f97\u5230\uff0c\u5c31\u662f$\\min(\\text{k},\\text{depth}_a-1)*(\\text{size}_a-1)$\u3002  \n\u60c5\u51b5$\\text{2}$\uff0c\u70b9$\\text{b}$\u5728\u70b9$\\text{a}$\u4e0b\u9762\uff08\u5373\u70b9$\\text{b}$\u5728\u70b9$\\text{a}$\u7684\u5b50\u6811\u91cc\uff09\u3002\u90a3\u4e48\u70b9$\\text{c}$\u53ef\u4ee5\u53d6\u7684\u8303\u56f4\u5c31\u662f$\\text{size}_b-1$(\u70b9$\\text{b}$\u4e0d\u80fd\u9009)\uff0c\u4e5f\u5c31\u662f\u8bf4\u60c5\u51b5$\\text{2}$\u7684\u8d21\u732e\u5c31\u662f\uff1a\n$$\\sum_{b\\text{\u5728a\u7684\u5b50\u6811\u91cc\u4e14dis(a,b)}\\leq\\text{k}}\\text{size}_b-1$$\n$\\text{b}$\u7684\u5408\u6cd5\u8303\u56f4\u5c31\u662f$\\text{depth}_a+1 \\sim \\text{depth}_a +\\text{k}$  \n~~\u5176\u5b9e\u6211\u611f\u89c9\u8fd9\u79cd\u60c5\u51b5\u6bd4\u524d\u4e00\u79cd\u60c5\u51b5\u8981\u66f4\u5bb9\u6613\u7406\u89e3\u3002~~  \n\u627e\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\uff0c\u8fd9\u91cc\u6211\u7528\u4e86\u4e3b\u5e2d\u6811\u3002  \n\u6309\u7167$\\text{dfn}$\u5e8f\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u70b9\u52a0\u5165\u4e3b\u5e2d\u6811\uff0c\u4ee5**\u6df1\u5ea6\u4e3a\u4e0b\u6807**\uff0c\u6bcf\u6b21\u5c06\u5728\u4e3b\u5e2d\u6811\u4e0a\u5305\u542b\u8fd9\u4e2a\u6df1\u5ea6\u7684\u70b9\u52a0\u4e0a$\\text{size}-1$\u3002  \n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u70b9$\\text{u}$\u5b83\u5728\u4e3b\u5e2d\u6811\u4e0a\u5bf9\u5e94\u7684\u533a\u95f4\u5c31\u662f$\\text{root}_{\\text{dfn}_u}\\sim\\text{root}_{\\text{dfn}_u+\\text{size}_u-1}$\u3002   \n\u90a3\u4e48\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u5728\u4e3b\u5e2d\u6811\u91cc\u67e5$\\text{depth}_a+1 \\sim \\text{depth}_a+\\text{k}$\u5c31\u597d\u4e86\u3002  \n\u4ee3\u7801\u633a\u597d\u5199\uff0c\u8fd9\u91cc\u5c31\u4e0d\u653e\u4e86\u3002 \n\n",
        "postTime": 1578362230,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\n\n> \u7ed9\u4e00\u68f5\u6811$n$\u4e2a\u8282\u70b9\uff0c$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u5b9a$p,k$\uff0c\u95ee\u6709\u591a\u5c11\u4e09\u5143\u7ec4$(p,b,c)$\u6ee1\u8db3$p,b$\u5747\u4e3a$c$\u7684\u7236\u4eb2\uff0c$p,b$\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7$k$\n> $n,q\\le 10^5$\n\n\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\u3002\n\n\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- $b$\u5728$a$\u7684\u4e0a\u9762\uff0c\u6211\u4eec\u53d1\u73b0$b$\u6709$min(dep[a]-1, k)$\u4e2a\u53ef\u9009\u4f4d\u7f6e\uff0c\u800c$a$\u7684\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\uff08\u9664\u4e86\u8282\u70b9$a$\u672c\u8eab\uff09\u5747\u53ef\u4f5c\u4e3a$c$\uff0c\u6240\u4ee5\u5171\u6709$min(dep[a]-1, k)\\times(sz[a]-1) \u200b$\u4e2a\u4e09\u5143\u7ec4\u6ee1\u8db3\u3002\n- \u5bf9\u4e8e$b$\u5728$a$\u7684\u4e0b\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e00\u9897**\u4e0b\u6807\u4e3a\u6df1\u5ea6**\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u8282\u70b9$u$\u4f5c\u4e3a$b$\u7684\u540c\u65f6\uff0c\u5176\u5b50\u6811\u9664$u$\u5916\u5747\u53ef\u4f5c\u4e3a$c$\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6df1\u5ea6$dep[u]$\u7684\u8d21\u732e\u4e3a$sz[u]-1$\uff0c\u7136\u540e\u5728$dfs$\u56de\u6eaf\u65f6\u540c\u65f6\u5408\u5e76\u5b50\u6811\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u7b54\u6848\u5373\u4e3a\u6df1\u5ea6\u533a\u95f4$[dep[a]+1, dep[a]+k]$\u7684\u533a\u95f4\u548c\u3002\n\n\u6700\u540e\u7b54\u6848\u5373\u4e3a\u4e24\u79cd\u60c5\u51b5\u4e4b\u548c\n\n\u6ce8\u610f\u7a7a\u95f4\u9650\u5236\uff0c\u9700\u8981\u52a8\u6001\u5f00\u70b9\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 300003\n#define MAXM 300003*30\n#define ll long long\nusing namespace std;\nint head[MAXN],nxt[MAXN*2],vv[MAXN*2],tot;\ninline void add_edge(int u, int v){\n    vv[++tot]=v;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint cnt;\nll tre[MAXM*2];\nint sl[MAXM*2],sr[MAXM*2];\nvoid change(int &x, int l, int r, int pos, int val){\n    if(x==0) x=++cnt;\n    tre[x]+=val;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(pos<=mid) change(sl[x], l, mid, pos, val);\n    else change(sr[x], mid+1, r, pos, val);\n}\nll query(int x, int l, int r, int ql, int qr){\n    if(x==0) return 0;\n    if(ql<=l&&r<=qr) return tre[x];\n    int mid=(l+r)>>1;\n    ll res=0;\n    if(ql<=mid) res+=query(sl[x], l, mid, ql, qr);\n    if(mid<qr) res+=query(sr[x], mid+1, r, ql, qr);\n    return res;\n}\nint merge(int a, int b, int l, int r){\n    if(a==0||b==0) return a+b;\n    int mid=(l+r)>>1;\n    int x=++cnt;\n    tre[x]=tre[a]+tre[b];\n    sl[x]=merge(sl[a], sl[b], l, mid);\n    sr[x]=merge(sr[a], sr[b], mid+1, r);\n    return x;\n}\nint n,q;\nint sz[MAXN],rot[MAXN],dep[MAXN];\nvoid dfs(int u, int fa){\n    sz[u]=1;\n    dep[u]=dep[fa]+1;\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        dfs(v, u);\n        sz[u]+=sz[v];\n    }\n    change(rot[u], 1, n, dep[u], sz[u]-1);\n    rot[fa]=merge(rot[fa], rot[u], 1, n);\n}\nint main(){\n    scanf(\"%d %d\", &n, &q);\n    for(int i=1;i<n;++i){\n        int a,b;scanf(\"%d %d\", &a, &b);\n        add_edge(a, b);add_edge(b, a);\n    }\n    dfs(1, 0);\n    while(q--){\n        int p,k;scanf(\"%d %d\", &p, &k);\n        printf(\"%lld\\n\", query(rot[p], 1, n, dep[p]+1, dep[p]+k)+(ll)(sz[p]-1)*min(k, dep[p]-1));\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1571137839,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "> \u505a\u6cd5: \u6811\u4e0adfs\u505a\u5dee+\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\n\n\u770b\u5230\u8fd9\u9898\u4e0d\u96be\u60f3\u5230\u5b83\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5:b\u5728a\u4e0a\u9762\u4e0eb\u5728a\u4e0b\u9762\n\nb\u5728a\u4e0a\u9762\u6bd4\u8f83\u597d\u60f3,\u53ea\u9700\u8981\u8ba1\u7b97\u51fa$(sz[a]-1)\\times min(dep[a]-1,k)$\u5373\u53ef($min$\u5c31\u662f\u9632\u6b62\u8df3\u5230\u6bd4$1$\u8fd8\u4e0a\u9762\u7684\u70b9,\u5176\u5b9e$1$\u4e0a\u9762\u6ca1\u6709\u70b9)\n\n\u4e3b\u8981\u95ee\u9898\u5728\u4e8e$b$\u5728$a$\u4e0b\u9762\n\n\u4ed4\u7ec6\u60f3\u60f3,\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u8981\u5b58\u5165\u7b54\u6848\u7684\u503c\u80af\u5b9a\u662f**\u5728$a$\u7684\u5b50\u6811\u4e2d,\u6df1\u5ea6$\\leq dep[x]+k$\u7684$sz-1$\n\n\u90a3\u4e48\u770b\u8fd9\u4e2a\u6df1\u5ea6\u533a\u95f4\u5185\u7684\u70b9sz\u603b\u548c\u5462\uff1f\u6811\u72b6\u6570\u7ec4+dfs\u505a\u5dee\u5373\u53ef\n\n\u6211\u4eec\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u5b58\u5165\u76f8\u5173\u4ed6\u7684\u8be2\u95ee\uff0c\u4ee5\u53ca\u7b2c\u51e0\u4e2a\u56de\u7b54\u7684ID\u503c\u4e0e\u7ed9\u5b9a\u7684k\u503c,\u5982\u679c\u6211\u4eec\u8981\u52a0sz\u603b\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u538b\u5728\u5f53\u524ddep\u4e0a\u52a0\u4e0a\u76f8\u5e94\u7684sz\u503c\u5c31\u597d\u4e86\u3002\u94a5\u5319\u6c42\u4e00\u6bb5dep\u533a\u95f4\u5185\u7684sz\u603b\u548c\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u505a\u5dee\u53d1\u6c42\u51fa\u533a\u95f4\u603b\u503c\u4e86\n\n#### Code:\n\n```\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=(int)b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=(int)b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=(int)b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=(int)b; i>i##end; i--)\n#define Erep(i,x) for(re int i=head[x]; ~i; i=Edge[i].nxt)\n#define ll long long\n#define debug(x) cout<<#x<<\" = \"<<x<<endl\n#define lowbit(x) (x&-x)\nusing namespace std;\ntemplate <class T> bool Max(T &x, T y){\n\treturn x<y?x=y,1:0;\n}\ntemplate <class T> bool Min(T &x, T y){\n\treturn x>y?x=y,1:0;\n}\ntemplate <class T> T rd() {\n\tstatic char ch;static bool neg;\n\tstatic T x=0;\n\tfor(ch=neg=0;ch<'0' || '9'<ch;neg|=ch=='-',ch=getchar());\n\tfor(x=0;'0'<=ch && ch<='9';(x*=10)+=ch-'0',ch=getchar());\n\treturn x=neg?-x:x;\n}\nconst int mod=1e9+7,M=300000+5;\n//bool S1;\nstruct edge{\n\tint to,nxt;\n}Edge[M<<1];\nint head[M],tcnt;\nvoid AddEdge(int u, int v){\n\tEdge[++tcnt]=(edge)<%v,head[u]%>;\n\thead[u]=tcnt;\n}\n\nstruct Ask{\n\tint x,k;\n};\nvector<Ask>ask[M];\nint sz[M],dep[M];\nll ans[M];\n//bool S2;\nll sum[M];\nint n,m;\n\nvoid Modify(int x, int val){\n\twhile(x<=n){\n\t\tsum[x]+=1ll*val;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\n\nll Sum(int x){\n\tll res=0;\n\twhile(x){\n\t\tres+=sum[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}\n\nvoid dfs(int x, int fa){\n\tdep[x]=dep[fa]+1; sz[x]=1;\n\trepp(i,0,ask[x].size()){\n\t\tAsk now=ask[x][i];\n\t\tans[now.x]-=1ll*(Sum(min(dep[x]+now.k,n))-Sum(dep[x]));\n\t}\n\tErep(i,x){\n\t\tint y=Edge[i].to;\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);\n\t\tsz[x]+=sz[y];\n\t}\n\trepp(i,0,ask[x].size()){\n\t\tAsk now=ask[x][i];\n\t\tans[now.x]+=1ll*min(dep[x]-1,now.k)*(sz[x]-1);\n\t\tans[now.x]+=1ll*(Sum(min(dep[x]+now.k,n))-Sum(dep[x]));\n\t}\n\tModify(dep[x],sz[x]-1);\n}\n\nint main(){\n//\tfreopen(\"tree.in\",\"r\",stdin);\n//\tfreopen(\"tree.out\",\"w\",stdout);\n//\tprintf(\"%.2lf\",(&S2-&S1)/1024.0/1024);\n\tmemset(head,-1,sizeof head);\n\tn=rd<int>(),m=rd<int>();\n\trepp(i,1,n){\n\t\tint u=rd<int>(),v=rd<int>();\n\t\tAddEdge(u,v), AddEdge(v,u);\n\t}\n\trep(i,1,m){\n\t\tint x=rd<int>(),k=rd<int>();\n\t\task[x].push_back((Ask)<%i,k%>);\n\t}\n\tdfs(1,0);\n\trep(i,1,m) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n\n\n```",
        "postTime": 1564389950,
        "uid": 81715,
        "name": "ppp204",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "## \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u5e7f\u544a\uff1a\u6211\u7684[\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u603b\u7ed3](https://blog.csdn.net/pb122401/article/details/84648993)\u3002\n\n\n### \u601d\u8def\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u5408\u6cd5\u7684\u4e09\u5143\u7ec4(a,b,c)\u4e00\u5b9a\u5728\u4e00\u67611~c\u7684\u8def\u5f84\u4e0a\u3002\n\n\u4e8e\u662f\u7edf\u8ba1\u7b54\u6848\u7684\u65b9\u5f0f\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n\u5bf9\u4e8e\u7ed9\u51fa\u7684a\uff1a\n\n\u4e00\u3001\u7edf\u8ba1b\u5728a\u4e0a\u65b9\u65f6\u7684\u65b9\u6848\u6570\uff1a`ans+=min(dep[a]-1,k)*(size[a]-1)`\u3002\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\u3002b\u5728a\u4e0a\u65b9\u65f6c\u53ef\u4ee5\u5728a\u7684\u5b50\u6811\u5185\u4efb\u610f\u4f4d\u7f6e\u3002\n\n\u4e8c\u3001\u7edf\u8ba1b\u5728a\u4e0b\u65b9\u65f6\u7684\u65b9\u6848\u6570\u3002\u5f53b\u56fa\u5b9a\u65f6\uff0cc\u53ef\u4ee5\u5728b\u7684\u5b50\u6811\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684b\uff0c\u5b83\u4eec\u7684size-1\u7684\u548c\u5373\u53ef\u3002\n\n\u95ee\u9898\u6765\u4e86\uff1a\u5982\u4f55\u7edf\u8ba1\u8fd9\u4e2a\u548c\u5462\uff1f\n\n\u5f88\u7b80\u5355\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76+\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6bcf\u4e00\u4e2adep\u8d21\u732e\u7684\u7b54\u6848\u5c31\u597d\u4e86\uff0c\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u5747\u53ef\u3002\n\n\u6211\u65e5\u5e38sb\uff0c\u53c8\u7528\u4e86\u5e38\u6570\u5de8\u5927\u7684\u7ebf\u6bb5\u6811\u3002\n\n### \u505a\u6cd5\n\n\u5c06\u8be2\u95ee\u8bfb\u5165\u8fdb\u6765\u5e76\u5206\u522b\u585e\u5165\u6bcf\u4e00\u4e2aa\u4e2d\u3002\n\ndfs\u4e00\u904d\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u91cd\u513f\u5b50\u3002\n\n\u518ddfs\u4e00\u904d\u6c42\u51fa\u7b54\u6848\uff0c\u6c42\u6cd5\u5728\u601d\u8def\u4e2d\u6709\uff0c\u4e0d\u4f1a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u535a\u5ba2\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 300020\nusing namespace std;\ntypedef long long ll;\nint n,m;\nstruct hh{int t,nxt;}edge[sz<<1];\nint head[sz],ecnt;\nvoid make_edge(int f,int t)\n{\n\tedge[++ecnt]=(hh){t,head[f]};\n\thead[f]=ecnt;\n\tedge[++ecnt]=(hh){f,head[t]};\n\thead[t]=ecnt;\n}\n#define go(x) for (int i=head[x];i;i=edge[i].nxt)\n#define v edge[i].t\nint son[sz];\nll dep[sz],size[sz];\nvoid dfs1(int x,int fa)\n{\n\tsize[x]=1;dep[x]=dep[fa]+1;\n\tgo(x) if (v!=fa)\n\t{\n\t\tdfs1(v,x);\n\t\tsize[x]+=size[v];\n\t\tif (size[v]>size[son[x]]) son[x]=v;\n\t}\n}\nll tr[sz<<2];//\u7ebf\u6bb5\u6811\n#define ls k<<1\n#define rs k<<1|1\n#define lson ls,l,mid\n#define rson rs,mid+1,r\nvoid add(int k,int l,int r,int x,int y)\n{\n\ttr[k]+=y;\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (x<=mid) add(lson,x,y);\n\telse add(rson,x,y);\n}\nll query(int k,int l,int r,int x,int y)\n{\n\tif (x>y) return 0;\n\tif (x<=l&&r<=y) return tr[k];\n\tint mid=(l+r)>>1;\n\tll ret=0;\n\tif (x<=mid) ret+=query(lson,x,y);\n\tif (y>mid) ret+=query(rson,x,y);\n\treturn ret;\n}\nint S;\n#define pii pair<int,int>\n#define fir first\n#define sec second\n#define MP make_pair\nvector<pii>q[sz];\nll ans[sz];\nvoid add(int d,ll x){add(1,1,n,d,x);}\nvoid add(int x,int fa,int t)\n{\n\tadd(dep[x],(size[x]-1)*t);\n\tgo(x) if (v!=fa&&v!=S) add(v,x,t); \n}\nvoid dfs2(int x,int fa,bool keep)\n{\n\tgo(x) if (v!=fa&&v!=son[x]) dfs2(v,x,0);\n\tif (son[x]) dfs2(son[x],x,1);\n\tS=son[x];\n\tadd(x,fa,1);\n\tfor (int i=0;i<(int)q[x].size();i++)\n\t{\n\t\tll tmp1=query(1,1,n,dep[x]+1,min((ll)n,dep[x]+q[x][i].sec));//b\u5728\u4e0b\u65b9\n\t\tll tmp2=1ll*min(dep[x]-1,(ll)q[x][i].sec)*(size[x]-1);//b\u5728\u4e0a\u65b9\n\t\tans[q[x][i].fir]=tmp1+tmp2;\n\t}\n\tS=0;\n\tif (!keep) add(x,fa,-1);\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tint i,x,y;\n\tcin>>n>>m;\n\tfor (i=1;i<n;i++) cin>>x>>y,make_edge(x,y);\n\tfor (i=1;i<=m;i++) cin>>x>>y,q[x].push_back(MP(i,y));//\u79bb\u7ebf\u5904\u7406\n\tdfs1(1,0);\n\tdfs2(1,0,1);//\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\n\tfor (i=1;i<=m;i++) printf(\"%lld\\n\",ans[i]);\n}\n```",
        "postTime": 1544161969,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/P3899)\n\n\u957f\u94fe\u5256\u5206\u3002\n\n\u597d\u50cf\u4e3b\u5e2d\u6811\u66f4\u597d\u5199\uff0c\u4f46\u957f\u94fe\u5256\u5206\u6781\u5176\u597d\u60f3\u3002\u56e0\u4e3a\u8fd9\u91cc\u7684DP\u662f\u663e\u7136\u7684\uff0c\u4e0e[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/CF1009F)\u7684DP\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u73b0\u5728\u8fd9\u9053\u9898\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u540e\u7f00\u548c\u5c31\u597d\u4e86\u3002\u6240\u4ee5\u601d\u8def\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u79bb\u7ebf\u4e00\u4e0b\uff0c\u7ef4\u62a4\u540e\u7f00\u548c\u7684DP\u503c\uff0c\u8ba8\u8bba\u4e00\u4e0b$b$\u5728$a$\u7684\u4e0b\u9762\u8fd8\u662f\u5728$a$\u7684\u4e0a\u9762\uff0c\u4e0b\u9762\u4e58\u4e00\u4e0b\uff0c\u4e0a\u9762\u52a0\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\ncode:\n```\n//2018.9.12 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=3e5+10;\nnamespace MAIN{\n    int n,Q;\n    struct E{\n        int next,to;\n        E() {}\n        E(res next,res to):next(next),to(to) {}\n    }edge[N<<1];\n    int head[N],cnt;\n    inline void addedge(res u,res v){\n        edge[++cnt]=E(head[u],v),head[u]=cnt;\n        edge[++cnt]=E(head[v],u),head[v]=cnt;\n    }\n    int fa[N],dep[N],maxdep[N],son[N],siz[N];\n    void dfs(res x,res fax,res depx){\n        fa[x]=fax,maxdep[x]=dep[x]=depx,siz[x]=1;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fax)continue;\n            dfs(tox,x,depx+1);\n            siz[x]+=siz[tox];\n            maxdep[x]=_max(maxdep[x],maxdep[tox]);\n            if(maxdep[tox]>maxdep[son[x]])son[x]=tox;\n        }\n    }\n    typedef pair<int,int> Pair;\n    vector<Pair> vec[N];\n    LL *dp[N],tmp[N<<2],*now=tmp+1,ans[N];\n    inline void Dp(res x){\n        dp[x]=now,now+=maxdep[x]-dep[x]+1;\n    }\n    void DP(res x){\n        if(son[x])dp[son[x]]=dp[x]+1,DP(son[x]),dp[x][0]+=dp[son[x]][0];\n        dp[x][0]+=siz[x]-1;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fa[x]||tox==son[x])continue;\n            Dp(tox);\n            DP(tox);\n            for(res j=0;j<=maxdep[tox]-dep[tox];j++)dp[x][j+1]+=dp[tox][j];\n            dp[x][0]+=dp[tox][0];\n        }\n        for(res i=vec[x].size()-1;~i;i--){\n            res id=vec[x][i].first,k=vec[x][i].second;\n            ans[id]+=(LL)(siz[x]-1)*_min(dep[x]-1,k);\n            if(k>=maxdep[x]-dep[x])ans[id]+=dp[x][0]-siz[x]+1;\n            else ans[id]+=dp[x][0]-siz[x]+1-dp[x][k+1];\n        }\n    }\n    inline void MAIN(){\n        memset(head,-1,sizeof(head));\n        n=read(),Q=read();\n        for(res i=1;i<n;i++){\n            res u=read(),v=read();\n            addedge(u,v);\n        }\n        dfs(1,0,1);\n#define mp make_pair\n        for(res i=1;i<=Q;i++){\n           res p=read(),k=read();\n           vec[p].push_back(mp(i,k));\n        }\n        Dp(1);\n        DP(1);\n        for(res i=1;i<=Q;i++)printf(\"%lld\\n\",ans[i]);\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1536751002,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010\u6e56\u5357\u96c6\u8bad\u3011\u8c08\u7b11\u98ce\u751f"
    },
    {
        "content": "[\u535a\u5ba2](https://blog.csdn.net/Antimonysbguy/article/details/107326531)\u5185\u98df\u7528\u6548\u679c\u66f4\u4f73\u54e6\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3899)\n\n# \u4e00\u3001\u505a\u6cd5\n\n$C$\u4e00\u5b9a\u662f$A, B$\u516c\u5171\u5b50\u6811\u91cc\u7684\u70b9\n\n1. B\u5728A\u4e0a\u65b9\\\n\u5219C\u4e00\u5b9a\u5728A\u5b50\u6811\u4e2d\\\n$ans=\\min\\{k,dep[A]-1\\}\\times (siz[A]-1)$\n2. B\u5728A\u4e0b\u65b9\\\n$ans=\\sum[0<dis(A,B)\\leq k](siz[B]-1)$\\\n\u4f7f$dis(A,B)$\u76f8\u7b49\u7684B\u5bf9$ans$\u90fd\u6709\u8d21\u732e\uff0c\u5177\u6709\u53ef\u52a0\u6027\\\n\u4f46\u662f\u4e0d\u80fd\u628a$dep[B]=dep[A]+dis(A,B)$\u7684B\u52a0\u8d77\u6765\uff0c\u4e0d\u662fA\u7684\u5b50\u6811\u4e0a\u7684B\u4e0d\u80fd\u7edf\u8ba1\\\n\u8003\u8651\u524d\u7f00\u548c\uff0c\u8003\u8651\u53ef\u6301\u4e45\u5316\uff1a\\\n\u6309\u7167**DFS\u5e8f**\uff0c\u4ee5**\u6df1\u5ea6**\u4e3a\u4e0b\u6807\uff0c\u6bcf\u4e2a\u5b50\u8282\u70b9\u5efa\u4e3b\u5e2d\u6811\uff0c\u8bb0\u5f55\u76ee\u524d\u641c\u5230**\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e**\u5b83\u7684\u6240\u6709\u8282\u70b9\u8d21\u732e\u548c\uff08\u53ef\u6301\u4e45\u5316+\u652f\u6301\u524d\u7f00\u548c\uff09\\\n\u5177\u4f53$sum[B]=(siz[B]-1)+\\sum_u[dep[u]\\geq dep[B]\\&dfn[u]<dfn[B]]sum[u]$\n\u7136\u540e\u67e5\u8be2\u5c31\u76f4\u63a5$ans=sum[dep[A]+1,dep[A]+k]$\uff0c\u524d\u7f00\u548c\\\n\u6ce8\u610f\u662f$rt[dep[A]+siz[A]-1]-rt[dep[A]-1]$\uff0c-1\u662f\u4e3a\u4e86\u907f\u514d\u7edf\u8ba1\u5230\u4e0b\u4e00\u4e2a\u8be5\u6df1\u5ea6\u7684\u8282\u70b9\uff08-1\u505c\u7559\u5728\u540c\u6df1\u5ea6\u4e0a\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6b64\u65f6\u7edf\u8ba1\u5b8c\u4e86\u524d\u9762\u6240\u6709\u5185\u5bb9\uff09\n\n# \u4e8c\u3001\u590d\u6742\u5ea6\u548c\u6570\u636e\u8303\u56f4\n\u9a9a\\\n\u5f88\u9a9a\\\n\u771f\u7684\u9a9a\n\n- \u6570\u636e\u8303\u56f4\uff1a\\\n\u5982\u679c\u662f\u6761\u94fe\uff0c$p$\u662f\u4e2d\u70b9\uff0c$k$\u662f\u534a\u957f\\\n\u8003\u8651B\u5728\u4e0a\u9762\u7684\u60c5\u51b5\\\n$ans=1.5e5\\times 1.5e5>1e9$\\\n\u8981\u5f00long long\n- \u590d\u6742\u5ea6\\\n\u65f6\u95f4\u590d\u6742\u5ea6\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u7b2c\u4e00\u4e2aDFS$\\Theta(n)$\uff0c\u7b2c\u4e8c\u4e2a$\\Theta(n^2\\log n)$\uff0c\u67e5\u8be2$\\Theta(qn\\log n)$\uff0c\u4e3b\u5e2d\u6811\u4e0d\u4f1a\u7206\\\n\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u5f88\u65e5\u9f99\\\n`vector`1\u4e2a\u591a\u4e00\u70b9\uff0c`SGT`\uff08\u6ca1\u5b58\u5de6\u53f3\u7aef\u70b9\uff093\u4e2a\uff0c\u518d\u52a0\u4e0a`dep,siz,dfn,rt`\u603b\u51718\u4e2a$\\Theta(8n)$\u591a\u4e00\u70b9\uff0c\u5982\u679c`SGT`\u5b58\u5de6\u53f3\u7aef\u70b9\u5c31$\\Theta(10n)$\u591a\u4e00\u70b9\uff0c\u70b8\u6389:sob:\n\n# ACcode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define in Read()\n#define int long long\nint in{\n\tint i=0,f=1;char ch=0;\n\twhile(!isdigit(ch)&&ch!='-') ch=getchar();\n\tif(ch=='-') ch=getchar(),f=-1;\n\twhile(isdigit(ch)) i=(i<<1)+(i<<3)+ch-48,ch=getchar();\n\treturn i*f;\n}\n\nconst int NNN=3e5+5;\nint n,q;\nvector<int>G[NNN];\nstruct SGT{\n\tint sum,lc,rc;\n}tre[NNN*30];\nint dep[NNN],siz[NNN],dfn[NNN],tot,sz,rt[NNN];\n\n#define lch(x) tre[(x)].lc\n#define rch(x) tre[(x)].rc\n\nvoid Print(int p){\n\tif(!lch(p)&&!rch(p)) return;\n\tprintf(\"%d(%d) %d(%d) %d(%d)\\n\",p,tre[p].sum,lch(p),tre[lch(p)].sum,rch(p),tre[rch(p)].sum);\n\tPrint(lch(p));\n\tPrint(rch(p));\n\treturn;\n}\n\nvoid push_up(int p){\n\ttre[p].sum=tre[lch(p)].sum+tre[rch(p)].sum;\n\treturn;\n}\n\nvoid build(int &p,int l,int r){\n\tp=++sz;\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tbuild(lch(p),l,mid);\n\tbuild(rch(p),mid+1,r);\n\treturn;\n}\n\nvoid update(int &p,int pre,int loc,int con,int l,int r){\n\tp=++sz;\n\ttre[p]=tre[pre];\n\tif(l==r){\n\t\ttre[p].sum+=con;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(loc<=mid) update(lch(p),lch(pre),loc,con,l,mid);\n\telse update(rch(p),rch(pre),loc,con,mid+1,r);\n\tpush_up(p);\n\treturn;\n}\n\nint query(int p,int pre,int l,int r,int L,int R){\n\tif(L<=l&&r<=R) return tre[p].sum-tre[pre].sum;\n\tint mid=l+r>>1,res=0;\n\tif(L<=mid) res+=query(lch(p),lch(pre),l,mid,L,R);\n\tif(R>mid) res+=query(rch(p),rch(pre),mid+1,r,L,R);\n\treturn res;\n}\n\nvoid DFS1(int u,int fa){\n\tdfn[u]=++tot;\n\tdep[u]=dep[fa]+1;\n\tsiz[u]=1;\n\tfor(int e=0;e<G[u].size();++e){\n\t\tint v=G[u][e];\n\t\tif(v==fa) continue;\n\t\tDFS1(v,u);\n\t\tsiz[u]+=siz[v];\n\t}\n\treturn;\n}\n\nvoid DFS2(int u,int fa){\n\tupdate(rt[dfn[u]],rt[dfn[u]-1],dep[u],siz[u]-1,1,n);\n//\tfor(int i=0;rt[i];++i) printf(\"---\\n\"),Print(rt[i]),printf(\"---\\n\");\n\tfor(int e=0;e<G[u].size();++e){\n\t\tint v=G[u][e];\n\t\tif(v==fa) continue;\n\t\tDFS2(v,u);\n\t}\n\treturn;\n}\n\nsigned main(){\n\tn=in,q=in;\n\tfor(int i=1;i<n;++i){\n\t\tint u=in,v=in;\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\t\n\tDFS1(1,0);\n\tbuild(rt[0],1,n);\n\tDFS2(1,0);\n\t\n\tfor(int i=1;i<=q;++i){\n\t\tint p=in,k=in;\n\t\tint ans=0;\n\t\tans+=min(k,dep[p]-1)*(siz[p]-1);\n//\t\tprintf(\"up:%d\\n\",ans);\n\t\tans+=query(rt[dfn[p]+siz[p]-1],rt[dfn[p]-1],1,n,dep[p]+1,dep[p]+k);\n//\t\tprintf(\"down:%d\\n\",ans-min(k,dep[p]-1)*(siz[p]-1));\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1594807775,
        "uid": 225038,
        "name": "antimo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "## link\n[P3899 [\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f](https://www.luogu.com.cn/problem/P3899)\n## solve\n\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53d1\u73b0\uff0ca\u662f\u56fa\u5b9a\u4e0d\u52a8\u7684\uff0c\u800cb\u8ddd\u79bba\u4e0d\u8d85\u8fc7k\n\n\u5219b\u6709\u4e24\u79cd\u60c5\u51b5\u3002\n\n**$(i)$b\u5728a\u7684\u4e0a\u65b9**\n\n\u5219$b$\u79bb$a$\u7684\u8ddd\u79bb\u6700\u5927\u4e3a$ min(deep[a],k)$\n\n$c$\u5c31\u662f$a$\u5b50\u6811\u7684\u4efb\u610f\u4e00\u70b9\u3002\n\n\u5219\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f$ min(deep[a],k)* (size[a]-1) $\n\n**$(ii)$b\u662fa\u7684\u4e0b\u65b9**\n\n\u90a3\u6211\u4eecb\u662fa\u5b50\u6811\u4e0a\u8ddd\u79bb$a$\u4e0d\u8d85\u8fc7k\u4e5f\u5c31\u662f\u6df1\u5ea6\u5dee\u4e0d\u8d85\u8fc7k\u7684\u4e00\u4e2a\u70b9\n\n$c$\u5c31\u662f$b$\u5b50\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\n\n\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f\u628a\u6240\u6709\u53ef\u80fd\u7684$size[b]$\u52a0\u8d77\u6765\n\n\u6211\u4eec\u4ee5$deep[x]$\u4e3a\u4e0b\u6807,$size[x]$\u4e3a\u6743\u503c\u5efa\u4e3b\u5e2d\u6811\uff0c\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa$sum$\u603b\u548c\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff0c\u6570\u636e\u6bd4\u8f83\u5927\uff0c\u8981\u5f00long long\n\n## code\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\nconst int maxn=600005;\ntypedef long long LL;\nint N,Q,son[maxn],nxt[maxn],lnk[maxn],cnt,deep[maxn],size[maxn],r[maxn],tot,q[maxn],l[maxn],sz,root[maxn];\nstruct data{\n\tint l,r;\n\tLL sum;\n}tr[maxn*32];\ninline int read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch<='9'&&ch>='0')ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nint add_e(int x,int y){son[++cnt]=y;nxt[cnt]=lnk[x];lnk[x]=cnt;}\nvoid dfs(int u,int fa){\n\tl[u]=++tot;deep[u]=deep[fa]+1;q[tot]=u;size[u]=1;\n\tfor(int j=lnk[u];j;j=nxt[j]){\n\t\tif(son[j]==fa)continue;\n\t\tdfs(son[j],u);size[u]+=size[son[j]];\n\t}\n\tr[u]=tot;\n}\nvoid insert(int &x,int l,int r,int pos,int val){\n\ttr[++sz]=tr[x];x=sz;\n\ttr[x].sum+=(LL)val;\n\tif(l==r)return ;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)insert(tr[x].l,l,mid,pos,val);\n\telse insert(tr[x].r,mid+1,r,pos,val);\n}\nvoid update(int x){\n\tint l=tr[x].l,r=tr[x].r;\n\ttr[x].sum=tr[l].sum+tr[r].sum;\n}\nLL query(int i,int j,int l,int r,int ll,int rr){\n\tif(ll<=l&&r<=rr)return tr[j].sum-tr[i].sum;\n\tint mid=(l+r)>>1;\n\tLL ans=0;\n\tif (ll<=mid)ans+=query(tr[i].l,tr[j].l,l,mid,ll,rr);\n\tif (rr>mid)ans+=query(tr[i].r,tr[j].r,mid+1,r,ll,rr);\n\treturn ans;\n} \nint main(){\n\tfreopen(\"3653.in\",\"r\",stdin);\n\tfreopen(\"3653.out\",\"w\",stdout);\n\tN=read();Q=read();\n\tfor(int i=1;i<N;i++){\n\t\tint x=read(),y=read();\n\t\tadd_e(x,y);add_e(y,x);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=N;i++)root[i]=root[i-1],insert(root[i],1,N,deep[q[i]],size[q[i]]-1);\n\tfor(int i=1;i<=Q;i++){\n\t\tint x=read(),k=read();\n\t\tLL t=query(root[l[x]],root[r[x]],1,N,deep[x]+1,deep[x]+k);\n\t\tint len=min(k,deep[x]-1);\n\t\tprintf(\"%lld\\n\",t+(LL)len*(LL)(size[x]-1));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1594798443,
        "uid": 128822,
        "name": "OI\u754c\u7684\u5c0f\u6df7\u6df7",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "### \u6c42\u4ec0\u4e48\n\u6811\u4e0a\u5728\u4e00\u6761\u6df1\u5ea6\u5355\u8c03\u7684\u94fe\u4e0a\u7684\u6ee1\u8db3\u4e00\u4e9b\u7279\u6027\u7684\u8282\u70b9\u4e09\u5143\u7ec4\u7684\u4e2a\u6570\u3002\n### \u600e\u4e48\u6c42\n\u6211\u4eec\u53ef\u4ee5\u6a21\u4eff\u300a\u5929\u5929\u7231\u8dd1\u9177\u300b\u4e2d\u7684\u5957\u8def\u4e00\u6837\u8ba1\u7b97\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u7531\u4e8e\u6211\u4eec\u77e5\u9053\u7b54\u6848\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u8ba1\u7b97\u3002\u7b2c\u4e00\u90e8\u5206\u7528\u5b50\u6811\u5927\u5c0f\u548c\u8282\u70b9\u6df1\u5ea6\u7684\u79ef\u53ef\u4ee5\u6c42\u5f97\uff0c\u7b2c\u4e8c\u90e8\u5206\u9700\u8981\u5229\u7528\u8fd9\u4e2a\u5957\u8def\uff1a\n\n\u6211\u4eec\u9700\u8981\u6c42\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u4ee5\u5230\u4ed6\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u7684\u548c\u3002\u7531\u4e8e\u6574\u68f5\u6811\u7684DFS\u5e8f\u786e\u5b9a\uff0c\u90a3\u4e48\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e00\u5b9a\u662fDFS\u5e8f\u5217\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6309DFS\u5e8f\u5c06\u7b54\u6848\u7d2f\u52a0\u8d77\u6765\u3002\u8be2\u95ee\u4e24\u4e2a\u4e0d\u540c\u65f6\u95f4\u7684\u5dee\u503c\u5c31\u610f\u5473\u7740\u5f97\u5230\u4e86\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\u7684\u548c(\u5373\u4e00\u68f5\u5b50\u6811\u7684\u7b54\u6848)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u5728\u505a\u4e00\u4e2a\u5e8f\u5217\u5dee\u5206--\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e0b\u6807\u662f\u65f6\u95f4\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u67d0\u4e00\u65f6\u523b\u6240\u6709\u6df1\u5ea6\u7684\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u7684\u548c\uff0c\u6bd4\u5982sum\\[x\\]\u8868\u793a\u6df1\u5ea6\u4e3ax\u7684\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u7684\u548c\u3002\u4e24\u4e2a\u65f6\u523b\u8be2\u95ee\u5f97\u5230\u7684\u7b54\u6848\u76f8\u51cf\u5bf9\u5e94\u4e00\u68f5\u5b50\u6811\u7684\u7b54\u6848\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\u4e3a\u4e86\u8fd9\u4e48\u505a\u6211\u4eec\u9700\u8981\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\u624d\u884c\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n\n#define MX 300003\n\nusing namespace std;\n\ntypedef long long ll;\n\nint fst[MX],nxt[MX*2],v[MX*2],siz[MX],dep[MX],lnum;\nll sum[MX];\nvector<int>qk[MX],qid[MX];\nll ans[MX];\nint n,m;\n\nvoid add(int p,ll x){for(;p<MX;p+=(p&(-p)))sum[p]+=x;}\nll qsm(int p){ll x=0;for(;p;p-=(p&(-p)))x+=sum[p];return x;}\nvoid addeg(int nu,int nv)\n{\n\tnxt[++lnum]=fst[nu];\n\tfst[nu]=lnum;\n\tv[lnum]=nv;\n}\nvoid dfs(int x,int fa,int d)\n{\n\tsiz[x]=1,dep[x]=d;\n\tfor(int i=fst[x];i!=-1;i=nxt[i])\n\t\tif(v[i]!=fa)\n\t\t\tdfs(v[i],x,d+1),\n\t\t\tsiz[x]+=siz[v[i]];\n}\nvoid calc(int x,int fa)\n{\n\tfor(int i=0;i<qk[x].size();i++)ans[qid[x][i]]-=(qsm(min(dep[x]+qk[x][i],MX-1))-qsm(dep[x]));\n\tfor(int i=fst[x];i!=-1;i=nxt[i])\n\t\tif(v[i]!=fa)\n\t\t\tcalc(v[i],x);\n\tfor(int i=0;i<qk[x].size();i++)ans[qid[x][i]]+=(qsm(min(dep[x]+qk[x][i],MX-1))-qsm(dep[x])+(ll)min(dep[x]-1,qk[x][i])*(ll)(siz[x]-1));\n\tadd(dep[x],siz[x]-1);\n}\nvoid input()\n{\n\tint a,b;\n\tmemset(fst,0xff,sizeof(fst)),lnum=-1;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddeg(a,b);\n\t\taddeg(b,a);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tqk[a].push_back(b);\n\t\tqid[a].push_back(i);\n\t}\n}\nint main()\n{\n\tinput();\n\tdfs(1,0,1);\n\tcalc(1,0);\n\tfor(int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1521464503,
        "uid": 41155,
        "name": "totorato",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u9996\u5148\u8981\u5206\u60c5\u51b5\u8003\u8651\n\nA\n\na\u662fb\u7684\u7956\u5148\n\n\u90a3\u4e48\u5bf9\u4e8eb\u6211\u4eec\u4ee5\u6df1\u5ea6\u4e3a\u5173\u952e\u5b57\uff0c\u7ef4\u62a4\u4e00\u4e0b\u4e3b\u5e2d\u6811\n\n\u7136\u540e\u7b97\u548c\u5373\u53ef\n\nB\n\nb\u662fa\u7684\u7956\u5148\n\n\u6211\u4eec\u76f4\u63a5min(depth[a]-1,k)\u79cd\u9009\u62e9\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u7b54\u6848\uff0c\u7edf\u8ba1\u4e00\u4e0b\u5373\u53ef\n\n\u5bf9\u4e8e\u4e3b\u5e2d\u6811\u73af\u8282\uff0c\u6211\u4eec\u4e3b\u8981\u9700\u8981\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n\n\u6ce8\u610f\u8981\u7528long long\n\n\u5176\u4ed6\u6ce8\u610f\u4e9b\u7ec6\u8282\u5373\u53ef\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 300005;\nint Rt[N], ls[N << 5], rs[N << 5], to[N << 1], nxt[N << 1], fir[N];\nint n, ecnt, idx, tot, siz[N], size[N], depth[N], dfn[N], rev[N];\nll ans, sum[N << 5];\nvoid build(int rt, int l, int r) {\n    if (l == r) return;\n    int mid = l + r >> 1;\n    build(ls[rt] = ++tot, l, mid); build(rs[rt] = ++tot, mid + 1, r);\n}\nvoid insert(int pre, int rt, int l, int r, int x, int y) {\n    sum[rt] = sum[pre] + y;\n    if (l == r) return;\n    int mid = l + r >> 1;\n    ls[rt] = ls[pre]; rs[rt] = rs[pre];\n    if (x <= mid) insert(ls[pre], ls[rt] = ++tot, l, mid, x, y);\n    else insert(rs[pre], rs[rt] = ++tot, mid + 1, r, x, y);\n} \nll query(int pre, int rt, int l, int r, int x) {\n    if (l == r) return sum[rt] - sum[pre];\n    int mid = l + r >> 1;\n    if (x > mid) return sum[ls[rt]] - sum[ls[pre]] + query(rs[pre], rs[rt], mid + 1, r, x);\n    return query(ls[pre], ls[rt], l, mid, x);\n}\nvoid ae(int u, int v) {to[++ecnt] = v; nxt[ecnt] = fir[u]; fir[u] = ecnt;}\nvoid dfs(int u, int f) {\n    int v, i;\n    rev[dfn[u] = ++idx] = u; depth[u] = depth[f] + 1; size[u] = 1;\n    for (i = fir[u]; i; i = nxt[i]) {\n        v = to[i];\n        if (v != f) {dfs(v, u); size[u] += size[v];}\n    }\n}\nint main() {\n    int l, r, u, v, p, q, k, i;\n    scanf(\"%d%d\", &n, &q);\n    for (i = 1; i < n; ++i) {\n        scanf(\"%d%d\", &u, &v);\n        ae(u, v); ae(v, u);\n    }\n    depth[1] = 1; build(Rt[0] = tot = 1, 1, n); dfs(1, 0);\n    for (i = 1; i <= n; ++i) insert(Rt[i - 1], Rt[i] = ++tot, 1, n, depth[rev[i]], size[rev[i]] - 1);\n    while (q--) {\n        scanf(\"%d%d\", &p, &k); ans = 1ll * min(depth[p] - 1, k) * (size[p] - 1);\n        l = dfn[p]; r = dfn[p] + size[p] - 1;\n        ans += query(Rt[l], Rt[r], 1, n, min(depth[p] + k, n));\n        printf(\"%lld\\n\", ans);\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1552128394,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u9996\u5148\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff0c\u4f1a\u53d1\u73b0\u6709\u8fd9\u4e48\u4e00\u53e5\u8bdd  \n\n>2.a \u548c b \u90fd\u6bd4 c \u4e0d\u77e5\u9053\u9ad8\u660e\u5230\u54ea\u91cc\u53bb\u4e86\uff1b\n\n\u601d\u8003\u4e00\u4e0b\uff1a\u5982\u679c$a$\u6bd4$c$\u9ad8\uff0c\u8bf4\u660e$a$\u662f$c$\u7684\u7956\u5148\uff0c\u540c\u6837$b$\u662f$c$\u7684\u7956\u5148  \n\u90a3\u4e48\u663e\u7136**$a$\u548c$b$\u80af\u5b9a\u90fd\u5728$c$\u5230\u6839\u7684\u8def\u5f84\u4e0a**\uff0c\u6240\u4ee5\u8981\u4e48$a$\u662f$b$\u7684\u7956\u5148\uff0c\u8981\u4e48$b$\u662f$a$\u7684\u7956\u5148  \n\n\u5148\u6765\u601d\u8003$b$\u662f$a$\u7684\u7956\u5148\u7684\u60c5\u51b5\uff1a\n\n\u9996\u5148$c$\u80af\u5b9a\u662f\u5728$a$\u7684\u5b50\u6811\u91cc\uff0c\u6709$size[a]-1$\u4e2a  \n\u7136\u540e$b$\u7684\u4e2a\u6570\u6709$min(deep[a]-1,k)$\u4e2a  \n\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u8d21\u732e\u662f$(size[a]-1)*min(deep[a]-1,k)$\n\n\u63a5\u7740\u662f$a$\u662f$b$\u7684\u7956\u5148\u7684\u60c5\u51b5\n\n$b$\u662f$a$\u5b50\u6811\u4e2d\u8ddd\u79bb$a$\u70b9\u6df1\u5ea6$k$\u4ee5\u5185\u7684\u70b9\uff0c\u6bcf\u4e2a$c$\u70b9\u4ece$b$\u70b9\u7684\u5b50\u6811\u4e2d\u53d6\u3002    \n\u8fd9\u4e00\u90e8\u5206\u7684\u8d21\u732e\u662f\u5171\u6709$\\sum size[b]-1(deep[b]-deep[a]<=k)$\n\n\u663e\u7136\u7b2c\u4e00\u90e8\u5206dfs\u7684\u65f6\u5019$O(1)$\u968f\u4fbf\u641e\u641e\u5c31\u53ef\u4ee5\u4e86\uff0c\u91cd\u70b9\u5728\u7b2c\u4e8c\u90e8\u5206\n\n\u6211\u4eec\u5728\u6bcf\u4e2a\u70b9\u5f04\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u4ee5\u6df1\u5ea6\u4e3a\u4e0b\u6807\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u5b50\u6811\u4e2d\u6bcf\u4e2a\u6df1\u5ea6\u5bf9\u5e94\u7684$c$\u70b9\u7684\u4e2a\u6570\n\n\u5230\u65f6\u5019\u53ea\u9700\u8981\u67e5\u8be2$deep[a]+1 \\rightarrow deep[a]+k$\u4e4b\u95f4\u7684\u6743\u503c\u548c\u5c31\u884c\u4e86\n\n\u4e3a\u4e86\u4e0dMLE\uff0c\u53ef\u4ee5\u8003\u8651\u5728dfs\u7684\u65f6\u5019\u5c06\u5b50\u8282\u70b9\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u7236\u8282\u70b9\u7ebf\u6bb5\u6811\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u5b8c\u4e86\n\n\u6ce8\u610f\u8981\u5f00\u4e0blonglong.......\n\n```cpp\n\n#include<bits/stdc++.h>\n#define lson tr[now].l\n#define rson tr[now].r\nusing namespace std;\n\nstruct tree\n{\n    long long sum;\n    int l,r;\n}tr[20000010];\n\nstruct op\n{\n    int k,id;\n};\n\nint n,m;\nint rt[300010],cnt,deep[300010];\nlong long ans[300010],size[300010];\nvector<int> g[300010];\nvector<op> gg[300010];\n\nint dfs(int now,int fa,int dep)\n{\n    deep[now]=dep;\n    size[now]=1;\n    rt[now]=++cnt;\n    for(int i=0;i<g[now].size();i++)\n    {\n        if(g[now][i]==fa) continue;\n        dfs(g[now][i],now,dep+1);\n        size[now]+=size[g[now][i]];\n    }\n}\n\nint push_up(int now)\n{\n    tr[now].sum=tr[lson].sum+tr[rson].sum;\n}\n\nint insert(int &now,int l,int r,int pos,int val)\n{\n    if(!now) now=++cnt;\n    if(l==r)\n    {\n        tr[now].sum+=val;\n        return 0;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid)\n    {\n        insert(lson,l,mid,pos,val);\n    }\n    else\n    {\n        insert(rson,mid+1,r,pos,val);\n    }\n    push_up(now);\n}\n\nlong long query(int now,int l,int r,int ll,int rr)\n{\n    if(ll>rr) return 0;\n    if(ll<=l&&r<=rr) return tr[now].sum;\n    int mid=(l+r)>>1;\n    if(rr<=mid)\n    {\n        return query(lson,l,mid,ll,rr);\n    }\n    else\n    {\n        if(mid<ll)\n        {\n            return query(rson,mid+1,r,ll,rr);\n        }\n        else\n        {\n            return query(lson,l,mid,ll,mid)+query(rson,mid+1,r,mid+1,rr);\n        }\n    }\n}\n\nint merge(int a,int b,int l,int r)\n{\n    if(!a) return b;\n    if(!b) return a;\n    if(l==r)\n    {\n        tr[a].sum+=tr[b].sum;\n        return a;\n    }\n    int mid=(l+r)>>1;\n    tr[a].l=merge(tr[a].l,tr[b].l,l,mid);\n    tr[a].r=merge(tr[a].r,tr[b].r,mid+1,r);\n    push_up(a);\n    return a;\n}\n\nint dfs2(int now,int fa)\n{\n    insert(rt[now],1,300000,deep[now],size[now]-1);\n    for(int i=0;i<g[now].size();i++)\n    {\n        if(g[now][i]==fa) continue;\n        dfs2(g[now][i],now);\n        merge(rt[now],rt[g[now][i]],1,300000);\n    }\n    for(int i=0;i<gg[now].size();i++)\n    {\n        int id=gg[now][i].id;\n        int k=gg[now][i].k;\n        long long sum1=(size[now]-1)*min(deep[now]-1,k);\n        long long sum2=query(rt[now],1,300000,deep[now]+1,min(deep[now]+k,300000));\n        ans[id]=sum1+sum2;\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int from,to;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&from,&to);\n        g[from].push_back(to);\n        g[to].push_back(from);\n    }\n    int pos,k;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&pos,&k);\n        gg[pos].push_back({k,i});\n    }\n    dfs(1,0,1);\n    dfs2(1,0);\n    for(int i=1;i<=m;i++)\n    {\n        printf(\"%lld\\n\",ans[i]);\n    }\n}\n```\n\n\n",
        "postTime": 1539089547,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0b\u5927\u4f6c\u7528\u4e3b\u5e2d\u6811\u3002\u3002\u3002\u5fcd\u4e0d\u4f4f\u53d1\u4e00\u6ce2\u9898\u89e3\u3002\u3002\u3002\n\n\u597d\u5427\u5176\u5b9e\u601d\u8def\u662f\u4e00\u6837\u7684\u3002\u3002\u3002\n\n\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u5927\u5c0f\uff08\u4e0d\u5305\u62ec\u8be5\u8282\u70b9\uff09\u3002\n\n\u7b54\u6848\u663e\u7136\u5206\u6210\u4e24\u90e8\u5206\uff0c\u82e5b\u662fa\u7684\u7956\u5148\uff0c\u8fd9\u90e8\u5206\u7b54\u6848\u5c31\u662fa\u7684\u8ddd\u79bb\u4e3ak\u7684\u7956\u5148\u4e2a\u6570\u4e58a\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u82e5a\u662fb\u7684\u7956\u5148\u3002\u3002\u5176\u5b9e\u7528\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\n\ndfs\u9700\u5904\u7406\u51fa\u6765\u4e4b\u540e\uff0c\u8bb0\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u5728\u5f00\u5934\u5904\u52a0\u4e0a\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6bcf\u6b21\u8be2\u95ee\u5c31\u662f\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u6c42\u533a\u95f4\u548c\u57fa\u672c\u64cd\u4f5c\u4e86\u3002\u3002\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<map>\n#define N 300050\n#define LL long long\n#define inf 2000000000\nusing namespace std;\ninline int Read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,Q,cnt=0,dfn=0;\nint hed[N],siz[N],DFN[N][2],s[N<<1],dep[N],D[N<<1];\nstruct edge{int r,nxt;}e[N<<1];\nstruct node{int l,r,mn,mx;LL sum;}d[N<<3];\nvoid insert(int u,int v){\n    e[++cnt].r=v;e[cnt].nxt=hed[u];hed[u]=cnt;\n}\nvoid dfs(int x,int F){\n    DFN[x][0]=++dfn;siz[x]=1;\n    for(int i=hed[x];i;i=e[i].nxt)\n        if(e[i].r!=F){\n            dep[e[i].r]=dep[x]+1;\n            dfs(e[i].r,x);\n            siz[x]+=siz[e[i].r];\n        }\n    DFN[x][1]=++dfn;\n    D[DFN[x][0]]=D[DFN[x][1]]=dep[x];\n    s[DFN[x][0]]=siz[x]-1;s[DFN[x][1]]=0;\n    return;\n}\nvoid build(int l,int r,int k){\n    d[k].l=l;d[k].r=r;\n    if(l==r){\n        d[k].mx=d[k].mn=D[l];d[k].sum=s[l];return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,k<<1);build(mid+1,r,k<<1|1);\n    d[k].mx=max(d[k<<1].mx,d[k<<1|1].mx);\n    d[k].mn=min(d[k<<1].mn,d[k<<1|1].mn);\n    d[k].sum=d[k<<1].sum+d[k<<1|1].sum;\n    return;\n}\nLL solve(int l,int r,int k,int w){\n    if(d[k].mn>w) return 0;\n    if(d[k].l==l && d[k].r==r && d[k].mx<=w)return d[k].sum;\n    if(r<=d[k<<1].r) return solve(l,r,k<<1,w);\n    else if(l>d[k<<1].r) return solve(l,r,k<<1|1,w);\n    else return solve(l,d[k<<1].r,k<<1,w)+solve(d[k<<1|1].l,r,k<<1|1,w);\n}\nint main(){\n    int u,v;\n    LL ans;\n    n=Read();Q=Read();\n    for(int i=1;i<n;i++){\n        u=Read();v=Read();\n        insert(u,v);insert(v,u);\n    }\n    dep[1]=1;dfs(1,0);\n    build(1,dfn,1);\n    while(Q--){\n        u=Read();v=Read();\n        ans=(LL)(siz[u]-1)*(LL)(min(v,dep[u]-1));\n        ans+=solve(DFN[u][0]+1,DFN[u][1],1,v+dep[u]);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1514970197,
        "uid": 46755,
        "name": "Iscream2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3899 \u3010[\u6e56\u5357\u96c6\u8bad]\u8c08\u7b11\u98ce\u751f\u3011"
    }
]