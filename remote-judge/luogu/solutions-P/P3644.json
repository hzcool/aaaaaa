[
    {
        "content": "## \u8fd9\u9898\u7528\u4ec0\u4e48\u5e73\u8861\u6811\u7ebf\u6bb5\u6811...\u4e24\u4e2a\u5806\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\n\n### ~~\u4e0d\u5c31\u662f\u5e38\u6570\u5927\u4e00\u70b9\u4e00\u6837\u80fd\u8fc7~~\n\n\u9996\u5148\u5206\u6790\u4e00\u4e0b\u9898\u9762\uff0c\u53ea\u80fd\u4fee\u4e00\u5ea7\u6216\u4e24\u5ea7\u6865\u3002\u5982\u679c\u67d0\u4e2a\u4eba\u7684\u5bb6\u548c\u529e\u516c\u5ba4\u5728\u4e00\u4fa7\uff0c\u90a3\u4e48\u4e0d\u7528\u8fc7\u6865\uff0c\u53ef\u4ee5\u9884\u5904\u7406\uff0c\u540c\u65f6\uff0c\u5bb6\u548c\u529e\u516c\u5ba4\u4e0d\u5728\u4e00\u4fa7\u7684\uff0c\u5fc5\u5b9a\u8981\u8fc7\u6865\uff0c\u53ef\u4ee5\u5148\u9884\u5904\u7406\u6865\u7684\u90a3\u4e2a\u957f\u5ea6\uff081\uff09\u3002\n\n\u4e0b\u9762\u5206\u7c7b\u8ba8\u8bba\uff08\u5ffd\u89c6\u6240\u6709\u4e0d\u7528\u8fc7\u6865\u7684\u4eba\uff09\uff1a\n\n\uff081\uff09K=1,\u90a3\u4e48\u6bcf\u4e2a\u4eba\u90fd\u8981\u5148\u8d70\u5230\u6865\uff0c\u518d\u8fc7\u6865\uff0c\u518d\u901a\u8fc7\u5bf9\u5cb8\u8d70\u5230\u529e\u516c\u5ba4\uff0c\u90a3\u4e48\u5728\u4e24\u5cb8\u8d70\u7684\u8ddd\u79bb\u5b9e\u9645\u4e0a\u5c31\u662f\u6bcf\u4e2a\u4eba\u7684\u5bb6\u5230\u6865\u548c\u529e\u516c\u5ba4\u5230\u6865\u7684\u8ddd\u79bb\u548c\uff0c\u5982\u679c\u6709tot\u4e2a\u4eba\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u62bd\u8c61\u6210\uff1a\u4e00\u6761\u76f4\u7ebf\u4e0a\u67092\\*tot\u4e2a\u70b9\uff0c\u8981\u627e\u4e00\u4e2a\u70b9\u4f7f\u5f97\u5176\u5230\u6240\u6709\u70b9\u8ddd\u79bb\u548c\u6700\u5c0f\uff0c**\u8fd9\u4e2a\u70b9\u5c31\u662f\u6240\u6709\u70b9\u4f4d\u7f6e\u7684\u4e2d\u4f4d\u6570\u3002**\n\n\u9759\u6001\u4e2d\u4f4d\u6570\u662f\u6bd4\u8f83\u5bb9\u6613\u6c42\u7684\uff0c\u53ea\u8981\u5bf9\u6570\u7ec4\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u8fd4\u56de\u4f4d\u4e8e\u6700\u4e2d\u95f4\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u9053\u9898\u70b9\u59cb\u7ec8\u662f\u5076\u6570\u4e2a\uff0c\u6240\u4ee5\u4e2d\u95f4\u4e24\u4e2a\u70b9\u9009\u54ea\u4e2a\u90fd\u53ef\u4ee5\u3002\n\n\uff082\uff09K=2\uff0c\u8fd9\u4e2a\u65f6\u5019\u5176\u5b9e\u662f\u628a\u6240\u6709\u4eba\u5206\u6210\u4e24\u4e2a\u533a\u57df\uff0c\u5212\u5206\u6807\u51c6\u5e94\u8be5\u662f\u5bb6\u4e0e\u529e\u516c\u5ba4\u7684\u5750\u6807\u548c\uff08\u8fd9\u4e2a\u6709\u5f88\u591a\u9898\u89e3\u5df2\u7ecf\u8bf4\u5230\u4e86\uff0c\u4e0d\u518d\u8bc1\u660e\u4e86\uff09\uff0c\u5de6\u4fa7\u7684\u4eba\u8d70\u5de6\u8fb9\u7684\u6865\uff0c\u53f3\u4fa7\u7684\u4eba\u8d70\u53f3\u8fb9\u7684\u6865\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e2d\u95f4\u7684\u5206\u754c\u70b9\uff0c\u7136\u540e\u5de6\u53f3\u5206\u522b\u662f\u4e00\u4e2aK=1\u7684\u5b50\u95ee\u9898\uff0c**\u5173\u952e\u5728\u4e8e\u600e\u4e48\u5feb\u901f\u5f97\u51fa\u5de6\u53f3\u4e24\u8fb9\u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u3002**\n\n\u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u52a8\u6001\u4e2d\u4f4d\u6570\u95ee\u9898\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6392\u5e8f\u540e\u6bcf\u4e2a\u524d\u7f00\u548c\u6bcf\u4e2a\u540e\u7f00\u7684\u4e2d\u4f4d\u6570\uff0c\u8fd9\u53ef\u4ee5\u53c2\u8003[P1168\u4e2d\u4f4d\u6570](https://www.luogu.org/problemnew/show/P1168)\uff0c\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u5927\u6839\u5806\u548c\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u7528\u5927\u6839\u5806\u7ef4\u62a4\u8f83\u5c0f\u7684\u4e00\u534a\u7684\u6570\uff0c\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u8f83\u5927\u4e00\u534a\u7684\u6570\uff0c\u6bcf\u6b21\u6765\u4e00\u5bf9\u65b0\u7684\u6570\u65f6\uff0c\u5148\u63d2\u5165\u5927\u6839\u5806\uff0c\u6b64\u65f6\u4e24\u4e2a\u5806\u4e0d\u5e73\u8861\uff0c\u8981\u628a\u5927\u6839\u5806\u7684\u5806\u9876\uff08\u4e5f\u5c31\u662f\u6700\u63a5\u8fd1\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\uff09\u79fb\u5230\u5c0f\u6839\u5806\u4e0a\uff0c\u7136\u540e\u518d\u505a\u68c0\u6d4b\uff0c\u5982\u679c\u5927\u6839\u5806\u7684\u5806\u9876\u6bd4\u5c0f\u6839\u5806\u5806\u9876\u8fd8\u5927\uff0c\u90a3\u4e48\u4ea4\u6362\u4e24\u4e2a\u5806\u9876\u3002\n\n\u8fdb\u4e00\u6b65\u62bd\u8c61\uff0c\u5176\u5b9e\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5c06\u67d0\u4e2a\u524d\u7f00/\u540e\u7f00\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u5757\uff0c\u5b9e\u9645\u4e0a\u8fd9\u91cc\u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u5c31\u662f\uff1a\u53f3\u4fa7\u70b9\u5750\u6807\u548c\u51cf\u53bb\u5de6\u4fa7\u70b9\u5750\u6807\u548c\uff0c**\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u6bcf\u4e2a\u5de6\u4fa7\u70b9\u4e0e\u4e00\u4e2a\u53f3\u4fa7\u70b9\u914d\u5bf9\uff0c\u5b83\u4eec\u7684\u8fde\u7ebf\u4e00\u5b9a\u7ecf\u8fc7\u4e2d\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u5750\u6807\u5dee\u5373\u662f\u6700\u5c0f\u8ddd\u79bb\u548c\u3002**\u5982\u6b64\u4e00\u6765\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5806\u4e2d\u63d2\u5165\u5143\u7d20\u65f6\u66f4\u65b0\u5de6\u53f3\u5750\u6807\u548c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u67d0\u4e2a\u524d\u7f00/\u540e\u7f00\u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u3002\n\n\u6574\u7406\u4e00\u4e0b\u601d\u8def\uff1a\u5148\u6309\u5bb6\u4e0e\u529e\u516c\u5ba4\u5750\u6807\u548c\u6392\u5e8f\uff0c\u7136\u540e\u9884\u5904\u7406\u6bcf\u4e2a\u524d\u7f00\u548c\u6bcf\u4e2a\u540e\u7f00\u7684\u8ddd\u79bb\u548c\uff0c\u6700\u540e\u679a\u4e3e\u4e2d\u95f4\u7684\u65ad\u70b9\uff0c\u5c06\u65ad\u70b9\u4e24\u4fa7\u7684\u8ddd\u79bb\u548c\u76f8\u52a0\u5c31\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u5728\u6240\u6709\u53ef\u80fd\u7b54\u6848\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1000010;\nstruct P {\n\tint a,b;\n}p[MAXN];\nint k,n,tot,cnt,x1,x2,pl[MAXN];\nlong long ans,haf[2][MAXN],s1,s2;    //ans\u662f\u9884\u5904\u7406\u503c,haf[0]\u662f\u524d\u7f00\u8ddd\u79bb,haf[1]\u662f\u540e\u7f00\u8ddd\u79bb,s1\u662f\u5de6\u4fa7\u5750\u6807\u548c,s2\u662f\u53f3\u4fa7\u5750\u6807\u548c\nchar c1,c2;\npriority_queue <int,vector<int>,less<int> > q1;\npriority_queue <int,vector<int>,greater<int> > q2;\nbool cmp (P a,P b) {\n\treturn a.a+a.b<b.a+b.b;    //\u6309\u7167\u5bb6\u548c\u529e\u516c\u5ba4\u5750\u6807\u548c\u6392\u5e8f\n}\nint main () {\n\tcin >> k >> n;\n\tfor (int i=1;i<=n;i++) {\n\t\tcin >> c1 >> x1>> c2 >> x2;\n\t\tif (c1==c2) {\n\t\t\tans+=abs(x2-x1);\n\t\t} else {\n\t\t\tans++,p[++tot].a=x1;\n\t\t\tp[tot].b=x2,pl[++cnt]=x1;\n\t\t\tpl[++cnt]=x2;\n\t\t}\n\t}\n\tif (k==1) {\n\t\tsort(pl+1,pl+cnt+1);\n\t\tint pos=pl[cnt/2];\n\t\tfor (int i=1;i<=cnt;i++) {\n\t\t\tans+=abs(pl[i]-pos);\n\t\t}\n\t\tcout << ans << endl;\n\t} else {\n\t\tsort(p+1,p+tot+1,cmp);\n\t\tfor (int i=1;i<=tot;i++) {\n\t\t\tq1.push(p[i].a),q1.push(p[i].b);\n\t\t\ts1+=p[i].a+p[i].b;\n\t\t   s2+=q1.top(),s1-=q1.top(),q2.push(q1.top());\n\t\t\tq1.pop();\n\t\t\tif (q1.top()>q2.top()) {    //\u4ea4\u6362\u5806\u9876\n\t\t\t\tint t=q2.top(),l=q1.top();\n\t\t\t\tq2.pop(),q1.pop();\n\t\t\t\tq2.push(l),q1.push(t);\n\t\t\t\ts1+=t-l,s2-=t-l;\n\t\t\t}\n           \thaf[0][i]=s2-s1;    //\u5de6\u53f3\u5750\u6807\u548c\u7684\u5dee\u5373\u4e3a\u6700\u5c0f\u8ddd\u79bb\u548c\n    \t}\n    \twhile (!q1.empty()) {\n    \t\tq1.pop();\n\t\t}\n\t\twhile (!q2.empty()) {\n    \t\tq2.pop();\n\t\t}\n\t\ts1=s2=0;\n\t\tfor (int i=tot;i>=1;i--) {\n\t\t\tq1.push(p[i].a),q1.push(p[i].b);\n\t\t\ts1+=p[i].a+p[i].b;\n\t\t\ts2+=q1.top(),s1-=q1.top(),q2.push(q1.top());\n\t\t\tq1.pop();\n\t\t\tif (q1.top()>q2.top()) {    //\u4ea4\u6362\u5806\u9876\n\t\t\t\tint t=q2.top(),l=q1.top();\n\t\t\t\tq2.pop(),q1.pop();\n\t\t\t\tq2.push(l),q1.push(t);\n\t\t\t\ts1+=t-l,s2-=t-l;\n\t\t\t}\n           \thaf[1][i]=s2-s1;    //\u5de6\u53f3\u5750\u6807\u548c\u7684\u5dee\u5373\u4e3a\u6700\u5c0f\u8ddd\u79bb\u548c\n\t\t}\n\t\tlong long mn=1e18;\n\t\tfor (int i=1;i<=tot+1;i++) {\n\t\t\tmn=min(mn,haf[0][i-1]+haf[1][i]);\n\t\t}\n\t\tcout << mn+ans;    //\u522b\u5fd8\u52a0\u4e0a\u9884\u5904\u7406\u7684\u503c\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1549699404,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u5bf9\u4e8e\u8d77\u70b9\u548c\u7ec8\u70b9\u5728\u540c\u4e00\u4fa7\u7684\u60c5\u51b5\uff0c\u4fee\u6865\u5bf9\u8ddd\u79bb\u6ca1\u6709\u5f71\u54cd\uff0c\u53ef\u4ee5\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u8d77\u70b9\u548c\u7ec8\u70b9\u4e0d\u5728\u540c\u4e00\u4fa7\u7684\u60c5\u51b5\uff0c\u6beb\u65e0\u60ac\u5ff5\u9700\u8981\u8fc7\u4e00\u6b21\u6865\uff0c\u6211\u4eec\u5148\u63d0\u524d\u628a\u8fc7\u6865\u7684\u8ddd\u79bb\uff08$1$ \u5355\u4f4d\u957f\u5ea6\uff09\u7d2f\u52a0\u5165\u7b54\u6848\u3002\n\n\u7ecf\u8fc7\u8fd9\u6837\u4e00\u8f6e\u9884\u5904\u7406\u540e\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u7ed9\u51fa $2N$ \u4e2a\u70b9\uff0c\u6211\u4eec\u9700\u8981\u6311\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9 $2N$ \u4e2a\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u548c\u6700\u5c0f\u3002\n\n\u5148\u8003\u8651 $K=1$ \u7684\u60c5\u51b5\uff0c\u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u7ed3\u8bba\uff0c\u6700\u4f18\u4f4d\u7f6e\u663e\u7136\u5728\u4e2d\u4f4d\u6570\u5904\uff08\u5373\u6392\u5e8f\u540e\u7b2c $N$ \u4e2a\u70b9\u548c\u7b2c $N+1$ \u4e2a\u70b9\u4e4b\u95f4\u7684\u4efb\u610f\u4e00\u70b9\uff09\u53d6\u5f97\u3002\n\n\u63a5\u4e0b\u6765\u662f $K=2$ \u7684\u60c5\u51b5\u3002\u6b64\u65f6\u96c6\u5408\u70b9\u53d8\u6210\u4e86\u4e24\u4e2a\uff0c\u753b\u56fe\u540e\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6761\u7ebf\u6bb5 $AB$ \u800c\u8a00\uff0c\u9009\u62e9\u79bb\u8fd9\u4e2a\u7ebf\u6bb5\u4e2d\u70b9\u8f83\u8fd1\u7684\u96c6\u5408\u70b9\u7ed3\u679c\u6700\u4f18\u3002\n\n\u8003\u8651\u5c06\u6240\u6709\u7ebf\u6bb5\u6309 $S_i+T_i$ \u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u679a\u4e3e\u533a\u57df\u5206\u754c\u70b9\uff0c\u5219\u5206\u754c\u70b9\u5de6\u8fb9\u7684\u533a\u57df\u524d\u5f80\u5de6\u4fa7\u96c6\u5408\u70b9\uff0c\u53f3\u8fb9\u7684\u533a\u57df\u524d\u5f80\u53f3\u4fa7\u96c6\u5408\u70b9\uff0c\u95ee\u9898\u53d8\u6210\u4e86 $K=1$ \u7684\u60c5\u51b5\u3002\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u4e24\u4e2a\u96c6\u5408\u7684\u4e2d\u4f4d\u6570\u3002\u8fd9\u4e2a\u6709\u4e09\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b9e\u73b0\uff1a\n\n1. \u503c\u57df\u7ebf\u6bb5\u6811\uff1b\n2. \u5e73\u8861\u6811\uff1b\n3. \u5bf9\u9876\u5806\u3002\n\n\u524d\u9762\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\uff0c\u8fd9\u91cc\u91cd\u70b9\u8bb2\u4e00\u4e0b\u5bf9\u9876\u5806\u7684\u5b9e\u73b0\u3002\n\n\u8bbe\u96c6\u5408\u5927\u5c0f\u4e3a $s$\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u5b58\u653e\u524d $\\dfrac{s}{2}$ \u5c0f\u7684\u5143\u7d20\uff0c\u518d\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5b58\u653e\u540e $\\dfrac{s}{2}$ \u5c0f\u7684\u5143\u7d20\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e24\u5806\u7684\u5806\u9876\uff08\u4efb\u53d6\u5176\u4e00\u5373\u53ef\uff09\u3002\n\n\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u5148\u5c06\u5143\u7d20\u63d2\u5165\u5927\u6839\u5806\uff0c\u63a5\u7740\u5f39\u51fa\u5806\u9876\u653e\u5165\u5c0f\u6839\u5806\uff08\u4f7f\u4e24\u5806\u5927\u5c0f\u4e00\u81f4\uff09\u3002\u8fd9\u65f6\u5019\u53ef\u80fd\u4f1a\u51fa\u73b0\u5927\u6839\u5806\u5806\u9876\u5927\u4e8e\u5c0f\u6839\u5806\u5806\u9876\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5c06\u4e24\u4e2a\u5806\u9876\u4ea4\u6362\u4ee5\u4fdd\u8bc1\u6570\u636e\u6709\u5e8f\u6027\u3002\n\n```cpp\n// Problem : P3644 [APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\n// Contest : Luogu\n// URL : https://www.luogu.com.cn/problem/P3644\n// Memory Limit : 256 MB\n// Time Limit : 2000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n#include <iostream>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nint k,n;\nnamespace sub1\n{\n int a[200005],cnt;\n void solve()\n {\n  long long ans=0;\n  for(int i=1;i<=n;i++)\n  {\n   string s,t;\n   int x,y;\n   cin>>s>>x>>t>>y;\n   if(s==t)\n    ans+=abs(x-y);\n   else\n    ans++,a[++cnt]=x,a[++cnt]=y;\n  }\n  sort(a+1,a+cnt+1);\n  int pos=a[cnt/2];\n  for(int i=1;i<=cnt;i++)\n   ans+=abs(a[i]-pos);\n  cout<<ans<<endl;\n }\n}\nnamespace sub2\n{\n struct point\n {\n  int x,y;\n  bool operator<(const point&a)const\n  {\n   return x+y<a.x+a.y;\n  }\n }a[100005];\n int cnt;\n long long pre[100005],post[100005];\n priority_queue<int> q1;\n priority_queue<int,vector<int>,greater<int> > q2;\n void solve()\n {\n  long long ans=0;\n  for(int i=1;i<=n;i++)\n  {\n   string s,t;\n   int x,y;\n   cin>>s>>x>>t>>y;\n   if(s==t)\n    ans+=abs(x-y);\n   else\n    ans++,a[++cnt].x=x,a[cnt].y=y;\n  }\n  sort(a+1,a+cnt+1);\n  long long s1=0,s2=0;\n  for(int i=1;i<=cnt;i++)\n  {\n   q1.push(a[i].x),q1.push(a[i].y);\n   s1+=a[i].x,s1+=a[i].y;\n   int u=q1.top();\n   q1.pop(),s1-=u;\n   q2.push(u),s2+=u;\n   if(q1.top()>q2.top())\n   {\n    int x=q1.top(),y=q2.top();\n    q1.pop(),q2.pop();\n    q1.push(y),q2.push(x);\n    s1+=y-x,s2+=x-y;\n   }\n   pre[i]=s2-s1;\n  }\n  while(!q1.empty())\n   q1.pop();\n  while(!q2.empty())\n   q2.pop();\n  s1=0,s2=0;\n  for(int i=cnt;i;i--)\n  {\n   q1.push(a[i].x),q1.push(a[i].y);\n   s1+=a[i].x,s1+=a[i].y;\n   int u=q1.top();\n   q1.pop(),s1-=u;\n   q2.push(u),s2+=u;\n   if(q1.top()>q2.top())\n   {\n    int x=q1.top(),y=q2.top();\n    q1.pop(),q2.pop();\n    q1.push(y),q2.push(x);\n    s1+=y-x,s2+=x-y;\n   }\n   post[i]=s2-s1;\n  }\n  long long sum=(cnt?1e18:0);\n  for(int i=1;i<cnt;i++)\n   sum=min(sum,pre[i]+post[i+1]);\n  cout<<ans+sum<<endl;\n }\n}\nint main()\n{\n cin>>k>>n;\n if(k==1)sub1::solve();\n else sub2::solve();\n return 0;\n}\n```",
        "postTime": 1595349576,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "[P3644 [APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865](https://www.luogu.org/problemnew/show/P3644)\n\n\u6ce8\uff1a\u6b64\u9898\u89e3\u4e3a\u697c\u4e0a\u90a3\u4e2a\u7ebf\u6bb5\u6811\u9898\u89e3\u7684\u4ee3\u7801\u8865\u5145\u3002\n\n\u5f53$k==1$\u7684\u65f6\u5019\uff0c\u5982\u697c\u4e0a\u6240\u8bf4\uff1a\n\n\u5982\u679c\u5de5\u4f5c\u5730\u70b9\u5728\u4e00\u4fa7\uff0c\u90a3\u4e48\u8def\u7a0b\u5c31\u662f$r-l$\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e0d\u5728\u4e00\u4fa7\u7684\u7ebf\u6bb5\u7aef\u70b9\u6c42\u4e2a\u4e2d\u4f4d\u6570\uff0c\u8fd9\u6837\u80af\u5b9a\u80fd\u4f7f\u603b\u8def\u7a0b\u6700\u5c0f\u3002\n\n\u4e0d\u8fc7\uff0c$k==1$\u7684\u60c5\u51b5\u6ca1\u6709\u5fc5\u8981\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u4e22\u8fdb\u6570\u7ec4\u91cc\u6392\u4e2a\u5e8f\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u4e2d\u4f4d\u6570\u4e86\u3002\n\n\u5f53K\u4e3a2\u7684\u65f6\u5019\uff0c\u4e5f\u5982\u697c\u4e0a\u6240\u8bf4\uff1a\n\n\u53d6\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u4e2d\u70b9\uff0c\u5982\u679c\u9760\u8fd1\u5de6\u8fb9\u7684\u6865\uff0c\u5c31\u5f80\u5de6\u8fb9\u8fc7\u6865\uff0c\u5426\u5219\u5f80\u53f3\u8fb9\u8fc7\u6865\u3002\n\n\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u70b9\uff0c\u7136\u540e\u4e24\u8fb9\u90fd\u662f$k==1$\u7684\u60c5\u51b5\uff0c\u7528\u7ebf\u6bb5\u6811\u6c42$\\sum|\\text{\u4f4d\u7f6e}-\\text{\u4e2d\u4f4d\u6570}|$\u5373\u53ef\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff0c\u6211\u5206\u4e86\u4e24\u4e2a$namespace$\u6765\u5199\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 1000010\nusing namespace std;\nint n,k;\nint top=0,stack[MAXN];\nlong long ans=0;\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\ninline long long abs(const long long x){return x>0?x:-x;}\nnamespace one{//k==1\n\tint m=0;\n\tvoid main(){\n\t\tchar ch[2];\n\t\tint x,y,p,q;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tscanf(\"%s\",ch);x=read();p=ch[0]-'A';\n\t\t\tscanf(\"%s\",ch);y=read();q=ch[0]-'A';\n\t\t\tif(p==q){\n\t\t\t\tans+=abs(x-y);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(p==1)swap(x,y);\n\t\t\tm++;\n\t\t\tstack[++top]=x;stack[++top]=y;\n\t\t}\n\t\tsort(stack+1,stack+top+1);//\u76f4\u63a5\u4e22\u8fdb\u6570\u7ec4\u6392\u5e8f\n\t\tint mid=stack[top>>1];\n\t\tfor(int i=1;i<=top;i++)ans+=abs(mid-stack[i]);\n\t\tprintf(\"%lld\\n\",ans+m);\n\t}\n}\nnamespace two{//k==2\n\t#define LSON rt<<1\n\t#define RSON rt<<1|1\n\t#define DATA(rt) a[rt].data\n\t#define SUM(rt) a[rt].sum\n\t#define LSIDE(rt) a[rt].l\n\t#define RSIDE(rt) a[rt].r\n\tint num=0;\n\tlong long s[MAXN];\n\tstruct Line{\n\t\tint x,y;\n\t\tfriend bool operator <(const Line &p,const Line &q){\n\t\t\treturn (p.x+p.y)<(q.x+q.y);\n\t\t}\n\t}line[MAXN];\n\tstruct Segment_Tree{\n\t\tlong long data,sum;\n\t\tint l,r;\n\t}a[MAXN<<2];\n\tinline void add_line(int x,int y){\n\t\tnum++;\n\t\tline[num].x=x;line[num].y=y;\n\t}\n\tinline void pushup(int rt){\n\t\tDATA(rt)=DATA(LSON)+DATA(RSON);\n\t\tSUM(rt)=SUM(LSON)+SUM(RSON);\n\t}\n\tvoid buildtree(int l,int r,int rt){\n\t\tLSIDE(rt)=l;RSIDE(rt)=r;DATA(rt)=SUM(rt)=0;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tbuildtree(l,mid,LSON);\n\t\tbuildtree(mid+1,r,RSON);\n\t}\n\tvoid update(int k,int v,int rt){\n\t\tDATA(rt)++;SUM(rt)+=v;\n\t\tif(LSIDE(rt)==RSIDE(rt))return;\n\t\tint mid=LSIDE(rt)+RSIDE(rt)>>1;\n\t\tif(k<=mid)update(k,v,LSON);\n\t\telse update(k,v,RSON);\n\t}\n\tlong long query(int k,int rt){\n\t\tif(LSIDE(rt)==RSIDE(rt))return 1LL*stack[LSIDE(rt)]*k;\n\t\tif(k<=DATA(LSON))return query(k,LSON);\n\t\telse return SUM(LSON)+query(k-DATA(LSON),RSON);\n\t}\n\tinline long long ask(int x){return SUM(1)-2LL*query(x,1);}\n\tvoid work(){\n\t\tbuildtree(1,top,1);\n\t\tfor(int i=1;i<=num;i++){\n\t\t\tline[i].x=lower_bound(stack+1,stack+top+1,line[i].x)-stack;\n\t\t\tline[i].y=lower_bound(stack+1,stack+top+1,line[i].y)-stack;\n\t\t\tupdate(line[i].x,stack[line[i].x],1);\n\t\t\tupdate(line[i].y,stack[line[i].y],1);\n\t\t\ts[i]=ask(i);\n\t\t}\n\t\tlong long minn=s[num];\n\t\tbuildtree(1,top,1);//\u672c\u849f\u84bb\u4e0d\u60f3\u5efa\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u76f4\u63a5\u91cd\u5efa\u3002\u3002\u3002\n\t\tfor(int i=num;i>=1;i--){\n\t\t\tupdate(line[i].x,stack[line[i].x],1);\n\t\t\tupdate(line[i].y,stack[line[i].y],1);\n\t\t\tminn=min(minn,s[i-1]+ask(num-i+1));\n\t\t}\n\t\tprintf(\"%lld\\n\",minn+ans);\n\t}\n\tvoid main(){\n\t\tchar ch[2];\n\t\tint x,y,p,q;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tscanf(\"%s\",ch);x=read();p=ch[0]-'A';\n\t\t\tscanf(\"%s\",ch);y=read();q=ch[0]-'A';\n\t\t\tif(p==q){\n\t\t\t\tans+=abs(x-y);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tans++;\n\t\t\tstack[++top]=x;stack[++top]=y;\n\t\t\tif(x>y)swap(x,y);\n\t\t\tadd_line(x,y);\n\t\t}\n\t\tif(!num){//\u8bb0\u5f97\u7279\u5224\uff01\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\treturn;\n\t\t}\n\t\tsort(line+1,line+num+1);\n\t\tsort(stack+1,stack+top+1);\n\t\ttop=unique(stack+1,stack+top+1)-stack-1;\n\t\twork();\n\t}\n}\nint main(){//\u4e3b\u51fd\u6570So easy!\n\tk=read();n=read();\n\tif(k==1)one::main();\n\telse two::main();\n    return 0;\n}\n\n```",
        "postTime": 1537102831,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a$Splay$\u7684\u9898\u89e3\n\n\u9996\u5148,\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u5bb6\u548c\u529e\u516c\u5ba4\u5728\u540c\u4e00\u4fa7,\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u9884\u5904\u7406;\n\n\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4fa7,\u4e5f\u53ef\u4ee5**\u52a0\u4e0a1**(\u5f53\u7136\u8981\u8fc7\u6865\u5566)\n\n****\n\u5f53k==1\u65f6\n\n\u6211\u4eec\u8bbe\u6865\u7684\u4f4d\u7f6e\u4e3a$pos$,\u6bcf\u4e2a\u4eba\u7684\u5bb6\u7684\u4f4d\u7f6e\u4e3a$x[i]$,\u529e\u516c\u5ba4\u7684\u4f4d\u7f6e\u4e3a$y[i]$,\n\n\u5219\u603b\u4ee3\u4ef7\u4e3a$\\sum_{i=1}^n (abs(x_i-pos)+abs(y_i-pos))$\n\n\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230,\u5176\u5b9e\u5bb6\u548c\u529e\u516c\u5ba4\u7684\u533a\u522b\u4e0d\u662f\u5f88\u660e\u663e\u3002\n\n\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7b80\u5316\u4e3a:\n\n**\u5728\u6570\u8f74\u4e0a\u4efb\u53d6\u4e00\u70b9a,\u6700\u5c0f\u5316** $\\sum abs(a-x_i)$\n\n\u90a3\u4e48\u6211\u4eec\u5c06\u6240\u6709\u5bb6\u548c\u529e\u516c\u5ba4\u6309\u7167\u5750\u6807\u6392\u5e8f,\u6865\u7684\u4f4d\u7f6e\u80af\u5b9a\u5c31\u5728\u4e2d\u95f4\u4e24\u4e2a\u7aef\u70b9\u7684\u4f4d\u7f6e\u4e4b\u95f4\n\n\u81f3\u4e8e\u600e\u4e48\u7edf\u8ba1\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u5427(~~\u5c31\u5728\u4e0b\u9762~~)\n\n\u628a\u6240\u6709\u5bb6\u548c\u529e\u516c\u5ba4\u7684\u5750\u6807\u4e22\u8fdb\u4e00\u68f5Splay\u4e2d,\u5e73\u5206\n\n\u7edf\u8ba1\u51fa\u5de6\u8fb9\u7684sum\u548c\u53f3\u8fb9\u7684sum,\u5de6\u8fb9\u7684sz\u548c\u53f3\u8fb9\u7684sz\n\n****\n\u5f53k==2\u65f6\n\n\u518d\u5c06\u4e0a\u9762\u7684\u5f0f\u5b50\u7ec6\u5206\u4e00\u4e0b,\u6211\u4eec\u80fd\u53d1\u73b0:\n\n**\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84$x[i]->y[i]$,\u5176\u5b9e\u9645\u957f\u5ea6\u548c$1/2(x[i]+y[i])$\u8ddd\u79bb\u6865\u7684\u8ddd\u79bb\u6709\u5173**\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u6240\u6709\u8def\u5f84\u6309\u7167$(x[i]+y[i])$\u6392\u5e8f\n\n\u8003\u8651\u5efa\u7acb\u4e24\u9897Splay\n\n\u9996\u5148\u628a\u6240\u6709\u7684\u8282\u70b9\u5168\u90e8\u63d2\u5165\u4e00\u68f5Splay\u4e2d\u53bb\n\n\u7136\u540e**\u4e00\u5bf9\u4e00\u5bf9(\u6ce8\u610f\u6b64\u5904)**\u7684\u4ece\u8001Splay\u4e2d\u4e22\u5230\u53e6\u4e00\u68f5Splay\u4e2d\u53bb,\u4e00\u8fb9\u7edf\u8ba1\u7b54\u6848\n\n\u590d\u6742\u5ea6\u662fO(nlogn)\n\n\u5e94\u8be5\u662f\u505a\u5b8c\u4e86\n\n****\n\u4ec0\u4e48!!!!\u4f60\u88ab\u5361\u5e38\u4e86!!!!\n\n\u5728\u4e0b\u63d0\u4ea4\u7684\u65f6\u5019,\u7b2c\u4e8c\u4e2a\u70b9\u603b\u662fTLE...\u4ea4\u4e86\u65e0\u6570\u904d\u768495\u5206\n\n\u770b\u7740\u673a\u623f\u7684\u5176\u4ed6dalao\u90fd\u662f\u7528\u7ebf\u6bb5\u6811\u505a\u7684,\u5e76\u4e0d\u662f\u5f88\u7518\u5fc3\u554a......\n\n\u4f46\u662f\u65b9\u6cd5\u603b\u6bd4\u56f0\u96be\u591a(hhhh)\n\n\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u4ee3\u7801\n\n(\u4e00\u904d\u8fc7\u7684dalao\u53ef\u4ee5\u7565\u8fc7)\n\n****\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define RG register\n#define isr(i) (s[1][fa[(i)]]==(i))\n\nusing namespace std;\ntypedef long long ll;\nconst int N=200010;\nconst int inf=2147483647;\nint cntt;\nll Ans[N];\n\nstruct line{\n    int l,r;\n    bool operator <(const line &a)const{\n        return (l+r)<(a.l+a.r);\n    }\n}t[N];\n\ninline int read()\n{\n    RG int x=0,w=1;char ch=getchar();\n    while ((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if (ch=='-') w=0,ch=getchar();\n    while (ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return w?x:-x;\n}\n\nbool cmp(line a,line b){return (a.l+a.r)<(b.l+b.r);}\n\nstruct Splay{\n    int root,tot,j,k;\n    int s[2][N],fa[N],sz[N],cnt[N];\n    ll sum[N],v[N];\n\n    inline bool empty(){return !(bool)sz[root];}\n\n    inline void clear(){\n        root=tot=0;\n        memset(s,0,sizeof(s));\n        memset(fa,0,sizeof(fa));\n        memset(sz,0,sizeof(sz));\n        memset(sum,0,sizeof(sum));\n        memset(cnt,0,sizeof(cnt));\n        memset(v,0,sizeof(v));\n    }\n    \n    inline void init(int i,int x,int ff){\n        s[0][i]=s[1][i]=0;fa[i]=ff;\n        v[i]=sum[i]=x;cnt[i]=sz[i]=1;\n    }\n    \n    inline void update(int i){\n        sz[i]=sz[s[0][i]]+sz[s[1][i]]+cnt[i];\n        sum[i]=sum[s[0][i]]+sum[s[1][i]]+cnt[i]*v[i];\n    }\n\n    inline void rot(int i){\n        j=fa[i];k=fa[j];\n        RG bool b=isr(i);\n        fa[i]=k;s[isr(j)][k]=i;\n        if(s[!b][i])fa[s[!b][i]]=j;s[b][j]=s[!b][i];\n        fa[j]=i;s[!b][i]=j;\n        update(j);\n    }\n\n    inline void splay(int i,int a){\n        if(!a)root=i;\n        while(fa[i]^a){\n            j=fa[i];\n            if(fa[j]^a)\n                isr(i)^isr(j)?rot(i):rot(j);\n            rot(i);\n        }\n        update(i);\n    }\n\n    inline void insert(int x){\n        RG int i=root,ff=0;\n        while(v[i]!=x&&i){\n            ff=i;i=s[v[i]<x][i];\n        }\n        if(i&&v[i]==x)cnt[i]++;\n        else{\n            i=++tot;\n            if(ff)s[v[ff]<x][ff]=i;\n            init(i,x,ff);\n            if(x==inf||x==-inf){\n                sz[i]=sum[i]=cnt[i]=0;\n            }\n        }\n        splay(i,0);\n    }\n\n    inline int find(int x){\n        RG int i=root;\n        while(v[i]!=x&&s[v[i]<x][i])\n            i=s[v[i]<x][i];\n        return i;\n    }\n    \n    inline void Next(int x,int &lst,int &nxt){\n        RG int i=find(x);splay(i,0);\n        if(v[i]>x)nxt=i;\n        else {\n            nxt=s[1][i];\n            while(s[0][nxt])nxt=s[0][nxt];\n        }\n        if(v[i]<x)lst=i;\n        else{\n            lst=s[0][i];\n            while(s[1][lst])lst=s[1][lst];\n        }\n    }\n    \n    inline void Delete(int x){\n        RG int i=find(x);\n        cnt[i]--;splay(i,0);\n    }\n    \n    inline int kth(int k){\n        RG int i=root;\n        while(1){\n            if(sz[s[0][i]]>=k)i=s[0][i];\n            else if(sz[s[0][i]]+cnt[i]>=k)return i;\n            else k-=sz[s[0][i]]+cnt[i],i=s[1][i];\n        }\n    }\n    \n    inline ll bridge(){//\u8fd9\u91cc\u662f\u7edf\u8ba1\u7b54\u6848(\u4e0d\u5f00long long\u53ef\u662f\u4f1a\u70b8\u98de\u7684)\n        if(empty())return 0;\n        int i=kth(sz[root]/2);splay(i,0);\n        return 1ll*sz[s[0][i]]*v[i]-sum[s[0][i]]+sum[s[1][i]]-1ll*sz[s[1][i]]*v[i];\n    }\n}A,B;\n\ninline ll input(ll n){\n    RG char p[5],q[5];\n    RG ll ans=0;RG int s,T;\n    \n    cntt=0;\n    A.insert(inf);A.insert(-inf);\n    B.insert(inf);B.insert(-inf);\n    \n    for(RG int i=1;i<=n;i++){\n        scanf(\"%s\",p+1);s=read();\n        scanf(\"%s\",q+1);T=read();\n        if(p[1]!=q[1]){\n            ans++;\n            t[++cntt].l=s;t[cntt].r=T;\n        }\n        else ans+=abs(s-T);\n    }\n    sort(t+1,t+cntt+1);\n    for(RG int i=1;i<=cntt;i++){\n        A.insert(t[i].l);A.insert(t[i].r);\n        Ans[i]=A.bridge();\n        /*\n            \u6700\u5173\u952e\u7684\u5730\u65b9\u5c31\u662f\u8fd9\u91cc\n            \u76f4\u63a5\u8bb0\u5f55\u4e00\u4e2aAns\u6570\u7ec4\u8868\u793a\u524di\u6761\u8def\u5f84\u5168\u90e8\u8d70\u5230\u4e00\u5ea7\u6865\u4e0a\u7684\u7b54\u6848\n            \u4e4b\u540e\u5c31\u4e0d\u7528\u5220\u9664\u4e86,\u628a\u8def\u5f84\u5012\u7740\u63d2\u5165\u53e6\u5916\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e2d\u7edf\u8ba1\u5373\u53ef\n         */\n    }\n    \n    return ans;\n}\n\ninline void work2(int k,int n){\n    \n    RG ll ans=input(n);\n    RG ll minn=Ans[cntt];\n    if(A.empty()){\n        printf(\"%lld\\n\",ans);\n        return;\n    }\n    \n    for(RG int i=cntt;i>=1;i--){\n        B.insert(t[i].l);B.insert(t[i].r);\n        minn=min(minn,Ans[i-1]+B.bridge());\n        //\u5012\u63d2\u7edf\u8ba1\u90e8\u5206\n    }\n\n    printf(\"%lld\\n\",minn+ans);\n}\n\ninline void work1(int k,int n){\n    printf(\"%lld\\n\",input(n)+A.bridge());\n}\n\nint main()\n{\n    RG int k,n;\n    k=read();n=read();\n    if(k^1)work2(k,n);\n    else work1(k,n);\n    return 0;\n}\n/*\n    k==1\n    \u628al,r\u90fd\u4e22splay\u91cc,\u53d6\u5176\u4e2d\u4f4d\u6570\u66b4\u529b\u7edf\u8ba1\n    k==2\n    \u628al,r\u90fd\u4e22\u5230\u53f3\u8fb9\u7684splay\u91cc,\n    \u4e4b\u540e\u4e00\u4e2a\u4e00\u4e2a\u5730\u63d0\u53d6\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u5e76\u4f9d\u6b21\u7edf\u8ba1\n*/\n\n```",
        "postTime": 1515224710,
        "uid": 47641,
        "name": "fdfdf",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\n\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u7aef\u7684\u5efa\u7b51\uff0c\u6865\u5bf9\u5b83\u4e0d\u9020\u6210\u5f71\u54cd\uff0c\u76f4\u63a5\u52a0\u5165\u7b54\u6848\u4e0d\u7ba1\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8003\u8651\u5176\u5b83\u7684\u5373\u53ef\n\n\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u5df2\u7ecf\u4e0e\u54ea\u4e00\u4fa7\u65e0\u5173\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u6240\u6709\u5269\u4e0b\u7684\u5750\u6807\u4e00\u8d77\u770b\u5f85\uff0c\u7b54\u6848\u5c31\u662f\u4ed6\u4eec\u4e0e\u6865\u5750\u6807\u5dee\u4e4b\u548c\u52a0\u4e0a\u5269\u4f59\u5750\u6807\u6570\u91cf\u7684\u4e00\u534a\uff08\u5373\u8def\u5f84\u7ecf\u8fc7\u6865\u7684\u6b21\u6570\uff09\n\n\u8003\u8651K=1\u7684\u60c5\u51b5\uff0c\u663e\u7136\u662f\u5c06\u6865\u5efa\u5728\u8fd9\u4e9b\u5750\u6807\u7684\u4e2d\u4f4d\u6570\u4e0a\uff0c\u76f4\u63a5\u7528\u4e2d\u4f4d\u6570\u7b97\u51fa\u7b54\u6848\u5373\u53ef\n\n\u8003\u8651K=2\u7684\u60c5\u51b5\uff0c\u5efa\u4e24\u5ea7\u6865\u663e\u7136\u6bd4\u5efa\u4e00\u5ea7\u6865\u66f4\u4f18\uff0c\u6545\u4e0d\u5fc5\u518d\u53bb\u8003\u8651\u53ea\u5efa1\u5ea7\u6865\u3002\n\n\u663e\u7136\u7684\uff0c\u82e5\u5bf9\u4e8e\u67d0\u7ec4\u5750\u6807\uff0c\u80af\u5b9a\u4f1a\u9009\u62e9\u8f83\u4e3a\u9760\u8fd1\u5b83\u4eec\u4e2d\u70b9\u7684\u6865\u6765\u8d70\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u5206\u754c\u70b9\uff0c\u5206\u754c\u70b9\u5de6\u8fb9\u7684\u6240\u6709\u70b9\u90fd\u8d70\u5de6\u6865\uff0c\u53f3\u8fb9\u7684\u90fd\u8d70\u53f3\u6865\u3002\u81f3\u4e8e\u6865\u5efa\u5728\u54ea\u91cc\uff0c\u5bf9\u4e24\u8fb9\u5206\u522b\u6c42\u51fa\u4e2d\u4f4d\u6570\u5c31\u662f\u4e86\u3002\n\n\u6c42\u51fa\u4e2d\u4f4d\u6570\u4e4b\u540e\uff0c\u8fd8\u8981\u7b97\u51fa\u6240\u6709\u5750\u6807\u4e0e\u4e2d\u4f4d\u6570\u5750\u6807\u5dee\u7684\u548c\uff0c\u6839\u636e\u7edd\u5bf9\u503c\u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u5373\u53ef\n\n\u5206\u754c\u70b9\u6bcf\u5f80\u53f3\u79fb\u52a8\u4e00\u6b21\uff0c\u53f3\u8fb9\u5143\u7d20\u5c31\u51cf\u5c11\u4e00\u4e2a\uff0c\u5de6\u8fb9\u5143\u7d20\u589e\u52a0\u4e00\u4e2a\u3002\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u9700\u8981\u4e24\u4e2a\u80fd\u652f\u6301\u5feb\u901f\u63d2\u5165\u5143\u7d20\u3001\u5220\u9664\u5143\u7d20\u3001\u67e5\u8be2\u4e2d\u4f4d\u6570\u3001\u503c\u57df\u533a\u95f4\u6c42\u548c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u663e\u7136\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u662f\u6700\u4f73\u9009\u62e9\u4e86\n\n\u5bf9\u4e86\uff0c\u6211\u4e00\u5f00\u59cb\u7684\u4e2d\u4f4d\u6570\u67e5\u8be2\u662f\u8fd9\u4e48\u5199\u7684\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df\u533a\u95f4\uff0c\u82e5\u5de6\u5b50\u6811\u6bd4\u53f3\u5b50\u6811\u5927\uff0c\u5c31\u5f80\u5de6\u8d70\uff0c\u5426\u5219\u5f80\u53f3\u8d70\uff0c\u7136\u540e\u5c31\u5f00\u5fc3WA\u4e86\u2026\u2026\u81f3\u4e8e\u8fd9\u4e48\u5199\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u2026\u2026\u54ce\uff0c\u4e0d\u8bf4\u4e86\uff0c\u6211\u6015\u4e0d\u662f\u4e2a\u667a\u969c\n\n```cpp\n#include<bits/stdc++.h>\n#define FR first\n#define SE second\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<LL,int> pli;\nconst int N=200010;\nint n,tot=0,K;\nLL must=0;\nint A[N],Hash[N];\nstruct Type{int x,y,mid;} B[N];\n\npli operator + (const pli &a,const pli &b){return pli(a.FR+b.FR,a.SE+b.SE);}\n\nstruct Seg\n{\n    LL val[N<<2];int sz[N<<2];\n    void build(int o,int l,int r)\n    {\n        val[o]=sz[o]=0;\n        if(l==r) return;\n        int mid=(l+r)/2;\n        build(o<<1,l,mid);\n        build(o<<1|1,mid+1,r);\n    }\n    void insert(int o,int l,int r,int k,int x)\n    {\n        val[o]+=x;sz[o]++;\n        if(l==r) return;\n        int mid=(l+r)/2;\n        if(k<=mid) insert(o<<1,l,mid,k,x);\n        else insert(o<<1|1,mid+1,r,k,x);\n    }\n    void remove(int o,int l,int r,int k,int x)\n    {\n        val[o]-=x;sz[o]--;\n        if(l==r) return;\n        int mid=(l+r)/2;\n        if(k<=mid) remove(o<<1,l,mid,k,x);\n        else remove(o<<1|1,mid+1,r,k,x);\n    }\n    pli query(int o,int l,int r,int nl,int nr)\n    {\n        if(nl>nr) return pli(0,0);\n        if(l>=nl&&r<=nr) return pli(val[o],sz[o]);\n        int mid=(l+r)/2;pli res(0,0);\n        if(nl<=mid) res=res+query(o<<1,l,mid,nl,nr);\n        if(nr>mid) res=res+query(o<<1|1,mid+1,r,nl,nr);\n        return res;\n    }\n    int midnum(int o,int l,int r,int L=0,int R=0)\n    {\n        if(!sz[o]) return -1;\n        if(l==r) return l;\n        int mid=(l+r)/2,szl=sz[o<<1],szr=sz[o<<1|1];\n        if(szl+L>=szr+R) return midnum(o<<1,l,mid,L,R+szr);\n        else return midnum(o<<1|1,mid+1,r,szl+L,R);\n    }\n} t1,t2;\n\nint work1()\n{\n    sort(A+1,A+1+tot);\n    int pp=A[tot/2];LL res=0;\n    for(int i=1;i<=tot;i++) res+=abs(pp-A[i]);\n    printf(\"%lld\\n\",res+tot/2+must);\n    return 0;\n}\n\nint work2()\n{\n    int fuck=0,m=0;\n    for(int i=1;i<=tot;i+=2)\n    {\n        B[++m].mid=(A[i]+A[i+1])/2;\n        B[m].x=Hash[++fuck]=A[i];\n        B[m].y=Hash[++fuck]=A[i+1];\n    }\n    sort(Hash+1,Hash+1+fuck);\n    int hs=unique(Hash+1,Hash+1+fuck)-(Hash+1);\n    t1.build(1,1,hs);t2.build(1,1,hs);\n    for(int i=1;i<=m;i++)\n    {\n        B[i].x=lower_bound(Hash+1,Hash+1+hs,B[i].x)-Hash;\n        B[i].y=lower_bound(Hash+1,Hash+1+hs,B[i].y)-Hash;\n        t2.insert(1,1,hs,B[i].x,Hash[B[i].x]);\n        t2.insert(1,1,hs,B[i].y,Hash[B[i].y]);\n    }\n    sort(B+1,B+1+m,[](Type a,Type b){return a.mid<b.mid;});\n    int pl=1;LL ans=INT64_MAX,tmp;\n    for(int i=1;i<=m;i++)\n    {\n        t2.remove(1,1,hs,B[i].x,Hash[B[i].x]);\n        t2.remove(1,1,hs,B[i].y,Hash[B[i].y]);\n        t1.insert(1,1,hs,B[i].x,Hash[B[i].x]);\n        t1.insert(1,1,hs,B[i].y,Hash[B[i].y]);\n        int m1=t1.midnum(1,1,hs),m2=t2.midnum(1,1,hs);tmp=0;\n        if(~m1)\n        {\n            pli p1=t1.query(1,1,hs,1,m1);\n            pli p2=t1.query(1,1,hs,m1+1,hs);\n            tmp+=1ll*Hash[m1]*p1.SE-p1.FR;\n            tmp+=p2.FR-1ll*Hash[m1]*p2.SE;\n        }\n        if(~m2)\n        {\n            pli q1=t2.query(1,1,hs,1,m2);\n            pli q2=t2.query(1,1,hs,m2+1,hs);\n            tmp+=1ll*Hash[m2]*q1.SE-q1.FR;\n            tmp+=q2.FR-1ll*Hash[m2]*q2.SE;\n        }\n        ans=min(ans,tmp);\n    }\n    printf(\"%lld\\n\",ans+m+must);\n    return 0;\n}\n\nint main()\n{\n    int x,y;\n    char s[5],t[5];\n    scanf(\"%d%d\",&K,&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s%d%s%d\",s,&x,t,&y);\n        if(s[0]==t[0]) must+=abs(x-y);\n        else A[++tot]=x,A[++tot]=y;\n    }\n    if(!tot) return printf(\"%lld\\n\",must),0;\n    if(K==1) return work1();\n    return work2();\n}\n```\n\n",
        "postTime": 1540209448,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "$\\text{FHQ Treap}$\u3002\u4e00\u5f00\u59cb\u5199\u7684\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u70b8\u4e86\uff0c\u8fd8\u4ee5\u4e3a\u4e0d\u80fd\u7528\uff0c\u4e0d\u8fc7\u540e\u6765\u627e\u4e86\u4e00\u4e2a [$\\text{dalao}$\u7684\u535a\u5ba2](https://www.cnblogs.com/ppprseter/p/9385979.html) \u91cd\u6784\u4e86\u4e00\u4e0b\u4ee3\u7801\uff0c\u603b\u7b97\u8fd8\u662f\u8fc7\u6389\u4e86\u3002\n\n\u5982\u7b2c\u4e00\u7bc7\u9898\u89e3\u6240\u8bf4\uff0c$k=1$ \u5c31\u76f4\u63a5\u7b97\uff0c$k=2$ \u5c31\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u7ebf\uff0c\u5de6\u53f3\u5206\u522b\u7b97\uff0c\u4e0d\u8fc7\u5176\u5b9e\u4e0d\u7528\u5efa\u4e24\u68f5\u6811\uff0c\u800c\u662f\u53ef\u4ee5\u5148\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u540c\u4e00\u68f5\u6811\uff08\u8981\u6e05\u7a7a\uff09\uff0c\u6570\u636e\u7ed3\u6784\u8981\u652f\u6301\u533a\u95f4\u63d2\u5165\u3001\u4e2d\u503c\u67e5\u8be2\u3001\u533a\u95f4\u548c\uff0c\u7ebf\u6bb5\u6811\u4f3c\u4e4e\u4e0d\u9519\uff0c\u4f46\u6211\u4e0d\u77e5\u9053\u600e\u4e48\u67e5\u4e2d\u503c\u3010\u6d41\u4e0b\u83dc\u9e21\u7684\u6cea\u6c34\u3011\uff0c\u6240\u4ee5\u8fd8\u662f\u5199\u4e86~~\u4e00\u751f\u6240\u7231~~ $\\text{FHQ Treap}$\uff0c\u7ef4\u62a4\u4e0b\u4f20\u4e00\u4e2a $sum$ \u6807\u8bb0\u5373\u53ef\u3002\n\n\u5199\u65f6\u4e3a\u4e86\u9632\u6b62\u8bfb\u5165\u5b57\u7b26\u51fa\u9519\u4f7f\u7528\u4e86\u5173\u95ed\u6d41\u540c\u6b65\u7684 `cin`\uff0c\u540c\u65f6\u4f7f\u7528 `cout` \u8f93\u51fa\uff0c\u5404\u4f4d\u6709\u9700\u8981\u53ef\u4ee5\u81ea\u884c\u4fee\u6539\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define ll long long\nusing namespace std;\nstruct FHQTreap\n{\n\tint son[2],key,siz;\n\tll val,sum;\n}t[MAXN<<1];\nstruct Node\n{\n\tint l,r,mid;\n\tfriend bool operator < (const Node &x,const Node &y)\n\t{\n\t\treturn x.mid<y.mid;\n\t}\n}a[MAXN];\nint k,n,siz,root,tot;\nll ans[MAXN],Ans;\nvoid Update(int x)\n{\n\tt[x].siz=t[t[x].son[0]].siz+t[t[x].son[1]].siz+1;\n\tt[x].sum=t[t[x].son[0]].sum+t[t[x].son[1]].sum+t[x].val;\n}\nint NewNode(ll val)\n{\n\tt[++siz].siz=1;\n\tt[siz].val=val;\n\tt[siz].key=rand();\n\tt[siz].sum=val;\n\treturn siz;\n}\nint Merge(int x,int y)\n{\n\tif(!x || !y) return x+y;\n\tif(t[x].key<t[y].key)\n\t{\n\t\tt[x].son[1]=Merge(t[x].son[1],y);\n\t\tUpdate(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tt[y].son[0]=Merge(x,t[y].son[0]);\n\t\tUpdate(y);\n\t\treturn y;\n\t}\n}\nvoid Split(int rt,int pos,int &l,int &r)\n{\n\tif(!rt) l=r=0;\n\telse\n\t{\n\t\tif(t[rt].val<=pos)\n\t\t{\n\t\t\tl=rt;\n\t\t\tSplit(t[rt].son[1],pos,t[rt].son[1],r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=rt;\n\t\t\tSplit(t[rt].son[0],pos,l,t[rt].son[0]);\n\t\t}\n\t\tUpdate(rt);\n\t}\n}\nll FindKth(int rt,int pos)\n{\n\twhile(1)\n\t{\n\t\tif(pos<=t[t[rt].son[0]].siz) rt=t[rt].son[0];\n\t\telse if(pos==t[t[rt].son[0]].siz+1) return t[rt].val;\n\t\telse\n\t\t{\n\t\t\tpos-=t[t[rt].son[0]].siz+1;\n\t\t\trt=t[rt].son[1];\n\t\t}\n\t}\n}\nvoid Insert(ll val)\n{\n\tint x,y;\n\tSplit(root,val,x,y);\n\troot=Merge(Merge(x,NewNode(val)),y);\n}\nll Query(ll val)\n{\n\tint x,y;\n\tll sum=t[root].siz/2,res=0;\n\tSplit(root,val-1,x,y);\n\tres=t[x].sum*2+val*(sum-t[x].siz)*2;\n\troot=Merge(x,y);\n\treturn res;\n}\nll CalcMid()\n{\n\tll rk=FindKth(root,t[root].siz/2);\n\treturn t[root].sum-Query(rk);\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin>>k>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x,y;\n\t\tchar opt1,opt2;\n\t\tcin>>opt1>>x>>opt2>>y;\n\t\tif(x>y) swap(x,y);\n\t\tif(opt1==opt2) Ans+=y-x;\n\t\telse a[++tot]=((Node){x,y,x+y});\n\t}\n\tsort(a+1,a+tot+1);\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tInsert(a[i].l);\n\t\tInsert(a[i].r);\n\t\tans[i]=CalcMid();\n\t}\n\tif(k==1) return cout<<ans[tot]+Ans+tot<<endl,0;\n\tll cnt=ans[tot];\n\tfor(int i=0;i<=siz;i++) t[i].son[0]=t[i].son[1]=0;\n\troot=siz=0;\n\tfor(int i=tot;i>=1;i--)\n\t{\n\t\tInsert(a[i].l);\n\t\tInsert(a[i].r);\n\t\tcnt=min(cnt,ans[i-1]+CalcMid());\n\t}\n\tcout<<cnt+Ans+tot<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1547770451,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u5f88\u4e0d\u53ef\u505a\uff0c\u7136\u800c $K\\leq 2$ \uff0c\u544a\u8bc9\u6211\u4eec\u8fd9\u662f\u9053\u5206\u7c7b\u8ba8\u8bba\u9898\u3002\n\n\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e0d\u5728\u540c\u4e00\u4e2a\u533a\u57df\u7684\u60c5\u51b5\uff0c\u5728\u540c\u4e00\u4e2a\u533a\u57df\u7684\u53ef\u4ee5\u76f4\u63a5\u7d2f\u52a0\u8fdb\u7b54\u6848\u3002\u8bbe\u5728\u7b2c $i$ \u4e2a\u4eba\u7684\u5bb6\u5728 $A/B$ \u533a\u57df\u7684 $a_i$ \u4f4d\u7f6e\uff0c\u516c\u53f8\u5728\u53e6\u4e00\u4e2a\u533a\u57df\u7684 $b_i$ \u4f4d\u7f6e\uff1a\n\n\u5f53 $K=1$ \u65f6\uff0c\u8981\u6c42\u51fa $\\sum|X-a_i|+|X-b_i|$ \u7684\u6700\u5c0f\u503c\u3002\u7ecf\u5178\u4e2d\u4f4d\u6570\u95ee\u9898\u3002\n\n\u5f53 $K=2$ \u65f6\uff0c\u8981\u6c42\u51fa $\\sum_i\\min(|X_1-a_i|+|X_1-b_i|,|X_2-a_i|+|X_2-b_i|)$ \u7684\u6700\u5c0f\u503c\u3002\u4e0d\u9700\u8981\u8003\u8651\u53ea\u4fee\u4e00\u5ea7\u6865\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4fee\u4e24\u5ea7\u6865\u4e00\u5b9a\u66f4\u4f18\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u5212\u5206\u6210\u4e24\u4e2a\u96c6\u5408\u6c42 $\\min$ \u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u679a\u4e3e\u5212\u5206\u70b9\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4efb\u610f $X_1,X_2$\uff0c\u7b2c $i$ \u4e2a\u4eba\u8d70 $X_1$ \u8fd9\u5ea7\u6865\uff0c\u4ec5\u5f53 $|X_1-\\frac{a_i+b_i}{2}|<|X_2-\\frac{a_i+b_i}{2}|$\u3002\u975e\u5e38\u5bb9\u6613\u8bc1\u660e\uff0c\u5982\u679c $X_1,X_2$ \u5728 $[a_i,b_i]$ \u95f4\uff0c\u9009\u54ea\u4e2a\u90fd\u662f\u4e00\u6837\u7684\u3002\u5982\u679c $X_1,X_2$ \u5728 $[a_i,b_i]$ \u5916\uff0c\u4e14\u540c\u4fa7\uff0c\u4e5f\u662f\u663e\u7136\u7684\u3002\u5982\u679c\u4e0d\u540c\u4fa7\uff0c\u5bf9\u79f0\u4e00\u4e0b\uff0c\u548c\u540c\u4fa7\u662f\u4e00\u6837\u7684\u3002\u4e8e\u662f\u8bc1\u6bd5\u3002\n\n\u90a3\u4e48\uff0c\u6309 $\\frac{a_i+b_i}{2}$ \u7684\u5927\u5c0f\u6392\u5e8f\u3002\u679a\u4e3e\u6bcf\u4e2a\u5206\u754c\u70b9\uff0c\u5206\u754c\u70b9\u5de6\u8fb9\u7684\u8d70\u5de6\u8fb9\u7684\u6865\uff0c\u53f3\u8fb9\u7684\u8d70\u53f3\u8fb9\u7684\u6865\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u6bcf\u4e2a\u524d\u7f00\u540e\u7f00\u5206\u522b\u6c42\u4e2d\u4f4d\u6570\u3002\u52a8\u6001\u6c42\u4e2d\u4f4d\u6570\uff0c\u6700\u597d\u5199\u7684\u65b9\u5f0f\u662f\u5bf9\u9876\u5806\uff0c\u4f46\u662f\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u548c\uff0c\u8fd9\u4e2a\u4e1c\u897f\u76f4\u63a5\u505a\u4f3c\u4e4e\u4e0d\u597d\u5904\u7406\u3002\n\n\u89c2\u5bdf\u4e00\u4e0b\uff0c\u4f1a\u53d1\u73b0\u65e0\u8bba\u4f55\u65f6\uff0c\u4e24\u4e2a\u5806\u91cc\u7684\u5143\u7d20\u4e2a\u6570\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14 $|X-a_i|+|X-b_i|$ \u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u88ab\u62c6\u5206\u5f00\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e86/se\u3002\u53ef\u4ee5\u5f97\u5230\uff0c\u8fd9\u4e2a\u548c\u5c31\u662f\u5927\u6839\u5806\u4e2d\u6570\u7684\u548c $-$ \u5c0f\u6839\u5806\u4e2d\u6570\u7684\u548c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u7ef4\u62a4\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<algorithm>\ntypedef long long ll;\nint num=0;\nll ans=0;\nstd::priority_queue<int,std::vector<int>,std::greater<int> > Q1;\nstd::priority_queue<int,std::vector<int>,std::less<int> > Q2;\nstruct node {int x,y;} c[100005];\nchar s1[2],s2[2];\nll suff[100005],pref[100005];\ninline ll min(const ll &x,const ll &y) {return x<y? x:y;}\ninline bool cmp(const node &x,const node &y) {return x.x+x.y<y.x+y.y;}\nint main() {\n    int K,n; scanf(\"%d%d\",&K,&n);\n    ll sum1=0,sum2=0;\n    for(register int i=1;i<=n;++i) {\n        int a,b; \n        scanf(\"%s%d%s%d\",s1,&a,s2,&b);\n        if(s1[0]==s2[0]) {ans+=abs(b-a);}\n        else {++ans; c[++num].x=a; c[num].y=b;}\n    }\n    if(K==1) {\n        for(register int i=1;i<=num;++i) {\n            Q1.push(c[i].x);Q1.push(c[i].y);\n            sum1+=c[i].x;sum1+=c[i].y;\n            sum1-=Q1.top(); sum2+=Q1.top(); Q2.push(Q1.top()); Q1.pop();\n            if(Q1.top()<Q2.top()) {\n                int tmp1=Q1.top(),tmp2=Q2.top(); Q1.pop(); Q2.pop();\n                Q1.push(tmp2); Q2.push(tmp1); sum1+=tmp2-tmp1; sum2-=tmp2-tmp1;\n            } \n        }\n        printf(\"%lld\\n\",sum1-sum2+ans);\n    }\n    else {\n        std::sort(c+1,c+1+num,cmp);\n        for(register int i=1;i<=num;++i) {\n            Q1.push(c[i].x);Q1.push(c[i].y);\n            sum1+=c[i].x;sum1+=c[i].y;\n            sum1-=Q1.top(); sum2+=Q1.top(); Q2.push(Q1.top()); Q1.pop();\n            if(Q1.top()<Q2.top()) {\n                int tmp1=Q1.top(),tmp2=Q2.top(); Q1.pop(); Q2.pop();\n                Q1.push(tmp2); Q2.push(tmp1); sum1+=tmp2-tmp1; sum2-=tmp2-tmp1;\n            } \n            pref[i]=sum1-sum2;\n        }\n        while(Q1.size()) Q1.pop();\n        while(Q2.size()) Q2.pop();\n        sum2=sum1=0;\n        for(register int i=num;i>=1;--i) {\n            Q1.push(c[i].x);Q1.push(c[i].y);\n            sum1+=c[i].x;sum1+=c[i].y;\n            sum1-=Q1.top(); sum2+=Q1.top(); Q2.push(Q1.top()); Q1.pop();\n            if(Q1.top()<Q2.top()) {\n                int tmp1=Q1.top(),tmp2=Q2.top(); Q1.pop(); Q2.pop();\n                Q1.push(tmp2); Q2.push(tmp1); sum1+=tmp2-tmp1; sum2-=tmp2-tmp1;\n            } \n            suff[i]=sum1-sum2;\n        } \n        ll mn=1e15;\n        for(register int i=0;i<=num;++i) mn=min(mn,pref[i]+suff[i+1]);\n        printf(\"%lld\\n\",ans+mn);\n    }\n    return 0;\n}\n```",
        "postTime": 1604022770,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u9996\u5148\u5982\u679c\u5bb6\u548c\u516c\u53f8\u540c\u4fa7\u90a3\u4e48\u76f4\u63a5\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u8003\u8651$k=1$\uff1a\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f$\\sum abs(pos-a[i])+abs(b[i]-pos)$\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u663e\u7136\u53ef\u4ee5\u62c6\u5f00\u8003\u8651\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u6210\u4e86\u7ed9\u5b9a\u6570\u8f74\u4e0a\u7684$n$\u4e2a\u70b9\uff0c\u6c42\u4e00\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\uff0c\u76f4\u63a5\u6c42\u4e2d\u4f4d\u6570\u5373\u53ef\u3002\n\n\u8003\u8651$k=2$\uff1a\n\n\u9996\u5148\u660e\u786e\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u6865\uff0c\u90a3\u4e48\u8d70\u79bb$\\frac{a[i]+b[i]}{2}$\u8fd1\u7684\u6865\u8ddd\u79bb\u66f4\u4f18\u3002\n\n\u5173\u4e8e\u8bc1\u660e\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u9996\u5148\u5728$a[i],b[i]$\u4e4b\u95f4\u7684\u6865\u8ddd\u79bb\u90fd\u76f8\u7b49\uff0c\u5bf9\u4e8e\u5916\u9762\u7684\u6865\u753b\u4e2a\u56fe\u5c31\u6bd4\u8f83\u663e\u7136\u4e86\u3002\n\n\u6211\u4eec\u6309\u7167$\\frac{a[i]+b[i]}{2}$\u6392\u5e8f\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u679a\u4e3e\u4e00\u4e2a\u5206\u754c\u70b9\uff0c\u5728\u5de6\u8fb9\u90fd\u8d70\u5de6\u8fb9\u7684\u6865\uff0c\u53f3\u8fb9\u90fd\u8d70\u53f3\u9762\u7684\u6865\uff0c\u90a3\u4e48\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u652f\u6301\u52a0\u70b9\uff0c\u5220\u70b9\uff0c\u6c42\u4e2d\u4f4d\u6570\uff0c\u6c42\u533a\u95f4\u548c\u7684\u6570\u636e\u7ed3\u6784\u5373\u53ef\uff0c\u53ef\u80fd\u7ebf\u6bb5\u6811\u597d\u5199\u4e00\u4e9b\uff1f\n\n```cpp\nint k,n;\n\nnamespace Subtask1\n{\n    const int N=2e5+5;\n    \n    int m;\n    int a[N];\n    \n    void solve()\n    {\n\tll ans=n;\n\tfor(int i=1,x,y;i<=n;++i)\n\t{\n\t    char s1[2],s2[2];\n\t    scanf(\"%s\",s1),gi(x);\n\t    scanf(\"%s\",s2),gi(y);\n\t    if(s1[0]==s2[0]) ans+=abs(x-y)-1;\n\t    else a[++m]=x,a[++m]=y;\n\t}\n\tsort(a+1,a+m+1);\n\tint ave=a[(m+1)/2];\n\tfor(int i=1;i<=m;++i) ans+=abs(a[i]-ave);\n\tprint(ans);\n    }\n}\nnamespace Subtask2\n{\n    const int N=2e5+5;\n\n    #define ls o<<1\n    #define rs o<<1|1\n\n    ll a[N<<1];\n    struct tree\n    {\n\tint l[N<<3],r[N<<3];\n\tll siz[N<<3],sum[N<<3];\n\n\tvoid update(int o)\n\t{\n\t    siz[o]=siz[ls]+siz[rs];\n\t    sum[o]=sum[ls]+sum[rs];\n\t}\n\tvoid build(int x,int y,int o)\n\t{\n\t    l[o]=x,r[o]=y;\n\t    if(x==y) return;\n\t    int mid=(x+y)>>1;\n\t    build(x,mid,ls),build(mid+1,y,rs);\n\t}\n\tvoid modify(int x,ll v,int o)\n\t{\t    \n\t    if(l[o]==r[o])\n\t    {\n\t\tsiz[o]+=v,sum[o]+=v*a[x];\n\t\treturn;\n\t    }\n\t    int mid=(l[o]+r[o])>>1;\n\t    if(x<=mid) modify(x,v,ls);\n\t    else modify(x,v,rs);\n\t    update(o);\n\t}\n\tll find(int k,int o)\n\t{\n\t    if(l[o]==r[o]) return l[o];\n\t    int mid=(l[o]+r[o])>>1;\n\t    if(k<=siz[ls]) return find(k,ls);\n\t    else return find(k-siz[ls],rs);\n\t}\n\tll qsize(int x,int y,int o)\n\t{\n\t    if(l[o]>=x&&r[o]<=y) return siz[o];\n\t    int mid=(l[o]+r[o])>>1;\n\t    ll res=0;\n\t    if(x<=mid) res+=qsize(x,y,ls);\n\t    if(y>mid) res+=qsize(x,y,rs);\n\t    return res;\n\t}\n\tll qsum(int x,int y,int o)\n\t{\n\t    if(l[o]>=x&&r[o]<=y) return sum[o];\n\t    int mid=(l[o]+r[o])>>1;\n\t    ll res=0;\n\t    if(x<=mid) res+=qsum(x,y,ls);\n\t    if(y>mid) res+=qsum(x,y,rs);\n\t    return res;\n\t}\n    };\n    tree t1,t2;\n    struct seg\n    {\n\tint l,r;\n\tbool operator<(const seg &x)const\n\t{\n\t    return l+r<x.l+x.r;\n\t}\n    };\n    seg e[N];\n    int m,cnt;\n    \n    void solve()\n    {\n\tll ans=0;\n\tfor(int i=1,x,y;i<=n;++i)\n\t{\n\t    char s1[2],s2[2];\n\t    scanf(\"%s\",s1),gi(x);\n\t    scanf(\"%s\",s2),gi(y);\n\t    if(s1[0]==s2[0]) ans+=abs(x-y);\n\t    else\n\t    {\n\t\ta[++m]=x,a[++m]=y;\n\t\te[++cnt].l=x,e[cnt].r=y;\n\t\t++ans;\n\t    }\n\t}\n\tif(!cnt)\n\t{\n\t    print(ans);\n\t    end();\n\t}\n\tsort(a+1,a+m+1),sort(e+1,e+cnt+1);\n\tm=unique(a+1,a+m+1)-a-1;\n\tfor(int i=1;i<=cnt;++i)\n\t{\n\t    e[i].l=lower_bound(a+1,a+m+1,e[i].l)-a;\n\t    e[i].r=lower_bound(a+1,a+m+1,e[i].r)-a;\n\t}\n\tt1.build(1,m,1),t2.build(1,m,1);\n\tfor(int i=1;i<=cnt;++i)\n\t{\n\t    t2.modify(e[i].l,1,1);\n\t    t2.modify(e[i].r,1,1);\n\t}\n\tll tmp=LINF;\n\tfor(int i=1;i<=cnt;++i)\n\t{\n\t    t1.modify(e[i].l,1,1),t1.modify(e[i].r,1,1);\n\t    t2.modify(e[i].l,-1,1),t2.modify(e[i].r,-1,1);\n\t    int m1=t1.find(i,1),m2=t2.find(cnt-i,1);\n\t    ll d1=t1.qsize(1,m1,1)*a[m1]-t1.qsum(1,m1,1)+t1.qsum(m1,m,1)-t1.qsize(m1,m,1)*a[m1];\n\t    ll d2=t2.qsize(1,m2,1)*a[m2]-t2.qsum(1,m2,1)+t2.qsum(m2,m,1)-t2.qsize(m2,m,1)*a[m2];\n\t    tmp=min(tmp,d1+d2);\n\t}\n\tprint(ans+tmp);\n    }\n}\nint main()\n{\n    fio();\n    gi(k),gi(n);\n    if(k==1) Subtask1::solve();\n    else Subtask2::solve();\n    end();\n}\n```",
        "postTime": 1582686432,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3644)\n\n\u9898\u610f\uff1a\n\n\u4e00\u6761\u6cb3\u5c06\u5927\u5730\u5206\u4e3a $A,B$ \u4e24\u4e2a\u90e8\u5206\u3002\u4e24\u90e8\u5206\u5747\u53ef\u89c6\u4e3a\u4e00\u6839\u6570\u8f74\u3002\n\n\u6709 $n$ \u540d\u5de5\u4eba\uff0c\u7b2c $i$ \u540d\u7684\u5bb6\u5728 $x_i$ \u533a\u57df\u7684 $a_i$ \u4f4d\u7f6e\uff0c\u516c\u53f8\u5728 $y_i$ \u533a\u57df\u7684 $b_i$ \u4f4d\u7f6e\u3002\n\n\u73b0\u5728\u4f60\u53ef\u4ee5\u5efa\u7acb $k$ \u5ea7\u6865\uff0c\u5728 $x$ \u4f4d\u7f6e\u5efa\u7acb\u4e00\u5ea7\u6865\u53ef\u4ee5\u8fde\u63a5 $A$ \u533a\u57df\u7684 $x$ \u4f4d\u7f6e\u548c $B$ \u533a\u57df\u7684 $x$ \u4f4d\u7f6e\uff0c\u6865\u957f\u4e3a $1$ \u4e2a\u5355\u4f4d\u957f\u5ea6\u3002\n\n\u8bbe $d_i$ \u4e3a\u7b2c $i$ \u540d\u5de5\u4eba\u4ece\u5bb6\u5230\u516c\u53f8\u8d70\u8fc7\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6c42 $D=d_1+d_2+\\dots+d_n$ \u7684\u6700\u5c0f\u503c\u3002\n\n$n \\in [1,2\\times 10^5],k\\in\\{1,2\\},a_i,b_i \\leq 10^9,x_i,y_i \\in \\{'A','B'\\}$\u3002\n\n\u4e00\u5f00\u59cb\u770b\u9519\u9898\u4e86\uff0c\u4ee5\u4e3a $k$ \u7684\u6570\u636e\u8303\u56f4\u4e5f\u662f $10^5$\u3002\u3002\u3002\u3002\u3002\u3002\u7136\u540e\u5c31\u4e0d\u613f\u610f\u7ee7\u7eed\u60f3\u4e0b\u53bb\u4e86\u3002\n\n\u9996\u5148\u5982\u679c\u5bb6\u548c\u516c\u53f8\u5728\u6cb3\u540c\u4e00\u8fb9\u90a3\u65b9\u6848\u80af\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u76f4\u63a5\u52a0\u4e0a $|a_i-b_i|$\u3002\n\n\u63a5\u4e0b\u6765\u91cd\u70b9\u8003\u8651\u5bb6\u548c\u516c\u53f8\u4e0d\u5728\u6cb3\u540c\u4e00\u8fb9\u7684\u60c5\u51b5\uff0c\u5047\u8bbe\u8fd9\u4e9b\u5de5\u4eba $d_i$ \u7684\u548c\u4e3a $D'$\n\n\u5148\u4ece $k=1$ \u5165\u624b\uff0c\u5047\u8bbe\u6211\u4eec\u5728 $p$ \u4f4d\u7f6e\u5efa\u4e86\u5ea7\u6865\uff0c\u90a3\u4e48\u6240\u6709\u5bb6\u548c\u516c\u53f8\u4e0d\u5728\u6cb3\u540c\u4e00\u8fb9\u90fd\u5fc5\u987b\u901a\u8fc7\u8fd9\u4e00\u5ea7\u6865\uff0c\u5373 $d_i=|a_i-p|+|b_i-p|+1$\u3002\n\n$D'=\\sum |a_i-p|+|b_i-p|+1$\n\n\u6700\u540e\u90a3\u4e2a $1$ \u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u6389\uff0c\u5269\u4f59\u90e8\u5206\u5c31\u662f\u4e00\u4e2a\u521d\u4e00\u5f31\u667a\u6570\u5b66\u95ee\u9898\uff0c\u76f4\u63a5\u53d6\u4e2d\u4f4d\u6570\u6240\u6709 $a_i,b_i$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651 $k=2$ \u7684\u60c5\u51b5\u3002\u5047\u8bbe\u6211\u4eec\u5728 $p,q$ \u4f4d\u7f6e\u5efa\u4e86\u6865\u3002\n\n\u90a3\u4e48 $d_i$ \u5c31\u662f\u4ece\u8fd9\u4e24\u5ea7\u6865\u4e0a\u901a\u8fc7\u6240\u9700\u7684\u8ddd\u79bb\u7684\u8f83\u5c0f\u503c\uff0c\u5373 $d_i=\\min(|a_i-p|+|b_i-p|,|a_i-q|+|b_i-q|)+1$\u3002\n\n\u5728 $k=1$ \u7684\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u628a $a_i,b_i$ \u63c9\u5728\u4e00\u8d77\u53d6\u4e2d\u4f4d\u6570\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u8d21\u732e\u4e92\u4e0d\u5f71\u54cd\u3002\n\n\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4e0d\u80fd\u76f4\u63a5\u53d6\u4e2d\u4f4d\u6570\u4e86\uff0c\u56e0\u4e3a\u6709\u4e2a $\\min$\u3002\n\n\u4e0d\u59a8\u8bbe $a_i \\leq b_i$\uff0c\u8bbe $f(x)=|a_i-x|+|b_i-x|$\u3002\u7b80\u5355\u753b\u4e2a\u56fe\u50cf\uff0c\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5de6\u8fb9\u662f\u659c\u7387\u4e3a $-2$ \u7684\u5c04\u7ebf\uff0c\u4e2d\u95f4\u662f\u4e00\u6bb5\u6c34\u5e73\u7ebf\u6bb5\uff0c\u53f3\u8fb9\u662f\u659c\u7387\u4e3a $2$ \u7684\u5c04\u7ebf\u3002\u56fe\u50cf\u7684\u5bf9\u79f0\u8f74\u4e3a $x=\\dfrac{a_i+b_i}{2}$\uff08\u68a6\u56de\u8bfe\u5185\uff09\n\n\u7531\u4e8e\u5bf9\u79f0\u8f74\u5de6\u53f3\u4e24\u8fb9\u5b8c\u5168\u4e00\u6837\u5e76\u4e14\u5bf9\u79f0\u8f74\u5de6\u8fb9 $y$ \u968f $x$ \u7684\u589e\u5927\u5355\u8c03\u4e0d\u964d\uff0c\u6545\u6709\uff1a\n\n- \u82e5 $|\\dfrac{a_i+b_i}{2}-p|<|\\dfrac{a_i+b_i}{2}-q|$\uff0c\u90a3\u4e48 $f(p)\\leq f(q)$\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u672c\u9898\u5c31\u7b80\u5355\u591a\u4e86\u3002\n\n\u628a\u6240\u6709\u5de5\u4eba\u6309 $\\dfrac{a_i+b_i}{2}$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u90a3\u6211\u4eec\u80af\u5b9a\u662f\u9009\u62e9\u79bb $\\dfrac{a_i+b_i}{2}$ \u8f83\u8fd1\u7684\u90a3\u5ea7\u6865\u3002\n\n\u4e0d\u59a8\u8bbe $p<q$\uff0c\u90a3\u4e48\u6240\u6709 $\\dfrac{a_i+b_i}{2}\\leq\\dfrac{p+q}{2}$ \u7684\u5de5\u4eba\u90fd\u4f1a\u9009\u62e9 $p$ \u90a3\u5ea7\u6865\uff0c\u5269\u4f59\u7684\u5de5\u4eba\u4f1a\u9009\u62e9 $q$ \u90a3\u5ea7\u6865\u3002\n\n\u6545\u9009\u62e9 $p$ \u7684\u5de5\u4eba\u662f\u539f\u5e8f\u5217\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u9009\u62e9 $q$ \u7684\u5de5\u4eba\u662f\u539f\u5e8f\u5217\u7684\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u679a\u4e3e\u65ad\u70b9 $i$\uff0c$[1,i]$ \u7684\u5de5\u4eba\u9009\u62e9\u6865\u6881 $p$\uff0c$[i+1,n]$ \u7684\u5de5\u4eba\u9009\u62e9\u6865\u6881 $q$\u3002\n\n\u65ad\u70b9\u4e24\u8fb9\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53c8\u53ef\u4ee5\u628a\u7edd\u5bf9\u503c\u62c6\u5f00\uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u56de\u5230\u4e86\u7b2c\u4e00\u95ee\u3002\n\n\u4e8e\u662f\u9898\u76ee\u53d8\u4e3a\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u6bcf\u4e2a\u524d\u7f00\u7684\u4e2d\u4f4d\u6570\uff0c\u6709 DS \u5473\u513f\u4e86\uff0c\u7a0d\u5fae\u4e00\u60f3\u5c31\u53ef\u4ee5\u60f3\u5230\u5e73\u8861\u6811\uff08\n\n\u4f46\u7a0d\u5fae\u60f3\u4e00\u60f3\u5c31\u53d1\u73b0\uff0c\u5176\u5b9e\u6839\u672c\u4e0d\u7528\u5e73\u8861\u6811\u3002\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\u6765\u7ef4\u62a4\uff0c\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a4\u524d\u4e00\u534a\u7684\u503c\uff0c\u518d\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4\u540e\u4e00\u534a\u7684\u503c\u3002\u6bcf\u6b21\u65b0\u63d2\u5165\u4e00\u4e2a\u503c\uff0c\u5c31\u5c06\u5b83\u63d2\u5165\u5230\u5bf9\u5e94\u7684\u90e8\u5206\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u5fae\u8c03\u4f7f\u4e24\u90e8\u5206\u5e73\u8861\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a)\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntypedef pair<int,int> pii;\ntypedef long long ll;\nconst int MAXN=1e5+5;\nstruct solver{\n\tmultiset<int> st1,st2;\n\tll sum1=0,sum2=0;\n\tvoid insert(int a){\n\t\tif(st1.empty()){\n\t\t\tst1.insert(a);sum1+=a;\n\t\t} else {\n\t\t\tint x=*st1.rbegin();\n\t\t\tif(a<=x) sum1+=a,st1.insert(a);\n\t\t\telse sum2+=a,st2.insert(a);\n\t\t\tint cnt=(st1.size()+st2.size()+1)/2;\n\t\t\twhile(st1.size()>cnt){int v=*st1.rbegin();sum1-=v;sum2+=v;st1.erase(st1.find(v));st2.insert(v);}\n\t\t\twhile(st1.size()<cnt){int v=*st2.begin();sum2-=v;sum1+=v;st2.erase(st2.find(v));st1.insert(v);}\n\t\t}\n\t}\n\tll query(){\n\t\tif(st1.empty()) return 0;\n\t\tint cnt=(st1.size()+st2.size()+1)/2,x=*st1.rbegin();\n\t\treturn 1ll*cnt*x-sum1+sum2-1ll*(st1.size()+st2.size()-cnt)*x;\n\t}\n} x1,x2;\nint n,k,m;\nstruct data{\n\tint a,b;\n\tfriend bool operator <(data x,data y){\n\t\treturn x.a+x.b<y.a+y.b;\n\t}\n} f[MAXN];\nll sum=0;\nll pre[MAXN],suf[MAXN];\nint main(){\n\tscanf(\"%d%d\",&k,&n);\n\tfor(int i=1;i<=n;i++){\n\t\tchar x,y;int a,b;cin>>x>>a>>y>>b;\n\t\tif(x==y) sum+=abs(a-b);\n\t\telse f[++m].a=a,f[m].b=b,sum++;\n\t}\n\tif(k==1){\n\t\tfor(int i=1;i<=m;i++) x1.insert(f[i].a),x1.insert(f[i].b);\n\t\tprintf(\"%lld\\n\",x1.query()+sum);\n\t} else {\n\t\tsort(f+1,f+m+1);\n\t\tfor(int i=1;i<=m;i++) x1.insert(f[i].a),x1.insert(f[i].b),pre[i]=x1.query();\n\t\tfor(int i=m;i;i--) x2.insert(f[i].a),x2.insert(f[i].b),suf[i]=x2.query();\n\t\tll mn=1e18;\n\t\tfor(int i=1;i<=m+1;i++) mn=min(mn,pre[i-1]+suf[i]);\n\t\tprintf(\"%lld\\n\",mn+sum);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1606831836,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u5148\u8003\u8651\u4e00\u5ea7\u6865\u600e\u4e48\u505a\u3002              \n\n\u4ee4\u6865\u7684\u5750\u6807\u4e3a $k$\uff0c\u8003\u8651\u4e00\u4e2a\u70b9\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a $|x-k| + |y-k|$ \u6240\u4ee5\u628a\u6240\u6709\u7684 $x,y$ \u6254\u5230\u6570\u8f74\u4e0a\u53bb\u7b97\u4e2d\u4f4d\u6570\u5373\u53ef\u3002             \n\n\u8003\u8651\u4e24\u5ea7\u6865\uff0c\u731c\u6d4b\u5e94\u8be5\u662f\u7ef4\u62a4\u4e00\u8fb9\u4e00\u8fb9\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e24\u5ea7\u6865\uff0c\u4e00\u4e2a\u70b9\u663e\u7136\u9009\u6700\u8fd1\u7684\u4e00\u5ea7\u6865\uff0c\u5373 $|x - k| + |y - k|$ \u5c0f\u7684\u90a3\u4e2a\u3002           \n\n\u7531\u4e8e $x \\leq y$\uff0c\u5e76\u4e14 $k$ \u5728\u533a\u95f4\u4e2d\u7684\u60c5\u51b5\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\u8003\u8651 $k$ \u5728\u533a\u95f4 $[x , y]$ \u5916\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u6211\u4eec\u77e5\u9053\u5982\u679c $k < x$ \u90a3\u4e48\u5b83\u5bf9\u7b54\u6848\u591a\u7684\u8d21\u732e\u5c31\u662f $x - k$\uff0c\u5426\u5219\u5c31\u662f $k - y$\uff0c\u8003\u8651\u5982\u4f55\u5bf9\u4e8e\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u6d89\u53ca\u4e00\u4e2a\u76f8\u540c\u7684\u9009\u62e9\u65b9\u6848\u3002              \n\n\u4ee4\u4e00\u4e2a\u533a\u95f4 $[x,y]$ \u7684\u4e2d\u70b9\u4e3a $mid$\uff0c\u6211\u4eec\u53d1\u73b0\u6bd4\u8f83 $|mid - k|$ \u7684\u5927\u5c0f\u662f\u7b49\u4ef7\u7684\uff0c\u6240\u4ee5\u5c06\u539f\u5148\u7684\u6240\u6709\u533a\u95f4\u6309\u7167\u533a\u95f4\u4e2d\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u679a\u4e3e\u4ece\u4e2d\u95f4\u54ea\u4e2a\u70b9\u5f00\u59cb\u5206\u5272\u6210\u5de6\u53f3\u4e24\u8fb9\u3002               \n\n\u4e5f\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\u8bc1\u660e\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\uff1a\u6700\u4f18\u60c5\u51b5\u4e0b\u7684\u4e24\u5ea7\u6865\u5fc5\u5b9a\u4e00\u5de6\u4e00\u53f3\uff0c\u90a3\u4e48\u6309\u7167\u4e2d\u70b9\u6392\u5e8f\u540e\u5fc5\u5b9a\u6709\u4e00\u4e2a\u5206\u754c\u70b9\uff0c\u6ee1\u8db3\u5de6\u8fb9\u7684\u533a\u95f4\u8ddd\u79bb\u6700\u8fd1\u7684\u6865\u662f\u5de6\u8fb9\u7684\u6865\uff0c\u53f3\u8fb9\u7684\u533a\u95f4\u8ddd\u79bb\u6700\u8fd1\u7684\u6865\u662f\u53f3\u8fb9\u7684\u6865\uff0c\u90a3\u4e48\u540c\u7406\u679a\u4e3e\u5206\u754c\u70b9\u540e\u5bfb\u627e\u4e24\u8fb9\u7684\u6700\u4f18\u65b9\u6848\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u6700\u4f18\u65b9\u6848\u3002             \n\n\u7528\u5e73\u8861\u6811\u6216\u8005\u5806\u7ef4\u62a4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(n \\log n)$\u3002            \n\n```cpp\n/*\n\u8003\u8651\u5bf9\u539f\u56fe\u8fde\u7ebf\uff0c\u4e00\u6761\u6865\u4e0e\u8fde\u7ebf\u76f8\u4ea4\u5373\u53ef\u8ba9\u4e00\u4e2a\u4eba\u8d70\u51fa\u6700\u77ed\u8def\n\u4e0d\u59a8\u628a\u5bf9\u5cb8\u4e5f\u7ed9\u642c\u8fc7\u6765\uff0c\u95ee\u9898\u662f\u7b49\u4ef7\u7684\n\u53d1\u73b0\u4e00\u6761\u6865\u65f6\u5f88\u597d\u5904\u7406\uff0c\u4e24\u6761\u6865\u9700\u8981\u8003\u8651\u4e00\u4e9b\u989d\u5916\u7684\u4e1c\u897f\n\u4ee4\u6865\u7684\u5750\u6807\u4e3ak\uff0c\u5219\u4e00\u4e2a\u4eba\u7684\u6700\u77ed\u8def\u5373\u4e3a|x - k| + |y - k|\n\u5982\u679c\u6709\u4e24\u5ea7\u6865\uff0c\u663e\u7136\u9009\u6700\u8fd1\u7684\u90a3\u5ea7\u6865\u66f4\u4f18\uff0c\u53d1\u73b0\u6b64\u65f6\u80af\u5b9a\u8fd9\u5ea7\u6865\u5230\u4e24\u70b9\u7684\u4e2d\u70b9\u90fd\u6700\u8fd1\n\u6240\u4ee5\u53ef\u4ee5\u5c06\u539f\u95ee\u9898\u53d8\u4e3a\u5212\u5206\u5e73\u9762\u4f7f\u5f97\u5de6\u534a\u8fb9\u88ab\u4e00\u5ea7\u6865\u7ba1\u8f96\uff0c\u53f3\u534a\u8fb9\u88ab\u4e00\u5ea7\u6865\u7ba1\u8f96\uff0c\u800c\u4e14\u6211\u4eec\u6709\u4e86\u4e0a\u8ff0\u201c\u8ddd\u79bb\u4e24\u70b9\u90fd\u6700\u8fd1\u201d\u7684\u6027\u8d28\u540e\u76f4\u63a5\u5de6\u7aef\u70b9\u6392\u5e8f\u5373\u53ef\n\u73b0\u5728\u6c42\u524d\u7f00\u6700\u4f18\u548c\u540e\u7f00\u6700\u4f18\u6700\u540e\u7ec4\u5408\u4e00\u4e0b\u6700\u5c0f\u503c\u5c31\u597d\u4e86\n\u73b0\u5728\u7684\u5b50\u95ee\u9898\u662f\u5728\u4e00\u6b21\u51fd\u6570y=x\u4e0a\u9009\u4e00\u4e2a\u70b9\u4f7f\u5f97\u5176\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f\n\u8003\u8651\u5982\u679c\u53ea\u6709\u4e00\u7ef4\u5c31\u662f\u4e2d\u95f4\u70b9\uff0c\u4e24\u7ef4\u7684\u8bdd\u6211\u4eec\u5206\u522b\u8ba1\u7b97\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u53d6\u4e24\u4e2a\u533a\u95f4\u7684\u201c\u4e2d\u70b9\u201d\u5373\u53ef\uff0c\u5b9a\u4e49\u4e24\u4e2a\u533a\u95f4\u7684\u4e2d\u70b9\u5373 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 3e5 + 5;\nint n,k,tot,lsh[Len],tlsh;\nlong long ans,Pre[Len],Suf[Len],sum[Len],res;\nstruct node\n{\n\tint x,y;\n}Sec[Len];\nbool cmp(node x,node y){return (x.x + x.y) / 2 < (y.x + y.y) / 2;}\nstruct Node\n{\n\tint l,r,siz,val,key;\n\tlong long sum;\n\tNode(){l = r = siz = val = key = sum = 0;}\n};\nstruct fhq_treap\n{\n\tNode fhq[Len];int cnt,root,X,Y;\n\tvoid clear()\n\t{\n\t\tfor(int i = 1 ; i <= cnt ; i ++) fhq[i].l = fhq[i].r = fhq[i].siz = fhq[i].val = fhq[i].key = fhq[i].sum = 0;\n\t\tcnt = root = 0;\n\t}\n\tint newnode(int val)\n\t{\n\t\tcnt ++;\n\t\tfhq[cnt].val = fhq[cnt].sum = val;\n\t\tfhq[cnt].l = fhq[cnt].r = 0 , fhq[cnt].siz = 1;\n\t\tfhq[cnt].key = rand();\n\t\treturn cnt;\n\t}\n\t#define ls fhq[p].l \n\t#define rs fhq[p].r \n\tvoid update(int p)\n\t{\n\t\tfhq[p].siz = fhq[ls].siz + fhq[rs].siz + 1;\n\t\tfhq[p].sum = fhq[ls].sum + fhq[rs].sum + fhq[p].val;\n\t}\n\tvoid split(int now,int val,int &x,int &y)\n\t{\n\t\tif(!now) x = y = 0;\n\t\telse\n\t\t{\n\t\t\tif(fhq[now].val <= val)\n\t\t\t{\n\t\t\t\tx = now;\n\t\t\t\tsplit(fhq[now].r , val , fhq[now].r , y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = now;\n\t\t\t\tsplit(fhq[now].l , val , x , fhq[now].l);\n\t\t\t}\n\t\t\tupdate(now);\n\t\t}\n\t}\n\tint merge(int x,int y)//\u4fdd\u8bc1y >= x \n\t{\n\t\tif(!x || !y) return x + y;\n\t\tif(fhq[x].key < fhq[y].key)\n\t\t{\n\t\t\tfhq[x].r = merge(fhq[x].r , y);\n\t\t\tupdate(x);\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfhq[y].l = merge(x , fhq[y].l);\n\t\t\tupdate(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tvoid Ins(int val)\n\t{\n\t\tsplit(root , val - 1 , X , Y);\n\t\troot = merge(merge(X , newnode(val)) , Y);\n\t}\n\tint Rank_to_num(int rank)\n\t{\n\t\tint now = root;\n\t\twhile(now)\n\t\t{\n\t\t\tif(fhq[fhq[now].l].siz + 1 == rank) return fhq[now].val;\n\t\t\telse if(fhq[fhq[now].l].siz >= rank) now = fhq[now].l;\n\t\t\telse rank -= fhq[fhq[now].l].siz + 1 , now = fhq[now].r;\n\t\t}\n\t}\n\tvoid Sum(int val,long long &now)\n\t{\n\t\tsplit(root , val , X , Y);\n\t\tnow += 1ll * val * fhq[X].siz - fhq[X].sum + fhq[Y].sum - 1ll * val * fhq[Y].siz;\n\t\troot = merge(X , Y);\n\t}\n}S1,S2;\nint Mid(int l,int r){return (l + r) >> 1;}\nchar s[5],ss[5];\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d %d\",&k,&n);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%s\",s);\n\t\tscanf(\"%d\",&x);\n\t\tscanf(\"%s\",ss);\n\t\tscanf(\"%d\",&y);\n\t\tif(x > y) swap(x , y);\n\t\tif(s[0] == ss[0]) res += y - x;\n\t\telse\n\t\t{\n\t\t\t++ tot;\n\t\t\tSec[tot].x = x , Sec[tot].y = y;\n\t\t}\n\t}\n\tif(!tot) \n\t{\n\t\tprintf(\"%lld\\n\",res);\n\t\treturn 0;\n\t}\n\tS1.clear();\n\tsort(Sec + 1 , Sec + 1 + tot , cmp);\n\tfor(int i = 1 ; i <= tot ; i ++) \n\t{\n\t\tS1.Ins(Sec[i].x);\n\t\tS1.Ins(Sec[i].y);\n\t\tint l,r;\n\t\tl = S1.Rank_to_num(i);\n\t\tr = S1.Rank_to_num(i + 1);\n\t\tint MMid = Mid(l , r);\n\t\tS1.Sum(MMid , Pre[i]);\n\t}\n\tif(k == 1)\n\t{\n\t\tprintf(\"%lld\\n\",res + tot + Pre[tot]);\n\t\treturn 0;\n\t}\n\tS1.clear();\n\tfor(int i = tot ; i >= 1 ; i --)\n\t{\n\t\tS1.Ins(Sec[i].x);\n\t\tS1.Ins(Sec[i].y);\n\t\tint l,r;\n\t\tl = S1.Rank_to_num(tot - i + 1);\n\t\tr = S1.Rank_to_num(tot - i + 2);\n\t\tint MMid = Mid(l , r);\n\t\tS1.Sum(MMid , Suf[i]);\n\t}\n\tans = 1e18;\n\tfor(int i = 1 ; i < tot ; i ++) ans = min(ans , Pre[i] + Suf[i + 1]);\n\tprintf(\"%lld\\n\",res + ans + tot);\n\treturn 0;\n}\n```",
        "postTime": 1630680004,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3644 [APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865"
    },
    {
        "content": "**[Portal]( https://www.luogu.com.cn/problem/P3644 )**\n\n\u9996\u5148\u6ce8\u610f\u5230\u5bb6\u548c\u529e\u516c\u5ba4\u5728\u6cb3\u540c\u4fa7\u7684\u662f\u65b9\u6848\u552f\u4e00\u7684\uff08\u5c31\u76f4\u63a5\u8d70\uff09\uff0c\u5148\u7b97\u5230\u7b54\u6848\u91cc\u9762\u53bb\u3002\u7136\u540e\u5269\u4e0b\u6765\u7684\u90fd\u662f\u88ab\u5206\u5728\u4e24\u5cb8\u7684\u3002\n\n\u663e\u7136\u4e24\u5cb8\u54ea\u4e2a\u662f\u5bb6\u54ea\u4e2a\u662f\u529e\u516c\u5ba4\u4e0d\u91cd\u8981\u3002\u6211\u4eec\u8bbe\u5b83\u4eec\u7684\u4f4d\u7f6e\u4e3a $l\\leq r$\u3002\u4e8e\u662f\u5982\u679c\u901a\u8fc7\u7684\u6865\u4e3a $a$\uff0c\u4e0d\u96be\u5217\u51fa\u8d70\u7684\u8def\u7a0b\u7684\u5f0f\u5b50 $|l-a|+|r-a|+1$\uff08\u6211\u5f53\u65f6\u5c31\u662f\u6ca1\u60f3\u5230\u628a\u5f0f\u5b50\u5217\u51fa\u6765\uff0c\u8fdb\u4e00\u6b65\u901a\u8fc7 $+$ \u53f7\u62c6\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5143\u7d20\uff0c\u800c\u60f3\u7740\u4ee5\u5bb6\u3001\u529e\u516c\u5ba4\u7684\u5bf9\u4e3a\u6700\u5c0f\u5143\u7d20\u505a\uff0c\u8fd9\u663e\u7136\u662f\u9ebb\u70e6\u7684\uff09\uff0c\u5176\u4e2d\u8fd9\u4e2a $1$ \u4e5f\u53ef\u4ee5\u9884\u5904\u7406\u6389\uff0c\u5269\u4e0b\u4e24\u4e2a\u7edd\u5bf9\u503c\u4e4b\u548c\u3002\n\n\u5bf9 $m$ \u5206\u7c7b\uff1a\n\n1. $m=1$\u3002\u8fd9\u4e2a\u5176\u5b9e\u7b80\u5355\u81f3\u6781\uff0c\u5c31\u7b97\u4e0d\u5217\u5f0f\u4e5f\u53ef\u4ee5\u8f7b\u677e\u505a\u3002\u4e0d\u8fc7\u6211\u4eec\u5df2\u7ecf\u628a\u5f0f\u5b50\u5217\u51fa\u6765\u4e86\uff0c\u90a3\u5c31\u7167\u8fd9\u4e2a\u601d\u8def\u505a\u5427\u3002\u6211\u4eec\u8bbe\u8fd9\u6761\u552f\u4e00\u7684\u6865\u4e3a $a$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\sum(|l_i-a|+|r_i-a|)$\uff0c\u4e0d\u96be\u53d1\u73b0 $\\sum$ \u540e\u9762\u7684\u4e24\u9879\u4e5f\u662f\u72ec\u7acb\u7684\uff08\u8fd9\u662f\u672c\u9898\u7684\u5173\u952e\uff09\uff0c\u4e8e\u662f\u62c6\u5f00\uff0c\u62c6\u6210 $2n$ \u4e2a  $|x-a|$ \u7684\u548c\u3002\u90a3\u4e48\u6839\u636e\u521d\u4e00\u6570\u5b66\u6211\u4eec\u77e5\u9053 $a$ \u53d6 $x$ \u7684\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\u6700\u4f18\uff1b\n\n2. $m=2$\u3002\u4f9d\u7136\u6cbf\u7528\u4e0a\u9762\u7684\u601d\u8def\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u6865 $a<b$ \u6bcf\u4e2a\u4eba\u53ef\u4ee5\u6709\u4e24\u79cd\u51b3\u7b56\uff08\u76ee\u524d\u4e3a\u6b62\u8fd8\u4e0d\u80fd\u62c6\u5f00\uff0c\u56e0\u4e3a\u5bb6\u548c\u529e\u516c\u5ba4\u7684\u51b3\u7b56\u5fc5\u987b\u76f8\u540c\uff09\u3002\u6211\u4eec\u8003\u8651\u5bf9 $l,r$\uff0c$a$ \u548c $b$ \u54ea\u4e2a\u66f4\u4f18\u5462\uff1f\u5206\u6210\u56db\u7c7b\uff08$l$ \u4e0e $a$ \u7684\u5173\u7cfb\u3001$r$ \u4e0e $b$ \u7684\u5173\u7cfb\uff09\u4e0d\u96be\u5217\u51fa\u6761\u4ef6\u5f0f\uff1a$l$ \u66f4\u4f18\u5f53\u4e14\u4ec5\u5f53 $l-a\\leq b-r$\u3002\u79fb\u9879\u5f97 $l+r\\leq a+b$\u3002\u8fd9\u6837\u5b50\u5c31\u662f\u4e00\u4e2a\u5173\u4e8e $l_i+r_i$ \u7684\u4e0d\u7b49\u5f0f\u3002\u4e8e\u662f\u53c8\u6709\u4e86\u4e00\u4e2a\u7ed3\u8bba\uff1a\u6309 $l+r$ \u6392\u5e8f\u540e\uff0c\u9009\u5de6\u8fb9\u6865\u7684\u4e00\u5b9a\u662f\u4e2a\u524d\u7f00\uff0c\u4e8e\u662f\u9009\u53f3\u8fb9\u6865\u7684\u662f\u540e\u7f00\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u60ef\u7528\u5957\u8def\uff1a\u679a\u4e3e\u8fd9\u4e2a\u65ad\u70b9\u3002\n\n   \u65ad\u70b9\u4e24\u8fb9\u663e\u7136\u662f\u72ec\u7acb\u7684\u3002\u5bf9\u4e8e\u6bcf\u8fb9\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u5c06\u7edd\u5bf9\u503c\u62c6\u5f00\u4e86\uff0c\u5f52\u7ea6\u5230\u4e86 $m=1$ \u7684\u65f6\u5019\u3002\u4e8e\u662f\u73b0\u5728\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u6bcf\u4e2a\u524d\u7f00\u7684\u4e2d\u4f4d\u6570\uff08\u53c8\u66b4\u9732\u4e86 APIO \u7684\u6bd2\u7624 DS \u672c\u8d28\uff09\u3002\u663e\u7136\u8981\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u52a0\u5165\u6570\u3002\u90a3\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u50bb\u5b50\u90fd\u80fd\u60f3\u5230\u5e73\u8861\u6811\uff0c\u4f46\u662f hb \u6ca5\u5c3d\u5fc3\u8840\u6559\u6211\u4eec\u5982\u4f55\u4e0d\u7528\u5e73\u8861\u6811\u3001\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u4e5f\u4e0d\u80fd\u8f9c\u8d1f\u4ed6\u7684\u671f\u671b\u3002\u8fd9\u4e2a\u63d2\u5165\u6570\u3001\u67e5 xth \u663e\u7136\u79bb\u6563\u5316\u7136\u540e\u503c\u57df BIT \u500d\u589e\u4e5f\u53ef\u4ee5\u3002\u8fd8\u6709\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u65b9\u6cd5\uff1a\u7ef4\u62a4\u5de6\u53f3\u4e24\u534a\u7684 `set`\uff0c\u6bcf\u6b21\u63d2\u5165\u540e\u8c03\u6574\u4e00\u4e0b\u5de6\u53f3\u4e24\u8fb9\u7684\u76f8\u5bf9\u5355\u8c03\u6027\uff0c\u7136\u540e\u5fae\u8c03\u4e00\u4e0b\u4e24\u8fb9\u7684\u5143\u7d20\u4e2a\u6570\u5e73\u8861\u5373\u53ef\uff0c\u8fd9\u4e2a\u8fd8\u662f\u633a\u81ea\u7136\u7684\u3002\n\n**_[code]( https://www.luogu.com.cn/paste/jbvr4cv6 )_**",
        "postTime": 1606749722,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "FHQ \u559c\u52a0\u4e00... % Venuses\n\n\u867d\u8bf4\u8fd9\u9898\u505a\u6cd5\u5f88\u591a\uff0c \u5e73\u8861\u6811\u4e5f\u4e0d\u662f\u6700\u65b9\u4fbf\u7684\uff08\u7ebf\u6bb5\u6811\u6216\u8005\u4e24\u4e2a\u5806\u5c31\u80fd\u8fc7\u7684\u4e1c\u897f\uff09\uff0c\u4f46\u662f\u8fd8\u662f\u6253\u4e86\u4e2a\u5e73\u8861\u6811\n# noteskey\n\n\u603b\u7684\u6765\u8bf4\u5c31\u662f\u628a\u540c\u4e00\u8fb9\u7684\u70b9\u76f4\u63a5\u7b97\u8d21\u732e\uff0c\u7136\u540e\u4e24\u8fb9\u7684\u70b9\u5c31\u662f\u89c2\u5bdf\u4e00\u4e0b\u53d1\u73b0\u7b97\u5b83\u4eec\u5230\u6865\u7684\u8ddd\u79bb\u4e4b\u548c\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u529e\u516c\u5ba4\u548c\u4f4f\u6240\u7684\u4f4d\u7f6e\u5176\u5b9e\u90fd\u6ca1\u4ec0\u4e48\u7279\u522b\u7684...\n\n\u6240\u4ee5\u8fd9\u4e24\u8005\u90fd\u53ef\u4ee5\u653e\u5230\u4e00\u6761\u6570\u8f74\u4e0a\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u6210\u4e86\u5728\u6570\u8f74\u4e0a\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f...\n\n**\u8fd9\u4e0d\u5c31\u662f\u6c42\u4e2d\u70b9\u561b\uff01sort \u4e00\u904d\u7684\u4e8b\u60c5\uff01**\n\n\n\u5bf9\uff0c\u7b2c\u4e00\u5c0f\u95ee\u53ef\u4ee5\u8fd9\u4e48\u6c34\u8fc7\u53bb\uff0c\u4f46\u662f\u7b2c\u4e8c\u95ee\u91cc k=2 \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u679a\u4e3e\u65ad\u70b9\uff0c\u7b97\u4e24\u4e2a\u90e8\u5206\u7684\u4e2d\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u7684\u6570\u8f74\u4e2d\u70b9\n\n\n\u8fd9\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u6bcf\u6b21 split \u51e0\u4e0b merge \u51e0\u4e0b\u5c31\u597d\u4e86\uff08FHQ \u6253\u7684\u8fd8\u662f\u633a\u8212\u670d\u7684\uff0c\u867d\u8bf4\u665a\u4e0a\u5237\u9898\u611f\u89c9\u5f88\u56f0...\uff09\n\n\n\u7136\u540e\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u5c31\u662f\u6570\u8f74\u4e0a\u4f1a\u6709\u91cd\u5408\u7684\u70b9\uff0c\u8fd9\u4e2a\u53ef\u80fd\u8981\u5173\u6ce8\u4e00\u4e0b...\n\n\n\n\n\n\n# code\n\n```\n//by Judge\n#include<bits/stdc++.h>\n#define Rg register\n#define fp(i,a,b) for(Rg int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(Rg int i=(a),I=(b)-1;i>I;--i)\n#define swap(x,y) (x)^=(y)^=(x)^=(y)\n#define ll long long\nusing namespace std;\nconst int M=2e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline bool cmin(ll& a,ll b){return a>b?a=b,1:0;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline int cread(){ char c=getchar();\n\twhile(!isalpha(c)) c=getchar(); return c!='B';\n} int n,k,num; ll ans[M],Ans;\nstruct node{ int l,r,pos; }a[M];\ninline bool cmp(node& a,node& b){return a.pos<b.pos;}\nnamespace FHQTreap{ arr rt,val,pos,siz; ll sum[M]; int root,tot,son[M][2];  //FHQ \u57fa\u64cd \n\tinline int Rand(){static int seed=131;return seed=int(seed*48271ll%(~0u>>1));}\n\tinline int newnode(int x=0){return ++tot,val[tot]=sum[tot]=x,siz[tot]=1,pos[tot]=Rand(),tot;}\n\tinline void pushup(int x){\n\t\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1,\n\t\tsum[x]=val[x]+sum[son[x][0]]+sum[son[x][1]];\n\t}\n\tint merge(int x,int y){ if(!x||!y) return x|y;\n\t\tif(pos[x]<pos[y]) return son[x][1]=merge(son[x][1],y),pushup(x),x;\n\t\telse return son[y][0]=merge(x,son[y][0]),pushup(y),y;\n\t}\n\tvoid split(int rt,ll k,int& x,int& y){ if(!rt) return x=y=0,void();\n\t\tif(val[rt]>k) split(son[y=rt][0],k,x,son[rt][0]);\n\t\telse split(son[x=rt][1],k,son[rt][1],y); pushup(rt);\n\t}\n\tinline int findk(int rt,int k){ // \u5faa\u73af\u7248...\u6c42 k \u5927\u503c \n\t\twhile(1) if(k<=siz[son[rt][0]]) rt=son[rt][0];\n\t\t\telse if(k==siz[son[rt][0]]+1) return val[rt];\n\t\t\telse k-=siz[son[rt][0]]+1,rt=son[rt][1];\n\t}\n\tinline void insert(ll val){ //\u63d2\u5165\u4e00\u4e2a\u70b9 \n\t\tint x,y; split(root,val,x,y);\n\t\troot=merge(x,merge(newnode(val),y));\n\t}\n} using namespace FHQTreap;\ninline ll query(ll val){ int x,y;\n\tll Sum=siz[root]>>1,res=0;\n\tsplit(root,val-1,x,y); //\u628a val \u70b9\u4e0a\u7684\u8d21\u732e\u5355\u72ec\u7b97\u51fa\u6765\uff0c\u52a0\u5230\u524d\u534a\u4e2a\u7684\u8d21\u732e\u91cc \n\tres=(sum[x]+val*(Sum-siz[x]))<<1;\n\treturn root=merge(x,y),res;\n}\ninline ll calc(){\n\tll va=findk(root,siz[root]>>1);\n\treturn sum[root]-query(va); // \u603b\u524d\u7f00\u548c\u957f\u5ea6\u51cf\u53bb\u524d\u534a\u5206\u524d\u7f00\u548c\u7684\u4e24\u500d\uff08\u624b\u63a8\u53ef\u5f97\uff09 \n}\nint main(){ k=read(),n=read();\n\tint p,q,s,t; fp(i,1,n){ p=cread(),s=read(),q=cread(),t=read();\n\t\tif(s>t) swap(s,t); if(p==q) Ans+=t-s; else a[++num]={s,t,s+t};\n\t} sort(a+1,a+1+num,cmp); //\u6240\u6709\u7684\u70b9\u6309\u91cd\u5fc3\u6392\u5e8f\uff0cemmm \u597d\u50cf\u662f\u91cd\u5fc3\u4e58\u4e86 2 \uff0c\u4f46\u8fd9\u4e0d\u91cd\u8981\u3010\u96fe \n\tfp(i,1,num) insert(a[i].l),insert(a[i].r),ans[i]=calc(); //\u8ba1\u7b97\u52a0\u5165\u4e00\u5bf9\u70b9\u4e4b\u540e\u7684\u91cd\u5fc3\u8d21\u732e \n\tif(k==1) return !printf(\"%lld\\n\",ans[num]+Ans+num);  // Ans \u56fa\u6709\u8d21\u732e\uff0cnum \u8fc7\u6865\u56fa\u6709\u8d21\u732e \n\tll cnt=ans[num]; memset(son,0,(tot+2)<<3),root=tot=0;\n\tfd(i,num,1) insert(a[i].l),insert(a[i].r),cmin(cnt,ans[i-1]+calc()); //\u7528\u4e4b\u524d\u5904\u7406\u51fa\u6765\u7684\u524d\u7f00\u4fe1\u606f\u4f18\u5316\u7b2c\u4e8c\u6b65 \n\treturn !printf(\"%lld\\n\",cnt+Ans+num);\n}\n```\n\n\n\n",
        "postTime": 1555337337,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    },
    {
        "content": "\u6309\u7167\u5176\u4ed6\u9898\u89e3\u6240\u8bf4\u7684\uff0c\u5148\u6309\u7167\u4e2d\u70b9\u6392\u5e8f\uff0c\u518d\u679a\u4e3e\u5206\u5272\u70b9\u5c31\u884c\u4e86\n\n\u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5\u5f97\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u5f53\u4e00\u5171\u6709\u4e24\u5ea7\u6865\u65f6\uff0c\u4e00\u5b9a\u4f1a\u6709$a$\u6761\u8def\u8d70\u5de6\u8fb9\u7684\u6865\uff0c\u53e6\u5916$n-a$\u6761\u8def\u8d70\u53f3\u8fb9\u7684\u6865\uff0c\u663e\u7136\u5728\u679a\u4e3e\u5206\u5272\u70b9\u65f6\u6211\u4eec\u53ef\u4ee5\u53d6\u904d\u6240\u6709$a$\n\n\u540c\u65f6\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684$a$\uff0c\u663e\u7136\u6392\u5e8f\u540e\u5de6\u8fb9$a$\u4e2a\u8d70\u5de6\u8fb9\u5176\u4f59\u8d70\u53f3\u8fb9\u662f\u6700\u597d\u7684\u65b9\u6848\uff0c\u56e0\u4e3a\u4ea4\u6362\u4efb\u4f55\u4e24\u6761\u8def\u5f84\u90fd\u53ea\u53ef\u80fd\u4f7f\u7b54\u6848\u53d8\u52a3\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\u6211\u7528\u7684\u662f\u4e00\u4e2a\u88f8\u7684$treap$\uff0c\u6bd5\u7adf\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u53ea\u6709\u63d2\u5165\uff0c\u67e5\u8be2\u4e2d\u4f4d\u6570\u548c\u7edf\u8ba1\u7b54\u6848\uff0c$treap$\u662f\u5b8c\u5168\u53ef\u4ee5\u505a\u5230\u7684(\u800c\u4e14\u5e38\u6570\u8fd8\u5c0f)\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long ll;\ntypedef struct node{\n    ll l,r,v,sum,siz,rnd,w;\n}node;\n\ntypedef struct path{\n    ll l,r,mid;\n}path;\n\nconst ll seed=9102;\npath p[100010];\nnode t[400010];\nll k,n,root,tot,ans[100010],siz,minans=1000000000000000000,preans;\n\ninline ll read(){\n    ll num=0,k=1; char c=getchar();\n    while(c>'9' || c<'0') k=(c=='-')?0:k,c=getchar();\n    while(c>='0' && c<='9') num=num*10+c-'0',c=getchar();\n    return k?num:-num;\n}\n\ninline ll readside(){\n    char c=getchar();\n    while(c!='A' && c!='B') c=getchar();\n    return c=='A';\n}\n\nvoid update(ll k) {t[k].sum=t[t[k].l].sum+t[t[k].r].sum+t[k].v*t[k].w; t[k].siz=t[t[k].l].siz+t[t[k].r].siz+t[k].w;}\n\nvoid rturn(ll &k){\n    ll x=t[k].l;\n    t[k].l=t[x].r; t[x].r=k;\n    update(k); update(x); k=x;\n}\n\nvoid lturn(ll &k){\n    ll x=t[k].r;\n    t[k].r=t[x].l; t[x].l=k;\n    update(k); update(x); k=x;\n}\n\nvoid insert(ll &k,ll v){\n    if(!k){\n        k=++tot;\n        t[k].v=t[k].sum=v; t[k].w=t[k].siz=1; t[k].rnd=rand();\n        return;\n    }\n    t[k].siz++; t[k].sum+=v;\n    if(t[k].v==v) t[k].w++;\n    else if(v<t[k].v) {insert(t[k].l,v); if(t[t[k].l].rnd<t[k].rnd) rturn(k);}\n    else {insert(t[k].r,v); if(t[t[k].r].rnd<t[k].rnd) lturn(k);}\n}\n\nll calmid(){\n    ll x=root,k=(t[root].siz+1)>>1;\n    while(true){\n        if(t[t[x].l].siz>=k) x=t[x].l;\n        else if(k>t[t[x].l].siz+t[x].w) k-=t[t[x].l].siz+t[x].w,x=t[x].r;\n        else return t[x].v;\n    }\n}\n\nll calsum(ll v){\n    ll x=root,tmp=0;\n    while(true){\n        if(t[x].v<v) tmp+=v*(t[t[x].l].siz+t[x].w)-t[t[x].l].sum-t[x].v*t[x].w,x=t[x].r;\n        else if(t[x].v>v) tmp+=t[t[x].r].sum+t[x].v*t[x].w-v*(t[t[x].r].siz+t[x].w),x=t[x].l;\n        else {tmp+=v*t[t[x].l].siz-t[t[x].l].sum+t[t[x].r].sum-v*t[t[x].r].siz; break;}\n    }\n    return tmp;\n}\n\nbool cmp(path a,path b) {return a.mid<b.mid;}\n\nint main(){\n    srand(seed);\n    k=read(); n=read();\n    for(ll i=1;i<=n;i++){\n        ll s1=readside(),p1=read(),s2=readside(),p2=read();\n        if(p1>p2) swap(p1,p2);\n        if(s1==s2) preans+=p2-p1;\n        else preans++,p[++siz].mid=(p1+p2)>>1,p[siz].l=p1,p[siz].r=p2;\n    }\n    if(!siz) printf(\"%lld\",preans);\n    else{\n        sort(p+1,p+1+siz,cmp);\n        for(ll i=1;i<=siz;i++){\n            insert(root,p[i].l); insert(root,p[i].r);\n            ans[i]=calsum(calmid());\n        }\n        if(k==1) printf(\"%lld\",ans[siz]+preans);\n        else{\n            root=0;\n            for(ll i=siz;i>=1;i--){\n                insert(root,p[i].l); insert(root,p[i].r);\n                minans=min(minans,ans[i-1]+calsum(calmid()));\n            }\n            printf(\"%lld\",minans+preans);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1551088831,
        "uid": 100037,
        "name": "kkxhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3644 \u3010[APIO2015]\u516b\u90bb\u65c1\u4e4b\u6865\u3011"
    }
]