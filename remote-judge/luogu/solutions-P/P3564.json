[
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3564)\n\n\u6211\u662f\u6765\u5e2e\u697c\u4e0b\u52a0\u85e4\u5927\u4f6c\u5199\u9898\u89e3\u7684\u2026\u2026\u5168\u4e16\u754c\u90fd\u6ca1\u627e\u5230\u52a0\u85e4\u5927\u4f6c\u5199\u6cd5\u7684\u8bf4\u660e\u2026\u2026\u5f88\u96be\u53d7\u2026\u2026\n\n\u9996\u5148\u6211\u4eec\u628a$p$\u770b\u6210$1$\uff0c$j$\u770b\u6210$-1$\uff0c\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e\u7b49\u4e8e$0$\uff0c\u6240\u6709\u540e\u7f00\u548c\u90fd\u5927\u4e8e\u7b49\u4e8e$0$\n\n\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u524d\u7f00\u548c\uff0c\u6240\u6709\u524d\u7f00\u548c\u5927\u4e8e\u7b49\u4e8e$0$\u5c31\u662f$sum[i]-sum[l-1]\\geq  0$\uff0c\u6240\u6709\u540e\u7f00\u548c\u90fd\u5927\u4e8e\u7b49\u4e8e$0$\u5c31\u610f\u5473\u7740$sum[n]-sum[i-1]\\geq sum[n]-sum[r]$\uff0c\u5373$sum[i-1]\\leq sum[r]$\uff0c\u7136\u540e\u56e0\u4e3a$sum[r]\\geq sum[l-1]$\u5df2\u7ecf\u5728\u7b2c\u4e00\u4e2a\u6761\u4ef6\u91cc\u6ee1\u8db3\u4e86\uff0c\u6240\u4ee5\u5408\u8d77\u6765\u5c31\u662f$sum[i]\\geq sum[l-1]$\uff0c$sum[r]\\geq sum[i]$\u3002\u7528\u4eba\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5185\u7684$sum$\u90fd\u4e0d\u5c0f\u4e8e$sum[l-1]$\u4e14$sum[r]$\u662f\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6700\u5927\u7684\u6570\n\n\u4e8e\u662f\u6211\u4eec\u5b9a\u4e49$to[i]$\uff0c\u610f\u601d\u662f$[i,to[i]]$\u4e2d\u7684\u6240\u6709\u6570\u90fd\u5927\u4e8e\u7b49\u4e8e$sum[i]$\uff0c\u4e14$sum[to[i]]$\u4e3a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6700\u5927\u7684\u6570\uff0c$to[i]$\u4e3a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u4e2d\u6700\u9760\u53f3\u7684\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u5de6\u7aef\u70b9$i$\uff0c\u5982\u679c$s[i]==j$\u8fd9\u4e2a\u5de6\u7aef\u70b9\u80af\u5b9a\u4e0d\u884c\uff0c\u5426\u5219\u8fd9\u4e2a\u5de6\u7aef\u70b9\u80fd\u5339\u914d\u7684\u6700\u5927\u7684\u53f3\u7aef\u70b9\u5c31\u662f$to[i-1]$\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u6c42\u51fa$to[i]$\u4e86\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u5148\u628a\u6240\u6709\u7684$to[i]$\u90fd\u8d4b\u503c\u4e3a$i$\uff0c\u8fd9\u6837\u5230\u65f6\u5019\u53ef\u4ee5\u5c11\u8ba8\u8bba\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002\n\n\u9996\u5148\uff0c\u5982\u679c$sum[i+1]<sum[i]$\uff0c\u5373$s[i+1]$\u4e3a$p$\uff0c\u90a3\u4e48$to[i]$\u53ea\u80fd\u7b49\u4e8e$i$\uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5c31\u5c0f\u4e8e\u5b83\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8003\u8651\u8ba8\u8bba$s[i+1]$\u4e3a$j$\u7684\u60c5\u51b5\n\n\u6211\u4eec\u8003\u8651\u4ece\u540e\u5f80\u524d\u505a\uff0c\u5b9a\u4e49$nxt[i]$\u4e3a\u5b83\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u4e0e\u5b83$sum$\u76f8\u7b49\u7684\u4f4d\u7f6e\uff0c\u8bb0\u5f55\u4e00\u4e2a\u6307\u9488$las$\uff0c\u8868\u793a\u6bcf\u4e00\u6b21\u7684$to[i]$\uff0c\u73b0\u5728\u505a\u5230\u4e86$i$\uff0c\u90a3\u4e48$las$\u5e94\u8be5\u662f\u6307\u5728$to[i+1]$\u7684\u4f4d\u7f6e\u3002\n\n\u90a3\u4e48\u8f6c\u79fb\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\n\n1.$to[i]=to[i+1]$\uff0c\u90a3\u4e48\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\n![](https://i.loli.net/2018/11/16/5beecffa819e5.png)\n2.$to[i]$\u53d8\u5927\u3002\u6bd4\u5982\u56fe\u4e2d\uff0c$k$\u7684\u4f4d\u7f6e\u624d\u662f$to[i]$\n![](https://i.loli.net/2018/11/16/5beed07a0d603.png)\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u503c\u6700\u591a\u53ea\u4f1a\u76f8\u5dee$1$\uff0c\u4e8e\u662f\u82e5\u662f\u5b58\u5728\u5982\u56fe$2$\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728$nxt[i]$\u3002\u4e0d\u96be\u8bc1\u660e$[i+1,nxt[i]-1]$\u533a\u95f4\u5185\u7684\u6570\u80af\u5b9a\u540c\u65f6\u5927\u4e8e$sum[i]$\u6216\u540c\u65f6\u5c0f\u4e8e$sum[i]$\uff0c\u5982\u679c\u5168\u90fd\u5c0f\u4e8e\u90a3\u4e48\u6709$sum[i+1]<sum[i]$\uff0c\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5904\u7406\u6389\u4e86\u3002\u6240\u4ee5$[i+1,nxt[i]-1]$\u4e4b\u95f4\u7684\u6570\u5fc5\u7136\u5168\u90fd\u5927\u4e8e$sum[i]$\u3002\u56e0\u4e3a$to[nxt[i]]$\u5df2\u7ecf\u6c42\u51fa\u6765\u4e86\uff0c\u5982\u679c$sum[to[nxt[i]]]\\geq sum[las]$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a$[i,nxt[i]-1]$\u8fd9\u4e00\u6bb5\u7ed9\u63a5\u4e0a\u53bb\uff0c\u90a3\u4e48\u65b0\u7684\u533a\u95f4$[i,to[nxt[i]]]$\u80af\u5b9a\u8fd8\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u4e14\u4e0d\u96be\u8bc1\u660e\u4e0d\u5b58\u5728\u6bd4\u5b83\u66f4\u4f18\u7684\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u8ba9$las$\u6307\u5411$to[nxt[i]]$\u5e76\u66f4\u65b0$to[i]$\u5373\u53ef\u3002\n\n\u53ea\u8981\u5904\u7406\u51fa$[0,n-1]$\u7684\u6240\u6709\u7684$to[i]$\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f$max\\{to[i-1]-i+1\\}(s[i]==p)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\n\n\u4ee3\u7801\u770b\u697c\u4e0b\u52a0\u85e4\u5927\u4f6c\u7684\u597d\u4e86",
        "postTime": 1542378023,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u73b0\u5728\u88ab\u8feb\u5f00\u59cb\u5237Poi\u7684\u6240\u6709\u9898\uff0c\u53d1\u73b0\u8fd9\u9898\u6d1b\u8c37\u6ca1\u6709\u9898\u89e3\uff0c\u90a3\u6211\u5c31\u53d1\u4e00\u6ce2\u3002\n\n\u7f51\u4e0a\u5f88\u591a\u9898\u89e3\u611f\u89c9\u90fd\u597d\u590d\u6742\uff0c\u8981\u6811\u72b6\u6570\u7ec4\uff0c\u5355\u8c03\u6808\uff0c\u4e8c\u5206\u4ec0\u4e48\u7684\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u601d\u8def\uff1a\u6211\u4eec\u628a**p**\u770b\u505a**1**\uff0c**j**\u770b\u505a**-1**\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u8fd9\u9898\u6240\u8c13\u7684\u4ece\u5de6\u4ece\u53f3\u53d6\u90fd\u662fp\u7684\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8ej\u7684\u4e2a\u6570\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u8f6c\u53d8\u4e3a\u524d\u7f00\u548c\u548c\u540e\u7f00\u548c\u7684\u6240\u6709\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e0.\u7136\u540e\u627e\u4e00\u6bb5\u8fd9\u6837\u5b50\u7684\u6700\u957f\u533a\u95f4\u3002\n\n\u8bb0\u524d\u7f00\u548c\u4e3asum\u3002\n\u800c\u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u533a\u95f4[l,r]\uff0c\u4e00\u5b9a\u4f1a\u6709sum[l]<=sum[i]<=sum[r](l<=i<=r)\n\n\u6240\u4ee5\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9i\u5bf9\u5e94\u7684\u6700\u8fdc\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u957f\u5ea6\u5c31\u884c\u4e86\u3002\n\ncode\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\ninline void write(res x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\ninline int _max(res x,res y){\n    return x>y?x:y;\n}\ninline int _min(res x,res y){\n    return x>y?y:x;\n}\nconst int N=1e6+10;\nint n,sum[N],minx;\nint head[N],nxt[N],to[N];\nchar str[N];\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tn=read();\n\tscanf(\"%s\",str+1);\n\tfor(res i=1;i<=n;i++){\n\t\tsum[i]=sum[i-1]+(str[i]=='p'?1:-1);\n\t\tminx=_min(minx,sum[i]);\n\t}\n\tfor(res i=n;i>=0;i--){\n\t\tres x=sum[i]-minx;\n        nxt[i]=head[x],head[x]=i,to[i]=i;\n\t}\n\tres ans=0;\n    for(res i=n,pre=n;i>=1;i--){\n        if(str[i]=='j')pre=i-1;\n        else {\n            if(nxt[i-1]>=0&&sum[to[nxt[i-1]]]>=sum[pre])pre=to[nxt[i-1]];\n            to[i-1]=pre;\n            res pos=pre-i+1;\n            ans=max(pos,ans);\n        }\n    }\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1531700105,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010POI2014\u3011BAR-Salad Bar"
    },
    {
        "content": "\u8865\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u3002\n\n\u8fd9\u4e2a\u9898\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u628a$p$\u8bbe\u4e3a$1$\uff0c\u628a$j$\u8bbe\u4e3a$-1$\uff0c\u8ba1\u7b97\u524d\u7f00\u548c\u540e\u5f00\u59cb\u641e\u3002\n\n\u5f88\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u8bb0\u5f55\u4e0b\u524d\u7f00\u548c\u6570\u7ec4$a[i]$\uff0c\u63a5\u7740\u8f6c\u5316\u9898\u610f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff1a$a[l-1]$\u662f\u533a\u95f4$[l-1,r]$\u7684\u6700\u5c0f\u503c\uff0c\u800c$a[r]$\u662f\u533a\u95f4$[l-1,r]$\u7684\u6700\u5927\u503c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\u5728\u5de6\u7aef\uff0c\u800c\u6700\u5927\u503c\u5728\u53f3\u7aef\u7684\u6700\u5927\u533a\u95f4\u3002\u8fd9\u4e2a\u5c31\u662f\u6bd4\u8f83\u663e\u7136\u7684\u7528\u5355\u8c03\u6808\u53ef\u4ee5\u7ef4\u62a4\u7684\u4e1c\u897f\u4e86\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u5c31\u662f\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5de6\u7aef\u70b9$i$\uff0c\u7528\u5355\u8c03\u6808\u6c42\u51fa\u8fd9\u4e9b\u533a\u95f4\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u67e5\u627e\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n \\log n)$\uff0c\u5f53\u7136\u56e0\u4e3a\u8fd9\u4e2a\u9898\u80af\u5b9a\u6709\u66f4\u4f18\u7684$O(n \\log n)$\u89e3\u6cd5\u3002\u8fd9\u4e2a\u9898\u7684\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u5efa\u6811\u548c\u67e5\u8be2\uff0c\u6240\u4ee5\u5e38\u6570\u7279\u522b\u5c0f\u53ef\u4ee5\u8dd1\u5f97\u5f88\u5feb\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <vector>\n#include <queue>\n#include <stack>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nint n,a[1000050];\n\nchar ch[1000050];\n\nstruct Seg_Tree\n{\n\tint l,r;\n\tint maxv;\n}t[4000050];\n\ninline void Push_Up(int id)\n{\n\tt[id].maxv=a[t[id<<1].maxv]>a[t[id<<1|1].maxv]?t[id<<1].maxv:t[id<<1|1].maxv;\n}\n\ninline void Build(int id,int l,int r)\n{\n\tt[id].l=l;\n\tt[id].r=r;\n\tif (l==r)\n\t{\n\t\tt[id].maxv=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(id<<1,l,mid);\n\tBuild(id<<1|1,mid+1,r);\n\tPush_Up(id);\n}\n\ninline int Query(int id,int l,int r)\n{\n\tif (l<=t[id].l && t[id].r<=r)\n\t\treturn t[id].maxv;\n\tint mid=(t[id].l+t[id].r)>>1;\n\tif (r<=mid)\n\t\treturn Query(id<<1,l,r);\n\telse if (l>mid)\n\t\treturn Query(id<<1|1,l,r);\n\telse\n\t{\n\t\tint t1=Query(id<<1,l,r);\n\t\tint t2=Query(id<<1|1,l,r);\n\t\treturn a[t1]>a[t2]?t1:t2;\n\t}\n}\n\n#define right Syameimaru_Aya\n\nint right[1000050];\n\nstack <int> s;\n\nint main()\n{\n\tn=read();\n\tcin >> (ch+1);\n\tfor (int i=1;i<=n;i++)\n\t\ta[i]=a[i-1]+(ch[i]=='p'?1:-1);\n\tBuild(1,1,n);\n\ts.push(n);\n\tint ans=0;\n\tfor (int i=n-1;i>=0;i--)\n\t{\n\t\twhile (!s.empty() && a[i]<=a[s.top()])\n\t\t\ts.pop();\n\t\tright[i]=(s.empty())?n:s.top()-1;\n\t\ts.push(i);\n\t\tif (i+1<=right[i])\n\t\t\tans=max(ans,Query(1,i+1,right[i])-i);\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1566112709,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u7ed9\u4e00\u4e2a\u7a7a\u95f4\u5de8\u5927\u4f46\u662f\u6bd4\u8f83\u597d\u60f3\uff08\uff1f\uff09\u7684\u505a\u6cd5\uff08\n\n\u9996\u5148\u628a $\\text p$ \u770b\u4f5c $1$\uff0c$\\text j$ \u770b\u4f5c $-1$\u3002\u90a3\u4e48\u4e00\u4e2a\u5b50\u4e32\u6ee1\u8db3\u8981\u6c42\u7b49\u4ef7\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u4e0e\u540e\u7f00\u548c\u90fd\u975e\u8d1f\u3002\n\n\u5148\u8003\u8651\u53ea\u9700\u8981\u6ee1\u8db3\u524d\u7f00/\u540e\u7f00\u975e\u8d1f\u7684\u60c5\u51b5\uff0c\u8bb0 $R_i$ \u8868\u793a\u4ece $i$ \u5f00\u59cb\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u8fdc\u53f3\u7aef\u70b9\uff0c$L_i$ \u540c\u7406\u3002\u663e\u7136\u5b83\u4eec\u5177\u6709\u5355\u8c03\u6027\uff0cST\u8868 + \u4e8c\u5206\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5b50\u4e32 $[i,j]$ \u6ee1\u8db3\u8981\u6c42\u7684\u524d\u63d0\u662f\u6ee1\u8db3 $L_j\\leq i$ \u5e76\u4e14 $j\\leq R_i$\u3002\u90a3\u4e48\u4e00\u4e2a\u663e\u7136\u7684\u66b4\u529b\u662f\u679a\u4e3e\u5de6\u7aef\u70b9 $i$\uff0c\u4ece $R_i$ \u5f00\u59cb\u5f80\u524d\u679a\u4e3e\u53f3\u7aef\u70b9 $j$\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3 $L_j\\leq i$ \u7684 $j$\u3002\n\n\u53ef\u4ee5\u5bf9 $L$ \u5f00\u4e00\u4e2a ST\u8868 \u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\u6bcf\u6b21\u4ece\u53f3\u7aef\u70b9\u4e8c\u5206\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6b64\u9898\u7684\u7a7a\u95f4\u53ea\u80fd\u5f00\u4e00\u4e2a ST\u8868\uff01\uff011\n\n[Code](https://www.luogu.com.cn/paste/ef12xlzf)",
        "postTime": 1633848744,
        "uid": 150843,
        "name": "\u5510\u4e00\u6587",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u5f88\u591a\u9898\u76ee\uff0c\u5bf9\u4e8e $\\Theta(n)$ \u7684\u65b9\u6cd5\u786e\u5b9e\u6bd4\u8f83\u96be\u60f3\uff0c\u5f53\u7136\u8fd9\u662f\u5efa\u7acb\u5728\u4e0d\u770b\u9898\u89e3\u5e76\u4e14\u5728\u8003\u8bd5\u7684\u65f6\u5019\u3002\n\n\u5f88\u591a\u65f6\u5019\uff0c\u4e00\u4e9b\u9898\u76ee\u4f1a\u6709\u4e00\u4e9b\u5f88\u663e\u7136\u7684 $\\Theta(n * \\log n) $\u7684\u65b9\u6cd5\uff0c\u975e\u5e38\u5bb9\u6613\u60f3\u5230\u4e0e\u5b9e\u73b0\uff0c\u90a3\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462\uff1f\n\n\u9996\u5148\uff0c\u4e00\u4e2a\u5f88\u5e38\u89c1\u7684\u8f6c\u6362\u5c31\u662f\u5728\u6bd4\u8f83\u4e24\u4e2a\u4e1c\u897f\u7684\u5927\u5c0f\u7684\u65f6\u5019\u628a\u4e00\u4e2a\u91cf\u770b\u6210-1\uff0c\u53e6\u4e00\u4e2a\u770b\u62101\uff0c\u8fd9\u5728\u5f88\u591a\u9898\u76ee\u90fd\u6709\u4f53\u73b0\uff0c\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662f\u62ec\u53f7\u5339\u914d\u3002\n\n#### \u5e94\u8be5\u60f3\u5230\u8f6c\u6362\u6761\u4ef6\u3002\n\n\u7ecf\u8fc7\u4e0d\u65ad\u6a21\u62df\u53ef\u4ee5\u53d1\u73b0\uff0c$[L,R]$\u5408\u6cd5\u5c31\u7b49\u4ef7\u4e8e $sum[L] \\le sum[i] \\le sum[R]  ~~~~~~\\forall i \\in [L,R]$\n\n\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u662f\u679a\u4e3e\u53f3\u7aef\u70b9\u3002\n\u7136\u540e\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e0b\u6700\u5de6\u8fb9\u53ef\u4ee5\u53d6\u5230\u54ea\u91cc\uff0c\u5047\u8bbe\u8fd9\u6837\u4e8c\u5206\u5f97\u5230\u4f4d\u7f6e $x$\n\n#### x\u4e00\u5b9a\u662f\u6700\u5c0f\u5de6\u8fb9\u754c\u7684\u5417\n\n\u5f88\u663e\u7136\uff0c$x$ \u53ef\u80fd\u4e0d\u5408\u6cd5\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u5728\u6570\u7ec4\u4e0a\u4e8c\u5206\n\n\u5728\u4ec0\u4e48\u65f6\u5019\u4f1a\u4e0d\u5408\u6cd5\u5462\n\n\u5b58\u5728\u4e00\u4e2a $p>x$ \u6ee1\u8db3 $sum[p]<sum[x]$ \u7684\u65f6\u5019 $x$ \u662f\u4e0d\u5408\u6cd5\u7684\n\n\u4e5f\u5c31\u662f\u8bf4\u5408\u6cd5\u7684$x$\u4e00\u5b9a\u662f\u5355\u8c03\u9012\u589e\u7684\n\n\u90a3\u4e48\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u6765\u7ef4\u62a4\u5408\u6cd5\u7684 $x$ \u7136\u540e\u5728\u5355\u8c03\u961f\u5217\u4e0a\u4e8c\u5206$x$\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+10;\nchar s[N];\nint n,cnt[N];\nint q1[N],q2[N],r1,r2;\nint Find(int x){\n    int ret=-1;\n    int l=1,r=r2;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(q2[mid]>=x){\n            r=mid-1;\n            ret=mid;\n        }\n        else l=mid+1;\n    }\n    return ret==-1?-1:q2[ret];\n}\nvoid Max(int &x,int y){\n    if(x==-1||x<y) x=y;\t\n}\nint main(){\n    int ans=-1;\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;i++){\n        if(s[i]=='p') cnt[i]=1;\n        else cnt[i]=-1;\n        cnt[i]+=cnt[i-1];\n    }\n    r1=0,r2=0;\n    q2[++r2]=0;\n    q1[++r1]=0;\n    for(int i=1;i<=n;i++){\n        while(r1&&cnt[q1[r1]]<=cnt[i]) r1--;\n        int L=q1[r1]+1;\n        if(!r1) L=0;\n        q1[++r1]=i;\n        while(r2&&cnt[q2[r2]]>cnt[i]){\n            r2--;\n        }\n        int to=Find(L);\n        if(to==-1) to=i;\n        q2[++r2]=i;\n        Max(ans,i-to);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1539008630,
        "uid": 71577,
        "name": "renhao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u9996\u5148\u819c\u62dc\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u53d1\u9898\u89e3\u7684\u5927\u4f6c\n\n\u7f51\u7edc\u4e0a\u7684\u9898\u89e3\u8f83\u4e3a\u590d\u6742\uff0c\u800c\u4e14\u5bf9\u6c34\u5e73\u8981\u6c42\u8f83\u9ad8\u3002\u6240\u4ee5\u672c\u849f\u84bb\u53ea\u597d\u7528\u4e00\u79cd\u7384\u5b66\u7684\u65b9\u6cd5\uff1a1.\u9996\u5148\u9700\u8981\u7c7b\u4f3c\u4e8e\u524d\u5411\u661f\u5b58\u8fb9\u4e00\u6837\u7528O(n)\u7684\u590d\u6742\u5ea6\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u524d\u7f00\u548c\u76f8\u540c\u7684\u4f4d\u7f6e                                                    \n    2.\u63a5\u4e0b\u6765\u7528pre\u50a8\u5b58\u4e0a\u4e00\u6b21\u7559\u4e0b\u7684\u53ef\u80fd\u7684\u6700\u4f18\u4f4d\u7f6e\uff0c\u5177\u4f53\u770b\u4ee3\u7801\n   ```\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define res register int\n#define M 1000005\nusing namespace std;\nchar A[M];\nint sum[M],nxt[M],pev[M];\nint last[M];\nint main() {\n\tint n;\n\tscanf(\"%d %s\",&n,A+1);\n\tfor(res i=1; i<=n; i++) \n\t\tsum[i]=sum[i-1]+(A[i]=='p'?1:-1);\n\tfor(res i=n,x; i>=0; i--) {\n\t\tx=sum[i];\n\t\tnxt[i]=last[x];\n\t\tlast[x]=i;\n\t\tpev[i]=i;\n\t}\n\tint ans=0;\n\tfor(res i=1;i<=n;i++)\n\t  printf(\"%d \",sum[i]);\n\tputs(\"\");\n    for(res i=1;i<=n;i++)\n\t  printf(\"%d \",nxt[i]);\n\tputs(\"\");\n\tfor(res i=n,pre=n; i>=1; i--) {\n\t\tif(A[i]=='p') {//A[i]=p\u7684\u8bdd\uff0c\u53ef\u4ee5\u4fdd\u8bc1i-1\u524d\u7f00\u548c\u6bd4\u81ea\u5df1\u5c0f\uff0c\u5c31\u53ef\u4ee5\u5c06i\u7684\u6700\u4f18\u89e3\u6539\u4e3anxt[i-1]\u7684\u6700\u4f18\u89e3 \n\t\t\tif(nxt[i-1]&&sum[pev[nxt[i-1]]]>=sum[pre])pre=pev[nxt[i-1]];\n\t\t\tpev[i-1]=pre;\n\t\t\tans=max(ans,pre-i+1);\n\t\t} else pre=i-1;//A[i]=j\u7684\u8bdd\uff0c\u53ea\u80fd\u4fdd\u8bc1i-1\u662f\u53ef\u80fd\u6700\u4f18\u89e3 \n\t}\n\tfor(res i=1;i<=n;i++)\n\t  printf(\"%d \",pev[i]);\n\tputs(\"\");\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n ",
        "postTime": 1531789797,
        "uid": 26848,
        "name": "miaokehao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u7ed9\u4e00\u4e2a\u4e0d\u4f9d\u8d56 $\\pm 1$ \u7684\u505a\u6cd5\u3002\n\n\u8bbe\u524d\u7f00\u548c\u662f $p$\uff0c\u95ee\u9898\u5c31\u662f\u627e\u5230\u6700\u957f\u7684 $[l,r]$ \u4f7f\u5f97 $p_l,p_r$ \u5206\u522b\u662f\u533a\u95f4\u4e2d\u7684 $\\min,\\max$\u3002\u8fd9\u4e2a\u5176\u5b83\u9898\u89e3\u5df2\u7ecf\u5145\u5206\u8bba\u8ff0\u4e86\u3002\n\n\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u679a\u4e3e $l$\uff0c\u7ef4\u62a4\u9012\u589e\u7684\u975e\u4e25\u683c\u5355\u8c03\u6808\u548c\u9012\u51cf\u7684\u4e25\u683c\u5355\u8c03\u6808\uff0c\u90a3\u4e48\u9012\u589e\u5355\u8c03\u6808\u4e2d\u7684\u5143\u7d20 $r$ \u90fd\u6ee1\u8db3 $p_r$ \u662f\u533a\u95f4 $\\max$\uff0c\u800c\u9012\u51cf\u5355\u8c03\u6808\u4e2d $l$ \u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5143\u7d20\u9650\u5236\u4f4f\u4e86 $p_l$ \u4f5c\u4e3a\u533a\u95f4 $\\min$ \u7684\u8303\u56f4\uff0c\u95ee\u9898\u662f\u67e5\u8be2\u9012\u51cf\u5355\u8c03\u6808\u4e2d $l$ \u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5143\u7d20\u5728\u9012\u589e\u5355\u8c03\u6808\u4e2d\u7684\u524d\u9a71\u3002\n\n\u8003\u8651\u7528\u94fe\u8868\u7ef4\u62a4\u4e24\u4e2a\u5355\u8c03\u6808\u7684\u5f52\u5e76\uff08\uff0c\u540c\u65f6\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u5728\u8fd9\u4e2a\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u5728\u5176\u4e2d\u4ece\u9012\u51cf\u5355\u8c03\u6808\u4e2d $l$ \u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5143\u7d20\u5411\u5de6\u627e\u5c31 $O(1)$ \u5730\u627e\u5230\u4e86\u8fd9\u4e2a\u524d\u9a71\u3002\u603b\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u611f\u89c9\u5f88\u53ef\u80fd\u6709\u66f4\u7b80\u5355\u7684\uff08\u4e0d\u4f9d\u8d56 $\\pm 1$ \u7684\uff09\u505a\u6cd5\u3002\u6709\u6ca1\u6709\u8001\u54e5\u6559\u6559\u3002",
        "postTime": 1675909463,
        "uid": 152213,
        "name": "\u534e\u5c71\u62a1\u5251",
        "ccfLevel": 9,
        "title": "XXI POI Etap 1 Bar sa\u0142atkowy \u9898\u89e3"
    },
    {
        "content": "# \u3010\u7ebf\u6bb5\u6811\u3011\u3010P3564\u3011[POI2014]BAR-Salad Bar\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u53ea\u542b\u5b57\u7b26 ``p`` \u548c ``j`` \u7684\u5b57\u4e32\uff0c\u6c42\u5176\u6700\u957f\u5b50\u4e32 $T$\uff0c\u6ee1\u8db3\u65e0\u8bba\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u8fd8\u662f\u4ece\u53f3\u5f80\u5de6\u904d\u5386\uff0c\u4efb\u610f\u65f6\u523b\u7684 ``p`` \u7684\u4e2a\u6570\u90fd\u4e0d\u4f4e\u4e8e ``j`` \u7684\u4e2a\u6570\u3002\n\n## Limitations\n\n$1 \\leq n \\leq 10^6$\n\n## Solution\n\n\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u65e0\u8111\u4e0d\u9700\u8981\u5206\u6790\u7684\u505a\u6cd5\u2026\u2026\n\n\u9996\u5148\u5bf9\u4e8e\u8fd9\u7c7b\u5b50\u533a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u90fd\u8003\u8651\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6700\u4f18\u5316\u5de6\u7aef\u70b9\u3002\n\n\u6211\u4eec\u5c06\u4e24\u4e2a\u6761\u4ef6\u5206\u5f00\u770b\uff0c\u5373\u8003\u5bdf\u53ea\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u65f6\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u96c6\u5408\uff0c\u5df2\u7ecf\u53ea\u4ece\u53f3\u5411\u5de6\u904d\u5386\u65f6\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u96c6\u5408\u3002\u663e\u7136\u5408\u6cd5\u5b57\u4e32\u7684\u5de6\u7aef\u70b9\u96c6\u5408\u65f6\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u3002\n\n\u5148\u8003\u8651\u4ece\u53f3\u5411\u5de6\u904d\u5386\u7684\u60c5\u51b5\u3002\u663e\u7136\u5f53\u53f3\u7aef\u70b9 $r$ \u5904\u7684\u503c\u4e3a ``j`` \u7684\u65f6\u5019\u4e0d\u5b58\u5728\u5408\u6cd5\u5de6\u7aef\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651 $r$ \u5904\u4e3a ``p`` \u7684\u60c5\u51b5\u3002\u6ce8\u610f\u5230\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5408\u6cd5\u5de6\u7aef\u70b9\u7684\u96c6\u5408\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u4e14 $r$ \u5904\u4e00\u5b9a\u662f\u4e00\u4e2a\u5408\u6cd5\u5de6\u7aef\u70b9\u3002\u5373\u5982\u679c\u67d0\u4e00\u4f4d\u7f6e\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u8be5\u5904\u7684\u5de6\u4fa7\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u56e0\u6b64\u6700\u5de6\u4fa7\u7684\u5408\u6cd5\u5de6\u7aef\u70b9\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\u3002\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a $r$ \u7684\u5e8f\u5217 $A$\uff0c\u7b2c $i$ \u4e2a\u6570 $A_i$ \u8868\u793a\u4ece $[i, r]$ \u7684 ``p`` \u7684\u4e2a\u6570\u51cf\u53bb ``j`` \u7684\u4e2a\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u5e8f\u5217\u7684\u540e\u7f00\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u4e8c\u5206\u51fa\u6700\u540e\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684 $l$ \u503c\u3002\u5f53\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u65f6\uff0c\u8003\u8651\u5982\u679c\u65b0\u7684\u4f4d\u7f6e\u662f ``p``\uff0c\u90a3\u4e48\u5e8f\u5217\u4e0a\u6240\u6709\u4f4d\u7f6e\u7684\u503c\u90fd\u8981\u52a0\u4e00\uff0c\u5426\u5219\u90fd\u8981\u51cf\u4e00\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u533a\u95f4\u52a0\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u5e76\u4e14\u53ef\u4ee5 $O(\\log n)$ \u4e8c\u5206\u7684\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u4e0a\u8ff0 $A$ \u7684\u533a\u95f4\u6700\u5c0f\u503c\u3002\u7136\u540e\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7684\u65b9\u6cd5\uff0c\u4ee5\u672c\u9898\u4e3a\u4f8b\uff0c\u8bbe\u7ebf\u6bb5\u6811\u533a\u95f4 $[l, r]$ \u4ee3\u8868 $A_l$ \u5230 $A_r$ \u7684\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5728\u5f53\u524d\u8282\u70b9\uff0c\u53ea\u9700\u8981\u68c0\u67e5\u53f3\u5b69\u5b50\u7684\u6700\u5c0f\u503c\u662f\u5426\u975e\u8d1f\uff0c\u5982\u679c\u662f\uff0c\u5219\u9012\u5f52\u5de6\u5b69\u5b50\uff0c\u5426\u5219\u9012\u5f52\u53f3\u5b69\u5b50\u5373\u53ef\u3002\n\n \u518d\u8003\u8651\u4ece\u5de6\u5411\u53f3\u904d\u5386\u7684\u60c5\u51b5\u3002\u9996\u5148\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u8bbe `p` \u7684\u503c\u4e3a $1$\uff0c `j` \u7684\u503c\u4e3a $-1$\uff0c\u8bb0 $sum_i$ \u4e3a $i$ \u5904\u7684\u524d\u7f00\u548c\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u597d\u4e86\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u4f4d\u7f6e\u51cf\u53bb $1$ \u7684\u96c6\u5408\uff0c\u6211\u4eec $r$ \u5411\u53f3\u79fb\u65f6\uff0c\u53ef\u80fd\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u4e4b\u53ef\u80fd\u4f1a\u589e\u52a0 $r$ \u672c\u8eab\u4e00\u4e2a\u4f4d\u7f6e\u3002\u800c\u6240\u6709\u5728\u96c6\u5408\u4e2d\u4e14\u6ee1\u8db3 $sum_l > sum_r$ \u7684 $l$ \u503c\u90fd\u8981\u88ab\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u3002\u56e0\u6b64\u6bcf\u4e2a\u7aef\u70b9\u53ea\u4f1a\u88ab\u52a0\u5165\u548c\u79fb\u9664\u96c6\u5408\u4e00\u6b21\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u5c06\u6240\u6709\u4f4d\u7f6e\u6309\u7167 $sum$ \u503c\u6392\u5e8f\u5e76\u52a8\u6001\u7ef4\u62a4\u63d2\u5165\u67d0\u503c\uff0c\u4ee5\u53ca\u5220\u9664\u6700\u5c0f\u503c\u7684\u6570\u636e\u7ed3\u6784\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u7528\u5806\u6765\u7ef4\u62a4\u8fd9\u4e2a\u96c6\u5408\u3002\n\n\u4e3a\u4e86\u5c06\u4e24\u79cd\u60c5\u51b5\u7684\u5408\u6cd5\u5de6\u7aef\u70b9\u548c\u5e76\uff0c\u6211\u4eec\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u65f6\u540c\u65f6\u7528\u4e00\u4e2a ``std::set`` \u6765\u7ef4\u62a4\u6240\u6709\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\u51cf\u53bb $1$ \u7684\u503c\uff08\u5728\u5806\u8fdb\u884c\u5220\u9664\u65f6\u987a\u624b\u5c06 ``set`` \u4e2d\u5143\u7d20\u5220\u9664\u5373\u53ef\uff09\uff0c\u6211\u4eec\u7528\u7b2c\u4e00\u79cd\u60c5\u51b5\u6c42\u51fa\u7684\u6700\u540e\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u5de6\u7aef\u70b9 ``l``\uff0c\u5728 ``set`` \u4e2d\u6c42\u4e00\u4e2a ``lower_bound`` \u5373\u53ef\u627e\u5230\u6700\u5c0f\u7684\u5408\u6cd5\u5de6\u7aef\u70b9\u51cf\u4e00\u540e\u7684\u503c\uff0c\u7528 $r$ \u51cf\u6389\u8fd9\u4e2a\u6570\u5373\u662f $r$ \u5bf9\u5e94\u533a\u95f4\u6700\u957f\u7684\u957f\u5ea6\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <set>\n#include <queue>\n#include <algorithm>\n\nconst int maxn = 1000005;\n\nint n, ans;\nint sum[maxn];\nchar MU[maxn];\n\nstruct dat {\n  int x;\n  \n  inline bool operator<(const dat &_others) const {\n    return sum[x] < sum[_others.x];\n  }\n\n  dat(const int X = 0) : x(X) {}\n};\n\nstd::set<int> ts;\nstd::priority_queue<dat> s;\n\nstruct Tree {\n  Tree *ls, *rs;\n  int l, r, v, tag;\n\n  inline bool InRange(const int L, const int R) { return (L <= l) && (R >= r); }\n  inline bool OutofRange(const int L, const int R) { return (l > R) || (r < L); }\n\n  inline void maketag(const int V) {\n    tag += V;\n    v += V;\n  }\n\n  void pushdown() {\n    if (tag == 0) return;\n    ls->maketag(tag);\n    rs->maketag(tag);\n    tag = 0;\n  }\n\n  void pushup() {\n    v = std::min(ls->v, rs->v);\n  }\n\n  void update(const int L, const int R, const int V) {\n    if (InRange(L, R)) {\n      maketag(V);\n    } else if (!OutofRange(L, R)) {\n      pushdown();\n      ls->update(L, R, V);\n      rs->update(L, R, V);\n      pushup();\n    }\n  }\n\n  int query() {\n    if (l == r) {\n      return (v < 0) ? l : 0;\n    } else {\n      pushdown();\n      if (rs->v < 0) {\n        return rs->query();\n      } else {\n        return ls->query();\n      }\n    }\n  }\n\n\n  Tree(const int L, const int R) : l(L), r(R), v(0), tag(0) {\n    if (L == R) {\n      ls = rs = NULL;\n    } else {\n      int M = (L + R) >> 1;\n      ls = new Tree(L, M);\n      rs = new Tree(M + 1, R);\n    }\n  }\n};\n\nvoid ReadStr(char *p);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n);\n  ReadStr(MU + 1);\n  for (int i = 1; i <= n; ++i) {\n    sum[i] = sum[i - 1] + ((MU[i] == 'p') ? 1 : -1);\n  }\n  auto rot = new Tree(1, n);\n  for (int i = 1; i <= n; ++i) if (MU[i] == 'j') {\n    rot->update(1, i, -1);\n    while ((!s.empty()) && (sum[i] < sum[s.top().x])) {\n      int v = s.top().x;\n      ts.erase(v); s.pop();\n    }\n  } else {\n    s.push(i - 1); ts.insert(i - 1);\n    rot->update(1, i, 1);\n    int l = rot->query();\n    while ((!s.empty()) && (sum[i] < sum[s.top().x])) {\n      int v = s.top().x;\n      ts.erase(v); s.pop();\n    }\n    l = *ts.lower_bound(l);\n    ans = std::max(ans, i - l);\n  }\n  printf(\"%d\\n\", ans);\n  return 0;\n}\n\nvoid ReadStr(char *p) {\n  do *p = IPT::GetChar(); while ((*p != 'p') && (*p != 'j'));\n  do *(++p) = IPT::GetChar(); while ((*p == 'p') || (*p == 'j'));\n  *p = 0;\n}\n\n```\n\n\n\n",
        "postTime": 1579774312,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[\u5355\u8c03\u6808](https://oi-wiki.org/ds/monotonous-stack/)\n\n\u9996\u5148\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u628a `p` \u5f53\u6210 $1$\u3001`j` \u5f53\u6210 $-1$ \u8fdb\u884c\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u8bbe\u524d\u7f00\u548c\u6570\u7ec4\u4e3a $sum_i$\uff0c\u5219\u5408\u6cd5\u533a\u95f4 $[L, R]$ \u9700\u8981\u6ee1\u8db3\uff1a\n\n- $\\displaystyle\\max_{i = L - 1}^{R - 1} sum_i \\leq sum_R$\n- $\\displaystyle\\min_{i = L}^R sum_i \\geq sum_{L - 1}$\n\n\u4e3a\u4e86\u8ba9\u6761\u4ef6\u53d8\u5f97\u6613\u4e8e\u7ef4\u62a4\uff0c\u6211\u4eec\u8003\u8651\u9884\u5904\u7406 $l_i, r_i$ \u5206\u522b\u8868\u793a\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3 $L \\leq i$ \u4e14 $sum_{L - 1} \\leq sum_i$ \u7684 $L$\u3001\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3 $R \\geq i$ \u4e14 $sum_R \\geq sum_{i - 1}$ \u7684 $R$\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u6761\u4ef6\u8f6c\u5316\u4e3a\uff1a\n\n- $l_R \\leq L$\n- $r_L \\geq R$\n\n\u8fd9\u65f6\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u628a $l_R$ \u6302\u5728\u5bf9\u5e94\u7684 $L$ \u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u4e00\u904d $L$\uff0c\u52a0\u5165\u6240\u6709\u5bf9\u5e94\u7684 $R$\uff0c\u518d\u8be2\u95ee $\\leq r_L$ \u7684\u6700\u5927 $R$ \u5373\u53ef\u3002\n\n\u7528\u5355\u8c03\u6808\u9884\u5904\u7406 $l_i, r_i$ \u5e76\u7528 set \u7ef4\u62a4\u5f53\u524d\u53ef\u4ee5\u9009\u62e9\u7684 $R$ \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\n\n\u6a21\u62df\u8d5b\u65f6\u4e3a\u4e86\u4e0d\u88ab\u5361\u5e38\u5199\u4e86\u6811\u72b6\u6570\u7ec4\uff0c\u4f46\u5728\u6709 O2 \u65f6\u4e0d\u5fc5\u8981\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stack>\n#include <cstdio>\n\nusing namespace std;\n\nint sum[1000007], _log2[1000007], st[1000007][27], l[1000007], r[1000007], cnt[1000007], tree[1000007];\nint *bucket[1000007];\nchar a[1000007];\nstack<int> s;\n\ninline int lowbit(int x){\n\treturn x & (-x);\n}\n\ninline void update(int n, int x, int k){\n\twhile (x <= n){\n\t\ttree[x] = max(tree[x], k);\n\t\tx += lowbit(x);\n\t}\n}\n\ninline int get_max(int x){\n\tint ans = 0;\n\twhile (x > 0){\n\t\tans = max(ans, tree[x]);\n\t\tx -= lowbit(x);\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint n, ans = 0;\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", &a[1]);\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (a[i] == 'p'){\n\t\t\tsum[i] = sum[i - 1] + 1;\n\t\t} else {\n\t\t\tsum[i] = sum[i - 1] - 1;\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\ts.push(i - 1);\n\t\twhile (!s.empty() && sum[i] >= sum[s.top()]) s.pop();\n\t\tif (s.empty()){\n\t\t\tl[i] = 1;\n\t\t} else {\n\t\t\tl[i] = s.top() + 1;\n\t\t\tif (l[i] > i) l[i] = -1;\n\t\t}\n\t}\n\twhile (!s.empty()) s.pop();\n\tfor (register int i = n; i >= 1; i--){\n\t\ts.push(i);\n\t\twhile (!s.empty() && sum[i - 1] <= sum[s.top()]) s.pop();\n\t\tif (s.empty()){\n\t\t\tr[i] = n;\n\t\t} else {\n\t\t\tr[i] = s.top() - 1;\n\t\t\tif (r[i] < i) r[i] = -1;\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (l[i] != -1) cnt[l[i]]++;\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tbucket[i] = new int[cnt[i] + 1];\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (l[i] != -1) bucket[l[i]][cnt[l[i]]--] = i;\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (l[i] != -1) cnt[l[i]]++;\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tfor (register int j = 1; j <= cnt[i]; j++){\n\t\t\tupdate(n, bucket[i][j], bucket[i][j]);\n\t\t}\n\t\tif (r[i] != -1) ans = max(ans, get_max(r[i]) - i + 1);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```",
        "postTime": 1666883589,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014] BAR-Salad Bar\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8ba9\u6211\u81ea\u95ed\u4e86\u6570\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\n\n\u9996\u5148\u5206\u4eab\u4e00\u4e2a\u975e\u5e38\u4e0d\u597d\u7684\u4e60\u60ef--\u505a\u9898\u5148\u770b\u6807\u7b7e\uff1a\n\n![QQ\u56fe\u724720200229183529.png](http://61.186.173.89:2019/2020/02/29/d640cf395414e.png)\n\n\u4e8e\u662f\u53ef\u601c\u7684\u6211\u5c31\u88ab\u5751\u4e86\u3002\u3002\u3002\n\n\u770b\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u6211\u9996\u5148\u6253\u4e86\u4e2a\u4e8c\u5206\uff0c\u60f3check\u51fd\u6570\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u4e0b\u9762\uff1a\u6211\u4eec\u628a\u6bcf\u4e2a$p$\u60f3\u8c61\u6210$1$,\u628a\u6bcf\u4e2a$j$\u60f3\u8c61\u6210$-1$,\u9a8c\u8bc1\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a$mid$\u7684\u5e8f\u5217\u6ee1\u8db3\u6587\u4e2d\u6761\u4ef6\u3002\n\n\u5bf9\u4e8e\u8be5\u5e8f\u5217[i,j]\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00\u548c$s1$\u548c\u4e00\u4e2a\u540e\u7f00\u548c$s2$,\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728[i,j]\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684$s1[k]$,\u68c0\u67e5$s1[k] - s1[i-1]$\u662f\u5426\u975e\u8d1f\uff0c\u627e\u5230\u4e00\u4e2a$s2[w]$\uff0c\u68c0\u67e5$s2[w]-s2[j+1]$\u662f\u5426\u975e\u8d1f\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u6700\u5c0f\u503c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7528\u53cc\u7aef\u961f\u5217\u6765\u7ef4\u62a4\u3002\n\n\u7136\u540e\u849f\u84bb\u6109\u5feb\u5730\u6253\u597d\u4e86\u4ee3\u7801\u3002\n\n~~WA\u7a7f\uff0c\u5f53\u573a\u53bb\u4e16~~\n\n\u4ed4\u7ec6\u60f3\u4e00\u60f3\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u5b83\u5e76\u4e0d\u5b58\u5728\u5355\u8c03\u6027\uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a$x+y$\u7684\u5e8f\u5217\u5b58\u5728\uff0c\u4f46\u957f\u5ea6\u4e3a$x$\u7684\u5374\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8981\u8003\u8651\u6b63\u7740\u53d6\u548c\u5012\u7740\u53d6\u3002\n\n~~\u968f\u4fbf\u4e3e\u4e2a\u4f8b\u5b50\u90fd\u80fd\u53d1\u73b0~~\n\n\u6240\u4ee5\u5927\u5bb6\u5343\u4e07\u4e0d\u8981\u65e0\u8111\u4e8c\u5206\uff0c\u4e8c\u5206\u524d\u4e00\u5b9a\u8981\u68c0\u67e5\u5355\u8c03\u6027\u3002\u3002\u3002\n\n\u5927\u5bb6\u4e5f\u4e0d\u8981\u8f7b\u4fe1\u76f2\u4ece\u6807\u7b7e\uff0c\u8981\u6709\u81ea\u5df1\u7684\u601d\u8003\u3002\n\n\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u7684\u6211\u9ad8\u5ea6\u81ea\u95ed\uff0c\u4f46\u663e\u7136\uff0c\u6211\u7684check\u51fd\u6570\u4e2d\u6240\u7528\u5230\u7684\u601d\u8def\u6b63\u89e3\u5fc5\u7136\u4e5f\u4f1a\u7528\u5230\n~~\u4e0d\u7136\u6211\u4e3a\u4ec0\u4e48\u8981\u8bb2~~\u3002\n\n\u6211\u4eec\u73b0\u5728\u7684\u5df2\u77e5\u6709\u7528\u6761\u4ef6\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u5224\u65ad\u4ed6\u662f\u5426\u5408\u6cd5\uff0c\u5373\u6700\u5c0f\u7684$s1[k]$\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e$s1[i-1]$\uff0c\u6700\u5c0f\u7684$s2[w]$\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e$s2[j+1]$\uff0c\u8fd9\u4e24\u4e2a\u6761\u4ef6\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u9009\u53d6\u7b2c\u4e00\u4e2a\u4e3a\u6839\u672c\u8fdb\u884c\u5206\u6790\u3002\n\n\u65e2\u7136$s1[k]$\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e$s1[i-1]$\uff0c\u90a3\u4e48\u6211\u4eec\u4f55\u4e0d\u5148\u628a$i$\u786e\u5b9a\u4e0b\u6765\uff0c\u7136\u540e\u5bfb\u627e\u4ee5$i$\u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u957f\u5408\u6cd5\u533a\u95f4\u957f\u5ea6\u5462\uff1f\u6211\u4eec\u628a$i$\u786e\u5b9a\u4e0b\u6765\u540e\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684$j1$,\u4f7f\u5f97$s1[j1]$\u5c0f\u4e8e$s1[i-1]$\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u6211\u4eec\u6700\u957f\u5408\u6cd5\u533a\u95f4\u7684\u957f\u5ea6\u7684$j$\u5fc5\u7136\u5c0f\u4e8e$j1$\u3002\n\n\u6211\u4eec\u73b0\u5728\u8981\u6839\u636e\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u786e\u5b9a\u6700\u7ec8\u7684\u533a\u95f4\u957f\u5ea6\u3002\u600e\u4e48\u529e\u5462\uff1f\u65e2\u7136\u6700\u5c0f\u7684$s2[w]$\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e$s2[j+1]$\uff0c\u90a3\u4e48$s2[j+1]$\u5fc5\u7136\u5c0f\u4e8e\u8be5\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5$s2[j+1]$\u5fc5\u7136\u662f\u533a\u95f4$[i+1,j1]$\u5185\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u66f4\u5c0f\u5219\u4e0d\u4e00\u5b9a\u6700\u957f\uff0c\u5982\u679c\u66f4\u957f\uff0c\u90a3\u4e48\u53e6\u5916\u7684$s2[j+1]$\u5c31\u5fc5\u7136\u5927\u4e8e$s2[w]$\u3002\n\n\u8bb2\u4e00\u4e0b\u5b9e\u73b0\uff1a\n\n\u6211\u4eec\u73b0\u5728\u8981\u679a\u4e3e\u6bcf\u4e00\u4e2a$i$\uff0c\u7136\u540e\u627e\u5230\u5728\u4ed6\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u4f4d\u7f6e\u3002\n\n\u5173\u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5904\u7406\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\u548c\u7684\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u5982\u679c\u5de6\u8fb9\u7684\u6700\u5c0f\u503c\u6bd4$i$\u7684\u503c\u5c0f\uff0c\u5219\u5f80\u5de6\u8fb9\u8d70\uff0c\u5426\u5219\u5f80\u53f3\u8fb9\u8d70\uff0c\u6bcf\u9884\u5904\u7406\u4e00\u4e2a$i$\u5c31\u628a\u4ed6\u7684\u503c\u6539\u4e3a\u6781\u5927\u503c\u3002\uff08\u7279\u522b\u9e23\u8c22$LYC$\u5de8\u4f6c\u7684\u5e2e\u52a9\uff09\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8981\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\uff0c\u663e\u7136\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u540e\u7f00\u548c\u7684\u533a\u95f4\u6700\u5c0f\u5bf9\u5427\u3002\n\n\u8fd9\u9053\u9898\u4ee3\u7801\u5b9e\u73b0\u8d77\u6765\u8fd8\u662f\u5f88\u70e6\u7684\uff0c\u5e0c\u671b\u5927\u5bb6\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e0b\u3002\n\n\u5b9e\u5728\u4e0d\u884c\u518d\u6765\u53c2\u8003\u4e00\u4e0b\u6211\u7684\u7ed3\u6784\u3002\n\n```cpp\n#include <deque>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1e6 + 5;\nint s1[MAXN] , n , ans[MAXN];\nchar s[MAXN];\nstruct node {\n\tint id , val;\n}t[MAXN << 2];\nvoid build(int l , int  r , int now) {\n\tif(l == r) {\n\t\tt[now].val = s1[l];\n\t\tt[now].id = l;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(l , mid , now << 1);\n\tbuild(mid + 1 , r , now << 1 | 1);\n\tif(t[now << 1].val < t[now << 1 | 1].val) \n\t\tt[now] = t[now << 1];\n\telse t[now] = t[now << 1 | 1];\n}\nint find(int l , int r , int now , int x) {\n\tif(l == r) return l;\n\tint mid = (l + r) >> 1;\n\tif(t[now << 1].val < x) return find(l , mid , now << 1 , x);\n\treturn find(mid + 1 , r , now << 1 | 1 , x);\n}\nvoid update(int l , int r , int now , int x) {\n\tif(l == r) {\n\t\tt[now].val = 1e9;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(x <= mid) update(l , mid , now << 1 , x);\n\telse update(mid + 1 , r , now << 1 | 1 , x); \n\tif(t[now << 1].val < t[now << 1 | 1].val) \n\t\tt[now] = t[now << 1];\n\telse t[now] = t[now << 1 | 1];\n}\nint get_min(int l , int r , int now , int x , int y) {\n\tif(l >= x && r <= y) {\n\t\treturn t[now].id;\n\t}\n\tint mid = (l + r) >> 1 , re1 = 1e9 , re2 = 1e9;\n\tif(x <= mid) re1 = get_min(l , mid , now << 1 , x , y);\n\tif(y > mid) re2 = get_min(mid + 1 , r , now << 1 | 1 , x , y);\n\tif(re1 == 1e9) return re2;\n\tif(re2 == 1e9) return re1;\n\tif(s1[re1] < s1[re2]) return re1;\n\telse return re2;\n}\nint main() {\n\tscanf(\"%d\" , &n);\n\tscanf(\"%s\" , s + 1);\n\tif(n == 1) {\n\t\tif(s[1] == 'p') printf(\"1\");\n\t\telse printf(\"0\");\n\t\treturn 0;\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif(s[i] == 'p') s1[i] = s1[i - 1] + 1;\n\t\telse s1[i] = s1[i - 1] - 1;\n\t}\n\tbuild(1 , n + 1 , 1);\n\ts1[n + 1] = -1e9;\n\tfor (int i = 0; i < n; ++i) {\n\t\tans[i] = find(1 , n + 1 , 1 , s1[i]);\n\t\tif(i) update(1 , n , 1 , i);\n\t\ts1[i] = 0;\n\t}\n\ts1[n] = 0;\n\tfor (int i = n; i >= 1; --i) {\n\t\tif(s[i] == 'p') s1[i] = s1[i + 1] + 1;\n\t\telse s1[i] = s1[i + 1] - 1;\n\t}\n\ts1[n + 1] = -1e9;\n\tbuild(1 , n + 1 , 1);\n\tint Ans = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint t = get_min(1 , n + 1 , 1 , i , ans[i - 1]);\n\t\tAns = max(Ans , max(t - 1 , i) - i + 1);\n\t}\n\tprintf(\"%d\" , Ans);\n\treturn 0;\n} \n\n```\n\n\u6e29\u99a8\u63d0\u793a\uff0c\u5982\u679c\u60a8\u7684\u4ee3\u7801loj\u4e0a40\u5206\uff0c\u6d1b\u8c37\u4e0a80\u5206\u53c2\u8003\u4ee5\u4e0b\u6570\u636e\uff1a\n\n```\n5\nppppp\n```",
        "postTime": 1582974742,
        "uid": 171554,
        "name": "Reanap",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    },
    {
        "content": "# \u8b66\u544a\uff01\u8fd9\u662f\u4e00\u4e2a\u8dd1\u7684\u98de\u6162\u8fd8\u5de8\u957f\u7684\u505a\u6cd5\uff01\n\n\u7ecf\u8fc7\u51e0\u5206\u949f\u7684\u603b\u7ed3\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u770b\u5230$POI$\u4e2d\u975e\u5e38\u50cf\u6570\u636e\u7ed3\u6784\u7684\u9898\uff0c\u5e76\u4e14\u6570\u636e\u8303\u56f4\u4e3a$n\u22641000000$\uff0c\u90a3\u80af\u5b9a\u4f1a\u6709\u4e00\u4e2a\u5f88\u597d\u60f3\u4f46\u6bd4\u8f83\u70e6\u7684$O(nlogn)$\u505a\u6cd5\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e2a\u5f88\u96be\u60f3\u4f46\u5f88\u597d\u5199\u7684$O(n)$\u505a\u6cd5\u2026\u2026\u6211\u662f\u4e00\u4e2a\u5d07\u5c1a\u4f4e\u601d\u7ef4\u7684\u9009\u624b\uff0c\u6240\u4ee5\u5c31\u7b97\u518d\u96be\u7801\u6211\u4e5f\u8981\u7528\u8fd9\u79cd\u65b9\u6cd5\u505a\uff01\u63a5\u4e0b\u6765\u6211\u7ed9\u51fa\u6211\u505a\u8fd9\u9053\u9898\u65f6\u5019\u7684\u60f3\u6cd5\u3002\u6211\u7684\u505a\u6cd5\u662f$nlogn$\u7684\u3002\n\n\u6211\u4eec\u5148\u6b63\u7740\u6765\uff0c\u4e5f\u5c31\u662f\u5148\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u53d6\u3002\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u9898\u76ee\u7684\u8981\u6c42\u3002\u5047\u8bbe$sp[i],sj[i]$\u8868\u793a\u524d$i$\u4e2a\u5b57\u7b26\u4e2d$p,j$\u7684\u6570\u91cf\u3002\u90a3\u4e48\u5982\u679c\u533a\u95f4$[l,r]$\u5408\u6cd5\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55$i\u2208[l,r]$\uff0c\u90fd\u6709$sp[i]-sp[l-1]\u2265sj[i]-sj[l-1]$\u3002\u79fb\u9879\u5f97$sp[i]-sj[i]\u2265sp[l-1]-sj[l-1]$\u3002\n\n\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u5408\u6cd5\u7684\u533a\u95f4\u4e00\u5b9a\u662f\u4e00\u6bb5\u4e00\u6bb5\u51fa\u73b0\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c$[l,r]$\u5408\u6cd5\uff0c\u90a3\u4e48$[l,l],[l,l+1]...[l,r-1],[l,r]$\u90fd\u662f\u5408\u6cd5\u7684\uff08\u6ce8\u610f\uff0c\u6211\u4eec\u4ecd\u7136\u53ea\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u53d6\uff09\u3002\u800c\u5982\u679c$[l,r]$\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48$[l,r+1],[l,r+2]...[l,n]$\u90fd\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u3002\u63d2\u5165\u65f6\uff0c\u4ee5$sp[i]-sj[i]$\u4e3a\u4e0b\u6807\uff08\u5047\u8bbe\u5df2\u7ecf\u8fc7\u67d0\u79cd\u64cd\u4f5c\u90fd\u53d8\u6210\u4e86\u6b63\u6570\uff09\uff0c$i$\u4e3a\u6743\u503c\uff0c\u4ece\u540e\u5f80\u524d\u63d2\u5165\u3002\u627e\u53f3\u7aef\u70b9\u65f6\uff0c\u6bcf\u6b21\u5728$[1,sp[i-1]-sj[i-1]-1]$\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\uff0c\u51cf\u4e00\u4e2a$1$\u5c31\u662f\u5176\u53f3\u7aef\u70b9\u3002\u8fd9\u4e00\u90e8\u5206\u5e94\u8be5\u5f88\u597d\u8003\u8651\u3002\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u6bcf\u4e2a\u70b9\u7684$rto$\u3002\u5982\u679c\u67d0\u4e00\u4f4d$i$\u4e0a\u7684\u5b57\u7b26\u662f$j$\uff0c\u90a3\u4e48$rto[i]=i-1$\uff0c\u5426\u5219$[i,rto[i]]$\u5c31\u662f\u6700\u957f\u7684\u4e00\u4e2a\u5408\u6cd5\u533a\u95f4\u3002\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u4ec5\u8981\u8003\u8651\u6b63\u7740\u6765\uff0c\u8fd8\u8981\u8003\u8651\u53cd\u7740\u6765\u3002\u540c\u6837\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u505a\u6cd5\uff0c\u5f97\u5230\u6bcf\u4e00\u4f4d\u7684\u5de6\u7aef\u70b9$lto$\u3002\n\n\u7136\u540e\u5f88\u663e\u7136\uff0c\u6211\u4eec\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$i$\uff0c\u627e\u5230\u4e00\u4e2a$j,j\u2208[lto[i],i],rto[j]\u2265i$\uff0c\u4e14\u8fd9\u4e2a$j$\u6700\u5c0f\u3002\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u518d\u4e3a$rto$\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e6,M=1e7;\n\nint n,d[N],t[M],T[N*2],sp[N],sj[N],rto[N],lto[N],ans;\nchar c[N];\n\nvoid update1(int i,int l,int r,int x,int y)\n{\n\tt[i]=min(t[i],y);\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (mid>=x) update1(i<<1,l,mid,x,y);\n\t\telse update1(i<<1|1,mid+1,r,x,y);\n}\n\nvoid update2(int i,int l,int r,int x,int y)\n{\n\tt[i]=max(t[i],y);\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (mid>=x) update2(i<<1,l,mid,x,y);\n\t\telse update2(i<<1|1,mid+1,r,x,y);\n}\n\nint query1(int i,int l,int r,int x,int y)\n{\n\tif (l>=x&&r<=y) return t[i];\n\tint mid=(l+r)>>1;\n\tif (mid>=y) return query1(i<<1,l,mid,x,y);\n\tif (mid<x) return query1(i<<1|1,mid+1,r,x,y);\n\treturn min(query1(i<<1,l,mid,x,y),query1(i<<1|1,mid+1,r,x,y));\n}\n\nint query2(int i,int l,int r,int x,int y)\n{\n\tif (l>=x&&r<=y) return t[i];\n\tint mid=(l+r)>>1;\n\tif (mid>=y) return query2(i<<1,l,mid,x,y);\n\tif (mid<x) return query2(i<<1|1,mid+1,r,x,y);\n\treturn max(query2(i<<1,l,mid,x,y),query2(i<<1|1,mid+1,r,x,y));\n}\n\nvoid build(int i,int l,int r)\n{\n\tif (l==r) {T[i]=rto[l];return;}\n\tint mid=(l+r)>>1;\n\tbuild(i<<1,l,mid);build(i<<1|1,mid+1,r);\n\tT[i]=max(T[i<<1],T[i<<1|1]);\n}\n\nint getQ(int i,int l,int r,int x,int y,int pos)\n{\n\tif (T[i]<pos) return n+1;if (l==r) return l;\n\tint mid=(l+r)>>1;\n\tif (mid>=y) return getQ(i<<1,l,mid,x,y,pos);\n\t\telse if (mid<x) return getQ(i<<1|1,mid+1,r,x,y,pos);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint ans=getQ(i<<1,l,mid,x,y,pos);\n\t\t\t\tif (ans==n+1) ans=getQ(i<<1|1,mid+1,r,x,y,pos);\n\t\t\t\treturn ans;\n\t\t\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=9999999;i++) t[i]=n+1;\n\tfor (int i=1;i<=n;i++) \n\t{\n\t\tc[i]=getchar();\n\t\twhile (c[i]!='j'&&c[i]!='p') c[i]=getchar();\n\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tsp[i]=sp[i-1];sj[i]=sj[i-1];\n\t\tif (c[i]=='j') sj[i]++;else sp[i]++;\n\t\td[i]=sp[i]-sj[i]+n+1;\n\t}\n\td[0]=n+1;\n\tfor (int i=n;i>=1;i--)\n\t{\n\t\tupdate1(1,1,n*2+1,d[i],i);\n\t\trto[i]=query1(1,1,n*2+1,1,d[i-1]-1)-1;\n\t}\t\n\tbuild(1,1,n);\n\tfor (int i=1;i<=9999999;i++) t[i]=0;\n\tfor (int i=0;i<=n;i++) sp[i]=sj[i]=d[i]=0;\n\tfor (int i=n;i>=1;i--)\n\t{\n\t\tsp[i]=sp[i+1];sj[i]=sj[i+1];\n\t\tif (c[i]=='j') sj[i]++;else sp[i]++;\n\t\td[i]=sp[i]-sj[i]+n+1;\n\t}\n\td[n+1]=n+1;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tupdate2(1,1,n*2+1,d[i],i);\n\t\tlto[i]=query2(1,1,n*2+1,1,d[i+1]-1)+1;\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (c[i]=='p')\n\t\t{\n\t\t\tint d=getQ(1,1,n,lto[i],i,i);\n\t\t\tans=max(ans,i-d+1);\n\t\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n",
        "postTime": 1566358612,
        "uid": 29575,
        "name": "Holy_Push",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3564 \u3010[POI2014]BAR-Salad Bar\u3011"
    }
]