[
    {
        "content": "[P3234 [HNOI2014]\u6284\u5361\u7ec4](https://www.luogu.org/problemnew/show/P3234)\n\n\u8d81\u6ca1\u6709\u9898\u89e3\u8d76\u7d27\u62a2\u4e00\u8840\u3002\u3002\u3002\n\n\u9898\u76ee\u5df2\u7ecf\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u4e00\u4e2a\u5e26\u901a\u7528\u5b57\u7b26\u7684\u5b57\u7b26\u8f6c\u5339\u914d\u3002\n\n\u4e00\u5f00\u59cb\u770b\u5230\u591a\u6a21\u5f0f\u4e32\uff0c\u4e0d\u7531\u81ea\u4e3b\u5730\u60f3\u8d77\u4e86$AC$\u81ea\u52a8\u673a/$SAM$\u3002\n\n\u7136\u800c\u770b\u4e86\u4e0b\u6570\u636e\u8303\u56f4\uff1a$N\\times \\max_{i=1}^n\\{ Length(str_i) \\}<=10^8$\n\n\u8fd9\u8fd8\u600e\u4e48$AC$\u81ea\u52a8\u673a\u554a\u3002\u3002\u3002\n\n\u4e0d\u77e5\u9053\u600e\u4e48\u505a\uff0c\u5f00\u59cb$YY$~~\uff08\u5176\u5b9e\u5c31\u662f\u7ffb\u9898\u89e3\u3002\u3002\u3002\uff09~~\n\n\u6211\u662f\u5543\u8fd9\u4f4d\u5de8\u4f6c\u7684\u9898\u89e3\u770b\u61c2\u7684\uff1a[\u94fe\u63a5](https://blog.csdn.net/jiangyuze831/article/details/42294833)\n\n\u597d\u795e\u554a\uff0c$KMP$\u90fd\u4e0d\u7528\uff0c\u76f4\u63a5$hash$\u3002\u3002\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u90a3\u4e2a\u5751\u7239\u7684\u6570\u636e\u8303\u56f4\uff0c\u6211\u4eec\u4f7f\u7528$vector$\u6765~~\u641e\u4e8b~~\u89e3\u51b3\u3002\n\n\u7136\u540e\u6211\u4eec\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684$hash$\u503c\u3002\n\n\uff08\u636e\u8bf4\u5355$hash$\u4f1a\u88ab\u5361\uff0c\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u4e0d\u5361\uff0c\u6211\u4eec\u81ea\u884c\u5ffd\u7565\u3002\u3002\u3002\u5982\u679c\u5b9e\u5728\u60f3\u5199\u4e5f\u53ef\u4ee5\u3002\uff09\n\n\u7136\u540e\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n1. \u6240\u6709\u7684\u5b57\u7b26\u4e32\u4e2d\u90fd\u4e0d\u542b\u901a\u914d\u7b26\u3002\n\n\t\u8fd9\u79cd\u60c5\u51b5\u597d\u529e\uff0c\u76f4\u63a5\u6bd4\u8f83\u6211\u4eec\u7b97\u51fa\u6765\u7684$hash$\u503c\u5373\u53ef\u3002\n    \n    \u600e\u4e48\u6bd4\uff1f\u5f53\u7136\u6392\u4e2a\u5e8f\u7136\u540e\u76f8\u90bb\u4e24\u4f4d\u6bd4\u8f83\u554a\u3002\u3002\u3002\n    \n2. \u6240\u6709\u5b57\u7b26\u4e32\u90fd\u542b\u6709\u901a\u914d\u7b26\u3002\n\t\n    \u6ce8\u610f\u5230\u901a\u914d\u7b26\u53ef\u4ee5\u4ee3\u66ff\u4efb\u610f\u5b57\u7b26\u4e32\u3002\n    \n    \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7ba1\u4e2d\u95f4\u7684\u901a\u914d\u7b26\u4e86\uff0c\u53ea\u9700\u8981\u770b\u524d\u7f00\u548c\u540e\u7f00\u3002\n    \n    \u524d\u7f00\u662f\u4ece\u5f00\u5934\u5230\u7b2c\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u540e\u7f00\u540c\u7406\u3002\n    \n    \u6309\u7167\u524d\u7f00\u4ece\u77ed\u5230\u957f\u6392\u5e8f\uff0c\u7136\u540e\u9010\u4e2a\u5224\u65ad\u524d\u7f00\u662f\u5426\u76f8\u7b49\uff0c\u540e\u7f00\u540c\u7406\u3002\n    \n    \u4e2d\u95f4\u7684\u901a\u914d\u7b26\u80af\u5b9a\u6709\u4e00\u79cd\u65b9\u6848\u641e\u6210\u5339\u914d\u7684\u3002\n\n3. \u90e8\u5206\u5b57\u7b26\u4e32\u90fd\u542b\u6709\u901a\u914d\u7b26\u3002\n\n\t\u9996\u5148\uff0c\u628a\u4e0d\u542b\u6709\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u4e00\u4e0b\u3002\n    \n    \u7136\u540e\u8ba9\u6240\u6709\u542b\u6709\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u53d8\u6210\u4e0d\u542b\u6709\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u3002\n    \n    \u600e\u4e48\u53d8\u5462\uff1f\n    \n    \u6211\u4eec\u6309\u7167\u4e0a\u4e00\u79cd\u60c5\u51b5\u7684\u60f3\u6cd5\uff0c\u5148\u628a\u524d\u7f00\u548c\u540e\u7f00\u53bb\u6389\u3002\n    \n    \u7136\u540e\u8ba9\u542b\u6709\u901a\u914d\u7b26\u7684\u90a3\u4e2a\u7684\u4e2d\u95f4\u90e8\u5206\u5339\u914d\u4e0a\u4e0d\u542b\u6709\u901a\u914d\u7b26\u7684\u4e2d\u95f4\u90e8\u5206\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n    \n    \u4e0a\u9762\u5df2\u7ecf\u8bf4\u4e86\uff0c\u4e2d\u95f4\u7684\u901a\u914d\u7b26\u80af\u5b9a\u6709\u4e00\u79cd\u65b9\u6848\u641e\u6210\u5339\u914d\u7684\u3002\n    \n    \u6240\u4ee5\u662f\u53ef\u884c\u7684\u3002\n    \n    \u600e\u4e48\u641e\u5462\uff1f\n    \n    \u76f4\u63a5\u66b4\u529b\u5c31\u884c\u8fa3\uff01\u53cd\u6b63\u600e\u4e48\u5f04\u90fd\u662f$O(n)$\u3002\u3002\u3002\n    \n    \u5229\u7528\u901a\u914d\u7b26\u5206\u5272\u542b\u6709\u901a\u914d\u7b26\u7684\u4e2d\u95f4\u90e8\u5206\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6307\u9488\u53bb\u626b\u4e0d\u542b\u6709\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u3002\n    \n    \u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u4e5f\u88ab\u6109\u5feb\u5730\u89e3\u51b3\u4e86\uff01\n    \n\u5230\u6b64\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u5206\u6790\u7ed3\u675f\u3002\n\n\u4f46\u662f$STL$\u5e38\u6570\u8f83\u5927\u600e\u4e48\u529e\uff1f\u6211\u4eec\u7684$vector,string$\u662f\u80af\u5b9a\u4e0d\u80fd\u52a8\u7684\u3002\u3002\u3002\n\n\u53ea\u5269\u4e0b\u5e38\u6570\u5de8\u5927\u7684$O(n)$\u7684\u66b4\u529b\u4e0e\u8bfb\u5165\uff0c\u5e76\u4e14\u5e38\u6570\u5de8\u5927\u7684\u66b4\u529b\u597d\u50cf\u4e5f\u6ca1\u6709\u4ec0\u4e48\u4f18\u5316\u7684\u4f59\u5730\u3002\u3002\u3002\n\n\u90a3\u5c31\u53ea\u5269\u8bfb\u5165\u4e86\u3002\u3002\u3002\n\n\u8bfb\u5165\u4f18\u5316\uff1f\u53ef\u4ee5\u3002\n\n\u4f46\u662f\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5173\u95ed\u6d41\u7684\u540c\u6b65\u3002\n\n\u4e5f\u5c31\u662f\u5728$main$\u51fd\u6570\u5f00\u5934\u6dfb\u52a0\u4e00\u53e5\uff1a\n```cpp\nios::sync_with_stdio(false);\n```\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u4e86\uff01\n\n\u9644\u4e0a\u4ee3\u7801\uff08\u7f29\u8fdb\u597d\u4e11\u3002\u3002\u3002\uff09\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<string>\n#define MAXN 100010\n#define MAXM 10000010\n#define base 2333//hash\nusing namespace std;\nint n;\nunsigned long long val[MAXM];//\u4f7f\u7528unsigned long long\u7684\u81ea\u52a8\u6ea2\u51fa\nbool flag;\nstring ch;\nstruct String{//\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\n\tint len,num;\n\tvector<unsigned long long> hash;//\u8bb0\u5f55hash\u503c\n\tvector<int> word;//\u8bb0\u5f55\u6bcf\u4e2a\u901a\u914d\u7b26\u7684\u51fa\u73b0\u4f4d\u7f6e\n\tfriend bool operator <(const String p,const String q){\n\t\treturn (flag?(p.word[1]<q.word[1]):(p.len-p.word[p.num]<q.len-q.word[q.num]));\n\t}\n\tinline void init(){//\u6e05\u7a7a\n\t\tlen=num=0;\n\t\thash.clear();hash.push_back(0);\n\t\tword.clear();word.push_back(0);\n\t}\n\tvoid build(string s){//\u8ba1\u7b97hash\u503c\n\t\tfor(string::iterator it=s.begin();it!=s.end();it++){\n\t\t\thash.push_back(hash.back()*base+*it);\n\t\t\tlen++;\n\t\t\tif(*it=='*'){\n\t\t\t\tnum++;\n\t\t\t\tword.push_back(len);\n\t\t\t}\n\t\t}\n\t}\n\tunsigned long long get_hash(int l,int r)const{return hash[r]-hash[l-1]*val[r-l+1];}\n\tint get_suffix()const{return len-word[num];}\n\tbool match(const String &s){//\u66b4\u529b\u5339\u914d\n\t\tint suffix=get_suffix();\n\t\tif(s.len<suffix+word[1]-1)return false;\n\t\tif(get_hash(1,word[1]-1)!=s.get_hash(1,word[1]-1))return false;\n\t\tif(get_hash(word[num]+1,len)!=s.get_hash(s.len-suffix+1,s.len))return false;\n\t\tint l=word[1],r=s.len-suffix;//\u4e24\u4e2a\u6307\u9488\u626b\n\t\tfor(int i=1;i<num;i++){\n\t\t\tint length=word[i+1]-word[i]-1;\n\t\t\tunsigned long long t=get_hash(word[i]+1,word[i+1]-1);\n\t\t\twhile(1){//\u53d8\u6210\u4e00\u6837\u7684\u5b57\u7b26\u4e32\n\t\t\t\tif(l+length-1>r)return false;\n\t\t\t\tif(s.get_hash(l,l+length-1)==t){l+=length;break;}\n\t\t\t\tl++;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}str[MAXN];\ninline void make(){//\u9884\u5904\u7406hash\n\tval[0]=1;\n\tfor(int i=1;i<=MAXM-10;i++)val[i]=val[i-1]*base;//\u5f53\u521d\u628aMAXM\u6253\u6210\u4e86MAXN\uff0c\u7136\u540eWA\u4e86\u65e0\u6570\u6b21\u3002\u3002\u3002\u5403\u67a3\u836f\u4e38\u3002\u3002\u3002\n}\nbool check(){//\u5206\u7c7b\u8ba8\u8bba\n\tint pos=0;\n\tunsigned long long hash_val=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(str[i].num)continue;\n\t\tif(!pos){\n\t\t\thash_val=str[i].hash[str[i].len];\n\t\t\tpos=i;\n\t\t}\n\t\telse if(hash_val!=str[i].hash[str[i].len])return false;\n\t}\n\tif(pos){\n\t\tfor(int i=1;i<=n;i++)if(str[i].num&&(!str[i].match(str[pos])))return false;\n\t}\n\telse{\n\t\tflag=true;\n\t\tsort(str+1,str+n+1);\n\t\tfor(int i=1;i<n;i++)\n\t\t\tif(str[i].get_hash(1,str[i].word[1]-1)!=str[i+1].get_hash(1,str[i].word[1]-1))\n\t\t\t\treturn false;\n\t\tflag=false;\n\t\tsort(str+1,str+n+1);\n\t\tfor(int i=1;i<n;i++)\n\t\t\tif(str[i].get_hash(str[i].word[str[i].num]+1,str[i].len)!=str[i+1].get_hash(str[i+1].len-str[i].get_suffix()+1,str[i+1].len))\n\t\t\t\treturn false;\n\t}\n\treturn true;\n}\nvoid work(){\n\tif(check())putchar('Y');\n\telse putchar('N');\n\tputchar('\\n');\n}\nvoid init(){//\u8bfb\u5165\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>ch;\n\t\tstr[i].init();\n\t\tstr[i].build(ch);\n\t}\n}\nint main(){//\u4e3b\u51fd\u6570So easy!\n\tios::sync_with_stdio(false);\n\tint t;\n\tcin>>t;\n\tmake();\n\twhile(t--){\n\t\tinit();\n\t\twork();\n\t}\n    return 0;\n}\n\n```\n",
        "postTime": 1537707067,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3234 \u3010[HNOI2014]\u6284\u5361\u7ec4\u3011"
    },
    {
        "content": "- \u6240\u6709\u4e32\u90fd\u6709\u901a\u914d\u7b26\u3002 \u6ce8\u610f\u5230\u53ef\u4ee5\u53ea\u8003\u8651\u6bcf\u4e2a\u4e32\u524d\u540e\u7f00\u662f\u5426\u5339\u914d\u3002\u5177\u4f53\u662f\u628a\u6bcf\u4e2a\u4e32\u7b2c\u4e00\u4e2a\u901a\u914d\u7b26\u7684\u524d\u7f00\u62ff\u51fa\u6765\uff0c\u6309\u957f\u5ea6\u6392\u5e8f\u540e\uff0c\u4e24\u4e24\u53ef\u4ee5\u5339\u914d\u4e0a\u3002\u540e\u7f00\u7c7b\u4f3c\u3002\n- \u5b58\u5728\u4e32\u6ca1\u6709\u901a\u914d\u7b26\u3002 \u90a3\u4e48\u8fd9\u4e9b\u4e32\u5fc5\u987b\u76f8\u7b49\uff0c\u4e14\u4f5c\u4e3a\u7b54\u6848\u4e32\u3002\u8003\u8651\u5224\u65ad\u4e00\u4e2a\u5b58\u5728\u901a\u914d\u7b26\u7684\u53ef\u4e0d\u53ef\u4ee5\u53d8\u6210\u8fd9\u4e2a\u4e32\u3002\u542b\u901a\u914d\u7b26\u7684\u957f\u6210 $s_0*s_1*s_2*...*s_n$ \u5176\u4e2d $s$ \u53ef\u4ee5\u662f\u7a7a\u4e32\u3002\u76f4\u63a5\u628a\u8fd9\u4e9b\u4e32\u62ff\u51fa\u6765\uff0c\u653e\u5230\u7b54\u6848\u4e32\u4e0a\u66b4\u529b\u5339\u914d\uff0c\u5177\u4f53\u662f\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u524d\u4e00\u4e2a\u5339\u914d\u4f4d\u7f6e\u7684\u5339\u914d\u4f4d\u7f6e\u3002**\u7279\u522b\u7684**\uff0c\u6700\u540e\u4e00\u4e2a\u540e\u7f00\uff0c\u5982\u679c\u4e0d\u662f $*$ \u7ed3\u5c3e\uff0c\u90a3\u4e48\u8981\u4ece\u540e\u5f80\u524d\u627e\u5230\u6700\u5927\u7684\u90a3\u4e2a\u5339\u914d\u4f4d\u7f6e\u3002\u6216\u8005\u8bf4\u6709\u591a\u4e2a $*$ \u8fde\u7eed\u51fa\u73b0\uff0c\u5f97\u76f4\u63a5\u8df3\u8fc7\u4e86\u3002\n\n\u5426\u5219\u4f1a\u88ab \n\n```\na****a\naaaa\n```\n\u8fd9\u6837\u7684\u5361\u6389\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u8003\u8651\u662f\uff0c\u5982\u679c\u7b54\u6848\u4e32\u957f\u5ea6\u8fd8\u6ca1\u6709\u5f85\u5339\u914d\u4e32\u4e2d\u975e\u901a\u914d\u7b26\u6570\u76ee\u591a\uff0c\u76f4\u63a5\u5bc4\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <cmath>\ntypedef long long ll;\ntypedef double db;\nusing namespace std;\n#define PII pair<int,int>\n#define mp make_pair\n#define fir first\n#define sec second\n#define fin(haha) freopen(#haha\".in\",\"r\",stdin);\ninline int read(){\n\tregister int x=0,f=0,ch=getchar();\n\twhile('0'>ch||ch>'9')f^=ch=='-',ch=getchar();\n\twhile('0'<=ch&&ch<='9')x=x*10+(ch^'0'),ch=getchar();\n\treturn f?-x:x;\n}\nconst int base = 233,P = 998244353;\nconst int MAX = 1e5+5;\nint T;\nint n;\nstring s[MAX]; \nint L[MAX],R[MAX],le[MAX];\nvector<int>em; // \u4e0d\u542b\u901a\u914d\u7b26\u7684\u5b57\u7b26\u4e32\u7f16\u53f7 \nvector<int>po;\nvector<int>ha[MAX];\n\ninline int gh(int id,int l,int r){\n\treturn (P + ha[id][r] - 1ll * ha[id][l-1] * po[r-l+1] % P ) % P;\n}\ninline int reallen(int id){\n\tint ret = 0;\n\tfor(register int i=1;i<=le[id];++i) if(s[id][i] != '*') ++ ret;\n\treturn ret;\n}\ninline int checkl(int il,int in){\n\tfor(register int i=1;i<L[il];++i)\n\t\tif(s[il][i] ^ s[in][i]) return 0;\n\treturn 1;\n}\ninline int checkr(int il,int in){\n\tfor(register int i=le[il],j=le[in];i>R[il];--i,--j)\n\t\tif(s[il][i] ^ s[in][j]) return 0;\n\treturn 1;\n}\ninline int solve(int id,int go){ // \u542b\u901a\u914d\u7b26\u7684 s[id] \u662f\u5426\u53ef\u4ee5\u53d8\u6210\u65e0\u7edf\u914d\u7b26\u7684 s[go]  \n\tif(reallen(id) > reallen(go)) return 0; \n\tint j = 1;\n\tvector<int> pos;pos.clear();\n\tfor(register int i=1;i<=le[id];++i) if(s[id][i] == '*') pos.push_back(i);\n//\t1 ~ pos[0] - 1\n\t\n\tif(pos[0] ^ 1) {\n\t\tint len = pos[0] - 1,haha = gh(id,1,pos[0]-1);\n\t\twhile(gh(go,j,j+len-1) != haha && j + len - 1 <= le[go]) ++ j;\n\t\tif(j + len - 1 == le[go] + 1) return 0;\n\t\tif(j != 1)return 0;\n\t\tj = j + len + 1;\n\t}\n\tfor(register int i=1;i<pos.size();++i) {\n\t\tif(pos[i] == pos[i-1] + 1) continue;\n\t\tint len = pos[i] - 1 - (pos[i-1] + 1) + 1 , haha = gh(id,pos[i-1] + 1,pos[i] - 1);\n\t\twhile(gh(go,j,j+len-1) != haha && j + len - 1 <= le[go]) ++ j;\n\t\tif(j + len - 1 == le[go] + 1) return 0;\n\t\tj = j + len + 1;\n\t}\n\treturn checkr(id,go) ;\n\treturn 1;\n}\n\nint ID[MAX];\ninline bool solve(){\n\tif(em.size() >= 1){\n\t\tfor(register int i=1;i<em.size();++i) \n\t\t\tif(gh(em[i-1],1,le[em[i-1]]) != gh(em[i],1,le[em[i]])) return 0;\n\t\tfor(register int i=1;i<=n;++i) {\n\t\t\tif(L[i] == -1 && R[i] == -1)continue;\n//\t\t\tprintf(\"%d %d\\n\",i,em[0]);\n\t\t\tif(!solve(i,em[0])) return 0;\n\t\t}\n\t\treturn 1;\n\t}else {\n\t\tfor(register int i=1;i<=n;++i) ID[i] = i;\n\t\tsort(ID+1,ID+1+n,[&](int x,int y){return L[x] < L[y];});\n\t\tfor(register int i=2;i<=n;++i) \n\t\t\tif(!checkl(ID[i-1],ID[i])) return 0;\n\t\tsort(ID+1,ID+1+n,[&](int x,int y){return le[x] - R[x] < le[y] - R[y];});\n\t\tfor(register int i=2;i<=n;++i)\n\t\t\tif(!checkr(ID[i-1],ID[i])) return 0;\n\t\treturn 1;\n\t}\n}\nsigned main(){\n//\tfin(in); \n\tT=read();\n\twhile(T--){\n\t\tvector<int>().swap(em);\n\t\tint mx = 0,mex = 0;\n\t\tn=read();\n\t\tfor(register int i=1;i<=n;++i) {\n\t\t\tvector<int>().swap(ha[i]);\n\t\t\tcin >> s[i]; \n\t\t\tle[i] = s[i].length(); \n\t\t\tmex = max(mex,le[i]);\n\t\t\ts[i] = ' ' + s[i];\n\t\t\t\n\t\t\tL[i] = R[i] = -1;\n\t\t\tha[i].push_back(0);\n\t\t\tfor(register int j=1;j<=le[i];++j) {\n\t\t\t\tha[i].push_back( (1ll * ha[i][j-1] * base % P + s[i][j]) % P );\n\t\t\t\tif(s[i][j] == '*') {\n\t\t\t\t\tif(L[i] == -1) \n\t\t\t\t\t\tL[i] = R[i] = j;\n\t\t\t\t\telse \n\t\t\t\t\t\tL[i] = min(L[i],j),R[i] = max(R[i],j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(L[i] == -1 && R[i] == -1) em.push_back(i);\n\t\t}\n\t\tvector<int>().swap(po);\n\t\tpo.push_back(1);\n\t\tfor(register int i=1;i<=mex;++i) po.push_back(1ll * po[i-1] * base % P);\n\t\t\n//\t\tprintf(\"%d\\n\",le[1]);\n\t\tputs(solve() ? \"Y\" : \"N\"); \n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1660138102,
        "uid": 119062,
        "name": "Lates",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3234 [HNOI2014]\u6284\u5361\u7ec4"
    }
]