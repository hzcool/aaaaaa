[
    {
        "content": "\u9898\u9762\uff1a\n\n\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c\n\n\u4e00\u4e2a\u957f\u5ea6\u4e3a $m$ \u7684\u5e8f\u5217 $a$\uff0c\n\n\u63a5\u4e0b\u6765\u9700\u8981\u5b9e\u73b0 $q$ \u4e2a\u64cd\u4f5c\u3002\n\n1. `1 x l r` \u4ece\u6811\u7684\u8282\u70b9 $x$\uff0c\u4f9d\u6b21\u904d\u5386\u5e8f\u5217 $l\u223cr$\u3002\u6bcf\u4e2a\u6570\u5b57 $a_i$ \u4ee3\u8868\u6811\u4e0a\u4e00\u6b21\u8df3\u8f6c\uff0c\u5373\u4ece\u5f53\u524d\u8282\u70b9\u8d70\u5411\u5b83\u7684\u7f16\u53f7\u7b2c $a_i$ \u5c0f\u7684\u513f\u5b50\u3002\u5982\u679c\u67d0\u4e00\u65f6\u523b\u65e0\u6cd5\u8df3\u8f6c\uff0c\u8f93\u51fa\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u505c\u6b62\u904d\u5386\u3002\n2. `2 t k` \u5355\u70b9\u4fee\u6539\uff0c$a_t$ \u4fee\u6539\u4e3a $k$\u3002\n\n------------\n\n\u6253\u5f00\u6807\u7b7e\uff0c\u53d1\u73b0\u91cc\u9762\u60ca\u5947\u7684\u51fa\u73b0\u4e86\n\n#### \u5b57\u7b26\u4e32HASH\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/17ba6scy.png)\n\nHASH\u771f\u662f\u4e2a\u795e\u5947\u7684\u7b97\u6cd5\u554a\uff0c\uff0c\n\n\u8fd9\u9053\u9898\u662f\u7528\u5230\u4e86\u54c8\u5e0c\u7684\u8bf8\u591a\u6027\u8d28\n\n\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u5339\u914d\u5e8f\u5217\u4e0a\u7684hash\u503c\u548c\u6811\u4e0a\u8df3\u8f6c\u7684hash\u503c\uff0c\u76f4\u5230\u65e0\u6cd5\u5339\u914d\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u4e8c\u5206`\u8df3\u8f6c\u7528\u5230\u7684\u5e8f\u5217\u7684\u957f\u5ea6`\uff0c\u5982\u679c\u53ef\u4ee5\u5728\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u627e\u5230\u4e00\u6761\u94fe\u548c\u6b64\u65f6\u5e8f\u5217hash\u503c\u76f8\u540c\uff0c\u5c31\u8868\u793a\u4ece$x$\u8df3\u8f6c\u5230\u4e86\u8fd9\u6761\u94fe\u7684\u53e6\u4e00\u7aef\u3002\n\n\u600e\u4e48\u5feb\u901f\u67e5\u8be2\u6811\u4e0a\u7684hash\u503c\u5462\uff1f\u5148\u8003\u8651\u6240\u6709\u7684$x=1$\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6811\u7684\u7ed3\u6784\u662f\u6ca1\u6709\u4fee\u6539\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728dfs\u8fc7\u7a0b\u4e2d\u6392\u5e8f\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u9884\u5904\u7406\u51fa\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u7684\u6570\u5b57\uff0c\u5408\u5e76\u5f97\u5230\u4ece1\u53f7\u8282\u70b9\u5230\u6240\u6709\u8282\u70b9\u7684hash\u503c\u3002\n\n\u518d\u6765\uff0chash\u662f\u6709\u53ef\u51cf\u6027\u8d28\u7684\uff0c\u5176\u5b9e$x\\neq1$\u7684\u60c5\u51b5\u5c31\u662f\u5224\u65ad`\u8282\u70b9\u7684hash\u503c`\u662f\u5426\u7b49\u4e8e`x\u7684hash\u503c+\u5e8f\u5217\u7684hash\u503c`\u3002\n\n\u5e8f\u5217\u7684hash\u503c\u5c31\u5f88\u597d\u7ef4\u62a4\u4e86\uff0c\u56e0\u4e3ahash\u503c\u53ef\u4ee5\u5feb\u901f\u5408\u5e76\uff0c\u6240\u4ee5\u5e8f\u5217\u4e0a\u7684hash\u503c\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u5c31\u597d\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2n)$\uff0c\u770b\u5230\u5de8\u4f6c\u8fd8\u6709\u6811\u94fe\u5256\u5206\u7684\u7684\u9898\u89e3\u6709\u5174\u8da3\u7684\u81ea\u884c\u641c\u7d22\u5427\n\n### code:\n\n```cpp\n// luogu-judger-enable-o2\n// SeptEtavioxy\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define re register\n#define ll long long\n#define il inline\n#define rep(i,s,t) for(re int i=(s);i<=(t);i++)\n#define rev_rep(i,s,t) for(re int i=(s);i>=(t);i--)\n#define each(i,u) for(int i=head[u];i;i=bow[i].nxt)\n#define pt(ch) putchar(ch)\n#define pti(x) printf(\"%d\",x)\n#define ptll(x) printf(\"%lld\",x)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\nusing namespace std;\n// c_ints\nil int ci(){\n\tre char ch;int f=1;\n\twhile(!isdigit(ch=getchar()))f= ch=='-'?-1:1 ;\n\tre int x= ch^'0';\n\twhile(isdigit(ch=getchar()))x=(x*10)+(ch^'0');\n\treturn f*x;\n}\nil char cc(){\n\tre char ch;\n\twhile(isspace(ch=getchar()));\n\treturn ch;\n}\n\nenum{N=500024};\n \n#define Ull unsigned ll\nclass Edge{\npublic:\n\tint nxt,to;\n\til void operator()(int a,int b){\n\t\tnxt=a, to=b;\n\t}\n}bow[N];\nint head[N],depth[N];\n\nconst int base = 1e9+7; //base\u5f00\u5927\u5230n\u4ee5\u4e0a\nUll num[N],powb[N];\n\nvoid dfs(int u){\n\tstatic int d[N];\n\tint tot= 0;\n\teach(i,u) d[++tot]= bow[i].to;\n\tsort(d+1,d+tot+1);\n\trep(i,1,tot) num[d[i]]= num[u]*base+i;\n\teach(i,u){\n\t\tint v= bow[i].to;\n\t\tdepth[v]= depth[u]+1;\n\t\tdfs(v);\n\t}\n}\n\nstruct cmp1{\n\tbool operator()(const int a,const int b){\n\t\treturn depth[a]==depth[b] ? num[a]<num[b]:depth[a]<depth[b] ;\n\t}\n};\nUll tbl[N],*op[N];\n//\u8fd9\u91cc\u662f\u5185\u5b58\u6c60\u548c\u52a8\u6001\u6570\u7ec4\nint c[N],mxdep;\nil void item(int n){\n\trep(i,1,n) c[i]=i;//\u6392\u5e8f\u6807\u53f7\n\tsort(c+1,c+n+1,cmp1());\n\trep(i,1,n){\n\t\tif( depth[c[i]]!=mxdep ){\n\t\t\top[++mxdep]=tbl+i;\n\t\t}\n\t\ttbl[i]= num[c[i]];\n\t}\n\top[mxdep+1]= tbl+n+1;\n}\n\n//zkw\u7ebf\u6bb5\u6811\nclass node{\npublic: int len; Ull num;\n};\nil node operator+(const node&a,const node&b){\n\treturn (node){\n\t\ta.len+b.len,\n\t\ta.num*powb[b.len]+b.num\n\t};\n}\nclass SEG{\npublic:\n\tint n,a[N];\n\t#define lc(x) ((x)<<1)\n\t#define rc(x) ((x)<<1|1)\n\til void init(){\n\t\tm= (1<<int(log2(n+1)+1));\n\t\trep(i,0,m-1) tr[m+i].len= 1;\n\t\trep(i,1,n) tr[m+i].num= a[i];\n\t\trev_rep(i,m,1) tr[i]= tr[lc(i)]+tr[rc(i)];\n\t}\n\til node query(int l,int r){\n\t\tnode L= (node){0,0}, R= (node){0,0};\n\t\tfor(int s=m+l-1,t=m+r+1;s^t^1;s>>=1,t>>=1){\n\t\t\tif( (s&1)==0 ) L= L+tr[s^1];\n\t\t\tif( (t&1)==1 ) R= tr[t^1]+R;\n\t\t}\n\t\treturn L+R;\n\t}\n\til void modify(int x,int k){\n\t\tre int i= m+x;\n\t\ttr[i].num= k;\n\t\twhile( i>>=1 ) update(i);\n\t}\nprivate:\n\tint m;\n\tnode tr[1<<20];\n\til void update(int x){\n\t\ttr[x]= tr[lc(x)]+tr[rc(x)];\n\t}\n}seg;\n\nint main(){\n\tint n=ci(), m=ci(), q=ci();\n\t{//\u9884\u5904\u7406\u5e42\n\t\tpowb[0]= 1;\n\t\tint M=max(n,m);\n\t\trep(i,1,M) powb[i]=powb[i-1]*base;\n\t}\n\trep(i,1,n){//\u90bb\u63a5\u8868\u5b58\u8fb9\n\t\tint x=ci();\n\t\tbow[i](head[x],i);\n\t\thead[x]= i;\n\t}\n\t\n\tdfs(0);\n\titem(n);\n\t\n\tseg.n= m;\n\trep(i,1,m) seg.a[i]=ci();\n\tseg.init();\n\t\n\twhile( q-- ){\n\t\tif( cc()=='1' )\n\t\t{//\u67e5\u8be2\n\t\t\tint x=ci(), l=ci()-1, r=ci();\n\t\t\tint s=l+1;\n\t\t\tnode e;\n\t\t\tUll numx;\n\t\t\tint dep,k;\n\t\t\twhile( l<r ){//\u4e8c\u5206\n\t\t\t\tint w= (l+r+1)>>1;\n\t\t\t\te= seg.query(s,w);\n\t\t\t\tnumx= num[x]*powb[e.len]+e.num;\n\t\t\t\tdep= depth[x]+w-s+1;\n\t\t\t\tif( dep<=mxdep && tbl[\n\t\t\t\t\t\tk=lower_bound(op[dep],op[dep+1],numx)-tbl\n\t\t\t\t\t]==numx ) l=w;\n\t\t\t\telse r=w-1;\n\t\t\t}\n\t\t\te= seg.query(s,l);\n\t\t\tnumx= num[x]*powb[e.len]+e.num;\n\t\t\tdep= depth[x]+l-s+1;\n\t\t\tk= lower_bound(op[dep],op[dep+1],numx)-tbl;\n\t\t\tpti(c[k]),pt('\\n');\n\t\t}\n\t\telse\n\t\t{//\u4fee\u6539\n\t\t\tint x=ci(), k=ci();\n\t\t\tseg.modify(x,k);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n$noip\\ rp++$",
        "postTime": 1569307348,
        "uid": 127195,
        "name": "z7z_Eta",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5537 \u3010\u3010XR-3\u3011\u7cfb\u7edf\u8bbe\u8ba1\u3011"
    },
    {
        "content": "[P5537 \u3010XR-3\u3011\u7cfb\u7edf\u8bbe\u8ba1](https://www.luogu.com.cn/problem/P5537)\n\n\u8fd9\u9898\u771f\u662f\u4e00\u9053\u795e\u4ed9~~\u6bd2\u7624~~\u9898\u554a!\n\n~~\u8c01\u80fd\u60f3\u5f97\u5230\u8fd9\u73a9\u610f\u80fdHash~~\u3002\u3002\u3002\n\n\u611f\u8c22\u5e76orz\u540c\u6821\u5de8\u4f6c zyt1253679098 \u548c\u4ed6\u7684[\u535a\u5ba2](https://www.cnblogs.com/zyt1253679098/p/12008621.html)\n\n\n* \u56e0\u4e3a\u6811\u662f\u4e0d\u4fee\u6539\u7684\uff0c\u6240\u4ee5\u4efb\u610f\u4e00\u5bf9\u7956\u5148 - \u540e\u4ee3\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u53ef\u4ee5\u6309\u9898\u76ee\u6240\u8ff0\u7684\u89c4\u5219\u8868\u793a\u6210\u4e00\u4e2a**\u56fa\u5b9a\u7684**\u6574\u6570\u5e8f\u5217\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5e8f\u5217\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u5373\u5982\u679c $u$ \u662f $v$ \u7684\u7956\u5148\uff0c$v$ \u662f $w$ \u7684\u7956\u5148\uff0c\u5219 $(u,v)$ \u7684\u5e8f\u5217\u4e0e $(v,w)$ \u7684\u5e8f\u5217\u62fc\u63a5\u8d77\u6765\u5c31\u662f $(u,w)$ \u7684\u5e8f\u5217\u3002 \n\n* \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e8f\u5217\uff08\u5bf9\u5e94\u7740\u4ece\u6839\u5230\u8fd9\u4e2a\u7ed3\u70b9\u7684\u8d70\u6cd5\uff09\u6765\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002 \u6211\u4eec\u5728dfs\u8fc7\u7a0b\u4e2d\u6309\u7f16\u53f7\u7ed9\u5b50\u8282\u70b9\u6392\u5e8f\uff0c\u9884\u5904\u7406\u51fa\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\u7684\u6570\u5b57\u5e8f\u5217\uff0c \u628a\u5e8f\u5217 - \u7ed3\u70b9\u7684\u6620\u5c04\u5173\u7cfb\u7528\u54c8\u5e0c\u8868\u5b58\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5 $O(1)$ \u5224\u65ad\u4ece\u4e00\u4e2a\u7ed3\u70b9\u6309\u7167\u4e00\u4e2a\u5e8f\u5217\u8d70\u82e5\u5e72\u6b65\u80fd\u5426\u8d70\u5230\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4ee5\u53ca\u67e5\u8be2\u5982\u679c\u80fd\u8d70\u5230\uff0c\u8d70\u5230\u7684\u662f\u54ea\u4e2a\u7ed3\u70b9\u3002 \n* \u6700\u7ec8\u505a\u6cd5\uff1a \u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u5e8f\u5217\u7684\u54c8\u5e0c\u503c\uff0c\u5e76\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7ed9\u5b9a\u5e8f\u5217\u7684\u54c8\u5e0c\u503c\u3002\u67e5\u8be2\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u8d70\u7684\u957f\u5ea6\uff08\u5373\u53d6\u5e8f\u5217 $[l,mid]$ \u7684\u90e8\u5206\uff09\uff0c\u5224\u65ad\u80fd\u5426\u8d70\u5230\u4e00\u4e2a\u7ed3\u70b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define pii pair<ll,ll>\n#define mkp make_pair\nusing namespace std;\nnamespace FGF\n{\n\tint n,m,Q,rt;\n\tconst int N=1e6+5;\n\tconst pii seed=mkp(71,853),mo=mkp(1e9+7,1e9+9);\n\tint read()\n\t{\n\t\tint s=0;char ch=getchar();\n\t\twhile(!isdigit(ch))ch=getchar();\n\t\twhile(isdigit(ch))s=s*10+ch-'0',ch=getchar();\n\t\treturn s;\n\t}\n\tpii operator + (const pii &a,const pii &b)\n\t{\n\t\treturn mkp((a.first+b.first)%mo.first,(a.second+b.second)%mo.second);\n\t } \n\tpii operator * (const pii &a,const pii &b)\n\t{\n\t\treturn mkp((a.first*b.first)%mo.first,(a.second*b.second)%mo.second);\n\t}\n\tpii po[N],h[N];\n\tvoid init()\n\t{\n\t\tpo[0]=mkp(1,1);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tpo[i]=po[i-1]*seed;\n\t}\n\tstruct edg{\n\t\tpii to;int w,nxt;\n\t}e[N];\n\tint head[N],cnt;\n\tconst int se=24601,p=1e6-17;\n\tstruct HashTable{\n\t\tvoid add(const int a,const pii b,const int c)\n\t\t{\n\t\t\tcnt++;\n\t\t\te[cnt].to=b,e[cnt].w=c,e[cnt].nxt=head[a],head[a]=cnt;\n\t\t}\n\t\tvoid inser(const pii a,const int b)\n\t\t{\n\t\t\tint tmp=(a.first*se+a.second)%p;\n\t\t\tadd(tmp,a,b);\t\n\t\t}\n\t\tint query(pii a)\n\t\t{\n\t\t\tint tmp=(a.first*se+a.second)%p;\n\t\t\tfor(int i=head[tmp];i;i=e[i].nxt)\n\t\t\t\tif(e[i].to==a)return e[i].w;\n\t\t\treturn -1;\n\t\t}\n\t}Ha;\n\tint a[N];\n\tstruct tree{\n\t\tint l,r;pii val;\n\t}t[N<<2];\n\tvoid pushup(int ro,int len)\n\t{\n\t\tt[ro].val=t[ro<<1].val*po[len]+t[ro<<1|1].val;\n\t}\n\tvoid build(int ro,int l,int r)\n\t{\n\t\tt[ro].l=l,t[ro].r=r;\n\t\tif(l==r)\n\t\t{\n\t\t\tt[ro].val=mkp(a[l],a[l]);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ro<<1,l,mid),build(ro<<1|1,mid+1,r);\n\t\tpushup(ro,t[ro].r-mid);\n\t}\n\tvoid updat(int ro,int pos,int x)\n\t{\n\t\tif(t[ro].l==t[ro].r)\n\t\t{\n\t\t\tt[ro].val=mkp(x,x);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(t[ro].l+t[ro].r)>>1;\n\t\tpos<=mid? updat(ro<<1,pos,x):updat(ro<<1|1,pos,x);\n\t\tpushup(ro,t[ro].r-mid);\n\t}\n\tpii query(int ro,int l,int r)//\u67e5\u8be2\u533a\u95f4\u54c8\u5e0c\u503c \n\t{\n\t\tif(l<=t[ro].l&&t[ro].r<=r)return t[ro].val;\n\t\tint mid=(t[ro].l+t[ro].r)>>1;\n\t\tif(r<=mid)return query(ro<<1,l,r);\n\t\telse if(l>mid)return query(ro<<1|1,l,r);\n\t\telse return query(ro<<1,l,r)*po[min(r,t[ro].r)-mid]+query(ro<<1|1,l,r);\n\t}\n\tint askk(int ro,int l,int r,pii x)//\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206 \n\t{\n\t\tif(t[ro].l==t[ro].r)return Ha.query(x*seed+t[ro].val);\n\t\tint mid=(t[ro].l+t[ro].r)>>1;\n\t\tif(r<=mid)return askk(ro<<1,l,r,x);\n\t\telse if(l>mid)return askk(ro<<1|1,l,r,x);\n\t\telse\n\t\t{\n\t\t\tpii hh=x*po[mid-max(t[ro].l,l)+1]+(l<=t[ro].l? t[ro<<1].val:query(ro,l,mid));\n\t\t\tint w=Ha.query(hh);//\u68c0\u67e5\u80fd\u5426\u8d70[l,mid]\u8fd9\u4e00\u6bb5\u533a\u95f4 \n\t\t\tif(w==-1)return askk(ro<<1,l,r,x);//\u4e0d\u80fd\u5c31\u7ee7\u7eed\u5728\u5de6\u533a\u95f4\u4e8c\u5206 \n\t\t\telse //\u53ef\u4ee5\u5c31\u67e5\u8be2\u53f3\u533a\u95f4 \n\t\t\t{\n\t\t\t\tint tmp=askk(ro<<1|1,l,r,hh);\n\t\t\t\treturn tmp==-1? w:tmp;\n\t\t\t}\n\t\t}\n\t}\n\tvector<int> g[N];\n\tvoid dfs(int u)//\u9884\u5904\u7406\u51fa\u5230\u6bcf\u4e2a\u70b9\u7684\u6570\u5b57\u5e8f\u5217\u7684\u54c8\u5e0c\u503c \n\t{\n\t\tsort(g[u].begin(),g[u].end());\n\t\tint cnt=0;\n\t\tfor(int sz=g[u].size(),i=0;i<sz;i++)\n\t\t{\n\t\t\tint v=g[u][i];\n\t\t\t++cnt;\n\t\t\th[v]=h[u]*seed+mkp(cnt,cnt);\n\t\t\tdfs(v);\n\t\t}\n\t}\n\tvoid work()\n\t{\n\t\tn=read(),m=read(),Q=read();\n\t\tinit();\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint x=read();\n\t\t\tif(!x)rt=i;\n\t\t\telse g[x].push_back(i);\n\t\t}\n\t\th[rt]=mkp(0,0);\n\t\tdfs(rt);\n\t\tfor(int i=1;i<=n;i++)//\u628a\u6bcf\u4e2a\u70b9\u548c\u5176\u6570\u5b57\u5e8f\u5217\u7684\u5bf9\u5e94\u5173\u7cfb\u653e\u5230\u54c8\u5e0c\u8868\u91cc \n\t\t\tHa.inser(h[i],i);\n\t\tfor(int i=1;i<=m;i++)\n\t\t\ta[i]=read();\n\t\tbuild(1,1,m);//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7ed9\u5b9a\u5e8f\u5217\u7684\u54c8\u5e0c\u503c \n\t\tint op,x,l,r,ans;\n\t\twhile(Q--)\n\t\t{\n\t\t\top=read();\n\t\t\tif(op==1)\n\t\t\t{\n\t\t\t\tx=read(),l=read(),r=read();\n\t\t\t\tans=askk(1,l,r,h[x]);\n\t\t\t\tprintf(\"%d\\n\",ans==-1? x:ans);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=read(),x=read();\n\t\t\t\tupdat(1,l,x);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tFGF::work();\n\treturn 0;\n}\n```",
        "postTime": 1604413372,
        "uid": 224403,
        "name": "\u6728xx\u6728\u5927",
        "ccfLevel": 9,
        "title": "P5537 \u3010XR-3\u3011\u7cfb\u7edf\u8bbe\u8ba1(\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206+\u54c8\u5e0c)"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00 $n$ \u4e2a\u70b9\u7684\u6709\u6839\u6811\u4e0e\u957f $m$ \u7684\u5e8f\u5217 $a$\uff0c\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u4e3a\u4ee5\u4e0b\u4e8c\u79cd\u4e4b\u4e00\u3002\n\n1. \u7ed9\u6811\u4e0a\u4e00\u8d77\u70b9 $x$\uff0c\u4e0e $a$ \u4e2d\u4e00\u6bb5\u533a\u95f4 $a_{[l, r]}$\uff0c\u4f9d\u6b21\u904d\u5386 $a_{[l, r]}$\uff0c\u5c1d\u8bd5\u8d70\u5230\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u7b2c $a_i$ \u5c0f\u7684\u5b69\u5b50\uff0c\u82e5\u65e0\u5408\u6cd5\u5b69\u5b50\u6216\u533a\u95f4\u904d\u5386\u5b8c\u6210\u5219\u505c\u6b62\uff0c\u6c42\u7ec8\u70b9\uff1b\n2. \u5bf9 $a$ \u5355\u70b9\u4fee\u6539\u3002\n\n$n, m, q \\leq 5 \\times 10^5$\uff0c\u4efb\u610f\u65f6\u523b $1 \\leq a_i \\leq n$\uff0c$1 \\leq l \\leq r \\leq m$\u3002\n\n---\n\n\u795e\u4ed9\u9898\u3002\n\n\u8003\u8651 $rt \\to x$ \u8def\u5f84\u552f\u4e00\uff0c\u8bb0\u4e3a $p_x$\uff0c\u8003\u8651\u5c06 1 \u64cd\u4f5c\u8f6c\u5316\u4e3a\u7531\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5e76\u5c06 $p_x$ \u63a5\u5165 $a_{[l, r]}$ \u524d\u3002\n\n\u8003\u8651\u4e8c\u5206\u7ed3\u675f\u4f4d\u7f6e\uff0c\u95ee\u9898\u53d8\u4e3a\u67e5\u8be2\u4e00\u5e8f\u5217\u662f\u5426\u5c5e\u4e8e $p$\u3001\u5728 $p$ \u4e2d\u4f4d\u7f6e\u3002\n\n\u8003\u8651\u54c8\u5e0c\u3002\u5229\u7528\u7ebf\u6bb5\u6811\u53ef\u5c06 2 \u64cd\u4f5c\u53d8\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u3002\n\n\u6211\u4eec\u8003\u8651\u5230\u8fd9\u6837\u662f $\\mathcal O(n + m + q \\log^2 m)$ \u7684\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 $a$ \u7684\u54c8\u5e0c\u503c\uff0c\u5e76\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\u3002\n\n\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n + m + q \\log m + \\frac n P)$\u200b\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n + m + P)$\u200b\u200b\u200b\uff0c\u5176\u4e2d $P$\u200b \u4e3a hash \u6a21\u6570\u4e2d\u6700\u5c0f\u503c\u3002\n\n---\n\n\u4ee3\u7801\u4e2d\u547d\u540d\u53ef\u80fd\u4e0e\u4e0a\u6587\u4e0d\u5c3d\u76f8\u540c\u3002\n\n```cpp\n# include <ciso646>\n# include <cstdio>\n# include <cstring>\n# include <vector>\n\nnamespace Main {\n  struct File { File(); compl File(); } file;\n  typedef unsigned int uint;\n  typedef short unsigned int hu;\n  template <typename T> static inline const T lowbit(const T x) { return x bitand (~x + 1); }\n  static inline const uint qpow(uint a, uint n, const uint mod) {\n    uint r(1);\n    while (n) {\n      if (n bitand 1) r = 1ull * r * a % mod;\n      a = 1ull * a * a % mod, n >>= 1;\n    }\n    return r;\n  }\n  static inline const uint invp(const uint x, const uint p) { return qpow(x, p - 2, p); }\n  static const uint N(5e5), M(5e5);\n  static const hu M_log2(18.931568569324174087221916576936);\n  static const uint P[4]{ 7833673, 3637624399, 3637624387, 3637624381 }, B(500009);\n  static uint pow[4][N + M + 1], ipow[4][N + M + 1];\n  static inline const uint check(const uint [4]);\n  # define fap(i) for (hu i(0); i < 4; ++i)\n  class fenwick_tree {\n    uint tree[4][M + 1];\n    uint a[M + 1];\n    inline const void build(const hu i) {\n      // printf(\"build %hu\\n\", i);\n      static uint s[M + 1]; s[0] = 0;\n      for (register uint j(1); j <= M; ++j) s[j] = (s[j - 1] + 1ull * a[j] * pow[i][j]) % P[i];\n      for (register uint j(1); j <= M; ++j) tree[i][j] = (0ull + s[j] + P[i] - s[j ^ lowbit(j)]) % P[i];\n    }\n    inline const void modify(const hu i, uint t, const uint u) {\n      const uint d(1ull * (u + P[i] - a[t]) * pow[i][t] % P[i]);\n      while (t <= M) tree[i][t] = (0ull + tree[i][t] + d) % P[i], t += lowbit(t);\n    }\n    inline const uint query(const hu i, uint x) { uint r(0); while (x) r = (0ull + r + tree[i][x]) % P[i], x ^= lowbit(x); return r; }\n  public:\n    inline const uint operator[](const uint x) const { return a[x]; }\n    inline uint& operator[](const uint x) { return a[x]; }\n    inline const void build() { fap(i) build(i); }\n    inline const void modify(const uint t, const uint u) { fap(i) modify(i, t, u); a[t] = u; }\n    inline const uint query(const hu i, const uint l, const uint r) { return (0ull + query(i, r) + P[i] - query(i, l - 1)) % P[i] * ipow[i][l] % P[i]; }\n    inline const uint query(const uint bh[4], const uint len, const uint l, const uint r) {\n      uint res(0); static uint h[4]; fap(i) h[i] = (0ull + bh[i] + P[i] - 1ull * query(i, l - 1) * ipow[i][l] % P[i] * pow[i][len] % P[i]) % P[i];\n      for (hu i(M_log2); i <= M_log2; --i) {\n        fap(j) h[j] = (h[j] + 1ull * tree[j][res | 1 << i] * ipow[j][l] % P[j] * pow[j][len]) % P[j];\n        if ((res | 1 << i) < l or ((res | 1 << i) <= r && check(h))) res or_eq 1 << i;\n        else fap(j) h[j] = (0ull + h[j] + P[j] - 1ull * tree[j][res | 1 << i] * ipow[j][l] % P[j] * pow[j][len] % P[j]) % P[j];\n      }\n      return check(h);\n    }\n  };\n  struct node {\n    uint f;\n    std::vector<uint> daughter;\n    uint h[4];\n    uint depth;\n    node() : f(), daughter(), depth() { memset(h, 0, sizeof h); }\n    inline const bool input() { scanf(\"%u\", &f); return isroot(); }\n    inline const bool isroot() { return not f; }\n  };\n  struct ndl {\n    const uint id;\n    const ndl* const next;\n    ndl() : id(), next() {}\n    ndl(const uint id, const ndl* const next) : id(id), next(next) {}\n    compl ndl() { if (next) delete next; }\n  };\n  static uint n, m, q;\n  static node o[N + 1];\n  static uint root;\n  static fenwick_tree a;\n  static const ndl* lh[7833673];\n  extern File::File() {\n    fap(i) {\n      ipow[i][0] = pow[i][0] = 1;\n      for (register uint j(1); j <= N + M; ++j) pow[i][j] = 1ull * pow[i][j - 1] * B % P[i];\n      ipow[i][1] = invp(pow[i][1], P[i]);\n      for (register uint j(2); j <= N + M; ++j) ipow[i][j] = 1ull * ipow[i][j - 1] * ipow[i][1] % P[i];\n    }\n  }\n  extern File::~File() { for (register uint i(0); i < P[0]; ++i) if (lh[i]) delete lh[i]; }\n  static inline const void add(const uint x) { o[o[x].f].daughter.push_back(x); }\n  static const void search(const uint x) {\n    // printf(\"%u\\n\", x);\n    lh[o[x].h[0]] = new ndl(x, lh[o[x].h[0]]);\n    for (uint i(0); i < o[x].daughter.size(); ++i) {\n      fap(j) o[o[x].daughter[i]].h[j] = (o[x].h[j] + 1ull * (i + 1) * pow[j][o[x].depth]) % P[j];\n      o[o[x].daughter[i]].depth = o[x].depth + 1, search(o[x].daughter[i]);\n    }\n  }\n  static inline const uint check(const uint h[4]) {\n    for (const ndl* i(lh[h[0]]); i; i = i->next) {\n      bool eq(true); fap(j) eq = eq && o[i->id].h[j] == h[j];\n      if (eq) return i->id;\n    }\n    return 0;\n  }\n  static inline const void main() {\n    scanf(\"%u%u%u\", &n, &m, &q);\n    for (register uint i(1); i <= n; ++i) {\n      if (o[i].input()) root = i;\n      add(i);\n    }\n    search(root);\n    for (register uint i(1); i <= m; ++i) scanf(\"%u\", &a[i]);\n    a.build();\n    for (register uint i(0); i < q; ++i) {\n      static hu t; scanf(\"%hu\", &t);\n      switch (t) {\n      case 1: { static uint x, l, r; scanf(\"%u%u%u\", &x, &l, &r), printf(\"%u\\n\", a.query(o[x].h, o[x].depth, l, r)); break; }\n      case 2: { static uint t, k; scanf(\"%u%u\", &t, &k), a.modify(t, k); break; }\n      }\n    }\n  }\n  # undef fap\n}\n\nsigned int main() { Main::main(); return 0; }\n```",
        "postTime": 1628252600,
        "uid": 236807,
        "name": "Mitama",
        "ccfLevel": 9,
        "title": "[Solution] LGP5537"
    }
]