[
    {
        "content": "\u8fd9\u4e2a\u9898\u601d\u8def\u5012\u662f\u5f88\u7b80\u5355\uff1a**\u6700\u5c0f\u751f\u6210\u6811**\u561b~\n\n\u6700\u5c0f\u751f\u6210\u6811\u662f\u4e2a\u5565\uff1f\u5176\u5b9e\u5c31\u50cf\u6768\u5fd7\u4e00\u884c\u4eba\u62bc\u9001\u751f\u8fb0\u7eb2\u3002\u629b\u5f00\u6700\u540e\u751f\u8fb0\u7eb2\u88ab\u62a2\u7684\u7ed3\u5c40\u4e0d\u8c08\uff0c\u6768\u5fd7\u4ed6\u4eec\u9700\u8981\u5230\u597d\u51e0\u4e2a\u5730\u65b9\uff0c\u6bcf\u4e2a\u5730\u65b9\u90fd\u9700\u8981\u82b1\u70b9\u8fc7\u8def\u8d39\u7ed9\u6881\u5c71\u597d\u6c49\u4eec\u6253\u70b9\u3002\u6bd4\u5982\u4e0b\u9762\u5c31\u662f\u4e00\u5f20\u57ce\u5e02\u5730\u56fe\uff1a\n\n![\u5730\u56fe](https://cdn.luogu.com.cn/upload/image_hosting/xpqmkgyr.png)\n\n\u5176\u4e2d\u6bcf\u4e24\u4e2a\u56fe\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5c31\u662f\u8981\u7ed9\u6881\u5c71\u597d\u6c49\u4eec\u6253\u70b9\u7684\u94f6\u5b50\u6570\u3002\u6bd4\u5982**1\u53f7\u5730\u70b9\u52302\u53f7\u5730\u70b9\u7684\u6881\u5c71\u597d\u6c49\u9700\u89812\u4e24\u94f6\u5b50**\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c**\u600e\u6837\u624d\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u90e8\u5206\u9053\u8def\u5c31\u53ef\u4ee5\u5230\u8fbe\u6240\u6709\u5730\u70b9\u4e14\u8ba9\u603b\u82b1\u8d39\u503c\u6700\u5c0f\u5462\uff1f\uff1f\uff1f**\n\n**\u5982\u679c\u6709n\u4e2a\u8282\u70b9\uff08\u57ce\u5e02\uff09\uff0c\u90a3\u5c31\u81f3\u5c11\u8981\u8fde\uff08n-1\uff09\u6761\u8fb9\uff08\u8def\u7ebf\uff09\uff0c\u5e76\u4e14\u80af\u5b9a\u6ca1\u6709\u56de\u8def**\u3002\uff08\u4e0d\u4fe1\uff1f\u753b\u51e0\u4e2a\u56fe\u8bd5\u8bd5\uff09\u4f17\u6240\u5468\u77e5\uff0c**\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u53ea\u8981\u8fd9\u4e2a\u56fe\u91cc\u6ca1\u6709\u56de\u8def\uff08\u6709\uff08n-1\uff09\u6761\u8fb9\uff09\uff0c\u90a3\u5b83\u5c31\u65e0\u7591\u662f\u68f5\u6811\u4e86**\u3002\uff08\u8fd8\u662f\u4e0d\u4fe1\uff1f\u753b\u56fe......\uff09\u6240\u4ee5\uff0c**\u6211\u4eec\u5c31\u7ba1\u8fd9\u68f5\u5404\u8fb9\u6743\u503c\uff08\u8d39\u7528\uff09\u548c\u53eb\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d**\u4e86\u3002\n\n\u90a3\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5230\u5e95\u600e\u4e48\u641e\u5462\uff1f\u6211\u4eec\u4f1f\u5927\u7684\u5148\u54f2\u53d1\u660e\u4e86\u4e24\u79cd\u7b97\u6cd5\uff1a\u4e00\u79cd\u53eb**Kruskal\u7b97\u6cd5**\uff0c\u53e6\u4e00\u79cd\u53eb**Prim\u7b97\u6cd5**\u3002\u6211\u4eec\u8fd9\u91cc\u5c31\u6765\u4ecb\u7ecd\u4e00\u4e0b\u540d\u5b57\u5b57\u5178\u5e8f\u9760\u524d\u7684\u90a3\u4e2aKruskal\u5427\uff01~~\uff08\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6839\u672c\u539f\u56e0\u662f\u672c\u849f\u84bb\u4e0d\u4f1a\u7528Prim\u5462\uff01\uff09~~\n\n\u90a3\u54b1\u5c31\u5f00\u59cb\u5427\uff01\u9996\u5148\uff0c\u6211\u4eec\u8bfb\u5165\u7684\u6570\u636e\u662f\u8fd9\u6837\u7684\uff01\n```\n1 2 2\n1 3 2\n1 4 4\n2 3 3\n3 4 4\n```\n\u5176\u4e2d\u6bcf\u4e00\u884c\u7684a,b,c 3\u4e2a\u6570\u662f\u6307**a\u5230b\u7684\u8def\u5f84\u6743\u503c\u662fc**\u54e6\uff01\n\n\u65e2\u7136\u9898\u76ee\u4e2d\u8ba9\u6211\u4eec\u6c42\u201c\u6700\u5c0f\u201d\u751f\u6210\u6811\uff0c\u90a3\u54b1\u4eec\u5c31\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u5148**\u628a\u8fd9\u4e9b\u8fb9\u6392\u4e2a\u5e8f\uff0c\u5148\u7528\u6700\u5c0f\u7684\u8fb9\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u8def\u628a\u8fd9\u68f5\u6811\u641e\u51fa\u6765**\uff01\n\n\u8bf4\u5e72\u5c31\u5e72\uff0c\u6392\u4e00\u4e2a\u5457\uff01\n\n```\n1 2 2\n1 3 2 \n2 3 3\n1 4 4\n3 4 4\n```\n\u6392\u597d\u4e4b\u540e\uff0c\u6620\u5165\u6211\u4eec\u773c\u5e18\u7684\u662f\u201c1\uff0c2\uff0c2\u201d\u8fd9\u6761\u8fb9\uff0c\u4e8c\u8bdd\u4e0d\u8bf4\uff0c\u628a\u5b83\u653e\u5230\u751f\u6210\u6811\u91cc\uff01\n\n![\u8fc7\u7a0b1](https://cdn.luogu.com.cn/upload/image_hosting/buj8anif.png)\n\n\u63a5\u4e0b\u6765\u662f\u201c1\uff0c2\uff0c2\u201d\uff0c\u5f88\u597d\uff0c\u628a\u5b83\u4e5f\u52a0\u8fdb\u53bb\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/63dd59r7.png)\n\n\u7136\u540e\u662f\u201c2\uff0c3\uff0c3\u201d\uff0c\u597d\u591a\u540c\u5b66\u628a\u5b83\u90fd\u52a0\u4e86\u8fdb\u53bb......\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/545sebqj.png)\n\n\u7b49\u4f1a\u7b49\u4f1a\uff0c\u5148\u522b\u5fd9\u7740\u52a0\uff01\u597d\u50cf\u6709\u4ec0\u4e48\u732b\u817b\uff01\u524d\u9762\u8bf4\u8fc7\uff0c**\u6700\u5c0f\u751f\u6210\u6811\uff0c\u662f\u4e0d\u80fd\u5e26\u56de\u8def\u7684**\uff0c\u52a0\u8fdb\u53bb\u4e00\u4e0d\u662f\u6700\u5c0f\uff0c\u4e8c\u5b83\u8fde\u4e2a\u6811\u90fd\u4e0d\u662f\uff0c\u6240\u4ee5\u4e0d\u80fd\u52a0\uff01\u4e8e\u662f\u6211\u4eec\u610f\u8bc6\u5230\uff1a**\u5728\u6bcf\u6b21\u52a0\u8fdb\u53bb\u65b0\u8fb9\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u770b\u770b\u5b83\u548c\u5176\u5b83\u8fb9\u4f1a\u4e0d\u4f1a\u6784\u6210\u56de\u8def**\u624d\u884c\uff01\n\n\u90a3\u54b1\u5c31\u53ea\u80fd\u9000\u800c\u6c42\u5176\u6b21\uff0c\u9009\u5176\u5b83\u7684\u8fb9\u5566\uff0c\u201c1\uff0c4\uff0c4\u201d\u8fd9\u53ef\u4e0d\u662f\u56de\u8def\uff0c\u6ca1\u95ee\u9898\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ei5ln2vc.png)\n\n\u81f3\u6b64\uff0c\u8fb9\u6570\u5df2\u8fbe\uff08n-1\uff09\u6761\uff0c\u6240\u6709\u70b9\u5df2\u7ecf\u9009\u4e0a\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5927\u529f\u544a\u6210\uff01\uff08\u5f53\u7136\uff0c\u9009\u4e0b\u9762\u7684\u201c3\uff0c4\uff0c4\u201d\u4e5f\u662f\u9614\u4ee5\u7684\uff09\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u521a\u624d\u662f\u600e\u6837\u641e\u51fa\u8fd9\u68f5\u6700\u5c0f\u751f\u6210\u6811\u7684\uff1a\n\n1. \u628a\u8fb9\u4eec\u4ece\u5c0f\u5230\u5927**\u6392\u4e2a\u5e8f**\n1. \u5982\u679c**\u6ca1\u6709\u56de\u8def**\uff0c\u4e00\u6761\u4e00\u6761**\u5f80\u91cc\u52a0**\n1. \u8fb9\u6570\u8fbe\u5230\uff08**n-1**\uff09**\u6761**\uff0c\u5b8c\u6210\n\n\u6b65\u9aa4\u90fd\u5f04\u61c2\u5566\uff01\u4f46\u662f\u8fd9\u4e2a\u201c\u56de\u8def\u201d\u5230\u5e95\u600e\u4e48\u5224\u65ad\u5462\uff1f\n\n\u6240\u8c13\u5224\u65ad\u56de\u8def\uff0c\u5c31\u662f\u770b\u770b\u6709\u4e86\u8fd9\u6761\u8fb9\u4e4b\u540e\uff0c**\u6709\u6ca1\u6709\u8fde\u901a\u7684\u90e8\u5206**\uff0c\u4ece\u201c**\u6811**\u201d\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5c31\u662f**\u4e24\u4e2a\u70b9\u7684\u6839\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u201c\u7956\u5b97\u201d\uff09\u662f\u4e0d\u662f\u4e00\u6837\u7684**\n\n\u54ce\uff1f\u8bdd\u8bf4\u8bf4\u5230\u8fd9\u91cc\uff0c\u8bf8\u4f4d\u6709\u6ca1\u6709\u8054\u60f3\u5230\u4ec0\u4e48\u554a\uff1f\n\n\u6ca1\u9519\uff0c\u5c31\u662f\u91d1\u5149\u95ea\u95ea\u7684[**\u5e76\uff01\u67e5\uff01\u96c6\uff01**](https://www.luogu.com.cn/problem/P3367)\n\n\u5e76\u67e5\u96c6\u662f\u5565\u5c31\u4e0d\u5728\u6211\u7684\u8d23\u4efb\u8303\u56f4\u4e4b\u5185\u5566\uff0c\uff08~~\u5176\u5b9e\u5c31\u662f\u61d2\u764c\u72af\u4e86~~\uff09\u8fd9\u91cc\u6211\u5c31\u9ed8\u8ba4\u6ce5\u840c\u90fd\u4f1a\u5e76\u67e5\u96c6\u4e86......\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u641e\u4e2a\u5e76\u67e5\u96c6\u51fa\u6765\uff0c**\u7136\u540e\u6bcf\u52a0\u5165\u6761\u8fb9\u65f6\uff0c\u5148\u7528\u5e76\u67e5\u96c6\u7684\u201c\u67e5\u8be2\u201d\u529f\u80fd\uff0c\u770b\u770b\u4e24\u4e2a\u8282\u70b9\u7684\u7956\u5b97\u662f\u4e0d\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u4e0d\u4e00\u6837\u5c31\u628a\u4ed6\u4fe9\u201c\u5408\u5e76\u201d**\uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u5927\u80c6\u7684\u5f80\u91cc\u52a0\u5566~\n\n\u660e\u767d\u4e86\u6700\u5c0f\u751f\u6210\u6811\u600e\u4e48\u641e\uff0c\u54b1\u6765\u770b\u770b\u8fd9\u9053\u9898\uff1a\u73b0\u5728\u5927\u5bb6\u90fd\u77e5\u9053\u8fd9\u9898\u662f\u5178\u578b\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u4f46\u8fd8\u8981\u6ce8\u610f\u4e24\u4e2a\u5730\u65b9\uff1a\n\n\u9996\u5148\u8ba9\u6211\u4eec\u9009k\u6735\u4e91\u505a\u68c9\u82b1\u7cd6\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f**\u9009k\u4e2a\u8282\u70b9\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811**\uff0c\u90a3\u4e0d\u597d\u529e\uff01\u6211\u4eec\u90fd\u77e5\u9053\uff0c**\u5168\u90e8n\u4e2a\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\uff08n-1\uff09\u6761\u8fb9**\uff0c\u90a3**\u9009k\u4e2a\u8282\u70b9\u5c31\u662f\uff08n-k\uff09\u6761\u8fb9**\u5457\uff01\n\n\u5176\u6b21\u5c31\u662f\u8fd9\u4e2a\u201cNo Answer\u201d\u600e\u4e48\u5f04\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u4e5fso easy\uff0c\u4f60\u60f3\u554a\uff0c**\u4e00\u5171\u5c31m\u6761\u8fb9\uff0c\u5982\u679c\u90fd\u9009\u5b8c\u4e86\u8fd8\u6ca1\u6709\u9009\u51fa\uff08n-k\uff09\u6761\u8fb9\u6765\uff0c\u90a3\u5c31\u662f\u59a5\u59a5\u7684No Answer \u4e86**\n\nbb\u4e86\u8fd9\u4e48\u591a\uff0c\u662f\u65f6\u5019\u653e\u4ee3\u7801\u4e86\uff01\u542c\u6211\u8fd9\u4e48\u4e00\u8bb2\u89e3\uff0c\u5927\u5bb6\u5e94\u8be5\u90fd\u7406\u89e3\u6700\u5c0f\u751f\u6210\u6811\u7684Kruskal\u7b97\u6cd5\u4e86\u5427\uff01\n\n```cpp\n#include<iostream>\n#include<algorithm>  //sort\u561b......\u5f53\u7136\u8981\u5f00\u4e07\u80fd\u7684algorithm\nusing namespace std;\nstruct woyaohongming{ //\u4e0d\u8981\u5728\u610f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u540d\u5b57......\u5b83\u53ea\u662f\u7528\u6765\u5b58\u50a8\u56fe\u7684\u800c\u5df2\n\tint s,e,w;    //s-start\uff0ce-end\uff0c\u4ee3\u8868\u8fb9\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0cw\u5c31\u662f\u6743\u503c\u8d39\u7528\u4e86\n}a[200005];\nint f[200005];  //\u5e76\u67e5\u96c6\u7528\u7684f\u6570\u7ec4\nbool cmp(woyaohongming a,woyaohongming b){   //sort\u6392\u5e8f\u89c4\u5219\uff0c\u6309\u8d39\u7528\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\n\treturn a.w<b.w;\n}\nint find(int a){  //\u5e76\u67e5\u96c6\u7684\u201c\u627e\u7956\u5b97\u201d\u51fd\u6570\uff0c\u6ce8\u610f\u522b\u5fd8\u8def\u5f84\u538b\u7f29\n\tif(f[a]==a)\n\treturn a;\n\telse return f[a]=find(f[a]);\n}\nint main(){\n\tint n,m,k;\n\tcin>>n>>m>>k;   //\u8f93\u5165n\u3001m\u3001k\uff0c\u6ca1\u5565\u597d\u8bb2\u7684\n\tfor(int i=1;i<=n;i++)   \n\tf[i]=i;  //\u5e76\u67e5\u96c6\u6570\u7ec4\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u7956\u5b97\u4e00\u5f00\u59cb\u662f\u5b83\u81ea\u5df1\n\tfor(int i=1;i<=m;i++)\n\tcin>>a[i].s>>a[i].e>>a[i].w;  //\u8f93\u5165\u56fe\u7684\u4fe1\u606f\n\tsort(a+1,a+1+m,cmp);   //\u5feb\u6d3b\u7684\u6309\u6743\u503c\u6392\u4e2a\u5e8f\n   int cnt=0,sum=0;  //cnt\u662f\u5df2\u7ecf\u9009\u4e2d\u7684\u8fb9\u6570\uff0csum\u662f\u6700\u7ec8\u8981\u8f93\u51fa\u7684\u6700\u5c0f\u6743\u503c\n\tfor(int i=1;i<=m;i++){   //m\u6761\u8fb9\uff0c\u5faa\u73afm\u6b21\n\t\tif(find(a[i].s)!=find(a[i].e)){ //\u5982\u679c\u4fe9\u8282\u70b9\u7684\u7956\u5b97\u4e0d\u76f8\u7b49\uff08\u4e5f\u5c31\u662f\u4e0d\u662f\u56de\u8def\uff09\uff0c\u5c31\u53ef\u4ee5\u52a0\u8fdb\u53bb\n\t\t\tf[find(a[i].s)]=find(a[i].e); //\u628a\u5b83\u4fe9\u5408\u5e76\u6210\u4e00\u4e2a\u7956\u5b97\n\t\t\tsum+=a[i].w;    //\u66f4\u65b0\u6700\u5c0f\u8d39\u7528\n\t\t\tcnt++; //\u8fb9\u6570+1\n\t\t}\n\t\tif(cnt>=n-k)  //\u8fb9\u6570\u5230\u8fbe\uff08n-k\uff09\u6761\u8fb9\uff0c\u4efb\u52a1\u5b8c\u6210\uff0cbreak\n\t\tbreak;\n\t}\n\tif(cnt>=n-k)   //\u5982\u679c\u9009\u4e86n-k\u6761\u8fb9\uff0c\u53ef\u4ee5\u641e\u6700\u5c0f\u751f\u6210\u6811\n\tcout<<sum;  //\u8f93\u51fa\u6700\u5c0f\u6743\u503c\n\telse cout<<\"No Answer\";  //\u8981\u4e0d\u7136\u9009\u4e86m\u6761\u8fb9\u8fd8\u90fd\u641e\u4e0d\u597d\uff0c\u4e0d\u80fd\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\n\treturn 0;  //\u7ec8\u4e8e\u5b8c\u4e8b\u4e86\n} \n```\nThe End ......\n\nand Happy New Year!\n",
        "postTime": 1577805285,
        "uid": 239405,
        "name": "yangrunze",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u89e3\u91ca\u91cc\u6709\u5f88\u591a\u5e9f\u8bdd\u3002\n\nluogu\u81ea\u52a8\u7f29\u8fdb\uff0c\u7136\u540e\u6211\u53c8\u624b\u6253\u4e86\u4e00\u904d\u7a7a\u683c\u3002\n\n\n/\\*\n\u6709\u4e00\u53e5\u8bdd\u8bf4\u7684\u662f \u5982\u679cn\u4e2a\u70b9\u88abn-1\u6761\u8fb9\u8fde\u63a5\u7684\u8bdd\uff0c\u8fd9\u4e00\u5b9a\u662f\u68f5\u6811\u3002\n\n\u90a3\u4e48\uff1a\n\n\u8fde\u7684\u8fb9\u6570       \u5f97\u5230\u7684\u6811\u7684\u4e2a\u6570\n\nn-1                        1\n\nn-2                        2\n\nn-3                        3\n\n...                          ...\n\nn-k                        k\n\n\u6240\u4ee5\u6211\u4eec\u5982\u679c\u60f3\u8981\u8fde\u51fak\u68f5\u6811\uff0c\u5c31\u9700\u8981\u8fden-k\u6761\u8fb9\u3002\n\n\n\u9898\u76ee\u8981\u6c42\u7528n\u6735\u4e91\u8fde\u51fak\u4e2a\u68c9\u82b1\u7cd6\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u68c9\u82b1\u7cd6\u90fd\u662f\u8fde\u901a\u7684\uff0c\n\n\u90a3\u4e48\u6bcf\u4e2a\u68c9\u82b1\u7cd6\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u68f5\u6811\u3002\n\n\u5c31\u662f\u8bf4\u8981\u7528n\u4e2a\u8282\u70b9\u8fde\u51fak\u68f5\u6811\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8981\u7528n-k\u6761\u8fb9\u8fde\u51fak\u68f5\u6811\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8981\u82b1\u8d39\u8fde\u51fan-k\u6761\u8fb9\u7684\u4ee3\u4ef7\u3002\n\n\u65e2\u7136\u4e00\u5b9a\u8981\u82b1\u8d39\u8fde\u51fan-k\u6761\u8fb9\u7684\u4ee3\u4ef7\uff0c\n\n\u90a3\u4e48\u5f53\u7136\u8981\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u8fde\u8d77\u6765\u3002\n\n\u6240\u4ee5\u7ed9\u6bcf\u6761\u53ef\u4ee5\u8fde\u7684\u8fb9\u6309\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f\uff0c\n\n\u7136\u540e\u8fden-k\u6761\u8fb9\u9020k\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5982\u679c\u7ed9\u7684\u5173\u7cfb\u6570m\u5c0f\u4e8e\u9700\u8981\u8fde\u7684\u8fb9\u6570\uff08n-k\uff09\uff0c\u662f\u4e00\u5b9a\u8fde\u4e0d\u51fak\u4e2a\u6811\u6765\u7684\uff0c\u56e0\u4e3am\u4e2a\u5173\u7cfb\u53ea\u80fd\u8fdem\u6761\u8fb9\u3002\n\n\\*/\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define N 1005\nusing namespace std;\nint n,m,k,x,y,l,sum,ans;\nint fa[N];\nstruct Edge\n{\n    int u,v,w;\n    bool operator <(Edge a) const    //\u91cd\u7f6e\u8fd0\u7b97\u7b26\u7684\u51fd\u6570\u5199\u5728\u91cc\u9762\u7684\u8bdd\u5fc5\u987b\u52a0const\n    {\n        return w<a.w;\n    }\n}edge[N*10];\n/*bool operator <(Edge a,Edge b)    //\u91cd\u7f6e\u8fd0\u7b97\u7b26\u7684\u51fd\u6570\u5199\u5728\u5916\u9762\u7684\u8bdd\u4e0d\u80fd\u52a0const\n{\n        return a.w<b.w;\n}*/\nint find(int x)\n{\n    return fa[x]==x?fa[x]:fa[x]=find(fa[x]);\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=n;i++) fa[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w);\n    }\n    sort(edge+1,edge+m+1);    //\u6309\u4ee3\u4ef7\u5347\u5e8f\u6392\u5217 \n    for(int i=1;i<=m;i++)\n    {\n        int fx=find(edge[i].u),fy=find(edge[i].v);\n        if(fx!=fy)        //\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u68f5\u6811\u4e2d \n        {\n            fa[fx]=fy;\n            sum++;        //\u8fde\u4e00\u6761\u8fb9\uff0c\u8ba9\u5b83\u4eec\u5408\u5e76\u6210\u4e3a\u4e00\u68f5\u6811 \n            ans+=edge[i].w;        //\u52a0\u4e0a\u5408\u5e76\u7684\u4ee3\u4ef7 \n        }\n        if(sum==n-k)        //\u5df2\u7ecf\u8fde\u597d\u4e86k\u68f5\u6811 \n        {\n            printf(\"%d\",ans);\n            return 0;\n        }\n    }\n    puts(\"No Answer\");    //\u4e0d\u53ef\u80fd\u8fde\u597d \n    return 0;\n}\n```",
        "postTime": 1505380091,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u8fde\u63a5\u4e00\u6761\u8fb9----\u8fde\u901a\u5757\u6570\u91cf\u51cf\u4e00\nk\u4e2a\u8fde\u901a\u5757-----\u8fde\uff08n-k\uff09\u8fb9\n\u8fd0\u7528kruskal\u7b97\u6cd5\u7684\u601d\u60f3\uff1a\u6bcf\u6b21\u8fde\u53ef\u4ee5\u8fde\u7684\u8fb9\u4e2d\u4ee3\u4ef7\u6700\u5c0f\u7684 \uff08\u8d2a\u5fc3\uff09\n\u4f7f\u7528 \u5e76\u67e5\u96c6\u7ef4\u62a4 \n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint n,k,m;\nint fa[1000050];\nstruct node {\n\tint x;\n\tint y;\n\tint l;\n} a[1000005];\nint cmp( const void *a , const void *b ) {\n\tstruct node *c = (node *)a;\n\tstruct node *d = (node *)b;\n\treturn c->l - d->l;\n}\nint find(int x)\n{\n\tif(x!=fa[x])\n\tfa[x]=find(fa[x]);\n\treturn fa[x];\n}\nvoid work(int x,int y)\n{\n\tx=find(x);\n\ty=find(y);\n\tif(x==y)\n\treturn;\n\tfa[x]=y;\n}\nint main() {\n\tcin>>n>>m>>k;\n\tfor(int i=0; i<m; i++) {\n\t\tscanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].l);\n\t}\n\tqsort(a,m,sizeof(a[0]),cmp);\n\tfor(int i=1;i<=n;i++)\n\tfa[i]=i;\n\tint num=n-k;\n\tint ans=0;\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tif(num==0)\n\t\tbreak;\n\t\tint aaa=find(a[i].x);\n\t\tint wzx=find(a[i].y);\n\t\tif(aaa!=wzx)\n\t\t{\n\t\t\twork(a[i].x,a[i].y);\n\t\t\tans+=a[i].l;\n\t\t\tnum--;\n\t\t}\n\t}\n\tif(num)\n\tcout<<\"No Answer\"<<endl;\n\telse\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1533175911,
        "uid": 12076,
        "name": "Floating__Dream",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "#\u67e5\u96c6\n\n- n\u4e2a\u70b9 m\u6761\u8fb9    \u8fde\u6210k\u4e2a\u6811\u7684\u6700\u5c0f\u4ee3\u4ef7\n\n- \u82e5k\u4e3a1    \u5219\u8fde\u6210\u4e00\u68f5MST    \u8dd1\u4e00\u6b21kruskal   n-1\u6b21\u8fde\u8fb9\n\n- \u82e5 k\u4e3a2    \u4e3a\u6700\u540e\u7684\u56fe\u5fc5\u987b\u4e3a  \u4e24\u9897MST      n-2\u6b21\u8fde\u8fb9\n\n- \u540c\u7406   \u8fde\u6210k\u4e2amst     \u8fdb\u884c n-k\u6b21\u8fde\u8fb9  \u82e5\u8fdb\u884c\u8005n-k\u6b21\u64cd\u4f5c\u4e2d    \u6ca1\u6709\u4e86\u8fb9    \uff08\u5373cpp\u4e2d\u7684 h<m)  \u76f4\u63a5\u8f93\u51fa No Answer\n\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint n,m,k,ans;\nint fa[1111];\n\nstruct node {\n    int u,v,w;\n}bian[11111];\nint comp(node a,node b)\n{\n    return a.w<b.w;\n}\nint father(int x)\n{\n    if(fa[x]==x) return x;\n    return fa[x]=father(fa[x]);\n}\nint main()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        bian[i].u=x;\n        bian[i].v=y;\n        bian[i].w=z;\n        \n    }\n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n    sort(bian+1,bian+1+m,comp);\n    int h=1;\n    int js=1;\n    while(js<=n-k)\n    {\n        if(h>m)\n        {\n            cout<<\"No Answer\"<<endl;\n            return 0;\n        }\n        int x=bian[h].u,y=bian[h].v,w=bian[h].w;\n        int fx=father(x),fy=father(y);\n        if(fx!=fy)\n        {\n            js++;\n            fa[fx]=fy;\n            ans+=w;\n        }\n        h++;\n    }\n    if(js)\n    cout<<ans<<endl;\n    \n}\n```",
        "postTime": 1470225170,
        "uid": 20111,
        "name": "soler",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "#\u751f\u6210\u6811\n\n- **\u9898\u89e3**\uff1a\n\n\u9996\u5148\u9898\u76ee\u8981\u6c42\u4e00\u4e2a\u56fe\u751f\u6210k\u4e2a\u6811\uff0c\u4f7f\u5f97\u82b1\u8d39\u6700\u5c0f\u6c42\u6700\u5c0f\u82b1\u8d39\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53ef\u662f\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5efak\u4e2a\u6811\u554a\uff1f\n\n\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u4ed4\u7ec6\u60f3\u4e00\u4e0bkruskal\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u6bcf\u4e00\u6b65\u5efa\u8fb9\u90fd\u4fdd\u8bc1\u4e86\u5f53\u524d\u7684\u6240\u6709\u751f\u6210\u6811\u82b1\u8d39\u6700\u5c0f\u3002\u6bcf\u6b21\u5408\u5e76\u90fd\u5c111\u68f5\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u5728kruskal\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u5f53\u524d\u7684\u751f\u6210\u6811\u6570\u91cfnum\uff0c\u6bcf\u6b21\u5408\u5e76\u65f6num--\uff0c\u66f4\u65b0\u82b1\u8d39\u5373\u53ef\uff0c**\u6ce8\u610f** \u4e00\u5f00\u59cb\u662f\u6bcf\u4e2a\u70b9\u90fd\u662f\u67091\u68f5\u751f\u6210\u6811\uff0c\u6545\u521d\u59cb\u751f\u6210\u6811\u6570\u91cf\u4e3an\n\n\u6211\u4eec\u5728\u68b3\u7406\u4e00\u904d\u601d\u8def\uff1a\n\n1. \u8bfb\u5165\n\n2. kruskal\uff08\u5199\u6cd5\u89c1\u4ee3\u7801\uff09\n\n3. \u8f93\u51fa\n\n- **code:**\n\n```cpp\n    #include<cstdio>\n    #include<algorithm>\n    using namespace std;\n    const int maxn=1005;\n    const int maxm=10005; \n    struct e{// \u8fb9 \n        int u,v,w;\n        bool operator <(e a) { return w<a.w; }\n    }edge[maxm];\n    \n    int n,m,k,cnt;\n    int fa[maxn]; //\u5e76\u67e5\u96c6 \n    int find(int x){\n        if(x==fa[x]) return x;\n        fa[x]=find(fa[x]);\n        return fa[x];\n    }\n    int kruskal(){// kruskal\u5efa\u6700\u5c0f\u751f\u6210\u6811 \n        int res=0,nft=n;\n        for(int i=1;i<=n;i++) fa[i]=i;// \u96b6\u5c5e\u96c6\u5408\u521d\u59cb\u5316 \n        sort(edge+1,edge+m+1); \n        for(int i=1;i<=m;i++){\n            if(nft<=k) break;// \u662f\u5426\u5df2\u7ecf\u5efa\u4e86k\u68f5\u6700\u5c0f\u751f\u6210\u6811 \uff0c\u5982\u679cn<=k \u5219\u65e0\u6cd5\u8fde\u6210k\u4e2a\u68c9\u82b1\u7cd6 \n            int fu=find(edge[i].u);//(\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811,\u53ef\u80fd\u6709\u7684\u4eba\u4e0d\u6e05\u695a\uff0c\u65e5\u540e\u6211\u5c06\u5728\u535a\u5ba2\u91cc\u4e13\u95e8\n            int fv=find(edge[i].v);//         \u5199\u4e00\u70b9\u5173\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e1c\u897f,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b\u770b\uff09 \n            if(fu!=fv){\n                fa[fu]=fv;\n                res+=edge[i].w;\n                nft--;\n            }\n        }\n        if(nft==k) return res;// \u80fd\u5efa\u6210\uff0c\u8fd4\u56de\u82b1\u8d39\uff0c\u5426\u5219\u8fd4\u56de-1 \n        return -1;\n    }\n    int main(){\n        int u,v,w,ans;\n        scanf(\"%d%d%d\",&n,&m,&k);\n        for(int i=1;i<=m;i++) \n            scanf(\"%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w);\n        ans=kruskal();\n        if(ans==-1) puts(\"No Answer\");else printf(\"%d\",ans);\n    }\n```",
        "postTime": 1513068875,
        "uid": 50966,
        "name": "YWY_wys",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u771f\u7684\u6ca1\u6709\u4eba\u7528Prim\u7b97\u6cd5\u5417\uff1f\n\n\u6211\u7684\u601d\u8def\u597d\u50cf\u6709\u70b9\u795e\u5947\uff0c\u4f46\u662f\u6548\u7387\u4e5f\u633a\u9ad8\u7684(4ms)\n\n\u9996\u5148DFS\u786e\u5b9a\u8054\u901a\u5757\uff0c\u7136\u540e\u8ba1\u7b97\u6709\u51e0\u4e2a\u8054\u901a\u5757\uff0c\u5982\u679ccnt\u5927\u4e8ek\u5219\u5224\u65adNo Answer\uff08\u4e0d\u8fc7\u597d\u50cf\u6ca1\u6709No Answer\u7684\u6570\u636e\uff09\n\n\u63a5\u7740\u679a\u4e3e\u6bcf\u4e2a\u8054\u901a\u5757\uff0c\u5728\u6bcf\u4e2a\u8054\u901a\u5757\u4e0a\u5efa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff1b\n\n\u5269\u4e0b\u7684\u5c31\u662f\u780d\u6389k - cnt - 1\u6761\u8fb9\uff1b\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u6211\u4eec\u8981\u780d\u6389\u524dk - cnt - 1\u6761\u6700\u5927\u8fb9\uff1b\n\n\u81f3\u4e8e\u5982\u4f55\u627e\u6700\u5927\u8fb9\uff0c\u6211\u7528\u4e86\u4f18\u5148\u961f\u5217\u6765\u5c06\u8fb9\u6709\u5b58\u50a8\u8d77\u6765\uff0c\u6700\u540e\u5c06k - cnt - 1\u6761\u8fb9\u63a8\u51fa\u961f\u5217\u5373\u53ef\n\n\u4ee3\u7801\uff08\u597d\u50cf\u6709\u70b9\u957f\uff09:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nstruct EDGE{\n    int out,len,nxt;\n}edge[20005];\nstruct cmp1{\n    bool operator () (EDGE &a,EDGE &b){\n        return a.len > b.len;\n    }\n};\nstruct cmp2{\n    bool operator () (EDGE &a,EDGE &b){\n        return a.len < b.len;\n    }\n};\npriority_queue <int,vector<EDGE>,cmp1> que;\npriority_queue <int,vector<EDGE>,cmp2> Ans;\nint n,m,d,tot,ans,cnt;\nint head[1005],marks[1005],mark[1005],dis[1005],vis[1005];\nvoid dfs(int pos);\nvoid prim(int sta);\nvoid dfs(int pos){\n    marks[pos] = cnt;\n    for(int i = head[pos];i != 0;i = edge[i].nxt){\n        if(marks[edge[i].out] != 0) continue;\n        dfs(edge[i].out);\n    }\n}\nvoid prim(int sta){\n    memset(dis,127,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[sta] = 0;\n    EDGE cc;\n    cc.out = sta,cc.len = 0;\n    que.push(cc);\n    while(!que.empty()){\n        int u = que.top().out;//\u5f53\u7136\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u6c42\u751f\u6210\u6811\u5566 nlogn \n        que.pop();\n        if(vis[u] == 1) continue;\n        vis[u] = 1;\n        for(int i = head[u];i != 0;i = edge[i].nxt){\n            int v = edge[i].out,len = edge[i].len;\n            if(vis[v] == 0 && dis[v] > len) {\n                dis[v] = len;\n                que.push((EDGE){v,dis[v],0});\n            }\n        }\n    }\n    for(int i = 1;i <= n;i ++){\n        if(marks[i] == marks[sta]){\n            ans += dis[i];\n            Ans.push((EDGE){0,dis[i],0});\n        }\n```\n}//\u5c06\u6240\u6709\u8fb9\u5165\u961f\n```cpp\n}\nint main (){\n    freopen(\"1195.in\",\"r\",stdin);\n    freopen(\"1195.out\",\"w\",stdout);\n    scanf(\"%d%d%d\",&n,&m,&d);\n    for(int i = 1;i <= m;i ++){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        edge[++ tot].nxt = head[a],head[a] = tot,edge[tot].out = b,edge[tot].len = c;\n        edge[++ tot].nxt = head[b],head[b] = tot,edge[tot].out = a,edge[tot].len = c;\n    }\n    for(int i = 1;i <= n;i ++){\n        if(marks[i] != 0) continue;\n        cnt ++;\n        dfs(i);\n    }//DFS\u6c42\u8054\u901a\u5757\u4e2a\u6570\uff0c\u987a\u4fbf\u628a\u6bcf\u4e2a\u8054\u901a\u5757\u6807\u53f7\u4e3acnt \n    if(cnt > d){\n        printf(\"No Answer\");\n        return 0;\n```\n}//\u591a\u4f59\u8054\u901a\u5757\u6570\u91cf\u5219\u76f4\u63a5\u9000\u51fa\n```cpp\n    for(int i = 1;i <= n;i ++){\n        if(mark[marks[i]] == 0){//\u5224\u65ad\u5f53\u524d\u8054\u901a\u5757\u662f\u5426\u5df2\u5efa\u6811 \n            prim(i);\n            mark[marks[i]] = 1;\n        }\n    }//prim\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811 \n    for(int i = 1;i <= d - cnt;i ++){\n        if(!Ans.empty()){//\u628a\u6700\u5927\u7684\u51e0\u6761\u8fb9\u63a8\u51fa \n            ans -= Ans.top().len;\n            Ans.pop();\n        }\n        else{//\u5f53\u53d1\u73b0\u65e0\u8fb9\u53ef\u51fa\u5374\u8fd8\u4e0d\u80fd\u8fde\u6210k\u4e2a\u8054\u901a\u5757\u65f6\uff0c\u9000\u51fa \n            printf(\"No Answer\");\n            return 0;\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1506259462,
        "uid": 44474,
        "name": "Wenxiang_MCL",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1ahttps://www.luogu.org/problemnew/show/P1195  \n\n---\n\n## \u9898\u76ee\u5206\u6790\n\u9898\u76ee\u5927\u610f\u662f\uff1a\u4e00\u4e2a\u6709$n$\u4e2a\u70b9\u7684\u56fe\u53ef\u4ee5\u8fde$m$\u6761\u6709\u8fb9\u6743\u7684\u8fb9\uff0c\u95ee\u628a\u8fd9\u4e2a\u56fe\uff08\u901a\u8fc7\u8fde\u8fb9\u7684\u65b9\u5f0f\uff09\u5206\u6210$k$\u4e2a\u8fde\u901a\u5757\u7684\u6700\u5c0f\u82b1\u8d39\u3002  \n($1\u2264n\u22641000,1\u2264m\u226410000,1\u2264k\u226410$) \n\n\u7531\u201c\u6700\u5c0f\u82b1\u8d39\u201d\u53ef\u77e5\u6b64\u9898\u57fa\u4e8e\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u81ea\u7136\u60f3\u5230\u4e86$Prim$\u548c$Kruskal$\u7b97\u6cd5\uff0c\u518d\u770b\u6570\u636e\u8303\u56f4\uff0c\u6392\u9664\u4e86$Prim$\uff08$O(nm)$\uff09\uff0c\u7559\u4e0b\u4e86$O(mlogm)$\u7684$Kruskal$.  \n\n\u5224\u65ad\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u4e00\u8fde\u901a\u5757\u4e2d\u7684\u64cd\u4f5c\u7528\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u90a3\u4e48\u52a0\u8fb9\u7684\u8fb9\u754c\u5462\uff1f\u8fd8\u662f$(n-1)$\u6761\u8fb9\u5417\uff1f  \n\u7b54\u6848\u662f\u5426\u3002\u6211\u4eec\u4e0d\u59a8\u5148\u6253\u4e2a\u8868\uff1a  \n| \u52a0\u8fb9\u6570 | \u8fde\u901a\u5757\u6570 |  \n| $n-1$ | $1$ |  \n| $n-2$ | $2$ |  \n| $n-3$ | $3$ |  \n.  \n.  \n.  \n| $n-k$ | $k$ |  \n\u6240\u4ee5\u8981\u5206\u6210$k$\u4e2a\u8fde\u901a\u5757\u8981\u52a0$(n-k)$\u6761\u8fb9\uff0c\u8fd9\u5c31\u662f\u8fb9\u754c\u4e86\u3002  \n\n\u6bcf\u6b21\u52a0\u8fb9\u540e\u5c31\u628a\u7b54\u6848\u52a0\u4e0a\u6b64\u8fb9\u7684\u8fb9\u6743\uff0c\u6700\u540e\u8f93\u51fa\u3002  \n\n---\n\n## \u4ee3\u7801\u5b9e\u73b0\n\u90e8\u5206\u4ee3\u7801\uff08\u5934\u6587\u4ef6\u3001\u5b8f\u5b9a\u4e49\u7565\u53bb\uff09\uff1a  \n```cpp\nstruct node\n{\n\tint u,v,c;\n}a[M];//\u8bb0\u5f55\u53ef\u8fde\u8fb9\u7684\u7ed3\u6784\u4f53\nint n,m,k;\nint fa[N],cnt,ans;//\u5e76\u67e5\u96c6\uff1b\u5df2\u52a0\u8fb9\u6570\uff1b\u7b54\u6848\nbool cmp(node x,node y){return x.c<y.c;}//\u4ece\u5c0f\u5230\u5927\nint find(int x){return fa[x]=fa[x]==x?x:find(fa[x]);}\nbool kruskal()\n{\n\tint i,x,y;\n\tfor(i=1;i<=m;i++)//\u679a\u4e3em\u6761\u8fb9 \n\t{\n\t  x=find(a[i].u); y=find(a[i].v);\n\t  if(x!=y)//\u82e5\u4e0d\u5728\u4e00\u4e2a\u8054\u901a\u5757\u4e2d \n      {\n      \tfa[x]=y;//\u52a0\u8fb9\uff08\u5408\u5e76\u5e76\u67e5\u96c6\uff09 \n      \tcnt++;//\u5df2\u52a0\u8fb9\u6570\u52a01 \n      \tans+=a[i].c;//\u66f4\u65b0\u7b54\u6848 \n\t  }\n\t  if(cnt==(n-k)){cout<<ans<<endl; return 1;}//\u8fb9\u754c\uff0c\u5982\u679c\u5df2\u7ecf\u52a0\u4e86\uff08n-k\uff09\u6761\u8fb9\uff0c\u8f93\u51fa\u5e76\u9000\u51fa\u51fd\u6570 \n\t}\n    return 0;\n}\nint main()\n{\n\tint i;\n\tcin>>n>>m>>k;\n\tfor(i=1;i<=m;i++) cin>>a[i].u>>a[i].v>>a[i].c;\n\tfor(i=1;i<=n;i++) fa[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n\tsort(a+1,a+m+1,cmp);//\u6309\u8fb9\u6743\u6392\u5e8f\u6bcf\u6761\u8fb9 \n\tif(!kruskal()) cout<<\"No Answer\"<<endl;\n\treturn 0;\n}  \n```\n",
        "postTime": 1533987080,
        "uid": 108712,
        "name": "Cxs3",
        "ccfLevel": 0,
        "title": "P1195 \u53e3\u888b\u7684\u5929\u7a7a"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u8fd8\u7b97\u662f\u5f88\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u849f\u84bb\u7528\u7684kruskal\u7b97\u6cd5\uff0cAC\u3002\n\u8f93\u51fa\"No Answer\"\u7684\u53ea\u6709\u9700\u8981\u751f\u6210\u7684\u68c9\u82b1\u7cd6\u6570\u5927\u4e8e\u4e91\u5f69\u539f\u6599\u603b\u6570\u7684\u60c5\u51b5\uff0c\u5728kruskal\u5f00\u59cb\u4e4b\u524d\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u5566\uff01\n\u8be6\u89c1\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>//C++\u5feb\u6392\u8c03\u7528\u8be5\u51fd\u6570\nusing namespace std;\nint father[10000+10],m,n,k,v,g,h,num=0,sum,payment=0;//sum\u8bb0\u5f55\u8fde\u63a5\u81f3\u76ee\u524d\u60c5\u51b5\u9614\u4ee5\u505a\u6210\u7684\u6700\u591a\u68c9\u82b1\u7cd6\u6570\uff0c payment\u8bb0\u5f55\u82b1\u8d39\u3002\nstruct clouds\n{\n\tint f,t,l;\n}e[10000+10];//\u7ed3\u6784\u4f53\u8868\u8def\u5f84\u3002\nint find(int x)\n{\n\tif(father[x]!=x)\n\t\tfather[x]=find(father[x]);\n\treturn father[x];\n}//\u4f18\u5316\u7684\u67e5\u627e\u7956\u5b97\u51fd\u6570\uff0c\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8054\u901a\nvoid uni(int q,int w)\n{\n\tfather[q]=w;\n}//\u5408\u5e76\u51fd\u6570\u4f7f\u7956\u5b97\u76f8\u540c\nint cmp(const clouds&a,const clouds&b)\n{\n\treturn a.l<b.l;\n}\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u5feb\u6392\u51fd\u6570\uff0c\u6309\u8fb9\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u53ef\u4ee5\u4fdd\u8bc1MIN\nvoid add(int x,int y,int z)\n{\n\tnum++;\n\te[num].f=x;\n\te[num].t=y;\n\te[num].l=z;\n}//\u5c06\u8d77\u70b9\u7ec8\u70b9\u8fb9\u6743\u5f55\u5165\u7ed3\u6784\u4f53\u7684\u6dfb\u52a0\u51fd\u6570\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tif(k>n)\n\t{\n\t\tprintf(\"No Answer\");\n\t\treturn 0;\n\t}//\u5148\u884c\u5224\u65ad\u9700\u8981\u7cd6\u6570\u4e0e\u73b0\u6709\u4e91\u6735\u6570\uff0c\u82e5\u7cd6\u591a\u4e8e\u4e91\uff0c\u76f4\u63a5\u201cNo Answer\u201d\u7ed3\u675f\u3002\n\telse\n\t{\n\tfor(int i=1;i<=n;i++)\n\t\tfather[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\uff0c\u6bcf\u6735\u4e91\u7684\u7956\u5b97\u90fd\u662f\u81ea\u5df1\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&v,&g,&h);\n\t\tadd(v,g,h);\n\t}//\u8def\u5f84\u5f55\u5165\u7ed3\u6784\u4f53\n\tsort(e+1,e+m+1,cmp);//\u6309\u8fb9\u6743\u6392\u5e8f\n\tsum=n;//\u5f00\u59cb\u4e4b\u524d\uff0c\u53ef\u4ee5\u505a\u7684\u68c9\u82b1\u7cd6\u6700\u591a\u6735\u6570\u7b49\u4e8e\u4e91\u6735\u6570\n\tif(sum==k)\n    {\n       printf(\"0\");\n       return 0;\n     }//\u6070\u597d\u76f8\u7b49\uff0c\u8f93\u51fa0\n    for(int i=1;i<=m;i++)\n\t{\n\t\tint uu=find(e[i].f);\n\t\tint ii=find(e[i].t);\n\t\tif(uu!=ii)\n\t\t{\n\t\t\tuni(uu,ii);\n\t\t\tsum--;\n\t\t\tpayment+=e[i].l;\n\t\t}//\u4ece\u8fb9\u6743\u6700\u5c0f\u7684\u8def\u5f84\u5f00\u59cb\u627e\uff0c\u82e5\u8d77\u70b9\u7ec8\u70b9\u4e0d\u8fde\u901a\uff0c\u5408\u5e76\uff0c\u53ef\u505a\u6210\u68c9\u82b1\u7cd6\u6570--\uff0c\u652f\u51fa\u52a0\u4e0a\u8054\u901a\u8be5\u4e24\u70b9\u7684\u82b1\u8d39\n\t    if(sum==k)\n           break;//\u73b0\u5728\u7684\u4e91\u6735\u6570\u7b49\u4e8e\u8981\u7684\u7cd6\u6570\u5566\uff01\u53ef\u4ee5\u7ed3\u675f\u4e86\u54df\n    }\n    }\n\tprintf(\"%d\",payment);//\u8f93\u51fa\n\treturn 0;\n}```\n\u849f\u84bb\u8981\u53bb\u5403\u68c9\u82b1\u7cd6\u4e86\uff0c\u795dAC\n\u6492\u82b1",
        "postTime": 1534685083,
        "uid": 84542,
        "name": "\u98ce\u7fee\u96e8\u7fce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "> \u8fd9\u9053\u9898\u76ee\u7684\u7b80\u660e\u610f\u601d\u662f\uff0c\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u8981\u6c42\u4f60\u5c06\u5b83\u5206\u4e3a\u4e92\u4e0d\u76f8\u8fde\u7684$k$\u4e2a\u5b50\u56fe\u3002\n>\n> \u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u8981\u6c42\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u3002\n>\n> \u5982\u679c\u65e0\u89e3\uff0c\u8f93\u51fa`No Answer`\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\uff1f\n\n\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u9053\u9898\u76ee\u8003\u5bdf\u7684\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\u800c\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e24\u79cd\u7b97\u6cd5\uff0c`prim`\u4ee5\u53ca`kruskal`\u3002\n\n\u6211\u4eec\u5148\u4e0d\u7ba1\u7528\u54ea\u4e00\u4e2a\u7b97\u6cd5\uff0c\u6765\u5206\u6790\u4e00\u4e0b\u6b65\u9aa4\uff1a\n\n1. \u7531\u4e8e\u8981\u6c42\u8fb9\u6743\u503c\u548c\u6700\u5c0f\uff0c\u6211\u4eec\u5e94\u8be5\u9009\u7528\u8fb9\u6743\u5c3d\u91cf\u5c0f\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u8fb9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n2. \u4f60\u60f3\uff0c\u6211\u4eec\u8981\u5c06$n$\u4e2a\u70b9\u5206\u88c2\u6210$k$\u4e2a\u5b50\u56fe\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u8981\u7528$n$\u4e2a\u70b9\u8fde\u6210$k$\u68f5\u6811\uff08\u4e3a\u4ec0\u4e48\u662f\u6811\uff1f\u56e0\u4e3a\u6811\u4e2d\u6ca1\u6709\u73af\uff0c\u5c31\u6ca1\u6709\u591a\u4f59\u7684\u8fb9\uff0c\u6211\u4eec\u8981\u8ba9\u8fb9\u6743\u503c\u548c\u6700\u5c0f\uff0c\u5c31\u4e0d\u5e94\u9009\u7528\u65e0\u7528\u7684\u8fb9\uff09\u3002\n3. \u5982\u679c\u8bf4\u6211\u4eec\u8981\u8fde$k$\u68f5\u6811\uff0c\u5c31\u5f97\u8fde\u63a5$n-k$\u6761\u8fb9\u3002\u4f46\u662f\u4e0d\u80fd\u5faa\u73af$n-k$\u6b21\uff0c\u800c\u8981\u5faa\u73af$m$\u6b21\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u6761\u8fb9\u662f\u591a\u4f59\u7684\uff0c\u5b83\u4e0d\u7b97\u8fdb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u4ed6\u5728\u5faa\u73af\u4e2d\u5360\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e9b\u6709\u7528\u7684\u8fb9\u6ca1\u6709\u88ab\u627e\u5230\u3002\u6211\u4eec\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf$cnt$\uff0c\u8868\u793a\u5df2\u7ecf\u9009\u7528\u4e86\u591a\u5c11\u6761\u6709\u6548\u7684\u8fb9\u3002\u5f53$cnt=n-k$\u65f6\uff0c\u5c31$break$\u3002\n4. \u6700\u540e\u8f93\u51fa\u6743\u503c\u548c\u3002\n\n------\n\n\u770b\u770b\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u975e\u5e38\u50cf$kruskal$\u7b97\u6cd5\u3002\u6ca1\u9519\uff0c\u5c31\u662f\u5b83\u3002\n\n\u4ee3\u7801\u5c31\u653e\u5728\u8fd9\u91cc\u4e86\uff1a\n\n```c++\n#include<iostream>\n#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nclass Union_find_set//\u5e76\u67e5\u96c6\n{\n\tprotected:\n\t\tint f[1001];\n\tpublic:\n\t\tUnion_find_set()\n\t\t{\n\t\t\tregister int i;\n\t\t\tfor(i=0;i<1001;++i)\n\t\t\t\tf[i]=i;\n\t\t}\n\t\t~Union_find_set()\n\t\t{\n\t\t}\n\t\tint find(int x)\n\t\t{\n\t\t\tif(f[x]==x)\n\t\t\t\treturn x;\n\t\t\tf[x]=find(f[x]);\n\t\t\treturn f[x];\n\t\t}\n\t\tvoid merge(int x,int y)\n\t\t{\n\t\t\tint a=find(x);\n\t\t\tint b=find(y);\n\t\t\tif(a==b)\n\t\t\t\treturn;\n\t\t\tf[a]=b;\n\t\t}\n\t\tbool same(int x,int y)\n\t\t{\n\t\t\treturn (find(x)==find(y));\n\t\t}\n};\nstruct Edge\n{\n\tint from,to,len;\n};\nbool cmp(Edge x,Edge y)\n{\n\treturn x.len<y.len;\n}\nEdge edge[10001];\nint main()\n{\n\tint n,m,k;\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tregister int i;\n\tUnion_find_set ufs;\n\tfor(i=1;i<=m;++i)\n\t\tscanf(\"%d%d%d\",&edge[i].from,&edge[i].to,&edge[i].len);//\u5b58\u50a8\u8fb9\u7684\u4fe1\u606f\n\tsort(edge+1,edge+1+m,cmp);//\u6309\u7167\u8fb9\u6743\u6392\u5e8f\n\tint answer=0;//\u7d2f\u52a0\u8fb9\u6743\n\tint cnt=0;//\u5df2\u7ecf\u9009\u7528\u7684\u6709\u6548\u8fb9\u6570\u91cf\n\tfor(i=1;i<=m;++i)\n\t{\n\t\tif(cnt==n-k)//\u5df2\u7ecfOK\u4e86\n\t\t\tbreak;\n\t\tif(ufs.same(edge[i].from,edge[i].to))//\u8fd9\u6761\u8fb9\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u4f1a\u5f62\u6210\u73af\n\t\t\tcontinue;\n\t\tanswer+=edge[i].len;//\u7d2f\u52a0\u7b54\u6848\n\t\t//printf(\"Edge%d:from %d to %d len=%d\\n\",i,edge[i].from,edge[i].to,edge[i].len);\n\t\t++cnt;\n\t\tufs.merge(edge[i].from,edge[i].to);//\u5e76\u67e5\u96c6\u00b7\u5408\u5e76\n\t}\n\tif(cnt!=n-k)//\u65e0\u6cd5\u627e\u51fan-k\u6761\u6709\u6548\u8fb9\n\t\tprintf(\"No Answer\");\n\telse\n\t\tprintf(\"%d\",answer);\n\treturn 0;\n}\n```",
        "postTime": 1579841420,
        "uid": 113968,
        "name": "USER113968",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "# P1195\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1195)\n\n### \u5927\u4f53\u9898\u610f\uff1a\n\u5c31\u662f\u7ed9\u4f60$n$\u4e2a\u70b9$m$\u6761\u8fb9\uff0c \u7136\u540e\u8ba9\u4f60\u628a\u8fd9\u51e0\u4e2a\u70b9\u8fde\u6210$k$\u4e2a\u90e8\u5206.\n\n### \u89e3\u9898\u601d\u8def\uff1a\n~~\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\u751f\u6210\u6811~~(\u522b\u95ee\u6211\u600e\u4e48\u60f3\u5230\u7684).\n\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6709\u4e00\u4e2a\u5224\u65ad\n```cpp\nfor (int i = 1; i <= m; ++i) {\n\t\tif (father(ka[i].x) != father(ka[i].y)){\n\t\t\tunionn(ka[i].x, ka[i].y);\n\t\t\ttot += ka[i].v;\n\t\t\ts++;\n\t\t}\n\t\tif (s == n - 1) break;//\u6211\u5728\u8fd9\u91cc\uff0c\u5982\u679c\u8fd9\u5f20\u56fe\u4e2d\u5df2\u7ecf\u52a0\u5165\u4e86n-1\u6761\u8fb9\uff0c\n\t}//\u90a3\u5c31\u8bf4\u660e\u56fe\u5df2\u7ecf\u53ef\u4ee5\u8054\u901a\u4e86\uff0c\u7136\u540e\u5982\u679c\u53bb\u6389m\u6761\u8fb9\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u628a\u56fe\u5206\u6210\u4e86m\u4e2a\u90e8\u5206\n\t//\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u7528kruskal\u505a\u8fd9\u9053\u9898\u804a.\n```\n\n\u4fee\u6539\u540e\u7684\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n```cpp\nfor (int i = 1; i <= m; ++i) {\n\t\tif (father(ka[i].x) != father(ka[i].y)){\n\t\t\tunionn(ka[i].x, ka[i].y);\n\t\t\ttot += ka[i].v;\n\t\t\ts++;\n\t\t}\n\t\tif (s == n - k) break;//k\u4e3a\u5206\u6210\u591a\u5c11\u4e2a\u90e8\u5206\uff0c\u81ea\u5df1\u60f3\u4e00\u4e0b\u4e5f\u5f88\u597d\u60f3.\n\t\t//n-1\u6761\u8fb9\u53ef\u4ee5\u628a\u56fe\u521a\u521a\u597d\u8054\u901a\uff0cn-k\u6761\u8fb9\u53ef\u4ee5\u5c06\u56fe\u5206\u6210k\u4e2a\u90e8\u5206.\n\t}\n```\n\n### code:\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\n\nusing namespace std;\nint n, m, k, s, cnt, tot;\nstruct node {\n\tint x, y, v;\n}ka[200001];\nint fat[5001];\n\nint read() {\n\tint s = 0, f = 0; char ch = getchar();\n\twhile (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\n\nint father(int x) {\n\tif (fat[x] != x) fat[x] = father(fat[x]);//\u5e76\u67e5\u96c6\u7528\n\treturn fat[x];\n}\n\nvoid unionn(int x, int y) {//\u5e76\u67e5\u96c6\u7528\n\tint fa = father(x);\n\tint fb = father(y);\n\tif (fa != fb) fat[fa] = fb;\n}\n\nbool cmp(node a, node b) {//sort\u7528\n\treturn a.v < b.v;\n}\n\nint main() {\n\tn = read(), m = read(), k = read();\n\tint x, y, d;\n\tfor (int i = 1; i <= m; i++) {\n\t\tx = read(), y = read(), d = read();\n\t\tka[++cnt].v = d;\n\t\tka[cnt].x = x;\n\t\tka[cnt].y = y;\n\t}\n\tfor (int i = 1; i <= n; i++) fat[i] = i;//\u5e76\u67e5\u96c6\u7528\n\tsort(ka + 1, ka + m + 1, cmp);\n\tfor (int i = 1; i <= m; ++i) {//kruskal\n\t\tif (father(ka[i].x) != father(ka[i].y)){\n\t\t\tunionn(ka[i].x, ka[i].y);\n\t\t\ttot += ka[i].v;\n\t\t\ts++;\n\t\t}\n\t\tif (s == n - k) break;\n\t}\n\tprintf(\"%d\\n\", tot);\n}\n```",
        "postTime": 1569803824,
        "uid": 188155,
        "name": "K2sen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\u88f8\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u5982\u679c\u8981\u60f3\u9009\u51fa$k$\u4e2a\u8fde\u901a\u5757\u7684\u8bdd\uff0c\u6700\u4f18\u7684\u4e00\u5b9a\u662f\u5728\u5b83\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u8fdb\u884c\u9009\u62e9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u8dd1\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u7ed3\u679c\u5f97\u5230\u7684\u8fde\u901a\u5757\u6570\u91cf$tot$\u5927\u4e8e$k$\u7684\u8bdd\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002\n\n\u82e5\u662f\u5c0f\u4e8e$k$\uff0c\u90a3\u4e48\u6211\u4eec\u4ecd\u9700\u8981$k-tot$\u4e2a\u8fde\u901a\u5757\uff0c\u8003\u8651\u5230\u5220\u53bb\u4e00\u6761\u8fb9\u53ef\u4ee5\u591a\u51fa\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u8d2a\u5fc3\u7684\u5220\u53bb\u6700\u5927\u7684\u90a3\u4e2a\u8fb9\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u5f88\u7b80\u5355\u3002\n\n$Code:$\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n , m , k , tot;\n\nconst int N = 10000 + 5;\n\nstruct Edge {\n\tint u , v , w;\n\tbool operator <(const Edge &a) const {\n\t\treturn w < a.w;\n\t}\n}e[N << 1];\n\nint bin[N];\nint find(int x) {\n\tif(bin[x] == x) return x;\n\treturn bin[x] = find(bin[x]);\n}\n\nbool vis[N];\nint sum = 0;\n\nint main () {\n\tscanf(\"%d %d %d\" , &n , &m , &k); tot = n;\n\tfor(int i = 1 ; i <= n ; ++ i) bin[i] = i;\n\tfor(int i = 1 ; i <= m ; ++ i) scanf(\"%d %d %d\" , &e[i].u , &e[i].v , &e[i].w);\n\tsort(e + 1 , e + 1 + m);\n\tfor(int i = 1 ; i <= m ; ++ i) {\n\t\tint u = e[i].u , v = e[i].v;\n\t\tint fu = find(u) , fv = find(v);\n\t\tif(fu != fv) {\n\t\t\tbin[fu] = fv;\n\t\t\tsum += e[i].w;\n\t\t\tvis[i] = 1; tot --;\n\t\t}\n\t}\n\tif(tot > k) {\n\t\tputs(\"No Answer\"); return 0;\n\t} else {\n\t\tint need = k - tot;\n\t\tint cnt = 0;\n\t\tint ans = 0;\n\t\tfor(int i = m ; i >= 1 ; -- i) {\n\t\t\tif(vis[i]) {\n\t\t\t\tif(cnt == need) break;\n\t\t\t\tcnt ++;\n\t\t\t\tans += e[i].w;\n\t\t\t\tif(cnt == need) break;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\" , sum - ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572512451,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://www.luogu.org/blog/xzlhxc/solution-p1195)     \n[\u9898\u76ee\u94fe\u63a5\uff08\u6d1b\u8c37P1195\uff09](https://www.luogu.org/problem/P1195)    \n**\u524d\u7f6e\u829d\u58eb\uff1a[\u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/problem/P3366)\uff0c[\u5e76\u67e5\u96c6](https://www.luogu.org/problem/P3367)**     \n**\u611f\u89c9\u8bc1\u660e\u90e8\u5206\u6709\u70b9\u5947\u602a\uff0c\u6709\u7591\u95ee\u53ca\u65f6\u5411\u7b14\u8005\u79c1\u4fe1\u6216\u8bc4\u8bba\u3002**\n\n------------\n## \u2460\u9898\u610f\n\u7ed9\u4f60$n$\u4e2a\u70b9\uff0c$m$\u6761\u5e26\u6743\u6709\u5411\u8fb9\uff0c\u9009\u62e9\u4e00\u4e9b\u8fb9\uff0c\u5c06\u8fd9$n$\u70b9\u8fde\u4e3a$k$\u4e2a\u8054\u901a\u5757\u540e\uff0c\u4f7f\u5f97\u8fb9\u6743\u548c\u6700\u5c0f\u3002\n\n _\u5f88\u591a\u4eba\u7684\u89e3\u6cd5\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u5f88\u5c11\u8bf4\u6e05\u695a\u4e3a\u4ec0\u4e48\u7684\u3002\u77e5\u5176\u7136\u66f4\u5e94\u77e5\u5176\u6240\u4ee5\u7136\u3002_    \n## \u2461\u505a\u6cd5\n\u770b\u4e00\u773c\u9898\u76ee\uff0c\u786e\u5b9e\u5f88\u50cf$MST$\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u4f46\u6211\u5148\u60f3\u5230\u4e86\u8d2a\u5fc3\u3002      \n\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u51e0\u4e2a\u5f15\u7406\u5f00\u59cb\u601d\u8003\u8d2a\u5fc3\u7b56\u7565\uff1a\n1. \u603b\u4ee3\u4ef7\u6700\u5c0f\uff0c\u5219\u6bcf\u4e00\u6761\u8fb9\u5c3d\u53ef\u80fd\u5c0f\u3002\n1. \u8fde\u63a5\u4e00\u6761\u8fb9\u6700\u591a\u51cf\u5c11\u4e00\u4e2a\u8054\u901a\u5757\uff08\u6613\u5f97\uff0c\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u4e00\u8bc1\uff09\u3002\n\n\u90a3\u4e48\u8d2a\u5fc3\u7b56\u7565\u5c31\u51fa\u6765\u4e86\uff1a\n\n\u5c06\u8fb9\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u52a0\u5165\u8fd9\u6761\u8fb9\u80fd\u4f7f\u8054\u901a\u5757\u4e2a\u6570\u51cf\u4e00\uff0c\u90a3\u5c31\u9009\u62e9\u8fd9\u6761\u8fb9\u3002\u5f53\u9009\u62e9\u7684\u8fb9\u6570\u8fbe\u5230$n-k$\u65f6\uff08\u51cf\u5c11\u4e86$n-k$\u4e2a\u8054\u901a\u5757\uff0c\u5269\u4e0bk\u4e2a\u8054\u901a\u5757\uff09\u505c\u6b62\uff0c\u8f93\u51fa\u89e3\u3002\u5426\u5219\u65e0\u89e3\u3002\n\n**\u7528\u4e2a\u5e76\u67e5\u96c6\u5224\u65ad2\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u8fde\u4e86\u8fd9\u6761\u8fb9\u4e5f\u6ca1\u7528\u3002**\n## \u2462\u8bc1\u660e\n\u8bbe\u7528\u8d2a\u5fc3\u7b97\u6cd5\u5f97\u51fa\u7684\u89e3\u4e3a$ans_1$ \u3002    \n\u5047\u8bbe\u5b58\u5728\u53e6\u4e00\u4e2a\u65b9\u6848\u4f7f\u5f97\u89e3$ans_2<ans_1$ \u3002    \n\u8fd9\u4e00\u65b9\u6848\u81f3\u5c11\u6709\u4e00\u6761\u8fb9$edge$\u4e0e\u8d2a\u5fc3\u7b56\u7565\u4e0d\u540c\u3002     \n\u8bbe\u8fd9\u6761\u8fb9\u8fde\u63a5$i,j$ 2\u4e2a\u70b9\uff0c\u4ee3\u4ef7\u4e3a$x$\u3002\n\n\u82e5\u5728\u8d2a\u5fc3\u7b56\u7565\u4e2d$i,j$\u4e0d\u8fde\u901a\uff0c\u5219\u8bf4\u660e\u5728$edge$\u51fa\u73b0\u4e4b\u524d\u5df2\u7ecf\u5b58\u5728\u53e6\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97\u8054\u901a\u5757\u51cf\u5c111\u4e86\uff0c\u7531\u4e8e\u8fb9\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\uff0c\u5c06\u8fd9\u4e2a\u65b9\u6848\u6362\u6210\u8d2a\u5fc3\u7b56\u7565\u4e0d\u4f1a\u8ba9\u7ed3\u679c\u53d8\u5dee\u3002\n\n\u82e5\u5728\u8d2a\u5fc3\u7b56\u7565\u4e2d$i,j$\u8054\u901a\uff0c\u5219\u8bf4\u660e\u5728$edge$\u51fa\u73b0\u524d\u5df2\u7ecf\u5b58\u5728\u4e00\u79cd\u8fde\u8fb9\u65b9\u5f0f\u4f7f\u5f97$i,j$\u8054\u901a\uff0c\u540c\u7406\uff0c\u6362\u6210\u8d2a\u5fc3\u7b56\u7565\u4e0d\u4f1a\u4f7f\u7ed3\u679c\u53d8\u5dee\u3002\n \n## \u2463\u6700\u5c0f\u751f\u6210\u6811\n\u7b97\u6cd5\u5b9e\u73b0\u7684\u8fc7\u7a0b\u5f88\u50cf$Kruscal$\u7684\u8fc7\u7a0b\uff0c\u90a3\u5b83\u4e0e$MST$\u6709\u4ec0\u4e48\u5173\u7cfb\u5417\uff1f    \n\n\u5bf9\u4e8e$x$\u4e2a\u70b9\u7684\u8054\u901a\u5757\u6765\u8bf4\uff0c\u53ea\u9700\u8981$x-1$\u6761\u8fb9\u5c31\u53ef\u4ee5\u8054\u901a\uff0c\u8d2a\u5fc3\u7b56\u7565\u4e5f\u4fdd\u8bc1\u4e86\u8fd9\u4e00\u70b9\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u9897\u6811\u3002\u8ba9\u8fd9$k$\u4e2a\u8054\u901a\u5757\u7684\u603b\u6743\u503c\u6700\u5c0f\uff0c\u5373\u8ba9\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u6743\u503c\u548c\u6700\u5c0f\uff0c\u8fd9\u5c31\u662f$k$\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\u5f53$k=1$\u65f6\uff0c\u5c31\u662f\u539f\u672c\u7684\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u4e86\u3002\n## \u2464AC\uff01\n\u4ee3\u7801\u4e0d\u7ed9\u4e86\uff0c\u90fd\u662f\u6a21\u677f\u3002   \n\u89c9\u5f97\u597d\u5c31\u70b9\u4e2a\u8d5e\u5457$QAQ$\u3002",
        "postTime": 1572144090,
        "uid": 25862,
        "name": "xzlhxc_ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u7b80\u5355\u7684\u6700\u5c0f\u751f\u6210\u6811\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\n\n\u8fd9\u9053\u9898\u76ee\u5c31\u662f\u95ee\u600e\u4e48\u7528\u6700\u5c0f\u7684\u8d39\u7528\u8fde\u6210K\u4e2a\u8054\u901a\u5757\n\n\u800c\u6700\u5c0f\u751f\u6210\u6811\u662f\u7528n-1\u6761\u8fb9\u6700\u5c0f\u8d39\u7528\u7684\u8fde\u6210\u4e00\u4e2a\u8054\u901a\u5757\n\n\u6709\u76f8\u901a\u4e4b\u5904\u54e6\n\n\u4e0b\u9762\u7684\u5927\u4f6c\u6709\u7684\u8bf4\u5efaK\u4e2a\u6700\u5c0f\u751f\u6210\u6811\n\n\u6211\u7684\u65b9\u6cd5\u662f\u5148\u5efa\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5220\u53bbk-1\u6761\u8fb9 \u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u5f62\u6210K\u4e2a\u8054\u901a\u5757\u4e86\n\n\u8d2a\u5fc3\u7684\u6211\u4eec\u80af\u5b9a\u662f\u5220\u53bb\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u5927\u7684k-1\u6761\u8fb9\n\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u8bdd\u7528kruskal\u5c31\u53ef\u4ee5\u4e86\u3002\u5c31\u662f\u628a\u8fb9\u6743\u6392\u5e8f\u518d\u7528\u5e76\u67e5\u96c6\n\n### **P\u515a\u798f\u5229\uff01\uff01**\n```\nvar\n  point,a1,a2,que,tot,i,j,m,n,k,p:longint;\n  father,ans,x,y,w:array[0..10005]of longint;\nprocedure qs(l,r:longint);//\u5feb\u6392\nvar\n  i,j,mid,a1:longint;\nbegin\n  i:=l; j:=r;\n  mid:=w[(l+r) div 2];\n  repeat\n    while w[i]<mid do inc(i);\n    while w[j]>mid do dec(j);\n    if not(i>j) then\n      begin\n        a1:=w[i]; w[i]:=w[j]; w[j]:=a1;\n        a1:=x[i]; x[i]:=x[j]; x[j]:=a1;\n        a1:=y[i]; y[i]:=y[j]; y[j]:=a1;\n        inc(i); dec(j);\n      end;\n  until i>j;\n  if i<r then qs(i,r);\n  if l<j then qs(l,j);\nend;\nfunction find(t:longint):longint;//\u8fd9\u91cc\u7528\u4e86\u8def\u5f84\u538b\u7f29\nbegin\n  if father[t]=t then exit(t)\n  else\n    begin\n      father[t]:=find(father[t]);\n      find:=father[t];\n    end;\nend;\nbegin\n  readln(n,m,k);\n  for i:=1 to m do\n    readln(x[i],y[i],w[i]);\n  if k>n then//\u5982\u679c\u4e91\u4e0d\u591f\u8fde\u6210K\u4e2a\u68c9\u82b1\u7cd6\n    begin\n      writeln('No Answer');\n      exit;\n    end;\n  qs(1,m);//\u597d\u7fa1\u6155\u4f60\u4eecC++\u554a\n  for i:=1 to n do father[i]:=i;\n  for i:=1 to m do\n    begin\n      a1:=find(x[i]); a2:=find(y[i]);\n      if a1<>a2 then\n        begin\n          father[a1]:=a2;\n          inc(tot); que:=que+w[i];//\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u7684\u603b\u6743\u503c\n          ans[tot]:=w[i];//\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u79cd\u7528\u4e86\u54ea\u4e9b\u8fb9\u6743\n        end;\n      if tot=n-1 then break;\n    end;\n  if k<>1 then\n  for i:=n-1 downto 1 do\n    begin\n      que:=que-ans[i]; inc(point);\n      if point=k-1 then break;\n    end;\n  writeln(que);\nend.\n```",
        "postTime": 1531910920,
        "uid": 39488,
        "name": "\u56af\u5440\u56af\u5440",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "1.\u7531\u4e8e\u662f\u6709\u6743\u503c\u7684\u4e00\u4e2a\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\u3002\u7531\u4e8e\u8981\u7b97\u51fa\u6700\u5c0f\u7684\u548c\uff0c\u6240\u4ee5\u5148\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u5c06\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u653e\u5728\u961f\u9996\u3002\u7531\u4e8e\u8981\u5206\u6210K\u4efd\uff0c\u603b\u6570\u4e3aN\uff0c\u6240\u4ee5\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\uff08N\u2013\uff09\u3002\u5982\u679cN\u7684\u5927\u5c0f\u6070\u597d\u7b49\u4e8eK\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u5206\u6210\u4e86K\u4efd\uff0c\u5269\u4e0b\u7684\u6ca1\u5728\u5e76\u67e5\u96c6\u91cc\u7684\u90fd\u662f\u6743\u503c\u5927\u7684\u3002\n\n2.\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<iostream>\n#include<queue>\nusing namespace std;\ninline int read()//\u5feb\u8bfb\uff0c\u76f8\u5f53\u4e8ecin\uff0c\u5927\u5bb6\u53ef\u4ee5\u5ffd\u7565~ \n{\n    int p,data=0;\n    char ch=0;\n    while((ch!='-')&&ch<'0'||ch>'9') ch=getchar();\n    if(ch=='-')\n    {\n        p=-1;\n        ch=getchar();\n    }\n    else\n    {\n         p=1;\n    } \n    while(ch>='0'&&ch<='9')\n    {\n     data=data*10+ch-'0';\n     ch=getchar();\n    }     \n    return data*p;\n}\nint pre[1100];//\u7528\u6765\u5b58\u50a8i\u7684\u7956\u7236\u662f\u8c01 \nstruct value\n{\n    int j,k,l;\n}val[11000];\nint n,m,k;\nint a,b,c;\nint cmp(value x,value y)\n{\n    return x.l<y.l;\n}\nint tot=0;\nint find(int q)//\u4e00\u4e2a\u641c\u7d22\u64cd\u4f5c\uff0c\u7528\u6765\u627e\u51fa\u7956\u7236\u662f\u8c01\u3002\n{\n    if(pre[q]==q) return q;\n    pre[q]=find(pre[q]);//\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6 \n    return pre[q];\n} \nint main()\n{\n    n=read();\n    m=read();\n    k=read();\n    for(int i=1;i<=n;i++)\n    {\n        pre[i]=i;//\u5e76\u67e5\u96c6\u306e\u521d\u59cb\u5316\u3002 \n    }\n    for(int i=1;i<=m;i++)\n    {\n        a=read();\n        b=read();\n        c=read();\n        val[i].j=a;\n        val[i].k=b;\n        val[i].l=c;//\u5feb\u8bfb233\uff0c\u7b2c\u4e00\u6b21\u7528\u3002 \n    }\n    sort(val+1,val+m+1,cmp);//\u5c06\u6743\u503c\u8fdb\u884c\u6392\u5e8f\u3002 \n    for(int i=1;i<=m;i++)\n    {\n        if(find(val[i].j)!=find(val[i].k))//\u5982\u679c\u7956\u7236\u4e0d\u662f\u540c\u4e00\u4e2a\uff0c\u90a3\u4e48\u5c06\u5176\u52a0\u5165\u540c\u4e00\u4e2a\u96c6\uff0c \n        {\n            pre[find(val[i].j)]=find(val[i].k);//\u4f7f\u4ed6\u4eec\u7684\u7956\u7236\u6210\u4e3a\u540c\u4e00\u4e2a \n            n--;//\u840c\u840c\u7684\u5145\u5f53\u8ba1\u6570\u541b \n            tot+=val[i].l;\n        }\n        if(n==k)//\u5982\u679c\u8ba1\u6570\u541b\u7b49\u4e8ek\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u5df2\u7ecf\u5206\u6210\u4e86k\u79cd\uff0c\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5c0f\u503c\uff0c \u90a3\u4e48\u53ef\u4ee5\u7ed3\u675f\u7b97\u6cd5\u4e86 \n        {\n            cout<<tot;\n            return 0;\n        }\n    }\n    cout<<\"No Answer\";//\u5982\u679c\u65e0\u6cd5\u6210\u4e3aK\u7ec4\uff0c\u8f93\u51faNO ANSWER \n    return 0;\n}\n```",
        "postTime": 1501310263,
        "uid": 35353,
        "name": "\u4e91\u96fe\u7e41\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u5c06\u56fe\u8f6c\u5316\u4e3a\u4e3a $k$ \u4e2a\u751f\u6210\u6811\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u5c06\u56fe\u8f6c\u5316\u4e3a $k$ \u4e2a\u751f\u6210\u6811\uff0c\u9700\u8981\u8fde $n - k$ \u6761\u8fb9\uff0c\u6240\u4ee5\u5c06 Kruskal \u7684\u5224\u65ad `if (++cnt == n - 1)` \u6539\u4e3a `if (++cnt == n - k)`\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAX_N = 1000;\nconst int MAX_M = 10000;\nconst int MAX_K = 10;\n\nstruct Edge {\n\tint u, v, w;\n};\n\nint N, M, K;\nEdge edges[MAX_M + 1];\n\nint p[MAX_N + 1];\nint find(int x) {\n\treturn p[x] == x ? x : p[x] = find(p[x]);\n}\n\nint main() {\n\tcin >> N >> M >> K;\n\tfor (int i = 1; i <= M; ++i) {\n\t\tcin >> edges[i].u >> edges[i].v >> edges[i].w;\n\t}\n\t\n\tsort(edges + 1, edges + M + 1, [](Edge a, Edge b) { return a.w < b.w; });\n\t\n\tfor (int i = 1; i <= N; ++i) {\n\t\tp[i] = i;\n\t}\n\t\n\tint cnt = 0, res = 0;\n\tfor (int i = 1; i <= M; ++i) {\n\t\tEdge &e = edges[i];\n\t\tint pu = find(e.u), pv = find(e.v);\n\t\tif (pu != pv) {\n\t\t\tp[pu] = pv;\n\t\t\tres += e.w;\n\t\t\tif (++cnt == N - K) {\n\t\t\t\tcout << res << endl;\n\t\t\t\texit(0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcout << \"No Answer\" << endl;\n}\n```",
        "postTime": 1572423875,
        "uid": 218817,
        "name": "Suyun",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u633a\u88f8\u7684\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\u679c\u65adKruskal\uff0c\u8dd1\u5f97\u5feb\uff0c\u7a7a\u95f4\u5c0f\u3002\n\u4ee3\u7801\u5982\u4e0b\uff0c\u6ce8\u89e3\u5728\u884c\u540e\u9762\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5000005;\nint m,n,prt[maxn],ans=0,q;\nstruct edge{int x,y,z;}e[maxn];//\u4f2a\u524d\u5411\u661f\uff0c\u56e0\u4e3a\u4e0b\u9762\u8981\u6392\u5e8f\uff0c\u6240\u4ee5\u7528\u8fb9\u6ca1\u4ec0\u4e48\u7528\u5176\u5b9e\nbool cmp(edge x,edge y){return x.z<y.z;}//\u7ed3\u6784\u4f53\u5feb\u6392\nint find(int x)//\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6\n{return prt[x]==x?x:prt[x]=find(prt[x]);}\nvoid kruskal()\n{\n    int k=n;//k\u4e3a\u8054\u901a\u5feb\uff0c\u4e5f\u5c31\u662f\u4e91\u6735\u7684\u6570\u91cf\n    for(int i=1;i<=n;i++)prt[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for(int i=1;i<=m;i++)//\u4ece\u5934\u904d\u5386\u6700\u5c0f\u7684\u8fb9\u6743\uff0c\u628a\u5b83\u52a0\u5230\u6811\u4e2d\n    {\n        int fa=find(e[i].x);\n        int fb=find(e[i].y);\n        if(fa!=fb)\n        {\n            ans+=e[i].z;\n            prt[fa]=fb;\n            k--;//\u5408\u5e76\u4e00\u6b21\uff0c\u8054\u901a\u5feb\u6570\u91cf\u51cf\u5c11\u4e00\u4e2a\n            if(k==q)//\u5f53\u8054\u901a\u5feb\u6570\u91cf\u7b49\u4e8e\u6240\u8981\u6c42\u7684\u6570\u91cf\n            break;//\u7ed3\u675f\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    if(n<q){printf(\"No Answer\");return 0;}//\u5982\u679c\u4e91\u6735\u6570\u91cf\u5c0f\u4e8e\u6240\u9700\u8054\u901a\u5feb\u6570\u91cf\uff0c\u76f4\u63a5\u7ed3\u675f\n    for(int i=1;i<=m;i++)\n    scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z);\n    sort(e+1,e+m+1,cmp);\n    kruskal();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u6c42\u8fc7QAQ",
        "postTime": 1544341368,
        "uid": 39150,
        "name": "\u859b\u5b9a\u8c14\u7684\u9c7c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ck\u4e2a\u68c9\u82b1\u7cd6\u4e2d\u6709k-1\u4e2a\u662f\u5355\u4e2a\u7684\u4e91\uff0c\u56e0\u4e3a\u5355\u4e2a\u7684\u4e91\u5c31\u662f\u4e0d\u8981\u82b1\u8d39\u7684\uff0c\u6240\u4ee5\u751f\u6210\u6811\u5c31\u662f\u5728\u5269\u4e0b\u7684n-k+1\u6735\u4e91\u4e2d\u4ea7\u751f\uff0c\u7136\u540e\u8fd9n-k+1\u6735\u4e91\u6700\u591a\u7528n-k+1-1\u6761\u8fb9\u8fde\u63a5\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u5176\u5b9e\u5c31\u662fkruskal\u9009\u51fan-k+1-1\u6761\u8fb9\u7684\u6700\u5c0f\u4ef7\u503c\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u88f8\u7684kruskal\u4e86\uff0c\u7136\u540e\u7531\u4e8e\u5f88\u4e45\u6ca1\u6253kruskal\u4e86\uff0c\u6211\u7adf\u7136\u81ea\u4f5c\u806a\u660e\u7684\u52a0\u4e86vis\u6570\u7ec4\uff0c\u7136\u540e\u5149\u8363\u7206\u96f6\uff0c\u6700\u540e\u5220\u53bbvis\uff0c\u53ea\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u5c31\u77ac\u95f4AC\u4e86\n\n    #include<cstdio>\n    #include<cstring>\n    #include<iostream>\n    #include<algorithm>\n    #include<cmath>\n    #include<cstdlib>\n    #define maxn 10005\n    using namespace std;\n\n    struct edge{\n        int  u,v,w;\n    }e[2*maxn];\n\n    int n,m,k,pos,tot,ans;\n    int head[maxn],fa[maxn];\n\n    int read(){\n        int xx=0,ff=1;char ch=getchar();\n        while(ch<'0'||ch>'9'){if(ch=='-')ff=-1;ch=getchar();}\n        while(ch>='0'&&ch<='9'){xx=xx*10+ch-'0';ch=getchar();}\n        return xx*ff;\n    }\n\n    void adde(int u,int v,int w){\n        e[++pos].u=u;\n        e[pos].v=v;e[pos].w=w;\n    }\n\n    int comp(const void*a,const void*b){\n        return (*(struct edge*)a).w>(*(struct edge*)b).w?1:-1;\n    }\n\n    int find_(int x){\n        if(fa[x]==x)return fa[x];\n        return fa[x]=find_(fa[x]);\n    } \n\n    int main(){\n        scanf(\"%d\",&n);m=read();k=read();\n        for(int i=1;i<=m;i++){\n            int u,v,w;\n            u=read();v=read();w=read();\n            adde(u,v,w);\n        }    \n        if(k>n){\n            printf(\"No Answer\");return 0;\n        }\n        for(int o=1;o<=n;o++)\n            fa[o]=o;\n        qsort(e,m+1,sizeof(e[0]),comp);\n        for(int i=1;i<=m;i++){\n            int u=e[i].u,v=e[i].v;\n            int fu=find_(u);int fv=find_(v);\n            if(fu!=fv){\n                fa[fu]=fv;\n                tot++;vis[fv]=1;ans+=e[i].w;\n            }\n            if(tot>=n-k+1-1){\n                printf(\"%d\",ans);return 0;\n            }\n        }\n        printf(\"No Answer\");\n    }",
        "postTime": 1534120286,
        "uid": 29771,
        "name": "\u4fe1\u606f\u6280\u672f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\u63cf\u8ff0\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u5370\u8c61\u5f88\u53ef\u80fd\u88ab\u9898\u76ee\u5f15\u5bfc\u5230\u201c\u6700\u5c0f\u68ee\u6797\u201d\u7684\u65b9\u5411\u4e0a\u3002\n\n\u4f46\u5f88\u5feb\u6211\u4eec\u5c31\u53d1\u73b0\u4e86\u6c42\u201c\u6700\u5c0f\u68ee\u6797\u201d\u7684\u4e0d\u5408\u7406\u6027:\u5728\u4e0d\u786e\u5b9a\u68ee\u6797\u91cc\u6bcf\u68f5\u6811\u7684\u5177\u4f53\u60c5\u51b5\uff08\u5982\u9ad8\u5ea6\u3001\u8282\u70b9\u6570\u7b49\uff09\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5b58\u5728\u6307\u6570\u7206\u70b8\u7684\u642d\u914d\u65b9\u6cd5\u3002\n\n\u518d\u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u7b80\u5316\u65b9\u6cd5\u2014\u2014\u751f\u6210**\u4e00\u68f5**\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u4e14\u4fdd\u8bc1\u5176\u5b83\u6240\u6709\u7684\u6811\u90fd\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n    int u,v,w;\n    bool operator <(edge n)const{\n         return w<n.w;\n    }\n};\nvector<edge>v;\nint n,m,k;\nint fa[1000+10];\nint getfa(int a){return fa[a]==a?a:fa[a]=getfa(fa[a]);}\nbool eql(int a,int b){return getfa(a)==getfa(b);}\nvoid uni(int a,int b){fa[getfa(a)]=getfa(b);}\nint main(){\n    cin>>n>>m>>k;\n    if(k>n){\n        cout<<\"No Answer\\n\";\n        return 0;\n    }\n    for(int i=1;i<=n;i++) fa[i]=i;\n    for(int i=1;i<=m;i++){\n        register int fm,to,w;\n        scanf(\"%d%d%d\",&fm,&to,&w);\n        v.push_back((edge){fm,to,w});\n    }\n    sort(v.begin(),v.end());\n    int cnt=0,totfee=0;\n    for(int i=0;i<v.size()&&cnt<n-k;i++){\n        if(!eql(v[i].u,v[i].v)){\n            uni(v[i].u,v[i].v);\n            cnt++,totfee+=v[i].w;\n        }\n    }\n    cout<<totfee;\n    return 0;\n}\n\n```",
        "postTime": 1513604521,
        "uid": 38283,
        "name": "Dog_Two",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u9898\u7b2c\u4e00\u773c\u60f3\u5230\u7684\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u4ed6\u6709k\u4e2a\u6811\uff0c\u90a3\u600e\u4e48\u529e\u90a3\uff1f\u53ef\u4ee5\u8d2a\u5fc3\u4e00\u4e0b\u3002\u9996\u5148\u5efa\u56fe\uff0c\u5c06\u6ca1\u6709\u4efb\u4f55\u8fb9\u5f97\u70b9\u7684\u4e2a\u6570\u8bb0\u5f55\u4e0b\u6765\uff08kx\uff09\uff0c\u8fd9\u4e9b\u70b9\u81ea\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u9700\u8981\u518d\u5efak-kx\u4e2a\u6811\u3002\n\n\u9996\u5148\u5efa\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff08\u5171tail\u4e2a\u8fb9\u5b58\u5165team\u3010\u3011\u4e2d\uff09\uff0c\u90a3\u4e48\u5efak-kx\u4e2a\u6811\u9700\u8981\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u62ff\u8d70k-kx+1\u4e2a\u8fb9\u3002\u56e0\u4e3a\u8981\u53d6\u6700\u5c0f\u82b1\u8d39\uff0c\u6240\u4ee5\u4ece\u6700\u5927\u7684\u8fb9\u51cf\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<string>\n#include<queue>\nusing namespace std;\nint n,m,k,ta,f[100001],team[1000001],tail,kx,sum;\nint exist[10001];\nstruct re\n{\n    int next,w,t,s,head;\n}e[10001*4];\nvoid build(int x,int y,int z)\n{\n    e[++ta].w=z;\n    e[ta].t=y;\n    e[ta].s=x;\n    e[ta].next=e[x].head;\n    e[x].head=ta;\n}\nbool cmp(re a,re b)\n{\n    return a.w<b.w;\n}\nint find(int x)\n{\n    if(f[x]==x) return x;\n    return f[x]=find(f[x]);\n}\nvoid add(int a,int b)\n{\n    int ux,uy; ux=find(a); uy=find(b);\n    f[ux]=uy;\n}\nint main()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;++i)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        exist[a]=exist[b]=1;\n        build(a,b,c);\n        build(b,a,c);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        f[i]=i;\n        if(exist[i]==0)\n        ++kx;\n    }\n    k-=kx;\n    sort(e+1,e+ta+1,cmp);\n    for(int i=1;i<=ta;++i)\n    {\n        if(find(e[i].s)!=find(e[i].t))\n        {\n            add(e[i].s,e[i].t);\n            team[++tail]=i;\n            sum+=e[i].w;\n        }\n    }\n    for(int i=tail;i>(tail-k+1);--i)\n    {\n        sum-=e[team[i]].w;\n    }\n    if(n<(kx+k)||(kx+1)>k+kx)\n    cout<<\"No Answer\";\n    //\u5982\u679c\u70b9\u5c11\u4e8ek\u6216\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u5927\u4e8ek\u5219\u4e0d\u6210\u7acb\u3002\n    else\n    cout<<sum;\n    return 0;\n}\n```",
        "postTime": 1513391460,
        "uid": 37488,
        "name": "ghmgjf",
        "ccfLevel": 0,
        "title": "1195\u53e3\u888b\u7684\u5929\u7a7a"
    },
    {
        "content": "\u6ca1\u6709\u4eba\u7528vector?\u90a3\u6211\u53d1\u4e00\u4e2a\u7528vector\u5b9e\u73b0\u7684Kruskai\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#define M 1000\nusing namespace std;\nint n,m,x,y,l,k,fa[1005],mst,che;\nstruct Tokyo{\n    int u,v,w;\n};//\u5b58\u8fb9\u7684\u7ed3\u6784\u4f53\nvector<Tokyo>g;//\u5b58\u8fb9\ntypedef vector<Tokyo>::iterator ite;//\u91cd\u65b0\u7ed9\u8fed\u4ee3\u5668\u547d\u540d\nbool operator <(const Tokyo &a,const Tokyo &b)//\u6bd4\u8f83\u89c4\u5219\uff0c\u4ece\u5c0f\u5230\u5927\u6392\n{\n    return a.w<b.w;\n```\n}//\u5e76\u67e5\u96c6\u51fd\u6570\n```cpp\nint Find(int _x_)\n{\n    if(fa[_x_]!=_x_) fa[_x_]=Find(fa[_x_]);\n    return fa[_x_];\n}\nvoid Union(int _x,int _y)\n{\n    int x_=Find(_x);\n    int y_=Find(_y);\n    if(x_!=y_) fa[y_]=x_;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&l);\n        g.push_back((Tokyo){x,y,l});//\u52a0\u8fb9\n    }\n    for(int i=1;i<=n;i++) fa[i]=i;//\u521d\u59cb\u5316\n    sort(g.begin(),g.end());//\u6392\u5e8f\n    for(ite it=g.begin();it!=g.end();it++)\n    {\n        if(Find(it->u)!=Find(it->v))\n        {\n            Union(it->u,it->v);\n            mst+=it->w;\n            che++;\n        }\n        if(che==n-k)\n        {\n            printf(\"%d\",mst);\n            return 0;\n        }\n    }\n    printf(\"No Answer\");\n    return 0;\n}\n```",
        "postTime": 1509714967,
        "uid": 40482,
        "name": "richardchen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u8bf4\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u505a\u6cd5...\n\n\u5148\u627e\u51fa\u56fe\u4e0a\u6240\u6709\u7684\u8fde\u901a\u5b50\u56fe\uff1b\u5728\u6bcf\u4e2a\u5b50\u56fe\u91cc\u5404\u8dd1\u4e00\u904dkruskal\uff1b\u7136\u540e\u6839\u636e\u5b50\u56fe\u7684\u4e2a\u6570\u5224\u65ad\u662f\u5426\u6709\u89e3\u4ee5\u53ca\u9700\u8981\u5220\u8fb9\u3002\n\n\n### \u8fc7\u7a0b\u5982\u4e0b\n\n\n1. \u65e0\u5411\u56fe\uff0c\u76f4\u63a5dfs\u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0fN\\_cc[i]\u4ee5\u53ca\u603b\u4e2a\u6570tot\u3002\u6ce8\u610f\u4e00\u8fb9\u641c\u7d22\u4e00\u8fb9\u8f6c\u5b58\u8fb9\n\n\n2. \u5224\u65adtot\u662f\u5426\u5927\u4e8ek\u3002\u5982\u679c\u5927\u4e8e\uff0c\u8f93\u51faNo Answer\uff0c\u5426\u5219\u5f00\u59cbKruskal\n\n\n3. \u5982\u679ctot<k\uff0c\u610f\u5473\u7740\uff0c\u9700\u8981\u526a\u65ad\u4e00\u4e9b\u6811\u8fb9\u3002\u4e3a\u4e86\u4fdd\u8bc1\u4ee3\u4ef7\u548c\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u6211\u4eecsort\u4e00\u904d\u6811\u4e0a\u7684\u8fb9\uff0c\u4ece\u5927\u5f80\u5c0f\u5220\uff0c\u663e\u7136\u5171\u9700\u5220\u9664k-tot\u6761\u8fb9\n\n\n\u590d\u6742\u5ea6\u4e5f\u662fO(M)\u7684\u3002\u5e38\u6570\u7565\u5927\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u8db3\u4ee5a\u6389\u6b64\u9898\u4e86\u3002\u3002\u3002\u5404\u53d8\u91cf\u4f5c\u7528\u3002\u3002\u3002\u89c1\u4ee3\u7801\u5427\u3002\u3002\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 100050\nint n,m,k,cnt,x,y,w,tot,euse,ans,sum;//sum\u5df2\u7ecf\u505a\u5b8c\u7684\u70b9\u6570\uff1beuse\u7528\u4e8e\u8f6c\u5b58\u8fb9\u65f6\u7684\u8ba1\u6570\uff1btot\u5b50\u56fe\u603b\u6570\uff1b\nint head[10050],cc[10050],fa[10050],E_cc[10050],N_cc[10050];//E_cc\u7b2ci\u4e2a\u5206\u91cf\u7684\u603b\u8fb9\u6570\uff1bN_cc\u7b2ci\u4e2a\u5206\u91cf\u603b\u70b9\u6570;\nint tree[MAXN],tr_cnt;\nint zz;\nstruct Edge{\n    int from,to,next,val;\n}e[MAXN],val[MAXN];//val\u987a\u5e8f\u5b58\u50a8\u6bcf\u4e2a\u5206\u91cf\u7684\u8fb9\u4fbf\u4e8esort; \nvoid addEdge(int u,int v,int w){\n    e[++cnt].from=u;\n    e[cnt].to=v;\n    e[cnt].val=w;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nbool cmp(Edge a,Edge b){\n    return a.val<b.val;\n}\nbool cmpp(int a,int b){\n    return a>b;\n}\nvoid dfs(int x){\n    cc[x]=tot;\n    N_cc[tot]++;\n    for(int i=head[x];i;i=e[i].next){\n        val[++euse].val=e[i].val;\n        val[euse].from=e[i].from;\n        val[euse].to=e[i].to;\n        E_cc[tot]++;\n        if(!cc[e[i].to])\n            dfs(e[i].to);\n    }\n}\nint find(int x){\n    if(fa[x]==x)    return x;\n    return fa[x]=find(fa[x]);\n}\nvoid Kruskal(int c){\n    if(N_cc[c]==1){\n        return;\n    }\n    int l=1+sum,r=l+E_cc[c];\n    sort(val+l,val+r,cmp);\n    for(int i=l;i<=r;i++){\n        x=find(val[i].from),y=find(val[i].to);\n        if(x!=y){\n            ans+=val[i].val;\n            fa[x]=y;\n            tree[++tr_cnt]=val[i].val;\n            zz++;//zz\u8bb0\u5f55Kruskal\u7528\u4e86\u591a\u5c11\u6761\u8fb9\n        }\n    }\n    sum+=E_cc[c];\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x,&y,&w);\n        addEdge(x,y,w),addEdge(y,x,w);\n    }\n    for(int i=1;i<=n;i++)\n        if(cc[i]==0){\n            tot++;\n            dfs(i);\n        }\n    if(tot>k)    printf(\"No Answer\");\n    else{\n        for(int i=1;i<=n;i++)\n            fa[i]=i;\n        for(int i=1;i<=tot;i++)\n            Kruskal(i);//\u5206\u522b\u5bf9tot\u4e2a\u5b50\u56fe\u505a\u751f\u6210\u6811\uff1b\n        if(tot<k){\n            int need=k-tot;\n            sort(tree+1,tree+zz+1,cmpp);\n            for(int i=1;i<=zz;i++)\n                printf(\"%d:\",tree[i]);\n            printf(\"\\n***********\\n\");\n            for(int i=1;i<=need;i++)\n                ans-=tree[i];\n        }\n        printf(\"%d\",ans);\n    }\n}\n```",
        "postTime": 1504882491,
        "uid": 41569,
        "name": "IceWa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n1.\u8fd9\u9053\u9898\u9898\u610f\u662f\u8ba9\u4f60\u5728\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u7279\u5224\uff0c\u5224\u65ad\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u7c98\u5408\u8282\u70b9\n\n2.\u4e8e\u9898\u610f\uff0c\u6211\u4eec\u4fbf\u5728\u666e\u901a\u7684kruskal\u7b97\u6cd5\u505a\u70b9\u5c0f\u4fee\u6539\uff0c\u76f4\u63a5\u5728\u5236\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u5224\u65ad\u8282\u70b9\u6570\u4e0eK\u503c\u5f97\u5173\u7cfb\u5373\u53ef\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\u53ca\u90e8\u5206\u6ce8\u91ca\n\n\n\n\n\n\n\n    \n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint en,f[10009],m,n,siz,k;\nstruct edge{\n    int s,e,d;\n}ed[10009];\nvoid add_edge(int s,int e,int d){\n    en++;\n    ed[en].s = s;ed[en].e = e; ed[en].d = d; \n}\nbool operator < (const edge &a,const edge &b){\n    return a.d < b.d;\n}\nint getf(int now){\n    if(f[now] == now)return now;\n    else return f[now] = getf(f[now]);\n}\nint kruskal(){\n    sort(ed+1,ed+1+m);\n    for(int a = 1; a <= n;a++)f[a] = a;\n    int ans = 0;\n    siz = n;\n    for(int i = 1; i <= m; i++){\n        int f1 = getf(ed[i].s);\n        int f2 = getf(ed[i].e);\n        if(f1 != f2){\n            ans += ed[i].d;\n            siz--;                 //\u4e24\u8282\u70b9\u7c98\u5408\u4e4b\u540e\u68c9\u82b1\u7cd6\u6570\u91cf\u51cf\u4e00 \n            f[f1] = f2;\n        }\n        if(siz == k)return ans;   //\u7b26\u5408\u7b54\u6848\u8981\u6c42\uff0c\u53ef\u4ee5\u7ec4\u6210K\u4e2a\u68c9\u82b1\u7cd6 \uff0c\u5219\u8fd4\u56de\u7b54\u6848\n    }\n    return -1;                      //\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u7ec4\u6210K\u4e2a\u68c9\u82b1\u7cd6\u5219\u8fd4\u56de-1 \n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i = 1; i <= m; i++){\n        int u,v,d;\n        scanf(\"%d%d%d\",&u,&v,&d);\n        add_edge(u,v,d);\n    }\n    int ans = kruskal();\n    if(ans == -1)printf(\"No Answer\\n\");  //\u65e0\u7b54\u6848 \n    else printf(\"%d\\n\",ans);            //\u8f93\u51fa \n    return 0;\n}\n\n```",
        "postTime": 1504433575,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u4eff\u7167\u6700\u5c0f\u751f\u6210\u6811\u7684Kruskal\u7b97\u6cd5...\n\n\u5148\u628a\u8fb9\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n\u7136\u540e\u5f00\u59cb\u79cd\u6811,\u76f4\u5230\u8fd8\u5269\u4e0bK-1\u4e2a\u5b64\u7acb\u70b9\n\n\u52a0\u4e0a\u8fd9\u68f5\u6811,\u56fe\u88ab\u5206\u6210K\u90e8\u5206,\u7b26\u5408\u9898\u76ee\u8981\u6c42\n\n\u4ee3\u7801\u5982\u4e0b,\u57fa\u672c\u4e0a\u53ef\u4ee5\u5957\u7528\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\n\n\u6539\u51e0\u53e5\u8bdd\u5c31\u53ef\u4ee5\u4e86,\n\n\u52a0\u8f93\u51faNo Answer\n\n    \n    counter==n-1 \u6539\u4e3a counter==n-k\n\n#include<bits/stdc++.h>\n\nclass side\n\n{\npublic:\n\n```cpp\n    int u,v,w;          //\u8d77\u70b9 \u7ec8\u70b9 \u6743\u503c\n}e[100000];     \nint pre[100000];  \nint find(int x)\n{\n    int r=x;\n    while(r!=pre[r])r=pre[r];     // \u8def\u5f84\u538b\u7f29 \u5e76\u67e5\u96c6\n    return r;\n}\nbool join(int x,int y)\n{\n    int fx=find(x),fy=find(y);\n    if(fx!=fy)\n    {\n        pre[fx]=fy;\n        return true;\n    }\n    return false;\n}\nbool cmp(side a,side b){return(a.w<b.w);}     //\u6bd4\u8f83\u51fd\u6570\nusing namespace std;\nint main()\n{\n    int static n,m,k,counter,sum;        //\u7528static\u4e0d\u7528\u663e\u5f0f\u521d\u59cb\u5316\u4e3a0...\n    cin>>n>>m>>k;\n    for(int register i=1;i<=m;i++)         \n        cin>>e[i].u>>e[i].v>>e[i].w;\n    for(int register i=1;i<=n;i++)\n        pre[i]=i;                                          //\u521d\u59cb\u5316\n    sort(e+1,e+m+1,cmp);\n    for(int i=1;i<=m;i++)\n    {\n        if(join(e[i].u,e[i].v))\n        {\n            counter++;\n            sum+=e[i].w;\n        }\n        if(counter==n-k)\n        {\n            cout<<sum;\n            return 0;\n        }\n    }\n    cout<<\"No Answer\";        \n}\n```",
        "postTime": 1500381312,
        "uid": 36507,
        "name": "shijunfeng00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u8fb9\u6743\u5927\u7684\u8fb9\u4e0d\u8fde\u5c31\u4e0d\u4ea7\u751f\u4ee3\u4ef7\n\n\u90a3\u4e48\u5c31\u662f\u7528kruskal\u7b97\u6cd5\u628an-k\u4e2a\u6700\u5c0f\u7684\u5408\u5e76\uff0c\u5269\u4e0bk-1\u4e2a\u72ec\u7acb\uff08\u8fb9\u6743\u8f83\u5927\u7684\uff09\n\n\u90a3\u4e48\u628ak\u7f6e\u4e3an-k\uff0c\u6bcf\u6b21\u5408\u5e76k--\n\n\u8981\u662f\u5230\u6700\u540ek>0\u7684\u8bdd\u8bf4\u660e\u65e0\u6cd5\u8fde\u57cek\u4e2a\u68c9\u82b1\u7cd6\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct node{\n    int u,v,w;\n    bool operator < (const node & a)const{\n        return w < a.w;\n    }\n}edge[100005];int head[1003];\nint n,m,k;int num=0;\nvoid Add_edge(int x,int y,int z)\n{\n    edge[++num].u=x;edge[num].v=y;edge[num].w=z;\n}\nint father[1003];\nint find (int x)\n{\n    if(father[x]!=x)father[x]=find(father[x]);\n    return father[x];\n}\nvoid unionn(int x,int y){father[x]=y;}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    int a,b,c;for(int i=1;i<=n;i++)father[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        Add_edge(a,b,c);Add_edge(b,a,c);\n    }\n    k=n-k;\n    int ans=0;\n    sort(edge+1,edge+num+1);//\u628an-k\u4e2a\u6700\u5c0f\u7684\u5408\u5e76\uff0c\u5269\u4e0bk-1\u4e2a\u72ec\u7acb\uff08\u8fb9\u6743\u5927\u7684\uff09 \n    for(int i=1;i<=num;i++)\n    {\n        int u=edge[i].u,v=edge[i].v;\n        int fu=find(u),fv=find(v);\n        if(fu!=fv)\n        {    \n            ans+=edge[i].w;\n            unionn(fu,fv);\n            k--;\n        }\n        if(k==0)break;\n    }\n    if(k)puts(\"No Answer\");\n    else printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1498807770,
        "uid": 38871,
        "name": "Niko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u627e\u6700\u5c0f\u4ee3\u4ef7\u76f8\u8fde\u4e3ak\u4e2a\uff0c\u5982\u679c\u662f\u8fde\u6210\u4e00\u4e2a\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fde\u6210k\u4e2a\u5c31\u76f4\u63a5\u518d\u628a\u6700\u5c0f\u751f\u6210\u6811\u91cc\u6700\u957f\u7684k-1\u4e2a\u8fb9\u5220\u6389\u5c31\u884c\u4e86\u3002\u5982\u679c\u8fde\u5b8c\u6240\u6709\u7684\u8fb9\u90fd\u4e0d\u53cak\u68f5\u6811\u5c31\u8fde\u4e0d\u6210\u4e86\n\n20:30\u8bc4\u6d4b    44ms\n\n\u00b7\u00b7\u00b7\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,k,f[1005],now,ans,head;\nstruct data{\n    int u,v,w;\n}e[10005],t[10005];\nbool cmp(data a,data b){\n    return a.w<b.w;\n}\nint get(int a){\n    return a==f[a]?a:f[a]=get(f[a]);\n}\nbool merge(int a,int b){\n    int fa=get(a);\n    int fb=get(b);\n    if(fa!=fb){\n        f[fb]=fa;\n        return 1;\n    }\n    return 0;\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n    }\n    sort(e+1,e+1+m,cmp);\n    for(int i=1;i<=n;i++){\n        f[i]=i;\n    }\n    for(int i=1;i<=m&&now<n-1;i++){\n        if(merge(e[i].u,e[i].v)){\n            t[++now]=e[i];//\u5b58\u4e0b\u6700\u5c0f\u751f\u6210\u6811\u91cc\u7684\u8fb9\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(f[i]==i){\n            head++;\n        }\n    }\n    if(head>k){//\u770b\u80fd\u5426\u591fk\u68f5\n        printf(\"No Answer\");\n        return 0;\n    }\n    for(int i=1;i<=n-k;i++){//\u751f\u6210\u6811\u6709n-1\u6761\u8fb9\uff0c\u8981\u5220k-1\u6761\u8fb9\uff0c\u6240\u4ee5n-1-(k-1)==n-k\n        ans+=t[i].w;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1493469891,
        "uid": 33084,
        "name": "circlegg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u5e76\u4e0d\u96be\uff0c\u611f\u89c9\u548c3366\u96be\u5ea6\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u662f\u8981\u8fde\u6210K\u4e2a\u68c9\u82b1\u7cd6\u800c\u4e0d\u662f\u5c06N\u4e2a\u70b9\u8fde\u8d77\u6765\u3002\n\nKruskal\u7684\u601d\u8def\u4e3b\u8981\u662f\u5148\u4ee5\u4ee3\u4ef7\u6392\u5e8f\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8fde\u4e86\u8d77\u6765\uff0c\u6ca1\u6709\u5c31\u8fde\u8d77\u6765\uff0c\u628aans\u52a0\u4e0a\u8fd9\u4e24\u4e2a\u70b9\u8fde\u63a5\u7684\u4ee3\u4ef7\uff0c\u6700\u540e\u8f93\u51faans\u3002\n\n\u552f\u4e00\u6ce8\u610f\u7684\u662f\u6700\u540e\u7684\u90a3\u6761while\u5e94\u8be5\u5199while (f<n-k) \u800c\u4e0d\u662f while (f<n-1)\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,k,i,pre[10000],ans,f;\nstruct cloud\n{\n    int start;\n    int end;\n    int value;\n} a[100000];\nbool cmp(cloud x,cloud y)\n{\n    return x.value<y.value;\n}\nint sch(int x)\n{\n    if (pre[x]==x) return x;\n    pre[x]=sch(pre[x]);\n    return pre[x];\n}\nvoid join(int x,int y)\n{\n    pre[sch(x)]=sch(y);\n}\nint main()\n{\n    cin>>n>>m>>k;\n    for (i=1;i<=n;i++) pre[i]=i;\n    for (i=1;i<=m;i++)\n    {\n        cin>>a[i].start>>a[i].end>>a[i].value;\n    }\n    sort(a+1,a+m+1,cmp);\n    i=0;\n    while (f<n-k)\n    {\n        i++;\n        if (sch(a[i].start)!=sch(a[i].end))\n        {\n            ans+=a[i].value;\n            f++;\n            join(a[i].start,a[i].end);\n        }\n    }\n    cout<<ans;\n}\n```",
        "postTime": 1492768063,
        "uid": 12613,
        "name": "PTC06",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u6839\u636e\u9898\u9762\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u53d8\u5f62\u3002\n\n\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff0c\u4e0d\u65ad\u7684\u8fde\u8fb9\uff0c\u66f4\u65b0\u7b54\u6848\uff0c\u76f4\u5230\u5269\u4f59\u4e91\u6735\u6570\u91cf\u8fbe\u5230\u8981\u6c42\uff0c\u8f93\u51fa\u89e3\u5373\u53ef\u3002\n\n\u514b\u9c81\u65af\u5361\u5c14\u7684\u5177\u4f53\u8bc1\u660e\u8bf7\u81ea\u884cgoogle\u3002\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int maxn=1000+20,maxm=100000+20;\nstruct data{int u,v,w;};\ndata edge[maxm];\nint n,m,k,ans=0,p[maxn];\nvoid read(int &n){\n    n=0;int f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    do{\n        n=n*10+ch-'0';\n        ch=getchar();\n    }while(ch>='0' && ch<='9');\n    n=n*f;\n    return;\n}\nvoid write(int n){\n    if(n<0){\n        putchar('-');\n        n=0-n;\n    }\n    if(n>=10) write(n/10);\n    putchar((n % 10)+'0');\n    return;\n}\nbool cmp(const data &x,const data &y){\n    return x.w<y.w;\n}\nint find(int x){\n    return x==p[x]? x:p[x]=find(p[x]);\n}\nint main(){\n    read(n);read(m);read(k);\n    for(int i=1;i<=m;i++){\n        read(edge[i].u);read(edge[i].v);read(edge[i].w);\n    }\n    sort(edge+1,edge+m+1,cmp);\n    int tot=0;\n    for(int i=1;i<=n;i++) p[i]=i;\n    for(int i=1;i<=m;i++){\n        int x=find(edge[i].u);\n        int y=find(edge[i].v);\n        if(x!=y){\n            p[x]=y;\n            ans+=edge[i].w;\n            tot++;\n        }\n        if(tot==(n-k)) break;\n    }\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1476246973,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u5c31\u662f\u4e00\u4e2a\u751f\u6210\u6811\u561b\n\n\u7b49\u5230\u751f\u6210\u4e86\u6709k\u4e2a\u6811\u7684\u68ee\u6797\u65f6\u9000\u51fa\n\n\u4e5f\u5c31\u662f\u628an - 1\u6539\u4e3an - k\u7136\u540e\u7528kruskal\n\n\n\n\n\n\n\n\n\n    \n    \n    \n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nlong long n , m , k;\nlong long i , j;\nlong long now;\nlong long ans;\nstruct link\n{\n       long long x , y , cost;\n};\nint cmp( link a , link b )\n{\n    if( a.cost < b.cost )\n        return 1;\n    return 0;\n}\nint pre[ 10000 + 10 ];\nlink a[ 10000 + 10 ];\nint find( int x )\n{\n    if( pre[x] == x )\n        return x;\n    int a = x;\n    x = find( pre[x] );\n    pre[a] = x;\n    return x;\n}\nvoid merge( long long x , long long y )\n{\n    pre[ find( x ) ] = find( y );\n    return;\n}\nint main()\n{\n    scanf( \"%lld %lld %lld\" , &n , &m , &k );\n    if( k > n || n - m > k )\n    {\n        printf( \"No Answer\\n\" );\n        return 0;\n    }\n    for( i = 1 ; i <= n ; i++ )\n         pre[i] = i;\n    for( i = 0 ; i < m ; i++ )\n         scanf( \"%lld %lld %lld\" , &a[i].x , &a[i].y , &a[i].cost );\n    sort( a , a + m , cmp );\n    now = n;\n    i = 0;\n    ans = 0;\n    while( now > k )\n    {\n           if( i >= m )\n           {\n               printf( \"No Answer\\n\" );\n               return 0;\n           }\n           if( find( a[i].x ) != find( a[i].y ) )\n           {\n               merge( a[i].x , a[i].y );\n               now--;\n               ans += a[i].cost;\n           }\n           i++;\n    }\n    printf( \"%lld\\n\" , ans );\n    return 0;\n}\n```",
        "postTime": 1439015821,
        "uid": 3296,
        "name": "noip",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    },
    {
        "content": "\u4e00\u5e55\u63cf\u8ff0\u597d\u50cf\u5f88\u590d\u6742\uff0c\u5176\u5b9e\u5c31\u662f\u8fdb\u884cn-k\u6b21\u5408\u5e76\uff0c\u4f7f\u5f97\u5408\u5e76\u7684\u4ee3\u4ef7\u6700\u5c0f\n\n\u4e00\u770b\u5c31\u60f3\u5230\u4e86\u6700\u5c0f\u751f\u6210\u6811\u7684kruskal\u7b97\u6cd5\uff0c\u6bcf\u6b21\u8fdb\u884c\u4e00\u6b21\u96c6\u5408\u7684\u5e76\u64cd\u4f5c\uff0c\u5c31\u628a\u5269\u4e0b\u7684\u9700\u8981\u5408\u5e76\u7684\u6b21\u6570\u51cf\u4e00\u3002\u76f4\u52300\u7684\u65f6\u5019\uff0c\u5c31\u8bf4\u660e\u53ef\u4ee5\u5b8c\u6210\uff0c\u9000\u51fa\u7b97\u6cd5\u5e76\u8f93\u51fa\n\n\u5177\u4f53\u601d\u8def\u89c1\u7a0b\u5e8f\uff1a\n\n```cpp\nvar\n  f:array[0..5000] of int64;\n  a,b,c:array[0..100000] of int64;\n  i,n,m,k:longint;\n  ans:int64;\n  bo:boolean;\nprocedure swap(var x,y:int64);\nvar t:int64;\nbegin t:=x; x:=y; y:=t; end;\nprocedure qsort(r,l:longint);\nvar i,j:longint;\n    mid:int64;\nbegin\n  i:=r; j:=l;\n  mid:=c[random(j-i+1)+i];\n  repeat\n    while c[i]<mid do inc(i);\n    while c[j]>mid do dec(j);\n    if i<=j then\n      begin\n        swap(a[i],a[j]);\n        swap(b[i],b[j]);\n        swap(c[i],c[j]);\n        inc(i); dec(j);\n      end;\n  until i>j;\n  if i<l then qsort(i,l);\n  if r<j then qsort(r,j);\nend;//\u6839\u636e\u8def\u5f84\u7684\u957f\u77ed\u7531\u5c0f\u5230\u5927\u5feb\u6392\nfunction getfather(x:int64):int64;\nbegin\n  if f[x]=x then exit(x) else\n    f[x]:=getfather(f[x]);\n  exit(f[x]);\nend;//\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\nbegin\n  bo:=true;\n  randomize;//\u968f\u673a\u5316\u5feb\u6392\n  read(n,m,k);//\u8bfb\u5165\n  k:=n-k;//\u6c42\u9700\u8981\u5408\u5e76\u7684\u6b65\u6570\n  for i:=1 to n do f[i]:=i;\n  for i:=1 to m do read(a[i],b[i],c[i]);\n  qsort(1,m);//\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u4ee5\u4fbf\u540e\u9762\u7684\u8d2a\u5fc3\u9009\u53d6\n  for i:=1 to m do\n    begin\n      if getfather(a[i])<>getfather(b[i]) then\n        begin\n          dec(k);//\u9700\u8981\u7684\u6b65\u6570-1\n          ans:=ans+c[i];//\u589e\u52a0\u6700\u5c11\u7684\u4ee3\u4ef7\n          f[getfather(a[i])]:=f[getfather(b[i])];//\u5e76\u96c6\u5408\n          if k=0 then begin bo:=false; break; end;//\u627e\u5230\u4e86\u5c31\u6807\u8bb0\uff0c\u5e76\u9000\u51fa\u5faa\u73af\n        end;\n    end;\n  if bo then writeln('No Answer') else writeln(ans);//\u6700\u540e\u7684\u8f93\u51fa\nend.\n```",
        "postTime": 1381127175,
        "uid": 734,
        "name": "lych",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1195 \u3010\u53e3\u888b\u7684\u5929\u7a7a\u3011"
    }
]