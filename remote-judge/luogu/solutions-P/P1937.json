[
    {
        "content": "\u76f8\u4fe1\u5927\u5bb6\u90fd**\u731c**\u5f97\u5230\u89e3\u6cd5\uff1a\n\n\u5c06\u5976\u725b\u7684\u8def\u5f84\u8f6c\u5316\u4e3a\u7ebf\u6bb5\uff0c\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6309\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u82e5\u7b2c\u4e00\u5173\u952e\u5b57\u76f8\u540c\u5219\u6309\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n\u7136\u540e\u6309\u5e8f\u679a\u4e3e\u7ebf\u6bb5\uff0c\u770b\u770b\u662f\u5426\u53ef\u4ee5\u653e\uff08\u533a\u95f4\u6700\u5c0f\u503c$>0$\uff09\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u5219\u533a\u95f4\u5185\u6240\u6709\u7684\u6570$-1$\uff0c\u7b54\u6848$+1$\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\n\n\n\n------------\n\n\u7b2c\u4e00\u4e2a\u7ed3\u8bba\u8bc1\u660e\u6bd4\u8f83\u663e\u7136\uff0c\u5de6\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u53d6\u6700\u4f18(\u5047\u8bbe\u53f3\u7aef\u70b9\u5168\u90fd\u662f$r$)\u3002\n\n\uff08\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u53d6\u6240\u5360\u7528\u7684\u7a7a\u95f4\u548c\u4e00\u5b9a$\\geq$\u4ece\u5927\u5230\u5c0f\u53d6\u6240\u5360\u7528\u7684\u7a7a\u95f4\u548c\uff0c\u800c\u4e14\u4ece\u5c0f\u5230\u5927\u53d6\u5360\u7528\u7684\u533a\u95f4$\\in$\u4ece\u5927\u5230\u5c0f\u53d6\u5360\u7528\u7684\u533a\u95f4\uff09\n\n\u7136\u540e\u6211\u4eec\u8bc1\u660e\u7b2c\u4e8c\u4e2a\u7ed3\u8bba\uff0c\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u53d6\u6700\u4f18\u3002\n\n\u53ef\u4ee5\u7528\u5f52\u7eb3\u6cd5\u3002\n\n\u7b2c\u4e00\u6761\u7ebf\u6bb5\u4e00\u5b9a\u8981\u52a0\u5165\u3002\n\n\u5047\u8bbe\u5df2\u7ecf\u5230\u4e86\u7b2c$i$\u6761\u7ebf\u6bb5\uff0c\u7aef\u70b9\u4e3a$l_i,r_i$\n\n\u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0c\u76f4\u63a5\u7b97\u5165\u7b54\u6848\u3002\u8fd9\u6837\u6839\u636e\u5f52\u7eb3\u5047\u8bbe\u662f\u6700\u4f18\u7684\u3002\n\n\u4f46\u5982\u679c\u51b2\u7a81\u4e86\uff0c\u8bbe\u548c\u7b2c$j$\u6761\u7ebf\u6bb5\u51b2\u7a81\uff08\u5f53\u7136j\u4e0d\u552f\u4e00\uff09\n\n\u5982\u679c$j$\u7684\u53f3\u7aef\u70b9\u7b49\u4e8e$i$\u7684\u53f3\u7aef\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0d\u9009$i$\uff08\u521a\u624d\u7684\u7ed3\u8bba\uff09\n\n\u5426\u5219\n\n```\n -------------             j\n    ------------------     i\n\n```\n\n\u53d1\u73b0\u5982\u679c\u4e0d\u9009$j$\uff0c\u9009\u62e9$i$\uff0c\u5c31\u4f1a\u8ba9$[l_i,r_i]$\u533a\u95f4\u5168\u90e8$-1$\uff0c$[l_j,r_j]$\u5168\u90e8$+1$\n\n\u4f46\u662f\u53d1\u751f\u51b2\u7a81\u7684\u533a\u95f4\u662f$[l_i,r_j]$\uff0c\u4e4b\u540e\u8fd9\u6bb5\u533a\u95f4\u6700\u5c0f\u503c\u4f9d\u65e7\u4e3a$0$\u3002\n\n\u663e\u7136\u5982\u679c\u5269\u4e0b\u7684\u533a\u95f4\u5de6\u7aef\u70b9$\\leq l_i$\uff0c\u4e00\u5b9a\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8fd9\u548c$[l_j,l_i-1]$\u7684\u533a\u95f4$+1$\u5931\u53bb\u4e86\u6548\u679c\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u5bf9\u540e\u7eed\u7684\u5f71\u54cd\u53ef\u4ee5\u770b\u6210$[r_j+1,r_i]$\u5168\u90e8$-1$\u3002\n\n\u4f46\u5982\u679c\u4e0d\u9009$i$\u5462\uff1f\n\n\u5c31\u6beb\u65e0\u5f71\u54cd\u3002\n\n\u6240\u4ee5\u5982\u679c\u9009\u62e9$i$\uff0c\u5c31\u767d\u767d\u6d6a\u8d39\u4e86\u533a\u95f4$[r_j+1,r_i]$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u9009\uff0c\u4e00\u5b9a\u66f4\u4f18\u3002\n\n\u56e0\u6b64\u5f97\u8bc1\u3002\n\n### \u7efc\u4e0a\uff0c\u6211\u4eec\u8bc1\u660e\u4e86\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u3002",
        "postTime": 1561526519,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]\u4ed3\u914d\u7f6eBarn Allocation\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u5bb6\u90fd\u7528\u7ebf\u6bb5\u6811\uff0c\u8fd9\u91cc\u5199\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7684\u505a\u6cd5~\n\n\u9996\u5148\u6211\u4eec\u5bf9\u6240\u6709\u725b\u4ee5$a_{i}$\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u518d\u8d2a\u5fc3\u5904\u7406\u600e\u6837\u624d\u80fd\u4f7f\u7b54\u6848\u8fbe\u5230\u6700\u4f18\u3002\n\n\u5177\u4f53\u600e\u4e48\u8d2a\u5462\uff1f\n\n\u6211\u4eec\u4ece$1->n$\u626b\u4e00\u904d\uff0c\u5047\u8bbe\u6211\u4eec\u626b\u5230$i$\uff0c\u5728\u8fd9\u4e00\u4e2a\u7a7a\u95f4\u4e0a\u5df2\u7ecf\u5bb9\u7eb3\u4e86$j$\u5934\u725b\uff0c\u6211\u4eec\u628a\u6240\u6709$a_{k}=i$\u7684\u725b\u5148\u6254\u8fdb\u8fd9\u4e00\u4e2a\u7a7a\u95f4\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9\u4e2a\u7a7a\u95f4\u53ef\u4ee5\u65e0\u9650\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u961f\u5217\u91cc\u5c31\u5b58\u4e86\u53ef\u80fd\u8d85\u51fa\u7a7a\u95f4\u7684\u725b\u3002\n\n\u63a5\u7740\u6211\u4eec\u5728\u8003\u8651\u5bb9\u91cf\u95ee\u9898\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u961f\u5217\u91cc\u5df2\u7ecf\u6709$r$\u5934\u725b\u4e86\uff0c\u5982\u679c$r\\leq c_{i}$\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u548c\u8c10\u7684\u5f80\u540e\u8dd1\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u6211\u4eec\u5c31\u8981\u8003\u8651\u628a\u4e00\u90e8\u5206\u725b\u5bb0\u6389$qaq$\u3002\n\n##### \u6ce8\u610f\u5230\u6211\u4eec\u679a\u4e3e\u5230$i$\u70b9\u65f6\uff0c\u961f\u5217\u91cc\u7684\u6bcf\u4e00\u5934\u725b\u90fd\u6709\u4e00\u4e2a$b_{i}$\uff0c\u8868\u793a$b_{i}$\u4e4b\u540e\u8fd9\u5934\u725b\u5c31\u4e0d\u5360\u7a7a\u95f4\u4e86\uff0c\u800c\u5b83\u4eec\u7684$a_{i}$\u5df2\u7ecf\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u4e86\uff0c\u6211\u4eec\u53ea\u5e0c\u671b\u540e\u9762\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c3d\u53ef\u80fd\u5927\uff0c\u5373\u540e\u9762\u7684\u7a7a\u95f4\u5c3d\u53ef\u80fd\u5927\uff0c\u56e0\u6b64\u5982\u679c\u8d85\u51fa\u4e86\u7a7a\u95f4\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u5bb0\u6389\u961f\u5217\u4e2d$b_{i}$\u8f83\u540e\u7684\u725b\u3002\n\n\u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u601d\u8def\u5df2\u7ecf\u5f88\u660e\u786e\u4e86\uff0c\u5177\u4f53\u5206\u4e3a\u4e09\u6b65\uff1a\n\n1. \u6211\u4eec\u4ece$1->n$\u626b\u4e00\u904d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$i$\uff0c\u6211\u4eec\u628a\u6240\u6709$a_{i}$\u8fdb\u5165\u961f\u5217\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u5360\u7528\u7a7a\u95f4\u3002\n\n2. \u7136\u540e\u6211\u4eec\u5f00\u59cb\u8003\u8651\u961f\u5217\u5bb9\u91cf\u4e0d\u591f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5982\u679c\u6211\u4eec\u8d85\u51fa\u4e86\u5bb9\u91cf\uff0c\u6211\u4eec\u628a\u6240\u6709$b_{i}$\u5927\u7684\u5bb0\u6389\n\n3. \u63a5\u7740\u91ca\u653e\u7a7a\u95f4\uff0c\u6211\u4eec\u628a\u961f\u5217\u4e2d\u6240\u6709$b_{i}=i$\uff0c\u5373\u4e0d\u5360\u7528\u7a7a\u95f4\u4e86\u7684\u8bf7\u4e0b\u53bb\uff0c\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u663e\u7136\uff0c\u7b2c\u4e8c\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u7528\u5927\u6839\u5806\u5b9e\u73b0\u3002\n\n\u90a3\u4e48\u7b2c\u4e09\u4e2a\u6b65\u9aa4\u5462\uff1f\u6211\u4eec\u53d1\u73b0\u5927\u6839\u5806\u6ca1\u6cd5\u83b7\u53d6\u6700\u5c0f\u503c\u3002\n\n##### \u90a3\u4e48\u6211\u4eec\u5c31\u8ba9\u4ed6\u653e\u5728\u961f\u5217\u4e2d\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4$sum_{i}$\u8868\u793a\u961f\u5217\u4e2d\u6709\u591a\u5c11\u5934\u725b\u6ee1\u8db3$b_{k}=i$\uff0c\u663e\u7136\u662f\u53ef\u4ee5\u505a\u5230\u540c\u6b65\u7684\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6709\u591a\u5c11\u5934\u725b\u7684\u7a7a\u95f4\u662f\u5df2\u7ecf\u88ab\u91ca\u653e\u4e86\u7684\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u5f88\u7b80\u5355\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s[110000],t,sum[110000],ans = 0;\npair <int,int> a[110000];\npriority_queue<int> q;\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1;i <= n;i ++) scanf(\"%d\", &s[i]);\n\tfor(int i = 1;i <= m;i ++) scanf(\"%d%d\", &a[i].first, &a[i].second);\n\tsort(a + 1,a + m + 1);\n\ta[m + 1].first = n + 1;//\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u9632\u6b62\u6b7b\u5faa\u73af \n\tfor(int i = 1;i <= n;i ++)\n\t{\n\t\t//\u5206\u4e09\u6b65\uff1a \n\t\twhile(a[t + 1].first <= i) q.push(a[++ t].second),sum[a[t].second] ++;//\u8fdb\u961f \n\t\twhile(q.size() > s[i] + ans) sum[q.top()] --,q.pop();//\u5bb0\u725b \n\t\tans += sum[i];//\u7edf\u8ba1\u7b54\u6848\uff0c\u8fd9\u4e00\u4e2a\u7b54\u6848\u4e5f\u4ee3\u8868\u961f\u5217\u4e2d\u6709\u591a\u5c11\u5934\u725b\u662f\u5df2\u7ecf\u88ab\u91ca\u653e\u4e86\u7684 \n\t} \n\tprintf(\"%d\\n\", ans);\n } \n```",
        "postTime": 1540812510,
        "uid": 49719,
        "name": "__JR_\u98d8\u6447__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]\u4ed3\u914d\u7f6eBarn Allocation\u3011"
    },
    {
        "content": "## P1937 Barn Allocation G  \t\n\u5e76\u4e0d\u662f\u4e00\u773c\u7ebf\u6bb5\u6811\u9898\uff0c\u6211\u5f53\u65f6\u770b\u4e86\u597d\u51e0\u773c\uff08  \n\u8fd9\u9053\u9898\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u628a\u6bcf\u5934\u725b\u7684\u884c\u8e2a\u770b\u505a\u4e00\u6761\u7ebf\u6bb5\uff0c\u7136\u540e\u6211\u6bcf\u6b21\u6ee1\u8db3\u4e00\u5934\u725b\u7684\u8981\u6c42\u65f6\u5c31\u662f\u5c06\u8fd9\u6761\u7ebf\u6bb5\u4e0a\u7684\u70b9\u533a\u95f4\u52a0 1\u3002  \n\u5f53\u7136\u4e86\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u679a\u4e3e\u6ee1\u8db3\u90a3\u51e0\u5934\u725b\u7684\u8981\u6c42\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6211\u65e9\u5728\u521a\u5b66OI\u7684\u65f6\u5019\u5c31\u629b\u5f03\u4e86\u3002\u3002\u3002  \n\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6709\u7684\u725b\u7684\u8981\u6c42\u5f88\u96be\u6ee1\u8db3\uff0c\u800c\u53e6\u4e00\u4e9b\u725b\u7684\u8981\u6c42\u6bd4\u8f83\u5bb9\u6613\u6ee1\u8db3\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6309\u7167\u8fd9\u79cd\u5173\u952e\u5b57\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\u3002  \n\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\uff0c\u8003\u8651\u4ee5\u53f3\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\u3002  \n\u539f\u56e0\uff1f\u53f3\u7aef\u70b9\u9760\u5de6\u7684\u7ebf\u6bb5\u663e\u7136\u4e0d\u4f1a\u5bf9\u5b83\u53f3\u8fb9\u7684\u70b9\u4ea7\u751f\u4e00\u4e9b\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u5148\u9009\u5b83\u7684\u8bdd\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u5bf9\u540e\u7eed\u7684\u5f71\u54cd\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u590d\u6742\u5ea6\u624d\u53ef\u4ee5\u6ee1\u8db3 $O(n logn)$ \u3002  \n\u90a3\u4e48\uff0c\u4e00\u4e2a\u70b9\u53ea\u80fd\u88ab $a_i$ \u6761\u7ebf\u6bb5\u8986\u76d6\uff0c\u6240\u4ee5\u6211\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u524d\u67e5\u8be2\u8fd9\u6bb5\u533a\u95f4\u4e2d\u6709\u6ca1\u6709\u5f53\u524d\u5df2\u7ecf\u88ab\u8986\u76d6\u5b8c\u5168\u7684\u70b9\uff0c\u4fee\u6539\u7684\u65f6\u5019\u5c31\u5728 $Seg_{left}$ \u5230 $Seg_{right}$ \u533a\u95f4\u51cf\u4e00\uff0c\u800c\u7b54\u6848\u5c31\u662f\u6211\u52a0\u5165\u4e86\u51e0\u6761\u7ebf\u6bb5\uff0c\u5b8c\u7f8e\u89e3\u51b3\uff01  \n _**Code**_ :\n ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+20;\nstruct Segmentree{\n\tint left,right;\n\tint sum,tag;\n};Segmentree tree[maxn<<2];\nstruct Segment{\n\tint left,right;\n};Segment Seg[maxn];\nint a[maxn],ans,n,m;\nbool cmp(Segment x,Segment y)\n{\n\treturn x.right<y.right;\n}\nvoid build(long long index,long long l,long long r)\n{\n\ttree[index].left=l;\n\ttree[index].right=r;\n\tif(l==r)\n\t{\n\t\ttree[index].sum=a[l];\n\t\treturn ;\n\t}\n\tlong long mid=(l+r)>>1;\n\tbuild(index<<1,l,mid);\n\tbuild(index<<1|1,mid+1,r);\n\ttree[index].sum=min(tree[index<<1].sum,tree[index<<1|1].sum);\n}\nvoid pushdown(long long index)\n{\n\tif(tree[index].tag)\n\t{\n\t\ttree[index<<1].tag+=tree[index].tag;\n\t\ttree[index<<1|1].tag+=tree[index].tag;\n\t\ttree[index<<1].sum-=tree[index].tag;\n\t\ttree[index<<1|1].sum-=tree[index].tag;\n\t\ttree[index].tag=0;\n\t}\n}\nvoid Modify(long long index,long long l,long long r,long long k)\n{\n\tif(l<=tree[index].left&&r>=tree[index].right)\n\t{\n\t\ttree[index].sum-=k;\n\t\ttree[index].tag+=k;\n\t\treturn;\n\t}\n\tpushdown(index);\n\tlong long mid=(tree[index].left+tree[index].right)>>1;\n\tif(l<=mid)\n\t{\n\t\tModify(index<<1,l,r,k);\n\t}\n\tif(r>mid)\n\t{\n\t\tModify(index<<1|1,l,r,k);\n\t}\n\ttree[index].sum=min(tree[index<<1].sum,tree[index<<1|1].sum);\n}\nlong long Query(long long index,long long l,long long r)\n{\n\tif(l<=tree[index].left&&r>=tree[index].right)\n\t{\n\t\treturn tree[index].sum;\n\t}\n\tpushdown(index);\n\tlong long mid=(tree[index].left+tree[index].right)>>1;\n\tlong long ret=0x3f3f3f3f;\n\tif(l<=mid)\n\t{\n\t\tret=min(ret,Query(index<<1,l,r));\n\t}\n\tif(r>mid)\n\t{\n\t\tret=min(ret,Query(index<<1|1,l,r));\n\t}\n\treturn ret;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&Seg[i].left,&Seg[i].right);\n\t}\n\tsort(Seg+1,Seg+m+1,cmp);\n\tbuild(1,1,Seg[m].right);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint tmp=Query(1,Seg[i].left,Seg[i].right);\n\t\tif(tmp<=0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tModify(1,Seg[i].left,Seg[i].right,1);\n\t\t\tans++;\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1603977829,
        "uid": 226805,
        "name": "VanHelsing",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]Barn Allocation G\u3011"
    },
    {
        "content": "[\u6d1b\u8c37P1937 [USACO10MAR]Barn Allocation G](https://www.luogu.com.cn/problem/P1937)\n\n\u9898\u610f\uff1a\n\n\u6709$N$\u4e2a\u7f16\u53f7\u4e3a$1-N$\u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c$a[i]$\u3002\u7ed9\u4f60$M$\u4e2a\u6307\u4ee4\uff0c\u6bcf\u4e2a\u6307\u4ee4\u5305\u542b\u4e24\u4e2a\u6570$l,r$\u8868\u793a\u628a\u533a\u95f4$[l,r]$\u7684\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u51cf\u4e00\u3002\u8981\u6c42\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e0d\u80fd\u4e3a\u8d1f\u6570\uff0c\u6c42\u6700\u591a\u80fd\u6ee1\u8db3\u51e0\u4e2a\u6307\u4ee4\u3002\n\n\u9898\u89e3\uff1a\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u9898\"\u6d3b\u52a8\u5b89\u6392\"\u7684\u53d8\u5f0f\uff0c\u505a\u6cd5\u548c\u5b83\u4e5f\u5f88\u50cf\u3002\n\n\u5148\u8003\u8651\u628a\u6240\u6709\u7684\u6307\u4ee4\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u53f3\u7aef\u70b9\u76f8\u540c\u5219\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u904d\u5386\u6392\u5e8f\u540e\u7684\u6307\u4ee4\uff0c\u82e5\u80fd\u6ee1\u8db3(\u5373\u533a\u95f4$[l,r]$\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u96f6)\u5c31\u6ee1\u8db3\u4ed6\uff0c\u5426\u5219\u5c31\u8df3\u8fc7\u3002\n\n\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u6700\u503c\uff0c\u7528\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6b63\u786e\u6027\u8bc1\u660e\uff1a\n\n\u5982\u679c\u7ebf\u6bb5\u4e0d\u77db\u76fe\u90fd\u9009\u4e0a\u5c31\u597d\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u77db\u76fe\u7684\u7ebf\u6bb5\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o8zj2r6m.png)\n\n\u8003\u8651\u7ebf\u6bb5$[l1,r1]$\u548c$[l2,r2]$\u77db\u76fe\uff0c\u4e5f\u5c31\u662f$min([l2,r2])=1$\u3002\n\n\u6b64\u65f6\uff0c\u5982\u679c\u6211\u4eec\u9009\u62e9\u533a\u95f4$[l2,r2]$\uff0c\u5e76\u4e14\u5047\u8bbe\u8fd9\u79cd\u65b9\u6cd5\u6bd4$[l1,r1]$\u66f4\u4f18\uff0c\u90a3\u4e48\u591a\u51fa\u6765\u7684\u7ebf\u6bb5\u4e00\u5b9a\u5728\u533a\u95f4$[l1,l2]$\u4e2d\u3002\u7531\u4e8e\u6211\u4eec\u662f\u6309\u7167\u533a\u95f4\u53f3\u7aef\u70b9\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u5728$[l1,l2]$\u4e2d\u4e00\u5b9a\u6ca1\u6709\u522b\u7684\u7ebf\u6bb5\u3002\u53cd\u89c2\u533a\u95f4$[r1,r2]$\u7531\u4e8e\u9009\u62e9\u4e86\u7b2c\u4e8c\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5$[r1,r2]$\u4e0e\u4e4b\u524d\u76f8\u6bd4\u662f\u591a\u51cf\u4e861\u7684\uff0c\u4e00\u5b9a\u4e0d\u6bd4\u9009\u62e9$[l1,r1]$\u4f18\u3002\n\n\u518d\u8003\u8651\u5f53\u4e24\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\u76f8\u540c\uff0c\u5373$[l1,r1],[l2,r1]$\uff0c\u90a3\u4e48\u6b64\u65f6\u4e0d\u8bba\u600e\u4e48\u9009\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u4e0b\u4e00\u6761\u7ebf\u6bb5\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100005;\nint n, m, a[N], ans;\nint T[N << 2], minn[N << 2], lazy[N << 2];\nstruct node\n{\n\tint l, r;\n}nod[N];\nbool cmp(node a, node b)\n{\n\tif(a.r != b.r) return a.r < b.r;\n\telse return a.l < b.l;\n}\nvoid pushup(int cnt)\n{\n\tminn[cnt] = min(minn[cnt << 1], minn[cnt << 1 | 1]);\n}\nvoid build(int cnt, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\tminn[cnt] = a[l];\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(cnt << 1, l, mid);\n\tbuild(cnt << 1 | 1, mid + 1, r);\n\tpushup(cnt);\n}\nvoid pushdown(int cnt, int l, int r)\n{\n\tif(lazy[cnt])\n\t{\n\t\tminn[cnt << 1] += lazy[cnt];\n\t\tminn[cnt << 1 | 1] += lazy[cnt];\n\t\tlazy[cnt << 1] += lazy[cnt];\n\t\tlazy[cnt << 1 | 1] += lazy[cnt];\n\n\t\tlazy[cnt] = 0;\n\t}\n}\nvoid update(int cnt, int l, int r, int nl, int nr)\n{\n\tif(l >= nl && r <= nr)\n\t{\n\t\tlazy[cnt] -= 1;\n\t\tminn[cnt] -= 1;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tpushdown(cnt, l, r);\n\tif(mid >= nl) update(cnt << 1, l, mid, nl, nr);\n\tif(mid < nr) update(cnt << 1 | 1, mid + 1, r, nl, nr);\n\tpushup(cnt);\n}\nint qmin(int cnt, int l, int r, int nl, int nr)\n{\n\tif(l >= nl && r <= nr) return minn[cnt];\n\tint mid = l + r >> 1;\n\tpushdown(cnt, l, r);\n\tint ans = 999999999;\n\tif(mid >= nl) ans = min(ans, qmin(cnt << 1, l, mid, nl, nr));\n\tif(mid < nr) ans = min(ans, qmin(cnt << 1 | 1, mid + 1, r, nl, nr));\n\treturn ans;\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i ++) scanf(\"%d\", &a[i]);\n\tbuild(1, 1, n);\n\tfor(int i = 1; i <= m; i ++) scanf(\"%d%d\", &nod[i].l, &nod[i].r);\n\tsort(nod + 1, nod + 1 + m, cmp);\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tif(qmin(1, 1, n, nod[i].l, nod[i].r) > 0)\n\t\t{\n\t\t\tupdate(1, 1, n, nod[i].l, nod[i].r);\n\t\t\tans ++;\n\t\t}\n\t}\n\tcout << ans;\n}\n```\n\n",
        "postTime": 1590844795,
        "uid": 177510,
        "name": "\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]Barn Allocation G\u3011"
    },
    {
        "content": "\u6309\u7167B\u7684\u5927\u5c0f\u6392\u5e8f\uff08\u82e5B\u76f8\u540c\u6309A\u6392\uff09\uff0c\u7136\u540e\u8d2a\u5fc3\uff0c\u80fd\u653e\u5c31\u653e\u3002\u8fd9\u4e2a\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4~\n\n```cpp\n\n#include <cstdio>  \n#include <algorithm>  \n  \nusing namespace std;  \n  \nconst size_t Max_N(100050);  \nconst size_t Max_M(100050);  \n  \nvoid Get_Val(int &Ret)  \n{  \n    Ret = 0;  \n    char ch;  \n    while ((ch = getchar()), (ch > '9' || ch < '0'))  \n        ;  \n    do  \n    {  \n        (Ret *= 10) += ch - '0';  \n    }  \n    while ((ch = getchar()), (ch >= '0' && ch <= '9'));  \n}  \n  \nstruct node  \n{  \n    int l, r;  \n    int Min;  \n    int Tag;  \n};  \n  \nstruct Segment_Tree  \n{  \n    node segt[Max_N << 2];  \n    void build_tree(const int&, const int&, const int&);  \n    void pushdown(const int&);  \n    void pushup(const int&);  \n    void Add(const int&, const int&, const int&, const int&);  \n    int rmq_min(const int&, const int&, const int&);  \n};  \nSegment_Tree Space;  \n  \nvoid Segment_Tree::build_tree(const int &cur, const int &l, const int &r)  \n{  \n    segt[cur].l = l, segt[cur].r = r, segt[cur].Min = 0;  \n    if (l == r)  \n        return;  \n    int mid = l + ((r - l) >> 1);  \n    build_tree(cur << 1, l, mid);  \n    build_tree((cur << 1) | 1, mid + 1, r);  \n}  \n  \ninline  \nvoid Segment_Tree::pushdown(const int &cur)  \n{  \n    if (segt[cur].Tag == 0)  \n        return;  \n    segt[cur << 1].Min += segt[cur].Tag, segt[(cur << 1) | 1].Min += segt[cur].Tag;  \n    segt[cur << 1].Tag += segt[cur].Tag, segt[(cur << 1) | 1].Tag += segt[cur].Tag;  \n    segt[cur].Tag = 0;  \n}  \n  \ninline  \nvoid Segment_Tree::pushup(const int &cur)  \n{  \n    segt[cur].Min = min(segt[cur << 1].Min, segt[(cur << 1) | 1].Min);  \n}  \n  \nvoid Segment_Tree::Add(const int &cur, const int &l, const int &r, const int &x)  \n{  \n    if (l <= segt[cur].l && r >= segt[cur].r)  \n    {  \n        segt[cur].Min += x;  \n        segt[cur].Tag += x;  \n        return;  \n    }  \n    int mid = segt[cur].l + ((segt[cur].r - segt[cur].l) >> 1);  \n    pushdown(cur);  \n    if (r <= mid)  \n        Add(cur << 1, l, r, x);  \n    else  \n        if (l > mid)  \n            Add((cur << 1) | 1, l, r, x);  \n        else  \n        {  \n            Add(cur << 1, l, mid, x);  \n            Add((cur << 1) | 1, mid + 1, r, x);  \n        }  \n    pushup(cur);  \n}  \n  \nint Segment_Tree::rmq_min(const int &cur, const int &l, const int &r)  \n{  \n    if (l <= segt[cur].l && r >= segt[cur].r)  \n        return segt[cur].Min;  \n    int mid = segt[cur].l + ((segt[cur].r - segt[cur].l) >> 1);  \n    pushdown(cur);  \n    if (r <= mid)  \n        return rmq_min(cur << 1, l, r);  \n    else  \n        if (l > mid)  \n            return rmq_min((cur << 1) | 1, l, r);  \n        else  \n            return min(rmq_min(cur << 1, l, mid), rmq_min((cur << 1) | 1, mid + 1, r));  \n}  \n  \nstruct cow  \n{  \n    int A, B;  \n};  \ncow Need[Max_M];  \n  \ninline  \nbool comp(const cow &a, const cow &b)  \n{  \n    return a.B != b.B ? a.B < b.B : a.A < b.A;  \n}  \n  \nint N, M;  \n  \nvoid init()  \n{  \n    Get_Val(N), Get_Val(M);  \n    int C;  \n    Space.build_tree(1, 1, N);  \n    for (int i = 1;i <= N;++i)  \n    {  \n        Get_Val(C);  \n        Space.Add(1, i, i, C);  \n    }  \n    for (int i = 1;i <= M;++i)  \n        Get_Val(Need[i].A), Get_Val(Need[i].B);  \n}  \n  \nvoid work()  \n{  \n    int Ans(0);  \n    sort(Need + 1, Need + 1 + M, comp);  \n    for (int i = 1;i <= M;++i)  \n        if (Space.rmq_min(1, Need[i].A, Need[i].B) > 0)  \n        {  \n            ++Ans;  \n            Space.Add(1, Need[i].A, Need[i].B, -1);  \n        }  \n    printf(\"%d\", Ans);  \n}  \n  \nint main()  \n{  \n    init();  \n    work();  \n    return 0;  \n}\n\n```",
        "postTime": 1453445088,
        "uid": 3182,
        "name": "Created_equal1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]\u4ed3\u914d\u7f6eBarn Allocation\u3011"
    },
    {
        "content": "[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1937)\n\n[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/SP8462)\n\n## $\\texttt{Description}$\n\n\u6709 $n$ \u4e2a\u725b\u68da\uff0c\u6bcf\u5934\u725b\u6709\u60f3\u53bb $A_i\\sim B_i$ \u533a\u95f4\u7f16\u53f7\u7684\u725b\u68da\u3002\u6bcf\u4e2a\u725b\u68da\u9650\u5236 $C_i$ \u5934\u725b\uff0c\u6c42\u6700\u591a\u53ef\u4ee5\u6ee1\u8db3\u591a\u5c11\u5934\u725b\u7684\u8981\u6c42\u3002 \n\n## $\\texttt{Solution}$\n\n\u663e\u7136\u8d2a\u5fc3\u3002\u8f93\u5165\u8981\u6c42\u540e\u5c06\u5176\u6392\u5e8f\uff0c\u6392\u5e8f\u987a\u5e8f\u6309\u7167 $A_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u82e5\u76f8\u7b49\u5219\u6309 $B_i$ \u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ece $1\\sim n$ \u5f00\u59cb\u5faa\u73af\uff0c\u904d\u5386\u6bcf\u4e00\u4e2a\u725b\u68da\u3002\u5c06\u6240\u6709\u8981\u6c42\u8fdb\u5165\u8fd9\u4e2a\u725b\u68da\u7684\u725b\u52a0\u5165\u5927\u6839\u5806\u4e2d\uff0c\u5e76\u5c06\u5176\u7d2f\u52a0\u81f3 $tot$ \u6570\u7ec4\u4e2d\u3002\n\n\u5982\u679c\u5f88\u6070\u5de7\uff0c\u5927\u6839\u5806\u4e2d\u7684\u725b\u7684\u6570\u91cf $\\le ans+C_i$\uff08\u5927\u6839\u5806\u4e2d\u6709\u4e4b\u524d\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\u7684 $ans$ \u5934\u725b\uff0c\u5e76\u4e14\u8fd9\u4e2a\u725b\u68da\u53ef\u4ee5\u5bb9\u8bb8 $C_i$ \u5934\u725b\u8fdb\u5165\uff09\uff0c\u90a3\u4e48\u5c31\u5c06\u5176\u7d2f\u52a0\u81f3 $ans$ \u4e2d\uff0c\u6ee1\u8db3\u4e86\u4ed6\u4eec\u7684\u8981\u6c42\u3002\n\n\u5426\u5219\uff0c\u6709\u4e9b\u725b\u65e0\u6cd5\u8fdb\u5165\u725b\u68da\u3002\u6839\u636e\u5927\u6839\u5806\uff0c\u6211\u4eec\u5c06\u5176\u653e\u5165\u5927\u6839\u5806\u65f6\uff0c\u662f\u6309\u7167 $B_i$ \u653e\u7684\u3002\u5927\u7684 $B_i$ \u5728\u4e0a\uff0c\u6211\u4eec\u5c06\u5806\u9876\u7684\u725b\u51fa\u961f\uff08\u56e0\u4e3a\u540e\u9762\u8fd9\u5934\u725b\u8fd8\u6709\u53ef\u80fd\u80fd\u8fdb\u5165\u5176\u4ed6\u725b\u68da\uff09\uff0c\u5c3d\u53ef\u80fd\u8ba9 $B_i$ \u5c0f\u7684\u725b\u8fdb\u5165\u725b\u68da\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u6700\u4f18\u3002\n\n\u6700\u540e $ans$ \u7d2f\u52a0 $tot_i$ \u4e2d\u7684\u503c\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n## $\\texttt{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+10;\nstruct node{\n\tint l,r;\n\tbool operator <(node aa) const{\n\t\treturn l<aa.l;\n\t}\n}req[N];\nint a[N],tot[N];\npriority_queue<int>q;\nint main(){\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>a[i];\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>req[i].l>>req[i].r;\n\tsort(req+1,req+m+1);\n\tint now=0,ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(now+1<=m&&i>=req[now+1].l){\n\t\t\tnow++;\n\t\t\tq.push(req[now].r);\n\t\t\ttot[req[now].r]++;\n\t\t}\n\t\twhile(q.size()-ans>a[i]){\n\t\t\ttot[q.top()]--;\n\t\t\tq.pop(); \n\t\t}\n\t\tans+=tot[i];\n\t}\n\tcout<<ans;\n    return 0;\n}\n```\n\n\u8c22\u8c22\u89c2\u770b\u3002",
        "postTime": 1631769662,
        "uid": 307603,
        "name": "_cmh",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]Barn Allocation G\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1937)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/sincerin520/solution-P1937)\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u8fd9\u9898\u548c[SP8462](https://www.luogu.com.cn/problem/SP8462)\u91cd\u9898\u4e86\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u4e00\u5171\u6709 $N$ \u4e2a\u755c\u680f\u548c $M$ \u5934\u725b\uff0c\u7b2c $i$ \u4e2a\u755c\u680f\u53ef\u4ee5\u4f4f $C_i$ \u5934\u725b\u3002\u6bcf\u5934\u725b\u90fd\u9700\u8981\u5360\u7528\u4e00\u6bb5\u8fde\u7eed\u7684\u755c\u680f $A_i$ \u5230 $B_i$   \u6765\u4f11\u606f\u3002\u95ee\u8fd9 $N$ \u4e2a\u755c\u680f\u6700\u591a\u53ef\u4ee5\u6ee1\u8db3\u51e0\u5934\u725b\uff1f\n\n- $1 \\leq N,M \\leq 10^5.$\n- $1 \\leq A_i \\leq B_i \\leq N.$\n- $1 \\leq C_i \\leq 10^5.$\n\n## \u9898\u76ee\u89e3\u6790\n\n\u9996\u5148\u9898\u76ee\u8981\u6c42\u627e\u51fa\u6700\u591a\u65b9\u6848\uff0c\u663e\u7136\u9700\u8981\u8d2a\u5fc3\u3002\u90a3\u4e48\u5173\u4e8e\u8d2a\u5fc3\u7684\u65b9\u6848\uff0c\u7531\u4e8e\u5176\u53f3\u7aef\u70b9\u8d8a\u9760\u5de6\uff0c\u5bf9\u540e\u9762\u7684\u5f71\u54cd\u8d8a\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u5176\u53f3\u7aef\u70b9 $B_i$ \u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c**\u5e76\u4e14\u6ca1\u6709\u5fc5\u8981\u4ee5\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f**\u3002\n\n\n```cpp\n\n             1   2   3   4   5\n           +---+---+---+---+---+\n           | 1 | 1 | 1 | 2 | 3 |  \n           +---+---+---+---+---+           \t\t\t \nCow 1       XXXXXXX              (1, 2)\nCow 2               XXXXXXX      (3, 4)\nCow 3           XXXXXXXXXXXXXXXX (2, 5)\n\n```\n\n\u5982\u56fe\uff0c\u6211\u4eec\u628a\u6bcf\u5934\u725b\u6240\u9700\u8981\u7684\u533a\u95f4\u770b\u505a\u4e00\u6761\u6761\u7ebf\u6bb5\u3002\u5728\u6392\u5e8f\u8fc7\u540e\uff0c\u53f3\u7aef\u70b9\u662f\u9012\u589e\u7684\uff0c\u6211\u4eec\u4f9d\u6b21\u63d2\u5165\u6bcf\u6bb5\u533a\u95f4\uff0c\u524d\u4e24\u5934\u725b\u662f\u5b8c\u5168\u53ef\u4ee5\u4f4f\u4e0b\u7684\u3002\u4f46\u662f\u5728\u63d2\u5165\u7b2c\u4e09\u5934\u725b\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0\u5b83\u548c\u524d\u4e24\u5934\u90fd\u5b58\u5728\u51b2\u7a81\u3002\u5b83\u7684\u8d21\u732e\u53ea\u6709 $1$\uff0c\u6240\u4ee5\u653e\u5f03\u5b83\u4fdd\u7559\u539f\u6765\u7684\u4e24\u5934\u624d\u662f\u66f4\u4f18\u7684\u7b56\u7565\u3002\n\n\u5982\u679c\u662f\u53ea\u6709\u4e00\u5934\u539f\u5148\u5b58\u5728\u7684\u725b\u548c\u5b83\u5b58\u5728\u51b2\u7a81\uff0c\u4ee5\u4e0a\u7b56\u7565\u4ecd\u7136\u6210\u7acb\u3002\u56e0\u4e3a\u5b83\u4e00\u5b9a\u6bd4\u539f\u5148\u5b58\u5728\u7684\u90a3\u5934\u725b\u53f3\u7aef\u70b9\u66f4\u9760\u53f3\uff0c\u5bf9\u540e\u9762\u7684\u725b\u5f71\u54cd\u4e5f\u4f1a\u66f4\u5927\uff0c\u6545\u653e\u5f03\u5b83\u4e5f\u662f\u66f4\u4f18\u7b56\u7565\u3002\n\n\u56de\u5230\u6392\u5e8f\u7b56\u7565\uff0c\u5f53\u6709\u4e24\u5934\u725b\u7684\u53f3\u7aef\u70b9**\u76f8\u540c**\u65f6\uff0c\u5927\u90e8\u5206\u9898\u89e3\u90fd\u91c7\u7528\u4e86\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u8fd9\u4e2a\u601d\u8def\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u5de6\u7aef\u70b9\u66f4\u5927\u7684\u7ebf\u6bb5\u5360\u7684\u7a7a\u95f4\u66f4\u5c0f\uff0c\u5bf9\u524d\u9762\u5f71\u54cd\u66f4\u5c0f\uff0c\u8fd9\u6837\u6392\u5e8f\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u63d2\u5165\u66f4\u77ed\u7684\uff08\u5de6\u7aef\u70b9\u66f4\u5927\u7684\uff09\u7ebf\u6bb5\uff0c\u5b83\u5c06\u4e0d\u4f1a\u5bf9\u524d\u9762\u9020\u6210\u5f71\u54cd\uff0c\u6240\u4ee5\u4e0b\u4e00\u6761\u66f4\u957f\u7684\u7ebf\u6bb5\u4e0d\u4f1a\u88ab\u5b83\u5f71\u54cd\u3002\u4f46\u662f\u53cd\u4e4b\uff0c\u5982\u679c\u5148\u63d2\u5165\u8f83\u957f\u7ebf\u6bb5\uff0c\u4e0b\u4e00\u6761\u8f83\u77ed\u7ebf\u6bb5\u5728\u63d2\u5165\u65f6\u4e5f\u5e76\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u6839\u672c\u5c31\u7528\u4e0d\u5230\u524d\u9762\u88ab\u957f\u7ebf\u6bb5\u5360\u7528\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u8003\u8651\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\n\n\u8003\u8651\u5b8c\u8d2a\u5fc3\u7b56\u7565\uff0c\u6211\u4eec\u6765\u60f3\u4e00\u60f3\u4ee3\u7801\u7684\u5b9e\u73b0\u3002\u5bf9\u4e8e\u6bcf\u6b21\u8bf7\u6c42 $A_i$ \u548c $B_i$ \u80af\u5b9a\u4e0d\u53ef\u80fd\u53bb\u904d\u5386\u5b83\uff0c\u628a\u533a\u95f4\u6240\u6709\u6570\u90fd\u52a0\u4e0a $1$\uff0c\u7136\u540e\u518d\u5224\u65ad\u6709\u6ca1\u6709\u8d85\u51fa $C_i (i \\in [A_i,B_i])$\u3002\u8fd9\u6837\u7684\u7eaf\u66b4\u529b\u505a\u6cd5\u4f1a\u8ba9\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5230 $\\Theta (nm)$\uff0c\u663e\u7136\u662f\u8fc7\u4e0d\u6389\u8fd9\u4e2a\u9898\u7684\uff0c\u5e76\u4e14\u6211\u4e5f\u6ca1\u6709\u60f3\u5230\u8fd9\u4e2a\u601d\u60f3\u53ef\u4ee5\u600e\u4e48\u4f18\u5316 QwQ\u3002\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u6211\u4eec\u8003\u8651\u6765\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u8f6c\u6362\u6210\u51cf\u6cd5\uff0c\u6bcf\u6b21\u64cd\u4f5c\u628a\u5bf9\u5e94\u7684 $C_i (i \\in [A_i,B_i])$ \u90fd\u51cf\u53bb $1$\uff0c\u8868\u793a\u6bcf\u4e2a\u755c\u680f\u8fd8\u80fd\u4f4f\u7684\u725b\u7684\u5934\u6570\u3002\u8fd9\u6837\u5728\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u8bf7\u6c42\u533a\u95f4\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u786e\u4fdd\u533a\u95f4\u7684\u6700\u5c0f\u503c $\\min \\{C_{A_i} \\dots C_{B_i} \\} \\geq 1$ \u5373\u53ef\u3002\u533a\u95f4\u4fee\u6539 $+$ \u533a\u95f4\u6700\u5c0f\u503c\u67e5\u8be2\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u7528\u4e00\u68f5[\u7ebf\u6bb5\u6811](https://www.cnblogs.com/xenny/p/9801703.html)\u6765\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n- \u7ebf\u6bb5\u6811\u7684\u5355\u6b21\u533a\u95f4\u4fee\u6539\u4f1a\u8fbe\u5230 $\\Theta (n)$\uff0c\u548c\u66b4\u529b\u6ca1\u6709\u4ec0\u4e48\u5dee\u8ddd\u3002\u6240\u4ee5\u9700\u8981\u5f15\u5165**\u5ef6\u8fdf\u6807\u8bb0**\u6765\u5b9e\u73b0 $\\Theta (\\log n)$ \u7684\u533a\u95f4\u4fee\u6539\u3002\u5982\u679c\u4f60\u5bf9\u5ef6\u8fdf\u6807\u8bb0\u5e76\u4e0d\u719f\u6089\uff0c\u53ef\u4ee5[\u6233\u8fd9\u91cc](https://blog.csdn.net/qq_20468287/article/details/54584937)\uff0c\u7136\u540e\u505a\u505a\u4e0b\u9762\u4e24\u9053\u7ec3\u4e60\u3002\n\n\n   ##### [P3373 \u7ebf\u6bb5\u68112](https://www.luogu.com.cn/problem/P3373)\n   ##### [P1253 \u6276\u82cf\u7684\u95ee\u9898](https://www.luogu.com.cn/problem/P1253)\n  \n  ~~\u90fd\u6765\u505a\u8fd9\u4e2a\u9898\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u554a/kk~~\n\n\n- \u672c\u9898\u5751\u70b9\uff1a\u6bcf\u4e2a\u755c\u680f\u6700\u591a $10^5$ \u53ea\uff0c\u5171 $10^5$ \u4e2a\u755c\u680f\uff0c\u8981\u5f00`long long`\u3002\n\n## AC Code\n\n\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta (m \\log n)$\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio> \n#include<algorithm> \n#include<cstring> \n#include<cmath> \nusing namespace std;  \nconst int N=100005;//1e5\u4e2a\u755c\u680f \n#define int long long //\u9632\u6b62\u89c1\u7956\u5b97\u3002  \nconst int INF=0x3f3f3f3f3f3f3f3f;//\u4e00\u5b9a\u8981\u8bb0\u5f97long long\u662f8\u4e2a\u5b57\u8282 \nint m,n,ans;\nint a[N];//\u6bcf\u4e2a\u755c\u680f\u7684\u5bb9\u91cf   \nstruct node{\n\tint l,r;//\u8bb0\u5f55\u6bcf\u5934\u725b\u6d3b\u52a8\u533a\u95f4\u7684\u7ed3\u6784\u4f53 \n}e[N]; \ninline bool cmp(node a,node b)//\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n{\n\treturn a.r<b.r;\n}\n#define lson(p) p<<1\n#define rson(p) p<<1|1\nstruct SegmentTree{//\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u4f53 \n    int l,r;\n    int dat;\n    int add;\n    #define l(i) t[i].l\n    #define r(i) t[i].r \n    #define dat(i) t[i].dat //\u6700\u5c0f\u503c \n    #define add(i) t[i].add\n}t[N<<2];\ninline void pushup(int p)//\u66f4\u65b0\u8282\u70b9\u4fe1\u606f \n{\n\tdat(p)=min(dat(lson(p)),dat(rson(p)));\n}\ninline void build(int p,int l,int r)//\u5efa\u6811 \n{\n    l(p)=l;  r(p)=r;\n    if(l==r) //\u627e\u5230\u8282\u70b9 \n    {\n        dat(p)=a[l];//\u8d4b\u503c \n        return;\n    }\n    int mid=(l+r)>>1;\n    build(lson(p),l,mid); \n\tbuild(rson(p),mid+1,r);\n    pushup(p);//\u5411\u4e0a\u4f20\u9012 \n}\ninline void spread(int p)//\u4e0b\u4f20 lazy_tag \n{\n    if(add(p)) \n    {\n        dat(lson(p))+=add(p); dat(rson(p))+=add(p);\n        add(lson(p))+=add(p); add(rson(p))+=add(p);\n        add(p)=0;//\u6700\u540e\u522b\u5fd8\u4e86\u6e05\u6807\u8bb0\uff01 \n\t}   \n} \ninline void change(int p,int l,int r)//\u533a\u95f4\u51cf1 \n{\n    if(l<=l(p)&&r>=r(p))\n    {\n        add(p)--; dat(p)--; //\u6253\u6807\u8bb0 \n        return;\n    }\n    spread(p);//\u4e0b\u4f20 \n    int mid=(l(p)+r(p))>>1;\n    if(l<=mid) change(lson(p),l,r);\n    if(r>mid) change(rson(p),l,r);\n    pushup(p);//\u66f4\u65b0\u4fe1\u606f \n} \ninline int query(int p,int l,int r)//\u67e5\u8be2\u6700\u5c0f\u503c \n{\n    if(l<=l(p)&&r>=r(p)) return dat(p);\n    spread(p);\n    int mid=(l(p)+r(p))>>1; \n    int ans=INF;//\u521d\u59cb\u5316ans\u4e3a\u4e00\u4e2a\u6781\u5927\u503c \n    if(l<=mid) ans=query(lson(p),l,r);\n    if(r>mid) ans=min(ans,query(rson(p),l,r));//\u5de6\u53f3\u5b50\u6811\u7684\u8f83\u5c0f\u503c \n    return ans;\n}\nsigned main(void)\n{ \n\tfreopen(\"P1937.in\",\"r\",stdin);\n    scanf(\"%lld%lld\",&n,&m); \n    for(register int i=1;i<=n;++i) scanf(\"%lld\",&a[i]);\n\tfor(register int i=1;i<=m;++i) scanf(\"%lld%lld\",&e[i].l,&e[i].r); //\u725b\u7237\u7237\u4eec\u7684\u8981\u6c42 \n    sort(e+1,e+1+m,cmp);//\u6392\u5e8f  \n    build(1,1,n); ans=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tif(query(1,e[i].l,e[i].r)>=1) //\u5982\u679c\u533a\u95f4\u6700\u5c0f\u503c>=1,\u5219\u8fd8\u53ef\u4ee5\u518d\u5206\u51fa\u4e00\u4e2a\u755c\u680f \n\t\t{\n\t\t\tchange(1,e[i].l,e[i].r);//\u628a\u8be5\u533a\u95f4\u7684\u6570\u90fd\u51cf1\n\t\t\tans++;//\u7edf\u8ba1\u7b54\u6848 \n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans); \n    return 0;//\u5b8c\u7ed3\u6492\u82b1\uff01\n} \n/*\n5 3\n1 1 1 2 3\n1 2\n2 5\n3 4\n*/\n```\n\n[AC Record\uff08\u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u54e6\uff09](https://www.luogu.com.cn/record/100240440)\n\n\u4e0d\u8981\u5728\u610f\u6211\u5947\u602a\u7684\u7801\u98ce\u3002\n",
        "postTime": 1674126795,
        "uid": 749325,
        "name": "Sincerin",
        "ccfLevel": 0,
        "title": "P1937 [USACO10MAR] Barn Allocation G \u9898\u89e3"
    },
    {
        "content": "\u5178\u578b\u7684\u8d2a\u5fc3\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6574\u4e2a\u6570\u5217\u6700\u5c0f\u503c\uff0c\u662f\u5426\u8fbe\u5230\u8bf7\u6c42\u5373\u5224\u65ad**\u533a\u95f4\u6700\u5c0f\u503c**\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $1$ \u3002 \n\n\u5c06\u6bcf\u4e2a\u8bf7\u6c42 $l_i,r_i$ \u4ee5\u53f3\u7aef\u70b9 $r_i$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57**\u4ece\u5927\u5230\u5c0f\u6392\u5e8f** \uff08\u5373\u627e\u5230\u6700\u53f3\u8fb9\u7684\u8bf7\u6c42\uff09\uff0c\u518d\u4ee5\u5de6\u7aef\u70b9 $l_i$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57**\u4ece\u5c0f\u5230\u5927\u6392\u5e8f**\uff08\u8ba9\u5b83\u4eec\u957f\u5ea6\u9012\u51cf\uff0c\u4fbf\u4e8e\u53d6\u6700\u5927\u503c\uff0c**\u53ef\u4ee5\u5ffd\u7565**\uff09\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u8bf7\u6c42\u5e8f\u5217\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6328\u4e2a\u5224\u65ad\u6bcf\u4e2a\u533a\u95f4\u662f\u5426\u80fd\u591f\u6ee1\u8db3\u8bf7\u6c42\uff0c\u5982\u679c\u53ef\u4ee5\u5c31\u533a\u95f4\u4fee\u6539\u5168\u90e8 $-1$ \uff0c $ans$ \u9012\u589e\uff0c\u5426\u5219\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u90a3\u4e48\u95ee\u9898\u662f\u4e3a\u5565\u8fd9\u8d2a\u5fc3\u65b9\u6848\u662f\u6700\u4f18\u7684\u3002\n\n\u5b83\u7531 $2$ \u6761\u7ed3\u8bba\u7ec4\u6210\uff1a\n\n1. \u5bf9\u4e8e\u53f3\u7aef\u70b9\u76f8\u540c\u7684\u4e24\u4e2a\u8bf7\u6c42\uff0c\u5de6\u7aef\u70b9\u8d8a\u5927\uff0c\u65b9\u6848\u8d8a\u4f18\u3002\n2. \u5bf9\u4e8e\u5de6\u7aef\u70b9\u8d8a\u5f80\u53f3\uff0c\u65b9\u6848\u8d8a\u4f18\u3002\n\n\u663e\u7136\u7b2c $1$ \u6761\u7ed3\u8bba\u975e\u5e38\u660e\u663e\uff0c\u8bbe $r_i=r_j,l_i<l_j$ \uff0c\u9009 $j$ \u663e\u7136\u6bd4\u9009 $i$ \u591a\u51fa\u6765 $l_j-l_i$  \u7684\u7a7a\u95f4\u3002\n\n\u5bf9\u4e8e\u7b2c $2$ \u6761\u7ed3\u8bba\uff0c\u8bbe $i,j$ \u4e24\u6761\u7ebf\u6bb5\u3002\n\n- \u82e5 $i,j$ \u6ca1\u6709\u51b2\u7a81\uff0c\u76f4\u63a5\u7b97\u5165\u7b54\u6848\u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n- \u5982\u679c $i,j$ \u6709\u51b2\u7a81\uff1a\n1. \u5982\u679c $r_i=r_j$ \uff0c\u663e\u7136\u9009\u5de6\u7aef\u70b9\u6700\u5927\u6700\u4f18\uff08\u7ed3\u8bba $1$ \uff09\u3002\n2. \u5426\u5219\uff0c\u4e0d\u59a8\u8bbe $l_j<l_i<r_j<r_i$ \uff08\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027\uff09\uff0c\u5982\u679c\u4e0d\u9009 $j$ \uff0c\u4f1a\u5728\u73b0\u5728\u7684\u57fa\u7840\u4e0b\u4f7f\u5f97 $[l_i,r_i]$ \u5168\u90e8 $-1$ \uff0c\u5e76\u4e14\u8ba9 $[l_j,r_j]$ \u5168\u90e8 $+1$ \u3002\u7136\u800c\u91cd\u53e0\u533a\u95f4 $[l_i,r_j]$ \u4ecd\u7136\u4e0d\u53d8\uff0c\u5219\u5982\u679c\u5269\u4e0b\u7684 $l$ \u5168\u90e8\u90fd\u5c0f\u4e8e\u7b49\u4e8e $l_i$ \uff0c\u5219\u663e\u7136\u662f\u6ca1\u6709\u6548\u679c\u7684\uff0c\u6240\u4ee5**\u4e0d\u9009 $j$ \u7684\u7b56\u7565\u4f1a\u4f7f\u91cd\u53e0\u90e8\u5206\u5168\u90e8 $-1$** \u3002\u53cd\u89c2\u4e0d\u9009 $i$ \u7684\u7b56\u7565\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5e76\u6ca1\u5565\u5f71\u54cd\u3002\u7ed3\u8bba $2$ \u663e\u7136\u6210\u7acb\u3002\n\n$$\\text{\\color{white}{\u8fd9\u8be5\u6b7b\u7684\u8d2a\u5fc3\u7ec8\u4e8e\u8bc1\u660e\u5b8c\u4e86}}$$\n\n\u56e0\u6b64\u8fd9\u4e2a\u8d2a\u5fc3\u65b9\u6848\u662f\u53ef\u884c\u7684\uff0c\u540c\u65f6\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u53ef\u4ee5\u8fbe\u5230\u4f18\u79c0\u7684 $O(n\\log n)$ \u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define inf 2147483647\n#define maxn 100100\nnamespace mystd {\n\tinline int read() {\n\t    int w = 1, q = 0;\n\t    char ch = ' ';\n\t    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n\t    if (ch == '-') w = -1, ch = getchar();\n\t    while (ch >= '0' && ch <= '9') q = q * 10 + ch - '0', ch = getchar();\n\t    return w * q;\n\t}\n\tinline void write(int x) {\n\t    if (x < 0) {\n\t        x = ~(x - 1);\n\t        putchar('-');\n\t    }\n\t    if (x > 9) write(x / 10);\n\t    putchar(x % 10 + '0');\n\t}\n}\nusing namespace std;\nusing namespace mystd;\n\nint n, m, ans, s[maxn];\n\nstruct node {// \u8bf7\u6c42\u7ed3\u6784\u4f53\n\tint l, r;\n\tbool operator < (const node &rhs) const {\n\t\tif (r < rhs.r) return true;\n\t\telse if (r > rhs.r) return false;\n\t\telse {\n\t\t\tif (l > rhs.l) return true;\n\t\t\telse return false;\n\t\t}\n\t}\n} q[maxn];\n\n// \u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\n\nint tree[maxn << 2], mins[maxn << 2], lazy[maxn << 2];\n\nvoid pushup(int x) {\n\ttree[x] = tree[x << 1] + tree[(x << 1) | 1];\n\tmins[x] = min(mins[x << 1], mins[x << 1 | 1]);\n}\n\nvoid pushdown(int l, int r, int x) {\n\tint mid = (l + r) >> 1;\n\ttree[x << 1] += lazy[x] * (mid - l + 1);\n\tmins[x << 1] += lazy[x];\n\ttree[(x << 1) | 1] += lazy[x] * (r - mid);\n\tmins[x << 1 | 1] += lazy[x];\n\tlazy[x << 1] += lazy[x];\n\tlazy[(x << 1) | 1] += lazy[x];\n\tlazy[x] = 0;\n}\n\nvoid build(int l, int r, int x) {\n\tif (l == r) {\n\t\ttree[x] = mins[x] = s[l];\n\t\tlazy[x] = 0;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, x << 1);\n\tbuild(mid + 1, r, (x << 1) | 1);\n\tpushup(x);\n}\n\nvoid update(int l, int r, int s, int t, int c, int x) {\n\tif (l <= s && t <= r) {\n\t\ttree[x] += (t - s + 1) * c;\n\t\tmins[x] += c;\n\t\tlazy[x] += c;\n\t\treturn;\n\t}\n\tint mid = (s + t) >> 1;\n\tif (lazy[x]) pushdown(s, t, x);\n\tif (l <= mid) update(l, r, s, mid, c, x << 1);\n\tif (r > mid) update(l, r, mid + 1, t, c, (x << 1) | 1);\n\tpushup(x);\n}\n\nint query(int l, int r, int s, int t, int x) {\n\tif (l <= s && t <= r) return mins[x];\n\tint mid = (s + t) >> 1, res = inf;\n\tif (lazy[x]) pushdown(s, t, x);\n\tif (l <= mid) res = min(query(l, r, s, mid, x << 1), res);\n\tif (r > mid) res = min(query(l, r, mid + 1, t, (x << 1) | 1), res);\n\treturn res;\n}\n\nint main() {\n\tn = read();\n\tm = read();\n\tfor (int i = 1; i <= n; i++) {\n\t\ts[i] = read();\n\t}\n\tbuild(1, n, 1);\n\tfor (int i = 1; i <= m; i++) {\n\t\tq[i].l = read();\n\t\tq[i].r = read();\n\t}\n    // \u6392\u5e8f\n\tsort(q + 1, q + m + 1);\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (query(q[i].l, q[i].r, 1, n, 1) >= 1) {// \u8fbe\u5230\u8bf7\u6c42\n\t\t\tupdate(q[i].l, q[i].r, 1, n, -1, 1);\n\t\t\tans++;\n\t\t}\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1611841816,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]Barn Allocation G\u3011"
    },
    {
        "content": "[P1937 [USACO10MAR]Barn Allocation G](https://www.luogu.com.cn/problem/P1937)\n\n\u4e00\u9053\u7279\u522b\u7ecf\u5178\u7684\u8d2a\u5fc3\u9898.\n\n\u6839\u636e\u8d2a\u5fc3\u7b56\u7565\uff0c\u6211\u4eec\u5148\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f.\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u5934\u5976\u725b\uff0c\u5224\u65ad\u5176\u662f\u5426\u80fd\u63d2\u5165\uff0c\u80fd\u63d2\u5165\u5c31\u63d2\u5165\uff0c\u5426\u5219\u820d\u5f03\u3002\u8fd9\u91cc\u7565\u8bc1\u4e00\u4e0b\u5176\u6b63\u786e\u6027\uff1a\n\n\u6392\u5b8c\u5e8f\u540e\uff0c\u5bf9\u4e8e\u5f53\u524d\u5976\u725b\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5b83\u4e0d\u80fd\u63d2\u5165\u5e76\u4e14\u975e\u8981\u5f3a\u884c\u63d2\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5f97\u53bb\u524d\u9762\u5df2\u63d2\u5165\u7684\u5976\u725b\u4e2d\u5c06\u6709\u51b2\u7a81\u7684\u7ed9\u53bb\u6389\uff0c\u4f46\u662f\u5f53\u524d\u5976\u725b\u8d21\u732e\u81f3\u591a\u4e3a$1$,\u53bb\u6389\u524d\u9762\u51b2\u7a81\u7684\u5976\u725b\u7684\u4ee3\u4ef7\u81f3\u5c11\u4e3a$1$\u3002\u5e76\u4e14\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u5976\u725b\uff0c\u7531\u4e8e\u6211\u4eec\u53f3\u7aef\u70b9\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u53bb\u6389\u524d\u9762\u5976\u725b\u4e14\u63d2\u5165\u5f53\u524d\u5976\u725b\u7684\u8bdd\u5bf9\u540e\u9762\u5976\u725b\u7684\u63d2\u5165\u66f4\u52a0\u4e0d\u5229\u3002\u6545\u5f53\u524d\u5976\u725b\u4e0d\u63d2\u5165\u624d\u662f\u6700\u4f18\u7684\u3002\n\n\u81f3\u4e8e\u5224\u65ad\u80fd\u5426\u63d2\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5f53\u524d\u5976\u725b\u6240\u5bf9\u5e94\u533a\u95f4\u5269\u4f59\u5bb9\u7eb3\u91cf\u7684\u6700\u5c0f\u503c\uff0c\u63d2\u5165\u540e\u533a\u95f4\u96c6\u4f53\u51cf$1$\u3002\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u548c\u533a\u95f4\u51cf\u6cd5\uff0c\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u76f4\u63a5\u505a\u5c31\u884c\u5566\uff01\n\n\u590d\u6742\u5ea6:$O(n \\log n)$\n\n```cpp\nconst ll N=2e5+5;\n\nll n, m;\nll v[N];\n\nstruct node{\n\tll l, r;\n\t\n\tinline void Read(){\n\t\tread(l); read(r);\n\t}\n\t\n\tinline bool operator <(const node &X)const{\n\t\treturn r==X.r?l<X.l:r<X.r;\n\t}\n}p[N];\n\nnamespace seg{\n\tll dat[N<<2], lazy[N<<2];\n\t\n\tinline void build(ll p, ll l, ll r){\n\t\tif (l==r) return (void) (dat[p]=v[l]);\n\t\tll mid=l+r>>1;\n\t\tbuild(p<<1, l, mid); build(p<<1|1, mid+1, r);\n\t\tdat[p]=min(dat[p<<1], dat[p<<1|1]);\n\t}\n\t\n\tinline void pushup(ll p, ll val){\n\t\tdat[p]+=val; lazy[p]+=val;\n\t}\n\t\n\tinline void pushdown(ll p, ll l, ll r){\n\t\tif (lazy[p]==0 || l==r) return;\n\t\tpushup(p<<1, lazy[p]); pushup(p<<1|1, lazy[p]);\n\t\treturn (void) (lazy[p]=0);\n\t}\n\t\n\tinline void update(ll p, ll l, ll r, ll u, ll v, ll val=-1){\n\t\tpushdown(p, l, r);\n\t\tif (u<=l && r<=v) return pushup(p, val);\n\t\tll mid=l+r>>1;\n\t\tif (u<=mid) update(p<<1, l, mid, u, v, val);\n\t\tif (v>mid) update(p<<1|1, mid+1, r, u, v, val);\n\t\tdat[p]=min(dat[p<<1], dat[p<<1|1]);\n\t}\n\t\n\tinline ll query(ll p, ll l, ll r, ll u, ll v){\n\t\tpushdown(p, l, r);\n\t\tif (u<=l && r<=v) return dat[p];\n\t\tll mid=l+r>>1, res=0x7fffffff;\n\t\tif (u<=mid) chkmin(res, query(p<<1, l, mid, u, v));\n\t\tif (v>mid) chkmin(res, query(p<<1|1, mid+1, r, u, v));\n\t\treturn res;\n\t}\t\n}\n\nll res;\nint main(){\n\tread(n); read(m);\n\tfor (R ll i=1; i<=n; i++) read(v[i]);\n\tseg::build(1, 1, n);\n\tfor (R ll i=1; i<=m; i++) p[i].Read();\n\tsort(p+1, p+m+1);\n\tfor (R ll i=1; i<=m; i++){\n\t\tif (seg::query(1, 1, n, p[i].l, p[i].r)>0){\n\t\t\t++res;\n\t\t\tseg::update(1, 1, n, p[i].l, p[i].r);\n\t\t}\n\t}\n\twriteln(res);\n}\n```\n",
        "postTime": 1605603019,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "P1937 [USACO10MAR]Barn Allocation G"
    },
    {
        "content": "\u9996\u5148 [\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/SP8462)\n\n## \u601d\u8def\n\u8d2a\u5fc3+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\\\n\\\n\u8d2a\u5fc3\uff1a\u5927\u5bb6\u5e94\u8be5\u505a\u8fc7\u8fd9\u4e2a\u9898\u7684\u7b80\u5316\u7248\u628a\uff0c\u7528\u7ebf\u6bb5\u53bb\u8986\u76d6\u533a\u95f4\u8981\u6c42\u4e0d\u91cd\uff0c\u95ee\u6700\u591a\u80fd\u7528\u51e0\u6761\u7ebf\u6bb5\u53bb\u8986\u76d6\uff0c\u6211\u4eec\u600e\u4e48\u505a\u7684\uff0c\u8d2a\u5fc3\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u9009\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9898\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u53ef\u4ee5\u91cd\u590d\uff0c\u4f46\u6709\u6b21\u6570\u9650\u5236\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u627e\u5230\u6b21\u6570\u9650\u5236\u4e2d\u6700\u5c0f\u7684\u6b21\u6570\uff0c\u68c0\u67e5\u4e00\u4e0b\u80fd\u4e0d\u80fd\u9009\u8fd9\u4e2a\u7ebf\u6bb5\uff0c\u80fd\u653e\u5c31\u653e\uff0c\u7136\u540e\u533a\u95f4\u6b21\u6570\u51cf\u4e00\uff1b\\\n\\\n\u7ebf\u6bb5\u6811\uff1a\u672c\u9898\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c 1.\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c 2.\u533a\u95f4\u52a0\u6570 \u90a3\u4e48\u5f88\u663e\u7136\u7684\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u88f8\u9898\u4e86\u5427\n\n### \u4e0a\u4ee3\u7801\n```\n#include<cstdio>\n#include<algorithm>\n#define mid (l+r)/2\nusing namespace std;\nconst int maxn=2e5;\nint n,m,a[maxn],ans,maxx;\nstruct node{\n\tint l,r;\n}s[maxn];\nstruct tree{\n\tint l,r,sum,minn,lazy;\n}t[maxn*4];\nint min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nbool cmp(node a,node b)\n{\n\treturn a.r<b.r;\n}\nvoid renew(int id)\n{\n\tt[id].minn=min(t[id*2].minn,t[id*2+1].minn);\n}\nvoid build(int id,int l,int r)\n{\n\tt[id].l=l;\n\tt[id].r=r;\n\tif (l==r)\n\t{\n\t\tt[id].minn=a[l];\n\t\treturn ;\n\t}\n\tbuild(id*2,l,mid);\n\tbuild(id*2+1,mid+1,r);\n\trenew(id);\n}\nvoid pushdown(int id)\n{\n\tt[id*2].minn-=t[id].lazy;\n\tt[id*2+1].minn-=t[id].lazy;\n\tt[id*2].lazy+=t[id].lazy;\n\tt[id*2+1].lazy+=t[id].lazy;\n\tt[id].lazy=0;\n}\nint query(int id,int l,int r)\n{\n\tif (t[id].l>r||t[id].r<l)return 0x3f3f3f3f;\n\telse if (t[id].l>=l&&t[id].r<=r)return t[id].minn;\n\telse if (t[id].lazy)pushdown(id);\n\treturn min(query(id*2,l,r),query(id*2+1,l,r));\n}\nvoid add(int id,int l,int r)\n{\n\tif (t[id].l>r||t[id].r<l)return ;\n\tif (t[id].lazy)pushdown(id);\n\tif (t[id].l>=l&&t[id].r<=r)\n\t{\n\t\tt[id].minn--;\n\t\tt[id].lazy++;\n\t\treturn ;\n\t}\n\tadd(id*2,l,r);add(id*2+1,l,r);\n\trenew(id);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tfor (int i=1;i<=m;i++)scanf(\"%d%d\",&s[i].l,&s[i].r);\n\tsort(s+1,s+m+1,cmp);\n\tbuild(1,1,s[m].r);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint tmp=query(1,s[i].l,s[i].r);\n\t\tif (tmp<=0)continue;\n\t\telse add(1,s[i].l,s[i].r),ans++;\n\t}\t\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1600132513,
        "uid": 227436,
        "name": "\u5e74\u534e\u5929\u5730",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]Barn Allocation G\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u8d2a\u5fc3+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff1b\n\n\u6211\u4eec\u5c06\u5976\u725b\u7684\u8def\u5f84\u62bd\u8c61\u6210\u7ebf\u6bb5\uff0c\u7136\u540e\u4ee5\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u53f3\u7aef\u70b9\u76f8\u540c\u7684\uff0c\u6211\u4eec\u6309\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u6570\u636e\u8303\u56f4\u544a\u8bc9\u6211\u4eec\u8981\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\uff1b\n\n\u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u4f1a\u53bb\u60f3\u79bb\u6563\u5316\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u9898\u6570\u636e\u8303\u56f4\u5185\uff0c\u7ebf\u6bb5\u975e\u5e38\u5bc6\u96c6\uff0c\u6ca1\u6709\u79bb\u6563\u5316\u7684\u5fc5\u8981\u6027\u3002\n\n\u5bf9\u4e8e\u4f18\u5316\u65f6\u95f4\u7684\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u6c38\u4e45\u5316\u3002\n\n\u4e0a\u4ee3\u7801\u2193\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN=(1<<17)-1;\n\nint n,m,ans;\nint a[MAXN],tree[MAXN<<1],add[MAXN<<1];\nstruct lint{\n    int l,r;\n}line[MAXN];\n\nvoid build(int k,int l,int r){\n    if(l==r){\n        tree[k]=a[l];\n        return;\n    }int i=k<<1,mid=l+r>>1;\n    build(i,l,mid);\n    build(i|1,mid+1,r);\n    tree[k]=min(tree[i],tree[i|1]);\n}\n\nbool cmp(lint a,lint b){\n    if(a.r==b.r) return a.l>b.l;\n    return a.r<b.r;\n}\n\nvoid cadd(int k,int l,int r,int le,int ri,int x){\n    if(le<=l&&r<=ri){\n        tree[k]+=x;\n        add[k]+=x;\n        return;\n    }int i=k<<1,mid=l+r>>1;\n    if(le<=mid) cadd(i,l,mid,le,ri,x);\n    if(mid<ri) cadd(i|1,mid+1,r,le,ri,x);\n    tree[k]=min(tree[i],tree[i|1])+add[k];\n}\n\nint ask(int k,int l,int r,int le,int ri,int x){\n    if(le<=l&&r<=ri) return tree[k]+x;\n    int i=k<<1,mid=l+r>>1;\n    int num=MAXN;\n    if(le<=mid) num=min(num,ask(i,l,mid,le,ri,x+add[k]));\n    if(mid<ri) num=min(num,ask(i|1,mid+1,r,le,ri,x+add[k]));\n    return num;\n}\n\nvoid init(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i){\n        scanf(\"%d\",&a[i]);\n    }build(1,1,n);\n    for(int i=1;i<=m;++i){\n        scanf(\"%d%d\",&line[i].l,&line[i].r);\n    }sort(line+1,line+m+1,cmp);\n    return;\n}\n\nvoid solve(){\n    for(int i=1;i<=m;++i){\n        if(ask(1,1,n,line[i].l,line[i].r,0)>0){\n            ++ans;\n            cadd(1,1,n,line[i].l,line[i].r,-1);\n        }\n    }return;\n}\n\nvoid write(){\n    printf(\"%d\\n\",ans);\n    return;\n}\n\nint main(){\n    init();\n    solve();\n    write();\n    return 0;\n}\n```",
        "postTime": 1522064375,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1937 \u3010[USACO10MAR]\u4ed3\u914d\u7f6eBarn Allocation\u3011"
    }
]