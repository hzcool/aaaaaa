[
    {
        "content": "#### \u4f3c\u4e4e\u8fd9\u9053\u9898\u6ca1\u6709\u4ec0\u4e48\u9898\u89e3,\n~~\u672c\u849f\u84bb\u6765\u6c34\u9898\u89e3\u5566~~\n\n### ~~~~~~~ \u5927\u91cf\u6587\u5b57\u8b66\u544a ~~~~~~~~~\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u53ef\u4ee5\u7528\u94fe\u8868\u52a0\u4e0a\u6a21\u62df\u505a\u51fa\u6765\n\n\u4e0d\u59a8\u5148\u770b\u770b\u6837\u4f8b\u5427\n\n\u9898\u610f\u53ef\u7528\u4e0b\u5217\u8868\u683c\u8868\u793a(\u5927\u81f4\u5c31\u8fd9\u4e2a\u610f\u601d)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3c4iv5qw.png)\n\n### **\u5927\u81f4\u601d\u8def:**\n\u6a21\u62df\u5373\u53ef(~~\u6a21\u62df\u5927\u6cd5\u597d!\u6a21\u62df\u5927\u6cd5\u597d!\u6a21\u62df\u5927\u6cd5\u597d!~~)\n\n### **\u5b9e\u73b0\u8fc7\u7a0b:**\n\n#### 1.\u4e00\u4e2a\u961f\u5217queue,\u4e00\u4e2a\u52a8\u6001\u6570\u7ec4vector,\u5206\u522b\u8868\u793a\u7b49\u5f85\u7684\u961f\u5217,\u548c\u5185\u5b58\u6761\u4e2d\u7684\u72b6\u6001\n```cpp\nvector<data> p;//\u5185\u5b58\u6761\nqueue<data> q;//\u7b49\u5f85\u961f\u5217\n```\n\n#### 2.\u4e00\u4e2a\u7ed3\u6784\u4f53data\n\n```cpp\nstruct data{\n    int t,m,p,s;//\u65f6\u523bt,\u5185\u5b58\u5360\u7528\u5927\u5c0fm,\u8fd0\u884c\u65f6\u95f4p,\u4ee5\u53ca\u8be5\u6570\u636e\u5360\u7528\u7684\u5185\u5b58\u5f00\u59cb\u7684\u4f4d\u7f6es\n    bool operator <(const data& x)const{\n        return s<x.s;//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n    }\n}x; //\u5b9a\u4e49\u4e00\u4e2ax\n```\n\n\n#### 3.\u4e09\u4e2a\u51fd\u6570\n\n(1)work\u51fd\u6570:\u5bf9\u65b0\u8f93\u5165\u7684\u6570\u8fdb\u884c\u64cd\u4f5c,\u5728\u5176\u4e2d\u5206\u522b\u8fdb\u884cwork_in\u548cwork_out\u4e24\u4e2a\u5b50\u51fd\u6570\u7684\u64cd\u4f5c,\u4ee5\u53ca\u66f4\u65b0\u6700\u65e9\u7ed3\u675f\u7684\u8fdb\u7a0bw,\u540c\u65f6\u5224\u65ad\u80fd\u5426\u63a8\u5165\u5185\u5b58,\u518d\u63a8\u5165\u7b49\u5f85\u6570\u5217\u7684\u4f5c\u7528\n\n```cpp\nvoid work(int t, int m, int p) {\n    while (t >= w) work_out();//\u5982\u679ct\u5df2\u7ecf\u5927\u4e8e\u6700\u65e9\u53ef\u4ee5\u7ed3\u675f\u7684\u8fdb\u7a0b\u7684\u65f6\u523b,\u90a3\u4e48\u8fdb\u5165work_out\u5b50\u51fd\u6570\n    x.t = t;\n    x.m = m;\n    x.p = p;//\u5bf9x\u8fdb\u884c\u66f4\u65b0\n    if (work_in(t)) w = min(w, t + p);//\u5982\u679c\u53ef\u4ee5\u88c5\u5165\u5185\u5b58,\u5219\u8fdb\u5165\u5b50\u51fd\u6570work_in,\u5e76\u4e14\u66f4\u65b0\u6700\u65e9\u53ef\u4ee5\u7ed3\u675f\u7684\u8fdb\u7a0b\u7684\u65f6\u523b\n    else q.push(x);//\u5426\u5219\u63a8\u5165\u7b49\u5f85\u961f\u5217\n}\n```\n(2)work_in\u5b50\u51fd\u6570:\u5224\u65ad\u80fd\u5426\u8fdb\u5165\u5185\u5b58,\u5e76\u4e14\u8fdb\u884c\u63d2\u5165\u5185\u5b58\u7684\u64cd\u4f5c\n\u5206\u522b\u4ece\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u548c\u5185\u5b58\u6761\u6700\u5f00\u59cb\u4e4b\u95f4\u3001\u76f8\u90bb\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u3001\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u548c\u5185\u5b58\u6761\u672b\u4e4b\u95f4\u5224\u65ad\u5185\u5426\u63d2\u5165\u5185\u5b58\n```cpp\nbool work_in(int t) {\n    if (p.empty() || p[0].s >= x.m) {//\u5982\u679cp\u961f\u5217\u4e3a\u7a7a,\u6216\u8005\u961f\u5217\u9996\u4e2a\u8fdb\u7a0b\u7684\u5f00\u59cb\u4f4d\u7f6e\u5df2\u7ecf\u6bd4x\u7684\u5360\u7528\u7a7a\u95f4\u5927\u4e86,\u5219\u6709\u673a\u53ef\u4e58\n        x.s = 0;//\u4ece\u5185\u5b58\u6761\u7b2c0\u4f4d\u5f00\u59cb\u5360\u7528\n        x.t = t;//\u50a8\u5b58\u65f6\u523bt\n        p.push_back(x);//\u63a8\u5165\u5185\u5b58\u6761\n        sort(p.begin(), p.end());//\u6392\u5e8f,\u5c06\u5f00\u59cb\u4f4d\u7f6e\u9760\u524d\u7684\u653e\u5728\u524d\u9762\n        return 1;//\u8fd4\u56de\u503c:\u53ef\u4ee5\u63d2\u5165\n    }\n    for (register int i = 1; i < p.size(); i++)\n        if (p[i].s - (p[i-1].s + p[i-1].m) >= x.m) {//\u5224\u65ad\u961f\u5217\u4e2d\u662f\u5426\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u7684\u5185\u5b58\u5927\u4e8ex\u7684\u5185\u5b58(\u6709\u673a\u53ef\u4e58)\n            x.s = p[i-1].s + p[i-1].m;//\u4ece\u5185\u5b58\u6761\u7b2ci-1\u4e2a\u8fdb\u7a0b\u7684\u4e0b\u4e00\u4f4d\u5f00\u59cb\u5360\u7528\n            x.t = t;//\u50a8\u5b58\u65f6\u523bt\n            p.push_back(x);//\u63a8\u5165\u5185\u5b58\u6761\n            sort(p.begin(), p.end());//\u6392\u5e8f,\u5c06\u5f00\u59cb\u4f4d\u7f6e\u9760\u524d\u7684\u653e\u5728\u524d\u9762\n            return 1;//\u8fd4\u56de\u503c:\u53ef\u4ee5\u63d2\u5165\n        }\n    int sz = p.size();\n    if (n - (p[sz-1].s + p[sz-1].m) >= x.m) {//\u5224\u65ad\u5185\u5b58\u6761\u672b\u548c\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5185\u5b58\u662f\u5426\u5927\u4e8ex\u7684\u5185\u5b58(\u6709\u673a\u53ef\u4e58)\n        x.s = p[sz-1].s + p[sz-1].m;//\u4ece\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u7684\u4e0b\u4e00\u4f4d\u5f00\u59cb\u5360\u7528\n        x.t = t;//\u50a8\u5b58\u65f6\u523bt\n        p.push_back(x);//\u63a8\u5165\u5185\u5b58\u6761\n        sort(p.begin(), p.end());//\u6392\u5e8f,\u5c06\u5f00\u59cb\u4f4d\u7f6e\u9760\u524d\u7684\u653e\u5728\u524d\u9762\n        return 1;//\u8fd4\u56de\u503c:\u53ef\u4ee5\u63d2\u5165\n    }\n    return 0;//\u8fd4\u56de\u503c:\u6ca1\u6709\u5730\u65b9\u53ef\u4ee5\u63d2\u5165(\u8fdb\u5165\u7b49\u5f85\u961f\u5217)\n}\n```\n(3)work_out\u5b50\u51fd\u6570:\u5c06\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u6570\u5f39\u51fa\n```cpp\nvoid work_out() {\n    int nw = INF;//\u5c06nw\u5b9a\u4e3a\u6700\u5927\u503c\n    for (register int i = 0; i < p.size(); i++)\n        if (p[i].t + p[i].p == w) p.erase(p.begin() + i--);//\u5220\u9664\u8fd9\u4e2a\u8fdb\u7a0b\n        else nw = min(nw, p[i].t + p[i].p);//\u66f4\u65b0nw\u4e3a\u6700\u5c0f\u503c\n    while (q.size()) {\n        x = q.front();\n        if (work_in(w)) {//\u5224\u65ad\u80fd\u5426\u8fdb\u5165\u5185\u5b58\u6761\n            nw = min(nw, q.front().t + q.front().p);//\u66f4\u65b0\n            q.pop();//\u5f39\u51fa\u9996\u4f4d\n            cnt++;//\u8ba1\u6570,\u7edf\u8ba1\u8fdb\u5165\u4e86\u7b49\u5f85\u961f\u5217\u7684\u8fdb\u7a0b\n        } else break;\n    }\n    w = nw;//\u66f4\u65b0w\n}\n```\n## \u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\n~~\u6284\u4ee3\u7801\u8005\u770b\u8fd9\u91cc~~\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3fffffff\nusing namespace std;\nint n,w=INF,cnt=0;\nstruct data{\n    int t,m,p,s;\n    bool operator <(const data& x)const{\n        return s<x.s;\n    }\n}x; \nvector<data> p;\nqueue<data> q;\nbool work_in(int t) {\n    if (p.empty() || p[0].s >= x.m) {\n        x.s = 0;\n        x.t = t;\n        p.push_back(x);\n        sort(p.begin(), p.end());\n        return 1;\n    }\n    for (register int i = 1; i < p.size(); i++)\n        if (p[i].s - (p[i-1].s + p[i-1].m) >= x.m) {\n            x.s = p[i-1].s + p[i-1].m;\n            x.t = t;\n            p.push_back(x);\n            sort(p.begin(), p.end());\n            return 1;\n        }\n    int sz = p.size();\n    if (n - (p[sz-1].s + p[sz-1].m) >= x.m) {\n        x.s = p[sz-1].s + p[sz-1].m;\n        x.t = t;\n        p.push_back(x);\n        sort(p.begin(), p.end());\n        return 1;\n    }\n    return 0;\n}\nvoid work_out() {\n    int nw = INF;\n    for (register int i = 0; i < p.size(); i++)\n        if (p[i].t + p[i].p == w) p.erase(p.begin() + i--);\n        else nw = min(nw, p[i].t + p[i].p);\n    while (q.size()) {\n        x = q.front();\n        if (work_in(w)) {\n            nw = min(nw, q.front().t + q.front().p);\n            q.pop();\n            cnt++;\n        } else break;\n    }\n    w = nw;\n}\nvoid work(int t, int m, int p) {\n    while (t >= w) work_out();\n    x.t = t;\n    x.m = m;\n    x.p = p;\n    if (work_in(t)) w = min(w, t + p);\n    else q.push(x);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    int t0,m0,p0;\n    while(scanf(\"%d%d%d\",&t0,&m0,&p0)==3 &&!(t0==0&&m0==0&&p0==0))\n        work(t0,m0,p0);\n    while(q.size()) work_out();\n    int ans=w;\n    for(register int i=0;i<p.size();i++)\n        ans=max(ans,p[i].t+p[i].p);//\u7edf\u8ba1\u7b54\u6848\n    printf(\"%d\\n%d\\n\",ans,cnt);\n    return 0;\n}\n```\n\u672c\u849f\u84bb\u5199\u9898\u89e3\u5f88\u7528\u5fc3,\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427",
        "postTime": 1588072237,
        "uid": 148195,
        "name": "gcwixsxr",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5763 \u3010[NOI1999]\u5185\u5b58\u5206\u914d\u3011"
    },
    {
        "content": "## \u672c\u6587\u63d0\u8981\n\u6587\u4e2d\u6709\u8bb8\u591a\u7b14\u8005\u5199\u9898\u89e3\u65f6\u53e3\u55e8\u7684\u505a\u6cd5\uff0c\u5f88\u591a\u5730\u65b9\u9700\u8981\u81ea\u5df1\u4e2a\u4eba\u8ba4\u771f\u601d\u8003\u5b9e\u73b0\u7684\u7406\u7531\u4e0e\u6b63\u786e\u6027\uff08\u867d\u7136\u672c\u9898\u662f\u4e2a\u6a21\u62df\uff09\uff0c\u5982\u679c\u8bf4\u67d0\u4e9b\u5730\u65b9\u4e0d\u592a\u660e\u767d\uff0c\u53ef\u4ee5\u79c1\u4fe1\u7b14\u8005\u4ee5\u5f97\u5230\u89e3\u7b54\uff0c\u5c3d\u91cf\u4e0d\u8981\u5728\u8bc4\u8bba\u533a\u53d1\u6709\u5173\u819c\u62dc\u4e00\u7c7b\u7684\u8bdd\u8bed\uff0c\u4ee5\u6253\u6270\u6b63\u5e38\u7684\u5b66\u672f\u4ea4\u6d41\u3002\n\n\u63d0\u8981\u5230\u6b64\u4e3a\u6b62\u3002\n\n## \u6b63\u6587\n\n\u672c\u9898\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684\u6a21\u62df\u9898\uff0c\u6a21\u62df\u9898\u9700\u8981\u7684\u5c31\u662f\u7ec6\u8282\u7684\u5904\u7406\u548c\u601d\u7ef4\u7684\u4e25\u8c28\u4ee5\u53ca\u5927\u8111\u7684\u6e05\u9192\uff0c\u8bf7\u4e0d\u8981\u5b66\u4e60\u67d0\u4e9b\u540c\u5b66\u5929\u5929\u6253\u6a21\u62df\u628a\u8111\u5b50\u7ed9\u6253\u574f\u4e86\uff08\u751a\u81f3\u62ff\u4e2a\u5c0f\u79ef\u6728\u5230\u673a\u623f\u6a21\u62df\u7acb\u4f53\u56fe\uff09\u3002\n\n\u6211\u4eec\u9700\u8981\u5b8c\u6210\u7684\u64cd\u4f5c\u3002\n\n### \u4e00\u3001\u6a21\u62df\u5730\u5740\u683c\n\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u94fe\u8868\u6765\u5b8c\u6210\u8fd9\u6837\u4e00\u4e2a\u64cd\u4f5c\uff0c\u7531\u4e8e\u6570\u636e\u662f $10^9$\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u6765\u5b58\u50a8\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b:\n~~~cpp\nstruct node{\n\tint StartPosition,EndPosition;//\u524d\u8005\u8868\u793a\u5f00\u59cb\u4f4d\u7f6e\uff0c\u540e\u8005\u8868\u793a\u7ed3\u675f\u4f4d\u7f6e\u3002\n\tint id;//\u5b58\u50a8id\u4ee5\u7528\u540e\u6765\u7684\u904d\u5386\u64cd\u4f5c\u505a\u51c6\u5907\n\tnode() {}\n\tnode(const int x,const int y,const int z) {StartPosition = x,EndPosition = y,id = z;}\n};\nvector<node> List;//\u7528vector\u6765\u5b9e\u73b0\u94fe\u8868\uff0c\u4f46\u662f\u63d2\u5165\u64cd\u4f5c\u662f O(len) \u7684\uff0c\u6240\u4ee5\u4f1a\u94fe\u8868\u7684\u540c\u5b66\u8fd8\u662f\u5efa\u8bae\u76f4\u63a5\u7528\u94fe\u8868\u6765\u64cd\u4f5c\u3002\n~~~\n\n### \u4e8c\u3001\u65f6\u95f4\u8f74\n\u65f6\u95f4\u8f74\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u6765\u5b9e\u73b0\uff0c\u76f4\u63a5\u628a\u65f6\u95f4\u4f18\u5148\u7684\u653e\u5728\u524d\u9762\uff0c\u5176\u4ed6\u7684\u653e\u5728\u540e\u9762\u641e\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n~~~cpp\nstruct TimeTable{\n\tint EndTime,id;//\u524d\u8005\u8868\u793a\u7ed3\u675f\u65f6\u95f4\uff0c\u540e\u8005\u8868\u793aid\u4ee5\u5e72\u6389\u524d\u9762\u6240\u63d0\u5230\u7684\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n\tTimeTable(){}\n\tTimeTable(const int x,const int y) {EndTime = x,id = y;}\t\n\tbool operator<(const TimeTable&tem)const{return EndTime > tem.EndTime;}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7528\u4ee5\u6392\u5e8f\n};\npriority_queue<TimeTable>Time_Queue;\n~~~\n\n### \u4e09\u3001\u7b49\u5f85\u961f\u5217\n\u7531\u4e8e\u7b49\u5f85\u961f\u5217\u662f\u4e0d\u8981\u6c42\u7528\u65f6\u95f4\u6392\u5e8f\u7684\uff0c\u800c\u4e14\u540e\u8fdb\u961f\u7684\u5143\u7d20\u5c31\u7b97\u6709\u8db3\u591f\u7684\u5185\u5b58\u683c\u4e5f\u4e0d\u80fd\u641e\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u53ea\u7528\u5728\u610f\u7b2c\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n~~~cpp\nstruct element { \n\tint M,P;//\u5982\u9898\u610f\u3002\n\telement(){}\n\telement(const int x,const int y) {M = x,P = y;}\n};\ndeque< element > Wait_Queue;\n~~~\n\n### \u56db\u3001\u8bbf\u95ee\u51fd\u6570\n\n\u7136\u540e\u5c31\u662f `solve` \u51fd\u6570\u7684\u5b9e\u73b0\u4e86\uff0c\u6709\u4e86\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c\u5b8c\u6210\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u4e0d\u662f\u5f88\u96be\u4e86\u3002\n\n**\u9700\u8981\u6ce8\u610f\u7ec6\u8282**\n\n~~~cpp\ninline void solve(const int x,const int y,const int z) {\n\twhile(!Time_Queue.empty()) {\n\t\tTimeTable tem = Time_Queue.top();\n\t\tif(tem.EndTime <= x) slote();//slote\u51fd\u6570\u8868\u793a\u5904\u7406\u5e94\u8be5\u91ca\u653e\u7684\u5185\u5b58\u683c\n\t\telse break;\n\t}\n\ttim = x;\n\tbool flag = true;\n\tfor(int i = 1; i <= l && flag; i++) {\n\t\tif(List[i].StartPosition - List[i - 1].EndPosition - 1 >= y) {\n\t\t\tList.insert(List.begin() + i,node(List[i - 1].EndPosition + 1,List[i - 1].EndPosition + y,++tot));//\u6709\u5173\u8fd9\u4e00\u6bb5\uff0c\u662f\u56e0\u4e3a\u6211\u5728\u5f00\u59cb\u7684\u65f6\u5019\u5728 vector \u7684\u5934\u90e8\u548c\u5c3e\u90e8\u63d2\u5165\u4e86\u4e24\u4e2a\u6807\u6746\uff0c\u5728\u4e0b\u9762\u7684\u5b8c\u6574\u4ee3\u7801\u4e2d\u6709\u89e3\u91ca\u3002\n\t\t\tTime_Queue.push(TimeTable(tim + z,tot));\n\t\t\tl++,flag = false;\n\t\t}\n \t}\n \tif(flag) Wait_Queue.push_back(element(y,z)),ans++;\n \treturn ;\n}\n~~~\n\n### \u6574\u4f53\u4ee3\u7801\n~~~cpp\n#include<bits/stdc++.h>\n#define F(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nusing namespace std;\nconst int N = 1e5 + 1;\nstruct TimeTable{\n\tint EndTime,id;\n\tTimeTable(){}\n\tTimeTable(const int x,const int y) {EndTime = x,id = y;}\t\n\tbool operator<(const TimeTable&tem)const{return EndTime > tem.EndTime;}\n};\npriority_queue<TimeTable>Time_Queue;\nstruct element { \n\tint M,P;\n\telement(){}\n\telement(const int x,const int y) {M = x,P = y;}\n};\ndeque< element > Wait_Queue;\nstruct node{\n\tint StartPosition,EndPosition;\n\tint id;\n\tnode() {}\n\tnode(const int x,const int y,const int z) {StartPosition = x,EndPosition = y,id = z;}\n};\nvector<node> List;\nint n,tim,ans,l;\nint tot;\ninline void input() {\n\tscanf(\"%d\",&n);\n\treturn ;\n}\ninline bool AskForWaitQueue() {//\u8bbf\u95ee\u7b49\u5f85\u961f\u5217\u7684\u5143\u7d20\n\tif(Wait_Queue.empty()) return false;\n\telement tem = Wait_Queue.front();\n\tfor(int i = 1; i <= l; i++) {\n\t\tif(List[i].StartPosition - List[i - 1].EndPosition - 1 >= tem.M) {\n\t\t\tWait_Queue.pop_front();//\u627e\u5230\u5c31\u76f4\u63a5\u5f39\u51fa\n\t\t\tList.insert(List.begin() + i,node(List[i - 1].EndPosition + 1,List[i - 1].EndPosition + tem.M,++tot));\n\t\t\tTime_Queue.push(TimeTable(tim + tem.P,tot));\n\t\t\tl++;\n\t\t\treturn true;//\u5982\u679c\u8bf4\u53ef\u4ee5\u585e\u5f97\u8bdd\u5c31\u518d\u770b\u770b\u80fd\u4e0d\u80fd\u518d\u585e\u3002\n\t\t}\n\t}\n\treturn false;\n}\ninline void slote() {//\u8fd9\u91cc\u662f\u53ef\u4ee5\u76f4\u63a5\u5f39\u51fa\u7684\n\tTimeTable tem = Time_Queue.top();Time_Queue.pop();\n\ttim = tem.EndTime;\n\tfor(int i = 1; i <= l; i++) {\n\t\tif(List[i].id == tem.id) {\n\t\t\tList.erase(List.begin() + i);\n\t\t\tl--;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(Time_Queue.empty()) goto D;//\u5982\u679c\u8bf4\u5f53\u524d\u7684\u65f6\u95f4\u8f74\u76f4\u63a5\u7a7a\u4e86\u5c31\u8df3\u5411D\u70b9\uff0cgoto\u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8ewindows\u4e2d\u7684goto\n\ttem = Time_Queue.top();\n\tif(tem.EndTime == tim) slote();//\u540c\u4e00\u65f6\u95f4\u70b9\u7684\u5185\u5b58\u683c\u5168\u90e8\u4e00\u8d77\u641e\u51fa\u6765\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u5f88\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u51fa\u4f18\u5148\u961f\u5217\u7684\u987a\u5e8f\u539f\u56e0\u5bfc\u81f4\u63d2\u5165\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u5185\u5b58\u683c\u7684\u65f6\u5019\u4f4d\u7f6e\u4e0d\u5bf9\u3002\n\tD:;//\u8fd9\u91cc\u5c31\u662f\u8df3\u5411\u7684\u5730\u65b9\u3002\n\twhile(AskForWaitQueue());//\u4e00\u76f4\u5f80\u91cc\u585e\n\treturn ;\n}\ninline void solve(const int x,const int y,const int z) {\n\twhile(!Time_Queue.empty()) {\n\t\tTimeTable tem = Time_Queue.top();\n\t\tif(tem.EndTime <= x) slote();\n\t\telse break;\n\t}\n\ttim = x;\n\tbool flag = true;\n\tfor(int i = 1; i <= l && flag; i++) {\n\t\tif(List[i].StartPosition - List[i - 1].EndPosition - 1 >= y) {\n\t\t\tList.insert(List.begin() + i,node(List[i - 1].EndPosition + 1,List[i - 1].EndPosition + y,++tot));\n\t\t\tTime_Queue.push(TimeTable(tim + z,tot));\n\t\t\tl++,flag = false;\n\t\t}\n \t}\n \tif(flag) Wait_Queue.push_back(element(y,z)),ans++;\n \treturn ;\n}\ninline void work() {\n\tint x,y,z;\n\tscanf(\"%d%d%d\",&x,&y,&z);\n\tList.push_back(node(-1,-1,-1));//\u5934\u90e8\n\tList.push_back(node(n,n,-1));//\u5c3e\u90e8\n\tl = 1;//\u957f\u5ea6\uff0c\u7531\u4e8evector\u7684\u957f\u5ea6\u8fd8\u8981\u5199\u4e2a\u51fd\u6570\u7684\u8bdd\u4f1a\u6162\u4e00\u70b9\uff08\u867d\u7136\u65e0\u6240\u8c13\u5566\uff09\n\twhile(true) {\n\t\tif(x == 0 && y == 0 && z == 0) break;\n\t\tsolve(x,y,z);\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t}\n\twhile(!Time_Queue.empty())slote();\n\treturn ;\n}\ninline void print() {\n\tprintf(\"%d\\n%d\",tim,ans);\n\treturn ;\n}\nint main() {\n\tF(\"memory\");\n\tinput();\n\twork();\n\tprint();\n\treturn 0;\n} \n~~~\n\n## \u9898\u5916\u8bdd\n\u4e2a\u4eba\u7684\u7801\u98ce\u53ef\u80fd\u4e0d\u9002\u5408\u5f88\u591a\u4eba\uff0c\u4f46\u662f\u5e0c\u671b\u5404\u4f4d\u8bb0\u4f4f\u770b\u9898\u89e3\u53ea\u662f\u4e3a\u4e86\u770b\u4e00\u4e2a\u601d\u8def\uff0c\u771f\u6b63\u7684\u5b9e\u73b0\u662f\u81ea\u5df1\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u624d\u80fd\u591f\u63d0\u5347\uff0c\u800c\u4e0d\u662f\u4e00\u5473\u5730\u76f4\u63a5\u6284\u88ad\u4ed6\u4eba\u7684\u9898\u89e3\u3002\n\n\u5e0c\u671b\u6211\u5199\u7684\u4ee3\u7801\u548c\u601d\u8def\u80fd\u591f\u7ed9\u5927\u5bb6\u5e26\u6765\u505a\u9898\u7684\u542f\u793a\u3002",
        "postTime": 1617260669,
        "uid": 366935,
        "name": "KAMIYA_KINA",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5763 [NOI1999] \u5185\u5b58\u5206\u914d"
    },
    {
        "content": "\u6709\u70b9~~\u6bd2\u7624~~\u7684\u6a21\u62df\u3002\n\n\u6211\u7528 $\\texttt{set}$\u200b ~~\u4e71\u641e~~\u7f16\u5199\u4e86\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\uff0c\u53d1\u73b0\u6bd4\u5f88\u591a\u4eba\u7684\u4ee3\u7801\u8dd1\u5f97\u5feb\uff0c\u751a\u81f3\u5728\u6d1b\u8c37\u6700\u4f18\u89e3\u524d\u5217\uff0c\u4f46\u662f\u7801\u91cf\u5927\u4e86\u4e0d\u5c11\u3002\n\n\n\n## \u5206\u6790\n\n\u5b9e\u73b0\u7684\u601d\u8def\u6bd4\u8f83\u660e\u663e\uff1a\n\n> \u8bb0\u4e00\u5171\u6709 $m$ \u4e2a\u8fdb\u7a0b\u3002\n\n- \u6211\u4eec\u4ece $1\\to m$ \u679a\u4e3e\u6bcf\u4e2a\u8fdb\u7a0b\u5e76\u8fdb\u884c\u5904\u7406\u3002\n- \u5728\u5904\u7406\u5230\u7b2c $i$\u200b\u200b \u4e2a\u8fdb\u7a0b\u524d\uff0c\u6211\u4eec\u5148\u8fdb\u884c**\u7ed3\u7b97**\uff08$\\texttt{account}$\u200b\u200b\u200b\u200b\uff09\uff0c\u5c31\u662f\u5c06\u5728\u7b2c $i$\u200b\u200b \u4e2a\u8fdb\u7a0b\u6240\u5728\u7684**\u7533\u8bf7\u65f6\u523b**\u4e4b\u524d\u80fd\u591f\u7ed3\u675f\u7684\u8fdb\u7a0b\u5168\u90e8\u6e05\u9664\uff0c\u5e76\u5c06**\u7b49\u5f85\u961f\u5217**\u4e2d\u80fd\u591f\u88ab\u52a0\u5165\u7684\u8fdb\u7a0b\u52a0\u5165\u5185\u5b58\u4e2d\u3002\n- \u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u8fdb\u7a0b\uff1a\u5982\u679c\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u90a3\u4e48\u5c31\u4e22\u8fdb\u53bb\uff1b\u53cd\u4e4b\uff0c\u5c06\u5176\u52a0\u5165**\u7b49\u5f85\u961f\u5217**\u4e2d\u3002\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u9762\u7684\u6a21\u62df\u8fc7\u7a0b\u6d89\u53ca\u5bf9\u533a\u95f4\u7684\u8d4b\u503c\uff1a\u5f53\u5185\u5b58\u88ab\u5360\u7528\u7684\u65f6\u5019\u8bb0\u4e3a $1$\uff0c\u53cd\u4e4b\u4e3a $0$\u3002\n\n\u5bf9\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a $\\texttt{set}$ \u6765\u7ef4\u62a4\u533a\u95f4\uff1a\n\n\u533a\u95f4\u6709\u4e09\u4e2a\u5c5e\u6027\uff1a\u5de6\u53f3\u7aef\u70b9 $l, r$\uff0c\u503c $val(0/1)$\u3002\n\n\u7ef4\u62a4\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- $\\texttt{find(len):}$\u200b\u200b \u76f4\u63a5\u5bf9 $\\texttt{set}$\u200b \u7684\u5143\u7d20\uff08\u5373\u533a\u95f4\uff09\u8fdb\u884c\u904d\u5386\uff0c\u5f53\u533a\u95f4\u503c\u4e3a $0$\u200b\u200b \u4e14\u957f\u5ea6 $\\geq len$ \u65f6\uff0c\u8fd4\u56de\u8be5\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de $-1$\u3002\n- $\\texttt{eval(l, r, val):}$ \u5373\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u5f53 $val=0$ \u65f6\uff0c\u4e5f\u5c31\u662f\u539f\u6765\u7684\u533a\u95f4\u4ece $1\\to 0$\uff0c\u6545\u68c0\u67e5\u8be5\u533a\u95f4\u5de6\u3001\u53f3\u533a\u95f4\u662f\u5426\u4e5f\u662f $0$\uff0c\u5982\u679c\u662f\u5219\u9700\u8981\u8fdb\u884c\u5408\u5e76\u518d\u63d2\u5165 $\\texttt{set}$\uff1b\u5f53 $val=1$ \u76f4\u63a5\u8fdb\u884c\u503c\u7684\u4fee\u6539\u5373\u53ef\u3002\u200b\u200b\n\n\n\n## \u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define debug(x) cerr << #x << \": \" << (x) << endl\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define dwn(i,a,b) for(int i=(a);i>=(b);i--)\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n\n#define x first\n#define y second\nusing pii = pair<int, int>;\nusing ll = long long;\n\ninline void read(int &x){\n    int s=0; x=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') {if(ch=='-')x=-1;ch=getchar();}\n    while(ch>='0' && ch<='9') s=(s<<3)+(s<<1)+ch-'0',ch=getchar();\n    x*=s;\n}\n\nconst int N=10010;\n\nint n, m, ts, res;\n\nstruct Event{\n    int t, m, p;\n}e[N];\n\nstruct Cmd{\n    int t, l, r; // \u7ed3\u675f\u7684\u65f6\u95f4, [l, r]\n    bool operator < (const Cmd &o)const{\n        return t>o.t;\n    }\n};\npriority_queue<Cmd> clk;\n\nqueue<pii> q;\n\nstruct Seg{\n    int l, r;\n    mutable bool val;\n\n    bool operator < (const Seg &o)const{\n        return l<o.l;\n    }\n\n    int len(){\n        return r-l+1;\n    }\n};\nset<Seg> st;\n\nint find(int len){\n    for(auto i: st) if(!i.val && i.len()>=len) return i.l; \n    return -1;\n}\n\nvoid eval(int l, int r, bool val){\n    auto it=--st.upper_bound({l, 0, 0});\n    if(val){\n        int L=it->l, R=it->r;\n        st.erase(it);\n\n        if(L<=l-1) st.insert({L, l-1, 0});\n        if(r+1<=R) st.insert({r+1, R, 0});\n        st.insert({l, r, 1});\n    }\n    else{\n        auto L=it, R=it;\n        if(it!=begin(st)) L--;\n        if(it!=end(st)) R++;\n\n        auto seg=*it;\n        if(it!=L && L->val==0) seg.l=L->l, st.erase(L);\n        if(R!=end(st) && R->val==0) seg.r=R->r, st.erase(R);\n        seg.val=0;\n\n        st.erase(it);\n        st.insert(seg);\n    }\n}\n\nvoid account(int lim){\n    while(clk.size() && clk.top().t<=lim){\n        auto tmp=clk.top(); clk.pop();\n        ts=tmp.t;\n\n        int l=tmp.l, r=tmp.r;\n        eval(l, r, 0);\n        if(clk.size() && clk.top().t==tmp.t) continue; // \u540c\u4e00\u65f6\u523b\u7684\u9700\u8981\u5168\u90e8\u6e05\u9664\n\n        int k;\n        while(q.size() && (k=find(q.front().x))!=-1){\n            auto [x, y]=q.front(); q.pop();\n            eval(k, k+x-1, 1);\n            clk.push({ts+y, k, k+x-1});\n        }\n    }\n}\n\nint main(){\n    cin>>n;\n    int a, b, c;\n    while(cin>>a>>b>>c, a || b || c) e[++m]={a, b, c};\n\n    st.insert({1, n, 0});\n    rep(i,1,m){\n        account(e[i].t);\n\n        int k=find(e[i].m);\n        ts=e[i].t;\n\n        if(~k){\n            int l=k, r=k+e[i].m-1;\n            eval(l, r, 1);\n            clk.push({ts+e[i].p, l, r});\n        }\n        else{\n            q.push({e[i].m, e[i].p});\n            res++;\n        }\n    }\n    account(2e9+5);\n\n    cout<<ts<<endl<<res<<endl;\n\n    return 0;\n}\n\n```\n\n",
        "postTime": 1645010530,
        "uid": 138960,
        "name": "Tenshi",
        "ccfLevel": 0,
        "title": "P5763 [NOI1999] \u5185\u5b58\u5206\u914d"
    },
    {
        "content": "\u672c\u9898\u662f\u4e00\u4e2a\u5b8c\u5168\u8003\u5bdf\u6570\u636e\u7ed3\u6784\u7684\u6a21\u62df\u9898\n\n\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784:\u961f\u5217\uff0c\u5806\uff0c\u94fe\u8868\n\n\u672c\u4eba\u66f4\u559c\u6b22\u7528STL\uff0c\u624b\u5199\u515a\u8bf7\u5ffd\u7565\n\n\u4ee3\u7801\uff08\u6709\u8be6\u7ec6\u6ce8\u91ca\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> PII;\nqueue<PII> waiting;//\u7b49\u5f85\u961f\u5217,\u5b58\u50a8 \u5185\u5b58\u957f\u5ea6 \u548c \u5360\u7528\u65f6\u95f4\nset<PII> running;//\u94fe\u8868\uff0c\u5b58\u50a8  \u8d77\u59cb\u4e0b\u6807 \u548c \u957f\u5ea6\npriority_queue<PII,vector<PII>,greater<PII> > endtimes;//\u5c0f\u6839\u5806\uff0c\u5b58\u50a8 \u7ed3\u675f\u65f6\u95f4 \u548c \u8d77\u59cb\u4e0b\u6807\nint n,t,m,p,ans_cnt,last_out_time;\nbool assign(int t,int m,int p)\n{\n    set<PII>::iterator it;\n    for(it=running.begin(); it!=running.end(); it++)//\u904d\u5386\u94fe\u8868\n    {\n        set<PII>::iterator jt=it; \n        jt++;//jt\u6307\u5411it\u6240\u6307\u7684\u4e0b\u4e00\u4e2a\u7a7a\u95f4\n        if(jt!=running.end())\n        {\n            if(m<=jt->first-(it->first+it->second))//\u5982\u679cm\u5c0f\u4e8e\u7b49\u4e8e\u4e24\u6bb5\u533a\u95f4\u4e4b\u95f4\u7684\u7a7a\u9699,\u90a3\u4e48\u53ef\u4ee5\u5206\u914d\n            {\n                int start=it->first+it->second;\n                running.insert({start,m});\n                endtimes.push({t+p,start});\n                return true;\n            }\n        }\n    }\n    return false;\n}\nvoid release(int t)//\u91ca\u653e\u6240\u6709\u7ed3\u675f\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8et\u7684\u5185\u5b58\n{\n    while(!endtimes.empty() && endtimes.top().first<=t)\n    {\n        int tmp=endtimes.top().first;//\u6682\u65f6\u5b58\u50a8\u4e00\u4e0b\u8fd9\u4e2a\u5806\u9876\u5143\u7d20\u7684\u7ed3\u675f\u65f6\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u628a\u6240\u6709\u8fd9\u4e2a\u65f6\u95f4\u7684\u90fd\u5220\u6389\n        last_out_time=tmp;\n        while(!endtimes.empty() && endtimes.top().first==tmp)//\u5904\u7406\u5c0f\u6839\u5806\n        {\n            PII tmpp=endtimes.top(); endtimes.pop();\n            set<PII>::iterator it=running.lower_bound({tmpp.second,0});\n            running.erase(it);\n        }\n        while(!waiting.empty())//\u5904\u7406\u7b49\u5f85\u961f\u5217\n        {\n            PII tmpp=waiting.front();\n            if(assign(tmp,tmpp.first,tmpp.second))//\u5982\u679c\u5f53\u524d\u7a7a\u95f4\u53ef\u4ee5\u5206\u914d\u7ed9\u961f\u9996\n                waiting.pop();\n            else break;//\u4e00\u65e6\u4e0d\u80fd\u5206\u914d\u5c31break\uff0c\u56e0\u4e3a\u961f\u9996\u4f18\u5148\u7ea7\u6700\u9ad8\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    running.insert({-1,1});//\u5de6\u8fb9\u754c \n    running.insert({n,1});//\u53f3\u8fb9\u754c\n    while(cin>>t>>m>>p,t || m || p)//\u8bfb\u51653\u4e2a0\u7ed3\u675f\n    {\n        release(t);//\u91ca\u653e\u6240\u6709\u7ed3\u675f\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8et\u7684\u5185\u5b58\n        if(!assign(t,m,p)) //\u5982\u679c\u4e0d\u80fd\u5206\u914d\uff0c\u5c31\u52a0\u5165\u7b49\u5f85\u961f\u5217\n        {\n            waiting.push({m,p});\n            ans_cnt++;\n        }\n    }\n    release(1e9+5);//\u53ea\u6709\u628a\u6240\u6709\u5185\u5b58\u90fd\u91ca\u653e\u4e86\uff0c\u624d\u80fd\u591f\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u5185\u5b58\u91ca\u653e\u7684\u65f6\u95f4\n    printf(\"%d\\n%d\",last_out_time,ans_cnt);\n    return 0;\n}\n```\n",
        "postTime": 1581763805,
        "uid": 91375,
        "name": "crh1272336175",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5763 \u3010[NOI1999]\u5185\u5b58\u5206\u914d\u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u9053\u9898\u548c CSP-S2021 \u7684 T1 \u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\uff0c\u53ea\u662f\u4e24\u8005\u7684\u4fa7\u91cd\u70b9\u4e0d\u540c\uff0c\u4e00\u4e2a\u662f\u5f31\u5316\u6570\u636e\u8303\u56f4\u7684\u666e\u9002\u60c5\u51b5\uff0c\u4e00\u4e2a\u662f\u5f3a\u5316\u6570\u636e\u8303\u56f4\u7684\u7279\u6b8a\u60c5\u51b5\uff08\u5373\u672c\u9898\u4e2d $m=1$\uff09\u3002\n\n## \u9898\u76ee\u5927\u610f\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5185\u5b58\u6761\uff0c\u4e0b\u6807\u4e3a $0\\sim n-1$\u3002\u73b0\u5728\u6709\u82e5\u5e72\u4e2a\u8fdb\u7a0b\uff0c\u6309\u5f00\u59cb\u65f6\u523b\u6392\u5e8f\uff0c\u7528 $(t, m, p)$ \u8868\u793a\u8fdb\u7a0b\u5f00\u59cb\u7684\u65f6\u523b\uff0c\u9700\u8981\u5360\u7528\u7684**\u8fde\u7eed**\u5185\u5b58\u957f\u4ee5\u53ca\u6301\u7eed\u7684\u65f6\u95f4\u3002\n\n- \u82e5 $t$ \u65f6\u523b\u5185\u5b58\u4e2d\u5b58\u5728\u957f\u5ea6\u4e3a $m$ \u7684\u7a7a\u95f2\u5730\u5740\u7247\uff0c\u5219\u7cfb\u7edf\u5c06\u8fd9 $m$ \u4e2a\u7a7a\u95f2\u5355\u5143\u5206\u914d\u7ed9\u8be5\u8fdb\u7a0b\u3002\u82e5\u5b58\u5728\u591a\u4e2a\u957f\u5ea6\u4e3a $m$ \u4e2a\u7a7a\u95f2\u5730\u5740\u7247\uff0c\u5219\u7cfb\u7edf\u5c06**\u9996\u5730\u5740\u6700\u5c0f**\u7684\u90a3\u4e2a\u7a7a\u95f2\u5730\u5740\u7247\u5206\u914d\u7ed9\u8be5\u8fdb\u7a0b\u3002\n\n- \u5982\u679c $t$ \u65f6\u523b\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a $m$ \u7684\u7a7a\u95f2\u5730\u5740\u7247\uff0c\u5219\u8be5\u8fdb\u7a0b\u88ab\u653e\u5165\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\u3002\u5bf9\u4e8e\u5904\u4e8e\u7b49\u5f85\u961f\u5217\u961f\u5934\u7684\u8fdb\u7a0b\uff0c\u53ea\u8981\u5728\u4efb\u4e00\u65f6\u523b\uff0c\u5b58\u5728\u957f\u5ea6\u4e3a $m$ \u7684\u7a7a\u95f2\u5730\u5740\u7247\uff0c\u7cfb\u7edf**\u9a6c\u4e0a**\u5c06\u8be5\u8fdb\u7a0b\u53d6\u51fa\u961f\u5217\uff0c\u5e76\u4e3a\u5b83\u5206\u914d\u5185\u5b58\u5355\u5143\u3002\u6ce8\u610f\uff0c\u5728\u8fdb\u884c\u5185\u5b58\u5206\u914d\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c**\u5904\u4e8e\u7b49\u5f85\u961f\u5217\u961f\u5934\u7684\u8fdb\u7a0b\u7684\u5904\u7406\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u961f\u5217\u4e2d\u7684\u5176\u5b83\u8fdb\u7a0b\u4e0d\u80fd\u5148\u4e8e\u961f\u5934\u8fdb\u7a0b\u88ab\u5904\u7406**\u3002\n\n\u73b0\u5728\u7ed9\u51fa\u4e00\u7cfb\u5217\u63cf\u8ff0\u8fdb\u7a0b\u7684\u6570\u636e\uff0c\u8bf7\u7f16\u5199\u4e00\u7a0b\u5e8f\u6a21\u62df\u7cfb\u7edf\u5206\u914d\u5185\u5b58\u7684\u8fc7\u7a0b\uff0c\u6c42\u51fa\u8fd0\u884c\u6240\u6709\u8fdb\u7a0b\u9700\u8981\u7684\u65f6\u95f4\u4ee5\u53ca**\u8fdb\u5165\u8fc7**\u7b49\u5f85\u961f\u5217\u7684\u8fdb\u7a0b\u6570\u3002\n\n## \u5927\u4f53\u601d\u8def\n\u672c\u9898\u662f\u4e00\u9053\u5927\u6a21\u62df\uff0c\u9996\u5148\u8003\u8651\u4f7f\u7528\u54ea\u4e9b\u6570\u636e\u7ed3\u6784\u3002\n\n\u5bf9\u4e8e\u7b49\u5f85\u961f\u5217\uff0c\u663e\u7136\u4f7f\u7528 STL \u4e2d\u7684 queue \u8fdb\u884c\u5b9e\u73b0\u3002\u7531\u4e8e\u8fdb\u5165\u7b49\u5f85\u961f\u5217\u7684\u8fdb\u7a0b\u7684\u5b9e\u9645\u5f00\u59cb\u65f6\u523b\u4e0d\u7b49\u4e8e\u5176\u672c\u8eab\u7684 $t$\uff0cqueue \u4e2d\u53ea\u9700\u8981\u50a8\u5b58\u4e24\u4e2a\u53d8\u91cf $(m, p)$\u3002\n\n\u5bf9\u4e8e\u5185\u5b58\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u6bcf\u4e00\u6bb5\u5360\u7528\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4e0b\u6807\u3001\u957f\u5ea6\u548c\u91ca\u653e\u65f6\u95f4\u3002\u5176\u9700\u8981\u652f\u6301\u7ebf\u6027\u626b\u63cf\u3001\u63d2\u5165\u5220\u9664\u7684\u64cd\u4f5c\uff0c\u6700\u597d\u80fd\u81ea\u52a8\u6309\u8d77\u59cb\u4e0b\u6807\u6392\u5e8f\uff0c\u8003\u8651\u7528 set \u5b9e\u73b0\u3002\n\n\u7531\u4e8e\u672c\u9898\u4e2d $n\\le 10^9$\uff0c\u65e0\u6cd5\u76f4\u63a5\u679a\u4e3e\u65f6\u95f4\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4ece\u5c0f\u5230\u5927\u8bb0\u5f55\u91ca\u653e\u65f6\u95f4\u5bf9\u5e94 set\u3002\u8003\u8651\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u53d8\u91cf (\u91ca\u653e\u65f6\u95f4\uff0c\u8d77\u59cb\u4e0b\u6807)\uff0c\u5176\u4e2d\u91ca\u653e\u65f6\u95f4\u4f5c\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8d77\u59cb\u4e0b\u6807\u7528\u4e8e\u5bf9\u5e94 set\u3002\n\n\u8fd9\u6837\uff0cset \u4e2d\u53ef\u4ee5\u4e0d\u7528\u8bb0\u5f55\u91ca\u653e\u65f6\u95f4\uff0c\u4e09\u4e2a\u6570\u636e\u7ed3\u6784\uff08\u961f\u5217\u3001set\u3001\u5c0f\u6839\u5806\uff09\u5747\u662f\u57fa\u4e8e\u4e8c\u5143\u53d8\u91cf\uff0c\u7528 pair \u5373\u53ef\u3002\n\n```cpp\nqueue <PII> waits;   // first: length M, second: time P\nset<PII> st;         // first: begin   , second: length M\npriority_queue <PII, vector<PII>, greater<PII> > q; // first: time to release, second: begin\nint n, tim, cnt;\n```\n\n\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u7ec4 $(t, m, p)$\uff0c\n\n1. \u91ca\u653e\u6240\u6709\u91ca\u653e\u65f6\u95f4 $\\le t$ \u7684\u8fdb\u7a0b\uff0c\u5e76\u5224\u65ad\u7b49\u5f85\u961f\u5217\u4e2d\u662f\u5426\u6709\u53ef\u4ee5\u52a0\u5165\u7684\u3002\n\n```cpp\ninline void release(int t) {\n\twhile(!q.empty() && q.top().first <= t) { // \u4ece\u5c0f\u6839\u5806\u4e2d\u627e\u51fa\u91ca\u653e\u65f6\u95f4 <=t \u7684\u8fdb\u7a0b\n\t\tint T = q.top().first;\n\t\twhile(!q.empty() && q.top().first == T) { // \u5c06\u76f8\u540c\u91ca\u653e\u65f6\u95f4\u7684\u8fdb\u7a0b\u540c\u65f6\u91ca\u653e\n\t\t\tPII x = q.top(); \n\t\t\tq.pop();\n\t\t\tauto it = st.lower_bound({x.second, 0});\n\t\t\tst.erase(it);\n\t\t}\n\t\ttim = T; // \u66f4\u65b0\u5b8c\u6210\u6240\u6709\u8fdb\u7a0b\u7684\u6700\u665a\u65f6\u523b\n\t\twhile(!waits.empty()) { // \u67e5\u770b\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u80fd\u5426\u83b7\u5f97\u5185\u5b58\n\t\t\tPII x = waits.front();\n\t\t\tif(give(T, x.first, x.second)) waits.pop();\n\t\t\telse break;\n\t\t}\n\t}\n}\n```\n\n2. \u5c1d\u8bd5\u63d2\u5165 $(t, m, p)$\uff0c\u82e5\u6ee1\u8db3\u5219\u5360\u7528\u5185\u5b58\uff0c\u82e5\u4e0d\u6ee1\u8db3\u5219\u63d2\u5165\u7b49\u5f85\u961f\u5217\uff0c\u5e76\u7d2f\u52a0\u5230\u201c\u8fdb\u5165\u8fc7\u7b49\u5f85\u961f\u5217\u7684\u8fdb\u7a0b\u6570\u201d\u3002\n\n```cpp\ninline bool give(int t, int m, int p) {\n\tfor(auto it = st.begin(); it != st.end(); it ++) {\n\t\tauto j = it;\n\t\tj ++; // \u76f8\u90bb\u4e24\u4e2a\u5360\u7528\u533a\u95f4\n\t\tif(j != st.end()) {\n\t\t\tif(m <= j->first - (it->first + it->second - 1) - 1) { // \u7a7a\u4f59\u957f\u5ea6\u4e0d\u5c0f\u4e8em\n\t\t\t\tst.insert({it->first + it-> second, m});\n\t\t\t\tq.push({t + p, it->first + it->second});\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <set>\n#include <algorithm>\nusing namespace std;\n#define rep(ii,aa,bb) for(re int ii = aa; ii <= bb; ii++)\n#define Rep(ii,aa,bb) for(re int ii = aa; ii >= bb; ii--)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair<int, int> PII;\nconst int maxn = 1e4 + 5, inf = 1e9 + 7;\nnamespace IO_ReadWrite {\n\t#define re register\n\t#define gg (p1 == p2 && (p2 = (p1 = _buf) + fread(_buf, 1, 1<<21, stdin), p1 == p2) ? EOF :*p1++)\n\tchar _buf[1<<21], *p1 = _buf, *p2 = _buf;\n\ttemplate <typename T>\n\tinline void read(T &x){\n\t\tx = 0; re T f=1; re char c = gg;\n\t\twhile(c > 57 || c < 48){if(c == '-') f = -1;c = gg;}\n\t\twhile(c >= 48 &&c <= 57){x = (x<<1) + (x<<3) + (c^48);c = gg;}\n\t\tx *= f;return;\n\t}\n\tinline void ReadChar(char &c){\n\t\tc = gg;\n\t\twhile(!isalpha(c)) c = gg;\n\t}\n\ttemplate <typename T>\n\tinline void write(T x){\n\t\tif(x < 0) putchar('-'), x = -x;\n\t\tif(x > 9) write(x/10);\n\t\tputchar('0' + x % 10);\n\t}\n\ttemplate <typename T>\n\tinline void writeln(T x){write(x); putchar('\\n');}\n}\nusing namespace IO_ReadWrite;\nqueue <PII> waits; // first: length M, second: time P\nset<PII> st;   // first: begin   , second: length M\npriority_queue <PII, vector<PII>, greater<PII> > q; // first: time to release, second: begin\nint n, tim, cnt;\ninline bool give(int t, int m, int p) {\n\tfor(auto it = st.begin(); it != st.end(); it ++) {\n\t\tauto j = it;\n\t\tj ++; // \u76f8\u90bb\u4e24\u4e2a\u5360\u7528\u533a\u95f4\n\t\tif(j != st.end()) {\n\t\t\tif(m <= j->first - (it->first + it->second - 1) - 1) { // \u7a7a\u4f59\u957f\u5ea6\u4e0d\u5c0f\u4e8em\n\t\t\t\tst.insert({it->first + it-> second, m});\n\t\t\t\tq.push({t + p, it->first + it->second});\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\ninline void release(int t) {\n\twhile(!q.empty() && q.top().first <= t) { // \u4ece\u5c0f\u6839\u5806\u4e2d\u627e\u51fa\u91ca\u653e\u65f6\u95f4 <=t \u7684\u8fdb\u7a0b\n\t\tint T = q.top().first;\n\t\twhile(!q.empty() && q.top().first == T) { // \u5c06\u76f8\u540c\u91ca\u653e\u65f6\u95f4\u7684\u8fdb\u7a0b\u540c\u65f6\u91ca\u653e\n\t\t\tPII x = q.top(); \n\t\t\tq.pop();\n\t\t\tauto it = st.lower_bound({x.second, 0});\n\t\t\tst.erase(it);\n\t\t}\n\t\ttim = T; // \u66f4\u65b0\u5b8c\u6210\u6240\u6709\u8fdb\u7a0b\u7684\u6700\u665a\u65f6\u523b\n\t\twhile(!waits.empty()) { // \u67e5\u770b\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u80fd\u5426\u83b7\u5f97\u5185\u5b58\n\t\t\tPII x = waits.front();\n\t\t\tif(give(T, x.first, x.second)) waits.pop();\n\t\t\telse break;\n\t\t}\n\t}\n}\nint main () {\n\tread(n);\n\tst.insert({-1, 1});\n\tst.insert({n, 1});// \u9632\u8d8a\u754c\n\twhile(1) {\n\t\tint t, m, p;\n\t\tread(t); read(m); read(p);\n\t\tif(!t && !m && !p) break;\n\t\trelease(t);\n\t\tif(!give(t, m, p)) {\n\t\t\twaits.push({m, p});\n\t\t\tcnt ++;\n\t\t}\n\t}\n\trelease(inf); // \u5b8c\u6210\u6240\u6709\u8fdb\u7a0b\n\twriteln(tim), writeln(cnt);\n\treturn 0;\n}\n```",
        "postTime": 1635500697,
        "uid": 279197,
        "name": "Mars_Dingdang",
        "ccfLevel": 6,
        "title": "P5763 [NOI1999]\u5185\u5b58\u5206\u914d"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P5763)\n\n## \u9898\u610f\n\n\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u7ed9\u4f60 $n$ \u4e2a\u7533\u8bf7\uff0c\u6bcf\u4e2a\u7533\u8bf7\u4f1a\u7ed9\u51fa\u7533\u8bf7\u53d1\u8d77\u65f6\u95f4\uff0c\u5360\u7528\u7a7a\u95f4\u5927\u5c0f\uff0c\u5360\u7528\u65f6\u95f4\u4e09\u4e2a\u53c2\u6570\uff0c\u7a0b\u5e8f\u4f1a\u5c1d\u8bd5\u5728\u7533\u8bf7\u53d1\u8d77\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7684\u5185\u5b58\u5fc5\u987b\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\uff0c\u5927\u5c0f\u6ee1\u8db3\u6761\u4ef6\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u65e0\u6cd5\u5728\u7533\u8bf7\u53d1\u8d77\u65f6\u76f4\u63a5\u5206\u914d\u51fa\u5185\u5b58\uff0c\u8be2\u95ee\u5c06\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff0c\u5728\u4e4b\u540e\u7684\u4efb\u610f\u65f6\u523b\u4e00\u65e6\u7a7a\u95f4\u6ee1\u8db3\u6761\u4ef6\u961f\u5934\u4f1a\u76f4\u63a5\u51fa\u961f\u5e76\u4e14\u7a0b\u5e8f\u4f1a\u5206\u914d\u7ed9\u961f\u5934\u8be2\u95ee\u8db3\u591f\u7684\u7a7a\u95f4\u3002\u95ee\u5c06\u6240\u6709\u7533\u8bf7\u5904\u7406\u5b8c\u6240\u9700\u8981\u7684\u65f6\u95f4\u548c\u6240\u6709\u8fdb\u5165\u8fc7\u7b49\u5f85\u961f\u5217\u7684\u7533\u8bf7\u6570\u91cf\u3002\n\n## \u5206\u6790\n\n\u6309\u9898\u610f\u6a21\u62df\uff0c\u4ee3\u7801\u9898\u76ee\u8f83\u96be\uff0c\u9700\u8981\u4f1a\u719f\u7ec3\u4f7f\u7528\u4e00\u4e9b\u5e38\u7528\u6570\u636e\u7ed3\u6784\u3002\n\n\u8fd9\u91cc\u76f4\u63a5\u7ed3\u5408\u4ee3\u7801\u5206\u6790\u3002\n\n---\n1.\u9996\u5148\u6211\u4eec\u9700\u8981\u6709\u6570\u636e\u7ed3\u6784\u6765\u8bb0\u5f55\u5185\u5b58\u4e2d\u7684\u5360\u7528\u60c5\u51b5\uff0c\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528`list`\u5b9e\u73b0\n```cpp\n\nstruct saveQ  //\u8bb0\u8f7d\u5728\u5185\u5b58\u4e2d\u7684\u8be2\u95ee\u5360\u7528\u60c5\u51b5\n{\n    int begin, end, finish;  //\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u7ed3\u675f\u65f6\u95f4\n};\n\nlist<saveQ> id;  //\u5b58\u653e\u5185\u5b58\u7684\u4e2d\u7684\u8be2\u95ee\u5360\u7528\u60c5\u51b5\n```\n---\n2.\u6211\u4eec\u8fd8\u9700\u8981\u6709\u6570\u636e\u7ed3\u6784\u6765\u5b58\u653e\u7b49\u5f85\u961f\u5217\uff0c\u8fd9\u91cc\u76f4\u63a5\u7528`queue`\u5b9e\u73b0\n```cpp\nstruct ques  //\u8bb0\u5f55\u5f85\u5904\u7406\u8be2\u95ee\n{\n    int m, p;  //\u9700\u8981\u7684\u5185\u5b58\u6570\u91cf\uff0c\u5360\u7528\u65f6\u95f4\n};\n\nqueue<ques> que;  //\u5b58\u653e\u8be2\u95ee\u7684\u7f13\u5b58\u5e8f\u5217\n```\n3.\u7531\u4e8e\u6211\u4eec\u53d1\u73b0\u8be2\u95ee\u7684\u7ed3\u675f\u65f6\u95f4\u53ef\u80fd\u5f88\u5927\uff0c\u8fd9\u91cc\u4f7f\u7528`priority_queue`\u6765\u5b58\u653e\u5f53\u524d\u5185\u5b58\u4e2d\u6240\u6709\u8be2\u95ee\u7684\u7ed3\u675f\u65f6\u95f4\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u53d6\u51fa\u5806\u9876\u7684\u65b9\u5f0f\u6765\u83b7\u77e5\u5f53\u524d\u6240\u6709\u5185\u5b58\u4e2d\u7684\u8be2\u95ee\u4e2d\u6700\u65e9\u7684\u7ed3\u675f\u65f6\u95f4\u3002\n```cpp\npriority_queue<int, vector<int>, greater<int> > prQue;  //\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8be2\u95ee\u7684\u7ed3\u675f\u65f6\u95f4\n```\n\n---\n4.\u8fd9\u91cc\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u67e5\u8be2\u5f53\u524d\u5185\u5b58\u4e2d\u662f\u5426\u6709\u5927\u5c0f\u4e3a $m$ \u7684\u7a7a\u95f4\uff0c\u5982\u679c\u6709\uff0c\u8fd4\u56de true \u5e76\u63d2\u5165`list`\u4e2d\uff0c\u5426\u5219\u8fd4\u56de false \u3002\n```cpp\nbool work(int m, int p) {  //\u67e5\u8be2\u5185\u5b58\u4e2d\u662f\u5426\u6709\u8fde\u7eed\u957f\u5ea6\u4e3am\u7684\u7a7a\u95f4\uff0c\u5360\u7528\u65f6\u957f\u4e3ap\n    list<saveQ>::iterator ed = id.end();\n    ed--;\n    for (list<saveQ>::iterator i = id.begin(); i != ed; i++) {  //i\u6765\u904d\u5386\u51fa\u4e00\u4e2a\u5360\u7528\u5757\n        list<saveQ>::iterator nxt = i;\n        nxt++;                               //\u7528nxt\u6765\u786e\u5b9ai\u5360\u7528\u5757\u4e4b\u540e\u7684\u4e0b\u4e00\u4e2a\u5360\u7528\u5757\n        if (nxt->begin - i->end - 1 >= m) {  //\u82e5\u4e24\u4e2a\u5360\u7528\u5757\u4e4b\u95f4\u7a7a\u4f59\u53ef\u4ee5\u653e\u4e0b\u8fd9\u4e2a\u65b0\u5757\n            id.insert(nxt, (saveQ){i->end + 1, i->end + m, Time + p});\n            prQue.push(Time + p);  //\u5c06\u65b0\u52a0\u5165\u7684\u8be2\u95ee\u7684\u4fe1\u606f\u8ba1\u5165\u4f18\u5148\u961f\u5217\u4e2d\n            return true;\n        }\n    }\n    return false;\n}\n```\n---\n5.\u5728\u7a0b\u5e8f\u4e2d\u6211\u4eec\u7ef4\u6301\u4e00\u4e2a\u53d8\u91cf`int Time`\u8868\u793a\u5f53\u524d\u65f6\u95f4\uff0c\u5728\u4e00\u4e2a\u65b0\u8be2\u95ee\u52a0\u5165\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u5f53\u524d\u65f6\u95f4\u63a8\u5230\u8be2\u95ee\u5f00\u59cb\u65f6\u95f4\uff0c\u7136\u540e\u518d\u5904\u7406\u8be2\u95ee\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u6765\u5e2e\u6211\u4eec\u5c06\u65f6\u95f4\u63a8\u79fb\u3002\n```cpp\nvoid timeSet(int tim) {\n    while (!prQue.empty() && prQue.top() <= tim)  //\u5982\u679c\u5f53\u524d\u5c06\u6700\u65e9\u5b8c\u6210\u7684\u5360\u7528\u5757\u5c06\u5728t\u4e4b\u524d\u7ed3\u675f\uff0c\u5219\u5904\u7406\n    {\n        Time = prQue.top();  //\u5c06\u65f6\u95f4\u63a8\u5230\u8be5\u5360\u7528\u5757\u7ed3\u675f\u7684\u65f6\u523b\n        prQue.pop();\n        for (list<saveQ>::iterator i = id.begin(); i != id.end(); i++)\n            while (i != id.end() && i->finish == Time)  //\u5c06\u5728\u5f53\u524d\u65f6\u95f4\u7ed3\u675f\u7684\u5360\u7528\u5757\u90fd\u6e05\u9664\n                i = id.erase(i);\n        while (!que.empty()) {  //\u5c1d\u8bd5\u7ed9\u5728\u961f\u5217\u4e2d\u7b49\u5f85\u7684\u5757\u5206\u914d\u5185\u5b58\u7a7a\u95f4\n            ques cac = que.front();\n            if (work(cac.m, cac.p))  //\u6210\u529f\u5206\u914d\n                que.pop();           //\u5757\u51fa\u961f\n            else\n                break;\n        }\n    }\n    return;\n}\n```\n\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u7531\u4e8e\u6211\u6700\u5f00\u59cb\u7684\u4e0d\u6ce8\u610f\uff0c\u6211\u5728\u8fd9\u4efd\u4ee3\u7801\u7684\u7b2c7\u884c\u4e2d\u5e76\u6ca1\u6709\u5199`while`\u800c\u662f\u5199\u4e86\u4e00\u4e2a`if`\uff0c\u6bd5\u7adf\u4f18\u5148\u961f\u5217\u91cc\u7684\u6bcf\u4e00\u4e2a\u6570\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u8be2\u95ee\uff0c\u4f46\u662f\u6211\u540e\u6765\u53d1\u73b0\u8fd9\u6837\u7684\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u539f\u672c\u540c\u4e00\u65f6\u95f4\u7ed3\u675f\u7684\u8be2\u95ee\u4e00\u4e2a\u4e00\u4e2a\u7ed3\u675f\uff0c\u5728\u90e8\u5206\u8be2\u95ee\u7ed3\u675f\uff0c\u800c\u90e8\u5206\u8be2\u95ee\u8fd8\u672a\u7ed3\u675f\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u90e8\u5206\u8be2\u95ee\u5df2\u7ecf\u4ece\u961f\u5217\u4e2d\u51fa\u6765\u5e76\u4e14\u53d6\u5230\u4e86\u975e\u6700\u4f18\u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u5199`while`\uff0c\u4e00\u6b21\u6027\u7ed3\u675f\u5b8c\u6240\u6709\u8be5\u65f6\u523b\u7ed3\u675f\u7684\u8be2\u95ee\u3002\n\n---\n6.\u6700\u540e\u5c31\u662f\u4e3b\u7a0b\u5e8f\u4e86\uff0c\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u5728\u4ee3\u7801\u4e2d\u5df2\u6ce8\u660e\n```cpp\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    id.push_back((saveQ){-1, -1, 0x7fffffff}), id.push_back((saveQ){n, n, 0x7fffffff});\n    //\u94fe\u8868\u5185\u63d2\u5165\u5934\u548c\u5c3e\u8282\u70b9\u4ee5\u9632\u6b62\u8d8a\u754c\n    int t, m, p, num = 0;\n    while (true) {\n        scanf(\"%d%d%d\", &t, &m, &p);\n        if (!m)\n            break;\n        timeSet(t);\n        Time = t;         //\u56e0\u4e3a\u5982\u679c\u7b49\u5f85\u961f\u5217\u4e3a\u7a7a\u4f1a\u6709\u63d0\u65e9\u7ed3\u675f\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u91cd\u590d\u8d4b\u503c\u4e00\u904d\n        if (!work(m, p))  //\u5982\u679c\u653e\u4e0d\u8fdb\u8fd9\u4e00\u4e2a\u65b0\u5757\uff0c\u5219\u52a0\u5165\u7b49\u5f85\u961f\u5217\n            que.push((ques){m, p}), num++;\n    }\n    timeSet(0x7ffffffe);  //\u5c06\u65f6\u95f4\u5f80\u540e\u63a8\u76f4\u81f3\u6700\u540e\u4e00\u4e2a\u5757\u4e5f\u89e3\u9664\u5360\u7528\n    printf(\"%d\\n%d\\n\", Time, num);\n    return 0;\n}\n```",
        "postTime": 1597577310,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "P5763"
    },
    {
        "content": "## \u8fd9\u662f\u4e00\u4e2a\u6ca1\u6709 log \u7684\u65b9\u6cd5\n\n\u849f\u84bb[\u53c2\u8003\u81ea\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/goucw/solution-p5763)\n\n---\n\n### \u9898\u76ee\u5927\u610f\n\n\u6216\u8bb8\u53ef\u4ee5\u653e\u4e00\u5f20\u56fe\uff08\u6837\u4f8b\u89e3\u91ca\uff09\uff1a\n\n![](https://www.acwing.com/media/article/image/2019/01/15/19_42f2e01618-%E5%86%85%E5%AD%98.png)\n\n---\n\n\n### \u9700\u8981\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n\u94fe\u8868\uff08\u7ef4\u62a4\u5185\u5b58\u7a7a\u95f4\uff09\uff0c\u961f\u5217\uff08\u7ef4\u62a4\u7b49\u5f85\u8fdb\u7a0b\uff09\uff0cvector\uff08\u7ef4\u62a4\u5df2\u5206\u914d\u5185\u5b58\u7684\u8fdb\u7a0b\uff09\n\n---\n\n\n### \u5177\u4f53\u601d\u8def\uff1a\n\n\u5c06\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4\u6309\u7167**\u5206\u6210\u82e5\u5e72\u5757**\uff0c\n\n\u82e5\u7a7a\u95f4**\u88ab\u8fdb\u7a0b\u5360\u7528**\uff0c\u5219\u5355\u72ec\u4e3a\u4e00\u5757\u4ee3\u8868\u8fdb\u7a0b\uff1b\n\n\u82e5\u7a7a\u95f4\u7a7a\u95f2\uff0c\u5219\u5c06**\u8fde\u7eed**\u7684\u7a7a\u95f2\u7684\u5185\u5b58\u5355\u5143**\u770b\u4f5c\u4e00\u6574\u5757**\uff0c\n\n\u5757\u4e0e\u5757\u4e4b\u95f4**\u7528\u94fe\u8868\u4e32\u8d77\u6765**\u3002\n\n\u94fe\u8868\u8d77\u521d\u4e3a\u6574\u4e2a\u7a7a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u6709\u8fdb\u7a0b\u7533\u8bf7\u5206\u914d $M$ \u7684\u5185\u5b58\u65f6\uff0c\n\n\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u94fe\u8868\uff0c\u5bfb\u627e\u7b2c\u4e00\u5757**\u7a7a\u95f2\u4e14\u957f\u5ea6\u8db3\u591f**\u7684\u5185\u5b58\u5757\uff08\u8bbe\u957f\u5ea6\u4e3a $len$ )\n\n\u5c06\u8fd9\u4e00\u5757**\u5206\u5272**\u6210\u524d\u540e\u957f\u5ea6\u4e3a $M$ \u4e0e $len - M$ \u7684\u4e24\u5757\uff0c\n\n\u5982\u679c\u6ca1\u6709\u5c31\u4e22\u8fdb\u7b49\u5f85\u961f\u5217\u4e2d\uff1b\n\n\u82e5\u6709\u8fdb\u7a0b\u7ed3\u675f\u91ca\u653e\u5185\u5b58\uff0c\u5219\u627e\u5230\u5b83\u5728\u94fe\u8868\u4e2d\u5206\u914d\u5185\u5b58\u7684\u4f4d\u7f6e\uff0c**\u53d8\u6210\u4e00\u5757\u7a7a\u95f2**\u7684\uff0c\n\n\u5e76\u4e0e\u524d\u540e\u6709**\u76f8\u8fde**\u7684\u7a7a\u95f2\u5185\u5b58\u5757**\u5408\u5e76**\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1 **\u7a7a\u95f2\u5757\u7684\u4e2a\u6570** \u4e0d\u591a\u4e8e **\u8fdb\u7a0b\u5757\u7684\u4e2a\u6570 + 1**\n\n\u6240\u4ee5\u6bcf\u6b21\u626b\u63cf\u6700\u591a\u9700\u8981 $O(T)$ \uff0c $T$ \u662f\u8f93\u5165\u7684\u884c\u6570\u7684\u65f6\u95f4\uff0c\n\nvector\u7528\u4e8e\u5b58\u5df2\u5206\u914d\u5185\u5b58\u7684\u8fdb\u7a0b\u5728\u94fe\u8868\u7684\u4f4d\u7f6e\u548c\u7ed3\u675f\u7684\u65f6\u95f4\uff0c\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(T^2)$ \uff0c\u53ef\u901a\u8fc7\u672c\u9898\u3002\n\n---\n\n### \u5b9e\u73b0\u770b\u4ee3\u7801\uff1a\n\n**\u4e3b\u6846\u67b6\uff1a**\n\nw \u8bb0\u5f55\u7684\u662f\u76ee\u524d\u6700\u65e9\u7ed3\u675f\u7684\u8fdb\u7a0b\u7ed3\u675f\u7684\u65f6\u95f4\uff0c\u5728 task_out \u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6301\u7eed\u66f4\u65b0\n\ntask_out() \u7528\u4e8e\u7ed3\u675f\u8fdb\u7a0b\uff0c\u91ca\u653e\u5185\u5b58\uff0c\u5e76\u7ed9\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\uff08\u56e0\u4e3a\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u523b\u5206\u914d\uff0c\u6240\u4ee5\u8981\u5728 t \u65f6\u523b\u4e4b\u524d\u5206\u914d\u5185\u5b58\uff0c\u8fbe\u5230\u4e00\u6709\u7a7a\u95f4\u5c31\u5206\u914d\u7684\u76ee\u7684\uff09\n\ntask_in() \u7ed9\u5f53\u524d\u8fdb\u7a0b\u5206\u914d\uff0c\u5982\u679c\u4e0d\u884c\uff0c\u4e22\u961f\u5217\u91cc\u3002\n\ntot \u7edf\u8ba1\u8fdb\u5165\u961f\u5217\u7684\u8fdb\u7a0b\u4e2a\u6570\n\nlen \u662f\u6301\u7eed\u7684\u65f6\u95f4\n\n```cpp\nwhile(1)\n{\n\tread(t); read(m); read(len);\n\tif(!t && !m && !len) break;\n\twhile(t >= w) task_out();  //\u91ca\u653e\u65f6\u523b t \u4e4b\u524d\u7684\u7ed3\u675f\u8fdb\u7a0b\n\tif(!task_in(t, m, len, w)) q.push({m, len}), tot ++ ;\n}\n```\n\n**\u5b9a\u4e49\u8fd9\u4e48\u4e00\u4e2a\u94fe\u8868\uff1a**\n\n```cpp\nstruct Node\n{\n\tint value;  //\u8bb0\u5f55\u5757\u957f\n\tbool tag;  // 0 \u4e3a\u7a7a\u95f2\uff0c1 \u4e3a\u5360\u7528\n\tNode *Prev, *Next;\n};\n\ninline void insert(Node *p, int val, bool op)  //\u5728 p \u540e\u6dfb\u52a0\u8282\u70b9\uff0cop\uff080/1\uff09\u8868\u793a\u662f\u5426\u7a7a\u95f2\n{\n\tNode *q = new Node();\n\tq->value = val; q->tag = op;\n\tp->Next->Prev = q;\n\tq->Next = p->Next;\n\tp->Next = q; q->Prev = p;\n}\n\ninline void remove(Node *p)  //\u5220\u9664\u8282\u70b9 p \n{\n\tp->Prev->Next = p->Next;\n\tp->Next->Prev = p->Prev;\n\tdelete p;\n}\n\n```\n\n**vector:**\n\n\u7528\u4ee5\u7ef4\u62a4\u88ab\u5206\u914d\u5185\u5b58\u7684\u8fdb\u7a0b\u7684\u76f8\u5173\u4fe1\u606f\uff0c\n\n\n\u7b2c\u4e00\u7ef4\u8bb0\u5f55\u7ed3\u675f\u65f6\u95f4\uff0c\u7b2c\u4e8c\u7ef4\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002\n\n```cpp\nvector<pair<int, Node*>> p;\n```\n\n**\u7b49\u5f85\u961f\u5217**\n\n\u7b2c\u4e00\u7ef4\u662f\u8981\u5206\u914d\u7684\u5927\u5c0f\uff0c\u7b2c\u4e8c\u7ef4\u662f\u6301\u7eed\u7684\u65f6\u95f4\u3002\n\n```cpp\nqueue<pair<int, int>> q;\n```\n\n\n**task_in()\u51fd\u6570\uff1a**\n\n\n\n```cpp\ninline bool task_in(int t, int m, int len, int &w)\n{\n\tfor(Node *it = head->Next; it != tail; it = it->Next)  //\u626b\u63cf\u94fe\u8868\n\t{\n\t\tif(it->tag == 0 && it->value >= m)  //\u7a7a\u95f2 && \u7a7a\u95f4\u8db3\u591f\n\t\t{\n\t\t\tint val = it->value; val -= m;  //\u5206\u5272\n\t\t\tNode *last = it->Prev; remove(it);\n\t\t\tinsert(last, m, 1); last = last->Next;\n\t\t\tif(val != 0) insert(last, val, 0);  //\u5982\u679c\u521a\u597d\u5360\u6ee1\u5c31\u4e0d\u7528\u5206\u6210\u4e24\u5757\u4e86\n\t\t\tp.push_back({t + len, last}); w = min(w, t + len);  //\u8fdb\u5165vector\u4e2d\uff0c\u8bb0\u5f55\u7ed3\u675f\u65f6\u95f4\u548c\u4f4d\u7f6e\uff0c\u66f4\u65b0\u7ed3\u675f\u65f6\u95f4\u6700\u5c0f\u503c\n\t\t\treturn true; //\u5206\u914d\u6210\u529f\uff0c\u63a8\u51fa\u5faa\u73af\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n**get_blank()\u51fd\u6570\uff1a**\n\n\u7528\u6765\u5408\u5e76\u7a7a\u95f2\u7684\u5757\n\n```cpp\ninline void get_blank(Node *p)\n{\n\tint val = p->value;\n\tif(p->Prev != head && p->Prev->tag == 0) val += p->Prev->value, remove(p->Prev);  //\u5411\u524d\u5408\u5e76\n\tif(p->Next != tail && p->Next->tag == 0) val += p->Next->value, remove(p->Next);  //\u5411\u540e\u5408\u5e76\n\tNode *last = p->Prev; remove(p);\n\tinsert(last, val, 0);  //\u5408\u5e76\u6210\u4e00\u5927\u5757\n}\n```\n\n\n**task_out()\u51fd\u6570\uff1a**\n\n```cpp\ninline void task_out()\n{\n\tint wzs = INF;\n\tfor(int i = 0; i < p.size(); i ++ )\n\t{\n\t\tif(p[i].first == w) get_blank(p[i].second), p.erase(p.begin() + i -- );  //\u91ca\u653e\u5f53\u524d\u6700\u65e9\u7ed3\u675f\u7684\uff0c\u5408\u5e76\uff0c\u4ecevector\u4e2d\u5220\u9664\n\t\telse wzs = min(wzs, p[i].first);  //\u8bb0\u5f55\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u6700\u65e9\u7ed3\u675f\u7684\n\t}\n\twhile(!q.empty())\n\t{\n\t\tpair<int, int> x = q.front();\n\t\tif(!task_in(w, x.first, x.second, wzs)) break; //wzs\u9700\u8981\u66f4\u65b0\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u6700\u65e9\u7ed3\u675f\u7684\n\t\tq.pop();\n\t}\n\tw = wzs;  //\u91ca\u653e\u540e\u6700\u65e9\u7ed3\u675f\u7684\n} \n```\n\n---\n\n### \u547c\uff0c\u6700\u540e\u653e\u4e00\u4e0b\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\n\nconst int N = 10010;\nconst int INF = 2e9;\n\nstruct Node\n{\n\tint value;\n\tbool tag;\n\tNode *Prev, *Next;\n};\n\nint n, t, m, len, res, tot, w = INF;\nvector<pair<int, Node*>> p;\nqueue<pair<int, int>> q;\nNode *head, *tail;\n\ninline void read(int &x)\n{\n\tint sgn = 1; x = 0;\n\tchar ch = getchar();\n\twhile(ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n\tif(ch == '-') sgn = -1, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') x = (x << 1) + (x << 3), x += (ch ^ '0'), ch = getchar();\n\tx *= sgn;\n}\n\ninline void insert(Node *p, int val, bool op)\n{\n\tNode *q = new Node();\n\tq->value = val; q->tag = op;\n\tp->Next->Prev = q;\n\tq->Next = p->Next;\n\tp->Next = q; q->Prev = p;\n}\n\ninline void remove(Node *p)\n{\n\tp->Prev->Next = p->Next;\n\tp->Next->Prev = p->Prev;\n\tdelete p;\n}\n\ninline void get_blank(Node *p)\n{\n\tint val = p->value;\n\tif(p->Prev != head && p->Prev->tag == 0) val += p->Prev->value, remove(p->Prev);\n\tif(p->Next != tail && p->Next->tag == 0) val += p->Next->value, remove(p->Next);\n\tNode *last = p->Prev; remove(p);\n\tinsert(last, val, 0);\n}\n\ninline bool task_in(int t, int m, int len, int &w)\n{\n\tfor(Node *it = head->Next; it != tail; it = it->Next)\n\t{\n\t\tif(it->tag == 0 && it->value >= m)\n\t\t{\n\t\t\tint val = it->value; val -= m;\n\t\t\tNode *last = it->Prev; remove(it);\n\t\t\tinsert(last, m, 1); last = last->Next;\n\t\t\tif(val != 0) insert(last, val, 0);\n\t\t\tp.push_back({t + len, last}); w = min(w, t + len);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ninline void task_out()\n{\n\tint wzs = INF;\n\tfor(int i = 0; i < p.size(); i ++ )\n\t{\n\t\tif(p[i].first == w) get_blank(p[i].second), p.erase(p.begin() + i -- );\n\t\telse wzs = min(wzs, p[i].first);\n\t}\n\twhile(!q.empty())\n\t{\n\t\tpair<int, int> x = q.front();\n\t\tif(!task_in(w, x.first, x.second, wzs)) break;\n\t\tq.pop();\n\t}\n\tw = wzs;\n} \n\nint main()\n{\n\tread(n);\n\thead = new Node(); tail = new Node();\n\thead->Next = tail; tail->Prev = head;\n\tinsert(head, n, 0);\n\twhile(1)\n\t{\n\t\tread(t); read(m); read(len);\n\t\tif(!t && !m && !len) break;\n\t\twhile(t >= w) task_out();\n\t\tif(!task_in(t, m, len, w)) q.push({m, len}), tot ++ ;\n\t}\n\twhile(!q.empty()) task_out();\n\tfor(int i = 0; i < p.size(); i ++ ) w = max(w, p[i].first);\n\tprintf(\"%d\\n%d\\n\", w, tot);\n\treturn 0;\n}\n```\n---\n\n _**END.**_ \n",
        "postTime": 1667728032,
        "uid": 431106,
        "name": "JackWei",
        "ccfLevel": 0,
        "title": "P5763 [NOI1999] \u5185\u5b58\u5206\u914d \u9898\u89e3"
    },
    {
        "content": "\u975e\u5e38\u6709\u601d\u7ef4\u7684\u4e00\u9053\u6a21\u62df\u9898\uff0c\u6ca1\u6709\u60f3\u6e05\u695a\u76f4\u63a5\u5199\u5f88\u5bb9\u6613\u88ab\u7ed5\u8fdb\u53bb\u3002\n\n\u8fd9\u9053\u9898\u65e0\u975e\u6709\u4e09\u79cd\u8ba9\u6211\u4eec\u5b9e\u73b0\u7684\u64cd\u4f5c\uff1a\n\n1. \u7ef4\u62a4\u82e5\u5e72\u4e2a**\u8fdb\u7a0b**\n2. \u8fdb\u884c**\u5360\u7528**\u5185\u5b58\n3. \u8fdb\u884c\u5185\u5b58\u7684**\u91ca\u653e**\n\n\u7ef4\u62a4\u8fdb\u7a0b\u3001\u5360\u7528\u5185\u5b58\u3001\u5185\u5b58\u91ca\u653e\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u73af\u73af\u76f8\u6263\u3002\u7ef4\u62a4\u8fdb\u7a0b\u9700\u8981\u4e4b\u524d\u7684\u91ca\u653e\uff0c\u91ca\u653e\u540e\u53c8\u7acb\u9a6c\u5f71\u54cd\u7b49\u5f85\u961f\u5217\u91cc\u7684\u4e0b\u4e00\u6b65\u5360\u7528\u2026\u2026 \u5982\u4f55\u5f04\u6e05\u695a\u8fd9\u4e09\u8005\u7684\u5173\u7cfb,\u662f\u89e3\u9898\u7684\u5173\u952e\u3002\n\n- \u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u60f3\u8981\u5224\u65ad\u4ed6\u662f\u5426\u8fdb\u5165\u7b49\u5f85\u961f\u5217\uff0c\u4e4b\u524d\u6240\u6709\u7ed3\u675f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u8fdb\u7a0b\u5f00\u59cb\u65f6\u95f4\u7684\u5360\u7528\u5fc5\u987b\u5168\u90e8\u88ab\u91ca\u653e\u3002\n- \u5f88\u663e\u7136\uff0c\u82e5 $i<j$ \u4e14\u5728\u65f6\u95f4 $i$ \u65f6\u7b49\u5f85\u961f\u5217\u961f\u5934\u4e0d\u53ef\u5360\u7528\uff0c\u65f6\u95f4 $j$ \u65f6\u53ef\u4ee5\u5360\u7528\uff0c\u5f53\u4e14\u4ec5\u5f53\u5728 $i-j$ \u65f6\u95f4\u5185\uff0c\u6709\u5185\u5b58\u88ab\u91ca\u653e\u3002\u6240\u4ee5\uff0c\u91ca\u653e\u5185\u5b58\u662f\u7b49\u5f85\u961f\u5217\u961f\u5934\u53ef\u4ee5\u5360\u7528\u7684\u5145\u5206\u6761\u4ef6\u3002\u56e0\u800c\uff0c\u4e00\u4e2a\u5c0f\u8d2a\u5fc3\uff0c\u6211\u4eec\u53ea\u7528\u5728\u6bcf\u6b21\u91ca\u653e\u5185\u5b58\u65f6\u5224\u65ad\u961f\u5934\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u5360\u7528\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6d41\u7a0b\u5c31\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u91ca\u653e\u6240\u6709\u7ed3\u675f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u8fdb\u7a0b\u5f00\u59cb\u65f6\u95f4\u7684\u5360\u7528\u3002\u6bcf\u91ca\u653e\u4e00\u4e2a\u5185\u5b58\uff0c\u5faa\u73af\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5360\u7528\u7b49\u5f85\u961f\u5217\u961f\u5934\uff0c\u80fd\u5219\u5360\u7528\u3002\u5224\u65ad\u8fdb\u7a0b\u80fd\u5426\u5360\u7528\uff0c\u80fd\u5219\u5360\u7528\uff0c\u4e0d\u80fd\u5219\u52a0\u5165\u7b49\u5f85\u961f\u5217\u3002\n\n\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355\uff0c\u7b49\u5f85\u961f\u5217\u53ef\u4ee5\u76f4\u63a5\u7528 ``queue`` \u3002\u800c\u88ab\u5360\u7528\u7684\u5185\u5b58\u7528 ``set`` \u5373\u53ef\uff0c\u7b49\u5f85\u91ca\u653e\u7684\u961f\u5217\u53ef\u4ee5\u7528\u81ea\u5e26\u7684 ``priority_queue`` \u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a \n\n```cpp\n#include<iostream>\n#include<queue>\n#include<set>\n#define int long long\nusing namespace std;\nstruct pro{ //process \u8fdb\u7a0b\n    int t,m,p;\n};\nstruct rel{// release \u91ca\u653e\n    int l,r,t;\n    bool operator < (const rel &a) const{\n        if (a.t == t) return a.l < l;\n        return a.t < t;\n    }\n};\nstruct occ{ // occupy \u5360\u7528\n    int l,r;\n    bool operator < (const occ &a) const{\n        return a.l > l;\n    }\n};\nqueue<pro> q;\nset<occ> s; \npriority_queue <rel> pq;\nint ans,ans2,tm;\nint n;\nbool fd(pro pr, int t){// \u5224\u65ad\u80fd\u4e0d\u80fd\u8fdb\u884c\u4e00\u6b21\u5360\u7528\n    set<occ>::iterator it = s.begin();\n    it++;\n    for (;it != s.end(); it++){\n        set<occ>::iterator lst = it;\n        lst--;\n        if ( (*it).l-(*lst).r-1 >= pr.m){ //\u4e24\u4e2a\u5360\u7528\u4e4b\u95f4\u7684\u95f4\u9699\u5982\u679c\u5927\u4e8e\u7b49\u4e8e\u8fdb\u7a0b\u957f\u5ea6\uff0c\u5c31\u53ef\u4ee5\u5360\u7528\u3002\n            s.insert((occ){(*lst).r+1,(*lst).r+pr.m});\n            ans = max(ans,t+pr.p);\n            pq.push((rel){(*lst).r+1,(*lst).r+pr.m, t + pr.p});\n            return 1;\n        }\n    }\n    return 0;\n}\nvoid release(int t){//\u91ca\u653e\n    while(!pq.empty() && pq.top().t <= t){\n        rel t = pq.top();\n        s.erase(s.lower_bound((occ){t.l,t.r}));\n        pq.pop();\n        while(!pq.empty() && pq.top().t == t.t){//\u6ce8\u610f\u8981\u4e00\u6b21\u628a\u7ed3\u675f\u65f6\u95f4\u4e00\u6837\u7684\u5360\u7528\u4e00\u8d77\u91ca\u653e\n            s.erase(s.lower_bound((occ){pq.top().l,pq.top().r}));\n            pq.pop();\n        }\n        while(!q.empty()){\n            if (fd(q.front(),t.t)) q.pop(); //\u961f\u5934\u80fd\u5360\u5c31\u7ee7\u7eed\n            else break;//\u4e0d\u884c\u5c31\u505c\uff0c\u56e0\u4e3a\u961f\u5934\u4f18\u5148\u7ea7\u6700\u5927\n        }\n    }\n}\nsigned main(){\n    cin >> n;\n    s.insert((occ){-1,-1});\n    s.insert((occ){n,n});\n    for (int i = 1;; i++){\n        int T,M,P;\n        cin >> T >> M >> P;\n        if (!T && !M && !P){\n            break;\n        }\n        release(T);\n        if (!fd((pro){T,M,P},T)){\n            ans2++;\n            q.push((pro){T,M,P});\n        }\n    }\n    release(1e9+5);//\u6700\u540e\u5168\u90e8\u91ca\u653e\uff0c\u4e0d\u80fd\u6709\u672a\u7ed3\u675f\u7684\u8fdb\u7a0b\n    cout << ans << endl << ans2 << endl;\n    return 0;\n}\n```\n",
        "postTime": 1645534412,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "P5763 [NOI1999] \u5185\u5b58\u5206\u914d"
    },
    {
        "content": "### \u961f\u5217+\u5806+\u94fe\u8868\uff08\u7528set\u5b9e\u73b0\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int MAXN=10005;\nqueue<PII> wait; //\u5185\u5b58\u957f\u5ea6\uff0c\u5360\u7528\u65f6\u95f4\nset<PII> run; //\u8d77\u59cb\u4e0b\u6807\uff0c\u5185\u5b58\u957f\u5ea6\npriority_queue<PII,vector<PII>,greater<PII> > q; //\u7ed3\u675f\u65f6\u95f4\uff0c\u8d77\u59cb\u4e0b\u6807\nint ans,cnt;\nbool check(int t,int m,int p) //\u68c0\u67e5\u53ef\u5426\u63d2\u5165\u65b0\u8fdb\u7a0b\n{\n    set<PII>::iterator it;\n    for(it=run.begin();it!=run.end();it++)\n    {\n        set<PII>::iterator jt=it; jt++;\n        if(jt!=run.end())\n        {\n            int st=it->first+it->second;\n            if(jt->first-st>=m)\n            {\n                run.insert(make_pair(st,m));\n                q.push(make_pair(t+p,st));\n                return true;\n            }\n        }\n    }\n    return false;\n}\nvoid free(int t) //\u91ca\u653e\u5230t\u65f6\u95f4\u4e3a\u6b62\u5df2\u7ed3\u675f\u7684\u8fdb\u7a0b\n{\n    while(q.size()&&q.top().first<=t)\n    {\n        int f=q.top().first;\n        while(q.size()&&q.top().first==f)\n        {\n            PII top=q.top();\n            q.pop();\n            set<PII>::iterator it=run.lower_bound(make_pair(top.second,0));\n            run.erase(it);\n        }\n        ans=f;\n        while(wait.size())\n        {\n            PII ft=wait.front();\n            if(check(f,ft.first,ft.second))\n                wait.pop();\n            else break;\n        }\n    }\n}\nint main()\n{\n    int n,t,m,p;\n    scanf(\"%d\",&n);\n    run.insert(make_pair(-1,1));\n    run.insert(make_pair(n,1));\n    while(scanf(\"%d%d%d\",&t,&m,&p)&&(t||m||p))\n    {\n        free(t);\n        if(!check(t,m,p))\n            wait.push(make_pair(m,p)),cnt++;\n    }\n    free(2e9);\n    printf(\"%d\\n%d\",ans,cnt);\n    return 0;\n}\n```\n",
        "postTime": 1580786485,
        "uid": 91487,
        "name": "\u4e50\u54e5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5763 \u3010[NOI1999]\u5185\u5b58\u5206\u914d\u3011"
    },
    {
        "content": "## P5763 [NOI1999] \u5185\u5b58\u5206\u914d \u9898\u89e3\n\n### \u5927\u6a21\u62df\uff0c\u4e3b\u8981\u662f\u601d\u8def\u8981\u6e05\u6670\u3002\u6211\u4e5f\u662f\u542c\u4e86 y \u603b\u7684\u8bb2\u89e3\u540e\u624d\u660e\u767d\u7684\u3002\n\n\u5148\u6765\u5206\u6790\u6837\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ct9a1qmv.png)\n\n\u5f53\u8fdb\u884c\u5230\u8fdb\u7a0b A\uff0c\u7533\u8bf7 $3$ \u683c\u5185\u5b58\uff0c\u6210\u529f\uff0c\u5c06\u5728\u65f6\u95f4 $11$ \u5206\u7ed3\u675f\u3002\u6765\u5230 $2$ \u5206\u949f\uff0c\u8fdb\u7a0b B \u7533\u8bf7 $4$ \u683c\uff0c\u6210\u529f\uff0c\u5c06\u5728\u65f6\u95f4 $5$ \u5206\u7ed3\u675f\uff0c**\u8fdb\u7a0b C \u7533\u8bf7\u5931\u8d25\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217\u3002**$4$ \u5206\u949f\uff0c\u8fdb\u7a0b D \u6210\u529f\uff0c\u5c06\u5728 $8$ \u5206\u949f\u7ed3\u675f\u3002$5$ \u5206\u949f\u65f6\uff0c\u8fdb\u7a0b $B$ \u7ed3\u675f\uff0c\u6b64\u65f6\u8fdb\u7a0b C \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u5f39\u51fa\uff0c\u6210\u529f\u63d2\u5165\uff0c\u5269\u4e0b $2$ \u683c\u5185\u5b58\u8fdb\u7a0b E \u5206\u914d\uff0c**\u8fdb\u7a0b E \u7533\u8bf7\u5931\u8d25\uff0c\u8fdb\u5165\u7b49\u5f85\u961f\u5217**\u3002\u7b2c $8$ \u5206\u949f\uff0c\u8fdb\u7a0b D \u7ed3\u675f\uff0c\u8fdb\u7a0b E \u4ece\u7b49\u5f85\u961f\u5217\u4e2d\u6210\u529f\u63d2\u5165\uff0c\u5c06\u5728 $12$ \u5206\u949f\u65f6\u7ed3\u675f\uff0c$9$ \u5206\u949f\uff0c\u8fdb\u7a0b C \u7ed3\u675f\uff0c$11$ \u5206\u949f\u65f6\uff0c\u8fdb\u7a0b A \u7ed3\u675f\uff0c$12$ \u5206\u949f\uff0c\u8fdb\u7a0b E \u7ed3\u675f\uff0c\u6b64\u65f6\u5168\u90e8\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u7684\u65f6\u523b\u4e3a\u7b2c $12$ \u5206\u949f\uff0c\u5206\u522b\u6709 C \u548c E \u4e24\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u8fc7\u7b49\u5f85\u961f\u5217\u3002\n\n### \u5206\u6790\n\n\u7531\u6837\u4f8b\u5206\u6790\u77e5\u6211\u4eec\u8981\u5b8c\u6210\u4e24\u4e2a\u51fd\u6570\u3002\n\n+ \u68c0\u67e5\u662f\u5426\u80fd\u63d2\u5165\u7684\u51fd\u6570 \n\n+ \u91ca\u653e\u51fd\u6570 \n\n### \u68c0\u67e5\u662f\u5426\u80fd\u63d2\u5165\u7684\u51fd\u6570 \n\n\u7528 `set` \u7ef4\u62a4\uff0c\u5b9e\u73b0\u7ebf\u6027\u68c0\u67e5\uff0c\u5982\u679c $a_i-a_{i-1}\\ge m$\uff0c\u8868\u793a\u5728 $i-1$ \u548c $i$ \u4e4b\u95f4\u53ef\u4ee5\u63d2\u5165\u957f\u5ea6\u4e3a $m$ \u7684\u8fdb\u7a0b\u3002\n\n### \u91ca\u653e\u51fd\u6570\n\n+ \u8fdb\u7a0b\u3002\u5047\u5982\u8fdb\u7a0b\u5728 $i$ \u5206\u949f\u63d2\u5165\uff0c\u679a\u4e3e\u524d\u9762\u7684\u8fdb\u7a0b\uff0c\u5982\u679c\u5728\u7b2c $i$ \u65f6\u523b\u7ed3\u675f\uff0c\u4e14\u5f53\u524d\u8fdb\u7a0b\u53ef\u4ee5\u63d2\u5165\uff0c\u5219\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u63d2\u7684\u5730\u65b9\u3002\n\n+ \u7b49\u5f85\u961f\u5217\u3002\u5982\u679c\u5f53\u524d\u961f\u5934\u53ef\u4ee5\u63d2\u5165\uff0c\u5219\u76f4\u63a5\u63d2\u5165\uff0c\u56e0\u4e3a\u9898\u76ee\u89c4\u5b9a\u961f\u5934\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u63d2\u5165\u7684\u8fdb\u7a0b\u3002\n\n### Code:\n\n\u4ee3\u7801\u662f y \u603b\u7684\uff0corz\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, t, m, p, ans2, ans1;\n\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > q;  // \u5c0f\u6839\u5806 \nqueue<pair<int, int> > dd; // \u7b49\u5f85\u961f\u5217 \nset<pair<int, int> > a;  // set \u53ef\u4ee5\u7ebf\u6027\u67e5\u627e\uff0c\u5220\u9664 \n\nbool add(int t, int m, int p) { // \u68c0\u67e5\u662f\u5426\u80fd\u63d2\u5165\u7684\u51fd\u6570 \n  for (auto it = a.begin(); it != a.end(); it++) {\n    auto l = it;              // it \u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 \n    l++;\n    if (l != a.end()) {    \n      if (m <= l->first - it->first - it->second) { // \u4e24\u4e2a\u5143\u7d20\u95f4\u7684\u7a7a\u9699\u53ef\u4ee5\u8ba9\u5f53\u524d\u957f m \u7684\u8fdb\u7a0b\u63d2\u8fdb \n        a.insert(pair<int, int> {it->first + it->second, m}); // \u63d2\u5165 \n        q.push(pair<int, int> {t + p, it->first + it->second});\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\nvoid sf(int t) { // \u91ca\u653e\u51fd\u6570 \n  while (!q.empty() && q.top().first <= t) {          \n    int tmp1 = q.top().first;                                \n    while (!q.empty() && q.top().first == tmp1) { // \u679a\u4e3e\u524d\u9762\u7684\u8fdb\u7a0b\uff0c\u770b\u662f\u5426\u5728\u5f53\u524d\u7ed3\u675f\uff0c\u5982\u679c\u7ed3\u675f\u4e86\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u80fd\u63d2\u5165 \n      auto k = q.top();\n      q.pop();\n      a.erase(a.lower_bound(pair<int, int> {k.second, 0})); // \u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u63d2\u5165\u7684\u5730\u65b9\u63d2\u5165 \n    }\n    ans1 = tmp1; // \u8bb0\u5f55\u7b54\u6848\uff0c\u5168\u90e8\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u7684\u65f6\u523b\u4e00\u5b9a\u662f\u6700\u5927\u7684\u8fdb\u7a0b\u7684\u7ed3\u675f\u65f6\u95f4 \n    while (!dd.empty()) { // \u7b49\u5f85\u961f\u5217 \n      auto tmp = dd.front();  \n      if (add(tmp1, tmp.first, tmp.second)) { // \u5982\u679c\u961f\u5934\u53ef\u4ee5\u63d2\u5165\uff0c\u7b49\u5f85\u961f\u5217\u662f\u4e25\u683c\u6309\u7167\u8fdb\u961f\u65f6\u95f4\u786e\u5b9a\u7684\u4f18\u5148\u7ea7 \n        dd.pop(); // \u63d2\u5165\uff0c\u961f\u5934\u5f39\u51fa \n      } else {\n        break;\n      }\n    }\n  }\n}\n\nint main() {\n  cin >> n;\n  a.insert(pair<int, int> {-1, 1}); \n  a.insert(pair<int, int> {n, 1}); // \u4e24\u884c\u662f\u8fb9\u754c \n  while (1) {\n    cin >> t >> m >> p;\n    if (!t && !m && !p) {\n      break;\n    }\n    sf(t); \n    if (!add(t, m, p)) { // \u5982\u679c\u63d2\u4e0d\u8fdb\u53bb\uff0c\u653e\u5165\u7b49\u5f85\u961f\u5217 \n      dd.push(make_pair(m, p));\n      ans2++; // \u540c\u65f6\u8fdb\u5165\u7b49\u5f85\u961f\u5217\u7684\u6570\u91cf +1 \n    }\n  }\n  sf(2e9); // \u7ed3\u675f\u6240\u6709\u8fdb\u7a0b\uff0c\u7edf\u8ba1\u7b54\u6848 \n  cout << ans1 << endl << ans2 << endl;\n  return 0;\n}\n```\n",
        "postTime": 1683292997,
        "uid": 672281,
        "name": "ydq1101",
        "ccfLevel": 4,
        "title": "P5763 [NOI1999] \u5185\u5b58\u5206\u914d \u9898\u89e3"
    }
]