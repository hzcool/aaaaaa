[
    {
        "content": "### \u9898\u610f\n\n\u5199\u7684\u5f88\u660e\u767d\u4e86\uff0c\u4e0d\u9700\u8981\u89e3\u91ca\u3002\n\n$\\texttt{Data Range:}1\\leq n\\leq 234567$\n\n### \u9898\u89e3\n\n\u5f53\u4f60\u770b\u5230\u8fd9\u7bc7\u9898\u89e3\u7684\u65f6\u5019\u8bf7\u5927\u58f0\u558a\u51fa\uff1a$\\texttt{\\color{black}t\\color{red}ommy0103}\\texttt{ is God! }\\texttt{\\color{black}I\\color{red}tst}\\texttt{ txdy! }\\texttt{\\color{black}M\\color{red}\\_sea}\\texttt{ is God!}$\n\n\u56fd \u9645 \u8ba1 \u6570 \u6c34 \u5e73\n\n\u9996\u5148\u8003\u8651\u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u4e2a\u9ed1\u70b9\u7684\u60c5\u51b5\u600e\u4e48\u505a\u3002\n\n\u6211\u4eec\u94a6\u5b9a\u9ed1\u70b9\u4e3a\u6839\uff0c\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u5b50\u6811\uff0c\u5e76\u4e14 $i$ \u8fd9\u4e2a\u8282\u70b9\u4e3a\u9ed1\u8272\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u6211\u4eec\u5f97\u5230\uff1a\n\n$$f_u=(sz_u-1)!\\prod\\limits_{fa_v=u}\\frac{f_v}{sz_v!}$$\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u9610\u8ff0\u8fd9\u4e2a\u5f0f\u5b50\u5230\u5e95\u662f\u5728\u5e72\u4ec0\u4e48\u3002\n\n\u9996\u5148\u6211\u4eec\u679a\u4e3e**\u53ef\u80fd**\u7684\u6392\u5217\uff0c\u7531\u4e8e\u73b0\u5728\u53ea\u6709 $u$ \u662f\u9ed1\u8272\u7684\uff0c\u7b2c\u4e00\u8f6e\u80af\u5b9a\u662f\u5148\u628a $u$ \u53d8\u6210\u7ea2\u8272\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c$u$ \u53ea\u80fd\u653e\u5728\u7b2c\u4e00\u4e2a\uff0c\u800c\u5269\u4e0b\u7684\u53ef\u4ee5\u4efb\u610f\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u662f\u53ef\u80fd\u800c\u4e0d\u662f\u5408\u6cd5\uff09\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6392\u9664\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u6392\u5217\uff0c\u679a\u4e3e\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u8003\u8651\u67d0\u68f5\u5b50\u6811\u6240\u6709\u8282\u70b9\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6811 $T$ \u5bf9\u5e94\u7684\u53ef\u80fd\u7684\u5e8f\u5217 $P$ \u6765\u8bf4\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u4ece $P$ \u4e2d\u9009\u51fa\u4e00\u4e9b\u5143\u7d20\u6784\u9020 $Q$\uff0c\u4f7f\u5f97 $Q$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f $T$ \u4e2d\u67d0\u4e2a\u5b50\u6811 $S$ \u4e2d\u5b58\u5728\u7684\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u5e76\u4e14 $S$ \u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u90fd\u8981\u5728 $Q$ \u4e2d\u51fa\u73b0\u3002\n\n\u8fd9\u91cc\uff0c$T$ \u7684\u6839\u4e3a $u$\uff0c$S$ \u7684\u6839\u4e3a $v$ \u4e14 $fa_v=u$\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5e8f\u5217 $Q$ \u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u5e8f\u5217 $P$ \u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u5bf9\u6240\u6709\u5b50\u6811\u90fd\u8fd9\u4e48\u505a\u5c31\u5f97\u5230\u540c\u65f6\u6ee1\u8db3\u6240\u6709\u7ea6\u675f\u7684\u5e8f\u5217\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u5f0f\u5b50\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u76f4\u63a5\u8ba1\u7b97\u6839\u8282\u70b9\u7684\u7b54\u6848\u3002\n\n$$\nf_{rt}=\\frac{(sz_{rt}-1)!}{\\prod\\limits_{fa_v=rt}sz_v!}\\prod\\limits_{fa_v=rt}f_v\n$$\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u6839\u8282\u70b9\u7684\u513f\u5b50 $v$ \u4ee3\u5165\u8fdb\u6765\uff0c\u518d\u5c06\u6240\u6709\u5b59\u5b50\u4ee3\u5165\u8fdb\u6765\u2026\u2026\u76f8\u5f53\u4e8e\u6211\u4eec\u679a\u4e3e\u6240\u6709\u8282\u70b9\u8ba1\u7b97\uff0c\u4e8e\u662f\u6709\n\n$$\nf_{rt}=\\prod\\limits_{u=1}^{n}\\frac{(sz_{u}-1)!}{\\prod\\limits_{fa_v=u}sz_v!}\n$$\n\n\u7b80\u5355\u5316\u5f00\n\n$$\nf_{rt}=\\frac{\\prod\\limits_{u=1}^{n}(sz_{u}-1)!}{\\prod\\limits_{u=1}^{n}\\prod\\limits_{fa_v=u}sz_v!}\n$$\n\n\u6ce8\u610f\u5206\u6bcd\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $u$ \u90fd\u679a\u4e3e $u$ \u7684\u6240\u6709\u513f\u5b50\uff0c\u76f8\u5f53\u4e8e\u679a\u4e3e\u6240\u6709\u975e\u6839\u8282\u70b9\uff08\u56e0\u4e3a\u6bcf\u4e2a\u975e\u6839\u8282\u70b9\u603b\u4f1a\u662f\u67d0\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff09\uff0c\u4e8e\u662f\u6709\n\n$$\nf_{rt}=\\frac{\\prod\\limits_{u=1}^{n}(sz_{u}-1)!}{\\prod\\limits_{u=1,u\\neq rt}^{n}sz_u!}\n$$\n\n\u73b0\u5728\u6765\u62c6\u5206\u5b50\u3002\u5355\u72ec\u628a $u=rt$ \u7684\u62ff\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u5408\u5e76\u5e76\u7ea6\u5206\uff0c\u5f97\u5230\n\n$$\nf_{rt}=(sz_{rt}-1)!\\prod\\limits_{u=1,u\\neq rt}^{n}\\frac{1}{sz_u}\n$$\n\n\u7136\u540e\u5206\u5b50\u5206\u6bcd\u540c\u4e58\u4e00\u4e2a $sz_{rt}$ \u5f97\u5230\u7b54\u6848\u4e3a\n\n$$\nf_{rt}=sz_{rt}!\\prod\\limits_{u=1}^{n}\\frac{1}{sz_u}\n$$\n\n\u63a5\u4e0b\u6765\u8003\u8651\u4e24\u4e2a\u9ed1\u70b9\u548b\u505a\uff0c\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u8282\u70b9 $s$\uff0c\u5411 $a,b$ \u8fde\u65e0\u5411\u8fb9\uff0c\u521d\u59cb\u7684\u65f6\u5019\u53ea\u6709 $s$ \u662f\u9ed1\u70b9\u3002\n\n\u7b2c\u4e00\u6b21\u53ea\u80fd\u53d8 $s$\uff0c\u7136\u540e\u5c31\u53d8\u6210 $s$ \u662f\u7ea2\u70b9\uff0c$a,b$ \u662f\u9ed1\u70b9\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u6837\u5bf9\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002\n\n\u4e8e\u662f\u6811\u5c31\u53d8\u6210\u4e86\u4e00\u9897\u57fa\u73af\u6811\uff0c\u8003\u8651\u600e\u4e48\u6c42\u7b54\u6848\u3002\n\n\u6211\u4eec\u679a\u4e3e\u73af\u4e0a\u67d3\u7ea2\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u8fd9\u662f\u4e0d\u53ef\u884c\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u7528\u7c7b\u4f3c\u4e8e NOIp2018 Day 2 T1 \u7684\u65b9\u6cd5\uff0c\u8003\u8651\u679a\u4e3e\u4e00\u6761\u5728\u73af\u4e0a\u7684\u8fb9\u5e76\u5220\u9664\u4ed6\u6765\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u7528\u91cd\u590d\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u6765\u6392\u9664\u8fd9\u4e9b\u7b54\u6848\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u79cd\u67d3\u8272\u65b9\u6848\u6765\u8bf4\uff0c\u8003\u8651\u8fd9\u4e2a\u65b9\u6848\u5728\u73af\u4e0a\u6700\u540e\u4e00\u4e2a\u88ab\u67d3\u6210\u7ea2\u8272\u7684\u70b9\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6848\u88ab\u67d3\u9ed1\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u65b9\u6848\u90fd\u4f1a\u7b97 $2$ \u6b64\uff0c\u4e8e\u662f\u6700\u7ec8\u7b54\u6848\u8981\u4e58\u4e0a $\\frac{1}{2}$\u3002\n\n\u5bf9\u4e8e\u4e0d\u662f\u73af\u4e0a\u7684\u70b9\u548c\u865a\u62df\u8282\u70b9 $s$ \u6211\u4eec\u90fd\u80fd\u7528 $\\texttt{dfs}$ \u6c42\u51fa\u5b50\u6811\u5927\u5c0f\uff0c\u8bbe\u4ed6\u4eec\u7684\u548c\u4e3a $z$\u3002\n\n\u6211\u4eec\u73b0\u5728\u8003\u8651\u8fd9\u4e9b\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u5728\u73af\u4e0a\u7684\u70b9 $u$ \u6765\u8bf4\uff0c\u8bbe $a_u$ \u8868\u793a\u5b83\u7684\u786e\u5b9a\u5b50\u6811\u5927\u5c0f\uff08\u4e5f\u5c31\u662f\u6240\u6709\u4e0d\u5728\u73af\u4e0a\u7684\u513f\u5b50\u7684\u5927\u5c0f\u4e4b\u548c\u52a0\u4e00\uff09\uff0c$b_u$ \u8868\u793a\u67d0\u79cd\u65ad\u73af\u65b9\u5f0f\u4e0b\u7684 $sz_u$\uff0c\u90a3\u4e48\u901a\u8fc7~~\u4eba\u7c7b\u667a\u6167~~\u6211\u4eec\u53d1\u73b0\n\n\u5c06\u73af\u4e0a\u7684 $k+1$ \u4e2a\u70b9\u7f16\u53f7\uff0c$s$ \u70b9\u4e3a $0$\uff0c\u5176\u4f59\u7684\u4f9d\u6b21\u4e3a $1\\sim k$\uff0c\u5047\u8bbe\u65ad\u7684\u8fb9\u662f $r\\to r+1$\uff0c\u90a3\u4e48\n\n$$b_u=\\begin{cases}\\sum\\limits_{i=1}^{u}a_u,& 1\\leq u\\leq r\\\\\\sum\\limits_{i=u}^{k}a_u,&r+1\\leq u\\leq k\\end{cases}$$\n\n\u6211\u4eec\u5bf9 $a$ \u505a\u524d\u7f00\u548c\u53d8\u6210 $c$\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\n\n$$\\prod b=\\prod_{i\\neq j}\\vert c_i-c_j\\vert$$\n\n\u5176\u4e2d $c_0=0$\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u5feb\u901f\u63d2\u503c\u7684\u5957\u8def\u53bb\u4f18\u5316\u8fd9\u4e2a\u4e1c\u897f\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u5982\u679c\u4f60\u770b\u5230\u4e86\u8fd9\u91cc\u6765\u4e86\uff0c\u8bf7\u518d\u8ddf\u6211\u8bf4\u4e00\u904d\uff1a\n\n$\\texttt{\\color{black}t\\color{red}ommy0103}\\texttt{ is God! }$\n\ntommy0103/qq\n\n### \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#define clr(f,n) memset(f,0,sizeof(int)*(n))\n#define cpy(f,g,n) memcpy(f,g,sizeof(int)*(n))\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\ntypedef unsigned long long int ull;\nconst ll MAXN=524291,MOD=998244353,G=3,INVG=332748118;\nstruct Edge{\n    ll to,prev;\n};\nEdge ed[MAXN];\nll n,x,y,z,fct,from,to,tot,tp,cur,res;\nll rev[MAXN],omgs[MAXN],invo[MAXN];\nll last[MAXN],sz[MAXN],fa[MAXN],st[MAXN],p[MAXN],c[MAXN];\nll pr[MAXN],px[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void addEdge(ll from,ll to)\n{\n    ed[++tot].prev=last[from];\n    ed[tot].to=to;\n    last[from]=tot;\n}\ninline void dfs(ll node,ll f)\n{\n    sz[node]=1,fa[node]=f;\n    for(register int i=last[node];i;i=ed[i].prev)\n    {\n        if(ed[i].to!=f)\n        {\n            dfs(ed[i].to,node),sz[node]+=sz[ed[i].to];\n        }\n    }\n}\ninline ll qpow(ll base,ll exponent)\n{\n    ll res=1;\n    while(exponent)\n    {\n        if(exponent&1)\n        {\n            res=(li)res*base%MOD;\n        }\n        base=(li)base*base%MOD,exponent>>=1;\n    }\n    return res;\n}\ninline void setupOmg(ll cnt)\n{\n    ll limit=log2(cnt)-1,omg;\n    omg=qpow(G,(MOD-1)>>(limit+1)),omgs[cnt>>1]=1;\n    for(register int i=(cnt>>1|1);i!=cnt;i++)\n    {\n        omgs[i]=(li)omgs[i-1]*omg%MOD;\n    }\n    for(register int i=(cnt>>1)-1;i;i--)\n    {\n        omgs[i]=omgs[i<<1]; \n    }\n}\ninline void NTT(ll *cp,ll cnt,ll inv)\n{\n    static ull tcp[MAXN];\n    register ll cur=0,x,shift=log2(cnt)-__builtin_ctz(cnt);\n    if(inv==-1)\n    {\n        reverse(cp+1,cp+cnt);\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        tcp[rev[i]>>shift]=cp[i];\n    }\n    for(register int i=2;i<=cnt;i<<=1)\n    {\n        cur=i>>1;\n        for(register int j=0;j<cnt;j+=i)\n        {\n            for(register int k=0;k<cur;k++)\n            {\n                x=tcp[j|k|cur]*omgs[k|cur]%MOD;\n                tcp[j|k|cur]=tcp[j|k]+MOD-x,tcp[j|k]+=x;\n            }\n        }\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        cp[i]=tcp[i]%MOD;\n    }\n    if(inv==1)\n    {\n        return;\n    }\n    x=MOD-(MOD-1)/cnt;\n    for(register int i=0;i<cnt;i++)\n    {\n        cp[i]=(li)cp[i]*x%MOD;\n    }\n}\ninline void conv(ll fd,ll *f,ll *g,ll *res)\n{\n    static ll tmpf[MAXN],tmpg[MAXN];\n    ll cnt=1,limit=-1;\n    while(cnt<(fd<<1))\n    {\n        cnt<<=1,limit++;\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        tmpf[i]=i<fd?f[i]:0,tmpg[i]=i<fd?g[i]:0;\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<limit);\n    }\n    NTT(tmpf,cnt,1),NTT(tmpg,cnt,1);\n    for(register int i=0;i<cnt;i++)\n    {\n        tmpf[i]=(li)tmpf[i]*tmpg[i]%MOD;\n    }\n    NTT(tmpf,cnt,-1),cpy(res,tmpf,fd);\n}\ninline void inv(ll fd,ll *f,ll *res)\n{\n    static ll tmp[MAXN];\n    if(fd==1)\n    {\n        res[0]=qpow(f[0],MOD-2);\n        return;\n    }\n    inv((fd+1)>>1,f,res);\n    ll cnt=1,limit=-1;\n    while(cnt<(fd<<1))\n    {\n        cnt<<=1,limit++;\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        tmp[i]=i<fd?f[i]:0;\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<limit);\n    }\n    NTT(tmp,cnt,1),NTT(res,cnt,1);\n    for(register int i=0;i<cnt;i++)\n    {\n        res[i]=(li)(2-(li)tmp[i]*res[i]%MOD+MOD)%MOD*res[i]%MOD;\n    }\n    NTT(res,cnt,-1),clr(res+fd,cnt-fd-1);\n}\ninline void mod(ll fd,ll gd,ll *f,ll *g,ll *r)\n{\n    static ll tmpf[MAXN],tmpg[MAXN],tinv[MAXN],q[MAXN];\n    if(fd<gd)\n    {\n        for(register int i=0;i<gd-1;i++)\n        {\n            r[i]=f[i];\n        }\n        return;\n    }\n    for(register int i=0;i<fd;i++)\n    {\n        tmpf[i]=f[fd-1-i];\n    }\n    for(register int i=0;i<gd;i++)\n    {\n        tmpg[i]=g[gd-1-i];\n    }\n    inv(fd-gd+2,tmpg,tinv);\n    ll cnt=1,limit=-1;\n    while(cnt<(fd<<1))\n    {\n        cnt<<=1,limit++;\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<limit);\n    }\n    NTT(tmpf,cnt,1),NTT(tinv,cnt,1);\n    for(register int i=0;i<cnt;i++)\n    {\n        q[i]=1ll*tmpf[i]*tinv[i]%MOD;\n    }\n    NTT(q,cnt,-1),reverse(q,q+fd-gd+1);\n    for(register int i=0;i<cnt;i++)\n    {\n        tmpf[i]=tinv[i]=tmpg[i]=0;\n        q[i]=i<fd-gd+1?q[i]:0,g[i]=i<gd?g[i]:0;\n    }\n    cnt>>=1,limit--;\n    for(register int i=0;i<cnt;i++)\n    {\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<limit);\n    }\n    NTT(q,cnt,1),NTT(g,cnt,1);\n    for(register int i=0;i<cnt;i++)\n    {\n        tmpf[i]=1ll*q[i]*g[i]%MOD;\n    }\n    NTT(g,cnt,-1),NTT(tmpf,cnt,-1);\n    for(register int i=0;i<gd-1;i++)\n    {\n        r[i]=(f[i]-tmpf[i]+MOD)%MOD;\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        q[i]=tmpf[i]=0;\n    }\n}\nvector<ll> tmpf2[MAXN<<2];\nvoid dnc(ll *pts,ll l,ll r,ll node)\n{\n    static ll tmp[MAXN],tmp2[MAXN];\n    if(l==r)\n    {\n        tmpf2[node].push_back((MOD-pts[l])%MOD),tmpf2[node].push_back(1);\n        return;\n    }\n    ll mid=(l+r)>>1,ls=node<<1,rs=ls|1;\n    dnc(pts,l,mid,ls),dnc(pts,mid+1,r,rs);\n    ll d=tmpf2[ls].size(),d2=tmpf2[rs].size();\n    copy(tmpf2[ls].begin(),tmpf2[ls].end(),tmp);\n    copy(tmpf2[rs].begin(),tmpf2[rs].end(),tmp2);\n    ll cnt=1,limit=-1;\n    while(cnt<(d+d2))\n    {\n        cnt<<=1,limit++;\n    }\n    for(register int i=0;i<cnt;i++)\n    {\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<limit);\n    }\n    NTT(tmp,cnt,1),NTT(tmp2,cnt,1);\n    for(register int i=0;i<cnt;i++)\n    {\n        tmp[i]=(li)tmp[i]*tmp2[i]%MOD;\n    }\n    NTT(tmp,cnt,-1),tmpf2[node].resize(d+d2-1);\n    copy(tmp,tmp+d+d2-1,tmpf2[node].begin()),clr(tmp,cnt),clr(tmp2,cnt);\n}\nll tmpf3[19][MAXN];\nvoid dnc2(ll fd,ll *f,ll depth,ll l,ll r,ll node,ll *res)\n{\n    static ll tmp[MAXN],pw[17];\n    if(r-l<=1024)\n    {\n        for(register int i=l;i<=r;i++)\n        {\n            ll x=c[i],cur=f[fd-1],v1,v2,v3,v4;\n            pw[0]=1;\n            for(register int j=1;j<=16;j++)\n            {\n                pw[j]=1ll*pw[j-1]*x%MOD;\n            }\n            for(register int j=fd-2;j-15>=0;j-=16)\n            {\n                v1=(1ll*cur*pw[16]+1ll*f[j]*pw[15]+\n                    1ll*f[j-1]*pw[14]+1ll*f[j-2]*pw[13])%MOD;\n                v2=(1ll*f[j-3]*pw[12]+1ll*f[j-4]*pw[11]+\n                    1ll*f[j-5]*pw[10]+1ll*f[j-6]*pw[9])%MOD;\n                v3=(1ll*f[j-7]*pw[8]+1ll*f[j-8]*pw[7]+\n                    1ll*f[j-9]*pw[6]+1ll*f[j-10]*pw[5])%MOD;\n                v4=(1ll*f[j-11]*pw[4]+1ll*f[j-12]*pw[3]+\n                    1ll*f[j-13]*pw[2]+1ll*f[j-14]*pw[1])%MOD;\n                cur=(0ll+v1+v2+v3+v4+f[j-15])%MOD;\n            }\n            for(register int j=((fd-1)&15)-1;~j;j--)\n            {\n                cur=(1ll*cur*x+f[j])%MOD;\n            }\n            res[i]=cur;\n        }\n        return;\n    }\n    ll sz=tmpf2[node].size()-1;\n    for(register int i=0;i<sz+1;i++)\n    {\n        tmp[i]=tmpf2[node][i];\n    }\n    clr(tmpf3[depth],sz+10),mod(fd,sz+1,f,tmp,tmpf3[depth]);\n    ll mid=(l+r)>>1;\n    dnc2(sz,tmpf3[depth],depth+1,l,mid,node<<1,res);\n    dnc2(sz,tmpf3[depth],depth+1,mid+1,r,(node<<1)|1,res);\n    for(register int i=0;i<sz;i++)\n    {\n        tmpf3[depth][i]=0;\n    }\n}\ninline void eval(ll fd,ll pcnt,ll *f,ll *pts,ll *res)\n{\n    dnc(pts,0,pcnt-1,1),dnc2(fd,f,0,0,pcnt-1,1,res);\n}\nint main()\n{\n    setupOmg(524288),n=read(),x=read(),y=read();\n    for(register int i=0;i<n-1;i++)\n    {\n        from=read(),to=read();\n        addEdge(from,to),addEdge(to,from);\n    }\n    dfs(x,0);\n    while(y!=x)\n    {\n        st[++tp]=y,p[y]=1,y=fa[y];\n    }\n    st[++tp]=y,p[y]=1,y=fa[y],z=n+1,fct=1;\n    for(register int i=1;i<=tp;i++)\n    {\n        c[i]=1;\n        for(register int j=last[st[i]];j;j=ed[j].prev)\n        {\n            if(!p[ed[j].to])\n            {\n                c[i]+=sz[ed[j].to];\n            }\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        fct=(li)fct*i%MOD;\n        if(!p[i])\n        {\n            z=(li)z*sz[i]%MOD;\n        }\n    }\n    fct=(li)fct*(n+1)%MOD;\n    for(register int i=1;i<=tp;i++)\n    {\n        c[i]=(c[i-1]+c[i])%MOD;\n    }\n    dnc(c,1,tp+1,1);\n    for(register int i=1;i<=tp+1;i++)\n    {\n        pr[i-1]=(li)i*tmpf2[1][i]%MOD;\n    }\n    memset(tmpf2,0,sizeof(tmpf2)),eval(n+1,tp+1,pr,c,px);\n    for(register int i=0;i<=tp;i++)\n    {\n        cur=(li)fct*qpow((li)px[i]*z%MOD,MOD-2)%MOD;\n        res=(res+(((tp-i)&1)?MOD-cur:cur))%MOD;\n    }\n    printf(\"%d\\n\",(li)res*499122177%MOD);\n}\n```",
        "postTime": 1590375109,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5450 \u3010[THUPC2018]\u6dd8\u7c73\u795e\u7684\u6811\u3011"
    },
    {
        "content": "\u840c\u840c\u591a\u9879\u5f0f\u3002\n\n\u5148\u8003\u8651\u6709\u6839\u6811\u6307\u5b9a\u6839\u8282\u70b9\u7684\u62d3\u6251\u6392\u5e8f\u65b9\u6848\u6570\u3002\n\n\u8bbe $dp[u]$ \u662f $u$ \u4e3a\u6839\u5b50\u6811\u7684\u65b9\u6848\u6570\uff0c\u5bb9\u6613\u53d1\u73b0\u6709\n$$dp[u]=(\\sum_{v\\in son(u)}siz[v])!\\prod_{v\\in son(u)}\\frac{1}{siz[v]!}=(siz[u]-1)!\\prod_{v\\in son(u)}\\frac{1}{siz[v]!}$$\n\u7a0d\u5fae\u63a8\u5bfc\u4e00\u4e0b\u53ef\u4ee5\u5f97\u5230 $f[rt]$ \u662f\uff1a\n$$n\\times n!\\prod_{i=1}^{n}\\frac{1}{siz[i]}$$\n\u8003\u8651\u539f\u95ee\u9898\u3002\n\n\u679a\u4e3e $(a,b)$ \u8def\u5f84\u4e0a\u7684\u4e00\u6761\u65ad\u8fb9\uff0c\u8868\u793a\u4e00\u8fb9\u5168\u90e8\u662f\u88ab $a$ \u6269\u5c55\u6210\u7ea2\u8272\u8282\u70b9\u7684\uff0c\u53e6\u4e00\u8fb9\u5168\u662f\u88ab $b$ \u6269\u5c55\u7684\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u975e $(a,b)$ \u8def\u5f84\u4e0a\u8282\u70b9\u7684 $siz$ \u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u662f\u5e38\u6570\u3002\n\n\u4e8e\u662f\u53ea\u9700\u8981\u8003\u8651 $(a,b)$ \u8def\u5f84\u4e0a\u8282\u70b9\u7684 $siz$ \u5373\u53ef\u3002\n\n\u8bbe $a_i$ \u8868\u793a\u65ad\u6389 $(a,b)$ \u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u540e\uff0c\u539f\u672c\u8def\u5f84\u4e0a\u7b2c $i$ \u4e2a\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u5927\u5c0f\uff0c$S$ \u4e3a $a$ \u7684\u524d\u7f00\u548c\u3002\n\n\u53ef\u4ee5\u968f\u624b\u5199\u51fa\u67ff\u5b50\u7b54\u6848\u662f\uff1a\n$$\\sum_{i=1}^{n-1}\\frac{1}{\\prod_{j=1}^{i}(S_i-S_{j-1})\\prod_{j=i+1}^{n}(S_j-S_i)}$$\n\u8bbe $f_i=\\lim_{x\\to S_i}\\frac{\\prod_{j=1}^{n}(x-S_j)}{x-S_i}$\uff0c\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u662f\uff1a\n$$\\sum_{i=1}^{n-1}\\frac{1}{S_if_i(-1)^{n-i}}$$\n\u6839\u636e\u6d1b\u5fc5\u8fbe\u6cd5\u5219\uff0c\u8bbe\uff1a\n$$F(x)=\\prod_{i=1}^{n}(x-S_i)$$\n\u6709\uff1a\n$$f_i=G'(S_i)$$\n\u4e8e\u662f\u5199\u4e2a\u5206\u6cbb\u4e58\u518d\u5199\u4e2a\u591a\u70b9\u6c42\u503c\u5c31\u505a\u5b8c\u4e86\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\u5b9e\u9645\u4e0a\u7b97\u91cd\u4e86\u3002\n\n\u56e0\u4e3a\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6700\u540e\u88ab\u8ba1\u7b97\u5230\u7684\uff0c\u5c06\u5b83\u5f52\u4e3a\u5de6\u90e8\u5206\u548c\u53f3\u90e8\u5206\u5404\u7b97\u4e86\u4e00\u6b21\u3002\uff08\u9664\u4e86\u7aef\u70b9\uff09\n\n\u6240\u4ee5\u76f4\u63a5\u628a\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4f5c\u4e3a\u9ed1\u70b9\u7684\u65b9\u6848\u7b97\u51fa\u6765\uff0c\u52a0\u4e0a\u4e4b\u540e\u9664\u4ee5 $2$ \u5373\u53ef\u3002\u590d\u6742\u5ea6\u4e0d\u53d8\u3002\n\n\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u7bc7\u9898\u89e3\u56e0\u4e3a\u5168\u5bb6\u6876\u592a\u957f\u88ab\u5c0f\u7c89\u5154\u62d2\u8fc7\u4e00\u904d\u3002\n```cpp\nint n,a,b,ege,f[M],h[M],S[M],sz[M],siz[M];bool vis[M];int len,nd[M];\nPoly F[M<<2];\nstruct Edge{\n\tint v,nx;\n}e[M<<1];\ninline void AddEdge(const int&u,const int&v){\n\te[++ege]=(Edge){v,h[u]};h[u]=ege;\n\te[++ege]=(Edge){u,h[v]};h[v]=ege;\n}\ninline bool Find(const int&u,const int&fa){\n\tif(u==a)return vis[nd[++len]=u]=true;\n\tfor(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^fa&&Find(v,u))return vis[nd[++len]=u]=true;\n\treturn false;\n}\ninline void DFS(const int&u,const int&fa){\n\tsiz[u]=1;for(int v,E=h[u];E;E=e[E].nx)if(v=e[E].v,v^fa&&!vis[v])DFS(v,u),siz[u]+=siz[v];\n}\ninline void Build(const int&u,const int&L,const int&R){\n\tif(L==R)return F[u].push_back(mod-S[L]),F[u].push_back(1);\n\tconst int&mid=L+R>>1;Build(u<<1,L,mid);Build(u<<1|1,mid+1,R);F[u]=F[u<<1]*F[u<<1|1];\n}\ninline void Solve(const int&u,const int&L,const int&R,Poly H){\n\tif(L==R)return void(f[L]=H[0]);\n\tconst int&mid=L+R>>1;Solve(u<<1,L,mid,H%F[u<<1]);Solve(u<<1|1,mid+1,R,H%F[u<<1|1]);\n}\ninline int Get(const int&u,const int&fa){\n\tint prod(1);sz[u]=1;for(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^fa)prod=1ll*prod*Get(v,u)%mod,sz[u]+=sz[v];\n\treturn 1ll*prod*sz[u]%mod;\n}\nsigned main(){\n\tint sum(0),prod(1);n=read();a=read();b=read();init(n+1);\n\tfor(int u,v,i=1;i<n;++i)u=read(),v=read(),AddEdge(u,v);Find(b,0);\n\tfor(int i=1;i<=len;++i)DFS(nd[i],0);for(int i=1;i<=n;++i)if(!vis[i])prod=1ll*prod*siz[i]%mod;prod=pow(prod);\n\tif(len==1){\n\t\tfor(int i=1;i<n;++i)prod=1ll*prod*i%mod;write(prod);\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=len;++i)S[i]=S[i-1]+siz[nd[i]];Build(1,1,len);Solve(1,1,len,F[1].Der());\n\tfor(int i=1;i<len;++i)sum=(sum+pow(1ll*(len-i&1?mod-f[i]:f[i])*S[i]%mod))%mod;prod=1ll*prod*sum%mod;\n\tprod=(prod+pow(Get(a,0)))%mod;prod=(prod+pow(Get(b,0)))%mod;prod=1ll*prod*pow(2)%mod;\n\tfor(int i=1;i<=n;++i)prod=1ll*prod*i%mod;write(prod);\n}\n```",
        "postTime": 1661434045,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u6570 \u591a\u9879\u5f0f P5450"
    }
]