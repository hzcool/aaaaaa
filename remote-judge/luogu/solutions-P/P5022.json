[
    {
        "content": "# Noip 2018 Day2 T1\n\n## \u66b4\u529b\u5220\u8fb9n^2\n\n\u6ca1\u9519\u5c31\u662f\u8fd9\u6837\n\n\u90a3\u4e00\u4e2aE\u6570\u7ec4\u5b58u\uff0cv\u3002\n\n\u518d\u7528\u4e00\u4e2avector\u6392\u5e8f\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n\nconst int Maxn = 5005;\nusing namespace std;\n\nint cnt;\nint head[Maxn];\nstruct edge{\n\tint u,v,next;\n}e[Maxn<<1];\n\nvoid adde(int u,int v){\n\te[cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].next=head[u];\n\thead[u]=cnt++;\n}\n\nvector <int> vec[Maxn];\n\nint n,m;\nint ans[Maxn];\nint k[Maxn];\n\nint x,y;\nint dep;\nbool vis[Maxn];\n\nvoid dfs(int u,int fa){\n\tif(vis[u])\n\t\treturn;\n\tvis[u]=1;\n\tk[++dep]=u;\n\tfor(int i=0;i<vec[u].size();i++){\n\t\tint v=vec[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tif((v==y&&u==x)||(v==x&&u==y))\n\t\t\tcontinue;\n\t\tdfs(v,u);\n\t}\n}\n\nbool check(){\n\tfor(int i=1;i<=n;i++){\n\t\tif(k[i]==ans[i])\n\t\t\tcontinue;\n\t\tif(k[i]>ans[i])\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n}\n\nvoid change(){\n\tfor(int i=1;i<=n;i++)\n\t\tans[i]=k[i];\n}\n\n//Finally u can know China Computer Federation\nvoid fuckccf(int u,int fa){\n\tif(vis[u])\n\t\treturn;\n\tvis[u]=1;\n\tans[++dep]=u;\n\tfor(int i=0;i<vec[u].size();i++){\n\t\tint v=vec[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tfuckccf(v,u);\n\t}\n}\n\nint main(){\n\tint u,v;\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tvec[u].push_back(v);\n\t\tvec[v].push_back(u);\n\t\tadde(u,v);\n\t\tadde(v,u);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(vec[i].begin(),vec[i].end());\n\tif(n==m){\n\t\tfor(int i=0;i<cnt;i+=2){\n\t\t\tdep=0;x=e[i].u;y=e[i].v;\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tdfs(1,-1);\n\t\t\tif(dep<n)\n\t\t\t\tcontinue;\n\t\t\tif(ans[1]==0)\n\t\t\t\tchange();\n\t\t\telse if(check()) change();\n\t\t}                    \n\t\tfor(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t\treturn 0;\n\t}\n\tfuckccf(1,-1);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1542375009,
        "uid": 25071,
        "name": "Ganshuaige",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u5199\u4e00\u7bc7\u7b80\u5355\u7684\u9898\u89e3\u9020\u798f\u793e\u4f1a\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u7684\u60c5\u51b5\uff0c\u80fd\u53c2\u52a0\u63d0\u9ad8\u7ec4\u7684oier\u90fd\u5e94\u8be5\u53ef\u4ee5\u60f3\u51fa\u6765\u53ea\u8981\u7ed9\u4e00\u4e2a\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7\u8fdb\u884c\u4e00\u6b21\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u7684\u8d2a\u5fc3\u601d\u60f3\uff0c\u5728\u6811\u4e0adfs\u4e00\u904d\u5373\u53ef\u89e3\u51b3\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u57fa\u73af\u6811\u4e0a\u7684\u60c5\u51b5\u5462\uff1f\u8fd9\u4e2a\u5c31\u6709\u533a\u5206\u5ea6\u4e86\u3002~~\u8003\u573a\u4e0a\u7684\u6211\u770b\u5230\u57fa\u73af\u6811\u60f3\u90fd\u6ca1\u60f3\u5c31\u8dd1t2\u4e86~~\n\n\u4f3c\u4e4e\u6709\u5f88\u591a\u4eba\u4f1a\u4ee5\u4e3a\u7528\u4e00\u4e2apriority_queue\u7ef4\u62a4\u53ef\u4ee5\u5230\u8fbe\uff08\u5305\u62ec\u7ed5\u56de\u53bb\uff09\u7684\u70b9\u5373\u53ef\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6784\u9020\u51fa\u5f88\u591a\u53cd\u4f8b\uff0c\u4f8b\u5982\u8fd9\u4e00\u68f5\u57fa\u73af\u6811\n\n![](https://cdn.luogu.com.cn/upload/pic/43845.png)\n\n\u4f60\u5982\u679c\u60f3\u8981\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u7b54\u6848\u662f`123456`\uff0c\u7136\u800c\u6b63\u786e\u7b54\u6848\u663e\u7136\u4e3a`123645`\u3002\u90a3\u4e48\u5982\u4f55\u89e3\u51b3\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5220\u8fb9\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002\u57fa\u73af\u6811\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u5220\u4e86\u4e00\u6761\u8fb9\u5c31\u53d8\u6210\u4e00\u68f5\u6811\u3002\u5982\u679c\u6211\u4eec\u624b\u73a9\u4e00\u4e0b\u57fa\u73af\u6811\u7684\u6837\u4f8b\u53ef\u4ee5\u53d1\u73b0\uff1a\u5fc5\u5b9a\u6709\u4e00\u6761\u8fb9\u662f\u4e0d\u4f1a\u7ecf\u8fc7\u7684\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u60f3\u5230\u5220\u8fb9\uff0c\u7136\u540e\u7c7b\u4f3c\u4e8e\u5728\u6811\u4e0a\u8fdb\u884c\u8d2a\u5fc3\u7684\u601d\u8def\u5373\u53ef\u3002\n\n\u4ee3\u7801\u4e5f\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u6211\u4e2a\u4eba\u8ba4\u4e3a\u4ee3\u7801\u53ef\u8bfb\u6027\u5f88\u9ad8\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <vector>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nint n,m;\n\nvector <int> G[5050];\n\nint ans[5050],edge[5050][2];\n\nnamespace solve1\n{\n\tint cnt=0;\n\t\n\tbool vis[5050];\n\t\n\tinline void dfs(int u,int fa)\n\t{\n\t\tans[++cnt]=u;\n\t\tvis[u]=true;\n\t\tfor (int i=0;i<G[u].size();i++)\n\t\t{\n\t\t\tint v=G[u][i];\n\t\t\tif (!vis[v])\n\t\t\t\tdfs(v,u);\n\t\t}\n\t}\n\t\n\tvoid main()\n\t{\n\t\tmemset(ans,0,sizeof(ans));\n\t\tmemset(vis,0,sizeof(vis));\n\t\tcnt=0;\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tsort(G[i].begin(),G[i].end());\n\t\tdfs(1,0);\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t}\n}\n\nnamespace solve2\n{\n\tint cnt=0,res[5050];\n\t\n\tbool vis[5050];\n\t\n\tinline bool comp()\n\t{\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tif (ans[i]!=res[i])\n\t\t\t\treturn ans[i]>res[i];\n\t\treturn false;\n\t}\n\t\n\tint del_u,del_v;\n\t\n\tinline bool check(int u,int v)\n\t{\n\t\tif ((u==del_u && v==del_v) || (u==del_v && v==del_u))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\tinline void dfs(int u,int fa)\n\t{\n\t\tres[++cnt]=u;\n\t\tvis[u]=true;\n\t\tfor (int i=0;i<G[u].size();i++)\n\t\t{\n\t\t\tint v=G[u][i];\n\t\t\t//cout << u << \" \" << v << \" \" << del_u << \" \" << del_v << endl;\n\t\t\tif (!vis[v] && check(u,v))\n\t\t\t\tdfs(v,u);\n\t\t}\n\t}\n\t\n\tvoid main()\n\t{\n\t\tmemset(ans,0x3f,sizeof(ans));\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tsort(G[i].begin(),G[i].end());\n\t\tfor (int i=1;i<=m;i++)\n\t\t{\n\t\t\tcnt=0;\n\t\t\tmemset(res,0,sizeof(res));\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tdel_u=edge[i][0];\n\t\t\tdel_v=edge[i][1];\n\t\t\tdfs(1,0);\n\t\t\t/*\n\t\t\tfor (int i=1;i<=n;i++)\n\t\t\t\tcout << res[i] << \" \";\n\t\t\tcout << cnt << endl;\n\t\t\t*/\n\t\t\tif (comp() && cnt==n)\n\t\t\t\tmemcpy(ans,res,sizeof(res));\n\t\t}\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t}\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t\tedge[i][0]=u;\n\t\tedge[i][1]=v;\n\t}\n\tif (m==n-1)\n\t\tsolve1::main();\n\telse\n\t\tsolve2::main();\n\treturn 0;\n}\n\n```\n\n\u7136\u540e\u8fd9\u4efd\u4ee3\u7801\u5728\u4e0d\u5f00O2\u7684\u60c5\u51b5\u4e0b\u662f\u4f1atle\u7684\u3002\uff08\u5c11\u7237\u673a\u53ef\u80fd\u4e0d\u4f1a\uff0c\u624b\u5934\u4e0a\u6ca1\u67098700k\uff09\u539f\u56e0\u5982\u4e0b\uff1a\n\n1\u3001vector\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u5efa\u8bae\u624b\u5199\u4e00\u4e2a\u6216\u8005\u7528\u94fe\u5f0f\u524d\u5411\u661f\u8fdb\u884c\u5b58\u56fe\u3002\n\n2\u3001\u6709\u5f88\u591a\u65e0\u7528\u7684\u60c5\u51b5\u3002\u65e0\u7528\u7684\u60c5\u51b5\u5c31\u662f\u5f53\u5220\u7684\u8fd9\u6761\u8fb9\u4e0d\u5728\u73af\u4e0a\u7684\u65f6\u5019\uff0c\u8fd9\u6837\u5220\u53bb\u8fd9\u6761\u8fb9\uff0c\u8fd9\u4e2a\u56fe\u5c31\u4e0d\u8fde\u901a\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u526a\u679d\u3002\n\n\u5982\u679c\u5728\u8fd9\u4e0a\u9762\u8fdb\u884c\u597d\u4f18\u5316\uff0c\u7801\u957f++\uff0c\u65f6\u95f4--\u3002\n\n---\n\n\u4e0d\u8fc7\u8fd8\u6709\u4e00\u79cd\u5f88\u795e\u4ed9\u7684O(n)\u505a\u6cd5\uff0c\u597d\u50cf\u662f\u4e00\u8fb9\u5220\u4e00\u8fb9\u7ef4\u62a4\u4ec0\u4e48\u7684\uff1f\u4e0d\u592a\u4f1a\u3002\n\n\u4ee5\u53ca\u542c\u8bf4\u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u6269\u5c55\u5230\u4ed9\u4eba\u638c\u4e0a\uff0c\u751a\u81f3\u53ef\u4ee5\u7ef4\u62a4\u52a8\u6001\u56fe\u8fde\u901a\u6027\u800c\u6269\u5c55\u5230dag\u4e0a\uff1f",
        "postTime": 1542465951,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "## UPDATE\n\u52a0\u4e86\u65b0\u505a\u6cd5\uff0c\u73b0\u5728\uff0c\u4e0d\u7528\u5f00o2\u4e5f\u80fd\u8fc7\u9898\u4e86\uff0c\uff08\u6211\u8c03\u4e86\u4e00\u4e0a\u5348\uff0c\u6c42\u7ba1\u7406\u5458\u901a\u8fc7qwq\n\n\n------------\n\n\n\u8fd9\u9053\u9898\u7684\u8bdd\uff0c\u611f\u89c9\u96be\u5ea6\u6807\u7684\u6709\u70b9\u9ad8\u4e86\uff0c\u5176\u5b9e\u6ca1\u6709\u8fd9\u4e2a\u96be\u5ea6\u3002\n\n### 60\u5206\u505a\u6cd5\n\n------------\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8fd9\u4e2a\u9898\u768460\u5206\u662f\u767d\u9001\u7684\uff08\u7136\u800c\u6211\u53bb\u5e74\u7801\u4e86\u4e09\u4e2a\u5c0f\u65f6\u6700\u7ec8\u6302\u6389\u4e86\uff0c\u90a3\u65f6\u8fd8\u662f\u592a\u83dc\u4e86\uff09\u3002\u90a3\u5b83\u4e3a\u4ec0\u4e48\u662f\u767d\u9001\u7684\u5462\uff1f\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u8fd9\u662f\u4e00\u68f5\u6811\u3002\u89c2\u5bdf\u9898\u9762\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u80fd\u91cd\u590d\u5730\u8d70\u67d0\u4e00\u6761\u8fb9\u2014\u2014\uff08\u9898\u9762\uff1a\u4efb\u610f\u9009\u5b9a\u4e00\u4e2a\u57ce\u5e02\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7136\u540e\u4ece\u8d77\u70b9\u5f00\u59cb\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u6761\u4e0e\u5f53\u524d\u57ce\u5e02\u76f8\u8fde\u7684\u9053\u8def\uff0c\u8d70\u5411\u4e00\u4e2a\u6ca1\u6709\u53bb\u8fc7\u7684\u57ce\u5e02\uff09\u3002\u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u5230\u8fbe\u4e00\u4e2a\u70b9\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u904d\u5386\u5b8c\u5b83\u7684\u6574\u4e2a\u5b50\u6811\u624d\u80fd\u540e\u9000\u7136\u540e\u53bb\u5230\u522b\u7684\u70b9\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528vector\u6765\u5b58\u50a8\u5b83\u7684\u6240\u6709\u8fb9\u7136\u540e\u6309\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\u7684\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u4e00\u4e0b\u5e8f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\u4e86\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u7528\u4e00\u4e2adfs\u6309\u987a\u5e8f\u904d\u5386\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5728dfs\u8fc7\u7a0b\u4e2d\u628a\u5b83\u4eec\u538b\u5165ans\u6570\u7ec4\u4e2d\uff0c\u6700\u540e\u8f93\u51faans\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u8fd960\u5206\u662f\u771f\u7684\u6c34\uff09\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> a[5010];\nint n,m;\nint ans[5010],cnt;\nint vis[5010];\nvoid dfs(int u,int fa) {\n\tif(vis[u])\n\t\treturn ;\n\tvis[u]=1;\n\tans[++cnt]=u;\n\tfor(int i=0;i<a[u].size();i++) {\n\t\tint v=a[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue ;\n\t\tdfs(v,u);\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v;\n\tfor(int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\ta[u].push_back(v);\n\t\ta[v].push_back(u);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(a[i].begin(),a[i].end());\n\tdfs(1,0);\n\tfor(int i=1;i<=cnt;i++) {\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\n\n------------\n### 100\u5206\u505a\u6cd5\n\n\n------------\n\u518d\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0\u540e\u56db\u4e2a\u5b50\u4efb\u52a1n=m\uff0c\u800c\u6574\u4e2a\u56fe\u53c8\u662f\u8054\u901a\u7684\uff0c\u8fd9\u8bf4\u660e\uff0c\u8fd9\u4e2a\u56fe\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u3002\u90a3\u4e48\u6709\u7684\u540c\u5b66\u53ef\u80fd\u4e0d\u77e5\u9053\u57fa\u73af\u6811\u662f\u4e2a\u5565\uff0c\u6211\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\uff1a\u57fa\u73af\u6811\u5c31\u662f\u8bf4\uff0c\u6709\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u6811\u7684\u6839\u8282\u70b9\uff0c\u6bd4\u5982\u8fd9\u6837\uff08\u4e0a\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/eqpafu1t.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u7406\u89e3\u6210\u5728\u4e00\u68f5\u6811\u4e0a\u7684\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u89c1\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u62ff\u521a\u624d\u90a3\u5f20\u56fe\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5220\u6389\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\u5b83\u5c31\u53d8\u6210\u4e86\u4e00\u68f5\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3qg6m5nd.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\u5c31\u50cf\u8fd9\u6837\u3002\n\n\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u6211\u4eec\u904d\u5386\u6574\u4e2a\u56fe\u7684\u65f6\u5019\uff0c\u73af\u4e0a\u603b\u6709\u4e00\u6761\u8fb9\u662f\u4e0d\u4f1a\u88ab\u7ecf\u8fc7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u65ad\u54ea\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u56fe\u6309\u716760\u5206\u505a\u6cd5\u8dd1\u4e00\u8fb9dfs\uff0c\u6700\u540e\u5bf9\u6240\u6709\u60c5\u51b5\u53d6\u6700\u5927\u503c\u3002\u518d\u53bb\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u627e\u73af\uff0c\u53ea\u63a5\u679a\u4e3em\u6761\u8fb9\u4e2d\u65ad\u54ea\u4e00\u6761\u5c31\u53ef\u4ee5\u4e86\uff0c\u867d\u7136\u5341\u5206\u66b4\u529b\uff0c\u4f46\u662f\u7b97\u6cd5\u590d\u6742\u5ea6\u662f\u6ca1\u95ee\u9898\u7684\u3002\u7136\u800c\uff0c\u6211\u5199\u4e11\u4e86\uff0c\u7531\u4e8evector\u90a3\u4f4e\u4e0b\u7684\u6548\u7387\uff0c\u559c\u51fa\u671b\u5916\u5730\u83b7\u5f97\u4e8692\u5206\uff0cT\u6389\u4e86\u4e24\u4e2a\u70b9\uff0c\u50cf\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/844parjy.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8bdd\u8bf4t0.01s\u8fd8\u662f\u633a\u96be\u53d7\u7684\u3002\u4e0d\u8fc7\uff0c\u5f53\u4f60\u5f00\u4e86o2\uff0c\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u901a\u8fc7\u4e86\uff08\u5f53\u7136\uff0cccf\u51e0\u5341\u4e07\u7684\u8bc4\u6d4b\u673a\u6216\u8005\u9999\u6e2f\u8bb0\u8005\u5e94\u8be5\u4e0d\u5f00o2\u4e5f\u6ca1\u4e8b\uff09\n\n\u4e0a\u4ee3\u7801\uff08\u8bdd\u8bf4\u6211\u5199\u9898\u89e3\u4e4b\u524d\u770b\u5230\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u90a3\u4e2a\u51fd\u6570\u540d\u633a\u6709\u610f\u601d\uff0c\u628a\u81ea\u5df1\u7684\u4e5f\u6539\u4e86\uff0c\u4f46\u662f\uff0c\u6211\u6015\u88ab\u7981\u8d5b\u5440\uff01\uff01\uff01\u4e8e\u662f\u8d34\u4e0a\u6765\u53c8\u6539\u4e86\u4e0b\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6284\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\uff0c\u5b83\u53ef\u80fd\u7531\u4e8e\u51fd\u6570\u540d\u6ca1\u6709\u5b8c\u5168\u6539\u597d\u800c\u8fc7\u4e0d\u4e86\uff0c\u6240\u4ee5\uff0c\u522b\u6284qwq\uff09\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> a[5010];\nint n,m;\nint res[5010],ans[5010],tot;\nint vis[5010];\nint du,dv;\nstruct Edge {\n\tint from,to;\n}e[5010];\nvoid dfs2(int u,int fa) {\n\tif(vis[u])\n\t\treturn ;\n\tvis[u]=1;\n\tans[++tot]=u;\n\tfor(int i=0;i<a[u].size();i++) {\n\t\tint v=a[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue ;\n\t\tdfs2(v,u);\n\t}\n}\nvoid dfs1(int u,int fa) {\n\tif(vis[u])\n\t\treturn ;\n\tvis[u]=1;\n\tres[++tot]=u;\n\tfor(int i=0;i<a[u].size();i++) {\n\t\tint v=a[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue ;\n\t\tif((u==du&&v==dv)||(u==dv&&v==du))\n\t\t\tcontinue ;\n\t\tdfs1(v,u);\n\t}\n}\nint check() {\n\tfor(int i=1;i<=n;i++) {\n\t\tif(res[i]<ans[i])\n\t\t\treturn 1;\n\t\telse if(res[i]>ans[i])\n\t\t\treturn 0;\n\t}\n\treturn 0;\n}\nvoid update() {\n\tfor(int i=1;i<=n;i++) {\n\t\tans[i]=res[i];\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v;\n\tfor(int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\ta[u].push_back(v);\n\t\ta[v].push_back(u);\n\t\te[i].from=u;\n\t\te[i].to=v;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(a[i].begin(),a[i].end());\n\tif(m==n) {\n\t\tint flag=1;\n\t\tfor(int i=1;i<=m;i++) {\n\t\t\tdu=e[i].from,dv=e[i].to;\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\ttot=0;\n\t\t\tdfs1(1,0);\n\t\t\tif(tot<n)\n\t\t\t\tcontinue ;\n\t\t\tif(flag) {\n\t\t\t\tupdate();\n\t\t\t\tflag=0;\n\t\t\t}\n\t\t\tif(check())\n\t\t\t\tupdate();\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tprintf(\"%d \",ans[i]);\n\t\t}\n\t} else {\n\t\tdfs2(1,0);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tprintf(\"%d \",ans[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n------------\n### \u7ec8\u4e8e\u5230\u4e86\u65b0\u7684\u505a\u6cd5\u4e86\uff0c\u540c\u6837\u662f100\u5206\uff0c\u4f46\u662f\uff0c\u8dd1\u7684\u98de\u5feb\u3002\n\u6211\u4eec\u53d1\u73b0\uff0c\u66b4\u529b\u65ad\u8fb9\u8dd1\u7684\u4e5f\u592a\u6162\u4e86\uff0c\u4e8e\u662f\uff0c\u6211\u51b3\u5b9a\uff0c\u5148\u8dd1\u4e00\u904ddfs\uff0c\u628a\u73af\u627e\u51fa\u6765\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u5199\u4e00\u4e2adfs3\u51fd\u6570\uff1a\n```cpp\nvoid dfs3(int from,int fa) {\n\tvis[from]=1;\n\tfor(int i=0;i<a[from].size();i++) {\n\t\tint to=a[from][i];\n\t\tif(to==fa)\n\t\t\tcontinue ;\n\t\tif(vis[to]) {\n\t\t\tflag=1;\n\t\t\tcir1[to]=1;\n\t\t\tcir1[from]=1;\n\t\t\tu1[++cnt]=from;\n\t\t\tv1[cnt]=to;\n\t\t\treturn ;\n\t\t}\n\t\tdfs3(to,from);\n\t\tif(flag&&cir1[to])\n\t\t\tif(cir1[from]) {\n\t\t\t\tflag=0;\n\t\t\t\tu1[++cnt]=from;\n\t\t\t\tv1[cnt]=to;\n\t\t\t\treturn ;\n\t\t\t} else {\n\t\t\t\tcir1[from]=1;\n\t\t\t\tu1[++cnt]=from;\n\t\t\t\tv1[cnt]=to;\n\t\t\t\treturn ;\n\t\t\t}\n\t}\n}\n```\n\u55ef\uff0c\u8fd9\u51fd\u6570\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u7ec6\u8bb2\u4e86\uff0c\u603b\u4e4b\uff0c\u5c31\u662f\u627e\u51fa\u73af\uff0c\u628a\u73af\u4e0a\u7684\u8fb9\u538b\u8fdb\u6570\u7ec4\u91cc\uff0c\u8fd9\u6837\u5728\u679a\u4e3e\u65ad\u54ea\u4e9b\u8fb9\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u6570\u7ec4\u4e86\uff0c\u590d\u6742\u5ea6\u5927\u5927\u964d\u4f4e\u3002\n\n\u4e0a\u5168\u5957\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> a[5010];\nint n,m;\nint res[5010],ans[5010],tot;\nint cir1[5010];\nint u1[10010],v1[10010],cnt;\nint vis[5010];\nint du,dv;\nint flag;\nstruct Edge {\n\tint from,to;\n}e[5010];\nvoid dfs2(int u,int fa) {\n\tif(vis[u])\n\t\treturn ;\n\tvis[u]=1;\n\tans[++tot]=u;\n\tfor(int i=0;i<a[u].size();i++) {\n\t\tint v=a[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue ;\n\t\tdfs2(v,u);\n\t}\n}\nvoid dfs1(int u,int fa) {\n\tif(vis[u])\n\t\treturn ;\n\tvis[u]=1;\n\tres[++tot]=u;\n\tfor(int i=0;i<a[u].size();i++) {\n\t\tint v=a[u][i];\n\t\tif(v==fa)\n\t\t\tcontinue ;\n\t\tif((u==du&&v==dv)||(u==dv&&v==du))\n\t\t\tcontinue ;\n\t\tdfs1(v,u);\n\t}\n}\nvoid dfs3(int from,int fa) {\n\tvis[from]=1;\n\tfor(int i=0;i<a[from].size();i++) {\n\t\tint to=a[from][i];\n\t\tif(to==fa)\n\t\t\tcontinue ;\n\t\tif(vis[to]) {\n\t\t\tflag=1;\n\t\t\tcir1[to]=1;\n\t\t\tcir1[from]=1;\n\t\t\tu1[++cnt]=from;\n\t\t\tv1[cnt]=to;\n\t\t\treturn ;\n\t\t}\n\t\tdfs3(to,from);\n\t\tif(flag&&cir1[to])\n\t\t\tif(cir1[from]) {\n\t\t\t\tflag=0;\n\t\t\t\tu1[++cnt]=from;\n\t\t\t\tv1[cnt]=to;\n\t\t\t\treturn ;\n\t\t\t} else {\n\t\t\t\tcir1[from]=1;\n\t\t\t\tu1[++cnt]=from;\n\t\t\t\tv1[cnt]=to;\n\t\t\t\treturn ;\n\t\t\t}\n\t}\n}\nint check() {\n\tfor(int i=1;i<=n;i++) {\n\t\tif(res[i]<ans[i])\n\t\t\treturn 1;\n\t\telse if(res[i]>ans[i])\n\t\t\treturn 0;\n\t}\n\treturn 0;\n}\nvoid update() {\n\tfor(int i=1;i<=n;i++) {\n\t\tans[i]=res[i];\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v;\n\tfor(int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\ta[u].push_back(v);\n\t\ta[v].push_back(u);\n\t\te[i].from=u;\n\t\te[i].to=v;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(a[i].begin(),a[i].end());\n\tif(m==n) {\n\t\tdfs3(1,0);\n\t\tint flag=1;\n\t\tfor(int i=1;i<=cnt;i++) {\n\t\t\tdu=u1[i];dv=v1[i];\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\ttot=0;\n\t\t\tdfs1(1,0);\n\t\t\tif(tot<n)\n\t\t\t\tcontinue ;\n\t\t\tif(flag) {\n\t\t\t\tupdate();\n\t\t\t\tflag=0;\n\t\t\t}\n\t\t\tif(check())\n\t\t\t\tupdate();\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tprintf(\"%d \",ans[i]);\n\t\t}\n\t} else {\n\t\tdfs2(1,0);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tprintf(\"%d \",ans[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\nOK\uff0c\u8fd9\u7bc7\u9898\u89e3\u5dee\u4e0d\u591a\u5c31\u5230\u8fd9\u91cc\u4e86\uff0c\u6700\u540e\uff0c\u795d\u5927\u5bb6\u8eab\u4f53\u5065\u5eb7\uff0c\u518d\u89c1\u3002\uff08\u522b\u5fd8\u4e86\u70b9\u4e2a\u8d5e\u518d\u8d70\uff01",
        "postTime": 1571970427,
        "uid": 84473,
        "name": "\u94c1\u9524",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u6765\u8bf4\u660e\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$ \u7684\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u80fd\u901a\u8fc7\u6b64\u9898\u7684\u52a0\u5f3a\u7248\uff01~~\u53cc\u500d\u7ecf\u9a8c~~\n\n------------\n\u663e\u7136 DFS \u8def\u5f84 $O(n)$ \u7684\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u4f18\u5316\u7684\uff0c\u6240\u4ee5\u5177\u4f53\u8981\u63d0\u9ad8\u6548\u7387\u5c31\u5f97\u4ece\u65ad\u8fb9\u5165\u624b\u3002\u5c06\u539f\u6765\u7684\u66b4\u529b\uff0c\u6539\u4e3a\u901a\u8fc7\u4e00\u6b21\u641c\u7d22\u6765\u786e\u5b9a\u5e94\u8be5\u65ad\u7684\u662f\u54ea\u6761\u8fb9\u3002\n\n\u5982\u4f55\u627e\u73af\uff0c\u641c\u7d22\u8def\u5f84\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\uff0c\u6211\u4eec\u5177\u4f53\u5206\u6790\u5982\u4f55\u65ad\u8fb9\uff1a\n\n\u6bd4\u5982\u8fd9\u6837\u7684\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/45609.png)\n\n## \u5904\u7406\u65b9\u6cd5\uff1a\n\n### 1.\u5148\u627e\u5230\u73af\u548c\u73af\u7684\u5165\u70b9\uff08\u7ea2\u8272\uff0c\u6a59\u8272\u90e8\u5206\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/45610.png )\n\n### 2.\u5bf9\u73af\u4e0a\u7684\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\uff0c\u627e\u51fa\u5176\u6700\u5927\u7684\u5b50\u8282\u70b9\uff0c**\u5165\u70b9\u4e0d\u7528\u5904\u7406**\uff08\u84dd\u8272\u90e8\u5206\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/45611.png)\n\n### 3.\u904d\u5386\u6574\u4e2a\u73af\u8fdb\u884c\u65ad\u8fb9\n\n\u8bbe $tmax[i]$ \u4e3a $i$ **\u8282\u70b9**\u7684\u6700\u5927**\u5b50\u8282\u70b9**\uff0c $next[i]$ \u4e3a $i$ \u7684\u540e\u4e00\u4e2a**\u8282\u70b9**\uff0c $cut[i]$ \u4e3a $i$ \u7684\u524d\u4e00\u4e2a\u6709**\u5b50\u8282\u70b9**\u7684**\u8282\u70b9**\uff0c\u8be5**\u8282\u70b9**\u6bd4 $i$ \u5927\u7684**\u5b50\u8282\u70b9**\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a**\u5b50\u8282\u70b9**\uff08\u6b64\u5904\u6240\u8bf4\u7684**\u8282\u70b9**\u90fd\u4e3a\u73af\u4e0a\u7684\u8282\u70b9\uff0c**\u5b50\u8282\u70b9**\u90fd\u4e0d\u662f\u73af\u4e0a\u7684\u8282\u70b9\uff09\n\n#### first. \u9996\u5148\u5224\u65ad**\u5165\u70b9**\u7684\u4e24\u4e2a\u53f6\u8282\u70b9\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u8fdb\u5165\u73af\n\n![](https://cdn.luogu.com.cn/upload/pic/45614.png )\n\n#### second. \u82e5 $next[i] < tmax[i]$ ,\u5219\u53ef\u4ee5\u6269\u5c55\u5230\u540e\u4e00\u4e2a\u8282\u70b9\n\n![](  https://cdn.luogu.com.cn/upload/pic/45618.png)\n\n#### third. \u82e5 $next[i] > tmax[i]$ \u4f46\u662f $next[i] < cut[i]$ ,\u4e5f\u53ef\u4ee5\u6269\u5c55\u5230\u540e\u4e00\u4e2a\u8282\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/45620.png )\n\n#### fourth. \u82e5\u540c\u65f6\u4e0d\u6ee1\u8db3second\u548cthird\u7684\u6761\u4ef6\uff0c\u6216 $next[i]$ \u4e3a\u5165\u70b9\uff0c\u5219\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\uff0c\u5e76\u65ad\u5f00 $i$ \u548c $next[i]$ \u4e4b\u95f4\u7684\u8fb9\n\n![](https://cdn.luogu.com.cn/upload/pic/45621.png )\n\n### 4. DFS\u641c\u7d22\u8def\u5f84\n\n![](  https://cdn.luogu.com.cn/upload/pic/45622.png)\n\n\u53ea\u8981\u5728\u65ad\u8fb9\u540e\u7684\u56fe\uff08\u4e00\u68f5\u6811\uff09\u4e2d\u7528DFS\u641c\u7d22\u8def\u5f84\u5373\u53ef\n\n### 5.\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u7ed9\u8fb9\u6392\u5e8f $O(n \\log n)$\n\n\u627e\u73af $O(n)$\n\n\u65ad\u8fb9 $O(n)$\n\n\u641c\u7d22\u8def\u5f84 $O(n)$\n\n\u6240\u4ee5**\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1 $O(n \\log n)$** \uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u4f53\u3002\n\n### 6.\u7a0b\u5e8f\uff08pascal\uff09\n\n```pas\nprogram project1;\nvar\n   r,path,father,son,tmax:array[0..500005]of longint;\n   ttf:array[0..500005]of boolean;\n   l,v,x,y:array[0..1000005]of longint;\n   n,m,p,k,fat,nox,noy:longint;\n\nfunction max(a,b:longint):longint;\nbegin\n  if a>b then exit(a) else exit(b);\nend;\n\nfunction min(a,b:longint):longint;\nbegin\n  if a<b then exit(a) else exit(b);\nend;\n\nprocedure sc(f,fa:longint);\nvar i:longint;\nbegin\n  i:=r[f];\n  while i<>0 do begin\n    if (v[i]<>fa) and not((f=nox) and (v[i]=noy)) and not((f=noy) and (v[i]=nox)) then begin\n      inc(k);\n      path[k]:=v[i];\n      sc(v[i],f);\n    end;\n    i:=l[i];\n  end;\nend;\n\nfunction sc2(f,fa:longint):boolean;\nvar i:longint;\nbegin\n  sc2:=false;\n  i:=r[f];\n  while i<>0 do begin\n    if v[i]<>fa then begin\n      if father[v[i]]=0 then father[v[i]]:=f\n        else begin\n          p:=v[i];\n          fat:=father[v[i]];\n          father[v[i]]:=f;\n          son[f]:=v[i];\n          exit(true);\n        end;\n      if sc2(v[i],f)=true then begin\n        son[f]:=v[i];\n        ttf[v[i]]:=true;\n        exit(true)\n      end;\n    end;\n    i:=l[i];\n  end;\nend;\n\nprocedure sc3;\nvar i,j:longint;\nbegin\n  i:=p;\n  while father[i]<>p do begin\n    i:=father[i];\n    j:=r[i];\n    while j<>0 do begin\n      if (v[j]<>son[i]) and (v[j]<>father[i]) then tmax[i]:=max(tmax[i],v[j]);\n      j:=l[j];\n    end;\n  end;\nend;\n\nfunction mmax(k,p,o:longint):longint;\nvar i:longint;\nbegin\n  mmax:=10000000;\n  i:=r[p];\n  while i<>0 do begin\n    if (v[i]<>o) and (v[i]>k) then mmax:=min(mmax,v[i]);\n    i:=l[i];\n  end;\nend;\n\nfunction cut:longint;\nvar i,x,y,q,s:longint;\nbegin\n  cut:=0;\n  if father[p]<son[p] then begin\n    i:=father[p];\n    cut:=mmax(i,p,fat);\n    while ((father[i]<tmax[i]) or ((father[i]>tmax[i]) and (father[i]<cut))) and (father[i]<>p) do begin\n      i:=father[i];\n      s:=mmax(i,son[i],son[son[i]]);\n      if s<>10000000 then cut:=s;\n    end;\n    nox:=i;\n    noy:=father[i];\n  end else begin\n    i:=son[p];\n    cut:=mmax(i,p,fat);\n    while ((son[i]<tmax[i]) or ((son[i]>tmax[i]) and (son[i]<cut))) and (son[i]<>p) do begin\n      i:=son[i];\n      s:=mmax(i,father[i],father[father[i]]);\n      if s<>10000000 then cut:=s;\n    end;\n    nox:=i;\n    noy:=son[i];\n  end;\nend;\n\nprocedure qsort(l,r:longint);\nvar i,j,mid,t:longint;\nbegin\n  i:=l;\n  j:=r;\n  mid:=y[(i+j) div 2];\n  repeat\n    while y[i]>mid do inc(i);\n    while y[j]<mid do dec(j);\n    if i<=j then begin\n      t:=y[i];\n      y[i]:=y[j];\n      y[j]:=t;\n      t:=x[i];\n      x[i]:=x[j];\n      x[j]:=t;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\n\nprocedure re;\nvar i,t,xx,yy:longint;\nbegin\n  for i:=1 to m do begin\n    read(xx,yy);\n    t:=2*i;\n    x[t]:=xx;\n    y[t]:=yy;\n    x[t-1]:=yy;\n    y[t-1]:=xx;\n  end;\n  qsort(1,2*m);\n  for i:=1 to 2*m do begin\n    l[i]:=r[x[i]];\n    r[x[i]]:=i;\n    v[i]:=y[i];\n  end;\nend;\n\nprocedure main;\nvar i:longint;\nbegin\n  k:=0;\n  inc(k);\n  path[k]:=1;\n  father[1]:=1;\n  if m=n then begin\n    sc2(1,0);\n    sc3;\n    cut;\n  end;\n  sc(1,0);\n  for i:=1 to k do write(path[i],' ');  writeln;\nend;\n\nbegin\n  fillchar(r,sizeof(r),0);\n  fillchar(l,sizeof(l),0);\n  read(n,m);\n  re;\n  main;\nend.\n```",
        "postTime": 1544237721,
        "uid": 24425,
        "name": "fysbb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u9000\u5f79\u524d\u5148\u5199\u4e00\u6ce2\u9898\u89e3\u3002\u3002\u3002\n\n\u8003\u573a\u7b2c\u4e00\u773c\u7784\u8fc7\u53bb\uff0c\u597d\u50cf\u662f\u633a\u88f8\u7684\u4e00\u4e2a\u57fa\u73af\u6811~~\uff08\u4f46\u662f\u653eT1\u4e0d\u592a\u597d\u5427\u3002\u3002\u3002\uff09~~\uff0c\u601d\u8def\u4e5f\u633a\u660e\u786e\u7684\u3002\n\n\u5199\u4e86\u6574\u657440min\u8fc7\u4e86\u5927\u6837\u4f8b\uff0c\u540e\u6765\u68c0\u67e5\u597d\u51e0\u53d1\u5e78\u597dA\u4e86\u3002\u3002\u3002\n\n\u4f46\u662f\u8fd8\u662f\u56e0\u4e3a400~410\u7684\u5206\u6570\u9884\u5907\u9000\u5f79\u4e86QAQ\u3002\u3002\u3002\n\n~~\uff08\u4ee5\u4e0a\u90fd\u662f\u5e9f\u8bdd\uff09~~\n\n------------\n\n## \u5148\u8003\u865160\u5206\u7684\u60c5\u51b5\uff1a\n\n\u56e0\u4e3a\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u4f60\u4e00\u65e6\u8bbf\u95ee\u4e86\u67d0\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4f60\u5c31\u5fc5\u987b\u628a\u8fd9\u9897\u5b50\u6811\u8bbf\u95ee\u5b8c\u624d\u80fd\u8bbf\u95ee\u5176\u4ed6\u5b50\u8282\u70b9\uff0c\u5426\u5219\u5269\u4f59\u7684\u8282\u70b9\u5c06\u65e0\u6cd5\u8bbf\u95ee\u5230\u3002\n\n\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u5148\u4ece1\u51fa\u53d1\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u6309\u7167\u5b57\u5178\u5e8f\u7684\u5927\u5c0f\u4f9d\u6b21\u8bbf\u95ee\uff0c\u770b\u4e00\u773c~~\u826f\u5fc3~~\u7684\u6570\u636e\u8303\u56f4\uff0c\u6211\u5c31\u66b4\u529b\u5730\u628a\u6240\u6709\u5b50\u8282\u70b9\u5b58\u4e0b\u6765\uff0c\u6392\u5e8f\u4e00\u904d\u4f9d\u6b21\u8bbf\u95ee\uff08\u6570\u7ec4\u5c3d\u91cf\u4e0d\u8981\u5f00\u5728\u9012\u5f52\u91cc\uff0c~~\u7206\u6808\u6211\u4e0d\u8d1f\u8d23~~\uff09\u3002\n\n\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n## \u6ee1\u5206\uff1a\n\n\u73b0\u5728\u6811\u4e2d\u591a\u4e86\u4e00\u4e2a\u73af\u3002\n\n\u76f8\u4fe1\u4f60\u4e00\u5b9a\u5b66\u8fc7**\u57fa\u73af\u6811**\u3002\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u5047\u8bbe\u6709m\u6761\u8fb9\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u65c5\u884c\uff0c\u6709\u4e14\u4ec5\u6709m-1\u6761\u8fb9\u80fd\u88ab\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u65c5\u884c\u7684\u8def\u5f84\u4ecd\u65e7\u662f\u4e00\u68f5\u6811\u3002\n\n\u4e5f\u5c31\u662f\u6bcf\u6b21\u66b4\u529b\u7684\u5272\u65ad\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u8dd1\u4e00\u904d\uff0c\u627e\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5c31\u597d\u4e86\u3002\n\n\u627e\u73af\u53ef\u4ee5\u7528tarjan\uff0c\u6211\u628a\u6240\u6709\u7684\u8fb9\u5b58\u4e86\u4e00\u904d\uff0c\u7136\u540e\u4e24\u7aef\u70b9\u7684\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u70b9\u53cc\u7684\u8fb9\u5c31\u5728\u73af\u4e0a\u4e86\u3002\n\nPascal Code\uff1a\n\n```cpp\n// luogu-judger-enable-o2//\u624b\u6296\u5f00\u7684\nuses math;\nvar\n  e:array[0..400005,0..2]of longint;\n  a:array[0..5005,0..5005]of longint;\n  head,next,d,dfn,low,cut,id,sta,nowans,ans:array[0..20005]of longint;\n  //nowans\u8bb0\u5f55\u5f53\u524d\u6700\u5c0f\u904d\u5386\n  //ans\u4e3a\u603b\u7b54\u6848\n  c:array[0..400005]of boolean;\n  n,m,i,j,fl,num,top,s:longint;\n  flag:boolean;\nprocedure add(x,y:longint);\nbegin\n  inc(num);\n  d[num]:=y;\n  next[num]:=head[x];\n  head[x]:=num;\nend;\nprocedure sort(u,l,r:longint);//\u6392\u5e8f\uff08from Pascal\u5e93\uff09\n      var\n         i,j,x,y:longint;\n      begin\n         i:=l;\n         j:=r;\n         x:=a[u][(l+r) div 2];\n         repeat\n           while a[u][i]<x do\n            inc(i);\n           while x<a[u][j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=a[u][i];\n                a[u][i]:=a[u][j];\n                a[u][j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(u,l,j);\n         if i<r then\n           sort(u,i,r);\n      end;\nprocedure dfs(u,fa:longint);\nvar\n  i,v,ll:longint;\nbegin\n  inc(nowans[0]);\n  nowans[nowans[0]]:=u;\n  a[u][0]:=0;//\u4e0d\u5b58\u5728dfs\u4e2d\uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u641e\u5b9a\n  ll:=head[u];\n  while ll<>0 do//\u8bb0\u5f55\u5b50\u8282\u70b9\u4fe1\u606f\n  begin\n    v:=d[ll];\n    if (v=fa) or c[ll] then//\u9664\u53bb\u5272\u65ad\u7684\u8fb9\n    begin\n      ll:=next[ll];\n      continue;\n    end;\n    inc(a[u][0]);\n    a[u][a[u][0]]:=v;\n    ll:=next[ll];\n  end;\n  sort(u,1,a[u][0]);\n  //\u6392\u5e8f\n  for i:=1 to a[u][0] do//\u4f9d\u6b21\u8bbf\u95ee\n    dfs(a[u][i],u);\nend;\nprocedure tarjan(u,fa:longint);//tarjan\u6c42\u70b9\u53cc\nvar\n  v,ll:longint;\nbegin\n  inc(s);\n  dfn[u]:=s;\n  low[u]:=s;\n  inc(top);\n  sta[top]:=u;\n  ll:=head[u];\n  while ll<>0 do\n  begin\n    v:=d[ll];\n    if dfn[v]=0 then\n    begin\n      tarjan(v,u);\n      low[u]:=min(low[u],low[v]);\n    end else\n      if v<>fa then\n        low[u]:=min(low[u],dfn[v]);\n    ll:=next[ll];\n  end;\n  if dfn[u]=low[u] then//\u867d\u7136\u4e0d\u662f\u6807\u51c6\u7684\u70b9\u53cc\u6c42\u6cd5\uff0c\u4f46\u662f\u5728\u8fd9\u9053\u9898\u4e2d\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u6ca1\u4e8b\u3002\u3002\u3002\n  begin\n    inc(fl);\n    repeat\n      id[sta[top]]:=fl;\n      dec(top);\n    until sta[top+1]=u;\n  end;\nend;\nbegin\n  readln(n,m);\n  for i:=1 to m do\n  begin\n    readln(e[i][1],e[i][2]);\n    add(e[i][1],e[i][2]);\n    add(e[i][2],e[i][1]);\n  end;\n  if m=n-1 then\n  begin\n    dfs(1,0);\n    for i:=1 to n-1 do\n      write(nowans[i],' ');\n    writeln(nowans[n]);\n  end else\n  begin\n    tarjan(1,0);\n    for i:=1 to m do\n      if id[e[i][1]]=id[e[i][2]] then//\u627e\u73af\u4e0a\u7684\u8fb9\n      begin\n        inc(cut[0]);\n        cut[cut[0]]:=i;\n      end;\n    for i:=1 to n do\n      ans[i]:=n;\n    for i:=1 to cut[0] do//\u679a\u4e3e\u6bcf\u6761\u8fb9\n    begin\n      c[cut[i]*2-1]:=true;//\u8868\u793a\u5272\u65ad\n      c[cut[i]*2]:=true;\n      nowans[0]:=0;//\u6e05\u7a7a\n      dfs(1,0);\n      flag:=false;//\u662f\u5426\u66ff\u6362\u7684flag\n      for j:=1 to n do//\u6bd4\u8f83\u7b54\u6848\n        if nowans[j]<>ans[j] then\n        begin\n          if nowans[j]<ans[j] then\n            flag:=true;\n          break;\n        end;\n      if flag then//\u66f4\u6362\u7b54\u6848\n      begin\n        for j:=1 to n do\n          ans[j]:=nowans[j];\n      end;\n      c[cut[i]*2-1]:=false;//\u53bb\u6389\u6807\u8bb0\n      c[cut[i]*2]:=false;\n    end;\n    for i:=1 to n-1 do//\u8f93\u51fa\n      write(ans[i],' ');\n    writeln(ans[n]);\n  end;\nend.\n```",
        "postTime": 1542274281,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "$Upd$ $2019/11/17$:\n\n\u5f88\u62b1\u6b49\u4e4b\u524d\u7684\u4ee3\u7801\u6709\u9505\uff0c\u7f3a\u5c11\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\u4f1a\u5bfc\u81f4\u5982\u679c\u4e00\u53e3\u6c14\u8d70\u5b8c\u6574\u4e2a\u73af\u7684\u8bdd\u8fd8\u4f1a\u518d\u4ece\u53e6\u4e00\u8fb9\u8fdb\u5165\u73af\u4e2d\uff0c\u5df2\u7ecf\u4fee\u590d\uff0c\u73b0\u5728\u672c\u9898\u89e3\u628aN\u6539\u4e3a$500001$\u540e\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u52a0\u5f3a\u7248\u3002\n\n\u611f\u8c22@FuzeTheHostage \u5927\u4f6c\u63d0\u4f9b\u7684Hack\u6570\u636e\uff0c\u4ee5\u53ca\u540c\u6837\u53d1\u73b0\u95ee\u9898\u7684@\u62df\u6cea\u54b8\u9633 \u5927\u4f6c\u3002\n\n------------\n\n\u672c\u9898\u7684\u57fa\u672c\u601d\u8def\u662f$dfs$+\u5806\u3002\n\n\u8d77\u70b9\u662f$1$\uff0c\u8fd9\u4e2a\u4fe1\u606f\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u6765\uff0c\u5426\u5219\u4e00\u5b9a\u4e0d\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u3002\n\n### \u5bf9\u4e8e$m=n-1$\u7684\u60c5\u51b5\uff1a\n\n\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u6811\u5f62\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u6bcf\u6b21\u53ea\u80fd\u662f\u524d\u8fdb\u5230\u4e00\u4e2a\u6ca1\u6709\u53bb\u8fc7\u7684\u57ce\u5e02\uff0c\u6216\u8005\u5f80\u56de\u5012\uff0c\u8bf4\u660e\u4f60\u4e0d\u80fd\u518d\u4e00\u4e2a\u94fe\u7684\u4e2d\u95f4\u7684\u65f6\u5019\u5f80\u56de\u5012\uff0c\u53ea\u80fd\u9009\u5b9a\u4e00\u4e2a\u94fe\u4e00\u76f4\u8d70\u5230\u5934\uff0c\u7136\u540e\u5012\u8f66\u56de\u53bb\u3002\n\n\u7531\u4e8e\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6bcf\u5f53\u6211\u4eec\u5904\u5728\u4e00\u4e2a\u5c94\u8def\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u4e0b\u8fd9\u4e2a\u70b9\u6240\u6709\u7684\u51fa\u8fb9\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u5806\u5b58\u4e0b\u9700\u8981\u53bb\u7684\u70b9\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u53d6\u5806\u9876\u7684\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u4e00\u8fb9\u904d\u5386\u4e00\u904d\u8f93\u51fa\u5e8f\u5217\u5c31\u53ef\u4ee5\u4e86\uff0c\u62ff\u5230$60$\u5206\u3002\n\n### \u5bf9\u4e8e$m=n$\u7684\u60c5\u51b5\uff1a\n\n\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u5f62\u7684\u60c5\u51b5\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u4f60\u5904\u5728\u73af\u7684\u5185\u90e8\u7684\u65f6\u5019\uff0c\u4f60\u662f\u53ef\u4ee5\u6389\u5934\u8fd4\u56de\u7684\uff0c\u5269\u4e0b\u7684\u70b9\u53ef\u4ee5\u4ece\u73af\u7684\u53e6\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u5230\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u4f9d\u7136\u662f\u6811\u5f62\u7684\u7ed3\u6784\uff0c\u904d\u5386\u7684\u65b9\u6cd5\u548c\u4e0a\u9762\u57fa\u672c\u4e00\u81f4\u3002\u4f46\u662f\u5bf9\u4e8e\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u786e\u5b9a\u5230\u5e95\u662f\u5728\u54ea\u4e2a\u4f4d\u7f6e\u6389\u5934\u3002\n\n\u7531\u4e8e\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u53ef\u4ee5\u4e0d\u505a$dp$\uff08\u53cd\u6b63\u6211\u61d2\u5f97\u62c6\u73af\u505a$dp$\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u7684\u53ea\u662f\u5373\u5c06\u5230\u8fbe\u7684\u4e0b\u4e00\u4e2a\u65b0\u57ce\u5e02\u7684\u7f16\u53f7\u8d8a\u5c0f\u8d8a\u597d\uff0c\u800c\u4e0d\u7528\u53bb\u7ba1\u522b\u7684\uff0c\u663e\u7136\u5c31\u662f\u8d2a\u5fc3\u561b\u3002\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u68f5\u57fa\u73af\u6811\u7684\u67d0\u4e2a\u73af\u4e0a\u7684\u70b9\uff0c\u5b83\u7684\u8fd8\u8fde\u63a5\u7740\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u8fd9\u68f5\u6811\u4e5f\u662f\u5fc5\u987b\u8981\u904d\u5386\u7684\uff0c\u4e0d\u80fd\u6389\u5934\u4e0d\u53bb\u7ba1\u3002\n\n#### \u5982\u679c\u904d\u5386\u8fd9\u68f5\u6811\u6bd4\u6cbf\u7740\u73af\u8d70\u66f4\u4f18\u7684\u8bdd\uff0c\u90a3\u4e48\u5fc5\u987b\u5148\u8d70\u4e00\u904d\u8fd9\u68f5\u6811\u3002\n\n\u6253\u4e2a\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cuoqjn0r.png)\n\n\u4ece$1$\u51fa\u53d1\u540e\u6cbf\u7740\u73af\u8d70\u5230$2$ $3$\u3002\n\n\u5728$3$\u7684\u4f4d\u7f6e\u63a5\u4e0a\u4e86\u4e00\u68f5\u6811\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u53d1\u73b0\u5148\u8d70\u6811\u66f4\u4f18\uff0c\u4e8e\u662f\u5148\u8d70\u4e00\u904d\u6811\uff1a$4$ $11$ $13$ $14$ $15$ $12$ $16$ $17$\u3002\n\n#### \u5f53\u7136\uff0c$1$\u4e0d\u4e00\u5b9a\u603b\u662f\u5728\u73af\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u4ece$1$\u5f00\u59cb\u904d\u5386\u65f6\u8fdb\u5165\u73af\u7684\u7a81\u7834\u53e3$st$\u3002\n\n\u6253\u4e2a\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/q6ymbbh0.png)\n\n\u627e\u73af\u7684\u65f6\u5019\u904d\u5386\u987a\u5e8f\u4e0d\u8981\u7d27\u3002\n\n\u4ece$1$\u5f00\u59cb$dfs$\uff0c\u4f9d\u6b21\u627e\u5230\uff1a$2$ $3$ $5$ $8$ $7$ $6$ $4$\u3002\n\n\u53d1\u73b0\u4ece$4$\u80fd\u591f\u627e\u5230\u4e4b\u524d\u627e\u8fc7\u7684$2$\u5e76\u4e14$2$\u4e0d\u662f$4$\u7684\u76f4\u63a5\u7236\u4eb2\uff0c\u90a3\u4e48$2$\u5c31\u662f\u8fdb\u5165\u73af\u7684\u7a81\u7834\u53e3\u3002\n\n\u76f4\u63a5\u6253\u6807\u8bb0\u4e00\u5c42\u5c42\u8fd4\u56de\uff0c\u628a\u73af\u4e0a\u7684\u70b9\u90fd\u6807\u8bb0\u4e00\u4e0b\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5904\u7406\u51fa$st$\u548c\u73af\u4e0a\u7684\u70b9\u6765\u3002\n\n\u5982\u679c\u6211\u4eec\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u5230\u8fbe\u4e86$st$\uff0c\u90a3\u4e48\u8fd9\u5c31\u8fdb\u73af\u4e86\u3002\n\n\u8fdb\u5165\u73af\u4e2d\u4e4b\u540e\u5c31\u9700\u8981\u65f6\u523b\u8003\u8651\u80fd\u4e0d\u80fd\u6389\u5934\u7684\u95ee\u9898\u4e86\uff0c\u90a3\u4e48\u80fd\u5426\u6389\u5934\u7684\u5173\u952e\u5728\u4e8e\u4ec0\u4e48\u5462\uff1f\n\n#### \u5982\u679c\u8fd9\u4e2a\u57fa\u73af\u6811\u662f\u4e2a\u79c3\u73af\uff0c\u95ee\u9898\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u3002\n\n\u6253\u4e2a\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tj7c1x8p.png)\n\n\u4ece$1$\u5f00\u59cb\uff0c\u8d70\u5230$2$ $3$\u3002\n\n\u7136\u540e\u53d1\u73b0\u5982\u679c\u4ece$3$\u8d70\u5230$5$\uff0c\u4e0d\u5982\u6389\u5934\u53bb\u8d704\u6765\u7684\u66f4\u597d\u3002\n\n\u90a3\u5c31\u6389\u5934\uff0c\u8d70$4$ $7$ $6$ $5$\u3002\n\n\u5bf9\u4e8e\u79c3\u73af\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55st\u4e0a\u8fde\u63a5\u7684\u4e24\u4e2a\u73af\u70b9\uff0c\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\u76f4\u63a5\u62ff\u6765\u904d\u5386\uff0c\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u8bb0\u5f55\u4e3a$another$\u3002\n\n\u5982\u679c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u524d\u65b9\u7684\u70b9\u6bd4$another$\u8981\u5927\uff0c\u6389\u5934\u56de\u5230$st$\uff0c\u7136\u540e\u6cbf\u7740\u73af\u7684\u53e6\u4e00\u4fa7\u7ee7\u7eed\u8d70\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u5728\u73af\u4e0a\u5df2\u7ecf\u6389\u8fc7\u4e00\u6b21\u5934\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u4e0d\u80fd\u5728\u968f\u4fbf\u6389\u5934\u4e86\uff0c\u76f8\u5f53\u4e8e\u53c8\u53d8\u6210\u4e86\u4e00\u68f5\u6811\u3002\n\n#### \u5728\u8fd9\u91cc\uff0c$another$\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u542f\u53d1\uff1a\u5bf9\u4e8e\u5e76\u975e\u79c3\u73af\u7684\u57fa\u73af\u6811\uff0c\u5982\u679c\u6211\u4eec\u8bb0\u5f55\u4e0b\u5728\u73af\u4e0a\u7684\u8fd9\u4e2a\u70b9\u5982\u679c\u56de\u5934\uff0c\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\u4e1c\u897f\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u4e86\u3002\u5982\u679c\u8fd9\u4e2a\u73af\u70b9\u6240\u9700\u8981\u7ecf\u8fc7\u7684\u4e0b\u4e00\u4e2a\u73af\u70b9\u6bd4\u5982\u679c\u56de\u5934\u9700\u8981\u7ecf\u8fc7\u7684\u70b9\u8981\u5927\uff0c\u90a3\u4e48\u56de\u5934\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u5982\u679c\u56de\u5934\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\u70b9\u5462\uff1f\n\n\u6253\u4e2a\u4f8b\u5b50\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/bguv6xdt.png)\n\n\u6211\u4eec\u628a\u73af\u4e0a\u7684\u70b9\u53eb\u505a\u73af\u70b9\uff0c\u5b9a\u4e49$another[x]$\u8868\u793a\u5982\u679c\u5728\u73af\u70b9x\u9664\u6389\u5934\u4e0b\u4e00\u4e2a\u5230\u8fbe\u7684\u4e4b\u524d\u6ca1\u6709\u5230\u8fbe\u8fc7\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u73af\u70b9\uff08\u9664$st$\u5916\uff0c\u56e0\u4e3a$st$\u4e0d\u80fd\u56de\u5934\uff09\uff0c\u5b83\u56de\u5934\u4e4b\u540e\u662f\u56de\u5230\u524d\u4e00\u4e2a\u73af\u70b9\uff0c\u90a3\u4e48\u524d\u4e00\u4e2a\u73af\u70b9\u8be5\u600e\u4e48\u8d70\uff0c\u5b83\u56de\u5934\u4e4b\u540e\u5c31\u600e\u4e48\u8d70\u3002\n\n\u7b2c\u4e00\u7c7b\u6bd4\u5982$5$\uff0c\u5982\u679c\u4ece\u8fd9\u91cc\u6389\u5934\uff0c\u662f\u56de\u5230$3$\uff0c\u56de\u5230$3$\u4e4b\u540e\u4f1a\u63a5\u7740\u904d\u5386$6$\u6240\u5728\u7684\u6811\uff0c\u6240\u4ee5$anothe[5]=6$\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f$5$\u7684\u4e0b\u4e00\u4e2a\u5144\u5f1f\u3002\n\n\u7b2c\u4e00\u7c7b\u6bd4\u5982$3$\uff0c\u6389\u5934\u4e4b\u540e\u56de\u5230$2$\uff0c\u800c\u5230$2$\u4e4b\u540e\u8fd8\u662f\u6389\u5934\u5f80\u56de\u8d70\uff0c\u6240\u4ee5\u6709$another[3]=another[2]$\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5144\u5f1f\u7684\u73af\u70b9\uff0c\u5b83\u7684$another$\u5c31\u662f\u5b83\u7684\u7236\u4eb2\u7684$another$\u3002\u7279\u522b\u5730\uff0c$17$\u867d\u7136\u6709\u5144\u5f1f\u8282\u70b9\uff0c\u4f46\u662f$17$\u7684\u5144\u5f1f\u65e9\u5728\u7ecf\u8fc7$17$\u4e4b\u524d\u5c31\u88ab\u904d\u5386\u8fc7\u4e86\uff0c$17$\u662f\u6ca1\u6709\u6bd4\u5b83\u5927\u7684\u5144\u5f1f\u7684\uff0c\u6240\u4ee5\u4e5f\u6309\u7167\u6ca1\u6709\u5144\u5f1f\u5904\u7406\u3002\n\n#### \u8fd9\u6837\uff0c\u6bcf\u5f53\u6211\u4eec\u4ece\u4e00\u4e2a\u73af\u70b9x\u8981\u5230\u4e0b\u4e00\u4e2a\u73af\u70b9$p$\u53bb\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad$p$\u548c$another[p]$\u7684\u5927\u5c0f\u5173\u7cfb\uff1a\u5982\u679c$p$\u6bd4$another[p]$\u8981\u5c0f\uff0c\u90a3\u4e48\u7ee7\u7eed\u6cbf\u7740$p$\u8d70\uff0c\u5426\u5219\u5c31\u8df3\u8fc7$p$\uff0c\u76f8\u5f53\u4e8e\u5220\u9664$x$\u548c$p$\u4e4b\u95f4\u7684\u8fb9\uff0c\u6389\u5934\u56de\u53bb\u3002$another$\u6570\u7ec4\u5c31\u662f\u6211\u4eec\u5224\u65ad\u62c6\u73af\u4f4d\u7f6e\u7684\u5173\u952e\u3002\n\n\u6709\u4e86$another$\u6570\u7ec4\u4e4b\u540e\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u8fdb\u5165\u73af\u7684\u65f6\u5019\uff0c\u5c31\u8981\u5bf9\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\u8bb0\u5f55$another$\uff0c\u4e00\u65e6\u53d1\u73b0\u4e0b\u4e00\u4e2a\u73af\u70b9\u6bd4$another$\u5927\u5c31\u53ca\u65f6\u62c6\u6389\u8fd9\u6761\u8fb9\u7136\u540e\u56de\u5934\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u8d34\u5728\u4e0b\u9762\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define N 500001\nusing namespace std;\nint n,m,fir[N],tot;\nbool v[N],u[N];\nstruct edge{int nxt,pnt;}e[N*2];\nvoid ins(int a,int b)\n{tot++;e[tot].nxt=fir[a];e[tot].pnt=b;fir[a]=tot;}\nvoid dfs_tree(int x)        //\u5982\u679c\u662f\u6811\u5c31\u76f4\u63a5dfs\u561b\uff0c60\u5206\u5148\u62ff\u5230\u624b\n{\n\tprintf(\"%d \",x);v[x]=1;\n\tpriority_queue<int,vector<int>,greater<int> > q;        //\u5c0f\u6839\u5806\u5b58\u8981\u8dd1\u7684\u70b9\n\tfor(int i=fir[x];i;i=e[i].nxt)\n\t{\n\t\tint p=e[i].pnt;\n\t\tif(v[p]) continue;\n\t\tq.push(p);\n\t}\n\twhile(!q.empty())       //\u4ece\u5c0f\u5230\u5927\u62ff\u51fa\u6765\n\t{\n\t\tdfs_tree(q.top());\n\t\tq.pop();\n\t}\n\treturn;\n}\nint st;\nbool flag,tag;      //flag\u8868\u793a\u662f\u5426\u5df2\u7ecf\u627e\u5230\u4e86\u73af\uff0ctag\u8868\u793a\u5f53\u524d\u7684\u70b9\u662f\u5426\u4e3a\u73af\u70b9\nvoid search_circle(int x,int pre)       //\u627e\u73af\n{\n\tv[x]=1;\n\tfor(int i=fir[x];i;i=e[i].nxt)\n\t{\n\t\tint p=e[i].pnt;\n\t\tif(p==pre) continue;\n\t\tif(!v[p]) {\n\t\t\tsearch_circle(p,x);\n\t\t\tif(flag) {\n\t\t\t\tu[x]=tag;\n\t\t\t\tif(x==st) tag=0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse {u[x]=1;flag=tag=1;st=p;return;}\n\t}\n\treturn;\n}\nint another[N];     //\u7384\u5b66\u6389\u5934another\u6570\u7ec4\nvoid dfs_circle_tree(int x)     //\u5728\u57fa\u73af\u6811\u4e0a\u5947\u6280\u6deb\u5de7dfs\n{\n\tprintf(\"%d \",x);v[x]=1;\n\tpriority_queue<int,vector<int>,greater<int> > q;\n\tfor(int i=fir[x];i;i=e[i].nxt)\n\t{\n\t\tint p=e[i].pnt;\n\t\tif(v[p]) continue;\n\t\tq.push(p);\n\t}\n\tif(!u[x]||(x!=st&&u[x]&&flag==0))       //\u5982\u679c\u662f\u975e\u73af\u70b9\u6216\u8005\u662f\u5df2\u7ecf\u62c6\u8fc7\u73af\u4e86\u5e76\u4e14\u8fd8\u4e0d\u80fd\u662fst\n\t{\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tdfs_circle_tree(q.top());\n\t\t\tq.pop();\n\t\t}\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tif(x==st)       //\u7531\u6b64\u8fdb\u5165\u73af\u4e2d\n\t\t{\n\t\t\twhile(!q.empty())\n\t\t\t{\n\t\t\t\tint p=q.top();\n\t\t\t\tq.pop();\n\t\t\t\tif(!u[p]) dfs_circle_tree(p);\n\t\t\t\tif(u[p]&&flag==0)\n\t\t\t\t{\n\t\t\t\t\tanother[p]=q.top();\n\t\t\t\t\tflag=1;\n\t\t\t\t\tdfs_circle_tree(p);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(u[p]&&flag==1)       //\u5982\u679c\u8fdb\u5165\u73af\u4e2d\u540e\u518d\u4e00\u6b21\u56de\u5230st\uff0c\u5e76\u4e14\u5f00\u59cb\u8dd1\u53e6\u4e00\u4e2a\u73af\u70b9\u7684\u65f6\u5019\uff0c\u8bf4\u660e\u4e4b\u524d\u5df2\u7ecf\u6389\u8fc7\u5934\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u53d6\u6d88\u6807\u8bb0\u7136\u540e\u5f53\u6210\u6811\u6765\u5bf9\u5f85\u3002\n\t\t\t\t{flag=0;if(!v[p]) dfs_circle_tree(p);}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(flag==1)         //\u5982\u679c\u662f\u7b2c1\u904d\u8dd1\u73af\uff0c\u8fd9\u4e2a\u65f6\u5019\u662f\u53ef\u4ee5\u56de\u5934\u7684\n\t\t{\n\t\t\twhile(!q.empty())\n\t\t\t{\n\t\t\t\tint p=q.top();\n\t\t\t\tq.pop();\n\t\t\t\tif(!u[p]) dfs_circle_tree(p);\n\t\t\t\telse {\n\t\t\t\t\tif(!q.empty()) another[p]=q.top();\n\t\t\t\t\telse another[p]=another[x];\n\t\t\t\t\tif(p<another[p]) dfs_circle_tree(p);\n\t\t\t\t\telse continue;      //\u8df3\u8fc7\u73af\u70b9\uff0c\u7384\u5b66\u6389\u5934\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}\nint main()\n{\n\tint a,b;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tins(a,b);ins(b,a);\n\t}\n\tif(m==n-1) {dfs_tree(1);return 0;}\n\tif(m==n)\n\t{\n\t\tsearch_circle(1,0);\n\t\tmemset(v,0,sizeof(v));\n\t\tflag=0;\n\t\tdfs_circle_tree(1);\n\t}\n\treturn 0;\n}\n/*    \u60f3\u53d8\u5f3a\uff0c\u5148\u538b\u884c\uff01    \u2014\u2014\u5236\u6756\t  */\n```\n",
        "postTime": 1573561255,
        "uid": 88329,
        "name": "Orzalpha",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u8001\u5e74\u7b97\u6cd5\u4e0e\u9ad8\u6548\u526a\u679d\u7ed3\u5408\u540e\u51fa\u73b0\u7684\u60ca\u559c\uff01\n\n\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u7528vector\u5b58\u56fe\u5e76sort\u7684\u9884\u5904\u7406\uff0c~~\u6211\u4e5f\u61d2\u5f97\u53bb\u5361\u5e38\u6570~~\n\n\u8fd9\u9053\u9898\u6211\u7684\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u975e\u5e38\u7384\u5b66\uff08\u5b9e\u9645\u4e0a\u662f\u6211\u592a\u5f31\u4e86\u4e0d\u4f1a\u7b97\u8fd9\u4e2a\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09\uff0c\u4f46\u6211\u7684\u4ee3\u7801\u5728\u4e0d\u4f18\u5316\u5e38\u6570\u751a\u81f3\u6269\u5927\u5e38\u6570\u7684\u60c5\u51b5\u4e0b\u8dd1\u7684\u901f\u5ea6\u8fd8\u662f\u4f18\u4e8e\u4e0d\u5c11O\uff08n\u00b2\uff09\u7684\u505a\u6cd5\u7684\uff1a\n\n\u7b97\u6cd5\u603b\u7ed3\uff1a\u7eaf\u66b4\u529b \uff0b \u526a\u679d\u3002\n\n\u505a\u6cd5\u7ec6\u8ff0\uff08\u4e3a\u7b97\u6cd5\u6d41\u7a0b\u7684\u8be6\u7ec6\u89e3\u91ca\uff0c\u4e0d\u5305\u62ec\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u770b\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u7684\u8bdd\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\uff09\uff1a\n\n1.\u6b63\u5e38\u7684\u8bfb\u5165\u6570\u636e\n\n2.\u5206\u7c7b\u5904\u7406\u6240\u7ed9\u7684\u56fe\u4e2d\u65e0\u73af\u548c\u6709\u73af\u7684\u60c5\u51b5\uff1a\n\n\uff081\uff09\uff1a\u5982\u679cm == n - 1\uff0c\u5373\u56fe\u4e2d\u65e0\u73af\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece1\u53f7\u70b9\u5f00\u59cb\u641c\u7d22\uff08\u7a0d\u5fae\u89e3\u91ca\u4e0b\u539f\u56e0\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7b2c\u4e00\u4e2a\u70b9\u4e0d\u7b49\u4e8e1\u7684\u65b9\u6848\uff0c\u5b57\u5178\u5e8f\u90fd\u5927\u4e8e\u7b2c\u4e00\u4e2a\u70b9\u4e3a1\u7684\u65b9\u6848\uff09\uff0c\u6bcf\u5f53\u6211\u4eec\u641c\u5230\u4e00\u4e2a\u70b9\uff0c\u90fd\u53ef\u4ee5\u628a\u4ed6\u6240\u6709\u80fd\u5230\u7684\u70b9\u653e\u5230\u4e00\u4e2a\u5c0f\u6839\u5806\u91cc\uff0c\u7136\u540e\u4ece\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u70b9\u5f00\u59cb\u679a\u4e3e\uff08\u4e3a\u4e86\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\uff09\u3002\u5f53\u6211\u4eec\u628a\u6574\u68f5\u6811\u904d\u5386\u5b8c\u7684\u65f6\u5019\uff0c\u5373\u53ef\u5f97\u5230\u6240\u8981\u6c42\u7684\u89e3\u3002\n\n\uff082\uff09\uff1a\u5982\u679cm == n\u3002\u5373\u56fe\u4e2d\u6709\u73af\uff0c\u6211\u4eec\u8003\u8651\u628a\u8fd9\u79cd\u60c5\u51b5\u8f6c\u6362\u4e3am == n - 1\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u5220\u6389\u4e00\u6761\u8fb9\uff08\u5e76\u4e0d\u662f\u771f\u7684\u5220\u6389\uff0c\u800c\u662f\u6682\u65f6\u4e0d\u4f7f\u7528\uff09\u4fbf\u6210\u4e3a\u4e86\u4e0d\u9519\u7684\u9009\u62e9\u3002\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u6240\u5220\u7684\u90a3\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u6309\u7167\u7b2c\u4e00\u79cd\u60c5\u51b5\u5904\u7406\u5373\u53ef\u3002\n\n3.\u6b63\u5e38\u7684\u8f93\u51fa\n\n\u4f46\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u663e\u7136\u6211\u4eec\u7684\u7b97\u6cd5\u662f\u975e\u5e38\u4f4e\u6548\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5c06\u5176\u4f18\u5316\uff0c\u4e0b\u9762\n\n\u91cd\u70b9\u6765\u4e86\uff01\uff01\uff01\uff01\u8ba9\u8fd9\u4e2a\u8d3c\u6162\u7684\u7b97\u6cd5\u5feb\u8d77\u6765\u7684\u6700\u4f18\u6027\u526a\u679d\u526a\u679d\uff01\uff01\uff01\n\n\u6211\u4eec\u7528ans\u6570\u7ec4\u4fdd\u5b58\u4e0b\u6765\u6211\u4eec\u7684\u6700\u4f18\u89e3\uff0c\u5728\u6bcf\u4e00\u6b21\u5220\u8fb9\u540e\u641c\u7d22\u4e2d\uff0c\u5f53\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u4f18\u89e3\u786e\u5b9a\u540e\uff0c\u5982\u679c\u6ca1\u6709\u6211\u4eec\u5df2\u7ecf\u4fdd\u5b58\u7684\u6700\u4f18\u89e3\u4f18\uff0c\u90a3\u4e48\u76f4\u63a5\u7ed3\u675f\u5f53\u524d\u641c\u7d22\u5373\u53ef\u3002\n\n\u5982\u679c\u6709\u4ec0\u4e48\u7591\u95ee\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u518d\u6b21\u5c1d\u8bd5\u7406\u89e3\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n\nusing namespace std;\n\nconst int maxn = 5005;\nconst int INF = 0x7fffffff;\n\nstruct Edge{\n\tint x, y, nxt;\n}e[maxn << 1];\n\nint n, m, cnt;  \nint fr, to;\nint head[maxn];\n\nint Times;\nint a[maxn];\n\nbool vis[maxn];\n\nint hh, gg;\nint ans[maxn];\n\nbool okay = true, pre_good = false;\n\ninline int read(void)\n{\n\tint s = 0, w = 1;\n\tchar ch = getchar();\n\tfor(; ch < '0' || ch > '9'; ch = getchar()) if(ch == '-') w = -1;\n\tfor(; ch <= '9' && ch >= '0'; ch = getchar()) s = s * 10 + ch - '0';\n\treturn s * w;\n}\n\ninline void add(int x, int y)\n{\n\te[++cnt].x = x;\n\te[cnt].y = y;\n\te[cnt].nxt = head[x];\n\thead[x] = cnt;\n}\n\nvoid dfs(int x)\n{\n\tvis[x] = true; // \u6253\u4e0a\u6807\u8bb0\uff0c \u9632\u6b62\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u591a\u6b21\u641c\u7d22\u9020\u6210\u6b7b\u5faa\u73af \n\ta[++Times] = x; // \u4fdd\u5b58\u6b64\u65f6\u6700\u4f18\u89e3 \n\tif(a[Times] < ans[Times]) pre_good = true; // \u5982\u679c\u6b64\u65f6\u5df2\u7ecf\u6bd4\u6211\u4eec\u4fdd\u5b58\u7684\u6700\u4f18\u89e3\u8fd8\u8981\u4f18\u7684\u8bdd\uff0c \u6253\u4e0a\u5df2\u7ecf\u7b26\u5408\u8981\u6c42\u7684\u6807\u8bb0 \n\tif(a[Times] > ans[Times]) // \u5982\u679c\u5df2\u7ecf\u4e0d\u5982\u6700\u4f18\u89e3\u4f18\u7684\u8bdd\uff0c \u5224\u65ad\u4e00\u4e0b \n\t{\n\t\tif(!pre_good) // \u5982\u679c\u4e4b\u524d\u7684\u7b54\u6848\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u6700\u4f18\u7684\u8bdd \n\t\t{\n\t\t\tokay = false; // \u6253\u4e0a\u76f4\u63a5\u7ed3\u675f\u641c\u7d22\u7684\u6807\u8bb0 \n\t\t\treturn ;\n\t\t}\n\t}\n\tpriority_queue<int>q;\n\tfor(register int i = head[x]; i != -1; i = e[i].nxt)\n\t{\n\t\tif(gg == i || hh == i) continue; // \u5982\u679c\u8fd9\u6761\u8fb9\u88ab\u201c\u5220\u201d\u4e86\uff0c \u5c31\u4e0d\u80fd\u4f7f\u7528 \n\t\tint y = e[i].y;\n\t\tif(vis[y]) continue; //  \u7279\u5224\u5df2\u7ecf\u904d\u5386\u7684\u70b9 \n\t\tq.push(-y); // \u52a0\u4e0a\u8d1f\u53f7\u653e\u8fdb\u53bb\uff0c \u628a\u5927\u6839\u5806\u5f53\u6210\u5c0f\u6839\u5806\u7528 \n\t}\n\twhile(!q.empty())\n\t{\n\t\tint y = -q.top(); // \u6211\u4eec\u662f\u628a\u70b9\u7684\u76f8\u53cd\u6570\u653e\u4e86\u8fdb\u53bb\uff0c \u6240\u4ee5\u62ff\u51fa\u6765\u7684\u65f6\u5019\u4e5f\u8981\u53d6\u4e2a\u76f8\u53cd\u6570 \n\t\tq.pop();\n\t\tdfs(y);\n\t\t/* \u53ef\u80fd\u4f1a\u6709\u4eba\u95ee\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5224\u65ad y \u8fd9\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c \u6211\u5728\u8fd9\u91cc\u89e3\u91ca\u4e0b\uff0c\n\t\t \u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u88ab\u5176\u4ed6\u70b9\u5230\u8fbe\uff0c\u90a3\u4e48\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u8981\u4e0d\u56fe\u4e2d\u6709\u73af\uff0c \u8981\u4e0d\u5f62\u6210\u201cV \u201d\u7684\u56fe\uff0c \u663e\u7136\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u4e0d\u5b58\u5728\u7684\uff0c\n\t\t \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c \u53f3\u4e0a\u7684\u90a3\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u5f53\u524d\u7684 y \u70b9\u63d0\u524d\u904d\u5386\u5230\uff0c \u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u7279\u5224*/ \n\t\tif(okay == false) return ; // \u4e0b\u4e00\u4e2a\u65b9\u6848\u4e00\u5b9a\u4e0d\u5982\u5f53\u524d\u7684\u8fd9\u4e2a\u65b9\u6848\u4f18\uff0c \u5982\u679c\u5f53\u524d\u90fd\u4e0d\u884c\u7684\u8bdd\uff0c \u90a3\u4e48\u4e0b\u4e00\u4e2a\u65b9\u6848\u4e00\u5b9a\u4e5f\u4e0d\u884c\uff0c \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5f80\u540e\u7684\u90fd\u4e0d\u884c \n\t}\n}\n\nvoid xiaogao(void) // \u4fdd\u5b58\u7b54\u6848\u7684\u51fd\u6570\uff0c \u6211\u5199\u7684\u975e\u5e38\u83dc\uff0c \u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5199\u4e2a\u5e38\u6570\u66f4\u5c0f\u7684 \n{\n\tint haj = -1;\n\tfor(register int i = 1; i <= n; i++)\n\t{\n\t\tif(a[i] == ans[i]) continue; // \u5982\u679c\u5f53\u524d\u770b\u4e0d\u51fa\u6765\u662f\u5426\u66f4\u4f18\uff0c\u63a5\u7740\u5f80\u540e\u6bd4\u8f83 \n\t\telse if(a[i] > ans[i]) // \u5982\u679c\u5f53\u524d\u89e3\u5df2\u7ecf\u6ca1\u6709\u4fdd\u5b58\u7684\u6700\u4f18\u89e3\u4f18\uff0c \u76f4\u63a5\u5426\u6389 \n\t\t{\n\t\t\thaj = 0; \n\t\t\tbreak;\n\t\t}\n\t\telse { // \u5982\u679c\u5df2\u7ecf\u6bd4\u6700\u4f18\u89e3\u4f18\uff0c \u76f4\u63a5\u4fdd\u5b58 \n\t\t\thaj = 1;\n\t\t\tbreak;\n\t\t}\n\t}\t\n\tif(haj == -1 || haj == 0) return ; // \u4e0d\u5982\u6700\u4f18\u89e3\u4f18\u6216\u8005\u548c\u6700\u4f18\u89e3\u4e00\u6837\u4f18\uff0c \u5c31\u4e0d\u7528\u66f4\u65b0 \n\tfor(register int i = 1; i <= n; i++) ans[i] = a[i]; // \u66f4\u65b0\u6700\u4f18\u89e3 \n} \n\nint main()\n{\n\tmemset(head, -1, sizeof(head));\n\tmemset(ans, 0x3f, sizeof(ans)); // \u9884\u5904\u7406\u6700\u4f18\u89e3\u7684\u6570\u7ec4 \n\tn = read(); m = read();\n\tfor(register int i = 1; i <= m; i++) \n\t{\n\t\tfr = read(); to = read();\n\t\tadd(fr, to);\n\t\tadd(to, fr);\n\t}\n\tif(m == n - 1) // \u7b2c\u4e00\u79cd\u60c5\u51b5 \n\t{\n\t\tdfs(1);\n\t\tfor(register int i = 1; i < n; i++) cout << a[i] << ' ';\n\t\tcout << a[n] << '\\n';\n\t}\n\telse { // \u7b2c\u4e8c\u79cd\u60c5\u51b5 \n\t\tfor(register int i = 1; i <= m; i++) \n\t\t{\n\t\t\tmemset(vis, false, sizeof(vis));\n\t\t\tTimes = 0;\n\t\t\thh = (i << 1); // \u627e\u5230\u6240\u201c\u5220 \u201d\u7684\u8fb9\u7684\u7f16\u53f7 \n\t\t\tgg = hh - 1; //\t\u56e0\u4e3a\u52a0\u7684\u53cc\u5411\u8fb9\uff0c \u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u5b58\u4e86\u4e24\u6761 \n\t\t\tokay = true; // \u91cd\u7f6e\u6807\u8bb0 \n\t\t\tpre_good = false; // \u91cd\u7f6e\u6807\u8bb0 \n\t\t\tdfs(1);\n\t\t\tif(Times < n) continue; // \u7279\u5224\u6211\u4eec\u201c\u5220 \u201d\u7684\u8fb9\u4f7f\u5f97\u56fe\u53d8\u5f97\u4e0d\u8fde\u901a\u7684\u60c5\u51b5 \n\t\t\txiaogao(); // \u770b\u6b64\u65f6\u662f\u5426\u53ef\u4ee5\u66f4\u65b0\u7b54\u6848 \n\t\t}\n\t\tfor(register int i = 1; i < n; i++) cout << ans[i] << ' ';\n\t\tcout << ans[n] << '\\n';\n\t}\n\treturn 0;\n}\n```\n\n\u6709\u4efb\u4f55\u4e0d\u660e\u767d\u7684\u53ef\u4ee5\u76f4\u63a5\u79c1\u4fe1\u6211\u6216\u8005\u76f4\u63a5\u5728\u8bc4\u8bba\u533a\u95ee\u3002\n\u6d1b\u8c37\u76f4\u63a5\u79c1\u4fe1\u5373\u53ef\u3002\n\u6211\u7684QQ\uff1a1339438524",
        "postTime": 1566823531,
        "uid": 162864,
        "name": "\u5c0f\u5fc3\u6f02\u4eae\u5973\u4eba",
        "ccfLevel": 6,
        "title": "\u9898\u89e3\uff1aP5022 [NOIP2018 Day2 T1] \u65c5\u884c"
    },
    {
        "content": "\u67d0\u5f31\u7701\u7701\u4e8c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\n\n\u8d2a\u5fc3\u601d\u60f3\uff1b\u7b97\u6cd5\u590d\u6742\u5ea6\u6700\u574f/\u5e73\u5747\u60c5\u51b5O(_nlogn_)\uff0c\u6700\u4f18\u60c5\u51b5O(_n_)//\u94fe\n\nhuan[i]\u8bb0\u5f55i\u662f\u5426\u5728\u73af\u4e0a\uff0clatest\u8bb0\u5f55\u6700\u8fd1\u672a\u8bbf\u95ee\u8fc7\u7684\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\uff1b\u5982\u679c\u5f53\u524d\u70b9\u5728\u73af\u4e0a\u4e14\u5f53\u524d\u70b9\u80fd\u76f4\u63a5\u8bbf\u95ee\u7684\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u90fd\u5df2\u8bbf\u95ee\u4e14\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u7684\u70b9\u5728\u73af\u4e0a\u5e76\u672a\u8bbf\u95ee\u4e14latest\u5c0f\u4e8e\u4e0b\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5c31\u5f80\u56de\u8d70\uff0c\u76f8\u5f53\u4e8e\u5220\u53bb\u8fde\u63a5\u8fd9\u4e2a\u70b9\u548c\u4e0b\u4e00\u4e2a\u70b9\u7684\u8fb9\n\n\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,i,j,q[5200],r,num;\nint u[10100],v[10100],first[10100],next[10100],latest=-1;\nbool vis[5100],huan[5100],t;\nbool dfs(int y,int f)//\u6c42\u73af\n{\n\tvis[y]=1;\n\tfor (int k=first[y];k!=-1;k=next[k])\n\t\tif (vis[v[k]]&&v[k]!=f)\n\t\t{\n\t\t\thuan[y]=1;j=v[k];\n\t\t\treturn 1;\n\t\t}\n\t\telse if (v[k]!=f&&dfs(v[k],y))\n\t\t{\n\t\t\thuan[y]=1;\n\t\t\tif (j==y) return 0;\n\t\t\telse return 1;\n\t\t}\n\treturn 0;\n}\nvoid dfs2(int y)//\u8bbf\u95ee\u70b9y\n{\n\tprintf(\"%d \",y);\n\tvis[y]=1;\n\tint a[5100],b=0,k;\n\tfor (int k=first[y];k!=-1;k=next[k])\n\t\tif (!vis[v[k]])\n\t\t{\n\t\t\tb++;a[b]=v[k];\n\t\t}\n\tsort(a+1,a+b+1);\n\tfor (k=1;k<=b;k++)\n\tif (huan[a[k]]==0||huan[y]==0) dfs2(a[k]);\n\telse\n\t\tif (k!=b)\n\t\t{\n\t\t\tlatest=a[k+1];\n\t\t\tdfs2(a[k]);\n\t\t}\n\t\telse\n\t\t\tif (a[k]>latest&&t)\n\t\t\t{\n\t\t\t\tt=0;return;\n\t\t\t}\n\t\t\telse\n\t\t\t\tdfs2(a[k]);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (i=1;i<=n*2;i++) first[i]=next[i]=-1;\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u[i],&v[i]);\n\t\tnext[i]=first[u[i]];\n\t\tfirst[u[i]]=i;\n\t\tu[m+i]=v[i];\n\t\tv[m+i]=u[i];\n\t\tnext[m+i]=first[u[m+i]];\n\t\tfirst[u[m+i]]=m+i;\n\t}\n\tmemset(huan,0,sizeof(huan));\n\tmemset(vis,0,sizeof(vis));\n\tj=0;\n\tj=dfs(1,0);\n\tmemset(vis,0,sizeof(vis));\n\tvis[1]=t=1;\n\tdfs2(1);\n\treturn 0;\n}\n```\n\n\u6ce8\u610f\uff1a\n\n\u5220\u8fb9\u65f6latest\u5fc5\u5927\u4e8e0\uff1a\u5f53\u8bbf\u95ee\u7b2c\u4e8c\u4e2a\u5728\u73af\u4e0a\u7684\u70b9\u65f6\u4f1a\u5c06\u7b2c\u4e00\u4e2a\u5728\u73af\u4e0a\u7684\u70b9\u8fde\u63a5\u7684\u53e6\u4e00\u4e2a\u5728\u73af\u4e0a\u7684\u70b9\u6216\u4e0e\u4e4b\u8fde\u63a5\u7684\u4e00\u4e2a\u672a\u8bbf\u95ee\u8fc7\u7684\u66f4\u5c0f\u7684\u70b9\u8ba1\u5165latest\n\n\u5220\u8fb9\u540e\u7b2c\u4e00\u4e2a\u8bbf\u95ee\u7684\u65b0\u70b9\u662flatest\uff1a\u4e00\u4e2a\u70b9\u53ea\u6709\u8bbf\u95ee\u8fc7\u6240\u6709\u5b50\u70b9\u540e\u624d\u80fd\u56de\u6eaf",
        "postTime": 1542289051,
        "uid": 37696,
        "name": "TetraChloridoCuprate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u3000\u3000\u53d1\u73b0\u5927\u90e8\u5206\u9898\u89e3\u90fd\u662fO(n^2)\u7684\u590d\u6742\u5ea6\uff0c\u8fd9\u91cc\u5206\u4eab\u4e00\u4e2aO(n)\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\u3002\n  \n  \uff08\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u8bf7\u524d\u5f80\u6d1b\u8c37\u535a\u5ba2\u6216[\u6211\u7684\u53e6\u4e00\u4e2a\u535a\u5ba2](https://www.cnblogs.com/InductiveSorting-QYF/p/11740479.html)\uff09\n\u3000\u3000\n \n \u9996\u5148\u524d60%\u7684\u60c5\u51b5\uff0c\u56fe\u662f\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u53ea\u8981\u4ece1\u5f00\u59cbDFS\uff0c\u6bcf\u6b21\u8d2a\u5fc3\u8d70\u70b9\u7684\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u5c31\u884c\u4e86\u3002\uff08\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5f53\u8d70\u5230\u4e00\u4e2a\u70b9u\u65f6\uff0c\u82e5\u4e0d\u628a\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u70b9\u90fd\u904d\u5386\u4e00\u904d\u7684\u8bdd\uff0c\u56de\u6eaf\u5230u\u7684\u7236\u4eb2\u540e\uff0c\u5c31\u518d\u4e5f\u6ca1\u53ef\u80fd\u904d\u5386u\u7684\u6ca1\u6709\u904d\u5386\u8fc7\u7684\u513f\u5b50\u4e86\u3002\uff09\n\n\u518d\u770b\u5269\u4e0b40%\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u56fe\u662f\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u5f53 \u8fb9\u6570 \u7b49\u4e8e \u70b9\u6570\u51cf\u4e00 \u65f6\u56fe\u5fc5\u4e3a\u6811\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u518d\u591a\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u5728\u4e00\u68f5\u6811\u7684\u57fa\u7840\u4e0a\u5f62\u6210\u4e00\u4e2a\u73af\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u540e\u6587\u4ecd\u4f1a\u63d0\u5230\u6811\uff0c\u800c\u540e\u6587\u7684\u6811\u6307\u7684\u662f\u56fe\u6ca1\u6709\u7b2cn\u6761\u8fb9\u65f6\u5f62\u6210\u7684\u6811\uff09\u3002\u6709\u4e86\u73af\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u53d1\u73b0\u6709\u4e86\u73af\u540e\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u8d2a\u5fc3+DFS\u89e3\u6cd5\u7684\u4f9d\u636e\u5c31\u4e0d\u6210\u7acb\u4e86\uff0c\u5373\u8d70\u5230\u4e00\u4e2a\u70b9u\u65f6\uff0c\u5373\u4f7f\u4e0d\u628a\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u70b9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u5f53\u56de\u6eaf\u5230u\u7684\u7236\u4eb2\u540e\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u901a\u8fc7\u73af\u7684\u4e00\u90e8\u5206\u5230\u8fbeu\u8282\u70b9\u5269\u4e0b\u7684\u6ca1\u6709\u904d\u5386\u8fc7\u7684\u513f\u5b50\u3002\u663e\u7136\u4e0d\u80fd\u518d\u65e0\u8111\u8d2a\u5fc3\u4e86\u3002\u3000\u3000\n\n\u3000\u3000\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u4e24\u79cd\u60c5\u51b5\u7684\u4e0d\u540c\uff0c\u53d1\u73b0\u82e5\u4e00\u68f5\u5b50\u6811\u4e2d\u6ca1\u6709\u73af\uff0c\u4e5f\u6ca1\u6709\u70b9\u80fd\u76f4\u63a5\u8fde\u5411\u73af\uff0c\u90a3\u8fd9\u68f5\u5b50\u6811\u5c31\u53ef\u4ee5\u7528\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u8d2a\u5fc3+DFS\u7684\u65b9\u6cd5\u5904\u7406\u3002\u82e5\u4e00\u4e2a\u70b9u\u53ca\u5b83\u7684\u513f\u5b50v\u90fd\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u82e5\u8981u\u8d70\u5230v\uff0c\u65e2\u53ef\u4ee5\u76f4\u63a5\u8d70u\u5230v\u7684\u8fde\u8fb9(u,v)\uff0c\u4e5f\u53ef\u4ee5\u4eceu\u5f00\u59cb\u53cd\u65b9\u5411\u7ed5\u73af\u4e00\u5708\u8d70\u5230v\uff1b\u82e5u\u548cv\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u4e0d\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u4eceu\u5230v\u53ea\u80fd\u901a\u8fc7\u8fb9(u,v)\uff0c\u5373\u53ea\u6709\u4e00\u4e2a\u5230\u8fbe\u65b9\u6cd5\u3002\u8fd9\u5c31\u8bf4\u660e\uff0c\u82e5\u4e00\u5bf9\u7236\u5b50\u90fd\u5728\u73af\u4e0a\uff0c\u90a3\u4ed6\u4eec\u4e4b\u95f4\u6709\u4e24\u79cd\u5230\u8fbe\u65b9\u6cd5\uff1b\u5426\u5219\u5c31\u53ea\u6709\u4e00\u79cd\u5230\u8fbe\u65b9\u6cd5\u3002\n\n\u3000\u3000\u8fd9\u65f6\u4e24\u79cd\u60c5\u51b5\u7684\u4e0d\u540c\u5c31\u660e\u786e\u4e86\uff1a\u540c\u6837\u7684\u662f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e0e\u73af\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u7684\u5b50\u6811\uff08\u6ca1\u6709\u5173\u7cfb\u6307\u4e0d\u4e0e\u73af\u7684\u4efb\u4f55\u4e00\u4e2a\u8fb9\u76f8\u4ea4\u3002\u82e5\u4e0e\u73af\u5171\u7528\u6700\u591a\u4e00\u4e2a\u70b9\uff0c\u4e5f\u6ca1\u4e8b\u3002\uff09\uff0c\u7528\u8d2a\u5fc3+DFS\u505a\u5c31\u597d\uff0c\u56e0\u4e3a\u5f53\u7236\u4eb2\u56de\u6eaf\u540e\u672a\u88ab\u904d\u5386\u7684\u513f\u5b50\u5c31\u4e0d\u80fd\u518d\u88ab\u904d\u5386\u5230\u4e86\uff1b\u4e0d\u540c\u7684\u662f\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u591a\u4e86\u7236\u5b50\u90fd\u5728\u73af\u4e0a\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u7236\u4eb2\u56de\u6eaf\u4e00\u6b21\u540e\uff0c\u513f\u5b50\u4ecd\u80fd\u88ab\u904d\u5386\u3002\u4f46\u56e0\u4e3a\u201c\u5c0f Y \u7684\u65c5\u884c\u65b9\u6848\u662f\u8fd9\u6837\u7684\uff1a\u4efb\u610f\u9009\u5b9a\u4e00\u4e2a\u57ce\u5e02\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7136\u540e\u4ece\u8d77\u70b9\u5f00\u59cb\uff0c\u6bcf\u6b21\u53ef \u4ee5\u9009\u62e9\u4e00\u6761\u4e0e\u5f53\u524d\u57ce\u5e02\u76f8\u8fde\u7684\u9053\u8def\uff0c\u8d70\u5411\u4e00\u4e2a\u6ca1\u6709\u53bb\u8fc7\u7684\u57ce\u5e02\uff0c\u6216\u8005\u6cbf\u7740\u7b2c\u4e00\u6b21\u8bbf\u95ee\u8be5 \u57ce\u5e02\u65f6\u7ecf\u8fc7\u7684\u9053\u8def\u540e\u9000\u5230\u4e0a\u4e00\u4e2a\u57ce\u5e02\u3002\u201d\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7236\u4eb2\u6700\u591a\u4e5f\u53ea\u80fd\u56de\u6eaf\u4e00\u6b21\u3002\n\n\u3000\u3000\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u641e\u6e05\u695a\u7b2c\u4e00\u6b21\u73af\u4e0a\u7684\u56de\u6eaf\u4f55\u65f6\u53d1\u751f\u5c31\u884c\u4e86\uff0c\u53ea\u8981\u53d1\u751f\u4e86\u4e00\u6b21\u73af\u4e0a\u7684\u56de\u6eaf\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u5f53\u7b2c\u4e00\u79cd\u60c5\u51b5\u505a\u4e86\uff08\u4e00\u65e6\u73af\u4e0a\u7684\u67d0\u4e2a\u70b9u\u56de\u6eaf\u4e86\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4e0e\u5b83\u7684\u8fde\u8fb9\u5c31\u4e0d\u4f1a\u518d\u7528\u4e86\uff0c\u4e5f\u76f8\u5f53\u4e8e\u6ca1\u6709\u8fd9\u6761\u8fb9\uff0c\u6b64\u65f6\u56fe\u53ea\u6709n-1\u6761\u8fb9\uff0c\u5c31\u662f\u68f5\u6811\uff09\u3002\u201c\u73af\u4e0a\u7684\u56de\u6eaf\u201d\u663e\u7136\u53ea\u4f1a\u53d1\u751f\u5728\u73af\u4e0a\uff08\u6bd5\u7adf\u540d\u5b57\u90fd\u8bf4\u662f\u201c\u73af\u4e0a\u7684\u201d\u4e86\uff09,\u8fd9\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5728\u7b2c\u4e00\u6b21\u73af\u4e0a\u7684\u56de\u6eaf\u53d1\u751f\u524d\uff0c\u73af\u4e0a\u7684\u70b9\u53ef\u4ee5\u201c\u4e3b\u52a8\u201d\u53d1\u8d77\u56de\u6eaf\uff0c\u5373\u5c31\u7b97\u5b83\u7684\u513f\u5b50\u8fd8\u6ca1\u6709\u90fd\u88ab\u904d\u5386\u5b8c\uff0c\u5b83\u4e5f\u53ef\u4ee5\u56de\u6eaf\uff0c\u4e0d\u8fc7\u90a3\u4e2a\u6ca1\u6709\u88ab\u904d\u5386\u7684\u513f\u5b50\u53ea\u80fd\u662f\u73af\u4e0a\u7684\u70b9\u3002\n\n\u3000\u3000\u601d\u8003\u4e3a\u4ec0\u4e48\u8981\u4e3b\u52a8\u56de\u6eaf\u3002\u6211\u4eec\u5404\u79cd\u4e71\u641e\uff0c\u4e0d\u5c31\u662f\u4e3a\u4e86\u6700\u540e\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u5417\uff1f\u800c\u4e3a\u4e86\u8fbe\u6210\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u80fd\u904d\u5386\u5230\u6240\u6709\u70b9\u7684\u540c\u65f6\uff0c\u65f6\u523b\u6700\u5c0f\u5316\u5f53\u524d\u7684\u5b57\u5178\u5e8f\uff0c\u5373\u6bcf\u6b21\u90fd\u904d\u5386\u53ef\u884c\u7684\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u4e3b\u52a8\u56de\u6eaf\u540e\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u5c31\u884c\u5566\u3002\u5148\u8dd1\u4e00\u8fb9tarjan\u627e\u5230\u73af\u3002\u4ece\u7b2c\u4e00\u6b21\u8fdb\u5165\u73af\u5f00\u59cb\u5c31\u8bb0\u5f55\u4e3b\u52a8\u56de\u6eaf\u540e\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\uff08sec\u53d8\u91cf\uff09\uff0c\u82e5\u5f53\u524d\u70b9u\u5728\u73af\u4e0a\uff0c\u4e14\u53ea\u5269\u4e00\u4e2a\u540c\u5728\u73af\u4e0a\u7684\u513f\u5b50\u4e86\uff0c\u5e76\u4e14\u513f\u5b50\u7684\u7f16\u53f7\u8fd8\u5927\u4e8esec\uff0c\u90a3\u5c31\u4e3b\u52a8\u56de\u6eaf\uff1b\u4e0d\u7136\u5c31\u6b63\u5e38dfs\u5c31\u884c\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u6ce8\u91ca\u8fc7\u7684\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n\n#define min(a,b) ((a)>(b)?(b):(a))\n\nusing namespace std;\n\nconst int N=5005;\n\nint n,m,x,vis[N],lst[N],xu[N],cntxu,nxt[N<<1],to[N<<1],cnt;\nint dfn[N],dfss,low[N],huan[N],sta[N],top;\n\nchar ch;\n\ninline int read()\n{\n\tx=0;\n\tch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\n\nvoid tarjan(int u,int fa)\n{\n\tdfn[u]=low[u]=++dfss;\n\tsta[++top]=u;\n\tint Top=top;\n\tvis[u]=1;\n\tint t;\n\tfor(int e=lst[u];e;e=nxt[e])\n\t{\n\t\tif(!dfn[t=to[e]])\n\t\t{\n\t\t\ttarjan(t,u);\n\t\t\tlow[u]=min(low[t],low[u]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(t!=fa&&vis[t])\n\t\t\t\tlow[u]=min(low[t],low[u]);\n\t\t}\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tif(Top==top)\n\t\t\tvis[sta[top--]]=0;\n\t\tfor(int i=Top;i<=top;++i)\n\t\t{\n\t\t\thuan[sta[i]]=1;//\u662f\u73af \n\t\t\tvis[sta[i]]=0;\n\t\t}\n\t\ttop=Top-1;\n\t}\n}\n\nint fir;//\u6709\u6ca1\u6709\u8fdb\u8fc7\u73af \nint sec=-1;//-1\u6807\u8bb0\u610f\u4e49\u4e3a\u8fd8\u6ca1\u6709\u8fdb\u5165\u8fc7\u73af \n\nvoid dfs(int u)\n{\n\tif(vis[u]) return;\n\tpriority_queue<int,vector<int>,greater<int> >hep;//\u7528\u5806\u7ef4\u62a4\u5f53\u524d\u8981dfs\u7684\u6700\u5c0f\u503c\u3002\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u90fd\u5f88\u5c11\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u7684\u5e38\u6570 \n\txu[++cntxu]=u;//\u8bb0\u5f55\u7b54\u6848\u5e8f\u5217 \n\tvis[u]=1;\n\tfor(int e=lst[u];e;e=nxt[e])\n\t\tif(!vis[to[e]])\n\t\t\thep.push(to[e]);\n\tint head;\n\tif(huan[u]&&!fir)\n\t{\n\t\tfir=1;\n\t\twhile(!hep.empty())\n\t\t{\n\t\t\thead=hep.top();\n\t\t\thep.pop();\n\t\t\tif(!huan[head]) dfs(head);//\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u6b63\u5e38\u8d2a\u5fc3DFS\u3002 \n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!vis[head]&&sec==-1)\n\t\t\t\t{\n\t\t\t\t\tsec=hep.top();\n\t\t\t\t\tdfs(head);\n\t\t\t\t}\n\t\t\t\telse//\u7b2c\u4e00\u6b21\u73af\u4e0a\u56de\u6eaf\u53d1\u751f\u540e\uff0c\u90fd\u6b63\u5e38\u8d2a\u5fc3DFS \n\t\t\t\tdfs(head);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(!huan[u]||(huan[u]&&sec==-2))\n\t\t{\n\t\t\twhile(!hep.empty())\n\t\t\t{\n\t\t\t\tif(!vis[hep.top()])\n\t\t\t\t\tdfs(hep.top());\n\t\t\t\thep.pop();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(!hep.empty())\n\t\t\t{\n\t\t\t\thead=hep.top();\n\t\t\t\thep.pop();\n\t\t\t\tif(!huan[head])\n\t\t\t\t\tdfs(head);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(head<=sec)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!hep.empty())\n\t\t\t\t\t\t\tsec=hep.top();\n\t\t\t\t\t\tdfs(head);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(hep.empty())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsec=-2;//\u4e3b\u52a8\u56de\u6eaf\uff0c\u5e76\u628asec\u8bbe\u6210-2\u6807\u8bb0\u7b2c\u4e00\u6b21\u73af\u4e0a\u7684\u56de\u6eaf\u5df2\u7ecf\u7ed3\u675f\u4e86 \n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse//\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u8981\u6ca1\u6709 \u4e0d\u5728\u73af\u4e0a\u7684\u513f\u5b50 \u65f6\u624d\u80fd\u8003\u8651\u4e3b\u52a8\u56de\u6eaf\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsec=hep.top();\n\t\t\t\t\t\t\tdfs(head);\n\t\t\t\t\t\t\twhile(!hep.empty())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdfs(hep.top());\n\t\t\t\t\t\t\t\thep.pop();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void addedge(int u,int v)\n{\n\tnxt[++cnt]=lst[u];\n\tlst[u]=cnt;\n\tto[cnt]=v;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tint u,v;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tu=read(),v=read();\n\t\taddedge(u,v);\n\t\taddedge(v,u);\n\t}\n\ttarjan(1,0);\n\tdfs(1);\n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%d \",xu[i]);\n\treturn 0;\n}\n```\n\uff08\u8bb2\u4e86\u8fd9\u4e48\u591a\uff0c\u5e94\u8be5\u80fd\u8bb2\u660e\u767d\u4e86\u5427\uff09\n\n\uff08\u5982\u679c\u61c2\u4e86\u7684\u8bdd\uff0c\u5c31\u70b9\u4e2a\u8d5e\uff0c\u8ba9\u66f4\u591a\u4eba\u770b\u5230\u5427\uff01\u5982\u679c\u6ca1\u61c2\u7684\u8bdd\uff0c\u76f4\u63a5\u8bc4\u8bba\u533a\u95ee\u5c31\u597d\u5566\uff09",
        "postTime": 1572004838,
        "uid": 45543,
        "name": "YHASDY",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u54b1\u4e5f\u4e0d\u9020\u4e3a\u5565\u56fe\u6ca1\u4e86,\u8865\u4e2a\u9505\n\n\u770b\u7740\u5f88\u591a\u9898\u89e3\u90fd\u662f\u679a\u4e3e\u5220\u8fb9\uff0c\u90a3\u4e48\u5c31\u8ba9\u672c\u849f\u84bb\u6765\u4e00\u53d1~~\u8111\u6d1e\u6e05\u5947\u7684~~\u8d2a\u5fc3\n## 60pts\n\n\u6211\u4eec\u6ce8\u610f\u5230m=n-1,\u4e5f\u5c31\u662f\u8bf4\u8fd9\u662f\u68f5\u6811\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u90fd\u6311\u9009\u7f16\u53f7\u8f83\u5c0f\u7684\u5b50\u6811\u8fdb\u884c\u904d\u5386\n\n\u5f00vector sort\u5373\u53ef\n```\nvoid dfs1(int now,int fa)\n{\n\tif(vis[now])return ;\n\tans1[++t]=now;\n\tvis[now]=1;\n\tvector<int> qwq;//\u4e3a\u4e86\u4e0d\u4f7f\u5b58\u50a8\u7684\u70b9\u88ab\u540e\u9762\u7684\u5b50\u6811\u8986\u76d6\uff0c\u6240\u4ee5\u7528vector\n\tfor(int e=head[now];e;e=ed[e].nxt)\n\t{\n\t\tint v=ed[e].to;\n\t\tif(v==fa)continue;\n\t\tqwq.push_back(v);\n\t}\n       sort(qwq.begin(),qwq.end());//vector\u7684\u6392\u5e8f\n\tint qaq=qwq.size();\n\tfor(int i=0;i<qaq;i++)\n\t  dfs1(qwq[i],now);\n}\n```\n## 100pts\n\u73b0\u5728m=n,\u4e5f\u5c31\u662f\u8bf4\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u6811\u3002\u4ec0\u4e48\u662f\u57fa\u73af\u6811\u5462\uff1f\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u5c31\u662f\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u73af\u7684\u6811\u3002\n\u5bf9\u4e8e\u57fa\u73af\u6811\uff0c\u51b3\u7b56\u7684\u96be\u70b9\u5728\u4e8e\u73af\u4e0a\u7684\u90e8\u5206\u3002!\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5f00\u59cb\u5206\u6790\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xq5piu9a.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6700\u4f18\u89e3\u5f53\u7136\u662f1 2 3 4 5\u8fa3\u3002\u90a3\u6211\u4eec\u7a76\u7adf\u662f\u600e\u4e48\u627e\u51fa\u8fd9\u4e2a\u987a\u5e8f\u7684\u5462\uff1f\n\u9996\u5148\u6309\u716760pts\u7684\u601d\u8def\uff0c\u8d70\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u3002\u8d70\u52302\u3002\u4e0b\u4e00\u4e2a\u662f5\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6b64\u65f6\u56de\u6eaf\u52303\uff0c\u8d703-->4-->5\u8fd9\u6761\u8def\uff0c\u6240\u5f97\u7684\u5b57\u5178\u5e8f\u4f1a\u66f4\u5c0f\u3002\n\u7531\u6b64\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8d2a\u5fc3\u601d\u8def\uff1a\u5728\u5411\u7f16\u53f7\u5c0f\u7684\u70b9a\u8d70\u7684\u540c\u65f6\uff0c\u8bb0\u5f55\u4e0b\u7f16\u53f7\u8f83\u5927\u7684\u70b9b\u7684\u7f16\u53f7\uff0c\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u3002\u5f53dfs\u5230\u4e00\u4e2a\u6bd4b\u7f16\u53f7\u5927\u4e14\u5728\u73af\u4e0a\u7684\u70b9\u65f6\uff0c\u56de\u6eaf\u5230b,\u7531b\u8d70\u8fc7\u53bb\u3002\n\u6211\u4eec\u5728\u8bb0\u5f55\u53c2\u6570\u7684\u65f6\u5019\uff0c\u662f\u5728\u73af\u7684\u201c\u6839\u201d\u5904\uff08\u4e5f\u5c31\u662f\u6700\u9760\u8fd1\u8282\u70b91\u7684\u73af\u4e0a\u7684\u70b9\uff09\u8bb0\u5f55\u7684\uff0c\u6240\u4ee5\u8981\u5148\u627e\u5230\u8fd9\u4e2a\u73af\u5e76\u4e14\u8bb0\u5f55\u73af\u7684\u201c\u6839\u201d\u3002\n\u627e\u73af\u7528dfs\u5373\u53ef\uff0c\u7b2c\u4e00\u4e2a\u88ab\u8bbf\u95ee\u4e24\u904d\u7684\u8282\u70b9\u5c31\u662f\u73af\u7684\u201c\u6839\u201d\n\u4ee3\u7801\u5982\u4e0b\n```\nint rt,er;//rt\u5c31\u662f\u4e0a\u6587\u4e2d\u73af\u7684\u6839,er\u8868\u793a\u7ecf\u8fc7\u6839\u7684\u6b21\u6570\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u56de\u6eaf\u8fc7\u73af\u7684\u201c\u6839\u201d\nvoid huan(int now,int fa)\n{\n    vis[now]++;\n    if(vis[now]>1)\n    {hua[now]=1;rt=now;er++;return ;}\n    if(!head[now])return ;\n    bool bj=0;//\u8bb0\u5f55\u662f\u5426\u6709\u5b50\u6811\u5728\u73af\u4e0a\n    for(int e=head[now];e;e=ed[e].nxt)\n    {\n        int v=ed[e].to;\n        if(v==fa)continue;\n        if(now==rt)break;\n        huan(v,now);\n        if(hua[v])bj=1;\n    }\n    if(bj)hua[now]=1;//\u5982\u679c\u6709\u5b50\u6811\u5728\u73af\u4e0a\uff0c\u90a3\u4e48now\u5f88\u53ef\u80fd\u4e5f\u5728\u73af\u4e0a\uff0c\u7279\u6b8a\u60c5\u51b5\u7531\u4e0b\u9762\u5224\u65ad\n    if(er==2)hua[now]=0;//er==2\u8bf4\u660e\u5df2\u7ecf\u56de\u5230\u4e86root\u7684\u7236\u4eb2\u8282\u70b9\uff08\u7956\u5148\u8282\u70b9\uff09\n    if(now==rt)er++;\n}\n```\n\u73b0\u5728\u628a\u8fd9\u4e2a\u73af\u6302\u5230\u6811\u4e0a\u3002\u5c31\u50cf\u8fd9\u6837\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uj5zffvr.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6b64\u65f6\u6700\u4f18\u89e3\u662f1 2 6 4 3 5 7\u3002\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5728\u904d\u53862\u7684\u5b50\u6811\u65f6\u4e00\u5b9a\u8981\u8d70\u8fc77.\u6b64\u65f6\u5c31\u65e0\u6cd5\u56de\u52303\u7136\u540e\u4ece3\u8d70\u4e86\u3002\n\u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u8d70\u5230\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\uff0c\u4e14\u8fd9\u4e2a\u70b9\u6709\u4e0d\u5728\u73af\u4e0a\u7684\u513f\u5b50\u65f6\uff0c\u8981\u8003\u8651\u8fd9\u4e2a\u513f\u5b50\u7684\u5f71\u54cd\u3002\u5982\u679c\u513f\u5b50\u7684\u7f16\u53f7\u6bd4\u4e00\u5f00\u59cb\u8bb0\u5f55\u7684\u53c2\u6570\u8981\u5927\uff0c\u90a3\u4e48\u5c31\u8981\u628a\u53c2\u6570\u66f4\u65b0\u4e3a\u8fd9\u4e2a\u513f\u5b50\u7684\u7f16\u53f7\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u6b64\u65f6\u662f\u4ece\u73af\u4e0a\u7f16\u53f7\u8f83\u5927\u7684\u90a3\u4e00\u7aef\u8d70\u8fc7\u6765\u7684\u8bdd\uff0c\u5c31\u4e0d\u7528\u7ba1\u53c2\u6570\u4ec0\u4e48\u4e8b\u4e86,\u6b64\u65f6\u53c2\u6570\u8bbe\u4e3ainf\u3002\n\u90a3\u4e48\u73af\u4e0a\u7684\u70b9\uff0c\u53ea\u8981\u5b58\u5728\u4e0d\u5728\u73af\u4e0a\u7684\u513f\u5b50\u5c31\u66f4\u65b0\u53c2\u6570\u5417\uff1f\u663e\u7136\u4e0d\u662f\u3002\u8bbe\u4e0d\u5728\u73af\u4e0a\u7684\u513f\u5b50\u662fa,\u5982\u679ca\u7684\u7f16\u53f7\u8981\u5c0f\u4e8e\u5728\u73af\u4e0a\u7684\u513f\u5b50\u7684\u7f16\u53f7\uff0c\u90a3\u4e48\u8bb0\u5f55\u5b83\u663e\u7136\u6ca1\u6709\u610f\u4e49\u3002\u5982\u679c\u627e\u4e0d\u5230\u53ef\u4ee5\u66f4\u65b0\u7684\u7f16\u53f7\uff0c\u90a3\u5c31\u4e0d\u6539\u53d8\u53c2\u6570\u3002\u5e76\u4e14\u8981\u4fdd\u8bc1\u539f\u672c\u7684\u53c2\u6570\u4e0d\u4e3ainf(\u5373\u4ece\u73af\u7684\u8f83\u5c0f\u7684\u4e00\u7aef\u8d70\u8fc7\u6765\uff09\u3002\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5199\u51fa\u8d2a\u5fc3\u7684\u4ee3\u7801\u4e86\n```\nvoid dfs2(int now,int fa,int cs)//cs\u5c31\u662f\u5e26\u7684\u53c2\u6570\n{\n    if(now>cs)return ;//\u8be5\u56de\u6eaf\u4e86\n    if(vis[now])return ;\n    vis[now]=1;\n    vector<int> qwq;\n    ans1[++t]=now;//\u8bb0\u5f55\u7b54\u6848\n    for(int e=head[now];e;e=ed[e].nxt)\n    {\n        int v=ed[e].to;\n        if(v==fa)continue;\n        qwq.push_back(v);\n    }\n    sort(qwq.begin(),qwq.end());\n    int qaq=qwq.size();\n    if(now==rt)//\u5728root\u5904\u5f00\u59cb\u8bb0\u5f55cs\n     for(int i=qaq-1;i>=0;i--)\n          if(hua[qwq[i]]){cs=qwq[i];break;}  \n    if(now!=rt&&hua[now]&&cs!=inf)\n    {\n       int rwr=inf;\n       for(int i=qaq-1;i>=0;i--)\n       if(hua[qwq[i]]){rwr=qwq[i];break;}//rwr\u8bb0\u5f55\u5b50\u6811\u4e2d\u5728\u73af\u4e0a\u7684\u70b9\u7684\u7f16\u53f7\n       for(int i=qaq-1;i>=0;i--)\n        if(!hua[qwq[i]]&&qwq[i]>rwr){cs=qwq[i];break;}//\u66f4\u65b0\u53c2\u6570\n    }\n    for(int i=0;i<qaq;i++)\n    {\n      if((qwq[i]<cs&&now==rt)||(now!=rt&&hua[qwq[i]])) dfs2(qwq[i],now,cs);//\u5982\u679c\u662f\u5f00\u59cb\u8d70\u7f16\u53f7\u8f83\u5c0f\u7684\u70b9\u6216\u8005\u8bf4now\u5728\u73af\u4e0a\u5219\u8981\u5e26\u7740cs\uff08\u7531\u4e8e\u8d70\u8f83\u5927\u7684\u70b9\u7684\u7f16\u53f7\u7684\u60c5\u51b5\u5728\u4e0b\u9762\u66f4\u65b0\u4e86cs,\u6240\u4ee5\u8fd9\u4e48\u5199\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\n      else dfs2(qwq[i],now,inf);//\u5728\u8d70\u8f83\u5927\u7684\u70b9\u7684\u65f6\u5019\u628acs\u66f4\u65b0\u6389\n    }\n}\n```\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u6109\u5feb\u7684AC\u4e86\uff08\u628a\u6570\u7ec4\u6539\u5927\u5c31\u8fde\u7740[\u6570\u636e\u52a0\u5f3a\u7248](https://www.luogu.org/problem/P5049)\u4e00\u8d77AC\u4e86\uff09\n\u6b64\u9898\u89e3\u5728\u535a\u5ba2\u56ed\u540c\u6b65\u53d1\u5e03(\u5185\u5bb9\u6709\u6539\u52a8)\n~~\u4e0d\u8981\u8138\u7684~~\u5ba3\u4f20\u7a9d\u7684[\u535a\u5ba2](https://www.cnblogs.com/lcez56jsy/)",
        "postTime": 1572527716,
        "uid": 177068,
        "name": "\u5343\u8f7d\u715c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P5022) \u867d\u7136\u597d\u50cf\u4e5f\u6ca1\u4eba\u8981\u770b\u6211\u535a\u5ba2 ![](https://cdn.luogu.com.cn/upload/pic/43997.png)\n\n### \u4e00.\u5173\u4e8e\u9898\u76ee\u7684\u89e3\u6cd5\n\n\u8fd9\u9898\u521d\u89c1\u65f6\u53ef\u80fd\u6ca1\u6709\u5934\u7eea\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u6570\u636e... $1<=n<=5000$ \u4e00\u770b\u5c31\u53ef\u4ee5\u91c7\u53d6$O(n^2)$\u505a\u6cd5\u3002 \u518d\u770b\u5230$m=n-1$\u6216$m=n$\u65f6\uff0c\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u5728$m=n-1$\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u8d2a\u5fc3\u7684\u7b97\u6cd5\uff0c\u76f4\u63a5\u904d\u5386\u6574\u5f20\u56fe\u3002\u7531\u4e8e\u8d77\u70b9\u4e0d\u786e\u5b9a\u4e14\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee51\u4e3a\u8d77\u70b9\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8d2a\u5fc3\u5462\uff1f\u53ea\u8981\u628a\u4ee5$x$\u4e3a\u8d77\u70b9\u7684\u8fb9\u6309\u7ec8\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5373\u53ef\u3002\u5728$m=n$\u65f6\uff0c\u56fe\u91cc\u4f1a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u4ece\u800c\u4f7f\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u65e0\u6cd5\u4fdd\u8bc1\u3002\u800c\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8d70\u5230$n$\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981$n-1$\u6761\u8fb9\u3002\u6240\u4ee5\u5728\u9898\u76ee\u4e2d\uff0c$m=n$\u65f6\u6709\u4e00\u6761\u8fb9\u662f\u5b8c\u5168\u4e0d\u5fc5\u8981\u5b58\u5728\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u73af\u91cc\u7684\u6bcf\u6761\u8fb9\uff0c\u5728\u5047\u8bbe\u8fd9\u6761\u8fb9\u526a\u6389\u7684\u60c5\u51b5\u4e0b\u6765\u904d\u5386\u6574\u5f20\u56fe\u3002\n\n### \u4e8c.\u5173\u4e8e\u4ee3\u7801\n\n\u628a\u8fb9\u6392\u5e8f\u4ec0\u4e48\u7684\u6211\u4eec\u53ef\u4ee5\u7528vector\u6765\u5b9e\u73b0\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cvector\u4f1a\u88ab\u5361\u6700\u540e3\u4e2a\u70b9\uff0c\u4e8e\u662f\u4f5c\u8005\u4e0d\u5f97\u4e0d\u5fcd\u75db\u5272\u7231\uff0c\u7528\u524d\u5f0f\u94fe\u5411\u661f+sort\u5199\u4e86\u3002\n\n\u867d\u7136\u5728\u4e0a\u8ff0\u6587\u7ae0\u4e2d\uff0c\u6211\u8bb2\u7684\u662f\u679a\u4e3e\u73af\u91cc\u7684\u8fb9\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u679a\u4e3e\u4efb\u610f\u4e00\u6761\u8fb9\u65f6\u90fd\u4e0d\u4f1a\u8d85\u65f6\uff0c\u56e0\u4e3a$1<=n<=5000$ \u3002~~\u6211\u4e3a\u4e86\u7701\u4e8b\u7701\u4ee3\u7801\uff0c\u5c31\u76f4\u63a5\u679a\u4e3e\u4efb\u610f\u4e00\u6761\u8fb9\u4e86~~\n\n\u4e0b\u9762\u7ed9\u4e00\u4e2a115\u884c\u7684\u4ee3\u7801\uff0c\u8ba9\u4eba\u4e0d\u5f97\u4e0d\u611f\u6168\u63d0\u9ad8\u7684\u7801\u91cf\u6050\u6016\u5982\u65af\u3002 ~~\u800c\u4e14\u4e3a\u4e86\u4fdd\u969c\u4e0d\u8d85\u65f6\uff0c115\u884c\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u662f\u7528\u6765\u5361\u5e38\u7684~~\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n\tint next,to;\n}a[20005];\nint cnts,head[20005];\nvoid add(int x,int y)\n{\n\ta[++cnts].to=y;\n\ta[cnts].next=head[x];\n\thead[x]=cnts;\n}\nint ckts[20005];\nvoid build(int x)\n{\n\tint size=0;\n\tmemset(ckts,0,sizeof(ckts));\n\tfor(int i=head[x];i;i=a[i].next)\n\t\tckts[++size]=a[i].to;\n\tsort(ckts+1,ckts+size+1);\n\tsize=1;\n\tfor(int i=head[x];i;i=a[i].next)\n\t\ta[i].to=ckts[size],size=size+1;\n}\nstruct c\n{\n\tint cx,cy;\n}we[20005];\nbool cmp_we(c x,c y)\n{\n\tif(x.cx==y.cx) return x.cy<y.cy;\n\telse return x.cx<y.cx;\n}\nint used[5005],ans[5005],p[5005],cnt;\nvoid dfs1(int x,int fa)\n{\n    if(used[x]) return;\n    used[x]=1; ans[++cnt]=x;\n    for(int i=head[x];i;i=a[i].next)\n    \tif(a[i].to!=fa)\n    \t{\n    \t\tdfs1(a[i].to,x);\n\t\t}\n}\nint nox,noy;\nint n;\nvoid dfs2(int x,int fa)\n{\n    if(used[x]) return;\n    used[x]=1; p[++cnt]=x;\n    for(int i=head[x];i;i=a[i].next)\n    {\n        if(a[i].to==fa) continue;\n        if(a[i].to==nox && x==noy) continue;\n        if(a[i].to==noy && x==nox) continue;\n        dfs2(a[i].to,x);\n    }\n}\nbool check()\n{\n    for(int i=1;i<=n;++i)\n        if(p[i]<ans[i]) return 1;\n        else if(p[i]>ans[i]) return 0;\n    return 0;\n}\nvoid read(int &x)\n{\n    x=0;\n    char ch=cin.get();\n    while(!isdigit(ch)) ch=cin.get();\n    while(isdigit(ch)) x=x*10+ch-'0',ch=cin.get();\n}\nvoid write(int x)\n{\n    if(x<10) putchar(x+'0');\n    else write(x/10),putchar(x%10+'0');\n}\nint main()\n{\n    int m;\n    read(n); read(m);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        read(x); read(y);\n        we[i].cx=x;\n        we[i].cy=y;\n        add(x,y); add(y,x);\n    }\n    for(int i=1;i<=n;++i)\n    \tbuild(i);\n    if(n!=m){dfs1(1,0);}\n    else\n    {\n        for(int i=1;i<=n;++i)\n            ans[i]=114514;\n        for(int i=1;i<=m;++i)\n        {\n            memset(used,0,sizeof(used));\n            cnt=0;\n            nox=we[i].cx; noy=we[i].cy;\n            dfs2(1,0);\n            if(cnt<n) continue;\n            if(check())\n            {\n                for(int j=1;j<=n;++j)\n                    ans[j]=p[j];\n            }\n        }\n    }\n    for(int i=1;i<=n;++i)\n        write(ans[i]),putchar(' ');\n    return 0;\n}\n```\n\n\u672c\u9898\u89e3\u5230\u6b64\u7ed3\u675f\uff0c\u5e0c\u671b\u5404\u4f4d\u8bfb\u8005\u8eab\u4f53\u5065\u5eb7",
        "postTime": 1552994773,
        "uid": 90285,
        "name": "\u2468baka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u524d60\u5206\uff0c\u5373\u662f\u4e00\u68f5\u6811\u7684\u505a\u6cd5\n\n\u7531\u4e8e\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u8d2a\u5fc3\u7684\u505a\u6cd5\uff0c\u5373\u4ece1\u53f7\u8282\u70b9\u5f00\u59cb\uff0c\u6bcf\u6b21\u8d70\u7f16\u53f7\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u6613\u8bc1\u8fd9\u6837\u7684\u5b57\u5178\u5e8f\u662f\u6700\u5c0f\u7684\n\n\u90a3\u4e48\u4ee3\u7801\u5b9e\u73b0\u65f6\u6211\u4eec\u5982\u679c\u8fd8\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u8bdd\uff0c\u5199\u8d77\u6765\u5c31\u4f1a\u975e\u5e38\u7684\u9ebb\u70e6\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651$vector$\u5b58\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u628a\u6240\u6709\u548c\u5b83\u8fde\u7ed3\u7684\u70b9\u7684\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n\u56e0\u4e3a\u6211\u4eec\u5728\u4f7f\u7528$vector$\u65f6\uff0c\u4ee3\u7801\u662f\u8fd9\u4e48\u5199\u7684\n\n```cpp\n    for(int i=0;i<v[u].size();i++)\n```\n\n\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u5f80\u6700\u5c0f\u7684\u4e00\u8fb9\u8d70\uff0c\u7136\u540e\u6211\u4eec\u4ece1\u53f7\u8282\u70b9\u51fa\u53d1\uff0c\u8dd1**\u4e00\u904d**$Dfs$\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff0815/25 60\u5206\u505a\u6cd5\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[5005],tot,a[5005],lat[5005],sum;\nvector <int> v[5005];\nbool Check()\n{\n    for(int i=1;i<=n;i++) if(!a[i]) return 0;\n    for(int i=1;i<=n;i++) if(a[i]!=ans[i]) return ans[i]>a[i];\n}\nvoid Dfs(int u,int faz)\n{\n    if(sum>n) return;\n    a[sum]=u;\n    for(int i=0;i<v[u].size();i++)\n    {\n        if(v[u][i]==faz) continue;\n        sum++;\n        Dfs(v[u][i],u);\n    }\n}\nint main()\n{\n    memset(ans,60,sizeof(ans));\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        v[x].push_back(y);\n        v[y].push_back(x);\n    }\n    for(int i=1;i<=n;i++) sort(v[i].begin(),v[i].end());\n    sum=1;\n    Dfs(1,0);\n    memcpy(ans,a,sizeof(a));\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    return 0;\n}\n```\n\n\u90a3\u8fd8\u6709\u5269\u4e0b\u768440\u5206\u5462\uff1f\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u518d\u6309\u539f\u6765\u7684\u529e\u6cd5\u8dd1$Dfs$\u5c31\u884c\n\n\u4f46\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u884c\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u56fe\u91cc\u6709\u73af\u7684\u8bdd\uff08$n\\leq m$\u5728\u6ca1\u6709\u91cd\u8fb9\u81ea\u73af\u7684\u60c5\u51b5\u4e0b\u662f\u80af\u5b9a\u6709\u73af\u7684\uff09\uff0c\u8fd9\u4e00\u4e2a\u73af\u91cc**\u80af\u5b9a\u6709\u4e00\u6761\u8fb9\u662f\u7528\u4e0d\u5230\u7684**\uff0c\u6b63\u786e\u6027\u663e\u800c\u6613\u89c1\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0b\u4e00\u6b65\u53ea\u80fd\u5f80\u6ca1\u8d70\u8fc7\u7684\u5730\u65b9\u8d70\uff0c\u6216\u8005\u662f\u671d\u4e0a\u4e00\u4e2a\u5730\u65b9\u8d70\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u80fd\u8d70\u7684\u70b9\u662f$n$\uff0c\u800c\u80fd\u7ecf\u8fc7\u7684\u8fb9\u53ea\u6709$n-1$\u6761\uff0c\u5bf9\u4e8e\u4e00\u4e2a$x$\u4e2a\u70b9$x$\u4e2a\u8fb9\u7684\u73af\u6765\u8bf4\uff0c\u80af\u5b9a\u662f\u6709\u4e00\u6761\u8fb9\u7528\u4e0d\u5230\u7684\uff08\u57fa\u73af\u6811\u561b\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u679a\u4e3e\u8fd9\u6761\u7528\u4e0d\u5230\u7684\u8fb9\uff0c\u7136\u540e\u8dd1$Dfs$\u5373\u53ef\n\n\u4f46\u4e8b\u5b9e\u8bc1\u660e\u5982\u679c\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u8fb9\u5728\u6d1b\u8c37\u6570\u636e\u4f1a\u8d85\u65f6\uff0cT\u4e86\u6700\u540e\u4e24\u4e2a\u70b9\uff0c\u5f00O2\u662f\u53ef\u4ee5\u8fc7\uff0c\u4f46\u8fd8\u6709\u4e00\u79cd\u6211\u8111\u8865\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u5c31\u662f\u5148\u8dd1\u4e00\u904d$Dfs$\uff0c\u627e\u5230\u73af\uff0c\u7136\u540e**\u53ea\u5220\u73af\u4e0a\u7684\u8fb9**\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u5982\u679c\u4f60\u5220\u7684\u8fb9\u4e0d\u662f\u5728\u73af\u4e0a\u800c\u5728\u522b\u7684\u5730\u65b9\uff0c\u5982\u679c**1\u53f7\u8282\u70b9\u8fd8\u80fd\u8d70\u5230\u73af\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4f1a\u8dd1\u6ee1\u7684**\uff08\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u5728\u7a0b\u5e8f\u91cc\u7528\u4e86\u4e00\u4e2a$cir$\u7684\u5e03\u5c14\u53d8\u91cf\uff09\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u8d85\u65f6\u4e86\n\n\u8fd9\u79cd\u5199\u6cd5\u5c31\u4ea4\u7ed9\u5404\u4f4d\u4e86\uff0c\u8fd9\u91cc\u9644\u4e0a\u6211\u7684\u4ee3\u7801\n\n\uff0823/25 92\u505a\u6cd5 O2 25/25 100\uff09\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[5005],tot,a[5005],lat[5005],sum,fr[5005],to[5005],del;\nvector <int> v[5005];\nbool cir;\nbool Check()\n{\n    for(int i=1;i<=n;i++) if(!a[i]) return 0;\n    for(int i=1;i<=n;i++) if(a[i]!=ans[i]) return ans[i]>a[i];\n}\nvoid Dfs(int u,int faz)\n{\n    if(sum>n)\n    {\n        cir=1;\n        return;\n    }\n    a[sum]=u;\n    for(int i=0;i<v[u].size();i++)\n    {\n        if((u==fr[del] && v[u][i]==to[del]) || (v[u][i]==fr[del] && u==to[del]) || v[u][i]==faz) continue;\n        sum++;\n        Dfs(v[u][i],u);\n    }\n}\nint main()\n{\n    memset(ans,60,sizeof(ans));\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        v[x].push_back(y);\n        v[y].push_back(x);\n        fr[i]=x;\n        to[i]=y;\n    }\n    for(int i=1;i<=n;i++) sort(v[i].begin(),v[i].end());\n    if(m==n-1)\n    {\n        sum=1;\n        Dfs(1,0);\n        memcpy(ans,a,sizeof(a));\n    }\n    else if(n==m)\n    {\n        for(int i=1;i<=m;i++)\n        {\n            memset(a,0,sizeof(a));\n            del=i;\n            sum=1;\n            cir=0;\n            Dfs(1,0);\n            if(!cir && Check()) memcpy(ans,a,sizeof(a));\n        }\n    }\n    for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1542244046,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u672c\u4eba\u7684\u4ee3\u7801\u53ef\u4ee5\u8bf4\u6d1b\u8c37\u6700\u7b80\u5355\u7684\u4e86\n\n\u6211\u7684\u5b58\u56fe\u65b9\u5f0f\u6709\u4e9b\u4e0e\u4f17\u4e0d\u540c\n\na[5000][5000]\u4e2d\u7b2c\u4e00\u4e2a\u4e0b\u6807\u8868\u793a\u7b2c\u51e0\u4e2a\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8868\u793a\u4e0e\u70b9\u76f8\u8fde\u7684\u70b9\n\n\u867d\u7136\u6bd4\u524d\u5411\u661f\u5e9f\u5185\u5b58\u4f46\u65f6\u95f4\u6781\u5feb,\u5927\u6982\u662fO(n)\u7684\u3002\n\n\u73b0\u5728\u6b65\u5165\u6b63\u9898\n# 60\u5206\u4ee3\u7801\u601d\u8def\n\u7528\u6df1\u641c\u67e5\u627e\u6700\u5c0f\u8def\u5f84\u5f88\u7b80\u5355\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,a[5005][5005],lj[5005]={0},c[5005]={0},s=0,fs=1,h[5005]={0},huan=0,dd=0,b[5009][5009];\nint cmp(int aa,int bb)\n{\n    return a[aa]<a[bb];\n}\nvoid dfs(int x)\n{\n    c[x]++;\n    if(s==1)return ;\n    if(fs==n)\n    {\n        printf(\"\\n\");\n        s=1;\n        return ;\n    }\n    for(int i=1;i<=lj[x];i++)\n    {\n        if(c[a[x][i]]==0)\n        {\n            printf(\"%d \",a[x][i]);\n            \n            fs++;\t\n            dfs(a[x][i]);\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int aa,bb;\n        scanf(\"%d%d\",&aa,&bb);\n        lj[aa]++;\n        lj[bb]++;\n        a[aa][lj[aa]]=bb;\n        a[bb][lj[bb]]=aa;\n        b[aa][bb]=1;\n        \n    }\n    for(int i=1;i<=n;i++)\n    sort(a[i]+1,a[i]+lj[i]+1,cmp);\n    printf(\"1 \");\n    if(m==n-1) \n    dfs(1);\n    return 0\uff1b\n}\n```\n\u81f3\u4e8e\u6ee1\u5206\u8fd8\u9700\u8981n==m\u7684\u60c5\u51b5\n# 100\u5206\u601d\u8def\n\u5148\u5224\u65ad\u73af\n\u5c06\u73af\u627e\u51fa\n\u505a\u597d\u6807\u8bb0\n\u518d\u6df1\u641c\u5728\u73af\u4e0a\u5224\u65ad\n\u60c5\u51b5\u6709\u5f88\u591a\u8be6\u89c1\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,a[5005][5005],lj[5005]={0},c[5005]={0},s=0,fs=1,h[5005]={0},huan=0,dd=0,b[5009][5009];\nint cmp(int aa,int bb)\n{\n    return a[aa]<a[bb];\n}\nvoid dfs(int x)\n{\n    c[x]++;\n    if(s==1)return ;\n    if(fs==n)\n    {\n        printf(\"\\n\");\n        s=1;\n        return ;\n    }\n    for(int i=1;i<=lj[x];i++)\n    {\n        if(c[a[x][i]]==0)\n        {\n            printf(\"%d \",a[x][i]);\n            \n            fs++;\t\n            dfs(a[x][i]);\n        }\n    }\n}\nvoid dfs1(int x)\n{\n\tc[x]++;\n\tif(s==1)return ;\n\tif(c[x]==2)\n\t{\n\t\th[x]=1;\n\t\t\n\t\thuan=x;\n\t\treturn ;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif((b[x][a[x][i]]==1||b[a[x][i]][x]==1)&&huan==0)\n\t\t{\n\t\t\tb[x][a[x][i]]=b[a[x][i]][x]=0;\n\t\t\tdfs1(a[x][i]);\n\t\t\tif(huan!=0&&huan!=x&&s!=1)h[x]=1;\n\t\t\tif(huan==x)s=1;\n\t\t}\n\t}\n}\nint dyc=0,huandedazhi=1000000,ag=0,hhl=0,bxyjz=0;\nint zb=100000;\nvoid ac(int x)\n{\n\tc[x]++;\n\tif(s==1)return ;\n\tif(fs==n)\n\t{\n\t\tprintf(\"\\n\");\n\t\ts=1;\n\t\treturn ;\n\t}\n\t\n\tif(x==huan&&dyc==0)\n\t{\n\t\tdyc=1;\n\t\tint h1=0,h2;\n\t\tfor(int i=1;i<=lj[x];i++)\n\t\t{\n\t\t\tif(h[a[x][i]]==1)\n\t\t\t{\n\t\t\t\tif(h1==0)h1=a[x][i];\n\t\t\t\telse h2=a[x][i];\n\t\t\t}\n\t\t}\n\t\thuandedazhi=max(h1,h2);\n\t\tzb=huandedazhi;\n\t}\n\tif(x==huandedazhi)ag=11;\n\tfor(int i=1;i<=lj[x];i++)\n\t{\n\t\t\n\t\tif(c[a[x][i]]==0)\n\t\t{\n\t\t\tif(h[a[x][i]]==0)\n\t\t\t{\n\t\t\t\tprintf(\"%d \",a[x][i]);\n            \n            \tfs++;\t\n            \t\n            \tac(a[x][i]);\n\t\t\t}\n\t\t\tif(h[a[x][i]]==1)\n\t\t\t{\n\t\t\t\tif(a[x][i+1]!=0&&(a[x][i]<huandedazhi||ag==0)&&h[a[x][i+1]]==0&&h[x]==1)\n\t\t\t\t\tzb=a[x][i+1];\n\t\t\t\tif(a[x][i]>zb&&ag==0)\n\t\t\t\t{\n\t\t\t\t\tag=1;\n\t\t\t\t}\n\t\t\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d \",a[x][i]);\n            \n            \t\tfs++;\t\n            \t\t\n            \t\tac(a[x][i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int aa,bb;\n        scanf(\"%d%d\",&aa,&bb);\n        lj[aa]++;\n        lj[bb]++;\n        a[aa][lj[aa]]=bb;\n        a[bb][lj[bb]]=aa;\n        b[aa][bb]=1;\n        \n    }\n    for(int i=1;i<=n;i++)\n    sort(a[i]+1,a[i]+lj[i]+1,cmp);\n    printf(\"1 \");\n    if(m==n-1) \n    dfs(1);\n    if(m==n)\n    {\n    \tdfs1(1);\n    \tfor(int i=1;i<=n;i++)c[i]=0;s=0;\n    \tac(1);\n\t}\n}\n```\n",
        "postTime": 1542809574,
        "uid": 80908,
        "name": "\u7ebf\u6bb5\u6811\u58f9\u96f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u989860%\u7684\u6570\u636e\u8fd8\u662f\u5bb9\u6613\u505a\uff1b\n\u8fd9\u8981\u5efa\u56fe\u7684\u65f6\u5019\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u5982\u4f55\u6df1\u641c\u5c31\u884c\u4e86\uff1b\n\u56e0\u4e3a\u4e24\u70b9\u4e4b\u95f4\u6709\u4e14\u53ea\u6709\u4e00\u6761\u8def\u5f84\u8054\u901a\uff1b\n\u56e0\u6b64\u9009\u62e9\u4e86\u4e86\u4e00\u6761\u8fb9\uff0c\u5c31\u5fc5\u987b\u628a\u8fd9\u68f5\u5b50\u6811\u8d70\u5b8c\uff1b\n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u90fd\u9009\u62e9\u8282\u70b9\u6700\u5c0f\u7684\u90a3\u5b50\u6811\uff1b\n\u8d2a\u5fc3\u5c31\u5b8c\u4e8b\uff1b\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,u,v;\nstruct node{\n    int from;\n    int to;\n}edge[10005];\nint len,st[5005];\nbool bol[5005];\n\nbool cmp(const node &a,const node &b){\n    return a.from==b.from?a.to<b.to:a.from<b.from;//\u9884\u5904\u7406\uff0c\u4f7f\u5c0f\u7684\u8282\u70b9\u5728\u524d\u9762\uff1b\n}\n//\u8fd9\u8fb9\u662f\u7ed9\u8fb9\u6392\u4e2a\u5e8f\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u8d77\u70b9\u7684\u8fb9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u641c\u7d22\u7684\u65f6\u5019\u6548\u7387\u9ad8\u4e00\u4e9b\uff1b\nvoid esort(){\n    sort(edge+1,edge+1+len,cmp);\n    for(register int i=1;i<=len;i++){\n        if(st[edge[i].from]==0)st[edge[i].from]=i;\n    }\n    return;\n}\n//\u5efa\u56fe\nvoid build(){\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=m;i++){\n        scanf(\"%d%d\",&u,&v);\n        len++;\n        edge[len].from=u;\n        edge[len].to=v;\n        len++;\n        edge[len].from=v;\n        edge[len].to=u;\n    }\n    esort();\n    return;\n}\n//\u8fd9\u8fb9\u5c31\u662f\u76f4\u63a5\u641c\u7d22\uff1b\nvoid dfs(int p){\n    printf(\"%d \",p);\n    bol[p]=1;\n    for(register int i=st[p];i<=len;i++){\n        if(edge[i].from!=p)break;\n        if(bol[edge[i].to])continue;\n        dfs(edge[i].to);\n    }\t\n    return;\n}\n\nvoid solve(){\n    dfs(1);\n    return;\n}\n//\u601d\u8def\u6e05\u6670\u7684\u4e3b\u51fd\u6570QAQ\uff1b\nint main(){\n    build();\n    solve();\n    return 0;\n}\n```\n\n\u7136\u540e\u5c31\u518d\u770b\u770b100%\u7684\u6570\u636e\uff1b\n\u56e0\u4e3a\u6709N\u6761\u8fb9\uff0c\u56e0\u6b64\u5fc5\u5b9a\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u73af\u5728\u56fe\u4e2d\uff08\u8fd9\u4e2a\u5e94\u8be5\u80fd\u7406\u89e3\u5427\uff09\uff1b\n\u73af\u7684\u5b58\u5728\u4f7f\u5f97\u8def\u5f84\u6709\u4e86\u591a\u79cd\u9009\u62e9\uff0c\u65e0\u6cd5\u8fdb\u884c\u7b80\u5355\u8d2a\u5fc3\uff1b\n\u6837\u4f8b\u4e8c\u5c31\u662f\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff1b\n\u7136\u540e\u601d\u8003\u4e00\u4e0b\uff1b\n\u5982\u679c\u53ea\u6709N-1\u6761\u8fb9\uff0c\u90a3\u4e48\u4e0d\u5c31\u548c\u524d\u9762\u768460%\u7684\u6570\u636e\u4e00\u6837\u4e86\u5417\uff1b\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u5230\u56fe\u4e2d\u5b58\u5728\u7684\u73af\u5e76\u8bb0\u5f55\u4e0b\u73af\u4e2d\u7684\u8fb9\uff1b\n\u7136\u540e\u4f9d\u6b21\u679a\u4e3e\u73af\u4e2d\u7684\u8fb9\uff08\u5373\u5220\u9664\u7684\u90a3\u6761\u8fb9\uff1b\n\u753b\u9762\u7684\u5c31\u548c\u524d\u9762\u7684\u8d2a\u5fc3\u4e00\u6837\uff1b\n\u6bcf\u6b21\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u8def\u5f84\uff0c\u548c\u524d\u4e00\u6b21\u7684\u8def\u5f84\u6bd4\u8f83\uff0c\u9009\u62e9\u6700\u4f18\u89e3\uff1b\n\u590d\u6742\u5ea6\u4e0d\u9ad8\u53ef\u4ee5AC\uff0c\u672c\u4eba\u7684\u4e0a\u8ff0\u4ee3\u7801\u662f200ms\u4e0d\u5230\uff1b\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m,u,v;\nstruct node{\n\tint from;\n\tint to;\n}edge[10005];\nint len,st[5005];\nbool bol[5005];\nint ans[5005],tot;\nint esave[5005],ecir[5005][5005];\n\nbool cmp(const node &a,const node &b){\n\treturn a.from==b.from?a.to<b.to:a.from<b.from;\n}//\u9884\u5904\u7406\uff1b\n\nvoid esort(){\n\tsort(edge+1,edge+1+len,cmp);\n\tfor(register int i=1;i<=len;i++){\n\t\tif(st[edge[i].from]==0)st[edge[i].from]=i;\n\t}\n\treturn;\n}//\u8fb9\u6392\u5e8f\uff1b\n\nvoid build(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tlen++;\n\t\tedge[len].from=u;\n\t\tedge[len].to=v;\n\t\tlen++;\n\t\tedge[len].from=v;\n\t\tedge[len].to=u;\n\t}\n\tesort();\n\treturn;\n}//\u5efa\u56fe\uff1b\n\nvoid dfs(int p){\n\tprintf(\"%d \",p);\n\tbol[p]=1;\n\tfor(register int i=st[p];i<=len;i++){\n\t\tif(edge[i].from!=p)break;\n\t\tif(bol[edge[i].to])continue;\n\t\tdfs(edge[i].to);\n\t}\t\n\treturn;\n}//\u8d2a\u5fc3\u7684\u641c\u7d22\uff1b\n\nvoid solve(){\n\tdfs(1);\n\treturn;\n}\n\nint begin;\n//\u8fd9\u4e2afindc\u5c31\u662f\u627e\u73af\u4e86\uff1b\nbool findc(int p,int pre){\n    if(begin!=0)return 0;//\u5783\u573e\u526a\u679d\uff1b\n    bol[p]=1;\n    for(register int i=st[p];i<=len;i++){\n        if(edge[i].from!=p)break;\n        if(edge[i].to==pre)continue;\n        if(bol[edge[i].to]){//\u8fd9\u4e2a\u5730\u65b9\u5c31\u662f\u8bf4\u660e\u627e\u5230\u73af\u4e86\uff0c\u7136\u540e\u9012\u5f52\u56de\u53bb\uff09\uff1b\n            esave[++esave[0]]=i;\n            begin=edge[i].to;\n            return 1;\n        }\n        if(findc(edge[i].to,p)){//\u8fd9\u4e2a\u5730\u65b9\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u627e\u5230\u73af\u4e86\u5c31\u5b58\u8d77\u6765\uff1b\n            if(edge[i].to==begin)return 0;\n            else{\n                esave[++esave[0]]=i;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\nbool co,sw;\nvoid spdfs(int p){\n    bol[p]=1;\n    tot++;\n    if(co)return;\n    if(p>ans[tot]&&!sw){\n        co=1;\n        return;\n    }//\u8fd9\u4e24\u4e2aif\u5c31\u662f\u53bb\u66f4\u65b0\u6211\u4eec\u7684\u7b54\u6848\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7b54\u6848\u66f4\u65b0\u4e86\uff0c\u5c31\u5f97\u544a\u8bc9\u540e\u9762\u7684\u641c\u7d22\u7b54\u6848\u662f\u66f4\u65b0\u4e86\u7684\uff0c\u5728\u4e0b\u4e00\u6b21\u5224\u65ad\u65f6\u5c31\u5f97\u6ce8\u610f\u4e00\u4e0b\u4e86\uff0c\u4e0a\u9762\u7684sw\u5c31\u662f\u6267\u884c\u6b64\u529f\u80fd\uff1b\n    if(p<ans[tot]||sw){\n        ans[tot]=p;\n        sw=1;\n    }\n    for(register int i=st[p];i<=len;i++){\n        if(edge[i].from!=p)break;\n        if(bol[edge[i].to]||ecir[p][edge[i].to])continue;//\u8fd9\u4e2a\u5730\u65b9\u5c31\u662f\u5173\u952e\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5c31\u662f\u6765\u5224\u65ad\u6211\u4eec\u5220\u9664\u7684\u90a3\u6761\u8fb9\u7684\uff1b\n        spdfs(edge[i].to);\n    }\n    return;\n}\n\n\nvoid spsolve(){\n    findc(1,0);//\u53bb\u627e\u73af\uff1b\n    memset(ans,0x7f,sizeof(ans));\u521d\u59cb\u5316\u6211\u4eec\u7684\u7b54\u6848\uff1b\n    for(register int i=1;i<=esave[0];i++){\n        ecir[edge[esave[i]].from][edge[esave[i]].to]=ecir[edge[esave[i]].to][edge[esave[i]].from]=1;\n        ecir[edge[esave[i-1]].from][edge[esave[i-1]].to]=ecir[edge[esave[i-1]].to][edge[esave[i-1]].from]=0;//\u8fd9\u4e00\u5768\u5c31\u662f\u5220\u9664\u5f53\u524d\u8fb9\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e00\u6b21\u5220\u9664\u8fb9\uff1b\n        tot=0;\n        co=0;\n        sw=0;\n        memset(bol,0,sizeof(bol));//\u521d\u59cb\u5316\uff1b\n        spdfs(1);//\u5f00\u59cb\u641c\u7d22\uff1b\n    }\n    for(register int i=1;i<=n;i++)printf(\"%d \",ans[i]);//\u8f93\u51fa\u8d70\u4eba\uff1b\n    return;\n}\n\nint main(){\n\tbuild();\n\tif(m==n)spsolve();//\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u907f\u514d\u524d\u9762\u768460\u5206\u4e22\u6389\uff1b\n\telse\tsolve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1541995832,
        "uid": 73132,
        "name": "TangLongbin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "```\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=5010;\nconst int maxm=10010; \nint n,m,num=0,x2,y2,cnt=0;\nint head[maxn],nxt[maxm],e[maxm];\nint ans[maxn],R[maxn];\nbool v[maxn]; \n//\u5217\u5f0f\u524d\u5411\u661f\u5b58\u56fe \n//head[x]\u8bb0\u5f55x\u8fd9\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u90bb\u8fb9\u7684\u5e8f\u53f7 \n//next[y]\u8bb0\u5f55\u7b2cy\u6761\u8fb9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5e8f\u53f7 \nstruct node{\n       int x,y;\n}a[maxm],b[maxn];\n//\u5f00\u4e24\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u4e00\u4e2a\u7528\u6765\u5b58\u539f\u59cb\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5373b\u6570\u7ec4\n//\u53e6\u4e00\u4e2a\u7528\u6765\u6392\u5e8f\uff0c\u89c4\u5219\u5982\u4e0b \nbool cmp(node A,node B)\n{\n     return A.y>B.y;\n     /* \n       \u9898\u76ee\u8981\u6c42\u8981\u6309\u5b57\u5178\u5e8f\u8f93\u51fa\uff0c\u5c31\u662f1,2,3......\n       \u6240\u4ee5\u6bcf\u5f53\u8bbf\u95ee\u4e00\u4e2a\u70b9\u540e\uff0c\u6211\u4eec\u90fd\u5e0c\u671b\u63a5\u7740\u8bbf\u95ee\u5b83\u6240\u6709\u90bb\u63a5\u70b9\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\n       \u600e\u4e48\u529e\u5462\uff1f\u6309\u5b57\u5178\u5e8f\u628a\u90bb\u63a5\u70b9\u5b58\u597d\u5373\u53ef\uff0c\u6240\u4ee5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u597d\u5e8f\u518d\u4e00\u4e2a\u4e00\u4e2a\u5b58\u5417\uff1f \n       \u4e0d\u5bf9\uff0c\u56e0\u4e3a\u4e00\u4f1a\u513f\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65f6\u5019\u4f1a\u53cd\u5411\u5b58\u8fde\u63a5\u70b9\uff0c\u6765\u4e86\u4e00\u4e2a\u65b0\u7684\u70b9\u4f1a\u653e\u5728\u6240\u6709\u4e4b\u524d\u70b9\u7684\u524d\u9762\n       \u8981\u5c06\u7ec8\u70b9\u5927\u7684\u8fb9\u6392\u5728\u524d\u9762 \n     */\n}\nvoid add(int x,int y)\n{\n     e[++num]=y;\n     nxt[num]=head[x];\n     head[x]=num;\n}\nvoid dfs(int x)\n{\n     /*\n       \u73b0\u5728\u7684\u56fe\u5176\u5b9e\u5c31\u662f\u4e00\u68f5\u6811,\u56e0\u4e3am==n-1\n       \u6240\u4ee5\u4ece1\u76f4\u63a5\u641c\u7d22\u6bcf\u4e00\u4e2a\u70b9\n       \u51fa\u6765\u5c31\u662f\u5b57\u5178\u5e8f\u7684\u7ed3\u679c\n       \u7528v\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u662f\u5426\u8d70\u8fc7\uff0c\u4e0d\u8981\u8d70\u91cd\u590d\u8def \n     */ \n     v[x]=false;\n     printf(\"%d \",x);\n     for(int i=head[x];i;i=nxt[i])\n     {\n       int y=e[i];\n       //cout<<y<<endl;\n       if(v[y])\n         dfs(y);\n     }\n     return;\n}\nbool check(int x)\n{\n     for(int i=1;i<=x;i++)\n       if(ans[i]!=R[i])\n         return ans[i]>R[i];\n     //\u6bd4\u8f83ans\u6570\u7ec4\u548cR\u6570\u7ec4\u7684\u524dx\u4f4d\n     //\u5982\u679c\u54ea\u4e00\u4f4d\u4e0d\u76f8\u7b49\uff0c\u5c31\u8fd4\u56deR<ans\u4e3a\u771f \n     return true;\n     /*\n       \u8fd9\u662f\u4ece\u7b2c1\u4f4d\u8dd1\u5230\u7b2ccnt\u4f4d\u90fd\u76f8\u7b49\u7684\u60c5\u51b5\n       \u672c\u6765\u5982\u679c\u662f\u628a\u56fe\u904d\u5386\u5b8c\u4e86\n       \u90a3\u4e48return true\u548cfalse\u90fd\u53ef\u4ee5\n       \u4f46\u8003\u8651\u5230dfs2\u91cc\u4e5f\u8981\u7528\u8fd9\u6765\u51cf\u679d\n       \u53ef\u80fd\u8fd8\u6ca1\u6709\u8dd1\u5b8c\u6574\u4e2a\u56fe\u800c\u4e4bR\u6570\u7ec4\u524d\u51e0\u4f4d\u4e0eans\u6570\u7ec4\u76f8\u7b49\n       \u7ee7\u7eed\u641c\u4e0b\u53bb\u8fd8\u662f\u6709\u53ef\u80fd\u5237\u51fa\u66f4\u4f18\u89e3\u7684\n       \u8fd9\u91cc\u5c31return true,\u5728dfs2\u91cc\u4ee5\u53d6\u53cd\u5c31\u4e0d\u4f1a\u505c\u6b62\u4e86\n     */ \n}\nvoid dfs2(int x)\n{\n     v[x]=false;\n     R[++cnt]=x;\n     if(!check(cnt))\n       return;\n     //\u51cf\u679d\uff0c\u5982\u679c\u904d\u5386\u4e86\u524dcnt\u4e2a\u70b9\u7684\u7ed3\u679c\u5df2\u7ecf\u4e0d\u53ef\u80fd\u5237\u5c0fans\n     //\u5c31\u4e0d\u8981\u7ee7\u7eed\u4e86 \n     for(int i=head[x];i;i=nxt[i])\n     {\n       int y=e[i];\n       if(!v[y] || x==x2 && y==y2 || x==y2 && y==x2)\n         continue;\n       dfs2(y);\n     }\n     return;\n}\nint main()\n{\n    memset(head,0,sizeof(head));\n    memset(nxt,0,sizeof(nxt));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n      scanf(\"%d%d\",&a[i].x,&a[i].y);\n      a[m+i].x=a[i].y;\n      a[m+i].y=a[i].x;\n      b[i]=a[i];\n    }\n    sort(a+1,a+2*m+1,cmp);\n    for(int i=1;i<=2*m;i++)\n      add(a[i].x,a[i].y);\n    if(m==n-1)\n    {\n      memset(v,true,sizeof(v));\n      dfs(1);\n      printf(\"\\n\");\n    }\n    else\n    {\n      /* \n        \u73b0\u5728\u7684\u60c5\u51b5\u662f\u4e00\u4e2a\u6811\u591a\u4e00\u6761\u8fb9\n        \u6240\u4ee5\u6bd4\u8f83\u66b4\u529b\u7684\u65b9\u6cd5\u662f\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\n        \u8dd1\u4e00\u8fb9\u5220\u53bb\u8fd9\u6761\u8fb9\u7684\u7ed3\u679c\n        \u5982\u679c\u80fd\u904d\u5386\u5b8c\u56fe\u4e0a\u7684\u6240\u4ee5\u70b9\u5e76\u4e14\u7ed3\u679c\u7684\u5b57\u5178\u5e8f\u6bd4\u4e4b\u524d\u7684\u6240\u6709\u60c5\u51b5\u5c0f\n        \u5c31\u8bb0\u5f55\u5b83\uff08\u5176\u5b9e\u5c31\u662f\u62ff\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6700\u4f18\u89e3\uff09\n      */ \n      memset(ans,0x3f,sizeof(ans));\n      for(int i=1;i<=m;i++)\n      {\n        x2=b[i].x;\n        y2=b[i].y;\n        //x2,y2\u5206\u522b\u8bb0\u5f55\u6bcf\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\u7ec8\u70b9 \n        memset(R,0x3f,sizeof(R));\n        cnt=0;\n        //cnt\u8bb0\u5f55\u8fd9\u6b21\u904d\u5386\u603b\u5171\u8bbf\u95ee\u4e86\u591a\u5c11\u70b9 \n        memset(v,true,sizeof(v));\n        //\u7528v\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u662f\u5426\u8d70\u8fc7\uff0c\u4e0d\u8981\u8d70\u91cd\u590d\u8def  \n        dfs2(1);\n        if(cnt<n)\n          continue;\n        if(check(n))\n          memcpy(ans,R,sizeof(R));\n      }\n      for(int i=1;i<n;i++)\n        printf(\"%d \",ans[i]);\n      printf(\"%d\\n\",ans[n]);\n    }\n    system(\"pause\");\n    return 0;\n}\n\n```\n",
        "postTime": 1572524256,
        "uid": 148757,
        "name": "wanxiang_zx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "~~\u88ab\u8fd9\u9053\u9898\u5361\u4e86\u597d\u4e45\u4e86\uff0c\u4eca\u5929\u5c31\u6765\u6c34\u4e00\u53d1\u9898\u89e3~~\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u4f60\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u5f00\u59cb\uff0c\u6309\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u904d\u53861~n\uff1a``\u6cbf\u7740\u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u70b9\u7684\u8fb9\u8fdb\u884c\u56de\u6eaf``\uff08\u5f53\u7136\u8d77\u70b9\u662f\u4e0d\u80fd\u56de\u6eaf\u7684\uff09\uff08\u4ee5\u4e0b\u79f0\u4f5c**Way1**\uff09\u6216\u8005``\u6cbf\u7740\u76f8\u8fde\u7684\u4e00\u6761\u8fb9\u5230\u8fbe\u4e00\u4e2a\u672a\u5230\u8fbe\u8fc7\u7684\u70b9``\uff08\u4ee5\u4e0b\u79f0\u4f5c**Way2**\uff09\uff0c\u4f60\u8981\u4f7f\u5f97\u904d\u5386\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\n\n### \u601d\u8def&\u4ee3\u7801\n\n\u672c\u849f\u84bb\u5728\u8fd9\u91cc\u603b\u7ed3\u4e86\u51e0\u4e2adalao\u7684\u60f3\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u8bf4\u8d77\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\u8303\u56f4n\uff08\u70b9\u6570\uff09\u4e0em\uff08\u8fb9\u6570\uff09\u7684\u5173\u7cfb\uff0c\u53ea\u6709\u4e24\u79cd\uff1a\n\n**Case 1** ``n=m+1``\n\n> \u8fd9\u662f\u4e00\u68f5\u6811\n>\n\n**Case 2** ``n=m``\n\n> \u76f8\u5f53\u4e8e\u5728\u4e00\u68f5\u6811\u4e0a\u52a0\u4e86\u4e00\u6761\u8fb9\n>\n\n***\n**Step 1**\n\n\u5148\u6765\u8bb2\u4e00\u8bb2\u6211\u6700\u5f00\u59cb\u7684\u601d\u8def\uff0c\u76f8\u4fe1\u8fd9\u79cd\u6700\u7b80\u5355\u7684\u601d\u8def\u5f88\u597d\u60f3\u5230\n\n**Case2**\u768440pts\u4e0d\u592a\u597d\u5904\u7406\uff0c~~\u6240\u4ee5\u6211\u8f93\u51fa\u4e86WTCL~~\n\n\u6240\u4ee5\u8fd9\u91cc\u5c31\u5148\u53ea\u8003\u8651\u7ed9\u5b9a\u7684\u56fe\u662f\u4e00\u68f5\u6811\u7684\u60c5\u5f62\n\n\u753b\u4e2a\u56fe\u6a21\u62df\u4e00\u4e0b\u5c31\u80fd\u660e\u767d\uff0c\u53ea\u6709\u5c06\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u5b59\u904d\u5386\u5b8c\u4e86\u624d\u80fd\u56de\u6eaf\n\n\u8fd9\u662f\u56e0\u4e3a\u5f53\u4f60\u56de\u6eaf\u8fc7\u540e\uff0c\u56de\u6eaf\u8fc7\u7684\u8fd9\u6761\u8fb9\u5c31\u65ad\u5f00\u4e86\uff0c\u4e0b\u9762\u5c0f\u5c0f\u7684\u8bc1\u660e\u4e00\u4e0b\n\n```\n\u5df2\u77e5\uff1a\u7b2c\u4e00\u6b21\u5230\u8fbey\u8282\u70b9\u7684\u8fb9\u4e3ax->y\u3002\n\u6c42\u8bc1\uff1a\u5f53y\u8282\u70b9\u6cbf\u8fb9y->x\u56de\u6eaf\u540e\u8fd9\u6761\u8fb9\u4e0d\u4f1a\u88ab\u7ecf\u8fc7\n\n\u8bc1\u660e\u5982\u4e0b\uff1a\n\u5982\u679c\u5230\u8fbe\u4e86y\u70b9\uff0c\u90a3\u4e48\u8bf4\u660ex\u3001y\u5747\u5df2\u904d\u5386\n\n\u90a3\u4e48\u4fbf\u4e0d\u80fd\u4ee5Way2\u5f62\u5f0f\u7ecf\u8fc7x<->y\u8fd9\u6761\u8fb9\n\n\u552f\u4e00\u53ef\u80fd\u6027\u662f\u4ecex\u70b9\u518d\u6b21\u5230\u8fbey\u70b9\u5e76\u5728y\u70b9\u4ee5Way1\u65b9\u5f0f\u56de\u6eaf\n\n\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u5b58\u5728\u53e6\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u4ecex\u5230y\n\n\u8fd9\u4e0e\u7ed9\u5b9a\u7684\u56fe\u662f\u4e00\u68f5\u6811\u77db\u76fe\uff0cQ.E.D\n```\n\n\u5c31\u662f\u8bf4\u8fd9\u91cc\u95ee\u9898\u5c31\u53d8\u6210\u4e86dfs\uff0c\u4e0d\u8fc7\u5728\u4e8e\u904d\u5386\u5b50\u8282\u70b9\u7684\u987a\u5e8f\n\n\u4e3a\u4e86\u4f7f\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5f53\u7136\u5148\u904d\u5386\u7f16\u53f7\u5c0f\u7684\u513f\u5b50\n\n\u8fd9\u91cc\u91c7\u7528``vector``\u5b58\u5165\u5b50\u8282\u70b9\uff0c\u5728dfs\u4e4b\u524d\u5c06\u513f\u5b50\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u5148\u5e8f\u904d\u5386\n\n\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2logn)$\uff0c\u9884\u8ba1\u5f97\u520640pts\n\n\u4f46\u662f\u597d\u50cf#11~#15\u5361\u5361\u5e38\u5c31\u53ef\u4ee5\u8fc7\uff0c\u9884\u8ba1\u5f97\u520660pts\n\n\u5176\u5b9e\u4f18\u5316\u6392\u5e8f\u540e\u662f\u53ef\u4ee5\u4f18\u5316\u5230$O(mlogm)$\u7684\uff0c\u5177\u4f53\u600e\u4e48\u505a\u5728\u6700\u540e\u4e00\u6b65\u8bb2\n\n~~\u5927\u4f6c\u8bf4\u53ef\u4ee5$O(n)$\u5efa\u56fe~~\n\n\u8d34\u4e00\u6ce2\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(1)\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <queue>\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nstruct node{\n\tint fr,to,nxt;\n\tnode(int F,int T,int NN):fr(F),to(T),nxt(NN){}\n\tnode(){}\n} e[N];\nbool vis[N];\nvector <int> son[N];\npriority_queue <int> Q;\nint n,m,x,y,cnt,d[N],fa[N],come[N],head[N];\ninline char my_getchar(){\n    static char buf[2048];\n    static int size=0,pos=0;\n    if(size==pos){\n        pos=0;\n        size=fread(buf,1,2048,stdin);\n        if(!size) return EOF;\n        else return buf[pos++];\n    }\n    else return buf[pos++];\n}\ninline int FR(){//fast_read\n    int ans=0,fh=0;\n    char c=my_getchar();\n    while(!isdigit(c)){\n        fh|=c=='-';\n        c=my_getchar();\n    }\n    while(isdigit(c)) ans=(ans<<1)+(ans<<3)+(c^48),c=my_getchar();\n    return fh?-ans:ans;\n}\ninline void ins(int a,int b){\n\te[++cnt]=node(a,b,head[a]);\n\thead[a]=cnt;\n}\nvoid dfs1(int cur,int pre){\n\tfa[cur]=pre;\n\tfor(rnt i=head[cur];i;i=e[i].nxt) if(e[i].to!=pre){\n\t\tson[cur].push_back(e[i].to);\n\t\tdfs1(e[i].to,cur);\n\t}\n}\nvoid dfs2(int x){\n\td[++d[0]]=x;\n\tsort(son[x].begin(),son[x].end());\n\tfor(rnt i=0;i<(int)son[x].size();i=-~i) dfs2(son[x][i]);\n}\nint main(){\n\tn=FR(),m=FR();\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tx=FR(),y=FR();\n\t\tins(x,y);ins(y,x);\n\t}\n\tif(m==n-1){\n\t\tdfs1(1,-1);\n\t\tdfs2(1);\n\t\tfor(rnt i=1;i<=d[0];i=-~i) printf(\"%d \",d[i]);\n\t}\n\telse printf(\"WTCL\");\n\treturn 0;\n}\n```\n***\n**Step 2**\n\n\u63a5\u4e0b\u6765\u5c31\u6765\u8bb2\u600e\u4e48\u5904\u7406\u5269\u4f5940pts\n\n\u524d\u9762\u8bf4\u5230\u8fd9\u91cc\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u52a0\u4e00\u6761\u8fb9\uff0c\u5b9e\u9645\u4e0a\u8fd9\u79cdn=m\u7684\u56fe\u662f\u6709\u540d\u5b57\u7684\uff1a**\u57fa\u73af\u6811**\n\n\u7531\u4e8e\u57fa\u73af\u6811\u662f\u5728\u6811\u4e0a\u53ea\u52a0\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u53ea\u6709\u4e00\u4e2a\u73af\n\n\u57fa\u73af\u6811\u7684\u6027\u8d28\u6211\u7559\u5230\u6700\u540e\uff0c\u5148\u4ecb\u7ecd\u4e00\u79cd\u6bd4\u8f83\u66b4\u7684\u7b97\u6cd5\uff1a\u5220\u8fb9\n\n\u7ec6\u5fc3\u7684\u5c0f\u4f19\u4f34\u4eec\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff1a\u73af\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u672a\u7ecf\u8fc7\n\n\u8fd9\u662f\u56e0\u4e3a\u73af\u4e0a\u7684\u70b9\u662f\u6cbf\u4e00\u4e2a\u65b9\u5411\u62d3\u5c55\u7684\uff08\u5982\u679c\u6709\u56de\u6eaf\u4e5f\u53ea\u662f\u53cd\u5411\u4e86\uff09\uff0c\u4e0d\u53ef\u80fd\u8df3\u8fc7\u4e00\u4e9b\u672a\u8bbf\u95ee\u7684\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u8fd9\u6837\u5c31\u8bf4\u660e\u4e0d\u6b62\u4e00\u4e2a\u73af\uff0c\u53c8\u4e0e\u9898\u76ee\u77db\u76fe\u4e86\n\n\u6240\u4ee5\u5982\u679c\u73af\u4e0a\u7684\u6bcf\u6761\u8fb9\u90fd\u7ecf\u8fc7\u4e86\uff0c\u5fc5\u7136\u662f\u4e00\u4e2a\u70b9\u6cbf\u7740\u4e0e\u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u70b9\u7684\u8fb9\u4e0d\u91cd\u5408\u7684\u8fb9\u5230\u8fbe\u4e86\u4e00\u4e2a\u5230\u8fbe\u8fc7\u7684\u70b9\uff0c\u4e0e**Way2**\u77db\u76fe\n\n\u53ef\u80fd\u8fd9\u4e48\u8bf4\u6709\u70b9\u7ed5\uff0c\u90a3\u4e48\u4e0d\u59a8\u8fd9\u4e48\u7406\u89e3\n\n\u5047\u8bbe\u73af\u4e0a\u6240\u6709\u8fb9\u90fd\u88ab\u7ecf\u8fc7\uff0c\u8bbe\u6700\u540e\u4e00\u6761\u7ecf\u8fc7\u7684\u8fb9\u662fx<->y\uff0c\u4ecex\u51fa\u53d1\uff0c\n\n\u8fd9\u6761\u8fb9\u663e\u7136\u4e0d\u662f\u7b2c\u4e00\u6b21\u5230\u8fbex\u7684\u8fb9\uff0c\u4e0d\u80fd\u5229\u7528**Way1**\u56de\u6eaf\u81f3y\n\n\u800cy\u4e00\u5b9a\u88ab\u5230\u8fbe\u8fc7\uff08y\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u73af\u4e0a\u6709\u4e24\u6761\u8fb9\u4e0ey\u76f8\u8fde\uff0c\u5982\u679cy\u672a\u5230\u8fbe\uff0c\u5219x<->y\u4e0d\u662f\u73af\u4e0a\u6700\u540e\u4e00\u6761\u8fb9\uff0cy<->?\u4e5f\u6ca1\u7ecf\u8fc7\uff09\n\n\u6240\u4ee5\u4e5f\u4e0d\u80fd\u7528**Way2**\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\n\n\u5373\uff1a\u73af\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u6ca1\u6709\u88ab\u7ecf\u8fc7\n\n\u6240\u4ee5\u6211\u4eec\u8981\u8fd9\u6761\u8fb9\u5e72\u5565\uff1f\u5220\u4e86\u554a\uff01\n\n\u7136\u540e--m.....\n\nn=m-1\n\n\u95ee\u9898\u53c8\u8f6c\u5316\u4e3a\u4e86**Case1**\uff0c\u5feb\u4e50\uff01\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5148\u627e\u51fa\u73af\uff08\u6211\u7528\u7684\u662ftopsort\uff09\uff0c\u7136\u540e\u679a\u4e3e\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5220\u6389\uff0c\u66f4\u65b0\u7b54\u6848\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nmlogn)$\uff0c\u9884\u8ba1\u5f97\u520688pts\uff08#23~#25 TLE\uff09\n\n\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f18\u5316\u5efa\u56fe\uff0c\u5361\u4e2a\u5e38\uff0c\u5f00\u4e2a$O_2$\uff0c\u5c31\u80fd\u8fc7\u4e86\u3002\u3002\u3002\n\n\u867d\u7136\u6211\u5931\u8d25\u4e86\uff0c\u4f46\u662f\u65e0\u6570\u5927\u4f6c\u8bc1\u660e\u8fd9\u662f\u53ef\u4ee5\u8fc7\u7684\n\n\u8d34\u4e00\u4e0b\u6211\u4e11\u964b\u7684\u4ee3\u7801:\n```cpp\n#include <queue>\n#include <vector>\n#include <cctype>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nstruct node{\n\tint fr,to,nxt;\n\tnode(int F,int T,int NN):fr(F),to(T),nxt(NN){}\n\tnode(){}\n} e[N];\nvector <int> son[N];\npriority_queue <int> Q;\nbool vis[N],notin[N],saw[N],dfn[N],canari[N][N];\nint n,m,x,y,cnt,d[N],fa[N],ind[N],res[N],come[N],head[N];\ninline char my_getchar(){\n    static char buf[2048];\n    static int size=0,pos=0;\n    if(size==pos){\n        pos=0;\n        size=fread(buf,1,2048,stdin);\n        if(!size) return EOF;\n        else return buf[pos++];\n    }\n    else return buf[pos++];\n}\ninline int FR(){//fast_read\n    int ans=0,fh=0;\n    char c=my_getchar();\n    while(!isdigit(c)){\n        fh|=c=='-';\n        c=my_getchar();\n    }\n    while(isdigit(c)) ans=(ans<<1)+(ans<<3)+(c^48),c=my_getchar();\n    return fh?-ans:ans;\n}\ninline void ins(int a,int b,int op){\n\tif(op==0){\n\t\t++cnt;\n\t\te[cnt]=node(a,b,head[a]);\n\t\thead[a]=cnt;\n\t}\n\telse{\n\t\tcnt=cnt+m;\n\t\te[cnt]=node(a,b,head[a]);\n\t\thead[a]=cnt;\n\t\tcnt-=m;\n\t}\n}\nvoid dfs(int id){\n\tres[++res[0]]=id;dfn[id]=true;\n\tfor(rnt i=1;i<=n;i=-~i) if(canari[id][i] && !dfn[i]) dfs(i);\n\tdfn[id]=false;\n}\nvoid dfs1(int cur,int pre){\n\tfa[cur]=pre;\n\tfor(rnt i=head[cur];i;i=e[i].nxt) if(e[i].to!=pre){\n\t\tson[cur].push_back(e[i].to);\n\t\tdfs1(e[i].to,cur);\n\t}\n}\nvoid dfs2(int x){\n\td[++d[0]]=x;\n\tfor(rnt i=0;i<(int)son[x].size();i=-~i) dfs2(son[x][i]);\n}\ninline void Topsort(){\n\tqueue <int> QQ;\n\tfor(rnt i=1;i<=m;i=-~i) ++ind[e[i].fr],++ind[e[i].to];\n\tfor(rnt i=1;i<=n;i=-~i) if(ind[i]==1){notin[i]=true;QQ.push(i);}\n\twhile(!QQ.empty()){\n\t\tint u=QQ.front();\n\t\tQQ.pop();\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(--ind[v]==1){notin[v]=true;QQ.push(v);}\n\t\t}\n\t}\n}\ninline void update(){\n\tif(!d[0]) memcpy(d,res,sizeof(res));\n\telse{\n\t\tbool flag=false;\n\t\tfor(rnt i=1;i<=d[0];i=-~i){\n\t\t\tif(!flag && d[i]<res[i]) break;\n\t\t\telse if(flag) d[i]=res[i];\n\t\t\tif(d[i]>res[i]) flag=true,d[i]=res[i];\n\t\t}\n\t}\n}\nint main(){\n\tn=FR(),m=FR();\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tx=FR(),y=FR();\n\t\tins(x,y,0);ins(y,x,1);\n\t}\n\tif(m==n-1){\n\t\tdfs1(1,-1);\n\t\tfor(rnt i=1;i<=n;i=-~i) sort(son[i].begin(),son[i].end());\n\t\tdfs2(1);\n\t}\n\telse{\n\t\tTopsort();\n\t\tfor(rnt i=1;i<=m;i=-~i){\n\t\t\tint xx=e[i].fr,yy=e[i].to;\n\t\t\tcanari[xx][yy]=canari[yy][xx]=true;\n\t\t}\n\t\tfor(rnt i=1;i<=m;i=-~i){\n\t\t\tint xx=e[i].fr,yy=e[i].to;\n\t\t\tif(notin[xx] || notin[yy]) continue;\n\t\t\tcanari[xx][yy]=canari[yy][xx]=false;\n\t\t\tres[0]=0;\n\t\t\tdfs(1);\n\t\t\tupdate();\n\t\t\tcanari[xx][yy]=canari[yy][xx]=true;\n\t\t}\n\t}\n\tfor(rnt i=1;i<=d[0];i=-~i) printf(\"%d \",d[i]);\n\treturn 0;\n}\n```\n\n***\n**Step3**\n\n\u5f53\u6211\u65e0\u610f\u95f4\u53d1\u73b0\u4e00\u4efd\u8dd1\u8fdb\u4e86100ms\u7684\u4ee3\u7801\u65f6\uff0c\u6211\u60ca\u5446\u4e86\uff01\n\n\u800c\u4e14100ms\u662f\u603b\u65f6\u95f4\uff01\uff01\n\n\u5176\u5b9e\u9898\u89e3\u91cc\u6709\uff0c\u582a\u79f0\u5b8c\u7f8e\uff0c\u8fd9\u91cc\u5c31\u7a0d\u5fae\u8865\u5145\u4e00\u4e0b\n\n\u9996\u5148\u662f\u5bf9\u4e8e\u5efa\u8fb9\u7684\u4f18\u5316$O(mlogm)$\n\n\u8bfb\u5165\u65f6\u5148\u9884\u5b58\u6bcf\u4e00\u6761\u8fb9\uff08\u5355\u5411\uff0cx->y\u3001y->x\uff09\uff0c\u7136\u540e\u6309\u6307\u5411\u7684\u70b9\u7684\u7f16\u53f7\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6700\u540e\u6309\u7167\u987a\u5e8f\u524d\u5411\u661f\u5b58\u8fb9\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5728\u7528\u524d\u5411\u661f\u65f6\u904d\u5386\u5230\u7684\u8282\u70b9\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff09\n\n\u7136\u540e\u5c31\u662f\u600e\u4e48\u8dd1\u5f97\u66f4\u5feb\u4e86\n\n\u9996\u5148\u660e\u786e\u8fd9\u9053\u9898\u662f\u5b58\u5728\u8d2a\u5fc3\u601d\u60f3\u7684\n\n\u5f53\u4f60\u8981\u9009\u62e9\u4e0b\u4e00\u4e2a\u904d\u5386\u7684\u70b9\u65f6\uff0c\u80af\u5b9a\u662f\u5728\u53ef\u884c\u8303\u56f4\u5185\u5bfb\u627e\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\n\n\u800c\u4e14\u5728\u73af\u4e0a\u6700\u591a\u56de\u6eaf\u4e24\u6b21\n\n\u8fd9\u662f\u56e0\u4e3a\u5728\u73af\u4e0a\u65f6\u4e00\u4e2a\u70b9\u8fde\u7740\u4e24\u6761\u8fb9\uff0c\u5f53\u4f60\u7b2c\u4e8c\u6b21\u56de\u6eaf\u540e\u5230\u8fbe\u7b2c\u4e00\u6b21\u8fdb\u5165\u73af\u7684\u70b9\u65f6\uff0c\u5b83\u7684\u4e24\u6761\u8fb9\u8fde\u63a5\u7684\u70b9\u90fd\u8d70\u8fc7\u4e86\uff0c\u5c31\u4e0d\u80fd\u63a5\u7740\u904d\u5386\u73af\u4e86\uff0c\u56e0\u800c\u4e5f\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e09\u6b21\u56de\u6eaf\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u4e8c\u6b21\u56de\u6eaf\uff0c\u73af\u4e0a\u7684\u70b9\u5c31\u5df2\u7ecf\u904d\u5386\u5b8c\u6210\u4e86\n\n\u8fd9\u91cc\u8fd8\u8981\u5c0f\u5c0f\u8865\u5145\u4e00\u4e0b**\u57fa\u73af\u6811**\n\n\u987e\u540d\u601d\u4e49\uff0c\u57fa\u73af\u6811\u5c31\u662f\u6307\u4ee5\u4e00\u4e2a\u73af\u4e3a\u57fa\u7840\u7684\u6811\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u57fa\u73af\u6811\u662f\u6307``\u5c06\u82e5\u5e72\u68f5\u65e0\u5411\u7684\u6811\u7684\u6839\u8282\u70b9\u4f9d\u6b21\u8fde\u63a5\u6210\u73af\u5f62\u6210\u7684\u56fe\u5f62``\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73af\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u770b\u505a\u662f\u6811\u6839\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u5229\u7528**Step1**\u7684\u505a\u6cd5\u5373\u53ef\uff0c\u91cd\u70b9\u8fd8\u662f\u5728\u4e8e\u73af\n\n\u4e4b\u524d\u8bb2\u5230\u8fc7\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5728\u904d\u5386\u5b8c\u5b83\u7684\u5b50\u5b59\u4e4b\u524d\u662f\u4e0d\u80fd\u56de\u6eaf\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8e**Case2**\u4e2d\u6839\u8282\u70b9\u4f4d\u4e8e\u73af\u4e0a\uff0c\u53ef\u4ee5\u6682\u65f6\u4e0d\u904d\u5386\u5b83\u7684\u5b50\u5b59\n\n\u6211\u518d\u7528\u5b57\u6bcd\u91cd\u65b0\u53d9\u8ff0\u4e00\u4e0b\n\n\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9x\uff0c\u5047\u8bbe\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\u4e2d\uff0c\u7f16\u53f7\u6700\u5c0f\u7684\u4e3ay\n\n\u5982\u679cy\u5728\u73af\u4e0a\uff0c\u5c31x->y\uff0c\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u56de\u6eaf\u5230x\u65f6\u518d\u904d\u5386x\u7684\u5176\u5b83\u76f8\u8fde\u70b9\n\n\u5982\u679cy\u4e0d\u5728\u73af\u4e0a\uff0c\u904d\u5386\u5b83\u4ee5\u53ca\u5b83\u7684\u5b50\u5b59\uff0c\u7136\u540e\u5c06y\u4fee\u6539\u4e3a\u4e0ex\u76f8\u8fde\u7684\u6b21\u5c0f\u503c\n\n\u4e3e\u4e2a\u6817\u5b50\u5927\u5bb6\u7406\u89e3\u4e00\u4e0b\uff08\u5c31\u662f\u6837\u4f8b2\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/grhyxkjv.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u9996\u5148\u80af\u5b9a\u4ece1\u5f00\u59cb\uff0c\uff08\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4ece1\u5f00\u59cb\u4e00\u5b9a\u53ef\u4ee5\u904d\u5386\u6574\u68f5\u57fa\u73af\u6811\uff1f\uff09\n\n\u7136\u540e\u8d70\u52303 $ans[]={1,3}$\n\n\u4e0e3\u76f8\u8fde\u7684\u70b9\u67092\u30014\uff0c\u8d2a\u5fc3\u9009\u62e92 $ans[]={1,3,2}$\n\n2\u53ea\u80fd\u8d70\u52305 $ans[]={1,3,2,5}$\n\n5\u53ea\u80fd\u8d70\u52304 $ans[]={1,3,2,5,4}$\n\n\u6700\u540e\u52306 $ans[]={1,3,2,5,4,6}$\n\n\u8fd9\u5c31\u662f\u6700\u57fa\u672c\u7684\u601d\u8def\n\n\u518d\u4e3e\u4e00\u4e2a\u590d\u6742\u4e00\u70b9\u7684\u4f8b\u5b50\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1b11yqhd.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8fd8\u662f\u4ece1\u5f00\u59cb $ans[]={1}$\n\n\u53ea\u80fd\u8d70\u52302 $ans[]={1,2}$\n\n\u4e0e2\u76f8\u8fde\u7684\u67094\u300112\uff0c\u8d2a\u5fc3\u9009\u62e94 $ans[]={1,2,4}$\n\n\u4e0e4\u76f8\u8fde\u7684\u7684\u67095\u300111\uff0c\u8d2a\u5fc3\u9009\u62e95 $ans[]={1,2,4,5}$\n\n\u8fd9\u65f6\u6807\u8bb0$last=11$\uff0clast\u8bb0\u4e0b\u4e86\u4e0b\u4e00\u6b21\u5982\u679c\u56de\u6eaf\u5c06\u9047\u523011\uff0c\u90a3\u4e48\u6bcf\u6b21\u62d3\u5c55\u65f6last\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e0e\u5f53\u524d\u70b9\u76f8\u8fde\n\n\u5e76\u4e14\u5c06\u6240\u6709\u8fd9\u6837\u672a\u8bbf\u95ee\u7684\u70b9\u52a0\u5165\u5806\uff0c\u8fd9\u65f6\u56e0\u4e3a\u4e00\u65e6\u56de\u6eaf\uff0c\u9014\u5f84\u7684\u73af\u4e0a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u70b9\uff08\u5c31\u662f\u8fd9\u68f5\u6811\uff09\u5fc5\u987b\u8981\u88ab\u8bbf\u95ee\u5b8c\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u88ab\u8bbf\u95ee\uff0c\n\n\u6240\u4ee5\u6b64\u65f6\u5bf9\u4e8e\u5806\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884cdfs\n\n\u90a3\u4e48\u73b0\u5728\u7684\u72b6\u6001\u662f $ans={1,2,4,5};last=11;stack[]={11}$\n\n\u4e0e5\u76f8\u8fde\u7684\u70b9\u67093\u30016\u30017\u300111\uff0c\u8d2a\u5fc3\u9009\u62e93 $ans[]={1,2,4,5,3};last=11,stack[]={11}$\n\n\u7531\u4e8e3\u4e0d\u5728\u73af\u4e0a\uff0c\u56de\u6eaf\u81f3\u73af\u4e0a\u7684\u70b95\uff0c\u8fd8\u5269\u4e0b\u76f8\u8fde\u7684\u70b9\u67096\u30017\u300111\n\n\u540c\u7406\u8bbf\u95ee6\uff0c\u5e76\u56de\u6eaf\u81f35\uff0c\u5269\u4f597\u300111 $ans[]={1,2,4,5,3,6};last=11,stack[]={11}$\n\n\u8bbf\u95ee7,7\u5728\u73af\u4e0a $ans[]={1,2,4,3,5,6,7};last=11,stack[]={11}$\n\n\u76f8\u8fde\u7684\u70b9\u67099\u300111\u300112 $ans[]={1,2,4,3,5,6,7,9};last=11;stack[]={11}$\n\n\u8bbf\u95ee9\uff0c\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u8bbf\u95ee\u4e869\uff0c\u5c31\u5fc5\u987b\u8bbf\u95ee\u5b83\u7684\u5b50\u5b59 $ans[]={1,2,4,3,5,6,7,9,13};last=11;satck[]={11}$\n\n\u7136\u540e\u8bbf\u95eelast=11\uff0c\u7531\u4e8e\u8bbf\u95ee\u4e86last\uff0c\u76f8\u5f53\u4e8e\u56de\u6eaf\u4e86\uff0c\u6240\u4ee5\u5bf9\u4e8estack\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4f9d\u6b21dfs\uff0c\u5f97\u5230$ans[]={1,2,4,3,5,6,7,9,11,8};stack[]={EMPTY}$\n\nlast\u88ab\u8bbf\u95ee\u540e\uff0c\u5c31\u5e94\u88ab\u6e05\u4e3a\u6b63\u65e0\u7a77\uff0c\u4e00\u9762\u4e0d\u5fc5\u8981\u7684\u56de\u6eaf\n\n\u56de\u6eaf\u81f31\uff0c\u8bbf\u95ee12\u300110 $ans[]={1,2,4,3,5,6,7,9,11,8,12,10}$\n\n\u6700\u540e\u603b\u7ed3\u4e00\u4e0b\n\n\u9996\u5148\u4ece1\u5f00\u59cbdfs\uff0c\u76f4\u5230\u627e\u5230\u73af\u4e0a\u7684\u70b9\uff0c\u5982\u679c\u6700\u5c0f\u70b9\u4e0d\u5728\u73af\u4e0adfs\uff0c\uff08\u5982\u679c\u56de\u6eaf\u83b7\u5f97\u6700\u5c0f\u70b9\u5c31\u56de\u6eaf\uff0c\u5e76\u4e14\u6e05\u7a7astack\uff08\u7528\u4e8e\u5b58\u50a8\u7b49\u5f85\u904d\u5386\u7684\u70b9\uff09\uff09\uff0c\u5e76\u6539\u4e3a\u627e\u6b21\u5c0f\u70b9\uff0c\u5982\u679c\u5728\u73af\u4e0a\u5c31\u628a\u5269\u4f59\u7684\u70b9\u5165\u6808\uff0c\u5e76\u5728\u73af\u4e0a\u62d3\u5c55\n\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n1.\u7531\u4e8e\u5165\u6808\u65f6\u662f\u4ece\u5c0f\u5230\u5927\u904d\u5386\u7684\uff0c\u51fa\u6808\u5c31\u53d8\u6210\u4e86\u4ece\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u8981\u5728\u6bcf\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\u7684\u6240\u6709\u9700\u8981\u5165\u6808\u7684\u70b9\u5165\u6808\u540e\uff0c\u518d\u628a\u6808\u4e2d\u6240\u6709\u70b9\u79fb\u5165\u53e6\u4e00\u4e2a\u6808\n\n\u8fd9\u4e48\u505a\u8fd8\u6709\u53e6\u4e00\u4e2a\u539f\u56e0\uff1a\u90a3\u5c31\u662f\u540e\u904d\u5386\u5230\u7684\u73af\u4e0a\u70b9\u5728\u56de\u6eaf\u65f6\u4f1a\u5148\u88ab\u904d\u5386\uff0c\u6240\u4ee5\u5f00\u4e24\u4e2a\u6808\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\n\n2.\u5728\u627e\u4e0e\u5176\u76f8\u8fde\u7684\u6700\u5c0f\u503c\u662f\u53ef\u4ee5\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u662f\u5426\u627e\u5230\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u5728\u8fd9\u4e4b\u540e\u904d\u5386\u5230\u7684\u4e00\u5b9a\u90fd\u6bd4\u73af\u4e0a\u8fd9\u4e2a\u70b9\u7f16\u53f7\u5927\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\n\n3.\u6bcf\u4e2a\u73af\u4e0a\u70b9\u7684\u76f8\u8fde\u70b9\u904d\u5386\u5b8c\u540e\u8981\u5224\u65ad\u662f\u5426\u56de\u6eaf\uff0c\u5982\u679c\u4e0d\u56de\u6eaf\u5c31\u8981\u628a\u5c0f\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u51fa\u6808\u5e76\u5165\u603b\u6808\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n\n```cpp\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nqueue <int> Q;\nstack <int> S1,S2;\nbool found,nir[N]/*Not In the Ring*/,vis[N]/*Visited*/;\nint n,m,x,y,cnt,rl/*Ring Last*/=1<<30,rn/*Ring Next*/,ind[N],head[N];\nstruct Edge_pre{\n\tint x,y;\n\tEdge_pre(int X,int Y):x(X),y(Y){}\n\tEdge_pre(){}\n\tbool operator<(const Edge_pre&t)const{return y>t.y;}\n} e_pre[N*2]/*N*2 to avoid Unaccepted Error*/;\nstruct Edge{\n\tint to,nxt;\n\tEdge(int X,int Y):to(X),nxt(Y){}\n\tEdge(){}\n} e[N*2]/*N*2 to avoid Unaccepted Error*/;\ninline void ins(int x,int y){\n\te[++cnt]=Edge(y,head[x]);\n\thead[x]=cnt;\n}\ninline void Topsort(){\n\tfor(rnt i=1;i<=n;i=-~i) if(ind[i]==1) nir[i]=true,Q.push(i);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(nir[v]) continue;\n\t\t\tif(--ind[v]==1) nir[v]=true,Q.push(v);\n\t\t}\n\t}\n}\nvoid dfs(int x){\n\tif(!vis[x]) printf(\"%d \",x),vis[x]=true;\n\tfor(rnt i=head[x];i;i=e[i].nxt){\n\t\tint y=e[i].to;\n\t\tif(!vis[y]) dfs(y);\n\t}\n}\nvoid bfs(int x){\n\twhile(!Q.empty()) Q.pop();\n\tQ.push(x);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tif(!vis[u]) printf(\"%d \",u),vis[u]=true;\n\t\trn=0;found=false;\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tif(found) S2.push(v);\n\t\t\telse if(nir[v]) dfs(v);\n\t\t\telse rn=v,found=true;\n\t\t}\n\t\tif(rn){\n\t\t\tQ.push(rn);\n\t\t\tif(S2.empty()){\n\t\t\t\tif(rl<rn) while(!S1.empty())\n\t\t\t\t\tdfs(S1.top()),S1.pop();\n\t\t\t}\n\t\t\telse while(!S2.empty())\n\t\t\t\tS1.push(rl=S2.top()),S2.pop();\n\t\t}\n\t\telse while(!S1.empty())\n\t\t\tdfs(S1.top()),S1.pop();\n\t}\n}\nvoid WorkAt(int x){\n\tif(!nir[x]){bfs(x);dfs(x);}//If x is in the ring\n\telse{//else\n\t\tprintf(\"%d \",x);vis[x]=true;\n\t\tfor(rnt i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].to;\n\t\t\tif(!vis[y]) WorkAt(y);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tind[x]=-~ind[x];\n\t\tind[y]=-~ind[y];\n\t\te_pre[i*2]=Edge_pre(x,y);\n\t\te_pre[i*2-1]=Edge_pre(y,x);\n\t}\n\tsort(e_pre+1,e_pre+2*m+1);//To run faster\n\tfor(rnt i=1;i<=2*m;i=-~i) ins(e_pre[i].x,e_pre[i].y);\n\tTopsort();//To get if each point is in the ring\n\tWorkAt(1);//Find the answer beginning with 1\n\treturn 0;\n}\n```\n\n\u5e94\u8be5\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u53e6\u5916\u7531\u4e8eWorkAt\u51fd\u6570\uff0c\u8fd9\u4efd\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4e00\u5e76\u5904\u7406n=m+1\u7684\u60c5\u51b5\uff08\u56e0\u4e3a\u6ca1\u6709\u73af\u7684\u60c5\u51b5\u4e0b\u5b83\u5176\u5b9e\u5c31\u662fdfs\uff0c\u8fd9\u662f\u4e3a\u4e86\u4ece1\u5f00\u59cb\u800c\u6253\u7684\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u8bfb\u5165$O(m)$\n\n\u5efa\u8fb9$O(mlogm)$\n\ntopsort\u627e\u73af$O(n)$\n\n\u7b54\u6848$O(n)$\n\n\u7efc\u5408$O(n+m+mlogm)$\n\n\u53ef\u4ee5\u8bf4\u662f\u975e\u5e38\u5feb\u4e86\n\n\u611f\u8c22\u6536\u770b\uff01\n\n[![](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2921431843,3149119026&fm=26&gp=0.jpg)](https://www.luogu.org/blog/oneJURUO/)",
        "postTime": 1570096332,
        "uid": 118382,
        "name": "torque",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u524d60\u5206\u662f\u7528\u6765\u542f\u53d1\u9009\u624b\u5f97\u5230\u6b63\u89e3\u601d\u8def\u7684\n\n\u81f3\u4e8e\u6ee1\u5206\u505a\u6cd5\u7684\u627e\u73af\u8fc7\u7a0b\uff0c\u8003\u8651\u6709\u8fd4\u56de\u503c\u7684DFS\n\n\u4e86\u89e3\u4e0b\u540c\u65f6\u8bbf\u95ee\u90bb\u63a5\u8868\u6b63\u8fb9\u548c\u53cd\u8fb9\u7684\u9ed1\u79d1\u6280\uff08\u7f51\u7edc\u6d41\u5e38\u7528\n\n\u7136\u540e\u4ece\u4e00\u70b9DFS\uff0c\u5728\u641c\u7d22\u6808\u4e2d\u7684vis\u7f6e1\uff0c\u5982\u679c\u4ece\u67d0\u70b9\u53d1\u51fa\u7684\u8fb9\u4e0d\u8fde\u5411\u4e0a\u4e00\u4e2a\u70b9\u4e14\u8be5\u70b9\u5728\u6808\u4e2d\uff0c\u90a3\u4e48\u4f60\u5c31\u627e\u5230\u8fdb\u5165\u73af\u7684\u90a3\u4e2a\u70b9\u4e86\n\n\u5bf9\u4e8eDFS\u4e0b\u4e2a\u70b9\u8fd4\u56de1\u4e14\u4e0d\u4e3a\u8fdb\u5165\u73af\u7684\u90a3\u4e2a\u70b9\uff0c\u7ed9\u6b63\u53cd\u8fb9\u6253\u4e2a\u6807\u8bb0\u8d2a\u5fc3\u4e00\u904d\u53bb\u6389\u6807\u8bb0return 1\n\n\u8d2a\u5fc3\u6392\u5e8f\u53ef\u4ee5\u8003\u8651vector\n\n```cpp\n#include\"cstdio\"\n#include\"cstring\"\n#include\"iostream\"\n#include\"algorithm\"\n#include\"vector\"\nusing namespace std;\n\nconst int MAXN=5005;\n\nint n,m,np=1,st;\nint h[MAXN],ans[MAXN],stk[MAXN];\nbool vis[MAXN];\nstruct rpg{\n    int li,nx;\n    bool vis;\n}a[MAXN<<1];\n\nvoid add(int ls,int nx)\n{\n    a[++np]=(rpg){h[ls],nx};h[ls]=np;\n    a[++np]=(rpg){h[nx],ls};h[nx]=np;\n}\n\nvoid dfs1(int x,int fa)\n{\n    stk[++stk[0]]=x;\n    vector<int> q;q.clear();\n    for(int i=h[x];i;i=a[i].li){\n        if(a[i].nx==fa) continue;\n        if(a[i].vis) continue;\n        q.push_back(a[i].nx);\n    }sort(q.begin(),q.end());\n    for(int i=0;i<q.size();++i) dfs1(q[i],x);\n    return;\n}\n\nvoid slv1()\n{\n    dfs1(1,1);\n    for(int i=1;i<=n;++i) printf(\"%d \",stk[i]);\n    return;\n}\n\nbool check(int *a,int *b)\n{\n    for(int i=1;i<=n;++i){\n        if(a[i]>b[i]) return 1;\n        if(a[i]<b[i]) return 0;\n    }return 0;\n}\n\nbool dfs2(int x,int fa)\n{\n    vis[x]=1;\n    for(int i=h[x];i;i=a[i].li){\n        if(a[i].nx==fa) continue;\n        if(vis[a[i].nx]){\n            st=a[i].nx;\n            a[i].vis=a[i^1].vis=1;\n            dfs1(1,1);\n            for(int j=1;j<=n;++j) ans[j]=stk[j];\n            a[i].vis=a[i^1].vis=0;\n            return 1;\n        }if(dfs2(a[i].nx,x)&&a[i].nx!=st){\n            a[i].vis=a[i^1].vis=1;\n            stk[0]=0;\n            dfs1(1,1);\n            if(check(ans,stk)) for(int j=1;j<=n;++j) ans[j]=stk[j];\n            a[i].vis=a[i^1].vis=0;\n            return 1;\n        }\n    }return 0;\n}\n\nvoid slv2()\n{\n    dfs2(1,1);\n    for(int i=1;i<=n;++i) printf(\"%d \",ans[i]);\n    return;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i){\n        int x,y;scanf(\"%d%d\",&x,&y);\n        add(x,y);\n    }if(m==n-1){\n        slv1();\n        return 0;\n    }if(m==n){\n        slv2();\n        return 0;\n    }return 0;\n}\n```\n\n\u4e3a\u4e86\u4e0dTLE\uff0c\u6211\u4eec\u5148\u6392\u5e8f\u518d\u52a0\u8fb9\n\n```cpp\n#include\"cstdio\"\n#include\"cstring\"\n#include\"iostream\"\n#include\"algorithm\"\n#include\"vector\"\nusing namespace std;\n\nconst int MAXN=5005;\n\nint n,m,np=1,st;\nint h[MAXN],ans[MAXN],stk[MAXN];\nvector<int> vec[MAXN];\nbool vis[MAXN];\nstruct rpg{\n\tint li,nx;\n\tbool vis;\n}a[MAXN<<1];\n\nvoid add(int ls,int nx)\n{\n\ta[++np]=(rpg){h[ls],nx};h[ls]=np;\n\ta[++np]=(rpg){h[nx],ls};h[nx]=np;\n}\n\nvoid dfs1(int x,int fa)\n{\n\tstk[++stk[0]]=x;\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tif(a[i].nx==fa) continue;\n\t\tif(a[i].vis) continue;\n\t\tdfs1(a[i].nx,x);\n\t}return;\n}\n\nvoid slv1()\n{\n\tdfs1(1,1);\n\tfor(int i=1;i<=n;++i) printf(\"%d \",stk[i]);\n\treturn;\n}\n\nbool check(int *a,int *b)\n{\n\tfor(int i=1;i<=n;++i){\n\t\tif(a[i]<b[i]) return 1;\n\t\tif(a[i]>b[i]) return 0;\n\t}return 0;\n}\n\nbool dfs2(int x,int fa)\n{\n\tvis[x]=1;\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tif(a[i].nx==fa) continue;\n\t\tif(vis[a[i].nx]){\n\t\t\ta[i].vis=a[i^1].vis=1;\n\t\t\tst=a[i].nx;\n\t\t\tdfs1(1,1);\n\t\t\tfor(int j=1;j<=n;++j) ans[j]=stk[j];\n\t\t\ta[i].vis=a[i^1].vis=0;\n\t\t\treturn 1;\n\t\t}if(dfs2(a[i].nx,x)&&st!=a[i].nx){\n\t\t\ta[i].vis=a[i^1].vis=1;\n\t\t\tstk[0]=0;\n\t\t\tdfs1(1,1);\n\t\t\tif(check(stk,ans)) for(int j=1;j<=n;++j) ans[j]=stk[j];\n\t\t\ta[i].vis=a[i^1].vis=0;\n\t\t\treturn 1;\n\t\t}\n\t}vis[x]=0;\n\treturn 0;\n}\n\nvoid slv2()\n{\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;++i) printf(\"%d \",ans[i]);\n\treturn;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i){\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\tvec[x].push_back(y);\n\t\tvec[y].push_back(x);\n\t}for(int i=1;i<=n;++i) sort(vec[i].begin(),vec[i].end());\n\tfor(int i=n;i;--i){\n\t\tfor(int j=vec[i].size()-1;j>=0;--j){\n\t\t\tif(vec[i][j]>i) add(i,vec[i][j]);\n\t\t}\n\t}if(m==n-1) slv1();\n\telse slv2();\n\treturn 0;\n}\n```\n\n\u6211\u7b2c\u4e09\u4e2a\u4ea4\u7684\u9898\u89e3\u540e\u6765\u6539\u4e86\u4e00\u4e0b\uff0c\u8bf7\u7ba1\u7406\u5458\u7ed9\u8fc7\u5427QAQ",
        "postTime": 1542106639,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "# \u4e00\u4e2aDFS\n\n\u8fd9\u9053\u9898\u8981\u6c42\u6c42\u51fa\u5b57\u5178\u5e8f\u6700\u77ed\u7684\u8def\u5f84 \u5982\u679c\u4e00\u79cd\u60c5\u51b5\u4e00\u79cd\u60c5\u51b5\u5730\u641c \u80af\u5b9a\u4f1aT \u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u7528\u5230\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def \u5373 \u4e00\u4e2a\u70b9 \u82e5\u8fde\u7740\u82e5\u5e72\u4e2a\u70b9 \u90a3\u4e48 \u5148\u641c\u6570\u5b57\u5c0f\u7684\u70b9 \u8fd9\u6837 \u53ea\u9700\u8981\u641c\u4e00\u904d \u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5f97\u5230\u7684\u7b54\u6848\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \n\n\u7136\u540e \u8fd9\u9898\u9700\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u8003\u8651 \u4e00\u79cd\u662f \u8fb9\u6570\u4e3an-1\u7684\u60c5\u51b5 \u4e00\u79cd\u662f\u8fb9\u6570\u4e3an \u7684\u60c5\u51b5\uff08\u56e0\u4e3a\u5f53\u8fb9\u6570\u4e3an\u65f6 \u4f1a\u6210\u73af \u5f53\u6210\u73af\u65f6 \u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b63\u89e3\u65e0\u6cd5\u88ab\u641c\u7d22\u5230\u7684\u60c5\u51b5 \u5982 \u6709\u4e00\u4e2a1-2-3-4\u8fde\u8d77\u6765\u7684\u73af DFS\u641c\u7d22\u7684\u7ed3\u679c\u662f1 2 4 3\uff08\u56e0\u4e3aDFS\u7684\u7279\u70b9\u5c31\u662f\u8981\u641c\u5230\u5e95\u624d\u4f1a\u56de\u6eaf\uff09\u4f46\u662f \u7b54\u6848\u662f1 2 3 4 \uff09 \u4f46\u662f **\u5bf9\u4e8e\u8fb9\u6570\u4e3an \u7684\u60c5\u51b5 \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u8f6c\u6362\u4e3a\u8fb9\u6570\u4e3an-1\u7684\u60c5\u51b5 \u5373 \u5c06n\u6761\u8fb9\u4e2d\u7684\u67d0\u4e00\u6761\u5220\u53bb \u5219\u6b64\u65f6\u603b\u8fb9\u6570\u5c31\u4f1a\u53d8\u4e3an-1** \u5c31\u53ef\u4ee5\u5feb\u4e50\u7684DFS\u4e86 \u7a0d\u5fae\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f \u8981\u5224\u65ad\u4e00\u4e0b\u5220\u53bb\u8fd9\u6761\u8fb9 \u4f1a\u4e0d\u4f1a\u51fa\u73b0\u67d0\u4e2a\u70b9\u6ca1\u6709\u8fb9\u4e0e\u4ed6\u8fde\u63a5 \u4e0d\u7136\u5c31\u4f1aT \n\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nint n,m,ind=0;\n\nvector <int> G[5001];\n\nint a[5001][3];\n\nint vis[5001];\n\nint tp[5001];\n\nint ans[5001];\n\nvoid dfs(int s,int p,int q){\n\tif(vis[s]) return ;\n\tif(ind>n) return;\n\tvis[s]=1;\n\ttp[++ind]=s;\n\tif(ind==n){\n\t\tif(ans[1]==0){\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tans[i]=tp[i];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tif(ans[i]<tp[i]){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(ans[i]>tp[i]){\n\t\t\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\t\t\tans[j]=tp[j];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<G[s].size();i++){\n\t\tif(s==p&&G[s][i]==q) continue;\n\t\tif(s==q&&G[s][i]==p) continue;//\u5224\u65ad\u5220\u8fb9\n\t\tdfs(G[s][i],p,q);\n\t}\n\tvis[s]=0;//\u56de\u6eaf\u6e05\u6807\u8bb0\n}\n\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1,u,v;i<=m;i++){\n\t\tcin>>u>>v;\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\t\n\t\ta[i][1]=u;\n\t\ta[i][2]=v;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tsort(G[i].begin(),G[i].end());\n\t}\n\tfor(int i=0,p,q;i<=m;i++){\n\t\tp=a[i][1];\n\t\tq=a[i][2];\n\t\tif(G[p].size()==1||G[q].size()==1) continue;//\u5224\u65ad\u662f\u5426\u8fd8\u4f1a\u6210\u4e00\u68f5\u6811\n\t\tind=0;\n\t\tdfs(1,p,q);\n\t\tif(m==n-1) break;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tcout<<ans[i]<<\" \";\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1573291062,
        "uid": 130624,
        "name": "\u4e00\u4e2a\u6635\u79f0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "## \u6ce8\u610f\uff01\u6ce8\u610f\uff01\u524d\u65b9\u9ad8\u80fd\uff01\u672c\u9898\u5361\u5e38\uff01\uff01\uff01\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6240\u6709\u7684~~\u72d7\u8840~~\u5267\u60c5\u90fd\u5728\u544a\u8bc9\u6211\u4eec\uff0c\u6811\u7684\u8bdd\u76f4\u63a5dfs\u5c31\u51fa\u6765\u4e86\n\n### \u90a3\u4e48\u57fa\u73af\u6811\u5462\uff1f\n\n\u5176\u5b9e\u53ea\u8981\u66b4\u529b\u5220\u8fb9\uff0c\u7406\u8bba\u4e0a\u7684\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u8fc7\u7684qwq\n\n\u4f46\u662f\u5220\u54ea\u6761\u8fb9\u5462\uff1f\n\n\u8fd9\u91cc\u8981\u5f15\u51fa\u4e00\u4e2a\u57fa\u73af\u6811\u7684\u5e38\u7528\u64cd\u4f5c\uff1a\u62d3\u6251\u6392\u5e8f\u6c42\u73af\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u5728\u57fa\u73af\u6811\u4e0a\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u62d3\u6251\u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728\u7684\u8282\u70b9\u5c31\u662f\u73af\u4e2d\u7684\u8282\u70b9\u4e86\u3002\n\n\u6700\u540e\u8981\u7528\u5230\u73af\u4e2d\u7684\u8fb9\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u5b58\u8fb9\u7684\u65f6\u5019\uff08\u6211\u7528\u7684\u662f\u90bb\u63a5\u8868\u5b58\u53cc\u5411\u8fb9\uff09\u6309\n\n```cpp\n\ninput(x,y,z);\nif(x>y) swap(x,y);\nadd(x,y,z);add(y,x,z);\n\n```\n\n\u7684\u987a\u5e8f\u5b58\u3002\n\n\u8fd9\u6837\u627e\u8fb9\u53bb\u91cd\u7684\u65f6\u5019\u5c31\u6bd4\u8f83\u597d\u627e\u3002\u3002\u3002\uff08\u6211\u4e5f\u8868\u8ff0\u4e0d\u592a\u660e\u767d\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5427~\uff09\n\n**Code**\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<queue>\n\nusing namespace std;\n\nconst int N = 1e5+1;\nint n,m,r[N];\nint h[N],cnt,delu,delv;//\u5047\u88c5 del_u-v \u8fd9\u6761\u8fb9\u5df2\u7ecf\u88ab\u5220\u53bb\u4e86qwq \nstruct edge\n{\n\tint nxt;\n\tint to;\n}e[N];\nint ans[N],ans1[N];\nint qh=0,qt=1,qtp[N],tp[N],vis[N],visu[N],visv[N],tpcnt;//\u5de8\u4e11\u7684\u4ee3\u7801qwq\n\ninline void readx(int &x)\n{\n\tx=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-48;ch=getchar();}\n}\n\ninline void add(register int u,register int v)\n{\n\te[++cnt].nxt=h[u];\n\te[cnt].to=v;\n\th[u]=cnt;\n}\n\ninline void topo()\n{\n    for(register int i=1;i<=n;++i) vis[i]=1;\n    for(register int u=1;u<=n;++u)\n    {\n        for(register int i=h[u];i;i=e[i].nxt)\n        {\n            register int v=e[i].to;\n            ++tp[u];++tp[v];\n        }\n    }\n    for(register int i=1;i<=n;++i) if(tp[i]==2) qtp[qt++]=i;\n\n//    for(int i=1;i<=n;++i) printf(\"%d \",qtp[i]);printf(\"\\n\");\n\n    while(qt>qh)\n    {\n        register int u=qtp[++qh];vis[u]=0;\n        for(register int i=h[u];i;i=e[i].nxt)\n        {\n            register int v=e[i].to;\n            tp[u]-=2;tp[v]-=2;\n            if(tp[v]==2&&vis[v]) qtp[qt++]=v;\n        }\n    }\n    for(register int u=1;u<=n;++u)\n        if(vis[u]==1)\n        {\n            for(register int i=h[u];i;i=e[i].nxt)\n            {\n                register int v=e[i].to;\n                if(vis[v]==1&&u<v)\n\t\t\t\t{\n\t\t\t\t\tvisu[++tpcnt]=u;visv[tpcnt]=v;\n\t\t\t\t}\n            }\n        }\n}\n\ninline void update()\n{\n\tfor(register int i=1;i<=n;++i) \n\t{\n\t\tif(ans1[i]==ans[i]) continue;\n\t\tif(ans[i]==0) {for(register int j=1;j<=n;++j) ans[j]=ans1[j];return;}\n\t\tif(ans1[i]>ans[i]) return;\n\t\t//ans1[i]<ans[i] \n\t\tfor(register int j=i;j<=n;++j) ans[j]=ans1[j];return;\n\t}\n}\n\ninline void dfs(register int u,register int fa)\n{\n\tans1[++cnt]=u;\n    priority_queue <int,vector<int>,greater<int> > q;//\u5c0f\u6839\u5806 \n\tfor(register int i=h[u];i;i=e[i].nxt)\n\t{\n\t\tregister int v=e[i].to;\n\t\tif(v==fa||(u==delu&&v==delv)||(u==delv&&v==delu)) continue;\n\t\tq.push(v);\n\t}\n\twhile(!q.empty())\n\t{\n\t\tregister int v=q.top();q.pop();\n\t\tdfs(v,u);\n\t}\n}\n\nsigned main()\n{\n\treadx(n);readx(m);\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint u,v;readx(u);readx(v);\n\t\tif(u>v) swap(u,v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tcnt=0;\n\tif(m==n-1)\n\t{\n\t\tdfs(1,0);\n\t\tfor(register int i=1;i<=n;++i) ans[i]=ans1[i];\n\t}\n\telse\n\t{\n\t\ttopo();\n\t\tfor(register int i=1;i<=tpcnt;++i)\n\t\t{\n\t\t\tcnt=0;\n\t\t\tdelu=visu[i];delv=visv[i];\n\t\t\tdfs(1,0);\n\t\t\tupdate();\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;++i)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}\n\n```\n\n\u5176\u5b9e\u4ee3\u7801\u4e5f\u5c31\u662f\u770b106\u884c\u5230107\u884c\u90a3\u91cc\uff0c\u522b\u7684\u5730\u65b9\u5199\u5f97\u592a\u4e11\u4e86\u6ca1\u6cd5\u770b\uff0c\u800c\u4e14\u81ea\u5df1\u57fa\u672c\u80fd\u5199\u51fa\u6765\uff0c\u52a0\u6cb9\u54e6qwq\uff01",
        "postTime": 1573132383,
        "uid": 55032,
        "name": "wyhwyh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u5199\u4e00\u7bc7\u9898\u89e3\u52a0\u6df1\u7406\u89e3\n\n\n\n------------\n\n\u9898\u76ee\u5206\u4e3a\u6811\u548c\u57fa\u73af\u6811\u4e24\u79cd\u60c5\u51b5\n\n\u6811\u4e0d\u9700\u8981\u591a\u8bf4\uff0c\u5229\u7528\u8d2a\u5fc3\u5373\u53ef\n\n\u6839\u636e\u6811\u7684\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u57fa\u73af\u6811\u662f\u540c\u6837\u7684\u601d\u8def\n\n\u505a\u6cd5\u5176\u4ed6\u9898\u89e3\u90fd\u8bb2\u5f88\u4ed4\u7ec6\u4e86\n\ndalao\u4ee3\u7801\u90fd\u5199\u5f97\u6211\u770b\u4e0d\u61c2\uff0c\u6240\u4ee5\u60f3\u653e\u81ea\u5df1\u7684\u4ee3\u7801\u63d0\u4f9b\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\n\n```cpp\n//register  \u5361\u6700\u540e\u4e09\u4e2a\u70b9,\u6211\u592a\u83dc\u4e86\u5e38\u6570\u5927\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 5050\nint n,m;\nstruct node{\n\tint next,to;\n}edge[N<<1];\nint head[N],cnt;\ninline void add(int from,int to)\n{\n\tedge[++cnt].next=head[from],head[from]=cnt;\n\tedge[cnt].to=to;\n}\nvoid init()\n{\n\tcin>>n>>m;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v),add(v,u);\n\t}\n}\n\nint x,y;\nint fa[N];bool visited[N];\nvoid prepare(int u,int f)\n{\n\tfa[u]=f,visited[u]=1;\n\tfor(register int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==fa[u]) continue;\n\t\tif(visited[v]) \n\t\t\tx=u,y=v;\n\t\telse prepare(v,u);\n\t}\n}//\u5bfb\u627e\u6811\u4e0a\u7684\u73af,x,y\u8bb0\u5f55\u4e0b\u5f62\u6210\u73af\u7684\u90a3\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\n//\u5bf9\u4e8e\u8fd9\u6761\u8fb9\uff0c\u6839\u636e\u6df1\u641c\u5b9a\u4e49\uff0c\u5b83\u4e00\u5b9a\u662f\u8fd4\u7956\u8fb9\n\nint h1,h2;//\u5220\u8fb9\u7684\u7aef\u70b9\nint ans[N],road[N];//\u7b54\u6848\u548c\u4e2d\u95f4\u4fdd\u5b58\u7684\u8def\u5f84\nint ll;//\u8fdb\u5ea6\u6307\u9488\nvoid dfs(int u)\n{\n\tint temp[N],zz=0;//\u6682\u65f6\u5b58\u4e0b\u5b50\u8282\u70b9\n\troad[++ll]=u;\n\tfor(register int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(fa[u]==v) continue;\n\t\tif((u==h1&&v==h2) || (u==h2&&v==h1)) continue;\n\t\tfa[v]=u;\n\t\ttemp[++zz]=v;\n\t}\n\tsort(temp+1,temp+1+zz);//\u6392\u5e8f\n\tfor(register int i=1;i<=zz;i++)\n\t\tdfs(temp[i]);\n}\nint tot,circle[N];\ninline void work()\n{\n\tprepare(1,0);\n\tswap(x,y);//\u4ea4\u6362\u4e24\u4e2a\u7aef\u70b9,\u5177\u4f53\u539f\u56e0\u7528\u6837\u4f8b\u8c03\u8bd5\u4e00\u4e0b\u5c31\u6e05\u695a\u4e86\n\twhile(x!=y)\n\t{\n\t\tcircle[++tot]=x;\n\t\tx=fa[x];\n\t}//\u4e0d\u65ad\u5411\u4e0a\u8df3\uff0c\u627e\u5230\u8fd9\u4e2a\u73af\n\tcircle[++tot]=y;\n\tcircle[0]=circle[tot];//\u6536\u5c3e\u76f8\u8fde\n\tmemset(ans,0x3f3f3f,sizeof ans);//\u8bbe\u7f6e\u521d\u503c\n\tfor(register int i=1;i<=tot;i++)\n\t{\n\t\tll=0;//\u6e05\u7a7a\n\t\tmemset(road,0,sizeof road);//\u6e05\u7a7a\n\t\tmemset(fa,0,sizeof fa);//\u6e05\u7a7a\n\t\th1=circle[i-1],h2=circle[i];//\u786e\u5b9a\u4e0b\u8981\u5220\u6389\u8fb9\u7684\u7aef\u70b9\n\t\tdfs(1);//\u904d\u5386\u6811\n\t\tbool t=false;//\u6253\u6807\u8bb0\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tif(road[i]>ans[i]) break;\n\t\t\tif(road[i]<ans[i]) {t=true;break;}\n\t\t}//\u6bd4\u8f83\u5927\u5c0f\n\t\tif(t) for(register int i=1;i<=n;i++) ans[i]=road[i];//\u66f4\u65b0\u6700\u597d\u89e3\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t\tprintf(\"%d \",ans[i]);\n}\nint main()\n{\n\tinit();\n\twork();\n}\n```\n\u8d77\u521d\u4ee5\u4e3a\u8fd9\u4efd\u4ee3\u7801\u53ea\u6709\u56db\u5341\u5206,\u4e0d\u6599AC\u4e86\n\n\u60f3\u4e00\u4e0b\u5176\u5b9e\u5c31\u660e\u767d\u4e86\n\n\u5bf9\u4e8e\u6811\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u627e\u4e0d\u5230\u5b83\u7684\u73af\uff0cx,y\u5c31\u662f0\n\n\u641c\u7d22\u8fc7\u7a0b\u5e76\u4e0d\u53d7\u5f71\u54cd",
        "postTime": 1565836520,
        "uid": 149769,
        "name": "Zkxxxv_h",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "### \u6df1\u641c+\u526a\u679d+\u6c27\u6c14\u4f18\u5316 \u5168\u70b9100ms\u4ee5\u5185\n~~\u7136\u800c\u672c\u849f\u84bb\u8003\u573a\u4e0a\u5e76\u6ca1\u6709\u505a\u51fa\u6765emm~~\n\n\u6839\u636e\u826f\u5fc3\u6570\u636e\u89c4\u6a21\u53ef\u4ee5\u770b\u51fa\u6765\u8fd9\u5f20\u56fe\u8981\u4e48\u662f\u4e00\u68f5\u6811\uff0c\u8981\u4e48\u5c31\u662f\u591a\u4e86\u4e00\u6761\u8fb9\u7684\u6811\uff08\u96fe\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u529e\u6cd5\u8ba9\u4e0d\u662f\u6811\u7684\u56fe\u53d8\u6210\u6811\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u8003\u8651\u5230\u66b4\u529b\u5220\u8fb9\u3002\n\n\u66b4\u529b\u5220\u8fb9\u7684\u65b9\u6cd5\u4e0a\u9762\u795e\u7287\u4eec\u7684\u9898\u89e3\u90fd\u5e94\u8be5\u8bb2\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e3b\u8981\u8bf4\u8bf4\u6211\u526a\u679d\u7684\u65b9\u6cd5\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u4f46\u662f\u4e0d\u52a0\u7684\u8bdd\u6700\u540e\u4e09\u4e2a\u70b9\u59a5\u59a5T\u98de\uff0c\u5b9e\u73b0\u8d77\u6765\u4e5f\u5f88\u5bb9\u6613\u3002\n\u90a3\u5c31\u662f\u628a\u5f53\u524d\u7684\u7b54\u6848\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u548c\u4e4b\u524d\u751f\u6210\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7b54\u6848\u8fdb\u884c\u6bd4\u8f83\u3002\u53ea\u8981\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5b57\u5178\u5e8f\u6bd4\u5148\u524d\u751f\u6210\u7684\u6700\u5c0f\u7684\u7b54\u6848\u5927\uff0c\u5c31\u76f4\u63a5return\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 100010;\nconst int INF = 2140000000;\nint bana, banb;\nbool control = false;\n\nstruct map\n{\n    int c;\n    int nxt;\n    bool used;\n}e[2*5010];//\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\uff0c\u56e0\u4e3a\u5b58\u4e86\u53cc\u5411\u8fb9\nint head[5010];\nbool visited[5010];\nint minans[5010];//\u5373\u6700\u5c0f\u5b57\u5178\u5e8f\nint ans[5010];//\u5373\u5f53\u524d\u641c\u7d22\u7684\u5b57\u5178\u5e8f\nint cntans = 0, maxcntans = 0;\nint cnt = 0;\n\nvoid read(int x, int y) //\u524d\u5411\u661f\u5b58\u8fb9\n{\n    cnt++;\n    e[cnt].c = y;\n    e[cnt].nxt = head[x];\n    head[x] = cnt;\n}\nint n, m;\n\nbool larger() //\u6bd4\u8f83ans\u662f\u5426\u5927\u4e8eminans\n{\n    for (int i = 1; i <= cntans; i++)\n    {\n        if (ans[i] > minans[i])\n            return true;\n        if (ans[i] < minans[i])\n            return false;\n    }\n    return false;\n}\n\nvoid dfs(int sur)\n{\n    visited[sur] = true;\n    ans[++cntans] = sur;\n    if (control&&cntans <= maxcntans && larger())//\u8fd9\u5c31\u662f\u4e0a\u9762\u8bb2\u8fc7\u7684\u526a\u679d\n        return;\n    priority_queue <int, vector<int>, greater<int> >q;\n    for (int i = head[sur]; i; i = e[i].nxt)\n    {\n        if (visited[e[i].c]||(e[i].c==banb&&sur==bana)|| (e[i].c == bana && sur == banb))\n            continue;\n        q.push(e[i].c);\n    }\n    while (!q.empty())\n    {\n        dfs(q.top());\n        q.pop();\n    }\n}//\u7528\u4f18\u5148\u961f\u5217\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u6309\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6df1\u641c\n//\u5176\u5b9e\u8fd9\u91cc\u6709\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u53d6\u5f53\u524d\u6700\u4f18\u89e3\uff0c\u5c31\u5f97\u5230\u5168\u5c40\u6700\u4f18\u89e3\n\nint main()\n{\n    int x, y;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i++)\n    {\n        scanf(\"%d%d\", &x, &y);\n        read(x, y);\n        read(y, x);\n    }\n    int sur = 1;\n    if (m == n - 1)\n    {\n    \t//\u662f\u6811\u7684\u60c5\u51b5\n        cntans = 0;\n        bana = -1;\n        banb = -1;\n        dfs(sur);\n        for (int i = 1; i <= cntans; i++)\n            printf(\"%d \",ans[i]);\n    }\n    else\n    {\n    \t//\u4e0d\u662f\u6811\u7684\u60c5\u51b5\n        control = true;\n        for (int i = 1; i <= 2*m; i+=2)\n        {\n            memset(visited, 0, sizeof(visited));\n            cntans = 0;\n            bana = e[i+1].c;\n            banb = e[i].c;//\u9009\u51fa\u5220\u9664\u7684\u8fb9\uff08\u8fd9\u91cc\u9009\u51fa\u7684\u662f\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u7ed3\u70b9\n            dfs(sur);\n            if (cntans > maxcntans || (cntans >= maxcntans && !larger()))\n            {\n                memcpy(minans, ans, sizeof(ans));//\u590d\u5236ans\u5230minans\n                maxcntans = cntans;\n            }\n        }\n        for (int i = 1; i <= maxcntans; i++)\n            printf(\"%d \",minans[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1545487271,
        "uid": 113989,
        "name": "shiwt",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u79cd\u53ef\u884c\u7684\u526a\u679d\u65b9\u6cd5\n\n\u6211\u662f\u4e0a\u5348\u624d\u5728\u8003\u573a\u6253\u5b8c60\u5206\u66b4\u529b\uff0c\u4e0b\u5348\u4fbf\u542c\u5230\u6709\u5669\u8017\u8bf4\u8fd9\u9898\u8d2a\u5fc3\u526a\u8fb9\u5c31\u80fd\u8fc7\u7684\u3002~~\uff08\u5185\u5fc3\u5d29\u6e83~~\n\n\u4e8e\u662f\u7ffb\u4e86\u4e00\u904d\u9898\u89e3\uff0c\u53d1\u73b0\u4e00\u4e9b\u4ee3\u7801\u8f83\u77ed\u7684\u6700\u540e\u51e0\u4e2a\u70b9\u90fdTLE\u4e86\uff08\u6ce5\u840c\u80fd\u4e0d\u80fd\u8ba4\u771f\u5bf9\u5f85\u201c\u9898\u89e3\u201d\u4e24\u4e2a\u5b57\uff0cTLE\u4e86\u8fd8\u53d1\uff1f\uff09\u6211\u7684\u65b9\u6cd5\u548c\u4ed6\u4eec\u76f8\u4f3c\uff0c\u4e8e\u662f\u88ab\u9a97\u4e86\u597d\u4e45\u4e00\u76f4TLE\uff0c\u6700\u540e\u7ec8\u4e8e\u627e\u5230\u4e86\u4e00\u79cd\u7b80\u4fbf\u7684**\u526a\u679d**\u5927\u6cd5\u8fc7\u4e86\uff08\u8c8c\u4f3c\u8dd1\u5f97\u8fd8\u633a\u5feb\n\n#### \u9996\u5148\u8bb2\u4e00\u4e0b60\u5206\uff08m=n-1\uff09\u65b9\u6848\uff1a\n\u4f60\u53ea\u9700\u8981\u628a\u56fe\u6309\u8d2a\u5fc3\u904d\u5386\u4e00\u904d\u5373\u53ef\uff08\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0c\u81ea\u5e26\u4ece\u5c0f\u5230\u5927)\uff1a\n```cpp\ninline void dfs(int i){\n    vis[i]=1; t[++top]=i;\n    for(rg j=1;j<=n;++j){\n        if(a[i][j]&&!vis[j]){\n            dfs(j);\n        }\n    }\n}\n```\n#### \u8d2a\u5fc3\u526a\u8fb9\uff1a\n\u6211\u4eec\u53d1\u73b0\uff1a\u5982\u679c\u662f $m=n$ \u7684\u60c5\u51b5,\u56e0\u4e3a\u6709vis\u6570\u7ec4\u7684\u5b58\u5728\uff0c\u6211\u4eec\u5176\u5b9e\u662f\u5c06\u8fd9\u4e2a\u56fe\u5f53\u6210\u4e00\u68f5\u6811\u8dd1\u4e86\u4e00\u904d\uff0c\u6240\u4ee5\u4e0d\u8bba\u600e\u4e48\u904d\u5386\u8fd9\u4e2a\u56fe\uff0c\u6211\u4eec\u603b\u6709\u4e00\u6761\u8fb9\u4e0d\u4f1a\u88ab\u904d\u5386\u7684\u3002\u6240\u4ee5\u6211\u4eec\u628a\u67d0\u4e00\u6761\u8fb9\u5220\u6389\uff0c\u5f3a\u5236\u8ba9\u8fd9\u4e00\u6761\u8fb9\u4e0d\u88ab\u904d\u5386\uff0c\u5e76\u679a\u4e3e\u628a\u6bcf\u4e00\u6761\u8fb9\u90fd\u5220\u4e00\u904d\uff0c\u8fd9\u6837\u5c31\u53ef\u56ca\u62ec\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u7136\u540e\u518d\u66f4\u65b0\u51fa\u6700\u4f18\u89e3\uff0c\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u4e3a $n^2$ ,5000\u7684\u6570\u636e\u8303\u56f4\u6781\u5176\u5371\u9669\uff0c\u4e07\u4e00\u5e38\u6570\u5927\u4e86\u4f60\u5c31\u5495\u5495\u4e86\uff08\u5c31\u50cf\u6211\n\n\u6216\u8bb8\u4f60\u53ef\u4ee5\u5728\u4e4b\u524d\u627e\u5230\u56fe\u4e2d\u7684\u73af\uff0c\u6765\u51cf\u5c11\u4f60\u8981\u5220\u7684\u8fb9\u7684\u6570\u91cf\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a\u56fe\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5927\u73af\uff0c~~\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u4f60\u53c8\u5495\u5495\u4e86\u3002~~\n\n#### \u4e8e\u662f\u6211\u4eec\u6765\u526a\u4e2a\u679d\uff1a\n\u526a\u679d1\uff1a\u56e0\u4e3a\u5220\u8fb9\u7684\u95ee\u9898\uff0c\u5982\u679c\u4f60\u5220\u5f97\u8fd9\u4e2a\u56fe\u90fd\u4e0d\u8054\u901a\u4e86\uff0c\u90a3\u4e48continue\n\n\u526a\u679d2\uff1a\u56e0\u4e3a\u8fd9\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u53ef\u80fd\u51fa\u73b0\u91cd\u590d\u5220\u8fb9\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u5b8c\u5168\u53ef\u4ee5\u907f\u514d\u7684\n\n\u628a\u4e0a\u9762\u4e24\u4e2a\u526a\u679d\u7528\u4e86\uff0c\u5e38\u6570\u5de8\u5927\u7684\u6211\u8fd8\u662f\u5495\u5495\u4e86\uff0c\u4e8e\u662f\u6211\u751f\u6c14\u4e86\uff01\u6765\u4e86\u4e2a\u786c\u6027\u526a\u679d\uff0c~~\uff08\u7ed3\u679c\u6700\u540e\u51e0\u4e2a\u70b90.05\u79d2\u8fc7\uff0c\u6211\u54ed\u4e86~~\n\n\u526a\u679d3\uff1a\u5982\u679c\u8fd9\u4e00\u6b21\u7684dfs\u8dd1\u7740\u8dd1\u7740\u5df2\u7ecf\u6bd4\u5df2\u77e5\u7b54\u6848\u5dee\u4e86\uff0c\u5c31\u5f3a\u884c\u9000\u51fa\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u5220\u8fb9\u3002\n\n#### \u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define to f[i][j] //\u8bb0\u5f97\u770b\u4e00\u773c\n#define rg register int\nusing namespace std;\n\nconst int N=5001;\nint top[N],vis[N];\nint ans[N],use[N];\nbool d[N][N];//\u5220\u8fb9\u6570\u7ec4\nint f[N][N]; //\u5b58\u56fe\nint n,m,a,b,tot,t,k=1;\n\ninline bool dfs(int i){\n\tif(i<ans[++tot]) t=1; //\u9632\u6b62\u526a\u679d\u9519\u8bef\n\tif(i>ans[tot]&&!t)return 1;//\u526a\u679d3\uff08\u6bd4\u5df2\u77e5\u7b54\u6848\u5dee\uff09\n\tvis[i]=k; use[tot]=i;\n\tfor(rg j=1;j<=top[i];++j)\n\t  if(vis[to]!=k&&!d[i][to])\n\t\tif(dfs(to))return 1;\n\treturn 0; //\u8bb0\u5f97\u52a0\u4e00\u4e2areturn 0;\n}\ninline void print(int s[]){\n\tfor(rg i=1;i<=n;++i)\n\t\tprintf(\"%d \",s[i]);\n\texit(0); //\u7ed3\u675f\u7684\u552f\u4e00\u9014\u5f84\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(rg i=1;i<=m;++i){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tf[a][++top[a]]=b;\n\t\tf[b][++top[b]]=a;\n\t} ans[1]=5001; //\u521d\u59cb\u5316\n\tfor(rg i=1;i<=n;++i)\n\t\tsort(f[i]+1,f[i]+top[i]+1);//\u6392\u4e2a\u5e8f\uff0c\u4fdd\u8bc1\u8d2a\u5fc3\u6b63\u786e\u6027\n\tif(m==n-1) dfs(1),print(use);\n\tfor(rg i=1;i<=n;++i){\n\t\tfor(rg j=1;j<=top[i];++j){\n\t\t\tif(to>i)continue;//\u526a\u679d2\n\t\t\td[i][to]=d[to][i]=1;\n\t\t\ttot=t=0;++k; dfs(1);\n\t\t\td[i][to]=d[to][i]=0; //\u56de\u6eaf\n\t\t\tif(tot<n)continue;//\u526a\u679d1\n\t\t\tfor(rg k=1;k<=n;++k)\n\t\t\t  if(use[k]!=ans[k]){\n\t\t\t\tfor(rg o=k;o<=n;++o)\n\t\t\t\t\tans[o]=use[o];\n\t\t\t\tbreak;\n\t\t\t  }\n\t\t}\n\t} print(ans); //\u7a7a\u95f4\u578b\u538b\u884c\u5c24\u4e3a\u81f4\u547d\n}\n\n```\n\u987a\u5e26\u8bf4\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7b97\u6cd5\u662f $n^2$ \u7684\uff0c\u90a3\u4e48\u6700\u597d\u4e0d\u8981\u7528\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u597d\u6ee1\u8db3\u8d2a\u5fc3\u601d\u8def\uff0c\u5982\u679c\u6392\u5e8f\u5c31\u4f1a\u5bfc\u81f4\u6574\u4e2a\u56fe\u9519\u4e71\uff0c\u800c\u5176\u4ed6\u65b9\u6cd5\u53c8\u96be\u4ee5\u8fbe\u5230 $n^2$ \u590d\u6742\u5ea6~~\uff08\u867d\u7136\u6211\u540c\u684c\u6210\u529f\u4e86~~\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2avector\u6570\u7ec4\u6216\u4e00\u4e2a $n^2$ \u6570\u7ec4\u5b58\u56fe\uff0c\u8fd9\u6837\u53ef\u4ee5\u9010\u4e00\u6392\u5e8f\u4fdd\u8bc1\u590d\u6742\u5ea6\u5b89\u5168\u3002",
        "postTime": 1543030553,
        "uid": 111334,
        "name": "\u706f\u82af\u7cd5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n# Solution\n\n### $N \\leq 5000$\n\u5f88\u591a\u4eba\u770b\u5230\u8fd9\u4e2a\u8303\u56f4\u9a6c\u4e0a\u5c31\u80fd\u60f3\u5230\u201c\u66b4\u529b\u201d\u53bb\u62c6\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u91cd\u65b0\u8dd1\u4e00\u6b21\u770b\u770b\u80fd\u4e0d\u80fd\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f\uff1a\n### $O(N^2logN)$\n\n\uff08CCF\u7684\u8001\u7237\u673a\u7ec8\u4e8e\u6362\u4e86\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u5e94\u8be5\u662f\u8dd1\u5f97\u8fc7\u7684qwq\n\n### \u7b49\u7b49\uff0c\u65e2\u7136\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5df2\u7ecf\u8fd9\u4e48\u5927\u4e86\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u518d\u66b4\u529b\u4e00\u70b9\u5462qwq\uff1f\n\n\u4eca\u5929\u6211\u4eec\u8fde\u73af\u90fd\u4e0d\u62c6\u4e86\uff0c**\u76f4\u63a5\u62c6\u6bcf\u4e00\u6761\u8fb9\u8dd1\u4e00\u6b21**\u3002\n\n\u7136\u540e\uff1f\u5c31\u50cf\u4e0a\u9762\u62c6\u73af\u7684\u66b4\u529b\u90a3\u6837\u8dd1\u5c31\u884c\u4e86\u3002\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u66b4\u529b\u62c6\u53ef\u80fd\u62c6\u4e0d\u5230\u73af\u4e0a\uff0c\u56e0\u6b64\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff08\u8be6\u7ec6\u770b\u4ee3\u7801\uff09\n\n\uff08\u867d\u7136\u60f3\u628a\u9898\u89e3\u5199\u957f\u4e00\u70b9\uff0c\u4f46\u662f\u8fd9\u771f\u7684\u6ca1\u4ec0\u4e48\u53ef\u4ee5\u8bf4\u7684\u4e86qwq\uff0c\u53ea\u80fd\u5e2e\u5927\u5bb6\u628a\u4ee3\u7801\u52e4\u52e4\u6073\u6073\u5730\u6807\u6ce8\u597dqwq\n\n\n\n------------\n# Code\n```\n#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 5e3 + 5, MAXM = MAXN << 1;\n\nint head[MAXM], nxt[MAXM], v[MAXM], cnt;//\u90bb\u63a5\u8868\nint que[MAXN][MAXN], tail[MAXN];//\u6bcf\u4e2a\u70b9\u7684\u6269\u5c55\u6570\u7ec4\uff0c\u6e05\u7a7a\u7684\u8bdd\u592a\u6162\u4e86\uff0c\u4e8e\u662f\u5c31\u7528\u4e86\u4e00\u4e2a\u5c3e\u6807\u8bb0\nint ans[MAXN], temp[MAXN];//ans\u662f\u6700\u7ec8\u7b54\u6848\uff0ctemp\u662f\u50a8\u5b58\u5f53\u524d\u641c\u7d22\u7b54\u6848\u7684\nbool tag[MAXM], vis[MAXN];//tag\u7528\u6765\u6807\u8bb0\u4e0d\u80fd\u901a\u8fc7\u7684\u8fb9\uff0cvis\u662f\u8bbf\u95ee\u8fc7\u7684\u70b9\u6807\u8bb0\n\nint n, m;\nint step, run, flag;//step\u662f\u6b65\u6570\uff0crun\u662f\u526a\u679d\u5982\u679c\u5931\u8d25\u4e86\u5c31\u4e0d\u7ee7\u7eed\u505a\u4e86\uff1b\n//flag\u662f\u8868\u793a\u5f53\u524d\u6216\u8005\u4e4b\u524d\u5df2\u7ecf\u6709\u4e00\u4e2a\u66f4\u5c0f\u7684\u5b57\u5178\u5e8f\uff0c\u90a3\u4e48\u540e\u9762\u518d\u6709\u4e00\u4e2a\u5927\u7684\u4e5f\u6ca1\u6709\u5173\u7cfb\n//\u6bd4\u5982\n//\u539f\u7b54\u6848\u662f 1 5 4 3 2\n//\u73b0\u5728\u662f 1 3 4 5 2\n//\u867d\u7136\u7b2c4\u4f4d\u76845\u5c0f\u4e8e3\uff0c\u4f46\u662f\u56e0\u4e3a\u7b2c2\u4f4d\u76843\u5df2\u7ecf\u6bd45\u5927\u4e86\uff0c\u5b57\u5178\u5e8f\u5df2\u7ecf\u6bd4\u539f\u7b54\u6848\u5c0f\u4e86\uff0c\u6240\u4ee5\u7ee7\u7eed\u505a\u4e0b\u53bb\u4e5f\u6ca1\u95ee\u9898\n\ninline void Addline(int x, int y)//\u52a0\u8fb9\n{\n\tv[cnt] = y;\n\tnxt[cnt] = head[x], head[x] = cnt++;\n\n\treturn;\n}\n\ninline void DFS(int x, int from)\n{\n\ttemp[++step] = x, vis[x] = true;//\u8bb0\u5f55\u548c\u6807\u8bb0\n\n\tif (!flag && x > ans[step])//\u5982\u679c\u524d\u9762\u6ca1\u6709\u66f4\u597d\u7684\u7b54\u6848\uff0c\u5e76\u4e14\u8fd9\u91cc\u53c8\u4e0d\u4f18\uff0c\u5f53\u7136\u662f\u4e0d\u80fd\u505a\u4e0b\u53bb\u7684\n\t{\n\t\trun = false;\n\t\treturn;\n\t}\n\n\tif (x < ans[step])//\u53ea\u8981\u6709\u5c0f\u4e8e\u539f\u7b54\u6848\u5b57\u5178\u5e8f\u7684\u60c5\u51b5\u5c31\u6709\u66f4\u597d\u7684\u7b54\u6848\u4e86\uff0c\u66f4\u65b0\u6807\u8bb0\n\t\tflag = true;\n\n\tif (step == n)//\u5df2\u7ecf\u5b8c\u6210\u6240\u6709\u7684\u6b65\u9aa4\n\t{\n\t\tfor (int i = 1; i <= n; i++)//\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\n\t\t\tans[i] = temp[i];\n\t\treturn;\n\t}\n\n\ttail[x] = 0;//\u628a\u5c3e\u5df4\u653e\u5230\u6700\u524d\n\tfor (int i = head[x]; ~i; i = nxt[i])\n\t\tif (!vis[v[i]] && !tag[i])//\u65e2\u4e0d\u80fd\u662f\u8d70\u8fc7\u7684\uff0c\u4e5f\u4e0d\u80fd\u662f\u88ab\u5220\u6389\u7684\u8fb9\n\t\t\tque[x][++tail[x]] = v[i];\n\n\tsort(que[x] + 1, que[x] + tail[x] + 1);//\u6392\u5e8f\u8d2a\u5fc3\n\n\tfor (int i = 1; i <= tail[x] && run; i++)\n\t\t//if (!vis[que[x][i]])//\u8fd9\u53e5\u4e00\u5b9a\u8981\u52a0\uff0c\u56e0\u4e3a\u66b4\u529b\u5220\u8fb9\u53ef\u80fd\u4e0d\u4f1a\u5220\u5230\u73af\u4e0a\uff0c\u9020\u6210\u70b9\u91cd\u590d\u3002\u53ef\u4ee5\u5148\u5220\u6389\u8fd9\u4e00\u53e5\u8bdd\uff0c\u7528\u4e0b\u9762\u7ed9\u7684\u6570\u636e\u6d4b\u8bd5\u4e00\u4e0b\n\t\t\tDFS(que[x][i], x);\n\n\treturn;\n}\n\nsigned main(void)\n{\n\tmemset(head, -1, sizeof head);\n\tmemset(ans, 0x7f, sizeof ans);//\u5b9a\u4e49\u7b54\u6848\u4e3a\u6700\u5927\u8fd9\u6837\u65b9\u4fbf\u4e0a\u9762\u66f4\u65b0\n\n\tcin >> n >> m;\n\tfor (int i = 1, x, y; i <= m; i++)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tAddline(x, y), Addline(y, x);\n\t}\n\n\tif (m == n)//\u9632\u6b62\u4e22\u5206\uff0c\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\n\t{\n\t\t//\u6211\u7684\u524d\u5411\u661f\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee50\uff0c2\uff0c4\uff0c6\u2026\u2026\u90fd\u662f\u52a0\u5165\u7684\u8fb9\uff0c1\uff0c3\uff0c5\uff0c7\u2026\u2026\u662f\u53cd\u5411\u8fb9\n\t\tfor (int i = 0; i <= cnt; i += 2)\n\t\t{\n\t\t\tmemset(vis, false, sizeof vis);\n\t\t\trun = 1, flag = step = 0;//\u521d\u59cb\u5316\u4e00\u4e0b\u6807\u8bb0\n\n\t\t\ttag[i] = tag[i + 1] = true;//\u6807\u8bb0\n\t\t\tDFS(1, 0);\n\t\t\ttag[i] = tag[i + 1] = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\trun = 1, flag = step = 0;//\u4ec0\u4e48\u90fd\u4e0d\u7528\u5220\uff0c\u76f4\u63a5\u641c\n\t\tDFS(1, 0);\n\t}\n\n\tfor (int i = 1; i <= n; i++)\n\t\tprintf(\"%d \", ans[i]);//\u8f93\u51fa\u7b54\u6848\n\n\treturn 0;\n}\n```\n\n------------\n\n# Data\n```\nIN\n\n10 10\n9 8\n1 6\n5 2\n7 9\n6 10\n7 5\n3 9\n1 9\n9 2\n4 3\n\n```\n\n\n```\nANS\n\n1 6 10 9 2 3 4 7 5 8\n\n```\n\n\u5220\u6389\u90a3\u53e5\u8bdd\u518d\u8dd1\uff1a\n\n```\nOUT\n\n1 6 9 2 5 7 3 4 7 8 \n```\n\n### 7\u88ab\u8dd1\u4e86\u4e24\u6b21\uff1f\uff1f\n\n\u628a\u56fe\u753b\u51fa\u6765\uff0c\u4f60\u80fd\u53d1\u73b0\u6211\u4eec\u7684\u73af\u662f9 2 5 7\n\n9->2->5->7\u7684\u987a\u5e8f\u8bbf\u95ee\n\n\u4f46\u662f9\u8fd8\u4f1a\u53bb\u8bbf\u95ee\u4e00\u4e0b7\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u961f\u5217\u662f\u9884\u5148\u52a0\u8fdb\u6765\u7684\uff0c\u5e76\u6ca1\u6709\u5148\u8bbf\u95ee\uff0c\u6240\u4ee5\u961f\u5217\u4e2d\u7684\u5143\u7d20\u8981\u518d\u6b21\u5224\u65ad\u662f\u5426\u88ab\u8bbf\u95ee\n",
        "postTime": 1542247673,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u53bb\u5e74\u56e0\u4e3a\u8fd9\u9898\u8003\u8651\u591a\u4e8660\u53d820, 1=\u53d82=, \u7701\u961f\u53d8\u5dee8\u5206, \u8349(\u7838\u7535\u8111.gif\n\n\n------------\n\n\n\u56de\u5230\u6b63\u9898. \u9996\u5148\u89c2\u5bdf\u6570\u636e. n = 5000, \u6240\u4ee5\u66b4\u529b\u5c31\u597d\u4e86. \u5f53\u65f6\u76f4\u63a5\u4e0a\u90bb\u63a5\u77e9\u9635\u90fd\u8fc7\u4e86\u6811\u7684subtask. \n\n\u73b0\u5728\u8ba8\u8bba\u60c5\u51b5. \n\n- \u7b2c\u4e00\u79cd, n = m - 1 \u65f6\u4e3a\u4e00\u68f5\u6811. \n\n\u53ea\u8981\u4fdd\u8bc1\u51fa\u8fb9\u5230\u8fbe\u70b9\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u540e\u8fdb\u884c\u4e00\u6b21\u4e0d\u56de\u6eaf\u7684DFS\u5373\u53ef, \u590d\u6742\u5ea6O(n). \u4ee5\u4e0b\u4e3a\u672c\u4eba\u53bb\u5e74\u6b64subtask\u7684\u53bb\u9505\u4ee3\u7801. \n```cpp\n#include <cstdlib>\n#include <cstdio>\n#include <algorithm>\n#include <iostream>\n\nconst int maxN = 5000;\nint n,m,current;\nbool isFinal;\nint minimalSet[1 + maxN];\nbool isCityVisited[1 + maxN];\nbool roadIndex[1 + maxN][1 + maxN];\n\nvoid travel(int nowCity)\n{\n\tif(isFinal)\n\t{\n\t\treturn;\n\t}\n\tcurrent++;\n\tminimalSet[current] = nowCity;\n\tisCityVisited[nowCity] = true;\n\tif(current == n)\n\t{\n\t\tminimalSet[0] = nowCity;\n\t\tfor(int i = 1;i <= n;i++)\n\t\t{\n\t\t\tprintf(\"%i \",minimalSet[i]);\n\t\t}\n\t\tisFinal = true;\n\t\treturn;\n\t}\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tif(isCityVisited[i] == false\n\t\t&&(roadIndex[nowCity][i] || roadIndex[i][nowCity]))\n\t\t{\n\t\t\ttravel(i);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tstd::cin >> n >> m;\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%i %i\",&u,&v);\n\t\troadIndex[u][v] = true;\n\t\troadIndex[v][u] = true;\n\t}\n\t\n\ttravel(1);\n\t\n\treturn 0;\n}\n```\n\n    \n- \u7b2c\u4e8c\u79cd, n = m \u65f6\u4e3a\u4e00\u5f20\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u73af\u7684\u56fe\n\n\u53bb\u5e74\u6211\u770b\u5230\u8fd9\u5c31\u653e\u5f03\u4e86, \u6bd5\u7adf\u5f53\u65f6\u8fde\u5b58\u56fe\u90fd\u662f\u51ed\u5370\u8c61\u778e\u641e\u7684. \u5f53\u7136, \u73b0\u5728\u770b\u6765\u65e0\u975e\u4e24\u79cd\u65b9\u5f0f: \u627e\u8fb9, \u627e\u73af. \u8fd9\u91cc\u4ece\u7b80(\u5176\u5b9e\u8fd8\u662f\u4e0d\u4f1a), \u53ea\u8ba8\u8bba\u66b4\u529b\u65ad\u8fb9\u7684\u65b9\u6848. \n    \u8fd9\u6837\u4e00\u5f20\u56fe(\u57fa\u73af\u6811/\u56fe)\u6709\u8fd9\u6837\u7684\u6027\u8d28: \u65ad\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u53d8\u6210\u4e00\u68f5\u6811. \u90a3\u4e48\u5c31\u6709\u4ee5\u4e0b\u4ee3\u7801. \n```cpp\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cstdio>\n#include <iostream>\n\nstruct Edge\n{\n\tint u, v;\n\tbool w;\n\n\tEdge(int U = 0, int V = 0, bool W = true)\n\t{\n\t\t(*this).u = U, (*this).v = V, (*this).w = W;\n\t}\n\n\tvoid reverse()\n\t{\n\t\tstd::swap((*this).u, (*this).v);\n\t\treturn;\n\t}\n\n\tEdge getReversed()\n\t{\n\t\treturn Edge((*this).v, (*this).u, (*this).w);\n\t}\n\n\tEdge operator = (const Edge& inEdge)\n\t{\n\t\t(*this).u = inEdge.u, (*this).v = inEdge.v, (*this).w = inEdge.w;\n\t\treturn *this;\n\t} \n}\nemptyEdge;\n\ninline bool cmp(Edge E, Edge e)\n{\n\treturn E.v < e.v;\n}\n\ninline void copy(int n, int* ori, int* des)\n{\n\tfor(int i = 1; i <= n; i++) des[i] = ori[i];\n}\n\ninline void set(int n, bool stat, bool* des)\n{\n\tfor(int i = 1; i <= n; i++) des[i] = stat;\n}\n\ninline bool isMinDic(int n, int* dicOri, int* dicCmp)\n{\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(dicCmp[i] != dicOri[i])\n\t\t{\n\t\t\tif(dicCmp[i] > dicOri[i]) return false;\n\t\t\tif(dicCmp[i] < dicOri[i]) return true;\n\t\t}\n\t}\n\treturn false;\n} \n\ninline void setEdge(int u, int v, bool w, std::vector<Edge>* graph)\n{\n\tfor(std::vector<Edge>::iterator it = graph[u].begin(); it != graph[u].end(); it++)\n\t{\n\t\tif((*it).v == v)\n\t\t{\n\t\t\t(*it).w = w;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nvoid DFS(int now, int& depth, bool* isVisited, std::vector<Edge>* graph, int* dic)\n{\n\tisVisited[now] = true;\n\tdic[depth++] = now;\n\tfor(std::vector<Edge>::iterator it = graph[now].begin(); it != graph[now].end(); it++)\n\t{\n\t\tif(!isVisited[(*it).v] && (*it).w)\n\t\t\tDFS((*it).v, depth, isVisited, graph, dic);\n\t}\n}\n\ninline void subtask(int n, std::vector<Edge>* graph, bool* isVisited, int* dic)\n{\n\tfor(int k = 1;k <= n;k++)\n\t{\n\t\tfor(std::vector<Edge>::iterator it = graph[k].begin(); it != graph[k].end(); it++)\n\t\t{\n\t\t\t(*it).w = false/*, setEdge((*it).v, (*it).u, false, graph)*/;\n\n\t\t\tint tDic[1 + n]; tDic[0] = 0; int depth = 1;\n\t\t\tfor(int i = 1; i <= n; i++){tDic[i] = 5000 + 1; isVisited[i] = false;}\n\n\t\t\tDFS(1, depth, isVisited, graph, tDic);\n\t\t\tif(isMinDic(n, dic, tDic)) copy(n, tDic, dic);\n\n\t\t\t(*it).w = true/*, setEdge((*it).v, (*it).u, true, graph)*/;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n, m;\n\tstd::cin >> n >> m;\n\tstd::vector<Edge> graph[1 + n];\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%i %i\", &u, &v);\n\t\tgraph[u].push_back(Edge(u, v));\n\t\tgraph[v].push_back(Edge(v, u));\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tstd::sort(graph[i].begin(), graph[i].end(), cmp);\n\t}\n\n\tint dic[1 + n]; for(int i = 1;i <= n;i++){dic[i] = 5000 + 1;} dic[0] = 0;\n\tbool isVisited[1 + n]; memset(isVisited, false, sizeof(isVisited));\n\tint depth = 1;\n\tn != m ? DFS(1, depth, isVisited, graph, dic)\n\t\t   : subtask(n, graph, isVisited, dic);\n\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tprintf(\"%i \", dic[i]);\n\t}\n\t\n\treturn 0;\n}\n```\n![TLE](https://cdn.luogu.com.cn/upload/image_hosting/6ph83mky.png)\n\n\u6211\u4ea4\u4e86, \u5438\u6c27\u4e86, \u591a50ms T\u4e86, \u90a3\u548b\u529e\u561b QAQ\n\n\u5f88\u660e\u663e, \u8fd9\u4e2a\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u662fO(n2). \u6240\u4ee5\u70b8T\u4e5f\u4e0d\u5947\u602a.\n\n- \u8fd9\u65f6\u5c31\u9700\u8981\u526a\u679d\u4e86, \u8fd9\u91cc\u53ea\u8bb2\u6700\u4f18\u5316\u526a\u679d. \u5f53\u5f53\u524d\u641c\u7d22\u6240\u5f97\u5e8f\u5217\u52a3\u4e8e\u5df2\u5f97\u6700\u4f73\u5e8f\u5217\u65f6\u5c31\u53ef\u9009\u62e9\u526a\u679d. \u4e8e\u662f\u6700\u7ec8\u5f97\u5230\u4ee5\u4e0b\u4ee3\u7801, \u590d\u6742\u5ea6\u5927O(n2). \n\n```cpp\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cstdio>\n#include <iostream>\n\nstruct Edge\n{\n\tint u, v;\n\tbool w;\n\n\tEdge(int U = 0, int V = 0, bool W = true)\n\t{\n\t\t(*this).u = U, (*this).v = V, (*this).w = W;\n\t}\n\n\tvoid reverse()\n\t{\n\t\tstd::swap((*this).u, (*this).v);\n\t\treturn;\n\t}\n\n\tEdge getReversed()\n\t{\n\t\treturn Edge((*this).v, (*this).u, (*this).w);\n\t}\n\n\tEdge operator = (const Edge& inEdge)\n\t{\n\t\t(*this).u = inEdge.u, (*this).v = inEdge.v, (*this).w = inEdge.w;\n\t\treturn *this;\n\t} \n}\nemptyEdge;\n\ninline bool cmp(Edge E, Edge e)\n{\n\treturn E.v < e.v;\n}\n\ninline void copy(int n, int* ori, int* des)\n{\n\tfor(int i = 1; i <= n; i++) des[i] = ori[i];\n}\n\ninline void set(int n, bool stat, bool* des)\n{\n\tfor(int i = 1; i <= n; i++) des[i] = stat;\n}\n\ninline bool isMinDic(int n, int* dicOri, int* dicCmp)\n{\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(dicCmp[i] != dicOri[i])\n\t\t{\n\t\t\tif(dicCmp[i] > dicOri[i]) return false;\n\t\t\tif(dicCmp[i] < dicOri[i]) return true;\n\t\t}\n\t}\n\treturn false;\n} \n\ninline void setEdge(int u, int v, bool w, std::vector<Edge>* graph)\n{\n\tfor(std::vector<Edge>::iterator it = graph[u].begin(); it != graph[u].end(); it++)\n\t{\n\t\tif((*it).v == v)\n\t\t{\n\t\t\t(*it).w = w;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nvoid DFS(int now, int& depth, bool* isVisited, std::vector<Edge>* graph, int* dic, int* cmpDic, bool& wasEqual, bool& isBestSolution, bool& notBestSolution)\n{\n\tif(notBestSolution) return;\n\tisVisited[now] = true;\n\tdic[depth] = now;\n\tif(wasEqual && !isBestSolution)\n\t{\n\t\tdic[depth] != cmpDic[depth] ? (dic[depth] < cmpDic[depth] ? isBestSolution = true : false),\n\t\t\t\t\t\t\t\t\t  (dic[depth] > cmpDic[depth] ? notBestSolution = true : false),\n\t\t\t\t\t\t\t\t\t  wasEqual = false\n\t\t\t\t\t\t\t\t\t: wasEqual = true;\n\t}\n\tdepth++;\n\tfor(std::vector<Edge>::iterator it = graph[now].begin(); it != graph[now].end(); it++)\n\t{\n\t\tif(!isVisited[(*it).v] && (*it).w)\n\t\t\tDFS((*it).v, depth, isVisited, graph, dic, cmpDic, wasEqual, isBestSolution, notBestSolution);\n\t}\n}\n\ninline void subtask(int n, int& depth, bool* isVisited, std::vector<Edge>* graph, int* dic, int* resultDic, bool& wasEqual, bool& isBestSolution, bool& notBestSolution)\n{\n\tfor(int k = 1;k <= n;k++)\n\t{\n\t\tfor(std::vector<Edge>::iterator it = graph[k].begin(); it != graph[k].end(); it++)\n\t\t{\n\t\t\t(*it).w = false/*, setEdge((*it).v, (*it).u, false, graph)*/;\n\n\t\t\tint tDic[1 + n];\n\t\t\ttDic[0] = 0, depth = 1, wasEqual = true, isBestSolution = false, notBestSolution = false;\n\t\t\tfor(int i = 1; i <= n; i++) {tDic[i] = 5000 + 1; isVisited[i] = false;}\n\n\t\t\tDFS(1, depth, isVisited, graph, tDic, resultDic, wasEqual, isBestSolution, notBestSolution);\n\t\t\tif(isBestSolution) copy(n, tDic, resultDic);\n\n\t\t\t(*it).w = true/*, setEdge((*it).v, (*it).u, true, graph)*/;\n\t\t}\n\t}\n}\n\nint main()\n{\n\t//freopen(\"in\",\"r\",stdin);\n\tint n, m;\n\tstd::cin >> n >> m;\n\tstd::vector<Edge> graph[1 + n];\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%i %i\", &u, &v);\n\t\tgraph[u].push_back(Edge(u, v));\n\t\tgraph[v].push_back(Edge(v, u));\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tstd::sort(graph[i].begin(), graph[i].end(), cmp);\n\t}\n\n\tint dic[1 + n]; for(int i = 1;i <= n;i++){dic[i] = 5000 + 1;} dic[0] = 0;\n\tbool isVisited[1 + n]; memset(isVisited, false, sizeof(isVisited));\n\tint depth = 1; bool wasEqual = true, isBestSolution = false, notBestSolution = false;\n\tn != m ? DFS(1, depth, isVisited, graph, dic, dic, wasEqual, isBestSolution, notBestSolution)\n\t\t   : subtask(n, depth, isVisited, graph, dic, dic, wasEqual, isBestSolution, notBestSolution);\n\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tprintf(\"%i \", dic[i]);\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1573562022,
        "uid": 107663,
        "name": "infiWang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "$m = n-1$  \n\u8d2a\u5fc3dfs,\u6309\u7167\u7ed3\u70b9\u7f16\u53f7\u8f83\u5c0f\u7684\u8f93\u51fa\u5373\u53ef\u3002  \n$60pts$\u5230\u624b  \n$m = n$  \n\u8fd9\u4e0d\u5c31\u662f\u4e00\u68f5\u57fa\u73af\u6811\u561b?  \n\u5bf9\u4e8e\u4efb\u610f\u7684\u65b9\u6848,\u4e00\u79cd\u65b9\u6848\u662f\u8d70\u5b8c\u6574\u4e2a\u73af,\u53e6\u4e00\u79cd\u662f\u8d70\u5b8cn-1\u6761\u8fb9,\u7136\u540e\u56de\u6eaf\u3002\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u6211\u4eec\u8fd8\u6709\u9009\u62e9\u7684\u4f59\u5730(\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u5b50\u6811),\u6240\u4ee5\u5fc5\u7136\u66f4\u4f18\u3002  \n\u7528dfs\u6807\u8bb0\u73af\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9(\u7c7b\u4f3c\u5f3a\u8fde\u901a\u7f29\u70b9),\u679a\u4e3e\u65ad\u8fb9\u5373\u53ef\u3002  \n$O(n^2)$   \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#define itra vector<int>::iterator\n\nusing namespace std;\n\nconst int N = 5678, INF = 0x3f3f3f3f;\n\nvector<int> mp[N];\nint n;\n\nint sta[N], vis[N], bd[N], top, bp;\nbool flg = true;\nvoid find(int cur, int pre) {\n\tif(!flg) return;\n\tint sz = mp[cur].size();\n\tfor(int i = 0; i < sz; ++i)\n\t\tif(mp[cur][i] != pre) {\n\t\t\tif(vis[mp[cur][i]]) {\n\t\t\t\tflg = false;\n\t\t\t\t--top;\n\t\t\t\twhile(sta[top] != mp[cur][i])\n\t\t\t\t\tbd[bp++] = sta[top--];\n\t\t\t\tbd[bp++] = sta[top];\n\t\t\t\tbd[bp++] = cur;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvis[mp[cur][i]] = 1;\n\t\t\tsta[top++] = mp[cur][i];\n\t\t\tfind(mp[cur][i], cur);\n\t\t\tif(!flg) return;\n\t\t\t--top;\n\t\t}\n}\n\nint ans[N], tat[N], ta, b1, b2;\nvoid dfs(int cur, int pre) {\n\ttat[ta++] = cur;\n\tint sz = mp[cur].size();\n\tfor(int i = 0; i < sz; ++i)\n\t\tif(mp[cur][i] != pre && !(cur==b1&&mp[cur][i]==b2) && !(cur==b2&&mp[cur][i]==b1)) {\n\t\t\tdfs(mp[cur][i], cur);\n\t\t}\n}\n\ninline bool ck() {\n\tfor(int i = 0; i < n; ++i)\n\t\tif(ans[i] != tat[i])\n\t\t\treturn tat[i] < ans[i];\n\treturn false;\n}\n\ninline void upd() { if(ck()) for(int i = 0; i < n; ++i) ans[i] = tat[i]; }\n\nint main() {\n\tmemset(vis, 0, sizeof(vis));\n\tans[0] = INF;\n\tint m, u, v;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\tmp[u].push_back(v); mp[v].push_back(u);\n\t}\n\tfor(int i = 1; i <= n; ++i) sort(mp[i].begin(), mp[i].end());\n\tif(n == m) {\n\t\ttop = bp = 0;\n\t\tvis[1] = 1;\n\t\tsta[top++] = 1;\n\t\tfind(1, 0);\n\t\tfor(int i = 0; i < bp - 1; ++i) {\n\t\t\tb1 = bd[i], b2 = bd[i+1];\n\t\t\tta = 0;\n\t\t\tdfs(1, 0);\n\t\t\tupd();\n\t\t}\n\t\tfor(int i = 0; i < n; ++i) printf(\"%d \", ans[i]);\n\t\tprintf(\"\\n\");\n\t} else {\n\t\tdfs(1, 0);\n\t\tfor(int i = 0; i < n; ++i) printf(\"%d \", tat[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573345320,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "**\u6211\u89c9\u5f97\u6211\u7684\u4ee3\u7801\u5e94\u8be5\u7b97\u77ed\u7684\u5427\uff0c1067B\u800c\u5df2\u3002**\n\n**\u6548\u7387\u4e5f\u8fd8\u884c\uff0c\u603b\u7528\u65f6308ms\u3002\uff08\u4e0d\u5f00O2\uff09~~\u867d\u7136\u8fd8\u6bd4\u4e0d\u4e0aO\uff08nlogn\uff09\u89e3\u6cd5\u7684\u5927\u4f6c~~**\n\n\u5148\u8bb2m=n-1\u7684\u60c5\u51b5\uff1a\n\n\u663e\u7136\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u6240\u6709\u53ef\u5230\u8fbe\u7684\u70b9\u4e2d\u8d2a\u5fc3\u4ece\u5c0f\u5230\u5927\u8fdb\u884cDFS\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[5005],tot;\nbool e[5005][5005],v[5005];\nvoid dfs(int x){\n\tv[x]=1;\n\tans[++tot]=x;\n\tfor(int i=1;i<=n;i++)\n\tif(!v[i]&&e[x][i])\n\t\tdfs(i);\n}\nint main() {\n   cin>>n>>m;\n   for(int i=1;i<=m;i++){\n    \tint x,y;\n    \tscanf(\"%d%d\",&x,&y);\n    \te[x][y]=e[y][x]=1;\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=n;i++)\n\tcout<<ans[i]<<' ';\n}\n```\n\u7136\u540em=n\u7684\u60c5\u51b5\u5c31\u662f\u518d\u591a\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u4f46\u662f\u6ce8\u610f\u5230\u73af\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u8d70\u4e0d\u5230\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u8fd9\u6761\u8fb9\uff0c\u7136\u540e\u628a\u5b83\u5220\u53bb\u8fdb\u884cDFS\uff0c\u518d\u628a\u8fb9\u8865\u56de\u6765\u8ba1\u7b97\u4e0b\u4e00\u6761\u8fb9\uff0c\u6700\u540e\u53d6\u6700\u5c0f\u7684\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6O(n^2)\n\n~~AC~~88\u5206\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[5005],tot,ans2[5005];\nbool e[5005][5005],v[5005];//\u90bb\u63a5\u77e9\u9635\u65b9\u4fbf\u5220\u8fb9\nvector<int>e2[5005];//\u4f18\u5316DFS\nvoid dfs(int x){\n\tv[x]=1;\n\tans[++tot]=x;\n\tfor(int i=0;i<e2[x].size();i++)\n\t\tif(!v[e2[x][i]]&&e[x][e2[x][i]])//\u6ca1\u6709\u88ab\u5220\u6216\u8d70\u8fc7\n\t\t\tdfs(e2[x][i]);\n}\nvoid change(){//\u66f4\u65b0\u7b54\u6848\n\tif(ans2[n]==-1){//\u8fd8\u6ca1\u6709\u5408\u6cd5\u8def\u7ebf\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tans2[i]=ans[i];\n\t\treturn;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(ans2[i]<ans[i])return;\n\t\tif(ans2[i]>ans[i])\n\t\t\tfor(int i=1;i<=n;i++)\n\t\t\t\tans2[i]=ans[i];\n\t}\t\n}\nint main() {\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n    \tint x,y;\n    \tscanf(\"%d%d\",&x,&y);\n    \te2[x].push_back(y);\n    \te2[y].push_back(x);\n    \te[x][y]=e[y][x]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(e2[i].begin(),e2[i].end());\n\tif(m==n-1){//\u6811\u7684\u60c5\u51b5\n    \tdfs(1);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tcout<<ans[i]<<' ';\n\t\treturn 0;\n\t}\n\tmemset(ans2,-1,sizeof(ans2));//\u7528\u6765\u6807\u8bb0\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<e2[i].size();j++){\n\t\t\tint y=e2[i][j];\n\t\t\ttot=0;\n\t\t\tmemset(v,0,sizeof(v));\n\t\t\te[i][y]=e[y][i]=0;\n\t\t\tdfs(1);\n\t\t\tif(tot==n)change();\n        //\u5220\u5b8c\u8fb9\u540e\u5fc5\u987b\u4f7f\u56fe\u8054\u901a\u624d\u80fd\u66f4\u65b0\n\t\t\te[i][y]=e[y][i]=1;\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<ans2[i]<<' ';\t\n}\n```\n\u7136\u540e\u53d1\u73b0T\u4e86\uff0c\u540e\u6765\u770b\u522b\u7684\u9898\u89e3\u540e\u53d1\u73b0\u6709\u4e2a\u795e\u5947\u7684\u4f18\u5316\uff1a\u6bcf\u6b21\u5982\u679c\u53d1\u73b0\u5f53\u524d\u5e8f\u5217\u6ca1\u6709\u6700\u4f18\u89e3\u4f18\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86\uff0c\u8fd9\u4e2a\u52a0\u4e0a\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\uff08\u5f53\u7136\u52a0\u522b\u7684\u4f18\u5316\u4e5f\u53ef\u4ee5\uff09\n\n\u771f AC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[5005],tot,ans2[5005],ok;//ok\u8868\u793a\u5f53\u524d\u5e8f\u5217\u72b6\u6001\n//1\u8868\u793a\u4e0d\u77e5\u9053\uff0c0\u8868\u793a\u6ca1\u6700\u4f18\u89e3\u4f18\uff0c2\u8868\u793a\u6bd4\u6700\u4f18\u89e3\u4f18\nbool e[5005][5005],v[5005];\nvector<int>e2[5005];\nvoid dfs(int x){\n\tif(!ok)return;//\u4f18\u5316\n\tv[x]=1;\n\tans[++tot]=x;\n\tif(ok==1&&x<ans2[tot])ok=2;//\u66f4\u65b0ok\u7684\u503c(\u6ce8\u610f\u8981ok==1\u624d\u66f4\u65b0)\n\tif(ok==1&&x>ans2[tot])ok=0;\n\tfor(int i=0;i<e2[x].size();i++)\n\t\tif(!v[e2[x][i]]&&e[x][e2[x][i]])\n\t\t\tdfs(e2[x][i]);\n}\nvoid change(){//\u4e4b\u524d\u5df2\u7ecf\u786e\u5b9a\u5c31\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u4e86\n\tfor(int i=1;i<=n;i++)\n\t\tans2[i]=ans[i];\t\n}\nint main() {\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n    \tint x,y;\n    \tscanf(\"%d%d\",&x,&y);\n    \te2[x].push_back(y);\n    \te2[y].push_back(x);\n    \te[x][y]=e[y][x]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsort(e2[i].begin(),e2[i].end());\n\tmemset(ans2,0x3f,sizeof(ans2));\n\tif(m==n-1){\n\t\tok=1;\n     \tdfs(1);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",ans[i]);\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<e2[i].size();j++){\n\t\t\tok=1;\n\t\t\tint y=e2[i][j];\n\t\t\ttot=0;\n\t\t\tmemset(v,0,sizeof(v));\n\t\t\te[i][y]=e[y][i]=0;\n\t\t\tdfs(1);\n\t\t\tif(tot==n&&ok==2)change();//\u6bd4\u6700\u4f18\u89e3\u4f18\u5c31\u66f4\u65b0\n\t\t\te[i][y]=e[y][i]=1;\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",ans2[i]);\n}\n```\n",
        "postTime": 1573288872,
        "uid": 134476,
        "name": "wyx__",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "~~\u849f\u84bb\u7b2c\u4e00\u7bc7\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u9898\u89e3~~\n## \u524d60\u5206\n\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\u8fdb\u884c\u6392\u5e8f\n\n\u6bcf\u6b21\u8d2a\u5fc3\u9009\u6700\u5c0f\u7684\u5f80\u4e0b\u8dd1\u4e00\u904dDFS\n\n\u5feb\u6392\u590d\u6742\u5ea6O(nlogn)\n\nDFS\u590d\u6742\u5ea6O(n)\n\n## \u540e40\u5206\n\n\u57fa\u73af\u6811\n\nn<5000\u76f4\u63a5\u679a\u4e3e\u4f9d\u6b21\u65ad\u5f00\u6bcf\u4e00\u6761\u8fb9\n\n\u63a5\u4e0b\u6765\u7528\u524d60\u5206\u505a\u6cd5\u52a0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u526a\u679d\n\n\u5220\u8fb9+DFS\u590d\u6742\u5ea6O(n^2)\n\n\u5b9e\u6d4b\u7528\u65f6101ms\n\n~~\u5438\u6c27~~O2\u4f18\u531691ms\n\n\u5269\u4e0b\u7684\u4e00\u4e9b\u7ec6\u8282\u76f4\u63a5\u5728\u4ee3\u7801\u4e0a\u6ce8\u91ca\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,sum[5001],ans[5001],v;\nbool z[5001],w,e;\nstruct node\n{\n\tint to,sign;\n\t//to\u5b58\u8fd9\u6761\u8fb9\u7684\u76ee\u7684\u5730,sign\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\n}\na[5001][7];\n//a[i][j] \u7b2ci\u4e2a\u70b9\u7684\u7b2cj\u6761\u8fb9\n```\n\u8fd9\u91cc\u6211\u539f\u6765\u5f00\u7684[5001][5001]MLE\u4e94\u4e2a\u70b9\n\n\u540e\u6765\n~~\u7ecf\u8fc7\u51b7\u9759\u5206\u6790\u7a0d\u52a0\u601d\u7d22~~\n~~\u591a\u6b21\u5c1d\u8bd5~~\n\u53d1\u73b0\u53ea\u7528\u5f00[5001][7]\n```cpp\n//\u5927\u6cd5\u5e08\nvoid dfs(int x,int s)//x\u4e3a\u5f53\u524d\u70b9\u7f16\u53f7,s\u4e3a\u8981\u5220\u7684\u8fb9\u7684\u7f16\u53f7\n{\n\tv++;//\u5df2\u7ecf\u5230\u8fc7\u7684\u70b9\n\tz[x]=1;//\u6253\u4e0a\u6807\u8bb0\n\t//\u8bb0\u5f55\u7b54\u6848&\u526a\u679d\n\tif(ans[v]==0||e)//\u5982\u679c\u8fd8\u6ca1\u66f4\u65b0\u7b54\u6848\u6216\u5f53\u524d\u7b54\u6848\u5df2\u5c0f\u4e8e\u4e4b\u524d\u7684\u7b54\u6848\n\t{\n\t\tans[v]=x;//\u66f4\u65b0\u7b54\u6848\n\t}\n\telse\n\t{\n\t\tif(x>ans[v])//\u5982\u679c\u5f53\u524d\u7b54\u6848\u5927\u4e8e\u539f\u6709\u7b54\u6848\n\t\t{\n\t\t\tw=1;\n\t\t\treturn;//\u6253\u4e0a\u6807\u8bb0\u5e76\u9000\u51fa\n\t\t}\n\t\tif(x<ans[v])//\u5982\u679c\u5f53\u524d\u7b54\u6848\u5c0f\u4e8e\u539f\u6709\u7b54\u6848\n\t\t{\n\t\t\tans[v]=x;//\u66f4\u65b0\u7b54\u6848\n\t\t\te=1;//\u6253\u4e0a\u6807\u8bb0\u66f4\u65b0\u540e\u9762\u7684\u6240\u6709\u7b54\u6848\n\t\t}\n\t}\n\tif(v==n)//\u5df2\u8dd1\u5b8c\u76f4\u63a5\u9000\u51fa\n\t{\n\t\treturn;\n\t}\n\tfor(int i=1;i<=sum[x];i++)//\u4ece\u5c0f\u5230\u5927\u5f80\u4e0b\u8dd1\n\t{\n\t\tif(!z[a[x][i].to]&&a[x][i].sign!=s)//\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u5230\u8fc7&&\u8fd9\u6761\u8fb9\u4e0d\u662f\u88ab\u5220\u7684\u8fb9\n\t\t{\n\t\t\tdfs(a[x][i].to,s);\n\t\t}\n\t\tif(w)//\u5f53\u524d\u7b54\u6848\u5df2\u5927\u4e8e\u539f\u6709\u7b54\u6848\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\treturn;\n}\nbool cmp(node x,node y)\n{\n\treturn x.to<y.to;//\u6309\u70b9\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tsum[x]++;//\u5f53\u524d\u70b9\u51fa\u8fb9++;\n\t\tsum[y]++;//\u65e0\u5411\u56fe\u4e24\u4e2a\u65b9\u5411\u90fd\u8981\u5b58\n\t\ta[x][sum[x]].to=y;\n\t\ta[y][sum[y]].to=x;//\u8bb0\u5f55\u8be5\u8fb9\u76ee\u7684\u5730\n\t\ta[x][sum[x]].sign=i;\n\t\ta[y][sum[y]].sign=i;//\u8bb0\u5f55\u8be5\u8fb9\u7f16\u53f7\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tsort(a[i]+1,a[i]+sum[i]+1,cmp);//\u5bf9\u5404\u4e2a\u70b9\u7684\u51fa\u8fb9\u6392\u5e8f\n\t}\n\tif(m==n)//\u57fa\u73af\u6811\n\t{\n\t\tfor(int i=1;i<=m;i++)//\u679a\u4e3e\u8981\u5220\u7684\u8fb9\n\t\t{\n\t\t\tv=0;\n\t\t\tw=0;\n\t\t\te=0;\n\t\t\tmemset(z,0,sizeof(z));\n\t\t\tdfs(1,i);\n\t\t\tif(v!=n&&ans[n]==0)//\u5982\u679c\u6ca1\u6cd5\u904d\u5386\u5b8c\u5c31\u6e05\u7a7aans\u6570\u7ec4\n\t\t\t{\n\t\t\t    memset(ans,0,sizeof(ans));\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tprintf(\"%d \",ans[i]);//\u8f93\u51fa\u7b54\u6848\n\t\t}\n\t}\n\telse//\u666e\u901a\u6811\n\t{\n\t\tv=0;\n\t\tdfs(1,-1);//\u4e0d\u7528\u5220\u8fb9\u968f\u4fbf\u7ed9\u4e2a\u6ca1\u7528\u7684\u7f16\u53f7\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tprintf(\"%d \",ans[i]);//\u8f93\u51fa\u7b54\u6848\n\t\t}\n\t}\n}\n```",
        "postTime": 1572442388,
        "uid": 14698,
        "name": "_Ayanami_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u4f5c\u4e3aNOIPd2t1,\u90e8\u5206\u5206\u8fd8\u662f\u7ed9\u7684\u5f88\u5145\u8db3\u7684\u3002\n\n\u9996\u514860\u5206\u662f\u6811\uff0c\u5bf9\u4e8e\u6811\u800c\u8a00\uff0c\u7531\u4e8e\u9700\u8981\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u4ece1\u53f7\u8282\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u4e4b\u540e\u627e\u5b83\u7684\u5b50\u8282\u70b9\uff0c\u4ece\u5c0f\u5f80\u5927\u627e\uff0c\u518d\u5206\u522b\u4ee5\u5176\u5b50\u8282\u70b9\u4e3a\u6839\u5411\u4e0b\u641c\u7d22\u904d\u5386\u3002\u603b\u800c\u8a00\u4e4b\uff0c60\u5206\u7684\u8d2a\u5fc3\u662f\u5f88\u597d\u60f3\u4e5f\u662f\u5f88\u597d\u5199\u7684\uff0c\u800c\u4e14\u4ee3\u7801\u4e5f\u5f88\u77ed\u3002\n\n\u5176\u6b2140\u5206\u662f\u57fa\u73af\u6811\uff0c\u4e00\u5f00\u59cb\u5e76\u6ca1\u6709\u60f3\u5230\u62c6\u8fb9\u8fd9\u4e2a\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u5148\u770b\u4e86\u6570\u636e\uff0c\u53d1\u73b0\u670912\u5206\u662f\u73af\uff0c\u4e8e\u662f\u518d\u5bf9\u73af\u8fdb\u884c\u5904\u7406\uff0c\u4f9d\u7136\u4ece1\u53f7\u8282\u70b9\u5f00\u59cb\u627e\uff0c\u6839\u8282\u70b9\u4e0b\u67092\u6761\u8def\u5f84\uff0c\u627e\u5230\u5c0f\u7684\u5b50\u8282\u70b9\uff0c\u5e76\u8bb0\u5f55\u4e0b\u5927\u7684\u5b50\u8282\u70b9\uff0c\u4e4b\u540e\u4ece\u5c0f\u8282\u70b9\u5411\u4e0b\u641c\u7d22\uff0c\u82e5\u53d1\u73b0\u5f53\u524d\u8282\u70b9\u7684\u5e8f\u53f7\u5927\u4e8e\u4e4b\u524d\u5b58\u50a8\u7684\u8282\u70b9\u5e8f\u53f7\uff0c\u5219\u9000\u51fadfs\uff0c\u4ece\u4e00\u53f7\u6839\u8282\u70b9\u7684\u53e6\u4e00\u5934\u5f00\u59cb\u641c\u7d22\uff0c\u76f4\u5230\u8dd1\u5b8c\u6574\u5f20\u56fe\u3002\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u5047\u8bbe\u6709m\u6761\u8fb9\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u65c5\u884c\uff0c\u6709\u4e14\u4ec5\u6709m-1\u6761\u8fb9\u80fd\u88ab\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u65c5\u884c\u7684\u8def\u5f84\u4ecd\u65e7\u662f\u4e00\u68f5\u6811\u3002\n\n\u4e4b\u540e\u4fbf\u60f3\u5230\u4e86\u62c6\u8fb9\u3002\u9996\u5148\u9700\u8981\u627e\u73af\u3002\n\n\u5bf9\u56fe\u8fdb\u884cdfs\u904d\u5386\uff0c\u7528\u6808\u5b58\u50a8\uff0c\u521a\u904d\u5386\u5230\u8be5\u8282\u70b9\u65f6\u5c06\u8be5\u8282\u70b9\u5165\u6808\uff0c\u5f85\u5230\u628a\u4e0e\u8be5\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\u5168\u90e8\u8dd1\u5b8c\u4e86\u4e4b\u540e\uff0c\u5c06\u8be5\u8282\u70b9\u51fa\u6808\u3002\u82e5\u53d1\u73b0\u67d0\u4e00\u6761\u8fb9\u7684\u76ee\u7684\u5730\u5df2\u5728\u6808\u4e2d\u4e14\u5176\u4e0d\u662f\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u5219\u5c06\u6808\u4e2d\u7684\u8282\u70b9\u53d6\u51fa\u5230\u90a3\u4e00\u6761\u8fb9\u7684\u7ec8\u70b9\u3002\u53d6\u51fa\u7684\u8282\u70b9\u6784\u6210\u4e00\u4e2a\u73af\u3002\n\n\u518d\u5bf9\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u4e00\u6b21\u62c6\u9664\uff0c\u57fa\u73af\u6811\u5c31\u53d8\u6210\u4e86\u6811\uff0c\u518d\u8dd1\u8d2a\u5fc3\uff0c\u5e76\u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u987a\u5e8f\uff0c\u5728\u62c6\u9664\u5b8c\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u540e\uff0c\u627e\u5230\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5982\u4f55\u5b58\u8fb9\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u5bf9\u6240\u6709\u7684\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u518d\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u3002\n\n\u518d\u5949\u732e\u4e0a\u5947\u4e11\u65e0\u6bd4\u7684\u4ee3\u7801\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n\tif(ch=='-') f=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn x*f;\n}//\u5feb\u8bfb\u4e0d\u89e3\u91ca\u3002\nconst int mx=1e5;\nstruct edge\n{\n\tint to,next;\n};\nedge t[mx];\nint n,m,head[mx],cnt;\nvoid add_edge(int u,int v)\n{\n\tt[++cnt].to=v;\n\tt[cnt].next=head[u];\n\thead[u]=cnt;\n}\nint bj[mx];\nvoid dfs(int u)\n{\n\tprintf(\"%d \",u); bj[u]=1;\n\tfor(register int i=head[u];i;i=t[i].next)\n\t{\n\t\tint v=t[i].to;\n\t\tif(!bj[v]) dfs(v);\n\t}\n}//\u904d\u538660\u5206\u7684\u6811\u3002\nint sta[mx],top,huan[mx],num,ans[mx],flag,vis[mx];\nvoid dfs2(int u,int fa)\n{\n\tif(vis[u])\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tint v=sta[top--];\n\t\t\thuan[++num]=v;\n\t\t\tif(u==v) break;\n\t\t}\n\t\tflag=1;return;\n\t}\n\tvis[u]=1;sta[++top]=u;\n\tfor(register int i=head[u];i;i=t[i].next)\n\t{\n\t\tint v=t[i].to;\n\t\tif(v!=fa) dfs2(v,u);\n\t\tif(flag) return;\n\t}\n\t--top;\n}\nint cun[mx];\nint s,e;\nvoid dfs3(int u)\n{\n\tcun[++top]=u; bj[u]=1;\n\tfor(register int i=head[u];i;i=t[i].next)\n\t{\n\t\tint v=t[i].to;\n\t\tif((u==s&&v==e)||(u==e&&v==s)) continue;\n\t\tif(!bj[v]) dfs3(v);\n\t}\n}\nstruct node\n{\n\tint u,v;\n};\nnode a[mx];\nbool cmp(node x,node y)\n{\n\treturn x.v>y.v;\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\ta[i].u=read();a[i].v=read();\n\t\ta[i+m].u=a[i].v;a[i+m].v=a[i].u;\n\t}\n\tsort(a+1,a+2*m+1,cmp);\n\tfor(register int i=1;i<=m*2;++i) add_edge(a[i].u,a[i].v);\n\tif(n==m+1) dfs(1);\n\telse\n\t{\n\t\tdfs2(1,0);memset(ans,0x3f,sizeof(ans));huan[num+1]=huan[1];\n\t\tfor(register int i=1;i<=num;++i)\n\t\t{\n\t\t\ts=huan[i];e=huan[i+1];\n\t\t\tmemset(bj,0,sizeof(bj));\n\t\t\tmemset(cun,0,sizeof(cun));top=0;flag=0;\n\t\t\tdfs3(1);\n\t\t\tfor(register int j=1;j<=n;++j)\n\t\t\t{\n\t\t\t\tif(ans[j]<cun[j]) \n\t\t\t\t{\n\t\t\t\t\tflag=0;break;\n\t\t\t\t}\n\t\t\t\tif(ans[j]>cun[j])\n\t\t\t\t{\n\t\t\t\t\tflag=1;break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag)for(register int j=1;j<=n;++j)\n\t\t\t\tans[j]=cun[j];\n\t\t}\n\t\tfor(register int i=1;i<=n;++i)  printf(\"%d \",ans[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u5c31\u662f\u5728\u628a\u73af\u627e\u51fa\u540e\uff0c\u4e00\u5b9a\u8981\u5728\u73af\u7684\u6570\u7ec4\u540e\u52a0\u4e0a\u73af\u9996\uff0c\u4e0d\u7136\u73af\u9996\u4e0e\u73af\u5c3e\u6240\u8fde\u6210\u7684\u8fb9\u65e0\u6cd5\u88ab\u5220\u9664\u3002\n\n\u795d\u5927\u5bb6csp2019++;",
        "postTime": 1572103140,
        "uid": 67827,
        "name": "\u76d7\u68a6\u9ed1\u5ba2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "# P5022 \u3010\u65c5\u884c\u3011\n\u4e00\u9053\u57fa\u73af\u6811\u7684\u9898\u8bb0\u5f97\u6211\u5f53\u65f6\u5728\u8003\u573a\u8fdedfs\u90fd\u6ca1\u60f3\u5230\uff08\u6211\u771f\u7684\u662f\u592a\u5f31\u4e86QAQ\uff09\n\n\u8fd9\u9053\u9898\u77e5\u9053\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5f53n = m - 1\u65f6\uff0c\u56fe\u662f\u4e00\u4e2a\u6811\uff0c\u76f4\u63a5\u4ece\u7b2c\u4e00\u4e2a\u70b9dfs\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0cn = m\u65f6\u8bf4\u660e\u56fe\u91cc\u6709\u4e00\u4e2a\u73af\uff0c\u5220\u6389\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u8ba9\u56fe\u53d8\u6210\u4e00\u4e2a\u6570\uff0c\u679a\u4e3e\u5220\u9664\u90a3\u4e00\u6761\u8fb9\u5f97\u5230\u7684\u7b54\u6848\u5b57\u5178\u5e8f\u6700\u5c0f\u5373\u53ef\u3002\n\n\u6211\u4eec\u8001\u5e08\u521a\u5b66\u56fe\u5c31\u8ba9\u6211\u4eec\u505a\u8fd9\u9053\u9898\uff0c\u603b\u4e4b\u6211\u89c9\u5f97\u7528\u6765\u7ec3\u4e60\u56fe\u7684\u57fa\u672c\u64cd\u4f5c\u662f\u6781\u597d\u7684\u3002\u8fd9\u9053\u9898\u6211\u5927\u6982\u4ea4\u4e86\u5341\u51e0\u904d\u624d\u8fc7\uff0c\u56e0\u4e3adfs\u8981\u6c42\u5148\u8bbf\u95ee\u7f16\u53f7\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u7b2c\u4e00\u6b21\u4e00\u4e0a\u6765\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0c\u7ed3\u679cT\u98de\u4e86~~\u60f3\u60f3\u4e3a\u4ec0\u4e48~~\uff0c\u540e\u6765\u542d\u54e7\u542d\u54e7\u81ea\u5b66\u4e86\u90bb\u63a5\u94fe\u8868\u7ed3\u679c\u5fd8\u4e86\u6392\u5e8f......\u6700\u540e\u505a\u8db3\u4e86\u529f\u8bfe\u4e0astd\uff0c\u53c8T\u4e86\u4e09\u4e2a\u70b9~~\u5f88\u660e\u663e\u4e3a\u4ec0\u4e48~~\n\n\u4ed4\u7ec6\u7422\u78e8\u4e86\u4e00\u4e0b\u53d1\u73b0\u4e00\u4e2a~~\u5c0f~~\u4f18\u5316\uff0c\u5728n = m\u65f6\uff0c\u5f53\u6211\u4eec\u5220\u9664\u4e86\u4e00\u6761\u8fb9\u5f00\u59cbdfs\uff08\u7b54\u6848\u5b58\u5728res\u6570\u7ec4\u91cc\uff09\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0res[u] > ans[u], \u5219res\u4e00\u5b9a\u4e0d\u6bd4ans\u4f18\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u51fa\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5AC\u6700\u540e\u4e09\u4e2a\u70b9\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#define ll long long\n#define N 5005\nusing namespace std;\n\nint n, m, tot, vis[N], ans[N], res[N], inp[N][2];\nbool ian = 0; //\u4ee3\u8868res\u4e2d\u7684\u7b54\u6848\u662f\u5426\u6bd4ans\u4f18\n\nvector < int > mp[N];\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') { x = x * 10 + c - '0'; c = getchar(); }\n\treturn x * f;\n}\n\nvoid addedge(int x, int y)\n{\n\tmp[x].push_back(y);\n\tmp[y].push_back(x);\n}\n\nvoid dfs(int x, int d1, int d2) //d1 d2 \u8868\u793a\u5220\u9664\u7684\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\n{\n\tvis[x] = true;\n\tres[++tot] = x;\n\tif (x < ans[tot]) ian = true; //\u5982\u679cres[x] < ans[x]\uff0c\u5219\u65e0\u8bbares\u540e\u9762\u662f\u4ec0\u4e48\uff0cres\u90fd\u4e00\u5b9a\u6bd4ans\u4f18\n\tif (x > ans[tot] && !ian) { vis[x] = false; return; } //\u5982\u679cres[x] > ans[x] \u4e14x\u524d\u9762\u7684\u7b54\u6848\u90fd\u4e00\u6837\uff0c\u5219res\u4e00\u5b9a\u6ca1\u6709ans\u4f18\n\tint l = mp[x].size();\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tif (!vis[mp[x][i]] && !((x == d1 && mp[x][i] == d2) || (x == d2 && mp[x][i] == d1)))\n\t\t\tdfs(mp[x][i], d1, d2);\n\t}\n\tvis[x] = false;//\u522b\u5fd8\u4e86\u628a\u503c\u8d4b\u56de\u53bb\n}\n\nint main()\n{\n\tmemset(ans, 0x3f3f3f, sizeof(ans));\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; i++)\n\t\taddedge(inp[i][0] = read(), inp[i][1] = read());\n\tfor (int i = 1; i <= n; i++)\n\t\tsort(mp[i].begin(), mp[i].end()); //\u4e00\u5b9a\u522b\u5fd8\u4e86\u6392\u5e8f\uff0c\u4e0d\u7136dfs\u51fa\u6765\u7684\u4e0d\u4e00\u5b9a\u5b57\u5178\u5e8f\u6700\u5c0f\n\tif (n == m)//\u6709\u73af\n\t{\n\t\tfor (int i = 1; i <= m; i++)//\u679a\u4e3e\u5220\u8fb9\n\t\t{\n\t\t\ttot = 0, ian = false;\n\t\t\tdfs(1, inp[i][0], inp[i][1]);\n\t\t\tif (tot != n) continue;\n\t\t\tint flag = false; //res\u6bd4ans\u66f4\u4f18\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t{\n\t\t\t\tif (res[i] < ans[i]) { flag = true; break; }\n\t\t\t\telse if (res[i] > ans[i]) { break; }\n\t\t\t}//\u770b\u770bans\u548cres\u54ea\u4e00\u4e2a\u66f4\u4f18\n\t\t\tif (flag)//\u5982\u679cres\u66f4\u4f18\u5219\u628ares\u8d4b\u7ed9ans\n\t\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\t\tans[i] = res[i];\n\t\t}\n\t}\n\telse//\u6ca1\u6709\u73af\n\t{\n\t\tdfs(1, 0, 0);\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tans[i] = res[i];\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tcout << ans[i] << \" \";//\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n",
        "postTime": 1566113688,
        "uid": 92008,
        "name": "Yuyuanqi",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "## \u80cc\u666f\n\u7ecf\u8fc7\u4e00\u4e0a\u5348\u6293\u72c2\u7684\u4fee\u6539\uff0c~~\u53ea\u4f1aBfs\u5efa\u6811\u7684\u6211\u53d1\u73b0\u4e0d\u7528Dfs\u6839\u672c\u770b\u4e0d\u61c2\u9898\u89e3~~\uff0c\u7ec8\u4e8e\uff0c~~\u7167\u7740\u9898\u89e3\u4e00\u884c\u4e00\u884c\u5730\u6539~~\uff0c~~AC~~TLE\u4e86\uff0c88\u5206\u3002\n\u4e8e\u662f\uff0c\u6211\u82b1\u4e86\u4e00\u4e2d\u5348\u7684\u65f6\u95f4\uff0c\u60f3\u51fa\u4e86\u4e00\u79cd\u7384\u5b66\u7684\u4f18\u5316\u65b9\u6cd5\uff0cAC\u4e86\u3002\n## \u601d\u8def\n\u76f8\u4fe1\u5df2\u7ecf\u6709\u5f88\u591a\u5927\u4f6c\u8bb2\u6e05\u695a\u4e86\uff0c\u5f53m == n - 1\u65f6\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u904d\u5386\u6574\u68f5\u6811\uff0cm == n\u65f6\u627e\u5230\u552f\u4e00\u7684\u4e00\u4e2a\u73af\uff0c\u5e76\u8bb0\u5f55\u8fd9\u4e2a\u73af\u7684\u6240\u6709\u8fb9\uff0c\u6328\u4e2a\u8bd5\u7740\u65ad\u5f00\u6bcf\u6761\u8fb9\uff0c\u7136\u540e\u4e0e\u5f53\u524d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u89e3\u6bd4\u8f83\u5e76\u66f4\u65b0\u7b54\u6848\u3002\n## 88\u5206\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\nusing namespace std;\nstruct node{\n\tint val,d,f;\n}t[50005];\nstruct edge{\n\tint x,y,del;\n}e[100005];\nbool cmpe(edge e1,edge e2){\n\treturn e1.x < e2.x ? 1 : (e1.x == e2.x ? e1.y < e2.y : 0);\n}\nbool vis[50005] = {};\nint head[50005] = {},len[50005] = {},c[100005] = {},ans[50005] = {},sum,upd,n,m,end;\nvoid dfs(int k){//\u5904\u7406m == n - 1\u7684\u60c5\u51b5\uff0c\u7a33\u62ff60\u5206\n\tcout<<k<<' ';//\u8d2a\u5fc3\u8f93\u51fa\n\tint i;\n\tvis[k] = 1;\n\tpriority_queue <int,vector<int>,greater<int> > p;\n\tfor(i = head[k];i < head[k] + len[k];i++){\n\t\tif(!vis[e[i].y])\n\t\t\tp.push(e[i].y);\n\t}\n\twhile(!p.empty()){\n\t\tdfs(p.top());//\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u904d\u5386\u5b50\u8282\u70b9\n\t\tp.pop();\n\t}\n}\nvoid spdfs(int k){//\u5904\u7406m == n\u7684\u60c5\u51b5\n\tsum++;      //\u5f53\u524d\u4e0b\u6807\n\tvis[k] = 1;  // \u8bb0\u5f55\u5df2\u8d70\u8fc7\u7684\u70b9\n\tif(end)\t//\u82e5\u4e4b\u524d\u8f83\u5c0f\u7684\u70b9\u4e0d\u53ef\u53d6\uff0c\u5219\u6bd4\u5b83\u6743\u503c\u66f4\u5927\u7684\u70b9\u4ea6\u4e0d\u53ef\u53d6\n\t\treturn;\n\tif(!upd && ans[sum] < k){//\u82e5\u5728\u66f4\u65b0\u72b6\u6001\uff0c\u5219\u4e0d\u8fdb\u884c\u526a\u679d\n\t\tend = 1;\n\t\treturn;\t\n\t}\n\tif(ans[sum] > k || upd){//\u82e5\u8be5\u70b9\u53ef\u53d6\uff0c\u5219\u8fdb\u5165\u66f4\u65b0\u6a21\u5f0f\n\t\tans[sum] = k;\n\t\tupd = 1;\n\t}\n\tfor(int i = head[k];i < head[k] + len[k];i++){\n\t\tif(!e[i].del || vis[e[i].y])//\u5224\u65ad\u8be5\u8fb9\u662f\u5426\u88ab\u6211\u4eec\u526a\u6389\n\t\t\tcontinue;\n\t\tspdfs(e[i].y);\n\t}\n}\nint begin = 0;\nbool findc(int p,int f){//\u627e\u73af\n\tif(begin != 0)\n\t\treturn 0;\n\tvis[p] = 1;\n\tfor(int i = head[p];i < head[p] + len[p];i++){\n\t\tif(e[i].y == f)\n\t\t\tcontinue;\n\t\tif(vis[e[i].y]){//\u5224\u65ad\u73af\u7684\u8d77\u70b9\u5e76\u8bb0\u5f55\n\t\t\tbegin = e[i].y;\n\t\t\tc[++c[0]] = i;\n\t\t\treturn 1;\n\t\t}\n\t\tif(findc(e[i].y,p)){//\u5224\u65ad\u8be5\u70b9\u662f\u5426\u5728\u73af\u4e2d\n\t\t\tif(e[i].y == begin)//\u9632\u6b62\u91cd\u590d\u8bb0\u5f55\n\t\t\t\treturn 0;\n\t\t\telse{\n\t\t\t\tc[++c[0]] = i;//c\u6570\u7ec4\u5b58\u73af\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tint i,j,mx = 0,mp = 0;\n\tcin>>n>>m;\n\tfor(i = 1;i <= m;i++){//\u8f93\u5165\uff0c\u5b58\u50a8\u53cc\u5411\u8fb9\n\t\tscanf(\"%d%d\",&e[i].x,&e[i].y);\n\t\te[i + m] = (edge){e[i].y,e[i].x}; \n\t\te[i].del = e[i + m].del = 1;\n\t}\n\tsort(e + 1,e + 2 * m + 1,cmpe);//\u5bf9\u6240\u6709\u8fb9\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n\tfor(i = 1;i <= 2 * m;i++){    //\u5c06\u6240\u6709\u8d77\u70b9\u4e00\u81f4\u7684\u8fb9\u5f52\u7c7b\n\t\tif(!head[e[i].x])\n\t\t\thead[e[i].x] = i;\n\t\tlen[e[i].x]++;\n\t\tif(len[e[i].x] > mx){\n\t\t\tmx = len[e[i].x];\n\t\t\tmp = e[i].x;\n\t\t}\n\t}\n\tif(m == n - 1){//\u65e0\u9700\u591a\u8a00\n\t\tdfs(1);\n\t}\n\tif(m == n){\n\t\tmemset(ans,0x3f3f3f,sizeof(ans));//\u8bbe\u4e3a\u65e0\u7a77\u5927\n\t\tfindc(1,0);               //\u627e\u73af\n\t\tfor(i = 1;i <= c[0];i++){\n\t\t\te[c[i]].del = 0;         //\u6328\u4e2a\u5220\u8fb9\n\t\t\tfor(j = head[e[c[i]].y];j < head[e[c[i]].y] + len[e[c[i]].y];j++){              \n\t\t\t\tif(e[j].y == e[c[i]].x){ //\u5220\u9664\u53cc\u5411\u8fb9\n\t\t\t\t\te[j].del = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemset(vis,0,sizeof(vis));  \n\t\t\tsum = upd = end = 0;       //\u521d\u59cb\u5316\n\t\t\tspdfs(1);              // \u8d70\u8d77\uff01\n\t\t\te[c[i]].del = e[j].del = 1;  //\u6062\u590d\u53cc\u5411\u8fb9\n\t\t}\n\t\tfor(i = 1;i <= n;i++)\n\t\t\tcout<<ans[i]<<' ';\n\t}\n} \n```\n\u7ed3\u679c\u6700\u540e\u4e09\u4e2a\u70b9TLE\n## \u4f18\u5316\n\u6ce8\u610f\u4e0a\u9762\u4ee3\u7801\u4e2d\u8fd9\u4e00\u884c\n```cpp\nfindc(1,0); \n```\n\u6211\u8ba4\u4e3a\u51fa\u9898\u4eba\u7edd\u5bf9\u5361\u4e86\u6570\u636e\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\uff0c\u8d2a\u5fc3\u5730\u4ece\u8fb9\u6570\u6700\u591a\u7684\u70b9\u5f00\u59cb\u627e\uff0c\u5373\u6539\u4e3a\n```\nfindc(mp,0); \n```\nmp\u4e3a\u8fb9\u6570\u6700\u591a\u7684\u70b9\n\nAC\n\n\n\n\n\n",
        "postTime": 1566113355,
        "uid": 141090,
        "name": "\u674e\u4e50\u5e73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "# \u7b97\u6cd5\uff1a\u62d3\u6251\u6392\u5e8f+dfs\n\n### \u9898\u76ee\u7ed9\u7684\u4fe1\u606f:\n1. \u8fde\u901a\u56fe\uff1b\n2. \u65e0\u91cd\u8fb9\uff0c\u8fb9\u4e3a\u65e0\u5411\u8fb9\uff1b\n3. \u8fb9\u6570\u6700\u591a\u662fm == n\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u68f5\u6811\u52a01\u6761\u8fb9\u7684\u73af\uff1b\n\n### \u601d\u8def\uff1a\n\n\u60c5\u51b51: \u5982\u679c  m < n\uff0c\u5219\u8bf4\u660e\u662f\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u53ea\u8981\u4ece\u70b91\u5f00\u59cb\u641c\u7d22\uff0c\u6309\u7167\u70b9\u7684\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\n\n\u641c\u7d22\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u8def\u5f84\uff1b\n\n\u60c5\u51b52\uff1a\n1. \u5982\u679c m == n, \u662f\u4e00\u68f5\u6811\u52a01\u6761\u8fb9\u7684\u73af\u3002\u90a3\u4e48\u5728\u73af\u4e0a\u62c6\u9664\u4e00\u6761\u8fb9\u5c31\u53d8\u6210\u4e86\u6811\uff0c\u56e0\u6b64\uff0c\n\n2. \u627e\u51fa\u6240\u6709\u73af\u4e0a\u7684\u8fb9\uff0c\u4f9d\u6b21\u679a\u4e3e\u5220\u9664\uff0c\u518ddfs\u641c\u7d22\uff0c\u5c06\u6bcf\u6b21\u5220\u8fb9\u5f97\u5230\u7684\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u53d6\u6700\u5c0f\u7684\u8def\u5f84\uff1b\n\n3. \u627e\u73af\u4e0a\u7684\u8fb9\uff0c\u8f6c\u5316\u4e3a\u627e\u73af\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u5982\u679c\u4e3a1\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u5728\u73af\u4e0a\uff0c\u53ef\u4ee5\u6392\u9664\u6389\uff1b\n\n**\u4ee3\u7801\u9644\u4e0a\uff0c\u5bf9\u7740\u4ee3\u7801\u8bb2\uff1a**\n\n```cpp\n#include<bits/stdc++.h> \\\\\u4e07\u80fd\u8111\u888b\nusing namespace std;\nint n,m,ans[5010],step,in[5010],dx,dy,res[5010];\nbool bj[5010],tree[5010],del[5010][5010];\nvector<int> nei[5010];\nvoid dfs(int x){ \\\\dfs\u627e\u8def\u5f84\n\tif(step>n) return;\n\tans[++step]=x;\n\tbj[x]=1;\n\tfor(int j=0;j<nei[x].size();j++){\n\t\tint next=nei[x][j];\n\t\tif(bj[next]||(dx==x&&dy==next)||(dx==next&&dy==x))\n\t\t\tcontinue;\n\t\tdfs(next);\n\t}\n\treturn;\n}\nvoid find_circle(){ //\u5c06\u975e\u73af\u4e0a\u7684\u70b9\u6807\u8bb0\u4e3atree[i]=true \n\tqueue<int> q;\n\tfor(int i=1;i<=n;i++)\n\t\tif(in[i]==1) //\u5165\u5ea6\u4e3a1\u7684\u70b9\u4e00\u5b9a\u4e0d\u5728\u73af\u4e0a \n\t\t\tq.push(i);\n\twhile(!q.empty()){\n\t\tint cur=q.front();\n\t\tq.pop();\n\t\ttree[cur]=1; //\u5728\u6811\u4e0a\u7684\u8fb9 \uff0c\u4e5f\u5c31\u662f\u4e0d\u5728\u73af\u4e2d \n\t\tfor(int i=0;i<nei[cur].size();i++){\n\t\t\tint next=nei[cur][i];\n\t\t\tin[next]--;\n\t\t\tif(in[next]==1) //\u5165\u5ea6\u4e3a1\u7684\u8fb9\u4e0d\u53ef\u80fd\u4e3a\u73af\u4e0a\u7684\u8fb9 \n\t\t\t\tq.push(next);\n\t\t}\n\t}\n\treturn;\n}\nbool check(){ //\u5982\u679c\u5f53\u524d\u8def\u5f84\u5b57\u5178\u5e8f\u66f4\u5c0f\uff0c\u8fd4\u56detrue \n\tif(res[1]==0) //\u7b2c\u4e00\u6b21\u68c0\u67e5 \n\t\treturn 1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(ans[i]==res[i])\n\t\t\tcontinue;\n\t\tif(ans[i]<res[i])\n\t\t\treturn 1;\n\t\treturn 0;\n\t}\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tcin>>x>>y; //\u8f93\u5165 \n\t\tnei[x].push_back(y); //\u521d\u59cb\u5316 \n\t\tnei[y].push_back(x);\n\t\tin[x]++; //\u5165\u5ea6++ \n\t\tin[y]++;\n\t}\n\tfor(int i=1;i<=n;i++) //\u5c06\u6bcf\u4e2a\u70b9\u7684\u90bb\u5c45\u6392\u5e8f\uff0c\u4fdd\u8bc1\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f \n\t\tsort(nei[i].begin(),nei[i].end());\n\tif(m==n-1){ //\u975e\u73af\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u641c\u7d22\u4e00\u6b21\u51fa\u7ed3\u679c \n\t\tdfs(1);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tcout<<ans[i]<<' ';\n\t\treturn 0;\n\t}\n\t//\u6709\u73af\uff0c\u5c06\u73af\u4e0a\u7684\u8fb9\u4f9d\u6b21\u5220\u9664\uff0c\u518ddfs \n\tfind_circle(); //\u8bc6\u522b\u73af\u4e0a\u7684\u8fb9 \uff08\u62d3\u6251\u6392\u5e8f\uff09 \n\tfor(int i=1;i<=n;i++){ //\u679a\u4e3e\u73af\u4e0a\u7684\u8fb9\uff0c\u5220\u9664\u4e4b\n\t\tif(tree[i])\n\t\t\tcontinue;\n\t\tfor(int j=0;j<nei[i].size();j++){\n\t\t\tint next=nei[i][j];\n\t\t\tif(tree[next]) //\u5728\u6811\u4e0a\u7684\u70b9 \n\t\t\t\tcontinue;\n\t\t\tdx=i; //\u627e\u5230\u4e00\u5bf9\u5728\u73af\u4e0a\u7684\u8fb9\uff0c\u6807\u8bb0\u5220\u9664\n\t\t\tdy=next;\n\t\t\tif(del[dx][dy]) //\u5220\u8fc7\u7684\u8fb9\u4e0d\u518d\u5220 \n\t\t\t\tcontinue;\n\t\t\tdel[dx][dy]=del[dy][dx]=1;\n\t\t\tmemset(bj,0,sizeof(bj)); //\u591a\u6b21dfs \n\t\t\tstep=0;\n\t\t\tdfs(1);\n\t\t\tif(check())\n\t\t\t\tfor(int i=1;i<=n;i++)\n\t\t\t\t\tres[i]=ans[i]; //\u66f4\u65b0 \n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<res[i]<<' '; //\u8f93\u51fa \n\treturn 0; \\\\\u7ed3\u675f\n}\n```\n",
        "postTime": 1565617236,
        "uid": 113202,
        "name": "\u6768\u6c0f\u4e4b\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u5f53m==n-1\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u68f5\u6811\uff0c\u4ece\u7ed3\u70b91\u5904\u76f4\u63a5\u627e\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u518d\u4ece\u8be5\u8282\u70b9\u5f80\u4e0b\u627e\uff0cDfs\u57fa\u672c\u4e0a\u5c31\u89e3\u51b3\u4e86\n\n\u5f53m==n\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u6bcf\u6761\u8fb9\u90fd\u65ad\u4e00\u6b21\uff0c\u6bcf\u6b21\u53d8\u6210\u4e0a\u4e00\u79cd\u60c5\u51b5\u904d\u5386\uff0c\u627e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u6b21\u5c31\u884c\u4e86\n\n\u4e2a\u4eba\u8ba4\u4e3a\u6570\u636e\u5f88\u4eba\u6027\u5316\uff0c\u526a\u679d\u5e76\u6ca1\u6709\u592a\u591a\n\n\u4ee5\u4e0b\u662f\u672c\u849f\u84bb\u7684\u8d85\u957f\u52a0\u4e00\u5806\u5e9f\u8bdd\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint s[5001][300];\nint h[5001];//\u7ed3\u70b9\u6570 \nint e[5001];//\u5224\u65ad\u662f\u5426\u7ecf\u8fc7 \nint a[5001];//\u5b58\u50a81 \nint g[5001];//\u6392\u5e8f\u7528 \nint x[5001];//\u5b58\u50a82 \nint m,n;\nint wtf;\nvoid jc()//\u66ff\u4ee3\uff0cm==n\u60c5\u51b5\u65f6\u627e\u6700\u5c0f\u5b57\u5178\u5e8f\u7528 \n{\n    if(a[m]==0) return;\n    for(int ii=1;ii<=m;ii++)\n    {\n        if(x[ii]==0||x[ii]>a[ii])\n        {\n            for(int jj=1;jj<=m;jj++)\n            {\n                x[jj]=a[jj];\n            }\n            return;\n        }\n        if(x[ii]<a[ii])\n            return;\n    }\n}\nvoid cmp(int x)//\u6392\u5e8f\uff0c\u65b9\u4fbf\u904d\u5386\n{\n    for(int i=1;i<=h[x];i++)\n        g[i]=s[x][i];\n    sort(g+1,g+h[x]+1);\n    for(int i=1;i<=h[x];i++)\n        s[x][i]=g[i];\n    return;\n}//\u4e0d\u4f1a\u5f52\u5e76\u6392\u5e8f\uff0c\u5fd8\u5404\u4f4d\u5927\u4f6c\u89c1\u8c05\nvoid tree(int x)//\u904d\u5386\n{\n    if(x==0) return;\n    if(a[m]>0) return;\n    if(e[x]==0)\n    {\n        wtf++;\n        a[wtf]=x;\n        e[x]=1;\n        for(int i=1;i<=h[x];i++)\n        {\n            if(s[x][i]>0)\n            tree(s[x][i]);\n        }\n    }\n}\nint main()\n{\n    cin>>m>>n;\n    for(int i=1;i<=n;i++)\n    {\n        int l,r;\n        cin>>l>>r; \n        h[l]++;\n        s[l][h[l]]=r;\n        h[r]++;\n        s[r][h[r]]=l;\n    }//\u5b58\u8def\n    for(int i=1;i<=m;i++)\n    {\n        cmp(i);//\u4ee5i\u4e3a\u7236\u8282\u70b9\u65f6\u5b50\u8282\u70b9\u5927\u5c0f\u6392\u5e8f\n    }\n    if(n==m-1)\n    {\n        tree(1);\n        for(int i=1;i<=m;i++)\n        {\n            cout<<a[i]<<\" \";\n        }\n        return 0;\n    } \n    if(n==m)\n    {\n    \tfor(int i=1;i<=m;i++)\n    \t{\n    \t\tfor(int j=1;j<=h[i];j++)\n    \t\t{\n    \t\t\tif(h[i]==1) break;//\u5982\u679ci\u7ed3\u70b9\u53ea\u6709\u4e00\u6761\u51fa\u8def\u5219\u76f4\u63a5\u8df3\u8fc7\n    \t\t\tif(i>s[i][j]) continue;//\u5224\u65adi\u5230s[i][j]\u7684\u8def\u5f84\u662f\u5426\u8d70\u8fc7\uff0c\u82e5\u8d70\u8fc7\u5219\u8df3\u8fc7\n    \t\t\tint c=s[i][j];\n    \t\t\tif(h[c]!=1)\n    \t\t\t{\n                    for(int k=1;k<=h[c];k++)\n    \t\t\t    {\n    \t\t\t\t    if(s[c][k]==i)\n    \t\t\t\t    {\n    \t\t\t\t    \ts[c][k]=0;\n    \t\t\t\t        s[i][j]=0;\n    \t\t\t            tree(1);\n    \t\t\t            jc();\n                            //\u4ee5\u4e0b\u662f\u56de\u6eaf\n    \t\t\t            memset(e,0,sizeof(e));\n                            memset(a,0,sizeof(a));\n                            wtf=0;\n    \t\t\t            s[i][j]=c;\n    \t\t\t            s[c][k]=i;\n                            break;//\u8def\u5f84\u904d\u5386\u5b8c\u540e\u9000\u51fa\u5faa\u73af\uff0c\u8282\u65f6\n    \t\t\t\t    }\n    \t\t\t    }\n    \t\t\t}\n    \t\t}\n    \t}\n    \tfor(int i=1;i<=m;i++)\n        {\n            cout<<x[i]<<\" \";\n        }\n        return 0;\n    }\n}\n```\n~~\u4e2a\u4eba\u8ba4\u4e3a\u5e94\u8be5\u662f\u9898\u89e3\u91cc\u9762\u5199\u7684\u6700\u5dee\u7684\u4e00\u7bc7\u4e86\uff0c\u4e0d\u559c\u8f7b\u55b7~~",
        "postTime": 1559022421,
        "uid": 113264,
        "name": "\u4e8c\u5206\u4e4b\u4e00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u8be6\u7ec6\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u601d\u8003\u96be\u5ea6\u4e0d\u9ad8\uff0c\u5c31\u662f\u5b9e\u73b0\u8d77\u6765\u7a0d\u5fae\u6709\u4e00\u70b9\u9ebb\u70e6\n\n\u5177\u4f53\u601d\u8def\uff1a\n\n**1.\u9996\u5148\u9884\u5904\u7406\uff0c\u5c06\u6bcf\u4e2a\u70b9\u6240\u8fde\u63a5\u7684\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f**\n\nPS:\u5176\u5b9e\u7406\u8bba\u4e0a\u6765\u8bf4\u6211\u7528vector\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u662f$O(n$\u00b2$log(n))$,\u4f1aTLE\uff0c\u4f46\u662f\u8fd9\u4e2a\u56fe\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u8fd1\u4f3c\u4e8e$O(nlog(n))$,\u5e76\u4e0d\u4f1aTLE\n\n**2.\u5bf9\u4e8em==n-1\uff08\u666e\u901a\u6811\uff0c60\u5206\uff09\u7684\u60c5\u51b5\uff1a**\n\n\u4f7f\u7528dfs\u505a\u4e00\u904d\u6811\u7684\u904d\u5386\uff0c**\u4ece1\u5f00\u59cb**\uff08\u5b57\u5178\u5e8f\u5fc5\u7136\u6700\u5c0f\uff09\uff0c**\u4ece\u5c0f\u5230\u5927**\u904d\u5386\u5176\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\uff08\u6392\u5e8f\u5df2\u7ecf\u9884\u5904\u7406\u5b8c\u6bd5\u4e86\uff09\uff0c\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u7acb\u5373\u8f93\u51fa\uff0c\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\n\n**3.\u5bf9\u4e8em==n\uff08\u57fa\u73af\u6811\uff0c40\u5206\uff09\u7684\u60c5\u51b5\uff1a**\n\n1)\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u57fa\u73af\u6811\u7684\u6700\u4f18\u89e3\u603b\u6709\u4e00\u6761\u8fb9\u662f\u4e0d\u7528\u7ecf\u8fc7\u7684\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u5230\u8fbe\u6240\u6709\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e00\u6761\u8fb9\u53ea\u80fd\u4f4d\u4e8e\u57fa\u73af\u6811\u7684\u73af\u4e4b\u4e0a\n\n2)\u6211\u4eec\u5199\u4e00\u4e2a\u627e\u73af\u51fd\u6570(\u6211\u5199\u4e86tarjan)\uff0c\u627e\u51fa\u8fd9\u4e2a\u73af\u5185\u7684\u6240\u6709\u8fb9\uff0c\u4e00\u6761\u6761\u679a\u4e3e\u5220\u9664\uff0c\u7136\u540e\u518d\u5bf9\u4e8e\u5220\u8fb9\u540e\u7684\u6811\u8fdb\u884c**2.** \u4e2d\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u9009\u53d6\u904d\u5386\u4e2d\u7684\u6700\u4f18\u89e3\u8f93\u51fa\u5373\u53ef\uff0c\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n$\u00b2$)$\n\n\u8fd9\u6837\u6700\u540e\u7684\u590d\u6742\u5ea6\u4e3a$O(n$\u00b2$)$,\u5b8c\u7f8e\u5361\u8fc7\u6570\u636e\uff0cAC~\n\n\u7136\u800c\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u6211\u5c45\u7136\u8fde60\u5206\u7684\u666e\u901a\u6811\u90fd\u6ca1\u60f3\u5230QAQ\uff0c\u8db3\u4ee5\u8bc1\u660e\u7684\u6211juruo\n\n\u4ee3\u7801\uff1a\n```\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib> \n#include <iostream>\n#include <algorithm>\nusing namespace std;\nvector<int> son[5001];//vector\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\nint n,m,s1,s2,tot,fir[5001],ans[5001],an[5001],fuc;\n//----------\u5206\u5272\u7ebf-----------\nint cnt,top,stack[5001];\nint low[5001];\nint dfn[5001];\nbool flag[5001],suc;\nint circle[5001],sum;\n//---\u4e00\u5927\u5806tarjan\u627e\u73af\u7684\u5783\u573e---\nint dfs(int w,int fa){\n    an[++fuc]=w;\n    for(int i=0;i<son[w].size();i++){\n        if(son[w][i]==fa)continue;\n        if(son[w][i]==0)continue;\n        dfs(son[w][i],w);\n    }\n}//\u6811\u7684\u64cd\u4f5c\nint tarjan(int w,int las){\n    if(suc==true)return 0;\n    low[w]=dfn[w]=++cnt;\n    stack[++top]=w;flag[w]=1;\n    for(int i=0;i<son[w].size();i++){\n        if(son[w][i]==las)continue;\n        if(son[w][i]==0)continue;\n        if(!dfn[son[w][i]]){\n            tarjan(son[w][i],w);\n            low[w]=min(low[w],low[son[w][i]]);\n        }\n        else low[w]=min(low[w],dfn[son[w][i]]);\n        if(suc==true)return 0;\n    }\n    if(dfn[w]==low[w]){\n        int j;sum=0;\n        do{\n            j=stack[top--];\n            flag[j]=0;\n            circle[++sum]=j;\n        }while(j!=w);\n        if(sum>1)suc=true;\n    }\n}//tarjan\u65e0\u5411\u56fe\u627e\u73af\uff0c\u4e0d\u4f1a\u7684\u81ea\u884c\u4e86\u89e3\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&s1,&s2);\n        son[s1].push_back(s2);\n        son[s2].push_back(s1);\n    }//\u5efa\u7acb\u65e0\u5411\u56fe \n    for(int i=1;i<=n;i++){\n        sort(son[i].begin(),son[i].end());\n    }//\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5206\u522b\u5bf9\u5176\u5b50\u8282\u70b9\u6392\u5e8f \n    if(m!=n){\n        dfs(1,0);\n        for(int i=1;i<=n;i++)\n        printf(\"%d \",an[i]);\n    }//\u6811\u7684\u60c5\u51b5\n    else{\n        memset(ans,127,sizeof(ans));\n        suc=false;\n        tarjan(1,0);//\u627e\u73af\n        for(int i=1;i<=sum;i++){\n            fuc=0;\n            int now=circle[i],next=circle[i%sum+1],w1,w2;\n            for(int j=0;j<son[now].size();j++)\n            if(son[now][j]==next){\n                w1=j;son[now][j]=0;\n                break;\n            }//\u5220\u8fb9\n            for(int j=0;j<son[next].size();j++)\n            if(son[next][j]==now){\n                w2=j;son[next][j]=0;\n                break;\n            }\n            dfs(1,0);//\u904d\u5386\n            son[now][w1]=next;\n            son[next][w2]=now;//\u6062\u590d\u5220\u9664\u7684\u8fb9\n            for(int j=1;j<=n;j++){\n                if(ans[j]<an[j])break;\n                if(ans[j]>an[j]){\n                    for(int k=j;k<=n;k++)ans[k]=an[k];\n                    break;\n                }\n                ans[j]=an[j];\n            }\n        }\n        for(int i=1;i<=n;i++)printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n",
        "postTime": 1544085555,
        "uid": 14559,
        "name": "AFOier",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "# \u4f5c\u4e3a\u7b2c666\u4e2aAC\u7684\uff0c\u53d1\u4e2a\u9898\u89e3\n\n\u8003\u573a\u4e0a\u7ec6\u8282\u5199\u9505\u4e86\uff0c\u7ed3\u679c\u53ea\u670920\u5206\n\n\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0c\u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u5199\n\n## 1.60\u5206\u7684\u6811\u4e0a\u8d2a\u5fc3\n\n\u5bb9\u6613\u8bc1\u660e\uff0c\u6b64\u65f6\u5fc5\u987b\u4e00\u6761\u8def\u8d70\u5230\u53f6\u8282\u70b9\uff0c\u6bcf\u6b21\u8d70\u6700\u5c0f\u7684\u70b9\u5373\u53ef\n\n## 2.N=M\u7684\u60c5\u51b5\n\n\u6b64\u65f6\u6811\u53d8\u6210\u4e86\u57fa\u73af\u6811\uff0c\u6811\u4e0a\u53ea\u67091\u4e2a\u73af\n\n\u76f4\u63a5\u679a\u4e3e\uff1f\u4e0d\u5361\u5e38\u4f1aT\u98de\n\n\u5148\u627e\u73af\uff0c\u627e\u5b8c\u4ee5\u540e\u5728\u73af\u4e0a\u679a\u4e3e\u5220\u8fb9\uff08\u4e00\u5b9a\u8981\u5220\u53cc\u5411\u5426\u5219\u4f1aWA\u60e8\uff09\n\n# \u4f60\u4ee5\u4e3a\u8fd9\u6837\u5c31\u5b8c\u4e86\u5417\uff1f~~\u8bf7\u51fa\u9898\u4eba\u624b\u4e0b\u7559\u60c5~~\n\n\u5982\u679c\u8fd9\u4e2a\u56fe\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a\u73af\u5462\uff1f\u5728\u73af\u4e0a\u5220\u8fb9\u7684\u8fc7\u7a0b\u65e0\u5f02\u4e8e\u76f4\u63a5\u679a\u4e3e\n\n## \u6211\u4eec\u53ef\u4ee5~~\u4e27\u5fc3\u75c5\u72c2~~\u5149\u660e\u6b63\u5927\u5730\u7279\u5224\n\n\u6b64\u65f6\uff0c\u6700\u4f18\u7b56\u7565\u4e00\u5b9a\u662f\u4ee51\u4e3a\u6839\uff0c\u4ece1\u6700\u5c0f\u7684\u513f\u5b50\u51fa\u53d1\uff0c\u8d70\u5230\u4e00\u4e2a\u6bd41\u7684\u5927\u513f\u5b50\u5927\u7684\u70b9\u65f6\u518d\u56de\u6765\u8d70\u5927\u513f\u5b50\n\n\u8fd9\u6837\uff0c\u7ed3\u5408\u627e\u73af+\u679a\u4e3e+\u7279\u5224\uff0c\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u8fd940\u5206\n\n#### 3.100\u5206=1+2\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n    int from,to;\n} e[5001];\nint n,m,d[5001];\nint ans[5001],cnt,p;\nint num[5001],u,v;\nint dis[5001];\nbool b[5001][5001],vis[5001];\nbool jud[5001];\nvoid read(int& x)\n{\n    char c=getchar();\n    x=0;\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-'0';\n        c=getchar();\n    }\n}\nvoid write(int x)\n{\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\nvoid build(int x)\n{\n    printf(\"%d \",x);\n    for(int i=1; i<=n; i++)\n    {\n        int y=i;\n        if(d[y]||!b[x][y])continue;\n        d[y]=d[x]+1;\n        build(y);\n    }\n}\nvoid dfs(int x)//\u8fd9\u662f\u5728\u5220\u8fb9\u4ee5\u540e\u7684\u6811\u4e0a\u8d70 \n{\n    num[++cnt]=x;\n//    if(num[cnt]>ans[cnt])return ;\n    jud[x]=1;\n    for(int i=1; i<=n; i++)\n    {\n        int y=i;\n        if(!b[x][y]||jud[y])continue;\n        if(d[y]||y==0)continue;\n        jud[y]=1;\n        d[y]=d[x]+1;\n        dfs(y);\n    }\n}\nvoid tree()//60\u5206 \n{\n    for(int i=1; i<=n-1; i++)\n    {\n        int x,y;\n        read(x);\n        read(y);\n        b[x][y]=b[y][x]=1;\n    }\n    d[1]=1;\n    build(1);\n    printf(\"\\n\");\n    exit(0);\n}\nvoid solve(int x)\n{\n    memset(d,0,sizeof(d));\n    memset(num,0,sizeof(num));\n    memset(jud,0,sizeof(jud));\n    d[1]=1;\n    cnt=0;\n    bool ok=1;\n    dfs(1);\n    if(cnt<n)return ;\n    for(int i=1; i<=cnt; i++)\n    {\n        if(num[i]<ans[i])\n        {\n            ok=1;\n            break;\n        }\n        else if(num[i]>ans[i])\n        {\n            ok=0;\n            break;\n        }\n        else continue;\n    }\n    if(ok)\n    {\n        memcpy(&ans,&num,sizeof(num));//\u7528memcpy\u5feb\u901f\u5b8c\u6210\u6570\u7ec4\u590d\u5236\n    }\n}\nint find(int x)//\u627e\u73af \n{\n    vis[x]=1;\n    for(int i=1; i<=n; i++)\n    {\n        int y=i;\n        if(!b[x][y])continue;\n        if(vis[y])\n        {\n            if(d[y]+1==d[x])continue;\n            else return y;\n        }\n        vis[y]=1;\n        d[y]=d[x]+1;\n        int t=find(y);\n        if(t)return t;\n    }\n    vis[x]=0;\n    return 0;\n}\n\nvoid ring()//40\u5206 \n{\n    for(int i=1; i<=n; i++)\n    {\n        int x,y;\n        read(x);\n        read(y);\n        b[x][y]=b[y][x]=1;\n        e[++p]=(edge){x,y};\n    }\n    memset(ans,0x3f3f3f3f,sizeof(ans));\n    d[1]=0;\n    int c=find(1);\n    bool ok=1;\n    for(int i=1; i<=n; i++)\n    {\n        if(!vis[i])\n        {\n            ok=0;\n            break;\n        }\n    }\n    if(ok)//\u5982\u679c\u6574\u4e2a\u56fe\u662f\u4e00\u4e2a\u73af \n    {\n        for(int i=1; i<=n; i++)\n        {\n        \tif(b[1][i])\n        \t{\n        \t\tif(!u)u=i;\n          \t\telse v=i;\n\t\t\t}//\u8bb0\u5f55\u5927\u513f\u5b50\u5c0f\u513f\u5b50 \n        }\n        memset(d,0,sizeof(d));\n        d[1]=1;\n        printf(\"1 \");\n        int pos=u,fa=1;\n        while(pos<=v)\n        {\n        \tprintf(\"%d \",pos);\n        \td[pos]=d[fa]+1;\n        \tfor(int i=1;i<=n;i++)\n        \t{\n        \t\tif(!d[i]&&b[pos][i])\n        \t\t{\n        \t\t\tfa=pos;\n        \t\t\tpos=i;\n        \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpos=v,fa=1;\n\t\twhile(pos)\n\t\t{\n\t\t\tprintf(\"%d \",pos);\n        \td[pos]=d[fa]+1;\n        \tbool ok=0;\n        \tfor(int i=1;i<=n;i++)\n        \t{\n        \t\tif(!d[i]&&b[pos][i])\n        \t\t{\n        \t\t\tok=1;\n        \t\t\tfa=pos;\n        \t\t\tpos=i;\n        \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!ok)pos=0;\n\t\t}\n        exit(0);\n    }\n    else\n    {\n        for(int i=1; i<=p; i++)\n        {\n            int u=e[i].from,v=e[i].to;\n            if(vis[u]&&vis[v])//\u5982\u679c\u627e\u5230\u4e86\u73af\uff0c\u73af\u4e0a\u70b9\u7684VIS\u6807\u8bb0\u4e00\u5b9a\u662f1\n            {\n                b[u][v]=b[v][u]=0;//\u8bb0\u5f97\u53cc\u5411\u5220\u8fb9\n                solve(1);\n                b[u][v]=b[v][u]=1;//\u8bb0\u5f97\u8fd8\u539f\n            }\n        }\n        for(int i=1; i<=n; i++)\n        {\n            write(ans[i]);\n            putchar(' ');\n        }\n        putchar('\\n');\n        exit(0);\n    }\n}\nint main()\n{\n//  freopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\"tarvel.out\",\"w\",stdout);\n    read(n);\n    read(m);\n    if(m==n-1)\n    {\n        tree();\n    }\n    if(m==n)\n    {\n        ring();\n    }\n    return 0;\n}\n```\n\u7ed3\u675f\u6218\u6597~~",
        "postTime": 1542525808,
        "uid": 68207,
        "name": "CreeperLordVader",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u9898\u76ee\u5728\u6b64\u5904 https://www.luogu.org/problemnew/show/P5022#sub\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u505a\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1am=n-1.\n\n\u8fd9\u65f6\u5019\u6574\u4e2a\u56fe\u662f\u4e00\u68f5\u6811\u3002\u53ea\u9700\u8981\u4ee51\u53f7\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u6df1\u641c\u4e00\u4e0b\uff0c\u6bcf\u6b21\u9009\u62e9\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u513f\u5b50\u5411\u4e0b\u641c\u7d22\uff0c\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u5e8f\u5217\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u6765\u5199\u4e00\u4e0bm=n\u7684\u60c5\u51b5\u5427\u3002\n\n\u8fd9\u65f6\u5019\u6574\u4e2a\u56fe\u662f\u4e00\u68f5~~\u57fa\u73af\u6811\u3002~~~~\uff08\u5bf9\u4e0d\u8d77\u6211\u4ece\u6765\u6ca1\u5199\u8fc7\u57fa\u73af\u6811\u7684\u9898\u76ee\uff0c\u53ea\u662f\u542c\u8fc7\u540d\u5b57\uff09~~\n\n\u53cd\u6b63\uff0c\u6574\u4e2a\u56fe\u91cc\u9762\u4e5f\u53ea\u6709\u4e00\u4e2a\u73af\u3002\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u8fd9\u4e2a\u73af\uff0c\u7136\u540e\u5220\u53bb\u73af\u91cc\u9762\u7684\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u5316\u5f52\u6210\u6811\u5566\u3002\n\n\u4e0b\u9762\u95ee\u9898\u662f\uff1a\u627e\u73af\u3002\n\n\u4ec6\u7a83\u4e0d\u900a\uff0c\u8003\u573a\u4e0a\u60f3\u8d77\u6765\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u627e\u73af\u3002\u662f\u554a\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u4ed6\u4eec\u7684\u8fde\u8fb9\u51fa\u73b0\u4e4b\u524d\u5c31\u8fde\u901a\u4e86\uff0c\u518d\u52a0\u4e0a\u8fd9\u6761\u8fde\u8fb9\uff0c\u4e0d\u5c31\u6784\u6210\u4e00\u4e2a\u73af\u4e86\u5417\uff1f\n\n\u6211\u4eec\u628a\u627e\u5230\u73af\u4e0a\u7684\u8fd9\u4e24\u4e2a\u70b9\u53eb\u505ar1\u548cr2\uff0c\u5b83\u4eec\u7684\u8fde\u8fb9\u662f\u73af\u7684\u4e00\u6761\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u627e\u5230\u73af\u7684\u6240\u6709\u8fb9\u3002\u600e\u4e48\u627e\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u4ee5\u518d\u4ee5r1\u4e3a\u6839\u5efa\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u5efa\u6811\u8fc7\u7a0b\u4e2d\u7981\u6b62\u4f7f\u7528r1\u5230r2\u7684\u8fde\u8fb9\uff0c\u90a3\u4e48\uff0c\u8fd9\u68f5\u6811\u4ecer2\u5230r1\u7684\u8def\u5f84\u5c31\u662f\u5269\u4e0b\u7684\u6240\u6709\u8fb9\u3002\u4ecer2\u4e00\u8def\u56de\u6eaf\u5230r1\uff0c\u5c31\u627e\u5230\u4e86\u73af\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u7528\u4e00\u4e2avector\u5b58\u8d77\u6765\u3002\n\n\u7136\u540e\u6bcf\u6b21\u7981\u6b62\u4f7f\u7528vector\u91cc\u9762\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\uff08\u6216\u8005\u9996\u672b\u4e24\u70b9\uff09\u4e4b\u95f4\u7684\u8fb9\uff0c\u518d\u4ee51\u4e3a\u6839\u5efa\u6811\uff0c\u5206\u522b\u6c42\u51fa\u5e8f\u5217\uff0c\u53d6\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u5566\u3002\n\n\n\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5982\u4f55\u7981\u6b62\u4f7f\u7528\u67d0\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\uff1f\u6839\u636e\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u7684\u97e6\u8fbe\u5b9a\u7406\uff0c\u5982\u679c\u4e24\u5bf9\u6570\u7684\u548c\u4e0e\u79ef\u5206\u522b\u76f8\u7b49\uff0c\u90a3\u4e48\u8fd9\u4e24\u5bf9\u6570\u4e0d\u8ba1\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u7528\u4e86\n\n```cpp\nif (u+v==r1+r2&&u*v==r1*r2) continue;\n```\n\n\u6765\u7981\u7528\u4ee5r1\u548cr2\u4e3a\u9876\u70b9\u7684\u4e24\u6761\u8fb9\u3002\n\n\n```cpp\n//\u8003\u540e\u9ed8\u5199\u7684\u4ee3\u7801\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 5010\ninline int read(){\n    int x=0; int sign=1; char c=getchar();\n    while(c>'9' || c<'0') {if (c=='-') sign=-1;c=getchar();}\n    while(c>='0' && c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    return x*sign;\n}\n\nvector<int> g[N];\n\nint fa[N];\nint get(int x){\n    return x==fa[x] ? x: fa[x]=get(fa[x]);\n}\nvoid join(int x,int y){fa[get(y)]=get(x);}\nbool judge(int x,int y){return get(x)==get(y);}\n\nint n,m; int r1,r2;\n\n\nstruct E{\n    int squ[N]; int pnt;\n    \n    void clear(){\n        pnt=0;\n        memset(squ,0x3f,sizeof(squ));\n    }\n    \n    bool operator< (const E &b) const{\n        for(int i=1;i<=n;i++) if(squ[i]!=b.squ[i]) return squ[i]<b.squ[i];\n        return 0;\n    }\n}now,mins;\n\nint par[N];\nvoid build(int u){\n    now.squ[++now.pnt]=u;\n    for(int i=0;i<g[u].size();i++){\n        int v=g[u][i];\n        if (v==par[u]) continue;\n        if (u+v==r1+r2&&u*v==r1*r2) continue;\n        par[v]=u;\n        build(v);\n    }\n}\nvector<int> ring;\nvoid find_ring(int v){\n    ring.push_back(v);\n    if(par[v]==0)return;\n    find_ring(par[v]);\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;i++){fa[i]=i;}\n    for(int i=1;i<=m;i++){\n        int a=read(),b=read();\n        g[a].push_back(b); g[b].push_back(a);\n        if(judge(a,b))r1=a,r2=b;\n        join(a,b);\n    }\n    for(int i=1;i<=n;i++){\n        sort(g[i].begin(),g[i].end());\n    }\n    if(m==n-1){\n        build(1);\n        for(int i=1;i<=n;i++){\n            cout<<now.squ[i]<<\" \";\n        }\n    } else {\n        build(r1);\n        find_ring(r2);\n        mins.clear();\n        for(int i=0; i<ring.size();i++){\n            if(i==0)r1=ring[ring.size()-1];\n            else r1=ring[i-1];\n            r2=ring[i];\n            memset(par, 0, sizeof(par));\n            now.clear();\n            build(1);\n            if(now<mins) mins=now;\n        }\n        for(int i=1; i<=n;i++){\n            cout<<mins.squ[i]<<\" \";\n        }\n\n    }\n}\n```\n\n\u540e\u8bb0\uff1a\n\n\u8003\u8bd5\u7684\u65f6\u5019\u6211\u672c\u6765\u662f\u8fd9\u4e48\u60f3\u7684\uff1a\u4e0d\u5982\u628a\u90a3\u4e2a\u73af\u770b\u6210\u4e00\u4e2a\u8282\u70b9\u6765\u505a\u3002\n\n\u5f00\u8003\u4e24\u4e2a\u5c0f\u65f6\u540e\uff0c\u6211\u53d1\u73b0\u6211\u5199\u5d29\u4e86\u3002\n\n\u7a81\u7136\u53d1\u73b0n\u624d5000\uff0c\u610f\u8bc6\u5230n^2\u7b97\u6cd5\u5b8c\u5168\u53ef\u4ee5\u3002\u4e8e\u662f15\u5206\u949f\u5185\u5199\u5b8c\u4e86\u4ee5\u4e0a\u4ee3\u7801\u3002\n\n\u7136\u800c\u6211T3\u4ecd\u7136\u662f\u72060\u4e86\u3002\n\n-------------\n\n\u540e\u540e\u8bb0\uff1a\n\n\u4eca\u5929\u5f00\u59cb\u6211\u5c31\u9000\u5f79\u5566\u3002\u6211\u9ad8\u4e09\u3002\n\n\u5728\u6d1b\u8c37\u505a\u9898\u76ee\u5199\u535a\u5ba2\u771f\u7684\u5f88\u5feb\u4e50\u3002\u6211\u4e00\u5b9a\u4f1a\u56de\u6765\u54d2\uff01\n\n",
        "postTime": 1541944784,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "NOIP 2018 Day2 T1 travel \u9898\u89e3"
    },
    {
        "content": "### 60pts:m=n-1\n------------\n \u76f4\u63a5\u5bf9\u8fb9(u,v)\u6309v\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u7528\u8fb9\u8868(\u524d\u5411\u661f)\u5b58\u50a8\uff0c\u518ddfs\uff0c\u8fd9\u6837\u904d\u5386\u65f6\u4ece\u6bcf\u4e2a\u7236\u8282\u70b9\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u5373\u4e3a\u79bb\u5176\u6700\u77ed\u7684\u70b9\u3002\n ```pascal\nprocedure add(u,v:longint);\nbegin\n  inc(tot);\n  go[tot]:=v;\n  next[tot]:=head[u];\n  head[u]:=tot;\nend;//\u8fb9\u8868\u5efa\u7acb(\u4e0d\u61c2\u7684\u540c\u5b66\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e0b\uff0c\u4e3b\u8981\u662f\u6bd4\u94fe\u63a5\u77e9\u9635\u8bfb\u53d6\u5feb)\n```\n------------\n### \u5269\u4f5940pts:m=n\n\u76f4\u63a5\u679a\u4e3e\u5220\u54ea\u6761\u8fb9\uff0c\u56e0\u4e3a\u80af\u5b9a\u53ea\u7ecf\u8fc7n-1\u6761\u8fb9\uff0c\u7136\u540e\u518d\u595760\u5206\u7684\u6a21\u677f\u5c31\u53ef\u4ee5\u4e86......\n\n## \u8d34\u4ee3\u7801(C\u515a\u52ff\u55b7)\n```pascal\nvar vis:array[0..5005] of boolean; go,next,x,y:array[0..10005] of longint;\n    head,x1,y1,a,b:array[0..10005] of longint; jx,jy,i,j,n,m,n1,tot:longint;\nprocedure qsort(l,r:longint);\nvar i,j,t,mid:longint;\nbegin\n  i:=l; j:=r; mid:=y[random(r-l+1)+l];\n  while i<=j do\n  begin\n    while y[i]>mid do inc(i);\n    while y[j]<mid do dec(j);\n    if i<=j then\n    begin\n      t:=y[i]; y[i]:=y[j]; y[j]:=t;\n      t:=x[i]; x[i]:=x[j]; x[j]:=t;\n      inc(i); dec(j);\n    end;\n  end;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nprocedure add(u,v:longint);\nbegin\n  inc(tot);\n  go[tot]:=v;\n  next[tot]:=head[u];\n  head[u]:=tot;\nend;\nprocedure dfs(u:longint);//\u904d\u5386\nvar e,v:longint;\nbegin\n  e:=head[u]; vis[u]:=true; inc(n1); b[n1]:=u;\n  while e<>0 do\n  begin\n    v:=go[e]; e:=next[e];\n    if (vis[v]=true) or (u=jx) and (v=jy) or (u=jy) and (v=jx) then continue;\n    dfs(v);\n  end;\nend;\nbegin\n  readln(n,m);\n  for i:=1 to m do readln(x[i],y[i]);\n  for i:=1 to m do begin x1[i]:=x[i]; y1[i]:=y[i]; end;\n  for i:=m+1 to 2*m do begin x[i]:=y[i-m]; y[i]:=x[i-m]; end;\n  qsort(1,2*m);\n  for i:=1 to 2*m do add(x[i],y[i]);//\u5efa\u56fe\n  if m=n-1 then\n  begin\n    dfs(1);\n    for i:=1 to n do write(b[i],' ');\n  end\n  else\n  begin\n    for i:=1 to n do a[i]:=n-i+1;\n    for i:=1 to n do\n    begin\n      jx:=x1[i]; jy:=y1[i];//\u679a\u4e3e\u5220\u54ea\u6761\u8fb9\n      fillchar(vis,sizeof(vis),false);\n      n1:=0; dfs(1);\n      if n1<>n then continue;\n      for j:=1 to n do\n      begin\n        if b[j]<a[j] then break;\n        if b[j]>a[j] then break;\n      end;\n      if b[j]<a[j] then\n      begin\n        for j:=1 to n do a[j]:=b[j];\n      end;\n    end;\n    for i:=1 to n do write(a[i],' ');\n  end;\nend.\n```\n",
        "postTime": 1573351878,
        "uid": 45199,
        "name": "_TLJYatm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "# ** _\u66b4\u529b\u5199\u6cd5_ **\n  \u9996\u5148\u5f88\u591a\u5927\u4f6c\u90fd\u5df2\u770b\u51fa\u8fd9\u662f\u4e2a\u57fa\u73af\u6811~~\u849f\u84bb\u6211\u770b\u4e86\u8ba8\u8bba\u624d\u77e5\u9053~~~~\u8fd8\u767e\u5ea6\u4e86\u5f88\u4e45\u624d\u61c2\u57fa\u73af\u6811\u662f\u4e2a\u5565~~\n  \n\n------------\n\n\u770b\u5230\u56fe\u8bba\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u80af\u5b9a\u662f\u5efa\u56fe\uff0c\u9996\u9009\u80af\u5b9a\u662f\u524d\u5411\u661f~~\u849f\u84bb\u6211\u4e0d\u592a\u4f1a\u77e9\u9635~~\n\n \u5148\u8003\u865160\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u7ed9\u4e00\u9897\u6811\uff0c\u4f9d\u6b21\u904d\u5386\u4ed6\u7684\u5c0f\u8282\u70b9\uff0c\u904d\u5386\u5b8c\u4e00\u68f5\u6811\u518d\u8fd4\u56de\u4e0a\u4e00\u68f5\u6811\uff0c\u5f88\u5bb9\u6613\u4fbf\u4f1a\u60f3\u5230dfs\uff0c~~\u77e9\u9635\u597d\u50cf\u76f4\u63a5\u6392\u5217\u5c31\u884c\u4e86\u4f46\u849f\u84bb\u6211\u4e0d\u4f1a\u554a~~\uff0cdfs\u7684\u8bdd\u6211\u4eec\u5047\u8bbe\u4e00\u4e2a\u70b9\u6709m\u6761\u8fb9\uff0c\u6bcf\u6b21\u90fd\u8981\u627e\u51fa\u65b0\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u6211\u4eec\u5c31\u6bcf\u6b21\u628a\u6bcf\u6761\u8fb9\u90fd\u904d\u5386m\u904d\uff0c\u6bcf\u8fb9\u627e\u51fa\u8be5\u6b21\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u6807\u8bb0\u5373\u53ef\uff0c\u8fd9\u91cc\u662f\u4e0d\u7528\u56de\u6eaf\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u904d\u5386\u4e00\u6b21\uff0c\u6700\u540e\u8f93\u51fa\u7ed3\u679c\uff1b\n \n------------\n\u5269\u4e0b\u768440\u5c31\u662f\u57fa\u73af\u6811\u4e86\uff0c\u5904\u7406\u57fa\u73af\u6811\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u627e\u73af\uff0c\u627e\u5230\u73af\u4e4b\u540e\u5272\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\u849f\u84bb\u6211\u5b58\u7684\u90fd\u662f\u73af\u7684\u8282\u70b9\uff0c\u8be5\u600e\u4e48\u627e\u8fb9\u5462\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u4e00\u70b9\u4e5f\u4e0d\u96be~~\u849f\u84bb\u6211\u4e5f\u5c31\u60f3\u4e86\u534a\u4e2a\u591a\u5c0f\u65f6~~\uff0c\u6211\u4eec\u56de\u5f52\u5230\u627e\u73af\u7684\u8fc7\u7a0b\uff0c\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u662f\u6309\u4e00\u4e2a\u73af\u7684\u987a\u5e8f\u6765\u5b58\u50a8\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u679a\u4e3e\u8fd9\u4e2a\u73af\u4e0a\u7684\u70b9\uff0c\u518d\u679a\u4e3e\u8fd9\u4e2a\u70b9\u4e0a\u7684\u8fb9\uff0c\u627e\u5230\u4e00\u6761\u8fb9\u901a\u5f80\u4e0b\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u8fb9\uff0c\u6211\u4eec\u6807\u8bb0\u4e00\u4e0b\u8fd9\u6761\u8fb9\uff0cdfs\u7684\u65f6\u5019\u641c\u5230\u8fd9\u6761\u8fb9\u76f4\u63a5\u8df3\u8fc7\u5c31\u884c\u4e86\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u6700\u540e\u4e00\u4e2a\u70b9\u901a\u5411\u73af\u4e0a\u7684\u7b2c\u4e00\u4e2a\u70b9\u3002\n\u4f46\u662f\u8fd9\u4e2a\u56fe\u662f\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u4f1a\u5efa\u4e24\u6761\u8fb9\uff0c\u4f46\u95ee\u9898\u4e0d\u5927~~\u849f\u84bb\u6211\u53c8\u60f3\u4e86\u534a\u4e2a\u591a\u5c0f\u65f6~~\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u8fb9\u7684\u65f6\u5019\u4e24\u6761\u8fb9\u6328\u7740\u5efa~~\u8bdd\u8bf4\u8fd9\u4e0d\u662f\u6b63\u5e38\u64cd\u4f5c\u5417~~\uff0c\u7136\u540e\u6211\u4eec\u6211\u4eec\u641c\u5230\u8fd9\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u628a\u5b83\u52a0\u4e00\u6216\u51cf\u4e00\u5c31\u53ef\u4ee5\u5f97\u5230\u4e0e\u5b83\u5bf9\u5e94\u5f97\u8fb9\u4e86\u3002\n\n\u7136\u540edfs\u53ea\u9700\u8981\u5728\u524d\u4e00\u90e8\u5206\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e00\u4e2a\u5224\u65ad\u8fb9\u7684\u5373\u53ef\u3002\n\n\u6700\u540e\u5728\u5224\u65ad\u4e00\u4e0b\u7b54\u6848\u4fbf\u53ef\u8f93\u51fa\u3002\n\n\u6b64\u4ee3\u7801\u4e0d\u52a0O2\u53ef\u80fd\u4f1aT\u4e00\u4e2a\u70b9\u3002\n### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<math.h>\nusing namespace std;\nint n,m,cnt1=1,cnt2=0,cnt3=0,h[10005],x,y,t,f[10005],loop[10005],vis[10005],ans[10005],pd[10005],mi=10005,pd2[10005],ans2[10005],bj;\nlong long sum;\nstruct A{\n\tint t,w,n;\n}e[10005];\nvoid add(int u,int v)\n{\n\te[cnt1].t=v;\n\te[cnt1].n=h[u];\n\th[u]=cnt1++;\n}\nvoid get(int u)\n{\n\tvis[u]=++t;\n\tfor(int i=h[u];i;i=e[i].n)\n\t{\n\t\tint v=e[i].t;\n\t\tif(v==f[u])\n\t\tcontinue;\n\t\tif(vis[v])\n\t\t{\n\t\t\tif(vis[v]<vis[u])\n\t\t\tcontinue;\n\t\t\tloop[++cnt2]=u;\n\t\t\tfor(;v!=u;v=f[v])\n\t\t\t{\n\t\t\t\tloop[++cnt2]=v;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tf[v]=u;\n\t\t\tget(v);\n\t\t}\n\t}\n}//\u627e\u73af \nvoid dfs(int x)\n{\n\tpd[x]=1;\n\tans[++cnt3]=x;\n\tif(cnt3==n)\n\treturn;\n    for(int i=h[x];i;i=e[i].n)\n    {\n    \tint mi=10005;\n\t    for(int j=h[x];j;j=e[j].n) \n   \t    {\n   \t    \tif(pd[e[j].t]==0&&pd2[j]==0)\n   \t    \t{\n\t\t\t   \tmi=min(mi,e[j].t);\n\t\t\t}\n\t    }\n\t    if(mi!=10005)\n\t    {\n\t    \tpd[mi]=1;\n   \t        dfs(mi);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\tans2[i]=10005;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>x>>y;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tif(n==m)\n\t{\n\t\tget(1);\n\t\tfor(int i=1;i<=cnt2;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=cnt1;j++)\n\t\t\tpd2[j]=0;\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\tpd[j]=0;\n\t\t\tfor(int j=h[loop[i]];j;j=e[j].n)\n\t\t    {\n\t\t    \tif(i==cnt2)\n\t\t    \t{\n\t\t    \t\tif(e[j].t==loop[1])\n\t\t    \t\t{\n\t\t    \t\t\tpd2[j]=1;\n\t\t    \t\t\tif(j%2==1)\n\t\t    \t\t\t{\n\t\t    \t\t\t\tpd2[j+1]=1;\n\t\t\t\t\t\t}\n\t\t    \t\t    else\n\t\t    \t\t    {\n\t\t    \t\t    \tpd2[j-1]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(e[j].t==loop[i+1])\n\t\t\t\t\t{\n\t\t\t\t\t\tpd2[j]=1;\n\t\t\t\t\t\tif(j%2==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpd2[j+1]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpd2[j-1]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbj=0;\n\t\t\tcnt3=0;\n\t\t\tdfs(1);\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tif(ans2[j]<ans[j])\n\t\t\t\tbreak;\n\t\t\t\tif(ans2[j]>ans[j])\n\t\t\t\t{\n\t\t\t\t\tbj=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bj==1)\n\t\t\t{\n\t\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tans2[j]=ans[j];\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\tcout<<ans2[i]<<\" \";\n\t}\n\tif(m==n-1)\n\t{\n\t\tget(1);\n\t\tdfs(1);\n\t\tfor(int i=1;i<=cnt3;i++)\n\t    cout<<ans[i]<<\" \";\n\t}\n}\n```\n",
        "postTime": 1572868411,
        "uid": 227482,
        "name": "\u5317\u67ab",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u91c7\u7528\u7684\u662f\u6700\u597d\u60f3\uff0c\u6700\u5e38\u89c1\u7684**\u66b4\u529b\u5220\u8fb9**\u65b9\u6848\n\n\u4f46\u662f\u5f88\u663e\u7136\uff0c\u5728luogu\u8bc4\u6d4b\u673a\u4e0a\uff0c\u8fd9\u6837\u7684\u505a\u6cd5\u4f1aTLE\uff0c\u56e0\u4e3a\u5e38\u6570\u5f88\u5927\uff0c\u6574\u4f53\u590d\u6742\u5ea6\u53c8\u662fo(n\u65b9logn)\u7684\uff1b\n\n\u4e00\u5f00\u59cb\u6211\u8fd8\u575a\u5b9a\u5730\u8ba4\u4e3a\u53ea\u8981\u5361\u5e38\u5c31\u80fda\u6389\u8fd9\u9053\u9898\uff0c\u7136\u540e\u6211\u628a\u7528\u5230\u7684stl\u5168\u624b\u5199\u4e86\u4e00\u904d\uff0c\u53d1\u73b0\u8fd8\u662ftle\uff1b\n\n\u4e8e\u662f\u6211\u5f00\u59cb\u601d\u8003\u5982\u4f55\u526a\u679d\u3002\n\n\u7b2c\u4e00\u65f6\u95f4\uff0c\u6211\u60f3\u5230\u5728\u5224\u65ad\u7b54\u6848\u7684\u65f6\u5019\u6bcf\u6b21\u770b\u5f53\u524d\u662f\u5426\u80fd\u66f4\u65b0\u6700\u5c0f\u5b57\u5178\u5e8f\uff0c\u4f46\u662f\u5728wa\u4e864\u6b21\u4e4b\u540e\u6211\u53d1\u73b0\u8fd9\u6837\u505a\u4e0d\u53ef\u884c~~\u867d\u7136\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e0d\u5bf9~~\u800c\u4e14\u4ed6\u4f9d\u7136\u662fwa\u7684\n\n\u5728\u4ed8\u51fa\u4e8650\u591a\u6b21\u60e8\u75db\u7684TLE,WA\u4e4b\u540e\uff0c\u6211\u7ec8\u4e8e\u627e\u5230\u4e86\u5408\u9002\u7684\u526a\u679d\u65b9\u6848\n\n\u5177\u4f53\u7684\u526a\u679d\u90a3\u4e24\u884c\u6211\u5df2\u7ecf\u5199\u5728\u7a0b\u5e8f\u6ce8\u91ca\u91cc\u9762\u4e86\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e00\u770b\u5c31\u80fd\u770b\u61c2\uff0c\u6211\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\u3002\n\n\u8fd9\u786e\u786e\u5b9e\u5b9e\u662f\u80fd\u591fac\u7684\u7a0b\u5e8f\u3002\n\n\n~~\u4e00\u6b21\u4e0d\u884c\u5c31\u591a\u4ea4\u51e0\u6b21~~\n\n\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u5f88\u83dc\uff0c\u601d\u8def\u5199\u7684\u6781\u5ea6\u6e05\u6670\uff0c\u6240\u4ee5\u8fd9\u4efd\u4ee3\u7801\u5e94\u8be5\u666e\u53ca\u9009\u624b\u90fd\u80fd\u770b\u61c2\u624d\u5bf9\n```cpp\n#include<bits/stdc++.h>\nconst int N=10001;\nstruct NODE\n{\n    int x,y;\n}tree[10001];\ninline int operator <(NODE a,NODE b)\n{\n    if(a.y==b.y) return a.x<b.x;\n    return a.y>b.y;\n}\nint tt;\ninline void swap(NODE &x,NODE &y)\n{\n    NODE t=x; \n    x=y;\n    y=t;\n}\nnamespace dui\n{\n    inline  void update(int p)\n        {\n            while(p>1)\n            {\n                if(tree[p]< tree[p>>1]) swap(tree[p],tree[p>>1]),p>>=1;\n                else break;\n            }\n        }\n    inline  void push(NODE x)\n        {\n            tt++;\n            tree[tt]=x;\n            update(tt);\n        }\n    inline  void downpdate(int x)\n        {\n            int s=x<<1;\n            while(s<=tt)\n            {\n                s+=(s<tt&&tree[s+1]<tree[s]);\n                if(tree[s]<tree[x]) swap(tree[x],tree[s]),x=s,s=x<<1;\n                else break;\n            }\n        }\n    inline  void pop()\n        {\n            tree[1]=tree[tt];\n            tt--;\n            downpdate(1);\n        }\n    inline  NODE top() {return tree[1];}\n } \nint u[N],v[N],w[N],fst[N],nxt[N],tot=0,ans[N];\nint flag[N],flg[N];\ninline void add(int a,int b)\n{\n    tot++;\n    u[tot]=a;\n    v[tot]=b;\n    nxt[tot]=fst[a];\n    fst[a]=tot;\n    tot++;\n    u[tot]=b;\n    v[tot]=a;\n    nxt[tot]=fst[b];\n    fst[b]=tot;\n}\nint n,m;\nint pre[N];\ninline int check()\n{\n    for(register int i=1;i<=n;i++) \n        if(!ans[i] || !pre[i]) return !ans[i]?true:false; \n        else if(ans[i]>pre[i]) return true;\n        else if(ans[i]<pre[i]) return false;\n}\ninline void gx()\n{\n    for(register int i=1;i<=n;i++) ans[i]=pre[i];\n}\ninline int read()\n{\n    char ch=getchar();\n    int x=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return x;\n}\nint main()\n{\n    srand(time(0));\n    n=read(),m=read();\n    for(register int i=1;i<=m;i++) add(read(),read());\n    if(m==n)\n    {\n            for(register int k=1;k<=m*2;k+=2)\n            {\n                if(n==5000&&rand()%2) continue;//\u526a\u679d\u5c31\u5728\u8fd9\u91cc\u54e6 \n                /* \u5b9e\u9645\u4e0a\u4f1aTLE\u7684\u53ea\u6709\u4e09\u4e2a\u70b9 \n\t\t\t\t\u7136\u800c\u6b63\u89e3\u5b9e\u9645\u4e0a\u53ea\u6709\u4e00\u6761\u8fb9\u662f\u88ab\u8df3\u8fc7\u7684\n\t\t\t\t\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u5728\u5408\u9002\u7684\u590d\u6742\u5ea6\u5185\u627e\u5230\u5b83\n\t\t\t\t\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u624b\u6bb5\u628a\u5b83\u51cf\u6389\n\t\t\t\t\u6bcf\u6b21\u67091/2\u7684\u6982\u7387\u526a\u679d\u6210\u529f\n\t\t\t\t\u4e09\u4e2a\u70b9\u4e5f\u5c31\u662f\u8bf41/8\u7684\u6982\u7387\u53ef\u4ee5ac\u8fd9\u9053\u9898\n\t\t\t\t*/ \n                pre[1]=1;\n                flg[1]=k;\n                NODE a;\n                a.x=1;\n                a.y=1;\n                dui::push(a);\n                int num=0;\n                while(tt)\n                {\n                    a=dui::top();\n                    dui::pop();\n                    int x=a.x;\n                    num++;\n                    pre[num]=x;\n                    for(register int i=fst[x];i;i=nxt[i])\n                    {\n                        if((i==k||i==k+1)||(flg[v[i]]==k)) continue;\n                            NODE aa;\n                            aa.x=v[i];\n                            aa.y=num;\n                            dui::push(aa);\n                            flg[v[i]]=k;\n                    }\n                }\n                if(check())     gx();\n            } \n        for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    }\n    else \n    {\n                pre[1]=1;\n                flg[1]=1;\n                NODE a;\n                a.x=1;\n                a.y=1;\n                dui::push(a);\n                int num=0;\n                while(tt)\n                {\n                    a=dui::top();\n                    dui::pop();\n                    int x=a.x;\n                    num++;\n                    pre[num]=x;\n                    for(int i=fst[x];i;i=nxt[i])\n                    {\n                        if(!flg[v[i]])\n                        {\n                            NODE aa;\n                            aa.x=v[i];\n                            aa.y=num;\n                            dui::push(aa);\n                            flg[v[i]]=1;\n                        }\n                    }\n                }\n                for(int i=1;i<=n;i++) printf(\"%d \",pre[i]);;\n    }\n}\n```\n",
        "postTime": 1571156916,
        "uid": 59641,
        "name": "gujialiang123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "    \u9898\u76ee\u7ed9\u7684\u4fe1\u606f:\n    1. \u8fde\u901a\u56fe\uff1b\n    2. \u65e0\u91cd\u8fb9\uff0c\u8fb9\u4e3a\u65e0\u5411\u8fb9\uff1b\n    3. \u8fb9\u6570\u6700\u591a\u662fm == n\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u68f5\u6811\u52a01\u6761\u8fb9\u7684\u73af\uff1b\n    \u601d\u8def\uff1a\n        \u60c5\u51b51: \u5982\u679c  m < n\uff0c\u5219\u8bf4\u660e\u662f\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u53ea\u8981\u4ece\u70b91\u5f00\u59cb\u641c\u7d22\uff0c\u6309\u7167\u70b9\u7684\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\n\t\t\u641c\u7d22\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u8def\u5f84\uff1b\n        \u60c5\u51b52\uff1a1. \u5982\u679c m == n, \u662f\u4e00\u68f5\u6811\u52a01\u6761\u8fb9\u7684\u73af\u3002\u90a3\u4e48\u5728\u73af\u4e0a\u62c6\u9664\u4e00\u6761\u8fb9\u5c31\u53d8\u6210\u4e86\u6811\uff0c\u56e0\u6b64\uff0c\n               2. \u627e\u51fa\u6240\u6709\u73af\u4e0a\u7684\u8fb9\uff0c\u4f9d\u6b21\u679a\u4e3e\u5220\u9664\uff0c\u518ddfs\u641c\u7d22\uff0c\u5c06\u6bcf\u6b21\u5220\u8fb9\u5f97\u5230\u7684\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\n\t\t\t   \u53d6\u6700\u5c0f\u7684\u8def\u5f84\uff1b\n               3. \u627e\u73af\u4e0a\u7684\u8fb9\uff0c\u8f6c\u5316\u4e3a\u627e\u73af\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u5982\u679c\u4e3a1\uff0c\n\t\t\t   \u90a3\u4e48\u4e00\u5b9a\u4e0d\u5728\u73af\u4e0a\uff0c\u53ef\u4ee5\u6392\u9664\u6389\uff1b\n        \u65f6\u95f4\u590d\u6742\u5ea6 O(n*n),\u8fd8\u53ef\u4ee5\u4f18\u5316\n```cpp\n\n#include<iostream>\n#include<vector>\n#include<algorithm> \n#include<queue>\n#include<cstring>\nusing namespace std;\nbool vis[5005], tree[5005], del[5005][5005];\nvector<int> nbr[5005]; \nint path[5005], degree[5005], res[5005];\nint n, m, step, del_x, del_y;\n\nvoid dfs(int k)\n{\n\tif(step > n)\n\t{\n\t\treturn;\n\t}\n\tpath[step] = k;\n\tfor(int i = 0; i < nbr[k].size(); i++)\n\t{\n\t\tint next = nbr[k][i];\n\t\tif((del_x == k && del_y == next)|| (del_x == next && del_y == k))\n\t\t\tcontinue;\n\t\tif(vis[next] == false)\n\t\t{\n\t\t\tvis[next] = true;\n\t\t\tstep++;\n\t\t\tdfs(next);\n\t\t}\n\t}\n\treturn ;\n}\n\nvoid find_circle() //\u5c06\u975e\u73af\u4e0a\u7684\u70b9\u6807\u8bb0\u4e3atree[i] = true \n{\n\tqueue<int> q;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(degree[i] == 1) //\u5ea6\u6570\u4e3a1\u7684\u70b9\u4e00\u5b9a\u4e0d\u5728\u73af\u4e0a \n\t\t{\n\t\t\tq.push(i);\n\t\t}\n\t}\n\twhile(q.empty() == false)\n\t{\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\ttree[cur] = true; //\u5728\u6811\u4e0a\u7684\u8fb9 \uff0c\u4e5f\u5c31\u662f\u4e0d\u5728\u73af\u4e2d \n\t\tfor(int j = 0; j < nbr[cur].size(); j++)\n\t\t{\n\t\t\tint next = nbr[cur][j];\n\t\t\tdegree[next]--;\n\t\t\tif(degree[next] == 1) //\u5165\u5ea6\u4e3a1\u7684\u8fb9\u4e0d\u53ef\u80fd\u4e3a\u73af\u4e0a\u7684\u8fb9 \n\t\t\t{\n\t\t\t\tq.push(next);\n\t\t\t}\n\t\t}\n\t}\n\treturn ; \n}\n\nvoid print() //\u8f93\u51fa \n{\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcout << res[i] << \" \";\n\t}\n\treturn ;\n}\n\nbool check() //\u5982\u679c\u5f53\u524d\u8def\u5f84\u5b57\u5178\u5e8f\u66f4\u5c0f\uff0c\u8fd4\u56detrue \n{\n\tif(res[1] == 0) //\u7b2c\u4e00\u6b21\u68c0\u67e5 \n\t\treturn true;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tif(path[i] == res[i])\n\t\t\tcontinue;\n\t\telse if(path[i] < res[i])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nvoid update() // \u5c06\u5f53\u524d\u8def\u5f84\u66f4\u65b0\u4e3a\u6700\u7ec8\u8def\u5f84 \n{\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tres[i] = path[i]; //\u66f4\u65b0 \n\t}\n\treturn ;\n}\n\n\nint main()\n{\n\tcin >> n >> m;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u, v;\n\t\tcin >> u >> v;\n\t\tnbr[u].push_back(v);\n\t\tnbr[v].push_back(u);\n\t\tdegree[u]++;\n\t\tdegree[v]++;\n\t}\n\tfor(int i = 1; i <= n; i++) //\u5c06\u6bcf\u4e2a\u70b9\u7684\u90bb\u5c45\u6392\u5e8f\uff0c\u4fdd\u8bc1\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f \n\t{\n\t\tsort(nbr[i].begin(), nbr[i].end()); //\u8fed\u4ee3\u5668 \n\t}\n\tif(m < n) //\u975e\u73af\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u641c\u7d22\u4e00\u6b21\u51fa\u7ed3\u679c \n\t{\n\t\tvis[1] = true;\n\t\tstep = 1;\n\t\tdfs(1);\n\t\tupdate();\n\t}\n\telse //\u6709\u73af\uff0c\u5c06\u73af\u4e0a\u7684\u8fb9\u4f9d\u6b21\u5220\u9664\uff0c\u518ddfs \n\t{\n\t\tfind_circle(); //\u8bc6\u522b\u73af\u4e0a\u7684\u8fb9 \n\t\tfor(int i = 1; i <= n; i++)  //\u679a\u4e3e\u73af\u4e0a\u7684\u8fb9\uff0c\u5220\u9664\u4e4b\n\t\t{\n\t\t\tif(tree[i] == true) //\u5728\u6811\u4e0a\u7684\u70b9 \n\t\t\t\tcontinue;\n\t\t\tfor(int j = 0; j < nbr[i].size(); j++)\n\t\t\t{\n\t\t\t\tint next = nbr[i][j];\n\t\t\t\tif(tree[next] == true) //\u5728\u6811\u4e0a\u7684\u70b9 \n\t\t\t\t\tcontinue;\n\t\t\t\tdel_x = i; //\u627e\u5230\u4e00\u5bf9\u5728\u73af\u4e0a\u7684\u8fb9\uff0c\u6807\u8bb0\u5220\u9664\n\t\t\t\tdel_y = next;\n\t\t\t\tif(del[del_x][del_y] == true) //\u5220\u8fc7\u7684\u8fb9\u4e0d\u518d\u5220 \n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\t\n\t\t\t\tdel[del_x][del_y] = del[del_y][del_x] = true;\n\t\t\t\tmemset(vis, false, sizeof(vis)); //\u591a\u6b21dfs \n\t\t\t\tvis[1] = true; \n\t\t\t\tstep = 1;\n\t\t\t\tdfs(1);\n\t\t\t\tif(check() == true)\n\t\t\t\t{\n\t\t\t\t\tupdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprint();\n    return 0;\n}\n```\n",
        "postTime": 1565621396,
        "uid": 208251,
        "name": "\u7533\u4f73\u4fca",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "[\u6765\u73a9\u800d\u5440]\n## \u5206\u6790\n\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\n\n\u60c5\u51b5\u4e00\uff1am=n-1\n\u76f4\u63a5\u8d2a\u5fc3\u4ece1\u8282\u70b9\u5411\u4e0bdfs \u6bcf\u6b21\u9009\u53d6\u7f16\u53f7\u6700\u5c0f\u7684\u8fb9\n\n\u60c5\u51b5\u4e8c\uff1am=n\n\u56fe\u4e2d\u6709\u4e14\u6709\u4e00\u4e2a\u73af\uff0c\u5e76\u4e14\u65e0\u8bba\u5982\u4f55\u90fd\u6709\u4e00\u6761\u8fb9\u4e0d\u4f1a\u88ab\u904d\u5386\u5230\u3002\n\u53ef\u4ee5\u901a\u8fc7\u6bcf\u6b21\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u53d8\u6210\u60c5\u51b5\u4e00\uff0c\u518ddfs\uff0c\u66f4\u65b0\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u6700\u7ec8\u7b54\u6848\u3002\n\n\u4e5f\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u5373\u5220\u8fb9\u524d\u5148\u5224\u65ad\u8fd9\u6761\u8fb9\u5728\u4e0d\u5728\u73af\u4e0a\n\n\uff08\u4e0d\u8fc7\u672c\u9898\u6570\u636e\u8303\u56f4\u4e0d\u7528\u4f18\u5316\u4e5f\u53ef\u4ee5\u8fc7\u5566\uff09\n## \u4ee3\u7801\u5982\u4e0b\n```c++\n#include<bits/stdc++.h> \nusing namespace std;\ntypedef long long ll;\nconst int N=5005;\nint n,m,tot=0;\nint x[N],y[N],head[N],a[N],b[N],cnt=0;\nint lx,ly,ans[N],v[N];\nstruct edge{\n\tint v,to;\n}e[N*2];\nvoid add(int u,int v){\n\te[++tot].v=v;\n\te[tot].to=head[u];\n\thead[u]=tot;\n}\nll read(){\n\tll sum=0,f=1;\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0'){\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar(); \n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tsum=(sum<<3)+(sum<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn sum*f;\n}\nvoid pre(int x){\n     int k=0;\n\tfor(int i=head[x];i;i=e[i].to){\n     int y=e[i].v;  \n     a[++k]=y;\n\t}\n\tsort(a+1,a+k+1);\n\tint j=1;\n\tfor(int i=head[x];i;i=e[i].to){\n\t e[i].v=a[j];\n\t j++;\n\t}\n}\nvoid dfs1(int x,int fa){\n\tans[++cnt]=x;\n\tfor(int i=head[x];i;i=e[i].to){\n     int y=e[i].v;  \n\t if(y==fa)continue;\n     dfs1(y,x);\n\t}\n}\nvoid dfs2(int x,int fa){\n\t b[++cnt]=x;\n\t v[x]=1;\n\tfor(int i=head[x];i;i=e[i].to){\n     int y=e[i].v;\n\t if(y==fa||v[y])continue;\n\t if((x==lx&&y==ly)||(x==ly&&y==lx))\n\t continue;\n     dfs2(y,x);\n\t}\n}\nint check(){\n\tfor(int i=1;i<=n;i++)\n\t{\n\tif(b[i]<ans[i])return 1;\n\tif(b[i]>ans[i])return 0;\n\t}\n\treturn 0;\n}\nint main(){\n    //freopen(\"travel.in\",\"r\",stdin);\n    //freopen(\"travel.out\",\"w\",stdout);\n    n=read();\n    m=read();\n    for(int i=1;i<=m;i++)\n    {\n    \tx[i]=read();\n    \ty[i]=read();\n    \tadd(x[i],y[i]);\n    \tadd(y[i],x[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tpre(i);\n    if(m!=n){\n    \tdfs1(1,0);\n\t} \n\telse{\n\t\tfor(int i=1;i<=n;i++)\n\t\tans[i]=n;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t  lx=x[i];ly=y[i];\n\t\t  cnt=0;\n\t\t  memset(v,0,sizeof(v));\n\t\t  dfs2(1,0);\n\t\t  if(cnt<n)continue;\n\t\t  if(check()){\n\t\t  \tfor(int j=1;j<=n;j++)\n\t\t    ans[j]=b[j];\n\t\t  }\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\tcout<<ans[i];\n   if(i!=n)cout<<' ';\n   }\n    return 0;\n}  \n\n```\n\n\n",
        "postTime": 1564498371,
        "uid": 100708,
        "name": "Trilarflagz",
        "ccfLevel": 0,
        "title": "\u3010NOIP2018\u63d0\u9ad8\u7ec4 day2\u3011\u65c5\u884c"
    },
    {
        "content": "![](http://219.153.61.2:9000/imgupload/problem_1408_f9fca86a29120c0bde971b29dcd091c5.png)\n![](http://219.153.61.2:9000/imgupload/problem_1408_e6b070f8ddc85f4fcdffcdb1613a1c6f.png)\n\n\n\n\u672c\u849f\u84bb\u7684\u505a\u6cd5\u6bd4\u8f83~~\u66b4\u529b~~\u5947\u7279\uff0c\u4ee3\u7801\u8981\u5438\u6c27\u624d\u80fd\u8fc7\uff0c\u7eaf\u66b4\u529b\u7b97\u6cd5~~\u5b9e\u9645\u4e0a\u5c31\u662f\u4e0d\u60f3\u6c42\u73af~~\n### **\u9898\u89e3\u4e2d\u5b50\u4efb\u52a12\u4ee3\u7801\u7684\u5206\u503c\u7686\u662f\u5728\u5438\u6c27\u7684\u60c5\u51b5\u4e0b\uff0c\u5927\u4f6c\u52ff\u55b7**\n\n\n## **\u5b50\u4efb\u52a1\u5206\u6790**\n\u9996\u5148\uff0c\u770b\u4e00\u4e0b\u9898\u76ee\u7ed9\u7684\u6570\u636e\uff0c\u6bd4\u8f83\u7279\u6b8a\uff0c\u5927\u6982\u53ef\u5206\u4e3a\u4e24\u79cd\uff1a\n\n1.m=n-1,\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u4e2a\u6811\u7684\u7ed3\u6784\uff08n\u4e2a\u70b9n-1\u6761\u8fb9\uff09\n\n2.m=n\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u7b2c\u4e00\u4e2a\u5b50\u4efb\u52a1\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u628a\u6811\u7684\u4e00\u90e8\u5206\u53d8\u6210\u4e86\u4e00\u4e2a\u73af\n\n## **\u9884\u5904\u7406**\n\u56e0\u4e3a\u540e\u9762\u662f\u7eaf\u66b4\u529b\u7b97\u6cd5\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u9884\u5904\u7406\u7684\u8bdd\u4f1a\u8d85\u65f6\uff0c\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6bcf\u4e00\u4e2a\u70b9\u8fde\u63a5\u7684\u5176\u4ed6\u70b9\u6309\u7167\u5927\u5c0f\u6392\u5e8f\uff0c\u8fd9\u6837\u6df1\u641c\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u904d\u5386\uff0c\u51cf\u5c0f\u65f6\u95f4\u590d\u6742\u5ea6\n\n## **\u5b50\u4efb\u52a11**\n\u5b50\u4efb\u52a11\u670960\u5206\uff0c\u4f46\u4ee3\u7801\u5f88\u77ed\uff0c\u9898\u76ee\u8bf4\u53ef\u4ee5\u8d70\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u6216\u8005\u662f\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6df1\u641c\uff0c\u5e76\u4e14\u56e0\u4e3a\u524d\u9762\u7684\u9884\u5904\u7406\u5df2\u7ecf\u5b8c\u6210\u4e86\u53d6\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u8981\u6c42\uff0c\u5df2\u7ecf\u786e\u5b9a\u4e86\u6bcf\u4e00\u6b65\u7684\u51b3\u7b56\uff0c\u6240\u4ee5\u76f4\u63a5\u6df1\u641c\u4e0d\u52a0\u56de\u6eaf\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(n)\uff0c\u8f7b\u677e\u8dd1\u8fc7\n\n60\u5206Code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans[500001],step,t[500001];\nbool vis[500001];\nvector<int> ed[500001];\nvoid dfs(int x)\n{\n\tans[++step]=x;\n\tif(step==n) return;\n\tfor(int i=0;i<ed[x].size();i++)\n\t\tif(vis[ed[x][i]]==0) vis[ed[x][i]]=1,dfs(ed[x][i]);\n\treturn;\n}//\u6df1\u641c \nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint t1,t2;\n\t\tcin>>t1>>t2;\n\t\ted[t1].push_back(t2);\n\t\ted[t2].push_back(t1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmemset(t,0,sizeof(t));\n\t\tfor(int j=1;j<=ed[i].size();j++) t[j]=ed[i][j-1];\n\t\tsort(t+1,t+ed[i].size()+1);\n\t\tfor(int j=0;j<ed[i].size();j++) ed[i][j]=t[j+1];\n\t}//\u9884\u5904\u7406\u6392\u5e8f \n\tif(n!=m)\n\t{\n\t\tstep=0;\n\t\tvis[1]=1; dfs(1);\n\t\tfor(int i=1;i<n;i++) cout<<ans[i]<<\" \"; cout<<ans[n];\n\t}\n\treturn 0;\n}\n```\n\n## **\u5b50\u4efb\u52a12**\n\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u5b50\u4efb\u52a11\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b50\u4efb\u52a1\u4e8c\u7684\u73af\u4e2d\u51cf\u53bb\u4e00\u6761\u8fb9\u5c31\u53d8\u6210\u4e86\u5b50\u4efb\u52a11\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5220\u54ea\u6761\u8fb9\u662f\u6700\u4f18\u7684\uff0c\u53ea\u80fd\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff0c\u66b4\u529b\u5220\u8fb9\uff0c\u7136\u540e\u6df1\u641c\n\n88\u5206Code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,road[500001],ans[500001],step,t[500001];\nvector<int> ed[500001];\nbool vis[500001];\nbool check()\n{\n\tfor(int i=1;i<=n;i++) if(vis[i]==0) return false;\n\treturn true;\n}\nvoid dfs(int x)\n{\n\tans[++step]=x;\n\tif(check()) return;\n\tfor(int i=0;i<ed[x].size();i++)\n\t\tif(vis[ed[x][i]]==0) vis[ed[x][i]]=1,dfs(ed[x][i]);\n\treturn;\n}\nvoid dfs1(int x)\n{\n\troad[++step]=x;\n\tif(step==n) return;\n\tfor(int i=0;i<ed[x].size();i++)\n\t\tif(ed[x][i]!=0&&vis[ed[x][i]]==0) vis[ed[x][i]]=1,dfs1(ed[x][i]);\n\treturn;\n}\nbool comp()\n{\n\tint i=1;\n    while(i<=n)\n    if(road[i]==ans[i]) i++;\n    else if(road[i]<ans[i]) return true;\n    else return false;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint t1,t2;\n\t\tcin>>t1>>t2;\n\t\ted[t1].push_back(t2);\n\t\ted[t2].push_back(t1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmemset(t,0,sizeof(t));\n\t\tfor(int j=1;j<=ed[i].size();j++) t[j]=ed[i][j-1];\n\t\tsort(t+1,t+ed[i].size()+1);\n\t\tfor(int j=0;j<ed[i].size();j++) ed[i][j]=t[j+1];\n\t}\n\tif(n!=m)\n\t{\n\t\tstep=0;\n\t\tvis[1]=1; dfs(1);\n\t\tfor(int i=1;i<n;i++) cout<<ans[i]<<\" \"; cout<<ans[n];\n\t}\n\telse\n\t{\n\t\tfor(int i=1;i<=n;i++) ans[i]=99999;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=0;j<ed[i].size();j++)\n\t\t\t{\n\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\tmemset(road,0,sizeof(road));\n\t\t\t\tint tot=ed[i][j]; step=0;\n\t\t\t\ted[i][j]=0;\n\t\t\t\tvis[1]=1; dfs1(1);\n\t\t\t\ted[i][j]=tot;\n\t\t\t\tif(check()==0) continue;\n\t\t\t\telse if(comp()) for(int i=1;i<=n;i++) ans[i]=road[i];\n\t\t\t}\t\n\t\tfor(int i=1;i<n;i++) cout<<ans[i]<<\" \"; cout<<ans[n];\t\n\t}\n}\n```\n\n## **\u4f18\u5316**\n\u4e3a\u4e86\u62ff\u5230\u6ee1\u5206\u5e76\u4e14\u4e0d\u5199\u73af\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u518d\u6b21\u8fdb\u884c\u4f18\u5316\uff0c\u5728\u5b50\u4efb\u52a1\u5206\u6790\u4e2d\u5df2\u7ecf\u8bf4\u4e86\u8981\u5c06\u5b50\u4efb\u52a12\u8f6c\u5316\u4e3a\u5b50\u4efb\u52a11\u8981\u5220\u9664\u73af\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u800c\u56e0\u4e3a\u73af\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u81f3\u5c11\u8fde\u4e862\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u8fb9\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c1\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e2d\u6709\u4e00\u4e2a\u70b9\u8fde\u7684\u8fb9\u53ea\u6709\u4e00\u6761\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u4e0d\u80fd\u88ab\u5220\u9664\n\n100\u5206Code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,road[500001],ans[500001],step,t[500001];\nvector<int> ed[500001];\nbool vis[500001],yz[500001];\nbool check()\n{\n\tfor(int i=1;i<=n;i++) if(vis[i]==0) return false;\n\treturn true;\n}\nvoid dfs(int x)\n{\n\tans[++step]=x;\n\tif(check()) return;\n\tfor(int i=0;i<ed[x].size();i++)\n\t\tif(vis[ed[x][i]]==0) vis[ed[x][i]]=1,dfs(ed[x][i]);\n\treturn;\n}\nvoid dfs1(int x)\n{\n\troad[++step]=x;\n\tif(step==n) return;\n\tfor(int i=0;i<ed[x].size();i++)\n\t\tif(ed[x][i]!=0&&vis[ed[x][i]]==0) vis[ed[x][i]]=1,dfs1(ed[x][i]);\n\treturn;\n}\nbool comp()\n{\n\tint i=1;\n    while(i<=n)\n    if(road[i]==ans[i]) i++;\n    else if(road[i]<ans[i]) return true;\n    else return false;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint t1,t2;\n\t\tcin>>t1>>t2;\n\t\ted[t1].push_back(t2);\n\t\ted[t2].push_back(t1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmemset(t,0,sizeof(t));\n\t\tfor(int j=1;j<=ed[i].size();j++) t[j]=ed[i][j-1];\n\t\tsort(t+1,t+ed[i].size()+1);\n\t\tfor(int j=0;j<ed[i].size();j++) ed[i][j]=t[j+1];\n\t}\n\tfor(int i=1;i<=n;i++) if(ed[i].size()==1) yz[i]=1;//\u6807\u8bb0\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u70b9 \n\tif(n!=m)\n\t{\n\t\tstep=0;\n\t\tvis[1]=1; dfs(1);\n\t\tfor(int i=1;i<n;i++) cout<<ans[i]<<\" \"; cout<<ans[n];\n\t}\n\telse\n\t{\n\t\tfor(int i=1;i<=n;i++) ans[i]=99999;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(yz[i]) continue;//\u4f18\u5316 \n\t\t\tfor(int j=0;j<ed[i].size();j++)\n\t\t\t{\n\t\t\t\tif(yz[ed[i][j]]) continue;//\u4f18\u5316 \n\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\tmemset(road,0,sizeof(road));\n\t\t\t\tint tot=ed[i][j]; step=0;\n\t\t\t\ted[i][j]=0;\n\t\t\t\tvis[1]=1; dfs1(1);\n\t\t\t\ted[i][j]=tot;\n\t\t\t\tif(check()==0) continue;\n\t\t\t\telse if(comp()) for(int i=1;i<=n;i++) ans[i]=road[i];\n\t\t\t}\n\t\t}\t\n\t\tfor(int i=1;i<n;i++) cout<<ans[i]<<\" \"; cout<<ans[n];\t\n\t}\n}\n```\n",
        "postTime": 1563796401,
        "uid": 186573,
        "name": "Boring__Zheng",
        "ccfLevel": 6,
        "title": "\u3010NOIP2018\u63d0\u9ad8\u7ec4 day2\u3011\u65c5\u884c \u9898\u89e3"
    },
    {
        "content": "\u66b4\u529b\u5220\u8fb9+\u526a\u679d\n\n20ms\u7edd\u5bf9\u8fc7 \n\n\u6a21\u5757\u5316\u7f16\u7a0b\uff0c\u66f4\u7b26\u5408\u7a0b\u5e8f\u7684\u8bbe\u8ba1\n\nDebug\u4e3a\u8c03\u8bd5\u51fd\u6570\uff0c\u4e0d\u5fc5\u4f7f\u7528\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <ctime>\n#include <climits>\n#include <set>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int maxn=5000+10;\nstruct edge {\n\tint PlaceA;\n\tint PlaceB;\n} edges[maxn];\ninline void UpdatePath();\ninline void reset();\nvoid Del(int x);\nvoid Add(int x);\nvoid dfsA(int x);\nvoid dfsB(int x);\nvoid solveA();\nvoid solveB();\nvoid Debug();\nbool isFirst=true;\nbool FindNewPath=false;\nbool SearchFailed=false;\nint n=0,m=0,w=0;\nint FindPlace=0;\nint ans[maxn];\nint ansB[maxn];\nint vis[maxn];\nvector<int> vec[maxn];\nint main() {\n\t//freopen(\"travel.in\",\"r\",stdin);\n\t//freopen(\"travel.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tif(n==m+1)\n\t\tsolveA();\n\telse\n\t\tsolveB();\n\tfor(int i=0; i<n; ++i)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}\nvoid solveA() {\n\tint x,y;\n\tfor(int i=0; i<m; ++i) {\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tvec[x].push_back(y);\n\t\tvec[y].push_back(x);\n\t}\n\tfor(int i=1; i<=n; ++i)\n\t\tsort(vec[i].begin(),vec[i].end());\n\tvis[1]=true;\n\tans[w++]=1;\n\tdfsA(1);\n}\nvoid solveB() {\n\tfor(int i=0; i<m; ++i) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tedges[i].PlaceA=x,edges[i].PlaceB=y;\n\t\tvec[x].push_back(y);\n\t\tvec[y].push_back(x);\n\t}\n\tfor(int i=1; i<=n; ++i)\n\t\tsort(vec[i].begin(),vec[i].end());\n\tmemset(ans,0x3f,sizeof(ans));\n\tfor(int i=0; i<m; ++i) {\n\t\tDel(i);\n\t\treset();\n\t\tdfsB(1);\n\t\tUpdatePath();\n\t\tAdd(i);\n\t}\n}\nvoid Del(int x) {\n\tconst int &a=edges[x].PlaceA;\n\tconst int &b=edges[x].PlaceB;\n\tvec[a].erase(lower_bound(vec[a].begin(),vec[a].end(),b));\n\tvec[b].erase(lower_bound(vec[b].begin(),vec[b].end(),a));\n}\nvoid Add(int x) {\n\tconst int &a=edges[x].PlaceA;\n\tconst int &b=edges[x].PlaceB;\n\tvec[a].insert(upper_bound(vec[a].begin(),vec[a].end(),b),b);\n\tvec[b].insert(upper_bound(vec[b].begin(),vec[b].end(),a),a);\n//  \u6216\uff1a\n//\tvec[a].push_back(b);\n//\tvec[b].push_back(a);\n//\tsort(vec[a].begin(),vec[a].end());\n//\tsort(vec[b].begin(),vec[b].end());\n}\nvoid dfsA(int x) {\n\tfor(int i=0; i<vec[x].size(); ++i) {\n\t\tconst int& to=vec[x][i];\n\t\tif(!vis[to]) {\n\t\t\tvis[to]=true;\n\t\t\tans[w++]=to;\n\t\t\tdfsA(to);\n\t\t}\n\t}\n}\nvoid dfsB(int x) {\n\tfor(int i=0; i<vec[x].size(); ++i) {\n\t\tif(SearchFailed) return;\n\t\tconst int& to=vec[x][i];\n\t\tif(!vis[to]) {\n\t\t\tif(FindNewPath) {\n\t\t\t\tvis[to]=true;\n\t\t\t\tansB[w++]=to;\n\t\t\t\t++FindPlace;\n\t\t\t\tdfsB(to);\n\t\t\t} else {\n\t\t\t\tif(ans[w]<to) {\n\t\t\t\t\tSearchFailed=true;\n\t\t\t\t\treturn;\n\t\t\t\t} else if(ans[w]==to) {\n\t\t\t\t\tvis[to]=true;\n\t\t\t\t\tansB[w++]=to;\n\t\t\t\t\t++FindPlace;\n\t\t\t\t\tdfsB(to);\n\t\t\t\t} else if(ans[w]>to) {\n\t\t\t\t\tFindNewPath=true;\n\t\t\t\t\tvis[to]=true;\n\t\t\t\t\tansB[w++]=to;\n\t\t\t\t\t++FindPlace;\n\t\t\t\t\tdfsB(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\ninline void UpdatePath() {\n\tif(SearchFailed||FindPlace!=n) return;\n\tmemcpy(ans,ansB,sizeof(ans));\n}\ninline void reset() {\n\tmemset(vis,0,sizeof(vis));\n\tFindNewPath=false;\n\tSearchFailed=false;\n\tFindPlace=1;\n\tw=0;\n\tvis[1]=true;\n\tansB[w++]=1;\n}\nvoid Debug() {\n\tcout<<\"Ans :\";\n\tfor(int i=0; i<n; ++i)\n\t\tprintf(\"%d \",ans[i]);\n\tcout<<endl;\n\tcout<<\"AnsB:\";\n\tfor(int i=0; i<n; ++i)\n\t\tprintf(\"%d \",ansB[i]);\n\tcout<<endl;\n}\n```\n",
        "postTime": 1556087969,
        "uid": 183645,
        "name": "\u65b9\u7a0b_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "o\uff08nlogn\uff09\u505a\u6cd5\u7684\u5927\u4f6c\u53ef\u4ee5\u7565\u8fc7\u672c\u6e23\n\n# \u73af\u57fa\u6811\n\uff08\u8c8c\u4f3c\u540d\u5b57\u53ef\u4ee5\u6392\u5217\u7ec4\u5408\uff09\uff0c\u641c\u73af\uff0c\u8bb0\u5f55\u8be5\u70b9\u53ca\u5176\u4e0b\u4e00\u4e2a\u76f8\u8fde\u7684\u73af\u4e0a\u7684\u70b9\n\n\u5220\u6362\u4e0a\u7684\u8fb9\uff0c~~\uff08\u8c8c\u4f3c\u53ef\u4ee5\u7701\u4e00\u70b9\u65f6\u95f4\uff09~~\n\n\n\u5220\u8fb9\u6210\u529f\u6837\u4f8b\n\n8 8\n1 2\n2 5\n2 4\n2 3\n2 7\n3 6\n6 8\n7 8\n\nans\uff1a12345786\n\n\n\u9644\u4e0a\u4e2a\u4eba\u8ba4\u4e3a\u597d\u61c2\u7684\u4ee3\u7801\no\uff08E*n^2\uff09\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define fore(i,x) for(int i=h[x];i;i=nx[i].n)\ntypedef long long ll;\nconst int Mx=5050;\nstruct nw\n{\n    int t,n;\n}gt[Mx<<1],nx[Mx<<1];\nint h[Mx];\nint ans[Mx],res[Mx],pos;\nint del_u,del_v,m,n;\nbool cd(int u,int v)\n{\n    if((del_u==u&&del_v==v)||(del_u==v&&del_v==u))return false;\n    return true;\n}\nbool explosed[Mx],died,flag;\nvoid dfs(int u,int f)\n{\n    res[pos++]=u;\n    fore(i,u)\n    {\n        int t=nx[i].t;\n        if(!cd(u,t)||t==f)continue;\n        if(t>ans[pos]&&ans[pos]&&flag)\n        {\n            died=true;\n            return;\n        }\n        if(t>=ans[pos])dfs(t,u);\n        else \n\t\t{\n\t\t\tflag=false;\n\t\t\tdfs(t,u);\n\t\t}\n        if(pos>n)return;\n        if(died)return;\n    }\n}\nint l[Mx],r[Mx],ed=0;\nbool c[Mx],ol[Mx];\nvoid pdfs(int u,int v)\n{\n    fore(i,v)\n    {\n        int t=nx[i].t;\n        if(t==u)continue;\n        if(c[t])\n        {\n            ed=t;\n            r[v]=ed;\n            l[v]=u;\n            l[ed]=v;\n            ol[v]=true;\n            return;\n        }\n        c[t]=true;\n        pdfs(v,t);\n        if(ed==-1)return;\n        if(ol[t])\n        {\n            ol[v]=true;\n            r[v]=t;\n            if(!l[v])l[v]=u;\n            break;\n        }\n    }\n    if(ed==v)ed=-1;\n}\nbool cmp(nw x,nw y)\n{\n    if(x.t==y.t)return x.n>y.n;\n    return x.t<y.t;\n}\nint cnt;\nvoid add(int u,int v)\n{\n    nx[++cnt].n=h[u];\n    h[u]=cnt;\n    nx[cnt].t=v;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&gt[i*2].t,&gt[i*2].n);\n        gt[i*2-1].t=gt[i*2].n;\n        gt[i*2-1].n=gt[i*2].t;\n    }\n    sort(gt+1,gt+m*2+1,cmp);\n    for(int i=1;i<=2*m;i++)add(gt[i].t,gt[i].n);\n    if(n==m)\n    {\n        pdfs(0,1);\n        explosed[1]=true;\n        for(int i=1;i<=n;i++)\n            if(ol[i])\n            {\n                died=false;\n                pos=1;\n                del_u=l[i];\n                del_v=i;\n                flag=true;\n                dfs(1,0);\n                if(pos==1+n&&(!died))\n                    for(int i=1;i<=n;i++)ans[i]=res[i];\n            }\n    }\n    else \n\t{\n\t\tpos=1;\n\t\tflag=true;\n\t\tdfs(1,0);\n    \tfor(int i=1;i<=n;i++)ans[i]=res[i];\t\n\t}\n    for(int i=1;i<=n;i++)printf(\"%d \",ans[i]);\n}\n```\n",
        "postTime": 1543585078,
        "uid": 49447,
        "name": "\u6c38\u4e0d\u590d\u884c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u6211\u6bd4\u8f83\u6c99\u96d5\uff0cqwq\u4f46\u662f\u770b\u5230\u6ca1\u4eba\u5199\u8fd9\u79cd\u505a\u6cd5\u5c31\u6765\u6c34\u4e00\u4e0b\u3002\u3002\n\n\u8003\u573a\u4e0a\u770b\u5230\u8fd9\u9898\u5148\u662f\u61f5\u903c\u3002\u3002\u770b\u5230\u8fb9\u548c\u70b9\u6570\u91cf\u76f8\u7b49\u5c31\u77e5\u9053\u8fd9\u9898\u4e0d\u96be\u4e86\u3002\u3002\n\n\u5bf9\u4e8e\u6811\u7684\u60c5\u51b5\uff0c\u8d2a\u5fc3\u662f\u5f88\u663e\u7136\u7684\u3002\u4f46\u662f\u5982\u679c\u4e0d\u662f\u6811\u5462\uff1f\n\n\u65e2\u7136\u8fb9\u548c\u70b9\u76f8\u7b49\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u4f1a\u6709\u4e00\u6761**\u8fd4\u7956\u8fb9**\u3002\n\n\u5728\u52a0\u8fb9\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8f93\u5165\u7684\u65f6\u5019\u627e\u5230\u8fd9\u6761\u8fd4\u7956\u8fb9\u3002\u6211\u4eec\u6682\u65f6\u4e0d\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u8fd9\u8bfe\u6811\uff0c\u8d2a\u5fc3\u8dd1\u4e00\u6b21dfs\u5f97\u5230\u5f53\u524d\u7684\u7b54\u6848curans\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5220\u9664\u4e00\u6761\u8fb9\u3002\u80af\u5b9a\u662f\u8fd4\u7956\u8fb9\u4e24\u7aef\u3001\u4ee5\u53ca\u5b83\u4eecLCA\u8fd9\u4e09\u4e2a\u70b9\u7ec4\u6210\u7684\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\u3002\u7531\u4e8e\u672c\u9898\u9898\u76ee\u8303\u56f45000\uff0c\u53ef\u4ee5\u8003\u8651\uff08\u597d\u50cf\u4e5f\u53ea\u80fd\u8003\u8651\uff09\u7528\u6734\u7d20\u7b97\u6cd5\u2014\u2014\u4e24\u4e2a\u70b9\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0a\u8df3\u3002\n\n\u6bcf\u8df3\u4e00\u5c42\u8003\u8651\u5220\u4e00\u4e2a\u8fb9\u91cd\u65b0\u8dd1\u4e00\u6b21dfs\u3002\n\nluogu271ms,\u4e0d\u7b97\u5feb\n\n\u4ee3\u7801\u6709\u70b9\u957f\uff0c\u4f46\u601d\u8def\u5f88\u6e05\u6670\uff1a\n```cpp\n/*Heroes Never Die!\n But For Price.*/\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<set>\n#define merge(u,v) fa[find(u)] = fa[find(v)]\n// \u66b4\u529b\u51fa\u5947\u8ff9\nusing namespace std;\n#define MAXN 5005\nbool cut[MAXN][MAXN];\nvector<int> e[MAXN]; vector<int> curans[2];\nint dep[MAXN] , pre[MAXN] , n , m ;\nvoid dfs(int u,int fa,int w,int t) {\n    curans[w].push_back(u);\n    for(int i = 0 ; i < e[u].size(); ++i) {\n        int v = e[u][i];\n        if(v == fa || cut[u][v]) continue;\n        if(!t) dep[v] = dep[u] + 1 , pre[v] = u;\n        dfs(v,u,w,t);\n    }\n}\nint fa[MAXN];\nint find(int u ) {\n    return u == fa[u] ? u : fa[u] = find(fa[u]);\n}\nint U , V;\nint main() {\n    //freopen(\"13.in\",\"r\",stdin);\n    //freopen(\"travel.out\",\"w\",stdout);\n    cin >> n >> m;\n    if( m == n - 1 ) {\n        for(int i = 0,u,v ; i < m ; ++ i) \n            scanf(\"%d%d\",&u,&v),e[u].push_back(v) , e[v].push_back(u);\n        for(int i = 1 ; i <= n ; ++ i) sort(e[i].begin(),e[i].end());\n        dfs(1,1,0,1);\n        for(int i = 0 ; i < curans[0].size() ; ++ i) printf(\"%d \",curans[0][i]);\n        return 0;puts(\"rua~\");\n    }\n    else {\n        for(int i = 1 ; i <= n ; ++ i) fa[i] = i;\n        for(int i = 0,u,v ; i < m ; ++ i) {\n            scanf(\"%d%d\",&u,&v);\n            if(find(u) != find(v))\n                e[u].push_back(v) , e[v].push_back(u), merge(u,v);\n            else U = u , V = v;\n        }\n        for(int i = 1 ; i <= n ; ++ i) sort(e[i].begin(),e[i].end());\n        dfs(1,1,0,0);\n        int curmin = 0 , uu = U , vv = V;\n        e[uu].push_back(vv) , e[vv].push_back(uu) , sort(e[uu].begin(),e[uu].end()) ,sort(e[vv].begin(),e[vv].end());\n        if(dep[U] < dep[V]) swap(U,V);\n        while(dep[U] > dep[V]) {\n            cut[U][pre[U]] = cut[pre[U]][U] = true , curans[curmin^1].clear();\n            dfs(1,1,curmin^1,1);\n            for(int i = 0 ; i < curans[0].size() ; ++i)  \n                if(curans[curmin][i] != curans[curmin^1][i]) {\n                    if(curans[curmin][i] > curans[curmin^1][i]) curmin ^= 1;\n                    break;\n                }\n            cut[U][pre[U]] = cut[pre[U]][U] = false;\n            U = pre[U];\n        }\n        while(U != V) {\n            cut[U][pre[U]] = cut[pre[U]][U] = true , curans[curmin^1].clear();\n            dfs(1,1,curmin^1,1);\n            for(int i = 0 ; i < curans[0].size() ; ++i)  \n                if(curans[curmin][i] != curans[curmin^1][i]) {\n                    if(curans[curmin][i] > curans[curmin^1][i]) curmin ^= 1;\n                    break;\n                }\n            cut[U][pre[U]] = cut[pre[U]][U] = false;\n            U = pre[U];\n            swap(U,V);\n            cut[U][pre[U]] = cut[pre[U]][U] = true, curans[curmin^1].clear();\n            dfs(1,1,curmin^1,1);\n            for(int i = 0 ; i < curans[0].size() ; ++i)  \n                if(curans[curmin][i] != curans[curmin^1][i]) {\n                    if(curans[curmin][i] > curans[curmin^1][i]) curmin ^= 1;\n                    break;\n                }\n            cut[U][pre[U]] = cut[pre[U]][U] = false;\n            U = pre[U];\n        }\n        for(int i = 0 ; i < curans[curmin].size() ; ++ i) printf(\"%d \",curans[curmin][i]);\n    }\n} \n```",
        "postTime": 1543020413,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "\u88ab\u8fd9\u9898\u9000\u5f79\u4e86\u3002\u3002\u3002  \nm=n-1\u7684\u6811\u7684\u60c5\u51b5\u5f88\u597d\u505a\uff0c\u76f4\u63a5\u8d2a\u5fc3\u6bcf\u4e2a\u70b9\u5148\u8d70\u76f8\u90bb\u7684\u70b9\u4e2d\u8f83\u5c0f\u7684\u70b9\u5373\u53ef  \nm=n\u65f6\u53ef\u4ee5\u5220\u4e00\u6761\u8fb9\uff0c\u518d\u548cm=n-1\u65f6\u4e00\u6837\u505a\u5c31\u53ef\u4ee5\u4e86\u3002\u8003\u573a\u4e0a\u89c9\u5f97\u590d\u6742\u5ea6$O(n^2)$\u633a\u5bf9\uff0c\u7ed3\u679cvector\u5927\u5e38\u6570\u52a0\u4e0a\u5220\u8fb9\u5fd8\u5220\u53cd\u5411\u8fb9\u5c31tle\u4e86\u4e09\u4e2a\u70b9\uff0c\u51c9\u51c9...  \n\u53ef\u4ee5\u53d1\u73b0m=n\u65f6\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u73af\uff0c\u53ea\u7528\u5220\u73af\u4e0a\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u5426\u5219\u4f1a\u7834\u574f\u56fe\u7684\u8fde\u901a\u6027\u3002  \n\u8003\u540e\u5199\u7684\u4ee3\u7801\uff0c\u8fd8\u662f\u7528\u7684vector\uff0c\u4f46\u4ee3\u7801\u5374\u8dd1\u5f97\u975e\u5e38\u5feb\uff0c\u6700\u540e\u4e09\u4e2a\u70b9<20ms~~(\u662f\u4e0d\u662f\u6d1b\u8c37\u7684\u6570\u636e\u592a\u6c34\u4e86)~~  \n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nconst int N=5010;\nint vis[N];\nvector<int> G[N],g[N];\nint b[N][N];\nvoid dfs(int u,int f){\n    printf(\"%d \",u);\n    for(int i=0;i<G[u].size();i++)\n        if(G[u][i]!=f) dfs(G[u][i],u);\n}\nint num;int ans[N],t[N];\nint findc(int u,int f){ //\u627e\u73af\uff0c\u6b64\u5904\u53c2\u8003\u697c\u4e0b\u7684\u9898\u89e3\n    if(num) return 0;\n    vis[u]=1;\n    for(int i=0;i<G[u].size();i++){\n        int v=G[u][i];\n        if(v==f) continue;\n        if(vis[v]){\n            g[u].push_back(v);num=v;\n            return 1;\n        }\n        if(findc(v,u)){\n            if(v==num) return 0;\n            g[u].push_back(v);return 1;\n        }\n    }\n}\nvoid dfs(int u){\n    if(vis[u]) return;\n    vis[u]=1;\n    t[++num]=u;\n    for(int i=0;i<G[u].size();i++){\n        int v=G[u][i];\n        if(b[u][v]==0) dfs(v);\n    }\n}\ninline int check(){\n    for(int i=1;i<=n;i++) {\n        if(t[i]<ans[i]) return 1;\n        if(t[i]>ans[i]) return 0;\n    }\n    return 0;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    int u,v;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&u,&v);\n        G[u].push_back(v),G[v].push_back(u);\n    }\n    for(int i=1;i<=n;i++) sort(G[i].begin(),G[i].end()),ans[i]=n;\n    if(m<n){\n        dfs(1,0);\n        return 0;\n    }else{\n        num=0;\n        findc(1,0);\n        for(int i=1;i<=n;i++)\n            for(int j=0;j<g[i].size();j++){\n                for(int k=1;k<=n;k++) vis[k]=0;\n                int v=g[i][j];num=0;\n                b[i][v]=b[v][i]=1; //\u5220\u8fb9\n                dfs(1);\n                b[i][v]=b[v][i]=0; //\u8fd8\u539f\n                if(num==n) \n                    if(check()) \n                        for(int i=1;i<=n;i++) ans[i]=t[i];\n            }\n        for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1542364241,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "~~\u5176\u5b9e\u8fd9\u9898\u4e0d\u96be\u554a......\u53ef\u662f\u849f\u84bb\u6211\u8003\u573a\u4e0a\u8fd8\u662f\u6ca1\u505a\u51fa\u6765.~~\n\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u9898\u8fb9\u6570\u53ea\u6709\u4e24\u79cd:m=n-1 or m=n.\n\n\u90a3\u4e48\u5f53m=n-1\u65f6,\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u6df1\u641c\u4e00\u4e0b.\u4ee5\u4e3a\u5b57\u5178\u5e8f\u6bd4\u8f83\u65f6\u80af\u5b9a\u662f\u8d8a\u524d\u9762\u8d8a\u4f18\u5148,\u6240\u4ee5\u5f53dfs\u5230u\u65f6,\u628a\u513f\u5b50v\u4ece\u5c0f\u5230\u5927\u7ee7\u7eed\u6df1\u641c\u5373\u53ef,\u65f6\u95f4\u590d\u6742\u5ea6O($n^2$)(\u90bb\u63a5\u77e9\u9635......) or ($nlogn$)\n\n\u5f53m=n\u65f6,\u6211\u8003\u573a\u4e0a\u60f3\u7684\u975e\u5e38\u9ebb\u70e6,\u4f46\u662f\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u66b4\u529b\u4e00\u70b9......\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8d70\u5230\u73af\u4e0a\u7684\u65f6\u5019\u53ea\u4f1a\u56de\u53bb\u4e00\u6b21,\u90a3\u4e48\u4e0d\u5c31\u76f8\u5f53\u4e8e\u5220\u53bb\u4e86\u4e00\u6761\u73af\u4e0a\u7684\u8fb9\u7136\u540e\u8dd1\u7b2c\u4e00\u90e8\u5206\u7684\u641c\u7d22?(\u4f46\u662f\u6211\u4eec\u592a\u61d2\u4e86\u4e0d\u77e5\u9053\u54ea\u6761\u8fb9\u5728\u73af\u4e0a\u4e8e\u662f\u6211\u4eec\u66f4\u66b4\u529b\u5730\u968f\u4fbf\u5220\u9664\u4e00\u6761\u8fb9......)\u4e8e\u662f\u6211\u4eec\u5c31\u5f00\u5fc3\u7684AC\u4e86,\u65f6\u95f4\u590d\u6742\u5ea6O($n^2$+$nlogn$)(\u4f60\u8981\u662f\u518d\u7528\u90bb\u63a5\u77e9\u9635\u6211\u4e5f\u6ca1\u529e\u6cd5)\n\n\u4e0b\u9644\u4ee3\u7801\n```pascal\nvar\n        n,m,mm,i,sp,tot:longint;\n        x,y,l,r,a,b,id:array[1..10005]of longint;\n        flag:array[1..5005]of boolean;\nprocedure dfs(u:longint);//\u5f53m=n\u662f\u7684\u8d2a\u5fc3\u641c\u7d22,\u975e\u5e38\u7b80\u5355\nvar\n        i:longint;\nbegin\n        for i:=l[u] to r[u] do\n        if flag[y[i]] then\n        begin\n                flag[y[i]]:=false;\n                write(y[i],' ');\n                dfs(y[i]);\n        end;\nend;\nprocedure swap(var a,b:longint);\nvar\n        c:longint;\nbegin\n        c:=a;\n        a:=b;\n        b:=c;\nend;\nprocedure sort(l,r:longint);//\u628a\u8fb9\u6309\u7167x\u4e3a\u7b2c\u4e00\u5173\u952e,y\u4e3a\u7b2c\u4e8c\u5173\u952e\u6392\u5e8f\nvar\n        i,j,mid1,mid2:longint;\nbegin\n        i:=l;\n        j:=r;\n        mid1:=x[(l+r)>>1];\n        mid2:=y[(l+r)>>1];\n        repeat\n                while (x[i]<mid1)or((x[i]=mid1)and(y[i]<mid2)) do inc(i);\n                while (x[j]>mid1)or((x[j]=mid1)and(y[j]>mid2)) do dec(j);\n                if i<=j then\n                begin\n                        swap(x[i],x[j]);\n                        swap(y[i],y[j]);\n                        swap(id[i],id[j]);\n                        inc(i);\n                        dec(j);\n                end;\n        until i>j;\n        if i<r then sort(i,r);\n        if l<j then sort(l,j);\nend;\nprocedure dfs2(u:longint);\nvar\n        i:longint;\nbegin\n        //\u6ce8\u610f\u5224\u65ad\u5f53\u524d\u8fb9\u80fd\u8d70\u5426(sp\u4f1a\u53d8\u62102\u6761,\u6392\u5e8f\u540e\u6253\u4e71,\u6240\u4ee5\u7528id\u6570\u7ec4\u5224\u65ad)\n        for i:=l[u] to r[u] do\n        if (flag[y[i]])and(id[i]<>sp) then\n        begin\n                flag[y[i]]:=false;\n                inc(tot);\n                b[tot]:=y[i];\n                dfs2(y[i]);\n        end;\nend;\nprocedure pd;//\u5224\u65ad\u5f53\u524d\u65b9\u6848\u5b57\u5178\u5e8f\u662f\u5426\u66f4\u4f18\nvar\n        i:longint;\nbegin\n        for i:=1 to n do//\u82e5\u662f\u4e0d\u5c0f\u5fc3\u5220\u9664\u4e86\u4e0d\u662f\u73af\u4e0a\u7684\u8fb9\u90a3\u4e48\u4e0d\u884c\n        if flag[i] then exit;\n        if a[1]=0 then//\u4e4b\u524d\u6ca1\u6709\u65b9\u6848\u76f4\u63a5\u9009\u62e9\u5f53\u524d\u65b9\u6848\n        begin\n                for i:=1 to n do\n                a[i]:=b[i];\n                exit;\n        end;\n        for i:=1 to n do//\u6bd4\u8f83\u5b57\u5178\u5e8f\n        if a[i]<>b[i] then\n        begin\n                if b[i]>a[i] then exit//\u5f53\u524d\u65b9\u6848\u4e0d\u4f18\n                else break;\n        end;\n        for i:=1 to n do//\u5f53\u524d\u65b9\u6848\u66f4\u4f18,\u9009\u62e9\n        a[i]:=b[i];\nend;\nbegin\n        read(n,m);\n        mm:=m;\n        for i:=1 to m do//\u8fb9\u8981\u590d\u5236\u4e00\u904d\u56e0\u4e3a\n        begin\n                read(x[i],y[i]);\n                id[i]:=i;\n                inc(mm);\n                y[mm]:=x[i];\n                x[mm]:=y[i];\n                id[mm]:=i;\n        end;\n        sort(1,mm);\n        l[1]:=1;//\u5904\u7406\u51fa\u548ci\u70b9\u76f8\u90bb\u7684\u8fb9\u7684\u5f00\u5934(l[i])\u4e0e\u7ed3\u5c3e(r[i])\n        r[n]:=mm;\n        for i:=2 to mm do\n        if x[i-1]<>x[i] then\n        begin\n                r[x[i-1]]:=i-1;\n                l[x[i]]:=i;\n        end;\n        if m=n-1 then//\u5224\u65ad\u7279\u6b8a\u60c5\u51b5\n        begin\n                for i:=1 to n do\n                flag[i]:=true;\n                flag[1]:=false;\n                write(1,' ');\n                dfs(1);\n                exit;\n        end;\n        for sp:=1 to m do//\u968f\u4fbf\u679a\u4e3e\u5220\u6389\u54ea\u6761\u8fb9\n        begin\n                for i:=1 to n do//\u9884\u5904\u7406\n                flag[i]:=true;\n                flag[1]:=false;\n                tot:=1;\n                b[1]:=1;\n                dfs2(1);//\u8d2a\u5fc3\u641c\u7d22\n                pd;\n        end;\n        for i:=1 to n do\n        write(a[i],' ');\nend.\n```",
        "postTime": 1542022557,
        "uid": 28810,
        "name": "King_of_gamers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    },
    {
        "content": "60\u5206\u5176\u5b9e\u5f88\u597d\u5f97:\n\n\u57fa\u672c\u5c31\u662f\u88f8\u7684dfs\u56fe\u7684\u904d\u5386.\n\u7528\u8d2a\u5fc3\u7684\u601d\u60f3dfs\u6bcf\u4e00\u4e2a\u70b9,\u7136\u540e\u6bcf\u6b21\u5c3d\u91cf\u8d70\u7f16\u53f7\u6700\u5c0f\u7684\u70b9,\u4e00\u76f4\u8d70\u5230\u5934\u518d\u56de\u6765.\u8f93\u51fa\u7ecf\u8fc7\u7684\u6bcf\u4e00\u4e2a\u70b9\u5c31\u597d\u4e86.\u4ee3\u7801\u4e5f\u5f88\u7b80\u5355.\n\u5927\u6982\u5c3120\u591a\u884c.\n\n```cpp\n#include<iostream>\n#define MAX 5005\nusing namespace std;\nbool map[MAX][MAX];\nbool vis[MAX];\nint n,m;\nvoid dfs(int u){\n    cout<<u<<' ';\n    for(int i=1;i<=n;i++)\n        if(!vis[i]&&map[u][i]) \n            vis[i]=true,dfs(i);\n}\nint main(){\n    cin>>n>>m;\n    int t1,t2;\n    for(int i=0;i<m;i++){\n        cin>>t1>>t2;\n        map[t1][t2]=map[t2][t1]=true;\n    }\n    vis[1]=true;\n    dfs(1);\n    return 0;\n}\n```\n\n100\u5206\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86:\n\n\u6211\u4eec\u89c2\u5bdf\u6570\u636e\u53ef\u4ee5\u53d1\u73b0,\u5269\u4e0b\u7684\u767e\u5206\u4e4b\u56db\u5341\u6570\u636e\u5176\u5b9e\u53ea\u662f\u591a\u4e86\u4e00\u6761\u8fb9,\u90a3\u4e48\u53ef\u4e0d\u53ef\u4ee5\u53ef\u4e0d\u53ef\u4ee5\u628a\u5269\u4e0b\u7684\u767e\u5206\u4e4b\u56db\u5341\u7684\u6570\u636e\u8f6c\u6362\u6210\u540c\u6837\u7684\u95ee\u9898\u5462?\n\n\u7b54\u6848\u662f\u53ef\u4ee5\u7684,\u90a3\u4e48\u8981\u5220\u9664\u62ff\u4e00\u6761\u8fb9\u5462?\n\n\u6839\u636e\u6811\u7684\u5b9a\u4e49,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0,n\u4e2a\u70b9,m=n\u4e2a\u8fb9\u4e00\u5b9a\u662f\u5b58\u5728\u73af\u7684.\u6240\u4ee5\u5982\u679c\u6709\u8fb9\u4e0d\u8d70\u7684\u8bdd,\u90a3\u5c31\u662f\u73af\u4e0a\u7684\u8fb9.\u6240\u4ee5\u6211\u4eec\u7528\u62d3\u6251\u6392\u5e8f\u627e\u5230\u73af\u4e4b\u540e,\u5c1d\u8bd5\u5220\u9664\u6bcf\u4e00\u6761\u73af\u4e0a\u7684\u8fb9,\u5728dfs\u4e00\u904d,\u8bb0\u5f55\u6700\u4f18\u7b54\u6848\u5c31\u884c\u4e86.\n\n```cpp\nvoid find_circle(){\n     bool flag;\n     for(int i=1;i<=n;i++){\n     flag=false;\n     for(int i=1;i<=n;i++){\n             if(degree[i]==1&&circle[i]){\n                      circle[i]=false;\n                      for(int k=first[i];k!=-1;k=e[k].next)        \n                              degree[e[k].to]--;\n                              }\n                      flag=true;\n                      }\n     if(flag==false) break;\n     }\n     }\n```\nps.degree\u8bb0\u5f97\u662f\u6709\u591a\u5c11\u6761\u8fb9\u901a\u5411\u8fd9\u4e2a\u70b9,\u5982\u679c\u53ea\u6709\u4e00\u6761\u8fb9\u901a\u5411\u8fd9\u4e2a\u70b9\u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u5b64\u7acb\u7684,\u90a3\u4e48\u5220\u9664\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u94fe\u63a5\u7684\u6240\u6709\u8fb9.\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b,\u76f4\u5230\u53d1\u73b0\u6ca1\u6709\u5165\u5ea6\u4e3a\u4e00\u7684\u70b9,\u90a3\u4e48\u8fd9\u4e9b\u70b9\u5c31\u662f\u7ec4\u6210\u73af\u7684\u90e8\u5206,\u4efb\u610f\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u7ec4\u6210\u73af\u7684\u8282\u70b9\u7684\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u5220\u9664\u7684\u8fb9.\n\n\u4e0d\u8fc7\u8fd9\u6837\u7684\u8bdd,\u90bb\u63a5\u77e9\u9635\u80af\u5b9a\u662f\u4e0d\u884c\u7684,\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\u4e86.\n\u6240\u4ee5\u6211\u7528\u7684\u65b9\u6cd5\u662f\u5148\u628a\u90bb\u63a5\u77e9\u9635\u5b58\u4e0b\u6765,\u518d\u8f6c\u6362\u6210\u90bb\u63a5\u8868.\n\n```cpp\nvoid addedge(int from,int t){\n    e[tot].to=t;\n    e[tot].next=first[from];\n    first[from]=tot;\n    tot++; \n}\nvoid build_edge(){\n    for(int i=1;i<=n;i++)\n    for(int j=n;j>=1;j--)\n    if(map[i][j]) addedge(i,j),map[i][j]=false;\n}\n```\nps.\u5728\u5efa\u5b8c\u90bb\u63a5\u8868\u4e4b\u540e\u6211\u628amap\u6570\u7ec4\u6e05\u7a7a\u4e86,\u56e0\u4e3a\u5efa\u5b8c\u90bb\u63a5\u8868\u4e4b\u540e\u6211\u5c31\u628amap\u6570\u7ec4\u5f53\u4f5c\u6807\u8bb0\u6570\u7ec4\u4e86,\u7528\u6765\u6807\u8bb0\u5df2\u5220\u8fc7\u7684\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u7f16\u53f7.\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9,\u6240\u4ee5\u5220\u9664\u94fe\u63a5ab\u7684\u8fb9\u548c\u5220\u9664\u94fe\u63a5ba\u7684\u8fb9\u6548\u679c\u662f\u4e00\u6837\u7684,\u6253\u4e86\u6807\u8bb0\u4e4b\u540e\u53ef\u4ee5\u5c11\u505a\u4e00\u534a\u7684dfs.\n\n\u4e0b\u9762\u5c31\u662f\u672c\u849f\u84bb\u7684\u4ee3\u7801\u4e86..\n\nway1\u662f\u89e3\u51b3\u65e0\u73af\u60c5\u51b5\u4e0b\u7684\u51fd\u6570\n\nway2\u662f\u89e3\u51b3\u6709\u73af\u60c5\u51b5\u4e0b\u7684\u51fd\u6570\n\n```cpp\n#include<iostream>\n#define MAX 5005\nusing namespace std;\nbool map[MAX][MAX];\nint tot=0;\nstruct edge{\n       int to;\n       int next;\n       }e[MAX<<1];\nint first[MAX];\nbool vis[MAX];\nbool circle[MAX];\nint degree[MAX];\nint ans[MAX];\nint permutation[MAX];\nint n,m;\nint cur=0;\ninline int read() {\n\tchar ch = getchar();\n\tint x = 0;\n\twhile (ch<'0' || ch>'9') ch = getchar();\n\twhile (ch >= '0'&&ch <= '9') {\n\t\tx = (x << 3) + (x << 1) + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x;\n}\ninline void addedge(int from,int t){\n\te[tot].to=t;\n\te[tot].next=first[from];\n\tfirst[from]=tot;\n\ttot++; \n}\nvoid build_edge(){\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=n;j>=1;j--)\n\tif(map[i][j]) addedge(i,j),map[i][j]=false;//\u5efa\u5b8c\u8fb9\u4e4b\u540e\u628amap\u6570\u7ec4\u5f53\u4f5c\u6807\u8bb0\u6570\u7ec4 \n}\nnamespace way1{\ninline void dfs(int u){\n     ans[++cur]=u;\n     for(int i=first[u];i!=-1;i=e[i].next){\n             if(vis[e[i].to]){\n                   vis[e[i].to]=false;\n                   dfs(e[i].to);\n                                   }\n             }\n     }\nvoid solve(){\n\tdfs(1);\n}\n          }\nnamespace way2{\nvoid find_circle(){\n     bool flag;\n     for(int i=1;i<=n;i++){\n     flag=false;\n     for(int i=1;i<=n;i++){\n             if(degree[i]==1&&circle[i]){\n                      circle[i]=false;\n                      for(int k=first[i];k!=-1;k=e[k].next)        \n                              degree[e[k].to]--;\n                              }\n                      flag=true;\n                      }\n     if(flag==false) break;\n     }\n     }\ninline void dfs(int u){\n     permutation[++cur]=u;\n     for(int i=first[u];i!=-1;i=e[i].next){\n             if(vis[e[i].to]){\n                   vis[e[i].to]=false;\n                   dfs(e[i].to);\n                                   }\n             }\n     }\ninline bool is_better(){\n     if(ans[1]==0) return true;\n     \n     for(int i=1;i<=n;i++){\n             if(permutation[i]<ans[i])return true;\n             if(permutation[i]>ans[i])return false;\n             }\n     return false;\n     }\nvoid solve(){\n     find_circle();\n     int last,t1,t2;\n     for(int i=1;i<=n;i++){\n             if(circle[i]){\n             \t   last=first[i];\n                   for(int k=first[i];k!=-1;k=e[k].next){\n                   \t       if(k!=first[i]&&k!=e[first[i]].next) last=e[last].next;\n                   \t       \n                           if(circle[e[k].to]&&!(map[i][e[k].to]||map[e[k].to][i]))//\u9632\u6b62\u91cd\u590d\u5220\u8fb9 \n\t\t\t\t\t\t   {\n\t\t\t\t\t\t   map[i][e[k].to]=map[e[k].to][i]=true; \n                           for(int j=1;j<=n;j++) vis[j]=true;\n                           vis[1]=false;\n                           cur=0;\n                           \n                           t2=first[i];\n                           if(k==t2){\n                           \t  t1=first[i];\n                           \t  first[i]=e[first[i]].next;\n\t\t\t\t\t\t   }\n                           else {\n                           \t  t1=e[last].next;\n                           \t  e[last].next=e[k].next;\n\t\t\t\t\t\t   }\n                       \n                           dfs(1);\n                           \n                           if(k==t2) first[i]=t1;\n                           else e[last].next=t1;\n                           \n                           if(is_better())\n                               for(int i=1;i<=n;i++) ans[i]=permutation[i];\n                                              }\n                                                         }\n                           }\n             }\n     }     \n          }\nint main(){\n    int t1,t2;\n\tn = read(), m = read();\n    for(int i=1;i<=n;i++){\n            first[i]=-1;\n            vis[i]=true;\n            circle[i]=true;\n            degree[i]=0;\n            ans[i]=0;\n            for(int j=1;j<=n;j++)\n                    map[i][j]=false;\n            }\n    for(int i=1;i<=m;i++){\n\t\t\tt1 = read(), t2 = read();\n            map[t1][t2]=true;\n            map[t2][t1]=true;\n            \n            degree[t1]++;\n            degree[t2]++;\n            }\n    build_edge();\n    vis[1]=false;\n    \n    if(n==m+1) way1::solve();\n    else way2::solve();\n    \n    for(int i=1;i<=n;i++) cout<<ans[i]<<' ';\n    //system(\"pause\");\n    return 0;\n}\n\n\n```",
        "postTime": 1542434647,
        "uid": 97253,
        "name": "Lacrymabri",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5022 \u3010\u65c5\u884c\u3011"
    }
]