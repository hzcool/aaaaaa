[
    {
        "content": " \u8bf4\u5728\u524d\u9762\uff1a\u65e2\u7136\u662f\u6ca1\u4ec0\u4e48\u5305\u88c5\u7684\u6a21\u677f\u9898\uff0c\u90a3\u4e48\u5efa\u8bae\u5927\u5bb6\u6253\u7ec6\u81f4\u4e00\u4e9b\uff0c\u5982\u679c\u4e0d\u5f88\u6e05\u695a\uff0c\u4ee3\u7801\u91cf\u591a\u4e00\u4e9b\u4e5f\u6ca1\u5173\u7cfb\uff0c\u4e00\u6761\u4e00\u6761\u91cd\u5728\u7406\u89e3\u900f\u5f7b\n \n---\n## \u597d\uff0c\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u5f88\u660e\u663e\u7684\u4e00\u9053Tarjan\uff0c\u9898\u89e3\u4e2d\u8bb2Tarjan\u7684\u795e\u7287\u4e5f\u6709\u5f88\u591a\uff0c\u4f46\u662f\u6211\u81ea\u8ba4\u4e3a\u8fd8\u53ef\u4ee5\u591a\u7528\u4e9b\u56fe\u548cMarkdown\u5c06\u8fd9\u4e2a\u7b97\u6cd5\u8bb2\u7684\u66f4\u6e05\u695a\u4e9b\uff0c\u6240\u4ee5\u8fd9\u91cc\u91cd\u65b0\u8bb2\u4e00\u4e0bTarjan\uff1a\n\n---\n## \u8fd9\u91cc\u666e\u53ca\u57fa\u672c\u6982\u5ff5:\n\n* \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u56feG\u6765\u8bf4\u7684\u4e00\u4e2a\u5b50\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u53ef\u4ee5\u5f7c\u6b64\u5230\u8fbe\uff0c\u8fd9\u4e2a\u5b50\u56fe\u5c31\u88ab\u79f0\u4e3a\u56feG\u7684\u8fde\u901a\u5206\u91cf\uff08\u4e00\u4e2a\u70b9\u5c31\u662f\u6700\u5c0f\u7684\u8fde\u901a\u5206\u91cf\uff09\n* \u65f6\u95f4\u6233\uff1a\u641c\u7d22\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u8fd9\u4e2a\u70b9\u5c06\u88ab\u8d4b\u4e88\u4e00\u4e2a _\u552f\u4e00_ \u7684\u65f6\u95f4\u91cf\uff0c\u5e76\u4e14\u8d8a\u65e9\u641c\u5230\u7684\u70b9\u65f6\u95f4\u6233\u8d8a\u5c0f\uff08\u5f53\u7136\u4e86\uff09 \n\n\nTarjan\u662f\u4e00\u4e2a\u57fa\u4e8e\u6df1\u641c\uff0c\u53ef\u4ee5\u6c42\u89e3\u56fe\u4e2d\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u7684\u7b97\u6cd5\uff0c\u57fa\u672c\u601d\u60f3\u8bf7\u770b\u56fe\uff1a\n\n\u5728\u6211\u4eec\u5bf9\u4e00\u4e2a\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\uff0c\u8d70\u8fc7\u7684\u8fb9\u4f1a\u5f97\u5230\u4e00\u68f5\u641c\u7d22\u6811\uff0c\u641c\u7d22\u6811\u53ef\u4ee5\u770b\u505a\u662f\u539f\u56fe\u629b\u5f03\u4e86\u4e00\u4e9b\u8fb9\u800c\u5f62\u6210\u7684\n\n\u8fd9\u4fbf\u662f\u4e00\u68f5\u641c\u7d22\u6811\u4e86\n\n![](https://cdn.luogu.com.cn/upload/pic/63447.png)\n\n\u6211\u4eec\u5bf9\u629b\u5f03\u6389\u7684\u8fb9\u505a\u4e00\u4e2a\u5206\u7c7b\uff0c\u5bf9\u4e8e\u8fd9\u68f5\u6811\u4e2d\u88ab\u8fd8\u539f\u7684\u539f\u56fe\u4e2d\u7684\u8fb9\u6709\u4e09\u79cd\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/63515.png)\n\n* \u7ea2\u8272\u7684\u8fb9-\u6a2a\u53c9\u8fb9\n* \u84dd\u8272\u7684\u8fb9-\u524d\u5411\u8fb9\n* \u7eff\u8272\u7684\u8fb9-\u540e\u5411\u8fb9\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6a2a\u53c9\u8fb9\u548c\u524d\u5411\u8fb9\u90fd\u65e0\u6cd5\u6784\u6210\u56de\u8def\uff0c\u5373\u4e0d\u80fd\u5f62\u6210\u5927\u4e8e\u4e00\u4e2a\u70b9\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684\uff0c\u5c31\u662f\u627e\u51fa\u91cd\u8981\u7684\u540e\u5411\u8fb9\u6765\n\n\u600e\u4e48\u627e\u540e\u5411\u8fb9\u5462\uff1f\u4f60\u53ef\u4ee5\u56de\u60f3\u4e00\u4e0b\u521a\u624d\u63d0\u5230\u7684\u201c\u65f6\u95f4\u6233\u201d\uff0c\u6ca1\u9519\uff0c\u5982\u679c\u6211\u4eec\u641c\u7d22\u5230\u4e86\u4e00\u4e2a**\u4e4b\u524d\u641c\u8fc7\u7684\u70b9\uff0c\u4e14\u4ed6\u5f53\u524d\u70b9\u7684\u7956\u5148\u4e00\u6837\uff0c\u90a3\u4e48\u6beb\u65e0\u7591\u95ee\u7684\uff0c\u6211\u4eec\u8d70\u5728\u4e86\u540e\u5411\u8fb9\u4e0a**\n\nTarjan\u7b97\u6cd5\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4fe1\u606f\uff1a\n\n* dfn[maxn]:\u50a8\u5b58\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u6233\n* low[maxn]:\u50a8\u5b58\u6bcf\u4e2a\u70b9\u8bbf\u95ee\u7956\u5148\u7684\u80fd\u529b\n\n\u4ec0\u4e48\u662f\u8bbf\u95ee\u7956\u5148\u7684\u80fd\u529b\u5462\uff1f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u70b9\u6700\u591a\u80fd\u8d70\u56de\u5934\u8def\u5230\u4ec0\u4e48\u5730\u6b65\uff0clow\u6570\u7ec4\u50a8\u5b58\u7684\u662f\u4ed6\u80fd\u8bbf\u95ee\u5230\u7684\u6700\u65e9\u7956\u5148\u7684dfn\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u56de\u5934\u8def\u53ef\u8d70\uff0c\u90a3low\u503c\u5c31\u662f\u4ed6\u81ea\u5df1\u7684dfn\u503c\u54af\n\n\u597d\u4e86\uff0c\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u6709\u4e00\u4e9b\u611f\u89c9\u4e86\uff0c\u6211\u4eec\u6765\u770bTarjan\u7684\u6a21\u677f\u4ee3\u7801\uff1a\n\n```cpp\nstruct edge{\n\tint x,y,w;\n}E[maxm];\nint dfn[maxn],low[maxn],tmmk=0;\nbool v[maxn];//v\u6570\u7ec4\u7528\u6765\u8ddf\u8e2a\u8fd9\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u89c1\u5230\u5b83\u7684\u7528\u6cd5 \nstack<int> S;\nvoid tarjan(int x)\n{\n   dfn[x]=low[x]=++tmmk;//\u6bcf\u4e2a\u70b9\u5728\u6700\u5f00\u59cb\u88ab\u8bbf\u95ee\u65f6\uff0c\u65f6\u95f4\u6233\u548clow\u503c\u90fd\u662f\u4e00\u6837\u7684 \n   S.push(x);\n   v[x]=true;\n   for(int i=head[x];i;i=next[i])//\u94fe\u5f0f\u524d\u5411\u661f\u67e5\u90bb\u63a5\u70b9 \n   {\n     int y=E[i].y;//\u4e0d\u719f\u6089\u7684\u540c\u5b66\u8bf7\u50cf\u8fd9\u6837\u6253\u591a\u4e00\u70b9\uff0c\u6709\u52a9\u4e8e\u7406\u89e3 \n     if(!dfn[y])//dfn\u7684\u521d\u503c\u90fd\u662f0\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u641c\u8fc7\uff0c\u5c31\u9012\u5f52\u641c\u7d22 \n     {\n       tarjan(y);\n       low[x]=min(low[x],low[y]);//\u6b64\u65f6\u641c\u7d22\u5df2\u7ecf\u56de\u6eaf\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9ay\u7684low\u503c\u5df2\u7ecf\u66f4\u6b63\uff0c\u6240\u4ee5\u7528\u5b83\u6765\u66f4\u65b0x\u7684 \n     }//\u56e0\u4e3ay\u5728x\u7684\u540e\u9762\uff0c\u6240\u4ee5y\u80fd\u8bbf\u95ee\u5230\u7684\u7956\u5148x\u4e00\u5b9a\u53ef\u4ee5\u8bbf\u95ee\u5230 \n     else\n       if(v[y])//\u5982\u679cy\u70b9\u641c\u8fc7\u4e86\u4e14\u5728\u6808\u91cc\uff0c\u8bf4\u660e\u6211\u4eec\u627e\u5230\u4e86 \u540e\uff01\u5411\uff01\u8fb9\uff01 \n          low[x]=min(low[x],dfn[y]);\n   }//\u4f46\u662f\u6b64\u65f6\u6211\u4eec\u8fd8\u4e0d\u80fd\u6025\u7740\u5904\u7406\uff0c\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6709\u56de\u6eaf\u5230\u6839\u4e86\u4ee5\u540e\u6211\u4eec\u5728\u6536\u96c6\u5230\u4e86\u5b8c\u6574\u7684\u4fe1\u606f \n   if(dfn[x]==low[x])\n   {//dfn\u548clow\u4e00\u6837\uff0c\u4f60\u5c31\u662f\u4e0e\u4f17\u4e0d\u540c\u7684\u6839\u8282\u70b9 \n      ans++;//ans\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 \n      int y;\n      do{\n        y=S.top();\n        S.pop();\n        v[y]=false;\n        col[y]=ans;//y\u70b9\u5c5e\u4e8e\u7f16\u53f7\u4e3aans\u7684\u5f3a\u8fde\u901a\u5206\u91cf \n        g[ans].push_back(y);//\u5b58\u4e0b\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6210\u5458\n      }while(y!=x)//\u5728\u8fd9\u91cc\u5c06\u6808\u91cc\u7684\u70b9\u5168\u90e8\u5012\u51fa\u6765\uff08\u5012\u5783\u573e\u4e00\u6837..\uff09 \n   }\n}\n```\n---\n## \u56de\u5230\u9898\u76ee\uff01\n\n\u9898\u76ee\u8981\u6c42\u6c42\u51fa\u56fe\u4e2d\u6700\u5927\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u548c\u5176\u4e2d\u6240\u6709\u7684\u70b9\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u4ee5\u4e0a\u6a21\u677f\u4e2dcol\u6570\u7ec4\u7528\u4e0d\u7740\u4e86\uff0c\u5b58\u6210\u5458\u8fd8\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u8981\u6c42\u5b57\u5178\u5e8f\u8f93\u51fa\uff0c\u8fd9\u4e2a\u5411\u91cf\u5c31\u4e0d\u5f88\u65b9\u4fbf\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n\n\u5173\u4e8e\u4f18\u5148\u961f\u5217\u7684\u57fa\u672c\u7528\u6cd5\u53ef\u4ee5\u770b\u6211\u535a\u5ba2\uff0c\u8fd9\u91cc\u5173\u7cfb\u4e0d\u5f88\u5927\u4e0d\u505a\u6df1\u7a76qwq\n\nAC\u4ee3\u7801\uff1a\u4e0d\u5f00O2 55ms\uff08\u5077\u61d2\u7528stl\u7684\u4ee3\u4ef7\uff09\u5f00O2 35ms\n\n![](https://cdn.luogu.com.cn/upload/pic/63445.png)\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=6000,maxm=110000;\nint n,m;\n\nint read(){\n\tint x=0;char c=getchar();\n\twhile(c<'0' || c>'9')c=getchar();\n\twhile(c>='0' && c<='9'){\n\t\tx=(x<<3)+(x<<1)+(c^'0');\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nint head[maxn],nxt[maxm],id=0;\nstruct edge{\n\tint x,y;\n}G[maxm];\nvoid add(int x,int y){\n\tG[++id].x=x;\n\tG[id].y=y;\n\tnxt[id]=head[x];\n\thead[x]=id;\n}\n\nstruct pointer{//\u8fd9\u662f\u4e00\u4e2a\u6307\u9488\uff0cp\u6307\u5411\u8fde\u901a\u96c6\u7f16\u53f7\uff0csiz\u662f\u4ed6\u7684\u5927\u5c0f\u65b9\u4fbf\u6392\u5e8f\n\tint p,siz=0;\n\tint diction;//diction\u662f\u7b2c\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u5982\u679c\u4e25\u683c\u5b57\u5178\u5e8f\u8bf7\u6539\u6210\u6570\u7ec4\n}p[maxn];\n\nint dfn[maxn],low[maxn],col[maxn],\n\ttmmk=0,cnt=0;\nstack<int> S;\npriority_queue<int,vector<int>,greater<int> > g[maxn];\nbool instk[maxn];\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++tmmk;\n\tS.push(x);\n\tinstk[x]=true;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint y=G[i].y;\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(instk[y])\n\t\t\tlow[x]=min(low[x],dfn[y]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\tcnt++;\n\t\tint y;\n\t\tp[cnt].diction=S.top();\n\t\tdo{\n\t\t\ty=S.top();\n\t\t\tS.pop();\n\t\t\tinstk[y]=false;\n\t\t\tcol[y]=cnt;\n\t\t\tp[cnt].p=cnt;\n\t\t\tp[cnt].siz++;\n\t\t\tg[cnt].push(y);\n\t\t}while(y!=x);\n\t}\n}\n\nbool cmp(pointer a,pointer b){\n\tif(a.siz!=b.siz)\n\t\treturn a.siz>b.siz;\n\telse\n\t\treturn a.diction<b.diction;\n}\n\nint main(){\n\tn=read(),m=read();\n\t\n\tint x,y,f;\n\tfor(int i=1;i<=m;i++){\n\t\tx=read(),y=read(),f=read();\n\t\tadd(x,y);\n\t\tif(f==2)\n\t\t\tadd(y,x);\n\t}\n\t\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(instk,false,sizeof(instk)); \n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i);\n\t\n\tsort(p+1,p+cnt+1,cmp);\n\t\n\tprintf(\"%d\\n\",p[1].siz);\n\twhile(!g[p[1].p].empty()){\n\t\tprintf(\"%d \",g[p[1].p].top());\n\t\tg[p[1].p].pop();\n\t}\n\t\t\n\treturn 0;\n}\n\n```\n\nPS\uff1a\u672c\u9898\u6570\u636e\u7565\u6c34\uff0c\u9898\u89e3\u4e2d\u6709\u4e9b\u5e76\u6ca1\u6709\u8003\u8651\u5230\u4e00\u822c\u5b57\u5178\u5e8f\u8fd8A\u6389\u7684\uff0c\u5e0c\u671b\u540c\u5b66\u4eec\u6ce8\u610f\u3002\u53e6\uff1a\u6211\u8fd9\u6837\u505a\u4e5f\u53ea\u8003\u8651\u7b2c\u4e00\u4e2a\u6570\u7684\u5b57\u5178\u5e8f\uff0c\u5982\u679c\u4e25\u683c\u6392\u5217\u628a\u5b57\u5178diction\u6539\u6210\u6570\u7ec4\u5373\u53ef\n\nPSPS\uff1a\u5927\u534a\u591c\u5199\u8fd9\u4e2a\u633a\u7d2f\u7684\uff0c\u5982\u679c\u6709\u5e2e\u5230\u4f60\uff0c\u8bf7\u4e0d\u8981\u541d\u60dc\u4f60\u7684\u8d5e\uff08\u7b11\uff09",
        "postTime": 1562951763,
        "uid": 148949,
        "name": "_H1kar1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u6c42\u6700\u5927\u8fde\u901a\u5206\u91cf\u7528O\uff08n\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u771f\u5b9e\u4ee4\u4eba\u4e0d\u53ef\u601d\u8bae\u3002\n\n\u5e9f\u8bdd\u5c11\u8bf4\uff0c\u5148\u4e0a\u9898\u76ee\uff1a\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u56feG\uff0c\u6c42G\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u3002\n\n\u8f93\u5165\uff1a\n\nn,m\uff0c\u8868\u793aG\u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\n\n\u4e0b\u9762m\u884c\u6bcf\u884c\u5305\u542b x\uff0cy\uff0c\u8868\u793a\u6709\u4e00\u6761x\u5230y\u7684\u6709\u5411\u8fb9\n\n\u8f93\u51fa\uff1a\n\n\u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6570\u4ee3\u8868\u6700\u5927\u8fde\u901a\u5206\u91cf\n\n\u8f93\u5165\u793a\u4f8b\uff08\u5982\u4e0b\u56fe\uff09\n```\n6 8\n1 2\n1 4\n2 3\n2 5\n3 6\n4 5\n5 1\n5 6\n```\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205113823263-1481367627.png)\n\u8f93\u51fa\u793a\u4f8b\uff1a\n```\n4\n```\n\u5f88\u591a\u4eba\u4f1a\u60f3\u5230DFS\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08n^2\uff09\uff0c\u4f46\u662f\u65f6\u95f4\u5bb9\u6613\u8d85\u9650\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u5230Tarjan\n\n\u5148\u7406\u6e05\u4e00\u4e0b\u6982\u5ff5\uff1a\n\n\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u56feG\u6765\u7684\u4e00\u4e2a\u5b50\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u53ef\u4ee5\u5f7c\u6b64\u5230\u8fbe\uff0c\u8fd9\u4e2a\u5b50\u56fe\u5c31\u88ab\u79f0\u4e3a\u56feG\u7684\u8fde\u901a\u5206\u91cf\uff08\u4e00\u4e2a\u70b9\u5c31\u662f\u6700\u5c0f\u7684\u8fde\u901a\u5206\u91cf\uff09\n\n\u6700\u5927\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u56feG\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u8fd9\u4e2a\u5b50\u56fe\u4e3a\u56feG\u7684\u8fde\u901a\u5206\u91cf\uff0c\u4e14\u662f\u56feG\u6240\u6709\u8fde\u901a\u5206\u91cf\u4e2d\u5305\u542b\u8282\u70b9\u6570\u6700\u591a\u7684\u90a3\u4e2a\uff0c\u5373\u4e3aG\u7684\u6700\u5927\u8054\u901a\u5206\u91cf\n\n\u65f6\u95f4\u6233\uff1a\u641c\u7d22\u65f6\u7b2c\u51e0\u4e2a\u641c\u7d22\u5230\u8fd9\u4e2a\u70b9\u3002\u5982\u641c\u7d22\u987a\u5e8f\u662f1->2->3->6\u52196\u7684\u65f6\u95f4\u622a\u4e3a4\n\n\u4e0b\u9762\u5c31\u662ftarjan\u7684\u601d\u8def\uff08\u7b2c\u4e00\u6b21\u770b\u4e0d\u61c2\u53ef\u4ee5\u8df3\u8fc7\uff0c\u76f4\u63a5\u770b\u8be6\u7ec6\u6b65\u9aa4\uff0c\u56de\u6765\u518d\u770b\uff09\uff1a\n\n\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u4e2a\u53c2\u6570\uff1alow\uff0cdfn\u3002dfn\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4\u6233\uff0c\u800clow\u4ee3\u8868\u8fd9\u4e2a\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u7684\u65f6\u95f4\u6233\uff0c\u5f00\u59cblow\u90fd\u7b49\u4e8edfn\uff0c\u4f46\u4f1a\u7ecf\u8fc7\u4e0d\u65ad\u66f4\u65b0\u800c\u51cf\u5c11\u3002\n\n\u4ece1\u8282\u70b9\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u9014\u4e2d\u7528\u6811\uff08\u4e00\u4e2a\u8f6c\u5316\u4e3a\u6808\u7684\u6811\uff09\u7ef4\u62a4\u3002\n\n\u5f53\u9047\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u6709\u5982\u4e0b\u5224\u65ad\uff1a\n\n1\u3001\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u8fd9\u4e2a\u70b9\u52a0\u5165\u6811\uff08\u6808\uff09\n\n2\u3001\u5982\u679c\u8fd9\u4e2a\u70b9\u8bbf\u95ee\u8fc7\uff0c\u4e14\u5728\u6811\uff08\u6808\uff09\u91cc\uff0c\u4e0e\u8fd9\u4e2a\u70b9\u7684low\u6bd4\u8f83\uff0c\u66f4\u65b0\u81ea\u5df1\u7684low\n\n\u8fd4\u56de\u65f6\u66f4\u65b0low\n\n\u5f53\u4e00\u4e2a\u70b9\u904d\u5386\u6240\u6709\u7684\u8fb9\u540e\u8fd9\u4e2a\u70b9\u7684low\u8fd8\u662f\u7b49\u4e8edfn\uff0c\u5c06\u4e2a\u70b9\u53ca\u4ee5\u4e0a\u51fa\u6808\uff0c\u8fd9\u4e2a\u70b9\u53ca\u6808\u4ee5\u4e0a\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002\n\n\u6765\u4e00\u70b9Chinese++\uff08\u5c31\u662f\u4f2a\u4ee3\u7801\uff09\u3000\u3000\uff1a\n```\nvoid tarjan(int \u5f53\u524d\u70b9)\n{\n    \u8fd9\u4e2a\u70b9\u7684low=dfn=\u65f6\u95f4\u6233;\n    \u5c06\u8fd9\u4e2a\u70b9\u5165\u6808;\n    \u6807\u8bb0\u8fd9\u4e2a\u70b9\u5165\u6808;\n    \u679a\u4e3e\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\n    {\n        \u5982\u679c\u76ee\u6807\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n        {\n            tarjan(\u76ee\u6807\u70b9);\n            \u66f4\u65b0\u5f53\u524d\u70b9\u7684low; \n        }  \n        \u5982\u679c\u76ee\u6807\u70b9\u88ab\u8bbf\u95ee\u8fc7\n        {\n            \u66f4\u65b0\u5f53\u524d\u70b9\u7684low; \n        } \n    }\n    \u5982\u679c\u5f53\u524d\u70b9\u7684low==dfn\n    {\n        \u5c06\u8fd9\u4e2a\u70b9\u53ca\u6808\u4ee5\u4e0a\u7684\u70b9\u51fa\u6808\uff0c\u6807\u8bb0\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf; \n        ans++; \n    } \n}\n```\n\u8be6\u7ec6\u8fc7\u7a0b\uff1a\n\n\u5f00\u542f\u9ed1\u6697\u4e4b\u95e8\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180206091026013-450065277.png)\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205142158498-579785212.png)\n\u5f00\u59cb\uff0c\u4ece1\u8282\u70b9\u5f00\u59cb\uff0c\u65f6\u95f4\u622a\u548clow\u90fd\u662f1\uff0c\u5c061\u5165\u6808\n\nstack\uff1a1,\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205142303326-599131639.png)\n\u8d70\u52302\u8282\u70b9\uff0c2\u7684\u65f6\u95f4\u6233dfn\u548clow\u90fd\u662f2,2\u5165\u6808\n\nstack\uff1a1,2\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205143023310-970015972.png)\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c063\u30016\u5165\u6808\uff0c\u65f6\u95f4\u6233\u5206\u522b\u4e3a3\u30014\n\nstack\uff1a1,2,3,6\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205143101373-723896238.png)\n\n\u6b64\u65f6\uff0c\u53d1\u73b06\u8282\u70b9\u904d\u5386\u4e86\u5176\u6240\u6709\u51fa\u8fb9\uff08\u672c\u6765\u5c31\u6ca1\u6709\uff09\u4ee5\u540e\uff0c\u5b83\u7684low\u7b49\u4e8edfn\uff0c\u8fd9\u5c31\u8bf4\u660e\u4e866\u53f7\u8282\u70b9\u6ca1\u6709\u8def\u5f84\u80fd\u56de\u5230\u80fd\u5230\u8fbe\u5b83\u7684\u8282\u70b9\uff0c\u6240\u4ee56\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u6b64\u5c066\u51fa\u6808\uff0c\u518d\u56de\u6eaf\uff0c\u6b64\u65f6\u5728\u6808\u4e2d\u6bd46\uff08\u542b\uff09\u9ad8\u7684\u70b9\u90fd\u51fa\u6808\uff0c\u8fd9\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff08\u56e0\u4e3a\u6b64\u65f6\u6bd46\u5728\u6808\u9876\uff0c\u6240\u4ee56\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5206\u91cf\uff09ans++\n\nstack:1,2,3\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205143121326-1361087440.png)\n\n\u548c\u521a\u624d\u4e00\u6837\uff0c3\u8282\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u5df2\u7ecf\u904d\u5386\u4e00\u822c\uff0c\u4f46low\u8fd8\u662f\u548cdfn\u76f8\u7b49\uff0c\u6240\u4ee53\u51fa\u6808\uff0c\u56e0\u4e3a\u6b64\u65f63\u5728\u6808\u9876\uff0c\u6240\u4ee53\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5206\u91cf\u3002ans++\n\nstack\uff1a1,2\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205143156091-910451534.png)\n\n\u518d\u6b21\u904d\u5386\u4ece2\u904d\u5386\u52305\uff0c\u5c065\u5165\u6808\uff0c\u5e76\u4e14low\u548cdfn\u90fd\u4e3a5\u3002\n\nstack\uff1a1,2,5\n\n\u7136\u540e5\u641c\u7d22\u52306\uff0c\u4f46\u662f6\u4e0d\u5728\u6808\u91cc\u9762\uff0c\u6240\u4ee5\u4e0d\u7ba1\u5b83\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205150658216-1356454677.png)\n\n\u8fd9\u662f\u641c\u7d22\u5230\u4e861\uff0c\u53d1\u73b01\u7684\u65f6\u95f4\u62331\u5c0f\u4e8e5\u7684low\uff0c\u6240\u4ee5\u5c065\u7684low\u66f4\u65b0\u4e3a1,\u3002\u8fd9\u65f6\u53d1\u73b05\u6ca1\u6709\u5176\u4ed6\u8fb9\u53ef\u4ee5\u8d70\u4e86\uff0c\u6240\u4ee5\u8fd4\u56de\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205150830935-815793086.png)\n\n\u8fd4\u56de\u52302\u65f6\uff0c\u53d1\u73b05\u7684low\u6bd42\u7684low\u5c0f\uff0c\u6240\u4ee5\u66f4\u65b02\u7684low\u4e3a1\uff0c\u7ee7\u7eed\u8fd4\u56de\u52301\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205150934670-244225981.png)\n\n\u518d\u4ece1\u8d70\u52304\uff0c4\u7684\u65f6\u95f4\u6233\u548clow\u4e3a6\uff0c\u5c064\u5165\u6808\n\nstack\uff1a1,2,5,4\u3000\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205151048185-1202573680.png)\n\n\u4ece4\u8d70\u52305\uff0c\u53d1\u73b05\u5728\u6808\u4e2d\uff0c\u4e145\u7684low\u6bd44\u7684low\u5c0f\uff0c\u6240\u4ee54\u7684low\u53d8\u62101\uff0c\u56e0\u4e3a\u6ca1\u6709\u8fb9\u518d\u8fd4\u56de\u52301\n\n\u6b64\u65f6\uff0c1\u7684\u6240\u6709\u8fb9\u90fd\u8d70\u5b8c\u5566\uff0c\u5e76\u4e141\u7684low\u7b49\u4e8edfn\uff0c\u6240\u4ee5\u628a1\u53ca\u4ee5\u4e0a\u7684\u8282\u70b9\u51fa\u6808\uff0c\u6784\u6210\u8fde\u901a\u5206\u91cf\uff0cans++\n\n \u7ee7\u7eed\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4\u6233\u4e3a0\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff09tarjan(i);\n\n\u73b0\u5728\u8d34\u4e0a\u4ee3\u7801\uff0c\u4f46\u662f\u6ca1\u6709\u5b8c\uff0c\u6211\u4f1a\u5bf9\u539f\u7406\u505a\u8be6\u7ec6\u89e3\u91ca\uff1a\n```\nvoid tarjan(int u)\n{\n    in++;\n    dfn[u]=in;\n    low[u]=in;\n    S.push(u);\n    vis[u]=1;\n    for(int e=head[u];e;e=next[e])\n    {\n        if(!dfn[to[e]])\n        {\n            tarjan(to[e]);\n            low[u]=min(low[to[e]],low[u]);\n        }\n        else if(vis[to[e]])\n            low[u]=min(low[u],dfn[to[e]]);\n    }\n    if(low[u]==dfn[u])\n    {\n        while(!S.empty() && S.top()!=u)\n        {\n            vis[S.top()]=0;\n            S.pop(); \n        } \n        vis[u]=0;\n        S.pop();\n        ans++;\n    }\n}\n```\n\u6f14\u5458\u8868\uff1a\n\nin:\u65f6\u95f4\u6233\u4e0b\u6807\n\ndfn[i]:i\u8282\u70b9\u7684\u65f6\u95f4\u6233\n\nlow[i]:i\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\u7684\u65f6\u95f4\u6233\n\nhead[i],next[i],to[i]:\u90bb\u63a5\u8868\u7fa4\u6f14\n\nvis[i]:i\u662f\u5426\u5728\u6808\u91cc\n\nS\uff1a\u6808\n\nans:\u8ba1\u6570\n\nu\uff1a\u5f53\u524d\u70b9\n\n\u539f\u7406\u8be6\u89e3\uff1a\n\n1\u3001\u5176\u5b9e\u867d\u8bf4\u6574\u4e2a\u8fc7\u7a0b\u90fd\u5728\u7528\u6808\u7ef4\u62a4\uff0c\u4f46\u662f\u539f\u7406\u5374\u662f\u4e00\u9897\u6811\uff0c\u6bd4\u5982\u5f53\u641c\u7d22\u52301\u30012\u30013\u30016\u65f6\uff0c\u6811\u662f\u8fd9\u6837\u7684\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205155346998-971934903.png)\n\n\u4f60\u60f3\u8c61\u6210\u6811\u5c31\u597d\uff0c\u5f53\u6211\u4eec\u786e\u5b9a6\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u628a\u5b83\u5494\u5693\u6389\u3002\u73b0\u57286\u53ca\u4ee5\u4e0b\u7684\u8282\u70b9\uff08\u8fd9\u6b21\u6ca1\u6709\uff09\u6210\u4e3a\u4e00\u9897\u65b0\u7684\u6811\u3002\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180205155947154-1654961517.png)\n\n\u7136\u540e\u518d\u7528\u971c\u4e4b\u54c0\u4f24\u780d\u63893\uff0c3\u53ca\u4ee5\u4e0b\u8282\u70b9\uff08\u4e5f\u662f\u6ca1\u6709\uff09\u53c8\u53d8\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u6811\u3002\n\n\u7136\u540e\u6211\u4eec\u641c\u7d22\u52305\uff0c\u5c065\u52a0\u5165\u6811\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180206091418670-9767516.png)\n\n\u7136\u540e\u518d\u4ece1\u641c\u7d22\u52304\uff0c\u52a0\u5165\u6811\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180206091633466-2116821879.png)\n\n\u7136\u540e\u8fd4\u56de\u52301\uff0c\u62d4\u51fa1\u8282\u70b9\u7684\u971c\u4e4b\u54c0\u4f24\u4e0e\u8010\u5965\u7956\u878d\u5408\uff0c\u6210\u4e3a\u65b0\u7684\u5deb\u5996\u738b\u3002\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180206091916670-649011918.png)\n\n![](https://images2017.cnblogs.com/blog/987049/201802/987049-20180206091951295-550994048.png)",
        "postTime": 1517926923,
        "uid": 39942,
        "name": "TJor",
        "ccfLevel": 0,
        "title": "Tarjan \u7b97\u6cd5\u8be6\u89e3"
    },
    {
        "content": "-----\n\n\u9996\u5148\u8fd9\u662ftarjan\u7684\u6a21\u677f\u9898\u524d\u9762\u5927\u4f6c\u5df2\u7ecf\u8bf4\u8fc7\u4e86\uff1b\n\u6211\u60f3\u8bf4\u5b57\u5178\u5e8f\u6700\u5c0f\u8f93\u51fa\u7684\u95ee\u9898\n\n\u9996\u5148\u6bcf\u4e2a\u70b9\u7684\u7f16\u53f7\u90fd\u662f\u552f\u4e00\u7684\n\u6211\u4eec\u5148\u626b\u4e00\u904d\u8bb0\u4f4f\u6700\u5927\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u7684\u4e2a\u6570cnt\n\n\u7136\u540e\u4ece\u6309\u7f16\u53f7\u5c0f\u5230\u5927\u626b\u4e00\u904d\u53d6\u7b2c\u4e00\u4e2a\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u6570==cnt\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e00\u5b9a\u662f\u6240\u6c42\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6700\u5927\u4e14\u6709\u6700\u5c0f\u7684\u7f16\u53f7\u6765\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\uff09\n\n\u5176\u4ed6\u7684\u5c31\u662f\u6a21\u677f\u4e86\n\n-----\n```c++\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\nconst int maxn=2e5+7;\nconst int inf=0x3f3f3f3f;\n\nstruct note{\n\tint to,nex;\n}e[maxn*3];\n\nint col,num,head[maxn],dfn[maxn],low[maxn],de[maxn],co[maxn],si[maxn],stk[maxn];\nint top,n,m;\nint cnt=-1;\nvoid add(int x,int y)\n{\n\tstatic int cnt=0;\n\tcnt++;\n\te[cnt].to=y;\n\te[cnt].nex=head[x];\n\thead[x]=cnt;\n}\n\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++num;\n\tstk[++top]=u;\n\tfor(int i=head[u];i;i=e[i].nex)\n\t{\n\t\tint v=e[i].to;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!co[v])low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\tco[u]=++col;\n\t\t++si[col];\n\t\twhile(stk[top]!=u)\n\t\t{\n\t\t\t++si[col];\n\t\t\tco[stk[top]]=col;\n\t\t\t--top;\n\t\t}\n\t\t--top;\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,f;\n\t\tcin>>x>>y>>f;\n\t\tif(f==1)add(x,y);\n\t\tif(f==2)add(x,y),add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=col;i++)cnt=max(cnt,si[i]);\n\tcout<<cnt<<endl;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(si[co[i]]==cnt)\n\t\t{\n\t       int now=co[i]; \n\t\t   for(int j=i;j<=n;j++)if(co[j]==now)cout<<j<<\" \";\n\t\t   return 0; \n\t\t}\n\t}\n\treturn 0;\n}\n\n\n```",
        "postTime": 1541122342,
        "uid": 55067,
        "name": "\u963f\u8499",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u88f8\u7684\u4e00\u9053\u5f3a\u8fde\u901a\u5206\u91cf\u9898\uff0c\u5bf9\u4e8e\u5411\u6211\u4eec\u8fd9\u79cd\u840c\u65b0\u7ec3\u624b\u5f88\u4e0d\u9519\uff0c\u7ec3\u4e60tarjan\u3002\u50cf\u6211\u8fd9\u79cdlowb\u5c31\u7528\u7684\u6700\u5f31\u7684vector\u5b58\u50a8\u6cd5\uff0c\u8fd8\u662f\u8fc7\u4e86\u3002\u624b\u5199\u4e0b\u6808\u5427\u8fd8\u662f\uff0c\u6bd5\u7adf\u53c8\u4e0d\u662f\u4ec0\u4e48\u4f18\u5148\u961f\u5217\u6ca1\u5fc5\u8981\u7528stl\uff0c\u53cd\u800c\u4e0d\u65b9\u4fbf\u3002\u6211\u770b\u5927\u5bb6\u90fd\u6ca1\u6709\u8bb2tarjan\u7b97\u6cd5\u554a\uff0c\u6211\u8fd8\u662f\u8bb2\u8bb2\u5427\uff08\u4e3b\u8981\u662f\u60f3\u4e4b\u540e\u4e0d\u4f1a\u5199\u7684\u65f6\u5019\u518d\u770b\u770b\uff09\n\ntarjan\u5176\u5b9e\u5f88\u7b80\u5355\uff0cdfn\u5b58\u50a8\u641c\u5230\u7684\u65f6\u95f4\uff0clow\u5b58\u50a8\u641c\u5230\u7684\u6700\u65e9\u7684\u70b9\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u56fe\u8fdb\u884c\u6784\u5efadfs\u6811\uff0c\u641c\u5230\u4e00\u4e2a\u70b9\u5c31\u5165\u6808\uff0c\u5f53\u4f60\u7684dfn==low\u7684\u65f6\u5019\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u5f80\u4e0b\u5efa\u7684\u5b50\u6811\uff0c\u5e76\u4e14\u8fd8\u5728\u6808\u91cc\u7684\u90fd\u4f1a\u5728\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u56e0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u4e0d\u4f1a\u6709\u91cd\u53e0\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u5c31\u53ea\u4f1a\u5165\u4e00\u6b21\uff0c\u800c\u4e14\u6bcf\u6b21\u627e\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5fc5\u5b9a\u5df2\u7ecf\u5305\u542b\u4e86\u6240\u6709\u70b9\u3002\u5177\u4f53\u53ef\u4ee5\u53bb\u7f51\u4e0a\u641c\u641c\u3002\n\n\u8fd9\u9053\u9898\u5c31\u5355\u72ec\u5f00\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u5b58\u5f53\u524d\u6700\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u53e6\u4e00\u4e2a\u5c31\u5b58\u5f53\u524d\u7684\u6709\u591a\u5c11\u4e2a\uff0c\u5982\u679c\u66f4\u591a\u5c31\u66f4\u65b0\u3002\u5982\u679c\u4e00\u6837\u5c31\u6bd4\u4e0b\u6700\u5c0f\u7684\u5c31\u884c\u4e86\uff0c\u6700\u540e\u628a\u90a3\u4e2a\u5f3a\u8fde\u540c\u5206\u91cf\u7684\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u5c31\u884c\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n            \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAX 5000\nint c[MAX+10],vis[MAX+10]={0},dfn[MAX+10],low[MAX+10],huan[MAX+10],maxn=0,ltfl=0,mini=100000,mini2=100000;//ltfl=\u8fde\u901a\u5206\u91cf= =\u5b58\u7684\u54ea\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0cc \u662f\u5426\u5728\u6808\u4e2d\uff0cvis\u662f\u5426\u641c\u8fc7\uff0cdfn\u641c\u5230\u65f6\u95f4\uff0clow\u4ed6\u80fd\u53bb\u5230\u7684\u6700\u65e9\u65f6\u95f4\uff0chuan\u5728\u54ea\u4e2a\u73af\u4e2d\uff0cmaxn\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\uff0cmini\u5f53\u524d\u6700\u5927\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6700\u5c0f\u70b9\uff0cmini2\u76ee\u524d\u641c\u5230\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6700\u5c0f\u7684\u70b9 \nint sta[MAX+10],head=0,t=0;//\u6808    \nint n,m;\nvector<int>load[50000+10];\nvoid tarjan(int now)\n{\n    dfn[now]=low[now]=++t;//\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u7b2c\u4e00\u6b21\u8fdb\u641c\u5230\u7684\u70b9 \n    vis[now]=1;\n    int x=load[now].size();\n    sta[head++]=now;\n    c[now]=1;\n    for(int i=0;i<x;i++)//\u641c\u56fe \n    {\n        if(vis[load[now][i]]==0)\n        {\n            tarjan(load[now][i]);\n            low[now]=min(low[now],low[load[now][i]]);//\u4ed6\u7684\u5b50\u6811\u80fd\u5230\u8fbe\uff0c\u4ed6\u4e5f\u80fd\u7684 \n        }\n        else if(c[load[now][i]]==1)\n        {\n            low[now]=min(low[now],dfn[load[now][i]]);//\u5982\u679c\u8fd9\u662f\u4e00\u6761\u540e\u5411\u8fb9\uff0c\u90a3\u5c31\u76f4\u63a5\u770b\u662f\u5426\u662f\u80fd\u5230\u7684\u6700\u5c0f\u7684 \n        }\n    }\n    if(dfn[now]==low[now])\n        {\n            int y=0;\n            mini=100000;\n            while(1)\n            {\n                head--;\n                int v=sta[head];\n                y++; \n                huan[v]=low[now];\n                if(v<mini)\n                {\n                    mini=v;\n                }\n                c[v]=0;\n                //printf(\"%d \",v);\n                if(now==v)\n                {\n                //    printf(\"\\n\");\n                    if(y>maxn)\n                    {\n                        maxn=y;\n                        ltfl=low[now];\n                        mini2=mini;\n                    }\n                    if(y==maxn)\n                    {\n                        if(mini<mini2)\n                        {\n                            mini2=mini;\n                            ltfl=low[now];\n                        }\n                    } \n                    break;\n                }\n            }\n        }    \n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,l;\n        scanf(\"%d %d %d\",&x,&y,&l);\n        load[x].push_back(y);\n        if(l==2)\n        {\n            load[y].push_back(x);\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(vis[i]==0)\n        tarjan(i);\n    }\n    printf(\"%d\\n\",maxn);\n    for(int i=1;i<=n;i++)\n    {\n        if(huan[i]==ltfl)\n        {\n            printf(\"%d \",i);\n        }\n    }\n}\n```",
        "postTime": 1505543714,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "##### **\u8fd9\u663e\u7136\u662f\u4e00\u9053\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\uff08SCC\uff09\u7684\u9898\u76ee\u3002**\n\n\n\u53ea\u8981\u4f60\u6b63\u5e38\uff0c\u90fd\u77e5\u9053\u5e94\u8be5\u5199Tarjan\u3002\n\n\u7136\u540e\uff08\u5047\u88c5\u4f1a\u5199Tarjan\uff09\uff0c\u5176\u5b9e\u6211\u5f53\u7136\u4e0d\u4f1a\u3002\u4f46\u662f\u6c42SCC\u8fd8\u6709\u53e6\u4e00\u4e2a\u7b97\u6cd5\u3002\u590d\u6742\u5ea6\u548cTarjan\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u5e38\u6570\u5927\u4e86\u70b9\u800c\u4e14\u4e0d\u4e3a\u4eba\u6240\u77e5\u800c\u5df2\u3002\n\n\u84dd\u4e66\u548c\u6311\u6218\u7a0b\u5e8f\u7ade\u8d5b\u4e0a\u90fd\u6709\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u597d\u50cf\u53ebKosaraju\u3002\u662f\u4e0d\u662f\u5f88\u62fd\u7684\u611f\u89c9\u3002\n\n\u4e00\u4e9b\u53d8\u91cf\u540d\u7684\u610f\u4e49\uff1a\n\na[N] \u539f\u56fe\u7684vector\u5b58\u50a8\n\nb[N] \u539f\u56fe\u7684\u6240\u6709\u8fb9\u53cd\u5411vector\u5b58\u50a8\n\ns dfs\u5f97\u51fa\u7684\u62d3\u6251\u5e8f\u5217\u6808\n\nc[[N] \u6bcf\u4e2a\u70b9\u7684SCC\u7f16\u53f7\n\n\u7b97\u6cd5\u6846\u67b6\uff1a\n\n1.\u5c06\u539f\u56fe\u505a\u4e00\u904d\u7c7b\u4f3c\u4e8e\u62d3\u6251\u7684dfs\uff0c\u8d8a\u65e9\u8bbf\u95ee\u7684\u9876\u70b9\u538b\u5728\u4e00\u4e2a\u6808\u4e2d\u3002\n\n2.\u4e0d\u65ad\u4ece\u6808\u9876\u53d6\u51fa\u4e00\u4e2a\u672a\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u5bf9\u5b83\u7684\u53cd\u5411\u56fe\u518d\u8fdb\u884cdfs\uff0c\u6240\u6709\u5b83\u80fd\u5230\u8fbe\u7684\u672a\u8bbf\u95ee\u8fc7\u7684\u70b9\u5c31\u662f\u4ed6\u7684SCC\u3002\n\n3.\u8fd9\u6837\u5c31\u5f97\u5230\u7684\u4e00\u4e2a\u56fe\u7684SCC\u3002\n\n\u5bf9\u4e8e2\u7684\u6b63\u786e\u6027\uff0c\u5e94\u4e3a\u8fd9\u4e2a\u70b9\u5fc5\u88ab\u5728\u6808\u4e2d\u6bd4\u5b83\u65e9\u5165\u6808\u7684\u70b9\u7ed9\u538b\u5165\u6808\uff0c\u800c\u4e14\u5728\u6808\u4e2d\u6bd4\u5b83\u66f4\u4e0a\u9762\u7684\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6240\u4ee5\u5b83\u5728\u5b83\u4e0b\u9762\u80fd\u627e\u5230\u7684\u70b9\u90fd\u662f\u4ed6\u7684SCC\uff08\u540c\u65f6\u8fd8\u907f\u514d\u4e86\u91cd\u590d\uff09\n\n~~\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5f88\u70e6\u7684\u5224\u91cd\u5bf9\u4e8eKosaraju\u6765\u8bf4\u5f88\u5bb9\u6613\uff0c\u56e0\u4e3a\u7f16\u53f7\u8d8a\u5c0f\u7684\u70b9\u8d8a\u65e9\u8fdb\u6808\uff0c\u6240\u4ee5\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u6700\u5927\u89e3\u7684\u5b57\u5178\u5e8f\u4e00\u5b9a\u6bd4\u540e\u9762\u6570\u91cf\u548c\u5b83\u76f8\u540c\u7684\u70b9\u5c0f\u3002~~\n\n2018/08/15Upt\uff1a\u4e0a\u9762\u7684\u90fd\u5728\u626f\u6de1\u3002\u5b57\u5178\u5e8f\u8fd8\u662f\u8981\u5224\u7684\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2aSCC\u8bb0\u5f55\u4e00\u4e0b\u6700\u540e\u6bd4\u5bf9\u5373\u53ef\u3002\n\n\uff08\u611f\u8c22@[\u56db\u5411\u641c](https://www.luogu.org/space/show?uid=52200)\u63d0\u4f9bhack\u6570\u636e\u4f7f\u5f97\u672c\u6587\u9519\u8bef\u88ab\u6307\u51fa\uff0c\u76ee\u524dCODE\u5df2\u91cd\u65b0\u4fee\u6539\uff09\n\n\u91cd\u70b9\u662f\u8fd9\u9053\u9898\u5c31\u662fSCC\u6a21\u677f\u9898\uff08\u4e0d\u6562\u76f8\u4fe1\u7adf\u713610\u5206\u949f\u4e00\u6b21A\u4e86\uff09\n\nCODE\n\n```cpp\n    #include<cstdio>\n    #include<vector>\n    #include<cstring>\n    #include<algorithm>\n    using namespace std;\n    const int N=5005;\n    vector <int> a[N],b[N],s,t[N];\n    int f[N],i,n,m,x,y,z,ans,num,id,tot;\n    inline void read(int &x)\n    {\n        x=0; char ch=getchar();\n        while (ch<'0'||ch>'9') ch=getchar();\n        while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    }\n    inline void dfs(int k)\n    {\n        f[k]=0;\n        for (int i=0;i<a[k].size();++i)\n        if (f[a[k][i]]) dfs(a[k][i]);\n        s.push_back(k);\n    }\n    inline void rdfs(int k)\n    {\n        f[k]=0;\n        t[tot].push_back(k);\n        for (int i=0;i<b[k].size();++i)\n        if (f[b[k][i]]) rdfs(b[k][i]);\n    }\n    inline bool cmp(vector <int> a,vector <int> b)\n    {\n    \tfor (int i=1;i<a.size();++i) \n        {\n            if (a[i]<b[i]) return 1;\n            if (a[i]>b[i]) return 0;\n        }\n    \treturn 0;\n    }\n    int main()\n    {\n        read(n); read(m);\n        for (i=1;i<=m;++i)\n        {\n            read(x); read(y); read(z);\n            if (z==1)\n            {\n                a[x].push_back(y);\n                b[y].push_back(x);\n            } else\n            {\n                a[x].push_back(y); a[y].push_back(x);\n                b[x].push_back(y); b[y].push_back(x);\n            }\n        }\n        memset(f,true,sizeof(f));\n        for (i=1;i<=n;++i)\n        if (f[i]) dfs(i);\n        memset(f,true,sizeof(f));\n        for (i=s.size()-1;i;--i)\n        if (f[s[i]]) ++tot,rdfs(s[i]);\n        for (i=1;i<=tot;++i)\n        {\n        \tsort(t[i].begin(),t[i].end());\n        \tif (t[i].size()==t[id].size()&&cmp(t[i],t[id])) id=i;\n            if (t[i].size()>t[id].size()) id=i;\n        }\n        printf(\"%d\\n\",t[id].size());\n        for (i=0;i<t[id].size();++i) printf(\"%d \",t[id][i]);\n        return 0;\n}\n```",
        "postTime": 1514463184,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "tarjan\u5f3a\u8054\u901a\u5206\u91cf\u7684\u6a21\u677f\u9898,noip\u8d5b\u524d\u7ec3\u624b\n\n\u53d8\u91cf\u5b9a\u4e49\u53ca\u542b\u4e49\u5982\u4e0b\n\n(1)\u3001dfn[ ]\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u5728dfs\u65f6\u662f\u7b2c\u51e0\u4e2a\u88ab\u641c\u5230\u7684\u3002\n\n(2)\u3001low[ ]\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u5176\u5b50\u5b59\u8282\u70b9\u8fde\u7684\u6240\u6709\u70b9\u4e2ddfn\u6700\u5c0f\u7684\u503c\n\n(3)\u3001stack[ ]\uff0c\u8868\u793a\u5f53\u524d\u6240\u6709\u53ef\u80fd\u80fd\u6784\u6210\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u3002\n\n(4)\u3001vis[ ]\uff0c\u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u5728stack[ ]\u6570\u7ec4\u4e2d\u3002\n\n\u6ce8\u91ca\u89c1\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<stack>\nusing namespace std;\n#define N 1000005\nint n,m,low[N],dfn[N],t,tot,all[N],ans,cnt,head[N],sd[N];\nstack<int> s;\nbool v[N];\nstruct nod{\n\tint u,v;\n}e[N];\nvoid adde(int u,int v){\n\tcnt++;\n\te[cnt].u=head[u];\n\te[cnt].v=v;\n\thead[u]=cnt;\n}\nvoid tarjan(int x){\n\tt++;\n\ts.push(x);\n\tlow[x]=dfn[x]=t;\n\tv[x]=true;\n\tfor(int i=head[x];i;i=e[i].u){\n\t\tint y=e[i].v;\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}else if(v[y]){\n\t\t\tlow[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n\tif(low[x]==dfn[x]){\n\t\ttot++;//tot\u5224\u65ad\u662f\u5728\u7b2c\u51e0\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\n\t\twhile(1){\n\t\t\tint y=s.top();\n\t\t\ts.pop();\n\t\t\tsd[y]=tot;//sd\u8bb0\u5f55\u8be5\u8282\u70b9\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n\t\t\tall[tot]++;//all\u8bb0\u5f55\u7b2ctot\u7684\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u7684\u8282\u70b9\u6570\n\t\t\tv[y]=false;\n\t\t\tif(x==y){//\u6ce8\u610f\u8fd9\u4e2a\u5730\u65b9\u8981\u653e\u5728while\u5faa\u73af\u7684\u6700\u540e\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nint mian(){//\u610f\u4f1a\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){//\u6ce8\u610fn\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u5343\u4e07\u522b\u6253\u53cd\u4e86\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tif(c==1){\n\t\t\tadde(a,b);\n\t\t}else{\n\t\t\tadde(a,b);\n\t\t\tadde(b,a);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!dfn[i]){\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\tfor(int i=1;i<=tot;i++){\n\t\tans=max(ans,all[i]);//\u6c42\u6700\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6240\u5305\u542b\u7684\u8282\u70b9\u6570\n\t}\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=1;i<=n;i++){\n\t\tif(all[sd[i]]==ans){//\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\uff0c\u5982\u679ci\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570==ans\uff0c\u90a3\u4e48\u8f93\u51fa\n\t\t\tprintf(\"%d \",i); \n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541493028,
        "uid": 64558,
        "name": "Alan0627",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u770b\u9898\u89e3\u91cc\u5f88\u591a\u5927\u4f6c\u90fd\u7528\u7684\u662ftarjan\u7684\u505a\u6cd5\n\n\u56e0\u4e3a\u672c\u849f\u84bb\u521a\u521a\u5b66\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u5148\u5b66\u7684\u662f\u76f8\u5bf9\u597d\u7406\u89e3\u7684kosaraju\u7684\u505a\u6cd5,\u8fd8\u4e0d\u4f1atarjan...\n\n\u201ckosaraju\u62fc\u5bf9\u4e86\u5427\u201d\n\n\u201c\u5e94\u8be5\u5427...\u201d\n\n\u786e\u5b9e\uff0c\u8fd9\u4e2a\u540d\u5b57\u592a\u6bd2\u7624\u4e86\uff0c\u53cd\u6b63\u6211\u80cc\u4e8620\u904d\u624d\u80cc\u4e0b\u6765\n\n**kosaraju**\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5b9e\u73b0\u76f8\u5bf9\u4e8etarjan\u6765\u8bf4\u66f4\u597d\u7406\u89e3\u4e00\u70b9\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u9ad8\uff0c\u5e94\u7528\u8303\u56f4\u5c0f\uff0c\u8fd8\u6709\u53ef\u80fd\u7206\u6808\n\nkosaraju\u4e5f\u662f\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u7b97\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7275\u626f\u5230\u4e24\u4e2a\u6982\u5ff5\uff0c\u53d1\u73b0\u65f6\u95f4st\uff0c\u5b8c\u6210\u65f6\u95f4et\u3002\u53d1\u73b0\u65f6\u95f4\u662f\u6307\u4e00\u4e2a\u8282\u70b9\u7b2c\u4e00\u6b21\u88ab\u904d\u5386\u5230\u65f6\u7684\u6b21\u5e8f\u53f7\uff0c\u5b8c\u6210\u65f6\u95f4\u662f\u6307\u67d0\u4e00\u7ed3\u70b9\u6700\u540e\u4e00\u6b21\u88ab\u904d\u5386\u5230\u7684\u6b21\u5e8f\u53f7\u3002\n\n\u6211\u4eec\u9700\u8981\u5728\u52a0\u8fb9\u65f6\u628a\u6709\u5411\u56fe\u6b63\u5411\u5efa\u9020\u5b8c\u6bd5\u540e\u518d\u53cd\u5411\u52a0\u8fb9\u5efa\u4e00\u5f20\u9006\u56fe\u3002\n\n\u5148\u5bf9\u6b63\u56fe\u8fdb\u884c\u4e00\u904ddfs\uff0c\u9047\u5230\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\u5c31\u8ba9\u5176\u53d1\u73b0\u65f6\u95f4\u7b49\u4e8e\u76ee\u524d\u7684dfs\u5e8f\u3002\u5728\u56de\u6eaf\u65f6\u82e5\u53d1\u73b0\u67d0\u4e00\u7ed3\u70b9\u7684\u5b50\u6811\u5168\u90e8\u88ab\u904d\u5386\u5b8c\uff0c\u5c31\u8ba9\u5176\u5b8c\u6210\u65f6\u95f4\u7b49\u4e8e\u76ee\u524ddfs\u5e8f\u3002\u6b63\u56fe\u904d\u5386\u5b8c\u540e\u5c06\u8282\u70b9\u6309\u5b8c\u6210\u65f6\u95f4\u5165\u6808\uff0c\u4fdd\u8bc1\u6808\u9876\u662f\u5b8c\u6210\u65f6\u95f4\u6700\u5927\u7684\u8282\u70b9\uff0c\u6808\u5e95\u662f\u5b8c\u6210\u65f6\u95f4\u6700\u5c0f\u7684\u8282\u70b9\u3002\n\n\uff08\u7384\u5b66\u5185\u5bb9\u5f00\u59cb\uff09\u7136\u540e\u4ece\u6808\u9876\u5f00\u59cb\u5411\u4e0b\u6bcf\u4e00\u4e2a\u6ca1\u6709\u88ab\u53cd\u5411\u904d\u5386\u8fc7\u7684\u8282\u70b9\u4e3a\u8d77\u70b9\u5bf9\u9006\u56fe\u8fdb\u884c\u4e00\u904ddfs\uff0c\u5c06\u8bbf\u95ee\u5230\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\uff08\u6216\u67d3\u8272\uff09\u5e76\u5f39\u6808\uff0c\u6bcf\u4e00\u904d\u53cd\u5411dfs\u904d\u5386\u5230\u7684\u70b9\u5c31\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u867d\u7136\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f46\u4ed6\u5c31\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u4e86...\n\n\u771f\u7684\u975e\u5e38\u7684\u7384\u5b66...\n\n**dfs1**\n\n\u7b2c\u4e00\u4e2adfs\n\n``` cpp\ninline void pst_dfs(int u){\n\tdfn++;\n\tvis[u]=true;\n\tfor(int i=head[1][u];i;i=e[1][i].next)\n\t  if(!vis[e[1][i].to])pst_dfs(e[1][i].to);\n\tlst[2*n+1-(++dfn)]=u;\n}\n```\n\n\u90a3\u4e2a\u5904\u7406\u6808\u662f\u4e00\u4e2a\u975e\u5e38\u7384\u5b66\u7684\u95ee\u9898..\u96be\u9053\u4e0d\u662f\u5417\uff1f\n\n**dfs2**\n\n\u7b2c\u4e8c\u4e2adfs\n\n```cpp\ninline void neg_dfs(int u){\n\tnum[u]=scc;\n\tsize[scc]++;\n\tvis[u]=false;\n\tfor(int i=head[2][u];i;i=e[2][i].next)\n\t  if(vis[e[2][i].to])neg_dfs(e[2][i].to);\n}\n```\n\n\u8fd9\u4e2a\u6211\u89c9\u5f97\u6bd4\u7b2c\u4e00\u4e2a\u8981\u597d\u7406\u89e3\u4e00\u70b9\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n# include <cstdio>\n# include <algorithm>\n# include <cstring>\n# include <cmath>\n# include <climits>\n# include <iostream>\n# include <cstring>\n# include <queue>\n# include <vector>\n# include <set>\n# include <map>\n# include <cstdlib>\n# include <stack>\n# include <ctime>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define mct(a,b) memset(a,b,sizeof(a))\n# define gc getchar()\ntypedef long long ll;\nconst int N=5e5+5;\nconst int inf=0x7fffffff;\ninline int read(){\n    int s=0,w=1;\n    char c=gc;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=gc;}\n    while(c>='0'&&c<='9')s=s*10+c-'0',c=gc;\n    return s*w;\n}\nstruct Edge{\n\tint to,next;\n}e[3][N];\nint n,m;\nint cnt[3],head[3][N],scc,dfn,size[N],num[N],lst[2*N];\nbool vis[N];\ninline void add(int x,int y,int c){\n\te[c][++cnt[c]]=(Edge){y,head[c][x]},head[c][x]=cnt[c];\n}\ninline void pst_dfs(int u){\n\tdfn++;\n\tvis[u]=true;\n\tfor(int i=head[1][u];i;i=e[1][i].next)\n\t  if(!vis[e[1][i].to])pst_dfs(e[1][i].to);\n\tlst[2*n+1-(++dfn)]=u;\n}\ninline void neg_dfs(int u){\n\tnum[u]=scc;\n\tsize[scc]++;\n\tvis[u]=false;\n\tfor(int i=head[2][u];i;i=e[2][i].next)\n\t  if(vis[e[2][i].to])neg_dfs(e[2][i].to);\n}\ninline void kosaraju(){\n\tRep(i,1,n)if(!vis[i])pst_dfs(i);\n\tRep(i,1,2*n)if(lst[i]&&vis[lst[i]])scc++,neg_dfs(lst[i]); \n}\nint main()\n{\n\tn=read(),m=read();\n\tRep(i,1,m){\n\t\tint x,y,c;\n\t\tx=read(),y=read(),c=read();\n\t\tadd(x,y,1),add(y,x,2);\n\t\tif(c==2)add(y,x,1),add(x,y,2);\n\t}\n\tkosaraju();\n\tint ans=-1,Std;\n\tRep(i,1,n)if(size[num[i]]>ans)ans=size[num[i]],Std=i;\n\tprintf(\"%d\\n\",ans);\n\tRep(i,1,n)if(num[i]==num[Std])printf(\"%d \",i);\n\tputs(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1555754514,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "### \u8fd9\u662f\u4e00\u9898$tarjan$\u7b97\u6cd5\u7684\u7ec3\u624b\u597d\u9898\uff0c\u4ece\u9898\u76ee\u91cc\u5c31\u80fd\u8bfb\u51fa$tarjan$\u5373\u5c06\u964d\u4e34\n\n### \u5728\u505a\u8fd9\u9898\u4e4b\u524d\u5148\u8981\u719f\u6089$tarjan$\u7684\u6a21\u677f\uff0c\u6211\u5148\u653e\u4e00\u4e0b\u6a21\u677f\uff1a\n### \u660e\u786e\u4e00\u4e0b**\u5f3a\u8054\u901a**\u7684\u6982\u5ff5\uff1a\u5982\u679c$u$\u4e0e$v$\u4e4b\u95f4\u4e92\u76f8\u6709\u4e00\u6761\u8fb9\u8fde\u5411\u5bf9\u65b9\u90a3\u4e48\u5c31\u628a$u,v$\u8ba4\u4e3a\u662f\u5f3a\u8054\u901a\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56fe\u6765\u8bf4\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u90fd\u80fd\u5230\u8fbe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u662f\u5f3a\u8fde\u901a\u7684\n#### $dfn[ ]$\u8868\u793a\u70b9$u$\u88ab\u641c\u5230\u7684\u65f6\u95f4\u6233\n#### $low[ ]$\u8868\u793a\u4e3a$u$\u6216$u$\u7684\u5b50\u6811\u80fd\u591f\u8ffd\u6eaf\u5230\u7684\u6700\u65e9\u7684\u6808\u4e2d\u8282\u70b9\u7684\u6b21\u5e8f\u53f7 \n#### $stak[ ]$\u7528\u6570\u7ec4\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u8868\u793a\u6b64\u65f6\u662f\u5426\u5b58\u5728\u67d0\u5bf9\u7236\u5b50\u5173\u7cfb\n```cpp\ninline void tarjan(int u) {\n\tdfn[u]=low[u]=++now;\n\tstak[++top]=u;\n\tfor ( register int i=head[u];i;i=e[i].nex ) {\n\t\tint v=e[i].to;\n\t\tif(!dfn[v]) {//\u5982\u679c\u8282\u70b9v\u8fd8\u672a\u88ab\u8bbf\u95ee\u5230\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!col[v]) low[u]=min(low[u],dfn[v]);\n      //\u5982\u679c\u8282\u70b9v\u8fd8\u5728\u6808\u91cc\u6216\u8005\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u5f3a\u8fde\u901a\u5206\u91cf\n\t}\n\tif(low[u]==dfn[u]) {\n\t\tcol[u]=++sum;\n\t\tsiz[sum]++;\n\t\twhile(stak[top]!=u) {\n\t\t\tcol[stak[top]]=sum;\n\t\t\tsiz[sum]++;\n\t\t\ttop--;\n\t\t}\n\t\ttop--;\n\t}\n}\n```\n### \u5bf9\u4e8e\u8fde\u8fb9\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u7528\u524d\u5411\u661f\u8fde\u8fb9\u5373\u53ef\uff1a\n```cpp\ninline void add(int u,int v) {\n\te[++cnt].nex=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;\n}\n```\n### \u6211\u4e0d\u592a\u7528$vector$\u6765\u5b58\uff0c\u5e38\u6570\u592a\u5927\u4e86\u3002\n\n### \u56de\u5f52\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u9898\u76ee\u5c31\u5f88\u6e05\u65b0\uff0c\u6c42\u6700\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4ee5\u53ca\u91cc\u8fb9\u70b9\u7684\u7f16\u53f7\uff0c\u6211\u7684\u5199\u6cd5\u5f88\u5947\u602a\uff08\u5bf9\u4e8e\u5bf9\u7b2c\u4e8c\u95ee\u4f5c\u7b54\u7684\u8fc7\u7a0b\uff09\uff0c\u540e\u6765\u53d1\u73b0\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\u7684\u5566\uff01\u90a3\u5c31\u4e0a\u4ee3\u7801\u4e86\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=5e3+5,M=5e4+5;\n\nstruct node {\n\tint nex,to;\n}; node e[M];\nint head[N],low[N],dfn[N],col[N],siz[N],num[N];\nint stak[N],n,m,type,cnt,now,sum,top,MAX,ans;\n\ninline void add(int u,int v) {//\u524d\u5411\u661f\u8fde\u8fb9\n\te[++cnt].nex=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;\n}\n\ninline void tarjan(int u) {//tarjan\u6a21\u677f\n\tdfn[u]=low[u]=++now;\n\tstak[++top]=u;\n\tfor ( register int i=head[u];i;i=e[i].nex ) {\n\t\tint v=e[i].to;\n\t\tif(!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!col[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]) {\n\t\tcol[u]=++sum;\n\t\tsiz[sum]++;\n\t\twhile(stak[top]!=u) {\n\t\t\tcol[stak[top]]=sum;\n\t\t\tsiz[sum]++;\n\t\t\ttop--;\n\t\t}\n\t\ttop--;\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor ( register int i=1;i<=m;i++ ) {\n\t\tint u,v;\n\t\tscanf(\"%d%d%d\",&u,&v,&type);\n\t\tif(type==1) add(u,v);\n\t\tif(type==2) add(u,v),add(v,u);\n\t}\n\tfor ( register int i=1;i<=n;i++ ) if(!dfn[i]) tarjan(i);\n\tfor ( register int i=1;i<=sum;i++ ) MAX=max(MAX,siz[i]);\n\tfor ( register int i=1;i<=n;i++ ) {\n\t\tnum[col[i]]++;\n\t\tif(num[col[i]]>ans) ans=num[col[i]];\n\t}\n\tprintf(\"%d\\n\",MAX);\n\tfor ( register int i=1;i<=n;i++ ) if(num[col[i]]==ans) printf(\"%d \",i);\n\treturn 0;\n}\n\t \n```\n### \u5bf9\u4e8e$tarjan$\u6a21\u677f\u7ec3\u624b\u6709\u4e0d\u5c11\u9898\u76ee\uff1a\n#### [tarjan+\u62d3\u6251 P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9](https://www.luogu.org/problemnew/show/P3387)\n#### [P2746 [USACO5.3]\u6821\u56ed\u7f51Network of Schools](https://www.luogu.org/problemnew/show/P2746)\n#### [P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b](https://www.luogu.org/problemnew/show/P2341)\n### \u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684$tarjan$\u7ec3\u624b\u9898\uff0c\u5176\u5b9e\u5efa\u8bae\u53ef\u4ee5\u53bb\u5b66\u4e00\u4e0b$2-SAT$\u3002\u53f3\u62d0\u89c1[P4782 \u3010\u6a21\u677f\u30112-SAT \u95ee\u9898](https://www.luogu.org/problemnew/show/P4782)",
        "postTime": 1557490132,
        "uid": 172612,
        "name": "\u7c73\u5947\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u6d89\u53ca\u5230\u4e86tarjan\u548c\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u6211\u628a\u6211\u535a\u5ba2\u4e2d\u7684\u9898\u89e3\u7c98\u5728\u8fd9\u91cc\u3002\n\n\uff08http://blog.csdn.net/weixin\\_39872717/article/details/78492476\uff09\n\n\u8fd9\u9898\u662f\u4e00\u9053\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u677f\u9898\uff0c\u7528tarjan\u7b97\u6cd5\u5957\u4e0a\u53bb\u5c31\u53ef\u4ee5\u4e86\uff08http://blog.csdn.net/weixin\\_39872717/article/details/78472910\uff09\u3002\n\n\u9996\u5148\u7406\u89e3\u4ec0\u4e48\u662f\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u53ef\u4ee5\u76f8\u4e92\u8fde\u901a\u7684\u533a\u57df\u6210\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff1b\u82e5\u662fu\u80fd\u5230\u8fbev\u4e14v\u80fd\u5230\u8fbeu\uff0c\u4e14u\uff0cv\u4e0e\u5176\u5b83\u7ed3\u70b9\u4e0d\u80fd\u76f8\u4e92\u8fde\u901a\uff0c\u5219{u,v}\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u8c08\u8c08\u6211\u5bf9tarjan\u7684\u7406\u89e3\uff0c\u56fe\u89e3\u8fc7\u7a0b\u8be6\u89c1\uff1ahttp://www.cnblogs.com/shadowland/p/5872257.html\uff0c\u89e3\u91ca\u5f97\u771f\u7684\u5f88\u597d\u3002\n\ntarjan\u57fa\u4e8e\u6df1\u641c\uff0c\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6808\u7528\u4e8e\u5b58\u50a8\u7ed3\u70b9\uff0c\u5728\u6df1\u641c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7ed3\u70b9\u8fdb\u6808\uff0cDFN[i]\u8868\u793a\u7b2ci\u7ed3\u70b9\u662f\u7b2c\u51e0\u4e2a\u88ab\u904d\u5386\u7684\uff08\u6216\u8005\u8bf4\u662f\u7b2c\u51e0\u4e2a\u8fdb\u6808\u7684\uff09\uff1b\n\nLOW[i]\u8868\u793a\u7b2ci\u7ed3\u70b9\u53cai\u6240\u5728\u7684\u5b50\u6811\u53ef\u8ffd\u6eaf\u5230\u7684\u6700\u65e9\u8fdb\u6808\u7684\u7ed3\u70b9\u7684\u8fdb\u6808\u6b21\u5e8f\uff0c\u82e5\u62d3\u5c55\u7ed3\u70b9\u65f6\u627e\u5230\u4e86\u5728\u6808\u4e2d\u7684\u7ed3\u70b9\uff0c\u5219\u66f4\u65b0LOW\u53d6\u8f83\u5c0f\u7684\u503c\uff1b\n\n\u56de\u6eaf\u65f6\uff0c\u82e5DFN[i]==LOW[i]\uff0c\u5219i\u7ed3\u70b9\u5230\u6808\u9876\u7ed3\u70b9\u6240\u6709\u7ed3\u70b9\u4e3a\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\nvoid tarjan(int now) //\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u5b9e\u73b0\u7684tarjan\n\n```cpp\n    {  \n        dfn[now]=++t;  \n        low[now]=t;  \n        flag[now]=true; //flag\u8868\u793a\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7  \n        stack[++top]=now;  \n        int k=top;   \n        int u=head[now];  \n        while (u!=0)  \n        {  \n            if (!flag[edge[u].to]) tarjan(edge[u].to);  \n            if (!del[edge[u].to]) low[now]=min(low[now],low[edge[u].to]); //del\u8868\u793a\u662f\u5426\u5728\u6808\u4e2d\uff0c\u4e3afalse\uff0c\u8bf4\u660eedge[u].to\u672a\u88ab\u5f52\u5230\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e92\u76f8\u8fde\u901a\uff08\u53ef\u753b\u56fe\u8bc1\u660e\uff09   \n            u=edge[u].next;  \n        }  \n        if (dfn[now]==low[now]) //\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u5f53\u524d\u70b9\u4e00\u76f4\u5230\u6808\u9876\u70b9\u5df2\u7ecf\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf   \n        {  \n            for (int i=k;i<=top;i++) del[i]=true; //\u51fa\u6808  \n            if (top-k+1>ans) //\u6b64\u7a0b\u5e8f\u4e3a\u53d6\u6700\u5927\u7ed3\u70b9\u6570\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u5f3a\u8fde\u901a\u5206\u91cf  \n            {  \n                ans=top-k+1;  \n                for (int i=k;i<=top;i++) que[i-k+1]=stack[i];  \n                sort(que+1,que+top-k+1+1,cmp); //stl\u5e93\u6392\u5e8f\uff0c\u7ec8\u6b62\u70b9\u4e3a\u6570\u5217\u957f\u5ea6+1   \n            }   \n            else if (top-k+1==ans)  \n            {  \n                for (int i=k;i<=top;i++) comparison[i-k+1]=stack[i];  \n                sort(comparison+1,comparison+top-k+1+1,cmp);  \n                if (comparison[1]<que[1])  \n                    for (int i=1;i<=ans;i++)  \n                        que[i]=comparison[i];  \n            }  \n            top=k-1; //\u51fa\u6808  \n        }   \n    }  \n```\n\u7531\u4e8e\u6570\u636e\u89c4\u6a21\u8f83\u5927\uff0c\u5efa\u8bae\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff08http://blog.csdn.net/weixin\\_39872717/article/details/78483849\uff09\n\u4e00\u822c\u7684\u524d\u5411\u661f\u662f\u7ecf\u8fc7\u6392\u5e8f\u5c06\u76f8\u540c\u8d77\u70b9\u7684\u8fb9\u653e\u5728\u4e00\u8d77\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u8fb9\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e0e\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u4e0d\u5c55\u5f00\u8bb2\u8ff0\u3002\n\n\u94fe\u5f0f\u524d\u5411\u661f\u5219\u4e0d\u7528\u6392\u5e8f\uff0c\u9996\u5148\u5b9a\u4e49\u6570\u7ec4edge\uff0c\u8bb0\u5f55\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u5219\u8bfb\u5165\u7b2ci\u6761\u8fb9\u7684\u4fe1\u606f\uff1a\u4eceu\u5230v\u6743\u503c\u4e3aw\u7684\u8fb9\u65f6\uff0cedge[i].to\u8d1f\u8d23\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff0cedge[i].w\u8d1f\u8d23\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u90a3\u4e48\u600e\u4e48\u8bb0\u5f55\u8d77\u70b9\u5462\uff1f\u8fd9\u91cc\u5c31\u7528\u5230\u4e86edge[i].next\u4e0ehead[u]\u3002edge[i].next\uff0c\u662f\u7c7b\u4f3c\u4e8e\u9012\u5f52\u7684\u65b9\u5f0f\u8c03\u7528\u8fb9\uff0c\u5982\uff1a\n\n\u7b2c1\u30013\u30015\u6761\u8fb9\u8bb0\u5f55\u7684\u662f\u8d77\u70b9\u4e3a1\u7684\u8fb9\u7684\u4fe1\u606f\uff0c\u5219\uff1aedge[1].next=0,edge[3].next=1,edge[5].next=3\uff1b\u8c03\u7528\u7684\u65f6\u5019\uff0c\u7528\u5b8c\u7b2c5\u6761\u8fb9\uff0c\u5c31\u901a\u8fc7edge[5].next\u5230\u7b2c3\u6761\u8fb9\uff0c\u6700\u540e\u5230\u7b2c1\u6761\u8fb9\uff0c\u7ec8\u6b62\uff1b\n\nhead[u]\u5219\u8bb0\u5f55\u4ee5\u7ed3\u70b9u\u4e3a\u8d77\u70b9\u7f16\u53f7\u6700\u5927\u7684\u8fb9\uff0c\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e2d\uff0chead[1]=5\uff1b\u5219\u8981\u8c03\u7528\u4ee51\u4e3a\u8d77\u70b9\u7684\u70b9\uff0c\u4ecehead[1]\u5f00\u59cb\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5982\u4f55\u5b9e\u73b0\uff1f\n\n\u8bfb\u5165\u540e\uff0c\u82e5head[u]=0\uff0c\u5219edge\u6570\u7ec4\u4e2d\u6ca1\u6709\u4ee5\u8be5\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u90a3\u4e48edge[i].next=0\uff1b\u82e5head[u]!=0\uff0c\u5219edge[i].next=head[u]\uff0chead[u]=i\uff1b\n\n\u5177\u4f53\u4f8b\u5b50\u5206\u6790\u8bf7\u770bhttp://blog.csdn.net/acdreamers/article/details/16902023\u3002\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n    #include<cstdio>  \n    #include<algorithm>  \n    using namespace std;  \n        struct forward_star  \n        {  \n            int to,next;  \n        };  \n        int n,m,cnt,t,top,ans; //cnt\u8868\u8fb9\u6570\uff0ct\u8868\u904d\u5386\u7684\u5e8f\u53f7   \n        bool del[5001],flag[5001]; //del\u6570\u7ec4\u5224\u65ad\u67d0\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0cflag\u8868\u793a\u662f\u5426\u904d\u5386\u8fc7   \n        int head[5001],stack[5001],dfn[5001],low[5001],que[5001],comparison[5001];  \n        forward_star edge[100001];  \n    void add(int u,int v)  \n    {  \n        edge[++cnt].to=v;  \n        edge[cnt].next=head[u];  \n        head[u]=cnt;  \n    }  \n    bool cmp(int i,int j)  \n    {  \n        return i<j;  \n    }  \n    void tarjan(int now)  \n    {  \n        dfn[now]=++t;  \n        low[now]=t;  \n        flag[now]=true;  \n        stack[++top]=now;  \n        int k=top;   \n        int u=head[now];  \n        while (u!=0)  \n        {  \n            if (!flag[edge[u].to]) tarjan(edge[u].to);  \n            if (!del[edge[u].to]) low[now]=min(low[now],low[edge[u].to]); //del\u4e3afalse\uff0c\u8bf4\u660eedge[u].to\u672a\u88ab\u5f52\u5230\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e92\u76f8\u8fde\u901a\uff08\u53ef\u753b\u56fe\u8bc1\u660e\uff09   \n            u=edge[u].next;  \n        }  \n        if (dfn[now]==low[now]) //\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u5f53\u524d\u70b9\u4e00\u76f4\u5230\u6808\u9876\u70b9\u5df2\u7ecf\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf   \n        {  \n            for (int i=k;i<=top;i++) del[stack[i]]=true;  \n            if (top-k+1>ans)  \n            {  \n                ans=top-k+1;  \n                for (int i=k;i<=top;i++) que[i-k+1]=stack[i];  \n                sort(que+1,que+top-k+1+1,cmp); //stl\u5e93\u6392\u5e8f\uff0c\u7ec8\u6b62\u70b9\u4e3a\u6570\u5217\u957f\u5ea6+1   \n            }   \n            else if (top-k+1==ans)  \n            {  \n                for (int i=k;i<=top;i++) comparison[i-k+1]=stack[i];  \n                sort(comparison+1,comparison+top-k+1+1,cmp);  \n                if (comparison[1]<que[1])  \n                    for (int i=1;i<=ans;i++)  \n                        que[i]=comparison[i];  \n            }  \n            top=k-1;  \n        }   \n    }  \n    int main()  \n    {  \n        scanf(\"%d%d\",&n,&m);  \n        for (int i=1;i<=m;i++)  \n        {  \n            int u,v,type;  \n            scanf(\"%d%d%d\",&u,&v,&type);  \n            add(u,v);  \n            if (type==2) add(v,u);  \n        }  \n        for (int i=1;i<=n;i++)  \n            if (!del[i])  \n                tarjan(i);  \n        printf(\"%d\\n\",ans);  \n        for (int i=1;i<=ans;i++)  \n            printf(\"%d \",que[i]);  \n        return 0;  \n}\n```",
        "postTime": 1511680812,
        "uid": 21760,
        "name": "Forward_Star",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "### \u975e\u5e38intresting\u7684\u4e00\u9053\u9898\n\u53c8\u662f\u4e00\u9053\u88f8\u7684\n~~\u592a\u76d1~~\n\u4e0d\ntarjan\u7684\u9898\n\n\n\u6a21\u7248\u9898\u5751\u4e86\u6211\u597d\u4e45\uff0c\u5e78\u597d\u6709crn\u5927\u4f6c\u7684\u5e2e\u52a9\u6539\u9519\uff0c\u624d\u6551\u6211\u4e8e\u82e6\u6d77\u4e4b\u4e2d~~~   \u611f\u8c22\u611f\u8c22---\n\ntarjan\u51e0\u6b21\uff0c\u7136\u540e\u627e\u6700\u5927\u5165\u5ea6\u7684\u8fde\u901a\u5757\uff0c\u8f93\u51fa\uff0cok\u3002\n\n\n\n\u8d34\u4ee3\u7801\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\nusing namespace std;\nint cnt,chuo=0,n,m,dfn[5001],low[5001],st,a[5001][5001],maxx,bjbj;\nint bj[5001],zhan[5001],meat,ment[5001],rd[5001];\nvoid tarjan(int v)\n{\n\tdfn[v]=low[v]=++chuo;\n\tbj[v]=1;zhan[++st]=v;\n\tfor(int i=1;i<=n;i++)\n\tif(a[v][i])\n\t{\n\t\tif(!dfn[i])\n\t\t{\n\t\t\ttarjan(i);\n\t\t\tlow[v]=min(low[v],low[i]);\n\t\t}\n\t\telse if(bj[i]) low[v]=min(low[v],dfn[i]);\n\t}\n\tif(dfn[v]==low[v])\n\t{\n\t\tmeat++;\n\t\tint y;\n\t\tdo\n\t\t{\n\t\t\ty=zhan[st--];\n\t\t\tbj[y]=0;\n\t\t\tment[y]=meat;\n\t\t}\n\t\twhile(y!=v);\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tif(z==1) a[x][y]=z;\n\t\telse a[x][y]=a[y][x]=z;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\tfor(int i=1;i<=n;i++) rd[ment[i]]++;\n\tfor(int i=1;i<=meat;i++)\n\t\tif(rd[i]>maxx) maxx=rd[i],bjbj=i;\n\tcout<<maxx<<endl;\n\tfor(int i=1;i<=n;i++)\n\t\tif(ment[i]==bjbj) cout<<i<<\" \";\n\treturn 0;\n}\n```\n\n\n\nP.S.crn\u5927\u4f6c\u7528\u4e86HEAP\uff0c\u5176\u5b9e\u4e0d\u9700\u8981\u5566~~- -",
        "postTime": 1531380515,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u6211\u5c31\u8bf4\u600e\u4e48\u627e\u4e0d\u5230tarjan\u6c42\u6709\u5411\u56fe\u5f3a\u8fde\u901a\u5206\u91cf\u6a21\u677f\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86qwq\n\n\u7136\u800c\u8fd9\u4e00\u9898\u5176\u5b9e\u5e76\u4e0d\u7528\u53bb\u7ba1\u5b57\u5178\u5e8f\u3002\u3002\n\n\u8fd8\u6709\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4e2d\u6587\u53eb\u505a**\u5854\u626c\u7b97\u6cd5**\uff0c\u4e0d\u662f**\u5854\u5c16**\uff01\uff01\u56e0\u4e3atarjan\u4e0d\u662f\u82f1\u6587!!\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#define N 5010\n#define M 50010 \nusing namespace std;\nint fst[N],dfn[N],low[N],list[N],gett[N];//gett\u8868\u793a\u5404\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570\uff0clist\u662f\u6bcf\u4e2a\u70b9\u6240\u5bf9\u5e94\u7684\u5f3a\u8054\u901a\u5206\u91cf\nint nxt[M],u[M],v[M];\nbool ins[N];//\u8868\u793a\u8282\u70b9\u662f\u5426\u5728\u6808\u4e2d\nstack<int>s;\nint n,m,cnt,tot,num;\nint read()\n{\n    int ans=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') \n    {\n        ans=ans*10+ch-'0';\n        ch=getchar();\n    }\n    return ans;\n}\nvoid add(int p,int q)\n{\n    u[++cnt]=p; v[cnt]=q;\n    nxt[cnt]=fst[u[cnt]];\n    fst[u[cnt]]=cnt;\n    return;\n}\nvoid dfs(int uu)//\u6838\u5fc3\u4ee3\u7801\uff0c\u5b66\u8fc7tarjan\u7684\u5e94\u8be5\u90fd\u80fd\u61c2\u5427\n{\n    dfn[uu]=low[uu]=++tot;\n    ins[uu]=1;\n    s.push(uu);\n    for(int k=fst[uu];k;k=nxt[k])\n    {\n        int vv=v[k];\n        if(dfn[vv])\n        {\n            if(ins[vv]) low[uu]=min(low[uu],dfn[vv]);\n        }\n        else \n        {\n            dfs(vv);\n            low[uu]=min(low[uu],low[vv]);\n        }\n    }\n    if(dfn[uu]==low[uu]) //\u5f39\u51fa\u6808\u4e2d\u5143\u7d20\uff0c\u6784\u5efa\u5f3a\u8054\u901a\u5206\u91cf\n    {\n        ++num;\n        while(s.top()!=uu)\n        {\n            gett[num]++;\n            list[s.top()]=num;\n            ins[s.top()]=0;\n            s.pop();\n        }\n        gett[num]++;\n        list[s.top()]=num;\n        ins[s.top()]=0;\n        s.pop();\n    }\n    return;\n}\nint main()\n{\n    int i,j,p,q,pd;\n    n=read(); m=read();\n    for(i=1;i<=m;i++) //\u5efa\u56fe\n    {\n        p=read(); q=read(); pd=read();\n        if(pd==1) add(p,q);\n        if(pd==2) add(p,q),add(q,p);\n    }\n    for(i=1;i<=n;i++) if(list[i]==0) dfs(i);\n    int maxx=0,pos;\n    for(i=1;i<=num;i++) if(gett[i]>maxx) maxx=gett[i],pos=i;//\u627e\u5230\u6700\u5927\u5f3a\u8054\u901a\u5206\u91cf\u5e76\u8f93\u51fa\n    printf(\"%d\\n\",maxx);\n    for(i=1;i<=n;i++) if(list[i]==pos) printf(\"%d \",i);\n    return 0;\n}\n```",
        "postTime": 1507959093,
        "uid": 22840,
        "name": "\u5218\u5907",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u4e00\u9053\u5bf9\u65b0\u4eba\u975e\u5e38\u53cb\u597d\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7ec3\u4e60\u9898\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u6392\u9664\u5f3a\u8054\u901a\u5206\u91cf\u8fd9\u4e00\u4e2a\u77e5\u8bc6\u70b9\u5916\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u70b9\u5c31\u662f\u66f4\u65b0\u4e86\n\n\u8bf4\u4e00\u4e0b\u7b54\u6848\u7684\u66f4\u65b0\u65b9\u6cd5\uff1a\n\n```\nint ans=0,tp=0x3f3f3f3f,id=0;\n\tfor(int i=1;i<=many;i++)\n\t\tif(scc[i].size()>=ans)\n\t\t{\n\t\t\tsort(scc[i].begin(),scc[i].end());\n\t\t\tif(scc[i][0]<tp||ans<scc[i].size())\n\t\t\t{\n\t\t\t\ttp=scc[i][0];\n\t\t\t\tid=i;\n\t\t\t\tans=scc[i].size();\n\t\t\t}\n\t\t}\n```\nans\u662f\u5f3a\u8054\u901a\u5206\u91cf\u6700\u591a\u80fd\u5305\u542b\u70b9\u7684\u5927\u5c0f\uff0ctp\u6307\u5b57\u5178\u5e8f\u6700\u5c0f\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u6240\u5305\u542b\u70b9\u7684\u6700\u5c0f\u7f16\u53f7\uff0cid\u6307\u7b2cid\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\n\n\u9996\u5148\u6211\u4eec\u5e94\u8be5\u77e5\u9053\u4e00\u70b9\uff1a\u5728\u4e00\u5f20\u6709\u5411\u56fe\u91cc\uff0c\u6bcf\u4e2a\u70b9\u4e0d\u53ef\u80fd\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u5f3a\u8054\u901a\u5206\u91cf\u91cc\n\n\u7531\u9898\u610f\u53ef\u4ee5\u5f88\u597d\u8bc1\u660e\u51fa\uff0c\u5f53\u4e24\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u5927\u5c0f\u76f8\u7b49\u65f6\uff0c\u6240\u5305\u542b\u70b9\u7f16\u53f7\u6700\u5c0f\u7684\u5f3a\u8054\u901a\u5206\u91cf\u5b57\u5178\u5e8f\u6700\u5c0f\n\n~~\u8bc1\u660e\u5c31\u4e0d\u5199\u4e86\uff0c\u5404\u4f4d\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u4e0b~~\n\n\u6545\u6211\u4eec\u5148\u770bans\u80fd\u5426\u76f4\u63a5\u88ab\u66f4\u65b0\uff0c\u5982\u679cans\u80fd\u76f4\u63a5\u88ab\u66f4\u65b0\uff0c\u5219\u76f4\u63a5\u628a\u6240\u6709\u8bb0\u5f55\u8986\u76d6\u6389\n\n\u5982\u679c\u4e0d\u80fd\u4f46\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u5927\u5c0f\u7b49\u4e8eans\uff0c\u5219\u770b\u770b\u8fd9\u4e2a\u5206\u91cf\u91cc\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\uff0c\u5982\u679c\u6bd4tp\u5c0f\u5219\u66f4\u65b0\uff0c\u5982\u679c\u5927\u5219\u76f4\u63a5\u8fc7\u3002\n\n\u5f3a\u8054\u901a\u5206\u91cf\u5177\u4f53\u5c31\u4e0d\u8bb2\u4e86\uff0c\u5404\u4f4d\u770b\u770b\u5176\u4ed6\u5927\u4f6c\u7684\u535a\u5ba2\u5c31\u884c\u4e86\n\n~~\u6bd5\u7adf\u4ed6\u4eec\u8bb2\u7684\u90fd\u6bd4\u6211\u597dQwQ~~\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n//scc:\u5f3a\u8054\u901a\u5206\u91cf\u7684\u7f29\u5199\n#include<bits/stdc++.h>\n#define MAXN 1000001\nusing namespace std;\nint head[MAXN],ver[MAXN],Next[MAXN],tot;\ninline void add(int x,int y)\n{\n\tver[++tot]=y;Next[tot]=head[x];\n\thead[x]=tot;return;\n}\nint n,m;\nint dfn[MAXN],low[MAXN],cnt;\nint stk[MAXN],pd[MAXN],top,many;\nvector <int> scc[MAXN];\n//\u4e2a\u4eba\u63a8\u8350\u7528vector\u5b58\u6bcf\u4e2ascc\u6240\u5305\u542b\u7684\u70b9\uff0c\u56e0\u4e3a\u65b9\u4fbf\u540e\u7eed\u64cd\u4f5c\ninline void tarjan(int x)\n{\n\tdfn[x]=low[x]=++cnt;\n\tstk[++top]=x;\n\tpd[x]=1;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(pd[y])\n\t\t    low[x]=min(low[x],low[y]);\n\t}\n\tif(low[x]==dfn[x])\n\t{\n\t\tmany++;\n\t\tint k;\n\t\twhile(k!=x)\n\t\t{\n\t\t\tk=stk[top--];\n\t\t\tpd[k]=0;\n\t\t\tscc[many].push_back(k);\n\t\t}\n\t}\n\treturn;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y);\n\t\tif(z==2) add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t    if(!dfn[i]) tarjan(i);\n\tint ans=0,tp=0x3f3f3f3f,id=0;\n\tfor(int i=1;i<=many;i++)\n\t\tif(scc[i].size()>=ans)\n\t\t{\n\t\t\tsort(scc[i].begin(),scc[i].end());\n                        //\u521a\u624d\u5fd8\u4e86\u8bf4\u4e86\uff0c\u5982\u679c\u6211\u4eec\u5224\u65ad\u8fd9\u4e2ascc\u6709\u53ef\u80fd\u66f4\u65b0\u7b54\u6848\u5c31\u6392\u5e8f\uff0c\u56e0\u4e3a\u6700\u540e\u8f93\u51fa\u7b54\u6848\u4e5f\u662f\u8981\u6309\u987a\u5e8f\u8f93\u7684\n\t\t\tif(scc[i][0]<tp||ans<scc[i].size())\n\t\t\t{\n\t\t\t\ttp=scc[i][0];\n\t\t\t\tid=i;\n\t\t\t\tans=scc[i].size();\n\t\t\t}\n\t\t}\n\tcout<<ans<<endl;\n\tcout<<scc[id][0];\n\tfor(int i=1;i<ans;i++)\n\t    cout<<\" \"<<scc[id][i];\n\treturn 0;\n}\n```",
        "postTime": 1573376966,
        "uid": 113264,
        "name": "\u4e8c\u5206\u4e4b\u4e00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u5c31\u662f\u4e00\u9053\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u677f\u9898\uff0c\u5728\u627e\u8054\u901a\u5206\u91cf\u7684\u65f6\u5019\u7528\u4e00\u4e2asize\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u8054\u901a\u5206\u91cf\u7684\u5927\u5c0f\uff0cbelong\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff1b\u5f53\u628a\u6574\u4e2a\u56fe\u90fd\u904d\u5386\u5b8c\u4e4b\u540e\uff0c\u627e\u5230\u6700\u5927\u7684\u8fde\u901a\u5206\u91cf\uff0c\u628a\u5b83\u6570\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=50005;\n\nint head[maxn],dfn[maxn],low[maxn],sta[maxn],belong[maxn],size[maxn];\nbool vis[maxn];\nint n,m,ans,id,cnt,tim,top,num;\n\nstruct Edge{\n\tint v,nxt;\n}e[maxn*2];\n\nvoid add(int u,int v)\n{\n\te[++cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\n\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++tim;\n\tvis[u]=1;\n\tsta[++top]=u;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(vis[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tnum++;\n\t\twhile(sta[top+1]!=u)\n\t\t{\n\t\t\tint t=sta[top];\n\t\t\tbelong[t]=num;\n\t\t\tsize[num]++;\n\t\t\tvis[t]=0;\n\t\t\ttop--;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(z==1)\n\t\tadd(x,y);\n\t\telse add(x,y),add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!dfn[i]) tarjan(i);\n\t}\n\tfor(int i=1;i<=num;i++)\n\t{\n\t\tif(size[i]>ans)\n\t\t{\n\t\t\tans=size[i];\n\t\t\tid=i;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(belong[i]==id)\n\t\tprintf(\"%d \",i);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1567412766,
        "uid": 86970,
        "name": "StephenYoung",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "# tarjan\n\u4e00\u9053\u88f8\u7684tarjan,\u6c42\u6700\u957f\u7684\u4e00\u4e2a\u73af,\u4e3b\u8981\u6ce8\u610f\u6751\u5e84\u8f93\u51fa\u987a\u5e8f\u3002\ntarjan\u4e0d\u4f1a\u7684\u8bf7[\u70b9\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P2863)\n```cpp\n#include <stack>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define rr register int\nusing namespace std;\ninline int read()//\u8bfb\u5165\u4f18\u5316\u4e0d\u89e3\u91ca\n{\n\tchar ch=getchar();\n\tif(!(~ch))return 0;\n\tint f=1;\n\twhile(ch>'9'||ch<'0')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\tint x=0;\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nstruct node{\n\tint v,next;\n}e[100001];\nint tim,cnt,sum,head[5001],dfn[5001],low[5001],a[5001],b[5001];\nbool vis[5001];\ninline void add(int u,int v)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n{\n\te[++cnt]=(node){v,head[u]};\n\thead[u]=cnt;\n}\nstack<int> q;\ninline void tarjan(int u)//tarjan\u6c42\u73af\n{\n\tq.push(u);\n\tvis[u]=1;\n\tdfn[u]=low[u]=++tim;\n\tfor(rr i=head[u];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[v],low[u]);\n\t\t}\n\t\telse if(vis[v])low[u]=min(dfn[v],low[u]);\n\t}\n\tif(dfn[u]==low[u])//\u5982\u679c\u662f\u73af,\u770b\u662f\u5426\u6bd4\u5df2\u8bb0\u5f55\u7684\u73af\u66f4\u957f\n\t{\n\t\tint tot=0;//\u8bb0\u5f55\u957f\u5ea6\n\t\ta[++tot]=q.top();//a\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u73af\u5305\u542b\u54ea\u4e9b\u6751\u5e84\n\t\tq.pop();\n\t\tvis[a[tot]]=0;\n\t\twhile(a[tot]!=u)\n\t\t{\n\t\t\ta[++tot]=q.top();\n\t\t\tq.pop();\n\t\t\tvis[a[tot]]=0;\n\t\t}\n\t\tif(tot>sum)//\u6bd4\u8bb0\u5f55\u7684\u73af\u957f,\u5c31\u66f4\u65b0\u8bb0\u5f55\n\t\t{\n\t\t\tsum=tot;//\u66f4\u65b0\u957f\u5ea6\n\t\t\tswap_ranges(a+1,a+tot+1,b+1);//\u66f4\u65b0\u8bb0\u5f55(STL\u51fd\u6570,\u4ea4\u6362\u4e24\u4e2a\u5e8f\u5217\u4ece1~tot\u7684\u9879)\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(head,-1,sizeof head);\n\tint n=read(),m=read();\n\tfor(rr i=1;i<=m;++i)\n\t{\n\t\tint x=read(),y=read(),t=read();\n\t\tadd(x,y);\n\t\tif(!(t&1))add(y,x);\n\t}\n\tfor(rr i=1;i<=n;++i)\n\t\tif(!dfn[i])tarjan(i);\n\tprintf(\"%d\\n\",sum);\n\tsort(b+1,b+sum+1);//\u6751\u5e84\u8def\u5f84\u4e0d\u662f\u6309\u987a\u5e8f\u6392\u7684,\u6240\u4ee5\u8981\u6392\u4e00\u6b21\u5e8f\n\tfor(rr i=1;i<=sum;++i)//\u8f93\u51fa\u6751\u5e84\u8def\u5f84\n\t\tprintf(\"%d \",b[i]);\n\treturn 0;\n}\n```\n~~\u6211\u662f\u849f\u84bb~~",
        "postTime": 1550884663,
        "uid": 116113,
        "name": "Lucifer_Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u5f88\u660e\u663e\u7684$Tarjan$\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u3000\u3000\u5148\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u5168\u90e8\u6c42\u51fa\u6765\uff0c\u6bcf\u6b21\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\u628a\u5b83\u5305\u542b\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\u7136\u540e\u6392\u4e2a\u5e8f\uff0c\u8fd9\u6837\u7684\u8bdd\u6bd4\u8f83\u7684\u65f6\u5019\u5982\u679c\u5927\u5c0f\u76f8\u540c\uff0c\u76f4\u63a5\u6bd4\u8f83\u6700\u5c0f\u7684\u70b9\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u6700\u591a\u53ea\u53ef\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\uff08$PS:$\u4e00\u5f00\u59cb\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u8bb0\u5f55\u70b9\u7684\u6570\u7ec4\u5f00\u5c0f\u4e86\u7136\u540e$WA$\u4e86\u56db\u4e2a\u70b9\uff0c\u56e0\u4e3a\u6015\u8d85\u7a7a\u95f4\uff0c\u5176\u5b9e\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\u7684\uff0c\u6570\u636e\u624d5000\u3002\u3002\u3002\uff09\n\n\u3000\u3000Code\uff1a\n```cpp\n//It is made by HolseLee on 20th Aug 2018\n//Luogu.org P1726\n#include<bits/stdc++.h>\n#define Max(a,b) (a)>(b)?(a):(b)\n#define Min(a,b) (a)<(b)?(a):(b)\nusing namespace std;\n\nconst int N=5e3+7;\nconst int M=5e4+7;\nint n,m,head[N],cnt,dfn[N],low[N],tot,idx;\nbool vis[N];\nstruct Node{\n    int to,nxt;\n}edge[M<<1];\nstruct SCC{\n    int val,s[5001];\n\n    bool operator < (const SCC x) const {\n        return val==x.val?s[1]<x.s[1]:val>x.val;\n    }\n}scc[2002];\nstack<int>sta;\n\ninline int read()\n{\n    char ch=getchar();int num=0;bool flag=false;\n    while(ch<'0'||ch>'9'){if(ch=='-')flag=true;ch=getchar();}\n    while(ch>='0'&&ch<='9'){num=num*10+ch-'0';ch=getchar();}\n    return flag?-num:num;\n}\n\ninline void add(int x,int y)\n{\n    edge[++cnt].to=y;\n    edge[cnt].nxt=head[x];\n    head[x]=cnt;\n}\n\nvoid tarjan(int u)\n{\n    dfn[u]=low[u]=++idx;\n    sta.push(u);vis[u]=true;\n    int v;\n    for(int i=head[u];i!=-1;i=edge[i].nxt){\n        v=edge[i].to;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=Min(low[u],low[v]);\n        }\n        else if(vis[v]){\n            low[u]=Min(low[u],dfn[v]);\n        }\n    }\n    if(dfn[u]==low[u]){\n        scc[++tot].val=0;\n        do{\n            v=sta.top();sta.pop();\n            vis[v]=false;\n            scc[tot].val++;\n            scc[tot].s[scc[tot].val]=v;\n        }while(v!=u);\n    }\n    sort(scc[tot].s+1,scc[tot].s+1+scc[tot].val);\n}\n\nint main()\n{\n    n=read();m=read();\n    memset(head,-1,sizeof(head));\n    int x,y,z;\n    for(int i=1;i<=m;++i){\n        x=read(),y=read(),z=read();\n        add(x,y);\n        if(z==2)add(y,x);\n    }\n    for(int i=1;i<=n;++i)\n    if(!dfn[i])tarjan(i);\n    sort(scc+1,scc+tot+1);\n    printf(\"%d\\n\",scc[1].val);\n    for(int i=1;i<=scc[1].val;++i){\n        printf(\"%d \",scc[1].s[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1534736100,
        "uid": 49058,
        "name": "HolseLee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u7136\u540e\u7c97\u7565\u7684\u770b\u4e86\u4e00\u4e0b\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53d1\u73b0\u5f88\u5c11\u7528stl\u53bb\u5199\u6808\u7684\uff0c\n\n\u5f88\u591a\u4eba\u8c03\u8bd5\u8fc7\u540e\u8ba4\u4e3a\u4e0d\u80fd\u7528stl\u53bb\u5199\uff0c\u4f46\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\u3002\n\n\u6211\u4eec\u5728\u624b\u5199\u6808\u7684\u65f6\u5019\u7684\u5224\u65ad\u6761\u4ef6\u662f\uff1awhile(x!=stack[index+1]);\n\n\u8fd9\u6837\u5b9e\u9645\u4e0a\u6211\u4eec\u662f\u628a\u5f53\u524d\u5143\u7d20\u548c\u4e0a\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002\n\n\u5982\u679c\u6539\u7528stl\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u548c\u5f53\u524d\u5143\u7d20\u6bd4\u8f83\uff0c\u4f46\u662f\u5728\u6bd4\u8f83\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u8981\u518d\u4e0e\u6808\u9876\u6bd4\u8f83\u4e00\u6b21\uff01\n\n\u540c\u65f6\u8981\u6ce8\u610fvis\u6570\u7ec4\u7684\u64a4\u9500\n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n#include<stack> \n#define lli long long int \nusing namespace std;\nconst int MAXN=100001;\nconst int maxn=0x7fffff;\ninline void read(int &n)\n{\n    char c='+';int x=0;bool flag=0;\n    while(c<'0'||c>'9')\n    {c=getchar();if(c=='-')flag=1;}\n    while(c>='0'&&c<='9')\n    {x=(x<<1)+(x<<3)+c-48;c=getchar();}\n    flag==1?n=-x:n=x;\n}\nstruct node\n{\n    int u,v,nxt;\n}edge[MAXN*2];\nint head[MAXN];\nint num=1;\nint n,m;\nint dfn[MAXN];\nint low[MAXN];\nint vis[MAXN];// \u662f\u5426\u5728\u6808\u5185 \nvoid add_edge(int x,int y)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].nxt=head[x];\n    head[x]=num++;\n}\nint tot=0;\nstack<int>s;\nint cur[MAXN];\nint curnum;\nint ans[MAXN];\nint ansnum;\nvoid tarjan(int now)\n{\n    dfn[now]=low[now]=++tot;\n    s.push(now);\n    vis[now]=1;\n    for(int i=head[now];i!=-1;i=edge[i].nxt)\n    {\n        if(!dfn[edge[i].v])\n        {\n            tarjan(edge[i].v);\n            low[now]=min(low[now],low[edge[i].v]);\n        }\n        else if(vis[edge[i].v])\n            low[now]=min(low[now],dfn[edge[i].v]);\n    }\n    if(low[now]==dfn[now])\n    {\n        curnum=0;\n        int tmp=-1;\n        while(now!=s.top())\n        {\n            cur[++curnum]=s.top();\n            vis[s.top()]=0;\n            s.pop();\n            if(tmp==now)\n                break;\n        }\n        vis[s.top()]=0;\n        cur[++curnum]=s.top();\n        s.pop();    \n        if(curnum<ansnum)\n            return ;\n        sort(cur,cur+curnum+1);\n        if(curnum>ansnum)\n        {\n            for(int i=1;i<=curnum;i++)\n                ans[i]=cur[i];\n            ansnum=curnum;\n        }\n        else\n        {\n            for(int i=1;i<=curnum;i++)\n            {\n                if(cur[i]<ans[i])\n                {\n                    for(int i=1;i<=curnum;i++)\n                        ans[i]=cur[i];\n                    ansnum=curnum;\n                    break;\n                }\n            }\n        }\n    }\n}\nint comp(string a,string b)\n{\n    if(a.length()==b.length())\n        return a<b;\n    else \n        return a.length()>b.length();\n}\nint main()\n{\n    read(n);read(m);\n    for(int i=1;i<=n;i++)\n        head[i]=-1;\n    for(int i=1;i<=m;i++)\n    {\n        int how,x,y;\n        read(x);read(y);read(how);\n        if(how==1)\n            add_edge(x,y);\n        else \n        {add_edge(x,y);add_edge(y,x);}\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            tarjan(i);\n/*    if(ansnum==1&&ans[1]==1)\n    {\n        printf(\"6\\n3 5 6 7 8 9\");\n        return 0;\n    }*/\n    printf(\"%d\\n\",ansnum);\n    for(int i=1;i<=ansnum;i++)\n        printf(\"%d \",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1499689956,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "**\n\u5176\u5b9e\u662f\u4e00\u4e2a\u633a\u88f8\u7684\u5f3a\u8fde\u901a\n\n\u5148\u8bf4\u4e00\u4e2a\u53ef\u80fd\u6709\u4eba\u88ab\u5751\u7684\u5730\u65b9  \u7528\u9886\u63a5\u8868\u7684\u8bdd  \u8fb9\u6570\u6700\u5927\u4e3a\u5341\u4e07  \u800c\u4e0d\u662f5\u4e07\uff08\u53cc\u5411\u8fb9\uff09\n\n\u7136\u540e\u5728\u4e8e\u6c42\u5f3a\u8fde\u901a\u7684\u7248\u5b50\u8981\u6253\u5bf9\n\nQAQ\u5c3c\u739b\u6211\u5c31\u4e00\u4e2a\u5730\u65b9\u628av[i]\u6253\u6210\u4e86i\u627e\u4e86\u534a\u4e2a\u5c0f\u65f6\n\n\u7136\u540e\u5462   \u7528tarjan\u7684\u8bdd\n\n\u53d6\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u540c\u65f6\u53ef\u4ee5\u5c06\u5176\u653e\u8fdb\u5206\u88c5scc\u7684vector\u91cc\u9762 \u514d\u5f97\u540e\u6765\u53c8\u53bb\u627e\n\n\u7136\u540e\u5bf9\u5c5e\u4e8e\u540cscc\u7684\u8282\u70b9\u6392\u5e8f\uff08\u81ea\u5df1YY\u4e86\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u592a\u9ad8\uff09\n\n\u7136\u540e\u627e\u51fa\u6700\u5927\u7684  \u540c\u65f6\u627e\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\uff08\u7531\u4e8e\u4e0d\u540c\u8282\u70b9\u5c5e\u4e8e\u4e0d\u540cscc \u6545\u76f4\u63a5\u6bd4\u8f83\u7b2c\u4e00\u4e2a\u5373\u53ef\uff09\n\n\u6700\u540e\u5c31\u662f\u8f93\u51fa\u4e86\n\n**\n\uff08\u597d\u50cf\u5199\u7684\u6709\u70b9\u957f\uff09\n\n```cpp\n\n#include<stack>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=5000+10;\nconst int maxm=100000+10;\n\nint n,m,cnt=0;\n\nint u[maxm],v[maxm],first[maxn],next[maxm];\nvoid add_edge(int u1,int v1)\n{\n    cnt++;u[cnt]=u1;v[cnt]=v1;\n    next[cnt]=first[u[cnt]];\n    first[u[cnt]]=cnt;\n}\nvoid init_data()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) first[i]=-1;\n    for(int i=1,a,b,ins;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&ins);\n        if(ins==1) add_edge(a,b);\n        else add_edge(a,b),add_edge(b,a);\n    }\n}\n\nstack<int>s;\nint dfs_clock,scc_cnt;\nint pre[maxn],sccno[maxn],lowlink[maxn],sccsize[maxn];\n\nvector<int>scc[maxn];\nvoid dfs(int u)\n{\n    pre[u]=lowlink[u]=++dfs_clock;\n    s.push(u);\n    for(int i=first[u];i!=-1;i=next[i])\n    {\n        if(!pre[v[i]])\n        {\n            dfs(v[i]);\n            lowlink[u]=min(lowlink[u],lowlink[v[i]]);\n        }\n        else if(!sccno[v[i]])\n        {\n            lowlink[u]=min(lowlink[u],pre[v[i]]);\n        }\n    }\n    if(lowlink[u]==pre[u])\n    {\n        scc_cnt++;\n        for(;;)\n        {\n            int x=s.top();s.pop();\n            sccno[x]=scc_cnt;\n            scc[scc_cnt].push_back(x);\n            if(x==u) break;\n        }\n    }\n}\n\nvoid find_scc()\n{\n    dfs_clock=scc_cnt=0;\n    for(int i=1;i<=n;i++)\n      if(!pre[i]) dfs(i);\n}\n\nvoid print()\n{\n    for(int i=1;i<=scc_cnt;i++)\n        sort(scc[i].begin(),scc[i].end());\n    int maxsize=0,first,wh;\n    for(int i=1;i<=scc_cnt;i++)\n    {\n        if(scc[i].size()>maxsize)\n        {\n            maxsize=scc[i].size();\n            first=scc[i][0]; wh=i;\n        }\n        else if(scc[i][0]<first&&scc[i].size()==maxsize)\n        {\n            first=scc[i][0]; wh=i;\n        }\n    }\n    int x=scc[wh].size();\n    printf(\"%d\\n\",x);\n    for(int i=0;i<x;i++)\n      printf(\"%d \",scc[wh][i]);\n    return ;\n}\n\nint main()\n{\n    init_data();\n    find_scc();\n    print();\n    return 0;\n}\n\n\n```",
        "postTime": 1454068139,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u4f17\u6240\u5468\u77e5 vector \u7528\u8d77\u6765\u5f88\u723d\uff0c\u5c24\u5176\u662f\u7528tarjan\u8fd9\u79cd\u9898\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u76f4\u63a5\u5f00 vector \u6765\u5b58\uff0c\u5176\u4f18\u8d8a\u6027\u663e\u800c\u6613\u89c1,\u4e3a\u4ec0\u4e48\u8fd9\u6837\u8bf4\u5462\uff0c\u4e0b\u9762\u8bf7\u770b\u6211\u7684\u4ee3\u7801\u3002\n```cpp\n#include <algorithm>\t\n#include <cstdio>\n#include <cctype>//\u7528\u4e8e\u5feb\u8bfb\u7684\u6570\u5b57\u5224\u65ad\uff0c\u51fd\u6570\u4e3aisdigit()\n#include <vector>\n#include <stack>\n/* \u559c\u6b22\u7528#include <bits/stdc++.h>\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u6362\u6210#include <bits/stdc++.h>\uff0c\u58f0\u660e\u4e0b\u5934\u6587\u4ef6\u6ca1\u6709\u5197\u4f59\n*/\nusing namespace std;//\u4e0d\u559c\u6b22\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u7528\n#define I inline\n#define R register\n#define inf 1073742823\n#define FOR(i,begin,end) for(R int i=begin;i<=end;++i)\n#define ROF(i,begin,end) for(R int i=begin;i>=end;--i)\nnamespace IO{\n    char buf[1<<21],*pa=buf,*pb=buf;\n    char buffer[1<<21];int p1=-1;const int p2=(1<<21)-1; \n    I char gc(){return pa==pb&&(pb=(pa=buf)+fread(buf,1,1<<21,stdin),pa==pb)?EOF:*pa++;}\n    template<class T>I void read(T &x){\n        x=0;R int y=0;R char ch=gc();\n        for(;!isdigit(ch);ch=gc())y=ch=='-';\n        for(;isdigit(ch);ch=gc())x=(x<<3)+(x<<1)+(ch^48);\n        (y)&&(x=-x);return;}\n    I void flush(){fwrite(buffer,1,p1+1,stdout);p1=-1;return;}\n    I void pc(int ch){if(p1==p2)flush();buffer[++p1]=ch;return;}\n    template<class T>I void write(T x){\n        static char buf[20];static int len =-1;\n        if(x>=0){do buf[++len]=(x%10)^48,x/=10;while(x);}\n        else{pc('-');do buf[++len]=(-(x%10))^48,x/=10;while(x);}\n        while(len>=0)pc(buf[len--]);\n        return;}\n}\nusing namespace IO;\n#define maxn 10000\nvector<int>G[maxn],T[maxn];\nstack<int>s;\nint n,m,opt,x,y;\nint dfn[maxn],low[maxn],cnt=0;\nbool vis[maxn];\nint mx=0,bnt=0;\nvoid tarjan(int u){\n    dfn[u]=low[u]=++cnt;\n    s.push(u),vis[u]=1;\n    for(auto v:G[u])\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }else if(vis[v]){\n            low[u]=min(low[u],low[v]);\n        }\n    int k;\n    if(low[u]==dfn[u]){\n        ++bnt;\n        do{\n            k=s.top(),s.pop();\n            vis[k]=0;\n            T[bnt].push_back(k);\n        }while(u!=k);\n        sort(T[bnt].begin(),T[bnt].end());//sort\u627e\u5230\u6700\u5c0f\u5143\u7d20\n        if(T[bnt].size()>T[mx].size())mx=bnt;\n        else if(T[bnt].size()==T[mx].size()&&*T[bnt].begin()<*T[mx].begin())mx=bnt;\n    }\n}\nsigned main(){\n    read(n),read(m);\n    FOR(i,1,m)\n        read(x),read(y),read(opt),\n        opt==1?//\u4e09\u76ee\u8fd0\u7b97\u7b26\n        G[x].push_back(y)//if\n        :G[y].push_back(x),G[x].push_back(y);//else\n    FOR(i,1,n)\n        if(!dfn[i])\n            tarjan(i);\n    write(T[mx].size()),pc('\\n');\n    for(auto i : T[mx])//\u76f4\u63a5\u8f93\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u5143\u7d20\n        write(i),pc(' ');\n    flush();\n    return 0;\n}\n```\n\u5f53\u7136\u4f7f\u7528vector\u7684\u540e\u679c\u5c31\u662f\u5e38\u6570\u83ab\u540d\u53d8\u5927\uff0c\u4f46\u662f\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u63a5\u53d7\uff0c\n\n\u4f7f\u7528sort\u7684\u540e\u679c\u5c31\u662f\u590d\u6742\u5ea6\u591alog\uff0c\u4f46\u662f\u4ee3\u7801\u590d\u6742\u5ea6\u6709\u6240\u4e0b\u964d\n\n\u5f53\u7136\u8fd9\u662f\u5178\u578b\u7684\u7528\u65f6\u95f4\u6765\u6362\u53d6\u7a7a\u95f4\u548c\u4ee3\u7801\u8212\u9002\u6027\u7684\u505a\u6cd5",
        "postTime": 1581849112,
        "uid": 158869,
        "name": "\u76e7\u92c5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u88f8\u9898  \n\u76f4\u63a5\u7528tarjan\u6c42\u51fa\u6bcf\u4e2a\u5206\u91cf\u7684\u5927\u5c0f,\u7531\u4e8e\u8981\u9009\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u4e2a\u6700\u5927\u5206\u91cf,\u8fd8\u9700\u8981\u4fdd\u5b58\u4e00\u4e0b\u5206\u91cf\u7684\u5927\u5c0f\u548c\u7f16\u53f7\u6700\u5c0f\u7684\u7ed3\u70b9\u3002  \n\u7136\u540e\u76f4\u63a5\u626b\u4e00\u904d\u6240\u6709\u5206\u91cf,\u9009\u51fa\u6240\u6c42\u5206\u91cf\u3002  \n\u626b\u63cf\u6240\u6709\u70b9\u8f93\u51fa\u5373\u53ef\u3002  \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 5678, M = 56789;\n\nint head[N], ver[M<<1], nex[M<<1], tot;\ninline void addedge(int u, int v) {\n    ver[tot] = v; nex[tot] = head[u]; head[u] = tot++;\n}\n\nint dfn[N], low[N], dfs_clock = 1;\nint sta[N], top = 0;\nint co[N], num[N], mini[N], col = 1;\nvoid tarjan(int cur) {\n    dfn[cur] = low[cur] = dfs_clock++;\n\tsta[top++] = cur;\n    for(int i = head[cur]; ~i; i = nex[i]) {\n        if(!dfn[ver[i]]) {\n            tarjan(ver[i]);\n            low[cur] = min(low[cur], low[ver[i]]);\n        } else if(!co[ver[i]]) {\n            low[cur] = min(low[cur], dfn[ver[i]]);\n        }\n    }\n    if(dfn[cur] == low[cur]) {\n\t\tco[cur] = col;\n\t\t++num[col]; mini[col] = cur;\n        while(sta[--top] != cur) {\n\t\t\tco[sta[top]] = col;\n\t\t\t++num[col];\n\t\t\tmini[col] = min(mini[col], sta[top]);\n\t\t}\n\t\t++col;\n    }\n}\n\nint main() {\n\tmemset(head, -1, sizeof(head));\n    int n, m, u, v, type;\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 1; i <= m; ++i) {\n        scanf(\"%d %d %d\", &u, &v, &type);\n        addedge(u, v);\n        if(type == 2) addedge(v, u);\n    }\n    for(int i = 1; i <= n; ++i) if(!dfn[i]) tarjan(i);\n\tint ans = 1;\n\tfor(int i = 2; i < col; ++i) {\n\t\tif(num[ans] < num[i] || num[ans] == num[i] && mini[ans] > mini[i]) ans = i;\n\t}\n\tprintf(\"%d\\n\", num[ans]);\n\tfor(int i = 1; i <= n; ++i) if(co[i] == ans) printf(\"%d \", i);\n\tprintf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1576337811,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "[\u5f3a\u8fde\u901a\u5206\u91cf]\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff0c\u4e0a\u9762\u6709\u5355\u5411\u8fb9\u548c\u65e0\u5411\u8fb9\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4f7f\u5f97\u91cc\u9762\u4efb\u610f\u4e24\u70b9\u81f3\u5c11\u6709\u4e24\u6761\u4e0d\u540c\u7684\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u3002\n\u601d\u8def\uff1a\u54c8\u54c8\uff0c\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u677f\u4e86\uff0c\u5173\u952e\u662f\u8f93\u51fa\uff0c\u6211\u4eec\u65b0\u5f00\u4e00\u4e2avector\u5b58\u50a8\u6570\u636e\uff0c\u62cd\u4e00\u904d\u5e8f\u5c31\u597d\u4e86\uff0c\u8be6\u7ec6\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 5005\n#define maxnode 1000005\n#define sigma_size 26\n#define md 12345678\n#define INF 0x3f3f3f3f\n#define pii pair<int,int>\nusing namespace std;\n\nint n,m,t;\nstruct Edge\n{\n    int from,to;\n    Edge(int from=0,int to=0):from(from),to(to){};\n};\nvector<Edge> edges;\nvector<int> G[MAXN];\nvector<int> mp[MAXN];\nstack<int> S;\nint lowlink[MAXN],pre[MAXN],sccno[MAXN];\nint dfs_clock,scc_cnt;\n\nvoid dfs(int u)\n{\n    S.push(u);\n    lowlink[u]=pre[u]=++dfs_clock;\n    for(int i=0;i<G[u].size();i++)\n    {\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])\n        {\n            dfs(v);\n            lowlink[u]=min(lowlink[u],lowlink[v]);\n        }\n        else if(!sccno[v])\n        {\n            lowlink[u]=min(lowlink[u],pre[v]);\n        }\n    }\n    if(lowlink[u]==pre[u])\n    {\n        ++scc_cnt;\n        for(;;)\n        {\n            int x=S.top();\n            S.pop();\n            sccno[x]=scc_cnt;\n            if(x==u)\n                break;\n        }\n    }\n}\n\nvoid Find_scc()\n{\n    memset(pre,0,sizeof(pre));\n    dfs_clock=scc_cnt=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n            dfs(i);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        mp[sccno[i]].push_back(i);\n    }\n    int pos,maxn;\n    maxn=0;\n    for(int i=1;i<=scc_cnt;i++)\n    {\n        sort(mp[i].begin(),mp[i].end());\n        if(maxn<mp[i].size())\n        {\n            maxn=mp[i].size();\n            pos=i;\n        }\n    }\n    printf(\"%d\\n\",maxn);\n    for(int i=0;i<mp[pos].size();i++)\n    {\n        printf(\"%d \",mp[pos][i]);\n    }\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int u,v;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d %d\",&u,&v,&t);\n        if(t==1)\n        {\n            edges.push_back({u,v});\n            int mm=edges.size();\n            G[u].push_back(mm-1);\n        }\n        else if(t==2)\n        {\n            edges.push_back({u,v});\n            edges.push_back({v,u});\n            int mm=edges.size();\n            G[u].push_back(mm-2);\n            G[v].push_back(mm-1);\n        }\n    }\n    Find_scc();\n    return 0;\n}\n\n```\n",
        "postTime": 1573703659,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "#### \u7b97tarjan\u88f8\u9898\u5427\uff0c\u91cd\u70b9\u53ea\u662f\u843d\u5728\u4e86\u6c42\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u5440\n\n**\u6b63\u6587\uff1a**\n\n1. \u7b97\u6cd5\u601d\u8def\uff1a\u9898\u5e72\u63d0\u5230**\u7edd\u5bf9\u8054\u901a\u533a\u57df**\uff0c\u90a3\u4e48\u5c31\u662f\u6b64\u533a\u57df\u5185\u4e2a\u70b9\u4e92\u76f8\u901a\u8fbe\uff0c\u5f88\u5bb9\u6613\u60f3\u5230**\u5f3a\u8fde\u901a\u5206\u91cf**\n\n    \u8fd9\u6837tarjan\u7b97\u6cd5\u81ea\u7136\u5c31\u660e\u767d\u8981\u7528\u4e86\uff0c\u800c**\u7f29\u70b9**\u540e\u5c31\u662f\u5df2\u5904\u7406\u5b8c**\u5f3a\u8fde\u901a\u5206\u91cf**\uff0c\u53ea\u9700\u8981\u7ef4\u62a4**\u7f29\u70b9\u540e\u6bcf\u4e2a\u70b9\u7684\u5927\u5c0f**\uff0c\u5373\u53ef\n\n2. \u5b57\u5178\u5e8f\uff1a\u6709\u4e0a\u65b9\u5206\u6790\uff0c\u90a3\u5c31\u5728\u5bfb\u627emax_size\u65f6\u5904\u7406\u51fa\u6765\uff0c\u5bf9\u5e94\u6700\u5c0f\u5b57\u5178\u5e8f\u7684**\u7f29\u70b9\u6807\u53f7**\n\n```cpp\n\u5206\u4e24\u79cd\u60c5\u51b5\u66f4\u65b0\uff1a1. \u65e0\u6761\u4ef6\u66f4\u65b0\uff1a\u89c4\u6a21\u66f4\u5927 2. \u89c4\u6a21\u76f8\u540c\uff0c\u904d\u5386\u539fn\u4e2a\u70b9\uff0c\u6bd4\u8f83\n\nint id,max_ans=INT_MIN;\nfor(int i=1;i<=tot;++i)//tot\u4e3a\u7f29\u70b9\u540e\u70b9\u4e2a\u6570\n\tif(sz[i]>max_ans)\n\t\tmax_ans=sz[i],id=i;\n\telse if(sz[i]==max_ans){\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tif(col[j]==i) {id=i;break;}\n\t\t\tif(col[j]==id) break;\n\t\t}\n\t}\n```\n\n\n**Code:**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e3+5;\nconst int maxm=5e4+5;\nint head[maxn],col[maxn],tot,n,m,sz[maxn],low[maxn],dfn[maxn],dfs_clock,size;\nstruct node{\n\tint u,v,nxt;\n}e[maxm<<1];\n\nvoid add(int u,int v){\n\te[size].u=u;\n\te[size].v=v;\n\te[size].nxt=head[u];\n\thead[u]=size++;\n}\n\nstack<int>s;\nvoid tarjan(int u){//\u5e38\u89c4\u7f29\u70b9\n\ts.push(u);\n\tdfn[u]=low[u]=++dfs_clock;\n\tfor(int i=head[u];~i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!col[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tint k;\n\tif(dfn[u]==low[u]){\n\t\t++tot;\n\t\tdo{\n\t\t\tk=s.top();s.pop();\n\t\t\tcol[k]=tot;\n\t\t\tsz[tot]++;\n\t\t}while(k!=u);\n\t}\n}\n\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,a,b,op;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&a,&b,&op);\n\t\tadd(a,b);\n\t\tif(op==2) add(b,a);\n\t}\n\tfor(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);\n\tint id,max_ans=INT_MIN;\n\tfor(int i=1;i<=tot;++i)//\u904d\u5386\u7f29\u70b9\u540e\u7684\u6bcf\u4e2a\u70b9\n\t\tif(sz[i]>max_ans)//1. \u65e0\u6761\u4ef6\u66f4\u65b0\n\t\t\tmax_ans=sz[i],id=i;\n\t\telse if(sz[i]==max_ans){//2. \u6709\u5b57\u5178\u5e8f\u9650\u5236\u7684\u66f4\u65b0\n\t\t\tfor(int j=1;j<=n;++j){//\u904d\u5386\u539f\u6709n\u4e2a\u70b9\uff0c\u8c01\u5148\u8bbf\u95ee\u5230\uff0c\u5c31\u9009\u8c01\u5373\u53ef\u627e\u51fa\u6700\u5c0f\u5b57\u5178\u5e8f\n\t\t\t\tif(col[j]==i) {id=i;break;}\n\t\t\t\tif(col[j]==id) break;\n\t\t\t}\n\t\t}\n\tprintf(\"%d\\n\",max_ans);\n\tfor(int i=1;i<=n;++i)\n\t\tif(col[i]==id) printf(\"%d \",i);\n}\n```\n",
        "postTime": 1567124674,
        "uid": 109381,
        "name": "Mosher",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u5c31\u662f\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u91cc\u9762\u7684\u70b9\u5b57\u5178\u5e8f\u6700\u5c0f\n\n\u90a3\u5148\u8dd1\u4e00\u904dtarjan\uff0c\u7136\u540e\u6309\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u627e\u5230\u7b2c\u4e00\u4e2a\u6240\u5c5e\u5f3a\u8fde\u901a\u5206\u91cf\u6ee1\u8db3\u70b9\u6570\u6700\u5927\n\n\u90a3\u4e48\u8fd9\u4e2a\u7f16\u53f7\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u6211\u4eec\u8981\u8f93\u51fa\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 50010\nusing namespace std;\nstruct Edge{\n\tint to, next;\n}edge[maxn << 1];\nint num, head[maxn], Index, dfn[maxn], low[maxn], vis[maxn], top, sta[maxn], tot, color[maxn];\nint cnt[maxn], n, m;\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid addedge(int x, int y){ edge[++num] = (Edge) { y, head[x] }; head[x] = num; }\n\nvoid tarjan(int u){\n\tdfn[u] = low[u] = ++Index;\n\tvis[u] = 1, sta[++top] = u;\n\tfor (int i = head[u]; i; i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif (!dfn[v]) tarjan(v), low[u] = min(low[u], low[v]); else\n\t\tif (vis[v]) low[u] = min(low[u], dfn[v]);\n\t}\n\tif (dfn[u] == low[u]){\n\t\t++tot;\n\t\twhile (sta[top + 1] != u) vis[sta[top]] = 0, color[sta[top--]] = tot, ++cnt[tot];\n\t}\n}\n\nint main(){\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; ++i){\n\t\tint x = read(), y = read(), opt = read();\n\t\taddedge(x, y);\n\t\tif (opt == 2) addedge(y, x);\n\t}\n\tfor (int i = 1; i <= n; ++i) if (!dfn[i]) tarjan(i);\n\tint Max = 0;\n\tfor (int i = 1; i <= tot; ++i) Max = max(Max, cnt[i]);\n\tprintf(\"%d\\n\", Max);\n\tint node = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (!node && cnt[color[i]] == Max) node = color[i], printf(\"%d \", i); else\n\t\tif (node == color[i]) printf(\"%d \", i);\n\treturn 0;\n}\n```\n",
        "postTime": 1565090368,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u4f6c\u4eec\u90fd\u53d1\u7684\u662ftarjan\u548ckosaraju\u7684\u9898\u89e3\n\n\u849f\u84bb\u8868\u793a\u8fd9\u4e24\u4e2a\u90fd\u4e0d\u4f1a\u545c\u545c\u545c\n\n\u4e8e\u662f\u53ea\u597d\u7528\u4e86\u7384\u5b66\u590d\u6742\u5ea6\u7684dfs+\u5e76\u67e5\u96c6\n\ndfs\u6c42\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u8054\u901a\n```cpp\nvoid dfs(int k,int x){\n    flag[x]=1;\n    for(int i=0;i<g[x].size();i++){\n        if(flag[g[x][i]]) continue;\n        flag[g[x][i]]=1;\n        f[k][g[x][i]]=1;\n        dfs(k,g[x][i]);\n    }\n}\n```\n\u7136\u540e\u628a\u8054\u901a\u7684\u70b9\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u5185\n\n```cpp\nfor(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            if(i!=j && f[i][j] && f[j][i])\n                fa[find(i)]=fa[find(j)];\n```\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,fa[5005],ans[5005],cnt,tmp,a[5005];\nvector<int> g[5005];\nbool f[5005][5005],flag[5005];\nvoid dfs(int k,int x){\n    flag[x]=1;\n    for(int i=0;i<g[x].size();i++){\n        if(flag[g[x][i]]) continue;\n        flag[g[x][i]]=1;\n        f[k][g[x][i]]=1;//\u4e24\u4e2a\u70b9\u8054\u901a \n        dfs(k,g[x][i]);\n    }\n}\nint find(int x){\n    if(x!=fa[x]) x=fa[x]=fa[fa[x]];return x;//while\u6bd4\u9012\u5f52\u5feb \n}\nint main( ){\n    cin>>n>>m;int x,y,z;memset(f,0,sizeof(f));\n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>z;if(z==1) g[x].push_back(y);\n        else{g[x].push_back(y);g[y].push_back(x);}\n    }\n    for(int i=1;i<=n;i++){\n        memset(flag,0,sizeof(flag));dfs(i,i);fa[i]=i;\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            if(i!=j && f[i][j] && f[j][i])\n                fa[find(i)]=fa[find(j)];//\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u5185 \n    for(int i=1;i<=n;i++) ans[fa[i]]++;\n    for(int i=1;i<=n;i++){\n        if(ans[i]>cnt){\n            cnt=ans[i];tmp=i;//\u627e\u6700\u5927\u7684\u96c6\u5408 \n        }\n    }\n    cout<<cnt<<endl;\n    for(int i=1;i<=n;i++) if(fa[i]==tmp) cout<<i<<\" \";\n    return 0;\n}\n```\nAC\u8bb0\u5f55\uff1ahttps://www.luogu.org/recordnew/show/19390141\n\n#### PS\uff1a\u4e0d\u7528\u7ba1\u5b57\u5178\u5e8f\uff0c\u8bb0\u5f97\u5f00O2\uff01\uff01\uff01",
        "postTime": 1558867019,
        "uid": 95453,
        "name": "ExBritainia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "**\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u6c42\u7ed9\u5b9a\u56fe\u4e2d\u5143\u7d20\u6700\u591a\u7684\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u8f93\u51fa\u5176\u5143\u7d20\u4e2a\u6570\uff0c\u4ee5\u53ca\u5176\u4e2d\u7684\u5143\u7d20\uff08\u6309\u7f16\u53f7\u5347\u5e8f\uff09**\n\n\u592a\u76d1\uff0c\u88f8\u5f97\u4e0d\u80fd\u518d\u88f8\u7684\u592a\u76d1\n\n\u61d2\u4eba\u5199\u6cd5\uff0c\u4e0d\u7528\u624b\u5199\u8fb9\u8868\uff0c\u4e0d\u7528\u5199\u53c8\u81ed\u53c8\u957f\u7684\u5404\u79cd\u51fd\u6570\uff0c\u53ea\u9700\u8981stl\u7684\u4e00\u70b9\u5c0f\u5c0f\u7684\u5e2e\u52a9\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint N,M,dfn[5005],low[5005],indx,col[5005],cnt,sum[5005],MAX;\nvector<int>G[5005];\nstack<int>S;\nvoid tarjan(int u){\n\tS.push(u);dfn[u]=low[u]=++indx;\n\tfor(int i=0;i<G[u].size();i++){\n\t\tint v=G[u][i];\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else if(!col[v])low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]){\n\t\tint top;cnt++;\n\t\tdo{\n\t\t\ttop=S.top();\n\t\t\tcol[top]=cnt;\n\t\t\tS.pop();\n\t\t\tsum[cnt]++;\n\t\t}while(top!=u);\n\t\tif(sum[cnt]>sum[MAX])MAX=cnt;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=1,a,b,t;i<=M;i++){\n\t\tscanf(\"%d%d%d\",&a,&b,&t);\n\t\tG[a].push_back(b);\n\t\tif(t==2)G[b].push_back(a);\n\t}\n\tfor(int i=1;i<=N;i++)\n\tif(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=N;i++)if(col[i]==MAX)G[0].push_back(i);\n\tsort(G[0].begin(),G[0].end());\n\tprintf(\"%d\\n\",G[0].size());\n\tfor(int i=0;i<G[0].size();i++)printf(\"%d \",G[0][i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1556113254,
        "uid": 109396,
        "name": "Uniecho1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1726)\n\n\u4e00\u9053\u6c42\u5f3a\u8054\u901a\u5206\u91cf\u7684\u6a21\u677f\u9898\n\n\u524d\u9762\u7684\u8bb8\u591a\u5927\u4f6c\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u5f3a\u8054\u901a\u5206\u91cf\u4e86\u3002\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\n\n\u6211\u8bf4\u4e00\u4e0b\u6211\u6700\u540e\u5904\u7406\u7684\u65b9\u6cd5\n\n\u65e2\u7136\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u5c31\u7528\u4f18\u5148\u961f\u5217\n\n\u518dsort\u6392\u5e8f\u4e00\u904d\u957f\u5ea6\u5c31\u89e3\u51b3\u4e86\n\n\u611f\u89c9\u4ee3\u7801\u8fd8\u662f\u975e\u5e38\u597d\u7406\u89e3\u7684\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e6;\nint n,m;\nstruct node{\n\tint ne;\n\tint to;\n}e[2*maxn]; \nint head[maxn];\nint cnt=0;\nvoid add(int x,int y)\n{\n\te[++cnt].to=y;\n\te[cnt].ne=head[x];\n\thead[x]=cnt;\n}\nbool cmp(priority_queue<int,vector<int>,greater<int> > x,priority_queue<int,vector<int>,greater<int> > y)\n{\n\treturn x.size()>y.size();\n}\npriority_queue<int,vector<int>,greater<int> >ans[maxn];\nint dfn[maxn];\nint low[maxn];\nbool vis[maxn];\nint temp;\nint num=0;\nstack<int> q;\nvoid tarjan(int u)\n{\n\tq.push(u);\n\tvis[u]=1;\n\tdfn[u]=low[u]=++num;\n\tfor(int i=head[u];i;i=e[i].ne)\n\t{\n\t\tint v=e[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\t\n\t\t} \n\t\telse if(vis[v])\n\t\t{\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tcnt++;\n\t\tdo{\n\t\t\ttemp=q.top();\n\t\t\tq.pop();\n\t\t\tvis[temp]=0;\n\t\t\tans[cnt].push(temp);\n\t\t}while(u!=temp);\n\t}\n}\nint main()\n{\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,t;\n\t\tstd::cin>>a>>b>>t;\n\t\tif(t==1) add(a,b);\n\t\telse add(a,b),add(b,a);\n\t}\n\tcnt=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!dfn[i]) tarjan(i);\n\t}\n\tsort(ans+1,ans+cnt+1,cmp);\n\tstd::cout<<ans[1].size()<<std::endl;\n\twhile(!ans[1].empty())\n\t{\n\t\tint u=ans[1].top();\n\t\tans[1].pop();\n\t\tstd::cout<<u<<\" \";\n\t}\n}\n```\n",
        "postTime": 1552787383,
        "uid": 142510,
        "name": "_October_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "## \u5feb\u8fc7\u5e74\u4e86\uff0c\u5728\u4f60\u8c37\u53d1\u4e2a\u9898\u89e3\n>> \u9996\u5148\uff0c\u6211\u60f3\u5410\u69fd\u4e00\u4e0b\u8ba8\u8bba\uff0cxswl2333\uff0c\u5c45\u7136\u95ee\u767d\u6cfd\u6167\u97f3\u662f\u8c01\uff0c\u4f60\u5f53\u2018\u4e0a\u2019\u662f\u4e2a\u52a8\u8bcd\u5417\u3002 \n\n\u597d\u7684\u8fdb\u5165\u6b63\u9898\uff0c\u8fd9\u9053\u9898\u662f\u4e00\u9053tarjan\u7684\u6a21\u677f\u9898\uff0c\u672c\u9898\u89e3\u9002\u5408\u521a\u5b66\u5b8ctarjan\u7684\u5c0f\u4f19\u4f34\u98df\u7528\uff0c\u5c06\u9898\u76ee\u7684\u8fd9\u4e9b\u5e9f\u8bdd\u8fc7\u6ee4\u6389\u540e\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u89e3\u4e24\u4e2a\u95ee\u9898\u3002  \n\n1.\u6700\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6709\u591a\u5c11\u4e2a\u6751\u5e84\uff0c\u4e5f\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u3002\n\n2.\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u6bcf\u4e2a\u5728\u8fd9\u4e2a\u5206\u91cf\u4e2d\u7684\u6751\u5e84\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u8282\u70b9\u5e8f\u53f7\u3002  \n\n\u9996\u5148\u662f\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u90fd\u77e5\u9053tarjan\u5728\u5f97\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662fdfnx==lowx\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e32\u5f39\u6808\u7684\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u5f97\u5230\u5206\u91cf\u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5730\u65b9\u7edf\u8ba1\u8be5\u5206\u91cf\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\n\n\u7136\u540e\u662f\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u8981\u77e5\u9053tarjan\u7f29\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u4e00\u4e2a\u65b0\u56fe\u7684\u65b9\u6cd5\u662f\u67d3\u8272\uff0c\u6240\u4ee5\u591a\u5f00\u4e00\u4e2a\u65b0\u56fe\u6570\u7ec4\uff0c\u7edf\u8ba1\u5206\u91cf\u8282\u70b9\u6570\u6700\u5927\u7684\u67d3\u8272\u7f16\u53f7\uff0c\u6700\u540e\u4ece1\u5230n\u67e5\u627e\uff0c\u5982\u679c\u7f16\u53f7\u76f8\u540c\u5c31\u8f93\u51fa\uff0c\u8fd9\u6837\u540c\u65f6\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u5b57\u5178\u5e8f\u8f93\u51fa\u3002\n\n\u7136\u540e\u5c31\u6109\u5feb\u7684ac\u4e86\n\n\u4e0a\u83dc\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <stack>\nusing namespace std;\nint cnt, head[5000+5], dfn[5000+5], low[5000+5];\nbool vis[5000+5];\nint final[5000+5];\nint color_tot;\nint tot;\nint maxn, ans, ans_tot;\nstack <int> sta;\nstruct node\n{\n    int nex, from, to;\n}edge[50000+5];\nvoid add(int x, int y)\n{\n    edge[++cnt].nex = head[x];\n    edge[cnt].from = x;\n    edge[cnt].to = y;\n    head[x] = cnt;\n}\n\nvoid tarjan(int x)\n{\n    dfn[x] = low[x] = ++cnt;\n    tot ++;\n    sta.push(x);\n    vis[x] = 1;\n    for(int i = head[x]; i; i = edge[i].nex)\n    {\n        int v = edge[i].to;\n        if(!dfn[v])\n        {\n            tarjan(v);\n            low[x] = min(low[x], low[v]);\n        }\n        else if(vis[v])low[x] = min(low[x], dfn[v]);\n    }\n    if(dfn[x] == low[x])\n    {\n        int v = -1;\n        tot = 0;\n        color_tot++;\n        while(v != x)\n        {\n            v = sta.top();sta.pop();tot++;\n            final[v] = color_tot;\n            vis[v] = 0;\n        }\n        if(tot > ans)\n        {\n            ans = tot;\n            ans_tot = color_tot;\n        }\n    }\n}\n\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= m; ++i)\n    {\n        int x, y, p;\n        scanf(\"%d%d%d\", &x, &y, &p);\n        add(x, y);\n        if(p == 2)\n        add(y, x);\n    }\n    cnt = 0;\n    for(int i = 1; i <= n; ++i)\n        if(!dfn[i]) tarjan(i);\n        \n    printf(\"%d\\n\", ans);\n    \n    for(int i = 1; i <= n; ++i)\n    {\n        if(final[i] == ans_tot)\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n```",
        "postTime": 1549106957,
        "uid": 119118,
        "name": "\u665a\u5b89\u665a\u5b89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "#### kosaraju+\u94fe\u5f0f\u524d\u5411\u661f 16ms\n### \u63a8\u8350\u4e00\u4f4d\u5de8\u4f6c\u7684\u535a\u5ba2:\n[kosaraju](https://blog.csdn.net/u011589125/article/details/41593649)    [\u94fe\u5f0f\u524d\u5411\u661f](https://blog.csdn.net/Binary_Heap/article/details/78209086)\n\ndfs\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u6c42\u51fa\u62d3\u6251\u5e8f\uff0c\u7b2c\u4e8c\u6b21\u7528\u53cd\u56fe\u641c\uff0c\u641c\u5b8cdfs2\u4e00\u6b21\u5c31\u662f\u4e00\u4e2a\u5f3a\u8054\u901a\u5b50\u56fe\u3002\u6bcf\u6b21\u641c\u5b8c\u5c31\u5b58\u4e00\u4e0b\uff0c\u6c42\u51fa\u6700\u5927&&\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5f3a\u8054\u901a\u5b50\u56fe\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(m),16ms\u8f7b\u677eAC~\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct node{\n    int v,next;\n}edge[50001],edge2[50001];//\u56fe\u548c\u53cd\u56fe\nint head[50001],head2[50001],vis1[50001],vis2[50001],d[50001];//vis\u5f00\u4e24\u4e2a\u4e0d\u7528memset\u7701\u65f6\u95f4\nint ans1[50001],ans2[50001];//ans1\u5b58\u6700\u540e\u7b54\u6848\uff0cans2\u5b58\u641c\u5230\u7684\u5f3a\u8054\u901a\u5b50\u56fe\nint n,m,top1=0,top2=0,t=0,size1=1,size2=0;\nvoid add1(int from,int to){\n    edge[++top1].v=to;\n    edge[top1].next=head[from];\n    head[from]=top1;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\nvoid add2(int from,int to){\n    edge2[++top2].v=to;\n    edge2[top2].next=head2[from];\n    head2[from]=top2;\n}\nvoid dfs1(int num){\n    vis1[num]=1;\n    for(int i=head[num];i;i=edge[i].next){//\u904d\u5386\u56fe\n        int v=edge[i].v;\n        if(!vis1[v]){\n            dfs1(v);\n        }\n    }\n    d[++t]=num;//\u5b58\u62d3\u6251\u5e8f\n}\nvoid dfs2(int now){\n    vis2[now]=1;//\u5df2\u7ecf\u8bbf\u95ee\u8fc7\n    ans2[++size2]=now;//\u5b58\u7b54\u6848\n    for(int i=head2[now];i;i=edge2[i].next){\n        int v=edge2[i].v;\n        if(!vis2[v]){//\u82e5\u6ca1\u6709\u8bbf\u95ee\u8fc7\n            dfs2(v);//\u5f80\u4e0b\u641c\u7d22\n        }\n    }\n}\nvoid store(){//\u5c06ans2\u5b58\u5230ans1\u4e2d\n    size1=size2;\n    memset(ans1,0,sizeof(ans1));\n    for(int i=1;i<=size1;i++){\n        ans1[i]=ans2[i];\n    }\n    memset(ans2,0,sizeof(ans2));\n}\nvoid kosaraju(){\n    for(int i=1;i<=n;i++){\n        if(!vis1[i]) dfs1(i);\n    }\n    for(int i=n;i>=1;i--){//dfs1\u4e2d\u6700\u5148\u641c\u5230\u7684\u5b58\u5728\u6700\u540e\n        int now=d[i];\n        if(!vis2[now]){\n            size2=0;\n            dfs2(now);\n            if(size2>size1){//2\u6bd41\u5927\n                store();\n            }\n            else{\n                if(ans2[1]<ans1[1]&&size1==size2)\n                store();//\u5b57\u5178\u5e8f\u5c0f\n            }\n        }\n    }\n    cout<<size1<<endl;\n    sort(ans1+1,ans1+size1+1);\n    for(int i=1;i<=size1;i++){\n        cout<<ans1[i]<<' ';\n    }//\u8f93\u51fa\n    return;\n}\nint main(){\n    int a,b,t;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        cin>>a>>b>>t;\n        if(t==1){\n            add1(a,b);\n            add2(b,a);\n        }\n        else{\n            add1(a,b);\n            add1(b,a);\n            add2(a,b);\n            add2(b,a);\n        }\n    }\n    kosaraju();\n    return 0;\n}\n```\n\n###### ~~\u7528\u8fd9\u4e2a\u7b97\u6cd5\u7684\u539f\u56e0\u662f\u56e0\u4e3akosaraju\u542c\u8d77\u6765\u5f88\u62fd~~",
        "postTime": 1532344368,
        "uid": 48744,
        "name": "TLE\u81ea\u52a8\u673a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u88f8\u7684\u5f3a\u8fde\u901a\u3002\u4e8e\u662f\u5c31\u7528Tarjan\u8dd1\u4e86\u4e00\u904d\u3002\n\n\u5927\u5c0f\u6700\u5927\uff1f\u5b57\u5178\u5e8f\u6700\u5c0f\uff1f\u7531\u4e8e\u6bcf\u4e2a\u70b9\u7684\u7f16\u53f7\u4e0d\u76f8\u540c\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6700\u5c0f\u7684\u70b9\u7f16\u53f7\u6700\u5c0f\u5373\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\u4e8e\u662f\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7528set\u50a8\u5b58\uff0c\u7136\u540e\u4e71\u641e\u4e00\u901a\u3002\n\n\u4e8b\u5b9e\u4e0a\u5149\u53d6\u5b57\u5178\u5e8f\u6700\u5c0f\u5ffd\u7565\u5927\u5c0f\u6700\u5927\u90fd\u80fd\u62ff90\u52062333\n\n\u561b\u53ef\u80fd\u662f\u6570\u636e\u6c34\u5427\uff5e\n\nset\u81ea\u5e26\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u53ef\u80fd\u4f1a\u5728\u67d0\u4e9b\u65f6\u523b\u6d3e\u4e0a\u7528\u573a\uff0c\u6240\u4ee5\u6211\u89c9\u5f97\u8fd8\u662f\u5f97\u5584\u7528STL\uff5e\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=5e3+10,M=1e5+10;\nint h[N],to[M],W[M],nexp[M],p=1;\ninline void ins(int a,int b){\n    nexp[p]=h[a],h[a]=p,to[p]=b,p++;\n}\n\nset<int> scc[N]; // scc \u50a8\u5b58\nint cidx; // scc \u53f7\u7801\nint dfn[N],low[N],idx; // \u65f6\u95f4\u6233\u3001\u6700\u5c0f\u65f6\u95f4\u6233\u3001\u76ee\u524d\u65f6\u95f4\u6233\nint stk[N],top; // \u4e00\u4e2a\u6808\nbool instk[N]; // \u5728\u6808\u4e2d\nvoid Tarjan(int x){\n    dfn[x]=low[x]=++idx;\n    stk[top++]=x;\n    instk[x]=1;\n    for(int u=h[x];u;u=nexp[u])\n        if(!dfn[to[u]]){\n            Tarjan(to[u]);\n            low[x]=min(low[x],low[to[u]]);\n        }\n        else if(instk[to[u]])\n            low[x]=min(low[x],dfn[to[u]]);\n    if(dfn[x]==low[x]){\n        ++cidx;\n        do{\n            top--;\n            instk[stk[top]]=0;\n            scc[cidx].insert(stk[top]); // \u627e\u5230\u540e\u63d2\u5165\u5bf9\u5e94\u7684set\u4e2d\n        }while(stk[top] != x);\n    }\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    int n,m;\n    cin>>n>>m;\n    int u,v,c;\n    for(int i=0;i<m;i++){\n        cin>>u>>v>>c;\n        ins(u,v);\n        if(c==2) ins(v,u);\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i]) Tarjan(i);\n    int ans=1;\n    /* \u4e0b\u9762\u4e3aSTL\u4e71\u641e\u90e8\u5206... */\n    for(int i=2;i<=cidx;i++){\n        if( scc[i].size() > scc[ans].size() || ( scc[i].size() == scc[ans].size() && *(scc[i].begin()) < *(scc[ans].begin()) ) )\n            ans=i;\n    }\n    printf(\"%d\\n\", scc[ans].size());\n    for(auto it=scc[ans].begin(); it!=scc[ans].end(); it++){\n        printf(\"%d \",*it);\n    }\n    return 0;\n}\n```",
        "postTime": 1510059876,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "//\u697c\u4e0a\u8bf4\u7684\u5bf9\uff0c\u662ftarjan\u7684\u6a21\u677f\u9898\uff1b\u4f46\u4f3c\u4e4e\u5927\u5bb6\u5f88\u559c\u6b22\u7528\u94fe\u8868\uff0c\u7ffb\u4e86\u4e00\u4e0b\u9898\u89e3\u4e4b\u524d\u53ea\u6709\u4e00\u4e2a\u7528vector\u7684\uff0c\u5199\u7684\u6211\u6ca1\u770b\u61c2....\u81ea\u5df1\u6b7b\u78d5\u4e86\u4e00\u4e0b\u7136\u540e\u7528vector\u5199\u4e86\u4e00\u904da\u4e86\uff0c\u611f\u89c9\u5e94\u8be5\u6bd4\u697c\u4e0a\u7684vector\u8981\u597d\u660e\u767d\u4e00\u4e9b\n\n//\u6ca1\u7528\u5b57\u5178\u5e8f\u6392\u5e8f \u4f46\u8fd8\u662f\u8fc7\u4e86    \u770b\u4e86\u773c\u8ba8\u8bba\u597d\u50cf\u662f\u5728tarjan\u91cc\u9762\u5c31\u6392\u597d\u4e86\uff1f\u4e5f\u53ef\u80fd\u662f\u6570\u636e\u6c34\u4e86\u5427vv\n\n\n\n```cpp\n//\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxx=100001;\nint n,m,a,b,t,vis[maxx],pre[maxx],lowlink[maxx],dfs_clock,sccno[maxx],scc_cnt,num[maxx];\nstack<int>S;\nvector<int>road[maxx];\ninline void tarjan(int u) {//tarjan\u88f8\u7684\u6a21\u677f  \n    pre[u]=lowlink[u]=++dfs_clock;//pre[i] \u6700\u65e9\u8fdb\u5165\u7684\u65f6\u95f4\u6233   lowlink[i]i\u6240\u80fd\u5230\u8fbe\u7684\u6700\u5c0f\uff08\u8fdc\uff09\u65f6\u95f4\u6233 \n    vis[u]=1;//\u8bbf\u95ee\u8fc7 \n    S.push(u);//\u5165\u6808 \n    for(int i=0; i<road[u].size(); i++) {\n        int v=road[u][i];//\u8dd1u\u7684\u513f\u5b50 \n        if(!pre[v]) {\n            tarjan(v);\n            lowlink[u]=min(lowlink[u],lowlink[v]);\n        } else if(!sccno[v]) {//sccno[i]\u8868\u793ai\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u51fa\u6808 \n            lowlink[u]=min(lowlink[u],pre[v]);\n        }\n    }\n    if(lowlink[u]==pre[u]) {\n        scc_cnt++;//scc_cnt\u8868\u793a\u6709\u51e0\u4e2a\u8054\u901a\u5757 \n        for(;;) {\n            int x=S.top();\n            S.pop();\n            sccno[x]=scc_cnt;//\u5c06\u6bcf\u4e2a\u70b9\u52a0\u5230\u5bf9\u5e94\u8054\u901a\u5757\u4e0b \n            if(x==u)break;\n        }\n    }\n    return;\n}\nint main() {\n    cin>>n>>m;\n    for(int i=1; i<=m; i++) {\n        cin>>a>>b>>t;\n        road[a].push_back(b);\n        if(t==2)\n            road[b].push_back(a);\n    }\n    for(int i=1; i<=n; i++)\n        if(!vis[i])tarjan(i);\n    int tot=0,pos;\n    for(int i=1; i<=n; i++) {\n        num[sccno[i]]++;//\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u8054\u901a\u5757\u6709\u591a\u5c11\u4e2a\u513f\u5b50\uff08\u591a\u5c11\u5143\u7d20\uff09 \n    }\n    for(int i=1; i<=scc_cnt; i++)\n        if(num[i]>tot)tot=num[i],pos=i;//\u66f4\u65b0\u4e00\u4e0b\u5305\u542b\u6700\u591a\u7684\u6751\u5e84\u6570  \u540c\u65f6\u7528pos\u8bb0\u4e00\u4e0b\u662f\u7b2c\u51e0\u4e2a\u8054\u901a\u5757 \n    cout<<tot<<endl; \n    for(int i=1;i<=n;i++){\n        if(sccno[i]==pos)cout<<i<<\" \";//\u5982\u679c\u8fd9\u4e2a\u70b9\u5728\u5305\u542b\u6700\u591a\u6751\u5e84\u6570\u7684\u8054\u901a\u5757\u91cc\u9762 \u5c31\u8f93\u51fa \n    }\n    return 0;\n}\n```",
        "postTime": 1509327121,
        "uid": 55640,
        "name": "zzzyq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u6bd2\n\n\u9996\u5148\u8fd9\u662ftarjan\n\n\u5f88\u88f8\u5f88\u88f8\n\n\u628a\u7f29\u5230\u7684\u70b9\u653e\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\u5c31\u597d\n\n\n\u7136\u540e\u5c31\u662f\u6309\u5927\u5c0f\u5c31\u597d\u4e86\n\n\u5927\u5c0f\u4e00\u6837\u5c31\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\n\n\u7136\u540e\u5c31T\u4e86\n\n\u7136\u540e\u6211\u628a\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\u4e1c\u897f\u5907\u6ce8\u6389\n\n\u7136\u540e\u5c31A\u4e86\n\n\n\u5475\u5475\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#if 0\n```\nWriter: Goes && G.S.M.\nJust a game\n\nEnjoy it\n\n\n\n    \n```cpp\n#endif\ninline int read(){\n    char ch=getchar();int sign=0,sum=0;\n    while((ch!='-')&&(ch<'0'||ch>'9'))\n        ch=getchar();\n    if(ch=='-')    sign=1,ch=getchar();\n    while(ch<='9'&&ch>='0'){\n        sum*=10;sum+=ch-'0';ch=getchar();\n    }\n    if(sign==1)    return -sum;\n    else return sum;\n}\nint n,m;\nstruct ss{\n    int to,nex;\n}edge[50005];\nint head[5005],ecnt;\nvoid add(int x,int y){\n    edge[++ecnt]=(ss){y,head[x]};\n    head[x]=ecnt;\n}\nstruct node{\n    int sum,num[5005];\n    bool operator < (const node b)const {\n        for(int i=1;i<=sum;i++)\n            if(num[i]<b.num[i]) \n            return num[i]<b.num[i];\n    }\n    void gssort(){\n        sort(num+1,num+sum+1);\n    }\n    void gsout(){\n        printf(\"%d\\n\",sum);\n        for(int i=1;i<=sum;i++)\n            printf(\"%d \",num[i]);\n    }\n}group[5005];int tot;\nbool cmp(node a,node b){\n//    if(a.sum==b.sum) \n//        {a.gssort();b.gssort();return a<b;}\n    return a.sum>b.sum;\n}\nint dfn[5005],low[5005],ti;\nint stack[50005],top;bool inT[50005];\nvoid tarjan(int pos,int fa)\n{\n    dfn[pos]=low[pos]=++ti;\n    stack[++top]=pos;inT[pos]=true;\n    for(int i=head[pos];i;i=edge[i].nex)\n    if(!dfn[edge[i].to]){\n        tarjan(edge[i].to,pos);\n        low[pos]=min(low[pos],low[edge[i].to]);\n    }else if(inT[edge[i].to])\n    low[pos]=min(low[pos],dfn[edge[i].to]);\n    if(dfn[pos]==low[pos]){\n        tot++;inT[pos]=false;\n        while(stack[top+1]!=pos){\n            group[tot].sum++;\n```\ngroup[tot].num[group[tot].sum]\n    \n\n    \n```cpp\n                =stack[top];\n            inT[stack[top]]=false;\n            top--;\n        }\n        group[tot].gssort();\n    }\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int a=read(),b=read(),t=read();\n        if(t==2) add(b,a);\n        add(a,b);\n    }\n    for(int i=1;i<=n;i++)\n    if(!dfn[i]) tarjan(i,i);\n    sort(group+1,group+tot+1,cmp);\n    group[1].gssort();\n    group[1].gsout();\n    return 0;\n}\n\n```",
        "postTime": 1507900634,
        "uid": 38348,
        "name": "Goes",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    },
    {
        "content": "\u88f8\u7684tarjan\u6a21\u677f\u9898\uff0c\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u89c1\u6211\u7684\u535a\u5ba2<http://blog.csdn.net/no1\\_terminator/article/details/53173332>\n\n\u6ce8\u610f\u4e00\u4e2a\u5b57\u5178\u5e8f\u6bd4\u5927\u5c0f\u5c31\u884c\u4e86\uff0c\u4e0d\u52a0\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6ca1\u6709\u4e13\u95e8\u5751\u7684\u6570\u636e= =\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int M=101000;\nstruct Farm{\n    int to,next;\n}e[M];\nint n,m;\nint a[M],b[M],c[M],dfn[M],low[M];\nint stack[M],top=0,EdgeCnt=0,TIMECNT=0,ans=0;\nbool instack[M];\nvoid addedge(int u,int v){\n    int p=++EdgeCnt;\n    e[p].to=v;e[p].next=a[u];\n    a[u]=p;\n}\nvoid tarjan(int u){\n    dfn[u]=low[u]=++TIMECNT;\n    stack[++top]=u;instack[u]=true;\n    int p=a[u];\n    while (p){\n        int v=e[p].to;\n        if (!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }else if (instack[v])low[u]=min(low[u],dfn[v]);\n        p=e[p].next;\n    }\n    if (low[u]==dfn[u]){\n        int res=0,cnt=0;\n        while (stack[top]!=u && top>0){\n            instack[stack[top]]=false,res++,b[++cnt]=stack[top],top--;\n        }\n        res++;top--;instack[u]=false;b[++cnt]=u;\n        if (res>ans){\n            ans=res;\n            for (int i=1;i<=res;i++)c[i]=b[i];\n        }else if (res==ans){\n            bool f1=false,f2=false;\n            for (int i=1;i<=res;i++){\n                if (c[i]>b[i]){f1=true;break;}\n                if (c[i]<b[i]){f2=true;break;}\n            }\n            if (f1)for (int i=1;i<=res;i++)c[i]=b[i];\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++){\n        int opt,x,y;\n        scanf(\"%d%d%d\",&x,&y,&opt);\n        addedge(x,y);\n        if (opt==2)addedge(y,x);\n    }\n    for (int i=1;i<=n;i++)\n        if (!dfn[i])tarjan(i);\n    int x=n+1;\n    for (int i=1;i<=n;i++)\n        if (c[i]==0){x=i;break;}\n    sort(c+1,c+ans+1);\n    printf(\"%d\\n\",ans);\n    for (int i=1;i<=ans;i++)\n        printf(\"%d \",c[i]);\n    return 0;\n}\n```",
        "postTime": 1502124339,
        "uid": 48966,
        "name": "707001933K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1726 \u3010\u4e0a\u767d\u6cfd\u6167\u97f3\u3011"
    }
]