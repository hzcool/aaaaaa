[
    {
        "content": "\u4f5c\u4e3a\u4e00\u540d\u975e\u6b63\u5f0f\u849f\u84bb\uff0c\u51ed\u7740A\u6389\u8fd9\u9898\u5728\u5f31\u7701HB\u62ff\u4e86d1rank2\uff0c\u4e8e\u662f\u53d1\u7bc7\u9898\u89e3\u795d\u8d3a\u81ea\u5df1\u4eba\u751f\u9996\u6b21\u5c1d\u8bd5\u72b6\u538b\u4fbfAC\n\n\u753b\u56fe\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u6bcf\u884c\u7684\u68cb\u5b50\u6570\u662f\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\uff0c\u5373\u4e0a\u4e00\u884c\u7684\u68cb\u5b50\u6570\u4e00\u5b9a\u6bd4\u4e0b\u4e00\u884c\u591a\uff0c\u800c\u4e14\u6bcf\u4e00\u884c\u7684\u68cb\u5b50\u90fd\u662f\u4ece\u5de6\u5f80\u53f3\u90a3\u4e48\u591a\u4e2a\uff0c\u4e5f\u5c31\u662f\u8bf4\u786e\u5b9a\u4e86\u6bcf\u4e00\u884c\u7684\u68cb\u5b50\u6570\u5c31\u786e\u5b9a\u4e86\u6574\u4e2a\u5c40\u9762\uff0c\u6240\u4ee5\u5173\u952e\u5c31\u662f\u5982\u4f55\u7b80\u6d01\u5730\u8868\u793a\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u3002\n\n\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u60f3\u5230\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5199m\u4e2a0\uff0c\u7136\u540e\u770b\u6bcf\u4e00\u884c\uff0c\u6709\u51e0\u4e2a\u68cb\u5b50\u5c31\u5728\u7b2c\u51e0\u4e2a0\u540e\u9762\u63d2\u5165\u4e00\u4e2a1\n\ne.g.\n\nxxxxo\n\nxxooo\n\nxoooo\n\nxoooo\n\nooooo\n\n\u5c31\u662f1011010010\n\n\u7136\u540e\u8fd9\u73a9\u610f\u5c31\u662f\u6211\u4eec\u8981\u7684\u72b6\u6001\n\n\u90a3\u4e48\u8f6c\u79fb\u65b9\u7a0b\u5462\uff1f\u5176\u5b9e\u5f97\u51fa\u72b6\u6001\u7684\u8868\u793a\u65b9\u6cd5\u4e4b\u540e\u65b9\u7a0b\u5c31\u5f88\u597d\u5199\u4e86\uff0c\u5b9e\u73b0\u8d77\u6765\u7565\u590d\u6742\uff0c\u4f46\u60f3\u901a\u4e86\u4e5f\u4e0d\u96be\n\nab(u)\u8868\u793a\u72b6\u6001u\u7684\u5c40\u9762\u6709\u5947\u6570\u9897\u68cb\u5b50\u8fd8\u662f\u5076\u6570\u9897\u68cb\u5b50\uff0c\u5373\u4e0b\u4e00\u6b65\u8be5\u8c01\u4e0b\uff0c\u8ba1\u7b97\u7684\u65b9\u6cd5\u662f\u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u5411\u4e0b\u904d\u5386\uff0c\u7d2f\u8ba1\u6709\u5947\u6570\u4e2a0\u65f6\u904d\u5386\u52301\u4fbf\u628a\u8f93\u51fa\u53d6\u53cd\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```\nbool ab(int u)\n{\n    int i;\n    bool odd=false,out=false;\n    for (i=1<<(n+m-1);i>0;i>>=1)\n    {\n        if (i&u)\n        {\n            if (odd)\n            {\n                out=!out;\n            }\n        }\n        else\n        {\n            odd=!odd;\n        }\n    }\n    return out;\n}\n```\n\n\u5b58a\u548cb\u65f6a[i][j]=A[i][m+1-j]\u4f1a\u7a0d\u5fae\u65b9\u4fbf\u4e00\u4e9b\n\n\u7136\u540e\u5c31\u662f\u6700\u7ec8\u7684\u65b9\u7a0b\uff1af(i)=\u82e5ab(i)\u5219\u4e3amin\uff0c\u5426\u5219\u4e3amax{f(\u628a\u6bcf\u4e2a\u540e\u9762\u4e00\u4f4d\u975e1&&\u4e0d\u662f\u6700\u540e\u4e00\u4f4d\u76841\u5206\u522b\u5411\u540e\u79fb\u4e00\u4f4d)+ab(i)?(-b[\u9006\u6570\u7b2c\u51e0\u4e2a1\u540e\u79fb][\u79fb\u4e4b\u524d\u8fd9\u4e2a1\u540e\u9762\u6709\u51e0\u4e2a0]):a[\u9006\u6570\u7b2c\u51e0\u4e2a1\u540e\u79fb][\u79fb\u4e4b\u524d\u8fd9\u4e2a1\u540e\u9762\u6709\u51e0\u4e2a0]}\n\n\u8fd9\u4e2a\u65b9\u7a0b\u7684\u6587\u5b57\u770b\u8d77\u6765\u975e\u5e38\u590d\u6742\uff0c\u6240\u4ee5\u5efa\u8bae\u81ea\u884c\u7406\u89e3\u5e76\u5199\u51fa\u65b9\u7a0b\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u7684\u8bdd\u53ef\u4ee5\u7ed3\u5408\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n```\nfor (i=mini+1;i<=maxi;++i)\n    {\n        flag=false;\n        one=zero=0;\n        if (ab(i))\n        {\n            f[i]=0x7fffffff;\n            for (j=1;j<(1<<(n+m));j<<=1)\n            {\n                if (j&i)\n                {\n                    ++one;\n                    if (flag)\n                    {\n                        f[i]=min(f[i],f[i-(j>>1)]-b[one][zero]);\n                    }\n                    flag=false;\n                }\n                else\n                {\n                    ++zero;\n                    flag=true;\n                }\n            }\n        }\n        else\n        {\n            f[i]=-0x7fffffff;\n            for (j=1;j<(1<<(n+m));j<<=1)\n            {\n                if (j&i)\n                {\n                    ++one;\n                    if (flag)\n                    {\n                        f[i]=max(f[i],f[i-(j>>1)]+a[one][zero]);\n                    }\n                    flag=false;\n                }\n                else\n                {\n                    ++zero;\n                    flag=true;\n                }\n            }\n        }\n    }\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5c31\u4e0d\u7ed9\u51fa\u4e86\uff0c\u8fd8\u662f\u5efa\u8bae\u770b\u61c2\u72b6\u6001\u7684\u8868\u793a\u4e4b\u540e\u5269\u4f59\u90e8\u5206\u5168\u90e8\u81ea\u884c\u5199\u51fa",
        "postTime": 1523008721,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u540d\u6b63\u5f0f\u9009\u624b\u8868\u793a\u81ea\u5df1\u8fd9\u9053\u9898\u8003\u573a\u4e0a\u88ab\u540a\u6253\u4e86\u3002\u3002\u3002\u3002\n\n\u8003\u573a\u4e0a\u6240\u6709\u7684\u6280\u80fd\u5c31\u53ea\u5269\u4e0b\u66b4\u641c\u4e86\uff0c\u7136\u540e\u4e00\u53d1$\\alpha-\\beta$\u526a\u679d\u6df7\u4e8660\u5206\u8d70\u4eba\n\n%%%\u697c\u4e0b\u7684\u697c\u4e0b\u7684\u697c\u4e0b\u3002\u3002\u3002\u7684\u697c\u4e0b\uff0c\u7ffb\u4e86\u534a\u5929\u4f3c\u4e4e\u90fd\u662f\u54c8\u5e0c\u505a\u6cd5\uff0c\u90a3\u6211\u6765\u4e00\u53d1\u8f6e\u5ed3\u7ebf\u7684DP\u5427\n\n### \u8fdb\u5165\u6b63\u9898\n\n\u9996\u5148\uff0c\u7531\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\u80fd\u843d\u5b50\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0a\u9762\u548c\u5de6\u8fb9\u90fd\u6ca1\u6709\u7a7a\u4f4d\uff0c\u6839\u636e\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u7684\u4f20\u9012\u6027\uff0c\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u4f4d\u7f6e\u80fd\u843d\u5b50\uff0c\u5f53\u4e14\u4ec5\u5f53\u5de6\u4e0a\u89d2\u7684\u77e9\u5f62\u5185\u90e8\u4e5f\u53ea\u6709\u81ea\u5df1\u4e00\u4e2a\u7a7a\u4f4d\u3002\n\n\u90a3\u4e48\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u4efb\u4f55\u65f6\u5019\uff0c\u68cb\u76d8\u4e0a\u7684\u68cb\u5b50\u90fd\u662f\u4e00\u4e2a\u8fde\u7eed\u4e14\u5355\u8c03\u7684\u7684\u5de6\u4e0a\u4e09\u89d2\u5f62\uff0c\u6240\u6709\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8f6e\u5ed3\u7ebf\u6765\u8868\u793a\u4e09\u89d2\u5f62\u7684\u53f3\u4e0b\u8fb9\u754c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8868\u8fbe\u68cb\u76d8\u7684\u72b6\u6001\u4e86\n\n\u4e0d\u59a8\u7528 $1$ \u8868\u793a\u7ad6\u7740\u7684\u8f6e\u5ed3\u8fb9\uff0c$0$ \u8868\u793a\u6a2a\u7740\u7684\u8f6e\u5ed3\u8fb9\u3002    \n\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u4efb\u4f55\u4e00\u4e2a\u8f6e\u5ed3\u7ebf\u90fd\u53ef\u4ee5\u8868\u8fbe\u4e3a\u957f\u5ea6\u4e3a $n+m$\uff0c\u4e14\u62e5\u6709$n$\u4e2a$1$\uff0c$m$\u4e2a$0$ \u7684$01$\u4e32\n\n\u6bd4\u5982\u4e0b\u56fe\u4e2d\uff0c\u521d\u59cb\u72b6\u6001\u5c31\u662f $00011$\n\n![](https://cdn.luogu.com.cn/upload/pic/16877.png)\n\n\u663e\u7136\u7b2c\u4e00\u6b65\u68cb\u662f\u552f\u4e00\u7684\uff0c\u4e0b\u5b8c\u4ee5\u540e\u7684\u8f6e\u5ed3\u7ebf\u53ef\u4ee5\u8868\u793a\u4e3a $00101$\n\n\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u8d70\u7b2c\u4e00\u884c\u7b2c\u4e8c\u5217\uff0c\u90a3\u4e48\u72b6\u6001\u53ef\u4ee5\u8868\u793a\u4e3a $01001$\n\n\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u8d70\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\uff0c\u90a3\u4e48\u72b6\u6001\u53ef\u4ee5\u8868\u793a\u4e3a $00110$\n\n\u7136\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u72b6\u6001\u7684\u8f6c\u79fb\u5c31\u662f\u628a\u5176\u4e2d\u4e00\u4e2a $1$ \u5411\u5de6\u632a\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\n\n\u672c\u8d28\u5c31\u662f $01->10$\n\n\u6240\u6709\u627e\u5230\u8fd9\u4e9b\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u8f6c\u79fb\u5566\n\n\u7136\u540e\u53d1\u73b0\u8f6c\u79fb\u7684\u987a\u5e8f\u4e0d\u592a\u660e\u663e\u3002\u3002\u3002\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\u3002\u3002\n\n\u4ee4 $S$ \u8868\u793a\u4e00\u6761\u4ece\u5de6\u4e0b\u5230\u53f3\u4e0a\u7684\u8f6e\u5ed3\u7ebf\uff0c\u4ee4 $f[S]$ \u8868\u793a\u8fd9\u4e2a\u8f6e\u5ed3\u7ebf\u7684\u72b6\u6001\u8ddd\u79bb\u6e38\u620f\u7ed3\u675f\u8fd8\u80fd\u5f97\u591a\u5c11\u5206,\u53ef\u4ee5\u5f97\u5230\u8fb9\u754c\u6761\u4ef6 $f[11\\cdots1100\\cdots00] = 0$\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u4fbf\u662f $f[00\\cdots0011\\cdots11]$\n\n\u8f6c\u79fb\u7684\u65f6\u5019\u770b\u770b\u662f\u8c01\u5728\u4e0b\u68cb\uff0c\u987a\u7740\u8f6e\u5ed3\u7ebf\u5b9a\u4f4d\u5230\u5f53\u524d\u843d\u5b50\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u53d6\u4e2a $min,max$ \u5c31\u597d\u4e86\uff0c\u4ee3\u7801\u8f83\u77ed\uff0c\u590d\u6742\u5ea6\u662f $\\binom{n+m}{n}$ \u7684\uff0c\u6240\u4ee5\u8dd1\u7684\u6bd4\u8f83\u5feb\u3002\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read(int u = 0, char c = getchar(), bool f = false) {\n\tfor (;!isdigit(c); c = getchar()) f |= c == '-';\n\tfor (; isdigit(c); c = getchar()) u = (u << 1) + (u << 3) + c - '0';\n\treturn f ? -u : u;\n}\n\nconst int maxn = 10;\nconst int oo = 1e9 + 7;\n\nint a[maxn][maxn], b[maxn][maxn];\n\nint f[1 << (maxn << 1)];\n\nint dfs(int sta, bool who, int n, int m) {\n\tif (~f[sta]) return f[sta];\n\tf[sta] = who ? -oo : oo;\n\tint x = n, y = 0;\n\tfor (int i = 0; i < n + m - 1; i++) {\n\t\tif (sta >> i & 1) x--; else y++;\n\t\tif ((sta >> i & 3) != 1) continue;\n\t\tint nxt = sta ^ (3 << i);\n\t\tif (who) \n\t\t\tf[sta] = max(f[sta], dfs(nxt, who ^ 1, n, m) + a[x][y]);\n\t\telse \t\n\t\t\tf[sta] = min(f[sta], dfs(nxt, who ^ 1, n, m) - b[x][y]);\n\t}\t\n\treturn f[sta];\t\n\t\t\n}\n\nint main() {\n\tint n = read(), m = read(); \n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\ta[i][j] = read();\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tb[i][j] = read();\n\tmemset(f, 0xff, sizeof(f));\n\tf[((1 << n) - 1) << m] = 0;\n\tcout << dfs((1 << n) - 1, 1, n, m) << endl;\n}\n```\n### UPD:\n\u5988\u5440\u4ee3\u7801\u51fa\u9505\u4e86\u3002\u3002\u3002\u62ff $-1$ \u8868\u793a\u6ca1\u6709\u641c\u7d22\u8fc7\u4f3c\u4e4e\u662f\u9519\u7684\u3002\u3002\u3002\u4e0d\u7ba1\u5566\u3002\u3002\u3002\u6570\u636e\u6c34\u3002\u3002\u3002\u5c31\u8fc7\u4e86\u3002\u3002\u3002\n\u5fc3\u75bc\u8003\u573a\u4f7f\u7528 $next$ \u800c $CE$ \u7684\u540c\u5b66\u4eec\u3002\u3002\u3002\n\n\n",
        "postTime": 1523240762,
        "uid": 29674,
        "name": "Anoxiacxy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u663e\u7136\u653e\u4e0b\u7684\u68cb\u5b50\u6784\u6210\u4e00\u4e2a\u9636\u68af\u578b\u3002\n\n\u6211\u4eec\u7206\u641c\u4e00\u53d1\u72b6\u6001\u91cf\uff0c\u53d1\u73b0\u53ea\u670935\u4e07\u591a\u79cd\uff0c\u8fd9\u4e0d\u968f\u4fbf\u505a\uff1f\n\n\u7136\u540e\u5728\u7528map\u8bb0\u5f55\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\u4e00\u53d1min-max\u5bf9\u6297\u641c\u7d22\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#define debug cout\ntypedef long long int lli;\nusing namespace std;\nconst int maxn=15,base=12;\nconst int inf=0x3f3f3f3f;\n\nmap<lli,int> mp;\nint a[maxn][maxn],b[maxn][maxn];\nint hei[maxn]; // hei[0] = n .\nint n,m;\n\ninline lli hsh() {\n\tlli ret = 0;\n\tfor(int i=1;i<=n;i++) ret = ret * base + hei[i];\n\treturn ret;\n}\ninline void unzip(lli t) {\n\tfor(int i=n;i;i--) hei[i] = t % base , t /= base;\n}\ninline int getnxt() {\n\tint ret = 0;\n\tfor(int i=1;i<=n;i++) ret += hei[i];\n\treturn ret & 1; // 0 means max , 1 means min .\n}\ninline int dfs(lli sta) {\n\tif( mp.find(sta) != mp.end() ) return mp[sta];\n\tunzip(sta);\n\tint tpe = getnxt() , ret = tpe ? inf : -inf;\n\tfor(int i=1;i<=n;i++)\n\t\tif( hei[i-1] > hei[i] ) {\n\t\t\t++hei[i];\n\t\t\tlli h = hsh();\n\t\t\tif( !tpe ) ret = max( ret , dfs(h) + a[i][hei[i]] );\n\t\t\telse ret = min( ret , dfs(h) - b[i][hei[i]] );\n\t\t\t--hei[i];\n\t\t}\n\treturn mp[sta] = ret;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m) , hei[0] = m;\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf(\"%d\",a[i]+j);\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf(\"%d\",b[i]+j);\n\tfor(int i=1;i<=n;i++) hei[i] = m;\n\tlli full = hsh(); mp[full] = 0;\n\tdfs(0);\n\tprintf(\"%d\\n\",mp[0]);\n\treturn 0;\n}\n```",
        "postTime": 1523011238,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u7701\u9009\u7684\u65f6\u5019\u60f3\u5230\u4e86\u600e\u4e48\u538b\u72b6\u6001\u5374\u4e0d\u4f1a\u540e\u8fb9\u7684dp\n\n~~\u6700\u540e\u8fb9\u7684\u65b9\u5411\u5168\u90e8\u8fde\u53cd\u5bfc\u81f4\u53ea\u670920pts\u8fde\u66b4\u529b\u90fd\u4e0d\u5982~~\n\n# \u672c\u9898\u9898\u89e3\n\n\u9996\u5148\u5148\u9605\u8bfb\u4e00\u4e0b\u9898\u9762\n\n\u5bf9\u4e8e\u843d\u5b50\u7684\u9650\u5236\u6761\u4ef6\u662f\uff0c\u4e0a\u65b9\u548c\u5de6\u65b9\u7684\u683c\u5b50\u8981\u4e48\u662f\u68cb\u5b50\u8981\u4e48\u662f\u8fb9\u754c\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u4e2a\u68cb\u5b50\u60f3\u8981\u5b58\u5728\u7684\u6761\u4ef6\u662f\u4e0a\u65b9\u548c\u5de6\u65b9\u7684\u6240\u6709\u683c\u5b50\u5168\u90e8\u88ab\u68cb\u5b50\u586b\u6ee1\n\n**\u6240\u4ee5\u4efb\u610f\u65f6\u523b\uff0c\u68cb\u76d8\u4e0a\u7684\u68cb\u5b50\u6784\u6210\u4e00\u4e2a\u952f\u9f7f\u5f62**\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c3d\u7ba1\u68cb\u76d8\u4e0a\u7684\u68cb\u5b50\u4e2a\u6570\u9ad8\u8fbe100\u4e2a\n\n**\u4f46\u662f\u952f\u9f7f\u5f62\u56fe\u5f62\u8f6e\u5ed3\u7ebf\u7684\u957f\u5ea6\u6700\u957f\u4e0d\u8fc7n+m-1**\n\n\u56e0\u6b64\u4e00\u5b9a\u662f\u8981\u5728\u8f6e\u5ed3\u7ebf\u4e0a\u505a\u4e00\u4e9b\u624b\u811a\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5728$2^{n+m-1}$\u7684\u4fe1\u606f\u91cf\u5185\u63cf\u8ff0\u8fd9\u4e2a\u8f6e\u5ed3\u7ebf\n\n\u7136\u540e\u4e00\u79cd\u53ef\u884c\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e00\u884c\u6709\u591a\u5c11\u4e2a\u683c\u5b50\uff0c\u7528map\u5b58\u4e0b\u6765\uff0c\u8fd9\u6837\u7684\u8bdd\u6700\u5927\u503c\u662f$10^{10}$\u53ef\u4ee5\u7528longlong\u5b58\u4e0b\u53bb\uff0c\u7136\u540e\u51ed\u501f\u6bd4\u6b63\u89e3\u591a\u4e2alog\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\n\n\u4f46\u662f\u8fd9\u6837\u538b\u72b6\u6001\u592a\u66b4\u529b\u4e86\u2026\u2026\u6211\u4eec\u9700\u8981\u60f3\u4e00\u4e9b\u4f18\u96c5\u7684\u529e\u6cd5\n\n\u53d1\u73b0\u6211\u4eec\u7684\u8f6e\u5ed3\u7ebf\u662f\u8054\u901a\u7684\uff0c**\u6240\u4ee5\u4e00\u4e2a\u8f6e\u5ed3\u7ebf\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u8def\u5f84**\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e\"\u8def\u6807\"\u7684\u65b9\u6cd5\u63cf\u8ff0\u4e00\u4e2a\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4\u7528\u7c7b\u4f3c\u4e8e\u201c\u4e0b\u4e00\u6b65\u8d70\u5230\u54ea\u91cc+\u8d77\u59cb\u70b9\u201d\u7684\u65b9\u6cd5\u6765\u544a\u8bc9\u6211\u4eec\u4e00\u6761\u8def\u5f84\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u4f7f\u7528$dp_{i,j}$\u6765\u63cf\u8ff0\u4e00\u4e2a\u8f6e\u5ed3\u7ebf\uff0ci\u8868\u793a\u7b2c\u4e00\u884c\u6240\u6709\u68cb\u5b50\u4e2d\u6700\u9760\u53f3\u7684\u68cb\u5b50\u7684\u5217\u53f7\uff0cj\u662f\u4e00\u4e2a\u5728\u4e8c\u8fdb\u5236\u4e0b\u6709\u610f\u4e49\u7684\u6570\uff0c\u5982\u679cj\u7684\u7b2cp\u4f4d\u662f0\uff0c\u90a3\u4e48\u6211\u4eec\u4ecei\u51fa\u53d1\uff0c\u7b2cp\u6b65\u5411\u5de6\u8d70\uff0c\u5982\u679c\u4e3a1\uff0c\u7b2cp\u6b65\u5411\u4e0b\u8d70\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u70b9i\u51fa\u53d1\uff0c\u8d70\u51fa\u8fd9\u6761\u8f6e\u5ed3\u7ebf(\u6216\u8005\u8bf4\u662f\u8def\u5f84)\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u7ec8\u4e8e\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e2a\u68cb\u76d8\u4e86\u3002\n\n\u4e0b\u9762\u662f\u535a\u5f08\u8bbadp\u7684\u95ee\u9898\n\n\u5927\u6982\u7684\u601d\u8def\u5c31\u662f\u5047\u88c5\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u770b\u5230\u7ed3\u5c40\uff0c\u7136\u540e\u9009\u62e9\u5bf9\u81ea\u5df1\u6700\u6709\u5229\u7684\u72b6\u6001\n\n\u4f46\u662f\u6211\u4eec\u5176\u5b9e\u6ca1\u529e\u6cd5\u770b\u5230\u7ed3\u5c40\uff0c\u6240\u4ee5\u6211\u4eec\u5012\u7740\u770b\uff0c\u663e\u7136\u68cb\u76d8\u88ab\u5e03\u6ee1\u7684\u72b6\u6001\u4e0b\u6ca1\u6709\u4eba\u53ef\u4ee5\u83b7\u5f97\u65b0\u7684\u5206\u6570\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u7528$dp_{i,j}$\u8868\u793a\u4ecei\uff0cj\u8fd9\u4e2a\u72b6\u6001\u5411\u540e\u63a8\u6f14\uff0c\u53cc\u65b9\u90fd\u4f7f\u7528\u6700\u4f18\u7b56\u7565\u53ef\u4ee5\u5f97\u5230\u7684\u5206\u6570\u5dee\uff0c\u5c31\u53ef\u4ee5\u8d77\u5230\u201c\u770b\u5230\u7ed3\u5c40\u7684\u6548\u679c\u201d\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u4e2a\u5c40\u9762\u662f\u5148\u624b\u4e0b\u5b8c\u4ee5\u540e\u5f62\u6210\u7684\uff0c\u90a3\u4e48\u5982\u4f55\u8fd9\u4e2a\u5c40\u9762\u5982\u4f55\u8f6c\u79fb\u7684\u4e3b\u52a8\u6743\u663e\u7136\u662f\u6525\u5728\u540e\u624b\u7684\u624b\u91cc\uff0c\u6240\u4ee5\u6b64\u65f6\u8fd9\u4e2adp\u503c\u5e94\u8be5\u7531\u6240\u6709\u540e\u7ee7\u72b6\u6001\u7684\u76f8\u5bf9\u4e8e\u5148\u624b\u6700\u52a3\u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u540e\u7ee7\u72b6\u6001\u53d6\u4e2amin\n\n\u540c\u7406\uff0c\u5982\u679c\u662f\u540e\u624b\u7684\u8bdd\uff0cdp\u503c\u5c31\u5e94\u8be5\u662f\u5bf9\u4e8e\u540e\u624b\u6700\u52a3\u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u540e\u7ee7\u72b6\u6001\u53d6\u4e2amax\n\n~~(\u5982\u679c\u5b9e\u5728\u5206\u4e0d\u6e05\u695a\u7684\u8bdd\u53ef\u4ee5minmax\u90fd\u8bd5\u4e00\u904d\uff0c\u54ea\u4e2a\u8fc7\u4e86\u6837\u4f8b\u5c31\u9009\u54ea\u4e2a)~~\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff0c\u600e\u4e48\u8f6c\u79fb\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u7b2c\u4e00\u662f\u53ef\u4ee5\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u5b58\u5728\u8fed\u4ee3\u89e3\u6cd5\u7684\n\n\u53d1\u73b0\u5404\u4e2a\u72b6\u6001\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\uff0c\u5982\u679c\u628a\u72b6\u6001\u770b\u4f5c\u70b9\uff0c\u8f6c\u79fb\u5173\u7cfb\u770b\u4f5c\u8fb9\uff0c\u90a3\u4e48\u6574\u5f20\u56fe\u662f\u4e00\u5f20DAG\u6211\u4eec\u7684\u8f6c\u79fb\u987a\u5e8f\u5176\u5b9e\u662f\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u72b6\u6001tpsort\u4e00\u904d\u65e0\u8111\u8f6c\u79fb\u5373\u53ef\n\n\u53e6\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u5982\u4f55\u751f\u6210\u540e\u7ee7\u72b6\u6001?\n\n\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u72b6\u6001\u628a\u8fd9\u4e2a\u8f6e\u5ed3\u7ebf\u8d70\u51fa\u6765\uff0c\u7136\u540e\u5982\u679c\u5b58\u5728\u4e00\u4e2aL\u5f62\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6389\u4e00\u8fd9\u4e2aL\u5f62\u7684\u5c16\u4ece\u800c\u628a\u8fd9\u4e2aL\u5f62\u53d8\u6210\u4e00\u4e2a\u5012L\u5f62\uff0c\u7136\u540e\u5c31\u662f\u628a\u76f8\u90bb\u4e24\u4e2a\u8def\u6807\u53d6\u53cd\u4e00\u4e0b\n\u5177\u4f53\u5b9e\u73b0\u4e00\u4e0b\u5c31\u662f\u5f02\u6216\u4e0a\u4e00\u4e2a3<<\u51e0\u4f4d\u5c31\u884c\u4e86\n\n\u5b9e\u5728\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u4e0b\u56fe\uff0c\u601d\u8def\u5c31\u662f\u901a\u8fc7\u64a4\u8d70\u4e00\u4e2a\u68cb\u5b50\u7136\u540e\u751f\u6210\u540e\u7ee7\u72b6\u6001\n\u7136\u540e\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\u5012\u4e00\u5012\u5c31\u884c\u4e86\n\n\u8bb0\u5f97\u7279\u5224\u7b2c\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u70b9\u5e76\u4e0d\u5b58\u5728L\u5f62\u7684\u7ed3\u6784\u3002\n\n\u53e6\u5916\u5982\u679c\u89c9\u5f97\u8c03\u8bd5\u9ebb\u70e6\u7684\u8bdd\u53ef\u4ee5\u5199\u4e00\u4e2a\u6253\u5370\u51fd\u6570\u76f4\u63a5\u4ee5\u5b57\u7b26\u753b\u7684\u5f62\u5f0f\u6253\u5370\u51fa\u8f6e\u5ed3\u7ebf\u65b9\u4fbf\u8c03\u8bd5\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;const int N=20;const int M=524300;\nint dp[N][M];int d[N][M];int up;int val[2][N][N];int n;int m;\nstruct data{int st;int nw;};queue <data> q;int t[N][M];char mp[N][N];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);t[m][(1<<(n-1))-1]=(n*m+1)%2;//\u8bb0\u5f97\u5904\u7406\u51fa\u6765\u6bcf\u4e2a\u72b6\u6001\u662f\u5148\u624b\u8fd8\u662f\u540e\u624b \n\tfor(int i=1;i<=n;i++){for(int j=1;j<=m;j++){scanf(\"%d\",&val[0][i][j]);}} \n\tfor(int i=1;i<=n;i++){for(int j=1;j<=m;j++){scanf(\"%d\",&val[1][i][j]);}}\n\tfor(q.push((data){m,(1<<(n-1))-1});!q.empty();q.pop())//\u5148\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u989d\u5ea6\u6570 \n\t{\n\t\tint st=q.front().st;int nw=q.front().nw;int px=1;int py=st;int ns=nw>>1;\n\t\tif((nw&1)==0&&st!=1)//\u7279\u5224\u7b2c1\u4e2a\u70b9 \n\t\t{\n\t\t\td[st-1][ns]++;t[st-1][ns]=t[st][nw]^1;\n\t\t\tif(d[st-1][ns]==1){q.push((data){st-1,ns});}\n\t\t}\n\t\tfor(int p=nw,i=0;px<n&&py>=1;p>>=1,i++)//\u751f\u6210\u540e\u7ee7\u72b6\u6001 \n\t\t{\n\t\t\tif((p&1)==1&&((p>>1)&1)==0)\n\t\t\t{\n\t\t\t\tns=py==1?nw^(1<<i):ns=nw^(3<<i);\n\t\t\t\td[st][ns]++;t[st][ns]=t[st][nw]^1;\n\t\t\t\tif(d[st][ns]==1){q.push((data){st,ns});}\n\t\t\t}if(p&1){px++;}else {py--;}\n\t\t}dp[st][nw]=t[st][nw]?-0x3f3f3f3f:0x3f3f3f3f;//\u7136\u540e\u8d4b\u4e2a\u521d\u503c \n\t}dp[m][(1<<(n-1))-1]=0;\n\tfor(q.push((data){m,(1<<(n-1))-1});!q.empty();q.pop())//\u6309\u7167\u62d3\u6251\u5e8fdp \n\t{\n\t\tint st=q.front().st;int nw=q.front().nw;int px=1;int py=st;int ns=nw>>1;\n\t\tif(t[st][nw])//\u5982\u679c\u8fd9\u4e2a\u5c40\u9762\u7531\u540e\u624b\u843d\u5b50\u5f62\u6210 \n\t\t{\n\t\t\tif((nw&1)==0&&st!=1)\n\t\t\t{\n\t\t\t\td[st-1][ns]--;\n\t\t\t\tif(d[st-1][ns]==0){q.push((data){st-1,ns});}\n\t\t\t\tdp[st-1][ns]=min(dp[st-1][ns],dp[st][nw]-val[1][1][st]);\n\t\t\t}\n\t\t\tfor(int p=nw,i=0;px<n&&py>=1;p>>=1,i++)//\u5177\u4f53\u6765\u8bb2\u6211\u4eec\u770b\u8fd9\u4e2a\u70b9\u4e0b\u65b9\u7684\u70b9\u662f\u5426\u53ef\u4ee5\u5220\u6389 \n\t\t\t{\n\t\t\t\tif(p&1==1&&((p>>1)&1)==0)\n\t\t\t\t{\n\t\t\t\t\tns=py==1?nw^(1<<i):ns=nw^(3<<i);//\u989d\u8981\u7279\u5224\u4e0b\u8fb9\u754c\u60c5\u51b5\u4ee5\u514d\u628a\u6700\u540e\u4e00\u4e2a\u4f4d\u53d8\u62101\u5bfc\u81f4\u8d8a\u754c \n\t\t\t\t\td[st][ns]--;if(d[st][ns]==0){q.push((data){st,ns});}\n\t\t\t\t\tdp[st][ns]=min(dp[st][ns],dp[st][nw]-val[1][px+1][py]);\n\t\t\t\t}if(p&1){px++;}else {py--;}//\u7136\u540e\u6309\u7167\u8def\u6807\u79fb\u52a8\u6307\u9488 \n\t\t\t}\n\t\t}\n\t\telse//\u7136\u540e\u540c\u7406\u7684 \n\t\t{\n\t\t\tif((nw&1)==0&&st!=1)\n\t\t\t{\n\t\t\t\td[st-1][ns]--;if(d[st-1][ns]==0){q.push((data){st-1,ns});}\n\t\t\t\tdp[st-1][ns]=max(dp[st-1][ns],dp[st][nw]+val[0][1][st]);\n\t\t\t}\n\t\t\tfor(int p=nw,i=0;px<n&&py>=1;p>>=1,i++)\n\t\t\t{\n\t\t\t\tif(p&1==1&&((p>>1)&1)==0)\n\t\t\t\t{\n\t\t\t\t\tns=py==1?nw^(1<<i):ns=nw^(3<<i);\n\t\t\t\t\td[st][ns]--;if(d[st][ns]==0){q.push((data){st,ns});}\n\t\t\t\t\tdp[st][ns]=max(dp[st][ns],dp[st][nw]+val[0][px+1][py]);\n\t\t\t\t}if(p&1){px++;}else {py--;}\n\t\t\t}\n\t\t}\n\t}printf(\"%d\",dp[1][0]+val[0][1][1]);return 0;//\u6700\u540e\u522b\u5fd8\u4e86\u52a0\u4e0a\u5148\u624b\u6700\u65e9\u843d\u7684\u5b50 \n}\n```\n\n\n",
        "postTime": 1523268925,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u79cd\u535a\u5f08\u8bba\u7684\u9898\uff0c\u57fa\u672c\u4e0a\u7406\u89e3\u5c31\u80fd\u60f3\u5230\u4e86\u628a\u72b6\u6001\u538b\u51fa\u6765\uff0c\u7136\u540e\u505a\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\n\n\u8fd9\u4e2a\u9898\u76f4\u63a5dp\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5b58\u4e00\u4e0b\u6bcf\u884c\u90fd\u94fa\u5230\u4e86\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u529e\u6cd5\u7684\u590d\u6742\u5ea6O($n^m$)\u7684,\u901a\u8fc7\u590d\u6742\u7684\u6570\u636e\u5206\u6cbb\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f97\u523080\u5206\u7684\u597d\u6210\u7ee9\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u6b63\u89e3\uff0c\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u8fd9\u4e2a\u9898\u6240\u6709\u6709\u7528\u7684\u60c5\u51b5\u90fd\u4f1a\u5448\u4e00\u4e2a\u952f\u9f7f\u72b6\uff0c\u8fd9\u4e2a\u611f\u6027\u5730\u60f3\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\u3002\u6240\u4ee5\u8fd9\u4e2a\u9898\u6709\u7528\u7684\u60c5\u51b5\u6570\u5f88\u5c11,\u53ea\u6709$C^{n}_{n + m}$ \u79cd\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u952f\u9f7f\u72b6\u7684\u56fe\u5f62\uff0c\u76f8\u5f53\u4e8e\u4f60\u5f80\u53f3\u8d70```n```\u6b65\uff0c\u518d\u5f80\u4e0b\u8d70```m```\u6b65, \u76f8\u5f53\u4e8e\u4e00\u5171\u6709```n + m```\u4e2a\u4f4d\u7f6e\uff0c\u5f80\u91cc\u653e```n```\u4e2a\u4e1c\u897f\uff0c\u6240\u4ee5\u5c31\u662f\n$C^{n}_{n + m}$ \u79cd\u4e86\u3002\n\n$C^{10}_{20}$ = ```184756```\u202c\u79cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u66b4\u529b11\u8fdb\u5236\u538b\u4f4d\uff0c\u7528map\u76f4\u63a5\u5b58\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u662fO(```(n + log184756) * 184756```)\u3002\n\n\u9700\u8981\u63d0\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f$11^{10}$\u662f\u7206```int```\u7684\uff0c\u9700\u8981\u5f00\u4e00\u4e0b```long long```\uff0c\u5426\u5219\u5c31\u4f1a\u7384\u5b66TLE\u3002\n\n\u826f\u5fc3\u7701\u9009\u9898\uff0c\u4ee3\u7801\u51e0\u4e4e\u65e0\u7ec6\u8282\uff0c\u8fd9\u4e2a\u9898\u5176\u5b9e\u653e\u5230```noip```\u63d0\u9ad8\u4e5f\u4e0d\u4e3a\u8fc7\u4e86\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define inf 2003518617\n#define int long long\n#define For(i, j, n) for(register int i = j ; i <= n ; ++i)\nint n, m, ed, a[12][12], b[12][12];\nmap<int, int>ans, vis;\n\ninline int dfs(int x, int w){\n\tif(x == ed) return 0;\n\tif(vis[x] == 1) return ans[x];\n\tint po = 1, sum = w ? inf : -inf, tmp = x, c[12];\n\tvis[x] = 1, c[0] = inf;\n\tFor(i, 1, n) c[i] = tmp % 11, tmp /= 11;\n\tif(w){\n\t\tFor(i, 1, n){ \n\t\t\tif(c[i] < min(c[i - 1], m)) sum = min(sum, dfs(x + po, w ^ 1) - b[i][c[i] + 1]);\n\t\t\tpo *= 11;\n\t\t} \n\t}\n\telse{\n\t\tFor(i, 1, n){\n\t\t\tif(c[i] < min(c[i - 1], m)) sum = max(sum, dfs(x + po, w ^ 1) + a[i][c[i] + 1]);\t\n\t\t\tpo *= 11;\n\t\t}\n\t} \n\treturn ans[x] = sum;\n}\n\nsigned main(){\n\tscanf(\"%lld %lld\", &n, &m);\n\tFor(i, 1, n) For(j, 1, m) scanf(\"%lld\", &a[i][j]);\n\tFor(i, 1, n) For(j, 1, m) scanf(\"%lld\", &b[i][j]);\n\tFor(i, 1, n) ed = ed * 11 + m;\n\tprintf(\"%lld\", dfs(0, 0)); \n\treturn 0;\n}\n```",
        "postTime": 1585190438,
        "uid": 163980,
        "name": "\u884c\u541f\u5578\u4e5d\u5dde",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10217249.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P4363)\n\n\u8fd9\u9053\u9898\u73c2\u4ee5\u8f6e\u5ed3\u7ebfdp\u89e3\u51b3\n\n\u7ecf\u8fc7\u63a8\u5bfc\uff0c\u6211\u4eec\u73c2\u4ee5\u53d1\u73b0\u4e0b\u4e00\u884c\u7684\u68cb\u5b50\u6bd4\u4e0a\u4e00\u884c\u7684\u68cb\u5b50\u5c11\uff08\u6216\u7b49\u4e8e\uff09\uff0c\u800c\u4e14\u6bcf\u4e00\u884c\u4e2d\u7684\u68cb\u5b50\u90fd\u662f\u4ece\u5de6\u5411\u53f3\u4f9d\u6b21\u6392\u5217\uff08\u4ece\u5934\u5f00\u59cb\uff0c\u4e2d\u95f4\u6ca1\u6709\u7a7a\u9699\uff09\n\n\u6240\u4ee5\u6bcf\u4e0b\u5b8c\u4e00\u6b65\u68cb\uff0c\u68cb\u76d8\u7684\u4e00\u90e8\u5206\u662f\u6709\u68cb\u5b50\u7684\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u6ca1\u68cb\u5b50\u7684\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u73c2\u4ee5\u7528\u4e00\u6761\u8f6e\u5ed3\u7ebf\u6765\u8868\u793a\u6709\u68cb\u5b50\u7684\u90e8\u5206\u548c\u6ca1\u68cb\u5b50\u7684\u90e8\u5206\u7684\u5206\u754c\u7ebf\n\n\u6211\u4eec\u73c2\u4ee5\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u8f6e\u5ed3\u7ebf\uff0c\u957f$n+m$\u4f4d\uff0c\u542b\u6709$n$\u4e2a$1$\u548c$m$\u4e2a$0$\uff0c\u8f6e\u5ed3\u7ebf\u4ece\u53f3\u4e0a\u8d70\u5230\u5de6\u4e0b\uff0c\u4e8c\u8fdb\u5236\u4e2d\u4e00\u4f4d$1$\u8868\u793a\u5411\u4e0b$1$\u683c\uff0c$0$\u8868\u793a\u5411\u5de6$1$\u683c\n\n\u518d\u7ecf\u8fc7\u63a8\u5bfc\uff0c\u73c2\u4ee5\u53d1\u73b0\u6bcf\u591a\u4e0b\u4e00\u6b65\u68cb\uff0c\u8f6e\u5ed3\u7ebf\u4e2d\u7684\u4e00\u4e2a$1$\u5c31\u4f1a\u5411\u524d\u79fb\u4e00\u4f4d\n\n\u6709\u4e86\u8fd9\u4e9b\u6211\u4eec\u5c31\u73c2\u4ee5\u5f00\u59cb\u8bbe\u8ba1\u65b9\u7a0b\uff0c\u8fdb\u884c\u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u6211\u4eec\u8bbe$L$\u4e3a\u4e00\u6761\u8f6e\u5ed3\u7ebf\uff0c\u7528$f[L]$\u8868\u793a\u8fd9\u4e2a\u8f6e\u5ed3\u7ebf\u8ddd\u79bb\u6e38\u620f\u7ed3\u675f\u83f2\u83f2\u8fd8\u80fd\u6bd4\u725b\u725b\u591a\u591a\u5c11\u5206\n\n\u6240\u4ee5\u8fb9\u754c\u6761\u4ef6\u5c31\u662f$f[((1<<n)-1)<<m]$\uff0c\u6700\u7ec8\u7b54\u6848\u4fbf\u662f$f[(1<<n)-1]$\n\n\u8f6c\u79fb\u7b54\u6848\u65f6\uff0c\u987a\u7740\u8f6e\u5ed3\u7ebf\u5bfb\u627e\u73c2\u4ee5\u843d\u5b50\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6839\u636e\u662f\u8c01\u4e0b\u7684\u6bd4$Min$\u6216$Max$\u5c31\u884c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(\\frac{(n+m)!}{n!m!})$\n\n### \u5b8c\u6574\u4ee3\u7801(\u4ee3\u7801\u4e0b\u65b9\u6709\u4e00\u4e9b\u5bf9\u4ee3\u7801\u4e2d\u4f4d\u8fd0\u7b97\u7684\u89e3\u91ca)\n\n```cpp\n#include <bits/stdc++.h>\n#define N 10\n#define inf (1<<30)\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf; \n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++; \n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline int Max(register int x,register int y)\n{\n\treturn x>y?x:y;\n}\ninline int Min(register int x,register int y)\n{\n\treturn x<y?x:y;\n}\nint n,m;\nint a[N][N],b[N][N];\nint f[1<<(N<<1)];\nbool vis[1<<(N<<1)];\ninline int dfs(register int now,register int who)\n{\n\tif(vis[now])\n\t\treturn f[now];\n\tf[now]=who?-inf:inf;\n\tint x=n,y=0;\n\tfor(register int i=0;i<n+m-1;++i)\n\t{\n\t\tif(now>>i&1)\n\t\t\t--x;\n\t\telse\n\t\t\t++y;\n\t\tif((now>>i&3)!=1)\n\t\t\tcontinue;\n\t\tint nxt=now^(3<<i);\n\t\tif(who)\n\t\t\tf[now]=Max(f[now],dfs(nxt,who^1)+a[x][y]);\n\t\telse\n\t\t\tf[now]=Min(f[now],dfs(nxt,who^1)-b[x][y]);\n\t}\n\tvis[now]=true;\n\treturn f[now];\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=0;i<n;++i)\n\t\tfor(register int j=0;j<m;++j)\n\t\t\ta[i][j]=read();\n\tfor(register int i=0;i<n;++i)\n\t\tfor(register int j=0;j<m;++j)\n\t\t\tb[i][j]=read();\n\tvis[((1<<n)-1)<<m]=true;\n\twrite(dfs((1<<n)-1,1));\n\treturn 0;\n}\n```\n\n\u5173\u4e8e\u4f4d\u8fd0\u7b97\u7684\u89e3\u91ca\n\n1.\n\n```cpp\n    if(now>>i&1)\n        --x;\n    else\n        ++y;\n```\n\n\u8fd9\u5b9e\u9645\u5c31\u662f\u626b\u63cf\u8f6e\u5ed3\u7ebf\u7684\u8fc7\u7a0b\uff0c\u5148\u5de6\u79fb$i$\u4f4d\uff0c\u4f7f\u5f97\u5012\u6570\u7b2c$i+1$\u4f4d\u5728\u6700\u540e\uff0c\u518d\u4e0e$1$\u201c&\u201d\u4e00\u4e0b\u5c31\u73c2\u4ee5\u5224\u65ad\u5012\u6570\u7b2c$i+1$\u4e3a\u662f$0$\u8fd8\u662f$1$\uff0c\u4ece\u800c\u5224\u65ad\u8be5\u72b6\u6001\u7684\u5b50\u72b6\u6001\u7684\u4f4d\u7f6e\n\n2.\n\n```cpp\n    if((now>>i&3)!=1)\n         continue;\n```\n\n3\u7684\u4e8c\u8fdb\u5236\u662f$11$\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u72b6\u6001\u8fde\u7eed\u7684\u4e24\u4f4d\u662f$01$\uff08\u524d\u4e00\u4f4d\u662f$0$\uff0c\u540e\u4e00\u4f4d\u662f$1$\uff09\u624d\u80fd\u8f6c\u79fb\uff0c\u8fd9\u53e5\u8bdd\u5c31\u662f\u5224\u65ad\u4e86\u8fd9\u4e2a\u683c\u5b50\u662f\u5426\u80fd\u4e0b\u68cb\u5b50\n\n3.\n\n```cpp\n    int nxt=now^(3<<i);\n```\n\n\u8fd9\u53e5\u80fd\u786e\u5b9a\u8f6c\u79fb\u540e\u8f6e\u5ed3\u7ebf\u7684\u5f62\u72b6\uff0c\u539f\u6765\u7684\u4e24\u4f4d\u662f$01$\uff0c\u5f02\u6216\u4e0a$11$\u5c31\u6210\u4e86$10$\n\n```cpp\n\u00b7-    ->     |\n|           -\u00b7\n```",
        "postTime": 1546524607,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u9898\u89e3\u5728\u535a\u5ba2[\u98df\u7528](http://www.cnblogs.com/YoungNeal/p/8746362.html)\u6548\u679c\u66f4\u4f73\u54e6~  \n## Solution\n\u8003\u573a\u4e0a\u6ca1\u60f3\u51fa\u6765\u5199\u7684 30 \u5206\u66b4\u529b\u8bf6\n\n\u6ca1\u60f3\u5230\u73b0\u5728\u5c31\u5df2\u7ecf\u4f1a\u4e86\n\n\u6211\u4eec\u5b9a\u4e49\u67d0\u4e00\u65f6\u523b\u68cb\u76d8\u4e0a\u7684\u843d\u5b50\u60c5\u51b5\u4e3a\u5f53\u524d\u7684**\u72b6\u6001**\n\n\u5b9a\u4e49 $s$ \u4e3a\u521d\u72b6\u6001\uff0c\u5373\u68cb\u76d8\u4e0a\u8fd8\u6ca1\u6709\u843d\u5b50\n\n\u5b9a\u4e49 $t$ \u4e3a\u672b\u72b6\u6001\uff0c\u5373\u68cb\u76d8\u4e0a\u5df2\u7ecf\u843d\u5b8c\u5b50\n\n\u4e0d\u96be\u8bc1\u660e\uff0c\u5408\u6cd5\u7684\u72b6\u6001\u5c0f\u4e8e\u4e8c\u5341\u4e07\u79cd\n\n\u90a3\u4e48\u5148 $HASH$ \u4e00\u4e0b\u6bcf\u4e2a\u72b6\u6001\uff0c\u4ee4\u5176\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u6b63\u6574\u6570\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5b83\u662f\u4ece\u54ea\u4e9b\u72b6\u6001\u8f6c\u79fb\u6765\u7684\n\n\u5b9a\u4e49 $num[i]$ \u8868\u793a $i$ \u72b6\u6001\u843d\u4e86\u591a\u5c11\u5b50\uff0c\u65b9\u4fbf\u5224\u65ad\u5f53\u524d\u662f\u8be5\u5148\u624b\u8fd8\u662f\u8be5\u540e\u624b\u3002\n\n\u6211\u4eec $dp$ \u8981\u5012\u7740\u63a8\uff0c\u56e0\u4e3a\u5982\u679c\u6b63\u7740\u63a8\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u5f53\u524d\u867d\u7136\u6c42\u51fa\u4e86\u6700\u5927\u4ef7\u503c\uff0c\u4f46\u662f\u5374\u4e0d\u662f\u4ed6\u4eec\u7684\u6700\u4f18\u7b56\u7565\u7684\u60c5\u51b5\u3002\n\n\u6240\u4ee5\u5b9a\u4e49 $f[i]$ \u8868\u793a\u4ece\u72b6\u6001 $i$ \u5230\u672b\u72b6\u6001 $t$ \u5148\u624b\u51cf\u540e\u624b\u7684\u6700\u5927\u4ef7\u503c\n\n $f[t]$ \u521d\u503c\u4e3a$0$\uff0c$f[1]$ \u5373\u4e3a\u7b54\u6848\n\n\u4f46\u662f\u600e\u4e48\u6c42\u4e2d\u95f4\u72b6\u6001 $f[i]$ \u7684\u503c\u5462\uff1f\n\n\u4e4b\u524d\u63d0\u5230\u8fc7\uff0c\u53ef\u4ee5\u6c42\u51fa $i$ \u72b6\u6001\u662f\u7531 \u54ea\u4e9b\u72b6\u6001\u8f6c\u79fb\u6765\u7684\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u72b6\u6001\u4e3a $j$ \u53ef\u4ee5\u8f6c\u79fb\u5230 $i$\n\n\u6211\u4eec\u7528 $num$ \u6570\u7ec4\u6c42\u51fa\u5728\u72b6\u6001 $j$ \u65f6\u662f\u5148\u624b\u4e0b\u4e86\u8fd8\u662f\u540e\u624b\u4e0b\u4e86\u6700\u540e\u4e00\u4e2a\u68cb\u5b50\uff0c\u7136\u540e\u5206\u60c5\u51b5\u8ba8\u8bba\n\n\u5982\u679c\u662f\u5148\u624b\uff1a\u8003\u8651\u540e\u624b\u7684\u6700\u4f18\u7b56\u7565\uff0c\u663e\u7136\u662f\u60f3\u8ba9 $f[i]$ \u6700\u5c0f\uff0c\u6240\u4ee5 $f[i]=min{f[j]-b[x][y]}$\uff0c$x$\u3001$y$ \u662f $j$ \u8f6c\u79fb\u5230 $i$ \u72b6\u6001\u843d\u5b50\u7684\u6a2a\u7eb5\u5750\u6807\n\n\u540c\u7406\uff0c\u5982\u679c\u4e3a\u540e\u624b\uff1a\u90a3\u4e48 $f[i]$ \u6700\u5927\u7684\u8f6c\u79fb\u65b9\u7a0b\u662f $f[i]=max{f[j]+a[x][y]}$\uff0c$x$\u3001$y$ \u7684\u610f\u4e49\u8ddf\u4e0a\u9762\u4e00\u6837\n\n\u90a3\u6211\u4eec\u73b0\u5728\u5c31\u5269\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u4e86\uff1a\u600e\u4e48\u8fdb\u884c\u8f6c\u79fb\u5462\uff1f\n\n\u6211\u8fd9\u91cc\u5229\u7528\u4e86\u62d3\u6251\u5e8f\u8fdb\u884c\u8f6c\u79fb\uff1a\u5982\u679c\u4e00\u4e2a\u72b6\u6001\u88ab\u6240\u6709\u7684\u540e\u7eed\u72b6\u6001\u904d\u5386\u5b8c\u5e76\u6c42\u51fa\u6700\u4f18\u89e3\u540e\uff0c\u5c31\u5c06\u5176 $push$ \u8fdb\u961f\u5217\u91cc\uff0c\u8ba9\u5b83\u53bb\u8f6c\u79fb\u72b6\u6001\u5373\u53ef\u3002\n\n\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 O(18\u4e07*180\u4e07\uff09  \n\u4f46\u662f\u5f00\u6c27\u6c14\u4f18\u5316\u8dd1\u7684\u8d3c\u5feb\uff0c\u6700\u6162\u7684\u70b9 $300ms$ ~~(\u53cd\u6b63\u7701\u9009\u4e5f\u5f00 O2 \u4e0d\u7b97\u4f5c\u5f0a)~~\n\n## Code\n```\n// By YoungNeal\n#include<map>\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#define N 400005\n#define int long long\n#define mod 1000000007\nusing namespace std;\n\nint head[N];\nint cnt,s,t;\nint n,m,tot;\nint qp[N][15];\nint f[N],fz[15];\nint deg[N],num[N];\nint a[15][15],b[15][15];\n\nmap<int,int> mp;\nqueue<int> topo;\n\nstruct Edge{\n    int to,nxt,disa,disb;\n}edge[N*10];\n\nvoid add(int x,int y,int z,int p){\n    edge[++cnt].to=y;\n    edge[cnt].nxt=head[x];\n    edge[cnt].disa=z;\n    edge[cnt].disb=p;\n    head[x]=cnt;\n}\n\nvoid hsh(int x){\n    int d=0;tot++;\n    for(int i=1;i<=n;i++)\n        d=d*15+fz[i],d%=mod,qp[tot][i]=fz[i];\n    mp[d]=tot;\n    num[tot]=x;\n    if(num[tot]&1) f[tot]=2e18;\n    else f[tot]=-2e18;\n}\n\nvoid dfs(int now,int lim,int num){\n    if(now>n){\n        hsh(num);\n        return;\n    }\n    for(int i=0;i<=lim;i++)\n        fz[now]=i,dfs(now+1,i,num+i);\n}\n\nvoid _find(){\n    int x=0,y=0;\n    for(int i=1;i<=n;i++) y=y*15+m,y%=mod;\n    s=mp[x],t=mp[y];\n}\n\nvoid read(int &x){\n    x=0;char ch=getchar();\n    while(!isdigit(ch)) ch=getchar();\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\n\nsigned main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++) read(a[i][j]);\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++) read(b[i][j]);\n    }\n    dfs(1,m,0);\n    _find();\n    f[t]=0;\n    for(int i=2;i<=tot;i++){\n        for(int j=n;j;j--){\n            if(qp[i][j]==qp[i][j+1]) continue;\n            int x=0;int idx=j,idy=qp[i][j];\n            for(int p=1;p<=n;p++){\n                if(p==j) x=x*15+qp[i][j]-1,x%=mod;\n                else x=x*15+qp[i][p],x%=mod;\n            }\n            if(num[i]&1) add(i,mp[x],a[idx][idy],0);\n            else add(i,mp[x],0,b[idx][idy]);\n            deg[mp[x]]++;\n        }\n    }\n    topo.push(t);\n    while(topo.size()){\n        int u=topo.front();topo.pop();\n        for(int i=head[u];i;i=edge[i].nxt){\n            int to=edge[i].to;\n            if(num[to]&1) f[to]=min(f[to],f[u]-edge[i].disb);\n            else f[to]=max(f[to],f[u]+edge[i].disa);\n            deg[to]--;\n            if(!deg[to]) topo.push(to);\n        }\n    }\n    printf(\"%lld\\n\",f[1]);\n    return 0;\n}\n```",
        "postTime": 1523185297,
        "uid": 56778,
        "name": "YoungNeal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "## \u5199\u4e86\u4e2a\u6bd4\u8f83\u901a\u4fd7\u6613\u61c2\u7684\u3002\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b58\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u72b6\u6001\u663e\u7136\u662f\u4e0d\u884c\u7684\u3002\u800c\u4f5c\u8005\u53c8\u6bd4\u8f83\u5f31\u4e0d\u4f1a\u8f6e\u5ed3\u7ebf\u4e0aDP\uff0c\u6240\u4ee5\u53ea\u4f1a\u5199\u7206\u641c\u3002  \n\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u6bcf\u4e00\u884c\u653e\u4e86\u591a\u5c11\u4e2a\u68cb\u5b50\uff0c\u56e0\u4e3a\u663e\u800c\u6613\u89c1\u5730\uff0c\u8fd9\u4e9b\u68cb\u5b50\u90fd\u8981\u653e\u5230\u6700\u5de6\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8868\u793a\u4e00\u6574\u4e2a\u68cb\u76d8\u3002  \n\u7136\u540e\u5f00\u59cb\u7b80\u6613\u7684\u5bf9\u6297\u641c\u7d22\uff0c\u5148\u624b\u65f6\u53d6max\uff0c\u540e\u624b\u65f6\u53d6min\uff0c\u7406\u89e3\u65b9\u6cd5\u8bb8\u591a\u9898\u89e3\u90fd\u6709\u63d0\u5230\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002  \n\u53ea\u9700\u8981\u6bcf\u6b21\u5224\u65ad\u5728\u8fd9\u4e00\u884c\u4e0b\u5b50\u662f\u5426\u53ef\u884c\uff0c\u7136\u540e\u8fdb\u884c\u641c\u7d22\u5373\u53ef\u3002  \n\u56e0\u4e3a\u76f4\u63a5\u66b4\u529b\u5b58\u50a813\u8fdb\u5236\u6570\u7684\u539f\u56e0\uff0c\u8dd1\u7684\u6bd4\u8f83\u6162\uff0c\u6700\u5927\u70b90.1s\u3002~~\u5bf9\u4e8e\u6211\u8fd9\u6837\u7684juruo\u6765\u8bf4\u53ef\u4ee5\u4e86~~\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<tr1/unordered_map>\n#define neko 12\n#define chkmin(a,b) ((a)<(b)?(a):(b)) \n#define chkmax(a,b) ((a)>(b)?(a):(b))\n#define f(i,a,b) for(register int i=(a);i<=(b);i=-(~i))\n#define rf(i,a,b) for(register int i=(a);i>=(b);i=~(-i))\ntypedef long long ll;\nint n,m,a[neko][neko],b[neko][neko],num[neko];\nll rdx=13;\nstd::tr1::unordered_map<ll,int>ht;\nll zip()//\u52a0\u5bc6\n{ll x=0;f(i,1,n)x=x*rdx+1ll*num[i];return x;}\nvoid unzip(ll x)//\u89e3\u5bc6\n{rf(i,n,1)num[i]=x%rdx,x/=rdx;}\nint dfs(ll now,bool hand)//hand=1 \u5148\u624b =0 \u540e\u624b\n{\n    if(ht.count(now))return ht[now];\n    unzip(now);int ans=hand?(-0x3f3f3f3f):(0x3f3f3f3f);ll aft;//\u6ce8\u610f\u521d\u59cb\u503c\n    f(i,1,n)\n    {\n        if(num[i]<num[i-1])\n        {\n            ++num[i],aft=zip();\n            if(hand)ans=chkmax(ans,dfs(aft,0)+a[i][num[i]]);\n            else ans=chkmin(ans,dfs(aft,1)-b[i][num[i]]);\n            --num[i];\n        }\n    }ht[now]=ans;\n    return ans;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    f(i,1,n)\n     f(j,1,m)\n      scanf(\"%d\",&a[i][j]); \n    f(i,1,n)\n     f(j,1,m)\n      scanf(\"%d\",&b[i][j]);\n    f(i,0,n)num[i]=m;\n    ht[zip()]=0;\n    dfs(0,1);return printf(\"%d\\n\",ht[0]),0;//\u8f93\u51fa0\u72b6\u6001\u7684\u7b54\u6848\n}\n```",
        "postTime": 1523364779,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u771f\u7684\u8349\u3002\u3002\u3002  \n\u53bb\u5e74\u7701\u9009\u65f6\u8fdeminmax\u641c\u7d22\u90fd\u5199\u6302\u4e86\uff0c\u8fd9\u9898\u81ea\u7136\u53ea\u670920\u5206\uff08  \n\u7136\u540e\u53d1\u73b0\u8fd9\u9898\u66b4\u529b\u90fd\u80fd\u8fc7\u3002\u3002\u3002\u3002  \n\u4e00\u822c\u4eba\u7684\u505a\u6cd5\uff1a\u8f6e\u5ed3\u7ebfdp\u6216hash\u641c\u7d22  \n\u6211\u7684sb\u505a\u6cd5\uff1a\u5f00\u4e2avector\u8bb0\u5f55\u72b6\u6001\uff0c\u5224\u91cd\u7528\u4e00\u4e2a\n```cpp\nmap<vector<int> ,int >\n```  \n\u8fd9\u4e2a\u4e1c\u897f\u663e\u7136\u590d\u6742\u5ea6\u662f\u6709\u70b9\u95ee\u9898\u7684\uff08vector\u6bd4\u8f83\u662fO(n)\u7684\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u8fc7\u9898...\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=15,inf=0x7f7f7f7f;\nint n,m;\nint a[N][N],b[N][N];\nmap<vector<int> ,int > mp;\nvector<int> h;\nint dfs(int turn){\n\tif(mp.find(h)!=mp.end()) return mp[h];\n\tint ans=turn?-inf:inf;\n\tfor(int i=0;i<n;i++)\n\t\tif((i==0||h[i-1]>h[i])&&h[i]<m){\n\t\t\t++h[i];\n\t\t\tif(turn) ans=max(ans,dfs(0)+a[i+1][h[i]]);\n\t\t\telse ans=min(ans,dfs(1)-b[i+1][h[i]]);\n\t\t\t--h[i];\n\t\t}\n\treturn mp[h]=ans;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>b[i][j];\n\tfor(int i=0;i<n;i++) h.push_back(m);\n\tmp[h]=0;\n\tfor(int i=0;i<n;i++) h[i]=0;\n\tcout<<dfs(1);\n\treturn 0;\n}\n\n```\n(\u53e6\uff0c\u4e0d\u5f00o2\u53ea\u670980",
        "postTime": 1554101961,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4efd\u66b4\u529b\u9898\u89e3\u3002\n\n## Prelude\n\n\u8fd9\u4e2a\u9898\u5f53\u65f6\u5728\u8003\u573a\u4e0a\u9a6c\u4e0a\u5c31\u60f3\u5230\u4e86Minimax\u641c\u7d22\uff0c\u7136\u540e\u5e26\u4e0aAlphaBeta\u526a\u679d\u5c31\u53ef\u4ee5\u4e71\u641e\u4e86\uff0c\u4e00\u4e2a\u5c0f\u65f6\u8fde\u7801\u5e26\u5bf9\u62cd\u641e\u5b8c\uff0c\u7136\u540e\u5f00\u59cb~~\u7761\u89c9~~\u5e72\u540e\u9762\u9898\u7684\u66b4\u529b\n\n\u8003\u8bd5\u7ed3\u675f\u524d5\u5206\u949f\u6211\u628a\u9898\u610f\u770b\u9519\u4e86\uff0c\u614c\u5f97\u8981\u547d\uff0c\u6539\u4e86\u4e4b\u540e\u6837\u4f8b\u8f93\u51fa3\uff0c\u4ea4\u5377\u4e4b\u524d\u4e00\u5206\u949f\uff0c\u6f5c\u610f\u8bc6\u4e2d\u611f\u5230\u4e0d\u5bf9\uff0c\u8fde\u7740\u6309\u4e8630\u51e0\u4e0bCtrl-Z\uff0c\u64a4\u56de\u5230\u4e86\u6b63\u786e\u7684\u7248\u672c\uff0c\u7f16\u8bd1\u4e86\u4e00\u4e0b\uff0c\u8fde\u6837\u4f8b\u90fd\u6ca1\u6d4b\uff0c\u5c31\u4ea4\u5377\u4e86\u3002\u8fd8\u597drp\u597d\uff0c\u6ca1\u6709WA\u58f0\u4e00\u7247\uff0c\u8fd8\u6df7\u4e8675= =\n\n\u51fa\u573a\u540e\u548c @Anoxiacxy \u5206\u6790\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4f3c\u4e4e\u53ef\u4ee5\u538b\u8f6e\u5ed3\u7ebf\uff1f\u8003\u8bd5\u7684\u65f6\u5019\u679c\u7136\u667a\u5546\u4e0b\u7ebf\u554a\u2026\u2026\n\n\u540e\u6765\u542c\u8bf4\u6211\u7701\uff08HB\uff09\u4e00\u4e2a\u521d\u4e09\u7684dalao\uff08\u5c31\u697c\u4e0b\u90a3\u4f4d\uff09\u5f53\u573a\u7801\u51fa\u6b63\u89e3\uff0c\u65e0\u9650\u819c\u62dcorzorzorz\n\n## \u89e3\u6cd5\n\n\u8fd9\u79cd $n, m \\le 10$ \u7684\u9898\uff0c\u4e00\u770b\u5c31\u662f\u8981\u66b4\u529b\u3002\u4f46\u662f\u76f4\u63a5\u66b4\u529b + AlphaBeta\u526a\u679d + \u8282\u70b9\u6392\u5e8f\u53ea\u80fd\u62ff\u523070.\n\n\u8003\u8651\u76f4\u63a5\u7206\u641c+\u4f18\u5316\u3002\u5982\u679c\u6bcf\u4e2a\u72b6\u6001\u4e2d\u8bb0\u5f55\u6574\u4e2a\u68cb\u76d8\uff0c\u6bcf\u6b21\u6269\u5c55\u5c31\u8981\u904d\u5386\u6574\u4e2a\u68cb\u76d8\u627e\u5408\u9002\u7684\u70b9\u3002\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u6446\u653e\uff0c\u68cb\u5b50\u4e00\u5b9a\u6784\u6210\u5305\u542b\u68cb\u76d8\u5de6\u4e0a\u89d2\u7684\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u7531\u4e8e\u6211\u7279\u522b\u5f31\uff0c\u4e0d\u4f1a\u8f6e\u5ed3\u7ebf\u72b6\u538bDP\uff0c\u5c31\u8003\u8651\u53ea\u5728\u72b6\u6001\u4e2d\u8bb0\u5f55\u6bcf\u884c\u6bcf\u5217\u7684\u6700\u540e\u4e00\u4e2a\u68cb\u5b50\u7684\u4f4d\u7f6e\uff08\u663e\u7136\uff0c\u5df2\u7ecf\u6446\u653e\u7684\u68cb\u5b50\u662f\u8c01\u7684\uff0c\u5bf9\u4e8e\u72b6\u6001\u7684\u8f6c\u79fb\u6ca1\u6709\u5f71\u54cd\uff09\u3002\n\n\u68cb\u5b50\u53ea\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u6240\u4ee5\u6784\u6210\u4e00\u4e2aDAG\u3002\u6253\u5927\u66b4\u529b\u540e\u53d1\u73b0\u6709\u5f88\u591a\u7684\u91cd\u590d\u72b6\u6001\uff0c\u6240\u4ee5\u8bb0\u5fc6\u5316\u5e94\u8be5\u6709\u7528\u3002\u6bcf\u4e2a\u72b6\u6001\u91cc\u9762\u6709 $n+m$ \u4e2a\u6570\u5b57\uff0c\u76f4\u63a5\u8bb0\u5f55\u663e\u7136\u836f\u4e38\uff0c\u4e8e\u662f\u6211\u4eechash\u4e00\u4e0b\uff08\u5176\u4e2dpair\u8bb0\u5f55\u7684\u662f\u72b6\u6001-\u5f53\u524d\u73a9\u5bb6\uff09\uff1a\n\n```cpp\nnamespace std {\n    template<>\n    struct hash<State> {\n        size_t operator()(const State& s) const {\n            size_t h = 0, base = 131;\n            for(register int i = 1; i <= n; i++, base *= 13) \n                h += s.row[i] * base; // BKDRHash\n            return h;\n        }\n    };\n    template<typename T1, typename T2>\n    struct hash<pair<T1, T2> > {\n    \tsize_t operator()(const pair<T1, T2>& s) const {\n    \t\tsize_t h = 0;\n    \t\th = std::hash<T1>()(s.first) ^ std::hash<T2>()(s.second);\n    \t\treturn h;\n    \t}\n    };\n}\n```\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0a `unordered_map` \u4e86\u3002\u7528`unordered_map`\u8bb0\u5fc6\u5316\u4e4b\u540e\u6700\u540e\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5\u8dd1\u8fc7\u4e86\uff0c\u800c\u4e14\u4e5f\u4e0d\u6162\u3002\n\n## \u4ee3\u7801\n\n```cpp\n/*\n\t\u66b4\u529b+hash_map\n*/\n#include <bits/stdc++.h>\n#define fst first\n#define snd second\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef pair<int, pii> Step;\n\nconst int MAXN = 10, INF = 0x3f3f3f3f;\nint n, m, A[MAXN+10][MAXN+10], B[MAXN+10][MAXN+10];\n\nstruct State {\n\tint row[MAXN+10], col[MAXN+10];\n\tState() {\n\t\tmemset(row, 0, sizeof(row)); \n\t\tmemset(col, 0, sizeof(col));\n\t}\n\tbool full() {\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tif(row[i] != m) return false;\n\t\treturn true;\n\t}\n\tbool possible(int x, int y) {\n\t\treturn row[x] == y-1 && col[y] == x-1;\n\t}\n\tbool operator==(const State &rhs) const {\n\t    for(int i = 1; i <= n; i++)\n\t        if(row[i] != rhs.row[i]) return false;\n\t    return true;\n\t}\n\tconst State& operator=(const State &rhs) {\n\t\tmemcpy(row, rhs.row, sizeof(row));\n\t\tmemcpy(col, rhs.col, sizeof(col));\n\t\treturn (const State&) *this;\n\t}\n} S;\n\nnamespace std {\n    template<>\n    struct hash<State> {\n        size_t operator()(const State& s) const {\n            size_t h = 0, base = 131;\n            for(register int i = 1; i <= n; i++, base *= 13) \n                h += s.row[i] * base;\n            return h;\n        }\n    };\n    template<typename T1, typename T2>\n    struct hash<pair<T1, T2> > {\n    \tsize_t operator()(const pair<T1, T2>& s) const {\n    \t\tsize_t h = 0;\n    \t\th = std::hash<T1>()(s.first) ^ std::hash<T2>()(s.second);\n    \t\treturn h;\n    \t}\n    };\n}\n\nunordered_map<pair<State, int>, int > cache;\n\nvoid init() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= m; j++)\n\t\t\tscanf(\"%d\", &A[i][j]);\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= m; j++)\n\t\t\tscanf(\"%d\", &B[i][j]);\n}\n\nint Minimax(State &u, int player) {\n\n\tif(u.full()) return 0;\n\n\tif(cache.count({u, player}))\n\t\treturn cache[{u, player}];\n\n\tint sz = 0; Step step[(MAXN+1) * 2];\n\tif(player == 1) {\t//Max \u73a9\u5bb6\n\t\tint maxv = -INF;\n\t\tfor(int i = 1; i <= n; i++) if(u.row[i] < m && u.possible(i, u.row[i]+1))\n\t\t\tstep[++sz] = { A[i][u.row[i]+1], {i, u.row[i]+1} };\n\t\tfor(int i = 1; i <= sz; i++) {\n\t\t\tu.row[step[i].snd.fst]++; u.col[step[i].snd.snd]++;\n\t\t\tmaxv = max(maxv, step[i].fst + Minimax(u, 3 - player));\n\t\t\tu.row[step[i].snd.fst]--; u.col[step[i].snd.snd]--;\n\t\t}\n\t\tcache[{u, player}] = maxv;\n\t\treturn maxv;\n\t} else {\t// Min \u73a9\u5bb6\n\t\tint minv = INF;\n\t\tfor(int i = 1; i <= n; i++) if(u.row[i] < m && u.possible(i, u.row[i]+1))\n\t\t\tstep[++sz] = { -B[i][u.row[i]+1], {i, u.row[i]+1} };\n\t\tfor(int i = 1; i <= sz; i++) {\n\t\t\tu.row[step[i].snd.fst]++; u.col[step[i].snd.snd]++;\n\t\t\tminv = min(minv, step[i].fst + Minimax(u, 3 - player));\n\t\t\tu.row[step[i].snd.fst]--; u.col[step[i].snd.snd]--;\n\t\t}\n\t\tcache[{u, player}] = minv;\n\t\treturn minv;\n\t}\n}\n\nvoid work() {\n\tprintf(\"%d\", Minimax(S, 1));\n}\n\nint main() {\n\tinit(); work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1523235342,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u8003\u8651\u4e00\u4e0b\u6240\u8c13\u7684\u4e24\u4e2a\u4eba\u90fd\u662f\u8d70\u6700\u4f18\u7b56\u7565\n\n\u4e5f\u5c31\u662f\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4eba\uff0c\n\n\u5b83\u4e00\u5b9a\u4ece\u5f53\u524d\u5c40\u9762\u53ef\u4ee5\u5230\u8fbe\u7684\u6240\u6709\u5c40\u9762\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684\u8d70\u3002\n\n\u7b2c\u4e8c\u4e2a\u4eba\u4e00\u5b9a\u4f1a\u4ece\u5f53\u524d\u5c40\u9762\u6240\u6709\u53ef\u4ee5\u5230\u8fbe\u7684\u5c40\u9762\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u8d70\u3002\u5373A\u60f3\u6700\u5927\u5316suma-sumb\u800cB\u60f3\u8981\u6700\u5c0f\u5316suma-sumb \n\n(\u8fd9\u5c31\u662f\u6240\u8c13\u7684min\u2212max\u641c\u7d22\u6216\u8005\u53eb\u5bf9\u6297\u641c\u7d22) \n\n\u8003\u8651\u4e00\u4e0b\u6240\u6709\u7684\u72b6\u6001\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2a\u4ece\u4e0a\u5f80\u4e0b\u7684\u9636\u68af\u578b\n\n\u56e0\u4e3an,m<=10\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2an\u4f4d\u7684m+1\u8fdb\u5236\u6570\u628a\u5f53\u524d\u4e0b\u5b8c\u7684\u8f6e\u5ed3\u7ed9\u54c8\u5e0c\u4e00\u4e0b\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5c40\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\n\n\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u5c40\u9762\u5f53\u524d\u4e0b\u5b50\u7684\u662f\u8c01\uff0c\u51b3\u5b9a\u8fd9\u4e2a\u72b6\u6001\u662f\u6700\u5927\u8fd8\u662f\u6700\u5c0f\u3002\u8fd9\u6837\u7528map\u538b\u4e0b\u5f53\u524d\u6240\u6709\u72b6\u6001\uff0c\u76f4\u63a5\u641c\u7d22\u5373\u53ef\u3002\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>                         \nusing namespace std;\nmap<long long,int>ma;\nint ln[15],n,m,a[15][15],b[15][15];\nlong long x;\nlong long hash(){\n    long long ret=0;\n\tfor(int i=1;i<=n;++i)ret=ret*11+ln[i];\n\treturn ret;\n}\nvoid unhash(long long st){\n    for(int i=n;i;--i)ln[i]=st%11,st/=11;\n}\nint Next(){\n    int ret=0;\n\tfor(int i=1;i<=n;++i)ret+=ln[i];\n\treturn ret&1;\n}\nint dfs(long long st){\n    if(ma.count(st))return ma[st];\n    unhash(st);\n    int opt=Next(),ret=opt?1e9:-1e9;\n    for(int i=1;i<=n;++i)\n        if(ln[i-1]>ln[i]){\n            ln[i]++;\n            long long now=hash();\n            if(opt)ret=min(ret,dfs(now)-b[i][ln[i]]);\n\t\t\telse ret=max(ret,dfs(now)+a[i][ln[i]]);\n            ln[i]--;\n        }\n    return ma[st]=ret;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n\tln[0]=m;\n    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)scanf(\"%d\",&a[i][j]);\n    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)scanf(\"%d\",&b[i][j]);\n    for(int i=1;i<=n;++i)x=x*11+m;\n    ma[x]=0;\n    dfs(0);\n    printf(\"%d\",ma[0]);\n    return 0;\n}\n```\n\u8fd9\u4e2a\u4ee3\u7801\u7528cin cout\u4f1aTLE\uff0c\u540e\u6765\u6539\u6210scanf printf\u5c31A\u4e86\u3002\n\n### \u4ee3\u7801\u914d\u4e0a\u89e3\u91ca\u5e94\u8be5\u5c31\u80fd\u61c2\u4e86\uff0c\u7406\u89e3\u4e07\u5c81\uff0c\u8bf7\u52ff\u6284\u88adOwO!!!",
        "postTime": 1568006365,
        "uid": 242967,
        "name": "JasonZRY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4a\u8868\u793a\u72b6\u6001\uff0ca[i]\u8868\u793a\u7b2ci\u884c\u5df2\u7ecf\u524da[i]\u4e2a\u683c\u5b50\u653e\u4e86\u68cb\u5b50\uff08\u663e\u7136\u68cb\u5b50\u53ea\u80fd\u8fde\u7eed\u653e\uff09\uff0c\u5e76\u4e14\u6211\u4eec\u53d1\u73b0a[i]\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u66b4\u641c\u53d1\u73b0\u5171\u6709\u4e0d\u8d85\u8fc7300000\u79cd\u53ef\u80fd\uff0c\u4e8e\u662f\u53ef\u4ee5\u72b6\u538bDP\n\n\u72b6\u6001\u53ef\u4ee5\u7528\u4e00\u4e2aset\u8fdb\u884c\u5b58\u50a8\uff0c\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5DP\u4e86\n\n\u53e6\u5916\uff0c\u8fd9\u662f\u535a\u5f08\u7248\u7684DP\uff0c\u6240\u4ee5dfs\u4e2d\u52a0\u5165\u4e00\u4e2a\u91cfl,\u8868\u793a\u8c01\u73b0\u5728\u8d70\uff0c\u5148\u624b\u60f3\u8981\u7ed3\u679c\u5c3d\u53ef\u80fd\u5927\uff0c\u6240\u4ee5\u53d6max\uff0c\u540e\u624b\u60f3\u7ed3\u679c\u5c0f\uff0c\u6240\u4ee5\u53d6min\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<stdlib.h>\n#include<string.h>\n#include<set>\nusing namespace std;\nconst int N=200005;\nint n,m,a[11][11],b[11][11],i,j;\nstruct str{\n    int a[11],c;\n    bool operator <(const str &p) const\n    {\n        int i;\n        for(i=1;i<=n;i++)\n        {\n            if(p.a[i]>a[i])\n                return false;\n            if(p.a[i]<a[i])\n                return true;\n        }\n    }\n}tmp;\nset<str> f;\nint dfs(str p,int l)\n{\n    int j;\n    for(j=1;j<=n;j++)\n        if(p.a[j]!=m)\n            break;\n    if(j>n)\n        return 0;\n    set<str>::iterator t;\n    t=f.find(p);\n    if(t!=f.end())\n        return (*t).c;\n    int s;\n    if(l==1)\n        s=1<<30;\n    else\n        s=-(1<<30);\n    for(j=1;j<=n;j++)\n        if((p.a[j]!=p.a[j-1]||j==1)&&p.a[j]!=m)\n        {\n            p.a[j]++;\n            if(l==1)\n                s=min(s,dfs(p,l^1)-b[j][p.a[j]]);\n            else\n                s=max(s,dfs(p,l^1)+a[j][p.a[j]]);\n            p.a[j]--;\n        }\n    p.c=s;\n    f.insert(p);\n    return s;\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++)\n            scanf(\"%d\",&a[i][j]);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++)\n            scanf(\"%d\",&b[i][j]);\n    printf(\"%d\",dfs(tmp,0));\n}\n\n```",
        "postTime": 1524555529,
        "uid": 13185,
        "name": "\u53cc\u7ba1\u8367\u5149\u706f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "https://vcode28629.coding.me/JSOI2018D1T1/\n\n\u5f53\u65f6\u73b0\u573aA\u4e86\u8fd9\u9053\u9898\uff0c\u6210\u529f\u4ee5\u975e\u6b63\u5f0f\u7684\u8eab\u4efd\u5413\u5230\u4e86\u6b63\u5f0f\u9009\u624b\u3002\u540e\u6765\u542c\u8bb2\u89e3\u53d1\u73b0\u597d\u50cf\u548c\u6211\u7684\u601d\u8def\u4e0d\u592a\u4e00\u6837\uff0c\u6240\u4ee5\u53d1\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\n\n### \u601d\u8003\u65b9\u5411\n\n\u8003\u8bd5\u7684\u65f6\u5019\u6211\u5c31\u60f3\uff0c\u8fd9\u53ef\u80fd\u662f\u4e2a\u535a\u5f08\u8bba\uff0c\u4e5f\u53ef\u80fd\u662f\u4e2aDP\n\n\u535a\u5f08\u8bba\u7684\u8bdd\u7531\u4e8e\u4e0d\u662f\u6807\u51c6\u7684\u6c42\u5148\u624b\u5fc5\u80dc\u8fd8\u662f\u5fc5\u8d25\uff0c\u6240\u4ee5\u5e94\u8be5\u4e0d\u662f\u4e86\u3002\n\n\u90a3\u4e48\u5c31\u662fDP\u4e86\u3002\u800c\u4e14\u662f10\\*10\u7684\uff0c\u5e94\u8be5\u662f\u4e2a\u72b6\u538bDP\u3002\u6240\u4ee5\u5148\u786e\u5b9a\u4e86\u603b\u4f53\u601d\u8def\uff1a\u72b6\u538bDP\n\n### \u5173\u4e8eA\u548cB\u7684\u5904\u7406\n\n\u5c45\u7136\u4e00\u4e2a\u683c\u5b50\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u8fd9\u6837\u4e00\u4e0b\u5c31\u590d\u6742\u4e86\uff0c\u8981\u662f\u80fd\u53d8\u6210\u4e00\u4e2a\u5c31\u597d\u4e86\u3002\n\n\u6240\u4ee5\u6211\u8bd5\u4e86\u5404\u79cd\u65b9\u6cd5\uff08\u592a\u8fc7\u590d\u6742\u4e0d\u4e88\u63cf\u8ff0\uff09\uff0c\u6210\u529f\u627e\u5230\u4e86\u6b63\u89e3\uff1a\n\nans\u6700\u5f00\u59cb\u4e0d\u8bbe\u4e3a0\uff0c\u8bbe\u4e3a\u6240\u6709B\u7684\u548c\u7684\u76f8\u53cd\u6570\uff0c\u7136\u540e\u628a\u683c\u5b50\u91ccA\u548cB\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u6b63\u5e38\u73a9\u4e86\u3002\n\nPlayer1\u548cPlayer2\u8f6e\u6d41\u843d\u5b50\uff0cP1\u60f3\u8ba9\u7ed3\u679c\u5c3d\u91cf\u5927\uff0cP2\u843d\u5b50\u4e0d\u8ba1\u7b97\u5f97\u5206\uff0c\u60f3\u8ba9\u7ed3\u679c\u5c3d\u91cf\u5c0f\u3002\n\n### \u5982\u4f55\u72b6\u538b\n\n\u9898\u76ee\u660e\u663e\u662f\u5728\u548c\u6211\u4eec\u8bf4\u6bcf\u4e00\u884c\u68cb\u5b50\u4e00\u5b9a\u662f\u5de6\u8fb9\u7684\u4e00\u4e32\uff0c\u5e76\u4e14\u8fd9\u4e00\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u4e0a\u9762\u4e00\u4e32\u300210\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a1010\uff0c4\u4f4d\u3002\u90a3\u4e4810\u4e2a10\u653e\u5728\u4e00\u8d77\u5c31\u662f40\u4f4d\uff0c\u6ca1\u6709\u8d85\u8fc7long long\uff0c\u72b6\u538b\u6210\u529f\u3002\n\n\u4e8c\u8fdb\u52361010 1001 1000 0111 0110 0101 0100 0011 0010 0001\u7684\u610f\u601d\u5c31\u662f\u7b2c\u4e00\u884c10\u5b50\uff0c\u4e8c\u884c9\u5b50\uff0c3\u884c8\u5b50\uff0c4\u884c7\u5b50\u2026\u202610\u884c1\u5b50\n\n### DP\u72b6\u6001\u7684\u8bbe\u5b9a\n\n\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u5f001 << 40\u8fd9\u4e48\u5927\u7684DP\u6570\u7ec4\uff0c\u6240\u4ee5\u9700\u8981\u79bb\u6563\u5316\u3002\u90a3\u5c31DFS\u4e00\u904d\u679a\u4e3e\u6240\u6709\u72b6\u6001\u5e76\u4e14\u7528map\u6c34\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u53cd\u6b63\u5f00O2\n\n\u6211\u4eec\u77e5\u9053\u5982\u679c\u4e00\u4e2a\u72b6\u6001\u786e\u5b9a\u4e86\uff0c\u90a3\u8f6e\u5230\u8c01\u5c31\u4e5f\u786e\u5b9a\u4e86\u3002\u6240\u4ee5dp[i]\u5c31\u7d22\u6027\u8bbe\u5b9a\u4e3a\u72b6\u6001i\u4e0b\u6309\u6700\u4f18\u7b56\u7565\u535a\u5f08**\u8fd8\u80fd**\u62ff\u5230\u7684\u5206\u6570\u597d\u4e86\u3002\n\n\u4f46\u662f\u6211\u6bd4\u8f83\u61d2\uff0c\u5373\u4f7f\u60f3\u5230\u4e86\u4e5f\u4e0d\u60f3\u8fd9\u4e48\u5199\uff0c\u8fd8\u4e0d\u5982\u5e72\u8106dp[i][1]\u4e3a\u201c\u4e0b\u4e00\u6b65\u8f6e\u5230\u7b2c1\u4e2a\u4eba\u8d70\uff0c\u90a3\u4e48\u6700\u4f18\u7b56\u7565\u4e0b**\u8fd8\u80fd**\u5f97\u5230\u7684\u5206\u6570\u662f\u591a\u5c11\u201d\uff0cdp[i][0]\u4e3a\u201c\u4e0b\u4e00\u6b65\u8f6e\u5230\u7b2c2\u4e2a\u4eba\u8d70\uff0c\u90a3\u4e48\u6700\u4f18\u7b56\u7565\u4e0b**\u8fd8\u80fd**\u5f97\u5230\u7684\u5206\u6570\u662f\u591a\u5c11\u201d\n\n### DP\u7684\u8f6c\u79fb\u65b9\u7a0b\n\ndp[now][0] = min(dp[\u4e0b\u4e00\u4e2a\u72b6\u6001][1]);\n\ndp[now][1] = max(dp[\u4e0b\u4e00\u4e2a\u72b6\u6001][0] + \u5230\u8fbe\u72b6\u6001\u80fd\u5f97\u5230\u7684\u5206\u6570);\n\nOK\uff0c\u90a3\u5230\u8fbe\u72b6\u6001\u80fd\u5f97\u5230\u7684\u5206\u6570\u600e\u4e48\u529e\uff1f\n\n### \u5230\u8fbe\u72b6\u6001\u80fd\u5f97\u5230\u7684\u5206\u6570\n\n\u80af\u5b9a\u5c31\u662f\u73b0\u5728\u7684\u6bd4\u540e\u6765\u7684\u591a\u51fa\u6765\u7684\u90a3\u4e00\u683c\u7684\u5f97\u5206\u4e86\uff0c\u8fd9\u4e2a\u5927\u5bb6\u770b\u6211\u4ee3\u7801\u5c31\u80fd\u660e\u767d\u4e86\uff0c\u4e0d\u7528\u591a\u8bf4\u3002\n\n```cpp\n//b before\n//a after\ninline int getX(long long b, long long a) {\n  a -= b;\n  for(int i = 1; i <= xlen; ++i) {\n    if((15ll << ((xlen - i) << 2)) & a) {\n      return i;\n    }\n  }\n}\ninline int getY(long long b, long long a) {\n  int x = getX(b, a);\n  return (a >> ((xlen - x) << 2)) & 15;\n}\n//unmap\u662f\u4e00\u4e2a\u9006\u5411\u79bb\u6563\u5316\u7684\u6570\u7ec4\ninline int getArr(int b, int a) {\n  return arr[getX(unmap[b], unmap[a])][getY(unmap[b], unmap[a])];\n}\n```\n\n### \u5177\u4f53\u5b9e\u73b0\n\n\u7531\u4e8e\u6211\u8fd9\u4e48\u8bbe\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u9006\u5411\u8fde\u8fb9\u662f\u80af\u5b9a\u7684\u4e86\u3002\n\n\u6b63\u5e38\u6765\u8bf4\u80af\u5b9a\u662f\u8981\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u4f46\u662f\u6211\u5f31\uff0c\u8003\u573a\u4e0a\u5e76\u6ca1\u60f3\u5230\n\n\u6240\u4ee5\u6211\u5199\u4e86\u4e2aSPFA\u3002\u3002\u3002\u3002\n\n```cpp\n// luogu-judger-enable-o2 O2\u4e0d\u5f00\u4f1a80\u5206\n#include<cstdio>\n#include<cstring>\n#include<map>\n#include<queue>\n\ntemplate<typename T>\ninline void input(T &var) {\n  char ch = ' ';\n  T ope = 1;\n  while((ch < '0' || '9' < ch) && ch != '-') {\n    ch = getchar();\n  }\n  if(ch == '-') {\n    ope = -1;\n    ch = getchar();\n  }\n  var = 0;\n  while('0' <= ch && ch <= '9') {\n    var = var * 10 + ch - '0';\n    ch = getchar();\n  }\n  var *= ope;\n}\ntemplate<typename T>\ninline void output(T var) {\n  if(var < 0) {\n    putchar('-');\n    var = -var;\n  } else if(var == 0) {\n    putchar('0');\n    return;\n  }\n  if(var >= 10) {\n    output(var / 10);\n  }\n  putchar(var % 10 + '0');\n  return;\n} \n\nstruct Edge {\n  Edge(int to, Edge *next) : to(to), next(next) {  }\n  Edge *next;\n  int to;\n} *first[300000];\n\nstd::map<long long, int> map;\nlong long unmap[300000];\nlong long memery[300000][2];\nint cnt = 0;\nint xlen;\nint ylen;\nlong long ans = 0;\nint arr[15][15];\n\nvoid init();\nvoid build();\nlong long solve();\n\nint main() {\n  init();\n  build();\n  output(solve() + ans);\n  return 0;\n}\n\nvoid getMap(int x, int last_y, long long res) {\n  --x;\n  map[res << ((xlen - x) << 2)] = ++cnt;\n  unmap[cnt] = res << ((xlen - x) << 2);\n  ++x;\n  if(x > xlen) return;\n  for(int y = 1; y <= last_y; ++y) {\n    getMap(x + 1, y, (res << 4) | y);\n  }\n  return;\n}\n\ninline int getYByX(long long res, int x) {\n  res >>= ((xlen - x) << 2);\n  res &= 15;\n  return res;\n}\n\nvoid init() {\n  input(xlen);\n  input(ylen);\n  getMap(1, ylen, 0);\n  for(int i = 1; i <= xlen; ++i) {\n    for(int j = 1; j <= ylen; ++j) {\n      input(arr[i][j]);\n    }\n  }\n  int key;\n  for(int i = 1; i <= xlen; ++i) {\n    for(int j = 1; j <= ylen; ++j) {\n      input(key);\n      arr[i][j] += key;\n      ans -= key;\n    }\n  }\n  return;\n}\n\ninline void addEdge(int from, int to) {\n  first[from] = new Edge(to, first[from]);\n  return;\n}\n\nvoid build() {\n  std::queue<long long> que;\n  que.push(1ll << ((xlen - 1) << 2));\n  static bool vis[300000];\n  memset(vis, 0, sizeof(vis));\n  vis[map[1ll << ((xlen - 1) << 2)]] = true;\n  while(!que.empty()) {\n    long long now = que.front();\n    que.pop();\n    if(getYByX(now, 1) < ylen) {\n      long long next = now + (1ll << ((xlen - 1) << 2));\n      //addEdge(map[now], map[next]);\n      addEdge(map[next], map[now]);\n      if(!vis[map[next]]) {\n        que.push(next);\n        vis[map[next]] = true;\n      }\n    }\n    for(int i = 2; i <= xlen; ++i) {\n      if(getYByX(now, i - 1) <= getYByX(now, i)) continue;//no <\n      long long next = now + (1ll << ((xlen - i) << 2));\n      //addEdge(map[now], map[next]);\n      addEdge(map[next], map[now]);\n      if(!vis[map[next]]) {\n        que.push(next);\n        vis[map[next]] = true;\n      }\n    }\n  }\n  return;\n}\n\ninline int getX(long long b, long long a) {\n  a -= b;\n  for(int i = 1; i <= xlen; ++i) {\n    if((15ll << ((xlen - i) << 2)) & a) {\n      return i;\n    }\n  }\n}\ninline int getY(long long b, long long a) {\n  int x = getX(b, a);\n  return (a >> ((xlen - x) << 2)) & 15;\n}\n\ninline int getArr(int b, int a) {\n  return arr[getX(unmap[b], unmap[a])][getY(unmap[b], unmap[a])];\n}\n\nlong long solve() {\n  memset(memery, -1, sizeof(memery));\n  addEdge(2, 1);\n  long long fin = 0;\n  for(int i = 1; i <= xlen; ++i) {\n    fin <<= 4;\n    fin |= ylen;\n  }\n  fin = map[fin];\n  for(int i = 1; i <= cnt; ++i) {\n    memery[i][0] = 0x7fffffffffffffff;\n    memery[i][1] = 0x8000000000000000;\n  }\n  memery[fin][0] = memery[fin][1] = 0;\n  \n  std::queue<int> que;\n  que.push((int)fin);\n  static bool in_que[300000];\n  memset(in_que, 0, sizeof(in_que));\n  while(!que.empty()) {\n    int now = que.front();\n    que.pop();\n    in_que[now] = false;\n    for(Edge *edg = first[now]; edg != NULL; edg = edg->next) {\n      bool flag = false;\n      if(memery[now][1] < memery[edg->to][0]) {\n        memery[edg->to][0] = memery[now][1];\n        flag = true;\n      }\n      if(memery[edg->to][1] < memery[now][0] + getArr(edg->to, now)) {\n        memery[edg->to][1] = memery[now][0] + getArr(edg->to, now);\n        flag = true;\n      }\n      if(flag) {\n        if(in_que[edg->to]) continue;\n        in_que[edg->to] = true;\n        que.push(edg->to);\n      }\n    }\n  }\n  return memery[1][1];\n}\n```",
        "postTime": 1523185413,
        "uid": 50165,
        "name": "VCode",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "\u5148\u624b\u5e0c\u671b\u5148\u624b\u5f97\u5206\u51cf\u540e\u624b\u5f97\u5206\u6700\u5927\uff0c\u540e\u624b\u5e0c\u671b\u5148\u624b\u5f97\u5206\u51cf\u540e\u624b\u5f97\u5206\u6700\u5c0f\n\n\u68cb\u76d8\u7684\u5c40\u9762\u4e00\u5b9a\u662f\u9636\u68af\u72b6\uff0c\u4e14\u4ece\u4e0a\u5f80\u4e0b\u9012\u51cf\n\n\u53ef\u4ee5\u5c06\u8f6e\u5ed3\u7ebf\u4f5c\u4e3a\u72b6\u6001\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u7528n\u4e2a\u6570\u8868\u793a\u4e00\u4e2a\u72b6\u6001\uff0c\u7b2ci\u4e2a\u6570\u8868\u793a\u7b2ci\u884c\u653e\u4e86\u51e0\u4e2a\n\n\u8bb0\u5fc6\u7684\u72b6\u6001\u8868\u793a\u5f53\u68cb\u76d8\u4e3a\u8fd9\u4e2a\u72b6\u6001\u65f6\uff0c\u63a5\u4e0b\u6765\u518d\u4e0b\u7684\u6700\u6709\u89e3\n\n\u8bb0\u5fc6\u5316\u641c\u7d22\u8282\u7701\u7684\u662f\u63a5\u4e0b\u6765\u518d\u4e0b\u7684\u65f6\u95f4\n\n```\n#include<map>\n \n#include<cstdio>\n \n#include<cstring>\n \n#include<iostream>\n \n#include<algorithm>\n \n   \n \n#define N 11\n \n    \n \nusing namespace std;\n \n   \n \nint n,m;\n \n   \n \nint a[N][N],b[N][N];\n \n   \n \nstruct node\n \n{\n \n    int v[N];\n \n    node()\n \n    {\n \n        memset(v,0,sizeof(v));\n \n    }\n \n    bool operator < (node p) const\n \n    {\n \n        for(int i=1;i<=n;++i)\n \n            if(v[i]<p.v[i]) return true;\n \n            else if(v[i]>p.v[i]) return false;\n \n    }\n \n};\n \nmap<node,int>mp;\n \n   \n \nint dfs(node now,bool who)\n \n{\n \n    if(mp.find(now)!=mp.end()) return mp[now];\n \n    int i;\n \n    for(i=1;i<=n;++i)\n \n        if(now.v[i]<m) break;\n \n    if(i>n) return 0;\n \n    int s;\n \n    if(!who) s=-2e9;\n \n    else s=2e9;\n \n    for( i=1;i<=n;++i)\n \n         if(now.v[i]!=m && (now.v[i]<now.v[i-1] || i==1))\n \n         {\n \n             now.v[i]++;\n \n             if(!who) s=max(s,dfs(now,who^1)+a[i][now.v[i]]);\n \n             else s=min(s,dfs(now,who^1)-b[i][now.v[i]]);\n \n             now.v[i]--;\n \n        }\n \n    return mp[now]=s;\n \n}\n \n   \n \nint main()\n \n{\n \n //  freopen(\"data.in\",\"r\",stdin);\n \n    scanf(\"%d%d\",&n,&m);\n \n    for(int i=1;i<=n;++i)\n \n         for(int j=1;j<=m;++j)\n \n             scanf(\"%d\",&a[i][j]);\n \n    for(int i=1;i<=n;++i)\n \n         for(int j=1;j<=m;++j)\n \n             scanf(\"%d\",&b[i][j]);\n \n    node now;\n \n    printf(\"%d\",dfs(now,0));\n \n}\n```\n",
        "postTime": 1561340696,
        "uid": 111289,
        "name": "Ryan_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    },
    {
        "content": "# \u5199\u5728\u524d\u9762\uff1a\u5982\u60f3\u83b7\u5f97\u66f4\u4f73\u9605\u8bfb\u6548\u679c\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://blog.csdn.net/kkkksc03/article/details/85011315)\n\n\u975e\u7701\u9009\u849f\u84bb\u6765\u6c34\u4e00\u53d1\u9898\u76ee\uff0c\u6c42\u8fc7\u3002\n\n# \u9898\u76ee\u94fe\u63a5\uff1ahttps://www.luogu.org/problemnew/show/P4363\n\n# \u5206\u6790\uff1a\n\u9996\u5148\u535a\u5f08\uff0c\u7136\u540e\u8003\u8651\u68cb\u76d8\u7684\u89c4\u5219\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b50\u5728\u843d\u4e0b\u65f6\u5b83\u7684\u4e0a\u9762\u548c\u5de6\u9762\u90fd\u5df2\u7ecf\u6ca1\u6709\u7a7a\u4f4d\u4e86\uff0c\u6240\u4ee5\u68cb\u5b50\u7684\u53f3\u4e0b\u7684\u8f6e\u5ed3\u7ebf\u4e00\u5b9a\u662f\u4e2a\u51f8\u5305\uff0c\u66f4\u5177\u4f53\u5730\uff0c\u4ece\u68cb\u76d8\u7684\u5de6\u4e0b\u6cbf\u7740\u68cb\u76d8\u8fb9\u754c\u6216\u68cb\u5b50\u8f6e\u5ed3\u7ebf\u8d70\u5230\u68cb\u76d8\u53f3\u4e0a\uff0c\u6240\u8d70\u7684\u8def\u5f84\u4e00\u5b9a\u53ea\u6709\u5411\u4e0a\u548c\u5411\u53f3\u4e24\u79cd\u3002\n\n# \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int maxn=25,N=1<<20,INF=0x3f3f3f3f;\nint f[N],n,m,nm,c[2][maxn][maxn];bool vis[N];\nvoid Max(int &x,int y)\n{\n    if(x<y)\n        x=y;\n    \n}\nint Run(int now,bool rt)\n{\n    if(vis[now])\n    return -f[now];\n    vis[now]=true;\n    int &ans=f[now],k=0,i,j,cur=now,cnt=0;\n    ans=-INF;\n    for(k=0;now&&(k<nm);k++,cnt+=i)\n    {\n        i=now&1,now>>=1,j=now&1;\n        if(i&&!j)\n            Max(ans,Run(cur^(3<<k),!rt)+c[rt][k+1-cnt][m-cnt]);\n    }\n    return -ans;\n}\nint main()\n{\n    int i,j;\n    scanf(\"%d%d\",&n,&m),nm=n+m-1;\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++)\n            scanf(\"%d\",&c[0][i][j]);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++)\n            scanf(\"%d\",&c[1][i][j]);\n    vis[((1<<m)-1)<<n]=true,printf(\"%d\\n\",-Run((1<<m)-1,0));\n    return 0; \n}\n```\n\n",
        "postTime": 1544828795,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4363 \u3010[\u4e5d\u7701\u8054\u80032018]\u4e00\u53cc\u6728\u68cbchess\u3011"
    }
]