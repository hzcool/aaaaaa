[
    {
        "content": "\u597d\u9898\u554a\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a key observation\uff0c\u56e0\u4e3a\u6240\u6709\u7ed9\u5b9a\u7535\u7ebf\u90fd\u8fde\u63a5\u95e8\u7684\u4e0d\u540c\u4e24\u8fb9\uff0c\u6240\u4ee5\u5207\u5272\u95e8\u7684\u4e24\u6761\u5bf9\u89d2\u7ebf\u5c31\u4e00\u5b9a\u80fd\u591f\u5207\u65ad\u6240\u6709\u7535\u7ebf\uff0c\u56e0\u6b64\u6700\u591a\u53ea\u9700\u8981\u5207\u5272\u4e24\u6b21\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u80fd\u591f\u53ea\u5207\u5272\u4e00\u6b21\u5c31\u5207\u65ad\u6240\u6709\u7535\u7ebf\u3002\n\n\u63a5\u4e0b\u6765\u8981\u5e72\u7684\u4e8b\u60c5\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u9b54\u6cd5...\u6211\u4eec\u53ef\u4ee5\u628a\u95e8\u7684\u56db\u8fb9\u6cbf\u7740 x \u8f74\u5c55\u5f00\u5f62\u6210\u4e00\u6761\u7ebf\u6bb5\uff0c\u7ed9\u51fa\u7684\u7535\u7ebf\u5c31\u53ef\u4ee5\u770b\u6210\u662f\u8fd9\u6761\u7ebf\u6bb5\u4e0a\u7684\u533a\u95f4\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u80fd\u5426\u5728\u8fd9\u6761\u7ebf\u6bb5\u4e0a\u627e\u5230\u4e00\u4e2a\u533a\u95f4\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u4e2d\u5305\u542b $n$ \u4e2a\u5c5e\u4e8e\u4e0d\u540c\u7535\u7ebf\u7684\u7aef\u70b9\u3002\u76f4\u63a5 Two-Pointer \u626b\u63cf\u4e00\u904d\u5373\u53ef\u3002\n\n\u8981\u6ce8\u610f\u8f93\u51fa\u65b9\u6848\u65f6\u56e0\u4e3a\u4e0d\u80fd\u4e0e\u56db\u4e2a\u89d2\u843d\u4ee5\u53ca\u4efb\u610f\u7535\u7ebf\u65ad\u7535\u91cd\u5408\uff0c\u56e0\u6b64\u8fd8\u8981\u52a0\u4e0a / \u51cf\u53bb\u4e00\u4e2a\u504f\u79bb\u503c\uff0c\u4ee3\u7801\u4e2d\u662f $0.1$\u3002\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7ed9\u5b9a\u7684\u70b9\u5230\u5c55\u5f00\u540e\u7684\u7ebf\u6bb5\u4e0a\u7684\u70b9\u7684\u4e92\u76f8\u8f6c\u5316\u9700\u8981\u4e00\u4e2a\u6709\u70b9\u6076\u5fc3\uff08\uff1f\uff09\u7684\u8ba8\u8bba\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n```cpp\n#include <map>\n#include <ctime>\n#include <stack>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n \ninline int read() {\n\tint x = 0, w = 1;char ch = getchar();\n\twhile (ch > '9' || ch < '0') { if (ch == '-')w = -1;ch = getchar(); }\n\twhile (ch >= '0' && ch <= '9')x = x * 10 + ch - '0', ch = getchar();\n\treturn x * w;\n}\ninline void write(int x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n \nconst int maxn = 1e6 + 5;\nconst int mod = 1e9 + 7;\nconst int inf = 1e9;\n \ninline int min(int x, int y) { return x < y ? x : y; }\ninline int max(int x, int y) { return x > y ? x : y; }\n\nstruct node {\n    int x, pos;\n    bool operator < (const node p) const {\n        return x < p.x;\n    } \n} a[maxn << 1];\nint n, w, h, vis[maxn];\n\ninline int getPos(int x,int y){\n\treturn !y ? x : x == w ? w + y : y == h ? (w << 1) + h - x : (w << 1) + (h << 1) - y;\n}\ninline void print(double x) {\n    if (x < w) printf(\"%.1f %d \", x, 0);\n    else if (x < w + h) printf(\"%d %.1f \", w, x - w);\n    else if (x < (w << 1) + h) printf(\"%.1f %d \", (w << 1) + h - x, h);\n    else printf(\"%d %.1f \", 0, (w << 1) + (h << 1) - x);\n}\n\nint main() {\n    n = read(), w = read(), h = read();\n    for (int i = 1, X1, X2, Y1, Y2;i <= n;i++) {\n        X1 = read(), Y1 = read(), a[(i << 1) - 1] = (node){getPos(X1, Y1), i};\n        X2 = read(), Y2 = read(), a[(i << 1)] = (node){getPos(X2, Y2), i};\n    }\n    a[(n << 1) + 1].x = (w << 1) + (h << 1);\n    sort(a + 1, a + (n << 1) + 1);\n    for (int head = 1, tail = 1;tail <= (n << 1);head++) {\n        while (tail <= (n << 1) && !vis[a[tail].pos]) vis[a[tail].pos] = 1, tail++;\n        if (tail - head == n) return puts(\"1\"), print(a[head].x - 0.1), print(a[tail].x - 0.1), 0;\n        vis[a[head].pos] = 0;\n    }\n    printf(\"2\\n%.1f %d %.1f %d\\n%d %.1f %d %.1f\\n\", 0.1, 0, w - 0.1, h, w, 0.1, 0, h - 0.1);\n\treturn 0; \n}\n```\n",
        "postTime": 1612850477,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6948 \u3010[ICPC2018 WF]Single Cut of Failure\u3011"
    }
]