[
    {
        "content": "\n\u5148\u5efa\u4e00\u9897\u5706\u65b9\u6811\uff08\u7c7b\u4f3c\u4e8eTarjan,\u53ea\u662f\u5224\u65ad\u662f\u6709\u4e00\u4e9b\u5c0f\u5c0f\u7684\u533a\u522b\uff09\uff1b\n\n\u7528 dfs \u9884\u5904\u7406\u5efa\u597d\u7684\u5706\u65b9\u6811\u4e00\u904d\uff0c\u7528\u4e8e\u7ef4\u62a4\u500d\u589e LCA\n\n\u518d\u3002\u3002\u3002\n\n\u4e00\u5806\u7684\u7279\u5224\u3002\u3002\u3002\uff08\u89c1\u4e0b\u56fe\uff09\n\n\u8fd9\u662f\u539f\u6811:\n\n![ss](https://s1.ax1x.com/2020/10/25/Be7OAJ.png)\n\n\u8dd1\u4e00\u8fb9\u5706\u65b9\u6811\u540e\u5c31\u53d8\u4e3a\u4e86\uff1a\n\n\n![ss](https://s1.ax1x.com/2020/10/25/BeHTPA.png)\n\ndfs\u540e\uff0c\u4ee51\u53f7\u8282\u70b9\u4e3a\u6839\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BebVZF.png)\n\n\u597d\u5427\uff0c\u5e9f\u8bdd\u4e0d\u8bf4\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n**\u6ce8\u610f\uff1a\u5706\u65b9\u6811\u7a7a\u95f4\u8981\u5f00\u4e24\u500d!!!**\n\n------------\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,tp,deep,cnt,q;\nvector <int> g[100010];\nvector <int> t[200010];\nint dfn[200010],low[200010];\nint stack_[200010];\nint up[200010][31];\nint deep_[200010];\nvoid dfs(int u,int fa)//dfs \u9884\u5904\u7406\n{\n\tup[u][0]=fa;\n\tdeep_[u]=deep_[fa]+1;\n\tfor (int i=1;(1<<i)<=deep_[u];i++){\n\t\tup[u][i]=up[up[u][i-1]][i-1];\n\t}\n\tfor (int i=0;i<t[u].size();i++)\t{\n\t\tif (t[u][i]!=fa) dfs(t[u][i],u);\n\t}\n\treturn;\n}\nint lca(int a,int b)//\u500d\u589e LCA\n{\n\tif (deep_[a]<deep_[b]) swap(a,b);\n\tfor (int i=25;i>=0;i--)\t\n\t\tif (deep_[up[a][i]]>=deep_[b]) a=up[a][i];\n\tif (a==b) return a;\n\tfor (int i=25;i>=0;i--)\n\t\tif (up[a][i]!=up[b][i])\t{\n\t\t\ta=up[a][i];\n\t\t\tb=up[b][i];\n\t\t}\n\treturn up[a][0];\n}\nvoid tarjan(int u)//\u5efa\u5706\u65b9\u6811\n{\n    dfn[u]=low[u]=++deep;\n    stack_[++tp]=u;\n    for (int i=0;i<g[u].size();i++) {\n    \tint v=g[u][i];\n        if (!dfn[v]) {\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n            if (low[v]==dfn[u]) //\u8868\u793a\u6b64\u65f6\u5df2\u7ecf\u627e\u5230\u4e00\u4e2a\u70b9\u53cc\u8054\u901a\u5206\u91cf\n            {\n                cnt++;\n                for(int j=0;j!=v;--tp) {\n                    j=stack_[tp];\n                    t[j].push_back(cnt);\n                    t[cnt].push_back(j);\n                }\n                t[u].push_back(cnt);\n                t[cnt].push_back(u);//\u8bb0\u5f97\u5c06u\u4e0ecnt\u5efa\u8fb9\n            }\n        }\n        else low[u]=min(low[u],dfn[v]);\n    }\n    return;\n}\nint main()\n{\n\tcin>>n>>m;\n\tcnt=n;\n    for (int i=1;i<=m;i++) {\n        int a,b;\n        cin>>a>>b;\n        g[a].push_back(b);\n        g[b].push_back(a);//\u8fde\u63a5\u65e0\u5411\u8fb9\n    }\n    for (int i=1;i<=n;i++) {\n        if (dfn[i]==0) {\n            tarjan(i);\n            tp--;//\u8bb0\u5f97\u5c06i\u51fa\u6808\n        }\n    }\n    dfs(1,0);\n    cin>>q;\n    while (q--) \n    {\n    \tint k;\n    \tcin>>k;\n    \tif (k==1) \n        {\n    \t\tint a,b,c,d;\n    \t\tcin>>a>>b>>c>>d;\n\t\t\tif (t[c].size()==1||t[d].size()==1) \n\t\t\t{\n\t\t\t\tif (a==c||b==c||a==d||b==d)//\u6709a\u4e3ac\u6216d\u6216b\u4e3ac\u6216d\n\t\t\t\t{\n\t\t\t\t\tif (t[up[d][0]].size()>2) cout<<\"yes\"<<endl; //\u5982\u679c\u5728\u70b9\u53cc\u5185\uff0c\u65e2\u6709\u4e24\u6761\u8def\u5f84\u53ef\u8d70\uff0c\u5373\u4f7f\u4e00\u6761\u65ad\u4e86\uff0c\u8fd8\u53ef\u4ee5\u8d70\u53e6\u4e00\u6761\uff0c\u6b64\u7279\u5224\u4e0b\u540c\n\t\t\t\t\telse cout<<\"no\"<<endl;\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t}\n\t\t\t}\n            //\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0cc\u4e0ed\u4e00\u5b9a\u4f1a\u4ee5\u4e00\u4e2a\u65b9\u70b9\u4e3a\u6865\u6881\u8fde\u63a5\uff0c\u5373\u4f1a\u8fde\u63a5\u540c\u4e00\u4e2a\u65b9\u70b9\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (deep_[c]>deep_[d])//\u5982\u679cc\u6bd4d\u6df1\uff0c\u4ea4\u6362\n\t\t\t\t{\n\t\t\t\t\tswap(c,d);\n\t\t\t\t}\n\t\t\t\tint ll=lca(a,b),ltc=lca(a,c),lsc=lca(b,c),ltd=lca(a,d),lsd=lca(b,d);\n\t\t\t\tif (ll==d)//\u5982\u679ca\u4e0eb\u5747\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9,\u4e14a,b\u4ee5d\u4e3aLCA,\u6b64\u65f6\u53ea\u662f\u65ad\u6389\u4e86c,d\u8054\u7cfb,a,b\u65e0\u5f71\u54cd;\u5982\u56fe1\n\t\t\t\t{\n\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t}\n\t\t\t\tif (ll==c)//\u5982\u679ca\u4e0eb\u5747\u4e3ac\u5b50\u6811\u7684\u7ed3\u70b9\n\t\t\t\t{\n\t\t\t\t\tif (ltd!=d&&lsd!=d)//\u5982\u679ca\u4e0eb\u5747\u4e0d\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9\n\t\t\t\t\t{\n\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t}\n\t\t\t\t\tif (ltd!=d&&lsd==d)//\u5982\u679ca\u4e0eb\u6709\u4e00\u4e2a\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9,\u6b64\u65f6a,b\u88abc,d\u5206\u5f00;\u5982\u56fe2\n\t\t\t\t\t{\n\t\t\t\t\t\tif (t[up[d][0]].size()>2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"no\"<<endl;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ltd==d&&lsd!=d)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (t[up[d][0]].size()>2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"no\"<<endl;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ll!=c&&ll!=d)//\u5982\u679ca,b\u5747\u4e0d\u4ee5c,d\u4e3aLCA\n\t\t\t\t{\n\t\t\t\t\tif (lsd==d&&ltd==d)//\u5982\u679ca\u4e0eb\u5747\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9\n\t\t\t\t\t{\n\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t}\n\t\t\t\t\tif (lsd!=d&&ltd!=d)//\u5982\u679ca\u4e0eb\u5747\u4e0d\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9,\u5982\u56fe3\n\t\t\t\t\t{\n\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t}\n\t\t\t\t\tif (lsd==d&&ltd!=d)//\u5982\u679ca\u4e0eb\u6709\u4e00\u4e2a\u4e3ad\u5b50\u6811\u7684\u7ed3\u70b9\n\t\t\t\t\t{\n\t\t\t\t\t\tif (t[up[d][0]].size()>2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"no\"<<endl;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (lsd!=d&&ltd==d)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (t[up[d][0]].size()>2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcout<<\"no\"<<endl;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint a,b,c;\n    \t\tcin>>a>>b>>c;\n    \t\tif (lca(a,b)==c)//\u82e5c\u4e3aa\u4e0eb\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148,\u6b64\u65f6a,b\u95f4\u8def\u5f84\u88abc\u65ad\u6389,\u5982\u56fe4\n    \t\t{\n\t\t\t\tcout<<\"no\"<<endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint lt=lca(a,c),ls=lca(b,c);\n\t\t\t\tif ((lt==c&&ls!=c)||(lt!=c&&ls==c))//\u82e5a\u4e3ac\u5b50\u6811\u7684\u7ed3\u70b9\u800cb\u4e0d\u662f\u6216b\u4e3ac\u5b50\u6811\u7684\u7ed3\u70b9\u800ca\u4e0d\u662f,\u5982\u56fe5\n\t\t\t\t{\n\t\t\t\t\tcout<<\"no\"<<endl;\n\t\t\t\t}\n\t\t\t\tif ((lt==c&&ls==c)||(lt!=c&&ls!=c))//\u82e5a\u4e3ac\u5b50\u6811\u7684\u7ed3\u70b9\u4e14b\u4e5f\u662f\u6216b\u4e0d\u4e3ac\u5b50\u6811\u7684\u7ed3\u70b9\u4e14a\u4e5f\u4e0d\u662f\n\t\t\t\t{\n\t\t\t\t\tcout<<\"yes\"<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n    return 0;\n}\n```\n\n\u56fe1\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BeLkEF.png)\n\n\u56fe2\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BeLe3R.png)\n\n\u56fe3\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BeLOr6.png)\n\n\u56fe4\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BeXiY4.png)\n\n\u56fe5\uff1a\n\n![ss](https://s1.ax1x.com/2020/10/25/BeXuTO.png)\n\n\u7ec8\u4e8e\u641e\u5b8c\u4e86\n\n![ss](https://s1.ax1x.com/2020/10/25/BeX3pd.jpg)\n\n\u6536\u5de5\u56de\u5bb6\uff01\uff01",
        "postTime": 1601712812,
        "uid": 67692,
        "name": "Selfish_2U",
        "ccfLevel": 0,
        "title": "P4334 [COI2007] Policija"
    },
    {
        "content": "\u81ea\u5df1\u5199\u7684\u505a\u6cd5\n\n### \u9996\u5148\u770b\u8be2\u95ee1\uff0c\u663e\u7136\u5c31\u95ee\u4e24\u70b9\u95f4\u662f\u5426\u5b58\u5728\u7ed9\u5b9a\u7684\u8fb9\u4e3a\u6865\n\n\u628a\u539f\u56feTarjan E-dcc \u7f29\u70b9\u6210\u6811 \u8fdb\u884c\u6811\u5256\u7684\u9884\u5904\u7406\u6c42\u51fa\u6811\u4e0adfs\u5e8f\n\n\u8be2\u95ee\u65f6,\u9996\u5148\u770b\u8be2\u95ee\u8fb9<c,d>\u662f\u4e0d\u662f\u4e2a\u6865\uff0c\u5982\u679c\u4e0d\u662f\u663e\u7136\u8f93\u51fayes\uff0c\u5982\u679c\u662f\u5c31\u6811\u5256\u8df3a,b\u4e24\u70b9\u6240\u5728edcc[a],edcc[b]\u7684\u8def\u5f84\uff0c\u770b\u8def\u5f84\u4e0a\u6709\u6ca1\u6709\u7ed9\u5b9a\u7684\u8fb9<c,d>\n\n\u5177\u4f53\u5224\u65ad\u65b9\u6cd5\u662f\uff1a\n\n\u628a\u8fb9\u63a8\u5411\u6df1\u5ea6\u8f83\u5927\u7684\u70b9e\uff0c\u8bb0\u4f5c\u5176dfs\u5e8f\u8bb0\u4f5cdfn[e]\n\n\u5904\u7406\u7ecf\u5178\u6811\u5256\u95ee\u9898\u65f6\u6bcf\u8df3\u4e00\u6b21\u5904\u7406\u7684\u533a\u95f4\u662f[dfn[top[x]],dfn[x]]\n\n\u7c7b\u4f3c\u5730\uff0c\u5982\u679cdfn[top[x]]<=dfn[e]&&dfn[e]<=dfn[x]\uff0c\u5c31\u8fd4\u56deno\u4e86\n\n\u6700\u540e\u8df3\u5230\u540c\u4e00\u94fe\u4e0a\u65f6\u518d\u770b\u4e00\u904d\uff0c\u8bb0\u5f97\u5de6\u5f00\u53f3\u95ed\u56e0\u4e3alca\u4e0d\u8ba1\n\n### \u63a5\u7740\u770b\u8be2\u95ee2\uff0c\u663e\u7136\u5c31\u95ee\u4e24\u70b9\u95f4\u662f\u5426\u5b58\u5728\u7ed9\u5b9a\u7684\u70b9\u4e3a\u5272\u70b9\n\n\u5904\u7406\u5272\u70b9\u95ee\u9898\u7684\u5e38\u7528\u65b9\u6cd5\uff1a\u6784\u5efa**\u5706\u65b9\u6811**\n\n\u4e0e1\u540c\u7406\uff0c\u5148\u770b\u7ed9\u5b9a\u70b9c\u662f\u4e0d\u662f\u5272\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u6811\u5256\u770b\u7ed9\u5b9a\u70b9c\u7684dfn\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(q log n)\n```cpp\n#include<map>\n#include<stack>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+5,M=5e5+5;\ntemplate<class type>inline const void read(type &in)\n{\n    in=0;char ch=getchar();short fh=1;\n    while (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n    while (ch>47&&ch<58)in=in*10+ch-48,ch=getchar();\n    in*=fh;\n}\nint n,m,q;\ntemplate<int Vertex_Amount,int Edge_Amount>\n\tclass Graph\n\t{\n\t\tprivate:\n\t\t\tint cnt;\n    \tpublic:\n        \tint head[Vertex_Amount],to[Edge_Amount],next[Edge_Amount];\n        \tinline const int addedge(int u,int v)\n        \t{\n            \tnext[++cnt]=head[u];\n            \tto[head[u]=cnt]=v;\n            \treturn cnt;\n        \t}\n        \tinline const void link(int u,int v)\n        \t{\n            \taddedge(u,v);\n            \taddedge(v,u);\n\t        }\n\t};\nGraph<N,M<<1>g;\nclass Round_Square_Tree\n{\n\tprivate:\n\t\tGraph<N<<1,N<<2>t;\n\t\tstack<int>s;\n\t\tbool iscut[N];\n\t\tint dfn[N<<1],low[N],tot,root,cnt,size[N<<1],dep[N<<1],wson[N<<1],fa[N<<1],top[N<<1];\n\t\tinline const void tarjan(int u,int fa)\n\t\t{\n    \t\ts.push(u);dfn[u]=low[u]=++cnt;short size=0;\n    \t\tfor (int v,i=g.head[u];i;i=g.next[i])\n        \t\tif ((v=g.to[i])^fa)\n            \t\tif (!dfn[v])\n            \t\t{\n    \t        \t\ttarjan(v,u);\n                \t\tlow[u]=min(low[u],low[v]);\n                \t\tif (low[v]<dfn[u])continue;\n                \t\tif (u^root)iscut[u]=1;else size++;\n                \t\tt.link(++tot,u);int top;\n                \t\tdo top=s.top(),s.pop(),t.link(tot,top);while (v^top);\n            \t\t}\n        \t\telse low[u]=min(low[u],dfn[v]);\n        \t\tif (size>1&&u==root)iscut[u]=1;\n\t\t}\n\t\tinline const void tarjan()\n\t\t{\n    \t\ttot=n;\n    \t\tfor (root=1;root<=n;root++)\n        \t\tif (!dfn[root])\n            \t\ttarjan(root,0);\n\t\t}\n\t\tinline const void dfs(int p)\n\t\t{\n    \t\tsize[p]=1;\n    \t\tfor (int i=t.head[p];i;i=t.next[i])\n    \t\t{\n        \t\tint son=t.to[i];\n        \t\tif (son==fa[p])continue;\n        \t\tfa[son]=p;dep[son]=dep[p]+1;\n        \t\tdfs(son);size[p]+=size[son];\n        \t\tif (size[son]>size[wson[p]])wson[p]=son;\n    \t\t}\n\t\t}\n\t\tinline const void dfs(int p,int tp)\n\t\t{\n    \t\ttop[p]=tp;dfn[p]=++cnt;\n    \t\tif (wson[p])dfs(wson[p],tp);\n    \t\tfor (int son,i=t.head[p];i;i=t.next[i])\n\t\t        if ((son=t.to[i])!=fa[p]&&son!=wson[p])\n        \t\t    dfs(son,son);\n\t\t}\n\tpublic:\n\t\tinline const void build()\n\t\t{\n\t\t\ttarjan();\n\t\t\tdfs(1);\n\t\t\tcnt=0;dfs(1,1);\n\t\t}\n\t\tinline const bool query(int a,int b,int c)\n\t\t{\n\t\t\tif (!iscut[c])return 0;\n\t\t\twhile (top[a]^top[b])\n\t\t\t{\n\t\t\t\tif (dep[top[a]]<dep[top[b]])swap(a,b);\n\t\t\t\tif (dfn[top[a]]<=dfn[c]&&dfn[c]<=dfn[a])return 1;\n\t\t\t\ta=fa[top[a]];\n\t\t\t}\n\t\t\tif (dep[a]>dep[b])swap(a,b);\n\t\t\treturn dfn[a]<=dfn[c]&&dfn[c]<=dfn[b];\n\t\t}\n}rst;\nclass Bridge_Tree\n{\n\tprivate:\n\t\tGraph<N,N<<1>t;\n\t\tstack<int>s;\n\t\tmap<pair<int,int>,int>bridge;\n\t\tint dfn[N],low[N],dot[N<<1],tot,edcc[N],cnt,size[N],dep[N],wson[N],fa[N],top[N],rev[N<<1];\n\t\tinline const void tarjan(int u,int fa)\n\t\t{\n    \t\ts.push(u);dfn[u]=low[u]=++cnt;int v;\n    \t\tfor (int i=g.head[u];i;i=g.next[i])\n    \t\t\tif ((v=g.to[i])^fa)\n    \t\t\t\tif (!dfn[v])tarjan(v,u),low[u]=min(low[v],low[u]);\n    \t\t\t\telse if (!edcc[v])low[u]=min(low[u],dfn[v]);\n    \t\tif (low[u]^dfn[u])return;tot++;\n    \t\tdo v=s.top(),s.pop(),edcc[v]=tot;while (u^v);\n\t\t}\n\t\tinline const void tarjan()\n\t\t{\n    \t\tfor (int i=1;i<=n;i++)\n    \t\t\tif (!dfn[i])\n    \t\t\t\ttarjan(i,0);\n\t\t}\n\t\tinline const void rebuild()\n\t\t{\n\t\t\tfor (int u=1;u<=n;u++)\n\t\t\t\tfor (int v,i=g.head[u];i;i=g.next[i])\n\t\t\t\t\tif (edcc[u]^edcc[v=g.to[i]])\n\t\t\t\t\t\tif (bridge[make_pair(u,v)]=t.addedge(edcc[u],edcc[v]),bridge.find(make_pair(v,u))!=bridge.end())\n\t\t\t\t\t\t\trev[rev[bridge[make_pair(u,v)]]=bridge[make_pair(v,u)]]=bridge[make_pair(u,v)];\n\t\t}\n\t\tinline const void dfs(int p)\n\t\t{\n    \t\tsize[p]=1;\n    \t\tfor (int i=t.head[p];i;i=t.next[i])\n    \t\t{\n        \t\tint son=t.to[i];\n        \t\tif (son==fa[p])continue;\n        \t\tdot[i]=dot[rev[i]]=son;\n        \t\tfa[son]=p;dep[son]=dep[p]+1;\n        \t\tdfs(son);size[p]+=size[son];\n        \t\tif (size[son]>size[wson[p]])wson[p]=son;\n    \t\t}\n\t\t}\n\t\tinline const void dfs(int p,int tp)\n\t\t{\n    \t\ttop[p]=tp;dfn[p]=++cnt;\n    \t\tif (wson[p])dfs(wson[p],tp);\n    \t\tfor (int son,i=t.head[p];i;i=t.next[i])\n\t\t        if ((son=t.to[i])!=fa[p]&&son!=wson[p])\n        \t\t    dfs(son,son);\n\t\t}\n\tpublic:\n\t\tinline const void build()\n\t\t{\n\t\t\ttarjan();\n\t\t\trebuild();\n\t\t\tdfs(1);\n\t\t\tcnt=0;dfs(1,1);\n\t\t}\n\t\tinline const bool query(int a,int b,int c,int d)\n\t\t{\n\t\t\tif (bridge.find(make_pair(c,d))==bridge.end())return 0;\n\t\t\tint p=dfn[dot[bridge[make_pair(c,d)]]];\n\t\t\ta=edcc[a];b=edcc[b];\n\t\t\twhile (top[a]^top[b])\n\t\t\t{\n\t\t\t\tif (dep[top[a]]<dep[top[b]])swap(a,b);\n\t\t\t\tif (dfn[top[a]]<=p&&p<=dfn[a])return 1;\n\t\t\t\ta=fa[top[a]];\n\t\t\t}\n\t\t\tif (dep[a]>dep[b])swap(a,b);\n\t\t\treturn dfn[a]+1<=p&&p<=dfn[b];\n\t\t}\n}bdt;\nint main()\n{\n    read(n);read(m);int a,b;\n    while (m--)read(a),read(b),g.link(a,b);\n    rst.build();bdt.build();\n    read(q);int opt,c,d;\n    while (q--)\n    \tif (read(opt),read(a),read(b),read(c),opt==1)read(d),puts(bdt.query(a,b,c,d)?\"no\":\"yes\");\n    \telse puts(rst.query(a,b,c)?\"no\":\"yes\");\n    return 0;\n}\n```",
        "postTime": 1550492602,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4334 \u3010[COI2007] Policija\u3011"
    },
    {
        "content": "[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4334)\n\n# \u5bf9\u5b98\u65b9\u9898\u89e3\u7684\u8be6\u7ec6\u89e3\u6790\n\n\u672c\u9898\u89e3\u6e90\u4e8e\u5b98\u65b9\u9898\u89e3\uff0c\u6ca1\u6709\u7528\u5230\u6811\u5256\u3001\u5706\u65b9\u6811\uff0c\u5e76\u52a0\u5165\u5c11\u91cf\u6613\u4e8e\u7406\u89e3\uff08\u6216\u8bb8\uff09\u7684\u4fee\u6539\uff0c\u5bf9\u50cf\u6211\u8fd9\u6837\u7684\u849f\u84bb\u8f83\u4e3a\u53cb\u597d\u3002\n\n~~\u5c3d\u7ba1\u8fd9\u9053\u6bd2\u7624\u9898\u8fd8\u662f\u5361\u4e86\u6211\u5341\u51e0\u904d\u63d0\u4ea4~~\n\n\u7b80\u5355\u7ffb\u8bd1\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u8be2\u95ee\u65ad\u5f00\u67d0\u6761\u8fb9\u6216\u67d0\u4e2a\u70b9\u540e\uff0c\u53e6\u5916\u4e24\u70b9\u662f\u5426\u8fde\u901a\u3002\n\n\u9996\u5148\u7ed9\u51fa\u6837\u4f8b\u7684 dfs \u6811\u4f5c\u4e3a\u53c2\u8003\uff08\u4e0d\u540c\u65b9\u6cd5\u5efa\u51fa\u7684\u6811\u5f62\u6001\u6709\u6240\u4e0d\u540c\uff09\uff0c\u9ed1\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8fb9\u4e3a\u56de\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rp3lfxvt.png)\n\n**\u63d0\u793a**\uff1a\u672c\u9898\u4e2d\u9ed8\u8ba4\u5c06 a\uff0cb\uff0cg1\uff0cg2\u6392\u5e8f\uff0c\u5176\u4e2d $dfn(a) \\le dfn(b),dfn(g1) \\le dfn(g2)$\n\n## \u8be2\u95ee 1\n\n\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5 g1\u3001g2 \u5728 dfs \u6811\u4e2d\u4e0d\u76f8\u90bb\uff0c\u5219\u76f4\u63a5\u8fde\u63a5 g1 \u548c g2 \u7684\u8fb9\u4e00\u5b9a\u4e3a\u56de\u8fb9\u3002 \n\n- \u5224\u5b9a\uff1a\u89c2\u5bdf g1 \u3001g2 \u5728 dfs \u6811\u4e2d\u7684\u6df1\u5ea6\u662f\u5426\u76f8\u5dee 1 \u3002\n    \n- \u5229\u7528\uff1a\u5982\u679c\u662f\u56de\u8fb9\uff0c\u5219\u81f3\u5c11\u6709\u4e24\u6761\u8def\u8fde\u63a5  g1  \u3001  g2  \u3002\u56e0\u6b64 g1 \u5230 g2 \u7684\u8def\u65ad\u5f00\u540e**\u4e0d\u5f71\u54cd\u539f\u56fe\u7684\u8fde\u901a\u6027**\u3002\n\n\u7ecf\u8fc7\u5982\u4e0a\u7684\u7279\u5224\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06  g1 \u3001 g2 \u9650\u5236\u4e3a**\u4e00\u4e0a\u4e00\u4e0b\u76f8\u90bb\u7684**\u4e24\u6761\u8fb9\u3002\n\n\u518d\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n### a \u5305\u542b b\uff1a\n\n\u9996\u5148\u5f97\u51fa g1\uff0cg2 \u80fd\u5f71\u54cd a\uff0cb \u7684\u5fc5\u8981\u6761\u4ef6\uff1ag1 \u5728 a \u7684\u5b50\u6811\u5185\uff0cb \u5728 g2 \u7684\u5b50\u6811\u5185\u3002\n    \n\u5f53\u7136\uff0c\u8fd9\u6837\u8fd8\u4e0d\u591f\uff0c\u56e0\u4e3a g2 \u5230 b \u7684\u67d0\u4e2a\u70b9\u53ef\u80fd\u6709\u56de\u8fb9\u6307\u5411 a \u5230 g1 \u7684\u67d0\u4e2a\u70b9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nwk3pppg.png)\n   \n\u5982\u4f55\u5224\u65ad\uff1f\n   \n\u6211\u4eec\u60f3\u5230\u4e86 tarjan \u7684 low\u3002\n   \n\u5047\u5982 g2 \u7684 low \u5c0f\u4e8e\u7b49\u4e8e g1 \u7684 dfn \uff0c\u5219\u8bf4\u660e a\uff0cb \u4ecd\u7136\u8054\u901a\u3002\n   \n### a \u4e0d\u5305\u542b b\uff1a\n\t\n\u5fc5\u8981\u6761\u4ef6\uff1a g1\uff0cg2 \u5728 a\uff0cb \u7684\u8def\u5f84\u4e0a\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u7528 lca \u3002\n    \n\u8fdb\u4e00\u6b65\u5206\u6790\u53ef\u4ee5\u5f97\u51fa\u5145\u5206\u5fc5\u8981\u6761\u4ef6\uff1a\u5373\u4f7f\u65ad\u5f00\u4e86 g1\uff0cg2 \uff0c\u82e5 a \u4e0e lca(a, b) \u8054\u901a\uff0c\u4e14 b \u4e0e lca(a, b) \u8054\u901a\uff0c\u5219 a\uff0cb \u4ecd\u7136\u8054\u901a\u3002\n   \n\u8bc1\u660e\uff1a\u5047\u8bbe a \u4e0d\u4e0e lca(a, b) \u8054\u901a\uff0c\u53ef\u77e5 g1\uff0cg2\u5728 lca(a, b) \u5230 a \u7684\u8def\u5f84\u4e0a\uff0c\u4e14 g2 \u5230 a \u7684\u8def\u5f84\u4e0a\u6ca1\u6709\u56de\u8fb9\u80fd\u901a\u5411 g1 \u53ca\u66f4\u9ad8\u7684\u70b9\u3002\n   \n\u56e0\u4e3a\u65e0\u5411\u56fe\u7684 dfs \u6811\u4e2d\u4e0d\u5b58\u5728\u6a2a\u53c9\u8fb9\uff0c\u6240\u4ee5 a \u4e0e b \u4e4b\u95f4\u7edd\u65e0\u901a\u8def\u3002\n\n\u5bf9 b \u540c\u7406\u3002\n   \n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u8be2\u95ee\u62c6\u6210\u4e24\u4e2a\u8be2\u95ee\uff1a (a, lca(a,b), g1, g2) \u548c \uff08b, lca(a,b), g1, g2\uff09\u3002\n\n## \u8be2\u95ee 2\n\n\u540c\u6837\u662f\u5206\u662f\u5426\u5305\u542b\u8fdb\u884c\u8ba8\u8bba\u3002\n\n### a \u5305\u542b b\uff1a\n\n\u8bbe c \u5230 b \u7684 related_child \u4e3a c \u5230 b \u7684\u8def\u5f84\u4e0a\uff08\u4e0d\u662f\u56de\u8fb9\uff09\uff0c\u4e0e c \u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u3002\n\n\u5982\u8be2\u95ee 1 \u4e00\u6837\u5224\u65ad related_child \u7684 low \u5373\u53ef\u3002\n\n### a \u4e0d\u5305\u542b b\uff1a\n\n\u9996\u5148\u9700\u8981\u6ee1\u8db3 c \u5728 a\uff0cb \u7684\u8def\u5f84\u4e0a\uff0c\u53d6 a\uff0cb \u7684 related_child \u62c6\u6210\u4e24\u4e2a\u8be2\u95ee\u5373\u53ef\u3002\n\n## \u95ee\u9898\n\n- \u5982\u4f55\u5224\u65ad\u67d0\u4e2a\u70b9\u5728\u53e6\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5185\uff1f\n\n\t\u5728 dfs \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u5fc5\u7136\u6bd4\u53f6\u8282\u70b9**\u5165\u6808\u65e9\u3001\u51fa\u6808\u665a**\u3002\n    \n   trajan \u7684\u8fc7\u7a0b\u4e2d\u8bb0\u4e0b\u8fdb\u5165\u8be5\u70b9\u7684\u65f6\u95f4\u6233 dfn \u53ca\u79bb\u5f00\u8be5\u70b9\u7684\u65f6\u95f4\u6233 finish \uff0c\u5bf9\u6bd4\u5373\u53ef\u3002\n   \n- \u5982\u4f55\u627e related_child \uff1f\n\n\t\u4e24\u79cd\u65b9\u6cd5\uff1a\u4e00\u79cd\u662f\u904d\u5386\u6bcf\u4e2a\u513f\u5b50\u5e76\u5224\u65ad\u662f\u5426\u5305\u542b\u53e6\u4e00\u8282\u70b9\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u500d\u589e\u4e0a\u53bb\uff0c\u6211\u7528\u4e86\u7b2c\u4e8c\u79cd\u3002\n    \n    \n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n//\u8bf7\u4f7f\u7528C++11\u7f16\u8bd1\n#include<bits/stdc++.h>\nusing namespace std;\nconstexpr int N = 1000001;\nstruct edge\n{\n\tint to, next;\n};\nint head[N];\nvector<edge> E;\nvoid insert(int u, int v)\n{\n\tE.push_back({ v,head[u] });\n\thead[u] = E.size() - 1;\n}\nint dfn[N], finish[N], low[N], now;\nint d[N], fa[N][20], lg[N];\nvoid tarjan(int u, int f)\n{\n\td[u] = d[f] + 1;\n\tfa[u][0] = f;\n\tfor (int i = 1; i <= lg[d[u]]; i++)fa[u][i] = fa[fa[u][i - 1]][i - 1];\n\tdfn[u] = low[u] = ++now;\n\tfor (int i = head[u]; ~i; i = E[i].next)\n\t{\n\t\tint v = E[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v, u);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t}\n\t\telse if (v != f)low[u] = min(low[u], dfn[v]);\n\t}\n\tfinish[u] = ++now;\n}\nint lca(int x, int y)\n{\n\tif (d[x] < d[y])swap(x, y);\n\twhile (d[x] > d[y])x = fa[x][lg[d[x] - d[y]] - 1];\n\tif (x == y)return x;\n\tfor (int i = lg[d[x]] - 1; i >= 0; i--)\n\t{\n\t\tif (fa[x][i] != fa[y][i])x = fa[x][i], y = fa[y][i];\n\t}\n\treturn fa[x][0];\n}\nint n, m, q;\n\n// \u5224\u65ad\u8282\u70b9 f \u662f\u5426\u5305\u542b\u8282\u70b9 a\nbool contains(int f, int a)\n{\n\treturn dfn[f] <= dfn[a] && finish[f] >= finish[a];\n}\n\n// \u67e5\u627e f \u5230 a \uff08 f \u5305\u542b a \uff09\u7684\u8def\u5f84\u4e0a\uff0c\u4e0e f \u76f4\u63a5\u76f8\u8fde\u7684\u70b9\nint find_related_child(int f, int a)\n{\n\tint df = d[f] + 1;\n\twhile (d[a] > df)a = fa[a][lg[d[a] - df] - 1];\n\treturn a;\n}\nbool query1(int a, int b, int g1, int g2)\n{\n\tif (a == b)return true;\n\tif (dfn[a] > dfn[b])swap(a, b);\n\tif (dfn[g1] > dfn[g2])swap(g1, g2);\n\tif (d[g2] != d[g1] + 1)return true; // g1 -> g2 \u4e3a\u56de\u8fb9\n\tif (contains(a, b)) // a \u5305\u542b b\n\t{\n\t\tif (contains(a, g1) && contains(g2, b))\n\t\t{\n\t\t\treturn low[g2] <= dfn[g1];\n\t\t}\n\t\telse return true;\n\t}\n\telse\n\t{\n\t\tint l = lca(a, b);\n\t\treturn query1(a, l, g1, g2) && query1(b, l, g1, g2);\n\t}\n}\nbool query2(int a, int b, int c)\n{\n\tif (a == b)return a != c;\n\tif (a == c || b == c)return false;\n\tif (dfn[a] > dfn[b])swap(a, b);\n\tif (contains(a, b)) // a \u5305\u542b b\n\t{\n\t\tif (contains(a, c) && contains(c, b))\n\t\t{\n\t\t\treturn low[find_related_child(c, b)] < dfn[c]; //\u6ce8\u610f\u8fd9\u91cc\u662f\u5c0f\u4e8e\n\t\t}\n\t\telse return true;\n\t}\n\telse\n\t{\n\t\tint l = lca(a, b);\n\t\tif (contains(l, c) && (contains(c, a) || contains(c, b)))\n\t\t{\n\t\t\treturn query2(a, fa[l][0], c) && query2(b, fa[l][0], c);\n\t\t}\n\t\telse return true;\n\t}\n}\nint main()\n{\n\tmemset(head, -1, sizeof head);\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++)lg[i] = lg[i - 1] + (1 << lg[i - 1] == i);\n\tfor (int i = 1, u, v; i <= m; i++)\n\t{\n\t\tcin >> u >> v;\n\t\tinsert(u, v);\n\t\tinsert(v, u);\n\t}\n\ttarjan(1, 1);\n\tcin >> q;\n\tfor (int i = 1, a, b, c, d; i <= q; i++)\n\t{\n\t\tcin >> a;\n\t\tif (a == 1)\n\t\t{\n\t\t\tcin >> a >> b >> c >> d;\n\t\t\tcout << (query1(a, b, c, d) ? \"yes\" : \"no\") << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcin >> a >> b >> c;\n\t\t\tcout << (query2(a, b, c) ? \"yes\" : \"no\") << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1629080606,
        "uid": 114368,
        "name": "wyw666",
        "ccfLevel": 7,
        "title": "P4334 [COI2007] Policija \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u4e2d\u90fd\u592a\u590d\u6742\uff0c\u6240\u4ee5\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n## \u89e3\u9898\u601d\u8def\uff1a\n\u9996\u5148\u7b2c\u4e00\u95ee\u548c\u8fb9\u6709\u5173\uff0c\u7b2c\u4e8c\u95ee\u548c\u70b9\u6709\u5173\uff0c\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u5bf9\u4e8e\u5272\u8fb9\u548c\u5272\u70b9\u7b54\u6848\u80af\u5b9a\u662f no\u3002\n\n\u7531\u5272\u8fb9\u548c\u5272\u70b9\u5bb9\u6613\u8054\u60f3\u5230\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u548c\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5bf9\u4e8e\u540e\u8005\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5efa\u5706\u65b9\u6811\u3002\n\n\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u5706\u65b9\u6811\u5efa\u7acb\uff1a\u5c06\u539f\u56fe\u4e2d\u7684\u70b9\u5b9a\u4e49\u4e3a\u5706\u70b9\uff0c\u9996\u5148\u901a\u8fc7 tarjan \u7b97\u6cd5\u627e\u5230\u70b9\u53cc\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u65b9\u70b9\uff0c\u628a\u70b9\u53cc\u91cc\u7684\u6240\u6709\u70b9\u5411\u8fd9\u4e2a\u65b9\u70b9\u8fde\u8fb9\u3002\n\n\u5c06\u56fe\u8f6c\u5316\u4e3a\u6811\u540e\uff0c\u80fd\u505a\u7684\u4e8b\u5c31\u591a\u4e86\u5f88\u591a\u3002\n\n\u5706\u65b9\u6811\u5904\u7406\u70b9\u7684\u5173\u7cfb\u6bd4\u8f83\u65b9\u4fbf\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u8003\u8651\u7b2c\u4e8c\u95ee\u3002\n\n### \u7b2c\u4e8c\u95ee\uff1a\n\u95ee\u9898\u8f6c\u5316\u4e3a\u6811\u4e0a\u7684\u70b9 a \u5230 b \u7684\u7b80\u5355\u8def\u5f84\u662f\u5426\u7ecf\u8fc7 c\u3002\n\n\u6709 $3$ \u79cd\u60c5\u51b5\u4f1a\u4f7f\u5f97 a \u5230 b \u7684\u7b80\u5355\u8def\u5f84\u7ecf\u8fc7 c\uff1a\n\n1\u3001\u5982\u679c c \u662f a \u548c b \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u90a3\u4e48\u663e\u7136\u8981\u7ecf\u8fc7\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9tz8ft3q.png)\n\n2\u3001a \u548c b \u5176\u4e2d\u4e00\u4e2a\u4e0d\u5728\u4ee5 c \u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u4e14\u662f c \u7684\u7956\u5148\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wxw7snq6.png)\n\n\u5982\u56fe\uff0c$lca(a,c)=c$\uff0c$lca(b,c)=b$\u3002\n\n3\u3001a \u548c b \u5176\u4e2d\u4e00\u4e2a\u4e0d\u5728\u4ee5 c \u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u4e14\u4e0e c \u5728\u540c\u4e00\u68f5\u5b50\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7e93le8i.png)\n\n\u5982\u56fe\uff0c$lca(a,c)=c$\uff0c$lca(b,c)=1$\u3002\n\n\u7b2c $2$ \u79cd\u548c\u7b2c $3$ \u79cd\u60c5\u51b5\u53ef\u4ee5\u63c9\u5728\u4e00\u8d77\uff0c\u5373\u5f53 $lca(a,c)=c$ \u4e14 $lca(b,c)\\not=c$ \u65f6 a \u5230 b \u7684\u7b80\u5355\u8def\u5f84\u7ecf\u8fc7 c\u3002\n\n\u4ee5\u4e0a\u6240\u6709\u60c5\u51b5\u4e2d a\uff0cb \u90fd\u53ef\u4ee5\u4e92\u6362\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u7b2c\u4e8c\u95ee\u3002\n\n### \u7b2c\u4e00\u95ee\uff1a\n\u9996\u5148\u5bf9\u4e8e $g1$ \u548c $g2$ \u7684\u8fde\u8fb9\u4e0d\u662f\u5272\u8fb9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u5272\u8fb9\u627e\u51fa\u6765\uff0c\u76f4\u63a5\u628a\u8fd9\u79cd\u60c5\u51b5\u5224\u6389\uff0c\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u5706\u65b9\u6811\u5e76\u4e0d\u80fd\u5904\u7406\u975e\u5272\u8fb9\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6811\u4e0a\u7684\u8fb9\u90fd\u662f\u6811\u7684\u5272\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u53ea\u9700\u8981\u8003\u8651\u5272\u8fb9\u7684\u60c5\u51b5\u4e86\n\n\u6211\u4eec\u5c1d\u8bd5\u5bfb\u6c42\u70b9\u4e0e\u8fb9\u7684\u5173\u7cfb\u3002\n\n\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0y0wlgeu.png)\n\n\u5982\u679c a \u5230 b \u5fc5\u987b\u7ecf\u8fc7 $g1$ \u4e0e $g2$ \u7684\u8fde\u8fb9\uff0c\u90a3\u4e48 a \u5230 $g2$ \u5c31\u5fc5\u987b\u7ecf\u8fc7 $g1$\uff0cb \u5230 $g1$ \u5c31\u5fc5\u987b\u8981\u7ecf\u8fc7 $g2$.\n\n\u8fd9\u4e0d\u5c31\u662f\u6211\u4eec\u7b2c\u4e8c\u95ee\u5728\u505a\u7684\u4e8b\u5417\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u95ee\u4e5f\u89e3\u51b3\u4e86\u3002\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#include<cstring>\n#define For(x,y,z) for(int x=y;x<=z;x++)\nusing namespace std;\nconst int N=1e5+10;\nvector<int>e[N],tr[N<<1];\nstack<int>s;\nmap<pair<int,int>,bool>ma;\nint dfn[N],low[N],fa[N<<1][25],dep[N<<1],id,tot;\nvoid tarjan(int cur)\n{\n\tdfn[cur]=low[cur]=++tot;\n\ts.push(cur);\n\tfor(int i=0;i<e[cur].size();i++)\n\t{\n\t\tint nt=e[cur][i];\n\t\tif(!dfn[nt])\n\t\t{\n\t\t\ttarjan(nt);\n\t\t\tlow[cur]=min(low[cur],low[nt]);\n\t\t\tif(low[nt]>=dfn[cur])\n\t\t\t{\n\t\t\t\ttr[cur].push_back(++id);\n\t\t\t\ttr[id].push_back(cur);\n\t\t\t\tint p;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tp=s.top();\n\t\t\t\t\ts.pop();\n\t\t\t\t\ttr[p].push_back(id);\n\t\t\t\t\ttr[id].push_back(p);\n\t\t\t\t}while(p!=nt);\n\t\t\t}\n\t\t}\n\t\telse low[cur]=min(low[cur],dfn[nt]);\n\t}\n\treturn ;\n}\nvoid dfs(int cur)\n{\n\tfor(int i=0;i<tr[cur].size();i++)\n\t{\n\t\tint nt=tr[cur][i];\n\t\tif(nt==fa[cur][0]) continue;\n\t\tfa[nt][0]=cur;\n\t\tdep[nt]=dep[cur]+1;\n\t\tdfs(nt);\n\t}\n}\nvoid tarjan2(int cur,int f)\n{\n\tdfn[cur]=low[cur]=++tot;\n\tfor(int i=0;i<e[cur].size();i++)\n\t{\n\t\tint nt=e[cur][i];\n\t\tif(nt==f) continue;\n\t\tif(!dfn[nt])\n\t\t{\n\t\t\ttarjan2(nt,cur);\n\t\t\tif(low[nt]>dfn[cur]) ma[make_pair(cur,nt)]=ma[make_pair(nt,cur)]=1;\n\t\t\tlow[cur]=min(low[cur],low[nt]);\n\t\t}\n\t\telse low[cur]=min(low[cur],dfn[nt]);\n\t}\n}\nint LCA(int x,int y)\n{\n\tif(dep[y]>dep[x]) swap(x,y);\n\tfor(int i=20;i>=0;i--) if(dep[fa[x][i]]>=dep[y]) x=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nbool pd(int a,int b,int c)\n{\n\tif(LCA(a,b)==c) return 1;\n\tint lca_ac=LCA(a,c),lca_bc=LCA(b,c);\n\tif(lca_ac==c&&lca_bc!=c||lca_ac!=c&&lca_bc==c) return 1;\n\treturn 0;\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tid=n;\n\tFor(i,1,m)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t}\n\ttarjan(1);\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(low,0,sizeof(low));\n\ttot=0;\n\ttarjan2(1,1);\n\tdep[1]=1;\n\tdfs(1);\n\tFor(i,1,20)\n\t\tFor(j,1,id)\n\t\t\tfa[j][i]=fa[fa[j][i-1]][i-1];\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tint op;\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tint s,t,u,v;\n\t\t\tscanf(\"%d%d%d%d\",&s,&t,&u,&v);\n\t\t\tif(!ma[make_pair(u,v)]) puts(\"yes\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(pd(s,u,v)&&pd(t,v,u)||pd(s,v,u)&&pd(t,u,v)) puts(\"no\");\n\t\t\t\telse puts(\"yes\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint a,b,c;\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tif(pd(a,b,c)) puts(\"no\");\n\t\t\telse puts(\"yes\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1654955297,
        "uid": 571634,
        "name": "hgzxwzf",
        "ccfLevel": 7,
        "title": "P4334 [COI2007] Policija"
    },
    {
        "content": "\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u4e2a\u61d2\u4eba\u505a\u6cd5\uff0c**\u867d\u7136\u8fc7\u4e0d\u4e86\u6b64\u9898\uff08\u88ab\u5361\u7a7a\u95f4\uff09**\uff0c\u4f46\u662f\u4f9d\u7136\u6709\u53c2\u8003\u4ef7\u503c\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u95ee\uff0c\u5373\u8be2\u95ee\u5e7f\u4e49\u5706\u65b9\u6811\u4e0a\uff0c$A\\rightarrow B$ \u662f\u5426\u7ecf\u8fc7 $C$\u3002\n\n\u5982\u679c\u6211\u61d2\u5f97\u518d\u53bb\u5199\u4e00\u4e2a\u5272\u8fb9\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5**\u628a\u7b2c\u4e00\u95ee\u8f6c\u5316\u6210\u7b2c\u4e8c\u95ee**\u3002\n\n\u5373\u5728\u6700\u521d**\u8fde\u8fb9\u7684\u65f6\u5019\u589e\u52a0\u4e00\u4e2a\u4e2d\u8f6c\u8282\u70b9\uff0c\u7528\u6b64\u8282\u70b9\u4ee3\u6307\u539f\u5148\u7684\u8fd9\u4e00\u6761\u8fb9**\u3002\n\n\u8fd9\u6837\u4e8c\u8005\u7684\u8be2\u95ee\u683c\u5f0f\u5c31\u7edf\u4e00\u4e86\uff0c\u540c\u65f6~~\u5947\u602a\u7684\u5185\u5b58\u6d88\u8017\u589e\u52a0\u4e86\uff01~~\n\n### \u4f1a MLE \u7684\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n#include <cstdlib>\n#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <bitset>\nusing namespace std;\n\n#define mp(x ,y) make_pair(x ,y)\n#define rg register\n#define il inline\n#define MX (600000 + 1)\n\nint read(){\n\trg char k = getchar(); int x = 0;\n\twhile(k < '0' || k > '9') k = getchar();\n\twhile(k >= '0' && k <= '9')\n\t\tx = x * 10 + k - '0' ,k = getchar();\n\treturn x;\n}\n\nint org[MX] ,tot ,RRT[MX + 100001];\nstruct edge{\n\tint next ,node;\n}h[500001 * 7];\nvoid addedge(int u ,int v ,int *head){\n\th[++tot].next = head[u];\n\thead[u] = tot ,h[tot].node = v;\n\t// cerr << u << \" \" << v << \" L\" << endl;\n}\n\nstruct HASH{\n\tsize_t operator ()(const pair<int ,int> k)const{\n\t\treturn (k.first << 31) ^ k.second;\n\t} \n};\nunordered_map<pair<int ,int> ,int ,HASH> E;\n\nbitset<MX> flg;\nint cnt ,DFN[MX] ,low[MX];\nint col ,stk[MX] ,TOP;\nvoid tarjan2(int x ,int f){\n\tDFN[x] = low[x] = ++cnt ,stk[++TOP] = x;\n\tif(cnt % 1000 == 0) cerr << cnt << endl;\n\tfor(int i = org[x] ; i ; i = h[i].next){\n\t\t#define d h[i].node\n\t\tif((h[i].node) == f) continue;\n\t\tif(!DFN[d]){tarjan2(d ,x);\n\t\t\tif(low[d] < low[x]) low[x] = low[d];\n\t\t\tif(low[d] >= DFN[x]){\n\t\t\t\t#define top TOP\n\t\t\t\tif(top <= 2){\n\t\t\t\t\taddedge(x ,d ,RRT) ,addedge(d ,x ,RRT);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++col; addedge(col ,x ,RRT) ,addedge(x ,col ,RRT);\n\t\t\t\taddedge(col ,d ,RRT) ,addedge(d ,col ,RRT);\n\t\t\t\twhile(stk[top] != d){\n\t\t\t\t\taddedge(col ,stk[top] ,RRT);\n\t\t\t\t\taddedge(stk[top] ,col ,RRT);\n\t\t\t\t\t--top;\n\t\t\t\t}--top;\n\t\t\t\t#undef top\n\t\t\t}\n\t\t}else if(DFN[d] < low[x]) low[x] = DFN[d];\n\t\t#undef d\n\t}\n}\n\nint n ,m;\n#define fa(x) DFN[x]\n#define dep(x) low[x]\n#define size(x) stk[x]\n#define hson(x) org[x]\nvoid dfs1(int x){\n\tsize(x) = 1; hson(x) = 0;\n\tfor(int i = RRT[x] ; i ; i = h[i].next){\n\t\t#define d h[i].node\n\t\tif(d == fa(x)) continue;\n\t\tfa(d) = x ,dep(d) = dep(x) + 1;\n\t\tdfs1(d) ,size(x) += size(d);\n\t\tif(size(d) > size(hson(x))) hson(x) = d;\n\t}\n}\t\n\nint &top(int x){\n\treturn (x & 1) ? h[x >> 1].node : h[x >> 1].next;\n}\nvoid dfs2(int x){\n\tif(hson(x)) top(hson(x)) = top(x) ,dfs2(hson(x));\n\tfor(int i = RRT[x] ; i ; i = h[i].next){\n\t\tif(d  == fa(x) || d == hson(x))\n\t\t\tcontinue;\n\t\ttop(d) = d ,dfs2(d);\n\t}\n\t#undef d\n}\n\nint LCA(int x ,int y){\n\twhile(top(x) != top(y)){\n\t\tif(dep(top(x)) < dep(top(y))) swap(x ,y);\n\t\tx = fa(top(x));\n\t}return dep(x) < dep(y) ? x : y;\n}\n\nint dist(int x ,int y){\n\tint lca = LCA(x ,y);\n\treturn dep(x) + dep(y) - dep(lca) - dep(fa(lca));\n}\n\nint main(){\n\tn = read() ,m = read() ,col = n + m;\n\tfor(int i = 1 ,u ,v ; i <= m ; ++i){\n\t\tu = read() ,v = read();\n\t\taddedge(u ,i + n ,org) ,addedge(i + n ,u ,org);\n\t\taddedge(v ,i + n ,org) ,addedge(i + n ,v ,org);\n\t\tE[mp(u ,v)] = i + n;\n\t}tarjan2(1 ,1);\n\t\n\tfa(1) = 0 ,dep(1) = 1 ,dfs1(1);\n\ttop(1) = 1 ,dfs2(1);\n\tint q = read() ,type ,u ,v ,x ,y;\n\twhile(q--){\n\t\ttype = read() ,u = read() ,v = read();\n\t\tif(type == 1){\n\t\t\tx = read() ,y = read();\n\t\t\tint tr = 0;\n\t\t\tif(E.find(mp(x ,y)) != E.end()) tr = E[mp(x ,y)];\n\t\t\telse tr = E[mp(y ,x)];\n\t\t\tif(dist(tr ,u) + dist(tr ,v) == dist(u ,v) + 1) puts(\"no\");\n\t\t\telse puts(\"yes\");\n\t\t}\n\t\telse{\n\t\t\tx = read();\n\t\t\tif(dist(x ,u) + dist(x ,v) == dist(u ,v) + 1) puts(\"no\");\n\t\t\telse puts(\"yes\");\n\t\t}\n\t}return 0;\n} \n```",
        "postTime": 1582456936,
        "uid": 47863,
        "name": "Imakf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4334 \u3010[COI2007] Policija\u3011"
    },
    {
        "content": "~~\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u771f\u7684\u662f\u4e00\u9053\u5361\u7a7a\u95f4\u597d\u9898\u6211\u8fd9\u9053\u9898\u63d0\u4ea4\u4e86\u8db3\u8db3\u4e24\u9875\u624d\u628a\u7a7a\u95f4\u5361\u8fc7~~   \n\n[\u5728\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/phkblog/solution-p4334)\n\n\u9996\u5148\u89c2\u5bdf\u9898\u9762\uff1a  \n\u9898\u610f\u5927\u81f4\u662f\u95ee\u5c0f\u5077\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u662f\u5426\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u6216\u4e00\u6761\u8fb9\u3002\u89c2\u5bdf\u9898\u610f\u53ef\u4ee5\u6bd4\u8f83\u8f7b\u677e\u7684\u60f3\u5230\u8fd9\u662f\u5728\u95ee\u56fe\u4e0a\u7684\u5272\u70b9\u548c\u5272\u8fb9\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u6027\u8d28\u662f\uff1a**\u5982\u679c\u88ab\u8be2\u95ee\u7684\u70b9\uff08\u8fb9\uff09\u662f\u5272\u70b9\uff08\u8fb9\uff09\u4e14\u5c0f\u5077\u8981\u4ece\u88ab\u5176\u5206\u5f00\u7684\u4e00\u90e8\u5206\u8dd1\u5230\u53e6\u4e00\u90e8\u5206\u7684\u8bdd\uff0c\u5219\u5fc5\u987b\u8981\u7ecf\u8fc7\u8be5\u70b9\uff08\u8fb9\uff09\u3002**  \n\n\u63a5\u4e0b\u6765\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u89e3\u51b3\uff0c\u627e\u5230\u4e00\u4e2a\u56fe\u4e0a\u7684\u5272\u70b9\u5272\u8fb9\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\u64cd\u4f5c\u3002\u4f46\u662f\u95ee\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5224\u65ad\u7ed9\u51fa\u7684\u4e24\u70b9\u662f\u5426\u5728\u88ab\u5206\u88c2\u7684\u4e24\u90e8\u5206\u4e2d\u7684\u4e0d\u540c\u90e8\u5206\u3002  \n\n\u518d\u5f80\u4e0b\u601d\u8003\uff0c\u4e00\u4e2a\u56fe\u4e0a\u7684\u552f\u4e00\u8def\u5f84\u662f\u975e\u5e38\u4e0d\u597d\u786e\u5b9a\u7684\uff0c\u8981\u662f\u5f3a\u884c\u66b4\u529b\u5224\u65ad\u65f6\u95f4\u5fc5\u7136\u4f1a\u7206\u70b8\u3002\u518d\u601d\u8003\u4e00\u4e0b\u4f60\u6216\u8bb8\u53ef\u4ee5\u60f3\u5230\uff1a\u4e00\u4e2a\u56fe\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u662f\u590d\u6742\u591a\u6837\u7684\uff0c\u4f46\u662f\u5982\u679c\u5728\u4e00\u68f5\u6811\u4e0a\u5462\uff1f**\u6811\u7684\u4e24\u70b9\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84**\uff0c\u5982\u679c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u56fe\u800c\u662f\u4e00\u68f5\u6811\u7684\u8bdd\u5c31\u53ef\u4ee5\u5728\u5f88\u4f18\u7684\u65f6\u95f4\u5185\u77e5\u9053\u4e24\u4e2a\u70b9\u95f4\u662f\u5426\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u6216\u8005\u4e00\u6761\u8fb9\u3002  \n\n\u5230\u8fd9\u91cc\u601d\u8def\u5c31\u6709\u4e86\uff1a\u5c06\u56fe\u8f6c\u5316\u4e3a\u6811\u3002\u5982\u4f55\u8f6c\u5316\uff1f\u663e\u7136\u53ef\u4ee5\u4f7f\u7528\u7f29\u70b9\uff0c\u800c\u7531\u4e8e\u8fd9\u9898\u662f\u65e0\u5411\u56fe\u4e14\u6709\u4e24\u79cd\u8be2\u95ee\uff0c\u6240\u4ee5\u9700\u8981\u6211\u4eec\u8fdb\u884c**\u4e00\u6b21\u8fb9\u53cc\u7f29\u70b9\u548c\u4e00\u6b21\u70b9\u53cc\u7f29\u70b9**\uff08\u5982\u679c\u4e0d\u6e05\u695a\u600e\u4e48\u64cd\u4f5c\u53ef\u4ee5\u51fa\u95e8\u53f3\u8f6c\u5b66\u4e60\u4e00\u4e0b\uff09\u3002  \n\n\u7f29\u70b9\u5b8c\u4e86\u4e4b\u540e\u6211\u4eec\u5c31\u5c06\u56fe\u8f6c\u5316\u4e3a\u4e86\u4e00\u68f5\u6811\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5229\u7528**\u6811\u5256+lca**\u7684\u8dd1\u6cd5\u518d\u52a0\u4e0a\u4e00\u4e9b\u7ec6\u8282\u7684\u5224\u65ad\u6765\u89e3\u51b3\u95ee\u9898\u4e86\u3002  \n\n\u518d\u7b80\u5355\u8bb2\u4e00\u4e0b\u5224\u65ad\u65b9\u6cd5\uff0c\u70b9\u7684\u5224\u65ad\u4e0d\u5fc5\u591a\u8bf4\uff0c\u5c31\u662f\u7b80\u5355\u5224\u65ad\u3002\u4f46\u662f\u5bf9\u4e8e\u8fb9\u6765\u8bf4\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u662f\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u8f93\u5165\u6211\u4eec\u53ef\u4ee5\u5728lca\u5f80\u4e0a\u8df3\u65f6\u5224\u6bb5\u94fe\u5e95\u94fe\u9876\u7684dfn\u662f\u5426\u80fd\u5c06\u4e24\u4e2a\u70b9\u5750\u6807\u5305\u542b\u5176\u4e2d\u5c31\u884c\u3002\u8fd8\u6709\u4e00\u4e2a\u5c0f\u5751\u70b9\u5c31\u662f\u4e00\u6761\u94fe\u7684\u94fe\u9876\u548c\u5b83\u7684\u7236\u8282\u70b9\u4e4b\u95f4\u8fd8\u6709\u4e00\u6761\u8fb9\u9700\u8981\u8fdb\u884c\u7279\u5224\uff0c\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002  \n\n\u4ee5\u4e0b\u5c31\u662f\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint n, m, q;\nint head[100010], ver[1000010], Next[1000010], cnt = 1;\n//\u5f00\u6570\u7ec4\u6ce8\u610f\u65e0\u5411\u56fe\u5f00\u4e24\u500d\u5185\u5b58\n//\u8fd9\u91cccnt\u521d\u503c\u8d4b1\u7684\u539f\u56e0\u662f\u65e0\u5411\u56fe\u6765\u56de\u4f1a\u5b58\u4e24\u6761\u8fb9\n//\u53ef\u4ee5\u5229\u75282n ^ 1 = 2n + 1\u7684\u6027\u8d28\u8fdb\u884c\u8fb9\u53cc\u7f29\u70b9\nint dfn_edcc[100010], low_edcc[100010], id_edcc;\nint head_edcc[1200010], ver_edcc[1000010], Next_edcc[1000010];   int cnt_edcc;\nint tot_edcc, belong_edcc[100010];\nbool bridge[1000010];\nint tid_edcc;\n\nint dfn_vdcc[100010], low_vdcc[100010], id_vdcc;\nint head_vdcc[1200010], ver_vdcc[1000010], Next_vdcc[1000010];   int cnt_vdcc;\nint tot_vdcc, belong_vdcc[100010], root_vdcc, stack[100010], top;\nbool cut[100010];\nint new_id[1200010], tid_vdcc;\nvector <int> vdcc[100010];\n\nstruct tree_edcc {\n\tint fa, son, top, size, dep, id;\n}t[1200010];\n\nstruct tree_vdcc {\n\tint fa, son, top, size, dep, id;\n}T[1200010];\n\n//edcc\u662f\u8fb9\u53cc , vdcc\u662f\u70b9\u53cc\n//\u81f3\u4e8e\u6570\u7ec4\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5f00\u662f\u6211\u8bd5\u4e86\u5f88\u591a\u6b21\u4e4b\u540e\u624d\u5f00\u6210\u8fd9\u6837\n//\u5176\u4ed6\u60c5\u51b5\u90fd\u4f1a\u88ab\u5361re\u6216\u8005mle , \u6709\u77e5\u9053\u539f\u56e0\u7684\u5927\u4f6c\u8fd8\u5e0c\u671b\u544a\u8bc9\u849f\u84bb\u4e00\u4e0b \n\ninline void add(int x, int y) {\n\tver[++cnt] = y; Next[cnt] = head[x]; head[x] = cnt;\n}\n\ninline void add_edcc(int x, int y) {\n\tver_edcc[++cnt_edcc] = y;\n    \tNext_edcc[cnt_edcc] = head_edcc[x];\n        head_edcc[x] = cnt_edcc;\n}\n\ninline void tarjan_edcc(int x, int last_edge) {//\u8fb9\u53cc\u7f29\u70b9\n \tdfn_edcc[x] = low_edcc[x] = ++id_edcc;\n\tfor (int i = head[x]; i; i = Next[i]) {\n\t\tint y = ver[i];\n\t\tif (!dfn_edcc[y]) {\n\t\t\ttarjan_edcc(y, i);\n\t\t\tlow_edcc[x] = min(low_edcc[x], low_edcc[y]);\n\t\t\tif (low_edcc[y] > dfn_edcc[x]) bridge[i] = bridge[i ^ 1] = 1;//\u8bb0\u5f55\u6865\n\t\t}\n\t\telse if (i != (last_edge ^ 1)) \n        \t\tlow_edcc[x] = min(low_edcc[x], dfn_edcc[y]);\n\t}\n}\n\ninline void dfs_edcc(int x) {//\u8fb9\u53cc\u7f29\u70b9\n\tbelong_edcc[x] = tot_edcc;\n\tfor (int i = head[x]; i; i = Next[i]) {\n\t\tint y = ver[i];\n\t\tif (belong_edcc[y] || bridge[i]) continue;\n\t\tdfs_edcc(y);\n\t}\n}\n\ninline void dfs1_edcc(int x, int fa, int dep) {//\u6811\u5256 , \u4e0b\u9762vdcc\u4e5f\u662f\u76f8\u540c\u64cd\u4f5c\n\tt[x].fa = fa;\n\tt[x].dep = dep;\n\tt[x].size = 1;\n\tint maxson = 0;\n\tfor (int i = head_edcc[x]; i; i = Next_edcc[i]) {\n\t\tint y = ver_edcc[i];\n\t\tif (y == fa) continue;\n\t\tdfs1_edcc(y, x, dep + 1);\n\t\tt[x].size += t[y].size;\n\t\tif (maxson < t[y].size) maxson = t[y].size, t[x].son = y;\n\t}\n}\n\ninline void dfs2_edcc(int x, int top) {\n\tt[x].top = top;\n\tt[x].id = ++tid_edcc;\n\tif (!t[x].son) return;\n\tdfs2_edcc(t[x].son, top);\n\tfor (int i = head_edcc[x]; i; i = Next_edcc[i]) {\n\t\tint y = ver_edcc[i];\n\t\tif (y == t[x].fa || y == t[x].son) continue;\n\t\tdfs2_edcc(y, y);\n\t}\n}\n\ninline bool query_edcc(int x, int y, int px, int py) {//\u8be2\u95ee\u64cd\u4f5c , \u5c31\u662f\u5728\u8dd1lca\u7684\u8fc7\u7a0b\u4e2d\u52a0\u5224\u65ad\n\twhile (t[x].top != t[y].top) {\n\t\tif (t[t[x].top].dep < t[t[y].top].dep) swap(x, y);\n\t\tif (t[x].id >= t[px].id && t[t[x].top].id <= t[py].id) return 0;\n\t\tif (t[t[x].top].id == t[px].id && t[t[t[x].top].fa].id == t[py].id) return 0;\n\t\tx = t[t[x].top].fa;\n\t}\n\tif (t[x].dep < t[y].dep) swap(x, y);\n\tif (t[x].id >= t[px].id && t[y].id <= t[py].id) return 0;\n\treturn 1;\n}\n\ninline void add_vdcc(int x, int y) {\n\tver_vdcc[++cnt_vdcc] = y; Next_vdcc[cnt_vdcc] = head_vdcc[x]; head_vdcc[x] = cnt_vdcc;\n}\n\ninline void tarjan_vdcc(int x) {//\u70b9\u53cc\u7f29\u70b9\n\tdfn_vdcc[x] = low_vdcc[x] = ++id_vdcc; stack[++top] = x;\n\tif (x == root_vdcc && head[x] == 0) {\n\t\tvdcc[++tot_vdcc].push_back(x);\n\t\treturn;\n\t}\n\tint son = 0;\n\tfor (int i = head[x]; i; i = Next[i]) {\n\t\tint y = ver[i];\n\t\tif (!dfn_vdcc[y]) {\n\t\t\ttarjan_vdcc(y);\n\t\t\tlow_vdcc[x] = min(low_vdcc[x], low_vdcc[y]);\n\t\t\tif (low_vdcc[y] >= dfn_vdcc[x]) {\n\t\t\t\tson++;\n\t\t\t\tif (x != root_vdcc || son >= 2) cut[x] = 1;\n\t\t\t\tint now; tot_vdcc++;\n\t\t\t\tdo {\n\t\t\t\t\tnow = stack[top--];\n\t\t\t\t\tvdcc[tot_vdcc].push_back(now);\n\t\t\t\t} while (y != now);\n\t\t\t\tvdcc[tot_vdcc].push_back(x);\n\t\t\t}\n\t\t}\n\t\telse low_vdcc[x] = min(low_vdcc[x], dfn_vdcc[y]);\n\t}\n}\n\ninline void dfs1_vdcc(int x, int fa, int dep) {\n\tT[x].fa = fa;\n\tT[x].dep = dep;\n\tT[x].size = 1;\n\tint maxson = 0;\n\tfor (int i = head_vdcc[x]; i; i = Next_vdcc[i]) {\n\t\tint y = ver_vdcc[i];\n\t\tif (y == fa) continue;\n\t\tdfs1_vdcc(y, x, dep + 1);\n\t\tT[x].size += T[y].size;\n\t\tif (maxson < T[y].size) maxson = T[y].size, T[x].son = y;\n\t}\n}\n\ninline void dfs2_vdcc(int x, int top) {\n\tT[x].top = top;\n\tT[x].id = ++tid_vdcc;\n\tif (!T[x].son) return;\n\tdfs2_vdcc(T[x].son, top);\n\tfor (int i = head_vdcc[x]; i; i = Next_vdcc[i]) {\n\t\tint y = ver_vdcc[i];\n\t\tif (y == T[x].fa || y == T[x].son) continue;\n\t\tdfs2_vdcc(y, y);\n\t}\n}\n\ninline bool query_vdcc(int x, int y, int px) {//\u5224\u5272\u8fb9\u8be2\u95ee , \u6ce8\u610f\u7279\u5224\n\twhile (T[x].top != T[y].top) {\n\t\tif (T[T[x].top].dep < T[T[y].top].dep) swap(x, y);\n\t\tif (T[x].id >= T[px].id && T[T[x].top].id <= T[px].id) return 0;\n\t\tx = T[T[x].top].fa;\n\t}\n\tif (T[x].dep < T[y].dep) swap(x, y);\n\tif (T[x].id >= T[px].id && T[y].id <= T[px].id) return 0;\n\treturn 1;\n}\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile (ch < '0' || ch > '9') {if (ch == '-') f = -1; ch = getchar();}\n\twhile (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar();\n\treturn x * f;\n}\n\nint main() {\n\tn = read();  m = read();\n\tint x, y;\n\tfor (int i = 1; i <= m; i++) {\n\t\tx = read(); y = read();\n\t\tadd(x, y); add(y, x);\n\t}\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!dfn_edcc[i]) tarjan_edcc(i, 0);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!belong_edcc[i]) tot_edcc++, dfs_edcc(i);\n\t}\n\tcnt_edcc = 1;\n\tfor (int i = 2; i <= cnt; i++) {\n\t\tint x = ver[i ^ 1], y = ver[i];\n\t\tif (belong_edcc[x] == belong_edcc[y]) continue;\n\t\tadd_edcc(belong_edcc[x], belong_edcc[y]);\n\t}\n\tdfs1_edcc(1, 0, 1);\n\tdfs2_edcc(1, 1);\n\t//\u8fb9\u53cc\u76f8\u5173\u64cd\u4f5c\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!dfn_vdcc[i]) root_vdcc = i, tarjan_vdcc(i);\n\t}\n\tid_vdcc = cnt;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (cut[i]) new_id[i] = ++id_vdcc;\n\t}\n\tcnt_vdcc = 1;\n\tfor (int i = 1; i <= tot_vdcc; i++) {\n\t\tfor (int j = 0; j < vdcc[i].size(); j++) {\n\t\t\tint x = vdcc[i][j];\n\t\t\tif (cut[x]) {\n\t\t\t\tadd_vdcc(i, new_id[x]);\n\t\t\t\tadd_vdcc(new_id[x], i);\n\t\t\t\tbelong_vdcc[x] = new_id[x];\n\t\t\t}\n\t\t\telse belong_vdcc[x] = i;\n\t\t}\n\t}\n\tdfs1_vdcc(1, 0, 1);\n\tdfs2_vdcc(1, 1);\n\t//\u70b9\u53cc\u76f8\u5173\u64cd\u4f5c\n\tq = read();\n\tint opt, ss, tt;\n\twhile (q--) {\n\t\topt = read(); ss = read(); tt = read();\n\t\tif (opt == 1) {\n\t\t\tx = read(); y = read();\n\t\t\tif (belong_edcc[ss] == belong_edcc[tt]) { puts(\"yes\"); continue; }\n\t\t\tif (belong_edcc[x] == belong_edcc[y]) { puts(\"yes\"); continue; }\n\t\t\t//\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u70b9\u53cc\u5206\u91cf\u5185\u5219\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe , \u4e0d\u7406\u89e3\u53ef\u4ee5\u624b\u7ed8\u4e00\u4e2a\u56fe\u6a21\u62df\u4e00\u4e0b \n\t\t\tif (t[belong_edcc[x]].dep < t[belong_edcc[y]].dep) swap(x, y);\n\t\t\t//\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u7f16\u53f7\u53ef\u4ee5\u8c03\u6362\u4e00\u4e0b\u987a\u5e8f\u51cf\u5c0f\u5224\u65ad\u91cf\n\t\t\tint ret = query_edcc(belong_edcc[ss], belong_edcc[tt], belong_edcc[x], belong_edcc[y]);\n\t\t\tif (ret) puts(\"yes\");\n\t\t\telse puts(\"no\");\n\t\t}\n\t\tif (opt == 2) {\n\t\t\tx = read();\n\t\t\tif (x == ss || x == tt) {puts(\"no\"); continue;}\n\t\t\tif (!cut[x]) { puts(\"yes\"); continue; }\n\t\t\t//\u5982\u679cx\u4e0d\u662f\u5272\u70b9\u5c31\u4e00\u5b9a\u4e3ayes\n\t\t\tint ret = query_vdcc(belong_vdcc[ss], belong_vdcc[tt], belong_vdcc[x]);\n\t\t\tif (ret) puts(\"yes\");\n\t\t\telse puts(\"no\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1572097651,
        "uid": 18282,
        "name": "Phykyer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4334 \u3010[COI2007] Policija\u3011"
    },
    {
        "content": "## \u642c\u8fd0+\u7ffb\u8bd1Croatian Olympiad in Informatics 2007\u5b98\u65b9\u9898\u89e3\n\nA single depth-first search collects all the information needed to answer the queries. While searching,we store the following numbers for each vertex:\n \n\u6df1\u641c\u4e00\u904d\u5c31\u80fd\u641c\u96c6\u5230\u6211\u4eec\u56de\u7b54\u67e5\u8be2\u6240\u9700\u7684\u4fe1\u606f\u3002\u8bb0\u5f55\u4ee5\u4e0b\u4fe1\u606f\uff1a\n \n\u2022 Discovery time \u2013 discrete time index at which we started processing the vertex\n \n\u641c\u7d22\u5230\u8fd9\u4e2a\u8282\u70b9\u65f6\u7684\u65f6\u95f4\u6233\n \n\u2022 Finishing time \u2013 time index when we finished processing the vertex\n \n\u641c\u5b8c\u8fd9\u4e2a\u8282\u70b9\u65f6\u7684\u65f6\u95f4\u6233\n \n\u2022 Depth \u2013 the depth of the vertex in the DFS tree\n \nDFS\u6811\u4e2d\u8fd9\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\n \n\u2022 lowlink \u2013 the vertex with the least discovery time, that is reachable from the current vertex or\nfrom its descendants (via a single back edge)\n \n\u8be5\u70b9\u6216\u8005\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u80fd\u591f\u8ffd\u6eaf\u5230\u6700\u65e9\u7684\u8282\u70b9\u7684\u53d1\u73b0\u65f6\u95f4\u6233\n \nThese numbers allow us to construct two useful functions:\n \n\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u8ba9\u6211\u4eec\u6784\u9020\u8fd9\u4e24\u4e2a\u51fd\u6570\uff1a\n \n\u2022 is_descendant(A, B) \u2013 is vertex A in the subtree rooted at B\n \nA\u662f\u5426\u662fB\u7684\u540e\u4ee3\n \n\u2022find_related_child(A, B) \u2013 when A is in vertex B's subtree, find the immediate child of B suchthat A is a descendant of that child (in other words, if B has multiple children, find which ofthose subtrees A is in)\n \n\u5f53A\u5728B\u7684\u5b50\u6811\u4e2d\u65f6\uff0c\u5728B\u7684\u513f\u5b50\u4e2d\u627e\u5230\u90a3\u4e2a\u5b50\u6811\u4e2d\u5305\u542bA\u7684\u8282\u70b9\n \nWith some case analysis, it is possible to answer the queries using the described functions. See thesample code for details.\n \n\u901a\u8fc7\u4e00\u4e9b\u6837\u4f8b\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u56de\u7b54\u67e5\u8be2\u3002\u5b9e\u73b0\u7ec6\u8282\u8bf7\u770b\u540e\u9762\u7684\u4ee3\u7801\u3002\n\uff08\u642c\u8fd0\u8005\u6ce8\uff1a\u540e\u9762\u7684COI\u6807\u7a0b\u4e2d\u6709<\uff1f\u8fd0\u7b97\u7b26\uff0c\u4f1aCE\uff09\n \nFor an in-depth discussion of depth-first search and its applications, see \"Introduction to Algorithms\" by Cormen et al.\n \n\u5173\u4e8eDFS\u7684\u6df1\u5165\u8ba8\u8bba\u548c\u5e94\u7528\uff0c\u53c2\u89c1\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u3002\uff08\u96fe\uff09\n \nThis problem is closely related to finding articulation points and bridges in a graph.\n \n\u8fd9\u4e2a\u95ee\u9898\u4e0e\u5728\u56fe\u4e2d\u627e\u5230\u5272\u70b9\u548c\u6865\u5bc6\u5207\u76f8\u5173\u3002\n\n```\n/*\n  Croatian Olympiad in Informatics 2007\n  Task POLICIJA\n*/\n\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n\nusing namespace std;\n\nint n, m;\nstruct edge {\n   int u, v;\n   edge( int U, int V ) { u = U; v = V; }\n};\nbool operator < ( const edge &A, const edge &B ) { return A.u < B.u; }\n\nstruct sparse_graph {\n   vector<edge> E;\n   vector< vector<edge>::iterator > V;\n\n   void insert_edge( const edge &e ) {\n      E.push_back( e );\n   }\n\n   void init() {\n      V.resize(n+1);\n      sort( E.begin(), E.end() );\n      V[0] = E.begin();\n      for( int i = 1; i <= n; ++i )\n         for( V[i] = V[i-1]; V[i] != E.end() && V[i]->u < i; ++V[i] );\n   }\n\n   inline vector<edge>::iterator begin( int u ) { return V[u]; }\n   inline vector<edge>::iterator end( int u ) { return V[u+1]; }\n} graph;\n\nvector<int> discover, finish, lowlink, depth;\nint Time = 0;\n\nvector< vector<int> > children;\n\nvoid dfs( int u, int dad, int d ) {\n   discover[u] = lowlink[u] = Time++;\n   depth[u] = d;\n\n   for( vector<edge>::iterator it = graph.begin(u); it != graph.end(u); ++it ) {\n      if( it->v == dad ) continue;\n\n      if( discover[it->v] == -1 ) {\n         dfs( it->v, u, d+1 );\n         lowlink[u] <?= lowlink[it->v];\n         children[u].push_back( it->v );\n      } else {\n         lowlink[u] <?= discover[it->v];\n      }\n   }\n\n   finish[u] = Time++;\n}\n\nint is_descendant( int a, int b ) {\n   return discover[b] <= discover[a] && finish[a] <= finish[b];\n}\n\nint find_related_child( int me, int descendant ) {\n   int lo = 0, hi = children[me].size() - 1;\n   while( lo != hi ) {\n      int mid = (lo+hi) / 2;\n\n      if( discover[descendant] > finish[ children[me][mid] ] ) lo = mid+1;\n      else if( finish[descendant] < discover[ children[me][mid] ] ) hi = mid-1;\n      else lo = hi = mid;\n   }\n   return children[me][lo];\n}\n\nint main( void ) {\n   scanf( \"%d%d\", &n, &m );\n   for( int i = 0; i < m; ++i ) {\n      int u, v;\n      scanf( \"%d%d\", &u, &v ); --u; --v;\n      graph.insert_edge( edge( u, v ) );\n      graph.insert_edge( edge( v, u ) );\n   }\n   graph.init();\n   discover = finish = lowlink = depth = vector<int> (n, -1);\n   children.resize( n );\n   dfs( 0, -1, 0 );\n\n   scanf( \"%d\", &m );\n   for( int i = 0; i < m; ++i ) {\n      int tip, a, b, c, d;\n      scanf( \"%d%d%d%d\", &tip, &a, &b, &c ); --a; --b; --c;\n      if( tip == 1 ) {\n         scanf( \"%d\", &d ); --d;\n         if( is_descendant( c, d ) ) swap( c, d );\n\n         if( depth[d] != depth[c]+1 ) printf( \"yes\\n\" );\n         else if( lowlink[d] < discover[d] ) printf( \"yes\\n\" );\n         else if( is_descendant( a, d ) == is_descendant( b, d ) ) printf( \"yes\\n\" );\n         else printf( \"no\\n\" );\n\n      } else {\n         if( !is_descendant( a, c ) && !is_descendant( b, c ) ) printf( \"yes\\n\" );\n         else if( is_descendant( a, c ) && is_descendant( b, c ) ) {\n            int e = find_related_child( c, a );\n            int f = find_related_child( c, b );\n            if( e == f ) printf( \"yes\\n\" );\n            else if( lowlink[e] < discover[c] && lowlink[f] < discover[c] ) printf( \"yes\\n\" );\n            else printf( \"no\\n\" );\n         } else {\n            if( is_descendant( a, c ) ) swap( a, b );\n            int e = find_related_child( c, b );\n            if( lowlink[e] < discover[c] ) printf( \"yes\\n\" );\n            else printf( \"no\\n\" );\n         }\n      }\n   }\n\n   return 0;\n}\n```",
        "postTime": 1521780684,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4334 \u3010[COCI2007] Policija\u3011"
    },
    {
        "content": "\u5148\u5efa\u51fa\u539f\u56fe\u7684\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u8bbe $C(A, B)$ \u4e3a $A,B$ \u6240\u5728\u70b9\u53cc\u7684\u65b9\u70b9\u3002\n\n\u672c\u6587\u4e2d\u7684\u8def\u5f84\u5747\u6307\u5728\u5e7f\u4e49\u5706\u65b9\u6811\u7684\u7b80\u5355\u8def\u5f84\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u64cd\u4f5c 2 \u7684\u672c\u8d28\u662f\u8be2\u95ee $C$ \u662f\u5426\u5728 $A$ \u81f3 $B$ \u7684\u8def\u5f84\u4e0a\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 1\uff0c\u6211\u4eec\u53d1\u73b0\u82e5\u5220\u53bb\u8fde\u63a5 $G_1$ \u548c $G_2$ \u4e4b\u95f4\u7684\u9053\u8def\u540e $A$ \u548c $B$ \u4e0d\u8fde\u901a\u5f53\u4e14\u4ec5\u5f53\u8fde\u63a5 $G_1$ \u548c $G_2$ \u4e4b\u95f4\u7684\u9053\u8def\u662f\u5272\u8fb9\uff08$C(G_1, G_2)$ \u7684\u5ea6\u6570\u4e3a $2$\uff09\u4e14 $C(G_1, G_2)$ \u5728$A$ \u81f3 $B$ \u7684\u8def\u5f84\u4e0a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 LCA \u8fdb\u884c\u5224\u5b9a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+q)\\log n)$\uff0c\u74f6\u9888\u5728\u4e8e\u6c42 LCA\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct Edge{int nt, to;};\nconst int N=1e6+11;\nstruct Tree{\n  int cnt, h[N]; Edge e[N<<1];\n  int dep[N], st[N][19], du[N];\n  void link(int u, int v){\n    // printf(\"Node %d -> %d\\n\", u, v);\n    du[u]++;\n    e[++cnt]={h[u], v}, h[u]=cnt;\n    e[++cnt]={h[v], u}, h[v]=cnt;\n  }\n  void dfs(int u, int Fa){\n    dep[u]=dep[Fa]+1, st[u][0]=Fa;\n    for(int i=1; i<19; i++)\n      st[u][i]=st[st[u][i-1]][i-1];\n    for(int i=h[u], v; i; i=e[i].nt){\n      if((v=e[i].to)==Fa)continue;\n      dfs(v, u);\n    }\n  }\n  int Lca(int x, int y){ // \u500d\u589eLCA, \u53ef\u4ee5\u7528\u79bb\u7ebf\u7684Tarjan\u7b97\u6cd5\u3002\n    if(dep[x]<dep[y])swap(x, y);\n    for(int i=18; i>=0; i--)\n      if(dep[st[x][i]]>=dep[y])x=st[x][i];\n    if(x==y)return x;\n    for(int i=18; i>=0; i--)\n      if(st[x][i]!=st[y][i])\n        x=st[x][i], y=st[y][i];\n    return st[x][0];\n  }\n  bool solve2(int A, int B, int C){\n    int LCA=Lca(A, B);\n    if(Lca(LCA, C)!=LCA)return 0;// C\u5fc5\u987b\u5728LCA\u7684\u5b50\u6811\u4e2d\u3002\n    if(Lca(A, C)==C||Lca(B, C)==C)return 1;// C\u662fA\u6216B\u7684\u7956\u5148\u3002\n    return 0;\n  }\n  bool solve1(int A, int B, int P, int Q){\n    if(dep[Q]==dep[P])return 1; // \u65b9\u70b9\u53ea\u4f1a\u8fde\u63a5 P, Q \u4e24\u4e2a\u70b9\uff0c\u6df1\u5ea6\u4e00\u5b9a\u4e0d\u540c\u3002\n    if(dep[Q]<dep[P])swap(Q, P);\n    int Mid=st[Q][0];//\u8fde\u63a5P,Q\u7684\u65b9\u70b9\u3002\n    if(du[Mid]!=2)return 1;//\u5ea6\u6570\u4e0d\u80fd\u8d85\u8fc7\u4e8c\u3002\n    return !solve2(A, B, Mid);//\u5224\u65ad\u65b9\u70b9\u662f\u5426\u5728A,B\u7684\u8def\u5f84\u4e2d\u3002\n  }\n}Trees;\nstruct Graph{ // \u5efa\u51fa\u5706\u65b9\u6811\n  int cnt, h[N], Node; Edge e[N<<1];\n  void link(int u, int v){\n    e[++cnt]={h[u], v}, h[u]=cnt;\n    e[++cnt]={h[v], u}, h[v]=cnt;\n  }\n  int dfn[N], low[N], dfnt, Stack[N], Top;\n  void Tarjan(int u){\n    dfn[u]=low[u]=++dfnt, Stack[++Top]=u;\n    for(int i=h[u]; i; i=e[i].nt){\n      int v=e[i].to;\n      if(!dfn[v]){\n        Tarjan(v);\n        low[u]=min(low[u], low[v]);\n        if(low[v]>=dfn[u]){\n          Node++; Trees.link(Node, u);\n          for(int x=0; x!=v; Top--)\n            x=Stack[Top], Trees.link(Node, x);\n        }\n      }\n      else\n        low[u]=min(low[u], dfn[v]);\n    }\n  }\n  void Solve(int tt){Node=tt, Tarjan(1), Top=0;}\n}Graphs;\nint n, m, q;\nint main(){\n  cin>>n>>m;\n  for(int i=1, x, y; i<=m; i++)\n    cin>>x>>y, Graphs.link(x, y);\n  Graphs.Solve(n);\n  Trees.dfs(1, 0);\n  cin>>q;\n  while(q--){\n    int op;\n    cin>>op;\n    if(op==1){\n      int a, b, p, q;\n      cin>>a>>b>>p>>q;\n      puts(Trees.solve1(a, b, p, q)?\"yes\":\"no\");\n    }\n    else{\n      int a, b, c;\n      cin>>a>>b>>c;\n      puts(!Trees.solve2(a, b, c)?\"yes\":\"no\");\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1682866106,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "P4334"
    },
    {
        "content": "## P4334 [COI2007] Policija\n\n### \u9898\u610f\n\n\u4e00\u4e2a\u65e0\u91cd\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6b21\u8be2\u95ee\u5220\u6389\u4e00\u6761\u8fb9\u6216\u5220\u6389\u4e00\u4e2a\u70b9\u540e\u4e24\u4e2a\u70b9\u662f\u5426\u8054\u901a\u3002\n\n### \u601d\u8def\n\n\u8fde\u901a\u6027\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e7f\u4e49\u5706\u65b9\u6811\u89e3\u51b3\u3002\n\n1. \u5bf9\u4e8e\u5220\u6389\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\uff1a\n\n\u6211\u4eec\u5148\u8dd1 tarjan \u5efa\u51fa\u5706\u65b9\u6811\u3002\u5982\u4f55\u5224\u65ad\u4e24\u70b9\u5728\u5220\u53bb\u4e00\u4e2a\u70b9\u540e\u5728\u6811\u4e0a\u7684\u8fde\u901a\u6027\uff1f\u5f53\u4e14\u4ec5\u5f53\u88ab\u5220\u53bb\u7684\u70b9\u5728\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\u3002\u6839\u636e\u5706\u65b9\u6811\u7684\u6027\u8d28\uff0c\u5982\u679c\u88ab\u5220\u70b9\u5728\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5b83\u662f\u7b26\u5408\u4e0a\u9762\u7684\u5224\u65ad\u6761\u4ef6\u7684\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u5728\u8be2\u95ee\u7684\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\u5c31\u884c\u4e86\u3002\n\n2. \u5bf9\u4e8e\u5220\u6389\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\uff1a\n\n\u8003\u8651\u6211\u4eec\u5efa\u51fa\u6765\u7684\u5e7f\u4e49\u5706\u65b9\u6811\u662f\u4e00\u79cd\u600e\u6837\u7684\u5f62\u6001\u3002\u5b83\u4e00\u5b9a\u662f\u5706\u65b9\u70b9\u4ea4\u9519\u7684\u5f62\u5f0f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u6761\u8fb9\u82e5\u4e0d\u5728\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5185\uff0c\u5b83\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u65b9\u70b9\uff0c\u5e76\u8fde\u63a5\u5176\u539f\u6765\u7684\u4e24\u4e2a\u70b9\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u628a\u4e00\u6761\u8fb9\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u4e0a\u9762\u5904\u7406\u70b9\u4e00\u6837\u5904\u7406\u4e86\u3002\n\n### \u5b9e\u73b0\n\n\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e24\u70b9\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5256\u5b9e\u73b0\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5728\u8df3LCA\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u88ab\u5220\u70b9\u662f\u5426\u5728\u8d77\u7ec8\u70b9\u4e4b\u95f4\uff0c\u6211\u4eec\u7528\u94fe\u9996\u548c\u6df1\u5ea6\u5224\u65ad\u5373\u53ef\u3002\n\n\u7531\u4e8e\u9898\u76ee\u67e5\u8be2\u8fb9\u7684\u7ed9\u51fa\u65b9\u5f0f\u7ea6\u675f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 map \u5b9e\u73b0\u67e5\u8be2\u8fb9\u662f\u5426\u5728\u70b9\u53cc\u5185\u3002\u4ee3\u7801\u4e2d\uff0cminmax \u51fd\u6570\u4e3a C++11 \u8bed\u6cd5\uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u6392\u597d\u5e8f\u540e\u7684 pair \u3002\n\n\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+q(\\log n+\\log m))$\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\n#include<map>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=2e5+10,maxm=5e5+10;\n\ttypedef pair<int,int> pii;\n\tint n,m;\n\tstruct gragh{\n\t\tint ecnt,head[maxn],to[maxm<<1],nxt[maxm<<1];\n\t\tinline void addedge(int a,int b){\n\t\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;\n\t\t\tto[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;\n\t\t}\n\t}G1,G2;\n\tint tot,cnt,st[maxn],dfn[maxn],low[maxn];\n\tmap<pii,int> mp;\n\tvoid tarjan(int x,int f){\n\t\tdfn[x]=low[x]=++tot;\n\t\tst[++st[0]]=x;\n\t\tfor(int i=G1.head[x];i;i=G1.nxt[i]){\n\t\t\tint u=G1.to[i];\n\t\t\tif(u==f)continue;\n\t\t\tif(!dfn[u]){\n\t\t\t\ttarjan(u,x);\n\t\t\t\tlow[x]=min(low[x],low[u]);\n\t\t\t\tif(low[u]>=dfn[x]){\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif(low[u]>dfn[x]) mp.insert(make_pair(minmax(u,x),cnt));\n\t\t\t\t\tG2.addedge(cnt,x);\n\t\t\t\t\tint now=-1;\n\t\t\t\t\twhile(now^u)\n\t\t\t\t\t\tnow=st[st[0]--],G2.addedge(now,cnt);\n\t\t\t\t}\n\t\t\t}else low[x]=min(low[x],dfn[u]);\n\t\t}\n\t}\n\tint fa[maxn],dep[maxn],top[maxn],son[maxn],siz[maxn];\n\tvoid dfs1(int x,int f){\n\t\tfa[x]=f,dep[x]=dep[f]+1;siz[x]=1;\n\t\tfor(int i=G2.head[x];i;i=G2.nxt[i]){\n\t\t\tint u=G2.to[i];\n\t\t\tif(u==f)continue;\n\t\t\tdfs1(u,x);\n\t\t\tsiz[x]+=siz[u];\n\t\t\tif(siz[u]>siz[son[x]])son[x]=u;\n\t\t}\n\t}\n\tvoid dfs2(int x,int topf){\n\t\ttop[x]=topf;\n\t\tif(!son[x]) return;\n\t\tdfs2(son[x],topf);\n\t\tfor(int i=G2.head[x];i;i=G2.nxt[i]){\n\t\t\tint u=G2.to[i];\n\t\t\tif(u==fa[x] or u==son[x]) continue;\n\t\t\tdfs2(u,u);\n\t\t}\n\t}\n\tinline bool LCA(int x,int y,int z){\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\t\tif(top[x]==top[z] and dep[z]<=dep[x]) return 1;\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]<dep[y])swap(x,y);\n\t\tif(top[x]==top[z] and dep[z]>=dep[y] and dep[z]<=dep[x]) return 1;\n\t\treturn 0;\n\t}\n\tinline void work(){\n\t\tn=cnt=read(),m=read();\n\t\tfor(int i=1;i<=m;i++) G1.addedge(read(),read());\n\t\ttarjan(1,0);\n\t\tdfs1(1,0);\n\t\tdfs2(1,1);\n\t\tint Q=read();\n\t\twhile(Q--)\n\t\t\tif(read()==1){\n\t\t\t\tint x=read(),y=read();\n\t\t\t\tmap<pii,int>::iterator it=mp.find(minmax(read(),read()));\n\t\t\t\tif(it==mp.end()) puts(\"yes\");\n\t\t\t\telse puts(LCA(x,y,(*it).second)?\"no\":\"yes\");\n\t\t\t}else{\n\t\t\t\tint x=read(),y=read(),z=read();\n\t\t\t\tputs(LCA(x,y,z)?\"no\":\"yes\");\n\t\t\t}\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1604561661,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4334 \u3010[COI2007] Policija\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u773c\u60f3\u5230\u5706\u65b9\u6811\uff0c\u5efa\u51fa\u5706\u65b9\u6811\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u4e00\uff0c\u5728\u5706\u65b9\u6811\u4e0a\uff0c\u539f\u56fe\u7684\u5272\u8fb9\u5bf9\u5e94\u4e00\u4e2a\u65b9\u70b9\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tlbtn31c.png)\n\n\u5982\u679c\u4e0d\u662f\u5272\u8fb9\uff0c\u7b54\u6848\u4e00\u5b9a\u4e3a `yes`\uff0c\u5982\u679c\u662f\u5272\u8fb9\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u95ee\u9898\u4e8c\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u4e8c\uff0c\u7b49\u4ef7\u4e8e\u8be2\u95ee\u5728\u5706\u65b9\u6811\u4e0a $A,B$ \u4e24\u70b9\u95f4\u8def\u5f84\u662f\u5426\u7ecf\u8fc7 $C$\u3002\n\n\u4e3a\u4ec0\u4e48\u6b63\u786e\uff1f\u56e0\u4e3a\u5706\u65b9\u6811\u4e0a\u7684\u8fde\u901a\u6027\u7b49\u4ef7\u4e8e\u539f\u56fe\u7684\u8fde\u901a\u6027\u3002\n\n\u89e3\u51b3\u8def\u5f84\u662f\u5426\u7ecf\u8fc7 $C$ \u4f7f\u7528\u6811\u5256\u53ef\u4ee5\u65b9\u4fbf\u89e3\u51b3\uff0c\u6839\u672c\u4e0d\u7528\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n```cpp\nint lca(int x,int y,int z){\n\tint p=0;\n\twhile(top[x]!=top[y]){\n\t\tif(d[top[x]]<d[top[y]]){\n\t\t\tif(top[y]==top[z]&&d[z]<=d[y])p=1;\n\t\t\ty=f[top[y]];\n\t\t}else{\n\t\t\tif(top[x]==top[z]&&d[z]<=d[x])p=1;\n\t\t\tx=f[top[x]];\n\t\t}\n\t}\n\tif(d[x]>d[y])std::swap(x,y);\n\tif(top[x]==top[z]&&d[z]>=d[x]&&d[z]<=d[y])p=1;\n\treturn p;\n}\n```\n\n### \u4ee3\u7801\n---\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<map>\n#include<utility>\nstd::map<std::pair<int,int>,int> mp;\nint ghead[100010],gto[1000010],gnxt[1000010],cnt;\nint thead[200010],tto[400010],tnxt[400010],tcnt;\nint n,m,*head(ghead),*to(gto),*nxt(gnxt),q;\nvoid add(int const &x,int const &y){\n\tto[++cnt]=y,nxt[cnt]=head[x],head[x]=cnt;\n}\nvoid tadd(int const &x,int const &y){\n\ttto[++tcnt]=y,tnxt[tcnt]=thead[x],thead[x]=tcnt;\n}\nint s[100010],tp,ncnt,low[100010],dfn[100010];\nvoid tarjan(int const &x,int const &fa){\n\tlow[x]=dfn[x]=++cnt;\n\ts[++tp]=x;\n\tfor(int i=head[x];i;i=nxt[i])\n\t\tif(!dfn[to[i]]){\n\t\t\ttarjan(to[i],x);\n\t\t\tlow[x]=std::min(low[x],low[to[i]]);\n\t\t\tif(low[to[i]]>=dfn[x]){\n\t\t\t\t++ncnt;\n\t\t\t\tif(low[to[i]]>dfn[x])mp[std::minmax(x,to[i])]=ncnt;\n\t\t\t\tdo{\n\t\t\t\t\ttadd(s[tp],ncnt),tadd(ncnt,s[tp]);\n\t\t\t\t}while(s[tp--]!=to[i]);\n\t\t\t\ttadd(x,ncnt),tadd(ncnt,x);\n\t\t\t}\n\t\t}else if(to[i]!=fa) low[x]=std::min(low[x],dfn[to[i]]);\n}\nint d[200010],f[200010],sz[200010],son[200010],top[200010];\nvoid dfs1(int const &x,int const &fa){\n\td[x]=d[fa]+1,f[x]=fa,sz[x]=1;\n\tfor(int i=head[x];i;i=nxt[i])\n\t\tif(to[i]!=fa){\n\t\t\tdfs1(to[i],x);\n\t\t\tsz[x]+=sz[to[i]];\n\t\t\tif(sz[to[i]]>sz[son[x]])son[x]=to[i];\n\t\t}\n}\nvoid dfs2(int const &x,int const &tp){\n\ttop[x]=tp;\n\tif(son[x]) dfs2(son[x],tp);\n\tfor(int i=head[x];i;i=nxt[i])\n\t\tif(to[i]!=f[x]&&to[i]!=son[x])\n\t\t\tdfs2(to[i],to[i]);\n}\nint lca(int x,int y,int z){\n\tint p=0;\n\twhile(top[x]!=top[y]){\n\t\tif(d[top[x]]<d[top[y]]){\n\t\t\tif(top[y]==top[z]&&d[z]<=d[y])p=1;\n\t\t\ty=f[top[y]];\n\t\t}else{\n\t\t\tif(top[x]==top[z]&&d[z]<=d[x])p=1;\n\t\t\tx=f[top[x]];\n\t\t}\n\t}\n\tif(d[x]>d[y])std::swap(x,y);\n\tif(top[x]==top[z]&&d[z]>=d[x]&&d[z]<=d[y])p=1;\n\treturn p;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y;i<=m;i++)scanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n\tncnt=n,cnt=0;\n\ttarjan(1,0);\n\thead=thead,nxt=tnxt,to=tto;\n\tdfs1(1,0),dfs2(1,1);\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tstatic int op,a,b,c,d;\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1){\n\t\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\t\tstd::map<std::pair<int,int>,int>::iterator it=mp.find(std::minmax(c,d));\n\t\t\tif(it==mp.end())puts(\"yes\");\n\t\t\telse puts(lca(a,b,it->second)?\"no\":\"yes\");\n\t\t}else{\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tputs(lca(a,b,c)?\"no\":\"yes\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1604561196,
        "uid": 55707,
        "name": "gxy001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4334 [COI2007] Policija"
    }
]