[
    {
        "content": "> \u7ed9\u51fa\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\n> \n> \u9700\u8981\u5c06\u8fd9\u4e9b\u70b9\u5212\u5206\u4e3a\u82e5\u5e72\u4e92\u4e0d\u76f8\u4ea4\u7684\u70b9\u96c6\uff0c\u6ee1\u8db3\uff1a\n> \n> - \u96c6\u5408\u5927\u5c0f\u4e0d\u8d85\u8fc7 $p$\u3002\n> - \u8fd9\u4e2a\u96c6\u5408\u5185\u7684\u70b9\u8fde\u51fa\u96c6\u5408\u7684\u8fb9\u4e0d\u8d85\u8fc7 $q$ \u6761\u3002\n> \n> \u5224\u65ad\u662f\u5426\u6709\u89e3\u5e76\u7ed9\u51fa\u5408\u6cd5\u65b9\u6848\u3002\n> \n> $n \\le 2500$\uff0c$p + q \\le 15$\uff0c$m \\le 15\\ 000$\u3002\n\n\u8fd9\u662f\u4e00\u9053\u6709\u8da3\u7684\u66b4\u529b\u9898\u3002\n\n\u9996\u5148\u6709\u4e2a\u5c0f\u7ec6\u8282\uff0c\u8981\u5148\u68c0\u67e5\u4e00\u904d\u539f\u56fe\u662f\u5426\u662f\u4e00\u5f20\u65e0\u5411\u56fe\uff08\u5373 $u \\to v$ \u6709\u8fb9\u662f\u5426\u540c\u65f6\u4f1a\u4fdd\u8bc1 $v \\to u$ \u6709\u8fb9\uff09\uff0c\u5982\u679c\u4e0d\u662f\u9700\u8981\u76f4\u63a5\u8f93\u51fa `detention`\uff0c\u8be6\u89c1\u6837\u4f8b 3\uff0c\u56e0\u4e3a\u8fd9\u88ab\u5f53\u505a\u662f\u540c\u5b66\u6492\u8c0e\uff08\uff08\uff08\u3002\n\n\u6211\u4eec\u5c06\u7b97\u6cd5\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a\n\n- \u5bf9 $1 \\sim n$ \u4e2d\u7684\u6bcf\u4e2a\u70b9 $i$\uff0c\u627e\u51fa\u4e00\u4e2a\u5305\u542b $i$ \u7684\u5408\u6cd5\u7684\u96c6\u5408\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8bf4\u660e\u65e0\u89e3\uff0c\u8f93\u51fa `detention`\u3002\n- \u5bf9\u6c42\u51fa\u7684\u6240\u6709\u70b9\u96c6\uff0c\u8c03\u6574\u65b9\u6848\uff0c\u4f7f\u5f97\u539f\u672c\u7684\u4efb\u610f\u4e24\u4e2a\u70b9\u96c6 $S, T$ \u53d8\u6210 $S', T'$\uff0c\u4f7f\u5f97 $S' \\cap T' = \\emptyset$ \u4e14 $S' \\cup T' = S \\cup T$\u3002\u8fd9\u6837\u5904\u7406\u540e\u6700\u540e\u6bcf\u4e2a\u70b9\u5c31\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u70b9\u96c6\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6b65\u9aa4\uff0c\u7528\u66b4\u529b\u53bb\u679a\u4e3e\u6240\u6709\u8fc7 $i$ \u7684\u8054\u901a\u5757\uff0c\u5f53\u8fde\u901a\u5757\u5927\u5c0f\u8d85\u8fc7 $p$ \u6216\u8fde\u901a\u5757\u5927\u5c0f\u52a0\u4e0a\u76f8\u90bb\u70b9\u96c6\u5927\u5c0f\u8d85\u8fc7 $p + q$ \u65f6\u5c31\u9000\u51fa\u9012\u5f52\u3002\u8fd9\u6837\u66b4\u529b\u590d\u6742\u5ea6\u53ef\u4ee5\u8bc1\u660e\u662f $\\mathcal{O}(2 ^ {p + q})$\uff0c\u505a $n$ \u6b21\u5c31\u662f $\\mathcal{O}(n \\cdot 2 ^ {p + q})$\u3002\n\n\u4e00\u79cd\u7406\u89e3\u662f\uff0c\u6211\u4eec\u9996\u5148\u5c06\u95ee\u9898\u8fdb\u884c\u7f29\u653e\uff0c\u5b9a\u4e49 $q'$ \u4e3a\u96c6\u5408\u5916\u7684\u4e0e\u96c6\u5408\u5185\u7684\u70b9\u6709\u8fde\u8fb9\u7684\u70b9\u6570\uff0c\u663e\u7136 $q' \\le q$\u3002\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u70b9\u56db\u79cd\u72b6\u6001\uff1a\u5728\u96c6\u5408\u5185\u3001\u4e0e\u96c6\u5408\u5185\u7684\u70b9\u76f8\u90bb\u4f46\u8fd8\u672a\u786e\u5b9a\u662f\u5426\u8981\u52a0\u5165\u96c6\u5408\u3001\u4e0e\u96c6\u5408\u5185\u7684\u70b9\u76f8\u90bb\u4e14\u786e\u5b9a\u4e0d\u52a0\u5165\u96c6\u5408\u3001\u4e0d\u4e0e\u96c6\u5408\u76f8\u90bb\u7684\u70b9\uff08\u524d\u4e09\u8005\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u5206\u522b\u4f53\u73b0\u4e3a $\\texttt{std::set<int> in, neighbor, out}$\uff09\u3002\n  \n\u5f53\u6211\u4eec\u9012\u5f52\u5230\u8fde\u901a\u5757 $s$ \u65f6\uff0c\u6211\u4eec\u53ea\u679a\u4e3e\u90a3\u4e9b\u4e0e\u96c6\u5408\u5185\u7684\u70b9\u76f8\u90bb\u4f46\u8fd8\u672a\u786e\u5b9a\u662f\u5426\u8981\u52a0\u5165\u96c6\u5408\u7684\u70b9\uff08\u5373 $\\texttt{neighbor}$\uff09\u3002\u8fd9\u6837\uff0c\u82e5\u52a0\u5165\u8be5\u70b9\u5230\u96c6\u5408\u5185\uff0c\u5219 $p$ \u589e\u52a0 $1$\uff1b\u5982\u679c\u4e0d\u52a0\u5165\u8be5\u70b9\u5230\u96c6\u5408\u5185\uff0c\u5219 $q'$ \u589e\u52a0 $1$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u6b65\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5171\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u800c\u6bcf\u505a\u4e00\u5c42 $p + q'$ \u7684\u503c\u90fd\u4f1a\u589e\u52a0\uff0c\u6545\u800c\u6700\u591a\u505a $p + q'$ \u5c42\u3002\u53c8\u7531\u4e8e $q' \\le q$\uff0c\u56e0\u6b64\u9012\u5f52\u6b21\u6570\u4e0a\u754c\u4e3a $2 ^ {p + q}$\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6b65\u9aa4\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u5408\u6cd5\u7684\u70b9\u96c6 $A, B$\uff0c\u5219 $A \\setminus B$ \u548c $B \\setminus A$ \u4e2d\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5408\u6cd5\u70b9\u96c6\u3002\n\n\u8bc1\u660e\u4e3a\uff0c\u8bbe $C = A \\cap B$\uff0c$A, C$ \u4e4b\u95f4\u8fb9\u6570\u4e3a $a$\uff0c$B, C$ \u4e4b\u95f4\u8fb9\u6570\u4e3a $b$\uff0c$C$ \u5411\u5916\u4e14\u4e0d\u8fde\u5411 $A, B$ \u7684\u8fb9\u6570\u4e3a $c$\u3002\u5219\u5f53 $A$ \u53d8\u6210 $A \\setminus B$ \u540e\uff0c\u8fb9\u6570\u52a0\u4e0a\u4e86 $a - b - c$\uff0c$B$ \u53d8\u6210 $B \\setminus A$ \u540e\uff0c\u8fb9\u6570\u52a0\u4e0a\u4e86 $b - a - c$\u3002\u7531\u4e8e $a - b$ \u548c $b - a$ \u4e92\u4e3a\u76f8\u53cd\u6570\uff0c\u5219\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a $\\le 0$\uff0c\u5219 $p + q$ \u7684\u503c\u4e0d\u4f1a\u53d8\u5927\uff0c\u4e00\u5b9a\u8fd8\u662f\u5408\u6cd5\u7684\u70b9\u96c6\u3002\n\n\u77e5\u9053\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e $n \\choose 2$ \u4e2a\u70b9\u5bf9\uff0c\u8c03\u6574\u4ed6\u4eec\u7684\u70b9\u96c6 $(S, T)$ \u53d8\u6210 $(S \\setminus T, T)$ \u6216 $(S, T \\setminus S)$\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6240\u6709\u96c6\u5408\u65e0\u4ea4\u4e86\u3002\u8fd9\u91cc\u590d\u6742\u5ea6 $\\mathcal{O}(n ^ 2 p)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\cdot 2 ^ {p + q} + n ^ 2 p)$\uff0c\u5b9e\u9645\u5f88\u96be\u5361\u6ee1\uff0c\u5e38\u6570\u4e0d\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <set>\n#include <vector>\n\nconst int MaxN = 2500, MaxM = 30000;\nconst int MaxP = 15;\n\nstruct graph_t {\n  int cnte;\n  int head[MaxN + 5], to[MaxM * 2 + 5], next[MaxM * 2 + 5];\n\n  inline void addEdge(int u, int v) {\n    cnte++; to[cnte] = v;\n    next[cnte] = head[u]; head[u] = cnte;\n  }\n};\n\nint N, P, Q;\ngraph_t Gr;\nstd::set<int> Group[MaxN + 5];\nbool InGroup[MaxN + 5];\n\nvoid NO() { puts(\"detention\"); exit(0); }\n\nvoid init() {\n  std::set< std::pair<int, int> > edge;\n  edge.clear();\n  scanf(\"%d %d %d\", &N, &P, &Q);\n  for (int i = 0; i < N; ++i) {\n    int m;\n    scanf(\"%d\", &m);\n    if (m >= P + Q) NO();\n    for (int j = 1; j <= m; ++j) {\n      int x;\n      scanf(\"%d\", &x);\n      Gr.addEdge(i + 1, x + 1);\n      if (i < x) edge.insert(std::make_pair(i, x));\n      else {\n        if (edge.count(std::make_pair(x, i)) == 0) NO();\n        else edge.erase(std::make_pair(x, i));\n      }\n    }\n  }\n  if (edge.empty() == false) NO();\n}\n\ninline bool validGroup(const std::set<int> &s) {\n  if ((int) s.size() > P) return false;\n  int cnt = 0;\n  for (int u : s) {\n    for (int i = Gr.head[u]; i; i = Gr.next[i]) {\n      int v = Gr.to[i];\n      if (s.count(v) == 0) cnt++;\n    }\n  }\n  return cnt <= Q;\n}\n\nstd::set<int> in, neighbor, out;\n\nbool dfs(int u, int bel, std::set<int> in, std::set<int> neighbor, std::set<int> out) {\n  in.insert(u);\n  if (u != bel) neighbor.erase(u);\n  if ((int) in.size() > P || (int) out.size() > Q || (int) in.size() + (int) neighbor.size() + (int) out.size() > P + Q) return false;\n  if (validGroup(in) == true) {\n    Group[bel] = in;\n    for (int v : in) InGroup[v] = true;\n    return true;\n  }\n  for (int i = Gr.head[u]; i; i = Gr.next[i]) {\n    int v = Gr.to[i];\n    if (in.count(v) == 0 && neighbor.count(v) == 0 && out.count(v) == 0)\n      neighbor.insert(v);\n  }\n  while (!neighbor.empty()) {\n    int v = *(neighbor.begin());\n    if (dfs(v, bel, in, neighbor, out) == true) return true;\n    neighbor.erase(neighbor.begin());\n    out.insert(v);\n  }\n  return false;\n}\n\nvoid solve() {\n  for (int i = 1; i <= N; ++i) {\n    if (InGroup[i] == true) continue;\n    in.clear();\n    neighbor.clear();\n    out.clear();\n    if (dfs(i, i, std::set<int>(), std::set<int>(), std::set<int>()) == false) NO();\n  }\n  for (int i = 1; i <= N; ++i)\n    for (int j = 1; j < i; ++j) {\n      std::set<int> s1 = Group[i], s2 = Group[j];\n      for (int v : Group[i])\n        if (s2.count(v) > 0) s2.erase(v);\n      for (int v : Group[j])\n        if (s1.count(v) > 0) s1.erase(v);\n      if (validGroup(s1) == true) Group[i] = s1;\n      else Group[j] = s2;\n    }\n  int cntGroup = 0;\n  for (int i = 1; i <= N; ++i)\n    if (Group[i].empty() == false) cntGroup++;\n  puts(\"home\");\n  printf(\"%d\\n\", cntGroup);\n  for (int i = 1; i <= N; ++i) {\n    if (Group[i].empty()) continue;\n    printf(\"%d\", (int) Group[i].size());\n    for (int v : Group[i]) printf(\" %d\", v - 1);\n    putchar('\\n');\n  }\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```\n\n---\n\n[\u53c2\u8003\u8d44\u6599](https://codeforces.com/blog/entry/51740?#comment-356943)",
        "postTime": 1590572959,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6575 \u3010[BOI 2017] Friends\u3011"
    },
    {
        "content": "### update:\u8fd8\u8bf7\u5404\u4f4d\u4e0d\u8981\u70b9\u8d5e\uff0c\u8865\u5145\u672c\u5c31\u5e94\u8be5\u5728\u539f\u672c\u7684\u9898\u89e3\u4e4b\u540e\u3002\n\n---\n\n\u8c28\u4ee5\u6b64\u9898\u89e3\u4f5c\u4e3a\u5bf9 Tweetuzki \u795e\u4ed9\u7684\u9898\u89e3\u7684\u8865\u5145\u3002\n\n\u9898\u89e3\u7684\u8bf4\u660e\u987a\u5e8f\u6309\u7167\u6bcf\u90e8\u5206\u5728\u6211\u4ee3\u7801\u4e2d\u7684\u5148\u540e\u987a\u5e8f\u3002\n\n---\n\n##### \u627e\u51fa\u5408\u6cd5\u96c6\u5408\u7684\u5177\u4f53\u6b65\u9aa4\n\n\u73b0\u5728\u9012\u5f52\u5230\u4e86 $x$ \u70b9\uff0c\u5f53\u524d\u5728\u627e\u5305\u542b $bel$ \u7684\u5408\u6cd5\u96c6\u5408\u3002\u5df2\u7ecf\u786e\u5b9a\u8981\u52a0\u5165\u7684\u5143\u7d20\u3001\u4e0e\u5f53\u524d\u96c6\u5408\u67d0\u70b9\u76f8\u90bb\u4f46\u8fd8\u672a\u786e\u5b9a\u662f\u5426\u52a0\u5165\u7684\u5143\u7d20\u3001\u4e0e\u5f53\u524d\u96c6\u5408\u67d0\u70b9\u76f8\u90bb\u4e14\u786e\u5b9a\u4e0d\u52a0\u5165\u7684\u5143\u7d20\uff0c\u5206\u522b\u5b58\u5728 $\\texttt{std::set<int>in,neighbor,out}$ \u4e2d\u3002\n\n+ \u9996\u5148\u5c06 $x$ \u52a0\u5165 $\\texttt{in}$ \u4e2d\u5e76\u4ece $\\texttt{neighbor}$ \u4e2d\u5220\u9664 $x$\uff08\u82e5\u6ca1\u6709\u5219\u5ffd\u7565\uff09\u3002\n+ \u68c0\u67e5 $\\texttt{in,neighbor,out}$ \u7684\u5927\u5c0f\u662f\u5426\u6ee1\u8db3\u9898\u610f\u3002\n+ \u82e5\u5f53\u524d\u7684 $\\texttt{in}$ \u7b26\u5408\u6761\u4ef6\uff0c\u5219\u6b64\u6b21\u641c\u7d22\u6210\u529f\u3002\u5c06\u6240\u6709\u5728 $\\texttt{in}$ \u4e2d\u7684\u70b9\u6807\u8bb0\uff0c\u4ee5\u540e\u4e0d\u518d\u641c\u7d22\u3002\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u96c6\u5408 $\\texttt{in}$\uff0c\u76f4\u63a5\u8fd4\u56de $\\text{true}$\u3002\n+ \u626b\u63cf\u6240\u6709\u4e0e $\\texttt{in}$ \u4e2d\u67d0\u70b9\u76f8\u90bb\u7684\u70b9 $v$\uff0c\u82e5 $v$ \u4e0d\u5728 $\\texttt{in,neighbor,out}$ \u7684\u4efb\u610f\u4e00\u4e2a\u4e2d\uff0c\u5c06\u5176\u52a0\u5165 $\\texttt{neighbor}$\u3002\n+ \u5bf9\u4e8e\u96c6\u5408 $\\texttt{neighbor}$ \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 $v$\uff0c\u9012\u5f52\u5c1d\u8bd5\u80fd\u5426\u5c06\u5176\u52a0\u5165\u5f53\u524d\u96c6\u5408 $\\texttt{in}$ \u4e2d\uff0c\u82e5\u53ef\u884c\uff0c\u76f4\u63a5\u8fd4\u56de $\\text{true}$\uff0c\u5426\u5219\u5c06\u5176\u4ece $\\texttt{neighbor}$ \u4e2d\u79fb\u81f3 $\\texttt{out}$ \u4e2d\u3002\n+ \u82e5\u6b64\u6b21\u641c\u7d22\u5b8c\u6210\u4ecd\u672a\u627e\u5230\u53ef\u884c\u89e3\uff0c\u8fd4\u56de $\\text{false}$\u3002\n\n##### \u5404\u79cd\u65e0\u89e3\u5224\u65ad\n\n+ \uff08Tweetuzki \u795e\u4ed9\u63d0\u53ca\u7684\uff09\u6709\u4e24\u4e2a\u4eba\u4e0d\u662f\u53cc\u5411\u7684\u670b\u53cb\u5173\u7cfb\u3002\u53ef\u4ee5\u4f7f\u7528 $\\texttt{map}$ \u5957 $\\texttt{pair}$ \u6765\u5224\u65ad\u3002\n+ \u67d0\u4e2a\u70b9\u8fde\u51fa\u7684\u8fb9\u4e0d\u5c0f\u4e8e $p+q$\u3002\n+ \u67d0\u4e2a\u70b9\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5408\u6cd5\u96c6\u5408\u3002\n\n##### \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6b65\u9aa4\u7684\u8bc1\u660e\u7684\u8865\u5145\n\n\uff08\u5148\u7167\u6284\u4e00\u5c0f\u6bb5\uff09\u9898\u8bbe\uff1a\u8bbe\u6709\u4e24\u4e2a\u5408\u6cd5\u70b9\u96c6 $A,B$\uff0c\u5219 $A \\setminus B$ \u548c $B \\setminus A$ \u81f3\u5c11\u6709\u4e00\u4e2a\u5408\u6cd5\u3002\uff08\u8fd9\u91cc\u7684 $\\setminus$ \u662f\u51cf\u53bb\u7684\u610f\u601d\uff09\n  \n\u8bc1\u660e\uff1a\u4ee4 $C$ \u4e3a $A \\cap B$\u3002\u8003\u8651\u51cf\u53bb $C$ \u8fc7\u540e\u4f1a\u5bf9\u4e24\u4e2a\u70b9\u96c6\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\u3002\n\n\u9996\u5148\u8003\u8651\u589e\u52a0\u4e86\u54ea\u4e9b\u8fde\u5411\u96c6\u5408\u5916\u7684\u8fb9\u3002\u4ee5 $A$ \u4e3a\u4f8b\uff0c\u5b83\u589e\u52a0\u4e86\u672c\u8eab\u4e0e $C$ \u7684\u8fde\u8fb9\u6570\uff0c\u8bbe\u4e3a $a$\uff0c$B$ \u7684\u540c\u7406\u8bbe\u4e3a $b$\u3002\n\n\u7136\u540e\u8003\u8651\u5931\u53bb\u4e86\u54ea\u4e9b\u8fb9\u3002\u56e0\u4e3a\u5931\u53bb\u4e86\u6574\u4e2a $C$\uff0c\u6240\u4ee5 $C$ \u8fde\u5411\u5916\u90e8\u7684\u8fb9\u5168\u90e8\u5931\u53bb\u3002\u8fd9\u90e8\u5206\u65e2\u5305\u542b\u8fde\u5411 $A,B$ \u7684\u8fb9\uff0c\u4e5f\u5305\u542b\u8fde\u5411\u5176\u4ed6\u70b9\u7684\u8fb9\uff0c\u540e\u8005\u8bbe\u4e3a $c$\u3002\n\n$A$ \u548c $B$ \u8fb9\u7684\u53d8\u5316\u91cf\u5c31\u5206\u522b\u662f $a-b-c$ \u548c $b-a-c$\u3002\u56e0\u4e3a $a-b$ \u548c $b-a$ \u4e92\u4e3a\u76f8\u53cd\u6570\uff0c\u6240\u4ee5\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u975e\u6b63\uff0c\u51cf\u53bb $c$ \u4e5f\u975e\u6b63\uff0c\u6240\u4ee5\u8fb9\u6570\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u70b9\u6570\u53c8\u53d8\u5c0f\uff0c\u6240\u4ee5\u5408\u6cd5\u3002\n  \n\u9644\u4e00\u4e2a\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u4e3a\u4e86\u7f16\u5199\u65b9\u4fbf\u53ef\u80fd\u4e0e\u63cf\u8ff0\u6709\u4e9b\u51fa\u5165\u3002\n\n```\n#include<algorithm>\n#include<cstdlib>\n#include<cstdio>\n#include<set>\nconst int maxn=2.5e3+5;\nconst int maxm=3e4*2+5;\nconst int maxp=15;\nstruct edge{\n\tint to;\n\tint next;\n}qxx[maxm];\nint qxx_cnt,h[maxn];\nvoid add(int x,int y){\n\tqxx[++qxx_cnt]=(edge){y,h[x]};\n\th[x]=qxx_cnt;\n\treturn;\n}\nint n,p,q;\nstd::set<int>group[maxn];\nbool inside[maxn];\nvoid no_sol(){\n\tprintf(\"detention\");\n\texit(0);\n\treturn;\n}\nbool can(std::set<int>gave){\n\tif((int)gave.size()>p)return false;\n\tint cou=0;\n\tfor(int x:gave){\n\t\tfor(int i=h[x];i;i=qxx[i].next){\n\t\t\tint v=qxx[i].to;\n\t\t\tif(!gave.count(v))cou++;\n\t\t}\n\t}\n\treturn cou<=q;\n}\nstd::set<int>in,near,out;\nbool search(int x,int bel,std::set<int>in,std::set<int>near,std::set<int>out){\n\tin.insert(x);\n\tif(x!=bel)near.erase(x);\n\tif((int)in.size()>p||(int)out.size()>q||(int)(in.size()+near.size()+out.size())>p+q)return false;\n\tif(can(in)){\n\t\tgroup[bel]=in;\n\t\tfor(int x:in)inside[x]=true;\n\t\treturn true;\n\t}\n\tfor(int i=h[x];i;i=qxx[i].next){\n\t\tint v=qxx[i].to;\n\t\tif(!in.count(v)&&!near.count(v)&&!out.count(v))near.insert(v);\n\t}\n\twhile(!near.empty()){\n\t\tint v=*(near.begin());\n\t\tif(search(v,bel,in,near,out))return true;\n\t\tnear.erase(near.begin());\n\t\tout.insert(v);\n\t}\n\treturn false;\n}\nsigned main(){\n\tstd::set<std::pair<int,int>>apr;\n\tapr.clear();\n\tscanf(\"%d%d%d\",&n,&p,&q);\n\tfor(int i=0;i<n;i++){\n\t\tint tot;\n\t\tscanf(\"%d\",&tot);\n\t\tif(tot>=p+q)no_sol();\n\t\tfor(int j=1;j<=tot;j++){\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd(i+1,x+1);\n\t\t\tif(i<x)apr.insert({i,x});\n\t\t\telse{\n\t\t\t\tif(!apr.count({x,i}))no_sol();\n\t\t\t\telse apr.erase({x,i});\n\t\t\t}\n\t\t}\n\t}\n\tif(!apr.empty())no_sol();\n\tfor(int i=1;i<=n;i++){\n\t\tif(inside[i])continue;\n\t\tin.clear();\n\t\tnear.clear();\n\t\tout.clear();\n\t\tif(!search(i,i,std::set<int>(),std::set<int>(),std::set<int>()))no_sol();\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<i;j++){\n\t\t\tstd::set<int>ls=group[i],rs=group[j];\n\t\t\tfor(int x:group[i])if(rs.count(x))rs.erase(x);\n\t\t\tfor(int x:group[j])if(ls.count(x))ls.erase(x);\n\t\t\tif(can(ls))group[i]=ls;\n\t\t\telse group[j]=rs;\n\t\t}\n\t}\n\tint cou=0;\n\tfor(int i=1;i<=n;i++)if(!group[i].empty())cou++;\n\tprintf(\"home\\n\");\n\tprintf(\"%d\\n\",cou);\n\tfor(int i=1;i<=n;i++){\n\t\tif(group[i].empty())continue;\n\t\tprintf(\"%d\",(int)(group[i].size()));\n\t\tfor(int x:group[i])printf(\" %d\",x-1);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\n  \n\u611f\u8c22\u60a8\u7684\u9605\u8bfb\u3002",
        "postTime": 1629164046,
        "uid": 293810,
        "name": "serene_analysis",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6575 \u3010[BOI 2017] Friends\u3011"
    }
]