[
    {
        "content": "\u7b80\u5316\u4e00\u4e0b\u9898\u76ee\u5c31\u662f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u4e00\u6761\u8def\u7684\u603b\u6743\u503c\u52a0\u4e0a\u8def\u4e0a\u6700\u5927\u6743\u503c\u7684\u548c\u6700\u5c0f\n\n\u5728\u770b\u5230\u6743\u503c\u8303\u56f4\u5f88\u5c0f\uff083-255\uff09\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6700\u5927\u6743\u503c\u7136\u540e\u6bcf\u6b21\u6c42\u6700\u77ed\u8def\n\n\u7b54\u6848\u5c31\u662f\u6bcf\u6b21\u6700\u77ed\u8def+\u679a\u4e3e\u6743\u503c\u7684\u6700\u5c0f\u503c\n\n\u7531\u4e8e\u65f6\u95f4\u6ca1\u6709\u8d1f\uff0c\u53ef\u4ee5\u7528\u961f\u5217\u4f18\u5316\u7684dijkstra\n\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <queue>\nint EHead[110],ENext[4100],ETo[4100],ECost[4100];\nint Elt;\nint Vist[110],Dist[110];\nvoid AddEdge(int f,int t,int c)\n{\n    ++Elt;\n    ENext[Elt]=EHead[f];\n    ETo[Elt]=t;\n    ECost[Elt]=c;\n    EHead[f]=Elt;\n}\nvoid AddPair(int f,int t,int c)\n{\n    AddEdge(f,t,c);\n    AddEdge(t,f,c);\n}\ntypedef struct Nd\n{\n    int dis,p;\n    bool operator <(const Nd&i)const\n    {return dis>i.dis;}\n}ND;\nint N,M;\nvoid Dijkstra(int mn)\n{\n    memset(Vist,0,sizeof(Vist));\n    ND nd,bf;\n    std::priority_queue<ND> Pq;\n    nd.dis=0;\n    nd.p=1;\n    Pq.push(nd);\n    int wp,wl,ww,nc=0;\n    while(!Pq.empty())\n    {\n        nd=Pq.top();Pq.pop();\n        wp=nd.p;\n        if(Vist[wp])continue;\n        wl=nd.dis;\n        Dist[wp]=wl;\n        Vist[wp]=1;\n        ++nc;\n        if(nc==N)break;\n        for(ww=EHead[wp];ww;ww=ENext[ww])\n            if(!Vist[ETo[ww]])\n                if(ECost[ww]<=mn)\n                {\n                    bf.p=ETo[ww];\n                    bf.dis=wl+ECost[ww];\n                    Pq.push(bf);\n                }\n    }\n}\nint Mw;\nint ReadInt()\n{\n    char c=getchar();\n    int r=0;\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        r=r*10+c-'0';\n        c=getchar();\n    }\n    return r;\n}\nvoid Input()\n{\n    scanf(\"%d %d\",&N,&M);\n    int wi,a,b,c;\n    for(wi=1;wi<=M;++wi)\n    {\n        a=ReadInt();\n        b=ReadInt();\n        c=ReadInt();\n        if(c>Mw)Mw=c;\n        AddPair(a,b,c);\n    }\n}\nint MC=0x3FFFFFFF;\nvoid AC()\n{\n    int wi;\n    int wc;\n    for(wi=1;wi<=Mw;++wi)\n    {\n        Dijkstra(wi);\n        if(!Vist[N])continue;\n        wc=Dist[N]+wi;\n        if(wc<MC)MC=wc;\n    }\n    printf(\"%d\\n\",MC);\n}\nint main()\n{\n    Input();\n    AC();\n    return 0;\n}\n\n```",
        "postTime": 1494063756,
        "uid": 25508,
        "name": "Night_Aurora",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2349 \u3010\u91d1\u5b57\u5854\u3011"
    },
    {
        "content": "\n[$ \\large{}\\color {#6495ED} \\mathcal{MyBlog} $](https://xjx885.coding-pages.com/)\n\n---\n\n$\n$\n\n### \u524d\u8a00\uff1a\n\n\n$\\quad \\quad$ \u95f2\u7740\u65e0\u804a\u8df3\u9898\u8df3\u8fc7\u6765\u7684...\n\n$\\quad \\quad$ \u7136\u540e\u53d1\u73b0\u8fd9\u662f\u9053\u597d\u9898\u3002\n\n$\\quad \\quad$ \u4f3c\u4e4e\u8fd9\u9898\u6ca1\u4eba\u7528 Floyd \u505a\uff1f\n\n$\\quad \\quad$ \u8fd9\u662f\u4e00\u7bc7\u9b54\u6539 Floyd \u7684\u9898\u89e3\u3002\n\n---\n\n$\n$\n\n### \u9898\u76ee\u5927\u610f\uff1a\n\n$\\quad \\quad$ \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4ece $1$ \u5230 $n$ \u7684\uff0c\u8def\u5f84\u4e0a\u6700\u5927\u6743\u503c\u7ffb\u500d\u7684\u6700\u77ed\u8def\u3002\n\n$\\quad \\quad$ \u6570\u636e\u8303\u56f4\uff1a $n\\le 100,m\\le 2000,w$(\u8fb9\u6743)$\\le255$\u3002\n\n---\n\n\n$\n$\n### \u601d\u8def\u5206\u6790:\n\n$\\quad \\quad$ \u62ff\u5230\u8fd9\u9898\uff0c\u672c\u849f\u84bb\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f Floyd\uff1a\u8dd1\u51fa\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9 $(x,y)$\uff0c\u6c42\u51fa\u901a\u8fc7\u8fd9\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e00\u6761\u8fb9\u7ffb\u500d\u540e\u7684\u6700\u77ed\u8def($1\\to x \\to y \\to n$)\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n$\\quad \\quad$ \u8def\u5f84($1\\to x \\to y \\to n$) \u600e\u4e48\u6c42\uff1f\u663e\u7136\uff0c $1\\to x$ \u8d70\u7684\u662f\u6700\u77ed\u8def\uff0c $x\\to y$ \u8d70\u7684\u662f\u7ffb\u500d\u8fb9\uff0c $y\\to n$ \u8d70\u7684\u8fd8\u662f\u6700\u77ed\u8def\u3002\uff08\u771f\u7684\u663e\u7136\u5417\uff1f\uff09 \n\n$\\quad \\quad$ \u7136\u540e\u53d1\u73b0\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86 T_T\uff0c\u770b\u4e86\u770b\u9898\uff0c\u53d1\u73b0\u7ffb\u500d\u7684\u8fb9\u5fc5\u987b\u662f\u8def\u5f84\u4e0a\u6700\u957f\u8fb9\u3002\n\n$\\quad \\quad$ \u7136\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u53e6\u4e00\u4e2a\u770b\u4f3c\u9760\u8c31\u4e00\u70b9\u7684\u65b9\u6cd5\uff1a \u5148 Floyd \u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\uff0c\u7136\u540e\u518d Floyd \u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\uff0c\u6700\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u662f\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\uff0c\u5c31\u6c42\u51fa\u901a\u8fc7\u8fd9\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e00\u6761\u8fb9\u7ffb\u500d\u540e\u7684\u6700\u77ed\u8def\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n$\\quad \\quad$ \u4ee3\u7801\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 110;\nconst int M = 2010;\n\nint n, m;\nint f[N][N], g[N][N];\n//f \u8868\u793a\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\n//g \u8868\u793a\u4efb\u610f\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u7684\u6700\u5927\u6743\u503c\n\ninline int read()\n{\n\tint x = 0, ch = '~';\n\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = (x << 3) + (x << 1), x += ch - '0', ch = getchar();\n\n\treturn x;\n}\n\nint u[M], v[M], w[M];\n\nint main()\n{\n\t//\u521d\u59cb\u5316\n\tn = read(), m = read();\n\tmemset(f, 0x3f, sizeof(f));\n\tfor(register int k = 1; k <= m; k++)\n\t{\n\t\tu[k] = read(), v[k] = read(), w[k] = read();\n\t\tf[u[k]][v[k]] = f[v[k]][u[k]] = g[v[k]][u[k]] = g[u[k]][v[k]] = w[k];\n\t}\n\tfor(register int k = 1; k <= n; k++)\n\t\tf[k][k] = 0;\n\n\t//Floyd\u6c42\u6700\u77ed\u8def\n\tfor(register int k = 1; k <= n; k++)\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tif(k != i && i != j && k != j)\n\t\t\t\t\tf[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n\n\t//Floyd\u6c42\u6700\u5927\u503c\n\tfor(register int k = 1; k <= n; k++)\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tif(k != i && i != j && k != j)\n\t\t\t\t\tg[i][j] = max(g[i][k], g[k][j]);\n\n\tint answ = 0x3f3f3f3f;\n\tfor(register int k = 1; k <= m; k++)\n\t{\n\t\t//\u5982\u679c\u4ece\u8d77\u70b9\u5230\u8be5\u8fb9\u4e00\u7aef\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u4ece\u7ec8\u70b9\u5230\u8be5\u8fb9\u53e6\u4e00\u7aef\u7684\u6700\u5927\u503c\u90fd\u6ca1\u6709\u8fd9\u6761\u8fb9\u8fb9\u6743\u5927\uff0c\u5c31\u7edf\u8ba1\u7b54\u6848\n\t\tif(g[1][u[k]] <= w[k] && g[v[k]][n] <= w[k]) answ = min(answ, f[1][u[k]] + f[v[k]][n] + w[k] * 2);\n\t\tif(g[1][v[k]] <= w[k] && g[u[k]][n] <= w[k]) answ = min(answ, f[1][v[k]] + f[u[k]][n] + w[k] * 2);\n\t}\n\n\tprintf(\"%d\", answ);\n\n\treturn 0;\n}\n```\n$\\quad \\quad$ \u7136\u540e\u53d1\u73b0\u4ecd\u7136\u8fc7\u4e0d\u4e86\u6837\u4f8b\u3002\n\n$\\quad \\quad$ \u95ee\u9898\u5f88\u663e\u7136\uff1a\u6700\u77ed\u8def\u5f84\u4e0e\u6700\u5927\u6743\u503c\u4e0d\u914d\u5957\u3002\n\n$\\quad \\quad$ \u6211\u4eec\u6c42\u51fa\u7684 \u201c\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\u201d \u662f\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u6c42\u7684\u662f \u201c\u4ece\u6700\u77ed\u8def\u5f84\u8d70\uff0c\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\u201d \u624d\u5bf9\u3002\n\n$\\quad \\quad$ \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4fee\u6539\uff1a\n\n$\\quad \\quad$ \u628a\u539f\u672c\u7684 $Floyd$ \u6c42\u6700\u5927\u503c\uff0c\u6539\u4e3a\uff1a\n\n```cpp\n//Floyd\u6c42\u6700\u5927\u503c (\u7b2c\u4e8c\u7248)\nfor(register int k = 1; k <= n; k++)\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(k != i && i != j && k != j)\n\t\t\t\tif(f[i][j] == f[i][k] + f[j][k])\n\t\t\t\t//\u4fdd\u8bc1\u8fd9\u6761\u8def\u5f84\u662f\u6700\u77ed\u8def\n\t\t\t\t\tg[i][j] = max(g[i][k], g[k][j]);\n```\n\n$\\quad \\quad$ \u597d\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fc7\u6837\u4f8b\u4e86\uff0c\u63d0\u4ea4\u8bd5\u8bd5\u3002\n\n$\\quad \\quad$ \u4e8e\u662f\u60b2\u5267 80 \u5206\u3002\n\n$\\quad \\quad$ \u8fd9\u91cc\u7ed9\u51fa\u4e00\u7ec4\u9519\u8bef\u6570\u636e\uff08\u53ea\u80fd Hack Floyd \u7b97\u6cd5\uff09\uff1a\n\t\t\n      \n\tinput:\n        \n\t5 6 \n\t1 2 6\n\t2 3 10\n\t1 3 15\n\t3 5 15\n\t3 4 10\n\t4 5 6\n    \n\toutput:\n    \n\t42\n    \n    \n   ![](https://cdn.luogu.com.cn/upload/image_hosting/73uxbkoq.png)\n   \n    \n$\\quad \\quad$ \u6211\u4eec\u7684\u7b97\u6cd5\u8f93\u51fa\u662f 45\u3002\n\n$\\quad \\quad$ \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1f\n\n$\\quad \\quad$ \u6ce8\u610f\u89c2\u5bdf\u6211\u4eec\u7684\u6700\u4f18\u89e3\uff1a $1\\to2\\to3\\to4\\to5$\u3002\n\n$\\quad \\quad$ \u5728\u4e0a\u9762\u7684\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u662f $1\\to ... \\to x\\to y\\to ... \\to n$ \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d  $1\\to ... \\to x\\ \\ ,\\ \\ y\\to ... \\to n$ \u8d70\u7684\u90fd\u662f\u6700\u77ed\u8def\uff0c $x \\to y$ \u8d70\u7684\u662f\u4e00\u6761\u88ab\u7ffb\u500d\u8fc7\u7684\u6700\u957f\u8fb9\u3002\n\n$\\quad \\quad$ \u4f46\u5728\u4e0a\u9762\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u5728\u4e24\u8fb9\u5e76\u6ca1\u6709\u8d70\u6700\u77ed\u8def\uff08$1\\to3 \\ \\ \\ ,\\ \\ \\ 3\\to 5$ \uff09\uff0c\u56e0\u4e3a\u8d70\u4e86\u6700\u77ed\u8def\u7684\u8bdd\uff0c\u6700\u957f\u8fb9\u5c31\u4f1a\u53d8\u6210 15\u3002\n\n$\\quad \\quad$ \u56e0\u6b64\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff1a\u5982\u679c\u4f7f\u7528\u72b6\u6001\u4e0e\u6700\u957f\u8fb9\u65e0\u5173\uff0c\u53ea\u4e0e\u6700\u77ed\u8def\u6709\u5173\u7684 Floyd \u7b97\u6cd5\u7684\u8bdd\uff0c\u6211\u4eec\u5f88\u96be\u5f97\u51fa\u6b63\u786e\u7ed3\u679c\uff0c\u56e0\u4e3a\u7ed3\u679c\u5e76\u4e0d\u4e00\u5b9a\u662f\u7531\u5f88\u591a\u6700\u77ed\u8def\u62fc\u63a5\u800c\u6210\u7684\u3002\n\n$\\quad \\quad$ \u867d\u7136\u53ef\u80fd\u6709\u66f4\u5de7\u5999\u7684 Floyd \u89e3\u51b3\u65b9\u6cd5\uff0c\u4f46\u6211\u8fd9\u91cc\u4f7f\u7528\u4e00\u79cd\u76f8\u5bf9\u66b4\u529b\u7684\u65b9\u6848\uff1a\u7528\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\uff08\u5176\u5b9e\u6211\u6709\u4e00\u4e2a\u7edd\u5999\u7684\u60f3\u6cd5\uff0c\u53ef\u662f\u5730\u65b9\u592a\u5c0f\uff0c\u5199\u4e0d\u4e0b /xyx\uff09\u3002\n\n$\\quad \\quad$ \u4f17\u6240\u5468\u77e5\uff0cFloyd \u672c\u8d28\u4e0a\u662f\u4e2a DP\uff0c\u6211\u4eec\u4e0d\u59a8\u7ed9\u5b83\u589e\u52a0\u4e00\u7ef4\uff0c\u4ee4 $f(i,j,k)$ \u8868\u793a\u4ece $i$ \u5230 $j$ \uff0c\u8def\u5f84\u4e0a\u6700\u957f\u8fb9\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $k$ \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u3002\n\n$\\quad \\quad$ \u4f3c\u4e4e\u662f\u5f88\u590d\u6742\u7684\u4e00\u4e2a\u72b6\u6001\u5462...\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8bbe\u6700\u957f\u8fb9\u7b49\u4e8e\u591a\u5c11\uff1f\u56e0\u4e3a\u8fd9\u6837\u66f4\u597d\u8f6c\u79fb\u3002\n\n$\\quad \\quad$ \u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u8f6c\u79fb\uff1a\n\n```cpp\n\tfor(register int k = 1; k <= n; k++)\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tif(k != i && i != j && k != j)\n\t\t\t\t\tfor(int c = 0; c <= 260; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c != 0) f[i][j][c] = min(f[i][j][c], f[i][j][c - 1]);\n\t\t\t\t\t\tf[i][j][c] = min(f[i][j][c], f[i][k][c] + f[k][j][c]);\n\t\t\t\t\t}\n\n```\n\n$\\quad \\quad$ \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u524d\u56db\u6392\u90fd\u662f\u666e\u901a Floyd \u7684\u73a9\u610f\uff0c\u53ea\u662f\u6700\u540e\u52a0\u4e86\u4e00\u4e2a\u5faa\u73af\uff08\u56e0\u4e3a Floyd \u91cc\u9762\u6709\u4e00\u4e2a\u53d8\u91cf k \uff0c\u6240\u4ee5\u7b2c\u4e09\u7ef4\u7528\u7684\u662f c \u8868\u793a\uff09\u3002\n\n$\\quad \\quad$ \u7b2c\u4e00\u4e2a\u8f6c\u79fb\u662f\uff1a`f[i][j][c] = min(f[i][j][c], f[i][j][c - 1])` \u542b\u4e49\u663e\u7136\uff0c\u6bd5\u7adf\u6211\u4eec\u7b2c\u4e09\u7ef4\u8bbe\u7684\u662f \u201c\u8def\u5f84\u4e0a\u6700\u957f\u8fb9\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $k$\u201d\u3002\n\n$\\quad \\quad$ \u7b2c\u4e8c\u4e2a\u8f6c\u79fb\u662f\uff1a`f[i][j][c] = min(f[i][j][c], f[i][k][c] + f[k][j][c])` \u8fd9\u662f\u7c7b\u4f3c\u4e00\u822c Floyd \u7684\u8f6c\u79fb\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u72b6\u6001\u8bbe\u7f6e\u7684\u7f18\u6545\uff0c\u8fd9\u91cc\u7684\u7b2c\u4e09\u7ef4\u53ef\u4ee5\u5168\u90e8\u7528\u540c\u4e00\u4e2a\u5b57\u6bcd\u8fdb\u884c\u8f6c\u79fb\u3002\n\n$\\quad \\quad$ \u4e3a\u4ec0\u4e48\u4e0a\u9762\u4e24\u4e2a\u8f6c\u79fb\u662f\u6b63\u786e\u7684\uff1f\n\n$\\quad \\quad$ \u7b2c\u4e00\u4e2a\u8f6c\u79fb\u6b63\u786e\u6027\u663e\u7136\uff0c\u7b2c\u4e8c\u4e2a\u8f6c\u79fb\u4e0e Floyd \u7b49\u4ef7\u3002\n\n$\\quad \\quad$ \u521d\u59cb\u5316\u548c\u7edf\u8ba1\u7b54\u6848\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\u5c31\u597d\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u662f $O(n^3w)$\uff0c\u6709\u70b9\u5927\uff0c\u8981\u5438\u6c27\u624d\u80fd\u8fc7\uff08\u5176\u5b9e\u6709\u5f88\u591a\u5197\u4f59\u72b6\u6001\u6765\u7740\uff0c\u53bb\u6389\u5197\u4f59\u72b6\u6001\u518d\u52a0\u4f18\u5316\uff0c\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u4e0b\u6765\u7684\uff0c\u8fd9\u91cc\u5c31\u61d2\u5f97\u5199\u4e86\uff09\u3002\n\n$\\quad \\quad$ \u6700\u7ec8\u7edf\u8ba1\u7b54\u6848\u7684\u65b9\u5f0f\u8c8c\u4f3c\u4e0e\u65b9\u9762\u4e00\u6837\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u4e3a\u6211\u4eec\u5176\u5b9e\u662f\u628a\u6240\u6709\u53ef\u80fd\u7684\u9053\u8def\u90fd\u7b97\u51fa\u6765\u4e86\u7684\u3002\n\n---\n\n$\n$\n\n### \u6700\u7ec8\u4ee3\u7801\uff1a\n\n\n```cpp\n// \u8981\u5f00 O2 \u7684\u6765\u7740\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 110;\nconst int M = 2010;\n\nint n, m, f[N][N][300];\n\ninline int read()\n{\n\tint x = 0, ch = '~';\n\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = (x << 3) + (x << 1), x += ch - '0', ch = getchar();\n\n\treturn x;\n}\n\nint u[M], v[M], w[M];\n\nint main()\n{\n\tn = read(), m = read();\n\tmemset(f, 0x3f, sizeof(f));\n\tfor(register int k = 1; k <= m; k++)\n\t{\n\t\tu[k] = read(), v[k] = read(), w[k] = read();\n\n\t\tfor(int i = w[k]; i <= 260; i++)\n\t\t\tf[u[k]][v[k]][i] = f[v[k]][u[k]][i] = w[k];\n\t}\n\tfor(register int k = 1; k <= n; k++)\n\t\tfor(register int i = 0; i <= 260; i++)\n\t\t\tf[k][k][i] = 0;\n\n\tfor(register int k = 1; k <= n; k++)\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tif(k != i && i != j && k != j)\n\t\t\t\t\tfor(int c = 0; c <= 260; c++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c != 0) f[i][j][c] = min(f[i][j][c], f[i][j][c - 1]);\n\t\t\t\t\t\tf[i][j][c] = min(f[i][j][c], f[i][k][c] + f[k][j][c]);\n\t\t\t\t\t}\n\n\tint answ = 0x3f3f3f3f;\n\n\tfor(register int k = 1; k <= m; k++)\n\t{\n\t\tansw = min(answ, f[1][u[k]][w[k]] + f[v[k]][n][w[k]] + w[k] * 2);\n\t\tansw = min(answ, f[1][v[k]][w[k]] + f[u[k]][n][w[k]] + w[k] * 2);\n\t}\n\n\tprintf(\"%d\", answ);\n\n\treturn 0;\n}\n```\n\n\n---\n\n$\n$\n\n### \u7ed3\u8bed\uff1a\n\n$\\quad \\quad$ \u6211\u771f\u7684\u6709\u4e00\u4e2a\u7edd\u5999\u7684\u60f3\u6cd5\u6765\u7740\uff0c\u53ea\u4e0d\u8fc7\u5199\u7740\u5199\u7740\u5c31\u5fd8\u4e86 /kk\u3002\n\n$\\quad \\quad$ \u5982\u679c\u672c\u9898\u89e3\u6709BUG\uff0c\u8fd8\u8bf7\u8bc4\u8bba\u6216\u79c1\u4fe1\u4f5c\u8005\u3002\n\n---\n\n$$ \\large{END}$$",
        "postTime": 1583217518,
        "uid": 118274,
        "name": "Sata_moto",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2349 \u3010\u91d1\u5b57\u5854\u3011"
    },
    {
        "content": "\u6211\u4eec\u7528 $dijkstra$ \u6765\u5199\u3002\n  \n  \u4e0e\u5e73\u5e38 $dijkstra$ \u4e0d\u540c\u7684\u662f\uff0c\u6b64\u9898\u8fd8\u9700\u8981\u7ef4\u62a4\u8be5\u6761\u8def\u4e0a\u6700\u5927\u6743\u503c\uff0c\u6545\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a$pre[i]$ \u6570\u7ec4\u7ef4\u62a4\u6700\u4f18\u89e3\u8fd9\u6761\u8def\u4e0a\u7684\u6700\u5927\u6743\u503c\u3002\n  \n  $dist[i]$ \u5b58\u50a8\u7684\u662f\u6839\u672c\u610f\u4e49\u4e0a\u7684\u6700\u77ed\u8def **\uff08\u5c31\u662f\u6307\u518d\u52a0\u4e0a\u6700\u957f\u8def\u7684\u503c\uff0c\u8d77\u70b9\u5230 $i$ \u70b9\u6700\u77ed\u7684\u6743\u503c\uff0c\u5373\u9898\u76ee\u6240\u6c42\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 $dist[]$ \u5b58\u50a8\u7684\u503c\u662f\u5c1a\u672a\u518d\u52a0\u4e0a\u6700\u957f\u8def\u7684\u603b\u503c\u3002\uff09**   \n  \n\u56e0\u4e3a\u6709\u4e9b\u8def\u5b83\u4e0d\u52a0\u4e24\u500d\u6743\u503c\u7684\u8bdd\u4f1a\u5bfc\u81f4\u6bd4\u6b63\u786e\u7b54\u6848\u66f4\u77ed\uff0c\u8fd9\u6837\u8bb0\u5f55\u5c31\u9519\u4e86\u3002\n\u5176\u6b21\uff0c\u50cf\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u6211\u4eec\u5728\u653e\u7f29\u7684\u65f6\u5019\uff0c\u4e0d\u5e94\u8be5\u7528 $dist[]$ \u76f4\u63a5\u5b58\u50a8\u6211\u4eec\u9700\u8981\u7684\u7b54\u6848\uff0c\u5373\u5148\u4e0d\u518d\u52a0\u4e0a\u6700\u5927\u6743\u503c\u3002\n  \n\u6240\u4ee5\u6211\u4eec\u6700\u77ed\u8def\u8dd1\u7684\u5e94\u8be5\u662f:\n  \n  1\u3001\u5728\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u6700\u77ed\u8def\u503c\u5374\u5148\u6ca1\u6709\u518d\u52a0\u4e0a\u8fd9\u6761\u8def\u6700\u957f\u6743\u503c\u7684 $dist[i]$ \u3002\n  \n  2\u3001$pre[i]$ \u59cb\u7ec8\u4fdd\u5b58\u7684\u662f\uff0c\u6bcf\u6b21\u653e\u7f29\u540e\u7684\u771f\u6b63\u610f\u4e49\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u6700\u957f\u8def\u6743\u503c\u3002\n\n\u6545\u6211\u4eec\u6700\u540e\u8f93\u51fa $dist[n] + pre[n]$ \u5373\u53ef\u3002\n\n**\u6b64\u5916\u6ce8\u610f\u7684\u662f\uff1a\u6211\u4eec\u4e0d\u9700\u8981\u7528 $vis[]$ \u6807\u8bb0\u5df2\u8d70\u8fc7\u6216\u5df2\u7ecf\u5904\u7406\u6700\u77ed\u8def\u7b54\u6848\uff0c\u7136\u540e\u4e0d\u518d\u66f4\u65b0\u3002** \u8fd9\u5c06\u4f1a\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\uff0c\u56e0\u4e3a\u53ef\u80fd\u4ece\u5df2\u7ecf\u5904\u7406\u8fc7\u7684 $u$ \u70b9 \u8d70\u5230\u5df2\u7ecf\u5904\u7406\u8fc7\u7684 $v$ \u70b9\uff0c\u4e14\u66f4\u65b0\u5230 $v$ \u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u6bd4\u5982\u6837\u4f8b\u4e2d\uff1a\u6839\u636e\u4f18\u5148\u961f\u5217\u987a\u5e8f\uff0c\u5230\u6700\u540e\uff0c\u4f1a\u5148\u66f4\u65b0\u8282\u70b9 \u2466 \uff0c\u518d\u66f4\u65b0\u8282\u70b9 \u2463\uff0c\u800c\u5982\u679c\u6807\u8bb0 $vis[7]=true$ \u7684\u8bdd\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4 \u2463 --> \u2466 \u8fd9\u6761\u8def\u4e0d\u518d\u8d21\u732e\u4e8e $dist[7]$ \uff0c\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\u3002\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a**\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<string.h>\n#include<queue>\n#define maxn 108\n#define inf 0x3f3f3f3f\nusing namespace std;\ntypedef long long ll;\nint n,m,cnt;\nint head[maxn];\nll pre[maxn],dist[maxn];\nbool vis[maxn];\nstruct Node\n{\n    int to;\n    ll val;\n    Node (){};\n    Node(ll _val,int _to){\n        to=_to,val=_val;\n    }\n    bool operator < (const Node &a) const{\n        return val>a.val;\n    }\n};\nstruct Edge\n{\n    int to;\n    ll val;\n    int next;\n}edge[2008<<1];\ninline void add(int u,int v,ll w)\n{\n    edge[++cnt].to=v;\n    edge[cnt].val=w;\n    edge[cnt].next=head[u];\n    head[u]=cnt;\n    return;\n}\nvoid dijkstra(int u)\n{\n    priority_queue<Node> q;\n    while(!q.empty()) q.pop();\n    for(int i=1;i<=n;i++) {dist[i]=inf,vis[i]=false;pre[i]=0;}\n    dist[u]=0;\n    q.push(Node(0,1));\n    while(!q.empty())\n    {\n        int u=q.top().to;\n        ll t=dist[u];\n        q.pop();\n        for(int i=head[u];i;i=edge[i].next){\n            int v=edge[i].to;\n            if((dist[v]+pre[v]>t+edge[i].val+max(edge[i].val,pre[u]))){\n                pre[v]=max(pre[u],edge[i].val);\n                dist[v]=edge[i].val+t;\n                q.push(Node(dist[v],v));\n            }\n        }\n    }\n    return;\n}\nint main()\n{\n    //freopen(\"test.in\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    int A,B;\n    ll C;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%lld\",&A,&B,&C);\n        add(A,B,C);add(B,A,C);\n    }\n    dijkstra(1);\n    printf(\"%lld\\n\",dist[n]+pre[n] );\n}\n```\n",
        "postTime": 1566213693,
        "uid": 178665,
        "name": "\u5927\u5934\u51b2\u950b\u8f66\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2349 \u3010\u91d1\u5b57\u5854\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u9898\uff0c\u867d\u7136\u4e0d\u96be\uff08\u53ef\u4ee5\u7528\u4e00\u4e9b\u6bd4\u8f83\u76f4\u63a5\u7684\u66b4\u529b\u65b9\u6cd5\uff09\u6c42\u89e3\uff0c\u4f46\u5b83\u4ecd\u662f\u6700\u77ed\u8def\u8fd9\u4e2a\u677f\u5757\u4e2d\u7684\u4e00\u80a1\u6e05\u6d41\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u79cd\u601d\u8def\uff1a\u9650\u5236\u3002\n\n## \u601d\u8def\n\u9898\u610f\u5927\u6982\u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u53cc\u5411\u56fe\uff0c\u6c42\u4e00\u6761\u4ece\u524d\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5e76\u5c06\u8fd9\u6761\u8def\u7684\u6700\u5927\u503c\u53d6\u51fa\u6765\uff0c\u5355\u72ec\u52a0\u4e0a\uff0c\u6c42\u52a0\u4e0a\u540e\u7684\u8def\u7684\u6700\u5c0f\u503c\u3002\n\n\u6216\u8bb8\u5f88\u591a\u4eba\u7684\u601d\u8def\u90fd\u662f\u5728\u8dd1\u6700\u77ed\u8def\u7684\u56fe\u4e2d\u6c42\u6700\u5927\u503c\u6700\u540e\u52a0\u4e0a\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u79cd\u8ddf\u7b80\u5355\u7684\u601d\u8def\uff1a\u9650\u5236\u3002\u679a\u4e3e\u6bcf\u4e00\u6761\u6700\u77ed\u8def\uff0c\u5047\u8bbe\u8fd9\u6761\u6700\u77ed\u8def\u5c31\u662f\u8fd9\u6b21\u6700\u77ed\u8def\u7684\u6700\u957f\u7684\u8def\u5f84\uff0c\u4ee5\u6b64\u4e3a\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u6b21\u6700\u77ed\u8def\u7528\u5230\u7684\u8fb9\u5747\u4e0d\u4f1a\u5927\u4e8e\u5b83\u3002\u8dd1 $m$ \u6b21\u8fea\u6770\u65af\u7279\u62c9\uff0c\u6bcf\u6b21\u66f4\u65b0\u662f\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\uff0c\u6700\u540e\u5728\u5224\u65ad\u662f\u5426\u8054\u901a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n## AC code\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define x first\n#define y second\nusing namespace std;\ntypedef pair<int,int> pii;\nconst int N=110,M=2010;\nint n,m;\nint w[M];\nint dis[N];\nbool st[N];\nint ans=1e9+7;\nint h[N],idx=0;\nstruct Node{\n\tint w;\n\tint to,ne;\n}tr[M<<1];\nvoid add(int u,int v,int w){\n\ttr[idx].w=w,tr[idx].to=v,tr[idx].ne=h[u],h[u]=idx++;\n}\nvoid dij(int p){\n\tpriority_queue<pii> q;\n\tmemset(st,false,sizeof st);\n\tmemset(dis,0x3f,sizeof dis);\n\tint inf=dis[0];\n\tdis[1]=0,q.push({0,1});\n\twhile(!q.empty()){\n\t\tint t=q.top().y;\n\t\tq.pop();\n\t\tif(st[t]) continue;\n\t\tst[t]=true;\n\t\tfor(int i=h[t];i!=-1;i=tr[i].ne){\n\t\t\tint to=tr[i].to;\n\t\t\tif(dis[to]>dis[t]+tr[i].w&&tr[i].w<=p){\n\t\t\t\tdis[to]=dis[t]+tr[i].w;\n\t\t\t\tq.push({-dis[to],to});\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[n]!=inf) ans=min(ans,dis[n]+p);\n}\nsigned main(){\n\tmemset(h,-1,sizeof h);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tcin>>u>>v>>w[i];\n\t\tadd(u,v,w[i]),add(v,u,w[i]);\n\t}\n\tfor(int i=1;i<=m;i++) dij(w[i]);\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1671246909,
        "uid": 706523,
        "name": "zhengdongwen",
        "ccfLevel": 0,
        "title": "P2349 \u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\u53ca\u5206\u6790\uff1a\n1. \u770b\u9898\uff0c\u53ef\u4ee5\u77e5\u9053\u5730\u56fe\u662f\u4e00\u5f20\u56fe\uff0c\u5e76\u4e14\u65e0\u5411\uff0c\u6240\u4ee5\u5efa\u53cc\u5411\u8fb9\u3002\n2. \u7528\u6700\u77ed\u8def\u6765\u6c42\u89e3\u3002\u7531\u4e8e\u9898\u89e3\u91cc\u6ca1\u6709 SPFA\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u7684\u662f SPFA\u3002\u770b\u6570\u636e\u8303\u56f4  SPFA \u4e0d\u4f1a\u6b7b\u3002\n3. \u5173\u4e8e\u8fd9\u53e5\u8bdd\uff1a\u201c\u90a3\u9635\u70df\u4f1a\u8ba9\u5979\u5728\u76f4\u63a5\u8fde\u63a5\u67d0\u4e24\u4e2a\u5ba4\u4e4b\u95f4\u7684\u901a\u9053\u5185\u7684\u884c\u8d70\u901f\u5ea6\u51cf\u534a\u201d\uff0c\u610f\u601d\u662f\u8fd9\u4eba\u8d70\u7684\u6700\u77ed\u8def\u4e0a\u6700\u957f\u8fb9\u662f\u500d\u957f\u4e86\u7684\uff08\u901f\u5ea6\u51cf\u534a\uff0c\u76f8\u5f53\u4e8e\u957f\u5ea6\u4e58\u4e8c\uff09\uff0c\u4e5f\u5c31\u662f\uff0c\u6211\u4eec\u6240\u627e\u7684\u8def\u5f84\u4e0a\u7684\u6700\u957f\u8fb9\u7684\u957f\u5ea6\u662f\u539f\u6765\u7684\u4e24\u500d\u3002\u5176\u5b9e\u4e0d\u96be\u5904\u7406\uff0c\u53ea\u8981\u5e26\u7740\u622a\u81f3\u76ee\u524d\u7684\u6700\u77ed\u8def\u4e0a\u7684\u6700\u957f\u8fb9\u4e00\u8d77\u66f4\u65b0\u5373\u53ef\uff08\u6ce8\u610f\u6700\u77ed\u8def\u548c\u6700\u957f\u8fb9\u5206\u5f00\uff09\uff0c\u6700\u957f\u8fb9\u7528\u6570\u7ec4\u5b58\u50a8\u5373\u53ef\u3002\n4. \u4e0d\u96be\u5f97\u51fa\uff0c\u7b54\u6848\u5373\u6700\u77ed\u8def\u52a0\u4e0a\u6700\u77ed\u8def\u4e0a\u7684\u6700\u957f\u8fb9\u3002\n\n\u5269\u4e0b\u4e0d\u660e\u767d\u7684\u4ee3\u7801\u91cc\u6709\u6ce8\u91ca\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100010\nstruct edge\n{\n\tint v,w,next;\n}ed[2*N];\nint n,cnt,m,w[N],dis[N],maxn[N],head[2*N]; // maxn \u5373\u76ee\u524d\u6700\u77ed\u8def\u4e0a\u7684\u6700\u957f\u8fb9\nvoid add(int u,int v,int w)\n{\n\ted[++cnt].v=v;\n\ted[cnt].w=w;\n\ted[cnt].next=head[u];\n\thead[u]=cnt;\n}\nqueue<int> q;\nvoid spfa() // spfa \u6c42\u6700\u77ed\u8def\n{\n\tmemset(dis,63,sizeof(dis)); // dis \u521d\u59cb\u8d4b\u6781\u5927\u503c\uff08\u5b9e\u9645\u8d4b\u51fa\u6765\u4e0d\u662f63\uff0c\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u4e0b\uff09\n\tq.push(1); // \u8d77\u70b9\u662f 1\n\tdis[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i!=0;i=ed[i].next)\n\t\t{\n\t\t\tint v=ed[i].v,w=ed[i].w;\n\t\t\tif(dis[v]+maxn[v]>dis[u]+max(w,maxn[u])+w) // \u5e26\u7740\u6700\u957f\u8fb9\u4e00\u8d77\u66f4\u65b0\u6700\u77ed\u8def\uff0c\u4f46\u6ce8\u610f\u6700\u957f\u8fb9\u53ef\u80fd\u662f\u5f53\u524d\u8fd9\u6761\u6240\u4ee5\u4e24\u8005\u53d6max\u5373\u53ef\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+w; // \u66f4\u65b0\u6700\u77ed\u8def\n\t\t\t\tmaxn[v]=max(maxn[u],w); // \u66f4\u65b0\u6700\u957f\u8fb9\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1,u,v,w;i<=m;i++)\n\t{\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t\tadd(v,u,w); // \u53cc\u5411\u8fb9\n\t}\n\tspfa();\n\tcout<<maxn[n]+dis[n]; // \u7b54\u6848\u5373\u6700\u77ed\u8def\u52a0\u4e0a\u5176\u6700\u957f\u8fb9\n\treturn 0;\n}\n```",
        "postTime": 1675260060,
        "uid": 514610,
        "name": "mzyc_yang2021",
        "ccfLevel": 4,
        "title": "P2349 \u91d1\u5b57\u5854"
    },
    {
        "content": "\u6c34\u4e00\u4e0b\u56fe\u8bba......\n\n# solution\n\n- \u4e00\u773c\u770b\u4e0b\u53bb\u611f\u89c9\u4e0d\u662f\u5f88\u5178\u7684\u6700\u77ed\u8def\uff0c\u800c\u53c8\u6ce8\u610f\u5230 $n \\le 100$\uff0c\u4e8e\u662f\u679c\u65ad\u638f\u51fa\u6211\u7684 dfs\u3002\n\n- \u5b9a\u4e49\u4e09\u4e2a\u7ef4\u5ea6\uff0c$a$\u3001$M$\u3001$s$\uff0c\u5206\u522b\u8868\u793a\u5f53\u524d\u9012\u5f52\u5230\u7b2c $a$ \u4e2a\u70b9\uff0c$1$ \u53f7\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u4e2d\u641c\u5230\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\uff0c$1$ \u53f7\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u641c\u5230\u7684\u8def\u5f84\u548c\u3002\n\n- \u4e00\u822c\u7528 dfs \u8dd1\u6700\u77ed\u8def\u90fd\u8981\u6709\u4e2a\u9012\u5f52\u8fb9\u754c\uff0c\u5426\u5219\u4f1a\u50cf\u65e0\u5934\u82cd\u8747\u4e00\u6837\u4e71\u8dd1\uff0c\u5bfc\u81f4\u6b7b\u5faa\u73af\uff0c\u6211\u4eec\u5b9a\u4e49 $f_{i,j}$ \u8868\u793a\u5230 $i$ \u53f7\u70b9\u65f6\uff0c$1$ \u53f7\u70b9\u5230 $i$ \u53f7\u70b9\u4e4b\u95f4\u8def\u5f84\u6700\u5927\u503c\u4e3a $j$ \u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u540c\u65f6\u7528 $f$ \u6570\u7ec4\u8fdb\u884c\u6700\u4f18\u6027\u526a\u679d\uff0c\u4fdd\u8bc1\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n- \u540c\u673a\u623f\u5927\u4f6c\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u4e3a\u4e86\u9632\u6b62\u9012\u5f52\u65b9\u5411\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u91cd\u590d\u904d\u5386\u540c\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a $v$ \u6570\u7ec4\u8bb0\u5f55\u67d0\u6761\u8fb9\u662f\u5426\u66fe\u7ecf\u904d\u5386\u8fc7\uff0c\u5982\u679c\u904d\u5386\u8fc7\u518d\u6b21\u904d\u5386\u5c31\u6ca1\u6709\u610f\u4e49\uff0c\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u5c42\u3002\n\n# code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 2005\nint n,m,i,j,ans=1e9;\nint h[105],a,b,c,k;\nint f[105][260],v[N*30];\nstruct AB{\n\tint a,b,c,n;\n}d[N*2];\nvoid cun(int a,int b,int c){\n\td[++k].a=a,d[k].b=b,d[k].c=c;\n\td[k].n=h[a],h[a]=k;\n}\nvoid dfs(int a,int M,int s){\n\tif(s+M>=ans) return;\n\tif(f[a][M]<=s) return;\n\tf[a][M]=s;\n\tif(a==n){\n\t\tans=min(ans,s+M);\n\t\treturn;\n\t}\n\tfor(int i=h[a];i;i=d[i].n){\n\t\tint b=d[i].b,c=d[i].c;\n\t\tif(v[i]==1) continue;\n\t\tv[i]=1;\n\t\tdfs(b,max(M,c),s+c);\n\t\tv[i]=0;\n\t}\n}\nint main(){\n\tmemset(f,1,sizeof(f));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tcun(a,b,c);\n\t\tcun(b,a,c);\n\t}\n\tdfs(1,0,0);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n- \u611f\u89c9 dfs \u5f88\u5bb9\u6613\u88ab hack \u6389......",
        "postTime": 1674047993,
        "uid": 664744,
        "name": "winds888",
        "ccfLevel": 0,
        "title": "P2349 \u91d1\u5b57\u5854"
    },
    {
        "content": "\u601d\u8def\uff1a\u9898\u76ee\u7684\u610f\u601d\u662f\uff0c\u627e\u4e00\u4e2a**\u6700\u77ed\u8def**\uff0c\u5e76\u4e14\u4f7f**\u6700\u5927\u7684\u6743\u503c+\u6700\u77ed\u8def**\u6700\u5c0f\uff0c\u9996\u5148\u53ef\u4ee5\u5957\u4e00\u4e2a==dijkstra==\u6a21\u677f\uff0c\u518d\u5355\u72ec\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u6700\u5927\u503c\uff0c**\u56e0\u4e3a\u5b58\u4e00\u8d77\uff0c\u4e0d\u65b9\u4fbf\u627e\u51fa\u6700\u5927\u503c\u6765\u6bd4\u8f83**\u6700\u540e\u628a\u4e24\u4e2a\u6570\u503c\u52a0\u8d77\u6765\uff0c\u5f97\u51fa\u7b54\u6848\uff0c\u53e6\u5916\u8f6c\u79fb**dis**\u65f6\u4e00\u5b9a\u8981\u52a0\u4e0a\u5f53\u524d\u7684\u6743\u503c\uff0c\u4e0d\u8981\u5fd8\u4e86\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#define int long long\nusing namespace std;\n\nbool vis[4005];\nint dis[4005], e[4005];\nint head[4005], next[4005], to[4005], w[4005], cnt;\n\nstruct node {\n\tint now, s, maxn;\n\tnode() {}\n\tnode(int Now, int S, int Maxn) {\n\t\tnow = Now; s = S; maxn = Maxn;\n\t}\n};\n\nint Max(int x, int y) { return x > y ? x : y; }\nint Min(int x, int y) { return x < y ? x : y; }\n\nvoid add(int x, int y, int s) {\n\tto[++ cnt] = y;\n\tw[cnt] = s;\n\tnext[cnt] = head[x];\n\thead[x] = cnt;\n} \n\nqueue<node> q;\n\nbool operator <(node x, node y) {\n\treturn x.s > y.s;\n}\n\nvoid dijkstra(int begin) {\n\tdis[begin] = 0;\n\tq.push(node(begin, 0, 0));\n\twhile(!q.empty()) {\n\t\tint now = q.front().now, s = q.front().s, maxn = q.front().maxn;\n\t\tq.pop(); vis[now] = 0;\n\t\tfor(int i = head[now]; i; i = next[i]) {\n\t\t\tint t = to[i], ma = Max(maxn, w[i]);\n\t\t\tif(dis[t] + e[t] > dis[now] + w[i] + ma) {\n\t\t\t\tdis[t] = dis[now] + w[i]; e[t] = ma;\n\t\t\t\tq.push(node(t, s + w[i], ma));\n\t\t\t} \n\t\t} \n\t}\n} \n\nsigned main() {\n\tint n, m, u, v, w;\n\tscanf(\"%lld %lld\", &n, &m);\n\tmemset(dis, 0x3f, sizeof(dis));\n\tfor(int i = 1; i <= m; i ++) {\n\t\tscanf(\"%lld %lld %lld\", &u, &v, &w);\n\t\tadd(u, v, w); add(v, u, w);\n\t} dijkstra(1);\n//\tfor(int i = 1; i <= n; i ++) {\n//\t\tprintf(\"%d\\n\", dis[i]);\n//\t}\n\tprintf(\"%lld\", dis[n] + e[n]);\n} \n```",
        "postTime": 1610600772,
        "uid": 254485,
        "name": "lakafl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2349 \u3010\u91d1\u5b57\u5854\u3011"
    }
]