[
    {
        "content": "#### \u9898\u76ee\u5730\u5740\uff1a[P5290 [\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd](https://www.luogu.org/problemnew/show/P5290)\n\n## \u9a97\u5206\u65b9\u6cd5\n\n\u5982\u679c\u4f60\u5b9e\u5728\u4e00\u70b9\u601d\u8def\u4e5f\u6ca1\u6709\uff0c\u66b4\u529b\u90fd\u4e0d\u4f1a\u6253\uff0c\u90a3\u4e48\u8bf7\u8003\u8651\u4e00\u4e0b\u9a97\u5206\u3002\n\n### \u65b9\u6cd5\u4e00\n\n\u8f93\u51fa\u6240\u6709 $M$ \u7684\u548c\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a0\u5206\u3002\n\n~~\u5b9e\u9645\u8fd8\u67095\u5206~~\n\n### \u65b9\u6cd5\u4e8c\n\n\u6ce8\u610f\u5230\u6709 $15$ \u5206\u4e3a\u4e00\u6761\u94fe\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8003\u8651\uff1a\n\n1. 1\u53f7\u70b9\u6709\u4e00\u4e2a\u513f\u5b50\u2014\u2014\u8be6\u89c1\u65b9\u6cd5\u4e00\u3002\n2. 1\u53f7\u70b9\u6709\u4e24\u4e2a\u513f\u5b50\u2014\u2014\u628a\u5bf9\u8fd9\u4e24\u4e2a\u513f\u5b50\u4e0b\u7684\u4e24\u6761\u94fe\u5f04\u6210\u4e24\u4e2a\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u5806\u7684\u5806\u9876\uff0c\u53d6 $max$ \u52a0\u5165\u7b54\u6848\uff0c\u5f53\u4e00\u4e2a\u5806\u53d6\u5c3d\u540e\uff0c\u628a\u53e6\u4e00\u4e2a\u5806\u91cc\u7684\u6240\u6709\u5143\u7d20\u52a0\u5165\u7b54\u6848\uff0c\u6700\u540e\u52a0\u5165 $M_1$ \u3002\n\n\u671f\u671b\u5f97\u5206\uff1a15\u5206\u3002\n\n## \u66b4\u529b\u65b9\u6cd5\n\n\u5982\u679c\u4f60\u7684\u66b4\u529b\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u4f4e\u5e76\u4e14\u5e38\u6570\u5f88\u4f18\u79c0\uff0c\u90a3\u4e48\u62ff\u5230\u4e00\u9053\u9898\u7684\u5927\u90e8\u5206\u5206\u6570\u662f\u5f88\u5bb9\u6613\u7684\u3002\n\n### \u65b9\u6cd5\u4e09\n\n\u53ef\u4ee5\u5199\u4e00\u4e2a\u5f88\u9ad8\u8d85\u7684\u7eaf\u66b4\u641c\u8fc7\u6389\u6570\u636e\u8f83\u5c0f\u76842~4\u4e2a\u70b9\u3002\n\n~~\u7136\u800c\u8bf4\u5b9e\u8bdd\u8fd9\u9053\u9898\u5199\u7eaf\u66b4\u641c\u7684\u96be\u9053\u8c8c\u4f3c\u5927\u4e8e\u5199\u6b63\u89e32333~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4e0d\u8be6\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a10~20\u5206\u3002\n\n### \u65b9\u6cd5\u56db\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0c\u5219\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u6700\u7ec8\u4f1a\u5f62\u6210\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u56fe\u3002\u5219\u7b54\u6848\u662f\u8fd9\u4e2a\u56fe\u7684\u4e00\u4e2a\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u662f **NPC** \u95ee\u9898\uff0c\u6700\u5feb\u7684\u65b9\u6cd5\u8c8c\u4f3c\u662f\u72b6\u538b\uff0c $O(3^n)$ \u3002\n\n\u671f\u671b\u5f97\u5206\uff1a45\u5206\u3002\n\n### \u65b9\u6cd5\u4e94\n\n\u501f\u7528\u65b9\u6cd5\u56db\u7684\u601d\u60f3\uff0c\u5982\u679c $x,y$ \u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0c\u5219 $a_{x,y}$ \u4e3a $1$ \uff0c\u5426\u5219\u4e3a $0$ \uff0c\u8fd9\u6837\u53ef\u4ee5\u6784\u9020\u51fa\u6765\u4e00\u4e2a $n \\times n$ \u7684 01 \u77e9\u9635\u3002\n\n\u6309 $M$ \u503c\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5730\u9009\u3002\u6bcf\u9009\u62e9\u4e00\u4e2a\u5c31\u518d\u4ece\u5927\u5230\u5c0f\u628a\u80fd\u9009\u7684\u90fd\u9009\u4e0a\uff0c\u7136\u540e\u628a\u9009\u62e9\u7684\u8fd9\u4e2a\u7684 $M$ \u503c\u52a0\u5165\u7b54\u6848\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u9009\u5b8c\u4e4b\u540e\u90fd\u8981\u66f4\u65b0\u53ef\u9009\u7684\u96c6\u5408\uff0c\u8fd9\u4e2a\u66f4\u65b0\u662f $O(n)$ \u7684\uff0c\u800c\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u4e4b\u540e\uff0c\u8fd8\u6709\u8981\u4ece\u5927\u5230\u5c0f\u628a\u80fd\u9009\u7684\u90fd\u9009\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u662f $O(n)$ \u7684\uff0c\u4e00\u5171\u8981\u8fdb\u884c $O(n)$ \u6b21\u9009\u62e9\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$ \u7684\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a45\u5206\u3002\n\n### \u65b9\u6cd5\u516d\n\n\u4ece\u65b9\u6cd5\u56db\u7684 $O(3^n)$ \u5230\u65b9\u6cd5\u4e94 $O(n^3)$ \uff0c\u671f\u671b\u5f97\u5206\u6ca1\u53d8\u6d77\u661f\u3002\n\n\u8003\u8651\u4f18\u5316\u65b9\u6cd5\u4e94\uff0c\u6211\u4eec\u5728\u65b9\u6cd5\u4e94\u4e2d\u770b\u5230\u8fd9\u4e24\u4e2a\u8bcd\uff1a01 \u77e9\u9635\uff0c\u96c6\u5408\u3002\u5c1d\u8bd5\u7528 **bitset** \u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e25\u683c\u6765\u8bb2\u6ca1\u53d8\uff0c\u4f46\u662f\u5e38\u6570\u53d8\u6210\u539f\u6765\u7684 $\\frac{1}{64}$ \u3002\n\n\u671f\u671b\u5f97\u5206\uff1a60\u5206\u3002\n\n### \u65b9\u6cd5\u4e03\n\n\u6362\u4e00\u79cd\u601d\u8def\u3002\n\n\u8003\u8651\u7c7b\u4f3c\u65b9\u6cd5\u4e8c\u7684\u7b2c $2$ \u79cd\u60c5\u51b5\u5408\u5e76\u4e24\u9897\u5b50\u6811\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(n^2)$ \u3002\n\n\u671f\u671b\u5f97\u5206\uff1a60\u5206\u3002\n\n## \u8003\u573a\u4ee3\u7801\n\n\u6211\u5728\u8003\u573a\u4e0a\u5199\u51fa\u6765\u7684\u4ee3\u7801\u662f\u65b9\u6cd5\u516d\u548c\u65b9\u6cd5\u4e8c\u7684\u7ed3\u5408\u7248\uff0c\u5f97\u5206\u4e3a $75$ \u5206\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define pii pair<int, int>\n#define mp make_pair\nusing namespace std;\nconst int N = 2e5 + 6;\nint n, a[N], f[N];\nll ans = 0;\n\ninline int rd() {\n    int x = 0;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + (ch - '0'), ch = getchar();\n    return x;\n}\n\ninline bool pd1() {\n    for (int i = 2; i <= n; i++) if (f[i] != i - 1) return 0;\n    return 1;\n}\n\ninline void P101112_1() {\n    for (int i = 1; i <= n; i++) ans += a[i];\n    cout << ans << endl;\n}\n\nnamespace P101112_2 {\n    int deg[N];\n\n    inline bool pd() {\n        for (int i = 2; i <= n; i++) ++deg[f[i]];\n        if (deg[1] != 2) return 0;\n        for (int i = 2; i <= n; i++) if (deg[i] > 1) return 0;\n        return 1;\n    }\n\n    int son[N];\n    priority_queue<int> q[2];\n\n    inline void work() {\n        int g[2], t = 0;\n        for (int i = 2; i <= n; i++)\n            if (f[i] == 1) g[t++] = i;\n            else son[f[i]] = i;\n        ans = a[1];\n        for (int i = 0; i < 2; i++) {\n            int x = g[i];\n            while (x) q[i].push(a[x]), x = son[x];\n        }\n        while (q[0].size() && q[1].size())\n            ans += max(q[0].top(), q[1].top()), q[0].pop(), q[1].pop();\n        for (int i = 0; i < 2; i++)\n            if (q[i].size())\n                while (q[i].size()) ans += q[i].top(), q[i].pop();\n        cout << ans << endl;\n    }\n}\n\nnamespace TX {\n    const int M = 2e3 + 6;\n    bitset<M> b[M], o, v;\n    vector<int> e[M];\n    int st[M], top = 0, p[M];\n    pii g[M];\n\n    void dfs(int x) {\n        b[p[x]] = o;\n        for (int i = 1; i <= top; i++) b[p[st[i]]][p[x]] = 0;\n        st[++top] = x;\n        o[p[x]] = 0;\n        for (unsigned int i = 0; i < e[x].size(); i++) {\n            int y = e[x][i];\n            if (!o[p[y]]) continue;\n            dfs(y);\n        }\n        o[p[x]] = 1;\n        --top;\n    }\n\n    inline void work() {\n        for (int i = 2; i <= n; i++) e[f[i]].push_back(i);\n        for (int i = 1; i <= n; i++) g[i] = mp(a[i], i);\n        sort(g + 1, g + n + 1);\n        for (int i = 1; i <= n; i++) p[g[i].second] = i;\n        o.set();\n        dfs(1);\n        v.reset();\n        for (int i = n; i; i--) {\n            if (v[i]) continue;\n            o = b[i];\n            ans += g[i].first;\n            v[i] = 1;\n            for (int j = i - 1; j; j--)\n                if (o[j] && !v[j]) {\n                    v[j] = 1;\n                    o &= b[j];\n                }\n        }\n        cout << ans << endl;\n    }\n}\n\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; i++) a[i] = rd();\n    for (int i = 2; i <= n; i++) f[i] = rd();\n    if (pd1()) {\n        P101112_1();\n        return 0;\n    }\n    if (P101112_2::pd()) {\n        P101112_2::work();\n        return 0;\n    }\n    if (n < 2001) {\n        TX::work();\n        return 0;\n    }\n    return 0;\n}\n```\n\n## \u6b63\u786e\u65b9\u6cd5\n\n### \u65b9\u6cd5\u516b\n\n\u65b9\u6cd5\u4e03\u662f $O(n^2)$ \u7684\uff0c\u601d\u8003\u74f6\u9888\u5728\u54ea\u513f\uff1f\n\n\u5408\u5e76\u4e24\u9897\u5b50\u6811 $x,y$ \u65f6\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86 $O(max(size_x,size_y))$ \u3002\n\n\u80fd\u5426\u5c06\u590d\u6742\u5ea6\u964d\u5230 $O(min(size_x,size_y))$ \uff1f\n\n\u5148\u8003\u8651\u964d\u590d\u6742\u5ea6\u4e4b\u540e\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\n\n\u964d\u590d\u6742\u5ea6\u4e4b\u540e\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e00\u6b21\u5408\u5e76\uff0c\u7528 $O(min(size_x,size_y))$ \u6254\u6389\u4e86 $min(size_x,size_y)$ \u4e2a\u5143\u7d20\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6254\u6389\u4e00\u4e2a\u5143\u7d20\u662f $O(1)$ \u7684\u3002\u6211\u4eec\u8981\u628a $n$ \u4e2a\u5143\u7d20\u7ecf\u8fc7\u82e5\u5e72\u6b21\u5408\u5e76\uff0c\u6254\u6389 $O(n)$ \u4e2a\u5143\u7d20\uff0c\u6700\u7ec8\u5269\u4e0b $1$ \u4e2a\u5143\u7d20\u3002\u90a3\u4e48\u6254\u5143\u7d20\u7684\u590d\u6742\u5ea6\u4e3a $O(n)$ \uff0c\u8003\u8651\u5806\u7684\u5f71\u54cd\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\ log\\ n)$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6ee1\u8db3\u9650\u5236\uff0c\u53ef\u4ee5\u653e\u5fc3\u7684\u56de\u53bb\u8003\u8651\u5982\u4f55\u964d\u590d\u6742\u5ea6\u4e86\u3002\n\n\u5f53\u6211\u4eec\u53d6\u5b8c $min(size_x,size_y)$ \u4e2a\u5143\u7d20\u540e\uff0c\u4e00\u4e2a\u5806\u662f\u7a7a\u7684\uff0c\u53e6\u4e00\u4e2a\u5806\u8fd8\u5269\u4e0b\u4e00\u4e9b\u5143\u7d20\u3002\n\n\u90a3\u6211\u4eec\u76f4\u63a5\u628a\u521a\u624d\u53d6\u51fa\u6765\u7684\u5143\u7d20\u518d\u585e\u5230\u975e\u7a7a\u7684\u90a3\u4e2a\u5806\u4e2d\u4e0d\u5c31\u5b8c\u4e86\u4e48\uff1f\n\n~~\u86e4\uff1f\u6b63\u89e3\u8fd9\u4e48\u66b4\u529b\uff1f~~\n\n\u6211\u518d\u544a\u8bc9\u4f60\uff0c\u8fd9\u4e2a\u6b63\u89e3\u8fd8\u6709\u4e2a\u597d\u542c\u7684\u540d\u5b57\uff1a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\n\n\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\u662f\uff0c\u4ee3\u7801\u5b9e\u73b0\u4e2d\u4f1a\u51fa\u73b0 **swap** \u4e24\u4e2a\u5806\u7684\u60c5\u51b5\u3002\n\n\u5728 **ouuan** \u7684\u535a\u5ba2[\u5341\u4e8c\u7701\u8054\u80032019 \u6e38\u8bb0 & \u9898\u89e3](https://ouuan.github.io/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019-%E6%B8%B8%E8%AE%B0-%E9%A2%98%E8%A7%A3/#more)\u4e2d\uff0c\u5bf9\u6b64\u6709\u8fd9\u6837\u7684\u8bf4\u6cd5\uff1a\n\n> **swap** \u5728\u4e0d\u5f00 **C++11** \u7684\u60c5\u51b5\u4e0b\u662f $O(n)$ \u7684\uff0c\u5f00 **C++11** \u5219\u662f $O(1)$ \u7684\uff0c\u5982\u679c\u4e0d\u5f00 **C++11** \u53ef\u4ee5\u8bb0\u5f55 **id** \u7136\u540e\u4ea4\u6362 **id** \u3002\n\n~~\u6700\u7ec8\u7684\u4ee3\u7801\u771f\u5fc3\u597d\u5199\u800c\u4e14\u597d\u77edQwQ~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 6;\nint n, a[N], f;\nvector<int> e[N], o;\npriority_queue<int> q[N];\n\ninline void merge(int x, int y) {\n\tif (q[x].size() < q[y].size()) swap(q[x], q[y]);\n\twhile (q[y].size()) {\n\t\to.push_back(max(q[x].top(), q[y].top()));\n\t\tq[x].pop(), q[y].pop();\n\t}\n\twhile (o.size()) q[x].push(o.back()), o.pop_back();\n}\n\nvoid dfs(int x) {\n\tfor (unsigned int i = 0; i < e[x].size(); i++)\n\t\tdfs(e[x][i]), merge(x, e[x][i]);\n\tq[x].push(a[x]);\n}\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n\tfor (int i = 2; i <= n; i++) scanf(\"%d\", &f), e[f].push_back(i);\n\tdfs(1);\n\tlong long ans = 0;\n\twhile (q[1].size()) ans += q[1].top(), q[1].pop();\n\tcout << ans << endl;\n\treturn 0;\n}\n```",
        "postTime": 1554929411,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P5290 [\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd"
    },
    {
        "content": "## \u542f\u53d1\u5f0f\u5408\u5e76\u5e76\u4e0d\u662f$O(nlog^2n)$,\u800c\u662f$O(nlogn)$\u3002\n####\n&emsp;&emsp;\u505a\u6cd5\uff1a\u7531\u94fe\u7684\u90e8\u5206\u5206\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6761\u94fe\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u5de6\u53f3\u5404\u5f00\u4e00\u4e2a\u5806\uff0c\u7136\u540e\u6bcf\u6b21\u5de6\u53f3\u5404\u5f39\u4e00\u4e2a\u53d6$max$,\u6211\u4eec\u601d\u8003\u600e\u4e48\u7531\u94fe\u62d3\u5bbd\u5230\u6811\u4e0a\u3002\n\n&emsp;&emsp;\u4ee5\u4e8c\u53c9\u6811\u4e3a\u4f8b\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u4e8c\u53c9\u53ef\u4ee5\u770b\u505a\u4e00\u6761\u94fe\uff0c\u5de6\u53f3\u4e24\u90e8\u5206\u6309\u7167\u90e8\u5206\u5206\u7684\u65b9\u5f0f\u5408\u5e76\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u6761\u65b0\u7684\u94fe\uff0c\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u4e3a\u4e4b\u524d\u4e24\u6761\u201c\u5b50\u94fe\u201d\u7684\u4e24\u4e2a\u5bf9\u5e94\u70b9\u7684$max$,\u7136\u540e\u9012\u5f52\u7684\u505a\u4e0b\u53bb\u5c31\u597d\u4e86\u3002\n\n&emsp;&emsp;\u81f3\u4e8e\u591a\u53c9\u6811\uff0c\u663e\u7136\u548c\u4e8c\u53c9\u6811\u4e00\u6837\u3002\n#### \u65f6\u95f4\u590d\u6742\u5ea6\n&emsp;&emsp;\u53d1\u4e0b\u6765\u7684$solution$\u4ee5\u53ca\u697c\u4e0a\u7684\u9898\u89e3\u4e2d\u90fd\u6709\u63d0\u5230\uff0c\u8ba4\u4e3a\u5b83\u662f$log^2$,\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u8fd9\u9053\u9898\u548c\u4f20\u7edf\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u5e76\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u5b83\u5e76\u6ca1\u6709\u201c\u5408\u5e76\u201d\u8fdb\u53bb\uff0c\u800c\u662f\u628a\u5c0f\u7684\u90a3\u90e8\u5206\u201c\u8d34\u201d\u4e0a\u53bb\u540e\u76f4\u63a5\u628a\u5c0f\u7684\u201c\u4e22\u6389\u4e86\u201d\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u800c\u6bcf\u5f39\u51fa\u4e00\u4e2a\u70b9\u662f$log$\u7684\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlogn)$\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<queue>\nusing namespace std;\nstatic char buf[100000],*pa,*pd;\n#define gc pa==pd&&(pd=(pa=buf)+fread(buf,1,100000,stdin),pa==pd)?EOF:*pa++\ninline int read(){\n \tregister int x(0),f(1);register char c(gc);\n\twhile(c>'9'||c<'0')f=c=='-'?-1:1,c=gc;\n\twhile(c>='0'&&c<='9')x=x*10+c-48,c=gc;\n\treturn f*x;\n} \nconst int N=1100000;\nstruct edge{\n \tint to,next;\n}e[N];\nint head[N],tot;\nvoid add(int x,int y){\n \te[++tot].next=head[x];e[tot].to=y;head[x]=tot;\n} \n#define ll long long \nll ans,val[N];\nint n,po[N];\npriority_queue<ll> son[N];\nll now[N];\nint cnt;\nvoid dfs(int u){\n\tpo[u]=u;\n \tfor(int i=head[u];i;i=e[i].next){\n\t\tdfs(e[i].to);\n\t \tif(i==head[u]){\n\t\t \tpo[u]=po[e[i].to];\n\t\t} \n\t\telse{\n\t\t \tif(son[po[u]].size()<son[po[e[i].to]].size())swap(po[u],po[e[i].to]);\n\t\t\tcnt=0;\n\t\t\twhile(!son[po[e[i].to]].empty()){\n\t\t\t\tnow[++cnt]=max(son[po[e[i].to]].top(),son[po[u]].top());son[po[u]].pop();son[po[e[i].to]].pop();\n\t\t\t}\n\t\t\tfor(int j=1;j<=cnt;j++)\n\t\t\t\tson[po[u]].push(now[j]);\n\t\t} \n\t}\n\tson[po[u]].push(val[u]);\n} \nint main(){\n\tfreopen(\"spring.in\",\"r\",stdin);\n\tfreopen(\"spring.out\",\"w\",stdout);\n\tn=read();\n\tregister int i;\n\tfor(i=1;i<=n;i++)val[i]=read();\n\tfor(i=2;i<=n;i++){\n\t \tint fa=read();add(fa,i);\n\t} \n\tdfs(1);\n\twhile(!son[po[1]].empty()){\n\t\tans+=son[po[1]].top();son[po[1]].pop();\n\t}\n\tcout<<ans;\n\treturn 0;\n} \n```\n",
        "postTime": 1554645997,
        "uid": 130060,
        "name": "TopCarry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u522b\u4eba\u600e\u4e48\u5199\u7684\uff0c\u6240\u4ee5\u6765\u8bb2\u4e00\u8bb2\u6211\u81ea\u5df1\u7684\u5fc3\u8def\u5386\u7a0b\u3002\n\n### $n\\leq 2000$\n\n\u53ef\u4ee5\u8d2a\u5fc3\u3002\u5148\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u5224\u4e00\u4e2a\u70b9\u662f\u5426\u5305\u542b\u4e00\u4e2a\u70b9\u3002\u82e5\u6ca1\u6709\u5305\u542b\u5173\u7cfb\uff0c\u5c31\u76f4\u63a5\u52a0\u5165\u96c6\u5408\u4e2d\u3002\n\n\u90a3\u600e\u4e48\u5224\u4e00\u4e2a\u70b9 $x$ \u662f\u5426\u53e6\u4e00\u4e2a\u70b9 $y$ \u5b58\u5728\u5305\u542b\u5173\u7cfb\u5462\uff1f$(a_x>a_y)$\n\n1. $x$ \u5728 $y$ \u7684\u5b50\u6811\u4e2d\uff0c\u5373 $st_y\\leq id_x\\leq ed_y$\uff0c\u5f00\u4e00\u4e2a\u5355\u70b9\u52a0\u533a\u95f4\u67e5\u7684\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n2. $y$ \u5728 $x$ \u7684\u5b50\u6811\u4e2d\uff0c\u5373 $st_x\\leq id_y\\leq ed_x$\uff0c\u5f00\u4e00\u4e2a\u533a\u95f4\u52a0\u5355\u70b9\u67e5\u7684\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n)$\n\n\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5e38\u6570\u6839\u672c\u8dd1\u4e0d\u6ee1\uff0c\u6240\u4ee5 $n\\leq 2000$ \u53ef\u4ee5\u968f\u4fbf\u8fc7\u3002\n\n### \u6811\u662f\u4e00\u6761\u94fe\uff08$1$ \u4e0d\u4e00\u5b9a\u662f\u94fe\u7684\u7aef\u70b9\uff09\n\n\u5176\u5b9e\u94fe\u7684\u90e8\u5206\u5206\u5df2\u7ecf\u63d0\u793a\u4f60\u6b63\u89e3\u4e86\u3002\n\n\u5bb9\u6613\u53d1\u73b0 $1$ \u6700\u591a\u6709\u4e24\u4e2a\u652f\u94fe\uff0c\u6240\u4ee5\u6211\u4eec\u66b4\u529b\u627e\u51fa\u8fd9\u4e24\u6761\u94fe\u7684\u6240\u6709\u6743\u503c\uff0c\u7136\u540e $sort$ \u4e00\u4e0b\uff0c\u5c06\u4e24\u6761\u652f\u94fe\u5bf9\u5e94\u7684\u6743\u503c\u76f8\u52a0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n### \u6b63\u89e3\n\n\u501f\u9274\u76ee\u524d $loj$ \u6700\u4f18\u89e3 $relyt871$ \u7684\u601d\u8def\u3002\n\n\u5176\u5b9e\u94fe\u7684\u90e8\u5206\u5206\u5df2\u7ecf\u63d0\u793a\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u7684\u6700\u5927\u503c\u4e86\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u5f00\u4e00\u4e2a\u5806\uff0c\u6bcf\u6b21\u5c06 $siz$ \u8f83\u5c0f\u7684\u5408\u5e76\u5230 $siz$ \u8f83\u5927\u7684\u5806\u4e2d\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u5408\u5e76 $\\log n$ \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n$Upd$\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n[$loj$ \u8bc4\u6d4b\u8bb0\u5f55\u8bc1\u660e\u53ea $merge$ \u4e86 $n$ \u6b21](https://loj.ac/submission/409771)\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=200000+10;\nint n,a[maxn],fa[maxn],tmp[maxn],id[maxn],tim;\nint head[maxn],to[maxn],nxt[maxn],tot;\npriority_queue<int> q[maxn];\n\ninline int read()\n{\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\ninline void addedge(int x,int y)\n{\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\n\nvoid dfs(int x)\n{\n\tid[x]=++tim;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];dfs(y);\n\t\tif(q[id[x]].size()<q[id[y]].size()) swap(id[x],id[y]);\n\t\tint m=q[id[y]].size();\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\ttmp[i]=max(q[id[x]].top(),q[id[y]].top());\n\t\t\tq[id[x]].pop();q[id[y]].pop();\n\t\t}\n\t\tfor(int i=1;i<=m;i++) q[id[x]].push(tmp[i]);\n\t}\n\tq[id[x]].push(a[x]);\n}\n\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tfor(int i=2;i<=n;i++) fa[i]=read(),addedge(fa[i],i);\n\tdfs(1);\n\tll ans=0;\n\twhile(!q[id[1]].empty()) ans+=q[id[1]].top(),q[id[1]].pop();\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n\u66b4\u529b\u7684 $code$ \u5c31\u4e0d\u7ed9\u5566\uff0c\u6709\u5174\u8da3\u53bb\u6211 $loj$ \u7684\u63d0\u4ea4\u8bb0\u5f55\u4e0a\u770b\u597d\u4e86\u3002",
        "postTime": 1554630651,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/Luogu5290.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f60\u4e00\u68f5\u6709$n$\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8981\u6c42\u4f60\u5c06\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\u5212\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u5f97\u4efb\u610f\u4e00\u6bb5\u4e2d\u6ca1\u6709\u4e24\u4e2a\u6570\u6ee1\u8db3\u5b83\u4eec\u5728\u6811\u4e0a\u662f\u7956\u5148\u2014\u2014\u540e\u4ee3\u5173\u7cfb\u3002\u8bf7\u4f60\u6c42\u51fa\u6bcf\u4e00\u6bb5\u6700\u5927\u503c\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n### \u5927\u81f4\u601d\u8def\n\n\u8fd9\u9898\u5e94\u8be5\u662f\u6bd4\u8f83\u6c34\u7684\u4e00\u9053**\u5806**\u7684\u9898\u76ee\u3002\n\n\u8003\u8651\u5230\u4e0d\u80fd\u6709\u7956\u5148\u2014\u2014\u540e\u4ee3\u5173\u7cfb\uff0c\u5219\u663e\u7136\uff0c\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u7b54\u6848\uff0c\u80af\u5b9a\u8981\u4e0e\u4ee5$fa_x$\u7684\u5176\u4ed6\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u7b54\u6848\u5408\u5e76\u3002\n\n\u800c\u600e\u4e48\u5408\u5e76\u5462\uff1f\n\n\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u8981\u5408\u5e76\u5206\u522b\u4ee5$x,y$\u4e3a\u6839\u7684\u4e24\u68f5\u5b50\u6811\u7684\u7b54\u6848\u3002\n\n\u4e00\u4e2a**\u8d2a\u5fc3**\u7684\u601d\u60f3\uff0c\u4f3c\u4e4e<u>\u5206\u522b\u5c06\u4e24\u68f5\u5b50\u6811\u5185\u7684\u7b54\u6848\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u518d\u4f9d\u6b21\u5408\u5e76\u4e24\u68f5\u5b50\u6811\u5185\u7684\u7b54\u6848\uff08\u53d6\u8f83\u5927\u503c\uff09</u>\uff0c\u5c31\u662f\u6700\u4f18\u7684\u65b9\u6848\uff01\n\n\u800c\u9488\u5bf9\u591a\u68f5\u5b50\u6811\u7684\u5408\u5e76\uff0c\u6211\u4eec\u53ea\u8981\u5c06\u5176\u4f9d\u6b21\u4e24\u4e24\u5408\u5e76\u5373\u53ef\u3002\n\n\u5f53\u6211\u4eec\u5408\u5e76\u5b8c\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u6811\u7684\u7b54\u6848\u4e4b\u540e\uff0c\u518d\u5728\u5f97\u5230\u7684\u8fd9\u4e2a\u7b54\u6848\u5e8f\u5217\u4e2d\u52a0\u5165\u8be5\u70b9\u7684\u6743\u503c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u70b9\u7684\u7b54\u6848\u5e8f\u5217\u4e86\u3002\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f$1$\u53f7\u8282\u70b9\u7684\u7b54\u6848\u5e8f\u5217\u4e2d\u6240\u6709\u6570\u4e4b\u548c\u3002\n\n### \u6b63\u786e\u6027\u8bc1\u660e\n\n\u4e3a\u4ec0\u4e48\u524d\u9762\u63d0\u5230\u7684\u90a3\u79cd\u5408\u5e76\u7b54\u6848\u7684\u505a\u6cd5\u662f\u6b63\u786e\u7684\u5462\uff1f\n\n\u8ba9\u6211\u4eec\u4ee5\u4e24\u4e2a\u7b54\u6848\u5e8f\u5217\u5404\u81ea\u53ea\u6709\u4e24\u4e2a\u6570$x_1,x_2$\u548c$y_1,y_2$\uff08$x_1\\ge y_1,x_1\\ge x_2,y_1\\ge y_2$\uff09\u4e3a\u4f8b\uff08\u5176\u4f59\u60c5\u51b5\u53ef\u4ee5\u7531\u6b64\u63a8\u5e7f\uff09\uff0c\u56e0\u4e3a\u663e\u7136\u5c3d\u53ef\u80fd\u591a\u5339\u914d\u80af\u5b9a\u66f4\u4f18\uff0c\u6240\u4ee5\u53ea\u6709\u4e24\u79cd\u914d\u5bf9\u65b9\u5f0f\uff1a\n\n- $x_1,y_1$\u914d\u5bf9\uff0c$x_2,y_2$\u914d\u5bf9\uff0c\u5219\u7b54\u6848\u4e3a$max(x_1,y_1)+max(x_2,y_2)$\u3002\n- $x_1,y_2$\u914d\u5bf9\uff0c$x_2,y_1$\u914d\u5bf9\uff0c\u5219\u7b54\u6848\u4e3a$max(x_1,y_2)+max(x_2,y_1)$\u3002\n\n\u7136\u540e\u5bf9\u4e8e$x_1,x_2,y_1,y_2$\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6211\u4eec\u518d\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- $x_1\\ge x_2\\ge y_1\\ge y_2$\uff1a\u7b54\u6848\u5206\u522b\u4e3a$x_1+x_2$\u548c$x_1+x_2$\uff0c\u4e24\u8005\u76f8\u7b49\u3002\n- $x_1\\ge y_1\\ge x_2\\ge y_2$\uff1a\u7b54\u6848\u5206\u522b\u4e3a$x_1+x_2$\u548c$x_1+y_1$\uff0c\u663e\u7136$x_1+x_2\\le x_1+y_1$\u3002\n- $x_1\\ge y_1\\ge y_2\\ge x_2$\uff1a\u7b54\u6848\u5206\u522b\u4e3a$x_1+y_2$\u548c$x_1+y_1$\uff0c\u663e\u7136$x_1+y_2\\le x_1+y_1$\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u7b2c\u4e00\u79cd\u65b9\u6848\uff08\u5373\u524d\u9762\u63d0\u5230\u7684\u65b9\u6848\uff09\u9009\u51fa\u7684\u7b54\u6848\u5fc5\u7136\u4e3a\u6700\u4f18\u89e3\u3002\n\n\u6b63\u786e\u6027\u4e5f\u5c31\u5f97\u5230\u4e86\u8bc1\u660e\uff08\u5f53\u7136\uff0c\u80af\u5b9a\u6709\u66f4\u7b80\u4fbf\u7684\u8bc1\u660e\u65b9\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u6211\u96be\u4ee5\u5c06\u5176\u8bf4\u6e05\u695a\uff0c\u53ea\u80fd\u91c7\u7528\u8fd9\u79cd\u4e3e\u4f8b\u5b50\u7684\u65b9\u5f0f\uff09\u3002\n\n### \u5177\u4f53\u5b9e\u73b0\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u7b54\u6848\u5e8f\u5217\u3002\n\n\u8003\u8651\u5230\u8981\u7ef4\u62a4\u5176\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\uff0c\u4fbf\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7528\u5806\u6765\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2a$p_i$\u8868\u793a**\u7b2c$i$\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u5e8f\u5217\u6240\u5bf9\u5e94\u7684\u5806\u7684\u7f16\u53f7**\uff0c\u521d\u59cb\u5316$p_i=i$\u3002\n\n\u7136\u540e\uff0c\u6bcf\u6b21\u5408\u5e76$x,y$\u65f6\uff0c\u6211\u4eec\u5148\u6bd4\u8f83$p_x,p_y$\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\uff0c\u7136\u540e\u901a\u8fc7$swap$\u4f7f\u5f97$Size_{p_x}>Size_{p_y}$\uff0c\u7136\u540e\u5c06$y$\u7684\u7b54\u6848\u5408\u5e76\u7ed9$x$\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e**\u542f\u53d1\u5f0f\u5408\u5e76**\u7684\u65b9\u5f0f\u6765\u8bc1\u660e\u3002\n\n\u5408\u5e76\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u6765\u5b58\u4e0b\u5408\u5e76\u540e\u7684\u7b54\u6848\u3002\n\n\u7531\u4e8e\u5728\u4e24\u4e24\u914d\u5bf9\u5b8c\u540e\uff0c$p_x$\u5806\u4e2d\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5269\u4e0b\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u8fd9\u4e2a\u4e34\u65f6\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u518d\u5168\u90e8\u6254\u5165$p_x$\u5806\u4e2d\uff0c\u5373\u53ef\u5f97\u5230\u914d\u5bf9\u540e\u7684\u7b54\u6848\u5e8f\u5217\u4e86\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\u53ef\u4ee5\u8be6\u89c1\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define RL Reg LL\n#define Con const\n#define CI Con int&\n#define CL Con LL&\n#define I inline\n#define W while\n#define N 200000\n#define LL long long\n#define add(x,y) (e[++ee].nxt=lnk[x],e[lnk[x]=ee].to=y)\n#define max(x,y) ((x)>(y)?(x):(y))\n#define swap(x,y) (x^=y^=x^=y)\nusing namespace std;\nint n,ee,a[N+5],s[N+5],p[N+5],lnk[N+5];struct edge {int to,nxt;}e[N];\npriority_queue<int> q[N+5];\nclass FastIO\n{\n    private:\n        #define FS 100000\n        #define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n        #define tn (x<<3)+(x<<1)\n        #define D isdigit(c=tc())\n        char c,*A,*B,FI[FS];\n    public:\n        I FastIO() {A=B=FI;}\n        Tp I void read(Ty& x) {x=0;W(!D);W(x=tn+(c&15),D);}\n        Ts I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n}F;\nI void dfs(CI x)//\u904d\u5386\u6811\n{\n    for(RI i=lnk[p[x]=x],t;i;i=e[i].nxt)//\u521d\u59cb\u5316p[x]\u4e3ax\n    {\n        dfs(e[i].to),t=0,q[p[x]].size()<q[p[e[i].to]].size()&&swap(p[x],p[e[i].to]);//\u5904\u7406\u5b50\u6811\uff0c\u901a\u8fc7swap\u7684\u65b9\u5f0f\u4f7fp[x]\u5806\u7684Size\u8f83\u5927\n        W(!q[p[e[i].to]].empty())//\u5c06\u5143\u7d20\u4e24\u4e24\u914d\u5bf9\n            s[++t]=max(q[p[x]].top(),q[p[e[i].to]].top()),//\u7528\u4e34\u65f6\u6570\u7ec4\u5b58\u4e0b\u6765\n            q[p[x]].pop(),q[p[e[i].to]].pop();//\u5c06\u4e24\u4e2a\u5806\u7684\u5806\u9876\u5f39\u6389\n        W(t) q[p[x]].push(s[t--]);//\u5c06\u4e34\u65f6\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u6254\u5165p[x]\u5806\u4e2d\n    }q[p[x]].push(a[x]);//\u5c06\u5f53\u524d\u8282\u70b9\u6743\u503c\u6254\u5165\u5806\u4e2d\n}\nint main()\n{\n    RI i,x;for(F.read(n),i=1;i<=n;++i) F.read(a[i]);for(i=2;i<=n;++i) F.read(x),add(x,i);//\u8bfb\u5165+\u5efa\u8fb9\n    RL ans=0;dfs(1);W(!q[p[1]].empty()) ans+=q[p[1]].top(),q[p[1]].pop();//\u904d\u5386+\u7edf\u8ba1\u7b54\u6848\n    return printf(\"%lld\",ans),0;//\u8f93\u51fa\u7b54\u6848\n}\n```\n\n",
        "postTime": 1555081335,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "# [\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u9009\u53d6\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u96c6\uff0c\u8981\u6c42\u70b9\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4e0d\u80fd\u662f\u53e6\u4e00\u4e2a\u70b9\u7684\u7956\u5148\uff0c\u9009\u51fa\u70b9\u96c6\u7684\u4ee3\u4ef7\u4e3a\u70b9\u96c6\u4e2d\u6743\u503c\u6700\u5927\u70b9\u7684\u6743\u503c\uff0c\u95ee\u5c06\u6240\u6709\u70b9\u90fd\u9009\u4e00\u904d\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e3a\u591a\u5c11\u3002\n\n## \u89e3\u9898\u62a5\u544a\n\n\u4f3c\u4e4e\u5176\u4ed6\u9898\u89e3\u90fd\u662f\u5c06\u6574\u68f5\u6811\u6700\u540e\u5408\u5e76\u6210\u4e3a\u4e00\u4e2a\u94fe\u7edf\u8ba1\u7b54\u6848\u7684\uff0c\u4e0d\u8fc7\u5728\u8003\u573a\u4e0a\u6211\u5e76\u6ca1\u6709\u5230\u8fd9\u79cd\u65b9\u6cd5\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u4e00\u79cd\u8d2a\u5fc3\u7684\u65b9\u6cd5\u3002\n\n\u5c3d\u7ba1\u5230\u73b0\u5728\u6211\u90fd\u65e0\u6cd5\u8bc1\u660e\u5b83\u7684\u6b63\u786e\u6027\uff0c\u4f46\u662f\u5728\u5b83\u7684\u786e\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u6d4b\u8bd5\u70b9\uff0c\u5728\u8003\u573a\u4e0a\u4e5f\u5e2e\u6211\u5f97\u5230\u4e86 $100$ \u5206\u7684\uff0c\u90a3\u4e48\u5c31\u6682\u4e14\u76f8\u4fe1\u5b83\u662f\u6b63\u786e\u7684\u5427 QwQ\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6240\u6709\u70b9\u6309\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5f53\u524d\u70b9\u88ab\u9009\u8fc7\u4e86\u7684\u8bdd\u5c31\u8df3\u8fc7\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u8fd9\u70b9\u70b9\u653e\u5165\u4e00\u4e2a\u65b0\u7684\u70b9\u96c6\u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u8fd9\u4e2a\u70b9\u4e4b\u540e\u7684\u70b9\uff0c\u80fd\u52a0\u5219\u52a0\uff0c\u4e0d\u80fd\u52a0\u5c31\u8df3\u8fc7\uff0c\u653e\u4e00\u4e2a\u4f2a\u4ee3\u7801\u5c31\u662f :\n\n```\nsort i in val\nfor i 1 to n :\n\tif i is used :\n    \tcontinue\n    make a new set\n    put i into the set\n    for j i + 1 to n :\n    \tif j is used :\n        \tcontinue\n        if j can't be put into set :\n        \tcontinue\n        put j into set\n        j is used\n    \t\n```\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u6240\u9700\u8981\u7684\u5c31\u662f\u5224\u65ad\u4e00\u4e2a\u70b9\u80fd\u5426\u88ab\u653e\u5728\u70b9\u96c6\u4e2d\uff0c\u4ee5\u53ca\u627e\u51fa\u53ef\u9009\u70b9\u4e2d\u6700\u5927\u7684\u70b9\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u6bcf\u9009\u62e9\u4e00\u4e2a\u70b9\u4e4b\u540e\uff0c\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u9762\u6240\u6709\u7684\u70b9\u90fd\u4e0d\u80fd\u88ab\u9009\u62e9\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u4e00\u4e2a\u652f\u6301\u5728\u6811\u4e0a\u4fee\u6539\u5b50\u6811\uff0c\u4fee\u6539\u94fe\uff0c\u67e5\u8be2\u5168\u6811\u6700\u5927\u503c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u6811\u94fe\u5256\u5206\u53ef\u4ee5\u5b8c\u7f8e\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5177\u4f53\u6765\u8bf4\u5c31\u662f\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u8fd9\u6bb5\u533a\u95f4\u662f\u5426\u53ef\u9009\uff0c\u4ee5\u53ca\u8fd9\u6bb5\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\u6bcf\u5411\u96c6\u5408\u4e2d\u52a0\u5165\u4e00\u4e2a\u70b9\u4e4b\u540e\uff0c\u5148\u5c06\u8fd9\u4e2a\u70b9\u7684\u5220\u9664\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6253\u4e0a\u4e00\u4e2a\u4e0d\u53ef\u9009\u6807\u8bb0\uff0c\u4e4b\u540e\u6bcf\u6b21\u4ece\u7ebf\u6bb5\u6811\u4e2d\u53d6\u51fa\u90a3\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002\u5f53\u6211\u4eec\u9009\u5b8c\u4e00\u4e2a\u96c6\u5408\u4e4b\u540e\uff0c\u8981\u6ce8\u610f\u628a\u4e4b\u524d\u7684\u4e0d\u53ef\u9009\u6807\u8bb0\u6e05\u9664\u6389\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u5904\u7406\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n)$ \uff0c\u867d\u7136\u770b\u8d77\u6765 $2 \\times 10^5$ \u6709\u70b9\u60ac\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\u51fa\u9898\u4eba\u5e76\u6ca1\u6709\u7279\u610f\u53bb\u5361\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5 $AC$ \u5566\uff01\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n\nclass SegmentTree{\nprivate :\n    static const int maxn = 2e5 + 7;\n\n    struct Node{\n        int max, del;\n        Node *child[2];\n\n        Node() : max(0), del(0) {\n            child[0] = child[1] = NULL;\n        }\n    };\n    int n, *val;\n    Node *root, pool[maxn << 2], *tp;\n\n    Node *newNode() {\n        *++tp = Node();\n        return tp;\n    }\n\n    void update(Node *now) {\n        now->max = 0;\n        \n        for (register int i = 0; i < 2; i++) {\n            if (now->child[i]->del) {\n                continue;\n            }\n            if (val[now->child[i]->max] > val[now->max]) {\n                now->max = now->child[i]->max;\n            }\n        }\n    }\n\n    void buildTree(Node *now, int left, int right) {\n        if (left == right) {\n            now->max = left;\n            return;\n        }\n        int mid = (left + right) >> 1;\n        buildTree(now->child[0] = newNode(), left, mid);\n        buildTree(now->child[1] = newNode(), mid + 1, right);\n        update(now);\n    }\n\n    void delMax(Node *now, int left, int right, int l, int r) {\n        if (left >= l && right <= r) {\n            now->del = 1;\n            return;\n        }\n        int mid = (left + right) >> 1;\n        if (r <= mid) {\n            delMax(now->child[0], left, mid, l, r);\n        } else if (l > mid) {\n            delMax(now->child[1], mid + 1, right, l, r);\n        } else {\n            delMax(now->child[0], left, mid, l, r);\n            delMax(now->child[1], mid + 1, right, l, r);\n        }\n        update(now);\n    }\n\n    void addMax(Node *now, int left, int right, int l, int r) {\n        if (left >= l && right <= r) {\n            now->del = 0;\n            return;\n        }\n        int mid = (left + right) >> 1;\n        if (r <= mid) {\n            addMax(now->child[0], left, mid, l, r);\n        } else if (l > mid) {\n            addMax(now->child[1], mid + 1, right, l, r);\n        } else {\n            addMax(now->child[0], left, mid, l, r);\n            addMax(now->child[1], mid + 1, right, l, r);\n        }\n        update(now);\n    }\n\n    void eraseMax(Node *now, int left, int right, int pos) {\n        if (left == right) {\n            now->max = 0;\n            return;\n        }\n        int mid = (left + right) >> 1;\n        if (pos <= mid) {\n            eraseMax(now->child[0], left, mid, pos);\n        } else {\n            eraseMax(now->child[1], mid + 1, right, pos);\n        }\n        update(now);\n    }\n    \npublic :\n    void init(int x, int *m) {\n        n = x, val = m, tp = pool;\n        buildTree(root = newNode(), 1, n);\n    }\n\n    void delMax(int l, int r) {\n        //printf(\"del : %d %d\\n\", l, r);\n        delMax(root, 1, n, l, r);\n    }\n\n    void addMax(int l, int r) {\n        //printf(\"add : %d %d\\n\", l, r);\n        addMax(root, 1, n, l, r);\n    }\n\n    void eraseMax(int pos) {\n        eraseMax(root, 1, n, pos);\n    }\n\n    int queryMax() {\n        //printf(\"%d %d\\n\", root->del, root->max);\n        return root->del ? 0 : root->max;\n    }\n};\n\nconst int maxn = 2e5 + 7;\nint m[maxn];\n\nclass Solution{\nprivate :\n    typedef long long ll;\n    typedef std::pair<int, int> par;\n\n    int n, id[maxn], fa[maxn], size[maxn], son[maxn], top[maxn];\n    int h[maxn], cnt, dfn[maxn], red[maxn], end[maxn], val[maxn];\n    ll ans;\n    bool used[maxn], have[maxn];\n    std::vector<int> e[maxn];\n    std::queue<int> q;\n    SegmentTree tree;\n\n    static bool cmp(int a, int b) {\n        return m[a] > m[b];\n    }\n\n    void DFS1(int now) {\n        h[now] = h[fa[now]] + 1;\n        size[now] = 1;\n        for (auto v : e[now]) {\n            DFS1(v);\n            size[now] += size[v];\n            if (size[v] > size[son[now]]) {\n                son[now] = v;\n            }\n        }\n    }\n\n    void DFS2(int now, int tp) {\n        red[end[now] = dfn[now] = ++cnt] = now;\n        val[cnt] = m[now];\n        top[now] = tp;\n        if (son[now]) {\n            DFS2(son[now], tp);\n            end[now] = end[son[now]];\n        }\n        for (auto v : e[now]) {\n            if (v == son[now]) {\n                continue;\n            }\n            DFS2(v, v);\n            end[now] = end[v];\n        }\n        //printf(\"%d : %d %d\\n\", now, dfn[now], end[now]);\n    }\n\n    inline void mark(int now) {\n        q.push(now);\n        tree.eraseMax(dfn[now]);\n        for (register int i = now; i && !have[i]; i = fa[top[i]]) {\n            tree.delMax(dfn[top[i]], dfn[i]);\n        }\n        tree.delMax(dfn[now], end[now]);\n        //DFS(now);\n    }\n\n    inline void delMark(int now) {\n        for (register int i = now; i && !have[i]; i = fa[top[i]]) {\n            tree.addMax(dfn[top[i]], dfn[i]);\n        }\n        tree.addMax(dfn[now], end[now]);\n    }\n\n    void DFS(int now) {\n        have[now] = 1;\n        for (auto v : e[now]) {\n            DFS(v);\n        }\n    }\n\npublic :\n    Solution() {\n        get();\n        solve();\n    }\n\n    void get() {\n        scanf(\"%d\", &n);\n        for (register int i = 1; i <= n; i++) {\n            scanf(\"%d\", m + i);\n            id[i] = i;\n            //pq.push(std::make_pair(m[i], i));\n        }\n        for (register int i = 2; i <= n; i++) {\n            scanf(\"%d\", fa + i);\n            e[fa[i]].push_back(i);\n        }\n    }\n\n    void solve() {\n        DFS1(1);\n        DFS2(1, 1);\n        //printf(\"%d\\n\", dfn[11]);\n        tree.init(n, val);\n        //printf(\"%d %d\\n\", dfn[1], end[1]);\n        for (register int now = tree.queryMax(); now; now = tree.queryMax()) {\n            now = red[now];\n            //printf(\"%d : \", now);\n            ans += m[now];\n            mark(now);\n            for (register int p = tree.queryMax(); p; p = tree.queryMax()) {\n                p = red[p];\n                //printf(\"%d \", p);\n                mark(p);\n            }\n            while (!q.empty()) {\n                delMark(q.front());\n                q.pop();\n            }\n            //putchar('\\n');\n        }\n        printf(\"%lld\\n\", ans);\n    }\n};\nSolution sol;\n\nint main() {}\n\n```",
        "postTime": 1554874532,
        "uid": 49866,
        "name": "\u9f99\u4e4b\u543b\u2014\u6c34\u8d27",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u795etm\u4e00\u9053\u84dd\u9898\uff0c\u6211\u8003\u8bd5\u7684\u65f6\u5019\u90fd\u5728\u60f3\u5565...\n\n\u8003\u8651\u4e00\u6761\u94fe\uff0c\u663e\u7136\u4f60\u662f\u628a\u4e24\u4e2a\u94fe\u5206\u522b\u7684\u6700\u5927\u503c\u653e\u5728\u4e00\u8d77\uff0c\u6b21\u5927\u503c\u653e\u5728\u4e00\u8d77\uff0c\u7b49\u7b49\n\n\u90a3\u4e48\u5982\u679c\u6709\u591a\u4e2a\u94fe\u5462\uff1f\u4f60\u5c31\u628a\u7b2c\u4e00\u4e2a\u94fe\u548c\u7b2c\u4e8c\u4e2a\u94fe\u6309\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u5f97\u5230\u7684\u65b0\u7684\u7ed3\u679c\u518d\u548c\u7b2c\u4e09\u4e2a\u94fe\u5408\u5e76...\n\n\u6b63\u786e\u6027\u633a\u663e\u7136\u7684...qwq\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<iostream>\nusing namespace std;\n#define O(x) cout << #x << \" \" << x << endl;\n#define B cout << \"breakpoint\" << endl;\ninline int read()\n{\n    int ans = 0,op = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')\n    {\n        if(ch == '-') op = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9')\n    {\n        (ans *= 10) += ch - '0';\n        ch  = getchar();\n    }\n    return ans * op;\n}\ntypedef long long ll;\nconst int maxn = 2e5 + 5;\nstruct node\n{\n\tint to,next,cost;\n}e[maxn << 1];\nint fir[maxn],alloc;\nvoid adde(int u,int v)\n{\n\te[++alloc].next = fir[u];\n\tfir[u] = alloc;\n\te[alloc].to = v;\n\tswap(u,v);\n\te[++alloc].next = fir[u];\n\tfir[u] = alloc;\n\te[alloc].to = v;\n}\nint a[maxn];\nint id[maxn],cnt,tp[maxn];\npriority_queue<int> q[maxn];\nvoid dfs(int u,int fa)\n{\n\t//O(u);\n\tid[u] = ++cnt;\n\tfor(int i = fir[u];i;i = e[i].next)\n\t{\n\t\tint v = e[i].to;\n\t\tif(v == fa) continue;\n\t\tdfs(v,u);\n\t\tif(q[id[u]].size() < q[id[v]].size()) swap(id[u],id[v]);\n\t\tint tot = q[id[v]].size();\n\t\tfor(int i = 1;i <= tot;i++)\n\t\t{\n\t\t\ttp[i] = max(q[id[u]].top(),q[id[v]].top());\n\t\t\tq[id[u]].pop(),q[id[v]].pop();\n\t\t}\n\t\tfor(int i = 1;i <= tot;i++) q[id[u]].push(tp[i]);\n\t}\n\tq[id[u]].push(a[u]);\n}\nint main()\n{\n\tint n = read();\n\tfor(int i = 1;i <= n;i++) a[i] = read();\n\tfor(int i = 2;i <= n;i++) {int f = read(); adde(f,i);}\n\tdfs(1,0);\n\tll ans = 0;\n\twhile(q[id[1]].size()) ans += q[id[1]].top(),q[id[1]].pop();\n\tprintf(\"%lld\",ans);\n}\n\t\t\n\n```\n\n",
        "postTime": 1554980887,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5290)\n\n\n\n------------\n\n### \u4e2a\u4eba\u5410\u69fd\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\n\n\u771f\u7684\u662f\u7701\u9009\u6551\u547d\u9898\uff01\n\nD1T1\u548c\u8d85\u7ea7\u94a2\u7434\u5f88\u60f3\uff0c\u7136\u800c...\u6211\u8003\u8bd5\u65f6\u6ca1\u5199\u51fa\u6765\u53ef\u6301\u4e45\u5316trie\uff0c\u54ce\uff0c40\u5206\u6ca1\u4e86\uff0cD1T2\u597d\u50cf\u6211\u52a0\u70b9\u4f18\u5316\u5c31\u53ef\u4ee560-80\u4e86\uff1f\uff1f\u53ef\u6211\u53ea\u62ff\u4e8640\uff0cD1T3smg\u554a\uff01\u9898\u9762\u8bf4\u4ec0\u4e48\u6253\u5c0f\u4e00\u70b9\u7684\u8868\uff1f\u7ed3\u679c\u6b7b\u4e5f\u6ca1\u60f3\u5230\u662f\u9053\u6570\u8bba\u9898...\u62ff\u4e864\u5206\uff0c\u8fd8\u82b1\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u3002\u96be\u53d7...\n\n\u672c\u4ee5\u4e3a\u51c9\u4e86\uff0c\u597d\u5728\u6709D2T2\u3002\n\n\n\n------------\n\n\u4e00\u5f00\u59cb\u60f3\u5230\u7684\u5c31\u662f\u6811\u5f62DP,\u5b50\u6811\u5408\u5e76\uff0c\u4e24\u9897\u5b50\u6811\u4e4b\u95f4\u662f\u6ca1\u6709\u9650\u5236\u6761\u4ef6\u7684\uff0c\u6700\u540e\u52a0\u5165\u6839\u8282\u70b9\u7684\u6743\u503c\u3002\u53d1\u73b0\u8fd9\u600e\u4e48DP?\n\n\u548c\u6811\u5f62DP\u601d\u60f3\u4e00\u6837\uff0c\u5408\u5e76\u4e24\u9897\u5b50\u6811\uff0c\u53ea\u8981\u540c\u4e00\u9897\u5b50\u6811\u7684\u6bcf\u4e2a\u5185\u5b58\u5757\u4e0d\u518d\u88ab\u5206\u5230\u4e00\u4e2a\u5185\u5b58\u5757\u4e2d\u5c31\u597d\u4e86\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u4fdd\u8bc1\u4e86\u6bcf\u9897\u5b50\u6570\u90fd\u662f\u6700\u4f18\u7684\uff0c\u90a3\u4e48\u4e0d\u5c31\u662f\u5047\u5982\u6709$A,B,A$\u7684\u5185\u5b58\u5757\u662f\u4e0d\u80fd\u518d\u548c$A$\u4e2d\u7684\u5408\u5e76\uff0c$B$\u540c\u7406\uff08\u4e5f\u8bb8\u662f\u5e9f\u8bdd\u5427\uff09\n\n\u6240\u4ee5\u53ea\u80fd$A->B,B->A$\uff0c\u800c\u4e14\u6bcf\u4e2a\u5185\u5b58\u5757\u53ea\u80fd\u5408\u5e76\u5230\u6700\u591a\u4e00\u4e2a\u4e0a\uff0c\u6216\u8005\u88ab\u6700\u591a\u4e00\u4e2a\u4e0a\u9762\uff0c\u90a3\u4e48\u80af\u5b9a\u662f$A,B$\u4ece\u5927\u5230\u5c0f\u5408\u5e76\u662f\u6700\u4f18\u7684\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5148\u8003\u8651\u53ea\u5c06$A$\u5408\u5e76\u5230$B$\u4e0a\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u5728$B$\u627e\u5230\u4e00\u4e2a$A$\u7684\u540e\u7ee7\uff08\u6ca1\u6709\u8ddf$A$\u5408\u5e76\uff09\u5e76\u4e14\u5408\u5e76\u4e0a\u53bb\uff0c\u7136\u540e\u90a3\u4e48$B$\u5462\uff1f\u4e5f\u4e00\u6837\uff0c\u90a3\u4e48\u600e\u4e48\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u5462\uff1f\u6839\u636e\u5bf9\u79f0\u6027\uff0c\u5c31\u5f88\u5bb9\u6613\u77e5\u9053\u80af\u5b9a\u662f\u4ece\u5927\u5230\u5c0f\u9010\u4e2a\u6bd4\u8f83\uff0c\u53ea\u4fdd\u7559\u6700\u5927\u7684\u4e00\u4e2a\u3002\uff08\u5bf9\u79f0\u6027\u7684\u8bdd\u5176\u5b9e\u4e00\u4e0b\u53ef\u4ee5\u60f3\u51fa\u8fd9\u4e2a\u8d2a\u5fc3\uff09\n\n\u90a3\u4e48\u5199\u4e2a\u4e2d\u5e8f\u904d\u5386\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u597d\u4e86\uff0c\u5173\u4e8e\u542f\u53d1\u5f0f\u5408\u5e76\u590d\u6742\u5ea6\u6709\u8bba\u6587\uff0c\u662fO(nlogn),\u7136\u540e\u56e0\u4e3a\u8fd9\u9898\u6bcf\u6b21\u5408\u5e76$siz==>max(sizA,sizB)$\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8dd1\u7684\u98de\u5feb\n\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(3)\n#pragma GCC optimize(2)\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\nusing namespace std;\nconst int M=1<<20;\nchar In[M],*S,*T;\n#define nc() (S==T&&(T=(S=In)+fread(In,1,M,stdin),S==T)?EOF:*S++)\ntemplate<typename C>\ninline void read(C &x){\n    x=0;char ch=nc();\n    while(ch<'0'||ch>'9')ch=nc();\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=nc();}\n}\nconst int N=200010;\ntemplate<typename T>\ninline void Swap(T&a,T&b){T c=a;a=b;b=c;}\nint siz[N];\nstruct node{\n    node*ch[2],*fa;\n    int v;\n}*rt[N],*null;\n#define lc x->ch[0]\n#define rc x->ch[1]\ninline node*New(int v){node*x=new node;lc=rc=x->fa=null;x->v=v;return x;}\ninline void rotate(node*x){\n    node*y=x->fa,*z=y->fa;int k=y->ch[1]==x;\n    z->ch[z->ch[1]==y]=x;x->fa=z;\n    y->ch[k]=x->ch[k^1];x->ch[k^1]->fa=y;\n    x->ch[k^1]=y;y->fa=x;\n}inline void splay(int pos,node*x,node*goal){\n    node*y,*z;\n    while(x->fa!=goal){\n        y=x->fa;z=y->fa;\n        if(z!=goal)(y->ch[1]==x)^(z->ch[1]==y)?rotate(x):rotate(y);\n        rotate(x);\n    }if(goal==null)rt[pos]=x;\n}inline void Insert(int pos,int v){\n    node*x=rt[pos];++siz[pos];\n    if(x==null){rt[pos]=New(v);return;};\n    node*fa=null;\n    while(x!=null)fa=x,x=x->ch[v>=x->v];\n    x=New(v);x->fa=fa;fa->ch[v>=fa->v]=x;\n    splay(pos,x,null);\n}inline void Del(int pos){--siz[pos];\n    node*x=rt[pos];int k;\n    if(lc!=null)k=0;\n    else if(rc!=null)k=1;\n    else {rt[pos]=null;delete(x);return;}\n    node*y=x->ch[k];\n    while(y->ch[k^1]!=null)y=y->ch[k^1];\n    splay(pos,y,x);y->ch[k^1]=x->ch[k^1];x->ch[k^1]->fa=y;y->fa=null;rt[pos]=y;\n    delete(x);\n}inline void del(int pos,int v){\n    node*x=rt[pos];\n    while(x!=null){\n        if(x->v^v)x=x->ch[v>=x->v];\n        else {splay(pos,x,null);Del(pos);return;}\n    }\n}int a[N],b[N],R1,R2;\ninline void dfs_1(node*x){if(x==null)return;dfs_1(rc);a[++R1]=x->v;dfs_1(lc);delete(x);}\ninline void dfs_2(node*x){if(x!=null&&R2<R1){dfs_2(rc);if(R2>=R1)return;b[++R2]=x->v;dfs_2(lc);}}\ninline void Merge(int x,int y){\n    R1=R2=0;int p=x;\n    if(siz[x]>siz[y])Swap(x,y);\n    dfs_1(rt[x]);dfs_2(rt[y]);\n    for(int i=1;i<=R1;++i)\n        if(a[i]>b[i])del(y,b[i]),Insert(y,a[i]);\n    if(p^x){Swap(rt[x],rt[y]);Swap(siz[x],siz[y]);}\n}int d[N],nxt[N<<1],to[N<<1],cost[N],tot;\ninline void ins(int a,int b){to[++tot]=b;nxt[tot]=d[a];d[a]=tot;}\ninline void work(int x){\n    for(int i=d[x];i;i=nxt[i]){\n        int u=to[i];\n        work(u);Merge(u,x);\n    }Insert(x,cost[x]);\n}int n;\nlong long ans;\ninline void slove(node*x){if(x==null)return ;ans+=x->v;slove(lc);slove(rc);}\nint main(){null=new node;null->ch[0]=null->ch[1]=null->fa=null;\n    read(n);int fa;\n    for(int i=1;i<=n;++i)read(cost[i]),rt[i]=null;\n    for(int i=2;i<=n;++i)read(fa),ins(fa,i);\n    work(1);slove(rt[1]);printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1554782773,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd"
    },
    {
        "content": "\u8fd9\u53ef\u80fd\u662f\u6700\u6c34\u7684\u4e00\u9053\u5341\u4e8c\u7701\u9898\u4e86\uff0c\u8fde\u4e4b\u4e00\u90fd\u4e0d\u7528\u52a0\u3002\n\n~~\u751a\u81f3\u6709\u53ef\u80fd\u662f\u76ee\u524d\u6d1b\u8c37\u6700\u6c34\u9ed1\u9898\u4e4b\u4e00\u3002~~\n\n------------\n\u8bf4\u4e00\u4e0b\u6211\u7684\u601d\u8def\u5427\u3002\n\n\u8003\u8651\u4e00\u68f5\u5b50\u6811\uff0c\u663e\u7136\u6839\u8282\u70b9\u662f\u53ea\u80fd\u5355\u5f00\u4e00\u4e2a\u6bb5\u7684\uff0c\u6240\u4ee5\u8fd9\u68f5\u5b50\u6811\u7684\u6700\u4f18\u89e3\u7684\u6bcf\u4e00\u4e2a\u6bb5\u4e2d\u80af\u5b9a\u662f\u8fd9\u68f5\u5b50\u6811\u7684\u4e0d\u540c\u5b50\u6811\u4e2d\u7684\u3002\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6811\u4e0a\u8d2a\u5fc3\u3002\n\n**upd\uff1a~~\u7b2c\u4e00\u6b21\u7adf\u7136\u5199\u7684\u662f\u70b9\u5206\uff0c\u9ed1\u5386\u53f2\u3002~~**\n\n\u8003\u8651\u8bc1\u660e\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\uff1a\n\n\u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\uff0c\u5b83\u4eec\u5728\u5c40\u90e8\u6700\u4f18\u89e3\u4e2d\u88ab\u5206\u5728\u4e00\u4e2a\u6bb5\uff0c\u800c\u5728\u5168\u5c40\u6700\u4f18\u89e3\u4e2d\u4e0d\u662f\uff0c\u5219\u628a\u5176\u4e2d\u7a7a\u95f4\u5c0f\u7684\u90a3\u4e2a\u632a\u5230\u53e6\u4e00\u4e2a\u7684\u6bb5\u4e2d\uff0c\u7ed3\u679c\u4e0d\u4f1a\u66f4\u5dee\u3002\n\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u5c40\u90e8\u6700\u4f18\u89e3\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u91cc\u9762\u3002\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u7b97\u6cd5\uff1a\u7528\u5806\u7ef4\u62a4\u5c40\u90e8\u6700\u4f18\u89e3\u4e2d\u6bcf\u4e2a\u6bb5\uff0c\u5408\u5e76\u65f6\u53d6\u51fa\u6240\u6709\u5806\u9876\u5143\u7d20\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u4e22\u5230\u7b54\u6848\u4e2d\u3002\n\n\u8003\u8651\u8bc1\u660e\u7b97\u6cd5\u6b63\u786e\u6027\u3002\n\n\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u5806\uff0c\u4e0d\u628a\u5806\u9876\u5143\u7d20\u5408\u5e76\u51fa\u53bb\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n- \u6210\u4e3a\u53e6\u4e00\u4e2a\u6bb5\u7684\u6700\u5927\u503c\uff0c\u5219\u7b54\u6848\u53d8\u5dee\u3002\n- \u5408\u5e76\u5230\u53e6\u4e00\u4e2a\u6bb5\u91cc\uff0c\u5219\u7b54\u6848\u4e0d\u53d8\u3002\n\n\u4e8e\u662f\u5b8c\u6574\u89e3\u51b3\u4e86\u95ee\u9898\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=2e5+5;\nint n,m[maxn];\nvector<int> ch[maxn];\npriority_queue<int> pq[maxn];\nvoid dfs(int u){\n\tfor(int i=0;i<ch[u].size();i++) dfs(ch[u][i]);\n\tpq[u].push(m[u]);\n\twhile(1){\n\t\tint mm=0;\n\t\tfor(int i=0;i<ch[u].size();i++){\n\t\t\tif(pq[ch[u][i]].empty()) continue;\n\t\t\tmm=max(mm,pq[ch[u][i]].top());\n\t\t\tpq[ch[u][i]].pop();\n\t\t}\n\t\tif(!mm) break;\n\t\tpq[u].push(mm);\n\t}\n}\nint main(){\n\t#ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    for(int i=1;i<=n;i++) m[i]=readint();\n    for(int i=2;i<=n;i++) ch[readint()].push_back(i);\n    dfs(1);\n    long long ans=0;\n    while(!pq[1].empty()){\n    \tans+=pq[1].top();\n    \tpq[1].pop();\n\t}\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\n\n------------\n\u7136\u800c\u8fd9\u6837\u662f\u4f1aT\u7684\uff0c\u53ea\u670960\u5206\u3002\n\n~~\u6211T\u4e86\u4ee5\u540e\u7b2c\u4e00\u53cd\u5e94\u7adf\u7136\u662f\u5f00O2\u518d\u4ea4\u4e00\u904d\u3002~~\n\n\u663e\u7136\u5f88\u591a\u65f6\u95f4\u6d6a\u8d39\u5728\u4e86\u5408\u5e76\u4e0a\uff0c\u8003\u8651\u4f18\u5316\u5408\u5e76\u65b9\u5f0f\u3002\n\n\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u4e24\u4e24\u5408\u5e76\uff0c\u6bcf\u6b21\u53d6\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u4e2d\u5c0f\u7684\u90a3\u4e2a\uff0c\u6700\u540e\u628a\u6240\u6709\u5143\u7d20\u653e\u56de\u5c3a\u5bf8\u5927\u7684\u90a3\u4e2a\u5806\u91cc\u5e76\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u5806\u3002\n\n\u4e24\u4e24\u5408\u5e76\u4e0e\u4e0a\u9762\u90a3\u79cd\u65b9\u6cd5\u7684\u7b49\u4ef7\u6027\u662f\u53ef\u8bc1\u7684\uff0c\u8bc1\u660e\u7565\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\uff0c\u4e0b\u9762\u662f\u6211\u53e3\u80e1\u7684\u8bc1\u660e\uff1a\n\n\u9996\u5148\u53ea\u8003\u8651\u5206\u6cbb\u663e\u7136\u662f$O(n\\log n)$\u7684\uff0c\u7136\u540e\u6bcf\u4e2a\u6bb5\u88ab\u5408\u5e76\u4ee5\u540e\u5c31\u6ca1\u4e86\uff0c\u6240\u4ee5\u82b1\u5728\u5806\u4e0a\u7684\u65f6\u95f4\u662f$O(n\\log n)$\uff0c\u603b\u65f6\u95f4$O(n\\log n)$\u3002\n\n\u636e\u8bf4`swap`\u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u662f\u4e25\u683c$O(1)$\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u6307\u9488\u3002\n\n\u8fd8\u6709\uff0c\u6ca1\u5f00`long long`\u89c1\u7956\u5b97\u3002\n\n\u4e0b\u9762\u662f~~\u5947\u4e11\u65e0\u6bd4\u7684~~\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=2e5+5;\nint n,m[maxn];\nvector<int> ch[maxn];\npriority_queue<int>* pq[maxn];\nvoid merge(priority_queue<int>* q1,priority_queue<int>* q2){\n\tvector<int> v;\n\twhile(!q2->empty()){\n\t    v.push_back(max(q1->top(),q2->top()));\n\t    q1->pop();\n\t    q2->pop();\n\t}\n\tfor(int i=0;i<v.size();i++) q1->push(v[i]);\n}\nvoid dfs(int u){\n\tif(ch[u].empty()){\n\t\tpq[u]=new priority_queue<int>();\n\t\tpq[u]->push(m[u]);\n\t\treturn;\n\t}\n\tfor(int i=0;i<ch[u].size();i++) dfs(ch[u][i]);\n\tpq[u]=pq[ch[u][0]];\n\tfor(int i=1;i<ch[u].size();i++){\n\t\tif(pq[u]->size()<pq[ch[u][i]]->size()) swap(pq[u],pq[ch[u][i]]);\n\t    merge(pq[u],pq[ch[u][i]]);\n\t}\n\tpq[u]->push(m[u]);\n}\nint main(){\n\t#ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    for(int i=1;i<=n;i++) m[i]=readint();\n    for(int i=2;i<=n;i++) ch[readint()].push_back(i);\n    dfs(1);\n    long long ans=0;\n    while(!pq[1]->empty()){\n    \tans+=pq[1]->top();\n    \tpq[1]->pop();\n\t}\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1568534977,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u6709\u6839\u6811\uff0c\u70b9\u6709\u70b9\u6743\u3002\u4f60\u9700\u8981\u628a\u70b9\u5212\u5206\u4e3a\u82e5\u5e72\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u4efb\u610f\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\u4e24\u4e2a\u70b9\u662f\u7956\u5148\u5173\u7cfb\uff0c\u5e76\u4e14\u8981\u6c42\u6700\u5c0f\u5316\u6bcf\u4e2a\u96c6\u5408\u70b9\u6743\u6700\u5927\u503c\u7684\u548c\u3002\n\n\u5728day2\u7684\u4e00\u7247\u6bd2\u7624\u4e2d\u96be\u5f97\u4e00\u89c1\u7684\u5c0f\u6e05\u65b0\u9898\u3002\n\n\u8fd9\u9898\u7684\u7ed3\u8bba\u5f88\u7b80\u5355\uff1a\u663e\u7136\u6839\u53ea\u80fd\u5355\u72ec\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u5b50\u6811\u72ec\u7acb\u5730\u505a\u4e0b\u53bb\uff0c\u6700\u540e\u628a\u6240\u6709\u5b50\u6811\u7684\u96c6\u5408\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5408\u5e76\u5373\u53ef\u3002\n\n\u8fd9\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f~~\u770b\u4e0a\u53bb\u5c31\u5f88\u5bf9\u5bf9\u5427\u3002~~\n\n\u6211\u662f\u4ece\u94fe\u7684\u90e8\u5206\u5206\u5f97\u5230\u7684\u542f\u53d1\u3002\u5bf9\u4e8e\u94fe\u7684\u6570\u636e\uff0c\u663e\u7136\u4e00\u6761\u4ece\u6839\u5411\u4e0b\u7684\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u5fc5\u987b\u72ec\u7acb\u6210\u96c6\u5408\uff0c\u6700\u540e\u5c31\u662f\u5408\u5e76\u4e24\u6761\u94fe\u7684\u95ee\u9898\u3002\u6b64\u65f6\u5bb9\u6613\u8bc1\u660e\u4ece\u5927\u5230\u5c0f\u5408\u5e76\u7684\u6b63\u786e\u6027\uff08\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8003\u8651\u8c03\u6574\u6cd5\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u53d8\u5dee\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u81ea\u7136\u800c\u7136\u5730\u628a\u5b83\u63a8\u5e7f\u5230\u4e00\u822c\u60c5\u51b5\u3002\u6b63\u89e3\u7ed9\u51fa\u7684\u8bc1\u660e\u4e25\u8c28\u4f46\u7e41\u7410\uff0c\u8fd9\u91cc\u7565\u53bb\uff0c\u5c31\u7b80\u5355\u8bb2\u4e00\u4e0b\u6bd4\u8f83\u610f\u8bc6\u6d41\u7684\u60f3\u6cd5\u5427\uff1a\n\n\u8003\u8651\u6240\u6709\u70b9\u4e2d\u6743\u503c\u6700\u5927\u7684\u70b9\uff0c\u8fd9\u4e2a\u70b9\u663e\u7136\u80af\u5b9a\u4f1a\u88ab\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u4e3a\u4e86\u8ba9\u7b54\u6848\u5c3d\u53ef\u80fd\u5c0f\uff0c\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u8ba9\u8fd9\u4e2a\u96c6\u5408\u53bb\u541e\u6389\u4e00\u4e9b\u70b9\u6743\u6bd4\u8f83\u5927\u7684\u70b9\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u4e0d\u4f1a\u88ab\u8ba1\u5165\u8d21\u732e\u4e86\u3002\n\n\u7ed3\u679c\u5c31\u662f\u6211\u4eec\u628a\u6bcf\u4e2a\u5b50\u6811\u4e2d\u6700\u5927\u7684\u96c6\u5408\u62ff\u51fa\u6765\u5408\u5e76\u4e86\uff0c\u5269\u4e0b\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u95ee\u9898\u7ee7\u7eed\u505a\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u77e5\u9053\u8fd9\u4e2a\u7ed3\u8bba\u4e4b\u540e\u5c31\u6bd4\u8f83\u5bb9\u6613\u505a\u4e0b\u53bb\u4e86\u3002\u76f4\u63a5\u5408\u5e76\u96c6\u5408\u662fn^2\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u57fa\u4e8e\u6811\u94fe\u5256\u5206\u8fdb\u884c\u4f18\u5316\uff08\u6839\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u96c6\u5408\uff0c\u5408\u5e76\u6240\u6709\u8f7b\u513f\u5b50\u7684\u96c6\u5408\uff09\u3002\u6211\u4eec\u8fd8\u9700\u8981\u7528\u5806\u6765\u7ef4\u62a4\u6bcf\u4e2a\u96c6\u5408\u7684\u6700\u5927\u503c\u3002\n\n\u76f4\u63a5\u91cd\u94fe\u5256\u5206\u53ef\u80fd\u4f1a\u591a\u4e00\u4e2alog\uff08\u5f53\u7136\u5b9e\u9645\u4e0a\u8fd8\u662f\u80fd\u968f\u4fbf\u8fc7\uff09\uff0c\u4f46\u662f\u6539\u6210\u957f\u94fe\u5256\u5206/\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u662f\u4e25\u683cn log n\u7684\u4e86\u3002\n\n\u603b\u7ed3\uff1a\u4e2a\u4eba\u8ba4\u4e3a\u662f\u4eca\u5e74\u7701\u9009\u6700\u7b80\u5355\u7684\u4e00\u9053\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\nusing namespace std;\n#define li long long\n#define gc getchar()\n#define pc putchar\ninline li read(){\n\tli x = 0,y = 0,c = gc;\n\twhile(c < '0' || c > '9') y = c,c = gc;\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0',c = gc;\n\treturn y == '-' ? -x : x; \n}\ninline void print(li x){\n\tif(x < 0) pc('-'),x = -x;\n\tif(x >= 10) print(x / 10);\n\tpc(x % 10 + '0');\n}\ninline void file(){\n\tfreopen(\"spring.in\",\"r\",stdin);\n\tfreopen(\"spring.out\",\"w\",stdout);\n}\nint n,fa[200010],fsts[200010],nxts[200010],ds[200010];\nli a[200010];\nint sz[200010],mx[200010],tou[200010];\npriority_queue<li> qu[200010];\nli st[200010],ft;\ninline void dfs2(int q){\n\tfor(int i = fsts[q];i;i = nxts[i]){\n\t\tdfs2(i);\n\t\tif(sz[i] > sz[mx[q]]) mx[q] = i;\n\t\tsz[q] = max(sz[q],sz[i]);\n\t}\n\t++sz[q];\n}\ninline void dfs3(int q){\n\ttou[q] = (mx[fa[q]] == q ? tou[fa[q]] : q);\n\tif(mx[q]) dfs3(mx[q]);\n\tfor(int i = fsts[q];i;i = nxts[i]) if(i != mx[q]){\n\t\tdfs3(i);\n\t\tft = 0;\n\t\twhile(!qu[tou[q]].empty() && !qu[i].empty()){\n\t\t\tst[++ft] = max(qu[tou[q]].top(),qu[i].top());\n\t\t\tqu[tou[q]].pop();qu[i].pop();\n\t\t}\n\t\twhile(!qu[i].empty()) st[++ft] = qu[i].top(),qu[i].pop();\n\t\twhile(ft) qu[tou[q]].push(st[ft--]);\n\t}\n\tqu[tou[q]].push(a[q]);\n}\nint main(){\n\t//file();\n\tint i,j,l;\n\tn = read();\n\tfor(i = 1;i <= n;++i) a[i] = read();\n\tfor(i = 2;i <= n;++i){\n\t\tfa[i] = read();\n\t\tnxts[i] = fsts[fa[i]];\n\t\tfsts[fa[i]] = i;\n\t\t++ds[fa[i]];\n\t}\n\tdfs2(1);\n\tdfs3(1);\n\tli as = 0;\n\twhile(!qu[1].empty()) as += qu[1].top(),qu[1].pop();\n\tprint(as);pc('\\n');\n\treturn 0;\n}\n\n```",
        "postTime": 1554683854,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u849f\u84bb\u9000\u5f79\u4e09\u5468\u540e\u56de\u6765\u505a\u8fd9\u9053\u56e0\u4e3a\u5f53\u65f6\u6ca1\u5199\u542f\u53d1\u5f0f\u5408\u5e76\u800c\u53ea\u5f97\u4e86$60$\u5206\u7684\u9898\uff0c\u5199\u4e86\u4e2a\u914d\u5bf9\u5806\u542f\u53d1\u5f0f\u5408\u5e76\u4e0a\u4e86rk1\uff0c\u53d1\u73b0\u6ca1\u6709\u914d\u5bf9\u5806\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6765\u5199\u4e00\u7bc7\u3002 \n\n\u76f8\u6bd4`std::priority_queue`\uff0c\u8fd9\u9898\u7528\u914d\u5bf9\u5806\u7684\u597d\u5904\u6709\uff1a\n* $O(1)$\u5408\u5e76\uff08\u8fd9\u91cc\u7528\u201c\u63d2\u5165\u201d\u597d\u50cf\u66f4\u4e0d\u5bb9\u6613\u5f15\u8d77\u6b67\u4e49\uff09\n* \u4e0d\u7528\u62c5\u5fc3MLE\n* \u5e38\u6570\u5c0f\n\n# \u4e0d\u4f1a\u914d\u5bf9\u5806\uff1f\n\u4e0d\u5e26\u4fee\u6539\u7684\u914d\u5bf9\u5806\u53ea\u9700\u8981\u8fd9\u51e0\u884c\u4ee3\u7801\u5c31\u591f\u4e86\uff1a\n***\n`c[x]`\u8bb0\u5f55`x`\u6700\u5de6\u8fb9\u7684\u4e00\u4e2a\u513f\u5b50\uff0c`sib[x]`\u8bb0\u5f55`x`\u7684\u53f3\u5144\u5f1f\uff0c\u6ca1\u6709\u5219\u4e3a`0`\uff08\u8fd9\u4f3c\u4e4e\u53eb\u505a\u201c\u5144\u5f1f\u513f\u5b50\u8868\u793a\u6cd5\u201d\uff1f\uff09\n```cpp\nint c[N], sib[N];\n```\n\u5408\u5e76\u4e24\u4e2a\u5806\uff1a\u76f4\u63a5\u628a\u8f83\u5c0f\uff08\u6216\u8f83\u5927\uff09\u7684\u6839\u63d2\u5165\u5230\u8f83\u5927\uff08\u6216\u8f83\u5c0f\uff09\u7684\u6839\u7684\u513f\u5b50\u5217\u8868\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(1)$\n```cpp\ninline int mrg(int x, int y) {\n    if (!x || !y) return x | y;\n    if (m[x] < m[y]) swap(x, y); // \u8fd9\u662f\u5927\u6839\u5806\uff0c\u5c0f\u6839\u5806\u8fd9\u91cc\u6539\u6210\u5927\u4e8e\u53f7\u5373\u53ef\n    sib[y] = c[x], c[x] = y;\n    return x;\n}\n```\n\u5408\u5e76\u4e00\u4e2a\u6839\u7684\u6240\u6709\u513f\u5b50\uff1a\u5148\u4e24\u4e24\u914d\u5bf9\u5408\u5e76\uff0c\u518d\u4ece\u53f3\u5411\u5de6\u5408\u5e76\uff0c\u5355\u6b21\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\uff0c\u4f46\u5747\u644a\u4e3a$O(\\log n)$\n```cpp\nint mrgl(int l0) {\n    if (!l0 || !sib[l0]) return l0;\n    int l1 = sib[l0], l2 = sib[l1];\n    sib[l0] = sib[l1] = 0;\n    return mrg(mrg(l0, l1), mrgl(l2));\n}\n```\n***\n# \u672c\u9898\u7684\u505a\u6cd5\n\u6ce8\uff1a\u4ee5\u4e0b\u5c06\u201c\u5b50\u7a0b\u5e8f\u201d\u79f0\u4e3a\u201c\u8282\u70b9\u201d\n\n* \u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u521d\u59cb\u5806\u4e2d\u53ea\u6709\u5f53\u524d\u8282\u70b9\n* \u5728\u6811\u4e0adfs\uff0c\u904d\u5386\u5b8c\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u540e\uff1a\n\t- \u53d6\u5806\u6700\u5927\u7684\u5b50\u8282\u70b9\uff08\u597d\u50cf\u8fd9\u5c31\u53eb\u201c\u542f\u53d1\u5f0f\u201d\uff1f\uff09\u548c\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\n    - \u5f00\u4e00\u4e2a\u65b0\u7684\u5806\n    - \u56e0\u4e3a\u4e24\u68f5\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u4e00\u5b9a\u6ca1\u6709\u7956\u5148\u2014\u540e\u4ee3\u5173\u7cfb\uff0c\u4e0d\u65ad\u628a\u4e24\u4e2a\u5806\u9876\u8282\u70b9\u53d6\u51fa\u5e76\u6bd4\u8f83\u6240\u9700\u5185\u5b58\u5927\u5c0f\uff0c\u628a\u8f83\u5927\u7684\u4e00\u4e2a\u52a0\u5165\u65b0\u7684\u5806\uff0c\u76f4\u5230\u8f83\u5c0f\u7684\u5806\u4e3a\u7a7a\n    - \u628a\u65b0\u7684\u5806\u5408\u5e76\u5230\u539f\u5148\u8f83\u5927\u7684\u5806\u4e0a\n    - \u91cd\u590d\u4ee5\u4e0a\u56db\u6b65\uff0c\u76f4\u5230\u6240\u6709\u5b50\u8282\u70b9\u5408\u5e76\u5b8c\u6bd5\n    - \u628a\u5806\u6700\u5927\u7684\u5b50\u8282\u70b9\u7684\u5806\u5408\u5e76\u5230\u5f53\u524d\u8282\u70b9\u7684\u5806\u4e0a\uff08\u6216\u8005\u8bf4\u628a\u5f53\u524d\u8282\u70b9\u52a0\u5165\u5806\uff09\n* \u6839\u8282\u70b9\u7684\u5806\u4e2d\u6240\u6709\u8282\u70b9\u6240\u9700\u5185\u5b58\u4e4b\u548c\u5373\u4e3a\u6700\u5c0f\u5185\u5b58\u9700\u6c42\n\n#### \u65f6\u95f4\u590d\u6742\u5ea6\n\u6ce8\uff1a\u867d\u7136\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4f46\u662f~~\u6211\u592a\u83dc\u4e86~~\u6709\u4e9b\u5730\u65b9\u9700\u8981\u7528\u957f\u94fe\u5256\u5206\u4e2d\u7684\u6982\u5ff5\u624d\u80fd\u89e3\u91ca\u6e05\u695a\n* \u4ee4$h$\u4e3a\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u957f\u94fe\u7684\u957f\u5ea6\n* \u6bcf\u4e2a\u8282\u70b9\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u957f\u94fe\n* \u9664\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u957f\u94fe\u5916\uff0c\u6bcf\u6761\u957f\u94fe\u4ec5\u5728\u5176\u9876\u90e8\u88ab\u5408\u5e76\u5230\u53e6\u4e00\u6761\u957f\u94fe\u4e0a\uff0c\u5408\u5e76\u65f6\u51fa\u5806\u7684\u8282\u70b9\u6570\u4e3a\u88ab\u5408\u5e76\u7684\u94fe\u957f\u7684\u4e24\u500d\n* \u56e0\u6b64\u51fa\u5806\u7684\u8282\u70b9\u603b\u6570\u4e3a$2(n-h)$\n* \u518d\u7b97\u4e0adfs\u7684$O(n)$\u548c\u6c42\u548c\u7684$O(h)$\uff0c\u8fd9\u79cd\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n+h+(n-h)\\log h)$\n\n#### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n// \u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u5f00\u59cb\ninline int gi() {\n    int x, f = 0;\n    char c;\n    while (!isdigit(c = getchar())) c == '-' && (f = 1);\n    for (x = c - '0'; isdigit(c = getchar()); x = x * 10 + c - '0')\n        ;\n    return f ? -x : x;\n}\n\ninline long long gll() {\n    int f = 0;\n    long long x;\n    char c;\n    while (!isdigit(c = getchar())) c == '-' && (f = 1);\n    for (x = c - '0'; isdigit(c = getchar()); x = x * 10 + c - '0')\n        ;\n    return f ? -x : x;\n}\n\ntemplate <typename T>\nvoid puti(T x) {\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) puti(x / 10);\n    putchar(x % 10 + '0');\n}\n\ntemplate <typename T>\ninline void putsp(T x) {\n    puti(x), putchar(' ');\n}\n\ntemplate <typename T>\ninline void putln(T x) {\n    puti(x), putchar('\\n');\n}\n// \u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u7ed3\u675f\n\nconst int N = 200010;\n\n// \u6811\u7528c0[]\u548cc1[]\u5b58\u50a8\uff0c\u5806\u7528c[]\u548csib[]\u5b58\u50a8\uff0c\u5747\u4e3a\u201c\u5144\u5f1f\u513f\u5b50\u8868\u793a\u6cd5\u201d\n// sz[x]\u8868\u793a\u5806\uff08\u4e0d\u662f\u6811\uff09\u4e2d\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\nint n, c0[N], c1[N], rt[N], m[N], c[N], sib[N], sz[N];\n\n// \u914d\u5bf9\u5806\u5408\u5e76\uff08\u522b\u5fd8\u4e86\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\uff09\ninline int mrg(int x, int y) {\n    if (!x || !y) return x | y;\n    if (m[x] < m[y]) swap(x, y);\n    sib[y] = c[x], c[x] = y, sz[x] += sz[y];\n    return x;\n}\n\n// \u914d\u5bf9\u5806\nint mrgl(int l0) {\n    if (!l0 || !sib[l0]) return l0;\n    int l1 = sib[l0], l2 = sib[l1];\n    sib[l0] = sib[l1] = 0;\n    return mrg(mrg(l0, l1), mrgl(l2));\n}\n\n// \u628a\u6839\u8282\u70b9\u5f39\u51fa\u5806\ninline int pop(int u) {\n    int ort = rt[u];\n    rt[u] = mrgl(c[ort]), c[ort] = 0, sz[ort] = 1;\n    return ort;\n}\n\n// \u4e0a\u9762\u8bf4\u7684dfs\nvoid dfs(int u) {\n    if (!c0[u]) return;\n    int mx = 0;\n    for (int v = c0[u]; v; v = c1[v]) {\n        dfs(v);\n        if (sz[rt[v]] > sz[rt[mx]]) mx = v;\n    }\n    for (int v = c0[u]; v; v = c1[v])\n        if (v != mx) {\n            int tmp = 0;\n            while (rt[v]) {\n                int a = pop(mx), b = pop(v);\n                tmp = mrg(tmp, m[a] > m[b] ? a : b);\n            }\n            rt[mx] = mrg(rt[mx], tmp);\n        }\n    rt[u] = mrg(rt[u], rt[mx]);\n}\n\n// \u904d\u5386\u5806\u6c42\u548c\nlong long hsum(int rt) {\n    long long ans = m[rt];\n    for (int i = c[rt]; i; i = sib[i]) ans += hsum(i);\n    return ans;\n}\n\nint main() {\n    n = gi();\n    for (int i = 1; i <= n; ++i) rt[i] = i, m[i] = gi(), sz[i] = 1;\n    for (int i = 2; i <= n; ++i) {\n        int f = gi();\n        c1[i] = c0[f], c0[f] = i;\n    }\n    dfs(1);\n    putln(hsum(rt[1]));\n    return 0;\n}\n```",
        "postTime": 1556609931,
        "uid": 31456,
        "name": "zeertzjq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\n\u8fd9\u4e2a\u9898\u76ee\u5e94\u8be5\u7b97\u662f\u4eca\u5e74\u7701\u9009\u6700\u7b80\u5355\u7684\u4e00\u9898\u4e86 ~~\u7136\u800c\u4e3a\u4ec0\u4e48HB\u5c31\u662f\u6709wjyyy\u5207\u4e86\u5462~~\n\n\u9996\u5148\u6765\u8bf4\u4e00\u4e0b\u8d2a\u5fc3\u7684\u601d\u60f3\uff08\u8003\u573a\u4e0a\u5e94\u8be5\u60f3\u51fa\u6765\u7684\u4eba\u5f88\u591a\uff09\n\u7531\u4e8e\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u4e0d\u80fd\u540c\u65f6\u9009\uff0c\u4f46\u662f\u5728\u4e0d\u540c\u7684\u7ec3\u4e0a\u662f\u76f8\u4e92\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u7528\u4e24\u4e2a\u961f\u5217\u6765\u8868\u793a\n\u6bd4\u5982\u4e3e\u4e2a\u4f8b\u5b50\uff08\u5c31\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u5427\uff09\n\u6211\u4eec\u628a1\u7684\u4e24\u4e2a\u513f\u5b50\u5e95\u4e0b\u7684\u4e00\u6574\u6761\u94fe\u5148\u6c42\u51fa\u6765\uff0c\u7136\u540e\u6392\u4e2a\u5e8f\uff08\u7531\u4e8e\u8003\u8651\u5230\u540c\u4e00\u6761\u94fe\u4e0d\u80fd\u540c\u65f6\u9009\uff0c\u6240\u4ee5\u5185\u90e8\u7684\u987a\u5e8f\u5e76\u4e0d\u5f71\u54cd\uff09\n\u5047\u5982\u6392\u5b8c\u4e86\u662f\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n$$a:10,8,6,4,2,1$$\n\n$$b: 9,7,7,5$$\n\u6211\u4eec\u6765\u770b\u600e\u4e48\u8d2a\u5fc3\uff0c\u5982\u679c\u628a10\u548c9\u653e\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u53ea\u4f1a\u4ea7\u751f10\u7684\u5f71\u54cd\uff0c\u5426\u5219\u4e00\u5171\u4f1a\u4ea7\u751f10+9\u7684\u5f71\u54cd\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u548c10\u4e00\u8d77\u624d\u80fd\u6d88\u63899\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u64cd\u4f5c\u5c31\u662f\u628a10\u52a0\u8fdb\u7b54\u6848\uff0c\u7136\u540e\u5f39\u51fa9,10\uff0c\u540c\u6837\uff0c8\u52a0\u8fdb\u7b54\u6848\uff0c\u5f39\u51fa7,8\uff0c\u5c31\u8fd9\u6837\uff0c\u6700\u540e\u5269\u4e0b\u7684\u65701,2\u5355\u72ec\u52a0\u5165\n\u4e8e\u662f\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u4e8e\u662f\u94fe\u768415\u5206\uff08\u590d\u6742\u5ea6$NlogN$)\n\n\u540c\u6837\uff0c\u7ed3\u5408\u8fd9\u4e2a\u8d2a\u5fc3\uff0c\u6211\u4eec\u53ef\u4ee5\u62d3\u5c55\u5230\u6574\u68f5\u6811\u4e0a\uff0c\u7528\u4f18\u5148\u961f\u5217\u8fdb\u884c\u7ef4\u62a4\uff0c\u590d\u6742\u5ea6$N^2logN$\uff0c\u5f97\u520660\n\n\u7136\u800c\uff0c\u5982\u679c\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u7531\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u53ea\u4f1a\u5f39\u4e24\u4e2a\uff0c\u8fdb\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u662f$NlogN$\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u53cb\u597d\u7684\u5207\u6389\u4e86\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\n\n#define re register\n#define ll long long\n#define gc getchar()\ninline int read()\n{\n \tre int x(0),f(1);re char c(gc);\n    while(c>'9'||c<'0')f=c=='-'?-1:1,c=gc;\n    while(c>='0'&&c<='9')x=x*10+c-48,c=gc;\n    return f*x;\n}\n\nconst int N=1100000;\nstruct node{int to,next;}e[N];\nint h[N],cnt,tot,n,po[N];\nll ans,val[N],now[N];\npriority_queue<ll> son[N];\nvoid add(int x,int y){e[++cnt]=(node){y,h[x]};h[x]=cnt;} \n#define QXX(u) for(int i=h[u],v;v=e[i].to,i;i=e[i].next)\n\nvoid dfs(int u)\n{\n    po[u]=u;\n \tQXX(u)\n    {\n        dfs(v);\n     \tif(i==h[u])\tpo[u]=po[v];\n        else\n        {\n         \tif(son[po[u]].size()<son[po[v]].size())\n                swap(po[u],po[v]);\n            tot=0;\n            while(!son[po[v]].empty())\n            {\n                now[++tot]=max(son[po[v]].top(),son[po[u]].top());\n                son[po[u]].pop();\n                son[po[v]].pop();\n            }\n            for(int j=1;j<=tot;j++)\n                son[po[u]].push(now[j]);\n        } \n    }\n    son[po[u]].push(val[u]);\n} \nint main()\n{\n    n=read();\n    for(re int i=1;i<=n;i++)\n        val[i]=read();\n    for(re int i=2;i<=n;i++)\n    {\n     \tint fa=read();\n         add(fa,i);\n    } \n    dfs(1);\n    while(!son[po[1]].empty())\n        ans+=son[po[1]].top(),son[po[1]].pop();\n    cout<<ans;\n    return 0;\n} \n```",
        "postTime": 1555037477,
        "uid": 119086,
        "name": "zijinjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "~~D2\u552f\u4e00\u770b\u61c2\u7684\u9898~~\n\n~~\u800c\u4e14\u8003\u573a\u4e0a\u6ca1\u770b\u61c2\u4e3a\u55651\u53ef\u80fd\u4e0d\u662f\u94fe\u7aef\u70b9~~\n\n~~\u5927\u529b\u89c2\u5bdf\u9898\u610f~~\uff0c\u8fd9\u9898\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u76f4\u63a5\u5408\u5e76\u5b50\u8282\u70b9\u7684priority_queue\uff0c\u4e0a\u754cn^2logn\uff0c\u867d\u7136\u4e0a\u754c\u5f88\u677e\uff0c\u8fd8\u662f\u6002\u4e86\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u5e8f\u5217\u5408\u5e76\u540e\uff0c\u5e8f\u5217\u4f9d\u7136\u662f\u6709\u5e8f\u7684\uff0c\u6ca1\u6709\u5fc5\u8981\u7528\u6392\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528vector\u7ef4\u62a4\u3002\n\n~~\u7136\u540e\u968f\u673a\u6570\u636e\u8003\u573a\u7535\u8111\u968f\u4fbf\u8dd1~~\n\n~~\u7136\u540e\u5c31\u6ca1\u5199\u542f\u53d1\u5f0f\u5408\u5e76\u53d8\u621060\u5206~~\n\n\u52a0\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u8fc7\u4e86QAQ\u3002\u3002\u3002\u3002\n\n\u4e0b\u9762\u662f\u6bd4\u8f83\u66b4\u529b\u7684vector\u505a\u6cd5\uff1a\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#define reg register\ntypedef long long vt;\nconst int kmaxn=200000+5;\nstruct edge\n{\n    int d;\n    edge* nxt;\n};\nedge mempool[kmaxn];\nint mpt;\nedge* head[kmaxn];\nvoid add_edge(int s,int d)\n{\n    mempool[mpt].nxt=head[s];\n    head[s]=&mempool[mpt++];\n    head[s]->d=d;\n}\nvector<vt> q[kmaxn];\nvt value[kmaxn];\nint pos[kmaxn]; \nvoid merge(int& a,int& b)\n{\n    if(a==0)\n    {\n        a=b;\n        return;\n    }\n    if(q[a].size()<q[b].size())\n    {\n        swap(a,b);\n    }\n    vt t=0;\n    reg int i=0,L=min(q[a].size(),q[b].size());\n    for(i=0;i<L;++i)\n    {\n        t=max(q[a][i],q[b][i]);\n        q[a][i]=t;\n    }\n    for(L=q[b].size();i<L;++i)\n    {\n        q[a].push_back(q[b][i]);\n    }\n    vector<vt> vec;\n    swap(vec,q[b]);\n}\nint lb(int num)\n{\n    vt v=value[num];\n    num=pos[num];\n    reg int l=0,r=q[num].size();\n    reg int mid=0,ans=0;\n    if(q[num].empty()||q[num][0]<=v)\n        return 0;\n    else if(q[num].back()>v)\n        return r;\n    while(l<r)\n    {\n        mid=(l+r)>>1;\n        if(q[num][mid]<=v)\n        {\n            r=mid;\n            ans=mid;\n        }\n        else\n        {\n            l=mid+1;\n        }\n    }\n    return ans;\n}\nvoid dfs(int now)\n{\n    edge* t=head[now];\n    while(t)\n    {\n        dfs(t->d);\n        merge(pos[now],pos[t->d]);\n        t=t->nxt;\n    }\n    if(!head[now])\n    {\n    \tpos[now]=now;\n    }\n   /* reg int p=pos[now];\n    for(reg int i=0,j=q[p].size();i<j;++i)\n    {\n        if(q[p][i]<=value[now])\n        {\n            q[p].insert(q[p].begin()+i,value[now]);\n            return;\n        }\n    }\n    q[p].push_back(value[now]);*///\u94fe\u4f1a\u8d85\u65f6\n    q[pos[now]].insert(q[pos[now]].begin()+lb(now),value[now]);\n}\nint n;\nint fa;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n;\n    for(reg int i=1;i<=n;++i){\n        cin>>value[i];\n    }\n    for(reg int i=2;i<=n;++i)\n    {\n        cin>>fa;\n        add_edge(fa,i);\n    }\n    dfs(1);\n    vt ans=0;\n    for(reg int i=q[pos[1]].size()-1;i>=0;--i)\n    {\n        ans+=q[pos[1]][i];\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\nvector\u505a\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5361\uff0c\u56e0\u4e3a\u5bf9\u5e8f\u5217\u63d2\u5165\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u65f6\uff0c\u4e0a\u754c\u4f9d\u65e7\u662fn\uff0c\u4e0d\u8fc7\u5e73\u8861\u6811\u4e2d\u5e8f\u904d\u5386+\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u5361\u4e0d\u6389\u4e86\n\n~~\u4f46\u662fvector\u80fd\u8fc7\u5199\u4ec0\u4e48\u5e73\u8861\u6811~~\n\n~~\u4f9d\u65e7\u5077\u61d2\uff0c\u8bb0\u5403\u4e0d\u8bb0\u6253~~",
        "postTime": 1554715382,
        "uid": 56184,
        "name": "_\u8679_",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "### \u9898\u9762\n\n[P5290 \u6625\u8282\u5341\u4e8c\u54cd](https://www.luogu.com.cn/problem/P5290)\n\n### \u5206\u6790\n\n\u9898\u76ee\u7684\u6838\u5fc3\u8003\u70b9\u5c31\u662f\u5b58\u5728\u5b50\u5b59\u5173\u7cfb\u7684\u8282\u70b9\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u4e2a\u5185\u5b58\u6761\u91cc\uff0c\u800c\u6bcf\u6bb5\u5185\u5b58\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u8fd9\u6bb5\u4e2d\u653e\u8fdb\u7684\u6700\u5927\u7684\u8282\u70b9\u6743\u503c\u3002\u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u5730\u60f3\uff0c**\u5982\u679c\u60f3\u8ba9\u603b\u7684\u8282\u70b9\u6700\u5c11\uff0c\u5c31\u8981\u5728\u5f53\u524d\u6bb5\u7528\u4e00\u4e2a\u6700\u5927\u7684\u5c3d\u53ef\u80fd\u591a\u5730\u628a\u5927\u4e1c\u897f\u906e\u76d6\u6389\uff0c\u7136\u540e\u8ba9\u4e0b\u4e00\u6bb5\u7684\u6700\u5927\u503c\u5c3d\u53ef\u80fd\u5c0f**\u3002\n\n\u6211\u4eec\u60f3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9x,\u8003\u8651\u4ee5x\u7684\u5b50\u8282\u70b9y\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709$p$\u4e2a\u5143\u7d20\u5fc5\u987b\u653e\u8fdb\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u4e2d\uff0c\u800c\u8282\u70b9x\u4e4b\u524d\u5df2\u7ecf\u5904\u7406\u4e86\u90e8\u5206\u5b50\u8282\u70b9\uff0c\u6709$q$\u4e2a\u5143\u7d20\u5fc5\u987b\u653e\u8fdb\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u4e2d\u3002\u90a3\u4e48\uff0c\u7531\u4e8e\u4ee5x\u7684\u4e0d\u540c\u5b50\u8282\u70b9\u4e3a\u6839\u6784\u6210\u7684\u4e0d\u540c\u5b50\u6811\u4e2d\u5143\u7d20\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u6839\u636e\u4e0a\u4e00\u6bb5\u63d0\u5230\u7684\u8d2a\u5fc3\u601d\u60f3\uff0c\u5c31\u8981\u628a\u6bcf\u6b21\u4ece$p$\u4e2a\u548c$q$\u4e2a\u5143\u7d20\u4e2d\u5206\u522b\u53d6\u51fa\u6700\u5927\u503c$pmax$\u548c$qmax$\uff0c\u5c06$pmax$\u548c$qmax$\u53d6\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u67d0\u5185\u5b58\u6bb5\u7684\u5927\u5c0f\uff0c\u66f4\u65b0x\u7684\u90a3\u4e9b\u5143\u7d20\u3002\u6211\u4eec\u5728\u6811\u4e0adfs\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u8fd9\u6837\u9012\u5f52\u5730\u505a\uff0c\u6700\u7ec81\u53f7\u8282\u70b9\u8fd8\u5269\u4e0b\u7684\u6240\u6709\u5143\u7d20\u7684\u548c\u5c31\u662f\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u603b\u662f\u5728\u53d6\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5bf9\u6bcf\u4e2a\u6811\u4e0a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5806\uff0c\u800c\u6bcf\u6b21x\u548cy\u5404\u53d6\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u7136\u662f\u628asize\u5c0f\u7684\u5806\u5f80size\u5927\u7684\u5806\u5408\u5e76\uff0c\u8fd9\u5c31\u53eb\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u4e07\u4e00\u4e0a\u6587\u63d0\u5230\u7684$p > q$\uff0c\u6211\u4eec\u53ef\u4ee5\u7528C++11\u4e2d\u7684swap\u4ea4\u6362\u4e24\u4e2a\u5806\uff0c\u7ee7\u7eed\u8fdb\u884c\u5408\u5e76\u3002\n\n\u4ee3\u7801\u5199\u5f97\u4e0d\u597d\u5c31\u4e0d\u7c98\u4e86\u3002",
        "postTime": 1596506256,
        "uid": 175072,
        "name": "lcy09",
        "ccfLevel": 0,
        "title": "P5290 \u6625\u8282\u5341\u4e8c\u54cd \u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3 P5290\n\n\u4e2a\u4eba\u8ba4\u4e3a\u662f\u672c\u6b21\u5341\u4e8c\u7701\u8054\u8003\u4e2d\u6bd4\u8f83\u597d\u505a\u7684\u4e00\u9053\u9898\u3002~~\u4e5f\u662f\u552f\u4e00\u4e00\u9053\u7801\u957f1k\u4ee5\u5185\u7684\u3002~~\n\n\u8003\u8651\u94fe\u7684\u90e8\u5206\u5206\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u65f6\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4ec5\u4ec5\u548c\u6839\u8282\u70b9\u53d1\u751f\u5f71\u54cd\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c06\u6839\u8282\u70b9\u5355\u72ec\u653e\u5728\u4e00\u6bb5\u91cc\uff0c\u5269\u4e0b\u7684\u8d2a\u5fc3\u5373\u53ef\uff08\u5c3d\u91cf\u5c0f\u7684\u548c\u5c0f\u7684\u653e\uff09\u3002\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u53ef\u4ee5\u4f7f\u7528```std::priority_queue```\u6765\u7ef4\u62a4\u3002\u6bcf\u6b21\u53d6\u51fa\u4e24\u7aef\u7684\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u5206\u914d\u4e86\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8bd5\u7740\u5c06\u8fd9\u4e2a\u89e3\u6cd5\u62d3\u5bbd\u5230\u6811\u4e0a\u3002\n\n\u94fe\u53ef\u4ee5\u770b\u4f5c\u4e00\u68f5**\u4e00\u53c9\u6811**\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ea\u6709\u4e00\u68f5\u5b50\u6811\u3002\n\n\u800c\u5bf9\u4e8e**\u4e8c\u53c9\u6811**\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ea\u6709\u4e0d\u8d85\u8fc7$2$\u68f5\u5b50\u6811\u3002\u8fd9\u65f6\u6211\u4eec\u5411\u4e0b\u8db3\u591f\u5730\u9012\u5f52\uff0c\u603b\u80fd\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u80fd\u591f\u88ab\u89c6\u4e3a\u4e00\u6761\u94fe\u8fdb\u884c\u5904\u7406\u3002\uff08\u4f8b\u5982\u5b83\u7684\u5b50\u6811\u90fd\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u6216\u8005\u5b83\u4eec\u90fd\u662f\u4e00\u53c9\u6811\u3002\uff09\n\n\u5728\u6211\u4eec\u5904\u7406\u5b8c\u8fd9\u4e2a\u7ed3\u70b9\u4e4b\u540e\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u89c6\u4f5c\u4e00\u4e2a\u6574\u4f53\uff08\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5411\u4e0a\u8fd4\u56de\uff0c\u76f4\u5230\u89e3\u51b3\u6574\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e**\u591a\u53c9\u6811**\u53ef\u7c7b\u63a8\u5904\u7406\u3002\n\n\u8fd9\u4e00\u6bb5\u7684\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u6240\u793a\uff1a\n```\n1.void dfs(int curr)\n2.{\n3.\tfor (auto i:g[curr])dfs(i),merge(curr,i);//\u8bf7\u89c1\u540e\u9762\n4.\tq[curr].push(a[curr]);\n5.}\n```\n\u901a\u8fc7\u94fe\u7684\u542f\u53d1\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u4fdd\u5b58\u6700\u4f18\u89e3\u3002\n\n\u7136\u800c\uff0c\u5728\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5408\u5e76\u4e24\u4e2a\u5b50\u6811\u7684\u6700\u4f18\u89e3\u3002\n\n\u4f20\u7edf\u65b9\u5f0f\u590d\u6742\u5ea6\u4e3a$O(n^2)$\uff0c\u4e0d\u80fd\u901a\u8fc7\u6240\u6709\u7684\u6d4b\u8bd5\u6570\u636e\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8fdb\u884c**\u542f\u53d1\u5f0f\u5408\u5e76**\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u901a\u8fc7**\u53ea\u5c06\u5927\u5c0f\u8f83\u5c0f\u7684\u5806\u5408\u5e76\u5165\u8f83\u5927\u7684\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u5e73\u5747\u60c5\u51b5\u4e0b$O(n\\log n)$\u3002\n\n\u8fd9\u4e00\u6bb5\u7684\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u6240\u793a\uff1a\n\n```cpp\n1.void merge(int a, int b)\n2.{\n3.\tstack <int> s;\n4.\tif (q[a].size() < q[b].size())\n5.\t\tswap(q[a], q[b]);\n6.\twhile (!q[b].empty())\n7.\t{\n8.\t\ts.push(max(q[a].top(), q[b].top()));\n9.\t\tq[a].pop();\n10.\t\tq[b].pop();\n11.\t}\n12.\twhile (s.size())\n13.\t{\n14.\t\tint t = s.top();\n15.\t\ts.pop();\n16.\t\tq[a].push(t);\n17.\t}\n18.}\n```\n\n\u6ce8\u610f\uff1a\n1. \u5728\u7b2c$5$\u884c\u4e2d\u6211\u4eec\u4ea4\u6362\u4e86\u4e24\u4e2a\u5806\uff0c\u8fd9\u5728C++11\u4e2d\u4e3a$O(1)$\u3002\n2. \u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u6808\u6765\u7ef4\u62a4\u53d6\u51fa\u6765\u7684\u5143\u7d20\uff08\u6700\u4f18\u89e3\uff09\u3002\n\n\u5982\u679c\u6211\u4eec\u5173\u6ce8\u8fd9\u5176\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u4eec\u6070\u597d\u5404\u88ab\u8bbf\u95ee\u4e86\u4e00\u6b21\u3002\u8fd9\u5c31\u8bf4\u660e\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n \\log n)$.\n\n\u6700\u540e\u6211\u4eec\u5904\u7406```q[1]```\u5373\u53ef\u89e3\u51b3\u672c\u9898\u3002\n",
        "postTime": 1555837491,
        "uid": 87696,
        "name": "Lily_White",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6700\u8fd1\u770b\u5230\u7684\u4eca\u5e74\u7701\u9009\u9898\u4e2d\u6700\u826f\u5fc3\u7684\u4e00\u9053\u4e86\u5427\n\n\u770b\u9898+\u60f3\u9898+\u5199\u9898\u90fd\u53ef\u4ee5\u57280.5h\u5185\u89e3\u51b3\uff0c\u9001\u5206\u542b\u4e49\u660e\u663e\u554a\n\n\u9996\u5148\u7406\u89e3\u4e86\u9898\u610f\u540e\u6211\u4eec\u5f88\u5feb\u5c31\u80fd\u53d1\u73b0\u4e24\u4e2a\u70b9\u5982\u679c\u8981\u88ab\u5206\u5728\u4e00\u6bb5\u90a3\u4e48\u5fc5\u987b\u5728\u5b83\u4eec\u7684\u7956\u5148\u5904\u5408\u5e76\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u4e0b\u4e8c\u53c9\u6811\u600e\u4e48\u505a\uff0c\u53d1\u73b0\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a**\u5806**\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u4e00\u4e2a\u70b9\u5408\u5e76\u4e24\u4e2a\u513f\u5b50\u7684\u5806\n\n\u6839\u636e\u7b80\u5355\u5206\u6790\u6211\u4eec\u53d1\u73b0\u5fc5\u7136\u662f\u4e0d\u65ad\u53d6\u51fa\u4e24\u4e2a\u5806\u4e2d\u6700\u5927\u7684\u5143\u7d20\u5408\u5e76\u76f4\u5230\u4e00\u4e2a\u7a7a\u4e86\u4e3a\u6b62\n\n\u90a3\u4e48\u666e\u901a\u7684\u6811\u600e\u4e48\u505a\u5462\uff0c\u5982\u679c\u4f60\u7a0d\u5fae\u6709\u70b9\u7ecf\u9a8c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5f88\u597d\u6269\u5c55\uff0c\u76f4\u63a5\u628a\u6240\u6709\u513f\u5b50\u5408\u5e76\u5373\u53ef\n\n\u4f46\u662f\u8fd9\u6837\u4e00\u4e2a\u5143\u7d20\u53ef\u80fd\u4f1a\u91cd\u590d\u5165\u5806\u591a\u6b21\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5**\u542f\u53d1\u5f0f\u5408\u5e76**\u5373\u53ef\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u8fd9\u91cc\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u7531\u4e8e\u518d\u5408\u5e76\u540e\u77ed\u7684\u76f8\u5f53\u4e8e\u88ab\u76f4\u63a5\u6254\u6389\u4e86\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5143\u7d20\u5408\u5e76$n$\u6b21\uff0c\u603b\u590d\u6742\u5ea6\u662f$n\\log n$\u7684\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\nconst int N=200005;\nstruct edge\n{\n\tint to,nxt;\n}e[N]; int n,x,head[N],cnt,a[N],id[N],t[N]; priority_queue <int> hp[N]; long long ans;\nclass FileInputOutput\n{\n\tprivate:\n\t\tstatic const int S=1<<21;\n\t\t#define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n\t\tchar Fin[S],*A,*B;\n\tpublic:\n\t\tTp inline void read(T& x)\n\t\t{\n\t\t\tx=0; char ch; while (!isdigit(ch=tc()));\n\t\t\twhile (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n\t\t}\n\t\t#undef tc\n}F;\ninline void addedge(CI x,CI y)\n{\n\te[++cnt]=(edge){y,head[x]}; head[x]=cnt;\n}\ninline void swap(int& x,int& y)\n{\n\tint t=x; x=y; y=t;\n}\ninline int max(CI x,CI y)\n{\n\treturn x>y?x:y;\n}\n#define to e[i].to\ninline void DFS(CI now)\n{\n\tid[now]=now; for (RI i=head[now];i;i=e[i].nxt)\n\t{\n\t\tDFS(to); if (hp[id[now]].size()<hp[id[to]].size()) swap(id[now],id[to]);\n\t\tRI cnt=0; while (!hp[id[to]].empty()) t[++cnt]=max(hp[id[now]].top(),hp[id[to]].top()),\n\t\thp[id[now]].pop(),hp[id[to]].pop(); while (cnt) hp[id[now]].push(t[cnt--]);\n\t}\n\thp[id[now]].push(a[now]);\n}\n#undef to\nint main()\n{\n\t//freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n\tRI i; for (F.read(n),i=1;i<=n;++i) F.read(a[i]);\n\tfor (i=2;i<=n;++i) F.read(x),addedge(x,i); DFS(1);\n\twhile (!hp[id[1]].empty()) ans+=hp[id[1]].top(),hp[id[1]].pop();\n\treturn printf(\"%lld\",ans),0;\n}\n```",
        "postTime": 1555333088,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u6709\u4e00\u4e2a\u6811\uff0c\u6811\u4e0a\u6bcf\u4e2a\u70b9\u5e26\u70b9\u6743\uff0c\u73b0\u5728\u5c06\u70b9\u5212\u6210\u82e5\u5e72\u4e2a\u96c6\u5408\uff0c\u8981\u6c42\u6bcf\u4e2a\u96c6\u5408\u91cc\u7684\u70b9\u6ca1\u6709\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0c\u96c6\u5408\u7684\u6743\u503c\u662f\u96c6\u5408\u91cc\u70b9\u6743\u6700\u5927\u7684\u70b9\u7684\u6743\u503c\uff0c\u6c42\u4e00\u4e2a\u5212\u5206\u65b9\u6848\u4f7f\u6240\u6709\u96c6\u5408\u6743\u503c\u603b\u548c\u6700\u5c0f\u3002\n\n## n<=2000\n\n### 60\u5206\u505a\u6cd5----\u57fa\u4e8e\u6811\u94fe\u5256\u5206\u7684\u8d2a\u5fc3\n\n\u6570\u636e\u89c4\u6a21\u4e0d\u7b97\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u6709\u6ca1\u6709 $ O(n^2) $ \u9644\u8fd1\u7684\u7b97\u6cd5\u3002\n\n\u7ecf\u8fc7\u4e00\u756a\u778e\u641e\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\uff1a\u8981\u8ba9\u6240\u6709\u96c6\u5408\u7684\u6743\u503c\u603b\u548c\u6700\u5c0f\uff0c\u5c31\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u6743\u503c\u8f83\u5927\u7684\u96c6\u5408\u91cc\u5c3d\u53ef\u80fd\u591a\u5730\u5305\u542b\u6743\u503c\u8f83\u5927\u7684\u70b9\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u70b9\u6743\u964d\u5e8f\u6392\u5e8f\uff0c\u8d2a\u5fc3\u5730\u9009\u53d6\u5e76\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u89e3\u51b3\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u6811\u94fe\u5256\u5206\uff0c\u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a\u70b9\u5c31\u5c06\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u6253\u4e0a\u6807\u8bb0\uff0c\u5224\u65ad\u96c6\u5408\u91cc\u6709\u6ca1\u6709\u5f53\u524d\u8282\u70b9\u7684\u7956\u5148\u540e\u4ee3\u53ef\u4ee5\u770b\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u9762\u6709\u6ca1\u6709\u6807\u8bb0\u3002\n\n\u590d\u6742\u5ea6$O(n^2 \\ log \\ n)$\n\n~~\u800c\u4e14\u4e00\u4e2a\u66b4\u529b\u767e\u884c\u4ee3\u7801~~\n\n\u671f\u671b\u5f97\u520660\uff0c\u5b9e\u9645\u5f97\u520660\u3002\n\n\u66b4\u529b\u7684\u4ee3\u7801\u53ef\u4ee5\u53bb[\u6211\u7684\u535a\u5ba2](<http://qglin.top/2019/04/13/P5290/>)\u770b\u4e00\u4e0b\u3002\n\n## n<=2*10^5\n\n### 100\u5206\u505a\u6cd5----\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u4ed4\u7ec6\u8003\u8651\u6811\u94fe\u5256\u5206\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u53ef\u4ee5\u5c1d\u8bd5\u5408\u5e76\u4e00\u6ce2\u4e24\u4e2a\u96c6\u5408\u7684\u6700\u5927\u6743\u503c\u3002\u53d1\u73b0\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c31\u80fd\u4e71\u641e\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u5806\uff0c\u6309\u7167DFS\u5e8f\u641e\u4e00\u4e0b\u5408\u5e76\uff0c\u6700\u540eq[id[1]]\u91cc\u9762\u7684\u5c31\u662f\u8981\u6c42\u7684\u6240\u6709\u96c6\u5408\u6743\u503c\uff0c\u6c42\u4e2a\u548c\u5c31\u5b8c\u4e86\u3002\n\n\u590d\u6742\u5ea6 $ O(n \\ log \\ n) $\u3002\n\n\u671f\u671b\u5f97\u5206100\uff0c\u5b9e\u9645\u5f97\u5206100\u3002\n\n\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int N = 200005;\n\nnamespace Qglin {\n\ninline int fd() {\n    int x = 0, f = 1; char ch = getchar();\n    while (!isdigit(ch)) { if (ch == '-') f = -f; ch = getchar(); }\n    while ( isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x * f;\n}\n\nlong long ans;\nint n, Index;\nint a[N], fa[N], id[N], tmp[N];\npriority_queue<int> q[N];\n\nint hed[N], nxt[N << 1], to[N << 1], edcnt;\ninline void ADD(int x, int y) {\n    nxt[++edcnt] = hed[x];\n    hed[x] = edcnt;\n    to[edcnt] = y;\n}\n\n\nvoid dfs(int x) {\n    id[x] = ++Index;\n    for (int i = hed[x]; i; i = nxt[i]) {\n        int y = to[i];\n        dfs(y);\n\n        if (q[id[x]].size() < q[id[y]].size()) { swap(id[x], id[y]); }\n\n        int m = q[id[y]].size();\n        for (int j = 1; j <= m; ++j) {\n            tmp[j] = max(q[id[x]].top(), q[id[y]].top());\n            q[id[x]].pop();\n            q[id[y]].pop();\n        }\n        for (int j = 1; j <= m; ++j) { q[id[x]].push(tmp[j]); }\n    }\n    \n    q[id[x]].push(a[x]);\n}\n\n\nvoid main() {\n    n = fd();\n    for (int i = 1; i <= n; ++i) { a[i]=fd(); }\n    for (int i = 2; i <= n; ++i) {\n        fa[i]=fd();\n        ADD(fa[i],i);\n    }\n    \n    dfs(1);\n    \n    while (!q[id[1]].empty()) { ans += q[id[1]].top(); q[id[1]].pop(); }\n    printf(\"%lld\\n\", ans);\n}\n\n\n}\n\nint main() {\n    Qglin::main();\n    return 0;\n}\n```",
        "postTime": 1555150896,
        "uid": 91822,
        "name": "Qglin_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c31\u662f\u8ba9\u6bcf\u6761\u94fe\u4e2d\u7684\u6700\u5927\u503c\u548c\u5176\u4ed6\u94fe\u7684\u6700\u5927\u503c\u8fde\uff0c\u6b21\u5927\u503c\u7684\u548c\u5176\u4ed6\u94fe\u7684\u6b21\u5927\u503c\u8fde\uff0c\u7136\u540e\u6bcf\u6761\u94fe\u7528\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\u8fd9\u4e2a\u8054\u5408\u7684\u64cd\u4f5c\uff1b\n\n# \u6ce8\u610f:\nswap\u7684\u65f6\u5019\u4e00\u5b9a\u53ea\u80fd\u4ea4\u6362\u4e24\u4e2a\u5806\u7684\u4e0b\u6807\uff0c\u4e0d\u7136\u5c31\u4f1a\u871c\u6c4160\u5206\uff0c\u4f1aMLE\u5177\u4f538\u4e2a\u70b9\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48qwq\uff0c\u6c42\u8bc4\u8bba\u533a\u5927\u4f6c\u89e3\u7b54\uff09\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u53c2\u7167\u6211\u4e0b\u9762\u8fd9\u53d1\u4ee3\u7801\uff0cid\u6570\u7ec4\u7ef4\u62a4\u7684\u5373\u4e3a\u5806 \u7684\u4e0b\u6807\uff08\u6211\u4e5f\u662f\u770b\u697c\u4e0a\u624d\u77e5\u9053\u7684\u5662\uff09\n\n# ac\u4ee3\u7801\n```cpp\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<iostream>\n#include<algorithm>\n#define rgi register int\n#define rgu register unsigned int\nusing namespace std;\ntypedef long long ll;\nconst ll MAXN=200005;\nint M[MAXN],ttt,k,id[MAXN];\ninline int read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar())\n        if(c=='-')f=-1;\n    for(;isdigit(c);c=getchar())\n        x=(x<<3)+(x<<1)+c-'0';\n    return x*f;\n}\nvector<int>v,vec[MAXN];\npriority_queue<int>que[MAXN];\ninline void merge(int father,int child)\n{\n    if(que[id[father]].size()<que[id[child]].size())\n        swap(id[father],id[child]);\n    while(que[id[child]].size())\n    {\n        v.push_back(max(que[id[father]].top(),que[id[child]].top()));\n        que[id[father]].pop(),que[id[child]].pop();\n    }\n    while(v.size())que[id[father]].push(v.back()),v.pop_back();\n}\ninline void dfs(int x)\n{\n\tid[x]=++ttt;//\u5173\u952e\u662f\u8fd9\u4e2a\u5730\u65b9\n    for(rgu i=0;i<vec[x].size();++i)\n    {\n        dfs(vec[x][i]);\n        merge(x,vec[x][i]);\n    }\n    que[id[x]].push(M[x]);\n}\nint main()\n{\n    int fi,n=read();\n    for(rgi i=1;i<=n;++i)\n        M[i]=read();\n    for(rgi i=2;i<=n;++i)\n        vec[read()].push_back(i);\n    ll ans=0;\n    dfs(1);\n    while(que[id[1]].size())ans+=que[id[1]].top(),que[id[1]].pop();\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1555086226,
        "uid": 140659,
        "name": "\u6e3a\u5c0f\u7684Mastar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    },
    {
        "content": "\n\n\u96be\u5f97\u4e00\u89c1OI\u4e2d\u51fa\u73b0\u786c\u79d1\u5e7b\u4f5c\u54c1\u7684\u9898\uff0c\u5fc3\u60c5\u5341\u5206\u6fc0\u52a8\uff0c\u6765\u5199\u4e00\u53d1\u9898\u89e3\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u5212\u5206\u70b9\u96c6\uff0c\u4f7f\uff08\u6bcf\u4e2a\u70b9\u96c6\u4e2d\u7684\u6700\u5927\u503c\uff09\u52a0\u8d77\u6765\u6700\u5c0f\n\n\u5148\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b015\u5206\u662f\u94fe\n\n## 15pts\uff08\u94fe\uff09\n\u94fe\u600e\u4e48\u505a\uff1f\u9996\u5148\u6839\u8282\u70b91\u80af\u5b9a\u662f\u8981\u81ea\u5df1\u5355\u72ec\u4e00\u4e2a\u96c6\u5408\uff0c\u5176\u6b21\u662f\u5b83\u5ef6\u4f38\u51fa\u6765\u7684\u4e24\u6761\u94fe\uff0c\u663e\u7136\u6bcf\u4e00\u6761\u94fe\u8d77\u7801\u8981\u5212\u5206\u6210\u76f8\u5f53\u4e8e\u94fe\u957f\u5ea6\u6570\u91cf\u7684\u96c6\u5408\uff0c\u73b0\u5728\u8003\u8651\u5408\u5e76\u96c6\u5408\n\n\u6839\u636e\u8d2a\u5fc3\uff0c\u5de6\u94fe\u7684\u6700\u5927\u503c\u5f88\u660e\u663e\u8981\u8ddf\u53f3\u94fe\u7684\u6700\u5927\u503c\u653e\u5728\u4e00\u8d77\uff0c\uff08\u8bbe\u4e0d\u653e\u5728\u4e00\u8d77\uff0c\u800c\u662f\u8ddfs\u653e\u5728\u4e00\u8d77\uff0c\u5219\u9700\u53e6\u5f00\u4e00\u4e2a\u6700\u5927\u503c\u4e3a\u5de6/\u53f3\u94fe\u6700\u5927\u503c\u7684\u96c6\u5408\uff0c\u4f1a\u6bd4\u5f00\u4e00\u4e2as\u4e3a\u6700\u5927\u503c\u7684\u96c6\u5408\u5dee\uff09\uff0c\u540c\u7406\u6b21\u5927\u503c\u4e5f\u8981\u653e\u5728\u4e00\u8d77\uff0c\u6700\u540e\u628a\u591a\u51fa\u6765\u7684\u90a3\u6761\u94fe\u5168\u90e8\u52a0\u4e0a\u5373\u53ef\n\n```cpp\nvoid solve1()\n{\n\tint u;\n\tfor(int i=head[1];i;i=head[u])\n\t{\n\t\tu=to[i];top[++top[0]]=a[u].v;\n\t}\n\tfor(int i=next[head[1]];i;i=head[u])\n\t{\n\t\tu=to[i];son[++son[0]]=a[u].v;\n\t}\n\tif(top[0])sort(top+1,top+top[0]+1,cmp);\n\tif(son[0])sort(son+1,son+son[0]+1,cmp);//\u5bf9\u4e8e\u4e24\u6761\u94fe\u7684\u6392\u5e8f \n\tint i=1,j=1;\n\tfor(;i<=top[0]&&j<=son[0];i++,j++)ans+=max(top[i],son[j]);//\u7b54\u6848\u52a0\u4e0a\u8f83\u5927\u7684\u6570 \n\tif(i<=top[0])for(;i<=top[0];i++)ans+=top[i];\n\tif(j<=son[0])for(;j<=son[0];j++)ans+=son[j];//\u52a0\u4e0a\u5269\u4e0b\u7684\u6570 \n\tprintf(\"%lld\",ans+a[1].v);\n\treturn;\n}\n```\n\n\n\uff08\u7136\u800c\u7b14\u8005\u662f\u7528\u6392\u5e8f\u5b9e\u73b0\u7684\uff0c\u5de7\u5999\u5730\u9519\u8fc7\u4e86\u6570\u636e\u8303\u56f4\u5f15\u5bfc\u7684\u6b63\u89e3qwq\uff09\n\n## \u53e650pts (n<=2000)\n\u65e2\u7136\u9898\u76ee\u8ba9\u6211\u4eec\u627e\u6700\u5927\uff0c\u90a3\u5c31\u4ece\u6700\u5927\u503c\u5165\u624b\uff0c\u5bf9\u4e8e\u6700\u5927\u503c\uff0c\u5b83\u4e00\u5b9a\u662f\u5b83\u6240\u5904\u7684\u96c6\u5408\u8d21\u732e\u7ed9\u7b54\u6848\u7684\u90a3\u4e2a\u6570\u3002\n\n\u73b0\u5728\u8003\u8651\u6269\u5c55\u8fd9\u4e2a\u96c6\u5408\uff0c\u5148\u4e0d\u8003\u8651\u6b63\u786e\u6027\u8bd5\u8bd5\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u70b9\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u5c3d\u91cf\u628a\u5927\u7684\u6570\u52a0\u5165\u521a\u624d\u90a3\u4e2a\u4ee5\u6700\u5927\u503c\u4e3a\u7b54\u6848\u7684\u96c6\u5408\uff08\u201c\u5c3d\u91cf\u201d\u7684\u610f\u601d\u662f\u5f53\u524d\u52a0\u5165\u7684\u6570\u4e0e\u4e4b\u524d\u52a0\u5165\u7684\u6570\u4e0d\u6784\u6210\u7956\u5148--\u540e\u4ee3\u5173\u7cfb\uff09\u3002\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\u6709\u4e00\u4e9b\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u6570\u6ca1\u88ab\u52a0\u5165\uff0c\u90a3\u5c31\u518d\u6765\u4e00\u6b21\u521a\u624d\u7684\u8fc7\u7a0b\uff0c\u5c06\u5269\u4e0b\u7684\u6570\u6392\u5e8f\uff0c\u4ee5\u6700\u5927\u6570\u4e3a\u57fa\u7840\uff0c\u5c3d\u91cf\u52a0\u5165\u5927\u7684\u6570\u3002\u76f4\u5230\u6240\u6709\u6570\u90fd\u88ab\u52a0\u5165\u5230\u5404\u81ea\u7684\u96c6\u5408\u5f53\u4e2d\u3002\n\n### \u4e0b\u9762\u8bc1\u660e\u8fd9\u4e2a\u505a\u6cd5\u6b63\u786e\u6027\n\u8bbea1\u4e3a\u5f53\u524d\u6700\u5927\u6570\uff0ca2\u4e3a\u8981\u52a0\u5165\u7684\u7b2c\u4e8c\u5927\u6570\u4e14\u6ee1\u8db3\u4e0d\u662f\u5df2\u52a0\u5165\u7684\u6570\u7684\u7956\u5148/\u540e\u4ee3\uff0c\u8003\u8651\u4e0d\u52a0\u5165a2\u7684\u552f\u4e00\u539f\u56e0\u53ef\u80fd\u662f\uff1a\u52a0\u5165a2\u540e\uff0ca2\u9650\u5236\u4e86\u5176\u7956\u5148/\u540e\u4ee3\u52a0\u5165\u5f53\u524d\u96c6\u5408\n- #### \u82e5\u201c\u6321\u4f4f\u201d\u540e\u4ee3\u52a0\u5165\uff1a\n\n\u8bbeS\u4e3a\u672c\u6765\u5e94\u52a0\u5165\u7684a2\u7684\u540e\u4ee3\u96c6\u5408\uff0c\u6839\u636e\u5047\u8bbeS\u4e2d\u4efb\u610f\u6570\u5747\u6bd4a2\u5c0f\uff08\u6216\u7b49\uff09,\u5219\u4e4b\u540e\u5fc5\u5f00\u4e00\u4e2aA\u96c6\u5408\u5bb9\u7eb3S\u6216a2\n\n\u5f53\u524d\u52a0\u5165a2-->\u4e4b\u540e\u8981\u5f00\u4e00\u4e2a\uff08\u6700\u5927\u503c\u4e0d\u4e00\u5b9a\u5728S\u4e2d\u7684\uff09A\u96c6\u5408\u5bb9\u7eb3S\n\n\u5f53\u524d\u52a0\u5165S -->\u4e4b\u540e\u8981\u5f00\u4e00\u4e2aA\u96c6\u5408\u5bb9\u7eb3a2\n\n\u5373A\u8981\u4e48\u4ee5\u5176\u5b83\u6570\u4e3a\u74f6\u9888\uff08\u6700\u5927\u503c\uff09\uff08\u6b64\u65f6\u5148\u52a0\u5165a2\u6216S\u5bf9\u7b54\u6848\u65e0\u5f71\u54cd\uff09\uff0c\u8981\u4e48\u4ee5a2\u6216S\u4e2d\u67d0\u4e2a\u6570\u4e3a\u74f6\u9888\uff0c\u800ca2\u5927\u4e8e\u7b49\u4e8eS\u4e2d\u4efb\u610f\u6570\uff0c\u4ee5a2\u4e3a\u74f6\u9888\u66f4\u52a3\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5f53\u524d\uff0c\u52a0\u5165a2\u6bd4\u8d77\u52a0\u5165\u5176\u540e\u4ee3\u96c6\u5408S\uff0c\u7b54\u6848\u4e0d\u4f1a\u66f4\u5dee\u3002\n\n- #### \u82e5\u201c\u6321\u4f4f\u201d\u7956\u5148\u52a0\u5165\n\u9996\u5148\u6321\u4f4f\u7684\u7956\u5148\u80af\u5b9a\u53ea\u80fd\u662f\u5b83\u7238\u7238\u5230a2\u548ca1\u7684LCA\u4e2d\u7684\u70b9\uff0c\u540c\u6321\u4f4f\u540e\u4ee3\u7684\u8bc1\u6cd5\uff0c\u4e14\u52a0\u5165a2\u7956\u5148\u6321\u4f4f\u7684\u70b9\u6bd4\u52a0\u5165a2\u6321\u4f4f\u7684\u70b9\u591a\uff0c\u660e\u663e\u66f4\u52a3\u3002\n\n\u4ee5\u4e0a\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u6bcf\u4e00\u6b65\u90fd\u9075\u5faa\u6700\u4f18\u6027\u539f\u5219\uff0c\u7531\u6570\u5b66\u5f52\u7eb3\uff0c\u6b63\u786e\u6027\u5f97\u8bc1\u3002\n\n\n\u7136\u800c\uff0c\u8fd9\u79cd\u505a\u6cd5\u6bcf\u5f00\u4e00\u4e2a\u96c6\u5408\u90fd\u8981\u5bf9\u6392\u597d\u5e8f\u7684\u6570\u4e00\u4e00\u5224\u65ad\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u8d77\u7801\u4e3a         O(n^2),\u7136\u540e\u7b14\u8005\u6bd4\u8f83\u7b28\uff0c\u53ea\u60f3\u5230\u7528\u6811\u94fe\u5256\u5206+\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7956\u5b59\u5173\u7cfb\u7684\u505a\u6cd5\uff0c\u5177\u4f53\u662f\u5bf9\u539f\u6811\u505a\u6811\u94fe\u5256\u5206\uff0c\u82e5\u9009\u4e86\u4e00\u4e2a\u6570\u4fbf\u5c06\u5176\u540e\u4ee3\u548c\u7956\u5148\u5bf9\u5e94\u7684\u70b9+1\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u52a0\u5165\u5f53\u524d\u96c6\u5408\u5c31\u5355\u70b9\u8be2\u95ee\u4e0b\u4e3a\u4e0d\u4e3a\u96f6\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8986\u76d6\u7956\u5148\u7684\u590d\u6742\u5ea6\u662fO\uff08logn^2\uff09\uff0c\u8986\u76d6\u540e\u4ee3\u590d\u6742\u5ea6\u662fO(logn)\uff0c\u5206\u522b\u8986\u76d6\u4e00\u6b21\uff0c\u8be2\u95ee\u590d\u6742\u5ea6O(logn)\uff0c\u95ee\uff08\u603b\u96c6\u5408\u6570\u91cf\uff09\u6b21\uff0c\u6700\u574f\u6709n\u4e2a\u96c6\u5408(\u94fe)\uff0c\u6240\u4ee5\u6700\u574f\u60c5\u51b5\u4e0b\u95een\u6b21\u3002\n\n\u603b\u590d\u6742\u5ea6 O(n(longn^2)+(n^2)logn)\n\n\u52a0\u4e0a\u94fe\u7684\u505a\u6cd5\u53ef\u4ee5\u62ff\u523075pts\n\n\u4ee3\u7801\u5b9e\u73b0\u7528\u4e86\u6bd4\u8f83\u5de7\u5999\u7684\u529e\u6cd5\u51cf\u5c0f\u8fd0\u884c\u65f6\u95f4\u4e0a\u9650\u7684\u677e\u7d27\n\n```cpp\n//by OrionM42\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nchar c;\nint read()\n{\n\tc=getchar();int res=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))res=(res<<1)+(res<<3)+(c^48),c=getchar();\n\treturn res;\n}\nconst int N=2e5+111,M=1e6+111;\nint head[N],next[N],to[N],tot=1,n,cd[N];ll ans;\nint dad[N],dep[N],top[N],son[N],si[N],seg[N],all,tree[N];bool sol;\n//tree\u662f\u6811\u72b6\u6570\u7ec4\uff0cdad,dep,top,son,si,seg,all,\u662f\u6811\u5256\u7684\u53d8\u91cf\n//cd,sol\u5224\u65ad\u6570\u636e\u662f\u4e0d\u662f\u94fe \nstruct node\n{\n\tint v,bh;\n}a[N];\nbool cmp(int aa,int bb){return aa>bb;}\nbool cmp2(node aa,node bb){return aa.v>bb.v;}\ninline int max(int aa,int bb){return aa>bb?aa:bb;}\nvoid add_e(int fr,int go)\n{\n\ttot++;next[tot]=head[fr];head[fr]=tot;to[tot]=go;cd[fr]++;\n}\ninline int lowbit(int x){return x&-x;}\nvoid add_t(int x,int s){for(;x<=n+11;x+=lowbit(x))tree[x]+=s;}\nint query(int x){int res=0;for(;x;x-=lowbit(x))res+=tree[x];return res;}\n//\u6811\u72b6\u6570\u7ec4 \nvoid solve1()\n{\n\tint u;\n\tfor(int i=head[1];i;i=head[u])\n\t{\n\t\tu=to[i];top[++top[0]]=a[u].v;\n\t}\n\tfor(int i=next[head[1]];i;i=head[u])\n\t{\n\t\tu=to[i];son[++son[0]]=a[u].v;\n\t}\n\tif(top[0])sort(top+1,top+top[0]+1,cmp);\n\tif(son[0])sort(son+1,son+son[0]+1,cmp);//\u5bf9\u4e8e\u4e24\u6761\u94fe\u7684\u6392\u5e8f \n\tint i=1,j=1;\n\tfor(;i<=top[0]&&j<=son[0];i++,j++)ans+=max(top[i],son[j]);//\u7b54\u6848\u52a0\u4e0a\u8f83\u5927\u7684\u6570 \n\tif(i<=top[0])for(;i<=top[0];i++)ans+=top[i];\n\tif(j<=son[0])for(;j<=son[0];j++)ans+=son[j];//\u52a0\u4e0a\u5269\u4e0b\u7684\u6570 \n\tprintf(\"%lld\",ans+a[1].v);\n\treturn;\n}//\u94fe\u505a\u6cd5 \nvoid dfs1(int u)\n{\n\tsi[u]=1;dep[u]=dep[dad[u]]+1;\n\tfor(int i=head[u];i;i=next[i])\n\t{\n\t\tint go=to[i];\n\t\tdfs1(go);\n\t\tsi[u]+=si[go];\n\t\tif(si[go]>si[son[u]])son[u]=go;\n\t}\n}\nvoid dfs2(int u)\n{\n\tseg[u]=++all;\n\tif(son[u])\n\t{\n\t\ttop[son[u]]=top[u];\n\t\tdfs2(son[u]);\n\t}\n\tfor(int i=head[u];i;i=next[i])\n\t{\n\t\tint go=to[i];if(top[go])continue;\n\t\ttop[go]=go;\n\t\tdfs2(go);\n\t}\n}\nvoid add(int x,int y)\n{\n\tint fx=top[x],fy=top[y];\n\twhile(fx!=fy)\n\t{\n\t\tif(dep[fx]<dep[fy])fx^=fy^=fx^=fy,x^=y^=x^=y;\n\t\tadd_t(seg[fx],1);add_t(seg[x]+1,-1);\n\t\tx=dad[fx];fx=top[x];\n\t}\n\tif(dep[x]>dep[y])x^=y^=x^=y;\n\tadd_t(seg[x],1);add_t(seg[y]+1,-1);\n}//\u6811\u5256 \nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)a[i].v=read(),a[i].bh=i;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tdad[i]=read();add_e(dad[i],i);\n\t\tif(!sol)if((cd[dad[i]]>1&&dad[i]>1)||(cd[dad[i]]>2))sol=1;\n\t}\n\tif(!sol){solve1();return 0;}//\u94fe \n\tdfs1(1);\n\ttop[1]=1;\n\tdfs2(1);//\u6811\u5256\u524d\u7f6e\u5de5\u4f5c \n\tsort(a+1,a+n+1,cmp2);//\u6392\u5e8f\u8d2a\u5fc3 \n\tint nsi=n;\n\twhile(nsi)\n\t{\n\t\tfor(int i=0;i<=n+11;i++)tree[i]=0;\n\t\tint la=0;ans+=a[1].v;\n\t\tfor(int i=1;i<=nsi;i++)\n\t\t{\n\t\t\tif(query(seg[a[i].bh]))\n\t\t\t{\n\t\t\t\ta[++la]=a[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tadd(a[i].bh,1);\n\t\t\t\tadd_t(seg[a[i].bh],1);add_t(seg[a[i].bh]+si[a[i].bh],-1);\n\t\t\t}\n\t\t}\n\t\tnsi=la;\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n## \u63a5\u4e0b\u6765\u662f\u6b63\u89e3\n\u5176\u5b9e\u8bc1\u660e\u8fc7\u7a0b\u5173\u952e\u7684\u5730\u65b9\u90fd\u5728\u4e0a\u9762\u4e86\uff0c\u53ea\u8981\u7ed3\u5408\u94fe\u7684\u6570\u636e\u591a\u60f3\u4e00\u6b65\u7b54\u6848\u5c31\u51fa\u6765\u4e86\n~~\uff08\u7136\u800c\u7b14\u8005\u6bd4\u8f83\u7b28\u6ca1\u60f3\u51fa\u6765\uff09~~\n\n\u5bb9\u6613\u770b\u51fa\uff0c\n### \u6700\u5927\u7684\u6570a1\u6240\u5728\u7684\u96c6\u5408,\u4f1a\u5728\u5b83\u7684\u6bcf\u4e2a\u7956\u5148\u7684\u6240\u6709\u5176\u4ed6\u513f\u5b50\uff08\u5373\u4e0d\u5305\u542ba1\u672c\u8eab\u7684\u5b50\u6811\uff09\u4e2d\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u6570\u52a0\u5165\u5f53\u524d\u96c6\u5408\uff0c\u8bc1\u660e\u8fc7\u7a0b\u540c50pts\u7684\u8bc1\u6cd5\u3002\u540c\u7406\uff0c\u672a\u9009\u8fc7\u6570\u4e2d\u7b2c\u4e8c\u5927\u7684\u6570\u4e5f\u4f1a\u6309\u7167\u540c\u6837\u7684\u65b9\u5f0f\uff0c\u5c06\u5269\u4e0b\u6570\u4e2d\u7684\u67d0\u4e9b\u6570\u9009\u8fdb\u81ea\u5df1\u7684\u96c6\u5408\u3002\n\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u8fd9\u662f\u4ec0\u4e48\uff1f\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5806\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u6bcf\u4e2a\u6570\u628a\u5176\u4ed6\u6570\u9009\u8fdb\u81ea\u5df1\u96c6\u5408\u7684\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u628a\u8fd9\u4e2a\u6570\u7684\u8d21\u732e\u4ece\u7b54\u6848\u4e2d\u6263\u9664\uff0c\u82e5\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5806\u5408\u5e76\u7684\u8fc7\u7a0b\uff0c\u5806\u4e2d\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6743\u503c\uff0c\u5219\u5728\u5411\u4e0a\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8be5\u70b9\u7684\u5806\u4e2d\u6743\u503c\u4ece\u5927\u5230\u5c0f\uff0c\u548c\u5b83\u5144\u5f1f\u8282\u70b9\u7684\u5806\u7684\u5bf9\u5e94\u6392\u540d\u7684\u6743\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6392\u540d\uff0c\u53ea\u80fd\u7559\u4e0b\u4e00\u4e2a\u6743\u503c\uff0c\u5373\u5806\u7684\u5408\u5e76\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u7528\u5927\u6570\u6d88\u6389\u5c0f\u6570\u8d21\u732e\u7684\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\u540c\u65f6\u505a\u800c\u5df2\u3002\n\n\u601d\u8def\u5f88\u5de7\u5999\uff0c\u4ee3\u7801\u4e5f\u4e0d\u957f\n```cpp\n//by OrionM42\n#include <iostream>\n#include <cstdio>\n#include <queue>\nusing namespace std;\ntypedef long long ll;\nchar c;\nint read()\n{\n\tc=getchar();int res=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))res=(res<<1)+(res<<3)+(c^48),c=getchar();\n\treturn res;\n}\ninline int max(int aa,int bb){return aa>bb?aa:bb;}\nconst int N=2e5+111;\npriority_queue < int > q[N];//\u6574\u5f62\u5927\u6839\u5806 \nint n,head[N],next[N],to[N],tot=1,si[N],v[N],ls[N],sls,po[N];\nlong long ans;\n//v[i]\u8868\u793a\u7b2ci\u4e2a\u5b50\u7a0b\u5e8f\u5360\u7528\u7a7a\u95f4\u5927\u5c0f si[i]\u8868\u793a\u7b2ci\u4e2a\u5806\u5927\u5c0f \n//po[i]\u8868\u793a\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u5806\u7684\u7f16\u53f7 \nvoid add(int fr,int go)\n{\n\ttot++;next[tot]=head[fr];head[fr]=tot;to[tot]=go;\n}\nint merge(int x,int y)//\u5408\u5e76\u7f16\u53f7\u4e3ax,y\u7684\u5806\u5230x\u4e0a \n{\n\tif(si[x]<si[y])x^=y^=x^=y;//\u542f\u53d1\u5f0f\u5408\u5e76,\u4ea4\u6362x,y \n\tsls=0;\n\twhile(!q[y].empty())\n\t{\n\t\tls[++sls]=max(q[x].top(),q[y].top());//\u7528\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u5b58\u9700\u8981\u52a0\u5165\u7684\u6570 \n\t\tq[x].pop();q[y].pop();\n\t}\n\tfor(int i=1;i<=sls;i++)q[x].push(ls[i]);\n\treturn x;\n}\nint dfs(int u)\n{\n\tpo[u]=u;\n\tfor(int i=head[u];i;i=next[i])\n\t{\n\t\tint go=to[i];\n\t\tpo[u]=merge(dfs(go),po[u]);//\u9012\u5f52\u5408\u5e76 \n\t}\n\tsi[po[u]]++;q[po[u]].push(v[u]);\n\treturn po[u];//\u8fd4\u56de\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5806\u7684\u7f16\u53f7 \n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)v[i]=read();\n\tfor(int i=2;i<=n;i++)add(read(),i);\n\tdfs(1);//\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u9012\u5f52\u5408\u5e76\u5806\n\twhile(!q[po[1]].empty())\n\t{\n\t\tans+=q[po[1]].top();q[po[1]].pop();\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1554884332,
        "uid": 77262,
        "name": "OrionM42",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5290 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u6625\u8282\u5341\u4e8c\u54cd\u3011"
    }
]