[
    {
        "content": "**\u5e7f\u544a\uff1a[blog](https://www.luogu.com.cn/blog/Wendigo/)**\n\n[P2469 \u3010\\[SDOI2010\\]\u661f\u9645\u7ade\u901f\u3011](https://www.luogu.com.cn/problem/P2469)\n\n### \u6b64\u9898\u7b97\u6cd5\uff1a\u8d39\u7528\u6d41\n\n>\u8fd9\u9898\u96be\u5ea6\u5360\u6d1b\u8c37\u7f51\u7edc\u6d41\u9898\u524d$10\\%$\u2014\u2014$Wendigo$\u3002\n\n\u62ff\u5230\u8fd9\u9898\u65f6\uff0c\u601d\u8def\u771f\u662f\u591a\u6837\uff0c\u53ef\u60dc**\u5168\u662f\u9519\u7684**\uff0c\u5982\u4e0b:\n\n**1.$s\\to 1\\sim  n$ \u6d41\u91cf $1$ \uff0c$1\\sim n\\to t$ \u6d41\u91cf $1$ \uff0c\u4e2d\u95f4\u8fde\u6d41\u91cf $1$ \u8d39\u7528 $w_i$ \u7684\u8def\u5f84\uff08\u5c0f\u7f16\u53f7\u8fde\u5927\u7f16\u53f7\uff09\uff0c\u6bcf\u4e2a\u70b9\uff08\u5305\u62ec $s$ \uff09\u5230\u975e\u81ea\u5df1\u7684\u70b9 $i$ \u8fde\u6d41\u91cf $1$ \u8d39\u7528 $a_i$ \u7684\u8fb9\u3002**\n\n>$BUG$\uff1a\u4e00\u6761\u8def\u5f84\u7684\u8d39\u7528\uff08\u957f\u5ea6\uff09\u4f1a\u88ab\u7b97\u591a\u904d\u3002\n\n**2.$s\\to mid$ \u6d41\u91cf $1$ \uff0c$mid\\to 1_x\\sim n_x$ \u6d41\u91cf $1$ \uff0c$1_y\\sim n_y\\to t$ \u6d41\u91cf $1$ \uff0c$i_x\\to i_y$ \u6d41\u91cf $1$ \u8d39\u7528 $-a_i$ \uff0c\u4e2d\u95f4\u8fde\u6d41\u91cf $1$ \u8d39\u7528 $w_i$ \u7684\u8def\u5f84\uff08\u5c0f\u7f16\u53f7\u8fde\u5927\u7f16\u53f7\uff09\uff0c\u5230\u975e\u81ea\u5df1\u7684\u70b9 $i$ \u8fde\u6d41\u91cf $1$ \u8d39\u7528 $a_i$ \u7684\u8fb9\u3002**\n\n>$BUG$:\u8d39\u7528\u6d41\u7b97\u6cd5\u8dd1\u4e0d\u4e86\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u3002\n\n**\u6b63\u89e3\uff1a**\n\n\u60f3\u8c61\u6709 $n+1$ \u4e2a\u4eba\u63a5\u529b\u8dd1 \uff0c\u5206\u522b\u5728\u70b9 $s$ \u548c $1\\sim n$ \u4e0a \uff0c\u5f00\u59cb\u65f6\u63a5\u529b\u68d2\u5728 $s$ \u90a3\u4e2a\u4eba\u624b\u4e0a\u3002\n\n\u8fd9\u65f6\u5019\u4ed6\u62ff\u7740\u63a5\u529b\u68d2\u5f00\u59cb\u8dd1\uff0c\u5230\u8fbe\u67d0\u4e2a\u661f\u7403\u540e\u505c\u6b62\uff0c\u628a\u63a5\u529b\u68d2\u4ea4\u7ed9\u8be5\u661f\u7403\u4e0a\u7684\u9009\u624b\uff0c\u5e76\u6253\u5361\u7ed3\u675f\u6bd4\u8d5b\u3002\n\n\u8be5\u9009\u624b\u53c8\u51fa\u53d1\uff0c\u5faa\u73af\u6b64\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u661f\u7403\u53ea\u53ef\u4ee5\u6253\u5361\u4e00\u6b21\uff0c\u5fc5\u987b\u6253\u5361\u3002\u8def\u4e0a\u8d70\u8fc7\u7684\u8def\u7a0b\u76f8\u5f53\u4e8e\u8d39\u7528\u3002\n\n\u6700\u540e\u7684\u6700\u5927\u6d41\u6700\u5c0f\u8d39\u7528\u5c31\u662f\u7b54\u6848\uff0c\u800c\u539f\u95ee\u9898\u4e0e\u6b64\u7b49\u6548\u3002\n\n![jlp.jpg](https://i.loli.net/2020/01/07/N3zTUKgpy1XfE8O.jpg)\n\n**\u8fde\u8fb9\uff1a\u62c6 $i$ \u70b9\u4e3a $i_x$ \u548c $i_y$**\n\n1. $s\\to 1_x\\sim n_x$ \u6d41\u91cf $1$ \uff0c\u8d39\u7528 $0$\uff08\u76f8\u5f53\u4e8e\u661f\u7403\u4e0a\u7684\u7b49\u5f85\u8005\uff09 \u3002\n\n2. $s\\to 1_y\\sim n_y$ \u6d41\u91cf $1$ \uff0c\u8d39\u7528 $a_i$\uff08\u76f8\u5f53\u4e8e\u80fd\u529b\u7206\u53d1\u6a21\u5f0f\uff09\u3002\n\n3. $1_y\\sim n_y\\to t$ \u6d41\u91cf $1$ \uff0c\u8d39\u7528 $0$\uff08\u76f8\u5f53\u4e8e\u6253\u5361\uff09\u3002\n\n4. $u_x\\to v_y$ \u6d41\u91cf $1$ \uff0c\u8d39\u7528 $w$\uff08\u76f8\u5f53\u4e8e\u661f\u9645\u822a\u8def\uff09\u3002\n\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801 $+$ \u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=2e3+10;\nconst int M=2e6+10;\nconst int inf=1e8;\nint d(){int x; scanf(\"%d\",&x); return x;}\nint n,m,p,s,t,a[N],fans,cans; \nstruct edge{\n\tint adj,nex,fw,r;\n}e[M];\nint g[N],top=1;\nvoid add(int x,int y,int z,int w){\n\te[++top]=(edge){y,g[x],z,w};\n\tg[x]=top;\n}\nvoid Add(int x,int y,int z,int w){\n\t// printf(\"%d-%d %d %d\\n\",x,y,z,w);\n\tadd(x,y,z,w),add(y,x,0,-w);\n}\nint dep[N],cur[N];\nbool vis[N];\nqueue<int> Q;\nbool spfa(){ //\u6a21\u677f\u5c31\u4e0d\u7528\u8bf4\u4e86\n\tfor(int i=1;i<=p;i++)\n\t\tvis[i]=0,dep[i]=inf,cur[i]=g[i];\n\tQ.push(s),vis[s]=1,dep[s]=0;\n\twhile(Q.size()){\n\t\tint x=Q.front(); Q.pop();\n\t\tvis[x]=0;\n\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\tint to=e[i].adj,d=e[i].r;\n\t\t\tif(e[i].fw&&dep[to]>dep[x]+d){\n\t\t\t\tdep[to]=dep[x]+d;\n\t\t\t\tif(!vis[to]){\n\t\t\t\t\tvis[to]=1;\n\t\t\t\t\tQ.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=inf;\n}\nint dfs(int x,int F){\n\tif(!F||x==t)\n\t\treturn F;\n\tint flow=0,f;\n\tvis[x]=1;\n\tfor(int i=cur[x];i;i=e[i].nex){\n\t\tint to=e[i].adj; cur[x]=i;\n\t\tif(!vis[to]&&dep[x]+e[i].r==dep[to]&&\n\t\t(f=dfs(to,min(F,e[i].fw)))>0){\n\t\t\te[i].fw-=f;\n\t\t\te[i^1].fw+=f;\n\t\t\tflow+=f,F-=f;\n\t\t\tif(!F){\n\t\t\t\tvis[x]=0;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\treturn flow;\n}\nint main(){\n\tn=d(),m=d(),p=t=2*n+2,s=t-1;\n\tfor(int i=1,x;i<=n;i++){ //\u5982\u4e0a\u8bf4\u660e\u8fde\u8fb9\n\t\ta[i]=d(); Add(i+n,t,1,0); \n\t\tAdd(s,i,1,0),Add(s,i+n,1,a[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint x=d(),y=d(),z=d();\n\t\tif(x>y) swap(x,y);\n\t\tif(z<a[y]) Add(x,y+n,1,z);\n\t}\n\twhile(spfa()){ //\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\t\tint D=dfs(s,inf);\n\t\tfans+=D,cans+=D*dep[t];\n\t}\n\tprintf(\"%d\\n\",cans);\n\treturn 0;\n}\n```\n\u7f51\u7edc\u6d41\u9898\u91cd\u5728\u601d\u8003\u3002\n\n**\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u5feb\u4e3a\u535a\u4e3b\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6! !\n\n\n",
        "postTime": 1578318967,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "\u56de\u987e\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u7684\u89e3\u6cd5\uff1a\n\n\u5148\u5c06$n$\u4e2a\u70b9\u62c6\u70b9\u4e3a$i$\u548c$i'$\u3002\u7136\u540e\u7531\u6e90\u70b9\u5411\u6240\u6709\u7684$i$\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\uff0c\u518d\u7531\u6240\u6709\u7684$i'$\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9$u->v$\uff0c\u7531$u$\u5411$v'$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u540e\uff0c$n$\u51cf\u53bb\u6700\u5927\u6d41\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\u5462\uff1f\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u9762\u5176\u5b9e\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u6700\u5927\u6d41\u5b9e\u9645\u4e0a\u5c31\u662f\u6700\u5927\u5339\u914d\u6570\u3002\u5728\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\uff0c\u5339\u914d\u4e2d\u6bcf\u8fde\u4e00\u6761\u8fb9\uff0c\u8def\u5f84\u7684\u6570\u91cf\u5c31\u51cf$1$\uff0c\u6240\u4ee5\u5f97\u51fa$\\mbox{\u6700\u5c0f\u8def\u5f84\u8986\u76d6}=n-\\mbox{\u6700\u5927\u5339\u914d\u6570}$\u3002\n\n\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u601d\u60f3\u8fd0\u7528\u4e8e\u6b64\u9898\uff0c\u7528\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6c42\u89e3\u6b64\u9898\u3002\n\n\u8fd8\u662f\u4e00\u6837\uff0c\u5148\u62c6\u70b9\u3002\n\n1\u3001\u7531\u6e90\u70b9\u5411\u6240\u6709\u7684$i$\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\n\n2\u3001\u7531\u6240\u6709\u7684$i'$\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\n\n3\u3001\u5bf9\u4e8e\u6bcf\u6761\u8fb9$u->v$(\u5047\u8bbe$u<v$)\uff0c\u7531$u$\u5411$v'$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u8d39\u7528\u4e3a\u901a\u8fc7\u6b64\u6761\u8fb9\u7684\u8017\u65f6\u7684\u8fb9\u3002\n\n4\u3001\u7531\u6e90\u70b9\u5411\u6240\u6709\u7684$i'$\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u8d39\u7528\u4e3a$Ai$\u7684\u8fb9\u3002\n\n\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 3005, M = 6e4 + 5, INF = 0x3f3f3f3f;\nint n, m, ecnt = 1, nxt[M], adj[N], go[M], cap[M], cost[M], S, T, dis[N],\nque[M], len, a[N], Ans;\nbool vis[N], walk[N];\nvoid add_edge(int u, int v, int w, int x) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n    cap[ecnt] = w; cost[ecnt] = x;\n    nxt[++ecnt] = adj[v]; adj[v] = ecnt; go[ecnt] = u;\n    cap[ecnt] = 0; cost[ecnt] = -x;\n}\nbool spfa() {\n    int i; que[len = 1] = S;\n    memset(dis, INF, sizeof(dis)); dis[S] = 0;\n    memset(walk, 0, sizeof(walk));\n    for (i = 1; i <= len; i++) {\n        int u = que[i]; vis[u] = 0;\n        for (int e = adj[u], v; e; e = nxt[e])\n            if (cap[e] > 0 && dis[u] + cost[e] < dis[v = go[e]]) {\n                dis[v] = dis[u] + cost[e];\n                if (!vis[v]) vis[que[++len] = v] = 1;\n            }\n    }\n    return dis[T] < INF;\n}\nint dfs(int u, int flow) {\n    if (u == T) return Ans += dis[T] * flow, flow;\n    int res = 0, delta; walk[u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (cap[e] > 0 && !walk[v = go[e]] && dis[u] + cost[e] == dis[v]) {\n            delta = dfs(v, min(cap[e], flow - res));\n            if (delta) {\n                cap[e] -= delta; cap[e ^ 1] += delta;\n                res += delta; if (res == flow) break; \n            }\n        }\n    return res;\n}\nint solve() {\n    Ans = 0;\n    while (spfa()) dfs(S, INF);\n    return Ans;\n}\nint main() {\n    int i, x, y, z; n = read(); m = read(); S = 1; T = (n << 1) + 2;\n    for (i = 1; i <= n; i++) a[i] = read();\n    for (i = 1; i <= m; i++) {\n        x = read(); y = read(); z = read();\n        if (x > y) swap(x, y);\n        if (z < a[y]) add_edge(x + 1, y + n + 1, 1, z);\n    }\n    for (i = 1; i <= n; i++) add_edge(S, i + 1, 1, 0),\n        add_edge(i + n + 1, T, 1, 0), add_edge(S, i + n + 1, 1, a[i]);\n    printf(\"%d\\n\", solve());\n    return 0;\n}\n```",
        "postTime": 1503837905,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "\u8bf4\u4e00\u4e2a\u4e0e\u4f17\u4e0d\u540c\u7684\u5efa\u56fe\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u5047\u8bbe\u6240\u6709\u7684\u70b9\u90fd\u662f\u76f4\u63a5\u8df3\u8dc3\u8fc7\u53bb\u7684\uff0c\u6b64\u65f6\u4ee3\u4ef7\u662fsigma ai\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8d70\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9\u610f\u5473\u7740\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u8981\u4ed8\u51fa\u8fb9\u6743\u7684\u4ee3\u4ef7\uff0c\u4f46\u540c\u65f6**\u7ec8\u70b9\u5c31\u4e0d\u9700\u8981\u901a\u8fc7\u8df3\u8dc3\u5230\u8fbe\u4e86**\uff0c\u56e0\u6b64\u4f1a\u7701\u4e0b\u7ec8\u70b9\u70b9\u6743\u7684\u4ee3\u4ef7\u3002\n\n\u518d\u8003\u8651\u539f\u59cb\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u6bcf\u6761\u5339\u914d\u8fb9\u5bf9\u5e94\u539f\u56fe\u4e0a\u4e00\u6761\u9009\u4e2d\u7684\u8fb9\u3002\n\n\u800c\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e00\u5bf9\u5339\u914d\u7684\u7ec8\u70b9\u7684\u70b9\u6743\u662f\u4f1a\u7701\u4e0b\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5efa\u56fe\uff1a\n\n\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9i\u548ci'\uff0cs\u5411i\u8fde\u8fb9\uff0c\u5bb9\u91cf1\u8d39\u75280\uff0ci'\u5411t\u8fde\u8fb9\uff0c\u5bb9\u91cf1\u8d39\u7528-ai\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9(u,v)\uff0cu\u5411v'\u8fde\u8fb9\uff0c\u5bb9\u91cf1\u8d39\u7528\u4e3a\u8fb9\u6743\u3002\n\n\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u7528\u70b9\u6743\u548c\u51cf\u53bb\u8fd9\u5f20\u56fe\u7684**\u6700\u5c0f\u8d39\u7528\u6d41**(\u4e0d\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u5373\u5f53\u6c47\u70b9\u7684dis>=0\u65f6\u76f4\u63a5\u9000\u51fa)\u5373\u53ef\u3002\n\n\u4eb2\u6d4b\u8dd1\u5f97\u6bd4\u5176\u4ed6\u5efa\u56fe\u6cd5\u7565\u5feb\u4e00\u4e9b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define gc getchar()\n#define pc putchar\n#define li long long\ninline li read(){\n    li x = 0,y = 0,c = gc;\n    while(!isdigit(c)) y = c,c = gc;\n    while(isdigit(c)) x = (x << 1) + (x << 3) + (c ^ '0'),c = gc;\n    return y == '-' ? -x : x;\n}\ninline void print(li q){\n    if(q < 0) pc('-'),q = -q;\n    if(q >= 10) print(q / 10);\n    pc(q % 10 + '0');\n}\nint n,m,a[2010],s,g,h,t,q[200010];\nstruct edge{\n    int to,nxt,val,cst;\n}e[50010];\nint cnt = 1,fir[2010],dq[2010],dis[2010],ans;\nbool inq[2010];\ninline void ins(int u,int v,int w,int x){\n    e[++cnt].to = v;e[cnt].nxt = fir[u];fir[u] = cnt;e[cnt].val = w;e[cnt].cst = x;\n    e[++cnt].to = u;e[cnt].nxt = fir[v];fir[v] = cnt;e[cnt].val = 0;e[cnt].cst = -x;\n}\n#define inf 987654321\nbool bfs(){\n    int i,j;\n    h = t = 0;\n    for(i = 1;i <= g;++i) dis[i] = inf,inq[i] = 0;\n    dis[s] = 0;q[++t] = s;inq[s] = 1;\n    while(h < t){\n        j = q[++h];inq[j] = 0;\n        for(i = fir[j];i;i = e[i].nxt) if(e[i].val > 0){\n            if(dis[e[i].to] > dis[j] + e[i].cst){\n                dis[e[i].to] = dis[j] + e[i].cst;\n                if(!inq[e[i].to]){\n                    inq[e[i].to] = 1;\n                    q[++t] = e[i].to;\n                }\n            }\n        }\n    }\n    return dis[g] < 0;\n}\nbool vis[2010];\nint dfs(int q,int fl){\n    if(q == g) return fl;\n    vis[q] = 1;\n    int as = 0,tp;\n    for(int &i = dq[q];i;i = e[i].nxt) if(e[i].val > 0 && !vis[e[i].to] && dis[e[i].to] == dis[q] + e[i].cst){\n        tp = dfs(e[i].to,min(fl,e[i].val));\n        fl -= tp;as += tp;\n        e[i].val -= tp;e[i ^ 1].val += tp;\n        if(!fl){\n            vis[q] = 0;return as;\n        }\n    }\n    return as;\n}\nint wk(){\n    int as = 0,tp;\n    while(bfs()){\n        for(int i = 1;i <= g;++i) dq[i] = fir[i],vis[i] = 0;\n        while((tp = dfs(s,inf)) != 0) as += dis[g] * tp;\n    }\n    return as;\n}\nint main(){\n    int i,u,v,w;\n    n = read();m = read();\n    for(i = 1;i <= n;++i) a[i] = read(),ans += a[i];\n    s = n * 2 + 1;g = n * 2 + 2;\n    for(i = 1;i <= n;++i) ins(s,i,1,0),ins(i + n,g,1,-a[i]);\n    for(i = 1;i <= m;++i){\n        u = read();v = read();w = read();\n        if(u > v) swap(u,v);\n        ins(u,v + n,1,w);\n    }\n    print(ans + wk());\n    return 0;\n}\n```",
        "postTime": 1543894368,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41\u8d5b\u9ad8\uff01\uff01\uff01\n\n\u6700\u5927\u7684\u597d\u5904\u662f\u4e0d\u7528\u8111\u5b50\u5c31\u80fd\u60f3\u523023333\n\n\u4f46\u662f\u65f6\u7a7a\u90fd\u5927\u4e86\u4e0d\u5c11\n\n\u611f\u8c22\u51fa\u9898\u4eba\u7ed9\u4e862s\uff0c\u56e0\u4e3a\u6211\u6700\u6162\u70b9\u8dd1\u4e861s\u591a23333\n\n\u9996\u5148\u8981\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2ai1\u548ci2\uff0c\u6e90\u70b9\u8fdei1\uff0c\u8d39\u7528\u4e3a\u8df3\u8dc3\u7684\u8d39\u7528\uff1bi2\u8fde\u6c47\u70b9\uff0c\u8d39\u7528\u4e3a0\uff1bi1\u8fdei2\uff0c\u4e0a\u4e0b\u754c\u90fd\u4e3a1\uff1b\u5bf9\u4e8e\u8fb9i->j\uff0ci2\u8fdej1\uff0c\u8d39\u7528\u4e3a\u822a\u884c\u8d39\u7528\u3002\n\n\u6700\u540e\u8dd1\u4e2a\u6a21\u677f\n\n```\n//lgp2469\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int maxn=800+9;\nconst int maxm=15000+9;\n\nint n,m,s,t,S,T;\nstruct data{\n\tint to,next,val,cost;\n}edge[maxm<<2];\nint cnte,head[maxn<<1];\nvoid addedge(int a,int b,int c,int d){\n\tedge[cnte].to=b;\n\tedge[cnte].val=c;\n\tedge[cnte].cost=d;\n\tedge[cnte].next=head[a];\n\thead[a]=cnte++;\n}\n\nqueue<int> Q;\nbool inif[maxn<<1];\nint cost[maxn<<1],flow[maxn<<1],pre[maxn<<1];\nint bfs(){\n\twhile(!Q.empty()) Q.pop();\n\tmemset(inif,false,sizeof(inif));\n\tmemset(cost,0x3f,sizeof(cost));\n\tcost[S]=0;\n\tflow[S]=inf;\n\tQ.push(S);\n\tinif[S]=true;\n\twhile(!Q.empty()){\n\t\tint now=Q.front();Q.pop();\n\t\tinif[now]=false;\n\t\tfor(int i=head[now];i!=-1;i=edge[i].next){\n\t\t\tif(edge[i].val==0) continue;\n\t\t\tint to=edge[i].to;\n\t\t\tif(cost[to]>cost[now]+edge[i].cost){\n\t\t\t\tcost[to]=cost[now]+edge[i].cost;\n\t\t\t\tflow[to]=min(flow[now],edge[i].val);\n\t\t\t\tpre[to]=i;\n\t\t\t\tif(!inif[to]){\n\t\t\t\t\tQ.push(to);\n\t\t\t\t\tinif[to]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(cost[T]==inf) return -1;\n\tint alpha=flow[T],p=T;\n\twhile(p!=S){\n\t\tedge[pre[p]].val-=alpha;\n\t\tedge[pre[p]^1].val+=alpha;\n\t\tp=edge[pre[p]^1].to;\n\t}\n\treturn cost[T]*alpha;\n}\n\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d %d\",&n,&m);\n\ts=2*n+1,t=2*n+2;\n\tS=2*n+3,T=2*n+4;\n\taddedge(t,s,inf,0),addedge(s,t,0,0);\n\tfor(int i=1;i<=n;i++){\n\t\tint in;scanf(\"%d\",&in);\n\t\taddedge(s,2*i-1,1,in),addedge(2*i-1,s,0,-in);\n\t\taddedge(2*i,t,1,0),addedge(t,2*i,0,0);\n\t\taddedge(S,2*i,1,0),addedge(2*i,S,0,0);\n\t\taddedge(2*i-1,T,1,0),addedge(T,2*i-1,0,0);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,d;scanf(\"%d %d %d\",&a,&b,&d);\n\t\tif(a>b) swap(a,b);\n\t\taddedge(2*a,2*b-1,1,d),addedge(2*b-1,2*a,0,-d);\n\t}\n\tint ans=0;\n\twhile(1){\n\t\tint ret=bfs();\n\t\tif(ret==-1) break;\n\t\tans+=ret;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1526989316,
        "uid": 33304,
        "name": "\u53f8\u9a6c\u667a\u6cfd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "## \u6700\u5c0f\u4ee3\u4ef7\u8def\u5f84\u8986\u76d6\n\n\u9898\u610f\uff1a\u7ed9\u4e00\u5f20 **DAG** ,\u8fb9\u6709\u8fb9\u6743\uff0c\u4ece\u6bcf\u4e2a\u70b9\u51fa\u53d1\u6709\u70b9\u6743\uff08\u9014\u4e2d\u7ecf\u8fc7\u8282\u70b9\u6ca1\u6709\u70b9\u6743\u7684\u4ee3\u4ef7\uff09\u3002\u6c42\u6700\u5c0f\u4ee3\u4ef7\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u90fd\u88ab\u7ecf\u8fc7\u3002\n\n**\u8d39\u7528\u6d41\u3002**\n\n\u9996\u5148\u4ee4\u7b54\u6848 $=\\sum$ \u70b9\u6743\uff0c\u4ee3\u8868\u6bcf\u4e2a\u70b9\u81ea\u5df1\u6784\u6210\u4e00\u6761\u8def\u5f84\uff08\u4e0d\u7ecf\u8fc7\u8fb9\uff09\u3002\n\n\u5efa\u56fe\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5de6\u90e8\u70b9A\u548c\u53f3\u90e8\u70b9B\uff0c\u5982\u679c\u5728\u539f\u56fe\u4e0a\u6709\u8fb9 $x->y$ ,\u5c31\u4ece $xA$ \u5411\u8fde\u4e00\u6761 $yB$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a**(\u8fb9\u6743-y\u70b9\u6743) ** \u7684\u8fb9\uff0c\u4ee3\u8868\u53ef\u4ee5\u8d70\u8fd9\u6761\u8fb9\uff0c\u4f7f\u5f97 $x$ \u548c $y$ \u5904\u4e8e\u540c\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u5c31\u4f1a\u6d88\u53bb $y$ \u70b9\u6743\u7684\u4ee3\u4ef7\uff0c\u52a0\u4e0a\u8fb9\u7684\u4ee3\u4ef7\u3002\n\n\u7136\u540e\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\u5982\u679c\u6700\u77ed\u8def\u4e3a\u8d1f\u624d\u66f4\u65b0\u7b54\u6848\uff0c\u5426\u5219\u4e0d\u66f4\u65b0\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 2005\n#define M 50005\n#define inf 0x3f3f3f3f\nusing namespace std;\n\ninline void rd(int &x){\n    x=0;char ch=0;int w=0;\n    while(!isdigit(ch)) ch=getchar(),w|=ch=='-';\n    while( isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    x=w?-x:x;\n}\n\nint n,m,s,t,ans;\nint head[N],cnt=1;\nint mn[N],d[N],a[N],pre[N],v[N];\nstruct nd{int nxt,to,v,c;}e[M];\n#define For(x) for(int y,i=head[x];(y=e[i].to);i=e[i].nxt)\n\ninline void add(int x,int y,int v,int c){\n    e[++cnt]=(nd){head[x],y,v, c};head[x]=cnt;\n    e[++cnt]=(nd){head[y],x,0,-c};head[y]=cnt;\n}\n\nbool SPFA()\n{\n    memset(d,0x3f,sizeof d);\n    queue<int> q;q.push(s);d[s]=0;mn[s]=inf;\n    while(!q.empty()){\n        int x=q.front();q.pop();v[x]=0;\n        For(x) if(e[i].v&&d[y]>d[x]+e[i].c)\n        {\n            pre[y]=i; d[y]=d[x]+e[i].c;\n            mn[y]=min(mn[x],e[i].v);\n            if(!v[y]) v[y]=1,q.push(y);\n        }\n    }\n    return d[t]!=inf;\n}\nvoid up()\n{\n    if(d[t]<0) ans+=d[t]*mn[t];\n    for(int i,x=t;x!=s;x=e[i^1].to)\n        i=pre[x],e[i].v-=mn[t],e[i^1].v+=mn[t];\n}\nvoid build()\n{\n    s=N-1;t=N-2;\n    for(int i=1;i<=n;i++)\n        rd(a[i]),ans+=a[i],add(s,i,1,0);\n    for(int x,y,c,i=1;i<=m;i++){\n        rd(x),rd(y),rd(c);\n        if(x>y) swap(x,y);\n        add(x,y+n,1,c-a[y]);\n    }\n    for(int i=1;i<=n;i++)\n        add(i+n,t,1,0);\n}\nsigned main(){\n    rd(n);rd(m);build();\n    while(SPFA()) up();\n    cout<<ans;\n}\n```",
        "postTime": 1544599531,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[SDOI2010]\u661f\u9645\u7ade\u901f\u2014\u2014\u8d39\u7528\u6d41"
    },
    {
        "content": "# \u4e00\u9053\u7f51\u7edc\u6d41\u795e\u4ed9\u9898\n[~~\u66f4\u597d~~\u7684\u9605\u8bfb\u4f53\u9a8c](https://chen-jia-liang.gitee.io/blog/2020/07/15/%E9%A2%98%E8%A7%A3-P2469-%E3%80%90-SDOI2010-%E6%98%9F%E9%99%85%E7%AB%9E%E9%80%9F%E3%80%91/)\n## \u9898\u610f\n\u6709\u4e00\u5f20$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u56fe\uff0c\u4ece\u4e00\u4e2a\u4e0d\u5c5e\u4e8e$n$\u4e2a\u70b9\u7684\u70b9\u51fa\u53d1\uff0c\u53ef\u4ee5\u7528\u4e00\u5b9a\u65f6\u95f4\u901a\u8fc7\u4e00\u6761\u8fb9\uff0c\u4e5f\u53ef\u4ee5\u7528$a_i$\u7684\u65f6\u95f4\u5230\u70b9$i$\uff0c\u6c42\u904d\u5386\u6240\u6709\u70b9\u6070\u597d\u4e00\u6b21\u7684\u65f6\u95f4\n## \u9898\u89e3\n\u9996\u5148\uff0c\u770b\u5230**\u6070\u597d\u4e00\u6b21**\uff0c\u6211\u4eec\u5fc5\u7136\u60f3\u5230**\u62c6\u70b9**\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5148\u628a\u70b9$i$\u62c6\u6210$i_x$\u4e0e$i_y$\u3002$i_y$\u8fde\u5411\u6c47\u70b9\uff0c\u6d41\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$0$\uff0c\u8fd9\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\u3002\u73b0\u5728\uff0c\u6211\u4eec\u7684\u95ee\u9898\u662f\u5982\u4f55\u5904\u7406$a_i$\u4e0e\u8fb9\u7684\u5173\u7cfb\u3002\n\n\u6211\u4eec\u6765\u8003\u8651$i_y$\u53ef\u4ee5\u4ece\u54ea\u91cc\u6765\u3002\u663e\u7136\uff0c\u5176\uff1a\n1. \u4ece\u5176\u5b83\u70b9\u7ecf\u8fc7**\u661f\u9645\u822a\u8def**\u8fc7\u6765\n2. \u4f7f\u7528**\u80fd\u529b\u7206\u53d1\u6a21\u5f0f**\u4f7f\u7528$a_i$\u7684\u4ee3\u4ef7\u98de\u8fc7\u6765\u3002\n\n\u5bf9\u4e8e$\\;1$\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u8d77\u70b9\u7684$\\ _x$\u8fde\u5230\u5f53\u524d\u70b9\u7684$\\ _y$\uff0c\u6d41\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$w$\n\n\u5bf9\u4e8e$\\; 2$\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6e90\u70b9\u5411\u4ed6\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$a_i$\u7684\u8fb9\n\n#### \u90a3\u4e48$i_x$\u7684\u6d41\u91cf\u53c8\u662f\u4ece\u54ea\u6765\u7684\u5462\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u6211\u4eec\u53ea\u8bbf\u95ee\u4e00\u6b21\uff0c\u56e0\u6b64\u53ea\u8981\u4ece\u6e90\u70b9\u5411\u6bcf\u4e2a\u5165\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\n## \u4ee3\u7801\n```cpp\n#pragma optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){\n\tx=0;char c=getchar();bool f=false;\n\tfor(;!isdigit(c);c=getchar())f!=c=='-';\n\tfor(;isdigit(c);c=getchar())x=x*10+c-'0';\n\tif(f)x=-x;\n}\ntemplate<typename T ,typename ...Arg>\ninline void read(T &x,Arg &...args){\n\tread(x);read(args...);\n}\ntemplate<typename T>\ninline void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\nconst int maxn=100005;\nconst int maxe=100005;\nstruct Graph{\n\tint s,t;\n\tint dis[maxn],pre[maxn],lste[maxn],flow[maxn];\n\tbool inq[maxn];\n\tstruct node{\n\t\tint v,w,cost,nxt;\n\t\tnode(int _v=0,int _w=0,int _c=0,int _n=0){v=_v,w=_w,cost=_c,nxt=_n;}\n\t}e[maxe];\n\tint tot,head[maxn];\n\tvoid init(int _s,int _t){\n\t\tmemset(head,0,sizeof head);\n\t\ttot=1;s=_s,t=_t;\n\t}\n\tinline void add(int u,int v,int w,int c){\n\t\te[++tot]=node(v,w,c,head[u]);head[u]=tot;\n\t\te[++tot]=node(u,0,-c,head[v]);head[v]=tot;\n\t}\n\tbool spfa(){\n\t\tqueue<int>q;\n\t\tmemset(dis,63,sizeof dis);\n\t\tmemset(flow,63,sizeof flow);\n\t\tmemset(inq,0,sizeof inq);\n\t\tdis[s]=0,pre[t]=-1;q.push(s);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();q.pop();inq[u]=0;\n\t\t\t#define v e[i].v\n\t\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\t\tif(e[i].w>0&&dis[v]>dis[u]+e[i].cost){\n\t\t\t\t\tdis[v]=dis[u]+e[i].cost;\n\t\t\t\t\tpre[v]=u,lste[v]=i;//lste \u8868\u793a\u9876\u70b9v\u662f\u7531\u54ea\u6761\u8fb9\u8fc7\u6765\u7684\n\t\t\t\t\tflow[v]=min(flow[u],e[i].w);\n\t\t\t\t\tif(!inq[v])inq[v]=1,q.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t\t#undef v\n\t\t}\n\t\treturn pre[t]!=-1;\n\t}\n\tpair<int,int> mcmf(){\n\t\tint mincost=0,maxflow=0;\n\t\twhile(spfa()){\n\t\t\tint u=t;\n\t\t\tmaxflow+=flow[t],mincost+=flow[t]*dis[t];\n\t\t\twhile(u!=s){\n\t\t\t\tint E=lste[u];\n\t\t\t\te[E].w-=flow[t],e[E^1].w+=flow[t];\n\t\t\t\tu=pre[u];\n\t\t\t}\n\t\t}\n\t\treturn make_pair(mincost,maxflow);\n\t}\n}G;\nint n,m;\nint a,u,v,w;\nsigned main(){\n\tread(n,m);\n\tG.init(0,n+n+1);\n\tfor(int i=1;i<=n;i++){\n\t\tread(a);\n\t\tG.add(i+n,G.t,1,0);\n\t\tG.add(G.s,i,1,0);\n\t\tG.add(G.s,i+n,1,a);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tread(u,v,w);if(u>v)swap(u,v);\n\t\tG.add(u,v+n,1,w);\n\t}\n\twrite(G.mcmf().first);\n}\n```",
        "postTime": 1594791935,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "# [\u9898\u9762](https://www.luogu.org/problemnew/show/P2469)\n~~[\u8fd9\u91cc\u6709\u60ca\u559c(\u63a8\u9500\u535a\u5ba2ing)](https://www.cnblogs.com/ztlztl/p/10568317.html)~~\n\n\u5de8\u4f6c\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u8fd9\u662f\u6700\u5c0f\u8def\u5f84\u8986\u76d6, \u6211\u8fd9\u4e2a\u849f\u84bb\u8fd8\u662f\u592a\u5f31\u4e86...\n\n\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8df3\u8dc3\u503c\u4e3a\u70b9\u6743w[i], \u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e3a\u8fb9\u6743ww\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9, \u5728\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u4e2d, \u5047\u8bbe\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u6761\u8def\u5f84, \u5373\u6bcf\u4e2a\u70b9\u90fd\u7531\u80fd\u529b\u7206\u53d1\u5f97\u5230, \u90a3\u4e48\u6700\u521d\u7684\u7b54\u6848\u4fbf\u662f$ans$ = $\\sum_{ i = 1}^{n}$, \u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fde\u63a5u\u548cv\u7684\u8fb9, \u53ef\u4ee5\u770b\u505a\u4e0d\u4f7f\u7528\u80fd\u529b\u7206\u53d1\u800c\u4eceu\u5f80v\u8d70, \u90a3\u4e48\u6211\u4eec\u5c31\u51cf\u5c11\u4e86\u70b9v\u7684\u70b9\u6743, \u52a0\u4e0a\u4e86\u8fd9\u4e00\u6761\u8fb9\u7684\u4ee3\u4ef7, \u5373\u4ece$min(u, v)$\u5411$max(u, v)$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1, \u8d39\u7528\u4e3a$ww - w[v]$, \u90a3\u4e48\u53ea\u8981\u6bcf\u6b21\u589e\u5e7f\u627e\u5230\u4e00\u6761\u8d39\u7528\u4e3a\u8d1f\u7684\u8fb9\u5c31\u53ef\u4ee5\u51cf\u5c11\u603b\u65f6\u95f4, \u5373\u5f53$d[T]$\u5c0f\u4e8e0\u65f6\u5c31\u53ef\u4ee5\u5c06$ans += d[T]$, \u6240\u4ee5, \u53ea\u8981\u5f53\u6b64\u6b21\u589e\u5e7f\u65e0\u6cd5\u5230\u8fbeT\u6216\u8005$d[T]$ > 0\u65f6\u5c31\u53ef\u4ee5return 0\u4e86.\n\n**\u5177\u4f53\u4ee3\u7801**\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#define N 5005\nusing namespace std;\n\nint n, m, S, T, head[N], cnt = 1, p[N], vis[N], w[N];\nstruct node\n{\n\tint from, to, next;\n\tlong long flow, cost; \n} edge[100005];\nlong long a[N], d[N], ans; \n\ninline int read()\n{\n\tint x = 0, w = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') { if (c == '-') w = -1; c = getchar(); }\n\twhile(c >= '0' && c <= '9') { x = x * 10 + c - '0'; c = getchar(); }\n\treturn x * w;\n}\n\ninline void add(int u, int v, int w, int cost)\n{\n\tedge[++cnt] = { u, v, head[u], w, cost }; head[u] = cnt;\n\tedge[++cnt] = { v, u, head[v], 0, -cost }; head[v] = cnt; \n}\n\nbool SPFA()\n{\n\tmemset(d, 0x3f, sizeof(d)); memset(a, 0x3f, sizeof(a));\n\tqueue<int> q; q.push(S); d[S] = 0;\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front(); q.pop(); vis[u] = 0; \n\t\tfor(int i = head[u]; i; i = edge[i].next)\n\t\t{\n\t\t\tint v = edge[i].to;\n\t\t\tif(d[v] > d[u] + edge[i].cost && edge[i].flow > 0)\n\t\t\t{\n\t\t\t\td[v] = d[u] + edge[i].cost; a[v] = min(a[u], edge[i].flow);\n\t\t\t\tp[v] = i; if(!vis[v]) { vis[v] = 1; q.push(v); }\n\t\t\t}\n\t\t}\n\t}\n\tif(d[T] == d[0] || d[T] > 0) return 0;\n\tif(d[T] < 0) ans += (d[T] * a[T]);\n\tfor(int i = T; i != S; i = edge[p[i]].from)\n\t{\n\t\tedge[p[i]].flow -= a[T]; edge[p[i] ^ 1].flow += a[T]; \n\t}\n\treturn 1; \n}\n\nint main()\n{\n\tn = read(); m = read(); S = 2 * n + 1; T = S + 1; \n\tfor(int i = 1; i <= n; i++) { w[i] = read(); ans += w[i]; add(S, i, 1, 0); }\n\tfor(int i = 1; i <= n; i++) add(i + n, T, 1, 0);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u = read(), v = read(), ww = read();\n\t\tif(u > v) swap(u, v);\n\t\tadd(u, v + n, 1, ww - w[v]); \n\t}\n\twhile(SPFA());\n\tprintf(\"%lld\\n\", ans); \n\treturn 0;\n}\n\n\n```\n\n",
        "postTime": 1553092957,
        "uid": 160323,
        "name": "mgzc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u5f88\u7ecf\u5178\uff0c\u5b83\u548c\u4e24\u4e2a\u6a21\u578b\u6709\u5173\u7cfb\uff0c\u5728\u6b64\u6211\u5199\u4e00\u7bc7\u9898\u89e3\u6765\u9610\u8ff0\u3002\n\n1. \u8bfb\u5b8c\u9898\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u65e0\u6e90\u6c47\u4e0a\u4e0b\u754c\u53ef\u884c\u6d41\uff0c\u55ef \u518d\u52a0\u4e0a\u6700\u5c0f\u8d39\u7528\u6d41\u3002\n\n2. \u8d39\u7528\u6d41 \u8fd8\u662f \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u8d39\u7528\u6d41\u3002\n\n\u8fd9\u4e24\u79cd\u601d\u60f3\u65e0\u7591\u90fd\u662f\u57fa\u4e8e \u8981\u628a\u6574\u5f20\u56fe\u4fbf\u5229\u4e00\u904d\u4e14\u8d39\u7528\u6700\u5c0f\u8fd9\u4e2a\u601d\u60f3\u5efa\u7acb\u7684\u3002\n\u4e5f\u5c31\u662f\u8bf4\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u770b 2\u662f1\u7684\u5b50\u96c6\u3002\n\n\u8fd9\u4e5f\u610f\u5473\u7740\u800c\u4e14\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\u4e86\u89e3\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u76f4\u63a5\u901a\u8fc7 \u6700\u5c0f\u70b9\u8986\u76d6\u7684\u6a21\u578b\u52a0\u4e0a\u8d39\u7528\u5373\u53ef\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\u7684\u6c42\u89e3\u3002\n\n\u5f53\u7136\u5bf9\u4e8e\u5f80\u540e\u7684\u5b66\u4e60 \u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u4e5f\u662f\u5fc5\u8981\u7684\u3002\u4f46\u662f\u672c\u4eba\u5b66\u4e60\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u65f6\u95f4\u8f83\u77ed\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bb2\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u7f51\u7edc\u6d41\u3002\n\n\u9898\u89e3: \u6ee1\u8db3\u9898\u4e2d\u7684\u6761\u4ef6 \u6bcf\u4e2a\u70b9\u90fd\u7ecf\u8fc7\u4e00\u6b21\u4e14\u8d39\u7528\u6700\u5c0f\uff0c\u90a3\u4e48\u663e\u7136\u7684\u662f\u6211\u4eec\u53ef\u4ee5\u4ee5\u6700\u5927\u6d41\u6765\u9650\u5236\u6d41\u91cf \u5408\u7406\u5efa\u56fe\u8ba9\u5176\u4e00\u5b9a\u80fd\u8dd1\u51fa\u6700\u5927\u6d41 \u4e14\u6b64\u65f6 \u52a0\u4e0a\u8fb9\u6743\u5373\u53ef\u6c42\u51fa\u6700\u5c0f\u8d39\u7528\u3002\n\n\u5efa\u56fe\uff1a\u6bcf\u4e2a\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u6240\u4ee5\u9700\u8981\u62c6\u4e00\u4e0b\u70b9 u,u1 u1\u8fde\u5411\u6c47\u70b9 \u8868\u793a\u8fd9\u4e2a\u70b9\u8dd1\u5230\u4e86\u3002\n\u6211\u4eec\u901a\u8fc7 u1\u8fde\u5411\u6c47\u70b9\u6d41\u91cf\u4e3a1\u6765\u9650\u5236\u3002\n\n\u63a5\u4e0b\u6765\u5f00\u59cb\u5f80\u56fe\u4e2d\u52a0\u5165\u51b3\u7b56\uff0c\u9996\u5148\u6211\u4eec\u4ece\u54ea\u4e2a\u5730\u65b9\u5f00\u59cb\u90fd\u662f\u53ef\u4ee5\u7684\u6240\u4ee5S\u5411\u5404\u4e2a\u70b9\u76841\u8282\u70b9\u8fde\u8fb9 \u6d41\u91cf1 \u8d39\u7528\u4e3a\u8df3\u8dc3\u65f6\u95f4 \u8fd9\u4e2a\u51b3\u7b56\u8868\u793a\u4e00\u5f00\u59cb\u6211\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\uff0c\u601d\u8003\u4e00\u4e0b\u5f00\u59cb\u4e86\u7136\u540e\u5462 \u76f4\u63a5\u6c47\u5230\u6c47\u70b9\u53d1\u73b0\u8fd9\u6761\u6d41\u6d88\u5931\u4e86\uff0c\u4f46\u662f\u8fd9\u6d41\u8fd8\u5b58\u5728\u7740\u5176\u4ef7\u503c\uff0c\u6211\u4eec\u4ece\u6e90\u70b9\u5411\u5404\u4e2a\u8282\u70b9\u76840\u8282\u70b9\u8d39\u7528\u4e3a0\u6d41\u91cf\u4e3a1\uff0c\u8868\u793a\u521a\u521a\u90a3\u6761\u6d88\u5931\u7684\u6d41\u7684\u91cd\u73b0 \u5f53\u524d\u70b9\u5411\u4e0b\u4e00\u4e2a\u70b9\u76841\u70b9\u8fde\u8fb9\u8d39\u7528\u4e3a\u666e\u901a\u98de\u884c\u65f6\u95f4\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u6d41\u5f88\u6709\u53ef\u80fd\u4f1a\u518d\u6b21\u6d88\u5931 \u90a3\u65e0\u59a8\u6211\u4eec\u6839\u8282\u70b9\u5411\u6bcf\u4e2a\u8282\u70b9\u90fd\u8fde\u4e0a\u8ff0\u7684\u8fb9\u5373\u53ef\u89e3\u51b3\u95ee\u9898\u3002\n\n\u4e0a\u8ff0\u5c31\u662f\u6211\u5bf9\u8fd9\u9898\u7684\u5168\u90e8\u601d\u8003\uff0c\u5982\u679c\u89c9\u5f97\u5f88\u8ff7\u5f97\u8bdd\u4e0d\u59a8\u53bb\u5b66\u4e60\u4e00\u4e0b\u4e0a\u4e0b\u754c\u53ef\u884c\u6d41\u3002\n\n```cpp\n//#include<bits/stdc++.h>\n#include<iomanip>\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<deque>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<stack>\n#include<algorithm>\n#include<vector>\n#include<cctype>\n#include<utility>\n#include<set>\n#include<bitset>\n#include<map>\n#define INF 1000000000\n#define ll long long\n#define min(x,y) (x>y?y:x)\n#define max(x,y) (x>y?x:y)\n#define RI register long long\n#define up(p,i,n) for(int i=p;i<=n;++i)\n#define db double\nusing namespace std;\nchar buf[1<<15],*fs,*ft;\ninline char getc()\n{\n    return (fs==ft&&(ft=(fs=buf)+fread(buf,1,1<<15,stdin),fs==ft))?0:*fs++;\n}\ninline int read()\n{\n    int x=0,f=1;char ch=getc();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getc();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n    return x*f;\n}\nconst int MAXN=810,maxn=40010;\nint n,m,S,T,sum,maxflow,len=1,t,h;\nint lin[MAXN<<1],ver[maxn],e[maxn],nex[maxn],e1[maxn];\nint q[maxn],dis[maxn],in[maxn],vis[maxn],pre[maxn];\ninline void add(int x,int y,int z,int z1)\n{\n    ver[++len]=y;nex[len]=lin[x];lin[x]=len;e[len]=z;e1[len]=z1;\n    ver[++len]=x;nex[len]=lin[y];lin[y]=len;e[len]=0;e1[len]=-z1;\n}\ninline int spfa()//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n{\n    for(int i=1;i<=T;++i)dis[i]=INF;\n    t=h=0;dis[S]=0;q[++t]=S;vis[S]=1;in[S]=INF;\n    while(h++<t)\n    {\n        int x=q[h];vis[x]=0;\n        for(int i=lin[x];i;i=nex[i])\n        {\n            int tn=ver[i];\n            if(!e[i])continue;\n            if(dis[tn]>dis[x]+e1[i])\n            {\n                dis[tn]=dis[x]+e1[i];\n                in[tn]=min(in[x],e[i]);\n                pre[tn]=i;\n                if(!vis[tn])q[++t]=tn,vis[tn]=1;\n            }\n        }\n    }\n    return dis[T]!=INF;\n}\ninline void EK()\n{\n    while(spfa())\n    {\n        int x=T,i=pre[x];\n        maxflow+=in[T];\n        sum+=in[T]*dis[T];\n        while(x!=S)\n        {\n            e[i]-=in[T];\n            e[i^1]+=in[T];\n            x=ver[i^1];i=pre[x];\n        }\n    }\n}\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    n=read();m=read();\n    S=n<<1|1;T=S+1;\n    for(int i=1;i<=n;++i)\n    {\n        int x=read();\n        add(S,i,1,0);//\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u8dd1\n        add(S,i+n,1,x);//\u8fde\u5411u1 \u76f4\u63a5\u8df3\u8dc3\n        add(i+n,T,1,0);//\u8fde\u5411\u6c47\u70b9\n    }\n    for(int i=1;i<=m;++i)\n    {\n        int x,y,z;\n        x=read();y=read();z=read();\n        if(x>y)swap(x,y);\n        add(x,y+n,1,z);//\u6bcf\u4e2a\u70b9\u8fde\u5411\u5176\u80fd\u8dd1\u5230\u7684\u70b9\n    }\n    EK();\n    printf(\"%d\\n\",sum);\n    return 0;\n}\n\n```\n\u6b63\u786e\u6027\u4e0d\u8a00\u800c\u55bb \u5b8c\u7ed3\u6492\u82b1~",
        "postTime": 1562048451,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u770b\u662f\u4e2a\u56fe\u8bba\u9898//\u5e9f\u8bdd\u56fe\u90fd\u5efa\u597d\u4e86\u80fd\u4e0d\u662f\u56fe\u8bba\u9898\u5417\n\n\u518d\u7ecf\u8fc7\u5206\u6790\u53d1\u73b0\u4e0d\u80fd\u8dd1\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u8981\u6c42\u662f\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u4e00\u6b21\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u5e94\u8be5\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u7684\u9898\u76ee\u3002\n\n\u5bf9\u4e8e\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u4e00\u6b21\uff0c\u548c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6bd4\u8f83\u76f8\u4f3c\uff0c\u4f46\u662f\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u8fb9\u6743\u3002\n\n\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n\u601d\u8def\u548c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7c7b\u4f3c\uff0c\u5148\u8fdb\u884c\u62c6\u70b9\uff0c\u628a\u6bcf\u4e2a\u70b9u\u62c6\u6210u\u548cu\u2018\u3002\n\n\u5bf9\u4e8e\u8df3\u8dc3\u6a21\u5f0f\u3010\u5fd8\u4e86\u53eb\u4ec0\u4e48\u6a21\u5f0f\u4e86\u3011\u5c31\u4ece\u6e90\u70b9\u5f80u'\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u8fb9\u6743\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u661f\u7403\u95f4\u7684\u822a\u9053(u,v)\u3010\u5047\u8bbeu<v\u3011\u5c31\u4eceu\u5f80v'\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u8fb9\u6743\u7684\u8fb9\u3002\n\n\u4ece\u6e90\u70b9\u5f80\u6bcf\u4e00\u4e2a\u70b9u\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u4ece\u6bcf\u4e2a\u70b9u\u2019\u5f80\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u90fd\u80fd\u88ab\u7ecf\u8fc7\u3002\u6d41\u91cf\u4e3a1\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u7ecf\u8fc7\u4e00\u6b21\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u8f93\u51fa\u8d39\u7528\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u4e0d\u4f1a\u7528dij\u7684\u8d39\u7528\u6d41//\u542c\u8bf4\u8dd1\u7684\u633a\u5feb\uff1f\n\n\u4e8e\u662f\u5c31\u7528\u4e86\u57fa\u7840\u7684spfa\u8dd1\u8d39\u7528\u6d41\u3002\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint head[1605],nxt[1000005],point[1000005],remain[1000005],w[1000005],sum;\nint dis[1605],exist[1605],lastedge[1605];\nint n,m,a,b,c;\n#define min(a,b) a<b?a:b\nconst int inf=1e9+7;\nqueue<int>q;\nvoid add(int x,int y,int flow,int cost)\n{\n    ++sum;nxt[sum]=head[x];head[x]=sum;point[sum]=y;remain[sum]=flow;w[sum]=cost;\n    ++sum;nxt[sum]=head[y];head[y]=sum;point[sum]=x;remain[sum]=0;w[sum]=-cost; \n}\nint addflow(int s,int t)\n{\n    int now=t,flow=inf;\n    while(now!=s)\n    {\n        flow=min(flow,remain[lastedge[now]]);\n        now=point[lastedge[now]^1];\n    }\n    now=t;\n    while(now!=s)\n    {\n        remain[lastedge[now]]-=flow;\n        remain[lastedge[now]^1]+=flow;\n        now=point[lastedge[now]^1];\n    }\n    return flow;\n}\nbool spfa(int s,int t,int &flow,int &cost)\n{\n    memset(dis,0x7f,sizeof(dis));\n    dis[s]=0;\n    exist[s]=1;\n    q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();\n        exist[now]=0;\n        for(int tmp=head[now];tmp!=-1;tmp=nxt[tmp])\n        {\n            int u=point[tmp],v=w[tmp];\n            if(remain[tmp]&&dis[u]>dis[now]+v)\n            {\n                dis[u]=dis[now]+v;\n                lastedge[u]=tmp;\n                if(!exist[u])\n                {\n                    q.push(u);\n                    exist[u]=1;\n                }\n            }\n        }\n    }\n    if(dis[t]>inf)\n    return 0;\n    int add=addflow(s,t);\n    flow+=add;\n    cost+=add*dis[t];\n    return 1;\n}\nvoid mfmc(int s,int t,int &flow,int &cost)\n{\n    flow=cost=0;\n    while(spfa(s,t,flow,cost));\n    return;\n}\nvoid swap(int &x,int &y)\n{\n    x^=y,y^=x,x^=y;\n}\nint main()\n{\n    sum=-1;\n    memset(nxt,-1,sizeof(nxt));\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a);\n        add(0,i+n,1,a);\n        add(0,i,1,0);\n        add(i+n,n<<1|1,1,0);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        if(a>b) swap(a,b);\n        add(a,b+n,1,c);\n    }\n    int maxflow,mincost;\n    mfmc(0,n<<1|1,maxflow,mincost);\n    printf(\"%d\",mincost);\n} \n```\nPS\uff1a\u8fd9\u9053\u9898\u6269\u5927\u4e86\u65f6\u9650\uff0c\u8981\u4e0d\u7136\u666e\u901a\u7684spfa\u8d39\u7528\u6d41\u4f1a\u88ab\u5361\u6700\u540e\u4e24\u4e2a\u70b9\u256e(\u256f\u25bd\u2570)\u256d\n\u8fd8\u597d\u6539\u65f6\u9650\u4e8623333\n",
        "postTime": 1490511735,
        "uid": 17828,
        "name": "revenger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "**\u7f51\u7edc\u6d41\u7684\u9898\uff0c\u96be\u70b9\u57fa\u672c\u5728\u4e8e\u5efa\u56fe\uff0c\n\u6b64\u9898\u7684\u5efa\u56fe\u65b9\u6cd5\u4e3a\u5148\u5c06\u8fd9n\u4e2a\u70b9\u62c6\u4e3a\u4e24\u90e8\u5206\u3002**\n\n1.\u7531\u6e90\u70b9\u5411\u7b2c\u4e00\u90e8\u5206\u70b9\u8fde\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u96f6\u7684\u70b9\u3002\n \n2.\u7531\u7b2c\u4e8c\u90e8\u5206\u70b9\u5411\u6c47\u8fde\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u96f6\u7684\u70b9\u3002\n \n3.\u7531\u7b2c\u4e00\u90e8\u5206\u70b9\u5411\u7b2c\u4e8c\u90e8\u5206\u70b9\u8fde\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u8017\u65f6\u3002\n\n4.\u6e90\u70b9\u5411\u7b2c\u4e8c\u90e8\u5206\u7684\u70b9\u8fde\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u822a\u884c\u65f6\u95f4\u3002\n\n5.\u6700\u540e\u8dd1\u4e00\u8fb9\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002 \n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream> \n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define N 2610\n#define M 35010\nint ver[M],nxt[M],head[N],tot=1,incf[M],edge[M],cost[M];\nint m,n,d[N],s=1,t,pre[N],maxflow,ans;\nbool v[N];\nvoid add(int x,int y,int z,int c){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\uff1b \n\tver[++tot]=y;//\u8bb0\u5f55\u7ec8\u70b9 \uff1b \n\tedge[tot]=z;//\u8bb0\u5f55\u521d\u59cb\u6d41\u91cf\uff1b \n\tcost[tot]=c;//\u8bb0\u5f55\u5355\u4f4d\u8d39\u7528\uff1b \n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nbool spfa(){\n\tqueue<int>q;\n\tmemset(d,0x3f,sizeof(d));//\u8d4b\u4e3a\u6700\u5927\u503c\uff1b\u56e0\u4e3a\u6b64\u9898\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff1b \n\tmemset(v,0,sizeof(v));\n\tq.push(s),d[s]=0;v[s]=1;\t//\u7528spfa\u6c42\u6700\u77ed\u8def\uff1b \n\tincf[s]=1<<30;//\u589e\u5e7f\u8def\u4e0a\u5404\u8fb9\u7684\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf\uff1b \n\twhile(q.size()){\n\t\tint x=q.front();\n\t\tv[x]=0;//\u8bb0\u5f97\u6e05\u96f6\uff1b\u5426\u5219\u4f1a\u8d85\u65f6\uff1b \n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=nxt[i]){\n\t\t\tif(!edge[i])continue;//\u5269\u4f59\u5bb9\u91cf\u4e3a0\uff0c\u4e0d\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d \uff0c\u4e0d\u7528\u8fdb\u884c\u904d\u5386\uff1b \n\t\t\tint y=ver[i];\n\t\t\tif(d[y]>d[x]+cost[i]){\n\t\t\t\td[y]=d[x]+cost[i];\n\t\t\t\tincf[y]=min(incf[x],edge[i]);\n\t\t\t\tpre[y]=i;//\u8bb0\u5f55\u524d\u9a71\uff0c\u4fbf\u4e8e\u627e\u5230\u6700\u77ed\u8def\u7684\u5b9e\u9645\u65b9\u6848\uff1b \n\t\t\t\tif(!v[y])v[y]=1,q.push(y);\n\t\t\t}\n\t\t}\n\t}\n\tif(d[t]==d[0])return false;//\u82e5\u7528d[0]\uff0c\u5219\u4e0d\u80fd\u628as\u8bbe\u4e3a\u96f6\u3002 \u5230\u4e0d\u4e86\u6c47\u70b9\uff0c\u6b64\u65f6\u5df2\u6c42\u51fa\u6700\u5927\u6d41 \n\treturn true;\n}\nvoid update(){//\u66f4\u65b0\u589e\u5e7f\u8def\u548c\u53cd\u5411\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\uff1b \n\tint x=t;\n\twhile(x!=s){\n\t\tint i=pre[x];\n\t\tedge[i]-=incf[t];\n\t\tedge[i^1]+=incf[t];\n\t\tx=ver[i^1];//\u5229\u7528\u6210\u5bf9\u53d8\u6362\u7684\u601d\u60f3\uff1b \n\t}\n//\tmaxflow+=incf[t];\u6c42\u6700\u5927\u6d41\uff0c\u4e0d\u8fc7\u6b64\u9898\u7528\u4e0d\u4e0a\uff1b \n\tans+=d[t]*incf[t];//\u5355\u4f4d\u8d39\u7528*\u8def\u7a0b \n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tt=n*2+2;//\u56e0\u4e3a\u5c06\u8fd9n\u4e2a\u70b9\u8fdb\u884c\u62c6\u70b9\u6240\u4ee5\u70b9\u7684\u603b\u91cf\u4e3a2*n\u52a0\u4e0a\u6e90\u70b9\u548c\u6c47\u70b9\uff1b \n\t//\u603b\u5171\u4e3a2*n+1\uff1b \n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tadd(s,i+n,1,x);//\u6e90\u70b9\u5411\u62c6\u5206\u7684\u7b2c\u4e8c\u90e8\u5206\u70b9\u8fde\u8fb9\u3002 \n\t\tadd(i+n,s,0,-x);\n\t}\n\tfor(int i=1;i<=n;i++) add(i+n,t,1,0),add(t,i+n,0,0);//\u7b2c\u4e8c\u90e8\u5206\u70b9\u4e0e\u6c47\u70b9\u8fde\u8fb9\u3002 \n\tfor(int i=1;i<=n;i++) add(s,i,1,0),add(i,s,0,0);//\u8d77\u70b9\u5411\u7b2c\u4e00\u90e8\u5206\u70b9\u8fde\u8fb9\u3002 \n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x>y)swap(x,y);//\u4fdd\u8bc1\u8fb9\u662f\u7531\u5c0f\u7f16\u53f7\u8fde\u5411\u5927\u7f16\u53f7\uff1b \n\t\tadd(x,y+n,1,z);//\u62c6\u5206\u7684\u70b9\u8fde\u8fb9\uff1b \n\t\tadd(y+n,x,0,-z);\n\t}\n\twhile(spfa()) update();//\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u4e0d\u8fc7\u6b64\u9898\u7528\u4e0d\u5230\u6700\u5927\u6d41\uff1b \n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1566271245,
        "uid": 143408,
        "name": "\u9648\u96ea\u68ee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2469 \u3010[SDOI2010]\u661f\u9645\u7ade\u901f\u3011"
    },
    {
        "content": "~~\u4e2a\u4eba\u611f\u89c9\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u96be\u5ea6\u7684~~\n\n\u8fd9\u9053\u9898\u770b\u5230\u4ee5\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u8d39\u7528\u6d41\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u611f\u89c9\u6709\u70b9\u4e0d\u662f\u5f88\u5957\u8def\u3002\u770b\u5230\u6bcf\u4e2a\u661f\u7403\u53ea\u80fd\u800c\u4e14\u5fc5\u987b\u7ecf\u8fc7\u4e00\u6b21\uff0c\u5148\u60f3\u5230\u62c6\u70b9\uff0c\u70b9\u4e0e\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u6d41\u4e00\u8d39\u96f6\uff0c\u51fa\u70b9\u4e0e\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u4e00\u8d39\u96f6\uff0c\u6e90\u70b9\u4e0e\u5165\u70b9\u8fde\u8dc3\u8fc1\u8fb9\uff0c\u7136\u540e\uff0c\u2026\u2026~~\u4e0d\u4f1a\u8dd1\u8d39\u7528\u4e86\uff0c\u6302\u903c\u4e86~~\u3002\u6211\u81ea\u8ba4\u4e3a\u8fd9\u6837\u8fde\u8fb9\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u8dd1\u7684\uff0c~~\u4f46\u662f\u6211\u8fd9\u79cd\u849f\u84bb\u5f53\u7136\u4e0d\u4f1a\u4e86~~\u3002\n\n\n\u5927\u4f6c\u544a\u8bc9\u6211\u6b63\u89e3\n\n\u5c06\u6bcf\u4e2a\u70b9\u62c6\u70b9\u3002\n\n\u6e90\u70b9\u5411\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n\n\u6e90\u70b9\u5411\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a\u77ac\u79fb\u5230\u8be5\u70b9\u6240\u9700\u65f6\u95f4\u7684\u8fb9\u3002\n\n\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9(i,j)\uff0c\u4ecei\u70b9\u5165\u70b9\u5411j\u70b9\u51fa\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a\u822a\u8def\u6240\u9700\u65f6\u95f4\u7684\u8fb9\u3002\n\n\u6d41\u5230\u8be5\u70b9\u51fa\u70b9\u7684\u67d0\u5165\u70b9\u5bf9\u5e94\u7684\u661f\u7403\uff0c\u5728\u4e4b\u524d\u7684\u67d0\u4e00\u65f6\u523b\u4e00\u5b9a\u7531\u67d0\u79cd\u5408\u6cd5\u65b9\u5f0f\u8fbe\u5230\u8fc7\uff0c\u8ffd\u6eaf\u5230\u5934\u4e00\u5b9a\u662f\u67d0\u4e2a\u77ac\u79fb\u5230\u7684\u70b9\uff08\u56e0\u4e3a\u56fe\u4e2d\u6ca1\u6709\u73af\uff09\uff0c\u201c\u8ffd\u6eaf\u201d\u7684\u8fc7\u7a0b\u5c31\u662f\u8fd9\u4e00\u6761\u8def\u5f84\u3002\n\n~~\u522b\u95ee\u6211\u600e\u4e48\u60f3\u5230\u7684\uff0c\u6211\u53cd\u6b63\u6ca1\u60f3\u5230\uff0c\u501f\u9274\u4e86\u9898\u89e3~~\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u7ec3\u662f\u5bf9\u7684\uff0c\u6bcf\u6761\u51fa\u70b9\u90fd\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u6d41\u91cf\u4e3a\u4e00\uff0c\u8fd9\u6837\u6bcf\u6761\u51fa\u8fb9\u53ea\u8d70\u4e00\u6b21\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u661f\u7403\u53ea\u7ecf\u8fc7\u4e00\u6b21\u3002\u800c\u6bcf\u4e2a\u51fa\u70b9\u76f4\u63a5\u4e0e\u6e90\u70b9\u76f8\u8fde\uff0c\u56e0\u4e3a\u4fdd\u8bc1\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u6bcf\u5ea7\u661f\u7403\u90fd\u4f1a\u88ab\u7ecf\u8fc7\u3002\u6e90\u70b9\u5411\u5165\u70b9\u8fde\u5f97\u8fb9\u53ef\u4ee5\u770b\u6210\u662f\u522b\u7684\u661f\u7403\u5f00\u8fc7\u6765\u7684\uff0c\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\u770b\u505a\u5f00\u5230\u90a3\u4e2a\u661f\u7403\uff0c\u81f3\u4e8es\u5411\u51fa\u70b9\u8fde\u8fb9\u770b\u6210\u8dc3\u8fc1\u3002\u6bcf\u6b21\u8dd1\u5230t\u5176\u5b9e\u90fd\u53ef\u4ee5\u770b\u505a\u56de\u5230\u4e86s\u3002\n\n\u53ef\u4ee5\u81ea\u5df1\u628a\u6837\u4f8b\u8d70\u4e00\u904d\u5927\u6982\u5c31\u53ef\u4ee5\u9886\u4f1a\u4e86\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<cstdio>\nusing namespace std;\nconst int N=10000,M=100000,inf=1<<30;\n\n#define itn int\nint n,m,s,t,maxflow,tot=1,ans;\nint a[810];\nint ver[2*M],hea[N],edge[2*M],cost[2*M],nex[2*M];\nint incf[N],d[N],pre[N];\nbool v[N];\nqueue<int>q;\n\ninline void add(int x,int y,int z,int c){\n\tver[++tot]=y;edge[tot]=z;cost[tot]=c;\n\tnex[tot]=hea[x];hea[x]=tot;\n}\n\ninline bool bfs()\n{\n//\tcout<<t<<\"aaaaaaaaaaaa\"<<endl;\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\twhile(q.size())q.pop();\n\tq.push(s);incf[s]=inf;v[s]=1;\n\td[s]=0;\n\twhile(q.size()){\n\t\tint x=q.front();q.pop();v[x]=0;\n//\t\tcout<<x<<\" \";\n\t\tfor(int i=hea[x];i;i=nex[i]){\n\t\t\tint y=ver[i];\n\t\t\tif(!edge[i])continue;\n\t\t\tif(d[y]>d[x]+cost[i]){\n\t\t\t\td[y]=d[x]+cost[i];\n\t\t\t\tpre[y]=i;\n\t\t\t\tincf[y]=min(incf[x],edge[i]);\n\t\t\t\tif(!v[y])q.push(y),v[y]=1;\n\t\t\t}\n\t\t}\n\t}\n\tif(d[t]==d[0])return false;\n\telse return true;\n}\n\ninline void calc(){\n//\tcout<<t<<endl;\n\tint x=t;\n\twhile(x!=s){\n\t\tint i=pre[x];\n\t\tedge[i]-=incf[t];\n\t\tedge[i^1]+=incf[t];\n\t\tx=ver[i^1];\n\t}\n\tmaxflow+=incf[t];\n\tans+=d[t]*incf[t];\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\ts=n+n+1,t=s+1;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tadd(s,n+i,1,a[i]);\n\t\tadd(n+i,s,0,-a[i]);\n\t\tadd(i+n,t,1,0);\n\t\tadd(t,i+n,0,0);\n\t\tadd(s,i,1,0);\n\t\tadd(i,s,0,0);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x>y)swap(x,y);\n\t\tadd(x,y+n,1,z);add(y+n,x,0,-z);\n\t}\n\twhile(bfs())calc();\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1566220011,
        "uid": 169137,
        "name": "k\uff0c\u706b\u9b42",
        "ccfLevel": 0,
        "title": "P2469 [SDOI2010]\u661f\u9645\u7ade\u901f"
    }
]