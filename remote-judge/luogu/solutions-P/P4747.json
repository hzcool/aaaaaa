[
    {
        "content": "\u4eca\u5929\u8003\u8bd5\u6b63\u597d\u8003\u4e86\u8fd9\u9053\u9898\uff0c~~\u7136\u540e\u6211\u5c31\u56e0\u4e3a\u8bfb\u9519\u9898\u7206\u96f6\u4e86~~\uff0c\u56de\u53bb\u94bb\u7814\u535a\u5ba2\uff0c\u53d1\u7bc7\u9898\u89e3\u3002\n\n\u5199\u5728\u4e4b\u524d\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u56fe\u8bba\u7684\u65b9\u6cd5\u89e3\u51b3\uff0c\u5177\u4f53\u601d\u60f3\u662f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u533a\u95f4\u8fde\u8fb9\uff0c\u7136\u540e\u7f29scc...balabala\n\n~~\u4e0a\u9762\u7684\u6211\u4e0d\u4f1a~~\n\n\u6211\u4eec\u628a\u9898\u5e72\u91cc\u63cf\u8ff0\u7684\u533a\u95f4\u6210\u4e3a\u201c\u597d\u533a\u95f4\u201d\u3002\u4e00\u6761\u6027\u8d28\uff1a\u597d\u533a\u95f4\u7684\u4ea4\u4e5f\u662f\u597d\u533a\u95f4\u3002\n\n\u5904\u7406\u8fd9\u79cd\u95ee\u9898\uff0c\u4e00\u4e2a\u5229\u5668\u5c31\u662f**\u79bb\u7ebf\u4e4b\u540e\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf**\u3002\n\n**\u8bbe\u5f53\u524d\u626b\u63cf\u7ebf\u626b\u63cf\u5230r**\uff0c\u5173\u952e\u5c31\u662f\u5982\u4f55\u7ef4\u62a4$[l,r]$\u662f\u5426\u4e3a\u597d\u7684\u533a\u95f4\u3002\n\n\u6211\u5148\u8bf4\u65b9\u6cd5\uff0c\u518d\u8bf4\u8bc1\u660e\uff1a\n\n\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u51fa\u73b0\u7684\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002**\u8bbe\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e3aval[i]**\uff0c\u5219\u521d\u503c\u4e3a$val[i]=i$\n\n\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u8bbe$p[v]$\u8868\u793a\u6743\u503cv\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2dupd\u4e3a\u533a\u95f4+1.\n\n```cpp\nif(a[i]>1&&p[a[i]-1]<=i) upd(1,p[a[i]-1]);\nif(a[i]<n&&p[a[i]+1]<=i) upd(1,p[a[i]+1]);\n```\n\n\u90a3\u4e48\uff0c**\u5982\u679c$val[l]==r$\uff0c\u5219$[l,r]$\u662f\u201c\u597d\u533a\u95f4\u201d**\u3002\n\n\u8bc1\u660e\uff1a\n\n\u5982\u679c\u533a\u95f4\u957f\u5ea6\u4e3a2\uff0c\u5373$val[r-1]=r$\uff0c\u90a3\u4e48\u663e\u7136$a[r-1]=a[r]-1 \\text{ or } a[r]+1$\n\n\u5982\u679c$val[l]==r$\uff0c\u90a3\u4e48$val[l]$\u5904\u88ab++\u4e86$r-l$\u6b21\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728$[l,r]$\u533a\u95f4\u5185\uff0c\u5b58\u5728$r-l$\u4e2a\u76f8\u90bb\u7684\u6570\u5bf9\u3002\u6839\u636e\u5495\u5495\u539f\u7406\uff0c\u6743\u503c\u533a\u95f4\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002\n\n\u6362\u4e00\u79cd\u7406\u89e3\uff0c\u5982\u679c$[l,r]$\u7684\u6743\u503c\u533a\u95f4\u4e3a$[c,d]+[e,f],e-d>1$\uff0c\u90a3\u4e48d\u548ce\u5c31\u4e0d\u80fd\u8d21\u732e\u201c\u76f8\u90bb\u7684\u6570\u5bf9\u201d\uff0c\u6240\u4ee5$val[l]$\u88ab\u8986\u76d6\u7684\u6b21\u6570\u4e00\u5b9a$<r-l$\u6b21\u3002\n\n\n\u8be2\u95ee\u6309L\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n----------------\n\n```cpp\n#define N 100005\n#define M N*4\n#define ls (x<<1)\n#define rs (x<<1|1)\n#define gm int mid((l+r)/2)\nint n,a[N],p[N];\nconst int rt=1;\nint mx[M],pos[M],laz[M];\nil void up(int x)\n{\n\tmx[x]=max(mx[ls],mx[rs]);\n\tpos[x]=mx[ls]>mx[rs]?pos[ls]:pos[rs];\n}\nil void down(int x)\n{\n\tif(laz[x])\n\t{\n\t\tmx[x]+=laz[x];\n\t\tif(rs<M)\n\t\t{\n\t\t\tlaz[ls]+=laz[x],laz[rs]+=laz[x];\n\t\t}\n\t\tlaz[x]=0;\n\t}\n}\nvoid build(int x,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tmx[x]=pos[x]=l;\n\t\treturn;\n\t}\n\tgm;\n\tbuild(ls,l,mid), build(rs,mid+1,r);\n\tup(x);\n}\nvoid upd(int x,int l,int r,int ql,int qr)\n{\n\tif(ql<=l&&r<=qr)\n\t{\n\t\t++laz[x];\n\t\tdown(x);\n\t\treturn;\n\t}\n\tgm; down(x);\n\tif(ql<=mid) upd(ls,l,mid,ql,qr);\n\telse down(ls);\n\tif(qr>mid) upd(rs,mid+1,r,ql,qr);\n\telse down(rs);\n\tup(x);\n}\nint al,ar;\nvoid ask(int x,int l,int r,int ql,int qr)\n{\n\tdown(x);\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tif(mx[x]>=ar)\n\t\t{\n\t\t\tal=pos[x],ar=mx[x];\n\t\t}\n\t\treturn;\n\t}\n\tgm;\n\tif(ql<=mid) ask(ls,l,mid,ql,qr);\n\tif(qr>mid) ask(rs,mid+1,r,ql,qr);\n}\npairint ans[N];\nbool judge(pairint x,int r)\n{\n\tar=-1; ask(rt,1,n,1,x.fi);\n\tif(ar==r)\n\t{\n\t\tans[x.se]=mp(al,ar);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nvector<pairint>g[N];\npriority_queue<pairint>s;\nsigned main()\n{\n#ifdef M207\n\tfreopen(\"in.in\",\"r\",stdin);\n\t// freopen(\"out.out\",\"w\",stdout);\n#endif\n\tin(n);\n\tfor(ri i=1; i<=n; ++i) in(a[i]),p[a[i]]=i;\n\tint cntq; in(cntq);\n\tfor(ri i=1,l,r; i<=cntq; ++i)\n\t{\n\t\tin(l),in(r);\n\t\tg[r].pb(mp(l,i));\n\t}\n\tbuild(rt,1,n);\n\tfor(ri i=1; i<=n; ++i)\n\t{\n\t\tif(a[i]>1&&p[a[i]-1]<=i) upd(rt,1,n,1,p[a[i]-1]);\n\t\tif(a[i]<n&&p[a[i]+1]<=i) upd(rt,1,n,1,p[a[i]+1]);\n\t\tfor(const pairint &v:g[i]) s.push(v);\n\t\twhile(!s.empty())\n\t\t{\n\t\t\tif(judge(s.top(),i)) s.pop();\n\t\t\telse break;\n\t\t}\n\t}\n\tfor(ri i=1; i<=cntq; ++i) out(ans[i].fi,' '),out(ans[i].se);\n\treturn 0;\n}\n```",
        "postTime": 1545650568,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811-\u601d\u7ef4\u597d\u9898-12.24\u8003\u8bd5-Intrinsic Interval-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u8fd9\u9898\u771f\u7684\u662f\u4e00\u9053\u601d\u7ef4\u597d\u9898\u3002\uff08\u611f\u8c22$i207M$\u795e\u7287\u63d0\u4f9b\u7684\u601d\u8defqwq\uff09\n\n\u9996\u5148\u663e\u800c\u6613\u89c1\u7684\u6709\u8fd9\u4e2a\u597d\u533a\u95f4\u7684$max-min=r-l$\uff0c\u4e0d\u8fc7\u8981\u505a\u8fd9\u9898\u5149\u6709\u8fd9\u4e2a\u8fd8\u4e0d\u591f\uff0c\u505a\u8fd9\u79cd\u9898\u7684\u65f6\u5019\u5c31\u4e0d\u80fd\u628a\u8fd9\u5806\u6570\u5b8c\u5168\u5f53\u505a\u79bb\u6563\u91cf\u6765\u5904\u7406\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u627e\u51fa\u4e00\u4e9b\u522b\u7684\u6027\u8d28\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5305\u542b\u7740\u8fd9\u6bb5\u533a\u95f4\u7684\u597d\u533a\u95f4\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u5427\uff0c\u8003\u8651\u4e24\u4e2a\u5305\u7740\u8fd9\u4e2a\u533a\u95f4\u7684\u597d\u533a\u95f4$[l_1,r_1]$\u548c$[l_2,r_2]$\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u4e0d\u5305\u542b\u7684\u60c5\u51b5\uff08\u56e0\u4e3a\u5305\u542b\u7684\u8bdd\u5916\u5c42\u90a3\u4e2a\u533a\u95f4\u80af\u5b9a\u662f\u6ca1\u7528\u7684\uff09\uff0c\u4e0d\u59a8\u8bbe$l_2>l_1$\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u4ea4$[l_2,r_1]$\u4e5f\u662f\u5305\u542b\u7740\u8fd9\u4e2a\u8be2\u95ee\u533a\u95f4\u7684\u3002\u65e2\u7136\u4ed6\u662f\u4e24\u4e2a\u597d\u533a\u95f4\u7684\u4ea4\uff0c\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a$[l_2,r_1]$\u4e3a\u4ec0\u4e48\u65e2\u80fd\u548c$[l_1,l_2-1]$\u62fc\u6210\u4e00\u4e2a\u597d\u533a\u95f4\uff0c\u53c8\u80fd\u548c$[r_1+1,r_2]$\u62fc\u6210\u4e00\u4e2a\u597d\u533a\u95f4\uff1f\u6211\u4eec\u53d1\u73b0$[l_2,r_1]$\u5c45\u7136\u4e5f\u662f\u4e00\u4e2a\u597d\u533a\u95f4\uff01\u5047\u5982\u4ed6\u4e0d\u597d\u7684\u8bdd\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e2d\u95f4\u4e0d\u8fde\u7eed\uff0c\u90a3\u4e48\u5b83\u6700\u591a\u53ea\u80fd\u548c\u4e00\u8fb9\u7684\u533a\u95f4\u62fc\u6210\u597d\u533a\u95f4\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u65ad\u8a00\uff0c**\u4ece$r$\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u80fd\u591f\u5305\u4f4f$[l,r]$\u7684\u597d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5bf9\u5e94\u7684\u6700\u77ed\u80fd\u591f\u5305\u4f4f$[l,r]$\u7684\u597d\u533a\u95f4\u5c31\u662f\u552f\u4e00\u7684\u7b54\u6848**\uff08~~\u8fd9\u8bdd\u597d\u7ed5\u53e3\u554a\u2026\u2026~~\uff09\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u6709\u8fd9\u6837\u4e00\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u626b\u63cf\u7ebf\uff0c\u628a\u8fd9\u4e9b\u533a\u95f4\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u627e\u51fa\u5f53\u524d\u70b9$i$\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u7684\u597d\u533a\u95f4\u6309\u7167$l$\u7684\u987a\u5e8f\uff08\u7528\u4e2aset\u7ef4\u62a4\uff09\u76f4\u63a5\u5904\u7406\u6389\u3002\u90a3\u4e48\u8003\u8651\u5982\u4f55\u627e\u6240\u6709\u53ef\u884c\u7684\u5de6\u7aef\u70b9\u3002\n\n\u5176\u5b9e\u9898\u9762\u4e0a\u5df2\u7ecf\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u63d0\u793a\uff1a\n\n\n _\u82e5\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32 $\\pi[a..b]$ \u6392\u5e8f\u540e\u662f\u8fde\u7eed\u6b63\u6574\u6570\uff0c\u5219\u79f0 $\\pi[a..b]$ \u662f\u4e00\u4e2a\u201c\u597d\u533a\u95f4\u201d\u3002_\n \n\u6211\u4eec\u53d1\u73b0\u628a\u8fd9\u73a9\u610f\u6392\u5e8f\u4e4b\u540e\u76f8\u90bb\u7684\u4e24\u9879\u5dee\u4e3a1\u5bf9\u5427\uff0c\u90a3\u4e48\u8fd9\u4e2a\u597d\u533a\u95f4$[l,r]$\u6709\u591a\u5c11\u65e0\u5e8f\u4e8c\u5143\u7ec4$(i,j)$\u662f\u76f8\u90bb\u4e24\u9879\u6216\u8005\u7edd\u5bf9\u503c\u4e3a1\u5462\uff1f\u663e\u7136\u5c31\u662f$r-l$\uff0c\u663e\u7136\u5bf9\u4e8e\u65e0\u5e8f\u4e8c\u5143\u7ec4\u53ef\u4ee5\u5728\u9760\u540e\u7684\u90a3\u4e2a\u4f4d\u7f6e\u7edf\u8ba1\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u597d\u533a\u95f4\u6362\u4e2a\u5b9a\u4e49\u4e86\uff1a\n\n_\u5728$[l,r]$\u5185\u6709$r-l$\u4e2a\u65e0\u5e8f\u4e8c\u5143\u7ec4\u7684\u533a\u95f4_\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u679a\u4e3e\u7684\u662f$r$\uff0c\u90a3\u4e48\u76f4\u63a5\u627e$l$\u540e\u9762\u6709\u591a\u5c11\u4e2a\u4e8c\u5143\u7ec4\u5373\u53ef\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u5f0f\u5b50\u53d8\u5f62\uff0c\u4e0d\u59a8\u8bbe$val[l]$\u4e3a$l$\u540e\u9762\u6709\u591a\u5c11\u4e2a\u5408\u6cd5\u7684\u4e8c\u5143\u7ec4\uff0c\u90a3\u4e48\u663e\u7136\u5c31\u6709$val[l]+l=r$\u5f53\u4e14\u4ec5\u5f53$[l,r]$\u4e3a\u597d\u533a\u95f4\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6362\u4e00\u79cd\u89d2\u5ea6\u8fdb\u884c\u7edf\u8ba1\uff1a\u5f00\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6211\u4eec\u5728\u626b\u63cf\u7ebf\u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0$a_{i-1}$\u6216\u8005$a_{i+1}$\u5728$i$\u524d\u9762\u5c31\u628a1~\u4ed6\u4eec\u7684\u4f4d\u7f6e\u8fdb\u884c\u533a\u95f4\u52a0\uff0c\u663e\u7136\u503c\u4e3a$i$\u7684\u4f4d\u7f6e\u5c31\u662f\u53ef\u884c\u7684\u597d\u533a\u95f4\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5728\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u627e\u51fa\u533a\u95f4\u5185\u7b49\u4e8e$i$\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u5462\uff1f\u8868\u9762\u4e0a\u770b\u8d77\u6765\u662f\u4e0d\u53ef\u505a\u7684\uff0c\u4f46\u662f\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u533a\u95f4\u5185\u6700\u591a\u53ea\u4f1a\u6709$r-l$\u4e2a\u5408\u6cd5\u7684\u4e8c\u5143\u7ec4\uff08\u5176\u5b9e\u5c31\u662f\u628a\u4ed6\u4eec\u6392\u5e8f\u4e00\u4e0b\u770b\u7136\u540e\u5c31\u4e0d\u53ef\u80fd\u518d\u591a\u4e86\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b49\u4e8e$i$\u7684\u4f4d\u7f6e\u662f\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\uff0c\u65e2\u7136\u662f\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e71\u641e\u4e86\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<set>\n#include<vector>\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\n#define up(_o) maxn[_o]=max(maxn[ls(_o)],maxn[rs(_o)])\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid print(int num){\n\t\tif(num>=10)print(num/10);putchar(num%10+'0');\n\t}\n\tint ansl[100001],ansr[100001];\n\ttypedef struct _qj{\n\t\tint l;int r;int id;\n\t\tfriend bool operator <(const _qj &a,const _qj &b){\n\t\t\tif(a.l==b.l)return(a.id<b.id);\n\t\t\treturn(a.l<b.l);\n\t\t}\n\t}qj;\n\tset<qj> st;\n\tint ints[100001],pos[100001],maxn[1000001],adds[1000001];\n\tinline void down(int tree){\n\t\tif(!adds[tree])return;\n\t\tint cjr=adds[tree];\n\t\tadds[tree]=0;\n\t\tadds[ls(tree)]+=cjr;adds[rs(tree)]+=cjr;\n\t\tmaxn[ls(tree)]+=cjr;maxn[rs(tree)]+=cjr;\n\t}\n\tint query(int rl,int rr,int l,int r,int tree,int num){//cout<<tree<<endl;\n\t\tdown(tree);int mid=(l+r)>>1;\n\t\tif(rl>rr)return(-1);\n\t\tif(rl==l&&rr==r){\n\t\t\tif(maxn[tree]!=num)return(-1);if(l==r)return(l);\n\t\t\tif(maxn[rs(tree)]==num)return(query(mid+1,r,mid+1,r,rs(tree),num));\n\t\t\treturn(query(l,mid,l,mid,ls(tree),num));\n\t\t}\n\t\tif(rl>mid)return(query(rl,rr,mid+1,r,rs(tree),num));\n\t\tif(rr<=mid)return(query(rl,rr,l,mid,ls(tree),num));\n\t\tint cjr=query(mid+1,rr,mid+1,r,rs(tree),num);\n\t\tif(cjr!=-1)return(cjr);\n\t\treturn(query(rl,mid,l,mid,ls(tree),num));\n\t}\n\tvector<qj> vec[100001];\n\tvoid inc(int rl,int rr,int l,int r,int tree){\n\t\tif(rl==l&&rr==r){\n\t\t\tadds[tree]++;maxn[tree]++;return;\n\t\t}\n\t\tint mid=(l+r)>>1;down(tree);\n\t\tif(rl>mid)inc(rl,rr,mid+1,r,rs(tree));else{\n\t\t\tif(rr<=mid)inc(rl,rr,l,mid,ls(tree));else{\n\t\t\t\tinc(rl,mid,l,mid,ls(tree));\n\t\t\t\tinc(mid+1,rr,mid+1,r,rs(tree));\n\t\t\t}\n\t\t}up(tree);\n\t}\n\tvoid build(int l\uff0cint r,int tree){\n\t\tif(l==r){\n\t\t\tmaxn[tree]=l;return;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,ls(tree));\n\t\tbuild(mid+1,r,rs(tree));up(tree);\n\t}\n\ttypedef set<qj>::iterator it;\n\tvoid ywymain(){\n\t\tint n=get();\n\t\tfor(register int i=1;i<=n;i++)pos[ints[i]=get()]=i;\n\t\tint m=get();\n\t\tfor(register int i=1;i<=m;i++){\n\t\t\tint l=get(),r=get();\n\t\t\tqj cjr;cjr.l=l;cjr.r=r;cjr.id=i;\n\t\t\tvec[r].push_back(cjr);\n\t\t}\n\t\tbuild(1,n,1);\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tif(ints[i]!=1&&pos[ints[i]-1]<i)inc(1,pos[ints[i]-1],1,n,1);\n\t\t\tif(ints[i]!=n&&pos[ints[i]+1]<i)inc(1,pos[ints[i]+1],1,n,1);\n\t\t\tfor(register int j=0;j<vec[i].size();j++){\n\t\t\t\tst.insert(vec[i][j]);\n\t\t\t}\n\t\t\twhile(st.begin()!=st.end()){\n\t\t\t\tit lp=st.end();lp--;qj me=*lp;\n\t\t\t\tint cjr=query(1,me.l,1,n,1,i);\n\t\t\t\tif(cjr==-1)break;\n\t\t\t\tansl[me.id]=cjr;\n\t\t\t\tansr[me.id]=i;st.erase(lp);\n\t\t\t}\n\t\t}\n\t\tfor(register int i=1;i<=m;i++)print(ansl[i]),putchar(' '),print(ansr[i]),putchar('\\n')\uff1b\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);//\u518d\u89c1\u7a0b\u5e8f\n}\n```",
        "postTime": 1545657970,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4747 \u3010[CERC2017]Intrinsic Interval\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u6392\u5217\uff0c\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5305\u542b\u4f4d\u7f6e\u533a\u95f4 $[l,r]$ \u7684\u957f\u5ea6\u6700\u77ed\u7684\u8fde\u7eed\u6bb5\u662f\u591a\u5c11\uff0c\u8fde\u7eed\u6bb5\u7684\u5b9a\u4e49\u4e3a\u6392\u5e8f\u540e\u503c\u57df\u8fde\u7eed\uff0c\u53ef\u4ee5\u8bc1\u660e\u89e3\u5b58\u5728\u4e14\u552f\u4e00\u3002$n,q\\leqslant 10^5$\u3002\n\n\u5f15\u7406\uff1a\u82e5\u4e24\u4e2a\u8fde\u7eed\u6bb5\u6709\u4ea4\uff0c\u5219\u5b83\u4eec\u7684\u4ea4\u4e5f\u662f\u8fde\u7eed\u6bb5\u3002\n\u8bc1\u660e\uff1a\u4ece\u503c\u57df\u4e0a\u8003\u8651\uff0c\u4e24\u4e2a\u533a\u95f4\u7684\u4ea4\u8fd8\u662f\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u66b4\u529b\u505a\u6cd5\uff1a\u5bf9\u6bcf\u4e2a\u8be2\u95ee $[l,r]$\uff0c\u4ece\u5de6\u5411\u53f3\u679a\u4e3e\u7b54\u6848\u7684\u53f3\u7aef\u70b9\uff0c\u5982\u679c\u5b58\u5728\u4ee5\u5f53\u524d\u53f3\u7aef\u70b9\u4e3a\u53f3\u7aef\u70b9\uff0c\u5305\u542b\u8be2\u95ee\u533a\u95f4\u7684\u8fde\u7eed\u6bb5\uff0c\u53d6\u6700\u77ed\u7684\u4f5c\u4e3a\u7b54\u6848\u5373\u53ef\u3002\n\u6b63\u786e\u6027\u8bc1\u660e\uff1a\u9996\u5148\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0c\u8003\u8651\u53cd\u8bc1\uff0c\u8bbe\u5f97\u5230\u7684\u7b54\u6848\u4e3a $[l_1,r_1]$\uff0c\u5b9e\u9645\u7b54\u6848\u4e3a $[l_2,r_2]$\uff1a\n\n- \u82e5 $r_1\\geqslant r_2$\uff0c\u6839\u636e\u7b97\u6cd5\u8fc7\u7a0b\u6211\u4eec\u4f1a\u627e\u5230 $[l_2,r_2]$\u3002\n- \u82e5 $r_1<r_2$\uff0c\u5219\u6709 $l\\geqslant l_2>l_1$\uff0c\u7531\u5f15\u7406\u53ef\u77e5 $[l_2,r_1]$ \u4e5f\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8fde\u7eed\u6bb5\uff0c\u77db\u76fe\u3002\n\n\u8fd9\u4e5f\u8bf4\u660e\u4e86\u89e3\u7684\u552f\u4e00\u6027\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u73b0\u5728\u53f3\u7aef\u70b9\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u626b\u63cf\u5230\u67d0\u4e2a\u4f4d\u7f6e\u628a\u6240\u6709\u53f3\u7aef\u70b9\u7b49\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7684\u8be2\u95ee\u52a0\u5165\u5230\u5f85\u8be2\u95ee\u96c6\u5408\u4e2d\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u533a\u95f4\u662f\u8fde\u7eed\u6bb5\u5f53\u4e14\u4ec5\u5f53 $mx-mn-len=-1$\uff0c\u4e09\u8005\u5206\u522b\u662f\u533a\u95f4\u6700\u5927/\u5c0f\u503c\u548c\u533a\u95f4\u957f\u5ea6\u3002\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807\u8868\u793a\u4ee5\u8be5\u4f4d\u7f6e\u4e3a\u5de6\u7aef\u70b9\uff0c$mx-mn-len$ \u7684\u503c\uff0c\u5e76\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002\u8003\u8651\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8 $1$ \u540e\u4fe1\u606f\u7684\u53d8\u5316\uff0c$mx,mn$ \u4f7f\u7528\u4e24\u4e2a\u5355\u8c03\u6808\u7ef4\u62a4\uff0c\u540c\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u52a0\uff0c$len$ \u4e3a\u533a\u95f4\u51cf $1$\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u652f\u6301\u533a\u95f4\u52a0\u3002\n\n\u540c\u65f6\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u5de6\u7aef\u70b9\u66f4\u9760\u53f3\u7684\u5f53\u524d\u6ca1\u6709\u7b54\u6848\uff0c\u90a3\u4e48\u9760\u5de6\u7684\u4e5f\u6ca1\u6709\uff0c\u4e8e\u662f\u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u5c1d\u8bd5\u8be2\u95ee\uff0c\u4e0d\u5408\u6cd5\u76f4\u63a5 break\uff0c\u8be2\u95ee\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u6700\u9760\u53f3\u7684 $-1$ \u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(n\\log n+q\\log n+q\\log q)$\u3002\n\n\u8bb0\u5f97\u6bd4\u8f83\u8981\u5b8c\u5168\uff01\u6216\u8005\u7528 multiset\u3002\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/51684531)\u3002",
        "postTime": 1623399857,
        "uid": 96912,
        "name": "AzusaCat",
        "ccfLevel": 9,
        "title": "CERC2017 - Intrinsic Interval"
    },
    {
        "content": "## [\u9898\u89e3] [CERC2017]Intrinsic Interval\n\n> [\u70b9\u6b64\u770b\u9898](https://www.luogu.com.cn/problem/P4747)\n\n> \u5982\u679c\u4f60\u505a\u8fc7\u7c7b\u4f3c\u7684\u4e00\u7c7b\u6a21\u578b\u9898\uff0c\u4f60\u786e\u5b9e\u4f1a\u8ba4\u4e3a\u8fd9\u9053\u601d\u7ef4\u9898\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u5957\u8def\u9898\u3002\n\n### \u5efa\u6a21\n\n\u89c1\u5230\u6b64\u7c7b**\u7ed9\u4f60\u4e00\u4e9b\u533a\u95f4\uff0c\u6c42\u89e3\u5408\u6cd5\u533a\u95f4**\u4e2a\u6570\u6216\u8005\u662f\u4ec0\u4e48\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5f80\u8fd9\u91cc\u60f3\u3002\n\n1. \u628a\u8be2\u95ee\u533a\u95f4\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\n\n2. \u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u5de6\u7aef\u70b9\u3002\n\n\u5f53\u7136\uff0c\u6700\u91cd\u8981\u7684\u662f\u7b2c\u4e8c\u6b65\uff0c\u7b2c\u4e00\u6b65\u662f**\u79bb\u7ebf\u601d\u60f3**\uff0c\u7b2c\u4e8c\u6b65\u662f**\u7edf\u8ba1\u601d\u60f3**\u3002\n\n\u901a\u5e38\uff0c\u5728\u5e76\u975e\u7279\u522b\u590d\u6742\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e8c\u6b65\u7684\u6570\u636e\u7ed3\u6784\u91c7\u7528\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u4f46\u5177\u4f53\u7684\u4e0d\u662f\u7528\u4ec0\u4e48\uff0c\u800c\u662f\u600e\u4e48\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\u5c31\u9700\u8981\u53d1\u73b0\u9898\u76ee\u6027\u8d28\uff1a\u672c\u5f81\u533a\u95f4\u4e3a**\u6781\u5dee\u51cf\u53bb\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e $-1$ \u7684\u4e14\u5305\u542b\u8be2\u95ee\u533a\u95f4\u7684\u4e00\u4e2a\u533a\u95f4**\uff0c\u6216\u8005\u8bf4\uff0c\u6ee1\u8db3 $max-min=r-l$\uff0c\u6ce8\u610f $r-l$ \u5e76\u4e0d\u662f\u533a\u95f4\u957f\u5ea6\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u5173\u952e\u6027\u8d28\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u4e86\u3002\n$$\nmax-min-(r-l)\\geq0\n$$\n\u5f53\u53d6\u7b49\u65f6\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u7aef\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u7684\u6700\u5c0f\u503c\u6765\u5224\u65ad\u3002\n\n\u8fd9\u4e2a\u6a21\u578b\u5173\u952e\u7684\u662f\u7b2c\u4e09\u6b65\uff1a\n\n3. \u8003\u8651\u52a0\u5165\u5f53\u524d\u53f3\u7aef\u70b9\u5bf9\u5df2\u6709\u7684\u5de6\u7aef\u70b9\u7684\u5f71\u54cd\u3002\n\n\u901a\u4fd7\u7684\u8bb2\uff0c\u52a0\u5165\u5f53\u524d\u53f3\u7aef\u70b9 $r$ \u540e\uff0c\u4e4b\u524d\u6240\u6709\u7684 $[l,r-1]$ \u7684\u533a\u95f4\u90fd\u4f1a\u6269\u5c55\u4e00\u4e2a\u5355\u4f4d\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u5de6\u7aef\u70b9\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u66f4\u65b0 $max,min,(r-l)$ \u8fd9\u4e09\u4e2a\u4fe1\u606f\u3002\n\n$r-l$ \u4e0d\u7528\u8bf4\uff0c\u80af\u5b9a\u662f $+1$\uff0c\u90a3\u4e48\u6574\u4e2a\u7ef4\u62a4\u7684\u503c $-1$\u3002\n\n\u5bf9\u4e8e $max,min$ \u7684\u7ef4\u62a4\uff0c\u8bbe $l_1,l_2$ \u4f9d\u6b21\u4e3a $r$ **\u4ece\u53f3\u5f80\u5de6\u6570\u7b2c\u4e00\u4e2a\u6bd4 $a_r$ \u5927\u548c\u6bd4 $a_r$ \u5c0f\u7684\u4f4d\u7f6e**\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u7ef4\u62a4\uff08\u6bd4\u8f83\u5e38\u89c1\uff09\u3002\n\n\u90a3\u4e48\u5904\u4e8e $[l_1+1,r]$ \u7684\u8fd9\u90e8\u5206\u5de6\u7aef\u70b9\uff0c\u5b83\u4eec\u5230\u53f3\u7aef\u70b9 $r$ \u7684\u6700\u5927\u503c\u90fd\u4f1a\u53d6\u5230 $a_r$\uff0c\u53ef\u4ee5\u5728\u7ef4\u62a4\u5355\u8c03\u6808\u7684\u65f6\u5019\u8fdb\u884c\u64a4\u9500\uff0c\u7136\u540e\u518d\u628a $a_r$ \u7684\u503c\u66f4\u65b0\u8fdb\u53bb\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5355\u8c03\u6808\uff08\u4e0d\u59a8\u8bbe\u5355\u8c03\u9012\u51cf\uff09\u4e2d\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9 $u,v$\uff0c$[u+1,v-1]$ \u8fd9\u4e00\u6bb5\u7684\u503c\u5747 $\\leq a_v$ .\n\n\u5728\u7ef4\u62a4\u5355\u8c03\u6808\u5355\u8c03\u6027\u7684\u540c\u65f6\uff0c\u987a\u4fbf\u7ef4\u62a4\u4e00\u4e0b\u64a4\u9500\u7684\u4e1c\u897f\u5373\u53ef\u3002\n\n\u6700\u540e\u5c31\u662f\u67e5\u8be2\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\u662f\uff1a\n\n**\u5982\u679c\u5f53\u524d\u7684 $r$ \u5bf9\u5e94\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u6700\u5927\u7684 $l$\uff0c\u90a3\u4e48\u8fd9\u4e2a $[l,r]$ \u5c31\u662f\u6700\u5c0f\u7684\u533a\u95f4\u3002**\n\n\u8bc1\u660e\u81ea\u5df1\u53cd\u8bc1\u6cd5\u8bc1\u4e00\u4e0b\u3002\n\n\u800c\u8fd9\u4e2a\u9898\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\u53d8\u5f0f\uff1a\n\n\u5982\u679c\u4e0d\u662f\u6392\u5217\u4e86\u600e\u4e48\u529e\uff1f\n\n\u501f\u7528 HH\u7684\u9879\u94fe \u7684\u601d\u60f3\uff0c**\u533a\u95f4\u6570\u989c\u8272\u7684\u5173\u952e\u5728\u4e8e\u5728\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7edf\u8ba1\u7b54\u6848**\uff0c\u56e0\u6b64\u8bb0\u5f55 $last$ \u66f4\u6362\u4e00\u4e0b $r-l$ \u7684\u7ef4\u62a4\u5373\u53ef\u3002\n\n[Continuous Intervals](https://codeforces.com/gym/102222/problem/L)\uff0c\u53ef\u4ee5\u8bf4\u662f\u52a0\u5f3a\u7248\uff0c\u9700\u8981\u533a\u95f4\u6570\u989c\u8272\u5e76\u4e14\u7ef4\u62a4\u5408\u6cd5\u533a\u95f4\u7684\u4e2a\u6570\u3002\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntemplate <typename T>\ninline T read(){\n\tT x=0;char ch=getchar();bool fl=false;\n\twhile(!isdigit(ch)){if(ch=='-')fl=true;ch=getchar();}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);ch=getchar();\n\t}\n\treturn fl?-x:x;\n}\n#include <vector>\n#include <set>\nconst int maxn = 1e5 + 10;\n#define Pair pair<int,int>\n#define mp make_pair\nnamespace Tree{\nstruct tree{\n\tint l,r;\n\tint mn,tag;\n}t[maxn<<2];\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define mid ((l+r)>>1)\ninline void pushup(int p){\n\tt[p].mn=min(t[ls].mn,t[rs].mn);\n}\ninline void pushdown(int p){\n\tif(!t[p].tag)return ;\n\tt[ls].mn+=t[p].tag;t[rs].mn+=t[p].tag;\n\tt[ls].tag+=t[p].tag;t[rs].tag+=t[p].tag;\n\tt[p].tag=0;\n}\nvoid build(int p,int l,int r){\n\tt[p].l=l;t[p].r=r;\n\tif(l==r)return t[p].mn=l,void();\n\tbuild(ls,l,mid);build(rs,mid+1,r);\n\tpushup(p);\n}\nvoid update(int p,int x,int y,int val){\n\tint l=t[p].l,r=t[p].r;\n\tif(x>y)return ;\n\tif(x<=l && r<=y){\n\t\tt[p].mn+=val;t[p].tag+=val;return ;\n\t}\n\tpushdown(p);\n\tif(x<=mid)update(ls,x,y,val);\n\tif(y>mid)update(rs,x,y,val);\n\tpushup(p);\n}\nint query(int p,int x,int y){\n\tint l=t[p].l,r=t[p].r;\n\tif(t[p].mn>0)return -1;\n\tif(l==r)return l;\n\tpushdown(p);\n\tif(y>mid && !t[rs].mn){\n\t\tint res=query(rs,x,y);\n\t\tif(res!=-1)return res;\n\t}\n\tif(x<=mid && !t[ls].mn)return query(ls,x,y);\n\treturn -1;\n}\n}using namespace Tree;\nint n,m,a[maxn];\nint stk1[maxn],stk2[maxn],top1,top2;\nvector<Pair> pos[maxn];\nmultiset<Pair> s;\nPair ans[maxn];\n#define read() read<int>()\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tm=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint l=read(),r=read();\n\t\tpos[r].emplace_back(l,i);\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n;i++){\n\t\tint x,y;\n\t\twhile(top1 && a[stk1[top1]]<a[i]){\n\t\t\ty=stk1[top1];top1--;\n\t\t\tx=stk1[top1]+1;\n\t\t\tupdate(1,x,y,-a[y]);\n\t\t}\n\t\tx=stk1[top1]+1;y=i;\n\t\tupdate(1,x,y,a[y]);\n\t\tstk1[++top1]=i;\n\t\twhile(top2 && a[stk2[top2]]>a[i]){\n\t\t\ty=stk2[top2];top2--;\n\t\t\tx=stk2[top2]+1;\n\t\t\tupdate(1,x,y,a[y]);\n\t\t}\n\t\tx=stk2[top2]+1;y=i;\n\t\tupdate(1,x,y,-a[y]);\n\t\tstk2[++top2]=i;\n\t\tupdate(1,1,n,-1);\n\t\tfor(auto x:pos[i])s.insert(x);\n\t\twhile(s.size()){\n\t\t\tauto it=s.end();it--;\n\t\t\tint l=it->first,res=query(1,1,l);\n\t\t\tif(res==-1)break;\n\t\t\ts.erase(it);\n\t\t\tans[it->second].first=res;\n\t\t\tans[it->second].second=i;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d %d\\n\",ans[i].first,ans[i].second);\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1632957027,
        "uid": 375110,
        "name": "\u00b6\u51c9\u7b19",
        "ccfLevel": 6,
        "title": "[\u9898\u89e3] [CERC2017]Intrinsic Interval"
    },
    {
        "content": "## \u5206\u6790\n\u8003\u8651\u5bf9\u4e8e $[l,r]$\uff0c\u5982\u4f55\u6c42\u51fa\u5305\u4f4f\u5b83\u7684\u957f\u5ea6\u6700\u77ed\u7684\u597d\u533a\u95f4\u3002\n\n\u505a\u6cd5\u5c31\u662f\u7528\u4e00\u4e2a\u6307\u9488\u4ece $r$ \u5411\u53f3\u626b\uff0c\u6bcf\u6b21\u67e5\u8be2\u4ee5\u5f53\u524d\u6307\u9488\u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u77ed\u7684\u80fd\u5305\u4f4f $[l,r]$ \u7684\u597d\u533a\u95f4\u3002\n\n\u7b2c\u4e00\u4e2a\u67e5\u8be2\u5230\u7684\u5c31\u662f\u60f3\u8981\u7684\u533a\u95f4\u3002\n\n\u4e00\u5b9a\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u533a\u95f4\u4ea4\u53c9\u7684\u533a\u95f4\u66f4\u4f18\u7684\u60c5\u51b5\u3002\n\n\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e24\u4e2a\u533a\u95f4\u4ea4\u53c9\u7684\u90e8\u5206\u4e00\u5b9a\u4f1a\u5728\u4e4b\u524d\u88ab\u67e5\u8be2\u5230\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u6309\u7167\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4f9d\u6b21\u5904\u7406\u3002\n\n\u53ea\u9700\u8981\u5feb\u901f\u5730\u67e5\u8be2\u957f\u5ea6\u6700\u77ed\u7684\u597d\u533a\u95f4\u5373\u53ef\u3002\n\n\u8fd9\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u5b9a\u4e49\u4e3a\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u5de6\u7aef\u70b9\uff0c\u4ee5\u626b\u5230\u7684\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u4e2d\u8fde\u7eed\u533a\u95f4\u7684\u4e2a\u6570\u3002\n\n\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5c31\u662f\u8fde\u7eed\u533a\u95f4\u4e2a\u6570\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u533a\u95f4\u52a0\u548c\u64cd\u4f5c\u4e2d\u7684 $lazy$ \u6807\u8bb0\u3002\n\n\u6bcf\u6b21\u4ece\u53f3\u8fb9\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9 $i$ \u65f6\uff0c\u6211\u4eec\u628a\u533a\u95f4 $[1,i]$ \u6574\u4f53\u52a0 $1$\u3002\n\n\u4ee3\u8868\u6b64\u65f6\u53c8\u591a\u4e86\u4e00\u4e2a\u4e0d\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u6b64\u65f6\u6211\u4eec\u53bb\u627e $a[i]+1$ \u548c $a[i]-1$ \u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u5b83\u4eec\u7684\u4f4d\u7f6e\u5728 $i$ \u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u5c31\u628a $[1,wz[a[i]-1]]$ \u6216\u8005 $[1,wz[a[i]+1]]$ \u6574\u4f53\u51cf\u4e00\uff0c\u4ee3\u8868\u5305\u542b $a[i]+1$ \u6216\u8005 $a[i]-1$ \u7684\u533a\u95f4\u53ef\u4ee5\u4e0e $a[i]$ \u5408\u5e76\u5f62\u6210\u4e00\u4e2a\u5927\u533a\u95f4\u3002\n\n\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u8fde\u7eed\u533a\u95f4\u4e2a\u6570\u5c31\u662f\u4e00\uff0c\u7ebf\u6bb5\u6811\u4e0a\u8bb0\u5f55\u7684\u6700\u5c0f\u503c\u5c31\u662f\u4e00\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<set>\n#define rg register\ninline int read(){\n\trg int x=0,fh=1;\n\trg char ch=getchar();\n\twhile(ch<'0' || ch>'9'){\n\t\tif(ch=='-') fh=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9'){\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*fh;\n}\nconst int maxn=1e5+5;\nstruct trr{\n\tint l,r,mmin,laz;\n}tr[maxn<<2];\nvoid push_up(rg int da){\n\ttr[da].mmin=std::min(tr[da<<1].mmin,tr[da<<1|1].mmin);\n}\nvoid push_down(rg int da){\n\tif(tr[da].laz){\n\t\ttr[da<<1].laz+=tr[da].laz;\n\t\ttr[da<<1|1].laz+=tr[da].laz;\n\t\ttr[da<<1].mmin+=tr[da].laz;\n\t\ttr[da<<1|1].mmin+=tr[da].laz;\n\t\ttr[da].laz=0;\n\t}\n}\nvoid build(rg int da,rg int l,rg int r){\n\ttr[da].l=l,tr[da].r=r;\n\tif(l==r) return;\n\trg int mids=(l+r)>>1;\n\tbuild(da<<1,l,mids),build(da<<1|1,mids+1,r);\n}\nvoid xg(rg int da,rg int l,rg int r,rg int val){\n\tif(tr[da].l>=l && tr[da].r<=r){\n\t\ttr[da].laz+=val,tr[da].mmin+=val;\n\t\treturn;\n\t}\n\tpush_down(da);\n\trg int mids=(tr[da].l+tr[da].r)>>1;\n\tif(l<=mids) xg(da<<1,l,r,val);\n\tif(r>mids) xg(da<<1|1,l,r,val);\n\tpush_up(da);\n}\nint cx(rg int da,rg int l,rg int r){\n\tif(tr[da].l!=tr[da].r) push_down(da);\n\tif(tr[da].l>=l && tr[da].r<=r){\n\t\tif(tr[da].mmin==1){\n\t\t\tif(tr[da].l==tr[da].r) return tr[da].l;\n\t\t\telse if(tr[da<<1|1].mmin==1) return cx(da<<1|1,l,r);\n\t\t\telse return cx(da<<1,l,r);\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\trg int mids=(tr[da].l+tr[da].r)>>1,tmp1=-1,tmp2=-1;\n\tif(l<=mids) tmp1=cx(da<<1,l,r);\n\tif(r>mids) tmp2=cx(da<<1|1,l,r);\n\tif(tmp2!=-1) return tmp2;\n\telse return tmp1;\n}\nint n,a[maxn],wz[maxn],ansl[maxn],ansr[maxn],m;\nstruct jie{\n\tint l,r,id;\n}b[maxn];\nbool cmp(rg jie aa,rg jie bb){\n\treturn aa.r<bb.r;\n}\nstruct asd{\n\tint l,id;\n\tasd(){}\n\tasd(rg int aa,rg int bb){\n\t\tl=aa,id=bb;\n\t}\n\tfriend bool operator <(const asd& A,const asd& B){\n\t\tif(A.l==B.l) return A.id<B.id;\n\t\treturn A.l>B.l;\n\t}\n};\nstd::set<asd> s;\nint main(){\n\tn=read();\n\tfor(rg int i=1;i<=n;i++) a[i]=read();\n\tfor(rg int i=1;i<=n;i++) wz[a[i]]=i;\n\tm=read();\n\tfor(rg int i=1;i<=m;i++){\n\t\tb[i].l=read(),b[i].r=read(),b[i].id=i;\n\t}\n\tstd::sort(b+1,b+m+1,cmp);\n\tbuild(1,1,n);\n\trg int now=1;\n\tfor(rg int i=1;i<=n;i++){\n\t\txg(1,1,i,1);\n\t\tif(a[i]>1 && wz[a[i]-1]<i) xg(1,1,wz[a[i]-1],-1);\n\t\tif(a[i]<n && wz[a[i]+1]<i) xg(1,1,wz[a[i]+1],-1);\n\t\twhile(now<=m && b[now].r==i){\n\t\t\ts.insert(asd(b[now].l,b[now].id));\n\t\t\tnow++;\n\t\t}\n\t\twhile(!s.empty()){\n\t\t\trg int tmp1=s.begin()->l,tmp2=s.begin()->id,tmp3;\n\t\t\ttmp3=cx(1,1,tmp1);\n\t\t\tif(tmp3==-1) break;\n\t\t\ts.erase(s.begin());\n\t\t\tansl[tmp2]=tmp3,ansr[tmp2]=i;\n\t\t}\n\t}\n\tfor(rg int i=1;i<=m;i++) printf(\"%d %d\\n\",ansl[i],ansr[i]);\n\treturn 0;\n}\n```",
        "postTime": 1614823997,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "P4747 [CERC2017]Intrinsic Interval \u9898\u89e3"
    },
    {
        "content": "\u6b22\u8fce\u6765\u535a\u5ba2\u8e29\u8e29[Baka's Blog](https://baka.online/cerc2017intrinsic-interval-tarjan%e7%ba%bf%e6%ae%b5%e6%a0%91%e5%bb%ba%e5%9b%be/)\n\n\u8fd9\u91cc\u662fi207M\u795e\u7287\u63d0\u5230\u7684\u7ebf\u6bb5\u6811\u5efa\u56fe+\u7f29\u70b9\u7684\u505a\u6cd5\u3002\n\n\u611f\u8c22[fwat\u7684\u9898\u89e3](https://www.cnblogs.com/yqgAKIOI/p/10087038.html)\uff0c\u4e0d\u8fc7\u4ed6\u5199\u7684\u592a\u7b80\u7565\u4e86\uff0c\u8fd9\u7bc7\u9898\u89e3\u7565\u5fae\u8be6\u7ec6\u4e00\u4e9b\u3002\n\n\u6211\u4eec\u8003\u8651\u4f4d\u7f6e$i-1,i$\uff0c\u5b83\u4eec\u7684\u503c\u5206\u522b\u4e3a$val[i-1],val[i]$\u3002\u5982\u679c$i-1,i$\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u51fa\u73b0\u5728\u4e00\u6bb5\u201c\u597d\u201d\u7684\u533a\u95f4\u4e2d\uff0c\u90a3\u4e48\uff0c\u7531\u597d\u533a\u95f4\u7684\u5b9a\u4e49\uff0c$[val[i],val[i+1]]$\u5185\u7684\u6240\u6709\u503c\uff0c\u90fd\u9700\u8981\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u3002\u5373\uff0c\u4ee4$L,R$\u4e3a$[val[i],val[i+1]]$\u5185\u7684\u6240\u6709\u503c\u51fa\u73b0\u4f4d\u7f6e\u7684\u5de6\u53f3\u7aef\u70b9\uff0c$[L,R]$\u90fd\u8981\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u3002\n\n\u7528\u56fe\u4e2d\u7684\u8fb9\u8868\u793a\u8fd9\u4e2a\u9650\u5236\u5173\u7cfb\u3002$x \\to y$\u7684\u4e00\u6761\u8fb9\uff0c\u8868\u793a$x$\u51fa\u73b0\u7684\u65f6\u5019\uff0c$y$\u4e5f\u8981\u51fa\u73b0\u3002\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u7136\u540e\u7f29\u70b9\u3002\u5728DAG\u4e0aDFS\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5b58\u5728\u7684\u65f6\u5019\uff0c\u8981\u6c42\u51fa\u73b0\u533a\u95f4\u7684\u8303\u56f4\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee$l,r$\uff0c$[l,r]$\u5185\u6bcf\u4e2a\u8303\u56f4\u7684\u5e76\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd9\u4e2a\u9700\u8981\u7528\u4ee5\u4e0b\u6027\u8d28\u8bc1\u660e\uff1a\n\n1. \u5982\u679c\u6709$a \\leq b \\leq c \\leq d$\uff0c$[a,c],[b,d]$\u662f\u597d\u533a\u95f4\uff0c\u90a3\u4e48$[a,d]$\u4e5f\u662f\u597d\u533a\u95f4\u3002\n\n\u8003\u8651\u628a\u597d\u533a\u95f4\u5185\u90e8\u6392\u5e8f\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u4e2a\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u597d\u533a\u95f4\u5c31\u662f\u533a\u95f4\u5185\u5dee\u4e3a$1$\u7684\u65e0\u5e8f\u5bf9$(i,j)$\u6570\u91cf\u4e3a$r-l$\u7684\u533a\u95f4\u3002\u8fd9\u4e48\u770b\u5c31\u663e\u7136\u4e86\u3002\n\n2. $i-1,i$\u548c$i,i+1$\u6240\u9650\u5236\u8303\u56f4\u662f\u6709\u4ea4\u7684\u3002\n\n\u7531\u4e8e\u4e24\u7aef\u533a\u95f4\u6709\u5171\u540c\u7684\u6570\uff0c\u8fd9\u4e2a\u6027\u8d28\u4e5f\u4e00\u5b9a\u662f\u6210\u7acb\u7684\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\n\ninline int rd() {\n\tint a = 1, b = 0; char c = getchar();\n\twhile (!isdigit(c)) a = c == '-' ? 0 : 1, c = getchar();\n\twhile (isdigit(c)) b = b * 10 + c - '0', c = getchar();\n\treturn a ? b : -b;\n}\n\nconst int N = 400000 + 2333;\n\nint n, m, val[N], pos[N];\n\nstruct Node {\n\tint l, r;\n\tNode() { l = 1e9; r = -l; }\n\tNode(int _l, int _r) {\n\t\tl = _l; r = _r;\n\t}\n};\n\nNode operator+(const Node &x, const Node &y) {\n\treturn Node(std::min(x.l, y.l), std::max(x.r, y.r));\n}\n\nstruct SegTree {\n\tNode t[N];\n\t\n\tvoid change(int p, int x, Node y, int L, int R) {\n\t\tif (L == R) return (void)(t[p] = y);\n\t\tint mid = (L + R) >> 1;\n\t\tif (x <= mid) change(ls(p), x, y, L, mid);\n\t\telse change(rs(p), x, y, mid + 1, R);\n\t\tt[p] = t[ls(p)] + t[rs(p)];\n\t}\n\t\n\tNode query(int p, int l, int r, int L, int R) {\n\t\tif (l <= L && r >= R) return t[p];\n\t\tint mid = (L + R) >> 1;\n\t\tif (l <= mid && r > mid)\n\t\t\treturn query(ls(p), l, r, L, mid) + query(rs(p), l, r, mid + 1, R);\n\t\tif (l <= mid)\n\t\t\treturn query(ls(p), l, r, L, mid);\n\t\tif (r > mid)\n\t\t\treturn query(rs(p), l, r, mid + 1, R);\n\t}\n} seg[2];\n\nstd::vector<int> G1[N], G2[N];\n\nvoid build(int p, int L, int R) {\n\tif (L == R) return (void)(pos[L] = p);\n\tint mid = (L + R) >> 1;\n\tbuild(ls(p), L, mid);\n\tbuild(rs(p), mid + 1, R);\n\tG1[p].push_back(ls(p));\n\tG1[p].push_back(rs(p));\n}\n\nvoid addedge(int p, int l, int r, int L, int R, int q) {\n\tif (l <= L && r >= R) return (void)(G1[q].push_back(p));\n\tint mid = (L + R) >> 1;\n\tif (l <= mid) addedge(ls(p), l, r, L, mid, q);\n\tif (r > mid) addedge(rs(p), l, r, mid + 1, R, q);\n}\n\nNode t1[N], t2[N];\n\nint dfn[N], low[N], ins[N], scc[N], stk[N], top, cnt, num;\n\nvoid tarjan(int x) {\n\tdfn[x] = low[x] = ++num;\n\tins[stk[++top] = x] = 1;\n\tfor (auto y : G1[x]) {\n\t\tif (!dfn[y]) {\n\t\t\ttarjan(y);\n\t\t\tlow[x] = std::min(low[x], low[y]);\n\t\t} else if (ins[y])\n\t\t\tlow[x] = std::min(low[x], dfn[y]);\n\t}\n\tif (low[x] == dfn[x]) {\n\t\tint y; ++cnt;\n\t\tdo {\n\t\t\tins[y = stk[top--]] = 0;\n\t\t\tscc[y] = cnt;\n\t\t} while (x != y);\n\t}\n}\n\nbool vis[N];\n\nvoid dfs(int x) {\n\tif (vis[x]) return;\n\tvis[x] = 1;\n\tfor (auto y : G2[x]) {\n\t\tdfs(y);\n\t\tt2[x] = t2[x] + t2[y];\n\t}\n}\n\nint main() {\n\tn = rd(); build(1, 1, n);\n\tfor (int i = 1; i <= n; ++i)\n\t\tval[i] = rd();\n\tfor (int i = 1; i <= n; ++i)\n\t\tseg[0].change(1, val[i], { i, i }, 1, n);\n\tfor (int i = 2; i <= n; ++i) {\n\t\tint x = std::min(val[i - 1], val[i]), y = std::max(val[i - 1], val[i]);\n\t\tt1[pos[i]] = seg[0].query(1, x, y, 1, n);\n\t\taddedge(1, t1[pos[i]].l + 1, t1[pos[i]].r, 1, n, pos[i]);\n\t}\n\tfor (int i = 1; i < N; ++i)\n\t\tif (!dfn[i]) tarjan(i);\n\tfor (int x = 1; x < N; ++x)\n\t\tfor (auto y : G1[x]) if (scc[x] != scc[y])\n\t\t\tG2[scc[x]].push_back(scc[y]);\n\tfor (int i = 1; i < N; ++i)\n\t\tt2[scc[i]] = t2[scc[i]] + t1[i];\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tdfs(i);\n\tfor (int i = 2; i <= n; ++i)\n\t\tseg[1].change(1, i, t2[scc[pos[i]]], 1, n);\n\t\t\n\tm = rd();\n\twhile (m--) {\n\t\tint l = rd(), r = rd();\n\t\tif (l == r) {\n\t\t\tprintf(\"%d %d\\n\", l, r);\n\t\t\tcontinue;\n\t\t}\n\t\tNode ans = seg[1].query(1, l + 1, r, 1, n);\n\t\tprintf(\"%d %d\\n\", ans.l, ans.r);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1564988960,
        "uid": 52068,
        "name": "kai586123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4747 \u3010[CERC2017]Intrinsic Interval\u3011"
    },
    {
        "content": "## CERC2017 Intrinsic Interval\n\n\n\n\u53bb\u5e74\u505a\u8fc7\u7684\u9898\uff0c\u4eca\u5929\u4e00\u770b\u5c45\u7136\u5fd8\u4e86\u600e\u4e48\u505a\u3002\u5bf9\u7740\u81ea\u5df1\u7684\u4ee3\u7801\u60f3\u4e86\u534a\u5929\u624d\u4f1a\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u9898\u5f88\u6709\u610f\u601d\u3002\n\n\n\n#### \u7b80\u8981\u9898\u610f\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217 $P$\u3002\n\n\u5b9a\u4e49 $P$ \u7684\u533a\u95f4 $[L,R]$ \u662f\u597d\u533a\u95f4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c06 $P_L,P_{L+1},P_{L+2}\\dots P_{R}$ \u6392\u5e8f\u540e\uff0c\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u4e4b\u5dee\u90fd\u4e3a $1$\u3002\n\n\u73b0\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\uff0c\u5305\u542b\u533a\u95f4 $l,r$ \u7684\u6700\u5c0f\u7684\u597d\u533a\u95f4 \u7684\u5de6\u53f3\u7aef\u70b9\uff1b\u4e5f\u5373\u6c42\u51fa $L,R$\uff0c\u4f7f\u5f97\uff1a\n\n1. \u533a\u95f4 $[L,R]$ \u662f\u597d\u533a\u95f4\uff1b\n2. $1 \\le L \\le l\\le r\\le R \\le n$\u3002\n\n\u5728\u6b64\u57fa\u7840\u4e0a\u4f7f\u5f97 $R-L$ \u6700\u5c0f\u3002\n\n$n,q \\le 10^5$\u3002\n\n\n\n### \u9898\u89e3\n\n\u7b54\u6848\u533a\u95f4\u663e\u7136\u662f\u5b58\u5728\u4e14\u552f\u4e00\u7684\u3002\n\n\u9996\u5148\u8bc1\u660e\u4e00\u4e2a\u6027\u8d28\uff1a\n\n- \u82e5 $[l_1, r_1]$ \u548c $[l_2,r_2]$ \u90fd\u662f\u597d\u533a\u95f4\uff0c\u4e14 $l_1 \\le l_2 \\le r_1 \\le r_2$\uff08\u5373\u4e24\u533a\u95f4\u6709\u4ea4\uff09\uff0c\u5219 $[l_1, r_2]$ \u4e5f\u662f\u597d\u533a\u95f4\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651\u533a\u95f4 $[l_2,r_1]$\uff0c\u5b83\u65e2\u5305\u542b\u5728 $[l_1,r_1]$ \u4e2d\u5143\u7d20\u7ec4\u6210\u7684\u8fde\u7eed\u6bb5\u4e2d\uff0c\u4e5f\u5305\u542b\u5728 $[l_2,r_2]$ \u4e2d\u5143\u7d20\u7ec4\u6210\u7684\u8fde\u7eed\u6bb5\u4e2d\u3002\u4e8e\u662f\u9700\u8981\u5bb9\u65a5\u4e00\u4e0b\uff1a\u533a\u95f4 $[l_1, r_2]$ \u5185\uff0c\u6ee1\u8db3 $|P_{i}-P_{j}|=1$ \u7684\u65e0\u5e8f\u5bf9 $(i,j)$ \u7684\u6570\u91cf\u4e3a $(r_1-l_1) + (r_2-l_2) - (r_1-l_2) = r_2 - l_1$\uff0c\u4e5f\u5373\u533a\u95f4 $[l_1, r_2]$ \u4e3a\u597d\u533a\u95f4\u3002\n\n\n\n\u5bf9\u4e8e $P$ \u4e2d\u76f8\u90bb\u5143\u7d20 $P_{i}, P_{i+1}$\uff0c\u8003\u8651\u6c42\u51fa\u5c06 $\\min(P_{i},P_{i+1})$ \u5230 $\\max(P_{i},P_{i+1})$ \u4e4b\u95f4\u6240\u6709\u5143\u7d20\u90fd\u5305\u542b\u7684\u6700\u5c0f\u533a\u95f4\uff0c\u8bb0\u4f5c $ml_{i}$ \u548c $mr_i$\u3002\u901a\u8fc7\u9884\u5904\u7406\u6392\u540d\u6570\u7ec4\u7684\u533a\u95f4\u6700\u5c0f/\u6700\u5927\u503c\u5373\u53ef\u67e5\u8be2\u3002\u90a3\u4e48\u5982\u679c\u8be2\u95ee\u533a\u95f4\u5305\u542b $[i,i+1]$\uff0c\u5219 $[ml_i, mr_{i}]$ \u90fd\u5fc5\u987b\u5305\u542b\u5176\u4e2d\u3002\u8fd9\u53ef\u4ee5\u56fe\u8bba\u5efa\u6a21\uff0c\u6709\u5411\u8fb9 $x\\to y$ \u7684\u610f\u4e49\u4e3a\u82e5 $x$ \u5728\u533a\u95f4\u4e2d\uff0c\u5219 $y$ \u4e5f\u5fc5\u987b\u5728\u533a\u95f4\u4e2d\u3002\n\n\u90a3\u4e48\u628a $i$ \u5411\u533a\u95f4 $[ml_i, mr_i]$ \u4e2d\u7684\u6240\u6709\u70b9\u8fde\u8fb9\u3002\u5219\u82e5 $i$ \u5728\u533a\u95f4\u4e2d\uff0c\u5219 $i$ \u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u7ed3\u70b9\u90fd\u5fc5\u987b\u5728\u533a\u95f4\u4e2d\u3002Tarjan + \u7f29\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 DAG \u4e0a \u62d3\u6251\u6392\u5e8f\u6216 dfs \u6c42\u51fa\u7f29\u70b9\u540e\u6bcf\u4e2a\u7ed3\u70b9\u6240\u7275\u8fde\u7684\u533a\u95f4\u5927\u5c0f\uff08\u5373\u9009\u4e86\u8be5\u7ed3\u70b9\u540e\uff0c\u6709\u591a\u5927\u7684\u533a\u95f4\u5fc5\u987b\u88ab\u9009\uff09\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u8bb0\u4e3a\u7ed3\u70b9\u7684\u7b54\u6848\u533a\u95f4\u3002\n\n\u73b0\u5728\u8003\u8651\u4e00\u6b21\u8be2\u95ee $[l,r]$\u3002\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c$[l,l+1], [l+1,l+2]\\dots[r-1,r]$ \u7684\u5bf9\u5e94\u7ed3\u70b9\u7684\u7b54\u6848\u533a\u95f4\u7684\u5e76\u3002\u7ef4\u62a4\u533a\u95f4\u53ef\u8fbe\u7684\u6700\u5de6\u7aef\u70b9\u548c\u6700\u53f3\u7aef\u70b9\u5373\u53ef\u67e5\u8be2\u3002\n\n\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u5b9e\u73b0\u4e2d\uff0c\u5efa\u56fe\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff1b\u533a\u95f4\u6700\u5c0f\u503c\u3001\u6700\u5927\u503c\u3001\u6700\u5de6\u7aef\u70b9\u548c\u6700\u53f3\u7aef\u70b9\u90fd\u53ef\u4ee5\u4f7f\u7528 ST \u8868\u5904\u7406\u3002\n\n``` cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n\n#define minn 0\n#define maxx 1\n\nusing namespace std;\n\nconst int MAXN = 100010;\n\nnamespace STtable\n{\n\nint lg[MAXN];\ninline void getLg(int n)\n{\n\tlg[0] = -1;\n\tfor(int i=1;i<=n;i++)\n\t\tlg[i] = lg[i>>1] + 1;\n}\n\nint f[2][MAXN][24];\ninline void build(int n)\n{\n\tfor(int j=1;(1<<j)<=n;j++)\n\t\tfor(int i=1;i+(1<<j)-1<=n;i++)\n\t\t{\n\t\t\tf[minn][i][j] = min(f[minn][i][j-1], f[minn][i+(1<<j-1)][j-1]);\n\t\t\tf[maxx][i][j] = max(f[maxx][i][j-1], f[maxx][i+(1<<j-1)][j-1]);\n\t\t}\n}\ninline int qrymax(int l, int r)\n{\n\tif(l > r) return 0;\n\tint k = lg[r-l+1];\n\treturn max(f[maxx][l][k], f[maxx][r-(1<<k)+1][k]);\n}\ninline int qrymin(int l, int r)\n{\n\tif(l > r) return 0;\n\tint k = lg[r-l+1];\n\treturn min(f[minn][l][k], f[minn][r-(1<<k)+1][k]);\n}\n\n}\nusing STtable::getLg;\nusing STtable::build;\nusing STtable::qrymax;\nusing STtable::qrymin;\n\nstruct edge{\n\tint ne, to;\n}g[MAXN<<3];\nint head[MAXN<<2], num = 0;\ninline void join(int a, int b)\n{\n\tg[++num].ne = head[a];\n\thead[a] = num;\n\tg[num].to = b;\n}\n\nint ind[MAXN];\n\nstruct node{\n\tint l, r;\n}t[MAXN<<2];\nint maxn = 0;\nvoid buildtree(int l, int r, int k)\n{\n\tt[k].l = l; t[k].r = r;\n\tif(l == r)\n\t{\n\t\tind[l] = k;\n\t\treturn ;\n\t}\n\tint mid = l+r>>1;\n\tjoin(k, k<<1); join(k, k<<1|1);\n\tbuildtree(l, mid, k<<1);\n\tbuildtree(mid+1, r, k<<1|1);\n}\nvoid addEdge(int l, int r, int pos, int k)\n{\n\tif(t[k].l >= l && t[k].r <= r)\n\t{\n\t\tif(pos != k) join(pos, k);\n\t\treturn ;\n\t}\n\tint mid = t[k].l+t[k].r>>1;\n\tif(l <= mid) addEdge(l, r, pos, k<<1);\n\tif(r >= mid+1) addEdge(l, r, pos, k<<1|1);\n}\n\nint dfn[MAXN<<2], low[MAXN<<2], cnt = 0, stk[MAXN<<2], top = 0;\nint pos[MAXN<<2], tot = 0;\nbool vis[MAXN<<2];\n\nvoid tarjan(int u)\n{\n\tdfn[u] = low[u] = ++cnt;\n\tvis[u] = 1;\n\tstk[++top] = u;\n\tfor(int i=head[u];i;i=g[i].ne)\n\t{\n\t\tint v = g[i].to;\n\t\tif(!dfn[v]) tarjan(v), low[u] = min(low[u], low[v]);\n\t\telse if(vis[v]) low[u] = min(low[u], dfn[v]);\n\t}\n\tif(low[u] == dfn[u])\n\t{\n\t\tpos[u] = ++tot;\n\t\tvis[u] = 0;\n\t\twhile(stk[top] != u)\n\t\t{\n\t\t\tpos[stk[top]] = tot;\n\t\t\tvis[stk[top]] = 0;\n\t\t\t--top;\n\t\t}\n\t\t--top;\n\t}\n}\nstruct newedge{\n\tint ne, to;\n}e[MAXN<<3];\nint fir[MAXN<<2];\ninline void joinnew(int a, int b)\n{\n\te[++num].ne = fir[a];\n\tfir[a] = num;\n\te[num].to = b;\n}\ninline void rebuild()\n{\n\tnum = 0;\n\tfor(int u=1;u<=maxn;u++)\n\t{\n\t\tfor(int i=head[u];i;i=g[i].ne)\n\t\t{\n\t\t\tint v = g[i].to;\n\t\t\tif(pos[u] != pos[v]) joinnew(pos[u], pos[v]);\n\t\t}\n\t}\n}\n\nint vl[2][MAXN<<2], nw[2][MAXN<<2];\n\nvoid dfs(int u)\n{\n\tif(vis[u]) return ;\n\tvis[u] = 1;\n\tfor(int i=fir[u];i;i=e[i].ne)\n\t{\n\t\tint v = e[i].to;\n\t\tdfs(v);\n\t\tnw[minn][u] = min(nw[minn][u], nw[minn][v]);\n\t\tnw[maxx][u] = max(nw[maxx][u], nw[maxx][v]);\n\t}\n}\n\nint n, m, p[MAXN], tmp[MAXN];\n\nint main()\n{\n\tfreopen(\"perm.in\",\"r\",stdin);\n\tfreopen(\"perm.out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&p[i]);\n\tbuildtree(1, n, 1);\n\tgetLg(n);\n\tfor(int i=1;i<=n;i++)\n\t\tSTtable::f[minn][p[i]][0] = STtable::f[maxx][p[i]][0] = i;\n\tbuild(n);\n\tmaxn = (n<<2)-1;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x = min(p[i], p[i+1]), y = max(p[i], p[i+1]);\n\t\tvl[minn][i] = qrymin(x, y);\n\t\tvl[maxx][i] = qrymax(x, y);\n\t\taddEdge(vl[minn][i], vl[maxx][i]-1, ind[i], 1);\n\t}\n\tfor(int i=1;i<=maxn;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\trebuild();\n\tfor(int i=1;i<=tot;i++)\n\t\tnw[minn][i] = n+1, nw[maxx][i] = 0;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tnw[minn][pos[ind[i]]] = min(nw[minn][pos[ind[i]]], vl[minn][i]);\n\t\tnw[maxx][pos[ind[i]]] = max(nw[maxx][pos[ind[i]]], vl[maxx][i]);\n\t}\n\tmemset(vis, 0, sizeof(vis));\n\tfor(int i=1;i<=tot;i++)\n\t\tdfs(i);\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=0;j<2;j++)\n\t\t\tSTtable::f[j][i][0] = nw[j][pos[ind[i]]];\n\tbuild(n-1);\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t{\n\t\tint l, r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tif(l == r) printf(\"%d %d\\n\",l,r);\n\t\telse printf(\"%d %d\\n\",qrymin(l, r-1),qrymax(l, r-1));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1617370079,
        "uid": 151601,
        "name": "Aphros",
        "ccfLevel": 0,
        "title": "CERC2017 Intrinsic Interval \u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a**\u6790\u5408\u6811**\n\n\u5904\u7406\u8fde\u7eed\u6bb5\u95ee\u9898\u7684\u5229\u5668\n\n\u5177\u4f53\u5b66\u4e60\u53ef\u4ee5\u770b[oiwiki](https://oi-wiki.org/ds/divide-combine/)\u5199\u7684\u975e\u5e38\u8be6\u7ec6\n\n\u7528\u5230\u4e86\u4e00\u4e2a$st$\u8868\uff0c\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4e00\u4e2a\u80fd\u627e$lca$\u7684\u73a9\u610f\u548c\u4e09\u4e2a\u5355\u8c03\u6808\n\n\u7136\u540e\u6211\u5c31\u5199\u4e86$class$\u5957$class$\u5957$struct$\u8fd8\u6307\u9488\u7684\u540a\u70b8\u5929\u5c01\u88c5\n\n\u627e$lca$\u7684\u73a9\u610f\u6211\u7528\u4e86\u6811\u5256\uff0c\u540c\u65f6\u8fd8\u8981\u627e\u5230\u4e00\u4e2a\u70b9\u5230$lca$\u8def\u5f84\u4e0a\uff0c\u4ece$lca$\u5012\u7740\u6570\u7684\u7b2c\u4e8c\u4e2a\u70b9\u8bb0\u4f5c$pre(x,lca)$\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee$[l,r]$\uff0c\u627e\u5230$l$,$r$\u5728\u6790\u5408\u6811\u4e0a\u7684\u70b9$l->x$,$r->y$\uff0c\u7136\u540e\u627e\u5230$z=lca(x,y)$\uff0c\u5982\u679cz\u662f\u5408\u70b9\uff0c\u7b54\u6848\u662f$[L[pre(x,z)],R[pre(y,z)]]$\n```cpp\n#include<cstdio>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();bool f=0;\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntemplate<class type>inline const type min(const type &a,const type &b)\n{\n\treturn a<b?a:b;\n}\nconst int N=1e5+10;\nint n,m,a[N];\nclass Divide_Combine_Tree\n{\n\tprivate:\n\t\ttemplate<int maxn,int logn>class ST_Table\n\t\t{\n\t\t\tprivate:\n    \t\t\tint log2[maxn],pow2[logn],mn[maxn][logn],mx[maxn][logn];\n    \t\tpublic:\n  \t\t\t\tinline const void build(int n,int *a)\n\t\t\t\t{\n    \t\t\t\tfor (int i=pow2[0]=1;i<logn;i++)pow2[i]=pow2[i-1]<<1;\n    \t\t\t\tfor (int i=2;i<=n;i++)log2[i]=log2[i>>1]+1;\n    \t\t\t\tfor (int i=1;i<=n;i++)mn[i][0]=mx[i][0]=a[i];\n    \t\t\t\tfor (int j=1;j<logn;j++)\n      \t\t\t\tfor (int i=1;i+pow2[j]-1<=n;i++)\n\t        \t\t\tmn[i][j]=min(mn[i][j-1],mn[i+pow2[j-1]][j-1]),\n    \t\t    \t\tmx[i][j]=max(mx[i][j-1],mx[i+pow2[j-1]][j-1]);\n  \t\t\t\t}\n\t  \t\t\tinline const int querymin(int l,int r)\n  \t\t\t\t{\n  \t\t\t\t\tint k=log2[r-l+1];\n  \t\t\t\t\treturn min(mn[l][k],mn[r-pow2[k]+1][k]);\n  \t\t\t\t}\n  \t\t\t\tinline const int querymax(int l,int r)\n  \t\t\t\t{\n\t\t  \t\t\tint k=log2[r-l+1];\n  \t\t\t\t\treturn max(mx[l][k],mx[r-pow2[k]+1][k]);\n\t  \t\t\t}\n\t\t};\n\t\tST_Table<N,17>st;\n\t\tclass Segment_Tree\n\t\t{\n\t\t\tprivate:\n\t\t\t\tstruct tree\n\t\t\t\t{\n\t\t\t\t\tint mn,add;\n\t\t\t\t\ttree *lson,*rson;\n\t\t\t\t\tinline const void plus(int w)\n\t\t\t\t\t{\n\t\t\t\t\t\tmn+=w;add+=w;\n\t\t\t\t\t}\n\t\t\t\t\tinline const void pushup()\n\t\t\t\t\t{\n\t\t\t\t\t\tmn=min(lson->mn,rson->mn);\n\t\t\t\t\t}\n\t\t\t\t\tinline const void pushdown()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (add)\n\t\t\t\t\t\t\tlson->plus(add),\n\t\t\t\t\t\t\trson->plus(add),\n\t\t\t\t\t\t\tadd=0;\n\t\t\t\t\t}\n\t\t\t\t\tinline const void update(int l,int r,int L,int R,int w)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (l>R||r<L)return;\n\t\t\t\t\t\tif (l>=L&&r<=R)return plus(w);\n\t\t\t\t\t\tpushdown();\n\t\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\t\tlson->update(l,mid,L,R,w);\n\t\t\t\t\t\trson->update(mid+1,r,L,R,w);\n\t\t\t\t\t\tpushup();\n\t\t\t\t\t}\n\t\t\t\t\tinline const int query(int l,int r)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (l==r)return l;\n\t\t\t\t\t\tpushdown();\n\t\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\t\tif (!lson->mn)return lson->query(l,mid);\n\t\t\t\t\t\telse rson->query(mid+1,r);\n\t\t\t\t\t}\n\t\t\t\t}*root,memory_pool[N<<1],*tail;\n\t\t\t\tinline const void build(tree *&p,int l,int r)\n\t\t\t\t{\n\t\t\t\t\tp=tail++;\n\t\t\t\t\tif (l==r)return;\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tbuild(p->lson,l,mid);\n\t\t\t\t\tbuild(p->rson,mid+1,r);\n\t\t\t\t}\n\t\t\tpublic:\n\t\t\t\tinline const void build()\n\t\t\t\t{\n\t\t\t\t\ttail=memory_pool;build(root,1,n);\n\t\t\t\t}\n\t\t\t\tinline const void update(int l,int r,int w)\n\t\t\t\t{\n\t\t\t\t\troot->update(1,n,l,r,w);\n\t\t\t\t}\n\t\t\t\tinline const int query()\n\t\t\t\t{\n\t\t\t\t\treturn root->query(1,n);\n\t\t\t\t}\n\t\t}sgt;\n\t\ttemplate<int maxn>class Heavy_Light_Decomposition\n\t\t{\n\t\t\tprivate:\n\t\t\t\tint head[maxn],edc,next[maxn],to[maxn],top[maxn],wson[maxn],size[maxn],dep[maxn],fa[maxn],dfn[maxn],dot[maxn];\n\t\t\t\tinline const void dfs(int p)\n\t\t\t\t{\n\t\t\t\t\tsize[p]=1;\n\t\t\t\t\tfor (int i=head[p];i;i=next[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tint son=to[i];\n\t\t\t\t\t\tfa[son]=p;dep[son]=dep[p]+1;\n\t\t\t\t\t\tdfs(son);size[p]+=size[son];\n\t\t\t\t\t\tif (size[son]>size[wson[p]])wson[p]=son;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tinline const void dfs(int p,int tp)\n\t\t\t\t{\n\t\t\t\t\ttop[p]=tp;dot[dfn[p]=++*dfn]=p;\n\t\t\t\t\tif (wson[p])dfs(wson[p],tp);\n\t\t\t\t\tfor (int i=head[p];i;i=next[i])\n\t\t\t\t\t\tif (!top[to[i]])\n\t\t\t\t\t\t\tdfs(to[i],to[i]);\n\t\t\t\t}\n\t\t\tpublic:\n\t\t\t\tinline const void build(int root)\n\t\t\t\t{\n\t\t\t\t\tdfs(root);dfs(root,root);\n\t\t\t\t}\n\t\t\t\tinline const void addedge(int u,int v)\n\t\t\t\t{\n\t\t\t\t\tnext[++edc]=head[u];to[head[u]=edc]=v;\n\t\t\t\t}\n\t\t\t\tinline const int lca(int a,int b)\n\t\t\t\t{\n\t\t\t\t\twhile (top[a]^top[b])\n\t\t\t\t\t\tdep[top[a]]>dep[top[b]]\n\t\t\t\t\t\t?a=fa[top[a]]:b=fa[top[b]];\n\t\t\t\t\treturn dep[a]<dep[b]?a:b;\n\t\t\t\t}\n\t\t\t\tinline const int pre(int p,int lca)\n\t\t\t\t{\n\t\t\t\t\tint last=p;\n\t\t\t\t\twhile (top[p]^top[lca])p=fa[last=top[p]];\n\t\t\t\t\treturn p==lca?last:dot[dfn[lca]+1];\n\t\t\t\t}\n\t\t};\n\t\tHeavy_Light_Decomposition<N<<1>hld;\n\t\tinline const bool canmerge(int l,int r)\n\t\t{\n\t\t\treturn st.querymax(l,r)-st.querymin(l,r)==r-l;\n\t\t}\n\t\tbool com[N<<1];\n\t\tint s1[N],s2[N],s[N],top1,top2,top,id[N],l[N<<1],r[N<<1],m[N<<1];\n\tpublic:\n\t\tinline const void build()\n\t\t{\n\t\t\tst.build(n,a);sgt.build();\n    \t\tfor (int i=1;i<=n;i++)\n\t\t\t{\n    \t\t\tfor (;top1&&a[i]<=a[s1[top1]];top1--)sgt.update(s1[top1-1]+1,s1[top1],a[s1[top1]]);\n    \t\t\tfor (;top2&&a[i]>=a[s2[top2]];top2--)sgt.update(s2[top2-1]+1,s2[top2],-a[s2[top2]]);\n\t\t\t\tsgt.update(s1[top1]+1,i,-a[i]);s1[++top1]=i;\n    \t\t\tsgt.update(s2[top2]+1,i,a[i]);s2[++top2]=i;\n    \t\t\tid[i]=++*id;l[*id]=r[*id]=i;\n    \t\t\tint lm=sgt.query(),now=*id;\n    \t\t\twhile (top&&l[s[top]]>=lm)\n\t\t\t\t{\n      \t\t\t\tif (com[s[top]]&&canmerge(m[s[top]],i))\n\t\t\t\t\t{\n\t\t\t\t\t\tr[s[top]]=i;\n\t\t\t\t\t\thld.addedge(s[top],now);\n\t\t\t\t\t\tnow=s[top--];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n      \t\t\t\tif (canmerge(l[s[top]],i))\n      \t\t\t\t{\n\t\t\t\t\t  \tcom[++*id]=1;\n\t\t\t\t\t\tl[*id]=l[s[top]];r[*id]=i;m[*id]=l[now];\n\t\t\t\t\t\thld.addedge(*id,s[top--]);hld.addedge(*id,now);\n\t\t\t\t\t\tnow=*id;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n        \t\t\thld.addedge(++*id,now);\n        \t\t\tdo hld.addedge(*id,s[top--]);while (top&&!canmerge(l[s[top]],i));\n        \t\t\tl[*id]=l[s[top]];r[*id]=i;\n\t\t\t\t\thld.addedge(*id,s[top--]);\n        \t\t\tnow=*id;\n    \t\t\t}\n    \t\ts[++top]=now;\n    \t\tsgt.update(1,i,-1);\n  \t\t}\n  \t\thld.build(s[1]);\n  \t}\n  \tinline const void query(int a,int b)\n  \t{\n  \t\tint x=id[a],y=id[b],z=hld.lca(x,y);\n  \t\tif (com[z])printf(\"%d %d\\n\",l[hld.pre(x,z)],r[hld.pre(y,z)]);\n  \t\telse printf(\"%d %d\\n\",l[z],r[z]);\n  \t}\n}dct;\nint main()\n{\n\tread(n);\n\tfor (int i=1;i<=n;i++)read(a[i]);\n\tread(m);\n\tdct.build();\n\tfor (int l,r;m--;)read(l),read(r),dct.query(l,r);\n\treturn 0;\n}\n```",
        "postTime": 1572174330,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4747 \u3010[CERC2017]Intrinsic Interval\u3011"
    },
    {
        "content": "\u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u9898\u3002\n\n\u4e0b\u9762\u628a\u9898\u76ee\u4e2d\u6240\u63d0\u5230\u7684\u533a\u95f4\u79f0\u4e3a\u597d\u533a\u95f4\u3002\n\n\u9996\u5148\u770b\u5230\u9898\u4f60\u53ef\u80fd\u4f1a\u6bd4\u8f83\u61f5\uff0c\u4e3a\u5565\u7b54\u6848\u662f\u552f\u4e00\u7684\u5462\uff1f\n\n\u8003\u8651\u4e24\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u597d\u533a\u95f4\uff0c\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4ed6\u4eec\u7684\u4ea4\u4e5f\u4f1a\u7b26\u5408\u6761\u4ef6\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u7684\u7b54\u6848\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5de6\u8fb9\u5fc5\u5b9a\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5b58\u5728\u4e00\u4e2a\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u597d\u533a\u95f4\u80fd\u8986\u76d6\u6211\u4eec\u7684\u8be2\u95ee\u533a\u95f4\u3002\n\n\u90a3\u6211\u4eec\u79bb\u7ebf\u626b\u63cf\u7ebf\uff0c\u7ef4\u62a4\u4ee5\u5f53\u524d\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u6240\u6709\u597d\u533a\u95f4\u3002\n\n\u600e\u4e48\u7ef4\u62a4\u5462\u6bd4\u8f83\u5957\u8def\uff0c\u4f60\u53ef\u4ee5\u53bb\u770b CF526F \u7684\u9898\u89e3\u3002\n\n\u6240\u6709\u7684\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u7b2c\u4e00\u6b21\u88ab\u8986\u76d6\u7684\u8be2\u95ee\u5c31\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u7b54\u6848\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u51fa\u5b83\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u597d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u987a\u4fbf\u8bb2\u4e00\u4e0b\u600e\u4e48\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u4e8c\u5206\uff1a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\u5148\u627e\u5230\u88ab\u8fd9\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u6240\u6709\u8282\u70b9\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u679a\u4e3e\uff0c\u679a\u4e3e\u5230\u7b2c\u4e00\u4e2a\u91cc\u9762\u6709\u7b26\u5408\u6761\u4ef6\u7684\u4f4d\u7f6e\u7684\u8bdd\u5c31\u5728\u8fd9\u4e2a\u8282\u70b9\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\n\n\u90a3\u6211\u4eec\u7684\u96be\u70b9\u5c31\u4e3b\u8981\u96c6\u4e2d\u5728\u5982\u4f55\u627e\u51fa\u6240\u6709\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u7b54\u6848\u7684\u8be2\u95ee\u3002\u8fd9\u91cc\u6211\u60f3\u4e86\u633a\u4e45\u3002\n\n\u5efa\u4e00\u4e2a\u5806\u5b58\u4e0b\u53f3\u7aef\u70b9\u5728\u5f53\u524d\u626b\u63cf\u5230\u7684\u70b9\u5de6\u8fb9\u7684\u6240\u6709\u8be2\u95ee\uff0c\u6309\u8be2\u95ee\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\u7136\u540e\u7ebf\u6bb5\u6811\u4e0a\u53ef\u4ee5\u7ef4\u62a4\u6700\u5de6\u8fb9\u7684\u597d\u533a\u95f4\u5de6\u7aef\u70b9\u3002\u6bcf\u6b21\u4e00\u76f4\u53d6\u5806\u9876\u76f4\u5230\u5806\u9876\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u5c0f\u4e8e\u6700\u5de6\u7684\u597d\u533a\u95f4\u7aef\u70b9\u5373\u53ef\u3002\n```cpp\n#include<queue>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=1e5+5;\nint n,m,a[maxn];\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint mn,mmn,add;\n\tvoid pushup(){\n\t\tif(ch[0]->mn<=ch[1]->mn){\n\t\t\tmn=ch[0]->mn;\n\t\t\tmmn=ch[0]->mmn;\n\t\t}\n\t\telse{\n\t\t\tmn=ch[1]->mn;\n\t\t\tmmn=ch[1]->mmn;\n\t\t}\n\t}\n\tnode(int l,int r):l(l),r(r),mn(l),mmn(l),add(0){\n\t\tif(l<r){\n\t\t\tint mid=l+(r-l)/2;\n\t\t\tch[0]=new node(l,mid);\n\t\t\tch[1]=new node(mid+1,r);\n\t\t}\n\t}\n\tvoid pushtag(int k){\n\t\tadd+=k;\n\t\tmn+=k;\n\t}\n\tvoid pushdown(){\n\t\tch[0]->pushtag(add);\n\t\tch[1]->pushtag(add);\n\t\tadd=0;\n\t}\n\tvoid modify(int ql,int qr,int k){\n\t\tif(ql<=l&&qr>=r){\n\t\t\tpushtag(k);\n\t\t\treturn;\n\t\t}\n\t\tpushdown();\n\t\tif(ql<=ch[0]->r) ch[0]->modify(ql,qr,k);\n\t\tif(qr>=ch[1]->l) ch[1]->modify(ql,qr,k);\n\t\tpushup();\n\t}\n\tvoid query1(int ql,int qr,vector<node*>& res){\n\t\tif(ql<=l&&qr>=r){\n\t\t\tres.push_back(this);\n\t\t\treturn;\n\t\t}\n\t\tpushdown();\n\t\tif(ql<=ch[0]->r) ch[0]->query1(ql,qr,res);\n\t\tif(qr>=ch[1]->l) ch[1]->query1(ql,qr,res);\n\t}\n\tint query2(int x){\n\t\tif(l==r) return r;\n\t\tpushdown();\n\t\tif(ch[1]->mn<=x) return ch[1]->query2(x);\n\t\telse return ch[0]->query2(x);\n\t}\n}*rt;\ntypedef pair<int,int> pii;\nvector<pii> q[maxn];\nint ansl[maxn],ansr[maxn];\nint s1[maxn],top1=0,s2[maxn],top2=0;\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tfor(int i=1;i<=n;i++) a[i]=readint();\n\tm=readint();\n\tfor(int i=0;i<m;i++){\n\t\tint l,r;\n\t\tl=readint();\n\t\tr=readint();\n\t\tq[r].push_back(pii(l,i));\n\t}\n\trt=new node(1,n);\n\tpriority_queue<pii,vector<pii> > pq;\n\tfor(int i=1;i<=n;i++){\n\t\twhile(top1&&a[i]>a[s1[top1]]){\n\t\t\trt->modify(s1[top1-1]+1,s1[top1],-a[s1[top1]]);\n\t\t\ttop1--;\n\t\t}\n\t\trt->modify(s1[top1]+1,i,a[i]);\n\t\ts1[++top1]=i;\n\t\twhile(top2&&a[i]<a[s2[top2]]){\n\t\t\trt->modify(s2[top2-1]+1,s2[top2],a[s2[top2]]);\n\t\t\ttop2--;\n\t\t}\n\t\trt->modify(s2[top2]+1,i,-a[i]);\n\t\ts2[++top2]=i;\n\t\tfor(int j=0;j<(int)q[i].size();j++) pq.push(q[i][j]);\n\t\twhile(!pq.empty()&&rt->mmn<=pq.top().first){\n\t\t\tansr[pq.top().second]=i;\n\t\t\tvector<node*> res;\n\t\t\trt->query1(1,pq.top().first,res);\n\t\t\tfor(int j=(int)res.size()-1;j>=0;j--) if(res[j]->mn<=i){\n\t\t\t\tansl[pq.top().second]=res[j]->query2(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpq.pop();\n\t\t}\n\t}\n\tfor(int i=0;i<m;i++) printf(\"%d %d\\n\",ansl[i],ansr[i]);\n\treturn 0;\n}\n```",
        "postTime": 1594557179,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4747 \u3010[CERC2017]Intrinsic Interval\u3011"
    }
]