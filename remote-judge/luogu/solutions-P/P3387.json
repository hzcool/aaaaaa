[
    {
        "content": "\u7f29\u70b9\uff0c\u5c31\u662f\u628a\u4e00\u5f20\u6709\u5411\u6709\u73af\u56fe\u4e2d\u7684\u73af\u7f29\u6210\u4e00\u4e2a\u4e2a\u70b9\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u9996\u5148\u6211\u4ecb\u7ecd\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u9898\u8981\u7f29\u70b9\uff08\u6709\u4eba\u80af\u5b9a\u89c9\u5f97\u8fd9\u662f\u653e\u5c41\uff0c\u8fd9\u4e0d\u5c31\u662f\u7f29\u70b9\u7684\u6a21\u677f\u9898\u5417\uff1f\u4f46\u6211\u4eec\u4e0d\u80fd\u8fd9\u4e48\u60f3\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u4e0d\u4f1a\u6709\u4eba\u544a\u8bc9\u4f60\u6253\u4ec0\u4e48\u677f\u4e0a\u53bb\u5427\uff09\n\n\u6839\u636e\u9898\u76ee\u610f\u601d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa\u4e00\u6761\u70b9\u6743\u6700\u5927\u7684\u8def\u5f84\u5c31\u884c\u4e86\uff0c\u4e0d\u9650\u5236\u70b9\u7684\u4e2a\u6570\u3002\u90a3\u4e48\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u4e00\u6574\u6761\u73af\u662f\u4e0d\u662f\u5e94\u8be5\u90fd\u88ab\u9009\u62e9\uff0c\u8fd9\u4e00\u5b9a\u5f88\u4f18\uff0c\u80fd\u9009\u5e72\u561b\u4e0d\u9009\u3002\u5f88\u5173\u952e\u7684\u662f\u9898\u76ee\u8fd8\u5141\u8bb8\u6211\u4eec\u91cd\u590d\u7ecf\u8fc7\u67d0\u6761\u8fb9\u6216\u8005\u67d0\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u8003\u8651\u5176\u4ed6\u4e86\u3002\u56e0\u6b64\u6574\u4e2a\u73af\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u70b9\uff08\u9009\u4e86\u5176\u4e2d\u4e00\u4e2a\u70b9\u5c31\u5e94\u8be5\u9009\u5176\u4ed6\u7684\u70b9\uff09\n\n\u90a3\u4e48\u5c31\u6b63\u5f0f\u5f00\u59cb\u7f29\u73af\u4e3a\u70b9\u4e86\u3002\u5f53\u7136\u4e86\uff0c\u9996\u5148\u80af\u5b9a\u662f\u627e\u73af\uff0c\u4e3a\u5927\u5bb6\u63a8\u8350\u4e24\u7bc7\u535a\u5ba2\uff08\u4e0d\u662f\u6211\u5ba3\u4f20\uff0c\u8fd9\u4e24\u7bc7\u535a\u5ba2\u4e5f\u53ea\u662f\u6211\u627e\u7684[]\n(http://blog.csdn.net/acmmmm/article/details/16361033)\uff09[](http://blog.csdn.net/sentimental_dog/article/details/53790582)\n\n\u5e0c\u671b\u535a\u5ba2\u88ab\u6211\u8f6c\u8f7d\u7684\u535a\u4e3b\u4e0d\u8981\u4ecb\u610f\u3002\n\n\u770b\u770b\u8fd9\u4e24\u7bc7\u535a\u5ba2\uff0c\u6211\u89c9\u5f97\u5927\u5bb6\u5c31\u6709\u4e86\u4e00\u4e2a\u57fa\u672c\u8ba4\u8bc6\u4e86\u3002\u5728\u7f29\u70b9\u64cd\u4f5c\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u662f\u7ef4\u62a4\u4e09\u4e2a\u4e1c\u897f\uff0c\u5b83\u4eec\u5728\u6211\u4ee3\u7801\u91cc\u5206\u522b\u662fstac\uff08\u6808\uff09\uff08ps\uff1a\u4e4b\u6240\u4ee5\u4e0d\u52a0k\u662f\u56e0\u4e3a\u4e07\u80fd\u5934\u6587\u4ef6\u7684\u837c\u6bd2\uff09\uff0cdfn\uff08\u65f6\u95f4\u6233\uff09\uff0clow(\u591f\u8ffd\u6eaf\u5230\u7684\u6700\u65e9\u7684\u6808\u4e2d\u8282\u70b9\u7684\u6b21\u5e8f\u53f7)\uff0c\u8be6\u7ec6\u7684\u89e3\u91ca\u5728\u4ee3\u7801\u6ce8\u91ca\u91cc\u3002\n\n\u4e0b\u9762\u5c31\u662f\u8003\u8651\u5bf9\u8fd9\u4e09\u4e2a\u4e1c\u897f\u7684\u8fd0\u7528\u3002\u8be6\u7ec6\u53c2\u8003\u535a\u5ba2\uff08\u535a\u5ba2\u5e26\u56fe\uff09\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53dfn[u]==low[u]\u65f6\uff0c\u8868\u660eu\u4e00\u5b9a\u662f\u73af\u4e0a\u7684\u4e00\u70b9\uff0c\u4e14\u73af\u4e0a\u7684\u5176\u4ed6\u70b9\u5c31\u662fu\u7684\u5b50\u6811\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u770b\u4ee3\u7801  \nlow[x]=dfn[x]=++tim;\n           \nlow[x]=min(low[x],low[v]);\n\n\u6211\u622a\u53d6\u4e86\u4e24\u53e5\u4ee3\u7801\uff0c\u7b2c\u4e00\u53e5\u662f\u5bf9\u70b9x\u7684low\uff0cdfn\u7684\u521d\u59cb\u5316\u3002\u5728\u4e4b\u540e\u7684\u64cd\u4f5c\u4e2d,low[x]\u59cb\u7ec8\u53d6\u81ea\u5df1\u5b50\u6811low[v]\u7684\u8f83\u5c0f\u503c\uff0c\u90a3\u4e48\u4ec0\u4e48\u60c5\u51b5\u4f1a\u4f7f\u5f97dfn[u]\u53c8\u201c\u91cd\u65b0\u201d\u548clow[u]\u76f8\u7b49\u5462\uff0c\u5c31\u662f\u5728u\u7684\u5b50\u6811\u4e2d\u6709\u4e00\u6761\u8fb9\uff08\u5c31\u662f\u535a\u5ba21\u4e2d\u7684\u540e\u5411\u8fb9\uff09\u76f4\u63a5\u6307\u56de\u4e86u\u3002\u8fd9\u6837\u4e0d\u5c31\u662f\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u4e86\u5417\uff1f\n\n\u4e4b\u540e\u5c31\u662f\u628a\u73af\u4e0a\u6240\u6709\u7684\u70b9\u7684sd\u90fd\u53d8\u6210\u8fd9\u4e2au\uff0c\u5373\u7528u\u4ee3\u66ff\u6574\u4e2a\u73af\uff0c\u5e76\u628a\u6743\u503c\u96c6\u4e2d\u5728u\u4e0a\n\n\u8fd8\u6709\u503c\u5f97\u6ce8\u610f\u7684\uff0c\u8fd9\u4e2a\u6808\u8868\u793a\u7684\u7a76\u7adf\u662f\u4ec0\u4e48\uff1f\uff08\u8fd9\u4e2a\u5728\u535a\u5ba21\u4e2d\u4e5f\u6709\uff09\uff0c\u6839\u636e\u6211\u7684\u7406\u89e3\u8868\u793a\u7684\u662f\u5f53\u524d\u641c\u7d22\u7684\u4e00\u6761\u94fe\u4e0a\u7684\u4e00\u4e2a\u4e2a\u70b9\u5427\u3002\n\n\u4e0b\u9762\u6211\u9644\u4e0a\u4ee3\u7801\u5148\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=10000+15;\nint n,m,sum,tim,top,s;\nint p[maxn],head[maxn],sd[maxn],dfn[maxn],low[maxn];//DFN(u)\u4e3a\u8282\u70b9u\u641c\u7d22\u88ab\u641c\u7d22\u5230\u65f6\u7684\u6b21\u5e8f\u7f16\u53f7(\u65f6\u95f4\u6233)\uff0cLow(u)\u4e3au\u6216u\u7684\u5b50\u6811\u80fd\u591f\u8ffd\u6eaf\u5230\u7684\u6700\u65e9\u7684\u6808\u4e2d\u8282\u70b9\u7684\u6b21\u5e8f\u53f7 \nint stac[maxn],vis[maxn];//\u6808\u53ea\u4e3a\u4e86\u8868\u793a\u6b64\u65f6\u662f\u5426\u6709\u7236\u5b50\u5173\u7cfb \nint h[maxn],in[maxn],dist[maxn];\nstruct EDGE\n{\n\tint to;int next;int from;\n}edge[maxn*10],ed[maxn*10];\nvoid add(int x,int y)\n{\n\tedge[++sum].next=head[x];\n\tedge[sum].from=x;\n\tedge[sum].to=y;\n\thead[x]=sum;\n}\nvoid tarjan(int x)\n{\n\tlow[x]=dfn[x]=++tim;\n\tstac[++top]=x;vis[x]=1;\n\tfor (int i=head[x];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (!dfn[v]) {\n\t\ttarjan(v);\n\t\tlow[x]=min(low[x],low[v]);\n\t}\n\t    else if (vis[v])\n\t    {\n\t    \tlow[x]=min(low[x],low[v]);\n\t\t}\n\t}\n\tif (dfn[x]==low[x])\n\t{\n\t\tint y;\n\t\twhile (y=stac[top--])\n\t\t{\n\t\t\tsd[y]=x;\n\t\t\tvis[y]=0;\n\t\t\tif (x==y) break;\n\t\t\tp[x]+=p[y];\n\t\t}\n\t}\n}\nint topo()\n{\n\tqueue <int> q;\n\tint tot=0;\n\tfor (int i=1;i<=n;i++)\n\tif (sd[i]==i&&!in[i])\n\t{\n\t\tq.push(i);\n        dist[i]=p[i];\n\t } \n\twhile (!q.empty())\n\t{\n\t\tint k=q.front();q.pop();\n\t\tfor (int i=h[k];i;i=ed[i].next)\n\t\t{\n\t\t\tint v=ed[i].to;\n\t\t\tdist[v]=max(dist[v],dist[k]+p[v]);\n\t\t\tin[v]--;\n\t\t\tif (in[v]==0) q.push(v);\n\t\t}\n\t}\n    int ans=0;\n    for (int i=1;i<=n;i++)\n    ans=max(ans,dist[i]);\n    return ans;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++)\n\tscanf(\"%d\",&p[i]);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t}\n\tfor (int i=1;i<=n;i++)\n\tif (!dfn[i]) tarjan(i);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint x=sd[edge[i].from],y=sd[edge[i].to];\n\t\tif (x!=y)\n\t\t{\n\t\t\ted[++s].next=h[x];\n\t\t\ted[s].to=y;\n\t\t\ted[s].from=x;\n\t\t\th[x]=s;\n\t\t\tin[y]++;\n\t\t}\n\t}\n\tprintf(\"%d\",topo());\n\treturn 0;\n}\n```\n\n\u5728\u5904\u7406\u4e86\u73af\u540e\uff0c\u6211\u4eec\u5c31\u91cd\u65b0\u5efa\u7acb\u4e00\u5f20\u56fe\uff0c\u4ee5\u6bcf\u4e2a\u73af\u4e3a\u8282\u70b9\uff08\u5b64\u7acb\u4e00\u4e2a\u70b9\u4e5f\u7b97\u4e5f\u7b97\u73af\u7684\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u5f3a\u8054\u901a\u5206\u91cf\u4e86\uff09\u3002\u5728\u8fd9\u5f20\u56fe\u4e2d\u6211\u4eec\u8981dp\uff0c\u663e\u7136\u5bf9\u4e8e\u4efb\u610f\u8fb9<u,v>,dp[v]=max(dp[v],dp[u]+p[v])\uff0cp[v]\u662fv\u662f\u8fd9\u4e2a\u73af\u7684\u603b\u6743\u503c\u3002\n\n\u90a3\u4e48\u600e\u4e48\u89e3\u51b3\u65e0\u540e\u6548\u6027\u95ee\u9898\u5462\uff1f\u7b54\u6848\u5c31\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u5728\u6211\u7684\u53e6\u4e00\u7bc7\u9898\u89e3\u91cc\u6211\u6709\u63d0\u53ca\u3002\u8fd9\u4e0b\u6211\u6709\u5b89\u5229\u5acc\u7591\u4e86\uff0c\u4f46\u6211\u8fd8\u662f\u5e0c\u671b\u5927\u5bb6\u53bb\u770b\u4e00\u770b\uff0c\u4e0b\u9762\u6211\u9644\u4e0a\u94fe\u63a5\u3002\n\n[](https://www.luogu.org/blog/xxzh2425/p1137-lv-xing-ji-hua-ti-xie)\n\u8fd9\u4e5f\u662f\u4e00\u7bc7\u9898\u89e3\uff0c\u5176\u5b9e\u4e3b\u8981\u8bb2\u7684\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u89e3\u51b3DP\u7684\u65e0\u540e\u6548\u6027\u95ee\u9898\u4e86\n\n\u90a3\u4e48\u5c31\u8bb2\u5b8c\u4e86\uff0c\u5982\u679c\u6709\u5e2e\u52a9\uff0c\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u541d\u556c\u81ea\u5df1\u7684\u8d5e\u3002",
        "postTime": 1519699903,
        "uid": 63019,
        "name": "\u661f\u661f\u4e4b\u706b",
        "ccfLevel": 0,
        "title": "P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9"
    },
    {
        "content": "\uff08\u642c\u4e00\u4e0b\u672c\u4ebatarjan blog\uff09\n\n\u672c\u4eba\u5199\u8fd9\u9053\u9898\u7684\u601d\u8def\u6bd4\u8f83\u6076\u5fc3\uff1atarjan\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f+dp\n\n\u4e0d\u8fc7\u5b66\u4e00\u4e0b\u62d3\u6251\u5bf9\u5927\u5bb6\u4e5f\u6709\u597d\u5904\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u662f\u597d\u5b66\u7684OIer\u3002\n\n# $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  \\     $\u5f3a\u8fde\u901a\u5206\u91cf\u4e0e\u62d3\u6251\u6392\u5e8f\n\n## \u62d3\u6251\u6392\u5e8f\n\n$ \\ \\ \\ \\ \\ \\ $\u5bf9\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe(Directed Acyclic Graph\u7b80\u79f0DAG)G\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u662f\u5c06G\u4e2d\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9u\u548cv\uff0c\u82e5\u8fb9(u,v)\u2208E(G)\uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728v\u4e4b\u524d\u3002\u901a\u5e38\uff0c\u8fd9\u6837\u7684\u7ebf\u6027\u5e8f\u5217\u79f0\u4e3a\u6ee1\u8db3\u62d3\u6251\u6b21\u5e8f(Topological Order)\u7684\u5e8f\u5217\uff0c\u7b80\u79f0\u62d3\u6251\u5e8f\u5217\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u7531\u67d0\u4e2a\u96c6\u5408\u4e0a\u7684\u4e00\u4e2a\u504f\u5e8f\u5f97\u5230\u8be5\u96c6\u5408\u4e0a\u7684\u4e00\u4e2a\u5168\u5e8f\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e4b\u4e3a\u62d3\u6251\u6392\u5e8f\u3002\n\n\uff08by \u767e\u5ea6\u767e\u79d1\uff09\n\n$ \\ \\ \\ \\ \\ \\ $\u7167\u4e2a\u4eba\u7406\u89e3\uff0c\u62d3\u6251\u6392\u5e8f\u901a\u5e38\u662f\u5728DAG\u56fe\u4e2d\u5bfb\u627e\u4e00\u4e2a\u9002\u5408\u7684\u89e3\u51b3\u95ee\u9898\u7684\u987a\u5e8f\u3002\n\n### \u5982\u4f55\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\n\n**\u65b9\u6cd51\uff1aBFS\uff08SPFA\u4f18\u5316\uff09**\n\n1\u3001\u5148\u5bfb\u627e\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u628a\u5b83\u52a0\u5165\u961f\u5217\u3002\n\n2\u3001\u641c\u5bfb\u961f\u5217\uff0c\u628a\u961f\u5217\u7684\u70b9G\u5220\u53bb\uff0c\u5219\u5982\u679c\u6709\u70b9\u7684\u5165\u5ea6\u6709G\u70b9\u7684\u8bdd\uff0c\u5165\u5ea6- -\uff0c\u5f53\u53d1\u73b0\u53c8\u51fa\u73b0\u5165\u5ea6\u4e3a0\u7684\u70b9\u65f6\uff0c\u5c06\u8be5\u70b9\u52a0\u5165\u961f\u5217\u3002\n\n3\u3001\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u4e3a\u8be5\u961f\u5217\uff0c\u5728\u6267\u884c\u5220\u70b9\u64cd\u4f5c\u7684\u65f6\u5019\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u53ca\u53ef\u3002\n\n**\u65b9\u6cd52\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22**\n\n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e0d\u9700\u8981\u663e\u5f0f\u7684\u62d3\u6251\u6392\u5e8f\n\n\u8003\u8651\u6734\u7d20\u7684\u56de\u6eaf\u7b97\u6cd5\n\n\u82e5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u7684\u70b9\u51fa\u53d1\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\n\n\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8ba1\u7b97\u5b8c\u6210\u540e\u53ef\u4ee5\u628a\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u4e4b\u540e\u76f4\u63a5\u8fd4\u56de\u67e5\u8868\u7684\u7ed3\u679c\u5373\u53ef\n\n**\u62d3\u6251\u6392\u5e8f\u4f2a\u4ee3\u7801(1)\uff1a**\n```cpp\nTopological_sort(G){\n    \u7edf\u8ba1\u56feG\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6(\u53ef\u8ba1\u7b97\u91cd\u8fb9\uff0c\u4f46\u4e0d\u53ef\u8ba1\u7b97\u81ea\u73af\uff09\uff0c\u8bb0\u4e3adegree[i]\n    \u521d\u59cb\u5316queue\u548cresult\u4e3a\u7a7a\u7684\u961f\u5217\uff0c\u5e76\u5c06\u6240\u6709degree\u4e3a0\u7684\u70b9\u52a0\u5165queue\n    while (!queue.empty()){\n        u = queue.pop() // \u961f\u9996\n        result.push(u)\n        for e \u662fu\u7684\u51fa\u8fb9\uff08\u82e5\u4e0a\u9762\u8ba1\u7b97\u4e86\u91cd\u8fb9\uff0c\u8fd9\u91cc\u4e5f\u8981\u7b97\uff0c\u4e0e\u4e0a\u9762\u4e00\u81f4\uff09\n        v\u662fe\u7684\u6307\u5411\u7684\u70b9\n        degree[v]--\n        if (degree[v] == 0) queue.push(v)\n    }\n\treturn result\n}\n```\n\n**\u62d3\u6251\u6392\u5e8f\u4f2a\u4ee3\u7801(2)\uff1a**\n```cpp\ncalculate(u){\n    if (u \u5df2\u7ecf\u641c\u7d22\u8fc7) return table[u]\n    ans = -inf\n    for (v \u662fu\u7684\u51fa\u8fb9\u6307\u5411\u7684\u70b9)\n    ans = max(ans, value[u] + calculate(v))\n    \u6807\u8bb0u\u5df2\u7ecf\u641c\u7d22\u8fc7\n    table[u] = ans\n    return ans\n}\nfor (i \u662fG\u7684\u6240\u6709\u8282\u70b9)\nresult = max(result, calculate(i))\nprint(result)\n```\n\n#### ps:\u6e90\u7801\u5728\u6211\u8bb2\u5b8c\u7f29\u70b9\u540e\u4e00\u8d77\u653e\u51fa\u6765\n------------\n# \u4e0b\u9762\u91cd\u70b9\uff1a\n## \u5f3a\u8fde\u901a\u5206\u91cf\u2014\u2014\u7f29\u70b9\uff08\u6709\u5411\u6709\u73af\u56fe\uff09\n\n$ \\ \\ \\ \\ \\ \\ $\u73b0\u5728\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u6709\u73af\u56fe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e0d\u662f\u4e00\u4e2aDAG\uff0c\u6240\u4ee5\u4e0d\u80fd\u5728\u8fd9\u79cd\u56fe\u4e0a\u505a\u62d3\u6251\u6392\u5e8f\u6216\u5176\u4ed6\u6709\u5173DAG\u7684\u64cd\u4f5c\u4e86\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/33261.png)\n\n\u5982\u679c\u6211\u4eec\u5355\u72ec\u628a1,2,3\u70b9\u63d0\u51fa\u6765\uff0c\u628a\u5b83\u4eec\u770b\u505a\u4e00\u4e2a\u56e2\u3002\n\n\u6211\u4eec\u628a\u8fd9\u6837\u4e00\u4e2a\u201c\u56e2\u70b9\u201d\u53eb\u505a\u5f3a\u8fde\u901a\u5206\u91cf(scc, strong connected component)\n\n\u901a\u5e38\u6765\u8bb2\uff0c\u4e00\u7ec4\u4e92\u76f8\u80fd\u5230\u8fbe\u7684\u70b9\u53eb\u505a\u8fde\u901a\u5206\u91cf\n\n\u5f53\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u4e0d\u80fd\u518d\u5927\u65f6\uff0c\u4fbf\u662f\u5f3a\u8fde\u901a\u5206\u91cf\n\n### \u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n\n\u628a\u6709\u5411\u6709\u73af\u56fe\u62bd\u8c61\u6210\u4e00\u9897DFS\u6811\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/33262.png)\n\n\u90a3\u4e48\u6bcf\u4e00\u4e2a\u56fe\u4e0a\u7684\u5708\u5708\u5c31\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5728DFS\u6811\u4e2d\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u4e00\u5b9a\u957f\u6210\u8fd9\u6837\u5b50\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u88ab\u5316\u7b80\u6210\u4e86\u786e\u5b9a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u3002\n\n### Tarjan\n\nDFS\u65f6\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4dfn,low\n\ndfn[i]\u662fi\u70b9\u7684\u8fdb\u5165\u65f6\u95f4\n\nlow[i]\u662f\u4ecei\u70b9\u51fa\u53d1\uff0c\u6240\u80fd\u8bbf\u95ee\u5230\u7684\u6700\u65e9\u7684\u8fdb\u5165\u65f6\u95f4\n\n#### Tarjan-scc\u4f2a\u7801\n```cpp\nDFS(u)\n  dfn[u] = low[u] = ++timer\n  stack.push(u)\n  state[u]=1 //\u5df2\u8bbf\u95ee\u5e76\u5165\u6808\n  for v \u662fu\u7684\u4e00\u6761\u51fa\u8fb9\u7684\u7aef\u70b9\n    if (state[v] == 0) //\u672a\u8bbf\u95ee\n    DFS(v)\n    low[u] = min(low[u],  low[v])\n    if (state[v] == 1)\n    low[u] = min(low[u], dfn[v])\n  if (dfn[u] == low[u])\n  \tstack.pop() until \u5f39\u51fa\u4e86u //\u8fd9\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n  \u5f39\u51fa\u7684\u70b9\u7684state[] = 2\n  \nTarjan_scc(G)\n  timer = 0\n  for u \u662f\u56feG\u7684\u8282\u70b9\n  if (state[u] == 0) DFS(u)\n```\n\u90a3\u600e\u4e48\u627e\u51fa\u4e00\u4e2a**\u5f3a\u8fde\u901a\u5206\u91cf**\u7684\u6240\u6709\u70b9\n\n\u627e\u51fascc\u4e4b\u540e\uff0c\u95ee\u9898\u901a\u5e38\u4f1a\u53d8\u6210\u4e24\u4e2a\u90e8\u5206\n\n1\u3001scc\u5185\u90e8\n\n2\u3001scc\u4e4b\u95f4\n\n\u5982\u679c\u628a\u6bcf\u4e2ascc\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5219\u662fDAG\u56fe\uff0c\u5373\u5efa\u51fa\u4e00\u4e2a\u65b0\u56fe\u3002\n\n#### \u65b0\u56fe\u600e\u4e48\u8fde\u8fb9\uff1f\n\n\u8bb0belong[u]\u4e3au\u6240\u5728\u7684scc\u7f16\u53f7\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9u -> v\n\n\u82e5belong[u] != belong[v]\uff08\u5c31\u662fu\uff0cv\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff09\n\n\u5219\u7ed9\u65b0\u56fe\u52a0\u8fb9 \n\nbelong[u] -> belong[v]\uff08\u7ed9\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u8fde\u4e00\u6761\u8fb9\uff09\n\n------------\n\n# \u6d1b\u8c37\u3010P3387 \u7f29\u70b9\u3011\n\n\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f+DP\n\n#### \u4e3a\u4ec0\u4e48\u8981\u7f29\u70b9\uff1f\n```cpp\n\u9898\u76ee\uff1a\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n```\n\u90a3\u4e48\u5982\u679c\u662f\u4e00\u4e2a\u73af\u7684\u8bdd\uff0c\u73af\u5185\u6240\u4ee5\u70b9\u7684\u6743\u90fd\u80af\u5b9a\u88ab\u7d2f\u52a0\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u73af\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\n\n#### \u4e3a\u4ec0\u4e48\u8981\u62d3\u6251\u6392\u5e8f\uff1f~~(\u5176\u5b9e\u662f\u4f5c\u8005\u95f2\u7740__\u75bc)~~\n```cpp\n\u7b97\u6cd5\uff1aDAGdp\n```\n\u62d3\u6251\u6392\u5e8f\u5c31\u53ef\u4ee5\u6c42dp\u987a\u5e8f\uff08\u5982\u679c\u6709DAGdp\u7684\u8bdd\uff0c\u5efa\u8bae\u52a0\u4e2a\u62d3\u6251\uff09\n\n\uff08\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684dp\uff0c\u62d3\u6251\u65e0\u610f\u4e49\uff0c\u6240\u4ee5\u53ef\u4ee5\u8df3\u8fc7\u62d3\u6251\uff0c\u76f4\u63a5dp\uff09\n\n#### \u4e3a\u4ec0\u4e48\u8981dp\n\u56e0\u4e3a\u9898\u76ee\u8bf4\u4e86\u554a\uff08\u9003\uff09\uff0c\u5176\u5b9e\u4e5f\u5f88\u660e\u663e\u5566\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u4e0d\u65ad\u7528\u4ed6\u7684\u5165\u8fb9\u7684\u70b9\u66f4\u65b0\u4ed6\uff0c\u53d6\u6700\u5927\u503c\uff0cf[i]\u8868\u793ai\u70b9\uff08\u7f29\u70b9\u540e\uff09\u7684\u7ecf\u8fc7\u70b9\u548c\u6700\u5927\u503c\u3002\n\n\u65b9\u7a0b\uff1a\n```cpp\nw\u4ee3\u8868\u5f53\u524d\u70b9\uff0crdr\u6570\u7ec4\u4ee3\u8868w\u70b9\u7684\u5165\u8fb9\u7684\u70b9\uff0cdis\u6570\u7ec4\u662f\u6743\u503c\u3002\nf[w]=max(f[w],f[rdr[w][j-1]]+dis_[w]);\n\n```\n## \u4ee3\u7801\n\u603b\u4ee3\u7801\uff08emm~\uff0c\u7801\u98ce\u53ef\u80fd\u6709\u70b9\u4e11QAQ\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100001\n#define maxm 500001\nusing namespace std;\nstruct node{\n    int to,next,from;\n}edge[maxm];\nqueue <int> q;\nvector <int> cb[maxn];\nvector <int> rdr[maxn];\nint ans[maxn],totq,x,y,v,rd[maxn],u,n,m,sum,vis[maxn],dis_[maxn],dis[maxn];\nint dfn[maxn],low[maxn],f[maxn],times,cntqq;\nint stack_[maxn],heads[maxm],visit[maxn],cnt,tot,index_;\nvoid add(int x,int y)\t\t//\u5efa\u8fb9\n{\n    edge[++cntqq].next=heads[x];\n    edge[cntqq].from=x;\n    edge[cntqq].to=y;\n    heads[x]=cntqq;\n   \treturn;\n}\nvoid tuopu()\t\t\t\t//\u62d3\u6251\u6392\u5e8f\n{\n\tfor(int i=1;i<=tot;i++)\t//\u521d\u59cb\u5316 \n    {\n        if(rd[i]==0)\n        q.push(i);\t\t\t//\u5165\u5ea6\u4e3a0\u7684\u90fd\u8fdb\u961f\u5217 \n    }\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        ans[++totq]=u;\n        for(int i=1;i<=cb[u].size();i++)\n        {\n            v=cb[u][i-1];\t//\u56e0\u4e3avector\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u51cf1\uff0c\u4e0b\u9762\u4ee3\u7801\u7684\u51cf1\u4e5f\u4e00\u6837 \n            rd[v]--;\n            if(rd[v]==0)q.push(v);\n        }\n    }\n}\nvoid tarjan(int x)\t\t\t//tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n{\n    dfn[x]=low[x]=++times;\n    stack_[++index_]=x;\t\t//\u624b\u5199\u6808\u563f\u563f\u563f \n    visit[x]=1;\n   \tfor(int i=heads[x];i!=-1;i=edge[i].next)\n    {\n        if(!dfn[edge[i].to])\n        {\n           \ttarjan(edge[i].to);\n            low[x]=min(low[x],low[edge[i].to]);\n       \t}\n       \telse \n        if(visit[edge[i].to])\n        low[x]=min(low[x],dfn[edge[i].to]);\n    }\n    if(low[x]==dfn[x])\n   \t{\n   \t\ttot++;//\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7 \n   \t\twhile(1)\n       \t{\n       \t\tvis[stack_[index_]]=tot;\t//index_\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\uff0c\u7b49\u4e8e\u524d\u9762\u8bb2\u7684belong \n       \t\tdis_[tot]+=dis[stack_[index_]];\t//\u5f3a\u8fde\u901a\u5206\u91cf\u6743\u503c\u7d2f\u52a0 \n       \t\tvisit[stack_[index_]]=0;index_--;\n       \t\tif(x==stack_[index_+1])break;//\u624b\u5199\u6808\u563f\u563f\u563f \n       \t}\n    }\n}\nint main(){\n    memset(heads,-1,sizeof(heads));\n    int n,m,x,y;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d\",&dis[i]);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&x,&y);\n       \tadd(x,y);\n    }\n    for(int i=1;i<=n;i++)if(!dfn[i])tarjan(i); \t//tarjan \n    for(int i=1;i<=cntqq;i++){\t\t\t//\u62d3\u6251\u5efa\u8fb9\n        if(vis[edge[i].from]!=vis[edge[i].to])\n        {\n            x=vis[edge[i].from];y=vis[edge[i].to];\n\t\t\trd[y]++;cb[x].push_back(y);rdr[y].push_back(x);\n        }\n    }\n    tuopu();\n    for(int i=1;i<=tot;i++)\t\t\t\t//dp\n    {\n        int w=ans[i];\n        f[w]=dis_[w];\n        for(int j=1;j<=rdr[w].size();j++)\n        f[w]=max(f[w],f[rdr[w][j-1]]+dis_[w]);\n    }\n    for(int i=1;i<=tot;i++)\t\t\t\t//\u6700\u540e\u7edf\u8ba1\u7b54\u6848 \n    sum=max(f[i],sum);\n    printf(\"%d\",sum); \n    return 0;\n}//\u521a\u521a\u597d100\u884c \n\n\n```\n# \u540e\u8bb0\n\n### \u968f\u4fbf\u7ed9\u70b9\u9898\nP2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\n\nP2002 \u6d88\u606f\u6269\u6563\n\nP1262 \u95f4\u8c0d\u7f51\u7edc\n\n# $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  \\     $ \u8c22\u8c22\u89c2\u8d4f\uff0c\u7ed9\u4e2a\u8d5e\u5457qwq\n\n\u5982\u679c\u8fd8\u60f3\u5b66\u66f4\u591a\u77e5\u8bc6\uff1a\u8bf7\u770b\u672c\u4eba\u5b8c\u6574[blog](https://www.luogu.org/blog/juruohyfhaha/qiang-lian-tong-fen-liang-yu-ta-pu-pai-xu-lve-xie)\n",
        "postTime": 1543468480,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u30113387\u7f29\u70b9"
    },
    {
        "content": "\u601d\u8def\uff1a\u5efa\u539f\u56fe-->tarjan\u6c42\u51fa\u56fe\u5185\u6240\u6709\u7684\u5f3a\u8054\u901a\u5206\u91cf-->\u5efa\u51faDAG\uff08\u7f29\u70b9\uff1a\u5373\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u89c6\u4e3a\u4e00\u4e2a\u65b0\u70b9\uff09-->\u5728\u5f97\u5230\u7684DAG\u4e0a\u8fdb\u884cDP\uff08\u5176\u5b9e\u662f\u8bb0\u641c...\uff09\uff0c\u4e0d\u65ad\u66f4\u65b0\u6700\u5927\u70b9\u6743\u548c-->\u8f93\u51famax\u503c-->AC\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int maxn = 1e5 + 1e4, maxm = 1e5 + 1e4;\nint Index,pd[maxn],DFN[maxn],LOW[maxn];\nint tot,color[maxn],sum[maxn],f[maxn];\nint edge,fir[maxn],Next[maxm],to[maxm];\nint sta[maxn],top; //\u624b\u5199\u6808 \nint n,m,val[maxn],x[maxm],y[maxm],ans;\nint read(){\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48; ch=getchar();}\n    return f*x;    \n}\nvoid add(int x,int y){\n    to[++edge]=y; Next[edge]=fir[x]; fir[x]=edge;\n}\nvoid tarjan(int x){  \n    sta[++top]=x;\n    pd[x]=1;\n    DFN[x]=LOW[x]= ++Index;\n    for(int i=fir[x];i;i=Next[i]){\n        int v=to[i];\n        if(!DFN[v]){\n            tarjan(v);\n            LOW[x]=min(LOW[x],LOW[v]);\n        }\n        else if(pd[v]){\n            LOW[x]=min(LOW[x],DFN[v]);\n        }\n    }\n    if(DFN[x]==LOW[x]){\n        tot++;\n        while(sta[top+1]!=x){\n            color[sta[top]]=tot;\n            sum[tot]+=val[sta[top]];\n            pd[sta[top--]]=0;\n        }\n    }\n}\nvoid search(int x){   //\u5728DAG\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\n    if(f[x]) return ;\n    f[x]=sum[x];\n    int maxsum = 0;\n    for(int i=fir[x];i;i=Next[i]){\n        if(!f[to[i]]) search(to[i]);\n        maxsum=max(maxsum,f[to[i]]);\n    }\n    f[x]+=maxsum;\n}\nint main(){\n    n=read(); m=read();\n    for(int i=1;i<=n;i++) val[i]=read();\n    for(int i=1;i<=m;i++){\n        x[i]=read();                                // \u8fd9\u91cc\u7528\u6570\u7ec4\u4fdd\u5b58\u597d\u539f\u8fb9\uff0c\u4fbf\u4e8e\u540e\u7eed\u91cd\u65b0\u5efa\u56fe\uff1b\n        y[i]=read();\n        add(x[i],y[i]);\n    }\n    for(int i=1;i<=n;i++) if(!DFN[i]) tarjan(i);\n    memset(fir,0,sizeof(fir));                 //\u6e05\u7a7a\u539f\u56fe\n    memset(Next,0,sizeof(Next));\n    memset(to,0,sizeof(to));\n    edge=0;\n    for(int i=1;i<=m;i++){       //\u91cd\u65b0\u5efa\u56fe\uff08\u679a\u4e3e\u6bcf\u4e00\u6761\u539f\u8fb9\uff0c\u82e5\u4e0d\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u5219\u8fde\u4e00\u6761\u8fb9\uff08\u65b9\u5411\u540c\u539f\u8fb9\uff09\uff09\n        if(color[x[i]]!=color[y[i]])\n            add(color[x[i]],color[y[i]]);\n    }\n    for(int i=1;i<=tot;i++){  \n        if(!f[i]){\n            search(i);\n            ans=max(ans,f[i]);\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1509506882,
        "uid": 23342,
        "name": "Redstone\u7ea2\u77f3\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "## \u7f29\u70b9\u600e\u4e48\u80fd\u6ca1\u6709\u601d\u8def\u7b80\u5355\uff0c\u4ee3\u7801\u91cf\u5c11\u7684Kosaraju\u7b97\u6cd5\u5462OwO\n## \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u548c\u81ea\u5df1\u7684\u4e00\u4e9b\u5c0f\u7814\u7a76~\n\n------------\n\n### \u9996\u5148\u6211\u4eec\u6765\u56de\u5fc6\u4e00\u4e0b\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\u548c\u7f29\u70b9\u600e\u4e48\u6c42\uff1a\n\n\t\t\u6211\u4eec\u6309\u987a\u5e8f\u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u6ca1\u88ab\u6807\u8bb0\uff0c\u6211\u4eec\u5c31\u5e26\u5165dfs\u6c42\u51fa\u5b83\u80fd\u5230\u7684\u6240\u6709\u70b9\u5e76\u6807\u8bb0\u3002\u8bbe\u67d0\u4e2a\u70b9\u4e3a\u7b2ct\u6b21\u5e26\u5165dfs\u88ab\u6807\u8bb0\u7684\uff0c\u90a3\u5b83\u5c31\u5c5e\u4e8e\u7b2ct\u4e2a\u8fde\u901a\u5206\u91cf\u3002\u540c\u6837\u7684\uff0c\u540c\u4e00\u6b21\u5e26\u5165dfs\u7684\u70b9\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u628a\u7b2ct\u4e2a\u8fde\u901a\u5206\u91cf\u770b\u6210\u4e00\u4e2a\u70b9\u5373\u5b8c\u6210\u7f29\u70b9\u3002\u8bbe\u539f\u6765\u70b9x\u7684\u70b9\u503c\u4e3aa[x]\uff0c\u6211\u4eec\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4c\u8bb0\u5f55\u8fde\u901a\u5206\u91cf\u7684\u503c\uff0c\u5728\u7b2ct\u6b21dfs\u65f6\uff0c\u628ac[t]+=a[x]\u5373\u53ef\u5f97\u5230\u8fde\u901a\u5206\u91cf\u7684\u503c\uff0c\u518d\u91cd\u65b0\u7528\u8fde\u901a\u5206\u91cf\u5efa\u56fe\u5373\u53ef\u3002\n\n### \u90a3\u6709\u5411\u56fe\u80fd\u8fd9\u4e48\u6c42\u561bQwQ\uff1f\n\t\t\u6211\u4eec\u8bbe\u4e24\u4e2a\u73afA\uff0cB\u3002A->B\uff08A\u53ef\u4ee5\u5230B\uff0c\u4f46B\u4e0d\u53ef\u4ee5\u5230A\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e24\u4e2a\u73af\u53ea\u6709A\u6709\u4e00\u4e2a\u70b9\u6709\u4e00\u6761\u5230B\u7684\u8fb9\uff09\u3002\u6309\u7167\u65e0\u5411\u56fe\u7684\u904d\u5386\u6807\u51c6\uff0c\u6211\u4eec\u5206\u522b\u8ba8\u8bba\u4e24\u4e2a\u60c5\u51b5\uff1a\n   \n\t\t1.\u5728\u7b2ct\u6b21\u904d\u5386\u7684\u65f6\u5019\u4eceB\u5f00\u59cb\u904d\u5386\uff1a\u5f88\u663e\u7136B\u4f1a\u6807\u6210\u4e00\u4e2a\u73af\uff08\u5f3a\u8fde\u901a\u5206\u91cf\uff09\uff0c\u56e0\u4e3a\u5230\u4e0d\u4e86A\u800c\u9000\u51fa\uff0c\u5728t+\uff1f\u6b21\u7684\u65f6\u5019\u904d\u5386\u5230A\uff0cA\u4e5f\u88ab\u6807\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u4e0d\u662f\u5f88\u597d\u561b>w<?\n    \n\t\t\u4e0d\u8fc7\uff0c\n   \t \n\t\t2.\u5728\u7b2ct\u6b21\u904d\u5386\u7684\u65f6\u5019\u4eceA\u5f00\u59cb\u904d\u5386\uff0c\u56e0\u4e3aA\u548cB\u53ef\u4ee5\u901a\u8fc7\u67d0\u6761\u8fb9\u76f8\u8fde\uff0c\u5b83\u4eec\u4f1a\u88ab\u8bb0\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u662f\u4e0d\u6b63\u786e\u7684\u3002\n    \n### \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u4ece\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\u4e2d\u83b7\u5f97\u7075\u611f\uff1a\n\t\t\u5982\u679c\u5728\u6709\u5411\u56fe\u7684\u904d\u5386\u65f6\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u80fd\u4eceA->B\u8fd9\u4e2a\u6a21\u578b\u7684B\u51fa\u53d1\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5728\u6709\u5411\u56fe\u4e2d\u4e5f\u53ef\u4ee5\u50cf\u65e0\u5411\u56fe\u90a3\u6837\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n        \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u9006\u540e\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n        \n### \u4ec0\u4e48\u662fDFS\u9006\u540e\u5e8f\uff1f\n\t\t\u904d\u5386\u70b9x\u65f6\u5148\u904d\u5386\u5176\u7684\u6240\u6709\u513f\u5b50v1,v2,v3\u3002\u5f53\u7136v1,v2,v3\u4e5f\u662f\u76f8\u540c\u7684\u64cd\u4f5c\uff0c \u628a\u6240\u6709\u513f\u5b50\u538b\u5165\u6808\u540e\u518d\u5c06\u81ea\u5df1\u538b\u5165\u6808\u3002\n\n### \u5b83\u6709\u4ec0\u4e48\u7528\uff1f\uff08\u5177\u4f53\u6b65\u9aa4\uff09\n\t\t1.\u6211\u4eec\u5148\u5bf9\u539f\u56fe\u8dd1\u4e00\u6b21DFS\u9006\u540e\u5e8f\u5e76\u7528\u6808\u8bb0\u5f55\u3002\n        2.\u5728\uff08\u53cd\u5411\u56fe\uff09\u4e0a\uff08\u50cf\u65e0\u5411\u56fe\u6c42\u8fde\u901a\u5206\u91cf\u4e00\u6837\uff09\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5373\u53ef\n        \u636e\u8bf4\u8fd9\u6837\u505a\u4e8b\u5b9e\u4e0a\u662f\u5bf9\u56fe\u8fdb\u884c\u4e86\u4e00\u6b21\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u6392\u5e8f\uff0c\u5373DFS\u9006\u540e\u5e8f\u3002\u5728\u53cd\u5411\u56fe\u4e0a\u65f6\uff0c\u914d\u5408DFS\u9006\u540e\u5e8f\uff0c\u6b64\u65f6\u7684\u56fe\u5df2\u7ecf\u662f\u4e00\u5f20\u5904\u7406\u8fc7\u7684\u6709\u5411\u56fe\uff0c\u53ef\u4ee5\u6309\u7167\u65e0\u5411\u56fe\u90a3\u6837\u8dd1\u3002\n        3.\u50cf\u65e0\u5411\u56fe\u90a3\u6837\u7f29\u70b9\uff0c\u8dd1DP\u6216\u8005SPFA\u5373\u53ef\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bf4\u4e86\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\n### \u8fd9\u4e48\u7384\u5b66\uff1f\n\t\t\u662f\u7684\uff0c\u50cf\u4e0a\u9762\u8bf4\u7684A->B\u6a21\u578b\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u65b9\u6cd5\u5206\u7c7b\u8ba8\u8bba\u8bd5\u8bd5\uff0c\u7ed3\u8bba\u662f\u6b63\u786e\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a8\u5e7f\u5230\u4e00\u4e2a\u5f88\u5927\u7684\u56fe\u3002\u4f46\u662f\u522b\u7740\u6025\u8d70\uff0c\u4e0b\u9762\u624d\u662f\u771f\u6b63\u7684\u8bc1\u660e\u3002\n------------\n### \u5947\u602a\u7684\u5c0f\u7814\u7a76\uff1a\n\t\t\u5728\u7ffb\u4e66\u548c\u5404\u79cd\u535a\u5ba2\u7684\u65f6\u5019\uff0c\u51e0\u4e4e\u6ca1\u6709\u63d0\u53ca\u4e3a\u4ec0\u4e48\u8981\u7528\u9006\u540e\u5e8f\uff0c\u6240\u4ee5\u4e00\u76f4\u6ca1\u6709\u60f3\u900f\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u77e5\u9053\u7684\u786e\u5207\uff0c\u7b80\u5355\u7684\u6b65\u9aa4\u548c\u4e0a\u9762\u7684\u90a3\u4e9b\u7384\u5b66\u8bc1\u660e\uff0c\u8dd1\u51fa\u6765\u4e5f\u80fdAC\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002\u4eca\u5929\u5728luogu\u4e0a\u6253\u7b97\u6253\u4e00\u4e0b\u6a21\u677f\u7684\u65f6\u5019\uff0c\u7075\u5149\u4e00\u95ea\u60f3\u8bd5\u8bd5\u4e0d\u7528\u9006\u540e\u5e8f\u4f1a\u600e\u4e48\u6837\uff0c\u7ed3\u679c\uff1a\n        \n      \uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n      \uff1f Accepted  100 \u7528\u65f6: 88ms / \u5185\u5b58: 5320KB \uff1f\n      \uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n      \n      \t\u5565\uff1fAC\u4e86\uff1f\uff1f\u8fd8\u6bd4\u9006\u540e\u5e8f\u5feb\u4e8640msQwQ\uff1f\uff1f\uff1f\n        \n        \u5c31\u5728\u521a\u521a\u8131\u79bb\u4e86\u535a\u5ba2\u548c\u4e66\u672c\uff0c\u91cd\u65b0\u601d\u8003\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\uff1a\n        \u6709\u5411\u56fe\u7684\u95ee\u9898\u5728\u4e8e\uff1a\u6309\u7167\u65e0\u5411\u56fe\u7684\u8dd1\u6cd5\uff0c\u6211\u4eec\u4f1a\u50cfA->B\u6a21\u578b\u90a3\u6837\u8dd1\u9519\u3002\u4f46\u662f\u5982\u679c\u5148\u8dd1\u4e86dfs\u5e8f\uff08\u524d\u5e8f\u4e5f\u53ef\u4ee5\uff09\uff0c\u7136\u540e\u518d\u628a\u56fe\u53cd\u8fc7\u6765\uff0c\u6309\u7167\u8fd9\u4e2adfs\u5e8f\uff0c\u672c\u6765\u80fd\u5230\u7684\u73af\u5c31\u5230\u4e0d\u4e86\uff0c\u8d77\u5230\u4e86\u9650\u5236\u4f5c\u7528\u3002\u50cf\u521a\u521a\u7684A->B\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u53cd\u8fc7\u6765\u53d8\u6210A<-B\uff0c\u6211\u4eec\u7528\u666e\u901a\u7684DFS\u524d\u5e8f\u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u8bd5\u8bd5\uff1a\n\t\t1.\u5047\u8bbeDFS\u5e8f\u65f6\u4eceB\u5f00\u59cb\u8dd1\uff0c\u6808\u9876\u7684\u5143\u7d20\u80af\u5b9a\u662fA\u4e2d\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u53cd\u5411\u56fe\u5148\u8dd1\u5b8cA\uff08\u56e0\u4e3a\u8dd1\u4e0d\u5230B\uff09\uff0c\u7136\u540e\u518d\u8dd1B\uff0c\u6ca1\u6709\u95ee\u9898\u3002\n\t\t2.\u5047\u8bbeDFS\u5e8f\u65f6\u4eceA\u5f00\u59cb\u8dd1\uff0c\u6808\u9876\u7684\u5143\u7d20\u80af\u5b9a\u662fB\u4e2d\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u53cd\u5411\u56fe\u4eceB\u5230A\u662f\u53ef\u4ee5\u8dd1\u5230\u7684\uff0c\u90a3\u6211\u4eec\u4e0d\u5c31\u8dd1\u9519\u4e86\u561b\uff1f\u8fd9\u4e2a\u65f6\u5019\u5148\u8dd1A\u624d\u662f\u5bf9\u7684\u5440\u3002\u5982\u679c\u6362\u6210\u9006\u540e\u5e8f\uff0c\u8fd9\u4e2a\u65f6\u5019\u6808\u9876\u662fA\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\uff01\uff01\uff01\n       \u628a\u56fe\u53cd\u8fc7\u6765\u4ee5\u540e\uff0c\u6309\u7167\u9006\u540e\u5e8f\u8dd1\uff0c\u5176\u5b9e\u662f\u6309\u7167\u539f\u6765\u7684\u904d\u5386\u987a\u5e8f\u8dd1\uff08\u56e0\u4e3a\u662f\u5148\u538b\u5165\u513f\u5b50\u518d\u52a0\u5165\u81ea\u5df1\uff0c\u81ea\u5df1\u4e00\u5b9a\u518d\u4e0a\u9762\uff0c\u8bbf\u95ee\u4e5f\u4f18\u5148\uff09\u3002\n       \u5728\u53cd\u5411\u56fe\u8dd1\u7684\u65f6\u5019\uff0c\u539f\u6765\u662f\u6b63\u5411A->B\u5c31\u8dd1\u4e0d\u4e86\uff0c\u53c8\u56e0\u4e3a\u662f\u9006\u540e\u5e8f\uff0c\u5bfc\u81f4\u53ea\u80fd\u4eceA->B\u8fd9\u6837\u8dd1\u4e00\u6761\u8dd1\u4e0d\u5230\u7684\u8def\uff0c\u800c\u4e0d\u80fdB->A\u8fd9\u6837\u8dd1\uff01\u8fd9\u5c31\u628aA->B\u5f3a\u884c\u53d8\u6210\u4e86\u4e00\u6761\u5230\u4e0d\u4e86\u7684\u8fb9\uff01\u4e5f\u5c31\u5b8c\u6210\u4e86\u7f29\u70b9\uff01\n### \u8fd9\u4e5f\u8bf4\u660e\u4e86\uff0c\u8fd9\u9053\u6a21\u677f\u9898\u7684\u6570\u636e\u6709\u6f0f\u6d1e\uff0c\u624d\u628a\u524d\u5e8fDFS\u653e\u4e86\u8fc7\u53bbXD\uff0c\u7b49\u9898\u89e3\u901a\u8fc7\u4e86\u5c31\u5728\u8ba8\u8bba\u533a@\u4e00\u4e0b\u7ba1\u7406\u770b\u770b\uff08\u4e0d\u8fc7\u4e5f\u6709\u53ef\u80fd\u662f\u849f\u84bb\u6211\u60f3\u7684\u4e0d\u591f\u5468\u5168\uff09\n------------\n### CODE(\u9644\u6709\u8be6\u7ec6\u6ce8\u91ca\uff01\u4e0d\u5148\u9605\u8bfb\u4e0a\u9762\u6587\u5b57\u4f30\u8ba1\u770b\u4e0d\u61c2XD\uff09:\n```cpp\n#pragma warning (disable:4996)\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 1e4 + 5, maxm = 1e5 + 5;\nint x[maxm], y[maxm];//\u8bfb\u5165\u7684\u8fb9\u6682\u5b58\u6570\u7ec4\nint head[maxm], nxt[maxm], v[maxm], w[maxm], cnt;//\u6b63\u56fe\nint rhead[maxm], rnxt[maxm], rv[maxm], rcnt;//\u9006\u56fe\nint a[maxn], /*\u539f\u70b9\u7684\u6743\u503c*/c[maxn]/*\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c*/, dp[maxn], mark[maxn]/*\u70b9\u5bf9\u5e94\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7*/, stack[maxn]/*\u6808*/, n, m, t/*dfs1\u4e2d\u662f\u9006\u540e\u5e8f\uff0cdfs2\u4e2d\u662f\u6808\u9876*/, ans;\nbool vis[maxn];\n\n//\u5efa\u8bae\u5148\u4ecemain\u5f00\u59cb\u9605\u8bfb\n\n\n//\u6b63\u53cd\u524d\u5411\u661f\u52a0\u8fb9\ninline void addline(int x, int y) { v[cnt] = y, nxt[cnt] = head[x], head[x] = cnt++; }\ninline void raddline(int x, int y) { rv[rcnt] = y, rnxt[rcnt] = rhead[x], rhead[x] = rcnt++; }\n\ninline void dfs1(int x)//\u9006\u540e\u5e8f\u5904\u7406\n{\n\tvis[x] = true;\n\tfor (int i = head[x]; i != -1; i = nxt[i])\n\t\tif (!vis[v[i]])\tdfs1(v[i]);//\u5148\u904d\u5386\u5e76\u538b\u5165\u513f\u5b50\n\tstack[++t] = x;//\u6700\u540e\u5728\u538b\u5165\u81ea\u5df1\n\treturn;\n}\n\ninline void dfs2(int x)//\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n{\n\tmark[x] = t, c[t] += a[x];//\u7ed9\u70b9x\u8d4b\u4e88\u5f3a\u8fde\u901a\u7f16\u53f7t\uff0ct\u5728\u6700\u540e\u4f1a\u88ab\u770b\u51fa\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u5728\u8fd9\u5148\u628at\u7684\u6743\u503c\u6c42\u4e86\n\tfor (int i = rhead[x]; i != -1; i = rnxt[i])\n\t\tif (!mark[rv[i]])\tdfs2(rv[i]);//\u6309\u7167\u65e0\u5411\u56fe\u8dd1\u5c31\u884c\u4e86\n\treturn;\n}\n\ninline void dfs3(int x)//dp\u6c42\u89e3\uff08\u5f88\u597d\u7406\u89e3\u5c31\u4e0d\u6ce8\u91ca\u4e86\uff0c\u8fd9\u4e5f\u4e0d\u662f\u672c\u9898\u89e3\u7684\u91cd\u70b9\uff09\n{\n \tif (dp[x])\treturn;\n\tfor (int i = head[x]; i != -1; i = nxt[i])\n\t{\n\t\tif (!dp[v[i]])\tdfs3(v[i]);\n\t\tdp[x] = max(dp[x], dp[v[i]]);\n\t}\n\tdp[x] += c[x]; return;\n}\n\nint main(void)\n{\n\t//\u4ee5\u4e0b\u662f\u521d\u59cb\u5316\u548c\u52a0\u8fb9\n\tmemset(head, -1, sizeof head);\n\tmemset(rhead, -1, sizeof rhead);\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= n; i++)\tscanf(\"%d\", &a[i]);\n\tfor (int i = 1; i <= m; i++)\tscanf(\"%d %d\", &x[i], &y[i]), addline(x[i], y[i]), raddline(y[i], x[i]);\n\t//\u7b2c\u4e00\u6b21dfs\u6c42\u56fe\u7684\u9006\u540e\u5e8f\n\tfor (int i = 1; i <= n; i++)\tif (!vis[i])\tdfs1(i);\n\tt = 0, cnt = 0;//\u8bb0\u5f97\u521d\u59cb\u5316\u4e00\u4e0b\n\t//\u7b2c\u4e8c\u6b21dfs\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4ece\u6808\u9876\u5f00\u59cb\u904d\u5386\uff0c\u5411\u65e0\u5411\u56fe\u90a3\u6837\u6c42\u8fde\u901a\u5206\u91cf\u5373\u53ef\n\tfor (int i = n; i >= 1; i--)\tif (!mark[stack[i]])\tt++, dfs2(stack[i]);\n\t//\u8fd9\u91cc\u5f00\u59cb\u6839\u636e\u5f3a\u8fde\u901a\u5206\u91cf\u91cd\u65b0\u5efa\u56fe\uff0c\u8bb0\u5f97\u521d\u59cb\u5316w\n\tmemset(head, -1, sizeof(head));\n\tmemset(nxt, -1, sizeof(nxt));\n\tmemset(vis, 0, sizeof(vis));\n\t//\u628a\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5f53\u4f5c\u70b9\u8fde\u597d\uff0c\u5373\u7f29\u70b9\n\tfor (int i = 1; i <= m; i++)\tif (mark[x[i]] != mark[y[i]])\taddline(mark[x[i]], mark[y[i]]);\n\t//dp\u8fc7\u7a0b\n\tfor (int i = 1; i <= t; i++)\t{ if (!dp[i])\tdfs3(i); ans = max(ans, dp[i]); }\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n\n```\n\n\n       ",
        "postTime": 1534147078,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u5927\u5bb6\u5982\u679c\u6709\u5174\u8da3\uff0c\u53ef\u4ee5\u5230\u6211\u7684\u535a\u5ba2\u4e86\u89e3tarjan\u7684\u5176\u4ed6\u5185\u5bb9[wjyyy\u535a\u5ba2](http://www.wjyyy.top/)\n\n\u987e\u540d\u601d\u4e49\uff0c\u7f29\u70b9\u5c31\u662f\u5c06\u7b49\u4ef7\u7684\u51e0\u4e2a\u70b9\u8f6c\u5316\u4e3a\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u53ef\u7d2f\u52a0\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7528tarjan\u6765\u6c42\u4e00\u4e0b\u54ea\u4e9b\u70b9\u53ef\u4ee5\u7f29\u5728\u4e00\u8d77\u3002\n\n\n\n#### 1.dfn\u548clow\u7684\u542b\u4e49\n\n\u00a0 \u00a0tarjan\u7b97\u6cd5\u6709\u4e24\u4e2a\u6838\u5fc3\u6570\u7ec4\uff1adfn\u548clow\uff0c\u540c\u6837\u4e5f\u9700\u8981\u4e00\u4e2a\u6808\uff0c\u8f85\u52a9\u5b58\u50a8\u5f3a\u8fde\u901a\u5206\u91cf\u3002dfn\u662f\u201c\u65f6\u95f4\u6233\u201d\uff0cdfn[i]\u8bf4\u660ei\u70b9\u5728\u4ec0\u4e48\u65f6\u95f4\u88ab\u904d\u5386\u7684\u3002low[i]\u662fi\u53ef\u56de\u6eaf\u5230\u7684\u6700\u65e9\u65f6\u95f4\u6233\u7684\u70b9\u7684\u65f6\u95f4\u6233(\u89c1\u4e0b\u9762\u5bf9low\u503c\u7684\u8ba1\u7b97)\uff0c\u9ed8\u8ba4\u503c\u4e3adfn[i]\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u679ci\u5230j\u6709\u4e00\u6761\u8def\u5f84\uff0cj\u5230i\u4e5f\u6709\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u5c31\u4f7f$max(low[i],low[j])=min(low[i],low[j])$ \u867d\u7136\u4e0d\u7b26\u5408\u8bed\u6cd5\uff0c\u5e76\u5c06\u8def\u4e0a\u7684\u70b9\u5165\u6808\uff0c\u6253\u4e0a\u5728\u6808\u5185\u7684\u6807\u8bb0in\u3002\n\n\n\n#### 2.\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\n\n\u00a0 \u00a0\u5982\u679c\u4e00\u4e2a\u70b9i\u7684dfs\u505a\u5b8c\u540e\u6ca1\u6709\u627e\u5230\u80fd\u56de\u6eaf\u5230\u7684\u70b9\uff0c\u90a3\u4e48\u4f1a\u6709dfn[i]==low[i]\uff0ci\u5c31\u662fi\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u6811\uff09\u7684\u6839\u8282\u70b9\u3002\u56e0\u4e3a\u6811\u6839\u662fi\uff0c\u7531dfs\u7684\u6808\u6027\u8d28\uff0c\u4eces\u6808\u9876\u5230i\u6240\u5728\u4f4d\u7f6e\u5747\u6ca1\u6709\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u5c06\u8fd9\u4e9b\u70b9\u51fa\u6808\uff0c\u5f52\u4e3a\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf++cnt\u3002\n\n\u00a0 \u00a0\u4e0a\u9762\u7684\u505a\u6cd5\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u5e76\u5728\u4e00\u8d77\uff0c\u4e0d\u8fc7\u8bbf\u95ee\u65f6\u53ef\u80fd\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002\n\n\u00a0 \u00a0\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u904d\u5386\u5230\u4e00\u4e2a\u70b9k\uff0c\u5e76\u4e14k\u4e0d\u5728\u6808\u4e2d\uff0c$dfn[k]>0(\\Leftrightarrow k \\notin $\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff09\uff0c\u5219k\u4e0e\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u5b83\u88ab\u5176\u4ed6\u5206\u91cf\u66f4\u65b0\u4e86\uff0c\u800c\u6b63\u5728\u5904\u7406\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u56e0\u4e3a\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u6240\u4ee5\u4e24\u4e2a\u5206\u91cf\u4e0d\u80fd\u5728\u4e00\u8d77\uff08\u5373 \u4e0d\u7b49\u4ef7\uff09\u3002\n\n\n\n#### 3.low\u6570\u7ec4\u7684\u6c42\u6cd5\n\n\u00a0 \u00a0\u5982\u679cdfn[i]!=low[i]\uff0c\u8bf4\u660ei\u4e0d\u662f\u5176\u6240\u5c5e\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\u3002\u521a\u8fdb\u5165dfs\u51fd\u6570\u65f6\uff0c\u5c06\u8be5\u70b9\u538b\u5165\u6808\u5185\uff08\u4e0e\u7b2c\u4e8c\u70b9\u7b2c\u4e8c\u53e5\u7167\u5e94\uff09\u3002\u5982\u679cdfs(x)\u65f6\u627e\u5230\u4e00\u4e2a\u70b9k\u5728\u6808\u5185\uff0c\uff08\u6709\u5411\u56fe\u4e2d\uff09\u5c31\u6210\u73af\u4e86\uff0c\u8fd9\u4e2a\u73af\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u4e2a\u70b9\u3002\u8d4b\u503clow[x]=min(low[x],low[x]);\u5373x\u70b9\u53ef\u4ee5\u56de\u6eaf$\\Rightarrow $x\u70b9\u5728k\u70b9\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u4e5f\u5728\u73af\u4e0a\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u8fd8\u6ca1\u7ed3\u675f\uff0c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u7ee7\u7eeddfs\u4e0b\u53bb\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u6307\u5411\u7684\u70b9low\u503c\u66f4\u65b0\u4e86\uff0c\u90a3\u4e48\u5b83\u7684low\u5c31\u66f4\u65b0\u6210\u66f4\u5c0f\u7684\u503c\uff0c\u9632\u6b62\u8bef\u5224\u4e3a\u201c\u6839\u8282\u70b9\u201d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5982\u679c\u627e\u5230\u4e00\u4e2a\u53ef\u56de\u6eaf\u7684\u70b9\uff0c\u53ea\u66f4\u65b0\uff0c\u4e0d\u80fd\u7ee7\u7eeddfs\uff0c\u4e0d\u7136\u4f1a\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb\u3002\u5728\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c\u5982\u679c\u6ca1\u6709\u66f4\u65b0low\u7684\u503c\uff0c\u8bf4\u660elow\u662f\u6839\u8282\u70b9\uff0c\u53bb\u5230\u7b2c\u4e8c\u70b9\u4e2d\u3002\n\n\n\n#### 4.\u5176\u4ed6\n\n\u00a0 \u00a0 \u56fe\u53ef\u80fd\u88ab\u5206\u4e3a\u51e0\u5757\uff0c\u4e00\u6b21dfs\u4e0d\u4e00\u5b9a\u80fd\u627e\u5168\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u800c\u5bfc\u81f4CE\uff08\u8c03\u7528NULL\uff09\u3002\u6240\u4ee5\u5728dfs\u65f6\u5e94\u8be5\u679a\u4e3e\u5f00\u59cb\u505a\u7684\u70b9\uff0c\u4e00\u65e6dfn==0\uff0c\u5c31\u4ece\u5b83\u5f00\u59cb\u505a\u3002\n\n\n\n#### 5.\u9488\u5bf9\u8fd9\u4e2a\u9898\n\n\u00a0 \u00a0\u7f29\u70b9\u540e\uff0c\u539f\u6765\u7684\u56fe\u4f1a\u88ab\u7f29\u6210\u66f4\u5c0f\u7684\u56fe\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u88ab\u89c6\u4f5c\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u662f\u5206\u91cf\u4e2d\u6240\u6709\u70b9\u7684\u6743\u503c\u4e4b\u548c\u3002\u63a5\u7740\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u8fb9\u7684\u4e24\u7aef\u8de8\u8d8a\u4e86\u5206\u91cf\uff0c\u5c31\u628a\u5b83\u8fde\u4e0a\uff08\u4e0d\u80fd\u518d\u7528\u539f\u6765\u7684\u56fe\uff09\uff0c\u5bf9\u5165\u5ea6\u4e3a0\u7684\u70b9\u505adfs\uff0c\u5728\u8fd1\u4f3cO(N)\u7684\u590d\u6742\u5ea6\u5185\u53ef\u4ee5\u627e\u51fa\u6b63\u786e\u7b54\u6848\u3002\n\n\n\n## Code:\n\n```cpp\n#include<cstdio>\n#include<cstring>\nint min(int x,int y){return x<y?x:y;}\nstruct node\n{\n    int n;\n    node *nxt;\n    node (int n)\n    {\n        this->n=n;\n        nxt=NULL;\n    }\n    node(){nxt==NULL;}\n};\nnode head[10200],*tail[10200];\nint dfn[10200],low[10200];\nint v[10200],cnt=0;\nbool in[10020];//\u662f\u5426\u5728\u6808\u4e2d\nint s[10020],top=0;//\u6808\nint Index=0;//\u7b2c\u51e0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\nint y_n[10020],y_v[10020];//\u5206\u522b\u5b58\u50a8\u7b2ci\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4ee5\u53ca\u5b58\u50a8\u7b2ci\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c\nvoid dfs(int x)\n{\n    if(!dfn[x])\n    {\n        dfn[x]=++cnt;\n        low[x]=dfn[x];//\u65b0\u65f6\u95f4\u6233\n    }\n    s[++top]=x;//\u5165\u6808\u5e76\u6807\u8bb0\n    in[x]=true;\n    node *p=&head[x];\n    while(p->nxt!=NULL)\n    {\n        p=p->nxt;\n        if(dfn[p->n]&&!in[p->n])//\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n            continue;\n        if(in[p->n])\n        {\n            low[x]=min(low[p->n],low[x]);//\u66f4\u65b0\u53ef\u56de\u6eaf\u7684\u503c\n            continue;\n        }\n        dfs(p->n);\n        low[x]=min(low[x],low[p->n]);//\u5982\u679c\u4e0b\u4e00\u4e2a\u70b9\u53ef\u56de\u6eaf\u5219\u5f53\u524d\u70b9\u4e5f\u53ef\u56de\u6eaf\n    }\n    if(dfn[x]==low[x])//x\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff0c\u53ef\u4ee5\u9000\u6808\u4e86\n    {\n        y_n[x]=++Index;\n        while(s[top]!=x)\n        {\n            in[s[top]]=false;\n            y_n[s[top]]=Index;\n            y_v[Index]+=v[s[top]];\n            top--;\n        }\n        in[s[top]]=false;//\u51fa\u6808\u65f6\u8981\u66f4\u6539\u72b6\u6001\n        y_n[s[top]]=Index;//\u5b58\u50a8s[top]\u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n        y_v[Index]+=v[s[top]];\n        top--;\n    }\n    return;\n}\nint n,ans=0,maxx=0;\nnode Head[10020],*Tail[10020];\nvoid Dfs(int x)//\u5728\u5efa\u7684\u65b0\u56fe\u4e2d\u627e\u6700\u957f\u70b9\u6743\u548c\u7684\u94fe\n{\n    node *p=&Head[x];\n    while(p->nxt!=NULL)\n    {\n        p=p->nxt;\n        ans+=y_v[p->n];//\u5f53\u524d\u5df2\u7ecf\u8d70\u8fc7\u7684\u70b9\u6743\u548c\n        if(ans>maxx)\n            maxx=ans;\n        Dfs(p->n);\n        ans-=y_v[p->n];\n    }\n}\nvoid another()//\u5904\u7406\u65b0\u56fe\n{\n    int indeg[10020];//\u5165\u5ea6in-degree\n    memset(indeg,0,sizeof(indeg));\n    node *p;\n    for(int i=1;i<=Index;i++)\n        Tail[i]=&Head[i];\n    for(int i=1;i<=n;i++)\n    {\n        p=&head[i];\n        while(p->nxt!=NULL)\n        {\n            p=p->nxt;\n            if(y_n[i]!=y_n[p->n])\n            {\n                Tail[y_n[i]]->nxt=new node(y_n[p->n]);\n                Tail[y_n[i]]=Tail[y_n[i]]->nxt;\n                indeg[y_n[p->n]]++;\n            }\n        }\n    }\n    for(int i=1;i<=Index;i++)\n        if(indeg[i]==0)//\u53ea\u6709\u5ea6\u4e3a0\u7684\u624d\u627e\uff0c\u526a\u4e00\u90e8\u5206\u679d\n        {\n            if(y_v[i]>maxx)\n                maxx=y_v[i];\n            ans=y_v[i];\n            Dfs(i);\n        }\n\n}\nint main()\n{\n    memset(in,0,sizeof(in));\n    memset(dfn,0,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    int m,u,V;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&v[i]);\n        tail[i]=&head[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&V);//\u5efa\u539f\u56fe\n        tail[u]->nxt=new node(V);\n        tail[u]=tail[u]->nxt;\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            dfs(i);//\u7f29\u70b9\n\n    another();//\u5efa\u65b0\u56fe\u5e76\u5904\u7406\n    printf(\"%d\\n\",maxx);\n    return 0;\n}\n```",
        "postTime": 1528281547,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "\u3010tarjan\u3011\u7f29\u70b9"
    },
    {
        "content": "\u5927\u81f4\u6d4f\u89c8\u4e86\u4e00\u4e0b\uff0c\u4f3c\u4e4e\u5728\u7f29\u70b9\u8fd9\u4e00\u5757\u51e0\u4e4e\u6ca1\u6709\u8ddf\u6211\u7684\u505a\u6cd5\u76f8\u4f3c\u7684\u2026\u2026\r\n\r\n\u4e8e\u662f\u53d1\u4e86\u4e2a\u9898\u89e3\uff0c\u8bb2\u4e00\u8bb2\u6211\u7684\u6559\u7ec3\u6559\u7ed9\u6211\u7684\u505a\u6cd5\u5427\u3002\r\n\r\n---\r\n\r\n\u5982\u679c\u8fd9\u4e2a\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\uff0c\u5219\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u8fdb\u884c\u6c42\u6700\u957f\u8def\u3002\u4f46\uff0c\u8fd9\u662f\u4e00\u5f20\u56fe\uff0c\u8bf4\u660e\u5176\u4e2d\u6709\u73af\uff0c\u8fd9\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\u3002\r\n\r\n\u4e8e\u662f\uff0c\u6211\u4eec\u8981\u628a\u73af\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8dd1 DAG \u4e86\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u60f3\u8981\u7684\u5c31\u662f\uff1a\u7f29\u70b9\u3002\r\n\r\n---\r\n\r\n\u9996\u5148\u4ecb\u7ecd\u51e0\u4e2a\u6982\u5ff5\uff1a\r\n\r\n* \u5f3a\u8fde\u901a\uff1a\u6709\u5411\u56fe\u4e2d\u4e24\u70b9\u80fd\u4e92\u76f8\u5230\u8fbe\uff0c\u90a3\u4e48\u5b83\u4eec\u5f3a\u8fde\u901a\u3002\r\n\r\n* \u5f3a\u8fde\u901a\u56fe\uff1a\u4efb\u610f\u4e24\u70b9\u80fd\u591f\u4e92\u76f8\u5230\u8fbe\u7684\u6709\u5411\u56fe\u53eb\u505a\u5f3a\u8fde\u901a\u56fe\u3002\r\n\r\n* \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u56fe\u5b50\u56fe\u53eb\u505a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\r\n\r\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u5728\u8fd9\u5f53\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u7ed3\u679c\u4e5f\u4e00\u6837\u3002\r\n\r\n\u90a3\uff0c\u5982\u4f55\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5462\uff1f\r\n\r\n\u6211\u4eec\u8fdb\u884c dfs\uff0c\u5b9a\u4e49\u6bcf\u4e2a\u70b9\u6709\u4e09\u4e2a\u72b6\u6001\uff1a\u6ca1\u641c\u7d22\uff080\uff09\uff0c\u641c\u7d22\u4e2d\uff08\u6b63\uff09\uff0c\u641c\u7d22\u5b8c\uff08\u8d1f\uff09\u3002\u5982\u679c\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\uff0c\u641c\u5230\u4e86\u6b63\u5728\u641c\u7d22\u7684\u70b9\uff0c\u8bf4\u660e**\u5b83\u4eec\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u91cd\u70b9\uff01\uff09**\u3002\r\n\r\n\u628a\u5b83\u4eec\u5408\u5e76\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff1f\u60f3\u5230\u4e86\u5e76\u67e5\u96c6\uff01\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5b83\u4eec\u7f29\u6210\u7684\u70b9\uff0c\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u56fe\uff0c\u5373 $f[i] = i$\u3002\u5728\u641c\u7d22\u65f6\uff0c\u5982\u679c\u9047\u5230\u6ca1\u641c\u7d22\u7684\u70b9\uff0c\u5c31\u7ee7\u7eed\u641c\uff1b\u5982\u679c\u9047\u5230\u641c\u7d22\u5b8c\u7684\u70b9\uff0c\u5c31\u4e0d\u9700\u518d\u641c\u4e86\uff1b\u5982\u679c\u9047\u5230\u4e00\u4e2a\u641c\u7d22\u4e2d\u7684\u70b9\uff0c\u5c31\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u3002\r\n\r\n\u4f46\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5408\u5e76\u65f6**\u5fc5\u987b\u662f\u5148\u641c\u5230\u7684\u70b9\u4e3a\u7956\u5148\u8282\u70b9\uff08\u91cd\u70b9\uff01\uff09**\uff0c\u5982\u679c\u7528\u540e\u641c\u5230\u7684\u70b9\u4f5c\u4e3a\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u540e\u641c\u7684\u641c\u5b8c\u540e\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u641c\u5b8c\u4e86\uff0c\u7b54\u6848\u5c31\u4e0d\u51c6\u786e\u3002\r\n\r\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\nvoid dfs(int u){\r\n    for(int i = head[u]; i; i = e[i].nxt){\r\n        int v = e[i].v;\r\n        if(!vis[v]){//\u5982\u679c\u6ca1\u641c\u7d22\r\n            vis[v] = vis[u] + 1;//\u8bb0\u5f55\u201c\u6df1\u5ea6\u201d\r\n            dfs(v);//\u7ee7\u7eed\u641c\r\n        }\r\n        int fu = anc(u), fv = anc(v);//anc \u662f\u5e76\u67e5\u96c6\u51fd\u6570\r\n        if(vis[fv] > 0){//\u4e00\u5b9a\u8981\u662f\u641c\u7d22\u4e2d\u7684\r\n            if(vis[fu] < vis[fv]) f[fv] = fu;\r\n            else f[fu] = fv;//\u6ce8\u610f\u8fd9\u91cc\uff0c\u6df1\u5ea6\u5c0f\u7684\u4e3a\u7956\u5148\u8282\u70b9\r\n        }\r\n    }\r\n    vis[u] = -1;//\u6807\u8bb0\u641c\u7d22\u5b8c\r\n    return;\r\n}\r\n```\r\n----\r\n\r\n\u63a5\u7740\uff0c\u6211\u4eec\u518d\u628a\u7f29\u5b8c\u7684\u70b9\u7684\u6743\u503c\u66f4\u65b0\u4e00\u4e0b\uff0c\u66f4\u65b0\u65b9\u6cd5\u5c31\u662f\u628a\u81ea\u5df1\u7684\u6743\u503c\u52a0\u5728\u7956\u5148\u8282\u70b9\u4e0a\u3002\r\n\r\n\u7136\u540e\uff0c\u6211\u4eec\u91cd\u65b0\u5efa\u56fe\uff0c\u5982\u679c\u539f\u6765\u4e00\u6761\u8fb9\u4e0a\u7684\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u8282\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u4e24\u4e2a\u7956\u5148\u8282\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u540c\u65f6\u8bb0\u5f55\u5165\u5ea6\u3002\r\n\r\n\u6700\u540e\u8dd1\u4e00\u904d toposort \u5c31\u884c\u4e86\uff0ctoposort \u7684\u8bdd\u5176\u5b83\u9898\u89e3\u90fd\u6709\u63d0\u5230\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\r\n\r\n---\r\n\r\n\u4e0b\u9762\u653e\u4e00\u4e0b AC \u4ee3\u7801\uff1a\uff08\u8f83\u5b8c\u6574\u6ce8\u91ca\uff09\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <queue>\r\n#include <algorithm>\r\nusing namespace std;\r\n#define N 100010\r\nstruct edge{\r\n    int u, v, nxt;\r\n}e[N];\r\nqueue <int> q;\r\nint head[N], cnt, n, m, x, y, vis[N], f[N], c[N], s[N], r[N], ans = 1, W[N];\r\ninline void add(int u, int v){\r\n    e[++cnt].u = u;//\u6ce8\u610f\u8981\u628a u \u4e5f\u7ed9\u52a0\u4e0a\uff0c\u540e\u9762\u9700\u8981\u8c03\u7528\r\n    e[cnt].v = v;\r\n    e[cnt].nxt = head[u];\r\n    head[u] = cnt;\r\n}\r\nint anc(int x){\r\n    if(x == f[x]) return x;\r\n    return f[x] = anc(f[x]);\r\n}//\u5e76\u67e5\u96c6\u6a21\u677f\r\nvoid dfs(int u){\r\n    for(int i = head[u]; i; i = e[i].nxt){\r\n        int v = e[i].v;\r\n        if(!vis[v]){//\u5982\u679c\u6ca1\u641c\u7d22\r\n            vis[v] = vis[u] + 1;//\u8bb0\u5f55\u201c\u6df1\u5ea6\u201d\r\n            dfs(v);//\u7ee7\u7eed\u641c\r\n        }\r\n        int fu = anc(u), fv = anc(v);//anc \u662f\u5e76\u67e5\u96c6\u51fd\u6570\r\n        if(vis[fv] > 0){//\u4e00\u5b9a\u8981\u662f\u641c\u7d22\u4e2d\u7684\r\n            if(vis[fu] < vis[fv]) f[fv] = fu;\r\n            else f[fu] = fv;//\u6ce8\u610f\u8fd9\u91cc\uff0c\u6df1\u5ea6\u5c0f\u7684\u4e3a\u7236\u4eb2\r\n        }\r\n    }\r\n    vis[u] = -1;//\u6807\u8bb0\u641c\u7d22\u5b8c\r\n    return;\r\n}\r\nint main(){\r\n    scanf(\"%d%d\", &n, &m);\r\n    for(int i = 1; i <= n; ++i) f[i] = i, scanf(\"%d\", W + i);\r\n    for(int i = 1; i <= m; ++i){\r\n        scanf(\"%d%d\", &x, &y);\r\n        add(x, y);\r\n    }\r\n    for(int i = 1; i <= n; ++i){\r\n        if(!vis[i]){//\u5982\u679c\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u641c\u7d22\u5c31\u8981\u7ee7\u7eed\u641c\r\n            vis[i] = 1;\r\n            dfs(i);\r\n        }\r\n    }\r\n    for(int i = 1; i <= n; ++i) c[anc(i)] += W[i];//\u7f29\u70b9\u6743\u503c\u5904\u7406\r\n    memset(head, 0, sizeof(head));\r\n    cnt = 0;//\u8fd9\u91cc\u8981\u6e05\u96f6\u54e6-v-\r\n    for(int i = 1; i <= m; ++i){\r\n        x = f[e[i].u], y = f[e[i].v];//\u7531\u4e8e\u5728\u4e0a\u9762\u5df2\u7ecf\u5168\u90e8\u904d\u5386\u8fc7 anc \u51fd\u6570\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u8c03\u7528\u5373\u53ef\r\n        if(x != y) add(x, y), r[y]++;//\u4e0d\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u8fde\u8fb9\r\n    }\r\n    for(int i = 1; i <= n; ++i){\r\n        if(i == f[i] && !r[i]) q.push(i), s[i] = c[i];\r\n    }//s[i] \u662f dp \u6570\u7ec4\r\n    while(!q.empty()){\r\n        int u = q.front(); q.pop();\r\n        for(int i = head[u]; i; i = e[i].nxt){\r\n            int v = e[i].v;\r\n            s[v] = max(s[v], s[u] + c[v]);\r\n            if(--r[v] == 0) q.push(v);\r\n        }\r\n        ans = max(ans, s[u]);\r\n    }//toposort \u6a21\u677f\r\n    printf(\"%d\", ans);\r\n    return 0;\r\n}\r\n```\r\n",
        "postTime": 1587390909,
        "uid": 147999,
        "name": "Warriors_Cat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9"
    },
    {
        "content": "~~\u7528\u4ec0\u4e48DP\uff0c\u7f51\u7edc\u6d41\u65e0\u654c\uff01~~\n\n------------\n\u5176\u5b9e\u8fd9\u9898\u548c [P3627](https://www.luogu.org/problem/P3627) \u633a\u50cf\u7684\uff0c\u90fd\u662f\u6c42\u6700\u957f\u8def\uff0c\u53ea\u662f\u90a3\u9898\u6709\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684\u9650\u5236\u7f62\u4e86\u3002\n\n\u7136\u800c\u56e0\u4e3a\u5148\u5199\u7684 $P3627$ \u7684\u9898\u89e3\uff0c\u6240\u4ee5\u5173\u4e8e $trajan$ \u7684\u8be6\u7ec6\u89e3\u91ca\u6211\u653e\u5728 [P3627 [APIO2009]\u62a2\u63a0\u8ba1\u5212\u7684\u9898\u89e3](https://www.luogu.org/blog/wyz598085788/solution-p3627) \u91cc\u4e86\uff08~~\u5176\u5b9e\u662f\u4e0d\u60f3\u590d\u5236\u8fdb\u6765\u4e86~~\uff09\uff0c\u8981\u4e86\u89e3 $trajan$ \u600e\u4e48\u5b9e\u73b0\u7684 $O(N)$ \u627e\u73af\u7684\u53ca\u5176\u601d\u60f3\u7684\uff0c\u53ef\u4ee5\u53bb\u770b\u770b\uff08~~\u987a\u4fbf\u70b9\u4e2a\u8d5e\u5427~~\uff09\uff08\u4e0d\u8fc7\u5efa\u8bae\u521d\u5b66\u8005\u7ec4\u5408\u9605\u8bfb\uff09\n\n\u8fd9\u7bc7\u9898\u89e3\u6211\u4eec\u4e3b\u8981\u662f\u5c06\u540e\u9762\u7684\u90e8\u5206\uff0c\u6c42\u4e00\u6761\u6700\u957f\u8def\uff0c\u5f88\u591a\u4eba\u7528\u7684 $DP$ \u505a\u7684\uff08\u56e0\u4e3a\u9898\u9762\u5199\u7740\u561b\uff09\uff0c\u7136\u800c\uff0c\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u9ebb\u70e6\uff0c\u7a0d\u5fae\u501f\u52a9\u4e00\u4e0b\u7f51\u7edc\u6d41\u7684\u601d\u60f3\uff0c\u591a\u5efa\u51e0\u6761\u8fb9\u5c31\u51fa\u6765\u4e86\u3002\n\n------------\n\n\u8fd9\u9053\u9898\u600e\u4e48\u8fd0\u7528\u7f51\u7edc\u6d41\u7684\u601d\u60f3\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u5427\uff0c\u867d\u7136\u4e0e\u771f\u6b63\u7684\u7f51\u7edc\u6d41\u6709\u4e9b\u51fa\u5165\uff0c\u4f46\u5bf9\u4ee5\u540e\u7f51\u7edc\u6d41\u7684\u5b66\u4e60\u4e5f\u6709\u5e2e\u52a9\u3002\uff08\u5df2\u5b66\u7684\u5927\u4f6c\u53ef\u8df3\u8fc7\uff09\n\n\u5bf9\u4e8e\u6ca1\u6709\u9650\u5b9a\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684\u6c42\u4e00\u6761\u6700\u957f\u8def\uff08\u5176\u5b9e\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7f51\u7edc\u6d41\uff08\u8d39\u7528\u6d41\uff09\u662f\u53ef\u4ee5\u6c42\u591a\u6761\uff0c\u4f46\u6b64\u9898\u53ea\u8981\u6c42\u6c42\u4e00\u6761\uff0c\u5c31\u53ef\u4ee5\u6452\u5f03\u6d41\u91cf\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff08\u8d77\u70b9\uff09\uff08\u540e\u9762\u7b80\u79f0\u4e3a $S$ \uff09\u4e0e\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff08\u7ec8\u70b9\uff09\uff08\u540e\u9762\u7b80\u79f0\u4e3a $T$ \uff09\u3002\n\n\u7136\u540e\u5c06 $S$ \u5411\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u70b9\u5efa\u7acb\u4e00\u6761\u8fb9\u6743\u4e3a\u70b9\u6743\u7684\u5355\u5411\u8fb9\uff0c\u5c06\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u70b9\u5411 $T$ \u5efa\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u5355\u5411\u8fb9\u3002\u4e3a\u4ec0\u4e48\u8fb9\u6743\u4f1a\u7b49\u4e8e\u70b9\u6743\u5462\uff1f\n\n\u5176\u5b9e\u7f29\u5b8c\u70b9\u540e\uff0c\u6211\u4eec\u4f1a\u5c06\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u7b49\u4e8e\u8fd9\u6761\u8fb9\u6307\u5411\u7684\u70b9\u7684\u70b9\u6743\u3002\u56e0\u4e3a\u6b64\u65f6\u5df2\u7ecf\u6ca1\u6709\u73af\u4e86\uff0c\u5e76\u4e0d\u4f1a\u518d\u8d70\u56de\u6765\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u70b9\u4e0d\u53ef\u80fd\u8d70\u4e24\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u540c\u4e00\u6761\u8fb9\u4e0d\u4f1a\u8d70\u4e24\u6b21\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\u4e86\uff0c\u81f3\u4e8e\u4f7f\u8fb9\u6743\u7b49\u4e8e\u70b9\u6743\u7684\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff08\u5355\u5411\u8fb9\u53c8\u4e0d\u80fd\u8d70\u56de\u53bb\uff09\u3002\n\n\u7136\u540e\u76f4\u63a5\u4ece $S$ \u8dd1 $SPFA$ \u8dd1\u51fa\u5230 $T$ \u7684\u6700\u957f\u8def\u5373\u53ef\u3002\n\n\u867d\u7136\u6b63\u786e\u6027\u663e\u7136\uff0c\u4f46\u6b64\u5904\u8fd8\u662f\u8bc1\u660e\u4e00\u4e0b\u8be5\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff08~~\u56e0\u4e3a\u8fc7\u4e86\u561b\uff0c\u6240\u4ee5\u6b63\u786e~~\uff09\uff1a\uff08\u975e\u6b63\u786e\u683c\u5f0f\uff09\n\n\u53cd\u8bc1\u6cd5\u3002\u5047\u8bbe $S$ \u5230 $T$ \u7684\u6700\u957f\u8def\u5e76\u4e0d\u662f\u6574\u4e2a\u56fe\u7684\u6700\u957f\u8def\u3002\n\n\u5373 $S$ \u5230 $T$ \u4e4b\u95f4\u7684\u8def\u5f84\u4e2d\u5e76\u4e0d\u5305\u542b\u56fe\u4e2d\u6700\u957f\u8def\u6240\u5728\u7684\u8def\u5f84\u3002\n\n\u8bbe\u56fe\u4e2d\u6700\u957f\u8def\u7684\u8def\u5f84\u4e3a $A->B->C$ \uff08 $A\u3001B\u3001C$ \u90fd\u662f\u6307\u4e00\u6bb5\u8def\u5f84\uff0c\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2a\u70b9\uff09\u90a3\u4e48\u6709\u6211\u4eec\u524d\u9762\u5efa\u7684\u8fb9\u53ef\u5f97\uff1a\u5fc5\u6709\u4e00\u6bb5\u8def\u5f84\u662f $S->A$ \uff0c\u4e5f\u5fc5\u6709\u4e00\u6bb5\u8def\u5f84\u662f $C->T$ \u3002\n\n\u6240\u4ee5 $S$ \u5230 $T$ \u4e4b\u95f4\u7684\u8def\u5f84\u4e2d\u5e76\u4e0d\u5305\u542b\u56fe\u4e2d\u6700\u957f\u8def\u6240\u5728\u7684\u8def\u5f84\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u6240\u4ee5\u539f\u7ed3\u8bba\u6210\u7acb\u3002\n\n------------\n\n\u8d34\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#define maxn 500005\n#define maxm 500005\n#define INF 0x3f3f3f3f\ninline int read(){\n    int r=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){r=(r<<3)+(r<<1)+c-'0';c=getchar();}\n    return r*f;\n}\nint s,t,n,m,N,head[maxn],dis[maxn],q[maxn],uu[maxn],vv[maxn];\nbool vis[maxn];\nint s_e;\nstruct E{\n    int v,w,nxt;\n}e[maxm];\nstruct E1{\n    int v,nxt;\n}e1[maxm];\nint head1[maxn],s_e1;\nint sd[maxn],dfn[maxn],low[maxn];\nint cnt,stac[maxn*10],top,s_dfn;\nbool ins[maxn];\nint d[maxn],c[maxn],diss[maxn];\nstruct Max_fei{\n    inline void a_e(int u,int v,int w){\n        e[++s_e]=(E){v,w,head[u]};\n        head[u]=s_e;\n    }\n    inline int spfa(){//SPFA\u8dd1\u6700\u957f\u8def\n        for(int i=0;i<=N;i++){\n            dis[i]=-INF;\n            vis[i]=false;\n        }\n        dis[s]=0;\n        vis[s]=true;\n        q[0]=s;\n        int hd=0,tl=1;\n        while(hd^tl){\n            int u=q[hd++];\n            hd%=maxn;\n            for(int i=head[u];i;i=e[i].nxt){\n                int v=e[i].v;\n                if(dis[v]<dis[u]+e[i].w){\n                    dis[v]=dis[u]+e[i].w;\n                    if(vis[v])continue;\n                    vis[v]=true;\n                    q[tl++]=v;\n                    tl%=maxn;\n                }\n            }\n            vis[u]=false;\n        }\n        return dis[t]; //s\u5230t\u7684\u6700\u957f\u8def\u5373\u662f\u7b54\u6848\n    }\n}Flow;\ninline void a_e(int u,int v){\n    e1[++s_e1]=(E1){v,head1[u]};\n    head1[u]=s_e1;\n}\ninline int min(int a,int b){\n\treturn a<b?a:b;\n}\ninline int max(int a,int b){\n\treturn a>b?a:b;\n}\nvoid tarjan(int u){//trajan\u7f29\u70b9\n\tdfn[u]=low[u]=++s_dfn;\n\tstac[++top]=u;\n  \tins[u]=1;\n\tfor(int i=head1[u];i;i=e1[i].nxt){\n\t\tint v=e1[i].v;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(ins[v])low[u]=min(low[u],dfn[v]); \n\t}\n\tif(low[u]==dfn[u]){\n\t\tcnt++;\n\t\tint v=0;\n\t\twhile(v!=u){\n\t\t\tv=stac[top--];\n\t\t\td[v]=cnt;\n\t\t\tins[v]=0;\n\t\t\tc[cnt]+=diss[v];\n\t\t}\n\t}\n}\ninline void work(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n    \tdiss[i]=read();\n    for(int i=1;i<=m;i++){\n        int u=read(),v=read();\n        uu[i]=u,vv[i]=v;\n        if(u==v)continue;\n        a_e(u,v);\n    }\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])tarjan(i);\n    s=0;t=cnt+1;//s:\u8d85\u7ea7\u6e90\u70b9\uff0ct:\u8d85\u7ea7\u6c47\u70b9\n    N=cnt+1;\n    for(int i=1;i<=cnt;i++){\n    \tFlow.a_e(s,i,c[i]);//s\u5411\u6bcf\u4e2a\u70b9\u5efa\u5355\u5411\u8fb9\uff0c\u8fb9\u6743\u7b49\u4e8e\u70b9\u6743\n    \tFlow.a_e(i,t,0);//\u6bcf\u4e2a\u70b9\u5411t\u5efa\u5355\u5411\u8fb9\uff0c\u8fb9\u6743\u7b49\u4e8e0\n    }\n\tfor(int i=1;i<=m;i++){\n\t\tif(d[uu[i]]==d[vv[i]])continue;\n        Flow.a_e(d[uu[i]],d[vv[i]],c[d[vv[i]]]);//\u70b9\u6743\u8f6c\u5316\u4e3a\u8fb9\u6743\n\t}\n    printf(\"%d\\n\",Flow.spfa());//\u6700\u957f\u8def\n}\nint main(){\n    work();\n    return 0;\n}\n```\n\n~~\u5b8c\u7ed3\u5077\u5077\u6492\u82b1~~ \u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f",
        "postTime": 1565232334,
        "uid": 71403,
        "name": "\u4e00\u53f6\u77e5\u79cb\u3002",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u672c\u4eba\u7b2c\u4e00\u6b21\u505atarjan\uff0c\u8fd9\u7c7b\u6c34\u9898\u82b1\u4e862:30\u5c0f\u65f6\u624d\u8c03\u597d\uff0c\u4e00\u662f\u56e0\u4e3a\u521a\u8f6cc++\u4e0d\u4e60\u60ef\uff0c\u603b\u4f1a\u628a==\u6253\u6210=\uff0c\u627e\u4e86\u597d\u4e45\u7684\u9519\u3002\u7136\u540e\u63a5\u7740\u4e00\u76f440\u5206\uff0c\u662f\u53d1\u73b0\uff0cnow=next\uff08now\uff09\u6253\u5728\u4e86\u62ec\u53f7\u7684\u5916\u9762\uff0c\u771f\u7684\u662f\u849f\u84bb\u3002\n\n\u597d\u4e86\u8fdb\u5165\u6b63\u9898\u4e86\u3002\u8fd9\u9898\u6211\u89c9\u5f97\u662ftarjan\u7f29\u70b9\u7136\u540e\u518d\u5c06\u4e0d\u518d\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u91cd\u65b0\u8fde\u8fb9\uff0c\u7136\u540e\u76f4\u63a5spfa\u904d\u5386\uff08\u6309\u7406\u6765\u8bf4floyd\u76f4\u63a5\u5404\u4e2a\u5f3a\u8054\u901a\u5206\u91cf3\u65b9\u7206\u626b\u597d\u50cf\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\u3002\u8fd9\u662f\u6211\u7684\u89e3\u6cd5\u3002\u4e4b\u524d\u8fd8\u6709\u5f88\u591adalao\u7684\u89e3\u6cd5\uff0c\u597d\u50cf\u5f88\u591a\u7528\u7684\u90fd\u662fdp\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u60f3\u5230\u3002\u3002\u3002\u3002\n\n{\u8be6\u7ec6\u89e3\u91ca\u8bf7\u89c1\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca}\n\n        \n    \n    \n\n```cpp\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#define MAXN (1000001)  {\u6211\u89c9\u5f97\u8fd9\u4e2a\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u9632\u6b62\u56e0\u4e3a\u624b\u8d31\u800c\u5bfc\u81f4\u7684mle\u6216\u7a7a\u95f4\u5f00\u5c0f\u4e86}\n#define ll long long\n#define INF (0x7f7f7f7f)\n#define max(a,b) (((a)>(b)) ? (a):(b))\n#define min(a,b) (((a)>(b)) ? (b):(a)){\u624b\u6253\u7684max\uff0cmin\u8981\u6bd4cmath\u4e2d\u7684\u4f1a\u5feb}\nusing namespace std;\nint q[MAXN],dis[MAXN];\nint get[MAXN];\nint top,size,len,k,dc,maxx;\nint a[MAXN],head[MAXN],next[MAXN],color[MAXN],dfn[MAXN],low[MAXN],stack[MAXN],f[MAXN],x1[MAXN],y1[MAXN],rd[MAXN];\nbool visit[MAXN],instack[MAXN],vis[MAXN];\nvoid add(int x,int y ){\n    ++top;\n    get[top]=y;\n    next[top]=head[x];\n    head[x]=top;      {\u90bb\u63a5\u8868\u4e0d\u7528\u591a\u8bf4}\n}\nvoid SPFA(int x){\n    memset(vis,0,sizeof(vis));\n    memset(dis,0,sizeof(dis));\n    int h=0,t=1;     {\u521a\u5f00\u59cb\u5c06\u8d77\u70b9\u8fdb\u961f\u5f00\u59cb\u66f4\u65b0}\n    q[1]=x; dis[x]=f[x];{\u56e0\u4e3a\u662f\u70b9\u7684\u904d\u5386\uff0c\u6240\u4ee5\u521a\u5f00\u59cb\u8981\u628a\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u6743\u503c\u8bbe\u6210\u70b9\u6743\uff0c\u4e0d\u7136\u540e\u9762\u5c31\u4f1a\u5c11\u4e00\u4e2a\u8d77\u70b9\u7684\u503c}\n    while (h<t){\n        ++h;\n        int x=q[h];\n        vis[x]=0;   {\u56e0\u4e3a\u5df2\u7ecf\u5f39\u51fa\u6240\u4ee5\u6807\u8bb0\u4e3a\u4e0d\u5728\u961f\u5217\u4e2d}\n        int now=head[x];\n        while (now>0){\n            int g=get[now];\n            if (dis[x]+f[g]>dis[g]) {\n                dis[g]=dis[x]+f[g];\n                if (not vis[g]) {  {\u5982\u679c\u4e0d\u5728\u961f\u5217\u4e2d\u90a3\u4e48\u8fdb\u961f}\n                    t++;\n                    q[t]=g;\n                    vis[g]=1;\n                }\n            }\n            now=next[now];\n        }\n    }\n    for (int i=1;i<=dc;++i)\n    maxx=max(maxx,dis[i]);   {\u7528\u5f53\u524d\u51e0\u70b9\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\u7b54\u6848maxx\u503c}\n}\nvoid tarjan(int x){\n    ++k; int u=x;\n    dfn[x]=low[x]=k; visit[x]=true; instack[x]=true;++top; stack[top]=x;\n    int now=head[x];\n    do {\n        int v=get[now];\n        if (visit[v]==0) {\n            tarjan(v);    {\u5982\u679c\u76ee\u6807\u70b9\u4e0d\u5728\u6808\u4e2d\u90a3\u4e48\u7ee7\u7eed\u5f80\u4e0b\u641c}\n            low[u]=min(low[u],low[v]);    {\u7528\u4f60\u513f\u5b50\u7684low\u503c\u53bb\u66f4\u65b0\u4f60\u7684low\u503c\uff0c\u56e0\u4e3a\u4f60\u7684low\u503c\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u7b49\u4e8e\u4f60\u513f\u5b50\u7684low\u503c}\n        } else\n        if (instack[v]) low[u]=min(dfn[v],low[u]);{\u5982\u679c\u76ee\u6807\u70b9\u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u4f60\u513f\u5b50\u7684dfn\u503c\u4e5f\u5c31\u662f\u65f6\u95f4\u6233\u6765\u66f4\u65b0\u4f60\u7684low\u503c}\n        now=next[now];{\u90bb\u63a5\u8868\u4fbf\u5229}\n    } while(now>0); \n    if (dfn[x]==low[x]) {   {\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u5c31\u5f00\u59cb\u5f39\u6808\uff0c\u76f4\u5230\u5f39\u5230\u5f53\u524d\u8fd9\u4e00\u4e2a\u70b9\u4e3a\u6b62}\n        ++dc;\n        while (stack[top+1]!=x){   {\u56e0\u4e3a\u5f53\u524d\u8fd9\u4e00\u4e2a\u70b9\u4e5f\u8981\u5f39\u51fa\uff0c\u6240\u4ee5\u662ftop+1\uff0c\u4e0d\u7136\u7684\u8bdd\u5c31\u4f1a\u5c11\u5f39\u4e00\u4e2a}\n            color[stack[top]]=dc;{\u67d3\u8272}\n            f[dc]+=a[stack[top]];{\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u989c\u8272\u7684\u70b9\u7684\u603b\u6743\u503c}\n            instack[stack[top]]=0;{\u5f39\u6808}\n            top--;        {\u5c06\u6808\u9876\u6307\u9488-1}\n        }\n    }\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n    for (int i=1;i<=m;++i){\n        int x,y;\n        scanf(\"%d%d\",&x1[i],&y1[i]);   \n        add(x1[i],y1[i]);\n    }    \n    top=0;\n    for (int i=1;i<=n;++i)if (not visit[i]) tarjan(i);\n    memset(head,0,sizeof(head));\n    memset(next,0,sizeof(next));\n    memset(get,0,sizeof(get));\n    top=0;\n    for (int i=1;i<=m;++i) \n        if (color[x1[i]]!=color[y1[i]]) {    {\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u90a3\u4e48\u8fde\u8fb9}\n            add(color[x1[i]],color[y1[i]]);  {\u8fde}\n            rd[color[y1[i]]]++;     {\u5c06\u76ee\u6807\u70b9\u7684rd+1\uff0c\u4ee5\u4fbf\u540e\u9762\u5904\u7406}\n            }\n    for (int i=1;i<=dc;++i){\n```\nif \uff08rd[i]==0\uff09  {\u56e0\u4e3ard\u4e0d\u4e3a0\u7684\u70b9\u80af\u5b9a\u4f1a\u88ab\u522b\u7684\u70b9\u8d70\u5230\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4fbf\u5229rd\u4e3a0\u7684\u8fb9\uff0c\u53ef\u4ee5\u8282\u7701\u65f6\u95f4}\n    SPFA(i);\n\n    }\n    printf(\"%d\",maxx);  {\u6700\u540e\u8f93\u51fa\u4fbf\u5229\u5230\u7684\u6700\u5927\u503c}\n\n}",
        "postTime": 1513144947,
        "uid": 26937,
        "name": "_soul_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u9996\u5148\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u539f\u56fe\uff0c\u6765\u4e00\u6ce2tarjan\u7f29\u70b9\uff0c\u7136\u540e\u518d\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u4e00\u4e2a\u65b0\u56fe\n\n\u6700\u540e\u6765\u4e2atoposort\u6c42\u4ece\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u5230\u5b83\u80fd\u8d70\u5230\u7684\u70b9\u7684\u6700\u5927\u503c\n\nps \u7b2c\u4e00\u6b21topo\u7528\u6808 \u7528\u5b83\u7684\u7406\u7531\u662f \u65e2\u7136tarjan\u90fd\u5f00\u4e86\u4e2a\u6808 \u6211\u5c31\u61d2\u5f97\u518d\u5f00\u4e2al,r\u548cQ\u4e86 2333333\n\n\ntarjan\u7f29\u70b9\u5c31\u662f\u6c42\u5f3a\u8fde\u901a\u5206\u91cf \u5728\u5f39\u51fa\u6808\u65f6\n\n\u5c06\u5f53\u524d\u70b9\u6620\u5c04\u4e3a\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\n\n\n\u5982\u679c\u7528F[k]\u8868\u793a\u4ece\u5165\u5ea6\u4e3a\u96f6\u70b9\u5230\u5b83\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u4e4b\u548c\n\n\u8fd9\u6837F[k]max\uff081<=k<=n&& k\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff09\u5c31\u662f\u6700\u5927\u503c\n\n\n\n\n\n\n\n\n\n    \n```cpp\n#include<iostream>\nusing namespace std;\nconst int maxn = 10007;\nconst int maxm = 100007;  \nstruct node\n{\n    int x,y;\n}E[maxm],ne[maxm];\nint n,m,tm = 0,top = 0,tot = 0;\nint W[maxn],dfn[maxn],low[maxn],Head[maxn],Next[maxm],S[maxn],V[maxn],sd[maxn];//w \u70b9\u6743...sd \u7f29\u70b9\u540e \u65e7\u70b9\u6240\u5bf9\u5e94\u7684\u65b0\u70b9\nint nh[maxn],nn[maxm],in[maxn],D[maxn];//newhead\uff0cnewnext\uff0cindex\u5165\u5ea6\uff0cD\u5c31\u662f\u4e0a\u9762\u8bf4\u7684F\u5566\nvoid tarjan(int x)\n{\n    dfn[x] = low[x] = ++tm;\n    S[++top] = x; V[x] = 1;\n    for (int y,i = Head[x]; i; i = Next[i])\n    {\n        y = E[i].y;\n        if (!dfn[y])\n        {\n            tarjan(y);\n            low[x] = min(low[x],low[y]);\n        }\n        else if (V[y])\n        {\n            low[x] = min(low[x],low[y]);// low[x] = min(low[x],dfn[y]);\u4e24\u79cd\u90fd\u884c\uff0c\u8001\u5e08\u8bb2\u7684\u6ce8\u91ca\u91cc\u7684 \u6c42\u5927\u4f6c\u89e3\u91ca\u4e0b\u5230\u5e95\u54ea\u79cd\u597d\n        }\n    }\n    if (dfn[x] == low[x])\n    {\n        int y;\n        while (y = S[top--])\n        {\n              V[y] = 0;\n              sd[y] = x;//\u7f29\u70b9\n              if (y==x) break;\n              W[x] +=W[y];\n        }\n    }\n    return;\n}\nint main()\n{\n    cin>>n>>m;\n    for (int i = 1; i<=n; i++)\n    {\n        scanf(\"%d\",&W[i]);\n    }\n    for (int i = 1; i<=m; i++)\n    {\n        scanf(\"%d%d\",&E[i].x,&E[i].y);\n        Next[i] = Head[E[i].x];\n        Head[E[i].x] = i;\n    }    \n    for (int i = 1; i<=n; i++)\n    {\n        if (!dfn[i])\n        {\n            tarjan(i);\n        }\n    }\n    for (int x,y,i = 1; i<=m; i++)\n    {\n        x = sd[E[i].x]; y = sd[E[i].y];\n        if (x!=y)//\u4e0d\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \u8bf4\u660e\u9700\u8981\u5efa\u8fb9\n        {\n            ne[++tot].x = x; ne[tot].y = y;\n            nn[tot] = nh[x];\n            nh[x] = tot;\n            in[y]++;\n        }\n    }\n    top =  0;\n    for (int i = 1; i<=n; i++)\n    {\n        if (sd[i] == i && !in[i])//\u627e\u90a3\u4e9b\u5165\u5ea6\u4e3a\u96f6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6839\u8282\u70b9\n        {\n            S[++top] = i;\n            D[i] = W[i];\n        }\n    }\n    while (top)\n    {\n        int x = S[top--];\n        for (int y,i = nh[x]; i; i = nn[i])\n        {\n            y = ne[i].y;\n            D[y] = max(D[y],D[x]+W[y]);\n            if (--in[y] == 0)\n            {\n                S[++top] = y;\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 1; i<=n; i++)\n    {\n        ans = max(ans,D[i]);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1510153473,
        "uid": 24125,
        "name": "JerryCao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u4e3b\u8981\u662f\u770b\u770b\u5173\u952e\u8def\u5f84\u7684\u6c42\u6cd5\n\n\n```cpp\n\n\u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n\n\u3002\u3002\u3002\n\u4e00\u770b\u4fbf\u662f\u7f29\u70b9\u4e86\uff08\u8fd9\u4e0d\u5c31\u662f\u6a21\u677f\u5417\uff09\uff1b\n\u7f29\u70b9\u540e\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u662f\u4e0d\u5b58\u5728\u201c\u56de\u5934\u8d70\u201d\u7684\uff1b \n\u4e5f\u81ea\u7136\u53ea\u8d70\u4e86\u4e00\u6b21 \n```\n\n\n\u5206\u6790\n```cpp\n\u7f29\u70b9\u6a21\u677f\uff0c\u849f\u84bb\u7528\u7684\u662ftarjan\u548cspfa\u505a\u7684\uff1b\n\u9898\u76ee\u76ee\u7684\uff1a \n\u7f29\u70b9\uff1a\u5c06\u4e00\u5f20\u6709\u5411\u6709\u73af\u7684\u56fe\uff0c\u53d8\u4e3a\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\uff0c\u4fbf\u4e8e\u64cd\u4f5c\uff1b\n\u6c42\u5173\u952e\u8def\u5f84\uff1a\u4e00\u5f20AOV\u56fe\u4e0a\u7684\u6700\u957f\u8def\uff08\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\uff09\uff1b \n\u5206\u6790\uff1a\n\u7f29\u70b9\u7528tarjan\uff0c\u697c\u4e0a\u5927\u4f6c\u8bb2\u5f97\u5f88\u597d\u4e86\uff0c\u8fd9\u91cc\u4e0d\u52a0\u7d2f\u8ff0\uff1b\n\u6c42\u5173\u952e\u8def\u5f84\uff1a\u8fd9\u662f\u4e00\u4e2a\u65e0\u6839\u6811\uff0c\u8981\u6709\u4e00\u4e2a\u6e90\u70b9\u548c\u6c47\u70b9\uff1b\n\u6216\u8005\u6bcf\u4e2a\u70b9\u90fd\u5f53\u505a\u6839\u8dd1\u4e00\u904d\uff1b\n\u4e3a\u4e86\u7b80\u5355\u6211\u8fd9\u91cc\u7528\u4e86\u540e\u8005 \n\u4f46\u9898\u76ee\u6728\u6709\uff0cso\u6211\u4eec\u5f97\u81ea\u5df1\u52a0\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\uff1b\n\u4e3a\u4e86\u7b80\u4fbf\u6211\u8fd9\u91cc\u4f7f\u7528\u4e86SPFA\uff08\u8fd8\u662f\u633a\u5feb\u7684\uff09\uff1b\n\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u662f\u662f\u6bcf\u4e2a\u51fa\u53d1\u70b9\u7684\u70b9\u503c\uff1b \n```\n\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u7b2c\u4e8c\u79cd\uff0c\u7528\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u7559\u7ed9\u5927\u5bb6\u601d\u8003\n\n\u76f4\u63a5\u653e\u4ee3\u7801\u4e86\n```cpp\n\n#include<bits/stdc++.h>// \u4e07\u80fd\u5934 \nusing namespace std; \nconst int inf = 500100;// \u8fb9\u6570 \nconst int INF = 100100;// \u70b9\u6570 \nint head[inf];// \u539f\u56fe\u7684 \nbool vis[INF];// \u662f\u5426\u5728\u6808or\u961f\u5217 \nint sd[INF];// \u7f29\u70b9\u540e\u7684\u70b9\u503c \nint color[INF];// \u539f\u70b9\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\u4e00\u4e2a\u989c\u8272 \nint v[inf];// \u539f\u70b9\u503c \nint cnt = 0,n,m,total=0;\nstack<int> q;// tarjan\u7684\u6808 \nstruct Edge{\n\tint to;\n\tint next;\n}edge[inf];// \u539f\u8fb9 \nstruct EDGE{\n\tint to;\n\tint next;\n}e[inf];// \u73b0\u8fb9 \nint cctv=0;\nint tarjan_head[inf];\nvoid add_edge(int x,int y)//\u52a0\u73b0\u8fb9 \n{\n\tcctv++;\n\te[cctv].next=tarjan_head[x];\n\te[cctv].to=y;\n\ttarjan_head[x]=cctv;\n}\nvoid add(int x,int y)// \u52a0\u539f\u8fb9 \n{\n\tcnt++;\n\tedge[cnt].next=head[x];\n\tedge[cnt].to=y;\n\thead[x]=cnt;\n}\nint dfn[INF];// dfs\u5230\u7684\u65f6\u95f4 \nint low[INF];// \u53ef\u4ee5\u8ffd\u6eaf\u5230\u7684\u6700\u5c0f\u7684dfn \nint tim=1;// dfs\u7684\u65f6\u95f4 \nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=tim;\n\ttim++;\n    vis[x]=true;\n\tq.push(x);\n    for(int i=head[x];i;i=edge[i].next)\n\t{\n        int u=edge[i].to;\n        if(!dfn[u])\n\t\t{\n\t\t\ttarjan(u);\n\t\t\tlow[x]=min(low[x],low[u]);//tarjan\u677f\u5b50 \n\t\t} \n        else if(vis[u]) low[x]=min(low[x],dfn[u]);//\u5728\u6808\u4e2d \n    }\n    if(low[x]==dfn[x]) \n\t{\n\t\t//\u627e\u5230\u4e86\u8fd9\u4e2a\u5206\u91cf\u7684\u4ee3\u8868\u5143\u7d20\u4e86 \n        total++;\n\t\tint y;\n        do{\n        \t//\u51fa\u6808 \n\t\t\ty=q.top();\n\t\t\tq.pop();\n            vis[y]=false;\n\t\t\tcolor[y]=total;\n\t\t\tsd[total]+=v[y];\n        }while(x!=y);\n    }\n}\nint dist[inf];\nint spfa(int x)\n{\n\tint sum=0;\n\tmemset(dist,-0x3f,sizeof(dist));\n\tmemset(vis,false,sizeof(vis));//\u4e3a\u4e86\u8282\u7ea6\u7a7a\u95f4\uff0c\u518d\u7528\u4e00\u6b21\u5427 \n\tqueue<int> Q;//spfa\u7684\u677f\u5b50 \n\tQ.push(x);\n\tvis[x]=true;\n\tdist[x]=0;\n\twhile(!Q.empty())\n\t{\n\t\tx=Q.front();\n\t\tQ.pop();// \u51fa\u961f \n\t\tvis[x]=false;\n\t\tsum=max(sum,dist[x]+sd[x]);//\u8981\u5224\u65ad\u73b0\u70b9\u4e0a\u7684\u503c\u548c\uff0c\u8fb9\u4e0a\u52a0\u4e0a\u7684\u503c \n\t\tfor(int i=tarjan_head[x];i;i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tif(dist[y]<dist[x]+sd[x])\n\t\t\tdist[y]=dist[x]+sd[x];// \u66f4\u65b0 \n\t\t\tif(vis[y]) continue;\n\t\t\tQ.push(y);\n\t\t}\n\t}\n\t//cout<<\"sum :\"<<sum<<endl;\n\treturn sum;\n}\nint main()\n{\n\tcin>>n>>m;// \u8f93\u5165 \n\tfor(int i=1;i<=n;i++)\n\tcin>>v[i];// \u8f93\u5165 \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\tadd(a,b);// \u539f\u56fe\u7684\u8fb9 \n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!dfn[i])\n\t\t{\n\t\t\ttarjan(i);// \u8dd1tarjan \n\t\t} \n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=head[i];j;j=edge[j].next)\n\t\t{\n\t\t\tint xx=edge[j].to;// \u539f\u8fb9\uff0c\u82e5\u4e0d\u662f\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\uff0c\u518d\u5728\u73b0\u56fe\u4e0a\u52a0\u8fb9 \n\t\t\tif(color[i]!=color[xx])\n\t\t\tadd_edge(color[i],color[xx]);// \u52a0\u8fb9 \n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=total;i++)\n\t{\n\t\tans=max(spfa(i),ans);//\u8dd1SPFA \n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n} \n```\n",
        "postTime": 1569647767,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "p3387"
    },
    {
        "content": "```cpp\n\u80cc\u666f:\u4f5c\u4e3a\u9000\u5f79\u524d\u7684\u6700\u540e\u4e00\u7bc7\u9898\u89e3,\u7231\u4e86\u4e00\u8f88\u5b50\u677f\u5b50\u7684\u6211\u51b3\u5b9a\u53d1\u4e00\u6b21\u6a21\u677f\u9898\u7684\u9898\u89e3.\n```\n\u9898\u9762:https://www.luogu.org/problem/P3387\n```cpp\n\u672c\u9898\u7684\u786e\u662f\u6709\u4e9b\u590d\u6742,\u9996\u5148\u8981\u5229\u7528tarjan\u7b97\u6cd5\u7f29\u70b9,\u5c06\u6574\u5f20\u56fe\u7f29\u6210\u4e00\u4e2aDAG(\u6709\u5411\u65e0\u73af\u56fe)\uff0c\n\u4e4b\u540e\u518d\u5229\u7528\u7f29\u597d\u70b9\u7684\u65e7\u56fe\u518d\u6b21\u5efa\u65b0\u56fe,\u4e4b\u540e\u6c42\u4e00\u6b21\u62d3\u6251\u5e8f\u7528\u6765dp\n\u7f29\u70b9\u7684\u677f\u5b50\u5c31\u4e0d\u653e\u4e86,\u76f8\u4fe1\u5927\u5bb6\u70b9\u8fdb\u8fd9\u9898\u4e4b\u524d\u5c31\u5df2\u7ecf\u719f\u7ec3\u638c\u63e1\u4e86.\n\u9996\u5148\u662f\u62d3\u6251\u6392\u5e8f\u7684\u4ee3\u7801:\nvoid topo(){\n\tqueue<int> q;\n\tfor(int i=1;i<=sum;i++){\n\t\tif(in[i]==0){\n\t\t\tq.push(i);\n\t\t}\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tp[++len]=u;\n\t\tfor(int i=hed[u];i;i=g[i].nxt){ \n\t\t\tint v=g[i].v;\n\t\t\tin[v]--;\n\t\t\tif(in[v]==0){\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\n\u90a3\u4e48\u73b0\u5728\u65b0\u56fe\u5df2\u7ecf\u5efa\u597d\u4e86(\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u4f1a),\u62d3\u6251\u5e8f\u4e5f\u6c42\u5b8c\u4e86,\u5c31\u53ef\u4ee5\u5f00\u59cbdp\u4e86.\n\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u80fd\u7528\u62d3\u6251\u5e8f\u6765\u89e3\u51b3dp\u65e0\u540e\u6548\u6027\u7684\u95ee\u9898:\n\u56e0\u4e3a\u62d3\u6251\u5e8f\u4e2d\u53ef\u4ee5\u4fdd\u8bc1\u5bf9\u4e8e\u56fe\u4e2d\u2200\u8fb9(u,v),u\u4e00\u5b9a\u5728v\u7684\u524d\u9762\uff0c\u8fd9\u6837\u7684\u8bdd\u5f53\u6211\u9700\u8981\u66f4\u65b0dp[v]\u7684\u503c\u65f6,\u9700\u8981\u7528\u5230\u7684dp[u]\u7684\u503c\u90fd\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86\uff0c\ndp[v]\u7684\u503c\u5c31\u4e0d\u4f1a\u518d\u88ab\u5b83\u540e\u9762\u904d\u5386\u5230\u7684\u70b9\u7684dp\u503c\u5f71\u54cd\uff0c\u6b63\u56e0\u5982\u6b64,\u8fd9\u4e5f\u5c31\u4fdd\u8bc1\u4e86dp\u7684\u65e0\u540e\u6548\u6027\u3002\nCode:\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int N=50005;\nint n,m,head[N],cnt,dfn[N],low[N],tim,Q[N],top,sum,scc[N],du[N],num[N],tot,ans,in[N],p[N],f[N],len,pos,val[N],w[N],hed[N];\nbool vis[N];\nstruct Node{\n\tint u,v,nxt;\n}edge[N<<1];\nstruct node{\n\tint u,v,nxt;\n}g[N];\nvoid add(int u,int v){\n\tedge[++cnt]=(Node){u,v,head[u]};\n\thead[u]=cnt;\n}\nvoid ad(int u,int v){\n\tg[++pos]=(node){u,v,hed[u]};\n\thed[u]=pos;\n}\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++tim;\n\tvis[u]=1;\n\tQ[++top]=u;\n\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].v;\n\t\tif(dfn[v]==-1){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(vis[v]){\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n\tif(dfn[u]==low[u]){\n\t\t++sum;\n\t\tint now;\n\t\tdo{\n\t\t\tnow=Q[top];\n\t\t\ttop--;\n\t\t\tscc[now]=sum;\n\t\t\tvis[now]=0;\n\t\t\tnum[sum]++;\n\t\t}while(now!=u);\n\t}\n}\nvoid topo(){\n\tqueue<int> q;\n\tfor(int i=1;i<=sum;i++){\n\t\tif(in[i]==0){\n\t\t\tq.push(i);\n\t\t}\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tp[++len]=u;\n\t\tfor(int i=hed[u];i;i=g[i].nxt){ \n\t\t\tint v=g[i].v;\n\t\t\tin[v]--;\n\t\t\tif(in[v]==0){\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&w[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\tmemset(dfn,-1,sizeof(dfn));\n\tfor(int i=1;i<=n;i++){\n\t\tif(dfn[i]==-1){\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=head[i];j;j=edge[j].nxt){\n\t\t\tif(scc[edge[j].u]!=scc[edge[j].v]){\n\t\t\t\tin[scc[edge[j].v]]++;\n\t\t\t\tad(scc[edge[j].u],scc[edge[j].v]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tval[scc[i]]+=w[i];\n\t}\n\tfor(int i=1;i<=sum;i++){\n\t\tf[i]=val[i];\n\t}\n\ttopo();\n\tfor(int i=1;i<=len;i++){\n\t\tfor(int j=hed[p[i]];j;j=g[j].nxt){\n\t\t\tint u=g[j].u,v=g[j].v;\n\t\t\tf[v]=max(f[v],f[u]+val[v]);\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=len;i++){\n\t\tans=max(ans,f[i]);\n\t}\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1572940982,
        "uid": 95783,
        "name": "prestige",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "# Tarjan\n## 1.\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5\n**\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff08\u70b9\u53cc\uff09\uff1a** \u65e0\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\u5bfc\u51fa\u5b50\u56fe\uff0c\u6ee1\u8db3\u56fe\u8fde\u901a\u4e14\u4efb\u610f\u5220\u53bb\u4e00\u4e2a\u70b9\u540e\u56fe\u4ecd\u7136\u8fde\u901a\u3002\n\n\n**\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff08\u8fb9\u53cc\uff09\uff1a** \u65e0\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\u5bfc\u51fa\u5b50\u56fe\uff0c\u6ee1\u8db3\u56fe\u8fde\u901a\u4e14\u4efb\u610f\u5220\u53bb\u4e00\u6761\u8fb9\u540e\u56fe\u4ecd\u7136\u8fde\u901a\u3002\n\n\n**\u5f3a\u8fde\u901a\u5206\u91cf\uff1a**\n\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\u5bfc\u51fa\u5b50\u56fe\uff0c\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u3002\n\n**\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u51e0\u4e2a\u7b80\u5355\u7684\u5c0f\u7ed3\u8bba\uff1a** \n\n<1>\u8fd9\u4e09\u4e2a\u6982\u5ff5\u4e2d\uff0c\u4ec5\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u6709\u5411\u56fe\u4e2d\u7684\u6982\u5ff5\n\u5e76\u4e14\uff0c\u4e00\u4e2a\u70b9\u4ec5\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\n\n<2>\u6bcf\u6761\u8fb9\u4ec5\u53ef\u80fd\u5728\u4e00\u4e2a\u8fb9\u53cc\u4e2d\uff0c\u4f46\u6bcf\u4e2a\u70b9\u53ef\u80fd\u5728\u591a\u4e2a\u70b9\u53cc\u4e2d\n\n\u5982\u4e0b\u56fe\u7684\u7ea2\u70b9\uff1a\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cwnsk5qi.png)\n\n\n<3>\u8fb9\u53cc\u4e0d\u4e00\u5b9a\u662f\u70b9\u53cc\uff0c~~\u70b9\u53cc\u4e0d\u4e00\u5b9a\u662f\u8fb9\u53cc\uff0c\u70b9\u53cc\u4e0d\u4e00\u5b9a\u662f\u8fb9\u53cc~~\n\uff08\u4e24\u4e2a\u70b9\u4e00\u6761\u8fb9\uff09\u3002\n\n\n<4>\u5272\u70b9\uff1a\u65e0\u5411\u8fde\u901a\u56fe\u4e2d\u7684\u70b9\uff0c\u6ee1\u8db3\u5220\u6389\u4e4b\u540e\u56fe\u4e0d\u518d\u8fde\u901a\u3002\n\n\n<5>\u5272\u8fb9\uff1a\u65e0\u5411\u8fde\u901a\u56fe\u4e2d\u7684\u8fb9\uff0c\u6ee1\u8db3\u5220\u6389\u4e4b\u540e\u56fe\u4e0d\u518d\u8fde\u901a\u3002\n\n\n<6>\u5272\u70b9\u5206\u9694\u4e0d\u540c\u7684\u70b9\u53cc\uff0c\u5272\u8fb9\u5206\u9694\u4e0d\u540c\u7684\u8fb9\u53cc\u3002\n## Tarjan\u7528\u9014\uff1a\u6c42 \u70b9\u53cc\uff0c\u8fb9\u53cc\uff0c\u5f3a\u8fde\u901a\u5206\u91cf \n\n## \u65f6\u95f4\u590d\u6742\u5ea6: O(m+n)\n\n## \u8fd9\u4e09\u4e2a\u4ee3\u7801\u4ec5\u6709\u4e00\u4e9b\u7ec6\u8282\u4e0a\u7684\u5dee\u522b\n\n\n# \u8fdb\u5165\u6b63\u9898\n## Tarjan\u57fa\u7840\u7b97\u6cd5\n\u5bf9\u6574\u5f20\u56fe\u8fdb\u884cdfs\uff0c\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4dfs\u5230\u7684\u6240\u6709\u70b9\uff0c\u518d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u6808\u91cc\u3002\n\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f\uff1adfn\u8868\u793adfs\u5230\u8fd9\u4e2a\u70b9\u7684\u987a\u5e8f\uff0clow\u8868\u793a\u8fd9\u4e2a\u70b9\u80fd\u6cbf\u7740\u975e\u6811\u8fb9\u56de\u5230\u7684dfn\u6700\u5c0f\u7684\u70b9\u3002\n\u4e00\u5f00\u59cb\u4ee4low[u]=dfn[u]\uff0c\u5e76\u5c06u\u538b\u5165\u6808\u3002\n\u5230\u70b9u\u65f6\uff0c\u679a\u4e3e\u51fa\u8fb9(u,v)\uff0c\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u5230\uff0c\u5c31\u7ee7\u7eeddfs\u70b9v\uff0c\u7136\u540elow[u]=min(low[u],low[v])\u3002\n\u5426\u5219\uff0c\u5982\u679cv\u5f53\u524d\u5728\u6808\u91cc\uff0c\u5c31\u4ee4low[u]=min(low[u],dfn[v])\n###\n\u7136\u540e\u8fd9\u4e09\u8005\u6709\u4e00\u4e9b\u5c0f\u533a\u522b\uff1a\n###\n\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5f53u\u7684\u51fa\u8fb9\u679a\u4e3e\u5b8c\u65f6\uff0c\u5982\u679clow[u]=dfn[u]\uff0c\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5f39\u6808\u76f4\u5230\u5f39\u51fa\u70b9u\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n###\n\u8fb9\u53cc\uff1a\u5f53u\u7684\u51fa\u8fb9\u679a\u4e3e\u5b8c\u65f6\uff0c\u5982\u679clow[u]=dfn[u]\uff0c\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u8fb9\u53cc\uff0c\u5f39\u6808\u76f4\u5230\u5f39\u51fa\u70b9u\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u8fb9\u53cc\u3002\u7136\u540eu\u8fde\u5411dfs\u6811\u4e0a\u7236\u4eb2\u7684\u8fb9\u662f\u4e00\u6761\u5272\u8fb9\u3002\n###\n\u70b9\u53cc\uff1a\u5f53\u679a\u4e3e\u51fa\u8fb9(u,v)\u5e76dfs\u70b9v\u540e\uff0c\u5982\u679clow[v]>=dfn[u]\uff0c\u5c31\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u70b9\u53cc\uff0c\u5f39\u6808\u76f4\u5230\u5f39\u51fa\u70b9v\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u70b9\u8fde\u540c\u70b9u\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u3002\u7136\u540e\u5982\u679cu\u4e0d\u662fdfs\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5219u\u662f\u4e00\u4e2a\u5272\u70b9\u3002\n###\n\u5bf9\u4e8edfs\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4e0d\u6b62\u4e00\u6b21\u9047\u5230\u679a\u4e3e\u51fa\u8fb9\u5e76dfs\u4e0b\u53bb\u7684\u60c5\u51b5\uff0c\u5219\u5b83\u662f\u4e00\u4e2a\u5272\u70b9\u3002\n\n\n## \u4ee3\u7801\uff1a\n### \u5f3a\u8fde\u901a\u5206\u91cf\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<vector>\nusing namespace std;\nvector <int> q[100];\nstruct Edge{\n    int to,nex;\n}e[100100];\nint num_edge,head[10010];\ninline void add(int from,int to){\n    e[++num_edge].to=to;\n    e[num_edge].nex=head[from];\n    head[from]=num_edge;\n}\nint dfn[100100],low[100100],st[100100],inst[100100];\nint top;\nint tim;\nint tot;\nvoid dfs(int now){\n    dfn[now]=low[now]=++tim;\n    st[++top]=now;inst[now]=1;\n    for(int i=head[now];i;i=e[i].nex){\n        int j=e[i].to;\n        if(!dfn[j]){\n            dfs(j);\n            low[now]=min(low[now],low[j]);\n        }else if(inst[j]){\n            low[now]=min(low[now],dfn[j]);\n        }\n    }\n    if(low[now]==dfn[now]){\n        ++tot;\n        int p;\n        do{\n            p=st[top--];\n            inst[p]=0;\n            q[tot].push_back(p);\n        }while(p!=now);\n    }\n}\nint main(){\n    return 0;\n}\n```\n### \u8fb9\u53cc\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<vector>\nusing namespace std;\nvector <int> q[100];\nstruct Edge{\n    int to,nex;\n}e[100100];\nint num_edge=1,head[10010];\ninline void add(int from,int to){\n    e[++num_edge].to=to;\n    e[num_edge].nex=head[from];\n    head[from]=num_edge;\n}\nint dfn[100100],low[100100],st[100100],inst[100100];\nint top;\nint tim;\nint tot;\nvoid dfs(int now,int lst){\n    dfn[now]=low[now]=++tim;\n    st[++top]=now;inst[now]=1;\n    for(int i=head[now];i;i=e[i].nex)if(i!=(lst^1)){\n        int j=e[i].to;\n        if(!dfn[j]){\n            dfs(j,i);\n            low[now]=min(low[now],low[j]);\n        }else if(inst[j]){\n            low[now]=min(low[now],dfn[j]);\n        }\n    }\n    if(low[now]==dfn[now]){\n        ++tot;\n        int p;\n        do{\n            p=st[top--];\n            inst[p]=0;\n            q[tot].push_back(p);\n        }while(p!=now);\n    }\n}\nint main(){\n    return 0;\n}\n```\n### \u70b9\u53cc\n```cpp\n#include<iostream>\n#include<cmath>\n#include<vector>\nusing namespace std;\nvector <int> q[100];\nstruct Edge{\n    int to,nex;\n}e[100100];\nint num_edge,head[10010];\ninline void add(int from,int to){\n    e[++num_edge].to=to;\n    e[num_edge].nex=head[from];\n    head[from]=num_edge;\n}\nint dfn[100100],low[100100],st[100100],inst[100100];\nint top;\nint tim;\nint tot;\nvoid dfs(int now){\n    dfn[now]=low[now]=++tim;\n    st[++top]=now;inst[now]=1;\n    for(int i=head[now];i;i=e[i].nex){\n        int j=e[i].to;\n            if(!dfn[j]){\n                dfs(j);\n                low[now]=min(low[now],low[j]);\n                if(low[j]>=dfn[now]){\n                    ++tot;\n                    int p;\n                    q[tot].push_back(now);\n                    do{\n                        p=st[top--];\n                        inst[p]=0;\n                        q[tot].push_back(p);\n                    }while(p!=j);\n                }\n        }else if(inst[j]){\n            low[now]=min(low[now],dfn[j]);\n        }\n    }\n}\nint main(){\n    return 0;\n}\n```\n\n## \u7f29\u70b9\n###\n\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u76f4\u63a5\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\uff08dag\uff09\u3002\n###\n\u4e3a\u4ec0\u4e48\u65e0\u73af\uff1f\u56e0\u4e3a\u4e00\u4e2a\u73af\u4e5f\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5df2\u7ecf\u88ab\u7f29\u8d77\u6765\u4e86\u3002\n###\n\u5bf9\u4e8e\u8fb9\u53cc\uff0c\u6211\u4eec\u540c\u6837\u4e5f\u53ef\u4ee5\u8fdb\u884c\u7f29\u70b9\uff0c\u5f97\u5230\u7684\u662f\u4e00\u68f5\u6811\uff08\u6709\u73af\u7684\u8bdd\u540c\u6837\u88ab\u7f29\u8d77\u6765\u4e86\uff09\n###\n\u6709\u4e2a\u4f8b\u9898 [P3387 \u7f29\u70b9](https://www.luogu.org/problem/P3387)\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cmath>\n#include<vector>\n#include<queue>\nusing namespace std;\nvector <int> q[100];\nstruct Edge{\n    int to,nex;\n}e[100100];\nint c[10010],num_edge,head[10010],a[10010];\ninline void add(int from,int to){\n    e[++num_edge].to=to;\n    e[num_edge].nex=head[from];\n    head[from]=num_edge;\n}\nint dfn[100100],low[100100],st[100100],inst[100100];\nint top;\nint tim;\nint tot;\nvoid dfs(int now){\n    dfn[now]=low[now]=++tim;\n    st[++top]=now;inst[now]=1;\n    for(int i=head[now];i;i=e[i].nex){\n        int j=e[i].to;\n        if(!dfn[j]){\n            dfs(j);\n            low[now]=min(low[now],low[j]);\n        }else if(inst[j]){\n            low[now]=min(low[now],dfn[j]);\n        }\n    }\n    if(low[now]==dfn[now]){\n        ++tot;//cout<<\"/////\";\n        int p;\n        do{\n            p=st[top--];\n            inst[p]=0;\n            q[tot].push_back(p);\n            a[p]=tot;\n        }while(p!=now);\n    }\n}\nstruct Node1{\n    int to,nex;\n}e1[100100];\nint dp[100000];\nint head1[10010],num_edge1;\nvoid add1(int from,int to){\n    e1[++num_edge1].to=to;\n    e1[num_edge1].nex=head1[from];\n    head1[from]=num_edge1;\n}\nint c1[10010];\nint in[100010];\nqueue <int> in_kong;\nvoid sd(){\n    for(int i=1;i<=tot;i++){\n        int ans=0;\n        for(int j=0;j<q[i].size();++j){\n            ans+=c[q[i][j]];\n            for(int k=head[q[i][j]];k;k=e[k].nex){\n                if(a[e[k].to]!=a[q[i][j]]){\n                    add1(a[q[i][j]],a[e[k].to]);\n                    in[a[e[k].to]]++;\n                }\n            }\n        }\n        c1[i]=ans;\n    }\n    for(int i=1;i<=tot;i++){\n        if(in[i]==0){in_kong.push(i);dp[i]=c1[i];}\n    }\n}\nint tuopuxv[100100],num_tuopuxv;\nvoid topu(){\n    while(!in_kong.empty()){\n        int tmpi=in_kong.front();\n        in_kong.pop();\n        ++num_tuopuxv;\n        tuopuxv[num_tuopuxv]=tmpi;\n        for(int i=head1[tmpi];i;i=e1[i].nex){\n            in[e1[i].to]--;\n            if(in[e1[i].to]==0)in_kong.push(e1[i].to);\n        }\n    }\n}\nint n,m;\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>c[i];\n    for(int i=1;i<=m;i++){\n        int a,b;\n        cin>>a>>b;\n        add(a,b);\n    }\n    for(int i=1;i<=n;i++)if(!dfn[i]){\n        dfs(i);\n    }\n    sd();topu();\n    for(int i=1;i<=tot;i++){\n        int v=tuopuxv[i];\n        for(int k=head1[v];k;k=e1[k].nex){\n            dp[e1[k].to]=max(dp[e1[k].to],dp[v]+c1[e1[k].to]);\n        }\n    }\n    //cout<<tot;\n    int mmax=0;\n    for(int i=1;i<=n;i++){\n        if(mmax<dp[i])mmax=dp[i];\n    }\n    cout<<mmax;\n    return 0;\n}\n```\n\n\n\n\n\n# \u672a\u5b8c\u5f85\u7eed\u3002\u3002\u3002\u3002\u3002\u3002\n\u6d1b\u8c37\uff0c\u6709\u7f18\u518d\u89c1\uff01\n",
        "postTime": 1567855372,
        "uid": 112235,
        "name": "lccc233",
        "ccfLevel": 4,
        "title": "Tarjan"
    },
    {
        "content": "# \u3010Tarjan\u3011\u7f29\u70b9\n\n\u5728\u4e00\u4e2a\u70b9N\u6570\u636e\u6781\u5927\u7684\u56fe\u4e2d\uff0c\u76f4\u63a5SPFA\u6216\u8005\u8bb0\u5fc6\u82b1\u641c\u7d22\u65f6\u95f4\u8d85\u9650\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528Tarjan\u7f29\u70b9\u6765\u51cf\u5c11N\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff1b\n![](http://media.hihocoder.com/problem_images/20150711/14366036609619.png)\n\n\u5982\u4e0a\u56fe\uff1a3\uff0c6\u4e24\u70b9\u4e3a\u8be5\u56fe\u4e2d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u770b\u505a\u4e00\u4e2a\u5355\u5143\u70b9\u3002\n\n## \u600e\u4e48\u7f29\u70b9\u5462\n\u6211\u4eec\u4f7f\u7528fa[]\u6570\u7ec4\u6765\u5b58\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u65f6\u95f4\u6233\uff08DFN\uff09\u6700\u5c0f\u7684\u70b9\uff0c\u5373\u5c06\u8be5\u70b9\u8bbe\u4e3a\u5355\u5143\u70b9\u3002\n## \u600e\u4e48\u8fde\u8fb9\n\u5982\u679c\u4e24\u4e2a\u70b9\u7684fa[]\u4e0d\u4e00\u6837\uff0c\u4e14\u8be5\u4e24\u70b9\u95f4\u6709\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u4ed6\u4eec\u7684\u5355\u5143\u70b9(\u5373fa[])\u8fde\u4e00\u6761\u8fb9\n## \u95ee\u9898\u7684\u6c42\u89e3\n\u7f29\u70b9\u540e\uff0c\u91cd\u65b0\u5efa\u56fe\uff0c\u6211\u4eec\u5148\u627e\u51fa\u56fe\u4e2d\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u4f7f\u7528SPFA\u6216\u62d3\u6251\u6392\u5e8f\u6765\u6c42\u89e3\u95ee\u9898\uff0c\u4e0e\u6700\u77ed\u8def\u95ee\u9898\u76f8\u4f3c\n\n**P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9**\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint nw,nxt,mark;\n}pre[100010];\nint n,m,idx,cnt;\nint dfn[10010],low[10010];\nint in[10010],v[10010],fa[10010];\nint head[10010];\nbool used[10010];\nint stk[10010],p;\nint ans=0;\nvoid add (int x,int y,int cnt)\n{\n\tpre[cnt].nw=x;\n\tpre[cnt].mark=head[x];\n\tpre[cnt].nxt=y;\n\thead[x]=cnt;\n}\nvoid tarjan (int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tstk[++p]=u;\n\tused[u]=1;\n\tfor (int i=head[u];i!=0;i=pre[i].mark)\n\t{\n\t\tint nx=pre[i].nxt;\n\t\tif (!dfn[nx])\n\t\t{\n\t\t\ttarjan (nx);\n\t\t\tlow[u]=min (low[u],low[nx]);\n\t\t}\n\t\telse if (used[nx])\n\t\t\tlow[u]=min (low[u],dfn[nx]);\n\t}\n\tif (low[u]==dfn[u])\n\t{\n\t\tdo{\n\t\t\tv[u]+=v[stk[p]];\n\t\t\tfa[stk[p]]=u;\n\t\t\tused[stk[p]]=0;\n\t\t\tp--;\n\t\t}while (stk[p+1]!=u);\n\t\tv[u]>>=1;\n\t}\n}\nint topo ()\n{\n\tint dis[10010];\n\tqueue<int>q;\n\tfor (int i=1;i<=n;i++)\n\t\tif (fa[i]==i)\n\t\t{\n\t\t\tdis[i]=v[i];\n\t\t\tif (!in[i])\n\t\t\t\tq.push(i);\n\t\t}\n\twhile (!q.empty())\n\t{\n\t\tint Now=q.front();\n\t\tfor (int i=head[Now];i!=0;i=pre[i].mark)\n\t\t{\n\t\t\tint Nxt=pre[i].nxt;\n\t\t\tdis[Nxt]=max (dis[Nxt],dis[Now]+v[Nxt]);\n\t\t\tin[Nxt]--;\n\t\t\tif (!in[Nxt])\n\t\t\t\tq.push (Nxt);\n\t\t}\n\t\tq.pop();\n\t}\n\tint maxx=0;\n\tfor (int i=1;i<=n;i++)\n\t\tif (fa[i]==i)\n\t\t\tmaxx=max (maxx,dis[i]);\n\treturn maxx;\n}\nint main()\n{\n\tmemset (in,0,sizeof (in));\n\tmemset (used,0,sizeof (used));\n\tmemset (dfn,0,sizeof(dfn));\n\tmemset (head,0,sizeof (head));\n\tscanf (\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++)\n\t\tscanf (\"%d\",&v[i]);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint a,b;\n\t\tscanf (\"%d%d\",&a,&b);\n\t\tadd (a,b,i);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dfn[i])\n\t\t\ttarjan (i);\n\tmemset (head,0,sizeof (head));\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint Now=fa[pre[i].nw];\n\t\tint Nxt=fa[pre[i].nxt];\n\t\tif (Now!=Nxt)\n\t\t{\n\t\t\tadd (Now,Nxt,++cnt);\n\t\t\tin[Nxt]++;\n\t\t}\n\t}\n\tprintf (\"%d\",topo ());\n\treturn 0;\n}\n```",
        "postTime": 1523631131,
        "uid": 24024,
        "name": "Paul\u00b7Shi",
        "ccfLevel": 0,
        "title": "\u3010\u6a21\u677f\u3011\u7f29\u70b9"
    },
    {
        "content": "\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue> \n#include<cstring>\n#define maxx 1000000\nusing namespace std;\nint n,m,u,v;\nbool vis[maxx];//\u662f\u5426\u5728\u6808\u4e2d \nint sta[maxx];//\u6808 \nint top,time,ctot,ans,tot;//\u6307\u9488... \nint clor[maxx];//\u67d3\u8272(\u8054\u901a\u5206\u91cf\u7f16\u53f7) \nint num[maxx];//\u8054\u901a\u5206\u91cf\u70b9\u6743\u548c \nint dfn[maxx],low[maxx];//tarjan \nint x[maxx],y[maxx];//\u5b58\u8fde\u8fb9 \nint a[maxx];//\u5b58\u5355\u70b9\u70b9\u6743 \nint dis[maxx],first[maxx];//\u8ddd\u79bb \uff0c \u5411\u524d\u661f \nstruct n{\n    int to,nt;    \n}node[maxx];\ninline void add(int u,int v){\n    node[++tot].to=v;\n    node[tot].nt=first[u];\n    first[u]=tot;\n}\ninline void tarjan(int x){\n    dfn[x]=low[x]=++time;\n    sta[++top]=x;\n    vis[x]=1;\n    for(int i=first[x];i;i=node[i].nt){\n        int j=node[i].to;\n        if(vis[j])low[x]=min(low[x],dfn[j]);\n        else if(!dfn[j])tarjan(j),low[x]=min(low[j],low[x]);\n    }\n    if(low[x]==dfn[x]){\n        ++ctot;\n        vis[x]=0;\n        while(sta[top+1]!=x){\n            clor[sta[top]]=ctot;//\u67d3\u8272 \n            num[ctot]+=a[sta[top]];//\u540c\u4e00\u8fde\u901a\u5206\u91cf\u70b9\u6743\u548c \n            vis[sta[top]]=0;\n            top--;\n        }\n    }\n}\nvoid spfa(int x){\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    queue<int> q;\n    dis[x]=num[x];\n    vis[x]=1;\n    q.push(x);\n    while(!q.empty()){\n        int j=q.front();\n        vis[j]=0;\n        q.pop();\n        for(int i=first[j];i;i=node[i].nt){\n            int t=node[i].to;\n            if(dis[t]<dis[j]+num[t]){\n                dis[t]=dis[j]+num[t];\n                if(!vis[t]){\n                    vis[t]=1;\n                    q.push(t);\n                }\n            }\n        }\n    }\n    for(int i=1;i<=ctot;i++)ans=max(ans,dis[i]);//\u66f4\u65b0\u7b54\u6848\u6700\u5927\u503c \n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    for(int i=1;i<=m;i++){\n    scanf(\"%d%d\",&u,&v);\n    add(u,v);\n    x[i]=u; \n    y[i]=v; \n    } \n    for(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n    memset(first,0,sizeof(first));//\u91cd\u7f6e\u51c6\u5907\u8fde\u65b0\u56fe \n    memset(node,0,sizeof(node));\n    for(int i=1;i<=m;i++)if(clor[x[i]]!=clor[y[i]])add(clor[x[i]],clor[y[i]]);//\u8fde\u56fe\uff0c\u5982\u679c\u4e0d\u5728\u540c\u4e00\u8054\u901a\u5206\u91cf\u5c31\u8fde \n    for(int i=1;i<=ctot;i++)spfa(i);\n    printf(\"%d\",ans);//ans\u524d\u4e0d\u8981\u52a0& \u6211\u8c03\u4e861\u4e2a\u591a\u5c0f\u65f6\u624d\u53d1\u73b0 \n    return 0;\n}\n```",
        "postTime": 1516456717,
        "uid": 45025,
        "name": "125E591",
        "ccfLevel": 0,
        "title": "tarjan\u7f29\u70b9\u6a21\u677f"
    },
    {
        "content": "##11\u7bc7\u5c45\u7136\u5c45\u7136\u6ca1\u6709\u4e00\u4e2aP\u3002\u3002\n\n##\u6765\u8865\u4e00\u53d1\u5427\n\n\u8fb9\u8868\u5b58\u8fb9\uff0ctarjan\u7f29\u70b9\uff0cdfn[u]\u4e3a\u8282\u70b9u\u641c\u7d22\u7684\u6b21\u5e8f\u7f16\u53f7(\u65f6\u95f4\u6233)\uff0clow[u]\u4e3au\u6216u\u7684\u5b50\u6811\u80fd\u591f\u8ffd\u6eaf\u5230\u7684\u6700\u65e9\u7684\u6808\u4e2d\u8282\u70b9\u7684\u6b21\u5e8f\u53f7\u3002\u3002\u3002\n\n\u7136\u540e\u6839\u636e\u67d3\u8272\u91cd\u65b0\u5efa\u56fe\u3002\u3002\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8def\u5f84\u7684\u8d77\u70b9\u8dd1\u4e00\u8fb9SPFA\u3002\u3002\u3002\n\n\u4e3b\u8981\u770b\u4ee3\u7801\n\n\u4eca\u5929\u521a\u5b66tarjan\u7684\u849f\u84bb \uff08\u6ed1\u7a3d\n\n\u70b9\u8fd9\u91cc\uff1a[luogu](https://www.byvoid.com/zhs/blog/scc-tarjan/)\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\nuses math;\nvar\n  q,dfn,low,b,a,last,next,x,y,c,color,rd,dis,f:array[0..100001]of longint;\n  vis:array[0..100001]of boolean;\n  n,m,top,tot,i,ans,d,sum:longint;\nprocedure add(x,y:longint);\nbegin\n  inc(tot);\n  a[tot]:=y;\n  next[tot]:=last[x];\n  last[x]:=tot;\n  inc(rd[y]);\nend;\nprocedure tarjan(k:longint);\nvar\n  i,t:longint;\nbegin\n  inc(d); inc(top);\n  dfn[k]:=d;low[k]:=d;\n  q[top]:=k;vis[k]:=true;\n  i:=last[k];\n  while i>0 do \n    begin\n      t:=a[i];\n      if dfn[t]=0 then //\u5982\u679c\u8282\u70b9v\u672a\u88ab\u8bbf\u95ee\u8fc7\n        begin\n          tarjan(t); //\u7ee7\u7eed\u5411\u4e0b\u627e\n          low[k]:=min(low[k],low[t]);\n        end\n        else\n          if vis[t] then low[k]:=min(low[k],dfn[t]); //\u5982\u679c\u8282\u70b9t\u8fd8\u5728\u6808\u5185\n      i:=next[i];\n    end;\n  if low[k]=dfn[k] then  //\u5982\u679c\u8282\u70b9k\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\n    begin\n      inc(sum);\n      while q[top+1]<>k do \n        begin\n          color[q[top]]:=sum;\n          inc(b[sum],c[q[top]]);\n          vis[q[top]]:=false;\n          dec(top);\n        end;//\u66f4\u65b0\u65b0\u7684\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n    end;\nend;//tarjan\nprocedure spfa(start:longint);\nvar\n  i,h,t,x,y:longint;\nbegin\n  fillchar(vis,sizeof(vis),0);\n  fillword(dis,sizeof(dis) >> 1,0);// writeln(start);\n  h:=0;t:=1;\n  f[1]:=start;\n  dis[start]:=b[start];\n  while h<t do \n    begin\n      inc(h);\n      x:=f[h];\n      vis[x]:=false;\n      i:=last[x];\n      while i>0 do \n        begin\n          y:=a[i];\n          if dis[x]+b[y]>dis[y] then\n            begin\n              dis[y]:=dis[x]+b[y];\n              if not vis[y] then \n                begin\n                  vis[y]:=true;\n                  inc(t);\n                  f[t]:=y;\n                end;\n            end;\n          i:=next[i];\n        end;\n    end;\n  for i:=1 to sum do ans:=max(ans,dis[i]); \nend;//SPFA\u4e0d\u60f3\u591a\u8bf4\nbegin\n  readln(n,m);\n  for i:=1 to n do read(c[i]);\n  for i:=1 to m do \n    begin\n      readln(x[i],y[i]);\n      add(x[i],y[i]);//\u5b58\u8fb9\n    end;\n  for i:=1 to n do \n    if color[i]=0 then tarjan(i);//\u5982\u679c\u5f53\u524d\u70b9\u6ca1\u6709\u67d3\u8272\u5219\u53bb\u8dd1\u4e00\u8d9ftarjan\n  //for i:=1 to n do writeln(color[i]);\n  fillword(a,sizeof(a) >> 1,0);\n  fillword(next,sizeof(next) >> 1,0);\n  fillword(last,sizeof(last) >> 1,0);\n  fillword(rd,sizeof(rd) >> 1,0);//\u6e05\u7a7a\u8fb9\n  tot:=0;\n  for i:=1 to m do \n    if color[x[i]]<>color[y[i]] then add(color[x[i]],color[y[i]]);//\u91cd\u65b0\u5efa\u56fe\uff0c\u6ce8\u610f\u7f29\u70b9\u540e\u6bcf\u4e2a\u70b9\u7684\u65b0\u4e0b\u8868\u662fcolor[i]\n  for i:=1 to sum do \n    if rd[i]=0 then spfa(i);//\u5bf9\u4e8e\u6bcf\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\u53bb\u8dd1SPFA\n  writeln(ans);\nend.\n\n```",
        "postTime": 1511187139,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/Wendigo/)\n\n[P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011](https://www.luogu.org/problem/P3387)\n\n### \u6b64\u9898\u7b97\u6cd5:tarjan\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f\n\n\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u8f93\u5165\u70b9\u6743$pntw[]$\uff0c\u5efa\u521d\u59cb\u56fe$ori$\u3002\n\n>2.$tarjan$\u7f29\u70b9\u3002\u5efa\u7f29\u70b9\u540e\u65b0\u56fe$tag$\u3002\n\n>3.$ $\u62d3\u6251\u6392\u5e8f\uff0c\u5176\u4e2d$dp[]$\u4e3a\u6700\u957f\u8def\u6570\u7ec4\uff0c$sum[]$\u4e3a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u6743\u548c\uff0c\u6ee1\u8db3:\n\n$dp[to]=max(dp[to],dp[now]+sum[to])$\n\n![](https://s2.ax1x.com/2019/10/22/K3BNIf.jpg)\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e4+10;\nconst int M=1e5+10;\nint n,m,pntw[N],ans;\nstruct edge{\n\tint adj,nex;\n};\nstruct graph{\n\tedge e[M*2];\n\tint g[N],top;\n\tvoid add(int x,int y){\n\t\te[++top]=(edge){\n\t\t\ty,g[x]\n\t\t}; g[x]=top;\n\t}\n}ori,dag; //\u539f\u56fe\u548c\u7f29\u70b9\u56fe\nint dfn[N],low[N],\nind,col[N],cnt,sum[N];\nstack<int> s;\nbool in[N];\nvoid tarjan(int x){ //tarjan\u7f29\u70b9\n\tdfn[x]=low[x]=++ind;\n\ts.push(x); in[x]=1;\n\tfor(int i=ori.g[x];i;i=ori.e[i].nex){\n\t\tint to=ori.e[i].adj;\n\t\tif(!dfn[to]){\n\t\t\ttarjan(to);\n\t\t\tlow[x]=min(low[x],low[to]);\n\t\t} else if(in[to])\n\t\t\tlow[x]=min(low[x],dfn[to]);\n\t} if(low[x]==dfn[x]){\n\t\tint tmp=0; cnt++;\n\t\twhile(tmp!=x){\n\t\t\ttmp=s.top(); s.pop();\n\t\t\tcol[tmp]=cnt;\n\t\t\tsum[cnt]+=pntw[tmp];\n\t\t\tin[tmp]=0;\n\t\t}\n\t}\n} int rud[N],dp[N]; //rud[]\u4e3a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5165\u5ea6\u6570\u7ec4\nqueue<int> q;\nvoid toposort(){ //\u62d3\u6251\u6392\u5e8f\u5e76\u6c42\u6700\u957f\u8def\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(rud[i]==0){\n\t\t\tq.push(i);\n\t\t\tdp[i]=sum[i];\n\t\t}\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tfor(int i=dag.g[now];i;i=dag.e[i].nex){\n\t\t\tint to=dag.e[i].adj; rud[to]--;\n\t\t\tdp[to]=max(dp[to],dp[now]+sum[to]);\n\t\t\tif(!rud[to]) q.push(to);\n\t\t}\n\t} for(int i=1;i<=n;i++)\n\t\tans=max(ans,dp[i]);\n} int main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",pntw+i);\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tori.add(a,b);\n\t} for(int i=1;i<=n;i++)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=ori.g[i];j;j=ori.e[j].nex){\n\t\t\tint to=ori.e[j].adj;\n\t\t\tif(col[i]!=col[to]){ //\u5efa\u7f29\u56fe\n\t\t\t\tdag.add(col[i],col[to]);\n\t\t\t\trud[col[to]]++;\n\t\t\t}\n\t\t}\n\ttoposort();\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\u6211\u8fd8\u662f\u592a\u84bb\u4e86\uff0c\n\n\u8c22\u8c22\u5927\u5bb6! !\n",
        "postTime": 1571716548,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "## \u80cc\u666f\n\u4eca\u5929[$loj$](http://loj.ac/)\u6302\u4e86\uff0c\u4e8e\u662f\u5c31\u6709\u4e86~~\u95f2\u60c5\u96c5\u81f4~~\u6765\u5237[$luogu$](https://www.luogu.org/)\n## \u9898\u9762\n### [\u6d1b\u8c37P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3387)\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a$n$\u4e2a\u70b9$m$\u6761\u8fb9\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u6700\u5927\u3002\u4f60\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6743\u503c\u548c\u3002\n\n\u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n\n## \u601d\u8def\n### [~~\u70b9\u51fb\u83b7\u5f97\u66f4](https://yuzhengxi.blog.luogu.org/p3387-mu-ban-su-dian-ti-xie)[\u597d\u7684\u9605\u8bfb\u4f53\u9a8c~~](https://www.cnblogs.com/yzx1798106406/p/10332596.html)\n\n$Kosaraju$\u7f29\u70b9+\u8bb0\u5fc6\u5316\u641c\u7d22\n\n### \u4ec0\u4e48\u662f$Kosaraju$\u7f29\u70b9\uff1f\n\n\u4e0e$Tarjan$\u7f29\u70b9\u7684**\u65f6\u95f4\u590d\u6742\u5ea6**\u5dee\u4e0d\u591a\uff0c\u90fd\u662f$O(n+m)$\u3002\n\n\u5176\u4e3b\u8981\u601d\u60f3\u5c31\u662f$dfs$\u4e24\u6b21\u3002\n\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```C++\nvoid dfs_1(int x){\n    vis[x]=1;\n    for(int i=fir[x];i;i=nxt[i]){\n        if(vis[son[i]]==0) dfs_1(son[i]);\n    }\n    d[++t]=x;\n}\nvoid dfs_2(int x){\n    vis[x]=t;\n    s[t]++;\n    for(int i=fir2[x];i;i=nxt2[i]){\n        if(vis[son2[i]]==0) dfs_2(son2[i]);\n    }\n}\nvoid Kosaraju(){\n    t=0;\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i<=n;i++){\n        if(vis[i]==0) dfs_1(i);\n    }\n\n    memset(vis,0,sizeof(vis));t=0;\n    for(int i=n;i>=1;i--){\n        if(vis[d[i]]==0) t++,dfs_2(d[i]);\n    }\n}\n```\n\n\u5f53\u7136\uff0c\u6211\u8ba4\u4e3a$Kosaraju$\u6709\u4e00\u5b9a\u7684\u7f3a\u70b9\uff0c\u6bd4\u5982\u8bf4\u8981\u5efa\u53cd\u8fb9\u3002\n\n\u5177\u4f53$Kosaraju$\u7b97\u6cd5\u7684\u4ecb\u7ecd[\u6233\u8fd9\u91cc](https://yuzhengxi.blog.luogu.org/su-dian-qiu-qiang-lian-tong-fen-liang-kosaraju-suan-fa)\n\n### \u4ec0\u4e48\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\n\n> \u8bb0\u5fc6\u5316\u641c\u7d22\uff08Memory search\uff09\u5fc3\u7406\u5b66\u662f\u6307\u641c\u7d22\u4fe1\u606f\u7684\u6d41\u7a0b\uff0c\u4f46\u662f\u641c\u7d22\u5230\u7684\u4e00\u4e9b\u89e3\u7528\u52a8\u6001\u89c4\u5212\u7684\u90a3\u79cd\u601d\u60f3\u548c\u6a21\u5f0f\u4f5c\u4e00\u4e9b\u4fdd\u5b58\u3002\n>\n> \u2014\u2014\u767e\u5ea6\u767e\u79d1\n\n\u5176\u5b9e\u8bf4\u767d\u4e86\u5c31\u662f$dp$\u7684\u8fdb\u9636\u3002\u591a\u4e86\u4e00\u4e2a\u641c\u7d22\u3002\u3002\u3002\n\n\u53ea\u4e0d\u8fc7\u5728$dfs$\u65f6\u5f00\u4e86\u4e2a\u6570\u7ec4\u5b58\u50a8\u4e86\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4ee5\u4fbf\u4ee5\u540e\u641c\u7d22\u9700\u8981\u3002\n\n### \u5173\u4e8e\u8fd9\u9053\u9898\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u6109\u5feb\u7684\u89e3\u51b3\u4e86\u3002\u3002\u3002\n\n\u601d\u8def\u5982\u4e0b\uff1a\n\n![](https://s2.ax1x.com/2019/01/29/kMLkgs.png)\n\n~~\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e11\u964b\u65e0\u6bd4\u7684\u6c34\u5370~~\n\nCODE:\uff08PS:\u8bf7\u5ffd\u7565\u8fb9\u6743\uff09\n\n```C++\n#include<algorithm>\n#include<bitset>\n#include<complex>\n#include<deque>\n#include<exception>\n#include<fstream>\n#include<functional>\n#include<iomanip>\n#include<ios>\n#include<iosfwd>\n#include<iostream>\n#include<istream>\n#include<iterator>\n#include<limits>\n#include<list>\n#include<locale>\n#include<map>\n#include<memory>\n#include<new>\n#include<numeric>\n#include<ostream>\n#include<queue>\n#include<set>\n#include<sstream>\n#include<stack>\n#include<stdexcept>\n#include<streambuf>\n#include<string>\n#include<typeinfo>\n#include<utility>\n#include<valarray>\n#include<vector>\n#include<cctype>\n#include<cerrno>\n#include<cfloat>\n#include<ciso646>\n#include<climits>\n#include<clocale>\n#include<cmath>\n#include<csetjmp>\n#include<csignal>\n#include<cstdarg>\n#include<cstddef>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<ctime>\n#define E 200010\nusing namespace std;//\u4e11\u964b\u65e0\u6bd4\u7684\u5934\u6587\u4ef6\ninline int read(){\n\tint res=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}//\u4e11\u964b\u65e0\u6bd4\u7684\u8bfb\u4f18\ninline void write(int x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x<10) putchar(x+'0');\n\telse{\n\t\twrite(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}//\u4e11\u964b\u65e0\u6bd4\u7684\u8f93\u4f18\nint n,m,a[E];\nint fir[E],nxt[E],w[E],son[E],tot;\nint vis[E],d[E],top,f[E],ans;\nint fir2[E],nxt2[E],w2[E],son2[E],tot2;\nvoid add(int x,int y,int z){\n\t++tot;\n\tnxt[tot]=fir[x];\n\tfir[x]=tot;\n\tson[tot]=y;\n\tw[tot]=z;\n}//\u5efa\u6b63\u8fb9\nvoid add2(int x,int y,int z){\n\t++tot2;\n\tnxt2[tot2]=fir2[x];\n\tfir2[x]=tot2;\n\tson2[tot2]=y;\n\tw2[tot2]=z;\n}//\u5efa\u53cd\u8fb9\nvoid dfs1(int x){//Kosaraju\u7b97\u6cd5\u7b2c\u4e00\u6b21dfs\n\tvis[x]=1;\n\tfor(int i=fir[x];i;i=nxt[i]){//\u6b63\u5411\n\t\tint to=son[i];\n\t\tif(!vis[to]) dfs1(to);\n\t}\n\td[++top]=x;\n}\nvoid dfs2(int x){//Kosaraju\u7b97\u6cd5\u7b2c\u4e8c\u6b21dfs\n\tvis[x]=top;//\u6807\u8bb0\u7b2c\u51e0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n\tfor(int i=fir2[x];i;i=nxt2[i]){//\u53cd\u5411\n\t\tint to=son2[i];\n\t\tif(!vis[to]) dfs2(to);\n\t}\n}\nvoid dp(int x){//\u8bb0\u5fc6\u5316\u641c\u7d22\n\tif(f[x]!=0) return ;//\u8bb0\u5fc6\u5316\u4f53\u73b0\n\tint ss=0;\n\tf[x]=d[x];\n\tfor(int i=fir2[x];i;i=nxt2[i]){//\u4f7f\u7528\u65b0\u7684DAG\n\t\tint to=son2[i];\n\t\tdp(to);\n\t\tss=max(ss,f[to]);//\u53d6\u6700\u5927\u503c\n\t}\n\tf[x]+=ss;//\u522b\u5fd8\u8bb0\u52a0\u56de\u53bb\n}\nint main(){\n\tn=read();m=read();//\u8bfb\u5165\n\tfor(int i=1;i<=n;i++) a[i]=read();//\u8bfb\u5165\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read();\n\t\tadd(x,y,1);//\u5efa\u6b63\u8fb9\n\t\tadd2(y,x,1);//\u5efa\u53cd\u8fb9\n\t}\n\t//Kosaraju Start\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,0,sizeof(d));top=0;//\u6e05\u7a7a\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]) dfs1(i);//dfs\u7b2c\u4e00\u6b21\uff08\u6b63\u5411\uff09\n\t}\n\tmemset(vis,0,sizeof(vis));top=0;//\u6e05\u7a7a\n\tfor(int i=n;i>=1;i--){\n\t\tif(!vis[d[i]]) ++top,dfs2(d[i]);//dfs\u7b2c\u4e8c\u6b21\uff08\u53cd\u5411\uff09\n\t}\n\t//Kosaraju End\n\tmemset(d,0,sizeof(d));//\u6e05\u7a7a\n\tfor(int i=1;i<=n;i++){\n\t\td[vis[i]]+=a[i];//\u6743\u503c\u7d2f\u8ba1\n\t}\n\tmemset(fir2,0,sizeof(fir2));tot2=0;//\u6e05\u7a7a\n\tfor(int i=1;i<=n;i++){//\u91cd\u65b0\u5efaDAG\n\t\tfor(int j=fir[i];j;j=nxt[j]){\n\t\t\tint to=son[j];\n\t\t\tif(vis[i]!=vis[to]) add2(vis[i],vis[to],1);//\u9700\u8981\u4e24\u4e2a\u4e0d\u540c\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n\t\t}\n\t}\n\tfor(int i=1;i<=top;i++){//\u8bb0\u5fc6\u5316\u641c\u7d22\n\t\tif(!f[i]){//\u8bb0\u5fc6\u5316\n\t\t\tdp(i);\n\t\t\tans=max(ans,f[i]);//\u53d6\u6700\u5927\u503c\n\t\t}\n\t}\n\twrite(ans);putchar('\\n');//\u8f93\u51fa\n\treturn 0;//\u7ed3\u675f\n}\n```\n\n",
        "postTime": 1548724696,
        "uid": 37103,
        "name": "yzxoi",
        "ccfLevel": 7,
        "title": "P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9 \u9898\u89e3"
    },
    {
        "content": "#\u849f\u84bb\u5199\u9898\u89e3\u4e3b\u8981\u662f\u81ea\u5df1\u770b\uff0c\u4ee3\u7801\u5197\u957f\uff08\u4f46\u6bd4\u8f83\u6613\u61c2\uff09\uff0c\u5e38\u6570\u7206\u70b8\uff0c\u5404\u4f4d\u5927\u4f6c\u4e0d\u559c\u52ff\u55b7\u3002\n\n\u9996\u5148\u65e2\u7136\u8fd9\u4e2a\u9898\u4e0a\u5199\u4e86\u6a21\u677f\u4e8c\u5b57\uff0c\u90a3\u8fd9\u4e2a\u9898\u80af\u5b9a\u8981\u7528tarjan\u7f29\u70b9\uff0c\n\u4f46\u4e3a\u4ec0\u4e48\u8981\u7f29\u70b9\uff1f\u56e0\u4e3a\u8fd9\u4e2a\u9898\u9700\u8981\u4e00\u4e2aDAG\uff0c\u7f29\u5b8c\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u5f97\u5230\u4e00\u4e2a\u4e86DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u7531u\u5230v,\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n#f[v]=max(f[v],f[u]+w[v]); \n\u4f46\u662f\u5982\u4f55\u4fdd\u8bc1\u65e0\u540e\u6548\u6027\uff1f\uff1f\uff1f\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u7f29\u5b8c\u7684\u70b9\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u53ef\u4ee5\u8f6c\u79fb\u72b6\u6001\u4e86\u3002\u3002  \n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<queue>\n#include<cstring>\nusing namespace std;\n#define ll long long\n#define xx 100010\nint n,m,w[xx],ta,maxx=-0x7fffffff/2;\nint stack[xx],tail,vis[xx],dep,now[xx],tot,low[xx],dfn[xx];//tarjan\u9700\u8981\u7684\u53d8\u91cf \nint sum[xx],f[xx]; //sum\u4e3a\u65b0\u8282\u70b9\u7684\u6743\u503c\uff0cf\u4e3adp \nint pre[xx],next[xx],head[xx];//\u62d3\u6251\u6392\u5e8f\u6240\u9700\u53d8\u91cf \nqueue<int> q;\nstruct ac\n{\n\tint t,next,head,s,pre;\n}e[500010];\nvoid build(int x,int y)\n{\n\te[++ta].t=y;e[ta].next=e[x].head;\n\te[x].head=ta;e[ta].s=x;e[y].pre++;\n}//\u5efa\u56fe \nvoid tarjan(int x)\n{\n\tlow[x]=dfn[x]=++dep;\n\tstack[++tail]=x;vis[x]=1;\n\tfor(int i=e[x].head;i;i=e[i].next)\n\t{\n\t\tint go=e[i].t;\n\t\tif(!dfn[go])\n\t\t{\n\t\t\ttarjan(go);\n\t\t\tlow[x]=min(low[x],low[go]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(vis[go])\n\t\t\tlow[x]=min(low[x],low[go]);\n\t\t}\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tnow[x]=++tot;vis[x]=0;\n\t\twhile(stack[tail]!=x)\n\t\t{\n\t\t\tnow[stack[tail]]=tot;vis[stack[tail]]=0;\n\t\t\t--tail;\n\t\t}--tail;\n\t}\n}//\u7f29\u70b9 \nvoid tupu()//\u62d3\u6251\u6392\u5e8f \n{\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(!pre[now[i]]&& !vis[now[i]])\n\t\t{\n\t\t\tq.push(now[i]);vis[now[i]]=1;\n\t\t}\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=next[i])\n\t\t{\n\t\t\tint go=e[i].t;\n\t\t\tpre[now[go]]--;\n\t\t\tf[now[go]]=max(f[now[go]],f[u]+sum[now[go]]);\n\t\t\tif(!pre[now[go]]&&!vis[now[go]])\n\t\t\tq.push(now[go]),vis[now[go]]=1;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\t\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d\",&w[i]);\n\t}\n\t\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint a,b;scanf(\"%d%d\",&a,&b);\n\t\tbuild(a,b);\n\t}\n\t\n\tfor(int i=1;i<=n;++i)\n\tif(!dfn[i]) tarjan(i);//\u7f29\u70b9\u3002 \n\t\n\tfor(int i=1;i<=n;++i)\n\tsum[now[i]]+=w[i];//\u66f4\u65b0\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u6743\u503c\u3002 \n\t\n\tfor(int i=1;i<=n;++i)//\u66f4\u65b0\u56fe \n\t{\n\t\tf[now[i]]=sum[now[i]];\t\t\n\t\tfor(int j=e[i].head;j;j=e[j].next)\n\t\t{\n\t\t\tif(now[e[j].t]!=now[e[j].s])\n\t\t\t{\n\t\t\t\tnext[j]=head[now[i]];\n\t\t\t\thead[now[i]]=j;\n\t\t\t\tpre[now[e[j].t]]++;\n\t\t\t}\n\t\t}\n\t}\n\ttupu();//\u62d3\u6251\u6392\u5e8f \n\t\n\tfor(int i=1;i<=n;++i)\n\tmaxx=max(maxx,f[now[i]]); \n\t\n\tcout<<maxx<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1540948468,
        "uid": 37488,
        "name": "ghmgjf",
        "ccfLevel": 0,
        "title": "P3387\u3010\u6a21\u677f\u3011\u7f29\u70b9"
    },
    {
        "content": "    \u7f29\u70b9\u7684\u6a21\u677f\u9898\u76ee\n    \u8bf4\u662f\u8981\u7528dp    \u4f46\u662f\u7531\u4e8e\u672c\u4ebadp\u4ecd\u5c5e\u4e8e\u6a59\u9898\u7684\u9636\u6bb5...\n    \u5c31\u81ea\u52a8\u9009\u62e9\u4e86topo\n    \u5176\u5b9e\u57fa\u672c\u601d\u8def\u5c31\u662f\u5148\u7f29\u70b9   \u4e4b\u540e\u518d\u6839\u636e\u7f29\u597d\u7684\u70b9\u5efa\u7acb\u4e00\u4e2a\u65b0\u56fe\n    \u7531\u4e8e\u5df2\u7ecf\u7f29\u597d\u4e86\u70b9 \u8fd9\u4e2a\u65b0\u56fe\u5c31\u80af\u5b9a\u4e0d\u5b58\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e86\n    \u5c31\u76f4\u63a5\u641e\u4e2a\u62d3\u6251\u6392\u5e8f\u5c31\u597d\u4e86\n    \n    \u8bf4\u4e86\u8fd9\u4e48\u591a  \u81f3\u4e8e\u7f29\u70b9\u662f\u4ec0\u4e48  \u6765\u505a\u8fd9\u4e2a\u9898\u7684\u80af\u5b9a\u90fd\u6709\u4e00\u5b9a\u4e86\u89e3\u4e86\n    \u63a8\u8350\u4e00\u4e2a\u5730\u5740 \u5e0c\u671b\u5927\u5bb6\u53ef\u4ee5\u6765\u8fd9\u91cc\u5b66\u4e60\uff08\u8fd9\u5e76\u4e0d\u662f\u6211\u53d1\u7684\u535a\u5ba2 \n    \u53ea\u662f\u6211\u770b\u4e86\u8fd9\u4e48\u591a\u7684\u5173\u4e8e\u7f29\u70b9tarjan\u7684\u535a\u5ba2  \u8fd9\u4e00\u7bc7\u662f\u5199\u7684\u5f88\u8be6\u7ec6\u7684\uff09\n    \n    \u53e6\u5916\u8bf4\u660e\u4e00\u4e0b \u672c\u4eba\u7684tajan\u4ee3\u7801\u662f\u548c\u590d\u65e6\u5927\u5b66\u751f\u5218\u660e\u541b\u8001\u5e08\u5b66\u4e60\u7684\n    \u4e5f\u5f88\u611f\u8c22\u5218\u8001\u5e08\u5728\u6e05\u5317\u5b66\u5802\u7684\u6307\u5bfc\n    \n    https://www.cnblogs.com/stxy-ferryman/p/7779347.html\n    \n    \u4ee5\u4e0a\u7f51\u5740\u590d\u5236\u4e8e\u767e\u5ea6....\n    \n    \u90a3\u4e48\u6211\u5c31\u5927\u4f53\u4e0a\u8bf4\u660e\u4e00\u4e0b\u5427\n    tarjan\u7684\u7f29\u70b9\u548c\u5f3a\u8fde\u901a\u5206\u91cf\u5176\u5b9e\u90fd\u662f\u4e00\u6837\u7684\uff08\u4e5f\u5c31\u662f\u4e00\u53e5\u8bdd\u7684\u533a\u522bhhh\uff09\n    \u6240\u6709\u7684\u6570\u7ec4\u6211\u90fd\u4f1a\u5728\u4ee3\u7801\u91cc\u9762\u7ed9\u4e88\u8bf4\u660e\u7684\n    \n    \n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<algorithm>\n    #include<stack>\n    #include<queue>\n    using namespace std;\n    const int maxn = 10005;\n    const int maxm = 100005 ;\n    int n,m,head[maxn],head2[maxn],top2,top,dfn[maxn],low[maxn],value[maxn],indexx,cnt,belong[maxn],indegree[maxn],dis[maxn],ans ;\n    //dfn[i]\u8868\u793ai\u70b9\u662f\u7b2c\u51e0\u4e2a\u88ab\u641c\u5230\u7684\u70b9  low[i]\u8868\u793ai\u70b9\u53ef\u4ee5\u641c\u5230\u7684\u6700\u5148\u88ab\u641c\u5230\u7684\u70b9 \u5373dfn[]\u6700\u5c0f\u7684\u70b9  belong[i]\u8868\u793ai\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8054\u901a\u5206\u91cf  \n    //dis[i]\u9002\u7528\u4e8e\u50a8\u5b58\u6700\u540e\u7b54\u6848\u7684 \n    //indegree[] head[] \u90fd\u662f\u62d3\u6251\u6392\u5e8f\u548c\u90bb\u63a5\u8868\u5b58\u56fe\u7684\u5fc5\u5907\u6570\u7ec4 \n    bool instack[maxn] ; //\u8868\u793a\u8be5\u70b9\u662f\u5426\u5728\u6808\u4e2d \n    stack< int > s ;  //tarjan\u7684\u6808 \n    queue< int > q;  //\u62d3\u6251\u7684\u961f\u5217 \n    struct edge {\n\t    int next , to ,from;\n    }e[maxm];\n\n    struct edge2 {\n\t    int next,to;\n    }e2[maxm];\n\n    void add_edge(int u,int v) {   //\u5b58\u7684\u662f\u8fd8\u6ca1\u7f29\u70b9\u524d\u7684\u56fe \n\t    e[++top].to = v;\n\t    e[top].next = head[u] ;\n\t    e[top].from = u;\n\t    head[u] = top ; \n    }\n\n    void add_edge2(int u,int v) {  //\u5b58\u7684\u662f\u7f29\u70b9\u540e\u7684\u56fe \n\t    e2[++top2].to = v;\n\t    e2[top2].next = head2[u] ;\n\t    head2[u] = top2;\n    }\n\n    void tarjan(int u) {\n\t    instack[u] = 1;\n\t    dfn[u] = low[u] = ++indexx ;   //\u7b97\u662f\u521d\u59cb\u5316\u5427 \n\t    s.push(u) ;\n\t    for(int i = head[u]; i ;i = e[i].next) {\n\t\t    if(!dfn[e[i].to]) {\n\t\t\t    tarjan(e[i].to) ;\n\t\t\t    low[u] = min(low[u] , low[e[i].to]) ;\n\t\t    }\n\t\t    else \n\t\t      if(instack[e[i].to]) \n\t\t        low[u] = min(low[u] , dfn[e[i].to]) ;  //\u8fd9\u4e2a\u5730\u65b9\u6211\u8bd5\u8fc7\u4e86  \u6362\u6210 low[u] = min(low[u] ,low[e[i].to])\uff1b\u4e5f\u53ef\u4ee5 \n\t    }\n\t    if(dfn[u] == low[u]) {\n\t\t    cnt++;   //\u8868\u793a\u6709\u51e0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \u4e0d\u8fc7\u8fd9\u4e2a\u9898\u597d\u50cf\u6ca1\u5565\u7528... \n\t\t    while(s.top() != u) {\n\t\t\t    int t = s.top() ; s.pop() ;\n\t\t\t    belong[t] = u;  // \u4e0a\u6b21\u6211\u5199\u7684\u662fbelong[t] = cnt;  \u4e0d\u8fc7\u4e0d\u77e5\u9053\u4e3a\u5565\u6ca1\u8fc7... \n\t\t\t    instack[t] = 0;\n\t\t\t    value[u] += value[t] ;   //\u52a0\u8d77\u6765\u7684\u5566\uff01 \n\t\t    }\n\t\t    s.pop() ; \n\t\t    instack[u] = 0;\n\t\t    belong[u] = u;  //\u6700\u540e\u7684u\u70b9\u4e0d\u8981\u5fd8\u8bb0\u4e86 \n\t    }\n    }\n\n    void topo( ) {   //\u62d3\u6251\u6392\u5e8f\u627e\u7b54\u6848 \n\t    for(int i = 1;i <= n ;++i) \n\t      if(belong[i] == i && !indegree[belong[i]]) {q.push(i) ;dis[i] = value[i] ;}\n\t    while(!q.empty())  {\n\t\t    int j = q.front() ; q.pop() ;\n\t\t    for(int i = head2[j]; i ;i = e2[i].next) {\n\t\t\t    dis[e2[i].to] = max(dis[e2[i].to] , dis[j] + value[e2[i].to]) ;\n\t\t\tindegree[e2[i].to]--;\n\t\t\tif(!indegree[e2[i].to]) q.push(e2[i].to) ;\n\t\t    }\n\t    } \n\t    for(int i = 1; i <= n ;++i)\n\t      ans = max(ans , dis[i]) ;  \n    }\n    //\u4e0d\u89e3\u91ca\u4e86\u5427 \n\n    int main() {\n    \tscanf(\"%d%d\",&n,&m) ;\n\t    for(int i = 1;i <= n ;++i) scanf(\"%d\",&value[i]) ;\n\t    for(int i = 1;i <= m ;++i) {\n\t\t    int x,y; scanf(\"%d%d\",&x,&y) ;\n\t\t    add_edge(x , y) ;\n\t    }\n\t    for(int i = 1;i <= n ;++i) \n\t      if(!dfn[i]) tarjan( i ) ;   //\u82e5\u6ca1\u6709\u88ab\u641c\u8fc7 \u5219tarjan\u8fd9\u4e2a\u70b9 \n\t    for(int i = 1;i <= m ;++i) {\n\t\t    if(belong[e[i].from] == belong[e[i].to]) continue ;\n\t\t    add_edge2(belong[e[i].from] , belong[e[i].to]) ;   //\u5b58\u65b0\u56fe   \n\t\t                  //\u5982\u679c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf  \u90a3\u4e48\u8fd9\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u8fb9 \n\t\t    indegree[belong[e[i].to]] ++ ;\n\t    }\n\t    topo() ;\n\t    printf(\"%d \",ans) ;\n\t    return 0;\n    }",
        "postTime": 1534677008,
        "uid": 88340,
        "name": "Tiffany_Tendering",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u770b\u5230\u597d\u50cf\u6ca1\u4eba\u7528\u8dd1\u6b63\u53cd\u56fe\u6765\u6c42\u5f3a\u8054\u901a\u5206\u91cf\u7684\uff0c\u6211\u6765\u5199\u4e00\u6ce2\n\n\u5f3a\u8054\u901a\u5206\u91cf\u4e0d\u53ea\u53ef\u4ee5\u7528tarjan\n\n\u57fa\u672c\u601d\u8def\uff0c\u73b0\u5728\u6b63\u56fe\u4e0a\u8dd1\u4e00\u8fb9dfs\u8bb0\u5f55\u4e0b\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u518d\u5c06\u6bcf\u6761\u8fb9\u53cd\u5411\uff0c\u4ece\u6700\u540e\u4e00\u4e2a\u51fa\u7684\u8282\u70b9\u5f00\u59cb\u8dd1dfs\uff0c\u4e00\u6b21dfs\u8dd1\u9053\u7684\u70b9\u5c31\u662f\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\n\n\u4e0a\u4ee3\u7801\n\n```\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cstdio>\n#include <stack>\nusing namespace std;\nconst int maxn=200005;\nint val[maxn];\nvector<int> G[maxn],RG[maxn],NG[maxn];\nstack<int> S; //\u7528stack\u8bb0\u5f55\u51fa\u8282\u70b9\u7684\u987a\u5e8f\nint tot=1;\nbool vis1[maxn],vis2[maxn];\nint com[maxn];\nint sum[maxn];\nint dp[maxn];\nint from[maxn];\nint to[maxn];\nint n,m;\ninline void addEdge(int from, int to)\n{\n    G[from].push_back(to);\n\tRG[to].push_back(from);\n}\ninline void addNEdge(int from, int to)\n{\n    NG[from].push_back(to);\n}\nvoid dfs1(int x)//\u6b63\u56fe\u7684dfs\n{\n\tvis1[x]=true;\n\tfor (int i=0;i<G[x].size();i++){\n\t\tint v=G[x][i];\n\t\tif(!vis1[v]){\n\t\t\tdfs1(v);\n\t\t}\n\t}\n\tS.push(x);\n}\t\nvoid dfs2(int x){ //\u53cd\u56fe\u7684dfs\n\tcom[x]=tot;\n\tsum[tot]+=val[x];\n\tvis2[x]=true;\n\tfor (int i=0;i<RG[x].size();i++){\n\t\tint v=RG[x][i];\n\t\tif(!vis2[v]){\n\t\t\tdfs2(v);\n\t\t}\n\t}\n}\nvoid search(int x){//dp\u6c42DAG\u6700\u957f\u8def\n    if(dp[x]) return;\n    dp[x]=sum[x];\n    int maxsum=0;\n    for (int i=0;i<NG[x].size();i++){\n        int v=NG[x][i];\n        if(!dp[v]) search(v);\n        maxsum=max(maxsum,dp[v]);\n    }\n    dp[x]+=maxsum;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d\",&val[i]);\n    }\n    for (int i=0;i<m;i++){\n        scanf(\"%d%d\",&from[i],&to[i]);\n        addEdge(from[i],to[i]);\n    }\n    for (int i=1;i<=n;i++){\n        if(!vis1[i]){\n            dfs1(i);\n        }\n    }\n\twhile (!S.empty()){\n\t\tint a=S.top();\n\t\tS.pop();\n\t\tif(!vis2[a]){\n\t\t\tdfs2(a);\n\t\t\ttot++;\n\t\t}\n\t}\n    for (int i=0;i<m;i++){\n        if(com[from[i]]!=com[to[i]]){\n            addNEdge(com[from[i]],com[to[i]]);\n        }\n    }\n    int ans=0;\n    for (int i=1;i<=n;i++){\n        if(!dp[i]) search(i);\n        ans=max(ans,dp[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1525332630,
        "uid": 31228,
        "name": "ciwomuli",
        "ccfLevel": 0,
        "title": "\u7f29\u70b9\u6a21\u677f-\u6b63\u53cd\u56fe"
    },
    {
        "content": "\u5b66\u4e86tarjan\u7b97\u6cd5\uff0c\u4eca\u5929\u6211\u5c31\u7b80\u5355\u8c08\u8c08\u6211\u5bf9\u5176\u7684\u7406\u89e3\u5427\uff1b\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\u5148\u4e0a\u4e00\u9053\u9898(\u6d1b\u8c37P3387)\uff0c\u53c8\u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u5bf9\u5427(\u4f1a\u7684\u5927\u4f6c\u52ff\u55b7)\uff1b\n\u9898\u76ee\u80cc\u666f\n\n\u7f29\u70b9+DP\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u6700\u5927\u3002\u4f60\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6743\u503c\u548c\u3002\n\n\u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n\n\u8fd9\u9053\u9898\u600e\u4e48\u505a(\u6211\u653e\u5728\u8fd9\u91cc\u5f53\u7136\u662f\u7528tarjan\u4e86)\uff0c\u53ef\u80fd\u6709\u5176\u4ed6\u7684\u65b9\u6cd5\u4f46\u4eca\u5929\u8bb2tarjan\u7b97\u6cd5\u90a3\u6211\u4eec\u5c31\u4e3b\u8bb2\u5b83\u5427\uff1b\n\ntarjan\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u5c06\u4e92\u76f8\u95f4\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9(\u53ca\u73af)\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5c31\u4f1a\u6784\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5bf9\u4e8e\u6709\u5411\u65e0\u73af\u56fe(\u56e0\u4e3a\u5176\u5177\u6709\u5f88\u591a\u4f18\u826f\u7684\u6027\u8d28)\u4fbf\u53ef\u4ee5\u8fdb\u884cDP\uff0c\u6216\u8005\u5176\u5b83\u4e00\u4e9b\u64cd\u4f5c\uff1b\n\n\u4e0b\u9762\u6211\u5c31\u6765\u8bb2\u4e00\u4e0b\u600e\u4e48\u5c06\u4e00\u4e9b\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u7684\u70b9\u7f29\u6210\u4e00\u4e2a\u70b9\uff1b\n![](http://cewsv.img48.wal8.com/img48/542641_20160409233727/151861482249.png)\n\u5176\u4e2d\u7528\u9ec4\u5708 \u5708\u8d77\u6765\u7684\u70b9\u4fbf\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9(\u53ca\u628a\u5b83\u4eec\u5f3a\u8054\u901a)\uff1b\n\n\u90a3\u600e\u4e48\u6c42\u70b9\u4e4b\u95f4\u662f\u5426\u5f3a\u8054\u901a\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5148\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u5bf9\u5b83\u8fdb\u884cdsf\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4dfn\u6765\u8bb0\u5f55\u5b83\u88abdfs\u65f6\u7684\u987a\u5e8f\uff1b\n\n\u6211\u4eec\u4ece1\u53f7\u70b9\u5f00\u59cbdfs\u56fe\u4e0a\u7684\u5e8f\u53f7\u4fbf\u662fdfn\uff0c\u6211\u4eec\u518d\u7528\u4e00\u4e2alow\u6570\u7ec4\u6765\u8bb0\u5f55\u672c\u53f7\u8282\u70b9\u6700\u65e9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u7684dfn\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5f53\u4e00\u4e2a\u70b9\u7684low\u5c0f\u4e8e\u5b83\u81ea\u5df1\u7684low\u65f6\uff0c\u5b83\u4fbf\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u70b9\uff0c\u8fd9\u662f\u5c31\u80fd\u5f62\u6210\u73af\u3002\u5982\u4e0a\u56fe\uff0c\u6211\u4eecdfs\u5230\u4e867\uff0c\u53d1\u73b0\u8fd8\u53ef\u4ee5\u52305\u6240\u4ee5\u56db\u7684low\u4fbf\u88ab\u66f4\u65b0\u4e3a5\uff0c\u8fd9\u4e2a\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u4f46\u5de6\u4fa7\u7684\u5e76\u4e0d\u662f\u524d\u8054\u901a\u7684\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u5f00\u4e00\u4e2a\u6808\u6765\u8bb0\u5f55\u3002\u90a3\u4e48\u4fbf\u4f1a\u51fa\u73b0\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\uff1a\n\n\u5b50\u8282\u70b9(v)\u5df2\u8bbf\u95ee\u8fc7,\u5e76\u4e14\u5728\u6808\u91cc\u975e\u5e38\u663e\u7136,\u8be5\u8282\u70b9(u)\u53ef\u4ee5\u56de\u5230\u4ed6\u7684\u67d0\u4e00\u7956\u5b97(v)\u5904,\u4ece\u7956\u5b97\u8282\u70b9(v)\u5230\u8be5\u8282\u70b9(u)\u4e2d\u95f4\u7684\u6240\u6709\u8282\u70b9\u53ef\u4ee5\u8fde\u6210\u73af \u5c06\u8be5\u8282\u70b9(u)\u7684\u8bbf\u95ee\u65f6\u95f4\u6807\u8bb0\u4e3a \u91cd\u65b0\u6807\u8bb0\u4e3a\u8be5\u73af\u6700\u5c0f\u7684\u65f6\u95f4(\u7f29\u70b9)\u5b50\u8282\u70b9(v)\u5df2\u8bbf\u95ee\u8fc7\u3002\n\n\u4e0d\u5728\u6808\u91cc\u65e0\u6cd5\u8fde\u6210\u73af,\u4e00\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u95f4\u7684\u5355\u5411\u8fb9\u5b50\u8282\u70b9(v)\u672a\u8bbf\u95ee\u8fc7\u7ee7\u7eed DFS \u904d\u5386\u8be5\u5b50\u8282\u70b9(v) \u904d\u5386\u5b8c\u8be5\u5b50\u8282\u70b9(v)\u7684\u6240\u6709\u5b50\u8282\u70b9\u540e,\u5c1d\u8bd5\u7f29\u70b9\u5c06\u8be5\u8282\u70b9(u)\u7684\u65f6\u95f4\u6807\u8bb0 \u91cd\u65b0\u6807\u8bb0\u4e3a\u8be5\u8282\u70b9(u)\u4e0e\u5b50\u8282\u70b9(v)\u65f6\u95f4\u6807\u8bb0\u7684\u6700\u5c0f\u503c(\u5982\u679c\u9700\u8981\u4fee\u6539\u5c31\u8bc1\u660e\u5b83\u7684 \u67d0\u4e2a\u540e\u4ee3\u8282\u70b9\u548c\u5b83\u7684\u7956\u5b97\u8282\u70b9\u6709\u8fde\u63a5 )\n\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\n```cpp\nvoid tarjan(int u)\n{\n    dfn[u]=++dfn[0];\n    low[u]=dfn[u];//\u521d\u59cb\u5316\n    st[++st[0]]=u;//st\u662f\u6808\n    inst[u]=1;//\u8868\u793a\u5728\u6808\u91cc\n    for(int i=0;i<q[u].size();++i)\n    {\n        int v=q[u][i];\n        if(!dfn[v])//\u6ca1\u88ab\u904d\u5386\u8fc7\n            tarjan(v);\n        if(inst[v])\n            low[u]=min(low[v],low[u]);//\u66f4\u65b0low\n    }\n    if(dfn[u]==low[u])//\u7f29\u70b9\n    {\n        liantong[0]++;\n        while(st[st[0]]!=u)\n        {\n            liantong[st[st[0]]]=liantong[0];\n            sum[liantong[0]]+=va[st[st[0]]];\n            inst[st[st[0]]]=0;\n            st[0]--;\n        }\n        liantong[st[st[0]]]=liantong[0];\n            sum[liantong[0]]+=va[st[st[0]]];\n            inst[st[st[0]]]=0;\n            st[0]--;\n    }\n}\n```\n\u628a\u8fd9\u4e2a\u5b66\u4f1a\u4e86\uff0c\u5176\u5b83\u7684\u5c31\u662f\u5c0f\u610f\u601d\u4e86\uff0c\u6211\u5269\u4e0b\u7528\u7684spfa\u89e3\u7684\u8fd9\u9053\u9898\uff0c\u90a3\u73b0\u5728\u5c31\u4e0a\u5168\u4ee3\u7801\u5427\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>q[10001];\nvector<int>p[10001];\nint liantong[100001],va[100001],sum[100001],dfn[100001],low[100001],st[100001];\nbool inst[100001],vis[100001];\nint x[100001],y[100001],dis[100001],ans;\nvoid tarjan(int u)\n{\n    dfn[u]=++dfn[0];\n    low[u]=dfn[u];\n    st[++st[0]]=u;\n    inst[u]=1;\n    for(int i=0;i<q[u].size();++i)\n    {\n        int v=q[u][i];\n        if(!dfn[v])\n            tarjan(v);\n        if(inst[v])\n            low[u]=min(low[v],low[u]);\n    }\n    if(dfn[u]==low[u])\n    {\n        liantong[0]++;\n        while(st[st[0]]!=u)\n        {\n            liantong[st[st[0]]]=liantong[0];\n            sum[liantong[0]]+=va[st[st[0]]];\n            inst[st[st[0]]]=0;\n            st[0]--;\n        }\n        liantong[st[st[0]]]=liantong[0];\n            sum[liantong[0]]+=va[st[st[0]]];\n            inst[st[st[0]]]=0;\n            st[0]--;\n    }\n}\nvoid spfa(int x)//\u849f\u84bb\u7684spfa\n{\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    queue<int>hh;\n    dis[x]=sum[x];\n    vis[x]=1;\n    hh.push(x);\n    while(!hh.empty())\n    {\n        int u=hh.front();\n        hh.pop();\n        vis[u]=0;\n        for(int i=0;i<p[u].size();++i)\n        {\n            if(dis[p[u][i]]<dis[u]+sum[p[u][i]])\n            {\n                dis[p[u][i]]=dis[u]+sum[p[u][i]];\n            }\n            if(!vis[p[u][i]])\n            {\n                vis[p[u][i]]=1;\n                hh.push(p[u][i]);\n            }\n        }\n    }\n    for(int i=1;i<=liantong[0];++i)\n        ans=max(ans,dis[i]);\n}\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)\n        scanf(\"%d\",&va[i]);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&x[i],&y[i]);\n        q[x[i]].push_back(y[i]);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        if(!dfn[i])\n            tarjan(i);\n    }\n    for(int i=1;i<=m;++i)\n    {\n        if(liantong[x[i]]!=liantong[y[i]])\n        {\n            p[liantong[x[i]]].push_back(liantong[y[i]]);\n        }\n    }\n    for(int i=1;i<=liantong[0];++i)\n    spfa(i);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1522904904,
        "uid": 60867,
        "name": "heyongxin",
        "ccfLevel": 6,
        "title": "\u7f29\u70b9"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u7528\u4e86\u4e24\u79cd\u89e3\u6cd5\uff08\u672c\u6765\u662f3\u79cd\u7684\uff0c\u6709\u4e00\u79cd\u4e0d\u53ef\u884c\uff09\uff0c\u4f46\u8fd9\u4e24\u79cd\u5462\uff0c\u90fd\u9700\u8981\u5148tarjan\u7f29\u70b9\u518d\u91cd\u65b0\u5efa\u8fb9\u3002\n\n#\u6cd5\u4e00\uff1a\n\n##1.tarjan\u7f29\u70b9\uff1b\n\n##2.\u91cd\u65b0\u5efa\u8fb9\uff1b\n\n##3.bfs\uff08spfa\u6700\u5927\u8def\uff09\u6c42\u6700\u5927\u503c\uff1b\n\n###\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=100000;\nint dfn[N],k=0,low[N],n,m,head[N],color[N],color_time,sta[N],top=0,tim=0,value[N],f[N],ans=0,rd[N],dis[N],x[N],y[N];\nbool vis[N];\nstruct node\n{\n    int to,next,from;\n}edge[N];\nvoid add(int u,int v)\n{\n    edge[++k].to=v;\n    edge[k].from=u;\n    edge[k].next=head[u];\n    head[u]=k;\n}\nvoid tarjan(int s)//\u7f29\u70b9\n{\n    dfn[s]=low[s]=++tim;\n    sta[++top]=s;\n    vis[s]=true;\n    for(int i=head[s],v=edge[i].to;i;i=edge[i].next,v=edge[i].to)\n    {\n        if(!dfn[v])tarjan(v),low[s]=min(low[s],low[v]);\n        else if(vis[v])low[s]=min(low[s],dfn[v]);\n    }\n    if(low[s]==dfn[s])\n    {\n        ++color_time;\n        vis[s]=false;\n        while(sta[top+1]!=s)\n        {\n            color[sta[top]]=color_time;//\u67d3\u8272\n            f[color_time]+=value[sta[top]];//\u6c42\u67d3\u8272\u540e\u70b9\u96c6\u6743\u503c\u548c\n            ans=max(ans,f[color_time]);\n            vis[sta[top]]=false;\n            top--;\n        }\n    }\n}\nvoid bfs(int x)//spfa\u6700\u5927\u8def\n{\n    memset(dis,0,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[x]=f[x];\n    queue<int>q;\n    vis[x]=true;\n    q.push(x);\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();vis[u]=false;\n        for(int i=head[u],v=edge[i].to;i;i=edge[i].next,v=edge[i].to)\n        {\n            if(dis[v]<dis[u]+f[v])\n            {\n                dis[v]=dis[u]+f[v];\n                if(!vis[v])\n                {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    for(int i=1;i<=color_time;i++)ans=max(dis[i],ans);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&value[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);x[i]=u,y[i]=v;\n        add(u,v);\n    }\n    for(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n    memset(head,0,sizeof(head));\n    memset(edge,0,sizeof(edge));\n    k=0;\n    for(int i=1;i<=m;i++)\n    {\n        if(color[x[i]]!=color[y[i]])\n        {\n            add(color[x[i]],color[y[i]]);//\u91cd\u65b0\u5efa\u8fb9\n        }\n    }\n    for(int i=1;i<=color_time;i++)\n    {\n        bfs(i);\n    }\n    printf(\"%d\",ans);\n}\n```\n##1.tarjan\u7f29\u70b9\uff1b\n##2.\u91cd\u65b0\u5efa\u8fb9\uff1b\n\n##3.dfs\u6c42\u6700\u5927\u503c\uff08\u6811\u5f62DP\uff09\uff1b\n\n###\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=100000;\nint dfn[N],k=0,low[N],n,m,head[N],color[N],color_time,sta[N],top=0,tim=0,value[N],f[N],ans=0,rd[N],dis[N],zhi[N],x[N],y[N];\nbool vis[N];\nstruct node\n{\n    int to,next,from;\n}edge[N];\nvoid add(int u,int v)\n{\n    edge[++k].to=v;\n    edge[k].from=u;\n    edge[k].next=head[u];\n    head[u]=k;\n}\nvoid tarjan(int s)//\u7f29\u70b9\n{\n    dfn[s]=low[s]=++tim;\n    sta[++top]=s;\n    vis[s]=true;\n    for(int i=head[s],v=edge[i].to;i;i=edge[i].next,v=edge[i].to)\n    {\n        if(!dfn[v])tarjan(v),low[s]=min(low[s],low[v]);\n        else if(vis[v])low[s]=min(low[s],dfn[v]);\n    }\n    if(low[s]==dfn[s])\n    {\n        ++color_time;\n        vis[s]=false;\n        while(sta[top+1]!=s)\n        {\n            color[sta[top]]=color_time;//\u67d3\u8272\n            zhi[color_time]+=value[sta[top]];//\u6c42\u67d3\u8272\u540e\u70b9\u96c6\u6743\u503c\u548c\n            vis[sta[top]]=false;\n            top--;\n        }\n    }\n}\nint dfs(int x)//\u6811\u5f62DP \n{\n    if(f[x])return f[x];\n    f[x]=zhi[x];\n    int maxx=0;\n    for(int i=head[x];i;i=edge[i].next)\n    {\n       int to=edge[i].to;\n       if(!f[to])dfs(to);\n       maxx=maxx>f[to]?maxx:f[to];\n    }\n    f[x]+=maxx;\n    return f[x];\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&value[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);x[i]=u,y[i]=v;\n        add(u,v);\n    }\n    for(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n    memset(vis,false,sizeof(vis));\n    memset(head,0,sizeof(head));\n    memset(edge,0,sizeof(edge));\n    k=0;\n    for(int i=1;i<=m;i++)\n    {\n        if(color[x[i]]!=color[y[i]])\n        {\n            add(color[x[i]],color[y[i]]);//\u91cd\u65b0\u5efa\u8fb9\n        }\n    }\n    for(int i=1;i<=color_time;++i)\n    if(!f[i])\n    {\n       dfs(i);\n       ans=ans>f[i]?ans:f[i];//\u53d6\u6700\u5927\u503c \n    }\n    printf(\"%d\",ans);\n}\n\u6b22\u8fcedalao\u6307\u6b63\n```",
        "postTime": 1504514032,
        "uid": 25709,
        "name": "SNiFe",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u6b64\u9898\u89e3\u90e8\u5206\u501f\u9274\u4e8e[\u4e5d\u91ce\u7684\u535a\u5ba2](https://blog.csdn.net/acmmmm/article/details/16361033)\n\n### \u9898\u76ee\u5206\u6790\n\n- \u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u6700\u5927\u3002\u4f60\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6743\u503c\u548c\u3002\n- \u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n\n- \u5047\u5982\u6ca1\u6709\u540e\u9762\u8fd9\u6761\u9650\u5236\u7684\u8bdd,\u90a3\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a**\u65e0\u73af\u56fe**\u3002\u56e0\u4e3a\u6709\u73af\u7684\u8bdd\u6211\u53ef\u4ee5\u4e00\u76f4\u5728\u73af\u4e0a\u8dd1\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u6ca1\u6709\u4e00\u4e2a\u4e0a\u754c\n\n- \u6ca1\u6709\u73af\u7684\u8bdd\u6211\u840c\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e00\u4e2a $O(n)$ \u7684 \u62d3\u6251$dp$ \u505a\u6cd5\uff0c\u5148\u505a\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u66f4\u65b0\u5165\u5ea6\u4e0d\u4e3a $0$ \u7684\u70b9\uff0c\u628a\u66f4\u65b0\u540e\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u52a0\u5165\u961f\u5217\u91cc\uff0c\u7ee7\u7eed\u505a\u4e4b\u524d\u7684\u4e8b\u60c5\n\n- \u73b0\u5728\u8003\u8651\u6709\u73af\u600e\u4e48\u505a\n\n- \u6709\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u662f\uff0c\u5230\u73af\u4e0a\u5c31\u5148\u628a**\u73af\u4e0a\u7684\u70b9**\u90fd\u8d70\u5b8c\uff0c\u518d\u4ece**\u73af\u4e0a\u4efb\u610f\u4e00\u70b9**\u51fa\u53d1\n\n- \u5176\u5b9e\u8fd9\u4e2a\u73af\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a**\u5927\u70b9**\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4eca\u5929\u8981\u4ecb\u7ecd\u7684\u4e3b\u89d2 $\\to$ **\u7f29\u70b9**\n\n------\n\n### tarjan\u7f29\u70b9\n\n\u4e0b\u9762\u8fd9\u5f20\u56fe\u662f\u4ece [\u4e5d\u91ce\u7684\u535a\u5ba2](https://blog.csdn.net/acmmmm/article/details/16361033) \u90a3 **copy** \u8fc7\u6765\u7684\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/caibf800.png)\n\n- \u628a\u53ef\u4ee5\u4e92\u76f8\u62b5\u8fbe\u7684**\u70b9\u96c6**\u53eb\u505a\u4e00\u4e2a**\u8fde\u901a\u5206\u91cf**\n- \u6700\u5927\u7684\u90a3\u4e2a\u53ef\u4ee5\u4e92\u76f8\u62b5\u8fbe\u7684\u70b9**\u70b9\u96c6**\u5373\u4e3a**\u5f3a\u8fde\u901a\u5206\u91cf**\n- \u7279\u522b\u7684\uff0c\u5355\u4e2a\u7684\u70b9\u4e5f\u53ef\u4ee5\u662f**\u5f3a\u8fde\u901a\u5206\u91cf**\n\n> \u6bd4\u5982\u8bf4 \uff1a$\\{ 4, 5 \\}$ \u662f\u4e00\u4e2a**\u8054\u901a\u5206\u91cf**\uff0c\u800c $\\{4,5,6 \\} $ \u5219\u662f\u4e00\u4e2a**\u5f3a\u8fde\u901a\u5206\u91cf**\uff08\u4e00\u4e2a\u5927\u70b9\uff09\n\ntarjan\u7684\u8fc7\u7a0b\u5c31\u662f\u901a\u8fc7 **dfs** \u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u5927\u70b9\uff09\u7684\u8fc7\u7a0b\n\n\n> \u5bf9\u56fe**dfs**\u4e00\u4e0b\uff0c\u904d\u5386\u6240\u6709\u672a\u904d\u5386\u8fc7\u7684\u70b9 \uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a[\u6709\u5411\u6811](http://baike.baidu.com/link?url=CkM7EiHiG9MSdQcAKwF4oReg83XHA1pz7BtrS4WWhqBjfhWRvAwCGaqlNIJ_d5ssAS1NgpMIDbwkNx_IPIsYpa)\uff0c\u663e\u7136\u6709\u5411\u6811\u662f\u6ca1\u6709\u73af\u7684\u3002\uff08\u6ce8\u610f\u641c\u8fc7\u7684\u70b9\u4e0d\u4f1a\u518d\u641c\n\n> \u5219\u80fd\u4ea7\u751f\u73af\u7684 $\\color {red} \\text {\u53ea\u6709\uff08\u6307\u5411\u5df2\u7ecf\u904d\u5386\u8fc7\u7684\u70b9\uff09\u7684\u8fb9}$\n\n\u6211\u4eec\u53d1\u73b0 $7 \\to 3$ \uff08$\\color {red} \\text {\u7ea2\u8fb9}$  /  \u6a2a\u53c9\u8fb9\uff09\u8fd9\u79cd\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f**\u8fde\u901a\u5206\u91cf**\n\n\u800c $6 \\to 4$ \uff08$\\color {green} \\text {\u7eff\u8fb9}$ /  \u8fd4\u7956\u8fb9\uff09\u8fd9\u79cd\u8fb9\u4e00\u5b9a\u4f1a\u4ea7\u751f**\u8054\u901a\u5206\u91cf**\n\n\u5177\u4f53\u6765\u8bf4\uff1a\u5177\u6709**\u7236\u5b50\u5173\u7cfb**\u7684\u8fb9\u4e00\u5b9a\u4f1a\u4ea7\u751f\u8054\u901a\u5206\u91cf\n\n\u6211\u4eec\u5728**dfs**\u7684\u65f6\u5019\u9700\u8981\u7528\u4e00\u4e2a**\u6808**\u6765\u4fdd\u5b58\u5f53\u524d\u6240\u5728\u8def\u5f84\u4e0a\u7684\u70b9$\\color {red} \\text {\uff08\u6808\u4e2d\u6240\u6709\u70b9\u4e00\u5b9a\u662f\u6709\u7236\u5b50\u5173\u7cfb\u7684\uff09}$\n\n\u6211\u4eec\u7528\u4e00\u4e9b\u6570\u7ec4\u6765\u8868\u793a**dfs**\u7684\u8fc7\u7a0b\n\n```cpp\nint tim, dfn[MAX], low[MAX]\n```\n\n$dfn[i]$ \u8868\u793a\u904d\u5386\u5230\u8282\u70b9 $i$ \u7684\u65f6\u95f4\u6233\uff08\u7b2c\u51e0\u6b21\u904d\u5386\uff09\n\n$low[i]$ \u8868\u793a\u5f80\u4e0a\u53ef\u4ee5\u5230\u8fbe\u6700\u65e9\u7684\u70b9\n\n\u521d\u59cb\u5316 $dfn[i] = low[i] = ++tim$\n\n\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u8fc7\u7a0b\u7684\u6b65\u9aa4\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\n\n```cpp\n    for(int i = head[u]; i; i = nex[i]) {\n        if(dfn[to[i]]) {\n            if(instack[to[i]]) {\n            \tif(low[to[i]] < low[u]) {\n                \tlow[u] = low[to[i]];\n                }\n            }\n        } else {\n            dfs(to[i]);\n            if(low[to[i]] < low[u]) {}\n            \tlow[u] = low[to[i]];\n        \t}\n        }\n    }\n```\n\n\n\n\u5047\u5982\u5f53\u524d\u8282\u70b9 $u$\uff0c $dfn[u] == low[u]$ \u90a3\u5c31\u8bf4\u660e**\u6808\u9876\u5143\u7d20**\u4e00\u76f4\u5230\u8282\u70b9 $u$ \u90fd\u5c5e\u4e8e\u4e00\u4e2a**\u5f3a\u8054\u901a\u5206\u91cf**\uff0c~~\u611f\u6027\u7406\u89e3~~\n\n\u628a\u6808\u4e2d\u5143\u7d20\u5f39\u51fa\u5e76\u4e14\u628a\u4ed6\u4eec\u90fd\u7ed9\u6807\u8bb0\u4e3a\u540c\u4e00\u79cd\u989c\u8272\uff08\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff09\n\n```cpp\n    if(dfn[u] == low[u]) {\n        ++totcol;\n        do {\n            int v = stk[top];\n            col[v] = totcol;\n            instack[v] = false;\n        } while(stk[top--] != u);\n    }\n```\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801~~\u4e0d\u65e9\u8bf4~~\n\n[$\\color {Deepskyblue} {Code}$](https://www.luogu.com.cn/paste/zkvhftxg)\n\n\u8fd9\u91cc\u8fd8\u6709\u4e00\u9053 [tarjan\u7ec3\u624b\u597d\u9898](https://www.luogu.com.cn/problem/P4611)",
        "postTime": 1568513487,
        "uid": 88471,
        "name": "Lskkkno1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "****Tarjan+SPFA****\n\n\u5148tarjan\u5b58\u8fde\u901a\u5206\u91cf\n\n\u8bc1\u660e\uff1a\u5f53\u8fd8\u6709\u4e34\u63a5\u70b9\u672a\u641c\u7d22\u65f6\u6240\u5f97\u6700\u5927\u70b9\u6743\u548c\u4e00\u5b9a\u5c0f\u4e8e\u641c\u7d22\u5b8c\u6240\u6709\u7ed3\u70b9\u6700\u5927\u70b9\u6743\u548c\uff0c\n\n\u4f53\u73b0\u5728\u56fe\u4e2d\u662f\u6700\u5927\u70b9\u6743\u548c\u4e00\u5b9a\u5305\u6db5\u4e00\u4e2a\u51fa\u5ea6\u4e3a\u96f6\u7684\u8282\u70b9\uff0c\n\n\u6b64\u65f6\u53cd\u5411\u5efa\u56fe\u7528SPFA\u66f4\u65b0D\u6570\u7ec4\uff08D\u6570\u7ec4\u4e0d\u65ad\u66f4\u65b0\u7684\u503c\u4e3a\u8be5\u8282\u70b9\u5df2\u77e5\u6700\u5927\u70b9\u6743\u548c\uff09\uff0c\n\n\u53cd\u5411\u5efa\u56fe\u65f6\u6b63\u50cf\u56fe\u4e2d\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u5728\u5411\u56fe\u4e2d\u7684\u4f53\u73b0\u4e3a\u5165\u5ea6\u4e3a\u96f6\uff0c\n\n\u8fd9\u65f6\u5f15\u51650\u70b9\u5411\u8fd9\u4e9b\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u5f15\u8fb9\u4ee5\u8865\u5168\u5355\u6e90\u8def\u5f84\u95ee\u9898\uff08\u5982\u679c\u4e0d\u8fd9\u6837\u505a\u5219D\u6570\u7ec4\u65e0\u6cd5\u66f4\u65b0\uff09\n\nSPFA\u7ed3\u675f\u65f6D\u6570\u7ec4\u6700\u5927\u503c\u4e3a\u7b54\u6848\n\n```cpp\n#include<cstdio>\n#include<stack>\n#include<queue>\n#include<memory.h>\n#define MAXN 10005\n#define MAXM 100005\nusing namespace std;\nstack<int> S;\nqueue<int> Q;\nint next[MAXM];//\u94fe\u5f0f\u524d\u5411\u661f\nint head[MAXN];//\u94fe\u5f0f\u524d\u5411\u661f\nint DFN[MAXN];//\u65f6\u95f4\u6233\nint LOW[MAXN];//tarjan\u5fc5\u7528\u6570\u7ec4\uff08\u8bf4\u5b9e\u8bdd\u6211\u4e0d\u77e5\u9053\u8fd9\u4e2a\u600e\u4e48\u79f0\u547c\uff09\nint COL[MAXN];//\u6d82\u8272\nint CNT[MAXM];//\u8bb0\u5f55\u8272\u5757\u603b\u6743\u91cd\nint IND[MAXN];//\u8bb0\u5f55\u5355\u70b9\u5165\u5ea6\nint value[MAXN];//\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u6743\u91cd\nint D[MAXN];//\u8bb0\u5f55\u7531\u539f\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u6743\u91cd\nbool V[MAXN];\nint n,m,tm,id,tot;\nstruct edge\n{\n\tint x,y;\n} E[MAXM];//\u8fb9\u96c6\u6570\u7ec4 \nvoid init()//\u521d\u59cb\u5316\n{\n\tmemset(next,0,sizeof(next));\n\tmemset(head,0,sizeof(head));\n\tmemset(IND,0,sizeof(IND));\n\tid=0;\n}\nvoid ADD(int a,int b)//\u94fe\u5f0f\u524d\u5411\u661f \n{\n\tid++;\n\tE[id].x=a;\n\tE[id].y=b;\n\tnext[id]=head[a];\n\thead[a]=id;\n\tIND[b]++;//\u5b58\u56fe\u65f6\u8bb0\u5f55\u5165\u5ea6 \n}\nvoid SCAN()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tint i;\n\tfor(i=1; i<=n; i++)\n\t\tscanf(\"%d\",&value[i]);\n\tfor(i=1; i<=m; i++)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d %d\",&a,&b);\n\t\tADD(a,b);\n\t}\n}\nvoid TJ(int x)//tarjan \n{\n\tDFN[x]=LOW[x]=++tm;\n\tS.push(x);\n\tV[x]=1;\n\tint i;\n\tfor(i=head[x]; i; i=next[i])\n\t{\n\t\tint y=E[i].y;\n\t\tif(!DFN[y])\n\t\t{\n\t\t\tTJ(y);\n\t\t\tLOW[x]=min(LOW[x],LOW[y]);\n\t\t}\n\t\telse if(V[y])\n\t\t\tLOW[x]=min(LOW[x],LOW[y]);\n\t}\n\tif(DFN[x]==LOW[x])\n\t{\n\t\tint y=0;\n\t\ttot++;\n\t\twhile(x!=y)\n\t\t{\n\t\t\ty=S.top();\n\t\t\tS.pop();\n\t\t\tV[y]=0;\n\t\t\tCOL[y]=tot;\n\t\t\tCNT[tot]+=value[y];\n\t\t\t//\u8fd9\u91ccCNT\u6570\u7ec4\u5b58\u5165\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u7ed3\u70b9\u6743\u91cd\u548c \n\t\t}\n\t}\n}\nvoid MKMP()//\u5c06\u8fde\u901a\u5206\u91cf\u5f53\u4f5c\u5355\u4e00\u7ed3\u70b9\u5b58\u5165\u65b0\u56fe \n{\n\tint i;\n\tfor(i=1; i<=m; i++)\n\t{\n\t\tint x=E[i].x,y=E[i].y;\n\t\tif(COL[x]!=COL[y])\n\t\t\tADD(COL[x],COL[y]);\n\t}\n\tn=tot;\n\tm=id;\n\tfor(i=1; i<=n; i++)\n\t\tif(!IND[i])\n\t\t\tADD(0,i);\n//\u75310\u70b9\u5411\u5404\u4e2a\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u5f15\u5165\u4e00\u6761\u8fb9\uff0c\u7b26\u5408\u5355\u6e90\u8def\u5f84\u5237\u65b0 \n//\u4e4b\u6240\u4ee5\u5411\u5165\u5ea6\u4e3a\u96f6\u5f97\u70b9\u5f15\u8fb9\uff0c\u662f\u56e0\u4e3a\u5f53\u5165\u5ea6\u975e\u96f6\u7ed3\u70b9\u524d\u9a71\u7ed3\u70b9\u6743\u91cd\u5927\u4e8e\u96f6\u5237\u65b0D\u503c\u6c38\u5c0f\u4e8e\u4ee5\u5165\u5ea6\u4e3a\u96f6\u7ed3\u70b9\u4e3a\u8d77\u70b9\u5237\u65b0D\u503c \n\tm=id;\n}\nint SPFA(int s)\n{\n\tD[s]=value[s];\n\tint ans=-21474836;\n\tmemset(V,0,sizeof(V));\n\tmemset(D,0,sizeof(D));\n\tV[s]=true;\n\tQ.push(s);\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front();\n\t\tQ.pop();\n\t\tV[x]=0;\n\t\tint i;\n\t\tfor(i=head[x]; i; i=next[i])\n\t\t{\n\t\t\tint y=E[i].y;\n\t\t\tif(D[y]<D[x]+CNT[y])\n\t\t\t{\n//\u5f53\u524d\u9a71\u7ed3\u70b9\u5df2\u7ecf\u8fc7\u7684\u6743\u91cd\u548c\u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\u7684\u548c\u5927\u4e8e\u81ea\u8eab\u5df2\u7ecf\u786e\u5b9a\u7684\u6743\u91cd\u8def\u5f84\u548c\u65f6\u66f4\u65b0 \n\t\t\t\tD[y]=D[x]+CNT[y];\n\t\t\t\tans=max(D[y],ans);\n\t\t\t\tif(!V[y])\n\t\t\t\t{\n\t\t\t\t\tQ.push(y);\n\t\t\t\t\tV[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tinit();//\u521d\u59cb\u5316\n\tSCAN();//\u8bfb\u5165\n\tint i;\n\tfor(i=1; i<=n; i++)\n\t\tif(!DFN[i])\n\t\t\tTJ(i);//\u6328\u4e2atarjan\n\tinit();//\u521d\u59cb\u5316\n\tMKMP();//\u53cd\u5411\u5efa\u56fe\n\tprintf(\"%d\",SPFA(0));\n\treturn 0;\n}\n```",
        "postTime": 1528370972,
        "uid": 63345,
        "name": "llllllQ",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u89e3\u91ca\u4e00\u4e0bdfn\u548clow\u7684\u542b\u4e49\uff0c\u524d\u8005\u5b58\u65f6\u95f4\u6233\uff0c\u4e5f\u5c31\u662f\u67d0\u70b9\u7b2c\u51e0\u6b21\u88ab\u8bbf\u95ee\u5230\u3002\n\n\u540e\u8005\u5219\u662f\u67d0\u70b9\u80fd\u591f\u8fbe\u5230\u7684\u70b9\u7684\u65f6\u95f4\u6233\uff08\u4eec\uff09\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u70b9\u7ed3\u5408\u5927\u4f6c\u7684\u535a\u5ba2\u91cc\u7684\u56fe\u53bb\u7406\u89e3 :http://www.cnblogs.com/shadowland/p/5872257.html(\u4e0d\u662f\u6211\u7684\uff0c\uff0c\uff0c)\n\n\u611f\u89c9\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5df2\u7ecf\u591f\u8be6\u7ec6\u4e86\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn = 1e5+15;\nconst int maxm = 1e6+15;\nstruct edge{\n    int nxt,to;\n}e[maxn];//\u524d\u5411\u661f\u8868\u793a\u6cd5 \nint first[maxn],cnt=0;\nint q[maxn],t=0;\nint n,m,a[maxn],b[maxn],vis[maxn],Time=0,dfn[maxn],low[maxn];//vis\u8fdb\u884c\u67d3\u8272\nint X[maxm],Y[maxm];//\u5b58\u8fb9\u5728\u7f29\u70b9\u65f6\u7528\nint dis[maxn],inn[maxn];//\u524d\u8005\u5b58\u6700\u77ed\u8def\uff0c\u540e\u8005\u5b58\u5165\u5ea6 \nbool book[maxn];\nint pnt=0;//\u4ee3\u8868\u65b0\u70b9\u7684\u6570\u91cf\nint ans;\nvoid addedge(int u,int v)\n{\n    e[++cnt] = (edge) {first[u],v};\n    first[u] = cnt;\n    ++inn[v];\n}\nvoid tarjan(int x)\n{\n    dfn[x]=++Time;low[x]=Time;//\u8bb0\u5f55\u65f6\u95f4\u6233\u548c\u4e00\u5f00\u59cb\u7684low\n    q[++t]=x;book[x]=true;//\u653e\u5165\u5f53\u524d\u6808\n    for(register int i=first[x],v;i;i=e[i].nxt) {\n        v = e[i].to;\n        if(!dfn[v]) {//\u5982\u679cv\u662f\u65b0\u70b9\n            tarjan(v);\n            low[x] = min(low[x],low[v]); \n        }\n        else if(book[v]) low[x]=min(low[x],dfn[v]);//low\u662f\u67d0\u70b9\u80fd\u591f\u8fbe\u5230\u7684\u70b9\u7684\u65f6\u95f4\u6233\uff08\u4eec\uff09\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n    }\n    if(low[x] == dfn[x] && ++ cnt) {//\u8dd1\u5b8c\u4e86\u6574\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \n        do{\n            vis[q[t]] = cnt;\n            book[q[t]] = false;\n            b[cnt] += a[q[t]];\n        }while(q[t--] != x);//\u4e0d\u65ad\u5f39\u51fa\u6808\u5e76\u8fdb\u884c\u67d3\u8272 \n    }\n}\nint Q[maxn];\nvoid SPFA(int x)\n{\n    memset(book,0,sizeof(book));\n    memset(dis,0,sizeof(dis));\n    int h=1,t=0;\n    Q[++t] = x;book[x] = true;\n    dis[x] = b[x];\n    while(h <= t) {\n        x = Q[h++];book[x] = false;\n        for(register int i=first[x],v;i;i=e[i].nxt) {\n            v = e[i].to;\n            if(dis[v] < dis[x] + b[v]) {\n                dis[v] = dis[x] + b[v];\n                if(!book[v]) {\n                    Q[++t] = v;\n                    book[v] = true;\n                }\n            }\n        }\n    }\n    for(int i=1;i<=pnt;i++) ans = max(ans,dis[i]);\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    for(register int i=1;i<=m;i++) {\n        scanf(\"%d%d\",&X[i],&Y[i]);\n        addedge(X[i],Y[i]);//\u5355\u5411\u5efa\u8fb9\n    }\n    cnt = 0;//\u91cd\u65b0\u5229\u7528,\u6682\u65f6\u4ee3\u8868\u65b0\u70b9\u7684\u6570\u91cf \n    for(register int i=1;i<=n;i++) {\n        if(!vis[i]) tarjan(i);//\u5bf9\u6ca1\u6709\u8fdb\u884c\u67d3\u8272\u7684\u70b9\u6267\u884c\u64cd\u4f5c\n    }\n    memset(first,0,sizeof(first));\n    memset(inn,0,sizeof(inn));\n    swap(pnt,cnt);\n    for(register int i=1,Xx,Yy;i<=m;i++) {//\u5bf9\u65b0\u56fe\u8fde\u8fb9\n        Xx =  vis[X[i]];Yy = vis[Y[i]];\n        if(Xx != Yy) {//\u5982\u679c\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6ca1\u6709\u88ab\u7f29\u5230\u4e00\u8d77 \n            addedge(Xx,Yy);//\u8fde\u8fb9\uff0c\u6709\u91cd\u8fb9\u4e5f\u65e0\u6240\u8c13\n        }\n    }\n//\u65b0\u56fe\u5efa\u597d\u4e86\uff0c\u5728\u65b0\u56fe\u4e0a\u8dd1SPFA\n    for(int i=1;i<=pnt;i++) if(!inn[i]) {\n        SPFA(i);//\u53ea\u5bf9\u67d0\u6761\u8def\u5f84\u7684\u8d77\u70b9\u8dd1 \n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1509975765,
        "uid": 17326,
        "name": "\u6797\u5fd7\u6770",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "/\\*\n\u5148tarjan\u7f29\u70b9\uff0c\u7136\u540e\u7edf\u8ba1\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5c06\u5b83\u4eecpush\u5230\u961f\u5217\u4e2d\u7528SPFA\u8dd1\u591a\u6e90\u6700\u957f\u8def\uff08\u628a\u70b9\u6743\u770b\u505a\u8ddd\u79bb\uff09\u3002\u8f93\u51fa\u8ddd\u79bb\u6700\u5927\u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n\\*/\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e4+2,MAXM=1e5+2;\nint n,m;\nint head[MAXN],edge=0;\nstruct EDGE {\n    int v,nxt;\n}e[MAXM];\nint dfn[MAXN],low[MAXN],tim=0,snt=0,bel[MAXN];\nbool ins[MAXN];\nint val[MAXN],sum[MAXN],dp[MAXN];\nstack<int> S;\nvector<int> G[MAXN];\ninline int read() {\n    int x=0,f=1;char c=getchar();\n    while (c<'0'||c>'9') {if (c=='-') f=-1;c=getchar();}\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\ninline void adde(int u,int v) {\n    e[edge].nxt=head[u],e[edge].v=v,head[u]=edge++;\n}\nvoid dfs(int p) {\n    S.push(p);\n    dfn[p]=low[p]=++tim;\n    ins[p]=true;\n    for (int i=head[p];~i;i=e[i].nxt) {\n        int v=e[i].v;\n        if (!dfn[v]) {\n            dfs(v);\n            low[p]=min(low[p],low[v]);\n        }\n        else if (ins[v]) low[p]=min(low[p],dfn[v]);\n    }\n    if (dfn[p]==low[p]) {\n        sum[++snt]=0;\n        while (!S.empty()) {\n            int t=S.top();\n            S.pop();\n            bel[t]=snt;\n            ins[t]=false;\n            sum[snt]+=val[t];\n            if (t==p) break;\n        }\n    }\n}\nint ind[MAXN],vis[MAXN];\nqueue<int> q;\ninline int SPFA() {\n    while (!q.empty()) {\n        int p=q.front();\n        q.pop();\n        vis[p]=false;\n        for (int i=0;i<G[p].size();++i) {\n            int v=G[p][i];\n            if (dp[v]<dp[p]+sum[v]) {\n                dp[v]=dp[p]+sum[v];\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v]=true;\n                }\n            }\n        }\n    }\n    int res=0;\n    for (int i=1;i<=snt;++i)\n        res=max(res,dp[i]);\n    return res;\n}\nint main() {\n    memset(ind,0,sizeof(ind));\n    memset(head,-1,sizeof(head));\n    memset(dfn,0,sizeof(dfn));\n    memset(ins,false,sizeof(ins));\n    memset(vis,false,sizeof(vis));\n    n=read(),m=read();\n    for (register int i=1;i<=n;++i) val[i]=read(),G[i].clear();\n    for (register int i=1;i<=m;++i) {\n        int u=read(),v=read();\n        adde(u,v);\n    }\n    for (register int i=1;i<=n;++i)\n        if (!dfn[i]) dfs(i);\n    for (register int p=1;p<=n;++p) {\n        dp[p]=sum[p];\n        for (int i=head[p];~i;i=e[i].nxt) {\n            int v=e[i].v;\n            if (bel[p]^bel[v]) G[bel[p]].push_back(bel[v]),++ind[bel[v]];\n        }\n    }\n    for (int i=1;i<=snt;++i)\n        if (!ind[i]) q.push(i),vis[i]=true;\n    printf(\"%d\\n\",SPFA());\n    return 0;\n}\n```",
        "postTime": 1504019486,
        "uid": 38134,
        "name": "KGV7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u770b\u7f29\u70b9\u91cc\u9762\u8fd8\u6ca1\u6709\u4e00\u4efd\u6b63\u5e38\u7684\u9898\u89e3\uff0c\u6211\u5c31\u5148\u6765\u4ea4\u4e00\u4efd\u3002\n\n\u770b\u9898\u76ee\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u5f3a\u8054\u901a\u5206\u91cf\u7f29\u70b9\u7684\u9898\uff08\u8fd9\u4e0d\u5e9f\u8bdd\uff09\u3002\u4e00\u5f00\u59cb\u770b\u7684\u65f6\u5019\uff0c\u770b\u5230\u70b9\u6743\u6709\u8d1f\uff0c\u4e8e\u662f\u5f53\u573a\u5f03\u5751\u3002\u7136\u800c\u6570\u636e\u662f\u6211\u4eec\u673a\u623f\u540c\u5b66\u51fa\u7684\uff0c\u4ed6\u544a\u8bc9\u6211\uff0c\u8fd9\u9053\u9898\u5176\u5b9e\u5e76\u6ca1\u6709\u8d1f\u6743\u70b9\uff0c\u4e0d\u7136dp\u6ca1\u6cd5\u505a......\u6240\u4ee5\u5176\u5b9e\u8fd8\u633a\u7b80\u5355\u7684\u3002\u53ea\u9700\u8981\u8dd1\u4e00\u8fb9\u7f29\u70b9\u540e\u5728\u8d70\u4e00\u904d\u62d3\u6251\u5c31\u884c\u4e86\u3002\n\n\u6211\u7528\u7684\u65b9\u6cd5\u662ftarjan\uff0c\u5e0c\u671b\u6ca1\u4e8b\u7684\u4eba\u80fd\u4f20\u4e00\u4efdkasaraju\u7684\u9898\u89e3\u6765\uff08\u867d\u7136\u4e0d\u77e5\u9053kasaraju\u80fd\u4e0d\u80fd\u505a\uff09\n\n\u4ee3\u7801\uff08\u4e2d\u95f4\u6709\u89e3\u91ca\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<iostream>\n#include<queue>\n#include<stack>\n#include<vector>\n#include<map>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\nusing namespace std;\nconst int MAXN=20000+100;\nconst int MAXM=200000+100;\ntemplate<typename T>\ninline void read(T &x)//\u8bfb\u5165\u4f18\u5316\n{\n    T s=0,f=1;\n    char k=getchar();\n    while(!isdigit(k)&&k!='-')k=getchar();\n    if(k=='-')\n    {\n        f=-1;\n        k=getchar();\n    }\n    while(isdigit(k))\n    {\n        s=(s<<3)+(s<<1)+(k^'0');\n        k=getchar();\n    }\n    x=s*f;\n}\nstruct edge\n{\n    int v,next,u;\n}p[MAXM],q[MAXM];//\u5b58\u8fb9\uff0c\u5206\u522b\u662f\u4e00\u5f00\u59cb\u8f93\u5165\u7684\u8fb9\u548c\u91cd\u65b0\u6784\u56fe\u540e\u7684\u8fb9\nint n,m,w[MAXN],head[MAXN],dfn[MAXN],low[MAXN],l,t,hed[MAXN],va[MAXN],e;//\u51e0\u4e2a\u6570\u7ec4\u5206\u522b\u5b58\u4e00\u5f00\u59cb\u7684\u6743\u3001\u521d\u59cb\u56fe\u5217\u5f0f\u524d\u5411\u661f\u7684\u5934\u2193\nint belong[MAXN];//\u4e24\u4e2atarjan\u6807\u5fd7\u6027\u6570\u7ec4\u3001\u91cd\u6784\u56fe\u5217\u5f0f\u524d\u5411\u661f\u7684\u5934\u3001\u91cd\u6784\u56fe\u7684\u70b9\u6743\u548c\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5f3a\u8054\u901a\u5206\u91cf\nbool vis[MAXN],ins[MAXN];//\u5206\u522b\u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u548c\u662f\u5426\u5728\u6808\u4e2d\nvoid add1(int u,int v)//\u6784\u521d\u59cb\u56fe\n{\n    p[++e].u=u;\n    p[e].v=v;\n    p[e].next=head[u];\n    head[u]=e;\n}\nint poi[MAXN];//\u6808\u6ce8\u610f\u4e0d\u8981\u7528stl\u7684\uff0c\u4f1are\nvoid tarjan(int u)//tarjan\u6c42\u5f3a\u8054\u901a\u5206\u91cf\n{\n    dfn[u]=low[u]=++e;//\u8bb0\u5f55dfs\u5e8f\n    int v=head[u];\n    poi[++t]=u;//\u5165\u6808\n    ins[u]=true;//\u6807\u8bb0\n    while(v)\n    {\n        if(!vis[p[v].v])//\u5982\u679c\u6ca1\u8bbf\u95ee\u8fc7\u5219\u8bbf\u95ee\n        {\n            vis[p[v].v]=true;\n            tarjan(p[v].v);\n            low[u]=min(low[u],low[p[v].v]);//\u6c42\u5f97u\u7684\u5b50\u6811\u4e2d\u8282\u70b9\u6240\u80fd\u8fde\u63a5\u7684dfs\u5e8f\u6700\u5c0f\u7684\u8282\u70b9\uff08low\u6570\u7ec4\u7684\u4f5c\u7528\uff09\n        }\n        else if(ins[p[v].v])low[u]=min(low[u],dfn[p[v].v]);//\u5982\u679c\u5bf9\u5e94\u8282\u70b9\u5728\u6808\u4e2d\uff0c\u5219\u51fa\u73b0\u73af\uff0c\u66f4\u65b0low\n        v=p[v].next;\n    }\n    if(dfn[u]==low[u])//\u5982\u679c\u8be5\u70b9\u7684\u5b50\u6811\u65e0\u6cd5\u8fde\u63a5\u5230dfs\u5e8f\u6bd4\u8be5\u70b9dfs\u5e8f\u66f4\u5c0f\u7684\u8282\u70b9\uff0c\u5219\u8be5\u70b9\u5b50\u6811\u7684\u6574\u4f53\u6784\u6210\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\n    {\n        belong[u]=++l;//\u8bb0\u5f55\u5f3a\u8054\u901a\u5206\u91cf\u5e8f\n        va[l]+=w[u];//\u52a0\u4e0a\u6743\u503c\n        ins[u]=false;//\u51fa\u6808\n        while(poi[t]!=u)//\u5c06\u6808\u4e2du\u7684\u5b50\u6811\u90e8\u5206\u5168\u90e8\u51fa\u6808\u5e76\u6807\u8bb0\u5bf9\u5e94\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u7ed9\u5f3a\u8054\u901a\u5206\u91cf\u7684\u6574\u4f53\u6743\u503c\u52a0\u4e0a\u8be5\u70b9\u6743\u503c\n        {\n            belong[poi[t]]=l;\n            va[l]+=w[poi[t]];\n            ins[poi[t--]]=false;\n        }\n        --t;//\u8bb0\u5f97u\u4e5f\u8981\u51fa\u6808\n    }\n}\nint in[MAXN],ans,got[MAXN];//\u5206\u522b\u8bb0\u5f55\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\u5165\u5ea6\u3001\u7b54\u6848\u3001\u62b5\u8fbe\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u53ef\u5f97\u7684\u6700\u5927\u6743\u503c\nvoid add2(int u,int v)//\u91cd\u6784\u56fe\n{\n    q[++e].v=v;\n    q[e].next=hed[u];\n    hed[u]=e;\n}\nqueue<int>G;//\u5077\u61d2\u6253stl\uff0c\u5176\u5b9e\u6700\u597d\u624b\u6253\uff0c\u4e0d\u7136\u4e0e\u4e0a\u9762\u90a3\u4e2a\u6808\u4e00\u6837......\nvoid dp(void)//\u8bf4\u662fdp\u5176\u5b9e\u6838\u5fc3\u662f\u6309\u62d3\u6251\u5e8f\u904d\u5386\n{\n    while(!G.empty())\n    {\n        int u=G.front(),v=hed[u];\n        G.pop();\n        while(v)\n        {\n            got[q[v].v]=max(got[q[v].v],got[u]+va[q[v].v]);//\u7b80\u5355\u7684dp\u65b9\u7a0b\uff1agot[i]=max(got[j]+w[i])(\u5b58\u5728\u8fb9(j,i))\n            ans=max(ans,got[q[v].v]);\n            --in[q[v].v];//\u5165\u5ea6\u51cf1\n            if(!in[q[v].v])G.push(q[v].v);//\u82e5\u5165\u5ea6\u51cf\u4e3a0\uff0c\u5219\u5c06\u8be5\u70b9\u5165\u961f\u3002\u8fd9\u6837\u5165\u961f\u53ef\u4ee5\u7701\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u5165\u961f1\u6b21\u3002\n            v=q[v].next;\n        }\n    }\n}\nint main()\n{\n    read(n);\n    read(m);\n    int i,u,v,z;\n    For(i,1,n)read(w[i]);\n    For(i,1,m)//\u6784\u56fe\n    {\n        read(u);\n        read(v);\n        add1(u,v);\n    }\n    For(i,1,n)if(!vis[i])//\u4e00\u6b21\u6b21\u8dd1tarjan\u3002\u6ce8\u610f\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\n    {\n        e=0;\n        vis[i]=true;\n        tarjan(i);\n    }\n    e=0;\n    For(i,1,m)if(belong[p[i].u]!=belong[p[i].v])//\u91cd\u6784\u56fe\n    {\n        add2(belong[p[i].u],belong[p[i].v]);\n        ++in[belong[p[i].v]];\n    }\n    For(i,1,l)if(in[i]==0)//\u8bb0\u5f55\u5e94\u5165\u961f\u70b9\uff08\u5373\u5165\u5ea6\u4e3a0\u7684\u70b9\uff09\n    {\n        G.push(i);\n        got[i]+=va[i];\n        ans=max(ans,va[i]);//\u6ce8\u610f\u8fd9\u91cc\u3002\u5982\u679c\u6700\u5927\u7b54\u6848\u4e2d\u53ea\u67091\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u5219\u4e0d\u52a0\u8fd9\u4e00\u884c\u7684\u8bdd\u5c31\u4f1awa\u3002\u5176\u5b9e\u6837\u4f8b\u5c31\u662f\u8fd9\u6837\u3002\n    }\n    dp();//\u53eb\u62d3\u6251\u5e94\u8be5\u4f1a\u66f4\u597d\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1500773326,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u6839\u636e\u8ba8\u8bba\u91cc\u7684\u8bdd\uff0c\u6211\u5e94\u8be5\u662f\u5bf9\u4e86\u3002(\u5e0c\u671b\u6709\u7ba1\u7406\u5458\u5bf9\u6b64\u9898\u6570\u636e\u505a\u51fa\u89e3\u91ca\u6216\u4fee\u6539)\n\ntarjan\u6a21\u677f\n\n\n```cpp\n#include<bits/stdc++.h>\n\nvoid chmin(int &x,int y)\n{\n    if (x>y) x=y;\n}\nvoid chmax(int &x,int y)\n{\n    if (x<y) x=y;\n}\n\nconst int p=100000+10;\nint i,x,y;\nint w[p],t[p];\nint l[p*10*2][2];\n\nint num;\nint qiang[p];//\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\nstruct fen\n{\n  int t,f,s;\n};\nfen q[p];\n\nint dfn[p],low[p],stack[p];//dfn \u8bbf\u95ee\u7684\u65f6\u95f4,low \u6700\u65e9\u7684\u53ef\u901a\u5230\u7684\u65f6\u95f4,stack \u6808\nbool ing[p];//\u662f\u5426\u5728\u6808\u4e2d\nvoid dfs(int u)\n{\n    low[u]=dfn[u]=++x;//x\u662f\u5f53\u524d\u7684\u65f6\u95f4\n    stack[++y]=u;ing[u]=1;//y\u662f\u6808\u4e2d\u7684\u4e2a\u6570\n    \n    int v;\n    for (int i=t[u];i;i=l[i][1])\n      if (!dfn[(v=l[i][0])]) \n      {\n          dfs(v);\n          chmin(low[u],low[v]);\n      }  \n      else \n      if (ing[v]) chmin(low[u],dfn[v]);//\u4e0d\u5728\u6808\u4e2d\u7684v\u4e00\u5b9a\u5230\u4e0d\u4e86u,\u6240\u4ee5\u4e0d\u80fd\u8ba9v\u5f71\u54cdu\n    \n    if (low[u]==dfn[u])\n    {\n        qiang[u]=++num;ing[u]=0;\n        while ( (v=stack[y--])!=u )\n        {\n            qiang[v]=num;ing[v]=0;\n        }\n    }\n}\n\nint f(int x)\n{\n    if (!q[x].f)\n    {\n        for (int i=q[x].t;i;i=l[i][1])\n         chmax(q[x].f,f(l[i][0]));\n        q[x].f+=q[x].s;\n    }\n    return q[x].f;\n}\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    \n    int n,m,i;\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;++i) scanf(\"%d\",&w[i]);\n    for (i=1;i<=m;++i)\n    {\n      scanf(\"%d%d\",&x,&y);\n      l[i][1]=t[x];t[x]=i;l[i][0]=y;  \n    }\n    \n    x=y=0;\n    for (i=1;i<=n;++i)//\u5168\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u6240\u4ee5\u90fd\u8981\u5c1d\u8bd5\n    if (!dfn[i])\n     dfs(i);\n    \n    //\u6784\u9020q\u4e4b\u95f4\u7684\u65b0\u56fe\uff0c\u5f97\u5230\u6bcf\u4e2aq\u7684s:\u8be5\u5206\u91cf\u7684\u70b9\u6743\u548c \n    int now,v;\n    for (x=1;x<=n;++x)\n    {\n        now=qiang[x];\n        q[now].s+=w[x];\n        for (i=t[x];i;i=l[i][1])\n        if ( (v=qiang[l[i][0]])!=now )\n        {\n          l[++m][1]=q[now].t;q[now].t=m;l[m][0]=v;\n        }\n    }\n\n    //\u4e4b\u540e\u5c31\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\n    int ans=0;\n    for (i=1;i<=num;++i) chmax(ans,f(i));\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1478672989,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u8fd9\u4e2a\u9898\u76ee\u7684\u610f\u601d\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\u601d\u8def\uff1a\u8dd1\u4e00\u8fb9\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u677f\uff0c\u7136\u540e\u5f00\u59cbdp\uff0c\u6216\u8005\u8bf4\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\u4ee3\u7801\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u4e0d\u7d2f\u8d58\u53d9\u8ff0\u4e86\u3002\u4e0a\u4ee3\u7801\uff1a\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 10005\n#define maxnode 1000005\n#define sigma_size 26\n#define md 12345678\n#define INF 0x3f3f3f3f\n#define pii pair<int,int>\nusing namespace std;\n\nint n,m;\nstruct Edge\n{\n    int from,to;\n    Edge(int from=0,int to=0):from(from),to(to){};\n};\nvector<Edge> edges;\nvector<int> G[MAXN];\nvector<int> mp[MAXN];\nstack<int> S;\nint sccno[MAXN],lowlink[MAXN],pre[MAXN],val[MAXN],tg[MAXN];\nint dfs_clock,scc_cnt,dp[MAXN];                     //dp\u6570\u7ec4\u7528\u6765\u8868\u793a\u6bcf\u4e2a\u7f29\u70b9\u540e\u7684\u5b50\u7ed3\u6784\u6700\u5927\u4ef7\u503c\n\nvoid dfs(int u)                                                     //\u627e\u5f3a\u8fde\u901a\u5206\u91cf\n{\n    pre[u]=lowlink[u]=++dfs_clock;\n    S.push(u);\n    for(int i=0;i<G[u].size();i++)\n    {\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])\n        {\n            dfs(v);\n            lowlink[u]=min(lowlink[u],lowlink[v]);\n        }\n        else if(!sccno[v])\n        {\n            lowlink[u]=min(lowlink[u],pre[v]);\n        }\n    }\n    if(lowlink[u]==pre[u])                                      //\u8bb0\u5f55\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5f52\u5c5e\n    {\n        scc_cnt++;                                                       //\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u7f16\u53f7\n        for(;;)\n        {\n            int x=S.top();\n            S.pop();\n            sccno[x]=scc_cnt;\n            if(x==u)\n                break;\n        }\n    }\n}\n\nvoid Find_scc(int n)                     //\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e3b\u7a0b\u5e8f\n{\n    dfs_clock=scc_cnt=0;\n    memset(sccno,0,sizeof(sccno));\n    memset(pre,0,sizeof(pre));\n    for(int i=1;i<=n;i++)\n        if(!pre[i])\n          dfs(i);\n}\n\nint tree_dfs(int u)                                   //\u6267\u884c\u8bb0\u5fc6\u5316\u641c\u7d22\n{\n    if(dp[u]!=-1)                                          //\u4e0d\u4e3a-1\u8868\u793a\u8be5\u8282\u70b9\u5df2\u7ecf\u88ab\u641c\u7d22\u8fc7\n        return dp[u];\n    if(mp[u].size()==0)                             //\u662f\u5b50\u8282\u70b9\u5c31\u76f4\u63a5\u8fd4\u56de\n        return dp[u]=tg[u];\n    int maxn=0;                                            //\u627e\u513f\u5b50\u8282\u70b9\u7684\u6700\u5927\u503c\n    for(int i=0;i<mp[u].size();i++)\n    {\n        int v=mp[u][i];\n        maxn=max(maxn,tree_dfs(v));\n    }\n    return dp[u]=maxn+tg[u];                //\u513f\u5b50\u4e2d\u7684\u6700\u5927\u503c\u52a0\u4e0a\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u5c31\u662f\u8be5\u8282\u70b9\u7684\u4ef7\u503c\n}\n\nvoid tarjain()\n{\n    memset(dp,-1,sizeof(dp));\n    Find_scc(n);\n    for(int i=1;i<=n;i++)\n        tg[sccno[i]]+=val[i];                              //\u8ba1\u7b97\u51fa\u7f29\u70b9\u4ee5\u540e\u7684\u4ef7\u503c\n    for(int i=0;i<m;i++)                              //\u91cd\u65b0\u6784\u56fe\n    {\n        Edge &e=edges[i];\n        int xx=sccno[e.from];\n        int yy=sccno[e.to];\n        if(xx!=yy)                                               //\u7531from\u6307\u5411to\n            mp[xx].push_back(yy);\n    }\n    int maxn=0;                                              //\u627e\u5230\u6700\u5927\u503c\n    for(int i=1;i<=scc_cnt;i++)\n    {\n        maxn=max(maxn,tree_dfs(i));         //\u641c\u7d22\n    }\n    printf(\"%d\\n\",maxn);\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&val[i]);\n    int u,v;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&u,&v);\n        edges.push_back({u,v});\n        int mm=edges.size();\n        G[u].push_back(mm-1);\n    }\n    tarjain();\n    return 0;\n}\n\n```\n",
        "postTime": 1573474680,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "# \u4ec0\u4e48\u662f\u5f3a\u8fde\u901a\u5206\u91cf\n\u6211\u4eec\u628a\u4e00\u4e2a\u56fe\u4e2d\u5982\u679c\u4efb\u4e00\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u70b9\u5219\u79f0\u8fd9\u4e2a\u56fe\u65f6\u4e00\u4e2a\u8054\u901a\u5206\u91cf\uff0c\u5f53\u8fd9\u4e2a\u8054\u901a\u5206\u91cf\u6700\u5927\u65f6\uff0c\u4fbf\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n### \u5982\u4f55\u5904\u7406\u8fd9\u9053\u9898\uff1f\n\u9047\u5230\u8fd9\u79cd\u6709\u73af\u7684\u9898\u76ee\u663e\u7136\u5224\u65ad\u91cd\u590d\u8d70\u8def\u65f6\u5f88\u9ebb\u70e6\u7684\uff0c\u6211\u4eec\u5f88\u660e\u663e\u53ef\u4ee5\u53d1\u73b0\u5f53\u51e0\u4e2a\u70b9\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\u65f6\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u70b9\u6765\u5904\u7406\uff0c\u56e0\u4e3a\u4ece\u8fd9\u4e2a\u56fe\u7684\u4efb\u4e00\u70b9\u51fa\u53d1\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5176\u4ed6\u7684\u70b9\uff0c\u4e14\u6743\u503c\u53ef\u4ee5\u7d2f\u52a0\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u6765\u5224\u65ad\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n### \u89e3\u9501tarjan\u5965\u4e49\u3002\u3002\n\u9996\u5148\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4dfn,low\uff0cdfn[i]\u662fi\u70b9\u7684\u8fdb\u5165\u65f6\u95f4\uff0clow[i]\u662f\u4ecei\u70b9\u51fa\u53d1\uff0c\u6240\u80fd\u8bbf\u95ee\u5230\u7684\u6700\u65e9\u7684\u8fdb\u5165\u65f6\u95f4\uff0c\u8fd9\u5c31\u53ef\u4ee5\u8868\u793a\u51fa\u5728\u6df1\u641c\u65f6\u662f\u5426\u6709\u73af\u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u600e\u4e48\u6765\u6c42low\u6570\u7ec4\u5462\uff1f \u5bf9\u4e8e\u4e00\u6761\u8fb9(u,v),\u5982\u679cv\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u90a3\u4e48\u7ee7\u7eed\u8bbf\u95eev\u8282\u70b9\uff0c\u6b64\u65f6low[u]=min(low[v],low[u]);\u8fd9\u662f\u56e0\u4e3a\u53ef\u80fd\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\u4f1a\u56de\u6eaf\u5230\u4ed6\u4eec\u7684\u7956\u5148\uff1b\n\n\u7136\u540e\u5982\u679cvis[v]==1\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7flow[u]=min(low[u],dfn[v]);\u66f4\u65b0low\u53ef\u4ee5\u56de\u6eaf\u7684\u6700\u5c0f\u503c\uff1b\n\n\u7136\u540e\u8bb0\u4f4f\u7528\u4e00\u4e2a\u6808\u6765\u5b58\u8d2e\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\n\n\u6700\u540e \n\u653e\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint to,from;\n\tint next;\n}a1[100001],a2[100001];\nint maxn,cnt,cnt1,n,m,head[10001],h[10001],p[10001];\nint stac[10001],top,id,aa[10001],f[10001];\nint dfn[10001],low[10001],vis[10001],sd[10001];//\u7801\u98ce\u6709\u70b9\u4e11\nvoid add(int a,int b)\n{\n\ta1[++cnt].to=b;\n\ta1[cnt].from=a;\n\ta1[cnt].next=head[a];\n\thead[a]=cnt;\n}\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++id;//\u521d\u59cb\u6807\u8bb0\n\tvis[u]=1;\n\tstac[++top]=u;//\u538b\u5165\u6808\u4e2d\u7f29\u70b9\n\tfor(int i=head[u];i;i=a1[i].next)\n\t{\n\t\tif(!dfn[a1[i].to])\n\t\t{\n\t\t\ttarjan(a1[i].to);//\u5982\u679c\u6ca1\u88ab\u8bbf\u95ee\u8fc7\n\t\t\tlow[u]=min(low[u],low[a1[i].to]);\n\t\t}\n\t\telse if(vis[a1[i].to])//\u5982\u679c\u5df2\u88ab\u8bbf\u95ee\u8fc7\n\t\tlow[u]=min(low[u],dfn[a1[i].to]);\n\t}\n\tif(dfn[u]==low[u])//\u5f53\u5df2\u7ecf\u627e\u5230\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\n\t{\n\t\tint y;\n\t\twhile(1)\n\t\t{\n\t\t\ty=stac[top--];//\u5c06\u6808\u4e2d\u503c\u53d6\u51fa\u7f29\u6210\u4e00\u4e2a\u70b9\n\t\t\tsd[y]=u;\n\t\t\tvis[y]=0;//\u6807\u8bb0\u4e3a0\n\t\t\tif(u==y) break;\n\t\t\tp[u]+=p[y];//\u8f6c\u79fb\u6743\u503c\n\t\t } \n\t}\n}\nint dfs(int k)\n{\n\tif(f[k]) return f[k];\n\tint ans=0;\n\tfor(int i=h[k];i;i=a2[i].next)\n\t{\n\t\tans=max(ans,dfs(a2[i].to));\n\t}\n\treturn f[k]=ans+p[k];\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\tcin>>p[i];\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\tadd(a,b);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(!dfn[i]) tarjan(i); //\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u70b9\u5355\u72ec\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u626b\u4e00\u904d\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=sd[a1[i].from],y=sd[a1[i].to];\n\t\tif(x!=y)//\u5b58\u5165\u65b0\u7684\u90bb\u63a5\u8868\u4e2d\n\t\t{\n\t\t\ta2[++cnt1].to=y;\n\t\t\ta2[cnt1].from=x;\n\t\t\ta2[cnt1].next=h[x];\n\t\t\th[x]=cnt1; \n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!f[sd[i]])\n\t\tmaxn=max(maxn,dfs(sd[i]));//\u8bb0\u5fc6\u5316\u641c\u7d22\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u5427\u3002\u3002\n\t}\n\tcout<<maxn;\n\treturn 1;//\u9632\u4f2a\u6807\u8bb0\n}\n```\n\u540e\u8bb0\uff1a\n\u5982\u679c\u60f3\u5b66\u4e60\u5272\u70b9\u7684\u77e5\u8bc6\u53ef\u4ee5\u770b\u6211\u7684\u53e6\u4e00\u7bc7\u535a\u5ba2\uff1a[blog](https://www.luogu.org/blog/zqt/)\n\n\u770b\u4e0d\u61c2\u7684\u8bdd~~\u5b9e\u5c5e\u6b63\u5e38\u60c5\u51b5\uff0c\u56e0\u4e3a\u6211\u83dc\u554aQAQ\u3002~~",
        "postTime": 1571225778,
        "uid": 93010,
        "name": "\u6674\u5929_",
        "ccfLevel": 0,
        "title": "\u7f29\u70b9"
    },
    {
        "content": "\u7ecf\u5178\u7684\u7f29\u70b9\u6a21\u677f  \n\u5728\u56fe\u4e0adp\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u603b\u662f\u6bd4\u9012\u63a8\u597d\u7528   \n\u5b66\u4f1a\u4e86\u8fd9\u4e2a\uff0c\u5c31\u6253\u4e0b\u4e86\u7f29\u70b9\u7684\u57fa\u7840    \n\u6ce8\u610f\u7f29\u70b9\u65f6\u5efa\u51fa\u7684\u65b0\u56fe\u4e0d\u8981\u72af\u53d8\u91cf\u6df7\u7528\u7684\u9519\u8bef  \n```cpp\n#include<bits/stdc++.h> \nusing namespace std;\ninline int read(){\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t\tx=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn x;\n}\nstruct Edge{\n\tint u,v,nxt;\n}e[200010],a[200010];\nint head[10010],cnt;\ninline void add(int u,int v){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nint head_[10010],cnt_;\ninline void add_(int u,int v){\n\ta[++cnt_].u=u;\n\ta[cnt_].v=v;\n\ta[cnt_].nxt=head_[u];\n\thead_[u]=cnt_;\n}\nint point[10010],dfn[10010],low[10010],tim,s[10010],top,vis[10010];\nint scc[10010],num,siz[10010];\nint value[10010],f[10010];\nvoid tarjan(int u){//\u677f\u5b50 \n\tdfn[u]=low[u]=++tim;\n\tvis[u]=1;s[++top]=u;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(vis[v])\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]){\n\t\t++num;\n\t\twhile(1){\n\t\t\tint t=s[top--];\n\t\t\tvis[t]=0;scc[t]=num;\n\t\t\tvalue[num]+=point[t];//\u6ce8\u610f\u6bcf\u4e2ascc\u7684\u70b9\u6743\u8981\u5728\u6b64\u5904\u66f4\u65b0,\u653e\u5230\u4e3b\u51fd\u6570\u4f1a\u51fa\u9519 \n\t\t\tif(t==u)break;\n\t\t}\n\t}\n}\nvoid dfs(int u){//\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u7528\u53cd\u5411\u5efa\u8fb9 \n\tif(f[u])return;\n\tf[u]=value[u];\n\tint maxx=0;\n\tfor(int i=head_[u];i;i=a[i].nxt){\n\t\tint v=a[i].v;\n\t\tif(!f[v])dfs(v);\n\t\tmaxx=max(maxx,f[v]);\n\t}\n\tf[u]+=maxx;\n}\nint main(){\n\tint n,m;\n\tn=read();m=read();\n\tfor(int i=1;i<=n;++i)point[i]=read();\n\tfor(int i=1;i<=m;++i){\n\t\tint u,v;\n\t\tu=read();v=read();\n\t\tadd(u,v);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i);\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=m;++i){\n\t\tint u=e[i].u,v=e[i].v;\n\t\tif(scc[u]!=scc[v]) add_(scc[u],scc[v]);//\u5efa\u65b0\u56fe \n\t}\n\tfor(int i=1;i<=num;++i)\n\t\tif(!f[i])dfs(i);//\u6c42\u6700\u957f\u8def \n\tint ans=0;\n\tfor(int i=1;i<=num;++i)\n\t\tans=max(ans,f[i]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1566359348,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "P3387 SCC-1"
    },
    {
        "content": "\u4f5c\u4e3a\u6a21\u677f\u9898\uff0c\u8fd9\u9053\u9898\u7684\u9898\u89e3\u8fd8\u771f\u7684\u6709\u70b9\u591a\u8036\uff0c\u4f46\u8fd9\u9053\u9898\u5361\u4e86\u6211\u8db3\u8db3\u4e00\u5929\uff0c\u6211\u8ba4\u4e3a\u4e0d\u5199\u4e00\u7bc7\u9898\u89e3\u96be\u89e3\u6211\u5fc3\u5934\u4e4b\u6068\uff0c\u5e0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u53ef\u4ee5\u8ba9\u6211\u901a\u8fc7\n\n\u8fd9\u9053\u9898\u9898\u89e3\u4e2d\u6709\u7684\u5927\u4f6c\u662f\u7528dp\u7b97\u6cd5\u6765\u6c42\u7f29\u70b9\u540e\u7684\u6700\u5927\u70b9\u6743\u503c\u4e4b\u548c\n\n\u800c\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u5c31\u53ea\u4f1a\u7528Dijkstra\u7b97\u6cd5\u6765\u8dd1\u51e0\u6b21\u6700\u957f\u8def\u4e86\n\n\u5982\u679c\u5927\u5bb6\u60f3\u8981\u5b66\u4e60\u57fa\u672c\u7684tarjan\u6a21\u677f\uff0c\u8bf7\u770b[\u8fd9\u9053\u9898](https://www.luogu.org/problem/P2863)\u66f4\u9002\u5408\u521d\u5b66\u8005\n\n\u518d\u63a8\u8350\u7ed9\u5927\u5bb6\u4e00\u7bc7[\u6587\u7ae0](https://blog.csdn.net/qq_34374664/article/details/77488976)\uff0c\u91cc\u9762\u8bb2\u7684\u5f88\u8be6\u7ec6\n\n\u89e3\u91ca\u5c31\u90fd\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\u5427\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010;\nint n,m,a[N],dfn[N],low[N],num,head[N],cnt,vis[N],tot,sum[N],bj[N],head2[N],dis[N];\n//bj[]:\u6807\u8bb0\u8be5\u8282\u70b9\u5c5e\u4e8e\u7b2c\u51e0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf,sum[]:\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u603b\u548c\n//dfn,low,vis:tarjan\u6a21\u677f   dis[]:Dijkstra\u6a21\u677f \nstruct Edge{\n\tint from,to,next;\n}edge[N],bian[N];\n//edge[]:\u5b58\u6700\u521d\u7684\u8fb9   bian[]:\u5b58\u7f29\u70b9\u540e\u7684\u8fb9 \ninline void add(int from,int to){\n\tnum++;\n\tedge[num].to=to;\n\tedge[num].next=head[from];\n\thead[from]=num;\n}\n//\u57fa\u672c\u7684\u524d\u5411\u661f\u5b58\u8fb9 \nstack<int>s;\t//\u5efa\u6808 \ninline void tarjan(int x){\t//\u8fd9\u4e0b\u9762\u5c31\u662f\u6211\u4e4b\u6240\u4ee5\u5361\u4e86\u4e00\u5929\u7684\u539f\u56e0\u4e86 \n\tcnt++;\t\t\t\t\t//\u4e0d\u77e5\u9053\u4e3a\u4f55\u6211\u5199\u4e00\u4e2atarjan\u6a21\u677f\u90fd\u80fd\u51fa\u7384\u5b66\u9519\u8bef \n\tdfn[x]=low[x]=cnt;\t\t//\u6240\u4ee5\u6700\u540e\u642c\u8fd0\u4e86\u6211\u4e00\u7bc7\u522b\u7684\u9898\u76ee\u7684\u4ee3\u7801\u624d\u628a\u8fd9\u9053\u9898A\u6389 \n\ts.push(x);\t\t\t\t\n\tvis[x]=1;\n\tfor(register int i=head[x];i;i=edge[i].next){\n\t\tint y=edge[i].to;\n\t\tif(dfn[y]==0){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(vis[y]==1){\n\t\t\tlow[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n\tif(low[x]==dfn[x]){\n\t\tint z;\n\t\ttot++;\n\t\twhile(s.top()!=x){\n\t\t\tz=s.top();\n\t\t\tsum[tot]+=a[z];\n\t\t\tvis[z]=0;\n\t\t\tbj[z]=tot;\n\t\t\ts.pop();\n\t\t}\n\t\tz=s.top();\n\t\tsum[tot]+=a[z];\n\t\tvis[z]=0;\n\t\tbj[z]=tot;\n\t\ts.pop();\n\t}\n\treturn;\n}\ninline void add2(int from,int to){\n\tnum++;\n\tbian[num].from=from;\n\tbian[num].to=to;\n\tbian[num].next=head2[from];\n\thead2[from]=num;\n}\ninline int dij(int x){\t//Dijkstra\u7b97\u6cd5\u6700\u957f\u8def\u6a21\u677f \n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue<pair<int,int> >q;\n\tdis[x]=sum[x];\n\tq.push(make_pair(dis[x],x));\n\twhile(!q.empty()){\n\t\tint tmp=q.top().second;\n\t\tq.pop();\n\t\tif(vis[tmp]==1)continue;\n\t\tvis[tmp]=1;\n\t\tfor(int i=head2[tmp];i;i=bian[i].next){\n\t\t\tint k=bian[i].to;\n\t\t\tif(dis[k]<dis[tmp]+sum[k]){\n\t\t\t\tdis[k]=dis[tmp]+sum[k];\n\t\t\t\tq.push(make_pair(dis[k],k));\n\t\t\t}\n\t\t}\n\t}\n\tint maxn=0;\n//\u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u7ec8\u70b9\u5728\u54ea\uff0c\u6240\u4ee5\u9700\u8981\u90fd\u627e\u4e00\u904d\uff0c\u5373\u4f7f\u6700\u5927\u503c\u662f\u539f\u6765\u8dd1\u6700\u957f\u8def\u5b58\u4e0b\u6765\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb \t\n\tfor(register int i=1;i<=tot;i++)\t\n\t\tmaxn=max(maxn,dis[i]);\n\treturn maxn;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tint x,y;\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tif(dfn[i]==0)\n\t\t\ttarjan(i);\n\t}\n\tnum=0;\n\tfor(register int i=1;i<=n;i++){\t//\u7f29\u70b9\u5373\u628a\u6bcf\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u770b\u505a\u4e00\u4e2a\u70b9 \n\t\tfor(register int j=head[i];j;j=edge[j].next){//\u518d\u7528\u8fd9\u51e0\u4e2a\u70b9\u6765\u91cd\u5efa\u4e00\u5f20\u56fe\u6765\u8dd1\u6700\u957f\u8def \n\t\t\tint y=edge[j].to;\n\t\t\tif(bj[i]!=bj[y]){\n\t\t\t\tadd2(bj[i],bj[y]);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0;\n\tfor(register int i=1;i<=tot;i++){//\u7531\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u4e0d\u4e00\u5b9a\u90fd\u8fde\u901a\u6240\u4ee5\u8981\u8dd1\u591a\u6b21\u6700\u957f\u8def \n\t\tans=max(ans,dij(i));\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1565333204,
        "uid": 99247,
        "name": "\u5514\u554a\u5514",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u5927\u4f6c\u4eec\u597d\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u53c8\u6765\u53d1\u9898\u89e3\u4e86\u3002\uff08\u8fd9\u662f\u4eca\u5e74\u53d1\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff09\n\n\u5176\u5b9e\u8fd9\u9898\u6807\u9898\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u7f29\u70b9\uff01\uff01\uff01\uff01\uff01\n\u4f46\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u7f29\u70b9\u3002\n\n\u8fd9\u8fd8\u8981DP\uff01\uff01\uff01~~\u849f\u84bb\u4e00\u5f00\u59cb\u6253\u7684\u66b4\u529b~~\n\n\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5757\u90fd\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u62d3\u6251\u4e00\u4e0b\u3002\n\n\u7136\u540e\u6309\u5c42\u6570DP\u5c31\u884c\u4e86\uff01\uff01~~\u849f\u84bb\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6.......~~\n\n\u5177\u4f53\u6ce8\u610f\u4e8b\u9879\u89c1\u7a0b\u5e8f\n```cpp\n#include<bits/stdc++.h>\n#include<cctype>\n#include<vector>\n#include<map>\nusing namespace std;\ninline int read(){//\u5feb\u8bfb\n\tint x=0,w=1;\n\tchar c;\n\tc=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-'){\n\t\t\tw=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=x*10+c-48;\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\nvector<int>a[100005],sta[100005],daa[100005],bb,cengshu[100005];\nmap<long long,bool>hh;\nint ff[1000005],rudu[1000050],ll,dab[1000005],b[1000005],t,tt[1000005],h[1000005],ans,n,nn,m,i,j,k,l,s,d,f,top,r,c[1000005],ins[1000005],tmp,dfn[1000005],low[1000005],num;\nvoid tarjan(int x){//\u5c31\u662ftarjan\u6c42\u5f3a\u8fde\u901a\u5757\n\tdfn[x]=low[x]=++num;\n\tins[x]=1;\n\tc[++top]=x;\n\tfor(int i=0;i<a[x].size();i++){\n\t\tint y=a[x][i];\n\t\tif(dfn[y]==0){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse\n\t\tif(ins[y]==1){\n\t\t\tlow[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n\tif(low[x]==dfn[x]){\n\t\tint y;\n\t\tt++;\n\t\tdo{\n\t\t\ty=c[top];\n\t\t\ttop--;\n\t\t\tins[y]=0;\n\t\t\tsta[t].push_back(y);\n\t\t\th[y]=t;\n\t\t}while(x!=y);\n\t}\n\treturn;\n}\nvoid topu(){//\u4e00\u4e2a\u62d3\u6251\u5206\u5c42\n\tmemset(rudu,0,sizeof(rudu));\n\tfor(int i=1;i<=nn;i++){\n\t\tfor(int j=0;j<daa[i].size();j++){\n\t\t\trudu[daa[i][j]]++;\n\t\t}\n\t}\n\tfor(int i=1;i<=nn;i++){\n\t\tif(rudu[i]==0){\n\t\t\tbb.push_back(i);\n\t\t}\n\t}\n\tint ss=0,cmm=0;;\n\twhile(ss<nn){\n\t\tif(bb.empty()){\n\t\t\treturn;\n\t\t}\n\t\tcmm++;\n\t\tfor(int i=0;i<bb.size();i++){\n\t\t\tcengshu[cmm].push_back(bb[i]);\n\t\t}\n\t\tl=bb.size();\n\t\tss+=l;\n\t\tfor(int i=0;i<bb.size();i++){\n\t\t\ttt[i+1]=bb[i];\t\t\t\n\t\t}\n\t\tbb.clear();\n\t\tfor(int i=1;i<=l;i++){\n\t\t\tfor(int j=0;j<daa[tt[i]].size();j++){\n\t\t\t\trudu[daa[tt[i]][j]]--;\n\t\t\t\tif(rudu[daa[tt[i]][j]]==0){\n\t\t\t\t\tbb.push_back(daa[tt[i]][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tll=cmm;\n\treturn;\n}\nint main(){\n\tfreopen(\"h.in\",\"r\",stdin);\n\tfreopen(\"h.out\",\"w\",stdout);\n\tn=read();m=read();\n\tfor(i=1;i<=n;i++){\n\t\tb[i]=read();\n\t}\n\tfor(i=1;i<=m;i++){\n\t\tf=read();\n\t\tr=read();\n\t\ta[f].push_back(r);\n\t}\n\tmemset(c,0,sizeof(c));\n\tmemset(ins,0,sizeof(ins));\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(low,0,sizeof(low));\n\tmemset(h,0,sizeof(h));\n\tnum=0;\n\ttop=0;\n\tt=0;\n\tfor(i=1;i<=n;i++){\n\t\tif(dfn[i]==0){\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\tnn=t;\n\tfor(i=1;i<=nn;i++){\n\t\tdab[i]=0;\n\t\tfor(j=0;j<sta[i].size();j++){\n\t\t\tdab[i]+=b[sta[i][j]];\n\t\t}\n\t}\n\thh.clear();\n\tint mad=10000000;\n\tfor(i=1;i<=n;i++){\n\t\tfor(j=0;j<a[i].size();j++){\n\t\t\tif(hh[h[i]*mad+h[a[i][j]]]==false&&h[i]!=h[a[i][j]]){\n\t\t\t\thh[h[i]*mad+h[a[i][j]]]=true;\n\t\t\t\tdaa[h[i]].push_back(h[a[i][j]]);\n\t\t\t}\n\t\t}\n\t}\n\tans=0;\n\t/*cout<<nn<<endl;\n\tfor(i=1;i<=nn;i++){\n\t\tcout<<i<<\" \";\n\t\tfor(j=0;j<sta[i].size();j++){\n\t\t\tcout<<sta[i][j]<<\" \";\n\t\t}\n\t\tcout<<endl;\n\t}\n\tfor(i=1;i<=nn;i++){\n\t\tfor(j=0;j<daa[i].size();j++){\n\t\t\tcout<<i<<\",\"<<daa[i][j]<<endl;\n\t\t}\n\t}*/\n\ttopu();\n\tmemset(ff,0,sizeof(ff));\n\tfor(i=0;i<cengshu[1].size();i++){\n\t\tff[cengshu[1][i]]=dab[cengshu[1][i]];\n\t}\n\tfor(i=2;i<=ll;i++){\n\t\tfor(j=0;j<cengshu[i].size();j++){\n\t\t\tfor(k=0;k<cengshu[i-1].size();k++){\n\t\t\t\tif(hh[cengshu[i-1][k]*mad+cengshu[i][j]]==true){\n\t\t\t\t\tff[cengshu[i][j]]=max(ff[cengshu[i][j]],ff[cengshu[i-1][k]]+dab[cengshu[i][j]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=nn;i++){\n\t\tans=max(ans,ff[i]);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1561896240,
        "uid": 67608,
        "name": "lihengyi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "# \u7f29\u70b9(\u6709\u5411\u56fe\u7684\u5f3a\u8054\u901a\u5206\u91cf)\u5b66\u4e60\u7b14\u8bb0\n\n### 1.\u4ec0\u4e48\u662f\u5f3a\u8fde\u901a\u5206\u91cf\uff1f\uff1a\n\n\n\n------------\n\n\u6709\u5411\u56fe\u5f3a\u8fde\u901a\u5206\u91cf:\u5728\u6709\u5411\u56feG\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u9876\u70b9vi,vj\u95f4(vi>vj)\u6709\u4e00\u6761\u4ecevi\u5230vj\u7684\u6709\u5411\u8def\u5f84\uff0c\u540c\u65f6\u8fd8\u6709\u4e00\u6761\u4ecevj\u5230vi\u7684\u6709\u5411\u8def\u5f84\uff0c\u5219\u79f0\u4e24\u4e2a\u9876\u70b9\u5f3a\u8fde\u901a(strongly connected)\u3002\u5982\u679c\u6709\u5411\u56feG\u7684\u6bcf\u4e24\u4e2a\u9876\u70b9\u90fd\u5f3a\u8fde\u901a\uff0c\u79f0G\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf(strongly connected components)\u3002\u2014\u2014\u5ea6\u5a18\n\n------------\n\u663e\u7136\u6b63\u786e\uff0c~~\u4f46\u662f\u6587\u7ec9\u7ec9\u7684\u53c8\u96be\u61c2~~\u3002\n\n\u5176\u5b9e\u5c31\u662f\u6709\u4e00\u5927\u56e2\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u90a3\u4e48\u8fd9\u4e00\u5927\u56e2\u70b9\u5c31\u662f\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u3002\n\n\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6216\u51e0\u4e2a\u73af\u62fc\u63a5\u5728\u4e00\u8d77\u3002\n\n\u5982\uff1a\n![\u7f29\u70b9](https://www.cnblogs.com/images/cnblogs_com/ljk123-de-bo-ke/1441553/o_1655789-20190411204952714-498542190.png)\n\n### 2.\u5982\u4f55\u64cd\u4f5c\uff1f\uff1a\n\n\u9996\u5148\u5bf9\u4e8e\u6574\u4e2a\u6709\u5411\u56fe\u8fdb\u884cdfs\uff0c\u82e5dfs\u6811\u4e2d\u5b58\u5728\u5b50\u6811\u6709\u5230\u8fbe\u7236\u4eb2\u8282\u70b9\uff0c\u4ece\u7236\u4eb2\u5230\u8fd9\u4e2a\u70b9\u5219\u90fd\u53ef\u4e92\u76f8\u5230\u8fbe\uff0c\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n![\u7f29\u70b9](https://www.cnblogs.com/images/cnblogs_com/ljk123-de-bo-ke/1441553/t_1655789-20190411144457085-412109554.png)\n\n\n\u5982\u4e0a\u56fe\u3002\n\n#### \u6240\u4ee5\u6211\u4eec\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5c31\u7528\u5b83\u662f\u5426\u80fd\u5230\u8fbedfs\u5e8f\u6bd4\u4ed6\u5c0f\u7684\u70b9\u3002\n\n\u4f46\u6211\u4eec\u5982\u4f55\u5c06\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u8bb0\u5f55\u5462\uff1f\n\n\u7b54\uff1a\u7528\u4e00\u4e2a\u6808\u50a8\u5b58\uff0c\u9047\u5230\u4e00\u4e2a\u4e0d\u80fd\u5230\u8fbedfs\u5e8f\u6bd4\u4ed6\u5c0f\u7684\u70b9\u7684\u70b9\uff0c\u5c31\u5c06\u6808\u91cc\u7684\u70b9\u90fd\u6807\u8bb0\u4e3a\u4e00\u4e2a\u65b0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u518d\u6e05\u7a7a\u6808\uff08\u4e00\u4e2a\u70b9\u6211\u4eec\u4e5f\u770b\u4f5c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff09\u3002\n\n\u6211\u4eec\u7528dfn\u6570\u7ec4\u8bb0\u5f55dfs\u5e8f\uff0clow\u6570\u7ec4\u8bb0\u5f55\u80fd\u5230\u8fbe\u7684\u70b9\u6700\u5c0f\u7684dfs\u7f16\u53f7\u3002\n\n#### \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u9700\u8981\u7528\u5b83\u7684\u513f\u5b50\u7684low\u6765\u66f4\u65b0\u81ea\u5df1\u7684low,\u5982\u4e0a\u56fe\u4e2d\u76842\u53f7\u70b9;\n\n\u540c\u7406\u53ef\u5f97\uff0c\u82e5\u6709\u8fde\u5411\u7956\u8f88\u7684\u8fb9\uff0c\u76f4\u63a5\u7528\u7956\u8f88\u7684dfn\u6765\u66f4\u65b0\u81ea\u5df1\u7684low\u3002\uff08\u5f53\u7136\u7528low\u6765\u66f4\u65b0\u4e5f\u4e0d\u4f1a\u9519\uff09\n\n\u8fd8\u6709\uff0c\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5df2\u7ecf\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\uff0c\u4e0d\u80fd\u7528\u5b83\u7684low\u6765\u66f4\u65b0\u8fde\u5411\u5b83\u7684\u70b9\uff01\n\n![\u7f29\u70b9](https://www.cnblogs.com/images/cnblogs_com/ljk123-de-bo-ke/1441553/o_1655789-20190411151341691-414481838.png)\n\n\u6240\u4ee5\uff0clow[5]\u4e3a5\u3002\n\n\n------------\n\n```cpp\nvoid tarjan(int u)//\u5f53\u524d\u70b9\n{\n    low[u]=dfn[u]=++deep; x[++top]=u; v[u]=1;\n    for(int i=head1[u];i;i=e[i].nxt)\n    {\n        if(!dfn[e[i].to]) tarjan(e[i].to),low[u]=min(low[u],low[e[i].to]);//\u8fde\u5411\u513f\u5b50\u7684\u8fb9\n        else if(v[e[i].to]) low[u]=min(low[u],dfn[e[i].to]);//\u8fde\u5411\u7236\u4eb2\u4e14\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n    }\n   if(dfn[u]==low[u])//\u627e\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n   {\n        num[u]=++tot; v[u]=0;\n        while(x[top]!=u) v[x[top]]=0,num[x[top]]=tot,--top;\n        --top;\n     }\n}\nint main()\n{\n    for(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);\n    return 0;\n}\n```\n\n\n------------\n\n\u6700\u540e\uff0c\u6a21\u62df\u4e00\u4e2a\u56fe\u7684tarjan\u8fc7\u7a0b\uff1a\n\n\n![\u7f29\u70b9](https://www.cnblogs.com/images/cnblogs_com/ljk123-de-bo-ke/1441553/o_1655789-20190411152306047-552160992.png)\n \n\n\u4e00\u5171\u6709\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf:1.{1,2,3,4,5,6,7,8,9}\u3002\n\nu=1:dfn[1]=1,++top,x[1]=1,tarjan(8);\n\nu=8:dfn[8]=2,++top,x[2]=8,tarjan(9);\n\nu=9:dfn[9]=3,++top,x[3]=9,low[9]=1;\n\nu=8:low[8]=1;\n\nu=1:tarjan(2);\n\nu=2:dfn[2]=4,++top,x[4]=2,tarjan(3);\n\nu=3:dfn[3]=5,++top,x[5]=3,tarjan(4);\n\nu=4:dfn[4]=6,++top,x[6]=4,low[4]=low[2]=4;\n\nu=3:low[3]=low[4]=4;\n\nu=2:low[2]=4,tarjan(5);\n\nu=5:dfn[5]=7,++top,x[7]=5,tarjan(6);\n\nu=6:dfn[6]=8,++top,x[8]=6,tarjan(7);\n\nu=7:dfn[7]=9,++top,x[9]=7,low[7]=1;\n\nu=6:low[6]=1;\n\nu=5:low[5]=1;\n\nu=2:low[2]=1;\n\nu=1:dfn[1]==low[1]=1\u2192++tot,\u5c06x[1]\u5230x[9]\u6807\u8bb0\u4e3atot=1,top=0;\n\n\u7ed3\u675f\u3002\n\n### 3.\u7f29\u70b9\uff1a\n\n\u5c06\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u70b9\uff0c\u5c06\u6240\u6709\u8fde\u5411\u5f3a\u8054\u901a\u5206\u91cf\u5185\u7684\u70b9\u8fde\u5411\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u3002\n\n\n------------\n\n```cpp\nint main()\n{\n    n=read(); m=read();\n    for(int i=1;i<=n;++i) w1[i]=read();\n    for(re int i=1;i<=m;++i) t1=read(),t2=read(),add(t1,t2,e,head1);\n    cnt=0;\n    for(int i=1;i<=n;++i)\n    {\n        w2[num[i]]+=w1[i];\n        for(int j=head1[i];j;j=e[j].nxt) if(num[i]!=num[e[j].to]) add(num[i],num[e[j].to],f,head2),++rd[num[e[j].to]];\n    }\n    return 0;\n}\n```\n\n\n------------\n\u6d1b\u8c37P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9\n\n\u9898\u89e3:\n\n\u5f53\u8fdb\u5165\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u80af\u5b9a\u5c06\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u8d70\u4e00\u904d\uff0c\u6240\u4ee5\u7f29\u70b9\uff0c\u53d8\u4e3a\u4e00\u4e2aDAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\uff0c\u7136\u540e\u6309\u62d3\u6251\u5e8fdp\uff0c\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u4e3a\u6240\u6709\u80fd\u5230\u8fbe\u5b83\u7684\u70b9\u7684\u7b54\u6848\u7684\u6700\u5927\u503c+\u81ea\u5df1\u7684\u70b9\u503c\uff0c\u8f93\u51fa\u6240\u6709\u70b9\u4e2d\u7b54\u6848\u7684\u6700\u5927\u503c\u3002\n\n\u7528\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u66f4\u65b0\u5b83\u6240\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u7684\u7b54\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\nusing namespace std;\nconst int N=10006,M=100006;\nint n,m,t1,t2,w1[N],w2[N],num[N],cnt=0,head1[N],t,tot=0,head2[N],x[N],dfn[N],low[N],ans[N],maxa=-1,rd[N],deep=0,top=0,v[N];\nstruct edge\n{\n\tint to,nxt;\n}e[M],f[M];\ninline void add(int u,int v,edge a[],int head[]){a[++cnt].to=v,a[cnt].nxt=head[u],head[u]=cnt;}\ninline int read()\n{\n\tint T=0,F=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') F=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') T=(T<<3)+(T<<1)+(ch-48),ch=getchar();\n\treturn F*T;\n}\nvoid tarjan(int u)\n{\n\tlow[u]=dfn[u]=++deep; x[++top]=u; v[u]=1;\n\tfor(int i=head1[u];i;i=e[i].nxt)\n\t{\n\t\tif(!dfn[e[i].to]) tarjan(e[i].to),low[u]=min(low[u],low[e[i].to]);\n\t\telse if(v[e[i].to]) low[u]=min(low[u],dfn[e[i].to]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tnum[u]=++tot; v[u]=0;\n\t\twhile(x[top]!=u) v[x[top]]=0,num[x[top]]=tot,--top;\n\t\t--top;\n\t}\n}\nvoid tppx()\n{\n    queue<int> q; cnt=0;\n\tfor(int i=1;i<=tot;++i) if(!rd[i]) x[++cnt]=i,q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint tmp=q.front(); q.pop();\n\t\tfor(int i=head2[tmp];i;i=f[i].nxt)\n\t\t{\n\t\t\t--rd[f[i].to];\n\t\t\tif(!rd[f[i].to]) x[++cnt]=f[i].to,q.push(f[i].to);\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(); m=read();\n\tfor(int i=1;i<=n;++i) w1[i]=read();\n\tfor(re int i=1;i<=m;++i) t1=read(),t2=read(),add(t1,t2,e,head1);\n\tfor(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);\n\tcnt=0;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tw2[num[i]]+=w1[i];\n\t\tfor(int j=head1[i];j;j=e[j].nxt) if(num[i]!=num[e[j].to]) add(num[i],num[e[j].to],f,head2),++rd[num[e[j].to]];\n\t}\n\tmemset(x,0,sizeof(x)); tppx();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tt=x[i]; ans[t]=max(ans[t],w2[t]);\n\t\tmaxa=max(maxa,ans[t]);\n\t\tfor(int j=head2[t];j;j=f[j].nxt) ans[f[j].to]=max(ans[f[j].to],ans[t]+w2[f[j].to]);\n\t}\n\tprintf(\"%d\\n\",maxa);\n\treturn 0;\n}\n```\n\n ",
        "postTime": 1554970578,
        "uid": 44180,
        "name": "ljk123",
        "ccfLevel": 0,
        "title": "\u7f29\u70b9(\u6709\u5411\u56fe\u7684\u5f3a\u8054\u901a\u5206\u91cf)\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "\u9996\u5148\u6c42\u51fa\u56fe\u4e2d\u7684\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u628a\u6574\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u70b9\u7f29\u4e3a\u4e00\u70b9(\u6211\u5728\u5b9e\u9645\u6253\u7684\u8fc7\u7a0b\u4e2d\u628a\u8fd9\u4e9b\u70b9\u90fd\u7f29\u5230\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2ddfs\u5e8f\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9)\uff0c\u7136\u540e\u4ece\u539f\u6765\u7684\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\uff08\u8fb9\uff09\u4e2d\u627e\u5230\u8fde\u63a5\u4e0d\u540c\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u70b9\uff0c\u6b64\u5373\u4e3a\u7f29\u70b9\u540e\u7684\u65b0\u56fe\u4e2d\u7684\u8fb9\u3002\u4e4b\u540e\u4ee5\u65b0\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u6e90\u70b9SPFA\u8dd1\u6700\u957f\u8def\u5373\u53ef.\n\n\nAC\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\n\nconst int NMAXN=10001,MMAXN=100001;\nint n,m,u[MMAXN],v[MMAXN],w[MMAXN],first[MMAXN],next[MMAXN],c[NMAXN],num,dis[NMAXN],que[NMAXN<<2],ansnow,ans;\nint tot,cnt,dfn[NMAXN],low[NMAXN],stack[NMAXN],yuan[NMAXN],color[NMAXN],colortot;\nbool book[NMAXN],flag[NMAXN],used[NMAXN];\nstruct node\n{\n    int from;\n    int to;\n}a[MMAXN];//\u5b58\u50a8\u7f29\u70b9\u540e\u7684\u65b0\u56fe \n\nvoid SPFA(int s)//\u5728\u7f29\u70b9\u540e\u7684\u65b0\u56fe\u4e2d\u8dd1SPFA \n{\n    int head=1,tail=2;\n    que[head]=s,book[que[head]]=1;\n    \n    while(head<tail)\n    {\n        int x=first[que[head]];\n        while(x!=0)\n        {\n            if(dis[a[x].to]<dis[a[x].from]+c[a[x].to])\n            {\n                dis[a[x].to]=dis[a[x].from]+c[a[x].to];\n                \n                if(book[a[x].to]==0)\n                {\n                    book[a[x].to]=1;\n                    que[tail]=a[x].to;\n                    tail++;\n                }\n            }\n            x=next[x];\n        }\n        book[que[head]]=0,que[head]=0;\n        head++;\n    }\n    book[que[head]]=0,que[head]=0;\n    \n    for(int i=1;i<=colortot;i++)\tansnow=max(ansnow,dis[color[i]]);\n    //\u6c42\u51fa\u4ee5s\u4e3a\u539f\u70b9\u5728\u65b0\u56fe\u4e2d\u8dd1\u51fa\u6765\u7684\u6700\u957f\u8def\u4e2d\u7684\u6700\u957f\u8def\n}\n\nvoid tarjan(int k)\n{\n    dfn[k]=++tot;//\u7d2f\u52a0dfs\u5e8f \n    low[k]=tot;//low[i]:\u6c42\u70b9k\u6240\u80fd\u5230\u8fbe\u7684dfs\u5e8f\u6700\u5c0f\u7684\u70b9 \n    stack[++cnt]=k,flag[k]=1;//\u5c06\u70b9k\u538b\u5165\u8bb0\u5f55\u5f53\u524d\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6808\u4e2d \n    \n    int x=first[k];\n    while(x!=0)//\u904d\u5386\u70b9k\u7684\u51fa\u8fb9 \n    {\n        if(dfn[v[x]]==0)//\u5728\u641c\u7d22\u6811\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a \n        {\n            tarjan(v[x]);\n            low[k]=min(low[k],low[v[x]]);//\u7528\u70b9k\u513f\u5b50\u7684low\u503c\u66f4\u65b0\u70b9k\u7684low\u503c \n        }\n        else\n        {\n            if(flag[v[x]]==1)\n                low[k]=min(low[k],dfn[v[x]]);\n\t\t\t\t//\u6839\u636elow\u7684\u5b9a\u4e49\uff0c\u6bd4\u8f83low[k],dfn[v[x]]\u7684\u5927\u5c0f\u4ece\u800c\u66f4\u65b0low[k] \n        }\n        x=next[x];\n    }\n    \n    if(low[k]==dfn[k])\n    {\n        color[++colortot]=k;//color:\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2ddfs\u5e8f\u6700\u5c0f\u7684\u70b9 \n        while(1)\n        {\t\t\n            c[k]+=w[stack[cnt]];\n\t\t\t//\u56e0\u4e3a\u6211\u4eec\u4e4b\u540e\u8981\u628a\u4e00\u6574\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u70b9\n\t\t\t//\u6240\u4ee5\u7f29\u6210\u7684\u70b9\u7684\u70b9\u6743\u5373\u4e3a\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u6240\u6709\u70b9\u7684\u70b9\u6743\u4e4b\u548c \n            yuan[stack[cnt]]=k;//yuan[]:\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5185dfs\u5e8f\u6700\u5c0f\u7684\u70b9 \n            flag[stack[cnt]]=0;//\u5c06\u8be5\u70b9\u5f39\u51fa\u6808\u540e\u6e05\u7a7a\u6807\u8bb0  \n\t\t\tif(stack[cnt]==k)\n\t\t\t{\n\t\t\t\tcnt--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcnt--;//\u8fd9\u91cccnt\u8bb0\u5f55\u7684\u662f\u6808\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\tscanf(\"%d\",&w[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u[i],&v[i]);\n        next[i]=first[u[i]];\n        first[u[i]]=i;\n    }\n    \n    for(int i=1;i<=n;i++)\n    {\n        if(dfn[i]==0)\n            tarjan(i);//\u9632\u6b62tarjan\u56fe\u4e0d\u8fde\u901a \n    }\n\n    memset(first,0,sizeof(first));\n    memset(next,0,sizeof(next));//\u6e05\u7a7a\u539f\u56fe\u7684\u8fb9\u7684\u4fe1\u606f \n        \n    for(int i=1;i<=m;i++)\n    {\n        if(yuan[u[i]]!=yuan[v[i]])\n\t\t//\u5982\u679c\u8be5\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u70b9\u5206\u5c5e\u4e8e\u4e0d\u540c\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n\t\t//\u90a3\u4e48\u5728\u7f29\u70b9\u540e\u7684\u65b0\u56fe\u4e2d\uff0c\u8be5\u8fb9\u5e94\u8fde\u63a5\u7740\u8be5\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u70b9\u5206\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf \n        {\n            a[++num].from=yuan[u[i]];\n            a[num].to=yuan[v[i]];//\u7f29\u70b9\u540e\u7684\u56fe\u4e2d\u53ea\u5269\u4e0b\u5728\u5404\u81ea\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2ddfs\u5e8f\u6700\u5c0f\u7684\u70b9 \n            \n            next[num]=first[a[num].from];\n            first[a[num].from]=num;\n        }\n    }\n    \n    for(int i=1;i<=colortot;i++)//\u679a\u4e3ecolor\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4ee5\u4ed6\u4eec\u4e3a\u6e90\u70b9\u8dd1\u6700\u957f\u8def \n    {\n    \tansnow=0;//\u8be5\u53d8\u91cf\u8bb0\u5f55\u4ee5color[i]\u4e3a\u539f\u70b9\u5728\u65b0\u56fe\u4e2d\u8dd1\u51fa\u6765\u7684\u6700\u957f\u8def\u4e2d\u7684\u6700\u957f\u8def \n        for(int z=1;z<=colortot;z++)\tdis[color[z]]=0;//\u7f29\u70b9\u540e\u7684\u56fe\u4e2d\u53ea\u5269\u4e0b\u5728\u5404\u81ea\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2ddfs\u5e8f\u6700\u5c0f\u7684\u70b9\n    \tSPFA(color[i]);\n    \tans=max(ans,ansnow+c[color[i]]);\n    \t//ansnow+c[color[i]]-----\u522b\u5fd8\u4e86\u628a\u6e90\u70b9\u81ea\u5df1\u7684\u70b9\u6743\u52a0\u4e0a \n    }\n\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1527316574,
        "uid": 53774,
        "name": "\u5403\u74dc\u7fa4\u4f17syc",
        "ccfLevel": 0,
        "title": "P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u662f\u7528Tarjan\u7f29\u70b9\u505a\u7684\uff0c\u7136\u800c\u672c\u4eba\u5e76\u4e0d\u4f1a\u8fd9\u79cd\u7b97\u6cd5\uff0c\u7528\u7684\u662f\u53e6\u4e00\u79cd\u4e0d\u77e5\u59d3\u540d\u7684\u65b9\u6cd5\u3002\u601d\u8def\uff1a\u9996\u5148dfs\u6c42\u62d3\u6251\u6392\u5e8f\uff0c\u4e4b\u540e\u5728\u8f6c\u7f6e\u56fe\u4e0a\u4ee5\u62d3\u6251\u6392\u5e8f\u7684\u987a\u5e8fdfs\uff0c\u6bcf\u6b21\u5230\u8fbe\u7684\u70b9\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u7136\u800c\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728\u539f\u56fe\u4e0a\u9006\u5e8f\u641c\u7d22\uff09\u3002\u641c\u7d22\u540c\u65f6\u5efa\u7acb\u65b0\u56fe\uff0c\u6700\u540edp\u6c42\u89e3\u3002\n\n```cpp\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n\nusing namespace std;\n\nstruct node {\n    int aim;\n    node *next;//\u90bb\u63a5\u8868\n};\n\nint stack[50005], stack_size;//\u6808\nvoid push(int k)\n{\n    stack[stack_size++] = k;\n}\nint pop()\n{\n    stack_size--;\n    return stack[stack_size];\n}\nint top()\n{\n    return stack[stack_size - 1];\n}\n\nvoid add(node *&head, int aim)//\u90bb\u63a5\u8868\u589e\u52a0\u7ed3\u70b9\n{\n    node *p = new(node);\n    p->aim = aim;\n    p->next = NULL;\n    if (head == NULL)\n        head = p;\n    else\n    {\n        p->next = head;\n        head = p;\n    }\n}\n\nnode *head[10005], *head1[10005], *head2[10005];//\u539f\u56fe\uff0c\u8f6c\u7f6e\u56fe\uff0c\u65e0\u73af\u5206\u91cf\u56fe\nint f[10005], time, N, M;//dfs\u5b8c\u6210\u65f6\u95f4\uff0c\u65f6\u95f4\uff0c\u70b9\u6570\uff0c\u8fb9\u6570\nint N1, mark[10005];//\u65e0\u73af\u5206\u91cf\u56fe\u7ed3\u70b9\u6570\uff0c\u7ed9\u5404\u4e2a\u5206\u91cf\u56fe\u6253\u4e0a\u4e0d\u540c\u6807\u8bb0\nint w[10005], w1[10005];//\u539f\u56fe\u70b9\u6743\uff0c\u65e0\u73af\u5206\u91cf\u56fe\u70b9\u6743\n\nvoid dfs_visit(int i)\n{\n    node *p = head[i];\n    f[i] = 1;\n    while (p != NULL)\n    {\n        if (f[p->aim] == 0)\n            dfs_visit(p->aim);\n        p = p->next;\n    }\n    time++;\n    f[i] = time;//\u5176\u5b9e\u4e0d\u7528\u8bb0\u5f55\u65f6\u95f4\uff0c\u505a\u4e2a\u6807\u8bb0\u5c31\u884c\uff0c\u8fd9\u91cc\u6709\u70b9\u753b\u86c7\u6dfb\u8db3\n    push(i);\n}\n\nvoid dfs()//\u7b2c\u4e00\u6b21\u641c\u7d22\uff0c\u62d3\u6251\u6392\u5e8f\n{\n    for (int i = 1; i <= N; i++)\n        if (f[i] == 0)\n            dfs_visit(i);\n}\n\nvoid dfs_visit1(int i)\n{\n    mark[i] = N1;//\u5728\u8f6c\u7f6e\u56fe\u4e0a\u641c\u7d22\n    node *p = head1[i];\n    while (p != NULL)\n    {\n        if (mark[p->aim] == 0)\n            dfs_visit1(p->aim);\n        else if (mark[p->aim] != N1)\n            add(head2[N1], mark[p->aim]);\n        p = p->next;\n    }\n    w1[N1] += w[i];\n}\n\nvoid dfs1()//\u7b2c\u4e8c\u6b21\u641c\u7d22\n{\n    for (int i = 1; i <= N; i++)\n    {\n        int j = pop();\n        if (mark[j] == 0)\n        {\n            N1++;\n            dfs_visit1(j);\n        }\n    }\n}\nint d[10005];\nint dfs2(int i)//\u6700\u540e\u7684dp\n{\n    if (d[i] != 0)\n        return d[i];\n\n    int max = 0;\n    node *p = head2[i];\n    while (p != NULL)\n    {\n        if (dfs2(p->aim) > max)\n            max = dfs2(p->aim);\n        p = p->next;\n    }\n    return d[i] = max + w1[i];\n}\n\nint main()\n{\n    int i, u, v;\n\n    scanf(\"%d %d\", &N, &M);\n\n    for (i = 1; i <= N; i++)\n        scanf(\"%d\", &w[i]);\n    for (i = 0; i < M; i++)\n    {\n        scanf(\"%d %d\", &u, &v);\n        add(head[u], v);//\u539f\u56fe\n        add(head1[v], u);//\u8f6c\u7f6e\n    }\n\n    dfs();\n    dfs1();\n\n    int max = 0;\n    for (i = 1; i <= N1; i++)\n        if (dfs2(i) > max)\n            max = dfs2(i);\n\n    printf(\"%d\", max);\n\n    system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1513853909,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u7f29\u70b9\u6a21\u677f\uff0c\u5148\u7528tarjan\u7b97\u6cd5\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5c06\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6bcf\u4e2a\u70b9\u6743\u503c\u52a0\u5230\u4e00\u8d77\u3002\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u4e24\u70b9\u5c5e\u4e8e\u4e0d\u540c\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5c31\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u52a0\u4e00\u6761\u8fb9\u3002\u663e\u7136\u6700\u957f\u8def\u5f84\u4e00\u5b9a\u662f\u4ee5\u7f29\u70b9\u540e\u5165\u5ea6\u4e3a0\u7684\u70b9\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u7f29\u70b9\u540e\u5165\u5ea6\u4e3a0\u7684\u70b9\u8dd1\u4e00\u904dspfa\uff0c\u7136\u540e\u53d6\u6700\u957f\u8def\u5f84\uff0c\u5373\u4e3a\u7b54\u6848\u3002\u56e0\u4e3aN<=10000,M<=100000\uff0ctarjan\u7b97\u6cd5O\uff08N\uff09\u7f29\u70b9\u540e\u70b9\u6570\uff0c\u8fb9\u6570\u5927\u5927\u51cf\u5c11\uff0c\u53ea\u9700\u8981\u8dd1\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u65f6\u95f4\u9650\u5236\u5185\u901a\u8fc7\u3002\n\n\u4ee5\u4e0b\u4e3aC++AC\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<stack>\n#include<queue>\n#define maxn 101000\nusing namespace std;\ntypedef long long ll;\nstack<ll>q;\nqueue<ll>s;\nll a[maxn],belong[maxn];\nll sum=0;\ninline ll read()\n{\n    ll x=0;char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return x;\n}\nstruct Edge\n{\n    ll to,next,from;\n}edge1[maxn*4],edge2[maxn*4];\nll head1[maxn],head2[maxn];\nll dis[maxn];ll dis1[maxn];\nll indegree[maxn];\nll dfn[maxn],low[maxn],dex=0;\nbool vis[maxn],ins[maxn];\nll sum1,sum2;\nll ans=0;\ninline void add_edge1(ll from,ll to)\n{\n    edge1[++sum1].next=head1[from];\n    edge1[sum1].from=from;\n    edge1[sum1].to=to;\n    head1[from]=sum1;\n}\ninline void add_edge2(ll from,ll to)\n{\n    edge2[++sum2].next=head2[from];\n    edge2[sum2].to=to;\n    head2[from]=sum2;\n}\ninline void tarjan(ll u)\n{\n    vis[u]=1;\n    ins[u]=1;\n    q.push(u);\n    dfn[u]=low[u]=++dex;\n    for(ll i=head1[u];i;i=edge1[i].next)\n    {\n        ll v=edge1[i].to;\n        if(!dfn[v])\n        {\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        if(ins[v])\n        low[u]=min(low[u],dfn[v]);\n    }\n    if(dfn[u]==low[u])\n    {\n        sum++;\n        ll t=q.top();\n        while(t!=u)\n        {\n            belong[t]=sum;\n            dis[sum]+=a[t];\n            ins[t]=0;\n            q.pop();\n            t=q.top();\n        }\n        belong[t]=sum;\n        dis[sum]+=a[t];\n        ins[t]=0;\n        q.pop();\n    }\n    return ;\n}\ninline void spfa(ll u)\n{\n    ans=max(ans,dis[u]);\n    s.push(u);\n    dis1[u]=dis[u];\n    ins[u]=1;\n    while(!s.empty())\n    {\n        ll t=s.front();\n        s.pop();\n        ins[t]=0;\n        for(ll i=head2[t];i;i=edge2[i].next)\n        {\n            ll v=edge2[i].to;\n            if(dis1[t]+dis[v]>dis1[v])\n            {\n                dis1[v]=dis1[t]+dis[v];\n                ans=max(ans,dis1[v]);\n                if(!ins[v])\n                s.push(v); \n            }\n        }\n    }\n}\nint main()\n{\n    ll n,m;\n    n=read();m=read();\n    for(ll i=1;i<=n;i++)\n    {\n        a[i]=read();\n    }\n    ll from,to;\n    for(ll i=1;i<=m;i++)\n    {\n        from=read();to=read();\n        add_edge1(from,to);\n    }\n    for(ll i=1;i<=n;i++)\n    {\n        if(!vis[i]) tarjan(i);\n    }    \n    for(ll i=1;i<=sum1;i++)\n    {\n        from=edge1[i].from;to=edge1[i].to;\n        if(belong[from]!=belong[to])\n        {\n            add_edge2(belong[from],belong[to]);\n            indegree[belong[to]]++;\n        }\n    }\n    for(ll i=1;i<=sum;i++)\n    {\n        memset(dis1,0,sizeof(dis1));\n        if(indegree[i]==0)\n        spfa(i);\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1508313045,
        "uid": 54721,
        "name": "chengjintao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u70b9\u5c0f\u5751\uff0c\u7b2c\u4e00\u904d\u4ea4\u4e0a\u53bb\u53ea\u6709\u56db\u5341\u5206\uff0c\u7136\u540e\u4e94\u5f69\u7f24\u7eb7\uff0c4\u4e2aac\uff0c3\u4e2atle\uff0c1\u4e2awa\uff0c2\u4e2are\uff0c\u54c8\u54c8\u54c8\u3002\u7136\u540e\u628amaxn\u548cmaxm\u5f00\u5927\u4e86\u5341\u500d\uff0c\u53d8\u6210\u516d\u4e2aac\uff0c\u56db\u4e2awa\uff0c\u6240\u4ee5\u6d1b\u8c37\u6709\u7684\u65f6\u5019tle\u662f\u5176\u4ed6\u539f\u56e0\u5bfc\u81f4\u7684\u3002\n\n\u6700\u540e\u6ca1\u6709\u8003\u8651\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e92\u76f8\u72ec\u7acb\u7684\u60c5\u51b5\uff0c\u52a0\u4e0a\u7279\u5224\u4e4b\u540eac\u4e86\u3002\n\n\u5177\u4f53\u7684\u7a0b\u5e8f\u5b9e\u73b0\u770b\u4ee3\u7801\u6ce8\u91ca\u3002\n\n\u8fd9\u7bc7\u4ee3\u7801\u53ea\u63d0\u4f9bac\u4ee3\u7801\u7684\u8bb2\u89e3\uff0c\u800c\u601d\u8def\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u4ee3\u7801\uff0c\u611f\u89c9\u5199\u7684\u8fd8\u662f\u86ee\u6e05\u695a\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N (100000+10)\n#define M (1000000+10)\nusing namespace std;\nint a[N*2], head[N*2], nxt[M*2], cnt, low[N], dfn[N], st[N], top, g[N], ne, rd[2*N], que[N], tail, h, data[2*N], ma, k, ff[2*N];//\u6ce8\u610f\u6709\u52a0\u4e0a\u865a\u62df\u70b9\u7684\u8fb9\u5f00\u4e24\u500d\u5927\u5c0f\nbool bst[N], bb[2*N];\ninline void add (int x, int y) {//\u90bb\u63a5\u8868\u5b58\u56fe\n    a[++k] = y; nxt[k] = head[x]; head[x] = k;\n}\ninline void pop(int u) {//tarjan\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u6211\u662f\u5c06n+1-->ne \u8bbe\u4e3a\u865a\u62df\u70b9\uff0c\u540e\u9762\u7684dp\u4e5f\u53ea\u5728\u865a\u62df\u70b9\u4e2d\u641e\uff08\u673a\u623f\u5927\u4f6c\u90fd\u662f\u518d\u5f00\u4e00\u5957\u6570\u7ec4\u7684%%%orz\uff09\n    ne++;//\u865a\u62df\u70b9\n//    printf(\"ne == %d\\n\",ne);\n    while (st[top] != u) {//\u5f39\u6808\uff0c\u6ce8\u610fu\u6700\u597d\u4e5f\u5f39\u6389\n        //printf(\"%d %d\\n\",st[top],top);\n        g[st[top]] = ne;//g\u5b58\u865a\u62df\u70b9\u7684\u7f16\u53f7\n        bst[st[top]] = false;//\u51fa\u6808\n        data[ne] += data[st[top]];//\u865a\u62df\u70b9\u7684\u70b9\u6743\u7b49\u4e8e\u6240\u6709\u5305\u542b\u70b9\u7684\u70b9\u6743\u4e4b\u548c\n        top--;\n    }  \n    //printf(\"%d\\n\\n\\n\\n\\n\", u);\n    g[u] = ne; bst[u] = false; data[ne] += data[u]; top--;//u\u4e5f\u8981\u5904\u7406\n}\nvoid tarjan(int u) { //tarjan\uff0c\u6211\u7684\u53e6\u4e00\u7bc7tarjan\u9898\u89e3\u91cc\u6709\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u6ce8\u91ca\u4e86\n    dfn[u] = low[u] = ++cnt;//dfn\u548clow\u7684\u5b9a\u4e49\u4e0d\u591a\u8bb2\n    st[++top] = u;\n    bst[u] = true;//\u538b\u6808\n    for (int p = head[u]; p; p = nxt[p]){//\u904d\u5386\u8fb9\n        int v = a[p];\n        if (!dfn[v]) {\n            tarjan(v);//tarjan\u9012\u5f52\n            low[u] = min(low[u], low[v]);//low\u503c\u66f4\u65b0\n        }\n        else if (bst[v]) low[u] = min(low[u], dfn[v]);//low\u503c\u66f4\u65b0\n    }\n    if (low[u] == dfn[u]) pop(u);\n}\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    ne = n;//\u4ecen+1\u5f00\u59cb\uff0c\u56e0\u4e3a\u662f\u5148++\uff0c\u6240\u4ee5\u521d\u503c\u8d4b\u4e3an\n    for (int i = 1; i <= n; i++) scanf(\"%d\",&data[i]);//data[i]\u4e3a\u70b9\u6743\n    for (int i = 1; i <= m; i++){\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        add(x, y);\n    }\n    for (int i = 1; i <= n; i++) if (!dfn[i]) tarjan(i);//\u56e0\u4e3a\u56fe\u4e0d\u4e00\u5b9a\u5168\u8054\u901a\uff0c\u6240\u4ee5\u8fd9\u6837\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u90fd\u626b\u5230\n    for (int i = 1; i <= n; i++) {\n        for (int p = head[i]; p; p = nxt[p]){\n            if (g[i] == g[a[p]]) continue;//\u6ce8\u610f\u81ea\u5df1\u548c\u81ea\u5df1\u4e0d\u8981\u8fde\u8fb9\n            else\n            add(g[i], g[a[p]]), rd[g[a[p]]]++;//\u8bb0\u5f55\u5165\u5ea6\uff0c\u4e3a\u540e\u9762\u7684\u62d3\u6251\u505a\u94fa\u57ab\n        }\n    }\n    for (int i = n+1; i<= ne; i++) {\n        if (rd[i] == 0) que[++tail] = i;//\u6ce8\u610f\u4e00\u5f00\u59cb\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u538b\u961f\n    }\n    //for (int i = 1; i <= n; i++) printf(\"%d \",g[i]);\n    //printf(\"\\n\");\n    for (int i = n + 1; i <= ne; i++) ff[i] = data[i], ma = max(ma, ff[i]);//\u6ce8\u610f\u521a\u5f00\u59cb\u5148\u7279\u5224\uff0c\u4e0d\u7136\u4f1awa\u56db\u4e2a\u70b9\n    //printf(\"\\n\");\n    while (h<tail) {//\u4ee5\u4e0b\u4e3a\u5e7f\u641c\u62d3\u6251\n        h++;\n        int u = que[h];\n        for (int p = head[u]; p; p = nxt[p]){\n            if (!bb[a[p]]) rd[a[p]]--;//\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u62d3\u6251\u8fc7\u5219\u6ca1\u6709\u51cf\u5165\u5ea6\u7684\u5fc5\u8981\n            if (rd[a[p]] == 0 && !bb[a[p]]) que[++tail] = a[p], bb[a[p]] = true;//\u538b\u961f\uff0c\u62d3\u6251\n            ff[a[p]] = max(ff[a[p]], ff[u] + data[a[p]]); //dp\u8fd8\u662f\u86ee\u6c34\u7684\n            if (ff[a[p]] > ma) ma = ff[a[p]]; //\u6253\u64c2\n        }\n    }\n    printf(\"%d\",ma);\n}\n```",
        "postTime": 1502451304,
        "uid": 15232,
        "name": "Michael_Li",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    },
    {
        "content": "Tarjan\u7f29\u70b9\u554a\n\n\u6211\u7684\u65b9\u6cd5\u662f\u7f29\u5b8c\u70b9\u4e4b\u540e\uff0c\u628a\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\u5f53\u6210\u7f16\u53f7\uff0c\u91cd\u65b0\u5efa\u4e00\u4e2a\u65b0\u56fe\u3002\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u8dd1DFS\n\n\u53ef\u4ee5\u6709DP\u3001\u62d3\u6251\u6392\u5e8f\u7b49\u7b49\u5999\u4e0d\u53ef\u8a00\u7684\u505a\u6cd5\n\n\u5177\u4f53\u89e3\u91ca\u4e3a\u4ec0\u4e48\u7f29\u70b9\u4ec0\u4e48\u7684[\u5728\u8fd9\u91cc](http://www.vh13853128.icoc.me/nd.jsp?id=8)\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstdlib>\n\ninline long long read(){\n   long long num=0,f=1;\n   char ch=getchar();\n   while(!isdigit(ch)){\n       if(ch=='-')f=-1;\n       ch=getchar();\n   }\n   while(isdigit(ch)){\n       num=num\\*10+ch-'0';\n       ch=getchar();\n   }\n   return num\\*f;\n}\n\nstruct Edge{\n   int next,to;\n};\nstruct Pic{\n   Edge edge[200000];\n   int head[100000],num;\n   inline void add(int from,int to){\n       edge[++num]=(Edge){head[from],to};\n       head[from]=num;\n   }\n}Old,New;\nint ans;\nint     f[150000];\nint   val[150000];\nint   que[150000];\nint   dfn[150000];\nint   low[150000];\nint   col[150000];\nbool  vis[150000];\nint stack[150000];\nint ID,top,cnt;\nvoid tarjan(int x){\n   dfn[x]=low[x]=++ID;\n   vis[x]=1;\n   stack[++top]=x;\n   for(int i=Old.head[x];i;i=Old.edge[i].next){\n       int to=Old.edge[i].to;\n       if(!dfn[to]){\n           tarjan(to);\n           low[x]=low[x]<low[to]?low[x]:low[to];\n       }\n       else if(vis[to])    low[x]=low[x]<dfn[to]?low[x]:dfn[to];\n   }\n   if(low[x]==dfn[x]){\n       vis[x]=0;\n       col[x]=++cnt;\n       val[cnt]+=que[x];\n       while(stack[top]!=x){\n          col[stack[top--]]=cnt;\n          val[cnt]+=que[stack[top+1]];\n          vis[stack[top+1]]=0;\n      }\n      top--;\n      }\n}\n\nint dfs(int x){\n   if(f[x])return f[x];\n   f[x]=val[x];\n   int maxx=0;\n   for(int i=New.head[x];i;i=New.edge[i].next){\n       int to=New.edge[i].to;\n       if(!f[to])dfs(to);\n       maxx=maxx>f[to]?maxx:f[to];\n   }\n   f[x]+=maxx;\n   return f[x];\n}\n\nint main(){\n   int n=read(),m=read();\n   for(int i=1;i<=n;++i)que[i]=read();\n   int from,to;\n   for(int i=1;i<=m;++i){\n       from=read();to=read();\n       Old.add(from,to);\n   }\n   for(int i=1;i<=n;++i)if(!dfn[i])tarjan(i);\n   for(int i=1;i<=n;++i){\n       for(int j=Old.head[i];j;j=Old.edge[j].next)    if(col[i]!=col[Old.edge[j].to])    New.add(col[i],col[Old.edge[j].to]);\n   }\n   for(int i=1;i<=cnt;++i)\n       if(!f[i]){\n           dfs(i);\n           ans=ans>f[i]?ans:f[i];\n       }\n   printf(\"%d\",ans);\n}",
        "postTime": 1501837769,
        "uid": 25815,
        "name": "\u5c01\u766b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3387 \u3010\u3010\u6a21\u677f\u3011\u7f29\u70b9\u3011"
    }
]