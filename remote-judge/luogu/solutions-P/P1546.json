[
    {
        "content": "\u8fd9\u9053\u9898\u6240\u7ed9\u7684\u6570\u636e\u662f\u77e9\u9635\uff0c\u800c\u77e9\u9635\u662f\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bfb\u5165\u5176\u4e2d\u4e00\u534a\u7684\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u8f6c\u6210\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\n\n\u7136\u540e\u4f7f\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b80\u5355\u6765\u8bf4 \u5c31\u662f\u628a\u6bcf\u4e00\u6761\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u770b\uff0c\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5c31\u628a\u4ed6\u4eec\u5408\u5e76\uff0c\u8ba1\u7b97\u3002\u5982\u679c\u5df2\u7ecf\u5305\u542b\u6240\u6709\u70b9\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u6570\u636e\u9000\u51fa\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct node{\n\tint x,y,w;\n}a[200002];\n\nint f[200002];\n\nbool cmp(node xx,node yy){//\u7ed3\u6784\u4f53\u6392\u5e8f\n\treturn xx.w<yy.w;\n}\n\nint find(int x){\n//\u5e76\u67e5\u96c6\u8bf4\u767d\u4e86\u5c31\u662f\u627e\u7236\u7ed3\u70b9\u7684\u8fc7\u7a0b\uff0c\u540c\u4e00\u4e2a\u7236\u8282\u70b9\u5373\u540c\u4e00\u4e2a\u533a\u95f4\n\tif(x==f[x]) return x;\n\tf[x]=find(f[x]);\n\treturn f[x];\n}\n\nint main(){\n\tint n,k,m=0;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=i;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&k);\n\t\t\tif(j>i){\n            //\u8bfb\u5165\u65f6\u52a0\u4e00\u4e2a\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8981\u8bfb\u90a3\u4e48\u591a\n\t\t\t\tm++;\n\t\t\t\ta[m].x=i;a[m].y=j;a[m].w=k;\t\n\t\t\t}\t\n\t\t}\n\t}\n\tsort(a+1,a+m+1,cmp);//\u6392\u5e8f\n\tint ans=0,p=1;\n\tfor(int i=1;i<=m;i++){\n\t\tif(find(a[i].x)!=find(a[i].y)){\n        //\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\n\t\t\tans+=a[i].w;\n\t\t\tf[find(a[i].x)]=a[i].y;\n            //\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\n\t\t\tp++;\n\t\t\tif(p==n) break;\t\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1524312880,
        "uid": 60136,
        "name": "chengni",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "# Kruskal , K\u6c0f\u7b97\u6cd5\n\n\u76f8\u6bd4\u4e0ePrim,K\u4f3c\u4e4e\u5bb9\u6613\u5462......(\u4e0d\u59a8\u53bb\u8bd5\u4e00\u4e0bP+Heap)\u3002\u6211\u662f\u6765\u89e3\u91ca\u4e00\u4e0b\u5462,\u8fd8\u662f\u89e3\u91ca\u4e00\u4e0b\u5462......\n\nAC\u8bb0\u5f55:#10\n\nAC\n0ms/5136KB\n\n\n## \u88f8-\u514b\u9c81\u65af\u5361\u5c14-\u6700\u5c0f\u751f\u6210\u6811\n\n\u6b65\u9aa4:\n\n```psacal\n1.\u5c06\u8fb9\u6392\u5e8f\n2.\u5224\u65ad\u662f\u5426\u80fd\u63d2\u5165\u6b64\u8fb9,\u63d2\u5165\u540e\u505a:\n    1.inc(ans,\u8def\u5f84\u957f\u5ea6)\n    2.\u5408\u5e76\u8fde\u901a\u5206\u652f\n```\n\n![](http://www.blogfshare.com/wp-content/uploads/images/--Prim\\_9EA9/image\\_thumb\\_5.png)\n\n\u610f\u601d\u662f:\u4f60\u5c06\u8fb9\u6392\u4e86\u5e8f,\u90a3\u4e48\u518d\u5224\u65ad\u662f\u5426\u80fd\u63d2\u5165,\u5f53\u63d2\u5165\u7684\u8fb9\u7684\u4e2a\u6570\u4e3an-1\u7684\u65f6\u5019,\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811[\u8d2a\u5fc3]\u3002\n\n\n\n## \u5982\u6b64\u7684\u89e3\u91ca[\u5bf9\u4e8e\u63d2\u5165]\n\n\u80cc\u666f:\u5047\u5982A\u662f\u793e\u4f1a\u4e0a\u7684\u67d0\u4e2a\u6df7\u6df7,\u4ed6\u6709\u5f88\u591a\u8001\u5927\u3002\n\n### \u8fbe\u5230\u4ec0\u4e48\u6761\u4ef6\u63d2\u5165?\n\nA\u60f3\u8ddfB\u53d1\u751f\u5173\u7cfb,\u4f46\u662f\u4ed6\u4eec\u7684\u5144\u5f1f\u7ec4\u5408\u6709\u89c4\u5b9a,\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u90fd\u8981\u544a\u8bc9\u8001\u5927\u5148...A\u5e26\u7740B\u53bb\u8bbf\u95ee\u8001\u5927Y\u3002Y\u53ebA\u53bb\u89c1Z\u3002\u4f46\u662f\u4ed6\u4eec\u6ca1\u6709\u5e26\u89c1\u9762\u793c(100\u4e07\u4ec0\u4e48\u7684\u5c31\u514d\u4e86),Z\u5f88\u4e0d\u524a\u3002\n\n```pascal\nZ\u523b\u8584\u7684\u8bf4:\n1.\u4f60\u4eec\u4e24\u4e2a\u4e0d\u80fd\u662f\u540c\u4e00\u4e2a\u8840\u578b\u7684...\n2.\u770b\u89c1B,\u6211\u5f88\u773c\u719f,\u6211\u6000\u7591\u662f\u6211\u67d0\u4e2a\u4eb2\u621a\u7684\u4eb2\u621a\u7684\u4eb2\u621a\u7684\u5973\u513f,\u5982\u679c\u662f,\u90a3\u5343\u4e07\u4e0d\u80fd\u8ddf\u4f60\u8fd9\u79cd\u5c0f\u6df7\u6df7\u53d1\u751f\u5173\u7cfb\u3002(\u67e5\u627e\u6839\u662f\u5426\u76f8\u540c\u6765\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u8054\u901a\u5206\u652f,\u5982\u679c\u662f,\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u5408\u5e76\u8fc7\u4e86,\u518d\u5408\u5e76\u4f1a\u589e\u52a0\u8def\u5f84,\u4e0d\u662f\u6700\u5c11\u7684\u4e86)\n```\n1.A\u5927\u7b11:\u5f53\u7136\u4e0d\u662f\u4e00\u4e2a\u8840\u578b\u7684(Z\u6000\u7591\u4ed6\u5728\u5439\u725b)\u3002(i<>j,i\u70b9\u4e0d\u80fd\u662fj\u70b9)\n\n\n2.A\u82e6\u7b11:\u90a3\u6211\u600e\u4e48\u77e5\u9053\u5462?\n\n### \u5bf9\u4e8e[\u523b\u8584\u7684\u95ee\u9898\u4e4b2]\u7684\u7834\u89e3\n\nA\u7ecf\u5386[\u5200\u5c71\u706b\u6d77],\u627e\u5230\u4e86B\u7684\u5927\u7237\u7237,\u4ed6\u95ee:\u201c\u90a3\u4e2a\u9762\u5bb9\u7325\u7410\u7684Z\u662f\u4f60\u5bb6\u7684\u5417?\u201d\u5927\u7237\u7237\u679c\u65ad\u7684\u8bf4:\u201c\u4fdd\u5b9a\u4e0d\u662f\u201d\u3002\u7ec8\u4e8e\uff0cB\u548cA\u53d1\u751f\u4e86\u5173\u7cfb...\n\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898,\u5927\u7237\u7237\u7684\u8f88\u4efd\u6bd4Z\u9ad8,\u4e5f\u7b97\u52a0\u5165\u4e86\u5144\u5f1f\u7ec4\u5408,\u4ed6\u60f3\u5f53\u8001\u5927[\u53e6\u4e00\u4e2a\u89c4\u77e9]\u3002Z\u8bf4:\u201c\u6ca1\u5173\u7cfb,\u5144\u5f1f\u4eec\u90fd\u542c\u6211\u7684,\u4f60\u5f53\u4e86\u53ea\u662f\u6446\u4e00\u4e2a\u67b6\u5b50\u800c\u5df2\u201d\u3002\n\n\n[\u8bb2\u6b63\u4e8b]\u8fd9\u91cc\u5f88\u50cf\u4e00\u4e2a\u5e76\u67e5\u96c6,A\u8981\u627e\u8001\u5927,B\u8981\u627e\u5927\u7237\u7237,\u4ed6\u4eec\u4e0d\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u652f\u7684,\u6240\u4ee5\u53ef\u4ee5\u5408\u5e76[\u6ca1\u6709\u5408\u5e76\u8fc7]\u3002\u800c\u8fd92\u70b9\u5408\u5e76\u4e86,\u5e94\u8be5\u5408\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u652f,\u53ef\u662fA\u6709\u8001\u5927\u4e5f\u6709\u5c0f\u5f1f,B\u6709\u59b9\u59b9\u4e5f\u6709\u5927\u7237\u7237,\u6240\u4ee5\u76f4\u63a5\u8ba9\u6839\u5408\u5e76\u4e0d\u5c31\u53ef\u4ee5\u4e86\u3002\u8ba9Z\u505a\u8001\u5927,\u6216\u8005\u5927\u7237\u7237\u505a\u8001\u5927,\u4ed6\u4eec\u5c31\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u652f\u4e86\u3002\n\n## \u5173\u4e8e\u8def\u5f84\u538b\u7f29\n\nA\u6bcf\u6b21\u548c\u522b\u4eba\u53d1\u751f\u5173\u7cfb\u90fd\u8981\u627eY\u624d\u80fd\u627eZ\u3002A\u5f88\u4e0d\u559c\u6b22Y\u8fd9\u4e2a\u8001\u5927,\u4e8e\u662f\u4ed6\u5c31\u62ff\u7740100kuai\u53bb\u89c1\u4e86Z,\u201c\u6211\u4f4f\u5728\u4f60\u5bb6\u65c1\u8fb9\u597d\u4e0d\u597d?\u201d\n\n\n\u6bcf\u4e00\u6b21\u627e\u5230\u6839\u90fd\u53ef\u4ee5\u76f4\u63a5\u628a\u7236\u8282\u70b9\u6307\u5411\u6839,\u8fd9\u67e5\u627e\u65f6\u5c31\u80fd\u5f88\u5feb\u3002\u4ece[A]-[Y]-[Z]\u53d8\u4e3a[A]-[Z],\u5f53\u7136\u6709\u4e9b\u65f6\u5019\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\u3002\n\n\n## \u4ee3\u7801\u8be6\u89e3:\n\n```pascal\nvar\n        fa:array[1..30000] of longint;//\u8001\u5927...\n        a,b,c:array[1..30000] of longint;//b(\u8d77\u70b9)\u548cc(\u7ec8\u70b9)\u7684\u957f\u5ea6\u4e3aa\n        i,j,n,m,k,l,ans:longint;//ans\u662f\u7b54\u6848\n\nprocedure sort(l,r:longint); var i,j,s,t:longint; begin i:=l; j:=r; s:=a[(l+r) div 2]; repeat while a[i]<s do i:=i+1; while a[j]>s do j:=j-1; if i<=j then begin t:=a[i]; a[i]:=a[j]; a[j]:=t; t:=b[i]; b[i]:=b[j]; b[j]:=t; t:=c[i]; c[i]:=c[j]; c[j]:=t;\n        inc(i); dec(j); end; until i>=j; if i<r then sort(i,r); if j>l then sort(l,j); end;\n//pascal\u624b\u6253\u6392\u5e8f,\u4e0d\u5fc5\u5728\u610f\u3002\u6ce8\u610f,\u8def\u5f84\u7528\u6765\u6392\u5e8f\u65f6\u8d77\u70b9\u548c\u7ec8\u70b9\u4e5f\u8981\u6362\n\nprocedure start;//\u8f93\u5165\u548c\u6392\u5e8f,\u672c\u4eba\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\nvar\n        t,p:longint;\nbegin\n        p:=0;\n        read(n);\n        for i:=1 to n do\n                fa[i]:=i;\n        for i:=1 to n do\n                for j:=1 to n do\n                begin\n                        inc(p);\n                        b[p]:=i;\n                        c[p]:=j;\n                        read(a[p]);\n                        if i=j then\n                                a[p]:=maxlongint;\n                end;\n\n        sort(1,n*n);\nend;\n\nfunction get(x:longint):longint;//\u627e\u6839...\nbegin\n        if fa[x]=x then\n                exit(x)\n        else\n        begin\n                get:=get(fa[x]);//\u9012\u5f52father\n                fa[x]:=get;//\u8def\u5f84\u538b\u7f29\n        end;\nend;\n\nprocedure min_way(x:longint);\nvar\n        i,j:longint;\nbegin\n        i:=b[x];//b\u70b9\u548cc\u70b9\u8981\u8fde\u8fb9\n        j:=c[x];\n        if (i<>j) then//\u4e0d\u662f\u540c\u4e00\u4e2a\u70b9\n        begin\n                fa[i]:=get(i);//\u627e\u8001\u5927\n                fa[j]:=get(j);//\u627e\u8001\u5927\n                if (fa[i]<>fa[j]) then//\u4e0d\u662f\u540c\u4e00\u4e2a\u7ec4\u5408(\u4e0d\u662f\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u652f)\n                begin\n                        inc(ans,a[x]);//\u52a0\u4e0a\u672c\u8def\u5f84\n                        fa[get(j)]:=fa[i];//\u5408\u5e76\n                end;\n        end;\n        if x=n*n then//\u5408\u5e76\u5b8c\u6210\n                exit;\n        min_way(x+1);//\u4e0b\u4e00\u4e2a\u9700\u8981\u5408\u5e76\u7684\u8fb9\nend;\n\nbegin\n        start;\n        min_way(1);\n        writeln(ans);\nend.\n\n\n\n\n\n\n```",
        "postTime": 1517127635,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u6700\u5c0f\u751f\u6210\u6570\u4e0e[\u6700\u77ed\u7f51\u7edc Agri-Net]"
    },
    {
        "content": "\u5df2\u66f4\u65b02019.5.2\n\n# \u6700\u77ed\u7f51\u7edc\n\n**\u9898\u76ee\u80cc\u666f**\n\n\u519c\u6c11\u7ea6\u7ff0\u88ab\u9009\u4e3a\u4ed6\u4eec\u9547\u7684\u9547\u957f\uff01\u4ed6\u5176\u4e2d\u4e00\u4e2a\u7ade\u9009\u627f\u8bfa\u5c31\u662f\u5728\u9547\u4e0a\u5efa\u7acb\u8d77\u4e92\u8054\u7f51\uff0c\u5e76\u8fde\u63a5\u5230\u6240\u6709\u7684\u519c\u573a\u3002\u5f53\u7136\uff0c\u4ed6\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\n\n**\u9898\u76ee\u63cf\u8ff0**\n\n\u7ea6\u7ff0\u5df2\u7ecf\u7ed9\u4ed6\u7684\u519c\u573a\u5b89\u6392\u4e86\u4e00\u6761\u9ad8\u901f\u7684\u7f51\u7edc\u7ebf\u8def\uff0c\u4ed6\u60f3\u628a\u8fd9\u6761\u7ebf\u8def\u5171\u4eab\u7ed9\u5176\u4ed6\u519c\u573a\u3002\u4e3a\u4e86\u7528\u6700\u5c0f\u7684\u6d88\u8d39\uff0c\u4ed6\u60f3\u94fa\u8bbe\u6700\u77ed\u7684\u5149\u7ea4\u53bb\u8fde\u63a5\u6240\u6709\u7684\u519c\u573a\u3002\n\n\u4f60\u5c06\u5f97\u5230\u4e00\u4efd\u5404\u519c\u573a\u4e4b\u95f4\u8fde\u63a5\u8d39\u7528\u7684\u5217\u8868\uff0c\u4f60\u5fc5\u987b\u627e\u51fa\u80fd\u8fde\u63a5\u6240\u6709\u519c\u573a\u5e76\u6240\u7528\u5149\u7ea4**\u6700\u77ed**\u7684\u65b9\u6848\u3002\u6bcf\u4e24\u4e2a\u519c\u573a\u95f4\u7684\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc7100000\n\n\n\n------------\n\n\u8fd9\u9053\u9898\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684**\u6a21\u677f\u9898**\u3002\n\n```cpp\n\u751f\u6210\u6811\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u5bf9\u4e8e\u4e00\u4e2a\u62e5\u6709n\u4e2a\u9876\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u5b83\u7684\u8fb9\u6570\u4e00\u5b9a\u591a\n\n\u4e8en-1\u6761\u3002\u82e5\u4ece\u4e2d\u9009\u62e9n-1\u6761\u8fb9\uff0c\u4f7f\u5f97\u65e0\u5411\u56fe\u4ecd\u7136\u8fde\u901a\uff0c\n\n\u5219\u7531n\u4e2a\u9876\u70b9\u53ca\u8fd9 n-1\u6761\u8fb9\u7ec4\u6210\u7684\u56fe\u88ab\u79f0\u4e3a\u539f\u65e0\u5411\u56fe\u7684\n\n\u751f\u6210\u6811\u3002\n```\n\u90a3\u6700\u5c0f\u751f\u6210\u6811\uff0c\u987e\u540d\u601d\u4e49\u662f\u6307**\u4e00\u4e2a\u56fe\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811**\uff08\u6743\u503c\u662f\u6307\u4e00\u4e2a\u56fe\u4e2d\u67d0\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\uff09\u3002\n\n\u8ba9\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e24\u79cd\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u5427~\n\n## 1.Prim\u7b97\u6cd5\uff08\u666e\u91cc\u59c6\u7b97\u6cd5\uff09\n\n\n**Prim\u7b97\u6cd5\u662f\u901a\u8fc7\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u65b0\u8282\u70b9\u52a0\u5165\u96c6\u5408\uff0c\u76f4\u5230\u6240\u6709\u70b9\u52a0\u5165\u505c\u6b62\u7684 \u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u3002**\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08n\u00b2\uff09**\n\n\u6a21\u677f\uff08\u672c\u9898\u4ee3\u7801\uff09code\uff1a\n\n```cpp\n#include <bits/stdc++.h>//\u4e07\u80fd\u5934 \n#define INF 0x3f3f3f3f//\u5de8\u5927\u65e0\u6bd4\u7684\u4e00\u4e2a\u6570 \nusing namespace std;\nint n, q[1001][1001], minn[100001], ans;//minn\u8868\u793a\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u4e0e\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u76f8\u8fde\u7684\u6700\u5c0f\u8fb9\u6743 \nbool f[100001];//\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9f\u7b49\u4e8efalse\uff0c\u5728\u5c31\u7b49\u4e8etrue \nint main()\n{\n\tmemset(minn, INF, sizeof(minn));//\u521d\u59cb\u5316 \n\tminn[1] = 0;\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &q[i][j]);//\u8f93\u5165\u90bb\u63a5\u77e9\u9635 \n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tint k = 0;\n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(!f[j] && minn[j] < minn[k])//\u5bfb\u627e\u6743\u503c\u6700\u77ed\u7684\u8fb9\uff08\u4e14\u4e0d\u80fd\u662f\u5df2\u7ecf\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\uff09 \n\t\t\t{\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\tf[k] = true;//\u628a\u5b83\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811 \n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(!f[j] && q[k][j] < minn[j])//\u5229\u7528\u65b0\u70b9\u6539\u53d8\u5176\u4ed6\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u7684\u8fb9\u7684\u6743\u503c \n\t\t\t{\n\t\t\t\tminn[j] = q[k][j];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tans += minn[i];//\u628a\u6240\u6709\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u7684\u6743\u503c\u52a0\u8d77\u6765 \n\t}\n\tprintf(\"%d\", ans);\n\treturn 0;\n} \n```\n\n\n\n------------\n\n\n## 2.Kruskal\u7b97\u6cd5\uff08\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff09\n\n**Kruskal\u7b97\u6cd5\u662f\u901a\u8fc7\u5e76\u67e5\u96c6\uff0c\u6309\u7167\u8fb9\u7684\u6743\u91cd\u987a\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u5c06\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u4f46\u662f\u82e5\u52a0\u5165\u8be5\u8fb9\u4f1a\u4e0e\u751f\u6210\u6811\u5f62\u6210\u73af\u5219\u4e0d\u52a0\u5165\u8be5\u8fb9,\u9009\u5176\u6b21\u3002\u76f4\u5230\u6811\u4e2d\u542b\u6709n - 1\u6761\u8fb9\u4e3a\u6b62\u3002**\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08E log E\uff09\uff08E\u4e3a\u8fb9\u6570\uff09**\n\n\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u5e76\u67e5\u96c6\u4e86\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u5148\u770b\u4e00\u4e0b[\u3010\u6a21\u677f\u3011\u5e76\u67e5\u96c6](https://www.luogu.org/problemnew/show/P3367)\n\n\u8fd9\u662f\u5e76\u67e5\u96c6\u7684\u9898\u89e3----->[\u5e76\u67e5\u96c6\u7684\u9898\u89e3](https://www.luogu.org/blog/qqq1112/solution-p3367)\n\n\u6a21\u677f\uff08\u672c\u9898\u4ee3\u7801\uff09code\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m, v, k, ans, fa[10000001];\nstruct node//\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b58\u56fe \n{\n\tint x, y, z;//z\u8868\u793ax\u8fdey\u7684\u6743\u503c \n}stu[100001];\nint find(int x)//\u5e76\u67e5\u96c6 \n{\n\tif(x != fa[x])\n\t{\n\t\tfa[x] = find(fa[x]);\n\t}\n\treturn fa[x];\n}//\u67e5\u627e \nvoid unity(int x, int y)\n{\n\tint r1 = find(x);\n\tint r2 = find(y);\n\tfa[r1] = r2;\n}//\u5408\u5e76 \nbool cmp(node a, node b)//\u4ece\u5c0f\u5230\u5927\u7ed3\u6784\u4f53\u6392\u5e8f \n{\n\treturn a.z < b.z;\n}\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfa[i] = i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &v);\n\t\t\tif(j > i)//\u90bb\u63a5\u77e9\u9635\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u5b58\u4e00\u534a\u5c31\u884c\u4e86 \n\t\t\t{\n\t\t\t\tm++;\n\t\t\t\tstu[m].x = i;\n\t\t\t\tstu[m].y = j;\n\t\t\t\tstu[m].z = v;\n\t\t\t}\n\t\t}\n\t}\n\tsort(stu + 1, stu + m + 1, cmp);//\u6392\u5e8f \n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tif(find(stu[i].x) != find(stu[i].y))\n\t\t{\n\t\t\tans += stu[i].z;//\u52a0\u4e0a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fb9\u7684\u6743\u503c \n\t\t\tunity(stu[i].x, stu[i].y);//\u8fde\u63a5\u8d77\u6765 \n\t\t\tk++;//\u8bb0\u5f55\u8fb9\u6570 \n\t\t\tif(k == n - 1)//n - 1\u6761\u8fb9\u5c31\u884c\u4e86 \n\t\t\t{\n\t\t\t\tprintf(\"%d\", ans);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n# finish(\uff5e\uffe3\u25bd\uffe3)\uff5e",
        "postTime": 1556503921,
        "uid": 143681,
        "name": "Strong_Jelly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u53d1\u73b0\u9898\u89e3\u91cc\u8f83\u5c11\u5806\u4f18\u5316\u7684Prim\u89e3\u6cd5\uff0c\u6765\u63d0\u4ea4\u4e00\u53d1\uff08\u4f7f\u7528\u4e86STL\u7684\u4f18\u5148\u961f\u5217\uff09\u3002  \n\n\u9274\u4e8e\u8be5\u9898\u4e2d\uff0c\u56fe\u4e3a\u7a20\u5bc6\u56fe\uff0c\u8fb9\u6570\u5927\u4e8e\u70b9\u6570\uff0c\u56e0\u6b64\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u65b9\u9762\u5806\u4f18\u5316Prim\u4f18\u4e8eKruskal\u3002  \nPrim\u7684\u7b80\u8981\u6b65\u9aa4\u8bf4\u660e\uff1a  \n1. \u521d\u59cb\u6240\u6709\u8282\u70b9\u4e3a\u767d\u8272\u3002\n2. \u9009\u62e91\u53f7\u8282\u70b9\uff0c\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff08\u67d3\u4e3a\u84dd\u8272\uff09\uff1b\n3. \u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\u76f4\u81f3\u5efa\u5b8c\uff08\u91cd\u590dN-1\u6b21\uff0c\u56e0\u4e3a\u6709N-1\u6761\u8fb9\uff09\uff1a  \n\t1. \u5728\u8fde\u63a5\u767d-\u84dd\u70b9\u7684\u8fb9\u4e2d\u627e\u5230\u8fb9\u6743\u6700\u5c0f\u7684**\uff08\u6b64\u5904\u5806\u4f18\u5316\u964d\u4f4e\u590d\u6742\u5ea6\uff09**\uff1b\n    2. \u5c06\u8be5\u8fb9\u8fde\u63a5\u7684\u767d\u70b9\uff08\u672a\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\uff09\u67d3\u4e3a\u84dd\u8272\uff08\u52a0\u5165\uff09\uff0c\u66f4\u65b0\u5f53\u524d\u8fb9\u6743\u548c\u3002  \n\n\u60f3\u8981\u66f4\u5177\u4f53\u7684\u767e\u5ea6\u5373\u53ef\u3002  \n\u7a0b\u5e8f\u6ce8\u91ca\u5e94\u8be5\u8db3\u591f\u591a\u4e86\u5427\u2026\u2026\uff1f\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 105\nstruct Node{\n    int a, b;//a->b\n    int w;//\u8ddd\u79bb \n    bool operator <(const struct Node &n)const{\n        return w> n.w;\n    }\n};\npriority_queue <Node> edge;//\u5f85\u9009\u8fb9\u96c6 \nvector <Node> G[maxn];//G[i]:\u4ee5i\u4e3a\u8d77\u70b9\u7684\u8fb9\u96c6 \nbool visted[maxn];//\u662f\u5426\u5df2\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc \nint main()\n{\n    int N;\n    scanf(\"%d\", &N);\n    for (int i=0;i<N;i++)\n    \tfor (int j=0;j<N;j++) {\n    \t\tint tmp;\n    \t\tscanf(\"%d\",&tmp);\n    \t\tif (tmp==0) continue;\n    \t\telse {\n    \t\t\tG[i].push_back(Node{i, j, tmp});\n        \t\tG[j].push_back(Node{j, i, tmp});\n\t\t\t\t//C++11\u624d\u80fd\u8fd9\u4e48\u7528\u53c2\u6570\u5217\u8868\uff0c\u867d\u7136\u975eC++11\u4e5f\u80fd\u901a\u8fc7\uff0c\u4f46\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a \n        \t\t//\u53cc\u5411\u8fb9 \n            }\n        }\n    visted[1] = true;\n    for(int i=0; i< G[1].size(); i++)//\u9884\u5148\u5c06\u4ee51\u53f7\u70b9\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u52a0\u5165\u5f85\u9009\u8fb9\u96c6 \n        edge.push(G[1][i]);\n    int all =0;//\u76ee\u524d\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c \n    int cnt = 0;//\u5df2\u7ecf\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\u7684\u8fb9\u6570 \n    while(cnt < N-1){\n        int w = edge.top().w;\n        int n = edge.top().b;\n        edge.pop();\n\n        if (visted[n])//\u82e5\u8be5\u8fb9\u6240\u5230\u8fbe\u8282\u70b9\u5df2\u7ecf\u5904\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5219\u8df3\u8fc7 \n            continue;\n        visted[n] = true;//\u6807\u8bb0\u5176\u5df2\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811 \n        all += w;\n        cnt ++;\n        for (int i=0; i< G[n].size(); i++)\n        {\n            if (!visted[G[n][i].b])//\u5c06\u4ee5\u65b0\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\u52a0\u5165\u5f85\u9009\u8fb9\u96c6 \n                edge.push(G[n][i]);\n        }\n    }\n    printf(\"%d\\n\", all);\n    return 0;\n\n}\n```",
        "postTime": 1537431235,
        "uid": 5846,
        "name": "yyy2015c01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u6734\u7d20\u7684\u7684Prim\u7b97\u6cd5\uff08\u6ca1\u6709\u4efb\u4f55\u4f18\u5316\uff09\n\n\u7528\u65f6: 32ms / \u5185\u5b58: 820KB\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n```c\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\nconst int MAX = 105;\nint g[MAX][MAX];//\u90bb\u63a5\u77e9\u9635\nint minn[MAX];\nbool vis[MAX];//\u6807\u8bb0\u662f\u5426\u8bbf\u95ee\nint n;\n\nint main() {\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= n; j++) {\n\t\t\tcin >> g[i][j];\n\t\t}\n\t}\n\tmemset(minn, 0x7f, sizeof(minn));//\u521d\u59cb\u5316\n\tmemset(vis, false, sizeof(vis));\n\tminn[1] = 0;//\u5c06\u8d77\u70b9\u521d\u59cb\u5316\n\tfor(int i = 1; i <= n; i++) {\n\t\tint k = 0;\n\t\tfor(int j = 1; j <= n; j++) {\n\t\t\tif(!vis[j] && (minn[j] < minn[k])) {\n\t\t\t\tk = j;//\u4ece\u8d77\u70b9\u51fa\u53d1\n\t\t\t}\n\t\t}\n\t\tvis[k] = true;//\u5c06\u8fd9\u4e2a\u9876\u70b9\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8fc7\n\t\tfor(int j = 1; j <= n; j++) {\n\t\t\tif(!vis[j] && (g[k][j] < minn[j])) {\n\t\t\t\tminn[j] = g[k][j];//\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n\t\t\t}\n\t\t}\n\t}\n\tint ans = 0;\n\tfor(int i = 1; i <= n; i++) {\n\t\tans += minn[i];//\u5c06\u8d70\u8fc7\u7684\u8fb9\u7684\u6743\u503c\u52a0\u8d77\u6765\n\t}\n\tcout << ans << endl;//\u8f93\u51fa\u7ed3\u679c\n\treturn 0;\n}\n```\n# \u7ba1\u7406\u5458\u8f9b\u82e6\u4e86\n\n\u542c\u8bf4NOIP\u524d\u53d1\u9898\u89e3 rp++\n\n**\u795d\u5927\u5bb6AK NOIP\uff01**\n",
        "postTime": 1541671142,
        "uid": 115452,
        "name": "Outro5201",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "## \u5509\uff0c\u770b\u5404\u4f4d\u5927\u4f6c\u7528\u5404\u79cd\u7b97\u6cd5\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u53ea\u80fd\u7528\u514b\u9c81\u65af\u5361\u5c14\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>//\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e2a\u5934\u6587\u4ef6\u5462\uff0c\u56e0\u4e3a\u514b\u9c81\u65af\u5361\u5c14\u8981\u5148\u5feb\u6392sort\u51fd\u6570\uff0c \u4e0d\u4e86\u89e3\u53ef\u4ee5\u53bb\u9898\u89e3\u6700\u4e0b\u9762\u770b\u4e00\u4e0b\u514b\u9c81\u65af\u5361\u5c14\u7684\u7b97\u6cd5\u5957\u8def\u3002 \nusing namespace std;\nstruct point\n{\n\tint x;\n\tint y;\n\tint v;\n};//\u5b9a\u4e49\u7ed3\u6784\u4f53\u6765\u5b58\u5404\u6761\u8fb9 \npoint a[9901];//\u5b58\u8fb9 \nint fat[101];\nint n,i,j,x,m,tot,k;//tot\u7528\u6765\u5b58\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u957f\u5ea6 \nint father(int x)\n{\n\tif(fat[x]!=x)fat[x]=father(fat[x]);\n\treturn fat[x];\n}\nvoid unionn(int x,int y)\n{\n\tint fa=father(x);\n\tint fb=father(y);\n\tif(fa!=fb)fat[fa]=fb;\n}\nint cmp(const point&a,const point &b) //sort\u51fd\u6570\u4e2d\u7684\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570 \n{\n\tif(a.v<b.v)return 1;\n\telse return 0;\n}\nint main()\n{\n\tcin>>n;\n\tfor(i=1;i<=n;i++)\n\tfor(j=1;j<=n;j++)\n\t{\n\t\tcin>>x;\n\t\tif(x!=0)\n\t\t{\n\t\t\tm++;\n\t\t\ta[m].x=i;\n\t\t\ta[m].y=j;\n\t\t\ta[m].v=x;\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++)fat[i]=i;\n\tsort(a+1,a+m+1,cmp);//C++\u6807\u51c6\u5e93\u4e2d\u81ea\u5e26\u7684\u5feb\u6392\n\t                    //cmp\u4e3a\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u8fd9\u4e2a\u8868\u793aa\u6570\u7ec4\u4e2d\u76841-m\u6309\u987a\u5e8f\u6765cmp\u6bd4\u8f83\u6392\u5e8f \n\tfor(i=1;i<=m;i++)\n\t{\n\t\tif(father(a[i].x)!=father(a[i].y))\n\t\t{\n\t\t\tunionn(a[i].x,a[i].y);\n\t\t\ttot+=a[i].v;\n\t\t\tk++;\n\t\t}\n\t\tif(k==n-1)break;\n\t}\n\tcout<<tot;\n\treturn 0;\n}\n```\n\n\n------------\n\u4e0b\u9762\u4e3a\u514b\u9c81\u65af\u7b97\u6cd5\u7684\u5957\u8def\uff0c\u5927\u5bb6\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u3002\uff08~~\u867d\u7136\u6211\u4e5f\u4e0d\u592a\u4f1a~~\uff09\n\n1.\u9996\u5148\u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff1afather[x]=x\uff1b\n\n2.tot=0\u8d4b\u521d\u503c\u4e3a0\u7ed9tot\n\n3.\u5c06\u6240\u6709\u8fb9\u7528\u5feb\u6392\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n4.\u8ba1\u6570\u5668 k=0;\n\n5.\n```cpp\nfor (i=1; i<=M; i++)      //\u5faa\u73af\u6240\u6709\u5df2\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u8fb9\n  if  \u8fd9\u662f\u4e00\u6761u,v\u4e0d\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u8fb9(u,v)(\u56e0\u4e3a\u5df2\u7ecf\u6392\u5e8f\uff0c\u6240\u4ee5\u5fc5\u4e3a\u6700\u5c0f)\uff0c\n    begin\n    \u3000\u2460\u5408\u5e76u,v\u6240\u5728\u7684\u96c6\u5408\uff0c\u76f8\u5f53\u4e8e\u628a\u8fb9(u,v)\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\n\u3000    \u2461tot=tot+W(u,v)\n      \u2462k++\n      \u2463\u5982\u679ck=n-1,\u8bf4\u660e\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u751f\u6210\uff0c\u5219break; \n    end;\n\n```\n6. \u7ed3\u675f\uff0ctot\u5373\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u603b\u6743\u503c\u4e4b\u548c\u3002\n\n\n------------\n\u8fd9\u5c31\u662f\u6574\u9053\u9898\u7684\u5168\u90e8\u8fc7\u7a0b\u4e86\uff0c\u8fd8\u6709\u5305\u62ec\u514b\u9c81\u65af\u5361\u5c14\u7684\u5957\u8def\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u559c\u6b22\uff0c\u5982\u679c\u6709\u9519\u8bef\u6216\u8005\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u544a\u8bc9\u849f\u84bb\uff0c\u849f\u84bb\u5c3d\u91cf\u53bb\u7ea0\u6b63\u3002\u87f9\u87f9\u0669('\u03c9')\u0648\n\n\u795d\u5927\u5bb6\u80fd\u65e9\u65e5ac\u8fd9\u9053\u9898\n\n![](https://www.luogu.org/images/congratulation.png)\u0648\n",
        "postTime": 1570194283,
        "uid": 230323,
        "name": "\u10e6\ufe4f\ufeec\u5317\u2766\u6800",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u6211\u7528\u4e86\u5e76\u67e5\u96c6\u6765\u505a\uff0c\u8fd9\u6837\u662f\u6700\u4f18\u89e3\n\n\u5176\u5b9e\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u6765\u505a\uff0c\u4f46\u662f\u505a\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u8fd8\u9700\u8981\u5224\u65ad\u662f\u5426\u8d70\u8fc7\u6240\u6709\u7684\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u601d\u7ef4\u590d\u6742\u5ea6\u90fd\u4f1a\u6bd4\u8f83\u9ad8\uff0c\u4e5f\u5f88\u5bb9\u6613\u51fa\u73b0\u9519\u8bef\n\n\u56e0\u4e3a\u8981\u8dd1\u6240\u6709\u7684\u70b9\uff0c\u6240\u4ee5\u5148\u628a\u6bcf\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u6392\u4e00\u6b21\u5e8f\uff0c\u7136\u540e\u9010\u4e2a\u627e\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5c31\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u539f\u7406\u5c31\u4e0d\u8bf4\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint x,y,d;\n}a[21000];int len;//\u8bb0\u5f55\u8fb9 \nint n,t;\nint fa[21000];//fa[x]\u8868\u793a\u70b9x\u7684\u7236\u4eb2\u662f\u8c01 \nint find_zuxian(int x)//\u627e\u7956\u5148 \n{\n\tif(fa[x]==x) return x;//\u5982\u679c\u627e\u5230\u4e86\u7956\u5148\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de \n\telse\t\t return find_zuxian(fa[x]);//\u4e0d\u7136\u5c31\u7ee7\u7eed\u5f80\u4e0b\u627e \n}\ninline int cmp(const void *xx,const void *yy)//\u6392\u5e8f \n{\n\tnode x=*(node*)xx;\n\tnode y=*(node*)yy;\n\tif(x.d<y.d) return -1;\n\tif(x.d>y.d) return 1;\n\treturn 0;\n}\nint main()\n{\n\tint i,j,t;\n\tscanf(\"%d\",&n);//\u8f93\u5165 \n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;//\u4e00\u5f00\u59cb\u81ea\u5df1\u5c31\u662f\u81ea\u5df1\u7684\u7956\u5148 \n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&t);//\u8f93\u5165 \n\t\t\tif(j>i)//\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5c31\u5efa\u7acb\u4e00\u6761\u65b0\u7684\u8fb9 \n\t\t\t{\n\t\t\t\tlen++;//\u56e0\u4e3a\u8fd9\u4e2a\u4e0d\u662f\u6700\u77ed\u8def\uff0c\u5efa\u53cc\u5411\u8fb9\u662f\u591a\u4f59\u7684\uff0c\u800c\u4e14\u4f1a\u51fa\u9519 \n\t\t\t\ta[len].x=i;a[len].y=j;a[len].d=t;\n\t\t\t}\n\t\t}\n\t}\n\tqsort(a+1,len,sizeof(node),cmp);//\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\tint s=1,ans=0;//s\u8868\u793a\u5f53\u524d\u627e\u5230\u7684\u70b9\uff0cans\u8868\u793a\u8fb9\u7684\u957f\u5ea6 \n\tfor(i=1;i<=len;i++)//\u9010\u4e2a\u641c\u7d22 \n\t{\n\t\tint tx=find_zuxian(a[i].x);\n\t\tint ty=find_zuxian(a[i].y);\n\t\tif(tx!=ty)//\u5982\u679c\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u4e0d\u540c\u7684\u8bdd \n\t\t{\n\t\t\tans=ans+a[i].d;//\u5c31\u7528\u8fd9\u4e00\u6761\u8fb9 \n\t\t\tfa[ty]=tx;//\u5e76\u4e14\u5408\u5e76\u4e24\u4e2a\u70b9 \n\t\t\ts++;if(s==n) break;//\u5982\u679c\u627e\u5230\u4e86n\u4e2a\u70b9\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u641c\u7d22 \n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);//\u8f93\u51fa \n\treturn 0;\n}\n```",
        "postTime": 1525157725,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u6b64\u9898\u4e3a\u5178\u578b\u7684\u6c42\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\uff0cPrim\u7b97\u6cd5\u6700\u4f73\uff0c\u4f46\u662fKruskal\u7b97\u6cd5\u540c\u6837\u9002\u7528\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9bKruskal\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684pascal\u4ee3\u7801\uff0c\u8fd0\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u5f62\u6210\u56de\u8def\n\n```delphi\n\ntype node=record//\u8fb9\u7684\u8bb0\u5f55\n     v1,v2,s:longint;//v1\uff0cv2\u4e3a\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u70b9\uff0cs\u4e3a\u519c\u573a\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u5149\u7ea4\u957f\u5ea6\n     end;\nvar i,j,n,ans,p,k:longint;a:array[1..10000] of node;//\u628a\u8fb9\u4ee5\u6570\u7ec4\u5f62\u5f0f\u5b58\u50a8\u5728a\u6570\u7ec4\u4e2d\n    f:array[1..10000] of longint;//\u7236\u7ed3\u70b9\u6570\u7ec4\nfunction gf(x:longint):longint;//\u6c42\u6839\u8282\u70b9\u7684\u8fc7\u7a0b\nbegin\n    if f[x]=x then exit(x);\n    f[x]:=gf(f[x]);\n    exit(f[x]);\nend;\nprocedure union(a,b:longint);//\u5408\u5e76\u4e24\u96c6\u5408\u7684\u8fc7\u7a0b\nbegin\n    if gf(a)<>gf(b) then f[gf(a)]:=gf(b);\nend;\nprocedure sort(l,r: longint);//\u5feb\u6392\u8fc7\u7a0b\n      var\n         i,j,x: longint;y:node;\n      begin\n         i:=l;\n         j:=r;\n         x:=a[(l+r) div 2].s;\n         repeat\n           while a[i].s<x do\n            inc(i);\n           while x<a[j].s do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=a[i];\n                a[i]:=a[j];\n                a[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\nbegin\n    readln(n);//\u8bfb\u5165\u519c\u573a\u6570\n    for i:=1 to n do//\u56e0\u4e3a\u8bfb\u5165\u6570\u636e\u4ee5\u90bb\u63a5\u77e9\u9635\u7684\u5f62\u5f0f\u8bfb\u5165\uff0c\u6240\u4ee5\u5728\u4f7f\u7528Kruskal\u7b97\u6cd5\u65f6\u8981\u6ce8\u610f\u8f6c\u6362\u6210\u8fb9\u96c6\u6570\u7ec4\u5f62\u5f0f\n      for j:=1 to n do\n      begin\n          inc(k);//k\u4e3a\u8fb9\u7684\u6570\u7ec4\u4e0b\u6807\n          a[k].v1:=i;//i\uff0cj\u5206\u522b\u4e3a\u8fb9\u8fde\u901a\u7684\u4e24\u70b9\uff0c\u8bb0\u5165\u5230\u8bb0\u5f55\u91cc\n          a[k].v2:=j;\n          read(p);\n          a[k].s:=p;//\u5b58\u50a8\u6b64\u8fb9\u7684\u957f\u5ea6\n      end;\n      for i:=1 to n do\n        f[i]:=i;//\u521d\u59cb\u5316\u5404\u7ed3\u70b9\u7684\u96c6\u5408\uff0c\u5f62\u6210\u4e0d\u540c\u7684\u96c6\u5408\n      sort(1,k);//\u628a\u8fb9\u6309\u7167\u957f\u5ea6\u6392\u5e8f\n      i:=1;//i\u4e3a\u8981\u6c42\u7684\u7b2ci\u6761\u8fb9\n      j:=1;//j\u4e3a\u8fb9\u7684\u6570\u7ec4\u4e0b\u6807\n      while i<=n-1 do\n      begin\n          if (gf(a[j].v1)<>gf(a[j].v2))and(a[j].s<>0) then//\u56e0\u4e3a\u8bfb\u5165\u6570\u636e\u4e2d\uff0c\u5f53\u4e24\u7ed3\u70b9\u76f8\u540c\u65f6\u4f1a\u51fa\u73b0\u957f\u5ea6\u4e3a0\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5224\u65ad\u662f\u5426\u4fdd\u7559\u8fb9\u65f6\u8981\u6392\u9664\uff0c\u5982\u679c\u6b64\u8fb9\u8fde\u63a5\u7684\u4e24\u7ed3\u70b9\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u5185\u5219\u4fdd\u7559\u6b64\u8fb9\n          begin\n              inc(i);//i\u540e\u79fb\n              ans:=ans+a[j].s;//\u66f4\u65b0\u5149\u7ea4\u603b\u957f\u5ea6\n              union(a[j].v1,a[j].v2);//\u5408\u5e76\u8fde\u63a5\u7684\u4e24\u7ed3\u70b9\n          end;\n          inc(j);//\u63a2\u7a76\u4e0b\u4e00\u6761\u8fb9\n      end;\n      writeln(ans);//\u8f93\u51fa\u7ed3\u679c\nend.\n\n```",
        "postTime": 1454467798,
        "uid": 14130,
        "name": "The_Dark_Knight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "~~pascal\u6765\u4e00\u53d1~~\n\n\u4ee5\u6211\u7684\u5927\u849f\u84bb\u6765\u770b\uff0c\u8fd9\u9898\u76ee\u662f\u4e00\u9898\u5f88\u7ecf\u5178\u7684\u56fe\u8bba\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\uff01\uff01\n\n\u6211\u7684\u505a\u6cd5\u662fprim\u7684\u7b97\u6cd5\uff1b\n\n\u9898\u610f\u662f\uff1a\u5305\u542b\u8fde\u63a5\u5230\u6bcf\u4e2a\u519c\u573a\u7684\u5149\u7ea4\u7684\u6700\u5c0f\u957f\u5ea6\u3002\n\n\u6240\u4ee5\u5f88\u7b26\u5408\u6211\u4eec\u7684**prim**\u7b97\u6cd5\uff1b\n\n**\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca**\uff1a\n\n```pascal\nvar \n    a:array[1..100,1..100]of longint;//\u4e24\u4e2a\u6751\u5e84\u4e4b\u95f4\u8def\u7a0b\u591a\u8fdc\n    dis:array[1..100]of longint;//\u6bcf\u6b21\u66f4\u65b0\u7684\u5230\u76ee\u524d\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    used:array[1..100]of boolean;//\u6709\u6ca1\u6709\u8fde\u4e0a\n    i,j,n,ans,k,sum:longint;\nbegin\n  read(n);\n  for i:=1 to n do dis[i]:=maxlongint;//\u521d\u59cb\u6210\u65e0\u7a77\u5927\n  for i:=1 to n do\n   for j:=1 to n do\n    read(a[i,j]);//\u8f93\u5165\u4efb\u610f\u4e24\u4e2a\u6751\u5e84\u4e4b\u95f4\u7684\u8ddd\u79bb\n  for i:=2 to n do dis[i]:=a[1,i];//\u4ece\u7b2c\u4e00\u4e2a\u6751\u5e84\u5f00\u59cb\u8fde\uff0c\u521d\u59cb\u6bcf\u4e2a\u6751\u5e84\u548c\u7b2c\u4e00\u6751\u5e84\u4e4b\u95f4\u7684\u8ddd\u79bb\n  used[1]:=true;//\u7b2c\u4e00\u4e2a\u5df2\u8054\u901a\n  for i:=2 to n do\n   begin\n    ans:=maxlongint;//\u521d\u59cb\u6210\u6700\u5927\n    for j:=1 to n do\n     if not(used[j])and(dis[j]<ans) then//\u5224\u65ad\u6ca1\u6709\u5728\u5df2\u8054\u901a\u6751\u5e84\u4e2d\n      begin  ans:=dis[j];k:=j;end;//\u6c42\u548c\u5df2\u8054\u901a\u7684\u6751\u5e84\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8054\u901a\u6700\u77ed\u7684\u6751\u5e84\n    sum:=sum+dis[k];//\u8ba1\u7b97\u76ee\u524d\u7684\u603b\u7535\u7f06\u957f\u5ea6\n    used[k]:=true;//\u6807\u8bb0\u5df2\u8054\u901a\n    for j:=1 to n do\n     if not(used[j])and(dis[j]>a[k,j]) then//\u5224\u65ad\u6ca1\u6709\u8054\u901a\n      dis[j]:=a[k,j];//\u66f4\u65b0\u548c\u76ee\u524d\u8054\u901a\u6751\u5e84\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7684\u6700\u77ed\u8ddd\u79bb\n   end;\n   writeln(sum);\nend.\n```\n~~\u5076\u81ea\u5df1\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u8fd8\u7b97\u77ed~~",
        "postTime": 1534732862,
        "uid": 53011,
        "name": "dl__hh6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u9898\u89e3\uff0c\u671b\u901a\u8fc7\uff0c\u8c22\u8c22\n\n------------\n\n\n\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u9898\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u7528\u7684\u662f\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\uff08Kruskal\uff09\uff0c\n\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u666e\u91cc\u59c6\u7b97\u6cd5\uff08Prim\uff09\uff0c~~\u4f46\u6211\u8c8c\u4f3c\u66f4\u559c\u6b22K...~~\n\n\uff08~~\u4ee5\u4e0a\u662f\u5e9f\u8bdd~~\uff09\n\n\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u9700\u8981\u5148\u628a\u8fb9\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u5230\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u6bcf\u4e24\u4e2a\u7ed3\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u7528\u6700\u77ed\u7684\u8fb9\u628a\u4ed6\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u7531\u4e8e\u6709n\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5\u4f1a\u6709n-1\u6761\u8fb9\uff0c\u6211\u4eec\u53ea\u8981\u627e\u5230n-1\u6761\u8fb9\u5c31OK\u4e86\u3002\n\n\u4e0b\u9762\u8bb2\u5982\u4f55\u5b9e\u73b0\uff1a\n\n\u9996\u5148\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53Edge\u6765\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u8be6\u60c5\u89c1\u6ce8\u91ca\n```cpp\nstruct Edge\n{\n    int u,v,w;//u,v\u4ee3\u8868\u8fd9\u4e2a\u8fb9\u7684\u4e24\u7aef\u7684\u7ed3\u70b9\uff0cw\u4ee3\u8868\u6743\u503c\n}e[10001];\n```\n\n\u5e76\u67e5\u96c6\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u591a\u5e9f\u8bdd\u4e86\uff0c\u4e0d\u4f1a\u7684\u7ae5\u978b\u81ea\u5df1\u4e0a\u7f51\u627e\u5ea6\u5a18\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\uff1a\n```cpp\nint getf(int v)\n{\n    if(f[v]==v)\n    {\n      return v;//\u5f53\u81ea\u5df1\u7684\u7956\u5148\u5c31\u662f\u81ea\u5df1\u65f6\uff08\u611f\u89c9\u5f88\u641e\u7b11\uff09\uff0c\u5c31\u7ed3\u675f\u4e86\n    }\n    else{\n        f[v]=getf(f[v]);//\u8def\u5f84\u538b\u7f29\uff0c\u51cf\u77ed\u627e\u7236\u4eb2\u7684\u65f6\u95f4\n        return f[v];\n    }\n}\n```\n\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5224\u65ad\u4e8c\u8005\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\uff08\u5c31\u662f\u662f\u5426\u6709\u5171\u540c\u7684\u7956\u5148\uff09\n```cpp\nint merge(int v,int u)\n{\n    int t1,t2;\n    t1=getf(v);\n    t2=getf(u);\n    if(t1!=t2)//\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u8fde\u8d77\u6765\n    {\n      f[t2]=t1;//t2\u7684\u7236\u4eb2\u662ft1;\n      return 1;//\u53ef\u4ee5\u6267\u884c\n    }\n    return 0;//\u53cd\u4e4b\u4e0d\u80fd\n}\n```\n\u6838\u5fc3\u7684\u51fd\u6570\u5728\u4e0a\u9762\u90fd\u89e3\u91ca\u8fc7\u4e86\uff0c\u4e0b\u9762\u4e0a\u4ee3\u7801\uff08\u4e3a\u4e86\u60a8\u7684\u540d\u5b57\u989c\u8272\u4e0d\u53d8\uff0c\u8bf7\u4e0d\u8981Ctrl+c+Ctrl+v\u54e6\uff09\n```cpp\n#include <iostream>\n#include <algorithm>//\u4f7f\u7528sort\u5feb\u6392\u9700\u8981\u7528\u5230\u54e6\uff08\u8868\u793a\u4e0d\u559c\u6b22\u7528\u4e07\u80fd\u5934\u6587\u4ef6\uff09\nusing namespace std;\nstruct Edge\n{\n    int u,v,w;\n}e[10001];//\u5df2\u89e3\u91ca\nint n,m;\nint f[10001];\nint getf(int v)\n{\n    if(f[v]==v)\n    {\n      return v;\n    }\n    else{\n        f[v]=getf(f[v]);\n        return f[v];\n    }\n}//\u5df2\u89e3\u91ca\nint merge(int v,int u)\n{\n    int t1,t2;\n    t1=getf(v);\n    t2=getf(u);\n    if(t1!=t2)\n    {\n      f[t2]=t1;\n      return 1;\n    }\n    return 0;\n}\nint cmp(Edge xx,Edge yy)//\u6392\u5e8f\u65f6\u9700\u8981\n{\n    return xx.w<yy.w;//\u4ece\u5c0f\u5230\u5927\u6392\n}\nint main()\n{\n    cin>>n;\n    int p=0;\n    for(int i=1;i<=n;i++)\n    {\n      for(int j=1;j<=n;j++)\n      {\n        p++;\n        e[p].u=i;\n        e[p].v=j;\n        cin>>e[p].w;//\u8f93\u5165\n        if(i==j)\n        {\n          e[p].w=2147483647;//\u672c\u8eab\u4e0d\u80fd\u5230\u8fbe\u672c\u8eab\uff0c\u6240\u4ee5\u5f53\u4e24\u4e2a\u7ed3\u70b9\u76f8\u540c\u65f6\uff0c\u628a\u5b83\u8bbe\u4e3a\u6b63\u65e0\u7a77\n        }\n      }\n    }\n    sort(e+1,e+p+1,cmp);//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    for(int i=1;i<=n;i++)\n    {\n      f[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\uff0c\u4e00\u5f00\u59cb\u6bcf\u4e2a\u4eba\u7684\u7956\u5148\u90fd\u662f\u81ea\u5df1\n    }\n    int cnt=0,sum=0;//sum\u7edf\u8ba1\u7b54\u6848\uff0ccnt\u7edf\u8ba1\u5df2\u7ecf\u9009\u7684\u8fb9\u7684\u6761\u6570\n    for(int i=1;;i++)\n    {\n      if(merge(e[i].u,e[i].v))//\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n      {\n        cnt++;//\u8fb9\u6570+1\n        sum+=e[i].w;//\u7b54\u6848\n      }\n      if(cnt==n-1)//\u5f53\u5df2\u7ecf\u6709n-1\u6761\u8fb9\u65f6\uff0c\u9000\u51fa\u5faa\u73af\n      {\n       break;\t\n      }\n    }\n    while(true);//\u9632\u6284\u88ad\n    cout<<sum<<endl;\n}\n```\n\u8c22\u8c22\u5927\u5bb6\uff01",
        "postTime": 1534656818,
        "uid": 113613,
        "name": "ACgod",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "# \u514b\u9c81\u65af\u5361\u5c14\n##  \u9898\u76ee\u80cc\u666f\n\u519c\u6c11\u7ea6\u7ff0\u88ab\u9009\u4e3a\u4ed6\u4eec\u9547\u7684\u9547\u957f\uff01\u4ed6\u5176\u4e2d\u4e00\u4e2a\u7ade\u9009\u627f\u8bfa\u5c31\u662f\u5728\u9547\u4e0a\u5efa\u7acb\u8d77\u4e92\u8054\u7f51\uff0c\u5e76\u8fde\u63a5\u5230\u6240\u6709\u7684\u519c\u573a\u3002\u5f53\u7136\uff0c\u4ed6\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\n\n## \u9898\u76ee\u63cf\u8ff0\n\u7ea6\u7ff0\u5df2\u7ecf\u7ed9\u4ed6\u7684\u519c\u573a\u5b89\u6392\u4e86\u4e00\u6761\u9ad8\u901f\u7684\u7f51\u7edc\u7ebf\u8def\uff0c\u4ed6\u60f3\u628a\u8fd9\u6761\u7ebf\u8def\u5171\u4eab\u7ed9\u5176\u4ed6\u519c\u573a\u3002\u4e3a\u4e86\u7528\u6700\u5c0f\u7684\u6d88\u8d39\uff0c\u4ed6\u60f3\u94fa\u8bbe\u6700\u77ed\u7684\u5149\u7ea4\u53bb\u8fde\u63a5\u6240\u6709\u7684\u519c\u573a\u3002\n\n\u4f60\u5c06\u5f97\u5230\u4e00\u4efd\u5404\u519c\u573a\u4e4b\u95f4\u8fde\u63a5\u8d39\u7528\u7684\u5217\u8868\uff0c\u4f60\u5fc5\u987b\u627e\u51fa\u80fd\u8fde\u63a5\u6240\u6709\u519c\u573a\u5e76\u6240\u7528\u5149\u7ea4\u6700\u77ed\u7684\u65b9\u6848\u3002\u6bcf\u4e24\u4e2a\u519c\u573a\u95f4\u7684\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc7100000\n\n## \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\uff1a \u519c\u573a\u7684\u4e2a\u6570\uff0cN\uff083<=N<=100\uff09\u3002\n\n\u7b2c\u4e8c\u884c..\u7ed3\u5c3e: \u540e\u6765\u7684\u884c\u5305\u542b\u4e86\u4e00\u4e2aN*N\u7684\u77e9\u9635,\u8868\u793a\u6bcf\u4e2a\u519c\u573a\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u7406\u8bba\u4e0a\uff0c\u4ed6\u4eec\u662fN\u884c\uff0c\u6bcf\u884c\u7531N\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u7684\u6570\u7ec4\u6210\uff0c\u5b9e\u9645\u4e0a\uff0c\u4ed6\u4eec\u9650\u5236\u572880\u4e2a\u5b57\u7b26\uff0c\u56e0\u6b64\uff0c\u67d0\u4e9b\u884c\u4f1a\u7d27\u63a5\u7740\u53e6\u4e00\u4e9b\u884c\u3002\u5f53\u7136\uff0c\u5bf9\u89d2\u7ebf\u5c06\u4f1a\u662f0\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6709\u7ebf\u8def\u4ece\u7b2ci\u4e2a\u519c\u573a\u5230\u5b83\u672c\u8eab\u3002\n\n\u8f93\u51fa\u683c\u5f0f\n\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u5176\u4e2d\u5305\u542b\u8fde\u63a5\u5230\u6bcf\u4e2a\u519c\u573a\u7684\u5149\u7ea4\u7684\u6700\u5c0f\u957f\u5ea6\u3002\n### \u6837\u4f8b\n\u8f93\u5165 \n\n4\n\n0 4 9 21\n\n4 0 8 17\n\n9 8 0 16\n\n21 17 16 0\n\n\u8f93\u51fa\n28\n# \u8bb2\u89e3\n## \u7b2c\u4e00\u6b65\uff1a\u5b58\u56fe\n  \u4ece\u6837\u4f8b\u53ef\u4ee5\u770b\u51fa\u8f93\u5165\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6240\u4ee5\u5173\u952e\u662f\u628a\u4e8c\u4f4d\u6570\u7ec4\u8f6c\u6362\u4e3a\u5df2\u8fb9\u7684\u5f62\u5f0f\u5b58\u50a8\u7684\u7ed3\u6784\u4f53\u3002\n  \u5148\u4e0a\u5b58\u56fe\u7684\u4ee3\u7801\uff1a\n  ```cpp\n   for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        {\n            cin>>a;\n            if(a!=0&&i<j)//\u5b58\u56fe\u7b56\u7565\u3002\n            {\n                q[m].u=i;\n                q[m].v=j;\n                q[m].w=a;\n                m++;\n            }\n        }\n```\n\n\tm\u7c7b\u4f3c\u4e0e\u4e00\u4e2a\u6307\u9488\uff0c\u7ed9\u7ed3\u6784\u4f53\u5b58\u50a8\u7528\u7684\u3002\n    \u5b58\u56fe\u7684\u4ee3\u7801\u5173\u952e\u53e5\u4e3aif(a!=0&&i<j)\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u597d\u7684\u5b58\u50a8\u8fb9\u7684\u5173\u7cfb\u4e0e\u6743\u503c\u4e86\n## \u7b2c\u4e8c\u6b65\uff1a\u6392\u5e8f\n  \u7531\u4e8e\u662f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u7528sort\u6392\u5e8f\u7684\u65f6\u5019\u8981\u4e13\u95e8\u5199\u4e00\u4e2acmp\u7684bool\u51fd\u6570\u6bd4\u8f83\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n  ```cpp\nbool cm_p(que a,que b)\n{\n    return a.w<b.w;\n}\n                    \nsort(q,q+m,cm_p);//\u4e00\u5b9a\u8981\u52a0\u4e0a\u5934\u6587\u4ef6algorithm\n```\n  \u6700\u5c0f\u751f\u6210\u6811\u5f53\u7136\u662f\u5c06\u8fb9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5566\u3002\n  \u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0cc++\u7528\u5230sort\u6392\u5e8f\u65f6\u987b\u8981\u52a0\u4e0a\u5934\u6587\u4ef6\uff1a\n  ```cpp\n#include <algorithm>\n```\n## \u7b2c\u4e09\u6b65\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u901a\u8fc7\u5e76\u67e5\u96c6\u5224\u65ad\n\u9996\u5148\u5e76\u67e5\u96c6\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nint getf(int x)\n{\n    if(f[x]==x) return x;//\u5982\u679c\u4ed6\u7684\u7236\u4eb2\u5c31\u662f\u4ed6\u81ea\u5df1\uff0c\u76f4\u63a5\u8fd4\u56dex \n    else\n    {\n        f[x]=getf(f[x]);//\u8def\u5f84\u538b\u7f29\uff0c\u628a\u4ed6\u7684\u7956\u5b97\u4e5f\u5e26\u4e0a \n        return f[x];\n    }\n}\nbool hebing(int a,int b)\n{\n    int t1,t2;\n    t1=getf(a);//\u5206\u522b\u5bfb\u627e\u4e24\u4e2a\u8282\u70b9\u7684\u7236\u4eb2 \n    t2=getf(b);\n    if(t1!=t2)//\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u7236\u4eb2\u4e0d\u540c\uff0c\u8868\u660e\u9700\u8981\u5408\u5e76 \n    {\n        f[t2]=t1;//\u9760\u53f3\u539f\u5219 \n        return true;\n    }\n    return false;\n}\n```\n\u5173\u4e8e\u5e76\u67e5\u96c6\u7684\u5177\u4f53\u8bb2\u89e3\u89c1\u6211\u7684\u53e6\u4e00\u4e2a\u535a\u5ba2\u6587\u7ae0\uff1a\n[\u5e76\u67e5\u96c6](https://www.luogu.org/blog/tangjerryprogram/solution-p3366)\n# \u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n\n#include <iostream>\n#include <algorithm>//\u7528\u5230\u4e86sort\u4e00\u5b9a\u8981\u52a0\u4e0a\u7684 \n\nusing namespace std;\nstruct que\n{\n    int u;\n    int v;\n    int w;\n}q[10005];//\u901a\u8fc7\u7ed3\u6784\u4f53\u6765\u5b58\u8fb9 \nint f[305];//\u7236\u4eb2\u6570\u7ec4\uff0cf[i]\u8868\u793ai\u7684\u7236\u4eb2\u4e3af[i] \nint ans,countt;\nint a,n,m;\nbool cm_p(que a,que b)\n{\n    return a.w<b.w;\n}\nint getf(int x)\n{\n    if(f[x]==x) return x;//\u5982\u679c\u4ed6\u7684\u7236\u4eb2\u5c31\u662f\u4ed6\u81ea\u5df1\uff0c\u76f4\u63a5\u8fd4\u56dex \n    else\n    {\n        f[x]=getf(f[x]);//\u8def\u5f84\u538b\u7f29\uff0c\u628a\u4ed6\u7684\u7956\u5b97\u4e5f\u5e26\u4e0a \n        return f[x];\n    }\n}\nbool hebing(int a,int b)\n{\n    int t1,t2;\n    t1=getf(a);//\u5206\u522b\u5bfb\u627e\u4e24\u4e2a\u8282\u70b9\u7684\u7236\u4eb2 \n    t2=getf(b);\n    if(t1!=t2)//\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u7236\u4eb2\u4e0d\u540c\uff0c\u8868\u660e\u9700\u8981\u5408\u5e76 \n    {\n        f[t2]=t1;//\u9760\u53f3\u539f\u5219 \n        return true;\n    }\n    return false;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) f[i]=i;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        {\n            cin>>a;\n            if(a!=0&&i<j)//\u5b58\u8fb9\u89c4\u5219 \n            {\n                q[m].u=i;\n                q[m].v=j;\n                q[m].w=a;\n                m++;\n            }\n        }\n    sort(q,q+m,cm_p);//\u6392\u5e8f\uff0c\u9700\u8981\u81ea\u5df1\u5199cmp \n    for(int i=0;i<m;i++)\n    {\n        if(hebing(q[i].u,q[i].v))\n        {\n            ans+=q[i].w;//\u8ba1\u7b97\u6700\u540e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c \n            countt++;//\u8ba1\u6570 \n        }\n        if(countt==n-1) break;//\u6811\u7684\u8282\u70b9\u4e2a\u6570\u662f\u4ed6\u8fb9\u7684n+1 \n    }\n    cout<<ans;\n    return 0;\n}\n```\n\n## \u603b\u7ed3\n  \u4e4b\u524d\u4e5f\u5199\u8fc7\u51e0\u7bc7\u9898\u89e3\uff0c\u4f46\u662f\u901a\u8fc7\u7684\u5f88\u5c11\uff0c\u6240\u4ee5\u8bda\u5fc3\u5e0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u80fd\u901a\u8fc7\u3002\n  \u6211\u5728\u4ee3\u7801\u91cc\u52a0\u5165\u4e86\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u5230\u5927\u5bb6\uff0c\u6b22\u8fce\u6765\u6211\u7684\u535a\u5ba2\u901b\uff1a\n  https://www.luogu.org/blog/tangjerryprogram/\n  \u5982\u679c\u6709\u95ee\u9898\u4e5f\u53ef\u4ee5\u52a0\u6211\u7684qq\uff1a2332596092\n##   \u5b8c\u7f8e\u7ed3\u675f\n\n",
        "postTime": 1572771136,
        "uid": 84666,
        "name": "tangjerry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u6ca1\u6709Java\u7684\u9898\u89e3\uff0c\u6765\u4e00\u53d1\u5e0c\u671b\u53ef\u4ee5\u8fc7\u5ba1\n---\n\n\u201c\u6700\u77ed\u7f51\u7edc\u201d\u6c42-->**\u8fde\u63a5\u5230\u6bcf\u4e2a\u519c\u573a\u7684\u5149\u7ea4\u7684\u6700\u5c0f\u957f\u5ea6**\n\n\u9996\u5148\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff1a\n1. \u628a\u9898\u76ee\u4e2d\u7684\u63cf\u8ff0\uff0c\u60f3\u8c61\u6210\u56fe-->\u65e0\u5411\u56fe-->\u6709\u6743\u65e0\u5411\u56fe\n2. \u56fe\u4e2d\u8fde\u63a5\u5404\u4e2a\u8282\u70b9\u6240\u9700\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u548c-->MST,\u6700\u5c0f\u751f\u6210\u6811\n3. MST\u7684\u7ecf\u5178\u7b97\u6cd5 _**Kruskal\u7b97\u6cd5**_ \u548c _**Prim\u7b97\u6cd5**_ \n4. \u672c\u4eba\u559c\u6b22Kruskal\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5173\u952e\u70b9\u662f\u53d6N-1\u6761\u8fb9\uff0c\u53ef\u4ee5\u8fde\u901a\u56fe\u4e2d\u7684N\u4e2a\u70b9\n5. \u8003\u5bdf\u56fe\u7684\u8fde\u901a\u6027\u5c31\u8981\u4f7f\u7528\u5e76\u67e5\u96c6Union-Find\n6. \u56fe\u6a21\u578b\uff0cKruskal\u7b97\u6cd5\u8fdb\u884cMST\uff0c\u53ea\u8003\u8651\u8fb9\u548c\u8fb9\u7684\u6743\u503c\uff0c\u6240\u4ee5\u53ea\u662f\u7528int[][]\u5c31\u591f\u4e86\n\n---\n\u7136\u540e \u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\u4e2d\u5173\u952e\u70b9\uff1a\n1. IO\u90e8\u5206, \u901a\u5e38\u60c5\u51b5\u4e0b\u4f7f\u7528StreamTokenizer \u6027\u80fd\u66f4\u9ad8\u4e00\u4e9b\n\n```java\n        StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n```\n\n2. \u56fe\u7684\u8868\u793a\uff0c\u4f7f\u7528int[N][3] \u5b58\u50a8\u6d4b\u8bd5\u6570\u636e\u4e2d\u90bb\u63a5\u77e9\u9635\u4e2d\u7684\u8fb9\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u56fe\n\u6240\u4ee5\u90bb\u63a5\u77e9\u9635\u7684\u6570\u636e\u662f\u8f74\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u53ea\u9700\u5904\u7406\u4e0a\u4e09\u89d2\u6216\u8005\u4e0b\u4e09\u89d2\nint[i][0]\\int[i][1] \u5b58\u50a8\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\nint[i][2] \u5b58\u50a8\u8fb9\u7684\u6743\u503c\n\n```java\n\tint[][] edges = new int[cnt][3];\n\tint index = 0;\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                in.nextToken();\n                if (i == j) continue;//\u5bf9\u89d2\u7ebf\u4e0d\u5904\u7406\n                if (i > j) continue;//\u653e\u5f03\u4e0b\u4e09\u89d2\u6570\u636e\n                edges[index][0] = i;\n                edges[index][1] = j;\n                edges[index][2] = (int) in.nval;\n                index++;\n            }\n        }\n```\n3. Kruskal\u7b97\u6cd5\u8981\u6c42\u5c06\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0cMergerSort\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\n\u4f7f\u7528Comparator\u8fdb\u884c\u6392\u5e8f\uff0c\u5728JDK8\u7684\u73af\u5883\u4e0b\u6bd4\u4f7f\u7528lambda\u6548\u7387\u8981\u9ad8\u3002\n\n```java\n        //\u5f3a\u5236\u4f7f\u7528MergerSort \u8fdb\u884c\u6392\u5e8f\n        System.setProperty(\"java.util.Arrays.useLegacyMergeSort\", \"true\");\n        Arrays.sort(edges, 0, index, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n                return o1[2] - o2[2];\n            }\n        });\n```\n\n4. \u5e76\u67e5\u96c6\u7b97\u6cd5\uff0c\u8fd9\u91cc\u4f7f\u7528\u7b80\u5355\u5e76\u67e5\u96c6\uff0c\u6240\u8c13\u201c\u7b80\u5355\u201d\u662f\u6307Union\u65f6\uff0c\u4f7f\u7528\u4e86\u7b80\u5355\u7684\u5408\u5e76\u539f\u5219,\u4e0d\u8003\u5bdf\u8def\u5f84\u538b\u7f29\u7684\u6210\u672c\u95ee\u9898\n\n```java\n    private static int find(int c, int[] p) {\n        if (p[c] == c) return c;\n        return p[c] = find(p[c], p);\n    }\n\n    static boolean union(int c1, int c2, int[] p) {\n        int p1 = find(c1, p);\n        int p2 = find(c2, p);\n        if (p1 == p2) return false;\n        //\u7b80\u5355\u7684\u5408\u5e76\u539f\u5219\n        if (p1 < p2) p[p2] = p1;\n        else p[p1] = p2;\n        return true;\n    }\n```\n5.  Kruskal\u7b97\u6cd5\u7684\u6838\u5fc3\u4ee3\u7801\uff0c cnt\u8bb0\u5f55\u5df2\u7ecf\u9009\u62e9\u8fb9\u7684\u4e2a\u6570\uff0csum\u9009\u62e9\u8fb9\u7684\u6743\u503c\u548c\uff0cunion\u6210\u529f\uff08true\uff09\u610f\u5473\u9009\u62e9\u4e86\u5f53\u524d\u8fb9\u3002\n\n\n```java\n\tfor (int i = 0; i < index && cnt < N - 1; i++) {\n            if (union(edges[i][1], edges[i][0], p)) {\n                cnt++;\n                sum += edges[i][2];\n            }\n        }\n```\n\n\n---\n\u5b8c\u6574\u4ee3\u7801\n```java\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.StreamTokenizer;\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        in.nextToken();\n        int N = (int) in.nval;\n        int cnt = (N * N) >> 1;\n        int[][] edges = new int[cnt][3];\n        int index = 0;\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                in.nextToken();\n                if (i == j) continue;\n                if (i > j) continue;\n                edges[index][0] = i;\n                edges[index][1] = j;\n                edges[index][2] = (int) in.nval;\n                index++;\n            }\n        }\n        System.setProperty(\"java.util.Arrays.useLegacyMergeSort\", \"true\");\n        Arrays.sort(edges, 0, index, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n                return o1[2] - o2[2];\n            }\n        });\n\n        int[] p = new int[N + 1];\n        for (int i = 1; i <= N; i++) p[i] = i;\n        int sum = 0;\n        cnt = 0;\n        for (int i = 0; i < index && cnt < N - 1; i++) {\n            if (union(edges[i][1], edges[i][0], p)) {\n                cnt++;\n                sum += edges[i][2];\n            }\n        }\n        System.out.println(sum);\n\n    }\n\n    private static int find(int c, int[] p) {\n        if (p[c] == c) return c;\n        return p[c] = find(p[c], p);\n    }\n\n    static boolean union(int c1, int c2, int[] p) {\n        int p1 = find(c1, p);\n        int p2 = find(c2, p);\n        if (p1 == p2) return false;\n        if (p1 < p2) p[p2] = p1;\n        else p[p1] = p2;\n        return true;\n    }\n}\n\n```\n",
        "postTime": 1571843446,
        "uid": 236490,
        "name": "\u738b\u9e4fPRO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u975e\u5e38\u5178\u578b\u7684kruskal\u7b97\u6cd5\uff01\uff01\uff01\uff08\u76f8\u4fe1\u5927\u4f6c\u4eec\u90fd\u4f1a\u505a\u2014\u2014\u2014O(\u2229\\_\u2229)O~\uff09\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u5f88\u7b80\u5355\uff0c\u6700\u5c0f\u751f\u6210\u6811\uff01\n\n\u9996\u5148\u5e94\u5148\u8f93\u5165\u6570\u636e--\u6309\u7167\u9898\u610f\u8f93\u5165\u5c31\u53ef\u3002\u3002\uff08\u4e0d\u76f8\u4fe1\u4f60\u4e0d\u4f1a\u3002\u3002\uff09\n\n\u5176\u6b21\uff0cfather\u6570\u7ec4\u521d\u59cb\u5316\uff08\u76f8\u4fe1\u4f60\u4f1a\u521d\u59cb\u5316\u3002\u3002\uff09\n\n\u63a5\u7740\uff0c\u8fdb\u884c\u6bd4\u8f83\u957f\u5ea6\u7684\u5927\u5c0f\uff0c\u5f53\u7136\uff0c\u6211\u7528\u7684\u7ed3\u6784\u4f53\uff08\u7ed3\u6784\u4f53\u4ec0\u4e48\u4e1c\u897f\uff1f\uff09\uff0c\u5927\u4f6c\u4eec\u4e5f\u53ef\u4ee5\u7528\u5f88\u590d\u6742\u7684\u6570\u7ec4\uff0c\u5f53\u7136\u5f31\u5f31\u7684\u6211\u8ba4\u4e3a\u5f00\u7ed3\u6784\u4f53\u66f4\u65b9\u4fbf\u3002\n\n\u7136\u540e\uff0c\u5c31\u8fdb\u5165\u4e3b\u7a0b\u5e8f\u4e86\uff0c\u96c6\u5408\u5916\u7684\u8fdb\u884c\u8fde\u63a5\uff0c\u96c6\u5408\u5185\u7684\u820d\u53bb\uff0c\u8bbe\u4e00\u8ba1\u6570\u53d8\u91cf\uff0c\u8fbe\u5230\u70b9\u7684 \u6b21\u6570-1\uff08\u5373\u8fb9\u6570\uff09\u9000\u51fa\u5faa\u73af\n\n\u6700\u540e\u8f93\u51fa\u7ed3\u679c\u5c31\u53ef\uff01\uff01\uff01\n\n\u76f8\u4fe1\u5927\u4f6c\u4eec\u4e00\u5b9a\u4f1a\u505a\u4f1a\u4f18\u5316\uff01\uff01\uff01\n\n    \n        \n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nnamespace std;\nint n,fa[100001],tot,m,x,k;\nstruct po                                    //\u00b6\u00a8\u00d2\u00e5\u00b5\u00c4\u00bd\u00e1\u00b9\u00b9\u00cc\u00e5 \n{\n    int s; int w; int j;\n}a[100001];\nint cmp(const po &aa,const po &bb)              //\u00ca\u00ae\u00b7\u00d6\u00d6\u00d8\u00d2\u00aa\u00b5\u00c4\u00bd\u00e1\u00b9\u00b9\u00cc\u00e5\u00b1\u00c8\u00bd\u00cf\u00c4\u00a3\u00b0\u00e5\u00a3\u00a1\u00a3\u00a1\u00a3\u00a1 \n{\n    if(aa.j<bb.j) return 1;\n    else return 0;\n}\nint fat(int x)                              //\u00c5\u00d0\u00b6\u00cf\u00c4\u00a3\u00b0\u00e5 \n{\n    if(fa[x]!=x) fa[x]=fat(fa[x]);\n    return fa[x];\n}\nint main()\n{\n    freopen(\"7.in\",\"r\",stdin);\n    cin>>n;\n    for(int i=1;i<=n;i++)\n     for(int j=1;j<=n;j++)\n      {\n          cin>>x;\n          if(x!=0)\n          {\n              m++;\n              a[m].s=i; a[m].w=j; a[m].j=x;\n          }\n      }\n    for(int i=1;i<=n;i++)\n     fa[i]=i;                                  // \u00b3\u00f5\u00ca\u00bc\u00bb\u00affather\u00ca\u00fd\u00d7\u00e9 \n    sort(a+1,a+m+1,cmp);                       //\u00b3\u00a4\u00b6\u00c8\u00bd\u00f8\u00d0\u00d0\u00b1\u00c8\u00bd\u00cf \n    for(int i=1;i<=m;i++)                      //\u00b5\u00da\u00bc\u00b8\u00b8\u00f6\u00ca\u00fd \n    {\n        int faa=fat(a[i].s);                     \n        int fab=fat(a[i].w);\n        if(faa!=fab)                            //\u00ca\u00c7\u00b7\u00f1\u00d2\u00d1\u00be\u00ad\u00bd\u00f8\u00c8\u00eb\u00bc\u00af\u00ba\u00cf \n        {\n        fa[faa]=fab;                            //\u00bc\u00c6\u00c8\u00eb\u00bc\u00af\u00ba\u00cf\u00a3\u00a8\u00bd\u00f8\u00c8\u00eb\u00d2\u00bb\u00b1\u00e9\u00bc\u00b4\u00bf\u00c9\u00a3\u00a9 \n        tot+=a[i].j;                           //\u00d7\u00ee\u00b6\u00cc\u00b3\u00a4\u00b6\u00c8\u00bd\u00f8\u00d0\u00d0\u00cf\u00e0\u00bc\u00d3 \n        k++;                                    //\u00bc\u00c6\u00ca\u00fd\u00ba\u00af\u00ca\u00fd\u00bd\u00f8\u00d0\u00d0\u00cf\u00e0\u00bc\u00d3 \n        }\n        if(k==n-1) break;    \n    }\n    cout<<tot<<endl;\n    return 0;\n}\n```",
        "postTime": 1485154523,
        "uid": 35652,
        "name": "QQ3111822945",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "prim\n```cpp\n\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\nint g[310][310];\nbool pd[310]={false};//0 is false;\nint Min[310];\nint Mst=0;\nint main()\n{\n    int n,m;\n    cin>>n;\n    for(int i=0;i<=300;i++)//\u5c06\u90bb\u63a5\u77e9\u9635\u8d4b\u521d\u503c \n      for(int j=1;j<=300;j++)\n        g[i][j]=2000000000;\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=n;j++)\n        scanf(\"%d\",&g[i][j]);\n    for(int i=1;i<=309;i++)//\u6700\u5c0f\u6743\u503c\u6570\u7ec4\u8d4b\u521d\u503c \n      Min[i]=g[1][i];\n    pd[1]=1;\n    for(int i=1;i<n;i++)\n      {\n        int j;\n        int zuixiao=2000000000;\n        int zui;//zui\u5b58\u6700\u5c0f\u503c\u7684 \n        for(j=1;j<=n;j++)//\u64c2\u53f0\u6bd4\u8f83\u627e\u6700\u5c0f\u7684\n          {\n            if(pd[j]==0)\n              if(zuixiao>Min[j])\n                {zuixiao=Min[j];zui=j;}\n          }\n        pd[zui]=1;//\u6807\u8bb0\n        Mst+=zuixiao;\n        for(int k=1;k<=n;k++)//\u66f4\u65b0\n          {\n            if(g[zui][k]<Min[k]&&pd[k]==0)\n              Min[k]=g[zui][k];\n          }\n\n      }\n      cout<<Mst; \n} \n\n```",
        "postTime": 1455806438,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "```cpp\n\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N,vset[1000],tcnt,cnt,sum;\nstruct Node{int x,y,cost;}edge[100100];\nbool cmp(Node x,Node y){return x.cost<y.cost;}\nint find(int x){return x==vset[x] ? x : vset[x]=find(vset[x]);} \nint judge(int x,int y){if(find(x)!=find(y)){vset[find(y)]=find(x);return 1;}return 0;}\nvoid init()//\u5c06\u77e9\u9635\u6570\u636e\u8f6c\u6362\u4e3a\u8fb9\u96c6\uff08\u867d\u7136\u4f1a\u6709\u91cd\u590d\u8fb9\u6bd4\u59821-2\u548c2-1\u4f46\u662f\u8fd9\u4fe9\u5e76\u67e5\u96c6\u7956\u5148\u4e00\u6837\u6240\u4ee5\u6ca1\u4e8b\uff0c\u800c\u4e14\u5e76\u67e5\u96c6\u6709\u8def\u5f84\u538b\u7f29\u6240\u4ee5\u5c31\u7b97\u5224\u65ad\u4e5f\u4e0d\u4f1a\u8017\u8d39\u591a\u5c11\u65f6\u95f4\uff09\n{\n    cin>>N;\n    int temp;\n    for(int i=1;i<=N;i++)\n        for(int k=1;k<=N;k++)\n        {\n            cin>>temp;\n            if(temp)\n            {edge[++tcnt].cost=temp; edge[tcnt].x=i;   edge[tcnt].y=k;}\n        }\n    sort(edge+1,edge+tcnt+1,cmp);\n    for(int i=1;i<=N;i++)\n        vset[i]=i;\n}\nint main()\n{\n    init();\n    for(int i=1;i<=tcnt;i++)//kruskal\u6a21\u677f\u76f4\u63a5\u5957\u7528\n    {\n        if(judge(edge[i].x,edge[i].y))\n        {\n            cnt++;sum+=edge[i].cost;\n        }\n        if(cnt==N-1)\n            break;\n    }\n    cout<<sum;\n    return 0;\n}\n\n```",
        "postTime": 1445877290,
        "uid": 896,
        "name": "SiTer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u4e0d\u7528\u89e3\u91ca\u4ec0\u4e48\u4e86\u5427\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\u3002\n\n\u7ed9\u51faKruskal\u7684\u4ee3\u7801\n\n```cpp\n\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<vector>\nusing namespace std;\nint n;\nstruct Edge\n{\n    int U, V, W;\n    Edge(int u, int v, int w) :U(u), V(v), W(w){}\n};\nvector<Edge> Edges;\nbool cmp(const int& a, const int& b)\n{\n    return Edges[a].W < Edges[b].W;\n}\nint p[10000], r[10000];\nint find(int x)\n{\n    return p[x] == x ? x : p[x] = find(p[x]);\n}\nint Kruskal()\n{\n    int ans = 0, m = Edges.size();\n    for (int i = 0; i < n; i++) p[i] = i;\n    for (int i = 0; i < m; i++) r[i] = i;\n    sort(r, r + m, cmp);\n    for (int i = 0; i < m; i++)\n    {\n        int e = r[i], x = find(Edges[e].U), y = find(Edges[e].V);\n        if (x != y)\n        {\n            ans += Edges[e].W;\n            p[x] = y;\n        }\n    }\n    return ans;\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            int x;\n            cin >> x;\n            if (j < i)\n            {\n                Edges.push_back(Edge(i, j, x));\n            }\n        }\n    }\n    cout << Kruskal();\n}\n\n```",
        "postTime": 1429534704,
        "uid": 6210,
        "name": "sqc1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u770b\u770b\u9898\u76ee\u3002\u60f3\u4e00\u60f3\u5176\u5b9e\u5f88\u7b80\u5355\u3002\u8fd9\u4e0d\u5c31\u662f**\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811**\u5417\uff1f\n\u7136\u540e\u4ee5\u90bb\u63a5\u77e9\u9635\u7684\u5f62\u5f0f\u8bfb\u5165\u6bcf\u4e00\u6761\u8fb9\u3002\n\u90a3\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u4e2a\u5565\uff1f\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u53ea\u7559\u4e0b\u6700\u77ed\u7684n-1\u6761\u8fb9\u7684\u56fe\u3002\u4e3a\u4ec0\u4e48\u53ea\u6709n-1\u6761\u8fb9\u5462\uff1f\u4f60\u60f3\uff0c\u4e00\u68f5\u6811\u6709n\u4e2a\u9876\u70b9\uff0c\u80af\u5b9a\u53ea\u6709n-1\u6761\u8fb9\u554a\uff01\n\n\n------------\n\n# \u7b97\u6cd5\u5206\u6790\n\u90a3\u600e\u4e48\u6c42\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u5462\uff1f\u6211\u8fd9\u91cc\u7528\u5927\u540d\u9f0e\u9f0e\u7684Kruskal\u7b97\u6cd5\u3002\n**\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b**\nstep1:\u8bfb\u5165\u6240\u6709\u8fb9\uff0c\u5b58\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\u4e2d\u3002\n\nstep2:\u628a\u4ed6\u4eec\u6309\u7167\u8fb9\u957f\u6392\u5e8f\n\nstep3:\u770b\u4e00\u770b\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\uff08\u65e0\u5411\u56fe\uff09\u662f\u5426\u5df2\u7ecf\u8054\u901a\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u9009\u7528\u8fd9\u6761\u8fb9\uff0ctot++\uff0c\u5c06\u8fd9\u4e24\u4e2a\u70b9\u8bbe\u4e3a\u5df2\u8054\u901a\u3002\n\nstep4:\u91cd\u590d\u6267\u884cstep3\uff0c\u76f4\u5230\u9009\u62e9\u4e86n-1\u6761\u8fb9\uff0c\u6216\u65e0\u8fb9\u53ef\u9009\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u6bd4\u8f83\u96be\u7684\u4e00\u70b9\u662f**\u5982\u4f55\u5224\u65ad\u4e24\u70b9\u5df2\u7ecf\u8054\u901a**\uff0c\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\u3002\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u5c31\u9009\u7528\u8fd9\u6761\u8fb9\u5e76\u4e14\u5408\u5e76\u4e24\u4e2a\u70b9\u3002\u6ca1\u6709\u5b66\u8fc7\u5e76\u67e5\u96c6\u7684\u7ae5\u978b\uff0c\u81ea\u5df1\u53bb\u767e\u5ea6\u4e00\u4e0b\u5427\uff01\n\n\u63a5\u4e0b\u6765\uff0c\u4e0a\u4ee3\u7801\uff01\n```cpp\n#include<iostream>//\u9002\u7528\u4e8e\u65e0\u5411\u56fe \n#include<algorithm>\n#include<stdio.h>\nusing namespace std;\nclass UFS//\u6211\u628a\u5e76\u67e5\u96c6\uff0c\u5199\u6210\u4e86\u4e00\u4e2aclass\n{\n    public:\n\tint f[1001];\n    UFS()\n    {\n        init(1000);\n    }\n    void init(int n)\n    {\n        for (int i = 0;i <=n;++i)\n        {\n            f[i] = i;\n        }\n    }\n    int find(int x)\n    {\n        if(f[x]==x)\n        \treturn x;\n\t\tf[x]=find(f[x]);\n\t\treturn f[x];\n    }\n    void merge(int x, int y)\n    {\n        x = find(x);\n        y = find(y);\n        if (x == y) return;\n        f[x]=y;\n    }\n    bool same(int x, int y)\n    {\n        return (find(x)==find(y));\n    }\n};\nstruct Edge\n{\n\tint from,to,len;\t\n};\nbool cmp(Edge a,Edge b)\n{\n\treturn a.len<b.len;\n}\nEdge edge[100*100+1];//\u7528\u4e8e\u5b58\u50a8\u8fb9\u7684\u7ed3\u6784\u4f53\u6570\u7ec4\nint num=0;\nint n;\nint ans=0;\nint tot=0;\nUFS ufs;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tint l;\n\t\t\tcin>>l;\n\t\t\tif(i==j)//\u81ea\u5df1\u63a5\u5230\u81ea\u5df1\u7684\u8fb9\u5c31\u4e0d\u7b97\u4e86\n\t\t\t\tcontinue;\n\t\t\tnum++;\n\t\t\tedge[num].from=i;\n\t\t\tedge[num].to=j;\n\t\t\tedge[num].len=l;\n\t\t}\n\tsort(edge+1,edge+num,cmp);//\u6309\u7167\u8fb9\u957f\u6392\u5e8f\n\tfor(int i=1;i<=num;i++);//Kruskal\u7b97\u6cd5\u7684step3\u90e8\u5206\n\t{\n\t\tif(tot==n-1)\n\t\t\tbreak;\n\t\tif(ufs.same(edge[i].from,edge[i].to))//\u5df2\u8054\u901a\u7684\u8fb9\u4e0d\u9009\n\t\t\tcontinue;\n\t\tans+=edge[i].len;\n\t\tufs.merge(edge[i].from,edge[i].to);//\u5408\u5e76\u4e24\u4e2a\u70b9\n\t\ttot++;\n\t}\n\tcout<<ans;//\u8f93\u51fa\u89e3\u7b54\n\treturn 0;\n}\n```\n\n**\u4eb2\u6d4b\u80fdAC\uff0c\u4e0d\u8fc7\uff0c\u8bf7\u4e0d\u8981\u6284\u88ad\u3002\u5982\u679c\u4f60\u4eec\u6267\u610f\u8981copy\u6211\u7684\u4ee3\u7801\uff0c\u6211\u7ed9\u4f60\u4eec\u7559\u4e86\u4e2a\u60ca\u559c\u54df\uff01**\n\n\u9898\u89e3\u5230\u6b64\u4e3a\u6b62\uff0c\u62dc\u62dc\uff01\n",
        "postTime": 1570942518,
        "uid": 113968,
        "name": "USER113968",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7528kruskal\u6cd5\uff08\u8981\u7528\u5e76\u67e5\u96c6\uff09\n\n\u5b9e\u5728\u6ca1\u529b\u6c14\u518d\u628a\u4e24\u4e2a\u7b97\u6cd5\u5f88\u8be6\u7ec6\u7684\u8bf4\u4e00\u904d\u4e86\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u6d89\u53ca\uff0c\u53ef\u4ee5\u5148\u770b\u4e0b\u4e00\u672c\u901a\u6216\u8005[\u6211\u4e4b\u524d\u5199\u7684\u9898\u89e3](https://zhaoqi.blog.luogu.org/solution-p2820)\n\n\u57fa\u672c\u662f\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u8bfb\u5165\u6bcf\u6761\u8fb9\u7136\u540e\u6392\u5e8f\uff0c\u4f9d\u6b21\u679a\u4e3e\n\n\u5982\u679c\u4e24\u70b9\u6ca1\u6709\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5c31\u5408\u5e76\uff0c\u7b54\u6848\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u8fb9\u6570\u52a0\u4e00\uff0c\u5f53\u8fb9\u6570\u7b49\u4e8en-1\uff08\u5982\u679c\u66f4\u5c0f\u4e0d\u53ef\u80fd\u628a\u6bcf\u4e2a\u70b9\u90fd\u8fde\u63a5\uff09\u65f6\u9000\u51fa\u5faa\u73af\n\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n;\nstruct node{\n\tint a,b;\n\tint jl;\n}dis[10007];//\u4fdd\u5b58\u8fb9\nint fa[107];//\u5e76\u67e5\u96c6\uff0c\u4fdd\u5b58\u7956\u5148\nint ans;//\u7b54\u6848\nint bs;//\u8fb9\u6570\nint fi(int x){\n\tif(fa[x]!=x)fa[x]=fi(fa[x]);\n\treturn fa[x];//\u627e\u7956\u5148\n}\nvoid hb(int x,int y){\n\tfa[x]=y;\n\treturn;//\u5408\u5e76\n}\nbool cmp(node x,node y){\n\treturn x.jl<y.jl;//\u6309\u8fb9\u6743\u6392\u5e8f\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++){\n    \t\t//\u8fd9\u91cc\u8bfb\u5165\u8981\u6ce8\u610f\u4e0b\uff0c\u7b2cx\u6761\u8fb9\u53ef\u4ee5\u8868\u793a\u4e3a\u7b2c\uff08i-1\uff09*n+j\u6761\u8fb9\n\t\tdis[(i-1)*n+j].a=i;\n\t\tdis[(i-1)*n+j].b=j;\n\t\tcin>>dis[(i-1)*n+j].jl;\n\t\tif(dis[(i-1)*n+j].jl==0)dis[i].jl=0x3f3f3f3f;//\u4e0d\u7136\u5c31\u4f1a\u6392\u5728\u524d\u9762\uff0c\u5230\u65f6\u5019\u5224\u65ad\u4e5f\u884c\n\t}\n\tfor(int i=1;i<=n;i++)\n\tfa[i]=i;//\u5148\u628a\u7956\u5148\u6539\u6210\u6bcf\u4e2a\u4eba\u81ea\u5df1\n\tsort(dis+1,dis+n*n-n+1,cmp);//\u6392\u5e8f\n\tfor(int i=1;i<=n*n-n;i++){\n\t\tint x=dis[i].a;\n\t\tint y=dis[i].b;//\u4e3a\u5199\u4ee3\u7801\u65b9\u4fbf\n\t\tif(fi(x)!=fi(y)){//\u4e0d\u5728\u540c\u4e00\u96c6\u5408\n\t\t\thb(fi(x),fi(y));//\u5408\u5e76\n\t\t\tbs++;//\u8fb9\u6570\u52a0\u4e00\n\t\t\tans+=dis[i].jl;//\u52a0\u4e0a\u8fb9\u6743\n\t\t}\n\t\tif(bs==n-1)break;//\u5df2\u5168\u90e8\u8fde\u63a5\n\t}\n\tcout<<ans<<endl;//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1566369059,
        "uid": 164840,
        "name": "zhaowangji",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "### \u6700\u8fd1\u849f\u84bb\u5b66\u4e86\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c \u5199\u7bc7\u9898\u89e3\u5de9\u56fa\u4e00\u4e0b\u3002\n\n\u8001\u89c4\u77e9\uff0c\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u3002\n\n\n------------\n\n\u9996\u5148\uff0c\u5224\u65ad\u662f\u6700\u77ed\u8def\u8fd8\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\u7531\u4e8e\u8981\u4f7f**\u6bcf\u4e2a\u70b9\u76f8\u4e92\u8fde\u901a**\uff0c\u56e0\u6b64\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\u8fd9\u9053\u9898\u5927\u5bb6\u4e00\u770b\u4fbf\u77e5\u9053\u662f\u6bd4\u8f83\u88f8\u7684\u4e86\u3002\n\n\u56e0\u4e3a\u662f\u7a20\u5bc6\u56fe\uff0c\u4e14$n$\u5f88\u5c0f\uff0c\u7528\u4ec0\u4e48\u65b9\u6cd5\u90fd\u53ef\u4ee5\u8fc7\u3002\u8fd9\u91cc\u6211\u63a8\u8350$Prim$\u52a0\u5806\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n\u5f53\u7136$Kruskal$+\u8def\u5f84\u538b\u7f29\u4e5f\u53ef\u4ee5\uff0c\u54ea\u79cd\u7b80\u5355\u5c31\u9009\u54ea\u79cd\uff08\u4e2a\u4eba\u611f\u89c9$Prim$\u66f4\u7b80\u5355\uff09\u3002\n\n\n------------\n\n\u90a3\u4e48\u600e\u4e48\u7528$Prim$\u600e\u4e48\u627e\u5462\uff1f\n\n$1)$ \u6709\u70b9\u50cf$SPFA$\uff0c\u4ece\u8d77\u70b9\u5f00\u59cb\uff0c\u628a\u6bcf\u4e00\u4e2a\u70b9\u90fd\u904d\u5386\u4e00\u904d\uff0c\u4f7f\u56fe\u8fde\u901a\uff0c\u540c\u65f6\u5229\u7528\u5806\u9009\u51fa\u6700\u4f73\u65b9\u6848\u3002\n\n$2)$ $visit$\u6570\u7ec4\u6807\u8bb0\u8fd9\u4e2a\u70b9\u904d\u5386\u8fc7\u6ca1\u6709\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6b21\u5c31\u80fd\u627e\u5230\u6700\u4f18\u3002\n\n$3)$\u91cd\u8f7d\u5806\u7684\u65b9\u6cd5\u5c31\u4e0d\u8bf4\u4e86\uff0c\u5927\u5bb6\u81ea\u884c\u767e\u5ea6\u5427\u3002\n\n$4)$\u56e0\u4e3a\u6570\u636e\u5c0f\uff0c\u5efa\u56fe\u65b9\u6cd5\u968f\u4fbf\uff0c\u8fd9\u91cc\u6211\u7528$vector$\u5b9e\u73b0\u90bb\u63a5\u94fe\u8868\u3002\n\n------------\n\u53c2\u8003\u7a0b\u5e8f\u5982\u4e0b\uff0c\u8bf7\u89c1\u6ce8\u91ca\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nconst int MAXN=105;\nint n,ans;\nstruct node\n{\n\tint to,v;\n};\nvector <node> edge[MAXN];\nbool visit[MAXN];\n\nstruct cmp//\u91cd\u8f7d\u4e3a\u5c0f\u6839\u5806\uff0c\u6ce8\u610f\u8bed\u6cd5\n{\n\tbool operator()(const node& x,const node& y)const\n\t{//\u6ce8\u610f\u91cd\u8f7d\u7684\u662f()\u8fd0\u7b97\u7b26\uff1b\u800c\u5728\u7ed3\u6784\u4f53\u5185\u91cd\u8f7d\u662f<\u8fd0\u7b97\u7b26\n\t\treturn x.v>y.v;\n\t}\n};\n\nvoid input(void)\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t for(int j=1;j<=n;j++)\n\t{\n\t\tint x;\n\t\tcin>>x;\n\t\tif(x)//\u6309\u9898\u76ee\u8981\u6c42\u5efa\u65e0\u5411\u56fe\n\t\t{\n\t\t\tedge[i].push_back((node){j,x});\t\n\t\t\tedge[j].push_back((node){i,x});\t\n\t\t}\n\t}\n}\n\nvoid prim(void)\n{\n\tpriority_queue <node,vector<node>,cmp> q;\n\tvisit[1]=true;//\u4ece\u7b2c\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u4e3a\u8d77\u70b9\n\tfor(vector<node>::iterator it=edge[1].begin();it!=edge[1].end();it++)\n\t q.push(*it);//\u628a\u7b2c\u4e00\u4e2a\u70b9\u76f8\u5173\u7684\u70b9\u8fdb\u5806\uff0c\u4e4b\u540e\u597d\u62ff\u51fa\u6765\u7528\n\twhile(!q.empty())//\u5f00\u59cb\u904d\u5386\n\t{\n\t\tconst node tmp=q.top();\n\t\tq.pop();\n\t\tif(visit[tmp.to])//\u8bbf\u95ee\u8fc7\u5c31\u8df3\u8fc7\n\t\t continue;\n\t\tvisit[tmp.to]=true;\n\t\tans+=tmp.v;//\u522b\u5fd8\u4e86\u5b58\u50a8\u7b54\u6848\n\t\tfor(vector<node>::iterator it=edge[tmp.to].begin();it!=edge[tmp.to].end();it++)\n\t\t if(!visit[it->to])\n\t\t  q.push(*it);//\u518d\u6b21\u8fdb\u5806\n\t}\n}\n\nint main()\n{\n\tinput();\n\tprim();\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1549354246,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\uff0c\u6982\u5ff5\u90e8\u5206\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7[\u535a\u5ba2](https://www.jianshu.com/p/efcd21494dff)\uff0c~~\u8bb2\u7684\u5f88\u6e05\u695a\u8be6\u7ec6~~\uff0c\u5f88\u591a\u56fe\u4f8b\uff0c\u5165\u95e8\u5f88\u53cb\u597d\u3002\n\n\u672c\u6587\u4e3b\u8981\u91c7\u7528kruskal\u7b97\u6cd5\uff08\u524d\u7f6e\u77e5\u8bc6\uff1a\u5e76\u67e5\u96c6\uff09\uff0c\u6839\u636e\u7d2b\u4e66\u5b9e\u73b0\u6a21\u677f\u3002\n\n## \u53d8\u91cf\u5b9a\u4e49\n\u8be5\u7ed3\u6784\u4f53\u5b58\u56feu\uff0cv\u662f\u8282\u70b9\uff0cw\u662f\u6743\u503c \n\n```\nstruct Edge{\n\tint u, v, w;\n}edge[maxn];\n```\n\n\u5e76\u67e5\u96c6\u6a21\u677f\n\n```\nstruct union_find{\n\tint fa[maxn];\n\n\tvoid init(int n){\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tfa[i] = i;\n\t} \n\n\tint find(int u){\n\t\treturn u == fa[u] ? fa[u] : fa[u] = find(fa[u]);\n\t}\n\n}solve;\n\n```\n\n## \u7b97\u6cd5\u5b9e\u73b0\n\n**kruskal\u7b97\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a**\n\n```\n1. \u5c06\u56fe\u7684\u6240\u6709\u8fb9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8bb0\u7b2c i \u5c0f\u7684\u8fb9\u4e3aedge[i]\n2. \u521d\u59cb\u5316MST\uff08Minimum spanning tree\uff09\u4e3a\u7a7a\n3. \u521d\u59cb\u5316\u8fde\u901a\u5206\u91cf\uff0c\u8ba9\u6bcf\u4e2a\u70b9\u81ea\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u8fde\u901a\u5206\u91cf\n4. for(int i = 0; i < m; ++i)\n\t\tif(edge[i].v \u548c edge[i].u \u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d)\n        \t\u628a\u8fb9\u52a0\u5165MST;\n            \u5408\u5e76edge[i].v \u548c edge[i].u\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\n```\n\n\u5b9e\u73b0\uff1a\n```\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int maxn = 10010;\n\nint n, tot;\n\nstruct Edge{\n\tint u, v, w;\n}edge[maxn];\n\nvoid add_edge(int u, int v, int w){\n\tedge[tot].u = u;\n\tedge[tot].v = v;\n\tedge[tot++].w = w;\n}\n\nbool cmp(Edge &a, Edge &b){\n\treturn a.w < b.w;\n}\n\nstruct union_find{\n\tint fa[maxn];\n\n\tvoid init(int n){\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tfa[i] = i;\n\t} \n\n\tint find(int u){\n\t\treturn u == fa[u] ? fa[u] : fa[u] = find(fa[u]);\n\t}\n\n}solve;\n\nint kruskal(){\n\tint ans = 0;\n\tsolve.init(maxn);\n\tsort(edge, edge + tot, cmp);\n\tfor (int i = 0; i < tot; ++i){\n\t\tint x = solve.find(edge[i].u);\n\t\tint y = solve.find(edge[i].v);\n\t\tif (x != y){\n\t\t\tsolve.fa[x] = y;\n\t\t\tans += edge[i].w;\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main(int argc, char const *argv[]){\n\tcin>>n;\n\tint weight;\n\tfor (int i = 0; i < n; ++i){\n\t\tfor (int j = 0; j < n; ++j){\n\t\t\tcin>>weight;\n\t\t\tif (weight)\n\t\t\t\tadd_edge(i, j, weight);\n\t\t}\n\t}\n\tcout<<kruskal()<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1542546004,
        "uid": 136040,
        "name": "MambaHJ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u770b\u5927\u4f6c\u4eec\u90fd\u7528\u7684Kruskal\uff0c\u5c31\u8bd5\u7740\u62ffprim\u7b97\u6cd5\u5199\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e24\u4e2a\u8fc7\u4e86\u5e76\u4e14\u6211\u7684prim\u8fd8\u5feb\u4e00\u70b9\u70b9(\u53ef\u80fd\u662f\u6211Kruskal\u6ca1\u4f18\u5316\u4e4b\u7c7b\u7684\u5427)\n\u4e0d\u591a\u8bf4\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\n```cpp\n#include<bits/stdc++.h>\n#define inf 0x3f3f3f3f3f\nusing namespace std;\nint n,a[110][110],d[110],minn,ans,t;\nbool b[110];//\u96c6\u5408\u5185\u90e8\u6709\u54ea\u4e9b\u70b9 \nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++)\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tscanf(\"%d\",&a[i][j]);\n\tfor(int i=1; i<=n; i++)d[i]=inf;//\u521d\u59cb\u5316 \n\td[1]=0;\n\tfor(int i=1; i<=n; i++) {\n\t\tminn=inf;\n\t\tfor(int j=1; j<=n; j++)if(!b[j]&&d[j]<minn) {//\u627e\u5230\u8ddd\u79bb\u96c6\u5408\u6700\u8fd1\u7684\u70b9 \n\t\t\t\tminn=d[j];\n\t\t\t\tt=j;\n\t\t\t}\n\t\tb[t]=1;\n\t\tans+=minn;//\u5c06\u8fd9\u4e2a\u70b9\u653e\u5165\u96c6\u5408\u5185 \n\t\tfor(int j=1; j<=n; j++)// \u7528\u8fd9\u4e2a\u70b9\u6765\u66f4\u65b0 \u5176\u4ed6\u672a\u5728\u96c6\u5408\u91cc\u7684\u70b9 \u8ddd\u79bb \u96c6\u5408\u7684\u6700\u77ed\u8ddd\u79bb \n\t\t\tif(a[t][j]<d[j])\n\t\t\t\td[j]=a[t][j];\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\nprim\u5bf9\u4e8eKruskal\u7684\u4f18\u70b9\u5c31\u662f\u4e0d\u6015\u8fb9\u591a\u5177\u4f53\u8bf7\u770b\n[P1265 \u516c\u8def\u4fee\u5efa](https://www.luogu.org/problemnew/show/P1265)\n\u6700\u77ed\u7f51\u7edc\u9053\u9898\u5199\u5b8c\u4e86\u53ef\u4ee5\u518d\u53bb\u770b\u770b\u516c\u8def\u7ef4\u4fee\uff0c\u589e\u5f3a\u4e0b\u5bf9\u4e8eprim\u7684\u7406\u89e3\u3002\n\n\n\n\u4e0b\u9762\u662f\u6211\u7684Kruskal\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct QWE{\n    int f,t,w;\n}e[200010];\nbool cmp(QWE x,QWE y){\n    return x.w<y.w;\n}\nint n,m,f[5050],S,T,ans=0,sum;\nint get_fa(int x){\n    if(f[x]==x)return x;\n    return f[x]=get_fa(f[x]);\n}\nvoid merge(int x,int y){\n    x=get_fa(x);\n    y=get_fa(y);\n    if(x!=y)f[x]=y;\n    }\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=n;j++){\n        e[++sum].f=i;\n        e[sum].t=j;\n        scanf(\"%d\",&e[sum].w);\n    }\n    sort(e+1,e+sum+1,cmp);\n    for(int i=1;i<=n;i++)f[i]=i;\n    for(int i=1;i<=sum;i++){\n        S=get_fa(e[i].f);\n        T=get_fa(e[i].t);\n        if(S==T)continue;\n        ans+=e[i].w;\n        merge(e[i].f,e[i].t);\t\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1541123075,
        "uid": 67409,
        "name": "LostSummer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u7a0d\u6709\u5e38\u8bc6\u7684\u4eba\u90fd\u77e5\u9053(\u9003\u662f\u4e00\u9053\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u7248\u9898\uff0c\u90a3\u4e48\u5c31\u662f\u8fd0\u7528\u5230\u67d0K\u7b97\u6cd5\uff0c\u4e0b\u9762\u7b80\u8ff0\u4e00\u4e0b\u3002\n\n\u9996\u5148\u5b9a\u4e49\u4e00\u4e0b\u751f\u6210\u6811\u7684\u6982\u5ff5\uff0c\u6307\u7684\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6709n\u4e2a\u70b9\u7684\u56fe\uff0c\u5220\u53bb\u82e5\u5e72\u6761\u8fb9\uff0c\u4f7f\u5f97\u6574\u5f20\u56fe\u4e3a\u4e00\u4e2a\u53ea\u6709n-1\u6761\u8fb9\u7684\u8054\u901a\u5757\uff0c\u800c\u6700\u5c0f\u751f\u6210\u6811\u5219\u53d6\u751f\u6210\u6811\u4e2d\u7684\u6781\u5c0f\uff0c\u65e2\u8fb9\u6743\u548c\u4e3a\u6700\u5c0f\u3002\n\n\u5bf9\u4e8ekruscal\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\n\n1.\u5bf9\u4e8e\u8fb9\u7684\u957f\u5ea6\u6309\u7167\u5355\u8c03\u9012\u589e\u7684\u8981\u6c42\u6392\u5e8f\n\n```cpp\nconst int Maxn = 10010;\n\nstruct st {\n   int u, v, w;\n} edge[Maxn]\n\ninline int comp (const st & a, const st & b){\n     return a.w < b.w ;\n}\n\ninline void kruscal () {\n   sort(edge+1, edge+1+m, comp);\n   .......\n}\n   \n```\n\n2.\u8d2a\u5fc3\u5730\u4ece\u5c0f\u5230\u5927\u9009\u53d6\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\u5982\u679c\u8fde\u63a5\u524d\u8be5\u8fb9\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u8054\u901a\uff0c\u5c31\u4e0d\u9009\u62e9\uff0c\u5426\u5219\u5c06\u4ed6\u4eec\u8054\u901a\u5e76\u5c06\u8be5\u8fb9\u8fb9\u6743\u8ba1\u5165\u603b\u548c,\u4e00\u76f4\u5230\u52a0\u5165n-1\u6761\u8fb9\u3002\n\n```cpp\nconst int MAxn = 110;\n\nint ans,fa[MAxn];\n\nint find (int x) {\n\n   return fa[x] == x?x:fa[x] = find(x);\n   \n   //\u8def\u5f84\u538b\u7f29\n   \n}\n\ninline void clear () {\n    for (int i = 1; i < = n; ++i ) fa[i] = i;\n    //\u521d\u59cb\u5316fa\u6570\u7ec4\n    \n}\n\ninline void kruscal () {\n     ......\n     int cnt = 0;\n     for(int i=1; i < = m; ++i){\n         int uu = find (edge[i].u);\n         int vv = find (edge[i].v);\n         if(uu == vv) continue;\n         ans += edge[i].w;\n         fa[uu] = vv;\n         if( ++cnt == n-1 ) break;\n     }\n}\n```\n\n\u6700\u540e\u8f93\u51fa\u8fd9\u4e2a\u603b\u548c\u5c31\u597d\u4e86\uff0c\u4ee5\u4e0a\u5c31\u662fk\u7b97\u6cd5\u7684\u7b80\u4ecb\u3002\n\n\n\n------------\n\n\n\u4f46\u662f\u8fd9\u9053\u9898\u5982\u679c\u5c31\u662f\u5b8c\u5168\u7684\u7248\u9898\uff0c\u90a3\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u4e86\uff0c\u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\u5b58\u8fb9\u65f6\u6211\u4eec\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u5b58\u8fb9\u4e00\u6b21\uff0c\u5982\u679c\u5c06\u6574\u4e2a\u77e9\u9635\u5b58\u56fe\uff0c\u90a3\u4e48\u65e0\u7591\u4f1a\u5bfc\u81f4\u9519\u8bef\uff0c\u901a\u8fc7\u89c2\u5bdf\u6613\u5f97\uff0c\u5bf9\u4e8e\u53f3\u4e0a\u89d2\u7684\u77e9\u9635\u6765\u8bf4\uff0cy\u90fd\u5927\u4e8ex\uff0c\u6613\u5f97\u5b58\u56fe\u4ee3\u7801\u3002\n\n```cpp\n\nint m = 0, val;\n\ninline void add_edge ( int u, int v, int w ) {\n      edge[++m].u = u;\n      edge[m].v = v;\n      edge[m].w = w;\n}\n\nint main(){\n  scanf ( \"%d\", &n );\n  for ( int i = 1; i <= n; ++i )\n    for ( int j = 1; j <= n; ++j ) {\n         scanf ( \"%d\", &val ) ;\n         if ( j < i ) add_edge ( i, j, val ) ;\n        }\n```\n\n\u6700\u540e\u9644\u4e0a\u672c\u9898\u5b8c\u6574ac\u4ee3\u7801\u4ee5\u53caac\u7528\u65f6\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Maxn=110;\nconst int MAxn=10010;\nint n,val,cnt=0;\nint tot=0,ans=0,fa[Maxn];\nstruct st{\n\tint u,v,w;\n}edge[MAxn];\ninline void add_edge(int u,int v,int w){\n\tedge[++cnt].u=u;\n\tedge[cnt].v=v;\n\tedge[cnt].w=w;\n}\nint comp(const st &a,const st &b){\n\treturn a.w<b.w;\n}\nint find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\ninline void kruscal(){\n\tsort(edge+1,edge+1+cnt,comp);\n\tfor(int i=1;i<=cnt;++i){\n\t    int uu=find(edge[i].u);\n\t    int vv=find(edge[i].v);\n\t    if(uu==vv) continue;\n\t    ans+=edge[i].w;\n\t    fa[uu]=vv;\n\t    if(++tot==n-1) break;\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i) fa[i]=i;\n\tfor(int i=1;i<=n;++i)\n\t  for(int j=1;j<=n;++j){\n\t  \tscanf(\"%d\",&val);\n\t  \tif(j>i) add_edge(i,j,val);\n\t}\n\tkruscal();\n\tprintf(\"%d\",ans);\n\treturn 0;\n} \n```\n![](http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvm5i344mrj30kl07574f.jpg)\n\n\u4e0d\u8981\u4ecb\u610f\u7801\u5206\u7684\u8f6c\u5316\uff0c\u535a\u4e3b\u73b0\u5728\u5728\u53d8\u7801\u5206\uff0c\u89c1\u8c05\n\n\u6700\u540e\uff0c\u5e0c\u671b\u5927\u5bb6\u6307\u51fa\u6211\u535a\u5ba2\u9519\u8bef\uff0cOI\u5c31\u662f\u4e00\u4e2a\u5171\u540c\u5b66\u4e60\u7684\u8fc7\u7a0b\n\n",
        "postTime": 1537885486,
        "uid": 106632,
        "name": "Rbrq",
        "ccfLevel": 0,
        "title": "P1546 \u6700\u77ed\u7f51\u7edc Agri-Net\u3010\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u57fa\u672c\u7684\u56fe\u8bba\u9898\uff0c\u672c\u849f\u84bb\u4e0d\u522b\u7684\u7b97\u6cd5\uff0c\u5c31\u6765\u4e00\u53d1\u7528Prim\u5427\u3002\n\u4ee5\u4e0b\u662fp\u515a\u7684\u798f\u5229\u3002\u4e3a\u73b0\u5728\u8fd8\u5728\u5199pascal\u7684\u4eba\u52a0\u6cb9\uff01\n\u4e0d\u591a\u8bf4\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff01\n```pascal\n{\u9898\u76ee\u6982\u8ff0\uff1a\u5728N\u4e2a\u519c\u573a\u4e4b\u95f4\u5efawifi\uff0c\u6c42\u5149\u7ea4\u7684\u6700\u77ed\u957f\u5ea6\uff5d\n{\u65b9\u6cd5\uff1aprim\uff5d\nvar\nu:array[1..100000]of boolean;\nk:array[1..100000]of longint;\ni,j,n,m,min,s,sum:longint;\na:array[1..1000,1..1000]of longint;\nbegin\nreadln(n);\nfor i:=1 to n do\uff5b\u8bfb\u5165\uff5d\n for j:=1 to n do\n  read(a[i,j]);\n  fillchar(u,sizeof(u),false);\uff5b\u521d\u503c\uff5d\n for i:=1 to n do\n  k[i]:=a[1,i];\n  u[1]:=true;\n for i:=1 to n-1 do\uff5b\u627e\u6700\u77ed\u8def\uff5d\n  begin\n  min:=maxlongint;\n   for j:=1to n do\n    if not(u[j])and(k[j]<min) then begin s:=j;min:=k[j];end;\uff5b\u5224\u65ad\uff5d\n   u[s]:=true;sum:=sum+min;\n   for j:=1 to n do\n   if not(U[j])and(a[s,j]<k[j]) then k[j]:=a[s,j];\uff5b\u66f4\u65b0\uff5d\n  end;\n  writeln(sum);\uff5b\u8f93\u51fa\uff5d\n  end.\n```\n\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u4e0d\u559c\u6b22\u52ff\u55b7\uff0c\u5e0c\u671b\u7ba1\u7406\u5458\u901a\u8fc7\u3002",
        "postTime": 1534637658,
        "uid": 31856,
        "name": "jrqsjdpqlwnwhyn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "# [\u539f\u9898](https://www.luogu.org/problemnew/show/P1546)\n## \u9898\u76ee\u63cf\u8ff0\n\n\u519c\u6c11\u7ea6\u7ff0\u88ab\u9009\u4e3a\u4ed6\u4eec\u9547\u7684\u9547\u957f\uff01\u4ed6\u5176\u4e2d\u4e00\u4e2a\u7ade\u9009\u627f\u8bfa\u5c31\u662f\u5728\u9547\u4e0a\u5efa\u7acb\u8d77\u4e92\u8054\u7f51\uff0c\u5e76\u8fde\u63a5\u5230\u6240\u6709\u7684\u519c\u573a\u3002\u5f53\u7136\uff0c\u4ed6\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\n\n\u7ea6\u7ff0\u5df2\u7ecf\u7ed9\u4ed6\u7684\u519c\u573a\u5b89\u6392\u4e86\u4e00\u6761\u9ad8\u901f\u7684\u7f51\u7edc\u7ebf\u8def\uff0c\u4ed6\u60f3\u628a\u8fd9\u6761\u7ebf\u8def\u5171\u4eab\u7ed9\u5176\u4ed6\u519c\u573a\u3002\u4e3a\u4e86\u7528\u6700\u5c0f\u7684\u6d88\u8d39\uff0c\u4ed6\u60f3\u94fa\u8bbe\u6700\u77ed\u7684\u5149\u7ea4\u53bb\u8fde\u63a5\u6240\u6709\u7684\u519c\u573a\u3002\n\n\u4f60\u5c06\u5f97\u5230\u4e00\u4efd\u5404\u519c\u573a\u4e4b\u95f4\u8fde\u63a5\u8d39\u7528\u7684\u5217\u8868\uff0c\u4f60\u5fc5\u987b\u627e\u51fa\u80fd\u8fde\u63a5\u6240\u6709\u519c\u573a\u5e76\u6240\u7528\u5149\u7ea4\u6700\u77ed\u7684\u65b9\u6848\u3002\u6bcf\u4e24\u4e2a\u519c\u573a\u95f4\u7684\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc7100000\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n### \u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\uff1a \u519c\u573a\u7684\u4e2a\u6570\uff0cN\uff083<=N<=100\uff09\u3002\n\n\u7b2c\u4e8c\u884c..\u7ed3\u5c3e: \u540e\u6765\u7684\u884c\u5305\u542b\u4e86\u4e00\u4e2aN*N\u7684\u77e9\u9635,\u8868\u793a\u6bcf\u4e2a\u519c\u573a\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u7406\u8bba\u4e0a\uff0c\u4ed6\u4eec\u662fN\u884c\uff0c\u6bcf\u884c\u7531N\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u7684\u6570\u7ec4\u6210\uff0c\u5b9e\u9645\u4e0a\uff0c\u4ed6\u4eec\u9650\u5236\u572880\u4e2a\u5b57\u7b26\uff0c\u56e0\u6b64\uff0c\u67d0\u4e9b\u884c\u4f1a\u7d27\u63a5\u7740\u53e6\u4e00\u4e9b\u884c\u3002\u5f53\u7136\uff0c\u5bf9\u89d2\u7ebf\u5c06\u4f1a\u662f0\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6709\u7ebf\u8def\u4ece\u7b2ci\u4e2a\u519c\u573a\u5230\u5b83\u672c\u8eab\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\uff1a\n\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u5176\u4e2d\u5305\u542b\u8fde\u63a5\u5230\u6bcf\u4e2a\u519c\u573a\u7684\u5149\u7ea4\u7684\u6700\u5c0f\u957f\u5ea6\u3002\n\n------------\n\n# \u9898\u89e3\n\u9996\u5148~~\u70b9\u5f00\u7b97\u6cd5\u6807\u7b7e~~\u5ba1\u6e05\u9898\u76ee\uff0c\u77e5\u9053\u4e00\u4e2a\u5927\u6982\u9898\u610f\u3002\u53ef\u4ee5\u770b\u51fa\u662f\u56fe\u8bba\u4e2d\u7684\u751f\u6210\u6811\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u8fd9\u9053\u9898\u7684\u6570\u636e\u662f\u6bd4\u8f83\u9002\u5408\u4f7f\u7528Kruskal\u7b97\u6cd5\u6765\u89e3\uff08\u5176\u5b9ePrim\u4e5f\u53ef\u4ee5\uff09\n \n\n### \u601d\u8def\uff1a\n\u76f4\u63a5\u7528Kruskal\u3002\u6bcf\u6b21\u9009\u62e9\u4e00\u6761\u6700\u5c0f\u7684\u4e14\u80fd\u5408\u5e76\u4e24\u4e2a\u4e0d\u540c\u7684\u96c6\u5408\u7684\u8fb9\uff0c\u603b\u5171\u9009\u53d6N-1\u6b21\u8fb9\u3002\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u9009\u7684\u90fd\u662f\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u6700\u540e\u5fc5\u5f97\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\u53c8\u6211\u4eec\u6bcf\u6b21\u9009\u7684\u8fb9\u90fd\u53ef\u4ee5\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u6700\u540eN\u4e2a\u70b9\u4e00\u5b9a\u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002\u5176\u5b9e\u539f\u7406\u4e0e\u8d2a\u5fc3\u8fd8\u662f\u5f88\u50cf\u7684\u3002\n\n### \u6ce8\u610f\u4e8b\u9879\uff1a\n1. \u770b\u6e05\u6837\u4f8b\uff0c\u5206\u6790\u597d\u9898\u76ee\u548c\u6837\u4f8b\n1. \u907f\u5f00**TLE**\uff0c\u4e0d\u8981\u4e71\u4f18\u5316\uff01\uff01\uff01\n1. \u6ce8\u610fKruskal\u7684\u5b9e\u73b0\u8fc7\u7a0b\n1. \u5176\u4ed6\u8be6\u89c1\u6807\u7a0b\u6ce8\u91ca \n## \u6807\u7a0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tint x,y,v;\n}a[9901];//\u5b9a\u4e49\u7ed3\u6784\u7c7b\u578b\uff0c\u8868\u793a\u8fb9 \nint fat[101],n,i,j,x,m,tot,k;\nint father(int x){\n\tif(fat[x]!=x) fat[x]=father(fat[x]);\n\treturn fat[x];\n}\nvoid unionn(int x,int y){\n\tint fa=father(x),fb=father(y);\n\tif(fa!=fb) fat[fa]=fb;\n}\nbool cmp(const point &a,const point &b){//\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570 \n\tif(a.v<b.v) return 1;\n\telse return 0;\n}\nint main(){\n\tcin>>n;\n\tfor(i=1;i<=n;i++) for(j=1;j<=n;j++){\n\t\tcin>>x;\n\t\tif(x!=0){\n\t\t\tm++;\n\t\t\ta[m].x=i;\n\t\t\ta[m].y=j;\n\t\t\ta[m].v=x;\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++) fat[i]=i;\n\tsort(a+1,a+m+1,cmp);//\u6807\u51c6\u5e93\u4e2d\u7684\u5feb\u6392\n\t//\u7528cmp\u518d\u5b9a\u4e49\u540e\u8fdb\u884c\u6392\u5e8f \n\tfor(i=1;i<=m;i++){\n\t\tif(father(a[i].x)!=father(a[i].y)){\n\t\t\tunionn(a[i].x,a[i].y);\n\t\t\ttot+=a[i].v;\n\t\t\tk++;\n\t\t}\n\t\tif(k==n-1) break;\n\t}\n\tcout<<tot;\n\treturn 0;\n}\n```",
        "postTime": 1532163915,
        "uid": 75504,
        "name": "\u0422\u0443\u043f\u043e\u043b\u0435\u0432",
        "ccfLevel": 0,
        "title": "LuoguOJ P1546 \u6700\u77ed\u7f51\u7edc Agri-Net \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u5927\u5bb6\u7528\u7684\u90fd\u662fKruskal\uff0c\u6211\u53d1\u4e00\u7bc7Prim\u7684\u5427\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,a[101][101];\nint dist[101],u[101],v[101],p,sum=0;\n//u\u8868\u793a\u5df2\u8fdb\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\uff0cv\u8868\u793a\u672a\u8fdb\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\u3002u[i]=1:i\u8282\u70b9\u5df2\u8fdb\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\nint main()\n{\n\tcin>>n;\n\tmemset(dist,0x7f,sizeof(dist));\n\tfor(int i=1;i<=n;i++)//\u8bfb\u5165\n\t{\n\t\tv[i]=1;//\u521d\u59cb\u6240\u6709\u8282\u70b9\u90fd\u672a\u8fdb\u5165\u6700\u5c0f\u751f\u6210\u6811\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tscanf(\"%d\",&a[i][j]);\n\t}\n\tp=1;\n\tfor(int j=1;j<=n-1;j++)\n\t{\n\t\tv[p]=0;\n\t\tu[p]=1;//\u628ap\u653e\u5165\u6700\u5c0f\u751f\u6210\u6811\n        //Prim\u7b97\u6cd5\uff0c\u4e0d\u89e3\u91ca\u4e86\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tdist[i]=min(a[p][i],dist[i]);\n\t\tint minn=10000000,minp;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif (!u[i] && dist[i]<minn)\n\t\t\t{\n\t\t\t\tminn=dist[i];\n\t\t\t\tminp=i;\n\t\t\t}\n\t\t}\n\t\tsum+=minn;\n\t\tp=minp;\n\t}\n\tcout<<sum;\n\treturn 0;\n}\n```",
        "postTime": 1531189987,
        "uid": 83001,
        "name": "\u6d77\u6ee8WA\u58f0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6761\u9898\u89e3\n\n\u6807\u51c6\u7684\u5e93\u9c81\u65af\u8003\u7b97\u6cd5\n\n\u5c31\u56e0\u4e3a\u6bd4\u8f83\u88f8\uff0c\u6240\u4ee5\u624d\u6709\u52c7\u6c14\u53d1\u3002\n\n\u503c\u5f97\u63d0\u9192\u7684\u662f\u8fb9\u5f00\u5927\u70b9 \u6211\u5f0030000\u624d\u8fc7\uff0c\u7b2c\u4e00\u6b21\u5f00300-.-\uff0c\u59cb\u7ec8\u4e0d\u660e\u767d\u4e3a\u4f55\u624d60\u5206\u3002\n\n\u5c31\u662f\u8fb9\u4ece\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u5f80\u91cc\u9762\u52a0\u5c31ok\u3002\n\n\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u7684\u601d\u60f3\u3002<http://paste.ubuntu.com/25678622/>\n",
        "postTime": 1507197022,
        "uid": 56715,
        "name": "s66104444",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u88f8\u7684Kruskal\u677f\u5b50 \u8f93\u5165\u7684\u65f6\u5019\u8bb0\u5f97\u8981\u5904\u7406\u4e00\u4e0bi=j\u7684\u60c5\u51b5\n\n\u8fd8\u6709\u5c31\u662f\u8981\u7ec6\u5fc3\u554a\uff01\uff01\uff01\n\n\u6211\u4e4b\u524d\u5c45\u7136\u4e00\u76f4\u5f31\u667a\u7684\u4ee5\u4e3a\u5728\u5408\u5e76\u7684\u65f6\u5019 \u53ea\u8981\u5f00\u4e00\u4e2avis\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b \u5982\u679c\u4e24\u4e2a\u70b9\u90fd\u88abvis\u8fc7\u4e86\u5c31\u4e0d\u7528\u5408\u5e76\u4e86\n\n\u7136\u540e\u6211\u5f31\u667a\u7684\u4ea4\u4e86 \u5f31\u667a\u768430 qaq\n\n\u5927\u5bb6\u4e00\u5b9a\u4e0d\u8981\u8fd9\u4e48\u5199\u554a \u628a\u4ee3\u7801\u548c\u677f\u5b50\u5bf9\u6bd4\u7684\u65f6\u5019\u4e00\u4e0b\u53cd\u5e94\u8fc7\u6765 **\u5c31\u7b97\u4e24\u4e2a\u70b9\u88abvis\u8fc7 \u4e5f\u4e0d\u80fd\u8bf4\u660e\u4ed6\u4eec\u90fd\u88ab\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u56fe\u91cc\u4e86\uff01\uff01**\n\n\u603b\u4e4b\u5927\u5bb6\u6ca1\u4e8b\u5199\u5199\u677f\u5b50\u8fd8\u662f\u6709\u7528\u7684\u55ef\u3002\u3002\u3002 \u4e0d\u7136\u6bd4\u8d5b\u7684\u65f6\u5019\u5f31\u667a\u7684\u9519\u6389\u4e86\u5c31\u5212\u4e0d\u6765\u4e86\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define MAXN 10010\nusing namespace std;\nint n,father[MAXN],vis[MAXN];\nstruct Edge{//\u7ed3\u6784\u4f53 \n    int from;\n    int to;\n    int w;\n};Edge edge[MAXN];\nbool cmp(Edge x,Edge y)\n{\n    return x.w<y.w;//\u4e00\u76f4\u770b\u4e0d\u61c2\u5927\u795e\u5199\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002\u3002\u4e56\u4e56\u7684\u81ea\u5df1\u5199\u4e2acmp\u5427 \n}\nint find(int x)\n{\n    if(father[x]!=x) \n    {\n        father[x]=find(father[x]);//\u8def\u5f84\u538b\u7f29 \n    }\n    return father[x];\n}\nint onion(int x,int y)\n{\n    int fx=find(x),fy=find(y);\n    if(fx!=fy) father[fx]=fy;\n}\nint main()\n{\n    memset(vis,1,sizeof(vis));\n    int a,cnt,ans=0,dd=0;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        father[i]=i;\n        for(int j=1;j<=n;j++)\n        {\n            cin>>a;\n            if(i==j)continue;//\u7279\u5224\u4e00\u4e0b \n            edge[++cnt].w=a;\n            edge[cnt].from=i;\n            edge[cnt].to=j;\n        }\n    }\n    sort(edge+1,edge+1+cnt,cmp);\n    for(int i=1;i<=cnt;i++)\n    {\n        if(find(edge[i].from)!=find(edge[i].to))//\u4e07\u6076\u4e4b\u6e90 \n        {\n            onion(edge[i].from,edge[i].to);\n            ans+=edge[i].w;\n        }\n    }\n    cout<<ans;\n/*    for(int i=1;i<=cnt;i++)\n    {\n        cout<<edge[i].from<<\" \"<<edge[i].to<<\" \"<<edge[i].w<<endl;\n    }*/\n    return 0;\n}\n```",
        "postTime": 1506341378,
        "uid": 18875,
        "name": "\u53f8\u5f92stuart",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u5176\u5b9e\u6ca1\u5565\u601d\u8def\u7684\uff0c\u53ea\u662fKruskal\u7b97\u6cd5\u7684\u88f8\u9898\uff0c\u90a3\u5c31\u5728\u8fd9\u8bf4\u4e00\u4e0bkruskal\u7b97\u6cd5\n\nkruskal\u7b97\u6cd5\u662f\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u63a8\u8bba\uff1a\u5728\u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u8fb9\u957f\u6700\u5c0f\u7684\u8fb9\u4e00\u5b9a\u4e3a\u751f\u6210\u6811\u7684\u4e00\u90e8\u5206\uff08\u6709\u5174\u8da3\u7684Oier\u4eec\u53ef\u4ee5\u81ea\u5df1\u53bb\u8bc1\u660e\uff09\n\n\u6240\u4ee5\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u63a8\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u8fb9\u6309\u8fb9\u957f\u8fdb\u884c\u6392\u5e8f\uff0c\u6bcf\u6b21\u9009\u62e9\u8fb9\u957f\u6700\u5c0f\u7684\u5e76\u4e14\u662f\u6ca1\u6709\u88ab\u9009\u62e9\u8fc7\u7684\u8fb9\uff0c\u56e0\u4e3a\u5728\u8fd9\u6211\u4eec\u8981\u8bb0\u5f55\u67d0\u6761\u8fb9\u662f\u5426\u88ab\u9009\u62e9\u8fc7\uff0c\u6240\u4ee5\u8981\u7528\u5230\u5e76\u67e5\u96c6\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u6761\u672a\u88ab\u9009\u62e9\u7684\u8fb9\u540e\u5c31\u5c06\u5176\u8fb9\u957f\u52a0\u8fdb\u7b54\u6848\uff0c\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u957f\u5ea6\n\n\n\u4ee5\u4e0b\u4e3a\u4ee3\u7801\uff0c\u91cd\u8981\u5730\u65b9\u5df2\u7ecf\u8fdb\u884c\u6ce8\u91ca\uff0c\u5982\u679c\u6709\u90a3\u4e2a\u5730\u65b9\u4e0d\u662f\u5f88\u7406\u89e3\u53ef\u4ee5\u7ed9\u6211\u7559\u8a00\n\n\n\n\n\n\n\n\n    \n \n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 200\n#define M 100009\nusing namespace std;\nint en,n,fa[N];                          //fa\u4e3a\u5e76\u67e5\u96c6\u6240\u9700\u539f\u4ef6\uff0cen\u4e3a\u8fb9\u7684\u6761\u6570 \nstruct edge{\n    int s,e,d;\n}ed[M];\nvoid add_edge(int s,int e,int d){          //\u76f4\u63a5\u5b58\u8fb9\u5c31\u884c\uff0c\u4e0d\u9700\u8981\u522b\u7684 \n    en++;\n    ed[en].s = s;\n    ed[en].e = e;\n    ed[en].d = d;\n}\nbool operator < (const edge &a,const edge &b){   //\u7ed9\u8fb9\u957f\u6392\u5e8f\u8981\u7528\u5230STL\u7684sort\u51fd\u6570\uff0c\u91cd\u8f7d\u4e00\u4e0b\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u662f\u7ed3\u6784\u4f53\u6392\u5e8f \n    return a.d < b.d;\n}\nint getf(int now){                              //\u5e26\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6 \n    if(fa[now] == now)return now;\n    else return fa[now] = getf(fa[now]);\n}\nint kruskal(){\n    sort(ed+1,ed+en+1);                            //\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f \n    for(int a = 1; a <= n; a++)fa[a] = a;        //\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n    int ans = 0;             \n    for(int a = 1;a <= en;a++){\n        int f1 = getf(ed[a].s);                    //\u83b7\u53d6\u8fb9\u4e24\u8fb9\u7684\u96c6\u5408\u7f16\u53f7\uff0cs\u4e3a\u8d77\u70b9\uff0ce\u4e3a\u7ec8\u70b9 \n        int f2 = getf(ed[a].e);                 //\u540c\u4e0a \n        if(f1 != f2){                           //\u5982\u679c\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4e0d\u5728\u540c\u4e00\u96c6\u5408\uff0c\u5219\u8bf4\u660e\u8fd9\u6761\u8fb9\u672a\u88ab\u9009\u62e9\uff0c\u5219\u5bf9\u5176\u8fdb\u884c\u9009\u62e9\u5e76\u5408\u5e76\u4e24\u96c6\u5408 \n            fa[f2] = f1;                        //\u5408\u5e76\u8fc7\u7a0b \n            ans += ed[a].d;                        //\u52a0\u8fb9\u957f \n        }\n    }\n    return ans;\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n            int x;\n            scanf(\"%d\",&x);\n            if(i == j)continue;                //\u5bf9\u89d2\u7ebf\u4e0d\u9700\u8981\u5b58\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7 \n            add_edge(i,j,x);                //\u5b58\u8fb9 \n        }\n    }\n    int ans = kruskal();                   //Kruskal\uff08\uff09\u8dd1\u4e00\u904d \n    printf(\"%d\\n\",ans);                      //\u8f93\u51fa\u7b54\u6848 \n    return 0;\n}\n\n```",
        "postTime": 1504941974,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "#\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u89e3\u91ca\n\n\u672c\u4eba\u662f\u5c0f\u849f\u84bb\uff0c\u4ee3\u7801\u5199\u7684\u4e0d\u597d\u4e0d\u8981\u4ecb\u610f\u54e6\uff0c\u563f\u563f\uff0c\u8be6\u89e3\u5982\u4e0b\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u8981\u6284\u88ad\uff0c\u81ea\u5df1\u591a\u60f3\u60f3\u54e6\uff0c\n\n\u672c\u4eba\u4ee3\u7801\uff0c\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iomanip>\n#include<iostream>//\u628a\u5f88\u591a\u5e38\u7528\u7684\u90fd\u5199\u51fa\u6765\u4e86\uff0c\u867d\u7136\u53ea\u7528\u5230\u6765\u7684\u4e24\u4e09\u4e2a\uff0c\u4f46\u5de9\u56fa\u4e00\u4e0b\u8bb0\u5fc6\u561b \nconst int maxlongint=0xfffffff;\nusing namespace std; \nint a[10000][3],fa[101];\nint x,tot,p=0,n;\nint myfind(int poi);\nvoid mysort(int l,int r);\nint main()\n{\n    int i,j,m=0,ta,tb;\n    cin>>n;\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n        {\n            cin>>x;\n            if(x!=0)\n            {\n                m++;\n                a[m][1]=i;\n                a[m][2]=j;\n                a[m][0]=x;\n```\n}//\u521d\u59cb\u5316\u5b58\u8fb9\n```cpp\n        }\n    for(i=1;i<=n;i++)fa[i]=i;//\u521d\u59cb\u5316 \n    mysort(1,m);//\u5feb\u6392 \n    k=0;//\u8ba1\u6570\u5668 \n    for(i=1;k!=n-1;i++)//kruskal\u7b97\u6cd5 \n```\n{//\u5faa\u73af\u6240\u6709\u5df2\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u8fb9\n```cpp\n        ta=myfind(a[i][1]);\n        tb=myfind(a[i][2]);\n        if(ta!=tb)//\u5408\u5e76\u5e8f\u5217 \n        {\n            fa[tb]=ta;\n            k++;\n            tot+=a[i][0];//\u751f\u6210\u6811\u7684\u6743\u503c\u548c\n        }\n    }\n    cout<<tot<<endl;\n    return 0;\n}\nint myfind(int poi)//\u5e76\u67e5\u96c6\uff0c\u5408\u5e76 \n{\n    if (fa[poi]!=poi)fa[poi]=myfind(fa[poi]);//\u8def\u5f84\u538b\u7f29\uff0c\u4f18\u5316 \n    return fa[poi];\n}\nvoid mysort(int l,int r)//\u624b\u5199\u5feb\u6392\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\uff0c\u4f46\u662f\u5982\u679c\u61d2\u5f97\u8bdd\u53ef\u4ee5\u6709sort\uff1b\u5934\u6587\u4ef6\u662falgorithm\uff1b \n{\n    int i,j,t,m;\n    i=l;j=r;\n    m=a[(l+r)/2][0];//\u5c06\u5f53\u524d\u5e8f\u5217\u5728\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u5b9a\u4e49\u4e3a\u5206\u9694\u6570 \n    do\n    {\n        while (a[i][0]<m) i++;//\u5728\u5de6\u534a\u90e8\u5206\u5bfb\u627e\u6bd4\u4e2d\u95f4\u5927\u7684\u6570 \n        while (a[j][0]>m) j--;//\u5728\u53f3\u8fb9\u5bfb\u627e\u6bd4\u4e2d\u95f4\u5c0f\u7684\u6570 \n        if (i<=j)//\u82e5\u627e\u5230\u4e00\u7ec4\u4e0e\u6392\u5e8f\u76ee\u6807\u4e0d\u4e00\u81f4\u7684\u6570\u5bf9\uff0c\u5219\u4ea4\u6362\u4ed6\u4eec \n        {\n            t=a[i][1];a[i][1]=a[j][1];a[j][1]=t;\n            t=a[i][2];a[i][2]=a[j][2];a[j][2]=t;\n            t=a[i][0];a[i][0]=a[j][0];a[j][0]=t;\n            i++;j--;//\u7ee7\u7eed\u5bfb\u627e \n        }\n    }\n    while(i<=j);//\u4e0d\u80fd\u5c11\u4e86\u7b49\u53f7\u54e6 \n    if(i<r) mysort(i,r);//\u82e5\u6ca1\u5230\u5230\u4e24\u4e2a\u6570\u7684\u8fb9\u754c\u5219\u9012\u5f52\u641c\u7d20\u5de6\u53f3\u533a\u95f4 \n    if(l<j) mysort(l,j);\n    return;\n}\n```",
        "postTime": 1503728668,
        "uid": 50269,
        "name": "\u9f98\u9f98\u9f98\u9f98\u9f98\u9f98",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898.\n\n\n\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u7684kruskal\u5c31\u53ef\u4ee5\u8fc7\u4e86.\n\n\u539f\u7406:\u7528\u90bb\u63a5\u8868\u8bfb\u5165\u56fe,\u7136\u540e\u628a\u8fb9\u4ece\u5c0f\u5230\u5927\u6309\u8fb9\u6743\u6392\u5e8f.\u4f9d\u6b21\u628a\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e2d.\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8054\u901a,\u5219\u628a\u8be5\u8fb9\u53bb\u6389(\u5426\u5219\u5c31\u6709\u73af\u4e86).\n\n\u4ee3\u7801\u5982\u4e0b:\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n//\u4e3a\u4e86\u6392\u5e8f\u65b9\u4fbf,\u4f7f\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u56fe\nstruct edge//\u8fb9\u7684\u90bb\u63a5\u8868\u5b58\u50a8\n{\n    int u, v, w;\n}edges[1000001];\n//tot\u662f\u603b\u8fb9\u6570\nint cnt,n,tot,ans;\nint uset[1000001];\n//\u5feb\u901f\u6392\u5e8f\u6bd4\u8f83\u51fd\u6570:\u6309\u7167\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \nbool cmp(edge a, edge b)\n{\n    return a.w < b.w;\n}\n//\u52a0\u4e00\u6761\u8fb9\nvoid addedge(int u, int v,int w)\n{\n    edges[++cnt].u = u;\n    edges[cnt].v = v;\n    edges[cnt].w = w;\n}\n//\u5e76\u67e5\u96c6\u67e5\u627e\u6839\u8282\u70b9\nint find(int s)\n{\n    if (uset[s] != s) return uset[s] = find(uset[s]);//\u8def\u5f84\u538b\u7f29\n    return s;\n}\n//\u5e76\u67e5\u96c6\u5408\u5e76\nvoid merge(int a, int b)\n{\n    int x = find(a), y = find(b);\n    if (x == y)\n        return;\n    uset[x] = y;\n}\nvoid init()\n{\n    cin >> n;\n    tot = n*n - n;\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            int tmp;\n            cin >> tmp;\n            if (i != j)\n            {\n                addedge(i, j, tmp);\n            }\n        }\n    }\n    //\u5c06\u8fb9\u6392\u5e8f\n    sort(edges + 1, edges + tot + 1, cmp);\n    //\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    for (int i = 1; i <= tot; i++)\n    {\n        uset[i] = i;\n    }\n}\n//\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u6838\u5fc3\nvoid kruskal()\n{\n    for (int i = 1; i <= tot; i++)\n    {\n        int u = edges[i].u,v=edges[i].v;\n        //\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185,\u5219\u8fde\u63a5.\n        if (find(u) != find(v))\n        {\n            ans += edges[i].w;\n            merge(u, v);\n        }\n    }\n}\nint main()\n{\n    init();\n    kruskal();\n    cout << ans;\n}\n```",
        "postTime": 1502542155,
        "uid": 33776,
        "name": "SEELE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "prim\u7684\u5199\u6cd5\uff0c\u7c7b\u4f3c\u4e8e\u6700\u77ed\u8def\u5f84\u4e2d\u7684dijkstra\uff0c\u89e3\u6790\u5728\u4ee3\u7801\u4e2d\u6709\u89e3\u91ca\uff0c\u518d\u6b64\u4e0d\u591a\u8bb2\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,c[105];//\u70b9\u5230\u5f53\u524d\u751f\u6210\u6811\u7684\u6700\u77ed\u8ddd\u79bb \nint b[105];//\u6807\u8bb0\u70b9\u662f\u5426\u52a0\u5165\u751f\u6210\u6811\nint s; \nint a[105][105];\nint main()\n{\n    int i,j;\n    memset(c,0x7f,sizeof(c));//\u8d4b\u521d\u503c\uff0c\u5230\u751f\u6210\u6811\u6700\u77ed\u8ddd\u79bb\u4e3a\u65e0\u9650\u5927 \n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=n;j++)\n        scanf(\"%d\",&a[i][j]);\n    }\n    for(i=1;i<=n;i++)\n    {\n        c[i]=a[1][i];//\u4ee5\u70b91\u4e3a\u8d77\u70b9\uff0c\u628a\u4e0e\u70b91\u76f8\u8fde\u7684\u70b9\u6700\u77ed\u8ddd\u79bb\u6539\u53d8 \n    }\n    b[1]=1;//\u70b91\u6807\u8bb0\u4e3a\u5df2\u7ecf\u5728\u751f\u6210\u6811\u4e2d \n    for(i=1;i<=n;i++)\n    {\n        int k=0;\n        for(j=1;j<=n;j++)//\u627e\u5230\u5230\u751f\u6210\u6811\u6700\u77ed\u8ddd\u79bb\u7684\u70b9 \n        {\n            if(b[j]==0&&c[j]<c[k])\n            {\n                k=j;\n            }\n        }\n        b[k]=1;\n        for(j=1;j<=n;j++)//\u5bf9\u4e0e\u521a\u624d\u627e\u5230\u7684\u70b9\u5468\u56f4\u70b9\u8fdb\u884c\u677e\u5f1b \n        {\n            if(b[j]==0&&a[j][k]<c[j])\n            c[j]=a[j][k];    \n        }\n    }\n    for(i=1;i<=n;i++)//\u6c42\u548c \n    s=s+c[i];\n    printf(\"%d\",s);\n    return 0;\n}\n```",
        "postTime": 1501551876,
        "uid": 16028,
        "name": "maruijie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u770b\u89c1DL\u4eec\u90fd\u7528\u514b\u9c81\u65af\u5361\u5c14\uff0c\u840c\u65b0\u9ed8\u9ed8\u638f\u51fa\u4e86prim...\n\n\u7b97\u6cd5\u601d\u60f3\u662f\uff0c\u5148\u4ece1\u5f00\u59cb\u627e\u6700\u5c0f\u751f\u6210\u6811\uff0c\uff08\u56e0\u4e3a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u4e00\u5171\u5faa\u73afN-1\u6b21\uff0c\u8fd9\u91cc\u6211\u5c31\u4e0d\u8bc1\u660e\u4e86\uff09\uff0c**\u9010\u4e2a\u6bd4\u8f83\u6bcf\u4e2a\u70b9\u6240\u8fde\u63a5\u7684\u6743\u503c\uff0c\u627e\u51fa\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u4e4b\u540e\u7ee7\u7eed\u4ece\u8fd9\u4e00\u4e2a\u627e**\uff0c\u7528VISIT\u8fdb\u884c\u5224\u91cd\uff0c\u6700\u540e\u5c06\u6bcf\u6b21\u7684\u6743\u503c\u8fdb\u884c\u76f8\u52a0\u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint map[110][110];\nint vis[110];//\u5224\u91cd \nint low[110];//\u6bcf\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8def \nint main()\n{\n    int minn,pos;\n    int ans=0;\n    int n;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            cin>>map[i][j];\n        }\n    }\n    vis[1]=1;\n    low[1]=0;//\u5148\u4ece1\u70b9\u5f00\u59cb\u641c\uff0c\u521d\u59cb\u53161\u70b9 \n    for(int i=2;i<=n;i++)\n    {\n        low[i]=map[1][i];//\u7ed9low\u8d4b\u503c \n    }\n    for(int j=1;j<=n-1;j++) //\u6700\u5c0f\u751f\u6210\u6811\u7684n-1\u6b21\u5faa\u73af \n    {\n        minn=101000;//\u7531\u4e8e\u6751\u5e84\u4e4b\u95f4\u6700\u5927\u8def\u7a0b\u4e3a100000\uff0c\u6240\u4ee5\u6bcf\u6b21\u5c06\u6743\u503c\u5b9a\u4e49\u4e3a101000\u5373\u4e3a\u6700\u5927 \n        for(int i=1;i<=n;i++)\n        {\n            if(vis[i]!=1&&low[i]<minn)//\u627e\u7b2cj\u4e2a\u70b9\u4e0e\u7b2c\u51e0\u4e2a\u70b9\u4e3a\u6700\u77ed\u8def\uff0c\u627e\u5230\u6700\u77ed\u8def\u518d\u4ece\u90a3\u4e2a\u70b9\u5f00\u59cb\u5faa\u73af \n            {\n                minn=low[i];\n                pos=i;\n            }\n        }\n        ans=ans+minn;//\u8bb0\u5f55\u7b54\u6848 \n        vis[pos]=1;\n        for(int i=1;i<=n;i++)\n        {\n            if(vis[i]!=1&&low[i]>map[pos][i])//\u66f4\u65b0\u6743\u503c \n            {\n                low[i]=map[pos][i];\n            }\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1500028955,
        "uid": 35353,
        "name": "\u4e91\u96fe\u7e41\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u975e\u5e38\u88f8\u7684Prim\u7b97\u6cd5\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u81ea\u5df1\u5199\u7684\u9002\u5408\u65b0\u624b\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint map[101][101],n,sum=0;\nint mina[1000];\nbool visit[1000];\nint main() {\n    cin>>n;\n    for(int i=1; i<=n; ++i)\n        for(int k=1; k<=n; ++k)\n            cin>>map[i][k];//\u56e0\u4e3a\u6570\u636e\u6c34\uff0c\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\u5b8c\u5168\u53ef\u4ee5\u3002\n    memset(mina,0x7f,sizeof(mina));//mina[i]\u8868\u793aI\u7535\u4e0e\u4ed6\u7684\u7236\u4eb2\u8fde\u63a5\u7684\u6700\u5c0f\u6743\u503c\n    memset(visit,true,sizeof(visit));//visit\u7528\u6765\u5224\u65ad\u8be5\u70b9\u662f\u5426\u5728\u751f\u6210\u6811\u5185\n    mina[1]=0;\n    for(int i=1; i<=n; ++i) {\n        int k=0;\n        for(int j=1; j<=n; ++j)\n            if(visit[j]==true&&(mina[j]<mina[k]))//\u8f6c\u6362\u7236\u4eb2\u8282\u70b9\n                    k=j;\n                    visit[k]=false;\n                    for(int j=1; j<=n; ++j)\n                        if(visit[j]==true&&map[k][j]<mina[j])//\u5224\u65ad\u662f\u5426\u4e3a\u6700\u5c0f\u8fb9\n                            mina[j]=map[k][j];\n                }\nint total=0;\nfor(int i=1;i<=n;++i)\ntotal+=mina[i];\ncout<<total;\n}\n```",
        "postTime": 1479172110,
        "uid": 9841,
        "name": "duzhenbang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u7528prim\u548ckruskal\u90fd\u505a\u4e86\u3002\n\n\nprim\u4ee3\u7801\uff1a\n\n/\\*\nID: veilman1\n\nPROG: agrinet\n\nLANG: C++\n\n\\*/\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<fstream>\nusing namespace std;\nint n;    //\u519c\u573a\u6570\u91cf\nint a[101][101]= {0};    //\u9886\u63a5\u77e9\u9635\nint p[101]= {0},q[101]= {0};\nint b[101][101]= {0};\nint main() {\n    ifstream fin(\"agrinet.in\");\n    ofstream fout(\"agrinet.out\");\n    fin>>n;    //\u8f93\u5165\n    for(int i=1; i<=n; i++) {\n        for(int j=1; j<=n; j++) {\n            fin>>a[i][j];\n        }\n    }\n    p[1]=1;\n    for(int i=2; i<=n; i++) {\n        q[i]=1;\n    }\n    for(int i=1; i<=n; i++) {\n        int s=999999999;\n        int x=0,y=0;\n        for(int j=1; j<=n; j++) {\n            if(p[j]==1) {\n                for(int k=1; k<=n; k++) {\n                    if(a[j][k]!=0&&s>a[j][k]&&q[k]) {\n                        s=a[j][k];\n                        x=k;\n                        y=j;\n                    }\n                }\n            }\n        }\n        p[x]=1;\n        q[x]=0;\n        b[x][y]=1;\n        b[y][x]=1;\n        int h=0;\n        for(int j=1; j<=n; j++) {\n            if(p[j]==0) {\n                h=1;\n                break;\n            }\n        }\n        if(h==0) {\n            break;\n        }\n    }\n    int ans=0;\n    for(int i=1; i<=n; i++) {\n        for(int j=n; j>=i; j--) {\n            if(b[i][j]) {\n                ans+=a[i][j];\n            }\n        }\n    }\n    fout<<ans<<endl;\n    return 0;\n}\n```\nkruskal\u4ee3\u7801:\n/\\*\nID: veilman1\n\nPROG: agrinet\n\nLANG: C++\n\n\\*/\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<algorithm>\nusing namespace std;\nint n;    //\u519c\u573a\u6570\u91cf\nint a[101][101]= {0};    //\u63a5\u77e9\u9635\nstruct A {\n    int x,y,z;    //\u4e24\u4e2a\u53ef\u8fde\u7684\u70b9\u53ca\u6743\u503c\n    bool zt=false;    //\u662f\u5426\u8fde\u63a5\n} b[10001];\nint p[101]= {0};\nint zgjd(int x) {    //\u627e\u6839\u8282\u70b9\n    while(p[x]>0) {\n        x=p[x];\n    }\n    return x;\n}\nint m=0;    //\u8fb9\u6570\nint total=0;\nint cmp(A const x,A const y) {\n    if(x.z<y.z) {\n        return 1;\n    }\n    return 0;\n}\nint main() {\n    ifstream fin(\"agrinet.in\");\n    ofstream fout(\"agrinet.out\");\n    fin>>n;    //\u8f93\u5165\n    for(int i=1; i<=n; i++) {\n        for(int j=1; j<=n; j++) {\n            fin>>a[i][j];\n            if(i!=j) {\n                m++;\n                b[m].x=i;\n                b[m].y=j;\n                b[m].z=a[i][j];\n            }\n        }\n    }\n    sort(b+1,b+m+1,cmp);\n    for(int i=1; i<=n; i++) {\n        p[i]=-1;\n    }\n    for(int i=1; i<=m; i++) {\n        int genx=zgjd(b[i].x);\n        int geny=zgjd(b[i].y);\n        if(genx!=geny) {\n            p[genx]+=p[geny];\n            p[geny]=genx;\n            total+=a[b[i].x][b[i].y];\n            b[i].zt=true;    //\u72b6\u6001\u4e3a\u8fde\u63a5\n        }\n    }\n    fout<<total<<endl;\n    return 0;\n}\n```",
        "postTime": 1472358481,
        "uid": 13117,
        "name": "Ouaoan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint g[101][101];              //\u90bb\u63a5\u77e9\u9635\nint minn[101];                //minn[i]\u5b58\u653e\u84dd\u70b9i\u4e0e\u767d\u70b9\u76f8\u8fde\u7684\u6700\u5c0f\u8fb9\u6743\nbool u[101];                  //u[i]=True\uff0c\u8868\u793a\u9876\u70b9i\u8fd8\u672a\u52a0\u5165\u5230\u751f\u6210\u6811\u4e2d\n                              //u[i]=False\uff0c\u8868\u793a\u9876\u70b9i\u5df2\u52a0\u5165\u5230\u751f\u6210\u6811\u4e2d \nint n,i,j;\nint main()\n{\n    freopen(\"wire.in\",\"r\",stdin);\n    freopen(\"wire.out\",\"w\",stdout);\n    cin >> n;\n    for (i = 1; i <= n; i++)\n        for (j = 1; j <= n; j++)\n            cin >> g[i][j];           \n    memset(minn,0x7f,sizeof(minn));   //\u521d\u59cb\u5316\u4e3amaxint\n    minn[1] = 0;\n    memset(u,1,sizeof(u));            //\u521d\u59cb\u5316\u4e3aTrue\uff0c\u8868\u793a\u6240\u6709\u9876\u70b9\u4e3a\u84dd\u70b9\nfor (i = 1; i <= n; i++)\n    {\n        int k = 0;\n        for (j = 1; j <= n; j++)     //\u627e\u4e00\u4e2a\u4e0e\u767d\u70b9\u76f8\u8fde\u7684\u6743\u503c\u6700\u5c0f\u7684\u84dd\u70b9k\n            if (u[j] && (minn[j] < minn[k]))\n                k = j;\n        u[k] = false;                    //\u84dd\u70b9k\u52a0\u5165\u751f\u6210\u6811\uff0c\u6807\u8bb0\u4e3a\u767d\u70b9\n        for (j = 1; j <= n; j++)         //\u4fee\u6539\u4e0ek\u76f8\u8fde\u7684\u6240\u6709\u84dd\u70b9\n            if (u[j] && (g[k][j] < minn[j]))\n                 minn[j] = g[k][j]; \n    }       \n    int total = 0;\n    for (i = 1; i <= n; i++)             //\u7d2f\u52a0\u6743\u503c \n        total += minn[i];\n    cout << total << endl;\n    return 0;\n}\n===========================================================================================================\nPrim\n```",
        "postTime": 1471683498,
        "uid": 20625,
        "name": "flipped",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "prim\u7b97\u6cd5\u4e00\u904d\u8fc7\n\n  \n  \n  \n  \n   \n   \n \n \n \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nint n,a[10002][10002],i,j,k,dis[10002],minn=0x7fffffff,ans;\nbool f[10002];\nint main()\n{\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n  memset(f,false,sizeof(f));\n  memset(dis,127/3,sizeof(dis));\n  scanf(\"%d\",&n);\n  for(i=1;i<=n;i++)\n  for(j=1;j<=n;j++) scanf(\"%d\",&a[i][j]);\n  for(i=1;i<=n;i++) if(a[1][i]!=0) dis[i]=a[1][i];\n  f[1]=true;\n  for(i=1;i<=n;i++)\n {\n     minn=dis[0]+10; k=0;\n   for(j=1;j<=n;j++)\n   if(!f[j]&&minn>dis[j]) { minn=dis[j]; k=j; }\n   if(k==0) break;\n    f[k]=true;\n   ans=ans+dis[k];\n   for(j=1;j<=n;j++)\n   if(dis[j]>a[k][j]&&a[k][j]>0&&!f[j]) \n   dis[j]=a[k][j];\n }\n cout<<ans;\n fclose(stdin);\n fclose(stdout);\n return 0;\n}\n\n```",
        "postTime": 1446106107,
        "uid": 7427,
        "name": "\u5979\u8bf4123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u9ed8\u8ba4\u7528\u77e9\u9635\u5b58\u50a8\n\n\u6240\u4ee5\u76f4\u63a5\u5957\u7528Prim\n\n```cpp\n\n#include <iostream>  \nusing namespace std;  \nbool flag[100];  \nint n, dist[100], w[100][100], ans = 0;  \nvoid Prim(int vi)  \n{  \n    int k = vi;  \n    for (int i = 0; i < n; i++)  \n        dist[i] = w[vi][i];  \n    flag[vi] = true;  \n    for (int i = 0; i < n - 1; i++)  \n    {  \n        int min = 99999999;  \n        for(int j = 0; j < n; j++)  \n            if (dist[j] < min && !flag[j])  \n                k = j, min = dist[j];  \n        flag[k] = true;  \n        for (int j = 0; j < n; j++)  \n            if (dist[j] > w[k][j] && !flag[j])  \n                dist[j] = w[k][j];  \n    }  \n}  \nint main(int argc, char *argv[])  \n{  \n    cin >> n;  \n    for (int i = 0; i < n; i++)  \n        for (int j = 0; j < n; j++)  \n            cin >> w[i][j];  \n    Prim(0);  \n    for (int i = 0; i < n; i++)  \n        ans += dist[i];  \n    cout << ans;  \n    return 0;  \n}  \n\n```",
        "postTime": 1445525028,
        "uid": 4139,
        "name": "Stolf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u4e00\u822c\u6709\u4e24\u79cd\u89e3\u6cd5\uff0c\u4ecb\u7ecd\u4e00\u79cd\uff08prim\u7b97\u6cd5\uff09\uff1b\n\n\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N^2);\u7a7a\u95f4O(N^2);\n\n```cpp\n//\u9996\u5148B\u6570\u7ec4\u8d1ftrue\nfillchar(b,sizeof(b),true);\n//\u9996\u5148\u5c06\u7b2c\u4e00\u4e2a\u8282\u70b9\u52a0\u5165\uff0cB\u6570\u7ec4\u8d1ffalse\n b[1]:=false;\n//\u7528min[i]\u8868\u793a\u5f53\u524d\u8fde\u63a5\u5230i\u8282\u70b9\u6700\u5c11\u7684\u8def\u5f84\nfor i:=1 to n do min[i]:=a[1,i];\n//\u7136\u540e\u6bcf\u6b21\u8d2a\u5fc3\u53d6\u6700\u5c11\u7684\nfor i:=2 to n do\n    begin\n      w:=0;\n      for j:=2 to n do\n        if b[j] then\n          if min[j]<min[w] then w:=j;\n//\u53d6\u597d\u540e\uff0cB\u6570\u7ec4\u8d1ffalse\nb[w]:=false;\n```\n\u7d2f\u52a0\u603b\u548c  inc(ans,min[w]);\n\u5e76\u4e14\u66f4\u65b0min\u6570\u7ec4\u7684\u503c\n\n```cpp\nfor j:=2 to n do\n        if b[j] then\n          if a[w,j]<min[j] then\n            min[j]:=a[w,j];\n```\n\u5177\u4f53\u7a0b\u5e8f\u5982\u4e0b\uff1a\n```cpp\nvar\n  n,i,j,w,ans:longint;\n  a:array[0..101,0..101] of longint;\n  b:array[0..1000] of boolean;\n  min:array[0..1000] of longint;\nbegin\n  read(n);\n  for i:=1 to n do\n    for j:=1 to n do\n      read(a[i,j]);//\u8bfb\u5165\n  for i:=1 to n do min[i]:=a[1,i];//\u8bbe\u7f6emin\u6570\u7ec4\u7684\u521d\u503c\n  fillchar(b,sizeof(b),true);//B\u6570\u7ec4\u8d1ftrue\n  b[1]:=false;\n  min[0]:=maxlongint;//\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\uff0c\u5176\u5b9e\u7528\u4e00\u4e2a\u6570\u8bb0\u5f55\u6700\u5c0f\u4e5f\u53ef\u4ee5\n  for i:=2 to n do  // \u628a\u6240\u6709\u7684\u8282\u70b9\u5168\u90fd\u8fde\u63a5\uff0c\u5171\u9700\u8981n-1\u6b21\uff08\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\uff09\n    begin\n      w:=0;\n      for j:=2 to n do\n        if b[j] then //\u5224\u91cd\u4e0e\u56de\u8def\n          if min[j]<min[w] then w:=j;\n      inc(ans,min[w]);\n      b[w]:=false;//\u975e\u5e38\u5173\u952e\uff0c\u5426\u5219\u51fa\u9519\n      for j:=2 to n do\n        if b[j] then //\u540c\u4e0a\n          if a[w,j]<min[j] then\n            min[j]:=a[w,j];//\u6bcf\u6b21\u66f4\u65b0min\u7684\u503c\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4f7f\u7528\n    end;\n  writeln(ans);\nend.{prim\u7b97\u6cd5}\n```",
        "postTime": 1377744633,
        "uid": 734,
        "name": "lych",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1546 \u3010\u6700\u77ed\u7f51\u7edc Agri-Net\u3011"
    }
]