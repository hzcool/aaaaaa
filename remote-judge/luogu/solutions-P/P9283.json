[
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n- \u5728\u4e00\u4e2a $1$ \u884c $n$ \u5217\u7684\u68cb\u76d8\u4e0a\uff0c\u6709 $m$ \u4e2a\u68cb\u5b50\uff0c\u7b2c $i$ \u4e2a\u68cb\u5b50\u5728\u4ece\u5de6\u5f80\u53f3\u7b2c $pos_i$ \u5217\uff0c\u989c\u8272\u662f $col_i$\u3002\n- \u73b0\u5728 Alice \u548c Bob \u8981\u8f6e\u6d41\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5982\u4e0b\uff1a\n  - \u9009\u4e2d\u4e00\u4e2a\u68cb\u5b50\u4ee5\u53ca\u5b83\u5230\u53f3\u8fb9\u4e0b\u4e00\u4e2a\u540c\u8272\u68cb\u5b50\uff08\u82e5\u4e0d\u5b58\u5728\u5219\u5230\u5e95\uff09\u4e4b\u95f4\u7684\u6240\u6709\u68cb\u5b50\uff08\u5305\u542b\u5de6\u8fb9\u4e0d\u5305\u542b\u53f3\u8fb9\uff09\u3002\n  - \u5168\u90e8\u5411\u524d\u79fb\u52a8\u540c\u4e00\u4e2a\u8ddd\u79bb\uff0c\u79fb\u52a8\u4e4b\u540e\u8981\u4fdd\u8bc1\u68cb\u5b50\u6ca1\u6709\u91cd\u53e0\u5e76\u4e14\u68cb\u5b50\u4e4b\u95f4\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002\n- Alice \u5148\u624b\uff0c\u8c01\u4e0d\u80fd\u52a8\u8c01\u5c31\u8f93\u4e86\u3002\n\n## \u89e3\u9898\u601d\u8def\n\u5148\u8003\u8651\u53ea\u6709\u4e00\u79cd\u68cb\u5b50\uff0c\u90a3\u4e48\u6bcf\u6b21\u5c31\u53ea\u79fb\u52a8\u4e00\u679a\u68cb\u5b50\u3002  \n\u90a3\u4e48\u6211\u4eec\u628a\u68cb\u5b50\u4e4b\u95f4\u7684\u7a7a\u4f4d\u770b\u6210\u77f3\u5b50\uff0c\u90a3\u4e48\u9898\u76ee\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\n- \u6709 $k$ \u5806\u77f3\u5b50\uff0cAlice \u548c Bob \u8f6e\u6d41\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u5b9a\u4e00\u5806\u4e0d\u662f\u6700\u53f3\u8fb9\u7684\u77f3\u5b50\uff0c\u53d6\u51fa\u82e5\u5e72\u77f3\u5b50\uff0c\u79fb\u52a8\u5230\u53f3\u8fb9\u76f8\u90bb\u7684\u5806\u91cc\u3002\n- Alice \u5148\u624b\uff0c\u8c01\u4e0d\u80fd\u52a8\u8c01\u5c31\u8f93\u4e86\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u662f\u9636\u68af NIM \u7684\u6a21\u677f\u9898\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003 [P3480 [POI2009]KAM-Pebbles](https://www.luogu.com.cn/problem/P3480)\u3002  \n\u8fd9\u91cc\u6765\u7c97\u7565\u7684\u8bb2\u4e00\u4e0b\u9636\u68af NIM \u7684\u505a\u6cd5\u3002  \n**\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u987a\u5e8f\u6362\u4e00\u4e0b\uff0c\u6539\u6210\u4ece\u7b2c $i$ \u5806\u79fb\u52a8\u5230\u7b2c $i-1$ \u5806\uff0c\u79fb\u5230\u7b2c\u4e00\u5806\u7ed3\u675f\u3002**  \n\u6b63\u5e38\u7684 NIM \u662f\u76f4\u63a5\u628a\u77f3\u5b50\u6254\u6389\uff0c\u7136\u800c\u5728\u9636\u68af NIM \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5947\u6570\u5806\u770b\u6210\u5783\u573e\u6876\u3002  \n- \u5982\u679c\u6709\u4eba\u628a\u5076\u6570\u5806\u653e\u5230\u5947\u6570\u5806\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u628a\u77f3\u5b50\u6254\u6389\u4e86\u3002\n- \u5982\u679c\u6709\u4eba\u628a\u5947\u6570\u5806\u653e\u5230\u5076\u6570\u5806\uff0c\u5fc5\u80dc\u8005\u4e3a\u4e86\u4fdd\u6301\u81ea\u5df1\u7684\u5fc5\u80dc\u72b6\u6001\uff0c\u4e00\u5b9a\u53ef\u4ee5\u628a\u8fd9\u4e9b\u77f3\u5b50\u91cd\u65b0\u79fb\u5230\u5947\u6570\u5806\u91cc\uff08\u7b2c\u4e00\u5806\u662f\u5947\u6570\u5806\uff09\u3002\n\n\u6240\u4ee5\u9636\u68af NIM \u5c31\u76f8\u5f53\u4e8e\u53ea\u6709\u5076\u6570\u5806\u7684\u666e\u901a NIM\uff0c\u90a3\u4e48\u4ed6\u7684 SG \u503c\u5c31\u662f\u5076\u6570\u5806\u4e2a\u6570\u5f02\u6216\u8d77\u6765\u3002\n\n\u56de\u5230\u539f\u6765\u7684\u95ee\u9898\u4e0a\u6765\uff0c\u5982\u679c\u6709\u591a\u79cd\u989c\u8272\u5462\uff1f  \n\u6211\u4eec\u53d1\u73b0\u8fd9\u548c\u53ea\u6709\u4e00\u79cd\u989c\u8272\u7684\u60c5\u51b5\u5e76\u6ca1\u6709\u5f88\u5927\u7684\u5dee\u522b\u3002  \n\u4f60\u5728\u79fb\u52a8\u4e00\u79cd\u989c\u8272\u7684\u68cb\u5b50\u65f6\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u989c\u8272\u7684\u68cb\u5b50\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002  \n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\u7ef4\u62a4\u9636\u68af NIM\uff0c\u4e5f\u5c31\u6570\u4ece\u53f3\u5f80\u5de6\u7684\u5076\u6570\u6bb5\u957f\u5ea6\u5f02\u6216\u548c\uff0c\u6700\u540e\u5f02\u6216\u8d77\u6765\u5373\u53ef\u3002\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u4e5f\u53ef\u4ee5\u79bb\u7ebf\u52a0\u7ebf\u6bb5\u6570\u7ef4\u62a4\u3002\n\n## \u793a\u4f8b\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr int maxn = 2e5 + 10;\n\nint n, m, q;\nint b[maxn], tot;\nint qry1[maxn], qry2[maxn], qry3[maxn];\nint pos[maxn], col[maxn];\nset<pair<int, int>> curpos;\n\n#define lc (x << 1)\n#define rc (x << 1 | 1)\n#define mid (l + r >> 1)\n\nstruct segtree {\n  struct node {\n    int x, y, cnt;\n  } t[maxn << 2];\n  node merge(node a, node b) {\n    if (a.cnt & 1) a.x ^= b.y, a.y ^= b.x;\n    else a.x ^= b.x, a.y ^= b.y;\n    a.cnt += b.cnt;\n    return a;\n  }\n  void change(int x, int a, int b) {\n    if (a != -1) t[x].x = a;\n    if (b != -1) t[x].cnt = b;\n  }\n  void up(int x) {\n    t[x] = merge(t[lc], t[rc]);\n  }\n\n  void update(int x, int l, int r, int q, int a, int b) {\n    if (q < l || q > r) return;\n    if (l == r) return change(x, a, b);\n    update(lc, l, mid, q, a, b), update(rc, mid + 1, r, q, a, b);\n    up(x);\n  }\n\n  void update(int q, int a, int b) {\n    update(1, 1, tot, q, a, b);\n  }\n} t[5];\n\n#undef lc\n#undef rc\n#undef mid\n\nvoid insert(int pos, int col) {\n  pos = lower_bound(b + 1, b + 1 + tot, pos) - b;\n  auto it = curpos.upper_bound({pos, -1});\n  if (it != curpos.end()) {\n    t[it->second].update(it->first, b[it->first] - b[pos] - 1, 1);\n  }\n  int lst = 0;\n  --it, lst = b[it->first];\n  t[col].update(pos, b[pos] - lst - 1, 1);\n  curpos.insert({pos, col});\n}\nvoid del(int pos) {\n  pos = lower_bound(b + 1, b + 1 + tot, pos) - b;\n  auto it = curpos.lower_bound({pos, 0});\n  int col = it->second;\n  int lst = b[prev(it)->first];\n  auto it1 = next(it);\n  if (it1 != curpos.end()) {\n    t[it1->second].update(it1->first, b[it1->first] - lst - 1, 1);\n  }\n  t[col].update(it->first, 0, 0);\n  curpos.erase(it);\n}\nint calc() {\n  int ans = 0;\n  for (int i = 0; i < 5; ++i) {\n    if (t[i].t[1].cnt % 2 == 0) ans ^= t[i].t[1].y;\n    else ans ^= t[i].t[1].x;\n  }\n  return ans;\n}\n\nint main() {\n#ifndef LOCAL\n  cin.tie(nullptr)->sync_with_stdio(false);\n#endif\n  cin >> n >> m;\n  for (int i = 1; i <= m; ++i) cin >> pos[i] >> col[i], col[i]--;\n  cin >> q;\n  for (int i = 1; i <= q; ++i) {\n    cin >> qry1[i];\n    if (qry1[i] == 1) cin >> qry2[i] >> qry3[i], --qry3[i];\n    else cin >> qry2[i];\n  }\n  for (int i = 1; i <= m; ++i) b[++tot] = pos[i];\n  for (int i = 1; i <= q; ++i) if (qry1[i] == 1) b[++tot] = qry2[i];\n  sort(b + 1, b + 1 + tot);\n  curpos.insert({0, 0});\n  tot = unique(b + 1, b + 1 + tot) - b - 1;\n  for (int i = 1; i <= m; ++i) insert(pos[i], col[i]);\n  for (int i = 1; i <= q; ++i) {\n    if (qry1[i] == 1) insert(qry2[i], qry3[i]);\n    else del(qry2[i]);\n    cout << (calc() ? \"Alice\" : \"Bob\") << '\\n';\n  }\n}\n```",
        "postTime": 1682764625,
        "uid": 34225,
        "name": "ftt2333",
        "ccfLevel": 7,
        "title": "P9283"
    }
]