[
    {
        "content": "##BFS + \u4e8c\u5206\u7b54\u6848 + \u6700\u5927\u6d41\n\n\uff08\u7b97\u8865\u5145\u697c\u4e0b\u7684\u628a\uff09\n\n**\u3010\u89e3\u9898\u601d\u8def\u3011**\n\n[1] \u4e8c\u5206\u7b54\u6848 mid \uff08\u6240\u6709\u4eba\u5b89\u5168\u64a4\u79bb\u6240\u9700\u65f6\u95f4\uff09\u3002\n\n[2] \u901a\u8fc7\u6700\u5927\u6d41\u6765\u5224\u65ad\u9003\u751f\u65f6\u95f4\u4e3a mid \u65f6\uff0c\u6240\u6709\u4eba\u80fd\u5426\u5b89\u5168\u64a4\u79bb\uff0c\u80fd\u5219\u7f29\u5c0f\u8fb9\u754c\uff1a\n\n1. \u5c06\u6e90\u70b9 S \u5411\u6bcf\u4e2a\u7a7a\u5730\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a 1 \u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u4e2a\u7a7a\u5730\u521d\u59cb\u65f6\u6709\u4e00\u4e2a\u4eba\uff1b\n\n2. \u56e0\u4e3a**\u6bcf\u4e00\u79d2\u949f\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u79fb\u52a8\u5230\u95e8\u7684\u4f4d\u7f6e**\uff0c\u6211\u4eec\u8981\u5c06\u6bcf\u4e2a\u95e8\u62c6\u6210 mid \u4e2a\u70b9\uff0c\u5206\u522b\u8868\u793a\u65f6\u523b\u4e3a\u7b2c 1 ~ mid \u79d2\u7684\u95e8\uff0c\u5e76\u5411\u6c47\u70b9 T \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a 1 \u7684\u8fb9\uff1b\n\n3. \u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u5728\u4e8c\u5206\u7b54\u6848\u524d\u6211\u4eec\u5148 BFS \u6c42\u51fa\u6bcf\u5757\u7a7a\u5730\u5230\u6bcf\u4e2a\u95e8\u6240\u9700\u65f6\u95f4\uff08\u5f53\u7136\u7528SPFA\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u5176\u5b9e\u8fd9\u65f6\u4e24\u8005\u6548\u7387\u76f8\u540c\uff09\uff0c\u7136\u540e\u5c06\u6bcf\u5757\u7a7a\u5730\u4e0e\u5bf9\u5e94\u6240\u9700\u65f6\u95f4\u7684\u95e8\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff08\u56e0\u4e3a\u521d\u59cb\u65f6\u6bcf\u5757\u7a7a\u5730\u4e0a\u53ea\u6709\u4e00\u4e2a\u4eba\uff09\uff1b\n\n4. \uff08\u8fd9\u4e00\u70b9\u697c\u4e0b\u6ca1\u8bb2\uff0c\u4f46\u4ee3\u7801\u91cc\u6709\u5199\uff09\u90a3\u4e48\u5982\u679c\u6709\u4e00\u4e9b\u4eba\uff08\u4eba\u6570\u5927\u4e8e\u7b49\u4e8e1\uff09\u8fdb\u5165\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\u7684\u95e8\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u523b\u7684\u8fd9\u6247\u95e8\u5bf9\u5e94\u7684\u70b9\u5fc5\u5b9a\u6709 1 \u7684\u6d41\u91cf\u6d41\u5165\u6c47\u70b9\uff0c\u4f46\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u4eba\u5230\u8fbe\u540c\u4e00\u4e2a\u95e8\u6240\u9700\u7684\u65f6\u95f4\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u5269\u4e0b\u7684\u4eba\u7b49\u5230\u4e0b\u4e00\u79d2\u518d\u8ba9\u5176\u4e2d\u4e00\u4e2a\u4eba\u79fb\u52a8\u5230\u95e8\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5bf9\u4e8e\u65f6\u523b\u4e3a\u7b2c 1 ~ mid - 1 \u79d2\u7684\u95e8\uff0c\u6211\u4eec\u90fd\u8981\u5411\u65f6\u523b\u4e3a\u4e0b\u4e00\u79d2\u7684\u95e8\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u7a77\u5927\u7684\u8fb9\uff08\u56e0\u4e3a\u540c\u4e00\u65f6\u523b\u5230\u8fbe\u95e8\u7684\u4eba\u53ef\u80fd\u6709\u4efb\u610f\u591a\uff0c\u4e14 mid >= \u6b63\u786e\u7b54\u6848\u65f6\uff0c\u6240\u6709\u4eba\u6240\u4ee3\u8868\u7684\u6d41\u91cf\u90fd\u5c06\u6d41\u5165\u6c47\u70b9 T\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u591a\u8003\u8651\u4eba\u6570\u4e86\uff09\uff1b\n\n5. \u5224\u65ad\u5982\u6b64\u5efa\u56fe\u7684\u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e\u603b\u4eba\u6570\uff08\u603b\u7684\u7a7a\u5730\u6570\uff09\uff0c\u5982\u679c\u4e00\u76f4\u65e0\u6cd5\u76f8\u7b49\u5219\u8bf4\u660e\u6240\u6709\u4eba\u65e0\u6cd5\u5168\u90e8\u5b89\u5168\u64a4\u51fa\uff0c\u8f93\u51fa\u201cimpossible\u201d\u3002\n\n**\u3010\u6ce8\u610f\u3011**\n\n1. \u56e0\u4e3a\u8981\u62c6\u70b9\uff0c\u7a7a\u95f4\u95ee\u9898\u6bd4\u8f83\u68d8\u624b\uff08\u4e0b\u9762\u7684\u4ee3\u7801\u7a7a\u95f4\u5f00\u7684\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5927\uff0c\u4e5f\u662f\u4eceMLE\u4e2d\u6162\u6162\u8c03\u51fa\u6765\u7684\uff09\uff1b\n\n2. \u56e0\u4e3a\u8981\u8dd1\u591a\u6b21\u6700\u5927\u6d41\uff0c\u6e90\u70b9\u6c47\u70b9\u4ee5\u53ca\u5efa\u8fb9\u90fd\u8981\u6ce8\u610f\u91cd\u7f6e\u3002\n\n**\u3010AC\u4ee3\u7801\u3011**\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int L = 21, M = 1e6 + 5, N = 5e4 + 5;\nconst int dx[] = {-1, 1, 0, 0},\n          dy[] = {0, 0, -1, 1};\nint dis[N][L][L], h[N][2], G[L][L]; \nint lst[N], nxt[M], to[M], flw[M], cur[N], lev[N];\nint n, m, T, E, R, l = 1, r = 1000, Ans = -1, src, des; \nbool vis[L][L]; char c[L][L];\ntemplate <class T> inline T Min(const T a, const T b) {return a < b? a : b;}\ntemplate <class T> inline void CkMax(T &a, const T b) {if (a < b) a = b;}\ntemplate <class T> inline void CkMin(T &a, const T b) {if (a > b) a = b;}\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void add(const int x, const int y, const int z)\n{\n    nxt[++T] = lst[x]; lst[x] = T; to[T] = y; flw[T] = z;\n    nxt[++T] = lst[y]; lst[y] = T; to[T] = x; flw[T] = 0;\n}\ninline bool Bfs()\n{\n    static int Qn, Q[N]; int x, y;\n    for (int i = src; i <= des; ++i) cur[i] = lst[i], lev[i] = -1;\n    Q[Qn = 1] = src; lev[src] = 0;\n    for (int j = 1; j <= Qn; ++j)\n    {\n        x = Q[j];\n        for (int i = lst[x]; i; i = nxt[i])\n         if (flw[i] > 0 && lev[y = to[i]] == -1)\n         {\n             lev[y] = lev[x] + 1; Q[++Qn] = y;\n             if (y == des) return true;\n         }\n    }\n    return false;\n}\ninline int Dinic(const int x, const int fl)\n{\n    if (x == des) return fl;\n    int Del, res = 0, y;\n    for (int &i = cur[x]; i; i = nxt[i])\n    if (flw[i] > 0 && lev[x] < lev[y = to[i]])\n    {\n        Del = Dinic(y, Min(flw[i], fl - res));\n        if (Del)\n        {\n            flw[i] -= Del; flw[i ^ 1] += Del;\n            res += Del; if (res == fl) break;\n        }\n    }    \n    if (res != fl) lev[x] = -1;\n    return res;\n}\ninline int MaxFlow()\n{\n    int res = 0;\n    while (Bfs()) res += Dinic(src, Maxn);\n    return res;\n}\ninline void Ready(const int s, const int px, const int py)\n{\n    memset(vis, false, sizeof(vis)); int x, y, t = 0, w = 1; \n    vis[px][py] = true; dis[s][px][py] = 0; h[w][0] = px; h[w][1] = py;\n    while ((t++) < w)\n     for (int i = 0; i < 4; ++i)\n     {\n        int tx = h[t][0] + dx[i], ty = h[t][1] + dy[i];\n        if (tx < 1 || tx > n || ty < 1 || ty > m || vis[tx][ty] || c[tx - 1][ty - 1] != '.') continue;\n        dis[s][tx][ty] = dis[s][h[t][0]][h[t][1]] + 1;\n        h[++w][0] = tx; h[w][1] = ty; vis[tx][ty] = true;\n     }\n}\ninline bool Judge(const int mi)\n{\n    src = 0; des = R + E * mi + 1; T = 1;\n    memset(lst, 0, sizeof(lst));\n    for (int i = 1; i <= n; ++i)\n     for (int j = 1; j <= m; ++j)\n      if (c[i - 1][j - 1] == '.') add(src, G[i][j], 1);\n    for (int k = 1; k <= E; ++k)\n     for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= m; ++j)\n       if (c[i - 1][j - 1] == '.' && dis[k][i][j] <= mi) \n           add(G[i][j], (k - 1) * mi + R + dis[k][i][j], 1);\n    for (int i = 1; i <= E; ++i)\n     for (int j = 1; j <= mi; ++j) \n     {    \n        int tmp = (i - 1) * mi + R; add(tmp + j, des, 1);\n        if (j != mi) add(tmp + j, tmp + j + 1, Maxn);\n     }\n    return MaxFlow() == R;\n}\nint main()\n{\n    memset(dis, Maxn, sizeof(dis));\n    n = get(); m = get(); \n    for (int i = 0; i < n; ++i) scanf(\"%s\", c[i]);\n    for (int i = 1; i <= n; ++i)\n     for (int j = 1; j <= m; ++j)\n     if (c[i - 1][j - 1] == 'D') Ready(++E, i, j);\n      else if (c[i - 1][j - 1] == '.') G[i][j] = ++R; \n    while (l <= r)\n    {\n        int mid = l + r >> 1;\n        if (Judge(mid)) Ans = mid, r = mid - 1;\n         else l = mid + 1;\n    } \n    if (Ans == -1) puts(\"impossible\");\n     else put(Ans);\n    return 0;\n}\n```",
        "postTime": 1499042247,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "\u524d\u8a00:\u672c\u5f31\u9e21\u4e5f\u662f\u770b\u4e86\u7f51\u4e0a\u67d0dalao\u7684\u535a\u5ba2\u624d\u4f1a\u5199\u7684,\u6b64\u535a\u5ba2\u94fe\u63a5:[\u79df\u9165\u96e8](https://www.cnblogs.com/zhoushuyu/p/8194711.html)\n\n----\n\n- \u8fd9\u9898\u6570\u636e\u5f88\u5c0f,\u9898\u76ee\u53c8\u6697\u793a\"\u6700\u77ed\u9700\u8981\u591a\u5c11\u65f6\u95f4\",\"\u4eba\u5bf9\u5e94\u95e8\",\u90a3\u5c31\u5199****\u7f51\u7edc\u6d41****\u5427\u3002     \n\n- \u8fd9\u9898\u8bf4\"\u6700\u77ed\",\u800c\u4e14\u4eba\u5728\u539f\u5730\u662f\u6ca1\u95ee\u9898\u7684,\u90a3\u5c31\u5199\u4e2a****\u4e8c\u5206****\u7b54\u6848(_\u65f6\u95f4_)\u5427\u3002\n\n---\n\n\u600e\u4e48\u5199\u7f51\u7edc\u6d41\u5462,\u6bcf\u4e2a\u4eba\u5411 $mid$ \u65f6\u95f4\u5185\u53ef\u8fbe\u4e4b\u95e8\u8fde\u4e00\u5f20\u8fb9\u5417?    \n\u9898\u76ee\u8981\u6c42:\"\u6bcf\u4e00\u79d2\u949f\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba\u79fb\u52a8\u5230\u95e8\u7684\u4f4d\u7f6e\".\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u552f\u4e00\u6027,\u9700\u8981\u628a\u6bcf\u4e00\u6247\u95e8\u62c6\u6210 $mid$ \u4e2a\u70b9. $mid$ \u4e2a\u70b9\u5404\u5411T\u8fde\u4e00\u67611\u8fb9.   \n(\u4e0d\u719f\u6089\u62c6\u70b9\u53ef\u4ee5\u505a\u4e00\u505a[SCOI2007\u4fee\u8f66](https://www.luogu.org/problemnew/show/P2053))         \n\n---\n\n\n\u600e\u4e48\u8fde\u4eba\u4e0e\u95e8\u4e4b\u95f4\u7684\u8fb9?\u6211\u63d0\u4f9b\u4e24\u79cd\u65b9\u6cd5:   \n - \u5927\u591a\u6570\u9898\u89e3\u8bf4\u7684: \u6bcf\u4e2a\u4eba\u5411 $mid$ \u65f6\u95f4\u5185$(x)$\u53ef\u8fbe\u4e4b\u95e8\u8fde\u4e00\u6761 1 \u8fb9.\n\u6bcf\u4e00\u4e2a\u95e8\u7684\u8fb9\u4e0e\u8fb9$1->2...$\u4e4b\u95f4\u8fde $INF$ \u8fb9.   \n($INF$\u8868\u793a\u5982\u679c$n$\u4e2a\u4eba\u6324\u5728\u4e00\u8d77\u53e6$n-1$\u4eba\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6761\u8fb9\u5230\u4e0b\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684\u95e8\u518d\u8fdb\u53bb).  \n \n- \u672c\u5f31\u9e21\u7684\u76f4\u63a5\u60f3\u6cd5:\u5982\u679c\u67d0\u4eba\u53ef\u4ee5\u5728$(x)$\u65f6\u95f4\u5230\u95e8$d$,\u90a3\u4e48\u5c31\u5f80$d$\u7684$x,x+1,x+...,mid$\u90fd\u8fde\u4e00\u6761$1$\u8fb9,\u60f3\u8d70\u54ea\u91cc\u5c31\u8d70\u54ea\u91cc.  \n//\u7136\u800c\u65f6\u95f4\u7a7a\u95f4\u5b9e\u6d4b\u662f\u65b9\u6cd51\u7684\u597d\u51e0\u500d\n\n\n---\n\n\u95ee\u9898\u5c31\u89e3\u51b3\u4e86.\n\n---\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define re register\n#define il inline\n\n#define _ 1001\n#define A 23*23\n#define INF 2139062143\n\n\nusing namespace std;\n\n\nint n,m,pnum,dnum,Dis[21][21],ps,ds,D[A][A],ct=1,h[_*_],S,T,cur[_*_],dep[_*_];\nint u[4]={-1,0,1,0};\nint v[4]={0,1,0,-1};\nchar mp[21][21];\nstruct Dot\n{\n\tint x,y;\n}p[_],d[_];\nstruct ed{int t,nxt,w;}e[_*_];\n\n\nvoid add(int fr,int t,int w)\n{\n\te[++ct]=(ed){t,h[fr],w};h[fr]=ct;\n\te[++ct]=(ed){fr,h[t],0};h[t]=ct;\n}\n\n\nvoid Bfs(Dot pp,int ID)\n{\n\tqueue<Dot>Q;\n\twhile(!Q.empty())Q.pop();\n\tQ.push(pp);\n\tmemset(Dis,0x7f,sizeof(Dis));\n\tDis[pp.x][pp.y]=0;\n\twhile(!Q.empty())\n\t{\n\t\tDot uo=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tint xo=uo.x+u[i],yo=uo.y+v[i];\n\t\t\tif(xo<1||xo>n||yo<1||yo>m||mp[xo][yo]=='X')continue;\n\t\t\tif(Dis[xo][yo]>Dis[uo.x][uo.y]+1)\n\t\t\t{\n\t\t\t\tDis[xo][yo]=Dis[uo.x][uo.y]+1;\n\t\t\t\tQ.push((Dot){xo,yo});\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=dnum;i++)\n\t\tD[ID][i]=Dis[d[i].x][d[i].y];//pipo->door\n}\n\n\nint bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tdep[S]=1;\n\tqueue<int>Q;Q.push(S);\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=h[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].t;\n\t\t\tif(!dep[v]&&e[i].w>0)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;Q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T];\n}\n\n\nint dfs(int u,int flow)\n{\n\tif(u==T)return flow;\n\tfor(int &i=cur[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].t;\n\t\tif(e[i].w&&dep[v]==dep[u]+1)\n\t\t{\n\t\t\tint temp=dfs(v,min(flow,e[i].w));//is w,not t!!!\n\t\t\tif(temp)\n\t\t\t{\n\t\t\t\te[i].w-=temp;\n\t\t\t\te[i^1].w+=temp;\n\t\t\t\treturn temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n\nint Dinic()\n{\n\tint ret=0;\n\twhile(bfs())\n\t{\n\t\tfor(int i=ct;i;i--)cur[i]=h[i];\n\t\twhile(int tp=dfs(S,INF))\n\t\t{\n\t\t\tret+=tp;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\nbool check(int mid)\n{\n\tS=dnum*mid+pnum+1,T=S+1;\n\tmemset(h,0,sizeof(h));\n\tct=1;\n\t\n\tfor(int i=1;i<=dnum;i++)\n\t{\n\t\tfor(int j=1;j<=mid;j++)\n\t\t{\n\t\t\tadd((i-1)*mid+j,T,1);\n\t\t\tif(j^mid)\n\t\t\t{\t\t\t\t\n\t\t\t\tadd((i-1)*mid+j,(i-1)*mid+j+1,INF);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=pnum;i++)\n\t\tadd(S,dnum*mid+i,1);\n\t\n\tfor(int i=1;i<=pnum;i++)\n\t{\n\t\tfor(int j=1;j<=dnum;j++)\n\t\t{\n\t\t\tif(D[i][j]<=mid)\n\t\t\t{\n\t\t\t\tadd(dnum*mid+i,(j-1)*mid+D[i][j],1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn Dinic()==pnum;\n}\n\n\nvoid Mid()\n{\n\tint l=1,r=20*20,ans=-1,mid;\n\t\n\twhile(l<=r)check(mid=((l+r)>>1))?ans=mid,r=mid-1:l=mid+1;\n\t\n\tif(ans==-1)\n\t\tputs(\"impossible\");\n\telse\n\t\tprintf(\"%d\\n\",ans);\n}\n\n\nint main()\n{\n\tcin>>n>>m;\n\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tcin>>mp[i][j];\n\t\t\tif(mp[i][j]=='.')\n\t\t\t\tp[++pnum]=(Dot){i,j};\n\t\t\telse\n\t\t\t\tif(mp[i][j]=='D')d[++dnum]=(Dot){i,j};\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=pnum;i++)\n\t\tBfs(p[i],i);\n\n\tMid();\n\n\treturn 0;\n}\n\n```\n\n---\n\n\u540e\u8bb0:   //\u7ba1\u7406\u5458\u5e94\u8be5\u770b\u4e0d\u5230\u5427\uffe3\u03c9\uffe3\n\nNoip\u4e4b\u524d\u6700\u540e\u4e00\u7bc7\u9898\u89e3,\u4f30\u8ba1\u4e5f\u662f\u771f\u00b7\u6700\u540e\u4e00\u7bc7\u4e86,\u8ba9\u6211\u5982\u82f1\u96c4\u672b\u8def\u4e00\u822c\u8bf4\u51e0\u53e5\u65e0\u5173\u7d27\u8981\u7684\u8bdd\u5427:\"\u672c\u4eba\u4e0d\u806a\u660e\u5374\u641eoi,\u5b66\u5f97\u665a\u5374\u4e0d\u7518\u5fc3\u5c45\u4e8e\u4eba\u540e\u3001\u521a\u8ba4\u8bc6\u5230\u5b83\u7684\u9b45\u529b\u65f6\u5374\u8981\u56e0\u4e3a\u81ea\u5df1\u7684\u8fa3\u9e21\u3001\u5b66\u79d1\u7684\u538b\u529b\u800c\u79bb\u5f00\u4e86,\u79bb\u5f00\u8fd9\u4e2a\u7eaf\u51c0\u7684\u673a\u623f,\u79bb\u5f00\u673a\u623f\u91cc\u6211\u503e\u6155\u7684\u7537\u5b69\u4e86...\u6211\u5e0c\u671b\u670b\u53cb\u4f60\u80fd\u73cd\u60dcoi\u7684\u65f6\u5149,\u56e0\u4e3a\u8fd9\u662f\u591a\u5c11\u4eba\u4e3a\u4e4b\u795e\u4f24\u7684\u4e16\u5916\u6843\u6e90\u3001\u5b9d\u8d35\u4e4b\u7269\u554a...\"",
        "postTime": 1541079504,
        "uid": 69935,
        "name": "GUO\u5927\u4fa0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\uff1a\n\n\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u65f6\u523b\u7684\u6bcf\u4e00\u4e2a\u51fa\u53e3\u90fd\u53ea\u80fd\u51fa\u4e00\u4e2a\u4eba\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u6309\u7167\u65f6\u95f4\u6765\u5efa\u56fe\uff0c\u7136\u540e\u8dd1\u4e8c\u5206\u56fe\u5339\u914d\u5c31\u597d\u4e86\u3002\u9996\u5148$BFS$\u9884\u5904\u7406\u51fa\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51fa\u53e3\uff0c\u6bcf\u4e2a\u4eba\u5230\u8fbe\u5b83\u7684\u65f6\u95f4\u662f\u591a\u5c11\u3002\u7136\u540e\u6211\u4eec\u679a\u4e3e\u51fa\u53e3\u3001\u4eba\u548c\u65f6\u95f4\uff0c\u65f6\u95f4\u4ece\u6700\u77ed\u8ddd\u79bb\u5230\u6700\u5927\u65f6\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u90fd\u5c06\u51fa\u53e3\u548c\u4eba\u4e4b\u95f4\u8fde\u8fb9\uff0c\u7136\u540e\u505a\u4e8c\u5206\u56fe\u5339\u914d\u5c31\u597d\u4e86\u3002\n\n#### Code\uff1a\n\n```cpp\n/*Program from Luvwgyx*/\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=30;\nconst int maxm=1.6e6+10;\nconst int inf=1061109567;\nconst int dx[4]={0,0,1,-1};\nconst int dy[4]={1,-1,0,0};\nstruct node{int x,y;}a[maxm],b[maxm];\nstruct edge{int to,nxt;}e[maxm<<1];char s[maxn][maxn];\nint n,m,tot,idx,cnt1,cnt2,head[maxm],match[maxm],vis[maxm],mp[maxn][maxn],dis[maxn][maxn][maxn][maxn];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid print(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar(x%10+'0');\n}\nvoid write(int x){print(x);puts(\"\");}\nint get(int x,int y){return x*m+y;}\nvoid add(int u,int v){e[++tot].to=v;e[tot].nxt=head[u];head[u]=tot;}\nbool dfs(int x){\n    for(int i=head[x],v=e[i].to;i;i=e[i].nxt,v=e[i].to){\n        if(vis[v]==idx)continue;vis[v]=idx;\n        if(!match[v]||dfs(match[v])){match[v]=x;return 1;}\n    }return 0;\n}\nqueue<node >q;\nbool vs[maxn][maxn];\nvoid bfs(int u,int v){\n    memset(vs,0,sizeof(vs));\n    while(!q.empty())q.pop();\n    memset(dis[u][v],63,sizeof(dis[u][v]));\n    dis[u][v][u][v]=0;vs[u][v]=1;q.push((node){u,v});\n    while(!q.empty()){\n        node x=q.front();q.pop();\n        for(int i=0;i<4;i++){\n            int xx=x.x+dx[i],yy=x.y+dy[i];\n            if(0<=xx&&xx<n&&0<=yy&&yy<m&&mp[xx][yy]==1&&!vs[xx][yy])\n            \tq.push((node){xx,yy}),dis[u][v][xx][yy]=dis[u][v][x.x][x.y]+1,vs[xx][yy]=1;\n        }\n    }\n}\nint main(){\n    n=read();m=read();\n    for(int i=0;i<n;i++){\n        scanf(\"%s\",s[i]);\n        for(int j=0;j<m;j++){\n            if(s[i][j]=='X')mp[i][j]=0;\n            if(s[i][j]=='.')mp[i][j]=1,a[cnt1++]=(node){i,j};\n            if(s[i][j]=='D')mp[i][j]=2,b[cnt2++]=(node){i,j};\n        }\n    }\n    for(int i=0;i<n;i++)for(int j=0;j<m;j++)if(mp[i][j]==2)bfs(i,j);\n    for(int i=0;i<cnt2;i++)\n        for(int j=0;j<cnt1;j++)\n            if(dis[b[i].x][b[i].y][a[j].x][a[j].y]<inf)\n                for(int k=dis[b[i].x][b[i].y][a[j].x][a[j].y];k<=n*m;k++)\n                    add(k*cnt2+i,n*m*cnt2+j),add(n*m*cnt2+j,k*cnt2+i);\n    int ret=0;\n    for(int i=0;i<n*m*cnt2;i++){\n        ++idx;if(dfs(i))ret++;\n        if(ret==cnt1){write(i/cnt2);return 0;}\n    }puts(\"impossible\");\n    return 0;\n}\n/*\n4 5\nXXDXX\nXX.XX\nX...X\nXXDXX\n*/\n```",
        "postTime": 1551323660,
        "uid": 43012,
        "name": "Luvwgyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "**\u8d39\u7528\u6d41+\u5361\u5e38\u4f18\u5316**\n\n\u6211\u4eec\u53ea\u5173\u5fc3\u4e00\u4e2a\u4eba\u901a\u8fc7\u95e8\u65f6\u7684\u65f6\u95f4\uff0c\u5728\u7a7a\u5730\u7684\u884c\u8d70\u65f6\u95f4\u53ef\u4ee5\u5206\u5c42\u7ef4\u62a4\n\n\u4e8e\u662f\u6839\u636e\u65f6\u95f4\u5206\u5c42\uff0c\u5230\u95e8\u7684\u65f6\u5019\u518d\u8ba1\u7b97\u4ee3\u4ef7\uff0c\u5373\u4ee3\u4ef7$=$\u5c42\u6570\n\n\u6bcf\u7ecf\u8fc7$1$\u5355\u4f4d\u65f6\u95f4\u5c31\u5411\u4e0b\u8d70\u4e00\u5c42\n\n\u7136\u540e\u5c31\u662f\u4f18\u5316\uff1a\n\n1. \u5220\u53bb\u591a\u4f59\u70b9\uff08\u5c42\uff09\uff1a\u53ea\u8981\u5f00\u548c\u4eba\u6570\u76f8\u540c\u7684\u5c42\uff0c\u56e0\u4e3a\u4e00\u4e2a\u4eba\u7684\u7b49\u5f85\u65f6\u95f4\u4e00\u5b9a\u5c0f\u7b49\u4e8e\u4eba\u6570\n\n2. \u80fd\u9884\u5904\u7406\u7684\u5c3d\u91cf\u9884\u5904\u7406\n\n3. register\uff0c\u5feb\u8bfb\uff0cinline\u7b49\n\n4. \u80fd\u4e0d\u7528stl\u5c3d\u91cf\u4e0d\u7528\uff08\u4f7f\u7528stl:queue=TLE\uff09\uff0c\u5efa\u8bae\u624b\u5199\u961f\u5217\n\n\u590d\u6742\u5ea6$O($\u5361\u5e38\u80fd\u8fc7$)$\uff0c\u8be6\u60c5\u53ef\u770bcode\n\n[blog](https://www.cnblogs.com/kafuuchino/p/11380587.html)\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define re register\nusing namespace std;\n#define N 200005\n#define M 3000005\nconst int d1[4]={0,1,0,-1};\nconst int d2[4]={1,0,-1,0};\nchar a[30][30];\nint n,m,nm,mx,ans,tot,S,T,v[N],p[N],id[30][30];\nbool vis[N]; int h[M],L,R;\nint Cnt=1,hd[N],nxt[M],ed[N],poi[M],con[M],val[M];\nvoid adde(int x,int y,int v1,int v2){\n\tnxt[ed[x]]=++Cnt; hd[x]=hd[x]?hd[x]:Cnt;\n\ted[x]=Cnt; poi[Cnt]=y; con[Cnt]=v1; val[Cnt]=v2;\n}\ninline void link(int x,int y,int v1,int v2){adde(x,y,v1,v2),adde(y,x,0,-v2);}\n#define to poi[i]\nbool bfs(){//\u666e\u901a\u8d39\u7528\u6d41\n\tmemset(v,63,sizeof(v)); int inf=v[0];\n\th[L=1]=S; R=2; vis[S]=1; v[S]=0;\n\twhile(L!=R){\n\t\tre int x=h[L++]; vis[x]=0;\n\t\tif(L>=M) L=1;\n\t\tfor(re int i=hd[x];i;i=nxt[i])\n\t\t\tif(con[i]&&v[to]>v[x]+val[i]){\n\t\t\t\tv[to]=v[x]+val[i]; p[to]=i;\n\t\t\t\tif(!vis[to]){\n\t\t\t\t\tvis[to]=1,h[R++]=to;\n\t\t\t\t\tif(R>=M) R=1;\n\t\t\t\t}\n\t\t\t}\n\t}if(v[T]==inf) return 0;\n\ttot-=1; ans=max(ans,v[T]);\n\tfor(re int u=T;u!=S;u=poi[p[u]^1])\n\t\tcon[p[u]]-=1,con[p[u]^1]+=1;\n\treturn 1;\n}//\u56e0\u4e3a\u6bcf\u6b21\u6d41\u91cf\u5747\u4e3a1\uff0c\u53ef\u4ee5\u7701\u53bb\u6d41\u91cf\u6570\u7ec4\nvoid draw(int x,int y){\n\tre int p=id[x][y];\n\tif(a[x][y]=='X') return ;\n\tif(a[x][y]=='D') for(re int i=1;i<=mx;++i) link(p+i*nm,T,1,i);//\u5206\u5c42\u4e0e\u7ec8\u70b9\u8fde\u8fb9\uff0c\u4ee3\u4ef7=\u5c42\u6570\n\tif(a[x][y]=='.'){\n\t\tlink(S,p,1,0); ++tot;\n\t\tfor(re int i=0;i<mx;++i){\n\t\t\tlink(p+i*nm,p+(i+1)*nm,1e9,0);\n\t\t\tfor(re int j=0;j<4;++j){\n\t\t\t\tint rx=x+d1[j],ry=y+d2[j];\n\t\t\t\tif(a[rx][ry]=='X') continue;\n\t\t\t\tlink(p+i*nm,id[rx][ry]+(i+1)*nm,1e9,0);//\u4e0e\u56db\u5468\u8fde\u8fb9\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);  S=N-4; T=N-3; nm=n*m;\n\tfor(re int i=1;i<=n;++i) scanf(\"%s\",a[i]+1);\n\tfor(re int i=1;i<=n;++i)\n\t\tfor(re int j=1;j<=m;++j)\n\t\t\tmx+=(a[i][j]=='.'),id[i][j]=(i-1)*m+j;//mx\uff1a\u4eba\u6570\uff0c\u5efa\u56fe\u9700\u8981\u7684\u5c42\u6570\n\tfor(re int i=1;i<=n;++i) for(re int j=1;j<=m;++j) draw(i,j);\n\twhile(bfs()) ;\n\tif(tot) puts(\"impossible\");\n\telse printf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1566230014,
        "uid": 21679,
        "name": "\u9999\u98ce\u667a\u4e43",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "Floyed $+$ \u4e8c\u5206 $+$ \u6700\u5927\u6d41\u3002\n\n\u4e0d\u96be\u60f3\u5230\u9003\u79bb\u65f6\u95f4\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e2a\u65f6\u95f4\u7528\u6700\u5927\u6d41\u5224\u65ad\u4ee5\u5f53\u524d\u65f6\u95f4\u662f\u5426\u80fd\u4f7f\u6240\u6709\u4eba\u90fd\u9003\u51fa\u3002\n\n\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5efa\u56fe\u3002\n\n\u7b2c\u4e00\u4e2a\u70b9\u6076\u5fc3\u7684\u70b9\u5728\u4e8e\u6bcf\u4e2a\u95e8\u4e00\u79d2\u53ea\u80fd\u901a\u8fc7\u4e00\u4e2a\u4eba\uff0c\u5982\u679c\u628a\u4eba\u76f4\u63a5\u5411\u95e8\u8fde\u8fb9\u8dd1\u6700\u5927\u6d41\u7684\u8bdd\u662f\u9519\u7684\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\uff1a\n\n```\n4 5\nXXDXX\nXX.XX\nX...X\nXXDXX\n```\n\n\u7b54\u6848\u662f $3$ \u4f46\u4f1a\u8f93\u51fa $2$\u3002\n\n\u8003\u8651\u5c06\u6bcf\u4e2a\u95e8\u62c6\u5f00\uff0c\u4e0d\u540c\u7684\u65f6\u95f4\u5bf9\u5e94\u4e0d\u540c\u7684\u95e8\u3002\n\n\u8fd9\u6837\u53ea\u8981\u7b97\u51fa\u4eba\u5230\u95e8\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u4ece\u4eba\u5411\u8fd9\u4e2a\u95e8\u6240\u62c6\u51fa\u6765\u7684\u5bf9\u5e94\u6700\u77ed\u65f6\u95f4\u7684\u95e8\u53ca\u5176\u5bf9\u5e94\u65f6\u95f4\u66f4\u957f\u7684\u95e8\u8fde\u8fb9\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6211\u8fd9\u91cc\u662f\u5f53\u8f93\u5165\u5230\u95e8\u65f6\u7ed9\u5b83\u9884\u7559\u51fa $400$ \u4e2a\u7f16\u53f7\uff0c\u518d\u8bb0\u5f55\u4e00\u4e0b\u8fd9 $400$ \u4e2a\u95e8\u7684\u7b2c\u4e00\u4e2a\u7f16\u53f7\uff0c\u7136\u540e\u4eba\u5411\u4ece\u7b2c\u4e00\u4e2a\u7f16\u53f7 $+$ \u6700\u77ed\u65f6\u95f4\u7684\u95e8\u5230\u7b2c\u4e00\u4e2a\u7f16\u53f7 $+$ \u4e8c\u5206\u51fa\u6765\u7684\u65f6\u95f4\u7684\u95e8\u8fde\u8fb9\u3002\n\n\u7b2c\u4e8c\u4e2a\u70b9\u6076\u5fc3\u7684\u70b9\u5728\u4e8e\u6709\u7684\u95e8\u662f\u6ca1\u7528\u7684\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\uff1a\n\n```\n5 4\nXDXX\nDXXX\nD..X\nX..X\nXXXX\n```\n\n\u7b54\u6848\u662f $4$ \u4f46\u4f1a\u8f93\u51fa $3$\u3002\n\n\u663e\u7136 $(1,2)$ \u548c $(2,1)$ \u7684\u95e8\u662f\u6ca1\u7528\u7684\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6709\u4eba\u8d70\u5230\u90a3\u4e24\u4e2a\u4f4d\u7f6e\u3002\n\n\u6240\u4ee5\u5224\u4e00\u4e0b\u6bcf\u4e2a\u95e8\u5468\u56f4\u662f\u4e0d\u662f\u6709\u4eba\u5373\u53ef\u3002\n\n\u7136\u540e\u56e0\u4e3a\u70b9\u6570 $\\leq 400$ \u8dd1 Floyed \u9884\u5904\u7406\u6bcf\u4e2a\u4eba\u5230\u6bcf\u4e2a\u95e8\u7684\u6700\u77ed\u65f6\u95f4\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\n#define rint register int\nusing namespace std;\nnamespace IO{\n\t#define File(x,y) freopen(#x,\"r\",stdin),freopen(#y,\"w\",stdout)\n\tinline int read(){\n\t\tint w=0,f=1; char ch=getchar();\n\t\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\t\twhile(ch>='0'&&ch<='9'){w=(w<<3)+(w<<1)+(ch^48); ch=getchar();}\n\t\treturn w*f;\n\t}\n\tinline void write(int x){\n  \t\tstatic int sta[35]; int top=0;\n  \t\tif(x<0) putchar('-'),x=-x;\n  \t\tdo{sta[++top]=x%10,x/=10;}while(x);\n  \t\twhile(top) putchar(sta[top--]+48); puts(\"\");\n\t}\n}\nusing namespace IO;\nnamespace CL{\n\t#define fill(x,y) memset(x,y,sizeof(x))\n\t#define copy(x,y) memcpy(x,y,sizeof(y))\n\t\n\tconst int maxn=5e5+5,maxm=5e6+5,inf=0x3f3f3f3f;\n\t\n\tint n,m,tot,cnt;\n\tint mp[25][25],uid[25][25],st[25][25],w[405][405],pos[405][405];\n\tnamespace Graph{\n\t\tint head[maxn],id=1;\n\t\tstruct e{int v,w,next;}edge[maxm<<1];\n\t\tinline void add(int u,int v,int w){\n\t\t\tedge[++id].v=v;\n\t\t\tedge[id].w=w;\n\t\t\tedge[id].next=head[u];\n\t\t\thead[u]=id;\n\t\t}\n\t}using namespace Graph;\n\tnamespace MaxFlow{// Dinic \u677f\u5b50\n\t\tint s,t,reset[maxn],dis[maxn];\n\t\tinline bool bfs(){\n\t\t\tcopy(head,reset); fill(dis,inf);\n\t\t\tqueue<int> q;\n\t\t\tdis[s]=0; q.push(s);\n\t\t\twhile(!q.empty()){\n\t\t\t\tint u=q.front(); q.pop();\n\t\t\t\tfor(int i=head[u];i;i=edge[i].next) if(edge[i].w){\n\t\t\t\t\tint v=edge[i].v;\n\t\t\t\t\tif(dis[v]>dis[u]+1){\n\t\t\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\t\t\tq.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(u==t) return 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tint dfs(int u,int in){\n\t\t\tif(u==t) return in;\n\t\t\tint rest=in,out;\n\t\t\tfor(int i=head[u];i;head[u]=i=edge[i].next) if(edge[i].w){\n\t\t\t\tint v=edge[i].v;\n\t\t\t\tif(dis[v]==dis[u]+1){\n\t\t\t\t\tout=dfs(v,min(rest,edge[i].w));\n\t\t\t\t\tif(out) edge[i].w-=out,edge[i^1].w+=out,rest-=out;\n\t\t\t\t\telse dis[v]=0;\n\t\t\t\t}\n\t\t\t\tif(!rest) break;\n\t\t\t}\t\n\t\t\treturn in-rest;\n\t\t}\n\t}using namespace MaxFlow;\n\tinline bool check(int x){// \u4e8c\u5206 check\n\t\tid=1; fill(head,0); fill(reset,0);// \u6ce8\u610f\u628a\u56fe\u6e05\u7a7a\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\tif(mp[i][j]==2){// \u6e90\u70b9\u548c\u4eba\u8fde\u8fb9\n\t\t\t\t\tadd(s,uid[i][j],1),add(uid[i][j],s,0);\n\t\t\t\t\tfor(int k=1;k<=n;k++)\n\t\t\t\t\t\tfor(int l=1;l<=m;l++)\n\t\t\t\t\t\t\tif(mp[k][l]==3){\n\t\t\t\t\t\t\t\tint d=w[pos[i][j]][pos[k][l]];\n\t\t\t\t\t\t\t\t//cout<<\"(\"<<i<<\",\"<<j<<\") (\"<<k<<\",\"<<l<<\") \"<<d<<\"\\n\";\n\t\t\t\t\t\t\t\tfor(int o=st[k][l]+d;o<=st[k][l]+min(x,400);o++)\n\t\t\t\t\t\t\t\t\tadd(uid[i][j],o,1),add(o,uid[i][j],0);\n\t\t\t\t\t\t\t}// \u4eba\u548c\u95e8\u8fde\u8fb9\n\t\t\t\t}\n\t\t\t\tif(mp[i][j]==3)\n\t\t\t\t\tfor(int o=st[i][j];o<=st[i][j]+min(x,400);o++)\n\t\t\t\t\t\tadd(o,t,1),add(t,o,0);\n\t\t\t}// \u95e8\u548c\u6c47\u70b9\u8fde\u8fb9\n\t\t//cout<<\"tim:\"<<x<<\"\\n\";\n\t\tcopy(reset,head);\n\t\tint ans=0;\n\t\twhile(bfs()) ans+=dfs(s,inf);\n\t\t//cout<<ans<<\"\\n\";\n\t\treturn (ans==cnt);// \u662f\u5426\u90fd\u80fd\u9003\u51fa\n\t}\n\t\n\tinline int main(){\n\t\tn=read(); m=read();\n\t\ts=++tot,t=++tot;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\tchar ch=getchar();\n\t\t\t\twhile(ch!='X' && ch!='.' && ch!='D') ch=getchar();\n\t\t\t\tif(ch=='X') mp[i][j]=1;\n\t\t\t\tif(ch=='.') mp[i][j]=2,uid[i][j]=++tot,cnt++;\n\t\t\t\tif(ch=='D') mp[i][j]=3,st[i][j]=uid[i][j]=++tot,tot+=400;// \u9884\u7559 400 \u4e2a\u95e8\n\t\t\t\tpos[i][j]=(i-1)*m+j;\n\t\t\t}\n\t\tfill(w,inf);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\tif(mp[i][j]==1) continue;\n\t\t\t\tif(i-1>=1 && mp[i-1][j]!=1) w[pos[i][j]][pos[i-1][j]]=w[pos[i-1][j]][pos[i][j]]=1;\n\t\t\t\tif(j-1>=1 && mp[i][j-1]!=1) w[pos[i][j]][pos[i][j-1]]=w[pos[i][j-1]][pos[i][j]]=1;\n\t\t\t\tif(i+1<=n && mp[i+1][j]!=1) w[pos[i][j]][pos[i+1][j]]=w[pos[i+1][j]][pos[i][j]]=1;\n\t\t\t\tif(j+1<=m && mp[i][j+1]!=1) w[pos[i][j]][pos[i][j+1]]=w[pos[i][j+1]][pos[i][j]]=1; \n\t\t\t\tw[pos[i][j]][pos[i][j]]=0;\n\t\t\t}\n\t\t\n\t\tfor(int k=1;k<=pos[n][m];k++)// Floyed \u9884\u5904\u7406\u6700\u77ed\u65f6\u95f4\n\t\t\tfor(int i=1;i<=pos[n][m];i++)\n\t\t\t\tfor(int j=1;j<=pos[n][m];j++)\n\t\t\t\t\tif(w[i][j]>w[i][k]+w[k][j])\n\t\t\t\t\t\tw[i][j]=w[i][k]+w[k][j];\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t\tif(mp[i][j]==3)\n\t\t\t\t\tif(!(mp[i-1][j]==2 || mp[i][j-1]==2 || mp[i+1][j]==2 || mp[i][j+1]==2)){\n\t\t\t\t\t\tfor(int k=1;k<=n;k++)\n\t\t\t\t\t\t\tfor(int l=1;l<=m;l++)\n\t\t\t\t\t\t\t\tif(k!=i && l!=j) w[pos[i][j]][pos[k][l]]=w[pos[k][l]][pos[i][j]]=inf;\n\t\t\t\t\t}// \u5224\u95e8\u662f\u5426\u5408\u6cd5\n\t\tint l=0,r=400,res=inf;\n\t\t//cout<<cnt<<\" \"<<tot<<\"\\n\";\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\t//cout<<l<<\" \"<<r<<\" \"<<mid<<\"\\n\";\n\t\t\tif(check(mid)) r=mid-1,res=mid;\n\t\t\telse l=mid+1;\n\t\t}\t\t\n\t\tif(res==inf) puts(\"impossible\");\n\t\telse printf(\"%d\\n\",res);\n\t\treturn 0;\n\t}\n}\nsigned main(){return CL::main();}\n\n```",
        "postTime": 1627787503,
        "uid": 226113,
        "name": "\u706b\u7fbd\u767d\u65e5\u751f",
        "ccfLevel": 0,
        "title": "\u300c\u9898\u89e3\u300dP3191 [HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE"
    },
    {
        "content": "### Sol.\n\n\u53ef\u4ee5\u53d1\u73b0\u4eba\u7684\u79fb\u52a8\u9664\u4e86\u4e0d\u80fd\u7a7f\u5899\u4ee5\u5916\u6ca1\u6709\u522b\u7684\u9650\u5236\u3002\u4e5f\u5c31\u662f\u8bf4\u4eba\u7684\u79fb\u52a8\u591a\u534a\u4e0d\u662f\u89e3\u9898\u7684\u7a81\u7834\u53e3\u3002\n\n\u63a5\u4e0b\u6765\u4f1a\u53d1\u73b0\u51fa\u53e3\u7684\u9650\u5236\u5f88\u5f3a\uff0c\u5373\u51fa\u53e3\u6bcf\u4e2a\u65f6\u523b\u53ea\u80fd\u5141\u8bb8\u4e00\u4e2a\u4eba\u51fa\u53bb\u3002\n\n\u6bcf\u4e2a\u65f6\u523b\uff1f\n\n\u4e0d\u96be\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65f6\u523b\u6bcf\u4e00\u4e2a\u95e8\uff0c\u6211\u4eec\u5355\u72ec\u8003\u8651\u3002\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2a\u95e8\u5177\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u6a2a\u5750\u6807\u3001\u7eb5\u5750\u6807\u3001\u65f6\u95f4\u5750\u6807\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u5f88\u591a\u5f88\u591a\u7684\u95e8\uff0c\u5c31\u53ef\u4ee5\u5c06\u9650\u5236\u8f6c\u6362\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u90fd\u53ea\u80fd\u8ba9\u8be5\u65f6\u523b\u5230\u8fbe\u7684\u90a3\u4e00\u4e2a\u4eba\u51fa\u53bb\u3002\n\n\u6bcf\u4e00\u6247\u95e8\u4ec5\u5141\u8bb8\u4e00\u4e2a\u4eba\uff1f\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u5339\u914d\u95ee\u9898\u561b\u3002\u5e76\u4e14\u5982\u679c\u8003\u8651\u4eba\u4f5c\u4e3a\u5de6\u90e8\uff0c\u95e8\u4f5c\u4e3a\u53f3\u90e8\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\n\n\u663e\u7136\u53ef\u4ee5\u901a\u8fc7 bfs \u6c42\u5f97\u6bcf\u4e00\u4e2a\u4eba\u5230\u4efb\u610f\u4e00\u6247\u95e8\u6240\u9700\u7684\u65f6\u95f4\uff0c\u8bbe\u5750\u6807 $(U_x, U_y)$ \u8fd9\u4e2a\u4eba\u5230\u5750\u6807 $(V_x, V_y)$ \u8fd9\u6247\u95e8\u9700\u8981 $t$ \u7684\u65f6\u95f4\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u8fd9\u4e2a\u70b9\u5bf9\u4e8e\u8fd9\u6247\u95e8\u53ef\u4ee5\u8d70\u6240\u6709\u7a7a\u95f4\u5750\u6807 $(V_x, V_y)$\uff0c\u65f6\u95f4\u5750\u6807\u665a\u4e8e $t$ \u7684\u6240\u6709\u95e8\u3002\n\n\u4f46\u8fd9\u53ea\u80fd\u5224\u65ad\u53ef\u884c\u6027\uff0c\u96be\u4ee5\u7b97\u51fa\u5177\u4f53\u7b54\u6848\u554a\uff1f\n\n\u5bb9\u6613\u60f3\u5230\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u3002\u82e5\u5f53\u524d\u4e8c\u5206\u5230\u7b54\u6848 $T$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u95e8\u7684\u7a7a\u95f4\u5750\u6807\u9650\u5236\u5230 $[t, T]$ \u5185\uff0c\u7136\u540e\u6bcf\u4e2a\u4eba\u76f8\u5bf9\u4e8e\u53ef\u4ee5\u8d70\u7684\u95e8\u8fde\u8fb9\u8dd1\u5308\u7259\u5229\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u7b80\u5355\u4f30\u7b97\u4e00\u4e0b\u4e8c\u5206\u4e0a\u754c\u3002\u5047\u8bbe\u6709 $nm - 1$ \u4e2a\u4eba\uff0c$1$ \u6247\u95e8\uff0c\u6700\u8fdc\u7684\u4eba\u5230\u8fbe\u8fd9\u6247\u95e8\u7684\u8ddd\u79bb\u662f $n + m$\uff0c\u800c\u4e0d\u80fd\u53d1\u73b0\u6bcf\u4e2a\u65f6\u5019\u90fd\u4f1a\u6709\u4eba\u5230\u8fbe\uff0c\u6240\u4ee5\u4e0a\u754c\u5e94\u662f $n m$\u3002\n\n\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u4e00\u4e2a\u4eba\u4e3a\u4e86\u7ed5\u5f00\u6240\u6709\u5899\uff0c\u6700\u591a\u4e5f\u53ea\u4f1a\u8017\u8d39 $n m$ \u7684\u65f6\u95f4\uff0c\u4e14\u5bf9\u4e8e\u95e8\u6765\u8bf4\uff0c$n m$ \u7684\u65f6\u95f4\u4e00\u5b9a\u53ef\u4ee5\u628a\u4eba\u5168\u90e8\u9001\u51fa\u53bb\u3002\n\n---\n\n### Code.\n\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\nint Abs(int x) { return x < 0 ? -x : x; }\nint Max(int x, int y) { return x > y ? x : y; }\nint Min(int x, int y) { return x < y ? x : y; }\n\nint read() {\n    int k = 1, x = 0;\n    char s = getchar();\n    while (s < '0' || s > '9') {\n        if (s == '-')\n            k = -1;\n        s = getchar();\n    }\n    while (s >= '0' && s <= '9') {\n        x = (x << 3) + (x << 1) + s - '0';\n        s = getchar();\n    }\n    return x * k;\n}\n\nvoid write(int x) {\n    if (x < 0) {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nvoid print(int x, char s) {\n    write(x);\n    putchar(s);\n}\n\nconst int MAXM = 2e6 + 5;\nconst int MAXN = 2e4 + 5;\n\nstruct Bipartite_Graph {\n    struct edge {\n        int v, nxt;\n        edge() {}\n        edge(int V, int Nxt) {\n            v = V, nxt = Nxt;\n        }\n    } e[MAXM << 1];\n    int head[MAXN], n, cnt;\n    void Add_Edge(int u, int v) { \n        e[cnt] = edge(v, head[u]);\n        head[u] = cnt++;\n    }\n    int Mat[MAXN], Tim[MAXN], p[MAXN], len, tot;\n\n    void init(int N) {\n        n = N;\n        for(int i = 1; i <= n; i++) \n            head[i] = -1, Tim[i] = 0, Mat[i] = 0;\n        cnt = 0, tot = 0, len = 0;\n    }\n\n    bool dfs(int u) {\n        if (Tim[u] == tot)\n            return false;        \n        Tim[u] = tot;\n        for (int i = head[u], v; ~i; i = e[i].nxt) {\n            v = e[i].v;\n            if (!Mat[v] || dfs(Mat[v])) {\n                Mat[v] = u;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    int calc() {\n        int ans = 0;\n        for (int i = 1; i <= len; i++) {\n            tot++;\n            ans += dfs(p[i]);\n        }\n        return ans;\n    }    \n} Graph; // \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6a21\u677f\u3002\n\nchar s[MAXN][MAXN];\nint pos[MAXN][MAXN], dist[MAXN][MAXN], n, m, num, cnt;\n\nstruct node {\n    int x, y;\n    node() {}\n    node(int X, int Y) {\n        x = X, y = Y;\n    }\n};\nint dir[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\nvoid bfs(node st) { // \u6c42\u4eba\u5230\u95e8\u6240\u9700\u65f6\u95f4\u3002\n    queue<node> q;\n    q.push(st);\n    while(!q.empty()) {\n        node u = q.front(); q.pop();\n        for(int i = 0, cx, cy; i < 4; i++) {\n            cx = u.x + dir[i][0], cy = u.y + dir[i][1];\n            if(cx < 1 || cx > n || cy < 1 || cy > m)\n                continue;\n            if(s[cx][cy] == '.' && !dist[pos[st.x][st.y]][pos[cx][cy]]) {\n                dist[pos[st.x][st.y]][pos[cx][cy]] = dist[pos[st.x][st.y]][pos[u.x][u.y]] + 1;\n                q.push(node(cx, cy));\n            }\n        }\n    }\n}\n\nbool check(int mid) { // \u4e8c\u5206\u53ef\u884c\u6027\u5224\u65ad\u3002\n    Graph.init(num + (cnt - num) * mid);   \n    for(int i = 1; i <= num; i++) {\n        Graph.p[++Graph.len] = i;\n        for(int j = num + 1; j <= cnt; j++)\n            if(dist[j][i])\n                for(int k = dist[j][i]; k <= mid; k++)\n                    Graph.Add_Edge(i, j + (k - 1) * (cnt - num)); // \u65f6\u95f4\u8303\u56f4\u5185 \u62c6\u70b9 \u5efa\u8fb9\n    }\n    int res = Graph.calc(); \n    return res >= num;\n}\n\nint main() {\n    n = read(), m = read();\n    num = 0;\n    for(int i = 1; i <= n; i++) {\n        scanf (\"%s\", s[i] + 1);        \n        for(int j = 1; j <= m; j++)\n            if(s[i][j] == '.')\n                pos[i][j] = ++num; \n    }\n    cnt = num;\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++) \n            if(s[i][j] == 'D') {\n                cnt++;\n                pos[i][j] = cnt;\n                bfs(node(i, j));\n            }\n    // \u8fd9\u90e8\u5206\u5904\u7406\u6253\u5f97\u6709\u70b9\u5947\u602a\u4e86\uff0c\u8f6c\u6574\u6570\u6807\u53f7\u8fd8\u662f\u6309\u7167\u81ea\u5df1\u7684\u559c\u597d\u6765\u3002\n    int l = 0, r = n * m * 2, mid, res = -1;\n    while(l <= r) {\n        mid = (l + r) >> 1;\n        if(check(mid)) {\n            r = mid - 1;\n            res = mid;\n        }\n        else    \n            l = mid + 1;\n    }\n    if(res == -1)\n        printf(\"impossible\\n\");\n    else\n        print(res, '\\n');\n    return 0;\n}\n```",
        "postTime": 1640094847,
        "uid": 266779,
        "name": "STrAduts",
        "ccfLevel": 6,
        "title": "Solution -\u300cHNOI\u300dEVACUATE"
    },
    {
        "content": "## \u9898\u89e3\n\u672c\u7bc7\u9898\u89e3\u505a\u6cd5\u4e3a BFS + \u4e8c\u5206 + \u6700\u5927\u6d41\n\n\u4e8c\u5206\u9700\u8981\u64a4\u79bb\u7684\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\u7b54\u6848\uff08\u8fd9\u7b97\u662f\u4e00\u4e2a\u6bd4\u8f83\u5957\u8def\u7684\u4e86\uff09\n\n\u91cd\u70b9\u5728\u4e8e\u5efa\u6a21\uff08\u8bbe\u65f6\u95f4\u4e3a $tim$\uff09\n\n\u6211\u4eec\u5c06\u6bcf\u4e2a\u95e8\u62c6\u70b9\uff0c\u62c6\u6210 $tim$ \u4e2a\uff0c\u6bcf\u4e2a\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $1$\uff0c\u4ee3\u8868\u6bcf\u4e2a\u95e8\u5728 $tim$ \u5185\u80fd\u9001\u8d70\u7684\u4eba\n\n\u5c06\u6e90\u70b9\u548c\u6bcf\u4e2a\u7a7a\u5730\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $1$ \u4ee3\u8868\u8fd9\u4e2a\u7a7a\u5730\u6709\u4e00\u4e2a\u4eba\n\n\u5148\u8fdb\u884c\u4e00\u6b21 BFS\uff0c\u7b97\u51fa\u6bcf\u4e2a\u4eba\u5230\u4e0d\u540c\u95e8\u7684\u65f6\u95f4\n\n\u5c06\u6bcf\u4e2a\u4eba\u548c\u5b83\u5728 $tim$ \u65f6\u95f4\u5185\u80fd\u5230\u7684\u95e8\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $1$\uff0c\u6ce8\u610f\uff0c\u8fde\u7684\u662f\u90a3\u4e2a\u95e8\u62c6\u51fa\u7684 $tim_i$ \u95e8\u3002\n\n\u5982\u679c\u6709\u591a\u4e2a\u4eba\u5728\u540c\u4e00\u65f6\u95f4\u5230\u8fbe\u540c\u4e00\u4e2a\u95e8\uff0c\u600e\u4e48\u89e3\u51b3\uff1f\u6211\u4eec\u518d\u5c06\u6bcf\u4e2a\u95e8\u7684 $tm$ \u5411 $tm+1$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $\\infty$ \u7684\u8fb9 $(tm\\in [1,tim)\\kern 0.6em tm\\in Z)$\n\n\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e9b\u5c0f\u4f18\u5316\u4e86\uff0c\u8bb0\u5f97\u8f93\u5165\u8981\u5f00 ``scanf(\"%s\")``\n\n```cpp\n#include<bits/stdc++.h>\n#define ri register signed\n#define p(i) ++i\nusing namespace std;\nnamespace IO{\n    char buf[1<<21],*p1=buf,*p2=buf;\n    #define gc() p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++\n    inline int read() {\n        ri x=0,f=1;char ch=getchar();\n        while(ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}\n        while(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n        return x*f;\n    }\n}\nusing IO::read;\nnamespace nanfeng{\n    #define node(x,y,id) (node){x,y,id}\n    #define jud(x,y) (x>=1&&x<=n&&y>=1&&y<=m&&(k=idp[x][y])>0)\n    #define cmax(x,y) ((x)>(y)?(x):(y))\n    #define cmin(x,y) ((x)>(y)?(y):(x))\n    #define FI FILE *IN\n    #define FO FILE *OUT\n    #undef bool\n    static const int N=25;\n    int idp[N][N],dis[N*N][N*N],dx[5]={0,1,0,-1,0},dy[5]={0,0,-1,0,1},tot,out,n,m;\n    char s[N];\n    struct node{int x,y,id;};\n    struct Que{\n        node que[N*N];\n        int hd,tl;\n        inline void init() {hd=1,tl=0;}\n        inline void push(node q) {que[p(tl)]=q;}\n        inline node top() {return que[hd++];}\n        inline bool empty() {return hd>tl;}\n    }que;\n    inline void bfs(int id,int x,int y) {\n        memset(dis[id],127,sizeof(dis[id]));\n        que.init();\n        que.push(node(x,y,0));\n        dis[id][0]=0;//\u6211\u4eec\u5c06dis\u7684\u7b2c\u4e8c\u7ef4\u6362\u6210\u70b9\uff08i\uff0cj\uff09\u7684\u7f16\u53f7\uff0c\u4e09\u4f4d\u6570\u7ec4\u5bfb\u5740\u592a\u6162\n        while(!que.empty()) {\n            node tmp=que.top();\n            for (ri d(1);d<=4;p(d)) {\n                int tx=tmp.x+dx[d],ty=tmp.y+dy[d],k;\n                if (!jud(tx,ty)) continue;\n                if (dis[id][k]>dis[id][tmp.id]+1) dis[id][k]=dis[id][tmp.id]+1,que.push(node(tx,ty,k)); \n            }\n        }\n    }\n    namespace NetworkFlow{//\u5c01\u88c5\n        static const int INF=1e9+7;\n        static const int NUM=N*N*N;\n        int first[NUM],dep[NUM],cur[NUM],que[NUM],t=2,s,et;\n        struct edge{int v,nxt,w;}e[NUM*N*N>>1];\n        inline void add(int u,int v,int w) {\n            e[t].v=v,e[t].w=w;\n            e[t].nxt=first[u];\n            first[u]=t++;\n        }\n        inline void init() {memset(first,0,sizeof(first));t=2;}\n        inline void build(ri tim) {\n            int tt=out*tim;\n            et=tt+tot+1;\n            for (ri d(1);d<=out;p(d)) {\n                for (ri i(1);i<=tim;p(i)) {\n                    ri bs=tim*(d-1);\n                    add(bs+i,et,1),add(et,bs+i,0);\n                    if (i<tim) add(bs+i,bs+i+1,INF),add(bs+i+1,bs+i,0);\n                }\n            }\n            for (ri i(1);i<=tot;p(i)) add(s,tt+i,1),add(tt+i,s,0);\n            for (ri d(1);d<=out;p(d)) {\n                for (ri i(1),bs;i<=tot;p(i)) \n                    if (dis[d][i]<=tim) add(tt+i,bs=(d-1)*tim+dis[d][i],1),add(bs,tt+i,0);\n            }\n        }\n        inline bool bfs(int s,int t) {\n            memset(dep,0,sizeof(dep));\n            int hd=1,tl=0;\n            dep[que[p(tl)]=s]=1;\n            cur[s]=first[s];\n            while(hd<=tl) {\n                s=que[hd++];\n                for (ri i(first[s]),v;i;i=e[i].nxt) {\n                    if (e[i].w&&!dep[v=e[i].v]) {\n                        dep[que[p(tl)]=v]=dep[s]+1;\n                        cur[v]=first[v];\n                        if (v==t) return 1;\n                    }\n                }\n            }\n            return 0;\n        }\n        int dfs(int x,int flow) {\n            if (x==et||!flow) return flow;\n            int rst=flow;\n            for (ri i(cur[x]),v;i&&rst;i=e[i].nxt) {\n                if (e[i].w&&dep[v=e[i].v]==dep[x]+1) {\n                    ri k=dfs(v,cmin(e[i].w,rst));\n                    if (!k) dep[v]=0;\n                    e[i].w-=k,e[i^1].w+=k,rst-=k;\n                }\n                cur[x]=i;//\u5f27\u4f18\u5316\n            }\n            return flow-rst;\n        }\n        inline int dinic() {\n            int res=0;\n            while(bfs(s,et)) res+=dfs(s,INF);\n            return res;\n        }\n    }\n    inline bool check(int tim) {\n        NetworkFlow::init();\n        NetworkFlow::build(tim);\n        return NetworkFlow::dinic()==tot;\n    }\n    inline int main() {\n        // FI=freopen(\"nanfeng.in\",\"r\",stdin);\n        // FO=freopen(\"nanfeng.out\",\"w\",stdout);\n        n=read(),m=read();\n        for (ri i(1);i<=n;p(i)) {\n            scanf(\"%s\",s+1);//\u8bb0\u5f97%s\n            for (ri j(1);j<=m;p(j)) \n                if (s[j]=='.') idp[i][j]=p(tot);\n                else if (s[j]=='X') idp[i][j]=-1;\n        }\n        for (ri i(1);i<=n;p(i)) {\n            for (ri j(1);j<=m;p(j)) \n                if (!idp[i][j]) bfs(p(out),i,j);\n        }\n        ri l=0,r=tot+1,res=-1;\n        while(l<=r) {\n            int mid((l+r)>>1);\n            if (check(mid)) r=mid-1,res=mid;\n            else l=mid+1;\n        }\n        res==-1?puts(\"impossible\"):printf(\"%d\\n\",res);\n        return 0;\n    }\n}\nint main() {return nanfeng::main();}\n```",
        "postTime": 1624442500,
        "uid": 141958,
        "name": "\u6960\u67ab",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3191 [HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE"
    },
    {
        "content": "\u5982\u679c\u56fe\u6302\u4e86\u5c31\u770b[\u8fd9\u4e2a](https://www.cnblogs.com/rui-4825/p/13983295.html)\u5427\n\n## Solution\n### \u4e8c\u5206\u7b54\u6848\n\u770b\u5230\u9898\u76ee\u4e0d\u96be\u60f3\u5230  \n\u5047\u8bbe\u7ed9\u5b9a\u4e00\u4e2a\u65f6\u95f4  \n\u90a3\u4e48\u53ef\u4ee5\u9a8c\u8bc1\u5f53\u524d\u65f6\u95f4\u5185\u80fd\u4e0d\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u4eba\u8dd1\u51fa\u53bb  \n\u663e\u7136\uff0c\u65f6\u95f4\u8d8a\u957f\uff0c\u80fd\u8dd1\u6389\u7684\u4eba\u8d8a\u591a  \n\u6240\u4ee5\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027  \n\u53ef\u4ee5\u8fdb\u884c\u4e8c\u5206  \n\u5982\u679c\u5f53\u524d\u65f6\u95f4\u90fd\u53ef\u4ee5\u8dd1\u51fa\u53bb  \n\u90a3\u4e48\u8003\u8651\u9002\u5f53\u7f29\u5c0f\u7b54\u6848\uff08\u51cf\u5c11\u65f6\u95f4\uff09  \n\u53cd\u4e4b\uff0c\u6269\u5927\u7b54\u6848\uff08\u589e\u52a0\u65f6\u95f4\uff09  \n  \n### \u5efa\u56fe  \n\u8eab\u4e3a\u7f51\u7edc\u6d41\u6700\u6838\u5fc3\u7684\u90e8\u5206  \n\u8fd9\u9053\u9898\u5efa\u56feex\u6b7b\u4e86\uff0c\u52a0\u4e0a\u672c\u4eba\u83dc\u6b7b\u4e86\uff0c\u8db3\u8db3\u6539\u4e864\u5929  \n\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9s\uff0c\u8d85\u7ea7\u6c47\u70b9t  \n\u5148\u6765\u8bf4\u65f6\u95f4\u5bf9\u7b54\u6848\u7684\u5f71\u54cd  \n\u5047\u8bbe\u73b0\u5728\u62e5\u6709\u4e00\u4e2a\u7b54\u6848\u65f6\u95f4\u4e3a$x$  \n\u90a3\u4e48\u76f8\u5f53\u4e8e\u628a\u6bcf\u4e2a\u95e8\u62c6\u51fa\u6765$x$\u4e2a\u95e8  \n\u4fdd\u8bc1\u5728x\u65f6\u95f4\u5185\uff0c\u6bcf\u4e2a\u95e8\u90fd\u80fd\u901a\u8fc7\u4e00\u4e2a\u4eba  \n\u62c6\u51fa\u7684\u95e8\u6309\u7167\u62c6\u51fa\u7684\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5efa\u8fb9  \n\uff08\u6bd4\u5982\u62c6\u51fa\u4e861\uff0c2\uff0c3\uff0c\u90a3\u4e48\u5c311\u52302\uff0c2\u52303\u5206\u522b\u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3ainf\uff0c\u8868\u793a\u4e0d\u53d7\u9650\u5236\uff09  \n\u7531\u4e8e\u6bcf\u4e2a\u4eba\u5230\u95e8\u7684\u8ddd\u79bb\u4e0d\u540c  \n\u6240\u4ee5\u4eba\u5e94\u8be5\u6307\u5411\u95e8\u62c6\u51fa\u7684\u7b2c\u8ddd\u79bb\u4e2a\u95e8\uff08md\u597d\u4e71\uff09  \n\u6ca1\u9519\u6211\u77e5\u9053\u8fd9\u53e5\u8bdd\u6ca1\u4eba\u770b\u660e\u767d  \n\u4e3e\u4e2a\u6817\u5b50  \n\u6709\u4e00\u4e2a\u4eba\u4ed6\u7ad9\u5728\u5750\u68077  \n\u6709\u4e00\u4e2a\u95e8\u5b83\u5728\u5750\u68079  \n\u4eba\u548c\u95e8\u76f8\u8ddd\u8ddd\u79bb\u4e3a3  \n\u5c31\u662f\u8fd9\u4e2a\u56fe\uff08\u6211\u628a\u4e8c\u7ef4\u62cd\u6210\u4e00\u7ef4\u4e86\uff09  \n$\\begin{matrix}\n &X  &X  &X &X \\\\ \n &X  &.  &.  &X \\\\ \n &D  &.  &X  &X \\\\ \n &X  &X  &X  &X \n\\end{matrix}$\n\u5982\u679c\u73b0\u5728\u4e8c\u5206\u51fa\u4e00\u4e2a\u7b54\u6848\u4e3a3  \n\u90a3\u4e48\u5c31\u8981\u628a\u5750\u68079\u6309\u7167\u67d0\u79cd\u5bf9\u5e94\u65b9\u5f0f\uff08\u8fd9\u4e2a\u5bf9\u5e94\u81ea\u5df1\u968f\u4fbf\u7f16\u4e00\u4e0b\uff0c\u53ea\u8981\u4fdd\u8bc1\u95e8\u7f16\u53f7\u4e0d\u91cd\u590d\u5373\u53ef\uff09\u62c6\u5f00  \n\u7531\u4e8e7\u53f7\u70b9\u7684\u4eba\u5230\u95e8\u7684\u8ddd\u79bb\u4e3a3  \n\u90a3\u4e48\u5e94\u8be5\u54119\u62c6\u51fa\u7684\u7b2c\u4e09\u4e2a\u95e8\u5efa\u8fb9  \n\u50cf\u8fd9\u6837\uff08\u53f3\u8fb9\u7684\u70b9\u662f\u62c6\u51fa\u6765\u7684\u65b0\u95e8\uff09  \n![](https://img2020.cnblogs.com/blog/1718530/202011/1718530-20201116070530767-1130136569.png)\n\n\u5269\u4e0b\u7684\u8fb9\u5c31\u662f\u4f20\u7edf\u65b9\u6cd5\u4e86  \ns\u5230\u6240\u6709\u4eba\u5efa\uff0c\u8fb9\u6743\u4e3a1  \n\u6240\u6709\u95e8\u5230t\u5efa\uff0c\u8fb9\u6743\u4e3a1  \n\u53ef\u4ee5\u770b\u4e0b\u6837\u4f8b  \n\u5728\u65f6\u95f4\u4e3a3\u7684\u65f6\u5019\u56fe\u957f\u8fd9\u4e2a\u6837\u5b50  \n![](https://img2020.cnblogs.com/blog/1718530/202011/1718530-20201116070720796-1105085959.png)\n\n### BFS\n\u8981\u9884\u5904\u7406\u51fa\u6240\u6709\u4eba\u5230\u6240\u6709\u95e8\u7684\u8ddd\u79bb  \nbfs\u626b\u4e00\u904d\u5373\u53ef  \n\n## Code\n\u6ce8 \u610f \u7ec6 \u8282  \n\u6211\u5199\u7684\u4ee3\u7801\u6bd4\u8f83\u9ebb\u70e6  \n\u5c24\u5176\u662f\u5efa\u8fb9\u90a3\u4e00\u5757  \n\u53ea\u8981\u4e0d\u91cd\u4e0d\u6f0f\uff0c\u95e8\u7f16\u53f7\u53ef\u4ee5\u7b80\u5355\u70b9\u4e0d\u4e00\u5b9a\u975e\u8981\u6309\u7167\u8fd9\u4e2a\u5199  \n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#define min(a, b) ({register int AA = a, BB = b; AA < BB ? AA : BB;})\n#define inf 0x7fffffff\nusing namespace std;\n\ninline int read(){\n\tint x = 0, w = 1;\n\tchar ch = getchar();\n\tfor(; ch > '9' || ch < '0'; ch = getchar()) if(ch == '-') w = -1;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\nconst int ss = 300005;\nconst int dx[5] = {0, 1, 0, -1};\nconst int dy[5] = {1, 0, -1, 0};\n\nstruct node{\n\tint to, nxt, w;\n}edge[ss];\n\nint head[ss], tot = 1;\ninline void add(register int u, register int v, register int w){\n\tedge[++tot].to = v;\n\tedge[tot].nxt = head[u];\n\tedge[tot].w = w;\n\thead[u] = tot;\n}\n\nint pre[405][405];\nint cur[ss], dis[ss];\nbool vis[405][405];\nint n, m, s, t;\nqueue<int> q;\ninline bool bfs(register int s){\n\tfor(register int i = 0; i <= t; i++)\n\t\tdis[i] = 0x3f3f3f3f, cur[i] = head[i];\n\tdis[s] = 0;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tregister int u = q.front();\n\t\tq.pop();\n\t\tfor(register int i = head[u]; i; i = edge[i].nxt){\n\t\t\tregister int v = edge[i].to;\n\t\t\tif(dis[v] == 0x3f3f3f3f && edge[i].w){\n\t\t\t\tq.push(v);\n\t\t\t\tdis[v] = dis[u] + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t] != 0x3f3f3f3f;\n}\n\ninline int dfs(register int u, register int flow){\n\tregister int res = 0;\n\tif(u == t) return flow;\n\tfor(register int i = cur[u]; i; i = edge[i].nxt){\n\t\tcur[u] = i;\n\t\tregister int v = edge[i].to;\n\t\tif(dis[v] == dis[u] + 1 && edge[i].w){\n\t\t\tif(res = dfs(v, min(flow, edge[i].w))){\n\t\t\t\tedge[i].w -= res;\n\t\t\t\tedge[i ^ 1].w += res;\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nlong long maxflow;\ninline long long dinic(){\n\tregister long long minflow = 0;\n\twhile(bfs(s)){\n\t\twhile(minflow = dfs(s, 0x7fffffff))\n\t\t\tmaxflow += minflow;\n\t}\n\treturn maxflow;\n}\n\ninline int change(register int i, register int j){\n\treturn (i - 1) * m + j;\n}\n\nint a[25][25], person, cnt;\nchar ch[25];\n\nint l = 1, r = 400;\ninline bool check(register int x){\n\tmemset(head, 0, sizeof head);\n\ttot = 1;\n\tfor(register int i = 1; i <= n; i++)\n\t\tfor(register int j = 1; j <= m; j++)\n\t\t\tif(a[i][j] == 1) add(s, change(i, j), 1), add(change(i, j), s, 0);\n\tfor(register int i = 1; i <= n; i++){\n\t\tfor(register int j = 1; j <= m; j++){\n\t\t\tif(a[i][j] == 2){//\u95e8\n\t\t\t\tfor(register int id = change(i, j) * x; id < (change(i, j) + 1) * x; id++){\n\t\t\t\t\tadd(id + n * m, t, 1);\n\t\t\t\t\tadd(t, id + n * m, 0);\n\t\t\t\t}\n\t\t\t\tfor(register int id = change(i, j) * x; id < (change(i, j) + 1) * x - 1; id++){\n\t\t\t\t\tadd(id + n * m, id + n * m + 1, inf);\n\t\t\t\t\tadd(id + n * m + 1, id + n * m, 0);\n\t\t\t\t}\n\t\t\t\tfor(register int p = 1; p <= n; p++){\n\t\t\t\t\tfor(register int q = 1; q <= m; q++)\n\t\t\t\t\t\tif(a[p][q] == 1){//\u4eba\n\t\t\t\t\t\t\tif(pre[change(p, q)][change(i, j)] <= x){\n\t\t\t\t\t\t\t\tadd(change(p, q), change(i, j) * x + n * m + pre[change(p, q)][change(i, j)] - 1, inf);\n\t\t\t\t\t\t\t\tadd(change(i, j) * x + n * m + pre[change(p, q)][change(i, j)] - 1, change(p, q) ,0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tmaxflow = 0;\n\treturn dinic() >= person;\n}\n\nint st, ed;\nqueue<pair<int, int> > que;\ninline void matrix(register int x, register int y){\n\tque.push(make_pair(x, y));\n\tpre[change(x, y)][change(x, y)] = 0;\n\twhile(!que.empty()){\n\t\tregister int xxx = que.front().first, yyy = que.front().second;\n\t\tque.pop();\n\t\tfor(register int i = 0; i < 4; i++){\n\t\t\tregister int xx = xxx + dx[i], yy = yyy + dy[i];\n\t\t\tif(xx < 0 || xx > n || yy < 0 || yy > m || a[xx][yy] != 1 || vis[xx][yy]) continue;\n\t\t\tvis[xx][yy] = 1;\n\t\t\tif(pre[change(xx, yy)][change(st, ed)] > pre[change(xxx, yyy)][change(st, ed)] + 1){\n\t\t\t\tque.push(make_pair(xx, yy));\n\t\t\t\tpre[change(xx, yy)][change(st, ed)] = pre[change(xxx, yyy)][change(st, ed)] + 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main(){\n\tmemset(pre, 0x3f, sizeof pre);\n\tn = read(), m = read();\n\tfor(register int i = 1; i <= n; i++){\n\t\tscanf(\"%s\", ch + 1);\n\t\tfor(register int j = 1; j <= m; j++){\n\t\t\tif(ch[j] == '.') a[i][j] = 1, person++;\n\t\t\telse if(ch[j] == 'D') a[i][j] = 2, cnt++;\n\t\t\telse a[i][j] = 0;\n\t\t}\n\t}\n\tfor(register int i = 1; i <= n; i++)\n\t\tfor(register int j = 1; j <= m; j++){\n\t\t\tif(a[i][j] == 2){\n\t\t\t\tmemset(vis, 0, sizeof vis);\n\t\t\t\tst = i, ed = j;\n\t\t\t\tmatrix(i, j);\n\t\t\t}\n\t\t}\n\ts = 0, t = 30000;\n\twhile(l <= r){\n\t\tregister int mid = l + r >> 1;\n\t\tif(check(mid)) r = mid - 1;\n\t\telse l = mid + 1;\n\t}\n\tif(l == 401) puts(\"impossible\");\n\telse printf(\"%d\\n\", l);\n\treturn 0;\n}\n```\n",
        "postTime": 1605482092,
        "uid": 154412,
        "name": "Gary818",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "\u5148\u7531S\u5411\u6bcf\u4e2a\u6709\u4eba\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u4e8c\u5206\u65f6\u95f4t\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6bcf\u4e2a\u95e8\u62c6\u6210t\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5411T\u548c\u4e0b\u4e00\u4e2a\u65f6\u95f4\u7684\u70b9\u5206\u522b\u8fde\u5bb9\u91cf\u4e3a1\u548cinf\u7684\u8fb9\uff0c\u8868\u793a\u8fd9\u4e2a\u95e8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65f6\u95f4\u91cc\u51fa\u6765\u4e00\u4e2a\u4eba\uff0c\u591a\u4f59\u7684\u4eba\u7b49\u5230\u4e0b\u4e00\u4e2a\u65f6\u95f4\n\n'''cpp\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<cassert>\n#include<cstring>\n#include<algorithm>\n#define maxn 160000\n#define maxm 400000\n#define inf 1061109567\nusing namespace std;\nchar ch;\nbool ok;\nvoid read(int &x){\n    for (ok=0,ch=getchar();!isdigit(ch);ch=getchar()) if (ch=='-') ok=1;\n    for (x=0;isdigit(ch);x=x*10+ch-'0',ch=getchar());\n    if (ok) x=-x;\n}\nchar graph[22][22];\nint n,m,cnt,pos[22][22],l,r,mid;\nstruct flow{\n    int s,t,idx,tot,now[maxn],son[maxm],pre[maxm],val[maxm];\n    int dis[maxn],head,tail,list[maxn];\n    bool bo[maxn];\n    void init(){s=0,t=1,idx=1,tot=1,memset(now,0,sizeof(now));}\n    void put(int a,int b,int c){pre[++tot]=now[a],now[a]=tot,son[tot]=b,val[tot]=c;}\n    void add(int a,int b,int c){put(a,b,c),put(b,a,0);}\n    bool bfs(){\n        memset(bo,0,sizeof(bo));\n        head=0,tail=1,list[1]=s,bo[s]=1,dis[s]=0;\n        while (head<tail){\n            int u=list[++head];\n            for (int p=now[u],v=son[p];p;p=pre[p],v=son[p])\n                if (val[p]&&!bo[v]) bo[v]=1,dis[v]=dis[u]+1,list[++tail]=v;\n        }\n        return bo[t];\n    }\n    int dfs(int u,int rest){\n        if (u==t) return rest;\n        int ans=0;\n        for (int p=now[u],v=son[p];p&&rest;p=pre[p],v=son[p])\n            if (val[p]&&dis[v]==dis[u]+1){\n                int d=dfs(v,min(rest,val[p]));\n                val[p]-=d,val[p^1]+=d,ans+=d,rest-=d;\n            }\n        if (!ans) dis[u]=-1;\n        return ans;\n    }\n    int dinic(){\n        int ans=0;\n        while (bfs()) ans+=dfs(s,inf);\n        return ans;\n    }\n}f,tmp;\nstruct Point{\n    int x,y,id;\n}list[405];\nint head,tail,g[405][405],dep[42][42];\nbool bo[42][42],flag;\nconst int dx[4]={1,0,-1,0};\nconst int dy[4]={0,1,0,-1};\nvoid bfs(int x,int y,int id){\n    memset(bo,0,sizeof(bo));\n    head=0,tail=1,list[1]=(Point){x,y,0},bo[x][y]=1,dep[x][y]=0;\n    while (head<tail){\n        Point p=list[++head];\n        int d=dep[p.x][p.y];\n        if (d) g[p.id][id]=d;\n        for (int i=0;i<4;i++){\n            int xx=p.x+dx[i],yy=p.y+dy[i];\n            if (xx<=0||xx>n||yy<=0||yy>m||graph[xx][yy]!='.'||bo[xx][yy]) continue;\n            list[++tail]=(Point){xx,yy,pos[xx][yy]},bo[xx][yy]=1,dep[xx][yy]=d+1;\n        }\n    }\n}\nbool check(int lim){\n    f=tmp;\n    for (int i=2;i<=f.idx;i++) for (int j=1;j<=cnt;j++) if (g[i][j]<=lim&&g[i][j])\n        f.add(i,f.idx+cnt*(g[i][j]-1)+j,1);\n    for (int i=1;i<=cnt;i++) for (int j=1;j<=lim;j++){\n        f.add(f.idx+cnt*(j-1)+i,f.t,1);\n        if (j!=lim) f.add(f.idx+cnt*(j-1)+i,f.idx+cnt*j+i,inf);\n    }\n    return f.dinic()==f.idx-1;\n}\nint main(){\n    read(n),read(m),f.init();\n    for (int i=1;i<=n;i++) scanf(\"%s\",graph[i]+1);\n    for (int i=1;i<=n;i++) for (int j=1;j<=m;j++)\n        if (graph[i][j]=='.') pos[i][j]=++f.idx,f.add(f.s,f.idx,1);\n        else if (graph[i][j]=='D') pos[i][j]=++cnt;\n    for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) if (graph[i][j]=='D') bfs(i,j,pos[i][j]);\n    for (int i=2;i<=f.idx;i++){\n        bool fuck=1;\n        for (int j=1;j<=cnt;j++) if (g[i][j]!=0) fuck=0;\n        if (fuck){flag=1;break;}\n    }\n    if (flag){puts(\"impossible\");return 0;}\n    for (tmp=f,l=1,r=400,mid=(l+r)>>1;l<r;mid=(l+r)>>1) if (check(mid)) r=mid; else l=mid+1;\n    printf(\"%d\\n\",l);\n    return 0;\n}\n'''\n```",
        "postTime": 1494137334,
        "uid": 32378,
        "name": "Malgr\u00e9_L_Guerre",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "\u771f\u662f\u5947\u602a\u8fd9\u4e48\u6076\u5fc3\u7684\u7f51\u7edc\u6d41\u662f\u600e\u4e48\u51fa\u73b0\u5728\u8fd9\u4e16\u754c\u4e0a\u7684\u3002\u3002\u3002\uff08\u8fd8\u6709\u4e00\u4e2a\u6076\u5fc3\u7684\u8bf7\u89c1KOI\u8fd9\u9053\u9898\uff09\n\n\u9996\u5148\u8981\u6c42\u6211\u4eec\u627e\u4e00\u4e2a\u6700\u5c0f\u9003\u51fa\u53bb\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e8c\u5206\u8fd9\u4e2a\u65f6\u95f4\u3002\u90a3\u4e48\u5982\u4f55\u628a\u4e8c\u5206\u7684\u8fd9\u4e2a\u65f6\u95f4\u548c\u7f51\u7edc\u6d41\u7ed3\u5408\u8d77\u6765\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u5c42\u56fe\uff0c\u628a\u8fd9\u4e2a\u56fe\u5206\u6210x\u5c42\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e2a\u70b9\u5411\u4e0b\u4e00\u5c42\u8fdeinf\u7684\u8fb9\uff0c\u7136\u540e\u5982\u679c\u67d0\u4e2a\u70b9\u5230\u67d0\u4e2a\u95e8\u7684\u8ddd\u79bb\u662fj\uff0c\u90a3\u4e48\u5c31\u5728\u7b2cj\u5c42\u7ed9\u5b83\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u6d41\u91cf\u4e3a1\u3002\u628a\u7b2c\u4e00\u5c42\u7684\u8d77\u70b9\u548cS\u76f8\u8fde\uff0c\u6d41\u91cf\u4e3a1\uff0c\u6240\u6709\u7684\u95e8\uff08\u6ce8\u610f\u662f\u6bcf\u4e00\u5c42\u7684\u90fd\u7b97\uff09\uff0c\u548cT\u8fde\u8fb9\u3002\u7136\u540eDINIC\u5224\u65ad\u5176\u662f\u5426\u6ee1\u8db3\u4eba\u6570\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5f88\u660e\u663e\u4e0d\u884c\u3002\u3002\u3002\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u95e8\uff0c\u4f46\u662f\u9664\u4e86\u95e8\u5176\u4ed6\u5730\u65b9\u5168\u662f\u4eba\u7684\u8bdd\uff0c\u8fd9\u56fe\u5efa\u51fa\u6765\u4f30\u8ba1\u4e5f\u5b8c\u86cb\u4e86\u3002\u3002\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u70b9\u5411\u4e0b\u4e00\u5c42\u8fde\u7684inf\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u5c42\u7684\u6bcf\u4e2a\u4eba\uff0c\u6211\u4eec\u679a\u4e3e\u6240\u6709\u7684\u95e8\uff0c\u770b\u4e00\u4e0b\u4ed6\u80fd\u5230\u8fbe\u7684\u6700\u65e9\u7684\u65f6\u95f4\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u7136\u540e\u8fde\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5904\u7406\u6bcf\u4e2a\u4eba\u5230\u8fbe\u95e8\u7684\u65f6\u95f4\u5e97\u5462\uff1fSPFA\u4e0d\u53ef\u53d6\uff0c\u539f\u56e0\u662f\uff0c\u4ee3\u7801\u590d\u6742\u5ea6\u9ad8\u8fd8\u6162\uff0c\u4e0d\u5982\u4f60\u76f4\u63a5bfs\u6bcf\u4e2a\u70b9\u3002\u7136\u540e\uff0c\u6211\u56e0\u4e3a\u5b9e\u5728\u592a\u61d2\uff0c\u7528\u4e86flyod\u6c42\u6700\u77ed\u8def\u3002\u3002\u3002\u5982\u679c\u60f3\u6c42\u901f\u5ea6\u7684\u8bdd\u4e0d\u5efa\u8bae\u4f7f\u7528\u6211\u7684\u65b9\u6cd5\u3002\u3002\u3002\u4f46\u662f\u57fa\u672c\u6ca1\u6709\u4ec0\u4e48\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u3002\u3002\n\n\u6ce8\u610f\u6bcf\u4e00\u6b21\u4e8c\u5206\u8fdb\u53bb\u4e4b\u540e\u90fd\u8981\u521d\u59cb\u5316\u6570\u7ec4\u3002\u3002\n\n\u6570\u7ec4\u5927\u5c0f\u56e0\u4eba\u800c\u5f02\uff0c\u8fd9\u4e2a\u9898\u5efa\u56fe\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4e5f\u4e0d\u53ea\u6211\u8bf4\u7684\u8fd9\u4e00\u79cd\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define re register\n#define inf 400000000\n#define id (i-1)*m+j\nusing namespace std;\nstruct po\n{\n    int nxt,to,w;\n}edge[3000021];\nint head[100003],tot,dep[100003],num=-1,sum,n,cur[100001];\nint m,s,t;\nint idd[51][51],dis[501][501];\nchar map[501][501];\nint dx[5]={0,1,0,-1,0};\nint dy[5]={0,0,1,0,-1};\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch>'9'||ch<'0')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\ninline void add_edge(int from,int to,int w)\n{\n\tedge[++num].nxt=head[from];\n\tedge[num].to=to;\n\tedge[num].w=w;\n\thead[from]=num;\n}\ninline void add(int from,int to,int w)\n{\n\tadd_edge(from,to,w);\n\tadd_edge(to,from,0);\n}\ninline bool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int> q;\n\twhile(!q.empty())\n\tq.pop();\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(re int i=head[u];i!=-1;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(edge[i].w>0&&dep[v]==0){\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tif(v==t) return 1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\ninline int dfs(int u,int low)\n{\n\tif(u==t) return low;\n\tint diss=0;\n\tfor(re int& i=cur[u];i!=-1;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(edge[i].w!=0&&dep[v]==dep[u]+1){\n\t\t\tint check=dfs(v,min(low,edge[i].w));\n\t\t\tif(check){\n\t\t\t\tlow-=check;\n\t\t\t\tdiss+=check;\n\t\t\t\tedge[i].w-=check;\n\t\t\t\tedge[i^1].w+=check;\n\t\t\t\tif(low==0) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn diss;\n}\ninline int dinic()\n{\n\tint ans=0;\n\twhile(bfs()){\n\t\tfor(re int i=s;i<=t;i++) cur[i]=head[i];\n\t\twhile(int d=dfs(s,inf))\n\t\tans+=d;\n\t}\n\treturn ans;\n}\ninline bool check(int x)\n{\n\tmemset(head,-1,sizeof(head));\n\t//memset(edge,0,sizeof(edge));\n\tnum=-1;\n\ts=0;t=x*n*m+n*m+1;\n\tfor(re int i=1;i<=n;i++)\n\t for(re int j=1;j<=m;j++){\n\t \tif(map[i][j]=='.') add(s,id,1);\n\t \tif(map[i][j]=='D'){\n\t \t\tadd(n*m+id,t,1);\n\t \t\tfor(re int l=2;l<=x;l++)\n\t \t\t{\n\t \t\t\tadd((l-1)*n*m+id,l*n*m+id,inf);\n\t \t\t\tadd(l*n*m+id,t,1);\n\t\t\t}\n\t\t\tfor(re int p=1;p<=n;p++)\n\t\t\t for(re int q=1;q<=m;q++)\n\t\t\t  if(map[p][q]=='.'&&dis[idd[p][q]][idd[i][j]]<100000)\n\t\t\t  add(idd[p][q],dis[idd[p][q]][idd[i][j]]*n*m+id,1);\n\t\t }\n\t }\n\t return dinic()==tot;\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(re int i=1;i<=n;i++)\n\tfor(re int j=1;j<=m;j++){\n\t\tcin>>map[i][j];idd[i][j]=id;\n\t\tfor(re int p=1;p<=n;p++)\n\t\t for(re int q=1;q<=m;q++)\n\t\t dis[idd[i][j]][(p-1)*m+q]=dis[(p-1)*m+q][idd[i][j]]=inf;\n\t}\n\tfor(re int i=1;i<=n*m;i++)\n\tdis[i][i]=0;\n\tfor(re int i=1;i<=n;i++)\n\t for(re int j=1;j<=m;j++)\n\t {\n\t \tif(map[i][j]=='.'){\n\t \t\ttot++;\n\t \t\tfor(re int k=1;k<=4;k++)\n\t \t\t{\n\t \t\t\tint tx=i+dx[k],ty=j+dy[k]; \n\t \t\t\tif(map[tx][ty]!='X'&&tx>=1&&tx<=n&&ty>=1&&ty<=m){\n\t \t\t\t\tdis[idd[i][j]][idd[tx][ty]]=1;\n\t\t\t\t }\n\t\t\t}\n\t\t }\n\t \tif(map[i][j]=='D')\n\t\t {\n\t \t\tfor(re int k=1;k<=4;k++)\n\t \t\t{\n\t \t\t\tint tx=i+dx[k],ty=j+dy[k]; \n\t \t\t\tif(map[tx][ty]!='X'&&tx>=1&&tx<=n&&ty>=1&&ty<=m){\n\t \t\t\t\tdis[idd[i][j]][idd[tx][ty]]=1;\n\t\t\t\t }\n\t\t\t}\n\t\t }\n\t }\n\tfor(re int k=1;k<=n*m;k++)\n\t for(re int i=1;i<n*m;i++)\n\t  for(re int j=i+1;j<=n*m;j++)\n\t   if(i!=j&&j!=k&&k!=i)\n\t   if(dis[i][j]>dis[i][k]+dis[k][j])\n\t   dis[i][j]=dis[j][i]=dis[i][k]+dis[k][j];\n\ts=0;\n\t\n\tint l=1,r=201;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)) r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tif(l>199)\n\tcout<<\"impossible\";\n\telse\n\tcout<<l;\n}\n/*\n3 3\nXXX\nX.X\nXDX\n*/\n```",
        "postTime": 1520731265,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a(\u8be6\u89c1\u672c\u4eba\u535a\u5ba2:<http://www.cnblogs.com/huangdalaofighting/>)\n\n\u8fd9\u662f\u4e00\u9053\u4e8c\u5206\u7b54\u6848\u4e0e\u7f51\u7edc\u6d41\u7b97\u6cd5\u7684\u7ed3\u5408\u7684\u9898\u76ee\uff0c\u5c0f\u7f16\u4e5f\u662f\u5934\u4e00\u6b21\u505a\u8fd9\u6837\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u88ab\u5751\u4e86\u5f88\u4e45\u3002\n\n\u4e00\u5f00\u59cb\u6ca1\u6709\u4ec0\u4e48\u5934\u7eea\uff0c\u540e\u6765\u624d\u53d1\u73b0\u53ef\u4ee5\u5148SPFA\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u5230\u95e8\u7684\u8ddd\u79bb\uff08\u4e5f\u5c31\u662f\u65f6\u95f4\uff09\uff0c\u7136\u540e\u4e8c\u5206\u65f6\u95f4\u6c42\u89e3\u3002\n\n1.\u8fd9\u9053\u9898\u53ef\u4ee5\u8003\u8651\u62c6\u70b9\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u62c6\u95e8\uff0c\u663e\u7136\u62c6\u95e8\u66f4\u7b80\u5355\uff0c\u4e8e\u662f\u5c31\u679c\u65ad\u5c06\u6bcf\u4e00\u4e2a\u95e8\u62c6\u6210mid\u4e2a\u4e0d\u540c\u7684\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5728mid\u65f6\u95f4\u5185\u5230\u8fbe\u4e00\u4e2a\u95e8d\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u70b9\u548cd\u7684mid\u5206\u70b9\u8fde\u5728\u4e00\u8d77\u3002\n\n2.\u865a\u62df\u4e00\u4e2a\u6c47\u70b9\u548c\u6bcf\u4e00\u4e2a\u95e8\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u865a\u62df\u4e00\u4e2a\u6e90\u70b9\u548c\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5176\u4f59\u7684\u8fb9\u6d41\u91cf\u4e3a\u6700\u5927\u503c\u3002\uff08\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u4eba\u53ef\u4ee5\u901a\u8fc7\u4e00\u6247\u95e8\uff09\n\n3.\u7136\u540e\u4e0d\u65ad\u5730\u8dd1Dinic\u6c42\u6700\u5927\u6d41\u3002\u5982\u679c\u53ef\u884c\u5219\u8bf4\u660e\u5728mid\u65f6\u95f4\u65f6\u53ef\u4ee5\u9003\u751f\uff0cr=mid-1\uff0c\u5982\u679c\u4e0d\u53ef\u884c\u5219l=mid+1\u3002\uff08\u666e\u901a\u7684\u4e8c\u5206\u7b54\u6848\uff09\n\n\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n1.size\u7684\u521d\u503c\u4e3a\u5947\u6570\uff0c\u4e0d\u7136\u5c31\u6ca1\u6cd5\u8dd1Dinic\u3002\n\n2.\u6570\u7ec4\u7684\u5927\u5c0f\u3002\uff08\u672c\u4eba\u8fd0\u884c\u9519\u8bef\u4e86\u597d\u591a\u6b21\uff0c\u6240\u4ee5\u4ee3\u7801\u4e2d\u7684\u6570\u7ec4\u5f00\u5f97\u6bd4\u8f83\u5927\uff0c\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\uff09\n\n\u597d\u4e86\uff0c\u5e94\u8be5\u53ef\u4ee5\u4e0a\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#include<cstdlib>\n#include<queue>\n#include<stack>\nusing namespace std;\nconst int inf=233;\nint n,m;\nint place[201][301],depth[40001],map[40001],dis[1001][1001],root,g,sum,q[501][40001],flow=0;\nint xx[40001],yy[40001],t[5]={1,0,-1,0,1};\nint head[40001],size;\nstruct Edge\n{\n    int next,to,dis;\n}edge[100001];\nint b[40001];\nvector<int>p;\nint read()\n{\n    char i=getchar();int ans=0,f=1;\n    while(i<'0'||i>'9')if(i=='-')f=-1,i=getchar();\n    while(i>='0'&&i<='9')ans=ans*10+i-'0',i=getchar();\n    return ans*f;\n}\nvoid spfa(int x,int y)\n{\n    int i,j,head=0,tail=0;\n    xx[tail]=x;yy[tail++]=y;\n    for(i=1;i<=g;i++)dis[place[x][y]][i]=inf;\n    dis[place[x][y]][place[x][y]]=0;\n    while(head!=tail)\n    {\n        int xxx=xx[head],yyy=yy[head++];\n        for(i=0;i<4;i++)\n        {\n            int nx=xxx+t[i],ny=yyy+t[i+1];\n            if(nx>=1&&nx<=n&&ny>=1&&ny<=m&&map[place[nx][ny]]&&dis[place[x][y]][place[nx][ny]]>dis[place[x][y]][place[xxx][yyy]]+1)\n            {\n                dis[place[x][y]][place[nx][ny]]=dis[place[x][y]][place[xxx][yyy]]+1;\n                if(map[place[nx][ny]]==1)\n                {\n                    xx[tail]=nx;\n                    yy[tail++]=ny;\n                }\n            }\n        }\n    }\n}\nvoid putin(int from,int to,int dis)\n{\n    size++;\n    edge[size].next=head[from];\n    edge[size].to=to;\n    edge[size].dis=dis;\n    head[from]=size;\n}\nvoid in(int from,int to,int dis)\n{\n    putin(from,to,dis);\n    putin(to,from,0);\n}\nbool bfs()\n{\n    int i;\n    for(i=root;i<=g;i++)depth[i]=0;\n    int top=0,tail=0;\n    b[tail++]=root;depth[root]=1;\n    while(top!=tail)\n    {\n        int x=b[top++];\n        if(x==g)return 1;\n        for(i=head[x];i;i=edge[i].next)\n        {\n            int y=edge[i].to;\n            if(depth[y]==0&&edge[i].dis)\n            {\n                depth[y]=depth[x]+1;\n                b[tail++]=y;\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int root,int mmax)\n{\n    int i;\n    if(root==g)return mmax;\n    int rev=0;\n    for(i=head[root];i;i=edge[i].next)\n    {\n        int y=edge[i].to,x=edge[i].dis;\n        if(depth[y]==depth[root]+1&&x)\n        {\n            int mmin=min(mmax-rev,x);\n            x=dfs(y,mmin);\n            edge[i].dis-=x;\n            edge[i^1].dis+=x;\n            rev+=x;\n            if(rev==mmax)break;\n        }\n    }\n    return rev;\n}\nbool judge(int mid)\n{\n    memset(head,0,sizeof(head));\n    size=1;\n    g=sum;\n    int i,j,k;\n    for(i=0;i<p.size();i++)\n        for(j=0;j<=mid;j++)\n            q[p[i]][j]=++g;\n    g++;\n    for(i=0;i<p.size();i++)\n        for(j=0;j<=mid;j++)\n        {\n            in(q[p[i]][j],g,1);\n            if(j!=mid)in(q[p[i]][j],q[p[i]][j+1],inf);\n        }\n    int ret=0;\n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=m;j++)\n        {\n            if(map[place[i][j]]==1)\n            {\n                ret++;\n                in(root,place[i][j],1);\n                for(k=0;k<p.size();k++)\n                {\n                    if(dis[place[i][j]][p[k]]<=mid)\n                    {\n                        in(place[i][j],q[p[k]][dis[place[i][j]][p[k]]],1);\n                    }\n                }\n            }\n        }\n    }\n    flow=0;\n    while(bfs())\n    {\n        flow+=dfs(root,2000000000);\n    }\n    return flow==ret;\n}\nint main()\n{\n    int i,j;\n    n=read();m=read();\n    root=0;\n    for(i=1;i<=n;i++)\n        for(j=1;j<=m;j++)\n        place[i][j]=++g;\n    sum=g;\n    char ch[101];\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch+1);\n        for(j=1;j<=m;j++)\n        {\n            if(ch[j]=='.')map[place[i][j]]=1;\n            if(ch[j]=='D')map[place[i][j]]=2,p.push_back(place[i][j]);\n        }\n    }\n    if(p.size()==0){printf(\"impossible\");return 0;}\n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=m;j++)\n            if(map[place[i][j]]==1)spfa(i,j);\n    }\n    int l=0,r=inf,ans=inf;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(judge(mid))r=mid-1,ans=mid;\n        else l=mid+1;\n    }\n    if(ans==inf)printf(\"impossible\");\n    else printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1494137537,
        "uid": 36357,
        "name": "kakakaka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3191 \u3010[HNOI2007]\u7d27\u6025\u758f\u6563EVACUATE\u3011"
    }
]