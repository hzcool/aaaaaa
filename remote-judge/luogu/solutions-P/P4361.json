[
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u5411\u91cf\u65cb\u8f6c\u516c\u5f0f\u7684\u63a8\u5bfc\u8fc7\u7a0b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dwuhubvl.png)\n\n$\\cos A=\\dfrac{x_0}{|R|},\\sin A=\\dfrac{y_0}{|R|}$\n\n$x_1=|R|\\cdot \\cos(A+B)$\n\n$\\ \\ \\ \\ \\ =|R|\\cdot (\\cos A\\cos B-\\sin A\\sin B)$\n\n$\\ \\ \\ \\ \\ =|R|\\cdot (\\dfrac{x_0}{|R|}\\cos B-\\dfrac{y_0}{|R|}\\sin B)$\n\n$\\ \\ \\ \\ \\ =x_0\\cos B-y_0\\sin B$\n\n$y_1=|R|\\cdot \\sin(A+B)$\n\n$\\ \\ \\ \\ \\ =|R|\\cdot (\\sin A\\cos B+\\cos A\\sin B)$\n\n$\\ \\ \\ \\ \\ =|R|\\cdot (\\dfrac{y_0}{|R|}\\cos B+\\dfrac{x_0}{|R|}\\sin B)$\n\n$\\ \\ \\ \\ \\ =x_0\\sin B+y_0\\cos B$\n\n\u6240\u4ee5\u5411\u91cf $(x_0,y_0)$ \u9006\u65f6\u9488\u65cb\u8f6c\u89d2$B$\u540e\u7684\u5411\u91cf\u4e3a $(x_0\\cos B-y_0\\sin B,x_0\\sin B+y_0\\cos B)$\u3002\n\n\u5bf9\u4e8e\u672c\u9898\u5219\u76f4\u63a5\u6a21\u62df\u5149\u7ebf\u7684\u53cd\u5c04\u8fc7\u7a0b\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cmath>\nusing namespace std;\n//#define getchar() (SS == TT && (TT = (SS = BB) + fread(BB,1,1 << 15,stdin),TT == SS) ? EOF : *SS++)\nchar BB[1 << 15],*SS = BB,*TT = BB;\nusing namespace std;\ninline int read()\n{\n\tint x = 0,f = 1;\n\tchar ch = getchar();\n\tfor(;!isdigit(ch);ch = getchar())\n\t\tif(ch == '-')\n\t\t\tf = -1;\n\tfor(;isdigit(ch);ch = getchar())\n\t\tx = x * 10 + (ch ^ 48);\n\treturn x * f;\n}\nvoid print(long long x)\n{\n\tif(x < 0)\n\t\tputchar('-'),x = -x;\n\tif(x > 9)\n\t\tprint(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst double eps = 1e-9,pi = acos(-1);\nint dcmp(double x)\n{\n\tif(fabs(x) < eps)\n\t\treturn 0;\n\treturn x < 0 ? -1 : 1;\n}\nstruct point\n{\n\tdouble x,y;\n\n\tvoid read()\n\t{\n\t\tx = ::read(),y = ::read();\n\t}\n\tpoint(double _x = 0,double _y = 0)\n\t{\n\t\tx = _x,y = _y;\n\t}\n\tfriend point operator + (point szq,point yqy)\n\t{\n\t\treturn point(szq.x + yqy.x,szq.y + yqy.y);\n\t}\n\tfriend point operator - (point szq,point yqy)\n\t{\n\t\treturn point(szq.x - yqy.x,szq.y - yqy.y);\n\t}\n\tfriend point operator * (point szq,double yqy)\n\t{\n\t\treturn point(szq.x * yqy,szq.y * yqy);\n\t}\n\tfriend double operator * (point szq,point yqy)\n\t{\n\t\treturn szq.x * yqy.x + szq.y * yqy.y;\n\t}\n\tfriend double operator & (point szq,point yqy)\n\t{\n\t\treturn szq.x * yqy.y - szq.y * yqy.x;\n\t}\n\tvoid rotate(double rad)\n\t{\n\t\t*this = point(x * cos(rad) - y * sin(rad),x * sin(rad) + y * cos(rad));\n\t}\n\tdouble lenth()\n\t{\n\t\treturn sqrt((*this) * (*this));\n\t}\n\tbool onSeg(point szq,point yqy)\n\t{\n\t\treturn dcmp((szq - *this) & (yqy - *this)) == 0 && dcmp((szq - *this) * (yqy - *this)) < 0;\n\t}\n};\npoint intersection(point p,point v,point q,point w)\n{\n    return p + v * ((w & (p - q)) / (v & w));\n}\ndouble angle(point a,point b)\n{\n\treturn acos(a * b / a.lenth() / b.lenth());\n}\n\nconst int N = 110;\nint n;\nstruct Mirror\n{\n\tpoint s,t;\n\tdouble a,b;\n}a[N];\npoint p,d;\nint main()\n{\n\tp.read(),d.read();n = read();\n\tfor(int i = 1;i <= n;i++)\n\t\ta[i].s.read(),a[i].t.read(),a[i].a = read(),a[i].b = read();\n\tbool fl = false;\n\tfor(int T = 1;T <= 10;T++)\n\t{\n\t\tdouble minn = 1e200;\n\t\tint id = -1;\n\t\tfor(int i = 1;i <= n;i++)\n\t\t{\n\t\t\tpoint v = a[i].t - a[i].s;\n\t\t\tif(dcmp(v & d))\n\t\t\t{\n\t\t\t\tpoint t = intersection(a[i].s,v,p,d);\n\t\t\t\tif(t.onSeg(a[i].s,a[i].t) && dcmp(d * (t - p)) > 0)\n\t\t\t\t{\n\t\t\t\t\tdouble dis = (t - p).lenth();\n\t\t\t\t\tif(dis < minn)\n\t\t\t\t\t\tminn = dis,id = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!~id)\n\t\t\tbreak;\n\t\tpoint v = a[id].t - a[id].s;\n\t\tp = intersection(a[id].s,v,p,d);\n\t\tprint(id),putchar(' ');\n\t\tfl = true;\n\t\tif(!dcmp(v * d))\n\t\t{\n\t\t\td = d * -1;\n\t\t\tcontinue;\n\t\t}\n\t\tif(dcmp(d * v) < 0)\n\t\t\tv = v * -1;\n        double alpha = pi / 2 - angle(v,d);\n\t\talpha = pi / 2 - alpha * a[id].a / a[id].b;\n        int bt = dcmp(d & v);\n        v.rotate(bt * alpha);\n        d = v;\n\t}\n\tif(!fl)\n\t\tputs(\"NONE\");\n}\n```",
        "postTime": 1582461855,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4361 \u3010[SHOI2015]\u6fc0\u5149\u53d1\u751f\u5668\u3011"
    },
    {
        "content": "[\u5ba3\u4f20\u6211\u7684\u535a\u5ba2\uff08\u9003](https://waautomaton.tk/2018/11/28/loj-2039-%E9%A2%98%E8%A7%A3/)\n\n#### \u9898\u76ee\u5927\u610f\n\n\u5e73\u9762\u4e0a\u6709\u82e5\u5e72\u4e2a\u955c\u5b50\uff08\u90fd\u662f\u7ebf\u6bb5\uff0c\u5165\u5c04\u89d2/\u53cd\u5c04\u89d2\u7684\u6bd4\u503c\u5404\u4e0d\u76f8\u540c\uff08\u8fd9\u4e0d\u7269\u7406\u554a\uff09\uff09\uff0c\u73b0\u5728\u5c04\u51fa\u4e00\u9053\u6fc0\u5149\uff0c\u95ee\u6fc0\u5149\u7ecf\u8fc7\u5404\u79cd\u53cd\u5c04\u4e4b\u540e\u4f1a\u649e\u4e0a\u54ea\u4e9b\u955c\u5b50\u3002\n\n#### \u9898\u89e3\n\n\u56e0\u4e3a\u81ea\u5df1\u8ba1\u7b97\u51e0\u4f55\u80fd\u529b\u592a\u5f31\u6240\u4ee5\u5f00\u4e86\u8fd9\u9898\uff08PKUSC2018\u809d\u4e86\u534a\u573a\u7684\u8ba1\u7b97\u51e0\u4f55\u9898\u6700\u540e\u8fd8\u662f\u7206\u96f6\u7684\u9634\u5f71\uff09\u3002  \n\n\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u663e\u7136\u7684\u8ba1\u7b97\u51e0\u4f55\u9898\uff0c\u57fa\u672c\u53ea\u9700\u7528\u8ba1\u7b97\u51e0\u4f55\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c\u53bb\u6a21\u62df\u9898\u610f\u5c31\u80fd\u505a\u4e86\uff0c\u4e5f\u6ca1\u5565\u5751\u70b9\u3002  \n\n\u4f46\u662f\u6211\u592a\u5f31\u4e86\uff0c\u8ba1\u7b97\u51e0\u4f55\u677f\u5b50\u53ea\u80fd\u7167\u7740\u84dd\u4e66\u6253\uff0c\u4e3b\u7b97\u6cd5\u90e8\u5206\u4e5f\u662f\u770b\u7740[\u53e6\u4e00\u4efd\u9898\u89e3](http://www.cnblogs.com/KKKorange/p/8646447.html)\u5199\u7684\uff08\u6342\u8138\uff09\u3002\n\n\u5177\u4f53\u7684\u7b97\u6cd5\u8fc7\u7a0b\u90fd\u5199\u5728\u4e0b\u9762\u4ee3\u7801\u7684\u6ce8\u91ca\u91cc\u4e86\uff0c\u5e94\u8be5\u662f\u5f88\u597d\u7406\u89e3\u7684\u5427\uff08\u9003\n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n/*+lmake\n * DEFINE += WAAUTOMATON\n */\n#include <bits/stdc++.h>\n#ifdef WAAUTOMATON\n#define debug(args...)                                                                             \\\n    {                                                                                              \\\n        dbg, args;                                                                                 \\\n        cerr << endl;                                                                              \\\n    }\n#define massert(x) assert(x)\n#else\n#define debug(args...) // Just strip off all debug tokens\n#define massert(x)\n#endif\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef std::pair<int,int> pii;\n\nvoid iopen()\n{\n    static bool isOpen = false;\n    if (!isOpen) {\n        isOpen = true;\n#ifdef WAAUTOMATON\n        freopen(\"in.txt\", \"r\", stdin);\n#endif\n    }\n}\n\ntemplate <size_t _I_Buffer_Size = 1 << 23, size_t _O_Buffer_Size = 1 << 23>\nstruct IO_Tp\n{\n    //\u8fd9\u662fIO\u4f18\u5316\u677f\u5b50\uff0c\u4e3a\u4e86\u9605\u8bfb\u4f53\u9a8c\u6b64\u90e8\u5206\u7701\u7565\n};\nIO_Tp<> IO;\n\n//\u4ece\u8fd9\u91cc\u5f00\u59cb\u662f\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\nconst double eps=1e-8;\nint dcmp(double x,double y)\n{\n\tif (abs(x-y)<eps) return 0;\n\telse return x-y<0?-1:1;\n}\nint dcmp(double x)\n{\n\tif (abs(x)<eps) return 0;\n\telse return x<0?-1:1;\n}\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n};\ntypedef Point Vector;\nVector operator+(const Vector& a,const Vector& b){return Vector(a.x+b.x,a.y+b.y);} \nVector operator-(const Vector& a,const Vector& b){return Vector(a.x-b.x,a.y-b.y);}\nVector operator*(const Vector& a,double b){return Vector(a.x*b,a.y*b);}\nVector operator/(const Vector& a,double b){return Vector(a.x/b,a.y/b);}\nbool operator<(const Point& a,const Point& b)\n{\n\tif (dcmp(a.x,b.x)==0) return a.y<b.y;\n\telse return a.x<b.x;\n}\nbool operator==(const Point& a,const Point& b)\n{\n\treturn dcmp(a.x,b.x)==0 && dcmp(a.y,b.y)==0;\n}\ndouble dot(const Vector& a,const Vector& b) {return a.x*b.x+a.y*b.y;} //\u70b9\u79ef\ndouble length(const Vector& a){return sqrt(dot(a,a));} //\u5411\u91cf\u7684\u6a21\ndouble angle(const Vector& a,const Vector& b){return acos(dot(a,b)/length(a)/length(b));} //\u6c422\u4e2a\u5411\u91cf\u7684\u5939\u89d2\ndouble cross(const Vector& a,const Vector& b){return a.x*b.y-a.y*b.x;} //\u53c9\u79ef\nVector rotate(Vector a,double rad) //\u5c06\u4e00\u4e2a\u5411\u91cf\u7ed5\u8d77\u70b9\u8f6crad\n{\n\treturn Vector(a.x*cos(rad)-a.y*sin(rad),a.x*sin(rad)+a.y*cos(rad));\n}\nPoint getLineIntersection(const Point &p,const Vector& v,const Point& q,const Vector & w) //\u6c422\u4e2a\u76f4\u7ebf\u4ea4\u70b9\uff08\u9700\u4fdd\u8bc1\u6709\u4e14\u53ea\u67091\u4e2a\u4ea4\u70b9\uff09\n{\n\tVector u=p-q;\n\tdouble t=cross(w,u)/cross(v,w);\n\treturn p+v*t;\n}\nbool onSegment(const Point& p,const Point& a1,const Point& a2) //\u6c42\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\n{\n\treturn dcmp(cross(a1-p,a2-p))==0 && dcmp(dot(a1-p,a2-p))<0;\n}\n\n//\u4ee5\u4e0a\u4e3a\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\uff0c\u5168\u90e8\u6765\u81ea\u84dd\u4e66\n\nconst int MAXN=100;\nstruct Data\n{\n\tPoint p1,p2;\n\tint a,b;\n}a[MAXN+10];\nint main()\n{\n\tiopen();\n\tint x,y,dx,dy,n;\n\tcin>>x>>y>>dx>>dy>>n;\n\tfor(int i=1; i<=n; ++i) {\n\t\tcin>>a[i].p1.x>>a[i].p1.y>>a[i].p2.x>>a[i].p2.y>>a[i].a>>a[i].b;\n\t}\n\tPoint p(x,y); //\u5f53\u524d\u6fc0\u5149\u8d77\u70b9\u5750\u6807\n\tVector v(dx,dy); //\u5f53\u524d\u6fc0\u5149\u7684\u65b9\u5411\u5411\u91cf\n\tbool flag=true;\n\tfor(int t=1; t<=10; ++t) {\n\t\tdouble mdis=1e100;\n\t\tint id=0; \n        // \u4e0b\u9762\u8fd9\u4e2afor\u627e\u51fa\u6240\u6709\u4e0e\u5f53\u524d\u6fc0\u5149\u6709\u4ea4\u7684\u955c\u5b50\uff0c\u5e76\u6c42\u51fa\u5176\u4e2d\u4ea4\u70b9\u4e0ep\u8ddd\u79bb\u6700\u77ed\u7684\u955c\u5b50\uff08\u663e\u7136\u6fc0\u5149\u63a5\u4e0b\u6765\u4e00\u5b9a\u649e\u5728\u8fd9\u4e2a\u955c\u5b50\u4e0a\uff09\u3002\n\t\tfor(int i=1; i<=n; ++i) {\n\t\t\tif (dcmp(cross(a[i].p1-a[i].p2,v))!=0) { //\u6392\u9664\u6fc0\u5149\u4e0e\u955c\u5b50\u5e73\u884c\u7684\u60c5\u51b5\n\t\t\t\tPoint t=getLineIntersection(a[i].p1,a[i].p2-a[i].p1,p,v); //\u6c42\u4ea4\u70b9\n\t\t\t\tif (onSegment(t,a[i].p1,a[i].p2) && dcmp(dot(v,t-p))>0) { //\u5224\u65ad\u4ea4\u70b9\u5728\u955c\u5b50\u4e0a\uff0c\u5e76\u4e14\u4e0d\u5728\u6fc0\u5149\u7684\u53e6\u4e00\u4fa7\uff08\u6fc0\u5149\u662f\u4e00\u6761\u5c04\u7ebf\uff09\n\t\t\t\t\tdouble dis=length(p-t); //\u8ba1\u7b97\u8ddd\u79bb\n\t\t\t\t\tif (dis<mdis) {\n\t\t\t\t\t\tmdis=dis;\n\t\t\t\t\t\tid=i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\tif (id==0) break;\n\t\tp=getLineIntersection(a[id].p1,a[id].p2-a[id].p1,p,v); //\u6c42\u4ea4\u70b9\uff0c\u5e76\u4f5c\u4e3a\u65b0\u7684\u6fc0\u5149\u8d77\u70b9\n        //\u63a5\u4e0b\u6765\u6c42\u65b0\u7684\u6fc0\u5149\u65b9\u5411\n\t\tif (dcmp(dot(a[id].p1-a[id].p2,v))==0) { //\u5982\u679c\u955c\u5b50\u4e0e\u6fc0\u5149\u5782\u76f4\uff0c\u76f4\u63a5\u65b9\u5411\u5411\u91cf\u53d6\u53cd\u5373\u53ef\n\t\t\tv=v*-1;\n\t\t} else {\n\t\t\tVector t;\n\t\t\tt=a[id].p2-a[id].p1; //\u6c42\u955c\u5b50\u7684\u65b9\u5411\u5411\u91cf\n\t\t\tif (dcmp(dot(a[id].p1-a[id].p2,v))>0) t=0-t; //\u5165\u5c04\u89d2\u8981\u53d6\u9510\u89d2\n\t\t\tdouble alpha=acos(-1)/2-angle(t,v); //\u8ba1\u7b97\u5165\u5c04\u89d2\n\t\t\tint bt=dcmp(cross(t,v)); \n\t\t\tv=rotate(t,bt*(alpha*a[id].a/a[id].b-acos(-1)/2)); //\u5148\u8ba1\u7b97\u51fa\u53cd\u5c04\u89d2\uff08\u518d\u5410\u69fd\u4e00\u6b21\uff0c\u5165\u5c04\u89d2\u4e0d\u7b49\u4e8e\u53cd\u5c04\u89d2\uff0c\u8fd9\u4e00\u70b9\u90fd\u4e0d\u7269\u7406\u554a\uff09\uff0c\u7136\u540e\u628a\u955c\u5b50\u7684\u65b9\u5411\u5411\u91cf\u8f6c\u90a3\u4e2a\u89d2\u5ea6\uff0c\u5f97\u5230\u7684\u5c31\u662f\u65b0\u7684\u6fc0\u5149\u65b9\u5411\u5411\u91cf\u4e86\u3002\n\t\t}\n\t\tcout<<id<<' ';\n\t\tflag= false;\n\t}\n\tif (flag) cout<<\"NONE\";\n\tcout<<endl;\n    return 0;\n}\n\n\n```\n\n",
        "postTime": 1543412198,
        "uid": 39219,
        "name": "WAAutoMaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4361 \u3010[SHOI2015]\u6fc0\u5149\u53d1\u751f\u5668\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u5149\u7ebf\u8ffd\u8e2a\uff0c\u4f46\u662f\u5bf9\u4e8e\u7b2c $i$ \u9762\u955c\u5b50\uff0c\u5149\u7ebf\u7684\u5165\u5c04\u89d2\u4e3a $\\alpha$ \u65f6\uff0c\u53cd\u5c04\u89d2 $\\beta=\\lambda_i\\alpha$\uff0c\u5176\u4e2d $\\lambda_i$ \u662f\u7ed9\u5b9a\u7684\u5e38\u6570\uff0e\n\n## \u601d\u8def\n\u8981\u6c42\u51fa\u5149\u7ebf\u7684\u8def\u5f84\u4e0a\u9047\u5230\u7684\u6240\u6709\u504f\u8f6c\u88c5\u7f6e\u7684\u7f16\u53f7\uff0c\u76f4\u63a5\u9012\u5f52\u6a21\u62df\u53cd\u5c04\u8fc7\u7a0b\u5373\u53ef\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u8ba1\u7b97\u53cd\u5c04\u5149\u7ebf\uff0e\n\n\u6211\u4eec\u4f7f\u7528 $\\mathbf{R}(x)=\\mathbf{A}+x\\mathbf{b}$ \u6765\u8868\u793a\u4e00\u6761\u76f4\u7ebf\uff0c\u5176\u4e2d $\\mathbf{A}$ \u662f\u6e90\u70b9\uff0c$\\mathbf{b}$ \u662f\u65b9\u5411\u5411\u91cf\uff0c$x$ \u662f\u53c2\u6570\uff0e\n\n\u5bf9\u4e8e\u4e24\u6761\u76f4\u7ebf $\\mathbf{A}(x)=\\mathbf{P}+x\\mathbf{u},\\mathbf{B}(x)=\\mathbf{Q}+x\\mathbf{v}$\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u5b83\u4eec\u95f4\u7684\u4ea4\u70b9\uff0e\n\n\u82e5\u5b83\u4eec\u4e4b\u95f4\u6709\u4ea4\u70b9\uff0c\u5219\u6709\u4e24\u5b9e\u6570 $s,t$\uff0c\u6ee1\u8db3 $\\mathbf{A}(s)=\\mathbf{B}(t)$\uff0e\u53ea\u8981\u6211\u4eec\u8ba1\u7b97\u51fa $s$ \u6216 $t$\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u4ea4\u70b9\uff0e\u4ee5\u8ba1\u7b97 $s$ \u4e3a\u4f8b\uff0c\u6211\u4eec\u6709\uff1a\n$$\n\\mathbf{P}+s\\mathbf{u}=\\mathbf{Q}+t\\mathbf{v}\n$$\n\n\u7b49\u5f0f\u4e24\u8fb9\u70b9\u4e58\u4e0a $\\mathbf{v}$ \u7684\u6cd5\u5411\u91cf $\\mathbf{n}$\uff0c\u5f97\u5230\uff1a\n$$\n\\mathbf{P} \\cdot \\mathbf{n} + s\\mathbf{u} \\cdot \\mathbf{n} =\\mathbf{Q} \\cdot \\mathbf{n} + \\mathbf{0}\n$$\n\n\u6574\u7406\u53ef\u5f97\uff1a\n$$\ns=\\frac{\\mathbf{Q} \\cdot \\mathbf{n} - \\mathbf{P} \\cdot \\mathbf{n}}{\\mathbf{u} \\cdot \\mathbf{n}}\n$$\n\n$t$ \u7684\u8ba1\u7b97\u7c7b\u4f3c\uff0e\n\n\u8bb0\u5f53\u524d\u5165\u5c04\u5149\u7ebf\u4e3a $\\mathbf{R}(x)=\\mathbf{A}+x\\mathbf{u}$\uff0c\u504f\u8f6c\u88c5\u7f6e\u4e3a $\\mathbf{M}(x)=\\mathbf{B}+x\\mathbf{v}$\uff0e\n\n\u5149\u7ebf\u662f\u5c04\u7ebf\uff0c\u6240\u4ee5\u5bf9\u4e8e $\\mathbf{R}(x)$\uff0c\u5e94\u5f53\u6709 $x>0$\uff0e\n\n\u6211\u4eec\u4e0d\u59a8\u8ba9\u8868\u793a\u504f\u8f6c\u88c5\u7f6e\u7684\u76f4\u7ebf\u7684\u65b9\u5411\u5411\u91cf\u7531\u7ebf\u6bb5\u7684\u4e00\u4e2a\u7aef\u70b9\u6307\u5411\u53e6\u4e00\u4e2a\u7aef\u70b9\uff0e\u8fd9\u6837\u5bf9\u4e8e $\\mathbf{M}(x)$\uff0c\u5e94\u5f53\u6709 $0 \\le x \\le \t1$\uff0e\n\n\u77e5\u9053\u4e86\u5982\u4f55\u5bf9\u5149\u7ebf\u548c\u504f\u8f6c\u88c5\u7f6e\u6c42\u4ea4\uff0c\u6211\u4eec\u518d\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u53cd\u5c04\u5149\u7ebf\uff0e\n\n\u4e3a\u4e86\u8ba1\u7b97\u65b9\u4fbf\uff0c\u4e0d\u59a8\u8ba9\u53cd\u5c04\u8fc7\u7a0b\u4e2d\u7684\u6cd5\u7ebf $\\mathbf{N}(x)=\\mathbf{H}+x\\mathbf{w}$ \u548c $\\mathbf{R}(x)$ \u5728\u540c\u4e00\u4fa7\uff0e\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qgcjylaf.png)\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u51fa $-\\mathbf{u}$ \u5230 $\\mathbf{w}$ \u7684\u8f6c\u89d2 $\\theta$\uff0c\u53cd\u5c04\u5149\u7ebf\u5373\u4e3a $\\mathbf{R}^\\prime(x)=\\mathbf{H}+x\\mathbf{c}$\uff0c\u5176\u4e2d $\\mathbf{c}$ \u662f $\\mathbf{w}$ \u65cb\u8f6c $\\lambda\\theta$ \u89d2\u4e4b\u540e\u7684\u5411\u91cf\uff0e\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bz71rm3a.png)\n\n\u5176\u4e2d $\\mathbf{a}$ \u5230 $\\mathbf{b}$ \u7684\u8f6c\u89d2 $\\displaystyle\\theta=\\arcsin\\frac{\\mathbf{a}\\times\\mathbf{b}}{|\\mathbf{a}||\\mathbf{b}|}$\uff0e\n\n\u5728\u6a21\u62df\u5149\u7ebf\u53cd\u5c04\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u80fd\u591f\u76f8\u4ea4\u7684\u504f\u8f6c\u88c5\u7f6e\uff0c\u8bbe\u4ea4\u70b9\u4e3a $\\mathbf{R}(s)$\uff0c\u6211\u4eec\u9009\u53d6\u6700\u5c0f\u7684 $s$ \u6240\u5bf9\u5e94\u7684\u53cd\u5c04\u5149\u7ebf\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u53cd\u5c04\u7684\u5165\u5c04\u5149\u7ebf\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u8fd9\u4e00\u6b21\u53cd\u5c04\u5728\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u53cd\u5c04\u88c5\u7f6e\u5904\u53d1\u751f\uff0e\n\n## \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <iostream>\n\nusing f64 = double;\nconstexpr size_t N = 1 << 7;\nconstexpr f64 eps = 1e-5;\n\nstruct vec {\n\tf64 x, y;\n\tvec(f64 x = 0, f64 y = 0) : x(x), y(y) {}\n\tf64 len() const { return std::sqrt(x * x + y * y); }\n};\nusing point = vec;\n\nvec operator-(const vec &a) { return {-a.x, -a.y}; }\nvec operator+(const vec &a, const vec &b) { return {a.x + b.x, a.y + b.y}; }\nvec operator-(const vec &a, const vec &b) { return {a.x - b.x, a.y - b.y}; }\nvec operator*(const f64 a, const vec &b) { return {a * b.x, a * b.y}; }\nvec norm(const vec &a) { return {-a.y, a.x}; }\nf64 dot(const vec &a, const vec &b) { return a.x * b.x + a.y * b.y; }\nf64 cross(const vec &a, const vec &b) { return a.x * b.y - a.y * b.x; }\nf64 angle(const vec &a, const vec &b) { return std::asin(cross(a, b) / (a.len() * b.len())); }\nvec rotate(const vec &a, f64 x) {\n\treturn {a.x * std::cos(x) - a.y * std::sin(x), a.x * std::sin(x) + a.y * std::cos(x)};\n}\nstd::istream &operator>>(std::istream &is, vec &v) {\n\tf64 x, y;\n\tis >> x >> y, v = {x, y};\n\treturn is;\n}\n\nstruct ray {\n\tpoint ori;\n\tvec dire;\n\tray() : ori(), dire() {}\n\tray(const point &ori, const vec &dire) : ori(ori), dire(dire) {}\n\tpoint at(f64 x) { return ori + x * dire; }\n};\n\nstruct refl {\n\tray r;\n\tf64 k;\n\trefl() : r(), k() {}\n\trefl(const point &s, const point &t, const f64 k) : r(s, t - s), k(k) {}\n\tbool hit(const ray &inr, ray &otr, f64 &x) {\n\t\tvec m = norm(inr.dire);\n\t\tf64 s = dot(m, inr.ori - r.ori) / dot(m, r.dire);\n\t\tif (s < eps || s > 1) return false;\n\t\tvec n = norm(r.dire);\n\t\tif (dot(-inr.dire, n) < 0) n = -n;\n\t\tf64 t = dot(n, r.ori - inr.ori) / dot(n, inr.dire);\n\t\tif (t < eps) return false;\n\t\tx = t, otr = {r.at(s), rotate(n, k * angle(-inr.dire, n))};\n\t\treturn true;\n\t}\n};\n\nint n;\nrefl a[N];\npoint o, d;\n\nint ans[N], tp;\nvoid dfs(const ray &r, int dep) {\n\tif (dep <= 0) return;\n\tint id = 0;\n\tray rf, tr;\n\tf64 mn = 1e300, tl;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (a[i].hit(r, tr, tl)) {\n\t\t\tif (tl < mn) id = i, rf = tr, mn = tl;\n\t\t}\n\t}\n\tif (id) {\n\t\tans[++tp] = id;\n\t\tdfs(rf, dep - 1);\n\t}\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(nullptr);\n\n\tstd::cin >> o >> d >> n;\n\tfor (int i = 1, x, y; i <= n; i++) {\n\t\tpoint s, t;\n\t\tstd::cin >> s >> t >> x >> y;\n\t\ta[i] = {s, t, f64(x) / y};\n\t}\n\n\tdfs({o, d}, 10);\n\n\tif (tp) {\n\t\tfor (int i = 1; i <= tp; i++) {\n\t\t\tstd::cout << ans[i] << \" \\n\"[i == tp];\n\t\t}\n\t} else std::cout << \"NONE\\n\";\n\n\treturn 0;\n}\n```\n",
        "postTime": 1670686374,
        "uid": 329316,
        "name": "kernel_panic",
        "ccfLevel": 0,
        "title": "P4361 \u9898\u89e3"
    }
]