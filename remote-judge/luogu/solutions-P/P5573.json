[
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5573)\n\n>\u9898\u610f:  \n\u7ed9\u5b9a\u4e00\u5f20\u5b8c\u5168\u56fe\uff0c\u6bcf\u4e24\u4e2a\u70b9 $(i,j)$ \u4e4b\u95f4\u6709\u4e09\u79cd\u8fb9 $A_{(i,j)},B_{(i,j)},C_{(i,j)}$ \u3002  \n\u5176\u4e2d $A_{(i,j)}=a_i\\operatorname{xor} a_j,B{(i,j)}=b_i\\operatorname{xor} b_j,C_{(i,j)}=c_i\\operatorname{xor} c_j$\u3002  \n\u6bcf\u6b21\u67e5\u8be2\u5bf9\u4e09\u79cd\u8fb9\u5206\u522b\u7ed9\u51fa\u4e00\u4e2a\u8d77\u70b9\u4e0e\u9600\u503c\uff0c  \n\u95ee\u4ece\u4e09\u79cd\u56fe\u4e2d\u5206\u522b\u4ece\u5404\u81ea\u8d77\u70b9\u5f00\u59cb\uff0c\u7ecf\u8fc7\u4e0d\u5927\u4e8e\u5404\u81ea\u9600\u503c\u7684\u8fb9\u5230\u8fbe\u7684\u70b9\u7684\u4ea4\u96c6\u3002\n\n\u8fd9\u9053\u9898\u51e0\u4e4e\u662f\u5f3a\u884c\u62fc\u9898\u3002\n\n\u9996\u5148\u5bf9\u6bcf\u5f20\u56fe\u6c42\u51fa\u5404\u81ea\u7684 $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u5c31\u662f[\u8fd9\u9898](https://www.luogu.com.cn/problem/CF888G)\u3002\n\n\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e00\u4f4d\uff0c\u5c06\u8fd9\u4e00\u4f4d\u4e3a $0,1$ \u7684\u5206\u5f00\u8003\u8651\uff0c\u5efa\u51fa\u5c06\u4e24\u8fb9\u5404\u81ea\u7684 $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u7136\u540e\u7528 $\\text{01trie}$ \u67e5\u8be2\u4e24\u8fb9 $\\operatorname{xor}$ \u5f97\u5230\u7684\u6700\u5c0f\u503c\uff0c\u5f97\u5230\u5f53\u524d\u8fd9\u5c42\u7684 $\\text{Kruskal}$ \u91cd\u6784\u6811\u3002\n\n\u6b63\u786e\u6027\u662f\u56e0\u4e3a\u6bcf\u6b21\u8ba9\u5927\u7684\u4f4d\u51fa\u73b0\u5f97\u5c3d\u91cf\u5c0f\uff0c\u4f7f\u4f4d\u6570\u66f4\u4f4e\u7684\u59a5\u534f\uff0c\u800c $2\\times 2^{d-1}\\leq 2^d$\uff0c\u5f97\u5230\u7684\u4e00\u5b9a\u662f\u6700\u4f18\u65b9\u6848\u4e4b\u4e00\u3002\n\n\u6bcf\u4e2a\u70b9\u4f1a\u88ab\u67e5\u8be2\u81f3\u591a $\\log V$ \u6b21\uff0c\u6bcf\u6b21 $\\text{01trie}$ \u4e0a\u7684\u70b9\u67e5\u8be2\u9700\u8981 $O(\\log V)$\uff0c\u8fd9\u90e8\u5206\u603b\u65f6\u95f4\u4e3a $O(n\\log^2V)$\u3002\n\n\u6ce8\u610f\u8fd9\u6837\u5c06\u76f8\u540c\u7684\u6570\u5206\u5230\u4e00\u4efd\u65f6\u5f02\u6216\u4e3a $0$\uff0c\u4e5f\u8981\u5efa\u51fa\u5176\u91cd\u6784\u6811\u3002\n\n\u8fd9\u4e4b\u540e\u6bcf\u6b21\u67e5\u8be2\u5c31\u80fd\u5728 $\\text{Kruskal}$ \u91cd\u6784\u6811\u4e0a\uff0c\u500d\u589e\u5f97\u5230\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u6240\u5728\u7684 $dfn$ \u5e8f\u8303\u56f4\u3002\n\n\u8bbe $A,B,C$ \u4e09\u56fe\u5404\u81ea $dfn$ \u5e8f\u8303\u56f4\u662f $[la,ra],[lb,rb],[lc,rc]$\u3002\n\n\u90a3\u67e5\u8be2\u8f6c\u4e3a\u8be2\u95ee\u6ee1\u8db3 $\\begin{cases}la\\leq dfna_i\\leq ra\\\\lb\\leq dfnb_i\\leq rb\\\\lc\\leq dfnc_i\\leq rc\\end{cases}$ \u7684 $i$ \u7684\u4e2a\u6570\u3002\n\n\u8fd9\u5c31\u662f\u4e2a\u660e\u663e\u7684\u4e09\u7ef4\u504f\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e09\u7ef4\u5dee\u5206\u62c6\u6210\u516b\u4e2a\u8be2\u95ee\u540e\uff0c\u4e00\u4e2a $\\text{cdq}$ \u5206\u6cbb\u8f7b\u677e\u89e3\u51b3\u3002\n\n\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m\\log m\\log n)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2V+m\\log n\\log m)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10,K=28;\nconst int inf=2e8;\nint n,m,x,y,nn,tt,v,tot;char ch;\nint a[N][3],son[N][2][3],w[N][3];\nstruct trie{int son[2],sz;}_[N*K];\nint _rt,_tot,_v;bool _b;\ninline void read(int &x){\n\tx=0;ch=getchar();while(ch<48)ch=getchar();\n\twhile(ch>47)x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\nvoid write(int x){if(x>9)write(x/10);putchar(48+x%10);}\nvoid update(int &k,int x,int i){\n\tif(!k)k=++_tot;++_[k].sz;\n\tif(~i)update(_[k].son[(x>>i)&1],x,i-1);\n}\nvoid inquiry(int k,int x,int i){if(~i){\n\t_b=(x>>i)&1;\n\tif(_[_[k].son[_b]].sz)inquiry(_[k].son[_b],x,i-1);\n\telse _v+=1<<i,inquiry(_[k].son[!_b],x,i-1);\n}}\ninline void _init(){\n\tstatic int i;\n\tfor(i=1;i<=_tot;++i)_[i].son[0]=_[i].son[1]=_[i].sz=0;\n\t_rt=_tot=0;\n}\nstruct node{\n\tint v,id;node()=default;\n\tnode(int _v,int _id):v(_v),id(_id){}\n}p[N],pl[N],pr[N];\ninline int build_(int l,int r,int j){\n\tif(l^r){\n\t\tint mid=(l+r)>>1,tmp=++nn;\n\t\tson[tmp][0][j]=build_(l,mid,j);\n\t\tson[tmp][1][j]=build_(mid+1,r,j);\n\t\treturn tmp;\n\t}\n\treturn p[l].id;\n}//\u6743\u503c\u76f8\u540c\u65f6\u5efa\u6811 \nint build(int l,int r,int d,int j){\n\tint i;\n\tif(l^r&&~d){\n\t\tint lcnt=0,rcnt=0,tmp;bool b;\n\t\tfor(i=l;i<=r;++i){\n\t\t\tb=(p[i].v>>d)&1;\n\t\t\tif(b)pr[++rcnt]=p[i];\n\t\t\telse pl[++lcnt]=p[i];\n\t\t}\n\t\tfor(i=1;i<=lcnt;++i)p[l+i-1]=pl[i];\n\t\tfor(i=1;i<=rcnt;++i)p[r-i+1]=pr[i];\n\t\tif(lcnt&&rcnt){\n\t\t\ttmp=++nn;w[tmp][j]=inf;\n\t\t\tson[tmp][0][j]=build(l,l+lcnt-1,d-1,j);\n\t\t\tfor(i=r-rcnt+1;i<=r;++i){\n\t\t\t\t_v=0,inquiry(_rt,p[i].v,K);\n\t\t\t\tw[tmp][j]=min(w[tmp][j],_v);\n\t\t\t}\n\t\t\tson[tmp][1][j]=build(r-rcnt+1,r,d-1,j);\n\t\t\treturn tmp;\n\t\t}\n\t\telse return build(l,r,d-1,j);\n\t}\n\telse {update(_rt,p[l].v,K);return build_(l,r,j);}\n}//\u5efakruskal\u91cd\u6784\u6811 \nint dfn[N][3],dfnr[N][3],rev[N],sz[N][3],f[N][19][3];\nvoid dfs(int x,int anc,int j){\n\tf[x][0][j]=anc;int i,y;\n\tfor(i=1;i^19;++i)f[x][i][j]=f[f[x][i-1][j]][i-1][j];\n\tif(y=son[x][0][j])dfs(y,x,j),sz[x][j]+=sz[y][j];\n\tif(y=son[x][0][j])dfn[x][j]=dfn[y][j];\n\tif(y=son[x][1][j])dfs(y,x,j),sz[x][j]+=sz[y][j];\n\telse dfn[x][j]=++tt,sz[x][j]=1;\n}\nvoid init(){\n\tregister int i,j,rt;\n\tfor(j=0;j<3;++j){\n\t\tfor(i=1;i<=n;++i)p[i]=node(a[i][j],i);\n\t\tnn=n;rt=build(1,n,K,j);tt=0;dfs(rt,0,j);w[0][j]=inf;\n\t\tfor(i=1;i<=nn;++i)dfnr[i][j]=dfn[i][j]+sz[i][j]-1;\n\t\t_init();\n\t}\n\tfor(i=1;i<=n;++i)if(sz[i][0]==1)rev[dfn[i][0]]=i;\n}\ninline int find(int x,int v,int j){\n\tstatic int i;\n\tfor(i=18;~i;--i)if(w[f[x][i][j]][j]<=v)x=f[x][i][j];\n\treturn x;\n}//\u500d\u589e \nstruct cdq{\n\tint a,b,c,id;char opt;cdq()=default;//opt=0 : mdf || opt=1,-1 : inq\n\tcdq(int _a,int _b,int _c,int _id,char _opt):\n\t\ta(_a),b(_b),c(_c),id(_id),opt(_opt){}\n}q[N<<2],q0[N<<2];\ninline bool cmpa(cdq x,cdq y){return x.a^y.a?x.a<y.a:!x.opt;}\ninline bool cmpb(cdq x,cdq y){return x.b^y.b?x.b<y.b:!x.opt;}\nint t_[N],ti,res,t[3],ans[N];\n#define lowbit(i) i&(-i)\ninline void update(int pos,int v){for(ti=pos;ti<=n;ti+=lowbit(ti))t_[ti]+=v;}\ninline void inquiry(int pos){res=0;for(ti=pos;ti;ti-=lowbit(ti))res+=t_[ti];}\nvoid solve(int l,int r){if(l^r){\n\tint mid=(l+r)>>1,i;\n\tsolve(l,mid);solve(mid+1,r);\n\tmerge(q+l,q+mid+1,q+mid+1,q+r+1,q0+l,cmpb);\n\tfor(i=l;i<=r;++i)q[i]=q0[i];\n\tfor(i=l;i<=r;++i){\n\t\tif(q[i].opt&&q[i].a>mid)inquiry(q[i].c),ans[q[i].id]+=res*q[i].opt;\n\t\telse if(!q[i].opt&&q[i].a<=mid)update(q[i].c,1);\n\t}\n\tfor(i=l;i<=r;++i)if(!q[i].opt&&q[i].a<=mid)update(q[i].c,-1);\n}}//cdq\ninline void cdq_add(int i){\n\tstatic int la,ra,lb,rb,lc,rc;\n\tla=dfn[t[0]][0]-1,ra=dfnr[t[0]][0];\n\tlb=dfn[t[1]][1]-1,rb=dfnr[t[1]][1];\n\tlc=dfn[t[2]][2]-1,rc=dfnr[t[2]][2];\n\tq[++tot]=cdq(ra,rb,rc,i,1);q[++tot]=cdq(la,lb,lc,i,-1);\n\tq[++tot]=cdq(la,rb,rc,i,-1);q[++tot]=cdq(ra,lb,lc,i,1);\n\tq[++tot]=cdq(ra,lb,rc,i,-1);q[++tot]=cdq(la,rb,lc,i,1);\n\tq[++tot]=cdq(ra,rb,lc,i,-1);q[++tot]=cdq(la,lb,rc,i,1);\n}//\u4e09\u7ef4\u5dee\u5206 \nmain(){\n\tread(n);read(m);register int i,j;\n\tfor(j=0;j<3;++j)for(i=1;i<=n;++i)read(a[i][j]);\n\tinit();\n\tfor(i=1;i<=m;++i){\n\t\tfor(j=0;j<3;++j)read(v),read(x),t[j]=find(x,v,j);\n\t\tcdq_add(i);\n\t}\n\tfor(i=1;x=rev[i],i<=n;++i)q[++tot]=cdq(i,dfn[x][1],dfn[x][2],0,0);\n\tsort(q+1,q+tot+1,cmpa);\n\tfor(i=1;i<=tot;++i)q[i].a=i;\n\tsolve(1,tot);\n\tfor(i=1;i<=m;++i)write(ans[i]),putchar('\\n');\n}\n```\n",
        "postTime": 1636641534,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[P5573 \u661f\u9645kfc\u7bee\u7403\u8d5b]"
    },
    {
        "content": "# \u5b98\u65b9\u9898\u89e3:\u661f\u9645kfc\u7bee\u7403\u8d5b\n\n\u8fd9\u9053\u9898\u662f\u51fa\u6765\u9632$AK$\u7684,\u6bd5\u7adfstd\u7801\u4e865.64K\u3002\n\n\u8fd9\u662f\u4e00\u9053\u4e27\u5fc3\u75c5\u72c2\u7684**\u4e09\u5408\u4e00**\u6bd2\u7624\u9898\u2026\u2026\n\n~~\u66b4\u529bbfs\u5c31\u4e0d\u8bb2\u4e86~~\n\n\u8fd9\u9898\u7684\u90e8\u5206\u5206\u90fd\u662f\u5047\u7684,\u53ea\u662f\u6765\u5e2e\u52a9\u5199\u5230\u4e00\u534a\u7684\u5927\u4f6c\u68c0\u9a8c\u4ee3\u7801\u662f\u5426\u6709\u9505\u3002\n\n\u6240\u4ee5\u5c31\u76f4\u63a5\u8bb2\u6b63\u89e3\u5427!\n\n**\u7b2c\u4e00\u5f0f:** \u5f02\u6216\u56fe\u6700\u5c0f\u751f\u6210\u6811\n\n\u60f3\u5fc5\u5927\u5bb6\u770b\u5b8c\u9898\u76ee\u5c31\u60f3\u5230\u91cd\u6784\u6811\u4e86\u5427,\u95ee\u9898\u5728\u4e8e\u5927\u5bb6\u5e73\u65f6\u90fd\u662f\u7528\u514b\u9c81\u65af\u5361\u5c14\u6765\u6c42\u89e3\u91cd\u6784\u6811,\u8fd9\u9898\u7ed5\u4e86\u4e2a\u5f2f\u3002\n\n(\u5982\u679c\u60a8\u7528\u5f02\u6216\u7cbd\u5b50\u6765\u5b9e\u73b0\u514b\u9c81\u65af\u5361\u5c14,\u606d\u559c\u60a8\u88ab\u968f\u673a\u6570\u636e\u5361\u5230\u4e86$O(n^2)$\u2026\u2026)\n\n\u73b0\u5728\u8981\u5148\u6c42\u51fa\u8fd9\u4e2a\u4e0d\u77e5\u53eb\u5565\u7684\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811,\u518d\u5f04\u51fa\u91cd\u6784\u6811\u3002\n\n\u770b\u5230$xor$\u5c31\u60f3\u5230\u8d2a\u5fc3?\n\n\u9996\u5148\u628a\u70b9\u6309\u7167\u6743\u503c\u585e\u8fdb01Trie\u91cc\u9762\u3002\n\n\u8003\u8651\u5982\u4e0b\u56fe:\n\n```cpp\n\n    *\n  0/ \\1\n  /   \\\n l     r\n...   ...\n\n```\n\n\u73b0\u5728\u5de6\u5b50\u6811\u4e2d\u8fd8\u6709\u67d0\u4e24\u4e2a\u8282\u70b9\u6ca1\u8054\u901a,\u4f60\u9009\u62e9:\n\n1.\u8fde\u5411\u53f3\u5b50\u6811,\u53cd\u6b63\u53f3\u5b50\u6811\u540e\u6765\u4e5f\u8981\u4e0e\u5de6\u5b50\u6811\u8054\u901a\u7684\u3002\n\n2.\u8fde\u5411\u5de6\u5b50\u6811\u3002\n\n\u8fde\u5411\u5de6\u5b50\u6811\u4e00\u5b9a\u8981\u6bd4\u8fde\u5411\u53f3\u5b50\u6811\u4f18,\u56e0\u4e3a\u5de6\u53f3\u5b50\u6811\u6709\u4e00\u4e2a\u5f88\u9ad8\u7684\u4f4d\u4e0d\u540c,\u5f02\u6216\u8d77\u6765\u5f88\u5403\u4e8f\u3002\n\n\u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u7ed3\u8bba:\u5b50\u6811\u5185\u80fd\u8fde\u8fb9\u5c3d\u91cf\u8fde\u8fb9,\u4e5f\u5c31\u662f\u8bf4\u8def\u8fc7\u4e0a\u8ff0\u56fe\u7684\u65f6\u5019\u53ea\u9700\u8981\u628a\u5de6\u53f3\u5b50\u6811\u95f4\u8fde\u4e00\u6761\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fb9\u5c31\u597d\u4e86,\u8fd9\u53ef\u4ee5\u4e00\u8fb9dfs\u4e00\u8fb9\u505a\u3002\n\n\u5982\u4f55\u627e\u5230\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u6761\u8fb9?\u6211\u4eec\u628asize\u5c0f\u7684\u5b50\u6811\u91cc\u7684\u70b9\u90fd\u53d6\u51fa\u6765,\u4e00\u4e2a\u4e2a\u8be2\u95ee\u5bf9\u9762\u7684xor\u6700\u5c0f\u503c\u5c31\u597d\u4e86(\u542f\u53d1\u5f0f\u5408\u5e76),\u590d\u6742\u5ea6$O(nlog^2n)$\u3002\n\n**P.S:** \u5982\u679c\u9047\u5230\u6743\u503c\u76f8\u540c\u7684\u70b9\u76f4\u63a5\u8fde\u4e0a\u5c31\u597d,\u53cd\u6b63\u4ee3\u4ef7\u4e3a0,\u53ef\u4ee5\u7701\u53bb\u5f88\u591a\u7ec6\u8282\u3002\n\n**\u7b2c\u4e8c\u5f0f:** \u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\n\n\u89c1[P4768 [NOI2018]\u5f52\u7a0b](https://www.luogu.org/problemnew/show/P4768)\n\n\u770b\u5230\u6ee1\u8db3$>=$\u7684\u8fb9\u90fd\u53ef\u4ee5\u8d70,\u6211\u4eec\u6beb\u4e0d\u72b9\u8c6b\u641e\u51fa\u91cd\u6784\u6811\u3002\n\n(\u6ce8\u610f\u8981\u628a\u8fb9\u6392\u5e8f)\n\n\u5bf9\u4e09\u5f20\u6027\u80fd\u56fe\u5982\u6cd5\u70ae\u5236\u5c31\u53ef\u4ee5\u5f04\u51fa\u4e09\u9897\u91cd\u6784\u6811\u4e86\u3002\n\n**\u7b2c\u4e09\u5f0f:** \u5dee\u5206\u83ab\u961f\n\n\u7c7b\u4f3c\u7684\u4e00\u9053\u9898\u76ee[P5268 [SNOI2017 / THUWC2019]\u4e00\u4e2a\u7b80\u5355\u7684\u8be2\u95ee](https://www.luogu.org/problemnew/show/P5268)\n\n\u6211\u4eec\u5f97\u5230\u4e86\u4e09\u68f5\u6811\u3002\n\n\u6211\u4eec\u6309\u7167\u91cd\u6784\u6811\u7684\u5957\u8def\u6c42\u51fa\u4e00\u9897\u5b50\u6811,\u90a3\u4e48\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u662f\u53ef\u8fbe\u7684\u3002\n\n\u6211\u4eec\u628a\u4e09\u68f5**\u5b50\u6811**\u6c42\u4e2a\u4ea4\u5373\u53ef\u3002\n\n(\u5982\u679c\u662f\u4e24\u68f5\u6811\u8c8c\u4f3c\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4/\u4e3b\u5e2d\u6811\u5c31\u597d)\n\n\u6211\u4eec\u628a\u4e09\u68f5\u6811\u5f04\u51fa\u6b27\u62c9\u5e8f(**\u4e09\u68f5\u6811\u90fd\u53d8\u6210\u5e8f\u5217\u4e86**),\u524d\u4e24\u68f5\u6811\u7684\u7f16\u53f7\u6839\u636e\u7b2c\u4e09\u68f5\u6811\u7684\u6b27\u62c9\u5e8f\u6620\u5c04\u3002\n\n\u7136\u540e\u628a\u524d\u4e24\u68f5\u6811\u7684\u4e24\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u6620\u5c04\u7ed3\u679c++,\u548c\u4e3a2\u7684\u5c31\u662f\u524d\u4e24\u68f5\u6811\u7684\u4ea4\u3002\n\n\u7136\u540e\u5728\u7b2c\u4e09\u68f5\u6811\u4e0a\u533a\u95f4\u7edf\u8ba12\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u8fd9\u662f\u53ef\u4ee5\u83ab\u961f+\u5206\u5757\u7ef4\u62a4\u7684\u3002\n\n\u7b2c\u4e00\u8bfe\u5b50\u6811$[l1,r1]$,\u7b2c\u4e8c\u68f5$[l2,r2]$,\u8c8c\u4f3c\u8981\u7ef4\u62a44\u4e2a\u6307\u9488\u3002\n\n\u8fd9\u662f\u6ee1\u8db3\u5dee\u5206\u7684,\u6240\u4ee5(\u4e8c\u7ef4)\u5dee\u5206\u4ee5\u4e0b\u53d8\u62104\u4e2a\u8be2\u95ee,\u5c31\u53ea\u7528\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\u4e86\u3002\n\n\u590d\u6742\u5ea6$O(n\\sqrt{n})$,\u7531\u4e8e\u5f02\u6216\u56fe\u7684\u6bd2\u7624\u6027\u8d28\u6839\u672c\u9020\u4e0d\u51fa\u975e\u968f\u673a\u7684\u6570\u636e,\u867d\u7136\u6709\u5206\u5757\u5e38\u6570,\u4f46\u8fd8\u662f\u8dd1\u5f97\u98de\u5feb\u3002\n\n\u5927\u5e38\u6570(log\u90e8\u5206)\u6807\u7a0b:\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<ctime>\n#define MaxN 40500\n#define MaxT 80500\nusing namespace std;\nnamespace IO\n{\n    const unsigned int Buffsize=1<<15;\n    static char Ch[Buffsize],*S=Ch,*T=Ch;\n    inline char getc()\n    {\n        return((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n    }\n    inline int read()\n    {\n      int X=0;char ch=0,minus=0;\n      while(ch<48||ch>57)ch=getc(),minus|=ch=='-';\n      while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getc();\n      return minus ? -X:X;\n    }\n\n}using namespace IO;\n\nint n,q;\nstruct Line\n{int f,t,c;};\nbool cmpLine(Line A,Line B)\n{return A.c<B.c;}\nstruct BCJ\n{\n  int f[MaxT];\n  void Init()\n  {for (int i=1;i<=n+n;i++)f[i]=i;}\n  int findf(int x)\n  {return f[x]==x ? x :f[x]=findf(f[x]);}\n  bool check(int x,int y)\n  {\n    x=findf(x);y=findf(y);\n    return x==y;\n  }\n  inline void marge(int x,int y)\n  {f[x]=y;}\n};\nstruct KlTree\n{\n  Line l[MaxN];BCJ S;\n  int in[MaxT],out[MaxT],id[MaxT],tim,tot;\n  int f[MaxT][17],cc[MaxT];\n  vector<int> g[MaxT];\n  void dfs(int num)\n  {\n    in[num]=tim;\n    if (num<=n)id[num]=tim++;\n    for (int i=0,v;i<g[num].size();i++)\n     if (!in[v=g[num][i]])\n      dfs(v);\n    out[num]=tim-1;\n  }\n  void build()\n  {\n    S.Init();tot=n;tim=1;\n    sort(l+1,l+n,cmpLine);\n    for (int i=1,u,v;i<n;i++)\n     if (!S.check(u=l[i].f,v=l[i].t)){\n       cc[++tot]=l[i].c;\n       S.marge(u=S.findf(u),tot);\n       S.marge(v=S.findf(v),tot);\n       f[u][0]=f[v][0]=tot;\n       g[u].push_back(tot);\n       g[v].push_back(tot);\n       g[tot].push_back(u);\n       g[tot].push_back(v);\n     }\n    dfs(tot);\n    for (int j=1;j<16;j++)\n     for (int i=1;i<=n+n;i++)\n      f[i][j]=f[f[i][j-1]][j-1];\n    cc[0]=1<<30;\n  }\n  inline Line up(int x,int lim)\n  {\n    int k=16;\n    while(k--)\n      while(cc[f[x][k]]<=lim)\n        x=f[x][k];\n    return (Line){in[x],out[x]};\n  }\n}ka,kb,kc;\nstruct Trie_Node\n{int l,r,c;};\nint aaa;\nstruct Trie_Graph\n{\n  Trie_Node t[MaxN*29];\n  Line *l;\n  int tn,tot;\n  void clear(Line *arr)\n  {\n    memset(t,0,sizeof(Trie_Node)*(tn+5));\n    tn=1;l=arr;tot=0;\n  }\n  void add(int num,int x,int pos)\n  {\n    for (int i=1<<27;i;i>>=1){\n      aaa++;\n      t[num].c++;\n      if (x&i){\n      \tif (!t[num].r)t[num].r=++tn;\n    \t  num=t[num].r;\n    \t}else {\n    \t  if (!t[num].l)t[num].l=++tn;\n    \t  num=t[num].l;\n    \t}\n    }\n    if (t[num].c)\n      l[++tot]=(Line){t[num].c,pos,0};\n    else t[num].c=pos;\n  }\n  void query(int num,int x,int d,int from)\n  {\n    if (d==-1){\n      tl=(Line){from,t[num].c,0};\n      return ;\n    }int ansx=0;\n    for (int i=1<<d;i;i>>=1){\n      if (x&i)if (t[num].r){num=t[num].r;ansx|=i;}\n        else num=t[num].l;\n      else if (!t[num].l){num=t[num].r;ansx|=i;}\n        else num=t[num].l;\n      }\n    x^=ansx;\n    if (x<minn){\n      minn=x;\n      tl=(Line){from,t[num].c,x};\n    }\n  }\n  int minn;\n  Line tl;\n  void tmarge(int num,int qnum,int d,int val,int sd)\n  {\n    if (d==-1)query(qnum,val,sd,t[num].c);\n    if (t[num].l)tmarge(t[num].l,qnum,d-1,val,sd);\n    if (t[num].r)tmarge(t[num].r,qnum,d-1,val|(1<<d),sd);\n  }\n  void dfs(int num,int d)\n  {\n    if (d==-1)return ;\n    if (t[num].l)dfs(t[num].l,d-1);\n    if (t[num].r)dfs(t[num].r,d-1);\n    if (!t[num].l||!t[num].r)return ;\n    minn=1<<30;\n    if (t[t[num].l].c<t[t[num].r].c)\n      tmarge(t[num].l,t[num].r,d-1,0,d-1);\n    else tmarge(t[num].r,t[num].l,d-1,0,d-1);\n    tl.c+=1<<d;\n    l[++tot]=tl;\n  }\n}t;\nint sav[MaxT];\nvoid buildTree()\n{\n  t.clear(ka.l);\n  for (int i=1;i<=n;i++)t.add(1,read(),i);\n  t.dfs(1,27);\n  t.clear(kb.l);\n  for (int i=1;i<=n;i++)t.add(1,read(),i);\n  t.dfs(1,27);\n  t.clear(kc.l);\n  for (int i=1;i<=n;i++)t.add(1,read(),i);\n  t.dfs(1,27);\n  ka.build();kb.build();kc.build();\n  for (int i=1;i<=n;i++)sav[ka.id[i]]=i;\n  for (int i=1;i<=n;i++)ka.id[i]=kc.id[sav[i]];\n  for (int i=1;i<=n;i++)sav[kb.id[i]]=i;\n  for (int i=1;i<=n;i++)kb.id[i]=kc.id[sav[i]];\n}\nint ans[MaxT];\nstruct Data\n{int p1,p2,l,r,pos;}\nb[MaxT<<2];\nint tn,BS;\nbool cmpData(Data A,Data B)\n{return A.p1/BS==B.p1/BS ? A.p2<B.p2 : A.p1<B.p1;}\nint o[MaxN],bo[MaxN],nBS;\ninline void add(int pos)\n{\n  o[pos]++;\n  bo[(pos-1)/nBS]+=o[pos]==2;\n}\ninline void del(int pos)\n{\n  bo[(pos-1)/nBS]-=o[pos]==2;\n  o[pos]--;\n}\nvoid moQueue()\n{\n  while(BS*BS<=q)BS++;\n  while(nBS*nBS<=n)nBS++;\n  BS=n/BS+10;nBS+=10;\n  sort(b+1,b+tn+1,cmpData);\n  int p1=0,p2=0,ll,rr,sum;\n  for (int i=1;i<=tn;i++){\n    while(b[i].p1<p1)del(ka.id[p1--]);\n    while(p1<b[i].p1)add(ka.id[++p1]);\n    while(b[i].p2<p2)del(kb.id[p2--]);\n    while(p2<b[i].p2)add(kb.id[++p2]);\n    sum=0;\n    if (b[i].r-b[i].l<=2*nBS){\n      for (int j=b[i].l;j<=b[i].r;j++)if (o[j]==2)sum++;\n    }else {\n      ll=(b[i].l-1)/nBS+1;rr=(b[i].r-1)/nBS;\n      for (int j=b[i].l;j<=ll*nBS;j++)if (o[j]==2)sum++;\n      for (int j=rr*nBS+1;j<=b[i].r;j++)if (o[j]==2)sum++;\n      for (int j=ll;j<rr;j++)sum+=bo[j];\n    }if (b[i].pos<0)ans[-b[i].pos]-=sum;\n    else ans[b[i].pos]+=sum;\n  }\n}\nint main()\n{\n  n=read();q=read();\n  buildTree();\n  Line la,lb,lc;\n  for (int i=1,A,B,C,u;i<=q;i++){\n    A=read();u=read(); la=ka.up(u,A);\n    B=read();u=read(); lb=kb.up(u,B);\n    C=read();u=read(); lc=kc.up(u,C);\n    la.f--;lb.f--;\n    b[++tn]=(Data){la.f,lb.f,lc.f,lc.t,i};\n    b[++tn]=(Data){la.t,lb.f,lc.f,lc.t,-i};\n    b[++tn]=(Data){la.f,lb.t,lc.f,lc.t,-i};\n    b[++tn]=(Data){la.t,lb.t,lc.f,lc.t,i};\n  }moQueue();\n  for (int i=1;i<=q;i++)\n    printf(\"%d\\n\",ans[i]);\n  return 0;\n}\n```\n\n## \u5176\u4ed6\u89e3\u6cd5\n\n@wuzhaoxin \u5927\u4f6c\u5229\u7528bitset\u6765\u4ee3\u66ff\u7b2c\u4e09\u5f0f\u4e2d\u7684\u83ab\u961f,\u6210\u529f\u5207\u9898\u3002\n\n\u7136\u800c\u76f4\u63a5\u5f00$n$\u4e2a\u5b8c\u6574\u7684bitset\u7a7a\u95f4\u4f1a\u70b8,\u8003\u8651\u628a\u8be2\u95ee\u5b58\u4e0b\u6765,\u5206\u6bb5\u7528bitset,\u5185\u5b58/8,\u5361\u7740\u8fc7\u53bb\u4e86\u3002\n\n\u5177\u4f53\u7ec6\u8282\u9759\u5f85\u5927\u4f6c\u53d1\u9898\u89e3\u2026\u2026",
        "postTime": 1570012189,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5573 \u3010[CmdOI2019]\u661f\u9645kfc\u7bee\u7403\u8d5b\u3011"
    }
]