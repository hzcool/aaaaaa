[
    {
        "content": "\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5982\u679c\u65b0\u52a0\u7684\u7ebf\u6bb5\u5728\u6574\u4e2a\u533a\u95f4\u5747\u66f4\u4f18\uff0c\u5219\u66ff\u6362\u539f\u6709\u7ebf\u6bb5\uff1b\u5982\u679c\u5728\u6574\u4e2a\u533a\u95f4\u66f4\u52a3\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\uff1b\n\n\u53cd\u4e4b\u5224\u65ad\u5f53\u524d\u7ebf\u6bb5\u548c\u5df2\u6709\u7ebf\u6bb5\u5728\u533a\u95f4\u91cd\u70b9\u8c01\u66f4\u4f18\uff0c\u7559\u4e0b\u66f4\u4f18\u7684\uff0c\u628a\u53e6\u4e00\u6761\u5728\u5176\u66f4\u9ad8\u7684\u4e00\u8fb9\u9012\u5f52\u66f4\u65b0\u3002\n\n\u8fd9\u6837\u4fee\u6539\u590d\u6742\u5ea6\u662fnlog^2n\u7684\u3002\u67e5\u8be2\u65f6\u76f4\u63a5\u66b4\u529b\u628a\u6839\u5230\u671f\u671b\u4f4d\u7f6e\u7684\u8def\u5f84\u5168\u90e8\u67e5\u8be2\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6570\u636e\u5b58\u5728x0=x1\u4e14y0!=y1\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u8bf4\u7ad6\u7740\u4e00\u6761\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528max(y0,y1)\u53bb\u66f4\u65b0x0\u5355\u70b9\u7684\u7b54\u6848\u3002\n\n\u4e0d\u8981\u7528assert\u4ec0\u4e48\u7684\u53bb\u6d4b\u8bd5\u6570\u636e\u4e86\uff0c\u6211\u8bd5\u8fc7\u4e86\uff0c\u786e\u5b9e\u6709\u4e0a\u9762\u60c5\u51b5\u3002(get\u4e00\u4e2aRE\u4e00\u4e2aWA\uff0c\u672c\u53ef\u4ee51A\u7684QAQ)\n\n\u6700\u540e\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#define lli long long int\n#define debug cout\nusing namespace std;\nconst int maxn=4e4+1e2,maxm=1e5+1e2;\nconst double eps=1e-8;\n\nint l[maxn<<3],r[maxn<<3],lson[maxn<<3],rson[maxn<<3],dat[maxn<<3],cnt;\ndouble k[maxm],b[maxm];\n\ninline int dcmp(double x) {\n    return fabs(x) <= eps ? 0 : x < 0 ? -1 : 1;\n}\ninline void build(int pos,int ll,int rr) {\n    l[pos] = ll , r[pos] = rr;\n    if( ll == rr ) return;\n    const int mid = ( ll + rr ) >> 1;\n    build(lson[pos]=++cnt,ll,mid);\n    build(rson[pos]=++cnt,mid+1,rr);\n}\ninline double f(int x,int p) {\n    return k[x] * p + b[x];\n}\ninline bool judge(int x,int y,int p) {\n    double fx = f(x,p) , fy = f(y,p);\n    return dcmp(fx-fy) ? fx < fy : x > y;\n}\ninline void update(int pos,int ll,int rr,int nw) {\n    if( r[pos] < ll || rr < l[pos] ) return;\n    if( ll <= l[pos] && r[pos] <= rr ) {\n        if( judge(nw,dat[pos],l[pos]) && judge(nw,dat[pos],r[pos]) ) return; // completely useless\n        if( judge(dat[pos],nw,l[pos]) && judge(dat[pos],nw,r[pos]) ) { // completely better\n            dat[pos] = nw;\n            return;\n        }\n        const int mid = ( l[pos] + r[pos] ) >> 1;\n        if( judge(dat[pos],nw,mid) ) swap(dat[pos],nw); // keep dat[pos] the better choice for mid point\n        if( judge(dat[pos],nw,l[pos]) ) update(lson[pos],l[pos],r[pos],nw); // nw maybe usefull in lson\n        else update(rson[pos],l[pos],r[pos],nw);\n        return; // you will get TLE without this return\n    }\n    update(lson[pos],ll,rr,nw) , update(rson[pos],ll,rr,nw);\n}\ninline int query(int pos,int x) {\n    if( x < l[pos] || r[pos] < x ) return 0;\n    if( l[pos] == r[pos] && l[pos] == x ) return dat[pos];\n    const int mid = ( l[pos] + r[pos] ) >> 1;\n    int ret = x <= mid ? query(lson[pos],x) : query(rson[pos],x);\n    if( judge(ret,dat[pos],x) ) ret = dat[pos];\n    return ret;\n}\n\nint main() {\n    static int n,lastans=-1,x0,y0,x1,y1,p,cc;\n    build(cnt=1,1,40000);\n    scanf(\"%d\",&n);\n    for(int i=1,ope;i<=n;i++) {\n        scanf(\"%d\",&ope);\n        if( ope ) {\n            scanf(\"%d%d%d%d\",&x0,&y0,&x1,&y1) , ++cc;\n            x0 = ( x0 + lastans + 39989 ) % 39989 + 1 , y0 = ( (lli) y0 + lastans + 1000000000 ) % 1000000000 + 1 ,\n            x1 = ( x1 + lastans + 39989 ) % 39989 + 1 , y1 = ( (lli) y1 + lastans + 1000000000 ) % 1000000000 + 1 ;\n            if( x1 < x0 ) swap( x1 , x0 ) , swap( y1 , y0 );\n            if( x0 == x1 ) k[cc] = 0 , b[cc] = max( y0 , y1 );\n            else k[cc] = (double)(y1-y0)/(x1-x0) , b[cc] = y1 - k[cc] * x1;\n            update(1,x0,x1,cc);\n        } else {\n            scanf(\"%d\",&p);\n            p = ( p + lastans + 39989 ) % 39989 + 1;\n            lastans = query(1,p);\n            printf(\"%d\\n\",lastans);\n            --lastans;\n        }\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1517917206,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4097 \u3010[HEOI2013]Segment \u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\uff1a\n\n\u8981\u6c42\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n 1.\u5728\u5e73\u9762\u4e0a\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\u8bb0\u7b2c i \u6761\u88ab\u63d2\u5165\u7684\u7ebf\u6bb5\u7684\u6807\u53f7\u4e3a i\n  \n 2.\u7ed9\u5b9a\u4e00\u4e2a\u6570 k,\u8be2\u95ee\u4e0e\u76f4\u7ebf x = k \u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e2d\uff0c\u4ea4\u70b9\u6700\u9760\u4e0a\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\u3002\n \n **\u82e5\u6709\u591a\u6761\u7ebf\u6bb5\u7b26\u5408\u8981\u6c42\uff0c\u8f93\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7**\n\n\uff08\u7701\u7565\u8f93\u5165\u4ee5\u53ca\u5728\u7ebf\u64cd\u4f5c\u7684\u8981\u6c42\uff09\n\n## \u5206\u6790\uff1a\n\n\u660e\u663e\u7684\u7ebf\u6bb5\u6811\u7279\u5f81\uff1a\n\n1.\u6709\u56fa\u5b9a\u7684 \u533a\u95f4\u957f\u5ea6\uff0c\uff08<=39989\uff09\n\n2.\u63d2\u5165\u5143\u7d20\u652f\u6301\u5408\u5e76\uff0c\uff08\u4e00\u4e2a\u7ebf\u6bb5\u53ef\u4ee5\u62c6\u6210\u4e24\u6bb5\u7ebf\u6bb5\uff09\n\n\u6240\u4ee5\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u6765\u505a\u8fd9\u9053\u9898\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4ec0\u4e48\u5143\u7d20\u5f00\u59cb\u4e0d\u592a\u597d\u60f3\u3002\n\n\u53d1\u73b0\u8981\u6c42\u4e00\u4e2a\u4ea4\u70b9\u6700\u9760\u4e0a\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u7c7b\u4f3c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u533a\u95f4\u5185\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\uff08\u8fd9\u4e2a\u7ebf\u6bb5\u4e24\u7aef\u5750\u6807\u5c31\u662fl\u548cr\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6070\u597d\u653e\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\uff09\uff0c\u4fdd\u8bc1\u8fd9\u4e2a\u7ebf\u6bb5\u548cx=mid\u8fd9\u6761\u7ad6\u76f4\u7684\u7ebf\u7684\u4ea4\u70b9\u7684\u7eb5\u5750\u6807\u662f\u6709\u53f2\u4ee5\u6765\u6700\u5927\u7684\u3002\n\n\u6211\u4eec\u5728\u533a\u95f4\u91cc\u8bb0\u5f55\u4e0b\u6765\u8fd9\u4e2a\u7ebf\u6bb5\u7684\u6240\u5c5e\u7f16\u53f7\uff08\u6ce8\u610f\u4e0d\u662f\u7ebf\u6bb5\u7f16\u53f7\uff0c\u56e0\u4e3a\u771f\u5b9e\u60c5\u51b5\u7684\u4e00\u6761\u7ebf\u6bb5\u53ef\u80fd\u4f1a\u88ab\u5288\u6210\u8bb8\u591a\u6bb5\uff0c\u4f46\u662f\u5b83\u4eec\u672c\u8d28\u4e0a\u8fd8\u662f\u540c\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u5728\u8d21\u732e\u7b54\u6848\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u8981\u8f93\u51fa\u5b83\u4eec\u6240\u4ee3\u8868\u7684\u771f\u5b9e\u7ebf\u6bb5\u7684\u7f16\u53f7\u7684\uff09\u3002\n\n\u540c\u65f6\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a\u7ebf\u6bb5\u7684x1,x2,y1,y2\u4ee5\u53ca\u6240\u5c5e\u7f16\u53f7hao\u3002\n\n\u6ce8\u610f\u7531\u4e8e\u8981\u5288\u65ad\uff0c\u7eb5\u5750\u6807\u4e0d\u4e00\u5b9a\u662f\u6574\u6570\uff0c\u6240\u4ee5y1\uff0cy2\u90fd\u662fdouble\u7c7b\u578b\u7684\u3002\n\n```cpp\nstruct duan{\n\tint x1,x2;\n\tdouble y1,y2;\n\tint hao;\n}line[N*20];\nstruct node{\n\tint id;\n}t[4*(mod1+10)];\n```\n\n\u53d1\u73b0\u4e0d\u9700\u8981build,pushup,pushdown,\u4f46\u662f\u3002\u3002\u3002\n\n\u6211\u4eec\u4e0d\u80fd\u5c06\u533a\u95f4\u539f\u6709\u7ebf\u6bb5\u56e0\u4e3a\u4e2d\u70b9\u5904\u7684\u503c\u5c0f\u4e86\u800c\u201c\u4e00\n\u68d2\u5b50\u6253\u6b7b\u201d\uff0c\u5b83\u4e2d\u70b9\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u7684\u503c\u53ef\u80fd\u8fd8\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n## \u6240\u4ee5\u6700\u5173\u952e\u7684\u662fadd\u64cd\u4f5c\u3002\n\n1.\u7279\u5224l==r\n\n\u5df2\u7ecf\u5230\u4e86\u4e00\u4e2a\u70b9\u4e0a\u3002\n\n\u5982\u679c\u8be5\u70b9\u4e4b\u524d\u6ca1\u6709\u7ef4\u62a4\u7ebf\u6bb5\uff0c\u76f4\u63a5\u7ef4\u62a4\u73b0\u5728\u7684\u7ebf\u6bb5\u3002\n\n\u5982\u679c\u6709\uff0c\u9009\u62e9\u7eb5\u5750\u6807\u9760\u4e0a\u7684\u76f4\u7ebf\uff08\u70b9\uff09\uff0c\u7eb5\u5750\u6807\u76f8\u540c\uff0c\u9009\u62e9\u7f16\u53f7\u8f83\u5c0f\u7684\u3002\n\n2.\u5982\u679c\u6ca1\u6709\u6070\u597d\u653e\u5728\u533a\u95f4\u91cc\u3002\n\n\u5982\u679c\u4e0d\u8fc7mid\uff0c\u6839\u636e\u4e0emid\u5173\u7cfb\u5de6\u53f3\u67e5\u627e\u3002\n\n\u5982\u679c\u8fc7mid\uff0c\u5288\u4e24\u534a\u5206\u522b\u67e5\u627e\u3002\n\n3.\u5982\u679c\u627e\u5230\u4e86\u6070\u597d\u7684\u533a\u95f4\n\n\u5982\u679c\u8be5\u533a\u95f4\u6ca1\u6709\u7ef4\u62a4\u7ebf\u6bb5\uff0c\u7ef4\u62a4\u8be5\u7ebf\u6bb5\u3002\n\n\u5982\u679c\u6709\uff0c\n\n\u2460\u5982\u679c\u4e2d\u70b9\u5904\u65b0\u7684\u4f18\uff0c\u7559\u4e0b\u65b0\u7684\uff0c\u628a\u65e7\u7684\u4e2d\uff0c\u7a0d\u5fae\u5927\u7684\u4e00\u534a\u7559\u4e0b\uff08\u5168\u52a3\u5219\u6dd8\u6c70\uff09\uff0c\u4e0b\u653e\u5230\u5bf9\u5e94\u7684\u5b50\u533a\u95f4\u3002\n\n\u2461\u5982\u679c\u4e2d\u70b9\u5904\u503c\u76f8\u540c\u3002\u4e00\u822c\u60c5\u51b5\u9009\u62e9\u65b0\u7684\u5288\u65ad\u7684\u4e0b\u653e\uff08\u7701\u7684\u5efa\u7ebf\u6bb5\uff09\u3002\u4f46\u662f\u5f53\u65b0\u7684\u7f16\u53f7\u8f83\u5c0f\uff0c\u5e76\u4e14\u65b0\u7684\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u7684\u7eb5\u5750\u6807\u5927\u4e8e\u7b49\u4e8e\u65e7\u7684\uff0c\u8fd9\u65f6\u5c31\u8981\u5288\u65ad\u65e7\u7684\uff0c\u5c06\u65e7\u7684\u53f3\u534a\u90e8\u5206\u4e0b\u653e\u3002\uff08\u4f7f\u5f97mid\u5904\u4e00\u5b9a\u53d6\u5f97\u662f\u65b0\u7684\u7ebf\u6bb5\uff0c\u4e5f\u5c31\u662f\u7f16\u53f7\u8f83\u5c0f\u7684\uff09\n\n\u2462\u5982\u679c\u4e2d\u70b9\u5904\u65e7\u7684\u4f18\uff0c\u540c\u7406\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6cbf\u7740\u4e00\u6761logn\u7684\u8def\u5f84\u67e5\u8be2\uff0c\u65f6\u523b\u66f4\u65b0\u6700\u5927\u503c\u548cans\u5373\u53ef\u3002\u6ca1\u6709\u4ec0\u4e48\u53ef\u591a\u8bf4\u7684\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\uff08\u5199\u7684\u5f88\u4e11\uff0c\u4f46\u662f\u6bd4\u8f83\u5bb9\u6613\u770b\u61c2\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+10;\nconst int mod1=39989;\nconst int mod2=1e9;\nint n;\nint has;\nint la;\nint cntpool,cntdel;\nint del[N];\nstruct duan{\n\tint x1,x2;\n\tdouble y1,y2;\n\tint hao;\n}line[N*20];\n\ninline int newnode(int x1,int x2,double y1,double y2)\n{\n\tint r=cntdel?del[cntdel--]:++cntpool;\n\tmemset(line+r,0,sizeof (duan));\n\tline[r].x1=x1,line[r].x2=x2,line[r].y1=y1,line[r].y2=y2;\n\treturn r;\n}//\u53d6\u65b0\u8282\u70b9\nvoid dele(int x)\n{\n\tdel[++cntdel]=x;\n}//\u5220\u9664\u8282\u70b9\uff0c\u56de\u6536\u7a7a\u95f4\n\nstruct node{\n\tint id;\n}t[4*(mod1+10)];//\u6811\ndouble lv(int x1,int x2,double y1,double y2)\n{\n\treturn (double)(y1-y2)/(1.0*x1-1.0*x2);\n}//\u659c\u7387\nvoid add(int x,int l,int r,int x1,int x2,double y1,double y2,int hh)\n{\n\tif(l==r)\n\t{\n\t\tif(!t[x].id)\n\t\t{\n\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\tline[tt].hao=hh;\n\t\t\tt[x].id=tt;\n\t\t}\n\t\telse{\n\t\t\tdouble mx1=max(y1,y2);\n\t\t\tdouble mx2=max(line[t[x].id].y1,line[t[x].id].y2);\n\t\t\tif(mx1>mx2)\n\t\t\t{\n\t\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\t\tline[tt].hao=hh;\n\t\t\t\tdele(t[x].id);\n\t\t\t\tt[x].id=tt;\n\t\t\t}\n\t\t\telse if(mx1==mx2)\n\t\t\t{\n\t\t\t\tif(hh<line[t[x].id].hao)\n\t\t\t\t{\n\t\t\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\t\t\tline[tt].hao=hh;\n\t\t\t\t\tdele(t[x].id);\n\t\t\t\t\tt[x].id=tt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}//l==r\u60c5\u51b5\n\t\n\tint mid=(l+r)>>1;\n\tif(x1!=l||x2!=r)\n\t{\n\t\tif(x2<=mid) add(x<<1,l,mid,x1,x2,y1,y2,hh);\n\t\telse if(x1>mid) add(x<<1|1,mid+1,r,x1,x2,y1,y2,hh);\n\t\telse{\n\t\t\tdouble k=lv(x1,x2,y1,y2);\n\t\t\tdouble d=y1+((double)mid-x1)*k;\n\t\t\tadd(x<<1,l,mid,x1,mid,y1,d,hh);\n\t\t\tadd(x<<1|1,mid+1,r,mid+1,x2,d+k,y2,hh);\n\t\t}\n\t}//find \n\telse{\n\t\tif(!t[x].id)\n\t\t{\n\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\tline[tt].hao=hh;\n\t\t\tt[x].id=tt;\n\t\t}\n\t\telse{\n\t\t\tint p1=line[t[x].id].x1,p2=line[t[x].id].x2;\n\t\t\tdouble q1=line[t[x].id].y1,q2=line[t[x].id].y2;\n\t\t\tint oldh=line[t[x].id].hao;\n\t\n\t\t\tdouble k1=lv(x1,x2,y1,y2);\n\t\t\tdouble k2=lv(p1,p2,q1,q2);\n\t\t\tdouble d1=y1+1.0*(mid-x1)*k1;//new d\u5728\u4e2d\u70b9\u7684\u7eb5\u5750\u6807\n\t\t\tdouble d2=q1+1.0*(mid-p1)*k2;//old d\n\t\t\tif(d1>d2)//new > old\n\t\t\t{\n\t\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\t\tline[tt].hao=hh;\n\t\t\t\tdele(t[x].id);\n\t\t\t\tt[x].id=tt;\n\t\t\t\tif(q1<y1&&q2<y2) return;//warning!!\n\t\t\t\telse if(q1>=y1)\n\t\t\t\t{\n\t\t\t\t\tadd(x<<1,l,mid,p1,mid,q1,d2,oldh);\n\t\t\t\t}\n\t\t\t\telse if(q2>=y2)\n\t\t\t\t{\n\t\t\t\t\tadd(x<<1|1,mid+1,r,mid+1,p2,d2+k2,q2,oldh);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(d1==d2)//new = old\n\t\t\t{\n\t\t\t\tif(q1<y1)\n\t\t\t\t{\n\t\t\t\t\tadd(x<<1,l,mid,x1,mid,y1,d1,hh);\n\t\t\t\t}\n\t\t\t\telse if(q2<=y2)\n\t\t\t\t{\n\t\t\t\t\tif(hh<oldh)//move old\n\t\t\t\t\t{\n\t\t\t\t\t\tint tt=newnode(x1,x2,y1,y2);\n\t\t\t\t\t\tline[tt].hao=hh;\n\t\t\t\t\t\tdele(t[x].id);\n\t\t\t\t\t\tt[x].id=tt;\n\t\t\t\t\t\tadd(x<<1,l,mid,p1,mid,q1,d2,oldh);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tadd(x<<1|1,mid+1,r,mid+1,x2,d1+k1,y2,hh);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(d1<d2)//new < old\n\t\t\t{\n\t\t\t\tif(y1<q1&&y2<q2) return;//warning!!\n\t\t\t\telse if(y1>=q1)\n\t\t\t\t{\n\t\t\t\t\tadd(x<<1,l,mid,x1,mid,y1,d1,hh);\n\t\t\t\t}\n\t\t\t\telse if(y2>=q2)\n\t\t\t\t{\n\t\t\t\t\tadd(x<<1|1,mid+1,r,mid+1,x2,d1+k1,y2,hh);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}//update\n}\n\nint ans;\ndouble zui;\nvoid query(int x,int l,int r,int to)\n{\n\tif(l==r) {\n\t\tif(!t[x].id) return;//warning!!\n\t\tdouble mx=max(line[t[x].id].y1,line[t[x].id].y2);\n\t\tif(zui<mx)\n\t\t{\n\t\t\tzui=mx;\n\t\t\tans=line[t[x].id].hao;\n\t\t}\n\t\telse if(zui==mx)\n\t\t{\n\t\t\tif(ans>line[t[x].id].hao)\n\t\t\t ans=line[t[x].id].hao;\n\t\t}\n\t\treturn;\n\t}\n\t\n\tif(!t[x].id)\n\t{\n\t\tint mid=(l+r)>>1;\n\t    if(to<=mid) query(x<<1,l,mid,to);\n\t    else query(x<<1|1,mid+1,r,to);\n\t}\n\telse{\n\t\t\n\tint x1=line[t[x].id].x1,x2=line[t[x].id].x2;\n\tdouble y1=line[t[x].id].y1,y2=line[t[x].id].y2;\n\t\n\tif(x1<=to&&to<=x2)\n\t{\n\t\tdouble k1=lv(x1,x2,y1,y2);\n\t\tdouble d1=y1+((double)to-x1)*k1;\n\t\tif(d1>zui)\n\t\t{\n\t\t\tzui=d1;\n\t\t\tans=line[t[x].id].hao;\n\t\t}\n\t\telse if(zui==d1)\n\t\t{\n\t\t\tif(ans>line[t[x].id].hao)\n\t\t\t ans=line[t[x].id].hao;\n\t\t}\n\t}\n\tint mid=(l+r)>>1;\n\tif(to<=mid) query(x<<1,l,mid,to);\n\telse query(x<<1|1,mid+1,r,to);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint q,a,b,c,d;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&q);\n\t\tif(q&1)\n\t\t{\n\t\t\thas++;\n\t\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\t\ta=(a+la-1)%mod1+1;\n\t\t\tb=(b+la-1)%mod2+1;\n\t\t\tc=(c+la-1)%mod1+1;\n\t\t\td=(d+la-1)%mod2+1;\n\t\t\t\n\t\t\tif(a>c) swap(a,c),swap(b,d);\n\t\t\tadd(1,1,mod1+2,a,c,b,d,has);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&a);\n\t\t\tzui=0.0,ans=0;\n\t\t\ta=(a+la-1)%mod1+1;\n\t\t\tquery(1,1,mod1+2,a);\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\tla=ans;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1526028879,
        "uid": 56672,
        "name": "\u67ab\u6797\u665a",
        "ccfLevel": 9,
        "title": "Segment \u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u6b22\u8fce\u6765\u770b [OI Wiki](https://oi-wiki.org/ds/li-chao-tree/) \u4e0a\u674e\u8d85\u6811\u7684\u6559\u7a0b\uff0c\u5176\u4e2d\u6709\u4e00\u90e8\u5206\u662f\u6211\u5199\u7684\uff0c\u6240\u4ee5\u53ef\u80fd\u5728\u5185\u5bb9\u4e0a\u4f1a~~\u88ab\u5305\u542b~~\u6709\u6240\u91cd\u5408\u3002\n\n---\n\n\u674e\u8d85\u6811\uff1a\u63d2\u5165\u76f4\u7ebf/\u7ebf\u6bb5\uff0c\u652f\u6301\u67e5\u8be2\u5355\u70b9\u6781\u503c\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u7ef4\u62a4\u5728 $m=\\frac{l+r}{2}$ \u5904\u53d6\u503c\u6700\u5927\u7684\u76f4\u7ebf\u7684\u4fe1\u606f\u3002\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5 $f$\uff0c\u5728\u8fd9\u6761\u7ebf\u6bb5\u5b8c\u6574\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u4e2d\uff0c\u67d0\u4e9b\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002\n\n\u8003\u8651\u67d0\u4e2a\u88ab\u65b0\u7ebf\u6bb5 $f$ \u5b8c\u6574\u8986\u76d6\u7684\u533a\u95f4\uff0c\u82e5\u8be5\u533a\u95f4\u65e0\u6700\u4f18\u7ebf\u6bb5\uff0c\u5219\u8be5\u7ebf\u6bb5\u53ef\u4ee5\u76f4\u63a5\u6210\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002\n\n\u5426\u5219\uff0c\u8bbe\u8be5\u533a\u95f4\u7684\u4e2d\u70b9\u4e3a $m$\uff0c\u6211\u4eec\u62ff\u65b0\u7ebf\u6bb5 $f$ \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4e0e\u539f\u6700\u4f18\u7ebf\u6bb5 $g$ \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4f5c\u6bd4\u8f83\u3002\n\n\u5982\u679c\u65b0\u7ebf\u6bb5 $f$ \u66f4\u4f18\uff0c\u5219\u5c06 $f$ \u548c $g$ \u4ea4\u6362\u3002\u90a3\u4e48\u73b0\u5728\u8003\u8651\u5728\u4e2d\u70b9\u5904 $f$ \u4e0d\u5982 $g$ \u4f18\u7684\u60c5\u51b5\uff1a\n\n1. \u82e5\u5728\u5de6\u7aef\u70b9\u5904 $f$ \u66f4\u4f18\uff0c\u90a3\u4e48 $f$ \u548c $g$ \u5fc5\u7136\u5728\u5de6\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u5de6\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\uff1b\n2. \u82e5\u5728\u53f3\u7aef\u70b9\u5904 $f$ \u66f4\u4f18\uff0c\u90a3\u4e48 $f$ \u548c $g$ \u5fc5\u7136\u5728\u53f3\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u53f3\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\u3002\n3. \u82e5\u5728\u5de6\u53f3\u7aef\u70b9\u5904 $g$ \u90fd\u66f4\u4f18\uff0c\u90a3\u4e48 $f$ \u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u4e0b\u4f20\u3002\n\n\u7531\u4e8e\u4ec5\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u6240\u4ee5\u4e24\u8fb9\u5b50\u533a\u95f4\u6700\u591a\u4f1a\u9012\u5f52\u4e00\u4e2a\u3002\u590d\u6742\u5ea6 $\\mathcal{O}(\\log n)$\uff0e\n\n> \u8fd9\u4e2a\u505a\u6cd5\u6bd4\u5927\u90e8\u5206\u5206\u7c7b\u8ba8\u8bba\u505a\u6cd5\u7b80\u6d01\uff0c\u4e0d\u9700\u8981\u5bf9\u659c\u7387\u6b63\u8d1f\u7b49\u4fe1\u606f\u8fdb\u884c\u5197\u957f\u7684\u5206\u7c7b\u8ba8\u8bba\uff0c\u66f4\u5bb9\u6613\u8bb0\u5fc6\u3002\n\n\u67e5\u8be2 $x=k$ \u7b54\u6848\u65f6\uff0c\u4ece\u6839\u8d70\u5230 $[x,x]$ \u8282\u70b9\u8bb0\u5f55\u7684\u6240\u6709\u6700\u4f18\u76f4\u7ebf\u5728 $x=k$ \u65f6\u53d6\u503c\u7684\u7b54\u6848\u6781\u503c\u5373\u4e3a\u6240\u6c42\u3002\u8fd9\u91cc\u662f\u8fd0\u7528\u4e86**\u6807\u8bb0\u6c38\u4e45\u5316**\u7684\u601d\u60f3\u3002\n\n\u4e00\u4e9b\u57fa\u672c\u7684\u6269\u5c55\uff1a\n\n- \u5982\u679c\u662f**\u63d2\u5165\u7ebf\u6bb5**\uff0c\u9700\u8981\u5b9a\u4f4d\u5230\u7ebf\u6bb5\u6a2a\u5750\u6807\u533a\u95f4\u5728\u674e\u8d85\u6811\u4e0a\u7684\u62c6\u5206\u51fa\u7684\u533a\u95f4\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u9012\u5f52\u4fee\u6539\u4e0b\u53bb\uff0c\u590d\u6742\u5ea6\u662f $\\mathcal{O}(\\log^2n)$ \u7684\u3002\n- \u674e\u8d85\u6811\u7684\u7ecf\u5178\u5e94\u7528\u662f\u659c\u7387\u4f18\u5316\uff0c[\u8fd9\u91cc\u662f\u5173\u4e8e\u6b64\u6211\u4e4b\u524d\u5199\u8fc7\u7684\u603b\u7ed3](https://www.cnblogs.com/do-while-true/p/15404389.html)\u3002\n\n```cpp\n#include <iostream>\n#include <string>\n#define MOD1 39989\n#define MOD2 1000000000\n#define MAXT 40000\nusing namespace std;\ntypedef pair<double, int> pdi;\n\nconst double eps = 1e-9;\n\nint cmp(double x, double y) {\n  if (x - y > eps) return 1;\n  if (y - x > eps) return -1;\n  return 0;\n}\n\nstruct line {\n  double k, b;\n} p[100005];\n\nint s[160005];\nint cnt;\n\ndouble calc(int id, int d) { return p[id].b + p[id].k * d; }\n\nvoid add(int x0, int y0, int x1, int y1) {\n  cnt++;\n  if (x0 == x1)  // \u7279\u5224\u76f4\u7ebf\u659c\u7387\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\n    p[cnt].k = 0, p[cnt].b = max(y0, y1);\n  else\n    p[cnt].k = 1.0 * (y1 - y0) / (x1 - x0), p[cnt].b = y0 - p[cnt].k * x0;\n}\n\nvoid upd(int root, int cl, int cr, int u) {  // \u5bf9\u7ebf\u6bb5\u5b8c\u5168\u8986\u76d6\u5230\u7684\u533a\u95f4\u8fdb\u884c\u4fee\u6539\n  int &v = s[root], mid = (cl + cr) >> 1;\n  if (cmp(calc(u, mid), calc(v, mid)) == 1) swap(u, v);\n  int bl = cmp(calc(u, cl), calc(v, cl)), br = cmp(calc(u, cr), calc(v, cr));\n  if (bl == 1 || (!bl && u < v)) upd(root << 1, cl, mid, u);\n  if (br == 1 || (!br && u < v)) upd(root << 1 | 1, mid + 1, cr, u);\n}\n\nvoid update(int root, int cl, int cr, int l, int r,\n            int u) {  // \u5b9a\u4f4d\u63d2\u5165\u7ebf\u6bb5\u5b8c\u5168\u8986\u76d6\u5230\u7684\u533a\u95f4\n  if (l <= cl && cr <= r) {\n    upd(root, cl, cr, u);\n    return;\n  }\n  int mid = (cl + cr) >> 1;\n  if (l <= mid) update(root << 1, cl, mid, l, r, u);\n  if (mid < r) update(root << 1 | 1, mid + 1, cr, l, r, u);\n}\n\npdi pmax(pdi x, pdi y) {  // pair max\u51fd\u6570\n  if (cmp(x.first, y.first) == -1)\n    return y;\n  else if (cmp(x.first, y.first) == 1)\n    return x;\n  else\n    return x.second < y.second ? x : y;\n}\n\npdi query(int root, int l, int r, int d) {  // \u67e5\u8be2\n  if (r < d || d < l) return {0, 0};\n  int mid = (l + r) >> 1;\n  double res = calc(s[root], d);\n  if (l == r) return {res, s[root]};\n  return pmax({res, s[root]}, pmax(query(root << 1, l, mid, d),\n                                   query(root << 1 | 1, mid + 1, r, d)));\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  int n, lastans = 0;\n  cin >> n;\n  while (n--) {\n    int op;\n    cin >> op;\n    if (op == 1) {\n      int x0, y0, x1, y1;\n      cin >> x0 >> y0 >> x1 >> y1;\n      x0 = (x0 + lastans - 1 + MOD1) % MOD1 + 1,\n      x1 = (x1 + lastans - 1 + MOD1) % MOD1 + 1;\n      y0 = (y0 + lastans - 1 + MOD2) % MOD2 + 1,\n      y1 = (y1 + lastans - 1 + MOD2) % MOD2 + 1;\n      if (x0 > x1) swap(x0, x1), swap(y0, y1);\n      add(x0, y0, x1, y1);\n      update(1, 1, MOD1, x0, x1, cnt);\n    } else {\n      int x;\n      cin >> x;\n      x = (x + lastans - 1 + MOD1) % MOD1 + 1;\n      cout << (lastans = query(1, 1, MOD1, x).second) << endl;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1659793442,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dP4097 [HEOI2013]Segment | \u674e\u8d85\u6811"
    },
    {
        "content": "~~\u8fd9\u4e2ahack\u6570\u636e\u662f\u771f\u7684\u5f3a\u3002~~\n\n\u6a21\u677f\u9898\u7684\u9898\u89e3\u5f88\u91cd\u8981\u54e6\uff0c\u5e0c\u671b\u4f60\u80fd\u627e\u5230\u9002\u5408\u81ea\u5df1\u7684\u3002\n\n[\u535a\u5ba2\u98df\u7528\u66f4\u4f73\u54e6](https://www.cnblogs.com/windseekerblog/p/16600139.html)\n\n## \u674e\u8d85\u7ebf\u6bb5\u6811\u7684\u5b9a\u4e49\n\n\u5bf9\u4e8e\u674e\u8d85\u7ebf\u6bb5\u6811\u7684\u5b9a\u4e49\uff0c[JHSeng](https://www.cnblogs.com/JHSeng/p/10896570.html)\u5927\u4f6c\u7684\u5b9a\u4e49\u7b80\u6d01\u7cbe\u70bc\uff1a\n\n**\u674e\u8d85\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u7528\u4e8e\u7ef4\u62a4\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\u7ebf\u6bb5\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u3002**\n\n\u800c[\u6d1b\u8c37P4097Segment](https://www.luogu.com.cn/problem/P4097)\u5c31\u662f\u674e\u8d85\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u677f\u5b50\u9898\u4e86\u3002\n\n\u9898\u76ee\u5927\u610f\uff08~~\u5077\u4e2a\u61d2~~\uff09\uff1a\n\n```\n\u8981\u6c42\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u5728\u5e73\u9762\u4e0a\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\u8bb0\u7b2c i \u6761\u88ab\u63d2\u5165\u7684\u7ebf\u6bb5\u7684\u6807\u53f7\u4e3a i\u3002\n\n2. \u7ed9\u5b9a\u4e00\u4e2a\u6570 k\uff0c\u8be2\u95ee\u4e0e\u76f4\u7ebf x=k \u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e2d\uff0c\u4ea4\u70b9\u7eb5\u5750\u6807\u6700\u5927\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\u3002\n```\n\n## \u5177\u4f53\u7ef4\u62a4\u64cd\u4f5c\n\n\u6211\u4eec\u4e3b\u8981\u7ef4\u62a4\u533a\u95f4\u5185**\u6700\u4f18\u7ebf\u6bb5\uff08\u4ea4\u70b9\u7eb5\u5750\u6807\u6700\u5927\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff09**\u3002\n\n\u6211\u4eec\u5047\u8bbe\u5e73\u9762\u5185\u5df2\u6709\u4e00\u6761\u7ebf\u6bb5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oudc7e40.png)\n\n\u8fd9\u65f6\u663e\u7136\uff0c\u5176\u4e3a\u6240\u6709\u533a\u95f4\u5185\u7684\u6700\u4f18\u7ebf\u6bb5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/e9j7othh.png)\n\n\u660e\u663e\u53ef\u4ee5\u770b\u51fa\uff0c\u63d2\u5165\u65b0\u7684\u7ebf\u6bb5\u540e\uff0c\u4e24\u6761\u7ebf\u6bb5\u7684\u4ea4\u70b9\u5de6\u533a\u95f4\u6700\u4f18\u7ebf\u6bb5\u4e3a\u65b0\u7ebf\u6bb5\uff0c\u800c\u4ea4\u70b9\u53f3\u8fb9\u533a\u95f4\u6700\u4f18\u7ebf\u6bb5\u5219\u4e3a\u539f\u6765\u7684\u7ebf\u6bb5\u3002\u626b\u4e00\u904d\u80af\u5b9a\u6765\u4e0d\u53ca\uff0c\u6240\u4ee5\u6211\u4eec**\u4e8c\u5206\u9012\u5f52**\u6c42\u51fa\u6240\u6709\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u3002\n\n\u9996\u5148\u5148\u53d6\u5f53\u524d\u5904\u7406\u533a\u95f4\u7684 $mid$\uff0c\u5982\u679c\u65b0\u7ebf\u6bb5\u5728 $x=mid$ \u65f6\u7eb5\u5750\u6807\u66f4\u5927\uff0c\u5219**\u5148\u5c06\u5f53\u524d\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u66f4\u66ff\u4e3a\u65b0\u7ebf\u6bb5**\uff0c\u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2a\u533a\u95f4\u957f\u5ea6\u5927\u4e8e\u4e00\u7684\u533a\u95f4\u5b58\u7684\u7ebf\u6bb5\uff0c**\u53ea\u6ee1\u8db3\u53d6\u533a\u95f4\u5185\u5927\u90e8\u5206\u6a2a\u5750\u6807\u5176\u4e3a\u6700\u4f18\u89e3\u3002**\n\n```cpp\nif(f[i](mid)-f[id](mid)>eps) swap(i,id);\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nkaejwuk.png)\n\n\u7ea2\u8272\u7ebf\u6bb5\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002\n\n\u4f46\u662f\u5b9e\u9645\u4e0a\u4ea4\u70b9\u53f3\u8fb9\u7684\u533a\u95f4\u6700\u4f18\u7ebf\u6bb5\u4e0d\u662f\u5b83\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4e24\u6761\u7ebf\u6bb5\u518d\u6b21\u8fdb\u884c\u6bd4\u8f83\uff0c\u6bd4\u8f83\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u7aef\u70b9\uff08\u5373\u662f\u5224\u65ad\u533a\u95f4\u5185\u4e24\u6761\u7ebf\u6bb5\u662f\u5426\u6709\u4ea4\u70b9\uff0c\u6709\u4ea4\u70b9\u8bf4\u660e\u8981\u91cd\u65b0\u66f4\u65b0\uff09\u3002\n\n\u5982\u679c\u88ab\u6dd8\u6c70\u7684\u7ebf\u6bb5\u5728\u5de6\u53f3\u7aef\u70b9\u7684\u6bd4\u8f83\u4e2d\u80dc\u51fa\uff0c\u5219\u5c06\u5b83\u7ee7\u7eed\u9012\u5f52\uff0c\u66f4\u65b0\u3002\n\n```cpp\nif(f[i](l)-f[id](l)>eps||(f[i](l)==f[id](l)&&i<id)) update(lson,ql,qr,i);\nif(f[i](r)-f[id](r)>eps||(f[i](r)==f[id](r)&&i<id)) update(rson,ql,qr,i);\n```\n\u6700\u540e\u5f97\u51fa\u6240\u6709\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9osmuu1l.png)\n\n\u8be2\u95ee\u7684\u65f6\u5019\u5355\u70b9\u8be2\u95ee\uff0c\u9012\u5f52\u53d6 max \u5373\u53ef\u3002\n\n## \u4e00\u4e2a\u849f\u84bb\u5165\u5751\u8fc7\u7684\u5c0f\u95ee\u9898\n\n\u849f\u84bb\u5728\u7b2c\u4e00\u6b21\u5199\u674e\u8d85\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\uff0c\u975e\u5e38\u4e0d\u660e\u767d\u8be2\u95ee\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u8981\u53d6 max\u3002\u5355\u70b9\u8be2\u95ee\u76f4\u63a5\u53d6\u5f53\u524d\u70b9\u7684\u6700\u4f18\u7ebf\u6bb5\u4e0d\u5c31\u884c\u4e86\uff0c\u5728\u7ecf\u8fc7\u601d\u8003\u540e\uff0c\u53d1\u73b0\uff1a\n\n1. \u674e\u8d85\u7ebf\u6bb5\u6811**\u6ca1\u6709\u6216\u8005\u8bf4\u4e0d\u9700\u8981 push_down \u64cd\u4f5c**\uff0c\u6240\u4ee5\u53ef\u80fd\u5f53\u524d\u70b9\u5e76\u6ca1\u6709\u503c\u3002\n\n2. \u674e\u8d85\u7ebf\u6bb5\u6811**\u5927\u533a\u95f4\u548c\u5c0f\u533a\u95f4\u5185\u5b58\u7684\u90fd\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7ebf\u6bb5**\uff0c\u5927\u533a\u95f4\u521a\u521a\u8bb2\u8fc7\u4e86\uff0c\u53ea\u662f\u6ee1\u8db3\u5927\u90e8\u5206\uff0c\u800c\u5c0f\u533a\u95f4\u7531\u4e8e\u6ca1\u6709 push_down \u4e5f\u53ef\u80fd\u51fa\u73b0**\u5b58\u7684\u4e0d\u662f\u6700\u4f18\u89e3**\uff0c\u4f8b\u5982\u5982\u56fe\u6240\u793a\u7684\u60c5\u51b5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/chsfj66q.png)\n\n\u5f53\u524d\u8be2\u95ee $x$ \u70b9\u7684\u6700\u9ad8\u7eb5\u5750\u6807\uff0c\u52a0\u5165\u7b2c\u4e8c\u6761\u76f4\u7ebf\u65f6\uff0c\u4e00\u4e8c\u6761\u76f4\u7ebf\u53f3\u8fb9\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u53d8\u4e3a\u4e86\u56fe\u4e2d\u7c89\u8272\u533a\u95f4\uff0c\u800c\u518d\u52a0\u5165\u7b2c\u4e09\u6761\u7ebf\u6bb5\u65f6\uff0c\u66f4\u65b0\u6700\u4f18\u7ebf\u6bb5\u540e\uff0c\u65b0\u7ebf\u6bb5\u5728\u4e2d\u95f4\u548c\u53f3\u7aef\u70b9\u90fd\u662f\u538b\u5012\u6027\u4f18\u52bf\uff0c\u6240\u4ee5\u56fe\u793a\u7c89\u8272\u533a\u95f4\u5e76\u6ca1\u6709\u88ab\u9012\u5f52\u66f4\u65b0\uff0c\u9020\u6210\u4e86\u5c0f\u533a\u95f4\u975e\u6700\u4f18\u89e3\u7684\u60c5\u51b5\u3002\n\n## code\n```cpp\n#include<bits/stdc++.h>\n#define ls rt<<1\n#define rs rt<<1|1\n#define lson ls,l,mid\n#define rson rs,mid+1,r\n#define mp make_pair\n#define db double\nusing namespace std;\nconst int N=4e5+10,M=39990,Inf=1e9+7;\nconst double eps=1e-10;//\u53ef\u80fd\u8bef\u5dee\u8f83\u5c0f\uff0c\u65e0\u6cd5\u6bd4\u8f83\uff0c\u6240\u4ee5\u53d6eps\n\ninline int read(){\n\tchar ch=getchar();int res=0,f=1;\n\twhile(ch<'0'||'9'<ch){if(ch=='-')f=-1;ch=getchar();}\n\twhile('0'<=ch&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}\n\nstruct line{\n\tdb k,b;int xmi,xma;\n\tdb operator()(int x){//\u91cd\u8f7d\u62ec\u53f7 \n\t\tif(xmi<=x&&x<=xma) return k*x+b;//\u7531\u4e8e\u4e0d\u662f\u76f4\u7ebf\uff0c\u5224\u65ad\u662f\u5426\u5728\u7b26\u5408\u8303\u56f4\u5185\n\t\telse return -Inf;//\u4e0d\u662f\u8fd4\u56de\u6781\u5c0f\u503c\n\t}\n}f[N];\n\nstruct TREE{\n\tint id[N<<2];\n\tpair<db,int> _max(pair<db,int> a,pair<db,int> b){//\u5b9a\u4e49max\u51fd\u6570\n\t\tif(a.first-b.first>eps) return a;\n\t\telse if(b.first-a.first>eps) return b;\n\t\telse return a.second<b.second?a:b;\n\t}//\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u95eepair\u53d6max\u4e0d\u662f\u76f4\u63a5\u6309\u7b2c\u4e00\u7b2c\u4e8c\u5173\u952e\u5b57\u4ee5\u6b64\u6bd4\u8f83\u7684\u5417\uff0c\u4f46\u662f\u849f\u84bb\u611f\u89c9\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u7cbe\u5ea6\u7684\u95ee\u9898\uff0c\u90a3\u6837\u4f1a\u70b8\uff0c\u5e0c\u671b\u5de8\u4f6c\u80fd\u4e3a\u6211\u89e3\u7b54\u3002\n\tvoid update(int rt,int l,int r,int ql,int qr,int i){\n\t\tif(ql<=l&&r<=qr){\n\t\t\t//\u6ca1\u6709\u76f4\u63a5\u66f4\u65b0 \n\t\t\tif(!id[rt]) return id[rt]=i,void();\n\t\t\tint mid=(l+r)>>1;//\u66f4\u65b0\u7684\u65f6\u5019\u4ea4\u6362\uff0c\u53ef\u80fd\u88ab\u6dd8\u6c70\u7684\u7ebf\u6bb5\u5728\u5de6\u53f3\u533a\u95f4\u4f1a\u662f\u6700\u4f18\u7ebf\u6bb5\n\t\t\tif(f[i](mid)-f[id[rt]](mid)>eps) swap(i,id[rt]);\n\t\t\t//\u7b49\u4e8e\u65f6\u8ba9\u7f16\u53f7\u5c0f\u7684\u53bb\u66f4\u65b0 \n\t\t\tif(f[i](l)-f[id[rt]](l)>eps||(f[i](l)==f[id[rt]](l)&&i<id[rt])) update(lson,ql,qr,i);\n\t\t\tif(f[i](r)-f[id[rt]](r)>eps||(f[i](r)==f[id[rt]](r)&&i<id[rt])) update(rson,ql,qr,i);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) update(lson,ql,qr,i);\n\t\tif(mid<qr) update(rson,ql,qr,i);\n\t}\n\tpair<db,int> query(int rt,int l,int r,int k){\n\t\tpair<double,int> res;\n\t\tif(id[rt]) res=mp(f[id[rt]](k),id[rt]);\n\t\tif(l==r) return res;\n\t\tint mid=(l+r)>>1;\n\t\tif(k<=mid) res=_max(query(lson,k),res);\n\t\telse res=_max(query(rson,k),res);\n\t\treturn res;\n\t}\n}root;\n\nint n,lst,cnt;\n\nint main()\n{\n\tn=read();\n\tfor(int i=1,op,k,x0,x1,y0,y1;i<=n;i++)\n\t{\n\t\top=read();\n\t\tif(op==0){\n\t\t\tk=read();k=(k+lst-1)%39989+1;\n\t\t\tprintf(\"%d\\n\",lst=root.query(1,1,M,k).second);\n\t\t}\n\t\telse{\n\t\t\tx0=read(),y0=read(),x1=read(),y1=read();\n\t\t\tx0=(x0+lst-1)%39989+1;x1=(x1+lst-1)%39989+1;\n\t\t\ty0=(y0+lst-1)%1000000000+1;y1=(y1+lst-1)%1000000000+1;\n\t\t\tcnt++;\n\t\t\tif(x0==x1){\n\t\t\t\tf[cnt].k=0;\n\t\t\t\tf[cnt].b=max(y1,y0);\n\t\t\t\tf[cnt].xmi=f[cnt].xma=x0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tf[cnt].k=1.0*(1.0*y1-y0)/(1.0*x1-x0);\n\t\t\t\tf[cnt].b=1.0*(1.0*y1-f[cnt].k*x1);\n\t\t\t\tf[cnt].xmi=min(x0,x1);\n\t\t\t\tf[cnt].xma=max(x0,x1);\n\t\t\t}\n\t\t\troot.update(1,1,M,min(x0,x1),max(x0,x1),cnt);\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n3\n1 8 7 3 9\n1 10 9 4 3\n0 8\n*/\n/*\n1\n*/\n```\n## \u4e00\u4e9b\u53ef\u4ee5\u7528\u674e\u8d85\u505a\u7684\u9898\u76ee\n\n[P4097Segment](https://www.luogu.com.cn/problem/P4655) \n\n[P4254Blue Mary\u5f00\u516c\u53f8](https://www.luogu.com.cn/problem/P4254) \n\n[P4655Building Bridges](https://www.luogu.com.cn/problem/P4655)\n\n\n\n\n",
        "postTime": 1660842906,
        "uid": 557385,
        "name": "cjlak1o1",
        "ccfLevel": 0,
        "title": "P4097 [HEOI2013]Segment \u9898\u89e3"
    },
    {
        "content": "\u53d1\u4e00\u4e2a\u50bb\u74dc\u505a\u6cd5\uff0c\u867d\u7136\u53ea\u80fd\u7b97\u534a\u4e2a\u6b63\u786e\u7b97\u6cd5\u3002\u3002  \n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u5f3a\u5236\u5728\u7ebf\u3002\u90a3\u4e48\uff0c\u663e\u7136\u8fd9\u9053\u9898\u662f\u6709\u79bb\u7ebf\u505a\u6cd5\u7684\u3002\u8003\u8651\u5404\u79cd\u79bb\u7ebf\u505a\u6cd5\uff0c\u53d1\u73b0\u6574\u4f53\u4e8c\u5206\u53ef\u4ee5\u5bf9\u4ed8\u8fd9\u9053\u9898\u3002\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u533a\u95f4\u8986\u76d6\u7ebf\u6bb5\u6811\u7edf\u8ba1\u8d21\u732e\uff0c\u867d\u7136\u672c\u9898\u8981\u6c42\u8f93\u51fa\u5e8f\u53f7\uff0c\u6709\u70b9\u6076\u5fc3\uff0c\u4f46\u8fd8\u662f\u6709\u529e\u6cd5\u505a\u5230\u7684\u3002  \n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u505a\u6cd5\u6269\u5c55\u5230\u5728\u7ebf\u3002~~\u663e\u7136\uff0c~~\u5206\u5757\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u601d\u8def\u3002\u6211\u4eec\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5206\u5757\u3002  \n\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u6700\u9ad8\u7684\u7ebf\u6bb5\u3002\u6bcf\u5f53\u6536\u5230\u4e00\u4e2a\u6dfb\u52a0\u7ebf\u6bb5\u7684\u64cd\u4f5c\uff0c\u5148\u4e0d\u6025\u7740\u66f4\u65b0\u6570\u7ec4\uff0c\u7b49\u5230\u6512\u591fB\u4e2a\u6dfb\u52a0\u64cd\u4f5c\u540e\u7edf\u4e00\u4f7f\u7528\u6574\u4f53\u4e8c\u5206\u66f4\u65b0\u6570\u7ec4\u3002B\u662f\u5757\u7684\u5927\u5c0f\u3002\u6bcf\u6b21\u8be2\u95ee\u65f6\u904d\u5386\u79ef\u6512\u7684\u6dfb\u52a0\u64cd\u4f5c\u5373\u53ef\u3002  \n\u6574\u4f53\u4e8c\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f![](https://cdn.luogu.com.cn/upload/pic/34668.png),\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f![](https://cdn.luogu.com.cn/upload/pic/34671.png),\u56e0\u4e3aB <= M,\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u662f  \n![](https://cdn.luogu.com.cn/upload/pic/34677.png)  \n\u7531\u5747\u503c\u4e0d\u7b49\u5f0f\u5f97\u5230(\u5176\u5b9e\u5927O\u7b26\u53f7\u4e0d\u8be5\u8fd9\u4e48\u7528)  \n![](https://cdn.luogu.com.cn/upload/pic/34676.png)  \n\u5f53\u4e14\u4ec5\u5f53\u5de6\u8fb9\u4e24\u9879\u76f8\u7b49\u65f6\u7b49\u53f7\u6210\u7acb\uff0c\u6240\u4ee5  \n![](https://cdn.luogu.com.cn/upload/pic/34679.png)  \n\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f4e\uff0c\u4e3a  \n![](https://cdn.luogu.com.cn/upload/pic/34680.png)  \n\u6240\u4ee5\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e26\u4e00\u4e2a\u6839\u53f7\uff0c\u6050\u6015\u8981\u52a0\u4e0a\u5404\u79cd\u5404\u6837\u7684\u4f18\u5316\u6280\u5de7\u624d\u6709\u671bAC\uff0c\u4f46\u662f\u901a\u8fc7\u5927\u90e8\u5206\u6570\u636e\uff0c\u81f3\u5c11\u7406\u8bba\u4e0a\u6ca1\u6709\u95ee\u9898\u3002",
        "postTime": 1538144484,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4097 \u3010[HEOI2013]Segment \u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P4097)\n\n\u518d\u6b21\u63a8\u9500\u81ea\u5df1\u7684[\u535a\u5ba2](https://www.luogu.com.cn/blog/s19418/li-chao-xian-duan-shu-xue-xi-bi-ji)\u3002\n\n\u8fd9\u9898\u548c[P4254 [JSOI2008]Blue Mary\u5f00\u516c\u53f8 ](https://www.luogu.com.cn/problem/P4254)\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u7ef4\u62a4\u7684\u4e0d\u662f\u76f4\u7ebf\uff0c\u800c\u662f\u7ebf\u6bb5\u3002\n\n\u5176\u5b9e\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u6309\u7167\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u601d\u8def\uff0c\u628a\u7ebf\u6bb5\u62c6\u5206\u6210\u4e0d\u8d85\u8fc7 $\\log n$ \u4e2a\u533a\u95f4\uff0c\u8fd9\u6837\u6bcf\u4e2a\u533a\u95f4\u90fd\u88ab\u7ebf\u6bb5\u5b8c\u5168\u5305\u542b\u3002\n\n\u5f80\u8fd9\u4e9b\u5b8c\u5168\u88ab\u5305\u542b\u7684\u533a\u95f4\u4e2d\u63d2\u5165\u7ebf\u6bb5\u7b49\u540c\u4e8e\u63d2\u5165\u76f4\u7ebf\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u4e86\u4e00\u4e2a $\\log$\uff0c\u603b\u65f6\u95f4\u4e3a $O(n\\log^2m)$\u3002\n\n\u4ee3\u7801\u6709\u5f88\u591a\u7ec6\u8282\u8981\u8c03\uff0c\u4e0b\u9762\u8bf4\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1. \u6ce8\u610f\u7cbe\u5ea6\uff0c\u659c\u7387\u4e3a\u5c0f\u6570\uff0c\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\uff0c\u4f1a\u88ab Hack \u6389\u3002\n\n2. \u6ce8\u610f $x0=x1$ \u7684\u95ee\u9898\uff0c\u9898\u76ee\u91cc\u4e5f\u8bf4\u4e86\uff0c\u7279\u5224\u5426\u5219\u8ba1\u7b97\u659c\u7387\u4f1a RE\u3002\n\n3. \u6ce8\u610f\u66f4\u65b0\u6700\u4f18\u7ebf\u6bb5\u65f6\u8981\u52a0\u4e0a\u5224\u65ad\u7f16\u53f7\u5927\u5c0f\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 40005\n#define eps 1e-8\nusing namespace std;\n#define CALC(a,b,c) (a=(a+b-1)%c+1)\nint n,lastans,cnt,Best[N<<2];\nvector <double> K(1,0),B(1,0);\ninline double GetY(int id,int x){\n\treturn x*K[id]+B[id];\n}\ninline bool Cmp(int id1,int id2,int x){\n\tdouble a(GetY(id1,x)),b(GetY(id2,x));\n\treturn abs(a-b)>eps?a>b:id1<id2;\n}\n#define ls (k<<1)\n#define rs (k<<1|1)\n#define mid (l+r>>1)\ninline void Insert(int k,int l,int r,int s,int t,int id){\n\tif(l>t||r<s) return;\n\tif(s<=l&&r<=t){\n\t\tif(!Best[k]) return void(Best[k]=id);\n\t\tif(Cmp(id,Best[k],mid)) swap(id,Best[k]);\n\t\tif(l==r||abs(K[id]-K[Best[k]])<eps) return;\n\t\tif(Cmp(id,Best[k],l)) Insert(ls,l,mid,s,t,id);\n\t\tif(Cmp(id,Best[k],r)) Insert(rs,mid+1,r,s,t,id);\n\t\treturn;\n\t}\n\tInsert(ls,l,mid,s,t,id);\n\tInsert(rs,mid+1,r,s,t,id);\n}\ninline int Query(int k,int l,int r,int x){\n\tif(l==r) return Best[k];\n\tint res(x<=mid?Query(ls,l,mid,x):Query(rs,mid+1,r,x));\n\treturn Cmp(res,Best[k],x)?res:Best[k];\n}\nint main(){\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint op;scanf(\"%d\",&op);\n\t\tif(op){\n\t\t\tint a,b,c,d;scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\t\tCALC(a,lastans,39989);CALC(b,lastans,1000000000);\n\t\t\tCALC(c,lastans,39989);CALC(d,lastans,1000000000);\n\t\t\tif(a>c) swap(a,c),swap(b,d);++cnt;\n\t\t\tif(a==c) K.push_back(0),B.push_back(max(b,d));\n\t\t\telse K.push_back(double(b-d)/(a-c)),B.push_back(b-a*K[cnt]);\n\t\t\tInsert(1,0,N,a,c,cnt);\n\t\t}\n\t\telse{\n\t\t\tint x;scanf(\"%d\",&x);CALC(x,lastans,39989);\n\t\t\tprintf(\"%d\\n\",(lastans=Query(1,0,N,x)));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1679203146,
        "uid": 554574,
        "name": "gyyyyx",
        "ccfLevel": 0,
        "title": "[HEOI2013]Segment"
    }
]