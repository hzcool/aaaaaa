[
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/articles/problem-Luogu-2906-Cow-Neighborhoods/)\n\n---\n\n## Description\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 2906](https://www.luogu.org/problemnew/show/P2906)\n\n\u4e86\u89e3\u5976\u725b\u4eec\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u5976\u725b\u559c\u6b22\u6210\u7fa4\u7ed3\u961f\u3002\u89c2\u5bdf\u7ea6\u7ff0\u7684 $n$ \u53ea\u5976\u725b\uff0c\u4f60\u4f1a\u53d1\u73b0\u5979\u4eec\u5df2\u7ecf\u7ed3\u6210\u4e86\u51e0\u4e2a\u201c\u7fa4\u201d\u3002\u6bcf\u53ea\u5976\u725b\u5728\u5403\u8349\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u4f4d\u7f6e\u5750\u6807 $(X_i,Y_i)$\u3002\u5f53\u6ee1\u8db3\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\uff0c\u4e24\u53ea\u5976\u725b $i$ \u548c $j$ \u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7fa4\u7684\uff1a\n\n1. \u4e24\u53ea\u5976\u725b\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $C$\uff0c\u5373 $|X_i-X_j|+|Y_i-Y_j|\\le C$\u3002\n2. \u4e24\u53ea\u5976\u725b\u6709\u5171\u540c\u7684\u90bb\u5c45\u3002\u5373\u5b58\u5728\u4e00\u53ea\u5976\u725b $k$\uff0c\u4f7f $i$ \u4e0e $k$\u3001$j$ \u4e0e $k$ \u5747\u540c\u5c5e\u4e00\u4e2a\u7fa4\u3002\n\n\u8bf7\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u725b\u7fa4\uff0c\u4ee5\u53ca\u6700\u5927\u7684\u725b\u7fa4\u91cc\u6709\u591a\u5c11\u5976\u725b\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 10^5$\uff0c$1\\le X_i,Y_i,C\\le 10^9$\uff0c$X_i,Y_i,C\\in \\mathbb{Z}$\n\n------\n\n## Solution\n\n\u9996\u5148\u6211\u4eec\u6709\u4e00\u4e2a\u8f6c\u5316\uff1a**\u66fc\u54c8\u987f\u8ddd\u79bb**\u8f6c**\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb**\u3002\u5c06\u4e00\u4e2a\u70b9\u7684\u5750\u6807 $(x,y)$ \u8f6c\u5316\u6210 $(x+y,x-y)$\uff0c\u8bbe\u65b0\u70b9\u7684\u5750\u6807\u4e3a $(x',y')$\uff0c\u90a3\u4e48\u539f\u6765\u7684\u66fc\u54c8\u987f\u8ddd\u79bb $\\vert x_1-x_2\\vert +\\vert y_1-y_2\\vert$ \u5c31\u7b49\u4e8e\u73b0\u5728\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb $\\max(\\vert x'_1-x'_2\\vert,\\vert y'_1-y'_2\\vert)$\u3002\u53ef\u4ee5\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba\u6216\u51e0\u4f55\u6cd5\u7b80\u5355\u8bc1\u660e\u6210\u7acb\u3002\n\n\u8bbe\u7b2c $i$ \u4e2a\u70b9\u7684\u65b0\u5750\u6807\u4e3a $(X_i+Y_i,X_i-Y_i)$\uff0c\u8bb0\u4e3a $(x_i,y_i)$\u3002\u90a3\u4e48\u7b2c $1$ \u4e2a\u9650\u5236\u4f1a\u53d8\u4e3a\uff1a\n\n- \u4e24\u53ea\u5976\u725b\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $C$\uff0c\u5373 $\\max(\\vert x_1-x_2\\vert,\\vert y_1-y_2\\vert)\\le C$\u3002\n\n\u7531\u4e8e\u6709 $\\max$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $(x_i,y_i)$ \u4ee5 $x_i$ \u4e3a\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\uff0c$y_i$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u5bf9\u4e8e\u540c\u4e00\u7fa4\u7684\u5976\u725b\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u3002\n\n\u6211\u4eec\u7528 $\\text{set}$ \u7ef4\u62a4 $y_i$\uff08\u6bcf\u4e2a\u70b9\uff09\u7684\u503c\uff0c\u6211\u4eec\u6bcf\u6b21\u5728\u63d2\u5165\u7b2c $i$ \u4e2a\u70b9\u65f6\uff0c\u5148\u628a $\\text{set}$ \u4e2d\u6240\u6709\u6ee1\u8db3 $\\vert x_i-x_j\\vert>C$ \u7684\u70b9\u90fd\u5220\u9664\uff0c\u7136\u540e\u7528 $\\text{lower_bound}$ \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $y_i$ \u7684\u70b9\uff0c\u5982\u679c\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u5c31\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76\u8d77\u6765\u3002\u518d\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e $y_i$ \u7684\u70b9\uff0c\u8fdb\u884c\u76f8\u540c\u5408\u5e76\u64cd\u4f5c\u3002\n\n\u6700\u540e\u6211\u4eec\u8bc1\u660e\u5176\u4ed6\u7684\u70b9\u4e0d\u9700\u8981\u548c $i$ \u5408\u5e76\u3002\n\n\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e $y_j$ \u7684\u70b9 $k$ \u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6 $y_k-y_i\\le C$\uff0c\u90a3\u4e48 $y_k-y_j\\le y_k-y_i\\le C$\uff0c\u90a3\u4e48\u5728\u5904\u7406 $j$ \u6216 $k$ \u65f6\u4e00\u5b9a\u4f1a\u628a $k$ \u5408\u5e76\u8fdb\u6765\uff08\u8fd9\u53d6\u51b3\u4e8e $x_j$ \u548c $x_k$ \u7684\u5927\u5c0f\uff09\uff0c\u6240\u4ee5\u4e0d\u5fc5\u5408\u5e76\u4e86\u3002\u5bf9\u4e8e\u5c0f\u4e8e\u7684\u90e8\u5206\u8bc1\u660e\u540c\u7406\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n\\cdot\\alpha(n)\\log n)$\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <set>\ntypedef std::pair<long long,int> pli;\ntypedef std::pair<long long,long long> pll;\n#define mk std::make_pair\n\nconst int N=1e5+5;\nint n,C,fa[N],cnt[N];\npll a[N];\nstd::set<pli> s;\n\nint find(int x) {\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y) {\n\tfa[find(x)]=find(y);\n}\nint main() {\n\tscanf(\"%d%d\",&n,&C);\n\tfor(int i=1;i<=n;++i) {\n\t\tint X,Y;\n\t\tscanf(\"%d%d\",&X,&Y);\n\t\ta[i]=mk(X+Y,X-Y),fa[i]=i;\n\t}\n\tstd::sort(a+1,a+n+1);\n\ts.insert(mk(-1LL<<60,0)),s.insert(mk(1LL<<60,0));\n\ts.insert(mk(a[1].second,1));\n\tfor(int l=1,i=2;i<=n;++i) {\n\t\twhile(a[i].first-a[l].first>C) s.erase(mk(a[l].second,l)),++l;\n\t\tstd::set<pli>::iterator it=s.lower_bound(mk(a[i].second,0));\n\t\tif(it->first-a[i].second<=C) merge(i,it->second);\n\t\t--it;\n\t\tif(a[i].second-it->first<=C) merge(i,it->second);\n\t\ts.insert(mk(a[i].second,i));\n\t}\n\tint ans=0,mx=0;\n\tfor(int i=1;i<=n;++i) ans+=(find(i)==i),mx=std::max(mx,++cnt[find(i)]);\n\tprintf(\"%d %d\\n\",ans,mx);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1549596318,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods\u3011"
    },
    {
        "content": "\u9996\u5148 $\\mathbf O(n^2)$ \u5e94\u8be5\u90fd\u4f1a\u505a\u3002\u6211\u4eec\u8003\u8651\u5c06\u70b9\u5206\u522b\u6309 $x$ \u3001 $y$ \u5750\u6807\u6392\u5e8f\uff0c\u4ec5\u548c\u6bcf\u4e2a\u6570\u4e4b\u540e $800$ \u4e2a\u6bd4\u8f83\uff0c\u5c06\u8ddd\u79bb\u5408\u9002\u7684\u70b9\u5168\u90e8\u5408\u5e76\u7684\u6982\u7387\u5f88\u5927\u3002\u5c24\u5176\u662f\u6839\u636e\u8fd9\u9898\u7684\u6027\u8d28\u6bcf\u4e2a\u70b9\u53ea\u9700\u4e0e\u51e0\u4e2a\u70b9\u5408\u5e76\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u3002   \n\nAC\u4ee3\u7801\uff1a   \n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cctype>\n#include<algorithm>\n#include<cstring>\nconst int N=100010;\n//\u5feb\u8bfb\u677f\u5b50\uff08\u7701\u7565\uff09\nint fa[N];\nint find(const int &x){return fa[x]>0?fa[x]=find(fa[x]):x;}\ninline void un(int x,int y)\n{\n\tx=find(x);y=find(y);\n\tif(x==y)return;\n\tif(fa[x]>fa[y])\n\t\tfa[y]+=fa[x],fa[x]=y;\n\telse fa[x]+=fa[y],fa[y]=x;\n}\nint n,m,x[N],y[N],p[N],ans,tot;\nbool cmp1(const int &a,const int &b){return x[a]<x[b];}\nbool cmp2(const int &a,const int &b){return y[a]<y[b];}\ninline int iabs(const int x){return x<0?-x:x;}\nint main()\n{\n\tn=In::readu();m=In::readu();\n\tmemset(fa,-1,sizeof fa);\n\tfor(register int i=1;i<=n;i++)\n\tx[i]=In::readu(),y[i]=In::readu(),p[i]=i;\n\tstd::sort(p+1,p+1+n,cmp1);\n\tfor(register int i=1;i<=n;i++)\n\tfor(register int j=1;j<=800;j++)\n\t{\n\t\tif(i+j>n)break;\n\t\tif((x[p[i+j]]-x[p[i]])+iabs(y[p[i]]-y[p[i+j]])<=m)un(p[i],p[i+j]);\n\t}\n\tstd::sort(p+1,p+1+n,cmp2);\n\tfor(register int i=1;i<=n;i++)\n\tfor(register int j=1;j<=833;j++)\n\t{\n\t\tif(i+j>n)break;\n\t\tif((y[p[i+j]]-y[p[i]])+iabs(x[p[i]]-x[p[i+j]])<=m)un(p[i],p[i+j]);\n\t}\n\tfor(register int i=1;i<=n;i++){tot+=(fa[i]<0);if(ans>fa[i])ans=fa[i];}\n\tOut::print(tot);Out::print(ans);Out::flush();\n\treturn 0;\n}\n```\n\n\u7a0d\u5fae\u6709\u70b9\u5361\u5e38\u3002\u3002\u3002   \n\n\u5982\u679c\u8fd8\u662f\u4e0d\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u5c06\u5750\u6807\u8f74\u65cb\u8f6c $45\u00b0$ \u6392\u5e8f\u4e4b\u7c7b\u7684\u3002",
        "postTime": 1600334989,
        "uid": 35137,
        "name": "a___",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]Cow Neighborhoods G\u3011"
    },
    {
        "content": "[\u6d1b\u8c37\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2906)\n\n\u9898\u5916\u8bdd\uff1a\u7b2c\u4e00\u6b21\u542c\u8bf4\u66fc\u54c8\u987f\u8ddd\u79bb\u8f6c\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\n\n### Solution\n\n\u9996\u5148\u660e\u786e\uff1a\u56e0\u4e3a\u6761\u4ef6 $2$ \u8bf4\u7684\u975e\u5e38\u663e\u773c\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\u62ff\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u6bcf\u53ea\u725b\u4e4b\u95f4\u7684\u7fa4\u548c\u5927\u5c0f\u3002\n\n\u5148\u60f3\u6700\u6734\u7d20\u7684\u65b9\u6cd5\uff0c\u679a\u4e3e\u6bcf\u4e24\u53ea\u725b\u4e4b\u95f4\u662f\u5426\u6ee1\u8db3\u6761\u4ef6 $1$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \u663e\u7136\u4e0d\u884c\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u770b\u5230\u6761\u4ef6 $1$ \u4e2d\u6709\u4e00\u4e2a**\u66fc\u54c8\u987f\u8ddd\u79bb**\uff0c\u5982\u679c\u719f\u6089\u8fd9\u79cd\u5957\u8def\uff0c\u53ef\u4ee5\u81ea\u7136\u7684\u60f3\u5230\u8f6c\u5316\uff1b\u5982\u679c\u4e0d\u719f\u6089\uff0c\u505a\u4e86\u8fd9\u4e2a\u9898\u4e5f\u5c31\u719f\u6089\u4e86(\u25cf'\u25e1'\u25cf)\n\n~~\uff08\u5176\u5b9e\u6211\u4e5f\u4e0d\u719f\uff0c\u4f46\u662f\u8fd9\u771f\u7684\u662f\u5957\u8def\uff0c\u5c31\u8ddf\u628a\u9898\u89e3\u7838\u4f60\u8138\u4e0a\u4e00\u6837\uff09~~\n\n\u8003\u8651\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u8f6c\u5316\u4e3a\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\uff1a\n\n\u8bbe\u4e00\u53ea\u725b\u539f\u6765\u7684\u5750\u6807\u4e3a $(x_i,y_i)$ \uff0c\u73b0\u5728\u662f $(x_i',y_i')=(x_i+y_i,x_i-y_i)$ \uff0c\u90a3\u4e48\u66fc\u54c8\u987f\u8ddd\u79bb\u516c\u5f0f\n$$\n|x_i-x_j|+|y_i-y_j|=\\frac 12(|x_i'+y_i'-x_j'-y_j'|+|x_i'-y_i'-x_j'+y_j'|)=\\max(|x_i'-x_j'|,|y_i'-y_j'|)\n$$\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u70b9\u7684\u5750\u6807\u5316\u6210 $(x',y')$ \u7684\u5f62\u5f0f\uff0c\u7136\u540e\u6309 $x'$ \u6392\u5e8f\uff0c\u7528\u961f\u5217\u7ef4\u62a4 $|x_i'-x_j'|\\leq C$ \uff0c\u7528 $\\operatorname{set}$ \u7ef4\u62a4 $y'$ \n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u590d\u6742\u5ea6\u5462\uff1f\n\n\u56e0\u4e3a\u53ea\u9700\u8981\u5224\u65ad\u65b0\u7684 $x'$ \u7684\u524d\u9a71\u548c\u540e\u7ee7\u662f\u5426\u6ee1\u8db3\u65b0\u6761\u4ef6\u5373\u53ef\uff0c\u6240\u4ee5\u662f $O(n\\log n)$ \u7684\u3002(\u6709\u4e8c\u5206)\n\n\u7b54\u6848\u53ea\u9700\u8981\u7b80\u5355\u5224\u65ad\u5373\u53ef\u3002\n\n\uff08\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801(\\*^\u25bd^*)\uff09\n\n### Code\n\n```c++\n#include<bits/stdc++.h>\n#define PII pair<int,int>\n\nusing namespace std;\nconst int N=100010,INF=1e9;\nset<PII> S;\nqueue<int> q;\nPII a[N];\nint fa[N],siz[N],n,c,cnt,maxx;\n\nint find(int x){\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&c);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d\",&a[i].first,&a[i].second);\n        a[i].first+=a[i].second;\n        a[i].second=a[i].first-2*a[i].second;\n        fa[i]=i;    //\u6ce8\u610f\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\n    }\n    sort(a+1,a+n+1);\n    S.insert(make_pair(-INF,0)),S.insert(make_pair(INF,0));\n    q.push(1); S.insert(make_pair(a[1].second,1));\n    for(int i=2;i<=n;i++){\n        while(!q.empty()&&a[i].first-a[q.front()].first>c){\n            int u=q.front(); q.pop();\n            S.erase(make_pair(a[u].second,u));\n        }\n        set<PII>::iterator it=S.lower_bound(make_pair(a[i].second,0));\n        if(it->second&&it->first-a[i].second<=c){\n            int u=find(it->second),v=find(i);\n            if(u!=v) fa[u]=v;\n        }\n        if((--it)->second&&a[i].second-it->first<=c){\n            int u=find(it->second),v=find(i);\n            if(u!=v) fa[u]=v;\n        }\n        q.push(i),S.insert(make_pair(a[i].second,i));\n    }\n    for(int i=1;i<=n;i++){\n        if(find(i)==i) cnt++;\n        siz[find(i)]++;\n        maxx=max(maxx,siz[find(i)]);\n    }\n    printf(\"%d %d\\n\",cnt,maxx);\n    return 0;\n}\n```\n\n",
        "postTime": 1604413102,
        "uid": 272143,
        "name": "\u662f\u4e2a\u6c49\u5b50",
        "ccfLevel": 4,
        "title": "P2906 [USACO08OPEN]Cow Neighborhoods G"
    },
    {
        "content": "QAQ\u771f\u662f\u795e\u9898\u3002\n\n\u6211\u4eec\u628a\u70b9\u5bf9\u5750\u6807\u8f6c\u5316\u4e3a(x+y,x-y),\u90a3\u4e48\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u8f6c\u5316\u4e3a\u4e86max(|x1-x2|,|y1-y2|);\n\u6211\u4eec\u628a\u70b9\u6309\u7167x\u5750\u6807\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u4e2d\u5143\u7d20\u7684x\u5750\u6807\u5dee\u7684\u7edd\u5bf9\u503c\u662f\u4e0d\u5927\u4e8eC\u7684\u3002\u7136\u540e\u7528\u5e73\u8861\u6811\uff08\u6216\u8005multiset\uff09\uff0c\u7ef4\u62a4y\u5750\u6807\uff0c\u6bcf\u6b21\u67e5\u627ey\u5750\u6807\u524d\u9a71\u540e\u7ee7\uff0c\u5e76\u68c0\u9a8cy\u5750\u6807\u5dee\u503c\u662f\u5426\u5927\u4e8eC\uff0c\u5982\u679c\u4e0d\u5927\u4e8e\uff0c\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u8fde\u63a5\u5f53\u524d\u70b9\u548c\u5176y\u5750\u6807\u524d\u9a71\u540e\u7ee7\uff0c\u6700\u540e\u901a\u8fc7\u7edf\u8ba1\u5e76\u67e5\u96c6\u6570\u91cf\u548c\u6bcf\u4e2a\u5e76\u67e5\u96c6\u5927\u5c0f\u6765\u5f97\u5230\u7b54\u6848\u3002\n\nmultiset\u51e0\u4e2a\u7528\u6cd5\uff1a\n\n```cpp\ns.erase(s.find(x)),\u5220\u9664\u4e00\u4e2a\u5927\u5c0f\u4e3ax\u7684\u5143\u7d20\u3002\ns.erase(x),\u5220\u9664\u6240\u6709\u5927\u5c0f\u4e3ax\u7684\u5143\u7d20\u3002\ns.lower_bound(x)\uff0c\u548clower_bound(s.begin(),s.end(),x)\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u5feb\u4e00\u4e9b\u3002\ns.insert(x)\u63d2\u5165\u5143\u7d20x\n```\n\u5929\u54ea\u8fd9\u4e2a\u601d\u8def\u592a6\u4e86\uff0c%%%\u534a\u4e2a\u5c0f\u65f6\u505a\u51fa\u6765\u7684boshi\u5927\u4f6c\u3002\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<climits>\n#include<set>\nusing namespace std;\n#define LL long long\nLL read(){//\u8bfb\u5165\u4f18\u5316\n    LL w=1,q=0;char ch=' ';\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')q=q*10+(LL)(ch-'0'),ch=getchar();\n    return q*w;\n}\nconst int N=100005;\nint n,f[N],tot[N],ans,mx;LL c;\nstruct node{LL x,y;int id;}a[N];\nmultiset<node>s;\nmultiset<node>::iterator it;\nbool cmp(node a,node b){return a.x<b.x;}\nbool operator<(node a,node b){return a.y<b.y;}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6765\u4f7f\u7528multiset\nint find(int x){\n    if(x==f[x])return x;\n    f[x]=find(f[x]);return f[x];\n}\nvoid uni(int x,int y){//\u5e76\u67e5\u96c6\u8fde\u63a5\n    int r1=find(x),r2=find(y);\n    if(r1!=r2)tot[r2]+=tot[r1],tot[r1]=0,f[r1]=r2,--ans;\n}\nvoid solve(){\n    node kl;int i,he=1;\n    sort(a+1,a+1+n,cmp);s.insert(a[1]);\n    kl.x=0,kl.id=0,kl.y=1e10,s.insert(kl);//\u9632\u6b62\u56e0\u4e3a\u4e0d\u5b58\u5728\u524d\u9a71\u540e\u7ee7\uff0c\u6307\u9488\u7206\u70b8\n    kl.x=0,kl.id=0,kl.y=-1e10,s.insert(kl);\n    for(i=2;i<=n;++i){\n        while(a[i].x-a[he].x>c)s.erase(s.find(a[he])),++he;//\u79fb\u52a8\u961f\u9996\n        it=s.lower_bound(a[i]);//\u67e5\u627e\u5143\u7d20\n        kl=*it;\n        if(kl.y-a[i].y<=c)uni(a[i].id,kl.id);\n        kl=*--it;\n        if(a[i].y-kl.y<=c)uni(a[i].id,kl.id);\n        s.insert(a[i]);//\u63d2\u5165\u5143\u7d20\n    }\n}\nint main(){\n    int i,j;LL kx,ky;\n    n=read(),c=read();ans=n;\n    for(i=1;i<=n;++i){\n        f[i]=i,tot[i]=1,kx=read(),ky=read();\n        a[i].x=kx+ky,a[i].y=kx-ky,a[i].id=i;\n    }\n    solve();\n    for(i=1;i<=n;++i)mx=max(tot[i],mx);\n    printf(\"%d %d\",ans,mx);\n    return 0;\n}\n```",
        "postTime": 1506821763,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods\u3011"
    },
    {
        "content": "# \u9898\u76ee\u63cf\u8ff0\uff1a\n\u4e00\u4e9b\u4e86\u89e3\u5976\u725b\u7684\u4eba\u6765\u5230\u4e86FJ\u7684\u519c\u573a\u89c2\u5bdfFJ\u7684$N (1 \\leqslant N \\leqslant 100,000)$\u5934\u5976\u725b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7f16\u53f7\u4e3a$1..N$\u3002\u6bcf\u5934\u725b\u5728\u7267\u573a\u91cc\u90fd\u6709\u4ed6\u5355\u72ec\u7684\u5750\u6807$X,Y(1\\leqslant X ,Y \\leqslant 1,000,000,000)$\u3002\n\n\u4e24\u5934\u725b\u5982\u679c\u6ee1\u8db3\u4e86\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\u4fbf\u662f\u90bb\u5c45\uff1a\n\n1.\u5982\u679c\u4ed6\u4eec\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5c0f\u4e8e$C (1 \\leqslant C \\leqslant 1,000,000,000)$.\u66fc\u54c8\u987f\u8ddd\u79bb\u662f$|x_1-x_2| + |y_1-y_2|$\u3002\n\n2.\u5982\u679c$Z$\u662f$A$\u7684\u90bb\u5c45\uff0c\u540c\u65f6$Z$\u4e5f\u662f$B$\u7684\u90bb\u5c45\uff0c\u90a3\u4e48$A$\u5c31\u662f$B$\u7684\u90bb\u5c45\u3002\n\n# \u89e3\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5f88\u70e6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8f6c\u6362\u6210\u5207\u6bd4\u96ea\u592b\u5750\u6807\u7cfb\u3002\n\n\u4e0d\u61c2\u7684\u6233\u8fd9\u91cc \uff1a[\u5750\u6807\u8f74\u8f6c\u6362](https://www.luogu.org/blog/HuangYuhan-Yuzhe/zuo-biao-ji-zhuai-huan)\n\n\u8f6c\u6362\u5750\u6807\u7cfb\u540e\uff0c\u6211\u4eec\u5148\u5bf9\u6240\u6709\u70b9\u6309pair\u7684\u6bd4\u8f83\u51fd\u6570\u4e00\u6837\u6392\u5e8f\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86$x$\u5750\u6807\u5355\u8c03\u4e0d\u4e0b\u964d\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u4ece\u5de6\u5f80\u53f3\u8ba8\u8bba\u3002\n\n\u5bf9\u4e8e\u7b2c$i$\u4e2a\u7ed3\u70b9,\u6211\u4eec\u53ea\u9700\u8981\u8ba8\u8bba$x_j+C\\leqslant x_i$\u7684$j$\u3002\n\n\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u70b9\u4e2d$y$\u79bb$y_i$\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\u5c31\u884c\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u5176\u4ed6\u70b9\u5982\u679c\u4e5f\u80fd\u5230\u8fbe$i$\u53f7\u7ed3\u70b9\uff0c\u90a3\u4e48\u4ed6\u4e4b\u524d\u4e00\u5b9a\u4f1a\u88ab\u548c\u90a3\u4e24\u4e2a\u7ed3\u70b9\u5176\u4e2d\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002\n\n\u540c\u65f6\u96c6\u5408\u5408\u5e76\u95ee\u9898~~\u663e\u7136~~\u7528\u5e76\u67e5\u96c6\u3002\n\n\u518d\u627e\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u600e\u4e48\u5feb\u901f\u7684\u627e\u5462\uff1f\n\n\u4e8c\u5206\u67e5\u627e\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u4e8c\u5206\u67e5\u627e\u7684\u4e1c\u897f\u53c8\u662f\u52a8\u6001\u7684\uff0c\u9700\u8981\u5220\u9664\u548c\u63d2\u5165\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u60f3\u5230\u4e86STL\u4e2d\u7684set\n\n\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u8ba8\u8bba\u662f\u5426\u627e\u5230\u6ca1\u4ee5\u53ca\u65f6\u5019\u5dee\u503c\u5c0f\u4e8e\u7b49\u4e8e$C$\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlog_2n)$\n\n```cpp\n    #include<bits/stdc++.h>\n    using namespace std;\n    const int maxn=100000+5;\n    typedef long long ll;\n    typedef pair<ll,ll> P;\n    P node[maxn];\n    int fa[maxn],cnt[maxn];\n    int getfa(int v)\n    {return fa[v]==v?v:fa[v]=getfa(fa[v]);}\n    inline void merge(int x,int y)\n    {\n    \tint fx=getfa(x);\n    \tint fy=getfa(y);\n    \tif(fx!=fy){fa[fx]=fy;cnt[fy]+=cnt[fx];}\n    }\n    int main()\n    {\n    \tint n,x,y;\n    \tll C;\n    \tscanf(\"%d %lld\",&n,&C);\n    \tfor(int i=1;i<=n;i++)\n    \t{\n    \t\tscanf(\"%d %d\",&x,&y);\n    \t\tnode[i].first=x+y;\n    \t\tnode[i].second=x-y;\n    \t\tfa[i]=i;cnt[i]=1;\n    \t}\n    \tsort(node+1,node+1+n);\n    \tset<P> s;\n    \tset<P>::iterator it;\n    \tint j=0;\n    \tfor(int i=1;i<=n;i++)\n    \t{\n    \t\twhile(!s.empty()&&j+1<i&&node[j+1].first+C<node[i].first)s.erase(s.find(make_pair(node[j+1].second,j+1))),j++;\n    \t\tif(!s.empty())\n    \t\t{\n    \t\t\tit=s.lower_bound(make_pair(node[i].second,0));\n    \t\t\tif(it!=s.end())\n    \t\t\t{\n    \t\t\t\tif(it->first-node[i].second<=C)merge(it->second,i);\n\n    \t\t\t}\n    \t\t\tif(it!=s.begin())\n    \t\t\t{\n    \t\t\t\tit--;\n    \t\t\t\tif(node[i].second-it->first<=C)merge(it->second,i);\n    \t\t\t}\n    \t\t}\n    \t\ts.insert(make_pair(node[i].second,i));\n    \t}\n    \tint ans1=0,ans2=0;\n    \tfor(int i=1;i<=n;i++)\n    \tif(getfa(i)==i)\n    \t{\n    \t\tans1++;\n    \t\tans2=max(ans2,cnt[i]);\n    \t}\n    \tprintf(\"%d %d\",ans1,ans2);\n    \treturn 0;\n    }\n```",
        "postTime": 1569922239,
        "uid": 124631,
        "name": "Huang_Yuhan",
        "ccfLevel": 0,
        "title": "P2906 [USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods(\u5e76\u67e5\u96c6+set+\u5750\u6807\u7cfb\u8f6c\u6362)"
    },
    {
        "content": "---\n\u5173\u4e8e\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u5750\u6807\u8f6c\u5316\u6210$max\\{|x_{i}-x_{j}|,|y_{i}-y_{j}|\\}$\n\u6211\u5728\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86,\u601d\u8def\u5dee\u4e0d\u591a.\n#### \u697c\u4e0a\u5927\u4f6c\u5f88\u5389\u5bb3~\n\n\n---\n### \u4f46...\n##### set\u548cmultiset\u6211\u4e0d\u559c\u6b22,\u56e0\u4e3anoip\u4e0d\u5f00O2\n##### (~~\u5176\u5b9e\u6211\u6839\u672c\u4e0d\u4f1a\u7528~~)\n##### \u4e3a\u5565\u4e0d\u624b\u5199\u5e73\u8861\u6811\u5462?? \n##### \u7528\u7ed3\u6784\u4f53\u5199\u5e73\u8861\u6811\u6211\u8fd8\u662f\u7b2c\u4e00\u56de\n\u5173\u4e8e\u5e73\u8861\u6811,\u5148\u628a\u6a21\u677f\u9898\u505a\u4e86\n[P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\n\n---\n\u76f4\u63a5\u8d34\u4ee3\u7801~\n#### \u7834\u8bb0\u5f55\u5566,187\u884c~\n---\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<cstdio>\nusing namespace std;\n#define N 100010\n#define ll long long\n#define inf 9999999999999//inf\u5f00\u5927\u70b9,\u4e00\u5f00\u59cb\u6211\u6302\u4e86\ninline ll read(){//\u5feb\u8bfb\n\tll x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9'){\n\t    x=(x<<3)+(x<<1)+c-'0';c=getchar();\n\t}\n\treturn x;\n}\nll c,tot[N],ans;\nint f[N];\nint n,cnt,root;\nstruct cow{\n\tll x,y;\n\tint id;\n\tbool operator <(const cow &a)const{\n\t\treturn y<a.y;\n\t}\n\tbool operator >(const cow &a)const{\n\t\treturn y>a.y;\n\t}\n\tbool operator ==(const cow &a)const{\n\t\treturn y==a.y;\n\t}\n\tbool operator >=(const cow &a)const{\n\t\treturn y>=a.y;\n\t}\n}a[N];\nstruct node{\n\tint l,r,val,siz;\n\tcow data;\n}t[N<<1];\nbool cmp(cow a,cow b){\n\treturn a.x<b.x;\n}\nvoid up(int k){\n\tt[k].siz=t[t[k].l].siz+t[t[k].r].siz+1;\n}\nvoid zig(int &k){//\u53f3\u65cb\n\tint tmp=t[k].l;\n\tt[k].l=t[tmp].r;\n\tt[tmp].r=k;\n\tt[tmp].siz=t[k].siz;\n\tup(k);\n\tk=tmp;\n}\nvoid zag(int &k){//\u5de6\u65cb\n\tint tmp=t[k].r;\n\tt[k].r=t[tmp].l;\n\tt[tmp].l=k;\n\tt[tmp].siz=t[k].siz;\n\tup(k);\n\tk=tmp;\n}\nvoid insert(int &k,cow data){//\u63d2\u5165\n\tif(k==0){\n\t\tk=++cnt;\n\t\tt[k].siz=1;\n\t\tt[k].data=data;\n\t\tt[k].val=rand();\n\t\treturn;\n\t}\n\tt[k].siz++;\n\tif(data>=t[k].data){\n\t\tinsert(t[k].r,data);\n\t}\n\telse{\n\t\tinsert(t[k].l,data);\n\t}\n\tif(t[k].l!=0&&t[k].val>t[t[k].l].val){\n\t\tzig(k);\n\t}\n\tif(t[k].r!=0&&t[k].val>t[t[k].r].val){\n\t\tzag(k);\n\t}\n\tup(k);\n}\nvoid del(int &k,cow data){//\u5220\u9664\n\tt[k].siz--;\n\tif(data==t[k].data){\n\t\tif(t[k].l==0&&t[k].r==0){\n\t\t\tk=0;\n\t\t\treturn;\n\t\t}\n\t\tif(t[k].l==0||t[k].r==0){\n\t\t\tk=t[k].l+t[k].r;\n\t\t\treturn;\n\t\t}\n\t\tif(t[t[k].l].val<t[t[k].r].val){\n\t\t\tzig(k);\n\t\t\tdel(t[k].r,data);\n\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\tzag(k);\n\t\t\tdel(t[k].l,data);\n\t\t\treturn;\n\t\t}\n\t}\n\tif(t[k].data>=data){\n\t\tdel(t[k].l,data);\n\t}\n\telse{\n\t\tdel(t[k].r,data);\n\t}\n\tup(k);\n}\nint query_pre(int k,cow data){\n\tif(k==0){\n\t\treturn 0;\n\t}\n\tif(t[k].data>data){\n\t\treturn query_pre(t[k].l,data);\n\t}\n\tint tmp=query_pre(t[k].r,data);\n\tif(tmp==0){\n\t\treturn k; \n\t}\n\treturn tmp;\n}\nint query_suf(int k,cow data){\n\tif(k==0){\n\t\treturn 0;\n\t}\n\tif(t[k].data<data){\n\t\treturn query_suf(t[k].r,data);\n\t}\n\tint tmp=query_suf(t[k].l,data);\n\tif(tmp==0){\n\t\treturn k;\n\t}\n\treturn tmp;\n}\nint getf(int x){\n\tif(f[x]==x)return x;\n\treturn f[x]=getf(f[x]);\n}\nvoid merge(int x,int y){\n\tint r1,r2;\n\tr1=getf(x),r2=getf(y);\n\tif(r1!=r2){\n\t\ttot[r1]+=tot[r2];tot[r2]=0;ans--;\n\t\tf[r2]=r1;\n\t}\n}\nint main(){\n\tn=read();c=read();ans=n;\n\tfor(int i=1;i<=n;i++){\n\t\tll p=read(),q=read();\n\t\ta[i].x=p+q;a[i].y=p-q; \n\t\ta[i].id=i;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++){\n\t\ttot[i]=1;f[i]=i;\n\t}\n\tint head=1;\n\tinsert(root,a[1]);\n\tinsert(root,(cow){0,-inf,0});//\u63d2\u5165\u4fe9\u6781\u9650\u503c\n\tinsert(root,(cow){0,inf,0});\n\tfor(int i=2;i<=n;i++){\n\t\twhile(a[i].x-a[head].x>c){\n\t\t\tdel(root,a[head]);head++;\n\t\t} \n\t\tint pre=query_pre(root,a[i]);//\u67e5\u8be2\u524d\u9a71\n\t\tint suf=query_suf(root,a[i]);//\u67e5\u8be2\u540e\u7ee7\n\t\tif(t[suf].data.y-a[i].y<=c){\n\t\t\tmerge(t[suf].data.id,a[i].id);//\u5408\u5e76\n\t\t}\n\t\tif(a[i].y-t[pre].data.y<=c){\n\t\t\tmerge(t[pre].data.id,a[i].id);\n\t\t}\n\t\tinsert(root,a[i]);\n\t}\n\tll maxx=0;\n\tfor(int i=1;i<=n;i++)maxx=max(maxx,tot[i]);\n\tprintf(\"%d %lld\\n\",ans,maxx);\n\treturn 0;\n}\n\n\n```",
        "postTime": 1549803454,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods\u3011"
    },
    {
        "content": "\u672c\u9898\u9700\u8981\u6c42\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u5e76\u4e14\u5728\u5bfb\u627e\u90bb\u5c45\u7684\u65f6\u5019\u53ea\u8981\u627e\u8ddd\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u5976\u725b\u770b\u770b\u4e0e\u5b83\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7fa4\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u5e73\u8861\u6811\u6c42\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u4f46\u662f\u6c42\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u516c\u5f0f|X1-X2|+|Y1-Y2|\u5f88\u96be\u7ef4\u62a4\u3002\n\u6240\u4ee5\u6211\u4eec\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u8bb2\u6bcf\u4e2a\u70b9\u53d8\u4e3a\uff08x+y\uff0cx-y\uff09\uff0c\u8fd9\u6837\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u662fmax\uff08|X1-X2|\uff0c|Y1-Y2|\uff09\u3002\u6bcf\u6b21\u6bd4\u8f83\u53ea\u8981\u6bd4\u8f83\u4e24\u4e2a\u70b9\u7684\u4e00\u4e2a\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u961f\u5217\u7ef4\u62a4x\uff0c\u7528\u4e00\u4e2a\u5e73\u8861\u6811\uff08\u6216\u8005multiset\uff09\u53bb\u7ef4\u62a4y\u3002\u627e\u5230\u5408\u6cd5\u7684\u5c31\u7528\u5e76\u67e5\u96c6\u5c06\u4e24\u4e2a\u5408\u5728\u4e00\u8d77\u3002\n\n\n```cpp\n//Bzoj1604  Luogu2906\n#include<bits/stdc++.h>\n#define MAXN 100005\nconst long long INF=(1ll<<60);\n#define ll long long\nusing namespace std;\ninline void read(ll &x){\n     x=0;int t=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')t=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x=x*t;\n}\nll N,father[MAXN],ans;\nll tot[MAXN],maxt,C;\nstruct Node{\n    ll x,y;\n    int id;\n    bool operator <(const Node p)const{\n        return y<p.y;\n    }\n}a[MAXN];\nbool cmp(Node p,Node q){\n    return p.x<q.x;\n}\nint find(ll p){return father[p]==p?p:father[p]=find(father[p]);}\nvoid merge(ll p,ll q){\n    int fp=find(p),fq=find(q);\n    if(fp!=fq){\n        tot[fp]+=tot[fq],tot[fq]=0,ans--;\n        father[fq]=fp;\n    }\n}\nmultiset<Node> b;\nmultiset<Node>::iterator it;\nint main()\n{\n    read(N);read(C);\n    for(int i=1;i<=N;i++){\n        ll p,q;read(p);read(q);\n        a[i]=(Node){p+q,p-q,i};\n    }\n    ans=N;    for(int i=1;i<=N;i++)tot[i]=1,father[i]=i;    //init\n    sort(a+1,a+N+1,cmp);\n    int head=1;Node k;                                    //\u6309x\u6392\u5e8f - \u961f\u5217\n    b.insert(a[head]);    \n    k=(Node){0, INF,0};b.insert(k);\n    k=(Node){0,-INF,0};b.insert(k);\n    for(int i=2;i<=N;i++){\n        while(a[i].x-a[head].x>C)b.erase(b.find(a[head])),head++;\n        it=b.lower_bound(a[i]);\n        k=*it;\n        if(k.y-a[i].y<=C)merge(k.id,a[i].id);\n        k=*--it;\n        if(a[i].y-k.y<=C)merge(k.id,a[i].id);\n        b.insert(a[i]); \n    }\n    for(int i=1;i<=N;i++)maxt=max(maxt,tot[i]);\n    printf(\"%lld %lld\\n\",ans,maxt);\n    return 0; \n}\n```\n\u7ed9\u535a\u5ba2\u6253\u5e7f\u544ahttp://www.cnblogs.com/Elfish/p/7632538.html",
        "postTime": 1507710541,
        "uid": 24693,
        "name": "HiJ1m",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods\u3011"
    },
    {
        "content": "\u9996\u5148\u5c06\u8ddd\u79bb\u8f6c\u5316\u6210\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\uff0c\u5c06\u70b9 $(x,y)$ \u53d8\u4e3a $(x',y')$\uff0c\u5176\u4e2d $x'=x+y,y'=x-y$\u3002\n\n\u753b\u4e00\u753b\u56fe\uff0c\u53d1\u73b0 $\\max(|x_i-x_j|,|y_i-y_j|)\\leq C$ \u8fd9\u4e2a\u9650\u5236\u6846\u5b9a\u4e86\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5982\u679c\u679a\u4e3e $(x_i,y_i)$\uff0c\u5219\u9700\u8981\u5411\u8fd9\u4e2a\u6b63\u65b9\u5f62\u5185\u6bcf\u4e2a\u70b9 $(x_j,y_j)$ \u8fde\u4e00\u6761\u8fb9\u3002\u4f46\u662f\u8fd9\u6837\u4f1a\u9020\u6210\u91cd\u590d\u8fde\u8fb9\uff0c\u65e0\u6cd5\u627f\u53d7\u3002\n\n\u51b7\u9759\u601d\u8003\u8fc7\u540e\uff0c\u53d1\u73b0\u5b83\u53ea\u8981\u6c42\u8fde\u901a\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u53bb\u6389\u4e00\u4e9b\u5197\u4f59\u7684\u8fb9\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c06\u70b9\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u540e\uff0c\u8bbe\u5f53\u524d\u679a\u4e3e\u7684\u70b9\u4e3a $(x,y)$\uff0c\u4ec5\u5c06\u70b9 $(x,y)$ \u4e0e $(x_1,y_1),(x_2,y_2)$ \u8fde\u8fb9\uff0c\u5176\u4e2d $x-C\\leq x_1,x_2\\leq x+C$\uff0c$y_1$ \u662f $y$ \u7684\u524d\u9a71\u4e14 $y-C\\leq y_1\\leq y+C$\uff0c$y_2$ \u662f $y$ \u7684\u540e\u7ee7\u4e14 $y-C\\leq y_2\\leq y+C$\u3002\u6b63\u786e\u6027\u57fa\u4e8e\u9898\u4e2d\u5b9a\u4e49\u7684\u7fa4\u8fd9\u4e00\u6982\u5ff5\u5177\u6709\u4f20\u9012\u6027\u3002\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#include<functional>\n#include<set>\n#define int ll\n#define mp(x,y) std::make_pair(x,y)\ntypedef long long ll;\ntypedef std::pair<ll,ll> pr;\nstd::multiset<pr> s;\nstruct node {\n\tint x,y;\n}a[100005];\nint size[100005],fa[100005],q[100005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();} \n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline bool cmp(const node &x,const node &y) {return x.x<y.x;}\ninline int max(const int &x,const int &y) {return x>y? x:y;}\ninline int find(int x) {return x==fa[x]? x:fa[x]=find(fa[x]);}\ninline void merge(int x,int y) {\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy) {\n\t\tsize[fx]+=size[fy];\n\t\tfa[fy]=fx;\n\t}\n}\nsigned main() {\n\tint n=read(),lim=read(),tot=0,mx=0;\n\tint hd=1,tl=0;\n\tfor(register int i=1;i<=n;++i) {\n\t\tint x=read(),y=read(); \n\t\tfa[i]=i; size[i]=1;\n\t\ta[i].x=x+y; a[i].y=x-y; \n\t}\n\tstd::sort(a+1,a+1+n,cmp);\n\ts.insert(mp(1ll<<52,0));\n\ts.insert(mp(-(1ll<<52),0));\n\tint cur=1;\n\tfor(register int i=1;i<=n;++i) {\n   \t\twhile(hd<=tl&&a[q[hd]].x<a[i].x-lim) {//x_j<x_i-lim x_j>=x_i-lim\n\t\t\tstd::multiset<pr>::iterator it=s.lower_bound(mp(a[q[hd]].y,0));\n\t\t\ts.erase(it); ++hd;\n\t\t}\n\t\tstd::multiset<pr>::iterator it=s.lower_bound(mp(a[i].y,0));\n\t\tif(it->first-a[i].y<=lim) merge(it->second,i);\n\t\t--it;\n\t\tif(a[i].y-it->first<=lim) merge(it->second,i);\n\t\ts.insert(mp(a[i].y,i)); q[++tl]=i;\n\t}\n\tfor(register int i=1;i<=n;++i) {\n\t\tif(fa[i]==i) {\n\t\t\t++tot;\n\t\t\tmx=max(mx,size[i]);\n\t\t}\n\t}\n\tprintf(\"%lld %lld\\n\",tot,mx);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1609237497,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]Cow Neighborhoods G\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u53ea\u5976\u725b\uff0c\u6bcf\u53ea\u5976\u725b\u90fd\u6709\u4e00\u4e2a**\u72ec\u4e00\u65e0\u4e8c**\u7684\u5750\u6807 $(x_i,y_i)$\u3002\u5f53\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6**\u4e4b\u4e00**\u65f6\uff0c\u4e24\u53ea\u5976\u725b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7fa4\uff1a\n\n1.\u4e24\u53ea\u5976\u725b\u7684**\u66fc\u54c8\u987f\u8ddd\u79bb**\u4e0d\u8d85\u8fc7 $C$\uff0c\u5373 $|x_i-x_j|+|y_i-y_j|\\leq C$\u3002\n\n2.\u4e24\u53ea\u5976\u725b\u6709\u4e00\u4e2a**\u5171\u540c\u7684\u90bb\u5c45**\uff0c\u5373\u5b58\u5728\u4e00\u5934\u5976\u725b $k$\uff0c\u4f7f\u5f97 $i$ \u548c $k$\uff0c$k$ \u548c $j$ \u5747\u5c5e\u4e8e\u540c\u4e00\u7fa4\u3002\n\n\u6c42\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u7fa4\uff0c\u4ee5\u53ca\u6700\u5927\u7684\u7fa4\u91cc\u6709\u591a\u5c11\u5976\u725b\u3002\n\n## \u601d\u8def\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u4e00\u4e2a\u7fa4\u4e2d\uff0c\u6bcf\u5934\u5976\u725b\u53ea\u9700\u5b58\u5728\u4e00\u5934\u5976\u725b\u4e0e\u5b83\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $C$ \u5373\u53ef\uff0c\u800c\u4e0d\u662f\u6240\u6709\u5976\u725b\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u4e0d\u8d85\u8fc7 $C$\u3002\u4e5f\u5c31\u662f\u672c\u9898\u4e2d\u7684\u7fa4\u5177\u6709**\u4f20\u9012\u6027**\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u7528**\u5e76\u67e5\u96c6**\u6765\u6807\u8bb0\u6bcf\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u7fa4\u3002\n\n\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u7edd\u5bf9\u503c\u7b26\u53f7\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u76f4\u63a5\u6c42\u89e3\u6709\u4e9b\u56f0\u96be\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u7528\u5230**\u66fc\u54c8\u987f\u8ddd\u79bb\u8f6c\u5316\u6210\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb**\u7684\u6280\u5de7\uff0c\u5373\u5c06\u539f\u5750\u6807 $(x,y)$ \u8f6c\u5316\u4e3a $(x+y,x-y)$\uff0c\u5728\u65b0\u5750\u6807\u7cfb\u4e2d\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u5c31\u662f\u539f\u5750\u6807\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\uff08\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u770b\u4e00\u4e0b[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/SGCollin/p/9636955.html)\uff09\n\n\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u7684\u5b9a\u4e49\u4e3a $\\max(|x_i-x_j|,|y_i-y_j|)$\uff0c\u6b64\u65f6\u867d\u7136\u53ea\u662f\u5c06\u6c42\u548c\u6539\u6210\u4e86\u53d6\u6700\u5927\u503c\uff0c\u4f46\u662f\u7701\u53bb\u4e86\u4e0d\u5c11\u9ebb\u70e6\u3002\n\n\u5728\u65b0\u5750\u6807\u7cfb\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $(x_i,y_i)$\uff0c\u5c31\u53ef\u4ee5\u5728\u6240\u6709\u6ee1\u8db3 $|x_i-x_j| \\leq C$ \u7684\u5750\u6807\u4e2d\uff0c\u627e\u5230\u4e0e\u5176 $y_i$ \u76f8\u5dee\u6700\u5c0f\u7684 $y_j$\uff0c\u5373 $y_i$ \u7684**\u524d\u9a71\u548c\u540e\u7ee7**\uff0c\u90a3\u4e48\u5982\u679c\u6ee1\u8db3 $|y_i-y_j| \\leq C$ \uff0c\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u70b9\u653e\u5230\u540c\u4e00\u4e2a\u7fa4\u4e2d\u3002\u4e0b\u9762\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\u8be5\u505a\u6cd5\u7684\u6b63\u786e\u6027\uff1a\n\n\u5f53 $|y_i-y_j| > C$ \u65f6\uff0c\u4e0e $y_i$ \u503c\u76f8\u5dee\u6700\u5c0f\u7684\u70b9\u90fd\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u5176\u4ed6\u70b9\u5c31\u66f4\u4e0d\u53ef\u80fd\u6ee1\u8db3\u4e86\u3002\n\n\u5f53 $|y_i-y_{k}| \\leq C$ \u65f6\uff08$k$ \u70b9\u4e3a $j$ \u70b9\u7684\u524d\u9a71\uff09\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u70b9\uff0c\u9664\u4e86\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u8fd8\u6709\u5176\u4ed6\u70b9\u6ee1\u8db3\u8981\u6c42\uff08\u8fd9\u91cc\u4e3e\u7684\u662f\u524d\u9a71\u7684\u4f8b\u5b50\uff0c\u7edd\u5bf9\u503c\u7b26\u53f7\u5176\u5b9e\u53ef\u4ee5\u62ff\u8d70\uff0c\u540e\u7ee7\u7684\u8bc1\u660e\u540c\u7406\uff09\u3002\u663e\u7136 $|y_j-y_{k}| \\leq C$ \u4e5f\u662f\u6210\u7acb\u7684\uff0c\u90a3\u4e48\u5728\u6b64\u524d\u5c31\u5df2\u7ecf\u628a $j$ \u548c $k$ \u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76\u4e86\uff0c\u6b64\u65f6\u53ea\u8981\u628a\u7b2c $j$ \u4e2a\u70b9\u548c\u7b2c $i$ \u4e2a\u70b9\u5408\u5e76\uff0c$i$ \u548c $k$ \u5c31\u5728\u540c\u4e00\u4e2a\u7fa4\u4e2d\u4e86\u3002\n\n\u5f53 $|y_i-y_{k}| > C$ \u65f6\u3002\u6839\u636e\u672c\u9898\u4e2d\u7fa4\u7684**\u4f20\u9012\u6027**\uff0c\u53ea\u8981\u6ee1\u8db3 $|y_i-y_j| \\leq C,|y_j-y_k| \\leq C$\uff0c\u90a3\u4e48 $i$ \u70b9\u548c $j$ \u70b9\u4e5f\u5c31\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7fa4\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48 $i$ \u548c $j$ \u5c31\u4e0d\u4f1a\u5408\u5e76\uff1b\u5982\u679c\u4e0d\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48 $j$ \u5c31\u4e0d\u4f1a\u548c $k$ \u5408\u5e76\u3002\u90a3\u4e48 $i$ \u548c $j$ \u5c31\u4e0d\u4f1a\u5728\u4e00\u4e2a\u7fa4\u4e2d\u4e86\u3002\n\n\n\n------------\n\n\n\u5bf9\u4e8e\u5feb\u901f\u6c42\u51fa\u6240\u6709\u6ee1\u8db3 $|x_i-x_j| \\leq C$ \u7684\u70b9\u3002\u5c31\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u70b9\u6309 $x_i$ \u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u63d2\u5165\u65f6\u628a\u6700\u5c0f\u7684\u4e0d\u6ee1\u8db3\u8981\u6c42\u7684\u70b9\u5220\u53bb\u5373\u53ef\uff08\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\uff09\u3002\n\n\u5bf9\u4e8e\u6c42 $y_i$ \u7684\u524d\u7f00\u548c\u540e\u7ee7\uff0c\u53ef\u4ee5\u7528 ~~set~~ \u5e73\u8861\u6811\u6765\u7ef4\u62a4\u3002\n\n\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e3a $O(n \\log n)$\u3002\n\n\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n## code\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nconst int N=1e5+10;\nconst int INF=2e9+10;//\u9898\u76ee\u4e2d\u7684\u70b9\u6700\u5927\u4e3a2e9 \nstruct tree{\n\tint son[2],val,cnt,f,id;//\u9898\u76ee\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0y\u7684\u503c\u76f8\u540c\u7684\u70b9 \n}tr[N];\nstruct bot{\n\tint x,y,id; \n\tbool operator <(const bot &t)const{\n\t    return x<t.x;\n\t}\n}a[N];\nint n,c,fa[N],siz[N],num,root;\nint ans1,ans2;\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);} //\u8def\u5f84\u538b\u7f29 \nvoid merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy) return;\n\tans1--;\n\tif(siz[fx]>siz[fy]) fa[fy]=fx,siz[fx]+=siz[fy];//\u6309\u79e9\u5408\u5e76 \n\telse fa[fx]=fy,siz[fy]+=siz[fx];\n}\nint newnode(int val,int id) //Treap \u7684\u57fa\u672c\u64cd\u4f5c \n{\n\ttr[++num].cnt=1;\n\ttr[num].val=val;\n\ttr[num].id=id;\n\ttr[num].f=rand();\n\treturn num;\n}\nvoid rotate(int &p,int d)\n{\n\tint q=tr[p].son[d^1];\n\ttr[p].son[d^1]=tr[q].son[d],tr[q].son[d]=p;\n\tp=q;\n}\nvoid insert(int &p,int val,int id)\n{\n\tif(!p)\n\t{\n\t\tp=newnode(val,id);\n\t\treturn ;\n\t}\n\tif(val<tr[p].val) //\u672c\u9898\u8981\u6c42\u5c06\u76f8\u540c\u7684\u70b9\u4e5f\u7528\u4e0d\u540c\u7684\u7f16\u53f7\u8bb0\u5f55 \n\t{\n\t\tinsert(tr[p].son[0],val,id);\n\t\tif(tr[p].f<tr[tr[p].son[0]].f) rotate(p,1);\n\t}\n\telse\n\t{\n\t\tinsert(tr[p].son[1],val,id);\n\t\tif(tr[p].f<tr[tr[p].son[1]].f) rotate(p,0);\n\t}\n}\nvoid build_tree()\n{\n\tnewnode(-INF,0),newnode(INF,0);\n\troot=1;\n\ttr[1].son[1]=2;\n\tif(tr[1].f<tr[2].f) rotate(root,0);\n\tinsert(root,a[1].y,a[1].id);//\u7b2c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u7279\u5224\u4e00\u4e0b\uff0c\u56e0\u4e3ay\u53ef\u80fd\u4f1a\u76f8\u540c \n}\nvoid remove(int &p,int val)\n{\n\tif(val==tr[p].val)\n\t{\n\t\tif(tr[p].son[0]+tr[p].son[1]==0) p=0;\n\t\telse if(tr[p].son[0]*tr[p].son[1]==0) p=tr[p].son[0]+tr[p].son[1];\n\t\telse\n\t\t{\n\t\t\tif(tr[tr[p].son[0]].f>=tr[tr[p].son[1]].f) rotate(p,1),remove(tr[p].son[1],val);\n\t\t\telse rotate(p,0),remove(tr[p].son[0],val);\n\t\t}\n\t\treturn ;\n\t}\n\tif(tr[p].val<val) remove(tr[p].son[1],val);\n\telse if(tr[p].val>val) remove(tr[p].son[0],val);\n}\nint get_pre(int p,int val)//\u8fd9\u91cc\u8fd4\u56de\u7684\u662f\u8282\u70b9\u7f16\u53f7\u800c\u4e0d\u662f\u5177\u4f53\u7684\u503c\uff0c\u56e0\u4e3a\u8fd8\u8981\u7528\u5230\u8be5\u70b9\u7684\u7f16\u53f7 \n{\n\tif(!p) return 0;\n\tif(tr[p].val>val) return get_pre(tr[p].son[0],val);\n\tint k=get_pre(tr[p].son[1],val);\n\tif(!k) return p;//\u5982\u679c\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5c31\u8fd4\u56de\u81ea\u8eab \n\treturn k;// k\u662f\u5728\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u663e\u7136\u5f53k\u5b58\u5728\u65f6\uff0ctr[k].val\u624d\u662fval\u7684\u524d\u9a71 \n}\nint get_nex(int p,int val) \n{\n\tif(!p) return 0;\n\tif(tr[p].val<val) return get_nex(tr[p].son[1],val);\n\tint k=get_nex(tr[p].son[0],val);\n\tif(!k) return p;\n\treturn k;\n}\nint main()\n{\n\tsrand((unsigned int)time(0));\n\t//freopen(\"233.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&c);\n\tfor(int x,y,i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta[i].x=(x+y),a[i].y=(x-y),a[i].id=i;//\u5750\u6807\u8f6c\u6362\uff0c\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\u5728\u5408\u5e76\u65f6\u4f1a\u7528\u5230 \n\t\tfa[i]=i,siz[i]=1;\n\t}\n\tsort(a+1,a+n+1);\n\tbuild_tree();\n\tint pos=1;\n\tans1=n;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t    while(a[i].x-a[pos].x>c) remove(root,a[pos++].y);//\u5220\u53bb\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u70b9 \n\t\tint pre=get_pre(root,a[i].y),nex=get_nex(root,a[i].y);\n\t\tif(a[i].y-tr[pre].val<=c) merge(a[i].id,tr[pre].id);//\u8fd9\u91cc\u522b\u5fd8\u4e86\u5224\u65ad \n\t\tif(tr[nex].val-a[i].y<=c) merge(a[i].id,tr[nex].id);//\u5982\u679c\u4e0d\u7528\u539f\u6765\u7684\u7f16\u53f7\u6765\u5408\u5e76\uff0c\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef \n\t\tans2=max(ans2,siz[fa[a[i].id]]);//\u6ce8\u610f fa[a[i].id] \u624d\u662f\u5f53\u524d\u70b9\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7684\u7f16\u53f7 \n\t\tinsert(root,a[i].y,a[i].id);//\u522b\u5fd8\u4e86\u52a0\u5165\u5f53\u524d\u70b9 \n\t}\n\tprintf(\"%d %d\\n\",ans1,ans2);\n\treturn 0;\n} \n```\n",
        "postTime": 1624923180,
        "uid": 288192,
        "name": "ListenSnow",
        "ccfLevel": 7,
        "title": "P2906 [USACO08OPEN]Cow Neighborhoods G"
    },
    {
        "content": "\u770b\u4e86\u524d\u51e0\u7bc7\u9898\u89e3\uff0c\u611f\u89c9\u8fd8\u662f\u6709\u70b9\u4e1c\u897f\u6ca1\u8bb2\u6e05\u695a\n\n\u8fd9\u9898\u9996\u5148\u628a\u66fc\u54c8\u987f\u8ddd\u79bb\u8f6c\u4e3a\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\n\n\u5bf9\u4e8e\u725b\u7fa4\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u96be\u9053\u8981\u4e24\u4e24\u5408\u5e76\u5417\uff1f\u90a3\u6837\u592a\u6162\u4e86\uff0c\u5176\u5b9e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u53ea\u8981\u628a\u5b83\u4e0e\u4e24\u4e2a\u70b9\u76f8\u5e76\u5c31\u884c\u4e86\n\n\u7136\u540e\u6211\u4eec\u5c06x\u503c\u6392\u5e8f\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9i\uff0c\u6211\u4eec\u628a\u5b83\u4e0ey\u503c\u6bd4\u5b83\u5927\u6216\u76f8\u7b49\u4e14\u76f8\u8ddd\u4e0d\u8d85\u8fc7y\u7684\u4efb\u610f\u70b9\u5408\u5e76\uff0c\u6bd4\u5b83\u5c0f\u7684\u4e5f\u627e\u4e00\u4e2a\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\u5462\uff1f\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u9009\u7684\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5df2\u7ecf\u628ai\u7684\u53f3\u534a\u8fb9\u8986\u76d6\u4e86\uff0c\u5728\u4ee5\u540e\u7684\u64cd\u4f5c\u4e2d\uff0ci\u4e5f\u5c31\u6ca1\u7528\u4e86\uff0c\u7531\u4e8e\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e24\u70b9\u4ee3\u66ffi\uff0c\u53c8\u7531\u4e8ei\u662f\u4ece\u5de6\u5f80\u53f3\u626b\u7684\uff0c\u6240\u4ee5i\u7684\u5de6\u534a\u8fb9\u5df2\u5b8c\u6210\u5408\u5e76\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e86\n\n\u6211\u4eec\u53ef\u4ee5\u7528set\u6765\u5b9e\u73b0\u4e0a\u8ff0\u64cd\u4f5c\n\nCode\uff1a\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <queue>\n#include <set>\n#include <algorithm>\nusing namespace std;\nint n,i,c,r,f[100005],ans[100005],mx;\nstruct str{\n\tint x,y;\n}a[100005];\nint Find(int x)\n{\n\tif(f[x]==0)\n\t\treturn x;\n\treturn f[x]=Find(f[x]);\n}\nvoid uniot(int u,int v)\n{\n\tint x=Find(u),y=Find(v);\n\tif(x!=y)\n\t\tf[x]=y;\n}\nbool cmp(str a,str b)\n{\n\treturn a.x<b.x;\n}\nstruct node{\n\tint a,x;\n\tbool operator <(const node &u)const\n\t{\n\t\tif(u.a==a)\n\t\t\treturn u.x<x;\n\t\treturn u.a<a;\n\t}\n};\nset<node> t;\nset<node>::iterator u,v;\nint main(){\n\tscanf(\"%d %d\",&n,&c);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d %d\",&a[i].x,&a[i].y);\n\t\ta[i]=(str){a[i].x+a[i].y,a[i].x-a[i].y};\n\t}\n\tsort(a+1,a+1+n,cmp);\n\tr=1;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\twhile(r<=n&&a[r].x-a[i].x<=c)\n\t\t{\n\t\t\tt.insert((node){a[r].y,r});\n\t\t\tr++;\n\t\t}\n\t\tt.erase((node){a[i].y,i});\n\t\tif(t.size()==0)\n\t\t\tcontinue;\n\t\tu=t.upper_bound((node){a[i].y,0});\n\t\tv=u;\n\t\tif(u!=t.begin())\n\t\t{\n\t\t\tu--;\n\t\t\tif(abs(u->a-a[i].y)<=c)\n\t\t\t\tuniot(u->x,i);\n\t\t}\n\t\tif(v!=t.end())\n\t\t\tif(abs(v->a-a[i].y)<=c)\n\t\t\t\tuniot(v->x,i);\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tans[Find(i)]++;\n\t\tif(f[i]==0)\n\t\t\tmx++;\n\t}\n\tprintf(\"%d \",mx);\n\tmx=0;\n\tfor(i=1;i<=n;i++)\n\t\tmx=max(mx,ans[Find(i)]);\n\tprintf(\"%d\",mx);\n}\n\n```",
        "postTime": 1541510189,
        "uid": 26800,
        "name": "Sshenyyyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2906 \u3010[USACO08OPEN]\u725b\u7684\u8857\u533aCow Neighborhoods\u3011"
    }
]