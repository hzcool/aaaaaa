[
    {
        "content": "# BFS\u5927\u706b\u9898\n\u9996\u5148 ~~\u6807\u7b7e\u91cc\u9762\u5199\u4e86\uff0c\u90a3\u6211\u4eec\u5c31~~ \u4e8c\u5206\u7b54\u6848\n## \u6a21\u578b\u8f6c\u5316\n\u628a\u7b54\u6848\u89c6\u4e3aBoss\u7684\u653b\u51fb\u534a\u5f84\uff0c\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u7ed9\u4f60\u4e00\u4e2a\u77e9\u5f62\u4e2d\u6709\u4e00\u4e9b\u5706\uff0c\u95ee\u80fd\u5426\u627e\u5230\u4e00\u6761\u4ece\u5de6\u4e0b\u89d2\u5230\u53f3\u4e0a\u89d2\u7684\u8def\u5f84\u4e0d\u7ecf\u8fc7\u4efb\u4f55\u4e00\u4e2a\u5706\uff08\u6b64\u7c7b\u95ee\u9898\u7684\u5e38\u89c4\u64cd\u4f5c\uff09\n\n\u5982\u679c\u6211\u4eec\u628a\u5706\u770b\u6210\u5976\u916a\u4e0a\u7684\u4e00\u4e9b\u6d1e\uff0c\u5219\u5f53\u5de6\u8fb9\u754c\u6216\u4e0a\u8fb9\u754c\u901a\u8fc7\u8fd9\u4e9b\u6d1e\u548c\u53f3\u8fb9\u754c\u6216\u4e0b\u8fb9\u754c\u8054\u901a\u65f6\u95ee\u9898\u65e0\u89e3\n\n\u7136\u540e\u6211\u4eec\u770b\u5230\u4e86[\\[NOIP2017\\]\u5976\u916a](https://www.luogu.org/problemnew/show/P3958)\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\n\n```cpp\n#include<bits/stdc++.h>\n//#pragma GCC optimize(2)\nusing namespace std;\ninline int gi() {\n    register int x, c, op=1;\n    while(c=getchar(),c<'0'||c>'9')if(c=='-')op=-op;\n    x=c^48;\n    while(c=getchar(),c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48);\n    return x*op;\n}\nint dis[3001][3001];\nint x[3001],y[3001];\nint getdis(int x1,int y1,int x2,int y2) {\n\treturn pow(x1-x2,2)+pow(y1-y2,2);\n}\nbool able(int d,double r) {\n\treturn r*r*4>d;\n}\nint row,line,n;\nqueue<int>q;\nbool vis[3001];\nbool bfs(double r) {\n\tmemset(vis,0,sizeof(vis));\n\twhile(!q.empty())q.pop();\n\tfor(int i=1;i<=n;i++)\n\t\tif(x[i]<r||row-y[i]<r)q.push(i),vis[i]=1;\n\twhile(!q.empty()) {\n\t\tint p=q.front();\n\t\tq.pop();\n\t\tif(line-x[p]<r||y[p]<r)return 0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!vis[i]&&able(dis[p][i],r))vis[i]=1,q.push(i);\n\t}\n\treturn 1;\n}\nint main() {\n\tn=gi(),line=gi()-1,row=gi()-1;\n\tfor(int i=1;i<=n;i++)\n\t\tx[i]=gi()-1,y[i]=gi()-1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<i;j++)\n\t\t\tdis[i][j]=dis[j][i]=getdis(x[i],y[i],x[j],y[j]);\n\tdouble l=0,r=min(row,line),mid;\n\tfor(int i=1;i<=60;i++) {\n\t\tmid=(l+r)/2;\n\t\tif(bfs(mid))l=mid;\n\t\telse r=mid;\n\t}\n\tprintf(\"%.2lf\\n\",l);\n\treturn 0;\n}\n```",
        "postTime": 1544001783,
        "uid": 70310,
        "name": "wuzhaoxin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "> ### Description\n>\n> \u82f1\u96c4\u53c8\u5373\u5c06\u8e0f\u4e0a\u62ef\u6551\u516c\u4e3b\u7684\u9053\u8def\u2026\u2026\n>\n> \u8fd9\u6b21\u7684\u62ef\u6551\u76ee\u6807\u662f\u2014\u2014\u7231\u548c\u6b63\u4e49\u7684\u5c0f\u4e91\u516c\u4e3b\u3002\n>\n> \u82f1\u96c4\u6765\u5230boss\u7684\u6d1e\u7a74\u95e8\u53e3\uff0c\u4ed6\u4e00\u4e0b\u5b50\u5c31\u61f5\u4e86\uff0c\u56e0\u4e3a\u9762\u524d\u4e0d\u53ea\u662f\u4e00\u53eaboss\uff0c\u800c\u662f\u4e0a\u5343\u53eaboss\u3002\u5f53\u82f1\u96c4\u610f\u8bc6\u5230\u81ea\u5df1\u8fd8\u662f\u7b49\u7ea71\u7684\u65f6\u5019\uff0c\u4ed6\u660e\u767d\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684\u4efb\u52a1\u3002\n>\n> \u4f46\u4ed6\u4e0d\u6b7b\u5fc3\uff0c\u4ed6\u5728\u60f3\uff0c\u80fd\u4e0d\u80fd\u907f\u5f00boss\u53bb\u62ef\u6551\u516c\u4e3b\u5462\uff0c\u563b\u563b\u3002\n>\n> Boss\u7684\u6d1e\u7a74\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u77e9\u5f62\uff0c\u82f1\u96c4\u5728\u5de6\u4e0b\u89d2\uff081,1\uff09\uff0c\u516c\u4e3b\u5728\u53f3\u4e0a\u89d2\uff08row\uff0cline\uff09\u3002\u82f1\u96c4\u4e3a\u4e86\u907f\u5f00boss\uff0c\u5f53\u7136\u662f\u79bbboss\u8ddd\u79bb\u8d8a\u8fdc\u8d8a\u597d\u4e86\uff0c\u6240\u4ee5\u82f1\u96c4\u51b3\u5b9a\u627e\u4e00\u6761\u8def\u5f84\u4f7f\u5230\u8ddd\u79bbboss\u7684\u6700\u77ed\u8ddd\u79bb\u6700\u8fdc\u3002\n>\n> Ps:\u82f1\u96c4\u8d70\u7684\u65b9\u5411\u662f\u4efb\u610f\u7684\u3002\n>\n> \u4f60\u53ef\u4ee5\u5e2e\u5e2e\u4ed6\u5417\uff1f\n>\n> \u5f53\u82f1\u96c4\u627e\u5230\u4e86\u7f8e\u4e3d\u6f02\u4eae\u7684\u5c0f\u4e91\u516c\u4e3b\uff0c\u7acb\u523b\u5c31\u88abboss\u5305\u56f4\u4e86\uff01\uff01\uff01\u82f1\u96c4\u7f13\u95ed\u53cc\u773c\uff0c\u4e3e\u624b\u8f7b\u6325\uff0c\u767d\u5149\u4e00\u95ea\u540e\u4f7f\u7528\u4e86\u56de\u57ce\u5377\u8f74\uff0c\u56de\u5230\u4e86\u57ce\u5821\uff0c\u4f46\u53ea\u6709\u5c0f\u4e91\u516c\u4e3b\u56de\u53bb\u4e86\u2026\u2026\u56e0\u4e3a\u82f1\u96c4\u5fd8\u4e86\u8fdb\u5165\u56de\u57ce\u7684\u6cd5\u9635\u4e86\u3002\n>\n> ### Input\n>\n> \u7b2c\u4e00\u884c\uff0c\u8f93\u5165\u4e09\u4e2a\u6574\u6570\uff0cn\u8868\u793aboss\u7684\u6570\u76ee\uff0crow\uff0cline\u8868\u793a\u77e9\u5f62\u7684\u5927\u5c0f\uff1b\n>\n> \u63a5\u4e0b\u6765n\u884c\uff0c\u6bcf\u884c\u5206\u522b\u4e24\u4e2a\u6574\u6570\u8868\u793aboss\u7684\u4f4d\u7f6e\u5750\u6807\u3002\n>\n> ### Output\n>\n> \u8f93\u51fa\u4e00\u4e2a\u5c0f\u6570\uff0c\u8868\u793a\u82f1\u96c4\u7684\u8def\u5f84\u79bbboss\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u3002 \n\n\u8fd9\u91cc\u7684\u8ddd\u79bb\u6307\u7684\u662f**\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb**\u3002\n\n\u9996\u5148\u5f88\u5bb9\u6613\u770b\u51fa\u662f**\u4e8c\u5206\u7b54\u6848**\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u6210\u662f\u4ee5\u6bcf\u4e2a$boss$\u4e3a\u5706\u5fc3\u4f5c\u4e00\u4e2a\u534a\u5f84\u4e3a$r$\u7684\u5706,\u6211\u4eec\u60f3\u8981\u6c42\u7684\u5c31\u662f\u8ba9\u8fd9\u4e9b\u5706\u5c3d\u53ef\u80fd\u5927,\u5e76\u4e14\u4e0d\u80fd\u5f71\u54cd\u6211\u4eec\u4ece$(1,1)$\u5230$(n,m)$\u3002(\u4e0d\u80fd\u8986\u76d6)\n\n\u76f4\u63a5\u8003\u8651\u8fb9\u754c\u6761\u4ef6$(n,1)$\u548c$(1,m)$\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u6ca1\u6709\u88ab\u8986\u76d6,\u90a3\u6211\u5fc5\u7136\u53ef\u4ee5\u5230\u8fbe$(n,m)$\n\nPS\uff1a\u8fd9\u91cc\u7684\u5224\u65ad\u6761\u4ef6\u4e0d\u662f\u540c\u65f6\u5224\u65ad\u3002\n\n\u8fd9\u6837\u7528$||$\u5224\u65ad,\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u8fb9\u754c\u4e0d\u88ab\u5c01\u9501\u7684\u60c5\u51b5\u3002\n\n\u7528**\u5e76\u67e5\u96c6**\u7ef4\u62a4\u8fde\u901a\u5373\u53ef\u3002\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#define eps 1e-4\n#define R register\n\nusing namespace std;\n\nconst int gz=3e3+8;\n\ninline void in(R int &x)\n{\n\tR int f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\n\nint nn,n,m,f[gz];\n\nstruct cod\n{\n\tint x,y;\n}bos[gz];\n\nint find(R int x){return f[x]==x?x:f[x]=find(f[x]);}\n\ninline double xx(R double x)\n{\n\treturn x*x;\n}\n\ninline double dis(R int i,R int j)\n{\n\treturn xx(bos[i].x-bos[j].x)+xx(bos[i].y-bos[j].y);\n}\n\ninline bool ok(R double r)\n{\n\tfor(R int i=0;i<=nn+1;i++)f[i]=i;\n\tfor(R int i=1;i<=nn;i++)\n\t{\n\t\tfor(R int j=1;j<i;j++)\n\t\t{\n\t\t\tif(dis(i,j)<=xx(2*r))\n\t\t\t{\n\t\t\t\tR int fa=find(i),fb=find(j);\n\t\t\t\tif(fa!=fb)f[fa]=fb;\n\t\t\t}\n\t\t}\n\t\tif(bos[i].x-r<=1 or bos[i].y+r>=m)\n\t\t{\n\t\t\tR int fa=find(i),fb=find(0);\n\t\t\tif(fa!=fb)f[fa]=fb;\n\t\t}\n\t\tif(bos[i].x+r>=n or bos[i].y-r<=1)\n\t\t{\n\t\t\tR int fa=find(i),fb=find(nn+1);\n\t\t\tif(fa!=fb)f[fa]=fb;\n\t\t}\n\t}\n\treturn find(0)!=find(nn+1);\n}\n\nint main()\n{\n\tin(nn),in(n),in(m);\n\tfor(R int i=1;i<=nn;i++)\n\t\tin(bos[i].x),in(bos[i].y);\n\tR double ll=0,rr=min(n,m);\n\twhile(fabs(ll-rr)>eps)\n\t{\n\t\tR double mid=(ll+rr)/2;\n\t\tif(ok(mid))ll=mid;\n\t\telse rr=mid;\n\t}\n\tprintf(\"%.2f\",ll);\n}\n```\n\n",
        "postTime": 1542461861,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "\u66f4\u4e00\u4e2a\u6574\u4f53\u80fd\u770b\u7684\u9898\u89e3\n\n\u9996\u5148\u770b\u89c1\u4e86\u9898\u76ee\u4e2d\u6240\u6709boss\u8ddd\u8def\u5f84\u6700\u5c0f\u8ddd\u79bb\u6700\u5927\u503c\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u6211\u4eec\u4e8c\u5206\u51fa\u7684mid\u5c31\u76f8\u5f53\u4e8e\u5bf9\u6240\u6709\u7684boss\u4ee5mid\u4e3a\u534a\u5f84\u505a\u4e86\u4e00\u4e2a\u5706\uff0c\u8def\u5f84\u4e0d\u80fd\u7ecf\u8fc7\u5706\uff08\u4f46\u662f\u53ef\u4ee5\u7ecf\u8fc7\u8fb9\u754c\uff09\u3002\n\n\u8003\u8651\u4e00\u79cd\u66b4\u529b\uff1a\u6211\u4eec$k^2$\u679a\u4e3e\u4efb\u610f\u4e24\u4e2aboss\uff0c\u5982\u679c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c0f\u4e8e$mid\\times 2$\uff0c\u6211\u4eec\u5c31\u5c06\u4ed6\u4eec\u8fde\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u5224\u65ad\u6240\u6709\u70b9\u548c\u8fb9\u754c\u80fd\u5426\u76f8\u8fde\uff0c\u9a8c\u8bc1\u7684\u8bdd\u5c31\u662f\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fb9\u754c\u4e4b\u95f4\u7684\u8fde\u901a\u4f7f\u5f97(1,1)\u65e0\u6cd5\u5230\u8fbe(n,m)\n\n\u5982\u4f55\u4f18\u5316\u8fd9\u4e2a\u66b4\u529b\uff1f\n\n\u6211\u4eec\u53d1\u73b0$n^2$\u7684\u679a\u4e3e\u6240\u6709\u8fb9\u4e2d\u6709\u4e00\u4e9b\u8fb9\u662f\u591a\u4f59\u7684\u3002\u6211\u4eec\u4f9d\u636e\u8fd9\u4e2a\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u4e24\u4e2a\u70b9\u8fde\u901a\u4e14\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bbdis\u662f\u975e\u6811\u8fb9\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u6811\u8fb9\u90fd\u4e0d\u5927\u4e8edis\u6545\u4e4b\u95f4\u7684\u8def\u5f84\u8fde\u901a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u6027\u5373\u53ef\u3002\n\n\u8fdb\u800c\uff0c\u6bcf\u6b21\u4e8c\u5206mid\u540e\u679a\u4e3e\u6574\u68f5\u751f\u6210\u6811\u5c06\u8054\u901a\u7684\u8fb9\u76f8\u8fde\uff0c\u7136\u540e\u628a\u6240\u6709\u548c\u80fd\u62b5\u8fbe\u8fb9\u754c\u7684boss\u548c\u4ee3\u8868\u8fb9\u754c\u7684\u8d85\u7ea7\u6e90\u70b9\u76f8\u8fde\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u8fb9\u754c\u8fde\u901a\u80fd\u4f7f\u5f97(1,1)\u548c(n,m)\u4e4b\u95f4\u4e0d\u5b58\u5728\u8def\u5f84\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u8fb9\u754c\u90a3\u4e48\u8fd9\u4e2amid\u663e\u7136\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u663e\u7136\u5982\u679c\u662f\u7528kruskal\u6c42\u751f\u6210\u6811\u7684\u8bdd\u590d\u6742\u5ea6\u662f\u548c\u66b4\u529b\u4e00\u6837\u7684$O(k^2logk)$\uff0c\u6545\u6b64\u6211\u4eec\u8003\u8651prim\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662fprim\u7684$O(k^2)$\u4ee5\u53ca\u4e8c\u5206\u7684$O(logn)$\u548c\u6bcf\u6b21\u9a8c\u8bc1\u7684$O(k)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5361\u5728prim\u7684$O(k^2)$\u3002\n\u9644\u4e0a\u4ee3\u7801\uff08\u6a21\u62df\u8d5b\u4e0a\u53ea\u8fc7\u4e8660\u56e0\u4e3a\u628a\u8d77\u70b9\u5f53\u6210\u4e86\uff080,0\uff09\uff09\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define N 3010 \n#define inf 10000000 \n#define eps 1e-5\nusing namespace std;\nint k,n,m,cnt;\nint to[N*8],nxt[N*8],head[N]; double val[N*8]; int tot;\ndouble lc[N],dis[N][N]; int pre[N]; bool vis[N];\nint fa[N]; int s1,s2,s3,s4;\nstruct Node {double x,y;}gd[N];\nstruct Edge {int x,y; double val;}E[N*8];\ninline void add(int x,int y,double z) {to[++tot]=y; val[tot]=z; nxt[tot]=head[x]; head[x]=tot;}\nint find(int x) {return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid prim()// \u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684prim\n{\n\t// pre[i] \u8bb0\u5f55\u7684\u662fprim\u4e2d\u5df2\u9009\u62e9\u70b9\u8ddd\u79bb\u5f53\u524d\u70b9i\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\n    lc[0]=inf; vis[1]=true;\n    for(int i=1;i<=k;i++) lc[i]=dis[1][i],pre[i]=1;\n    for(int i=1;i<k;i++)\n    {\n        int mx=0;\n        for(int j=1;j<=k;j++)\n        {\n            if(!vis[j]&&lc[mx]>lc[j]) mx=j;\n        }\n        add(mx,pre[mx],lc[mx]); add(pre[mx],mx,lc[mx]);\n        vis[mx]=true;\n        for(int j=1;j<=k;j++)\n        {\n            if(!vis[j]&&lc[j]>dis[mx][j]) lc[j]=dis[mx][j],pre[j]=mx;\n        }\n    }\n}\ninline void Add(int x,int y)\n{\n    cnt++; E[cnt].x=x; E[cnt].y=y;\n}\ninline void merge(int x,int y)\n{\n    x=find(x); y=find(y);\n    if(x!=y) fa[x]=y;\n}\nbool check(double a)\n{\n    cnt=0; for(int i=1;i<=k+10;i++) fa[i]=i; // \u521d\u59cb\u5316\n    for(int i=1;i<=k;i++) for(int j=head[i];j;j=nxt[j]) if(val[j]<2*a)\n    {\n        Add(i,to[j]);\n    }\n\t// s1\u662f\u5e95\u8fb9\u8fb9\u754c\uff0cs2\u662f\u5de6\u4fa7\u8fb9\u754c\uff0cs3\u662f\u9876\u8fb9\u8fb9\u754c\uff0cs4\u662f\u53f3\u4fa7\u8fb9\u754c\u3002\n    for(int i=1;i<=k;i++)\n    {\n        if(gd[i].x<a) Add(s1,i);\n        if(gd[i].y<a) Add(s2,i);\n        if((double)n-gd[i].x<a) Add(s3,i);\n        if((double)m-gd[i].y<a) Add(s4,i);\n    }\n    for(int i=1;i<=cnt;i++) merge(E[i].x,E[i].y);\n    int S1=find(s1),S2=find(s2),S3=find(s3),S4=find(s4);\n    if(S1==S2) return false;\n    if(S1==S3) return false;\n    if(S2==S4) return false;\n    if(S3==S4) return false;\n    return true;\n}\ninline double sqr(double x) {return x*x;}\ninline double dist(const Node &a,const Node &b) {return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\nint main()\n{\n    scanf(\"%d%d%d\",&k,&n,&m); n--; m--; s1=k+1,s2=k+2,s3=k+3,s4=k+4;\n    for(int i=1;i<=k;i++) scanf(\"%lf%lf\",&gd[i].x,&gd[i].y);\n    for(int i=1;i<=k;i++) gd[i].x-=1,gd[i].y-=1;\n    for(int i=1;i<=k;i++) for(int j=i+1;j<=k;j++)\n    {\n        dis[i][j]=dis[j][i]=dist(gd[i],gd[j]);\n    }\n    prim();\n    double l=0,r=(double)(n+m);\n    while(r-l>eps)\n    {\n        double mid=(l+r)/2;\n        if(check(mid)) l=mid;\n        else r=mid;\n    }\n    printf(\"%.2lf\\n\",r);\n    return 0;\n}\n```\n\u63a8\u9500\u4e2a\u4ebablog\u2014\u2014[JZYshuraK](http://www.cnblogs.com/shurak)",
        "postTime": 1540798051,
        "uid": 58178,
        "name": "JZYshuraK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P2498)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\uff0c\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\u7136\u540e\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u5728\u4e00\u4e2a\u77e9\u5f62\u5185\u7ed9\u4f60$n$\u4e2a\u5706\uff0c\u4e0d\u80fd\u8d70\u5230\u5706\u5185\uff08\u5706\u4e0a\u53ef\u4ee5\uff09\uff0c\u95ee\u4f60\u80fd\u5426\u4ece\u5de6\u4e0b\u89d2\u8d70\u5230\u53f3\u4e0a\u89d2\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6b64\u65f6\uff0c\u6211\u4eec**\u4e0e\u5176\u76f4\u63a5\u8003\u8651\u54ea\u4e9b\u60c5\u51b5\u53ef\u4ee5\u8d70\u5230\uff0c\u4e0d\u5982\u8003\u8651\u54ea\u4e9b\u60c5\u51b5\u4e0d\u80fd\u8d70\u5230**\u3002\u663e\u7136\uff0c\u6b64\u65f6\u5fc5\u987b\u662f\u8fb9\u754c\u901a\u8fc7\u5706\u8fde\u4e86\u8d77\u6765\u624d\u53ef\u4ee5\u3002\u8003\u8651\u54ea\u4e9b\u8fb9\u754c\u8fde\u8d77\u6765\u4e4b\u540e\u4f1a\u5f71\u54cd\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u8fde\u901a\u6027\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u679a\u4e3e\u53d1\u73b0\uff1a\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3001\u53f3\u8fb9\u754c\u8fde\u5728\u4e00\u5757\u4e4b\u540e\u8d70\u4e0d\u52a8\u4e86\uff1b\u5de6\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3001\u53f3\u8fb9\u754c\u8fde\u5728\u4e00\u5757\u4e4b\u540e\u4e5f\u8d70\u4e0d\u52a8\u4e86\u3002\u5171\u56db\u79cd\u60c5\u51b5\u3002\u68c0\u67e5\u7684\u65f6\u5019\u679a\u4e3e\u914d\u5bf9\u6570\u91cf\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u4e4b\u540e\u5224\u65ad\u8fb9\u754c\u60c5\u51b5\u5373\u53ef\u3002\u65f6\u95f4$O(n^2\\log_2V)$\uff0c$V$\u662f\u7b54\u6848\u503c\u57df\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0d\u8fc7\uff0c\u8fd9\u9053\u9898\u8fd8\u53ef\u4ee5\u4f18\u5316\u3002\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\uff08\u4e0e\u67d0\u4e2a\u70b9\u76f8\u90bb\u7684\u6743\u6700\u5c0f\u7684\u8fb9\u4e00\u5b9a\u5728\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5$boss$\u7684\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u8fb9\u80fd\u4e0d\u80fd\u5728\u5f53\u524d\u4e8c\u5206\u7684\u957f\u5ea6\u4e0b\u52a0\u5165\u5230\u56fe\u91cc\u9762\u5373\u53ef\u3002\u5982\u679c\u8fd9\u4e9b\u8fb9\u90fd\u4e0d\u53ef\u4ee5\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u8fb9\u5c31\u66f4\u4e0d\u53ef\u80fd\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8e\u662f\uff0c\u6211\u4eec\u9884\u5148\u8dd1\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811$Prim$\uff08$O(n^2)$\uff09\uff0c\u68c0\u67e5\u5c31\u53ea\u9700\u8981\u68c0\u67e5\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u7136\u540e\u518d\u68c0\u67e5\u4e00\u904d\u8fb9\u754c\u7684\u8fde\u901a\u6027\u3002\u68c0\u67e5\u7684\u65f6\u95f4\u662f$O(n)$\u3002\u603b\u65f6\u95f4$O(n^2+n\\log_2V)$\u3002\n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n\nconst int MAXN = 3005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nstruct edge\n{\n\tint from, to;\n\tdouble w;\n\tedge(){}\n\tedge( const int F, const int T, const double W ) { from = F, to = T, w = W; }\n}E[MAXN];\n\ndouble dis[MAXN][MAXN];\ndouble len[MAXN];\nint fr[MAXN], fa[MAXN], x[MAXN], y[MAXN];\nint N, row, line, cnt;\nbool visited[MAXN];\n\nvoid makeSet( const int siz ) { for( int i = 1 ; i <= siz ; i ++ ) fa[i] = i; }\nint findSet( const int u ) { return fa[u] == u ? fa[u] : ( fa[u] = findSet( fa[u] ) ); } \nvoid unionSet( const int u, const int v ) { fa[findSet( u )] = findSet( v ); }\nbool same( const int u, const int v ) { return findSet( u ) == findSet( v ); }\n\ndouble getDis( const int a, const int b ) { return sqrt( 1.0 * ( x[a] - x[b] ) * ( x[a] - x[b] ) + 1.0 * ( y[a] - y[b] ) * ( y[a] - y[b] ) ); }\n\nbool chk( const double dist )\n{\n\tmakeSet( N + 4 );\n\tfor( int i = 1 ; i <= cnt ; i ++ )\n\t\tif( E[i].w < dist * 2 )\n\t\t\tunionSet( E[i].from, E[i].to );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tif( x[i] - 1 < dist ) unionSet( i, N + 1 );\n\t\tif( y[i] - 1 < dist ) unionSet( i, N + 2 );\n\t\tif( row - x[i] < dist ) unionSet( i, N + 3 );\n\t\tif( line - y[i] < dist ) unionSet( i, N + 4 );\n\t}\n\tif( same( N + 1, N + 2 ) || same( N + 3, N + 4 ) || same( N + 1, N + 3 ) || same( N + 2, N + 4 ) ) return false;\n\treturn true;\n}\n\nint main()\n{\n\tread( N ), read( row ), read( line );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tfor( int j = 1 ; j <= N ; j ++ )\n\t\t\tdis[i][j] = 0x3f3f3f3f3f;\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tread( x[i] ), read( y[i] );\n\t\tfor( int j = 1 ; j <= i ; j ++ ) \n\t\t\tdis[i][j] = dis[j][i] = getDis( i, j );\n\t}\n\tfor( int i = 1 ; i <= N ; i ++ ) visited[i] = false, len[i] = 0x3f3f3f3f;\n\tlen[1] = 0;\n\tint mn;\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tmn = -1;\n\t\tfor( int j = 1 ; j <= N ; j ++ )\n\t\t\tif( ! visited[j] && ( mn == -1 || len[mn] > len[j] ) )\n\t\t\t\tmn = j;\n\t\tif( mn == -1 ) break;\n\t\tvisited[mn] = true;\n\t\tE[++cnt] = edge( fr[mn], mn, len[mn] );\n\t\tfor( int j = 1 ; j <= N ; j ++ )\n\t\t\tif( ! visited[j] && dis[mn][j] < len[j] )\n\t\t\t\tlen[j] = dis[mn][j], fr[j] = mn;\n\t}\n\tdouble l = 0, r = sqrt( 1.0 * row * row + 1.0 * line * line ), mid;\n\twhile( r - l > 0.00001 )\n\t{\n\t\tmid = ( l + r ) / 2;\n\t\tif( chk( mid ) ) l = mid;\n\t\telse r = mid;\n\t}\n\tprintf( \"%.2lf\\n\", l );\n\treturn 0;\n}\n```",
        "postTime": 1570151547,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u662f\u6211\u5728\u505aspfa\u7684\u9898\u7684\u65f6\u5019\u5076\u7136\u770b\u5230\u7684\uff0c\u8bf4\u662f\u4e00\u9053\u7528\u6700\u77ed\u8def\u548c\u4e8c\u5206\u7684\u9898\u3002\n\n\u6211\u4e00\u770b\u96be\u5ea6\uff0c\u7d2b\u9898\u8bf6\uff0c\u7136\u540e\u770b\u770b\u6807\u7b7e\uff0c\u4e8c\u5206\u548c\u6700\u77ed\u8def\uff0c\u4e8c\u5206\u7528\u7684\u672c\u6765\u5c31\u4e0d\u9519\uff0c\u6700\u77ed\u8def\u4e48\uff0c\u6628\u5929\u7ec3\u4e86\u4e00\u6574\u5929\u73b0\u5728\u5df2\u7ecf\u5f62\u6210\u60ef\u6027\u4e86\uff0c\u8bf4\u4e0d\u5b9a\u8fd8\u771f\u80fd\u8fc7\u3002\n\n\u4e8e\u662f\u4e4e\u5f00\u59cb\u770b\u8fd9\u4e2a\u9898\u3002\u3002\n\n\u4ed4\u7ec6\u770b\u4e86\u51e0\u904d\uff0cwoc\uff0c\u8fd9\u4e2a\u9898\u4e8c\u5206\u786e\u5b9e\u6709\u601d\u60f3\uff0c\u4e0d\u8fc7\u8dd1\u6700\u77ed\u8def\u662f\u4e2a\u4ec0\u4e48\u9b3c\uff0c\u8fd9\u4e2a\u5751\u7239\u82f1\u96c4\u53ef\u4ee5360\u5ea6\u65e0\u6b7b\u89d2\u7684\u8dd1\u3002\u3002\u3002\u7136\u540e\u6211\u5c31\u6362\u4e86\u4e00\u79cd\u601d\u7ef4\uff0c\u5ffd\u7136\u60f3\u5230\u4e86\u4f20\u8bf4\u4e2d\u7684\u514b\u9c81\u65af\u5361\u5c14\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8c8c\u4f3c\u8fd9\u4e2a\u9898\u8fd9\u4e48\u505a\u8fd8\u771f\u7684\u6709\u95e8\uff0c\u53ef\u662f\u849f\u84bb\u592a\u5f31\u4e86\u6839\u672c\u60f3\u4e0d\u51fa\u6765\u3002\u53ea\u6709\u5927\u4f53\u601d\u8def\u7684\u849f\u84bb\u4e8e\u662f\u5c31\u590d\u5236\u4e86\u6574\u4e2a\u9898\u9762\u767e\u5ea6\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u535a\u5ba2\u91cc\u90a3\u4e9b\u5927\u795e\u7287\u4eec\u771f\u7684\u6709\u7528spfa\u548c\u4e8c\u5206\u505a\u51fa\u6765\u7684\uff01\uff01%%%\n\n\u4e0d\u8fc7\u66f4\u591a\u7684\u8fd8\u662f\u548c\u6211\u60f3\u7684\u4e00\u6837\u7684\u90a3\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u91cc\u8fdb\u884c\u5bf9\u62cd\u548c\u7406\u89e3\u4ee3\u7801\u540e\u8fdb\u884c\u4e00\u4e2a\u9898\u7684\u89e3\u9898\u62a5\u544a\uff1a\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nconst int N=3015;\nint n,c,r,cnt,f[N],x[N],y[N];\nstruct edge{int x,y;LL len;}e[N*N];\nint read()\n{\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while (ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nLL get_dis(int i,int j)\n{\n    return (LL)(x[i]-x[j])*(x[i]-x[j])+(LL)(y[i]-y[j])*(y[i]-y[j]);\n}\nLL sqr(int x)\n{\n    return (LL)x*x;\n}\nbool operator < (edge a,edge b)\n{\n    return a.len<b.len;\n}\nint find(int x)\n{\n    if (f[x]==x) return x;\n    f[x]=find(f[x]);\n    return f[x];\n}\nint main()\n{\n    n=read();r=read();c=read();\n    for (int i=1;i<=n;i++) x[i]=read(),y[i]=read();\n    for (int i=1;i<n;i++)\n        for (int j=i+1;j<=n;j++)\n        {\n            e[++cnt].x=i;e[cnt].y=j;e[cnt].len=get_dis(i,j);\n        }\n    for (int i=1;i<=n;i++)\n    {\n        e[++cnt].x=i;e[cnt].y=n+1;e[cnt].len=sqr(min(y[i]-1,r-x[i])*2);\n        e[++cnt].x=i;e[cnt].y=n+2;e[cnt].len=sqr(min(x[i]-1,c-y[i])*2);\n    }\n    sort(e+1,e+cnt+1);\n    LL mx=0;\n    for (int i=1;i<=n+2;i++) f[i]=i;\n    for (int i=1;i<=cnt;i++)\n    {\n        int p=find(e[i].x),q=find(e[i].y);\n        if (p!=q)\n        {\n            f[p]=q;\n            mx=max(mx,e[i].len);\n            if (find(n+1)==find(n+2)) break;\n        }\n    }\n    printf(\"%.2lf\",(double)sqrt(mx)*0.5);\n    return 0;\n}\n```\n\u8fd9\u4e2a\u4ee3\u7801\u4ec5\u4ec5\u80fd\u5f9770\u5206\uff0c\u800c\u4e14\u7ecf\u8fc7\u4f18\u5316\u4e4b\u540e\u7684\u6700\u5feb\u4ee3\u7801\u4ecd\u7136\u53ea\u80fd\u5f9780\uff0c\u6240\u4ee5\u8fd9\u4e48\u770b\u6765\u6700\u5c0f\u751f\u6210\u6811\u5e76\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u4e0d\u8fc770\u5206\u6211\u5df2\u7ecf\u80fd\u770b\u522b\u4eba\u7684\u4ee3\u7801\u4e86\u8bf6qwq~\uff0c\u6240\u4ee5\u679c\u65ad\u770b\u4e86\u697c\u4e0b\u4e00\u4e2a\u5927\u4f6c\u7684\u4ee3\u7801\u3002\u3002\u53d1\u73b0\u8fd9\u4e2a\u9898\u7528\u73b0\u5728\u7684\u601d\u60f3\u76f4\u63a5\u8dd1spfa\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u4e14\u5f00\u4e86\u6c27\u6c14\u4f18\u5316\u4e4b\u540e\u8dd1\u7684\u8d85\u7ea7\u5feb\uff0c\u6240\u6709\u70b9\u52a0\u8d77\u6765\u90fd\u6bd4\u521a\u624d\u5012\u6570\u7b2c\u56db\u7684\u70b9\u5feb\u3002\u3002\u3002\u3002\u4e0d\u8bf4\u522b\u7684\u4e86\u76f4\u63a5\u4e0a\u4ee3\u7801\u3002\u3002\u3002\n\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u521a\u624d\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u6240\u4ee5\u80fd\u8dd1\u7684\u4e3b\u8981\u601d\u60f3\uff0cspfa\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u800c\u5f97\u4ee5\u5b9e\u73b0\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u4efb\u610f\u4e24\u4e2a\u5706\u4e4b\u95f4\u8fde\u8fb9\uff0c\u7136\u540e\u518d\u8ba9\u4ed6\u4eec\u548c\u5de6\u8fb9\u90a3\u6761\u8fb9\uff0c\u4e0a\u8fb9\u90a3\u6761\u8fb9\u6216\u53f3\u8fb9\u90a3\u6761\u8fb9\uff0c\u4e0b\u8fb9\u90a3\u6761\u8fb9\u8fde\u8fb9\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u8981\u627e\u5230\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u5176\u5305\u542b\u6bcf\u4e2a\u70b9\u548c\u90a3\u56db\u6761\u8fb9\u3002\u8fd9\u6837\u5b50\u6211\u4eec\u4e5f\u53ef\u4ee5\u987a\u5229\u89e3\u51b3\u8fd9\u9053\u9898\n\n\u6ce8\u610f\uff1a\u6ce8\u610f\uff1a\u6ce8\u610f\uff1a\u8fd9\u4e2a\u9898\u6570\u636e\u89c4\u6a21\u5f88\u5927\uff0c\u8981\u8bb0\u5f97\u7528\u90a3\u4e2a\u51e0\u4e4e\u53ef\u80fd\u5fd8\u4e86\u7684\u90bb\u63a5\u77e9\u9635\u6765\u8dd1spfa\u3002\u7a20\u5bc6\u56fe\u5c31\u662f\u8fd9\u4e48\u6076\u5fc3\u7684\u5361\u98despfa\u3002\n\n\n    \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm> \n#define re register\nusing namespace std;\ntypedef long long LL;\nstruct point\n{\n    int x;\n    int y;\n    LL z;\n};\npoint d[3000001];\nint m,n,a,b,l,h,tot,sum,k,s,num;\nint temp[10000001]; \ndouble dis[1000001],map[3005][3005],x[1000001],y[1000001];\nbool visit[10000001];\ndouble js(int x1,int x2,int y1,int y2)\n{\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))/2;\n}\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') {if (ch == '-') f = -1; ch = getchar();}\n    while (ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}\n    return x * f;\n}\ninline void spfa()\n{\n    int head=0;\n    int tail=1;\n    dis[0]=0;\n    visit[0]=1;\n    while(head<tail)\n    {\n        int now=temp[++head];\n        visit[now]=0;\n        for(re int i=0;i<=n+1;i++)\n        {\n            if(i==now)\n            continue;\n            if(dis[i]>max(dis[now],map[now][i]))\n            {\n                dis[i]=max(dis[now],map[now][i]);\n                if(!visit[i])\n                {\n                    visit[i]=1;\n                    temp[++tail]=i;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    n=read();\n    a=read();\n    b=read();\n    for(re int i=1;i<=n;i++)\n    {\n        x[i]=read();\n        y[i]=read();\n    }\n    for(re int i=1;i<n;i++)\n     for(re int j=i+1;j<=n;j++)\n     {\n         map[i][j]=map[j][i]=js(x[i],x[j],y[i],y[j]);\n     }\n    for(re int i=1;i<=n;i++)\n    {\n        map[0][i]=map[i][0]=min(x[i]-1,b-y[i]),map[n+1][i]=map[i][n+1]=min(a-x[i],y[i]-1);\n    }\n    memset(dis,100,sizeof(dis));\n    map[0][n+1]=map[n+1][0]=0x7fffffff;\n    spfa();\n    printf(\"%.2lf\",dis[n+1]);\n}\n\u819c\u62dc\u8fd9\u4e2a\u989868\u6beb\u79d2\u8dd1\u8fc7\u53bb\u7684\u90a3\u4e2a\u5927\u725b\u5206\u7ad9rank1.\u3002\n```",
        "postTime": 1509363671,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "\u6211\u7684naive\u7684\u505a\u6cd5\u662f\u4e8c\u5206\u7b54\u6848+\u5224\u5b9a\u662f\u5426\u6709\u8def\u5f84\u53ef\u8d70\u2026\u2026\u4f46\u662f\u6ca1\u6709\u6b63\u786e\u7406\u89e3\u3010\u8d70\u7684\u65b9\u5411\u4efb\u610f\u3011\u8fd9\u53e5\u8bdd\u2026\u2026\n\n\u3000\u3000\u5176\u5b9e\u5c31\u662f\u8bf4\u60f3\u548b\u8d70\u548b\u8d70= =360\u00b0\u65e0\u6b7b\u89d2\u4e71\u8d70\u2026\u2026\n\n\u3000\u3000\u6240\u4ee5\u5176\u5b9e\u662f\u4e2a\u5e73\u9762\u4e0a\u7684\u95ee\u9898\u2026\u2026\n\n \n\n\u3000\u3000\u6211\u4eec\u53ef\u4ee5\u6362\u4e2a\u65b9\u5411\u6765\u8003\u8651\u2026\u2026\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u5224\u65ad\u82f1\u96c4\u8d70\u5230/\u8d70\u4e0d\u5230\u516c\u4e3b\u90a3\u91cc\uff0c\u662f\u4e0d\u662f\u5c31\u7b49\u4ef7\u4e8e\uff0cboss\u63a7\u5236\u7684\u533a\u57df\u8fde\u8d77\u6765\u4e86\u4f7f\u5f97\u82f1\u96c4\u8d70\u4e0d\u5230\u516c\u4e3b\u90a3\u91cc\u4e86\uff1f\uff08\u72fc\u6293\u5154\u5b50\u7684\u5373\u89c6\u611f\uff09\n\n\u3000\u3000\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8f6c\u5316\u6210\u4ece\u4e0a\u8fb9&\u5de6\u8fb9\uff0c\u5728boss\u4e4b\u95f4\u8d70\uff0c\u4f7f\u5f97\u8d70\u5230\u4e0b\u8fb9&\u53f3\u8fb9 \u8def\u5f84\u4e0a\u6700\u5927\u7684\u4e00\u6761\u8fb9\uff08\u8fb9\u6743\u4ee3\u8868\u7740\u5982\u679c\u82f1\u96c4\u4ece\u8fd9\u4e24\u4e2aboss\u4e4b\u95f4\u7ecf\u8fc7\uff0c\u79bb\u4e24\u4e2aboss\u6700\u8fd1\u7684\u8ddd\u79bb\uff08\u6240\u4ee5\u5c31\u662fdis(boss[i],boss[j])2  dis(boss[i],boss[j])2\uff09\uff09\u6700\u5c0f\u3002\n\n\u3000\u3000\u8fd9\u4e2a\u597d\u50cf\u4e0d\u80fdSPFA\uff1f\uff08\u660e\u660e\u662f\u4f60\u84bb\uff09\u2026\u2026\u6211WA40\u4e86\u2026\u2026\u53ea\u80fdbellman-ford\u8fed\u4ee3\u4e86\u2026\u2026\n\n\n\u9644\u4e0a\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\n#define LL long long\nLL in() {\n    char ch; LL x = 0, f = 1;\n    while(!isdigit(ch = getchar()))(ch == '-') && (f = -f);\n    for(x = ch ^ 48; isdigit(ch = getchar()); x = (x << 1) + (x << 3) + (ch ^ 48));\n    return x * f;\n}\nconst int maxn = 3505;\nint n;\nbool flag;\ndouble X, Y;\nstruct node {\n    double x, y;\n    node(double x = 0, double y = 0): x(x), y(y) {}\n}e[maxn];\nstd::vector<int> v[maxn];\nbool vis[maxn];\ndouble D[maxn][maxn];\nstd::queue<int> q;\nbool ok(double mid) {\n    while(!q.empty()) q.pop();\n    for(int i = 1; i <= n; i++) {\n        if(e[i].x < mid || Y - e[i].y < mid) q.push(i), vis[i] = true;\n        else vis[i] = false;\n    }\n    while(!q.empty()) {\n        int tp = q.front(); q.pop();\n        if(X - e[tp].x < mid || e[tp].y < mid) return false;\n        for(int i = 1; i <= n; i++) if(!vis[i] && D[tp][i] < mid * mid * 4.0) vis[i] = true, q.push(i);\n    }\n    return true;\n}\nint main() {\n    n = in(), X = in() - 1, Y = in() - 1;\n    for(int i = 1; i <= n; i++) e[i].x = in() - 1, e[i].y = in() - 1; \n    for(int i = 1; i <= n; i++)\n        for(int j = i + 1; j <= n; j++) {\n            node a = e[i], b = e[j];\n            D[i][j] = D[j][i] = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n        }\n    double l = 0, r = std::min(X, Y), ans = r;\n    int t = 200;\n    while(t--) {\n        double mid = (l + r) / 2.0;\n        if(ok(mid)) ans = mid, l = mid;\n        else r = mid;\n    }\n    printf(\"%.2f\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1552704243,
        "uid": 175262,
        "name": "zzhhtt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "\u522b\u7684\u4e0d\u8bf4\uff0c\u8d21\u732e\u4e00\u4e2a\u5947\u5999\u7684\u526a\u679d\uff1a\n\u5148\u628a\u6240\u6709\u5750\u6807\u8bfb\u5165\uff0c\u8bb0\u4e0b\u5b83\u4e0e\uff081,1\uff09\u4e0e\uff08row\uff0cline\uff09\u7684\u8ddd\u79bb\uff0c\u5e76\u5728\u6240\u6709\u7684\u8ddd\u79bb\u4e2d\u53d6\u6700\u5c0f\u503c\u3002\n\u56e0\u4e3a\u5982\u679c\u4ece\uff081,1\uff09\u80fd\u5230\uff08row\uff0cline\n)\u90a3\u4e48\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u52c7\u58eb/\u516c\u4e3b\u5230boss\u7684\u8ddd\u79bb\u4e00\u5b9a>=\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\u4e4b\u540e\u521d\u59cb\u5316\u56fe\u7684\u65f6\u5019\u53ea\u8981\u4e24\u70b9\u95f4\u8ddd\u79bb>\u8fd9\u4e2a\u6700\u5c0f\u503c\u5c31\u76f4\u63a5\u4e0d\u52a0\u5165\uff0c\u7136\u540e\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5c31\u98de\u5feb\n",
        "postTime": 1523676622,
        "uid": 43966,
        "name": "\u68a8\u9a6c\u7f8a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    },
    {
        "content": "\u628a\u5de6\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u628a\u53f3\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u7684\u4e00\u534a\uff0c\u548c\u8fb9\u754c\u7684\u8ddd\u79bb\u662f\u5782\u7ebf\u6bb5\u957f\u5ea6\uff0c\u7136\u540e\u6c42\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8def\u5f84\u6700\u957f\u8fb9\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u7528dijkstra\u5c31\u53ef\u4ee5\u505a\n\u5751\u70b9\u662f\uff0c\u5de6\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f1\uff0c\u4e0d\u662f0\n```cpp\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <iomanip>\nusing namespace std;\nstruct point{\n    double x,y;\n}nu[3100];\ndouble mx(point a,point b)\n{\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\ndouble ds[3100][3100]={0};\nint n,m=0;\ndouble x,y;\ndouble jk[3100]={0};\nbool vis[3100]={0};\nstruct dr{\n    int x;\n    double dis;\n};\nbool operator<(dr a,dr b)\n{\n    return a.dis>b.dis;\n}\npriority_queue<dr> q;\nvoid dj(int x)\n{\n    jk[x]=0;\n//  vis[x]=1;\n    q.push({x,0});\n    while (!q.empty())\n    {\n        dr r=q.top();\n        int x=r.x;\n        double dis=r.dis;\n        q.pop();\n        if (vis[x])\n            continue;\n        vis[x]=1;\n//      cout<<x<<'-'<<jk[x]<<endl;\n        for (int i=1;i<=n+2;i++)\n          if (!vis[i])\n            if (max(ds[x][i],jk[x])<jk[i]){\n                jk[i]=max(ds[x][i],jk[x]);\n//              cout<<i<<' '<<jk[i]<<endl;\n                q.push({i,jk[i]});\n            }\n//      cout<<endl;\n    }\n\n}\nint main()\n{\n    cin>>n>>x>>y;\n    int UL=n+1,DR=n+2;\n    for (int i=1;i<=n;i++){\n        cin>>nu[i].x>>nu[i].y;\n        for (int ii=1;ii<i;ii++)\n        {\n            ds[i][ii]=ds[ii][i]=mx(nu[i],nu[ii])/2;\n        }\n        ds[i][UL]=ds[UL][i]=min(nu[i].x-1,y-nu[i].y);\n        ds[i][DR]=ds[DR][i]=min(x-nu[i].x,nu[i].y-1);\n    }   \n    for (int i=1;i<=n+2;i++)\n        ds[i][i]=0;\n    ds[UL][DR]=ds[DR][UL]=999999999999;\n//  for (int i=1;i<=n+2;i++){\n//      for (int ii=1;ii<=n+2;ii++)\n//          cout<<ds[i][ii]<<' ';\n//      cout<<endl;\n//  }\n    for (int i=1;i<=n+2;i++)\n        jk[i]=9999999999999;\n    dj(UL);\n//  for (int i=1;i<=n+2;i++)\n//      cout<<jk[i]<<' ';\n//  cout<<endl;\n    cout<<fixed<<setprecision(2)<<jk[DR]<<endl;\n} \n```\n",
        "postTime": 1586827676,
        "uid": 57978,
        "name": "\u80e1\u5c14\u514bHULK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2498 \u3010[SDOI2012]\u62ef\u6551\u5c0f\u4e91\u516c\u4e3b\u3011"
    }
]