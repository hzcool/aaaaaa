[
    {
        "content": "# ~~**STL\u5927\u6cd5\u597d\uff01**~~\n\n# \u611f\u8c22\u673a\u623f\u5927\u4f6c @S_AKM \u63d0\u4f9b\u7684\u601d\u8def\u2014\u2014\u5c3a\u53d6\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528hash,\u7528map\u5b58\u79cd\u7c7b\u5c31\u884c\u4e86\u3002\uff08~~\u867d\u7136\u6bd4\u8f83\u6162~~\uff09\n\n\u6b64\u5916\uff0c\u5927\u81f4\u601d\u8def\u4e0e\u5176\u4ed6\u9898\u89e3\u76f8\u540c\u3002\n\n\u8d34\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n    int x;\n    int p;\n};\nnode s[70000];\nint ans=2e9,sum,n,z,tail;\nmap<int,int>t;\nmap<int,bool>pan;\nbool cmp(node a,node b){\n    return a.x<b.x;\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n    \tcin>>s[i].x>>s[i].p;\n    \tif(pan[s[i].p]==false){\n    \t\tsum++;\n    \t\tpan[s[i].p]=true;//\u9884\u5904\u7406\u4e00\u6ce2\uff0c\u8bb0\u5f55\u5976\u725b\u7684\u79cd\u7c7b\u603b\u6570\n\t\t}\n\t}\n    sort(s+1,s+n+1,cmp);\n    tail=1;\n    t[s[1].p]++;\n    z=1;\n    for(int i=1;i<=n;i++){//\u4ee5\u4e0b\u601d\u8def\u4e0e\u5176\u4ed6\u9898\u89e3\u7c7b\u4f3c\uff0c\u5c31\u662f\u7528tail\u5c3e\u6307\u9488\u548c\u5934\u6307\u9488i\u4e0d\u65ad\u67e5\u627e\u66f4\u65b0\u7b54\u6848\n        while(z<sum&&tail<n){\n            tail++;\n            t[s[tail].p]++;\n            if(t[s[tail].p]==1)z++;\n        }\n        if(z==sum)ans=min(ans,s[tail].x-s[i].x);\n        t[s[i].p]--;\n        if(t[s[i].p]==0)z--;\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1540516379,
        "uid": 54298,
        "name": "\u7cea\u773e\u8126\u98b0\u7f77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u7b97\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u7684\u4e86~~\uff08\u8fde\u6211\u8fd9\u79cd\u849f\u84bb\u90fd\u4f1a\u4e86~~\uff09\n\u5229\u7528stl\u4e2d\u7684map\u51fd\u6570\n\n\n  ```\n#include<algorithm>\n#include<cstring>\n#include<stdio.h>\n#include<iostream>\n#include<map>\nusing namespace std;\nstruct Node{\n\tint x,id;\n}cow[50005],que[50005];//\u7ed3\u6784\u4f53 \nmap<int,int>mp; //stl\u4e2d\u7684map\uff08\u6620\u5c04\uff09 \nbool cmp(Node p,Node q){\n\treturn p.x<q.x;\n}\nint main(){\n\tint n,sum=0,ans=2147483647;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&cow[i].x,&cow[i].id);\n\t\tmp[cow[i].id]++;\n\t\tif(mp[cow[i].id]==1)sum++;//\u8ba1\u7b97\u5976\u725b\u79cd\u6570 \n\t}\n\tsort(cow+1,cow+n+1,cmp);\n\tmp.clear();//\u6e05\u7a7a \n\tint l=1,r=0,tot=0;//tot:\u7167\u7247\u4e2d\u7684\u5976\u725b\u79cd\u6570 l\u5de6\u7aef\u70b9 r\u53f3\u7aef\u70b9 \n\tfor(int i=1;i<=n;i++){\n\t\tif(!mp[cow[i].id])//\u5982\u679ccow[i].id\u4e0d\u5728mp\u4e2d \n\t\t\tmp[cow[i].id]=1,tot++;\n\t\telse \n\t\t\tmp[cow[i].id]++;\n\t\tque[++r]={cow[i].x,cow[i].id};\n\t\twhile(mp[que[l].id]>1)//\u53bb\u91cd \n\t\t\t--mp[que[l++].id];//l++\u5de6\u7aef\u70b9\u53f3\u79fb\u4e00\u4f4d \n\t\tif(tot==sum)//\u7167\u7247\u4e2d\u5976\u725b\u79cd\u6570\u7b49\u4e8e\u4e00\u5171\u7684\u5976\u725b\u79cd\u6570 \n\t\t\tans=min(ans,que[r].x-que[l].x);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1595386446,
        "uid": 251085,
        "name": "zoelxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]Cow Lineup S\u3011"
    },
    {
        "content": "**update 2020/1/18\uff0c\u4fee\u6539\u4e86\u4e00\u4e9b\u5c0f\u7ec6\u8282**\n\n\u53cc\u500d\u7ecf\u9a8c\uff1a[P2564 [SCOI2009]\u751f\u65e5\u793c\u7269](https://www.luogu.com.cn/problem/P2564)\n\n#### \u4e0d\u9700\u8981STL\u961f\u5217\uff01\u4e0d\u9700\u8981\u624b\u5199\u961f\u5217\uff01\u4e0d\u9700\u8981\u53cc\u7aef\u961f\u5217\uff01\u76f4\u63a5\u7528\u53cc\u6307\u9488\uff01\n\n\u9996\u5148\uff0c\u5c06\u6240\u6709\u725b\u6309\u7167\u5750\u6807\u5347\u5e8f\u6392\u5217\uff0c\u5e76\u628a\u4ed6\u4eec\u90a3\u53c8\u81ed\u53c8\u957f\u7684ID\u5229\u7528 map \u6362\u6210\u4e00\u4e2a\u8fde\u7eed\u7684ID  \n\u6570\u7ec4 $c[]$ \u7ef4\u62a4\u5f53\u524d\u533a\u95f4 $[l,r]$ \u4e2d\u6bcf\u79cd\u725b\u51fa\u73b0\u7684\u6b21\u6570\uff0c$sum$ \u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5185\u725b\u7684\u79cd\u7c7b\u603b\u6570\uff0c$tot$ \u4e3a\u603b\u5171\u725b\u7684\u79cd\u6570\uff0c\u6700\u5f00\u59cb $l=1,r=0$ \n\n\u63a5\u4e0b\u6765\u5f00\u59cb\u679a\u4e3e\uff1a\n\n\u82e5\u5f53\u524d\u533a\u95f4$sum<tot$\uff0c\u8bf4\u660e\u725b\u7684\u79cd\u6570\u8fd8\u4e0d\u591f\uff0c\u5c31\u628a\u533a\u95f4\u5f80\u53f3\u6269\u5c55 `++r`  \u5e76\u7ef4\u62a4 $c[id[r]],sum$  \n\u7136\u540e\uff0c\u5c06\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u591a\u4f59\u7684\u725b\u5f39\u6389\u3002\u4e5f\u5c31\u662f\u5982\u679c $c[id[l]]>1$ `++l`\u3002**\u6ce8\u610f\uff1a** \u5982\u679c\u5f39\u6389\u4e86\u725b\u4e00\u5b9a\u8981\u66f4\u65b0$c[]$\u548c$sum$  \n\n\u6700\u540e\uff0c\u5982\u679c\u8fd8\u662f $sum<tot$\uff0c\u91cd\u590d\u4e0a\u9762\u64cd\u4f5c\u3002\u5982\u679c $sum=tot$ \u5c31\u66f4\u65b0\u7b54\u6848\u5e76\u4e14`++l`\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<map>\n#include<algorithm>\nusing namespace std;\nconst int Maxn=50000+20,inf=0x3f3f3f3f;\nmap <int , int> vis;\nint a[Maxn],id[Maxn],c[Maxn];\nstruct cow{\n\tint x,d;\n}srt[Maxn];\nint n,ans=inf,tot;\ninline bool cmp(cow u,cow v)\n{\n\treturn u.x<v.x;\n}\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\nint calc(int x)\n{\n\tif(!vis[x])vis[x]=++tot;\n\treturn vis[x];\n}\nint main()\n{\n//\tfreopen(\"in.txt\",\"r\",stdin);\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tsrt[i].x=read();\n\t\tint tmp=read();\n\t\tsrt[i].d=calc(tmp);\n\t}\n\tsort(srt+1,srt+1+n,cmp); //\u7ed3\u6784\u4f53\u4ec5\u7528\u6765\u6392\u5e8f\n\tfor(int i=1;i<=n;++i)\n\ta[i]=srt[i].x,id[i]=srt[i].d;\n\t\n\tint l=1,r=0,sum=0;\n\twhile(r<n)\n\t{\n\t\t++r,c[id[r]]++; //\u8bb0\u5f97\u7edf\u8ba1c[]\u548csum\uff01\n\t\tif(c[id[r]]==1)++sum;\n\t\twhile(c[id[l]]>1)\n\t\t{\n\t\t\tc[id[l]]--;\n\t\t\tif(!c[id[l]])--sum;\n\t\t\t++l;\n\t\t\tif(l>r)break; //\u5982\u679c\u533a\u95f4\u91cc\u5df2\u7ecf\u6ca1\u4e1c\u897f\u4e86\u5c31 break\n\t\t}\n\t\tif(sum==tot)\n\t\t{\n\t\t\tans=min(ans,a[r]-a[l]); //\u66f4\u65b0\u7b54\u6848\n\t\t\tc[id[l]]--; //\u8bb0\u5f97\u7edf\u8ba1c[]\u548csum\uff01\n\t\t\tif(!c[id[l]])--sum;\n\t\t\t++l;\n\t\t}\n\t}\n\t\n\tprintf(\"%d\\n\",ans);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1578292307,
        "uid": 120362,
        "name": "Priori_Incantatem",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u6211\u6bd4\u8f83\u83dc\uff0c\u5199\u4e86\u4e00\u53d1\u53cc\u7aef\u961f\u5217\u3002\n\n\u5148\u8bb0\u5f55\u603b\u5171\u6709\u51e0\u4e2aid\n\n\u7136\u540e\u6309\u7167\u4f4d\u7f6e\u4ece\u5c0f\u5230\u5927\u6392\u4e00\u904d\u5e8f\uff1b\n\n\u6bcf\u6b21\u8bfb\u5230\u4e00\u4e2aid\u6211\u4eec\u76f4\u63a5\u7528\u4e00\u4e2aSTL\u7684map\u6765\u8bb0\u5f55\u5f53\u524did\u51fa\u73b0\u7684\u6b21\u6570~~\uff08\u539f\u8c05\u6211\u61d2\uff09~~\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5f39\u961f\u9996\uff0c\u76f4\u5230\u961f\u9996\u7684id\u53ea\u5269\u4e0b1\u5e76\u4e14\u961f\u4e2d\u7684id\u6570\u5df2\u7ecf\u7b49\u4e8e\u7ed9\u5b9a\u7684id\u6570\u65f6\uff0c\u6211\u4eec\u66f4\u65b0\u7b54\u6848\u3002\n\n\u7b54\u6848\u662f\u8981\u6ee1\u8db3\u961f\u5217\u4e2d\u6bcf\u4e00\u4e2aid\u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\uff0c\u7528\u8fd9\u4e2a\u961f\u5217\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u662f\u5728\u4e00\u6bb5\u4e0d\u65ad\u5411\u540e\u7684\u8fde\u7eed\u7684\u533a\u95f4\u91cc\u6211\u4eec\u4e0d\u65ad\u5730\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u7b54\u6848\u7684\u6700\u5c0f\u503c\u80af\u5b9a\u662f\u4f1a\u5728\u961f\u9996\u5f39\u6389\u540e\u88ab\u66f4\u65b0\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e2a\u7b54\u6848\u662f\u6700\u5c0f\u7684\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct dd \n{\n    int x;\n    int id;\n}a[1000001],q[1000001];\nint n; \nint head=1,tail=0;\nint ans=1410065408;\nint num;\nint ff;\nmap<int,bool>gg;\nmap<int,int>ll;\nmap<int,int>c;\nmap<int,bool>mp2;\ninline bool cmp(const dd &x,const dd &y)\n{\n    return x.x<y.x;\n}\nvoid read(int &x)\n{\n    x=0;\n    char ch=getchar();\n    int pd=1;\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')\n        {\n            pd=-pd;\n        }\n        ch=getchar();\n    }\n    while(ch<='9'&&ch>='0')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    x*=pd;\n}\nvoid write(const int &x)\n{\n    char f[100001];\n    int s=0;\n    int tmp=x;\n    if(tmp<0)\n    {\n        tmp=-tmp;\n        putchar('-');\n    }\n    while(tmp>0)\n    {\n        f[s++]=tmp%10+'0';\n        tmp/=10;\n    }\n    while(s>0)\n    {\n        putchar(f[--s]);\n    }\n}\nint main()\n{\n    read(n);\n    for(register int i=1;i<=n;++i)\n    {\n        read(a[i].x);\n        read(a[i].id);\n        if(!gg[a[i].id])\n        {\n            gg[a[i].id]=1;//\u6709\u4e9b\u8001\u54e5\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u79bb\u6563\u5316\uff0c\u4f46\u662f\u6211\u592a\u61d2\u4e86\uff08\u53ef\u80fd\u662f\u83dc\uff09\u5c31\u6ca1\u6709\u5199\uff0c\u52a0\u4e86\u79bb\u6563\u5316\u66f4\u5feb\uff0c\u8fd9\u91cc\u6211\u5c31\u4e0d\u5199\u4e86\u3002\n            num++;\n        }\n    }\n//\tcout<<num;\n    sort(a+1,a+n+1,cmp);\n    q[1]=a[1];\n    ff=1;\n    c[a[1].id]++;\n    head=tail=1; \n    for(register int i=2;i<=n;++i)\n    {\n        q[++tail]=a[i];\n        if(!c[a[i].id])\n        {\n            ++ff;\n            c[a[i].id]++;\n        }\n        else \n        {\n            c[a[i].id]++;\n        }\n        while(c[q[head].id]>1&&head<=tail)\n        {\n            c[q[head].id]--;\n            head++;\n            \n        }//\u4e00\u5b9a\u8981\u5148\u5f39\u6389\u961f\u9996\u518d\u66f4\u65b0\uff0c\u4e0d\u7136\u4f1a\u7206\u86cb\u3002\n        if(ff==num)\n        {\n            ans=min(ans,q[tail].x-q[head].x);\n        }\n    }\n    write(ans);\n}\n```\n",
        "postTime": 1550368176,
        "uid": 87026,
        "name": "\u4e24\u5e74\u6253\u94c1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u54a6~dalao\u4eec\u600e\u4e48\u4e0d\u5199\u5355\u8c03\u961f\u5217\uff1f\u4e0d\u662f\u4e5f\u5f88\u77ed\u5417\uff1f\n\n------------\n- \u53d1\u73b0\u725b\u7ad9\u7684\u4f4d\u7f6e\u662f\u65e0\u5e8f\u7684\uff0c\u7b80\u5355\uff0c\u80af\u5b9a\u8981\u6392\u5e8f\u5566~~\n- \u4e00\u4e2asort\u7684\u4e8b\u60c5\uff01\uff01\n- \u521a\u770b\u5230\u9898\u76ee\u65f6\u53d1\u73b0\uff0c\u600e\u4e48x,d\u8fd9\u4e48\u5927\uff1f\u96be\u9053\u6570\u7ec4\u8981\u5f00\u5230\u51e0\u4ebf\u5417\uff1fdalao\u4eec\u90fd\u7528hash\uff0c\u7136\u800c\u672c\u849f\u84bb\u8ba4\u4e3a\u4e00\u4e2amap\u5c31\u80fd\u5b9e\u73b0\u79bb\u6563\u5316\u4e86\uff0c\u4e0d\u60f3\u5199\u5f97\u90a3\u4e48\u7d2f~~\n- \u5269\u4e0b\u7684\u5c31\u662f\u5355\u8c03\u961f\u5217\u4e86\uff1a\n- \u65e2\u7136\u5df2\u7ecf\u5904\u7406\u4e86x\u548cd\uff0c\u90a3\u4e48\u8fd9\u5c31\u7b80\u5355\u4e86/\n- \u7528c[i]\u8868\u793ahead~tail\u4e2d\u7b2ci\u54c1\u79cd\u7684\u6570\u91cf\uff1b\n- \u5982\u679cq[head]\u4e2d\u725b\u7684\u54c1\u79cdi\u4f7f\u5f97c[i]>1\uff1b\n- \u90a3\u4e48\u8fd9\u4e2a\u5c31\u662f\u591a\u4f59\u7684\u5566\uff01\uff01\n- \u6ca1\u7528\u7684\u5c31\u5220\u4e86\uff0chead++\uff1b\n- \u6bcf\u6b21\u8d70\u5b8c\u5224\u65ad\u4e00\u4e0b\u8ddd\u79bb\uff0c\u672c\u9898\u7684\u9898\u89e3\u5c31\u51fa\u6765\u5566~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,i,num,minn=1000000000,kc,ff,c[50001],t,w;\nmap<int,int> a;\nstruct node\n{\n\tint k,id;\n}f[50001],q[50001];\nint comp(const node&a,const node&b){return a.k<b.k;}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)//\u79bb\u6563\u5316\uff0c\u5c06\u725b\u7684\u54c1\u79cd\u8f6c\u4e3a\u4e00\u4e32\u6709\u5e8f\u7684\u6570 \n\t{\n\t  scanf(\"%d%d\",&f[i].k,&kc);\n\t  if(!a.count(kc)) ff++,a[kc]=ff;//ff\u8868\u793a\u725b\u7684\u54c1\u79cd\u603b\u6570 \n\t  f[i].id=a[kc];\n    }\n\tsort(f+1,f+n+1,comp);\n\tq[1].k=f[1].k;q[1].id=f[1].id;\n\tc[f[1].id]++;num=1;t=1;w=1;//num\u8868\u793ahead(t)~tail(w)\u4e2d\u725b\u7684\u603b\u6570 \n\tfor(i=2;i<=n;i++)\n\t{\n\t\tif(!c[f[i].id]){num++;c[f[i].id]=1;}\n\t\telse c[f[i].id]++;\n\t\tw++;\n\t\tq[w].k=f[i].k;q[w].id=f[i].id;//\u5165\u961f\u5904\u7406 \n\t\twhile(c[q[t].id]>1){c[q[t].id]--;t++;}//\u51fa\u961f\u5904\u7406 \n\t\tif(num==ff) minn=min(minn,q[w].k-q[t].k); \n\t}\n\tprintf(\"%d\",minn);\n} \n```",
        "postTime": 1520046536,
        "uid": 49719,
        "name": "__JR_\u98d8\u6447__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u5148\u6309\u4f4d\u7f6e\u6392\u5e8f\uff0c\u7528\u4e00\u4e2ahash\u8868\u793a\u7f16\u53f7\u3002\u7136\u540e\u7528\u3010i\uff0cremain\u3011\u8868\u793a\u6240\u9009\u7684\u533a\u95f4\uff0c\u6bcf\u6b21\u5c06i++\uff0c\u7136\u540eremain\u5411\u540e\u8d70\uff0c\u76f4\u5230\u6574\u4e2a\u533a\u95f4\u5305\u62ec\u6240\u6709\u79cd\u7c7b\u7684\u725b\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u5c3a\u53d6\u6cd5\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5206\u4e3a4\u5e03\uff1a\n\n\n1.\u521d\u59cb\u5316\u5de6\u53f3\u7aef\u70b9\n\n\n2.\u4e0d\u65ad\u6269\u5927\u53f3\u7aef\u70b9\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\n\n\n3.\u5982\u679c\u7b2c\u4e8c\u6b65\u4e2d\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u7ec8\u6b62\uff0c\u5426\u5219\u66f4\u65b0\u7ed3\u679c\n\n\n4.\u5c06\u5de6\u7aef\u70b9\u6269\u59271\uff0c\u7136\u540e\u56de\u5230\u7b2c\u4e8c\u6b65\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nstruct ss\n{\n    int pos,num;\n}s[70000];\nint f[70000][2],t[70000],ans=-1,cnt,n;\nint find(int x)\n{\n    int i=x%65841;\n    while(f[i][0]!=x&&f[i][0])\n    {\n        i++;\n        i%=65841;\n    }\n    if(!f[i][0])\n    {\n        f[i][1]=++cnt;\n        f[i][0]=x;\n        return cnt;\n    }\n    return f[i][1];\n}\nbool cmp(ss a,ss b)\n{\n    return a.pos<b.pos;\n}\nint main()\n{\n    int i,j;\n    cin>>n;\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&s[i].pos,&s[i].num);\n        s[i].num=find(s[i].num);\n    }\n    sort(s+1,s+n+1,cmp);\n    int z=0,remain=1;\n    t[s[1].num]++;\n    z=1;\n    for(i=1;i<=n;i++)\n    {\n        while(z<cnt&&remain<n)\n        {\n            remain++;\n            t[s[remain].num]++;\n            if(t[s[remain].num]==1)\n            z++;\n        }\n        if((ans==-1||ans>s[remain].pos-s[i].pos)&&z==cnt)\n        ans=s[remain].pos-s[i].pos;\n        t[s[i].num]--;\n        if(!t[s[i].num])\n        z--;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1488432350,
        "uid": 24805,
        "name": "luaddict",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u6211\u6765\u53d1\u7b2c\u4e00\u4e2a\u9898\u89e3\uff01\u6b64\u9898\u6bd4\u8f83\u6c34\uff01\uff01\uff01\n\n\u9996\u5148\u5c06\u725b\u7684\u4f4d\u7f6e\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u65b9\u4fbf\u5904\u7406\u3002\u7136\u540eL\u6307\u9488\u6307\u5411\u6700\u5de6\u7684\u725b\uff0cR\u6307\u9488\u4e5f\u6307\u5411\u6700\u5de6\u7684\u725b\u3002\u7136\u540eR\u4e00\u76f4\u5f80\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u533a\u95f4\u5305\u542b\u6240\u6709\u79cd\u7c7b\u7684\u725b\uff0c\u7136\u540e\u518d\u79fb\u52a8L\u6307\u9488\uff0c\u82e5\u67d0\u4e00\u65f6\u523b\u6b64\u533a\u95f4\u4e0d\u5305\u542b\u6240\u6709\u725b\u4e86\uff0c\u90a3\u4e48\u5c31\u79fb\u52a8R\u6307\u9488\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u76f4\u5230R\u5230\u8fbeN\u53f7\u4f4d\u7f6e\u4e3a\u6b62\uff01\u8be6\u89c1\u4ee3\u7801\uff1a\n\n\n\n\n    \n    \n    \n```cpp\n#include<iostream>\n#include<fstream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<vector>\n#include<queue>\n#include<deque>\n#include<utility>\n#include<map>\n#include<set>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<functional>\n#include<sstream>\n#include<cstring>\n#include<bitset>\n#include<stack>\nusing namespace std;\nint n,ans,cnt,mn=2147483647;\nstruct sdt\n{\n    int x,id;\n}a[50005];\nmap<int,int>mp;\nmap<int,bool>vis;\nbool cmp(sdt x,sdt y)\n{\n    return x.x<y.x;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&a[i].x,&a[i].id);\n        if(vis.find(a[i].id)==vis.end())\n        {\n            vis[a[i].id]=1;\n            cnt++;\n        }\n    }\n    sort(a+1,a+n+1,cmp);\n    /*for(int i=1;i<=n;i++)\n    {\n        cout<<a[i].id<<\" \"<<a[i].x<<endl;\n    }*/\n    int l=1,r=1,kkk=0;\n    bool f=0;\n    kkk++;\n    if(kkk==cnt)\n    {\n        mn=a[1].x-1;\n        f=1;\n    }\n    mp[a[1].id]++;\n    while(r<=n)\n    {\n        if(f==0)\n        {\n            if(r==n)break;\n            r++;\n            if(mp.find(a[r].id)==mp.end() || mp[a[r].id]==0)kkk++;\n            mp[a[r].id]++;\n            if(kkk==cnt)\n            {\n                mn=min(mn,a[r].x-a[l].x);\n                //cout<<a[r].x<<\" \"<<a[l].x<<endl;\n                f=1;\n            }\n        }\n        else \n        {\n            l++;\n            if(mp[a[l-1].id]==1)\n            {\n                kkk--;\n                f=0;\n            }\n            if(f==1)mn=min(mn,a[r].x-a[l].x);\n            //if(f==1)cout<<a[r].x<<\" \"<<a[l].x<<endl;\n            mp[a[l-1].id]--;\n        }\n    }\n    printf(\"%d\\n\",mn);\n    return 0;\n}\n```",
        "postTime": 1476093218,
        "uid": 16817,
        "name": "winmt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "$\\text{\u5355\u8c03\u961f\u5217\u88f8\u9898}$\n\n\u5355\u8c03\u961f\u5217\u91cc\u7684\u5143\u7d20\u5168\u90e8\u662f\u5355\u8c03\u4e0a\u5347/\u4e0b\u964d\u7684\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6392\u5e8f\n\u5982\u679c\u51fa\u73b0\u4e86\u76f8\u540c\u7684\u6570\u5b57 \u90a3\u4e48\u6211\u4eec\u628a l ++ \u5373 pop \u524d\u9762\u7684\u6570\u5b57\n\n$\\mathcal Code$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n\nint n ;\nconst int N = 100000 + 5 ;\nstruct node {\n\tint pos ;\n\tint id ;\n\tbool operator < (const node & _Other) const {\n\t\treturn pos < _Other.pos ;\n\t}\n}f[N] , q[N] ;\n\nmap < int , int > cnt ;\nmap < int , int > b ;\nsigned main() {\n\tios :: sync_with_stdio(false) ;\n\tcin >> n ;\n\tint num = 0 ;\n\tfor(register int i = 1 ; i <= n ; i ++) {\n\t\tcin >> f[i].pos >> f[i].id ;\n\t\tb[f[i].id] ++ ;\n\t\tif(b[f[i].id] == 1) ++ num ;\n\t}\n\tsort(f + 1 , f + n + 1) ;\n\tint ans = INT_MAX ;\n\tint l = 1 , r = 0 , tot = 0 ;\n\tfor(register int i = 1 ; i <= n ; i ++) {\n\t\tif(! cnt[f[i].id]) {\n\t\t\tcnt[f[i].id] = 1 ;\n\t\t\ttot ++ ;\n\t\t}\n\t\telse {\n\t\t\tcnt[f[i].id] ++ ;\n\t\t}\n\t\tq[++ r] = {f[i].pos , f[i].id} ;\n\t\twhile(cnt[q[l].id] > 1) {\n\t\t\t-- cnt[q[l ++].id] ;\n\t\t}\n\t\tif(num == tot) ans = min(ans , q[r].pos - q[l].pos) ;\n\t}\n\tcout << ans << endl ;\n\treturn  0;\n}",
        "postTime": 1568720882,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7684\u88f8\u9898\n\n\u5176\u5b9e\u8bf4\u5355\u8c03\u961f\u5217\u4e5f\u4e0d\u662f\u5f88\u786e\u5207\uff0c\u56e0\u4e3a\u5e76\u6ca1\u6709\u4ece\u961f\u5934\u5f39\u51fa\u518d\u63d2\u5165\u7684\u64cd\u4f5c\n\n\u53ef\u4ee5\u8fd1\u4f3c\u7684\u770b\u6210**\u8d2a\u5fc3**\u7b97\u6cd5\n\n### \u8d2a\u5fc3\u601d\u8def\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u628a\u7b2c\u4e00\u4e2a\u5143\u7d20\u538b\u5165\u961f\u5217\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8981\u8fdb\u5165\u961f\u5217\u7684\u5143\u7d20\uff0c\u5728\u8fdb\u5165\u540e\uff0c\u6211\u4eec\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\n\n1.\u5c06\u8be5\u5143\u7d20\u4ee3\u8868\u7684\u79cd\u7c7b\u51fa\u73b0\u6b21\u6570+1\n\n2.\u5982\u679c\u961f\u5c3e\u5143\u7d20\u4ee3\u8868\u7684\u79cd\u7c7b\u51fa\u73b0\u4e86\u4e00\u6b21\u4ee5\u4e0a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u961f\u5c3e\u7684\u5143\u7d20\u820d\u5f03\u6389\uff0c\u91cd\u590d\u6b64\u64cd\u4f5c\u76f4\u5230\u961f\u5c3e\u5143\u7d20\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\n\n3.\u5982\u679c\u961f\u5217\u5185\u51fa\u73b0\u7684\u6240\u6709\u79cd\u7c7b\u90fd\u51fa\u73b0\u8fc7\u4e86\uff0c\u66f4\u65b0\u7b54\u6848\n\n\u6211\u4eec\u5bf9\u4e0a\u8ff0\u64cd\u4f5c\u9010\u4e2a\u8fdb\u884c\u5206\u6790\uff1a\n\n\u64cd\u4f5c1\uff0c\u4e0d\u7528\u591a\u8bb2\n\n\u64cd\u4f5c2\uff0c\u4e3a\u4ec0\u4e48\u961f\u5c3e\u51fa\u73b0\u4e00\u6b21\u4ee5\u4e0a\u5c31\u53ef\u4ee5\u5f39\u6389\uff1f\u4e3e\u4e2a\u4f8b\u5b50\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5e8f\u5217\uff1a\uff08\u8bbepos = i\uff09\n\n`1,2,3,1,2`\n\n\u6700\u4f18\u7684\u9009\u6cd5\u80af\u5b9a\u662f\u9009\u62e9$[2,4]$\u6216$[3,5]$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u8fdb\u6765\u7684\u6570\u5c06\u4f1a\u7ed9\u7ed3\u679c\u5e26\u6765\u53ef\u80fd\u7684\u66f4\u5c0f\u503c\uff0c\u800c\u7559\u5728\u961f\u5c3e\u7684\u5143\u7d20\u76f8\u5f53\u4e8e\u62d6\u7d2f\u4e86\u7b54\u6848\u7684\u66f4\u65b0\n\n### \u4e3a\u4ec0\u4e48\u6bcf\u4e00\u4e2a\u6570\u4e0d\u8fdb\u884c\u5224\u65ad\u5c31\u538b\u5165\u961f\u5217\uff1f\n\n\u539f\u56e0\u662f\u4e00\u6837\u7684\uff0c\u8d8a\u540e\u9762\u8fdb\u5165\u7684\u6570\uff0c\u5c31\u66f4\u6709\u53ef\u80fd\u5e26\u6765\u66f4\u5c0f\u7684\u7ed3\u679c\n\n\u64cd\u4f5c3\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\u6027\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u64cd\u4f5c2\u4e0d\u4f1a\u820d\u5f03\u6389\u67d0\u4e9b\u4e2d\u95f4\u51fa\u73b0\u7684\u66f4\u4f18\u7684\u7b54\u6848\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n//Copyright (c) 2019 by xiao_mmQF. All Rights Reserved.\n#include<bits/stdc++.h>\n#include<bits/extc++.h>\n#define int long long\n#pragma GCC optimize(3)\n#define inl inline\n#define reg register\n#define db long double\n#define INF 0x3f3f3f3f3f3f3f3f\nusing namespace std;\nusing namespace __gnu_pbds;\nconst int MAXN=50050;\ninl int read(){ int x=0,f=0; char ch=0; while(!isdigit(ch))f|=(ch=='-'),ch=getchar(); while(isdigit(ch))(x*=10)+=(ch^48),ch=getchar(); return f?-x:x; }\ninl void Ot(reg int x) { if(x<0)putchar('-'),x=-x; if(x>=10)Ot(x/10); putchar(x%10+'0'); }\ninl void Print(reg int x,char til='\\n'){Ot(x);putchar(til);}\ninl int Max(reg int x,reg int y){return x>y?x:y;}\ninl int Min(reg int x,reg int y){return x<y?x:y;}\ninl int Abs(reg int x){return x<0?-x:x;}\nmap<int,int>mark;\nmap<int,bool>mk;\ndeque<int>que;\nint n,tot,ans=INF;\nstruct Node{\n    int pos;\n    int typ;\n    bool operator<(const Node &rhs)const{\n        return pos<rhs.pos;\n    }\n}cow[MAXN];\nsigned main() {\n    n=read();\n    for(reg int i=1;i<=n;i++)\n    {\n        cow[i].pos=read(),cow[i].typ=read();\n        if(!mk[cow[i].typ])mk[cow[i].typ]=1,tot++;//\u7edf\u8ba1\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u79cd\u7c7b\u6570\n    }\n    // printf(\"%lld\\n\",tot);\n    sort(cow+1,cow+n+1);//\u6309\u7167pos\u8fdb\u884c\u6392\u5e8f\n    for(reg int i=1,ret=0;i<=n;i++)\n    {\n        if(!mark[cow[i].typ])ret++;//\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u79cd\u65b0\u7684\u79cd\u7c7b\uff0c\u8ba9\u79cd\u7c7b\u6570+1\n        mark[cow[i].typ]++;//\u8be5\u4f4d\u7f6e\u4ee3\u8868\u7684\u79cd\u7c7b\u6570+1\n        que.push_front(i);//\u5c06\u5f53\u524d\u4f4d\u7f6e\u63a8\u5165\u961f\u5217\n        while(que.size()&&mark[cow[que.back()].typ]>1)mark[cow[que.back()].typ]--,que.pop_back();//\u5982\u679c\u961f\u5c3e\u7684\u5143\u7d20\u51fa\u73b0\u4e861\u6b21\u4ee5\u4e0a\uff0c\u76f4\u63a5\u820d\u5f03\n        if(ret==tot)ans=Min(ans,cow[que.front()].pos-cow[que.back()].pos);//\u66f4\u65b0\u7b54\u6848\uff0c\u7ef4\u62a4\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u53ef\u884c\u89e3\n        // if(!que.empty())\n        // printf(\"(%lld,%lld) %lld\\n\",que.front(),que.back(),ret);\n    }\n    Print(ans);\n    return 0 ;\n}\n\n```",
        "postTime": 1568727226,
        "uid": 58399,
        "name": "\u72f8\u72f8\u517b\u7684\u654f\u654f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u662fSTL\u9009\u624b\uff0c\u6211\u975e\u5e38\u559c\u6b22STL\u6c34\u9898\u76ee\n\n\u5bf9\u4e8e\u4f18\u5148\u961f\u5217\uff0c\u4e5f\u53ef\u4ee5\u5728$O(NlogN)$\u4e4b\u5185\u7684\u65f6\u95f4\u4e4b\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n\u5bf9\u4e8e\u961f\u5217\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5305\u542b\u5168\u90e8\u5976\u725b\u7684\u533a\u95f4$[L, R]$\uff0c\u8bbe\u5176\u4e2d\u7f16\u53f7\u4e3a$C_i$\u7684\u5976\u725b\u5b58\u5728$x$\u53ea\uff0c\u82e5$x \\leq 2$\u90a3\u4e48\u5982\u679c\u9664\u5f00\u6392\u6700\u5de6\u8fb9\u7684\u5976\u725b\uff0c\u4f1a\u6709\u4e24\u79cd\u7ed3\u679c:\n 1. **\u8be5\u5976\u725b\u5728\u533a\u95f4\u6700\u5de6\u4fa7\uff0c\u66f4\u65b0\u5de6\u8fb9\u754c\uff0c\u53ef\u80fd\u5f97\u5230\u7684\u7b54\u6848\u51cf\u5c0f**\n 2. \u533a\u95f4\u5927\u5c0f\u4e0d\u53d8\n \n\u800c\u4e14\u975e\u5e38\u663e\u7136\uff0c**\u7f16\u53f7\u4e3a$C_i$\u7684\u5976\u725b\u82e5\u6570\u91cf\u5927\u4e8e\u4e24\u53ea\u4e14\u5b58\u5728\u67d0\u4e00\u53ea\u4f4d\u4e8e\u533a\u95f4\u6700\u5de6\u4fa7\uff0c\u5219\u53ef\u4ee5\u66f4\u65b0\u533a\u95f4\u5de6\u4fa7\uff0c\u6392\u9664\u8fd9\u53ea\u4e0d\u5fc5\u8981\u7684\u5976\u725b**\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a$R$\uff0c\u663e\u7136\u8981\u66f4\u65b0\u7b54\u6848\u6211\u4eec\u5219\u8981\u53d6\u5f97\u6700\u5927\u7684$L$\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u533a\u95f4\u5185\u540c\u79cd\u5976\u725b\u7684\u6570\u91cf\u6765\u66f4\u65b0\uff0c\u5728\u6700\u540e\u8fd9\u4e2a\u533a\u95f4\u6700\u5de6\u4fa7\u7684\u5976\u725b\u663e\u7136\u5728\u533a\u95f4\u5185\u6ca1\u6709\u5176\u4ed6\u4efb\u4f55\u4e00\u53ea\u540c\u79cd\u5976\u725b\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u5e2e\u5fd9\u7ef4\u62a4\u4e86\uff0c\u597d\u5199\u6613\u61c2\uff0c\u5f53$R$\u7531$i-1$\u63a8\u8fdb\u81f3$i$\u65f6\uff0c\u6211\u4eec\u5c06$C_i$\u7684\u7edf\u8ba1\u6570\u7ec4\u52a0\u4e00\uff0c\u7136\u540e\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u533a\u95f4\u6700\u5de6\u4fa7\u5976\u725b\uff0c\u82e5\u8be5\u5976\u725b\u7b26\u5408\u9000\u51fa\u961f\u5217\u7684\u6761\u4ef6\u5219\u5c06\u5176\u9000\u51fa\u961f\u5217\uff0c\u66f4\u65b0\u533a\u95f4\u5de6\u8fb9\u754c\uff0c\u76f4\u5230\u4e0d\u80fd\u51fa\u961f\u4e3a\u6b62\uff0c\u8ba1\u7b97\u5de6\u53f3\u8ddd\u79bb...\u7136\u540e\u628a$C_i$\u53f7\u5976\u725b\u5165\u961f\uff0c\u4f18\u5148\u961f\u5217\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f\u5728\u961f\u5217\u5185\u7684\u987a\u5e8f...\n\n\u90a3\u4e48\u5f88\u663e\u7136\u6211\u4eec\u53ea\u8981\u4ece\u5934\u5f00\u59cb\u679a\u4e3e\uff0c\u6bcf\u679a\u4e3e\u4e00\u4e2a\u4f4d\u7f6e\u7ef4\u62a4\u4e00\u4e0b\u961f\u5217\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\u5c31\u5b8c\u4e8b\u513f\u4e86\u3002\u7279\u522b\u7684\uff0c\u82e5\u5f53\u524d\u533a\u95f4\u8fd8\u672a\u96c6\u9f50\u6240\u6709\u5976\u725b\u5219\u4e0d\u66f4\u65b0\u7b54\u6848(\u6307\u5f00\u5934\u7684\u4e00\u90e8\u5206)\n\n\u5f53\u7136\u672c\u9898\u975e\u5e38easy\uff0c\u5efa\u8bae\u5404\u79cd\u65b9\u6cd5\u82b1\u5f0f\u8650\u4e00\u904d\uff0c\u81f3\u4e8e\u79bb\u6563...\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b.....\n\n```\n//2019/7/26->Riko->AtNCU->luoguP3029\n#include<bits/stdc++.h>\n\nnamespace Rikopack {\n\tbool digit (int ch) { return (ch <= '9' and ch >= '0');}\n\tinline int in () {\n\t\tint x = 0, ch = getchar(), base = 1;\n\t\twhile (!digit(ch)) {\n\t\t\tif (ch == '-') base = -1;\n\t\t\tch = getchar();\n\t\t}\n\t\twhile (digit(ch)) x = x*10+ch-'0', ch = getchar();\n\t\treturn x*base;\n\t}\n\ttemplate <class T> inline void smin (T& x, T y) { if (x > y) x = y;}\n\tconst int MAXINT = 2123456789, MININT = -2123456789;\n}\nusing namespace std;\nusing namespace Rikopack;\n\nconst int N = 50500;\nstruct node {\n\tint type, location;\n\tfriend bool operator < (node x, node y) {\n\t\treturn x.location > y.location;\n\t}\n} Cows[N];\nint n, ans = MAXINT, kinds;\nint tmp[N], screened[N], numinheap[N], tag[N];\npriority_queue <node> q;\n\nvoid work () {\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tnode x = Cows[i];\n\t\tif (!screened[x.type]) ++cnt, screened[x.type] = true;\n\t\tnuminheap[x.type]++;\n\t\tq.push(x);\n\t\tif (cnt >= kinds) {\n\t\t\twhile (numinheap[q.top().type] > 1) {\n\t\t\t\tnuminheap[q.top().type]--; q.pop();\n\t\t\t}\n\t\t\tsmin(ans, x.location-q.top().location);\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\n}\nvoid prepare () {\n\tn = in();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tCows[i].location = in();\n\t\ttmp[i] = Cows[i].type = in();\n\t}\n\tsort(Cows+1, Cows+n+1);\n\treverse(Cows+1, Cows+n+1);\n\tsort(tmp+1, tmp+n+1);\n\tint len = unique(tmp+1, tmp+n+1)-tmp-1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint& P = Cows[i].type;\n\t\tP = lower_bound(tmp+1, tmp+len+1, P)-tmp;\n\t\tif (!tag[P]) tag[P] = true, ++kinds;\n\t}\n\twork();\n} \nint main () { prepare();}\n```\n",
        "postTime": 1564530414,
        "uid": 114643,
        "name": "RikoHere",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P3029 [USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup"
    },
    {
        "content": "## \u4e8c\u5206+\u4e3b\u5e2d\u6811(\u6bd2\u7624\u505a\u6cd5\uff09\n\n~~\u8c8c\u4f3c\u8fd8\u6ca1\u6709\u8fd9\u6837\u505a\u7684\u9898\u89e3(\u9003~~\n\n\u7531\u4e8e\u79cd\u7c7b\u6570\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u8981\u5148\u8fdb\u884c**\u79bb\u6563\u5316**\u3002\n\n\u56e0\u4e3a\u53f3\u7aef\u70b9\u5177\u6709**\u5355\u8c03\u6027**\uff08\u8f83\u5c0f\u7684\u53f3\u7aef\u70b9\u80fd\u6ee1\u8db3\u6761\u4ef6,\u90a3\u4e48\u8f83\u5927\u7684\u53f3\u7aef\u70b9\u4e5f\u4e00\u5b9a\u80fd\u6ee1\u8db3\u6761\u4ef6\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5**\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u4e8c\u5206\u53f3\u7aef\u70b9**\u3002\n\n\u4f46\u662f\u5728check\u65f6\u4f1a\u6709\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5982\u4f55\u8fc5\u901f\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\u5185\u4e0d\u540c\u79cd\u7c7b\u7684\u6570\u7684\u4e2a\u6570\u5462\uff1f\n#### \u4e8e\u662f\u5c31\u53ef\u4ee5\u60f3\u5230\u5904\u7406\u533a\u95f4\u79cd\u7c7b\u4e2a\u6570\u7684\u795e\u5668\u2014\u2014\u2014\u2014 **\u4e3b\u5e2d\u6811**\n\n\u4e0d\u4f1a\u7684\u53ef\u4ee5\u5148\u53bb\u770b\u4e0b[[SDOI2009]HH\u7684\u9879\u94fe](https://www.luogu.org/problemnew/show/P1972), \u6c42\u533a\u95f4\u4e0d\u540c\u79cd\u7c7b\u6570\u7684\u6a21\u677f\u9898\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\n\n**\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801**\n```cpp\n/*\nProblem : luogu P3029\nAlgorithm : \u4e3b\u5e2d\u6811+\u4e8c\u5206\nStatus : AC\n*/\n#include <bits/stdc++.h>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\ntypedef long long ll;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 50005;\n\nint n,m,tot,cnt,ans = INF;\nint last[MAXN * 2],root[MAXN],pos[MAXN],type[MAXN];\nmap<int,bool> used;\n\nstruct Tree{\n\tint l,r;\n\tint val;\n} tree[MAXN * 40];\n\nstruct Node{\n\tint pos,type;\n\tfriend bool operator < (const Node &x,const Node &y){\n\t\treturn x.pos < y.pos;\n\t}\n} a[MAXN];\n\n\nint build(int l,int r){\n\tint now = ++tot;\n\tif(l == r)\n\t    return now;\n\tint mid = (l + r) / 2;\n\ttree[now].l = build(l,mid);\n\ttree[now].r = build(mid + 1,r);\n\treturn now;\n}\n\nint insert(int pre,int l,int r,int x,int v){ //\u4e3b\u5e2d\u6811\u7684\u63d2\u5165\n\tint now = ++tot;\n\ttree[now].l = tree[pre].l;\n\ttree[now].r = tree[pre].r;\n\tif(l == r){\n\t\ttree[now].val = tree[pre].val + v;\n\t\treturn now;\n\t}\n\tint mid = (l + r) / 2;\n\tif(x <= mid)\n\t    tree[now].l = insert(tree[pre].l,l,mid,x,v);\n\telse\n\t    tree[now].r = insert(tree[pre].r,mid + 1,r,x,v);\n\ttree[now].val = tree[tree[now].l].val + tree[tree[now].r].val;\n\treturn now;\n}\n\nint query(int pre,int l,int r,int x){ //\u4e3b\u5e2d\u6811\u7684\u67e5\u8be2\n\tif(l == r)\n\t    return tree[pre].val;\n\tint mid = (l + r) / 2;\n\tif(x <= mid)\n\t    return query(tree[pre].l,l,mid,x) + tree[tree[pre].r].val;\n\telse\n\t    return query(tree[pre].r,mid + 1,r,x);\n}\n\nbool check(int l,int r){\n\treturn query(root[r],1,n,l) == cnt; //\u5224\u65adl,r\u8fd9\u4e2a\u533a\u95f4\u662f\u5426\u5305\u542b\u6240\u6709\u79cd\u7c7b\u7684\u725b\n}\n\nint main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i <= n;i++){\n\t   scanf(\"%d%d\",&a[i].pos,&a[i].type);\n\t   if(!used[a[i].type]){\n\t        used[a[i].type] = 1;\n\t    \ttype[++cnt] = a[i].type; //cnt : \u79cd\u7c7b\u603b\u6570\n\t   }\n\t}\n\tsort(type + 1,type + 1 + cnt); //\u5bf9\u725b\u7684\u79cd\u7c7b\u8fdb\u884c\u79bb\u6563\u5316\n\tfor(int i = 1;i <= n;i++)\n\t    a[i].type = lower_bound(type + 1,type + 1 + cnt,a[i].type) - type;\n\tsort(a + 1,a + 1 + n); //\u6309\u5750\u6807\u6392\u5e8f\n\t/*\n\tfor(int i = 1;i <= n;i++)\n\t    cout << i << \" : \" << a[i].pos << \" \" << a[i].type << endl;\n\t*/\n\tmemset(last,-1,sizeof(last));\n\troot[0] = build(1,n);\n\tfor(int i = 1;i <= n;i++){\n\t\tint x = a[i].type;\n\t\tif(last[x] == -1)\n\t\t        root[i] = insert(root[i - 1],1,n,i,1);\n\t\telse{\n\t\t\tint t = insert(root[i - 1],1,n,last[x],-1);\n\t\t\troot[i] = insert(t,1,n,i,1);\n\t\t}\n\t\tlast[x] = i;\n\t} //\u6784\u9020\u4e3b\u5e2d\u6811\n\tfor(int i = 1;i <= n;i++){\n\t\tint l = i,r = n,tmp = 0;\n\t\twhile(l <= r){ //\u4e8c\u5206\n\t\t\tint mid = (l + r) / 2;\n\t\t\tif(check(i,mid)){\n\t\t\t\ttmp = mid;\n\t\t\t\tr = mid - 1;\n\t\t\t}else\n\t\t\t        l = mid + 1;\n\t\t}\n\t\tif(tmp != 0){\n\t            //cout << tmp << \" \" << i << endl;\n\t\t    ans = min(ans,a[tmp].pos - a[i].pos); //\u7edf\u8ba1\u7b54\u6848\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1560591002,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c[P1638](https://www.luogu.org/problemnew/show/P1638)\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f \n## 1\u2264ID_i\u22641,000,000,000\n\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\uff1f\n\n\u6211\u4eec\u4e0d\u80fd\u7528\u666e\u901a\u65b9\u6cd5\u505a\uff0c\u5fc5\u987b\u79bb\u6563\u5316\u4e00\u4e0b\n\n\u4e0d\u8fc7\u6211\u7528\u4e86\u4e00\u79cd\u727a\u7272\u4e86\u6b63\u786e\u6027\u7684\u65b9\u6cd5\uff0c\u786e\u5b9eAC\u4e86\n\n\u5148\u5c06\u6bcf\u4e2aid %(mod)10e7+7\n\n\u518d\u6309\u7167\u666e\u901a\u65b9\u6cd5\u505a\n\n\u5c31AC\u4e86\n\n\u56e0\u4e3aN<=50000,\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u5f88\u5c0f\n\n\u4e0b\u9762\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint x[50005],d[50005],q[50005],a[10000050];\nint n;\nvoid qsort(int l,int r)\n{\n    int i=l;\n    int j=r;\n    long long x1=x[(i+j)/2];\n    do\n    {\n        while (x[i]<x1) i++;\n        while (x[j]>x1) j--;\n        if (i<=j) \n        {\n            long long t;\n            t=x[i];\n            x[i]=x[j];\n            x[j]=t;\n            t=d[i];\n            d[i]=d[j];\n            d[j]=t;\n            i++;\n            j--;\n        }   \n    }while (i<=j);  \n    if (l<j) qsort(l,j);\n    if (i<r) qsort(i,r);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++)\n        scanf(\"%d%d\",&x[i],&d[i]);\n    qsort(1,n);\n    int s=0;\n    for (int i=1;i<=n;i++)\n    {\n        q[i]=d[i]%(10000007);\n        a[q[i]]++;\n        if (a[q[i]]==1) s++;\n    }\n    int s1=0;\n    for (int i=0;i<=(10000007);i++) a[i]=0;\n    int j=0,ans=2000000000;\n    for (int i=1;i<=n;i++)\n    {\n        a[q[i]]++;\n        if (s1<s) if (a[q[i]]==1) s1++;\n        if (s1==s)\n        {\n        \twhile (a[q[j+1]]-1>0)\n        \t{\n        \t\tj++;\n        \t\ta[q[j]]--;\n            }\n            ans=min(ans,x[i]-x[j+1]);\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;  \n}\n```\n\n\n\u65f6\u95f4660ms,\u7a7a\u95f440234KB,\u4ee3\u7801\u957f\u5ea61.12kb\n\n\u8c22\u8c22\u89c2\u8d4f",
        "postTime": 1550324105,
        "uid": 36957,
        "name": "RainFestival",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2](https://blog.csdn.net/zsyzClb/article/details/84672077)\n\n\u521a\u521a\u770b\u5230\u8fd9\u4e00\u9898\uff0c\u89c9\u5f97\u4e0d\u662f\u5f88\u96be\uff0c\u4f46\u662f\u4e00\u505a\u8d77\u6765\uff0c\u5c31\u611f\u89c9\u675f\u624b\u65e0\u7b56\uff0c\u770b\u4e86\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u6211\u611f\u89c9\u505a\u6cd5\u5e94\u8be5\u662fO\uff08n)\u6216\u8005\u662fO(n^logn)\n\n\u56e0\u4e3a\u8fd9\u4e00\u9053\u9898\u5fc5\u987b\u8981\u6392\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u6392\u9664O(n\uff09\u7684\u505a\u6cd5\n\n\u56e0\u4e3a\u54c1\u79cd\u6570\u91cf\u5f88\u5927\uff0c\u6240\u4ee5\u8981\u7ed9di\u79bb\u6563\u4e00\u4e0b\uff0c\u53ef\u4ee5\u7701\u6389map\n\n\u6211\u60f3\u4e86\u60f3\uff0c\u51b3\u5b9a\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5de6\u53f3\u4e24\u7aef\uff0c\u5de6\u6307\u9488for\u5faa\u73af\uff0c\u53f3\u6307\u9488\u6307\u5411\u521a\u521a\u597d\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u90a3\u4e2a\u70b9\uff0c\u5e76\u4e14\u591a\u6b21\u8bb0\u5f55\u6700\u5927\u503c\n\n\u67e5\u627e\u65f6\u95f4\u4e3aO\uff08n\uff09\uff0c\u52a0\u4e0a\u5feb\u6392O\uff08nlogn)\n\n\u4e5f\u53ef\u80fd\u662f\u6211\u770b\u5230xi<=10^9\u7684\u539f\u56e0\u5427\uff0c\u6211\u7adf\u7136\u7528\u4e86\u4e00\u4e2a\u4e8c\u5206\uff0c\u67e5\u627e\u65f6\u95f4\u662fO\uff0830n\uff09\uff0c\u56e0\u4e3a30\u662f\u5e38\u6570\u6240\u4ee5\u65f6\u95f4\u8fd8\u662fO(N),\n\n\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    int x=0,f=0;char s=getchar();\n    while(!isdigit(s))f|=s=='-',s=getchar();\n    while( isdigit(s))x=(x<<1)+(x<<3)+s-48,s=getchar();\n    return !f?x:-x;\n}\nconst int N=5e4+20;\nstruct node{\n    int x,d;\n    inline bool operator<(const node &k)const{\n        return x<k.x;\n    }\n}a[N];int n;\nstruct LSnode{\n    int x,z,p;\n    inline bool operator<(const LSnode &k)const{\n        return x<k.x;\n    }\n}b[N];\nint bk[N];\ninline bool check(int x){\n    memset(bk,0,sizeof(bk));\n    int p2=1,ans=1;bk[a[1].d]=1;\n    for(int p1=1;p1<=n;p1++){\n        if(p2==n)break;\t\n        while(a[p2+1].x-a[p1].x<=x&&p2<n){\n            p2++;bk[a[p2].d]++;\n            if(bk[a[p2].d]==1)ans++;\n        }\n        if(ans==b[n].z)return 1;\n        bk[a[p1].d]--;\n        if(!bk[a[p1].d])ans--;\n    }\n    return 0;\n}\nint main(){\n    n=read();\n    for(int i=1;i<=n;i++){\n        a[i].x=read();a[i].d=read();\n        b[i].x=a[i].d;b[i].p=i;\n    }\n    sort(b+1,b+n+1);//\u79bb\u6563\u5316 \n    b[1].z=1;\n    for(int i=2;i<=n;i++)b[i].z=b[i-1].z+(b[i].x==b[i-1].x?0:1);\n    for(int i=1;i<=n;i++)a[b[i].p].d=b[i].z;\n    sort(a+1,a+n+1);\n    int l=0,r=1e9,mid,ans=-1;//\u4e8c\u5206 \n    while(l<=r){\n        mid=(l+r)>>1;\n        if(check(mid))ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```\n\u6253\u5b8c\u4e8c\u5206\u4ee5\u540e\u7a81\u7136\u53d1\u73b0\u91cc\u9762\u7684check\u4f3c\u4e4e\u53ef\u4ee5\u76f4\u63a5\u7528\u6765\u6c42\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6211\u53c8\u6253\u4e86\u4e00\u4e2a\u4e0d\u7528\u4e8c\u5206\u7684\u7a0b\u5e8f\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=0;char s=getchar();\n\twhile(!isdigit(s))f|=s=='-',s=getchar();\n\twhile( isdigit(s))x=(x<<1)+(x<<3)+s-48,s=getchar();\n\treturn !f?x:-x;\n}\nconst int N=5e4+20;\nstruct node{\n\tint x,d;\n\tinline bool operator<(const node &k)const{\n\t\treturn x<k.x;\n\t}\n}a[N];int n;\nstruct LSnode{\n\tint x,z,p;\n\tinline bool operator<(const LSnode &k)const{\n\t\treturn x<k.x;\n\t}\n}b[N];\nint bk[N];\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\ta[i].x=read();a[i].d=read();\n\t\tb[i].x=a[i].d;b[i].p=i;\n\t}\n\tsort(b+1,b+n+1);\n\tb[1].z=1;\n\tfor(int i=2;i<=n;i++)b[i].z=b[i-1].z+(b[i].x==b[i-1].x?0:1);\n\tfor(int i=1;i<=n;i++)a[b[i].p].d=b[i].z;\n\tsort(a+1,a+n+1);\n\tint p2=1,ans=1;bk[a[1].d]=1;\n\tint minn=1e9+10;\n\tfor(int p1=1;p1<=n;p1++){\n\t\twhile(p2<n&&ans<b[n].z){\n\t\t\tp2++;bk[a[p2].d]++;\n\t\t\tif(bk[a[p2].d]==1)ans++;\n\t\t}\n\t\tif(ans<b[n].z)break;\n\t\tminn=min(minn,a[p2].x-a[p1].x);\n\t\tbk[a[p1].d]--;\n\t\tif(!bk[a[p1].d])ans--;\n\t}\n\tprintf(\"%d\\n\",minn);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1543636248,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "**\u5bf9\u4e8e\u725b\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u53d1\u73b0\u725b\u7684\u7f16\u53f7\u6700\u5927\u4f1a\u52301\u4ebf\uff0c\u4f46\u5bf9\u4e8e\u90a3\u4e48\u5927\u7684\u6570\u503c\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u5229\u7528\u6876\u6765\u5224\u65ad\u6240\u6709\u7f16\u53f7\u7684\u725b\u662f\u5426\u90fd\u88ab\u62cd\u5728\u8fd9\u5f20\u7167\u7247\u91cc\u4e86\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u901a\u8fc7hash\u6765\u7f29\u5c0f\u725b\u7684\u7f16\u53f7\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u5bf9\u4e8e\u6570\u503chash\u7684\u503c\u4e3a6000\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u503c\u3002**\n\n**\u5f53\u7136\uff0c\u4f60\u4e5f\u53d1\u73b0\uff0c\u725b\u7684\u4f4d\u7f6e\u662f\u65e0\u5e8f\u7684\uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u5f53\u7136\u662f\u4e00\u4e2a\u5feb\u6392\uff01**\n\n**\u7136\u540e\uff0c\u6211\u4eec\u7528\u4e00\u91cd\u5faa\u73af\u6765\u679a\u4e3e\u8fd9\u5f20\u7167\u7247\u7684\u5de6\u7aef\u70b9\u7684\u725b\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u8fd9\u5f20\u7167\u7247\u7684\u53f3\u7aef\u70b9\u3002\u8fd9\u4e2a\u53f3\u7aef\u70b9\u80af\u5b9a\u4e0d\u80fd\u4e00\u6b21\u6b21\u4ece\u7b2c\u4e00\u5934\u725b\u5f00\u59cb\u5f80\u540e\u626b\uff0c\u6211\u4eec\u8981\u6cbf\u7740\u4e0a\u4e00\u6b21\u5230\u8fbe\u7684\u725b\u7ee7\u7eed\u5f80\u540e\u626b\uff0c\u77e5\u9053\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6\u4e3a\u6b62\u3002**\n\n```cpp\nvar n,s,i,x,y,ans:longint;\n     a,b:array[1..50005]of longint;\n    f:array[0..70000,0..1]of longint;//\u4e3ahash\u670d\u52a1\n    t:array[0..70000]of longint;//\u8fd9\u662f\u4e00\u4e2a\u6876\uff0c\u7528\u6765\u7edf\u8ba1\u5f53\u524d\u7684\u725b\u7684\u5934\u6570\uff0c\u8fd9\u5bf9\u4e8e\u540e\u9762\u7684\u8ba1\u7b97\u6709\u591a\u5c11\u5934\u725b\u5728\u8fd9\u5f20\u7167\u7247\u91cc\u9762\u662f\u5341\u5206\u91cd\u8981\u7684\u3002\nprocedure qsort(l,r:longint);//\u5feb\u6392\nvar i,j,mid,t,t1:longint;\nbegin\n  i:=l;j:=r;mid:=(i+j)div 2;\n  t:=a[mid];t1:=b[mid];\n  a[mid]:=a[l];b[mid]:=b[l];\n  while i<j do\n    begin\n      while (i<j)and(a[j]>t) do dec(j);\n      if i<j then\n        begin\n          a[i]:=a[j];b[i]:=b[j];inc(i);\n        end;\n      while (i<j)and(a[i]<t) do inc(i);\n      if i<j then\n        begin\n          a[j]:=a[i];b[j]:=b[i];dec(j);\n        end;\n    end;\n  a[i]:=t;b[i]:=t1;\n  if i+1<r then qsort(i+1,r);\n  if i-1>l then qsort(l,i-1);\nend;\nfunction hash(x:longint):longint;//hash\u5904\u7406\nvar j:longint;\nbegin\n  j:=x mod 60000;\n  while f[j,0]<>x and f[j,0] do\n    begin\n      j:=j+1;\n      j:=j mod 60000;\n    end;\n  if f[j,0]=0 then\n    begin\n      s:=s+1;f[j,1]:=s;f[j,0]:=x;\n    end; \n  exit(f[j,1]);\nend;\nbegin\n  readln(n);\n  for i:=1 to n do \n    begin\n      readln(a[i],b[i]);\n      b[i]:=hash(b[i]);//\u725b\u7684\u7f16\u53f7\u8fdb\u884chash\u5904\u7406\n    end;\n  qsort(1,n);//\u5bf9\u4e8e\u725b\u7684\u4f4d\u7f6e\u8fdb\u884c\u6392\u5e8f\n  x:=1;y:=1;inc(t[b[1]]);ans:=-1;//\u9884\u5904\u7406\n  for i:=1 to n do\n    begin\n      while (x<s)and(y<n) do//\u6240\u6709\u79cd\u6570\u7684\u725b\u8fd8\u6ca1\u6709\u90fd\u5728\u8fd9\u5f20\u7167\u7247\u5e76\u4e14\u6211\u4eec\u8fd8\u6ca1\u6709\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u5976\u725b\u3002\n        begin\n          inc(y);inc(t[b[y]]);//\u52a0\u4e0a\u8fd9\u5934\u725b\u7684\u79cd\u7c7b\n          if t[b[y]]=1 then inc(x);//\u5982\u679c\u8fd9\u5934\u725b\u5728\u8fd9\u5f20\u7167\u7247\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u8bf4\u660e\u8fd9\u5f20\u7167\u7247\u4e2d\u6709\u51fa\u73b0\u4e00\u79cd\u65b0\u7684\u5976\u725b\u3002\n        end;\n      if ((ans=-1)or(ans>a[y]-a[i]))and(x=s) then//\u5982\u679cans\u662f-1\uff0c\u6216\u8005\u5f53\u524d\u7684\u7167\u7247\u7684\u957f\u5ea6\u6bd4\u6211\u4eec\u4ee5\u524d\u6c42\u51fa\u7684\u6700\u4f18\u503c\u5c0f\uff0c\u5e76\u4e14\u6240\u6709\u79cd\u7c7b\u7684\u725b\u90fd\u51fa\u73b0\u5728\u8fd9\u5f20\u7167\u7247\u4e2d\uff0c\u5c31\u7acb\u5373\u66f4\u65b0\u3002\n        ans:=a[y]-a[i];\n      dec(t[b[i]]);//\u628a\u5f53\u524d\u6700\u5de6\u7aef\u7684\u725b\u4ece\u8fd9\u5f20\u7167\u7247\u4e2d\u53bb\u9664\u3002\n      if t[b[i]]=0 then dec(x);//\u5982\u679c\u6700\u5de6\u7aef\u7684\u8fd9\u79cd\u725b\u5728\u7167\u7247\u4e2d\u6ca1\u4e86\uff0c\u4e0d\u540c\u7684\u725b\u6570\u5c31-1\u3002\n    end;\n  writeln(ans);\nend.\n```",
        "postTime": 1507294811,
        "uid": 48264,
        "name": "zhouhongkai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    },
    {
        "content": "Solution Notes:\n\nThis is a somewhat interesting problem since there are several nice algorithmic ways to approach its solution. The problem can be solved in O(N log N) time due to the need to sort the cows by x coordinate as a preprocessing step.\n\nOne nice method (perhaps not the simplest, but worth mentioning) is the following:\n\nwe sort scan through the cows from left to right (i.e., by x coordinate) keeping track of the most recent occurrence of each ID in a data structure. For example, if we are visiting a cow at (x,ID) = (10,17), our data structure might tell us that the most recent previous occurrence of a cow with breed ID 17 was at x=3, at which point we would then update the record in the data structure to x=10 and continue scanning (for IDs that have not yet occurred, we keep track of the value -infinity).\n\nNow as we scan over a particular coordinate x, let us suppose x is the right endpoint of a photograph window; we can compute the best possible matching left endpoint by simply taking the minimum of all the \"most recent occurrence\" x values in our data structure, so if we use an appropriate data structure like a heap, we can determine this minimum very quickly, making the entire scan take only O(N log N) time. During the scan, we simply remember the largest window we have seen.\n\n\nA slightly simpler approach involves scanning both the left and right endpoint of the photograph window in a monotonic fashion in lock step. We start with left = right = the leftmost cow. We then advance the right pointer whenever we notice that not every type of breed ID is present in the window; otherwise we advance the left pointer (noting the size of the window in this case, so we can return the largest over the entire scan). We can tell whether every breed ID exists within our window by storing a count of each breed ID within the window in a data structure like a map or multiset (or even a simple array would work, if we first sort the IDs and then map them down to integers in the range 0...N-1 as a preprocessing step). The breed ID counts are incremented whenever we advance the right pointer and decremented whenever we advance the left pointer.\n\n\u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <map>\n#include <set>\nusing namespace std;\ntypedef struct {\n  int loc, id;\n} Cow;\nint sort_cows(const void* v1, const void *v2) {\n  Cow *c1 = (Cow*)v1, *c2 = (Cow*)v2;\n  return c1->loc>c2->loc;\n}\n//\u5199\u4e00\u4e2acmp()\u51fd\u6570\uff0c\u6309\u4f4d\u7f6e\u6392\u5e8f\n```\n/\\*\n```cpp\nint cmp(Cow a, Cow b)\n{\n    return a.loc < b.loc;\n}\n```\n\\*/\n   \n   \n   \n\n\n\n      \n\n\n  \n```cpp\nint main() {\n   freopen(\"lineup.in\", \"r\", stdin); \nfreopen(\"lineup.out\", \"w\", stdout);\n   int num_IDS, N, i, num_in_map = 0, A[50000], IDS[50000];\nint start, end, min;\n   Cow cows[50000];\n   map<int, int> breeds;\n   set<int> ID_set;\n   scanf(\"%d\", &N);\nfor(i=0; i<N; i++) {\n      scanf(\"%d %d\", &cows[i].loc, &cows[i].id);\n      ID_set.insert(cows[i].id);\n      breeds[cows[i].id] = 0;\n   }\n   sort(cows, N, sizeof(Cow), sort_cows);\n   // sort(cows, cows+n, cmp);  \u6309\u4f4d\u7f6e\u6392\u5e8f\n   num_IDS = ID_set.size();\n   start = 0;\n   end = 0;\n   min = 1<<30;    // minv, \u5de6\u79fb\u8fd0\u7b97\n   while(1) {\n      while(num_in_map!=num_IDS && end<N) {\n         if(breeds[cows[end].id]==0)   num_in_map++;\n         breeds[cows[end].id]++;\nend++;\n      }\n      if(end==N && num_in_map!=num_IDS)  break;\n      while(breeds[cows[start].id]>1)\n      {\n         breeds[cows[start].id]--;\nstart++;\n      }\n     if(cows[end-1].loc-cows[start].loc<min) \nmin = cows[end-1].loc-cows[start].loc;\n     breeds[cows[start].id]--;   //\u4ec0\u4e48\u610f\u601d\uff1f\n     start++;\n     num_in_map--;\n  }\n  printf(\"%d\\n\", min);\n  return 0;\n}\n\n```",
        "postTime": 1480229636,
        "uid": 23845,
        "name": "Red_w1nE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3029 \u3010[USACO11NOV]\u725b\u7684\u9635\u5bb9Cow Lineup\u3011"
    }
]