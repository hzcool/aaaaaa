[
    {
        "content": "### \u4ecb\u7ecd\u4e00\u79cd *dfs* + \u5e76\u67e5\u96c6\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u662f\u76ee\u524d\u7684\u6700\u4f18\u89e3\u3002\u590d\u6742\u5ea6\u4e3a\u6392\u5e8f\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u5176\u4f59\u90e8\u5206 $O(n)$\u3002\n\n- \u5927\u81f4\u505a\u6cd5\n\n\u6211\u4eec\u627e\u5230\u8ddd\u79bb\u6bcf\u4e2a\u51fa\u53e3\u6700\u8fd1\u7684\u4eba\u3002\u8fd9\u4e2a\u4eba\u79bb\u8be5\u51fa\u53e3\u6700\u8fd1\u4e0d\u7b49\u4e8e\u4ece\u8be5\u51fa\u53e3\u51fa\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4eba\u53ef\u80fd\u5728\u9014\u4e2d\u53e6\u5916\u4e00\u4e2a\u51fa\u53e3\u51fa\u4e86\u3002\u4e8e\u662f\u6211\u4eec\u641c\u7d22\u4ed6\u4fe9\u4e4b\u95f4\u7684\u6240\u6709\u51fa\u53e3\uff0c\u770b\u770b\u6709\u6ca1\u6709\u51fa\u53e3\u628a\u90a3\u4e2a\u4eba\u62e6\u4e0b\u3002\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e2a\u4eba\u5c31\u53ef\u4ee5\u653e\u5fc3\u5730\u4ece\u8be5\u51fa\u53e3\u51fa\u4e86\u3002\n\n- \u5177\u4f53\u5b9e\u73b0\n\n\u7ef4\u62a4\u4e24\u6761\u94fe\u8868\uff0c\u5206\u522b\u662f\u6309\u4f4d\u7f6e\u9012\u51cf\u6392\u5e8f\u8fc7\u540e\u7684**\u9006\u65f6\u9488\u8d70\u7684\u4eba+\u51fa\u53e3**\u548c\u6309\u4f4d\u7f6e\u9012\u589e\u6392\u5e8f\u540e\u7684**\u987a\u65f6\u9488\u8d70\u7684\u4eba+\u51fa\u53e3**\uff0c\u79f0\u4e3a $L$ \u94fe\u548c $R$ \u94fe\u3002\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8ba9 $type$ \u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c$id$ \u4f5c\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u3002\u6211\u4eec\u9700\u8981\u8ba9\u94fe\u8868\u91cc\u540c\u4f4d\u7f6e\u7684\u51fa\u53e3\u59cb\u7ec8\u5728\u4eba\u7684\u5de6\u4fa7\u4e14\u540c\u4f4d\u7f6e\u7684 $id$ \u5c0f\u7684\u4eba\u5728 $id$ \u5927\u7684\u4eba\u7684\u5de6\u4fa7\uff08\u4ee3\u7801\u91c7\u7528\u7684\u662f\u4e00\u4e2a\u5012\u7740\u626b\u4e00\u4e2a\u6b63\u7740\u626b\u7684\u65b9\u6cd5\u5efa\u94fe\u8868\uff09\u3002\n\n\u518d\u7ef4\u62a4\u4e24\u4e2a\u5e76\u67e5\u96c6 $L$ \u96c6\u548c $R$ \u96c6\uff0c\u628a $L$ \u96c6\u5b9a\u4e49\u4e3a\u4e00\u4e9b\u51fa\u53e3\u4e14\u4efb\u610f\u4e24\u4e2a\u51fa\u53e3\u4e4b\u95f4\u6ca1\u6709\u9006\u65f6\u9488\u8d70\u7684\u4eba\uff0c$R$ \u96c6\u5b9a\u4e49\u4e3a\u4e00\u4e9b\u51fa\u53e3\u4e14\u4efb\u610f\u4e24\u4e2a\u51fa\u53e3\u4e4b\u95f4\u6ca1\u6709\u987a\u65f6\u9488\u8d70\u7684\u4eba\u3002\u518d\u7ef4\u62a4\u6bcf\u4e2a $L$ \u96c6\u5408**\u6700\u9760\u987a\u65f6\u9488**\u7684\u51fa\u53e3 $vL$ \u548c\u6bcf\u4e2a $R$ \u96c6\u5408**\u6700\u9760\u9006\u65f6\u9488**\u7684\u51fa\u53e3 $vR$\u3002\n\n\u4efb\u610f\u4e00\u4e2a\u70b9\u7684**\u987a\u65f6\u9488**\u4fa7\u6700\u8fd1\u7684**\u9006\u65f6\u9488\u8d70\u7684\u4eba**\u5c31\u662f\u8fd9\u4e2a\u70b9\u6240\u5728 $L$ \u96c6\u5408\u7684 $vL$ \u5728 $L$ \u94fe\u8868\u4e2d\u53f3\u4fa7\u7684\u4f4d\u7f6e\uff0c**\u9006\u65f6\u9488**\u4fa7\u6700\u8fd1\u7684**\u987a\u65f6\u9488\u8d70\u7684\u4eba**\u5c31\u662f\u8fd9\u4e2a\u70b9\u6240\u5728 $R$ \u96c6\u5408\u7684 $vR$ \u5728 $R$ \u94fe\u8868\u4e2d\u53f3\u4fa7\u4f4d\u7f6e\uff08\u5e76\u67e5\u96c6\u5c31\u662f\u4e3a\u4e86\u5e72\u8fd9\u4e8b\u7528\u7684\uff09\u3002\u6211\u4eec\u53d6\u8fd9\u4e24\u4e2a\u4eba\u4e2d\u8ddd\u79bb\u8be5\u51fa\u53e3\u6700\u8fd1\u7684\u4eba\u4f5c\u4e3a\u641c\u7d22\u76ee\u6807\u3002\n\n\u7136\u540e\u7531\u8ddd\u79bb\u8be5\u51fa\u53e3**\u4ece\u8fdc\u5230\u8fd1**\uff08\u4e5f\u5c31\u662f\u4ece\u8be5\u51fa\u53e3\u5bf9\u5e94\u7684 $vL$ \u6216 $vR$ \u5f00\u59cb\u641c\uff09\u7684\u987a\u5e8f\u641c\u7d22\u8be5\u51fa\u53e3\u4e0e\u641c\u7d22\u76ee\u6807\u4e4b\u95f4\u7684\u51fa\u53e3\uff0c\u8fd9\u6837\u786e\u5b9a\u4e00\u4e2a\u4eba\u5bf9\u5e94\u7684\u51fa\u53e3\u53ea\u9700\u8981 $O(2)$\uff0c\u56e0\u4e3a\u6700\u591a\u5ef6\u4f38\u4e24\u6b21\u5c31\u4f1a\u51fa\u73b0\u8be5\u51fa\u53e3\u4e0e\u6700\u8fd1\u7684\u4eba\u4e4b\u95f4\u6ca1\u6709\u522b\u7684\u51fa\u53e3\u7684\u60c5\u51b5\u3002\n\n\u4e0d\u80fd\u4ece\u8fd1\u5230\u8fdc\u641c\uff0c\u56e0\u4e3a\u8fd9\u6837\u786e\u5b9a\u4e00\u4e2a\u4eba\u53ef\u80fd\u9700\u8981\u628a\u6240\u6709\u51fa\u53e3\u90fd\u641c\u4e00\u904d\uff0c\u6700\u574f\u9700\u8981 $O(n)$\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u51fa\u53e3\u5df2\u7ecf\u6ee1\u4e86\u5c31\u6807\u8bb0\u4e00\u4e0b\uff0c\u6bcf\u6b21\u4f1a\u53d6\u4e00\u4e2a\u6ca1\u6709\u6ee1\u7684\u51fa\u53e3\u8fdb\u51fd\u6570\uff0c\u53ef\u4ee5\u8bc1\u660e\u641c\u5b8c\u4ee5\u540e\u8981\u4e48\u8fd9\u4e2a\u51fa\u53e3\u6ee1\u4e86\u8981\u4e48\u6ca1\u4eba\u4e86\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6709\u9057\u6f0f\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u5728\u8fbe\u6210\u76ee\u7684\u540e\u4f1a\u9000\u51fa\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9020\u6210\u4e00\u4e2a\u51fa\u53e3\u641c\u51fa\u53bb\u4ee5\u540e\u518d\u6b21\u641c\u5230\u8fd9\u4e2a\u51fa\u53e3\u7684\u60c5\u51b5\u3002\n\n- \u7ef4\u62a4\u65b9\u6cd5\n\n\u53ea\u8981\u4e00\u4e2a\u51fa\u53e3\u6ee1\u4e86\u6216\u4e00\u4e2a\u4eba\u786e\u5b9a\u4e86\u51fa\u53e3\u5c31\u628a\u4ed6\u4eec\u4ece $L$ \u94fe\u8868\u6216 $R$ \u94fe\u8868\u4e2d\u5220\u6389\uff0c\u8fd9\u5f88\u5bb9\u6613\u529e\u3002\n\n\u5e76\u67e5\u96c6\u7684\u7ef4\u62a4\u5c31\u7e41\u7410\u4e00\u70b9\u4e86\u3002\u82e5\u5220\u6389\u7684\u4eba\u5728 $L$ \u94fe\u8868\u6216 $R$ \u94fe\u8868\u4e2d\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\u548c\u540e\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u662f\u51fa\u53e3\uff0c\u90a3\u4e48\u5c06\u4e24\u4e2a\u51fa\u53e3\u6240\u5728\u7684 $L$ \u96c6\u5408\u6216 $R$ \u96c6\u5408\u5408\u5e76\uff0c\u5e76\u5c06\u65b0\u96c6\u5408\u7684 $vL$ \u6216 $vR$ \u4fdd\u7559\u4e3a**\u540e\u4e00\u4e2a\u4f4d\u7f6e**\u7684\u96c6\u5408\u7684 $vL$ \u6216 $vR$\uff0c\u4ee3\u7801\u5b9e\u73b0\u65b9\u9762\u53ef\u4ee5\u76f4\u63a5\u5c06\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u7239\u8fde\u5230\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u7239\u4e0a\u3002\n\n\u5982\u679c\u5220\u6389\u7684\u51fa\u53e3\u662f\u67d0\u4e2a\u96c6\u5408\u7684 $vL$ \u6216 $vR$\uff0c\u90a3\u4e48\u5c06\u8be5\u96c6\u5408\u7684 $vL$ \u6216 $vR$ \u8bbe\u4e3a\u539f\u672c\u7684 $vL$ \u6216 $vR$ \u5728 $L$ \u94fe\u8868\u6216 $R$ \u94fe\u8868\u91cc**\u5de6\u4fa7\u7684\u4f4d\u7f6e**\u3002\u53ef\u4ee5\u8bc1\u660e\u64cd\u4f5c\u540e\u7684\u4f4d\u7f6e\u5982\u679c\u96c6\u5408\u4e0d\u4e3a\u7a7a\u4e00\u5b9a\u662f\u51fa\u53e3\uff0c\u82e5\u4e0d\u662f\u51fa\u53e3\u5219\u8fd9\u4e2a\u96c6\u5408\u4e3a\u7a7a\uff0c\u62a5\u5e9f\u4e86\uff0c\u8fde\u7684\u4ec0\u4e48\u90fd\u65e0\u6240\u8c13\u3002\n\n- \u590d\u6742\u5ea6\n\n\u7b97\u6cd5 $O(n)$ + \u6392\u5e8f $O(n\\log n)$\n\n- \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define N 1000010\nusing namespace std;\n\ntypedef long long ll;\n\nstruct Node\n{\n    ll data;\n    int id;\n    bool tp;\n} bL[N], bR[N], b1[N], b2[N];\n\nstruct List\n{\n    ll to, la;\n} tL[N], tR[N];\n\nll ans, a[N], w[N];\nint n, m, l, fL[N], fR[N], s[N], vL[N], vR[N], cL, cR;\nbool used[N], type;\n\nint read ()\n{\n    int reat = 0, z = 1;\n    char ch = getchar (); \n    while (ch < '0' || ch > '9')\n    \tch = getchar ();\n    while (ch <= '9' && ch >= '0')\n        reat = reat * 10 + ch - '0', ch = getchar ();\n    return z * reat; \n}\n\nbool cmp1 (Node x, Node y)\n{\n    if (x.data != y.data) return x.data < y.data;\n    return x.id > y.id;\n}\n// \u6392\u5e8f\uff0c\u65b9\u4fbf\u5efa\u94fe\u8868 \nbool cmp2 (Node x, Node y)\n{\n    if (x.data != y.data) return x.data < y.data;\n    return x.id < y.id;\n}\n\nll c (ll x, ll y)   //\u8ba1\u7b97\u8ddd\u79bb \n{\n    if (x - y < 0)\n        return x + l - y;\n    return x - y;\n}\n\nll findL (int x) //\u5e38\u89c4Find \n{\n    if (cL <= m) return 0;\n    if (fL[x] == x) return x;\n    fL[x] = findL (fL[x]);\n    return fL[x];\n}\n\nll findR (int x) //\u5e38\u89c4Find \n{\n    if (cR <= m) return 0;\n    if (fR[x] == x) return x;\n    fR[x] = findR (fR[x]);\n    return fR[x];\n}\n\nbool dfs (int x, int k)\n{\n    while (s[x])\n    {\n        //\u9006\u65f6\u9488\u96c6\u5408\u6700\u9760\u5de6\u7684\u51fa\u53e3\u548c\u987a\u65f6\u9488\u96c6\u5408\u6700\u9760\u53f3\u7684\u51fa\u53e3 \n        int x0 = vL[findL(x)], x1 = vR[findR(x)]; \n        //\u987a\u65f6\u9488\u65b9\u5411\u7b2c\u4e00\u4e2a\u9006\u65f6\u9488\u4eba\u548c\u9006\u65f6\u9488\u65b9\u5411\u7b2c\u4e00\u4e2a\u987a\u65f6\u9488\u4eba \n        ll a0 = tL[x0].to, a1 = tR[x1].to;\n        if (cL == m && cR == m) return 0;   //\u5982\u679c\u4eba\u8d70\u5b8c\u4e86\u5c31\u7ed3\u675f  \n        if (cL > m && (c (a[x], w[a0-m]) < c (w[a1-m], a[x]) || c (a[x], w[a0-m]) == c (w[a1-m], a[x]) && a0 < a1 || cR == m))\n        {\n            while (x0 != x && !dfs (x0, a0))\n                x0 = tL[x0].la; //\u4ece\u8fdc\u5230\u8fd1\u7206\u641c\u6bcf\u4e2a\u8def\u5f84\u4e0a\u7684\u51fa\u53e3 \n            if (x0 == x)    //\u8fd9\u4e2a\u4eba\u88ab\u4fdd\u7559\u4e0b\u6765 \n            {\n                s[x]--;\n                cL--;   //\u9006\u65f6\u9488\u4eba\u6570\u51cf\u4e00 \n                ans ^= (a0 - m) * x;\n                tL[tL[a0].to].la = tL[a0].la;   //\u94fe\u8868\u91cc\u5220\u6389\u8fd9\u4e2a\u4eba \n                tL[tL[a0].la].to = tL[a0].to;\n                if (tL[a0].to <= m) //\u628a\u4eba\u4e24\u4fa7\u7684\u4e24\u4e2a\u51fa\u53e3\u96c6\u5408\u5408\u5e76 \n                    fL[findL(tL[a0].la)] = findL(tL[a0].to);    \n            }\n            if (a0 == k) return true;   //\u8fbe\u6210\u76ee\u7684return true \n        } else\n        {\n            while (x1 != x && !dfs (x1, a1))\n                x1 = tR[x1].la;\n            if (x1 == x)\n            {\n                s[x]--;\n                cR--;\n                ans ^= (a1 - m) * x;\n                tR[tR[a1].to].la = tR[a1].la;\n                tR[tR[a1].la].to = tR[a1].to;\n                if (tR[a1].to <= m)\n                    fR[findR(tR[a1].la)] = findR(tR[a1].to);\n            }\n            if (a1 == k) return true;\n        }\n    }\n    used[x] = 1;    //\u6807\u8bb0\u4e00\u4e0b \n    ll x0 = findL(x), x1 = findR(x);\n    tL[tL[x].la].to = tL[x].to; //\u94fe\u8868\u91cc\u5220\u6389\u51fa\u53e3 \n    tL[tL[x].to].la = tL[x].la;\n    tR[tR[x].la].to = tR[x].to;\n    tR[tR[x].to].la = tR[x].la;\n    if (x == vL[x0]) vL[x0] = tL[x].la; //\u8fd9\u4e2a\u51fa\u53e3\u4f5c\u4e3a\u67d0\u9006\u65f6\u9488\u96c6\u5408\u6700\u5de6\u4fa7\u70b9\u5219\u5411\u53f3\u79fb\u52a8\u4e00\u683c\n    if (x == vR[x1]) vR[x1] = tR[x].la; //\u8fd9\u4e2a\u51fa\u53e3\u4f5c\u4e3a\u67d0\u987a\u65f6\u9488\u96c6\u5408\u6700\u53f3\u4fa7\u70b9\u5219\u5411\u5de6\u79fb\u52a8\u4e00\u683c\n    return false;   //\u672a\u8fbe\u6210return false \n}\n\nint main ()\n{\n    cin >> n >> m >> l;\n    b1[1].id = b2[1].id = 1;\n    for (int i = 2; i <= m; i++)\n    {\n        a[i] = read ();\n    }\n    for (int i = 1; i <= m; i++)\n        s[i] = read ();\n    for (int i = m + 1; i <= m + n; i++)\n    {\n        type = read ();\n        if (!type)\n            b1[++cL].data = read (), b1[cL].id = i, w[i-m] = b1[cL].data;\n        else\n            b2[++cR].data = read (), b2[cR].id = i, w[i-m] = b2[cR].data;\n    }\n    sort (b1 + 1, b1 + cL + 1, cmp1);\n    sort (b2 + 1, b2 + cR + 1, cmp2);\n    cL += m, cR += m;\n    int r1 = 1, r2 = 1;\n    for (int i = 1; i <= cL; i++)\t//\u6392\u5e8f\u5e38\u6570\u4f18\u5316\uff0c\u65f6\u95f4\u7d27\u53ef\u4ee5\u4e0d\u52a0\n    {\n    \tif (r1 <= m && a[r1] < b1[r2].data || r2 > cL - m)\n    \t\tbL[i].data = a[r1], bL[i].id = r1, bL[i].tp = 1, r1++;\n    \telse\n    \t\tbL[i] = b1[r2], r2++;\n\t}\n\tr1 = r2 = 1;\n\tfor (int i = 1; i <= cR; i++)\n    {\n    \tif (r1 <= m && (a[r1] < b2[r2].data || a[r1] == b2[r2].data) || r2 > cR - m)\n    \t\tbR[i].data = a[r1], bR[i].id = r1, bR[i].tp = 1, r1++;\n    \telse\n    \t\tbR[i] = b2[r2], r2++;\n\t}\n    //\u4ee5\u4e0b\u4e3a\u5efa\u94fe\u8868 \n    for (int i = cL; i >= 1; i--)\n    {\n        tL[bL[i].id].to = bL[i-1].id;\n        tL[bL[i].id].la = bL[i+1].id;\n        if (bL[i+1].tp && bL[i].tp)\n            fL[bL[i+1].id] = bL[i].id;\n        fL[bL[i].id] = bL[i].id;\n        vL[bL[i].id] = bL[i].id;\n    }\n    tL[bL[1].id].to = bL[cL].id;\n    tL[bL[cL].id].la = bL[1].id;\n    if (bL[1].tp && bL[cL].tp)\n        fL[bL[1].id] = bL[cL].id;\n    for (int i = 1; i <= cR; i++)\n    {\n        tR[bR[i].id].to = bR[i+1].id;\n        tR[bR[i].id].la = bR[i-1].id;\n        if (bR[i-1].tp && bR[i].tp)\n            fR[bR[i-1].id] = bR[i].id;\n        fR[bR[i].id] = bR[i].id;\n        vR[bR[i].id] = bR[i].id;\n    }\n    tR[bR[cR].id].to = bR[1].id;\n    tR[bR[1].id].la = bR[cR].id;\n    if (bR[cR].tp && bR[1].tp)\n        fR[bR[cR].id] = bR[1].id;\n    for (int i = 1; i <= m; i++)\n    {\n        if (!used[i]) dfs (i, 0);\n    }\n    cout << ans << endl;\n    return 0;\n}\n\n```\n\n\u4e0d\u5f00 *o2* 377ms\uff0c\u5f00 *o2* 242ms\u3002\u4ee3\u7801\u5927\u591a\u662f\u5bf9\u79f0\u7684\uff0c\u5e76\u67e5\u96c6\u4e5f\u4e0d\u7b97\u6bd2\u7624\u3002\u6240\u4ee5~~\u5728\u7ed3\u5c3e\u6c42\u4e2a\u8d5e\u4e0d\u8fc7\u5206\u5427\u3002\u3002~~\n\n",
        "postTime": 1630604148,
        "uid": 546289,
        "name": "Link_Cut_qwq",
        "ccfLevel": 7,
        "title": "p5688"
    },
    {
        "content": "```\n\u6c42\u6c42\u7ba1\u7406\u9020\u9020\u6570\u636e\u5427\u2026\u2026\n```\n\n\u55ef\u55ef\u55ef\u611f\u89c9\u8fd9\u662f$\\text{CSPJX2019}$\u6700\u96be\u7684\u9898\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u4ed6**\u5230\u8fbe\u4efb\u610f\u4e00\u4e2a\u51fa\u53e3\u7684\u6700\u77ed\u65f6\u95f4**\u548c**\u8fd9\u4e2a\u51fa\u53e3\u7684\u7f16\u53f7\uff08\u4e0b\u79f0\u76ee\u6807\u51fa\u53e3\uff09**\uff0c\u4e0d\u59a8\u8bb0\u4e3a$t_i$\u548c$id_i$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u51fa\u53e3\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5b83\u7684\u9650\u5236$l_i$\u964d\u4e3a$0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fa\u53e3\u5c31\u4e0d\u518d\u6709\u610f\u4e49\uff0c\u76f4\u63a5\u5220\u6389\u3002\u8fd9\u542f\u53d1\u6211\u4eec\uff0c\u7528\u4e00\u4e2a\u73af\u5f62\u94fe\u8868\u7ef4\u62a4\u51fa\u53e3\u3002\u4e0d\u59a8\u7ef4\u62a4\u94fe\u8868$nxt_j,pre_j$\uff0c\u5206\u522b\u8868\u793a\u5f53**\u6cbf\u9006\u65f6\u9488**\u524d\u8fdb\u65f6\uff0c\u7b2c$j$\u4e2a\u51fa\u53e3\u7684**\u4e0b\u4e00\u4e2a\u51fa\u53e3**\u548c**\u4e0a\u4e00\u4e2a\u51fa\u53e3**\u3002\n\n\u5bb9\u6613\u60f3\u5230\u5c06$t_i$\u6309\u5347\u5e8f\u6392\u5e8f\uff08\u76f8\u540c\u65f6\u6309$i$\u6392\u5e8f\uff09\u3002\u6211\u4eec\u4f9d\u6b21\u8003\u8651\u6bcf\u4e00\u4e2a\u4eba\u3002\n\n\u663e\u7136\uff0c\u7b2c\u4e00\u4e2a\u4eba\u51fa\u53bb\u7684\u51fa\u53e3\u5c31\u662f\u4ed6\u7b2c\u4e00\u4e2a\u5230\u8fbe\u7684\u51fa\u53e3\uff08\u56e0\u4e3a\u4e0d\u4f1a\u6709\u4eba\u8ddf\u4ed6\u62a2\uff09\u3002\u8bb0\u4ed6\u51fa\u53bb\u7684\u51fa\u53e3\u4e3a$j$\uff0c\u5219$l_j=l_j-1$\u3002\n\n\u82e5\u6b64\u65f6$l_j>0$\uff0c\u5219\u6240\u6709\u51fa\u53e3\u4ecd\u7136\u53ef\u7528\u3002\n\n\u82e5$l_j=0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fa\u53e3\u5c31\u4e0d\u80fd\u518d\u51fa\u4eba\u4e86\u3002\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u8981\u628a\u6240\u6709\u539f\u6765\u6240\u6709\u76ee\u6807\u51fa\u53e3\u4e3a$j$\u7684\u4eba\u7684\u76ee\u6807\u51fa\u53e3\u6539\u6389\uff0c\u5bf9\u4e8e\u9006\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u76ee\u6807\u51fa\u53e3\u53d8\u4e3a$nxt_j$\uff0c\u5230\u8fbe\u65f6\u95f4\u4e5f\u589e\u52a0\uff1b\u5bf9\u4e8e\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u76ee\u6807\u51fa\u53e3\u53d8\u4e3a$pre_j$\uff0c\u540c\u6837\u589e\u52a0\u5230\u8fbe\u65f6\u95f4\u3002\n\n\u5bf9\u4e8e\u540e\u9762\u7684\u4eba\uff0c\u8fd9\u4e2a\u5206\u6790\u540c\u6837\u9002\u7528\u3002\n\n\u5982\u679c\u66b4\u529b\u66f4\u6539\u6240\u6709\u4eba\u7684\u76ee\u6807\u51fa\u53e3\u548c\u5230\u8fbe\u65f6\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4e0a\u5347\u81f3$O(nm)$\uff0c\u65e0\u6cd5\u627f\u53d7\u3002\u5fc5\u987b\u4f18\u5316\u3002\n\n\u53d1\u73b0\uff1a\u5982\u679c\u4e24\u4e2a\u4eba$i_1,i_2$\u5f00\u59cb\u65f6\u76ee\u6807\u51fa\u53e3\u76f8\u540c\uff0c\u90a3\u4e48\u53ea\u8981\u4ed6\u4eec\u8fd8\u6ca1\u6709\u51fa\u53bb\uff0c\u4ed6\u4eec\u7684\u76ee\u6807\u51fa\u53e3\u4e5f\u4e00\u5b9a\u76f8\u540c\u3002\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u51fa\u53e3$j$\uff0c\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf\uff0c\u8868\u793a\u76ee\u6807\u51fa\u53e3\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5229\u7528\u4e0a\u6587\u7684$nxt_j,pre_j$\u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4\uff0c\u6211\u4eec\u4f5c\u5982\u4e0b\u5904\u7406\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u4eba$i$\uff0c\u8bb0\u4ed6\u7684\u76ee\u6807\u51fa\u53e3\u7684**\u4e0a\u4e00\u4e2a\u51fa\u53e3**\uff08\u4ee5\u4ed6\u7684\u524d\u8fdb\u65b9\u5411\u4e3a\u57fa\u51c6\uff09\u4e3a\u4ed6\u7684**\u51fa\u53d1\u51fa\u53e3**$start_i$\uff0c\u90a3\u4e48\u5728\u4efb\u4f55\u4e00\u4e2a\u65f6\u523b\uff0c\u5bf9\u4e8e\u9006\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u4ed6\u76ee\u524d\u7684\u76ee\u6807\u51fa\u53e3\u4e3a$nxt_{start_i}$\uff1b\u5bf9\u4e8e\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u76ee\u6807\u51fa\u53e3\u4e3a$pre_{start_i}$\u3002\u8fd9\u6837\uff0c\u7ef4\u62a4\u76ee\u6807\u51fa\u53e3\u65f6\u4ec5\u9700\u66f4\u6539$nxt_j,pre_j$\u6570\u7ec4\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a$O(1)$\u3002\n\n\u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u8981\u5904\u7406**\u5230\u8fbe\u65f6\u95f4**\u7684\u66f4\u6539\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c$l_j$\u964d\u4e3a$0$\uff0c\u90a3\u4e48\u6240\u6709\u4ee5$j$\u4e3a\u76ee\u6807\u51fa\u53e3\u7684**\u9006\u65f6\u9488\u884c\u8d70\u7684\u4eba**\uff0c\u65f6\u95f4\u589e\u52a0\u7684\u91cf\u76f8\u540c\uff08\u5c31\u662f$j$\u548c$nxt_j$\u95f4\u7684\u8ddd\u79bb\uff09\uff1b**\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba**\u540c\u7406\u3002\n\n\u800c\u6211\u4eec\u6bcf\u6b65\u8981\u627e\u51fa**\u5230\u8fbe\u65f6\u95f4\u6700\u77ed**\u7684\u4eba\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u4e2a**\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6700\u503c**\u7684\u95ee\u9898\uff0c\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u8003\u8651\u66f4\u6539\u6392\u5e8f\u65b9\u5f0f\u3002\u6211\u4eec\u628a**\u6240\u6709\u9006\u65f6\u9488\u884c\u8d70\u7684\u4eba\u653e\u5728\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba\u524d\u9762**\uff1b\u5728\u540c\u4e00\u6bb5\u5185\uff0c\u518d**\u6309\u4f4d\u7f6e\u6392\u5e8f**\uff08\u4e0d\u518d\u6309$t_i$\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u6539\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u503c\uff09\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21\u4fee\u6539\u7684$t_i$\u90fd\u4f1a\u5c3d\u53ef\u80fd\u76f8\u90bb\u3002\n\n\u9898\u4e2d\u8fd8\u6709\u8981\u6c42\uff1a\u540c\u65f6\u5230\u67d0\u4e00\u51fa\u53e3\u7684\u4eba\uff0c\u7f16\u53f7\u5c0f\u7684\u4f18\u5148\u3002\u4e8e\u662f\uff0c\u8bbe\u8ba1\u53e6\u4e00\u4e2a\u503c$val_i=t_i\\times n+i$\uff0c\u7531\u4e8e$1\\leq i\\leq n$\u4e14$t_i$\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff1a\u5f53$t_i$\u4e0d\u540c\u65f6\uff0c\u4e00\u5b9a\u662f$t_i$\u5c0f\u7684\u90a3\u4e2a$val_i$\u5c0f\uff1b\u5f53$t_i$\u76f8\u540c\u65f6\uff0c\u7f16\u53f7\u5c0f\u7684\u90a3\u4e2a$val_i$\u5c0f\uff0c\u6b63\u597d\u7b26\u5408\u4e86\u6211\u4eec\u7684\u9700\u6c42\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u6700\u7ec8\u7684\u7b97\u6cd5\u662f\uff1a\n\n- \u8bfb\u5165\uff0c\u9884\u5904\u7406\u51fa\u6570\u7ec4$nxt_j,pre_j,start_i,val_i$\uff1b\n- \u6392\u5e8f\uff0c\u5efa\u7ebf\u6bb5\u6811\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u987a\u4fbf\u8bb0\u5f55\u6811\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u4eba\u7684\u7f16\u53f7\uff1b\n- \u6bcf\u6b65\u627e\u5230$val_i$\u6700\u5c0f\u7684\u4eba\uff08\u8fd9\u6837\u7684\u4eba\u4e00\u5b9a\u552f\u4e00\uff0c\u56e0\u4e3a$val_i$\u4e24\u4e24\u4e0d\u540c\uff09\uff0c\u786e\u5b9a\u8fd9\u4e2a\u4eba\u79bb\u53bb\u7684\u51fa\u53e3$k_i$\u7684\u503c\uff0c\u5e76\u8ba9$l_{k_i}=l_{k_i}-1$\uff0c\u5728\u7ebf\u6bb5\u6811\u4e2d\u628a\u8fd9\u4e2a\u4eba\u7684$val_i$\u8d4b\u4e3a\u6b63\u65e0\u7a77\uff1b\n- \u5982\u679c$l_{k_i}=0$\uff0c\u5728\u94fe\u8868\u4e2d\u5220\u53bb\u51fa\u53e3$k_i$\uff0c\u540c\u65f6\u5728\u7ebf\u6bb5\u6811\u4e2d\u533a\u95f4\u589e\u52a0$val_i$\u7684\u503c\uff08\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u6b21\u6700\u591a\u66f4\u6539$4$\u6bb5\u533a\u95f4\uff09\uff1b\n- \u4e0d\u65ad\u91cd\u590d$3,4$\u6b65\uff0c\u76f4\u5230\u6240\u6709\u4eba\u90fd\u627e\u5230\u51fa\u53e3\uff08\u5373\u7ebf\u6bb5\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u5c31\u662f\u6b63\u65e0\u7a77\uff09\uff0c\u6216\u8005\u6240\u6709\u51fa\u53e3\u90fd\u6ee1\u4eba\uff08\u5373\u4fee\u6539\u65f6\u53d1\u73b0$l_{k_i}=0$\u4e14$nxt_{k_i}=pre_{k_i}=k_i$\uff09\uff0c\u6b64\u65f6\u7ec8\u6b62\u64cd\u4f5c\uff1b\n- \u6839\u636e$k_i$\u8ba1\u7b97\u7b54\u6848\uff0c\u8f93\u51fa\uff0c\u7ec8\u6b62\u7b97\u6cd5\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O((n+m)\\log n)$\u3002",
        "postTime": 1575202231,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5688 \u3010\u6563\u6b65\u3010\u6682\u65e0\u6570\u636e\u3011\u3011"
    },
    {
        "content": "\u524d\u8a00\uff1a\u548c\u540c\u5b66\u5237\u8054\u8d5b\u9898\uff0c\u7136\u540e\u770b\u5230\u7ebf\u6bb5\u6811\u505a\u6cd5\u597d\u957f\uff08\uff09\u3002\n\n\u4e3a\u4e86\u907f\u514d\u7e41\u7410\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u8003\u8651\u6362\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u3002\n\n\u6211\u4eec\u4e0d\u8003\u8651\u6bcf\u4e00\u4e2a\u4eba\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u662f\u8003\u8651\u6bcf\u4e2a\u51fa\u53e3\u5de6\u8fb9\u4e0e\u53f3\u8fb9\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u3002\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u5728\u8fd9\u4e9b\u51fa\u53e3\u4e2d\u9009\u53d6\u4e00\u4e2a\u8ddd\u79bb\u6700\u77ed\u7684\u4eba\u800c\u5e76\u4e0d\u7528\u66f4\u65b0\u8ddd\u79bb\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528set\u6765\u89e3\u51b3\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u7ef4\u62a4\u6bcf\u4e2a\u51fa\u53e3\u5b83\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u3002\n\n\n- **1.\u521d\u59cb\u5316**\n\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u5411\u7684\u4eba\u548c\u6bcf\u4e2a\u51fa\u53e3\u90fd\u5efa\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u65b9\u4fbf\u4e4b\u540e\u7684\u5220\u9664\u64cd\u4f5c\u3002\u540c\u65f6\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u4f4d\u7f6e\u76f8\u540c\u65f6\u7684\u7f16\u53f7\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5efa\u94fe\u8868\u65f6\u4ee5\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u4e4b\u540e\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u51fa\u53e3\u5de6\u8fb9\u4e0e\u53f3\u8fb9\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u3002\u8fd9\u91cc\u4ee5\u5904\u7406\u5de6\u8fb9\u7684\u4eba\u4e3a\u4f8b\uff1a\n\n\u4ece\u4efb\u610f\u7684\u4eba\u5f00\u59cb\uff0c\u4e4b\u540e\u4e0d\u65ad\u5f80\u5de6\u79fb\u52a8\uff0c\u76f4\u5230\u4e0b\u4e00\u4e2a\u4eba\u8de8\u8fc7\u4e86\u4e00\u4e2a\u51fa\u53e3\uff0c\u5982\u679c\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u5219\u4ece\u7f16\u53f7\u5927\u7684\u5411\u7f16\u53f7\u5c0f\u7684\u8fde\u8fb9\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/ne2gca37.png)\n\n\u6700\u540e\u770b\u4e00\u4e0b\u5f00\u59cb\u7684\u4eba\u4e0e\u7ed3\u675f\u7684\u4eba\u4e4b\u95f4\u6709\u6ca1\u6709\u51fa\u53e3\u3002\n\n\u5c06\u8ddd\u79bb\u548c\u6bcf\u4e2a\u70b9\u7684\u7f16\u53f7\u5408\u8d77\u6765\u5b58\u5728set\u91cc\uff0c\u540c\u65f6\u5b58\u50a8\u6bcf\u4e2a\u88ab\u9009\u62e9\u7684\u4eba\u4e0e\u51fa\u53e3\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u82e5\u51fa\u53e3\u7684\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u6ca1\u6709\u4eba\u5bf9\u5e94\uff0c\u5219\u5c06\u5b83\u7684\u503c\u8bbe\u4e3a0\uff08\u540e\u9762\u6709\u7528\uff09\u3002\n\n- **2.\u5220\u9664\u4e0e\u52a0\u5165**\n\n\n\n\u9009\u62e9\u51fa\u8ddd\u79bb\u6700\u8fd1\u7684\u4eba\u540e\uff0c\u5c31\u8981\u5bf9\u5b83\u5bf9\u5e94\u7684\u51fa\u53e3\u72b6\u6001\u8fdb\u884c\u4fee\u6539\u3002\n\n\u5047\u5982\u51fa\u53e3\u8fd8\u80fd\u51fa\u4eba\uff0c\u5219\u5bf9\u51fa\u53e3\u6240\u5bf9\u5e94\u5de6\u8fb9\u6700\u8fd1\u6216\u53f3\u8fb9\u6700\u8fd1\u7684\u4eba\u8fdb\u884c\u4fee\u6539\n\n\u5373\u5148\u627e\u5230\u4eba\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\uff0c\u518d\u5c06\u5b83\u8fde\u5411\u8fd9\u4e2a\u4eba\u7684\u524d\u9a71\uff0c\u5c06\u5bf9\u5e94\u7684\u503c\u5b58\u8fdbset\u91cc\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sh4jcpby.png)\n\n\u5f53\u7136\u5982\u679c\u524d\u9a71\u5df2\u7ecf\u6709\u5bf9\u5e94\u7684\u51fa\u53e3\u4e86\uff0c\u90a3\u4e48\u5c31\u5c06\u5b83\u7684\u503c\u8bbe\u4e3a0.\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xfuw18o0.png)\n\n\u5982\u679c\u51fa\u53e3\u6ee1\u4e86\uff0c\u90a3\u4e48\u5c31\u8981\u4fee\u6539\u8be5\u51fa\u53e3\u4e0b\u4e00\u4e2a\u51fa\u53e3\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u8be5\u51fa\u53e3\u6240\u5bf9\u5e94\u7684\u4eba\u4e00\u5b9a\u662f\u5728\u4e0b\u4e00\u4e2a\u51fa\u53e3\u6240\u5bf9\u5e94\u7684\u4eba\u7684\u540e\u9762\uff0c\u6240\u4ee5\u53ea\u6709\u5728\u5bf9\u5e94\u5173\u7cfb\u4e3a0\u7684\u51fa\u53e3\u8981\u5c06\u5b83\u4e0e\u8fd9\u4e2a\u4eba\u7684\u524d\u9a71\u5efa\u7acb\u5173\u7cfb\uff0c\u5e76\u52a0\u5165set\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1qxr3hyd.png)\n\n\u5047\u5982\u5220\u9664\u4e86\u51fa\u53e3\u5219\u8981\u5c06\u51fa\u53e3\u4ece\u94fe\u8868\u4e2d\u5220\u9664\uff0c\u540c\u65f6\u5c06\u6240\u9009\u5230\u7684\u4eba\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u3002\n\n\u6700\u540e\u51fa\u53e3\u6240\u5bf9\u5e94\u7684\u5173\u7cfb\u6ca1\u4e86\u5c31\u9000\u51fa\u3002\n\n\u7136\u540e\u53d1\u73b0\u7ec6\u8282\u6781\u591a\uff0c\u5b9e\u9645\u957f\u5ea6\u548c\u6570\u636e\u7ed3\u6784\u5dee\u4e0d\u591a\uff08\uff09\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <set>\n#include <algorithm>\n#define int long long\nusing namespace std;\nconst int N = 2e5 + 10;\nint n, m, l;\nstruct people\n{\n\tint ids, opt, b;\n}p[N], zz[N], nn[N];\nstruct list\n{\n\tint l, r;\n}ls[N];\nint a[N], L[N], num1, num2, ss[N], bb[N];\nbool pd(people i, people j)\n{\n\treturn i.b < j.b || (i.b == j.b && i.ids > j.ids);\n}\n\nbool pd1(people i, people j)\n{\n\treturn i.b < j.b || (i.b == j.b && i.ids < j.ids);\n}\nint sf[N];\nset <pair<int, int> > s;\nint dl[N], dr[N];\nint _l[N], _r[N];\nint ans;\nint next[N], pre[N]; \nint ff[N];\nvoid re(int to, pair<int, int> now)\n{\n\tint a1 = dl[to], a2 = dr[to];\n\tif(ss[now.second] == 0)\n\ta2 = ls[a2].l;\n\telse\n\ta1 = ls[a1].r;\n\tif(dr[next[to]] == 0 && a2 && L[_r[a2]] <= 0)\n\t{\n\t\tdr[next[to]] = a2;\n\t\t_r[a2] = next[to];\n\t\tif(ff[a2] == 0 && next[to] != to)\n\t\tif(a[next[to]] < bb[a2])\n\t\ts.insert(make_pair(l - bb[a2] + a[next[to]], a2));\n\t\telse\n\t\ts.insert(make_pair(a[next[to]] - bb[a2], a2));\n\t}\n\tif(dl[pre[to]] == 0 && a1 && L[_l[a1]] <= 0)\n\t{\n\t\tdl[pre[to]] = a1;\n\t\t_l[a1] = pre[to];\n\t\tif(ff[a1] == 0 && next[to] != to)\n\t\tif(a[pre[to]] > bb[a1])\n\t\ts.insert(make_pair(l + bb[a1] - a[pre[to]], a1));\n\t\telse\n\t\ts.insert(make_pair(bb[a1] - a[pre[to]], a1));\n\t}\n\tls[ls[now.second].l].r = ls[now.second].r;\n\tls[ls[now.second].r].l = ls[now.second].l;\n\tpre[next[to]] = pre[to];\n\tnext[pre[to]] = next[to];\n} \nsigned main()\n{\n\tfreopen(\"walk.in\",\"r\",stdin);\n\tfreopen(\"walk.out\",\"w\",stdout);\n\tscanf(\"%lld%lld%lld\", &n, &m, &l);\n\tfor (int i = 2; i <= m; ++ i)\n\t{\n\t\tscanf(\"%lld\", &a[i]);\n\t}\n\tfor (int i = 1; i <= m; ++ i)\n\t{\n\t\tscanf(\"%lld\", &L[i]);\n\t\tpre[i] = (i - 2 + m) % m + 1;\n\t\tnext[i] = i % m + 1;\n\t}\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tscanf(\"%lld%lld\", &p[i].opt, &p[i].b);\n\t\tss[i] = p[i].opt;\n\t\tbb[i] = p[i].b;\n\t\tp[i].ids = i;\n\t}\n\tsort(p + 1, p + 1 + n, pd);\n\tfor (int i = 1; i <= n; ++ i)\n\t{\n\t\tif(p[i].opt == 0)\n\t\t{\n\t\t\tnn[++ num1] = p[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tzz[++ num2] = p[i];\n\t\t}\n\t}\n\tsort(zz + 1, zz + 1 + num2, pd1);\n\tfor (int i = 1; i <= num1; ++ i)\n\t{\n\t\tls[nn[i].ids].l = nn[i - 1].ids;\n\t\tls[nn[i].ids].r = nn[i + 1].ids;\n\t}\n\tls[nn[1].ids].l = nn[num1].ids;\n\tls[nn[num1].ids].r = nn[1].ids;\n\tfor (int i = 1; i <= num2; ++ i)\n\t{\n\t\tls[zz[i].ids].l = zz[i - 1].ids;\n\t\tls[zz[i].ids].r = zz[i + 1].ids;\n\t}\n\tls[zz[1].ids].l = zz[num2].ids;\n\tls[zz[num2].ids].r = zz[1].ids;\n\tint now = 1, S;\n\twhile(ss[p[now].ids] == 1 && now <= n) ++ now;\n\tS = ls[p[now].ids].l;\n\tint id = p[now].ids, qwq = 0;\n\tif(bb[id] == 0)\n\t{\n\t\twhile(bb[ls[id].r] <= a[1] && id != S)\n\t\tid = ls[id].r;\n\t\tdr[1] = id;\n\t\t_r[id] = 1;\n\t\ts.insert(make_pair(0, id));\n\t\tqwq = 1;\n\t}\n\tint flag = 1;\n\tfor (int i = 2; i <= m; ++ i)\n\t{\n\t\twhile(bb[ls[id].r] <= a[i]&& id != S)\n\t\tid = ls[id].r, flag = 1;\n\t\tif(flag == 1 && bb[id] <= a[i] && bb[id] != 0)\n\t\t{\n\t\t\tflag = 0;\n\t\t\tdr[i] = id;\n\t\t\t_r[id] = i;\n\t\t\ts.insert(make_pair(a[i] - bb[id], id));\n\t\t}\n\t}\n\tif(qwq == 0 && _r[S] == 0)\n\t{\n\t\tdr[1] = S;\n\t\t_r[S] = 1;\n\t\ts.insert(make_pair(l - bb[S], S));\n\t}\n\t\n\tsort(p + 1, p + 1 + n, pd1);\n\tnow = n;\n\twhile(ss[p[now].ids] == 0 && now > 0) -- now;\n\tS = ls[p[now].ids].r;\n\tid = p[now].ids;\n\tflag = 1;\n\tfor (int i = m; i >= 2; -- i)\n\t{\n\t\twhile(bb[ls[id].l] >= a[i] && id != S)\n\t\tid = ls[id].l, flag = 1;\n\t\tif(flag == 1 && bb[id] >= a[i] && bb[id] != 0)\n\t\t{\n\t\t\tdl[i] = id;\n\t\t\t_l[id] = i;\n\t\t\ts.insert(make_pair(bb[id] - a[i], id));\n\t\t\tflag = 0;\n\t\t}\n\t}\n\tif(_l[S] == 0)\n\t{\n\t\tdl[1] = S;\n\t\t_l[S] = 1;\n\t\ts.insert(make_pair(bb[S], S));\n\t} \n\twhile(s.size())\n\t{ \n\t\tpair<int, int> now = *s.begin();\n\t\ts.erase(s.begin());\n\t\tif(ff[now.second] || now.second == 0)\n\t\tcontinue;\n\t\t\tif(ss[now.second] == 0)\n\t\t\t{\n\t\t\t\tint to = _r[now.second];\n\t\t\t\tint jl = 0;\n\t\t\t\tif(a[to] < bb[now.second])\n\t\t\t\tjl = l - bb[now.second] + a[to];\n\t\t\t\telse\n\t\t\t\tjl = a[to] - bb[now.second];\n\t\t\t\tif(jl != now.first)continue;\n\t\t\t\t-- L[to];\n\t\t\t\tif(L[to] < 0)\n\t\t\t\t{\n\t\t\t\t\t_r[now.second] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(ff[now.second] == 1)continue;\n\t\t\t\tff[now.second] = 1;\n//\t\t\t\tprintf(\"%d %d\\n\", now.second, to);\n\t\t\t\tans ^= now.second * to;\n\t\t\t\tif(L[to] == 0)\n\t\t\t\t{\n\t\t\t\t\tre(to, now);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tls[ls[now.second].l].r = ls[now.second].r;\n\t\t\t\t\tls[ls[now.second].r].l = ls[now.second].l;\n\t\t\t\t\tif(L[_r[ls[now.second].l]] > 0 || ff[ls[now.second].l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tdr[to] = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[to] < bb[ls[now.second].l])\n\t\t\t\t\t\ts.insert(make_pair(l - bb[ls[now.second].l] + a[to], ls[now.second].l));\n\t\t\t\t\t\telse\n\t\t\t\t\t\ts.insert(make_pair(a[to] - bb[ls[now.second].l], ls[now.second].l));\n\t\t\t\t\t\tdr[to] = ls[now.second].l;\n\t\t\t\t\t\t_r[ls[now.second].l] = to;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint to = _l[now.second];\n\t\t\t\tint jl = 0;\n\t\t\t\tif(a[to] > bb[now.second])\n\t\t\t\tjl = l + bb[now.second] - a[to];\n\t\t\t\telse\n\t\t\t\tjl = bb[now.second] - a[to];\n\t\t\t\tif(jl != now.first)continue;\n\t\t\t\t-- L[to];\n\t\t\t\tif(L[to] < 0)\n\t\t\t\t{\n\t\t\t\t\t_l[now.second] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(ff[now.second] == 1)continue;\n\t\t\t\tff[now.second] = 1;\n//\t\t\t\tprintf(\"%d %d\\n\", now.second, to);\n\t\t\t\tans ^= now.second * to;\n\t\t\t\tif(L[to] == 0)\n\t\t\t\t{\n\t\t\t\t\tre(to, now);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tls[ls[now.second].l].r = ls[now.second].r;\n\t\t\t\t\tls[ls[now.second].r].l = ls[now.second].l;\n\t\t\t\t\tif(L[_l[ls[now.second].r]] > 0 || ff[ls[now.second].r] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tdl[to] = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[to] > bb[ls[now.second].r])\n\t\t\t\t\t\ts.insert(make_pair(l + bb[ls[now.second].r] - a[to], ls[now.second].r));\n\t\t\t\t\t\telse\n\t\t\t\t\t\ts.insert(make_pair(bb[ls[now.second].r] - a[to], ls[now.second].r));\n\t\t\t\t\t\tdl[to] = ls[now.second].r;\n\t\t\t\t\t\t_l[ls[now.second].r] = to;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t}\n\tprintf(\"%lld\", ans);\n}\n```\n",
        "postTime": 1603446644,
        "uid": 111728,
        "name": "\u5e7b\u5f71\u661f\u575a\u5f3a",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5688 \u3010[CSP-SJX2019]\u6563\u6b65\u3011"
    },
    {
        "content": "\u770b\u8d77\u6765\u8fd9\u9898\u8fd8\u662f\u4e0d\u592a\u591a\u4eba\u77e5\u9053\u3002\u3002\u3002\u90a3\u4e0d\u59a8\u5728A\u6389\u4e00\u4e2a\u6708\u4e4b\u540e\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u8fd9\u9898\u5199\u51fa\u6765\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u4ee3\u7801\u80fd\u529b\u3002\n\n---\n\n\u535a\u5ba2\u9605\u8bfb\u6548\u679c\u66f4\u597d\u3002\n\n#### 1.\u57fa\u672c\u601d\u8def\n\n\u9996\u5148\u8fd9\u9898\u6240\u6709\u4eba\u662f\u5300\u901f\u7684\uff0c\u5e76\u4e14\u4e00\u76f4\u4e00\u8d77\u8fd0\u52a8\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\uff0c\u50cf\u5c0f\u5b66\u5965\u6570\u4e2d\u591a\u4eba\u884c\u8fdb\u591a\u6b21\u6298\u8f6c\u7684\u95ee\u9898\u4e00\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u6700\u5148\u62b5\u8fbe\u7ec8\u70b9\u7684\u4eba\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u9053\u9898\u5f53\u7136\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff1b\u56e0\u4e3a\u6bcf\u4e2a\u51fa\u53e3\u53ea\u80fd\u5bb9\u7eb3\u4e00\u5b9a\u91cf\u7684\u4eba\u51fa\u53bb\u3002\n\n\u4e8e\u662f\u5c31\u5728\u67e5\u8be2\u7684\u65f6\u5019\u5e26\u4e0a\u4e86\u4fee\u6539\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u51fa\u53e3\u6ee1\u5458\u4e86\uff0c\u53ea\u5bf9\u5176\u5b83\u7684\uff08\u4e24\u4e2a\u65b9\u5411\uff09\u539f\u672c\u9700\u8981\u4ece\u8fd9\u4e2a\u51fa\u53e3\u51fa\u53bb\u7684\u4eba\u9020\u6210\u5f71\u54cd\uff0c**\u4e14\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u4eba\u65b0\u7684\u76ee\u7684\u5730\u662f\u5206\u522b\u76f8\u540c\u7684**\u3002\n\n---\n\n#### 2.\u5b9e\u73b0\u7684\u65b9\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\n\n\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u7ebf\u6bb5\u6811\u4e0a\u5168\u5c40\u67e5\u8be2\u5e26\u4e0a\u533a\u95f4\u4fee\u6539\u3002\n\n\u8fd9\u91cc\u6709\u5fc5\u8981\u5148\u63d0\u51fa\uff1a\u5982\u4f55\u4fdd\u8bc1\u6240\u4fee\u6539\u7684\u4e00\u4e2a\u6216\u82e5\u5e72\u4e2a\u533a\u95f4\u5462\uff1f\n\n\u53ef\u4ee5\u9996\u5148\u628a\u4eba\u4ee5\u65b9\u5411\u4e0d\u540c\u5206\u79bb\u5f00\u6765\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e24\u8fb9\u7684\u4eba\uff0c\u6309\u7167\u7edd\u5bf9\u4f4d\u7f6e $b$ \u6392\u5e8f\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u6574\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u3002\n\n1. \u521d\u59cb\u5316\u6bcf\u4e2a\u4eba\u7684\u76ee\u7684\u5730\u4e0e\u8ddd\u79bb\u3002\n2. \u6839\u636e\u8ddd\u79bb\u6700\u5c0f\u5efa\u51fa\u7ebf\u6bb5\u6811\u3002\n3. \u6267\u884c $n$ \u6b65\uff1a\n4. \u53d6\u51fa\u7ebf\u6bb5\u6811\u9876\u90e8\u7ed3\u70b9\uff0c\u5c06\u5176\u8d21\u732e\u52a0\u5165\u7b54\u6848\u3002\n5. \u5982\u679c\u5176\u76ee\u7684\u5730\u6ee1\u5458\uff1a\n6. \u4e8c\u5206\u627e\u51fa\u539f\u672c\u6253\u7b97\u4ece\u8fd9\u4e2a\u51fa\u53e3\u51fa\u53bb\u7684\u4eba\u7684\u533a\u95f4\u3002\uff08\u8fd9\u91cc\u533a\u95f4\u6700\u591a\u6709 $4$ \u4e2a\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u65b9\u5411\uff0c\u5e76\u4e14\u5982\u679c\u8de8\u8fc7 $0$ \u539f\u70b9\uff0c\u53c8\u53ef\u80fd\u51fa\u73b0 $2$ \u4e2a\u533a\u95f4\uff09\n7. \u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u4fee\u6539\u79bb\u76ee\u7684\u5730\u7684\u8ddd\u79bb\u548c\u76ee\u7684\u5730\u3002\n8. \u5982\u679c\u51fa\u53e3\u5df2\u7ecf\u88ab\u7528\u5c3d\uff0c\u540e\u9762\u7684\u4eba\u7684\u8d21\u732e\u90fd\u4e3a $0$\uff0c\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u3002\n\n\u8fd9\u4e2a\u8868\u5b8c\u6574\u5417\uff1f\u660e\u663e\u662f\u4e0d\u591f\u5b8c\u6574\u7684\u3002\n\n\u6bd4\u5982\u8bf4\uff1a\u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u51fa\u53e3\u7528\u5c3d\u4e4b\u540e\u4e0b\u4e00\u4e2a\u80fd\u7528\u7684\u51fa\u53e3\u662f\u54ea\u4e00\u4e2a\uff1f\u5982\u4f55 $O(n\\log n)$ \u521d\u59cb\u5316\uff1f\u7ebf\u6bb5\u6811\u4e0a\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff1f\n\n\u5173\u4e8e\u51fa\u53e3\u7684\u5173\u7cfb\uff0c\u5bb9\u6613\u60f3\u5230\u7528\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7ef4\u62a4\u8fd8\u5b58\u5728\u7684\u51fa\u53e3\u4e4b\u95f4\u7684\u76f8\u90bb\u5173\u7cfb\u3002\n\n\u53ef\u4ee5\u4e0a\u4e00\u6bb5\u4ee3\u7801\uff1a\n\n```cpp\nstruct Chain\n{\n\tint l[MAXN],r[MAXN];\n\tvoid init() {\n\t\tfor(int i = 1;i <= m;i++) {\n\t\t\tl[i] = i - 1;\n\t\t\tr[i] = i + 1;\n\t\t}\n\t\tl[1] = m, r[m] = 1;\n\t}\n\tint pre(int x) {\n\t\treturn l[x];\n\t}\n\tint nxt(int x) {\n\t\treturn r[x];\n\t}\n\tvoid del(int x) {\n\t\tr[l[x]] = r[x];\n\t\tl[r[x]] = l[x];// \u6ee1\u5458\u65f6\u5220\u9664\n\t}\n};\n```\n\n\u5173\u4e8e\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\u4e8c\u5206\u3002\n\n\u7ed9\u51fa\u4eba\u7684\u7ed3\u6784\u4f53\uff1a\n\n```cpp\nstruct Person\n{\n\tint s,b,id,tar,dis;\n\t// \u5206\u522b\u662f\u65b9\u5411\uff0c\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u6392\u5e8f\u524d\u7684\u7f16\u53f7\uff0c\u76ee\u6807\u548c\u8ddd\u79bb\uff08\u5f53\u7136\u662f\u521d\u59cb\u72b6\u6001\u4e0b\u7684\uff09\n\tPerson() {}\n\tPerson(int _s,int _b,int _id,int _tar,int _dis) :\n\t\ts(_s), b(_b), id(_id), tar(_tar), dis(_dis) {} \n\tfriend bool operator < (const Person &x,const Person &y) {\n\t\tif(x.s != y.s) return x.s < y.s;\n\t\treturn x.b < y.b;\n\t}\n\t//\u7b2c\u4e00\u6b21\u6392\u5e8f\u7684\u65b9\u5f0f\uff1a\u5148\u6309\u65b9\u5411\uff0c\u518d\u6309\u7edd\u5bf9\u4f4d\u7f6e\n};\n```\n\n**\u6ce8\u610f\uff1a\u8fd9\u4e0d\u662f\u7ebf\u6bb5\u6811\u4e0a\u7ed3\u70b9\u7684\u7ed3\u6784\u4f53\u3002**\n\n\u5e76\u521d\u59cb\u5316\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid init() {\n\tfor(int i = 1;i <= n;i++) {\n\t\tif(!p[i].s) {// \u987a\u65f6\u9488\n\t\t\tint k = std::lower_bound(a + 1,a + 1 + m,p[i].b) - a - 1;\n\t\t\tif(k == m) p[i].tar = 1, p[i].dis = l - p[i].b;\n\t\t\telse p[i].tar = k + 1, p[i].dis = a[k + 1] - p[i].b; \n\t\t} else {// \u9006\u65f6\u9488\n\t\t\tint k = std::upper_bound(a + 1,a + 1 + m,p[i].b) - a - 1;\n\t\t\tp[i].tar = k, p[i].dis = p[i].b - a[k];\n\t\t}\n\t}\n\treturn;\n}\n```\n\n\u6ce8\u610f `lower_bound` \u548c `upper_bound` \u7684\u8fd0\u7528\u53ca\u8de8\u8fc7 $0$ \u539f\u70b9\u7684\u7279\u6b8a\u60c5\u51b5\u5904\u7406\u3002\n\n\u518d\u7ed9\u51fa\u4e3b\u51fd\u6570\u5f00\u5934\u4e00\u6bb5\uff1a\n\n```cpp\n\nPerson p[MAXN];\nChain c;\nSegment_Tree t;\n\nint main() {\n\tn = read(), m = read(), l = read();\n\tfor(int i = 2;i <= m;i++) a[i] = read();\n\tfor(int i = 1;i <= m;i++) lim[i] = read();\n\tfor(int i = 1;i <= n;i++) {\n\t\tp[i].s = read(), p[i].b = read();\n\t\tp[i].id = i;\n\t}\n\tstd::sort(p + 1, p + 1 + n);\n\twhile(end <= n && !p[end].s) end++;\n\tinit();\n\tt.build(1,1,n);\n\tc.init();\n```\n\n\u6ce8\u610f\u8ba4\u6e05\u53d8\u91cf\u540d\u3002 `end` \u8bb0\u5f55\u4e86\u7b2c\u4e00\u4e2a\u987a\u65f6\u9488\u7684\u4eba\u7684\u7f16\u53f7\uff0c\u662f\u4e4b\u540e\u4e8c\u5206\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\u3002\n\n\u7136\u540e\u5230\u4e86\u91cd\u70b9\uff1a\u7ebf\u6bb5\u6811\u5e94\u8be5\u600e\u4e48\u5de5\u4f5c\u5462\uff1f\n\n---\n\n#### 3.\u7ebf\u6bb5\u6811\u4e0a\u5904\u7406\n\n\u56e0\u4e3a\u6211\u4eec\u4e0d\u4ec5\u8981\u8be2\u95ee\u7ebf\u6bb5\u6811\u4e0a\u6700\u5c0f\u8ddd\u79bb\uff0c\u8fd8\u8981\u77e5\u9053\u6700\u5c0f\u8ddd\u79bb\u7684\u70b9\u7684\u7f16\u53f7\u3002\n\n\u4e8e\u662f\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u7ed3\u70b9\u5c01\u88c5\u6210\u7ed3\u6784\u4f53\uff1a\n\n```cpp\nstruct Segment_Tree\n{\n#define lc(k) k << 1\n#define rc(k) k << 1 | 1\n\tstruct node\n\t{\n\t\tint id,dis,tar;\n\t\t// \u7f16\u53f7\uff0c\u8ddd\u79bb\uff0c\u76ee\u6807\n\t\t// \u6ce8\u610f\u7f16\u53f7\u662f\u6392\u5b8c\u5e8f\u7684\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u4e00\u5f00\u59cb\u8f93\u5165\u7684\u7f16\u53f7\u3002\n\t\tnode() {}\n\t\tnode(int _id,int _dis,int _tar) :\n\t\t\tid(_id), dis(_dis), tar(_tar) {}\n\t\tfriend bool operator < (const node &x,const node &y) {\n\t\t\tif(x.dis != y.dis) return x.dis < y.dis;\n\t\t\treturn ::p[x.id].id < ::p[y.id].id;\n\t\t}\n\t\t// \u6ce8\u610f\uff1a\u4e0d\u4ec5\u8981\u6309\u7167\u8ddd\u79bb\u6392\u5e8f\uff0c\u8ddd\u79bb\u76f8\u7b49\u65f6\u8fd8\u8981\u8003\u8651\u6700\u539f\u59cb\u7684\u7f16\u53f7\u5927\u5c0f\n\t};\n\n\tnode p[MAXN << 2];\n```\n\n\u7ebf\u6bb5\u6811\u4e5f\u5c01\u88c5\u7ed3\u6784\u4f53\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7684 `pushup` \u51fd\u6570\u5c31\u53ef\u4ee5\u76f4\u63a5\u53d6 $\\min$ \u62f7\u8d1d\u4e86\u3002\n\n```cpp\n\tvoid pushup(int k) {\n\t\tp[k] = std::min(p[lc(k)],p[rc(k)]);\n\t}\n```\n\n\u5173\u4e8e\u5efa\u6811\uff0c\u6253\u6807\u8bb0\uff0c\u4e0b\u4f20\u4e4b\u7c7b\uff0c\u90fd\u662f\u5728 `tag` \u7ed3\u6784\u4f53\u7684\u57fa\u7840\u4e0a\u8fd0\u884c\u7684\uff1a\n\n```cpp\n\tstruct tag\n\t{\n\t\tint dis, tar;\n\t\ttag() {}\n\t\ttag(int _dis,int _tar) :\n\t\t\tdis(_dis), tar(_tar) {}\n\t};\n\n\ttag t[MAXN << 2];\n```\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f `upset`,\u56e0\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u53ea\u80fd\u53d6\u51fa\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u53d6\u51fa\u7684\u7ed3\u70b9 `dis` \u8bbe\u4e3a `INF`,\u7136\u540e `pushup`\uff0c\u60f3\u5f53\u4e8e\u4f5c\u4e86\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u3002\n\n```cpp\n\tvoid upset(int k,int l,int r,int x) {\n\t\tif(l == r) {\n\t\t\tp[k].dis = INF;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tpushdown(k);\n\t\tif(x <= mid) upset(lc(k),l,mid,x);\n\t\telse upset(rc(k),mid + 1,r,x);\n\t\tpushup(k);\n\t}\n```\n\n\u7136\u540e\u5c31\u5dee\u4e0d\u591a\u8fd9\u6837\u4e86\u3002\n\n---\n\n#### 4.\u4fee\u6539\n\n\u8fd9\u91cc\u4e3b\u8981\u6307\u67e5\u8be2\u4e4b\u540e\u7684\u627e\u51fa\u5f71\u54cd\u533a\u95f4\u3002\n\n\u662f\u672c\u9898\u4e2d\u4ee3\u7801\u5b9e\u73b0\u6700\u4e3a\u590d\u6742\uff0c\u6700\u5bb9\u6613\u51fa\u9519\u7684\u5730\u65b9\u3002\n\n\u5148\u4e0a\u4ee3\u7801:\n\n```cpp\nvoid Modify1(int l,int r,Segment_Tree::tag tag) {\n\tint k1 = std::upper_bound(p + 1,p + end,Person(0,l,0,0,0)) - p;\n\tint k2 = std::upper_bound(p + 1,p + end,Person(0,r,0,0,0)) - p - 1;\n\tif(l > r) {\n\t\tif(k1 < end) t.update(1,1,n,k1,end - 1,tag);\n\t\tif(k2 >= 1) t.update(1,1,n,1,k2,tag);\n\t} else if(k1 <= k2) t.update(1,1,n,k1,k2,tag);\n}\n\nvoid Modify2(int l,int r,Segment_Tree::tag tag) {\n\tint k1 = std::lower_bound(p + end,p + 1 + n,Person(1,l,0,0,0)) - p;\n\tint k2 = std::lower_bound(p + end,p + 1 + n,Person(1,r,0,0,0)) - p - 1;\n\tif(l > r) {\n\t\tif(k1 <= n) t.update(1,1,n,k1,n,tag);\n\t\tif(k2 >= end) t.update(1,1,n,end,k2,tag);\n\t} else if(k1 <= k2) t.update(1,1,n,k1,k2,tag);\n}\n// int main() {\n// for(int i = 1;i <= n;i++) {\n\t\tif(!--lim[tar]) {\n\t\t\tModify1(a[c.pre(tar)],a[tar],Segment_Tree::tag((a[c.nxt(tar)] - a[tar] + l) % l,c.nxt(tar)));\n\t\t\tModify2(a[tar],a[c.nxt(tar)],Segment_Tree::tag((a[tar] - a[c.pre(tar)] + l) % l,c.pre(tar)));\n\t\t\tc.del(tar); // \u5207\u8bb0\u5728\u94fe\u8868\u4e2d\u5220\u9664\u8be5\u51fa\u53e3\n\t\t\tif(++usdup == m) break;// \u5982\u679c\u51fa\u53e3\u7528\u5c3d\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n\t\t}\n```\n\n\u5927\u7565\u6765\u8bf4\uff0c\u987a\u65f6\u9488\u7684 `Modify1` \u5904\u7406\uff0c\u9006\u65f6\u9488\u7684 `Modify2` \u5904\u7406\u3002\n\n`k1`,`k2` \u5728 `Person` \u6570\u7ec4\u7684 $[1,end)$ \u6216 $[end,n]$ \u4e0a\u8fdb\u884c `lower_bound` \u6216 `upper_bound`\uff0c\u8868\u793a\u5c06\u8981\u4fee\u6539 $[k1,k2]$ \u7684\u533a\u95f4\u3002\n\n\u5982\u679c\u533a\u95f4\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\uff0c\u5219\u8bf4\u660e\u8de8\u8d8a\u4e86\u539f\u70b9 $0$\uff0c\u9700\u8981\u62c6\u5f00\u4e24\u6bb5\u5904\u7406\u3002\n\n**\u5224\u65ad\u533a\u95f4\u662f\u5426\u5b58\u5728\u540e**\uff08\u56e0\u4e3a\u5982\u679c\u4fee\u6539\u533a\u95f4 $k1 > k2$\uff0c\u4f1a\u51fa\u73b0\u65e0\u6cd5\u9884\u6599\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u4f7f\u7528 `lower_bound` \u548c `upper_bound` \u7684\u91cd\u70b9\uff09\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\n\n\u8fd9\u8fb9\u5927\u6982\u4e5f\u65e0\u6cd5\u66f4\u52a0\u7ec6\u81f4\u5730\u8bb2\u4e86\u3002\u6574\u7406\u51fa\u5751\u70b9\u5982\u4e0b\uff1a\n\n1. `lower_bound` \u4e0e `upper_bound` \u7684\u4f7f\u7528\u4e0e\u662f\u5426 $-1$\uff1b\n2. \u53f3\u7aef\u70b9\u662f $n$ \u8fd8\u662f $end - 1$:\n3. \u4e00\u4e2a\u4eba\u6b63\u597d\u5728\u51fa\u53e3\u7684\u4f4d\u7f6e\uff0c\u5c31\u5f97\u4ece\u90a3\u4e2a\u51fa\u53e3\u51fa\u53bb\uff0c\u9700\u8981\u6ce8\u610f\u5b83\u662f\u5426\u5728\u4fee\u6539\u8303\u56f4\u5185\u3002\n\n\u4e8e\u662f\u5c31\u662f\u8fd9\u4e48\u9ebb\u70e6\u7684\u4e86\u3002\n\n---\n\n#### 5.\u603b\u7ed3:\n\n\u8fd9\u9898\u5982\u679c\u5199\u51fa\u6765\uff0c\u53ef\u80fd\u9700\u8981\u8017\u8d39\u4e00\u4e9b\u7cbe\u529b\uff1b\u4f46\u662f\u5e0c\u671b\u5927\u5bb6\u4e00\u5b9a\u4e0d\u80fd\u4e2d\u9014\u653e\u5f03\uff08\u50cf\u6211\u505a\u9898\u4e00\u6837\uff09\uff0c**\u591a\u5bf9\u62cd\uff0c\u591a\u4e0a `gdb` \u8c03\u8bd5**\u3002\u672c\u4eba\u5c31\u505a\u4e86 $3-4$ \u5929\u3002\u5f53\u7136\u5927\u795e\u534a\u5929\u90fd\u4e0d\u6d88\u7f62\u3002\n\n\u5e38\u89c1\u5751\u70b9\u5982\u5f00 `long long` \u4e5f\u8d58\u8ff0\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n\ntypedef long long ll;\nconst int MAXN = 200011;\nconst int INF = 0x3f3f3f3f;\n\ninline int read() {\n\tint x = 0; char ch = getchar();\n\twhile(ch > '9' || ch < '0') ch = getchar();\n\tdo x = x * 10 + ch - 48, ch = getchar(); while(ch >= '0' && ch <= '9');\n\treturn x;\n}\n\nint n, m, l, end;\nint a[MAXN], lim[MAXN];\n\nstruct Person\n{\n\tint s,b,id,tar,dis;\n\tPerson() {}\n\tPerson(int _s,int _b,int _id,int _tar,int _dis) :\n\t\ts(_s), b(_b), id(_id), tar(_tar), dis(_dis) {} \n\tfriend bool operator < (const Person &x,const Person &y) {\n\t\tif(x.s != y.s) return x.s < y.s;\n\t\treturn x.b < y.b;\n\t}\n};\n\nstruct Chain\n{\n\tint l[MAXN],r[MAXN];\n\tvoid init() {\n\t\tfor(int i = 1;i <= m;i++) {\n\t\t\tl[i] = i - 1;\n\t\t\tr[i] = i + 1;\n\t\t}\n\t\tl[1] = m, r[m] = 1;\n\t}\n\tint pre(int x) {\n\t\treturn l[x];\n\t}\n\tint nxt(int x) {\n\t\treturn r[x];\n\t}\n\tvoid del(int x) {\n\t\tr[l[x]] = r[x];\n\t\tl[r[x]] = l[x];\n\t}\n};\n\nPerson p[MAXN];\nChain c;\n\nstruct Segment_Tree\n{\n#define lc(k) k << 1\n#define rc(k) k << 1 | 1\n\tstruct node\n\t{\n\t\tint id,dis,tar;\n\t\tnode() {}\n\t\tnode(int _id,int _dis,int _tar) :\n\t\t\tid(_id), dis(_dis), tar(_tar) {}\n\t\tfriend bool operator < (const node &x,const node &y) {\n\t\t\tif(x.dis != y.dis) return x.dis < y.dis;\n\t\t\treturn ::p[x.id].id < ::p[y.id].id;\n\t\t}\n\t};\n\t\n\tstruct tag\n\t{\n\t\tint dis, tar;\n\t\ttag() {}\n\t\ttag(int _dis,int _tar) :\n\t\t\tdis(_dis), tar(_tar) {}\n\t};\n\n\tnode p[MAXN << 2];\n\ttag t[MAXN << 2];\n\n\tvoid pushdown(int k) {\n\t\tif(!t[k].dis && !t[k].tar) return;\n\t\tperform(lc(k),t[k]);\n\t\tperform(rc(k),t[k]);\n\t\tt[k].dis = t[k].tar = 0;\n\t\treturn;\n\t}\n\t\n\tvoid pushup(int k) {\n\t\tp[k] = std::min(p[lc(k)],p[rc(k)]);\n\t}\n\n\tvoid perform(int k,tag x) {\n\t\tp[k].dis += x.dis;\n\t\tif(x.tar) p[k].tar = x.tar;\n\t\tt[k].dis += x.dis;\n\t\tif(x.tar) t[k].tar = x.tar;\n\t\treturn;\n\t}\n\n\tvoid build(int k,int l,int r) {\n\t\tif(l == r) {\n\t\t\tp[k] = node(l,::p[l].dis,::p[l].tar);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(lc(k),l,mid);\n\t\tbuild(rc(k),mid + 1,r);\n\t\tpushup(k);\n\t}\n\t\n\tvoid update(int k,int l,int r,int x,int y,tag v) {\n\t\tif(l > y || r < x) return;\n\t\tif(l >= x && r <= y) {\n\t\t\tperform(k,v);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tpushdown(k);\n\t\tupdate(lc(k),l,mid,x,y,v);\n\t\tupdate(rc(k),mid + 1,r,x,y,v);\n\t\tpushup(k);\n\t\treturn;\n\t}\n\n\tvoid upset(int k,int l,int r,int x) {\n\t\tif(l == r) {\n\t\t\tp[k].dis = INF;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tpushdown(k);\n\t\tif(x <= mid) upset(lc(k),l,mid,x);\n\t\telse upset(rc(k),mid + 1,r,x);\n\t\tpushup(k);\n\t}\n\n\tnode query() {\n\t\treturn p[1];\n\t}\n};\n\nSegment_Tree t;\n\nvoid init() {\n\tfor(int i = 1;i <= n;i++) {\n\t\tif(!p[i].s) {\n\t\t\tint k = std::lower_bound(a + 1,a + 1 + m,p[i].b) - a - 1;\n\t\t\tif(k == m) p[i].tar = 1, p[i].dis = l - p[i].b;\n\t\t\telse p[i].tar = k + 1, p[i].dis = a[k + 1] - p[i].b; \n\t\t} else {\n\t\t\tint k = std::upper_bound(a + 1,a + 1 + m,p[i].b) - a - 1;\n\t\t\tp[i].tar = k, p[i].dis = p[i].b - a[k];\n\t\t}\n\t}\n\treturn;\n}\n\nvoid Modify1(int l,int r,Segment_Tree::tag tag) {\n\tint k1 = std::upper_bound(p + 1,p + end,Person(0,l,0,0,0)) - p;\n\tint k2 = std::upper_bound(p + 1,p + end,Person(0,r,0,0,0)) - p - 1;\n\tif(l > r) {\n\t\tif(k1 < end) t.update(1,1,n,k1,end - 1,tag);\n\t\tif(k2 >= 1) t.update(1,1,n,1,k2,tag);\n\t} else if(k1 <= k2) t.update(1,1,n,k1,k2,tag);\n}\n\nvoid Modify2(int l,int r,Segment_Tree::tag tag) {\n\tint k1 = std::lower_bound(p + end,p + 1 + n,Person(1,l,0,0,0)) - p;\n\tint k2 = std::lower_bound(p + end,p + 1 + n,Person(1,r,0,0,0)) - p - 1;\n\tif(l > r) {\n\t\tif(k1 <= n) t.update(1,1,n,k1,n,tag);\n\t\tif(k2 >= end) t.update(1,1,n,end,k2,tag);\n\t} else if(k1 <= k2) t.update(1,1,n,k1,k2,tag);\n}\n\nint main() {\n\tn = read(), m = read(), l = read();\n\tfor(int i = 2;i <= m;i++) a[i] = read();\n\tfor(int i = 1;i <= m;i++) lim[i] = read();\n\tfor(int i = 1;i <= n;i++) {\n\t\tp[i].s = read(), p[i].b = read();\n\t\tp[i].id = i;\n\t}\n\tstd::sort(p + 1, p + 1 + n);\n\twhile(end <= n && !p[end].s) end++;\n\tinit();\n\tt.build(1,1,n);\n\tc.init();\n\tll ans = 0; int usdup = 0;\n\tfor(int i = 1;i <= n;i++) {\n\t\tSegment_Tree::node k = t.query();\n\t\tint id = k.id,tar = k.tar;\n\t\tans ^= 1ll * p[id].id * tar;\n\t\t//std::printf(\"node = %d target = %d\\n\",p[id].id,tar);\n\t\tt.upset(1,1,n,id);\n\t\tif(!--lim[tar]) {\n\t\t\tModify1(a[c.pre(tar)],a[tar],Segment_Tree::tag((a[c.nxt(tar)] - a[tar] + l) % l,c.nxt(tar)));\n\t\t\tModify2(a[tar],a[c.nxt(tar)],Segment_Tree::tag((a[tar] - a[c.pre(tar)] + l) % l,c.pre(tar)));\n\t\t\tc.del(tar);\n\t\t\tif(++usdup == m) break;\n\t\t}\n\t}\n\tstd::printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1588044562,
        "uid": 219595,
        "name": "Vocalise",
        "ccfLevel": 9,
        "title": "\u7ebf\u6bb5\u6811--\u9898\u89e3 P5688 \u3010[CSP-SJX2019]\u6563\u6b65\u3011"
    },
    {
        "content": "[\u5e7f\u544a\uff1a\u849f\u84bb\u7684\u535a\u5ba2](https://www.cnblogs.com/newbielyx/p/12039885.html)\n\n# Description\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5688)\n\n# Solution\n\n## \u7b97\u6cd51 32pts\n\n\u679a\u4e3e\u6bcf\u4e2a\u65f6\u523b\uff0c\u5e76\u679a\u4e3e\u6240\u6709\u53d1\u751f\u7684\u65f6\u95f4\uff0c\u66b4\u529b\u8fdb\u884c\u66f4\u65b0\u3002\u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u679a\u4e3e\u5230\u7b2c\n$L$\u4e2a\u65f6\u523b\uff0c\u56e0\u4e3a\u662f\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6700\u591a\u5230\u7b2cL\u4e2a\u65f6\u523b\uff0c\u6240\u6709\u4eba\u5c31\u4f1a\u56de\u5230\u539f\u4f4d\u3002\n\n## \u7b97\u6cd52 52pts\n\n\u53d1\u73b0\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u6ca1\u6709\u5fc5\u8981\u679a\u4e3e\u6bcf\u4e2a\u65f6\u523b\uff0c\u56e0\u4e3a\u5f88\u591a\u65f6\u523b\u90fd\u662f\u6ca1\u6709\u4efb\u4f55\u4e8b\u4ef6\u53d1\u751f\u7684\u3002\u5bb9\u6613\u60f3\u5230\u5148\u9884\u5904\u7406\u51fa\u8ddd\u79bb\u6bcf\u4e2a\u4eba\u6700\u8fd1\u7684\u51fa\u53e3\uff0c\u4ee5\u53ca\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u6bcf\u6b21\u53d6**\u5230\u51fa\u53e3\u8ddd\u79bb\u6700\u5c0f**\u7684\u4eba\uff0c\u5fc5\u5b9a\u4ece\u90a3\u4e2a\u51fa\u53e3\u51fa\u53bb\u3002\n\n\u8bbe$rest_i$\u8868\u793a\u6bcf\u4e2a\u51fa\u53e3\u5269\u4f59\u53ef\u4ee5\u901a\u8fc7\u7684\u4eba\u6570\uff0c\u5f53\u4e00\u4e2a\u4eba\u4ece\u67d0\u4e2a\u51fa\u53e3$i$\u51fa\u53bb\u540e\uff0c\u5219$rest_i-1$\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u51fa\u53e3\u7684$rest_i=0$\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fa\u53e3\u5c31\u6ca1\u6709\u4e86\u5b58\u5728\u7684\u610f\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u6389\u3002\n\n\u4e0d\u96be\u60f3\u5230\u901a\u8fc7\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u6bcf\u4e2a\u51fa\u53e3\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u6211\u8fd9\u91cc\u7528\u7684\u662f\u73af\u72b6\u94fe\u8868\uff0c\u5f53\u7136\u673a\u623f\u5927\u4f6c\u4e5f\u6709\u7528\u5e76\u67e5\u96c6\u4ee5\u53ca$set$\u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u51fa\u53e3\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5206\u522b\u8bb0\u4e3a$lst_i$\u548c$nxt_i$\n\n\u8003\u8651\u5f53\u4e00\u4e2a\u4eba\u4ece\u51fa\u53e3$i$\u51fa\u53bb\u540e\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u539f\u672c\u8981\u4ece$i$\u51fa\u53bb\u7684\u4eba\uff0c\u9006\u65f6\u9488\u8d70\u7684\u4eba\u7684\u51fa\u53e3\u90fd\u53d8\u6210\u4e86$nxt_i$\uff0c\u987a\u65f6\u9488\u8d70\u7684\u4eba\u7684\u51fa\u53e3\u90fd\u53d8\u6210\u4e86$lst_i$\u3002\n\n\u4e8e\u662f\u5f97\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u7528\u5806\u7ef4\u62a4\u6bcf\u4e2a\u4eba\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u51fa\u53e3\u7684\u8ddd\u79bb\u548c\u7f16\u53f7\uff0c\u5806\u91cc\u4ee5\u8ddd\u79bb\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u4eba\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u3002\u82e5\u5f53\u524d\u8bb0\u5f55\u7684\u51fa\u53e3\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u5c31\u5c06\u5173\u4e8e\u8fd9\u4e2a\u4eba\u7684\u65b0\u7684\u51fa\u53e3\u3001\u8ddd\u79bb\u4fe1\u606f\u63d2\u5165\u5230\u5806\u4e2d\uff1b\u5426\u5219\u5c06\u8fd9\u4e2a\u4eba\u8ba1\u5165\u5230\u7b54\u6848\u7684\u8d21\u732e\u4e2d\uff0c\u5e76\u66f4\u65b0\u51fa\u53e3\u662f\u5426\u88ab\u5220\u9664\u4ee5\u53ca\u524d\u9a71$lst_i$\u548c\u540e\u7ee7$nxt_i$\u7684\u76f8\u5173\u4fe1\u606f\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u6700\u574f\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u88ab\u63d2\u5165\u5806\u4e2d$n$\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n^2\\log n)$\n\n## \u7b97\u6cd53 100pts\n\n\u8003\u8651\u4f18\u5316\u7b97\u6cd52\uff0c\u53d1\u73b0\u4e3b\u8981\u7684\u65f6\u95f4\u90fd\u82b1\u8d39\u5728\u66f4\u65b0\u6bcf\u4e2a\u4eba\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u4fe1\u606f\u4e0a\n\n\u8bb0\u51fa\u53e3$i$\u7684\u4f4d\u7f6e\u4e3a$pos_i$\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u4e00\u4e2a\u51fa\u53e3\u88ab\u5220\u9664\u540e\uff0c\u90a3\u4e48\u6240\u6709\u4f4d\u7f6e\u5728$(pos_{lst_i},pos_{i}]$\u4e4b\u95f4\u4e14\u9006\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u5176\u51fa\u53e3\u90fd\u53d8\u6210\u4e86$nxt_i$\uff0c\u4e14\u8ddd\u79bb\u7684\u589e\u91cf\u90fd\u662f$pos_{nxt_i}-pos_i$\uff1b\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u6240\u6709\u4f4d\u7f6e\u5728$[pos_i, pos_{nxt_i})$\u4e4b\u95f4\u7684\u4e14\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u5176\u51fa\u53e3\u90fd\u53d8\u6210\u4e86$lst_i$\uff0c\u4e14\u8ddd\u79bb\u7684\u589e\u91cf\u90fd\u662f$pos_i-pos_{lst_i}$\n\n\u4e8e\u662f\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u5177\u4f53\u5b9e\u73b0\u4e3a\uff1a\u5728\u7b97\u6cd52\u7684\u57fa\u7840\u4e0a\uff0c\u4ee5\u6bcf\u4e2a\u4eba\u7684\u4f4d\u7f6e\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u539f\u6765\u53d6\u5806\u9876\u7684\u64cd\u4f5c\u6539\u6210\u67e5\u8be2\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\uff0c\u800c\u8ddd\u79bb\u7684\u66f4\u65b0\u5219\u5148\u7528\u4e8c\u5206\u67e5\u627e\u67e5\u627e\u51fa\u9700\u8981\u66f4\u65b0\u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\uff0c\u5e76\u6309\u7167\u4e0a\u8ff0\u8fc7\u7a0b\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u533a\u5206\u9006\u65f6\u9488\u987a\u65f6\u9488\u884c\u8d70\u7684\u4eba\uff0c\u65e2\u53ef\u4ee5\u5efa\u7acb\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e5f\u53ef\u4ee5\u5728\u6309\u6bcf\u4e2a\u4eba\u7684\u4f4d\u7f6e\u4e3a\u5173\u952e\u5b57\u4e4b\u524d\u5148\u6309\u627e\u884c\u8d70\u65b9\u5411\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u7ebf\u6bb5\u6811\u4e00\u5206\u4e3a\u4e8c\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u7ec6\u8282\u4ee5\u53ca\u6280\u5de7\u53ef\u4ee5\u53c2\u7167\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int ty() {\n\tchar ch = getchar(); int x = 0, f = 1;\n\twhile (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); }\n\twhile (ch >= '0' && ch <= '9') { x = x * 10 + ch - '0'; ch = getchar(); }\n\treturn x * f;\n}\n\nconst int _ = 2e5 + 10;\nint n, m, L, ct1, ct2, pos[_], lim[_], nxt[_], lst[_], num[_];\n\nstruct node {\n\tint id, dir, pos, dis, tar;\n\tnode(int _id = 0, int _dir = 0, int _pos = 0, int _dis = 0, int _tar = 0) {\n\t\tid = _id, dir = _dir, pos = _pos, dis = _dis, tar = _tar;\n\t}\n\tbool operator<(const node &rhs) const {\n\t\tif (dir == rhs.dir) return pos < rhs.pos;\n\t\treturn dir < rhs.dir;\n\t}\n} sta[_];\n\n#define ls (p << 1)\n#define rs (p << 1 | 1)\n#define mid ((l + r) >> 1)\n\nstruct data {\n\tint dis, tar, id;\n\tdata(int _dis = 0, int _tar = 0, int _id = 0) {\n\t\tdis = _dis, tar = _tar, id = _id;\n\t}\n\tbool operator<(const data &rhs) const {\n\t\tif (dis == rhs.dis) return id < rhs.id;\n\t\treturn dis < rhs.dis;\n\t}\n};\n\nstruct TAG {\n\tint dis, tar;\n\tTAG(int _dis = 0, int _tar = 0) { dis = _dis, tar = _tar; }\n\tTAG& operator+=(const TAG &rhs) {\n\t\tdis += rhs.dis;\n\t\tif (rhs.tar) tar = rhs.tar;\n\t\treturn *this;\n\t}\n};\n\nstruct SegmentTree {\n\tdata val[_ << 2];\n\tTAG tag[_ << 2];\n\tvoid add(int p, TAG x) {\n\t\tval[p].dis += x.dis;\n\t\tif (x.tar) val[p].tar = x.tar;\n\t\ttag[p] += x;\n\t}\n\tvoid down(int p) {\n\t\tif (tag[p].dis || tag[p].tar) {\n\t\t\tadd(ls, tag[p]);\n\t\t\tadd(rs, tag[p]);\n\t\t\ttag[p] = TAG(0, 0);\n\t\t}\n\t}\n\tvoid up(int p) { val[p] = min(val[ls], val[rs]); }\n\tvoid build(int p, int l, int r) {\n\t\tif (l == r) {\n\t\t\tval[p] = data(sta[l].dis, sta[l].tar, sta[l].id);\n\t\t\treturn;\n\t\t}\n\t\tbuild(ls, l, mid);\n\t\tbuild(rs, mid + 1, r);\n\t\tup(p);\n\t}\n\tdata query(int p, int l, int r, int x, int y) {\n\t\tif (x <= l && r <= y) return val[p];\n\t\tdown(p);\n\t\tif (y <= mid) return query(ls, l, mid, x, y);\n\t\telse if (x > mid) return query(rs, mid + 1, r, x, y);\n\t\telse return min(query(ls, l, mid, x, mid), query(rs, mid + 1, r, mid + 1, y));\n\t}\n\tvoid change(int p, int l, int r, int x) {\n\t\tif (l == r) {\n\t\t\tval[p].dis = 0x3f3f3f3f;\n\t\t\treturn;\n\t\t}\n\t\tdown(p);\n\t\tif (x <= mid) change(ls, l, mid, x);\n\t\telse change(rs, mid + 1, r, x);\n\t\tup(p);\n\t}\n\tvoid modify(int p, int l, int r, int x, int y, TAG z) {\n\t\tif (x <= l && r <= y) {\n\t\t\tadd(p, z);\n\t\t\treturn;\n\t\t}\n\t\tdown(p);\t\n\t\tif (y <= mid) modify(ls, l, mid, x, y, z);\n\t\telse if (x > mid) modify(rs, mid + 1, r, x, y, z);\n\t\telse modify(ls, l, mid, x, mid, z), modify(rs, mid + 1, r, mid + 1, y, z);\n\t\tup(p);\n\t}\n} tr;\n\n#undef ls\n#undef rs\n#undef mid\n\ninline int getdis(int x, int y, int dir) {\n\tif (dir == 0) {\n\t\tif (pos[x] < pos[y]) return pos[y] - pos[x];\n\t\telse return L - pos[x] + pos[y];\n\t} else {\n\t\tif (pos[x] > pos[y]) return pos[x] - pos[y];\n\t\telse return pos[x] + L - pos[y];\n\t}\n}\n\ninline bool judge(int x, int y, int l, int r) {\n\treturn sta[x].pos >= l && sta[x].pos <= r && sta[y].pos >= l && sta[y].pos <= r;\n}\n\ninline void modify(int l, int r, int dis, int tar, int dir) {\n\tnode tmp;\n\tint L = (dir == 0) ? 1 : ct1 + 1;\n\tint R = (dir == 0) ? ct1 + 1 : n + 1;\n\ttmp.dir = dir, tmp.pos = l;\n\tint st = lower_bound(sta + L, sta + R, tmp) - sta;\n\ttmp.pos = r;\n\tint ed = upper_bound(sta + L, sta + R, tmp) - sta - 1;\n\tif (judge(st, ed, l, r))\n\t\ttr.modify(1, 1, n, st, ed, TAG(dis, tar));\n}\n\ninline void update1(int l, int r, int dis, int tar, int dir) {\n\tif (l > r) {\n\t\tmodify(l + 1, L, dis, tar, dir);\n\t\tmodify(0, r, dis, tar, dir);\n\t} else modify(l + 1, r, dis, tar, dir);\n}\n\ninline void update2(int l, int r, int dis, int tar, int dir) {\n\tif (l > r) {\n\t\tmodify(l, L, dis, tar, dir);\n\t\tmodify(0, r - 1, dis, tar, dir);\n\t} else modify(l, r - 1, dis, tar, dir);\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"walk.in\", \"r\", stdin);\n\tfreopen(\"walk.out\", \"w\", stdout);\n#endif\n\tn = ty(), m = ty(), L = ty();\n\tpos[1] = 0, lst[1] = m, nxt[1] = 2;\n\tfor (int i = 2; i <= m; ++i) {\n\t\tpos[i] = ty();\n\t\tnxt[i] = i == m ? 1 : i + 1;\n\t\tlst[i] = i - 1;\n\t}\n\tfor (int i = 1; i <= m; ++i) lim[i] = ty();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint s = ty(), b = ty(), d, t;\n\t\tif (s == 0) {\n\t\t\t++ct1;\n\t\t\tt = lower_bound(pos + 1, pos + m + 1, b) - pos;\n\t\t\tif (t > m) t = 1, d = L - b;\n\t\t\telse d = pos[t] - b;\n\t\t} else {\n\t\t\t++ct2;\n\t\t\tt = upper_bound(pos + 1, pos + m + 1, b) - pos;\n\t\t\t--t;\n\t\t\td = b - pos[t];\n\t\t}\n\t\tsta[i] = node(i, s, b, d, t);\n\t}\n\tsort(sta + 1, sta + n + 1);\n\n\tfor (int i = 1; i <= n; ++i) num[sta[i].id] = i;\n\ttr.build(1, 1, n);\n\tint out = m, pp = n;\n\tlong long ans = 0;\n\twhile (out && pp) {\n\t\tdata x = tr.query(1, 1, n, 1, n);\n\t\tint id = x.id, tar = x.tar;\n\t\ttr.change(1, 1, n, num[id]);\n\t\tans ^= (1ll * id * tar);\n\t\t--pp, --lim[tar];\n\t\tif (!lim[tar]) {\n\t\t\tint l = pos[lst[tar]] % L, r = pos[nxt[tar]] % L, now = pos[tar] % L;\n\n\t\t\tupdate1(l, now, getdis(tar, nxt[tar], 0), nxt[tar], 0);\n\t\t\tupdate2(now, r, getdis(tar, lst[tar], 1), lst[tar], 1);\n\n\t\t\tnxt[lst[tar]] = nxt[tar];\n\t\t\tlst[nxt[tar]] = lst[tar];\n\t\t\t--out;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1576309782,
        "uid": 49777,
        "name": "kkkstra",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5688 \u3010[CSP-SJX2019]\u6563\u6b65\u3010\u6c11\u95f4\u6570\u636e\u3011\u3011"
    },
    {
        "content": "\u770b\u5230AC\u533a\u6e05\u4e00\u8272\u7684\u7ebf\u6bb5\u6811\u2026\u2026\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u5806+\u94fe\u8868\u7684\u505a\u6cd5\u3002\n\n\u57fa\u672c\u601d\u8def\u662f\u5dee\u4e0d\u591a\u7684\uff08\u53ef\u4ee5\u53c2\u8003\u5176\u5b83\u9898\u89e3\uff09\uff0c\u6bcf\u6b21\u627e\u5230\u8ddd\u79bb\u4ed6\u53ef\u5230\u51fa\u53e3\u6700\u8fd1\u7684\u4eba\uff0c\u5220\u9664\u8fd9\u4e2a\u4eba\uff0c\u66f4\u65b0\u7b54\u6848\u548c\u51fa\u53e3\u3002\n\n\u5173\u952e\u5c31\u5728\u4e8e\u600e\u4e48\u66f4\u65b0\u4e00\u6bb5\u533a\u95f4\u7684\u4eba\u5230\u4e0b\u4e00\u4e2a\u53ef\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u6bcf\u4e00\u4e2a\u4eba\u7684\u4e0b\u4e00\u4e2a\u53ef\u8fbe\u51fa\u53e3\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u4eba\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\u662f\u56fa\u5b9a\u7684\u3002\n\n\u521a\u5f00\u59cb\uff0c\u628a\u4eba\u5206\u6210\u987a\u65f6\u9488\u8d70\u548c\u9006\u65f6\u9488\u8d70\u4e24\u7ec4\uff0c\u518d\u6309\u7167\u4f4d\u4e8e\u54ea\u4e24\u4e2a\u76f8\u90bb\u51fa\u53e3\u4e4b\u95f4\u5206\u7ec4\uff0c\u8fd9\u53ef\u4ee5\u7528\u6392\u5e8f+\u6307\u9488\u626b\u63cf\u4e00\u904d\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff0c\u6309\u4eba\u5230\u4e0b\u4e00\u4e2a\u53ef\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\u4ece\u5c0f\u5230\u5927\u3001\u4ece\u5934\u5230\u5c3e\u4e32\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u90a3\u4e48\u7528\u4e00\u4e2a\u5806\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u94fe\u8868\u8868\u5934\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u53d6\u6700\u5c0f\u503c\u5220\u9664\u540e\u5c31\u5c06\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u52a0\u5165\u5806\u3002\n\n\u90a3\u4e48\uff0c\u5c31\u53ea\u5269\u4e0b\u5220\u9664\u51fa\u53e3\u4e86\u3002\u9996\u5148\uff0c\u4e5f\u662f\u628a\u51fa\u53e3\u7528\u94fe\u8868\u4e32\u8d77\u6765\uff0c\u5220\u9664\u76f4\u63a5\u5728\u94fe\u8868\u4e0a\u5220\u9664\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u5220\u9664\uff0c\u90fd\u76f8\u5f53\u4e8e\u628a\u4e24\u4e2a\u76f8\u90bb\u7684\u7ec4\u5408\u5e76\uff0c\n\u7136\u540e\u628a\u94fe\u8868\u5408\u5e76\u5e76\u7ef4\u62a4\u5230\u65b0\u7684\u51fa\u53e3\u7684\u8ddd\u79bb\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\n\n\u8bbe\u65b0\u7684\u51fa\u53e3\u8fd8\u662f\u539f\u6765\u51fa\u53e3\u7684\u7ec4\u4e3a$A$\uff0c\u65b0\u7684\u51fa\u53e3\u53d8\u4e3a$A$\u7ec4\u539f\u6765\u51fa\u53e3\u7684\u7ec4\u4e3a$B$\uff0c\u90a3\u4e48$B$\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u4eba\u5230\u65b0\u7684\u51fa\u53e3\u7684\u8ddd\u79bb\u90fd\u5927\u4e8e$A$\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u4eba\u5230\u51fa\u53e3\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u53ea\u8981\u628a$B$\u7ec4\u7684\u94fe\u8868\u8868\u5934\u76f4\u63a5\u63a5\u5230$A$\u7ec4\u8868\u5c3e\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u76f8\u5bf9\u8ddd\u79bb\u987a\u5e8f\u4e0d\u53d8\u4e86\u3002\n\n~~\u7136\u540e\uff0c\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u2026\u2026~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\uff0c\u4f46\u662f\u5e38\u6570\u5c0f\uff0c\u800c\u4e14\u6bd4\u7ebf\u6bb5\u6811\u597d\u5199\uff08~~\u7136\u800c\u4ee3\u78014k~~\uff09\uff0c\u5f88\u8f7b\u677e\u5c31\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u2026\u2026\n\nUpd\uff1a\u4fee\u6539\u4e86\u4ee3\u7801\u4e2d\u4e00\u4e9b\u9519\u8bef\uff08\u611f\u8c22@Owen_codeisking%%%\uff09\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define ll long long\n//#define cccgift\n#define lowbit(x) ((x)&-(x))\n#define rep(i,l,r) for(res i=l,_r=r;i<=_r;++i)\n#define per(i,r,l) for(res i=r,_l=l;i>=_l;--i)\n#define mkp make_pair\n#define pb push_back\n#define mem0(a) memset(a,0,sizeof(a))\n#define mem0n(a,n) memset(a,0,(n)*sizeof(a[0]))\n#define iter(x,v) for(res v,_p=head[x];v=ver[_p],_p;_p=nxt[_p])\n#ifdef cccgift //by lqh\n#define SHOW(x) cerr<<#x\"=\"<<(x)<<endl\n#else\n#define SHOW(x) 0\n#endif\n#define getchar()(ip1==ip2&&(ip2=(ip1=ibuf)+fread(ibuf,1,1<<21,stdin),ip1==ip2)?EOF:*ip1++)\nchar ibuf[1<<21],*ip1=ibuf,*ip2=ibuf;\ntemplate<typename T>\ninline void read(T &x)\n{\n    static char ch;bool f=1;\n    for(x=0,ch=getchar();!isdigit(ch);ch=getchar()) if(ch=='-') f=0;\n    for(;isdigit(ch);x=(x<<1)+(x<<3)+(ch^48),ch=getchar());x=f?x:-x;\n}\ntemplate<typename T>\nvoid print(T x)\n{\n    if (x<0) x=-x,putchar('-');\n    if (x>9) print(x/10);\n    putchar(x%10+48);\n}\ntemplate<typename T>\ninline void print(T x,char ap) {print(x);if (ap) putchar(ap);}\ntemplate<typename T>\ninline void chkmax(T &x,const T &y) {x=x<y?y:x;}\ntemplate<typename T>\ninline void chkmin(T &x,const T &y) {x=x<y?x:y;}\nstruct person{\n\tint x,id;\n\tperson() {}\n\tperson(int x,int id):x(x),id(id) {}\n\tbool operator <(const person &b)const {return x<b.x||(x==b.x&&id>b.id);}\n} b[400010],c[400010];\nstruct node{\n\tint op,id,peo,peid,val; //op:\u65b9\u5411\uff0cid:\u6240\u5c5e\u7ec4\uff0cpeo:\u4eba\u5728\u7ec4\u4e2d\u7684\u7f16\u53f7\uff0cpeid:\u4eba\u7684\u7f16\u53f7\uff0cval:\u4eba\u5230\u4e0b\u4e00\u4e2a\u53ef\u8fbe\u51fa\u53e3\u7684\u8ddd\u79bb\u3002\n\tnode() {}\n\tnode(int op,int id,int peo,int peid,int val):op(op),id(id),peo(peo),peid(peid),val(val) {}\n\tbool operator <(const node &b)const {return val>b.val||(val==b.val&&peid>b.peid);}\n};\npriority_queue<node> q; //\u5806\nint n,m,L,x,y,a[200010],cnt[200010],len1,len2,nxt[2][600010],pre[2][600010],nxt1[200010],pre1[200010];\nll tot;\ninline void ins(int op,int id,int x) { //\u52a0\u5165\u8868\u5934\n\tint now=nxt[op][id];\n\tpre[op][now]=x,nxt[op][x]=now,pre[op][x]=id,nxt[op][id]=x;\n}\ninline void del(int op,int x) {nxt[op][pre[op][x]]=nxt[op][x],pre[op][nxt[op][x]]=pre[op][x];}\ninline int getdis(int x,int y) { //\u4e24\u70b9\u4e4b\u95f4\u5728\u73af\u4e0a\u7684\u8ddd\u79bb\n\tif(x<=y) return y-x;\n\treturn L-x+y;\n}\ninline void hebing(int op,int x,int y) {\n\tint nowl=nxt[op][x+n],nowr=pre[op][n+m+x],now=pre[op][n+m+y]; //\u628anowl\u5230nowr\u8fd9\u4e00\u6bb5\u63d2\u5230y\u7684\u94fe\u8868\u8868\u5c3e\n\tif(nowl==n+m+x) return;\n\tif(now==n+y) q.push(node(op,y,nowl,(op?c[nowl].id:b[nowl].id),getdis((op?c[nowl].x:b[nowl].x),(op?(L-a[y]):a[y])))); //\u5982\u679c\u63d2\u5165y\u7684\u5806\u4e2d\u540enowl\u53d8\u6210\u8868\u5934\u4e86\uff0c\u4e5f\u8981\u52a0\u5165\u5806\u4e2d\u3002\n\tnxt[op][x+n]=n+m+x,pre[op][n+m+x]=x+n;\n\tpre[op][n+m+y]=nowr,nxt[op][nowr]=n+m+y;\n\tnxt[op][now]=nowl,pre[op][nowl]=now;\n}\nint main()\n{\n\tread(n),read(m),read(L),a[1]=0;\n\trep(i,2,m) read(a[i]);\n\trep(i,1,m) read(cnt[i]);\n\trep(i,1,n) {\n\t\tread(x),read(y);\n\t\tif(!x) b[++len1]=person(y?y:L,i);\n\t\telse c[++len2]=person(L-y,i); //b\u8868\u793a\u9006\u65f6\u9488\u7684\u4eba\uff0cc\u8868\u793a\u987a\u65f6\u9488\u7684\u4eba\u3002\n\t}\n\tsort(b+1,b+1+len1),sort(c+1,c+1+len2);\n\trep(i,1,m) nxt1[i]=i%m+1,pre1[i]=i-1;pre1[1]=m; //\u7ef4\u62a4\u51fa\u53e3\u7684\u94fe\u8868\n\trep(i,1,m) nxt[0][i+n]=nxt[1][i+n]=n+m+i,pre[0][n+m+i]=pre[1][n+m+i]=i+n; //\u8fd9\u91cc\u7ef4\u62a4\u4e86\u8868\u5934(n+1~n+m)\u548c\u8868\u5c3e(n+m+1~n+m+m)\n\tint p=1;\n\trep(i,1,len1) {\n\t\twhile(p<=m&&b[i].x>a[p]) ++p;\n\t\tif(p>m) ins(0,n+1,i);else ins(0,n+p,i);\n\t}\n\tp=m;\n\trep(i,1,len2) {\n\t\twhile(p&&c[i].x>L-a[p]) --p;\n\t\tins(1,n+p,i);\n\t} //\u6307\u9488\u626b\u63cf\n\trep(i,1,m) {\n\t\tint now1=nxt[0][n+i],now2=nxt[1][n+i];\n\t\tif(now1!=n+m+i) q.push(node(0,i,now1,b[now1].id,getdis(b[now1].x,a[i])));\n\t\tif(now2!=n+m+i) q.push(node(1,i,now2,c[now2].id,getdis(c[now2].x,L-a[i])));\n\t}\n\tint cntp=n,cntc=m;\n\twhile(cntc&&cntp) {\n\t\tnode now=q.top();\n\t\twhile(nxt[now.op][n+now.id]==n+m+now.id) q.pop(),now=q.top();q.pop(); //\u61d2\u60f0\u5220\u9664\uff0c\u56e0\u4e3a\u88ab\u5408\u5e76\u4e4b\u540e\u7684\u7ec4\u4e0d\u518d\u6709\u72ec\u7acb\u7684\u6700\u5c0f\u503c\uff0c\u9700\u8981\u5728\u5806\u4e2d\u5220\u9664\u3002\n\t\tint op=now.op,id=n+now.id;\n\t\t--cntp,--cnt[now.id],del(op,now.peo);\n\t\tint h=nxt[op][id];\n\t\tif(h!=n+m+now.id) q.push(node(op,now.id,h,(op?c[h].id:b[h].id),getdis((op?c[h].x:b[h].x),(op?(L-a[now.id]):a[now.id]))));\n\t\ttot^=(ll)now.peid*now.id;\n\t\tif(!cnt[now.id]) { //\u5220\u9664\u51fa\u53e3\n\t\t\tid-=n;\n\t\t\tif(id!=nxt1[id]) hebing(0,id,nxt1[id]),hebing(1,id,pre1[id]);\n\t\t\t--cntc,nxt1[pre1[id]]=nxt1[id],pre1[nxt1[id]]=pre1[id];\n\t\t}\n\t}\n\tprint(tot,'\\n');\n\treturn 0;\n}\n```",
        "postTime": 1602896859,
        "uid": 43697,
        "name": "chenyewei_1234",
        "ccfLevel": 7,
        "title": "P5688 [CSP-SJX2019]\u6563\u6b65"
    },
    {
        "content": "$52$ \u5206\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u628a\u6bcf\u4e00\u4e2a\u4eba\u8d70\u5230\u6bcf\u4e00\u4e2a\u51fa\u53e3\u7684\u65f6\u95f4\u5168\u90e8\u5165\u4f18\u5148\u961f\u5217\uff0c\u5728\u8003\u8651\u51fa\u53e3\u662f\u5426\u88ab\u5360\u7528\u5b8c\u7684\u60c5\u51b5\u4e0b\u4f9d\u6b21\u51fa\u961f\u5373\u53ef\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u53d1\u73b0\u4e00\u4e2a\u4eba\u8981\u662f\u5df2\u7ecf\u8d70\u4e86\uff0c\u4ed6\u540e\u9762\u7684\u90a3\u4e9b\u51fa\u53e3\u5c31\u4e0d\u7528\u5728\u5165\u961f\u4e86\u3002\u6211\u4eec\u5f00\u59cb\u628a\u6240\u6709\u4eba\uff0c\u548c\u91cc\u8fd9\u4e2a\u4eba\u7684\u6700\u8fd1\u7684\u51fa\u53e3\uff0c\u548c\u5230\u8fbe\u51fa\u53e3\u7684\u65f6\u95f4\u5f53\u505a\u4e00\u4e2a\u7ed3\u6784\u4f53\u5165\u961f\uff08\u53ef\u4ee5\u6392\u5e8f\u52a0\u6307\u9488\u83b7\u53d6\u6700\u8fd1\u7684\u51fa\u53e3\uff09\uff0c\u5982\u679c\u961f\u5934\u7684\u4eba\u4ece\u8fd9\u4e2a\u51fa\u53e3\u51fa\u53bb\u4e86\uff0c\u90a3\u4e48\u4ed6\u540e\u9762\u7684\u51fa\u53e3\u5c31\u4e0d\u7528\u5165\u961f\u4e86\uff0c\u5982\u679c\u8fd9\u4e2a\u51fa\u53e3\u5df2\u7ecf\u6ee1\u4e86\uff0c\u518d\u628a\u4e0b\u4e2a\u51fa\u53e3\u548c\u8fd9\u4e2a\u4eba\u5165\u961f\u3002\u8fd9\u6837\u5b9e\u6d4b\u80fd\u62ff\u5230 $80$ \u5206\u3002\n\n\u8fd9\u6837\u8fc7\u4e0d\u4e86\u662f\u56e0\u4e3a\u5df2\u7ecf\u8fbe\u5230\u4eba\u6570\u9650\u5236\u7684\u51fa\u53e3\u8fd8\u4f1a\u88ab\u53cd\u590d\u5165\u961f\u3002\u6211\u4eec\u5efa\u4e00\u4e2a\u94fe\u8868\uff0c\u5982\u679c\u8fbe\u5230\u4eba\u6570\u9650\u5236\u4e86\uff0c\u94fe\u8868\u524d\u540e\u4e24\u9879\u5c31\u5408\u5e76\uff0c\u4ee5\u540e\u5c31\u4e0d\u4f1a\u5165\u961f\u8fd9\u4e2a\u51fa\u53e3\u4e86\u3002\u8fd9\u6837\u5c31\u80fd\u62ff\u5230 $100pts$\u3002 \n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn = 2e5+5;\nint a[maxn];\nstruct pos{\n\tint s,b;\n\tint id;\n}p[maxn];\n\nbool cmp(pos a, pos b){\n\treturn a.b < b.b;\n} \n\nstruct sta{\n\tint id;//\u7b2c\u51e0\u4e2a\u4eba\n\tint pos;//\u5728\u54ea\u4e2a\u51fa\u53e3 \n\tint t;//\u591a\u957f\u65f6\u95f4\u5230\n\tint s;//\u65b9\u5411 0 \u9006 1 \u987a \n\tbool operator < (const sta &a) const {\n\t\tif (a.t == t) return a.id < id;\n\t\treturn a.t < t;\n\t} \n};\npriority_queue<sta> q;\n\nint up[maxn],now[maxn];\nint bel[maxn];\n\nint nxt[maxn], lst[maxn], disn[maxn], disl[maxn];\nint main(){\n//\tfreopen(\"a.in\",\"r\",stdin);\n\tint n,m,l;\n\tcin >> n >> m >> l;\n\tfor (int i = 2; i <= m; i++){\n\t\tcin >> a[i];\n\t}\n\ta[m+1] = l;\n\t\n\tfor (int i = 1; i <= m; i++){\n\t\tnxt[i] = i+1, lst[i] = i-1;\n\t\tdisn[i] = a[i+1]-a[i], disl[i] = a[i]-a[i-1];\n\t}\n\tnxt[m] = 1, lst[1] = m;\n\tdisn[m] = l-a[m], disl[1] = l-a[m];\n\t\n\t\n\tfor (int i = 1; i <= m; i++) cin >> up[i];\n\t\n\tfor (int i = 1; i <= n; i++){\n\t\tcin >> p[i].s >> p[i].b; \n\t\tp[i].id = i;\n\t}\n\t\n\tsort(p+1,p+1+n,cmp);\n\t\n\tint tot = m, id = 1;\n\tfor (int i = 1; i <= m; i++){\n\t\twhile(id <= n && p[id].b == a[i] && now[i] < up[i]){\n\t\t\tbel[p[id].id] = i;\n\t\t\tid++;\n\t\t\tnow[i]++;\n\t\t\tif (now[i] == up[i]) tot--;\n\t\t}\n\t\twhile (id <= n && p[id].b >= a[i] && p[id].b < a[i+1]){\n\t\t\tif (p[id].s){\n\t\t\t\tq.push((sta){p[id].id,i,p[id].b-a[i],1});\n\t\t\t} \n\t\t\telse{\n\t\t\t\tq.push((sta){p[id].id,nxt[i],a[i+1]-p[id].b,0});\n\t\t\t} \n\t\t\tid++;\n\t\t}\n\t}\n\t\n\t\n\t\n\twhile(tot && !q.empty()){\n\t\tsta t = q.top();\n\t\tq.pop();\n\t\tif (bel[t.id]) continue;\n\t\tif (now[t.pos] < up[t.pos]){\n\t\t\tnow[t.pos]++;\n\t\t\tbel[t.id] = t.pos;\n\t\t\tif (now[t.pos] == up[t.pos]){\n\t\t\t\tnxt[lst[t.pos]] = nxt[t.pos];\n\t\t\t\tlst[nxt[t.pos]] = lst[t.pos];\n\t\t\t\tdisn[lst[t.pos]] += disn[t.pos];\n\t\t\t\tdisl[nxt[t.pos]] += disl[t.pos];\n\t\t\t\ttot--;\n\t\t\t\tif (!tot) break;\n\t\t\t} \n\t\t}\n\t\telse{\n\t\t\tint to,w;\n\t\t\tif (t.s){\n\t\t\t\tto = lst[t.pos];\n\t\t\t\tw = disl[t.pos];\n\t\t\t} \n\t\t\telse{\n\t\t\t\tto = nxt[t.pos];\n\t\t\t\tw = disn[t.pos];\n\t\t\t}\n\t\t\tq.push((sta){t.id,to,t.t+w,t.s});\n\t\t}\n\t}\n\tlong long ans = 0;\n\tfor (int i = 1; i <= n; i++){\n\t\tans ^= (1ll*bel[i]*i);\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1654674871,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "P5688 [CSP-S2019 \u6c5f\u897f] \u6563\u6b65"
    }
]