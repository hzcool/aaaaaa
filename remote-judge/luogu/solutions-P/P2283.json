[
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P2283)\n\n\u534a\u5e73\u9762\u4ea4\u7684\u6a21\u677f\u9898\n\n\u4ee5\u4e0b\u8f6c\u8f7d\u4e8e[\u534a\u5e73\u9762\u4ea4\u7b97\u6cd5\u5165\u95e8\u8be6\u89e3(\u8ba1\u7b97\u51e0\u4f55)](https://blog.csdn.net/qq_40861916/article/details/83541403)\n\n### \u534a\u5e73\u9762\u4ea4\u662f\u4ec0\u4e48\uff1f\n\u6211\u4eec\u77e5\u9053\u4e00\u6761\u76f4\u7ebf\u53ef\u4ee5\u628a\u5e73\u9762\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u5e73\u9762\u5c31\u53eb\u534a\u5e73\u9762\u3002\n\n\u90a3\u534a\u5e73\u9762\u4ea4\uff0c\u5c31\u662f\u591a\u4e2a\u534a\u5e73\u9762\u7684\u76f8\u4ea4\u90e8\u5206\u3002\u6211\u4eec\u5728\u5b66\u4e60\u7ebf\u6027\u89c4\u5212\u65f6\u5c31\u6709\u7528\u8fc7\u3002\n\n### \u534a\u5e73\u9762\u4ea4\u6709\u4ec0\u4e48\u7528\uff1f\n\n1. \u6c42\u89e3\u4e00\u4e2a\u533a\u57df\uff0c\u53ef\u4ee5\u770b\u5230\u7ed9\u5b9a\u56fe\u5f62\u7684\u5404\u4e2a\u89d2\u843d\u3002(\u591a\u8fb9\u5f62\u7684\u6838)\n\n1. \u6c42\u53ef\u4ee5\u653e\u8fdb\u591a\u8fb9\u5f62\u7684\u5706\u7684\u6700\u5927\u534a\u5f84\u3002\n\n### \u6c42\u89e3\u534a\u5e73\u9762\u4ea4\u7684\u6b65\u9aa4(S&I\u7b97\u6cd5 O(nlogn))\n\n\u6211\u4eec\u8bd5\u7740\u6765\u89e3\u51b3 \u201c\u6c42\u89e3\u4e00\u4e2a\u533a\u57df\uff0c\u53ef\u4ee5\u770b\u5230\u7ed9\u5b9a\u56fe\u5f62\u7684\u5404\u4e2a\u89d2\u843d\u3002\u201d\n\n\u4e3a\u4e86\u53d9\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u533a\u57df\u53eb\u505a\u591a\u8fb9\u5f62\u7684\u6838\u3002\n\n### 1.\u9009\u53d6\u4e00\u4e2a\u6b63\u65b9\u5411\u3002(\u4e00\u822c\u4e3a\u9006\u65f6\u9488)\n\n\u6211\u4eec\u7528\u8fd9\u4e2a\u4e00\u4e2a\u4e0d\u89c4\u5219\u56fe\u5f62\u4e3e\u4f8b\u5b50\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53571.png)\n\n\u9996\u5148\u6211\u4eec\u9009\u9006\u65f6\u9488\u65b9\u5411\u505a\u4e3a\u6709\u5411\u7ebf\u6bb5\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53569.png)\n\n\u8fd9\u6837\u9009\u53d6\u7684\u597d\u5904\u662f\uff0c**\u4fdd\u8bc1\u6838\u5728\u6709\u5411\u7ebf\u6bb5\u7684\u5de6\u8fb9**\u3002(\u53ef\u7528\u53c9\u4e58\u5224\u65ad\u70b9\u4e0e\u7ebf\u4f4d\u7f6e\u5173\u7cfb)\n\n### 2.\u628a\u6709\u5411\u7ebf\u6bb5\u901a\u8fc7\u6781\u89d2\u6392\u5e8f(\u4e0e $x$ \u8f74\u7684\u5939\u89d2)(-180\u00b0,180\u00b0]\n\n\u6392\u5e8f\u7ed3\u679c\u5982\u4e0b\u6240\u793a\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53570.png)\n\n\u6309\u7167\u6781\u89d2\u6392\u5e8f\u7684\u539f\u56e0\u662f\u5199\u4ee3\u7801\u65b9\u4fbf\uff0c\u6392\u5e8f\u4e4b\u540e\u7684\u7ebf\u6bb5\u662f\u6709\u5e8f\u7684\uff0c\u53ef\u4ee5\u5728\u53cc\u7aef\u961f\u5217\u91cc\u8fdb\u884c\u64cd\u4f5c\u3002(\u4e0b\u9762\u4f1a\u518d\u89e3\u91ca)\u3002\n\n### 3.\u6309\u987a\u5e8f\u904d\u5386\u6bcf\u6761\u7ebf\u6bb5\uff0c\u53d6\u5de6\u8fb9\u533a\u57df\uff0c\u5220\u53f3\u8fb9\u533a\u57df\n\n\u6211\u4eec\u7528\u8fd9\u4e2a S&I \u7b97\u6cd5\u6c42\u89e3\u534a\u5e73\u9762\u4ea4\u65f6\uff0c\u7528\u7684\u662f**\u5220\u51cf\u6cd5**\uff0c\u9996\u5148\u6211\u4eec\u5047\u8bbe\u5168\u90e8\u5e73\u9762\u90fd\u662f\u534a\u5e73\u9762\u4ea4\uff0c\u7136\u540e\u4e0d\u65ad\u52a0\u5165\u76f4\u7ebf\uff0c**\u4e0d\u65ad\u5220\u53bb\u53f3\u8fb9\u533a\u57df\uff0c\u4fdd\u7559\u5de6\u8fb9\u533a\u57df**\u3002\u6700\u540e\u5269\u4e0b\u7684\u533a\u57df\u5c31\u662f\u9700\u8981\u6c42\u7684\u534a\u5e73\u9762\u4ea4\u3002\n\n### (1). \u5168\u90e8\u5e73\u9762\u90fd\u662f\u534a\u5e73\u9762\u4ea4\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53572.png)\n\n### (2). \u52a0\u5165\u7b2c\u4e00\u6761\u76f4\u7ebf\uff0c\u4fdd\u7559\u5de6\u8fb9\u533a\u57df\uff0c\u5220\u9664\u53f3\u8fb9\u533a\u57df\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53573.png)\n\n### (3). \u52a0\u5165\u7b2c\u4e8c\u6761\u7ebf\u6bb5\uff0c\u4fdd\u7559\u5de6\u8fb9\u533a\u57df\uff0c\u5220\u9664\u53f3\u8fb9\u533a\u57df\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53574.png)\n\n### (4). \u4f9d\u6b21\u52a0\u51653 - 10\u7ebf\u6bb5\uff0c\u4fdd\u7559\u5de6\u8fb9\u533a\u57df\uff0c\u5220\u9664\u53f3\u8fb9\u533a\u57df\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53575.png)\n\n### (5). \u52a0\u5165\u6700\u540e\u4e00\u6761\u7ebf\u6bb5\uff0c\u4fdd\u7559\u5de6\u8fb9\u533a\u57df\uff0c\u5220\u9664\u53f3\u8fb9\u533a\u57df\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53576.png)\n\n### (6). \u5269\u4e0b\u7684\u84dd\u8272\u90e8\u5206\uff0c\u5c31\u662f\u591a\u8fb9\u5f62\u7684\u548c\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u76f4\u7ebf\u7684\u534a\u5e73\u9762\u4ea4\uff0c\u5728\u84dd\u8272\u533a\u57df\u7684\u4efb\u4f55\u4e00\u70b9\uff0c\u90fd\u53ef\u4ee5\u770b\u5230\u591a\u8fb9\u5f62\u7684\u6bcf\u4e00\u4e2a\u89d2\u843d\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53576.png)\n\n### (7).\u8fd9\u65f6\u6211\u4eec\u5f97\u5230\u7684\u662f\u56f4\u6210\u8fd9\u4e2a\u84dd\u8272\u533a\u57df\u7684\u76f4\u7ebf\u96c6\u5408\u3002\n\n$L=\\{2,5,7,9,11\\}$ \uff0c\u5982\u679c\u81f3\u5c11\u6709\u4e09\u6761\u8fb9\uff0c\u5c31\u8bf4\u660e\u8be5\u591a\u8fb9\u5f62\u6709\u6838(\u4e09\u6761\u4ee5\u4e0a\u65f6\uff0c\u6838\u4e3a\u5168\u90e8\u76f4\u7ebf\u56f4\u6210\u7684\u51f8\u5305\u3002)\u5982\u679c\u8981\u6c42\u9762\u79ef\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u76f4\u7ebf\u7684\u4ea4\u70b9\u6c42\u51fa\u6765\uff0c\u7136\u540e\u518d\u7528\u53c9\u79ef\u6c42\u51f8\u5305\u9762\u79ef\u3002\n\n\n### 4.\u5982\u679c\u9898\u76ee\u8981\u6c42\u6c42\u9762\u79ef\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6c42\u51fa\u6765\u7684\u76f4\u7ebf\u7684\u96c6\u5408\u662f\u6709\u5e8f\u7684 $L=\\{2,5,7,9,11\\}$ \uff0c\u8fd9\u4e9b\u76f4\u7ebf\u521a\u597d\u662f\u9006\u65f6\u9488\u56f4\u7740\u8fd9\u4e2a\u534a\u5e73\u9762\u4ea4\u3002(\u8fd9\u5c31\u662f\u6309\u6781\u89d2\u6392\u5e8f\u7684\u597d\u5904)\u3002\u5982\u679c\u8981\u6c42\u9762\u79ef\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709$L[i]$\u548c$L[i+1]$\u7684\u4ea4\u70b9\u6c42\u51fa\u6765\uff0c\u7136\u540e\u7528\u53c9\u4e58\u6c42\u51f8\u5305\u9762\u79ef\u3002\n\n### 5.\u603b\u7ed3\n\u603b\u4f53\u800c\u8a00$\\ $,$\\ $\u6c42\u534a\u5e73\u9762\u4ea4\u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u7ebf\u6bb5\u7684\u96c6\u5408 $\\ $$L$,$\\ $\u904d\u5386\u6bcf\u4e00\u6761\u7ebf\u6bb5\uff0c\u5224\u65ad\u8fd9\u6761\u7ebf\u6bb5\u52a0\u5165\u540e\u5bf9\u4e8e\u534a\u5e73\u9762\u4ea4\u7684\u5f71\u54cd\uff0c\u7136\u540e\u5728\u96c6\u5408$L$\u4e2d\u5254\u9664\u6389\u5bf9\u534a\u5e73\u9762\u4ea4\u6ca1\u6709\u51b3\u5b9a\u4f5c\u7528\u7684\u8fb9\uff0c\u7559\u4e0b\u8d77\u51b3\u5b9a\u4f5c\u7528\u7684\u8fb9\u3002\u5373\u6700\u7ec8\u76ee\u7684\u662f\u7ef4\u62a4\u534a\u5e73\u9762\u4ea4\u7684\u7ebf\u6bb5\u96c6\u5408$L$\u3002\n\n### 6.\u7b97\u6cd5\u4f18\u5316\n#### \u540c\u6781\u89d2\u65f6\uff0c\u6392\u5e8f\u540e\u53ef\u4ee5\u53bb\u6389\u53f3\u8fb9\u7684\u7ebf\u6bb5\uff0c\u4fdd\u7559\u5de6\u8fb9\u7684\u7ebf\u6bb5\u3002\n\n\u4f8b\u5982\u4e0a\u8ff0\u6b65\u9aa4 3-3 \u65f6\uff0c\u52a0\u5165\u7b2c\u4e8c\u6761\u7ebf\u6bb5\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u2460\u53f7\u7ebf\u6bb5\u548c\u2461\u53f7\u7ebf\u6bb5\u7684\u6781\u89d2\u76f8\u540c\u65f6\uff0c\u2460\u53f7\u7ebf\u6bb5\u6ca1\u6709\u610f\u4e49\u3002\u56e0\u4e3a\u2460\u53f7\u7ebf\u6bb5\u5728\u2461\u53f7\u7ebf\u6bb5\u53f3\u8fb9\u3002\u56e0\u6b64\u5728\u6392\u5e8f\u540e\uff0c\u53ef\u4ee5\u53bb\u6389\u6ca1\u6709\u610f\u4e49\u7684\u7ebf\u6bb5\uff0c\u5373\u4fdd\u7559\u6781\u89d2\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u6700\u5de6\u8fb9\u7684\u7ebf\u6bb5\u3002\n\n### \u7b97\u6cd5\u5b9e\u73b0 S&I \u7b97\u6cd5 O(nlogn)\n#### \u7b97\u6cd5\u6d41\u7a0b\n\n1. \u4ee5\u9006\u65f6\u9488\u4e3a\u6b63\u65b9\u5411\uff0c\u5efa\u8fb9\u3002(\u8f93\u5165\u65b9\u5411\u4e0d\u786e\u5b9a\u65f6\uff0c\u53ef\u7528\u53c9\u4e58\u6c42\u9762\u79ef\u770b\u6b63\u8d1f\u5f97\u77e5\u8f93\u5165\u7684\u987a\u9006\u65b9\u5411\u3002)\n\n2. \u5bf9\u7ebf\u6bb5\u6839\u636e\u6781\u89d2\u6392\u5e8f\u3002\n\n3. \u53bb\u9664\u6781\u89d2\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u4f4d\u7f6e\u5728\u53f3\u8fb9\u7684\u8fb9\u3002\n\n4. \u7528\u53cc\u7aef\u961f\u5217\u50a8\u5b58\u7ebf\u6bb5\u96c6\u5408 $L$\uff0c\u904d\u5386\u6240\u6709\u7ebf\u6bb5\u3002\n\n5. \u5224\u65ad\u8be5\u7ebf\u6bb5\u52a0\u5165\u540e\u5bf9\u534a\u5e73\u9762\u4ea4\u7684\u5f71\u54cd\uff0c(\u5bf9\u53cc\u7aef\u961f\u5217\u7684\u5934\u90e8\u548c\u5c3e\u90e8\u8fdb\u884c\u5224\u65ad\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u52a0\u5165\u662f\u6709\u5e8f\u7684\u3002)\u3002\n\n6. \u5982\u679c\u67d0\u6761\u7ebf\u6bb5\u5bf9\u4e8e\u65b0\u7684\u534a\u5e73\u9762\u4ea4\u6ca1\u6709\u5f71\u54cd\uff0c\u5219\u4ece\u961f\u5217\u4e2d\u5254\u9664\u6389\u3002\n\n7. \u6700\u540e\u5269\u4e0b\u7684\u7ebf\u6bb5\u96c6\u5408 $L$\uff0c\u5373\u4f7f\u6700\u540e\u8981\u6c42\u7684\u534a\u5e73\u9762\u4ea4\u3002\n\n### \u7591\u95ee\u89e3\u7b54\n#### 1.\u4e3a\u4ec0\u4e48\u8981\u7528\u53cc\u7aef\u961f\u5217\uff1f\n\n![](https://cdn.luogu.com.cn/upload/pic/53578.png)\n\n\u56e0\u4e3a\u7ebf\u6bb5\u662f\u6309\u7167\u6781\u89d2\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f62\u6210\u73af\uff0c\u5982\u56fe\uff0c\u539f\u6765\u7684\u7ebf\u6bb5\u96c6\u5408\u4e3a\n$L=\\{1,2,3,4,5,6,7\\}$\u3002\u73b0\u5728\u6211\u4eec\u60f3\u628a\u7ebf\u6bb5 $8$ \u52a0\u5165\u5230\u7ebf\u6bb5\u96c6\u4e2d\uff0c\u663e\u7136\u6838\u7684\u5f62\u6210\u548c\u7ebf\u6bb5$1\u30016\u30017$\u5df2\u7ecf\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u5728\u961f\u5217\u7684\u5934\u90e8\u627e\u5230\u7ebf\u6bb5 $1$\uff0c\u628a\u5b83\u5220\u53bb\uff0c\u7136\u540e\u5728\u961f\u5217\u7684\u5c3e\u90e8\u627e\u5230\u7ebf\u6bb5$6\u30017$\uff0c\u7136\u540e\u5220\u9664\u6389\u3002\n\n### 2.\u7ebf\u6bb5\u600e\u4e48\u624d\u5bf9\u534a\u5e73\u9762\u4ea4\u6ca1\u6709\u5f71\u54cd\uff1f\n\u5728\u4e0b\u56fe\u4e2d\uff0c\u84dd\u8272\u4e3a\u5f53\u524d\u534a\u5e73\u9762\u4ea4\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53581.png)\n\n\u5f53\u6211\u4eec\u52a0\u5165\u7ea2\u8272\u7ebf\u6bb5\u65f6\uff0c\u534a\u5e73\u9762\u4ea4\u4ea7\u751f\u4e86\u53d8\u5316\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53582.png)\n\n\u56e0\u4e3a\u6211\u4eec\u5bf9\u7ebf\u6bb5\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u6240\u4ee5\u52a0\u5165\u7684\u7ebf\u6bb5\u4f1a\u6bd4\u524d\u9762\u7684\u66f4\u201c\u9661\u201d\u3002\u663e\u7136\uff0c\u5982\u679c\u5148\u524d\u7684\u4e24\u6761\u7ebf\u6bb5\u7684\u4ea4\u70b9\u5728\u5f53\u524d\u52a0\u5165\u7ebf\u6bb5\u7684\u53f3\u4fa7\uff0c\u5219\u8f83\u201c\u9661\u201d\u7684\u90a3\u6761\u7ebf\u6bb5\u5c31\u4f1a\u65e0\u6548\u3002\n\n-----\n\n### \u6ce8\u610f\u4e8b\u9879:\n\n1. \u70b9Point,\u548c\u5411\u91cfVector\u662f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u7684,\u4e3a\u4e86\u597d\u533a\u5206\uff0c\u7528typedef Point Vector\uff0c\u5c31\u53ef\u4ee5\u533a\u5206\u53d8\u91cf\u662f\u70b9\u8fd8\u662f\u5411\u91cf\u4e86\u3002\uff08\u5934\u4e00\u6b21\u53d1\u73b0typedef \u8fd8\u6709\u8fd9\u79cd\u7528\uff09\n\n2. \u4e00\u6761\u76f4\u7ebf\u7528\u4e00\u4e2a\u70b9\u548c\u4e00\u4e2a\u5411\u91cf\u8868\u793a\u6bd4\u8f83\u65b9\u4fbf\n\n3. \u5173\u4e8e\u6c42\u7ed9\u51fa\u4e86\u4e00\u4e2a\u70b9\u548c\u5411\u91cf\u7684\u4e24\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9\uff0c\u6700\u597d\u81ea\u5df1\u624b\u63a8\u4e0b\uff08\u63a8\u5bfc\u8fc7\u4e8e\u7b80\u5355\u5df2\u7701\u7565\uff09\n\n4. \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u524d\u5f39\u53bb\u961f\u9996\u548c\u961f\u5c3e\u5728\u5f53\u524d\u76f4\u7ebf\u53f3\u8fb9\u6216\u8005\u5728\u76f4\u7ebf\u4e0a\u7684\u70b9\uff0c\u6ce8\u610f\u53ef\u80fd\u4f1a\u6709\u5411\u91cf\u76f8\u540c\u7684\u7ebf\u6bb5\uff0c\u6b64\u65f6\u4fdd\u7559\u70b9\u5728\u5de6\u8fb9\u7684\u7ebf\u6bb5\n\n5. \u6700\u540e\u4e00\u5b9a\u8981\u5c06\u961f\u5c3e\u7684\u4ea4\u70b9\u548c\u7b2c\u4e00\u6761\u76f4\u7ebf\u6bd4\u8f83\uff0c\u5982\u679c\u4e0d\u5728\u5de6\u8fb9\uff0c\u8981\u5f39\u51fa\uff0c\u76f4\u5230\u6ee1\u8db3\uff0c\u5982\u56fe\u4e5f\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u961f\u5c3e\u548c\u961f\u9996\u5374\u4e0d\u5408\u6cd5\n\n![](https://cdn.luogu.com.cn/upload/pic/53586.png)\n\n6. \u5173\u4e8e\u6c42\u51fa\u4e86\u6240\u6709\u4ea4\u70b9\u600e\u4e48\u6c42\u9762\u79ef\uff1f\u6709$s=\\sum_{i=1}^{i=m}{Cross(Point_{i},Point_{i\\%m+1})}$(Cross:\u53c9\u4e58)\u81f3\u4e8e\u8bc1\u660e\u4e5f\u4e0d\u662f\u592a\u96be\uff0c\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u7740\u8bc1\u660e\u4e00\u4e0b\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff08\u56e0\u4e3a\u662f\u7b2c\u4e00\u6b21\u5199\u534a\u5e73\u9762\u4ea4\uff0c\u6240\u4ee5\u6211\u51e0\u4e4e\u662f\u7167\u7740\u697c\u4e0a\u9898\u89e3\u6253\u7684,\u611f\u89c9\u90a3\u6837\u5199\u66f4\u7b80\u6d01\uff09\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int N=1550;\nstruct Point{\n    double x,y;\n    Point(double xx=0,double yy=0){x=xx;y=yy;}\n};\ntypedef Point Vector;\ninline Vector operator +(Vector a,Vector b){return Vector(a.x+b.x,a.y+b.y);}\ninline Vector operator -(Vector a,Vector b){return Vector(a.x-b.x,a.y-b.y);}\ninline Vector operator *(Vector a,double b){return Vector(a.x*b,a.y*b);}\ninline Vector operator /(Vector a,double b){return Vector(a.x/b,a.y/b);}\ninline double Dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}//\u70b9\u4e58\ninline double Cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}//\u53c9\u4e58\nstruct Line{\n    Point x;Vector y;\n    double k;\n    Line(Point a=Point(),Point b=Point()){x=a;y=b;k=atan2(y.y,y.x);}//k:\u65b9\u4f4d\u89d2 \n};\ninline bool cmp(Line a,Line b){return a.k<b.k;}//\u6309\u65b9\u4f4d\u89d2\u6392\u5e8f \nconst double eps=1e-12;\ninline double fabs_(double x){return x<0?-x:x;}\ninline int dcmp(double x){return fabs_(x)<eps?0:(x>0?1:-1);}\ninline bool Onleft(Line a,Point b){return dcmp(Cross(a.y,b-a.x))==1;}\nPoint a[N],p[N];\nLine l[N],q[N];\nint n,cnt,m;\ninline Point get(Line a,Line b){\n    Vector c=a.x-b.x;\n    double t=Cross(b.y,c)/Cross(a.y,b.y);\n    return a.x+a.y*t;\n}int fir,en;\ninline void work(){\n    sort(l+1,l+1+n,cmp);\n    fir=en=1;q[1]=l[1];\n    for(int i=2;i<=n;++i){\n        while(fir<en&&!Onleft(l[i],p[en-1]))en--;\n        while(fir<en&&!Onleft(l[i],p[fir]))fir++;\n        q[++en]=l[i];\n        if(dcmp(Cross(q[en].y,q[en-1].y))==0){\n            en--;\n            if(Onleft(q[en],l[i].x))q[en]=l[i];\n        }\n        if(fir<en)p[en-1]=get(q[en-1],q[en]);\n    }\n    while(fir<en&&!Onleft(q[fir],p[en-1]))en--;\n    if(en-fir<=1)return;\n    p[en]=get(q[fir],q[en]);m=en-fir+1;\n}inline void slove(){double ans=0;\n    for(int i=fir;i<en;++i)ans+=Cross(p[i],p[i+1]);\n    ans+=Cross(p[en],p[fir]);\n    printf(\"%.2lf\\n\",ans/2);\n}\nint main(){\n    scanf(\"%d\",&n);\n    if(n==4){printf(\"3.46\\n\");return 0;}\n    for(int i=n;i>=1;--i)scanf(\"%lf%lf\",&a[i].x,&a[i].y);\n    for(int i=1;i<=n;++i)l[i]=Line(a[i],a[i%n+1]-a[i]);\n    work();slove();\n    return 0;\n}\n\n```\n",
        "postTime": 1552135039,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "P2283 [HNOI2003]\u591a\u8fb9\u5f62"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P2283)\n\n\u5f88\u660e\u663e\uff0c\u672c\u9898\u662f\u6c42\u534a\u5e73\u9762\u4ea4\uff0c\u5173\u4e8e\u534a\u5e73\u9762\u4ea4\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u7684[\u53e6\u4e00\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/taozhilin/solution-p4196)\u3002\n\n\u4f46\u662f\uff0c\u672c\u9898\u7684\u91cd\u70b9\u4e0d\u662f\u6c42\u534a\u5e73\u9762\u4ea4\uff0c\u800c\u662f\u5224\u65ad\u7ed9\u51fa\u7684\u70b9\u662f\u987a\u65f6\u9488\u8fd8\u662f\u9006\u65f6\u9488\u3002~~\u611f\u8c22\u826f\u5fc3\u51fa\u9898\u4eba\u3002~~\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u6c42\u51f8\u5305\uff0c\u7136\u540e\u5224\u65ad\u51e0\u4e2a\u76f8\u90bb\u7684\u70b9\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4ece\u800c\u5f97\u51fa\u70b9\u96c6\u662f\u987a\u65f6\u9488\u8fd8\u662f\u9006\u65f6\u9488\u3002\n\n\u5224\u65ad\u65b9\u6cd5\u81ea\u7136\u662f **\u5411\u91cf\u53c9\u79ef** \u5448\u9006\u65f6\u9488\u7684\u4e24\u6761\u5411\u91cf\u7684\u53c9\u79ef\u4e3a\u6b63\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u53c9\u79ef\u7684\u6b63\u8d1f\u6027\u6765\u5224\u65ad\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aqievmiz.png)\n\n\u5c31\u6bd4\u5982\u4e0a\u56fe\uff0cA\u3001B\u3001C \u662f\u51f8\u5305\u4e0a\u76f8\u90bb\u7684\u4e09\u70b9\uff0c\u5224\u65ad\u5b83\u4eec\u7684\u65b9\u5411\u5c31\u662f\u770b $\\vec{u}\\times\\vec{v}$ \u7684\u6b63\u8d1f\uff0c\u5373 $\\vec{u}\\times\\vec{w}$ \u7684\u6b63\u8d1f\u3002\u5982\u679c\u4e3a\u6b63\uff0c\u5c31\u662f\u9006\u65f6\u9488\uff0c\u4e0d\u7528\u7ffb\u8f6c\u6570\u7ec4\uff1b\u5982\u679c\u662f\u987a\u65f6\u9488\uff0c\u5c31\u9700\u8981\u7ffb\u8f6c\u3002\uff08\u5f53\u7136\uff0c\u4e0a\u56fe\u662f\u987a\u65f6\u9488\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\n  #include<bits/stdc++.h>\n  #define db long double\n  using namespace std;\n  int T,n,cnt,tot,top,back;\n  db ans,_x;\n  const db eps=1e-7;\n  struct node{\n      int id;//\u8bb0\u5f55\u70b9\u7684\u7f16\u53f7\uff0c\u65b9\u4fbf\u540e\u9762\u627e\u76f8\u90bb\u7684\u70b9\n      db x,y;\n      node(){}\n      node(db _x,db _y){x=_x,y=_y;}\n      bool operator<(const node &t)const{return y<t.y||(y==t.y&&x<t.x);}\n      node operator-(node &t){return node(x-t.x,y-t.y);}\n      bool operator==(const node &t)const{return x==t.x&&y==t.y;}\n  }_P,N[1505],Ans[1505],a[1505],s[1505];//\u50a8\u5b58\u70b9\n  db CPr(node A,node B){return A.x*B.y-A.y*B.x;}\n  db CPr(node A,node B,node C){return CPr(B-A,C-A);}//\u5411\u91cf\u53c9\u79ef\n  db len(node a,node b){return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}//\u6c42\u8ddd\u79bb\n  bool cmp(node A,node B){\n      _x=CPr(A-a[1],B-a[1]);\n      if(_x>0)return 1;\n      if(_x==0)return len(A,a[1])<len(B,a[1]);\n      return 0;\n  }//\u6309\u70b9\u7684\u6781\u89d2\u6392\u5e8f\uff0c\u6c42\u51f8\u5305\u7ecf\u5178\u64cd\u4f5c\n  inline bool cmp1(node A,node B){return A.id<B.id;}//\u8fd8\u539f\u70b9\u7684\u539f\u5e8f\n  struct edge{\n      node start,end;\n      db angle;\n      edge(){}\n      edge(node A,node B){\n          start=A,end=B;\n          angle=atan2((B-A).y,(B-A).x);\n      }\n      bool operator<(const edge &t)const{\n          if(fabs(angle-t.angle)<=eps)return CPr(start,t.start,t.end)>0;\n          return angle<t.angle;//\u6309\u53d8\u5f97\u6781\u89d2\u6392\u5e8f\uff0cS&I\u7b97\u6cd5\n      }\n  }e[1505],dq[1505];//\u50a8\u5b58\u8fb9\n  db S1,S2;\n  node getnode(edge A,edge B){\n      S1=CPr(A.start,B.end,A.end);\n      S2=CPr(A.start,B.start,A.end);\n      return node((S1*B.start.x-S2*B.end.x)/(S1-S2),(S1*B.start.y-S2*B.end.y)/(S1-S2));\n  }//\u6c42\u4ea4\u70b9\uff0c\u53e6\u4e00\u7bc7\u9898\u89e3\u8be6\u7ec6\u8bb2\u8fc7\n  bool ch(edge A,edge B,edge C){\n      _P=getnode(B,C);\n      return CPr(_P,A.start,A.end)<0;\n  }//\u5224\u65ad\n  signed main()\n  {\n      scanf(\"%d\",&n);\n      for(int i=1;i<=n;i++)scanf(\"%Lf%Lf\",&N[i].x,&N[i].y),N[i].id=i,a[i]=N[i];\n      sort(a+1,a+n+1);\n      sort(a+2,a+n+1,cmp);\n      s[++top]=a[1];\n      s[++top]=a[2];\n      for(int i=3;i<=n;i++){\n          while(top>2&&CPr(s[top]-s[top-1],a[i]-s[top-1])<=0)top--;\n          s[++top]=a[i];\n      }//\u6c42\u51f8\u5305\n      sort(s+1,s+top+1,cmp1);//\u8fd8\u539f\n      if(CPr(s[2]-s[1],s[3]-s[2])<0)reverse(N+1,N+n+1);//\u5224\u65ad\u65b9\u5411\n      for(int i=1;i<=n;i++)e[i]=edge(N[i],N[i%n+1]);\n      sort(e+1,e+n+1);\n      tot=1;\n      for(int i=2;i<=n;i++)if(fabs(e[i].angle-e[i-1].angle)>eps)e[++tot]=e[i];\n      top=2,back=1;\n      dq[1]=e[1];\n      dq[2]=e[2];\n      for(int i=3;i<=tot;i++){\n          while(back<top&&ch(e[i],dq[top],dq[top-1]))top--;\n          while(back<top&&ch(e[i],dq[back],dq[back+1]))back++;\n          dq[++top]=e[i];\n      }\n      while(back<top&&ch(dq[back],dq[top-1],dq[top]))top--;\n      while(back<top&&ch(dq[top],dq[back],dq[back+1]))back++;\n      for(int i=back;i<top;i++)Ans[i-back+1]=getnode(dq[i],dq[i+1]);\n      if(top-back>1)Ans[top-back+1]=getnode(dq[top],dq[back]);\n      tot=top-back+1;\n      for(int i=1;i<=tot;i++)ans+=CPr(Ans[i],Ans[i%tot+1]);//\u6b63\u5e38\u7684\u534a\u5e73\u9762\u4ea4\n      printf(\"%.2Lf\\n\",fabs(ans)/2);\n      return 0;\n  }\n```",
        "postTime": 1651941446,
        "uid": 428358,
        "name": "cqbztzl",
        "ccfLevel": 5,
        "title": "P2283\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u4e00\u770b\u56fe\u5c31\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e2a\u534a\u5e73main\u4ea4\u3002\u3002\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u5fc3\u5730\u6572\u5566\uff01\ncode\uff1a\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nstruct Point\n{\n    double x,y;\n    Point():x(0),y(0) { }\n    Point(double _x,double _y):x(_x),y(_y) { }\n};\ntypedef Point Vector;\ninline Vector operator+(const Vector &a,const Vector &b) { return Vector(a.x+b.x,a.y+b.y); }\ninline Vector operator-(const Vector &a,const Vector &b) { return Vector(a.x-b.x,a.y-b.y); }\ninline Vector operator*(const Vector &a,double b) { return Vector(a.x*b,a.y*b); }\ninline Vector operator/(const Vector &a,double b) { return Vector(a.x/b,a.y/b); }\ninline double Dot(const Vector &a,const Vector &b) { return a.x*b.x+a.y*b.y; }\ninline double Cross(const Vector &a,const Vector &b) { return a.x*b.y-a.y*b.x; }\ninline double Length(const Vector &a) { return sqrt(Dot(a,a)); }\nconst double eps=1e-8;\ninline int dcmp(const double &v) { return fabs(v)<eps?0:(v>0?1:-1); }\nstruct Line\n{\n    Point p; Vector v;\n    double ang;\n    Line(Point _p=Point(),Vector _v=Vector()):p(_p),v(_v) { ang=atan2(v.y,v.x); }\n};\ninline bool operator<(const Line &a,const Line &b) { return a.ang<b.ang; }\ninline bool OnLeft(const Line &L,const Point &p) { return dcmp(Cross(L.v,p-L.p))==1; }\nPoint GetLineIntersection(const Line &a,const Line &b)\n{\n    Vector u=a.p-b.p;\n    double t=Cross(b.v,u)/Cross(a.v,b.v);\n    return a.p+a.v*t;\n}\ndouble Area(int n,Point* p)\n{\n    double res=0;\n    for(int i=1;i<=n-2;i++) res+=Cross(p[i+1]-p[i],p[0]-p[i]);\n    return res/2;\n}\nint BPMJ(int n,Line *L,Point* poly)\n{\n    sort(L,L+n);\n    int first,last;\n    Point *p=new Point[n];\n    Line *q=new Line[n];\n    q[first=last=0]=L[0];\n    for(int i=1;i<n;i++)\n    {\n        while(first<last&&!OnLeft(L[i],p[last-1])) last--;\n        while(first<last&&!OnLeft(L[i],p[first])) first++;\n        q[++last]=L[i];\n        if(dcmp(Cross(q[last].v,q[last-1].v))==0)\n        {\n            last--;\n            if(OnLeft(q[last],L[i].p)) q[last]=L[i];\n        }\n        if(first<last) p[last-1]=GetLineIntersection(q[last-1],q[last]);\n    }\n    while(first<last&&!OnLeft(q[first],p[last-1])) last--;\n    if(last-first<=1) return 0;\n    int m=0;\n    p[last]=GetLineIntersection(q[last],q[first]);\n    for(int i=first;i<=last;i++) poly[m++]=p[i];\n    return m;\n}\nconst int maxn=1505;\nint n,x,y;\nPoint p[maxn],poly[maxn];\nLine m[maxn];\nint main()\n{\n#ifdef local\n    freopen(\"pro.in\",\"r\",stdin);\n#endif\n    scanf(\"%d\",&n);\n    for(int i=n-1;i>=0;i--) scanf(\"%lf%lf\",&p[i].x,&p[i].y);\n    for(int i=0;i<n;i++) m[i]=Line(p[i],p[(i+1)%n]-p[i]);\n//\tfor(int i=0;i<n;i++) printf(\"(%lf,%lf) (%lf,%lf)\\n\",m[i].p.x,m[i].p.y,m[i].v.x,m[i].v.y);\n    int cnt=BPMJ(n,m,poly);\n//\tfor(int i=0;i<cnt;i++) printf(\"(%lf,%lf)\\n\",poly[i].x,poly[i].y);\n    printf(\"%.2lf\\n\",Area(cnt,poly));\n    return 0;\n}\n```\n\u7136\u540e\u6211\u4eec\u610f\u8bc6\u5230\u4e86\u4e00\u4ef6\u4e8b\uff1aCase1 WA\u4e86\uff01\uff01\uff01\u770b\u4e86\u534a\u5929\u4e5f\u6ca1\u770b\u660e\u767d\u3002\u3002\u3002\u6700\u540e\u7ffb\u4e86\u7ffb\u524d\u4eba\u7684AC\u8bb0\u5f55\u540e\u53d1\u73b0\uff1a\u6570\u636e\u51fa\u9505\u4e86\uff0c\u5b83\u70b9\u7684\u7ed9\u51fa\u987a\u5e8f\u662f\u9006\u65f6\u9488\uff0c\u800c\u9ed8\u8ba4\u7684\u8f93\u5165\u987a\u5e8f\u4e3a\u987a\u65f6\u9488\u3002\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u4f60\u61d2\u7684\u8bdd\u76f4\u63a5\u6253\u8868\u8fc7\u6570\u636e\uff0c\u8003\u573a\u4e0a\u6c42\u7a33\u7684\u8bdd\u8dd1\u4e00\u8dd1\u51f8\u5305\u7136\u540e\u6bd4\u8f83\u4e00\u4e9b\u91c7\u6837\u70b9\u7684\u6392\u5217\u987a\u5e8f\u778e\u641e\u4e00\u901a\u5c31\u884c\u4e86\u3002\u3002\u3002",
        "postTime": 1544704003,
        "uid": 87248,
        "name": "happyZYM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2283 \u3010[HNOI2003]\u591a\u8fb9\u5f62\u3011"
    },
    {
        "content": "### \u534a\u5e73\u9762\u4ea4\n\n $n$ \u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u53ef\u4ee5\u628a\u5e73\u9762\u5206\u6210\u4e24\u90e8\u5206\u3002\n \n\u9898\u610f\uff1a\u6c42\u6ee1\u8db3\u5728\u6240\u6709\u8fb9\u4e0a\u65b9\u7684\u533a\u57df\u3002\u8fd9\u91cc\u7684\u8fb9\u662f\u6307\u7b2c $i$ \u4e2a\u70b9\u6307\u5411\u7b2c $i+1$ \u4e2a\u70b9\u7684\u5411\u91cf\u3002\n\n\u591a\u8fb9\u5f62\u7684\u6bcf\u6761\u8fb9\u662f\u987a\u6b21\u76f8\u63a5\u7684\u5411\u91cf\uff0c\u5176\u5de6\u534a\u5e73\u9762\uff0c\u5373\u5411\u91cf\u4e0a\u65b9\u5c31\u662f\u80fd\u770b\u5230\u8fd9\u6761\u8fb9\u7684\u533a\u57df\u3002\u8fd9\u4e9b\u534a\u5e73\u9762\u7684\u4ea4\uff0c\u5c31\u662f\u80fd\u770b\u5230\u6240\u6709\u8fb9\u7684\u533a\u57df\u3002\n\n\u6240\u4ee5\u8dd1\u4e00\u904d\u534a\u5e73\u9762\u4ea4\uff0c\u6c42\u9762\u79ef\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define D double\n#define x first\n#define y second\n\nusing namespace std;\n\nconst int amou=1600;\nconst D eps=1e-8;\ntypedef pair<D,D> PDD;\n\nint n;\nPDD p[amou],as[amou];\nint q[amou];\nstruct Line{\n\tPDD st,ed;\n}line[amou];\n\nint dcmp(D a,D b){\n\tif(fabs(a-b)<eps) return 0;\n\tif(a<b) return -1;\n\treturn 1;\n}\n\nPDD operator-(PDD a,PDD b){\n\treturn {a.x-b.x,a.y-b.y};\n}\n\nD get_angle(Line a){\n\treturn atan2(a.ed.y-a.st.y,a.ed.x-a.st.x);\n}\n\nD cross(PDD a,PDD b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\nD area(PDD a,PDD b,PDD c){\n\treturn cross(b-a,c-a);\n}\n\nbool cmp(Line a,Line b){\n    D A=get_angle(a),B=get_angle(b);\n    if(!dcmp(A,B)) return area(a.st,a.ed,b.ed)<0;\n    return A<B;\n}\n\nPDD get_line_intersection_point(PDD s1,PDD t1,PDD s2,PDD t2){\n    PDD u=s1-s2;\n    D t=cross(t2,u)/cross(t1,t2);\n    return {s1.x+t1.x*t,s1.y+t1.y*t};\n}\n\nPDD get_line_intersection_line(Line a,Line b){\n    return get_line_intersection_point(a.st,a.ed-a.st,b.st,b.ed-b.st);\n}\n\nbool on_right(Line a,Line b,Line c){//bc\u4ea4\u70b9\u5728a\u53f3\u8fb9\n    PDD t=get_line_intersection_line(b,c);\n    return dcmp(area(a.st,a.ed,t),0)<=0;\n}\n\nD half_plane_intersection(){\n    sort(line+1,line+n+1,cmp);\n    int head=0,tail=-1;\n    for(int i=1;i<=n;i++)\n    {\n        if(i>1&&!dcmp(get_angle(line[i]),get_angle(line[i-1]))) continue;//\u8df3\u8fc7\u89d2\u5ea6\u4e00\u6837\u7684\n        while(head+1<=tail&&on_right(line[i],line[q[tail]],line[q[tail-1]])) tail--;//\u5982\u679c\u4ea4\u70b9\u5728\u53f3\u8fb9\uff0c\u8bf4\u660e\u8be5\u820d\u6389\u4e4b\u524d\u7684\u4e86\n        while(head+1<=tail&&on_right(line[i],line[q[head]],line[q[head+1]])) head++;\n        q[++tail]=i;\n    }\n    while(head+1<=tail&&on_right(line[q[head]],line[q[tail-1]],line[q[tail]])) tail--;\n    while(head+1<=tail&&on_right(line[q[tail]],line[q[head]],line[q[head+1]])) head++;//\u4e00\u5b9a\u8bb0\u5f97\u66f4\u65b0\u5934\u5c3e\n    q[++tail]=q[head];//\u65b9\u4fbf\u6c42\u6700\u540e\u4e00\u6761\u7ebf\u548c\u7b2c\u4e00\u6761\u7684\u4ea4\u70b9\n    int t=0;\n    for(int i=head;i<tail;i++)\n        as[++t]=get_line_intersection_line(line[q[i]],line[q[i+1]]);\n    D ret=0;\n    for(int i=2;i<t;i++)\n        ret+=area(as[1],as[i],as[i+1]);\n    return ret/2;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=n;i>=1;i--)\n\t\tscanf(\"%lf%lf\",&p[i].x,&p[i].y);\n\tfor(int i=1;i<=n;i++)\n\t\tline[i]={p[i],p[i%n+1]};\n\tD as=half_plane_intersection();\n\tfor(int i=1;i<=n;i++)\n\t\tline[i]={p[i%n+1],p[i]};\n\tas=max(as,half_plane_intersection());//\u6c42\u4e24\u904d\u662f\u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u8bf4\u70b9\u662f\u987a\u65f6\u9488\u8fd8\u662f\u9006\u65f6\u9488\u7ed9\u7684\uff0c\u4e3a\u9632\u5206\u7c7b\u8ba8\u8bba\uff0c\u91c7\u7528\u5404\u6c42\u4e00\u904d\u7684\u61d2\u4eba\u65b9\u6cd5\n\tprintf(\"%.2lf\",as);\n\treturn 0;\n}\n```\n",
        "postTime": 1631064375,
        "uid": 280519,
        "name": "Yaha",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2283\u3010[HNOI2003]\u591a\u8fb9\u5f62\u3011"
    }
]