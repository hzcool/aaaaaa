[
    {
        "content": "\u8fd9\u9053\u9898\u561b\uff0c\u80af\u5b9a\u4e0d\u7528\u4ece\u5316\u5b66\u7684\u89d2\u5ea6\u601d\u8003\uff08\u795e\u9a6c\u4e71\u51d1\u554a\uff0c\u5947\u5076\u5206\u6790\u5566\uff0c\u5316\u5408\u4ef7\u5206\u6790\u5566\u7b49\u7b49\u90fd\u53ef\u80fd\u8fc7\u4e0d\u53bb\uff09\u3002\n\n\u5982\u679c\u4f60\u770b\u5230\u4e00\u4e2a\u4e0d\u4f1a\u914d\u5e73\u7684\u65b9\u7a0b\u5f0f\uff0c\u5982\u679c\u4f60\u4e0d\u60f3\u601d\u8003\uff0c\u4f60\u7684\u7b2c\u4e00\u53cd\u5e94\u4e00\u5b9a\u662f\uff1a**\u5f85\u5b9a\u7cfb\u6570\u6cd5**\u3002\n\n\u201c\u5f85\u5b9a\u7cfb\u6570\u6cd5\u201d\u4ec0\u4e48\u610f\u601d\uff1f\u5c31\u662f\u628a\u5b83\u4eec\u90fd\u8bbe\u51fa\u6765\uff0c\u518d\u89e3\u65b9\u7a0b\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u4f1a\u60f3\u5230\u2014\u2014\u9ad8\u65af\u6d88\u5143\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff08\u6837\u4f8b\uff09:\n\n![\u56fe\u6302\u4e86](http://latex.codecogs.com/gif.latex?\\mathrm{C\\_{16}H\\_{18}O\\_9%20+%20O\\_2%20\\to%20CO\\_2%20+%20H\\_2O})\n\n\u6211\u4eec\u8bbe\u4e00\u4e0b\u7cfb\u6570\uff1a\n\n![\u56fe\u53c8\u6302\u4e86](http://latex.codecogs.com/gif.latex?x\\_1\\mathrm{C\\_{16}H\\_{18}O\\_9}%20+%20x\\_2\\mathrm{O\\_2}%20=%20x\\_3\\mathrm{CO\\_2}%20+%20x\\_4\\mathrm{H\\_2O})\n\n\u6839\u636e\u5143\u7d20\u5b88\u6052\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a\n\n![\u65b9\u7a0b\u7ec4\u6302\u4e86](http://latex.codecogs.com/gif.latex?\\left\\{\\begin{matrix}16x\\_1&&&=&x\\_3\\\\18x\\_1&&&=&&&2x\\_4\\\\9x\\_1&+&2x\\_2&=&2x\\_3&+&x\\_4&\\end{matrix}\\right.)\n\n\u663e\u7136\uff0c\u5b83\u67094\u4e2a\u672a\u77e5\u6570\uff0c\u5374\u53ea\u67093\u4e2a\u65b9\u7a0b\uff0c\u8fd9\u662f\u65e0\u6cd5\u89e3\u7684\u3002\n\n\u4f46\u4f60\u8981\u53d1\u73b0\uff0c\u5316\u5b66\u65b9\u7a0b\u5f0f\u7684\u7279\u70b9\uff0c\u5982\u679c\u53bb\u6389\u6700\u5927\u516c\u56e0\u6570\u4e3a1\u548c\u6574\u6570\u7684\u6761\u4ef6\uff0c\u5982\u679c\u628a\u6bcf\u79cd\u7269\u8d28\u7684\u7cfb\u6570\u4e58\u4e0a\uff08\u9664\u4ee5\uff09\u540c\u4e00\u4e2a\u6570\u540e\uff0c\u5b83\u4f9d\u65e7\u662f\u914d\u5e73\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u4e00\u4e2a\u503c\u4e3a1\uff0c\u6839\u636e\u4e2a\u4eba\u4e60\u60ef\uff0c\u6211\u5047\u8bbe$x_4=1$\u3002\n\n\u90a3\u4e48\u65b9\u7a0b\u53d8\u6210\u4e86\uff1a\n\n![\u65b9\u7a0b\u7ec4\u53c8\u6302\u4e86](http://latex.codecogs.com/gif.latex?\\left\\{\\begin{matrix}16x\\_1&&&-&x\\_3&=&0\\\\18x\\_1&&&&&=&2\\\\9x\\_1&+&2x\\_2&-&2x\\_3&=&1&\\end{matrix}\\right.)\n\n\u89e3\u4e4b\uff0c\u5f97![\u56fe\u600e\u4e48\u8fd8\u5728\u6302](http://latex.codecogs.com/gif.latex?\\left\\{\\begin{matrix}x\\_1&=&1/9\\\\x\\_2&=&16/9\\\\x\\_3&=&16/9\\end{matrix}\\right.)\n\n\u56e0\u6b64\uff0c\u539f\u6765\u7684\u65b9\u7a0b\u5f0f\u4e3a![\u86e4](http://latex.codecogs.com/gif.latex?\\mathrm{\\frac19C\\_{16}H\\_{18}O\\_9+\\frac{16}9O\\_2=\\frac{16}9CO\\_2+H\\_2O})\n\n\u6211\u4eec\u53ea\u9700\u8981\u53d6\u5206\u6bcd\u7684\u6700\u5c0f\u516c\u500d\u6570 $L$ (\u672c\u4f8b\u4e2d\u4e3a9)\uff0c\u5c31\u5f97\u5230\u6b63\u786e\u7684\u65b9\u7a0b\u5f0f\uff1a\n\n![\u4e0d](http://latex.codecogs.com/gif.latex?\\mathrm{C\\_{16}H\\_{18}O\\_9+16O\\_2=16CO\\_2+9H\\_2O})\n\n\u6240\u4ee5\uff0c\u672c\u9898\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\u4e00\u5f00\u59cb\u5199\u4e00\u5927\u5806\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u7136\u540e\u5f00\u59cb\u9ad8\u65af\u6d88\u5143\u3002\n\n\u672a\u77e5\u6570\u7684\u4e2a\u6570 $n$ \u7b49\u4e8e\u7269\u8d28\u7684\u79cd\u7c7b\u6570\uff0c\u65b9\u7a0b\u7684\u4e2a\u6570 $l$ \u4e3a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6570\u636e\u4e00\u5b9a\u4f1a\u4fdd\u8bc1 $l \\geq n - 1$ \uff0c\u56e0\u4e3a\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u5047\u8bbe\u4e00\u4e2a\u6570\u4e3a1\u3002\n\n\u5982\u679c $l > n - 1$ \uff0c\u5982\u679c\u6211\u4eec\u52a0\u4e0a\u7edd\u5bf9\u503c\u4f18\u5316\u7684\u8bdd\uff0c\u6570\u636e\u4e00\u5b9a\u4f1a\u4fdd\u8bc1\u6700\u540e $l - (n - 1)$ \u884c\u4e3a\u51680\uff0c\u6240\u4ee5\u53ea\u9700\u5904\u7406\u524d $n-1$ \u4e2a\u6570\u5373\u53ef\u3002\n\n\u957f(chou)\u7684\u8981\u6b7b\u7684\u4ee3\u7801\uff1a\n\n(\u5206\u6570\u7c7b\u548c\u9ad8\u65af\u6d88\u5143)\n\n```cpp\ntypedef long long ll;\n\nstruct frac{\n    ll x, y;\n    frac (ll x0 = 0, ll y0 = 1): x(x0), y(y0) {\n        if(!y0) y0 = 1;\n        Canonicity();\n    }\n    void Canonicity(){\n        if(y < 0){\n            x = -x;\n            y = -y;\n        }\n        ll d = gcd(abs(x), y);\n        x /= d;\n        y /= d;\n    }\n    frac operator + (const frac &b) const {return frac(x * b.y + y * b.x, y * b.y);}\n    frac operator - (const frac &b) const {return frac(x * b.y - y * b.x, y * b.y);}\n    frac operator * (const frac &b) const {return frac(x * b.x, y * b.y);}\n    frac operator / (const frac &b) const {return frac(x * b.y, y * b.x);}\n    bool operator < (const frac &b) const {return x * b.y < y * b.x;}\n    bool operator > (const frac &b) const {return b < *this;}\n    bool operator == (const frac &b) const {return x * b.y == y * b.x;}\n    bool operator != (const frac &b) const {return !(*this == b);}\n    void print(){\n        if(y == 1) printf(\"%lld\", x);\n        else printf(\"%lld/%lld\", x, y);\n    }\n};\n\ninline frac frabs(frac z){\n    if(z.x < 0) z.x = -z.x;\n    return z;\n}\n\ntemplate <typename T>\nstruct LnEqn{\n    int r, c;\n    T **m, *b;\n    LnEqn (){m = NULL; b = NULL;}\n    void resize(int r0, int c0){\n        r = r0; c = c0; m = new T *[r];\n        for(int i = 0; i < r; i++){\n            m[i] = new T[c];\n            memset(m[i], 0, c * sizeof(T));\n        }\n        b = new T[r];\n        memset(b, 0, r * sizeof(T));\n    }\n    ~LnEqn (){\n        if(m != NULL){for(int i = 0; i < r; i++) delete [] (m[i]); delete [] (m);}\n        if(b != NULL) delete [] (b);\n    }\n    bool solve(){\n        int i, j, k, maxi;\n        T coe;\n        for(k = 0; k < c; k++){\n            maxi = k;\n            for(i = k + 1; i < r; i++)\n                if(frabs(m[i][k]) > frabs(m[maxi][k]))\n                    maxi = i;\n            if(frabs(m[maxi][k]) == frac(0)) return false;\n            if(maxi != k){\n                swap(m[maxi], m[k]);\n                swap(b[maxi], b[k]);\n            }\n            coe = m[k][k];\n            for(j = 0; j < c; j++)\n                m[k][j] = m[k][j] / coe;\n            b[k] = b[k] / coe;\n            for(i = 0; i < r; i++){\n                if((i == k ? ++i : i) >= r) break;\n                coe = m[i][k];\n                for(j = 0; j < c; j++)\n                    m[i][j] = m[i][j] - coe * m[k][j];\n                b[i] = b[i] - coe * b[k];\n            }\n        }\n        return true;\n    }\n};\n```\n(\u5b57\u7b26\u4e32\u5904\u7406)\n\n```cpp\n//nextint\u51fd\u6570\u5b9a\u4e49\nint nextint(char *p, char **q){\n    if(!isdigit(*p)){\n        if(q != NULL) *q = p;\n        return 1;\n    }\n    int b;\n    for(b = *p - 48; isdigit(*++p); b = b * 10 + (*p - 48));\n    if(q != NULL) *q = --p;\n    return b;\n}\n//\u4e3b\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u9002\u5f53\u7684\u5e94\u7528scanf\u6280\u5de7\nfor(n = 0; ; ++n){\n        scanf(\"%[^ +=\\n]\", s[n]); // reading matter\n        for(p = s[n]; *p; ++p){\n            if(*p == '('){\n                for(q = p; *q != ')'; ++q);\n                Mul = nextint(++q, NULL);        \n            }else if(*p == ')'){\n                nextint(++p, &p);\n                Mul = 1;\n            }else if(*p >= 'A' && *p <= 'Z'){\n                elem = *p - 65;\n                if(p[1] >= 'a' && p[1] <= 'z'){\n                    elem = elem * 26 + (p[1] - 65);\n                    ++p;\n                }\n                mul = 1;\n                if(isdigit(p[1]))\n                    mul = nextint(++p, &p);\n                eid = (~idx[elem] ? idx[elem] : idx[elem] = nid++);\n                coe[eid][n] += Mul * mul;\n                //printf(\"elem = %d, coe[%d][%d] = %d\\n\", elem, eid, n, coe[eid][n]);\n            }\n        }\n        scanf(\"%[ +=\\n]\", s[N - 1]); // reading signs\n        for(p = s[N - 1]; *p; ++p){\n            if(*p == '=') eq = n + 1;\n            if(*p <= '\\n') break;\n        }\n        if(*p && *p <= '\\n'){++n; break;}\n    }\n```",
        "postTime": 1498444874,
        "uid": 10420,
        "name": "\u865e\u7693\u7fd4",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2643 \u3010\u673a\u623f\u4e2d\u51fa\u4e86\u4e00\u53ea\u5927\u89e6\uff01\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u5b57\u7b26\u4e32\u5904\u7406\u548c\u9ad8\u65af\u6d88\u5143\u7684\u9898\u76ee\uff0c\u5e76\u4e14\u8fd9\u9053\u9898\u76ee\u4e3b\u8981\u96be\u5728\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u5904\u7406\u51fa\u5b57\u7b26\u4e32\u4ee5\u540e\u9ad8\u65af\u6d88\u5143\u5c31\u4e0d\u96be\u4e86\u3002\n\n--------\n\n\u5bf9\u4e8e\u5927\u591a\u6570\uff08\u4e0d\u662f\u6240\u6709\uff09\u7684\u5316\u5b66\u65b9\u7a0b\u5f0f\uff0c\u90fd\u53ef\u4ee5\u7528\u5f85\u5b9a\u7cfb\u6570\u6cd5\u914d\u5e73\uff0c\u800c\u5e26\u6709 $n$ \u79cd\u7269\u8d28\u7684\u5316\u5b66\u65b9\u7a0b\u5f0f\uff0c\u7528\u5f85\u5b9a\u7cfb\u6570\u6cd5\u53ef\u4ee5\u5217\u51fa $n-1$ \u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u65b9\u7a0b\uff0c\u8c8c\u4f3c\u6ca1\u6709\u552f\u4e00\u89e3\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e9b\u65b9\u7a0b\u7684\u6bd4\u4f8b\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u8bbe\u8fd9\u4e2a\u5316\u5b66\u65b9\u7a0b\u5f0f\u7684\u6700\u540e\u4e00\u9879\u4e3a $1$\uff0c\u7136\u540e\u89e3\u8fd9\u4e2a\u65b9\u7a0b\u5373\u53ef\u3002\u62ff\u6837\u4f8b\u4e00\u6765\u8bf4\uff0c\u8981\u914d\u5e73\u5316\u5b66\u65b9\u7a0b\u5f0f\u4e3a  \n$$\n\\text{C}_{16}\\text{H}_{18}\\text{O}_{9}+\\text{O}_{2}\\longrightarrow\\text{CO}_2+\\text{H}_2\\text{O}\n$$\n\n\n\u8bbe\u4e00\u4e0b\u7cfb\u6570\uff0c\u53ef\u5f97  \n$$\na\\text{C}_{16}\\text{H}_{18}\\text{O}_{9}+b\\text{O}_{2}====c\\text{CO}_2+d\\text{H}_2\\text{O}\n$$\n\n\n\u5047\u8bbe $d=1$\uff0c\u90a3\u4e48\u53ef\u5217\u51fa\u65b9\u7a0b\u7ec4\uff1a  \n$$\n\\begin{cases}\n16a-c & = 0 \\\\\n18a & = 2 \\\\\n9a+2b-2c & = 1\n\\end{cases}\n$$\n\u89e3\u65b9\u7a0b\uff0c\u53ef\u5f97  \n$$\n\\begin{cases}\na & = \\dfrac{1}{9} \\\\\nb & = \\dfrac{16}{9} \\\\\nc & = \\dfrac{16}{9}\n\\end{cases}\n$$\n\u4ee3\u56de\u5316\u5b66\u65b9\u7a0b\u5f0f\u4e2d  \n$$\n\\dfrac{1}{9}\\text{C}_{16}\\text{H}_{18}\\text{O}_{9}+\\dfrac{16}{9} \\text{O}_{2}====\\dfrac{16}{9}\\text{CO}_2+\\text{H}_2\\text{O}\n$$\n\u5c06\u7cfb\u6570\u5168\u90e8\u4e58\u4ee5\u4e5d\uff0c\u5373\u53ef\u5f97\u51fa\u6b63\u786e\u7684\u5316\u5b66\u65b9\u7a0b\u5f0f  \n$$\n\\text{C}_{16}\\text{H}_{18}\\text{O}_{9}+16\\text{O}_{2}====16\\text{CO}_2+9\\text{H}_2\\text{O}\n$$\n\u8fd9\u5c31\u662f\u5904\u7406\u9ad8\u65af\u6d88\u5143\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u96be\u70b9\u5e76\u4e0d\u5728\u8fd9\uff0c\u800c\u5728\u5b57\u7b26\u4e32\u5904\u7406\u3002  \n\n--------\n\n\u5982\u4f55\u5904\u7406\u5b57\u7b26\u4e32\u5462\uff1f\u9996\u5148\uff0c\u6211\u4eec\u8981\u627e\u5230\u8fd9\u4e2a\u5316\u5b66\u65b9\u7a0b\u5f0f\u6709\u51e0\u79cd\u5143\u7d20\uff0c\u8fd9\u65f6\u5019\uff0c\u5148\u626b\u4e00\u904d\u6709\u54ea\u4e9b\u5143\u7d20\u3002\u6ce8\u610f\uff0c\u6709\u4e9b\u5143\u7d20\u6709\u4e24\u4e2a\u5b57\u6bcd\uff08\u4e00\u5927\u4e00\u5c0f\uff09\uff0c\u6240\u4ee5\u78b0\u5230\u5927\u5199\u5b57\u6bcd\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u540e\u4e00\u4e2a\u662f\u4e0d\u662f\u5c0f\u5199\u5b57\u6bcd\u3002\u627e\u5230\u8fd9\u4e2a\u5143\u7d20\u540e\uff0c\u5c31\u628a\u5b83\u8bb0\u5f55\u4e0b\u6765\u3002\n\n```cpp\nvoid getele() {\n\tll det = 0;\n\twhile (det < len) {\n\t\tif (!isalpha(str[det])) {++det; continue;}\n\t\tif (det <= len - 2 && islower(str[det + 1])) {//\u5224\u65ad\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u6709\u4e24\u4e2a\u5b57\u6bcd\n\t\t\tstring s; s += str[det], s += str[det + 1], det += 2;\n\t\t\tif (!e[s]) ele[++eles] = s, e[s] = eles; continue;\n\t\t}\n\t\tstring s; s += str[det], ++det;\n\t\tif (!e[s]) ele[++eles] = s, e[s] = eles;//e\u6570\u7ec4\u662fmap\u6570\u7ec4\n\t}\n}\n```\n\n\u63a5\u7740\uff0c\u5904\u7406\u4e00\u4e0b\u51fa\u73b0\u4e86\u54ea\u4e9b\u5206\u5b50\uff0c\u5e76\u627e\u5230\u5206\u754c\u7ebf\uff0c\u7531\u4e8e\u4e0d\u5b58\u5728\u7ed3\u6676\u6c34\u7684\u70b9\u53f7\uff0c\u6240\u4ee5\u5206\u9694\u4e24\u4e2a\u5206\u5b50\u7684\u7b26\u53f7\u53ea\u6709\u4e24\u4e2a\u7b26\u53f7\uff0c\u4e00\u4e2a\u662f `+`\uff0c\u53e6\u4e00\u4e2a\u662f `=`\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5728\u8fd9\u4e24\u4e2a\u7b26\u53f7\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n\n```cpp\nvoid getmol() {\n\tll det = 0; mols = 1;\n\twhile (det < len) {\n\t\tif (str[det] == '+' || str[det] == '=') {\n\t\t\tif (str[det] == '=') part = mols + 1;\n\t\t\t++det, ++mols; continue;\n\t\t}\n\t\tmol[mols] += str[det], ++det;\n\t}\n}\n```\n\n\u7136\u540e\uff0c\u5904\u7406\u51fa\u4e00\u4e2a\u5206\u5b50\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u9047\u5230\u62ec\u53f7\uff0c\u7528\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u5b58\u4e00\u4e0b\u62ec\u53f7\u5185\u7684\u5404\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7531\u4e8e\u4e0d\u4f1a\u5185\u5d4c\u62ec\u53f7\uff0c\u6240\u4ee5\u8fd9\u6837\u5904\u7406\u662f\u5bf9\u7684\uff0c\u5904\u7406\u5b8c\u62ec\u53f7\u5185\u90e8\u4ee5\u540e\uff0c\u5982\u679c\u6709\u7cfb\u6570\uff0c\u5c31\u5c06\u62ec\u53f7\u5185\u7684\u5404\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\u90fd\u4e58\u4ee5\u7cfb\u6570\u3002\u9047\u5230\u5143\u7d20\uff0c\u4e5f\u5982\u6cd5\u70ae\u5236\uff0c\u8fd9\u6837\uff0c\u5373\u53ef\u5904\u7406\u51fa\u5206\u5b50\u91cc\u9762\u5404\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\u3002\n\n```cpp\nvoid getnum(string s, ll k) {//k\u8868\u793a\u662f\u6570\u7ec4\u4e2d\u7b2c\u4e00\u7ef4\u4e0b\u6807\n\tll len = s.length(), det = 0;\n\twhile (det < len) {\n\t\tif (s[det] == '(') {\n\t\t\tmemset(temp, 0, sizeof(temp)), ++det;\n\t\t\twhile (s[det] != ')') {\n\t\t\t\tif (isalpha(s[det])) {\n\t\t\t\t\tstring t; t += s[det];\n\t\t\t\t\tif (islower(s[det + 1])) ++det, t += s[det];\n\t\t\t\t\t++det; ll num = 0;\n\t\t\t\t\twhile (isdigit(s[det])) num = num * 10 + s[det] - 48, ++det;\n\t\t\t\t\tif (!num) num = 1; temp[e[t]] += num;\n\t\t\t\t}\n\t\t\t}\n\t\t\t++det; ll num = 0;\n\t\t\twhile (det < len && isdigit(s[det])) num = num * 10 + s[det] - 48, ++det;\n\t\t\tif (!num) num = 1;\n\t\t\tfor (ll i = 1; i <= eles; ++i) cnt[k][i] += temp[i] * num;\n\t\t}\n\t\tstring t; t += s[det];\n\t\tif (det <= len - 2 && islower(s[det + 1])) ++det, t += s[det];\n\t\t++det; ll num = 0;\n\t\twhile (det < len && isdigit(s[det])) num = num * 10 + s[det] - 48, ++det;\n\t\tif (!num) num = 1; cnt[k][e[t]] += num;\n\t}\n}\n```\n\n\u7136\u540e\uff0c\u5c31\u662f\u5904\u7406\u9ad8\u65af\u6d88\u5143\u7684\u90e8\u5206\u4e86\uff0c\u65b9\u6cd5\u5728\u4e0a\u9762\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff0c\u5206\u6570\u7684\u8fd0\u7b97\u5e94\u8be5\u4e5f\u662f\u4f1a\u7684\u3002  \n\n\u5206\u6570\u7c7b\u7ed3\u6784\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nstruct frac {\n\tll p, q;\n\tfrac(ll p = 0, ll q = 1): p(p), q(q){\n\t\tll t = __gcd(abs(p), q);\n\t\tthis->p /= t, this->q /= t;\n\t}\n\tfrac Abs() {//\u53d6\u7edd\u5bf9\u503c\uff0c\u907f\u514d\u51fa\u95ee\u9898\n\t\treturn frac(abs(p), q);\n\t}\n\tfriend bool operator <(frac a, frac b) {\n\t\tll q = a.q * b.q / __gcd(a.q, b.q);\n\t\ta.p *= q / a.q, b.p *= q / b.q;\n\t\treturn a.p < b.p;\n\t}\n\tfriend frac operator +(frac a, frac b) {\n\t\tll q = a.q * b.q / __gcd(a.q, b.q);\n\t\ta.p *= q / a.q, b.p *= q / b.q;\n\t\treturn frac(a.p + b.p, q);\n\t}\n\tfriend frac operator -(frac a, frac b) {\n\t\tll q = a.q * b.q / __gcd(a.q, b.q);\n\t\ta.p *= q / a.q, b.p *= q / b.q;\n\t\treturn frac(a.p - b.p, q);\n\t}\n\tfriend frac operator *(frac a, frac b) {\n\t\treturn frac(a.p * b.p, a.q * b.q);\n\t}\n\tfriend frac operator /(frac a, frac b) {\n\t\tll p = a.p * b.q, q = a.q * b.p;\n\t\tif (q < 0) q = -q, p = -p;//\u7531\u4e8e\u9664\u6cd5\u53ef\u80fd\u4f1a\u51fa\u73b0\u5206\u6bcd\u4e3a\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8981\u7279\u5224\u4e00\u4e0b\n\t\treturn frac(p, q);\n\t}\n};\n```\n\n\u6700\u540e\uff0c\u4e0a\u9ad8\u65af\u6d88\u5143\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid gauss() {\n\tfor (ll i = 1; i <= eles; ++i) {\n\t\tfor (ll j = 1; j < part; ++j)//\u5728\u5206\u754c\u7ebf\u524d\u7cfb\u6570\u4e3a\u6b63\uff0c\u5728\u5206\u754c\u7ebf\u540e\u7cfb\u6570\u4e3a\u8d1f\n\t\t\ta[i][j] = frac(cnt[j][i]);\n\t\tfor (ll j = part; j < mols; ++j)\n\t\t\ta[i][j] = frac(-cnt[j][i]);\n\t\ta[i][mols] = frac(cnt[mols][i]);\n\t}\n\tfor (ll i = 1; i < mols; ++i) {\n\t\tll det = i;\n\t\tfor (ll j = i + 1; j <= eles; ++j)\n\t\t\tif (a[det][i].Abs() < a[j][i].Abs())\n\t\t\t\tdet = j;\n\t\tswap(a[i], a[det]);//\u6570\u7ec4\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5swap\u4e86\n\t\tfor (ll j = i + 1; j <= eles; ++j) {\n\t\t\tfrac t = a[j][i] / a[i][i];\n\t\t\tfor (ll k = i; k <= mols; ++k)\n\t\t\t\ta[j][k] = a[j][k] - t * a[i][k];\n\t\t}\n\t}\n\tans[mols] = frac(1);\n\tfor (ll i = mols - 1; i; --i) {\n\t\tans[i] = a[i][mols] / a[i][i];\n\t\tfor (ll j = i - 1; j; --j)\n\t\t\ta[j][mols] = a[j][mols] - ans[i] * a[j][i], a[j][i] = frac();\n\t}\n\tfor (ll i = 1; i <= mols; ++i) lcm = lcm * ans[i].q / __gcd(lcm, ans[i].q);//\u5904\u7406\u5206\u6bcd\u7684\u6700\u5c0f\u516c\u500d\u6570\n\tflcm = frac(lcm);\n\tfor (ll i = 1; i <= mols; ++i) {\n\t\tans[i] = ans[i] * flcm;\n\t\tsol[i] = ans[i].p;\n\t}\n\tgcd = sol[1];\n\tfor (ll i = 2; i <= mols; ++i) gcd = __gcd(gcd, sol[i]);//\u6700\u540e\u8fd8\u8981\u9664\u4ee5\u6700\u5927\u516c\u7ea6\u6570\n\tfor (ll i = 1; i <= mols; ++i) sol[i] /= gcd;\n}\n```\n\n\u4e3b\u8981\u4ee3\u7801\u90fd\u5df2\u7ecf\u7ed9\u51fa\u4e86\uff0c\u5269\u4e0b\u7684\u4ee3\u7801\u5c31\u81ea\u5df1\u5b9e\u73b0\u4e86\u3002",
        "postTime": 1598794025,
        "uid": 332233,
        "name": "Inlay1158",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2643 \u3010\u673a\u623f\u4e2d\u51fa\u4e86\u4e00\u53ea\u5927\u89e6\uff01\u3011"
    },
    {
        "content": "\u601d\u8def\u548c\u697c\u4e0b\u5dee\u4e0d\u591a :  \u5b57\u7b26\u4e32\u5904\u7406+\u9ad8\u65af\u6d88\u5143\n\n\u6211\u611f\u89c9\u6211\u7684\u5b57\u7b26\u4e32\u5904\u7406\u5199\u7684\u66f4\u4eb2\u6c11\u4e00\u4e9b \uff08\u697c\u4e0b\u5927\u4f6c\u4ee3\u7801\u6211\u770b\u4e0d\u61c2 =\u3001=\uff09\n\n\u6211\u7684\u535a\u5ba2\u539f\u6587\u94fe\u63a5http://www.cnblogs.com/Elfish/p/7631603.html\n\n\u5b8c\u6574\u4ee3\u7801\n\n/\\*\nChemical Equation Balancer\n\nHiJ1m 2017.10.6\n\n\\*/\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int gcd(int x,int y){\n    return x%y==0?y:gcd(y,x%y);\n}\ninline int lcm(int x,int y){\n    return x*y/gcd(x,y);\n}\nstruct frac{                            //\u5206\u6570\u7c7b \n    int a,b;\n    void reduce(){\n        int x=gcd(a,b);\n        a/=x,b/=x;\n    };\n    frac operator = (int x){\n        a=x,b=1;\n        return *this;\n    };\n    frac operator = (const frac x){\n        a=x.a,b=x.b;\n        reduce();\n        return *this;\n    };\n    frac operator + (const frac x){\n        return (frac){b*x.a+a*x.b,b*x.b};\n    };\n    frac operator - (const frac x){\n        return (frac){a*x.b-b*x.a,b*x.b};\n    };\n    frac operator * (const frac x){\n        return (frac){a*x.a,b*x.b};\n    };\n    frac operator / (const frac x){\n        return (frac){a*x.b,b*x.a};\n    };\n    bool operator < (const frac x){\n        return a*x.b<b*x.a;\n    };\n    bool operator == (const frac x){\n        return a*x.b==b*x.a;\n    };\n    void print(){\n        if(b==1)printf(\"%d\\n\",a);\n        else printf(\"%d/%d\\n\",a,b);\n    };\n};        \ninline frac Abs(frac x){\n    int p=x.a>0?x.a:-x.a,q=x.b>0?x.b:-x.b;\n    return (frac){p,q};\n}                                            \nchar s[55];\nint fun[55][55];\nint Map[27][27];                        //\u624b\u52a8MAP \nfrac M[55][55];                            //\u6c42\u89e3\u77e9\u9635\nfrac ans[55];                            //\u89e3 \nint Ans[55];                            //\u6574\u6570\u89e3 \nint cnt,c1,c2,flag=1,N,K;                //cnt\u6570\u5143\u7d20\uff0cc1\u6570\u53cd\u5e94\u7269\uff0cc2\u603b\u6570 \uff08\u672a\u77e5\u6570\u7684\u6570\u91cf\uff09 \nchar mat[55][55];                        //\u5b58\u50a8\u7269\u8d28\u7684\u540d\u79f0 \nvoid print(){\n    printf(\"%d %d\\n\",N,K);\n    for(int i=1;i<=K;i++){\n        for(int j=1;j<=N+1;j++)\n            printf(\"%d \",M[i][j].a);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\ninline int getint(int pos){                //\u8bfb\u6570 \n    pos++;\n    if(s[pos]>='a'&&s[pos]<='z')pos++;\n    if(s[pos]<'0'||s[pos]>'9')return 1;                                //\u6ca1\u6570\u5c31\u662f1 \n    else {\n        int x=0;\n        while(s[pos]>='0'&&s[pos]<='9')x=x*10+s[pos]-'0',pos++;        //\u8bfb\u5143\u7d20\u540e\u9762\u7684\u6570\u5b57 \n        return x;\n    }\n}\ninline void scan(int l,int r){             //\u5904\u7406\u7269\u8d28    \n    c2++;\n    for(int i=0;i<=r-l;i++)mat[c2][i]=s[l+i];        //\u5b58\u4e0b\u5143\u7d20\u7684\u540d\u5b57\n    if(flag==1)c1++;                                //\u7edf\u8ba1\u4e00\u4e0b\u53cd\u5e94\u7269\u6570\u91cf\n    int tmp=1;                                        //tmp\u662f\u5c0f\u62ec\u53f7\u500d\u6570 \n    for(int i=l;i<=r;i++){\n        if(s[i]==')')tmp=1;                                                        \n        if(s[i]=='('){\n            int j=i+1;while(s[j]!=')')j++;            //\u627e\u8fd9\u4e2a\u62ec\u53f7\u7684\u8303\u56f4 \n            tmp=getint(j);                            //\u8bfb\")\"\u53f3\u8fb9\u7684\u6570\u5b57 \n        }\n        if(s[i]>='A'&&s[i]<='Z'){                    //\u53d1\u73b0\u5143\u7d20 \n            int x=s[i]-'A'+1,y=0;\n            if(s[i+1]>='a'&&s[i]<='z')                //\u770b\u4e00\u773c\u662f\u4e00\u4e2a\u5b57\u6bcd\u7684\u8fd8\u662f\u4e24\u4e2a\u7684 \n                y=s[i+1]-'a'+1;\n            if(!Map[x][y])Map[x][y]=++cnt;            //\u5224\u91cd\n            fun[Map[x][y]][c2]+=flag*getint(i)*tmp;    //\u628a\u8fd9\u4e2a\u7269\u8d28\u91cc\u7684\u8fd9\u79cd\u5143\u7d20\u6570\u91cf\u653e\u8fdb\u77e9\u9635\u91cc\uff0c\u5750\u6807\uff08map[x][y]\uff0cc2\uff09 \n        }\n    } \n}\ninline bool Solve(){                    //\u89e3\u65b9\u7a0b  \uff08\u77e9\u9635 \u9ad8cnt\uff0c\u5bbdc2+1,c2+1\u5217\u5e38\u6570\u51680\uff09 \n    ans[c2]=1;                                    //\u4ee4\u6700\u540e\u4e00\u4e2a\u89e3\u4e3a1\n    for(int i=1;i<=cnt;i++){\n        for(int j=1;j<=c2;j++)\n            M[i][j]=fun[i][j];\n    }\n    for(int i=1;i<=cnt;i++)\n        M[i][c2].a=-M[i][c2].a;            //\u79fb\u5230\u5e38\u6570 \n    //\u9ad8\u65af\u6d88\u5143\u8fc7\u7a0b \n    N=c2-1,K=cnt;\n    for(int k=1;k<=N;k++){\n        frac maxm=(frac){-1,1};int maxi;\n        for(int i=k;i<=K;i++)\n            if(maxm<Abs(M[i][k]))\n                maxm=Abs(M[i][k]),maxi=i;\n        if(maxm==(frac){0,1})\n            return false;\n        if(maxi!=k)\n            for(int j=1;j<=N+1;j++){\n                swap(M[k][j],M[maxi][j]);\n            }\n        frac tmp=M[k][k];\n        for(int j=1;j<=N+1;j++)\n            M[k][j]=M[k][j]/tmp;\n        for(int i=k-1?1:2;i<=K;i++){\n            if(i==k)continue;\n            frac tmp=M[i][k];\n            for(int j=1;j<=N+1;j++)\n                M[i][j]=M[i][j]-tmp*M[k][j];\n        }\n    }\n    return true;\n}\nint main()\n{\n//    printf(\"Chemical Equation Balancer\\n\");\n//    printf(\"\\nEnter the chemical equation:\\n\");\n    scanf(\"%s\",s);\n    int lst=0;\n    for(int i=1;i<strlen(s);i++){\n        if(i==strlen(s)-1)scan(lst,i);                    \n        if(s[i]=='+'||s[i]=='=')scan(lst,i-1),lst=i+1;     \n        if(s[i]=='=')flag=-1;                            //\u7b49\u53f7\u540e\u9762\u7684\u7cfb\u6570\u53d8\u8d1f \n    }\n    if(Solve())\n        for(int i=1;i<=c2-1;i++)\n            ans[i]=M[i][N+1];\n    else printf(\"No Solution\");\n    int tmp=lcm(ans[1].b,ans[2].b);\n    for(int i=3;i<=c2;i++)tmp=lcm(tmp,ans[i].b);\n    for(int i=1;i<=c2;i++)Ans[i]=ans[i].a*tmp/ans[i].b;    //\u53d6\u5206\u6bcdLcm\uff0c\u628a\u5206\u6570\u53d8\u6574\u6570 \n    for(int i=1;i<=c2;i++)\n    {\n        if(Ans[i]>1)printf(\"%d\",Ans[i]);\n        for(int j=0;j<strlen(mat[i]);j++)\n            printf(\"%c\",mat[i][j]);\n        if(i==c2)return 0;\n        else if(i==c1)printf(\"=\");\n        else printf(\"+\");\n    }\n}\n```",
        "postTime": 1508722150,
        "uid": 24693,
        "name": "HiJ1m",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2643 \u3010\u673a\u623f\u4e2d\u51fa\u4e86\u4e00\u53ea\u5927\u89e6\uff01\u3011"
    }
]