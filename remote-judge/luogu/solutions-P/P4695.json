[
    {
        "content": "~~\u5bf9\u4e8e\u6811\u4e0a\u6240\u6709\u8def\u5f84\u7684\u95ee\u9898\u663e\u7136\u53ef\u4ee5\u70b9\u5206\u6cbb~~\n\n\u4f46\u662f\u70b9\u5206\u6cbb\u96be\u5199\u600e\u4e48\u529e\n\n\u56e0\u4e3a\u662f\u6bcf\u6b21\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230LCT\n\n\u8003\u8651\u5982\u4f55\u7528LCT\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\n\n\u56e0\u4e3a\u662f\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u51cf\u53bb\u4e00\u6761\u94fe\u7684\u6743\u503c\n\n\u6240\u4ee5\u53ef\u4ee5\u5728splay\u4e0a\u7ef4\u62a4\u4ecesplay\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\uff08\u56e0\u4e3a\u8981\u7ffb\u8f6c\uff09\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u6700\u5927\u503c\n\n\u4f46\u5f53\u524d\u70b9\u5230\u5176\u4ed6\u70b9\u663e\u7136\u4e0d\u662f\u53ea\u6709\u4e00\u6761\u94fe\n\n\u53ea\u6709\u4e00\u6761\u94fe\u7684splay\u597d\u50cf\u5e76\u4e0d\u80fd\u5f88\u597d\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\n\n\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u865a\u8fb9\n\n\u56e0\u4e3a\u4e00\u4e2a\u70b9\u7684\u865a\u8fb9\u6709\u597d\u591a\uff0c\u800c\u4e14\u6211\u4eec\u8981\u6c42\u6700\u5927\u503c\uff0c\u800c\u4e14\u8981\u652f\u6301\u5220\u9664\uff0c\u7528`set`\u53ef\u4ee5\u5f88\u597d\u7ef4\u62a4\n\n\u6240\u4ee5\u7b2c\u4e00\u6b65\u7684\u601d\u8def\u5c31\u51fa\u6765\u4e86:\n\n- \u62c6\u8fb9\u4e3a\u70b9\uff0c\u7ef4\u62a4\u8fb9\u6743\u548c\u70b9\u6743(\u4e00\u4e2a\u70b9\u8fb9\u6743\u4e3a0\uff0c\u4e00\u4e2a\u8fb9\u70b9\u6743\u4e3a-inf)\n- \u7ef4\u62a4splay\u4e0a\u4ece\u6700\u5de6\u8fb9\u5f00\u59cb\u5230\u8fd9\u6761\u94fe\u4ee5\u53ca\u6240\u6709\u865a\u8fb9\u94fe\u63a5\u7684\u70b9\u7684\u6700\u4f18\u7b54\u6848\uff0c\u548c\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u4f18\u7b54\u6848\n\n\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\u8868\u793a\u8fb9\u6743\uff0c\u70b9\u6743\uff0csplay\u4e0a\u8fd9\u4e2a\u70b9\u5b50\u6811\u7684\u8fb9\u6743\u548c\n\n\u518d\u7ef4\u62a4\u4e24\u4e2a\u6700\u5927\u503c\u8868\u793a\u4ece\u5de6\u548c\u4ece\u53f3\u7684\u6700\u4f18\u7b54\u6848\n\n\n```cpp\nstruct Node{\n\tNode  *ch[2],*fa;\n    int64 pval,eval,sum; //\u70b9\u6743\uff0c\u8fb9\u6743\uff0c\u8fb9\u6743\u548c\n    Value lmax,rmax;     //\u5de6\u53f3\u7b54\u6848\n    set<Value> imax;     //\u865a\u8fb9\n};\n```\n\n\u7136\u540e\u8003\u8651\u600e\u6837\u5408\u5e76\u8fd9\u4e9b\u4fe1\u606f\uff08\u4e5f\u5c31\u662fpush_up\uff09\n\n\u5148\u8003\u8651sum\n\n\u5f88\u663e\u7136sum\u5c31\u662f\u5de6\u53f3\u4e24\u5b50\u6811\u7684sum\u4e4b\u548c\u52a0\u4e0a\u81ea\u5df1\u7684\u8fb9\u6743\n\n\u7136\u540e\u662flmax\n\n\u5206\u4e3a\u56db\u90e8\u5206\n\n1. \u5de6\u8fb9\u7684lmax\n2. \u5de6\u8fb9\u7684sum+\u81ea\u5df1\u7684\u8fb9\u6743+\u865a\u8fb9\u4e0a\u7684\u6700\u5927\u503c\n3. \u5de6\u8fb9\u7684sum+\u81ea\u5df1\u8fb9\u6743+\u53f3\u5b50\u6811\u6700\u5927\u503c\n4. \u5de6\u8fb9\u7684sum+\u81ea\u5df1\u70b9\u6743\n\n\nrmax\u540c\u7406\n\n\u6240\u4ee5up\u51fd\u6570\u4e5f\u53ef\u4ee5\u5199\u51fa\u6765\u4e86\n\n```cpp\nvoid up(ptr x){\n\tx->sum=x->eval+x->ch[0]->sum+x->ch[1]->sum;\n\tValue imax=x->imax.size()? *x->imax.rbegin():Value(-inf,0);\n\tx->lmax=max(x->ch[0]->lmax,x->ch[0]->sum+\n\t\t\t\tmax(\n\t\t\t\t\tx->eval+max(imax,x->ch[1]->lmax),\n\t\t\t\t\tValue(x->pval,x-pool)\n\t\t\t\t)\n\t\t\t);\n\tx->rmax=max(x->ch[1]->rmax,x->ch[1]->sum+\n\t\t\t\tmax(\n\t\t\t\t\tx->eval+max(imax,x->ch[0]->rmax),\n\t\t\t\t\tValue(x->pval,x-pool)\n\t\t\t\t)\n\t\t\t);\n}\n```\n\n\n\u7136\u540e\u5c31\u662fLCT\u677f\u5b50\u4e86\uff0c\u6ce8\u610f`access`\u7684\u65f6\u5019\u628a\u865a\u8fb9\u7ef4\u62a4\u597d\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<class T> T read(){\n\tT s,f=1;char ch;\n\twhile(!isdigit(ch=getchar()))(ch=='-')&&(f=-1);\n\tfor(s=ch-'0';isdigit(ch=getchar());s=s*10+ch-'0');\n\treturn s*f;\n}\nnamespace cmp{\ntemplate<class T> bool chkmax(T &a,const T &b){return a<b? a=b,1:0;}\ntemplate<class T> bool chkmin(T &a,const T &b){return b<a? a=b,1:0;}\n}\nconst int maxn = 1e5+5;\nconst long long inf = 1LL<<62;\ntypedef long long int64;\n\n\nint (*_)()=read<int>;\n\nstruct Value{\n\tint64 val;\n\tint id;\n\tValue(int64 val=0,int id=0):val(val),id(id){}\n\tfriend bool operator < (const Value &a,const Value &b){\n\t\treturn a.val==b.val? a.id>b.id:a.val<b.val;\n\t}\n\tfriend Value operator + (const int64 &a,const Value &b){\n\t\treturn Value(b.val+a,b.id);\n\t}\n};\n\n\nstruct Node{\n\tNode *ch[2],*fa;\n\tint64 pval,eval,sum;\n\tValue lmax,rmax;\n\tbool rev;\n\tset<Value> imax;\n}pool[maxn*2];\ntypedef Node *ptr;\nptr null=&pool[0];\n\nNode *Nodeinit(Node *p){\n\tp->ch[0]=p->ch[1]=null;\n\tp->fa=null;\n\tp->pval=p->eval=p->sum=0;\n\tp->lmax=p->rmax=Value(0,0);\n\tp->rev=0;\n\tp->imax.clear();\n\treturn p;\n}\n\nbool ntr(ptr x){return x->fa->ch[0]==x||x->fa->ch[1]==x;}\nbool getd(ptr x){return x->fa->ch[1]==x;}\nvoid up(ptr x){\n\tx->sum=x->eval+x->ch[0]->sum+x->ch[1]->sum;\n\tValue imax=x->imax.size()? *x->imax.rbegin():Value(-inf,0);\n\tx->lmax=max(x->ch[0]->lmax,x->ch[0]->sum+\n\t\t\t\tmax(\n\t\t\t\t\tx->eval+max(imax,x->ch[1]->lmax),\n\t\t\t\t\tValue(x->pval,x-pool)\n\t\t\t\t)\n\t\t\t);\n\tx->rmax=max(x->ch[1]->rmax,x->ch[1]->sum+\n\t\t\t\tmax(\n\t\t\t\t\tx->eval+max(imax,x->ch[0]->rmax),\n\t\t\t\t\tValue(x->pval,x-pool)\n\t\t\t\t)\n\t\t\t);\n}\n\nvoid r(ptr p){\n\tswap(p->ch[0],p->ch[1]);\n\tswap(p->lmax,p->rmax);\n\tp->rev^=1;\n}\n\nvoid down(ptr x){\n\tif(!x->rev)return ;\n\tif(x->ch[0]!=null) r(x->ch[0]);\n\tif(x->ch[1]!=null) r(x->ch[1]);\n\tx->rev=0;\n}\n\nvoid rot(ptr x){\n\tptr y=x->fa,z=y->fa;int k=getd(x);ptr w=x->ch[!k];\n\tif(ntr(y))z->ch[getd(y)]=x;\n\tx->fa=z;y->fa=x;x->ch[!k]=y;y->ch[k]=w;\n\tif(w!=null) w->fa=y;\n\tup(y);\n}\n\nvoid splay(ptr x){\n\tstatic ptr st[maxn];\n\tint top;st[top=1]=x;\n\twhile(ntr(st[top])) st[top+1]=st[top]->fa,top++;\n\twhile(top)down(st[top--]);\n\tfor(;ntr(x);rot(x))\n\t\tif(ntr(x->fa)) rot(getd(x->fa)==getd(x)? x->fa:x);\n\tup(x);\n}\n\nvoid access(ptr x){\n\tfor(ptr y=null;x!=null;x=(y=x)->fa){\n\t\tsplay(x);\n\t\tif(y!=null)\n\t\t\tx->imax.erase(y->lmax);\n\t\tif(x->ch[1]!=null)\n\t\t\tx->imax.insert(x->ch[1]->lmax);\n\t\tx->ch[1]=y;\n\t\tup(x);\n\t}\n}\n\nvoid makeroot(ptr x){\n\taccess(x);\n\tsplay(x);\n\tr(x);\n}\n\nvoid link(ptr x,ptr f){\n\tmakeroot(x);\n\taccess(f);\n\tsplay(f);\n\tx->fa=f;\n\tf->imax.insert(x->lmax);\n\tup(f);\n}\n\nunordered_map<int64,int>edge;\nint64 encode(int x,int y){if(x>y)swap(x,y); return (1LL*x)<<32|y; }\nint n,m,q;\nint main(){\n\tNodeinit(null);\n\tnull->lmax=null->rmax=Value(-inf,n+1);\n\tnull->sum=0;\n\tn=_();q=_();\n\tfor(int i=1;i<n*2;++i)\n\t\tNodeinit(pool+i);\n\tfor(int i=1;i<=n;++i)\n\t\tpool[i].pval=read<int64>(),up(pool+i);\n\tfor(int i=1;i<n;++i){\n\t\tint x=_(),y=_();\n\t\tint64 z=read<int64>();\n\t\tpool[i+n].eval=-z;\n\t\tpool[i+n].pval=-inf;\n\t\tlink(pool+x,pool+i+n);\n\t\tlink(pool+y,pool+i+n);\n\t\tedge[encode(x,y)]=i;\n\t}\n\tmakeroot(pool+1);\n\tint nowpos=1;\n\tfor(int i=1;i<=q;++i){\n\t\tint op=_();\n\t\tif(op==1){\n\t\t\tint x=_();\n\t\t\tint64 z=read<int64>();\n\t\t\taccess(pool+x);\n\t\t\tsplay(pool+x);\n\t\t\tpool[x].pval=z;\n\t\t\tup(pool+x);\n\t\t}else{\n\t\t\tint x=_(),y=_();\n\t\t\tint64 z=read<int64>();\n\t\t\tint id=edge[encode(x,y)]+n;\n\t\t\taccess(pool+id);\n\t\t\tsplay(pool+id);\n\t\t\tpool[id].eval=-z;\n\t\t\tup(pool+id);\n\t\t}\n\t\taccess(pool+nowpos);\n\t\tsplay(pool+nowpos);\n\n\t\tint64 tmp=pool[nowpos].pval;\n\t\tpool[nowpos].pval=-inf;\n\t\tup(pool+nowpos);\n\n\t\tint ans=pool[nowpos].lmax.id;\n\t\tpool[nowpos].pval=tmp;\n\t\tup(pool+nowpos);\n\n\t\tnowpos=ans;\n\t\tmakeroot(pool+nowpos);\n\t\tprintf(\"%d%c\",nowpos,i==q? '\\n':' ');\n\t}\n\treturn 0;\n}\n```\n\u8ba9\u6211\u4eec\u4e00\u8d77\u819c\u62dc\u5927\u4f6c[olinr](https://www.luogu.org/space/show?uid=88460)",
        "postTime": 1554288501,
        "uid": 87940,
        "name": "kraylas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4695 \u3010[PA2017]Banany\u3011"
    },
    {
        "content": "\n_\u662f\u591c\u8427\u7d22\u6f0f\u661f\u5149\uff0c\u4e00\u79cb\u53f6\u6253\u6f2b\u5929\u971c\u3002\u949f\u54cd\uff0c\u5377\u5730\u897f\u98ce\u626b\u9e3f\u8292\u3002_\n\n_\u6c42\u7d22\u90a3\u582a\u8def\u6f2b\u957f\uff0c\u91cd\u5fc3\u5256\u6811\u65e9\u76f8\u5fd8\u3002\u6e05\u5531\uff0c\u65f6\u7a7a\u963b\u9650\u53c8\u4f55\u59a8\uff1f_\n\n### PA-2017 Banany\n\n\u8003\u8651\u70b9\u5206\u6811\u3002\u5148\u628a\u70b9\u5206\u6811\u5efa\u51fa\u6765\u518d\u8003\u8651\u66f4\u591a\u7684\u4e8b\u60c5\u3002\n\n\u5bf9\u6bcf\u4e2a\u5206\u6cbb\u5b50\u6811\uff0c\u7ef4\u62a4\u5206\u6cbb\u5b50\u6811\u5185\u6240\u6709\u70b9\u5230\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3\u7684\u8ddd\u79bb\u52a0\u4ef7\u503c\u7684\u6700\u5927\u503c\u3002\u8003\u8651\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u6309\u7167\u539f\u6811\u4e0a\u7684 dfn \u5e8f\u5efa\u6811\u3002\n\n#### \u4fee\u6539\uff1a\u5728\u6f7a\u6f7a\u7684\u96e8\u96fe\u91cc\u7b5b\u51fa\u8679\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4fee\u6539\u70b9\u6743\u7684\u64cd\u4f5c\u5c31\u6bd4\u8f83\u65b9\u4fbf\uff0c\u5c06 $val_i$ \u4fee\u6539\u4e3a $z$ \u53ea\u9700\u8981\u5bf9\u4e8e $x$ \u5728\u5206\u6cbb\u6811\u4e0a\u7684\u6240\u6709\u7236\u4eb2\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u3002\n\n\u8003\u8651\u5982\u4f55\u8fdb\u884c\u4fee\u6539\u8fb9\u6743\u3002\u6211\u4eec\u53d1\u73b0\u5728\u4fee\u6539 $(x,y)$ \u8fb9\u6743\u4e3a $z$ \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5982\u4e0b\u7684\u6027\u8d28\uff1a\n\n+ \u5728\u5206\u6cbb\u6811\u4e0a\uff0c$x,y$ \u4e2d\u7684\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\n\n\u8fd9\u4e2a\u5f88\u597d\u8bc1\u660e\uff0c\u8003\u8651\u7b2c\u4e00\u4e2a\u5305\u542b $(x,y)$ \u7684\u5206\u6cbb\u5b50\u6811\uff0c\u5fc5\u7136\u662f $x$ \u6216\u8005 $y$ \u4f5c\u4e3a\u5206\u6cbb\u91cd\u5fc3\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u9009\u53d6\u5728\u5206\u6cbb\u6811\u4e0a\u7684\u7956\u5148\u4f5c\u4e3a $y$\uff0c\u53e6\u4e00\u4e2a\u4f5c\u4e3a $x$\u3002\n\n\u7136\u540e\u8003\u8651\u4ec0\u4e48\u4f1a\u6539\u53d8\uff0c\u5982\u679c\u4e00\u4e2a\u5206\u6cbb\u5b50\u6811\u5305\u542b $(x,y)$ \u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u5c06\u5b50\u6811\u5728\u539f\u6811\u4e0a\u6309\u7167\u8fd9\u6761\u8fb9\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5206\u6cbb\u91cd\u5fc3\u5230\u53e6\u4e00\u90e8\u5206\u7684\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u4f1a\u589e\u52a0 $z-last_{x,y}$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4f55\u8fdb\u884c\u64cd\u4f5c\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u6574\u68f5\u6811\u7528 $(x,y)$ \u5206\u6210\u4e24\u90e8\u5206\uff0c\u8bbe\u5728\u539f\u6811\u4ee5 $1$ \u4e3a\u6839\u5f00\u59cb dfs \u7684\u60c5\u51b5\u4e0b\uff0c$x$ \u662f $y$ \u7684\u513f\u5b50\uff0c\u4e00\u90e8\u5206\u662f\u533a\u95f4 $[dfn_x,dfn_x+sz_x-1]$\uff0c\u53e6\u4e00\u90e8\u5206\u662f $[1,dfn_x-1]\\cup[dfn_x+sz_x,n]$\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u5f53\u524d\u6839\u4e0a\u628a\u53e6\u4e00\u90e8\u5206\u6574\u4f53\u52a0 $z-last_{x,y}$\u3002\u5728 modify \u7684\u8fc7\u7a0b\u4e2d\u4e0d\u589e\u52a0\u65b0\u8282\u70b9\uff0c\u4e0d\u5c5e\u4e8e\u5f53\u524d\u5206\u6cbb\u5b50\u6811\u7684\u90e8\u5206\u867d\u7136\u52a0\u4e86\u4f46\u662f\u4f1a\u88ab\u81ea\u52a8\u5ffd\u7565\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u52a0\u3002\u4ece $x$ \u5f00\u59cb\u627e\u5230\u5206\u6cbb\u6811\u7684\u6240\u6709\u7236\u4eb2\uff0c\u7528 dfn \u5e8f\u5224\u65ad\u5f53\u524d\u7684 $cur$ \u5728 $x$ \u90a3\u4e00\u534a\u8fd8\u662f $y$ \u90a3\u4e00\u534a\u4e0a\uff0c\u7136\u540e\u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u4fee\u6539\u3002\n\n#### \u67e5\u8be2\uff1a\u5fc3\u7075\u6df1\u5904\u7684\u8a93\u7ea6\n\n\u6700\u540e\u8003\u8651\u5982\u4f55\u67e5\u8be2\u3002\u5047\u8bbe\u6211\u4eec\u5904\u5728 $x$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8df3 $x$ \u5728\u5206\u6cbb\u6811\u7684\u7236\u4eb2\uff0c\u5047\u8bbe\u5b83\u662f $cur$\u3002\u63a5\u7740\u5728 $cur$ \u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u627e\u79bb $cur$ \u6743\u503c\u6700\u5927\u7684\u70b9\u3002\u5c06\u6743\u503c\u52a0\u4e0a $x$ \u5230 $cur$ \u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5f97\u5230\u5b83\u5230 $x$ \u7684\u8ddd\u79bb\u3002\u5728\u4e00\u822c\u7684\u70b9\u5206\u6811\u4e0a\uff0c\u8fd9\u6837\u505a\u662f\u9700\u8981\u5148\u6392\u9664\u6389 $cur$ \u5206\u5411 $x$ \u7684\u5b50\u6811\u7684\u70b9\u3002\u4f46\u662f\u73b0\u5728\u8fb9\u6743\u9020\u6210\u7684\u8d21\u732e\u662f\u8d1f\u7684\uff0c\u4e5f\u5c31\u662f\u5e94\u5f53\u5c3d\u91cf\u5c11\u8d70\u8fb9\uff0c\u90a3\u4e48\u53ef\u80fd\u88ab $cur$ \u626b\u5230\u7684\u4e0d\u5408\u6cd5\u7684\u70b9\u4e00\u5b9a\u53ef\u4ee5\u4ece $x$ \u7684\u66f4\u4f4e\u7684\u7956\u5148\u7528\u66f4\u5c11\u7684\u82b1\u8d39\u8d70\u5230\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8003\u8651\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u5b58\u5728\u95ee\u9898\uff0c\u6211\u4eec\u5f97\u5230\u7684\u6700\u4f18\u89e3\u53ef\u80fd\u662f\u5f53\u524d\u70b9\u3002\u4e3a\u4e86\u7ef4\u62a4\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e0b\u6b21\u5927\u503c\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u4f55\u8ba1\u7b97\u201c$x$ \u5230 $cur$ \u7684\u8def\u5f84\u957f\u5ea6\u3002\u6211\u4eec\u9996\u5148\u7684\u60f3\u6cd5\u662f\u901a\u8fc7 lca \u548c\u6811\u4e0a\u500d\u589e\u6765\u8ba1\u7b97\u3002\n\n\u53c2\u8003\u5982\u4e0b\u4ee3\u7801\n\n```cpp\nnamespace Distance{\n\tint Fa[100005][21],Dep[100005];ll F[100005][21];\n\tint Dfn[100005],Ti,Sz[100005]; \n\tinline void build_distance(int x,int p,ll pval){\n\t\tFa[x][0]=p,F[x][0]=pval,Dep[x]=Dep[p]+1,Dfn[x]=++Ti,Sz[x]=1;\n\t\trep(i,1,20)Fa[x][i]=Fa[Fa[x][i-1]][i-1];\n\t\trep(i,1,20)F[x][i]=F[x][i-1]+F[Fa[x][i-1]][i-1];\n\t\tfor(auto e:tr[x])if(e.b!=p)build_distance(e.b,x,e.w),Sz[x]+=Sz[e.b];\n\t}\n\tinline int lca(int x,int y){\n\t\tif(Dep[x]<Dep[y])swap(x,y);\n\t\tper(i,0,20)if(Dep[Fa[x][i]]>=Dep[y])x=Fa[x][i];\n\t\tif(x==y)return x;\n\t\tper(i,0,20)if(Fa[x][i]!=Fa[y][i])x=Fa[x][i],y=Fa[y][i];\n\t\treturn Fa[x][0];\n\t}\n\tinline int distance(int x,int y){\n\t\tll res=0;\n\t\tper(i,0,20)if(Dep[Fa[x][i]]>=Dep[y]){\n\t\t\tres+=F[x][i];\n\t\t\tx=Fa[x][i];\n\t\t}return res;\n\t}\n\tinline int dis(int x,int y){\n\t\tint z=lca(x,y);\n\t\treturn distance(x,z)+distance(y,z);\n\t}\n}using namespace Distance;\n```\n\n\u4f46\u662f\u8fd9\u6837\u5b58\u5728\u95ee\u9898\u3002\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u8ddd\u79bb\u662f\u53ef\u80fd\u56e0\u4e3a\u8fb9\u6743\u7684\u4fee\u6539\u800c\u53d8\u5316\u7684\u3002\u6811\u4e0a\u500d\u589e\u663e\u7136\u662f\u9759\u6001\u7684\u3002\n\n\u5bf9\u4e8e\u6b64\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u80fd\u60f3\u5230\u6811\u5256\uff0c\u901a\u8fc7\u6811\u5256\u89e3\u51b3\u6811\u4e0a\u4e24\u70b9\u52a8\u6001\u8ddd\u79bb\u3002\u7136\u800c\u6811\u5256\u67e5\u8be2\u52a8\u6001\u8ddd\u79bb\u672c\u8eab\u662f $O(\\log^2n)$ \u7684\uff0c\u5982\u679c\u8fd9\u6837\u505a\uff0c\u590d\u6742\u5ea6\u5c31\u4f1a\u6765\u5230 $O(n\\log^3 n)$\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u53ea\u6709\u8fd9\u91cc\u4e00\u5904\u5730\u65b9\u9700\u8981\u67e5\u627e\u8ddd\u79bb\uff0c\u800c\u4e14\u6ee1\u8db3\u6027\u8d28 $cur$ \u662f $x$ \u5728\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148\u3002\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u5df2\u7ecf\u5b58\u50a8\u4e86 $cur$ \u5230 $x$ \u7684\u8ddd\u79bb\u52a0\u4e0a $val_x$ \u4e86\uff0c\u800c $val_x$ \u662f\u5df2\u77e5\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811 $cur$ \u4e0a\u5355\u70b9\u67e5\u8be2\u5f97\u5230\u8ddd\u79bb\u4e86\u3002\n\n#### \u5b9e\u73b0\uff1a\u6765\u9014\u4e00\u7247\u8840\u6c61\uff0c\u5374\u7b11\u79f0\u90fd\u662f\u865a\u65e0\n\n\u9996\u5148\u56f0\u6270\u6211\u4eec\u7684\u662f\u6b21\u5927\u503c\u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u4e0d\u4ec5\u8981\u7ef4\u62a4\u6700\u5927\u503c\uff0c\u6b21\u5927\u503c\uff0c\u8fd8\u8981\u7ef4\u62a4\u5b83\u4eec\u5bf9\u5e94\u7684\u70b9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe\u7acb\u7279\u6b8a\u7684\u7ed3\u6784\u4f53 `mxx` \u548c `twomax` \uff0c `mxx` \u7528\u6765\u7ef4\u62a4\u6700\u503c\u548c\u5b83\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u8fd8\u8981\u652f\u6301\u5728\u503c\u76f8\u540c\u65f6\u5c0f\u7f16\u53f7\u4f18\u5148\uff0c\u65b9\u4fbf\u7684\u63d2\u5165\u6bd4\u8f83\u548c\u66f4\u6539\u6570\u503c\u3002\u5982\u679c\u7528 `pair<int,int>` \u5b9e\u73b0\u51fd\u6570\u5c31\u7565\u663e\u7e41\u7410\uff0c\u4e0d\u5982\u81ea\u5df1\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5b9e\u73b0 `operator` \uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u7b80\u5355\u6613\u61c2\u3002`twomax` \u7ef4\u62a4\u4e24\u4e2a `mxx` \uff0c\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u8981\u652f\u6301\u63d2\u5165 `mxx` \uff0c\u4fdd\u8bc1\u7f16\u53f7\u4e0d\u540c\uff0c\u4ee5\u53ca\u4e24\u4e2a `twomax` \u7684\u5408\u5e76\u3002\n\n```cpp\nstruct twomax{\n\tstruct mxx{\n\t\tint m;ll v;\n\t\tmxx(int _m,ll _v){\n\t\t\tm=_m,v=_v;\n\t\t}\n\t\tmxx(){\n\t\t\tm=-1,v=-4e18;\n\t\t}\n\t\tvoid operator +=(const ll b){\n\t\t\tv+=b;\n\t\t}\n\t\tbool operator >(const mxx b)const{\n\t\t\tif(v==b.v)return m<b.m;\n\t\t\treturn v>b.v;\n\t\t}\n\t}r1,r2;\n\ttwomax(){\n\t\tr1=mxx();r2=mxx();\n\t}\n\ttwomax(int x,ll v){\n\t\tr1=mxx(x,v);r2=mxx();\n\t}\n\tvoid operator +=(const mxx b){\n\t\tif(b>r1){\n\t\t\tif(r1.m!=b.m)r2=r1;\n\t\t\tr1=b;\n\t\t}\n\t\telse if(b>r2&&b.m!=r1.m)r2=b;\n\t}\n\tvoid operator +=(const ll b){\n\t\tr1+=b,r2+=b;\n\t}\n\ttwomax operator +(twomax b){\n\t\ttwomax res=b;\n\t\tres+=r1;res+=r2;\n\t\treturn res;\n\t}\n};\n```\n\n\u540c\u65f6\u8fd8\u5229\u7528\u4e86 C++ \u5bf9\u4e8e\u76f8\u540c\u7684\u8fd0\u7b97\u7b26\u6216\u51fd\u6570\u6839\u636e\u8fd0\u7b97\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u533a\u5206\u7684\u7279\u6027\uff0c\u8c03\u7528\u66f4\u52a0\u65b9\u4fbf\u3002\n\n\u7136\u540e\u662f\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u52a8\u6001\u5f00\u70b9\u548c\u533a\u95f4\u52a0\u6cd5\u3002\u800c\u533a\u95f4\u52a0\u7684\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u589e\u52a0\u65b0\u70b9\u7684\uff0c\u6211\u4eec\u8fd8\u8981\u5728 `modify` \u4e4b\u5916\u5355\u72ec\u5b9e\u73b0\u589e\u52a0\u65b0\u70b9\u7684\u5355\u70b9\u4fee\u6539 `build` \u3002\n\n\u56e0\u4e3a\u6211\u4eec\u7684 `twomax` \u662f\u4f7f\u7528\u8fd0\u7b97\u7b26\u6765\u64cd\u63a7\u7684\uff0c\u597d\u5904\u5c31\u5728\u4e8e\u7ebf\u6bb5\u6811\u53ef\u4ee5\u76f4\u63a5\u7528\u677f\u5b50\uff0c\u975e\u5e38\u65b9\u4fbf\u3002\n\n```cpp\n\nnamespace Segtree{\n\tstruct node{\n\t\tint ls,rs;ll tg;twomax res;\n\t}sg[4680005];\n\tint cnt=0;\n\tinline int newnode(){\n\t\tint x=++cnt;\n\t\tsg[x].res=twomax();sg[x].ls=0,sg[x].rs=0;\n\t\treturn x;\n\t}\n\tinline void update(int i){\n\t\tsg[i].res=(sg[sg[i].ls].res+sg[sg[i].rs].res);\n\t}\n\tinline void pushdown(int i){\n\t\tif(!i||!sg[i].tg)return;\n\t\tsg[i].res+=sg[i].tg;\n\t\tif(sg[i].ls)sg[sg[i].ls].tg+=sg[i].tg;\n\t\tif(sg[i].rs)sg[sg[i].rs].tg+=sg[i].tg;\n\t\tsg[i].tg=0;\n\t} \n\tinline void build(int &i,int x,int ix,ll v,int l,int r){\n\t\tif(!i)i=newnode();\n\t\tpushdown(i);\n\t\tif(l==r){\n\t\t\tsg[i].res=twomax(ix,v);\n\t\t\treturn;\n\t\t}int mid=(l+r)>>1;\n\t\tif(x<=mid)build(sg[i].ls,x,ix,v,l,mid);\n\t\telse build(sg[i].rs,x,ix,v,mid+1,r);\n\t\tupdate(i);\n\t}\n\tinline void modify(int i,int L,int R,ll v,int l,int r){\n\t\tif(!i)return;\n\t\tpushdown(i);\n\t\tif(L>r||R<l)return;\n\t\tif(L<=l&&r<=R){\n\t\t\tsg[i].tg+=v;\n\t\t\tpushdown(i);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tmodify(sg[i].ls,L,R,v,l,mid);\n\t\tmodify(sg[i].rs,L,R,v,mid+1,r);\n\t\tupdate(i);\n\t}\n\tinline ll qry(int i,int x,int l,int r){\n\t\tpushdown(i);\n\t\tif(l==r)return sg[i].res.r1.v;\n\t\tint mid=(l+r)>>1;\n\t\tll res=0;\n\t\tif(x<=mid){\n\t\t\tres=qry(sg[i].ls,x,l,mid);\n\t\t\tpushdown(sg[i].rs);\n\t\t}else {\n\t\t\tres=qry(sg[i].rs,x,mid+1,r);\n\t\t\tpushdown(sg[i].ls);\n\t\t}update(i);\n\t\treturn res;\n\t}\n}using namespace Segtree;\n```\n\n\u7136\u540e\u4e3b\u7a0b\u5e8f\u9700\u8981\u5b9e\u73b0\u56db\u4e2a\u51fd\u6570\uff1a\n\n+ `Build_Vertex(x,y)` \u5efa\u7acb $x$ \u7684\u70b9\u6743\u4e3a $y$\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u65b0\u5efa\u70b9\n\n+ `Modify_Vertex(x,y)` \u5c06 $x$ \u7684\u70b9\u6743 __\u589e\u52a0__ $y$\n\n+ `Modify_Edge(x,y)` \u5c06\u8fb9 $(x,y)$ \u7684\u6743\u503c\u4fee\u6539\u4e3a $y$\n\n+ `Query(x)` \u4ece\u70b9 $x$ \u5f00\u59cb\u627e\u5230\u6700\u8fd1\u7684\u70b9\u3002\n\n\u8fd9\u56db\u4e2a\u51fd\u6570\u90fd\u662f $O(\\log^2 n)$ \u7684\uff0c\u5176\u4e2d `Modify_Edge(x,y)` \u5e38\u6570\u6700\u5927\uff08\u6d89\u53ca\u5230 $\\log$ \u6b21\u533a\u95f4\u52a0\uff09\n\n```cpp\n\ninline void build_vert(int x,ll y){\n\tint cur=x;\n\twhile(cur!=0){\n\t\tbuild(root[cur],dfn[x],x,y,1,n);\n\t\tcur=fa[cur];\n\t}\n}\ninline void modify_vert(int x,ll y){\n\tint cur=x;\n\twhile(cur!=0){\n\t\tmodify(root[cur],dfn[x],dfn[x],y,1,n);\n\t\tcur=fa[cur];\n\t}\n}\ninline void modify_edge(int x,int y,ll z){\n\tif(Divid::lay[x]<Divid::lay[y])swap(x,y);\n\tint cur=x;\n\twhile(cur){\n\t\tif(bothside(cur,y,x)){\n\t\t\tif(dfn[x]<=dfn[y]){\n\t\t\t\tmodify(root[cur],1,dfn[y]-1,z,1,n);\n\t\t\t\tmodify(root[cur],dfn[y]+sz[y],n,z,1,n);\n\t\t\t}else{\n\t\t\t\tmodify(root[cur],dfn[x],dfn[x]+sz[x]-1,z,1,n);\n\t\t\t}\n\t\t}else{\n\t\t\tif(dfn[y]<=dfn[x]){\n\t\t\t\tmodify(root[cur],1,dfn[x]-1,z,1,n);\n\t\t\t\tmodify(root[cur],dfn[x]+sz[x],n,z,1,n);\n\t\t\t}else{\n\t\t\t\tmodify(root[cur],dfn[y],dfn[y]+sz[y]-1,z,1,n);\n\t\t\t}\n\t\t}\n\t\tcur=fa[cur];\n\t}\n}\ninline int query(int x){\n\ttwomax ans=sg[root[x]].res;\n\tint cur=fa[x];\n\twhile(cur!=0){\n\t\ttwomax res=sg[root[cur]].res;\n\t\tres+=dis(x,cur);\n\t\tans=(ans+res),cur=fa[cur];\n\t}\n\tif(ans.r1.m==x){\n\t\treturn ans.r2.m;\n\t}\n\treturn ans.r1.m;\n}\n```\n\n#### \u5361\u5e38\uff1a\u6b64\u5904\u5373\u4e3a\u7a7a\u95f4\u7684\u754c\u9650\uff0c\u53ea\u5f97\u5230\u6b64\uff0c\u4e0d\u5f97\u50ed\u8d8a\n\n\u6211\u4eec\u5206\u6790\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u770b\u4e0a\u53bb\uff0c\u6bcf\u4e2a\u70b9\u8d21\u732e $\\log n$ \u6b21\uff0c\u6bcf\u6b21\u589e\u52a0 $\\log n$ \u7684\u4ee3\u4ef7\u8fd9\u4e2a\u7b97\u6cd5\u662f $O(n\\log^2 n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f46\u662f\u8fd9\u6837\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8c\u53c9\u6811\u5361\u6389\u7684\uff0c\u679c\u771f\u5982\u6b64\u5417\uff1f\n\n\u6211\u4eec\u5206\u6790\u4e8c\u53c9\u6811\u5982\u4f55\u5361\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u4e8c\u53c9\u6811\u4e0a\u9876\u7aef\u7684\u70b9\u51e0\u4e4e\u90fd\u662f\u6ee1\u7684\uff0c\u800c\u6ee1\u7684\u7ebf\u6bb5\u6811\u662f $O(n)$ \u7684\u3002\u6240\u4ee5\u201c\u4e0a\u9762\u201d\u7684\u70b9\u6bcf\u4e2a\u70b9\u518d\u600e\u4e48\u591a\u4e5f\u4e0d\u4f1a\u8d85\u8fc7 $O(n)$ \u4e2a\u3002\n\n\u7136\u540e\u6211\u4eec\u6839\u53f7\u5206\u6790\u3002\u6df1\u5ea6\u4e0d\u8d85\u8fc7 $\\dfrac{\\log_2 n}{2}$ \u7684 $\\sqrt{n}$ \u4e2a\u70b9\uff08$2^{(\\log_2 n)/2}=\\sqrt{2^{\\log_2 n}}=\\sqrt{n}$\uff09\uff0c\u6211\u4eec\u5c31\u5047\u8bbe\u5b83\u4eec\u90fd\u662f\u6ee1\u7684\uff0c\u603b\u7a7a\u95f4 $O(n\\sqrt{n})$\u3002\u5bf9\u4e8e\u6df1\u5ea6\u8d85\u8fc7 $\\dfrac{\\log n}{2}$ \u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u7ba1\u8f96 $\\sqrt{n}$ \u4e2a\u70b9\uff08\u548c\u4e0a\u9762\u540c\u7406\uff09\uff0c\u603b\u7a7a\u95f4\u4e5f\u662f $O(n\\sqrt{n})$\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u5206\u6790\u5230\u4e86 $O(n\\sqrt{n})$\uff0c\u4f46\u662f\u51ed\u501f\u8fd9\u4e2a\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u592a\u53ef\u80fd\u901a\u8fc7\u7684\u3002\u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u6536\u7f29\u4e0a\u754c\u3002\n\n\u5728\u4e86\u89e3\u6b63\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u672c\u9898\u7684\u53e6\u4e00\u4e2a\u7b97\u6cd5\u3002\n\n\u4e5f\u5c31\u662f\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u5206\u6cbb\u91cd\u5fc3\u5185\u90e8\u5c06\u5176\u7ba1\u8f96\u7684\u6240\u6709\u8282\u70b9\u6392\u5217\uff0c\u5efa\u51fa\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\u3002\u5bf9 $n$ \u4e2a\u70b9\u5efa\u7acb\u7ebf\u6bb5\u6811\u662f $O(n)$ \u7684\u3002\u800c\u6bcf\u4e2a\u70b9\u4f1a\u88ab\u8d21\u732e $O(n\\log n)$ \u6b21\uff0c\u6240\u4ee5\u603b\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u663e\u800c\u6613\u89c1\u662f $O(n\\log n)$ \u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u73b0\u5728\u7684\u505a\u6cd5\uff0c\u5176\u5b9e\uff0c\u6211\u4eec\u6bcf\u4e2a\u5206\u6cbb\u5b50\u6811\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u7684\u5750\u6807\u4e0a\u4e5f\u662f\u4e00\u6bb5\u8fd1\u4f3c\u533a\u95f4\u7684\u90e8\u5206\u3002\u6240\u4ee5\u6211\u4eec\u5176\u5b9e\u662f\u5bf9\u8fd9\u4e2a\u533a\u95f4\u5efa\u7acb\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u6ee1\u4e8c\u53c9\u6811\u7684\u4e1c\u897f\uff0c\u7136\u540e\u4ece\u6839\u8fde\u4e86\u4e00\u6761\u94fe\u5230\u8fd9\u4e2a\u5c0f\u7ebf\u6bb5\u6811\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u4e5f\u662f $O(n\\log n)$ \u7684\u3002\n\n\u800c\u4e14\uff0c\u8fd9\u4e2a\u505a\u6cd5\u76f8\u8f83\u4e8e\u663e\u7136 $O(n\\log n)$ \u7684\u505a\u6cd5\u8fd8\u662f\u5b58\u5728\u4f18\u52bf\u7684\u3002\u56e0\u4e3a\u5efa\u7acb\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\u7406\u8bba\u6240\u9700\u8981\u7684\u7a7a\u95f4\u662f $2n$\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e3a\u4e86\u4e0b\u6807\u8bbf\u95ee\u7684\u5408\u6cd5\u6027\uff0c\u6211\u4eec\u9700\u8981 $4n$ \u7684\u7a7a\u95f4\u6765\u5efa\u7acb\u3002\u5728\u53ea\u6709 `250MB` \u7684\u9898\u76ee\u4e0a\uff0c\u8fd9\u591a\u51fa\u6765\u7684\u5f00\u9500\u662f\u81f4\u547d\u7684\uff0c\u81f4\u4f7f\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528\u5185\u5b58\u6c60\u7b49\u624b\u6bb5\u4f18\u5316\u3002\n\n\u4f46\u662f\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5929\u7136\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a\u4e0b\u6807\u8bbf\u95ee\u5408\u6cd5\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8f7b\u8f7b\u677e\u677e\u5c31\u80fd\u5361\u8fdb\u539f\u9898\u7684\u7a7a\u95f4\u9650\u5236\u3002\n\n```cpp\nstruct edge{\n\tint b;ll w;\n\tedge(int _b,ll _w){\n\t\tb=_b,w=_w;\n\t}\n};\nint n,m,t,x,y;ill z,val[100005];\nint root[100005],fa[100005];\nvt<edge>tr[100005],vv[100005];\nint dfn[100005],sz[100005],ti;\nnamespace Divid{\n\tint lay[100005],del[100005];\n\tinline void getsz(int x,int p){\n\t\tsz[x]=1;\n\t\tfor(auto e:tr[x])if(!del[e.b]&&e.b!=p){\n\t\t\tgetsz(e.b,x);sz[x]+=sz[e.b];\n\t\t}\n\t}\n\tinline int getcen(int x,int p,int tot){\n\t\tfor(auto e:tr[x])if(!del[e.b]&&e.b!=p){\n\t\t\tif(2*sz[e.b]>=tot)return getcen(e.b,x,tot);\n\t\t}return x;\n\t}\n\tinline int Build(int x,int l){\n\t\tgetsz(x,0);int s=getcen(x,0,sz[x]);\n\t\tdel[s]=1;lay[s]=l;\n\t\tfor(auto e:tr[s])if(!del[e.b]){\n\t\t\tint ls=Build(e.b,l+1);\n\t\t\tfa[ls]=s;vv[s].pb({ls,0});\n\t\t}\n\t\treturn s;\n\t}\n}\nstruct twomax{\n\tstruct mxx{\n\t\tint m;ll v;\n\t\tmxx(int _m,ll _v){\n\t\t\tm=_m,v=_v;\n\t\t}\n\t\tmxx(){\n\t\t\tm=-1,v=-4e18;\n\t\t}\n\t\tvoid operator +=(const ll b){\n\t\t\tv+=b;\n\t\t}\n\t\tbool operator >(const mxx b)const{\n\t\t\tif(v==b.v)return m<b.m;\n\t\t\treturn v>b.v;\n\t\t}\n\t}r1,r2;\n\ttwomax(){\n\t\tr1=mxx();r2=mxx();\n\t}\n\ttwomax(int x,ll v){\n\t\tr1=mxx(x,v);r2=mxx();\n\t}\n\tvoid operator +=(const mxx b){\n\t\tif(b>r1){\n\t\t\tif(r1.m!=b.m)r2=r1;\n\t\t\tr1=b;\n\t\t}\n\t\telse if(b>r2&&b.m!=r1.m)r2=b;\n\t}\n\tvoid operator +=(const ll b){\n\t\tr1+=b,r2+=b;\n\t}\n\ttwomax operator +(twomax b){\n\t\ttwomax res=b;\n\t\tres+=r1;res+=r2;\n\t\treturn res;\n\t}\n};\nnamespace Segtree{\nstruct node{\n\tint ls,rs;ll tg;twomax res;\n}sg[4680005];\nint cnt=0;\ninline int newnode(){\n\tint x=++cnt;\n\tsg[x].res=twomax();sg[x].ls=0,sg[x].rs=0;\n\treturn x;\n}\ninline void update(int i){\n\tsg[i].res=(sg[sg[i].ls].res+sg[sg[i].rs].res);\n}\ninline void pushdown(int i){\n\tif(!i||!sg[i].tg)return;\n\tsg[i].res+=sg[i].tg;\n\tif(sg[i].ls)sg[sg[i].ls].tg+=sg[i].tg;\n\tif(sg[i].rs)sg[sg[i].rs].tg+=sg[i].tg;\n\tsg[i].tg=0;\n} \ninline void build(int &i,int x,int ix,ll v,int l,int r){\n\tif(!i)i=newnode();\n\tpushdown(i);\n\tif(l==r){\n\t\tsg[i].res=twomax(ix,v);\n\t\treturn;\n\t}int mid=(l+r)>>1;\n\tif(x<=mid)build(sg[i].ls,x,ix,v,l,mid);\n\telse build(sg[i].rs,x,ix,v,mid+1,r);\n\tupdate(i);\n}\ninline void modify(int i,int L,int R,ll v,int l,int r){\n\tif(!i)return;\n\tpushdown(i);\n\tif(L>r||R<l)return;\n\tif(L<=l&&r<=R){\n\t\tsg[i].tg+=v;\n\t\tpushdown(i);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tmodify(sg[i].ls,L,R,v,l,mid);\n\tmodify(sg[i].rs,L,R,v,mid+1,r);\n\tupdate(i);\n}\ninline ll qry(int i,int x,int l,int r){\n\tpushdown(i);\n\tif(l==r)return sg[i].res.r1.v;\n\tint mid=(l+r)>>1;\n\tll res=0;\n\tif(x<=mid){\n\t\tres=qry(sg[i].ls,x,l,mid);\n\t\tpushdown(sg[i].rs);\n\t}else {\n\t\tres=qry(sg[i].rs,x,mid+1,r);\n\t\tpushdown(sg[i].ls);\n\t}update(i);\n\treturn res;\n}\n}using namespace Segtree;\nnamespace Distance{\ninline void build_distance(int x,int p){\n\tdfn[x]=++ti,sz[x]=1;\n\tfor(auto e:tr[x])if(e.b!=p)build_distance(e.b,x),sz[x]+=sz[e.b];\n}\ninline ll dis(int x,int y){\n\tll res=qry(root[y],dfn[x],1,n)-val[x];\n\treturn res;\n}\ninline bool bothside(int z,int y,int x){\n\tif(dfn[x]<=dfn[y]){//x\u662fy\u7684\u7956\u5148 \n\t\treturn (dfn[y]<=dfn[z]&&dfn[z]<dfn[y]+sz[y]);\n\t}else{//y\u662fx\u7684\u7956\u5148 \n\t\treturn !(dfn[x]<=dfn[z]&&dfn[z]<dfn[x]+sz[x]);\n\t}\n}\n}using namespace Distance;\nint rt=0;\ninline void build_vert(int x,ll y){\n\tint cur=x;\n\twhile(cur!=0){\n\t\tbuild(root[cur],dfn[x],x,y,1,n);\n\t\tcur=fa[cur];\n\t}\n}\ninline void modify_vert(int x,ll y){\n\tint cur=x;\n\twhile(cur!=0){\n\t\tmodify(root[cur],dfn[x],dfn[x],y,1,n);\n\t\tcur=fa[cur];\n\t}\n}\ninline void modify_edge(int x,int y,ll z){\n\tif(Divid::lay[x]<Divid::lay[y])swap(x,y);\n\tint cur=x;\n\twhile(cur){\n\t\tif(bothside(cur,y,x)){\n\t\t\tif(dfn[x]<=dfn[y]){\n\t\t\t\tmodify(root[cur],1,dfn[y]-1,z,1,n);\n\t\t\t\tmodify(root[cur],dfn[y]+sz[y],n,z,1,n);\n\t\t\t}else{\n\t\t\t\tmodify(root[cur],dfn[x],dfn[x]+sz[x]-1,z,1,n);\n\t\t\t}\n\t\t}else{\n\t\t\tif(dfn[y]<=dfn[x]){\n\t\t\t\tmodify(root[cur],1,dfn[x]-1,z,1,n);\n\t\t\t\tmodify(root[cur],dfn[x]+sz[x],n,z,1,n);\n\t\t\t}else{\n\t\t\t\tmodify(root[cur],dfn[y],dfn[y]+sz[y]-1,z,1,n);\n\t\t\t}\n\t\t}\n\t\tcur=fa[cur];\n\t}\n}\ninline int query(int x){\n\ttwomax ans=sg[root[x]].res;\n\tint cur=fa[x];\n\twhile(cur!=0){\n\t\ttwomax res=sg[root[cur]].res;\n\t\tres+=dis(x,cur);\n\t\tans=(ans+res),cur=fa[cur];\n\t}\n\tif(ans.r1.m==x){\n\t\treturn ans.r2.m;\n\t}\n\treturn ans.r1.m;\n}\nmap<int,ll>mp[100005];\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin>>n>>m;\n\tsg[0].res=twomax();\n\trp(i,n)cin>>val[i];\n\trp(i,n-1){\n\t\tcin>>x>>y>>z;z=-z;\n\t\ttr[x].pb({y,z});mp[y][x]=z;\n\t\ttr[y].pb({x,z});mp[x][y]=z;\n\t}\n\trt=Divid::Build(1,0);\n\tbuild_distance(1,0);\n\trp(i,n)build_vert(i,val[i]);\n\trp(i,n)for(auto e:tr[i])if(e.b<i){\n\t\tmodify_edge(e.b,i,e.w);\n\t}\n\tint ans=1;\n\trp(_,m){\n\t\tcin>>t;\n\t\tif(t==1){\n\t\t\tcin>>x>>z;\n\t\t\tmodify_vert(x,z-val[x]);\n\t\t\tval[x]=z;\n\t\t}else{\n\t\t\tcin>>x>>y>>z;z=-z;\n\t\t\tmodify_edge(x,y,z-mp[x][y]);\n\t\t\tmp[x][y]=mp[y][x]=z;\n\t\t}ans=query(ans);\n\t\tcout<<ans<<\" \";\n\t}\n\treturn 0;\n}\n//Crayan_r\n```",
        "postTime": 1678798671,
        "uid": 304222,
        "name": "jucason_xu",
        "ccfLevel": 0,
        "title": "P4695"
    },
    {
        "content": "## \u6d1b\u8c37 P4695 Banany \u9898\u89e3\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4695)\n\n### \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u6743\u503c $w_i$\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u6743\u503c $v_i$\u3002\u5b9a\u4e49\u4ece $s$ \u5230 $t$ \u7684\u8def\u5f84\u7684\u6743\u503c\u4e3a $w_t-\\sum_{e \\in path(s,t)} v_e$\u3002\u4e00\u5171\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e3a\u4fee\u6539\u4e00\u4e2a\u70b9\u6743\u6216\u4fee\u6539\u8fb9\u6743\u540e\uff0c\u4ece\u5f53\u524d\u8282\u70b9\u51fa\u53d1\uff0c\u80fd\u5230\u8fbe\u7684\u6743\u503c\u6700\u5927\u7684\u70b9\u3002\u82e5\u6709\u591a\u4e2a\u6743\u503c\u76f8\u540c\u7684\u70b9\u9009\u62e9\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u4f5c\u4e3a\u7ec8\u70b9\uff0c\u6ce8\u610f\uff0c\u8be2\u95ee\u540e\u4e00\u5b9a\u9700\u8981\u632a\u52a8\u5230\u5176\u4ed6\u70b9\uff0c\u4e0d\u53ef\u4ee5\u5446\u7740\u4e0d\u8d70\u3002\u521d\u59cb\u65f6\uff0c\u4f60\u5728 $1$ \u53f7\u8282\u70b9\u3002\n\n### \u9898\u76ee\u5206\u6790\n\n\u5148\u8003\u8651\u5355\u6b21\u8be2\u95ee\uff0c\u4e0d\u4fee\u6539\u7684\u60c5\u51b5\u3002\n\n\u56e0\u4e3a\u8d21\u732e\u5f0f\u4e0e\u6839\u65e0\u5173\uff0c\u6240\u4ee5\u4e0d\u59a8\u8bbe\u6839\u4e3a $1$ \u3002\n\n\u8003\u8651\u5c06 $\\sum _{e \\in path(s,t)}v_e$ \u62c6\u6210 $dis(s)+dis(t)-2 \\times dis(lca)$ \u5176\u4e2d $lca$ \u8868\u793a $s$ \u548c $t$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c$dis(x)$ \u4e3a\u4ece\u6839\u5230 $x$ \u7684\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e $t$\uff0c\u5229\u7528[\u6b27\u62c9\u5e8f\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148](https://oiwiki.com/graph/lca/#%E7%94%A8%E6%AC%A7%E6%8B%89%E5%BA%8F%E5%88%97%E8%BD%AC%E5%8C%96%E4%B8%BA-rmq-%E9%97%AE%E9%A2%98) \u4ee5\u53ca\u9884\u5904\u7406 $dis(x)$ \u53ef\u4ee5\u505a\u5230\u5355\u6b21 $O(1)$ \u7684\u66f4\u65b0\u7b54\u6848\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u518d\u8003\u8651\u4e0d\u5e26\u4fee\u4f46\u662f\u591a\u6b21\u8be2\u95ee\u4e0d\u540c\u8d77\u70b9\u7684\u7b80\u5316\u95ee\u9898\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u4ece $s$ \u51fa\u53d1\u53bb\u5bfb\u627e $t$ \u7684\uff0c\u6240\u4ee5 $dis(s)$ \u662f\u56fa\u5b9a\u7684\u3002\n\n\u8fd9\u542f\u53d1\u6211\u4eec\u5728 $lca$ \u5904\u7edf\u8ba1\u70b9\u5bf9 $s$ \u5230 $t$ \u7684\u8d21\u732e\u3002\n\n\u5199\u51fa\u53ea\u4e0e $lca$ \u548c $t$ \u6709\u5173\u7684\u8d21\u732e\u5f0f\uff0c\u4e5f\u5c31\u662f $2 \\times dis(lca)+w_t-dis(t)$ \u3002\u56e0\u4e3a\u6211\u4eec\u5728\u679a\u4e3e $lca$ \u7edf\u8ba1\u7b54\u6848\uff0c\u6240\u4ee5 $dis(lca)$ \u4e5f\u662f\u5b9a\u503c\uff0c\u5373\u80fd\u4f5c\u51fa\u8d21\u732e\u7684\u5c31\u662f $lca$ \u5b50\u6811\u4e2d\u7684\u70b9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7edf\u8ba1\u53ef\u80fd\u4f1a\u91cd\u590d\u3002\u8bbe $p$ \u4e3a $lca$ \u7684\u7956\u5148\u3002\u5219\u6211\u4eec\u5728 $p$ \u5904\u540c\u6837\u4f1a\u7edf\u8ba1\u5230 $t$ \u7684\u8d21\u732e\uff0c\u4f46\u662f $s$ \u4e0e $t$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e0d\u662f $p$\u3002\n\n\u867d\u7136\u5982\u6b64\uff0c\u56e0\u4e3a\u8fb9\u6743\u6ca1\u6709\u8d1f\u8fb9\u6743\uff0c\u6240\u4ee5 $dis(p)<dis(lca)$\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u867d\u7136\u6211\u4eec\u91cd\u590d\u7edf\u8ba1 $t$\uff0c\u4f46\u662f\u5728 $p$ \u7edf\u8ba1\u4e00\u5b9a\u6bd4\u5728 $lca$ \u7edf\u8ba1\u52a3\uff0c\u6240\u4ee5\u8fd9\u6837\u7edf\u8ba1\u662f\u6b63\u786e\u7684\u3002\n\n\u540c\u65f6\uff0c\u8fd9\u79cd\u7edf\u8ba1\u65b9\u6cd5\u4e5f\u8bf4\u660e\u5728\u4e0d\u540c\u7684 $s$ \u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u4fee\u6539\u8fb9\u6743\u4e0e\u70b9\u6743\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u9009\u62e9\u540c\u6837\u7684 $t$ \u4f5c\u4e3a\u7ec8\u70b9\uff0c\u9664\u4e86 $t$ \u672c\u8eab\u3002\n\n\u8003\u8651\u679a\u4e3e $lca$\uff0c\u6839\u636e\u4e0a\u8ff0\u8bc1\u660e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u5728 $lca$ \u5b50\u6811\u4e2d\uff0c\u62e5\u6709\u6700\u5927 $w_t-dis(t)$ \u7684 $t$ \u4e0e\u6b21\u5927\u7684 $t'$ \u5373\u53ef\u3002\uff08\u9700\u8981 $t'$ \u662f\u56e0\u4e3a\u4e0d\u80fd\u505c\u7559\u5728\u540c\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6b21\u5927\u503c\u6765\u66f4\u65b0\uff09\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528 $O(n)$ \u7684\u6df1\u641c\u6765\u5b9e\u73b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u73b0\u5728\u6211\u4eec\u89e3\u51b3\u4e86\u4e0d\u5e26\u4fee\u7684\u591a\u6b21\u8be2\u95ee\u8d77\u70b9\u7684\u7b80\u5316\u95ee\u9898\u3002\n\n\u8003\u8651\u5e26\u4fee\u6539\u7684\u600e\u4e48\u505a\u3002\n\n\u9996\u5148\u603b\u7ed3\u4e0b\u8fd9\u9053\u9898\u7684\u6027\u8d28\uff1a\n\n- \u66b4\u529b\u66f4\u65b0\u7b54\u6848\u662f\u6734\u7d20\u7684\uff0c\u5373\u6211\u4eec\u53ef\u4ee5 $O(1)$ \u8ba1\u7b97 $t$ \u5bf9 $s$ \u7684\u8d21\u732e\u3002\n- \u5728\u4e0d\u5e26\u4fee\u7684\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u4e0d\u540c\u7684 $s$ \u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u662f\u76f8\u540c\u7684\u3002\n\n\u8fd9\u4e24\u70b9\uff0c\u542f\u53d1\u6211\u4eec\u4f7f\u7528\u5bf9\u8be2\u95ee\u5206\u5757\u8fd9\u79cd\u505a\u6cd5\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u6bcf $\\sqrt n$ \u4e2a\u8be2\u95ee\u5206\u6bb5\uff0c\u66b4\u529b\u91cd\u6784\u4e00\u6b21\u539f\u6811\u3002\u5176\u4e2d\uff0c\u91cd\u6784\u5b9a\u4e49\u4e3a\u5c06\u7b80\u5316\u95ee\u9898\u4e2d\u9700\u8981\u7ef4\u62a4\u7684 $t$ \u4e0e $t'$ \u901a\u8fc7 $O(n)$ \u66b4\u529b\u7ef4\u62a4\u51fa\u6765\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u7ef4\u62a4\u5728\u8fd9 $\\sqrt n$ \u4e2d\u88ab\u4fee\u6539\u70b9\u6743\u7684\u70b9\u6240\u4f5c\u51fa\u7684\u8d21\u732e\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u5c06\u4fee\u6539\u8fc7\u8fb9\u6743\u7684\u8fb9\u6807\u8bb0\u51fa\u6765\uff0c\u8fd9\u6837\u539f\u6811\u6700\u591a\u88ab\u5206\u6210 $\\sqrt n$ \u4e2a\u5b50\u6811\u3002\n\n\u8003\u8651\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e0b\u51e0\u4e2a\u90e8\u5206\u8ba1\u7b97\uff1a\n\n- $lca$ \u4e0e $t$ \u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5185\uff0c\u4e14 $t$ \u5e76\u672a\u4fee\u6539\u8fc7\u3002\n- $lca$ \u4e0e $t$ \u4e0d\u5728\u540c\u4e00\u5b50\u6811\u5185\uff0c\u4e14 $t$ \u5e76\u672a\u4fee\u6539\u8fc7\u3002\n- $t$ \u7684\u70b9\u6743\u5728\u8fd9 $\\sqrt n$ \u4e2a\u64cd\u4f5c\u4e2d\u88ab\u4fee\u6539\u8fc7\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u4e09\u79cd\u60c5\u51b5\u5305\u542b\u4e86\u6240\u6709\u53ef\u80fd\u7684\u8d21\u732e\u60c5\u51b5\u3002\n\n\u7b2c\u4e00\u90e8\u5206 $lca$ \u4e0e $t$ \u5728\u540c\u4e00\u5b50\u6811\uff1a\n\n\u5199\u51fa\u8d21\u732e\u5f0f\u5b50 $2 \\times dis(lca)+w_t-dis(t)$\u3002\u56e0\u4e3a\u6211\u4eec\u94a6\u5b9a\u4e86 $t$ \u672a\u4fee\u6539\u70b9\u6743\uff0c\u6240\u4ee5\u53ef\u80fd\u5bf9\u8fd9\u4e2a\u8d21\u732e\u4ea7\u751f\u5f71\u54cd\u7684\u64cd\u4f5c\u5c31\u662f\u4fee\u6539\u8fb9\u6743\u64cd\u4f5c\u3002\u56e0\u4e3a\u6211\u4eec\u628a\u66f4\u6539\u8fc7\u8fb9\u6743\u7684\u8fb9\u6807\u8bb0\u51fa\u6765\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6811\u4e2d\u7684\u6240\u6709 $dis(x)$\uff0c\u4ed6\u4eec\u7684 $\\Delta dis$ \u662f\u56fa\u5b9a\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u5b50\u6811\u7ef4\u62a4 $\\Delta dis$\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5efa\u51fa\u8fd9\u4e9b\u5b50\u6811\u7684\u6839\u6240\u5f62\u6210\u7684[\u865a\u6811](https://oiwiki.com/graph/virtual-tree/) \uff0c\u5728\u4fee\u6539\u67d0\u6761\u8fb9\u8fb9\u6743\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u904d\u5386\u8fd9\u68f5\u865a\u6811\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u5c31\u597d\u4e86\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u9700\u8981 $O(siz)$ \u7684\u5355\u8c03\u6808\u5efa\u7acb\u7684\u529e\u6cd5\uff0c\u76f4\u63a5\u66b4\u529b\u5efa\u6811\u5c31\u597d\u4e86\u3002~~\u53cd\u6b63 $O(n \\sqrt n)$ \u548c $O(n)$\u5dee\u522b\u4e0d\u5927~~ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n- \u7528\u6bcf\u4e2a\u5b50\u6811\u7684 $t$ \u548c $t'$ \u66f4\u65b0\u7b54\u6848\uff0c\u4e00\u5171 $\\sqrt n$ \u4e2a\u5b50\u6811\uff0c\u9700\u8981\u66f4\u65b0 $\\sqrt n$ \u4e2a\u7b54\u6848\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5212\u5206\u597d\u7684\u6bcf\u6bb5\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u603b\u5171\u5212\u5206\u51fa\u4e86 $\\sqrt n$ \u6bb5\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\sqrt n)$\u3002\n\n- \u7ef4\u62a4\u6bcf\u68f5\u5b50\u6811\u7684 $\\Delta dis$\uff0c\u4fee\u6539\u5171\u6709 $\\sqrt n$ \u4e2a\uff0c\u865a\u6811\u7684\u5927\u5c0f\u4e3a $\\sqrt n$\uff0c\u6bcf\u6bb5\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c$\\sqrt n$ \u6bb5\u7684\u590d\u6742\u5ea6 $O(n \\sqrt n)$\u3002\n\n\u7b2c\u4e8c\u90e8\u5206 $lca$ \u4e0e $t$ \u4e0d\u5728\u540c\u4e00\u5b50\u6811\uff1a\n\n\u56e0\u4e3a $lca$ \u548c $t$ \u4e0d\u5728\u540c\u4e00\u5b50\u6811\uff0c\u6240\u4ee5 $t$ \u6240\u5728\u5b50\u6811\u7684\u6240\u6709\u70b9\u90fd\u5728 $lca$ \u7684\u5b50\u6811\u4e2d\u3002\u6839\u636e\u4e0a\u9762\u7684\u5b50\u95ee\u9898\u4e2d\u7684\u7ed3\u8bba\uff0c$lca$ \u53ea\u4f1a\u9009\u62e9 $t$ \u6240\u5728\u5b50\u6811\u4e2d $w_t-dis(t)$ \u6700\u5927\u7684 $t$ \u4e0e\u6b21\u5927\u7684 $t'$\u3002\u5bf9\u4e8e $t$ \u6240\u5728\u5b50\u6811\u4e2d\u7684\u70b9\u6765\u8bf4 $\\Delta dis$ \u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48 $w_t-dis(t)$ \u7684\u6700\u5927\u7684 $t$\uff0c\u4e0e\u6b21\u5927\u7684 $t'$ \u5c31\u662f\u6211\u4eec\u6700\u5f00\u59cb\u91cd\u6784\u6240\u7ef4\u62a4\u51fa\u7684 $t$ \u4e0e $t'$ \u3002\n\n\u540c\u7b2c\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt n)$\u3002\n\n\u7b2c\u4e09\u90e8\u5206\uff0c\u4fee\u6539\u8fc7\u7684 $t$ \u5bf9\u7b54\u6848\u505a\u51fa\u8d21\u732e\uff1a\n\n\u56e0\u4e3a\u4fee\u6539\u8fc7\u7684 $t$ \u53ea\u4f1a\u6709 $\\sqrt n$ \u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u5f00\u59cb\u63d0\u5230\u7684 $O(1)$ \u66f4\u65b0\u70b9\u5bf9\u7684\u65b9\u6cd5\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u540c\u524d\u9762\u4e24\u90e8\u5206\u4e00\u6837\u5206\u6790\uff0c\u4e3a $O(n \\sqrt n)$\u3002\n\n~~\u4e8e\u662f\u6211\u4eec\u5c31\u8f7b\u677e\u628a\u8fd9\u9053\u9898\u505a\u5b8c\u4e86\u3002~~\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u4ee3\u7801\u5927\u81f4\u53ef\u5206\u4e3a\uff1a\n\n- ```prework``` \u548c ```ST_table```\uff0c\u7528\u6765 $O(1)$ \u6c42\u89e3\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n- ```upd``` \u7528\u4e8e\u5c06 $y$ \u7684 $t$ \u4e0e $t'$ \u7ed9 $x$ \u7684 $t$ \u4e0e $t'$ \u505a\u8d21\u732e\u3002\n\n- ```update``` \u7528\u4e8e\u66f4\u65b0\u6bcf\u4e2a\u5b50\u6811\u7684 $\\Delta dis$\u3002\n\n- ```Dis``` \u7528\u4e8e\u8ba1\u7b97 $x$ \u771f\u6b63\u7684 $dis(x)$\u3002\n\n- ```Upans``` \u7528\u4e8e\u66f4\u65b0\u7b54\u6848\u3002\n\n- ```prebuild``` \u7528\u4e8e\u8ba1\u7b97\u540c\u4e00\u5b50\u6811\u4e2d\u7684\u5b50\u6811\u7684 $t$ \u4e0e $t'$\u3002\uff08\u6709\u70b9\u7ed5\uff0c\u7b2c\u4e00\u4e2a\u5b50\u6811\u662f\u6307\u628a\u4fee\u6539\u8fc7\u8fb9\u6743\u7684\u8fb9\u6807\u8bb0\u540e\uff0c\u5f62\u6210\u7684 $\\sqrt n$ \u4e2a\u5b50\u6811\uff0c\u7b2c\u4e8c\u4e2a\u5b50\u6811\uff0c\u5c31\u662f\u5b50\u6811\u3002\uff09\n\n- ```rebuild``` \u91cd\u6784\u51fd\u6570\uff0c\u7528\u4e8e\u7ef4\u62a4 $t$ \u4e0e $t'$ \u7684\u540e\u7f00\u6700\u4f18\u89e3\u7528\u4e8e\u5feb\u901f\u66f4\u65b0\u7edf\u8ba1\u7b54\u6848\u7684\u7b2c\u4e00\u90e8\u5206\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\ntemplate <typename T> inline void read(T &x)\n{\n\tx=0;T f=1;char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tx*=f;\n}\ntemplate <typename T,typename ...Args>void read(T &x,Args&...args){read(x),read(args...);}\ntemplate <typename T> void print(T x)\n{\n\tif(x<0) x=-x,putchar('-');\n\tif(x>9) print(x/10);\n\tputchar(x%10+48);\n}\ntemplate <typename T> void print(T x,char c){print(x); putchar(c);}\ntemplate<typename T>inline void output(T x){print(x,' ');}\ntemplate<typename T,typename ...Arg>inline void output(T x,Arg ...arg){output(x);output(arg...);}\nconst int N=200007,M=400;\nint n,q,cnt,h[N],euler[N],idx,pos[N],ans,nxt,pa[N],res1[N],res2[N],vis[N],vise[N],top[N];\nll val[N],vale[N],temp,dis[N],now1[N],now2[N],tag[N];\nvector<int>chg,chge,edg[N];\nstruct edge{int to,nxt;}mp[N<<1];\nstruct ST_table\n{\n\tint f[20][N],lg[N];\n\tvoid prework()\n\t{\n\t\tfor(int i=2;i<N;i++) lg[i]=lg[i>>1]+1;\n\t\tfor(int i=1;i<n<<1;i++) f[0][i]=euler[i];\n\t\tfor(int i=1;i<20;i++)\n\t\t\tfor(int j=1;j+(1<<i)<=n<<1;j++)\n\t\t\t{\n\t\t\t\tif(pos[f[i-1][j]]<pos[f[i-1][j+(1<<(i-1))]]) f[i][j]=f[i-1][j];\n\t\t\t\telse f[i][j]=f[i-1][j+(1<<(i-1))];\n\t\t\t}\n\t}\n\tint ask(int l,int r)\n\t{\n\t\tint len=lg[r-l+1];\n\t\tif(pos[f[len][l]]<pos[f[len][r-(1<<len)+1]]) return f[len][l];\n\t\telse return f[len][r-(1<<len)+1];\n\t}\n\tint LCA(int x,int y){return ask(min(pos[x],pos[y]),max(pos[x],pos[y]));}\n}__st;\nstruct node{int opt,pos; ll val;}ask[N];\nvoid add(int x,int y)\n{\n\tcnt++;\n\tmp[cnt].nxt=h[x];\n\tmp[cnt].to=y;\n\th[x]=cnt;\n}\nvoid prework(int x,int fa)\n{\n\teuler[++idx]=x; pos[x]=idx; pa[x]=fa;\n\tfor(int i=h[x];i;i=mp[i].nxt)\n\t{\n\t\tint y=mp[i].to;\n\t\tif(y==fa) continue;\n\t\tvale[y]=dis[(i+1)>>1];\n\t\tprework(y,x); euler[++idx]=x;\n\t}\n}\nvoid upd(int x,int y)\n{\n\tif(now1[x]>now1[y])\n\t{\n\t\tll mx=-0x3f3f3f3f3f3f3f3f; int pos=0;\n\t\tif(now2[x]>mx) mx=now2[x],pos=res2[x];\n\t\telse if(now2[x]==mx) pos=min(pos,res2[x]);\n\t\tif(res1[y]!=res1[x])\n\t\t{\n\t\t\tif(now1[y]>mx) mx=now1[y],pos=res1[y];\n\t\t\telse if(now1[y]==mx) pos=min(pos,res1[y]);\n\t\t}\n\t\tif(res2[y]!=res1[x])\n\t\t{\n\t\t\tif(now2[y]>mx) mx=now2[y],pos=res2[y];\n\t\t\telse if(now2[y]==mx) pos=min(pos,res2[y]);\n\t\t}\n\t\tres2[x]=pos; now2[x]=mx;\n\t}\n\telse\n\t{\n\t\tll mx=-0x3f3f3f3f3f3f3f3f; int pos=0;\n\t\tif(now2[y]>mx) mx=now2[y],pos=res2[y];\n\t\telse if(now2[y]==mx) pos=min(pos,res2[y]);\n\t\tif(res1[x]!=res1[y])\n\t\t{\n\t\t\tif(now1[x]>mx) mx=now1[x],pos=res1[x];\n\t\t\telse if(now1[x]==mx) pos=min(pos,res1[x]);\n\t\t}\n\t\tif(res2[x]!=res1[y])\n\t\t{\n\t\t\tif(now2[x]>mx) mx=now2[x],pos=res2[x];\n\t\t\telse if(now2[x]==mx) pos=min(pos,res2[x]);\n\t\t}\n\t\tres1[x]=res1[y]; now1[x]=now1[y];\n\t\tres2[x]=pos; now2[x]=mx;\n\t}\n}\nvoid update(int x,ll del)\n{\n\ttag[x]+=del;\n\tfor(auto y:edg[x])\n\t\tupdate(y,del);\n}\nll Dis(int x){return dis[x]+tag[top[x]];}\nbool Updans(int x)\n{\n\tif(!x||x==ans) return false;\n\tint lca=__st.LCA(ans,x); ll now=2*Dis(lca)+val[x]-Dis(x);\n\tif(now>temp) temp=now,nxt=x;\n\telse if(now==temp) nxt=min(nxt,x);\n\treturn true;\n}\nvoid prebuild(int x,int fa)\n{\n\tnow1[x]=now2[x]=-0x3f3f3f3f3f3f3f3f; res1[x]=res2[x]=0;\n\tif(!vis[x]) res1[x]=x,now1[x]=val[x]-dis[x];\n\tfor(int i=h[x];i;i=mp[i].nxt)\n\t{\n\t\tint y=mp[i].to;\n\t\tif(y==fa) continue;\n\t\tdis[y]=dis[x]+vale[y];\n\t\tprebuild(y,x);\n\t\tif(!vise[y]) upd(x,y);\n\t}\n}\nvoid rebuild(int x,int fa,int ntop)\n{\n\ttop[x]=ntop;\n\tfor(int i=h[x];i;i=mp[i].nxt)\n\t{\n\t\tint y=mp[i].to;\n\t\tif(y==fa) continue;\n\t\tif(!vise[y]) upd(y,x);\n\t\tif(vise[y]) rebuild(y,x,y),edg[ntop].push_back(y);\n\t\telse rebuild(y,x,ntop);\n\t}\n}\nint main()\n{\n\tread(n,q); ans=1;\n\tfor(int i=1;i<=n;i++) read(val[i]);\n\tfor(int i=1,x,y;i<n;i++)\n\t\tread(x,y,dis[i]),add(x,y),add(y,x);\n\tprework(1,0); __st.prework();\n\tfor(int i=1,x,y;i<=q;i++)\n\t{\n\t\tread(ask[i].opt);\n\t\tif(ask[i].opt==1) read(ask[i].pos,ask[i].val);\n\t\telse\n\t\t{\n\t\t\tread(x,y);\n\t\t\tif(pos[x]<pos[y]) swap(x,y);\n\t\t\task[i].pos=x; read(ask[i].val);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i+=M)\n\t{\n\t\tchg.resize(0); chge.resize(0); dis[1]=0;\n\t\tfor(int j=i;j<=q&&j-i<M;j++)\n\t\t{\n\t\t\tif(ask[j].opt==1) vis[ask[j].pos]=1,chg.push_back(ask[j].pos);\n\t\t\telse vise[ask[j].pos]=1,chge.push_back(ask[j].pos);\n\t\t}\n\t\tprebuild(1,0); chge.push_back(1);\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(res1[j]) now1[j]+=dis[j]*2;\n\t\t\tif(res2[j]) now2[j]+=dis[j]*2;\n\t\t}\n\t\trebuild(1,0,1);\n\t\tfor(int j=i,now;j<=q&&j-i<M;j++)\n\t\t{\n\t\t\ttemp=-0x3f3f3f3f3f3f3f3f;\n\t\t\tif(ask[j].opt==1) val[ask[j].pos]=ask[j].val;\n\t\t\telse update(ask[j].pos,ask[j].val-vale[ask[j].pos]),vale[ask[j].pos]=ask[j].val;\n\t\t\tfor(auto pot:chg) Updans(pot);\n\t\t\tfor(auto pot:chge) if(!Updans(res1[pot])) Updans(res2[pot]);\n\t\t\tnow=ans; while(now){if(!Updans(res1[now])) Updans(res2[now]); now=pa[top[now]];}\n\t\t\tans=nxt; print(ans,' ');\n\t\t}\n\t\tfor(auto pot:chge) tag[pot]=0,edg[pot].resize(0);\n\t\tfor(int j=i;j<=q&&j-i<M;j++)\n\t\t{\n\t\t\tif(ask[j].opt==1) vis[ask[j].pos]=0;\n\t\t\telse vise[ask[j].pos]=0;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1678450663,
        "uid": 331804,
        "name": "slenbol",
        "ccfLevel": 7,
        "title": "P4695 Banany \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u6765\u4e00\u4e2a\u6a21\u62df\u8d5b\u65f6\u60f3\u51fa\u6811\u5256\u7684\u505a\u6cd5\u3002\n\n\u8bb0 $d_u$ \u8868\u793a\u6839\u5230 $u$ \u7684\u8ddd\u79bb\uff0c$l$ \u8868\u793a $\\operatorname{lca}(s,t)$\uff0c\u5219\u4ee3\u4ef7\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\n$$\n-d_s+(z_t-d_t+2d_{l})\n$$\n\n\u90a3\u4e48\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u66b4\u529b\u505a\u6cd5\uff0c\u6bcf\u6b21\u4ece $s$ \u66b4\u529b\u5411\u4e0a\u8df3\u679a\u4e3e $l$ \uff0c\u5e76\u7528 $z_t-d_t+2d_l$ \u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u91cc\u8981\u6c42 $t$ \u5728 $l$ \u7684\u5b50\u6811\u4e2d\u4e14\u4e0d\u548c $s$ \u6765\u81ea\u540c\u4e00\u68f5\u5b50\u6811\u3002\n\n\u8fd9\u91cc $t$ \u7684\u9650\u5236\u6761\u4ef6\u592a\u590d\u6742\uff0c\u8003\u8651\u7b80\u5316\uff0c\u6ce8\u610f\u5230\u5982\u679c $l$ \u53ea\u662f $s,t$ \u7684\u516c\u5171\u7956\u5148\uff0c\u800c\u975e\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u53ea\u4f1a\u628a\u7b54\u6848\u7b97\u5c0f\u5e76\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7b54\u6848\uff0c\u6545\u6211\u4eec\u5bf9 $t$ \u7684\u9650\u5236\u6761\u4ef6\u5c31\u53ef\u4ee5\u53d8\u4e3a\uff1a$t$ \u5728 $l$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u9898\u76ee\u8981\u6c42 $s\\neq t$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u8bb0\u4e00\u4e0b\u6b21\u5927\u503c\u5373\u53ef\uff0c\u7531\u4e8e\u6b21\u5927\u503c\u662f\u7c7b\u4f3c\u7684\uff0c\u4e0b\u9762\u5c31\u53ea\u8bb2\u5982\u4f55\u7ef4\u62a4\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u5982\u4f55\u52a0\u901f\u4e0a\u9762\u7684\u8fc7\u7a0b\u3002\u4e00\u79cd\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $u$ \u76f4\u63a5\u7ef4\u62a4 $2d_u+z_x-d_x$ \u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d $x$ \u662f $u$ \u5b50\u6811\u4e2d\u7684\u70b9\u3002\u6811\u5256\u540e\uff0c\u628a\u8fd9\u4e2a\u4e1c\u897f\u6309\u7167 dfs \u5e8f\u653e\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5c31\u53ef\u4ee5\u67e5\u8be2\u4e86\u3002\u4f46\u95ee\u9898\u662f\u4fee\u6539\u4e86\u70b9\u6743\u6216\u8fb9\u6743\u540e\uff0c\u5f53\u524d\u70b9\u6216\u8fb9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u8fd9\u4e2a\u503c\u90fd\u8981\u88ab\u4fee\u6539\uff0c\u53c8\u56e0\u4e3a\u662f\u7ef4\u62a4\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4e0d\u592a\u80fd\u901a\u8fc7\u6253\u6807\u8bb0\u7684\u65b9\u5f0f\u5feb\u901f\u4fee\u6539\u3002\n\n\u4e8e\u662f\u5c31\u5e94\u8be5\u60f3\u5230\u4e00\u4e2a\u7ecf\u5178\u5957\u8def\uff1a\u53ea\u7ef4\u62a4\u8f7b\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u3002\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $u$ \u7ef4\u62a4 $2d_u+z_x-d_x$ \u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d $x$ \u662f $u$ \u8f7b\u5b50\u6811\u4e2d\u7684\u70b9\u3002\n\n\u5148\u8003\u8651\u4fee\u6539\u70b9\u6743\uff0c\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u540e\uff0c\u53ea\u4f1a\u6709 $\\log$ \u4e2a\u70b9\u4f1a\u6539\u53d8\uff08\u56e0\u4e3a\u5305\u542b $u$ \u7684\u8f7b\u5b50\u6811\u4e2a\u6570\u662f $\\log$ \u7684\uff09\u3002\u4e3a\u4e86\u8ba1\u7b97\u8fd9 $\\log$ \u4e2a\u70b9\u65b0\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u652f\u6301\u67e5\u8be2\u5b50\u6811\u4e2d $z_x-d_x$ \u7684\u6700\u5927\u503c\uff0c\u4e8e\u662f\u8fd8\u8981\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4 $z_x-d_x$ \u7684\u533a\u95f4\u6700\u5927\u503c\u3002\n\n\u4fee\u6539\u8fb9\u6743\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\u8bbe\u8fd9\u6761\u8fb9\u4e3a $(u,v)$ \uff0c**\u53d8\u5316\u91cf**\u4e3a $c$\uff0c\u5176\u4e2d $v$ \u7684\u6df1\u5ea6\u66f4\u6df1\u3002\n+ \u5bf9\u4e8e $v$ \u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\uff0c$d$ \u90fd\u4f1a\u589e\u52a0 $c$\uff0c\u800c\u5bf9\u4e8e\u6240\u6709 $v$ \u5b50\u6811\u4e2d\u7684 $u$ \uff0c$2d_u+z_x-d_x$ \u7684\u6700\u5927\u503c\u4e5f\u4f1a\u6070\u597d\u589e\u52a0 $c$ \uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u52a0\u6cd5\u6807\u8bb0\u5373\u53ef\u3002\n+ \u5bf9\u4e8e\u4e0d\u5728 $v$ \u5b50\u6811\u4e2d\u7684\u70b9\uff0c\u548c\u524d\u9762\u7c7b\u4f3c\uff0c\u53ea\u6709 $\\log$ \u4e2a\u66f4\u6539\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\u5230\u5e95\u7ef4\u62a4\u4e86\u4ec0\u4e48\uff1a\n\n+ \u4e00\u4e2a `bit` \uff0c\u7ef4\u62a4 $d_u$\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\u8be2\u3002\n+ \u4e00\u4e2a `seg` \uff0c\u7ef4\u62a4 $d_u-z_u$\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2 $\\max$\u3002\n+ \u4e00\u4e2a `seg` \uff0c\u7ef4\u62a4 $2d_u+z_x-d_x$\uff08$x$ \u662f $u$ \u8f7b\u5b50\u6811\u4e2d\u7684\u70b9\uff09\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 $\\max$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$ \uff0c\u8dd1\u5f97\u5f88\u5feb\u3002",
        "postTime": 1678323597,
        "uid": 204935,
        "name": "hexagon",
        "ccfLevel": 9,
        "title": "P4695"
    },
    {
        "content": "\u8003\u8651\u7528\u52a8\u6001\u70b9\u5206\u6cbb\u6765\u89e3\u51b3\u50cf\u672c\u9898\u8fd9\u6837\u5e26\u4fee\u7684\u6811\u4e0a\u8def\u5f84\u95ee\u9898\u3002\n\n\u9996\u5148\u5bf9\u539f\u6811\u8fdb\u884c\u70b9\u5206\u6cbb\uff0c\u5efa\u51fa\u70b9\u5206\u6811\uff0c\u5728\u70b9\u5206\u6811\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4ee5\u8be5\u8282\u70b9\u4e3a\u8d77\u70b9\uff0c\u5230\u5176\u70b9\u5206\u6811\u5b50\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5229\u6da6\u3002\n\n\u67e5\u8be2\u65f6\u53ea\u9700\u5728\u70b9\u5206\u6811\u4e0a\u5f53\u524d\u6240\u5728\u8282\u70b9\u5f80\u4e0a\u8df3\u7236\u4eb2\uff0c\u5728\u5176\u5230\u70b9\u5206\u6811\u6839\u8282\u70b9\u7684\u94fe\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u3002\u8df3\u5230\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u9664\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5229\u6da6\u6700\u5927\u503c\uff0c\u540c\u65f6\u52a0\u4e0a\u5176\u5230\u5f53\u524d\u8282\u70b9\u7684\u82b1\u8d39\u3002\n\n\u4fee\u6539\u70b9\u6743\u53ea\u9700\u5728\u70b9\u5206\u6811\u4e0a\u5f80\u4e0a\u8df3\u7236\u4eb2\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n\u8003\u8651\u8fb9\u6743\u7684\u4fee\u6539\u5f71\u54cd\u7684\u662f\u5f53\u524d\u6839\u6240\u5bf9\u5e94\u7684\u4e00\u4e2a\u5b50\u6811\uff0c\u5bf9\u4e8e\u8fb9\u6743\u7684\u4fee\u6539\uff0c\u4ece\u5176\u4e24\u4e2a\u7aef\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u6df1\u5ea6\u66f4\u5927\uff0c\u5373\u70b9\u5206\u6cbb\u9012\u5f52\u5c42\u6570\u66f4\u6df1\u7684\u70b9\u5f00\u59cb\u5f80\u4e0a\u8df3\u7236\u4eb2\uff0c\u6bcf\u6b21\u4fee\u6539\u5728\u539f\u6811\u4e0a\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\uff0c\u6df1\u5ea6\u66f4\u6d45\u7684\u90a3\u4e2a\u7aef\u70b9\u3002\n\n\u70b9\u5206\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u5728\u7ef4\u62a4\u65f6\u4ee5\u8282\u70b9\u7684 $dfs$ \u5e8f\u4e3a\u4e0b\u6807\uff0c\u4fee\u6539\u5b50\u6811\u4fe1\u606f\u53ea\u9700\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010\n#define maxm 200010\n#define maxt 3500010\n#define inf 1000000000000000\n#define mid ((l+r)>>1)\n#define mk make_pair\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,q,tree_cnt,dfn_cnt,tot,root,pos=1;\nint fa[maxn],ma[maxn],siz[maxn],num[maxn],d[maxn];\nint rt[maxn],ls[maxt],rs[maxt],in[20][maxn],out[20][maxn];\nll v[maxn],tag[maxt];\nbool vis[maxn];\nmap<pair<int,int>,ll> w;\nstruct edge\n{\n    int to,nxt;\n    ll v;\n}e[maxm];\nint head[maxn],edge_cnt;\nvoid add(int from,int to,ll val)\n{\n    e[++edge_cnt]=(edge){to,head[from],val};\n    head[from]=edge_cnt;\n}\nstruct node\n{\n    ll val;\n    int id;\n}t[maxt];\nbool operator <(const node &a,const node &b)\n{\n    if(a.val==b.val) return a.id>b.id;\n    return a.val<b.val;\n}\nvoid pushtag(int cur,ll v)\n{\n    t[cur].val+=v,tag[cur]=v;\n}\nvoid pushdown(int cur)\n{\n    if(!tag[cur]) return;\n    pushtag(ls[cur],tag[cur]),pushtag(rs[cur],tag[cur]),tag[cur]=0;\n}\nvoid insert(int l,int r,int pos,ll v,int id,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    if(l==r)\n    {\n        t[cur]=(node){v,id};\n        return;\n    }\n    if(pos<=mid) insert(l,mid,pos,v,id,ls[cur]);\n    else insert(mid+1,r,pos,v,id,rs[cur]);\n    t[cur]=max(t[ls[cur]],t[rs[cur]]);\n}\nvoid modify(int L,int R,int l,int r,ll v,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    if(L<=l&&R>=r)\n    {\n        pushtag(cur,v);\n        return;\n    }\n    pushdown(cur);\n    if(L<=mid) modify(L,R,l,mid,v,ls[cur]);\n    if(R>mid) modify(L,R,mid+1,r,v,rs[cur]);\n    t[cur]=max(t[ls[cur]],t[rs[cur]]);\n}\nnode query(int L,int R,int l,int r,int cur)\n{\n    if(L>R||!cur) return (node){-inf,0};\n    if(L<=l&&R>=r) return t[cur];\n    pushdown(cur);\n    if(R<=mid) return query(L,R,l,mid,ls[cur]);\n    if(L>mid) return query(L,R,mid+1,r,rs[cur]);\n    return max(query(L,R,l,mid,ls[cur]),query(L,R,mid+1,r,rs[cur]));\n}\nvoid dfs_root(int x,int fath)\n{\n    siz[x]=1,ma[x]=0;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fath) continue;\n        dfs_root(y,x),siz[x]+=siz[y],ma[x]=max(ma[x],siz[y]);\n    }\n    ma[x]=max(ma[x],tot-siz[x]);\n    if(ma[x]<ma[root]) root=x;\n}\nvoid dfs_dis(int x,int fath,ll dis,int id)\n{\n    in[d[id]][x]=++dfn_cnt,insert(1,num[id],dfn_cnt,v[x]-dis,x,rt[id]);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fath) continue;\n        dfs_dis(y,x,dis+e[i].v,id);\n    }\n    out[d[id]][x]=dfn_cnt;\n}\nvoid solve(int x,int depth)\n{\n    int now=tot;\n    d[x]=depth,vis[x]=true,num[x]=now,dfn_cnt=0,dfs_dis(x,0,0,x);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]) continue;\n        root=0,tot=siz[y];\n        if(siz[y]>siz[x]) tot=now-siz[x];\n        dfs_root(y,x),fa[root]=x,solve(root,depth+1);\n    }\n}\nint main()\n{\n    read(n),read(q);\n    for(int i=1;i<=n;++i) read(v[i]);\n    for(int i=1;i<n;++i)\n    {\n        int x,y;\n        ll v;\n        read(x),read(y),read(v);\n        add(x,y,v),add(y,x,v);\n        if(x>y) swap(x,y);\n        w[mk(x,y)]=v;\n    }\n    tot=ma[0]=n,dfs_root(1,0),solve(root,1);\n    while(q--)\n    {\n        int opt,x,y,p;\n        ll val,t;\n        node ans=(node){-inf,0};\n        read(opt);\n        if(opt==1)\n        {\n            read(x),read(val);\n            for(int i=x;i;i=fa[i])\n                modify(in[d[i]][x],in[d[i]][x],1,num[i],val-v[x],rt[i]);\n            v[x]=val;\n        }\n        else\n        {\n            read(x),read(y),read(val);\n            if(x>y) swap(x,y);\n            t=w[mk(x,y)]-val,w[mk(x,y)]=val;\n            if(d[x]<d[y]) p=x;\n            else p=y;\n            while(p)\n            {\n                if(in[d[p]][x]>in[d[p]][y]) modify(in[d[p]][x],out[d[p]][x],1,num[p],t,rt[p]);\n                else modify(in[d[p]][y],out[d[p]][y],1,num[p],t,rt[p]);\n                p=fa[p];\n            }\n        }\n        for(int i=pos;i;i=fa[i])\n        {\n            node now=max(query(1,in[d[i]][pos]-1,1,num[i],rt[i]),query(in[d[i]][pos]+1,num[i],1,num[i],rt[i]));\n            now.val+=query(in[d[i]][pos],in[d[i]][pos],1,num[i],rt[i]).val-v[pos],ans=max(ans,now);\n        }\n        printf(\"%d \",pos=ans.id);\n    }\n    return 0;\n}\n```",
        "postTime": 1595243737,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4695 \u3010[PA2017]Banany\u3011"
    }
]