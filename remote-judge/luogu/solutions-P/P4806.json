[
    {
        "content": "\u6211\u4eec\u628a\u539f\u5148\u7684 $n$ \u6761\u8fb9\u79f0\u4f5c**\u5b9e\u8fb9**\uff0c\u5176\u5b83\u8fb9\u79f0\u4f5c**\u865a\u8fb9**\u3002\n\n\u5148\u6c42\u51fa\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811 $\\mathcal{T}$ \u3002\n\n\u5bf9\u4e8e $D=0$ \u7684\u60c5\u51b5\uff0c\u6700\u4f18\u7684\u65b9\u6848\u80af\u5b9a\u5c31\u662f $\\mathcal{T}$ \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\mathcal{T}$ \u4e2d\u865a\u8fb9\u7684\u6570\u91cf\u3002\n\n\u5bf9\u4e8e $D\\ge 0$ \u7684\u60c5\u51b5\uff0c\u663e\u7136\u5730\uff0c\u4f7f\u7528\u7ba1\u9053\u63a8\u8fdb\u5668\u7684\u8fb9\u4e00\u5b9a\u662f\u201c\u6709\u6548\u65b9\u6848\u201d\u91cc\u7684\u6700\u5927\u8fb9\u3002\n\n\u6211\u4eec\u8003\u8651\u5728 $\\mathcal{T}$ \u4e0a\u8fdb\u884c\u8c03\u6574\uff0c\u7531\u4e8e\u4f7f\u7528\u63a8\u8fdb\u5668\u7684\u8fb9\u8d39\u7528\u81f3\u591a\u88ab\u51cf\u4e3a $0$ \uff0c\u90a3\u4e48\u7528\u5b9e\u8fb9 $x\\notin \\mathcal{T}$ \u66ff\u6362\u865a\u8fb9 $y\\in \\mathcal{T}$ \u4f7f\u5f97\u8d39\u7528\u603b\u548c\u4e0d\u53d8\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a\n\n- \u5c06 $x$ \u66ff\u6362  \u540e\u8fd8\u662f\u4e00\u68f5\u751f\u6210\u6811\uff08\u4fdd\u8bc1\u65b9\u6848\u6709\u6548\uff09\u3002\n- $y$ \u662f $\\mathcal{T}$ \u4e2d\u7684\u6700\u5927\u8fb9\u3002\n- $w(x),w(y)\\le D$ \uff0c\u5373\u4f7f\u7528\u63a8\u8fdb\u5668\u540e $x,y$ \u8d39\u7528\u5747\u4e3a $0$ \uff08\u4fdd\u8bc1\u603b\u8d39\u7528\u4e0d\u53d8\uff09\u3002\n\n\u4e8e\u662f\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684 $x,y$ \uff0c\u82e5\u65e0\u5219\u7b54\u6848\u540c $D=0$ \u7684\u60c5\u51b5\uff0c\u53cd\u4e4b\u7b54\u6848\u4e3a $D=0$ \u7684\u60c5\u51b5 $-1$ \u3002\n\n\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u5462\uff1f~~\u53ea\u8981\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 $y$ \uff0c\u7136\u540e**\u76f8\u4fe1**\u4e00\u5b9a\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684 $x$ \u628a\u5b83\u66ff\u6362\u5c31\u80fd\u8fc7\u4e86\u3002~~\n\n\u53ea\u8981\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 $y$ \uff0c\u7136\u540e\u679a\u4e3e\u8fb9\u6743 $\\le D$ \u4e14\u4e0d\u5728 $\\mathcal{T}$ \u4e0a\u7684\u5b9e\u8fb9 $x$ \uff0c\u5224\u65ad\u4e00\u4e0b $y$ \u662f\u5426\u5728 $u(x)$ \u5230 $v(x)$ \u5728  \u4e0a\u7684\u8def\u5f84\u91cc\u5373\u53ef\uff0c\u8fd9\u4e2a\u5199\u4e2a LCA \u5c31\u80fd\u7ef4\u62a4\u4e86\u3002",
        "postTime": 1606828195,
        "uid": 116015,
        "name": "bellmanford",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4806 \u3010[CCC 2017]\u6700\u5c0f\u8d39\u7528\u6d41\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u524d $n-1$ \u6761\u8fb9\u4e3a\u9ed1\u8fb9\uff0c\u5176\u4f59\u4e3a\u767d\u8fb9\uff0c\u8981\u6c42\u5728\u628a\u4efb\u610f\u6b63\u597d\u4e00\u6761\u8fb9$i$\u7684\u6743\u503c\u53d8\u6210 $\\max(c_i-d,0)$ \u7684\u60c5\u51b5\u4e0b\u6c42\u751f\u6210\u6811**\u6743\u503c\u6700\u5c0f**\u7684\u540c\u65f6\u767d\u8fb9\u7684\u6700\u5c11\u6570\u76ee\u3002\n\n### \u9898\u89e3\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `kruskal` \u7b97\u6cd5\u6c42\u89e3\uff0c\u8bbe\u6392\u5e8f\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a\u8fb9\u6743\u5927\u5c0f\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u8fb9\u662f\u9ed1\u8272/\u767d\u8272\uff0c\u6309\u8fb9\u6743\u5c0f\u4f18\u5148\uff0c\u9ed1\u8fb9\u4f18\u5148\u7684\u65b9\u5f0f\u6c42\u51fa\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u90a3\u4e00\u6761\u51cf\u53bb $d$ \u6743\u503c\u7684\u8fb9\uff0c\u6839\u636e\u8d2a\u5fc3\u6613\u77e5\uff0c\u5f53\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8e $d$ \u65f6\uff0c\u8fd9\u6761\u8fb9\u539f\u6765\u7684\u8fb9\u6743\u8d8a\u5927\u51cf\u53bb\u7684\u8fb9\u6743\u4e5f\u8d8a\u5927\uff0c\u5f53\u8fb9\u6743\u5927\u4e8e $d$ \u65f6\uff0c\u51cf\u53bb\u7684\u8fb9\u6743\u603b\u4e3a $d$\uff0c\u636e\u6b64\u53ef\u77e5\uff0c\u51cf\u53bb\u7684\u8fb9\u4e00\u5b9a\u662f\u5f53\u524d\u751f\u6210\u6811\u4e2d\u6743\u503c\u6700\u5927\u7684\u8fb9\u3002\n\n\u6211\u4eec\u7684\u76ee\u7684\u662f\u5c1d\u8bd5\u4f7f\u7528\u4e00\u6761\u539f\u56fe\u4e2d\u51cf\u53bb $d$ \u7684\u8fb9\u53bb**\u4ee3\u66ff**\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u51cf\u53bb $d$ \u7684\u8fb9\u6216\u7ef4\u6301\u539f\u6837\uff0c\u4f7f\u5f97\u9ed1\u8fb9\u6570\u91cf**\u5c3d\u91cf\u591a**\u3002\n\n\u6bd4\u5982\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u8fb9\u6743\u4e3a $5$ \u4e14\u4e3a\u767d\u8fb9\uff0c$d=4$\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u53e6\u4e00\u6761\u540c\u6837\u53ef\u6784\u6210\u751f\u6210\u6811\u4e14\u8fb9\u6743\u4e3a $5$ \u7684\u9ed1\u8fb9\u53bb\u4ee3\u66ff\u3002\n\n\u7531\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u521d\u6b65\u7684\u7b97\u6cd5\uff0c\u7528 `kruskal` \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u5bf9\u4e8e\u8fd9\u9897\u751f\u6210\u6811\u4e2d\u8fb9\u6743\u6700\u5927\u7684\u4e00\u6761\u8fb9\uff0c\u5176\u6743\u503c\u8bbe\u4e3a $maxx$\uff0c\u5c06\u539f\u56fe\u4e2d\u8fb9\u6743\u7b49\u4e8e $maxx$ \u7684\u8fb9\u8bb0\u5f55\u4e0b\u6765\uff0c\u628a\u5b83\u5728\u539f\u56fe\u4e0a\u7684\u8fb9\u6743\u8d4b\u503c\u6210 $\\max(c_i-d,0)$ \u518d\u5728\u539f\u56fe\u4e0a\u8dd1\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c06\u8fb9\u7684\u9ed1/\u767d\u60c5\u51b5\u7edf\u8ba1\u4e0b\u6765\u5373\u53ef\u3002\n\n\u4f46\u662f\u5b83\u4e0d\u80fdAC\uff0c\u539f\u56e0\u662f\u5982\u679c $maxx < d$\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u6709\u4e00\u4e9b\u539f\u56fe\u4e0a\u7684\u8fb9\uff0c\u5b83\u7684\u6743\u503c\u5927\u4e8e $maxx$\uff0c\u4f46\u662f\u5b83\u51cf\u53bb $d$ \u7684\u503c\u4e5f\u53ef\u80fd\u5c0f\u4e8e\u7b49\u4e8e $0$\uff0c\u6b64\u65f6\u8fd9\u4e9b\u8fb9\u4e5f\u53ef\u4ee5\u6210\u4e3a\u4ee3\u66ff\u7684\u8fb9\uff0c\u53eb\u505a\"\u53ef\u4ee3\u66ff\u8fb9\"\u3002\n\n\u6bd4\u5982 $maxx = d$\uff0c\u540c\u65f6 $d=6$\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u4ec5\u53ef\u4ee5\u7528\u8fb9\u6743\u4e3a $5$ \u7684\u8fb9\u53bb\u4ee3\u66ff\uff0c\u8fd8\u53ef\u4ee5\u7528\u8fb9\u6743\u4e3a $6$ \u7684\u8fb9\u4ee3\u66ff\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5f97\u51fa\u53e6\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7684\u201d\u751f\u6210\u6811\u201c\uff0c\u5176\u4e2d\u8fb9\u6743\u5c0f\u4e8e $maxx$\uff0c\u518d\u5c06\u201d\u53ef\u4ee3\u66ff\u8fb9\u201c\u8bb0\u5f55\u4e0b\u6765\uff0c\u6309\u9ed1\u767d\u6392\u5e8f\uff0c**\u53ea\u9009\u62e9\u4e00\u6761**\u8fd9\u79cd\u8fb9\u7ec4\u6210\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4ee3\u8868\u53ea\u7ed9\u4e00\u6761\u8fb9\u51cf\u6743\u503c\uff0c\u63a5\u7740\u5728\u9009\u62e9\u4e86\u8fb9\u7684\u201d\u751f\u6210\u6811\u201c\u4e0a\u518d\u7528\u6ca1\u6709\u7528\u8fc7\u7684\u8fb9\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7edf\u8ba1\u9ed1/\u767d\u60c5\u51b5\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m)$\uff0c\u5ffd\u7565\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\u3002\n\n### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct NODE\n{\n\tint x,y,s,o;\n\tfriend bool operator <(NODE u,NODE v)\n\t\t{return u.s<v.s||(u.s==v.s&&u.o<v.o);}\n}a[200010],b[200010];\nint n,m,d,fa[100010],use[100010];\nint getfa(int x)\n{\n\tif(fa[x]==x)return x;\n\treturn fa[x]=getfa(fa[x]);\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&d);\n\tint i,tot=0,cnt=0;\n\tfor(i=1;i<=m;i++) scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].s);\n\tfor(i=n;i<=m;i++) a[i].o=1;\n\tfor(i=1;i<=n;i++) fa[i]=i;\n\tsort(a+1,a+1+m);\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tint x=getfa(a[i].x),y=getfa(a[i].y);\n\t\tif(x!=y) fa[x]=y,tot++;\n\t\tif(tot>=n-1) break;\n\t}\n\tint maxs=a[i].s,ans=0;tot=0;\n\tfor(i=1;i<=n;i++) fa[i]=i;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tif(a[i].s>=maxs)\n\t\t\t{b[++cnt]=(NODE){a[i].x,a[i].y,max(a[i].s-d,0),a[i].o};continue;}\n\t\tint x=getfa(a[i].x),y=getfa(a[i].y);\n\t\tif(x!=y) fa[x]=y,tot++,ans+=a[i].o;\n\t}\n\tsort(b+1,b+1+cnt);\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tint x=getfa(b[i].x),y=getfa(b[i].y);\n\t\tif(x!=y) {fa[x]=y,tot++,ans+=b[i].o;break;}\n\t}\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tint x=getfa(a[i].x),y=getfa(a[i].y);\n\t\tif(x!=y) fa[x]=y,tot++,ans+=a[i].o;\n\t\tif(tot>=n-1) break;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n\u819c\u62dc[@Graphcity](https://www.luogu.com.cn/user/148913)\u5de8\u4f6c",
        "postTime": 1666273626,
        "uid": 60201,
        "name": "bobo2007",
        "ccfLevel": 0,
        "title": "P4806 [CCC2017] \u6700\u5c0f\u8d39\u7528\u6d41 \u9898\u89e3"
    },
    {
        "content": "> \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u65e0\u5411\u56fe\u53ca\u5176\u4e00\u751f\u6210\u6811\uff0c\u5141\u8bb8\u5c06\u4e00\u6761\u8fb9\u7684\u6743\u503c\u51cf\u5c11 $d$\uff08\u6700\u591a\u51cf\u5c0f\u81f3 $0$\uff09\u4f7f\u5f97\u539f\u56fe\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u548c\u6700\u5c0f\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u6c42\u539f\u7ed9\u5b9a\u751f\u6210\u6811\u9700\u8981\u6539\u53d8\u591a\u5c11\u6761\u8fb9\u65b9\u53ef\u5f62\u6210\u65b0\u56fe\u7684\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u91c7\u7528\u4e86\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7b80\u5316\u4ee3\u7801\u3002\n\n\u90a3\u4e48\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u5bf9\u4e8e\u76f8\u540c\u8fb9\u4f18\u5148\u9009\u5df2\u7ecf\u6d3b\u52a8\u7684\u8fb9\u5373\u53ef\u3002\u8003\u8651\u51cf\u5c0f\u6743\u503c\u3002\u663e\u7136\u6700\u597d\u60c5\u5f62\u4e0b\u9020\u6210 $-d$ \u7684\u8d21\u732e\uff0c\u4e3a\u4e86\u8d21\u732e\u7edd\u5bf9\u503c\u5c3d\u53ef\u80fd\u5927\uff0c\u8d2a\u5fc3\u5730\u5728\u751f\u6210\u6811\u4e0a\u6700\u957f\u8fb9\u4e2d\u9009\u53d6\u3002\n\n\u90a3\u4e48\u8003\u8651\u6b64\u65f6\u80fd\u5426\u51cf\u5c0f\u6240\u9700\u5929\u6570\u3002\u5f88\u663e\u7136\u5f53\u4e14\u4ec5\u5f53\u6700\u957f\u8fb9 $x$ \u4e00\u5f00\u59cb\u975e\u6d3b\u52a8\uff0c\u5e76\u4e14\u627e\u5230\u4e00\u6761\u6d3b\u52a8\u8fb9 $y$ \u66ff\u6362\u4e4b\u4ecd\u80fd\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u6c42\u6700\u5c0f\u751f\u6210\u6811\u65f6\u5982\u679c\u9009\u5165\u4e86\u975e\u6d3b\u52a8\u8fb9\uff0c\u4e00\u5b9a\u662f\u6ca1\u6709\u6743\u503c\u4e0d\u5927\u4e8e\u81ea\u8eab\u7684\u6d3b\u52a8\u8fb9\u53ef\u4ee5\u66ff\u6362\uff08\u5373\u4e0d\u5b58\u5728\u8fde\u63a5\u76f8\u540c\u7684\u8fde\u901a\u5757\u7684\u6d3b\u52a8\u8fb9\uff09\u3002\u6240\u4ee5\u6b64\u65f6\u4e00\u5b9a\u6709 $y$ \u7684\u6743\u503c\u5927\u4e8e $x$ \u7684\u6743\u503c\u3002\n\n\u56e0\u6b64 $y$ \u4ecd\u7136\u4e3a\u751f\u6210\u6811\u4e0a\u6700\u957f\u8fb9\uff0c\u4e5f\u4f1a\u4f7f\u7528\u63a8\u8fdb\u5668\u3002\n\n\u4e8e\u662f\u627e\u5230\u4e24\u4e2a\u8fde\u901a\u5757\u95f4\u7684\u6240\u6709\u8fb9\uff0c\u8fd9\u4e5f\u662f\u7b80\u5355\u7684\u3002\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u628a\u6700\u540e\u4e00\u6761\u8fb9\uff08\u80af\u5b9a\u6700\u5927\uff09\u64a4\u4e86\u5373\u53ef\u3002\u5bf9\u8fd9\u4e9b\u8fb9\uff0c\u5982\u679c\u8d21\u732e\u4e0d\u6539\u53d8\uff0c\u4e5f\u5c31\u662f $x < y$ \u4f46 $\\max(x - d, 0) = \\max(y - d, 0)$ \u5f53\u4e14\u4ec5\u5f53\u4e24\u8005\u5747\u53d6\u5230 $0$\u3002\u679a\u4e3e\u5224\u65ad\u5373\u53ef\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 400005;\nint n, m, d, x, y, lt, fa[maxn], sz[maxn];\nint lx, lf, ls, num, ans;\nstruct Edg {\n    int x, y, z, t;\n} e[maxn];\ninline void merge(int z, int x, int y) {\n    // \u56de\u6eda\uff1afa[fx] = fx.\n    lt = z, lx = lf = x, ls = sz[x];\n    fa[x] = y, sz[y] += sz[x], ans += e[z].t, ++num;\n}\ninline bool cmp(Edg a, Edg b) { return a.z == b.z ? a.t < b.t : a.z < b.z; }\ninline int find(int x) {\n    while (x != fa[x]) x = fa[x] = fa[fa[x]];\n    return x;\n}\nsigned main() {\n    scanf(\"%d%d%d\", &n, &m, &d);\n    for (int i = 1; i <= n; ++i) fa[i] = i;\n    for (int i = n; i <= m; i++) e[i].t = 1;\n    for (int i = 1; i <= m; ++i) scanf(\"%d%d%d\", &e[i].x, &e[i].y, &e[i].z);\n    sort(e + 1, e + m + 1, cmp);\n    for (int i = 1; i <= m; ++i) {\n        x = find(e[i].x), y = find(e[i].y);\n        if (x != y) merge(i, x, y);\n        if (num >= n - 1) break;\n    }\n    // \u6700\u540e\u4e00\u6761\u8fb9\u662f lt.\n    if (!e[lt].t || e[lt].z > d) {\n        printf(\"%d\", ans);\n        return 0;\n    }\n    fa[lx] = lf, sz[lx] = ls;\n    for (int i = 1; i <= m; ++i) {\n        if (find(e[i].x) != find(e[i].y) && e[i].z <= d) {\n            printf(\"%d\", ans - 1);\n            return 0;\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1674230093,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P4806 [CCC2017] \u6700\u5c0f\u8d39\u7528\u6d41 \u9898\u89e3"
    },
    {
        "content": "- **\u7b80\u8981\u9898\u610f**\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u524d $n-1$ \u6761\u8fb9\u4e3a\u9ed1\u8272\u5e76\u6784\u6210\u4e00\u68f5\u6811\uff0c\u5176\u5b83\u8fb9\u4e3a\u767d\u8272\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u5c06\u5176\u4e2d\u4e00\u6761\u8fb9 $(u,v,w)$ \u7684\u8fb9\u6743\u51cf\u53bb $\\min(w,d)$ \u540e\uff0c\u8fb9\u6743\u603b\u548c\u6700\u5c0f\u7684\u540c\u65f6\u9ed1\u8fb9\u6570\u91cf\u6700\u591a\u3002\n\n- **\u89e3\u6790**\n\n\u9996\u5148\u9700\u8981\u6784\u9020\u51fa\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002\u4e0d\u96be\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002\u5728\u6784\u9020\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u628a\u6700\u5927\u7684\u8fb9\u6743\u51cf\u53bb $d$ \u5373\u53ef\u3002\u8fd9\u6837\u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n\n\u7136\u540e\u8003\u8651\u9ed1\u8fb9\u6570\u91cf\u6700\u591a\u7684\u6761\u4ef6\u3002\u9996\u5148\u8fd9\u68f5\u6700\u5c0f\u751f\u6210\u6811\u7684\u9ed1\u8fb9\u8981\u6700\u591a\u3002\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u6392\u5e8f\u65f6\u5c06\u8fb9\u6743\u8bbe\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8fb9\u7684\u989c\u8272\u8bbe\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5c31\u884c\u4e86\u3002\n\n\u4f46\u8fd9\u68f5\u751f\u6210\u6811\u7684\u9ed1\u8fb9\u4e2a\u6570\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u4e86\u5417\uff1f\n\n\u5f53\u7136\u4e0d\u4e00\u5b9a\u3002\u4f60\u53ef\u4ee5\u7528\u4e00\u6761\u4e0d\u5728\u751f\u6210\u6811\u7684\u9ed1\u8fb9\u6362\u6389\u5728\u751f\u6210\u6811\u7684\u767d\u8fb9\uff0c\u5e76\u4f7f\u5f97\u6700\u540e\u7684\u8fb9\u6743\u548c\u76f8\u540c\u3002\u8fd9\u53ef\u4ee5\u62c6\u89e3\u4e3a\u4e09\u4e2a\u6761\u4ef6\uff1a\n\n- \u767d\u8fb9\u5728\u751f\u6210\u6811\u4e2d\u9ed1\u8fb9\u4e24\u7aef\u70b9\u7ec4\u6210\u7684\u8def\u5f84\u4e0a\u3002\n- \u9009\u51fa\u7684\u9ed1\u8fb9\u548c\u767d\u8fb9\u8fb9\u6743\u5747 $\\le d$\u3002\n- \u767d\u8fb9\u7684\u8fb9\u6743\u5728\u8fd9\u68f5\u751f\u6210\u6811\u4e2d\u6700\u5927\u3002\n\n\u500d\u589e\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u95ee\u9898\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m+(n+m)\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long \n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nstruct Node{int u,v,w,typ;} Edge[Maxn+5];\ninline bool operator<(Node a,Node b) {return (a.w!=b.w?a.w<b.w:a.typ<b.typ);}\ninline bool operator>(Node a,Node b) {return (a.w!=b.w?a.w>b.w:a.typ>b.typ);}\nint n,m,d,cnt,sum,ans,fa[Maxn+5],vis[Maxn+5];\ninline int Find(int x) {return fa[x]==x?x:fa[x]=Find(fa[x]);}\n\nstruct Graph\n{\n    struct Point{int to,nxt,w;} E[Maxn*2+5];\n    int Head[Maxn+5],tot;\n    inline void Addedge(int x,int y,int z)\n    {\n        E[++tot]=(Point){y,Head[x],z};\n        Head[x]=tot;\n    }\n    int val[Maxn+5],fa[Maxn+5],anc[Maxn+5][20];\n    int num[Maxn+5][20],dep[Maxn+5];\n    inline int fmin(int x,int y) {return Edge[x]>Edge[y]?x:y;}\n    inline void dfs(int x,int f)\n    {\n        fa[x]=anc[x][0]=f,num[x][0]=val[x],dep[x]=dep[f]+1;\n        For(i,1,19) anc[x][i]=anc[anc[x][i-1]][i-1],\n                    num[x][i]=fmin(num[x][i-1],num[anc[x][i-1]][i-1]);\n        for(int i=Head[x];i;i=E[i].nxt)\n        {\n            int y=E[i].to;\n            if(y==f) continue;\n            val[y]=E[i].w,dfs(y,x);\n        }\n    }\n    inline int LCA(int x,int y)\n    {\n        int res=0;\n        if(dep[x]<dep[y]) swap(x,y);\n        Rof(i,19,0) if(dep[anc[x][i]]>=dep[y])\n            res=fmin(res,num[x][i]),x=anc[x][i];\n        if(x==y) return res;\n        Rof(i,19,0) if(anc[x][i]!=anc[y][i])\n            res=fmin(res,num[x][i]),res=fmin(res,num[y][i]),\n            x=anc[x][i],y=anc[y][i];\n        return fmin(res,fmin(num[x][0],num[y][0]));\n    }\n    inline void Build() {dfs(1,0);}\n} G;\n\nint main()\n{\n    n=read(),m=read(),d=read();\n    For(i,1,m)\n    {\n        int a=read(),b=read(),c=read();\n        if(i<n) Edge[i]=(Node){a,b,c,0};\n        else Edge[i]=(Node){a,b,c,1};\n    }\n    For(i,1,n) fa[i]=i;\n    sort(Edge+1,Edge+m+1);\n    For(i,1,m)\n    {\n        int u=Edge[i].u,v=Edge[i].v;\n        if(Find(u)!=Find(v))\n        {\n            fa[Find(u)]=Find(v),vis[i]=1;\n            if(!Edge[i].typ) cnt++;\n            G.Addedge(u,v,i),G.Addedge(v,u,i);\n            sum=max(sum,min(d,Edge[i].w));\n        }\n    }\n    ans=cnt,G.Build();\n    For(i,1,m)\n    {\n        if(vis[i] || Edge[i].typ==1) continue;\n        int u=Edge[i].u,v=Edge[i].v,w=Edge[i].w;\n        int id=G.LCA(u,v);\n        if(Edge[id].typ==0) continue;\n        if(sum==Edge[id].w+min(d,Edge[i].w)-Edge[i].w)\n            ans=cnt+1;\n    }\n    printf(\"%d\\n\",n-1-ans);\n    return 0;\n}\n```",
        "postTime": 1666062160,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4806\u3010[CCC2017] \u6700\u5c0f\u8d39\u7528\u6d41\u3011"
    }
]