[
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6157)\n\n\u611f\u89c9\u6bd4 D \u7b80\u5355\u4e00\u70b9 ~~\uff08\u56e0\u4e3a\u6211\u5bf9\u6570\u8bba\u4e00\u7a8d\u4e0d\u901a\uff09~~\u3002\n\n---\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u9009\u51fa\u7684 $w_x$ \u4e00\u5b9a\u662f**\u7b2c\u4e8c\u5927**\u7684\uff0c$w_y$ \u4e00\u5b9a\u662f**\u6700\u5927\u7684**\uff0c\u6b64\u65f6 $w_x\\bmod w_y$ \u6700\u5927\u3002\n\n- \u4e3a\u4ec0\u4e48\uff1f\u4e0d\u59a8\u8bbe $w_x<w_y$\uff0c\u90a3\u4e48 $w_x\\bmod w_y=w_x$\uff0c\u800c $w_y\\bmod w_x$ \u4e00\u5b9a\u5c0f\u4e8e $w_x$\uff0c\u6240\u4ee5\u9009\u51fa\u7684 $w_x,w_y$ \u6ee1\u8db3 $w_x<w_y$\u3002\n  \n  \u56e0\u6b64\uff0c\u8981\u4f7f $w_x\\bmod w_y$ \u6700\u5927\uff0c$w_x$ \u4e00\u5b9a\u662f**\u7b2c\u4e8c\u5927**\u7684\uff0c$w_y$ \u4e00\u5b9a\u662f**\u6700\u5927\u7684**\u3002\n\n\u8fd9\u6837\u95ee\u9898\u5c31\u88ab\u6211\u4eec\u8f6c\u5316\u6210\u4e86\uff1a\n\n- \u7ed9\u5b9a\u4e00\u6761\u94fe\uff0c\u8bbe $x$ \u4e3a\u8be5\u94fe\u4e0a\u6743\u503c**\u4e25\u683c\u7b2c\u4e8c\u5927**\u7684\u8282\u70b9\uff0c$y$ \u4e3a\u8be5\u94fe\u4e0a\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u6c42\u51fa $w_x$\u3002\u8fd9\u53ef\u4ee5\u7528\u6811\u5256\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n- \u6c42\u51fa\u53bb\u6389 $x,y$ \u540e\u5269\u4f59\u7684\u70b9\u4e2d**\u4e25\u683c\u7b2c\u4e8c\u5927**\u7684\u6743\u503c\u3002\u8fd9\u53ef\u4ee5\u7528\u4e00\u4e2a multiset \u7ef4\u62a4\u3002\n\n\u5176\u5b9e\uff0c\u5982\u679c\u4e0d\u5e26\u4fee\uff0c\u8fd9\u9053\u9898\u76ee\u8fd8\u80fd\u7528\u4e3b\u5e2d\u6811\u6765\u505a\uff0c\u53ef\u60dc\u4e3b\u5e2d\u6811\u65e0\u6cd5\u652f\u6301\u8fd9\u6837\u7684\u4fee\u6539\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar buf[1<<23],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0,sign=0; char s=getchar();\n\twhile(!isdigit(s))sign|=s=='-',s=getchar();\n\twhile(isdigit(s))x=(x<<1)+(x<<3)+(s-'0'),s=getchar();\n\treturn sign?-x:x;\n}\nconst int N=1e5+5;\nint ct,hd[N],nxt[N<<1],vv[N<<1];\ninline void add(int u,int v){\n\tnxt[++ct]=hd[u],hd[u]=ct,vv[ct]=v;\n}\nint n,q,dnum,fa[N],dep[N],siz[N],son[N],ind[N],top[N],rk[N];\nvoid dfs1(int id,int f,int d){\n\tfa[id]=f,siz[id]=1,dep[id]=d;\n\tfor(int i=hd[id];i;i=nxt[i]){\n\t\tint to=vv[i];\n\t\tif(to!=f){\n\t\t\tdfs1(to,id,d+1);\n\t\t\tif(siz[son[id]]<siz[to])son[id]=to;\n\t\t\tsiz[id]+=siz[to];\n\t\t}\n\t}\n}\nvoid dfs2(int id,int t){\n\ttop[id]=t,ind[id]=++dnum,rk[dnum]=id;\n\tif(!son[id])return;\n\tdfs2(son[id],t);\n\tfor(int i=hd[id];i;i=nxt[i]){\n\t\tint to=vv[i];\n\t\tif(to!=fa[id]&&to!=son[id])dfs2(to,to);\n\t}\n}\nmultiset <int> s;\nint val[N];\nstruct data{\n\tint fi,se;\n}c[N<<2];\ndata mer(data a,data b){\n\tint fi=max(a.fi,b.fi);//\u7ef4\u62a4\u6700\u5927/\u7b2c\u4e8c\u5927\u503c\n\treturn {fi,max(a.fi==fi?a.se:a.fi,b.fi==fi?b.se:b.fi)}; \n}\nvoid build(int l,int r,int x){\n\tif(l==r){\n\t\tc[x]={val[rk[l]],-1};\n\t\treturn;\n\t}\n\tint m=l+r>>1;\n\tbuild(l,m,x<<1),build(m+1,r,x<<1|1);\n\tc[x]=mer(c[x<<1],c[x<<1|1]);\n}\nvoid modify(int l,int r,int x,int pos,int v){\n\tif(l==r){\n\t\tval[rk[l]]+=v;\n\t\tc[x]={val[rk[l]],-1};\n\t\treturn;\n\t}\n\tint m=l+r>>1;\n\tif(pos<=m)modify(l,m,x<<1,pos,v);\n\telse modify(m+1,r,x<<1|1,pos,v);\n\tc[x]=mer(c[x<<1],c[x<<1|1]);\n}\ndata query(int l,int r,int ql,int qr,int x){\n\tif(ql<=l&&r<=qr)return c[x];\n\tint m=l+r>>1; data ans={-1,-1};\n\tif(ql<=m)ans=mer(ans,query(l,m,ql,qr,x<<1));\n\tif(m<qr)ans=mer(ans,query(m+1,r,ql,qr,x<<1|1));\n\treturn ans;\n}\ndata query(int x,int y){\n\tdata ans={-1,-1};\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tans=mer(ans,query(1,n,ind[top[x]],ind[x],1));\n\t\tx=fa[top[x]];\n\t}\n\tif(ind[x]>ind[y])swap(x,y);\n\treturn mer(ans,query(1,n,ind[x],ind[y],1));\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<n;i++){\n\t\tint u=read(),v=read();\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs1(1,0,0),dfs2(1,1);\n\tfor(int i=1;i<=n;i++)val[i]=read(),s.insert(val[i]);\n\tbuild(1,n,1);\n\tq=read();\n\tfor(int i=0;i<q;i++){\n\t\tint op=read(),x=read(),y=read();\n\t\tif(op){\n\t\t\tdata t=query(x,y);\n\t\t\tif(t.se==-1){\n\t\t\t\tputs(\"-1\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprintf(\"%d \",t.se);\n\t\t\ts.erase(s.find(t.fi)),s.erase(s.find(t.se));\n\t\t\tprintf(\"%d\\n\",*(--s.lower_bound(*--s.end())));\n\t\t\ts.insert(t.fi),s.insert(t.se);\n\t\t}\n\t\telse{\n\t\t\ts.erase(s.find(val[x])),s.insert(val[x]+y);\n\t\t\tmodify(1,n,1,ind[x],y);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1583071763,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6157 \u3010\u6709\u8da3\u7684\u6e38\u620f\u3011"
    },
    {
        "content": "\u672c\u7bc7\u9898\u89e3\u4e0d\u9700\u8981\u7ef4\u62a4\u4e25\u683c\u524d\u56db\u5927\u503c,\u4e5f\u4e0d\u9700\u8981\u4f1aSTL,\u9002\u5408\u5404\u79cd\u8bed\u8a00\u7684\u9009\u624b\u770b\u601d\u8def.\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u9897\u6709\u70b9\u6743\u7684\u65e0\u6839\u6811,\u652f\u6301\u5355\u70b9\u4fee\u6539(\u52a0\u4e0a\u4e00\u4e2a\u6570),\u5728\u6811\u94fe\u4e0a\u63d2\u53d9\u4e24\u4e2a\u70b9\u7684\u70b9\u6743($w_i,w_j$)\u4f7f\u5f97 $w_i \\mod w_j$ \u6700\u5927,\u4e14 $w_i \\not= w_j$,\u4ee5\u53ca\u5728\u53bb\u6389\u8fd9\u4e24\u4e2a\u70b9\u540e\u7684\u6574\u9897\u6811\u4e0a\u67e5\u8be2\u4e24\u4e2a\u70b9\u7684\u70b9\u6743($w_q,w_p$)\u4f7f\u5f97 $w_q \\mod w_p$ \u6700\u5927.\n\n# \u5206\u6790\n\n\u8003\u8651\u7ed9\u51fa\u4e00\u4e9b\u6570\u5176\u4e2d\u4efb\u610f\u4e00\u6570\u7ed9\u5176\u4ed6\u6570\u53d6\u6a21\u540e\u7684\u6700\u5927\u503c,\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u6700\u5927\u503c\u4e3a\u8fd9\u4e2a\u6570\u5217\u7684\u4e25\u683c\u6b21\u5927\u503c $\\%$ \u6700\u5927\u503c.\u90a3\u4e48\u5c31\u662f\u8981\u627e\u51fa\u6811\u94fe\u4e0a\u7684\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c,\u8fd9\u663e\u7136\u53ef\u4ee5\u7528[\u6811\u94fe\u5256\u5206](https://baike.baidu.com/item/\u6811\u94fe\u5256\u5206/10524122?fr=aladdin)\u548c[\u7ebf\u6bb5\u6811](https://baike.baidu.com/item/\u7ebf\u6bb5\u6811/10983506?fr=aladdin)\u89e3\u51b3.\n\n\u65e2\u7136\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4,\u90a3\u4e48\u81ea\u7136\u9700\u8981\u5408\u5e76\u4fe1\u606f,\u800c\u8fd9\u91cc\u7684\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\u7684\u5408\u5e76\u6bd4\u8f83\u9ebb\u70e6.\n\n\u5148\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53:\n\n```cpp\nstruct FMSM\n{\n\tint first_max,second_max;\n\t//\u8868\u793a\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\n};\n```\n\n\u4e0b\u9762\u662f\u5408\u5e76\u64cd\u4f5c\n\n```cpp\nFMSM MergeFMSM(FMSM a,FMSM b)//\u5408\u5e76\n{\n\tfor_make.first_max=max(a.first_max,b.first_max);//\u5408\u5e76\u4ee5\u540e\u7684\u6700\u5927\u503c\u4e00\u5b9a\u7b49\u4e8e\u5408\u5e76\u7684\u4e24\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\tif(a.first_max!=b.first_max)//\u5982\u679c\u6700\u5927\u503c\u4e0d\u540c\u65f6\n\t{\n\t\tfor_make.second_max=min(a.first_max,b.first_max);//\u4e25\u683c\u6b21\u5927\u503c\u4e3a\u4e24\u6700\u5927\u503c\u4e2d\u5c0f\u7684\u90a3\u4e2a\n\t\tfor_make.second_max=max(for_make.second_max,max(a.second_max,b.second_max));//\u4e5f\u53ef\u80fd\u4e3a\u539f\u6765\u7684\u4e25\u683c\u6b21\u5927\u503c\u4e2d\u5927\u7684\u90a3\u4e2a\n\t\treturn for_make;\n\t}\n\tfor_make.second_max=max(a.second_max,b.second_max);//\u5982\u679c\u4e24\u4e2a\u6700\u5927\u503c\u76f8\u7b49\u90a3\u4e48\u4e25\u683c\u6b21\u5927\u503c\u81ea\u7136\u5c31\u662f\u4e24\u4e25\u683c\u6b21\u5927\u503c\u4e2d\u5927\u7684\u90a3\u4e2a\n\treturn for_make;\n}\n```\n\n\u7136\u540e\u5c31\u662f\u8981\u77e5\u9053\u53bb\u6389\u4e24\u4e2a\u6570\u4e4b\u540e\u7684\u4e25\u683c\u6b21\u5927\u4e86,\u8fd9\u4e1c\u897f\u4e5f\u5f88\u597d\u529e,\u53ef\u4ee5\u7528STL\u7ef4\u62a4.\n\n\u4f46\u662f,\u6211\u4e0d\u4f1aSTL,\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e25\u683c\u6b21\u5927\u5c31\u662f\u6700\u5927\u7684\u524d\u9a71(\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u6570),\u56e0\u4e3a\u9700\u8981\u5220\u6570&\u52a0\u6570,\u90a3\u81ea\u7136\u5c31\u4f1a\u60f3\u5230\u5e73\u8861\u6811\u4e86,\u53ea\u8981\u5e73\u8861\u6811\u518d\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86,~~\u975e\u5e38\u7b80\u5355~~.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=2e5+7;\nconst int INF=114514233;\nint N,M;\nstruct Tree//\u5e73\u8861\u6811\u90e8\u5206,\u4e0d\u591a\u8bb2,\u53ef\u4ee5\u7528stl\n{\n\tint lson,rson;\n\tint size;\n\tint val;\n\tint ind;\n}tree[MAXN*2];\nint fhq_cnt=0,root=0;\n#define LSON tree[now].lson\n#define RSON tree[now].rson\nint New(int val)\n{\n\ttree[++fhq_cnt].val=val;\n\ttree[fhq_cnt].ind=rand();\n\ttree[fhq_cnt].size=1;\n\treturn fhq_cnt;\n}\nvoid FHQ_PushUp(int now)\n{\n\ttree[now].size=tree[LSON].size+tree[RSON].size+1;\n}\nvoid Split(int now,int val,int &tree1,int &tree2)\n{\n\tif(!now)\n\t{\n\t\ttree1=0;\n\t\ttree2=0;\n\t\treturn;\n\t}\n\tif(tree[now].val<=val)\n\t{\n\t\ttree1=now;\n\t\tSplit(RSON,val,RSON,tree2);\n\t}\n\telse\n\t{\n\t\ttree2=now;\n\t\tSplit(LSON,val,tree1,LSON);\n\t}\n\tFHQ_PushUp(now);\n}\nint Merge(int tree1,int tree2)\n{\n\tif(!tree1||!tree2)\n\t{\n\t\treturn tree1+tree2;\n\t}\n\tif(tree[tree1].ind<tree[tree2].ind)\n\t{\n\t\ttree[tree1].rson=Merge(tree[tree1].rson,tree2);\n\t\tFHQ_PushUp(tree1);\n\t\treturn tree1;\n\t}\n\telse\n\t{\n\t\ttree[tree2].lson=Merge(tree1,tree[tree2].lson);\n\t\tFHQ_PushUp(tree2);\n\t\treturn tree2;\n\t}\n}\nint tree1,tree2,tree3;\nvoid Insert(int val)\n{\n\tSplit(root,val,tree1,tree2);\n\troot=Merge(Merge(tree1,New(val)),tree2);\n}\nvoid Delete(int val)\n{\n\tSplit(root,val,tree1,tree3);\n\tSplit(tree1,val-1,tree1,tree2);\n\ttree2=Merge(tree[tree2].lson,tree[tree2].rson);\n\troot=Merge(Merge(tree1,tree2),tree3);\n}\nint QueryKth(int now,int k)\n{\n\twhile(1)\n\t{\n\t\tif(tree[LSON].size+1==k)\n\t\t{\n\t\t\treturn now;\n\t\t}\n\t\tif(tree[LSON].size>=k)\n\t\t{\n\t\t\tnow=LSON;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk-=tree[LSON].size+1;\n\t\t\tnow=RSON;\n\t\t}\n\t}\n\treturn 0;\n}\nint QueryPre(int val)\n{\n\tSplit(root,val-1,tree1,tree2);\n\tint result=tree[QueryKth(tree1,tree[tree1].size)].val;\n\troot=Merge(tree1,tree2);\n\treturn result;\n}\n#undef LSON\n#undef RSON\nint val[MAXN];\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f\n{\n\tint to,next;\n}edge[MAXN*2];\nint edge_head[MAXN];\nint edge_cnt=0;\n#define FOR(now) for(int edge_i=edge_head[now];edge_i;edge_i=edge[edge_i].next)\n#define TO edge[edge_i].to\nvoid AddEdge(int form,int to)\n{\n\tedge[++edge_cnt].to=to;\n\tedge[edge_cnt].next=edge_head[form];\n\tedge_head[form]=edge_cnt;\n}\n//\u6811\u5256\u90e8\u5206\nint point_deep[MAXN];\nint point_father[MAXN];\nint point_son[MAXN];\nint point_size[MAXN];\nvoid DFS_1(int now=1)\n{\n\tint max_size=-1;\n\tpoint_size[now]=1;\n\tFOR(now)\n\t{\n\t\tif(point_father[now]!=TO)\n\t\t{\n\t\t\tpoint_father[TO]=now;\n\t\t\tpoint_deep[TO]=point_deep[now]+1;\n\t\t\tDFS_1(TO);\n\t\t\tpoint_size[now]+=point_size[TO];\n\t\t\tif(point_size[TO]>max_size)\n\t\t\t{\n\t\t\t\tmax_size=point_size[TO];\n\t\t\t\tpoint_son[now]=TO;\n\t\t\t}\n\t\t}\n\t}\n}\nint chain_cnt=0;\nint point_id[MAXN];\nint point_val[MAXN];\nint chain_top[MAXN];\nvoid DFS_2(int now=1,int top=1)\n{\n\tpoint_id[now]=++chain_cnt;\n\tpoint_val[chain_cnt]=val[now];\n\tchain_top[now]=top;\n\tif(!point_son[now])\n\t{\n\t\treturn;\n\t}\n\tDFS_2(point_son[now],top);\n\tFOR(now)\n\t{\n\t\tif(TO!=point_father[now]&&TO!=point_son[now])\n\t\t{\n\t\t\tDFS_2(TO,TO);\n\t\t}\n\t}\n}\n#undef FOR\n#undef TO\nstruct FMSM//\u6700\u5927\u548c\u4e25\u683c\u6b21\u5927\u7684\u7ed3\u6784\u4f53\n{\n\tint first_max,second_max;\n}for_make;\nFMSM MergeFMSM(FMSM a,FMSM b)//\u5408\u5e76\n{\n\tfor_make.first_max=max(a.first_max,b.first_max);\n\tif(a.first_max!=b.first_max)\n\t{\n\t\tfor_make.second_max=min(a.first_max,b.first_max);\n\t\tfor_make.second_max=max(for_make.second_max,max(a.second_max,b.second_max));\n\t\treturn for_make;\n\t}\n\tfor_make.second_max=max(a.second_max,b.second_max);\n\treturn for_make;\n}\nFMSM MakeFMSM(int first_max,int second_max)\n{\n\tfor_make.first_max=first_max;\n\tfor_make.second_max=second_max;\n\treturn for_make;\n}\nFMSM fmsm_null=MakeFMSM(-INF,-INF);\nstruct SegmentTree//\u7ebf\u6bb5\u6811\u90e8\u5206\n{\n\tFMSM max;\n}sgt[MAXN*4];\n#define LSON (now<<1)\n#define RSON (now<<1|1)\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\n#define NOW now_left,now_right\nvoid SGT_PushUp(int now)\n{\n\tsgt[now].max=MergeFMSM(sgt[LSON].max,sgt[RSON].max);\n}\nvoid Build(int now=1,int left=1,int right=N)\n{\n\tif(left==right)\n\t{\n\t\tsgt[now].max=MakeFMSM(point_val[left],-INF);\n\t\treturn;\n\t}\n\tBuild(LEFT);\n\tBuild(RIGHT);\n\tSGT_PushUp(now);\n}\nvoid Updata(int place,int w,int now=1,int left=1,int right=N)//\u5355\u70b9\u4fee\u6539\n{\n\tif(place<left||right<place)\n\t{\n\t\treturn;\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[now].max=MakeFMSM(sgt[now].max.first_max+w,-INF);\n\t\treturn;\n\t}\n\tUpdata(place,w,LEFT);\n\tUpdata(place,w,RIGHT);\n\tSGT_PushUp(now);\n}\nFMSM Query(int now_left,int now_right,int now=1,int left=1,int right=N)//\u533a\u95f4\u67e5\u8be2\n{\n\tif(now_right<left||right<now_left)\n\t{\n\t\treturn fmsm_null;\n\t}\n\tif(now_left<=left&&right<=now_right)\n\t{\n\t\treturn sgt[now].max;\n\t}\n\treturn MergeFMSM(Query(NOW,LEFT),Query(NOW,RIGHT));//\u8fd4\u56de\u7b54\u6848\u8981\u5408\u5e76\n}\nFMSM QueryMax(int u,int v)//\u63d2\u53d9\u94fe\n{\n\tFMSM result=fmsm_null;\n\twhile(chain_top[u]!=chain_top[v])\n\t{\n\t\tif(point_deep[chain_top[u]]<point_deep[chain_top[v]])\n\t\t{\n\t\t\tswap(u,v);\n\t\t}\n\t\tresult=MergeFMSM(result,Query(point_id[chain_top[u]],point_id[u]));\n\t\tu=point_father[chain_top[u]];\n\t}\n\tif(point_deep[u]>point_deep[v])\n\t{\n\t\tswap(u,v);\n\t}\n\tresult=MergeFMSM(result,Query(point_id[u],point_id[v]));\n\treturn result;\n}\nint main()\n{\n\tscanf(\"%d\",&N);\n\tint a,b;\n\tREP(i,1,N-1)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tAddEdge(a,b);\n\t\tAddEdge(b,a);\n\t}\n\tREP(i,1,N)\n\t{\n\t\tscanf(\"%d\",&val[i]);\n\t\tInsert(val[i]);\n\t}\n\tDFS_1();\n\tDFS_2();\n\tBuild();\n\tint opt,x,y;\n\tFMSM p;\n\tscanf(\"%d\",&M);\n\tREP(i,1,M)\n\t{\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt==0)\n\t\t{\n\t\t\tDelete(val[x]);//\u5220\u6389\u539f\u6765\u7684\u6570\n\t\t\tval[x]+=y;\n\t\t\tInsert(val[x]);//\u52a0\u5165\u65b0\u6570\n\t\t\tUpdata(point_id[x],y);\n\t\t}\n\t\tif(opt==1)\n\t\t{\n\t\t\tp=QueryMax(x,y);\n\t\t\tif(p.second_max==-INF)//\u4e0d\u5b58\u5728\u4e0d\u540c\u6570\n\t\t\t{\n\t\t\t\tprintf(\"-1\\n\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tDelete(p.first_max);//\u5148\u5220\u6389\n\t\t\t\tDelete(p.second_max);\n\t\t\t\ta=QueryPre(QueryPre(INF));//\u6700\u5927\u503c\u4e3a\u6781\u5927\u503c\u524d\u9a71,\u4e25\u683c\u6b21\u5927\u503c\u4e3a\u6700\u5927\u503c\u524d\u9a71\n\t\t\t\tInsert(p.first_max);//\u91cd\u65b0\u52a0\u5165\n\t\t\t\tInsert(p.second_max);\n\t\t\t\tprintf(\"%d %d\\n\",p.second_max,a);//\u8f93\u51fa\u7b54\u6848\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}//\u6ce8\u610f\u5f00O2\n```",
        "postTime": 1583217276,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6157 \u3010\u6709\u8da3\u7684\u6e38\u620f\u3011"
    },
    {
        "content": "# **\u8fd9\u662f\u4e00\u7bc7\u53ea\u7528\u5230\u6811\u94fe\u5256\u5206\u548c\u7ebf\u6bb5\u6811\u7684\u9898\u89e3**\n~~\uff08\u5f53\u7136\u5927\u4f53\u548c\u4e4b\u524d\u5404\u4f4d\u5de8\u4f6c\u7684\u9898\u89e3\u8fd8\u662f\u4e00\u6837\u7684\uff09~~\n# \u9898\u76ee\n[ingteresting \u306e game](https://www.luogu.com.cn/problem/P6157)\n# \u601d\u8def\n\u62ff\u5230\u9898\u76ee\uff0c\u6211\u4eec~~\u5f88\u5bb9\u6613~~\u770b\u51fa\u5c0f A \u548c\u5c0f B \u7684\u6700\u4f18\u9009\u6cd5\uff1a\u53d6\u51fa\u6743\u503c**\u4e25\u683c\u6700\u5927\u7684\u4e24\u4e2a\u70b9**\uff0c**\u7b2c\u4e8c\u5927**\u7684\u505a **Wx**\uff0c**\u6700\u5927**\u7684\u505a **Wy**\u3002\n\n\u8003\u8651\u5c0f A \u7684\u9009\u62e9\u4f1a\u5bf9\u5c0f B \u9020\u6210\u5f71\u54cd\uff08\u5c0f A \u9009\u7684\u4e24\u4e2a\u70b9\u5c0f B \u4e0d\u80fd\u9009\uff09\uff0c\u6211\u4eec\u5c31\u81ea\u7136\u800c\u7136\u7684\u60f3\u51fa\u7528**\u6811\u94fe\u5256\u5206**\u548c**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\u6574\u68f5\u6811\u7684**\u4e25\u683c\u524d\u56db\u5927\u503c**\u6765\u4f9b\u5c0f A \u548c\u5c0f B \u9009\u62e9\u3002\n\n\u7136\u540e\u672c\u9898\u89e3\u5c31\u7ed3\u675f\u4e86\uff08\u96fe\uff09\n\n------------\n\n\u5982\u679c\u771f\u7684\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4**\u4e25\u683c\u524d\u56db\u5927\u503c**\uff0c\u5148\u4e0d\u8003\u8651\u8fd9\u4e48\u505a\u601d\u8def\u4e0a\u6709\u6ca1\u6709\u6f0f\u6d1e\uff0c\u5199\u8d77\u6765\u80af\u5b9a\u8d85\u8d85\u8d85\u9ebb\u70e6\uff01\uff01\uff01\uff08~~\u672c\u849f\u84bb\u8fd8\u6ca1\u52a8\u624b\u5c31\u9884\u6599\u5230\u81ea\u5df1\u4f1a\u5199\u6302~~\uff09\uff0c\u4e8e\u662f\u8003\u8651~~\u5077\u5de5\u51cf\u6599~~\u53ea\u7ef4\u62a4**\u4e25\u683c\u6700\u5927\u7684\u4e24\u4e2a\u503c**\u3002\n\n\u53ea\u7ef4\u62a4**\u4e25\u683c\u524d\u4e8c\u5927\u503c**\u7684\u8bdd\uff0c\u5c0f A \u5012\u662f\u597d\u529e\u2014\u2014\u5bf9\u5e94\u6811\u94fe\u6240\u7ef4\u62a4\u7684\u4e25\u683c\u524d\u4e24\u5927\u503c\u5c31\u662f TA \u7684\u6700\u4f18\u9009\u62e9\uff0c\u4f46\u5bf9\u4e8e\u5728\u6574\u9897\u6811\u4e0a\u67e5\u8be2\u7684\u5c0f B \u6211\u4eec\u53c8\u8be5\u5982\u4f55\u6c42\u89e3\uff1f\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u8981\u5728\u6574\u9897\u6811\u4e0a\u8fdb\u884c\u67e5\u8be2\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u67e5\u8be2\u7684\u70b9\u5408\u6cd5\uff08\u5373\u6ca1\u6709\u5c0f A \u9009\u8fc7\u7684\u70b9\uff09\u3002\u60f3\u5230\u8fd9\u91cc\uff0c\u4f60\u53ef\u80fd\u4f1a\u4e0d\u7531\u5f97\u611f\u53f9\uff0c\u8981\u662f\u80fd\u628a\u5c0f A \u9009\u8fc7\u7684\u70b9**\u6263\u53bb**\u5c31\u597d\u4e86\u3002\n\n\u7b49\u7b49\uff0c**\u628a\u5c0f A \u9009\u7684\u70b9\u6263\u53bb**\uff1f\n\n\u867d\u7136\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u771f\u7684\u628a\u5c0f A \u9009\u8fc7\u7684\u70b9\u7ed9\u201c**\u6263\u53bb**\u201d\uff0c\u4f46\u662f\u53ea\u8981\u6211\u4eec**\u4e0d\u67e5\u8be2**\u8fd9\u4e2a\u70b9\uff0c\u4e0d\u5c31\u76f8\u5f53\u4e8e\u628a TA \u7ed9\u6263\u53bb\u4e86\u561b\uff1f\n\n- \u8003\u8651\u5c0f A \u53ea\u4f1a\u9009\u62e9\u4e24\u4e2a\u70b9\uff0c\u90a3\u6211\u4eec\u53ea\u8981\u5728**\u7ef4\u62a4\u524d\u4e24\u5927\u503c\u65f6\u987a\u5e26\u8bb0\u5f55\u8be5\u503c\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u201c\u4f4d\u7f6e\u201d**\uff0c\u67e5\u8be2\u6574\u68f5\u6811\uff08\u56e0\u4e3a\u5c0f B \u662f\u5728\u6574\u68f5\u6811\u4e0a\u9009\u561b\uff09\u7684\u65f6\u5019\u7a7a\u5f00\u8be5\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u4e8e\u662f\uff0cAC get!\n\n~~\u6ca1\u60f3\u5230\u52a0\u4e86\u53e5\u5feb\u8bfb\u5438\u53e3\u6c27\u5c45\u7136\u6682\u65f6 Rank1 \u4e86~~\n\n\u4ee3\u7801\u5199\u7684\u5f88\u4e50\u8272\uff0c\u8bf7\u914c\u60c5\u98df\u7528 QAQ\n```cpp\n#include <bits/stdc++.h>\n#define lson(x) x<<1\n#define rson(x) x<<1|1\nusing namespace std;\nconst int maxn=1e5+5;\nstruct edges\n{\n    int to,next;\n}edge[maxn*2];\nint read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nint n,m;\nint head[maxn],cnt;\nvoid addedge(int from,int to)//\u94fe\u5f0f\u524d\u5411\u661f\n{\n    edge[++cnt]={from,head[to]};\n    head[to]=cnt;\n    edge[++cnt]={to,head[from]};\n    head[from]=cnt;\n}\nint all[maxn];\nint size[maxn],dep[maxn],son[maxn],fa[maxn];//\u7ecf\u5178\u6811\u5256\u5957\u8def\nvoid dfs1(int now,int f)\n{\n    size[now]=1;\n    dep[now]=dep[f]+1;\n    fa[now]=f;\n    int mmax=0;\n    for(int i=head[now];i!=-1;i=edge[i].next)\n    {\n        if(edge[i].to==f)\n            continue;\n        dfs1(edge[i].to,now);\n        size[now]+=size[edge[i].to];\n        if(size[edge[i].to]>mmax)\n        {\n            mmax=size[edge[i].to];\n            son[now]=edge[i].to;\n        }\n    }\n}\nint top[maxn],id[maxn],init[maxn],idx;\nvoid dfs2(int now,int topf)\n{\n    id[now]=++idx;\n    top[now]=topf;\n    init[idx]=all[now];\n    if(!son[now])\n        return ;\n    dfs2(son[now],topf);\n    for(int i=head[now];i!=-1;i=edge[i].next)\n    {\n        if(id[edge[i].to]==0)\n            dfs2(edge[i].to,edge[i].to);\n    }\n}\nstruct node\n{\n    int mmax,submax,id1,id2;\n}tree[maxn<<2];//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e25\u683c\u6700\u5927\u503c\uff0c\u4e25\u683c\u6b21\u5927\u503c\u4e0e\u5176\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e0b\u6807\nnode getmax(node a,node b)//\u8fd9\u91cc\u5199\u7684\u4e0d\u592a\u597d\uff0c\u5176\u5b9e\u548c\u4e0b\u9762\u7684\u7ebf\u6bb5\u6811push_up\u5408\u5e76\u8282\u70b9\u662f\u4e00\u6837\u7684\n{\n    node c;\n    if(a.mmax>b.mmax)\n    {\n        c.mmax=a.mmax;\n        c.id1=a.id1;\n        if(a.submax>b.mmax)\n        c.submax=a.submax,c.id2=a.id2;\n        else\n        c.submax=b.mmax,c.id2=b.id1;\n    }\n    else if(a.mmax<b.mmax)\n    {\n        c.mmax=b.mmax;\n        c.id1=b.id1;\n        if(b.submax>a.mmax)\n        c.submax=b.submax,c.id2=b.id2;\n        else\n        c.submax=a.mmax,c.id2=a.id1;\n    }\n    else\n    {\n        c.mmax=a.mmax;\n        c.id1=a.id1;\n        if(a.submax>b.submax)\n          c.submax=a.submax,c.id2=a.id2;\n        else\n           c.submax=b.submax,c.id2=b.id2;\n    }\n    return c;\n}\nvoid push_up(int now)//\u7ebf\u6bb5\u6811push_up\u5408\u5e76\u8282\u70b9\n{\n    if(tree[lson(now)].mmax>tree[rson(now)].mmax)\n    {\n        tree[now].mmax=tree[lson(now)].mmax;\n        tree[now].id1=tree[lson(now)].id1;\n        if(tree[lson(now)].submax>tree[rson(now)].mmax)\n        tree[now].submax=tree[lson(now)].submax,tree[now].id2=tree[lson(now)].id2;\n        else\n        tree[now].submax=tree[rson(now)].mmax,tree[now].id2=tree[rson(now)].id1;\n    }\n    else if(tree[lson(now)].mmax<tree[rson(now)].mmax)\n    {\n        tree[now].mmax=tree[rson(now)].mmax;\n        tree[now].id1=tree[rson(now)].id1;\n        if(tree[rson(now)].submax>tree[lson(now)].mmax)\n        tree[now].submax=tree[rson(now)].submax,tree[now].id2=tree[rson(now)].id2;\n        else\n        tree[now].submax=tree[lson(now)].mmax,tree[now].id2=tree[lson(now)].id1;\n    }\n    else\n    {\n        tree[now].mmax=tree[lson(now)].mmax;\n        tree[now].id1=tree[lson(now)].id1;\n        if(tree[lson(now)].submax>tree[rson(now)].submax)\n          tree[now].submax=tree[lson(now)].submax,tree[now].id2=tree[lson(now)].id2;\n        else\n           tree[now].submax=tree[rson(now)].submax,tree[now].id2=tree[rson(now)].id2;\n    }\n}\nvoid build(int l,int r,int now=1)\n{\n    if(l==r)\n    {\n        tree[now].mmax=init[l];//\u521d\u59cb\u5316\u4e25\u683c\u6700\u5927\u503c\uff0c\u7531\u4e8e\u5e95\u5c42\u5355\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u4e25\u683c\u6b21\u5927\u503c\uff0c\u5c31\u8ba9ta\u4e3a0\u5c31\u53ef\u4ee5\u4e86\n        tree[now].id1=l;//\u521d\u59cb\u5316id1\u8bb0\u5f55\u4e25\u683c\u6700\u5927\u503c\u7684\u4e0b\u6807\uff0cid2\u521d\u59cb\u5316\u4e3a0\n        return ;\n    }\n    int mid=l+r>>1;\n    build(l,mid,lson(now));\n    build(mid+1,r,rson(now));\n    push_up(now);\n}\nvoid update(int l,int r,int idx,int num,int now=1)\n{\n    if(l==r)\n    {\n        tree[now].mmax+=num;\n        return ;\n    }\n    int mid=l+r>>1;\n    if(idx<=mid)\n        update(l,mid,idx,num,lson(now));\n    else\n        update(mid+1,r,idx,num,rson(now));\n    push_up(now);\n}\nnode ask(int l,int r,int upl,int upr,int now=1)\n{\n    if(upl<=l&&upr>=r)\n        return tree[now];\n    int mid=l+r>>1;\n    if(upr<=mid)\n        return ask(l,mid,upl,upr,lson(now));\n    else if(upl>mid)\n        return ask(mid+1,r,upl,upr,rson(now));\n    else\n        return getmax(ask(l,mid,upl,upr,lson(now)),ask(mid+1,r,upl,upr,rson(now)));\n}\nvoid splitask(int x,int y)\n{\n    node ans={0,0},temp;\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]])\n            swap(x,y);\n        temp=ask(1,n,id[top[x]],id[x]);\n        ans=getmax(ans,temp);\n        x=fa[top[x]];\n    }\n     if(dep[x]<dep[y])\n            swap(x,y);\n        temp=ask(1,n,id[y],id[x]);\n        ans=getmax(ans,temp);\n    if(ans.submax==0)//\u5982\u679c\u4e25\u683c\u6b21\u5927\u503c\u4e3a0\uff0c\u53ea\u80fd\u8bf4\u660e\u65e0\u4e25\u683c\u6b21\u5927\u503c\u3002\n        printf(\"-1\\n\");\n    else\n    {\n        node ans2={0,0};\n        if(ans.id1>ans.id2)\n            swap(ans.id1,ans.id2);\n        if(ans.id1!=1)//\u628a\u5c0fA\u9009\u8fc7\u7684\u4e24\u4e2a\u70b9\u7a7a\u5f00\uff0c\u6ce8\u610f\u5224\u65ad\u8fb9\u754c\u95ee\u9898\n        {\n            temp=ask(1,n,1,ans.id1-1);\n            ans2=getmax(ans2,temp);\n        }\n        if(ans.id2-ans.id1!=1)\n        {\n            temp=ask(1,n,ans.id1+1,ans.id2-1);\n            ans2=getmax(ans2,temp);\n        }\n        if(ans.id2!=n)\n        {\n            temp=ask(1,n,ans.id2+1,n);\n            ans2=getmax(ans2,temp);\n        }\n        printf(\"%d %d\\n\",ans.submax,ans2.submax);\n    }\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    n=read();\n    int from,to;\n    for(int i=1;i<n;i++)\n    {\n        from=read(),to=read();\n        addedge(from,to);\n    }\n    for(int i=1;i<=n;i++)\n        all[i]=read();\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,n);\n    m=read();\n    int opt,x,y;\n    for(int i=1;i<=m;i++)\n    {\n        opt=read(),x=read(),y=read();\n        if(opt==1)\n            splitask(x,y);\n        else\n            update(1,n,id[x],y);\n    }\n\treturn 0;\n}\n\n```\n",
        "postTime": 1644498290,
        "uid": 407489,
        "name": "ekatsim",
        "ccfLevel": 0,
        "title": "ingteresting \u306e game"
    },
    {
        "content": "\u5176\u5b9e\u672c\u9898\u96be\u5ea6\u53ea\u6709 $T3$\uff0c\u4f46\u56e0\u4e3a\u51fa\u9898\u4eba\u4ee3\u7801\u6bd2\u7624\u4e86\uff0c\u5c31\u628a\u8fd9\u9053\u9898\u653e\u5230\u4e86 $T5$\u3002\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u8981\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba:\n\n\u5728\u4e00\u4e2a\u56fa\u5b9a\u7684\u96c6\u5408\u4e2d $\\max(b_i \\bmod b_j)=$ \u4e25\u683c\u6b21\u5927\u503c \n\n\u8bc1\u660e:\u5982\u679c $b_i>b_j$\uff0c\u90a3\u4e48\u4ea4\u6362 $b_i,b_j$ \u80af\u5b9a\u66f4\u4f18(\u4f59\u6570\u5c0f\u4e8e\u9664\u6570)\uff0c\u5982\u679c $b_i<b_j$\uff0c\u90a3\u4e48 $b_i\\bmod b_j=b_i$\uff0c\u6240\u4ee5\u6c42\u7684\u662f\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5927\u800c\u4e0d\u662f\u6700\u5927\u7684\u503c\u3002\u5373\u4e3a\u4e25\u683c\u6b21\u5927\u503c\u3002\n\nSubtask1:$n,q \\le1000$ \n\n\u66b4\u529b\u679a\u4e3e\u627e\u4e25\u683c\u6b21\u5927\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nq)$ \u3002\n\nSubtask2:\u6570\u636e\u968f\u673a\n\n\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u4e71\u641e\u65b9\u6cd5\u3002\n\nSubtask3:\u6ca1\u6709\u4fee\u6539\uff0c\u70b9\u6743\u4e0d\u591a\u4e8e $5$ \u79cd\u3002\n\n\u53ef\u4ee5\u63d0\u524d\u79bb\u6563\u5316+\u6876\uff0c\u7ef4\u62a4\u5230\u6839\u7684\u6240\u6709\u503c\u4e2a\u6570\uff0c\u8be2\u95ee\u65f6\u51cf\u53bb $LCA$ \u5373\u53ef\u3002\n\nSubtask4:\u6811\u4e3a\u4e00\u6761\u94fe\n\n\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6b21\u5927\u503c\uff0c\u5047\u5982\u8be2\u95ee\u7684\u662f $l,r$\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6c42\u51fa $l\\sim r$\u7684\u4e25\u683c\u6b21\u5927\u503c\u548c $1\\sim l-1$ \u548c $r+1 \\sim n$\u7684\u4e25\u683c\u6b21\u5927\u503c\u3002\u6240\u4ee5\u6784\u5efa\u4e00\u4e2a\u53ef\u4ee5\u7ef4\u62a4\u4e25\u683c\u6b21\u5927\u503c\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O((n+q)\\log n)$\u3002\n\nSubtask5:\u65e0\u7279\u6b8a\u6761\u4ef6\n\n\u81f3\u4e8e\u5c0f A\uff0c\u53ef\u4ee5\u60f3\u5230\u7528\u6811\u94fe\u5256\u5206\uff0c\u7ef4\u62a4\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\u5373\u53ef\u3002\u4f46\u5bf9\u4e8e\u5c0f $B$ \u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e Subtask3 \u7684\u601d\u60f3\uff0c\u5f00\u6876\u7ef4\u62a4\uff0c\u4f46\u5f00\u592a\u591a\u6876\u65f6\u95f4\u65e0\u6cd5\u63a5\u53d7\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u65e0\u8bba\u5c0f A \u600e\u4e48\u9009\uff0c\u5c0f B \u90fd\u53ef\u4ee5\u5f97\u5230\u5927\u4e8e\u4e25\u683c\u7b2c\u56db\u5927\u503c\u7684\u7b54\u6848\uff08\u5c0f A \u53ea\u80fd\u9009\u4e24\u4e2a\u6570\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e9b\u4e1c\u897f\uff1a\u5168\u5c40\u6700\u5927\u503c\u53ca\u4e2a\u6570\uff0c\u5168\u5c40\u4e25\u683c\u6b21\u5927\u503c\u53ca\u4e2a\u6570\uff0c\u5168\u5c40\u4e25\u683c\u7b2c\u4e09\u5927\u503c\u53ca\u4e2a\u6570\uff0c\u5168\u5c40\u4e25\u683c\u7b2c\u56db\u5927\u503c\u3002\u4fee\u6539\u7684\u65f6\u5019\u7ef4\u62a4\u6709\u70b9\u590d\u6742\uff0c\u9700\u8981\u5148\u5220\u6389\u518d\u52a0\u5165\uff08\u5982\u679c\u662f\u5168\u5c40\u4e25\u683c\u524d\u56db\u5927\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#pragma comment(linker, \"/STACK:102400000,102400000\") \n#define in inline\n#define re register\nusing namespace std;\nin int read() {\n\tre int t=0,f=1;\n\tre char v=getchar();\n\twhile(v<'0'||v>'9') {\n\t\tif(v=='-')f=-1;\n\t\tv=getchar();\n\t}\n\twhile(v>='0'&&v<='9') {\n\t\tt=(t<<3)+(t*2)+(v^48);\n\t\tv=getchar();\n\t}\n\treturn t*f;\n}\nint n,m,mx1,mx2,mx3,mx4,cnt1,cnt2,cnt3,fa[100002],siz[100002],dep[100002],son[100002],ans1,mxcnt,seccnt,mxcnt1,ans2,pl[100002],tot,tp[100002],fp[100002],a,b,c,head[200002],cnt,treemx[400002],w[100002],treesec[400002],q;\nint s;\nstruct edge {\n\tint to,next;\n} e[200002];\nin void bu(re int x,re int y) {\n\te[++cnt].to=y;\n\te[cnt].next=head[x];\n\thead[x]=cnt;\n}\nin void dfs(re int x,re int y) {\n\tdep[x]=dep[y]+1;\n\tsiz[x]=1;\n\tint mxs=0,mxp=0;\n\tfa[x]=y;\n\tfor(re int i=head[x]; i; i=e[i].next) {\n\t\tif(e[i].to!=y) {\n\t\t\tdfs(e[i].to,x);\n\t\t\tif(siz[e[i].to]>mxs) {\n\t\t\t\tmxs=siz[e[i].to];\n\t\t\t\tmxp=e[i].to;\n\t\t\t}\n\t\t\tsiz[x]+=siz[e[i].to];\n\t\t}\n\t}\n\tson[x]=mxp;\n}\nin void dfs1(re int x,re int y) {\n\ttp[x]=y;\n\tfp[++tot]=x;\n\tpl[x]=tot;\n\tif(son[x])dfs1(son[x],y);\n\tfor(re int i=head[x]; i; i=e[i].next) {\n\t\tif(e[i].to!=fa[x]&&e[i].to!=son[x]) {\n\t\t\tdfs1(e[i].to,e[i].to);\n\t\t}\n\t}\n}\nin void build(re int p,re int l,re int r) {\n\tif(l==r) {\n\t\ttreemx[p]=w[fp[l]];\n\t\treturn;\n\t}\n\tbuild((p*2),l,((l+r)/2));\n\tbuild((p*2)+1,((l+r)/2)+1,r);\n\tif(treemx[p*2]>treemx[p]){\n\t\ttreesec[p]=treemx[p];\n\t\ttreemx[p]=treemx[p*2];\n\t}\n\telse if(treemx[p*2]>treesec[p]&&treemx[p*2]!=treemx[p]){\n\t\ttreesec[p]=treemx[p*2];\n\t}\n\tif(treesec[p*2]>treesec[p]){\n\t\ttreesec[p]=treesec[p*2];\n\t}\n\tif(treemx[p*2+1]>treemx[p]){\n\t\ttreesec[p]=treemx[p];\n\t\ttreemx[p]=treemx[p*2+1];\n\t}\n\telse if(treemx[p*2+1]>treesec[p]&&treemx[p*2+1]!=treemx[p]){\n\t\ttreesec[p]=treemx[p*2+1];\n\t}\n\tif(treesec[p*2+1]>treesec[p]){\n\t\ttreesec[p]=treesec[p*2+1];\n\t}\n}\nin void cg(re int p,re int l,re int r,re int x,re int w) {\n\tif(l==r&&l==x) {\n\t\ttreemx[p]+=w;\n\t\treturn;\n\t}\n\tif(l>x)return;\n\tif(r<x)return;\n\tcg((p*2),l,(l+r)/2,x,w);\n\tcg((p*2)+1,(l+r)/2+1,r,x,w);\n\ttreemx[p]=treesec[p]=0;\n\tif(treemx[p*2]>treemx[p]){\n\t\ttreesec[p]=treemx[p];\n\t\ttreemx[p]=treemx[p*2];\n\t}\n\telse if(treemx[p*2]>treesec[p]&&treemx[p*2]!=treemx[p]){\n\t\ttreesec[p]=treemx[p*2];\n\t}\n\tif(treesec[p*2]>treesec[p]){\n\t\ttreesec[p]=treesec[p*2];\n\t}\n\tif(treemx[p*2+1]>treemx[p]){\n\t\ttreesec[p]=treemx[p];\n\t\ttreemx[p]=treemx[p*2+1];\n\t}\n\telse if(treemx[p*2+1]>treesec[p]&&treemx[p*2+1]!=treemx[p]){\n\t\ttreesec[p]=treemx[p*2+1];\n\t}\n\tif(treesec[p*2+1]>treesec[p]){\n\t\ttreesec[p]=treesec[p*2+1];\n\t}\n}\n\nin void askmx(re int p,re int l,re int r,re int x,re int y) {\n\tif(l>=x&&r<=y) {\n\t\tif(treemx[p]>ans1){\n\t\t\tans2=ans1;\n\t\t\tans1=treemx[p];\n\t\t}\n\t\telse if(treemx[p]>ans2&&treemx[p]!=ans1){\n\t\t\tans2=treemx[p];\n\t\t}\n\t\tif(treesec[p]>ans2){\n\t\t\tans2=treesec[p];\n\t\t}\n\t\treturn;\n\t}\n\tif(l>y)return;\n\tif(r<x)return;\n\taskmx((p*2),l,((l+r)/2),x,y);askmx((p*2)+1,((l+r)/2+1),r,x,y);\n\treturn;\n}\ninline void add(re int x){//\u52a0\u5165\u4e00\u4e2a\u503c\uff0c\u5bf9\u5168\u5c40\u524d\u56db\u5927\u7684\u503c\u7684\u5f71\u54cd \n\tif(x>mx1){\n\t\tmx4=mx3;\n\t\tmx3=mx2;\n\t\tcnt3=cnt2;\n\t\tmx2=mx1;\n\t\tcnt2=cnt1;\n\t\tmx1=x;\n\t\tcnt1=1;\n\t}\n\telse if(x==mx1){\n\t\t++cnt1;\n\t}\n\telse if(x>mx2){\n\t\tmx4=mx3;\n\t\tmx3=mx2;\n\t\tcnt3=cnt2;\n\t\tmx2=x;\n\t\tcnt2=1;\n\t}\n\telse if(x==mx2){\n\t\t++cnt2;\n\t}\n\telse if(x>mx3){\n\t\tmx4=mx3;\n\t\tmx3=x;\n\t\tcnt3=1;\n\t}\n\telse if(x==mx3){\n\t\t++cnt3;\n\t}\n\telse if(x>mx4){\n\t\tmx4=x;\n\t}\n}\nint main() {\n\tn=read();\n\tfor(re int i=1; i<n; ++i) {\n\t\ta=read();\n\t\tb=read();\n\t\tbu(a,b);\n\t\tbu(b,a);\n\t}\n\tfor(re int i=1; i<=n; ++i){\n\tw[i]=read();\n\tadd(w[i]);}\n\tdfs(1,1);\n\tdfs1(1,1);\n\tbuild(1,1,n);\n\tscanf(\"%d\",&q);\n\twhile(q--) {\n\t\tscanf(\"%d%d%d\",&s,&a,&b);\n\t\tif(s==0) {\n\t\t\tif(w[a]==mx1){\n\t\t\t\t--cnt1;\n\t\t\t\tif(!cnt1){\n\t\t\t\tcnt1=cnt2;\n\t\t\t\tcnt2=cnt3;\n\t\t\t\tmx1=mx2;\n\t\t\t\tmx2=mx3;\n\t\t\t\tmx3=mx4;\n\t\t\t\t}\t\n\t\t\t}\n\t\t\telse if (w[a]==mx2){\n\t\t\t\t--cnt2;\t\n\t\t\t\tif(!cnt2){\t\n\t\t\t\tmx2=mx3;\n\t\t\t\tmx3=mx4;\n\t\t\t\tcnt2=cnt3;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\telse if (w[a]==mx3){\n\t\t\t\t--cnt3;\n\t\t\t\tif(!cnt3){\n\t\t\t\tmx3=mx4;\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tw[a]+=b;\n\t\t\tadd(w[a]);\n\t\t\tcg(1,1,n,pl[a],b);\n\t\t} \n\t\telse {\n\t\t\tans1=ans2=0;\n\t\t\twhile(tp[a]!=tp[b]) {\n\t\t\t\t\tif(dep[tp[a]]>dep[tp[b]]) {\n\t\t\t\t\t\taskmx(1,1,n,pl[tp[a]],pl[a]);\n\t\t\t\t\t\ta=tp[a];\n\t\t\t\t\t\ta=fa[a];\n\t\t\t\t\t} else {\n\t\t\t\t\t\taskmx(1,1,n,pl[tp[b]],pl[b]);\n\t\t\t\t\t\tb=tp[b];\n\t\t\t\t\t\tb=fa[b];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(dep[a]>dep[b])askmx(1,1,n,pl[b],pl[a]);\n\t\t\telse askmx(1,1,n,pl[a],pl[b]);\n\t\t\tint Mx=0,Mx1=0;\n\t\t\tif(ans1==mx1){if(cnt1>=2)Mx=mx1;}\n\t\t\telse Mx=mx1;\n\t\t\tif(ans1==mx2||ans2==mx2){if(cnt2>=2)if(!Mx)Mx=mx2;else Mx1=mx2;}\n\t\t\telse {if(!Mx)Mx=mx2;else Mx1=mx2; }\n\t\t\tif(ans1==mx3||ans2==mx3){if(cnt3>=2)if(!Mx)Mx=mx3;else if(!Mx1)Mx1=mx3;}\n\t\t\telse {if(!Mx)Mx=mx3;else if(!Mx1)Mx1=mx3;}\n\t\t\tif(!Mx1)Mx1=mx4;\n\t\t\tif(ans2)printf(\"%d %d\\n\",ans2,Mx1);\n\t\t\telse puts(\"-1\");\n\t\t}\n\t}\n}\n```\n\n\n\n\n",
        "postTime": 1581989021,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "T5-\u6709\u8da3\u7684\u6e38\u620f"
    },
    {
        "content": "# [LG-P6157 \u6709\u8da3\u7684\u6e38\u620f](https://www.luogu.com.cn/problem/P6157) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=LG-P6157-Solution)\n\n\uff08\u4e00\u6708\u4efd\u5199\u7684\u9898\u89e3\uff0c\u7136\u540e\u4ea4\u9519\u9898\u76ee\u4e86\uff0c\u4eca\u5929\u624d\u53d1\u73b0\uff09\n\n### \u9898\u9762\n\n\u7ed9\u5b9a $ n $ \u4e2a\u70b9\u7684\u6811\uff0c\u5b58\u5728\u70b9\u6743 $ w_i $\uff0c\u72ec\u7acb\u8be2\u95ee\u6bcf\u6b21\u53ef\u80fd\u4e3a\u5355\u70b9\u4fee\u6539\u70b9\u6743\uff0c\u53ef\u80fd\u7ed9\u51fa\u4e24\u70b9\uff0c$ A $ \u5728\u6811\u4e0a\u4e24\u70b9\u6700\u77ed\u8def\u5f84\u4e0a\u9009\u62e9\u4e24\u4e2a\u70b9 $ x, y $ \u6700\u5927\u5316 $ w_x \\bmod{w_y} $\uff0c\u540e\u8005\u5728\u6811\u4e0a\u9009\u62e9\u975e $ x, y $ \u7684\u4e24\u70b9\u540c\u6837\u6700\u5927\u5316\u4e0a\u5f0f\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u6c42\u51fa $ A $ \u6700\u5927\u7684\u503c\uff0c\u5e76\u6c42\u51fa\u6b64\u65f6 $ B $ \u6700\u5927\u7684\u503c\uff0c$ A $ \u65e0\u6cd5\u9009\u62e9\u5219\u8f93\u51fa `-1`\u3002\n\n### Solution\n\n\u63d0\u4f9b\u4e00\u79cd**\u590d\u6742\u5ea6\u6b63\u786e**\u4f46\u5e38\u6570**\u5de8\u5927**\u7801\u91cf**\u8f83\u5927**\u7684**\u5e76\u4e0d\u4f18\u79c0**\u7684\u65e0\u8111\u505a\u6cd5\uff0c\u601d\u8def\u6765\u81ea\u4e8e\u6a21\u62df\u8d5b\u8d5b\u65f6\u53e3\u7cca\u7684\uff0c\u5728 Luogu \u4e0a\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u8d5b\u65f6\u5728 LemonLime \u6d4b\u7684\u65f6\u5019\u5927\u6982\u662f\u56e0\u4e3a\u5e38\u6570\u539f\u56e0\u88ab\u5361\u7684\u5c31\u5269 $ 20\\texttt{pts} $\u3002\n\n\u9996\u5148\u6211\u4eec\u4e0d\u96be\u60f3\u5230 $ w_x \\bmod{w_y} $ \u5373\u4e3a\u94fe\u4e0a\u6b21\u5c0f\u503c\u3002\u8fd9\u4e2a\u4e0d\u96be\u8bc1\u660e\uff0c\u82e5\u6211\u4eec\u9009\u62e9\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5176\u5bf9\u8f83\u5c0f\u503c\u53d6\u6a21\u540e\u4e00\u5b9a\u5c0f\u4e8e\u8f83\u5c0f\u503c\uff0c\u800c\u82e5\u6211\u4eec\u9009\u62e9\u6b21\u5927\u503c\u5bf9\u6700\u5927\u503c\u53d6\u6a21\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4fdd\u7559\u6b21\u5c0f\u503c\u3002\n\n\u7136\u540e\u5462\u6700\u5f00\u59cb\u6211\u770b\u8fd9\u9053\u9898\u6ca1\u592a\u4ed4\u7ec6\uff0c\u4ee5\u4e3a $ B $ \u4e5f\u662f\u5728\u94fe\u4e0a\u627e\uff0c\u4e8e\u662f\u8003\u8651\u7684\u662f\u7ef4\u62a4\u6b21\u6b21\u5c0f\u548c\u6b21\u6b21\u6b21\u5c0f\u4fdd\u7559\u6b21\u6b21\u6b21\u5c0f\uff0c\u5f53\u7136\u8fd9\u4e2a\u662f\u5927\u9519\u7279\u9519\u7684\uff0c\u4e0d\u4ec5\u6ca1\u6709\u8003\u8651 $ B $ \u662f\u6811\u4e0a\u7684\uff0c\u8fd8\u6ca1\u6709\u8003\u8651 $ A $ \u4e0d\u80fd\u91cd\u590d\u6743\u503c\u4f46 $ B $ \u53ef\u4ee5\u3002\n\n\u4e8e\u662f\u5728\u6211\u53d1\u73b0\u95ee\u9898\u540e\u5c31\u5c1d\u8bd5\u4f18\u5316\u8fd9\u4e2a\u601d\u8def\uff0c\u6700\u7ec8\u7684\u8fc7\u7a0b\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n\u9996\u5148\u6811\u5256\u663e\u7136\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u533a\u95f4\u7684\u4e0d\u53ef\u91cd\u590d\u7684\u524d $ 5 $ \u5927\u503c\uff0c\u4ee5\u53ca\u6700\u591a\u91cd\u590d\u4e00\u6b21\uff08\u5373\u6709\u4e24\u4e2a\uff09\u7684\u524d $ 5 $ \u5927\u503c\u3002\u7136\u540e\u5bf9\u4e8e\u5408\u5e76\u5b50\u533a\u95f4\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u7ed3\u6784\u4f53\u7136\u540e\u91cd\u8f7d `+`\uff0c\u5b9e\u73b0\u4e0a\u7528\u4e00\u4e2a `basic_string` \u5b58\u5b50\u8282\u70b9\u6240\u6709\u503c\u7136\u540e\u6392\u5e8f\u5e76\u5404\u79cd\u7279\u5224\u7ec6\u8282\u505a\u4e00\u4e0b\u5373\u53ef\uff0c\u4e0d\u96be\u53d1\u73b0\u8d85\u5927\u7684\u5e38\u6570\u5c31\u662f\u5361\u5728\u8fd9\u91cc\u4e86\uff0c\u8fd9\u4e1c\u897f\u67d0\u79cd\u610f\u4e49\u4e0a\u6765\u8bb2\u53ef\u4ee5\u8ba4\u4e3a\u5176\u4e3a $ O(1) $ \u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e2a\u4eba\u611f\u89c9\u5e73\u5747\u5927\u6982\u6709\u4e2a $ 10 $ \u5de6\u53f3\u7684\u5e38\u6570\u3002\n\n\u7136\u540e\u4fee\u6539\u8f83\u4e3a\u7b80\u5355\u4e0d\u518d\u8d58\u8ff0\uff0c\u5bf9\u4e8e\u67e5\u8be2\u76f4\u63a5\u6309\u7167\u6811\u5256\u67e5\u8be2\u5e76\u5408\u5e76\uff0c\u5bf9\u4e8e\u4e0d\u80fd\u91cd\u590d\u7684\u524d $ 5 $ \u5927\u53d6\u5176\u7b2c\u4e8c\u5927\u4f5c\u4e3a $ A $ \u7684\u7b54\u6848\uff0c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa `-1`\u3002\u7136\u540e\u6211\u4eec\u8981\u518d\u6b21\u67e5\u8be2\u6574\u68f5\u6811\u7684\u7ed3\u679c\uff0c\u5728\u53ef\u91cd\u590d\u4e24\u6b21\u7684\u524d $ 5 $ \u5927\u4e2d\u5220\u53bb $ A $ \u7684\u4e24\u4e2a\u7b54\u6848\uff0c\u6b64\u65f6\u4e0d\u96be\u7406\u89e3\u4e3a\u4ec0\u4e48\u7ef4\u62a4\u7684\u662f\u53ef\u4ee5\u91cd\u590d\u4e24\u6b21\u7684\u3002\u7136\u540e\u6b64\u65f6\u8fd8\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u5982\u679c\u7ed3\u679c\u4e0d\u591f\u8bf4\u660e\u53ea\u80fd\u627e\u5230\u4e24\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u8fd9\u6837\u7ed3\u679c\u4e3a $ 0 $\uff0c\u5982\u679c\u6700\u7ec8\u5269\u4e0b\u4e09\u4e2a\u6570\u4e14\u524d\u4e24\u4e2a\u4e3a $ 0 $\uff0c\u90a3\u4e48\u8bf4\u660e\u539f\u6765\u7684\u4e3a $ a \\gt b \\gt c = d \\gt e $\uff0c\u7136\u540e $ a, b $ \u88ab\u5220\u9664\uff0c\u6b64\u65f6\u5982\u679c\u6211\u4eec\u4e0d\u7ef4\u62a4 $ e $ \u7b54\u6848\u5c06\u53d8\u4e3a $ 0 $\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7ef4\u62a4\u524d $ 5 $ \u5927\u800c\u4e0d\u662f $ 4 $\uff0c\u663e\u7136\u6b64\u65f6\u7b54\u6848\u5e94\u4e3a $ e $\u3002\u540c\u65f6\u56e0\u4e3a\u9898\u91cc\u6ca1\u6709\u8bf4 $ B $ \u53d6\u4e0d\u4e86\u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u96be\u60f3\u5230\u53ea\u8981 $ n \\ge 4 $ \u90a3\u4e48 $ B $ \u4e00\u5b9a\u53ef\u4ee5\u62ff\uff0c\u6240\u4ee5\u59d1\u4e14\u53ef\u4ee5\u8ba4\u4e3a\u9898\u76ee\u4fdd\u8bc1\u4e86 $ n \\ge 4 $\u3002\n\n\u5f53\u7136\u8fd9\u91cc\u4e5f\u6d45\u63d0\u4e00\u4e0b\uff0c\u5982\u679c\u7528 `multiset` \u7ef4\u62a4 $ B $ \u7684\u8bdd\u5c31\u53ea\u9700\u8981\u7ef4\u62a4\u6700\u5927\u548c\u6b21\u5927\u5c31\u53ef\u4ee5\u4e86\uff0c\u5e38\u6570\u5c0f\u4e14\u597d\u5199\uff0c\u4e5f\u4e0d\u77e5\u9053\u6211\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u6ca1\u60f3\u5230\uff0c\u4f30\u8ba1\u662f\u5f00\u59cb\u8bfb\u9519\u9898\u4e4b\u540e\u5148\u5165\u4e3a\u4e3b\u4e86\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    OPNEW;\n}ed[210000];\nROPNEW;\nEdge* head[110000];\n\nint N, Q;\nll w[110000];\nint dep[110000], dfn[110000], hson[110000], siz[110000], ffa[110000], tp[110000], idx[110000];\n\nvoid dfs_pre(int p = 1, int fa = 0){\n    dep[p] = dep[fa] + 1;\n    siz[p] = 1;\n    ffa[p] = fa;\n    for(auto i = head[p]; i; i = i->nxt){\n        if(SON == fa)continue;\n        dfs_pre(SON, p);\n        siz[p] += siz[SON];\n        if(siz[hson[p]] < siz[SON])hson[p] = SON;\n    }\n}\nvoid dfs_make(int p = 1, int top = 1){\n    tp[p] = top;\n    static int cdfn(0);\n    dfn[p] = ++cdfn;\n    idx[cdfn] = p;\n    if(hson[p])dfs_make(hson[p], top);\n    for(auto i = head[p]; i; i = i->nxt)\n        if(SON != ffa[p] && SON != hson[p])\n            dfs_make(SON, SON);\n}\n\nstruct Node{\n    ll v[6], vu[6]; //v_max_with_2, v_unique\n    Node(void){memset(v, 0, sizeof v), memset(vu, 0, sizeof vu);}\n    friend Node operator + (const Node &a, const Node &b){\n        Node ret;\n        basic_string < ll > values;\n        for(int i = 1; i <= 5; ++i){\n            if(a.v[i])values += a.v[i];\n            if(b.v[i])values += b.v[i];\n        }sort(values.begin(), values.end(), greater < ll >());\n        for(auto it = values.begin(); it != values.end() && next(it) != values.end() && next(it, 2) != values.end();)\n            if(*it == *next(it) && *next(it) == *next(it, 2))it = values.erase(it);\n            else advance(it, 1);\n        for(int i = 1; i <= 5; ++i)\n            ret.v[i] = (int)values.size() >= i ? values.at(i - 1) : 0;\n        values.clear();\n        for(int i = 1; i <= 5; ++i){\n            if(a.vu[i])values += a.vu[i];\n            if(b.vu[i])values += b.vu[i];\n        }sort(values.begin(), values.end(), greater < ll >());\n        values.erase(unique(values.begin(), values.end()), values.end());\n        for(int i = 1; i <= 5; ++i)\n            ret.vu[i] = (int)values.size() >= i ? values.at(i - 1) : 0;\n        return ret;\n    }\n};\n\nclass SegTree{\nprivate:\n    Node mx[110000 << 2];\n    #define LS (p << 1)\n    #define RS (LS | 1)\n    #define MID ((gl + gr) >> 1)\npublic:\n    void Pushup(int p){\n        mx[p] = mx[LS] + mx[RS];\n    }\n    void Build(int p = 1, int gl = 1, int gr = N){\n        if(gl == gr)return mx[p].v[1] = mx[p].vu[1] = w[idx[gl = gr]], void();\n        Build(LS, gl, MID), Build(RS, MID + 1, gr);\n        Pushup(p);\n    }\n    void Modify(int id, int v, int p = 1, int gl = 1, int gr = N){\n        if(gl == gr)return mx[p].v[1] += v, mx[p].vu[1] += v, void();\n        if(id <= MID)Modify(id, v, LS, gl, MID);\n        else Modify(id, v, RS, MID + 1, gr);\n        Pushup(p);\n    }\n    Node Query(int l, int r, int p = 1, int gl = 1, int gr = N){\n        // printf(\"Querying l = %d, r = %d\\n\", l, r);\n        if(l <= gl && gr <= r)return mx[p];\n        if(gr < l || r < gl)return Node();\n        return Query(l, r, LS, gl, MID) + Query(l, r, RS, MID + 1, gr);\n    }\n}st;\n\nvoid Make(int s, int t){\n    Node cur;\n    while(tp[s] != tp[t]){\n        if(dep[tp[s]] < dep[tp[t]])swap(s, t);\n        cur = cur + st.Query(dfn[tp[s]], dfn[s]);\n        s = ffa[tp[s]];\n    }if(dep[s] < dep[t])swap(s, t);\n    cur = cur + st.Query(dfn[t], dfn[s]);\n    if(!cur.vu[1] || !cur.vu[2]){printf(\"-1\\n\"); return;}\n    Node ret = st.Query(1, N);\n    basic_string < ll > tmp;\n    for(int i = 1; i <= 5; ++i)if(ret.v[i])tmp += ret.v[i];\n    for(int i = 1; i <= 2; ++i)\n        if(find(tmp.begin(), tmp.end(), cur.vu[i]) != tmp.end())\n            tmp.erase(find(tmp.begin(), tmp.end(), cur.vu[i]));\n    if((int)tmp.size() < 2 || ((int)tmp.size() == 2 && tmp.at(0) == tmp.at(1))){printf(\"%lld 0\\n\", cur.vu[2]); return;}\n    if(tmp.size() == 3 && tmp.at(0) == tmp.at(1)){printf(\"%lld %lld\\n\", cur.vu[2], tmp.at(2)); return;}\n    printf(\"%lld %lld\\n\", cur.vu[2], tmp.at(0) == tmp.at(1) ? tmp.at(2) : tmp.at(1));\n    // for(int i = 1; i <= 5; ++i)printf(\"mxchain mxvu[%d] = %lld\\n\", i, cur.vu[i]);\n    // for(int i = 1; i <= 5; ++i)printf(\"mxtree mxv[%d] = %lld\\n\", i, ret.v[i]);\n}\n\nint main(){\n    // freopen(\"game.in\", \"r\", stdin);\n    // freopen(\"game.out\", \"w\", stdout);\n    N = read();\n    for(int i = 1; i <= N - 1; ++i){\n        int s = read(), t = read();\n        head[s] = new Edge{head[s], t};\n        head[t] = new Edge{head[t], s};\n    }dfs_pre(), dfs_make();\n    for(int i = 1; i <= N; ++i)w[i] = read();\n    st.Build();\n    Q = read();\n    while(Q--){\n        int opt = read(), x = read(), y = read();\n        if(opt == 0)st.Modify(dfn[x], y);\n        else Make(x, y);\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n\n/*\n\n7\n1 2\n2 3\n2 5\n1 5\n5 6\n5 7\n5 5 3 2 1 5 3\n6\n1 3 5\n1 2 5\n1 2 1\n0 2 1\n1 2 5\n1 2 1\n\n*/\n```\n\n## UPD\n\nupdate-2023_01_17 \u521d\u7a3f",
        "postTime": 1679314132,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P6157 \u6709\u8da3\u7684\u6e38\u620f \u9898\u89e3"
    },
    {
        "content": "_\u7b2c\u4e00\u7bc7\u9898\u89e3 && \u7d2b\u9898\u9898\u89e3, \u5199\u7684\u4e0d\u597d\u8bf7\u89c1\u8c05_\n \n -----------\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6157)\n\n**\u672c\u9898\u89e3\u7684\u601d\u8def\u57fa\u672c\u4e0e\u5176\u4ed6\u7684\u76f8\u4f3c\uff0c\u4f46\u5b9e\u73b0\u65b9\u5f0f\u66f4\u591a\u4f7f\u7528 STL \uff0c\u76f8\u6bd4\u5176\u4ed6\u9898\u89e3\u5b9e\u73b0\u8d77\u6765\u66f4\u7b80\u5355( ~~\u53ea\u4e0d\u8fc7\u7528\u65f6\u95f4\u548c\u7a7a\u95f4\u6362\u7f62\u4e86~~ )**\n \n**\u5206\u6790:**  \n* \u5982\u679c\u6211\u4eec\u53ea\u770b\u5c0f A \u7684\u8bdd\uff0c\u90a3\u4e48\u672c\u9898\u76f8\u5f53\u4e8e \u6811\u94fe\u5256\u5206\u6a21\u677f + \u7ef4\u62a4\u533a\u95f4 **\u4e25\u683c** \u6700\u5927\u503c \u548c **\u4e25\u683c** \u6b21\u5927\u503c ( \u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be ) \u3002  \n\n* \u5148\u5b9e\u73b0\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u6811\u94fe\u5256\u5206\u4e0d\u7528\u8bf4\uff0c\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u7ef4\u62a4\uff0c \u53ef\u4ee5\u76f4\u63a5\u50cf\u5176\u4ed6\u9898\u89e3\u4e00\u6837\u591a\u52a0\u51e0\u4e2a\u5224\u65ad\uff0c\u4e5f\u53ef\u4ee5\u7528 sort \u548c unique \u5b9e\u73b0 ( \u56e0\u4e3a\u4e25\u683c\uff0c\u6240\u4ee5\u8981\u7528 unique \u53bb\u91cd )\u3002   \n\n* \u6211\u4eec\u518d\u770b\u5c0f B \uff0c\u5b83\u8981\u6c42\u7684\u662f \u6811\u4e0a\u9664\u4e86\u5c0f A \u9009\u5b9a\u7684\u4e24\u4e2a\u70b9\u4ee5\u5916\u7684 **\u4e25\u683c** \u6b21\u5927\u503c \u3002 \u9996\u5148\u7684\u601d\u8def\u5e94\u8be5\u662f\u6807\u8bb0\u8282\u70b9\u7136\u540e\u91cd\u65b0\u6c42 \uff0c\u4f46\u60f3\u60f3\u5c31\u9ebb\u70e6\u3002  \n\n* \u8003\u8651\u5230\u5df2\u7ecf\u6c42\u51fa\u9700\u8981\u5220\u9664\u7684\u503c\uff0c\u800c\u6211\u4eec\u4e0d\u5fc5\u8981\u77e5\u9053\u5177\u4f53\u5220\u9664\u7684\u70b9\uff0c\u53ea\u7528\u8003\u8651\u5220\u9664\u8fd9\u4e9b\u503c\u5bf9\u6574\u4e2a\u6570\u5217\u4e0a\u7684 **\u4e25\u683c** \u6b21\u5927\u503c \u7684 \u5f71\u54cd\u3002 \u6545\u800c\u53ef\u4ee5\u7528 multiset \u8bb0\u5f55\u6811\u4e0a\u7684\u6240\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u8be2\u95ee\u65f6\u5148\u5220\u9664\u5c0f A \u6240\u9009\u5b9a\u7684\u6743\u503c\uff0c\u5220\u9664\u540e\u76f4\u63a5\u53d6  multiset \u4e2d\u7684\u4e25\u683c\u6b21\u5927\u503c\u5373\u53ef\u3002\n\n--------\n**Code: **\n\n```cpp\n# define mid ((l + r) >> 1)\nusing namespace std;\nconst int N = 2 * 1e5 + 50;\nint a[N], head[N], edge_sum, n, m; // \u57fa\u672c\u6570\u7ec4\nint id[N], idx, dep[N], son[N], from[N], top[N], fa[N], siz[N]; // \u6811\u5256\u6570\u7ec4\nint max1[N << 2], max2[N << 2]; // \u7ebf\u6bb5\u6811\u6570\u7ec4\nstruct edge {\n\tint nst, to;\n}e[N << 1];\nmultiset <int> s;\nnamespace SLPF \n{\n\t// \u6811\u94fe\u5256\u5206\u6a21\u677f\n\tvoid dfs1(int u) {\n\t\tsiz[u] = 1; son[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].nst) {\n\t\t\tint v = e[i].to;\n\t\t\tif(fa[u] != v) {\n\t\t\t\tfa[v] = u;\n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\tdfs1(v);\n\t\t\t\tsiz[u] += siz[v];\n\t\t\t\tif(siz[son[u]] < siz[v]) son[u] = v;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid dfs2(int u, int tp) {\n\t\tid[u] = ++idx;\n\t\tfrom[idx] = u;\n\t\ttop[u] = tp;\n\t\tif(son[u]) dfs2(son[u], tp);\n\t\tfor(int i = head[u]; i; i = e[i].nst) {\n\t\t\tint v = e[i].to;\n\t\t\tif(v != son[u] && v != fa[u]) dfs2(v, v);\n\t\t}\n\t}\n\t\n\t// \u7ef4\u62a4\u6700\u5927\u503c\uff0c \u4e25\u683c\u6b21\u5927\u503c\n\tvoid push_up(int root) {\n\t\tint tmp[6]; tmp[0] = 0;\n\t\ttmp[1] = max1[root << 1]; tmp[2] = max1[root << 1 | 1];\n\t\ttmp[3] = max2[root << 1]; tmp[4] = max2[root << 1 | 1];\n\t\tsort(tmp + 1, tmp + 1 + 4);\n\t\tint tot = unique(tmp + 1, tmp + 1 + 4) - (tmp + 1);\n\t\tmax1[root] = tmp[tot];  max2[root] = tmp[tot - 1];\n\t\treturn;\n\t}\n\t\n\tvoid Build(int l, int r, int root) {\n\t\tif(l == r) {\n\t\t\tmax1[root] = a[from[l]];\n\t\t\treturn;\n\t\t}\n\t\tBuild(l, mid, root << 1); Build(mid + 1, r, root << 1 | 1);\n\t\tpush_up(root);\n\t\treturn;\n\t}\n\t\n\tvoid change(int pos, int l, int r, int root, int val) {\n\t\tif(l == r && pos == l) { // \u76f4\u63a5\u4fee\u6539\u5230\u53f6\u8282\u70b9\n\t\t// \u5148\u5220\u9664\u4e4b\u524d\u7684\u503c, \u518d\u52a0\u5165\u4fee\u6539\u540e\u7684\u503c\n\t\t\tmultiset <int> ::iterator it = s.lower_bound(max1[root]);\n\t\t\ts.erase(it);\n\t\t\tmax1[root] += val;\n\t\t\ts.insert(max1[root]);\n\t\t\treturn;\n\t\t}\n\t\tif(pos <= mid) change(pos, l, mid, root << 1, val);\n\t\telse change(pos, mid + 1, r, root << 1 | 1, val);\n\t\tpush_up(root);\n\t\treturn;\n\t}\n\t\n\tpair <int, int> more(pair <int, int> x, pair <int, int> y) {\n\t\tint tmp[6]; tmp[0] = 0; // \u6ce8\u610ftmp[0]\u8981\u8d4b\u521d\u503c, tot - 1 \u53ef\u80fd\u4e3a0 \n\t\ttmp[1] = x.first; tmp[2] = x.second;\n\t\ttmp[3] = y.first; tmp[4] = y.second;\n\t\tsort(tmp + 1, tmp + 1 + 4);\n\t\tint tot = unique(tmp + 1, tmp + 1 + 4) - (tmp + 1);\n\t\treturn make_pair(tmp[tot], tmp[tot - 1]);\n\t// \u5e94\u8be5\u597d\u7406\u89e3, \u5982 5454, \u53bb\u91cd\u540e\u4e3a45, tot \u4e3a 2\n\t}\n\t\n\tpair <int, int> query(int x, int y, int l, int r, int root) {\n\t\tif(x <= l && y >= r) return make_pair(max1[root], max2[root]);\n\t\tpair <int, int> tmp1(0, 0), tmp2(0, 0); // \u8d4b\u521d\u503c!!\n\t\tif(x <= mid) tmp1 = query(x, y, l, mid, root << 1);\n\t\tif(y > mid) tmp2 = query(x, y, mid + 1, r, root << 1 | 1);\n\t\treturn more(tmp1, tmp2);\n\t}\n\t\n\tpair <int, int> query_diff(int x, int y) {\n\t\tpair <int, int> res(0, 0);\n\t\twhile(top[x] != top[y]) {\n\t\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n    \t\tres = more(res, query(id[top[x]], id[x], 1, n, 1));\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(id[x] > id[y]) swap(x, y);\n    \tres = more(res, query(id[x], id[y], 1, n, 1));\n    // \u5f53\u7b2c\u4e8c\u4e2a\u6570\u5373\u6b21\u5927\u503c\u4e3a0\uff0c\u8bf4\u660e\u8fd9\u6761\u94fe\u4e0a\u7684\u6743\u503c\u6ca1\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\uff0c\u8fd4\u56de-1\n    \tres.second = (res.second == 0) ? -1 : res.second;\n    \treturn res;\n\t}\n}\nusing namespace SLPF;\nint main()\n{\n\tcin >>n;\n\tfor(int i = 1, u, v; i < n; i ++) {\n\t\tcin >>u >>v;\n\t\te[++edge_sum] = (edge){head[u], v};head[u]=edge_sum;\n\t\te[++edge_sum] = (edge){head[v], u};head[v]=edge_sum;\n\t}\n\tfor(int i = 1; i <= n; i ++) cin >>a[i], s.insert(a[i]);\n\tdfs1(1); dfs2(1, 1); Build(1, n, 1);\n\tcin >>m;\n\tfor(int i = 1, op, x, y; i <= m; i ++) {\n\t\tcin >>op >>x >>y;\n\t\tif(op == 1) {\n\t\t\tpair <int, int> ans;\n\t\t\tmultiset <int> ::iterator it;\n\t\t\tans = query_diff(x, y);\n\t\t\tcout <<ans.second;\n\t\t\tif(ans.second != -1) {\n\t\t\t\tit = s.lower_bound(ans.first);\n\t\t\t\ts.erase(it);\n\t\t\t\tit = s.lower_bound(ans.second);\n\t\t\t\ts.erase(it);\n\t\t\t// \u8fd9\u4e00\u6b65\u8981\u6c42\u4e25\u683c\u6b21\u5927\u503c\uff0c\u4e00\u5b9a\u8981\u6392\u9664\u76f8\u7b49\u7684\u6570\u7684\u5f71\u54cd\n\t\t\t// \u5982 1 2 3 4 4 4 \u6211\u4eec\u8981\u6c42\u7684\u662f3\n        // \u5982\u679c\u76f4\u63a5\u5199 it = s.begin(); it --; it --;\n        // \u6240\u67e5\u8be2\u5230\u7684\u503c\u4e3a4\n\t\t\t\tit = s.lower_bound(*--s.end());\n\t\t\t\tit --;\n\t\t\t\t\n\t\t\t\ts.insert(ans.first); s.insert(ans.second);\n           // \u5c06\u4e4b\u524d\u5220\u9664\u7684\u91cd\u65b0\u63d2\u5165\n\t\t\t\tcout <<\" \" <<*it;\n\t\t\t}\n\t\t\tcout <<endl;\n\t\t}\n\t\telse change(id[x], 1, n, 1, y);\n\t\t\t// \u4fee\u6539\u5bf9\u5e94\u7f16\u53f7\u7684\u503c\n\t}\n\treturn 0;\n}\n```\n-------",
        "postTime": 1676385130,
        "uid": 750173,
        "name": "ademik",
        "ccfLevel": 0,
        "title": "P6157 \u6709\u8da3\u7684\u6e38\u620f"
    }
]