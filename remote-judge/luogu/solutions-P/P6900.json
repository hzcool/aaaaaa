[
    {
        "content": "## Sol 1\uff1a\u4e71\u641e\n\n\u7206\u641c/\u6a21\u62df\u9000\u706b/\u2026\u2026\n\n\u66b4\u529b\u6c42\u6700\u5927\u56e2\uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u9898-> [\u5916\u592a\u7a7a\u65c5\u884c](https://www.luogu.com.cn/problem/P4212)\n\n## Sol 2\uff1a\u6b63\u7ecf\u505a\u6cd5\uff1a\n\n\u653e\u5230\u5e73\u9762\u4e0a\uff0c\u5176\u5b9e\u5c31\u6709\u4f18\u79c0\u7684\u591a\u9879\u5f0f\u505a\u6cd5\u4e86\u3002\n\n\u679a\u4e3e\u6700\u5927\u56e2\u6700\u8fdc\u7684\u70b9\u5bf9\uff0c\u5982\u679c\u4e24\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u76f4\u7ebf\uff0c\u5269\u4e0b\u7684\u53ef\u7528\u7684\u70b9\u5c31\u88ab\u5206\u5230\u4e24\u4e2a\u533a\u57df\u5185\u3002\u5982\u679c\u628a\u8fd9\u4e9b\u70b9\u4e2d\u4e0d\u80fd\u540c\u65f6\u88ab\u9009\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e2a\u4e8c\u5206\u56fe\uff0c\u56e0\u4e3a\u533a\u57df\u5185\u90e8\u7684\u70b9\u4e4b\u95f4\u4e0d\u53ef\u80fd\u8fde\u8fb9\u3002\n\n\u653e\u4e2a\u56fe\u66f4\u597d\u7406\u89e3\u4e00\u70b9\uff1a\uff08\u4e24\u4e2a\u9ed1\u70b9\u662f\u94a6\u5b9a\u7684\u6700\u8fdc\u70b9\u5bf9\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/529t8sk5.png)\n\n\u7136\u540e\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u7684 $\\mathcal{O}(n^{4.5})$ \u7684\u5427\uff0c\u53cd\u6b63\u5e38\u6570\u6781\u5c0f\u8dd1\u7684\u98de\u5feb\u3002\n\n---\n\n***code:***\n\n```cpp\nconst int inf=0x3f3f3f3f;\n#define N 155\nnamespace Maxflow{\n\tint cnt,S,T,dep[N],head[N],pre[N];\n\tstruct Edge{\n\t\tint to,nxt,val;\n\t}edge[N*N<<1];\n\tvoid Clear(){\n\t\tmemset(head,0,sizeof(head));\n\t\tcnt=1;\n\t}\n\tvoid add(int a,int b,int c){\n\t\tedge[++cnt]={b,head[a],c};\n\t\thead[a]=cnt;\n\t}\n\tvoid adde(int a,int b,int c){\n\t\tadd(a,b,c),add(b,a,0);\n\t}\n\tqueue<int> q;\n\tbool bfs(){\n\t\tmemset(dep,0,sizeof(dep));\n\t\tdep[S]=1;\n\t\tq.push(S);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\t\t\tint v=edge[i].to;\n\t\t\t\tif(edge[i].val&&!dep[v]){\n\t\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dep[T]>0;\n\t}\n\tint dfs(int u,int limit){\n\t\tif(u==T)return limit;\n\t\tint flow=0;\n\t\tfor(int &i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(dep[v]==dep[u]+1&&edge[i].val){\n\t\t\t\tint k=dfs(v,min(limit,edge[i].val));\n\t\t\t\tedge[i].val-=k;\n\t\t\t\tedge[i^1].val+=k;\n\t\t\t\tflow+=k;\n\t\t\t\tlimit-=k;\n\t\t\t}\n\t\t\tif(!limit)break;\n\t\t}\n\t\tif(!flow)dep[u]=inf;\n\t\treturn flow;\n\t}\n\tint Dinic(){\n\t\tmemcpy(pre,head,sizeof(head));\n\t\tint maxflow=0;\n\t\twhile(bfs()){\n\t\t\tmaxflow+=dfs(S,inf);\n\t\t\tmemcpy(head,pre,sizeof(head));\n\t\t}\n\t\treturn maxflow;\n\t}\n\tbool vis[N];\n\tvoid dfs(int u){\n\t\tvis[u]=true;\n\t\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(edge[i].val&&!vis[v])dfs(v);\n\t\t}\n\t}\n\tvoid Plan(){\n\t\tmemset(vis,false,sizeof(vis));\n\t\tdfs(S);\n\t}\n}\nint n,D;\nvector<int> ans;\nstruct Point{\n\tint x,y;\n\tPoint(int _x=0,int _y=0){x=_x,y=_y;}\n\tPoint operator -(const Point b){\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n\tint operator %(const Point b){\n\t\treturn x*b.y-y*b.x;\n\t}\n}p[N];\ninline int Dis(Point &a,Point &b){\n\treturn (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);\n}\ninline bool Left(Point a,Point b){\n\treturn a%b<0;\n}\ninline bool Para(Point a,Point b){\n\treturn a%b==0;\n}\nvoid Solve(int a,int b){\n\tstatic int type[N];\n\tstatic vector<int> res;\n\tres.clear();\n\tint tot=0,lim=Dis(p[a],p[b]);\n\tMaxflow::Clear();\n\tMaxflow::S=a,Maxflow::T=b;\n\tres.push_back(a),res.push_back(b);\n\tfor(int i=1;i<=n;++i){\n\t\ttype[i]=-1;\n\t\tif(i==a||i==b)continue;\n\t\tif(Dis(p[a],p[i])>lim||Dis(p[b],p[i])>lim)continue;\n\t\t\n\t\tif(Para(p[i]-p[a],p[b]-p[a])){\n\t\t\tres.push_back(i);continue;\n\t\t}\n\t\t\n\t\ttype[i]=Left(p[i]-p[a],p[b]-p[a]);\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tif(!~type[i])continue;\n\t\ttype[i]==0?Maxflow::adde(a,i,1):Maxflow::adde(i,b,1);\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tif(!~type[i])continue;\n\t\tfor(int j=i+1;j<=n;++j){\n\t\t\tif(!~type[j])continue;\n\t\t\tif(type[i]^type[j]){\n\t\t\t\tif(Dis(p[i],p[j])>lim){\n\t\t\t\t\ttype[i]==0?Maxflow::adde(i,j,1):Maxflow::adde(j,i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tMaxflow::Dinic();\n\tMaxflow::Plan();\n\tfor(int i=1;i<=n;++i){\n\t\tif(!~type[i])continue;\n\t\tif(type[i]^Maxflow::vis[i])res.push_back(i);\n\t}\n\tif(res.size()>ans.size()){\n\t\tans=res;\n\t}\n}\nint main(){\n\tn=read(),D=read();\n\tfor(int i=1;i<=n;++i){\n\t\tp[i].x=read(),p[i].y=read();\n\t}\n\tans.push_back(1);\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=i+1;j<=n;++j){\n\t\t\tif(Dis(p[i],p[j])<=D*D){\n\t\t\t\tSolve(i,j);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",(int)ans.size());\n\tfor(auto x:ans){\n\t\tprintf(\"%d \",x);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1604141310,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6900 \u3010[ICPC2014 WF]Sensor Network\u3011"
    },
    {
        "content": "**P6900**\n\n\u8bb2\u4e00\u4e0b\u600e\u4e48\u628a\u81ea\u5df1\u846c\u9001\u7684\u3002\n\n\u5148\u5c1d\u8bd5\u5224\u65ad\u53ef\u89e3\u6027\uff0c\u53d1\u73b0\u5c31\u662f\u65cb\u8f6c\u5361\u58f3\u5224\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u4e00\u773c\u4e0b\u6765\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u5047\u7684\u505a\u6cd5\uff1a\u679a\u4e3e\u51f8\u5305\u7684\u76f4\u5f84\uff0c\u7136\u540e\u5728\u8fd9\u4e0a\u9762\u76f4\u63a5\u66b4\u529b\u52a0\u72ec\u7acb\u96c6\uff0c\u4f46\u5f88\u53ef\u60dc\uff0c\u8fd9\u662f\u9519\u8bef\u7684\u3002\n\n\u4f46\u662f\u4f60\u53d1\u73b0\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u4f5c\u4e3a\u7b54\u6848\u70b9\u96c6\u7684\u8282\u70b9\u96c6\u5408\u7684\u51f8\u5305\u663e\u7136\u5b58\u5728\u4e00\u4e2a\u76f4\u5f84\uff0c\u90a3\u6211\u4eec\u8ba1\u7b97\u6240\u6709\u8fb9\u957f\u4f5c\u4e3a\u7b54\u6848\u7684\u65f6\u5019\u5269\u4e0b\u53ef\u884c\u8fb9\u7684\u6700\u5927\u56e2\u80af\u5b9a\u662f\u53ef\u884c\u7684\u3002\n\n\u5c1d\u8bd5\u518d\u6b21\u653e\u7f29\u4e00\u4e0b\u8fb9\u754c\uff0c\u6211\u5728\u8003\u573a\u4e0a\u60f3\u5230\u7684\u662f\u76f4\u63a5\u4ee4\u5f53\u524d\u7684\u76f4\u5f84\u8fb9\u957f\u4e3a $\\text{2r}$\uff0c\u7136\u540e\u4e24\u4e2a\u7aef\u70b9\u4ee5 $\\text {r}$ \u4e3a\u534a\u5f84\u505a\u5706\u4ea4\u51fa\u6765\u4e00\u4e2a\u516c\u5171\u56fe\u5f62\uff0c\u76f4\u63a5\u6570\u8fd9\u4e2a\u516c\u5171\u56fe\u5f62\u91cc\u7684\u70b9\u6570\u3002\n\n\u7136\u540e\u51ed\u76f4\u63a5\u611f\u89c9\u5185\u90e8\u8fd8\u662f\u8981\u505a\u4e00\u4e2a\u6700\u5927\u56e2\u7684\u5904\u7406\uff0c\u4f46\u662f\u4ee5\u4e3a\u6570\u636e\u5f88\u6c34\u4e8e\u662f\u76f4\u63a5\u4e71\u641e\u6700\u540e\u53ea\u6709 $\\text{20}$\uff0c\u88ab\u8bb9\u4e86\u3002\n\n\u5176\u5b9e\u6b63\u89e3\u5c31\u5dee\u4e00\u6b65\uff1a\u5269\u4e0b\u7684\u95ee\u9898\u662f\uff0c\u4f60\u53d1\u73b0\u4ee5\u679a\u4e3e\u7684\u51f8\u5305\u76f4\u5f84\u4e3a\u8f74\uff0c\u4e24\u534a\u8282\u70b9\u4eec\u5c0f\u4e8e\u7b49\u4e8e\u76f4\u5f84\u957f\u5ea6\u5c31\u8fde\u8fb9\uff0c\u4e24\u534a\u8282\u70b9\u5185\u90e8\u8fde\u6210\u5b8c\u5168\u56fe\uff08\u663e\u7136\u4efb\u610f\u4e00\u534a\u91cc\u6700\u957f\u8fb9\u957f\u5ea6\u5c0f\u4e8e\u76f4\u5f84\uff09\u3002\n\n\u7136\u540e\u76f4\u63a5\u8f6c\u6210\u8865\u56fe\uff0c\u539f\u95ee\u9898\u7b49\u4ef7\u4e8e\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u53d1\u73b0\u76f4\u63a5\u4e8c\u5206\u56fe\u4e86\uff0c\u868c\u3002\n\n\u521a\u624d\u70b9\u5f00\u9898\u89e3\u770b\u4e86\u4e0b\uff0c\u8c8c\u4f3c froggy \u7684\u56fe\u753b\u7684\u633a\u597d\u7684\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Inf = 1e9;\nconst int Len = 105 , MM = 10005;\nint n,m;\nstruct P\n{\n\tdouble x,y;\n\tP(){x = y = 0;}\n\tP(double X,double Y){x = X , y = Y;} \n\tinline void clr(){x = y = 0;}\n\tinline double operator ^ (const P &Ano) const\n\t{return (x * Ano.y) - (y * Ano.x);}\n\tinline P operator - (const P &Ano) const\n\t{return P(x - Ano.x , y - Ano.y);}\n}pt[Len];\ninline double dis(P x,P y){return sqrt((x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y));}\nstruct line\n{\n\tP a,b;\n\tline(){a.clr() , b.clr();}\n\tline(P A,P B){a = A , b = B;}\n};\ninline bool judge(line A,P bot)\n{\n\treturn ((A.b - A.a) ^ (A.b - bot)) <= 0;\n}\nstruct XYL\n{\n\tint head[Len],cnt,dep[Len],cur[Len],flag[Len],S,T,N;\n\tXYL(){cnt = 1;}\n\tstruct node\n\t{\n\t\tint next,to,w;\n\t}edge[MM << 1];\n\tinline void add(int from,int to,int w)\n\t{\n\t\tedge[++ cnt].to = to;\n\t\tedge[cnt].next = head[from];\n\t\tedge[cnt].w = w;\n\t\thead[from] = cnt;\n\t}\n\tinline void adeg(int from,int to,int w){add(from , to , w) , add(to , from , 0);}\n\tinline void clr(){S = n + 1 , T = n + 2;for(int i = 1 ; i <= n + 2 ; i ++) head[i] = 0;cnt = 1;}\n\tinline int BFS()\n\t{\n\t\tqueue<int> Q;\n\t\tfor(int i = 1 ; i <= n + 2 ; i ++)\n\t\t{\n\t\t\tdep[i] = Inf , cur[i] = flag[i] = 0;\n\t\t}\n\t\tQ.push(S);\n\t\tdep[S] = 1 , cur[S] = head[S];\n\t\twhile(!Q.empty())\n\t\t{\n\t\t\tint p = Q.front();Q.pop();\n\t\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t\t{\n\t\t\t\tint to = edge[e].to;\n\t\t\t\tif(dep[to] == Inf && edge[e].w)\n\t\t\t\t{\n\t\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\t\tcur[to] = head[to];\n\t\t\t\t\tQ.push(to);\n\t\t\t\t\tif(to == T) return 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tint dfs(int u,int In)\n\t{\n\t\tif(u == T) return In;\n\t\tint Out = 0;\n\t\tflag[u] = 1;\n\t\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t\t{\n\t\t\tcur[u] = e;\n\t\t\tint to = edge[e].to;\n\t\t\tif(edge[e].w && dep[to] == dep[u] + 1 && !flag[to])\n\t\t\t{\n\t\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\t\tIn -= res;\n\t\t\t\tOut += res; \n\t\t\t\tedge[e].w -= res;\n\t\t\t\tedge[e ^ 1].w += res;\n\t\t\t}\n\t\t}\n\t\tflag[u] = 0;\n\t\tif(!Out){return dep[u] = 0;}\n\t\treturn Out;\n \t}\n}S;\nstruct BOT\n{\n\tdouble ds;int w;\n\tBOT(){ds = w = 0;}\n\tBOT(double DS,int W){ds = DS , w = W;}\n}M[Len * Len * Len];int len;\nbool cmp(BOT x,BOT y){return x.ds < y.ds;}\nvector<int> P;\nsigned main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tscanf(\"%lf %lf\",&pt[i].x,&pt[i].y);\n\t}\n\tint mx = 0;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = i + 1 ; j <= n ; j ++)\n\t\t{\n\t\t\t//printf(\"!!!%d %d\\n\",i,j);\n\t\t\tS.clr();line now = line(pt[i] , pt[j]);double ds = dis(pt[i] , pt[j]);\n\t\t\tif(ds > m) continue;\n\t\t\tvector<int> V;\n\t\t\tfor(int k = 1 ; k <= n ; k ++)\n\t\t\t{\n\t\t\t\tif(max(dis(pt[k] , pt[i]) , dis(pt[k] , pt[j])) > ds) continue;\n\t\t\t\tif(k == i || k == j) continue;\n\t\t\t\tV.push_back(k);\n\t\t\t\tif(judge(now , pt[k])) \n\t\t\t\t{\n\t\t\t\t\tS.adeg(S.S , k , 1);\n\t\t\t\t}\n\t\t\t\telse S.adeg(k , S.T , 1);\n\t\t\t}\n\t\t\tconst int SZ = (int)V.size();int x = 0 , y = 0;\t\n\t\t\t//printf(\"%d\\n\",SZ);\n\t\t\tfor(int k = 0 ; k < SZ ; k ++) \n\t\t\t\tfor(int p = k + 1 ; p < SZ ; p ++)\n\t\t\t\t{\n\t\t\t\t\tx = V[k] , y = V[p];\n\t\t\t\t\tif(!judge(now , pt[x])) swap(x , y);\n\t\t\t\t\tif(dis(pt[x] , pt[y]) > ds) S.adeg(x , y , Inf); \n\t\t\t\t}\n\t\t\tint dl = 0;\n\t\t\twhile(S.BFS()) dl += S.dfs(S.S , Inf);\n\t\t\tconst int as = SZ + 2 - dl;\n\t\t\tif(mx < as) \n\t\t\t{\n\t\t\t\tmx = as;\n\t\t\t\tP.clear();\n\t\t\t\tfor(int e = S.head[S.S] ; e ; e = S.edge[e].next)\n\t\t\t\t{\n\t\t\t\t\tint to = S.edge[e].to;\n\t\t\t\t\tif(S.dep[to] != Inf) P.push_back(to);\n\t\t\t\t}\n\t\t\t\tfor(int e = S.head[S.T] ; e ; e = S.edge[e].next)\n\t\t\t\t{\n\t\t\t\t\tint to = S.edge[e].to;\n\t\t\t\t\tif(S.dep[to] == Inf) P.push_back(to);\n\t\t\t\t}\n\t\t\t\tP.push_back(i) , P.push_back(j);\n\t\t\t}\n\t\t}\n\tif(!mx)\n\t{\n\t\tprintf(\"1\\n1\\n\");\n\t\treturn 0;\n\t}\n\t/*sort(M + 1 , M + 1 + len , cmp);\n\tint bs = 0 , mx = 1;\n\tfor(int i = 0 ; i <= m ; i ++)\n\t{\n\t\twhile(bs + 1 <= len && M[bs + 1].ds <= i) \n\t\t{\n\t\t\tbs ++;\n\t\t\tmx = max(mx , M[bs].w);\n\t\t}\n\t\tprintf(\"%d \",mx);\n\t}*/\n\tprintf(\"%d\\n\",mx);\n\tsort(P.begin() , P.end());\n\tfor(int i = 0 ; i < (int)P.size() ; i ++) printf(\"%d \",P[i]);\n\treturn 0;\n}\n```",
        "postTime": 1678698061,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "I'm sick of this wet noose around my neck."
    },
    {
        "content": "## Link\n\n[[ICPC2014 WF]Sensor Network](https://www.luogu.com.cn/problem/P6900)\n\n## Solution\n\n~~\u5565\uff0c\u6700\u5927\u56e2\u95ee\u9898\u3002\u8fd9\u4e0d\u662fNPC\u7684\u5417\uff0c\u76f4\u63a5\u6a21\u62df\u9000\u706b\u554a\u3002~~\n\n\u597d\u5427\u8fd9\u4e2a\u95ee\u9898\u8fd8\u662f\u6709\u70b9\u533a\u522b\u7684\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u4e00\u4e2a\u5e73\u9762\u4e0a\u3002\n\n\u9898\u89e3\u533a\u91cc\u795eFroggy\u5df2\u7ecf\u7ed9\u51fa\u4e86\u4e00\u4e2a\u975e\u5e38\u4f18\u79c0\u7684\u591a\u9879\u5f0f\u590d\u6742\u5ea6\u505a\u6cd5\uff0c\u4e0b\u9762\u6211\u4f1a\u8bd5\u7740\u4ece\u8fd9\u4e2a\u95ee\u9898\u76f8\u8f83\u6700\u5927\u56e2\u95ee\u9898\u7684\u533a\u522b\u7684\u89d2\u5ea6\uff0c\u6765\u8bd5\u56fe\u81ea\u7136\u7684\u5f15\u5165\u8fd9\u4e2a\u7b97\u6cd5\u3002\n\n\u5173\u952e\u533a\u522b\u5c31\u4e00\u53e5\u8bdd\uff1a\u5728\u539f\u6709\u7684\u6700\u5927\u56e2\u95ee\u9898\u4e2d\uff0c\u5f15\u5165\u65b0\u7684\u70b9**\u53ef\u80fd\u6539\u53d8\u539f\u6709\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb**\uff0c\u800c\u5728\u8fd9\u4e2a\u5e73\u9762\u56fe\u4e0a\u4e0d\u4f1a\u3002\n\n\u90a3\u4e48\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6700\u8fdc\u70b9\u5bf9\uff0c\u7136\u540e\u627e\u51fa\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6240\u6709\u53ef\u80fd\u8fdb\u5165\u6700\u5927\u56e2\u7684\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u8003\u8651\u8fd9\u4e9b\u70b9\u5185\u90e8\u7684\u9650\u5236\uff0c\u53d1\u73b0\u5f62\u5f0f\u4e0a\u662f\u67d0\u4e9b\u70b9\u4e0d\u80fd\u540c\u65f6\u9009\uff0c\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u505a\u5b8c\u4e86\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <queue>\n#include <vector>\n\n#define _N 210\n#define _EPS 1e-8\n#define _INF 0x3f3f3f3f\n\nstruct Tuple {\n\tdouble x, y;\n\tTuple() {\n\t\tx = y = 0;\n\t}\n\tTuple(double a, double b) {\n\t\tx = a, y = b;\n\t}\n};\n\nTuple inline operator -(const Tuple& left, const Tuple& right) {\n\treturn Tuple(left.x - right.x, left.y - right.y);\n}\ndouble inline operator %(const Tuple& left, const Tuple& right) {\n\treturn left.x * right.y - left.y * right.x;\n}\n\nstruct Side {\n\tint to, w, nxt;\n\tSide() {\n\t\tto = w = nxt = 0;\n\t}\n\tSide(int x, int y, int z) {\n\t\tto = x, w = y, nxt = z;\n\t}\n};\n\ntemplate<int N, int M>\nstruct Graph {\n\tint sidecnt;\n\tint head[N];\n\tSide sides[M << 1];\n\tvoid inline clear() {\n\t\tsidecnt = 1;\n\t\tmemset(head, 0x00, sizeof(head));\n\t} \n\tGraph() {\n\t\tclear();\n\t}\n\t\n\tvoid inline adde(int x, int y, int z, bool rep = true) {\n//\t\tprintf(\"adde: %d %d %d\\n\", x, y, z);\n\t\tsides[++sidecnt] = Side(y, z, head[x]);\n\t\thead[x] = sidecnt;\n\t\tif (rep) {\n\t\t\tadde(y, x, 0, false);\n\t\t}\n\t}\n};\n\ntypedef Tuple Point;\ntypedef Tuple Vec;\n\nint inline sgn(double val) {\n\tif (val < -_EPS) {\n\t\treturn -1;\n\t}\n\tif (val > _EPS) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\ndouble inline len(const Vec& val) {\n\treturn sqrt(val.x * val.x + val.y * val.y);\n}\n\nint n, d;\n\nbool type[_N];\nPoint pt[_N];\n\nGraph<_N, _N * _N> g;\n\nstd::vector<int> ans, res;\n\nint s, t;\nbool inq[_N], vis[_N];\nint e[_N], h[_N], gap[_N << 1];\nstd::queue<int> q;\nstruct cmp {\n\tbool operator()(int left, int right) {\n\t\treturn h[left] < h[right];\n\t}\n};\nstd::priority_queue<int, std::vector<int>, cmp> pq;\n\nbool inline check(Point x, Point y, Point z, double lim) {\n\treturn sgn(len(x - z) - lim) <= 0 && sgn(len(y - z) - lim) <= 0;\n}\n\nvoid inline clear() {\n\tmemset(inq, 0x00, sizeof(inq));\n\tmemset(e, 0x00, sizeof(e));\n\tmemset(h, 0x3f, sizeof(h));\n\tmemset(gap, 0x00, sizeof(gap));\n\tmemset(vis, 0x00, sizeof(vis));\n}\nbool bfs() {\n\th[t] = 0, q.push(t);\n\twhile (!q.empty()) {\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor (int nxt = g.head[x]; nxt; nxt = g.sides[nxt].nxt) {\n\t\t\tint y = g.sides[nxt].to, w = g.sides[nxt ^ 1].w;\n\t\t\tif (w && h[y] > h[x] + 1) {\n\t\t\t\th[y] = h[x] + 1;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n\treturn h[s] != _INF;\n}\nvoid dfs(int x) {\n\tvis[x] = true;\n\tfor (int nxt = g.head[x]; nxt; nxt = g.sides[nxt].nxt) {\n\t\tint y = g.sides[nxt].to;\n\t\tif (g.sides[nxt].w && !vis[y]) {\n\t\t\tdfs(y);\n\t\t}\n\t}\n}\nvoid push(int x) {\n\tfor (int nxt = g.head[x]; nxt; nxt = g.sides[nxt].nxt) {\n\t\tint y = g.sides[nxt].to, w = g.sides[nxt].w;\n\t\tif (w && h[y] + 1 == h[x]) {\n\t\t\tint v = std::min(w, e[x]);\n\t\t\te[x] -= v, e[y] += v;\n\t\t\tg.sides[nxt].w -= v, g.sides[nxt ^ 1].w += v;\n\t\t\tif (y != s && y != t && !inq[y]) {\n\t\t\t\tpq.push(y), inq[y] = true;\n\t\t\t}\n\t\t\tif (!e[x]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid relabel(int x) {\n\th[x] = _INF;\n\tfor (int nxt = g.head[x]; nxt; nxt = g.sides[nxt].nxt) {\n\t\tint y = g.sides[nxt].to, w = g.sides[nxt].w;\n\t\tif (w && h[y] + 1 < h[x]) {\n\t\t\th[x] = h[y] + 1;\n\t\t}\n\t}\n}\n\nint HLPP() {\n\tif (!bfs()) {\n\t\treturn 0;\n\t}\n\th[s] = n;\n\tfor (int x = 1; x <= n; x++) {\n\t\tif (h[x] != _INF) {\n\t\t\tgap[h[x]]++;\n\t\t}\n\t}\n\tfor (int nxt = g.head[s]; nxt; nxt = g.sides[nxt].nxt) {\n\t\tint y = g.sides[nxt].to, w = g.sides[nxt].w;\n\t\tif (w && h[y] != _INF) {\n\t\t\te[y] += w;\n\t\t\tg.sides[nxt].w -= w, g.sides[nxt ^ 1].w += w;\n\t\t\tif (y != s && y != t && !inq[y]) {\n\t\t\t\tpq.push(y), inq[y] = true;\n\t\t\t}\n\t\t}\n\t}\n\twhile (!pq.empty()) {\n\t\tint x = pq.top();\n\t\tinq[x] = false, pq.pop();\n\t\tpush(x);\n\t\tif (e[x]) {\n\t\t\tgap[h[x]]--;\n\t\t\tif (!gap[h[x]]) {\n\t\t\t\tfor (int y = 1; y <= n; y++) {\n\t\t\t\t\tif (y != s && y != t && h[y] > h[x] && h[y] < n + 1) {\n\t\t\t\t\t\th[y] = n + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\trelabel(x);\n\t\t\tgap[h[x]]++;\n\t\t\tpq.push(x), inq[x] = true;\n\t\t}\n\t}\n\treturn e[t];\n}\n\nvoid calc(int x, int y) {\n\tclear();\n\tg.clear();\n\ts = x, t = y;\n\tdouble dis = len(pt[y] - pt[x]);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i != x && i != y && check(pt[x], pt[y], pt[i], dis)) {\n\t\t\ttype[i] = sgn((pt[y] - pt[x]) % (pt[i] - pt[x])) >= 0;\n\t\t\tif (type[i]) {\n\t\t\t\tg.adde(x, i, 1);\n\t\t\t} else {\n\t\t\t\tg.adde(i, y, 1);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int p = 1; p <= n; p++) {\n\t\tif (p != x && p != y && check(pt[x], pt[y], pt[p], dis)) {\n\t\t\tfor (int q = 1; q <= n; q++) {\n\t\t\t\tif (q != x && q != y && check(pt[x], pt[y], pt[q], dis)) {\n\t\t\t\t\tif (sgn(len(pt[q] - pt[p]) - dis) > 0) {\n\t\t\t\t\t\tif (type[p]) {\n\t\t\t\t\t\t\tg.adde(p, q, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tg.adde(q, p, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tHLPP();\n\tdfs(x);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i != x && i != y && check(pt[x], pt[y], pt[i], dis) && (!type[i] ^ vis[i])) {\n\t\t\tres.push_back(i); \n\t\t}\n\t}\n\tres.push_back(x);\n\tres.push_back(y);\n\tif (res.size() > ans.size()) {\n\t\tstd::swap(res, ans);\n\t}\n\tres.clear();\n}\n\n \nint main() {\n\tscanf(\"%d%d\", &n, &d);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%lf%lf\", &pt[i].x, &pt[i].y);\n\t}\n\tans.push_back(1);\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\tif (sgn(len(pt[i] - pt[j]) - 1.0 * d) <= 0) {\n\t\t\t\tcalc(i, j);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", ans.size());\n\tfor (int i = 0; i < (int)ans.size(); i++) {\n\t\tprintf(\"%d \", ans[i]);\n\t}\n\treturn 0;\n}\n```\n\n\u8fd9\u4e2a\u662f\u5bf9\u62cd\u65f6\u5019\u7528\u7684\u968f\u673a\u751f\u6210\u5668\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n\n#define _N 100\n#define _LIM 10000\n\nint main() {\n\tprintf(\"%d %d\\n\", _N, _LIM);\n\tfor (int i = 1; i <= _N; i++) {\n\t\tprintf(\"%d %d\\n\", rand() % (_LIM + 1), rand() % (_LIM + 1));\n\t}\n\treturn 0;\n}\n```\n\n## Inspiration\n\n\u6211\u8ba4\u4e3a\u8fd9\u9053\u9898\u7684\u6838\u5fc3\u601d\u8def\u5c31\u662f\u6ce8\u610f\u5230\u8fd9\u4e2a\u9898\u548cNPC\u7684\u6700\u5927\u56e2\u95ee\u9898\u7684\u533a\u522b\uff0c\u7136\u540e\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5408\u7406\u7684\u591a\u9879\u5f0f\u7b97\u6cd5\u3002\n\n\u6838\u5fc3\u7ed3\u8bba\uff1a\n\n- \u5e73\u9762\u56fe\u4e0a\u5411\u56e2\u5185\u52a0\u5165\u4e00\u70b9\uff0c\u5df2\u6709\u7684\u8ddd\u79bb\u4e0d\u4f1a\u6539\u53d8\u3002",
        "postTime": 1619314671,
        "uid": 244096,
        "name": "FangZeLi",
        "ccfLevel": 7,
        "title": "P6900\u9898\u89e3"
    },
    {
        "content": "# \u5199\u6cd5\n\u8fd9\u9898\u53ef\u4ee5\u7528\u968f\u673a\u5316\u6765\u505a\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u503c\uff0c\u5c31\u8ba9\u8fd9\u4e2a\u5e8f\u5217\u91cd\u65b0\u968f\u673a\u5316\u7684\u6392\u5e8f\uff0c\u8fd9\u91cc\u849f\u84bb\u662f\u7528\u4e86\u4e00\u4e2aSTL\u4e2d\u7684\u51fd\u6570random_shuffle\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u7b80\u5316\uff0c\u5305\u62ec\u7ed3\u6784\u4f53\u548c\u5b50\u7a0b\u5e8f\uff0c\u90fd\u662f\u7528\u6765\u7b80\u5316\u7a0b\u5e8f\u5e76\u52a0\u901f\u7684\uff0c\u800c\u4e14\u6709\u4e00\u4e9b\u91cd\u8981\u64cd\u4f5c\u653e\u5728\u5b50\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u540e\uff0c\u4f1a\u51cf\u5c11\u4e3b\u7a0b\u5e8f\u7684\u7bc7\u5e45\u53ca\u7f16\u7a0b\u8005\u7684\u538b\u529b\uff0c\u6bd4\u5982\u849f\u84bb\u7528\u7684sqr\uff0c\u5c31\u662f\u6a21\u4eff\u4e58\u65b9\u64cd\u4f5c\uff0c\u5e76\u76f4\u63a5\u5728dis\u91cc\u8c03\u7528\uff0c\u6709\u4e00\u4e9b\u53d8\u91cf\u4e5f\u53ef\u4ee5\u5728\u7ed3\u6784\u4f53\u4e2d\u76f4\u63a5\u5b9a\u4e49\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u4e86\u4e3b\u7a0b\u5e8f\u548c\u5b50\u7a0b\u5e8f\u7684\u7f16\u5199\uff0c\u849f\u84bb\u5c31\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u697c\u4e0b\u5927\u4f6c\u7684\u4ee3\u7801\u7bc7\u5e45\u90fd\u597d\u957f\u554a\uff0c\u867d\u7136\u4e5f\u6709\u7528\u4e86\u968f\u673a\u5316\u7684\u5927\u4f6c\uff0c\u4f46\u662f\u7bc7\u5e45\u660e\u663e\u6bd4\u849f\u84bb\u957f\uff0c\u8fd9\u91cc\u4e0d\u7528bitset\u7684\u539f\u56e0\u4e5f\u662f\u56e0\u4e3a\u592a\u9ebb\u70e6\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u849f\u84bb\u7684\u52a0\u6ce8\u91ca\u7248\u4ee3\u7801\u5427\uff01\n# accepted answer\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct ph//\u7ed3\u6784\u4f53\uff0c\u8fd0\u884c\u901f\u5ea6\u5feb \n{\n    int x,y,p;\n}p[101],path[101];\nint n,m,ans,apa[101],e;\nint sqr(int x) //\u5b50\u7a0b\u5e8f\uff0c\u65b9\u4fbf\u4e3b\u7a0b\u5e8f\u8c03\u7528 \n{\n    return x*x;//\u4e58\u65b9 \n}\nint dis(ph a,ph b)\n{\n   return sqr(a.x-b.x)+sqr(a.y-b.y);//\u628a\u8fd9\u884c\u8fd4\u56de \n}\nbool check(int x)//\u6bd4\u8f83 \n{\n    for(int i=1;i<=e;++i)\n      if(dis(p[x],path[i])>m*m)\n        return false;//\u627e\u4e0d\u5230\u6b63\u786e\u7b54\u6848\uff0c\u5c31\u8fd4\u56de0 \n    return true;//\u76f8\u53cd\u5219\u8fd4\u56de1 \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);//\u901f\u5ea6\u5feb \n    for(int i=1;i<=n;++i)\n      {\n        scanf(\"%d%d\",&p[i].x,&p[i].y);\n        p[i].p=i;\n      }\n    for(int i=1;i<=1000;++i)\n      {\n        random_shuffle(p+1,p+1+n);//random_shuffle\u662f\u7528\u6765\u5bf9\u4e00\u4e2a\u5143\u7d20\u5e8f\u5217\u8fdb\u884c\u968f\u673a\u5316\u91cd\u65b0\u6392\u5e8f\uff08\u6015\u5927\u5bb6\u770b\u4e0d\u61c2\uff09 \n        e=0;//e\u91cd\u65b0\u8d4b\u503c \n        for(int j=1;j<=n;++j)\n          if(check(j))\n            path[++e]=p[j];\n        if(e>ans)\n          {\n            ans=e;//e>ans\uff0cans\u76f4\u63a5\u6539\u4e3at\u7684\u503c \n            for(int j=1;j<=e;++j)\n              apa[j]=path[j].p;\n          }\n      }\n    printf(\"%d\\n\",ans);\n    for(int i=1;i<ans;++i)\n      printf(\"%d \",apa[i]);\n    printf(\"%d\\n\",apa[ans]);//\u90fd\u662f\u8f93\u51fa \n    return 0;\n}\n```\n\u5e0c\u671b\u7ba1\u7406\u5458\u540c\u5fd7\u80fd\u8fc7\u4e00\u4e0b\uff0c\u849f\u84bb\u611f\u6fc0\u4e0d\u5c3d",
        "postTime": 1612008015,
        "uid": 137173,
        "name": "CoronaQL",
        "ccfLevel": 0,
        "title": "Sensor Network \u9898\u89e3"
    }
]