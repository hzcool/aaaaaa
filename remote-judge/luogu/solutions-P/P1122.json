[
    {
        "content": "### \u7b97\u6cd5\uff1a\u6811\u5f62$dp$\u3002 \u5206\u6790\u5982\u4e0b\n\n\u5148\u770b\u6837\u4f8b\u8fd9\u68f5\u6811\uff0c\n\n![](https://cdn.luogu.com.cn/upload/pic/46077.png)\n\n\u9898\u610f\u662f\u8981\u6211\u4eec\u627e\u5230\u6811\u4e0a\u70b9\u6743\u4e4b\u548c\u6700\u5927\u7684\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u8b6c\u5982\u6ee1\u8db3\u6837\u4f8b\u7684\u9009\u62e9\u5c31\u662f\u4e0b\u56fe\u4e2d\u6846\u8d77\u6765\u7684\u4e00\u5757\uff0c\n\n![](https://cdn.luogu.com.cn/upload/pic/46078.png)\n\n\u6211\u4eec\u7528 $f[i]$ \u8bb0\u5f55 **\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u70b9\u6743\u548c\u6700\u5927\u7684\u4e00\u68f5\u5b50\u6811\uff08\u6216\u53ea\u9009\u6839\uff09**\uff0c$a[i]$ \u662f\u8f93\u5165\u7684\u70b9\u6743\u3002\n\n\u56e0\u4e3a\u8fd9\u6837\u505a\u7684\u8bdd\u6700\u540e\u8981\u4ece\u6bcf\u4e2a$f[i]$\u4e2d\u627e\u51fa\u6700\u5927\u7684\u6570\u4f5c\u4e3a\u7b54\u6848\u8f93\u51fa\uff0c\u6240\u4ee5 **\u9009\u62e9\u54ea\u4e2a\u70b9\u4e3a\u6839\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd**\uff0c\u6bd5\u7adf **\u4efb\u4e00\u8fde\u901a\u5206\u91cf\u5728\u4efb\u4e00\u65f6\u523b\u603b\u662f\u53ef\u4ee5\u770b\u6210\u4e00\u68f5\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\u7684\u6811**\u3002\n\n\u90a3\u4e0d\u59a8\u8bbe\u8282\u70b9 $1$ \u4e3a\u6839\uff0c\u70b9 $0$ \u4e3a\u5b83\u7684\u7236\u4eb2\uff08\u56fe\u4e2d\u6ca1\u6709\u6807\u51fa\u70b9 $0$\uff09\u3002\n\n------------\n\n### \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b $f[i]$ \u5982\u4f55\u8ba1\u7b97\u3002\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u5728\u8d70\u5230\u70b9 $u$ \u65f6\uff0c$f[u]$ \u6240\u8868\u793a\u7684\u8fde\u901a\u5206\u91cf\u4e2d\u5fc5\u5305\u542b\u70b9 $u$ \uff0c\u6240\u4ee5**\u628a $f[u]$ \u521d\u59cb\u5316\u4e3a\u70b9 $u$ \u7684\u70b9\u6743 $a[u]$**\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e $u$ \u7684\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u9009\u62e9\u526a\u679d\u6216\u4e0d\u526a\u679d\u3002\u5bf9\u4e8e $u$ \u7684\u4e00\u4e2a\u513f\u5b50 $v$ \uff0c\u663e\u7136**\u5f53 $f[v] < 0$ \u65f6\u5c31\u526a\u65ad $u-v$ \u8fd9\u6761\u679d\uff0c\u53cd\u4e4b**\u3002\n\n\u4e8e\u662f\u5f97\u51fa\u9012\u63a8\u5f0f\uff1a\n\n### $f[u] = a[u] + (f[v] > 0 ? f[v] : 0)$ \uff08$v$ \u4e3a $u$ \u7684\u513f\u5b50\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/46077.png)\n\n\u6bd4\u5982\u4e0a\u56fe\u4e2d\uff0c$f[2] = a[2] = -1$\u3002\n\n$\u2235 f[2] < 0$\n\n$\u2234 f[5] = a[5] + 0 = 1$\u3002\n\n------------\n\n\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint n,a[16005],f[16005],ans=-2147483647;\nvector <int> E[16005];\nvoid dfs(int u,int fa)\n{\n    f[u]=a[u];//f\u521d\u59cb\u503c\n    for(int i=0;i<E[u].size();i++)\n    {\n        int t=E[u][i];\n        if(t!=fa)\n        {\n            dfs(t,u);\n            if(f[t]>0)\n                f[u]+=f[t];//\u5982\u5f0f\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);//\u70b9\u6743\u8f93\u5165\n    for(int i=1;i<n;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        E[u].push_back(v);\n        E[v].push_back(u);//vector\u53cc\u5411\u8fde\u8fb9\n    }\n    dfs(1,0);\n    for(int i=1;i<=n;i++)\n        ans=max(ans,f[i]);//\u627e\u51fa\u6700\u5927\u70b9\u6743\u548c\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1544664007,
        "uid": 52933,
        "name": "\u795e\u4e91_cloud",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u5f88\u4e0d\u9519\u7684\u6811\u5f62DP\u5165\u95e8\u9898\uff0c\u9002\u5408FCB\u8fd9\u7c7b\u7684DP\u840c\u65b0\u7ec3\u624b\u3002\n\n\u5ba1\u9898\u6c38\u8fdc\u662f\u89e3\u51b3\u4e00\u9053\u9898\u76ee\u7684\u7b2c\u4e00\u6b65\u3002\u672c\u9898\u7684\u9898\u5e72\u7565\u663e\u5197\u957f\uff0c\u5927\u6982\u6982\u62ec\u4e00\u4e0b\u5c31\u662f\u6307\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6c42\u51fa\u4ed6\u7684\u70b9\u6743\u4e4b\u548c\u6700\u5927\u7684\u4e00\u9897\u5b50\u6811\u7684\u70b9\u6743\u548c\u3002\u7279\u522b\u5730\uff0c\u5b50\u6811\u4e0d\u80fd\u4e3a\u7a7a\uff08\u8c8c\u4f3c\u8fd9\u91cc\u540a\u6b7b\u4e86\u5f88\u591a\u4eba\uff09\n\n## \u601d\u8def\u5206\u6790\n\n\u672c\u9898\u4e2d\u53ea\u7ed9\u51fa\u4e86\u6bcf\u6761\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u4f46\u662f\u6ca1\u6709\u7ed9\u51fa\u7956\u5b97\u5173\u7cfb\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u968f\u610f\u4e00\u70b9\u4e86\uff0c\u4e0d\u59a8\u5047\u8bbe1\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9\u3002\u6839\u8282\u70b9\u786e\u5b9a\u7956\u5b97\u5173\u7cfb\u4e5f\u5c31\u968f\u4e4b\u786e\u5b9a\u4e86\u3002\uff08\u5f53\u7136\uff0c\u53ea\u8981\u4f60\u613f\u610f\uff0c\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6839\u8282\u70b9\uff09\n\n\u6211\u7684\u601d\u8def\u662f\u4e24\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u540c\u65f6\u8fdb\u884c\u3002\u9996\u5148\u5047\u8bbe\u6bcf\u4e2a\u8282\u70b9\u70b9\u6743\u4e3a $a[i]$\n\n1. $fy[i]$ \u8868\u793a\u4ee5 ` i\u8282\u70b9` \u4e3a\u6839\u7684\u6700\u5927\u5b50\u6811\u4e4b\u548c\u3002\u90a3\u4e48\u5f88\u663e\u7136\uff0c$fy[i]$ \u7684\u521d\u503c\u5e94\u8be5\u4e3a `fy[i] = a[i]`\u3002\u90a3\u4e48 $fy[i]$ \u7684\u6700\u7ec8\u503c\u662f\u591a\u5c11\u5462\uff1f \u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5f00\u59cb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u8282\u70b9\uff0c$fy[i]$ \u7684\u503c\u5c31\u662f $a[i]$\u3002\u90a3\u4e48\u53f6\u8282\u70b9\u7684\u7236\u4eb2\u5462\uff1f \u5f88\u663e\u7136\uff0c\u53ea\u8981\u53f6\u8282\u70b9\u7684\u6743\u503c\u5927\u4e8e0\uff0c\u5b83\u7684\u7238\u7238\u5c31\u5e94\u8be5\u5f88\u4e50\u610f\u7684\u4fdd\u7559\u5b83\uff0c\u53cd\u4e4b\u51cf\u6389\u5b83\u3002\u5982\u679c\u662f\u666e\u901a\u7684\u8282\u70b9\u5462\uff1f\u540c\u7406\uff0c\u53ea\u8981\u4ed6\u7684\u67d0\u4e00\u4e2a\u513f\u5b50\u7684 `fy` \u503c\u5927\u4e8e0\uff0c\u4ed6\u4e5f\u5e94\u8be5\u5f88\u4e50\u610f\u5730\u4fdd\u7559\u5b83\u3002  \u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u65b9\u7a0b\u3002\n  $$\\text{fy[i]=a[i]+}\\Sigma\\text{max(fy[i's sons],0)}$$\n  \n2. $fn[i]$ \u8868\u793a\u4ee5 $i$ \u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u5305\u542b\u6700\u5927\u7684\u4e00\u9897\u5b50\u6811\u7684\u548c\uff08\u8fd9\u68f5\u5b50\u6811\u4e0d\u5305\u542b $i$ \u8282\u70b9\uff09\u3002\u6211\u4eec\u5f00\u4e00\u4e2a `fn` \u6570\u7ec4\u7684\u76ee\u7684\u662f\u53ef\u4ee5\u9010\u6b65\u5c06\u7b54\u6848\u4f20\u5230\u6811\u6839 $fn[1]$\uff0c\u7701\u53bb\u4e86DP\u5b8c\u6210\u540e\u518d\u626b\u4e00\u904d `fy` \u6570\u7ec4\u7684\u9ebb\u70e6\u3002\u5f88\u663e\u7136\uff0c $fn[i]$ \u7684\u503c\u5c31\u5e94\u8be5\u662f\u4ed6\u7684\u6240\u6709\u5b69\u5b50\u4e2d $fy[i's\\ sons]$ \u4e0e $fn[i's \\ sons]$ \u4e2d\u7684\u6700\u5927\u503c\u3002\u5199\u6210\u65b9\u7a0b\uff1a\n $$\\text{fn[i]=max(fy[i's sons],fn[i's sons])}$$\n \n \u6700\u540e\u7684\u7b54\u6848 $max(fy[1],fn[1])$    \n \u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$ \uff0c\u59a5\u59a5\u7684\u3002\n \n ## \u4ee3\u7801\u5b9e\u73b0\n \n \u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u4f46\u662f\u6709\u51e0\u4e2a\u5bf9\u4e8e\u840c\u65b0\u7684\u5751\u70b9\u6216\u8005\u6ce8\u610f\u70b9\n- \u4e0e\u7edd\u5927\u90e8\u5206\u6811\u5f62DP\u4e00\u6837\uff0c\u5b83\u5e76\u4e0d\u80fd\u7ebf\u6027\u5faa\u73af\u5b9e\u73b0\uff0c\u800c\u662f\u8981\u901a\u8fc7\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u9012\u5f52\uff0c\u76f4\u5230\u53f6\u8282\u70b9\u518d\u5f00\u59cb\u56de\u6eaf\u3002   \n- \u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u8fbe\u5230\u4e86 $\\text{16000}$ \uff0c \u4e2a\u4eba\u5efa\u8bae\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\u3002\u7279\u522b\u5730\uff0c\u672c\u9898\u7531\u4e8e\u65e0\u6cd5\u76f4\u63a5\u786e\u5b9a\u7236\u5b50\u5173\u7cfb\uff0c\u6240\u4ee5\u52a0\u8fb9\u65f6\u8981\u53cc\u5411\u52a0\u8fb9\u3002\u56e0\u6b64\u5728 dfs \u7684\u65f6\u5019\u4e5f\u8981\u6ce8\u610f\u4e0d\u80fd\u4ece\u513f\u5b50\u8fd4\u56de\u641c\u7d22\u5230\u4e86\u7236\u4eb2\u3002\n- fn \u6570\u7ec4\u8981\u51fa\u4e8b\u5316\u6210\u4e00\u4e2a\u6781\u5c0f\u503c\uff0c\u7528\u6765\u5e94\u4ed8\u6240\u6709\u70b9\u6743\u90fd\u662f\u8d1f\u6570\u7684\u60c5\u51b5\n \n```\ninline void tomax(int &a,int b){if(a<b)a=b;} //\u624b\u5199max\u53ef\u4ee5\u52a0\u901f\n\nvoid dfs(int x,int fa){\n\tfor(int i=head[x];i;i=nxt[i]){   //\u94fe\u5f0f\u524d\u5411\u661f\u7684\u8bbf\u95ee\n\t\tif(to[i]==fa)continue;    //\u4e0d\u80fd\u641c\u5411\u7236\u4eb2\n\t\tdfs(to[i],x);      //\u5411\u513f\u5b50\u9012\u5f52\n\t\tif(fy[to[i]]>0)fy[x]+=fy[to[i]];   //\u72b6\u6001\u8f6c\u79fb\n\t\ttomax(fn[x],fn[to[i]]);\n\t\ttomax(fn[x],fy[to[i]]);\n\t}\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\n\n\u4ee3\u7801\u7565\u4e11\uff0c\u8fd8\u671b\u5404\u4f4d\u591a\u591a\u5305\u6db5\n```\n#include<cstdio>\n#include<cstring>\n\nconst int N=16005;\nint fy[N],fn[N],n,a[N],maxx;bool flag;\nint nxt[N*2],to[N*2],head[N],num,x,y;  //\u8bb0\u5f97\u5f00\u4e24\u500d\n\ninline void add(int x,int y){\n\tto[++num]=y;nxt[num]=head[x];head[x]=num;  //\u52a0\u8fb9\n}\n\ninline void tomax(int &a,int b){if(a<b)a=b;}\n\nvoid dfs(int x,int fa){   //\u9012\u5f52\u6c42\u89e3\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tif(to[i]==fa)continue;\n\t\tdfs(to[i],x);\n\t\tif(fy[to[i]]>0)fy[x]+=fy[to[i]];\n\t\ttomax(fn[x],fn[to[i]]);\n\t\ttomax(fn[x],fy[to[i]]);\n\t}\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t scanf(\"%d\",&a[i]),fy[i]=a[i];  //\u521d\u59cb\u53161\n\tfor(int i=1;i<n;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);    //\u52a0\u8fb9\n\t}\n\tmemset(fn,0x80,sizeof(fn));  //\u521d\u59cb\u53162\n\tdfs(1,0);  //\u6c42\u89e3\n\tprintf(\"%d\",fy[1]>fn[1]?fy[1]:fn[1]);\n\treturn 0;\n}\n```",
        "postTime": 1575199245,
        "uid": 45176,
        "name": "FCBM71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u4e00\u9053\u6bd4\u8f83\u7b80\u5355\u7684\u6811\u5f62DP\u9898\u3002\n\n\u9898\u610f\u5c31\u662f\u8ba9\u4f60\u6c42\u8fd9\u4e2a\u6811\u4e0a\u70b9\u6743\u548c\u6700\u5927\u7684\u4e00\u4e2a\u8054\u901a\u90e8\u5206\uff08\u8fde\u901a\u5206\u91cf\uff09\u3002\n\n\u8003\u8651\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u4e2d\u70b9\u6743\u548c\u6700\u5927\u7684\u4e00\u4e2a\u3002\n\n\u5bf9\u4e8e $u$ \u548c $u$ \u7684\u513f\u5b50 $v$\uff0c\u5982\u679c $f_v \\ge 1$ \u5219\u5b83\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u8981\u4fdd\u7559\uff0c\u53cd\u4e4b\u5219\u8981\u51cf\u6389\u3002\n\n\u90a3\u4e48\u6709\u9012\u63a8\u5f0f\uff1a\n\n\u5bf9\u4e8e $u$ \u548c $u$ \u7684\u513f\u5b50 $v$\uff0c\u82e5 $f_v \\ge 1$ \u5219 $f_u=a_u+\\sum f_v$\uff0c\u5426\u5219 $f_u=\\max(0, a_u)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e4 + 10;\nint n, a[N], f[N], ans = INT_MAX + 1;\nvector <int> G[N];\nvoid dfs(int u, int fa) {\n    f[u] = a[u]; // \u6ce8\u610f\u8981\u8d4b\u521d\u59cb\u503c\n    for(int i = 0; i < G[u].size(); i++) {\n        int v = G[u][i];\n        if (v == fa) continue;\n        dfs(v, u);\n        if (f[v] >= 1) f[u] += f[v];\n    }\n}\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) scanf(\"%d\",&a[i]);\n    for (int i = 1; i < n; i++) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, 0);\n    for(int i = 1; i <= n; i++) ans = max(ans, f[i]);\n    printf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1623232915,
        "uid": 341650,
        "name": "_504",
        "ccfLevel": 6,
        "title": "P1122 \u6700\u5927\u5b50\u6811\u548c \u9898\u89e3"
    },
    {
        "content": "\u5148\u7ed9\u4ee3\u7801-.-\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nbool f[16002][16002]={false};\nint w[16002][2]={0},i,a,b,o=0,n;\n\nint sum(int a){\n\tint j;\n\tif(w[a][2]==0){\n\t\tif(w[a][1]<0)return 0;\n\t\telse return w[a][1];\n\t}\n\tfor(j=3;j<=n+2;j++)if(f[a][j]){\n\t\tf[a][j]=false;f[j-2][a+2]=false;\n\tw[a][1]=w[a][1]+sum(j-2);\n\tif(w[a][1]>o)o=w[a][1];\n\t}\n\n\tif(w[a][1]<0)return 0;\n\t\telse return w[a][1];\n}\n\nint main ()\n{\nscanf(\"%d\",&n);\nfor(i=1;i<=n;i++)\n{\nscanf(\"%d\",&w[i][1]);\n}\nfor(i=1;i<=n-1;i++)\n{\n\tscanf(\"%d%d\",&a,&b);\n\tw[a][2]++;\n\tw[b][2]++;\n\tf[b][a+2]=true;\n\tf[a][b+2]=true;\n}\nsum(1);\nprintf(\"%d\",o);\nreturn 0;\n\n}\n```\n\n\n\n\u968f\u4fbf\u786e\u5b9a\u968f\u4fbf\u4e00\u4e2a\u70b9\u5f00\u59cb(\u6700\u540e\u8bc1\u660e\u4e3a\u4ec0\u4e48\u8fd9\u6837\u53ef\u4ee5)\uff0c\u4ee3\u7801\u91cc\u9762\u4ece1\u5f00\u59cb\u7684\u3002\uff08\u5c31\u662fsum\uff081\uff09\uff09\n\nW[1][1]\u662f\u7b2c\u4e00\u4e2a\u70b9\u7684\u503c\uff0cW[1][2]\u662f\u548c\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u6570\u91cf\uff0c\u540e\u9762\u662f\u8bb0\u5f55\u548c\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u70b9\u3002\n\nf\u6570\u7ec4\u662f\u8bb0\u5f55\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u63a5\u3002f[x][y]\u662fx\u70b9\u662f\u5426\u80fd\u5230y\u70b9\uff0c\u5982\u679cx\u80fd\u5230y\u70b9\u90a3\u4e48y\u70b9\u4e5f\u80fd\u5230x\u70b9\uff0c\u6240\u4ee5f[y][x]\u4e5f\u662f\u6253\u5f00\u7684\u3002\n\n\u7136\u540e\u5c31\u5f00\u59cb\u6df1\u641c\u3002\u6df1\u641c\u7684\u65f6\u5019\u8981\u8bb0\u5f97\u628af\u5173\u95ed\uff0c\u4e0d\u7136\u4f1a\u6b7b\u5faa\u73af\uff01\uff01\uff01\u800c\u4e14\u53cc\u5411\u8def\u90fd\u8981\u5173\u95ed\uff01\uff01\uff01\n\n\u641c\u5230\u6700\u5e95\u4e0b\u5c31\u628a\u8fd9\u4e2a\u70b9\u7684\u503c\u9012\u56de\u6765\uff0c\u7136\u540e\u52a0\u4e0a\u6cbf\u8def\u6240\u6709\u70b9\u7684\u503c\u3002\n\n\uff01\uff01\uff01\uff01\uff01\u6700\u91cd\u8981\u7684\u4e00\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u503c\u5c0f\u4e8e0\u90a3\u4e48\u8fd4\u56de0\uff01\uff01\uff01\uff01\uff01\n\uff01\uff01\uff01\uff01\uff01\u56e0\u4e3a\u5982\u679c\u503c\u5c0f\u4e8e0\u90a3\u4e48\u8fd8\u4e0d\u5982\u4e0d\u8981\u8fd9\u4e2a\u70b9\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\n   \n \u5f00\u59cb\u8bc1\u660e\u4e3a\u4ec0\u4e48\u4ece\u4efb\u610f\u4e00\u4e2a\u70b9\u5f00\u59cb\u90fd\u884c\uff0c\u5c31\u62ff\u6837\u4f8b\u6765\u8bc1\u660e\u5566\n \n ![](https://cdn.luogu.com.cn/upload/pic/56521.png)\n \n \u8fd9\u662f\u628a1\u5f53\u505a\u6839\u6784\u9020\u7684\u6811\uff0c\u6df1\u641c\u5230\u5e95\u53d1\u73b0\u6700\u4e0b\u9762\u7684\u503c\u662f-1\uff0c\u6240\u4ee5\u5c31\u8fd4\u56de0\uff0c\u7136\u540e1+0=1\uff0c5\u548c6\u8fd8\u662f1\uff0c\u7136\u540e\u7ee7\u7eed\u8fd4\u56de0+1+1=2\uff0c\u6240\u4ee57\u7684\u503c\u53d8\u62102\uff0c\u7136\u540e2+1=3\uff0c\u6240\u4ee54\u7684\u503c\u662f3.\u6700\u540e\u53d1\u73b01\u7684\u503c-1\u5c0f\u4e8e0\uff0c\u90a3\u4e48\u5c31\u628a1\u7684\u503c\u53d8\u62100\uff0c\u7136\u540e0+3=3\u3002\u6700\u7ec8\u7b54\u68483\n \n \n![](https://cdn.luogu.com.cn/upload/pic/56522.png)\n\n\u8fd9\u662f\u628a7\u5f53\u505a\u6839\u7684\u6811\uff0c\u6df1\u641c\u5230\u6700\u5e95\u4e0b\u53d1\u73b01,2,3\u70b9\u7684\u503c\u90fd\u662f-1\uff0c\u56e0\u4e3a-1<0\u6240\u4ee5\u8fd4\u56de0\u30024,5,6\u70b9\u7684\u503c\u662f0+1=1\u3002\u7136\u540e\u7ee7\u7eed\u8fd4\u56de\u503c\uff0c\u70b97\u7684\u503c\u662f0+1+1+1=3\uff0c\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u662f3\n\n\n\u7531\u6b64\u53d1\u73b0\u65e0\u8bba\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u90fd\u53ef\u4ee5\u7b97\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u53ef\u4ee5\u8bc1\u660e\u6211\u4eec\u7684\u601d\u8def\u662f\u6b63\u786e\u7684\u3002\n\n\u6700\u540e\u8bf4\u4e00\u53e5\n\nDP\u7684\u9898\u771f\u662f\u7ec3\u4e60\u641c\u7d22\u7684\u597d\u9898\u5462\uff01\uff01\uff01\uff01\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u849f\u84bb\u6c42\u8fc7QWQ\n\nO(\u2229_\u2229)O\u8c22\u8c22\n",
        "postTime": 1555145443,
        "uid": 185935,
        "name": "lavd",
        "ccfLevel": 4,
        "title": "\u4e0d\u5efa\u6811\u5927\u6cd5\u5e08\uff08dfs)"
    },
    {
        "content": "\u8fd9\u9898\u561b \u2026 \u5f88\u660e\u663e\u7684\u6811\u5f62dp\uff0c\u4f46\u4e5f\u6709\u5f88\u591a\u8981\u6ce8\u610f\u7684\u5c0f\u70b9\u3002\n\n\u4e00\u5f00\u59cb\u9898\u76ee\u6253\u5728\u4e86\u7eb8\u4e0a\uff0c\u6811\u7684\u7ed3\u6784\u5728\u7b2c\u4e8c\u9762\uff0c\u7136\u540e\u5f53\u6210\u4e86\u533a\u95f4dp\uff0c\u55ef \u2026 \u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\n\n\u4e8e\u662f\u6211\u53c8\u6253\u8d77\u4e86\u4ee3\u7801\u3002\n\n\u9996\u5148\u8f6c\u79fb\u65b9\u7a0b\u597d\u60f3\uff1a\u9ed8\u8ba4\u9009v\u8282\u70b9\uff0c\u518d\u9012\u5f52\uff0c\u5c06\u8fd4\u56de\u503c\u4e0e0\u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u6709\u6ca1\u6709\u5728\u7f8e\u4e3d\u6307\u6570\u4e0a\u6709\u597d\u7684\u5e2e\u52a9\uff0c\u52a0\u8d77\u6765\u540e\u8fd4\u56de\u3002\n\u518d\u5c31\u662f\u5b58\u6811\uff0c\u6211\u662f\u7528vector\u5f53\u56fe\u5b58\u7684\uff0c\u5e94\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u5e94\u5728\u9012\u5f52\u65f6\u628a\u7236\u4eb2\u8bb0\u4e0b\u6765\uff0c\u8f6c\u79fb\u65f6\u5c31\u4e0d\u641c\u7236\u8282\u70b9\uff0c\u4e0d\u7136\u4f1a\u6b7b\u5faa\u73af\u3002\n\u4e8e\u662f\u53e6\u4e00\u4efd\u4ea4\u4e86\u4e0a\u53bb\uff0c\u7ed3\u679c\u4f9d\u7136\u6ca1\u8fc7\u3002\n\n\u9644\u9519\u8bef\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath> \n#include<vector>\nusing namespace std;\nconst int N=16005;\nvector<int>E[N];//stl\u5b58\u56fe\nint n,w[N];\nint dp(int v,int fa){//\u7ed9\u7236\u8282\u70b9\u4ee5\u514d\u6b7b\u5faa\u73af\n\tint ans=w[v];\n\tfor(int i=0;i<E[v].size();i++)\n\t\tif(E[v][i]!=fa) ans+=max(0,dp(E[v][i],v));\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",w+i);\n\tfor(int i=1,x,y;i<=n-1;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tE[x].push_back(y);//\u4e0d\u77e5\u9053\u90a3\u4e2a\u4e3a\u7236\u8282\u70b9\n\t\tE[y].push_back(x);//\u6240\u4ee5\u5f53\u65e0\u5411\u56fe\n\t}\n\tprintf(\"%d\\n\",dp(1,0));//\u8f93\u51fa\u9519\u8bef\u7b54\u6848\n\treturn 0;\n} \n```\n\u7a76\u5176\u539f\u56e0\uff0c\u6837\u4f8b\u5c31\u80fd\u662f\u51fa\u6765\uff0c\u56e0\u4e3a\u4efb\u9009\u4e00\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u7b54\u6848\u4e0d\u4e00\u5b9a\u6700\u4f18\uff08\u6837\u4f8b\u4e2d\u4ee51\u4e3a\u6839\u8282\u70b9\uff0c\u7b54\u6848\u5c31\u4e0d\u4f18\uff0c\u4e3a2\uff09\u3002\n\n\u89e3\u51b3\u529e\u6cd5\u5f88\u7b80\u5355\uff0c\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u8dd1\u4e00\u8fb9dp\uff0c\u53d6\u6700\u4f18\u503c\u3002\u518d\u4ea4\u4e0a\u53bb\u540e\u53d1\u73b0\u8d85\u65f6\u4e86\u51e0\u4e2a\u70b9\uff0c\u8bf4\u660e\u4e0d\u80fd\u8fd9\u4e48\u66b4\u529b\u3002\n\n\u964470\u5206\u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath> \n#include<vector>\nusing namespace std;\nconst int N=16005;\nvector<int>E[N];\nint n,w[N];\nint dp(int v,int fa){//\u7ed9\u7236\u8282\u70b9\u4ee5\u514d\u6b7b\u5faa\u73af\n\tint ans=w[v];\n\tfor(int i=0;i<E[v].size();i++)\n\t\tif(E[v][i]!=fa) ans+=max(0,dp(E[v][i],v));\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",w+i);\n\tfor(int i=1,x,y;i<=n-1;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tE[x].push_back(y);//\u4e0d\u77e5\u9053\u90a3\u4e2a\u4e3a\u7236\u8282\u70b9\n\t\tE[y].push_back(x);//\u6240\u4ee5\u5f53\u65e0\u5411\u56fe\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++) ans=max(ans,dp(i,0));\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n} \n```\n\u51a5\u601d\u82e6\u60f3\u540e\uff0c\u6211\u7ec8\u4e8e\u5148\u5230\u4e86\u6b63\u89e3\u65b9\u6cd5\n\n\u5728dp\u65f6\u662f\u9ed8\u8ba4\u9009\u6839\u8282\u70b9\u7684\uff0c\u4f46\u9009\u6839\u8282\u70b9\u4e0d\u4e00\u5b9a\u6700\u4f18\uff0c\u6700\u4f18\u60c5\u51b5\u53ef\u80fd\u662f\u53bb\u6389\u67d0\u4e9b\u5b50\u6811\uff0c\u4e5f\u53ef\u80fd\u8fd8\u53bb\u6389\u6839\u8282\u70b9\uff0c\u7528\u4e00\u4e0b\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u628a\u7ed3\u679c\u904d\u5386\u4e00\u904d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8003\u8651\u5230\u6240\u6709\u60c5\u51b5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5f88\u4f18\u3002\n\n\u9644AC\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath> \n#include<vector>\nusing namespace std;\nconst int N=16005;\nvector<int>E[N];//vector\u5b58\u56fe\uff08\u6811\uff09\u4eff\u9886\u63a5\u8868 \nint n,w[N],f[N];\nint dp(int v,int fa){//\u8bb0\u4f4f\u7236\u4eb2\u8282\u70b9\uff0c\u907f\u514d\u6b7b\u5faa\u73af \n\tint ans=w[v];\n\tfor(int i=0;i<E[v].size();i++)\n\t\tif(E[v][i]!=fa) ans+=max(0,dp(E[v][i],v));\n\treturn f[v]=ans;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",w+i);\n\tfor(int i=1,x,y;i<=n-1;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tE[x].push_back(y);//\u6b64\u65f6\u4e0d\u786e\u5b9a\u7236\u8282\u70b9\uff0c\u5f53\u65e0\u5411\u56fe\u5b58 \n\t\tE[y].push_back(x);\n\t}\n\tint ans=0;\n\tdp(1,0); \n\tfor(int i=1;i<=n;i++) ans=max(ans,f[i]);//\u5c06\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u7ed3\u679c\u9010\u4e00\u6bd4\u8f83 \n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n} \n```\n\n",
        "postTime": 1541929583,
        "uid": 113678,
        "name": "StoneXie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u6811\u72b6dp\u7684\u5165\u95e8\u9898\uff0c\u505a\u5b8c\u8fd9\u9053\u9898\u5bf9\u6811\u6709\u4e86\u65b0\u7684\u7406\u89e3\u3002\u6811\u4e0d\u4e00\u5b9a\u662f\u6211\u4eec\u901a\u5e38\u7406\u89e3\u7684\u6811\uff08\u6839\u662f\u4e0d\u53d8\u7684\uff09\u3002\u6811\u5f62\u7ed3\u6784\u4ee3\u8868\u7684\u7279\u70b9\u662f\u8fde\u63a5\u548c\u5c42\u6b21\u3002\n\n\u4e2a\u4eba\u8ba4\u4e3a\uff1a\u8fd9\u4e2a\u9898\u6ca1\u6709\u771f\u6b63\u7684\u6811\u6839\u53ea\u8981\u968f\u4fbf\u627e\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u628a\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u8fb9\u5b58\u8d77\u6765\uff0c\u7136\u540e\u5904\u7406\u8fd9\u4e2a\u4e32\u4e0a\u7684\u8fb9\uff0c\u6bd4\u5982\u8fd9\u6761\u4e32\u4e0a\u7684\u4e0a\u4e00\u6761\u8fb9\u662f\u4ec0\u4e48\uff0c\u8fd9\u6761\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u662f\u4ec0\u4e48\u3002\u8be6\u7ec6\u9898\u89e3\u5199\u5230\u6ce8\u91ca\u91cc\u4e86\n\n\u6709\u7684\u5730\u65b9\u53ef\u80fd\u89e3\u91ca\u7684\u4e0d\u6e05\u695a\uff0c\u5927\u5bb6\u610f\u4f1a\u5427......\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\u2018\u2019\u2018cpp\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define inf 0x3f3f3f3f\nint flower[16600],n,next[40010],pre[40010],last[40010],f[16600],num=0;\n```\n/\\*\nflower[i]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u7684\u503c\n\nnext[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\n\npre[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u7f16\u53f7\n\nlast[i]\u8868\u793a\u4e0e\u7b2ci\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff08\u56e0\u4e3a\u4e0ei\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\uff09\n\nlast[i]\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u8bb8\u591a\u8282\u70b9\u7528\u8fb9\u76f8\u8fde\u5f62\u6210\u4e00\u6761\u4e32\uff0c\u7b2ci\u6761\u8fb9\u5728\u8fd9\u4e2a\u4e32\u4e2d\u7684\u4e0a\u4e00\u6761\u8fb9\u5c31\u662flast[i]\n\nf[i]\u8868\u793a\u7b2ci\u8282\u70b9\u7684\u5b50\u6811\u7684\u6700\u5927\u548c\n\n\\*/\n```cpp\nbool vis[16600];//\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u8bbf\u95ee\u8fc7\nint ans=-inf;\nvoid cnct(int x,int y)\n{\n    num++;//\u8fb9\u7684\u7f16\u53f7++\n    next[num]=y;//\u7b2cnum\u6761\u8fb9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662fy\n    pre[num]=last[x];//\u7b2cnum\u6761\u8fb9\u7684\u4e0a\u4e00\u6761\u8fb9\u662fx\u7684\u4e0a\u4e00\u6761\u8fb9\n    last[x]=num;//\u73b0\u5728x\u7684\u4e0a\u4e00\u6761\u8fb9\u662fnum\u4e86\n}\nint dfs (int u)\n{\n    int sum=0;\n    if(f[u])\n    return f[u];\n    int i=last[u];//u\u8282\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\nwhile(i)//\u5982\u679c\u6709\u8fd9\u6761\u8fb9\n {\n        int nxt=next[i];//nxt\u5c31\u662f\u6b64\u8fb9\u76f8\u8fde\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\uff08\u8fd9\u6761\u8fb9\u628au\u4e0enxt\u76f8\u8fde\uff09\n        if(!vis[nxt])\n        {\n            vis[nxt]=1;\n            int x=dfs(nxt);//\u5f80\u4e0a\u627e\u4e32\n            if(x>0) sum+=x;//\u627e\u5b8c\u540e\u5982\u679c\u5b50\u6811\u6743\u503c\u548c>0\uff0c\u52a0\u4e0a\n        }\n        i=pre[i];//\u518d\u627ei\u7684\u524d\u4e00\u4e2a\u8fb9\n    }\n    f[u]=sum+flower[u];\n    if(f[u]>ans) ans=f[u];\n    return f[u];\n}\nint main()\n{\n    memset(flower,0,sizeof flower);\n    memset(pre,0,sizeof pre);\n    memset(last,0,sizeof last);\n    memset(next,0,sizeof next);\n    memset(f,0,sizeof f);\n    memset(vis,false,sizeof vis);\n    //freopen(\"de.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n    scanf(\"%d\",&flower[i]);\n    for (int i=1;i<n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        cnct(x,y);//\u5c06\u4e24\u4e2a\u8282\u70b9\u8fde\u63a5\u8d77\u6765\n        cnct(y,x);//\u53cc\u5411\u90fd\u8981\u8fde\u63a5\n    }\n    vis[1]=1;\n    dfs(1);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u2019\u2018\u2019\n\u4e0b\u9762\u8865\u4e0a\u4e00\u4e2a\u5229\u7528vector\u5b58\u8fb9\u7684\u505a\u6cd5\uff0c\u6bd4\u8f83\u597d\u7406\u89e3\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\u2018\u2019\u2018cpp\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define inf 0x3f3f3f3f\nstruct edge\n{\n    int u,v;\n};\nvector <edge> e[16010];//\u7528vector\u6570\u7ec4\u6765\u8868\u793a\u6bcf\u4e2a\u70b9\u76f8\u90bb\u7684\u70b9\nint result=-inf,n,f[16010],flower[16010];//f[i]\u4e3a\u8282\u70b9i\u7684\u5b50\u6811\u7684\u6700\u5927\u503c\nbool vis[16010];\nint dfs (int x)\n{\n    int t;\n    for (int i=0;i<e[x].size();++i)\n    {\n        edge &st=e[x][i];\n        if (!vis[st.v])\n        {\n            vis[st.v]=1;\n            t=dfs(st.v);\n            if (t>0)\n            f[x]+=t;\n        }\n    }\n    result=max(result,f[x]);\n    return f[x];\n}\nint main()\n{\n    memset(f,0,sizeof f);\n    memset(flower,0,sizeof flower);\n    memset(vis,false,sizeof vis);\n    //freopen(\"de.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&flower[i]);\n        f[i]=flower[i];\n    }\n    for (int i=1;i<n;++i)\n    {\n        int p1,p2;\n        scanf(\"%d%d\",&p1,&p2);\n        e[p1].push_back((edge){p1,p2});\n        e[p2].push_back((edge){p2,p1});\n    }\n    vis[1]=true;\n    dfs(1);\n    printf(\"%d\\n\",result);\n    return 0;\n}\n\u2019\u2018\u2019\n```",
        "postTime": 1479441893,
        "uid": 20466,
        "name": "\u56de\u5f52\u7ebf\u4ee5\u5317",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u4e0d\u7528\u627e\u6839\uff0c\u7136\u800c\u849f\u84bb\u8fd8\u662f\u627e\u4e86\u6839\u3002\u3002\u3002\u3002\n\n\u7136\u540eN^2\u5c31TLE.....\n\n\u7136\u540e\u6211\u53d1\u73b0\u4f3c\u4e4e\u6709\u91cd\u590d\u8ba1\u7b97\uff0c\u8bb0\u5fc6\u5316\u5927\u6cd5\u597d.............\u5f00\u4e86\u4e2amap\uff0c\u8bb0\u5f55u\u70b9\u4ee5fa\u4e3a\u7236\u8282\u70b9\u65f6\u7684dp\u503c\uff0c\u7136\u540e\u597d\u50cf\u8fd8\u633a\u5feb\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#include<map>\n#include<cstring>\n#include<utility>\n#define maxn 16003\nusing namespace std;\ninline void read(int &num){\n    char c;num=0;bool flag=0;\n    while((c=getchar())==' '||c=='\\r'||c=='\\n');\n    if(c=='-')flag=1;\n    else num=c-48;\n    while((c=getchar())>=48&&c<=57)num=num*10+c-48;\n    if(flag)num*=-1;\n    return;\n}\nvector<int>sons[maxn];\nmap<pair<int,int>,int> m;\nint n,a[maxn],dp[maxn],g[maxn];\nvoid DFS(int u,int fa){\n    pair<int,int> tmp=make_pair(u,fa);\n    map<pair<int,int>,int>::iterator it=m.find(tmp);\n    if(it!=m.end()){\n        dp[u]=m[tmp];\n        if(dp[u]>0) g[fa]+=dp[u];\n        return;\n    }\n    int size=sons[u].size();\n    for(int i=0;i<size;++i)\n        if(sons[u][i]!=fa) \n            DFS(sons[u][i],u);\n    dp[u]=max(0,max(a[u],a[u]+g[u]));\n    m[tmp]=dp[u];\n    if(dp[u]>0) g[fa]+=dp[u];//g[fa]\u8868\u793a\u4ee5fa\u4e3a\u6839\u7684\u5b50\u6811\u5b50\u8282\u70b9\u7684\u6700\u5927\u4ef7\u503c\u548c\n    return;\n}\nint main(){\n    freopen(\"a.in\",\"r\",stdin);\n    read(n);\n    for(int i=1;i<=n;++i) read(a[i]);\n    int x,y;\n    for(int i=1;i<n;++i){\n        read(x),read(y);\n        sons[x].push_back(y);\n        sons[y].push_back(x);\n    }\n    int ans=-0x7fffffff;\n    for(int i=1;i<=n;++i){\n        memset(dp,0,sizeof(dp));\n        memset(g,0,sizeof(g));\n        DFS(i,0);\n        ans=max(ans,dp[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1479259964,
        "uid": 20695,
        "name": "DreamDraw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "## \u57fa\u672c\u601d\u60f3\uff1a\n\n\u5f88\u660e\u663e\u7684\u662f\u8fd9\u662f\u4e00\u9053\u6811\u5f62Dp~~\uff0c\u987a\u4fbf\u5e26\u70b9\u8d2a\u5fc3\u7684\u601d\u60f3~~\u3002\n\n\u6211\u4eec\u8bbe$F[V]$\u4e3a\u6839\u8282\u70b9\u4e3aV\u65f6\u6700\u5927\u5b50\u6811\u548c\uff0c\u6b64\u65f6$F[V]$\u7531$\\Sigma_{E(V,u)}{F[V],F[V] + F[u]}$\u51b3\u5b9a\u3002\n\n\u4f46\u5982\u679c\u6211\u4eec\u968f\u4fbf\u627e\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u53bb\u505a\u8fd9\u4e2aDp\uff0c\u5f88\u53ef\u80fd\u5c31\u4f1aWrong Answer\u3002\u6bd4\u5982\u8bf4Luogu\u7ed9\u7684\u6837\u4f8b\uff0c\u4ee51\u4e3a\u6839\u8282\u70b9\u65f6\u3002\u4f46\u76f4\u63a5\u8fd9\u6837Dp\u4e3a\u4ec0\u4e48\u4ed6\u4f1a\u9519\u5462\uff1f\n\n\u56e0\u4e3a$F[V]$\u5f97\u5230\u7684\u662f\u4ee5V\u4e3a\u6839\u8282\u70b9\u5f97\u5230\u7684\u6700\u5927\u5b50\u6811\u548c\uff0c\u6240\u4ee5$F[V]$\u4e00\u5b9a\u5305\u62ec\u4e86\u8282\u70b9V\u7684\u503c\u3002\u5f88\u663e\u7136\u5982\u679c\u8fd9\u4e2a\u6839\u7684\u503c\u5c0f\u4e8e\u96f6\uff0c\u90a3\u4ed6\u80af\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u8981\u53bb\u6839\u80af\u5b9a\u5927\u4e8e\u96f6~~\uff0c\u800c\u4e14\u5e94\u8be5\u6839\u8282\u70b9\u7684\u503c\u8d8a\u5927\u8d8a\u597d~~\u3002\n\n\u4f46\u662f\u503c\u6700\u5927\u7684\u8282\u70b9\u505a\u6839\u8282\u70b9\u4e0d\u4e00\u5b9a\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7b54\u6848\uff0c\u6bd4\u5982\u8bf4\u4ee5\u4e0b\u8fd9\u7ec4\uff1a\n\n```t\n5\n3 -6 -4 2 2\n1 2\n1 3\n2 4\n4 5\n```\n\n\u6211\u4eec\u8d2a\u5fc3\u4f1a\u5f97\u52303\uff0c\u800c\u6b63\u786e\u662f4\uff0cQwQ\uff0c\u6240\u4ee5\u6211\u7761\u89c9\u65f6\u628a\u6211\u81ea\u5df1hack\u6389\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u540e\u9700\u8981\u518d\u627e\u4e00\u904d\u6839\u8282\u70b9\uff0c\u6216\u8005Dp\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n## \u90e8\u5206\u4ee3\u7801\u89e3\u91ca\n\n```c++\nstruct Graph {\n    int Vertex;\n    int Next;\n} Edge[Maxn << 1]; //\u5f00\u4e24\u500d\n\nvoid Read() {\n    ~~~~~~~\n    register int A, B;\n    for (int i = 1; i < N; ++i) {\n        A = Fscan();\n        B = Fscan();\n        Insert(A, B, Cnt, Head, Edge); //\u52a0\u8fb9(u,v)\n        Insert(B, A, Cnt, Head, Edge); //\u52a0\u8fb9(v,u)\n    }\n}\n```\n\n\u6811\u662f\u53cc\u5411\u8fb9\uff0c\u8bb0\u5f97\u52a0\u4e24\u6b21\u8fb9$(u,v) \u548c(v,u)$\uff0c\u8fb9\u96c6\u6570\u7ec4\u8bb0\u5f97\u5f00\u4e24\u500d\u3002\n\n```c++\nfor (int i = 1; i <= N; ++i){\n    Value[i] = Fscan();\n    if(Value[i] > Value[S])\n    \tS = i;\n}\n```\n\n\u6211\u4eec\u5728\u8bfb\u5165\u7684\u65f6\u5019\uff0c\u627e\u5230\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5728\u626b\u4e00\u904d\u8bb0\u5f55\u503c\u7684\u6570\u7ec4\u4e86\u3002\n\n```c++\nif (NV != P){\n\tDfs(NV);\n\tF[V] = max(F[V], F[V] + F[NV]); //Dp QwQ\n\t//printf(\"%d %d %d\\n\",V,NV,F[V]);\n}\n```\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5Dfs\u65f6\u8981\u5224\u65ad\u4e00\u4e0b\uff0c\u4e0d\u7136\u6b7b\u5faa\u73af\u5c31\u5d29\u4e86\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cstring>\n\n#define max(A, B) A >= B ? A : B\n\nconst int INF = 0x7fffffff;\nconst int Maxn = 16000 + 5;\n\nint Cnt, Head[Maxn];\nint Value[Maxn];\nstruct Graph {\n    int Vertex;\n    int Next;\n} Edge[Maxn << 1];\n\ninline void Insert(const int &From, const int &To, int &Cnt, int *Head, Graph *Edge) {\n    Edge[++Cnt].Vertex = To;\n    Edge[Cnt].Next = Head[From];\n    Head[From] = Cnt;\n}\n\ninline int Fscan() {\n    char Ch = getchar();\n    int X = 0, F = 1;\n    while (Ch < '0' || Ch > '9') {\n        if (Ch == '-')\n            F = -1;\n        Ch = getchar();\n    }\n    while ('0' <= Ch && Ch <= '9') {\n        X = (X << 3) + (X << 1) + Ch - '0';\n        Ch = getchar();\n    }\n    return X * F;\n}\n\nint N,S;\n\nvoid Read() {\n    N = Fscan();\n    //printf(\"%d\\n\",N);\n    for (int i = 1; i <= N; ++i){\n    \tValue[i] = Fscan();\n    \tif(Value[i] > Value[S])\n    \t\tS = i;\n\t}\n    \t\n    //for(int i = 1; i <= N; ++i)\n        //printf(\"%d \",Value[i]);\n    //printf(\"\\n\");\n    register int A, B;\n    for (int i = 1; i < N; ++i) {\n        A = Fscan();\n        B = Fscan();\n        Insert(A, B, Cnt, Head, Edge);\n        Insert(B, A, Cnt, Head, Edge);\n        //printf(\"%d %d\\n\",A ,B);\n    }\n    //printf(\"\\n\");\n}\n\nint F[Maxn];\n\nvoid Dfs(const int &V,const int &P) {\n    int NV;\n    //printf(\" %d %d\\n\",V,F[V]);\n    F[V] = Value[V];\n    for (int i = Head[V]; i; i = Edge[i].Next) {\n        NV = Edge[i].Vertex;\n        //printf(\" %d \",NV);\n        if (NV != P){\n        \tDfs(NV,V);\n        \tF[V] = max(F[V], F[V] + F[NV]);\n\t\t\t//printf(\"%d %d %d\\n\",V,NV,F[V]);\n\t\t}\n        //printf(\"%d\\n\",F[V]);\n    }\n    //printf(\"%d %d\\n\",V,F[V]);\n    //F[V] = max(F[V], F[V] + Value[V]);\n}\n\nint main() {\n    Read();\n\tDfs(S,S);\n    int Ans = -INF;\n    for(int i = 1; i <= N; ++i)\n        Ans = max(Ans, F[i]);\n    printf(\"%d\", Ans);\n    //printf(\"%d\", F[S]);\n    //for(int i = 1 ; i <= N; ++i)\n    //    printf(\"%d \",F[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1533286361,
        "uid": 8173,
        "name": "\u547c\u5578\u5c71\u5e84",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "# \u5206\u6790\n\n\u4e00\u9053\u975e\u5e38\u57fa\u7840\u7684\u6811\u5f62DP\u5566~\n\nf[i]\u8868\u793a\u5fc5\u987b\u5305\u542bflower[i]\u7684\u6700\u5927\u7f8e\u4e3d\u503c\u3002\u7136\u540e\u5728\u6811\u4e0a\u6df1\u641c\u4e71\u641e~\n\n\u9996\u5148\u5c06\u5f53\u524d\u641c\u5230\u7684\u70b9point\u5bf9\u5e94\u7684f[point]\u521d\u59cb\u5316\u4e3aflower[point]\uff0c\u56e0\u4e3a\u6211\u4eec\u89c4\u5b9a\u4e86f[i]\u662f\u5fc5\u987b\u5305\u542bflower[i]\u7684\u6700\u5927\u7f8e\u4e3d\u503c\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u5b9a\u662f\u56e0\u4e3a\u6211\u4eec\u8fdb\u884cDP\u662f\u5efa\u7acb\u5728\u8fd9\u4e2a\u82b1\u8fd8\u662f\u5b8c\u6574\u7684\u57fa\u7840\u4e0a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u8fd8\u9700\u8981flower[point]\u7684\u67d0\u4e2a\u513f\u5b50\u5e26\u6765\u7f8e\u4e3d\u503c\uff0c\u90a3\u4e48flower[i]\u5fc5\u987b\u662f\u4fdd\u7559\u7684\uff0c\u4e0d\u80fd\u4e0e\u6839\u65ad\u5f00\u3002\n\n\u7136\u540e\u5f00\u59cb\u627eflower[point]\u7684\u513f\u5b50\uff0c\u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4e86\u907f\u514d\u5728\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6765\u56de\u641c\u7d22\uff0c\u51fd\u6570dfs\u5fc5\u987b\u6709\u4e00\u4e2a\u53c2\u6570father\u4ee3\u8868\u5f53\u524d\u641c\u5230\u7684\u70b9\u7684\u7236\u4eb2\u3002\u5982\u679c\u5728point\u7684\u513f\u5b50\u91cc\u627e\u5230\u7684\u70b9\u662ffather\u90a3\u4e48\u76f4\u63a5\u8df3\u8fc7\u3002\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5728\u4e4b\u524d\u67d0\u5230\u6df1\u641c\u7684\u9898\u91cc\u9762\u5176\u5b9e\u6709\u8bb2\u8fc7\uff08\u6211\u8bb0\u5f97\u6211\u6709\u5199\u535a\u5ba2\uff09\u3002\n\n\u7136\u540e\u7ee7\u7eed\u9012\u5f52\u641c\u7d22\u3002\n\n\u641c\u5b8c\u5b83\u7684\u4e0b\u4e00\u4e2a\u513f\u5b50\u4ee5\u540e\u6765\u770b\uff0c\u5982\u679c\u8fd9\u4e2a\u513f\u5b50\u5e26\u6765\u7684\u7f8e\u4e3d\u503c\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u4ed6\u5bf9\u5f53\u524d\u8282\u70b9\u7684\u7f8e\u4e3d\u503c\u662f\u6709\u8d21\u732e\u7684\uff0c\u628a\u5b83\u7d2f\u52a0\u5230\u5f53\u524d\u8282\u70b9\u7684\u7f8e\u4e3d\u503c\u5f53\u4e2d\u3002\n\n\u591a\u8bf4\u4e00\u53e5\uff0c\u8fd8\u662f\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff08\u867d\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u5f00\u5c0f\u4e86\uff0c\u6211\u660e\u660e\u662f\u6309\u7167\u6b63\u786e\u7684\u6570\u636e\u8303\u56f4\u5f00\u7684\uff09\uff0c\u521a\u624d\u628aFRET(Fast Runtime Error Transform)\u7684\u6280\u80fd\u8fde\u7740\u5347\u4e86\u4e24\u7ea7(\u256f\u2035\u25a1\u2032)\u256f\ufe35\u253b\u2501\u253b\u3002\n\n# \u7a0b\u5e8f\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 40000;\nint n, fw[MAXN], EdgeCount, f[MAXN], Head[MAXN];\nstruct edge\n{\n    int Next, Aim;\n}Edge[MAXN];\nvoid insert(int u, int v)\n{\n    Edge[++EdgeCount] = (edge){Head[u], v};\n    Head[u] = EdgeCount;\n}\nvoid dfs(int point, int father = 0)\n{\n    f[point] = fw[point];\n    // flower point must be in f[point]\n    for (int i = Head[point]; i; i = Edge[i].Next)\n    {\n        int u = Edge[i].Aim;\n        if (u == father)\n            continue;\n        dfs(u,point);\n        if (f[u] > 0)\n            f[point] += f[u];\n        // if f[u]>0 then it can contribute to f[point]\n    }\n}\nint main()\n{\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        cin >> fw[i];\n    for (int i = 1; i < n; i++)\n    {\n        int u, v;\n        cin >> u >> v;\n        insert(u,v);\n        insert(v,u);\n    }\n    dfs(1);\n    int ans = fw[1];\n    for (int i = 1; i <= n; i++)\n        ans = max(ans, f[i]);\n    cout << ans << endl;\n    getchar();\n    getchar();\n    return 0;\n}\n```",
        "postTime": 1518489306,
        "uid": 9671,
        "name": "OptimusPrime_L",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u600e\u4e48\u697c\u4e0b\u6240\u6709\u9898\u89e3\u5168\u662fDFS? \u5176\u5b9e\u968f\u4fbf\u627e\u4e00\u4e2a\u6839\uff0c\u628a\u6240\u6709\u70b9\u6309\u5230\u6839\u7684\u8ddd\u79bb\u6392\u4e2a\u5e8f\u5c31\u53ef\u4ee5\u4e0d\u7528DFS\u4e86\u3002\u81f3\u4e8e\u601d\u8def\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u7528f1\u8868\u793a\u5305\u542b\u6839\u7684\u6700\u5927\u5b50\u6811\u548c\uff0cf2\u8868\u793a\u4e0d\u5305\u542b\u6839\u7684\u6700\u5927\u5b50\u6811\u548c\u3002\u81f3\u4e8e\u6392\u5e8f\uff0c\u628a\u6240\u6709\u70b9BFS\u4e00\u904d\uff0c\u4ea7\u751f\u7684\u961f\u5217\u5c31\u662f\u6392\u5e8f\u540e\u7684\u70b9\uff0c\u5b8c\u5168\u4e0d\u9700\u8981sort\n\n```cpp\n#include<cstdio>\n#include<cctype>\nusing namespace std;\ninline void getint(int &_int){\n    char ch=_int=0;\n    bool neg=false;\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-'){\n        neg=true;\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        _int=_int*10+ch-48;\n        ch=getchar();\n    }\n    if(neg)_int=-_int;\n}\nint n;\nint a[32010],b[32010],fst[16010],nxt[32010];\nint father[16010];\nint f1[16010],f2[16010];\nint q[16010];\nbool vis[16010];\nconst int INF=0x3fffffff;\ninline int max(const int &a,const int &b){\n    return a>b?a:b;\n}\nint main(){\n    register int i,k,u,head,tail;int maxrt=-INF;\n    getint(n);\n    for(i=1;i<=n;i++){\n        getint(f1[i]);\n        maxrt=max(maxrt,f1[i]);\n    }\n    for(i=1;i<2*n-1;i+=2){\n        getint(a[i]);getint(b[i]);\n        a[i+1]=b[i],b[i+1]=a[i];\n        nxt[i]=fst[a[i]];\n        fst[a[i]]=i;\n        nxt[i+1]=fst[b[i]];\n        fst[b[i]]=i+1;\n    }\n    if(maxrt<0){\n        printf(\"%d\\n\",maxrt);\n        return 0;\n    }\n    head=0,tail=1,q[0]=1;\n    vis[1]=true;\n    while(head!=tail){\n        u=q[head++];\n        for(k=fst[u];k;k=nxt[k]){\n            if(!vis[b[k]]){\n                father[b[k]]=u;\n                q[tail++]=b[k];\n                vis[b[k]]=true;\n            }\n        }\n    }\n    while(tail>0){\n        u=q[--tail];\n        f1[father[u]]+=max(f1[u],0);\n        f2[father[u]]=max(f2[father[u]],max(f1[u],f2[u]));\n    }\n    printf(\"%d\\n\",f2[0]);\n}\n```",
        "postTime": 1501999328,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u548b\u4e00\u770b\u8fd8\u771f\u6709\u70b9\u6811\u5f62DP\u7684\u610f\u601d\uff0c\u4e5f\u4e0d\u7ba1\u662f\u4e0d\u662f\u6811\u5f62\u4e86\uff0c\u53cd\u6b63\u662f\u4e2aDP\u3002\n\n\u601d\u8def\u4e5f\u548c\u5927\u591a\u4e00\u6837\uff0c\u627e\u51fa\u201c\u6839\u201d\uff0c\uff08\u56e0\u4e3a\u8fd9\u9053\u9898\u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u627e\u6839\uff0c\u53ea\u7528\u968f\u4fbf\u627e\u4e2a\u70b9\u5f53\u505a\u6839\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u68f5\u6811\uff09\u7136\u540e\u9012\u5f52\u627e\u51fa\u5176\u5b50\u6570\uff0c\u5224\u65ad\u5176\u5b50\u6811\u7684\u4ef7\u503c\u662f\u5426\u4e3a\u6b63\uff0c\u4e3a\u6b63\u503c\u5c31\u52a0\u4e0a\u3002\u5e76\u4e14\u5728\u6211\u4eec\u627e\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u627e\u5b8c\u4e00\u68f5\u5b57\u6570\u65f6\u7684\u503c\u5c31\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cfanswer\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u503c\u53d6\u4e2amax\uff0c\u8fd9\u6837\u6700\u540eanswer\u7684\u503c\u5c31\u662f\u6700\u540e\u7b54\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n;\nint ans;\nint f[16010];\nstruct node{\n    int to,next;\n}e[32010];//\u8fd9\u91cc\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\u6bcf\u6761\u8fb9\u5f97\u7ec8\u70b9\u548c\u5176\u76f8\u90bb\u7684\u8fb9\nint head[16010];\nint k=0;\nvoid build(int u,int to)//\u5efa\u6811\uff08\u90bb\u63a5\u8868\u64cd\u4f5c\uff09\n{\n    e[++k].to=to;\n    e[k].next=head[u];\n    head[u]=k;\n}\nint dfs(int x,int fa)//\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\u6240\u4ee5\u4f20\u4e00\u4e2a\u5f53\u524d\u70b9\u7684\u7236\u4eb2\uff0c\u907f\u514d\u91cd\u590d\u8d70\u56de\u6765\n{\n    int sum=f[x];//\u6bcf\u68f5\u5b50\u6811\u81f3\u5c11\u90fd\u8981\u5305\u542b\u672c\u8eab\u7684\u503c\n    for(int i=head[x];i;i=e[i].next)//\u679a\u4e3e\u7b2cx\u8282\u70b9\u7684\u513f\u5b50\n    {\n        if(e[i].to!=fa)//\u5224\u65ad\u662f\u5426\u641c\u56de\u5230\u7236\u4eb2\u8282\u70b9\n        {\n            int p=dfs(e[i].to,x);//x\u8282\u70b9\u7684\u4e00\u68f5\u5b50\u6811\u7684\u6700\u5927\u4ef7\u503c\n            if(p>0) sum+=p;\u5982\u679c\u5b50\u6811\u4ef7\u503c\u5927\u4e8e0\u624d\u8981\u5f53\u524d\u5b50\u6811\uff0c\u4e0d\u7136\u5c31\u8981\u526a\u53bb\u5b83\n        }\n    }\n    ans=max(ans,sum);//\u7528answer\u8bb0\u5f55\u6bcf\u68f5\u5b50\u6811\u7684\u4ef7\u503c\u4e2d\u7684max\n    return sum;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) \n    {\n        scanf(\"%d\",&f[i]);\n        ans=max(ans,f[i]);//\u5982\u679c\u6574\u68f5\u6811\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u90a3\u4e2a\u70b9\u662f\u8fd9\u4e2a\u6700\u5927\u7684\u8282\u70b9\n    }\n    for(int i=1;i<n;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        build(a,b);\n        build(b,a);//\u56e0\u4e3a\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u5efa\u53cc\u5411\u8fb9\n    }\n    dfs(1,-1);//\u56e0\u4e3a\u662f\u4e00\u68f5\u6811\u6240\u4ee5\u968f\u4fbf\u627e\u4e2a\u70b9\u505a\u6839\uff0c\u4e00\u822c\u6211\u559c\u6b22\u75281\u505a\u6839\u3002\u4e00\u5f00\u59cbfa\u4f20\u5165-1\uff0c\u56e0\u4e3a\u6ca1\u6709-1\u8fd9\u4e2a\u70b9\uff0c\u4e14\u6839\u6ca1\u6709\u7236\u4eb2\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1476327903,
        "uid": 25151,
        "name": "traceson",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u5b83\u7684\u6700\u5927\u5b50\u6811\u6709\u4e24\u79cd\u53ef\u80fd\uff1a1.\u6839\u8282\u70b9\u88ab\u52a0\u5165\uff1b2.\u6839\u8282\u70b9\u672a\u88ab\u52a0\u5165\u3002\n\n\u5bf9\u4e8e\u60c5\u51b51\uff0c\u8bbe\u5305\u542b\u67d0\u4e00\u513f\u5b50\uff08\u4f46\u4e0d\u5305\u542b\u6839\u8282\u70b9\uff09\u7684\u6700\u5927\u5b50\u6811\u4e3ap\uff0c\u82e5p\u7684\u6743\u503c\u4e4b\u548c>0\uff0c\u5c31\u628ap\u8fde\u63a5\u5230\u6839\u8282\u70b9\u4e0a\uff1b\u5982\u679cp\u7684\u6743\u503c\u4e4b\u548c<0\uff0c\u5219\u6ca1\u6709\u5fc5\u8981\u628ap\u8fde\u5230\u6839\u8282\u70b9\u4e0a\u3002\n\n\u5f53\u6240\u6709\u513f\u5b50\u88ab\u904d\u5386\u4e00\u904d\u540e\uff0c\u7edf\u8ba1\u5305\u542b\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811R\u7684\u6743\u503c\u4e4b\u548csum\uff0c\u5982\u679csum>ans\uff0c\u90a3\u4e48ans=sum\uff1b\n\n\u5982\u679csum<=ans\uff0c\u5c31\u8bf4\u660e\u6839\u8282\u70b9\u6ca1\u6709\u5fc5\u8981\u52a0\u5165\u3002\u6700\u5927\u5b50\u6811\u662f\u67d0\u4e00\u4e2a\u513f\u5b50\u7684\u5b50\u96c6\uff0c\u5176\u6743\u503c\u548c\u4e3aans\u3002\n\n\u6700\u540e\u8f93\u51faans\u5c31\u597d.\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing std::vector;\nconst int maxn=16000+5;\nint n,root_node,ans=0;\nbool vis[maxn];//\u770b\u770b\u54ea\u4e2a\u7ed3\u70b9\u6ca1\u6709\u52a0\u5165\u5230\u6811\u4e2d\nvector<int> M[maxn],son[maxn];//M\u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u7684\u76f8\u90bb\u7ed3\u70b9\uff1bson\u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u7684\u513f\u5b50\nint pa[maxn],a[maxn];//pa\u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\uff0ca\u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\nvoid build_tree(const int root_node)//\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u6784\u5efa\u4e00\u68f5\u6811\n{\n    vis[root_node]=1;\n    for(int i=0;i<M[root_node].size();i++)\n    {\n        int p=M[root_node][i];\n        if(!vis[p])\n        {\n            pa[p]=root_node;\n            son[root_node].push_back(p);\n            build_tree(p);\n        }\n    }\n}\nint work(const int root_node)//\u9012\u5f52\u6c42\u89e3\u95ee\u9898\u3002\u8be5\u51fd\u6570\u7684\u610f\u4e49\u662f\uff0c\u8fd4\u56de\u5305\u542broot_node\u4f46\u4e0d\u5305\u542broot_node\u7236\u4eb2\u7684\u6700\u5927\u5b50\u6811\u7684\u6743\u503c\n{\n    int i,sum=a[root_node],q;\n    for(i=0;i<son[root_node].size();i++)\n    {\n        q=work(son[root_node][i]);\n        if(q>0)sum+=q;\n    }\n    if(sum>ans)ans=sum;\n    return sum;\n}\nint main(int argc,char **argv)\n{\n    int i,x,y,max_node;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",a+i);\n        if(a[i]>ans)ans=a[i];//\u5982\u679c\u6811\u4e2d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u8fd9\u80af\u5b9a\u662f\u6743\u503c\u6700\u5927\u7684\u7ed3\u70b9\n    }\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);//\u8f93\u5165\u8fb9\n        M[x].push_back(y);\n        M[y].push_back(x);\n    }\n    for(i=1;i<=n;i++)\n        if(max_node>M[i].size())\n        {\n            max_node=M[i].size();\n            root_node=i;//\u627e\u5230\u4e00\u4e2a\u5ea6\u6700\u5927\u7684\u7ed3\u70b9(\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5c3d\u53ef\u80fd\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\uff09\n        }\n    for(i=1;i<=n;i++)\n        pa[i]=i;\n    memset(vis,0,sizeof(vis));\n    build_tree(root_node);//\u5efa\u7acb\u6811\n    work(root_node);//\u6c42\u89e3\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1469264504,
        "uid": 19712,
        "name": "san9pk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "\u76f4\u63a5dp\uff0c\u5efa\u68f5\u6811\uff0cdp[i]\u8868\u793a\u53d6\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u6700\u5927\u7684\u6536\u76ca\u662f\u591a\u5c11\uff0c\u56e0\u4e3a\u8981\u8054\u901a\uff0c\u6240\u4ee5\u66f4\u65b0\u662fdp[i]=max(dp[i],dp[i]+dp[j])\uff0cj\u662fi\u7684\u513f\u5b50\uff0c\u6700\u540e\u5faa\u73af\u4e00\u904dn\uff0c\u770bdp\u503c\u6700\u5927\u662f\u591a\u5c11\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n[codec ]#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <cmath>  \n#include <algorithm>  \nusing namespace std;  \nconst int M=32100;  \nint n,s;  \nint to[M],w[M],first[M],next[M],dp[M];  \nvoid add(int x,int y){  \n    to[++s]=y; next[s]=first[x]; first[x]=s;  \n}  \nvoid dfs(int x,int fa){  \n    dp[x]=w[x];  \n    for(int i=first[x];i>0;i=next[i]){  \n        int y=to[i];  \n        if(y==fa) continue;  \n        dfs(y,x);  \n        if(dp[y]>0) dp[x]+=dp[y];  \n    }  \n}  \nint main()  \n{  \n    scanf(\"%d\",&n);  \n    for(int i=1;i<=n;i++){  \n        scanf(\"%d\",&w[i]);  \n    }  \n    for(int i=1;i<=n-1;i++){  \n        int a,b;  \n        scanf(\"%d%d\",&a,&b);  \n        add(a,b);  \n        add(b,a);  \n    }  \n    dfs(1,0);  \n    int ans=-16000010;  \n    for(int i=1;i<=n;i++) if(dp[i]>ans) ans=dp[i];  \n    printf(\"%d\",ans);  \n}  [/codec ]\n```",
        "postTime": 1446341515,
        "uid": 8066,
        "name": "wzmszjw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P1122)\n\n\u6811\u5f62 $\\text{DP}$ \u597d\u9898\u3002\n\n# 1\u3001\u9898\u610f\u7406\u89e3\n\n\u7ed9\u4f60\u4e00\u68f5\u6709 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u70b9\u6743\uff0c\u8ba9\u4f60\u4ece\u4e2d\u627e\u51fa\u4e00\u68f5\u5b50\u6811\uff0c\u4f7f\u5f97\u8fd9\u68f5\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u70b9\u6743\u548c\u6700\u5927\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a $1 \\leq n \\leq 16000$\u3002\n\n# 2\u3001\u7b97\u6cd5\u5206\u6790\n\n\u4ece[\u8fd9\u91cc](https://www.luogu.com.cn/blog/shenyun/solution-p1122)\u501f\u4e24\u5f20\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/46077.png)\n\n\u770b\u6837\u4f8b\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u6240\u8bf4\u7684\u201c\u6700\u5927\u5b50\u6811\u548c\u201d\u5c31\u5728\u8fd9\u91cc\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/46078.png)\n\n\u6240\u4ee5\u6211\u4eec\u8be5\u600e\u6837\u8bbe\u8ba1\u72b6\u6001\u5462\uff0c\u5f88\u7b80\u5355\uff01\u5c31\u662f\u6811\u5f62 $\\text{DP}$ \u6807\u51c6\u72b6\u6001\u8bbe\u8ba1\u6cd5\uff0c\u6211\u4eec\u8bbe $f_u$ \u8868\u793a\u4ee5 $u$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u548c\u3002\u7531\u4e8e\u4ee5 $u$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u5fc5\u7136\u5305\u62ec $u$ \u81ea\u5df1\uff0c\u6240\u4ee5\u521d\u59cb\u5316 \n$$f_u \\leftarrow a_u $$\n\n\u7136\u540e\u6211\u4eec\u904d\u5386 $u$ \u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 $v$ \uff0c\u8fd9\u91cc\u7528\u5230\u4e86\u4e00\u70b9\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5982\u679c $f_v>0$ \uff0c\u4e5f\u5c31\u662f\u8bf4\u4ee5 $v$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u548c\u5927\u4e8e\u96f6\uff0c\u90a3\u6211\u5c31\u53ef\u4ee5\u628a\u8fd9\u68f5\u6811\u4e0a\u9762\u63a5\u4e00\u4e2a\u6839\u8282\u70b9 $u$ \u3002\n$$f_u=f_u+f_v$$\n\u8fd9\u6837\u4ee5 $v$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u5c31\u4e3a\u4ee5 $u$ \u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u505a\u51fa\u8d21\u732e\uff0c\u53cd\u4e4b\u5219\u4e0d\u9009\uff0c\u56e0\u4e3a\u9009\u4e86\u8fd8\u5f97\u51cf\uff0c\u662f\u4e2a\u7d2f\u8d58\u3002\n\n\u7ed3\u679c\uff1a $\\max(f_i)$\n\n\u6211\u4eec\u53ef\u4ee5\u7528`vector`\u6765\u5efa\u6811\uff08~~\u5e38\u6570\u8fd9\u4e48\u5c0f\u7684\u4e1c\u897f\u54b1\u4eec\u4e0d\u7528\uff1f~~\uff09\uff0c\u6700\u540e\u9644\u4e0a\u4e2a\u6811\u5f62 $\\text{DP}$ \u6a21\u677f\u9001\u7ed9\u5927\u5bb6\uff1a\n\n```cpp\nvoid dfs(int u,int fa)\n{\n\tInit();\n\tvis[u]=1;//\u6709\u65f6\u8981\uff08\u53ef\u4ee5\uff09\u52a0\uff0c\u672c\u9898\u4e0d\u7528\u52a0 \n\tfor(int i=0;i<tree[u].size();i++)\n\t{\n\t\tint nxt=tree[u][i];\n\t\tif(nxt!=fa&&!vis[nxt])\n\t\t{\n\t\t\tdfs(nxt,u);\n\t\t\tdp();\n\t\t}\t\n\t}\t\n} \n```\n\n# 3\u3001\u4ee3\u7801\n\n\u4ee3\u7801\u4e2d\u6709\u6ce8\u91ca\u3002\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\nconst int N=16005;\nint a[N],n,f[N];//f[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u8282\u70b9\u6700\u5927\u5b50\u6811\u548c\nvector<vector<int> > tree(N);//vector\u5efa\u6811 \nvoid dfs(int u,int fa)//\u5f53\u524d\u8282\u70b9\u4e0e\u5176\u7236\u4eb2\u8282\u70b9 \n{\n\tf[u]=a[u];//\u521d\u59cb\u5316\u4e3a\u8282\u70b9\u70b9\u6743 \n\tfor(int i=0;i<tree[u].size();i++)//\u904d\u5386\u6bcf\u4e2a\u8282\u70b9 \n\t{\n\t\tif(tree[u][i]!=fa)//\u4e0d\u80fd\u5f80\u56de\u641c\u7236\u4eb2 \n\t\t{\n\t\t\tint nxt=tree[u][i];\n\t\t\tdfs(nxt,u);\n\t\t\tif(f[nxt]>0)\n\t\t\t\tf[u]+=f[nxt];//\u52a8\u5f52\u8f6c\u79fb \n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>a[i];\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint p,q;\n\t\tcin>>p>>q;\n\t\ttree[p].push_back(q);//\u65e0\u5411\u8fb9\u8981push\u4e24\u6b21 \n\t\ttree[q].push_back(p);\t\n\t} \n\tdfs(1,0);//\u8fd9\u91cc\u5176\u5b9e\u4ece\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u641c\u90fd\u53ef\u4ee5\uff0c\u56e0\u4e3a\u662f\u4e00\u6b21\u6027\u7684 \n\tint ans=-0x7f7f7f;\n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,f[i]);//\u6c42\u7ed3\u679c \n\tcout<<ans;\n\treturn 0;\n} \n```\n**\u82e5\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u6307\u51fa\uff01**",
        "postTime": 1623248565,
        "uid": 304775,
        "name": "linyinuo2008",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "**\u4e00\u9053\u6811\u4e0aDP\u9898**\n\n~~\u8fd9\u9898\u5176\u5b9e\u633a\u7b80\u5355\u7684\u2026\u2026~~ \n\n\u9996\u5148 \u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u770b\u51fa\u6765 \u8fd9\u9053\u9898\u548c\u6811\u6709\u5173 \u6216\u8005\u8bf4 \u4ed6\u662f\u4e00\u4e2a\u65e0\u5411\u56fe \u800c\u4e14\u53c8\u662f\u6c42\u6700\u4f18\u89e3 \u90a3\u4e48 \u76f4\u63a5\u5c31\u4e0a\u6811\u4e0aDP\n\n\u5148\u627e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5176\u5b9e\u8fd9\u91cc\u7528\u4e0a\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u60f3 \u5c31\u662f \u53ea\u6709\u52a0\u4e0a\u4e00\u4e2a\u6b63\u7684\u6570 \u4ed6\u7684\u503c\u624d\u4f1a\u9ad8\u561b \u800c\u4e14 \u53ea\u8981\u503c\u80fd\u53d8\u9ad8 \u5f53\u7136\u662f\u52a0\u7684\u8d8a\u591a\u8d8a\u597d \u6240\u4ee5\u65b9\u7a0b\u5c31\u662f f[i]+=max(0,f[j])\n\n\u7136\u540e \u6811\u4e0aDP\u5176\u5b9e\u90fd\u8ddfdfs\u5dee\u4e0d\u591a\uff08~~\u6211jio\u5f97\u5dee\u4e0d\u591a~~\uff09 \u6240\u4ee5\u76f4\u63a5\u5199\u4e00\u4e2adfs\u6765\u66f4\u65b0\u7b54\u6848\u5c31\u597d\u5566 \n\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\n```cpp\n#include<iostream>\nusing namespace std;\n\nint vis[16001];\n\nint head[16001];\n\nstruct nod{\n\tint to,nxt;\n}e[32005];\n\nint f[16001];\n\nint n,cnt=0;\n\nvoid addEdge(int u,int v){\n\te[++cnt]=(nod){v,head[u]};\n\thead[u]=cnt;\n}\n\nvoid dfs(int s){\n\tvis[s]=1;\n\tfor(int i=head[s];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(vis[v]) continue;\n\t\tdfs(v);\n\t\tf[s]+=max(0,f[v]);\n\t}\n}\n\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>f[i];\n\t}\n\tfor(int i=1,u,v;i<n;i++){\n\t\tcin>>u>>v;\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tdfs(1);\n\tint ans=-999999999;\n\tfor(int i=1;i<=n;i++){\n\t\tans=max(ans,f[i]);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1572963956,
        "uid": 130624,
        "name": "\u4e00\u4e2a\u6635\u79f0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u4ee3\u7801\u5b9e\u73b0\u4ee5\u53ca\u4ee3\u7801\u7ec6\u8282\uff0c\u5404\u4f4d\u9898\u89e3dalao\u90fd\u5199\u5f97\u5f88\u8be6\u7ec6\u4e86\uff0c\u849f\u84bb\u66f4\u60f3\u8bf4\u4e00\u4e9b\u601d\u8def\u4e0a\u7684\u4e1c\u897f\n\n## ~~\u7c7b\u4f3c\u597d\u9898\uff1f\uff08\u591a\u500d\u7ecf\u9a8c\uff09~~\n[p1352\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a](https://www.luogu.org/problem/P1352)\n\n## Solution\n\n\u4fd7\u8bdd\u8bf4\u7684\u597d\uff1a\u9047\u5230dp\u95ee\u9898\uff0c\u4e00\u5b9a\u5148\u95ee\u81ea\u5df1\u4e09\u4e2a\u95ee\u9898\uff1a\u600e\u4e48\u8bbe\u8ba1\u72b6\u6001\uff1f\u600e\u4e48\u5199\u8f6c\u79fb\u65b9\u7a0b\uff1f\u600e\u4e48\u5b9e\u73b0\uff1f\u6211\u4eec\u5c31\u6765\u4e00\u4e2a\u4e00\u4e2a\u8bb2\uff1a\n\n### \u72b6\u6001\u8bbe\u8ba1\n\n\u5bf9\u4e8e\u6b64\u9898\uff1a\u5220\u53bb\u4e00\u68f5\u6811\u7684\u4e00\u4e9b\u90e8\u5206\uff0c\u4f7f\u5f97\u5269\u4f59\u90e8\u5206\u70b9\u6743\u548c\u6700\u5927\u3002\u51ed\u501f\u7075\u654f\u7684dp\u76f4\u89c9\uff0c\u72b6\u6001dp[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u6811\u6700\u5927\u6743\u503c\u548c\uff0c\u72b6\u6001\u5c31\u8bbe\u8ba1\u5b8c\u6210\u4e86\uff1b\n\n### \u8f6c\u79fb\u65b9\u7a0b\n\n\u6240\u8c13dp\uff0c\u4e0d\u53ef\u80fd\u5929\u4e0a\u6389\u7b54\u6848\uff0c\u6240\u4ee5\u5fc5\u987b\u4ece\u5b50\u95ee\u9898\u6216\u5176\u4ed6\u95ee\u9898\u8f6c\u79fb\u8fc7\u6765\uff0c\u5982\u4f55\u8f6c\u79fb\uff1f\u4ece\u5b50\u6811\uff1f\u7075\u5149\u4e00\u95ea\uff01\u8111\u4e2d\u95ea\u73b0\u8fc7\u4e00\u4e2a\u8bbe\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u8fdb\u884c\u51b3\u7b56\u65f6\uff0c\u5982\u679c\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u8ba1\u5165\u7b54\u6848\u3002\n\u5426\u5219\u5c31\u628a\u8fd9\u4e2a\u5b50\u6811\u780d\u6389\u5c31\u53ef\u4ee5\u4e86\uff0c\u975e\u5e38\u5bb9\u6613\u5c31\u53ef\u4ee5\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\nF[u]+=max(0,F[v])\u5176\u4e2dv\u4e3au\u7684\u513f\u5b50\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u641e\u5b9a\u4e86\n\n### \u5b9e\u73b0\n\n\u4f7f\u7528dfs\u8fdb\u884c\u66f4\u65b0\uff0c\u662f\u975e\u5e38\u7b80\u5355\u7684\u6280\u5de7\n\n\u6ce8\u610f\u51e0\u70b9\u7ec6\u8282\uff1a\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u968f\u65f6\u66f4\u65b0\u7b54\u6848\uff0c\u4e0d\u7136\u53ef\u80fd\u65e0\u6cd5\u4fdd\u8bc1\u89e3\u7684\u6b63\u786e\u6027\u3002\u4e0d\u8981\u8d70\u56de\u81ea\u5df1\u7684\u7236\u8282\u70b9\u56e0\u4e3a\u53cc\u5411\u52a0\u8fb9\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=16000;\n\nint  cnt,n,tp[maxn],f[maxn],head[maxn],ans=-1000000;\nstruct edge{\n\tint next,to;\n}e[maxn<<1];\n\ninline int read(){\n\tint f=1,x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\t\n\t}\n\treturn x*f;\n}\n\ninline void add(int u,int v){\n\te[++cnt].next=head[u];\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\n\ninline void dfs(int now,int fa){\n\tfor(int i=head[now];i;i=e[i].next){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs(v,now);\n\t\tf[now]+=max(0,f[v]);\n\t}\n\tans=max(ans,f[now]\uff09;\n}\n\nint main(){\n\tint qwq,qaq;\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=read();\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tqwq=read();\n\t\tqaq=read();\n\t\tadd(qwq,qaq);\n\t\tadd(qaq,qwq\uff09;\n\t}\n\tdfs(1,0);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u590d\u5236\u6b64\u4efd\u4ee3\u7801\uff0c\u5426\u5219\u4f60\u4f1a\u76f4\u63a5CE",
        "postTime": 1571062902,
        "uid": 85799,
        "name": "wyqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "# **\u4e09\u4e2a\u70b9MLE || \u4e24\u4e2a\u70b9MLE\uff0c\u4e00\u4e2awa\u7684\uff0c\u770b\u8fc7\u6765\uff01\uff01\uff01**\n## \u7206\u4e86\u6570\u7ec4\uff0c\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff01\uff01\u6240\u4ee5\u8981\u5b58\u8fb9\u8981\u5f00\u53cc\u500d\u5927\u5c0f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5AC\u8fd9\u9053\u6c34\u9898\u4e86\n## \u8fd9\u9898\u662f\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u6811\u578bdp\u6a21\u677f \uff0c\u7136\u540e\u624b\u73a9\u4e00\u4e0b\u53d1\u73b0\u5176\u5b9e\u54ea\u4e2a\u8282\u70b9\u8f6c\u5316\u4e3a\u6709\u6839\u6811\u90fd\u4e00\u6837 ~ \n\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a \u7ed9\u4e00\u68f5 n \u4e2a\u70b9\u7684\u6811\uff0c\u4ee5 1 \u53f7\u70b9\u4e3a\u6839\uff0c\u6c42\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n\n\u72b6\u6001\u8868\u793a\uff1a f[u] \u8868\u793a\u4ee5u\u4e3a\u6839\u4e14\u5305\u542bu\u7684\u6700\u5927\u5b50\u6811\u548c\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1af[u]+=max(0,f[v]); (v\u4e3au\u7684\u5b69\u5b50) \u7f8e\u4e3d\u6307\u6570\u5c0f\u4e8e0\u7684\u5b50\u6811\u53ef\u4e0d\u9009\uff0c\u6240\u4ee5\u4e0e0\u6bd4\u8f83\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio> // \u6811\u4e0adp\n#include <iostream>\nusing namespace std;\nconst int MAXN = 16005;\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\n{\n    int to, nxt;\n} edge[MAXN<<1];\ninline int read()//\u5feb\u8bfb\n{\n    int u = 0, f = 1;\n    char c = getchar();\n    for (; !isdigit(c); c = getchar())\n        if (c == '-')\n            f = -1;\n    for (; isdigit(c); c = getchar())\n        u = (u << 3) + (u << 1) + c - '0';\n    return u * f;\n}\nint n, cnt, val[MAXN], head[MAXN], f[MAXN], ans = -2147483647;\ninline void addedge(int u, int v)//\u56e0\u4e3a\u662f\u6811\u6240\u4ee5\u8981\u8fde\u53cc\u8fb9\n{\n    edge[++cnt].nxt = head[u];\n    edge[cnt].to = v;\n    head[u] = cnt;\n    edge[++cnt].nxt = head[v];\n    edge[cnt].to = u;\n    head[v] = cnt;\n}\ninline int dfs(int u, int fa)//\u6811\u4e0adp\n{\n    f[u] = val[u];\n    for (register int i = head[u]; i; i = edge[i].nxt)\n        if (edge[i].to != fa)\n            f[u] += dfs(edge[i].to, u);\n    ans = max(ans, f[u]);\n    return max(0, f[u]);\n}\nint main()\n{\n    n = read();\n    for (register int i = 1; i <= n; ++i)\n        val[i] = read();//\u8bfb\u5165\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\n    for (register int i = 1; i < n; ++i)\n        addedge(read(), read());//\u8fde\u8fb9\n    dfs(1, 0);//\u4ece\u6839\u8282\u70b9\u5f00\u59cbdp\n    printf(\"%d\", ans);\n}\n```\n",
        "postTime": 1558188423,
        "uid": 140659,
        "name": "\u6e3a\u5c0f\u7684Mastar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1122 \u3010\u6700\u5927\u5b50\u6811\u548c\u3011"
    },
    {
        "content": "### \u770b\u4e00\u4e0b\u6837\u4f8b\uff0c\u6784\u5efa\u6811\n![](https://cdn.luogu.com.cn/upload/pic/53009.png)\n\n### \u89e3\u9898\u601d\u8def\n\n\u201c\u4e0a\u9762\u5171\u8fde\u6709N\u6735\u82b1\uff0c\u5171\u6709N-1\u6761\u679d\u5e72\u5c06\u82b1\u513f\u8fde\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u672a\u4fee\u526a\u65f6\u6bcf\u6735\u82b1\u90fd\u4e0d\u662f\u5b64\u7acb\u7684\u201d\n\u5b83\u662f\u4e00\u68f5\u65e0\u6839\u6811\u3002\u4ee5\u4efb\u610f\u9876\u70b9\u4e3a\u6839\uff0c\u6df1\u641c\u8fd9\u68f5\u6811\u3002\n\u5bf9\u4e8e\u67d0\u7236\u4eb2\u8282\u70b9\uff0c\u5982\u679c\u5b50\u6811\u5e78\u798f\u6307\u6570\u4e3a\u6b63\uff0c\u90a3\u4e48\u6709\u7528\uff0c\u7559\u7740\n                                   \u5982\u679c\u5b50\u6811\u5e78\u798f\u6307\u6570\u4e3a\u8d1f\uff0c\u90a3\u4e48\u65e0\u7528\uff0c\u526a\u6389\n\n\u8bbef[x]\u4e3a\uff0c\u4ee5x\u8282\u70b9\u4e3a\u6839\u7684\u8fd9\u68f5\u6811\uff0c\u4e14\u6839\u8282\u70b9x\u5fc5\u9009\u7684\uff0c\u6700\u5927\u5e78\u798f\u6307\u6570\n\u90a3\u4e48 f[x] = r[x] + sum( max(0, f[son] ) )  , son\u662fx\u7684\u513f\u5b50\u8282\u70b9\n\n\u76ee\u6807 max(f[i]) \n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint a[16010]; \nvector<int> son[16010];\nbool vis[16010]={0};\nint ans;\nint dp[16010];\nvoid dfs(int fa){\n\tvis[fa]=true;\n\tdp[fa]=a[fa];\n\tfor(int i=0;i<son[fa].size();i++){\n\t\tif(!vis[son[fa][i]]){\n\t\t\tdfs(son[fa][i]);\n\t\t\tif(dp[son[fa][i]]>0)dp[fa]+=dp[son[fa][i]];\n\t\t}\n\t}\n\tif(ans<dp[fa])ans=dp[fa];\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)cin>>a[i]; \n\tans=a[1];\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;cin>>a>>b;\n\t\tson[a].push_back(b);\n\t\tson[b].push_back(a); \n\t}\n\tdfs(1);\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1551495750,
        "uid": 84497,
        "name": "Tritiums",
        "ccfLevel": 4,
        "title": "P1122 \u6700\u5927\u5b50\u6811\u548c"
    }
]