[
    {
        "content": "\u9898\u76ee\u5730\u5740\uff1a[P5304 [GXOI/GZOI2019]\u65c5\u884c\u8005](https://www.luogu.org/problemnew/show/P5304)\n\n\u8fd9\u91cc\u662f\u5b98\u65b9\u9898\u89e3\n\n> \u4e00\u4e2a\u56fe $n$ \u70b9 $m$ \u6761\u8fb9\uff0c\u91cc\u9762\u6709 $k$ \u4e2a\u7279\u6b8a\u70b9\uff0c\u95ee\u8fd9 $k$ \u4e2a\u70b9\u4e4b\u95f4\u4e24\u4e24\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f\n> $n \\leq 10^5, m \\leq 5 * 10 ^5$\n\n\u5047\u8bbe\u6211\u4eec\u628a\u7279\u6b8a\u70b9\u5206\u6210 $A,B$ \u4e24\u4e2a\u96c6\u5408\uff0c\u65b0\u5efa $s$ \u8fde $A$ \u96c6\u5408\u7684\u6240\u6709\u70b9\uff0c\u8fb9\u6743 $0$ \uff0c\u65b0\u5efa $t$ \u8fde\u63a5 $B$ \u96c6\u5408\u91cc\u7684\u6240\u6709\u70b9\uff0c\u8fb9\u6743 $0$ \uff0c\u90a3\u4e48 $s$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u5c31\u662f $A,B$ \u96c6\u5408\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e $k$ \u4e2a\u7279\u6b8a\u70b9\uff0c\u6211\u4eec\u679a\u4e3e\u4e8c\u8fdb\u5236\u91cc\u7684\u7b2c $i$ \u4f4d\uff0c\u628a\u4e8c\u8fdb\u5236\u7b2c $i$ \u4f4d\u662f $0$ \u7684\u70b9\u653e\u5728 $A$ \uff0c $1$ \u7684\u70b9\u653e\u5728 $B$ \uff0c\u7528\u4ee5\u4e0a\u65b9\u6cd5\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u8dd1 $log\\ n$ \u6b21\u6700\u77ed\u8def\u4e4b\u540e\uff0c\u6240\u6709\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\n\n\u539f\u7406\u662f\uff0c\u5047\u8bbe $k$ \u4e2a\u7279\u6b8a\u70b9\u91cc\u6700\u8fd1\u7684\u662f $x$ \u548c $y$ \uff0c\u90a3\u4e48 $x$ \u548c $y$ \u4e00\u5b9a\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4ed6\u4eec\u80af\u5b9a\u5728\u90a3\u6b21\u5206\u7ec4\u7684\u65f6\u5019\u88ab\u653e\u8fdb\u4e86\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u4ece\u800c\u80af\u5b9a\u88ab\u7b97\u8fdb\u4e86\u6700\u540e\u7684\u7b54\u6848\u4e4b\u4e2d\u6700\u77ed\u8def\u3002\n```cpp\n#include <bits/stdc++.h>\n\nconst int MAXN = 100010, MAXM = 700010;\n\nstruct Edge {\n\tint y, z;\n\tEdge *next;\n}*a[MAXN], POOL[MAXM], *ptr, *back[MAXN];\n\nvoid AddEdge(int x, int y, int z) {\n\tEdge *tmp = ptr++;\n\ttmp->y = y;\n\ttmp->z = z;\n\ttmp->next = a[x];\n\ta[x] = tmp;\n}\n\nint n, nodes[MAXN], k, s, t;\nlong long dis[MAXN];\n\nlong long dijkstra() {\n\tmemset(dis, 0x3f, sizeof(dis));\n\tdis[s] = 0;\n\tstd::priority_queue<std::pair<long long, int> > Q;\n\tQ.push(std::make_pair(0, s));\n\tfor (int i = 1; i < n + 2; i++) {\n\t\twhile (!Q.empty() && dis[Q.top().second] != -Q.top().first) Q.pop();\n\t\tif (Q.empty()) break;\n\t\tint now = Q.top().second;\n\t\tQ.pop();\n\t\tfor (Edge *p = a[now]; p; p = p->next)\n\t\t\tif (dis[p->y] > dis[now] + p->z)\n\t\t\t\tQ.push(std::make_pair(-(dis[p->y] = dis[now] + p->z), p->y));\n\t}\n\treturn dis[t];\n}\n\nint main(int argc, char* argv[]) {\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) {\n\t\tptr = POOL;\n\t\tmemset(a, 0, sizeof a);\n\t\tint m;\n\t\tscanf(\"%d%d%d\", &n, &m, &k);\n\t\twhile (m--) {\n\t\t\tint x, y, z;\n\t\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\t\tAddEdge(x, y, z);\n\t\t}\n\t\tfor (int i = 1; i <= k; i++) scanf(\"%d\", nodes + i);\n\n\t\tlong long Ans = ~0ull>>1;\n\t\ts = n + 1, t = n + 2;\n\t\tfor (int i = 0; (1 << i) <= k; i++) {\n\t\t\tEdge *backup = ptr;\n\t\t\tmemcpy(back, a, (sizeof a[0]) * (n + 3));\n\t\t\tfor (int j = 1; j <= k; j++) if (j & (1 << i)) {\n\t\t\t\t\tAddEdge(s, nodes[j], 0);\n\t\t\t\t} else {\n\t\t\t\t\tAddEdge(nodes[j], t, 0);\n\t\t\t\t}\n\t\t\tAns = std::min(Ans, dijkstra());\n\t\t\tptr = backup;\n\t\t\tmemcpy(a, back, (sizeof a[0]) * (n + 3));\n\t\t\tfor (int j = 1; j <= k; j++) if (j & (1 << i)) {\n\t\t\t\t\tAddEdge(nodes[j], t, 0);\n\t\t\t\t} else {\n\t\t\t\t\tAddEdge(s, nodes[j], 0);\n\t\t\t\t}\n\t\t\tAns = std::min(Ans, dijkstra());\n\t\t\tptr = backup;\n\t\t\tmemcpy(a, back, (sizeof a[0]) * (n + 3));\n\t\t}\n\t\tprintf(\"%lld\\n\", Ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1555504334,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P5304 [GXOI/GZOI2019]\u65c5\u884c\u8005"
    },
    {
        "content": "~~\u6211\u4e5f\u5f88\u597d\u5947\u5927\u5bb6\u7684\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u591a\u4e86\u4e00\u4e2a$log$\u3002\u3002\u3002~~\n\n\u4e00\u53e5\u8bdd\u9898\u610f:\u6709\u5411\u56fe$G$\u4e2d$|V| = n$,$|E| = m$,\u7ed9\u5b9a\u4e00\u4e2a\u7279\u6b8a\u70b9\u70b9\u96c6$S,|S| = k(p_1,p_2, ...,p_k)$\n\n\u6c42$min(dis(p_i,p_j)) (i \u2260 j)$.\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u66b4\u529b\u7684$O(Tnlognlogk)$\u7684\u65b9\u6cd5~~\u8fd9\u4e5f\u5c31\u662f\u51fa\u9898\u4eba\u5f00$5000ms$\u7684\u539f\u56e0~~:\n\n$i \u2260 j$ \u5f53\u4e14\u4ec5\u5f53$i$\u548c$j$\u81f3\u5c11\u6709\u4e00\u4f4d\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u3002\n\n\u679a\u4e3e\u4e0d\u540c\u7684\u4e8c\u8fdb\u5236\u4f4d,\u6bcf\u6b21\u628a$k$\u4e2a\u70b9\u5206\u6210$S_0,S_1$\u4e24\u4e2a\u96c6\u5408\u8dd1$Dijsktra$\n\n\u6c42$log_2k$\u6b21\u6700\u77ed\u8def\u5e76\u53d6$min$.\n\n\u7136\u800c\u8fd9\u9898\u786e\u5b9e\u6709$O(Tnlogn)$\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148,\u6211\u4eec\u6c42\u51fa$f[i],g[i]$\u4e3a$i$\u5230\u67d0\u4e2a\u5173\u952e\u70b9/\u67d0\u4e2a\u5173\u952e\u70b9\u5230$i$\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \n\n\u5199\u6210\u5f0f\u5b50\u5c31\u662f\n\n$f[i] = min(dis_{min}(i,p_j))$\n\n$g[i] = min(dis_{min}(p_j,i))$\n\n\u6ce8\u610f$dis_{min}(i,p_j)$\u548c$dis_{min}(p_j,i)$\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u4e1c\u897f,\u56e0\u4e3a**\u8fd9\u662f\u4e00\u5f20\u6709\u5411\u56fe\u3002**\n\n\u540c\u65f6\u6211\u4eec\u6c42\u51fa$From[i],To[i]$\u8868\u793a$f[i],g[i]$\u4e2d $dis_{min}(i,p_j)$\u548c$dis_{min}(p_j,i)$\u5bf9\u5e94\u7684$p_j$\n\n\u5373$f[i]$\u7684\u6700\u77ed\u8def\u8d70\u5230\u4e86\u62ff\u91cc,$g[i]$\u7684\u6700\u77ed\u8def\u662f\u4ece\u54ea\u91cc\u6765\u7684\u3002\n\n\u4e0a\u8ff0\u5185\u5bb9\u53ea\u8981\u505a\u4e24\u6b21$Dijsktra$,\u4e00\u6b21\u5728$G$\u4e0a\uff0c\u4e00\u6b21\u5728$G$\u7684\u53cd\u56fe\u4e0a\u3002\n\n\u590d\u6742\u5ea6$O(nlogn)$\n\n\u8003\u8651\u679a\u4e3e\u4e00\u6761\u8fb9$(u,v,w),$\n\n\u5982\u679c$From[u] \u2260 To[v],$\u90a3\u4e48\u5c31\u7528$g[u] + f[v] + w$\u6765\u66f4\u65b0\u7b54\u6848\u3002\n\n\u518d\u679a\u4e3e\u70b9$u,$\n\n\u5982\u679c$From[u] \u2260 To[u],$\u90a3\u4e48\u5c31\u7528$g[u] + f[u]$\u6765\u66f4\u65b0\u7b54\u6848\u3002\n\n\u505a\u5b8c\u4e86\u3002\n\n\u8fd9\u6837\u505a\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\n\n\u5f15\u7528\u4e00\u4e0b\u67d0\u795e\u7287\u7684\u89e3\u91ca\uff1a\n\n\"\u4e0d\u96be\u8bc1\u660e\uff0c\u5bf9\u4e8e\u6e90\u70b9 $i$\uff0c\u7531 $i$ \u62d3\u5c55\u7684\u70b9 $j$ \u4ee5\u53ca\u4e0e $j$ \u76f8\u90bb\u4e14\u4e0d\u7531$i$ \u62d3\u5c55\u7684\u70b9 $k$\uff0c \u5982\u679c $i$ \u7684\u6700\u4f18\u8def\u5f84\u4ece $j$ \u8d70\u5230\u4e86 $k$\uff0c\u90a3\u4e48\u8d70\u5230\u62d3\u5c55 $k$ \u7684\u6e90\u70b9\u662f\u6700\u4f18\u7684\u3002\u56e0\u6b64\u8fd9\u4e2a\u505a\u6cd5\u662f\u6b63\u786e\u7684\u3002\"\n\n\u5bf9\u4e8e\u4e00\u6761\u6700\u77ed\u7684\u8def\u5f84$x -> y$,\u5047\u8bbe\u5176\u8def\u5f84\u4e0a\u6ca1\u6709\u8fb9$(u,v)$\u6ee1\u8db3$From[u] \u2260 x,To[v] \u2260 y$ \n\n\u5f88\u663e\u7136\u7684\u4e00\u70b9\u5c31\u662f$f[v] <= dis_{min}(v,y)$\u4e14$g[u] <= dis_{min}(x,u)$\n\n\u5982\u679c\u6b64\u65f6$From[v] \u2260 To[u],$\u90a3\u4e48\u5b58\u5728\u6bd4$x->y$\u4e0d\u52a3\u7684\u89e3\u88ab\u66f4\u65b0\u4e86\uff0c\u5bf9$ans$\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u5982\u679c$From[v]$\u548c$To[u]$\u90fd$\u2260x,y$\uff0c\u90a3\u4e48\u5982\u679c\u5b83\u4eec\u76f8\u7b49\uff0c\n\n\u4ee4$z = From[v]$,\u8bf4\u660e$dis_{min}(z,v) + w + dis_{min}(u,x)$\u4e5f\u53ef\u4ee5\u66f4\u65b0$ans$,\n\n\u4e14$dis_{min}(x,u) >= dis_{min}(z,u), dis_{min}(v,y) >= dis_{min}(v,z)$\n\n\u5982\u679c\u5b58\u5728$>1$\u4e2a\u8fd9\u6837\u7684\u70b9$z$,\u90a3\u4e48\u4e00\u5b9a\u6709\u8def\u5f84$z_1->z_2$\u6bd4$x ->y$\u4e0d\u52a3\u4e14\u88ab\u66f4\u65b0\u5230\uff0c\u5bf9$ans$\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u5982\u679c\u53ea\u5b58\u5728\u4e00\u4e2a\u8fd9\u6837\u7684$z$,\u5c31\u56de\u5230\u4e86\u4e0a\u9762\u4e00\u79cd\u60c5\u51b5\uff0c\u8981\u4e48$x->y$\u53ea\u6709\u4e00\u6761\u8fb9(\u663e\u7136\u4e0d\u53ef\u80fd) \uff0c\u8981\u4e48\u5c31\u4e00\u5b9a\u6709$(u,v)$\u6ee1\u8db3$From[v] \u2260 To[u].$\n\n\u518d\u8ba8\u8bba$From[v] = To[u] = x/y$\u7684\u60c5\u51b5\u3002\n\n\u7531\u4e8e\u8def\u5f84\u957f\u4e3a\u6b63\u6574\u6570\uff0c\u6240\u4ee5\u5982\u679c$From[v] = To[u] = x/y$,\n\n\u90a3\u4e48\u627e\u5230\u5b83\u5728$x->y$\u4e2d\u7684\u524d/\u540e\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u4e00\u5b9a\u6709$From[v] \u2260 To[u].$\n\n\u8bc1\u6bd5\u3002\n\n\u90a3\u4e48\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\ninline LL read(){\n    LL x = 0,f = 1; char c = getchar();\n    while (c != EOF && !isdigit(c)) {if (c == '-') f = -1;c = getchar();}\n    while (isdigit(c)) {x = x * 10 + c - '0';c = getchar();}\n    return x * f;\n}\ninline void write(LL x){\n    if (x < 0) putchar('-'),x = -x;\n    if (x > 9) write(x/10); putchar(x%10+'0');\n}\ninline void writeln(LL x){ write(x),putchar('\\n'); }\n\nconst int N = 100005,M = 500005;\nint Fr[M<<2],To[M<<2],Ne[M<<2],Dis[M<<2],He1[N],He2[N],_k;\ninline void add(int *He,int x,int y,int z){\n\t++_k,Fr[_k] = x,To[_k] = y,Dis[_k] = z,Ne[_k] = He[x],He[x] = _k;\n}\n\nint T,n,m,k,p[N];\n\nconst LL INF = 1ll<<60;\n\nint f1[N],f2[N];\nLL dis1[N],dis2[N];\n\nstruct Node{\n\tint x; LL d;\n\tNode (int xx = 0,LL dd = 0){ x = xx,d = dd; }\n\tinline bool operator < (Node x) const{ return d > x.d; }\n}t;\n\npriority_queue<Node>Heap;\n\n\n\nvoid Dij_1(){ //dis1 : p[i] -> x\n\tint i;\n\twhile (!Heap.empty()) Heap.pop();\n\tfor (i = 1; i <= n; ++i) dis1[i] = INF,f1[i] = -1;\n\tfor (i = 1; i <= k; ++i) dis1[p[i]] = 0,f1[p[i]] = p[i],Heap.push(Node(p[i],0));\n\tint p,x;\n\twhile (!Heap.empty()){\n\t\tt = Heap.top(); Heap.pop();\n\t\tif (t.d == dis1[t.x])\n\t\tfor (p = He1[t.x]; p ; p = Ne[p]) if (dis1[To[p]] > dis1[t.x] + Dis[p]){\n\t\t\tdis1[To[p]] = dis1[t.x] + Dis[p];\n\t\t\tf1[To[p]] = f1[t.x];\n\t\t\tHeap.push(Node(To[p],dis1[To[p]]));\n\t\t}\n\t}\n}\n\nvoid Dij_2(){ //dis2 : x -> p[i]\n\tint i;\n\tfor (i = 1; i <= n; ++i) dis2[i] = INF,f2[i] = -1;\n\tfor (i = 1; i <= k; ++i) dis2[p[i]] = 0,f2[p[i]] = p[i],Heap.push(Node(p[i],0));\n\tint p,x;\n\twhile (!Heap.empty()){\n\t\tt = Heap.top(); Heap.pop();\n\t\tif (t.d == dis2[t.x])\n\t\tfor (p = He2[t.x]; p ; p = Ne[p]) if (dis2[To[p]] > dis2[t.x] + Dis[p]){\n\t\t\tdis2[To[p]] = dis2[t.x] + Dis[p];\n\t\t\tf2[To[p]] = f2[t.x];\n\t\t\tHeap.push(Node(To[p],dis2[To[p]]));\n\t\t}\n\t}\n}\n\nLL ans;\nint main(){\n\tint i,u,v,w;\n\tT = read();\n\twhile (T--){\n\t\t_k = 0;\n\t\tmemset(He1,0,sizeof(He1));\n\t\tmemset(He2,0,sizeof(He2));\n\t\t\n\t\tn = read(),m = read(),k = read();\n\t\twhile (m--){ u = read(),v = read(),w = read(); if (u^v) add(He1,u,v,w),add(He2,v,u,w); }\n\t\tfor (i = 1; i <= k; ++i) p[i] = read();\n\t\tDij_1();\n\t\tDij_2();\n\t\tans = INF;\n\t\tfor (i = 1; i <= n; ++i) if (f1[i] ^ f2[i]) ans = min(ans,dis1[i] + dis2[i]);\n\t\tfor (i = 1; i <= _k; i += 2) if (f1[Fr[i]]^f2[To[i]])\n\t\t\tans = min(ans,dis1[Fr[i]] + dis2[To[i]] + Dis[i]);\n\t\twriteln(ans);\n\t}\n    return 0;\n}\n```",
        "postTime": 1555687234,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "## \u66b4\u529b\u78be\u6807\u7b97\uff0c$n^2$\u8fc7\u767e\u4e07\uff01\n\n\u672c\u6bd2\u7624\u53c8\u4e00\u6b21\u6df1\u523b\u8ba8\u8bba\u4e86\u4e00\u4e0b\uff0c\u5f53\u6211\u4eec\u5728\u8003\u573a\u4e0a\u771f\u7684\u4e0d\u77e5\u9053\u6b63\u89e3\u600e\u4e48\u6253\u65f6\uff0c**\u5982\u4f55\u62ff\u66b4\u529b\u5f97\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u5206\u6570\u3002**~~**\uff08AC\uff09**~~~~**\uff08\u6700\u4f18\u89e3\u7b2c\u4e00\u4e2a\uff09**~~\n\n\u7531\u4e8e\u662f\u66b4\u529b\uff0c\u6240\u4ee5\uff0c\u6839\u672c\u6ca1\u6709\u4efb\u4f55\u7684\u5947\u5f02\u7b97\u6cd5\u5728\u91cc\u9762\u3002\n\n\u4ec0\u4e48\u4e24\u904d$dijkstra$\u67d3\u8272......\u8fd9\u662f\u4ec0\u4e48\uff0c\u6211\u600e\u4e48\u5b8c\u5168\u4e0d\u77e5\u9053\uff0c\u4f60\u4eec\u600e\u4e48\u4ec0\u4e48\u90fd\u4f1a\u554a$orz$\u3002\n### \u6734\u7d20\uff1a\n\u6211\u4eec\u53ef\u4ee5\u5728\u8bfb\u5b8c\u9898\u5c31\u9a6c\u4e0a\u5f97\u51fa\u6211\u4eec\u7684\u6700\u6734\u7d20\u7684\u66b4\u529b\uff0c\u5bf9\u4e8e$k$\u4e2a\u611f\u5174\u8da3\u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u904d$dijkstra$\u6c42\u6700\u77ed\u8def\uff0c\u518d$n^2$\u679a\u4e3e\u627e\u5230\u6700\u8fd1\u7684\u70b9\u5bf9\u5373\u4e3a\u7b54\u6848\u3002**\u590d\u6742\u5ea6$O(T*n^2logn)$\uff0c\u671f\u671b\u5f97\u5206$20pts$\u3002**\n\n### \u4f18\u5316\uff1a\n\n\u4f46\u662f\u6211\u4eec\u5728\u7a0d\u7a0d\u601d\u8003\u4e4b\u540e\u5c31\u4f1a\u53d1\u73b0\uff0c\u8fd9\u6837\u597d\u8822\u5440\uff01\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e24\u4e24\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u7684\u90a3\u4e00\u5bf9\uff0c**\u90a3\u4e48\u6211\u4eec\u627e\u5230\u6bcf\u4e2a **\u201c\u611f\u5174\u8da3\u201d\u7684\u70b9** \u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u4e0d\u5c31\u53ef\u4ee5\u4e86**\uff0c\u5e72\u561b\u8981\u7ba1\u90a3\u4e9b\u867d\u7136\u4e5f **\u201c\u611f\u5174\u8da3\u201d**\uff0c\u4f46\u662f\u79bb\u81ea\u5df1\u5f88\u8fdc\u7684\u70b9\u3002\n\n#### \u6240\u4ee5\uff0c\u5f97\u5230\u6211\u4eec\u5bf9\u66b4\u529b\u7684\u4f18\u5316\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u53ea\u677e\u5f1b\u5230**\u627e\u5230\u53e6\u4e00\u4e2a\u4e5f\u201c\u611f\u5174\u8da3\u201d\u7684\u70b9**\u3002\n\n\u4e4b\u540e\u76f4\u63a5$return$\uff0c\u518d\u5f80\u4e0b\u7684\u677e\u5f1b\u64cd\u4f5c\u4e0d\u53ef\u80fd\u6bd4\u5f53\u524d\u7b54\u6848\u66f4\u4f18\u79c0\u3002\n\n\u800c\u8fd9\u91cc\u6211\u4eec\u6b63\u597d\u5584\u7528\u4e86$dijkstra$\u7684\u4f18\u7f8e\u7684\u6027\u8d28\uff0c$dijkstra$\u7b97\u6cd5\u7684\u5806\u4f18\u5316\u6bcf\u6b21\u53d6\u7684\u662f\u5806\u9876\u5143\u7d20\uff0c\u8fd9\u4e2a\u5143\u7d20\u7684$dis[u]$\u662f\u5f53\u524d\u961f\u5217\u91cc\u6700\u5c0f\u7684\uff0c\u6240\u4ee5$dis[u]$\u5c0f\u7684\u70b9\u4e00\u5b9a\u4f1a\u5148\u88ab\u62ff\u51fa\u6765\u7528\u800c\u5148\u51fa\u961f\uff0c\u5e76\u4e14\u53ea\u4f1a\u8fdb\u961f\u4e00\u6b21\u3002\n\n\u6240\u4ee5\u4e00\u65e6**\u7b2c\u4e00\u4e2a**\u4e5f\u611f\u5174\u8da3\u7684\u70b9\u51fa\u961f\uff0c\u90a3\u4e2a\u70b9\u7684$dis[u]$\u5df2\u7ecf\u786e\u5b9a\uff0c\u5e76\u4e14\u662f\u6240\u6709\u611f\u5174\u8da3\u7684\u70b9\u4e2d\uff0c\u79bb\u5f53\u524d\u8d77\u70b9**\u6700\u8fd1**\u7684\u3002\n\n### \u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n#### \u90a3\u4e48\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7384\u5b66\u3002\n\n\u8fd9\u4e2a\u590d\u6742\u5ea6\u6211\u4eec\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u770b\u5230\uff0c\u5728\u6bcf\u904d$dijkstra$\u7684\u590d\u6742\u5ea6\u662f$\u03a9(1)$\u7684\uff0c\u5373\u4e3a\u6700\u4f18\u60c5\u51b5\u4e0b\u627e\u5230\u7b2c\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5$return$\u3002**~~\uff08\u8138\u8981\u6709\u591a\u767d\uff09~~** \u6b64\u65f6\u6bcf\u6b21\u7684**\u8fd0\u7b97\u590d\u6742\u5ea6\u5c45\u7136\u5c0f\u4e8e\u4e86\u8bfb\u5165\u590d\u6742\u5ea6.....** \u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f$\u03a9(T*m)$\uff0c$m$\u662f\u56e0\u4e3a\u8bfb\u5165......\n\n\u800c\u6bcf\u904d$dijkstra$\u7684\u6700\u574f\u590d\u6742\u5ea6\u53c8\u662f\u662f$O(nlogn)$\u7684\uff0c\u90a3\u4e48**\u7406\u8bba\u4e0a\u7684\u6700\u574f\u60c5\u51b5\u4e0b**\uff0c\u590d\u6742\u5ea6\u662f\u548c\u66b4\u529b\u4e00\u6837\u7684\uff0c$O(T*n^2logn)$\uff0c\u4f46\u662f\u6211\u4eec\u8003\u8651\u5230\u4ee5\u4e0b\u4e00\u4e9b**\u6570\u636e\u7684\u5c40\u9650\u6027\uff1a**\n\n- \u6bcf\u904d\u8bbf\u95ee\u5230\u7b2c $n-k$ \u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u5373\uff1a\u628a\u6240\u6709\u7684\u4e0d\u611f\u5174\u8da3\u7684\u70b9\u90fd\u8bbf\u95ee\u8fc7\u4e86\u3002\u6b64\u65f6\u4e00\u5b9a\u80fd\u627e\u5230\u4e00\u4e2a\u611f\u5174\u8da3\u7684\u70b9\u3002\u800c\u8fd9\u79cd\u60c5\u51b5\u624d\u662f\u771f\u7684**\u6700\u574f\u60c5\u51b5**\u3002\n\n- \u5047\u5982\u6211\u4eec\u6784\u5efa\u51fa\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6309\u7167\u4e0a\u9762\u7684\u60c5\u51b5\u8ba9\u5b83\u9700\u8981\u628a\u6240\u6709\u7684\u4e0d\u611f\u5174\u8da3\u7684\u70b9\u90fd\u8bbf\u95ee\u4e00\u904d\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5f53\u524d\u70b9\u786e\u5b9e\u662f\u4e00\u4e2a $(n-k)*log(n-k)$\u7684\u590d\u6742\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u5176\u4ed6\u7684\u70b9\u53bb\u518d\u8dd1$dijkstra$\u7684\u65f6\u5019**\u5f88\u96be**\u518d\u8dd1\u5230\u8fd9\u4e2a\u6700\u574f\u590d\u6742\u5ea6\u3002\n\n\u6240\u4ee5\u5b9e\u9645\u7406\u8bba\u6700\u574f\u590d\u6742\u5ea6\u662f$O(T*(n-k)*log(n-k)*k)$\u7684\uff0c\u5f53\u7531\u57fa\u672c\u4e0d\u7b49\u5f0f\uff1a$n-k==k$ \u65f6\u53d6\u5230\u6700\u5927\u503c\u4e3a$O(T*n^2/4*log(n/2))$\uff0c\u6b64\u65f6\u786e\u5b9e\u662f\u8fc7\u4e0d\u4e86\u7684\u4e86\u3002\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u4f46\u662f\u8fd9\u4e2a\u6570\u636e\u786e\u5b9e\u5f88\u96be\u6784\u9020\uff0c\u51fa\u9898\u4eba\u5c31\u7b97\u6784\u9020\u4e5f\u4e0d\u53ef\u80fd\u902010\u7ec4\u3002\u4e8e\u662f\u6211\u4eec\u671f\u671b\u5f97\u5206$80pts$+.\n\n\u800c\u5b9e\u9645\u4e0a$AC$\u800c\u4e14\u8dd1\u7684\u98de\u5feb\uff0c\u628a $cin$ \u6362\u6210\u5feb\u8bfb\u4e4b\u540e\u5c31\u76f4\u63a5\u6210\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u4e2a\uff0c\u800c\u4e14\u6bd4\u7b2c\u4e8c\u540d\u8fd8\u5feb\u4e86\u8fd11\u500d\u3002\u3002\u3002\u3002\n\n#### \uff08\u5982\u679c\u662f\u7701\u9009\u539f\u6570\u636e\u7684\u8bdd\uff0c\u5927\u4f6c\u4eec\u653e\u8fc7\u6211\u5427\u4e0d\u8981\u6765$hack$\u4e86\uff09\n\n\u8d34\u4e00\u4e2a\u6ca1\u6709\u5feb\u8bfb\u7684\n### $code:$\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+9,maxm=5e5+9;\nstruct edge{\n    int to,next,w;\n}e[maxm];\nint cnt,last[maxn];\ninline void add(int u,int v,int w){\n    cnt++;\n    e[cnt].to=v;\n    e[cnt].next=last[u];\n    last[u]=cnt;\n    e[cnt].w=w;\n}\nlong long dis[maxn];\nstruct node{\n    int u;long long d;\n    bool operator < (const node &rhs) const{\n        return d>rhs.d;\n    }\n};\npriority_queue<node> q;\nbitset<maxn> vis,fl;\nint n,m,k;\nlong long dij(int st){\n    while(!q.empty()) q.pop();\n    vis.reset();\n    memset(dis,0x3f,sizeof(dis));\n    q.push((node){st,0});dis[st]=0;\n    while(!q.empty()){\n        node fi=q.top();q.pop();\n        int u=fi.u;if(fl[u]&&u!=st) return dis[u];\n        if(!vis[u]){\n            vis[u]=1;\n            for(int i=last[u];i;i=e[i].next){\n                int v=e[i].to,w=e[i].w;\n                if(dis[v]>dis[u]+w){\n                    dis[v]=dis[u]+w;\n                    q.push((node){v,dis[v]});\n                }\n            }\n        }\n    }\n    return 0x3f3f3f3f3f3f3f3f;\n}\nint main(){\n    int T;\n    cin>>T;\n    while(T--){\n        cnt=0;memset(last,0,sizeof(last));\n        fl.reset();\n        cin>>n>>m>>k;\n        for(int i=1,u,v,w;i<=m;i++){\n            scanf(\"%d%d%d\",&u,&v,&w);add(u,v,w);\n        }\n        for(int i=1,u;i<=k;i++){scanf(\"%d\",&u);fl[u]=1;}\n        long long ans=0x3f3f3f3f3f3f3f3f;\n        for(int i=1;i<=n;i++){\n            if(fl[i]) ans=min(dij(i),ans);\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n\n\u548c\u6211\u540c\u673a\u623f\u7684\u5c0f\u4f19\u4f34\u6839\u636e\u8fd9\u4e2a\u601d\u8def\u6bd4\u6211\u5148\u6253\u4e86\u4ee3\u7801\uff0c\u72af\u4e86\u65e0\u6570$ZZ$\u9519\u8bef\u5e76\u4e14\u4f9d\u7136$AC$\u4e86\u3002\n\n### \u4ed6\u5c45\u7136\uff0c\u591a\u7ec4\u6570\u636e \u4e0d\uff01\u6e05 \uff01\u7a7a \uff01\n\n\u7814\u7a76\u4e86\u4e00\u4e0b\u4ed6\u7684\u4ee3\u7801\u4e4b\u540e\u53d1\u73b0\uff0c\u4ed6\u6570\u7ec4\u6bd4\u6570\u636e\u8303\u56f4\u591a\u5f00\u5927\u4e86\u597d\u51e0\u500d\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u53d1\u751f\u4ec0\u4e48\u5177\u4f53\u7684$RE$\u548c$WA$\u9519\u8bef....\n\n#### \u7531\u6b64\u6211\u4eec\u63d0\u51fa\u7b2c\u4e8c\u4e2a\u53e3\u53f7\uff01\uff01\n\n## \u6570\u7ec4\u5f00\u7684\u5927\uff0c\u4e0d\u6e05\u4e5f\u4e0d\u6015\uff01\uff01",
        "postTime": 1555485453,
        "uid": 64611,
        "name": "\u4eba\u6b87\u7269\u5df2\u975e",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u51fa\u9898\u4eba\u5f00\u4e86 $5000ms$\uff1f\n\n\u6b63\u53cd\u8dd1\u4e24\u904d $Dijkstra$ \u67d3\u4e2a\u8272\u53d6\u4e2a $min$ \u5c31\u597d\u4e86\u554a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(Tn\\log n)$\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=100000+10;\nconst int maxm=500000+10;\nconst ll inf=0x3f3f3f3f3f3f3f3f;\t\nint n,m,k,a[maxn],X[maxm],Y[maxm],W[maxm],col[2][maxn],head[maxn],tot;\nll dis[2][maxn],ans;bool vis[maxn],iscity[maxn];\n\nstruct Edge\n{\n\tint to,next,val;\n}e[maxm];\n\nstruct node\n{\n\tll dis;int id;\n\tnode(ll _dis=0,int _id=0):dis(_dis),id(_id){}\n};\ninline bool operator < (const node &a,const node &b)\n{\n\treturn a.dis>b.dis;\n}\n\ninline int read()\n{\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\ninline void addedge(int x,int y,int w)\n{\n\te[++tot].to=y;\n\te[tot].val=w;\n\te[tot].next=head[x];\n\thead[x]=tot;\n}\n\ninline void Dijkstra(ll *dis,int *col)\n{\n\tfor(int i=1;i<=n;i++) dis[i]=inf,vis[i]=0;\n\tpriority_queue<node> pq;\n\tfor(int i=1;i<=k;i++) dis[a[i]]=0,col[a[i]]=a[i],pq.push(node(0,a[i]));\n\twhile(!pq.empty())\n\t{\n\t\tint u=pq.top().id;pq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].val)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].val;\n\t\t\t\tcol[v]=col[u];\n\t\t\t\tpq.push(node(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void solve()\n{\n\tn=read(),m=read(),k=read();\n\tint x,y,w;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=read(),y=read(),w=read();\n\t\tif(x!=y) addedge(x,y,w);\n\t\tX[i]=x;Y[i]=y;W[i]=w;\n\t}\n\tfor(int i=1;i<=k;i++) a[i]=read(),iscity[a[i]]=1;\n\tDijkstra(dis[0],col[0]);\n\tfor(int i=1;i<=n;i++) head[i]=0;\n\ttot=0;\n\tfor(int i=1;i<=m;i++)\n\t\tif(X[i]!=Y[i]) addedge(Y[i],X[i],W[i]);\n\tDijkstra(dis[1],col[1]);\n\tans=inf;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=X[i];y=Y[i];w=W[i];\n\t\tif(col[0][x]&&col[1][y]&&col[0][x]!=col[1][y]) ans=min(ans,dis[0][x]+dis[1][y]+w);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\tfor(int i=1;i<=n;i++) head[i]=iscity[i]=0;\n\ttot=0;\n}\n\nint main()\n{\n\tint T=read();\n\twhile(T--) solve();\n\treturn 0;\n}\n```",
        "postTime": 1555419397,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "[\u672c\u849f\u84bb\u7684Blog](https://www.chnxuzhiyuan.cn/2019/06/03/%E3%80%8CGXOI%20GZOI2019%E3%80%8D%E6%97%85%E8%A1%8C%E8%80%85-Solution/)\n\n### \u9898\u89e3\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u4e00\u5f00\u59cb\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u60f3\u5230\u4e00\u4e2a\u4e71\u641e\u7684\u505a\u6cd5\uff1a\n\n\u5c06$k$\u4e2a\u5173\u952e\u70b9\u968f\u673a\u5206\u6210\u4e24\u534a\uff0c\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9\u5411\u5176\u4e2d\u4e00\u534a\u7684\u6240\u6709\u70b9\u5efa\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\uff0c\u518d\u4ece\u53e6\u4e00\u534a\u5411\u8d85\u7ea7\u6c47\u70b9\u5efa\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\u3002\n\n\u7136\u540e\u7528Dijkstra\u6c42\u51fa\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u77ed\u8def\uff0c\u53d6\u6bcf\u6b21\u6c42\u89e3\u51fa\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u4e3a\u7b54\u6848\u3002\n\n\u8fd9\u6837\u4e00\u6b21\u6c42\u51fa\u6700\u4f18\u89e3\u7684\u6982\u7387\u4e3a$\\frac{1}{4}$\u3002\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c20\u6b21\uff0c\u90a3\u4e48\u6c42\u51fa\u6700\u4f18\u89e3\u7684\u6982\u7387\u4e3a$1-(\\frac{3}{4})^{20}\\approx99.7\\%$\u3002\n\n\u8fd9\u6837AC\u7684\u6982\u7387\u5176\u5b9e\u5df2\u8fd1\u975e\u5e38\u9ad8\u4e86\uff0c\u5982\u679c\u80fd\u4f18\u5316\u5e38\u6570\u7136\u540e\u589e\u5927\u91cd\u590d\u6b21\u6570\uff0c\u90a3\u4e48AC\u7684\u6982\u7387\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u3002\n\n\u5176\u5b9e\u5982\u679c\u60f3\u5230\u4e86\u4e0a\u9762\u4e71\u641e\u7684\u505a\u6cd5\uff0c\u79bb\u6b63\u89e3\u4e5f\u5f88\u8fd1\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5173\u952e\u70b9\u7f16\u53f7\u5728\u4e8c\u8fdb\u5236\u4e2d\u7b2c$i$\u4f4d\u4e0a\u7684\u6570\u5b57\u6765\u5bf9\u8fd9$k$\u4e2a\u5173\u952e\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u4e3a$0$\u7684\u5206\u5728\u4e00\u7ec4\uff0c\u4e3a$1$\u7684\u5206\u5728\u53e6\u4e00\u7ec4\u3002\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u5efa\u56fe\u6c42\u6700\u77ed\u8def\u3002\n\n\u5047\u8bbe\u6700\u4f18\u89e3\u4e2d\u7684\u8d77\u70b9\u4e3a$u$\uff0c\u7ec8\u70b9\u4e3a$v$\uff0c\u90a3\u4e48\u5b83\u4eec\u7f16\u53f7\u5728\u4e8c\u8fdb\u5236\u4e2d\u81f3\u5c11\u6709\u4e00\u4f4d\u4e0d\u540c\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u5b9a\u4f1a\u5728\u67d0\u4e00\u6b21\u5206\u7ec4\u4e2d\u88ab\u5206\u5728\u4e86\u4e0d\u540c\u7684\u7ec4\uff0c\u4ece\u800c\u6c42\u89e3\u51fa\u4e86\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n )$\u3002\n\n\u6ce8\u610f\u7531\u4e8e\u56fe\u662f\u6709\u5411\u7684\uff0c\u6240\u4ee5\u6bcf\u679a\u4e3e\u5230\u4e8c\u8fdb\u5236\u4e2d\u7684\u4e00\u4f4d\u65f6\u5e94\u8fdb\u884c\u4e24\u6b21\u5206\u7ec4\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\ntypedef long long LL;\nconst int maxn=100005,maxm=500005;const LL inf=0x3F3F3F3F3F3F3F3FLL;\nint T,n,m,k,V[maxn];LL ans,dist[maxn];\ninline char nc()\n{\n\tstatic const int S=131072;static char buf[S],*L,*R;\n\treturn L==R&&(R=(L=buf)+fread(buf,1,S,stdin),L==R)?EOF:*L++;\n}\ninline int read()\n{\n\tint ret=0,f=1;char ch=nc();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=nc();}\n\twhile(ch>='0'&&ch<='9'){ret=ret*10+ch-'0';ch=nc();}\n\treturn ret*f;\n}\nstruct Graph\n{\n\tint tot,lnk[maxn],son[maxm],nxt[maxm],w[maxm];\n\tinline void Clear(){tot=0;memset(lnk,0,sizeof(lnk));}\n\tinline void add_e(int x,int y,int z){tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;}\n}G1,G2;\nstruct Node\n{\n\tint id;LL dis;\n\tbool operator < (const Node& b)const{return dis>b.dis;}\n};\ninline void Dijkstra()\n{\n\tmemset(dist,63,sizeof(dist));\n\tpriority_queue<Node> que;\n\tque.push((Node){n+1,0});\n\tdist[n+1]=0;\n\twhile(!que.empty())\n\t{\n\t\tNode QH=que.top();que.pop();\n\t\tif(QH.id==n+2&&QH.dis<ans) ans=QH.dis;\n\t\tif(QH.dis>dist[QH.id]) continue;\n\t\tdist[QH.id]=QH.dis;\n\t\tfor(int i=G2.lnk[QH.id];i;i=G2.nxt[i])\n\t\t\tif(QH.dis+G2.w[i]<dist[G2.son[i]])\n\t\t\t\tque.push((Node){G2.son[i],QH.dis+G2.w[i]});\n\t}\n}\nint main()\n{\n\tT=read();\n\twhile(T--)\n\t{\n\t\tn=read();m=read();k=read();G1.Clear();G2.Clear();ans=inf;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint a=read(),b=read(),c=read();\n\t\t\tG1.add_e(a,b,c);G2.add_e(a,b,c);\n\t\t}\n\t\tfor(int i=1;i<=k;i++) V[i]=read();\n\t\tfor(int i=0;(1<<i)<=n;i++)\n\t\t{\n\t\t\tG2.tot=G1.tot;\n\t\t\tmemcpy(G2.lnk,G1.lnk,(n+3)*sizeof(int));\n\t\t\tfor(int j=1;j<=k;j++)\n\t\t\t{\n\t\t\t\tif(V[j]&(1<<i)) G2.add_e(n+1,V[j],0);\n\t\t\t\telse G2.add_e(V[j],n+2,0);\n\t\t\t}\n\t\t\tDijkstra();\n\t\t\tG2.tot=G1.tot;\n\t\t\tmemcpy(G2.lnk,G1.lnk,(n+3)*sizeof(int));\n\t\t\tfor(int j=1;j<=k;j++)\n\t\t\t{\n\t\t\t\tif(V[j]&(1<<i)) G2.add_e(V[j],n+2,0);\n\t\t\t\telse G2.add_e(n+1,V[j],0);\n\t\t\t}\n\t\t\tDijkstra();\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1563368547,
        "uid": 42392,
        "name": "\u5f90\u81f4\u8fdc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "\n~~\u6240\u4ee5\u8fd9\u4e2a$5s$\u662fSMG~~\n\n\u66b4\u529b\u662f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u8dd1\u6700\u77ed\u8def,\u7136\u540e\u6709\u4e00\u4e2a\u5f88~~\u62ff\u8863\u670d~~\u5e7c\u7a1a\u7684\u60f3\u6cd5,\u5c31\u662f\u628a\u6240\u6709\u7ed9\u51fa\u7684\u5173\u952e\u70b9\u5f53\u51fa\u53d1\u70b9,\u90fd\u4e22\u5230\u961f\u5217\u91cc,\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u70b9$x$\u67d0\u4e2a\u76f8\u90bb\u7684\u70b9$y$\u662f\u5173\u952e\u70b9,\u5c31\u7528$dis_x+$\u8fb9\u6743$w_i$\u66f4\u65b0\u7b54\u6848.\u611f\u89c9\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684,\u7136\u540e\u8dd1\u4e00\u4e0b\u6837\u4f8b\u4e5f\u5bf9\n\n~~\u4ea4\u4e0a\u53bb\u5c31\u53ef\u4ee5\u83b7\u5f9770'\u7684\u597d\u6210\u7ee9~~\n\n\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u65e0\u6cd5\u5904\u7406,\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u662f\u540c\u4e00\u70b9,\u56e0\u4e3a\u56fe\u4e2d\u53ef\u80fd\u6709\u73af.\u90a3\u4e48\u6211\u4eec\u66f4\u65b0\u7b54\u6848\u5c31\u4e0d\u80fd\u7528\u8d77\u70b9\u662f$y$\u7684\u8def\u5f84\u66f4\u65b0\u7b54\u6848,\u4e8e\u662f\u8003\u8651\u540c\u65f6\u8bb0\u5f55\u4ece\u67d0\u4e2a\u51fa\u53d1\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4ee5\u53ca\u662f\u4ece\u54ea\u4e2a\u51fa\u53d1\u70b9\u8f6c\u79fb\u8fc7\u6765\u7684,\u540c\u65f6\u6c42\u6b21\u77ed\u8def,\u8981\u6c42\u6700\u77ed\u8def\u7684\u8d77\u70b9\u548c\u6b21\u77ed\u8def\u8d77\u70b9\u4e0d\u4e00\u6837,\u90a3\u4e48\u5728\u66f4\u65b0\u7b54\u6848\u65f6,\u5982\u679c\u6700\u77ed\u8def\u8d77\u70b9\u4e0d\u7b49\u4e8e\u7ec8\u70b9\u5c31\u7528\u6700\u77ed\u8def\u66f4\u65b0,\u5426\u5219\u7528\u6b21\u77ed\u8def\n\n```cpp\n// luogu-judger-enable-o2\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<ctime>\n#include<queue>\n#include<map>\n#include<set>\n#define LL long long\n#define db double\n\nusing namespace std;\nconst int N=100000+10,M=500000+10;\nint rd()\n{\n    int x=0,w=1;char ch=0;\n    while(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*w;\n}\nint to[M],nt[M],hd[N],tot;\nLL w[M];\nvoid add(int x,int y,int z){++tot,to[tot]=y,nt[tot]=hd[x],w[tot]=z,hd[x]=tot;}\nbool v[N];\nstruct nn\n{\n    LL d;\n    int y;\n    void clr(){d=1ll<<50,y=0;}\n    bool operator < (const nn &bb) const {return d<bb.d;}\n}d1[N],d2[N];\nstruct node\n{\n    int x;\n    nn d1,d2;\n    bool operator < (const node &bb) const {return bb.d1.d!=d1.d?bb.d1<d1:bb.d2<d2;}\n};\npriority_queue<node> q;\nint n,m,kk;\n\nint main()\n{\n    int T=rd();\n    while(T--)\n    {\n        memset(hd,0,sizeof(hd)),tot=0;\n        n=rd(),m=rd(),kk=rd();\n        for(int i=1;i<=m;++i)\n        {\n            int x=rd(),y=rd(),z=rd();\n            if(x==y) continue;\n            add(x,y,z);\n        }\n        memset(v,0,sizeof(v));\n        for(int i=1;i<=n;++i) d1[i].clr(),d2[i].clr();\n        LL ans=1ll<<50;\n        while(kk--)\n        {\n            int x=rd();\n            d1[x]=(nn){0,x},v[x]=1,q.push((node){x,d1[x],d2[x]});\n        }\n        while(!q.empty())\n        {\n            int x=q.top().x;\n            nn dd1=q.top().d1,dd2=q.top().d2;\n            q.pop();\n            if(d1[x]<dd1||d2[x]<dd2) continue;\n            for(int i=hd[x];i;i=nt[i])\n            {\n                int y=to[i];\n                if(v[y])\n                {\n                    if(dd1.y!=y) ans=min(ans,dd1.d+w[i]);\n                    else ans=min(ans,dd2.d+w[i]);\n                }\n                else\n                {\n                    nn n1=d1[y],n2=d2[y];\n                    if(n1.d>dd2.d+w[i])\n                    {\n                        if(n1.y!=n2.y) n2=n1;\n                        n1=(nn){dd2.d+w[i],dd2.y};\n                    }\n                    else if(n2.d>dd2.d+w[i]&&n1.y!=dd2.y) n2=(nn){dd2.d+w[i],dd2.y};\n                    if(n1.d>dd1.d+w[i])\n                    {\n                        if(n1.y!=n2.y) n2=n1;\n                        n1=(nn){dd1.d+w[i],dd1.y};\n                    }\n                    else if(n2.d>dd1.d+w[i]&&n1.y!=dd1.y) n2=(nn){dd1.d+w[i],dd1.y};\n                    if(n1<d1[y]||n2<d2[y]) q.push((node){y,d1[y]=n1,d2[y]=n2});\n                }\n            }\n        }\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1556028716,
        "uid": 38372,
        "name": "star_magic_young",
        "ccfLevel": 9,
        "title": "luogu P5304 [GXOI/GZOI2019]\u65c5\u884c\u8005"
    },
    {
        "content": "Dijkstra\u3002\n\n\u8fd9\u9053\u9898\u76ee\u7b80\u76f4\u662f\u5f1f\u5f1f\u7ea7\u522b\u7684\u2026\u2026\n\n\u8003\u8651\u6bcf\u6761\u8fb9 $(u,v,w)$ \u7684\u8d21\u732e\uff0c\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa\u57ce\u5e02\u4e2d\u79bb $u$ \u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a $dis_1$\uff0c\u79bb $v$ \u6700\u8fd1\u7684\u8ddd\u79bb\u4e3a $dis_2$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f $dis_1+dis_2+w$\uff0c\u7136\u540e\u627e\u5230\u6700\u77ed\u7684\u4e00\u6761\u5c31\u884c\u4e86\u3002\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u8fd9\u4e2a\u57ce\u5e02\u7684\u7f16\u53f7\uff0c\u5982\u679c\u4e24\u4e2a\u57ce\u5e02\u76f8\u540c\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u8d70\u4e86\u4e00\u4e2a\u73af\u56de\u5230\u5176\u672c\u8eab\u4e86\uff0c\u4e0d\u80fd\u8ba1\u5165\u7b54\u6848\u3002\n\n\u6b63\u53cd\u8dd1\u4e24\u8fb9 Dijkstra\uff0c\u5206\u522b\u67d3\u8272\u3002\u67d3\u8272\u4e5f\u5c31\u662f\u5728\u8dd1 Dijkstra \u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u79bb\u8fd9\u4e2a\u70b9\u6700\u8fd1\u7684\u57ce\u5e02\uff0c\u5177\u4f53\u53ef\u4ee5\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define MAXM 500005\n#define reg register\n#define inl inline\n#define ll long long\nusing namespace std;\nint cnt,fst[MAXN],to[MAXM],nxt[MAXM],w[MAXM];\nint n,m,k,col[2][MAXN],a[MAXN],fr[MAXM],tx[MAXM],ww[MAXM];\nll dis[2][MAXM];\nstruct Node\n{\n\tint u;\n\tll dis;\n\tbool operator < (const Node &x) const\n\t{\n\t\treturn x.dis<dis;\n\t}\n};\npriority_queue <Node> q;\ntemplate <typename T> inl void Read(reg T &x)\n{\n\tx=0;\n\treg int fu=1;\n\treg char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') fu=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=(x<<3)+(x<<1)+(ch-48);\n\tx*=fu;\n}\ninl void AddEdge(reg int u,reg int v,reg int c)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n\tw[cnt]=c;\n}\ninl void Dijkstra(reg int id)\n{\n\tmemset(dis[id],60,sizeof(dis[id]));\n\tmemset(col[id],0,sizeof(col[id]));\n\tfor(reg int i=1;i<=k;i++)\n\t{\n\t\tdis[id][a[i]]=0;\n\t\tcol[id][a[i]]=a[i];\n\t\tq.push((Node){a[i],0});\n\t}\n\twhile(!q.empty())\n\t{\n\t\treg Node now=q.top();\n\t\tq.pop();\n\t\treg int u=now.u;\n\t\treg ll d=now.dis;\n\t\tif(d!=dis[id][u]) continue;\n\t\tfor(reg int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\treg int v=to[i];\n\t\t\tif(dis[id][v]>dis[id][u]+w[i])\n\t\t\t{\n\t\t\t\tdis[id][v]=dis[id][u]+w[i];\n\t\t\t\tcol[id][v]=col[id][u];\n\t\t\t\tq.push((Node){v,dis[id][v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint Time;\n\tRead(Time);\n\twhile(Time--)\n\t{\n\t\tcnt=0;\n\t\tmemset(fst,0,sizeof(fst));\n\t\tRead(n);\n\t\tRead(m);\n\t\tRead(k);\n\t\tfor(reg int i=1;i<=m;i++)\n\t\t{\n\t\t\tint x,y,z;\n\t\t\tRead(x);\n\t\t\tRead(y);\n\t\t\tRead(z);\n\t\t\tfr[i]=x;\n\t\t\ttx[i]=y;\n\t\t\tww[i]=z;\n\t\t\tif(x^y) AddEdge(x,y,z);\n\t\t}\n\t\tfor(reg int i=1;i<=k;i++) Read(a[i]);\n\t\tDijkstra(0);\n\t\tcnt=0;\n\t\tmemset(fst,0,sizeof(fst));\n\t\tfor(reg int i=1;i<=m;i++) if(fr[i]^tx[i]) AddEdge(tx[i],fr[i],ww[i]);\n\t\tDijkstra(1);\n\t\treg ll ans=1e18;\n\t\tfor(reg int i=1;i<=m;i++)\n\t\t{\n\t\t\treg int u=fr[i],v=tx[i],c=ww[i];\n\t\t\tif(col[0][u] && col[1][v] && col[0][u]!=col[1][v]) ans=min(ans,dis[0][u]+dis[1][v]+c);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1555507652,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "## \u4f20\u9001\u95e8\n[Loj](https://loj.ac/problem/3087)\n\n## Solution\n\u8003\u8651\u4e24\u4e2a\u5173\u952e\u70b9\u5bf9\u4e4b\u95f4\u4e00\u5b9a\u4e0d\u4f1a\u7ecf\u8fc7\u53e6\u4e00\u4e2a\u5173\u952e\u70b9,\u90a3\u4e48\u5c31\u8dd1\u4e24\u8fb9$dijkstra$\u7136\u540e\u679a\u4e3e\u8fb9\u5c31\u884c\u4e86.\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801.\n\n## \u4ee3\u7801\u5b9e\u73b0\n```cpp\n/*\n  mail: mleautomaton@foxmail.com\n  author: MLEAutoMaton\n  This Code is made by MLEAutoMaton\n*/\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<set>\n#include<map>\n#include<iostream>\nusing namespace std;\n#define ll long long\n#define re register\n#define int ll\n#define file(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\ninline int gi()\n{\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9' || ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn f*sum;\n}\nconst int N=200010,M=1000010;\nstruct node\n{\n\tint to,nxt,w,id;\n}e[M];\nstruct edge{int u,v,w;}ed[M<<1];\nint front[N],cnt=1,a[N],bl[N][2],n,m,k,vis[N];\nll dis[N][2];\nvoid Add(int u,int v,int w){e[++cnt]=(node){v,front[u],w,0};front[u]=cnt;e[++cnt]=(node){u,front[v],w,1};front[v]=cnt;}\ntypedef pair<ll,int> pii;\npriority_queue<pii,vector<pii>,greater<pii> >q;\n#define mp make_pair\nvoid solve()\n{\n\tll ans=1e18+10;\n\tfor(int i=1;i<=n;i++)dis[i][0]=1e18,vis[i]=0;\n\tfor(int i=1;i<=k;i++)dis[a[i]][0]=0,bl[a[i]][0]=a[i],q.push(mp(0,a[i]));\n\twhile(!q.empty())\n\t{\n\t\tpii now=q.top();q.pop();int u=now.second;\n\t\tif(vis[u])continue;vis[u]=1;\n\t\tfor(int i=front[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tif(e[i].id)continue;\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v][0]>dis[u][0]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[v][0]=dis[u][0]+e[i].w;\n\t\t\t\tq.push(mp(dis[v][0],v));\n\t\t\t\tbl[v][0]=bl[u][0];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)dis[i][1]=1e18,vis[i]=0;\n\tfor(int i=1;i<=k;i++)dis[a[i]][1]=0,bl[a[i]][1]=a[i],q.push(mp(0,a[i]));\n\twhile(!q.empty())\n\t{\n\t\tpii now=q.top();q.pop();int u=now.second;\n\t\tif(vis[u])continue;vis[u]=1;\n\t\tfor(int i=front[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tif(!e[i].id)continue;\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v][1]>dis[u][1]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[v][1]=dis[u][1]+e[i].w;\n\t\t\t\tq.push(mp(dis[v][1],v));\n\t\t\t\tbl[v][1]=bl[u][1];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=ed[i].u,v=ed[i].v;\n\t\tif(bl[u][0]==bl[v][1])continue;\n\t\tans=min(ans,ed[i].w+dis[u][0]+dis[v][1]);\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\nsigned main()\n{\n\tfreopen(\"tourist.in\",\"r\",stdin);\n\tfreopen(\"tourist.out\",\"w\",stdout);\n\tint T=gi();\n\twhile(T--)\n\t{\n\t\tn=gi();m=gi();k=gi();\n\t\tfor(int i=1;i<=m;i++){int x=gi(),y=gi(),z=gi();Add(x,y,z);ed[i]=(edge){x,y,z};}\n\t\tfor(int i=1;i<=k;i++)a[i]=gi();\n\t\tsolve();\n\t\tfor(int i=1;i<=n;i++)front[i]=0;cnt=1;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1556616021,
        "uid": 51343,
        "name": "MLEAutoMaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "#### \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd \u5206\u6cbb/\u500d\u589e \u7684\u89e3\u6cd5\u3002\n&emsp;&emsp;\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a$fake$\u7684\u505a\u6cd5\uff1a\u76f4\u63a5\u5efa\u8d85\u7ea7\u6e90\u6c47\u7136\u540e\u8dd1\u6700\u77ed\u8def\u3002\u8fd9\u6837\u53ea\u80fd\u62ff\u5230\u6709\u5411\u65e0\u73af\u56fe\u7684$30pts$\uff0c\u56e0\u4e3a\u4f60\u6ca1\u6709\u529e\u6cd5\u5904\u7406\u201c\u81ea\u5df1\u5230\u81ea\u5df1\u201d\u8fd9\u79cd\u60c5\u51b5\u3002\n\n&emsp;&emsp;\u7136\u540e\u6211\u4eec\u5f88\u5bb9\u6613\u641e\u51fa\u4e00\u4e2a$O(N^2)$\u7684\u7b97\u6cd5\uff0c\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u70b9\u7136\u540e\u8dd1\u4e00\u904d$Dijkstra$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n&emsp;&emsp;\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7684\u74f6\u9888\u662f\u4ec0\u4e48\uff1f\u663e\u7136\u4e0d\u662f\u6c42\u6700\u77ed\u8def\uff0c\u800c\u662f\u679a\u4e3e\u3002\n\u6700\u540e\u7684\u7b54\u6848\u80af\u5b9a\u662f\u70b9\u96c6\u4e2d\u4e00\u4e2a\u70b9$ansS$\u5230$ansT$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u5728\u679a\u4e3e\u7684\u65f6\u5019\uff0c\u5b58\u5728\u4e00\u4e2a\u65f6\u523b\uff0c\u8d85\u7ea7\u6e90\u70b9$S$\u8fde\u5728$ansS$\u4e0a\u5e76\u4e14$ansT$\u8fde\u5728\u8d85\u7ea7\u6e90\u70b9$T$\u4e0a\uff0c\u800c\u4e14\u8fd9\u4e2a\u679a\u4e3e\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u63a5\u53d7\u5c31\u597d\u4e86\u3002\n\n&emsp;&emsp;\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u80fd\u5426\u5728\u679a\u4e3e\u7684\u65f6\u5019\u6bcf\u6b21\u201c\u500d\u589e\uff08\u5206\u6cbb\uff09\u201d\u3002\n\n&emsp;&emsp;\u5047\u8bbea\u6570\u7ec4\u4e3a\u9898\u76ee\u4e2d\u7ed9\u7684\u70b9\u96c6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u6211\u8fd9\u91cc\u7528\u7ebf\u6bb5\u6811\u6765\u89e3\u91ca\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5efa\u597d\u4e86a\u6570\u7ec4\u7684\u7ebf\u6bb5\u6811\uff0c\u7b2c\u4e00\u6b21\u6211\u4eec\u628aa\u6570\u7ec4\u4e2d\uff0c\u4e0b\u6807<=mid\u7684\u90fd\u8fde\u5230S\uff0c\u5176\u4f59\u8fde\u5230T\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/57247.png )\n\n&emsp;&emsp;\u8dd1\u4e00\u8fb9$Dijkstra$\uff0c\u7136\u540e\u628aS\u548cT\u53cd\u8fc7\u6765\uff0cS\u8fde\u53f3\uff0cT\u8fde\u5de6\uff0c\u518d\u8dd1\u4e00\u904d$Dijkstra$\u3002\n\n&emsp;&emsp;\u90a3\u4e48\u51e1\u662f$ansS$\u5728$a[1]-a[mid]/a[mid+1]-a[r]$\u4e2d\uff0c\u4e14$ansT$\u5728$a[mid+1]-a[r]/a[1]-a[mid]$\u7684\u60c5\u51b5\u90fd\u88ab\u6211\u4eec\u4e00\u6b21\u7edf\u8ba1\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f$ansT$\u548c$ansS$\u90fd\u5728\u540c\u4e00\u4e2a\u7ebf\u6bb5\u91cc\u7684\u60c5\u51b5\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u7b2c\u4e8c\u6b21\u8fd9\u4e48\u505a\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/57254.png)\n\n&emsp;&emsp;\u8fd9\u6837\u5206\u6cbb\u4e0b\u53bb\uff0c\u53ea\u8981$logn$\u6b21\u679a\u4e3e\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa\u7b54\u6848\uff0c\u6bcf\u6b21$nlogn$\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u5c31\u662f$O(Tnlog^2n)$\u7684\uff0c\u5728$O2$\uff08\u53cd\u6b63\u7701\u9009\u4e5f\u6709\uff09\u4e0b\u6700\u6162\u7684\u70b9\u5728$2s$\u5de6\u53f3\u3002\n\n&emsp;&emsp;\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u4e0d\u4f1a\u6f0f\u6389\u7b54\u6848\u5462\uff1f\n\n&emsp;&emsp;\u4e00\u53e5\u8bdd:\u4efb\u610f\u4e24\u4e2a\u53f6\u5b50\u5728\u7ebf\u6bb5\u6811\u4e0a\u90fd\u6709\u552f\u4e00\u7684$LCA$\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u5728\u6211\u4eec\u201c\u5206\u522b\u8fde\u201d\u8fd9\u4e2a$LCA$\u5de6\u53f3\u513f\u5b50\u7684\u65f6\u5019\u88ab\u679a\u4e3e\u5230\u3002\n\n&emsp;&emsp;\u5b9e\u9645\u4e0a\u8fd9\u9897\u7ebf\u6bb5\u6811\u6839\u672c\u4e0d\u7528\u5efa\u51fa\u6765\uff08\u4f3c\u4e4e\u5efa\u51fa\u6765\u8fde\u8fb9\u53ef\u4ee5\u4f18\u5316\u5230$O(n)$\uff09\uff0c\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\u590d\u6742\u5ea6\u4e5f\u662f\u5bf9\u7684\u3002\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019$BFS$\u5206\u6cbb\u5e76\u4e0d\u597d\u5199\uff0c\u6240\u4ee5\u6211\u5199\u7684\u662f\u4ece\u53f6\u5b50\u8fed\u4ee3\u4e0a\u53bb\uff0c\u7c7b\u4f3c\u4e8e\u500d\u589e\u7684\u65b9\u5f0f(\u957f\u5f97\u597d\u50cf$FFT$...)\u3002\n\n&emsp;&emsp;\u6700\u4f18\u89e3\u662f$Dijkstra$\u67d3\u8272($O(Tnlogn)$)\uff0c\u4f46\u662f\u6211\u4fdd\u8bc1\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8fd9\u4e1c\u897f\uff0c\u6807\u7b97\u597d\u50cf\u662f\u62c6\u4e8c\u8fdb\u5236\u679a\u4e3e\uff0c\u611f\u89c9\u867d\u7136\u4f1a\u597d\u5199\u4e00\u4e9b\uff0c\u4f46\u662f\u8111\u6d1e\u771f\u7684\u5f88\u5927\uff0c\u50cf\u6211\u8fd9\u79cd\u4eba\u8003\u8bd5\u7684\u65f6\u5019\u80af\u5b9a\u60f3\u4e0d\u5230\uff0c\u800c\u8fd9\u4e2a\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u662f\u6bd4\u8f83$native$\u7684\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6240\u4ee5\u624d\u6709\u4e86\u8fd9\u4e00\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\u3002\n\n## Code:\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nstatic char buf[100000],*pa,*pd;\n#define gc pa==pd&&(pd=(pa=buf)+fread(buf,1,100000,stdin),pa==pd)?EOF:*pa++\ninline int read(){\n\tregister int x(0),f(1);register char c(gc);\n\twhile(c>'9'||c<'0')f=c=='-'?-1:1,c=gc;\n\twhile(c>='0'&&c<='9')x=x*10+c-48,c=gc;\n\treturn f*x;\n}\nconst int N=110000,M=510000;\nstruct edge{\n\tint to,next;\n\tll w;\n}e[M];\nint head[150000],tot;\nvoid add(int x,int y,ll z){\n\te[++tot].next=head[x];e[tot].to=y;head[x]=tot;e[tot].w=z;\n}\nint t,n,m,K,a[N];\nconst int S=0,T=N-1;\nll dis[N],ans;\n#define re(a) memset((a),0,sizeof((a)))\nvoid clear(){\n\tre(a);re(head);tot=0;\n}\nstruct node{\n\tint u;\n\tll udis;\n};\nbool operator < (node x,node y){\n\treturn x.udis>y.udis;\n}\npriority_queue<node> q;\nll DJ(){\n\tmemset(dis,127,sizeof(dis));\n\tdis[S]=0;\n\tq.push((node){S,0});\n\tregister int i;\n\twhile(!q.empty()){\n\t\tint u=q.top().u;ll udis=q.top().udis;q.pop();\n\t\tif(udis!=dis[u])continue;\n\t\tfor(i=head[u];i;i=e[i].next)\n\t\t\tif(dis[u]+e[i].w<dis[e[i].to]){\n\t\t\t\tdis[e[i].to]=dis[u]+e[i].w;\n\t\t\t\tq.push((node){e[i].to,dis[e[i].to]});\n\t\t\t}\n\t} \n\treturn dis[T];\n}\nint past[150000];\nvoid work(){\n\tregister int i,j,l,r,mid;\n\tans=(ll)pow(2,63)-10;\n\tmemcpy(past,head,sizeof(past));\n\tfor(mid=1;mid<=K;mid<<=1){\n\t\tfor(l=0,r=mid<<1;l<=K;l+=r){\n\t\t\tfor(j=l+1;j<=l+mid;j++)if(j<=K)add(S,a[j],0);\n\t\t\tfor(j=l+mid+1;j<=l+r;j++)if(j<=K)add(a[j],T,0);\n\t\t}\n\t\tans=min(ans,DJ());\n\t\ttot-=K;\n\t\tmemcpy(head,past,sizeof(head));\n\t\tfor(l=0,r=mid<<1;l<=K;l+=r){\n\t\t\tfor(j=l+1;j<=l+mid;j++)if(j<=K)add(a[j],T,0);\n\t\t\tfor(j=l+mid+1;j<=l+r;j++)if(j<=K)add(S,a[j],0);\n\t\t}\n\t\tans=min(ans,DJ());\n\t\ttot-=K;\n\t\tmemcpy(head,past,sizeof(head));\n\t}\n\tcout<<ans<<'\\n';\n}\nint main(){\n\tt=read();\n\tregister int i,x,y,z;\n\twhile(t--){\n\t\tn=read();m=read();K=read();\n\t\tfor(i=1;i<=m;i++){\n\t\t\tx=read();y=read();z=read();add(x,y,z);\n\t\t}\n\t\tfor(i=1;i<=K;i++){\n\t\t\ta[i]=read();\n\t\t}\n\t\twork();\n\t\tclear();\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1555996209,
        "uid": 130060,
        "name": "TopCarry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "\u7206\u641c\n\n\u53c2\u52a0\u540c\u6b65\u6d4b\u8bd5\u65f6\u5199\u7684\u5927\u66b4\u529b\u641c\u7d22\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u57285s\u7684\u65f6\u95f4\u91cc\u6c34\u8fc7\u4e86\uff0c\u6210\u4e86\u6211\u552f\u4e00A\u7684\u4e00\u9053\u9898\uff08\u5e94\u8be5\u662f\u6574\u573a\u8003\u8bd5\u6700\u6c34\u7684\u9898\u4e86\u5427\uff09\n\n\u628a\u6240\u6709\u611f\u5174\u8da3\u7684\u57ce\u5e02\u90fd\u7528\u7ed3\u6784\u4f53\u4fdd\u5b58\u8d77\u6765\n```cpp\nstruct length{\n\tint d,u,from;\n}len;\n```\n\u5b58\u7684\u662f\u6bcf\u4e00\u6761\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u5f53\u524d\u70b9\uff0c\u6e90\u70b9\n\n\u76f4\u63a5\u4e22\u5230\u5806\u91cc\u9762\u53bb\uff0c\u6bcf\u6b21\u53d6\u51fa\u957f\u5ea6\u6700\u77ed\u7684\u8def\u5f84\uff0c\u5982\u679c\u5f53\u524d\u7684\u70b9\u662f\u611f\u5174\u8da3\u7684\u57ce\u5e02\uff0c\u4e14\u8d77\u70b9\u4e0d\u4e3a\u5f53\u524d\u70b9\uff0c\u8fd9\u65f6\u641c\u5230\u7684\u8ddd\u79bb\u5c31\u662f\u7b54\u6848\u3002\u5426\u5219\u5bf9\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u8fdb\u884c\u62d3\u5c55\uff0c\u76f4\u63a5\u4e22\u5230\u5806\u91cc\u9762\u53bb\u3002\n\n\u8d34\u4ee3\u7801\uff0c\u6162\u7684\u4e00\u5339\uff0c\u6700\u6162\u4e00\u4e2a\u70b9\u8dd1\u4e864s\u591a\uff0c\u590d\u6742\u5ea6O\uff08\u7384\u5b66\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100010\n#define M 500010\nint read(){\n\tint c,nx=0;\n\tdo{\n\t\tc=getchar()-'0';\n\t}while(c<0 or c>9);\n\tnx=getchar()-'0';\n\twhile(nx>=0 and nx<=9){\n\t\tc=c*10+nx;\n\t\tnx=getchar()-'0';\n\t}\n\treturn c;\n}\nint a[N];\nint now,head[N],next[M],ver[M],edge[M];\ninline void addEdge(int u,int v,int e){\n\tnow++;\n\tnext[now]=head[u];\n\tver[now]=v;\n\thead[u]=now;\n\tedge[now]=e;\n}\nstruct length{\n\tint d,u,from;\n}len;\nbool operator<(length x,length y){\n\treturn x.d>y.d;\n}\nint n,m,k;\nint dist[N];\nbool is[N];\npriority_queue<length>q;\nint main(){\n\tint u,v,e,d,from;\n\tint t=read();\n\tlen.d=len.from=len.u=0;\n\tfor(int h=1;h<=t;h++){\n\t\tnow=0;\n\t\tlen.d=len.from=len.u=0;\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(next,0,sizeof(next));\n\t\tmemset(is,0,sizeof(is));\n\t\twhile(q.size())\n\t\t\tq.pop();\n\t\tmemset(dist,0x3f,sizeof(dist));\n\t\tn=read();\n\t\tm=read();\n\t\tk=read();\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tu=read();\n\t\t\tv=read();\n\t\t\te=read();\n\t\t\tif(u!=v){\n\t\t\t\taddEdge(u,v,e);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tlen.u=len.from=a[i]=read();\n\t\t\tis[a[i]]=1;\n\t\t\tq.push(len);\n\t\t}\n\t\twhile(q.size()){\n\t\t\tu=q.top().u;\n\t\t\td=q.top().d;\n\t\t\tlen.from=from=q.top().from;\n\t\t\tq.pop();\n\t\t\tif(is[u] and u!=from){\n\t\t\t\tprintf(\"%d\\n\",d);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\t\tlen.u=ver[i];\n\t\t\t\tlen.d=d+edge[i];\n\t\t\t\tq.push(len);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n}\n```\n",
        "postTime": 1555842901,
        "uid": 144732,
        "name": "Alear",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P5304)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6700\u6700\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u679a\u4e3e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u8dd1$Dijkstra$\uff0c\u7136\u540e\u53d6\u6700\u5c0f\u503c\u3002\u65f6\u95f4\u662f$O(Tkm\\log_2m)$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u4f18\u5316\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\u77e5\u9053\u5230\u5e95\u662f\u54ea\u4e00\u4e2a\u70b9\u8ddf\u54ea\u4e00\u4e2a\u70b9\u7ec4\u6210\u4e86\u6700\u77ed\u8ddd\u79bb\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u5bf9\u70b9\u8fdb\u884c\u5206\u7ec4\uff0c\u4e00\u7ec4\u4e3a\u8d77\u70b9\uff0c\u4e00\u7ec4\u4e3a\u7ec8\u70b9\uff0c\u7136\u540e\u7528$Dijkstra$\u7684\u4f2a\u591a\u6e90\u6c47\u7248\u672c\u8dd1\u51fa\u6765\u4e24\u7ec4\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u5bf9\u4e8e\u6bcf\u6b21\u5f97\u5230\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6211\u4eec\u518d\u53d6$\\min$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5206\u7ec4\u3002\u5bf9\u4e8e\u4e00\u5bf9\u70b9$u,v$\uff0c\u7531\u4e8e$u\\not =v$\uff0c\u6240\u4ee5\u5728\u4e8c\u8fdb\u5236\u4e2d\uff0c$u$\u5fc5\u7136\u6709\u4e00\u4f4d\u548c$v$\u4e0d\u540c\u3002\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u4e8c\u8fdb\u5236\u4f4d\uff0c\u6bcf\u4e00\u6b21\u5c06\u8be5\u4f4d\u4e3a$0$\u7684\u4f5c\u4e3a\u8d77\u70b9\uff0c\u4e3a$1$\u7684\u4f5c\u4e3a\u7ec8\u70b9\uff0c\u8dd1\u4e00\u6b21\uff1b\u7136\u540e\u8d77\u7ec8\u70b9\u4e92\u6362\u518d\u8dd1\u4e00\u6b21\uff1b\u6700\u540e\u518d\u679a\u4e3e\u4e0b\u4e00\u4f4d\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6b63\u786e\u6027\u4e5f\u5df2\u7ecf\u8bf4\u660e\u4e86\uff0c\u7b54\u6848\u7684\u4e00\u5bf9\u70b9\u5fc5\u6709\u4e00\u4f4d\u4e8c\u8fdb\u5236\u4e0d\u540c\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u88ab\u679a\u4e3e\u5230\u3002\u65f6\u95f4\u662f$O(Tm\\log_2m\\log_2n)$  \n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\ntypedef long long LL;\n\n//#define int LL\n\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\nconst int MAXN = 1e5 + 5, MAXM = 5e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0; char s = getchar();int f = 1;\n\twhile( s < '0' || '9' < s ) { f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ) { putchar( '-' ), x = -x; }\n\tif( 9 < x ) { write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n   \treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt; LL w;\n}Graph[MAXM];\n\nstruct node\n{\n\tint u; LL dis;\n\tnode(){} node( const int U, const LL Dis ) { u = U, dis = Dis; }\n\tbool operator < ( const node & other ) const { return ! ( dis < other.dis ); }\n};\n\npriority_queue<node> q;\n\nLL dist[MAXN];\nint seq[MAXN];\nint head[MAXN];\nLL ans;\nint N, M, K, cnt;\nbool visited[MAXN], sta[MAXN], fin[MAXN];\n\nvoid addEdge( const int from, const int to, const int w )\n{\n\tGraph[++ cnt].w = w, Graph[cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nLL Dijkstra()\n{\n\twhile( ! q.empty() ) q.pop();\n\tfor( int i = 1 ; i <= N ; i ++ ) dist[i] = INF, visited[i] = false;\n\tfor( int i = 1 ; i <= N ; i ++ ) if( sta[i] ) q.push( node( i, dist[i] = 0 ) );\n\tnode h; int u, v; LL w;\n\twhile( ! q.empty() )\n\t{\n\t\th = q.top(), q.pop();\n\t\tif( fin[u = h.u] ) return h.dis;\n\t\tif( visited[u] ) continue; visited[u] = true;\n\t\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t\t{\n\t\t\tv = Graph[i].to, w = Graph[i].w;\n\t\t\tif( ! visited[v] && dist[v] > dist[u] + w/* && dist[u] + w < ans*/ ) \n\t\t\t\tq.push( node( v, dist[v] = dist[u] + w ) );\n\t\t}\n\t}\n\treturn INF;\n}\n\nint main()\n{\n\tLL ww;\n\tint T, fr, to;\n\tread( T );\n\twhile( T -- )\n\t{\n\t\tfor( int i = 1 ; i <= N ; i ++ ) head[i] = 0;\n\t\tread( N ), read( M ), read( K );\n\t\tans = INF, cnt = 0;\n\t\tfor( int i = 1 ; i <= M ; i ++ ) read( fr ), read( to ), read( ww ), addEdge( fr, to, ww );\n\t\tfor( int i = 1 ; i <= K ; i ++ ) read( seq[i] );\n\t\tfor( int i = 0 ; ( 1 << i ) <= N ; i ++ )\n\t\t{\n\t\t\tfor( int j = 1 ; j <= N ; j ++ ) sta[j] = fin[j] = false;\n\t\t\tfor( int j = 1 ; j <= K ; j ++ ) \n\t\t\t{\n\t\t\t\tif( seq[j] & ( 1 << i ) ) sta[seq[j]] = true;\n\t\t\t\telse fin[seq[j]] = true;\n\t\t\t}\n\t\t\tans = MIN( ans, Dijkstra() );\n\t\t\tfor( int j = 1 ; j <= N ; j ++ ) sta[j] = fin[j] = false;\n\t\t\tfor( int j = 1 ; j <= K ; j ++ ) \n\t\t\t{\n\t\t\t\tif( seq[j] & ( 1 << i ) ) fin[seq[j]] = true;\n\t\t\t\telse sta[seq[j]] = true;\n\t\t\t}\n\t\t\tans = MIN( ans, Dijkstra() );\n\t\t}\n\t\twrite( ans ), putchar( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1576544037,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[GXOI/GZOI2019]\u65c5\u884c\u8005"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[$luogu$](https://www.luogu.com.cn/problem/P5304).\n# \u9898\u89e3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u672c\u9898\u89e3\u6cd5\u591a\u6837, \u8fd9\u91cc\u5e26\u6765\u4e00\u79cd\u7384\u5b66\u7684\u65b9\u6cd5: **\u4e8c\u8fdb\u5236\u5206\u7ec4**.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6211\u4eec\u679a\u4e3e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d, \u6309\u8fd9\u4e00\u4f4d\u4e8c\u8fdb\u5236\u628a\u7ed3\u70b9\u7f16\u53f7\u5206\u4e3a\u4e24\u7ec4, \u4e00\u7ec4\u4f5c\u4e3a\u8d77\u70b9, \u5168\u90e8\u585e\u5165\u961f\u5217, \u53e6\u4e00\u7ec4\u4f5c\u4e3a\u7ec8\u70b9, \u8dd1\u4e00\u6b21$Dijkstra$, \u628a\u524d\u8005\u5230\u540e\u8005\u7684\u6700\u77ed\u8def\u7528\u4e8e\u66f4\u65b0\u7b54\u6848. \u590d\u6742\u5ea6$O(n\\log_2^2n)$.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6b63\u786e\u6027\u4e5f\u4e0d\u96be\u8bc1\u660e: \u5047\u8bbe\u7b54\u6848\u8def\u5f84\u662f\u4ece$u$\u5230$v$\u7684\u6700\u77ed\u8def. \u663e\u7136$u$\u548c$v$\u7684\u7f16\u53f7\u662f\u4e0d\u540c\u7684. \u6240\u4ee5\u4e00\u5b9a\u6709\u4e00\u6b21\u5206\u7ec4, \u4f7f\u5f97$u$\u5728\u8d77\u70b9\u4e00\u7ec4, $v$\u5728\u7ec8\u70b9\u4e00\u7ec4, \u5c31\u627e\u5230\u4e86\u7b54\u6848.  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6240\u4ee5, \u8fd9\u9898\u600e\u4e48\u53c8\u9ed1\u4e86...  \n## \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <utility>\n\n#define Int register int\n\nusing namespace std;\n\ntypedef long long int LL;\ntypedef pair<LL, int> pli;\n\nconst LL INF = 1LL << 62;\nconst int MAXN = 1e5, MAXM = 5e5;\nint n, m, k, Cnte, Head[MAXN + 5], Import[MAXN + 5];\nbool Mark[MAXN + 5];\nLL Dist[MAXN + 5];\n\nstruct Edge {\n\tint To, Cost, _nxt;\n\tEdge () {}\n\tEdge ( const int t, const int c, const int n ): To ( t ), Cost ( c ), _nxt ( n ) {}\n} Graph[MAXM + 5];\n\ninline int rint () {\n\tint x = 0; char s = getchar ();\n\tfor ( ; s < '0' || '9' < s; s = getchar () );\n\tfor ( ; '0' <= s && s <= '9'; s = getchar () ) x = ( x << 3 ) + ( x << 1 ) + ( s ^ '0' );\n\treturn x;\n}\n\ninline LL Min ( const LL a, const LL b ) { return a < b ? a : b; }\n\ninline int Max ( const int a, const int b ) { return a > b ? a : b; }\n\ninline void Link ( const int f, const int t, const int c ) {\n\tGraph[++ Cnte] = Edge ( t, c, Head[f] );\n\tHead[f] = Cnte;\n}\n\ninline LL Dijkstra ( const int bit, LL* Dist, const bool r ) {\n\tLL ret = INF;\n\tstatic bool Vis[MAXN + 5];\n\tstatic priority_queue<pli, vector<pli>, greater<pli> > Q;\n\tfor ( ; ! Q.empty (); Q.pop () );\n\tfor ( Int i = 1; i <= n; ++ i ) Vis[i] = false, Dist[i] = INF;\n\tint Cnt = 0;\n\tfor ( Int i = 1; i <= k; ++ i ) {\n\t\tif ( ( ( Import[i] >> bit ) & 1 ) == r ) {\n\t\t\t++ Cnt;\n\t\t\tQ.push ( { Dist[Import[i]] = 0, Import[i] } );\n\t\t}\n\t}\n\tif ( Cnt == k ) return INF;\n\twhile ( ! Q.empty () ) {\n\t\tpli p = Q.top (); Q.pop ();\n\t\tif ( Vis[p.second] ) continue;\n\t\tVis[p.second] = true;\n\t\tfor ( Int i = Head[p.second], v; i; i = Graph[i]._nxt ) {\n\t\t\tif ( ! Vis[v = Graph[i].To] && Dist[v] > p.first + Graph[i].Cost ) {\n\t\t\t\tQ.push ( { Dist[v] = p.first + Graph[i].Cost, v } );\n\t\t\t}\n\t\t}\n\t}\n\tfor ( Int i = 1; i <= k; ++ i ) {\n\t\tif ( ( ( Import[i] >> bit ) & 1 ) ^ r ) {\n\t\t\tret = Min ( ret, Dist[Import[i]] );\n\t\t}\n\t}\n\treturn ret;\n}\n\ninline void Work () {\n\tfor ( Int T = rint (); T --; ) {\n\t\tint mx = 0;\n\t\tn = rint (), m = rint (), k = rint ();\n\t\tCnte = 0;\n\t\tLL Ans = INF;\n\t\tfor ( Int i = 1; i <= n; ++ i ) Head[i] = 0;\n\t\tfor ( Int i = 1, u, v, w; i <= m; ++ i ) u = rint (), v = rint (), w = rint (), Link ( u, v, w );\n\t\tfor ( Int i = 1; i <= k; ++ i ) Mark[i] = false;\n\t\tfor ( Int i = 1; i <= k; ++ i ) mx = Max ( Import[i] = rint (), mx ), Mark[Import[i]] = true;\n\t\tfor ( int i = 0; 1 << i <= mx; ++ i )\n\t\t\tAns = Min ( Ans, Dijkstra ( i, Dist, false ) ),\n\t\t\tAns = Min ( Ans, Dijkstra ( i, Dist, true ) );\n\t\tprintf ( \"%lld\\n\", Ans );\n\t}\n}\n\nint main () {\n//\tfreopen ( \"tourist.in\", \"r\", stdin );\n//\tfreopen ( \"tourist.out\", \"w\", stdout );\n\tWork ();\n\treturn 0;\n}\n```",
        "postTime": 1576542499,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "## 90 \u5206\n\n\u66b4\u529b\u65b9\u6cd5\n\n\u4ee5\u6bcf\u4e2a\u611f\u5174\u8da3\u7684\u70b9\u4e3a\u8d77\u70b9\uff0c\u8dd1k\u904d\u6700\u77ed\u8def\uff0c\u53d6\u6bcf\u4e24\u4e2a\u611f\u5174\u8da3\u7684\u70b9\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u5373\u53ef\n\n\u7531\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u6700\u77ed\u8def\u5168\u8dd1\u5b8c\u518d\u6bd4\u8f83\u53d6\u503c\uff0c\u7edd\u5bf9\u4f1aTLE\n\n\u800c\u7531dijkstra\u8d2a\u5fc3\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u5f53\u5f39\u51fa\u7684\u70b9\u5305\u542b\u5728k\u4e2d\u4e14\u4e0d\u662f\u8d77\u70b9\u65f6\uff0c\u5219\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u662f\u7531\u8d77\u70b9\u5ef6\u4f38\u51fa\u7684\u6700\u4f18\u60c5\u51b5\n\n\u6545\u6211\u4eec\u53ea\u9700\u8dd1k\u904d\u6700\u77ed\u8def\uff0c\u7136\u540e\u5982\u679c\u5806\u9876\u5f39\u51fa\u7684\u70b9\u5305\u542b\u5728k\u4e2d\u65f6\uff0c\u8fd4\u56de\u8be5\u5e97\u6240\u5bf9\u5e94\u7684dis\u503c\u5c31\u53ef\u4ee5\u4e86\n\n## 100 AC\n\n\u5f53\u5404\u4f4d\u7528\u4e0a\u8ff0\u65b9\u6cd5\u63d0\u4ea4\u4e0a\u4ee3\u7801\u65f6\uff0c\u53d1\u73b0\u6700\u540e\u4e00\u4e2a\u70b9T\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u6362\u79cd\u65b9\u6cd5\n\n\u7b80\u5355\u8bf4\u4e00\u4e0b\uff1a\n\n\u628a\u5305\u542b\u4e8ek\u4e2d\u7684\u70b9\u770b\u505a\u4e00\u4e2a\u96c6\u5408\n\n\u4ee5\u8be5\u96c6\u5408\u4e3a\u8d77\u70b9\uff0c\u6b63\u53cd\u8dd1\u4e24\u8fb9dijkstra\uff08spfa\u6ca1\u8bd5\u8fc7\uff09\n\n\u628a\u6bcf\u4e2a\u70b9\u90fd\u67d3\u4e0a\u8272\uff08\u6807\u8bb0\u51fa\u79bb\u8be5\u70b9\u6700\u8fd1\u7684\uff0c\u5305\u542b\u4e8ek\u4e2d\u7684\u70b9\uff09\n\n(\u6211\u5728\u8fd9\u91cc\u628a\u6b63\u5411\u8dd1dij\u7684\u989c\u8272\u79f0\u4e3acl1\uff0c\u53cd\u4e4b\u79f0\u4e3acl2)\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u8bbe\u8fb9\u4e24\u70b9\u5206\u522b\u4e3ax,y  \u6b63\u5411\u8fb9\u4e3a x->y\n\n\u5982\u679ccl1x\u548ccl2y\u4e0d\u4e00\u81f4\uff0c\u5219\u8fd9\u6761\u8fb9\u4f1a\u505a\u51fa\u8d21\u732e\n\n\u8be5\u8fb9\u53ef\u4ee5\u5f97\u5230\u7684\u9009\u62e9\u4e3a sum=dij1x+dij2y+edge[\u8be5\u8fb9]\n\n\u6700\u540e\u5f97\u51fa\u6765\u6240\u6709\u53ef\u80fd\u7684ans\u7684\u6700\u5c0f\u503c\u5373\u662f\u7b54\u6848\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n## 90:\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define MAXN 5000001\n#define inf 0x3f3f3f3f3f3f3f3f\n#define R register\nusing namespace std;\nll head[MAXN],ver[MAXN],edge[MAXN];\nll Next[MAXN],tot;\nll n,m,k;\nbool a[MAXN];\nll s[MAXN];\nll T;\ninline void add(ll x,ll y,ll z)\n{\n\tver[++tot]=y;edge[tot]=z;\n\tNext[tot]=head[x];head[x]=tot;\n\treturn;\n}\nll d[MAXN],vis[MAXN];\ninline ll dijkstra(ll st)\n{\n\tpriority_queue <pair<ll,ll> > q;\n\tfor(int i=1;i<=n;i++)\n\t    d[i]=inf,vis[i]=0;\n\td[st]=0;\n\tq.push(make_pair(0,st));\n\twhile(!q.empty())\n\t{\n\t\tll x=q.top().second;\n\t\tq.pop();\n\t\tif(x!=st&&a[x]) return d[x];\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(R ll i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tll y=ver[i],z=edge[i];\n\t\t\tif(d[y]>d[x]+z)\n\t\t\t{\n\t\t\t\td[y]=d[x]+z;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t} \n\t}\n}\nll x,y,z;\nll ans;\nint main()\n{\n\tscanf(\"%lld\",&T);\n\n\twhile(T--)\n\t{\n\t\tmemset(Next,0,sizeof(Next));\n\t\ttot=0;\n\t\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\n\t\tfor(ll i=1;i<=n;i++) head[i]=0,a[i]=0;\n\t\tfor(R ll i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\n\t\t\tadd(x,y,z);\n\n\t\t}\n\t\tfor(R ll i=1;i<=k;i++)\n\t\t{\n\t\t\tscanf(\"%lld\",&s[i]);\n\n\t\t\ta[s[i]]=1;\n\t\t}\n\t\tans=inf;\n\t\tfor(R ll i=1;i<=k;i++)\n\t\t    ans=min(ans,dijkstra(s[i]));\n\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n## AC:\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define MAXN 5000001\n#define inf 0x3f3f3f3f\n#define R register\nusing namespace std;\nstruct ndoe\n{\n\tll x,y,w;\n}a[MAXN];\nll ver[MAXN],edge[MAXN],head[MAXN],Next[MAXN],tot;\ninline void add(int x,int y,int z)\n{\n\tver[++tot]=y;edge[tot]=z;\n\tNext[tot]=head[x];head[x]=tot;\n\treturn;\n}\nll n,m,k,T;\nll d[MAXN][2],col[MAXN][2],vis[MAXN];\nll s[MAXN],pd[MAXN];\ninline void dijkstra(ll e)\n{\n\tfor(ll i=1;i<=n;i++)\n\t    d[i][e]=inf,vis[i]=0;\n\tpriority_queue< pair<ll,ll> > q;\n\tfor(ll i=1;i<=k;i++)\n\t    d[s[i]][e]=0,col[s[i]][e]=s[i],\n\t    q.push(make_pair(0,s[i]));\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().second;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(d[y][e]>d[x][e]+z)\n\t\t\t{\n\t\t\t\td[y][e]=d[x][e]+z;\n\t\t\t\tcol[y][e]=col[x][e];\n\t\t\t\tq.push(make_pair(-d[y][e],y));\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\ninline void clear()\n{\n\tmemset(head,0,sizeof(head));\n\tmemset(Next,0,sizeof(Next));\n\tmemset(pd,0,sizeof(pd));\n\ttot=0;return;\n}\nint main()\n{\n\tscanf(\"%lld\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\t\tclear();\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&a[i].x,&a[i].y,&a[i].w);\n\t\t\tadd(a[i].x,a[i].y,a[i].w);\n\t\t}\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tscanf(\"%lld\",&s[i]);\n\t\t\tpd[s[i]]=1;\n\t\t}\n\t\tdijkstra(0);\n\t\tclear();\n\t\tfor(int i=1;i<=m;i++)\n\t\t    add(a[i].y,a[i].x,a[i].w);\n\t\tdijkstra(1);\n\t\tll ans=inf;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tll x=a[i].x,y=a[i].y,w=a[i].w;\n\t\t\tif(!col[x][0]||!col[y][1]) continue;\n\t\t\tif(col[x][0]==col[y][1]) continue;\n\t\t\tans=min(d[x][0]+d[y][1]+w,ans);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nPS:\n\n1. \u535a\u4e3b\u8bed\u6587\u5b9e\u5728\u4e0d\u592a\u597d\uff0c\u53ef\u80fd\u8868\u8fbe\u4e0a\u6709\u4e9b\u95ee\u9898\uff0c\u6709\u7684\u70b9\u4e5f\u70b9\u7684\u4e0d\u900f\uff0c\u62b1\u6b49~~QAQ~~\n\n2. ~~\u5982\u679c\u4e0d\u7b97\u6700\u540e\u7684\u70b9\uff0c90\u8dd1\u7684\u6bd4AC\u7684\u8fd8\u5feb\u3002\u3002\u3002~~",
        "postTime": 1573525550,
        "uid": 113264,
        "name": "\u4e8c\u5206\u4e4b\u4e00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "\u6709\u8da3\u7684\u9898\u76ee\uff0c\u53c8\u597d\u60f3\u53c8\u597d\u7801\uff0c\u53ef\u8c13\u662f\u7701\u9009\u9898\u4e2d\u7684\u4e00\u80a1\u6e05\u6d41\n\n\u8003\u8651\u5982\u679c\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u7136\u540e\u66b4\u529b\u6c42\u51fa\u5230\u5176\u5b83\u70b9\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u53ef\u4ee5\u66b4\u529b\u89e3\u51b3\u95ee\u9898\n\n\u4f46\u662f\u6211\u4eec\u7a0d\u5fae\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff0c\u540c\u65f6\u628a**\u4e00\u4e9b\u70b9\u7684\u96c6\u5408**\u4f5c\u4e3a\u8d77\u70b9\uff0c\u8dd1\u51fa\u5230\u5176\u5b83\u5269\u4e0b\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u53d6\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u5c31\u76f8\u5f53\u4e8e\u540c\u65f6\u505a\u4e86\u591a\u6b21\u731c\u6d4b\n\n\u5177\u4f53\u5b9e\u73b0\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u5efa\u4e2a\u8d85\u7ea7\u8d77\u70b9$st$\u548c\u7ec8\u70b9$tar$\uff0c\u5982\u679c\u8fd9\u4e2a\u5173\u952e\u70b9$x$\u4f4d\u4e8e\u8d77\u70b9\u96c6\u5408\u90a3\u4e48\u8fde\u4e00\u6761$st\\to x,val=0$\u7684\u8fb9\uff0c\u5728\u7ec8\u70b9\u96c6\u5408\u5c31\u8fde\u4e00\u6761$x\\to tar,val=0$\u7684\u8fb9\n\n\u6700\u540e$st\\to tar$\u7684\u6700\u77ed\u8def\u5373\u4e3a\u7b54\u6848\uff0c\u770b\u8d77\u6765\u5341\u5206\u7b80\u5355\n\n\u4f46\u662f\u6211\u4eec\u7ec6\u7ec6\u4e00\u60f3\u53d1\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u597d\u50cf\u5f88\u4f18\u79c0\uff0c\u5982\u679c\u6700\u540e\u7b54\u6848\u662f$x\\to y$\uff0c\u90a3\u4e48\u5982\u679c$x$\u88ab\u5206\u5230\u8d77\u70b9\u96c6\u5408\u91cc\u800c$y$\u88ab\u5206\u5230\u7ec8\u70b9\u96c6\u5408\u91cc\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u76f4\u63a5\u8dd1\u51fa\u4e86\u7b54\u6848\uff01\n\n\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u5230\u4e00\u4e2a**\u968f\u673a\u5316**\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u6bcf\u6b21\u7ed9\u6240\u6709\u5173\u952e\u70b9\u968f\u673a\u5206\u914d\u5230\u4e24\u8fb9\u7136\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u8fd9\u6837\u6b63\u786e\u7387\u5c31\u662f$\\frac{1}{4}$\n\n\u7531\u4e8e\u8dd1\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u662f$O(n\\log n)$\uff08\u7528DJ\uff09\uff0c\u56e0\u6b645s\u7684\u65f6\u9650\u6211\u4eec\u7a33\u59a5\u7684\u8dd1$20$\u6b21\u5de6\u53f3\uff0c\u8fd9\u6837\u9519\u8bef\u7684\u6982\u7387\u5c31\u662f\uff1a\n\n$$(\\frac{1}{4})^{20}\\approx 0.0031712\\approx\\frac{1}{315}$$\n\n\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\uff0c\u800c\u4e14\u6700\u5927\u70b9\u5728Luogu\u4e0a\u4ec5\u7528\u65f62100+ms\uff0c\u56e0\u6b64\u8dd1\u66f4\u5927\u7684$30,40$\u6b21\u90fd\u4e0d\u6210\u95ee\u9898\uff08\u5982\u679c\u6bd4\u8d5b\u7684\u65f6\u5019\u8fd8\u662f\u6c42\u7a33\u4e3a\u4e3b\uff0c\u540e\u9762\u5168T\u4e86\u5c31\u5f88\u5c34\u5c2c\uff09\n\n\u968f\u673a\u5316CODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstdlib>\n#include<queue>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\nconst int N=1e5+5,M=5e6+5;\nconst long long INF=1e18;\nstruct edge\n{\n    int to,nxt,v;\n}e[N+M]; int n,t,thead[N],head[N],a[N],cnt,tcnt,m,k,x,y,z,st,tar; long long dis[N];\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        char Fin[S],*A,*B;\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        #undef tc\n}F;\nclass SSSP\n{\n    private:\n        struct data\n        {\n            int id; long long val;\n            friend inline bool operator < (const data& A,const data& B)\n            {\n                return A.val>B.val;\n            }\n        }; priority_queue <data> hp; bool vis[N];\n    public:\n        #define to e[i].to\n        inline void Dijkstra(void)\n        {\n            RI i; for (i=st;i<=tar;++i) dis[i]=INF,vis[i]=0; dis[st]=0;\n            hp.push((data){st,0}); while (!hp.empty())\n            {\n                int now=hp.top().id; hp.pop(); if (vis[now]) continue;\n                vis[now]=1; for (i=head[now];i;i=e[i].nxt)\n                if (dis[to]>dis[now]+e[i].v) hp.push((data){to,dis[to]=dis[now]+e[i].v});\n            }\n        }\n        #undef to\n}G;\ninline void taddedge(CI x,CI y,CI z)\n{\n    e[++tcnt]=(edge){y,thead[x],z}; thead[x]=tcnt;\n}\ninline void addedge(CI x,CI y,CI z)\n{\n    e[++cnt]=(edge){y,head[x],z}; head[x]=cnt;\n}\ninline long long solve(long long ret=INF)\n{\n    RI i,j; for (F.read(n),F.read(m),F.read(k),i=1;i<=m;++i)\n    F.read(x),F.read(y),F.read(z),taddedge(x,y,z);\n    for (tar=n+1,i=1;i<=k;++i) F.read(a[i]);\n    for (i=1;i<=20;++i)\n    {\n        for (cnt=tcnt,j=st;j<=tar;++j) head[j]=thead[j];\n        for (j=1;j<=k;++j) if (rand()&1) addedge(st,a[j],0);\n        else addedge(a[j],tar,0); if (G.Dijkstra(),dis[tar]<ret) ret=dis[tar];\n    }\n    return ret;\n}\ninline void clear(void)\n{\n    for (RI i=st;i<=tar;++i) thead[i]=0; tcnt=0;\n}\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    for (srand(20030909),F.read(t);t;--t) printf(\"%lld\\n\",solve()),clear(); return 0;\n}\n```\n\n------\n\n\u597d\u5427\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e0b\u6b63\u786e\u505a\u6cd5\uff0c\u5927\u81f4\u5efa\u6a21\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u5c31\u662f\u5206\u914d\u70b9\u96c6\u7684\u65f6\u5019\u7a0d\u4f5c\u4fee\u6539\uff0c\u679a\u4e3e$n$\u8303\u56f4\u5185\u7684\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7f16\u53f7\u8fd9\u4e00\u4f4d\u4e0a\u4e3a$1$\u5c31\u653e\u5728\u8d77\u70b9\u4e00\u8fb9\uff0c\u53cd\u4e4b\n\n\u6b63\u786e\u6027\u8bc1\u660e\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5047\u8bbe\u7b54\u6848\u4e3a$x\\to y$\uff0c\u90a3\u4e48$x\\ne y$\uff0c\u56e0\u6b64$x,y$\u5fc5\u7136\u6709\u81f3\u5c11\u4e00\u4f4d\u5728\u4e8c\u8fdb\u5236\u4e0b\u4e0d\u540c\uff0c\u6545\u81f3\u5c11\u6709\u4e00\u6b21\u88ab\u5206\u5728\u4e86\u4e24\u4fa7\uff0c\u7ed3\u8bba\u6210\u7acb\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4ee5$O(n\\log^2 n)$\u7684\u590d\u6742\u5ea6\u901a\u8fc7\u6b64\u9898\u4e86\uff0c\u6ce8\u610f\u7b54\u6848\u4e3a\u6709\u5411\u70b9\u5bf9\uff0c\u56e0\u6b64\u8981\u679a\u4e3e\u4e24\u8fb9\n\n\u4e8c\u8fdb\u5236\u5206\u7ec4CODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\nconst int N=1e5+5,M=5e6+5;\nconst long long INF=1e18;\nstruct edge\n{\n    int to,nxt,v;\n}e[N+M]; int n,t,thead[N],head[N],a[N],cnt,tcnt,m,k,x,y,z,st,tar; long long dis[N];\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        char Fin[S],*A,*B;\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        #undef tc\n}F;\nclass SSSP\n{\n    private:\n        struct data\n        {\n            int id; long long val;\n            friend inline bool operator < (const data& A,const data& B)\n            {\n                return A.val>B.val;\n            }\n        }; priority_queue <data> hp; bool vis[N];\n    public:\n        #define to e[i].to\n        inline void Dijkstra(void)\n        {\n            RI i; for (i=st;i<=tar;++i) dis[i]=INF,vis[i]=0; dis[st]=0;\n            hp.push((data){st,0}); while (!hp.empty())\n            {\n                int now=hp.top().id; hp.pop(); if (vis[now]) continue;\n                vis[now]=1; for (i=head[now];i;i=e[i].nxt)\n                if (dis[to]>dis[now]+e[i].v) hp.push((data){to,dis[to]=dis[now]+e[i].v});\n            }\n        }\n        #undef to\n}G;\ninline void taddedge(CI x,CI y,CI z)\n{\n    e[++tcnt]=(edge){y,thead[x],z}; thead[x]=tcnt;\n}\ninline void addedge(CI x,CI y,CI z)\n{\n    e[++cnt]=(edge){y,head[x],z}; head[x]=cnt;\n}\ninline long long solve(long long ret=INF)\n{\n    RI i,j; for (F.read(n),F.read(m),F.read(k),i=1;i<=m;++i)\n    F.read(x),F.read(y),F.read(z),taddedge(x,y,z);\n    for (tar=n+1,i=1;i<=k;++i) F.read(a[i]);\n    for (i=1;i<=(n<<1);i<<=1)\n    {\n        for (cnt=tcnt,j=st;j<=tar;++j) head[j]=thead[j];\n        for (j=1;j<=k;++j) if (a[j]&i) addedge(st,a[j],0);\n        else addedge(a[j],tar,0); if (G.Dijkstra(),dis[tar]<ret) ret=dis[tar];\n    }\n    for (i=1;i<=(n<<1);i<<=1)\n    {\n        for (cnt=tcnt,j=st;j<=tar;++j) head[j]=thead[j];\n        for (j=1;j<=k;++j) if (a[j]&i) addedge(a[j],tar,0);\n        else addedge(st,a[j],0); if (G.Dijkstra(),dis[tar]<ret) ret=dis[tar];\n    }\n    return ret;\n}\ninline void clear(void)\n{\n    for (RI i=st;i<=tar;++i) thead[i]=0; tcnt=0;\n}\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    for (F.read(t);t;--t) printf(\"%lld\\n\",solve()),clear(); return 0;\n}\n```\n\n",
        "postTime": 1559482077,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u7a9d\u53c8\u6765\u63d0\u4f9b\u4e00\u79cd~~\u7384\u5b66~~\u795e\u5947\u7684\u505a\u6cd5 \u67d3\u8272\u3001\u500d\u589e\u4ec0\u4e48\u7684\u90fd\u6ca1\u6709\uff0c\uff0c\uff0c  \n\u601d\u8def\u5341\u5206\u7b80\u5355\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9x\uff0c\u8bb0\u5f55\u4e24\u4e2adis\uff0c\u5373\u79bbx\u6700\u8fd1\u7684\u4e24\u4e2a\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u3002\n\u5f53\u7136\uff0c\u8fd9\u4e24\u4e2a\u5173\u952e\u70b9\u4e0d\u80fd\u4e00\u6837\uff0c\u6240\u4ee5\u4e5f\u8981\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u662f\u4ece\u54ea\u4e2a\u5173\u952e\u70b9\u8d70\u8fc7\u6765\u7684\u3002\n\u7136\u540e\u628a\u6240\u6709\u5173\u952e\u70b9push\u8fdb\u4f18\u5148\u961f\u5217\uff0c\u4e0a\u4e00\u4e2aDijkstra\u6a21\u677f\u6765\u6c42\u51fa\u6700\u5c0f\u7684\u4e24\u6761\u8def\u5f84\u5c31OK\u4e86\u3002\n\u6700\u540e\u5bf9\u6240\u6709\u5173\u952e\u70b9\u7684\u7b2c\u4e8c\u8fd1\u7684\u8ddd\u79bb\u6c42min\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e0a\u9762\u53ef\u80fd\u8bf4\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u770b\u4ee3\u7801\u628aqwq\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define u32 unsigned\n#define i64 long long\n#define u64 unsigned long long\n#define f80 long double\n#define rgt register\n#define getchar() ( p1 == p2 && ( p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 = bf ) == p2 ? EOF : *p1++ )\nusing namespace std;\n#define MAXN 100005\n#define MAXM 500005\n\nchar bf[1 << 21], *p1, *p2;\ntemplate<typename T>\ninline void read( rgt T &x ){ x = 0; rgt char t, flg(0);\n\tfor ( t = getchar(); !isdigit(t); t = getchar() ) flg = t == '-';\n\tfor ( ; isdigit(t); t = getchar() ) x = x * 10 + ( t & 15 ); x = flg ? -x : x;\n}\n\nclock_t __t_bg, __t_ed;\nstruct node{\n\ti64 v; int w; node(){} node( i64 x, int y ):v(x), w(y){}\n\tbool operator < ( const node &t )const{ return v > t.v; }\n};\n#define pi pair<node, int>\nint N, M, K, T, itr[MAXN]; node dis[MAXN][2]; char vis[MAXN];\nint hd[MAXN], nxt[MAXM], to[MAXM], val[MAXM], tot;\ninline void add( int x, int y, int z ){ nxt[++tot] = hd[x], hd[x] = tot, to[tot] = y, val[tot] = z; }\n\npriority_queue<pi> Q;\n\nsigned main(){\n\t__t_bg = clock();\n\tread(T);\n\twhile( T-- ){\n\t\tread(N), read(M), read(K), memset( hd, 0, sizeof hd ), tot = 0;\n\t\tfor ( rgt int i = 1, x, y, z; i <= M; ++i )\n\t\t\tread(x), read(y), read(z), add(x,y,z);\n\t\tmemset( dis, 0x7f, sizeof dis ), memset( vis, 0, sizeof vis );\n\t\tfor ( rgt int i = 1; i <= K; ++i ) read(itr[i]), Q.push(make_pair(dis[itr[i]][0] = node(0, itr[i]), itr[i]));//\u6240\u6709\u5173\u952e\u70b9\u5165\u961f\u5217\n\t\twhile( !Q.empty() ){\n\t\t\trgt int u(Q.top().second), w(Q.top().first.w);//u\u8868\u793a\u5f53\u524d\u5230\u54ea\u4e2a\u70b9\uff0cw\u8868\u793a\u4ece\u54ea\u4e2a\u5173\u952e\u70b9\u8fc7\u6765\uff0ct\u8868\u793a\u5f53\u524d\u8d70\u7684\u957f\u5ea6\n\t\t\trgt i64 t(Q.top().first.v); Q.pop();\n\t\t\tif ( vis[u] >= 2 ) continue;\n\t\t\t++vis[u];\n\t\t\tfor ( rgt int i = hd[u], v; i; i = nxt[i] ){\n\t\t\t\tv = to[i];\n\t\t\t\tif ( w != dis[v][0].w ){//\u6ce8\u610f\u5224\u65ad\u4e00\u4e9b\u60c5\u51b5\n\t\t\t\t\tif ( dis[v][0].v > t + val[i] ) dis[v][1] = dis[v][0], dis[v][0] = node( t + val[i], w ), Q.push(make_pair(dis[v][0], v));\n\t\t\t\t\telse if ( dis[v][1].v > t + val[i] ) dis[v][1] = node( t + val[i], w ), Q.push(make_pair(dis[v][1], v));\n\t\t\t\t} else if ( dis[v][0].v > t + val[i] ) dis[v][0].v = t + val[i], Q.push(make_pair(dis[v][0], v));\n\t\t\t}\n\t\t} rgt i64 ans(LONG_LONG_MAX);\n\t\tfor ( rgt int i = 1; i <= K; ++i ) ans = min( ans, dis[itr[i]][1].v );\n\t\tprintf( \"%lld\\n\", ans );\n\t}\n\t__t_ed = clock(), fprintf( stderr, \"time: %.5lfs\\n\", double( __t_ed - __t_bg ) / CLOCKS_PER_SEC );\n\treturn 0;\n}\n```",
        "postTime": 1558860211,
        "uid": 70786,
        "name": "_louhc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    },
    {
        "content": "\u8fd9\u4e48**\u7b80\u5355**\u7684\u9898\uff0cVenus \u90fd\u8bb2\u4e0d\u6e05\u695a\uff0c\u592a\u5f3a\u4e86\uff01\n\n\n# noteskey\n\n\u4e24\u6b21\u591a\u6e90\u6700\u77ed\u8def\u8dd1\u8dd1\uff08\u6b63\u56fe\u4e00\u904d\u53cd\u56fe\u4e00\u904d\uff09\u7136\u540e\u679a\u4e3e\u8fb9\uff1f\n\n\u600e\u4e48 Venus \u5c31\u4e00\u53e5\u8bdd AC \u4e86\u5462\n\n\u603b\u4e4b\u5c31\u662f\n\n>\u6b63\u56fe\u4e0a\u4ece k \u4e2a\u5173\u952e\u70b9\u51fa\u53d1\u8dd1 $dijkstra$  \uff0c\u8bb0\u67d0\u4e2a\u70b9\u79bb\u6700\u8fd1\u7684\u5173\u952e\u70b9\u8ddd\u79bb\u4e3a $dis[0][i]$ \n\n>\u53cd\u56fe\u4e0a\u4e5f\u4ece k \u4e2a\u5173\u952e\u70b9\u51fa\u53d1\u8dd1 $dijkstra$ \uff0c\u8ddd\u79bb\u8bb0\u4e3a $dis[1][i]$ \n\n>\u679a\u4e3e\u6b63\u56fe\u4e2d\u7684\u8fb9 $u->v:  w $ \uff0c \u7528 $dis[0][u]+dis[1][v]+w $\u66f4\u65b0\u7b54\u6848\n\n\n# watch out\n\n\u7cbe\u5ea6\u95ee\u9898...\u5982\u679c\u51fa\u4e8b\u7684\u8bdd\u5c31\u67e5\u67e5\u6709\u6ca1\u6709\u4ec0\u4e48 long long \u5199\u6210 int \u5427\n\n\n\n\n# code\n\n```cpp\n//by Judge\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define Rg register\n#define fp(i,a,b) for(Rg int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(Rg int i=(a),I=(b)-1;i>I;--i)\n#define go(G,u) for(Rg int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define P pair<ll,int>\n#define ll long long\n#define se second\n#define fi first\nusing namespace std;\nconst int M=1e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ntemplate<class T>inline bool cmin(T& a,T b){return a>b?a=b,1:0;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} int n,m,k,id[2][M],a[M]; ll dis[2][M]; priority_queue<P> q;\nstruct Gr{ int pat,head[M]; struct Edge{int to,val,nxt;}e[M*5];\n\tinline void clear(Rg int n){ pat=0,memset(head,0,(n+2)<<2); }\n\tinline void add(int u,int v,int w){ e[++pat]={v,w,head[u]},head[u]=pat; }\n}G[2];\ninline void dijkstra(int p){ memset(dis[p],60,(n+2)<<3),memset(id[p],0,(n+2)<<2);\n\tfp(i,1,k) dis[p][a[i]]=0,id[p][a[i]]=a[i],q.push(P(0,a[i]));\n\twhile(!q.empty()){ Rg int u=q.top().se; Rg ll d=-q.top().fi; q.pop();\n\t\tif(d==dis[p][u]) go(G[p],u) if(cmin(dis[p][v],d+G[p].e[i].val))\n\t\t\tid[p][v]=id[p][u],q.push(P(-dis[p][v],v));\n\t}\n}\nint main(){\n\tfp(T,1,read()){ n=read(),m=read(),k=read();\n\t\tG[0].clear(n),G[1].clear(n); Rg int x,y,z;\n\t\tfp(i,1,m){ x=read(),y=read(),z=read();\n\t\t\tif(x^y) G[0].add(x,y,z),G[1].add(y,x,z);\n\t\t} fp(i,1,k) a[i]=read();\n\t\tdijkstra(0),dijkstra(1); ll ans=1e18;\n\t\tfp(u,1,n) go(G[0],u){ Rg int w=G[0].e[i].val;\n\t\t\tif(id[0][u]&&id[1][v]&&id[0][u]^id[1][v])\n\t\t\t\tcmin(ans,dis[0][u]+dis[1][v]+w);\n\t\t} printf(\"%lld\\n\",ans);\n\t} return 0;\n}\n```\n",
        "postTime": 1555825148,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5304 \u3010[GXOI/GZOI2019]\u65c5\u884c\u8005\u3011"
    }
]