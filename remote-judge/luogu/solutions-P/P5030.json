[
    {
        "content": "## \u524d\u8a00\n\n[\u9898\u76ee\u4f20\u9001\u95e8\uff01](https://www.luogu.com.cn/problem/P5030)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f](https://www.cnblogs.com/liangbowen/p/17064208.html)\n\n\u4e00\u9053\u6ca1\u5565\u610f\u601d\u7684\u9898\u76ee\uff0c\u4f46\u662f\u597d\u50cf\u5f88\u591a\u9898\u89e3\u90fd\u8fc7\u4e0d\u4e86\u73b0\u5728\u7684\u6570\u636e\uff1f\n\n## \u601d\u8def\n\n\u53ea\u4e0d\u8fc7\u662f\u628a\u6b63\u5e38\u9898\u76ee\u7684\u9a6c\uff08$1, 2$\uff09\u6362\u6210\u4e86\u53e6\u4e00\u79cd\u4e1c\u897f\uff08$1, 3$\uff09\u3002\n\n\u5f88\u5957\u8def\u5730\uff0c\u9ed1\u767d\u67d3\u8272\uff0c\u6e90\u70b9\u5411\u9ed1\u70b9\u8fde\u8fb9\uff0c\u767d\u70b9\u5411\u9ed1\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u90fd\u662f $1$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e24\u4e2a\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u7684\u70b9 $(x, y)$ \u4e0e $(dx, dy)$\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u969c\u788d\uff0c\u90a3\u4e48\u5c31\u8fde\u5bb9\u91cf\u662f $1$ \u7684\u8fb9\u3002\u8fd9\u91cc\u7684\u4e24\u4e2a\u70b9\u5e94\u8be5\u4fdd\u8bc1\u989c\u8272\u4e0d\u540c\u3002\n\n\u7b54\u6848\u5373\u4e3a\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u672c\u9898\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u540c\u7684\u70b9\u5728\u4e8e\u9ed1\u767d\u67d3\u8272\u3002\u6b63\u5e38\u6211\u4eec\u90fd\u662f\u6309 $(x + y)$ \u5947\u5076\u6027\u770b\uff0c\u800c\u8fd9\u9898\u6211\u4eec\u6309 $x$ \u7684\u5947\u5076\u6027\u770b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ij1ni2p2.png)\n\n## \u4ee3\u7801\n\n\u4e3a\u5565\u5f88\u591a\u9898\u89e3\u90fd\u8fc7\u4e0d\u53bb\uff1f\u56e0\u4e3a\u66f4\u65b0\u7684\u6570\u636e\u91cc\uff0c**\u969c\u788d\u7684\u5750\u6807\u53ef\u80fd\u6709\u76f8\u540c\u7684**\u3002\n\n\u8fd9\u4e2a\u4e5f\u5f88\u5bb9\u6613\u5904\u7406\uff0c\u7edf\u8ba1\u65f6\u4fdd\u8bc1\u4e0d\u91cd\u590d\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int R = 205, N = 114514, inf = 0x7f7f7f7f;\nstruct Edge {int now, nxt, w;} e[1919810];\nint head[N], _head[N], cur = 1;\nvoid ad(int u, int v, int w)\n{\n    e[++cur].now = v, e[cur].nxt = head[u], e[cur].w = w;\n    head[u] = cur;\n}\nvoid add(int u, int v, int w) {ad(u, v, w), ad(v, u, 0);}\nint s, t;\nint dis[N]; bool vis[N];\nbool bfs()\n{\n    queue <int> q;\n    memset(vis, false, sizeof vis);\n    q.push(s), vis[s] = true, dis[s] = 0, _head[s] = head[s];\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = e[i].nxt)\n        {\n            int v = e[i].now;\n            if (vis[v] || !e[i].w) continue;\n            vis[v] = true, dis[v] = dis[u] + 1, _head[v] = head[v];\n            if (v == t) return true;\n            q.push(v);\n        }\n    }\n    return false;\n}\nint dfs(int u, int maxflow)\n{\n    if (u == t) return maxflow;\n    int flow = 0;\n    for (int i = _head[u]; i && flow < maxflow; i = e[i].nxt)\n    {\n        _head[u] = i;\n        int v = e[i].now;\n        if (dis[v] != dis[u] + 1 || !e[i].w) continue;\n        int ww = dfs(v, min(maxflow - flow, e[i].w));\n        if (!ww) dis[v] = -inf;\n        e[i].w -= ww, e[i ^ 1].w += ww, flow += ww;\n    }\n    return flow;\n}\nint dinic()\n{\n    int ans = 0, flow;\n    while (bfs())\n        while (flow = dfs(s, inf))\n            ans += flow;\n    return ans;\n}\nint n, m, k; bool a[R][R];\nint id(int x, int y) {return (x - 1) * m + y;}\nconst int dict[8][2] = {{1, 3}, {1, -3}, {-1, 3}, {-1, -3}, {3, 1}, {3, -1}, {-3, 1}, {-3, -1}};\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &k);\n    s = 0, t = n * m + 1;\n\n    int sum = n * m;\n    while (k--)\n    {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        if (!a[x][y]) sum--;\n        a[x][y] = true;\n    }\n    for (int x = 1; x <= n; x++)\n        for (int y = 1; y <= m; y++)\n            if (x & 1) add(s, id(x, y), 1); //\u6309\u884c\u9ed1\u767d\u67d3\u8272\n            else add(id(x, y), t, 1);\n    for (int x = 1; x <= n; x++)\n        for (int y = 1; y <= m; y++)\n            if ((x & 1) && !a[x][y])\n                for (int i = 0; i < 8; i++)\n                {\n                    int dx = x + dict[i][0], dy = y + dict[i][1];\n                    if (dx < 1 || dx > n || dy < 1 || dy > m) continue;\n                    if (a[dx][dy]) continue;\n                    add(id(x, y), id(dx, dy), 1); \n                }\n    cout << sum - dinic(); //\u6700\u5927\u72ec\u7acb\u96c6\n    return 0;\n}\n```\n\n\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u5927\u5bb6\uff01",
        "postTime": 1674352550,
        "uid": 367488,
        "name": "liangbowen",
        "ccfLevel": 0,
        "title": "P5030 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e10%\u7684\u6570\u636e\uff0c\u679a\u4e3e\u6bcf\u4e2a\u683c\u5b50\u653e\u6216\u4e0d\u653e\uff0c\u590d\u6742\u5ea6O(2^(n^2)).\r\n\r\n\u5bf9\u4e8e80%\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u767d\u683c\u4e0a\u7684\u957f\u8116\u5b50\u9e7f\u53ea\u80fd\u8df3\u5230\u767d\u683c\uff0c\u9ed1\u683c\u4e0a\u7684\u957f\u8116\u5b50\u9e7f\u53ea\u80fd\u8df3\u5230\u9ed1\u683c\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u9ed1\u3001\u767d\u683c\u5b50\u5206\u5f00\u8003\u8651\u3002\u82e5\u4e24\u4e2a\u683c\u5b50\u662f\u201c\u76ee\u201d\u5b57\u7684\u5bf9\u89d2\uff08\u80fd\u4e92\u76f8\u653b\u51fb\u5230\uff09\uff0c\u5219\u5728\u4ed6\u4eec\u5bf9\u5e94\u7684\u8282\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u8fde\u51fa\u6765\u7684\u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5efa\u51fa\u7684\u56fe\u786e\u5b9e\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\r\n\r\n\u6c42\u4e0a\u8ff0\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002\r\n\r\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u51fa\u9898\u4eba\u5728\u8bf4\u660e\u4e2d\u8bf4\u8fc7\u8003\u8651\u56fe\u7684\u904d\u5386\u987a\u5e8f\u5bf9\u6548\u7387\u5f71\u54cd\u3002\u8003\u8651\u5308\u7259\u5229\u7b97\u6cd5\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u82e5\u5f53\u524d\u70b9\u627e\u5230\u7684\u5339\u914d\u8fb9\u662f\u6682\u65f6\u6ca1\u6709\u5339\u914d\u51b2\u7a81\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u5339\u914d\u7ed3\u675fdfs\uff0c\u5426\u5219\u5c06\u8fdb\u884c\u590d\u6742\u7684\u589e\u5e7f\u3002\u56e0\u6b64\uff0c\u4ece(x+3,x-1)\u5f00\u59cb(\u5373\u4e0b\u504f\u5de6)\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u53ef\u4ee5\u51cf\u5c11\u51b2\u7a81\u7684\u6982\u7387\uff0c(\u4e0a\u65b9\u7684\u53ef\u5339\u914d\u70b9\u88ab\u4e4b\u524d\u7684\u70b9\u5339\u914d\u7684\u53ef\u80fd\u6027\u8f83\u9ad8\u3002)\uff0c\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u4e3aO(\u80fd\u8fc7)\u3002\r\n\r\n\u6807\u7a0b\u63d0\u4f9b\uff1a\u671d\u7530\u8bd7\u4e43/X\u3002",
        "postTime": 1542152978,
        "uid": 2491,
        "name": "\u8bd7\u4e43",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u6ca1\u6709\u770b\u5230\u5efa\u6a21\u65b9\u5f0f\u548c\u6211\u4e00\u6837\u7684dalao\u2026\u2026\u6597\u80c6\u6765\u5199\u4e00\u4e0b\n\n\u9898\u76ee\u5f88\u660e\u663e\uff0c\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff0c\u6240\u4ee5\u5c31\u662f\u5e38\u89c1\u7684\u5efa\u6a21\u65b9\u6cd5\uff0c\u9ed1\u767d\u67d3\u8272\uff0c\u5206\u522b\u5411\u8d85\u7ea7\u6e90\u8d85\u7ea7\u6c47\u8fde\u8fb9\uff0c\u7136\u540e\u628a\u80fd\u653b\u51fb\u5230\u7684\u70b9\u5206\u522b\u8fde\u8d77\u6765\n\n\u5982\u679c\u653b\u51fb\u65b9\u5f0f\u548c\u9a6c\u4e00\u6837\u662f$1*2$\u7684\u8bdd\u5e94\u8be5\u662f\u6309\u884c\u5217\u5947\u5076\u6027\u8fde\u8fb9\uff0c\u4f46\u8fd9\u9898\u7684\u653b\u51fb\u65b9\u5f0f\u662f$1*3$\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6309\u7167**\u884c\u5947\u5076\u6027**\u8fde\u8fb9\uff0c\u8fd9\u4e5f\u662f\u8fd9\u9053\u9898\u6700\u7279\u6b8a\u7684\u5730\u65b9\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147400000\nusing namespace std;\nqueue <int> q;\nint cnt=1,fst[50005],nxt[500005],to[500005],w[500005],cur[50005];\nint n,m,K,dep[50005],S,T;\nint dx[]={0,3,3,1,1,-3,-3,-1,-1},dy[]={0,1,-1,3,-3,1,-1,3,-3};\nint blk[205][205];\nvoid AddEdge(int u,int v,int c)\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n    w[cnt]=c;\n}\nbool Bfs()\n{\n    memset(dep,0,sizeof(dep));\n    q.push(S);\n    dep[S]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=fst[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(!dep[v] && w[i])\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[T];\n}\nint Dfs(int u,int flow)\n{\n    if(u==T || !flow) return flow;\n    int used=0;\n    for(int i=cur[u];i;i=nxt[i])\n    {\n        cur[u]=i;\n        int v=to[i];\n        if(dep[v]==dep[u]+1 && w[i])\n        {\n            int fl=Dfs(v,min(flow,w[i]));\n            if(fl)\n            {\n                used+=fl;\n                flow-=fl;\n                w[i]-=fl;\n                w[i^1]+=fl;\n                if(!flow) break;\n            }\n        }\n    }\n    return used;\n}\nint Dinic()//\u5f27\u4f18\u5316Dinic\uff0c\u4e0d\u8c08\n{\n    int sum=0;\n    while(Bfs())\n    {\n        memcpy(cur,fst,sizeof(fst));\n        sum+=Dfs(S,inf);\n    }\n    return sum;\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&K);\n    S=0;\n    T=n*m+1;\n    for(int i=1;i<=K;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        blk[x][y]=1;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            int id=(i-1)*m+j;\n            if(i&1)//\u6309\u884c\u5947\u5076\u6027\u8fde\u8fb9\n            {\n                AddEdge(S,id,1);\n                AddEdge(id,S,0);\n            }\n            else\n            {\n                AddEdge(id,T,1);\n                AddEdge(T,id,0);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(blk[i][j]) continue;\n            int id=(i-1)*m+j;\n            if(i&1)\n            {\n                for(int k=1;k<=8;k++)//\u628a\u80fd\u653b\u51fb\u5230\u7684\u8fb9\u8fde\u8d77\u6765\n                {\n                    int nx=i+dx[k],ny=j+dy[k];\n                    if(nx<1 || nx>n || ny<1 || ny>m || blk[nx][ny]) continue;\n                    int nid=(nx-1)*m+ny;\n                    AddEdge(id,nid,1);\n                    AddEdge(nid,id,0);\n                }\n            }\n        }\n    }\n    int ans=n*m-K-Dinic();//\u6c42\u89e3\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1544231124,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u628a\u9898\u76ee\u62bd\u8c61\u4e00\u4e0b\uff0c\u5c31\u662f\u5728\u4e00\u4e2a\u68cb\u76d8\u4e2d\uff0c\u9009\u62e9\u4e00\u4e9b\u70b9\uff0c\u4f7f\u8fd9\u4e9b\u70b9\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c\u8981\u4f7f\u9009\u62e9\u7684\u70b9\u6700\u591a\u3002  \n\u5c06\u8fd9\u8f6c\u5316\u6210\u4e8c\u5206\u56fe\u95ee\u9898\uff0c\u6bcf\u4e2a\u683c\u5b50\u4e0a\u7684\u70b9\u5bf9\u5e94\u4e8c\u5206\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5c06\u4e0d\u80fd\u4e00\u8d77\u653e\u7684\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6  \n\u5173\u952e\u662f\u5982\u4f55\u5c06\u8fd9\u4e9b\u70b9\u5206\u4e3a\u4e24\u4e2a\u70b9\u96c6\uff0c\u5982\u679c\u6309\u7167\u56fe\u4e2d\u9ed1\u767d\u67d3\u8272\u6765\u5206\uff0c\u90a3\u4e48\u5728\u540c\u8272\u70b9\u4e2d\u5c31\u4f1a\u6709\u8fde\u8fb9\uff0c\u9014\u4e2d\u5c31\u662f\uff0c\u8fd9\u6837\u4e0d\u7b26\u5408\u4e8c\u5206\u56fe\u7684\u5b9a\u4e49  \n\u664b\u56fd\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u70b9\u7684\u653b\u51fb\u8303\u56f4\u4e2d,\u5217\u53f7-1,-3,+1,+3\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5173\u4e8e\u5217\u53f7\u5212\u5206\u70b9\u96c6\uff0c\u5076\u6570\u5217\u5c5e\u4e8e$X$\u96c6\uff0c\u5947\u6570\u5217\u5c5e\u4e8e$Y$\u96c6\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5f88\u597d\u5730\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8c\u5206\u56fe\u95ee\u9898\u3002\n\n\n**\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6=\u70b9\u6570-\u6700\u5927\u5339\u914d**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint to,next;\n}e[1000000];\nint h[50005],n,m,k,a[205][205],pop=0;\nint dx[8]={-3,3,-3,3,-1,1,-1,1};\nint dy[8]={1,1,-1,-1,3,3,-3,-3};\nvoid add(int x,int y){\n\tpop++;\n\te[pop].next=h[x];\n\th[x]=pop;\n\te[pop].to=y;\n}\nint f(int x,int y){\n\treturn (x-1)*m+y;\n}\nint vis[40005],match[40005];\nbool find(int p){\n\tfor(int i=h[p];i;i=e[i].next){\n\t\tif(vis[e[i].to])continue;\n\t\tvis[e[i].to]=1;\n\t\tif(!match[e[i].to]||find(match[e[i].to])){\n\t\t\tmatch[e[i].to]=p;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n} \nint main()\n{\n\tmemset(h,0,sizeof(h));\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tmemset(a,0,sizeof(a));\n\tint ans=n*m;\n\tfor(int i=1;i<=k;i++){\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\ta[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t  for(int j=1;j<=m;j++)\n\t    if(i%2==0)\n\t    if(!a[i][j])\n\t      for(int k=0;k<8;k++){\n\t      \tint x=i+dx[k],y=j+dy[k];\n\t      \tif(x>0&&y>0&&x<=n&&y<=m&&!a[x][y]){\n\t      \t\tadd(f(i,j),f(x,y));\n\t\t\t  }\n\t\t  }\n\tint sum=0;memset(match,0,sizeof(match));\n\tfor(int i=1;i<=f(n,m);i++){\n\t\tmemset(vis,0,sizeof(vis));\n\t\tif(find(i))\n\t\t  sum++;\n\t}\n\tprintf(\"%d\\n\",ans-sum-k);\n\treturn 0;\n}\n/*\n8 7 5\n1 1\n5 4\n2 3\n4 7\n8 3\n*/\n```",
        "postTime": 1547350390,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u9996\u5148\uff0c\u6ca1\u6709\u5947\u73af\u7684\u7b80\u5355\u65e0\u5411\u56fe\u4e00\u5b9a\u662f\u4e8c\u5206\u56fe\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u8981\u628a\u80fd\u653b\u51fb\u5230\u7684\u70b9\u5bf9\u8fde\u4e0a\u8fb9\u5373\u53ef\u3002\u8fd9\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\n\n\u8bc1\u660e\uff1a\n\n\u957f\u8116\u5b50\u9e7f\u4e00\u5171\u67098\u79cd\u8d70\u6cd5\uff0c\u5206\u522b\u4e3a$(+3,+1)$,$(+3,-1)$,$(+1,+3)$,$(+1,-3)$,$(-3,+1)$,$(-3,-1)$,$(-1,+3)$,$(-1,-3)$\u3002\n\n\u5047\u8bbe\u5b83\u5728\u4e00\u4e2a\u70b9\u4e0a\uff0c8\u79cd\u8d70\u6cd5\u5206\u522b\u8d70\u4e86$a,b,c,d,e,f,g,h$\u6b65\uff0c\u8d70\u56de\u4e86\u51fa\u53d1\u70b9\u3002\n\n\u5219\u5fc5\u987b\u6ee1\u8db3$3(a+b-e-f)+(c+d-g-h)=0$\uff0c\u5373\u884c\u7684\u53d8\u5316\u91cf\u4e3a0\u3002\n\n\u90a3\u4e48\u663e\u7136$a+b-e-f$\u548c$c+d-g-h$\u540c\u5947\u6216\u540c\u5076\u3002\n\n\u5219$a+b+c+d+e+f+g+h$\u4e00\u5b9a\u662f\u4e2a\u5076\u6570\u3002\n\n\u7528\u5217\u7684\u53d8\u5316\u91cf\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7ed3\u8bba\u3002\n\n\u6240\u4ee5\uff0c\u8fde\u6210\u7684\u56fe\u4e00\u5b9a\u53ea\u5e26\u5076\u73af\uff0c\u800c\u6ca1\u6709\u5947\u73af\u3002\u6240\u4ee5\u662f\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u5728\u4e8c\u5206\u56fe\u91cc\u9009\u6700\u591a\u7684\u70b9\uff0c\u4f7f\u5f97\u4e24\u4e24\u6ca1\u6709\u8fde\u8fb9\u3002\u5373\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define inf 0x3fffffff\nconst int dx[]={3,3,1,1,-3,-3,-1,-1},dy[]={1,-1,3,-3,1,-1,3,-3};\nint n,m,k,id[233][233],node,head[40004],T,lr[233][233],cnt=1,dep[40004],iter[40004];\nstruct edge{\n\tint to,nxt,cap;\n}e[6666666];\ninline void addedge(int u,int v){\n\te[++cnt]=(edge){v,head[u],1};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0};head[v]=cnt;\n}\nvoid dfs(int x,int y,bool o){\n\tid[x][y]=++node;\n\tlr[x][y]=o;\n\tfor(int i=0;i<8;++i){\n\t\tint fx=x+dx[i],fy=y+dy[i];\n\t\tif(fx>0&&fy>0&&fx<=n&&fy<=m){\n\t\t\tif(!id[fx][fy])dfs(fx,fy,!o);\n\t\t\tif(id[fx][fy]!=-1){\n\t\t\t\tif(o)addedge(id[fx][fy],id[x][y]);else\n\t\t\t\taddedge(id[x][y],id[fx][fy]);\n\t\t\t}\n\t\t}\n\t}\n}\nstd::queue<int>q;\nvoid bfs(){\n\t*dep=1;\n\tq.push(0);\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\tif(e[i].cap&&!dep[e[i].to]){\n\t\t\tdep[e[i].to]=dep[u]+1;\n\t\t\tq.push(e[i].to);\n\t\t}\n\t}\n}\nint dfs(int u,int f){\n\tif(!f||u==T)return f;\n\tfor(int&i=iter[u];i;i=e[i].nxt)\n\tif(e[i].cap&&dep[e[i].to]>dep[u]){\n\t\tint d=dfs(e[i].to,std::min(f,e[i].cap));\n\t\tif(d){\n\t\t\te[i].cap-=d;\n\t\t\te[i^1].cap+=d;\n\t\t\treturn d;\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic(){\n\tfor(int flow=0,f;;){\n\t\tmemset(dep,0,sizeof dep);\n\t\tbfs();\n\t\tif(!dep[T])return flow;\n\t\tmemcpy(iter,head,sizeof head);\n\t\twhile(f=dfs(0,inf))flow+=f;\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=k;++i){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tid[x][y]=-1;\n\t}\n\tfor(int i=1;i<=n;++i)\n\tfor(int j=1;j<=m;++j)\n\tif(!id[i][j])dfs(i,j,0);\n\tT=++node;\n\tfor(int i=1;i<=n;++i)\n\tfor(int j=1;j<=m;++j)\n\tif(id[i][j]!=-1){\n\t\tif(lr[i][j])addedge(id[i][j],T);else\n\t\taddedge(0,id[i][j]);\n\t}\n\tprintf(\"%d\\n\",n*m-k-dinic());\n\treturn 0;\n}\n```",
        "postTime": 1543556965,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u53d1\u73b0\u8fd9\u5f20\u56fe\u6709\u70b9\u773c\u719f\uff0c\u4e0e[\u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.com.cn/problem/P3355)\u95ee\u9898\u5f88\u50cf\u3002\n\n\u6309\u7167\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u7684\u89e3\u6cd5\uff0c\u5bf9\u4e8e\u56fe\u9ed1\u767d\u67d3\u8272\u540e\u8fdb\u884c\u8fde\u8fb9\u6c42\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u6e90\u70b9\u5411\u6bcf\u4e2a\u767d\u70b9\u3001\u6bcf\u4e2a\u9ed1\u70b9\u5411\u6c47\u70b9\u90fd\u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u767d\u70b9\uff0c\u4ece\u5b83\u5411\u6240\u80fd\u5230\u8fbe\u7684\u9ed1\u70b9\u8fde\u5bb9\u91cf\u65e0\u7a77\u5927\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u8dd1\u51fa\u6765\u7684\u6700\u5927\u6d41\u4e5f\u5c31\u662f\u6700\u5c0f\u5272\uff0c\u7528\u603b\u6570\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\u3002\n\n\u539f\u7406\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u6bcf\u4e2a\u767d\u70b9\u548c\u5b83\u6240\u8fde\u5411\u7684\u9ed1\u70b9\u80af\u5b9a\u662f\u4e0d\u80fd\u540c\u65f6\u653e\u957f\u8116\u5b50\u9e7f\u7684\uff0c\u6240\u4ee5\u8d4b\u503c\u4e3a\u65e0\u7a77\u5927\u662f\u4e3a\u4e86\u9632\u6b62\u88ab\u5220\uff0c\u800c\u5220\u53bb\u4e00\u6761\u8fb9\u662f\u8868\u793a\u4e0d\u9009\u8fd9\u4e2a\u70b9\u3002\n\n\u4f46\u662f\u505a\u5b8c\u53d1\u73b0\u5e76\u4e0d\u5bf9\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u8fd9\u4e00\u9898\u4e2d\uff0c\u6b63\u5e38\u7684\u884c\u5217\u5947\u5076\u6027\u9ed1\u767d\u67d3\u8272\u53ef\u4ee5\u5b8c\u7f8e\u5730\u4f7f\u6bcf\u4e2a\u767d\u70b9\u5230\u8fbe\u7684\u70b9\u90fd\u662f\u9ed1\u70b9\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u9ed1\u767d\u67d3\u8272\u7684\u76ee\u7684\u5c31\u662f\u628a\u70b9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u4f7f\u5f97\u5de6\u8fb9\u7684\u70b9\u53ea\u5411\u53f3\u8fb9\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u8fd9\u4e00\u9898\u4e2d\uff0c\u7531\u4e8e\u957f\u8116\u5b50\u9e7f\u7684\u653b\u51fb\u8303\u56f4\u662f $1\\times 3$ \u7684\u683c\u5b50\uff0c\u6240\u4ee5\u90a3\u79cd\u67d3\u8272\u65b9\u6cd5\u5e76\u4e0d\u884c\u3002\u4f46\u662f\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u53ea\u6309\u884c\u5947\u5076\u6027\u67d3\u8272\uff0c\u4f7f\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u79cd\u989c\u8272\uff0c\u4e5f\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\u3002\n\n\u53e6\u5916\u6ce8\u610f\u4f1a\u6709\u91cd\u70b9\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 $k$ \u4f5c\u4e3a\u603b\u6570\u3002\n\n\u5982\u6b64\uff0c\u95ee\u9898\u4fbf\u6b63\u5f0f\u89e3\u51b3\u3002\n\n\uff08\u91c7\u7528\u4e86\u4e00\u79cd\u4ee4\u4eba\u65e0\u6cd5\u7406\u89e3\u7684\u52a0\u8fb9\u65b9\u6cd5\uff0c\u8bf7\u89c1\u8c05\uff09\n\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define maxn 600010\n#define maxm 70000000\n#define INF 0x3f3f3f3f\n//#define int long long\n\nusing namespace std;\n\nbool vis[210][210];\nint n,m,s,t,tot=1,all,k;\nint val[210][210];\nint id[210][210],now;\nint Dis[maxn],cur[maxn],head[maxn];\nstruct edge{int fr,to,dis,nxt;}e[maxm];\n\nint read(){\n    int s=0,w=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=(s<<1)+(s<<3)+ch-'0',ch=getchar();\n    return s*w;\n}\n\nvoid add(int fr,int to,int dis){\n    e[++tot]=(edge){fr,to,dis,head[fr]};head[fr]=tot;\n    e[++tot]=(edge){to,fr,0,head[to]};head[to]=tot;\n}\n\nbool bfs(){\n    memset(Dis,-1,sizeof Dis);\n    queue<int> q;q.push(s);\n    Dis[s]=0;cur[s]=head[s];\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i;i=e[i].nxt){\n            int to=e[i].to;\n            if(Dis[to]==-1&&e[i].dis){\n                q.push(to);\n                Dis[to]=Dis[u]+1;\n                cur[to]=head[to];\n                if(to==t) return true;\n            }\n        }\n    }\n    return false;\n}\n\nint dfs(int u,int limit){\n    if(u==t) return limit;int flow=0;\n    for(int i=cur[u];i&&flow<limit;i=e[i].nxt){\n        int to=e[i].to;cur[u]=i;\n        if(Dis[to]==Dis[u]+1&&e[i].dis){\n            int f=dfs(to,min(e[i].dis,limit-flow));\n            if(!f)Dis[to]=-1;\n            e[i].dis-=f;e[i^1].dis+=f;\n            flow+=f;\n        }\n    }\n    return flow;\n}\n\nint dinic(){\n    int Maxflow=0,flow=0;\n    while(bfs())\n        while(flow=dfs(s,INF))\n            Maxflow+=flow;\n    return Maxflow;\n}\n\nbool judge2(int x,int y){\n    return (x>=1&&x<=n&&y>=1&&y<=m);\n}\n\nsigned main(){\n    n=read();m=read();k=read();s=n*m+1;t=s+1;\n    for(int i=1,fr,to;i<=k;i++){fr=read();to=read();val[fr][to]=1;}\n    for(int i=1;i<=n;i+=2)for(int j=1;j<=m;j++)vis[i][j]=1;k=0;\n    for(int i=1;i<=n;i++)for(int j=1;j<=m;j++) id[i][j]=++now;\n    for(int i=1;i<=n;i++)for(int j=1;j<=m;j++){\n        if(val[i][j]) k++;\n        if(vis[i][j]&&!val[i][j]){\n            add(s,id[i][j],1);\n            if(!val[i-3][j-1]&&judge2(i-3,j-1)) add(id[i][j],id[i-3][j-1],INF);\n            if(!val[i-1][j-3]&&judge2(i-1,j-3)) add(id[i][j],id[i-1][j-3],INF);\n            if(!val[i+3][j-1]&&judge2(i+3,j-1)) add(id[i][j],id[i+3][j-1],INF);\n            if(!val[i+1][j-3]&&judge2(i+1,j-3)) add(id[i][j],id[i+1][j-3],INF);\n            if(!val[i-3][j+1]&&judge2(i-3,j+1)) add(id[i][j],id[i-3][j+1],INF);\n            if(!val[i-1][j+3]&&judge2(i-1,j+3)) add(id[i][j],id[i-1][j+3],INF);\n            if(!val[i+3][j+1]&&judge2(i+3,j+1)) add(id[i][j],id[i+3][j+1],INF);\n            if(!val[i+1][j+3]&&judge2(i+1,j+3)) add(id[i][j],id[i+1][j+3],INF);\n        }\n        else if(!val[i][j]){add(id[i][j],t,1);}\n    }\n    int ans=dinic();all=n*m;\n    printf(\"%d\\n\",all-k-ans);\n    return 0;\n}\n```\n",
        "postTime": 1619232103,
        "uid": 281497,
        "name": "KEBrantily",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a $n\\times m$ \u7684\u7f51\u683c\u56fe\uff0c\u4f4d\u4e8e $(x,y)$ \u7684\u68cb\u5b50\u80fd\u653b\u51fb\u5230 $(x\\pm 1,y\\pm 3)$ \u548c $(x\\pm 3,y\\pm 1)$ \u7684\u4f4d\u7f6e\uff08\u82e5\u8d85\u51fa\u7f51\u683c\u56fe\u8303\u56f4\u5219\u65e0\u6cd5\u653b\u51fb\uff09\uff0c\u6709 $k$ \u4e2a\u5730\u65b9\u4e0d\u80fd\u653e\u68cb\u5b50\uff08**\u4e0d\u4fdd\u8bc1\u7ed9\u5b9a\u7684 $k$ \u4e2a\u5730\u65b9\u4e92\u4e0d\u76f8\u540c**\uff09\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u4e92\u4e0d\u653b\u51fb\u7684\u68cb\u5b50\u3002   \n$1\\le n,m \\le 200$\n## Solution\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6   \n\u8fd9\u4e2a\u9898\u548c [P3355](https://www.luogu.com.cn/problem/P3355) \u975e\u5e38\u50cf\uff0c\u53ea\u4e0d\u8fc7\u653b\u51fb\u8303\u56f4\u53d8\u4e86\uff0c\u90a3\u4e48\u7528\u90a3\u4e2a\u9898\u7684\u76f4\u63a5\u8ba9\u76f8\u90bb\u7684\u683c\u5b50\u4e0d\u540c\u8272\u7684\u65b9\u6cd5\u663e\u7136\u5c31\u4e0d\u53ef\u884c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u4e24\u4e2a\u540c\u8272\u7684\u683c\u5b50\u4e4b\u95f4\u4e5f\u53ef\u80fd\u8fde\u8fb9\u4e86\uff08\u826f\u5fc3\u51fa\u9898\u4eba\u7ed9\u7684\u793a\u4f8b\u56fe\u91cc\u9762\u5c31\u6709\uff09\uff0c\u8003\u8651\u6362\u4e00\u79cd\u67d3\u8272\u65b9\u5f0f\u3002  \n\u89c2\u5bdf\u6bcf\u4e2a\u68cb\u5b50\u7684\u653b\u51fb\u8303\u56f4\uff0c\u53ef\u4ee5\u53d1\u73b0 $(x,y)$ \u80fd\u653b\u51fb\u5230\u7684\u683c\u5b50\u6240\u5728\u7684\u884c\u7684\u5947\u5076\u6027\u4e00\u5b9a\u4e0e $x$ \u4e0d\u540c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u884c\u7684\u5947\u5076\u6027\u53bb\u67d3\u8272\uff0c\u6bd4\u5982\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u884c\u5168\u90e8\u67d3\u6210\u9ed1\u8272\uff0c\u5269\u4e0b\u7684\u662f\u767d\u8272\uff0c\u7136\u540e\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002\u6309\u5217\u7684\u5947\u5076\u6027\u6765\u67d3\u8272\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\u3002   \n\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u826f\u5fc3\u51fa\u9898\u4eba\u7ed9\u7684\u7b2c\u4e8c\u4e2a\u63d0\u793a\uff0c\u56fe\u7684\u904d\u5386\u987a\u5e8f\u5bf9\u8fd0\u884c\u901f\u5ea6\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u663e\u7136\uff0c\u5982\u679c\u4f60\u4ece\u6574\u4e2a\u7f51\u683c\u56fe\u7684\u5de6\u4e0a\u5f00\u59cb\u67d3\u8272\u548c\u8fde\u8fb9\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u80fd\u653b\u51fb\u5230\u7684 8 \u4e2a\u70b9\u4e2d\u8d8a\u9760\u4e0a\u7684\u70b9\u8d8a\u6709\u53ef\u80fd\u4e4b\u524d\u88ab\u5339\u914d\u8fc7\uff0c\u6b64\u65f6\u5308\u7259\u5229\u7b97\u6cd5\u5c31\u4f1a\u518d\u53bb\u9012\u5f52\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd0\u884c\u901f\u5ea6\u5927\u5e45\u964d\u4f4e\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u4ece\u6700\u4e0b\u9762\u7684 $(x+3,y\\pm 1)$ \u5f00\u59cb\uff0c\u904d\u5386\u8fd9\u4e2a\u70b9\u7684\u51fa\u8fb9\u3002  \n\u6700\u540e\u6ce8\u610f\u4e00\u4e2a\u5751\u70b9\uff0c\u5c31\u662f\u4e0d\u4fdd\u8bc1\u7ed9\u5b9a\u7684 $k$ \u4e2a\u5730\u65b9\u4e92\u4e0d\u76f8\u540c\uff0c\u5982\u679c\u4e8c\u5206\u56fe\u70b9\u6570\u6309\u7167 $n\\times m-k$ \u6765\u7b97\u7684\u8bdd\u5c31\u4f1a ```WA```  \u56db\u4e2a\u70b9\uff0c\u8fd9\u91cc\u52a0\u4e00\u70b9\u5224\u65ad\u5c31\u597d\u3002\n## Code\n```c\n#include <bits/stdc++.h>\nusing namespace std;\nint head[40001],ne[160001],to[160001],ecnt,now=1,match[40001],la[40001];\nbool a[201][201],isb[40001];\nconst int LEN=1<<21;\nchar BUF[LEN],*Pin,*Pin_last,PUF[LEN],*Pout=PUF,*Pout_last=PUF+LEN-1;\nchar gc(){\n\treturn Pin==Pin_last&&(Pin_last=(Pin=BUF)+fread(BUF,1,LEN,stdin),Pin==Pin_last)?EOF:*Pin++;\n}\nint read(){\n\tint x=0;\n\tchar ch=gc();\n\twhile(ch<48||ch>57) ch=gc();\n\twhile(ch>47&&ch<58) x=x*10+ch-48,ch=gc();\n\treturn x;\n}\nvoid ae(int x,int y){\n\tto[++ecnt]=y,ne[ecnt]=head[x],head[x]=ecnt;\n}\nbool dfs(int x){//\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u8fd9\u91cc\u91c7\u7528\u4e86\u65f6\u95f4\u6233\u7684\u4f18\u5316\uff0c\u4e0d\u7528\u6bcf\u6b21\u6e05\u7a7avis\u6570\u7ec4\uff0c\u6548\u679c\u76f8\u540c\n\tfor(int i=head[x];i;i=ne[i]){\n\t\tint y=to[i];\n\t\tif(la[y]!=now){\n\t\t\tla[y]=now;\n\t\t\tif(!match[y]||dfs(match[y])){\n\t\t\t\tmatch[y]=x;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}return 0;\n}\nsigned main(){\n\tint n=read(),m=read(),k=read(),tot=n*m,nn=tot,ans=0;\n\twhile(k--){\n\t\tint x=read(),y=read();\n\t\tif(!a[x][y]) a[x][y]=1,tot--;//\u6ce8\u610f\u8fd9\u91cc\u7684\u5224\u65ad\n\t}for(int i=1;i<=n;i+=2){\n\t\tfor(int j=1,k=i*m+1-m;j<=m;j++,k++){\n\t\t\tif(a[i][j]) continue;\n\t\t\tisb[k]=1;\n         //\u6ce8\u610f\u4e0b\u9762\u52a0\u8fb9\u7684\u987a\u5e8f\uff0c\u90bb\u63a5\u8868\u5b58\u56fe\u7684\u8bdd\u904d\u5386\u65f6\u5012\u5e8f\u7684\uff0c\u6240\u4ee5\u8fd9\u6837\u52a0\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u8bdd\u5c31\u662f\u628a\u6211\u8fd9\u4e2a\u7ffb\u8fc7\u6765\u5373\u53ef\n\t\t\tif(j>1&&i>3&&!a[i-3][j-1]) ae(k,k-3*m-1);\n\t\t\tif(j<m&&i>3&&!a[i-3][j+1]) ae(k,k-3*m+1);\n\t\t\tif(j>3&&i>1&&!a[i-1][j-3]) ae(k,k-3-m);\n\t\t\tif(j+2<m&&i>1&&!a[i-1][j+3]) ae(k,k-m+3);\n\t\t\tif(j>3&&i<n&&!a[i+1][j-3]) ae(k,k+m-3);\n\t\t\tif(j+2<m&&i<n&&!a[i+1][j+3]) ae(k,k+m+3);\n\t\t\tif(j>1&&i+2<n&&!a[i+3][j-1]) ae(k,k+3*m-1);\n\t\t\tif(j<m&&i+2<n&&!a[i+3][j+1]) ae(k,k+3*m+1);\n\t\t}\n\t}for(int i=1;i<=nn;i++,now++) if(isb[i]&&dfs(i)) ans++;//\u5982\u679c\u662f\u9ed1\u70b9\u5e76\u4e14\u5339\u914d\u6210\u529f\u5219\u66f4\u65b0\u6700\u5927\u5339\u914d\u6570\n\tprintf(\"%d\",tot-ans);//\u4e8c\u5206\u56fe\u603b\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u6570\u5373\u4e3a\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\n\treturn 0;\n}\n```\n",
        "postTime": 1645714978,
        "uid": 438168,
        "name": "OldVagrant",
        "ccfLevel": 6,
        "title": "P5030 \u9898\u89e3"
    },
    {
        "content": "## $\\texttt{Introduction}$\n\n\u8fd9\u9053\u9898\u6709\u4ec0\u4e48\u5b58\u5728\u7684\u610f\u4e49\u5417\uff1f\u548c $\\texttt{P4304}$ \u6709\u4ec0\u4e48\u533a\u522b\uff1f\n\n## $\\texttt{Solution}$\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5230\u5982\u679c\u5c06\u4e24\u4e2a\u53ef\u4ee5\u4e92\u76f8\u653b\u51fb\u7684\u4f4d\u7f6e\u8fde\u8fb9\uff0c\u90a3\u4e48\u9898\u76ee\u4e2d\u6240\u8981\u6c42\u7684\u5c31\u662f\u9009\u51fa\u6700\u591a\u7684\u70b9\uff0c\u4f7f\u5f97\u4ed6\u4eec\u4e24\u4e24\u4e4b\u95f4\u4e0d\u5b58\u5728\u8fb9\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u5b9e\u8d28\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\n\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u9898\u76ee\u4e2d\u7ed9\u7684\u90a3\u5f20\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u683c\u70b9\u4e0e\u5176\u6240\u80fd\u5230\u8fbe\u7684\u53e6\u4e00\u4e2a\u683c\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684\u5947\u5076\u6027\u76f8\u53cd\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8fde\u8fb9\u540e\u5f97\u5230\u7684\u56fe\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\n\n\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd0\u7528\u7ecf\u5178\u7ed3\u8bba:**\u6700\u5927\u72ec\u7acb\u96c6=\u603b\u70b9\u6570-\u6700\u5927\u5339\u914d**\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u57fa\u672c\u505a\u5b8c\u4e86\u3002\n\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u6cd5\u5c31\u662f\u6211\u4eec\u5148\u5c06\u4e0d\u80fd\u9009\u7684\u70b9\u4ece\u70b9\u96c6\u4e2d\u53bb\u9664\uff0c\u7136\u540e\u5bf9\u4e8e\u70b9\u96c6\u4e2d\u5b58\u5728\u7684\u70b9\u8fdb\u884c\u8fde\u8fb9\uff0c\u7136\u540e\u9ed1\u767d\u67d3\u8272\uff0c\u5c06\u9ed1\u70b9\u89c6\u4f5c\u5de6\u90e8\u70b9\uff0c\u7136\u540e\u8fdb\u884c\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u53ef\u3002\n\n## $\\texttt{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int di[8][2]={{-1,-3},{-3,-1},{1,-3},{3,-1},{-1,3},{-3,1},{1,3},{3,1}};\ninline int read()\t\t\t\n{\n  int x=0,f=1;char ch=getchar();\n  while(!isdigit(ch)&&ch!='-')ch=getchar();\n  if(ch=='-')f=-1,ch=getchar();\n  while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n  return x*f;\n}\nbool uu[1000000],exist[1000000],visit[1000000],edge[300][300];\nint ok[1000][1000],e3[2000000],e4[2000000],e1[2000000],e2[2000000],a[2000000],b[2000000],d[2000000],match[2000000];\nint K,xx,yy,k,xu,yu,xv,yv,ans3,ans4,ans2,ans1,sum,j,cnt,n,m,x,y,i,ans,color[1000000];\nstring s;\nvoid add(int x,int y)\n{\n\tcnt++;a[cnt]=y;b[cnt]=d[x];d[x]=cnt;\n}\nbool check(int x)\n{\n\tint i;\n\tfor (i=d[x];i;i=b[i])\n\t    if (visit[a[i]]==false)\n\t         {\n\t         \tvisit[a[i]]=true;\n\t         \tif ((match[a[i]]==0)||(check(match[a[i]])))\n\t         \t     {\n\t         \t     \tmatch[a[i]]=x;\n\t         \t     \treturn true;\n\t\t\t\t\t  }\n\t\t\t }\n\treturn false;\n}\nvoid sc(int x,int y)\n{\n\tif (color[x]!=0) return;\n\tcolor[x]=y;\n\tint i;\n\tfor (i=d[x];i;i=b[i])\n\t     sc(a[i],3-y);\n}\nint main()\n{\n\tcin>>n>>m>>K;\n    for (i=1;i<=K;i++)\n         {\n         \t   cin>>x>>y;\n         \t   ok[x][y]=1;\n\t\t }\n\tfor (i=1;i<=n;i++)\n\t   for (j=1;j<=m;j++)\n\t       if (ok[i][j]==0)\n\t           {\n\t           \tx=(i-1)*m+j;\n\t           \t   for (k=0;k<8;k++)\n\t           \t       {\n\t           \t       \txx=i+di[k][0];yy=j+di[k][1];\n\t           \t       \tif ((xx>=1)&(xx<=n)&(yy>=1)&(yy<=m))\n\t           \t       \t      if (ok[xx][yy]==0)\n\t           \t       \t          {\n\t           \t       \t          y=(xx-1)*m+yy;\n\t\t\t\t\t\t\t\t  add(x,y);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  }\n\t\t\t   }\n\tfor (i=1;i<=n*m;i++)\n\t  if (ok[(i-1)/m+1][(i-1)%m+1]==0)\n\t     if (color[i]==0)\n\t        sc(i,1);\n    int LGCZYY=0;\n\tfor (i=1;i<=n*m;i++)\n\t  if (ok[(i-1)/m+1][(i-1)%m+1]==0)\n\t     {\n\t     if (color[i]==1)\n\t     {\n\t     \tfor (j=1;j<=n*m;j++) visit[j]=false;\n\t     \tif (check(i)) ans++;\n\t      }\n\t    }\n\telse LGCZYY++;\n\tprintf(\"%d\\n\",n*m-ans-LGCZYY);\n\treturn 0;\n}\n```\n",
        "postTime": 1647847450,
        "uid": 508480,
        "name": "Albedo",
        "ccfLevel": 0,
        "title": "P5030\u9898\u89e3"
    },
    {
        "content": "\u57fa\u672c\u4e0a\u662f [P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.com.cn/problem/P3355) \u7684\u53cc\u500d\u7ecf\u9a8c\u3002\u4f46\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u8d70\u7684\u662f\u201c\u76ee\u201d\u5b57\u800c\u975e\u201c\u65e5\u201d\u5b57\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/37260.png)\n\n\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0\uff0c\u4e00\u4e2a\u683c\u70b9\u4e0e\u5176\u6240\u80fd\u5230\u8fbe\u7684\u53e6\u4e00\u4e2a\u683c\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684**\u5947\u5076\u6027\u76f8\u53cd**\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u884c\uff08\u6216\u5217\uff09\u7684\u5947\u5076\u6027\u5c06\u8fd9\u4e9b\u683c\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u8fd9\u6837\u5c31\u6210\u4e86\u4e2a**\u4e8c\u5206\u56fe**\u3002\u5176\u4e2d\u8ba9\u5de6\u90e8\u70b9\u5411\u5b83\u80fd\u5230\u8fbe\u7684\u53f3\u90e8\u70b9\u8fde\u8fb9\u3002\u6211\u4eec\u8981\u4ece\u4e24\u4e2a\u96c6\u5408\u4e2d\u9009\u51fa\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u9009\u51fa\u7684\u4e0d\u540c\u96c6\u5408\u4e2d\u7684\u70b9\u4e4b\u95f4\u6ca1\u6709\u5173\u7cfb\uff08\u5373\u6ca1\u8fde\u8fb9\uff0c\u4e5f\u5c31\u6210\u4e86**\u72ec\u7acb\u96c6**\uff09\uff0c\u6c42\u6700\u5927\u70b9\u96c6\uff0c\u8fd9\u5c31\u6210\u4e86**\u6700\u5927\u72ec\u7acb\u96c6**\u95ee\u9898\u3002\n\n\u8fd9\u91cc\u5148\u7ed9\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5728**\u4e8c\u5206\u56fe**\u91cc\u9762\uff0c**\u6700\u5927\u72ec\u7acb\u96c6 = \u603b\u70b9\u6570 - \u6700\u5c0f\u70b9\u8986\u76d6 = \u603b\u70b9\u6570 - \u6700\u5927\u5339\u914d**\u3002\u4e0b\u9762\u7ed9\u51fa\u8bc1\u660e\uff1a\n\n**\u6700\u5c0f\u70b9\u8986\u76d6**\u7684\u5b9a\u4e49\u662f\uff1a\u4e8c\u5206\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5728\u8be5\u70b9\u96c6\u4e2d\u7684\u6700\u5c0f\u70b9\u96c6\u3002\n\n\u5982\u679c\u53bb\u6389\u4e86\u8fd9\u4e9b\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u4e4b\u95f4\u5c31\u6ca1\u6709\u4e86\u4efb\u4f55\u5173\u7cfb\uff08\u6bcf\u6761\u8fb9\u7684\u7aef\u70b9\u90fd\u4e0d\u5b58\u5728\u4e86\uff09\uff0c\u5c31\u6210\u4e86**\u72ec\u7acb\u96c6**\u3002\u7531\u4e8e\u53bb\u6389\u7684\u70b9\u96c6\u6700\u5c0f\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u70b9\u96c6\u5c31\u662f**\u6700\u5927\u72ec\u7acb\u96c6**\u3002\u6240\u4ee5\uff0c**\u6700\u5927\u72ec\u7acb\u96c6 = \u603b\u70b9\u6570 - \u6700\u5c0f\u70b9\u8986\u76d6**\u3002\n\n\u90a3\u53c8\u4e3a\u4ec0\u4e48\u6709 **\u6700\u5c0f\u70b9\u8986\u76d6 = \u6700\u5927\u5339\u914d** \u5462\uff1f\u8fd9\u91cc\u5c31\u8981\u5f15\u51fa Konig \u5b9a\u7406\uff1a\n\n\u9996\u5148\uff0c\u6700\u5c0f\u70b9\u8986\u76d6\u4e00\u5b9a**\u5927\u4e8e\u7b49\u4e8e**\u6700\u5927\u5339\u914d\u3002\u5047\u8bbe\u6700\u5927\u5339\u914d\u4e3a $n$\uff0c\u5219\u8fd9 $n$ \u6761\u8fb9\u4e00\u5b9a\u4e92\u4e0d\u76f8\u4ea4\uff0c\u5149\u8986\u76d6\u8fd9\u4e9b\u8fb9\u5c31\u8981 $n$ \u4e2a\u70b9\uff0c\u6545\u6210\u7acb\u3002\n\n\u5176\u6b21\uff0c\u6700\u5c0f\u70b9\u8986\u76d6\u4e00\u5b9a**\u5c0f\u4e8e\u7b49\u4e8e**\u6700\u5927\u5339\u914d\u3002\u56e0\u4e3a\u6700\u5c0f\u70b9\u8986\u76d6\u4e2d\u7684\u70b9\u4e00\u5b9a\u80fd\u627e\u5230\u81f3\u5c11\u4e00\u6761**\u53ea\u6709\u4e00\u4e2a\u7aef\u70b9**\u5728\u70b9\u96c6\u4e2d\u7684\u8fb9\uff0c\u5426\u5219\u8be5\u70b9\u6ca1\u5fc5\u8981\u88ab\u8986\u76d6\uff0c\u4e0e\u6700\u5c0f\u70b9\u8986\u76d6\u77db\u76fe\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u70b9\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u9009\u62e9\u8fd9\u6837\u4e00\u6761\u8fb9\uff0c\u4e00\u5b9a\u80fd\u8f6c\u5316\u6210\u4e00\u4e2a\u5339\u914d\u6570\u4e0e\u70b9\u6570\u76f8\u7b49\u7684\u5339\u914d\u65b9\u6848\uff0c\u6545\u6210\u7acb\u3002\n\n\u7efc\u4e0a\uff0c **\u6700\u5c0f\u70b9\u8986\u76d6 = \u6700\u5927\u5339\u914d**\u3002\n\n\u6700\u5927\u5339\u914d\u53ef\u4ee5\u7528\u5308\u7259\u5229\u7b97\u6cd5\u6216 Dinic \u6c42\u5f97\uff0c\u6ce8\u610f\u6709\u4e9b\u4f4d\u7f6e\u4e0d\u80fd\u653e\u68cb\u5b50\uff0c\u4e14**\u4e0d\u4fdd\u8bc1\u7981\u6b62\u653e\u7f6e\u7684\u683c\u5b50\u4e92\u4e0d\u76f8\u540c**\uff0c\u6545\u7b54\u6848\u8fd8\u9700\u51cf\u53bb\u4e0d\u80fd\u653e\u7684\u4f4d\u7f6e\u6570\u3002\n\n### Code:\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<cstring>\nusing namespace std;\ntemplate <typename T>\ninline void read(T& r) {\n    r=0;bool w=0; \n    char ch=getchar();\n    while(ch<'0'||ch>'9') w=ch=='-'?1:0,ch=getchar();\n    while(ch>='0'&&ch<='9') r=(r<<3)+(r<<1)+(ch^48), ch=getchar();\n    r=w?-r:r;\n}\n\nconst int N=1e6+10,M=4e6+10,inf=0x7ffffff;\n#define id(i,j) (i-1)*m+j\n\nint n,m,k,s,t,maxflow,tot;\nint h[N],e[M],ne[M],w[M],idx=1;\nint dep[N],cur[N];\nqueue<int>q;\nint f[8][2]={{-1,-3},{-3,-1},{-3,1},{-1,3},{1,3},{3,1},{3,-1},{1,-3}};\nbool g[210][210];\n\ninline void add(int a,int b){\n    e[++idx]=b;ne[idx]=h[a];w[idx]=1;h[a]=idx;\n    e[++idx]=a;ne[idx]=h[b];w[idx]=0;h[b]=idx;\n}\n\nbool bfs(){\n    for(int i=1;i<=t;++i)dep[i]=0,cur[i]=h[i];\n    dep[s]=1;q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=h[u],v;i;i=ne[i]){\n            v=e[i];\n            if(w[i]&&!dep[v]){\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[t];\n}\nint dinic(int u,int in){\n    if(u==t||!in)return in;\n    int out=0;\n    for(int i=cur[u],v;i;i=ne[i]){\n        cur[u]=i;v=e[i];\n        if(w[i]&&dep[v]==dep[u]+1){\n            int res=dinic(v,min(in,w[i]));\n            in-=res;out+=res;\n            w[i]-=res;w[i^1]+=res;\n        }\n        if(!in)break;\n    }\n    if(!out)dep[u]=-1;\n    return out;\n}\n\nint main(){\n    #ifdef LOCAL\n        freopen(\"std.in\",\"r\",stdin);\n        freopen(\"my.out\",\"w\",stdout);\n    #endif\n    read(n);read(m);read(k);\n    tot=n*m;s=n*m+1,t=s+1;maxflow=0;\n    for(int i=1,x,y;i<=k;++i){\n        read(x),read(y);\n        if(!g[x][y])--tot;\n        g[x][y]=true;\n    }\n    for(int i=1;i<=n;++i){\n        for(int j=1;j<=m;++j){\n            if(g[i][j])continue;\n            if(i&1){\n                add(s,id(i,j));\n                for(int k=0;k<8;++k){\n                    int x=i+f[k][0],y=j+f[k][1];\n                    if(x<1||x>n||y<1||y>m||g[x][y])continue;\n                    add(id(i,j),id(x,y));\n                }\n            }\n            else add(id(i,j),t);\n        }\n    }\n    while(bfs())maxflow+=dinic(s,inf);\n    printf(\"%d\\n\",tot-maxflow);\n    return 0;\n}\n```\n",
        "postTime": 1628521430,
        "uid": 339846,
        "name": "RuntimeErr",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e"
    },
    {
        "content": "## \u5206\u67901\n\u8fd9\u9053\u9898\u5417\uff0c\u6709\u70b9\u7384\u5b66\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u9898\u76ee\u770b\u5230\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/37260.png)\n\n\u89c2\u5bdf~~\u4ebf~~\u4e00\u4e0b\uff0c\u53d1\u73b0\u957f\u8116\u5b50\u9e7f\u5728\u767d\u8272\u683c\u5b50\uff0c\u4e5f\u53ea\u80fd\u8df3\u5230\u767d\u8272\u683c\u5b50\u3002\n\n\u7136\u540e~~\u81ea\u7136\u800c\u7136\u5730~~\u60f3\u5230 [ACWing \u4e0a\u7684\u4e00\u9053\u9898](https://www.acwing.com/problem/content/description/374/)\u3002\n\n\u90a3\u9053\u9898\u662f\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u540c\u3002\u8fd9\u9053\u9898\u4e2d\u653e\u4e00\u4e2a\u957f\u8116\u5b50\u9e7f\u4f1a\u5f71\u54cd\u6700\u591a 8 \u4e2a\u4f4d\u7f6e\uff0c\u800c\u90a3\u9898\u53ea\u5f71\u54cd 2 \u4e2a\u3002\u8fd9\u9053\u9898\u5e94\u8be5\u7528\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u539f\u56e0\u663e\u7136\uff1a\u8ba9\u4e00\u4e2a\u683c\u5b50\u548c\u80fd\u653b\u51fb\u5230\u7684\u683c\u5b50\u8fde\u8fb9\uff0c\u8981\u6c42\u6709\u8fb9\u7684\u4e24\u4e2a\u683c\u5b50\u4e0d\u80fd\u90fd\u653e\uff0c\u4e5f\u5c31\u662f\u6c42\u8fd9\u4e2a\u56fe\u7684**\u6700\u5927\u72ec\u7acb\u96c6**\u3002\n\n\u4efb\u610f\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u662f\u4e00\u4e2a NP \u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e0d\u662f\u3002\u957f\u8116\u5b50\u9e7f\u8d70\u4e00\u6b65\uff0c\u884c\u5217\u90fd\u4f1a $\\pm t, t\\in{1, 3}$\uff0c\u662f\u4e00\u4e2a\u5947\u6570\uff0c\u6240\u4ee5**\u8d70\u5947\u6570\u6b65\u4e0d\u53ef\u80fd\u56de\u5230\u539f\u4f4d**\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2a**\u4e8c\u5206\u56fe**\u3002\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f=\u70b9\u6570-\u6700\u5927\u5339\u914d\u8fb9\u6570\u3002~~\u7559\u505a\u4e60\u9898\u7b54\u6848\u7565\uff0c\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002~~\u4e0d\u96be\u5199\u51fa\uff1a\n\n## \u4ee3\u78011\uff0880pts\uff09\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 205, M = N * N, d[8][2] = {{-3, -1}, {-3, 1}, {-1, -3}, {-1, 3}, {3, -1}, {3, 1}, {1, -3}, {1, 3}};\nint match[M], dfn[M], id[N][N], t, n, m, DFN, cnt;\nvector <int> G[M];\nchar flag[N][N];\n\n__attribute__ ((always_inline)) void Edge(int x1, int y1, int x2, int y2) {\n\tif (x2 < 1 || x2 > n || y2 < 1 || y2 > m || flag[x1][y1] || flag[x2][y2])\n\t\treturn;\n\tG[id[x1][y1]].push_back(id[x2][y2]);\n\t//\tprintf(\"Edge\\n\");\n}\n\nbool dfs(int cur) {\n\tfor (int i = 0, siz = G[cur].size(); i < siz; i++) {\n\t\tint to = G[cur][i];\n\t\tif (dfn[to] == DFN)\n\t\t\tcontinue;\n\t\tdfn[to] = DFN;\n\t\tif (!match[to] || dfs(match[to])) {\n\t\t\tmatch[to] = cur;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main() {\n\tcin >> n >> m >> t;\n\twhile (t--) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tif (!flag[x][y])\n\t\t\tflag[x][y] = 1, cnt++;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tid[i][0] = id[i - 1][m];\n\t\tfor (int j = 1; j <= m; j++) id[i][j] = id[i][j - 1] + 1/*, printf(\"id[%d][%d] = %d\\n\", i, j, id[i][j])*/;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tfor (int k = 0; k < 8; k++)\n\t\t\t\tEdge(i, j, i + d[k][0], j + d[k][1]);[j]].begin(), G[id[i][j]].end());\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tif (flag[i][j] == 0) {\n\t\t\t\tDFN++;\n//\t\t\t\tprintf(\"dfs(%d, %d)\\n\", i, j);\n\t\t\t\tif (dfs(id[i][j]))\n\t\t\t\t\tans++/*, printf(\"succeed: i = %d, j = %d\\n\", i, j)*/;\n\t\t\t}\n\t/*\n    for (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tprintf(\"match[%d][%d] = %d\\n\", i, j, match[id[i][j]]);\n\t*/\n\tcout << n * m - ans / 2 - cnt << endl;\n\treturn 0;\n}\n\n```\n\n## \u5206\u67902\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u8fd9\u4efd\u4ee3\u7801\u7684 **\u6700\u574f** \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^4)$\uff0c\u5e26\u4e0a\u4e00\u4e2a 8 \u7684\u5e38\u6570\uff0c\u53ef\u4ee5~~\u88ab\u65b0\u5e74\u7b2c\u4e00\u6bd2\u7624\u51fa\u9898\u4eba~~\u5361\uff0c\u4f46\u662f\u600e\u4e48 A \u6389\u5462\uff1f\n\n\u6211\u4eec\u8981\u5229\u7528\u5308\u7259\u5229\u7b97\u6cd5\u7684\u7384\u5b66\u6027\u8d28\uff0c\u8ba9\u8fd9\u4efd\u4ee3\u7801\u8dd1\u4e0d\u6ee1\u5c31\u884c\u3002\u65b9\u6cd5\u4ecb\u7ecd\u4e24\u79cd\u3002\n\n### \u968f\u673a\u5316\n> \u968f\u673a\u5316\u7b97\u6cd5\u6ca1\u6709\u94b1\u9014\u3002\n\n\u8fd9\u4e5f\u662f\u6211\u81ea\u5df1\u60f3\u51fa\u6765\u7684\u529e\u6cd5\uff0c\u679c\u7136\u6211\u8fd8\u662f\u53ea\u4f1a\u4e71\u641e\u3002[record ](https://www.luogu.com.cn/record/47570249)\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u7684\u5faa\u73af\u987a\u5e8f\u4e0a\u641e\u4e8b\u60c5\u3002\n\n\u751f\u6210\u4e00\u4e2a $1 \\sim n$ \u7684\u968f\u673a\u6570\u5217 $p$\uff0c\u4e00\u4e2a $1 \\sim m$ \u7684\u968f\u673a\u6570\u5217 $q$\uff0c\u7ec4\u5408\u6210 $n \\times m$ \u4e2a\u4f4d\u7f6e\u8dd1\u5308\u7259\u5229\u5c31\u884c\u3002\n\n### \u4ee3\u78012\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 205, M = N * N, d[8][2] = {{-3, -1}, {-3, 1}, {-1, -3}, {-1, 3}, {3, -1}, {3, 1}, {1, -3}, {1, 3}};\nint match[M], dfn[M], id[N][N], t, n, m, DFN, cnt, p[N], q[N];\nvector <int> G[M];\nchar flag[N][N];\n\n__attribute__ ((always_inline)) void Edge(int x1, int y1, int x2, int y2) {\n\tif (x2 < 1 || x2 > n || y2 < 1 || y2 > m || flag[x1][y1] || flag[x2][y2])\n\t\treturn;\n\tG[id[x1][y1]].push_back(id[x2][y2]);\n\t//\tprintf(\"Edge\\n\");\n}\n\nbool dfs(int cur) {\n\tfor (int i = 0, siz = G[cur].size(); i < siz; i++) {\n\t\tint to = G[cur][i];\n\t\tif (dfn[to] == DFN)\n\t\t\tcontinue;\n\t\tdfn[to] = DFN;\n\t\tif (!match[to] || dfs(match[to])) {\n\t\t\tmatch[to] = cur;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main() {\n\tcin >> n >> m >> t;\n\twhile (t--) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tif (!flag[x][y])\n\t\t\tflag[x][y] = 1, cnt++;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tid[i][0] = id[i - 1][m];\n\t\tfor (int j = 1; j <= m; j++) id[i][j] = id[i][j - 1] + 1/*, printf(\"id[%d][%d] = %d\\n\", i, j, id[i][j])*/;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tfor (int k = 0; k < 8; k++)\n\t\t\t\tEdge(i, j, i + d[k][0], j + d[k][1]);\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++) p[i] = i;\n\tfor (int i = 1; i <= m; i++) q[i] = i;\n\trandom_shuffle(p + 1, p + n + 1), random_shuffle(q + 1, q + m + 1);\n\tfor (int x = 1, i = p[1]; x <= n; x++, i = p[x])\n\t\tfor (int y = 1, j = q[1]; y <= m; y++, j = q[y])\n\t\t\tif (flag[i][j] == 0) {\n\t\t\t\tDFN++;\n//\t\t\t\tprintf(\"dfs(%d, %d)\\n\", i, j);\n\t\t\t\tif (dfs(id[i][j]))\n\t\t\t\t\tans++/*, printf(\"succeed: i = %d, j = %d\\n\", i, j)*/;\n\t\t\t}\n\t/*\n    for (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tprintf(\"match[%d][%d] = %d\\n\", i, j, match[id[i][j]]);\n\t*/\n\tcout << n * m - ans / 2 - cnt << endl;\n\treturn 0;\n}\n\n```\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u88ab\u8279\u8fc7\u53bb\u4e86\uff0cHooray\uff01\n\n### \u66f4\u6539\u52a0\u8fb9\u987a\u5e8f\n\u4e5f\u662f std \u89e3\u6cd5\u3002\n\nstd \u597d\u50cf\u6bd4\u968f\u673a\u5316\u66f4\u52a0\u7384\u5b66(bushi\n\n\u6807\u7a0b\u662f\u8fd9\u4e48\u8bf4\u7684\uff1a\n\n> \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u51fa\u9898\u4eba\u5728\u8bf4\u660e\u4e2d\u8bf4\u8fc7\u8003\u8651\u56fe\u7684\u904d\u5386\u987a\u5e8f\u5bf9\u6548\u7387\u5f71\u54cd\u3002\u8003\u8651\u5308\u7259\u5229\u7b97\u6cd5\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u82e5\u5f53\u524d\u70b9\u627e\u5230\u7684\u5339\u914d\u8fb9\u662f\u6682\u65f6\u6ca1\u6709\u5339\u914d\u51b2\u7a81\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u5339\u914d\u7ed3\u675fdfs\uff0c\u5426\u5219\u5c06\u8fdb\u884c\u590d\u6742\u7684\u589e\u5e7f\u3002\u56e0\u6b64\uff0c\u4ece(x+3,x-1)\u5f00\u59cb(\u5373\u4e0b\u504f\u5de6)\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u53ef\u4ee5\u51cf\u5c11\u51b2\u7a81\u7684\u6982\u7387\uff0c(\u4e0a\u65b9\u7684\u53ef\u5339\u914d\u70b9\u88ab\u4e4b\u524d\u7684\u70b9\u5339\u914d\u7684\u53ef\u80fd\u6027\u8f83\u9ad8\u3002)\uff0c\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u4e3aO(\u80fd\u8fc7)\u3002\n\n\u8bdd\u8bf4\u600e\u4e48\u8fc7\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u600e\u4e48\u60f3\u5230\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u51fa\u9898\u4eba\u5c31\u662f\u60f3\u5230\u4e86\u5e76\u8fc7\u4e86\uff0c\u8dd1\u5f97\u6bd4\u6211\u7684\u5feb 2 \u500d /dk\n\n\u539f\u7406\u662f\u5c3d\u91cf\u8ba9\u5308\u7259\u5229\u7b97\u6cd5\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u641c\u7d22\u5c42\u6570\u5c11\u4e00\u4e9b\uff0c\u7136\u540e\u5c31\u8dd1\u7684\u98de\u5feb\u3002\n\n### \u4ee3\u78013\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 205, M = N * N, d[8][2] = {{3, -1}, {-3, -1}, {-1, -3}, {3, 1}, {1, -3}, {-3, 1}, {-1, 3}, {1, 3}};\nint match[M], dfn[M], id[N][N], t, n, m, DFN, cnt;\nvector <int> G[M];\nchar flag[N][N];\n\n__attribute__ ((always_inline)) void Edge(int x1, int y1, int x2, int y2) {\n\tif (x2 < 1 || x2 > n || y2 < 1 || y2 > m || flag[x1][y1] || flag[x2][y2])\n\t\treturn;\n\tG[id[x1][y1]].push_back(id[x2][y2]);\n\t//\tprintf(\"Edge\\n\");\n}\n\nbool dfs(int cur) {\n\tfor (int i = 0, siz = G[cur].size(); i < siz; i++) {\n\t\tint to = G[cur][i];\n\t\tif (dfn[to] == DFN)\n\t\t\tcontinue;\n\t\tdfn[to] = DFN;\n\t\tif (!match[to] || dfs(match[to])) {\n\t\t\tmatch[to] = cur;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main() {\n    srand(time(0));\n\tcin >> n >> m >> t;\n\twhile (t--) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tif (!flag[x][y])\n\t\t\tflag[x][y] = 1, cnt++;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tid[i][0] = id[i - 1][m];\n\t\tfor (int j = 1; j <= m; j++) id[i][j] = id[i][j - 1] + 1/*, printf(\"id[%d][%d] = %d\\n\", i, j, id[i][j])*/;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tfor (int k = 0; k < 8; k++)\n\t\t\t\tEdge(i, j, i + d[k][0], j + d[k][1]);\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tif (flag[i][j] == 0) {\n\t\t\t\tDFN++;\n//\t\t\t\tprintf(\"dfs(%d, %d)\\n\", i, j);\n\t\t\t\tif (dfs(id[i][j]))\n\t\t\t\t\tans++/*, printf(\"succeed: i = %d, j = %d\\n\", i, j)*/;\n\t\t\t}\n\t/*\n    for (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tprintf(\"match[%d][%d] = %d\\n\", i, j, match[id[i][j]]);\n\t*/\n\tcout << n * m - ans / 2 - cnt << endl;\n\treturn 0;\n}\n\n```\n\n## \u5206\u67903\n\n\u5982\u679c\u7ed3\u5408 std \u548c\u968f\u673a\u5316\u5462\uff1f\n\n\u8dd1\u7684\u66f4\u5feb\uff01\n\n\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u7528 20081231 \u4f5c\u968f\u673a\u79cd\u5b50\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 205, M = N * N, d[8][2] = {{3, -1}, {-3, -1}, {-1, -3}, {3, 1}, {1, -3}, {-3, 1}, {-1, 3}, {1, 3}};\nint match[M], dfn[M], id[N][N], t, n, m, DFN, cnt, p[N], q[N];\nvector <int> G[M];\nchar flag[N][N];\n\n__attribute__ ((always_inline)) void Edge(int x1, int y1, int x2, int y2) {\n\tif (x2 < 1 || x2 > n || y2 < 1 || y2 > m || flag[x1][y1] || flag[x2][y2])\n\t\treturn;\n\tG[id[x1][y1]].push_back(id[x2][y2]);\n\t//\tprintf(\"Edge\\n\");\n}\n\nbool dfs(int cur) {\n\tfor (int i = 0, siz = G[cur].size(); i < siz; i++) {\n\t\tint to = G[cur][i];\n\t\tif (dfn[to] == DFN)\n\t\t\tcontinue;\n\t\tdfn[to] = DFN;\n\t\tif (!match[to] || dfs(match[to])) {\n\t\t\tmatch[to] = cur;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main() {\n    srand(20081231);\n\tcin >> n >> m >> t;\n\twhile (t--) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tif (!flag[x][y])\n\t\t\tflag[x][y] = 1, cnt++;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tid[i][0] = id[i - 1][m];\n\t\tfor (int j = 1; j <= m; j++) id[i][j] = id[i][j - 1] + 1/*, printf(\"id[%d][%d] = %d\\n\", i, j, id[i][j])*/;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tfor (int k = 0; k < 8; k++)\n\t\t\t\tEdge(i, j, i + d[k][0], j + d[k][1]);\n\tint ans = 0;\n\tfor (int i = 1; i <= n; i++) p[i] = i;\n\tfor (int i = 1; i <= m; i++) q[i] = i;\n\trandom_shuffle(p + 1, p + n + 1), random_shuffle(q + 1, q + m + 1);\n\tfor (int x = 1, i = p[1]; x <= n; x++, i = p[x])\n\t\tfor (int y = 1, j = q[1]; y <= m; y++, j = q[y])\n\t\t\tif (flag[i][j] == 0) {\n\t\t\t\tDFN++;\n//\t\t\t\tprintf(\"dfs(%d, %d)\\n\", i, j);\n\t\t\t\tif (dfs(id[i][j]))\n\t\t\t\t\tans++/*, printf(\"succeed: i = %d, j = %d\\n\", i, j)*/;\n\t\t\t}\n\t/*\n    for (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tprintf(\"match[%d][%d] = %d\\n\", i, j, match[id[i][j]]);\n\t*/\n\tcout << n * m - ans / 2 - cnt << endl;\n\treturn 0;\n}\n\n```\n\n## \u6548\u7387\uff08\u4e0d\u5f00O2\uff09\n* \u968f\u673a\u5316\uff1a813ms\n* \u66f4\u6539\u52a0\u8fb9\u987a\u5e8f\uff1a415ms\n* \u90fd\u4f7f\u7528\uff1a377ms\n\n#### THE END",
        "postTime": 1615210728,
        "uid": 253946,
        "name": "ClHg2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e"
    },
    {
        "content": "\u5176\u5b9e\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9898\u6bd4\u53e6\u5916\u4e24\u9053\u7d2b\u9898\u90fd\u6076\u5fc3\u3002\n\n# \u601d\u8def\n\u56e0\u4e3a\u8fd9\u9053\u9898\u4e0d\u80fd\u7528\u9ed1\u767d\u67d3\u8272\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u6309\u7167\u884c\u7684\u5947\u5076\u6027\u6765\u6807\u53f7\u3002\n\n\u8fd9\u6837\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\u5176\u5b9e\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u957f\u8116\u5b50\u9e7f\u7684\u653b\u51fb\u8303\u56f4\u884c\u4e0a\u7684\u79fb\u52a8\u65e0\u975e\u5c31 $1$\uff0c$-1$\uff0c$3$\uff0c$-3$ \u56db\u79cd\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u5c31\u4f1a\u53d1\u73b0\uff0c**\u5b83\u4eec\u90fd\u662f\u5947\u6570**\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5947\u6570\u884c\u4e0a\u7684\u70b9\u653b\u51fb\u5f97\u5230\u5076\u6570\u884c\u4e0a\u7684\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u4ea4\u4e0a\u53bb\u4ee3\u7801\uff0c\u53d1\u73b0\u4e00\u76f4 $60$ \u5206\uff0c\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u7684\u5751\u70b9\u6240\u5728\u4e86\uff0c**\u56e0\u4e3a\u9898\u76ee\u5e76\u6ca1\u6709\u8bf4\u6ca1\u6709\u91cd\u590d\u7684\u969c\u788d**\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u7edf\u8ba1\u4e00\u904d\u5b9e\u9645\u7684\u969c\u788d\u6570\u91cf\u3002\n# code\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ri register int\n#define N 5000005\n#define INF 0x3f3f3f3f\nusing namespace std;\nint cnt=1,head[N],to[N],w[N],next[N],deep[N];\nint maxflow,used,gap[N];\nint n,m,s,t,k;\nbool o[N];\nqueue<int>q;\nint dx[8]={1,3,1,3,-1,-3,-1,-3};\nint dy[8]={3,1,-3,-1,3,1,-3,-1};\nvoid add(int u,int v,int c){\n\tcnt++;\n\tto[cnt]=v;\n\tw[cnt]=c;\n\tnext[cnt]=head[u];\n\thead[u]=cnt;\n}\nvoid bfs(){\n\tmemset(gap,0,sizeof(gap));\n\tmemset(deep,-1,sizeof(deep));\n\tq.push(t);\n\tdeep[t]=0;\n\tgap[0]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\tint v=to[i];\n\t\t\tif(deep[v]==-1){\n\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\tgap[deep[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint dfs(int u,int flow){\n\tif(u==t){\n\t\tmaxflow+=flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=head[u];i;i=next[i]){\n\t\tint v=to[i];\n\t\tif(w[i]&&deep[v]+1==deep[u]){\n\t\t\tint quan=dfs(v,min(w[i],flow-used));\n\t\t\tif(quan){\n\t\t\t\tw[i]-=quan;\n\t\t\t\tw[i^1]+=quan;\n\t\t\t\tused+=quan;\n\t\t\t}\n\t\t\tif(flow==used) return used;\n\t\t}\n\t}\n\t--gap[deep[u]];\n\tif(gap[deep[u]]==0){\n\t\tdeep[s]=n*m+1;\n\t}\n\tdeep[u]++;\n\tgap[deep[u]]++;\n\treturn used;\n}\nint ISAP(){\n\tmaxflow=0;\n\tbfs();\n\twhile(deep[s]<n*m){\n\t\tdfs(s,INF);\n\t}\n\treturn maxflow;\n}\nsigned main(){\n\tcin>>n>>m>>k;\n\ts=n*m+1;\n\tt=s+1;\n\tint rp=0;\n\tfor(int i=1;i<=k;i++){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tif(!o[(u-1)*m+v]){\n\t\t\trp++;//\u795d\u4f60rp++\n\t\t}\n\t\to[(u-1)*m+v]=1;\n\t}\n\tfor(ri i=1;i<=n;i++){\n\t\tfor(ri j=1;j<=m;j++){\n\t\t\tif(i&1){\n\t\t\t\tadd(s,(i-1)*m+j,1);\n\t\t\t\tadd((i-1)*m+j,s,0);\n\t\t\t}else{\n\t\t\t\tadd((i-1)*m+j,t,1);\n\t\t\t\tadd(t,(i-1)*m+j,0);\n\t\t\t}\n\t\t}\n\t}\n\tfor(ri i=1;i<=n;i++){\n\t\tfor(ri j=1;j<=m;j++){\n\t\t\tif(!o[(i-1)*m+j]&&(i&1)){\n\t\t\t\tfor(ri k=0;k<8;k++){\n\t\t\t\t\tint u=i+dx[k],v=j+dy[k];\n\t\t\t\t\tif(u>0&&v>0&&u<=n&&v<=m&&!o[(u-1)*m+v]){\n\t\t\t\t\t\tadd((i-1)*m+j,(u-1)*m+v,1);\n\t\t\t\t\t\tadd((u-1)*m+v,(i-1)*m+j,0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<n*m-rp-ISAP();\n\treturn 0;\n}\n```\n",
        "postTime": 1605922785,
        "uid": 244165,
        "name": "_121017_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e8c\u5206\u56fe\u4e2d\u6bd4\u8f83\u5178\u578b\u7684\u5efa\u6a21\u6a21\u578b\uff1a**\u68cb\u76d8\u6a21\u578b**\n\n\u7c7b\u4f3c\u9898\u76ee\u8fd8\u6709[P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.org/problem/P3355)\uff0c[P3882 [JLOI2008]\u5c06\u519b](https://www.luogu.org/problem/P3882)\u7b49\n\n\u8fd9\u7c7b\u6a21\u578b\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a\u5728\u68cb\u76d8\u4e0a\u7ed9\u5b9a\u4e00\u4e9b\u80fd\u653e\u7684\u4f4d\u7f6e\uff0c\u95ee\u4f60\u6700\u591a\u653e\u51e0\u4e2a\u68cb\u5b50\uff0c\n\n\u4f7f\u5f97\u68cb\u5b50\u4e4b\u95f4\u4e92\u76f8\u4e0d\u653b\u51fb\n\n\u901a\u5e38\u6211\u4eec\u628a\u5b83\u8f6c\u6362\u6210\u4e8c\u5206\u56fe\u95ee\u9898\uff0c\u5229\u7528\u5308\u7259\u5229\u7b97\u6cd5\u6216\u8005\u7f51\u7edc\u6d41\u8fdb\u884c\u6c42\u89e3\n\n---\n\n\u5728\u672c\u9898\u4e2d\uff0c\u957f\u8116\u5b50\u9e7f\u7684\u8d70\u6cd5\u8ddf\u9a6c\u6709\u51e0\u5206\u76f8\u4f3c\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u6240\u6709\u80fd\u653e\u7f6e\u7684\u70b9\u6784\u9020\u51fa\u4e00\u526f\u4e8c\u5206\u56fe\uff0c\u6839\u636e\u884c\u7684\u5947\u5076\u6027\u8fdb\u884c\u5206\u7ec4\uff0c\n\n\u628a\u4e0d\u80fd\u4e00\u8d77\u653e\u7684\u70b9\u8fdb\u884c\u8fde\u8fb9\uff0c\u6c42\u51fa\u8be5\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\n\n\u5229\u7528\u957f\u8116\u5b50\u9e7f\u6bcf\u4e00\u6b65\u8d70$(\\pm3,\\pm1)$\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u6784\u9020\u51fa\u6765\u7684\u56fe\u6ca1\u6709\u5947\u73af\n\n**\u56e0\u4e3a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6=\u603b\u70b9\u6570-\u6700\u5927\u5339\u914d**\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8fdb\u884c\u6c42\u89e3\n\nCode:\n\n```\n#include<bits/stdc++.h>\n\n#define rd(x) x=read()\n\n#define N 205\n\nusing namespace std;\n\nint n,m,k;\n\nstruct E{\n\tint to,nxt;\n}e[N*N*20];\nint head[N*N],vis[N*N],rmatch[N*N];\nint f[N][N];\nint tot;\n\nconst int dir[2][8]={{-3,3,-3,3,-1,1,-1,1},{1,1,-1,-1,3,3,-3,-3}};\n\ninline void addEdge(int u,int v){e[++tot].to=v,e[tot].nxt=head[u],head[u]=tot;}\n\ninline bool check(int x,int y){return x>0&&y>0&&x<=n&&y<=m&&!f[x][y];}\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n\ninline void write(int x)\n{\n    if(x<0){putchar('-');x=-x;}\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\n\nbool dfs(int u)\n{\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(vis[v])continue;\n\t\tvis[v]=1;\n\t\tif(!rmatch[v]||dfs(rmatch[v]))\n\t\t{\n\t\t\trmatch[v]=u;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint hungary()\n{\n\tint ans=0;\n\tfor(int i=1;i<=n*m;i++)\n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tans+=dfs(i);\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\trd(n),rd(m),rd(k);\n\tfor(int i=0;i<k;i++){int u,v;rd(u),rd(v),f[u][v]=1;}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(i&1||f[i][j])continue;\n\t\t\tfor(int k=0;k<8;k++)\n\t\t\t{\n\t\t\t\tint dx=i+dir[0][k],dy=j+dir[1][k];\n\t        \t\tif(check(dx,dy))addEdge((i-1)*m+j,(dx-1)*m+dy);\n\t\t\t}\n\t\t}\n\tcout<<n*m-hungary()-k<<endl;\n  \treturn 0;\n}\n```\n---\n\n\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u662f\u628a\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u7684\u70b9\u8fde\u8fb9\uff0c\n\n\u5982\u679c\u5728\u8fb9\u6570\u8fc7\u591a\u5bfc\u81f4\u8d85\u65f6\u6216\u8005\u70b8\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u5de7\u5999\u5229\u7528\u9898\u76ee\u7684\u6027\u8d28\uff0c\u6bd4\u5982\u5c06\u6240\u5728\u68cb\u5b50\u7684\u884c\u5217\uff08\u751a\u81f3\u8fd8\u6709\u659c\u5217\uff09\u8fdb\u884c\u8fde\u8fb9\uff0c\n\n\u4ece\u800c\u4f18\u5316\u8fb9\u6570\uff0c\u8bfb\u8005\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b[P3882 [JLOI2008]\u5c06\u519b](https://www.luogu.org/problem/P3882)\uff0c\n\n\u5728\u90a3\u9898\u4e2d\u8fd9\u4e2a\u5efa\u6a21\u65b9\u5f0f\u5c31\u5145\u5206\u4f53\u73b0\u51fa\u6765\u4e86\n",
        "postTime": 1570512140,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u548c[P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.org/problemnew/show/P3355)\u5dee\u4e0d\u591a\uff0c\u4f46\u8fd9\u9898\u7684\u5efa\u56fe\u6bd4\u8f83\u6076\u5fc3\u3002\n\n\u8fd9\u9898\u867d\u7136\u4e0d\u80fd\u7528\u5947\u5076\u6027\u5efa\u56fe\uff0c\u4f46\u5f88\u660e\u663e\u8fd9\u9898\u4e5f\u53ef\u4ee5\u5efa\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u7c7b\u4f3c\u5e76\u67e5\u96c6\u7684\u601d\u60f3\u6765\u628a\u70b9\u5212\u5206\u5728\u4e24\u7aef\u3002\n```cpp\n    memset(ok,-1,sizeof ok);\n    for(int i=1;i<=n;++i){\n    \tfor(int j=1;j<=m;++j){\n    \t\tif(ok[i][j]==-1)ok[i][j]=1;\n            for(int kk=1;kk<=8;++kk){\n                int nx=i+dx[kk],ny=j+dy[kk];\n                if(nx<1||nx>n||ny<1||ny>m)continue;\n                ok[nx][ny]=ok[i][j]^1;\n            }\n\t\t}\n\t}\n```\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u4e86\u3002\n\n\u4ee3\u7801\n\n```cpp\nint main()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=k;++i){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        mp[x][y]=1;\n    }b=0,e=n*n+1;\n    memset(ok,-1,sizeof ok);\n    for(int i=1;i<=n;++i){\n    \tfor(int j=1;j<=m;++j){\n    \t\tif(ok[i][j]==-1)ok[i][j]=1;\n            for(int kk=1;kk<=8;++kk){\n                int nx=i+dx[kk],ny=j+dy[kk];\n                if(nx<1||nx>n||ny<1||ny>m)continue;\n                ok[nx][ny]=ok[i][j]^1;\n            }\n\t\t}\n\t}\n    for(int i=1;i<=n;++i){\n        for(int j=1;j<=m;++j){\n            if(mp[i][j])continue;\n            if(ok[i][j]){\n                add(b,(i-1)*m+j,1);\n                add((i-1)*m+j,b,0);\n                for(int kk=1;kk<=8;++kk){\n                    int nx=i+dx[kk],ny=j+dy[kk];\n                    if(nx<1||nx>n||ny<1||ny>m||mp[nx][ny])continue;\n                    add((i-1)*m+j,(nx-1)*m+ny,1);\n                    add((nx-1)*m+ny,(i-1)*m+j,0);\n                }\n            }else{\n                add((i-1)*m+j,e,1);\n                add(e,(i-1)*m+j,0);\n            }\n        }\n    }\n    cout<<n*m-k-maxflow()<<endl;\n}\n```\n(\u7701\u53bb\u4e86\u5176\u4ed6\u51fd\u6570\uff0c\u53ea\u5269\u4e0b\u4e86mian\uff0c\u6240\u4ee5\u4ea4\u4e0a\u53bb\u4e00\u5b9a\u4f1aCE)",
        "postTime": 1542181193,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "\u5efa\u8bae\u5148\u884c\u5b8c\u6210 P4304\u3002\n\n# \u9898\u76ee\u5927\u610f\n\n\u5982\u56fe\u6240\u793a\uff0c\u897f\u6d0b\u68cb\u7684\u201c\u957f\u8116\u5b50\u9e7f\u201d\uff0c\u7c7b\u4f3c\u4e8e\u4e2d\u56fd\u8c61\u68cb\u7684\u9a6c\uff0c\u4f46\u6309\u7167\u201c\u76ee\u201d\u5b57\u653b\u51fb\uff0c\u4e14\u6ca1\u6709\u4e2d\u56fd\u8c61\u68cb\u201c\u522b\u9a6c\u817f\u201d\u7684\u89c4\u5219\u3002\uff08\u56e0\u4e3a\u957f\u8116\u5b50\u9e7f\u6ca1\u6709\u9a6c\u817f\uff09\n\n![avatar](https://cdn.luogu.com.cn/upload/pic/37260.png)\n\n\u7ed9\u5b9a\u4e00\u4e2a $n\\times m$ \u7684\u68cb\u76d8\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u7981\u6b62\u653e\u68cb\u5b50\u3002\u95ee\u68cb\u76d8\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\u7684\u957f\u8116\u5b50\u9e7f\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u8fd9\u9053\u9898\u4e0d\u80fd\u901a\u8fc7\u884c\u5217\u5750\u6807\u6765\u9ed1\u767d\u67d3\u8272\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u989c\u8272\u90fd\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u89c2\u5bdf\u4e0a\u56fe\uff0c\u957f\u8116\u5b50\u9e7f\u7684\u989c\u8272\u4e3a\u767d\u8272\uff0c\u53ef\u8fbe\u683c\u5b50\u4e5f\u662f\u767d\u8272\uff0c\u800c\u6211\u4eec\u9ed1\u767d\u67d3\u8272\u5c31\u662f\u4e3a\u4e86\u628a\u8fd9\u5f53\u524d\u5730\u70b9\u548c\u53ef\u8fbe\u70b9\u533a\u5206\u5f00\uff0c\u6545\u4e0d\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u5f97\u5230\u4e0d\u59a8\u76f4\u63a5\u901a\u8fc7\u884c\u5750\u6807\u7684\u5947\u5076\u6027\u6765\u67d3\u8272\u3002\n\n\u7136\u540e\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u95ee\u9898\uff0c\u9996\u5148\u6211\u4eec\u8003\u8651\u5230\u5982\u679c\u5c06\u4e24\u4e2a\u53ef\u4ee5\u4e92\u76f8\u653b\u51fb\u7684\u4f4d\u7f6e\u8fde\u8fb9\uff0c\u90a3\u4e48\u9898\u76ee\u4e2d\u6240\u8981\u6c42\u7684\u5c31\u662f\u9009\u51fa\u6700\u591a\u7684\u70b9\uff0c\u4f7f\u5f97\u4ed6\u4eec\u4e24\u4e24\u4e4b\u95f4\u4e0d\u5b58\u5728\u8fb9\u3002\u7b54\u6848\u5c31\u662f\u70b9\u7684\u603b\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u6570\u3002\u5176\u4ed6\u7684\u90fd\u548c P4304 \u5f88\u50cf\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\t#ifndef ONLINE_JUDGE\n\t#define getc getchar\n\t#endif\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline double double_read() {\n\t\tlong long ret = 0,w = 1,aft = 0,dot = 0,num = 0;\n\t\tchar ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif (ch == '-') w = -1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch) || ch == '.') {\n\t\t\tif (ch == '.') {\n\t\t\t\tdot = 1;\n\t\t\t} else if (dot == 0) {\n\t\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\t} else {\n\t\t\t\taft = (aft << 3) + (aft << 1) + ch - '0';\n\t\t\t\tnum ++;\n\t\t\t}\n\t\t\tch = getc();\n\t\t}\n\t\treturn (pow(0.1,num) * aft + ret) * w;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\n\nconst short dx[] = {-3,-3,-1,-1,1,1,3,3};\nconst short dy[] = {-1,1,-3,3,-3,3,-1,1};\nconst int N = 505;\nstruct Graph {\n\tint v,nxt;\n} gra[N * N];\nint head[N * N],mat[N * N],vis[N * N];\nbool maps[N][N];\nint n,m,k,idx,nowidx;\ninline void add(int u,int v) {\n\tgra[++ idx] = (Graph){v,head[u]},head[u] = idx;\n}\ninline int getid(int x,int y) {\n\treturn (x - 1) * m + y;\n}\ninline int getcol(int x,int y) {\n\treturn x % 2;\n}\ninline bool dfs(int now) {\n\tfor (register int i = head[now];i;i = gra[i].nxt) {\n\t\tint v = gra[i].v;\n\t\tif (vis[v] != nowidx) {\n\t\t\tvis[v] = nowidx;\n\t\t\tif (!mat[v] || dfs(mat[v])) {\n\t\t\t\tmat[v] = now;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(void) {\n\tn = read(),m = read(),k = read();\n\tfor (register int i = 1;i <= k; ++ i) {\n\t\tint x = read(),y = read();\n\t\tmaps[x][y] = true;\n\t}\n\tint all = 0;\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (maps[i][j]) continue;\n\t\t\tall ++;\n\t\t\tif (getcol(i,j) == 1) continue;\n\t\t\tfor (register int k = 0;k < 8; ++ k) {\n\t\t\t\tint nx = i + dx[k],ny = j + dy[k];\n\t\t\t\tif (nx >= 1 && nx <= n && ny >= 1 && ny <= m && !maps[nx][ny] && getcol(nx,ny) == 1) {\n\t\t\t\t\tadd(getid(i,j),getid(nx,ny));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint ans = 0;\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (maps[i][j] || getcol(i,j) == 1) continue;\n\t\t\tnowidx ++;\n\t\t\tif (dfs(getid(i,j))) ans ++;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",all - ans);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1655624731,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e"
    },
    {
        "content": "# P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e\n\n[P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e](https://www.luogu.com.cn/problem/P5030)\n\n## \u5206\u6790\n\n\u8fd9\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u7684\u95ee\u9898\uff0c\u4f46\u662f\u548c\u4ee5\u524d\u505a\u7684\u9898\u90fd\u4e0d\u4e00\u6837\uff0c\u540c\u65f6\u4e5f\u5f88\u96be\u60f3\u5230\u600e\u4e48\u505a\u3002\u9898\u76ee\u4e2d\u8981\u6c42\u4efb\u610f\u4e24\u4e2a\u53ef\u4ee5\u76f8\u4e92\u653b\u51fb\u7684\u65b9\u683c\u4e0d\u80fd\u540c\u65f6\u53d6\uff0c\u5982\u679c\u6211\u4eec\u628a\u4e00\u4e2a\u65b9\u683c\u653e\u5728 A \u7ec4\uff0c\u53e6\u4e00\u4e2a\u65b9\u5757\u653e\u5728 B \u7ec4\uff0c\u90a3\u4e48\u6240\u6709\u548c A \u4e2d\u65b9\u683c\u53ef\u4ee5\u653b\u51fb\u5230\u7684\u65b9\u683c\u90fd\u8981\u653e\u5728 B \u7ec4\uff0c\u548c B \u4e2d\u65b9\u683c\u53ef\u4ee5\u653b\u51fb\u5230\u7684\u90fd\u8981\u653e\u5728 A \u7ec4\u3002\u5982\u679c\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u56fe\u5206\u6210\u4e86\u4e24\u7ec4\uff0c\u53ea\u6709\u4e24\u7ec4\u4e4b\u95f4\u6709\u5173\u7cfb\uff0c\u540c\u4e00\u7ec4\u7684\u65b9\u683c\u6ca1\u6709\u5173\u7cfb\uff0c\u662f\u4e0d\u662f\u5f88\u50cf\u4e8c\u5206\u56fe\uff1f\u6211\u4eec\u628a\u6240\u6709\u76f8\u4e92\u653b\u51fb\u7684\u65b9\u683c\u90fd\u7528\u4e00\u6761\u8fb9\u8fde\u4e0a\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5220\u53bb\u4e00\u4e9b\u8282\u70b9\uff0c\u4f7f\u5f97\u4e24\u7ec4\u4e4b\u95f4\u8fde\u901a\uff0c\u6c42\u51fa\u5220\u53bb\u8282\u70b9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u6765\u770b\u4e24\u4e2a\u4e92\u76f8\u653b\u51fb\u7684\u70b9\u6709\u4ec0\u4e48\u7279\u70b9\uff1a$(x,y) \\Leftrightarrow (x+1,y+3)$\uff0c$(x,y) \\Leftrightarrow (x-1,y+3)$\uff0c$(x,y) \\Leftrightarrow (x-3,y+1)$\uff0c$\\cdots$\u3002\u663e\u7136\uff0c\u4efb\u610f\u4e24\u4e2a\u76f8\u4e92\u653b\u51fb\u7684\u70b9\u6a2a\u7eb5\u5750\u6807\u7684\u5947\u5076\u6027\u90fd\u4e0d\u76f8\u540c\u3002\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u6309\u6a2a\u5750\u6807\u7684\u5947\u5076\u6027\u5206\u7ec4\u5373\u53ef\uff0c\u867d\u7136\u53ef\u4ee5\u5206\u6210 $4$ \u7ec4\uff0c\u4f46\u662f\u6ca1\u6709\u5fc5\u8981\uff0c\u53ea\u8981\u4fdd\u8bc1\u540c\u4e00\u7ec4\u5185\u4e0d\u76f8\u4e92\u653b\u51fb\u5373\u53ef\u3002\n\n\u5206\u5b8c\u7ec4\u540e\uff0c\u8981\u5220\u53bb\u6700\u5c11\u7684\u8282\u70b9\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u6700\u5c0f\u5272\uff08\u6700\u5c0f\u5272=\u6700\u5927\u6d41\uff09\uff0c\u4f46\u662f\u6700\u5c0f\u5272\u5220\u53bb\u7684\u662f\u8fb9\uff0c\u800c\u4e0d\u662f\u70b9\u3002\u6211\u4eec\u8f6c\u5316\u4e00\u4e0b\uff0c\u5c06\u6e90\u70b9\u548c A \u7ec4\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u6c47\u70b9\u548c B \u7ec4\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u5747\u4e3a $1$\uff0c\u8fd9\u6837\u5220\u53bb\u4e00\u6761\u8fb9\u7684\u4ee3\u4ef7\u521a\u597d\u662f $1$\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5220\u53bb\u4e24\u7ec4\u4e4b\u95f4\u7684\u8fb9\uff0c\u4e3a\u4e86\u4e0d\u5220\u53bb\u8fd9\u4e9b\u8fb9\uff0c\u628a\u8fd9\u4e9b\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a\u6b63\u65e0\u7a77\uff0c\u5c31\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5220\u53bb\u8fd9\u4e9b\u8fb9\u4e86\u3002\u7531\u4e8e\u6700\u5c0f\u5272 $=$ \u6700\u5927\u6d41\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5373\u53ef\u3002\u6ce8\u610f\u53ea\u80fd\u7531 A \u7ec4\u8fde\u5411 B \u7ec4\u6216 B \u7ec4\u8fde\u5411 A \u7ec4\uff0c\u4e0d\u80fd\u540c\u65f6\u8fde\u3002\n\n## code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=50001,M=2000001;\nint n,m,q,p=1,s1,s2,t[N],t0[N],f[N];\nshort dx[8]={-3,-1,1,3,3,1,-1,-3},dy[8]={-1,-3,-3,-1,1,3,3,1};\nbool b[N];\nstruct str\n{\n    int m,q;\n    ll r;\n}a[M];\nbool check(int x,int y)\n{\n    return x>=1&&x<=m&&y>=1&&y<=n;\n}\nint sum(int x,int y)\n{\n    return (x-1)*n+y;\n}\nvoid road(int x,int y,ll r)\n{\n    a[++p].m=y;\n    a[p].q=t[x];\n    t[x]=p;\n    a[p].r=r;\n}\nbool bfs()\n{\n    queue<int> Q;\n    Q.push(s1);\n    for(int i=1;i<=s2;++i) f[i]=0;\n    f[s1]=1;\n    while(!Q.empty())\n    {\n        int k=Q.front();\n        Q.pop();\n        for(int i=t[k];i!=0;i=a[i].q)\n        {\n            if(f[a[i].m]==0&&a[i].r!=0)\n            {\n                f[a[i].m]=f[k]+1;\n                Q.push(a[i].m);\n            }\n        }\n    }\n    return f[s2]!=0;\n}\nll dfs(int x,ll r)\n{\n    if(x==s2) return r;\n    ll s=0;\n    for(int i=t0[x];i!=0;i=a[i].q)\n    {\n        t0[x]=i;\n        if(f[a[i].m]==f[x]+1&&a[i].r!=0)\n        {\n            int z=dfs(a[i].m,min(r,a[i].r));\n            if(z!=0)\n            {\n                a[i].r-=z;\n                a[i^1].r+=z;\n                r-=z;\n                s+=z;\n            }\n            else f[a[i].m]=0;\n            if(r==0) return s; \n        }\n    }\n    return s;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&m,&n,&q);\n    s1=m*n+1;\n    s2=m*n+2;\n    for(int i=1;i<=q;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(b[sum(x,y)]==true) --i,--q;\n        b[sum(x,y)]=true;\n    }\n    for(int i=1;i<=m;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            if(b[sum(i,j)]==true) continue;\n            if(i&1)\n            {\n                road(s1,sum(i,j),1);\n                road(sum(i,j),s1,0);\n                for(int k=0;k<=7;++k)\n                {\n                    if(check(i+dx[k],j+dy[k]))\n                    {\n                        road(sum(i,j),sum(i+dx[k],j+dy[k]),1e18);\n                        road(sum(i+dx[k],j+dy[k]),sum(i,j),0);\n                    }\n                }\n            }\n            else\n            {\n                road(sum(i,j),s2,1);\n                road(s2,sum(i,j),0);\n            }\n        }\n    }\n    ll r=0;\n    while(bfs())\n    {\n        for(int i=1;i<=s2;++i) t0[i]=t[i];\n        r+=dfs(s1,1e18);\n    }\n    printf(\"%lld\",m*n-q-r);\n    return 0;\n}\n```",
        "postTime": 1650606397,
        "uid": 291248,
        "name": "\u8d75\u60a6\u5c91",
        "ccfLevel": 7,
        "title": "P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e"
    },
    {
        "content": "\u5c06\u6bcf\u4e2a\u683c\u5b50\u548c\u5f80\u516b\u4e2a\u65b9\u5411\u8d70\u4e00\u6b65\u53ef\u4ee5\u5230\u7684\u683c\u5b50\u8fde\u8fb9\uff0c\u7531\u4e8e\u6bcf\u8d70\u4e00\u6b65\u884c\u7684\u5947\u5076\u6027\u603b\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u5c31\u662f\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u4f18\u5316\uff1a\u5339\u914d\u4f18\u5148\u5f80\u4e0b\u5339\u914d\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u5feb\u627e\u51fa\u589e\u5e7f\u8def\u3002\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int kN = 201, kD[8][2] = {{3, 1}, {1, 3}, {3, -1}, {1, -3}, {-1, -3}, {-3, -1}, {-1, 3}, {-3, 1}};\n\nint n, m, k, v[kN * kN], t, s, p[kN * kN];\nbool a[kN][kN];\nvector<int> ne[kN * kN];\n\nint Encode(int x, int y) { // \u5c06\u4e8c\u7ef4\u5c5e\u6027\u7f16\u7801\u6210\u4e00\u4e2a\u6570\n  return (x - 1) * m + y;\n}\nbool F(int x) { // \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n  if (v[x] ^ t) {\n    v[x] = t;\n    for (int i : ne[x]) {\n      if (!p[i] || F(p[i])) {\n        return p[i] = x;\n      }\n    }\n  }\n  return 0;\n}\n\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m >> k;\n  for (int i = 1, x, y; i <= k; ++i) {\n    cin >> x >> y;\n    a[x][y] = 1;\n  }\n  k = 0;\n  for (int i = 1; i <= n; ++i) { // \u6ce8\u610f\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\u7684\u7981\u70b9\n    for (int j = 1; j <= m; ++j) {\n      k += a[i][j];\n    }\n  }\n  for (int i = 1; i <= n; i += 2) {\n    for (int j = 1; j <= m; ++j) {\n      if (!a[i][j]) {\n        for (int k = 0; k < 8; ++k) {\n          int x = i + kD[k][0], y = j + kD[k][1];\n          if (x >= 1 && x <= n && y >= 1 && y <= m && !a[x][y]) {\n            ne[Encode(i, j)].push_back(Encode(x, y)), ne[Encode(x, y)].push_back(Encode(i, j)); // \u5efa\u56fe\n          }\n        }\n      }\n    }\n  }\n  for (int i = 1; i <= n; i += 2) { // \u6c42\u51fa\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d=\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\n    for (int j = 1; j <= m; ++j) {\n      ++t, s += F(Encode(i, j));\n    }\n  }\n  cout << n * m - s - k; // \u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6=N-\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\n  return 0;\n}\n```\n",
        "postTime": 1644235786,
        "uid": 376161,
        "name": "wsfxk",
        "ccfLevel": 6,
        "title": "P5030 \u957f\u8116\u5b50\u9e7f\u653e\u7f6e \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u548c P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898\u5927\u540c\u5c0f\u5f02\uff1b\u5c31\u662f\u8d70\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u4e0d\u6ce8\u610f\u5c31\u4f1a\u88ab\u5751\uff1b\u552f\u4e00\u4e0d\u540c\u7684\u5c31\u662f\u5efa\u8fb9\u7684\u65f6\u5019\u6709\u4e9b\u5dee\u5f02\uff1b\u5efa\u597d\u8fb9\u540e\u8dd1\u6700\u5927\u6d41\u5c31\u5b8c\u7f8eAC\u4e86\uff1b\u4e0d\u4f1a\u5efa\u8fb9\u7684\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u6211\u8fd9\u4e2a\u849f\u84bb\u778e\u8499\u51fa\u6765\u7684\u65b9\u6cd5\uff1b\u9898\u610f\u4e0d\u660e\u7684\u53ef\u4ee5\u5148\u53bb\u505a\u4e00\u4e0b P3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898 \u8fd9\u9053\u9898\uff1b\n\n\u597d\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2000005;\nint n,m,k,s,t;\nstruct edge{\n\tint v,nxt,val;\n}e[N];\nint head[N],cnt=1,cur[N];\nint ans;\nbool b[1005][1005];\nint dis[N];\nint dx[]={3,3,1,1,-3,-3,-1,-1};\nint dy[]={1,-1,3,-3,1,-1,3,-3};\nqueue<int>q;\nint Read()\n{\n\tint ch=0;\n\tchar w=getchar();\n\twhile(w<'0'||w>'9') w=getchar();\n\twhile(w>='0'&&w<='9'){\n\t\tch=ch*10+w-'0';\n\t\tw=getchar();\n\t}\n\treturn ch;\n}\nvoid add(int u,int v,int val){\n\te[++cnt]=(edge){v,head[u],val};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0};head[v]=cnt;\n}\nbool bfs()\n{\n\tmemset(dis,-1,sizeof(dis));\n\tdis[s]=1;q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]==-1&&e[i].val)\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=-1;\n}\nint dfs(int u,int flow)\n{\n\tif(u==t) return flow;\n\tint res=0;\n\tfor(int i=cur[u];i;i=e[i].nxt)\n\t{\n\t\tcur[u]=i;int v=e[i].v;\n\t\tif(dis[v]==dis[u]+1&&e[i].val)\n\t\t{\n\t\t\tint fl=dfs(v,min(flow,e[i].val));\n\t\t\tif(fl)\n\t\t\t{\n\t\t\t\tflow-=fl;res+=fl;\n\t\t\t\te[i].val-=fl;e[i^1].val+=fl;\n\t\t\t\tif(!flow) return res;\n\t\t\t}\n\t\t}\n\t} \n\treturn res;\n}\nint main()\n{\n\tn=Read();m=Read();k=Read();\n\tans=n*m-k;\n\ts=n*m+1;t=s+1;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x,y;\n\t\tx=Read();y=Read();\n\t\tb[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(b[i][j]==1) continue;\n\t\t\tif(i%2==1) add(s,(i-1)*m+j,1);//\u4e0d\u540c\u7684\u5efa\u8fb9\n\t\t\tif(i%2==0) add((i-1)*m+j,t,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tif(i%2==0) continue;//\u4e00\u6837\u4e0d\u540c\n\t\t\tif(b[i][j]==1) continue;\n\t\t\tfor(int o=0;o<8;o++)\n\t\t\t{\n\t\t\t\tint xx=dx[o]+i;\n\t\t\t\tint yy=dy[o]+j;\n\t\t\t\tif(xx<1||xx>n||yy<1||yy>m||b[xx][yy]==1) continue;\n\t\t\t\tadd((i-1)*m+j,(xx-1)*m+yy,1e9);\n\t\t\t}\n\t\t}\n\t}\n\twhile(bfs()){\n\t\tmemcpy(cur,head,sizeof(head));\n\t\tans-=dfs(s,1<<29);\n\t}//DInic\u5927\u6cd5\uff0c\u4e0d\u7965\u8c08\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565239419,
        "uid": 203867,
        "name": "\u82cf\u5e55\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    },
    {
        "content": "# \u5514\u5463\n\u8fd9\u9053\u9898\u7ec8\u4e8e\u53d8\u9ed1\u4e86\uff0c\u53ef\u559c\u53ef\u8d3a\uff0c\u6240\u4ee5\u6765\u5199\u9053\u9898\u89e3~~\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u662f\u56e0\u4e3a\u5495\u503c\u4e0d\u591f\u4e86~~\n\n\n------------\n- \u9996\u5148\u6211\u4eec\u770b\uff0c\u5728\u68cb\u76d8\u4e0a\u653e\u68cb\u5b50\uff0c\u8ba9\u4ed6\u4eec\u4e92\u76f8\u4e0d\u80fd\u653b\u51fb\uff0c\u8fd9\u660e\u663e\u662f\u5230\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\uff08\u7c7b\u4f3c\u9898[\u9a91\u58eb\u5171\u5b58\u95ee\u9898](https://www.luogu.org/problemnew/show/P3355)\uff09\n\n- \u63a5\u7740\u6211\u4eec\u60f3\u600e\u6837\u67d3\u8272\uff0c\u7b2c\u4e00\u4e0b\u60f3\u7684\u5c31\u662f\u50cf\u68cb\u76d8\u90a3\u6837\u6309\u884c\u5217\u5947\u5076\u6027\u6765\u67d3\uff0c\u4f46\u662f\u663e\u7136\u4e0d\u5bf9\u3002\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u60ca\u4eba\u7684\u95ee\u9898\uff0c**\u57fa\u6570\u884c\u548c\u5076\u6570\u884c\u4e4b\u95f4\u7684\u68cb\u5b50\u4e0d\u4f1a\u4e92\u76f8\u653b\u51fb\uff01\uff01\uff01**\u8fd9\u6837\u5c31\u597d\u4e86\uff0c\u6309\u884c\u5947\u5076\u6027\u6765\u67d3\u8272\uff0c\u8dd1\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u884c\uff08\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6=\u70b9\u6570-\u6700\u5927\u5339\u914d\u6570\uff09\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#define MAXN 50005\n#define MAXM 500050\nusing namespace std;\nint head[MAXN],next[MAXM*2],to[MAXM*2],w[MAXM*2],cur[MAXN];\nint n,m,k,s,t;\nint cnt=-1;\nint deep[MAXN];\nint tu[220][220];\nstruct node{\n       int l;\n       int r;\n};\nvoid link(int a,int b,int c){\n     cnt++;\n     w[cnt]=c;\n     next[cnt]=head[a];\n     to[cnt]=b;\n     head[a]=cnt;\n     cnt++;\n     w[cnt]=0;\n     next[cnt]=head[b];\n     to[cnt]=a;\n     head[b]=cnt;\n}\nbool bfs(){\n     memset(deep,0,sizeof(deep));\n     queue<int> q;\n     while(!q.empty())q.pop();\n     q.push(s);\n     deep[s]=1;\n     while(!q.empty()){\n                       int now=q.front();\n                       q.pop();\n                       for(int i=head[now];i!=-1;i=next[i]){\n                               if (w[i]&&!deep[to[i]]){\n                                                       deep[to[i]]=deep[now]+1;\n                                                       q.push(to[i]);\n                               }\n                       }\n     }\n     if (deep[t])return 1;else return 0;\n}\nint dinic(int now,int last){\n    if (now==t||!last)return last;\n    int ret=0;\n    for(int i=cur[now];i!=-1;i=next[i]){\n            if(deep[to[i]]-1==deep[now]&&w[i]){\n                                               int zgl=dinic(to[i],min(w[i],last-ret));\n                                               if (zgl){\n                                                        w[i]-=zgl;\n                                                        w[i^1]+=zgl;     \n                                                        ret+=zgl;\n                                                        if(ret>=last) break;\n                                               }\n            }\n            cur[now]=i;\n    }\n    return ret;\n}\nint num(int a,int b){\n    return n*(a-1)+b;\n}\nbool check(int a,int b){\n     if (a&1) return 1;else return 0;\n}\nint main(){\n    cin>>n>>m>>k;;\n    int x[8]={1,1,3,3,-1,-1,-3,-3},y[8]={3,-3,1,-1,3,-3,1,-1};\n    memset(head,-1,sizeof(head));\n    memset(tu,0,sizeof(tu));\n    int sum=n*m-k;\n    s=0;t=n*m+2;\n    for(int i=1;i<=k;i++){\n            int a,b;\n            scanf(\"%d%d\",&a,&b);\n            tu[a][b]=1;\n    }\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<=m;j++){\n                    if (check(i,j)){link(num(i,j),t,1);continue;};\n                    if (tu[i][j])continue;\n                    link(s,num(i,j),1);\n                    for(int k=0;k<8;k++){\n                            int xx=i+x[k],yy=j+y[k];\n                            if (tu[xx][yy])continue;\n                            if (xx<=0||yy<=0||xx>n||yy>m)continue;\n                            link(num(i,j),num(xx,yy),1);\n                    }\n            }\n    }\n    int ans=0;\n    while(bfs()){\n                 memcpy(cur,head,sizeof(cur));\n                 ans+=dinic(s,9999999);\n    }\n    cout<<sum-ans;\n    return 0;\n}\n\n```\n\u7801\u98ce\u5de8\u4e11\uff0c\u8bf7\u5927\u4f6c\u4eec\u89c1\u8c05QAQ",
        "postTime": 1547350902,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5030 \u3010\u957f\u8116\u5b50\u9e7f\u653e\u7f6e\u3011"
    }
]