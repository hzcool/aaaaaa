[
    {
        "content": "\u9898\u76ee\u5f88\u68d2\u3002\n\n\u4ece\u6211\u4e2a\u4eba\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u90a3\u4e48\u4e0d\u592a\u51c6\u786e\u7684\u4e00\u53e5\u8bdd\u52a0\u6df1\u4e86\u6211\u7684\u7406\u89e3\u3002\n\n\u6700\u5c0f\u5272\u5728\u6570\u503c\u4e0a\u4e0e\u6700\u5927\u6d41\u76f8\u7b49\uff0c\u4f46\u5728\u672c\u8eab\u6027\u8d28\u4e0a\u4e0e\u7f51\u7edc\u6d41\u65e0\u4efb\u4f55\u5173\u7cfb\u3002\n\n\u5b83\u7684\u4e0d\u90a3\u4e48\u51c6\u786e\u7684\u5b9a\u4e49\u662f\uff1a**\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u5272\u53bb\u6743\u503c\u548c\u6700\u5c0f\u7684\u8fb9\u96c6\uff0c\u4f7f\u8fd9\u4e2a\u56fe\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5207\u4e0b\u6765\u7684\u90a3\u4e00\u5200\u53eb\u505a\u6700\u5c0f\u5272\u3002\u6700\u5c0f\u5272\u5e76\u4e0d\u552f\u4e00\uff0c\u4f46\u5b83\u5728\u6570\u503c\u4e0a\u662f\u7b49\u4e8e\u6700\u5927\u6d41\u7684**\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u7684\u6a21\u578b\u6765\u8bf4\uff0c\u5b83\u6709\u4e00\u4e2a\u540d\u5b57\u53eb\u505a**\u4e8c\u8005\u53d6\u4e00\u5f0f\u95ee\u9898**\uff0c\u5728\u5177\u4f53\u9898\u76ee\u4e2d\u7684\u4f53\u73b0\u5373\u4e3a\u628a\u70b9\u96c6\u4e00\u5206\u4e3a\u4e8c\u3002\n\n\u7c7b\u4f3c\u7684\u9898\u76ee\u6709[\u5584\u610f\u7684\u6295\u7968](https://www.luogu.org/problemnew/show/P2057)\n\n\u867d\u7136\u8bf4\u4e86\u6700\u5c0f\u5272\u4e0e\u7f51\u7edc\u6d41\u65e0\u5173\u7cfb\uff0c\u4f46\u53ea\u662f\u5728\u5b9a\u4e49\u6216\u8005\u8bf4\u662f\u610f\u4e49\u4e0a\uff0c\u771f\u6b63\u8981\u5230\u5efa\u6a21\u65f6\uff0c\u8fd8\u9700\u8981\u5c06\u4e24\u8005\u7efc\u5408\u8003\u8651\u3002\n\n\u5148\u8003\u8651\u6ca1\u6709\u989d\u5916\u6536\u76ca\u60c5\u51b5\u4e0b\u7684\u5efa\u56fe\u3002\n\n![](http://m.qpic.cn/psb?/V14VFGnz4fbJRr/hj1ajou0Rsm281kSiFj7z6*UXkaX0Uboq17fnL.ahB0!/b/dFYBAAAAAAAA&bo=pgJnAaYCZwEDCSw!&rf=viewer_4)\n\n\u8bbe\u6e90\u70b9S\u5c5e\u4e8e\u96c6\u5408A,\u6c47\u70b9T\u5c5e\u4e8e\u96c6\u5408B\uff0c\u5219\u663e\u7136\u70b9\u4e0e\u6e90\u70b9\u6240\u8fde\u7684\u6709\u5411\u8fb9\u4e3a\u8fd9\u4e2a\u70b9\u5f52\u5c5e\u4e8e\u96c6\u5408A\u6240\u4ea7\u751f\u7684\u6536\u76ca\uff0c\u4e0e\u6c47\u70b9\u76f8\u8fde\u5219\u540c\u7406\u3002\u5219\u539f\u56fe\u8fb9\u6743\u4e4b\u548c-\u6700\u5c0f\u5272\u5c31\u662f\u672c\u9898\u7684\u7b54\u6848\u4e86\u3002\n\n\u5728\u8fd9\u4e2a\u56fe\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u5982\u4f55\u628a\u70b9\u96c6\u7ed9\u52a0\u5165\u3002\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u70b9\u96c6\u7684\u8d21\u732e\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u5bf9\u96c6\u5408A\u8d21\u732e\uff0c\u5bf9\u96c6\u5408B\u8d21\u732e\u6216\u8005\u4e0d\u8d21\u732e\u3002\u8fd9\u610f\u5473\u7740\u53ea\u5212\u5206\u51fa\u4e00\u79cd\u72b6\u6001\u662f\u65e0\u6cd5\u63cf\u8ff0\u7684\uff0c\u81f3\u5c11\u8981\u628aA\u4e0eB\u7684\u60c5\u51b5\u5206\u5f00\u63cf\u8ff0\u3002\n\n\u8ba8\u8bba\u4e00\u4e2a\u5bf9$A$\u6709\u8d21\u732e\u7684\u70b9\u96c6$\\{c,d\\}$\u3002\n\n\u4f9d\u636e\u9898\u76ee\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u70b9\u96c6\u7684\u8981\u6c42\u662f\uff0c\u53ea\u8981$c,d$\u6709\u4e00\u4e2a\u70b9\u88ab\u5272\u5230\u4e86\u96c6\u5408$T$\uff0c\u8fd9\u4e2a\u70b9\u96c6\u90fd\u65e0\u6cd5\u4ea7\u751f\u8d21\u732e\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u53ea\u8981$c$\u6216$d$\u5728\u96c6\u5408$B$\uff0c\u4ee3\u8868\u70b9\u96c6\u8d21\u732e\u7684\u8fb9\u5fc5\u987b\u8981\u65ad\u5f00\u3002\n\n\u5148\u5c1d\u8bd5\u7740\u8fde\u63a5\u8fd9\u6761\u8d21\u732e\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u6761\u8fb9\u4e0d\u53ef\u80fd\u76f4\u63a5\u8fde\u5230\u56fe\u4e2d\u4ee3\u8868\u4f5c\u7269\u7684\u70b9\u4e0a\uff0c\u6240\u4ee5\u8fde\u63a5\u4e00\u4e2a\u865a\u70b9\u4e0a\u53bb\u3002\n\n![](http://m.qpic.cn/psb?/V14VFGnz4fbJRr/NNAGO3JptVlvEnKYZvkHHtQp6bXKTuZT9s.3xX2zgRM!/b/dDABAAAAAAAA&bo=fgJUAX4CVAEDGTw!&rf=viewer_4)\n\nX\u4e3a\u70b9\u96c6\u6240\u4ea7\u751f\u7684\u865a\u70b9\u3002\n\n\u5982\u679c$c$\u88ab\u5272\u5230\u4e86\u96c6\u5408$B$\uff0c\u5219\u6240\u6709\u4ece$S$\u5230$c$\u7684\u8def\u5f84\u90fd\u5f97\u88ab\u65ad\u5f00\uff08\u5177\u4f53\u53ea\u8def\u5f84\u7684\u4e00\u6761\u8fb9\u65ad\u6389\uff09\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u9ec4\u8fb9\u65ad\u6389\uff0c\u90a3\u4e48\u865a\u70b9$X$\u8fde$c$\u7684\u90a3\u6761\u8def\u5f84\u4e0d\u80fd\u88ab\u65ad\u6389\u3002\u800c\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\u4e0d\u53ef\u80fd\u88ab\u65ad\u6389\uff0c\u4e8e\u662f\u6211\u4eec\u8fd9\u6837\u5efa\u56fe\u3002\n\n![](http://m.qpic.cn/psb?/V14VFGnz4fbJRr/ua*Uh62JYJMw246lyEHMygXlJLY2NhT3K5ZsGKq6NwQ!/b/dC0BAAAAAAAA&bo=fQJFAX0CRQEDGTw!&rf=viewer_4)\n\u4e24\u6761\u84dd\u8272\u7684\u8fb9\u7684\u8fb9\u6743\u4e3a$inf$\n\n\u5bf9\u5f85\u8d21\u732e$B$\u96c6\u5408\u7684\u70b9\uff0c\u540c\u7406\n\n![](http://m.qpic.cn/psb?/V14VFGnz4fbJRr/E8sYvzooansm*Ys3MhIvwFMJPcm4teMjJSPqoE8UE0U!/b/dDABAAAAAAAA&bo=cAJTAXACUwEDGTw!&rf=viewer_4)\n\n\u5efa\u56fe\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef\u3002\n\n\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u8fd9\u9898\u5361\u5e38\uff0c~~\u5438\u6c27\u624d\u6c34\u8fc7\u53bb\u7684~~\n\n[\u9732\u8fed\u6708\u55b5~](http://www.cnblogs.com/ppprseter/)\n\n------------\n**Code**\n```\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int N=3010;\nconst int M=2000100;\nconst int inf=0x3f3f3f3f;\nint head[N],edge[M],to[M],next[M],cnt=1;\nvoid add(int u,int v,int w)\n{\n    to[++cnt]=v;next[cnt]=head[u];edge[cnt]=w;head[u]=cnt;\n    to[++cnt]=u;next[cnt]=head[v];edge[cnt]=0;head[v]=cnt;\n}\nint dep[N],used[N],pre[N],tot,s[N],ans,m,n,sum;\nqueue <int > q;\nbool bfs()\n{\n    while(!q.empty()) q.pop();\n    q.push(0);\n    memset(dep,0,sizeof(dep));\n    dep[0]=1;\n    while(!q.empty()&&q.front()!=n+1)\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=next[i])\n        {\n            int v=to[i],w=edge[i];\n            if(!dep[v]&&w)\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return !q.empty();\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    int w,v,k,c1,c2;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&w);\n        sum+=w;\n        add(0,i,w);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&w);\n        sum+=w;\n        add(i,n+1,w);\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&k,&c1,&c2);\n        add(0,i+n+1,c1);sum+=c1;\n        add(i+n+m+1,n+1,c2);sum+=c2;\n        for(int j=1;j<=k;j++)\n        {\n            scanf(\"%d\",&v);\n            add(i+n+1,v,inf);\n            add(v,i+n+m+1,inf);\n        }\n    }\n    while(bfs())\n    {\n        memset(used,0,sizeof(used));\n        s[++tot]=0;\n        while(tot)\n        {\n            int u=s[tot];\n            if(u==n+1)\n            {\n                int mi=inf,id;\n                for(int i=tot;i>1;i--)\n                    if(mi>=edge[pre[s[i]]])\n                    {\n                        mi=edge[pre[s[i]]];\n                        id=i;\n                    }\n                ans+=mi;\n                for(int i=tot;i>1;i--)\n                {\n                    edge[pre[s[i]]]-=mi;\n                    edge[pre[s[i]]^1]+=mi;\n                }\n                tot=id-1;\n                used[n+1]=0;\n            }\n            else\n            {\n                for(int i=head[u];i;i=next[i])\n                {\n                    int v=to[i],w=edge[i];\n                    if(!used[v]&&dep[v]==dep[u]+1&&w)\n                    {\n                        used[v]=1;\n                        s[++tot]=v;\n                        pre[v]=i;\n                        break;\n                    }\n                }\n                if(u==s[tot]) tot--;\n            }\n        }\n    }\n    printf(\"%d\\n\",sum-ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1530187417,
        "uid": 63727,
        "name": "ButterflyDew",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e9b\u7269\u54c1\uff0c\u53ef\u4ee5\u653e\u5728$A$\u6216$B$\u4e2d\uff0c\u53d6\u5f97\u4e0d\u540c\u6536\u76ca\u3002\n\u67d0\u4e9b\u7269\u54c1\u540c\u65f6\u653e\u5728$A$\u6216$B$\u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u6536\u76ca\u3002\n\u6c42\u6536\u76ca\u7684\u6700\u5927\u503c\u3002\n## \u9898\u89e3\n\u770b\u5230\u4e8c\u8005\u9009\u5176\u4e00\uff0c\u6211\u4eec\u4e0d\u7981\u8054\u60f3\u5230\u4e86**\u6700\u5c0f\u5272**\u6a21\u578b\n\n\u5f88\u660e\u663e\uff0c\u8fd9\u9053\u9898\u4e3b\u8981\u7684\u95ee\u9898\u5728\u4e8e\u5efa\u6a21\u3002\u82e5\u662f\u4e0d\u8003\u8651\u989d\u5916\u6536\u76ca\uff0c\u56fe\u662f\u5f88\u5bb9\u6613\u5efa\u51fa\u6765\u7684 \uff1a\n- \u7531\u6e90\u70b9$S$\u5411\u5b83\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a\u5176\u79cd\u5728$A$\u4e2d\u7684\u4ef7\u503c\u7684\u8fb9\uff0c\u8868\u793a\u5c06\u5176\u79cd\u5728$A$\u4e2d\uff1b\n- \u7531\u5b83\u5411\u6c47\u70b9$T$\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a\u5176\u79cd\u5728$B$\u4e2d\u7684\u4ef7\u503c\u7684\u8fb9\uff0c\u8868\u793a\u5c06\u5176\u79cd\u5728$B$\u4e2d\uff1b\n- \u628a\u4e00\u6761\u8fb9\u5272\u6389\uff0c\u5219\u8868\u793a\u4e0d\u8fd9\u4e48\u79cd\u3002\n\n\u8fd9\u6837\u7684\u56fe\uff0c\u8981\u4f7f\u5176\u4e0d\u8fde\u901a\uff0c\u6bcf\u4e2a\u70b9\u90fd\u4e0d\u80fd\u540c\u65f6\u8fde\u63a5\u6e90\u70b9$S$\u548c\u6c47\u70b9$T$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4fdd\u8bc1**\u5176\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408**\n\n\u8fd9\u65f6\u8dd1\u4e00\u904d\u6700\u5c0f\u5272\uff0c\u662f\u5220\u53bb\u7684\u6700\u5c0f\uff0c\u7559\u4e0b\u7684\u5c31\u662f\u6700\u5927\u7684\u4e86\n~~\u5047\u88c5\u4e0d\u80fd\u76f4\u63a5\u53d6\u6700\u5927\u503c~~\n\n\u4f46\u662f\u73b0\u5728\u52a0\u5165\u4e86\u989d\u5916\u6536\u76ca\uff0c\u5e94\u8be5\u5982\u4f55\u6539\u8fdb\u4e0a\u8ff0\u7684\u56fe\u5462\uff1f\n\n\u901a\u8fc7\u5bf9\u9898\u610f\u7684\u4e86\u89e3\uff0c\u6211\u4eec\u77e5\u9053\uff1a\n\n![example](https://cdn.luogu.com.cn/upload/image_hosting/mdst9ac1.png)\n\n\n1. \u5982\u679c\u5272\u6389\u4e86$1$\u3001$2$\uff0c\u90a3\u4e48\u628a\u8fb9\u6743\u4e3a$c_{1}$\u7684\u8fb9\u4e5f\u8981\u5272\u6389\n1. \u5982\u679c\u5272\u6389\u4e86$3$\u3001$4$\uff0c\u90a3\u4e48\u628a\u8fb9\u6743\u4e3a$c_{2}$\u7684\u8fb9\u4e5f\u8981\u5272\u6389\n1. \u5982\u679c\u5272\u6389\u4e86$1$\u3001$4$\u6216\u8005$2$\u3001$3$\uff0c\u90a3\u4e48\u4e24\u6761\u8fb9\u90fd\u8981\u5272\u6389\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5927\u81f4\u60f3\u5230\u6b64\u56fe\u7684\u6784\u56fe\u65b9\u6cd5\u4e86\u3002\u7531$1$\u3001$2$\u6211\u4eec\u4e86\u89e3\u5230\uff0c$c_1\\ \\  c_2$\u5e94\u8be5\u5206\u522b\u4e0e$1\\text{\u3001}2$\uff0c$3\\text{\u3001}4$\u5e76\u8054 ~~\u7535\u5b66\u4e71\u5165~~\uff0c\u4e8e\u662f\u6211\u4eec~~\u778e\u641e~~\u601d\u8003\u51fa\u4e86\u4e0b\u56fe\uff1a\n![\u4e71\u641e\u6210\u679c](https://cdn.luogu.com.cn/upload/image_hosting/ximtf967.png)\n\n\u5176\u4e2d$\\color{SkyBlue}{\\text{\u84dd\u8272}}$\n\u7684\u8fb9\u8fb9\u6743\u662f$+\\infty$\uff0c\u662f\u4e0d\u80fd\u5220\u9664\u7684\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6b64\u56fe\u975e\u5e38\u7b26\u5408\u9898\u76ee\u7684\u9650\u5236\u3002\u4e8e\u662f\u6211\u4eec\u5efa\u4e2a\u56fe\u5957\u4e2a\u677f\u5b50\u5c31A\u4e86\n\n```cpp\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<bits/stdc++.h>\nnamespace in{\n\tchar buf[1<<21],*p1=buf,*p2=buf;\n\tinline int getc(){\n\t    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;\n\t}\n\ttemplate <typename T>inline void read(T& t){\n\t    t=0;int f=0;char ch=getc();\n\t    while (!isdigit(ch)){\n\t        if(ch=='-')f = 1;\n\t        ch=getc();\n\t    }\n\t    while(isdigit(ch)){\n   \t    \tt=t*10+ch-48;\n   \t    \tch = getc();\n   \t\t}\n\t\tif(f)t=-t;\n\t}\n\ttemplate <typename T,typename... Args> inline void read(T& t, Args&... args){\n\t    read(t);read(args...);\n\t}\n}\nnamespace out{\n\tchar buffer[1<<21];\n\tint p1=-1;\n\tconst int p2 = (1<<21)-1;\n\tinline void flush() {\n\t\tfwrite(buffer,1,p1+1,stdout),\n\t\tp1=-1;\n\t}\n\tinline void putc(const char &x) {\n\t\tif(p1==p2)flush();\n\t\tbuffer[++p1]=x;\n\t}\n\ttemplate <typename T>void write(T x) {\n\t\tstatic char buf[15];\n\t\tstatic int len=-1;\n\t\tif(x>=0){\n\t\t\tdo{\n    \t\t\tbuf[++len]=x%10+48,x/=10;\n    \t\t}while (x);\n\t\t}else{\n    \t\tputc('-');\n\t\t\tdo {\n    \t\t\tbuf[++len]=-(x%10)+48,x/=10;\n\t\t\t}while(x);\n\t\t}\n\t\twhile (len>=0)\n\t\t\tputc(buf[len]),--len;\n\t}\n}\nusing namespace std;\nconst int maxn=40010,maxe=1000010*2;\nstruct Graph{\n\tstruct node{\n\t\tint v,w,nxt;\n\t}e[maxe<<1];\n\tint head[maxn],cur[maxn],tot;\n\tint dis[maxn];\n\tint s,t;\n\tvoid init(int _s,int _t){s=_s,t=_t;tot=1;memset(head,0,sizeof head);}\n\tGraph(int _s=0,int _t=0){init(_s,_t);}\n\tvoid add(int u,int v,int w){\n\t\t//printf(\"%d %d %d\\n\",u,v,w);\n\t\te[++tot]=(node){v,w,head[u]},head[u]=tot;\n\t\te[++tot]=(node){u,0,head[v]},head[v]=tot;\n\t}\n\t#define v e[i].v\n\tinline bool bfs(){\n\t\tqueue<int>q;\n\t\tmemset(dis,0,sizeof dis);\n\t\tmemcpy(cur,head,sizeof head);\n\t\tdis[s]=1;q.push(s);\n\t\twhile(q.size()){\n\t\t\tint u=q.front();q.pop();\n\t\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t\t\tif(!dis[v]&&e[i].w){\n\t\t\t\t\tdis[v]=dis[u]+1,q.push(v);\n\t\t\t\t\tif(v==t)return true;\n\t\t\t\t}\n\t\t}\n\t\treturn  false;\n\t}\n\tint dfs(int u,int flow){\n\t\tif(u==t)return flow;\n\t\tint rest=flow;\n\t\tfor(int i=cur[u];i&&rest;i=e[i].nxt){\n\t\t\tif(dis[v]==dis[u]+1&&e[i].w){\n\t\t\t\tint tmp=dfs(v,min(rest,e[i].w));\n\t\t\t\trest-=tmp,e[i].w-=tmp,e[i^1].w+=tmp;\n\t\t\t}\n\t\t\tcur[u]=i;\n\t\t}\n\t\tif(rest==0)dis[u]=-1;\n\t\treturn flow-rest;\n\t}\n\t#undef v\n\tint dinic(){\n\t\tint ans=0;\n\t\twhile(bfs())\n\t\t\twhile(int sth=dfs(s,2e9))\n\t\t\t\tans+=sth;\n\t\treturn ans;\n\t}\n}G;\nint n,m,c[1000],tot;\nint sum=0;\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\tG.init(1000+1000*4+100,1000+1000*4+101); \n\tin::read(n);tot=n;\n\tfor(int i=1;i<=n;i++){\n\t\tint tmp;in::read(tmp);\n\t\tG.add(G.s,i,tmp);\n\t\tsum+=tmp;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint tmp;in::read(tmp);\n\t\tG.add(i,G.t,tmp);\n\t\tsum+=tmp;\n\t}\n\tin::read(m);\n\tfor(int i=1;i<=m;i++){\n\t\tint k,c1,c2,tmp;\n\t\tin::read(k,c1,c2);\n\t\tG.add(G.s,tot+1,c1);\n\t\tG.add(tot+2,G.t,c2);\n\t\tsum+=c1+c2;\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tin::read(tmp);\n\t\t\tG.add(tot+1,tmp,2e9);\n\t\t\tG.add(tmp,tot+2,2e9);\n\t\t}\n\t\ttot+=2;\n\t}\n\tout::write(sum-G.dinic());\n\tout::flush();\n\treturn 0;\n}\n```",
        "postTime": 1594271981,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "\u9898\u89e3\u5728\u535a\u5ba2[\u98df\u7528](http://www.cnblogs.com/YoungNeal/p/8858838.html)\u6548\u679c\u66f4\u4f73\u54e6~\n\n\u597d\u9898~\n\n\u6700\u5f00\u59cb\u60f3\u7684\u8d39\u7528\u6d41\u7ed3\u679c\u4f1a\u7b54\u6848\u4f1a\u53d8\u5927\uff0c\u770b\u4e86\u9898\u89e3\u624d\u77e5\u9053\u8ddf\u6700\u5c0f\u5272\u6709\u5173\n\n\u6211\u4eec\u628a\u6e90\u70b9\u5f53\u505a A \u7530\u5730\uff0c\u6c47\u70b9\u5f53\u505a B \u7530\u5730\u3002\n\n\u5bf9\u4e8e\u4f5c\u7269 i\uff0c\u5982\u679c\u79cd\u5728 A \u7684\u4ef7\u503c\u662f a[i]\uff0c\u79cd\u5728 B \u7684\u4ef7\u503c\u662f b[i]\uff0c\u90a3\u4e48\u5c31\u4ece\u5b83\u5411 A \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a a[i] \u7684\u8fb9\uff0c\u540c\u7406\uff0c\u5411 B \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a b[i] \u7684\u8fb9\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u8003\u8651\u6700\u540e\u7684\u7b54\u6848\uff0c\u4e00\u4e2a\u70b9\u5411\u5916\u8fde\u51fa\u7684\u4e24\u6761\u8fb9\u5fc5\u5b9a\u4f1a\u6709\u4e00\u6761\u88ab\u5272\u6389\uff0c\u4e0d\u7136\u8fd9\u4e2a\u70b9\u8fde\u7740\u4e24\u8fb9\uff0c\u76f8\u5f53\u4e8e\u4e24\u8fb9\u90fd\u79cd\uff0c\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0d\u7b26\u5408\u9898\u610f\u3002\n\n\u5fc5\u5b9a\u6709\u4e00\u6761\u4f1a\u88ab\u5272\u6389...\u54a6\u8fd9\u4e0d\u662f\u6700\u5c0f\u5272\u4e48\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u5df2\u7ecf\u521d\u6b65\u8f6c\u5316\u95ee\u9898\u4e86\uff0c\u5373\u5df2\u7ecf\u628a\u95ee\u9898\u8f6c\u5316\u5230\u6700\u5c0f\u5272\u4e0a\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u7ec4\u5408\u7684\u95ee\u9898\u3002\n\n\u5176\u5b9e\u7ec4\u5408\u4e5f\u4e00\u6837\uff0c\u5c31\u662f\u8ba9\u8fd9\u4e2a\u7ec4\u5408\u4e5f\u5206\u6210\u5411 A\uff0cB \u8fde\u8fb9\u4e24\u90e8\u5206\u3002\n\n\u5148\u628a\u8fd9\u4e2a\u7ec4\u5408\u62c6\u70b9\u3002\u7136\u540e\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u5165\u8fb9\u8fde\u4e0a A\uff0c\u5bb9\u91cf\u662f\u7ec4\u5408\u79cd\u5728 A \u7684\u989d\u5916\u4ef7\u503c\uff0c\u51fa\u8fb9\u8fde\u4e0a\u8fd9\u4e2a\u7ec4\u5408\u91cc\u6240\u6709\u7684\u70b9\uff0c\u5bb9\u91cf\u662f INF\u3002 B \u4e5f\u662f\u540c\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5f7b\u5e95\u628a\u95ee\u9898\u8f6c\u5316\u4e86\u6700\u5c0f\u5272\u4e86\u3002\u4f46\u662f\u8fd9\u9898\u8981\u8ba9 ans \u6700\u5927\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u597d\u8bf4\uff0c\u628a\u603b\u6536\u76ca\u52a0\u8d77\u6765\uff0c\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u597d\u4e86\u3002\n\n```\n// By YoungNeal\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define N 10005\n#define inf 0x3f3f3f3f-1\n\nint tot;\nint d[N];\nint cnt=1;\nint dis[N];\nint head[N];\nint n,m,s,t;\n\nstruct Edge{\n    int to,nxt,flow;\n}edge[4400000];\n\nvoid add(int x,int y,int z){\n    edge[++cnt].to=y;\n    edge[cnt].nxt=head[x];\n    edge[cnt].flow=z;\n    head[x]=cnt;\n}\n\nbool bfs(){\n    memset(d,0,sizeof d); d[s]=1;\n    std::queue<int> q; q.push(s);\n    while(q.size()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i;i=edge[i].nxt){\n            int to=edge[i].to;\n            if(!edge[i].flow) continue;\n            if(d[to]) continue;\n            d[to]=d[u]+1;\n            q.push(to);\n            if(to==t) return 1;\n        }\n    }\n    return 0;\n}\n\nint dinic(int now,int flow){\n    if(now==t) return flow;\n    int rest=flow;\n    for(int i=head[now];i;i=edge[i].nxt){\n        if(!rest) return flow;\n        int to=edge[i].to;\n        if(!edge[i].flow) continue;\n        if(d[to]!=d[now]+1) continue;\n        int k=dinic(to,std::min(rest,edge[i].flow));\n        if(!k) d[to]=0;\n        rest-=k;\n        edge[i].flow-=k;\n        edge[i^1].flow+=k;\n    }\n    return flow-rest;\n}\n\nsigned main(){\n    scanf(\"%d\",&n); s=n+1; t=s+1;\n    for(int x,i=1;i<=n;i++) scanf(\"%d\",&x),tot+=x,add(s,i,x),add(i,s,0);\n    for(int x,i=1;i<=n;i++) scanf(\"%d\",&x),tot+=x,add(i,t,x),add(t,i,0);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n        int T,tota,totb;\n        scanf(\"%d%d%d\",&T,&tota,&totb);\n        tot+=tota+totb;\n        add(s,n+2+i,tota); add(n+2+i,s,0);\n        add(n+2+i+m,t,totb); add(t,n+2+i+m,0);\n        for(int x,j=1;j<=T;j++){\n            scanf(\"%d\",&x);\n            add(n+2+i,x,inf);\n            add(x,n+2+i,0);\n            add(x,n+2+i+m,inf);\n            add(n+2+i+m,x,0);\n        }\n    }\n    int maxflow=0,flow=0;\n    while(bfs()) \n        while(flow=dinic(s,0x3f3f3f3f)) maxflow+=flow;\n    printf(\"%d\\n\",tot-maxflow);\n    return 0;\n}\n```",
        "postTime": 1523887236,
        "uid": 56778,
        "name": "YoungNeal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 1361](https://www.luogu.org/problemnew/show/P1361)\n\n\u5c0f M \u5728\u5f00\u8f9f\u4e86\u4e24\u5757\u5de8\u5927\u7684\u8015\u5730 $A$ \u548c $B$\uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5bb9\u91cf\u65e0\u7a77\uff09\uff0c\u73b0\u5728\u4ed6\u6709 $n$ \u79cd\u4f5c\u7269\u7684\u79cd\u5b50\u5404 $1$ \u4e2a\uff0c\u7f16\u53f7\u4e3a $1$ \u5230 $n$\u3002\u7b2c $i$ \u79cd\u4f5c\u7269\u5728 $A$ \u4e2d\u79cd\u690d\u53ef\u4ee5\u83b7\u5f97 $a_i$ \u7684\u6536\u76ca\uff0c\u5728 $B$ \u4e2d\u79cd\u690d\u53ef\u4ee5\u83b7\u5f97 $b_i$ \u7684\u6536\u76ca\u3002\u67d0\u4e9b\u4f5c\u7269\u79cd\u5728\u540c\u4e00\u5757\u8015\u5730\u4e2d\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u6536\u76ca\uff0c\u5c0f M \u627e\u5230 $m$ \u79cd\u4f5c\u7269\u7684\u7ec4\u5408\uff0c\u6bcf\u4e2a\u7ec4\u5408\u7528 $c_1,c_2,k $ \u548c\u4e00\u4e2a\u5e8f\u5217 $p_1,p_2,\\cdots.p_k$ \u8868\u793a\uff0c\u4ee3\u8868\u8fd9 $k$ \u79cd\u4f5c\u7269\u5171\u540c\u79cd\u5728 $A$ \u548c $B$ \u8015\u5730\u4e2d\u53ef\u4ee5\u5206\u522b\u83b7\u5f97 $c_1$ \u548c $c_2$ \u7684\u989d\u5916\u6536\u76ca\u3002\u6c42\u6536\u76ca\u7684\u6700\u5927\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n,m\\le 1000$\n\n------\n\n## Solution\n\n\u901a\u8fc7[\u300c\u7b97\u6cd5\u7b14\u8bb0\u300d\u7f51\u7edc\u6d41 - \u6700\u5c0f\u5272](https://hydingsy.github.io/articles/algorithm-Network-Flow-Minimum-Cut/) \u4e2d**\u95ee\u9898\u6a21\u578b**\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u9898\u6bcf\u79cd\u4f5c\u7269\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u8015\u5730\uff0c\u6ee1\u8db3**\u4e8c\u8005\u9009\u5176\u4e00**\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u6700\u5c0f\u5272\u6765\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u5355\u72ec\u7684\u4f5c\u7269\u76f4\u63a5\u4ece\u6e90\u70b9 $s$ \u8fde\u8fb9\u6216\u5411 $t$ \u8fde\u8fb9\u5373\u53ef\uff0c\u96be\u70b9\u5728\u5982\u4f55\u5904\u7406\u7ec4\u5408\u7684\u5173\u7cfb\u3002\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u4e00\u4e2a\u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u70b9\u96c6\uff0c\u5b83\u7684\u8d21\u732e\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u5bf9\u96c6\u5408 $A$ \u6709\u8d21\u732e\uff1b\u5bf9\u96c6\u5408 $B$ \u6709\u8d21\u732e\uff1b\u6ca1\u6709\u4efb\u4f55\u8d21\u732e\u3002\u8fd9\u610f\u5473\u7740\u53ea\u5212\u5206\u51fa\u4e00\u79cd\u72b6\u6001\u662f\u65e0\u6cd5\u63cf\u8ff0\u7684\uff0c\u6211\u4eec\u9700\u8981\u628a $A$ \u548c $B$ \u96c6\u5408\u5206\u5f00\u8003\u8651\u3002\n\n\u63a5\u4e0b\u6765\u8ba8\u8bba\u70b9\u96c6 $\\{u,v,w\\}$ \u5bf9\u96c6\u5408 $A$ \u7684\u8d21\u732e\u3002\n\n\u6309\u7167\u9898\u610f\uff0c\u6211\u4eec\u7684\u8981\u6c42\u662f\uff1a\u53ea\u8981 $u,v,w$ \u5176\u4e2d\u4e00\u8005\u88ab\u5272\u8fdb\u4e86\u96c6\u5408 $B$\uff08\u8fde\u5411 $t$\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u96c6\u90fd\u6ca1\u6709\u8d21\u732e\u3002\u6362\u8a00\u4e4b\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u70b9\u5728\u96c6\u5408 $B$\uff0c\u90a3\u4e48\u4ee3\u8868\u70b9\u96c6\u548c\u96c6\u5408 $A$ \u7684\u8fde\u8fb9\u5fc5\u987b\u65ad\u5f00\uff01\n\n\u6211\u4eec\u5148\u7528\u4e00\u4e2a\u865a\u70b9 $x$ \u4ece $s$ \u8fde\u4e00\u6761\u4ee3\u8868\u8d21\u732e\u7684\u8fb9\uff08\u663e\u7136\u70b9\u96c6\u5fc5\u987b\u7528\u4e00\u4e2a\u865a\u70b9\u4ee3\u66ff\uff09\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u70b9\u88ab\u5272\u8fdb\u4e86\u96c6\u5408 $B$\uff0c\u90a3\u4e48\u8fd9\u6761\u4ee3\u8868\u8d21\u732e\u7684\u8fb9\u5c31\u8981\u88ab\u65ad\u5f00\uff0c\u800c $x$ \u5230 $u,v,w$ \u7684\u8fb9\u4e0d\u80fd\u88ab\u65ad\u5f00\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a\u8fb9 $(s,x)$ \u7684\u5bb9\u91cf\u4e3a $c_1$\uff0c\u8fb9 $(x,u),(x,v),(x,w)$ \u7684\u5bb9\u91cf\u5747\u4e3a $\\texttt{INF}$\uff08\u56e0\u4e3a\u53ea\u6709\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\u4e0d\u53ef\u80fd\u88ab\u65ad\u5f00\uff09\u3002\n\n\u8fd9\u4e2a\u70b9\u96c6\u5bf9\u96c6\u5408 $B$ \u7684\u8d21\u732e\u540c\u7406\u3002\u7ecf\u8fc7\u68c0\u9a8c\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u8fde\u8fb9\u65b9\u5f0f\u662f\u5b8c\u5168\u6b63\u786e\u7684\uff01\u76f4\u63a5\u5efa\u56fe\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n**\u6ce8\u610f**\uff1a\u7b54\u6848\u4e3a\u603b\u7684\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\uff01\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n^2m)$\n\n------\n\n## Code \n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nconst int N=3e3+5,M=5e6+5;\nint n,m,tot=1,a[N],b[N],lnk[N],ter[M],nxt[M],val[M],dep[N],cnr[N];\n\nint id(int p,int x) {\n    switch(p) {\n        case 1: return x;\n        case 2: return m+x;\n        case 3: return m+n+x;\n    }\n}\nvoid add(int u,int v,int w) {\n    ter[++tot]=v,nxt[tot]=lnk[u],lnk[u]=tot,val[tot]=w;\n}\nvoid addedge(int u,int v,int w) {\n    add(u,v,w),add(v,u,0);\n}\nint bfs(int s,int t) {\n    memset(dep,0,sizeof(dep));\n    memcpy(cnr,lnk,sizeof(lnk));\n    std::queue<int> q;\n    q.push(s),dep[s]=1;\n    while(!q.empty()) {\n        int u=q.front(); q.pop();\n        for(int i=lnk[u];i;i=nxt[i]) {\n            int v=ter[i];\n            if(val[i]&&!dep[v]) q.push(v),dep[v]=dep[u]+1;\n        }\n    }\n    return dep[t];\n}\nint dfs(int u,int t,int flow) {\n    if(u==t) return flow;\n    int ans=0;\n    for(int i=cnr[u];i&&ans<flow;i=nxt[i]) {\n        cnr[u]=i;\n        int v=ter[i];\n        if(val[i]&&dep[v]==dep[u]+1) {\n            int x=dfs(v,t,std::min(val[i],flow-ans));\n            if(x) val[i]-=x,val[i^1]+=x,ans+=x;\n        }\n    }\n    if(ans<flow) dep[u]=-1;\n    return ans;\n}\nint dinic(int s,int t) {\n    int ans=0;\n    while(bfs(s,t)) {\n        int x;\n        while((x=dfs(s,t,1<<30))) ans+=x;\n    }\n    return ans;\n}\nint main() {\n    scanf(\"%d\",&n);\n    int ans=0;\n    for(int i=1;i<=n;++i) scanf(\"%d\",&a[i]),ans+=a[i];\n    for(int i=1;i<=n;++i) scanf(\"%d\",&b[i]),ans+=b[i];\n    scanf(\"%d\",&m);\n    int S=0,T=m+n+m+1;\n    for(int i=1;i<=n;++i) addedge(S,id(2,i),a[i]),addedge(id(2,i),T,b[i]);\n    for(int i=1;i<=m;++i) {\n        int k,c1,c2;\n        for(scanf(\"%d%d%d\",&k,&c1,&c2);k--;) {\n            int x;\n            scanf(\"%d\",&x);\n            addedge(id(1,i),id(2,x),1<<30);\n            addedge(id(2,x),id(3,i),1<<30);\n        }\n        addedge(S,id(1,i),c1);\n        addedge(id(3,i),T,c2);\n        ans+=c1+c2;\n    }\n    printf(\"%d\\n\",ans-dinic(S,T));\n    return 0;\n}\n```\n\n",
        "postTime": 1544451689,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "# [P1361](https://www.luogu.com.cn/problem/P1361)\n\n> \u5c0fP\u6709 $ n $ \u4e2d\u4f5c\u7269\u7684\u79cd\u5b50\uff0c\u6bcf\u79cd\u4f5c\u7269\u7684\u79cd\u5b50\u6709 $ 1 $ \u4e2a\uff08\u5c31\u662f\u53ef\u4ee5\u79cd\u4e00\u68f5\u4f5c\u7269\uff09\u3002\n>\n> \u7b2ci\u79cd\u4f5c\u7269\u79cd\u690d\u5728A\u4e2d\u79cd\u690d\u53ef\u4ee5\u83b7\u5f97 $ a_i $ \u7684\u6536\u76ca\uff0c\u5728B\u4e2d\u79cd\u690d\u53ef\u4ee5\u83b7\u5f97 $ b_i $ \u7684\u6536\u76ca\u3002\n\n\u7531\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0c**\u5bf9\u4e8e\u6bcf\u4e00\u682a\u4f5c\u7269\uff0c\u4ec5\u80fd\u79cd\u5728 A/B \u7684\u4e00\u5757\u7530\u5730\u91cc**\uff0c\u4e5f\u5c31\u662f**\u4e8c\u9009\u4e00**\u3002\n\n\u90a3\u4e48\u6211\u4eec\u60f3\u4e00\u60f3\u6700\u5c0f\u5272\u7684\u505a\u6cd5\uff0c\u901a\u4fd7\u70b9\u6765\u8bf4\u5c31\u662f\uff1a**\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\uff0c\u5207\u53bb\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\uff0c\u4ee5\u8fbe\u5230\u8def\u5f84\u65ad\u88c2\u4e14\u4ee3\u4ef7\u6700\u5c0f**\uff0c\u4e5f\u5c31\u662f**\u591a\u9009\u4e00**\u3002\n\n\u90a3\u4e48\u53ef\u5426\u7406\u89e3\u4e3a\uff1a**\u5bf9\u4e8e $ S->plant->T $ \u7684\u4e00\u6761\u8def\u5f84\uff0c\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u62c6\u6389\uff0c\u63a5\u7740\u53e6\u4e00\u4e2a\u5c31\u662f\u6211\u7b54\u6848\u4e2d\u7684\u8fb9**\u3002\n\n![P1361-solution-1](https://cdn.luogu.com.cn/upload/image_hosting/r3p9bwmy.png)\n\n\u90a3\u4e48\u539f\u9898\u7684\u57fa\u672c\u90e8\u5206\u5c31\u8f6c\u6362\u6210\u6700\u5c0f\u5272\u4e86\u3002\n\n> \u800c\u4e14\uff0c\u73b0\u5728\u8fd8\u6709\u8fd9\u4e48\u4e00\u79cd\u795e\u5947\u7684\u73b0\u8c61\uff0c\u5c31\u662f\u67d0\u4e9b\u4f5c\u7269\u5171\u540c\u79cd\u5728\u4e00\u5757\u8015\u5730\u4e2d\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u6536\u76ca\uff0c\u5c0fM\u627e\u5230\u4e86\u89c4\u5219\u4e2d\u5171\u6709 $ m $ \u79cd\u4f5c\u7269\u7ec4\u5408\uff0c\u7b2ci\u4e2a\u7ec4\u5408\u4e2d\u7684\u4f5c\u7269\u5171\u540c\u79cd\u5728A\u4e2d\u53ef\u4ee5\u83b7\u5f97 $ {c_1}_i $ \u7684\u989d\u5916\u6536\u76ca\uff0c\u5171\u540c\u603b\u5728B\u4e2d\u53ef\u4ee5\u83b7\u5f97 $ {c_2}_i $ \u7684\u989d\u5916\u6536\u76ca\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u70b9\u96c6\u6253\u5305\u3002\n\n\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u70b9 $ X $ \uff0c\u7528 $ X $ \u4ee3\u8868\u8fd9\u4e00\u70b9\u96c6\u3002\n\n![P1361-solution-2](https://cdn.luogu.com.cn/upload/image_hosting/z3vufj10.png)\n\n\u90a3\u4e48\u7528 **$ S->X $** \u6765\u8868\u793a **$ S->\\{1,2\\} $** \u3002\n\n\u6240\u4ee5\u6709\uff1a\n\n![P1361-solution-3](https://cdn.luogu.com.cn/upload/image_hosting/8y1h7ctc.png)\n\n\u540c\u6837\uff0c\u5efa\u7acb\u4e00\u4e2a **$ X' $** \uff0c\u7528\u4e8e $ {c_2}_i $ \u7684\u6253\u5305\uff1a\n\n![P1361-solution-4](https://cdn.luogu.com.cn/upload/image_hosting/893ej3lq.png)\n\n\u6240\u4ee5\u5272\u8fb9\u65f6\u600e\u4e48\u4fdd\u8bc1**\u53ea\u5272 $ S->X $  \u548c $ S->X' $** \u5462\uff1f\n\n\u5f53\u7136\u662f\u8ba9\u6211\u4eec**\u65e0\u6cd5\u5272\u53bb\u4e0d\u60f3\u5272\u7684\u8fb9**\u5566\uff01\n\n\u8ba9\u4e0d\u60f3\u5272\u7684\u8fb9\u53d8\u6210 $ INF $ \uff0c\u7b97\u6cd5\u5c31\u80fd\u8fc7\u6ee4\u6389\u5b83~~\uff08\u5b83\u7edd\u4e0d\u4f1a\u50bb\u5230\u4ee5 $ INF $ \u7684\u4ee3\u4ef7\u5272\u8fb9\u7684\uff09~~\n\n![P1361-solution-5](https://cdn.luogu.com.cn/upload/image_hosting/kc13m2xw.png)\n\n\u6240\u4ee5**\u5efa\u56fe**\u5c31\u5b8c\u6210\u4e86\uff01\n\n\u63a5\u4e0b\u6765**\u8dd1\u4e00\u8fb9 Dinic** \u5c31\u5b8c\u4e8b\u513f\u5566\uff01\n\n\u53ef\u662f\u6211\u4eec\u662f\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u554a\uff0c\u8fd9**\u4e0d\u662f\u7b54\u6848**\u554a\uff1f\n\n\u5bf9\uff0c\u8fd9\u786e\u5b9e\u4e0d\u662f\u7b54\u6848\u3002\u4f46\u662f Dinic \u5b8c\u4e4b\u540e\u6211\u4eec\u5df2\u7ecf\u201c\u5272\u53bb\u4e86\u201d\u4e00\u4e9b\u8fb9\uff0c\u201c\u5b8c\u6210\u4e86\u201d\u6700\u5c0f\u5272\uff0c\u4e5f\u5c31\u662f**\u5b8c\u6210\u4e86\u5bf9\u4e8e\u6240\u6709\u65b9\u6848\u7684\u4e0d\u4f18\u89e3\u6cd5\u7684\u53bb\u9664\uff0c\u5269\u4e0b\u7684\u81ea\u7136\u5c31\u662f\u6700\u4f18\u65b9\u6848\u3002**~~\uff08\u4e0d\u4fe1\u7684\u8bdd\u53ef\u4ee5\u63a8\u4e00\u4e0b\u6837\u4f8b\uff09~~\n\n\u90a3\u4e48**\u7b54\u6848\u5c31\u662f \u603b\u8fb9\u6743\u548c \u51cf\u53bb \u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09**\u3002\n\n\u4e8e\u662f\u5b8c\u6210\uff01\n\n~~\u7801\u98ce\u90aa\u6559\u52ff\u55b7~~\n\n```cpp\n/*\n\u25a0\u25a0\u25a0  \u25a0    \u25a0  \u25a0 \u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0   \u25a0\u25a0  \u25a0  \u25a0 \u25a0\u25a0\u25a0\u25a0\n\u25a0  \u25a0 \u25a0    \u25a0  \u25a0 \u25a0    \u25a0  \u25a0 \u25a0  \u25a0 \u25a0\u25a0 \u25a0 \u25a0\n\u25a0\u25a0\u25a0  \u25a0    \u25a0  \u25a0 \u25a0\u25a0\u25a0\u25a0 \u25a0  \u25a0 \u25a0  \u25a0 \u25a0\u25a0 \u25a0 \u25a0\u25a0\u25a0\u25a0\n\u25a0  \u25a0 \u25a0    \u25a0  \u25a0 \u25a0    \u25a0  \u25a0 \u25a0  \u25a0 \u25a0 \u25a0\u25a0 \u25a0\n\u25a0\u25a0\u25a0  \u25a0\u25a0\u25a0\u25a0  \u25a0\u25a0  \u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0   \u25a0\u25a0  \u25a0 \u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\n*/\n# include <iostream>\n# include <cstring>\n# include <cstdio>\n# include <queue>\n\nusing namespace std ; \n\ntypedef long long lint ; \ntypedef long double ntrl ; \n\n# define MAXN 1000010\n# define MAXM 1000010\n# define INF 0x3f3f3f3f\n\n///globle varible///\nint n , m ; \nint sumval ; \n/////*/\n\n///basic function///\ninline lint min ( lint x , lint y ) { return x < y ? x : y ; }\ninline lint max ( lint x , lint y ) { return x > y ? x : y ; }\ninline bool isltr ( char x ) { return ( 'A' <= x && x <= 'Z' ) || ( 'a' <= x && x <= 'z' ) ; }\ninline bool isnum ( char x ) { return ( '0' <= x && x <= '9') ; }\n/////*/\n\n///fast read///\ninline lint readlint ( )\n{\n\tlint val = 0 , sign = 1 ; char tmp = getchar ( ) ; \n\twhile ( ! isnum ( tmp ) ) { if ( tmp == '-' ) { sign = - sign ; } tmp = getchar ( ) ;  } \n\twhile ( isnum ( tmp ) ) { val = ( val << 1 ) + ( val << 3 ) + tmp - 48 ; tmp = getchar ( ) ; } \n\treturn val * sign ; \n}\ninline char readlter ( ) \n{\n\tchar tmp = getchar ( ) ; \n\twhile ( ! isltr ( tmp ) )\n\t\ttmp = getchar ( ) ; \n\treturn tmp ; \n}\n/////*/\n\n///adjacency list///\nstruct edge\n{\n\tint to ; \n\tint last ; \n\tint cap ; \n} e [ MAXM * 2 ] ; \nint list [ MAXN ] , edgecnt = 1 ; \ninline void addedge ( int u , int v , int c )\n{\n\te [ ++ edgecnt ] . to = v ; \n\te [ edgecnt ] . last = list [ u ] ; \n\te [ edgecnt ] . cap = c ; \n\tlist [ u ] = edgecnt ; \n}\n/////*/\n\n///dinic///\nint s , t ; \nint depth [ MAXN ] ; \ndeque < int > que ; \nint cur [ MAXN ] ; \ninline void dinic_addedge ( int u , int v , int c )\n{\n\taddedge ( u , v , c ) ; \n\taddedge ( v , u , 0 ) ; \n}\ninline int dinic_bfs ( )\n{\n\tmemset ( depth , 0 , sizeof ( depth ) ) ; \n\tque . clear ( ) ; \n\tdepth [ s ] = 1 ; \n\tque . push_back ( s ) ; \n\twhile ( ! que . empty ( ) ) \n\t{\n\t\tfor ( int i = list [ que . front ( ) ] ; i ; i = e [ i ] . last )\n\t\t{\n\t\t\tif ( ! depth [ e [ i ] . to ] && e [ i ] . cap )\n\t\t\t{\n\t\t\t\tdepth [ e [ i ] . to ] = depth [ que . front ( ) ] + 1 ; \n\t\t\t\tque . push_back ( e [ i ] . to ) ; \n\t\t\t}\n\t\t}\n\t\tque . pop_front ( ) ; \n\t}\n\treturn depth [ t ] ;\n}\ninline int dinic_dfs ( int now , int mxflow )\n{\n\tif ( now == t )\n\t{\n\t\treturn mxflow ;\n\t}\n\tint flow = 0 ; \n\tfor ( int &i = cur [ now ] ; i ; i = e [ i ] . last )\n\t{\n\t\tint v = e [ i ] . to ; \n\t\tif ( depth [ v ] == depth [ now ] + 1 && e [ i ] . cap )\n\t\t{\n\t\t\tint f = dinic_dfs ( v , min ( e [ i ] . cap , mxflow ) ) ; \n\t\t\tif ( f )\n\t\t\t{\n\t\t\t\te [ i ] . cap -= f ; \n\t\t\t\te [ i ^ 1 ] . cap += f ; \n\t\t\t\tmxflow -= f ; \n\t\t\t\tflow += f ; \n\t\t\t\tif ( ! mxflow )\n\t\t\t\t{\n\t\t\t\t\treturn flow ; \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flow ; \n}\ninline int dinic ( )\n{\n\tint allflow = 0 ;\n\twhile ( dinic_bfs ( ) )\n\t{\n\t\tmemcpy ( cur , list , sizeof ( cur ) ) ; \n\t\tint f ; \n\t\twhile ( ( f = dinic_dfs ( s , INF ) ) ) \n\t\t{\n\t\t\tallflow += f ; \n\t\t}\n\t}\n\treturn allflow ; \n}\n/////*/\n\nint main ( )\n{\n\tn = readlint ( ) ; \n\ts = 0 ; \n\tt = n + 1 ; \n\tfor ( int i = 1 , w ; i <= n ; i ++ )\n\t{\n\t\tw = readlint ( ) ; \n\t\tdinic_addedge ( s , i , w ) ; \n\t\tsumval += w ; \n\t}\n\tfor ( int i = 1 , w ; i <= n ; i ++ )\n\t{\n\t\tw = readlint ( ) ; \n\t\tdinic_addedge ( i , t , w ) ; \n\t\tsumval += w ; \n\t}\n\tm = readlint ( ) ; \n\tfor ( int i = 1 , cnt , tmp , val1 , val2 ; i <= m ; i ++ )\n\t{\n\t\tcnt = readlint ( ) ; \n\t\tval1 = readlint ( ) ; \n\t\tval2 = readlint ( ) ; \n\t\tsumval += val1 + val2 ; \n\t\tdinic_addedge ( s , t + ( i * 2 - 1 ) , val1 ) ; \n\t\tdinic_addedge ( t + ( i * 2 ) , t , val2 ) ; \n\t\twhile ( cnt -- )\n\t\t{\n\t\t\ttmp = readlint ( ) ; \n\t\t\tdinic_addedge ( t + ( i * 2 - 1 ) , tmp , INF ) ; \n\t\t\tdinic_addedge ( tmp , t + ( i * 2 ) , INF ) ;\n\t\t}\n\t}\n\n\t// Answer = SumEdgeWeight - MinimumCut\n\n\treturn 0 ; \n}\n```\n\n",
        "postTime": 1578844372,
        "uid": 44504,
        "name": "BlueDone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": " ### \u63d0\u4f9b\u4e00\u79cd \u201c\u6d3b\u5728\u68a6\u91cc\u7684HLPP\u201d \u5199\u6cd5QAQ\n -----------------------\n \u9898\u76ee\u89e3\u6cd5\u5373\u6700\u5c0f\u5272 + \u865a\u70b9\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\u4e3b\u8981\u662f\u7ed9\u67d0\u4e00\u90e8\u5206\u5199HLPP\u7684\u4eba\u4e00\u4e9b\u501f\u9274\n \n \u8bf4\u660e\u5728\u4ee3\u7801\u4e2d\uff08\u9003\n ```\n #include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cstring>\n#define M 5000000\n#define N 2000000 \n#define INF 0x3f3f3f3f\n#define re register\n#define int long long//\u90aa\u6559\u5b8f\u5b9a\u4e49\n#define _ 0\n#define drep(k ,l ,r) for(re int k = r ; k >= l ; -- k )\n#define rep(k ,l ,r) for(re int k = l ; k <= r ; ++ k)\nusing namespace std;\nint n ,m ,u ,v ,w ,head[N] ,tot = 1 ,s ,t;\nint cap ,cnt ,c1 ,c2 ,numb ,pax1 ,pax2 ,tmp;\nint high[N] ,gap[N] ,extra[N];//\u4e09\u4e2a\u6570\u7ec4\u5206\u522b\u662f\u9ad8\u5ea6\uff0c\u8d85\u989d\u6d41\u91cf\uff0cgap\u4f18\u5316\nbool vis[N];\nqueue<int> que;\nstack<int> sta;\nstruct edge {\n    int next ,to ,w;\n} e[M];\nint read() {\n    char cc = getchar() ; int cn = 0 ,flus = 1;\n    while(cc < '0' || cc > '9') {if(cc == '-') flus = - flus ; cc = getchar() ; }\n    while(cc >= '0' && cc <= '9') cn = cn * 10 + cc - '0' ,cc = getchar();\n    return flus * cn;\n}\nvoid add_sapr(int u ,int v ,int w) {\n    e[++tot].next = head[u];\n    head[u] = tot;\n    e[tot].to = v;\n    e[tot].w = w;\n}\nvoid add(int u ,int v ,int w) {\n\tadd_sapr(u ,v ,w) ,add_sapr(v ,u ,0);//\u5efa\u8fb9\n}\nbool bfs() {//\u6ce8\u610f\u8fd9\u91cc\u7684bfs\u662f\u53cd\u5411bfs\uff0c\u4f46\u540c\u6837\u4e5f\u662f\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\n    rep(i ,0 ,N - 1) high[i] = INF;\n    que.push(t) ,high[t] = 0;\n    while(!que.empty()) {\n        u = que.front() ,que.pop();\n        for(int i = head[u] ; i ; i = e[i].next) \n            if(e[i ^ 1].w && high[e[i].to] > high[u] + 1) high[e[i].to] = high[u] + 1 ,que.push(e[i].to) ;\n    }\n    return high[s] != INF;\n}\nstruct cmp {\n    bool operator()(int a ,int b) const { return high[a] < high[b]; }\n};//\u91cd\u8f7d\u8fd0\u7b97\u7b26\npriority_queue<int ,vector<int> ,cmp> pri_que;\nbool push(int u) {//\u5c3d\u53ef\u80fd\u591a\u63a8\u9001\u8d85\u989d\u6d41\n    for(int i = head[u] ; i ; i = e[i].next) {\n        const int wi = e[i].w;\n        if(!wi || high[u] != high[e[i].to] + 1) continue;\n        int minn = min(wi ,extra[u]);\n        extra[u] -= minn ,extra[e[i].to] += minn ,e[i].w -= minn ,e[i ^ 1].w += minn;\n        if(e[i].to != s && e[i].to != t && !vis[e[i].to]) pri_que.push(e[i].to) ,vis[e[i].to] = 1;// \u63a8\u9001\u4e4b\u540e\uff0cv \u5fc5\u7136\u6ea2\u51fa\uff0c\u5219\u5165\u5806\uff0c\u7b49\u5f85\u88ab\u63a8\u9001\n        if(!extra[u]) return 0;//\u6ca1\u4e86\u5c31\u8fd4\u56de\n    }\n    return 1;\n}\nvoid relabel(int u) {//\u91cd\u65b0\u8d34\u9ad8\u5ea6\u6807\u7b7e\n    high[u] = INF;\n    for(int i = head[u] ; i ; i = e[i].next) \n        if(e[i].w) high[u] = min(high[u] ,high[e[i].to]);\n    ++high[u];\n}\nint hlpp() {\n    if(!bfs()) return 0;\n    high[s] = n;\n    rep(i ,0 ,N - 1) if(high[i] != INF) ++gap[high[i]];//gap\u4f18\u5316\n    for(int i = head[s] ; i ; i = e[i].next) {\n        const int wi = e[i].w;\n        if(!wi) continue;\n        extra[s] -= wi ,extra[e[i].to] += wi ,e[i].w -= wi ,e[i ^ 1].w += wi;\n        if(e[i].to != s && e[i].to != v && !vis[e[i].to]) pri_que.push(e[i].to) ,vis[e[i].to] = 1;\n    }\n    while(!pri_que.empty()) {\n        int u = pri_que.top();\n\t\tpri_que.pop() ,vis[u] = 0;\n        while(push(u)) {\n            if(!(--gap[high[u]])) //gap\u4f18\u5316\uff08\u5982\u679c u \u7ed3\u70b9\u539f\u6765\u6240\u5728\u7684\u9ad8\u5ea6\u6ca1\u6709\u7ed3\u70b9\u4e86\uff0c\u76f8\u5f53\u4e8e\u51fa\u73b0\u65ad\u5c42\uff09\n\t\t\t\trep(i ,1 ,n) \n\t\t\t\t\tif(i != s && i != t && high[i] > high[u] && high[i] < n + 1) high[i] = n + 1;\n            relabel(u);\n            ++gap[high[u]];\n        }\n    }\n    return extra[t];//\u8fd4\u56de\u8d85\u989d\u6d41\n}\nsigned main() {\n    n = read();t = n + 1;\n    rep(i ,1 ,n) cap = read() ,add(s ,i ,cap) ,cnt += cap;\n    rep(i ,1 ,n) cap = read() ,add(i ,t ,cap) ,cnt += cap;\n    m = read();pax1 = n + 2 ,pax2 = n + 3;\n    rep(i ,1 ,m) {\n        numb = read() ,c1 = read() ,c2 = read();\n        cnt = cnt + c1 + c2;\n        add(s ,pax1 ,c1) ,add(pax2 ,t ,c2);\n        rep(i ,1 ,numb) tmp = read() ,add(pax1 ,tmp ,INF) ,add(tmp ,pax2 ,INF);\n        pax1 += 2 ,pax2 += 2;//\u865a\u70b9\u66f4\u65b0\n    }\n    printf(\"%lld\" ,cnt - hlpp());//\u7b54\u6848\u5373\u4e3a\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\n    return ~~(0^_^0);\n}\n ```\n \u4f46\u662f\u4f3c\u4e4e\u8dd1\u7684\u6bd4Dinic\u8fd8\u6162\u3002\u3002\u3002\u4e0d\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u5927\u5bb6\u597d\u597d\u5199Dinic\u6216ISAP\u5427\u3002\u3002\u3002",
        "postTime": 1578921750,
        "uid": 44505,
        "name": "lemonfor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u4e00\u5b9a\u4e0d\u8981\u56e0\u4e3a\u5728\u6570\u503c\u4e0a\u6700\u5c0f\u5272\u4e0e\u6700\u5927\u6d41\u76f8\u7b49\uff0c\u5c31\u628a\u6700\u5c0f\u5272\u548c\u6700\u5927\u6d41\u6df7\u4e3a\u4e00\u8c08\u3002**\u6700\u5927\u6d41\u548c\u6700\u5c0f\u5272\u9664\u4e86\u6570\u503c\u76f8\u7b49\u5916\u57fa\u672c\u6ca1\u6709\u4efb\u4f55\u8054\u7cfb\u3002**\n\n### \u601d\u8def\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\u8bf4\u5f97\u548c\u6e05\u695a\uff0c\u6211\u60f3\u8bf4\u8bf4\u81ea\u5df1\u5bf9\u8fd9\u9053\u9898\u7684\u4e00\u4e9b\u7406\u89e3\u3002\n\n\u6709\u5f88\u591a\u540c\u5b66\u60f3\u4e0d\u660e\u767d\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6700\u5c0f\u5272\u505a\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6765\u60f3\u4e00\u60f3\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff1a\n\n> \u6700\u5c0f\u5272\u662f\u8fb9\u6743\u503c\u548c\u6700\u5c0f\u7684\u5272\u3002\u4e00\u4e2a\u56fe\u6216\u7f51\u7edc\u7684\u5272\u8868\u793a\u4e00\u4e2a\u5207\u9762\u6216\u5207\u7ebf\uff0c\u5c06\u56fe\u6216\u7f51\u7edc\u5206\u4e3a\u5206\u522b\u5305\u542b\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u4e24\u4e2a\u5b50\u96c6\uff0c\u8be5\u5207\u7ebf\u6216\u5207\u9762\u4e0e\u7f51\u7edc\u76f8\u4ea4\u7684\u695e\u6216\u8fb9\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u56fe\u50cf\u7684\u5272\u3002\n\n\u90a3\u4e48\u6211\u4eec\u518d\u6765\u770b\u4e00\u5f20\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rx0m8um5.png)\n\n\u56fe\u4e2d\u7ea2\u8272\u7684\u7ebf\u5373\u8868\u793a\u56fe\u7684**\u5272**\uff0c\u8fd9\u6837\u7684\u4e00\u4e2a\u5272\u4f1a\u628a\u56fe\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408 $S,T$\uff0c\u5176\u4e2d**\u6e90\u70b9\u6240\u5728\u7684\u90e8\u5206\u662f\u96c6\u5408 $S$\uff0c\u6c47\u70b9\u6240\u5728\u7684\u90e8\u5206\u662f\u96c6\u5408 $T$\u3002** \u6700\u5c0f\u5272\uff0c\u5373\u6c42\u7684\u662f\u56fe\u4e2d\u6240\u6709\u7684\u5272\u4e2d\uff0c**\u88ab\u5207\u5272\u7684\u8fb9\u7684\u8fb9\u6743\u7684\u548c**\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u518d\u56de\u5230\u8fd9\u9053\u9898\u3002\u9996\u5148\u6211\u4eec\u5c06\u6e90\u70b9\u8fde\u51fa\u7684\u8fb9\u8868\u793a\u4e3a\u79cd\u690d\u5728 $A$ \u7684\u6536\u5165\uff0c\u5c06\u8fde\u5165\u6c47\u70b9\u7684\u8fb9\u8868\u793a\u4e3a\u79cd\u690d\u5728 $B$ \u4e2d\u7684\u6536\u5165\u3002\u6211\u4eec\u4ed4\u7ec6\u56de\u987e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u6b64\u65f6\u8fde\u5165\u4e00\u4e2a\u70b9 $i$ \u7684\u4e24\u6761\u8fb9\uff08\u4e00\u6761\u4ece\u6e90\u70b9\u8fde\u5165\u7684\u5165\u8fb9\uff0c\u4e00\u6761\u8fde\u5411\u6c47\u70b9\u7684\u51fa\u8fb9\uff09\u53ea\u4f1a\u6709\u4e00\u6761\u8fb9\u4f1a\u88ab\u7b97\u5165\u6700\u5c0f\u5272\u4e2d\uff08\u5426\u5219\u6e90\u70b9\u548c\u6c47\u70b9\u5728\u540c\u4e00\u96c6\u5408\uff09\uff0c\u90a3\u4e48\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u7684\u503c\u4fbf\u662f\u6b64\u65f6\u7684\u7b54\u6848\u3002\n\n\u73b0\u5728\u6211\u4eec\u601d\u8003\uff0c\u5982\u4f55\u5c06\u4e00\u4e2a\u70b9\u96c6\u52a0\u5165\u56fe\u4e2d\u3002\n\n\u8fd9\u4e2a\u70b9\u96c6\u4e00\u5171\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u5168\u79cd\u5728 $A$ \u4e2d\uff0c\u5168\u79cd\u5728 $B$ \u4e2d\uff0c\u6216\u7531\u4e8e\u79cd\u5728\u4e0d\u540c\u7684\u5730\u4e2d\u800c\u6ca1\u6709\u8d21\u732e\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u865a\u70b9\u8868\u793a\u8fd9\u4e2a\u96c6\u5408\u3002\u5bf9\u4e8e\u79cd\u5230\u54ea\u5757\u5730\u4e2d\uff0c\u5219\u4ece\u6e90\u70b9\u8fde\u5411\u8fd9\u4e2a\u70b9\uff0c\u8fb9\u6743\u4e3a $C_1$\uff0c\u53cd\u4e4b\u4ece\u8fd9\u4e2a\u70b9\u8fde\u5411\u6c47\u70b9\uff0c\u8fb9\u6743\u4e3a $C_2$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53c8\u5982\u4f55\u8868\u793a\u96c6\u5408\u5fc5\u987b\u5168\u4f53\u9009\u62e9\u540c\u4e00\u5757\u571f\u5730\u624d\u80fd\u751f\u6548\u5462\uff1f\n\n\u65e2\u7136\u6211\u4eec\u8981\u4f7f\u8fd9\u4e2a\u865a\u70b9\u548c\u96c6\u5408\u4ea7\u751f\u8054\u7cfb\uff0c\u6211\u4eec\u8003\u8651\u5c06\u865a\u70b9\u548c\u96c6\u5408\u4e2d\u7684\u70b9\u8fdb\u884c\u8fde\u8fb9\uff0c\u5177\u4f53\u7684\u8bf4\uff0c\u5bf9\u4e8e\u571f\u5730 $A$\uff0c\u6211\u4eec\u4ece\u865a\u70b9\u5411\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $inf$ \u7684\u8fb9\uff0c\u5bf9\u4e8e\u571f\u5730 $B$\uff0c\u6211\u4eec\u4ece\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5747\u5411\u865a\u70b9\u8fde\u4e00\u6761\u8fb9\u6743 $inf$ \u7684\u8fb9\u3002\u800c\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0c\u662f\u7531\u6700\u5c0f\u5272\u7684\u201c\u6700\u5c0f\u201d\u5f97\u51fa\u7684\uff0c\u90a3\u4e9b $inf$ \u7684\u8fb9\u4e0d\u4f1a\u88ab\u7b97\u8fdb\u53bb\uff0c\u771f\u6b63\u4e2a\u8fd9\u4e2a\u96c6\u5408\u8d77\u4f5c\u7528\u7684\u53ea\u6709\u8fb9\u6743\u4e3a $C_1,C_2$ \u7684\u8fb9\u3002\n\n\u5982\u679c\u8fb9\u6743\u4e3a $C_1$ \u6216\u8005 $C_2$ \u7684\u8fb9\u6ca1\u6709\u88ab\u5272\u53bb\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u70b9\u96c6\u4e2d\u7684\u6240\u6709\u70b9\u548c\u865a\u70b9\u662f\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff08\u518d\u6b21\u4f53\u4f1a $inf$ \u8fb9\u4e0d\u4f1a\u88ab\u7b97\u8fdb\u53bb\u7684\u9053\u7406\uff09\u3002\u5982\u679c\u88ab\u5220\u53bb\u4e86\u5c31\u4e0d\u7528\u8003\u8651\u4e86\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9') chh=getchar();\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss;\n}\nint n,m,cnt,s=0,t=4e3;\nint sum=0,k,c1,c2;\nint depth[4005];\nint head[4005],to[2000005],val[2000005],nxt[2000005],tot=1;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nbool bfs(){\n\tmemset(depth,0,sizeof depth); depth[s]=1;\n\tqueue<int> q; q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(val[i]&&!depth[u]){\n\t\t\t\tdepth[u]=depth[x]+1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow){\n\tif(now==t) return flow;\n\tint out_flow=0;\n\tfor(register int i=head[now];i&&flow;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(val[i]&&depth[u]==depth[now]+1){\n\t\t\tint tmp=dfs(u,min(val[i],flow));\n\t\t\tval[i]-=tmp; val[i^1]+=tmp;\n\t\t\tflow-=tmp; out_flow+=tmp;\n\t\t}\n\t}\n\tif(out_flow==0) depth[now]=0;\n\treturn out_flow;\n}\nint Dinic(){\n\tint ans=0;\n\twhile(bfs()) ans+=dfs(s,1e9);\n\treturn ans;\n}\nint main(){\n\tmemset(head,-1,sizeof head);\n\tcnt=n=read();\n\tint value,x;\n\tfor(register int i=1;i<=n;i++){\n\t\tvalue=read(); sum+=value;\n\t\tadd(s,i,value); add(i,s,0);\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tvalue=read(); sum+=value;\n\t\tadd(i,t,value); add(t,i,0);\n\t}\n\tm=read();\n\tfor(register int i=1;i<=m;i++){\n\t\tk=read(),c1=read(),c2=read();\n\t\tsum+=c1+c2;\n\t\tadd(s,++cnt,c1); add(cnt,s,0);\n\t\tadd(++cnt,t,c2); add(t,cnt,0);\n\t\tfor(register int j=1;j<=k;j++){\n\t\t\tx=read();\n\t\t\tadd(cnt-1,x,1e9); add(x,cnt-1,0);\n\t\t\tadd(x,cnt,1e9); add(cnt,x,0);\n\t\t}\n\t}\n\tprintf(\"%d\",sum-Dinic());\n\treturn 0;\n}\n```\n\u518d\u6b21\u63d0\u9192\uff0c**\u6700\u5927\u6d41\u548c\u6700\u5c0f\u5272\u65e0\u5173\uff01**",
        "postTime": 1646128418,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P1361 \u5c0fM\u7684\u4f5c\u7269 \u9898\u89e3"
    },
    {
        "content": "[P1361 \u5c0fM\u7684\u4f5c\u7269](https://www.luogu.com.cn/problem/P1361)\n\n\u9898\u610f\uff1a\u7b97\u6700\u5927\u4ef7\u503c\u3002\n\n\u8fd9\u4e2a\u9898\u544a\u8bc9\u6211\u4eec\uff0c\u53ef\u4ee5\u5355\u72ec\u79cd\uff0c\u4f46\u662f\u6709\u4e9b\u7ec4\u5408\u79cd\u5728\u4e00\u8d77\u6709\u989d\u5916\u6536\u76ca\u3002\n\n\u4ece\u6807\u7b7e\u770b\uff0c\u8fd9\u9053\u9898\u662f\u6700\u5c0f\u5272\u3002\n\n\u7531\u4e8e\u6bcf\u79cd\u79cd\u5b50\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u8981\u4e48\u79cd\u5728 $ A $\uff0c\u8981\u4e48\u79cd\u5728 $ B $\uff0c\u8fd9\u5c31\u5f88\u719f\u6089\u4e86\uff0c\u4e0d\u5c31\u662f\u6700\u5c0f\u5272\u7684\u672c\u8d28\u5417\uff1f\u5f52\u5c5e\u96c6\u5408\u95ee\u9898\u3002\u6240\u4ee5\u7406\u6240\u5f53\u7136\uff0c\u6e90\u70b9\u5411\u6bcf\u4e2a\u79cd\u5b50\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u8fd9\u4e2a\u79cd\u5b50\u79cd\u5728 $ A $ \u7530\u5730\u91cc\u7684\u6536\u76ca\uff0c\u5373 $ a_i $\u3002\u6bcf\u4e2a\u79cd\u5b50\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u8fd9\u4e2a\u79cd\u5b50\u79cd\u5728 $ B $ \u7530\u5730\u91cc\u7684\u6536\u76ca\uff0c\u5373 $ b_i $\u3002\n\n\u73b0\u5728\u8003\u8651\u597d\u4e86\u5355\u4e2a\u7684\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b\u7ec4\u5408\u600e\u4e48\u529e\uff1f\u8fd9\u4e5f\u662f\u6700\u5c0f\u5272\u5efa\u56fe\u7684\u7ecf\u5178\u6a21\u578b\u3002\n\n\u7531\u4e8e\u8fd9\u4e9b\u7ec4\u5408\u5fc5\u987b\u79cd\u5728\u4e00\u8d77\uff0c\u6240\u6709\u5982\u679c\u8981\u52a0\u5165\u8fd9\u4e9b\u6536\u76ca\u4ee3\u8868\u4ed6\u4eec\u4e0d\u53ef\u5206\u5f00\u3002\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ec4\u5408\u5efa\u7acb\u865a\u62df\u70b9\uff0c\u6bcf\u4e2a\u7ec4\u5408\u5efa\u7acb\u4e24\u4e2a\uff0c\u5982\u4e0b\u56fe\uff0c\u6211\u518d\u6765\u8bb2\u89e3\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/crvi11oo.png)\n\n\u7ea2\u8272\u70b9\u662f\u6211\u4eec\u5efa\u7acb\u7684\u865a\u62df\u70b9\uff0c\u6bcf\u4e2a\u7ec4\u5408\u5efa\u7acb\u4e24\u4e2a\u3002\u6bcf\u4e2a\u5de6\u8fb9\u7684\u865a\u62df\u70b9\u5411\u7ec4\u5408\u7684\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $ \\infty $\uff0c\u5e76\u4e14\u6e90\u70b9\u5411\u5de6\u8fb9\u7684\u865a\u62df\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8fd9\u4e2a\u7ec4\u5408\u7684\u6536\u76ca\uff0c\u5373 $ c_1,i $\u3002**\u601d\u8003\u539f\u7406\uff1f**\u56e0\u4e3a\u8fd9\u4e9b\u7ec4\u5408\u4e0d\u53ef\u5206\u5f00\uff0c\u6240\u4ee5\u5982\u679c\u7684\u5230\u6536\u76ca\uff0c\u5c31\u8fde\u4e3a $ \\infty $ \u8868\u793a\u4e0d\u53ef\u5206\u5272\uff0c\u5176\u5b9e\u4e5f\u662f\u5957\u8def\u3002\n\n\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u7684\u70b9\u5411\u53f3\u8fb9\u7684\u865a\u62df\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $ \\infty $\uff0c\u6bcf\u4e2a\u53f3\u8fb9\u7684\u865a\u62df\u70b9\u5411\u6c47\u70b9\u8fde\u5f53\u524d\u8fd9\u4e2a\u7ec4\u5408\u7684\u6536\u76ca\uff0c\u5373 $ c_2,i $\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3vcmpguc.png)\n\n\u63a5\u4e0b\u6765\u5229\u7528\u6700\u5c0f\u5272\u6700\u5927\u6d41\u5b9a\u7406\u6c42\u51fa\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\nCode\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <queue>\n# include <cstring>\n\nusing namespace std;\n\nconst int N = 2e6 + 5;\nconst int M = 1e7 + 5;\nconst int inf = 0x3f3f3f3f;\nint S , T;\n\ntypedef struct {\n\tint x , y , z , next;\n} Edge;\nEdge edge[M];\n\nint E = 1 , elast[N];\nint n , m;\n\nvoid add(int x , int y , int z) {\n\tE ++;\n\tedge[E].x = x;\n\tedge[E].y = y;\n\tedge[E].z = z;\n\tedge[E].next = elast[x];\n\telast[x] = E;\n}\nint x;\nint dis[N] , cnt[N];\nvoid bfs(int start) {\n\tqueue<int> q;\n\tq.push(start);\n\tdis[start] = 0;\n\tcnt[S] = 1;\n\twhile (!q.empty()) {\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tfor (int i = elast[cur] ; i ; i = edge[i].next) {\n\t\t\tint v = edge[i].y;\n\t\t\tif (dis[v] != -1) continue;\n\t\t\tdis[v] = dis[cur] + 1;\n\t\t\tq.push(v);\n\t\t\tcnt[dis[v]] ++;\n\t\t}\n\t}\n}\nint cur[N];\nint dfs(int u , int flow) {\n\tif (u == T) return flow;\n\tint temp , delta = 0;\n\tfor (int i = cur[u] ; i ; i = edge[i].next) {\n\t\tcur[u] = i;\n\t\tint v = edge[i].y;\n\t\tif (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n\t\t\ttemp = dfs(v , min(flow - delta , edge[i].z));\n\t\t\tedge[i].z -= temp;\n\t\t\tedge[i ^ 1].z += temp;\n\t\t\tdelta += temp;\n\t\t\tif (delta == flow) return delta;\n\t\t}\n\t}\n\tif (dis[S] >= T) return delta;\n\tcur[u] = elast[u];\n\tif (-- cnt[dis[u]] == 0) dis[S] = T;\n\tcnt[++ dis[u]] ++;\n\treturn delta;\n}\nint a[N] , b[N];\nint Isap() {\n\tint ans = 0;\n\tmemset(cnt , 0 , sizeof cnt);\n\tmemset(dis , -1 , sizeof dis);\n\tbfs(T);\n\tfor (int i = 0 ; i <= T ; i ++) {\n\t\tcur[i] = elast[i];\n\t}\n\twhile (dis[S] < T) ans += dfs(S , inf);\n\treturn ans;\n}\nint sum = 0;\nint k , K , cnt1 , cnt2;\nint main() {\n\tcin >> n;\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tscanf(\"%d\" , &a[i]);\n\t\tsum += a[i];\n\t}\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tscanf(\"%d\" , &b[i]);\n\t\tsum += b[i];\n\t}\n\tcin >> m;\n\tS = 0 , T = n + (m << 1) + 1;\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tadd(S , i , a[i]);\n\t\tadd(i , S , 0);\n\t\tadd(i , T , b[i]);\n\t\tadd(T , i , 0);\n\t}\n\tfor (int i = 1 ; i <= m ; i ++) {\n\t\tscanf(\"%d%d%d\" , &k , &cnt1 , &cnt2);\n\t\tsum += cnt1 + cnt2;\n\t\tadd(S , n + i , cnt1);\n\t\tadd(n + i , S , 0);\n\t\tadd(n + m + i , T , cnt2);\n\t\tadd(T , n + m + i , 0);\n\t\tfor (int j = 1 ; j <= k ; j ++) {\n\t\t\tscanf(\"%d\" , &K);\n\t\t\tadd(n + i , K , inf);\n\t\t\tadd(K , n + i , 0);\n\t\t\tadd(K , n + m + i , inf);\n\t\t\tadd(n + m + i , K , 0);\n\t\t}\n\t}\n\n\tprintf(\"%d\\n\" , sum - Isap());\n\treturn 0;\n} \n```",
        "postTime": 1629270824,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P1361 \u5c0fM\u7684\u4f5c\u7269"
    },
    {
        "content": "\u6700\u8fd1\u5b66\u4e60\u7f51\u7edc\u6d41\uff0c\u611f\u89c9\u4ee3\u7801\u90fd\u5de8\u957f\n\n\u7f51\u7edc\u6d41\u7684\u9898\u76ee\u65e0\u975e\u90fd\u662f\u4e00\u4e2a\u5957\u8def\n\n\u5c31\u662f\u9996\u5148\u5efa\u6a21\uff0c\u7136\u540e\u968f\u4fbf~~\u5957\u5957\u6a21\u677f~~\n\n\u4f46\u662f\u8fd9\u9898\u663e\u7136\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\n\n\u4e00\u5f00\u59cb\u5404\u79cd\u4e71\u60f3\uff0c\u53cd\u6b63\u6ca1\u60f3\u5230\u6700\u5c0f\u5272\n\n\u7136\u540e\u968f\u624b\u70b9\u4e86\u4e00\u53d1\u9898\u89e3\uff0c\u501f\u9274\u5b66\u4e60\u4e00\u4e0b\u5927\u795e\u7684\u601d\u8def\n\n\u7136\u540e\u5c31~~TM~~\u604d\u7136\u5927\u609f\uff0c\u539f\u6765\u5c31\u662f\u6c42\u6700\u5c0f\u5272\n\n**\u6700\u5c0f\u5272** $=$ **\u6700\u5927\u6d41**\n\n\u6309\u7167\u5927\u795e\u7684\u601d\u8def\uff0c\u628a$A$\u7530\u5730\u5f53\u505a\u6e90\u70b9\n\n$B$\u7530\u5730\u5f53\u505a\u6c47\u70b9\uff0c\u628a$n$\u79cd\u690d\u7269\u5f53\u505a\u4e2d\u95f4\u70b9\n\n\u6ca1\u6709\u6700\u5927\u6536\u76ca\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u8fde\u63a5\u6e90\u70b9\u3001\u6c47\u70b9\u548c\u4e2d\u95f4\u70b9\n\n\u52a0\u4e0a\u6700\u5927\u6536\u76ca\u540e\uff0c\u6709\u4e9b\u70b9\u5c31\u50cf\u662f\u88ab\u6346\u7ed1\u5728\u4e86\u4e00\u8d77\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9$m$\u4e2a\u70b9\u96c6\u548c\u6e90\u70b9\u3001\u6c47\u70b9\u4e4b\u95f4\uff0c\n\n\u518d\u8bbe\u7f6e$2m$\u4e2a\u4e2d\u95f4\u70b9\uff0c\u628a\u8fd9\u4e9b\u70b9\u548c\u6e90\u70b9\u3001\u6c47\u70b9\u548c\u4e2d\u95f4\u70b9\u8fde\u63a5\u5728\u4e00\u8d77\n\n\u6700\u5927\u6d41\u91cf\u5c31\u662f\u589e\u52a0\u7684\u6536\u76ca\n\n\u542c\u8d77\u6765\u771f\u7684\u5f88\u7ed5\uff0c\u4f46\u662f\u771f\u7684\u662f\u8fd9\u6837\n\n\u9898\u76ee\u8981\u6c42\u6700\u5927\u6536\u76ca\uff0c\u5176\u5b9e\u5c31\u662f\u603b\u6536\u76ca $-$ \u6700\u5c0f\u5272\n\n\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u4f3c\u4e4e\u76f4\u63a5~~\u4e0a\u6a21\u677f\u5c31\u5dee\u4e0d\u591a\u4e86~~\n\n\u7136\u800c\u6211~~$TM$~~\u76f4\u63a5$TLE$\u76f4\u63a5\u98de\u8d77\n\n\u8fd9\u9898\u597d\u50cf\u8981\u4f18\u5316\u4e00\u70b9\u70b9\uff0c\u81f3\u5c11\u6734\u7d20\u7684$Dinic$\u6a21\u677f\u4e0d\u884c\n\n\u53c8\u662f\u4e00\u4f4d\u5927\u795e\u544a\u8bc9\u6211\u4e00\u4e2a\u7384\u5b66\u4f18\u5316\n\n\u771f$TM$\u4e00\u624b\u9a9a\u64cd\u4f5c\uff0c\u77ac\u95f4\u5c31\u5207\u6389\n\n\u8fd9\u4e2a\u4e0d\u662f\u6211\u7684\u4e1c\u897f\u6211\u5c31\u5148\u4e0d\u8bb2\u4e86\u54c8\n\n~~\u81ea\u6211\u611f\u89c9\u7801\u98ce\u7f8e\u597d~~\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 99999999\nusing namespace std;\nstruct XM\n{\n    int to;\n    int dis;\n    int from;\n}\nedge[4000004];\nint cur[40004];\nint deep[40004];\nint head[40004];\nint m,n,s,k,t,x,y,z,ans,num=-1;\ninline void add(int from,int to,int dis)\n{\n    edge[++num].from=head[from];\n    edge[num].to=to;\n    edge[num].dis=dis;\n    head[from]=num;\n}\ninline bool Bfs()\n{\n    memset(deep,0,sizeof(deep));\n    queue < int > Q;\n    while(!Q.empty()) Q.pop();\n    Q.push(s);deep[s]=1;\n    while(!Q.empty())\n    {\n        int u=Q.front();\n        Q.pop();\n        for(register int i=head[u];i!=-1;i=edge[i].from)\n        {\n            int v=edge[i].to;\n            if(deep[v]==0&&edge[i].dis>0)\n            {\n                deep[v]=deep[u]+1;\n                Q.push(v);\n            }\n\n        }\n    }\n    if(deep[t]!=0) return true;\n    else return false;\n}\ninline int Dfs(int u,int f)\n{\n    if(u==t) return f;\n    int sum=0;\n    for(register int &i=cur[u];i!=-1;i=edge[i].from)\n    {\n        int v=edge[i].to;\n        if(deep[v]==deep[u]+1&&edge[i].dis>0)\n        {\n            int d=Dfs(v,min(f,edge[i].dis));\n            if(d>0)\n            {\t\n            \tsum+=d;f-=d;\n                edge[i].dis-=d;\n                edge[i^1].dis+=d;\n                if(!f) break;\n            }\n        }\n    }\n    return sum;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    s=n+1;t=s+1;\n    memset(head,-1,sizeof(head));\n    for(register int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&x);\n        ans+=x;\n        add(s,i,x);\n        add(i,s,0);\n    }\n    for(register int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&x);\n        ans+=x;\n        add(i,t,x);\n        add(t,i,0);\n    }\n    scanf(\"%d\",&m);\n    for(register int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",&k,&x,&y);\n        ans+=x;ans+=y;\n        add(s,n+i+2,x);\n        add(n+i+2,s,0);\n        add(n+m+i+2,t,y);\n        add(t,n+m+i+2,0);\n        for(register int j=1;j<=k;++j)\n        {\n            scanf(\"%d\",&z);\n            add(n+i+2,z,INF);\n            add(z,n+i+2,0);\n            add(z,n+m+i+2,INF);\n            add(n+m+i+2,z,0);\n        }\n    }\n    while(Bfs())\n    {\n    \tmemcpy(cur,head,sizeof(cur));\n    \tans-=Dfs(s,INF);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1547646156,
        "uid": 110198,
        "name": "RicardoShips",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u633a\u6709\u610f\u601d\u7684\u6700\u5c0f\u5272\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u96c6\u5408\u5212\u5206\u6a21\u578b\uff08\u5728 xht \u535a\u5ba2\u91cc\u4e5f\u6709\uff09\uff1a\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u53ef\u4ee5\u9009\u62e9\u53bb\u5c5e\u4e8e\uff0c\u90a3\u5c31\u6e90\u70b9\u4ee3\u8868\u7b2c\u4e00\u4e2a\u96c6\u5408\uff0c\u6c47\u70b9\u4ee3\u8868\u7b2c\u4e8c\u4e2a\uff0c\u89c4\u5b9a\u4e00\u4e2a\u5408\u6cd5\u7684\u9009\u62e9\u65b9\u6848\u6ee1\u8db3\u6e90\u70b9\u548c\u6c47\u70b9\u4e0d\u8fde\u901a\u4e14\u6bcf\u4e2a\u70b9\u6070\u4e0e\u4e00\u4e2a\u96c6\u5408\u76f8\u8fde\uff0c\u5e76\u4e14\u5c5e\u4e8e\u8be5\u96c6\u5408\u3002\u90a3\u4e48\u5728\u6ca1\u6709\u9644\u52a0\u6761\u4ef6\u4e0b\uff0c\u5220\u6389 $b_i$ \u5c31\u662f\u9009\u4e86\u7b2c\u4e00\u4e2a\u96c6\u5408\uff0c\u5220\u4e86 $a_i$ \u5c31\u662f\u9009\u4e86\u7b2c\u4e8c\u4e2a\u96c6\u5408\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u548c\u6e90\u6c47\u8fde\u4e00\u6ce2\u7136\u540e\u6700\u5c0f\u5272\u5373\u53ef\u6c42\u51fa\u6700\u5c0f\u6536\u76ca\u3002\n\n\u4f46\u8fd9\u9898\u8981\u6c42\u6700\u5927\u6536\u76ca\uff0c~~\u4f17\u6240\u5468\u77e5~~\u6700\u5927\u5272\u662f\u4e0d\u53ef\u505a\u7684\u3002\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u7b56\u7565\uff0c\u5148\u7b97\u51fa\u6240\u6709\u65b9\u6848\u7684\u603b\u4ee3\u4ef7\uff0c\u7136\u540e\u5c06\u6bcf\u79cd\u9009\u62e9\u6240\u4e0d\u6ee1\u8db3\u7684\u65b9\u6848\u7684\u4ee3\u4ef7\u7ed9\u51cf\u6389\uff0c\u8fd9\u6837\u5c31\u80fd max -> min\u3002\n\n\u56de\u5230\u8fd9\u9898\u3002\u5355\u4e2a\u7684\u8d21\u732e\u5c31\u53cd\u8fc7\u6765\u968f\u4fbf\u8fde\u5373\u53ef\u3002\u591a\u4e2a\u7684\u8d21\u732e\uff0c\u8003\u8651\u8f6c\u5316\u6210 min\uff0c\u6709\u9009 $a$ \u7684 $c2$ \u5c31\u5e9f\u4e86\uff0c\u6709\u9009 $b$ \u7684 $c1$ \u5c31\u5e9f\u4e86\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u5728\u56fe\u4e2d\u8bbe\u7f6e\u8fd9\u6837\u4e00\u4e2a\u673a\u5173\uff0c\u4f7f\u5f97\u5982\u679c\u5728\u7279\u5b9a\u70b9\u96c6\u4e2d\u6709\u70b9\u4e0e\u6e90\u8fde\u901a\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u5272\u6389\u8fd9\u4e2a\u673a\u5173\u624d\u80fd\u4f7f\u5f97\u4e0e\u6c47\u4e0d\u8fde\u901a\u3002\u8fd9\u4e2a\u975e\u5e38\u81ea\u7136\u4e86\u5427\uff0c\u5c31\u8bbe\u4e2a\u865a\u62df\u8282\u70b9\u8fde\u5411\u70b9\u4eec\uff08\u8fb9\u6743 $+\\infty$\uff09\uff0c\u7136\u540e\u865a\u62df\u8282\u70b9\u8fde\u5411\u6e90 / \u6c47\uff0c\u8fb9\u6743\u4e3a\u5bf9\u5e94 $c$ \u503c\u3002\n\n\u7136\u540e\u6c42\u4e2a\u6700\u5c0f\u5272\u4f5c\u4e3a\u51cf\u6570\u5373\u53ef\u3002\u5927\u6982 $|V|\\ 10^3\\ |E|\\ 10^6$\uff0cdinic \u4e0d\u614c\u3002",
        "postTime": 1609324496,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u5f88\u597d\u7684\u7f51\u7edc\u6d41\u5165\u95e8\u9898\uff0c\u6240\u4ee5\u5bf9\u4e8e\u601d\u7ef4\u90e8\u5206\uff0c\u6211\u4f1a\u8bb2\u7684\u5c3d\u91cf\u8be6\u7ec6\n\n\n------------\n\n\n\u6211\u4eec\u601d\u8003\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5047\u5982\u6ca1\u6709\u6536\u76ca\u673a\u5236\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u70b9\u8fde\u5230\u4e00\u4e2a\u865a\u70b9S\uff0c\u518d\u8fde\u5230\u865a\u70b9T\uff08\u65b9\u5411\u4e3aS->\u70b9->T\uff09\u3002\u8fd9\u65f6\u6211\u4eec\u8dd1\u6700\u5c0f\u5272\uff0c\u90a3\u6211\u4eec\u6c42\u51fa\u6765\u7684\u662f\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u6700\u5c0f\u5272\uff0c\u8981\u6c42\u7684\u662f\u56feS\u4e0eT\u4e0d\u8fde\u901a\u3002\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6761S->\u70b9->T\u7684\u8def\u5f84\uff0c\u90fd\u8981\u5207\u6389\u4e00\u6761\u6700\u5c0f\u8fb9\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u662fa,b\u4e24\u4e2a\u53d8\u91cf\u4e8c\u9009\u4e00\u4e86\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dlgsnr4k.png)\n\n\u6700\u5c0f\u5272\u662f\u4ec0\u4e48\uff1f\u5979\u6c42\u7684\u662f\u6700\u5c0f\u503c\u3002\u90a3\u4e48\u6211\u4eec\u5c06\u56fe\u7684\u6240\u6709\u8fb9\u6743\u52a0\u8d77\u6765\uff0c\u51cf\u53bb\u6700\u5c0f\u5272\uff0c\u5c31\u662f\u4e8c\u9009\u4e00\u7684\u6700\u5927\u503c\u4e86\u3002\n\n\u8003\u8651\u52a0\u4e0a\u6536\u76ca\u6761\u4ef6\u3002\n\n\u663e\u800c\u6613\u89c1\uff0c\u6211\u4eec\u662f\u4e0d\u80fd\u7528\u539f\u6765\u7684\u70b9\u8fde\u8fb9\u7684\u3002\u6240\u4ee5\u6211\u4eec\u65b0\u5f00\u4e00\u4e2a\u865a\u70b9\n\n\u201c\u600e\u4e48\u5efa\u8fb9\u5462\uff1f\u201d\n\n\u6700\u5c0f\u5272\u7684\u76ee\u7684\u662f\u5c06S\u4e0eT\u53d8\u5f97\u4e0d\u8fde\u901a\u3002\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u8981\u5f97\u5230\u7684\u76ee\u6807\u662f\uff1a\u8981\u4e48\u865a\u70b9\u4e0e1\uff0c2\u4e24\u70b9\u5728S\uff0c\u8981\u4e48\u5728T\n\n>\u865a\u70b9\u4e0e1,2\u4e24\u70b9\u7684\u8fde\u7ebf\u4e0d\u53ef\u65ad\u5f00\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u8fb9\u65ad\u5f00\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5207\u6389\u53e6\u4e00\u8fb9\u8fbe\u5230\u4e0d\u8fde\u901a\u7684\u6548\u679c\n\n\u6211\u4eec\u7ecf\u8fc7\u601d\u8003\u53ef\u4ee5\u5f97\u51fa\u8fde\u8fb9\uff1a\u5c06S->\u865a\u70b9\uff08\u957f\u5ea6\u4e3ac1\uff09\uff0c\u865a\u70b9->1\uff08\u6781\u5927\u503c\uff09\uff0c\u865a\u70b9->2\uff08\u6781\u5927\u503c\uff09\u8fde\u8fb9\uff0c\u53ef\u4ee5\u8fbe\u5230\u4e0a\u8ff0\u6548\u679c\u3002\n\n\u53ef\u4ee5\u81ea\u5df1\u601d\u8003\u4e00\u4e0b\u5982\u4f55\u8fde\u4e24\u70b9\u90fd\u79cd\u5728B\u70b9\u65f6\u7684\u5956\u52b1\u673a\u5236\u3002\n\n\n------------\n\u6709\u4e86\u5efa\u8fb9\uff0c\u5176\u4ed6\u5730\u65b9\u90fd\u662f\u7f51\u7edc\u6d41\u677f\u5b50\u3002\u4f46\u8fd9\u91cc\u8981\u7528\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u5e76\u4e14\u8fd8\u8981\u52a0\u4e24\u4e2a\u5c0f\u4f18\u5316\u3002\u5df2\u7ecf\u5728\u4ee3\u7801\u4e2d\u6807\u51fa\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s,t;\nint to[4000005],nx[4000005],st[4000005],zhi[4000005],tot=1;\nint num;\nvoid add(int u,int v,int w){\n    to[++tot]=v;\n    zhi[tot]=w;\n    nx[tot]=st[u];\n    st[u]=tot;\n}\nint c[4000005],ceng[4000005];\nbool bfs(int s){\n    for(int i=0;i<=num;i++)ceng[i]=-1;\n    ceng[s]=0;\n    for(int i=0;i<=num;i++) c[i]=st[i];\n    queue<int> q;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=c[u];i;i=nx[i]){\n            int v=to[i];\n            if(zhi[i]>0&&ceng[v]==-1){\n                ceng[v]=ceng[u]+1;\n                if(v==t) return 1;//\u5982\u679c\u53ef\u4ee5\u641c\u5230\u7ec8\u70b9\uff0c\u63d0\u524d\u9000\u51fa \n                q.push(v);\n            }\n        }\n    }\n    if(ceng[t]==-1) return 0;\n    return 1;\n}\nint dfs(int u,int ans){\n    if(u==t||ans==0){//\u4f18\u5316\u4e4b\u4e8c\uff0c\u5982\u679cans\u5c0f\u4e8e0\u5c31\u6ca1\u5fc5\u8981\u63a5\u7740\u641c\u4e86\u3002\u53cd\u6b63\u4e5f\u589e\u52a0\u4e0d\u4e86\u7b54\u6848 \n        return ans;\n    }\n    int d=ans;\n    for(int i=c[u];i;i=nx[i]){\n        int v=to[i],w=zhi[i];\n        c[u]=i;\n        if(w>0&&ceng[v]==ceng[u]+1){\n            int p=dfs(v,min(w,d));\n            d-=p;\n            if(d<0) break;\n            zhi[i]-=p;\n            zhi[i^1]+=p;\n        }\n    }\n    return ans-d;\n}\nint maxx;\nvoid jian(int u,int v,int w){\n    add(u,v,w);\n    add(v,u,0);\n} \ninline int read()\n{\n    register int x=0,f=1;register char c=getchar();\n    while(c<'0'||c>'9') {if(c=='-') f=-1;c=getchar();}\n    while (c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*f;\n}\nsigned main(){\n    n=read();\n    num=n+1;\n    s=0;\n    t=n+1;\n    int u,v,w;\n    for(int i=1;i<=n;i++){\n        int a;\n        a=read();\n        maxx+=a;\n        jian(s,i,a);\n    }   \n    for(int i=1;i<=n;i++){\n        int b;\n        b=read();\n        maxx+=b;\n        jian(i,t,b);\n    }\n\n    m=read();\n    for(int i=1;i<=m;i++){\n        int k,c1,c2,p;\n        int n1=++num,n2=++num; \n        k=read();\n        c1=read();\n        c2=read();\n        maxx+=c1;\n        maxx+=c2;\n        for(int j=1;j<=k;j++){\n            p=read();\n            jian(n1,p,2147483647);\n            jian(p,n2,2147483647);\n        }\n        jian(s,n1,c1);\n        jian(n2,t,c2);\n    }\n    int c,ans=0;\n    while(bfs(s)){\n        c=dfs(s,2147483647);\n        if(c==-1) break;\n        ans+=c; \n    }\n    printf(\"%lld\",maxx-ans);\n    return 0;\n}\n```\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u9053\u9898\u6211\u4eec\u5148\u601d\u8003\u6211\u4eec\u8981\u5e72\u4ec0\u4e48\uff0c\u518d\u60f3\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u5e72\u3002\n\n\u5efa\u6a21\u7684\u9898\uff0c\u4f8b\u5982\u4e8c\u5206\u56fe\u6216\u7f51\u7edc\u6d41\uff0c\u4e00\u822c\u90fd\u662f\u8fd9\u4e2a\u5957\u8def\n\n\u770b\u8d77\u6765\u7b80\u5355\uff0c\u4f46\u8981\u662f\u60f3\u8f7b\u8f66\u719f\u8def\u5730\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u9700\u8981\u957f\u65f6\u95f4\u7684\u7ec3\u4e60\u3002\n",
        "postTime": 1607054422,
        "uid": 149219,
        "name": "_maze",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "\u6253\u5e7f\u544a->[\u8fd9\u91cc](https://www.cnblogs.com/bztMinamoto/p/9574610.html)\n\n\u4e3a\u4ec0\u4e48\u5927\u7237\u4eec\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u8fd9\u9898\u662f\u6700\u5c0f\u5272\uff0c\u6211\u5374\u8981\u4ed4\u7ec6\u601d\u8003\uff08\u5e76\u770b\u4e86\u773c\u9898\u89e3\uff09\u624d\u80fd\u53d1\u73b0\u2026\u2026\n\n\u9996\u5148\u628a$S$\u5f53\u505a$A$\uff0c$T$\u5f53\u505a$B$\uff0c\u7136\u540e$S$\u5411\u5bf9\u5e94\u7684\u70b9\u8fde\u8fb9\u5bb9\u91cf\u4e3a\u79cd\u5728$A$\u7684\u83b7\u5229\uff0c\u8fde$T$\u540c\u7406\u3002\u8fd9\u6837\u53ea\u8981\u7528\u5168\u90e8\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\n\n\u7136\u540e\u8003\u8651\u4e00\u4e0b\u7ec4\u5408\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ec4\u5408\u62c6\u70b9\uff0c\u4ece$S$\u5411\u5165\u70b9\u8fde\u8fb9\u5bb9\u91cf\u4e3a\u6536\u76ca\uff0c\u7136\u540e\u5165\u70b9\u5411\u5bf9\u5e94\u7684\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf$inf$\uff0c\u6240\u6709\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf$inf$\uff0c\u51fa\u70b9\u5411$T$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u79cd\u5728$B$\u7684\u6536\u76ca\u3002\u7136\u540e\u8fd8\u662f\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\n\n\u4e3a\u4ec0\u4e48\uff1f\u6211\u6284\u7684\u4f60\u95ee\u6211\u4e3a\u4ec0\u4e48\u2026\u2026\n\n\u5148\u5047\u8bbe\u6709\u8fd9\u4e48\u4e2a\u56fe\uff0c$A,B$\u662f\u4e00\u4e2a\u7ec4\u5408\uff0c$X,Y$\u662f\u7ec4\u5408\u62c6\u51fa\u6765\u7684\u70b9\uff0c\u6807\u7ea2\u7684\u8fb9\u56e0\u4e3a\u5bb9\u91cf\u4e3a$inf$\u4e0d\u53ef\u80fd\u88ab\u5272\n\n![](https://i.loli.net/2018/09/02/5b8bb4f6e6e35.png)\n\n\u90a3\u4e48\u6211\u4eec\u5272\u7684\u65b9\u6cd5\u6709\u4e09\u79cd\n\n1.\u4e24\u4e2a\u90fd\u5728$B$\uff0c\u5272$S->X,S->A,S->B$\uff0c\u5c31\u4ee3\u8868\u6240\u6709\u7684\u90fd\u4e0e$S$\u65ad\u5f00\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u90fd\u4e0e$T$\u76f8\u8fde\uff0c\u5373\u79cd\u5728$B$\u91cc\uff0c\u90a3\u4e48\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u90fd\u5728$B$\u7684\u7b54\u6848\n\n2.\u4e24\u4e2a\u90fd\u5728$A$\uff0c\u5272$Y->T,A->T,B->T$\uff0c\u4e0e\u4e0a\u9762\u540c\u7406\n\n3.\u4e00\u4e2a$A$\u4e00\u4e2a$B$\uff0c\u6211\u4eec\u8bbe$A$\u79cd\u5728$S$\uff0c$B$\u79cd\u5728$T$\uff0c\u90a3\u4e48\u5272\u6389$S->X,S->B,A->T,Y->T$\uff0c\u90a3\u4e48\u5c31\u662f$A$\u4e0e$S$\u8fde\uff0c$B$\u4e0e$T$\u8fde\uff0c\u7136\u540e\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u5272\u90fd\u4ee3\u8868\u4e86\u4e00\u79cd\u9009\u62e9\uff0c\u7136\u540e\u57fa\u672c\u5c31\u662f\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272\u4e86\n\nps\uff1a\u8fd9\u9898\u6ce8\u610f\uff0c\u7a7a\u95f4\u8981\u5f00\u7684\u5f88\u5927\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define inf 0x3f3f3f3f\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nconst int N=10005,M=4000005;\nint head[N],Next[M],ver[M],edge[M],tot=1;\nint cur[N],dep[N],n,m,S,T,num;\nqueue<int> q;\ninline void add(int u,int v,int e){\n\tver[++tot]=v,Next[tot]=head[u],head[u]=tot,edge[tot]=e;\n\tver[++tot]=u,Next[tot]=head[v],head[v]=tot,edge[tot]=0;\n}\nbool bfs(){\n    while(!q.empty()) q.pop();\n    for(int i=0;i<=num;++i) cur[i]=head[i];\n    memset(dep,-1,sizeof(dep));\n    q.push(S),dep[S]=0;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i;i=Next[i]){\n            int v=ver[i];\n            if(dep[v]<0&&edge[i]){\n                dep[v]=dep[u]+1,q.push(v);\n                if(v==T) return true;\n            }\n        }\n    }\n    return false;\n}\nint dfs(int u,int limit){\n    if(u==T||!limit) return limit;\n    int flow=0,f;\n    for(int i=cur[u];i;i=cur[u]=Next[i]){\n        int v=ver[i];\n        if(dep[v]==dep[u]+1&&(f=dfs(v,min(limit,edge[i])))){\n            flow+=f,limit-=f;\n            edge[i]-=f,edge[i^1]+=f;\n            if(!limit) break;\n        }\n    }\n    if(!flow) dep[u]=-1;\n    return flow;\n}\nint dinic(){\n    int flow=0;\n    while(bfs()) flow+=dfs(S,inf);\n    return flow;\n}\nint sum;\nint main(){\n\t//freopen(\"testdata.in\",\"r\",stdin);\n\tn=read(),S=0,T=n+1;\n\tfor(int i=1,x;i<=n;++i) x=read(),sum+=x,add(S,i,x);\n\tfor(int i=1,x;i<=n;++i) x=read(),sum+=x,add(i,T,x);\n\tm=read(),num=n+2*m+1;\n\tfor(int i=1;i<=m;++i){\n\t\tint k=read(),x=read(),y=read();\n\t\tsum+=x+y;\n\t\tadd(S,n+1+i,x),add(n+m+1+i,T,y);\n\t\twhile(k--){\n\t\t\tint t=read();\n\t\t\tadd(n+i+1,t,inf),add(t,n+m+i+1,inf);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",sum-dinic());\n\treturn 0;\n}\n```",
        "postTime": 1535882500,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "### \u4f5c\u4e3a\u4e00\u4e2a _MC_ \u515a\uff0c\u8fd9\u9053\u9898\u65e0\u7591\u662f\u4e00\u9053\u597d\u9898\u3002\n\n------------\n\n_Step1_ : \n\n\u7f51\u7edc\u4e2d\uff0c\u6700\u5927\u6d41=\u6700\u5c0f\u5272\u3002\n\n\u6bcf\u4e00\u4e2a\u519c\u4f5c\u7269\u53ea\u80fd\u51fa\u73b0\u5728\u4e00\u4e2a\u7530\u5730\u91cc\uff0c\u8981\u4e48\u5728 $A$ \uff0c \u8981\u4e48\u5728 $B$ \u3002\n\n\u5b9a\u4e49\u4e24\u4e2a\u8d85\u7ea7\u8282\u70b9 $s$ , $t$ \u3002\n\n\u519c\u4f5c\u7269 $i$ \u5728 $A$ \u79cd\u690d\u83b7\u53d6\u5229\u76ca $a_i$ \uff0c\u90a3\u4e48 $s$ \u5c31\u4e0e\u8fd9\u79cd\u4f5c\u7269 $i$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $a_i$ \u7684\u8fb9\uff1b\u5728 $B$ \u79cd\u690d\u83b7\u5229 $b_1$ \uff0c\u5c31\u5c06\u4f5c\u7269 $i$ \u4e0e $t$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ab\u7684\u8fb9\uff1b\n\n\u5148\u5c06\u9898\u76ee\u7b80\u5316\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u8bf4\u6709\u4e00\u4e9b\u4f5c\u7269\u5728\u540c\u4e00\u5757\u7530\u5730\u4e2d\u6709\u989d\u5916\u5229\u76ca\uff1a\n\n\u6bcf\u5272\u6389\u4e00\u6761\u8fb9\uff0c\u5c31\u7b49\u4e8e\u9009\u62e9\u53e6\u4e00\u6761\u8fb9\u3002\u800c\u6700\u5927\u6d41\u5c31\u662f\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u8bb0\u5f55\u6240\u6709\u8def\u5f84\u4ef7\u503c\u603b\u548c $sum$ \uff0c\u8dd1\u4e2a\u6700\u5927\u6d41\u5f97\u5230\u4e86\u6700\u5c0f\u5272\uff0c\u7528 $sum$ \u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u6240\u6709\u8def\u5f84\u7684\u6700\u5927\u4ef7\u503c\u3002\n\n-----------\n\n_Step2_ : \uff08\u865a\u70b9\u5efa\u7acb\uff09\n\n\u8003\u8651\u591a\u4e2a\u519c\u4f5c\u7269\u51fa\u73b0\u5728\u67d0\u4e2a\u8015\u5730\u6240\u4ea7\u751f\u4e86\u989d\u5916\u7684\u4ef7\u503c\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u8f85\u52a9\u70b9\uff08\u4e5f\u53eb\u865a\u70b9\uff09$X$ \u3002\n\n\u8ba9 $s$ \u4e0e $X$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $c_{1, i}$ \u7684\u8fb9\uff0c\u4ee3\u8868\u6709\u8fd9\u4e48\u4e00\u79cd\u60c5\u51b5\uff0c\u4f1a\u83b7\u5229 $c_{1, i}$ \u5143\uff1b\u8ba9 $X$ \u4e0e $t$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $c_{2, i}$ \u7684\u8fb9\uff0c\u4ee3\u8868\u6709\u8fd9\u4e48\u4e00\u79cd\u60c5\u51b5\uff0c\u4f1a\u83b7\u5229 $c_{2, i}$ \u5143\u3002\n\n\u518d\u5c06X\u4e0e\u8fd9\u4e9b\u80fd\u591f\u989d\u5916\u83b7\u5229\u7684\u4f5c\u7269\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\n\n\u5bb9\u91cf\u4e3a $INF$ \uff0c\u610f\u5473\u8fd9\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5272\u6389\u3002\n\n\u8fd9\u6837\u8fd9\u4e2a\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002\u867d\u7136\u4f5c\u4e3a\u4e00\u9053\u8f83\u4e3a\u57fa\u7840\u7684\u5efa\u7acb\u865a\u70b9\u7684\u9898\uff0c\u4e0d\u8fc7\u8fd8\u662f\u6709\u8bb8\u591a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002\n\n\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nint n, m, tot = 1, s, t;\nstruct edge {\n\tint to, nxt, val;\n} e[2000005];\nint head[1000005];\nvoid net_add(int u, int v, int w) {\n\te[++tot] = edge{v, head[u], w};\n\thead[u] = tot;\n\te[++tot] = edge{u, head[v], 0};\n\thead[v] = tot;\n}\nint dep[1000005];\nbool bfs() {\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(dep, -1, sizeof dep);\n\tdep[s] = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[u]; i != -1; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif (dep[v] == -1 && e[i].val) {\n\t\t\t\tq.push(v);\n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t] != -1;\n}\nint dfs(int u, int left) {\n\tif (u == t) {\n\t\treturn left;\n\t}\n\tint data = left;\n\tfor (int i = head[u]; i != -1; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (dep[v] == dep[u] + 1 && e[i].val) {\n\t\t\tint d = dfs(v, min(e[i].val, data));\n\t\t\te[i].val -= d;\n\t\t\te[i ^ 1].val += d;\n\t\t\tdata -= d;\n\t\t\tif (!data) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (data == left) {\n\t\tdep[u] = -1;\n\t}\n\treturn left - data;\n}\n\nsigned main() {\n\tscanf(\"%lld\", &n);\n\ts = 0, t = n + 1;\n\tint sum = 0;\n\tmemset(head, -1, sizeof head);\n\tfor (int i = 1, ai; i <= n; i++) {\n\t\tscanf(\"%lld\", &ai);\n\t\tnet_add(s, i, ai);\n\t\tsum += ai;\n\t}\n\tfor (int i = 1, bi; i <= n; i++) {\n\t\tscanf(\"%lld\", &bi);\n\t\tnet_add(i, t, bi);\n\t\tsum += bi;\n\t}\n\tscanf(\"%lld\", &m);\n\tfor (int i = 1, k, ci1, ci2; i <= m; i++) {\n\t\tscanf(\"%lld %lld %lld\", &k, &ci1, &ci2);\n\t\tnet_add(s, i + n + 1, ci1);\n\t\tnet_add(i + n + m + 1, t, ci2);\n\t\tsum += ci1 + ci2;\n\t\tfor (int j = 1, x; j <= k; j++) {\n\t\t\tscanf(\"%lld\", &x);\n\t\t\tnet_add(i + n + 1, x, 0x3f3f3f3f);\n            net_add(x, i + n + m + 1, 0x3f3f3f3f);\n\t\t}\n\t}\n\tint ans = 0;\n\twhile (bfs()) {\n\t\tans += dfs(s, 0x3f3f3f3f);\n\t}\n\tprintf(\"%lld\", sum - ans);\n\treturn 0;\n}\n```\n\u56e0\u4e3a\u6ca1\u6709\u4fe1\u4ef0\uff0c\u6240\u4ee5\u5f00\u4e86 _long long_ ......\n\n\u672c\u4eba\u849f\u84bb\n\n",
        "postTime": 1649575992,
        "uid": 603435,
        "name": "rubbishZ",
        "ccfLevel": 0,
        "title": "P1361\u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1361)\n\n\u540c\u6b65\u53d1\u8868\u4e8e\u6211\u7684 [$\\text{cnblog}$](https://www.cnblogs.com/UperFicial/p/16033311.html)\u3002\n\n### $\\texttt{Description}$\n\n$n$ \u79cd\u4f5c\u7269\uff0c\u7b2c $i$ \u79cd\u4f5c\u7269\u5728 $A$ \u533a\u79cd\u690d\u53ef\u83b7\u5f97 $a_i$ \u7684\u6548\u76ca\uff0c\u5728 $B$ \u533a\u79cd\u690d\u53ef\u83b7\u5f97 $b_i$ \u7684\u6548\u76ca\u3002$m$ \u79cd\u642d\u914d\u3002\u6307\u5b9a\u7684\u4f5c\u7269\u5168\u90e8\u79cd\u690d\u4e8e $A$ \u533a\uff0c\u53ef\u83b7\u5f97 $c_{1,i}$ \u7684\u6548\u76ca\uff0c\u5168\u90e8\u79cd\u690d\u4e8e $B$ \u533a\uff0c\u53ef\u83b7\u5f97 $c_{2,i}$ \u7684\u6548\u76ca\u3002\u6c42\u6700\u5927\u83b7\u76ca\u3002\n\n### $\\texttt{Solution}$\n\n\u91cd\u70b9\u8bb2\u4e00\u4e0b\u5efa\u56fe\u539f\u7406\u3002\n\n\u9996\u5148\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e8c\u9009\u4e00\u7684\u6a21\u578b\uff0c\u8003\u8651\u6700\u5c0f\u5272\u3002\n\n\u5047\u8bbe\u6211\u4eec\u6240\u6709\u65b9\u6848\u90fd\u53d6\uff0c\u5e76\u4e14\u6bcf\u4e00\u79cd\u4f5c\u7269\u5728\u4e24\u4e2a\u8015\u5730\u90fd\u79cd\u690d\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u83b7\u5f97 $\\sum (a_i+b_i)+\\sum (c_{1,j}+c_{2,j})$ \u7684\u6548\u76ca\uff0c\u4f46\u8fd9\u6837\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u4f7f\u7528\u6700\u5c0f\u5272\u6765\u5272\u53bb\u77db\u76fe\u7684\u8fb9\u3002\u6700\u5927\u5316\u4ef7\u503c\u5c31\u662f\u6700\u5c0f\u5316\u5272\u53bb\u7684\u8fb9\u3002\n\n\u5148\u4e0d\u8003\u8651\u642d\u914d\u3002\u5149\u8003\u8651\u5355\u5728 $A$ \u533a\u79cd\u690d\u6216\u5728 $B$ \u533a\u79cd\u690d\u3002\n\n\n\u6211\u4eec\u5efa\u7acb\u6e90\u70b9 $s$\uff0c\u548c\u6c47\u70b9 $t$\uff0c\u4ee4 $s$ \u5411\u6bcf\u4e00\u4e2a $i$ \u8fde\u4e00\u6761\u5bb9\u91cf $a_i$ \u7684\u8fb9\uff0c\u540c\u7406\uff0c$i$ \u5411 $t$ \u8fde\u4e00\u6761\u5bb9\u91cf $b_i$ \u7684\u8fb9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6c42\u7684\u6700\u5c0f\u5272\u80af\u5b9a\u4f1a\u5728\u6bcf\u4e00\u4e2a $i$ \u4e2d\u9009\u62e9\u4e00\u4e2a $a_i$ \u6216 $b_i$\u3002\n\n\u73b0\u5728\u8003\u8651\u642d\u914d\u7684\u65b9\u6848\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u642d\u914d\u6807\u5fd7\u6210\u4e00\u4e2a\u70b9\uff0c\u5176\u4e2d\u7b2c $i$ \u4e2a\u642d\u914d\u6807\u8bb0\u7684\u70b9\u4e3a $i+n$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u642d\u914d\u8981\u4e48\u5728 $A$ \u79cd\u690d\u8981\u4e48\u5728 $B$ \u79cd\u690d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u642d\u914d\u88c2\u6210\u4e24\u4e2a\u70b9 $i+n$ \u548c $i+n+m$\uff0c\u5206\u522b\u8868\u793a\u79cd\u690d\u5728 $A$ \u548c\u79cd\u690d\u5728 $B$\u3002\n\n\u82e5\u79cd\u690d\u5728 $A$\uff0c\u5219\u5176\u53ef\u4ee5\u83b7\u5f97 $c_{1,i}$ \u7684\u6548\u76ca\uff0c\u6211\u4eec\u4ee4 $s$ \u8fde\u5411 $i+n$\uff0c\u6d41\u91cf\u4e3a $c_{1,i}$\uff0c\u540c\u7406\uff0c\u4ee4 $i+n+m$ \u8fde\u5411 $t$\uff0c\u5bb9\u91cf\u4e3a $c_{2,i}$\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u6700\u5c0f\u5272\u80af\u5b9a\u4f1a\u5272\u53bb $c_{1,i}$ \u6216 $c_{2,i}$ \u4e2d\u7684\u4e00\u4e2a\u3002\n\n\u6211\u4eec\u5c06 $i+n$ \u8fde\u5411\u6bcf\u4e00\u4e2a\u642d\u914d\u7684\u4f5c\u7269\uff0c\u6bcf\u4e00\u4e2a\u642d\u914d\u7684\u4f5c\u7269\u518d\u8fde\u5411 $i+n+m$\u3002\n\n\u6ce8\u610f\u5230\u9009\u62e9\u4e00\u4e2a\u65b9\u6848\u5fc5\u987b\u9009\u62e9\u8fd9\u91cc\u9762\u642d\u914d\u7684\u6240\u6709\u4f5c\u7269\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u4f5c\u7269\u90fd\u662f\u4e0d\u53ef\u5206\u5272\u7684\u3002\u90a3\u4e48\u6211\u4eec\u5c06\u6d41\u91cf\u8bbe\u4e3a $\\infty$\uff0c\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u53bb\u5bb9\u91cf\u4e3a $\\infty$ \u7684\u8fb9\u3002\n\n\u505a\u5b8c\u4e86\uff0c\u6839\u636e\u6700\u5927\u6d41 $=$ \u6700\u5c0f\u5272\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u540e\uff0c\u7528\u603b\u4ef7\u503c\u51cf\u53bb\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u8d34\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<climits>\n#include<queue>\n#include<vector>\nusing namespace std;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0' or ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' and ch<='9')s=s*10+(ch-'0'),ch=getchar();\n\treturn s*w;\n}\nconst int INF=1e9+10;\ninline int Max(int x,int y){return x>y?x:y;}\ninline int Min(int x,int y){return x<y?x:y;}\ninline void Swap(int&x,int&y){x^=y;y^=x;x^=y;}\ninline int Abs(int x){return x>0?x:-x;}\nconst int MAXN(3e3+10);\nint n,m,a[MAXN],b[MAXN];\nstruct E{int to,nxt,flow;};\nE edge[MAXN*MAXN];\nint head[MAXN],tot(1);\ninline void add(int u,int v,int f)\n{\n\tedge[++tot].nxt=head[u];\n\thead[u]=tot;\n\tedge[tot].to=v;\n\tedge[tot].flow=f;\n\treturn;\n}\ninline void add_edge(int u,int v,int f)\n{\n\tadd(u,v,f);\n\tadd(v,u,0);\n\treturn;\n}\nint dep[MAXN];\nqueue<int>q;\nint s,t;\nint ans;\ninline bool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tq.push(s);\n\tdep[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tE e=edge[i];\n\t\t\tif(e.flow&&!dep[e.to])\n\t\t\t{\n\t\t\t\tdep[e.to]=dep[u]+1;\n\t\t\t\tq.push(e.to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\ninline int dfs(int u,int in)\n{\n\tif(u==t) return in;\n//\tprintf(\"%d\\n\",u);\n\tint out(0);\n\tfor(register int i=head[u];i&&in;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(e.flow&&dep[e.to]==dep[u]+1)\n\t\t{\n\t\t\tint now=dfs(e.to,Min(e.flow,in));\n\t\t\tedge[i].flow-=now;\n\t\t\tedge[i^1].flow+=now;\n\t\t\tin-=now;\n\t\t\tout+=now;\n\t\t}\n\t}\n\tif(out==0) dep[u]=0;\n\treturn out;\n}\nint main()\n{\n\tn=read();\n\t\n\tfor(register int i=1;i<=n;i++) a[i]=read();\n\tfor(register int i=1;i<=n;i++) b[i]=read();\n\tm=read();\n\ts=0,t=n+m+m+1;\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tadd_edge(s,i,a[i]);\n\t\tadd_edge(i,t,b[i]);\n\t\tans+=a[i]+b[i];\n\t}\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint k=read();\n\t\tint c1=read(),c2=read();\n\t\tans+=c1+c2;\n\t\tadd_edge(s,n+i,c1);\n\t\tadd_edge(n+i+m,t,c2);\n\t\twhile(k--)\n\t\t{\n\t\t\tint p=read();\n\t\t\tadd_edge(n+i,p,INF);\n\t\t\tadd_edge(p,n+i+m,INF);\n\t\t}\n\t}\n\twhile(bfs()) ans-=dfs(s,INF);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n$$\\texttt{The End.by UF}$$",
        "postTime": 1647826318,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010P1361 \u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": "\u5efa\u56fe\uff1a\u65b0\u5efa\u6e90\u70b9\u3001\u6c47\u70b9 $s,t$\u3002\u6211\u4eec\u4ece $s$ \u5411\u6bcf\u4e2a\u70b9 $i$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $a_i$\u3002\u6bcf\u4e2a\u70b9 $i$ \u5411 $t$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $b_i$\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u8981\u4f7f $s,t$ \u4e0d\u8fde\u901a\uff0c\u5c31\u5fc5\u987b\u5272\u6389\u5176\u4e2d\u7684\u4e00\u6761\u8fb9\u3002\u8fd9\u6b63\u597d\u7b26\u5408\u4e86\u300c\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u300d\u7684\u7ea6\u675f\u3002\n\n\u6b64\u65f6\u8fd8\u9700\u8981\u5904\u7406\u300c\u540c\u65f6\u9009\u53d6\u67d0\u4e00\u7ec4\u5c31\u4f1a\u83b7\u5f97\u6536\u76ca\u300d\u7684\u4fe1\u606f\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u65b0\u5efa\u4e00\u4e2a\u70b9 $s$\uff0c\u4ece $s$ \u5230 $x$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u540c\u65f6\u9009\u8fd9\u4e00\u7ec4\u83b7\u5f97\u7684\u6536\u76ca\u3002\n\n\u8f6c\u5316\u4e00\u4e0b\u5c31\u662f\uff0c\u53ea\u8981\u5272\u6389\u4e86 $s$ \u5230\u8fd9\u4e00\u7ec4\u5185\u70b9\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48 $s\\to x$ \u7684\u8fb9\u4e5f\u5fc5\u987b\u65ad\u6389\u3002\n\n\u5982\u4f55\u8fbe\u5230\u8fd9\u4e2a\u8981\u6c42\uff1f\u53ea\u9700\u8981\u4ece $x$ \u5411\u7ec4\u91cc\u7684\u6bcf\u4e2a\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $\\infty$ \u7684\u8fb9\u5373\u53ef\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5982\u679c\u65ad\u6389\u4e86 $s$ \u5230\u8be5\u7ec4\u5185\u4e00\u4e2a\u70b9 $u$ \u7684\u8fb9\uff0c\u800c $s\\to x$ \u7684\u8fb9\u6ca1\u6709\u88ab\u65ad\u6389\uff0c\u90a3\u4e48\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7 $s\\to x\\to u$ \u5230\u8fbe $u$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c$s\\to u$ \u7684\u8fb9\u767d\u65ad\u4e86......\u800c\u6700\u5c0f\u5272\u80af\u5b9a\u4e0d\u4f1a\u5e72\u51fa\u8fd9\u79cd\u4e8b\u3002\n\n\u56e0\u6b64\uff0c\u5982\u679c\u65ad\u6389\u4e86 $s\\to u$ \u7684\u8fb9\uff0c$s\\to x\\to u$ \u8fd9\u6761\u8def\u5f84\u4e0a\u80af\u5b9a\u8981\u65ad\u4e00\u6761\u3002\n\n$x\\to u$ \u8fb9\u6743\u4e3a $\\infty$\uff0c\u80af\u5b9a\u4e0d\u4f1a\u65ad\uff1b\u56e0\u6b64\uff0c\u5fc5\u7136\u4f1a\u65ad\u6389 $s\\to x$ \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f97\u4e0d\u5230\u8fd9\u4e2a\u6536\u76ca\u4e86\u3002\n\n\u4e8e\u662f\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u6ce8\u610f\u8fb9\u6570\u6700\u591a\u53ef\u4ee5\u8fbe\u5230 $10^3\\times 10^3\\times 2\\times 2+2\\times 1000$ \uff0c\u4fdd\u9669\u8d77\u89c1\u6700\u597d\u5f00\u5230 $5\\times 10^6$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int MN=5e3+5;\nconst int MM=5e6+5;\nint n,s=0,t;\nint head[MN],nxt[MM],ver[MM],edge[MM],tot=1;\n\nvoid adde(int x,int y,int z){\n\tedge[++tot]=z,ver[tot]=y,nxt[tot]=head[x],head[x]=tot;\n\tedge[++tot]=0,ver[tot]=x,nxt[tot]=head[y],head[y]=tot;\n}\n\nint d[MN],now[MN];\nqueue<int>q;\n\nbool bfs(){\n\tmemset(d,0,sizeof(d));\n\twhile(q.size())q.pop();\n\tq.push(s),d[s]=1,now[s]=head[s];\n\twhile(q.size()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=nxt[i]){\n\t\t\tif((!edge[i])||d[ver[i]])continue;\n\t\t\td[ver[i]]=d[x]+1,q.push(ver[i]),now[ver[i]]=head[ver[i]];\n\t\t\tif(ver[i]==t)return 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic(int x,int flow){\n\tif(x==t)return flow;\n\tint rest=flow;\n\tfor(int i=now[x];i&&rest;i=nxt[i]){\n\t\tnow[x]=i;int y=ver[i];\n\t\tif((!edge[i])||d[y]!=d[x]+1)continue;\n\t\tint k=dinic(y,min(rest,edge[i]));\n\t\trest-=k,edge[i]-=k,edge[i^1]+=k;\n\t}\n\treturn flow-rest;\n}\n\nconst int INF=1e9;\n\n#define OK puts(\"OK\")\n\nsigned main(void){\n\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\",\"r\",stdin);\n#endif\t\t\n\n\tn=read();int ans=0;t=n+2000+1;\n\tfor(int i=1;i<=n;i++){\n\t\tint x=read();ans+=x;\n\t\tadde(s,i,x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint x=read();ans+=x;\n\t\tadde(i,t,x);\n\t}\n\tint m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint k=read(),cx=read(),cy=read();\n\t\tadde(s,n+i,cx),adde(n+m+i,t,cy),ans+=cx+cy;\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tint x=read();\n\t\t\tadde(n+i,x,INF),adde(x,n+m+i,INF);\n\t\t}\n\t}\n\n\tint flow=0;\n\twhile(bfs()){\n\t\twhile(flow=dinic(s,INF))ans-=flow;\n\t}\n\n\tcout<<ans<<endl;\n\n\treturn 0;\n}\n```",
        "postTime": 1644917715,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "P1361 \u5c0fM\u7684\u4f5c\u7269"
    },
    {
        "content": "# \u601d\u8def\n\n\u8ddfP1646\u5f88\u76f8\u4f3c\uff0c\u5982\u679c\u4f60\u505a\u8fc7P1646\uff0c\u8fd9\u4e2a\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002\n\n\u8fd8\u662f\u633a\u5957\u8def\u7684\uff0c\u5982\u679c\u4f1a\u4e86\u8fd9\u4e2a\u601d\u8def\uff0c\u4e0d\u5c11\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u6d41\u5dee\u4e0d\u591a\u5c31\u90fd\u4f1a\u4e86\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u79cd\u5b50\uff0c\u53ea\u4f1a\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u8981\u4e48\u653e\u5230 A \u519c\u7530\u91cc\uff0c\u8981\u4e48\u653e\u5230 B \u519c\u7530\u91cc\u3002\n\n## \u5355\u4e2a\u79cd\u5b50\n\n\u5bf9\u4e8e\u5355\u4e2a\u7684\u79cd\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $S$ \u5411\u5f53\u524d\u70b9 $x$ \u5efa\u4e00\u6761\u6d41\u91cf\u4e3a $a_i$ \u7684\u8fb9\uff0c\u4ece $x$ \u5411 $T$ \u5efa\u4e00\u6761\u8fb9\u6743\u4e3a $b_i$ \u7684\u8fb9\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![](https://images.cnblogs.com/cnblogs_com/Rubyonly233/1814954/o_201211085235asd.png)\n\n\u8ddf\u636e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff0c$a,b$ \u4e24\u6761\u8fb9\u4f1a\u65ad\u6389\u4efb\u610f\u4e00\u4e2a\uff0c\u6b63\u597d\u7b26\u5408\u6211\u4eec\u7684\u4e24\u79cd\u51b3\u7b56\uff1a\u653e\u5230 A \u519c\u7530\u91cc\u3001\u653e\u5230 B \u519c\u7530\u91cc\u3002\n\n## \u591a\u4e2a\u79cd\u5b50\n\n\u5047\u8bbe\u4e24\u4e2a\u79cd\u5b50 $x,y$ \u653e\u5230\u519c\u7530\u91cc\u4f1a\u6709\u989d\u5916\u7684\u6536\u76ca\uff0c\u6211\u4eec\u65b0\u5efa\u4e24\u4e2a\u70b9 $S',T'$\uff0c$S'$ \u5411 $x,y$ \u8fde $INF$ \u8fb9\uff0c$x,y$ \u5411 $T'$ \u8fde $INF$ \u8fb9\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![](https://images.cnblogs.com/cnblogs_com/Rubyonly233/1814954/o_201211091105bcd.png)\n\n\u6c42\u6700\u5c0f\u5272\u6709 4 \u79cd\u51b3\u7b56\uff1a\n\n* \u65ad $b_1,c_2,b_2$ \u4e09\u6761\u8fb9\uff1a\u7559\u4e0b\u4e86 $a_1,c_1,a_2$ \u7684\u8d21\u732e\uff0c\u76f8\u5f53\u4e8e $x$ \u653e\u5230 A \u4e2d\uff0c$y$ \u653e\u5230 A \u4e2d\u3002\n\n* \u65ad $b_1,c_1,a_2,c_2$ \u56db\u6761\u8fb9\uff1a\u7559\u4e0b\u4e86 $a_1,b_2$ \u7684\u8d21\u732e\uff0c\u76f8\u5f53\u4e8e $x$ \u653e\u5230 A \u4e2d\uff0c$y$\u653e\u5230 B \u4e2d\u3002\n\n* \u65ad $a_1,c_1,b_2,c_2$ \u56db\u6761\u8fb9\uff1a\u7559\u4e0b\u4e86 $b_1,a_2$ \u7684\u8d21\u732e\uff0c\u76f8\u5f53\u4e8e $x$ \u653e\u5230 B \u4e2d\uff0c$y$\u653e\u5230 A \u4e2d\u3002\n\n* \u65ad $a_1,c_1,a_2$ \u4e09\u6761\u8fb9\uff1a\u7559\u4e0b\u4e86 $b_1,c_2,b_2$ \u7684\u8d21\u732e\uff0c\u76f8\u5f53\u4e8e $x$ \u653e\u5230 B \u4e2d\uff0c$y$ \u653e\u5230 B \u4e2d\u3002\n\n\u800c\u4e14\u6709\u4e14\u4ec5\u6709\u8fd9 4 \u79cd\u8f83\u4f18\u51b3\u7b56\uff08\u53ea\u7559\u4e00\u6761\u8fb9\u4e0d\u4f5c\u8003\u8651\uff09\uff0c2 \u4e2a\u4ee5\u4e0a\u7684\u79cd\u5b50\u540c\u6837\u5982\u6b64\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u6211\u4eec\u8fd9\u6837\u5efa\u56fe\u662f\u6b63\u786e\u7684\u3002\n\n\u7136\u540e\u6700\u540e\u8dd1\u4e00\u8fb9 Dinic \u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 6e5 + 50, INF = 0x3f3f3f3f;\n\ninline int read () {\n\tregister int x = 0, w = 1;\n\tregister char ch = getchar ();\n\tfor (; ch < '0' || ch > '9'; ch = getchar ()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar ()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\nint n, m, s, t, sum, ans;\nint a[maxn], b[maxn];\n\nstruct Edge {\n\tint to, next, w;\n} e[maxn << 1];\n\nint tot, head[maxn], cur[maxn];\n\ninline void Add (register int u, register int v, register int w) {\n\te[++ tot].to = v;\n\te[tot].w = w;\n\te[tot].next = head[u];\n\thead[u] = tot;\n}\n\ninline void Build () {\n\tfor (register int i = 1; i <= n; i ++) \n\t\tAdd (s, i, a[i]), Add (i, s, 0), Add (i, t, b[i]), Add (t, i, 0);\n\tfor (register int i = 1; i <= m; i ++) {\n\t\tregister int k = read(), c1 = read(), c2 = read();\n\t\tsum += c1, sum += c2;\n\t\tAdd (s, i + n, c1), Add (i + n, s, 0), Add (i + n + m, t, c2), Add (t, i + n + m, 0);\n\t\tfor (register int j = 1; j <= k; j ++) {\n\t\t\tregister int x = read();\n\t\t\tAdd (i + n, x, INF), Add (x, i + n, 0);\n\t\t\tAdd (x, i + n + m, INF), Add (i + n + m, x, 0);\n\t\t}\n\t}\n}\n\nint deep[maxn], que[maxn];\nbool inque[maxn];\n\ninline bool BFS (register int x) {\n\tregister int front = 1, tail = 0;\n\tfor (register int i = 0; i <= t; i ++) \n\t\tcur[i] = head[i], deep[i] = INF, inque[i] = 0;\n\tque[++ tail] = x, deep[x] = 0;\n\twhile (front <= tail) {\n\t\tregister int u = que[front ++]; inque[u] = 0;\n\t\tfor (register int i = head[u]; i; i = e[i].next) {\n\t\t\tregister int v = e[i].to;\n\t\t\tif (deep[v] > deep[u] + 1 && e[i].w) {\n\t\t\t\tdeep[v] = deep[u] + 1;\n\t\t\t\tif (! inque[v]) inque[v] = 1, que[++ tail] = v;\n\t\t\t}\n\t\t}\t\t\n\t}\n\treturn deep[t] != INF;\n}\n\ninline int DFS (register int u, register int flow) {\n\tif (u == t) return ans += flow, flow;\n\tregister int used = 0, tmp = 0;\n\tfor (register int i = cur[u]; i; i = e[i].next) {\n\t\tregister int v = e[i].to; cur[u] = i;\n\t\tif (deep[v] == deep[u] + 1 && e[i].w) {\n\t\t\tif (tmp = DFS (v, min (e[i].w, flow - used))) {\n\t\t\t\tused += tmp, e[i].w -= tmp, e[i % 2 ? i + 1 : i - 1].w += tmp;\n\t\t\t\tif (used >= flow) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\n\ninline void Dinic () {\n\twhile (BFS (s)) DFS (s, INF);\n\tprintf (\"%d\\n\", sum - ans);\n}\n\nint main () {\n\tn = read();\n\tfor (register int i = 1; i <= n; i ++) a[i] = read(), sum += a[i];\n\tfor (register int i = 1; i <= n; i ++) b[i] = read(), sum += b[i];\n\tm = read(), s = 0, t = n + 2 * m + 1, Build (), Dinic ();\n\treturn 0;\n}\n```",
        "postTime": 1607678016,
        "uid": 335193,
        "name": "Rubyonly",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    },
    {
        "content": " http://www.elijahqi.win/2018/01/20/bzoj3438/\n\n http://blog.csdn.net/elijahqi/article/details/79111850\n\nDescription\n\n\u5c0fM\u5728MC\u91cc\u5f00\u8f9f\u4e86\u4e24\u5757\u5de8\u5927\u7684\u8015\u5730A\u548cB\uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5bb9\u91cf\u662f\u65e0\u7a77\uff09\uff0c\u73b0\u5728\uff0c\u5c0fP\u6709n\u4e2d\u4f5c\u7269\u7684\u79cd\u5b50\uff0c\u6bcf\u79cd\u4f5c\u7269\u7684\u79cd\u5b50\n\n\u67091\u4e2a\uff08\u5c31\u662f\u53ef\u4ee5\u79cd\u4e00\u68f5\u4f5c\u7269\uff09\uff08\u75281...n\u7f16\u53f7\uff09\uff0c\u73b0\u5728\uff0c\u7b2ci\u79cd\u4f5c\u7269\u79cd\u690d\u5728A\u4e2d\u79cd\u690d\u53ef\u4ee5\u83b7\u5f97ai\u7684\u6536\u76ca\uff0c\u5728B\u4e2d\u79cd\u690d\n\n\u53ef\u4ee5\u83b7\u5f97bi\u7684\u6536\u76ca\uff0c\u800c\u4e14\uff0c\u73b0\u5728\u8fd8\u6709\u8fd9\u4e48\u4e00\u79cd\u795e\u5947\u7684\u73b0\u8c61\uff0c\u5c31\u662f\u67d0\u4e9b\u4f5c\u7269\u5171\u540c\u79cd\u5728\u4e00\u5757\u8015\u5730\u4e2d\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u6536\u76ca\n\n\uff0c\u5c0fM\u627e\u5230\u4e86\u89c4\u5219\u4e2d\u5171\u6709m\u79cd\u4f5c\u7269\u7ec4\u5408\uff0c\u7b2ci\u4e2a\u7ec4\u5408\u4e2d\u7684\u4f5c\u7269\u5171\u540c\u79cd\u5728A\u4e2d\u53ef\u4ee5\u83b7\u5f97c1i\u7684\u989d\u5916\u6536\u76ca\uff0c\u5171\u540c\u603b\u5728B\u4e2d\u53ef\u4ee5\n\n\u83b7\u5f97c2i\u7684\u989d\u5916\u6536\u76ca\uff0c\u6240\u4ee5\uff0c\u5c0fM\u5f88\u5feb\u7684\u7b97\u51fa\u4e86\u79cd\u690d\u7684\u6700\u5927\u6536\u76ca\uff0c\u4f46\u662f\u4ed6\u60f3\u8981\u8003\u8003\u4f60\uff0c\u4f60\u80fd\u56de\u7b54\u4ed6\u8fd9\u4e2a\u95ee\u9898\u4e48\uff1f\n\nInput\n\u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6574\u6570n\n\n\u7b2c\u4e8c\u884c\u5305\u62ecn\u4e2a\u6574\u6570\uff0c\u8868\u793aai\u7b2c\u4e09\u884c\u5305\u62ecn\u4e2a\u6574\u6570\uff0c\u8868\u793abi\u7b2c\u56db\u884c\u5305\u62ec\u4e00\u4e2a\u6574\u6570m\u63a5\u4e0b\u6765m\u884c\uff0c\n\n\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684\u7b2ci\u884c\uff1a\u7b2c\u4e00\u4e2a\u6574\u6570ki\uff0c\u8868\u793a\u7b2ci\u4e2a\u4f5c\u7269\u7ec4\u5408\u4e2d\u5171\u6709ki\u79cd\u4f5c\u7269\uff0c\n\n\u63a5\u4e0b\u6765\u4e24\u4e2a\u6574\u6570c1i\uff0cc2i\uff0c\u63a5\u4e0b\u6765ki\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8be5\u7ec4\u5408\u4e2d\u7684\u4f5c\u7269\u7f16\u53f7\u3002\u8f93\u51fa\u683c\u5f0f\n\nOutput\n\n\u53ea\u6709\u4e00\u884c\uff0c\u5305\u62ec\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u6536\u76ca\n\nSample Input\n\n3\n4 2 1\n2 3 2\n1\n2 3 2 1 2\n\nSample Output\n\n11\n\u6837\u4f8b\u89e3\u91caA\u8015\u5730\u79cd1\uff0c2\uff0cB\u8015\u5730\u79cd3\uff0c\u6536\u76ca4+2+3+2=11\u3002\n\n1<=k< n<= 1000,0 < m < = 1000 \u4fdd\u8bc1\u6240\u6709\u6570\u636e\u53ca\u7ed3\u679c\u4e0d\u8d85\u8fc72\\*10^9\u3002\n\n\u6700\u5c0f\u5272 \u5efa\u7acb\u4e24\u4e2a\u65b0\u70b9  \u6e90\u5411\u6bcf\u4e2a\u70b9\u8fde\u4e0d\u9009\u4ed6\u83b7\u5f97\u7684\u4ee3\u4ef7 \u6bcf\u4e2a\u70b9\u5411\u6c47\u8fde\u4e0d\u9009\u4ed6\u4ed8\u51fa\u7684\u4ee3\u4ef7 \u7136\u540e\u9488\u5bf9\u6bcf\u4e2a\u5b50\u96c6\u5efa\u7acb\u4e24\u4e2a\u70b9 \u4e00\u4e2a\u662f\u90fd\u9009A \u4e00\u4e2a\u662f\u90fd\u9009B\u90a3\u4e48A\u5411\u76f8\u5e94\u7684\u70b9\u8fdeINF  B\u5411\u76f8\u5e94\u7684\u70b9\u8fdeINF\u6700\u5c0f\u5272\u5373\u53ef\n\nS\u5411\u6bcf\u4e2a\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u79cd\u5728A\u7684\u6536\u76ca\uff0c\u6bcf\u4e2a\u70b9\u5411T\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u79cd\u5728B\u7684\u6536\u76ca\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5fc5\u7136\u8981\u5272\u6389\u8fde\u5411S\u6216T\u7684\u4e00\u6761\u4e14\u4ec5\u4e00\u6761\u8fb9\u3002\u5bf9\u4e8e\u5272\u4e4b\u540e\u7684\u56fe\uff0cS\u96c6\u7684\u70b9\u5747\u9009\u62e9\u4e86\u79cd\u5728A\uff0cT\u96c6\u7684\u70b9\u5747\u9009\u62e9\u4e86\u79cd\u5728B\u3002\u90a3\u5bf9\u4e8e\u5171\u540c\u79cd\u5728A\u5730\u6709\u989d\u5916\u6536\u76ca\u7684\u70b9\u600e\u4e48\u529e\u5462\uff1f\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u70b9x\uff0cS\u5411x\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6536\u76ca\uff0cx\u5411\u6240\u6709\u9700\u8981\u5171\u540c\u79cd\u5728A\u7684\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\uff0c\u5219\u5982\u679c\u8fd9\u4e9b\u70b9\u6709\u4e00\u4e2a\u70b9\u6ca1\u6709\u5272\u6389\u5411T\u7684\u8fde\u8fb9\uff0c\u6211\u4eec\u52bf\u5fc5\u8981\u5272\u6389\u6536\u76ca\u8fd9\u6761\u8fb9\u3002\u5982\u679c\u6536\u76ca\u8fd9\u6761\u8fb9\u6ca1\u88ab\u5272\u6389\uff0c\u5219\u8bf4\u660e\u4ed6\u6240\u9700\u8981\u7684\u70b9\u6700\u540e\u90fd\u5272\u4e86\u5411T\u7684\u8fde\u8fb9\uff0c\u4e5f\u5c31\u662f\u90fd\u5728S\u96c6\u4e2d\uff0c\u4e5f\u5c31\u662f\u90fd\u79cd\u5728\u4e86A\uff0c\u7b26\u5408\u9898\u610f\u3002\u5bf9\u4e8e\u5171\u540c\u79cd\u5728B\u7684\u6709\u989d\u5916\u6536\u76ca\u7684\u4e5f\u540c\u7406\uff0c\u65b0\u5efa\u4e00\u4e2a\u70b9x\uff0cx\u5411T\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6536\u76ca\uff0c\u6240\u6709\u9700\u8981\u5171\u540c\u79cd\u5728B\u7684\u70b9\u5411x\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\u3002\u5219\u6700\u540e\u7b54\u6848\u5c31\u662f\u603b\u6536\u76ca-\u6700\u5c0f\u5272\u3002\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 0x3f3f3f3f\n#define N 3300\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n} \ninline int read(){\n    int x=0;char ch=gc();\n    while(ch<'0'||ch>'9') ch=gc();\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=gc();\n    return x;\n}\nint n,h[N],T,level[N],b[N],num=1,cur[N];\nstruct node{\n    int y,z,next;\n}data[4400000];\ninline void insert1(int x,int y,int z){\n    data[++num].y=y;data[num].z=z;data[num].next=h[x];h[x]=num;\n    data[++num].y=x;data[num].z=0;data[num].next=h[y];h[y]=num;\n}\ninline bool bfs(){\n    queue<int>q;memset(level,0,sizeof(level));level[0]=1;q.push(0);\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for (int i=h[x];i;i=data[i].next){\n            int y=data[i].y,z=data[i].z;\n            if (level[y]||!z) continue;level[y]=level[x]+1;if (y==T) return 1;q.push(y);\n        }\n    }return 0;\n}\ninline int dfs(int x,int s){\n    if (x==T) return s;int ss=s;\n    for (int &i=cur[x];i;i=data[i].next){\n        int y=data[i].y,z=data[i].z;\n        if (level[x]+1==level[y]&&z){\n            int xx=dfs(y,min(z,s));if (!xx) level[y]=0;\n            s-=xx;data[i].z-=xx;data[i^1].z+=xx;if (!s) return ss;\n        }\n    }return ss-s;\n}\nint main(){\n//    freopen(\"bzoj3438.in\",\"r\",stdin);\n    n=read();int sum=0;int x=0;\n    for (int i=1;i<=n;++i) insert1(0,i,x=read()),sum+=x;\n    for (int i=1;i<=n;++i) b[i]=read(),sum+=b[i];int m=read();T=n;T+=m<<1;++T;\n    for (int i=1;i<=n;++i) insert1(i,T,b[i]);\n    for (int i=1;i<=m;++i){\n        int k=read();insert1(0,n+i,x=read());sum+=x;insert1(n+m+i,T,x=read());sum+=x;\n        for (int j=1;j<=k;++j){\n            insert1(i+n,x=read(),inf);insert1(x,i+n+m,inf);\n        }\n    }int ans=0;while(bfs()) memcpy(cur,h,sizeof(h)),ans+=dfs(0,inf);\n    printf(\"%d\",sum-ans);\n    return 0;\n}\n\n```",
        "postTime": 1516467586,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1361 \u3010\u5c0fM\u7684\u4f5c\u7269\u3011"
    }
]