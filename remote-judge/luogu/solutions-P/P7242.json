[
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\u7ea6\u5b9a\u6811\u8282\u70b9\u6570\u91cf\u4e3a $n$\u3002\n\n\u7531\u4e8e\u5728\u7ebf\u505a\u6cd5\u7ef4\u62a4\u4fe1\u606f\u8f83\u4e3a\u56f0\u96be\uff0c\u56e0\u6b64\u4f7f\u7528\u79bb\u7ebf\u505a\u6cd5\uff0c\u5148\u5c06\u6811\u5efa\u51fa\u6765\u518d\u4f9d\u6b21\u5904\u7406\u64cd\u4f5c\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e24\u70b9\u95f4\u7684\u5f02\u6216\u8def\u5f84\u548c\u3002\n\n\u6bd4\u8f83\u5957\u8def\u7684\u65b9\u6cd5\u662f\u7ef4\u62a4\u6bcf\u4e2a\u70b9 $i$ \u5230\u6839\u7684\u5f02\u6216\u8def\u5f84\u548c $dis_i$\uff0c\u90a3\u4e48\u70b9 $a$ \u5230\u70b9 $b$ \u7684\u5f02\u6216\u8def\u5f84\u548c\u5373\u4e3a $dis_a \\operatorname{xor} dis_b$\u3002\n\n\u8fd9\u6837\uff0cQuery \u64cd\u4f5c\u5c31\u53d8\u4e3a\u8be2\u95ee $\\max \\{ dis[a] \\operatorname{xor} dis[c] ,c\\in \\text{b\u5b50\u6811} \\}$\u3002\u4f46\u662f\u5982\u679c\u66b4\u529b\u904d\u5386\u5b50\u6811\uff0c\u5355\u6b21\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u5c31\u4e3a $O(n)$\uff0c\u96be\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n\u5982\u679c\u4f7f\u7528 dfs \u5e8f\uff0c\u8be2\u95ee\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u67e5\u8be2\u5f02\u6216\u6700\u5927\u503c\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7 01Trie \u6811\u89e3\u51b3\uff0c\u5355\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a $O(31)$\uff0c\u5176\u4e2d $31$ \u662f\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u957f\u957f\u5ea6\u3002\n\n\u7136\u800c\u80af\u5b9a\u4e0d\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u90fd\u5efa\u7acb\u4e00\u9897 01Trie \u6811\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5373\u4e3a\u5982\u4f55\u7ef4\u62a4 01Trie \u6811\u4e0b\u6807\u3002\n\n~~\u6211\u4f1a\u6811\u5957\u6811\uff01~~ \u6811\u5957\u6811\u867d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u5c0f\uff0c\u4f46\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u6240\u4ee5\u8003\u8651\u7528\u5206\u5757\u7ef4\u62a4 01Trie \u6811\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u5efa\u7acb\u4e00\u9897 01Trie \u6811\u3002\u5bf9\u4e8e Add \u64cd\u4f5c\uff0c\u66f4\u65b0\u5f53\u524d\u5757\u7684 01Trie \u6811\uff0c\u590d\u6742\u5ea6\u4e3a $O(31)$\u3002\u5bf9\u4e8e Query \u64cd\u4f5c\uff0c\u6563\u5757\u76f4\u63a5\u66b4\u529b\uff0c\u6574\u5757\u5219\u5728 01Trie \u6811\u4e0a\u8fdb\u884c\u67e5\u8be2\u3002\u8bbe\u5757\u5927\u5c0f\u4e3a $S$\uff0c\u5355\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u5373\u4e3a $O(S+ \\dfrac{31n}{S} )$\uff0c\u5f53 $S = \\sqrt{31n}$ \u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(Q\\sqrt{31n})$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define M 200005\ntypedef long long ll;\nusing namespace std;\nbool f2;\nchar IO;\nint rd(){\n\tint num=0;bool f=0;\n\twhile(IO=getchar(),IO<48||IO>57)if(IO=='-')f=1;\n\tdo num=(num<<1)+(num<<3)+(IO^48);\n\twhile(IO=getchar(),IO>=48&&IO<=57);\n\treturn f?-num:num;\n}\nint n,m,Q,S;\nint opt[M],X[M],Y[M];\nint to[M],hd[M],val[M],nxt[M],cnte;\nvoid Adde(int u,int v,int w){\n\tto[++cnte]=v;val[cnte]=w;\n\tnxt[cnte]=hd[u];hd[u]=cnte;\n}\nint L[M],R[M],dis[M],idfn[M],ntot;\nvoid dfs(int x){\n\tL[x]=++ntot;idfn[ntot]=x;\n\tfor(int i=hd[x],y;i;i=nxt[i]){\n\t\ty=to[i];\n\t\tdis[y]=dis[x]^val[i];\n\t\tdfs(y);\n\t}R[x]=ntot;\n}\n// 01Trie\u6811\nint Rt[505],trie[M*32][2],cnt[M*32],tot;\nvoid update(int &rt,int x,int dep=30){\n\tif(!rt)rt=++tot;\n\t++cnt[rt];\n\tif(dep==-1)return ;\n\tupdate(trie[rt][(x>>dep)&1],x,dep-1);\n}\nint query(int rt,int x,int dep=30){\n\tif(dep==-1||!cnt[rt])return 0;\n\tint bit=(x>>dep)&1;\n\tif(cnt[trie[rt][!bit]])\n\t\treturn query(trie[rt][!bit],x,dep-1)|(1<<dep);\n\telse return query(trie[rt][bit],x,dep-1);\n}\nbool Upd[M];\nvoid Update(int x){\n\tUpd[L[x]]=1;\n\tupdate(Rt[L[x]/S],dis[x]);\n}\nvoid Query(int L,int R,int x){\n\tint res=0,kl=L/S,kr=R/S;\n\tif(kl==kr){\n\t\tfor(int i=L;i<=R;++i)\n\t\t\tif(Upd[i])res=max(res,dis[idfn[i]]^x);\n\t}else{\n\t\tfor(int i=L;i<(kl+1)*S;++i)\n\t\t\tif(Upd[i])res=max(res,dis[idfn[i]]^x);\n\t\tfor(int i=kl+1;i<kr;++i)\n\t\t\tres=max(res,query(Rt[i],x));\n\t\tfor(int i=kr*S;i<=R;++i)\n\t\t\tif(Upd[i])res=max(res,dis[idfn[i]]^x);\n\t}printf(\"%d\\n\",res);\n}\nbool f1;\nint main(){\n//\tcout<<(&f1-&f2)/1024.0/1024.0<<endl;\n\tQ=rd();n=1;\n\tchar str[8];\n\tfor(int i=1;i<=Q;++i){\n\t\tscanf(\"%s\",str);\n\t\topt[i]=(str[0]=='A');\n\t\tX[i]=rd(),Y[i]=rd();\n\t\tif(opt[i])Adde(X[i],++n,Y[i]);\n\t}\n\tdfs(1);S=sqrt(31*n);\n\tUpdate(m=1);\n\tfor(int i=1,x;i<=Q;++i){\n\t\tif(!opt[i])Query(L[Y[i]],R[Y[i]],dis[X[i]]);\n\t\telse Update(++m);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1622947298,
        "uid": 201325,
        "name": "zhuai\u62fd",
        "ccfLevel": 7,
        "title": "[COCI2019-2020#4] Klasika \u9898\u89e3"
    },
    {
        "content": "\u6839\u636e\u5957\u8def\uff0c\u8bbe $s_u$ \u8868\u793a\u70b9 $u$ \u5230\u6839\u8def\u5f84\u7684\u5f02\u6216\u548c\u3002\u5219\u6211\u4eec\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\uff1a\n\n$$\\max_{u\\in\\operatorname{subtree(b)}}\\{s_a \\operatorname{xor} s_u\\}$$\n\n\u7531\u4e8e $s_a$ \u4e3a\u5b9a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4 $b$ \u5b50\u6811\u4e2d\u6240\u6709 $s$ \u7684 01Trie\uff0c\u6bcf\u6b21\u8d70\u76f8\u53cd\u8fb9\u6765\u53d6\u5f97\u6700\u5927\u5f02\u6216\u548c\u3002\n\n\u8fd9\u6837\u770b\u8d77\u6765\u4e0d\u9002\u5408\u5728\u7ebf\uff0c\u8003\u8651\u79bb\u7ebf\u4e0b\u6765\uff0c\u53d1\u73b0\u53ef\u4ee5\u91c7\u53d6\u7ebf\u6bb5\u6811\u5408\u5e76\u7684 trick \u6765\u83b7\u5f97\u5bf9\u5e94\u8282\u70b9\u7684 01Trie\u3002\u4e3a\u4e86\u5904\u7406\u4fee\u6539\uff0c\u6211\u4eec\u6df1\u5165\u7406\u89e3\u4e00\u822c\u533a\u95f4\u6700\u5927\u5f02\u6216\u548c\u7684\u601d\u8def\uff0c\u662f\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u83b7\u53d6\u524d $r$ \u4e2a\u5143\u7d20\u5bf9\u5e94\u7684 01Trie\uff0c\u518d\u5728\u8d70\u7684\u8fc7\u7a0b\u4e2d\u907f\u514d\u7ecf\u8fc7\u4e0b\u6807\u5c0f\u4e8e $l$ \u7684\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u628a\u4e0b\u6807\u5bf9\u5e94\u6539\u4e3a\u8fd9\u4e2a\u70b9\u88ab\u63d2\u5165\u7684\u65f6\u95f4\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u4e86\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6 $O(q\\log v)$\uff0c\u5176\u4e2d $v$ \u4e3a\u503c\u57df\u5927\u5c0f\u3002\n\n\u5b9e\u73b0\u65f6\u8981\u6ce8\u610f\u8fd9\u91cc\u7684 Trie \u5408\u5e76\u65f6\u4f1a\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u8fd9\u65f6\u6211\u4eec\u8d2a\u5fc3\u5730\u4fdd\u7559\u65f6\u95f4\u6700\u5c0f\u7684\u3002\n\n```\n#include <bits/stdc++.h>\n#define maxn 1000005\nusing namespace std;\n\nint ch[maxn * 30][2], p[maxn * 30], val[maxn * 30], s[maxn], t[maxn];\nint a[maxn], ans[maxn];\nint bk[maxn * 30], top;\nint i, x, y, tot, n = 1, m;\nchar op[10];\ninline void insert(int i, int k, int v) {\n    if (k < 0) {\n        p[v] = s[i], val[v] = t[i];\n        return;\n    }\n    int c = s[i] >> k & 1;\n    if (!ch[v][c]) ch[v][c] = top ? bk[top--] : ++tot;\n    insert(i, k - 1, ch[v][c]), val[v] = min(val[ch[v][0]], val[ch[v][1]]);\n}\n\ninline int query(int u, int x, int k, int r) {\n    if (k < 0) return p[u] ^ x;\n    int c = x >> k & 1;\n    if (val[ch[u][c ^ 1]] < r)\n        return query(ch[u][c ^ 1], x, k - 1, r);\n    else\n        return query(ch[u][c], x, k - 1, r);\n}\ninline int merge(int u, int v) {\n    if (!u || !v) return u ^ v;\n    if (p[u] && p[v]) return val[u] < val[v] ? u : v;\n    ch[u][0] = merge(ch[u][0], ch[v][0]), ch[u][1] = merge(ch[u][1], ch[v][1]);\n    val[u] = min(val[ch[u][0]], val[ch[u][1]]);\n    ch[v][0] = ch[v][1] = p[v] = 0, val[v] = 0x7f7f7f7f, bk[++top] = v;\n    return u;\n}\nvector<int> e[maxn], q[maxn];\ninline int dfs(int u) {\n    int rt = top ? bk[top--] : ++tot;\n    insert(u, 30, rt);\n    for (auto v : e[u]) rt = merge(rt, dfs(v));\n    for (auto i : q[u]) ans[i] = query(rt, a[i], 30, i);\n    return rt;\n}\nint main() {\n    scanf(\"%d\", &m);\n    memset(val, 0x7f, sizeof(ans));\n    memset(ans, -1, sizeof(ans));\n    for (int i = 1; i <= m; ++i) {\n        scanf(\"%s\", op), scanf(\"%d%d\", &x, &y);\n        if (op[0] == 'A')\n            e[x].push_back(++n), s[n] = s[x] ^ y, t[n] = i;\n        else\n            q[y].push_back(i), a[i] = s[x];\n    }\n    dfs(1);\n    for (int i = 1; i <= m; ++i)\n        if (~ans[i]) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1662903585,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P7242 [COCI2019-2020#4] Klasika \u9898\u89e3"
    },
    {
        "content": "\u5927\u81f4\u601d\u8def\u548c\u697c\u4e0a\u5dee\u4e0d\u591a\uff0c\u4e5f\u662f\u79bb\u7ebf\u628a\u6811\u5efa\u51fa\u6765\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u548c\u5b83\u7684\u5b50\u6811\u5bf9\u5e94\u7684 dfs \u5e8f\u533a\u95f4\uff0c\u67e5\u8be2\u5c31\u76f4\u63a5\u67e5\u8be2\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\n\n\u4e0d\u8fc7\u4e0d\u9700\u8981\u7528\u697c\u4e0a\u8bf4\u7684\u5206\u5757\uff0c\u76f4\u63a5\u4e00\u68f5\u5927 Trie \u5c31\u884c\n\nTrie \u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7528\u4e00\u4e2a set \u7ef4\u62a4\u7ecf\u8fc7\u8fd9\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u6570\u5bf9\u5e94\u7684 dfs \u5e8f\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u80fd\u4e0d\u80fd\u8d70\n\n\u8bbe\u8fb9\u6743\u503c\u57df $[0, 2^k)$\uff0c\u672c\u9898\u4e2d $k = 31$  \n\u663e\u7136\u6bcf\u4e2a set \u7684\u5927\u5c0f\u662f $O(Q)$ \u7684\uff0c\u6bcf\u6b21\u63d2\u5165\u548c\u67e5\u8be2\u603b\u5171\u7ecf\u8fc7 $\\Theta(k)$ \u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5\u6bcf\u6b21\u63d2\u5165\u548c\u67e5\u8be2\u662f $O(k \\log Q)$ \u7684\uff0c\u603b\u5171 $\\Theta(Q)$ \u6b21\u63d2\u5165\u548c\u67e5\u8be2\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(k Q \\log Q)$\uff0c\u5927\u6982\u5c31\u662f\u4e24\u4e2a log \u7684\u6837\u5b50  \n\u81f3\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6\uff0cTrie \u672c\u8eab $O(k Q)$\uff0c\u6240\u6709 set \u52a0\u8d77\u6765 $\\Theta(k Q)$\uff0c\u8fd8\u6709\u522b\u7684\u4e00\u4e9b\u66f4\u5c0f\u7684\u4e1c\u897f\uff0c\u603b\u5171 $\\Theta(k Q)$\uff0c\u5927\u6982\u4e00\u4e2a log\n\n\u4ee3\u7801\u5199\u7684\u53ef\u80fd\u6bd4\u8f83\u4e11\uff0c\u7a7a\u95f4\u51e0\u4e4e\u662f\u5361\u7740\u8fc7\u7684\uff08400+ MB\uff09\uff0c\u65f6\u95f4\u7684\u8bdd\u6709 O2 / Ofast \u652f\u6301\u597d\u50cf\u8fd8\u884c\n\n```cpp\n#include <iostream>\n#include <memory>\n#include <set>\n#include <vector>\n\nstruct Operation {\n  enum class Type { ADD, QUERY };\n\n  Type type;\n  unsigned long u;\n  union {\n    unsigned long val;\n    unsigned long v;\n  };\n};\n\nclass Trie {\nprivate:\n  static constexpr unsigned short MAX_BITS = 31;\n\n  struct Node {\n    std::set<unsigned long> s;\n    std::unique_ptr<Node> child[2];\n  };\n\n  std::unique_ptr<Node> root = std::make_unique<Node>();\n\npublic:\n  void insert(unsigned long p, unsigned long v) {\n    Node *node = root.get();\n    for (unsigned short i = MAX_BITS; i--;) {\n      const unsigned short t = (v >> i) & 1U;\n      if (!node->child[t])\n        node->child[t] = std::make_unique<Node>();\n      node = node->child[t].get();\n      node->s.insert(p);\n    }\n  }\n\n  unsigned long get(unsigned long min, unsigned long max,\n                    unsigned long v) const {\n    Node *node = root.get();\n    for (unsigned short i = MAX_BITS; i--;) {\n      const unsigned short t = (v >> i) & 1U;\n      if (node->child[t ^ 1]) {\n        auto iter = node->child[t ^ 1]->s.lower_bound(min);\n        if (iter != node->child[t ^ 1]->s.end() && *iter <= max) {\n          node = node->child[t ^ 1].get();\n          v |= (1UL << i);\n          continue;\n        }\n      }\n      node = node->child[t].get();\n      v &= (v ^ (1UL << i));\n    }\n    return v;\n  }\n};\n\nclass Tree {\nprivate:\n  std::vector<unsigned long> sum{0};\n  std::vector<std::vector<unsigned long>> children{{}};\n  unsigned long cnt = 0;\n  std::vector<unsigned long> dfn, siz;\n\n  void dfs(unsigned long u) {\n    dfn[u] = ++cnt;\n    siz[u] = 1;\n    for (const auto &v : children[u]) {\n      dfs(v);\n      siz[u] += siz[v];\n    }\n  }\n\npublic:\n  std::vector<unsigned long> solve(const std::vector<Operation> &operations) {\n    unsigned long addCnt = 0;\n    std::vector<unsigned long> result;\n    Trie trie;\n    for (const auto &operation : operations) {\n      if (operation.type == Operation::Type::ADD) {\n        sum.push_back(sum[operation.u] ^ operation.val);\n        children[operation.u].push_back(children.size());\n        children.emplace_back();\n      }\n    }\n    dfn.resize(sum.size());\n    siz.resize(sum.size());\n    dfs(0);\n    trie.insert(dfn[0], sum[0]);\n    for (const auto &operation : operations) {\n      switch (operation.type) {\n      case Operation::Type::ADD:\n        ++addCnt;\n        trie.insert(dfn[addCnt], sum[addCnt]);\n        break;\n      case Operation::Type::QUERY:\n        result.push_back(trie.get(dfn[operation.v],\n                                  dfn[operation.v] + siz[operation.v] - 1,\n                                  sum[operation.u]));\n        break;\n      }\n    }\n    return result;\n  }\n};\n\nint main() {\n  unsigned long q;\n  std::vector<Operation> operations;\n  Tree tree;\n  std::vector<unsigned long> answer;\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  std::cin >> q;\n  while (q--) {\n    unsigned long x, y;\n    std::string s;\n    std::cin >> s >> x >> y;\n    if (s == \"Add\") {\n      operations.push_back(\n          Operation{.type = Operation::Type::ADD, .u = --x, .val = y});\n      continue;\n    }\n    if (s == \"Query\") {\n      operations.push_back(\n          Operation{.type = Operation::Type::QUERY, .u = --x, .v = --y});\n      continue;\n    }\n  }\n  answer = tree.solve(operations);\n  for (const auto &item : answer)\n    std::cout << item << '\\n';\n  return 0;\n}\n```",
        "postTime": 1633593570,
        "uid": 110634,
        "name": "zhanghengrui",
        "ccfLevel": 9,
        "title": "P7242 Klasika \u9898\u89e3"
    }
]