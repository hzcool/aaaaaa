[
    {
        "content": "# \u4e00\u3001\u5b9a\u4e49\n- **\u70b9**\uff1a\u6bcf\u4e2a\u65b9\u683c\u7684\u56db\u4e2a\u89d2\n- \u4e00\u79cd\u7b51\u5899\u65b9\u6848\u7684**\u533a\u57df**\uff1a\u88ab\u5899\u6846\u67f1\u7684\u70b9\u96c6\n\n\u6211\u4eec\u7684\u4efb\u52a1\u5373\u662f\u8981\u786e\u5b9a\u4e00\u79cd\u5408\u6cd5\u7684\u7b51\u5899\u65b9\u6848\uff08\u5176\u533a\u57df\u5305\u542b\u4e86\u6240\u6709\u5173\u952e\u65b9\u683c\u7684\u56db\u4e2a\u89d2\uff09\uff0c\u4f7f\u5f97\u7b51\u5899\u7684\u4ee3\u4ef7\u6700\u5c0f\n# \u4e8c\u3001\u5f15\u7406\n- \u6b64\u7b51\u5899\u65b9\u6848\u4e00\u5b9a\u5305\u542b\u6700\u5de6\u4e0a\u89d2\u7684\u70b9\u5230\u6bcf\u4e2a\u65b9\u683c\u7684\u5de6\u4e0a\u89d2\u7684\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n- \u8bc1\u660e\uff1a\n\n\u6211\u4eec\u7528\u5f52\u7eb3\u8c03\u6574\u7684\u601d\u60f3\u3002\u5047\u8bbe\u6211\u4eec**\u5df2\u7ecf**\u6c42\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684\u7b51\u5899\u65b9\u6848\uff0c\u4e14\u5b58\u5728\u4e00\u4e2a\u5173\u952e\u65b9\u683c $u$\uff0c\u6ee1\u8db3\u5de6\u4e0a\u89d2\u5230\u6b64\u70b9\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u4e0d\u88ab\u5305\u542b\u5728\u533a\u57df\u5185\u3002\u663e\u7136\u5730\uff0c\u6b64\u6700\u77ed\u8def\u4e00\u5b9a\u88ab\u8fd9\u9053\u5899\u5206\u5272\u6210\u4e86\u82e5\u5e72\u6bb5\uff0c\u5728\u5899\u5185\u7684\u6bb5\u548c\u5728\u5899\u5916\u7684\u6bb5\u4ea4\u66ff\u51fa\u73b0\u3002\u6211\u4eec\u628a\u533a\u57df\u6269\u5c55\u5230\u5728\u5899\u5916\u7684\u6bb5\uff08\u5373\u7528\u8fd9\u90e8\u5206\u5728\u5899\u5916\u7684\u6bb5**\u4ee3\u66ff**\u8fde\u63a5\u8fd9\u4e00\u6bb5\u4e24\u7aef\u70b9\u7684\u5899\u7684\u90e8\u5206\uff09\uff0c\u76f8\u5f53\u4e8e\u628a\u539f\u5899\u548c\u6700\u77ed\u8def\u90e8\u5206**\u5408\u5e76**\u3002\u8fd9\u6837\uff0c\u4e0d\u4ec5\u5899\u7684\u533a\u57df\u6269\u5927\u4e86\uff0c\u800c\u4e14**\u7531\u6700\u77ed\u8def\u7684\u5b9a\u4e49**\uff0c\u65b0\u65b9\u6848\u7684\u4ee3\u4ef7\u80af\u5b9a**\u4e0d\u52a3**\u4e8e\u539f\u65b9\u6848\u3002\u4e8e\u662f\u65b0\u7684\u65b9\u6848\u80af\u5b9a\u4e0d\u52a3\u3002\u4e00\u76f4\u8fd9\u6837\u8c03\u6574\u4e0b\u53bb\u76f4\u5230\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u4f18\u5316\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u4fbf\u6ee1\u8db3\u539f\u547d\u9898\u7684\u4efb\u610f\u4e00\u4e2a\u72b6\u6001\u3002\n\n\u5f15\u7406\u5373\u5f97\u8bc1\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ihmcqcgf.png)\n\n# \u4e09\u3001\u505a\u6cd5\n\n\u73b0\u5728\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\uff0c\u7ed9\u5b9a\u4e00\u4e9b\u6700\u77ed\u8def\uff0c\u6c42\u51fa\u5305\u542b\u8fd9\u4e9b\u6700\u77ed\u8def\uff08\u5373\u5899\u7684\u533a\u57df\u5305\u542b\u6240\u6709\u6700\u77ed\u8def\u4e0a\u7684\u70b9\uff09\u7684\u65b9\u6848\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u53c8\u56e0\u4e3a\u6240\u6709\u6700\u77ed\u8def\u6784\u6210\u4e86\u4e00\u68f5\u6700\u77ed\u8def\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u6ee1\u8db3\u7b51\u5899\u65b9\u6848**\u4e0d\u7a7f\u8fc7**\u6700\u77ed\u8def\u5373\u53ef\u3002\u8003\u8651\u628a\u6bcf\u4e00\u4e2a\u70b9\u518d\u62c6\u6210\u56db\u4e2a\u5c0f\u70b9\uff08\u4e00\u4e2a\u65b9\u683c\u5bf9\u5e94 16 \u4e2a\u70b9\uff09\uff0c\u5728\u539f\u56fe\u57fa\u7840\u4e0a\u518d\u5728\u76f8\u90bb\u7684\u3001**\u4e0d\u7a7f\u8fc7\u4efb\u610f\u4e00\u6761\u6700\u77ed\u8def\u6811**\u7684\u8fb9\u4e24\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a 0 \u7684\u8fb9\uff0c\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ofy6s9ch.png)\n\n# \u56db\u3001\u4ee3\u7801\n\n\u5b9e\u5728\u592a\u96be\u5b9e\u73b0\u4e86\uff0c\u5148\u9e3d\u5b50\u4e86.jpg\uff08\n",
        "postTime": 1596012853,
        "uid": 100101,
        "name": "yzc2005",
        "ccfLevel": 9,
        "title": "P6545\u3010CEOI2014 Wall\u3011\u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3\n\n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u795e\u4ed9\u63d2\u5934 $dp$\uff0c\u53d1\u73b0\u73af\u53ef\u4ee5**\u81ea\u4ea4**\uff0c\u63d2\u5934 $dp$ \u5c31\u4e0d\u662f\u5f88\u53ef\u505a\u4e86\n\n\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u6700\u77ed\u8def\uff0c\u5bb9\u6613\u53d1\u73b0\u4ece $(1,1)$ \u5230\u6bcf\u4e2a $UFO$ \u7684\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u5f84\u8981\u4e48\u88ab\u5305\u542b\uff0c\u8981\u4e48\u4f5c\u4e3a\u4e86\u8fb9\u754c\n\n\u7136\u540e\u5efa\u4e00\u68f5\u4ee5 $(1,1)$ \u4e3a\u6839\u7684\u6700\u77ed\u8def\u5f84\u6811\uff0c\u6811\u4e0a\u7684\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u82e5\u5e72\u6761\u6700\u77ed\u8def\u5f84\n\n\u95ee\u9898\u662f\u600e\u4e48\u4ece $(1,1)$ \u51fa\u53bb\u518d\u56de\u6765\uff0c\u4e0d\u59a8\u53bb\u62c6\u70b9\n\n\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u56db\u4e2a\u70b9\uff0c\u6b63\u5e38\u7684\u70b9\u56db\u4e2a\u70b9\u4e92\u76f8\u5efa\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u539f\u56fe\u4e2d\u5b58\u5728\u7684\u8fb9\u6b63\u5e38\u5efa\u5c31\u884c\n\n\u4f46\u662f\u6211\u4eec\u8981\u4fdd\u8bc1\u4e0d\u80fd\u7a7f\u8fc7\u90a3\u82e5\u5e72\u6761\u6700\u77ed\u8def\u5f84\uff0c\u4e5f\u4e0d\u80fd\u7a7f\u8fc7\u6bcf\u4e2a $UFO$ \u77e9\u5f62\u7684\u56db\u6761\u8fb9\uff0c\u5efa\u51fa\u56fe\u6765\u8dd1\u4e00\u904d\u4ece $(1,1)$ \u53f3\u4e0a\u5230 $(1,1)$ \u5de6\u4e0b\u7684\u6700\u77ed\u8def\u5c31\u884c\u4e86\n\n\u4e5f\u8981\u6ce8\u610f $(1,1)$ \u7684\u56db\u4e2a\u70b9\uff0c\u5de6\u4e0a\u4e0d\u80fd\u5411\u53f3\u4e0a\u548c\u5de6\u4e0b\u8fde\u8fb9\uff0c\u4e0d\u7136\u6700\u540e\u7b54\u6848\u5c31\u662f $0$ \u4e86\n\n## \u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n\ntypedef long long ll;\n\nusing namespace std;\n\nconst ll INF = 0x3f3f3f3f3f3f3f3f;\n\ninline int read () {\n\tregister int x = 0, w = 1;\n\tregister char ch = getchar ();\n\tfor (; ch < '0' || ch > '9'; ch = getchar ()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar ()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\nint n, m, nodecnt;\nint dx[4] = {-1, 0, 1, 0};\nint dy[4] = {0, 1, 0, -1};\nint w1[405][405], w2[405][405], id[405][405][5];\nbool a[405][405], black[405][405][4];\n\ninline int ID (register int x, register int y) { return (x - 1) * (m + 1) + y; }\n\nstruct Edge {\n\tint to, next, w;\n} e[8000005];\n\nstruct Node {\n\tint id;\n\tll dis;\n\tNode () {}\n\tNode (register int a, register ll b) { id = a, dis = b; }\n\tfriend bool operator < (const Node &x, const Node &y) { return x.dis > y.dis; }\n};\n\nint tot, head[2000005];\n\ninline void Add (register int u, register int v, register int w) {\n\te[++ tot].to = v;\n\te[tot].w = w;\n\te[tot].next = head[u];\n\thead[u] = tot;\n}\n\nll dis[2000005];\nint from[2000005];\nbool vis[2000005];\npriority_queue <Node> q;\n\ninline void Dijkstra (register int x) {\n\tmemset (dis, 0x3f, sizeof dis), memset (vis, 0, sizeof vis), q.push (Node (x, 0)), dis[x] = 0;\n\twhile (! q.empty ()) {\n\t\tregister Node t = q.top (); q.pop ();\n\t\tregister int u = t.id;\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (register int i = head[u]; i; i = e[i].next) {\n \t\t\tregister int v = e[i].to;\n\t\t\tif (dis[v] > dis[u] + e[i].w) dis[v] = dis[u] + e[i].w, from[v] = u, q.push (Node (v, dis[v]));\n\t\t}\n\t}\n}\n\ninline void FindPath (register int u) {\n\twhile (u != 1) {\n\t\tregister int v = from[u], x = (u - 1) / (m + 1) + 1, xx = (v - 1) / (m + 1) + 1, y = u % (m + 1) ? u % (m + 1) : m + 1, yy = v % (m + 1) ? v % (m + 1) : m + 1;\n\t\tif (u - v == m + 1) black[x][y][0] = black[xx][yy][2] = 1;\n\t\telse if (v - u == m + 1) black[x][y][2] = black[xx][yy][0] = 1;\n\t\telse if (u - v == 1) black[x][y][3] = black[xx][yy][1] = 1;\n\t\telse if (v - u == 1) black[x][y][1] = black[xx][yy][3] = 1;\n\t\tu = v;\n\t}\n}\n\ninline void Init () {\n\tfor (register int i = 1; i <= n; i ++) for (register int j = 1; j <= m; j ++) a[i][j] = read();\n\tfor (register int i = 1; i <= n; i ++) for (register int j = 1; j <= m + 1; j ++) w1[i][j] = read(), Add (ID (i, j), ID (i + 1, j), w1[i][j]), Add (ID (i + 1, j), ID (i, j), w1[i][j]);\n\tfor (register int i = 1; i <= n + 1; i ++) for (register int j = 1; j <= m; j ++) w2[i][j] = read(), Add (ID (i, j), ID (i, j + 1), w2[i][j]), Add (ID (i, j + 1), ID (i, j), w2[i][j]);\n\tDijkstra (1);\n\tfor (register int i = 1; i <= n; i ++) for (register int j = 1; j <= m; j ++) if (a[i][j]) FindPath (ID (i, j));\n}\n\ninline void Build () {\n\ttot = 0, memset (head, 0, sizeof head);\t\n\tfor (register int i = 1; i <= n + 1; i ++) {\n\t\tfor (register int j = 1; j <= m + 1; j ++) {\n\t\t\tid[i][j][1] = ++ nodecnt, id[i][j][2] = ++ nodecnt, id[i][j][3] = ++ nodecnt, id[i][j][4] = ++ nodecnt;\n\t\t\tif (! black[i][j][0] && ! a[i - 1][j - 1] && ! a[i - 1][j] && (i != 1 || j != 1)) Add (id[i][j][1], id[i][j][2], 0), Add (id[i][j][2], id[i][j][1], 0);\n\t\t\tif (! black[i][j][1] && ! a[i - 1][j] && ! a[i][j]) Add (id[i][j][2], id[i][j][3], 0), Add (id[i][j][3], id[i][j][2], 0);\n\t\t\tif (! black[i][j][2] && ! a[i][j - 1] && ! a[i][j]) Add (id[i][j][3], id[i][j][4], 0), Add (id[i][j][4], id[i][j][3], 0);\n\t\t\tif (! black[i][j][3] && ! a[i - 1][j - 1] && ! a[i][j - 1] && (i != 1 || j != 1)) Add (id[i][j][4], id[i][j][1], 0), Add (id[i][j][1], id[i][j][4], 0);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n + 1; i ++) {\n\t\tfor (register int j = 1; j <= m + 1; j ++) {\n\t\t\tfor (register int k = 0; k <= 3; k ++) {\n\t\t\t\tregister int xx = i + dx[k], yy = j + dy[k];\n\t\t\t\tif (xx <= 0 || yy <= 0 || xx > n + 1 || yy > m + 1) continue;\n\t\t\t\tif (k == 0) Add (id[i][j][1], id[xx][yy][4], w1[xx][yy]), Add (id[i][j][2], id[xx][yy][3], w1[xx][yy]);\n\t\t\t\telse if (k == 1) Add (id[i][j][2], id[xx][yy][1], w2[i][j]), Add (id[i][j][3], id[xx][yy][4], w2[i][j]);\n\t\t\t\telse if (k == 2) Add (id[i][j][3], id[xx][yy][2], w1[i][j]), Add (id[i][j][4], id[xx][yy][1], w1[i][j]);\n\t\t\t\telse if (k == 3) Add (id[i][j][1], id[xx][yy][2], w2[xx][yy]), Add (id[i][j][4], id[xx][yy][3], w2[xx][yy]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main () {\n\tn = read(), m = read(), Init (), Build (), Dijkstra (2), printf (\"%lld\\n\", dis[4]);\n\treturn 0;\n}\n```",
        "postTime": 1612182182,
        "uid": 335193,
        "name": "Rubyonly",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6545 \u3010[CEOI2014] The Wall\u3011"
    },
    {
        "content": "\u9996\u5148\u6709\u4e2a\u7ed3\u8bba\uff0c**\u7b51\u7684\u5899\u4e00\u5b9a\u4f1a\u628a $(1,1)$ \u5230\u6240\u6709\u522b\u7684\u5173\u952e\u70b9\u7684\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u90fd\u56f4\u8fdb\u53bb**\u3002\u4f8b\u5982\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/njbo3wd9.png)\n\n\u82e5\u5f53\u524d\u5899\u5305\u542b\u7684\u662f\u6df1\u84dd\u8272\u533a\u57df\uff0c\u800c $(1,1)$ \u5230\u5173\u952e\u70b9 $u$ \u7684\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u662f\u7eff\u8272\u7684\u7ebf\uff0c\u90a3\u4e48\u663e\u7136\u628a\u6d45\u84dd\u8272\u533a\u57df\u4e5f\u5305\u542b\u8fdb\u5899\u91cc\u662f\u66f4\u4f18\u7684\uff0c\u56e0\u4e3a\u7ea2\u8272\u6bb5\u80af\u5b9a\u662f\u6bd4\u4ee3\u66ff\u5b83\u7684\u4e94\u5c0f\u6bb5\u7eff\u8272\u6bb5\u7684\u957f\u5ea6\u548c\u8981\u957f\u7684\uff0c\u56e0\u4e3a\u7eff\u8272\u7684\u7ebf\u662f\u6700\u77ed\u8def\u3002\n\n**\u4e3a\u4ec0\u4e48\u662f\u5de6\u4e0a\u89d2\uff1f**\u5176\u5b9e**\u56db\u4e2a\u89d2\u90fd\u6ca1\u5173\u7cfb**\uff0c\u8fd9\u4e2a\u4e4b\u540e\u518d\u8bc1\u660e\u3002\n\n\u6c42\u51fa\u4e86 $(1,1)$ \u5230\u522b\u7684\u5173\u952e\u70b9\u7684\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u4e4b\u540e\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u6700\u5c0f\u5316\u7b51\u5899\u7684\u82b1\u8d39\uff0c\u4f7f\u5f97\u7b51\u51fa\u7684\u5899\u53ef\u4ee5\u5708\u4f4f\u6240\u6709\u7684\u6700\u77ed\u8def\u548c\u5173\u952e\u70b9\u3002\n\n\u90a3\u4e48\u8003\u8651**\u628a\u4e00\u4e2a\u7f51\u683c\u7ebf\u7684\u4ea4\u70b9\u90fd\u62c6\u6210\u56db\u4e2a\u70b9\uff0c\u70b9\u4e4b\u95f4\u987a\u65f6\u9488\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u6709\u5411\u8fb9\uff0c\u5c5e\u4e8e\u4e0d\u540c\u4ea4\u70b9\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a\u539f\u6743\u503c\u7684\u6709\u5411\u8fb9**\uff0c\u4f46\u662f\u8981\u6ce8\u610f**\u7ecf\u8fc7\u5173\u952e\u70b9\u548c\u6700\u77ed\u8def\u7684\u8fb9\u90fd\u4e0d\u80fd\u8fde**\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7pge7w6m.png)\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u6837\u5efa\u597d\u56fe\u4e4b\u540e\uff0c\u4ece\u7f51\u683c\u5de6\u4e0a\u89d2\u7684\u4ea4\u70b9\u62c6\u51fa\u6765\u7684 $1$ \u53f7\u70b9\u51fa\u53d1\uff0c\u8d70\u5230\u5b83\u7684 $3$ \u53f7\u70b9\uff0c\u5c31\u80fd\u7b51\u51fa\u5408\u6cd5\u7684\u5899\u3002\u90a3\u4e48\u82b1\u8d39\u6700\u5c0f\u7684\u65b9\u6848\u663e\u7136\u5c31\u662f\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\n\n\u6700\u540e\u8bf4\u4e00\u4e0b\u4e4b\u524d\u7559\u4e0b\u6765\u7684\u60ac\u5ff5\uff1a\n\n>\u4e3a\u4ec0\u4e48\u8981\u8d70\u5230\u5de6\u4e0a\u89d2\uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u8d70\u5230\u54ea\u4e2a\u89d2\u90fd\u6ca1\u5173\u7cfb\uff1f\uff1f\uff1f\n\n\u4e0d\u59a8\u5148\u94a6\u5b9a\u4e00\u5b9a\u4ece\u5de6\u4e0a\u89d2\u90a3\u4e2a\u5173\u952e\u70b9\u7684\u5de6\u4e0a\u89d2\u51fa\u53d1\uff0c\u663e\u7136**\u8d70\u5230\u53f3\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u201c\u56f4\u7740\u201d\u8d70\u5230\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def**\uff0c\u5373\u7eff\u8272\u7684\u7ebf\u4e0d\u53ef\u80fd\u8d8a\u8fc7\u7ea2\u8272\u7684\u7ebf\u518d\u56de\u6765\uff0c\u56e0\u4e3a\u90a3\u6837\u4e0d\u4f18\u3002\n\n\u90a3\u4e48\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u8d70\u5230\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def**\u662f**\u5148\u8d70\u5230\u53f3\u4e0a\u89d2\u518d\u5f80\u5de6\u8d70\uff1a\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/dbig07s2.png)\n\n  \u8fd9\u65f6\u7531\u4e8e\u6700\u540e\u7b51\u7684\u5899\u8981\u5305\u542b\u6240\u6709\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0a\u89d2\u4e4b\u95f4\u7684\u90a3\u6761\u8fb9\u4e0d\u4f1a\u88ab\u7b51\u5899\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ea2\u7ebf\u548c\u7eff\u7ebf\u6709\u7528\u7684\u90e8\u5206\u662f\u5b8c\u5168\u76f8\u7b49\u7684\uff0c\u90a3\u4e48\u81ea\u7136\u5bf9\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff1b\n\n- \u8d70\u5230\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def**\u4e0d\u662f**\u5148\u8d70\u5230\u53f3\u4e0a\u89d2\u518d\u5f80\u5de6\u8d70\uff1a\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/jhra5dtg.png)\n\n  \u8fd9\u65f6\u8003\u8651\u6700\u540e\u8dd1\u7684\u6700\u77ed\u8def\uff0c\u5373\u7b51\u7684\u5899\uff0c\u7528\u7d2b\u8272\u7684\u7ebf\u6807\u8bc6\u3002\u663e\u7136\uff0c\u7531\u4e8e\u8d70\u5230\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u4e0d\u662f\u5148\u8d70\u5230\u53f3\u4e0a\u89d2\u518d\u5f80\u5de6\u8d70\uff0c\u6240\u4ee5\u8d70\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0a\u89d2\u7684\u90a3\u6761\u8fb9\u4e00\u5b9a\u662f\u4e0d\u4f18\u7684\uff1b\u5e76\u4e14\u8d70\u7ea2\u7ebf\u548c\u7eff\u7ebf\u4e2d\u95f4\u4e5f\u662f\u4e0d\u4f18\u7684\uff0c\u56e0\u4e3a\u7ea2\u7ebf\u548c\u7eff\u7ebf\u662f\u6700\u77ed\u8def\u3002\u90a3\u4e48\u6700\u7ec8\u7684\u5899\u53ea\u6709\u53ef\u80fd\u662f\u8fd9\u6837\uff1a\n\n  ![](https://cdn.luogu.com.cn/upload/image_hosting/iyknhdig.png)\n\n  \u6240\u4ee5\u5bf9\u6700\u7ec8\u7684\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff1b\n\n\u53c2\u8003\u8fd9\u6837\u7684\u8bc1\u660e\u65b9\u6cd5\uff0c\u5bb9\u6613\u5f97\u51fa\u4ece\u54ea\u4e2a\u89d2\u51fa\u53d1\uff0c\u8d70\u5230\u54ea\u4e2a\u89d2\u90fd\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u3002\u6240\u4ee5\u4e3a\u4e86\u597d\u5199\uff0c\u5e72\u8106\u76f4\u63a5\u94a6\u5b9a\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u548c\u7ed3\u675f\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst int S=5000005,MS=405;\n\nint n,m;\nint a[MS][MS];\nlong long dnval[MS][MS],rgval[MS][MS];\nint esum,to[S],nxt[S],h[S];\nlong long c[S],dis[S];\nbool vis[S];\nbool dntag[MS][MS],rgtag[MS][MS];\n\ninline int getid(int x,int y)\n{\n\treturn (x-1)*(m+1)+y;\n}\n\ninline int getx(int id)\n{\n\treturn (id-1)/(m+1)+1;\n}\n\ninline int gety(int id)\n{\n\treturn (id-1)%(m+1)+1;\n}\n\ninline void add(int x,int y,long long w)\n{\n\tto[++esum]=y;\n\tc[esum]=w;\n\tnxt[esum]=h[x];\n\th[x]=esum;\n}\n\ninline void dijkstra(int s)\n{\n\tmemset(dis,127,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[s]=0;\n\tpriority_queue<pair<long long,int> > q;\n\tq.push(make_pair(-dis[s],s));\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=true;\n\t\tfor(int i=h[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tlong long w=c[i];\n\t\t\tif(dis[u]+w<dis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tq.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid dfs(int u)\n{\n\tvis[u]=true;\n\tfor(int i=h[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tlong long w=c[i];\n\t\tif(dis[u]==dis[v]+w)\n\t\t{\n\t\t\tint ux=getx(u),uy=gety(u),vx=getx(v),vy=gety(v);\n\t\t\tif(vx!=ux) dntag[min(ux,vx)][uy]=true;\n\t\t\telse rgtag[ux][min(uy,vy)]=true;\n\t\t\tif(!vis[v]) dfs(v);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf(\"%d\",&a[i][j]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m+1;j++)\n\t\t{\n\t\t\tscanf(\"%lld\",&dnval[i][j]);\n\t\t\tint idu=getid(i,j),idv=getid(i+1,j);\n\t\t\tadd(idu,idv,dnval[i][j]);\n\t\t\tadd(idv,idu,dnval[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n+1;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tscanf(\"%lld\",&rgval[i][j]);\n\t\t\tint idu=getid(i,j),idv=getid(i,j+1);\n\t\t\tadd(idu,idv,rgval[i][j]);\n\t\t\tadd(idv,idu,rgval[i][j]);\n\t\t}\n\t}\n\tdijkstra(getid(1,1));\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) if(a[i][j]==1&&!vis[getid(i,j)]) dfs(getid(i,j));\n\tesum=0;\n\tmemset(h,0,sizeof(h));\n\tfor(int i=1;i<=n+1;i++)\n\t{\n\t\tfor(int j=1;j<=m+1;j++)\n\t\t{\n\t\t\tint bg=(getid(i,j)-1)*4;\n\t\t\tint _0=bg+1,_1=bg+2,_2=bg+3,_3=bg+4;\n\t\t\tif(!dntag[i-1][j]&&a[i-1][j-1]==0&&a[i-1][j]==0) add(_0,_1,0);\n\t\t\tif(!rgtag[i][j]&&a[i-1][j]==0&&a[i][j]==0) add(_1,_2,0);\n\t\t\tif(!dntag[i][j]&&a[i][j]==0&&a[i][j-1]==0) add(_2,_3,0);\n\t\t\tif(!rgtag[i][j-1]&&a[i][j-1]==0&&a[i-1][j-1]==0) add(_3,_0,0);\n\t\t\tif(i>1)\n\t\t\t{\n\t\t\t\tint ubg=(getid(i-1,j)-1)*4;\n\t\t\t\tint u2=ubg+3,u3=ubg+4;\n\t\t\t\tadd(u2,_1,dnval[i-1][j]);\n\t\t\t\tadd(_0,u3,dnval[i-1][j]);\n\t\t\t}\n\t\t\tif(j>1)\n\t\t\t{\n\t\t\t\tint lbg=(getid(i,j-1)-1)*4;\n\t\t\t\tint l1=lbg+2,l2=lbg+3;\n\t\t\t\tadd(l1,_0,rgval[i][j-1]);\n\t\t\t\tadd(_3,l2,rgval[i][j-1]);\n\t\t\t}\n\t\t}\n\t}\n\tdijkstra(2);\n\tprintf(\"%lld\\n\",dis[4]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1658288443,
        "uid": 251130,
        "name": "lovely_ckj",
        "ccfLevel": 0,
        "title": "P6545 [CEOI2014] The Wall \u505a\u9898\u8bb0\u5f55 & \u9898\u89e3"
    },
    {
        "content": "\u4e0b\u9762\u8bbe $(i, j)$ \u7684\u5de6\u4e0a\u89d2\u4e3a $(i - 1, j - 1)$\uff0c\u53f3\u4e0a\u89d2\u4e3a $(i - 1, j)$\uff0c\u505a\u4e0b\u89d2\u4e3a $(i, j - 1)$\uff0c\u53f3\u4e0b\u89d2\u4e3a $(0, 0)$\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u6ce8\u610f\u5230\u5982\u4e0b\u7ed3\u8bba\uff1a\n\n- $(0, 0)$ \u5230\u5176\u4ed6\u6240\u6709\u5173\u952e\u70b9\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u5728\u5899\u5185\uff08\u53ef\u80fd\u4f4d\u4e8e\u8fb9\u754c\uff09\u3002\n\n\u8bc1\u660e\uff1a\u5982\u679c\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u628a\u5916\u9762\u7684\u4e00\u6bb5\u66ff\u6362\u6210\u5230\u5b83\u5de6\u4e0a\u89d2\u7684\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\u4e0d\u52a3\u3002\n\n\u4e8e\u662f\u8003\u8651\u5148\u628a $(0, 0)$ \u5230\u6240\u6709\u5173\u952e\u70b9\u7684\u6700\u77ed\u8def\u8dd1\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5173\u952e\u70b9\u6293\u51fa\u5b83\u5230 $(0, 0)$ \u7684\u4e00\u6761\u6700\u77ed\u8def\uff0c\u5219\u6211\u4eec\u73b0\u5728\u9700\u8981\uff1a\n\n- \u6c42\u4e00\u4e2a\u6700\u5c0f\u7684\u5305\u542b $(0, 0)$ \u7684\u73af\uff0c\u6ee1\u8db3\u73af\u90fd\u5305\u542b\u4e86\u6240\u6709\u5173\u952e\u70b9\u548c\u4e0a\u6587\u627e\u51fa\u7684\u6700\u77ed\u8def\u3002\n\n\u8003\u8651\u62c6\u70b9\uff0c\u7528 $(i, j, 1)$ \u8868\u793a $(i, j)$ \u5de6\u4e0a\u65b9\u4e00\u70b9\u70b9\u7684\u4f4d\u7f6e\uff0c$(i, j, 2)$ \u8868\u793a $(i, j)$ \u53f3\u4e0a\u65b9\u4e00\u70b9\u70b9\u7684\u4f4d\u7f6e\uff0c$(i, j, 3)$ \u8868\u793a $(i, j)$ \u53f3\u4e0b\u65b9\u4e00\u70b9\u70b9\u7684\u4f4d\u7f6e\uff0c$(i, j, 4)$ \u8868\u793a $(i, j)$ \u5de6\u4e0b\u65b9\u4e00\u70b9\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u5efa\u56fe\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u540c\u4e00\u4e2a $(i, j)$ \u7684 $(1, 2), (2, 3), (3, 4), (4, 1)$ \u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $0$\u3002\u6b64\u65f6\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u8de8\u8fc7\u7684\u8fb9\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u4e14\u5bf9\u5e94\u7684\u4e24\u4e2a\u70b9\u4e0d\u662f\u5173\u952e\u70b9\u3002\n- $(i, j)$ \u4e0e\u65c1\u8fb9\u7684 $(i', j')$ \u7684 $(1, 4), (2, 1), (3, 2), (4, 3)$ \u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u5b83\u8d34\u7740\u7684\u90a3\u4e2a\u4f4d\u7f6e\u7684\u8fb9\u6743\u3002\u6b64\u65f6\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u70b9\u4e0d\u662f\u5173\u952e\u70b9\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u4e2a\u73af\u4e00\u5b9a\u4f1a\u4ece $(0, 0, 1)$ \u51fa\u53d1\uff0c\u6700\u540e\u901a\u8fc7 $(0, 0, 4)$ \u56de\u5230\u8d77\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u4ee5 $(0, 0, 1)$ \u4e3a\u6e90\u70b9\u6c42\u5176\u5230 $(0, 0, 4)$ \u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm \\log nm)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <queue>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n\tint dis;\n} Edge;\n\ntypedef struct Node_tag {\n\tll dis;\n\tint pos;\n\tNode_tag(ll dis_, int pos_){\n\t\tdis = dis_;\n\t\tpos = pos_;\n\t}\n} Node;\n\nint cnt;\nint id1[407][407], refx[160807], refy[160807], down[407][407], head[643207], rt[407][407], id2[407][407][7];\nll dis1[160807], dis2[643207];\nbool mark[407][407], vis1[643207], vis2[160807], insidex[407][407], insidey[407][407];\nEdge edge[2569617];\npriority_queue<Node> q;\n\nbool operator <(const Node a, const Node b){\n\treturn a.dis > b.dis;\n}\n\ninline void init(int n, ll dis[]){\n\tcnt = 0;\n\tfor (register int i = 1; i <= n; i++){\n\t\thead[i] = 0;\n\t\tdis[i] = 0x7fffffffffffffffll;\n\t\tvis1[i] = false;\n\t}\n}\n\ninline void add_edge(int start, int end, int dis){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n\tedge[cnt].dis = dis;\n}\n\ninline void dijkstra(int start, ll dis[]){\n\tdis[start] = 0;\n\tq.push(Node(0, start));\n\twhile (!q.empty()){\n\t\tint cur = q.top().pos;\n\t\tq.pop();\n\t\tif (vis1[cur]) continue;\n\t\tvis1[cur] = true;\n\t\tfor (register int i = head[cur]; i != 0; i = edge[i].nxt){\n\t\t\tint x = edge[i].end;\n\t\t\tll y = dis[cur] + edge[i].dis;\n\t\t\tif (dis[x] > y){\n\t\t\t\tdis[x] = y;\n\t\t\t\tq.push(Node(y, x));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid dfs(int u){\n\tvis2[u] = true;\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (dis1[u] == dis1[x] + edge[i].dis){\n\t\t\tif (refx[u] == refx[x]){\n\t\t\t\tinsidex[refx[u]][max(refy[u], refy[x])] = true;\n\t\t\t} else {\n\t\t\t\tinsidey[refy[u]][max(refx[u], refx[x])] = true;\n\t\t\t}\n\t\t\tif (!vis2[x]) dfs(x);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main(){\n\tint n, m, cnt1 = 0, cnt2 = 0;\n\tcin >> n >> m;\n\tfor (register int i = 0; i <= n; i++){\n\t\tfor (register int j = 0; j <= m; j++){\n\t\t\tcnt1++;\n\t\t\tid1[i][j] = cnt1;\n\t\t\trefx[cnt1] = i;\n\t\t\trefy[cnt1] = j;\n\t\t}\n\t}\n\tinit(cnt1, dis1);\n\tfor (register int i = 1; i <= n; i++){\n\t\tfor (register int j = 1; j <= m; j++){\n\t\t\tint a;\n\t\t\tcin >> a;\n\t\t\tif (a == 1) mark[i][j] = true;\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tfor (register int j = 0; j <= m; j++){\n\t\t\tcin >> down[i][j];\n\t\t\tadd_edge(id1[i - 1][j], id1[i][j], down[i][j]);\n\t\t\tadd_edge(id1[i][j], id1[i - 1][j], down[i][j]);\n\t\t}\n\t}\n\tfor (register int i = 0; i <= n; i++){\n\t\tfor (register int j = 1; j <= m; j++){\n\t\t\tcin >> rt[i][j];\n\t\t\tadd_edge(id1[i][j - 1], id1[i][j], rt[i][j]);\n\t\t\tadd_edge(id1[i][j], id1[i][j - 1], rt[i][j]);\n\t\t}\n\t}\n\tdijkstra(id1[0][0], dis1);\n\tfor (register int i = 0; i < n; i++){\n\t\tfor (register int j = 0; j < m; j++){\n\t\t\tif (!vis2[id1[i][j]] && mark[i + 1][j + 1]) dfs(id1[i][j]);\n\t\t}\n\t}\n\tfor (register int i = 0; i <= n; i++){\n\t\tfor (register int j = 0; j <= m; j++){\n\t\t\tfor (register int k = 1; k <= 4; k++){\n\t\t\t\tid2[i][j][k] = ++cnt2;\n\t\t\t}\n\t\t}\n\t}\n\tinit(cnt2, dis2);\n\tfor (register int i = 0; i <= n; i++){\n\t\tfor (register int j = 0; j <= m; j++){\n\t\t\tif (!insidey[j][i] && !mark[i][j] && !mark[i][j + 1]){\n\t\t\t\tadd_edge(id2[i][j][1], id2[i][j][2], 0);\n\t\t\t\tadd_edge(id2[i][j][2], id2[i][j][1], 0);\n\t\t\t}\n\t\t\tif (!insidex[i][j + 1] && !mark[i][j + 1] && !mark[i + 1][j + 1]){\n\t\t\t\tadd_edge(id2[i][j][2], id2[i][j][3], 0);\n\t\t\t\tadd_edge(id2[i][j][3], id2[i][j][2], 0);\n\t\t\t}\n\t\t\tif (!insidey[j][i + 1] && !mark[i + 1][j + 1] && !mark[i + 1][j]){\n\t\t\t\tadd_edge(id2[i][j][3], id2[i][j][4], 0);\n\t\t\t\tadd_edge(id2[i][j][4], id2[i][j][3], 0);\n\t\t\t}\n\t\t\tif (!insidex[i][j] && !mark[i + 1][j] && !mark[i][j] && (i != 0 || j != 0)){\n\t\t\t\tadd_edge(id2[i][j][4], id2[i][j][1], 0);\n\t\t\t\tadd_edge(id2[i][j][1], id2[i][j][4], 0);\n\t\t\t}\n\t\t\tif (i > 0 && !mark[i][j]){\n\t\t\t\tadd_edge(id2[i][j][1], id2[i - 1][j][4], down[i][j]);\n\t\t\t\tadd_edge(id2[i - 1][j][4], id2[i][j][1], down[i][j]);\n\t\t\t}\n\t\t\tif (j < m && !mark[i][j + 1]){\n\t\t\t\tadd_edge(id2[i][j][2], id2[i][j + 1][1], rt[i][j + 1]);\n\t\t\t\tadd_edge(id2[i][j + 1][1], id2[i][j][2], rt[i][j + 1]);\n\t\t\t}\n\t\t\tif (i < n && !mark[i + 1][j + 1]){\n\t\t\t\tadd_edge(id2[i][j][3], id2[i + 1][j][2], down[i + 1][j]);\n\t\t\t\tadd_edge(id2[i + 1][j][2], id2[i][j][3], down[i + 1][j]);\n\t\t\t}\n\t\t\tif (j > 0 && !mark[i + 1][j]){\n\t\t\t\tadd_edge(id2[i][j][4], id2[i][j - 1][3], rt[i][j]);\n\t\t\t\tadd_edge(id2[i][j - 1][3], id2[i][j][4], rt[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\tdijkstra(id2[0][0][1], dis2);\n\tcout << dis2[id2[0][0][4]];\n\treturn 0;\n}\n```",
        "postTime": 1680085315,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6545 \u3010[CEOI2014] The Wall\u3011"
    }
]