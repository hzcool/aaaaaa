[
    {
        "content": "\u7b2c\u4e00\u95ee\u8003\u8651\u6700\u77ed\u8def\u3002\u5bf9\u4e8e\u6bcf\u6761\u7ebf\u8def\u5efa\u4e00\u4e2a\u70b9\uff0c\u7ebf\u8def\u4e0a\u7684\u7ad9\u5411\u7ebf\u8def\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u7ebf\u8def\u5411\u7ebf\u8def\u4e0a\u7684\u7ad9\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\u56e0\u4e3a\u8fb9\u6743\u53ea\u6709 $0$ \u548c $1$ \u6240\u4ee5\u53ef\u4ee5 BFS\u3002\n\n\u7b2c\u4e8c\u95ee\u8003\u8651\u4e00\u4e2a DP\u3002\u8bbe $dp_i$ \u8868\u793a\u5230\u8fbe $i$ \u65f6\u6700\u591a\u4e58\u5750\u591a\u5c11\u5206\u949f\u7684\u5730\u94c1\u3002\n\n\u5047\u8bbe\u4e00\u6761\u7ebf\u8def\u7684 $dis$ \u4e3a $d$\uff0c\u5219\u6211\u4eec\u53ef\u80fd\u5728 $dis$ \u4e3a $d-1$ \u7684\u7ad9\u4e0a\u8f66\uff0c\u5728 $dis$ \u4e3a $d$ \u7684\u7ad9\u4e0b\u8f66\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528 $dis$ \u4e3a $d-1$ \u7684\u7ad9\u66f4\u65b0 $dis$ \u4e3a $d$ \u7684\u7ad9\u3002\n\n\u628a\u6240\u6709\u7ebf\u8def\u6309 $dis$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6761\u7ebf\u8def\u8f6c\u79fb\uff1a$dp_j\\leftarrow dp_i+dis(i,j)\\;(dis_i=d-1,dis_j=d)$\u3002\u8bb0\u4e00\u4e0b\u524d\u540e\u7f00\u6700\u5927\u503c\u5373\u53ef $\\mathcal{O}(L)$ \u8f6c\u79fb\u3002\n\n```cpp\n// ===================================\n//   author: M_sea\n//   website: http://m-sea-blog.com/\n// ===================================\n#include <bits/stdc++.h>\n#define re register\nusing namespace std;\n \ninline int read() {\n    int X=0,w=1; char c=getchar();\n    while (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n    while (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n    return X*w;\n}\n\nconst int N=400000+10,M=1600000+10;\n\nint n,m,s,t; char tmp[50];\nmap<string,int> id; int tot=0;\nvector<int> vec[N];\n\nstruct edge { int v,w,nxt; } e[M];\nint head[N];\ninline void addEdge(int u,int v,int w) {\n    static int cnt=0;\n    e[++cnt]=(edge){v,w,head[u]},head[u]=cnt;\n}\n\nint dis[N],mx[N],pre[N],suf[N],p[N];\ninline int cmp(int x,int y) { return dis[x+n]<dis[y+n]; }\ninline void bfs() {\n    memset(dis,-1,sizeof(dis)),dis[s]=0;\n    deque<int> Q; Q.push_back(s);\n    while (!Q.empty()) {\n        int u=Q.front(); Q.pop_front();\n        for (re int i=head[u];i;i=e[i].nxt) {\n            int v=e[i].v,w=e[i].w; if (~dis[v]) continue;\n            if (w) dis[v]=dis[u]+w,Q.push_back(v);\n            else dis[v]=dis[u],Q.push_front(v);\n        }\n    }\n}\ninline void solve() {\n    for (re int i=1;i<=m;++i) p[i]=i;\n    sort(p+1,p+m+1,cmp);\n    int r=0;\n    while (r<m&&dis[p[r+1]+n]<=0) ++r;\n    for (re int i=1;i<=m;++i) {\n        int l=r+1;\n        while (r<m&&dis[p[r+1]+n]==i) ++r;\n        for (re int j=l;j<=r;++j) {\n            int u=p[j],l=vec[u].size()-1;\n            pre[0]=-2e9;\n            for (re int k=1;k<=l;++k) {\n                int v=vec[u][k]; pre[k]=pre[k-1]+1;\n                if (dis[v]==i-1) pre[k]=max(pre[k],mx[v]);\n            }\n            suf[l+1]=-2e9;\n            for (re int k=l;k>=1;--k) {\n                int v=vec[u][k]; suf[k]=suf[k+1]+1;\n                if (dis[v]==i-1) suf[k]=max(suf[k],mx[v]);\n            }\n            for (re int k=1;k<=l;++k) { int v=vec[u][k];\n                if (dis[v]==i) mx[v]=max(mx[v],max(pre[k],suf[k]));\n            }\n        }\n    }\n}\n\nint main() {\n    m=read(),n=read();\n    for (re int i=1;i<=n;++i) {\n        scanf(\"%s\",tmp);\n        if (!id[tmp]) id[tmp]=++tot;\n    }\n    for (re int i=1;i<=m;++i) {\n        int k=read(); vec[i].push_back(0);\n        for (re int j=1;j<=k;++j) {\n            scanf(\"%s\",tmp); vec[i].push_back(id[tmp]);\n            addEdge(id[tmp],i+n,1),addEdge(i+n,id[tmp],0);\n        }\n    }\n    scanf(\"%s\",tmp),s=id[tmp];\n    scanf(\"%s\",tmp),t=id[tmp];\n    bfs(); printf(\"%d\\n\",dis[t]);\n    solve(); printf(\"%d\\n\",mx[t]);\n    return 0;\n}\n```",
        "postTime": 1599292817,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6096 \u3010[JSOI2015]\u5730\u94c1\u7ebf\u8def\u3011"
    },
    {
        "content": "&emsp;&emsp;[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6096)\n\n&emsp;&emsp;\u56fe\u8bba\u5efa\u6a21\u4f18\u79c0\u9898\u3002\u89e3\u6cd5\u5176\u5b9e\u5f88\u5de7\u5999\uff0c\u4f46\u662f\u5207\u6389\u4e00\u9053\u9898\u540e\u53ea\u6709\u6df1\u5165\u601d\u8003\u662f\u5982\u4f55\u60f3\u5230\u8fd9\u4e2a\u505a\u6cd5\u7684\uff0c\u8fd9\u9053\u9898\u76ee\u624d\u662f\u771f\u6b63\u6709\u610f\u4e49\u7684\n\n&emsp;&emsp;\u8003\u8651\u5904\u7406\u7ebf\u8def\uff0c\u540c\u4e00\u7ebf\u8def\u4e0a\u7684\u6240\u6709\u70b9\u82b1\u8d391\u4ee3\u4ef7\u76f8\u4e92\u53ef\u8fbe\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u5bf9\u6bcf\u4e2a\u70b9\u53bb\u548c\u4e0e\u4ed6\u540c\u4e00\u7ebf\u8def\u4e0a\u7684\u70b9\u8fde\u8fb9\uff0c\u56e0\u4e3a $\\sum l_i <= 8*10^5$\uff0c\u4e5f\u5c31\u662f\u610f\u5473\u7740\u8fb9\u6570\u53ef\u80fd\u5230\u8fbe $64*10^{10}$\uff0c\u8003\u8651\u4f60\u9009\u4e24\u4e2a\u70b9\uff0c\u5b83\u4eec\u5176\u5b9e\u4f1a\u548c\u5269\u4e0b\u7684\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4**\u4e00\u6761\u7ebf\u8def\u91cc\u4f1a\u6709\u5f88\u591a\u4e2a\u7ad9\u8fde\u4e00\u4e2a\u76f8\u540c\u7684\u7ad9**\uff0c\u8003\u8651\u628a\u6240\u6709\u8fde\u63a5 $i$ \u7684\u8fb9\u5408\u5e76\u6210\u4e00\u6761\u8fb9\uff0c\u4f46\u662f\u5b83\u4eec\u7ec8\u70b9\u76f8\u540c\u5374\u53c8\u8d77\u70b9\u4e0d\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u5f00\u4e00\u4e2a\u201c\u865a\u70b9\u201d\uff0c\u6240\u6709\u70b9\u53bb\u8fde\u8fd9\u4e2a\u865a\u70b9\uff0c\u8fb9\u6743\u4e3a1\uff0c\u865a\u70b9\u548c\u6240\u6709\u7684\u8be5\u7ebf\u8def\u4e0a\u7684\u70b9\uff08\u8fb9\u6743\u4e3a0\uff09\u76f8\u8fde\u5c31\u53ef\u4ee5\u4e86\u3002\u770b\u4e0a\u53bb\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u8981\u5f00\u4e00\u4e2a\u5bf9\u5e94\u7684\u865a\u70b9\uff1f\u7136\u800c\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u865a\u70b9\u90fd\u88ab\u8be5\u7ebf\u8def\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u4e5f\u8fde\u63a5\u8be5\u7ebf\u8def\u6240\u6709\u70b9\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u628a**\u8fd9\u4e9b\u865a\u70b9\u5408\u5e76\u6210\u4e00\u4e2a**\u3002\u6b64\u65f6\u5c31\u6ee1\u8db3\u4e86\u540c\u4e00\u7ebf\u8def\u4e0a\u6240\u6709\u70b9\u82b1\u8d391\u4ee3\u4ef7\u76f8\u4e92\u53ef\u8fbe\u7684\u9898\u610f\u3002\n\n&emsp;&emsp;\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u663e\u7136\u5c31\u662f\u6700\u77ed\u8def\u3002\u8003\u8651 $i$ \u7684\u4e0a\u4e00\u4e2a\u70b9 $j$ \u6ee1\u8db3 $dis_j=dis_i-1$ \u7684\u70b9\u8f6c\u79fb\uff08\u56e0\u4e3a\u4f60\u8981\u4ece\u70b9 $j$ \u4e0a\u5730\u94c1\u82b1\u8d391\uff09\uff0c\u6392\u5e8f\u540e DP\uff08\u8fd9\u4e2a\u5012\u4e0d\u96be\u60f3\uff0c\u505a\u8fc7\u56fe\u4e0aDP\u7c7b\u7684\uff08\u6bd4\u5982\u901b\u516c\u56ed\uff0c\u5927\u9646\u4e89\u9738\uff09\u90fd\u5e94\u8be5\u660e\u767d\uff09\uff0c\u800c\u4e14\u8fd9\u91cc\u6ca1\u6709\u7b49\u4e8e\u53f7\u65b9\u4fbf\u4e86\u5f88\u591a\u3002\u8fd9\u4e2a\u67ff\u5b50\u663e\u7136\u610f\u5473\u7740 $i,j$ \u4f4d\u4e8e\u540c\u4e00\u6761\u5730\u94c1\u4e0a\uff0c\u6240\u4ee5**\u4e00\u4e2a\u70b9\u53ea\u4f1a\u88ab\u548c\u4ed6\u5728\u540c\u4e00\u4e2a\u5730\u94c1\u4e0a\u4e14 $dis$ \u6bd4\u4ed6\u5c111\u7684\u70b9\u8f6c\u79fb**\uff0c\u8fd9\u4e2a\u67ff\u5b50\u53c8\u610f\u5473\u7740\u8fd9\u6761\u5730\u94c1\u7684\u865a\u70b9\u7684\u6700\u77ed\u8def = \u70b9 $i$ \u7684\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u5bf9 $n$ \u4e2a\u865a\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u94c1\u8def\u4e0a\u8f6c\u79fb\u6240\u6709\u6700\u77ed\u8def = \u865a\u70b9\u6700\u77ed\u8def\u7684\u70b9\u5373\u53ef\u3002\n\n&emsp;&emsp;\u6b64\u65f6\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u8f6c\u79fb\u70b9\u5728\u5f53\u524d\u70b9\u4e4b\u524d/\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u5206\u6790\u4e4b\u524d\uff08\u4e4b\u540e\u7684\u5206\u6790\u662f\u4e00\u6837\u7684\uff09\uff0c\u8bbe\u5f53\u524d\u70b9\u662f $i$\uff0c\u4f60\u7ef4\u62a4\u7684\u662f $1..i-1$ \u7ad9\u4e2d\u6ee1\u8db3 $dis_j = dis_i-1$ \u4e14 $f(j)+i-j$ \u6700\u5927\u7684 $j$\uff0c\u5982\u679c\u4f60\u5b66\u8fc7\u591a\u91cd\u80cc\u5305\u4f18\u5316\u5355\u8c03\u961f\u5217\u8fd9\u79cd\uff0c\u4f60\u5c31\u4f1a\u7acb\u523b\u53d1\u73b0\u4e0d\u7ba1 $j$ \u9009\u4ec0\u4e48 $+i$ \u90fd\u4e0d\u53d8\uff0c\u56e0\u6b64\u7ef4\u62a4\u7684\u5176\u5b9e\u662f $1..i-1$ \u4e2d $f(j)-j$ \u6700\u5927\u7684\uff0c\u8fd9\u4e2a\u67ff\u5b50\u662f\u72ec\u7acb\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u4e2a\u70b9\u7684\u8f6c\u79fb\u5c31\u90fd\u662f $O(1)$ \u7684\uff0c\u53c8\u56e0\u4e3a\u6240\u6709\u94c1\u8def\u7684\u70b9\u6570\u4e4b\u548c $L<=8e5$\uff0c\u6240\u4ee5DP\u8fd9\u91cc $O(L)$ \u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u5168\u53ef\u4ee5\u8dd1\u7684\u98de\u5feb\uff08\u4e3b\u8981\u590d\u6742\u5ea6\u8fd8\u662f\u5728\u6700\u77ed\u8def\u90a3\u91cc\uff0c\u6211\u5199\u4e86Dij\uff0c\u5199BFS\u53ef\u4ee5\u5feb\u4e00\u70b9\uff09\n\n&emsp;&emsp;\u5728\u4e00\u5f00\u59cb\u7684\u5efa\u56fe\u4e2d\uff0c\u6211\u548c M_sea \u795e\u4ed9\u7684\u65b9\u6cd5\u662f\u4e00\u6837\u7684\u3002\u4e8b\u5b9e\u4e0a\u6839\u636e\u6211\u4eec\u521a\u624d\u7684\u5206\u6790\uff0c\u5b8c\u5168\u53ef\u4ee5\u6539\u6210\u201c\u6240\u6709\u70b9\u53bb\u7ec3\u865a\u70b9\u7684\u8fb9\u6743\u4e3a0\uff0c\u865a\u70b9\u8fde\u6240\u6709\u70b9\u7684\u8fb9\u6743\u4e3a1\u201d\uff08\u5373\u53cd\u4e00\u4e0b\uff09\uff0c\u7136\u540eDP\u7684\u65f6\u5019\u5176\u5b9e\u662f\u8f6c\u79fb\u94c1\u8def\u4e0a\u6240\u6709\u6700\u77ed\u8def=\u865a\u70b9\u6700\u77ed\u8def+1\u7684\u70b9\uff0c\u800c\u4e0a\u6587\u4e2d $j$ \u7684\u6761\u4ef6\u4e5f\u53d8\u6210\u4e86\u70b9 $j$ \u7684\u6700\u77ed\u8def\u548c\u865a\u70b9\u6700\u77ed\u8def\u76f8\u7b49\u3002\u4f60\u53ef\u4ee5\u628a\u5f00\u59cb\u7684\u65b9\u6cd5\u770b\u4f5c\u82b1\u94b1\u4e0a\u5730\u94c1\u7136\u540e\u4e0b\u5730\u94c1\u4e0d\u8981\u94b1\uff0c\u8fd9\u79cd\u5efa\u56fe\u65b9\u6cd5\u770b\u6210\u5148\u4e0a\u8f66\u4e0b\u8f66\u8865\u7968\uff0c\u672c\u8d28\u4e0a\u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\u3002\u5982\u679c\u4f60\u770b\u61c2\u4e86\u524d\u9762\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u4e00\u4e0b\u53cd\u5e94\u8fc7\u6765\u7684\u3002\n\n&emsp;&emsp;\u867d\u7136\u8fd9\u9898DP\u662f\u91cd\u5934\u620f\u4f46\u662f\u8fd9\u9898DP\u505a\u6cd5\u6211\u89c9\u5f97\u5e26\u7ed9\u6211\u4eec\u7684\u5e2e\u52a9\u5176\u5b9e\u5e76\u4e0d\u662f\u5f88\u5927\uff0c\u53cd\u800c\u662f\u5efa\u56fe\u65b9\u6cd5\u503c\u5f97\u597d\u597d\u63e3\u6469\u3002\n\n&emsp;&emsp;~~\u4f46\u662f\u6211\u77e5\u9053\u4f60\u4eec\u90fd\u53ea\u4f1a\u770bCode\u7684~~\n\n```cpp\n//JSOI,2015\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<queue>\n#include<string>\nusing namespace std;\nconst int MAXN=4e5+10,MAXM=2e6+10,INF=1e9;\nstruct Edge{\n\tint u,v,w;\n};\nstruct Node{\n\tint u,dis;\n\tbool operator<(const Node& n2)const{\n\t\treturn dis > n2.dis;\n\t}\n};\nstruct Line{\n\tint u,d;\n\tbool operator<(const Line& n2)const{\n\t\treturn d < n2.d; \n\t} \n}Lines[MAXN];\nmap<string,int>fs;\nEdge edge[MAXM];\nint first[MAXN],next[MAXM],tot;\nint dis[MAXN],vis[MAXN],f[MAXN],point[MAXN];\nint lines,n;\ninline void addedge(int u,int v,int w){\n\tedge[++tot].u=u;edge[tot].v=v;edge[tot].w=w;\n\tnext[tot]=first[u];first[u]=tot;\n}\ninline int getstation(int u){\n\treturn u+n;\n}\nvoid dijkstra(int s){\n\tfor(int i=1;i<=lines+n;i++){\n\t\tdis[i] = INF;\n\t}\n\tdis[s] = 0;\n\tpriority_queue<Node>h;h.push((Node){s,0});\n\twhile(!h.empty()){\n\t\tNode now = h.top();h.pop();\n\t\tint u = now.u;\n\t\tif(vis[u])continue;\n\t\tvis[u] = 1;\n\t\tfor(int j=first[u];j;j=next[j]){\n\t\t\tint v = edge[j].v;\n\t\t\tif(dis[v] > dis[u]+edge[j].w){\n\t\t\t\tdis[v] = dis[u]+edge[j].w;\n\t\t\t\th.push((Node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&lines,&n);\n\tstring tmpname;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>tmpname;fs[tmpname]=i;\n\t}\n\tfor(int i=1,l;i<=lines;i++){\n\t\tscanf(\"%d\",&l);\n\t\tfor(int j=1;j<=l;j++){\n\t\t\tcin>>tmpname;\n\t\t\tint u = getstation(i),v = fs[tmpname];\n\t\t\taddedge(v,u,0);//\u4e0a\u8f66\n\t\t\taddedge(u,v,1);//\u4e0b\u8f66 \n\t\t}\n\t}\n\tstring startname,endname;\n\tcin>>startname>>endname;\n\tint s = fs[startname],e = fs[endname];\n\tdijkstra(s);\n\tif(dis[e]==INF){\n\t\tprintf(\"-1\\n0\");return 0;\n\t}\n\tprintf(\"%d\\n\",dis[e]);\n\tfor(int i=1;i<=lines;i++){\n\t\tLines[i] = (Line){getstation(i),dis[getstation(i)]};\n\t}\n\tsort(Lines+1,Lines+1+lines);\n\tfor(int i=1;i<=n;i++)f[i]=-INF;\n\tf[s]=0;\n\tfor(int i=1;i<=lines;i++){\n\t\tint u = Lines[i].u;\n\t\tif(dis[u]==INF)break;\n\t\tint rear = 0;\n\t\tfor(int j=first[u];j;j=next[j]){\n\t\t\tint v = edge[j].v;\n\t\t\tpoint[++rear] = v;\n\t\t}\n\t\tint maxn = 0;\n\t\tfor(int j=1;j<=rear;j++){\n\t\t\tint v = point[j];\n\t\t\tif(dis[v]==dis[u]+1){\n\t\t\t\tif(maxn!=0){\n\t\t\t\t\tf[v] = max(f[v],f[point[maxn]]+j-maxn);\n\t\t\t\t}\n\t\t\t}else if(dis[v]==dis[u]){\n\t\t\t\tif(maxn){\n\t\t\t\t\tif(f[point[maxn]]-maxn < f[point[j]]-j)maxn=j;\n\t\t\t\t}else{\n\t\t\t\t\tmaxn=j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaxn = 0;\n\t\t//\u8f6c\u79fb\u524d\u7f00 \n\t\tfor(int j=rear;j>=1;j--){\n\t\t\tint v = point[j];\n\t\t\tif(dis[v]==dis[u]+1){\n\t\t\t\tif(maxn!=0){\n\t\t\t\t\tf[v] = max(f[v],f[point[maxn]]+maxn-j);\n\t\t\t\t}\n\t\t\t}else if(dis[v]==dis[u]){\n\t\t\t\tif(maxn){\n\t\t\t\t\tif(f[point[maxn]]+maxn < f[point[j]]+j)maxn=j;\n\t\t\t\t}else{\n\t\t\t\t\tmaxn=j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",f[e]);\n\treturn 0;\n}\n```\n",
        "postTime": 1603971905,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010JSOI2015\u3011\u5730\u94c1\u7ebf\u8def"
    }
]