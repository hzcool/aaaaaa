[
    {
        "content": "\t\tS \u5411\u6b63\u6743\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff1b\u8d1f\u6743\u70b9\u5411 T \u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\u7edd\u5bf9\u503c\uff0c\n\n\t\tx->y \u7684\u9650\u5236\u5c31\u76f4\u63a5\u5efa x->y\u3002\u6700\u540e\u62ff\u6b63\u6743\u548c-\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\u3002\n    \n    \n\u8fd9\u662f\u795e\u4ed9\u51fa\u9898\u4eba\u7684\u65b9\u6cd5\uff0c\u6211\u6765\u7ed9\u4e00\u4e2a\u5b8c\u6574\u7684\u6b63\u786e\u6027\u8bc1\u660e\u3002\n\n#### \u8bc1\u660e\n\n\u82e5\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\u8fde\u7684 x, y \u70b9\u6743\u4e0d\u540c\u53f7\uff0c\u5728\u53d6\u4e86\u5176\u4e2d\u6b63\u7684\u90a3\u4e2a\u540e\uff0c\u8981\u4e48\u653e\u5f03\u6b63\u7684\uff0c\u8981\u4e48\u53d6\u4e86\u8d1f\u7684\uff0c\u8981\u4e48\u51cf\u5c11 dXY\uff0c\u4e0e\u8fde\u8fb9\u65b9\u5f0f\u7684\u6700\u5c0f\u5272\u76f8\u540c\u3002\n\n\u5982\u679c\u540c\u53f7\u4f1a\u600e\u6837\u5462\uff1f\n\n\u6211\u4eec\u4efb\u610f\u9009\u4e24\u4e2a\u540c\u53f7\u70b91, 2\uff0c\u8fde\u8fb92->1\uff0c\u90091\u7684\u4efb\u610f\u4e00\u6761\u5230T\u7684\u8def\u5f841->3->T\u3002\uff08\u5982\u679c\u6ca1\u6709\u8fd9\u6761\u8def\u5f84\u90a3\u4e481\uff0c2\u5e38\u89c4\u90fd\u9009\uff08\u8d1f\u70b9\u6743\u5219\u4e0d\u9009\uff09\u7b54\u6848\u4e0d\u53d7\u5f71\u54cd\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/39g9abdt.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8fb9a, x, y\u4e2d\u81f3\u5c11\u6709\u4e00\u6761\u5220\u6389\u3002\n\n##### 1. \u5220x\u6216y\uff1a\n\n1\uff0c2\u4ecd\u7136\u90fd\u9009\uff0c\u4e14\u4e0d\u7528\u5272\u53bb\u5176\u5b83\u8fb9\uff0c\u7b54\u6848\u4e0d\u53d7\u5f71\u54cd\u3002\n\n##### 2. \u5220a\uff1a\n\n1\u4e0d\u9009\u4e86\uff0c\u8fd9\u65f6\u8981\u4e48\u4e0d\u90092\uff08\u5272b\uff09\u8981\u4e48\u635f\u5931d12\uff08\u5272c\uff09\u3002\n\n\u5982\u679c\u5272x\u6216y\u4e86\u548b\u529e\uff1f\n\n\u600e\u4e48\u53ef\u80fd\uff0c\u90a3\u6837\u8f6c\u5316\u4e3a\u4e0a\u4e00\u79cd\u60c5\u51b5\uff0ca\u5c31\u4e0d\u7528\u5272\u4e86\uff0c\u4e0d\u662f\u6700\u5c0f\u5272\u3002\n\n\u90a3\u8fd9\u6837\u7b54\u6848\u4e5f\u4e0d\u53d7\u5f71\u54cd\u4e86\u3002\n\n##### \u7efc\u4e0a\n\n\u540c\u53f7\u7684\u9650\u5236\u6761\u4ef6\u4e5f\u89e3\u51b3\u4e86\u3002\n\n#### \u8bc1\u6bd5\n\n\u6700\u540e\u8fd8\u662f\u8d34\u4e00\u4e0b\u4ee3\u7801\u5427\u3002\n\n```cpp\n//coder: Feliks*GM-YB\n#include<bits/stdc++.h>\n#define fu(i,a,b) for(register int i = a, I = (b) + 1; i < I; ++i)\n#define fd(i,a,b) for(register int i = a, I = (b) - 1; i > I; --i)\ntypedef long long ll;\nusing namespace std;\ntemplate <class T> inline void read(T &x) {\n    x=0;T f=1;char ch=getchar();\n    while(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n    while(isdigit(ch))x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    x*=f;\n}int n,m;\n#define go(x) for(int i=first[x],y=v[i];i;i=nex[i],y=v[i])\nconst int N=1e3+5;\nconst int M=1e5+5;\nint v[M],nex[M],w[M],first[N],tot=1;\ninline void add(int x,int y,int z){\n    v[++tot]=y;w[tot]=z;\n    nex[tot]=first[x];\n    first[x]=tot;\n}namespace Dinic{\n    const int s=0;\n    const int t=N-4;\n    const int inf=1e9+7;\n    int d[N],flow,ans;\n\tqueue<int> q;\n    inline bool bfs(){\n        while(!q.empty())q.pop();\n        memset(d,0,sizeof(d));\n        q.push(s);d[s]=1;\n        while(!q.empty()){\n            int x=q.front();q.pop();\n            go(x){\n                if(!w[i] || d[y])continue;\n                q.push(y);\n                d[y]=d[x]+1;\n                if(y==t)return 1;\n            }\n        }return 0;\n    }int dinic(int x,int f){\n        if(x==t)return f;\n        int res=f,k;\n        for(int i=first[x],y=v[i];i && res;i=nex[i],y=v[i]){\n            if(!w[i] || d[y]!=d[x]+1)continue;\n            k=dinic(y,min(res,w[i]));\n            if(!k)d[y]=0;\n            w[i]-=k;w[i^1]+=k;\n            res-=k;\n        }return f-res;\n    }inline void solve(int c){\n    \twhile(bfs()){\n\t\t\twhile(flow=dinic(s,inf))ans+=c*flow;\n\t\t}\n\t}\n}using namespace Dinic;\nint a[N],df;\nint main(){\n\tread(n),read(m);\n\tfu(i,1,n){\n\t\tread(a[i]);\n\t\tif(a[i]>=0)add(s,i,a[i]),add(i,s,0),ans+=a[i];\n\t\telse add(i,t,-a[i]),add(t,i,0);\n\t}fu(i,1,m){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tread(df);\n\t\tadd(x,y,df),add(y,x,0);\n\t}solve(-1);\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1586504679,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3872 \u3010[TJOI2010]\u7535\u5f71\u8ff7\u3011"
    },
    {
        "content": "# [TJOI2010]\u7535\u5f71\u8ff7\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n> \u9009\u62e9 $i$ \u83b7\u5f97 $v_i$ \u7684\u4ef7\u503c\uff0c\u9009\u62e9 $i$ \u4f46\u662f\u4e0d\u9009\u62e9 $j$ \u5931\u53bb $d_{i,j}$ \u7684\u4ef7\u503c\uff08\u4e0d\u53ef\u9006\uff09\u3002\u6c42 $\\max(\\text{\u6700\u5927\u4ef7\u503c},0)$\u3002\n\n## \u3007\u3001\u524d\u8a00\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u79cd\u65b9\u6cd5\u3002\u540c\u65f6\u8bf7\u786e\u4fdd\u4f60\u4f1a\u6700\u5927\u6d41\u7684\u57fa\u7840\u7b97\u6cd5\u548c\u4e00\u5b9a\u7684\u6700\u5c0f\u5272\u57fa\u7840\u3002\n\n## \u4e00\u3001ex\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\n### \u5efa\u56fe\n\n* $\\begin{cases}(s,x,v_x)&v_x>0\\\\(x,t,-v_x)&v_x<0\\end{cases}$\n\n* $(x,y,d_{x,y})$\u3001\n\n\u7b54\u6848 $=$ \u6b63\u6743\u70b9\u4e4b\u548c $-$ \u6700\u5c0f\u5272\n\n## \u542b\u4e49\n\n\u56e0\u4e3a\u5efa\u56fe\u7c7b\u4f3c\u4e8e\u6700\u5927\u95ed\u5408\u6743\u5b50\u56fe\uff0c\u6240\u4ee5\u542b\u4e49\u4e5f\u53ef\u4ee5\u7c7b\u6bd4\u5f97\u51fa\u3002\n\n* \u5272\u6389 $s$ \u4e0e $x$ \u7684\u8fb9\uff0c\u8868\u793a**\u4e0d\u9009\u62e9**\u6b63\u6743\u70b9 $x$\uff1b\u5272\u6389 $x$ \u4e0e $t$ \u7684\u8fb9\uff0c\u8868\u793a**\u9009\u62e9**\u8d1f\u6743\u70b9 $x$\u3002\n\n* \u5982\u679c $s$ \u4e0e $i$ \u6709\u8fb9\uff0c\u8868\u793a**\u9009\u62e9**\u6b63\u6743\u70b9 $x$\uff1b\u5982\u679c $x$ \u4e0e $t$ \u6709\u8fb9\uff0c\u8868\u793a**\u4e0d\u9009\u62e9**\u8d1f\u6743\u70b9 $x$\u3002\n\n* \u5272\u6389 $(x,y)$\uff0c\u8868\u793a\u9009\u62e9 $x$ \u4f46\u662f\u4e0d\u9009\u62e9 $y$\uff0c\u4ed8\u51fa $d_{x,y}$ \u7684\u4ee3\u4ef7\u3002\n\n\u56fe\u793a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2zcronfr.png)\n\n### \u5408\u6cd5\u6027\n\n\u5982\u679c $s$ \u4e0e $t$ \u8fde\u901a\uff0c\u5219\u5b58\u5728\u6b63\u6743\u70b9 $i$ \u548c\u8d1f\u6743\u70b9 $j$ \u4f7f\u5f97 $s$ \u5230 $i$ \u6709\u8fb9\uff0c$i$ \u5230 $j$ \u8fde\u901a\uff0c$j$ \u5230 $t$ \u6709\u8fb9\uff0c\u6240\u4ee5 $j$ \u4e00\u5b9a\u662f $i$ \u7684\u540e\u7ee7\u3002\u6839\u636e\u542b\u4e49\uff0c\u9009\u62e9 $i$ \uff0c\u4e0d\u9009\u62e9 $j$ \u5374\u4e0d\u4ed8\u51fa $d_{i,j}$ \u7684\u4ee3\u4ef7\uff0c\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u56fe\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gu8h6xsn.png)\n\n\u5982\u679c $s$ \u4e0e $t$ \u4e0d\u8fde\u901a\u3002\n\n1. \u5272\u65ad\uff08\u9009\u62e9\uff09\u4e86\u8d1f\u6743\u70b9 $j$ \u4e0e $t$ \u7684\u8fb9 $(j,t)$\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u4e86 $j$ \u7684\u524d\u9a71\u6b63\u6743\u70b9 $i$ \u548c $j$ \u3002\u6839\u636e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff0c$j$ \u7684\u524d\u9a71 $i$ \u4e0d\u4f1a\u88ab\u5272\uff0c\u540c\u65f6\u4e5f\u4e0d\u9009\u62e9\u4e2d\u95f4\u7684\u8fb9 $(i,j)$ \u3002\n2. \u5272\u65ad\u4e86 $(i,j)$ \uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u4e86\u6b63\u6743\u70b9 $i$ \uff0c\u4e0d\u9009\u62e9\u8d1f\u6743\u70b9 $j$ \uff0c\u6070\u597d\u51cf\u53bb\u4e86\u6240\u8c13\u7684\u4f53\u9a8c\u503c\u3002\n3. \u5272\u65ad\u4e86 $(s,i)$\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u4e86\u8d1f\u6743\u70b9 $j$ \uff0c\u653e\u5f03\u4e86\u6b63\u6743\u70b9 $i$\uff0c\u540c\u65f6\u4e5f\u6ca1\u6709\u51cf\u53bb\u4f53\u9a8c\u503c\u3002\n\n\u56fe\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wmfrs0uz.png)\n\n### \u6700\u4f18\u6027\n\n\u6700\u5c0f\u5272 $=$ \u4e0d\u9009\u62e9\u7684\u6b63\u6743\u70b9\u4e4b\u548c $+$ \u9009\u62e9\u7684\u8d1f\u6743\u70b9\u4e4b\u548c\u7684\u7edd\u5bf9\u503c $+$ \u51cf\u5c11\u7684 $d$\u3002\n\n\u7b54\u6848 $=$ \u9009\u62e9\u7684\u6b63\u6743\u70b9\u4e4b\u548c $+$  \u9009\u62e9\u7684\u8d1f\u6743\u70b9\u4e4b\u548c $-$ \u51cf\u5c11\u7684 $d$ \u3002\n\n\u6700\u5c0f\u5272\u4fdd\u8bc1\u4e86\u7b54\u6848\u6700\u5927\u3002\n\n\u4ee3\u7801\u770b\u522b\u7684\u535a\u5ba2\u5427\u3002\n\n## \u4e8c\u3001\u96c6\u5408\u5212\u5206\u6a21\u578b\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6700\u5c0f\u5272\u4e0d\u53ef\u4ee5\u8dd1\u8d1f\u6743\u8fb9\u3002\n\n\u7531\u4e8e\u6709\u8d1f\u6570\uff0c\u6839\u636e\u6570\u636e\u8303\u56f4\u628a\u6240\u6709\u7684\u5206\u6570 $v_x$ \u90fd\u52a0\u4e0a\u4e00\u4e2a\u5927\u6b63\u6574\u6570 $base$ \u4f7f\u5f97\u6240\u6709 $v_x$ \u90fd\u53d8\u4e3a\u6b63\u6570\u3002 \n\n\u8bbe $v'_x=v_x+base$\n\n### \u5efa\u56fe\n\n* $(s,i,v'_i),(i,t,base)$\n\n* $(i,j,d_{i,j})$\n\n\u7b54\u6848 $=$ $\\sum\\limits_{i=1}^n v_i+base\\times n-\u6700\u5c0f\u5272$\n\n### \u542b\u4e49\n\n* \u5272\u65ad $(s,i)$ \u8868\u793a $i$ \u4e0d\u9009\u62e9\uff0c\u5272\u65ad $(i\uff0ct)$ \u8868\u793a\u9009\u62e9 $i$\u3002\n\n### \u6b63\u786e\u6027\n\n\u539f\u6765\u6ca1\u6709\u52a0\u4e0a $base$ \u7684\u6b63\u6743\u7f51\u7edc\u662f\u6b63\u786e\u7684\uff0c\u52a0\u4e0a\u4ee5\u540e\u4e3a\u4ec0\u4e48\u8fd8\u662f\u5bf9\u7684\u5462\uff1f\n\n\u6839\u636e\u542b\u4e49\uff0c\u603b\u5171\u4f1a\u5272 $n$ \u6761\u4e0e $s$ \u6216\u8005 $t$ \u76f8\u63a5\u7684\u8fb9\u3002\u6240\u4ee5\u603b\u5171\u989d\u5916\u589e\u52a0\u7684 $base\\times n$\u3002\u800c\u6240\u6709\u60c5\u51b5\u90fd\u6709\u989d\u5916\u52a0\u4e0a\u4e86 $base\\times n$ \uff0c\u76f8\u5bf9\u7684\u5927\u5c0f\u5c31\u4e0d\u53d8\u4e86\u3002\n\n### Code\uff1a\n\n```cpp\n//Dinic...\n\nconst int eps=2e3;\nsigned main(){\n    rg int i,x,y,z,sum=0;\n    read(n);read(m);s=0;t=n+1;\n    for (i=1;i<=n;i++) read(x),Dinic::ins(s,i,x+eps),Dinic::ins(i,t,eps),sum+=x;\n    while (m--) read(x),read(y),read(z),Dinic::ins(x,y,z);\n    sum=sum+eps*n-Dinic::Dinic();\n    printf(\"%lld\",sum);\n    return 0;\n}\n```\n",
        "postTime": 1612339040,
        "uid": 51569,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dFkZyA0!2",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[TJOI2010]\u7535\u5f71\u8ff7"
    },
    {
        "content": "~~\u770b\u5230\u9898\u76ee\u9996\u5148\u61f5\u903c~~\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u6700\u5927\u6743\u95ed\u5408\u56fe\u7684\u6c42\u89e3\n\n### \u9898\u610f\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u7535\u5f71\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u6709\u6b63\u6709\u8d1f\uff0c\u8ba9\u4f60\u9009\u4e00\u4e9b\u70b9\uff0c\u662f\u70b9\u6743\u548c\u6700\u5927\uff0c\u5e76\u4e14\u5982\u679c\u7b97\u51fa\u6765\u7684\u6700\u5927\u503c\u4e3a\u8d1f\u6570\uff0c\u53ef\u4ee5\u4e00\u4e2a\u4e0d\u9009\u4f7f\u5f97\u7b54\u6848\u6210\u4e3a $0$\n\n### ~~\u80e1\u4e71~~\u5206\u6790\n\n\u70b9\u6743\u6709\u6b63\u6709\u8d1f\u3001\u6700\u5927\u503c\u3001\u4e0d\u80fd\u4e3a\u8d1f\u6570\uff0c\u4e00\u4e0b\u81ea\u5df1\u5c31\u80fd\u60f3\u5230\u6700\u5927\u95ed\u5408\u6743\u56fe\u3002\u4f46\u8fd9\u8ddf\u666e\u901a\u7684\u6700\u5927\u6743\u95ed\u5408\u56fe\u8fd8\u4e0d\u5927\u4e00\u6837\u3002\u666e\u901a\u7684\u6a21\u677f\u662f\u5565\u5462\uff1f\u9009\u4e86\u4e00\u4e2a\u70b9\uff0c\u4ed6\u540e\u9762\u7684\u70b9\u5fc5\u987b\u9009\uff0c\u4f46\u5728\u8fd9\u4e2a\u9898\u4e2d\u53ef\u4ee5\u4e0d\u9009\uff0c\u4f46\u662f\u8981\u4ed8\u51fa\u4e00\u5b9a\u7684\u4ee3\u4ef7\uff08\u6263\u5206\u5457\uff09\n\n\u6211\u4eec\u5728\u666e\u901a\u6700\u5927\u6743\u95ed\u5408\u56fe\u4e2d\u7684\u5904\u7406\u65b9\u5f0f\u662f\uff1a\u5728\u6b63\u6743\u70b9\u548c\u8d1f\u6743\u70b9\u4e4b\u95f4\u8fde\u5bb9\u91cf\u4e3a $inf$ \u7684\u8fb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u65ad\u8fd9\u4e9b\u8fb9\uff0c\u4ece\u800c\u4fdd\u8bc1\u67d0\u4e2a\u9009\u4e86\u7684\u70b9\u540e\u9762\u7684\u70b9\u5168\u90e8\u4f1a\u88ab\u9009\u4e0a\u3002\n\n\u90a3\u4e48\u56de\u5230\u8fd9\u9053\u9898\uff0c\u65e2\u7136\u4ed6\u89c4\u5b9a\u53ef\u4ee5\u4e0d\u9009\u5176\u540e\u7f6e\u8282\u70b9\uff0c\u90a3\u6211\u4eec\u5c31\u628a\u90a3\u4e9b\u8fde\u63a5\u6b63\u6743\u70b9\u548c\u8d1f\u6743\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u6539\u4e3a $d$ ,\uff08 $d$ \u4e3a\u9009\u4e86\u524d\u7f6e\u8282\u70b9\u4f46\u4e0d\u9009\u540e\u7f6e\u8282\u70b9\u6240\u8981\u6263\u7684\u5206\uff09\u3002\u8fd9\u6837\u6211\u4eec\u5728\u6c42\u6700\u5c0f\u5272\u7684\u65f6\u5019\uff0c\u5c31\u80fd\u4fdd\u8bc1\u6700\u5c0f\u5272\u53ef\u4ee5\u9694\u65ad\u8fd9\u4e9b\u8fb9\u8ba9\u5176\u4e0d\u9009\u540e\u7f6e\u8282\u70b9\u3002\u6700\u5c0f\u5272\u6c42\u51fa\u6765\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5e38\u89c4\u7684\u6700\u5927\u6743\u95ed\u5408\u56fe\u7684\u64cd\u4f5c\u4e86\uff0c $ans=sum-Dinic() $  \uff08 $ans$ \u662f\u7b54\u6848\uff0c $sum$ \u662f\u6240\u6709\u6b63\u6743\u70b9\u7684\u548c\uff0c $Dinic()$ \u662f\u6839\u636e\u6700\u5927\u6d41=\u6700\u5c0f\u5272\u6c42\u51fa\u7684\u6700\u5c0f\u5272\u7684\u5927\u5c0f\u3002\n\n\n\u4e0a~~\u624d\u827a~~\u4ee3\u7801\n------------\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<cstring>\n#include<ctime>\nusing namespace std;\n#define int long long \nconst int inf=4e9;\n#define maxn 300\nstruct aaaa{\n    int to,next,c;\n}a[maxn*20];\nint head[maxn],d[maxn],tot,s,t,n,m,ans;\nvoid add(int x,int y,int z)\n{\n    a[tot].to=y;\n    a[tot].c=z;\n    a[tot].next=head[x];\n    head[x]=tot++;\n}\nbool bfs()\n{\n    memset(d,-1,sizeof(d));\n    d[s]=0;\n    queue<int> q;\n    q.push(s);\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];~i;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i].c&&d[v]==-1)\n            {\n                d[v]=d[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return d[t]!=-1;\n}\nint dfs(int u,int flow)\n{\n    if(u==t)\n        return flow;\n    int res=0;\n    for(int i=head[u];~i;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(a[i].c&&d[v]==d[u]+1)\n        {\n            int tmp=dfs(v,min(flow,a[i].c));\n            res+=tmp;\n            flow-=tmp;\n            a[i].c-=tmp;\n            a[i^1].c+=tmp;\n            if(!flow)\n                break;\n        }\n    }\n    if(res==0)\n        d[u]=-1;\n    return res;\n}\nint Dinic()\n{\n    int res=0;\n    while(bfs())\n        res+=dfs(s,inf);\n    return res;\n}\n\n\nsigned main()\n{\n    clock_t c1=clock();\n#ifdef LOCAL\n    freopen(\"in.in\",\"r\",stdin);\n    freopen(\"out.out\",\"w\",stdout);\n#endif\n    //=========================================\n     scanf(\"%lld%lld\",&n,&m);\n     memset(head,-1,sizeof(head));\n     s=0,t=n+1;\n     for(int i=1;i<=n;i++)\n     {\n         int x;\n         scanf(\"%lld\",&x);\n         if(x>0)\n            add(s,i,x),add(i,s,0),ans+=x;\n        else\n            add(i,t,-x),add(t,i,0);\n     }\n     for(int i=1;i<=m;i++)\n     {\n         int x,y,z;\n         scanf(\"%lld%lld%lld\",&x,&y,&z);\n         add(x,y,z);\n         add(y,x,0);\n     }\n     printf(\"%lld\\n\",ans-Dinic());\n    //=========================================\nend:\n    cerr<<\"Tmie Used:\"<<clock()-c1<<\"ms\"<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1626222415,
        "uid": 229919,
        "name": "\u4e00E\u5b64\u884c",
        "ccfLevel": 6,
        "title": "P3872 [TJOI2010]\u7535\u5f71\u8ff7 \u9898\u89e3"
    },
    {
        "content": "\n[\u4f20\u9001\u95e8\uff1aP3872 [TJOI2010]\u7535\u5f71\u8ff7](https://www.luogu.com.cn/problem/P3872)\n\n**\u4ee5\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e3a\u57fa\u7840\uff0c\u518d\u52a0\u4e0a\u4e00\u70b9\u5c0f\u62d3\u5c55\u3002**\n\n\u672c\u9898\u89e3\u4e3b\u8981\u662f\u60f3~~\u7ec6~~\u8bb2\u4e00\u4e0b\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n## \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\n### 1. \u6982\u5ff5\n\n- \u95ed\u5408\u5b50\u56fe\uff1a\u5728\u539f\u56fe $G$ \u7684\u95ed\u5408\u5b50\u56fe\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5728 $G$ \u4e2d\u6240\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u90fd\u5305\u542b\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e2d\u3002\n\n- \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1a\u5373\u539f\u56fe $G$ \u4e2d\u70b9\u6743\u4e4b\u548c\u6700\u5927\u7684\u95ed\u5408\u5b50\u56fe\u3002\n\n### 2. \u8fd0\u7528\n\n\u76ee\u6807\uff1a\u6c42\u4e00\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n#### <1>\n\n\u5148\u5efa\u7acb\u4e00\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5e26\u6743\u503c\u7684\u8282\u70b9\uff1a\n\n- \u82e5\u8282\u70b9\u4e3a\u6b63\uff0c\u5219\u4e0e\u8d85\u7ea7\u6e90\u70b9\u76f8\u8fde\uff0c\u6d41\u91cf\u4e3a\u8be5\u70b9\u6743\u503c\uff1b\n- \u53cd\u4e4b\uff0c\u5219\u4e0e\u8d85\u7ea7\u6c47\u70b9\u76f8\u8fde\uff0c\u6d41\u91cf\u4e3a\u8be5\u70b9\u6743\u503c\u76f8\u53cd\u6570\u3002\n\n\u5f88\u660e\u663e\uff0c\u5728\u4e0d\u8003\u8651\u201c\u6bcf\u4e2a\u70b9\u5728 $G$ \u4e2d\u6240\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u90fd\u5305\u542b\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e2d\u201d\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\u65f6\uff0c\u6700\u5927\u6743\u201c\u95ed\u5408\u5b50\u56fe\u201d\u80af\u5b9a\u662f\u6240\u6709\u6b63\u6743\u503c\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u73b0\u5728\u4e0e\u6e90\u70b9\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u6d41\u91cf\u4e4b\u548c\u3002\n\n\u6b64\u65f6\uff0c\u4e0a\u8ff0\u7684\u5efa\u8fb9\u65b9\u5f0f\u7684\u539f\u56e0\u5c31\u6e05\u695a\u660e\u4e86\u4e86\uff1a\u533a\u5206\u5f00\u6765\u6b63\u8d1f\u6743\u503c\u7684\u70b9\u3002\n\n#### <2>\n\n\u7136\u540e\u518d\u52a0\u4e0a\u9650\u5236\uff0c\u5728\u70b9\u548c\u70b9\u4e4b\u95f4\u5efa\u8fb9\u3002\n\n\u6b64\u65f6\u53ef\u4ee5\u9690\u7ea6\u53d1\u73b0\uff1a\u6211\u4eec\u4f1a\u4f7f\u7528\u6700\u5c0f\u5272\u53bb\u6c42\u51fa\u6700\u5927\u6743\u5b50\u56fe\u3002\n\n\u5272\u53bb\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u6e90\u70b9\u4e0e\u6c47\u70b9\u4e0d\u76f8\u8fde\uff0c\u6700\u540e\u6e90\u70b9\u6240\u5728\u7684\u90a3\u4e2a\u5b50\u56fe\u5373\u4e3a\u539f\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n\u56de\u8fc7\u5934\u6765\uff1a\u8fd9\u4e9b\u8fb9\u7684\u6d41\u91cf\u662f\u4ec0\u4e48\uff1f\n\n\u8fd9\u4e9b\u8fb9\u7684\u6d41\u91cf\u4e3a $inf$\u3002\u56e0\u4e3a\u201c\u6bcf\u4e2a\u70b9\u5728 $G$ \u4e2d\u6240\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u90fd\u5305\u542b\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e2d\u201d\uff0c\u6240\u4ee5\u8981\u4fdd\u8bc1\u8fd9\u4e9b\u8fb9\u4e0d\u4f1a\u88ab\u5272\u53bb\u3002\n\n#### <3> \n\n\u6b64\u65f6\u53ef\u4ee5\u53d1\u73b0\uff0c\u88ab\u5272\u53bb\u7684\u8fb9\u90fd\u662f\u4e0e\u6e90\u70b9\u6216\u8005\u6c47\u70b9\u76f8\u8fde\u7684\u8fb9\u3002\n\n- \u82e5\u4e00\u8d1f\u6743\u503c\u8282\u70b9\u4e0e\u6c47\u70b9\u76f8\u8fde\u7684\u8fb9\u88ab\u5272\u53bb\uff1a\n\n\t\u8bf4\u660e\u6b64\u65f6\u5b83\u653e\u5728\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e2d\u662f\u6700\u4f18\u7684\u72b6\u6001\uff0c\u4f46\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c\u8981\u51cf\u53bb\u8be5\u70b9\u6743\u503c\u7684\u7edd\u5bf9\u503c\u3002\n    \n- \u82e5\u4e00\u6b63\u6743\u503c\u8282\u70b9\u4e0e\u6c47\u70b9\u76f8\u8fde\u7684\u8fb9\u88ab\u5272\u53bb\uff1a\n\n\t\u8bf4\u660e\u6b64\u65f6\u5b83\u4e0d\u653e\u5728\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e2d\u662f\u6700\u4f18\u7684\u72b6\u6001\uff0c\u4f46\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c\u8981\u51cf\u53bb\u8be5\u70b9\u6743\u503c\u3002\n    \n\u8fd9\u6837\u4e00\u6765\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c\u5c31\u662f\uff1a\u6b63\u6743\u503c\u4e4b\u548c - \u6700\u5c0f\u5272\u3002\n\n\u7136\u540e\u6700\u5c0f\u5272\u8f6c\u5316\u4e3a\u6700\u5927\u6d41\u53bb\u6c42\u89e3\u5373\u53ef\u3002\n\n## \u56de\u5f52\u672c\u9898\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u677f\u4e2d\uff0c\u539f\u56fe\u4e2d\u7684\u8fb9\u4e0d\u80fd\u5220\u53bb\uff0c\u4f46\u672c\u9898\u53ef\u4ee5\u5220\u53bb\u3002\n\n\u53ea\u662f\u5220\u53bb\u8fd9\u6761\u8fb9\u4e5f\u9700\u8981\u4ee3\u4ef7\uff0c\u90a3\u5c31\u5c06\u6b64\u8fb9\u7684\u6d41\u91cf\u8bbe\u4e3a\u4ee3\u4ef7\u800c\u4e0d\u662f $inf$ \u5373\u53ef\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6a21\u677f\u4e86\u3002\n\n### AC Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define inf 10000000\n#define maxn 700\n#define maxm 1000005\n\nint n, m;\nint sa[maxn];\nint cnt = 1, hd[maxn];\nstruct node{\n\tint to, nxt;\n\tint flw;\n}e[maxm];\nint in[maxn];\nvector <int> out[maxn];\nint dep[maxn], vis[maxn];\nint sum, ans;\nint s, t;\n\ninline int id(int i, int j)\n{\n\treturn (i - 1) * m + j;\n}\n\ninline void add(int u, int v, int f)\n{\n\te[++cnt] = (node){v, hd[u], f};\n\thd[u] = cnt;\n\te[++cnt] = (node){u, hd[v], 0};\n\thd[v] = cnt;\n}\n\ninline void topo()\n{\n\tqueue <int> q;\n\trep(i, 1, n * m)\n\t{\n\t\tif(!in[i])\n\t\t\tvis[i] = 1, q.push(i);\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < out[u].size(); ++i)\n\t\t{\t\n\t\t\tint v = out[u][i];\n\t\t\tin[v] -= 1;\n\t\t\tif(!vis[v] and !in[v])\n\t\t\t\tvis[v] = 1, q.push(v);\n\t\t}\n\t}\n}\n\ninline bool bfs()\n{\n\tqueue <int> q;\n\tmemset(dep, 0, sizeof dep);\n\tdep[s] = 1, q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = hd[u], v; i; i = e[i].nxt)\n\t\t{\n\t\t\tif(!dep[v = e[i].to] and e[i].flw)\n\t\t\t\tdep[v] = dep[u] + 1, \n\t\t\t\tq.push(v);\n\t\t}\n\t}\n\treturn dep[t] ? 1 : 0;\n}\n\ninline int dfs(int u, int cm)\n{\n\tif(u == t or !cm) return cm;\n\tint lv = 0;\n\tfor(int i = hd[u], v; i and cm; i = e[i].nxt)\n\t{\n\t\tif(!e[i].flw) continue;\n\t\tif(dep[v = e[i].to] != dep[u] + 1) continue;\n\t\tint res = dfs(v, min(cm, e[i].flw));\n\t\te[i].flw -= res; \n\t\te[i ^ 1].flw += res;\n\t\tcm -= res, lv += res;\n\t}\n\tif(!lv) dep[u] = 0;\n\treturn lv;\n}\n\ninline int dinic()\n{\n\twhile(bfs())\n\t\tans += dfs(s, inf);\n\treturn ans;\n}\n\nsigned main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\ts = n + 1, t = s + 1;\n\trep(i, 1, n) \n\t{\n\t\tscanf(\"%d\", &sa[i]);\n\t\tif(sa[i] < 0) add(i, t, -sa[i]);\n\t\telse add(s, i, sa[i]), sum += sa[i];\n\t}\n\trep(i, 1, m)\n\t{\n\t\tint ut, vt, dt;\n\t\tscanf(\"%d%d%d\", &ut, &vt, &dt);\n\t\tadd(ut, vt, dt);\n\t}\n\tprintf(\"%d\\n\", sum - dinic());\n\treturn 0;\n}\n```\n\n\n------------\n\u611f\u8c22\u9605\u8bfb\u3002\n\n\u8f9b\u82e6\u7ba1\u7406\u5458\u5ba1\u6838\uff0c\u82e5\u6709\u95ee\u9898\u70e6\u8bf7\u6307\u51fa\u3002",
        "postTime": 1645768287,
        "uid": 469672,
        "name": "\u4f0d\u53c1\u58f9",
        "ccfLevel": 7,
        "title": "P3872 [TJOI2010]\u7535\u5f71\u8ff7 \u9898\u89e3"
    },
    {
        "content": "http://www.elijahqi.win/2018/01/02/luogu3872-tjoi2010%e7%94%b5%e5%bd%b1%e8%bf%b7/\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u5c0fA\u662f\u4e00\u4e2a\u7535\u5f71\u8ff7\uff0c\u4ed6\u6536\u96c6\u4e86\u4e0a\u767e\u90e8\u7684\u7535\u5f71\uff0c\u6253\u7b97\u4ece\u4e2d\u6311\u51fa\u82e5\u5e72\u90e8\u5728\u5047\u671f\u770b\u5b8c\u3002\u4ed6\u6839\u636e\u81ea\u5df1\u7684\u53e3\u5473\u548c\u7f51\u4e0a\u7684\u4ecb\u7ecd\uff0c\u5bf9\u6bcf\u90e8\u7535\u5f71X\u90fd\u6253\u4e86\u4e00\u4e2a\u5206\u6570vX\uff0c\u8868\u793a\u81ea\u5df1\u559c\u6b22\u7684\u7a0b\u5ea6\u3002\u8fd9\u4e2a\u5206\u6570\u7684\u8303\u56f4\u5728-1000\u81f31000\u4e4b\u95f4\uff0c\u8d8a\u5927\u8868\u793a\u8d8a\u559c\u6b22\u3002\u5c0fA\u6bcf\u770b\u4e00\u90e8\u7535\u5f71X\uff0c\u4ed6\u7684\u4f53\u9a8c\u503c\u5c31\u4f1a\u52a0\u4e0avX\u3002\n\n\u53e6\u5916\uff0c\u56e0\u4e3a\u67d0\u4e9b\u7535\u5f71\u662f\u7ec4\u6210\u4e00\u4e2a\u7cfb\u5217\u7684\uff0c\u6bd4\u5982\u8457\u540d\u7684\u300a\u7ec8\u7ed3\u8005\u300b\u7cfb\u5217\u3001\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u7cfb\u5217\u7b49\u7b49\uff0c\u5982\u679c\u5c0fA\u53ea\u770b\u4e86\u524d\u4e00\u90e8\u800c\u6ca1\u6709\u770b\u540e\u4e00\u90e8\u7684\u8bdd\uff0c\u4ed6\u5c31\u4f1a\u89c9\u5f97\u4e0d\u662f\u5f88\u723d\u3002\u51c6\u786e\u6765\u8bb2\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u90e8\u4e0d\u540c\u7684\u7535\u5f71X,Y\uff0c\u4ed6\u4eec\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u4f9d\u8d56\u503cdXY\uff0c\u8868\u793a\u5982\u679c\u5c0fA\u770b\u4e86X\u4f46\u662f\u6ca1\u770bY\uff0c\u4ed6\u7684\u4f53\u9a8c\u503c\u5c31\u4f1a\u51cf\u5c11dXY\u3002\uff08\u6ce8\u610f\u4e0e\u89c2\u770b\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u53ea\u8981\u4e24\u90e8\u90fd\u770b\u8fc7\uff0c\u5c31\u4e0d\u4f1a\u51cf\u5c11\u4f53\u9a8c\u503c\uff09\n\n\u73b0\u5728\u4ed6\u8981\u9009\u51fa\u82e5\u5e72\u7535\u5f71\u6765\u770b\uff0c\u4f7f\u5f97\u5f97\u5230\u7684\u603b\u7684\u4f53\u9a8c\u503c\u6700\u5927\u3002\u5982\u679c\u4ed6\u65e0\u6cd5\u5f97\u5230\u6b63\u7684\u4f53\u9a8c\u503c\uff0c\u5c31\u8f93\u51fa0\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570\uff1a\u7535\u5f71\u603b\u6570N\u548c\u4f9d\u8d56\u5173\u7cfb\u6570\u76eeM\u3002\u7b2c\u4e8c\u884c\u5305\u542b\u7528\u7a7a\u683c\u9694\u5f00\u7684N\u4e2a\u6570\uff0c\u8868\u793a\u5bf9\u6bcf\u90e8\u7535\u5f71\u7684\u6253\u5206\u3002\u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570X, Y, dXY\uff0c\u8868\u793a\u4e00\u4e2a\u4f9d\u8d56\u5173\u7cfb\u3002\u6bcf\u4e2a\u6709\u5e8f\u5bf9(X,Y)\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002(1 \u2264 X,Y \u2264 N)\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0fA\u80fd\u5f97\u5230\u7684\u6700\u5927\u4f53\u9a8c\u503c\u3002\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n\n2 2\n100 -50\n\n1 2 49\n2 1 10\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n\n51\n\u8bf4\u660e\n\u5982\u679c\u5c0fA\u53ea\u770b\u7535\u5f711\uff0c\u4f53\u9a8c\u503c\u4e3a100-49 = 51\u3002\u5982\u679c\u53ea\u770b\u7535\u5f712\uff0c\u4f53\u9a8c\u503c\u4e3a-50-10 = -60\u3002\u5982\u679c\u4e24\u90e8\u90fd\u770b\uff0c\u4f53\u9a8c\u503c\u4e3a100+(-50) = 50\u3002\u6240\u4ee5\u5e94\u8be5\u53ea\u770b\u7535\u5f711\u3002\n\n\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a\n\n\u5bf9\u4e8e20%\u7684\u6570\u636e\uff0c1 \u2264 N \u2264 15\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 \u2264 N \u2264 100, -1000 \u2264 vX \u2264 1000, 0 < dXY \u2264 1000\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u65f6\u96501\u79d2\n\n\u8fd9\u9898\u53ef\u4ee5\u770b\u4f5c\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u4e00\u4e2a\u6269\u5c55\u95ee\u9898 \u5176\u5b9e\u548c\u90a3\u4e2abzoj ceoi2008 order\u633a\u50cf\u7684 \u60f3\u4e86\u4e00\u5929\u4e5f\u6ca1\u60f3\u5230\u65b9\u6cd5\u53bb\u819c\u4e86\u4e0b\u9898\u89e3 \u53d1\u73b0\u5176\u5b9e\u6709\u4e00\u79cd\u60c5\u51b5\u6211\u662f\u53ef\u4ee5\u4e0d\u53bb\u8003\u8651\u7684 \u6bd4\u5982\u6211\u8fd9\u4e2a\u7535\u5f71\u7684\u503c\u662f\u8d1f\u6570 \u5982\u679c\u9009\u4e86\u4ed6 \u6ca1\u9009\u522b\u7684 \u4e5f\u4f1a\u6709\u4e00\u4e2a\u4ee3\u4ef7 \u90a3\u5176\u5b9e\u8fd9\u6761\u8fb9\u6211\u662f\u59cb\u7ec8\u4e5f\u4e0d\u9700\u8981\u8003\u8651\u7684\n\n\u6211\u9996\u5148\u4ece\u6e90\u70b9\u5411\u6bcf\u4e2a\u6743\u503c\u4e3a\u6b63\u7684\u7535\u5f71\u8fde\u8fb9 \u7136\u540e\u5982\u679c\u8fd9\u4e2a\u7535\u5f71\u7684\u6743\u503c\u4e3a\u8d1f\u6570 \u90a3\u4e48\u6211\u5c31\u4ece\u8fd9\u4e2a\u7535\u5f71\u5411\u6c47\u70b9\u8fde\u8fb9 \u7136\u540e\u5982\u679c\u6bcf\u4e2a\u7535\u5f71\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb \u90a3\u4e48\u76f4\u63a5\u8fde\u8fb9\u5373\u53ef \u8fd9\u6837\u7684\u8bdd\u5c31\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u6700\u5c0f\u5272\u95ee\u9898 \u8fd9\u4e2a\u95ee\u9898\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206 \u9996\u5148\u662f\u6211\u4e0d\u770b\u8fd9\u4e2a\u7535\u5f71\u5e26\u6765\u7684\u635f\u5931\uff08\u6ce8\u610f\u5982\u679c\u5b58\u5728\u5173\u8054 \u4e14\u6ca1\u770b\u662f\u5728\u73b0\u6709\u7684\u57fa\u7840\u4e0a\u5012\u6263 \u6240\u4ee5\u8fd9\u4e2a\u5efa\u56fe\u6210\u7acb  \u5176\u6b21\u5982\u679c\u5b58\u5728\u5173\u8054 \u6211\u4e0d\u53bb\u770b\u540e\u9762\u7684\u7535\u5f71\u4e5f\u6709\u53ef\u80fd\u5e26\u6765\u635f\u5931  \u6700\u540e\u5982\u679c\u6211\u5fc5\u987b\u5f97\u770b\u8fd9\u4e2a\u7535\u5f71 \u90a3\u4e48\u56e0\u4e3a\u6743\u503c\u662f\u8d1f\u6570 \u6240\u4ee5\u4e5f\u4f1a\u5e26\u6765\u635f\u5931 \u8dd1\u4e00\u4e0b\u6700\u5927\u6d41 \u7528\u6b63\u6743\u7684\u603b\u548c-\u6700\u5927\u6d41\u5373\u53ef\n\n\u5509\u8fd8\u662f\u592a\u83dc\u554a \u600e\u4e48\u529e\u5462qwq\n\n\u53e6\u5916\u8dea\u819cIcefox\u5927\u4f6c \u63d0\u4f9b\u7684\u53e6\u5916\u4e00\u79cd\u505a\u6cd5 \u662f\u4ec0\u4e48\u5462 \u5c31\u662f\u56e0\u4e3a\u5b58\u5728\u8d1f\u7684 \u6240\u4ee5\u6211\u53ef\u4ee5 \u75281000-\u4e00\u4e0b\u6bcf\u4e2a\u6743\u503c \u8fd9\u6837\u6c42\u51fa\u6765\u7684\u6700\u5c0f\u5272 \u7136\u540e\u518d\u7528\u70b9\u6570\\*1000- \u6700\u5c0f\u5272\u5c31\u662f\u6211\u60f3\u8981\u7684\u6700\u5927\u7684\u7b54\u6848\u4e86 \u56e0\u4e3a\u8fd9\u9898\u5176\u5b9e\u6211\u8bfb\u9898\u7684\u65f6\u5019\u8fd8\u662f\u6709\u8bef\u5dee \u89c9\u5f97\u81ea\u5df1\u592a\u83dc\u4e86 \u4ecd\u7136 \u8981\u52aa\u529b\u554a  \u505a\u6cd5\u5c31\u662f \u6211\u6e90\u5411\u6bcf\u4e2a\u70b9\u8fde 1000\u7684 \u8fb9  \u7136\u540e\u6bcf\u4e2a\u70b9\u5411 \u6c47\u8fde 1000-\u6743\u503c\u7684\u8fb9 \u7136\u540e \u5982\u679c\u6709\u9650\u5236 \u90a3\u4e48\u5c31\u5728\u4e24\u4e2a\u70b9\u4e4b\u95f4\u76f4\u63a5\u55ef\u8fde\u9650\u5236\u7684\u90a3\u4e2a\u6743\u503c\u7684\u8fb9 \u7136\u540e\u5c31\u50cf\u6211\u521a\u521a\u8bf4\u7684 \u7528\u70b9\u6570\\*1000- \u6700\u5c0f\u5272 \u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a \u5176\u5b9e\u9053\u7406\u5dee\u4e0d\u591a \u56e0\u4e3a \u76f8\u5f53\u4e8e\u6211\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u4e0d\u9009 \u90a3\u4e48\u6211\u5c31\u6ca1\u6709\u6536\u76ca\u4e86 \u8fd91000\u7684\u8fb9\u5c31\u88ab\u6211\u5272\u53bb\u4e86  \u5982\u679c\u4e92\u76f8\u4e4b\u95f4\u6709\u5173\u8054\u7684\u8bdd \u5982\u679c\u90a3\u4e2a\u6743\u503c\u6211\u6ca1\u6709\u9009\u7684\u8bdd \u90a3\u4e48\u662f\u4e0d\u662f\u6211\u76f8\u5f53\u4e8e\u662f\u8fd91000\u5c31\u6ca1\u4e86 \u90a3\u6211\u8fd8\u8981\u9650\u5236\u4e00\u4e0b\u5982\u679c\u9009\u4e86\u90a3\u4e2a\u70b9 \u6ca1\u9009\u8fd9\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9 \u8981\u4e48\u5272\u6389 \u8981\u4e48\u4e0d\u9009\u90a3\u4e2a\u70b9 \u4e00\u5f00\u59cb\u6211\u8ba4\u4e3a\u8fd91000\u7684\u6743\u503c\u592a\u5c0f\u4e86 \u5982\u679c\u6211\u9009\u4e86\u8fd9\u4e2a\u70b9 \u4e0d\u9009\u5176\u4ed6\u70b9\u7684\u4ee3\u4ef7\u592a\u5927 \u90a3\u4e48\u4f1a\u4e0d\u591f\u597d \u663e\u7136\u662f\u4e0d\u5bf9\u7684 \u56e0\u4e3a\u5982\u679c\u6211\u6700\u7ec8\u6536\u76ca\u80af\u5b9a<0\u90a3\u4e48\u6211\u5e72\u8106\u54ea\u4e2a\u90fd\u4e0d\u9009\u4e3a0\u5373\u53ef\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 0x3f3f3f3f\n#define N 110\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if(T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0,f=1;char ch=gc();\n    while(ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=gc();}\n    while(ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=gc();}\n    return x*f;\n}\nstruct node{\n    int y,z,next;\n}data[N*N*2];\nint num=1,h[N],level[N],n,m,T;\ninline void insert1(int x,int y,int z){\n    data[++num].y=y;data[num].z=z;data[num].next=h[x];h[x]=num;\n    data[++num].y=x;data[num].z=0;data[num].next=h[y];h[y]=num;\n}\ninline bool bfs(){\n    queue<int> q;memset(level,0,sizeof(level));level[0]=1;q.push(0);\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for (int i=h[x];i;i=data[i].next){\n            int y=data[i].y,z=data[i].z;\n            if (level[y]||!z) continue;level[y]=level[x]+1;q.push(y);if (y==T) return 1;\n        }\n    }return 0;\n} \ninline int dfs(int x,int s){\n    if (x==T) return s;int ss=s;\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y,z=data[i].z;\n        if (level[x]+1==level[y]&&z){\n            int xx=dfs(y,min(s,z));if (!xx) level[y]=0;\n            s-=xx;data[i].z-=xx;data[i^1].z+=xx;if (!s) return ss;\n        }\n    }return ss-s;\n}\nint main(){\n    freopen(\"3872.in\",\"r\",stdin);\n    n=read();m=read();T=n+1;int sum=0;\n    for (int i=1;i<=n;++i){\n        int tmp=read();if (tmp>=0) insert1(0,i,tmp),sum+=tmp;else insert1(i,T,-tmp);\n    }\n    for (int i=1;i<=m;++i){\n        int x=read(),y=read(),z=read();\n                if (z<0)continue;\n        insert1(x,y,z);\n    }int ans=0;while(bfs()) ans+=dfs(0,inf);\n    printf(\"%d\",sum-ans);\n    return 0;\n}\n```",
        "postTime": 1514859981,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3872 \u3010[TJOI2010]\u7535\u5f71\u8ff7\u3011"
    },
    {
        "content": "\u6b22\u8fce\u8bbf\u95ee\u849f\u84bb\u7684\u535a\u5ba2\uff1a[\u4f20\u9001\u95e8](http://blog.csdn.net/Icefox_zhx/article/details/78949041 \"\u4f20\u9001\u95e8\")\n\n\u6211\u662f\u7c7b\u4f3c[\u8fd9\u9053\u9898](http://blog.csdn.net/Icefox_zhx/article/details/78854953)\u60f3\u5230\u7684\u5efa\u56fe\u65b9\u6cd5\u3002\u56e0\u4e3a\u6709\u8d1f\u6743\uff0c\u6240\u4ee5\u6211\u7528delta\u90fd\u5148\u51cf\u4ed6\u4eec\u4e00\u4e0b\uff0c\u90fd\u53d8\u6210\u6b63\u6743\uff0c\u4f7f\u539f\u70b9\u6743\u548c\u6700\u5927\uff0c\u5c31\u53d8\u6210\u4e86\u4f7f\u73b0\u70b9\u6743\u548c\u6700\u5c0f\uff0c\u5c31\u53ef\u4ee5\u7528\u6700\u5c0f\u5272\u5566\u3002S\u5411\u6240\u6709\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3adelta\uff0c\u5524\u4f5c\u7b2c\u4e00\u5c42\uff0c\u6240\u6709\u70b9\u5411T\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3adelta-\u70b9\u6743\uff0c\u5524\u4f5c\u7b2c\u4e8c\u5c42\u3002\u5bf9\u4e8e\u6709\u9650\u5236\u7684\u8fb9\uff0c\u5efa\u8fb9x->y,\u5bb9\u91cf\u4e3aval\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7b2c\u4e00\u4e8c\u5c42\u5fc5\u5272\u4e00\u6761\uff0c\u5272\u7b2c\u4e00\u5c42\uff0c\u5c31\u4ee3\u8868\u4e0d\u9009\u8fd9\u4e2a\u70b9\uff0c\u5272\u7b2c\u4e8c\u5c42\uff0c\u5c31\u4ee3\u8868\u9009\u8fd9\u4e2a\u70b9\u3002\u5982\u679cx\u9009\u4e86\uff0cy\u6ca1\u9009\uff0cx->y\u6709\u8fb9\uff0c\u5219\u4e00\u5b9a\u4f1a\u628a\u8fd9\u6761\u8fb9\u5272\u6389\uff0c\u7b26\u5408\u9898\u610f\u3002\n\nElijahqi\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u5efa\u56fe\u65b9\u5f0f\uff1a\u7c7b\u4f3c[order](http://blog.csdn.net/Icefox_zhx/article/details/78890586)\u8fd9\u9898\u3002S\u5411\u6b63\u6743\u70b9\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff0c\u8d1f\u6743\u70b9\u5411T\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\u7edd\u5bf9\u503c\uff0cx->y\u7684\u9650\u5236\u5c31\u76f4\u63a5\u5efax->y\u3002\u6700\u540e\u62ff\u6b63\u6743\u548c-\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define N 110\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nint n,m,h[N],num=1,cur[N],T=101,lev[N],del=1000,ans=0;\nstruct edge{\n    int to,next,val;\n}data[20500];\ninline void add(int x,int y,int val){\n    data[++num].to=y;data[num].next=h[x];h[x]=num;data[num].val=val;\n    data[++num].to=x;data[num].next=h[y];h[y]=num;data[num].val=0;\n}\ninline bool bfs(){\n    queue<int>q;memset(lev,0,sizeof(lev));\n    q.push(0);lev[0]=1;\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for(int i=h[x];i;i=data[i].next){\n            int y=data[i].to;if(lev[y]||!data[i].val) continue;\n            lev[y]=lev[x]+1;if(y==T) return 1;q.push(y);\n        }\n    }return 0;\n}\ninline int dinic(int x,int low){\n    if(x==T) return low;int tmp=low;\n    for(int &i=cur[x];i;i=data[i].next){\n        int y=data[i].to;if(lev[y]!=lev[x]+1||!data[i].val) continue;\n        int res=dinic(y,min(tmp,data[i].val));\n        if(!res) lev[y]=0;else tmp-=res,data[i].val-=res,data[i^1].val+=res;\n        if(!tmp) return low;\n    }return low-tmp;\n}\nint main(){\n//    freopen(\"a.in\",\"r\",stdin);\n    n=read();m=read();\n    for(int i=1;i<=n;++i) add(0,i,del),add(i,T,del-read()),ans+=del;\n    while(m--){\n        int x=read(),y=read();add(x,y,read());\n    }while(bfs()){memcpy(cur,h,sizeof(cur));ans-=dinic(0,inf);}\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1514857999,
        "uid": 31311,
        "name": "IceFox",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3872 \u3010[TJOI2010]\u7535\u5f71\u8ff7\u3011"
    }
]