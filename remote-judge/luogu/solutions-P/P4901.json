[
    {
        "content": "%%%\u2026\u2026\u8fd9\u9053\u9898\u849f\u84bb\u60f3\u4e86\u597d\u4e45\u554a\u2026\n\n\u5199\u4e2a\u9898\u89e3\u7eaa\u5ff5\u4e0b\uff0c\u540c\u65f6\u4e5f\u4e3a~~\u548c\u6211\u4e00\u6837~~\u770b\u4e0d\u61c2\u51fa\u9898\u4eba\u9898\u89e3\u7684oier\u4eec\u6307\u70b9\u4e00\u6761\u65b0\u7684\u9053\u8def\n\n\u80af\u5b9a\u8fd8\u662f\u8981\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u6570\u8d28\u56e0\u6570\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u7528\u7ebf\u6027\u7b5b\u53ef\u4ee5\u89e3\u51b3\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u201c\u548c\u6027\u51fd\u6570\u201d\u3002\u6b64\u5916\uff0c\u8fd8\u8981\u9884\u5904\u7406\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5927\u698240\u4e2a\u5427\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4$a$\uff0c\u5982\u679c\u8fd9\u4e2a\u6570$x$\u8fd8\u6ca1\u6709\u88ab\u9009\u8fc7\uff0c$a[x]$\u5c31\u4e3a$1$\uff0c\u53cd\u4e4b$a[x]$\u5219\u4e3a$0$,\u5efa\u7acb\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4$c$\u8bb0$a$\u7684\u524d\u7f00\u548c\u3002\n\n\u5047\u8bbe$Ni$\u662f$maxn$\uff0c$num[w][j]$\u8868\u793a\u7b2c$w$\u884c\u7b2c$j$\u4e2a\u7f16\u53f7\u4e3a\u591a\u5c11\uff0c$sum[w][j]$\u8868\u793a\u7b2c$w$\u884c\u524d$j$\u4e2a\u6570\u7684\u8d28\u56e0\u6570\u4e2a\u6570\u7684\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u8be2\u95ee\u7684\u65f6\u5019\u7b54\u6848\u5c31\u662f$sum[ki][r]$\uff0c$r$\u5c31\u662f\u5728$num[w]$\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$Ni$\u7684\u6700\u5927\u503c\u7684\u4e0b\u6807\u3002\uff08\u5373$upper\\_bound(Ni)-1$\uff09\n\n\u90a3\u4e48$sum$\u600e\u4e48\u9884\u5904\u7406\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7b2c$w$\u884c\u7684\u7b2c$1$\u4e2a\u6570\u5373\u4e3a\u9009\u5b8c$w-1$\u884c\u540e\u5269\u4e0b\u6765\u7684\u7b2c$1$\u4e2a\u6570\uff0c\u7b2c$2$\u4e2a\u5373\u4e3a\u9009\u5b8c$w-1$\u884c\u540e\u5269\u4e0b\u6765\u7684\u7b2c$2$\u4e2a\u6570\uff0c\u7b2c$j$\u4e2a\u5373\u4e3a\u5269\u4e0b\u6765\u7684\u7b2c$j$\u4e2a\u9884\u5904\u7406\u51fa\u7684\u6590\u6ce2\u90a3\u5951\u6570\u3002\u800c\u5904\u7406\u5b8c\u7b2c$j-1$\u4e2a\u6570\u4e4b\u540e\uff0c\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u7684$a[x]$\u4f1a\u53d8\u6210$0$\uff0c\u90a3\u6211\u4eec\u8981\u627e\u5230\u7b2c$j$\u4e2a\u6570\u662f\u4ec0\u4e48\uff0c\u53ea\u8981\u627e\u5230\u4e00\u4e2a$p$\uff0c\u4f7f\u5f97$p$\u5728$a$\u7684\u524d\u7f00\u548c\u6070\u597d\u7b49\u4e8e$fib[j]-j+1$\u5373\u53ef\uff08\u8fd9\u91cc\u7406\u89e3\u4e00\u4e0b\u554a\uff09\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u51fa$sum$\u4ee5\u53ca$num$\u6570\u7ec4\u4e86\u3002\n\n\u4f46\u662f\u95ee\u9898\u53c8\u6765\u4e86\uff1a\u600e\u4e48\u627e\u5462\uff1f\n\n\u7b14\u8005\u4e00\u5f00\u59cb\u60f3\u5230\u7684\u662f$\\log^2{n}$\u7684\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\uff0c\u4f46\u662f\u611f\u89c9\u4f1aT\uff0c\u4e8e\u662f\u51a5\u601d\u82e6\u60f3+\u5b66\u4e60\u4e86\u6811\u72b6\u6570\u7ec4\u52a0\u500d\u589e\u7684\u7cbe\u5999\u5199\u6cd5\u2026\u2026\u4e3b\u8981\u4ee3\u7801\u5728\u4e0b\u9762\uff0c\u76f8\u4fe1\u5b66\u8fc7\u500d\u589e\u548c\u6811\u72b6\u6570\u7ec4\u7684oier\u4eec\u90fd\u80fd\u770b\u61c2\u2026\n```cpp\nint t=(1<<22),pos=0;\n    int tot=0;\n    for(;t;t>>=1){\n    \tif(tot+c[t+pos]<x){\n    \t\tpos+=t;\n    \t\ttot+=c[pos];\n\t\t} \n\t}\n    return pos+1;\n```\n\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5b9e\u7528\u7684\u65b9\u6cd5\uff0c\u5728\u8bb8\u591a\u9898\u76ee\u91cc\u90fd\u53ef\u4ee5\u7528\u6765\u51cf\u5c11\u4e00\u4e2a$\\log{n}$\u7684\u590d\u6742\u5ea6\n\n\u5927\u5bb6\u4e00\u5b9a\u90fd\u660e\u767d\u4e86\u5427\uff01\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log{n}+T\\log{n})$\n\n\u6700\u540e\u5410\u69fd\u4e00\u70b9\uff0c\u6309\u7167\u6211\u968f\u6027\u7684\u4ee3\u7801\u98ce\u683c\uff0c\u5361\u7a7a\u95f4\u8fd9\u79cd\u64cd\u4f5c\u4ee4\u6211\u75db\u4e0d\u6b32\u751f\u554a\u2026\u2026\n\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\uff08\u90e8\u5206\u53d8\u91cf\u540d\u53ef\u80fd\u4e0e\u9898\u89e3\u91cc\u7684\u4e0d\u540c\uff0c\u5927\u5bb6\u770b\u61c2\u5c31\u597d\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>void Read(T &x){\n    x=0;int f=1;char s=getchar();\n    while(!isdigit(s)){if(s=='-') f=-1;s=getchar();}\n    while(isdigit(s)){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nconst int maxn=5*1e6,maxk=1e4,fbnq_size=45;\nint c[maxn+10],p[100];\ninline int lowbit(int x){\n    return x&-x;\n}\nvoid add(int x,int y){\n    for(;x<=maxn;x+=lowbit(x)) c[x]+=y;\n}\nint pri[maxn/10];\nbitset<maxn+10> fac;\nshort d[maxn+10];\nint siz=0;\nvoid do_d(){\n    for(int i=2;i<=maxn;i++){\n        if(fac[i]==0){\n            pri[++siz]=i;\n            d[i]=1;\n        }\n        for(int j=1;j<=siz;j++){\n            if(i*pri[j]>maxn) break;\n            fac[i*pri[j]]=1;\n            d[i*pri[j]]=d[i]+1;\n            if(i%pri[j]==0) break;\n        }\n    }\n}\nvector<int> sum[maxk+10];\nvector<int> num[maxk+10];\nint find_num(int x){\n    int t=(1<<22),pos=0;\n    int tot=0;\n    for(;t;t>>=1){\n    \tif(tot+c[t+pos]<x){\n    \t\tpos+=t;\n    \t\ttot+=c[pos];\n\t\t} \n\t}\n    return pos+1;\n}\nvoid pre_process(){\n    do_d();\n    p[1]=1;p[2]=2;\n    for(int i=3;i<=fbnq_size;i++) p[i]=p[i-1]+p[i-2];\n    for(int i=1;i<=maxn;i++){\n        add(i,1);\n    } \n    int tot=maxn;\n    for(int i=1;i<=maxk;i++){\n        for(int j=1;tot>=p[j]-j+1;j++){\n            int pos=find_num(p[j]-j+1);\n            add(pos,-1);tot--;\n            if(j==1) sum[i].push_back(d[pos]);\n            else{\n                int x=sum[i][j-2]+d[pos];\n                sum[i].push_back(x); \n            } \n            num[i].push_back(pos); \n        }\n    }\n}\nint main(){\n    pre_process();\n    int T;\n    Read(T);\n    for(int t=1;t<=T;t++){\n        int n,k;\n        Read(n);Read(k);\n        if(num[k][0]>n) printf(\"%d\\n\",-1);\n        else{\n            int pos=upper_bound(num[k].begin() ,num[k].end() ,n)-num[k].begin() -1;\n            printf(\"%d\\n\",sum[k][pos]);\n        }\n    } \n    return 0;\n}\n\n```",
        "postTime": 1539079729,
        "uid": 51316,
        "name": "\u52a8\u7269\u4e16\u754c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4901 \u3010\u6392\u961f\u3011"
    },
    {
        "content": "\u6bd4\u8d5b\u524d\u4e09\u5929\u849f\u84bb\u6253\u4e86\u4e00\u4e2a\u66b4\u529b\u60f3\u8981\u770b\u770b\u6570\u636e\u5f3a\u5ea6\u7684\u65f6\u5019,\u53d1\u73b0\u6b63\u89e3\u6302\u4e86!!!\n\n\u7136\u540e\u8c03\u4e86\u51fa\u9898\u4eba\u4e00\u4e2a\u4e0b\u5348\u7ec8\u4e8e\u809d\u51fa\u6765\u4e86..\n\n~~(\u849f\u84bb\u51fa\u9898\u4eba\u518d\u4e5f\u4e0d\u51fa\u6bd2\u7624\u6570\u636e\u7ed3\u6784\u9898\u4e86..)~~\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa$1$~$10^7$\u6240\u6709\u7684\u6570\u80fd\u5206\u89e3\u7684\u8d28\u56e0\u5b50\u4e2a\u6570..\n\n\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6b27\u62c9\u7ebf\u6027\u7b5b\u7b5b\u51fa\u6765..\u867d\u7136\u8fd9\u4e2a\u5e76\u4e0d\u662f\u79ef\u6027\u51fd\u6570..\n\n\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u524d$40$\u9879..\u8fd9\u4e48\u591a\u5df2\u7ecf\u591f\u7528\u4e86..\n\n\u7136\u540e\u6211\u4eec\u628a\u7b2c$i$\u9879\u6539\u6210\u539f\u6765\u7684\u7b2c$i$\u9879\u51cf\u53bb\u7b2c$i-1$\u9879..\n\n\u8fd9\u6837\u5b50\u5c31\u53d8\u6210\u4e86\u4e0e\u4e0a\u4e00\u4e2a\u9694\u591a\u5c11\u4e2a\u5c31\u518d\u53d6\u4e00\u4e2a\u6570\u4e86..\n\n\u6bd4\u5982\u8bf4\u539f\u6765\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f:1, 2, 3, 5, 8...\n\n\u7136\u540e\u6211\u4eec\u628a\u5b83\u9b54\u6539\u6210:1, 1, 1, 2, 3...(\u5b9e\u9645\u4e0a\u662f\u53f3\u79fb\u4e86\u4e24\u4e0b..)\n\n\u5bf9\u4e8e\u7b2c\u4e00\u884c\u6765\u8bf4,\u4e0a\u9762\u4e94\u4e2a\u6570\u5c31\u8868\u793a: \u7b2c\u4e00\u4e2a\u8981\u9009\u7684\u662f\u4e0a\u4e00\u4e2a(\u6ca1\u6709\u4e3a$0$)\u7684\u540e\u4e00\u4f4d: $1$\n\n\u7b2c\u4e8c\u4e2a\u8981\u9009\u7684\u5c31\u662f\u4e0a\u4e00\u4e2a($1$)\u7684\u540e\u4e00\u4f4d: $2$\n\n\u7b2c\u4e09\u4e2a\u8981\u9009\u7684\u5c31\u662f\u4e0a\u4e00\u4e2a($2$)\u7684\u540e\u4e00\u4f4d: $3$\n\n\u7b2c\u56db\u4e2a\u8981\u9009\u7684\u5c31\u662f\u4e0a\u4e00\u4e2a($3$)\u7684\u540e\u4e24\u4f4d: $5$\n\n\u7b2c\u4e94\u4e2a\u8981\u9009\u7684\u5c31\u662f\u4e0a\u4e00\u4e2a($5$)\u7684\u540e\u4e09\u4f4d: $8$\n\n...\n\n\u7136\u800c\u8fd8\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217..\n\n~~\u8fd9\u4e2a\u6709\u4e2a$\\pi$(pi)\u7528\u554a!!!~~\n\n\u5f53\u7136\u6709\u7528\u554a..\n\n~~\u6539\u6210\u4e86\u8fd9\u6837\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u641e$60$\u7684\u66b4\u529b\u8fa3!!!~~\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u524d10\u7684\u5206\u7ec4\u662f\u8fd9\u6837\u7684:\n\n|1| 2| 3| 4| 5| 6| 7| 8| 9| 10|...|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|1| 1| 1| 2| 1| 2| 2| 1| 3| 2|...|\n\n\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u5417??\n\n\u7136\u540e\u8ba9\u6211\u4eec\u628a\u4e4b\u524d\u7684\u5019\u9009\u7684\u4e1c\u897f\u653e\u8fdb\u53bb:\n\n\n|\u6570\u5b57|1| 2| 3| 4| 5| 6| 7| 8| 9| 10|...|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|**\u5f52\u5c5e**|1|1|1|2|1|2|2|1|3|2|...|\n|**\u7b2c$1$\u884c\u7684\u5019\u9009**|1|1|1|2|1|3|2|1|5|4|...|\n|**\u7b2c$2$\u884c\u7684\u5019\u9009**|(1)-|(1)-|(1)-|1|(1)-|1|1|(1)-|2|1|...|\n|**\u7b2c$3$\u884c\u7684\u5019\u9009**|(1)-|(1)-|(1)-|(1)-|(1)-|(1)-|(1)-|(1)-|1|(1)-|...|\n\n\u5f53\u7136,\u8fd9\u91cc\u9762\u6253'-'\u7684\u8868\u793a\u4e0d\u53ef\u80fd\u9009\u5230\u7684..\u62ec\u53f7\u8868\u793a\u6ca1\u6709\u6539\u53d8(\u6216\u8005\u8bf4\u662f\u65e0\u5173\u7684)\u5019\u9009..\n\n\u7136\u540e\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u4e00\u70b9: \u4e00\u4e2a\u6570\u5b57\u5982\u679c\u5c5e\u4e8e\u524d\u9762\u7684\u884c\u662f\u4e0d\u53ef\u80fd\u5f71\u54cd\u5230\u540e\u9762\u7684\u884c\u7684\u5019\u9009\u7684..\n\n#### \u800c\u4e14\u4ece\u6570\u5b57\u4e3a10\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u770b\u51fa:\u5982\u679c\u5f53\u524d\u5019\u9009\u7684\u6709\u591a\u4e2a\u4e3a1\u7684(\u7b2c$2$\u884c\u548c\u7b2c$3$\u884c),\u4f18\u5148\u9009\u62e9\u884c\u6570\u5c0f\u7684(\u7b2c$2$\u884c),\u5e76\u4e14\u884c\u6570\u5927\u7684(\u7b2c$3$\u884c)\u5019\u9009\u4e0d\u6539\u53d8(\u867d\u7136\u8fd9\u91cc\u8c8c\u4f3c\u770b\u4e0d\u51fa\u6765,\u4f46\u662f\u53ef\u4ee5\u81ea\u5df1\u591a\u5199\u5199\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u4e86)..\u5e76\u4e14\u4e0d\u662f\u53ef\u9009\u884c\u4e14\u6bd4\u5f53\u524d\u9009\u62e9\u884c(\u7b2c$2$\u884c)\u5c0f\u7684(\u7b2c$1$\u884c)\u5019\u9009\u4e5f\u8981\u51cf..\n\n\u4e0d\u4fe1\u53ef\u4ee5\u81ea\u5df1\u8bd5\u8bd5..~~Markdown\u7684\u8868\u683c\u771f\u96be\u5199..~~\n\n\u7136\u540e\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u79bb\u7ebf\u8be2\u95ee\u7136\u540e$O(NK)$\u6a21\u62df\u4e86..\n\n\u81f3\u4e8e\u6b63\u89e3..\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u503c,\u533a\u95f4\u51cf\u6cd5,\u8fd9\u4e2a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u641e\u5c31\u597d\u4e86..\n\n\u9644\u4e0a\u4e00\u4e2a\u5c0f\u4f18\u5316:\u5982\u679c\u5f53\u524d$10^4$\u7684\u884c\u5185\u5019\u9009\u90fd\u5927\u4e8e$1$(\u5047\u8bbe\u662f$x$),\u90a3\u4e48\u540e\u9762$x-1$\u7684\u6570\u90fd\u80af\u5b9a\u4e0d\u662f\u8fd9$10^4$\u884c\u5185\u7684\u4e1c\u897f..\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5728\u679a\u4e3e$N$\u7684\u65f6\u5019\u52a0\u4e0a$x-1$,\u7136\u540e$1$~$10^4$\u533a\u95f4\u51cf\u53bb$x-1$\u5c31\u597d\u4e86..\n\n\u9644\u4e0a\u4e11\u964b\u800c\u5f02\u5e38\u81c3\u80bf\u7684\u4ee3\u7801..\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define reg register\n#define enter putchar('\\n')\n#define ls (Node << 1)\n#define rs ((Node << 1) | 1)\n#define MAXN 5000000\n#define MAXT 1000000\n#define MAXK 10000\n\nconst char FI[] = \"queue.in\";\nconst char FO[] = \"queue.out\";\n\ntypedef short sh;\n\ninline int Min(reg int a, reg int b) { return a < b ? a : b; }\n\ninline int read() {\n    reg int s = 0, t = 1; reg char ch = getchar();\n    while(ch > '9' || ch < '0') t *= ch == '-' ? -1 : 1, ch = getchar();\n    while(ch >= '0' && ch <= '9') s = s * 10 + ch - '0', ch = getchar();\n    return s * t;\n}\n\nstruct Node {\n    sh k;\n    int n;\n    int id;\n}Ask[MAXT + 1];\n\nbool operator < (Node a, Node b) {\n    return a.n < b.n;\n}\n\nint T;\nsh s[MAXN + 1];\nint res[MAXT + 1];\nint fib[50] = {1, 1};\nint prime[40 * MAXK];\nbitset<MAXN + 1>Check;\n\nint Id[MAXK << 5];\nint pos[MAXK << 5];\nint tag[MAXK << 5];\nint Tree[MAXK << 5];\n\ninline void init() {\n    reg int tot = 0;\n    for(reg int i = 2; i <= MAXN; i++) {\n        if(!Check[i]) prime[++tot] = i, s[i] = 1;\n        for(reg int j = 1; j <= tot && i * prime[j] <= MAXN; j++) {\n            Check[i * prime[j]] = 1, s[i * prime[j]] = s[i] + 1;\n            if(i % prime[j] == 0) break;\n        }\n    }\n    for(reg int i = 2; i < 50; i++) fib[i] = fib[i - 1] + fib[i - 2];\n    for(reg int i = 49; i > 1; i--) fib[i] -= fib[i - 1];\n    T = read();\n    for(reg int i = 1; i <= T; i++)\n        Ask[i].n = read(), Ask[i].k = read(), Ask[i].id = i;\n    sort(Ask + 1, Ask + T + 1);\n}\n\ninline void build(reg int Node, reg int L, reg int R) {\n    Tree[Node] = 1;\n    if(L == R) {\n        Id[Node] = L, pos[Node] = Node;\n        return ;\n    }\n    reg int mid = (L + R) >> 1;\n    build(ls, L, mid), build(rs, mid + 1, R);\n    pos[Node] = pos[ls];\n}\n\ninline void Add(reg int Node, reg int L, reg int R, reg int l, reg int r, reg int k) {\n    if(l <= L && R <= r) {\n        Tree[Node] += k, tag[Node] += k;\n        return ;\n    }\n    Tree[ls] += tag[Node]; tag[ls] += tag[Node];\n    Tree[rs] += tag[Node]; tag[rs] += tag[Node];\n    tag[Node] = 0;\n    reg int mid = (L + R) >> 1;\n    if(l <= mid) Add(ls, L, mid, l, r, k);\n    if(r > mid) Add(rs, mid + 1, R, l, r, k);\n    Tree[Node] = min(Tree[ls], Tree[rs]);\n    pos[Node] = (Tree[Node] == Tree[ls] ? pos[ls] : pos[rs]);\n}\n\nint main() {\n    init();\n    reg int M = Ask[T].n;\n    reg int id = 1;\n    reg int g[MAXK + 1];\n    reg int ans[MAXK + 1]; memset(ans, -1, sizeof(ans));\n    for(reg int i = 1; i <= 10000; i++) g[i] = 1;\n    build(1, 1, 10000);\n    for(reg int i = 1, Mi, add, ID; id <= T && i <= M; i++) {\n        Mi = pos[1], ID = Id[Mi];\n        Add(1, 1, 10000, ID, ID, 0);\n        add = Tree[Mi];\n        Add(1, 1, 10000, 1, ID, -add);\n        if(add > 1 && ID < 10000)\n            Add(1, 1, 10000, ID + 1, 10000, 1 - add);\n        Add(1, 1, 10000, ID, ID, fib[++g[ID]]);\n        while(id <= T && Ask[id].n < i + add - 1) res[Ask[id].id] = ans[Ask[id].k], id++;\n        i += add - 1;\n        if(i > M || id > T) break;\n        ans[ID] += s[i] + (ans[ID] < 0);\n        while(id <= T && Ask[id].n <= i) res[Ask[id].id] = ans[Ask[id].k], id++;\n    }\n    for(reg int i = 1; i <= T; i++) printf(\"%d\", res[i]), enter;\n    return 0;\n}\n```",
        "postTime": 1538225507,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "T2"
    }
]