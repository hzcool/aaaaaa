[
    {
        "content": "> [\u5b89\u5229\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2](http://bubbleioa.top/archives/613)\n> [\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3698)\n\n---\n\n\u9996\u5148\u8fd9\u662f\u4e00\u9897\u6811\u3002\n\n\u8fd9\u4e00\u9898\u6211\u4eec\u7528\u8d2a\u5fc3\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\uff0c\u9996\u5148\u6765\u770b\u770b\u6837\u4f8b\uff1a\n\n![](http://bubbleioa.top/wp-content/uploads/2018/12/P3698-1.png)\n\n\u6837\u4f8b1\u5f88\u4e0d\u53cb\u597d\uff0c\u4e0d\u5982\u4e0d\u7ed9\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u7ecf\u8fc73\u4e2a\u70b9\u3002\n\n![](http://bubbleioa.top/wp-content/uploads/2018/12/P3698-2.png)\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u6837\u4f8b2\u53d1\u73b0\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\n\n\u4e3a\u4e86\u5b9e\u73b0\u7ecf\u8fc7\u7684\u70b9\u6700\u591a\u7684\u8fd9\u4e00\u6761\u4ef6\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u6b21\u8d70\u4e00\u6b65\u90fd\u591a\u8d70\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u6211\u4eec\u9009\u62e9\u6700\u957f\u94fe\u7684\u8bdd\uff0c\u5728\u94fe\u4e0a\u6bcf\u8d70\u4e00\u6b65\u5c31\u591a\u8d70\u4e86\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8d70\u4e0d\u5b8c\u6700\u957f\u94fe\uff0c\u90a3\u7b54\u6848\u5c31\u662f\u6b65\u6570+1\uff0c\u800c\u5982\u679c\u8d70\u5b8c\u6700\u957f\u94fe\u8fd8\u6709\u5269\u4f59\u6b65\u6570\u7684\u8bdd\uff0c\u6bcf\u4e24\u6b65\u53ef\u4ee5\u591a\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u3002\n\n\n\n**\u4e3a\u4ec0\u4e48\u5269\u4f59\u6b65\u6570\u6bcf\u4e24\u6b65\u53ef\u4ee5\u591a\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\uff1f**\n\n\u5bf9\u4e8e\u6ca1\u6709\u5168\u8bbf\u95ee\u7684\u60c5\u51b5\uff08\u5982\u679c\u8fd9\u79cd\u65b9\u6cd5\u6c42\u51fa\u6765\u7684\u503c\u5927\u4e8e\u603b\u6570\uff0c\u5219\u8f93\u51fa\u603b\u6570\uff09\uff0c\u6700\u957f\u94fe\u4e0a\u80af\u5b9a\u5b58\u5728\u4e00\u6761\u8fb9\u8fde\u7740\u4e00\u4e2a\u6ca1\u6709\u8bbf\u95ee\u7684\u8282\u70b9 \uff0c\u5f53\u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u82b1\u4e24\u6b65\u53bb\u8bbf\u95ee\u518d\u56de\u6765\u3002\n\n**\u4e3a\u4ec0\u4e48\u6700\u957f\u94fe\u662f\u6700\u4f18\u7684\uff1f**\n\n~~\u663e\u7136~~\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4e0d\u8d70\u6700\u957f\u94fe\u7684\u8bdd\uff0c\u6211\u4eec\u8d70\u4efb\u610f\u5176\u4ed6\u7684\u94fe\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u90fd\u6ca1\u6709\u6700\u957f\u94fe\u5927\uff0c\u867d\u7136\u5269\u4e0b\u7684\u5269\u4f59\u6b65\u6570\u591a\uff0c\u4f46\u662f\u6839\u636e\u4e0a\u9762\u7684\u63a8\u8bba\uff0c\u6bcf\u4e24\u4e2a\u5269\u4f59\u6b65\u6570\u624d\u6709\u4e00\u4e2a\u8d21\u732e\uff0c\u56e0\u6b64\u6700\u957f\u94fe\u662f\u6700\u4f18\u7684\u3002\n\n\n\n\u8bb2\u5f97\u5df2\u7ecf\u6bd4\u8f83\u6e05\u695a\u4e86\uff0c\u6709\u4e9b\u7ec6\u8282\u6ca1\u6709\u63d0\u5230\uff0c\u5efa\u8bae\u5148\u81ea\u5df1\u5199\u4e00\u904d\u518d\u770b\u4ee3\u7801\uff01\uff01\n\n\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 103;\nint Nt[MAXN<<1],Head[MAXN<<1],to[MAXN<<1],tot;\nbool used[MAXN];\nint n,m;\nint mx=0;\n\nvoid add(int a,int b){\n\tNt[++tot]=Head[a];\n\tto[tot]=b;\n\tHead[a]=tot;\n}\t\n\nvoid dfs(int pos,int dep){//\u6700\u957f\u94fe\u53ef\u4ee5\u7528\u6df1\u641c\u8dd1\u6700\u5927\u6df1\u5ea6\u5f97\u5230\n\tused[pos]=1;\n    mx=max(mx,dep);\n\tfor(int i=Head[pos];i;i=Nt[i]){\n\t\tint y=to[i];\n\t\tif(used[y])continue;\n\t\tdfs(y,dep+1);\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);add(b,a);\n\t}\n\tdfs(0,1);\n\tif(m<=mx-1)printf(\"%d\\n\",m+1);//\u5982\u679c\u8d70\u4e0d\u5b8c\u6700\u957f\u94fe\uff0c\u90a3\u7b54\u6848\u5c31\u662f\u6b65\u6570+1\n\telse printf(\"%d\\n\",min(n,mx+(m-mx+1)/2));\n\treturn 0;\n}\n```\n\n",
        "postTime": 1545211517,
        "uid": 61150,
        "name": "\u5192\u6ce1ioa",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "# \u9898\u89e3\n\n//\u6211\u7684\u7b2c\u4e00\u4e2a\u6811\u578bdp\uff1f\uff08\u53ef\u80fd\u4ee5\u524d\u6253\u8fc7\u6811\u578bdp\u7136\u800c\u6211\u5e76\u4e0d\u77e5\u9053\u90a3\u662f\u6811\u578bdp\uff09\n\n\u5f88\u660e\u663e\u662f\u68f5\u6811\uff01\n\n\u66b4\u529b\u4e0d\u80fd\u8fc7\uff01\n\n\u6240\u4ee5\u6811\u578bdp\uff08\u7136\u800c\u5f88\u5947\u602a\uff0c\u8d2a\u5fc3\u53ef\u4ee5AC\uff01\u90a3\u4fe9\u4f4d\u6253\u8d2a\u5fc3\u306e\u795e\u7287\u8bf4\u53ef\u4ee5\u8bc1\u660e\uff0c\u7136\u800c\u6211\u4e0d\u4f1a\uff01\uff09\u3002\n\n\n\u9996\u5148\u6211\u4eec\u5f97\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9009\u4e2d\u4e00\u4e2a\u5b83\u7684\u513f\u5b50\u8282\u70b9\u3002\u5bf9\u4e8e\u8fd9\u79cd\u9009\u6cd5\uff0c\u6211\u4eec\u6709\u4e09\u79cd\u8d70\u7684\u65b9\u6cd5\uff1a\n\n1. \u5411\u513f\u5b50\u8282\u70b9\u7684\u65b9\u5411\u4e00\u6761\u8def\u8d70\u5230\u9ed1\uff0c\u4e0d\u8fd4\u56de\u5230\u5f53\u524d\u8282\u70b9\u3002\n\n2. \u5411\u513f\u5b50\u8282\u70b9\u7684\u65b9\u5411\u8d70\u4e00\u5708\u56de\u6765\u3002\n\n3. \u5411\u513f\u5b50\u8282\u70b9\u7684\u65b9\u5411\u8d70\u4e00\u5708\u56de\u6765\u4e14\u518d\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u4e00\u6761\u8def\u8d70\u5230\u9ed1\uff0c\u4e0d\u4f1a\u6765\u3002\n\n\n\u7b80\u8981\u5730\u8bf4\u5c31\u662f\uff1a\n\n1. \u2199\n2. \u27f2\n3. \u27f2\u2198\n\n\n\u8d70\u6cd51\u548c2\u4e0d\u4f1a\u8fd4\u56de\u5230\u5f53\u524d\u8282\u70b9\uff0c\u5f53\u7136\u4e5f\u5c31\u6ca1\u6cd5\u56de\u5230\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5206\u4e24\u4e2a\u6570\u7ec4\u5b58\u72b6\u6001\uff1a\n\n$f0[i][j]$\u8868\u793a\u5f53\u524d\u5230\u4e86\u8282\u70b9$i$\uff0c\u8fd8\u53ef\u4ee5\u8d70$j$\u6b65\u65f6**\u4e0d\u9700\u8981**\u56de\u5230\u8282\u70b9$i$\u65f6\u6700\u591a\u53ef\u4ee5\u8bbf\u95ee\u7684\u8282\u70b9\u6570\u3002\n\n$f1[i][j]$\u8868\u793a\u5f53\u524d\u5230\u4e86\u8282\u70b9$i$\uff0c\u8fd8\u53ef\u4ee5\u8d70$j$\u6b65\u65f6**\u9700\u8981**\u56de\u5230\u8282\u70b9$i$\u65f6\u6700\u591a\u53ef\u4ee5\u8bbf\u95ee\u7684\u8282\u70b9\u6570\u3002\n\n\n\u5177\u4f53\uff1a\n\n\u5bf9\u4e8e$dfs(u)$\uff0c\u6211\u4eec\u679a\u4e3e\u5b50\u8282\u70b9\u4e3ai\uff0c\u518d\u4ecen\uff08\u6700\u591a\u53ef\u4ee5\u8d70\u7684\u6b65\u6570\uff09\u52301\u679a\u4e3e\u5f53\u524d\u5269\u4f59\u6b65\u6570\u4e3aj\uff0c\u518d\u4ece1\u5230j\u679a\u4e3e\u4e0b\u4e00\u6b65\u7684\u5269\u4f59\u6b65\u6570k\u3002\n\n\u5bf9\u4e8e\u8d70\u6cd51\uff0c\u9700\u8981\u6ee1\u8db3$j-k>0$\uff0c\u7136\u540e\uff1a$f[0][u][j]=max(f[0][u][j],f[0][*i][k]+f[1][u][j-k-1])$\n\n\u5bf9\u4e8e\u8d70\u6cd52\uff0c\u9700\u8981\u6ee1\u8db3$j-k>=2$\uff0c\u7136\u540e\uff1a$f[1][u][j]=max(f[1][u][j],f[1][*i][k]+f[1][u][j-k-2])$\n\n\u5bf9\u4e8e\u8d70\u6cd53\uff0c\u9700\u8981\u6ee1\u8db3$j-k>=2$\uff0c\u7136\u540e\uff1a$f[0][u][j]=max(f[0][u][j],f[1][*i][k]+f[0][u][j-k-2])$\n\n\n\u4e3a\u4ec0\u4e48\u8d70\u6cd51\u548c\u8d70\u6cd52\u8981\u52a0\u4e00\u4e2a$f[1][u][j-k-1]$\u6216$f[1][u][j-k-2]$\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5148\u4ece\u522b\u7684\u5730\u65b9\u7ed5\u4e00\u5708\u56de\u6765\uff0c\u518d\u6267\u884c\u8d70\u6cd51\u3001\u8d70\u6cd52\u3002\n\n\n\u8fd8\u6709\uff0c\u679a\u4e3ej\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4ece\u5927\u5230\u5c0f\uff0c\u539f\u56e0\u5c31\u50cf01\u80cc\u5305\uff0c\u8981\u4ece\u5927\u7684\u5230\u5c0f\u7684\u66f4\u65b0\uff0c\u4e0d\u7136\u72b6\u6001\u4e4b\u95f4\u4f1a\u4e92\u76f8\u5f71\u54cd\uff0c\u7136\u540ewa\uff08\u8003\u8bd5\u7684\u65f6\u5019\u8111\u5b50\u62bd\u4e86\u5c31\u5199\u9519\u4e86\u8fd9\u91cc\uff0c\u6389\u4e8650\u5206\uff09\u3002\n\n\n\u5176\u4ed6\u5177\u4f53\u770b\u4ee3\u7801\u5427\uff01\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename tp>void in(tp & dig)\n{\n    char c=getchar();dig=0;\n    while(!isdigit(c))c=getchar();\n    while(isdigit(c))dig=dig*10+c-'0',c=getchar();\n}\nint v,n,f[2][105][105],fa[105];\nlist<int> g[105];\nvoid initdfs(int u)\n{\n    for(list<int>::iterator i=g[u].begin();i!=g[u].end();i++)\n        if(*i!=fa[u])\n            fa[*i]=u,initdfs(*i);\n}\nvoid dfs(int u)\n{\n    f[0][u][0]=f[1][u][0]=1;\n    for(list<int>::iterator i=g[u].begin();i!=g[u].end();i++)\n        if(*i!=fa[u])\n        {\n            dfs(*i);\n            for(int j=n;j>0;j--)\n                for(int k=0;k<j;k++)\n                {\n                    if(j-k>=2)\n                    {\n                        f[1][u][j]=max(f[1][u][j],f[1][*i][k]+f[1][u][j-k-2]);\n                        f[0][u][j]=max(f[0][u][j],f[1][*i][k]+f[0][u][j-k-2]);\n                    }\n                    f[0][u][j]=max(f[0][u][j],f[0][*i][k]+f[1][u][j-k-1]);\n                }\n        }\n    for(int i=1;i<=n;i++)\n        f[0][u][i]=max(f[0][u][i],f[0][u][i-1]),\n        f[1][u][i]=max(f[1][u][i],f[1][u][i-1]);\n}\nint main()\n{\n    in(v),in(n);\n    for(int i=1,a,b;i<v;i++)in(a),in(b),g[a].push_back(b),g[b].push_back(a);\n    initdfs(0),dfs(0),printf(\"%d\\n\",f[0][0][n]);\n    return 0;\n}\n```",
        "postTime": 1491988126,
        "uid": 22388,
        "name": "XZYQvQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u662f\u4e00\u9053\u6811\u578bDP\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u505a\uff1f\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5148\u8fd9\u6837\u5b9a\u4e49\u72b6\u6001\uff0c$f_{i,j}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u8282\u70b9,\u5411\u4e0b\u8d70$j$\u6b65\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u70b9,\u4f46\u5f88\u660e\u663e,\u53ea\u662f\u8fd9\u6837\u662f\u4e0d\u884c\u7684,\u6240\u4ee5\u6211\u4eec\u518d\u52a0\u4e00\u7ef4,\u7b2c\u4e09\u7ef4\u4e3a0\u8868\u793a\u4e0d\u4f1a\u5230\u6839\u8282\u70b9,\u7b2c\u4e09\u7ef4\u4e3a1\u8868\u793a\u9700\u8981\u56de\u5230\u6839\u8282\u70b9,\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\n$\\begin{cases}f_{i,j,0}=max(f_{i,j-t,0}+f_{v,t-2,1},f_{i,j-t,1}+f_{v,t-1,0})\\\\f_{i,j,1}=max(f_{i,j-t,1}+f_{v,t-2,1})\\end{cases}$\n\n(\u5176\u4e2d$i$\u8868\u793a\u7236\u8282\u70b9,$j$\u8868\u793a\u4e00\u5171\u8d70\u4e86\u591a\u5c11\u6b65,$v$\u8868\u793a\u513f\u5b50\u8282\u70b9,$t$\u8868\u793a\u513f\u5b50\u8282\u70b9\u5411\u4e0b\u8d70\u591a\u5c11\u6b65)\n\n\u6ce8\u610f\u5230\u8fd9\u91cc\u9762\u4e3a\u4ec0\u4e48\u8981\u51cf\u4e00\u4e2a1\u62162,\u56e0\u4e3a\u5411\u4e0b\u8d70\u5982\u679c\u8981\u56de\u6765,\u90a3\u4e48\u5c31\u8fd8\u9700\u8981\u7ecf\u8fc72\u6b21\u7236\u4eb2\u4e0e\u513f\u5b50\u4e4b\u95f4\u7684\u8fb9,\u5982\u679c\u4e0d\u4f1a\u6765,\u5c31\u53ea\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21.\n\n\u90a3\u4e48\u4ee3\u7801\u5c31\u5f88\u5bb9\u6613\u5f97\u51fa\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nint n, k;\nint head[205], ver[205], net[205], tot, f[205][205][2];\n\nvoid add(int a,int b)\n{\n    net[++tot] = head[a];\n    head[a] = tot;\n    ver[tot] = b;\n}\n\nvoid dfs(int u,int fa)\n{\n    f[u][0][0] = f[u][0][1] = 1;\n    for (int i = head[u]; i; i = net[i])\n    {\n        int v = ver[i];\n        if(v == fa)\n            continue;\n        dfs(v, u);\n        for (int j = k; j >= 0; j--)\n        {\n            for (int t = 0; t <= j; t++)\n            {\n                f[u][j][0] = max(f[u][j][0], max(f[u][j - t][0] + f[v][t - 2][1], f[u][j - t][1] + f[v][t - 1][0]));\n                f[u][j][1] = max(f[u][j][1], f[u][j - t][1] + f[v][t - 2][1]);\n            }\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &k);\n    for (int i = 1; i < n; i++)\n    {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        add(u + 1, v + 1), add(v + 1, u + 1);\n    }\n    dfs(1, -1);\n    int ans = 0;\n    for (int i = 0; i <= k; i++)\n        ans = max(ans, f[1][i][0]);\n    printf(\"%d\", ans);\n}\n```\n",
        "postTime": 1607349780,
        "uid": 277863,
        "name": "BzhH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "\u8bbe $f_{i, j}$ \u8868\u793a\u5728 $i$ \u6240\u5728\u5b50\u6811\u4e2d\u8d70 $j$ \u6b65\u65f6\u80fd\u591f\u6700\u591a\u80fd\u591f\u8d70\u5230\u591a\u5c11\u4e2a\u70b9\u3002\n\n\u53d1\u73b0\u8fd9\u4e48\u4e00\u4e2a\u4e8b\u60c5\uff1a\u5982\u679c\u5f80\u4e0b\u8d70\u8981\u56de\u6765\uff0c\u5047\u8bbe\u8d70 $k$ \u6b65\uff0c\u53ea\u8981\u7ed3\u70b9\u591f\uff0c\u90a3\u4e48\u4e00\u5b9a\u80fd\u591f\u8bbf\u95ee\u5230 $\\frac {k} {2}$ \u4e2a\u7ed3\u70b9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u5b83\u7684\u5b50\u7ed3\u70b9\u548c\u4e00\u4e2a\u5728\u5b50\u7ed3\u70b9\u4e2d\u8d70\u7684\u6b65\u6570\uff0c\u5f97\u5230\u53ef\u4ee5\u4e0d\u8fd4\u56de\u65f6\u7684\u8bbf\u95ee\u6570 $f_{to}$\uff0c\u518d\u52a0\u4e0a\u8d70\u5269\u4e0b\u7684\u5b50\u6811\u4e14\u4e00\u5b9a\u8fd4\u56de\u7684\u8bbf\u95ee\u6570 $\\frac {i - j - [\\mathrm{is~root}]} {2}$\uff0c\u53d6\u6700\u5927\u503c\u4fbf\u662f\u7b54\u6848\u3002",
        "postTime": 1520680900,
        "uid": 37029,
        "name": "UnnamedOrange",
        "ccfLevel": 9,
        "title": "[CQOI 2017] \u5c0f Q \u7684\u68cb\u76d8"
    },
    {
        "content": "**Solution-1**\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\u7684\u5173\u952e\u8bcd\uff1a\u6811\uff0c\u8d70$n$\u6b65\uff0c\u6700\u5927\u5316\u7ecf\u8fc7\u70b9\u6570\uff0c$N,V\\leq 100$\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u662f\u4e00\u4e2a\u6811\u5f62$dp$\u7684\u9898\u76ee\n\n\u6211\u4eec\u8bbe$f(u, i)$\u8868\u793a\u5f53\u524d\u8d70\u5230\u8282\u70b9$u$\uff0c\u8d70\u4e86$i$\u6b65\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u70b9\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e24\u79cd\u53ef\u80fd\u6027\uff1a\n\n* \u4ece$u$\u7684\u5b50\u6811\u4e2d\u7ed5\u51e0\u4e2a\u5708\u5708\u540e\u56de\u6765\n* \u5728$u$\u7684\u5b50\u6811\u4e2d\u7ed5\u51e0\u4e2a\u5708\u5708\u540e\u5728\u5411\u67d0\u4e00\u4e2a\u5b50\u6811\u4e00\u8def\u8d70\u5230\u6b7b\n\n\u6240\u4ee5\u6211\u4eec\u591a\u8bb0\u4e00\u7ef4$0/1$\u8868\u793a\u662f\u5426\u56de\u5934\uff08\u56de\u5934\u4e3a$1$\uff0c\u4e0d\u56de\u5934\u4e3a$0$\uff09\n\n\u5bf9\u4e8e$f(u, i, 1)$\uff0c\u663e\u7136\u53ea\u80fd\u4ece$f(v, i, 1)$\u8f6c\u79fb\u8fc7\u6765\uff0c\u5176\u4e2d$v\\in Son_u$\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u540c\u6811\u5f62\u80cc\u5305\u7c7b\u4f3c\uff0c\u5373\u5c06$u$\u7684\u6bcf\u4e2a\u513f\u5b50\u7684$dp$\u503c\u770b\u4f5c\u4e00\u4e9b\u7269\u54c1\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a$v\\in Son_u$\uff0c$f(v, i)$\u5fc5\u53ea\u80fd\u9009\u4e00\u4e2a\uff0c\u5373\u4e3a\u5206\u7ec4\u80cc\u5305\u3002\u7136\u540e\u6bcf\u4e2a$dp$\u503c$f(v, i)$\u4e3a\u7684\u4ee3\u4ef7\u4e3a$i+2$\uff08$+2$\u662f\u56e0\u4e3a\u8981\u4ece$Edge(u, v)$\u8981\u8d70\u4e24\u6b21\uff09\uff0c\u4ef7\u503c\u4e3a$f(v, i)$\uff0c\u5bf9\u5176\u505a\u5206\u7ec4\u80cc\u5305\u5373\u53ef\n\n\u5bf9\u4e8e$f(u, i, 0)$\uff0c\u6211\u4eec\u53d1\u73b0\u5f53\u6211\u4eec\u679a\u4e3e$u$\u7684\u513f\u5b50$v$\u7684\u65f6\u5019\uff0c\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\n\n* \u5728$v$\u5904\u4e00\u8def\u8d70\u5230\u6b7b\n* \u5728$v$\u524d\u67d0\u4e00\u4e2a\u70b9\u4e00\u8def\u8d70\u5230\u6b7b\n* \u5728$v$\u540e\u67d0\u4e00\u4e2a\u70b9\u4e00\u8def\u8d70\u5230\u6b7b\n\n\u663e\u7136\u7b2c$3$\u79cd\u53ef\u80fd\u53ef\u4ee5\u88ab\u7b2c$1$\u3001$2$\u79cd\u53ef\u80fd\u8986\u76d6\uff08\u5f53\u679a\u4e3e\u5230\u540e\u9762\u7684\u513f\u5b50\u7684\u65f6\u5019\uff09\uff0c\u56e0\u800c\u6211\u4eec\u53ea\u8981\u8003\u8651\u524d\u4e24\u79cd\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u76f8\u5f53\u4e8e\u8981\u4ece\u4e0a\u4e00\u4e2a\u6ca1\u6709\u4e00\u8def\u8d70\u5230\u6b7b\u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u5373\u4e3a\uff1a\n$$\nf (u, i, 0) = \\max \\{ f(u, i-k-1, 1) + f(v, k, 0)\\}\n$$\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u8981\u4ece\u4e0a\u4e00\u4e2a\u5df2\u7ecf\u4e00\u8def\u8d70\u5230\u6b7b\u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u5373\u4e3a\uff1a\n$$\nf(u, i, 0) = \\max \\{f(u, i-k-2,0) + f(v, k, 1)\\}\n$$\n\u6240\u4ee5\u603b\u7684\u65b9\u7a0b\u5f0f\u4e3a\uff1a\n$$\nf(u, i, 0) = \\max {\\begin {cases} \\max (\\{ f(u, i-k-1, 1) + f(v, k, 0)\\}, \\\\ \\max \\{f(u, i-k-2,0) + f(v, k, 1)\\} \\\\ \\end {cases} }\n$$\n$$\nf (u, i, 1) = \\max \\{ f(v, i-k-2, 1) + f(v, k, 1) \\}\n$$\n\u65f6\u95f4\u590d\u6742\u5ea6\u770b\u4f3c\u662f$O(N^4)$\u7684\u4f46\u5176\u5b9e\u662f$O(N^3)$\uff0c\u56e0\u4e3a\u6bcf\u4e2a$dp$\u72b6\u6001\u6700\u591a\u53ea\u88ab\u7528\u4e86$N$\u6b21\n\n**Code-1**\n\n(\u8fd9\u91cc\u7531\u4e8e\u4e60\u60ef\u5c06\u9898\u76ee\u4e2d\u7684$V$\u6539\u4e3a\u4e86$n$\u53d8\u91cf\uff0c\u5c06\u9898\u76ee\u4e2d\u7684$N$\u6539\u4e3a\u4e86$m$\u53d8\u91cf)\n\n```c++\n#include <bits/stdc++.h>\n\n#define N (int) 105\n\nusing namespace std;\nint input () {\n    int x = 0, f = 0;\n    char c = getchar ();\n    while (c < '0' || c > '9') f = c == '-', c = getchar ();\n    while (c >= '0' && c <= '9') x = (x << 1) + (x << 3) + (c ^ 48), c = getchar ();\n    return f ? - x : x;\n}\n\nint n, m;\nstruct Edge {\n    int v, nxt;\n} edge[N<<1];\nint fst[N], ecnt;\nvoid add_edge (int u, int v) {\n    edge[ecnt].v = v, edge[ecnt].nxt = fst[u], fst[u] = ecnt ++;\n}\nvoid init_e () {\n    memset (fst, -1, sizeof (fst));\n}\n\nint dp[N][N][2];\nvoid dfs (int u, int f) {\n    for (int e = fst[u]; e != -1; e = edge[e].nxt) {\n        int v = edge[e].v;\n        if (v == f) continue;\n        dfs (v, u);\n    }\n\n    dp[u][0][1] = dp[u][0][0] = 1;\n    for (int e = fst[u]; e != -1; e = edge[e].nxt) {\n        int v = edge[e].v;\n        if (v == f) continue;\n        for (int i = m; i >= 1; i --) {\n            for (int j = 0; j < i; j ++) {\n                if (i-j-2 >= 0) {\n                    dp[u][i][1] = max (dp[u][i][1], dp[u][i-j-2][1] + dp[v][j][1]);\n                    dp[u][i][0] = max (dp[u][i][0], dp[u][i-j-2][0] + dp[v][j][1]);\n                }\n                dp[u][i][0] = max (dp[u][i][0], dp[u][i-j-1][1] + dp[v][j][0]);\n            }\n        }\n    }\n}\n\nint main () {\n    init_e ();\n    \n    n = input (), m = input ();\n    for (int i = 1; i < n; i ++) {\n        int u = input (), v = input ();\n        u ++, v ++;\n        add_edge (u, v);\n        add_edge (v, u);\n    }\n\n    dfs (1, 0);\n\n    int ans = 0;\n    for (int i = 1; i <= m; i ++) ans = max (ans, max (dp[1][i][0], dp[1][i][1]));\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n**Solution-2**\n\n*\uff08\u6211\u770b\u4e86\u9898\u89e3\u624d\u53d1\u73b0\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u66f4\u4f18\uff0c\u770b\u6765\u8fd8\u662f\u6211tcl T_T\uff09*\n\n\u597d\u591a\u9898\u89e3\u90fd\u63d0\u5230\u4e86\u8d2a\u5fc3\u7684\u505a\u6cd5\uff0c\u5176\u5b9e\u5982\u679c\u8bf4$n$\u51fa\u5230$1e5+$\u8fd9\u4e2a\u6837\u5b50\u7684\u8bdd\u4f1a\u66f4\u4e3a\u660e\u663e\u4e00\u70b9\n\n\u8fd8\u662f\u53c2\u7167\u6211\u4eec\u4e4b\u524d\u7684\u5206\u6790\uff0c\u6211\u4eec\u53d1\u73b0\u8def\u5f84\u4e00\u5b9a\u662f\u7ed5\u51e0\u4e2a\u5708\u5708\u540e\u518d\u4e00\u8def\u8d70\u5230\u6b7b\uff0c\u6211\u4eec\u8bbe\u7ed5\u5708\u5708\u5230\u8fbe\u7684\u70b9\u6570\u4e3a$A$\uff0c\u6700\u540e\u4e00\u8def\u8d70\u5230\u6b7b\u5230\u8fbe\u7684\u70b9\u6570\u4e3a$B$\uff0c\u90a3\u4e48\u6211\u4eec\u6240\u8d70\u7684\u6b65\u6570\u4e3a$A \\times 2 + B$\uff0c\u663e\u7136\u5f53$B$\u6700\u957f\u65f6\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u5230\u6700\u957f\u7684\u94fe\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u7b54\u6848\u3002\u8fd9\u91cc\u8bb8\u591a\u9898\u89e3\u90fd\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\uff0c\u8fd9\u91cc\u7ed9\u51fa\u8f83\u4e3a\u7b80\u7565\u7684\u8bc1\u660e\uff1a\n\n\u6211\u4eec\u8bbe\u6700\u540e\u7684\u4e00\u8def\u8d70\u5230\u6b7b\u7684\u90a3\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6570\u4e3a$L$\uff0c\u5219\u6240\u80fd\u8d70\u5230\u7684\u70b9\u6570\u4e3a$Ans = \\min \\{V, L+\\frac {N-(L-1)}{2}\\} = \\min \\{V, \\frac {N+L+1}{2}\\}$\n\n\u663e\u7136$Ans$\u5173\u4e8e$L$\u5355\u8c03\u9012\u589e\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5982\u679c\u6ca1\u4f30\u9519\u7684\u8bdd\uff09\uff1a$O(N)$\n\n**Code-2**\n\n\u5495\u5495\u5495\n\n",
        "postTime": 1605627877,
        "uid": 74333,
        "name": "BDFCL",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698"
    },
    {
        "content": "\u6811\u5f62dp\u9898\u5355\u600e\u4e48\u4f1a\u6709\u8fd9\u9898\uff08\n\n\u770b\u4e86\u534a\u5929\u7ec8\u4e8e\u61c2\u4e86\u3002\n\n---\n\n\u8003\u8651\u8d2a\u5fc3\n\n\u663e\u7136\u7b2c\u4e00\u6b21\u8d70\u4ece\u6839\u7684\u6700\u957f\u94fe\u6700\u4f18\uff0c\u8bb0\u6700\u957f\u94fe\u957f\u5ea6\u4e3a $l$\u3002\n\n- \u5f53 $N\\le l$ \u65f6\uff0c\u8fd9\u65f6\u7b54\u6848\u5373\u4e3a\u53ef\u8d70\u7684\u6b65\u6570 +1 \uff08\u6839\u8282\u70b9\uff09\n\n- \u5f53 $N>l$ \u65f6\uff0c\u8fd9\u65f6\u7b54\u6848\u5c31\u662f $l+$ \u5269\u4e0b\u53ef\u4ee5\u5230\u8fbe\u7684\u4e0d\u540c\u70b9\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8bbf\u95ee\u4e00\u4e2a\u70b9\u8981\u7528 2 \u6b65\uff0c\u5373\u4e3a\u4e00\u53bb\u4e00\u56de\u3002\n\n\u5bf9\u4e8e\u6211\u4eec\u7684\u6700\u957f\u94fe\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u5230\u6700\u540e\u4e0d\u4f1a\u56de\u5230\u539f\u6765\u7684\u70b9\uff0c\u5373\u662f\u8bbf\u95ee\u5b8c\u5269\u4e0b\u53ef\u4ee5\u8d70\u7684\u70b9\u7136\u540e\u8d70\u6700\u957f\u94fe\uff08\u6216\u8005\u662f\u5728\u6700\u957f\u94fe\u4e2d\u987a\u4fbf\u8d70\u5269\u4e0b\u7684\u70b9\uff09\u3002\n\n\u5bf9\u4e8e\u6837\u4f8b 2\uff0c\u5047\u8bbe\u8fd9\u91cc\u7684\u6700\u957f\u94fe\u5c31\u662f $0->1->3->5$\n\n\u90a3\u4e48\u8fd9\u91cc\u7684\u8bbf\u95ee\u987a\u5e8f\u5e94\u8be5\u662f $0->1->3->7->3->5$ (\u5373\u4e3a\u5728\u6700\u957f\u94fe\u6ca1\u8bbf\u95ee\u5b8c\u7684\u65f6\u5019\u987a\u4fbf\u628a\u5269\u4e0b\u7684\u641e\u6389)\n\n\u4e8e\u662f\u7b54\u6848\u5c31\u662f $min(V,l+\\dfrac{N-(l-1)}{2})$\uff0c\u8fd9\u91cc $N-(l-1)$ \u5c31\u662f\u8d70\u5b8c\u6700\u957f\u94fe\u5269\u4e0b\u7684\u6b65\u6570\u3002\u7531\u4e8e\u6211\u4eec\u7b97\u7684\u5f0f\u5b50\u7684\u503c\u6709\u53ef\u80fd\u5927\u4e8e $V$\uff0c\u4e8e\u662f\u6211\u4eec\u53d6\u4e24\u4e2a\u7684\u6700\u5c0f\u503c\u3002\n\n\u4ee3\u7801\u5f88\u7b80\u5355\u4e86\uff0c\u770b\u61c2\u4e86\u5e94\u8be5\u90fd\u80fd\u5199\u51fa\u6765\uff08",
        "postTime": 1591431783,
        "uid": 119062,
        "name": "Lates",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff0c\u5e76\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\u8d2a\u5fc3\u3002\n\n\u9898\u610f\u7b49\u4ef7\u4e8e\uff1a\n\n> \u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u4ece\u6307\u5b9a\u7684\u6839\u8282\u70b9\u51fa\u53d1\u8d70 $n$ \u6b65\u4e00\u5171\u80fd\u904d\u5386\u591a\u5c11\u4e2a\u8282\u70b9\u3002\n\n\u8d70 $n$ \u6b65\u5728\u4e0d\u91cd\u590d\u904d\u5386\u7684\u60c5\u51b5\u4e0b\u81f3\u591a\u904d\u5386 $\\min(v,n+1)$ \u4e2a\u8282\u70b9\uff0c\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u662f\u6839\u8282\u70b9\u3002\u90a3\u4e48\u8003\u8651\u968f\u610f\u8d70\u4e00\u6761\u957f\u5ea6\u4e3a $l$ \u7684\u94fe\uff0c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- \u82e5 $l\\ge n$\uff0c\u5219\u6070\u597d\u80fd\u591f\u7528\u5b8c\u6240\u6709\u7684\u6b65\u6570\uff0c\u4e00\u5171\u904d\u5386 $n+1$\uff0c\u6b64\u65f6\u662f\u6700\u4f18\u7684\u3002\n- \u82e5 $l<n$\uff0c\u5219\u6211\u4eec\u5728\u904d\u5386\u8fd9\u6761\u94fe\u7684\u9014\u4e2d\u4e00\u5b9a\u80fd\u591f\u627e\u5230\u67d0\u4e00\u4e2a\u5c94\u8def\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5206\u652f\u51fa\u53bb\u904d\u5386\u56de\u6765\u3002\n\n\u8d70\u5c94\u8def\u518d\u904d\u5386\u56de\u6765\u6bcf\u4e2a\u70b9\u9700\u8981\u7ecf\u8fc7\u4e24\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u5171\u80fd\u904d\u5386 $\\left\\lceil\\frac{n-l}{2}\\right\\rceil$ \u4e2a\u70b9\u3002\n\n\u6b64\u65f6\u603b\u5171 $n$ \u6b65\u80fd\u591f\u904d\u5386\u7684\u70b9\u662f $l+\\left\\lceil\\frac{n-l}{2}\\right\\rceil$\uff0c\u8bbe\u6b65\u6570\u4e3a $f(l)$ \u518d\u6b21\u5206\u7c7b\u8ba8\u8bba\u5f97\u5230\uff1a\n\n$$f(l)=\\begin{cases}\\frac{n+l}{2}&(n-l)\\equiv 0\\pmod 2\\\\\\frac{n+l+1}{2}&(n-l)\\equiv 1\\pmod 2\\end{cases}$$\n\n\u4ed6\u4eec\u663e\u7136\u90fd\u662f\u5173\u4e8e $l$ \u7684\u589e\u51fd\u6570\uff08\u6c42\u5bfc\u8003\u8651\u7b26\u53f7\uff0c\u6216\u8005\u76f4\u63a5\u76ee\u6d4b\uff09\uff0c\u6240\u4ee5\u8d2a\u5fc3\u7b56\u7565\u5c31\u662f\u9009\u62e9\u5c3d\u53ef\u80fd\u5927\u7684 $l$\u3002\u56e0\u6b64\u9898\u76ee\u7b49\u4ef7\u8f6c\u5316\u4e3a\u6c42\u6700\u957f\u94fe\u3002\u800c\u6700\u957f\u94fe\u7684\u957f\u5ea6\u53ef\u4ee5\u7528 DFS \u6c42\u53d6\u3002\n\n\u5bf9\u4e8e\u7b54\u6848\uff1a\n\n- \u5982\u679c $l>n$\uff0c\u90a3\u4e48\u8f93\u51fa $n+1$ \u5373\u53ef\u3002\n- \u53cd\u4e4b\uff0c\u8003\u8651\u5c94\u8def\u8d21\u732e\uff1a\n\t- \u82e5\u603b\u6b65\u6570\u53ef\u4ee5\u904d\u5386\u6240\u6709\u70b9\uff0c\u8f93\u51fa $v$\u3002\n    - \u5426\u5219\u8f93\u51fa $l+\\left\\lceil\\frac{n-l}{2}\\right\\rceil$\u3002\n\n\u8003\u8651\u5230\u6574\u578b\u9664\u6cd5\u81ea\u52a8\u5411\u4e0b\u53d6\u6574\uff0c\u90a3\u4e48\u4f60\u52a0\u4e00\u4e4b\u540e\u8fdb\u884c\u9664\u6cd5\u5373\u53ef\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 205\nusing namespace std;\nstruct edge{\n\tint v,nxt;\n}e[N];\nbool vis[N];\nint h[N],cnt,V,n,mx;\nvoid add(int u,int v){\n\te[++cnt].nxt=h[u];\n\te[cnt].v=v;h[u]=cnt;\n}void dfs(int x,int dep){\n\tvis[x]=1;mx=max(mx,dep);\n\tfor(int i=h[x];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!vis[v])dfs(v,dep+1);\n\t}\n}signed main(){\n\tscanf(\"%d%d\",&V,&n);\n\tfor(int i=1;i<V;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}dfs(0,1);\n\tif(mx>n)printf(\"%d\\n\",n+1);\n\telse printf(\"%d\\n\",min(V,mx+((n-mx+1)>>1)));\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1629104558,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011P3698 [CQOI2017]\u5c0fQ\u7684\u68cb\u76d8"
    },
    {
        "content": "\u697c\u4e0bdalao\u89c2\u5bdf\u7684\u6027\u8d28\u771f\u7684\u5341\u5206\u5de7\u5999\n\n\u849f\u84bb\u7684\u6211\u6839\u672c\u6ca1\u6709\u60f3\u5230\u8fd9\u4e9b\u6027\u8d28\n\n\u65e2\u7136\u5927\u5bb6\u7684\u505a\u6cd5\u90fd\u8fd9\u4e48\u4f18\u96c5\uff0c\u90a3\u4e48\u6211\u6765\u5199\u4e00\u4e2a\u83bd\u592b\u505a\u6cd5\u5427\n\n\u8003\u8651\u5904\u7406\u6811\u4e0a\u8def\u5f84\u7684\u4e00\u79cd\u5957\u8def\n\n\u6211\u4eec\u8bb0f(u,j)\u8868\u793a\u4eceu\u5f80\u5b50\u6811\u4e2d\u8d70j\u6b65\u56de\u5230u\u7684\u6700\u591a\u7ecf\u8fc7\u70b9\u6570\n\u8bb0g(u,j)\u8868\u793a\u4eceu\u5f80\u5b50\u6811\u4e2d\u8d70j\u6b65\u4e0d\u4e00\u5b9a\u56de\u5230u\u7684\u6700\u591a\u7ecf\u8fc7\u70b9\u6570\n\u8003\u8651f(u,j)\u53ef\u4ee5\u7528\u6240\u6709\u513f\u5b50\u7684f\u6570\u7ec4\u5408\u5e76\u800c\u6765\uff0c\u5408\u5e76\u8fc7\u7a0b\u7c7b\u4f3c\u80cc\u5305\u3002\n\n\u4f46\u662fg(u,j)\u600e\u4e48\u8ba1\u7b97\u5462\uff1f\n\n\u53d1\u73b0\u5982\u679c\u4e0d\u4e00\u5b9a\u56de\u5230u\u7684\u8bdd\u6211\u4eec\u7684\u8def\u5f84\u4e00\u5b9a\u957f\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a\u5728\u4e00\u4e9b\u5b50\u6811\u4e2d(\u5305\u62ec\u7a7a\u5b50\u6811)\u7ed5\u4e86\u56de\u6765\uff0c\u5e76\u4e14\u5728\u8fd9\u4e9b\u5b50\u6811\u4e4b\u5916\u7684\u67d0\u68f5\u5b50\u6811\u8d70\u4e86\u4e0b\u53bb\u3002\n\n\u5047\u8bbe\u6700\u540e\u4ecev\u8d70\u4e86\u4e0b\u53bb\u3002\u7531\u4e8e\u4e0d\u53ef\u4ee5\u4ecev\u7ed5\u4e00\u5708\u518d\u4ecev\u8d70\u4e0b\u53bb\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230\u9664\u4e86v\u5b50\u6811\u4ee5\u5916\uff0c\u5176\u4ed6\u5b50\u6811\u5408\u5e76\u540e\u7684f\u6570\u7ec4\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e00\u5c42dp\u6570\u7ec4\u505a\u524d\u7f00\u548c\u3001\u540e\u7f00\u548c\u64cd\u4f5c\u3002\n\n\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u628a\u513f\u5b50\u5408\u5e76\u5230\u6839\u7684\u5b50\u95ee\u9898\u770b\u6210\u4e00\u4e2a\u5e8f\u5217\u95ee\u9898\uff0c\u628a\u513f\u5b50\u4f9d\u6b21\u6392\u5e03\u770b\u6210\u5e8f\u5217\u3002\u90a3\u4e48\u6211\u4eec\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2ai\u9884\u5904\u7406\u51fa\u5b83\u524d\u7f00\u5408\u5e76\u6210\u7684f\u6570\u7ec4\u548c\u540e\u7f00\u5408\u5e76\u6210\u7684f\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u628a\u5228\u5f00v\u5b50\u6811\u8f6c\u5316\u6210\u5408\u5e76\u4e00\u4e2a\u524d\u7f00\u548c\u4e00\u4e2a\u540e\u7f00\u3002\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e86\u3002\n```\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn = 205;\nstruct edge {\n    int v, next;\n} e[maxn << 1];\nint head[maxn], cnt;\nvoid adde(const int &u, const int &v) {\n    e[++cnt] = (edge) {v, head[u]};\n    head[u] = cnt;\n}\nint n, k, u, v, f[maxn][maxn];\nint Lf[maxn][maxn], Rf[maxn][maxn], g[maxn][maxn];\nint L[maxn], R[maxn], lst[maxn], tmp[maxn][maxn];\nvoid merge(int a[maxn], int b[maxn]) {\n\tfor(register int j = k; j >= 2; --j) {\n        for(register int l = j - 2; l >= 0; --l)\n            a[j] = max(a[j], a[j - l - 2] + b[l]);\n    }\n}\nvoid DPpref(int u) {\n\tint now = lst[u];\n\tif(now == -1) return;\n\twhile(~L[now]) merge(Rf[L[now]], Rf[now]), now = L[now];\n\twhile(~R[now]) merge(Lf[R[now]], Lf[now]), now = R[now];\n}\nvoid DPF(int u, int p) {\n\tint last = -1;\n    for(register int i = head[u]; i; i = e[i].next) {\n        int v = e[i].v;\n        if(v == p) continue;\n        if(~last) \n\t\t\tlst[u] = v, L[v] = last, R[last] = v;\n        last = v, DPF(v, u);\n        merge(f[u], f[v]);\n        memcpy(Rf[v], f[v], sizeof(f[v]));\n        memcpy(Lf[v], f[v], sizeof(f[v]));\n    }\n    DPpref(u);\n    for(register int j = k; j >= 0; --j)\n        if(f[u][j]) ++f[u][j];\n    f[u][0] = 1;\n}\n\nvoid DPG(int u, int p) {\n\tfor(register int i = head[u]; i; i = e[i].next) {\n\t\tint v = e[i].v;\n\t\tif(v == p) continue;\n\t\tDPG(v, u);\n\t\tif(~L[v]) merge(tmp[v], Lf[L[v]]);\n\t\tif(~R[v]) merge(tmp[v], Rf[R[v]]);\n\t\tfor(register int j = k; j >= 1; --j) {\n\t        for(register int l = j - 1; l >= 0; --l)\n\t            tmp[v][j] = max(tmp[v][j], tmp[v][j - l - 1] + g[v][l]);\n\t        g[u][j] = max(g[u][j], tmp[v][j]);\n\t    }\n\t}\n\tfor(register int j = k; j >= 0; --j)\n        if(g[u][j]) ++g[u][j];\n\tg[u][0] = 1;\n}\n\nint main() {\n\tmemset(L, -1, sizeof(L));\n\tmemset(R, -1, sizeof(R));\n\tmemset(lst, -1, sizeof(lst));\n    scanf(\"%d%d\", &n, &k);\n    for(register int i = 1; i < n; ++i)\n        scanf(\"%d%d\", &u, &v), adde(u, v), adde(v, u);\n    DPF(0, -1); \n    DPG(0, -1);\n    printf(\"%d\", g[0][k]);\n    return 0;\n}\n```",
        "postTime": 1540864431,
        "uid": 39907,
        "name": "Rockdu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "## \u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011\n\n### \u3010\u9898\u610f\u3011\n\u7ed9\u4f60\u4e00\u68f5\u5927\u5c0f\u4e3a$n$\u7684\u6811\uff0c\u95ee\u4ece$0$\u8282\u70b9\u51fa\u53d1\uff0c\u5728$m$\u6b65\u4ee5\u5185\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u8282\u70b9\u3002\n\n### \u3010\u5206\u6790\u3011\n\u8fd9\u9053\u9898\u5f53\u7136\u662f\u7528\u8d2a\u5fc3\u505a\u6700\u7b80\u5355\u5566\uff01\n\n\u8d2a\u5fc3\u7684\u60f3\uff0c\u6211\u4eec\u8981\u5c3d\u91cf\u907f\u514d\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u4e2a\u8282\u70b9\uff08\u6216\u540c\u4e00\u6761\u8fb9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6311\u957f\u7684\u8def\u5f84\u8d70\u3002\u7b2c\u4e00\u6b21\uff0c\u6211\u4eec\u5148\u4ece\u6839\u8282\u70b9\u8d70\u6700\u957f\u7684\u8def\u5f84\uff08\u8bbe\u6b64\u957f\u5ea6\u4e3a$mx$\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\n1. **\u5f53$mx>m$\u65f6**\uff0c\u5c31\u4ee3\u8868\u8d70\u4e0d\u5b8c\u6700\u957f\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$m+1$\uff08\u52a0\u4e0a\u6839\u8282\u70b9$0$\uff09\n\n1. **\u53cd\u4e4b**\uff0c\u5c31\u4ee3\u8868\u8d70\u5b8c\u4e86\u6700\u957f\u7684\u8def\u5f84\u4e4b\u540e\uff0c\u8fd8\u6709\u6b65\u6570\u5269\u4f59\u3002\u90a3\u6b64\u65f6\uff0c\u6211\u4eec\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u9700\u8981$2$\u6b65\uff08\u4e00\u53bb\u4e00\u56de\uff09\uff0c\u6ce8\u610f\u6b64\u65f6\u662f\u4e0a\u53d6\u6574\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\u3002\n```cpp\n/*\nluogu P3698\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,m;\nint mx;\nint ee,h[105],nex[105<<1],to[105<<1];\n\nvoid addedge(int x,int y)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\th[x] = ee;\n}\n\nvoid dfs(int x,int pre,int dep)\n{\n\tmx = max(mx,dep);\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(to[i]!=pre)\n\t\t\tdfs(to[i],x,dep+1);\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1,x,y;i<n&&cin>>x>>y;i++)\n\t{\n\t\tx++;\n\t\ty++;\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdfs(1,0,1);\n\tif(mx>m)\n\t\tcout<<m+1<<endl;\n\telse\n\t\tcout<<min(mx+(m-mx+1)/2,n)<<endl;\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff01",
        "postTime": 1578987222,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "### \u521a\u5f00\u59cb\u8fd8\u89c9\u5f97\u662f\u4e2aDP\uff0c\u65c1\u8fb9\u7684\u540c\u5b66\u4e5f\u5f80DP\u65b9\u9762\u601d\u8003\uff0c\u4f46\u89c9\u5f97\u8f6c\u79fb\u65b9\u7a0b\u4e0d\u597d\u63a8\u3002\n\n### \u5bf9\u9762\u7684\u5b66\u957f\u8bf4\u8fd9\u4e2a\u9898\u662f\u4e2a\u8d2a\u5fc3\uff0c\u90a3\u5c31\u7167\u7740\u8d2a\u5fc3\u6765\u505a\u5427\u3002\n\n## \u9996\u5148\uff0c\u6211\u4eec\u60f3\u8981\u7ecf\u8fc7\u7684\u70b9\u6700\u591a\uff0c\u5e76\u4e14\u5c11\u7528\u70b9\u6b65\u6570\uff0c\u5c31\u5e94\u8be5\u5148\u6cbf\u7740\u4e00\u6761\u94fe\u5f80\u4e0b\u8d70\uff0c\u5982\u679c\u8d70\u5230\u5e95\u6b65\u6570\u8fd8\u6ca1\u7528\u5b8c\u7684\u8bdd\uff0c\u80af\u5b9a\u5c31\u4f1a\u518d\u8f6c\u5230\u53e6\u4e00\u6761\u94fe\u4e0a\u5f80\u4e0b\u8d70\u3002\u8fd9\u4e2a\u5c31\u7c7b\u4f3c\u4e8eDFS\u4e86\u3002\n\n## \u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u8fd9\u4e00\u6761\u94fe\u8d70\u5230\u6700\u540e\u4e00\u70b9\u4e4b\u540e\uff0c\u5b83\u8fd8\u5269\u4e0b\u6ca1\u7528\u7684\u6b65\u6570\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u4ece\u8fd9\u4e2a\u94fe\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u8fd4\u56de\u5230\u6839\u8282\u70b9\u540e\u7ee7\u7eed\u53bb\u522b\u7684\u94fe\u4e0a\u641c\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5b83\u8fd8\u80fd\uff08\u5269\u4e0b\u603b\u6b65\u6570-\u8fd9\u6761\u94fe\u7684\u8282\u70b9\u6570+1\uff09\u4e2a\u6b65\u6570\u3002\u800c\u8fd9\u4e2a\u65f6\u5019\u5b83\u8fd8\u8981\u8fd4\u56de\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u767d\u767d\u8017\u8d39\u6389\uff08\u5269\u4e0b\u603b\u6b65\u6570-\u8fd9\u6761\u94fe\u7684\u8282\u70b9\u6570+1\uff09/2\u4e2a\u6b65\u6570\u3002\u90a3\u4e48\u6700\u7ec8\u8fd8\u80fd\u5269\u4e0b\uff08\u5269\u4e0b\u603b\u6b65\u6570-\u8fd9\u6761\u94fe\u7684\u8282\u70b9\u6570+1\uff09/2\u4e2a\u95f2\u7f6e\u7684\u6b65\u6570\u3002\u5982\u679c\uff0c\u8fd9\u4e2a\u95f2\u7f6e\u7684\u6b65\u6570+\u5f53\u524d\u94fe\u7684\u8282\u70b9\u6570\u8fd8\u8981\u6bd4\u603b\u7684\u8282\u70b9\u6570\u5927\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u8f93\u51fa\u8282\u70b9\u6570\u4e86\uff0c\u5426\u5219\u5c31\u8f93\u51fa\u5b83\u4fe9\u7684\u548c\u3002\n\n### \u6709\u70b9\u7ed5\uff0c\u4f46\u5982\u679c\u753b\u4e00\u4e2a\u56fe\uff0c\u5c31\u5bb9\u6613\u7406\u89e3\u591a\u4e86\uff0c\u4ed4\u7ec6\u60f3\u60f3\u3002\n\n\u6211\u7528\u7684\u90bb\u63a5\u8868\u6765\u5b58\u56fe\u3002\n\n### \u660e\u767d\u601d\u8def\u4e4b\u540e\uff0c\u770b\u4ee3\u7801\uff0c\u6709\u6ce8\u91ca\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<string.h>\n#include<math.h>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nstruct kkk{\n    int next,to;\n}edge[201];//\u7528\u90bb\u63a5\u8868\u6765\u5b58\u56fe\nint head[101];\nbool visited[101];\nint nodenum,stepnum,now,ans,maxstep;\nvoid search(int u,int father,int step,int ansnow)//u\u4ee3\u8868\u5f53\u524d\u8282\u70b9\uff0cfather\u4ee3\u8868\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0cstep\u4ee3\u8868\u5f53\u524d\u5df2\u7ecf\u7528\u7684\u6b65\u6570\uff0cansnow\u4ee3\u8868\u5f53\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4e2a\u6570\n{\n    int i,v;\n    if (step>stepnum) return;//\u5982\u679c\u5f53\u524d\u6b65\u6570\u6bd4\u603b\u7684\u6b65\u6570\u8fd8\u8981\u5927\u5c31return\n    ans=max(ans,ansnow);//\u66f4\u65b0\u80fd\u8bbf\u95ee\u7684\u6700\u5927\u8282\u70b9\u4e2a\u6570\n    maxstep=max(step,maxstep);//\u66f4\u65b0\u7528\u7684\u6700\u591a\u7684\u6b65\u6570\uff0c\u4e00\u4f1a\u8f93\u51fa\u7684\u65f6\u5019\u5224\u65ad\u8981\u7528\u5230\n    visited[u]=true;//\u628a\u5f53\u524d\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5df2\u8bbf\u95ee\u8fc7\n    for (i=head[u];i;i=edge[i].next)//\u679a\u4e3e\u6bcf\u4e00\u6761\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u8fde\u63a5\u7684\u8fb9\n    {\n        v=edge[i].to;//v\u662f\u5f53\u524d\u8fb9\u901a\u5411\u7684\u90a3\u4e2a\u70b9\n        if (v==father) continue;//\u5982\u679cv\u70b9\u662fu\u70b9\u7684\u7236\u4eb2\u5c31continue\uff0c\u5426\u5219\u4f1a\u5361\u4f4f\n        if (visited[v]==false) search(v,u,step+1,ansnow+1);//\u5982\u679cv\u70b9\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5c31\u7ee7\u7eedsearch\uff0c\u5f53\u524d\u70b9\u5c31\u53d8\u6210\u4e86v\u70b9\uff0c\u5b83\u7684\u7236\u8282\u70b9\u4e5f\u5c31\u6210\u4e86u\u70b9\uff0c\u5f53\u524d\u7528\u7684\u6b65\u6570\u8981+1\uff0c\u5f53\u524d\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4e2a\u6570\u4e5f\u8981+1\n    }\n}\nvoid add(int a,int b)//\u5b58\u56fe\n{\n    now++;\n    edge[now].to=b;\n    edge[now].next=head[a];\n    head[a]=now;\n}\nint main()\n{\n    int i,a,b,left;\n    memset(visited,0,sizeof(visited));\n    scanf(\"%d%d\",&nodenum,&stepnum);//\u8bfb\u5165\u603b\u7684\u8282\u70b9\u6570\u548c\u603b\u7684\u6b65\u6570\n    for (i=1;i<=nodenum-1;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n        add(b,a);//\u6ce8\u610f\uff0c\u8fd9\u4e2a\u9898\u5efa\u7684\u662f\u53cc\u5411\u8fb9\n    }\n    search(0,0,0,1);//\u5f00\u59cb\u6309\u7167\u8d2a\u5fc3\u6765\u641c\u7d22\n    if (maxstep==stepnum) printf(\"%d\\n\",ans);//\u5982\u679c\u7528\u7684\u6700\u5927\u6b65\u6570\u7b49\u4e8e\u603b\u7684\u6b65\u6570\uff0c\u5219\u8bc1\u660e\u6240\u6709\u6b65\u6570\u6b63\u597d\u7528\u5b8c\uff0c\u5c31\u6309\u7167ans\u539f\u6837\u8f93\u51fa\n    else//\u5426\u5219\uff0c\u5c31\u4ee3\u8868\u8d70\u5230\u8fd9\u4e00\u6761\u94fe\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8fd8\u5269\u4e0b\u4e86\u53ef\u7528\u7684\u6b65\u6570\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u8f6c\u5230\u53e6\u4e00\u4e2a\u6761\u94fe\u4e0a\u53bb\n    {\n        left=stepnum-ans+1;//left\u662f\u4ece\u6839\u8282\u70b9\u8d70\u5230\u5f53\u524d\u94fe\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u8fd8\u5269\u4e0b\u7684\u6b65\u6570\n        if ((ans+left/2)>=nodenum) printf(\"%d\\n\",nodenum);//\u5982\u679c\u8fd9\u4e00\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u6570+\u4ece\u8fd9\u6761\u94fe\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u8fd4\u56de\u6839\u8282\u70b9\u540e\u5269\u4e0b\u7684\u6b65\u6570\u8981\u6bd4\u603b\u7684\u8282\u70b9\u6570\u5927\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u8f93\u51fa\u603b\u7684\u8282\u70b9\u6570\u3002\n        else printf(\"%d\\n\",ans+left/2);//\u5426\u5219\u5c31\u8f93\u51fa\u8fd9\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u6570+\u8fd8\u80fd\u6700\u540e\u518d\u8d70\u7684\u6b65\u6570\uff08\u8282\u70b9\u6570\uff09\n    }\n    return 0;\n}\n```\n## \u8fd9\u9053\u9898\u8fd8\u662f\u633a\u3002\u3002\u3002\u6709\u70b9\u5751\u7684\uff0c\u6bd4\u8f83\u5bb9\u6613\u5f80DP\u65b9\u9762\u60f3\uff0c\u4f46\u662f\u90a3\u6837\u7684\u8bdd\u6bd4\u8f83\u96be\u63a8\u51fa\u6765\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\n\n## \u5982\u679c\u80fd\u60f3\u5230\u662f\u8d2a\u5fc3\uff0c\u5c31\u76f8\u5bf9\u6765\u8bf4\u5bb9\u6613\u5f88\u591a\u4e86\u3002\n\n### \u4e2a\u4eba\u611f\u89c9\u8fd8\u662f\u633a\u597d\u7684\u4e00\u9053\u9898\u7684\n",
        "postTime": 1509678842,
        "uid": 20611,
        "name": "\u738b\u5c0f\u5b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u5b9a\u4e49\u4e00\u6b21\u79fb\u52a8\u4e3a\uff1a\u4ece\u5f53\u524d\u6240\u5728\u8282\u70b9\u79fb\u52a8\u5230\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u3002\u95ee\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u79fb\u52a8 $k$ \u6b21\u540e\uff0c\u6700\u591a\u7ecf\u8fc7\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u8282\u70b9\u3002\n\n\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u88ab\u91cd\u590d\u7ecf\u8fc7\uff0c\u4f46\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\n\n$n\\leq 100$.\n\n## \u5206\u6790\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6811\u5f62 DP \u6765\u505a\uff0c\u8fd9\u91cc\u53ea\u63d0\u4f9b\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\u7684**\u8d2a\u5fc3**\u505a\u6cd5\u3002\n\n\u9996\u5148\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u79fb\u52a8\u90fd\u5230\u8fbe\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u5148\u5411\u6df1\u5ea6\u6700\u6df1\u7684\u8282\u70b9\u8d70\u3002\n\n\u5982\u679c\u8d70\u7684\u8fc7\u7a0b\u4e2d\uff0c$k$ \u6b21\u79fb\u52a8\u673a\u4f1a\u5c31\u7528\u5b8c\u4e86\uff0c\u7b54\u6848\u5373\u4e3a $k$.\n\n\u82e5\u5426\uff0c\u6211\u4eec\u8981\u8017\u8d39\u5c3d\u53ef\u80fd\u5c11\u7684\u79fb\u52a8\u6b21\u6570\uff0c\u6765\u5230\u8fbe\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8d70\u5b8c\u6700\u957f\u94fe\u4e4b\u540e\uff0c**\u6bcf\u5230\u4e00\u4e2a\u65b0\u8282\u70b9\u90fd\u53ea\u9700\u8981 $2$ \u6b65**\u3002\n\n![Snipaste_2021-05-12_16-34-24.png](https://cdn.tonyyin.top/2021/05/12/4793df5361e84.png)\n\n\u5982\u4e0a\u56fe\u6240\u793a\u3002\u5148\u9009\u62e9\u6700\u957f\u94fe $1\\to 2\\to 5\\to 9\\to 12$. \u6b64\u65f6\u5982\u679c\u8981\u518d\u6dfb\u52a0\u70b9\uff0c\u53ea\u9700\u8981\u627e\u4e00\u4e2a**\u4e0e\u4efb\u610f\u4e00\u4e2a\u88ab\u9009\u8282\u70b9\u76f8\u90bb**\u7684\u8282\u70b9\u5373\u53ef\u3002\n\n\u6bd4\u5982\u9009\u62e9\u4e86\u70b9 $4$\uff0c\u90a3\u8def\u5f84\u5c31\u53d8\u6210\uff1a$1\\to 2\\to 4\\to 2\\to 5\\to 9\\to 12$.\n\n\u7531\u4e8e\u6bcf\u6b21\u65b0\u9009\u7684\u70b9\uff0c\u90fd\u4e0e\u4e00\u4e2a\u8def\u5f84\u4e2d\u7684\u70b9\u76f8\u90bb\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u8def\u5f84\u4e2d\u63d2\u5165\u4e24\u6b65\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8d70\u5230\u8fd9\u4e2a\u65b0\u7684\u8282\u70b9\u3002\n\n\u56e0\u6b64\uff0c\u5728\u9009\u5b8c\u6700\u957f\u94fe\u4e4b\u540e\uff0c\u5269\u4f59\u7684\u6b65\u6570**\u6bcf\u4e24\u6b65\u90fd\u53ef\u4ee5\u8d70\u5230\u4e00\u4e2a\u65b0\u7684\u8282\u70b9**\u3002\n\n\u5f62\u5f0f\u5316\u5730\uff0c\u8bbe\u8fd9\u68f5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e3a $n$\uff0c\u6700\u957f\u94fe\u957f\u5ea6\u4e3a $l$\uff0c\u53ef\u7528\u6b65\u6570\u4e3a $k$\uff0c\u53ef\u4ee5\u8fd9\u6837\u8868\u793a\u51fa\u7b54\u6848\uff1a\n\n- \u82e5 $k\\leq l - 1$\uff0c\u6b65\u6570\u53ea\u591f\u5728\u6700\u957f\u94fe\u4e0a\u79fb\u52a8\uff0c\u5219\u7b54\u6848\u4e3a $k$.\n- \u82e5 $k > l - 1$\uff0c\u8d70\u5b8c\u6700\u957f\u94fe\u4e4b\u540e\u6709\u5269\u4f59\u6b65\u6570\uff0c\u5219\u7b54\u6848\u4e3a\uff1a\n\n$$\n\\max\n\\left\\{\n\\begin{array}{lr}\nl + \\left\\lfloor{\\frac{k-l+1}{2}}\\right\\rfloor\\\\\nn\n\\end{array}\n\\right.\n$$\n\n\u8fd9\u91cc\u6ce8\u610f\uff0c\u5982\u679c\u6b65\u6570\u8db3\u591f\u591a\uff0c\u4e5f\u6700\u591a\u53ea\u80fd\u8d70\u5b8c\u6240\u6709\u70b9\uff0c\u6b64\u65f6\u7b54\u6848\u4e3a $n$.\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n)$.\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 108;\nint n, k;\nstruct Edge{\n    int to, nxt;\n}edge[MAXN << 1];\nint head[MAXN], e_cnt = 0;\nvoid add(int u, int v) {\n    edge[++e_cnt].to = v;\n    edge[e_cnt].nxt = head[u];\n    head[u] = e_cnt;\n}\nint deepest = 1;//\u6700\u957f\u94fe\u7684\u957f\u5ea6\nvoid dfs(int x, int fa, int dep) {\n    deepest = max(deepest, dep);\n    for(int i = head[x]; i; i = edge[i].nxt) {\n        int v = edge[i].to; if(v == fa) continue;\n        dfs(v, x, dep + 1);\n    }\n}\nint main() {\n    scanf(\"%d%d\", &n, &k);\n    for(int i = 1; i < n; i++) {\n        int a, b; scanf(\"%d%d\", &a, &b); a++, b++;\n        add(a, b); add(b, a);\n    }\n    dfs(1, 0, 1);\n    if(deepest >= k + 1) cout << k + 1 << endl;\n    else cout << min(deepest + (k - deepest + 1) / 2, n);\n    return 0;\n}\n```",
        "postTime": 1620809396,
        "uid": 166535,
        "name": "TonyYin",
        "ccfLevel": 0,
        "title": "LuoGu - P3698 - [CQOI2017]\u5c0fQ\u7684\u68cb\u76d8"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5e94\u8be5\u6bd4\u8f83\u504f\u8d2a\u5fc3\u5427\u3002\n\n\u9996\u5148\uff0c\u4e0d\u8d70\u56de\u5934\u8def\u4e00\u5b9a\u662f\u6700\u597d\u7684\u9009\u62e9\uff08\u4e0d\u6d6a\u8d39\u6bcf\u4e00\u6b65\uff09\u3002\u6211\u4eec\u8003\u8651\u6700\u591a\u600e\u4e48\u6837\u624d\u80fd\u4e0d\u8d70\u56de\u5934\u8def\u3002\u5f88\u663e\u7136\uff0c\u8d70**\u6700\u957f\u94fe**\u3002\n\n\u5982\u679c\u6700\u957f\u94fe\u5927\u5c0f\u6bd4 $n$ \u5927\uff0c\u90a3\u4e48\u94c1\u6253\u7684\u8d70\u6700\u957f\u94fe\uff0c\u8f93\u51fa $n$\u3002\n\n\u5982\u679c\u6700\u957f\u94fe\u5927\u5c0f\u6bd4 $n$ \u5c0f\uff0c\u6211\u4eec\u8fd8\u8981\u8d70\u6700\u957f\u94fe\u5417\uff1f\u65e2\u7136\u6700\u7ec8\u7684\u7b54\u6848\u662f $n-$\u51a4\u6789\u8def\uff0c\u90a3\u4e48\u51a4\u6789\u8def\u80af\u5b9a\u8d8a\u5c11\u8d8a\u597d\uff0c\u6240\u4ee5\u5f53\u7136\u8981\u8d70\u6700\u957f\u94fe\u4ee5\u51cf\u5c11\u51a4\u6789\u8def\uff08\u4f46\u4e0d\u4e00\u5b9a\u662f\u4e00\u5f00\u59cb\u5c31\u8d70\u6700\u957f\u94fe\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u68f5\u6811\u60f3\u8c61\u6210\u4e00\u4e2a\u6700\u957f\u94fe\u4e0a\u957f\u4e86\u51e0\u4e2a\u679d\u5934\u3002\uff08\u81ea\u884c\u60f3\u8c61\u4e00\u4e2a\u8fd9\u6837\u7684\u6811\u5e72\uff09\n\n\u5bf9\u4e8e\u591a\u51fa\u6765\u7684\u90e8\u5206\uff0c\u7531\u4e8e\u6700\u7ec8\u4e00\u5b9a\u8981\u56de\u5f52\u5230\u6700\u957f\u94fe\u4e0a\u7684\u70b9\uff0c\u6240\u4ee5\u5fc5\u987b\u8fd4\u56de\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u5c31\u9700\u8981\u591a\u8d70 $2$ \u6b65\uff08\u53bb\u4e00\u6b65\uff0c\u56de\u4e00\u6b65\uff09\u3002\n\n\u8bbe\u6700\u957f\u94fe\u5927\u5c0f\u4e3a $k$\uff0c\u90a3\u4e48\u6700\u7ec8\u7b54\u6848\u5c31\u662f $k+(n+1-k)/2$\u3002 \n\n\u5efa\u8bae\u5927\u5bb6\u5199\u4ee3\u7801\u8fd8\u662f\u8282\u70b9\u7528 $n$\uff0c\u6211\u56e0\u4e3a $n,v$ \u6ca1\u6709\u641e\u6e05\u695a WA \u4e86\u597d\u51e0\u53d1\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=109;\n\nstruct edge {int to,nxt;}e[N*2]; int hd[N],tot;\nvoid add(int u,int v)  {e[++tot]=(edge){v,hd[u]};hd[u]=tot;}\n\nint h[N],mx;\nvoid dfs(int u,int fa) {\n\tfor(int i=hd[u],v;i;i=e[i].nxt) {\n\t\tif((v=e[i].to)==fa) continue;\n\t\tdfs(v,u);\n\t\th[u]=max(h[u],h[v]+1);\n\t}\n\th[u]=max(h[u],1);\n}\n\nint main() {\n\tint vv,n; scanf(\"%d%d\",&vv,&n);\n\tfor(int i=1,u,v;i<vv;i++)\n\t\tscanf(\"%d%d\",&u,&v), add(u+1,v+1), add(v+1,u+1);\n\tdfs(1,0);\n\tprintf(\"%d\",(h[1]>n+1)?n+1:min(vv,h[1]+(n+1-h[1])/2));\n\treturn 0;\n}\n```",
        "postTime": 1593789838,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    },
    {
        "content": "\u9898\u610f\uff1ahttps://www.luogu.org/problem/P3698\n\n\u8003\u8651\u8d2a\u5fc3\n\n\u4e3a\u4e86\u4e0d\u56de\u5934\u6d6a\u8d39\u6b65\u6570,\u6211\u4eec\u4f1a\u5c3d\u91cf\u8d70\u4e00\u6761\u94fe,\u4e8e\u662f\u6c42\u51fa\u6700\u957f\u94fe\u6df1\u5ea6$d$,\u5982\u679c$m<=d$,\u76f4\u63a5\u8f93\u51fa$m+1$,\u5982\u679c$m>d$,\u90a3\u4e48\u6211\u4eec\u5728\u8d70\u6700\u957f\u94fe\u524d\u6216\u8005\u8fc7\u7a0b\u4e2d\u4f1a\u8d70\u4e00\u4e9b\u77ed\u94fe,\u4f46\u6211\u4eec\u6700\u540e\u8fd8\u8981\u8d70\u56de\u6700\u957f\u94fe\u4e0a\u7ee7\u7eed\u8d70,\u4e8e\u662f\u77ed\u94fe\u8981\u8d70\u4e24\u8fb9,\u7b54\u6848\u4e3a$d+(m-d+1)/2$\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=110;\nint n,m,cnt,maxx;\nint head[maxn],dep[maxn];\nstruct edge{int to,nxt;}e[maxn<<1];\ninline void add(int u,int v){e[++cnt].nxt=head[u];head[u]=cnt;e[cnt].to=v;}\ninline void dfs(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;scanf(\"%d%d\",&u,&v);u++,v++;\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++)maxx=max(maxx,dep[i]);\n\tif(m<=maxx)printf(\"%d\",m+1);\n\telse printf(\"%d\",min(n,maxx+(m-maxx+1)/2));\n\treturn 0;\n}\n```\n",
        "postTime": 1571908985,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P3698 [CQOI2017]\u5c0fQ\u7684\u68cb\u76d8(\u8d2a\u5fc3)"
    },
    {
        "content": "\u5bb9\u6613\u53d1\u73b0\uff0c\u5148\u8d70\u4ee50\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u94fe\u662f\u6700\u4f18\u7684\n\u8d70\u5b8c\u4ee50\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u94fe\u540e\uff0c\u5269\u4e0b\u7684\u8282\u70b9\uff0c\u6bcf\u4e2a\u90fd\u9700\u8981\u4e24\u6b65\u6765\u201c\u7ecf\u8fc7\u201d\uff08\u53ef\u4ee5\u5728\u7eb8\u4e0a\u753b\u753b\uff09\n\u8fd9\u6837\u5c31\u6210\u5c31\u4e86\u4e00\u4e2a\u7279\u522b\u597d\u7406\u89e3\u7684\u8d2a\u5fc3\u7b97\u6cd5\n\n\uff08\u4ee3\u7801\u592a\u957f\uff0c\u52ff\u55b7\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\n#define re return\n#define MM 110\nstruct edge{int v,nex;}e1[MM<<1];int elen=0,head[MM];\ninline void adde(int u,int v){\n\te1[++elen].v=v;e1[elen].nex=head[u];head[u]=elen;\n}//\u4ee5\u4e0a\u662f\u524d\u5411\u661f\u5b58\u56fe \nint n,m,dep[MM];\ninline void dfs1(int u){\n\tfor(int ee=head[u];ee;ee=e1[ee].nex){\n\t\tint v=e1[ee].v;\n\t\tif(dep[v])continue;\n\t\tdep[v]=dep[u]+1;\n\t\tdfs1(v);\n\t}\n} \nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint x,y;\n\tfor(int i=1;i<n;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\t++x;++y;//\u4e0d\u559c\u6b220-n-1\u7684\u6211 \n\t\tadde(x,y);adde(y,x);\n\t}\n\tdep[1]=1;//0\u5904\u6df1\u5ea6\u8bbe\u4e3a1 \n\tdfs1(1);//\u5bfb\u627e\u6700\u6df1\u70b9\uff08\u5176\u5b9e\u53ef\u4ee5\u4f18\u5316\uff09 \n\tint d=1;\n\tfor(int i=2;i<=n;++i)if(dep[i]>dep[d])d=i;\n\td=dep[d];//\u627e\u5230\u6700\u6df1\u70b9\u7684\u6df1\u5ea6\uff08\u4ee50\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u94fe\u957f\u5ea6\uff09 \n\t++m;//\u6b65\u6570\u52a01\uff0c\u56e0\u4e3a0-1\u8d70\u4e86\u4e00\u6b65\uff0c\u5374\u7ecf\u8fc7\u4e86\u4e24\u4e2a\u683c\u70b9 \n\tif(m<=d){\n\t\tprintf(\"%d\\n\",min(m,d));//\u6b65\u6570\u4e0d\u591f\u6700\u957f\u94fe\u957f\u7684\u60c5\u51b5 \n\t\treturn 0;\n\t}\n\tm-=d;\n\tint ans=d;\n\tint res=n-d;//\u5269\u4e0b\u4e0d\u5728 \u6700\u957f\u94fe\u4e0a\u7684\u70b9\u7684\u6570\u91cf \n\tif(res==0){\n\t\tprintf(\"%d\\n\",ans);//\u6ca1\u6709\u70b9\u90a3d\u5c31\u662f\u7b54\u6848\u4e86 \n\t\treturn 0;\n\t}\n\tif(m&1){\n\t\t++m;//m\u5982\u679c\u4e3a\u5947\u6570\uff0c\u90a3\u5c31\u4e00\u53bb\u4e0d\u590d\u8fd4\u5427\uff0c\u8ddf\u5076\u6570\u6ca1\u4ec0\u4e48\u533a\u522b \n\t}\n\tans+=min(m/2,res);//\u5173\u952e\u4e00\u6b65\uff1a\u5269\u4e0b\u7684\u70b9\u6bcf\u8d70\u4e00\u4e2a\u9700\u8981\u4e24\u6b65 \n\tprintf(\"%d\\n\",ans);\n\tre 0;\n}\n```",
        "postTime": 1538830878,
        "uid": 46639,
        "name": "Robert",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3698 \u3010[CQOI2017]\u5c0fQ\u7684\u68cb\u76d8\u3011"
    }
]