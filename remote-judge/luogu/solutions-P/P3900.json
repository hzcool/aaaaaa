[
    {
        "content": "\u795e\u4ed9\u9898\uff0c\u6b63\u89e3\u7684\u601d\u8def\u6839\u672c\u60f3\u4e0d\u5230\u7684\u8bf4\u2026\u2026\n\n\u800c\u4e14\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u662f\u5047\u7684\uff0c\u5305\u62ec $\\text{BZOJ}$ \u4e0a\u4e5f\u662f\u2026\u2026\u5b9e\u9645\u7684\u6570\u636e\u8303\u56f4\u5176\u5b9e\u662f\u4e0b\u9762\u8fd9\u4e2a $\\downarrow$ \uff08\u987a\u4fbf\u6c42\u7ba1\u7406\u5458\u66f4\u65b0\u6570\u636e\u8303\u56f4qwq\n\n![](https://cdn.luogu.com.cn/upload/pic/55026.png)\n\n\u6240\u4ee5\u8bf4\u5982\u679c\u6709\u4eba $80pts$ \u7684\u8bdd\u628a $n=1$ \u7684\u60c5\u51b5\u7279\u5224\u4e00\u4e0b\u5c31\u661f\u4e86\uff08\u5927\u6982\n\n\u600e\u4e48\u7279\u5224\uff1f\u5bf9\u4e8e $n=1$ \u7684\u60c5\u51b5\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\u662f\uff0c\u5982\u679c\u7b54\u6848\u4e0d\u662f`Infinity`\uff0c\u90a3\u4e48\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u4e00\u5b9a\u5728\u500d\u957f\u7684\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u8fc7\n\n~~\u8bc1\u660e\u4ec0\u4e48\u7684\u8fd8\u662f\u7b97\u4e86~~\uff0c\u5176\u5b9e\u7a0d\u5fae\u624b\u73a9\u4e00\u4e0b\u5e94\u8be5\u5c31\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u4e8b\u5b9e\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7528 $Manacher$ \u6216\u8005\u662f\u4e8c\u5206+\u54c8\u5e0c\u6c42\u51fa\u500d\u957f\u5b57\u7b26\u4e32\u548c\u4e09\u500d\u957f\u5b57\u7b26\u4e32\u7684\u7b54\u6848\uff0c\u5982\u679c\u4e8c\u8005\u76f8\u540c\u90a3\u4e48\u5c31\u662f\u8fd9\u4e2a\u7b54\u6848\uff0c\u5426\u5219\u5c31\u662f`Infinity`\n\n\u5bf9\u4e8e $n\\neq 1$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u7c7b\u4f3c $dp$ \u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n\n\u663e\u7136\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5b83\u7684\u4e24\u8fb9\u52a0\u4e0a\u5b57\u7b26\u6765\u7ec4\u6210\u66f4\u957f\u7684\u56de\u6587\u4e32\n\n\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u7ec8\u7684\u7b54\u6848\u662f\u591a\u5c11\u800c\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u56de\u6587\u4e32\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u8bb0\u5f55\u8fd9\u4e2a\u56de\u6587\u4e32\u5de6\u53f3\u7aef\u70b9\u7684\u4fe1\u606f\u5c31\u884c\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9a\u4e49 $F[a][x][b][y]$ \u8868\u793a\u6709\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5b83\u7684\u5de6\u7aef\u70b9\u662f $a[x]$ \uff0c\u53f3\u7aef\u70b9\u662f $b[y]$ \uff0c\u4e14\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u7684\u5f53\u524d\u6700\u957f\u957f\u5ea6\u4e3a $F[a][x][b][y]$ \u3002\n\n\u8f6c\u79fb\u770b\u4e0a\u53bb\u6bd4\u8f83\u663e\u7136\uff0c\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u6ca1\u6709\u5230\u8fbe\u8fb9\u754c\uff0c\u6211\u4eec\u76f4\u63a5\u770b\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u80fd\u591f\u63a5\u7740\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u5373\u6bd4\u8f83 $a[x\\!-\\!1]$ \u548c $b[y\\!+\\!1]$ \u662f\u5426\u76f8\u540c\u5373\u53ef\u3002\u5982\u679c\u53ea\u6709\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u5230\u8fbe\u4e86\u8fb9\u754c\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u5b83\u7684\u4f4d\u7f6e\u63a5\u4e0a\u4e00\u4e2a\u65b0\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u5230\u8fbe\u4e86\u8fb9\u754c\uff0c\u8bf4\u660e\u7528 $S$ \u96c6\u5408\u4e2d\u67d0\u4e9b\u5b57\u7b26\u4e32\u62fc\u6210\u7684\u4e32\u672c\u8eab\u5c31\u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u7b54\u6848\u663e\u7136\u4e3a`Infinity`\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8f6c\u79fb\u663e\u7136\u53ef\u80fd\u4f1a\u51fa\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7528 $bfs$ \uff0c\u6216\u8005\u8bf4 $spfa$ \u6765\u8fdb\u884c\u8f6c\u79fb\u5e76\u66f4\u65b0\u5373\u53ef\n\n\u5982\u679c\u7b54\u6848\u4e0d\u662f`Infinity`\uff0c\u90a3\u4e48\u8f6c\u79fb\u56fe\u663e\u7136\u662f\u4e00\u4e2a $\\text{DAG}$ \uff0c\u6211\u4eec\u76f4\u63a5\u8fb9\u8f6c\u79fb\u8fb9\u66f4\u65b0\u7b54\u6848\u5373\u53ef\uff08\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5728\u6c42\u6700\u957f\u8def\uff09\u3002\u5426\u5219\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u56fe\u4e2d\u4e00\u5b9a\u6709\u73af\uff0c\u7b54\u6848\u4e3a`Infinity`\u3002\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u76f4\u63a5\u5b9a\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u4e0a\u754c\uff0c\u5982\u679c\u5f53\u524d\u7b54\u6848\u5927\u4e8e\u4e86\u8fd9\u4e2a\u4e0a\u754c\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5224\u65ad\u5b83\u4ea7\u751f\u4e86\u73af\u5373\u53ef\n\n\u8fd9\u6837\u5b9a\u4e49\u7684\u72b6\u6001\u6570\u662f $O(n^2L^2)$ \u7684\uff0c\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u66f4\u662f\u7206\u70b8\uff0c\u663e\u7136\u662f\u4e0d\u884c\u7684\n\n\u8003\u8651\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u6b21\u53ea\u5411\u4e24\u8fb9\u6269\u5c55\u4e00\u4e2a\u5b57\u7b26\u662f\u975e\u5e38\u6d6a\u8d39\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e8c\u5206+\u54c8\u5e0c\u627e\u51fa\u6bcf\u6b21\u80fd\u5411\u4e24\u8fb9\u6269\u5c55\u7684\u6700\u957f\u957f\u5ea6\n\n\u627e\u51fa\u8fd9\u4e2a\u957f\u5ea6\u5e76\u5411\u4e24\u8fb9\u6269\u5c55\u4e4b\u540e\u6709\u51e0\u79cd\u60c5\u51b5\u3002\u9996\u5148\uff0c\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u6ca1\u6709\u5230\u8fbe\u8fb9\u754c\uff0c\u53c8\u65e0\u6cd5\u7ee7\u7eed\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\u7136\u540e\u628a\u8fd9\u4e2a\u72b6\u6001\u4e22\u6389\u5c31\u597d\u4e86\uff08\u5373\u6b64\u72b6\u6001\u5728\u8f6c\u79fb\u56fe\u4e0a\u6ca1\u6709\u51fa\u8fb9\uff09\u3002\u5982\u679c\u53ea\u6709\u5176\u4e2d\u4e00\u4e2a\u7aef\u70b9\u5230\u8fbe\u4e86\u8fb9\u754c\uff0c\u6211\u4eec\u5c31\u50cf\u4e0a\u9762\u8bf4\u7684\u90a3\u6837\uff0c\u8003\u8651\u63a5\u4e0a\u4e00\u4e2a\u5408\u6cd5\u7684\u65b0\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u90fd\u5230\u8fbe\u4e86\u8fb9\u754c\uff0c\u4e5f\u50cf\u4e0a\u9762\u8bf4\u7684\u90a3\u6837\uff0c\u7b54\u6848\u5c31\u662f`Infinity`\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u56de\u8fc7\u5934\u770b\u770b\u72b6\u6001\u5b9a\u4e49\uff0c\u7531\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u67d0\u4e2a\u56de\u6587\u4e32\u9700\u8981\u8003\u8651\u63a5\u4e0a\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u4e00\u5b9a\u662f\u56e0\u4e3a\u5176\u4e2d\u7684\u4e00\u4e2a\u7aef\u70b9\u5339\u914d\u5230\u4e86\u8fb9\u754c\u800c\u53e6\u4e00\u4e2a\u7aef\u70b9\u6ca1\u6709\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5176\u5b9e\u53ea\u7528\u8bb0\u5f55\u4e00\u4e0b\u6ca1\u5230\u8fbe\u8fb9\u754c\u7684\u90a3\u4e2a\u7aef\u70b9\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 $F[a][x][0/1]$ \u8868\u793a\u6709\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5b83\u7684\u4e00\u4e2a\u7aef\u70b9\u662f $a[x]$ \uff0c\u53e6\u4e00\u4e2a\u7aef\u70b9\u5df2\u7ecf\u5339\u914d\u5230\u8fb9\u754c\uff0c\u9700\u8981\u518d\u5728\u5176\u540e\u9762\u63a5\u4e0a\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\u624d\u80fd\u7ee7\u7eed\u5339\u914d\uff0c\u4e14\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u7684\u5f53\u524d\u6700\u957f\u957f\u5ea6\u4e3a $F[a][x][0/1]$ \u3002\u6700\u540e\u4e00\u7ef4\u7684 $0/1$ \u8868\u793a\u7684\u662f $a[x]$ \u662f\u5f53\u524d\u4e32\u7684\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\u3002\n\n\u663e\u7136\u8fd9\u6837\u7684\u72b6\u6001\u6570\u5c31\u53ea\u6709 $O(nL)$ \u7ea7\u522b\u4e86\uff0c\u53ef\u4ee5\u627f\u53d7\u3002\n\n\u518d\u6765\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6bcf\u4e00\u6b65\u8f6c\u79fb\u90fd\u9700\u8981\u679a\u4e3e\u65b0\u63a5\u4e0a\u7684\u5b57\u7b26\u4e32\uff0c\u518d\u52a0\u4e0a\u4e8c\u5206\u7684\u590d\u6742\u5ea6\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u5c31\u662f $O(kn^2LlogL)$ \u7684\u4e86\uff08 $k$ \u662f $spfa$ \u7684\u5e38\u6570\uff09\n\n\u770b\u8d77\u6765\u662f\u8dd1\u4e0d\u8fc7\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u4e0a\u754c\u975e\u5e38\u7684\u677e\uff0c\u56e0\u4e3a\u5b9e\u9645\u6709\u7528\u7684\u72b6\u6001\u6570\u57fa\u672c\u4e0a\u4e0d\u53ef\u80fd\u8fbe\u5230 $O(nL)$ \u7ea7\u522b\uff0c\u6240\u4ee5\u662f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u6570\u636e\u7684\n\n\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u590d\u6742\u5ea6\u8fd8\u662f\u62b1\u6709\u6000\u7591\u7684\u8bdd\uff0c\u53ef\u4ee5\u8003\u8651\u7528 ${\\text{SA + ST}}$ \u8868\u8fdb\u884c\u9884\u5904\u7406\u7136\u540e $O(1)$ \u67e5\u8be2\u6bcf\u6b21\u80fd\u5411\u4e24\u8fb9\u6269\u5c55\u7684\u6700\u957f\u957f\u5ea6\uff0c\u8fd9\u6837\u5c31\u80fd\u628a\u590d\u6742\u5ea6\u91cc\u7684\u90a3\u4e2a $log$ \u53bb\u6389\u4e86\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\uff0c\u54b1\u7528\u500d\u589e\u4ee3\u66ff\u4e86\u4e8c\u5206\u3002\u672c\u6765\u4ee5\u4e3a\u80fd\u5feb\u4e00\u4e9b\uff0c\u7ed3\u679c\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u7684\u8bf4\u2026\u2026\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nusing namespace std;\ntypedef unsigned long long uLL;\n\nconst int maxn=1005;\nconst int maxm=300005;\nconst int pr=1e9+7;\n\ninline void Smax(int& x,const int& y){\n\t(y>x)?(x=y):1;\n}\n\nstruct Node{\n\tint id;\n\tint pos;\n\tbool fr;\n};\n\nint n;\nint Ans;\nuLL P[maxn];\nint Len[105];\nuLL G[2][105][maxn];\nint F[105][maxn][2];\nchar ss[103][maxn];\nqueue<Node> q;\n\nstruct Solve{\n\tint Bit[25];\n\tuLL P[maxm];\n\tuLL F[maxm];\n\tuLL G[maxm];\n\tchar ss[maxm];\n\tuLL Key(int l,int r){\n\t\treturn F[r]-F[l-1]*P[r-l+1];\n\t}\n\tuLL rKey(int l,int r){\n\t\treturn G[l]-G[r+1]*P[r-l+1];\n\t}\n\tint Calc(int l,int r,int n){\n\t\tint s=l,t=r;\n\t\tif(ss[s]!=ss[t]) return 0;\n\t\tfor(int i=18;~i;--i)\n\t\t\tif(s-Bit[i]>0&&t+Bit[i]<=n)\n\t\t\t\tif(Key(s-Bit[i],s)==rKey(t,t+Bit[i]))\n\t\t\t\t\ts-=Bit[i],t+=Bit[i];\n\t\treturn t-s+1;\n\t}\n\tint Calc(int n){\n\t\tint ans=0;\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tans=max(ans,Calc(i,i,n));\n\t\tfor(int i=1;i<n;++i)\n\t\t\tans=max(ans,Calc(i,i+1,n));\n\t\treturn ans;\n\t}\n\tvoid operator ()(){\n\t\tscanf(\"%s\",ss+1);\n\t\tn=strlen(ss+1);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tss[i+(n<<1)]=ss[i+n]=ss[i];\n\t\tfor(int i=P[0]=1,t=n*3;i<=t;++i)\n\t\t\tP[i]=P[i-1]*pr,F[i]=F[i-1]*pr+ss[i];\n\t\tfor(int i=n*3;i;--i)\n\t\t\tG[i]=G[i+1]*pr+ss[i];\n\t\tfor(int i=Bit[0]=1;i<=19;++i)\n\t\t\tBit[i]=(Bit[i-1]<<1);\n\t\tint ans=Calc(n<<1),ans2=Calc(n*3);\n\t\tif(ans!=ans2) puts(\"Infinity\");\n\t\telse printf(\"%d\\n\",ans);\n\t}\n}M;\n\nuLL Key(int,int,int);\nuLL rKey(int,int,int);\nbool Calc(int,int,int&,int&);\nvoid Work();\n\nint main(){\n\tWork();\n\treturn 0;\n}\n\nvoid Work(){\n\tscanf(\"%d\",&n);\n\tif(n==1) return M();\n\tfor(int i=P[0]=1;i<maxn;++i)\n\t\tP[i]=P[i-1]*pr;\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%s\",ss[i]+1);\n\t\tLen[i]=strlen(ss[i]+1);\n\t\tfor(int j=1;j<=Len[i];++j)\n\t\t\tG[0][i][j]=G[0][i][j-1]*pr+ss[i][j];\n\t\tfor(int j=Len[i];j;--j)\n\t\t\tG[1][i][j]=G[1][i][j+1]*pr+ss[i][j];\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=Len[i];++j){\n\t\t\tint s=j,t=j;Calc(i,i,s,t);\n\t\t\tif(s==1&&t==Len[i])\n\t\t\t\treturn puts(\"Infinity\"),void();\n\t\t\tif(s==1){\n\t\t\t\tif(t<=F[i][t][0]) continue;\n\t\t\t\tSmax(Ans,t);F[i][t][0]=t;\n\t\t\t\tq.push((Node){i,t,0});\n\t\t\t}\n\t\t\tif(t==Len[i]){\n\t\t\t\tif(t-s+1<=F[i][s][1]) continue;\n\t\t\t\tSmax(Ans,t-s+1);F[i][s][1]=t-s+1;\n\t\t\t\tq.push((Node){i,s,1});\n\t\t\t}\n\t\t}\n\t\tfor(int j=1;j<Len[i];++j){\n\t\t\tint s=j,t=j+1;\n\t\t\tif(!Calc(i,i,s,t)) continue;\n\t\t\tif(s==1&&t==Len[i])\n\t\t\t\treturn puts(\"Infinity\"),void();\n\t\t\tif(s==1){\n\t\t\t\tif(t<=F[i][t][0]) continue;\n\t\t\t\tSmax(Ans,t);F[i][t][0]=t;\n\t\t\t\tq.push((Node){i,t,0});\n\t\t\t}\n\t\t\tif(t==Len[i]){\n\t\t\t\tif(t-s+1<=F[i][s][1]) continue;\n\t\t\t\tSmax(Ans,t-s+1);F[i][s][1]=t-s+1;\n\t\t\t\tq.push((Node){i,s,1});\n\t\t\t}\n\t\t}\n\t\tq.push((Node){i,0,0});\n\t}\n\twhile(!q.empty()){\n\t\tif(Ans>maxm)\n\t\t\treturn puts(\"Infinity\"),void();\n\t\tNode x=q.front();q.pop();\n\t\tint last=F[x.id][x.pos][x.fr];\n\t\tif(x.fr) for(int i=1;i<=n;++i){\n\t\t\tint s=x.pos-1,t=1;\n\t\t\tif(!Calc(x.id,i,s,t)) continue;\n\t\t\tif(s==1&&t==Len[i])\n\t\t\t\treturn puts(\"Infinity\"),void();\n\t\t\tint ans=last+((x.pos-s)<<1);\n\t\t\tSmax(Ans,ans);\n\t\t\tif(s==1){\n\t\t\t\tif(ans<=F[i][t][0]) continue;\n\t\t\t\tF[i][t][0]=ans;q.push((Node){i,t,0});\n\t\t\t}else if(t==Len[i]){\n\t\t\t\tif(ans<=F[x.id][s][1]) continue;\n\t\t\t\tF[x.id][s][1]=ans;q.push((Node){x.id,s,1});\n\t\t\t}\n\t\t}else for(int i=1;i<=n;++i){\n\t\t\tint s=Len[i],t=x.pos+1;\n\t\t\tif(!Calc(i,x.id,s,t)) continue;\n\t\t\tif(s==1&&t==Len[x.id])\n\t\t\t\treturn puts(\"Infinity\"),void();\n\t\t\tint ans=last+((t-x.pos)<<1);\n\t\t\tSmax(Ans,ans);\n\t\t\tif(s==1){\n\t\t\t\tif(ans<=F[x.id][t][0]) continue;\n\t\t\t\tF[x.id][t][0]=ans;q.push((Node){x.id,t,0});\n\t\t\t}else if(t==Len[x.id]){\n\t\t\t\tif(ans<=F[i][s][1]) continue;\n\t\t\t\tF[i][s][1]=ans;q.push((Node){i,s,1});\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",Ans);\n}\n\nbool Calc(int a,int b,int& s,int& t){\n\tif(ss[a][s]!=ss[b][t]) return 0;\n\tint d=1;\n\twhile(s-d>0&&t+d<=Len[b]&&Key(a,s-d,s)==rKey(b,t,t+d)) d<<=1;\n\tfor(d>>=1,s-=d,t+=d,d>>=1;d;d>>=1)\n\t\tif(s-d>0&&t+d<=Len[b]&&Key(a,s-d,s)==rKey(b,t,t+d)) s-=d,t+=d;\n\treturn 1;\n}\n\ninline uLL Key(int id,int s,int t){\n\treturn G[0][id][t]-G[0][id][s-1]*P[t-s+1];\n}\n\ninline uLL rKey(int id,int s,int t){\n\treturn G[1][id][s]-G[1][id][t+1]*P[t-s+1];\n}\n```\n\n",
        "postTime": 1553520785,
        "uid": 89309,
        "name": "\u2721Dustaria\u2721",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3900 \u3010[\u6e56\u5357\u96c6\u8bad]\u56fe\u6837\u56fe\u68ee\u7834\u3011"
    },
    {
        "content": "\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e2a\u66b4\u529b\u7684\u89e3\u6cd5\uff1a\u66b4\u529b\u679a\u4e3e**\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74**\uff08\u53ef\u80fd\u662f\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5355\u4e2a\u5b57\u7b26\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u4e24\u4e2a\u5b57\u7b26\u4e2d\u95f4\u7684\u7a7a\u683c\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u662f\u4e24\u4e2a\u4e0d\u540c\u4e32\u9996\u5c3e\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u63a5\u53e3\uff09\uff0c\u7136\u540e\u5411\u4e24\u8fb9\u6269\u5f20\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u4e3a\u6b62\u3002\n\n\u663e\u7136\uff0c\u9664\u4e86\u4e00\u5f00\u59cb\u7684\u521d\u59cb\u72b6\u6001\u4ee5\u5916\uff0c\u8fd9\u4e2a\u5bf9\u79f0\u8f74\u662f\u6ca1\u6709\u610f\u4e49\u7684\u2014\u2014\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u56de\u6587\u4e32\u6700\u5de6\u7aef\u7684\u4f4d\u7f6e\u548c\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u6211\u4eec\u5c06\u6240\u6709\u4e32\u5168\u90fd**\u62fc\u5728\u4e00\u8d77**\uff0c\u6210\u4e3a\u4e00\u4e2a\u5927\u4e32$s$\u3002\u8bbe$f[l,r]$\u8868\u793a\u5f53\u524d\u56de\u6587\u4e32\u5de6\u7aef\u70b9\u5728$l$\uff0c\u53f3\u7aef\u70b9\u5728$r$\uff0c\u5b83\u7ee7\u7eed\u5f80\u524d\u5ef6\u4f38\u80fd\u4f38\u5230\u7684\u7684\u6700\u957f\u957f\u5ea6\u3002\u6ce8\u610f\u5230\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u6709$l<r$\uff0c\u56e0\u4e3a\u8fd9\u4e2a$l$\u548c$r$\u53ef\u4ee5\u88ab\u770b\u505a\u4e24\u4e2a**\u6307\u9488**\uff0c\u5b83\u6307\u5411\u4e86\u539f\u6765\u4e24\u4e2a\u4e32\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u53ea\u4e0d\u8fc7\u4e3a\u4e86\u6d88\u51cf\u7ef4\u6570\u7ed9\u5f3a\u884c\u62fc\u5728\u4e00\u8d77\u800c\u5df2\u3002\n\n\u8bbe$st_i$\u4e3a\u539f\u672c\u7684\u67d0\u4e2a\u4e32$i$\u5728\u65b0\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c$ed_i$\u4e3a$i$\u5728\u65b0\u4e32\u4e2d\u7684\u622a\u6b62\u4f4d\u7f6e\u3002\n\n\u5219\u6709\n\n$$f[l,r]=\\begin{cases}0(s_l\\neq s_r)\\\\f[l-1,r+1]+2(l\\neq st_i,r\\neq ed_j)\\\\f[ed_k,r+1]+2(l=st_i,r\\neq ed_j)\\\\f[l-1,st_k]+2(l\\neq st_i,r=ed_j)\\\\\\infty(l=st_i,r=ed_j)\\end{cases}$$\n\n\u5176\u4e2d\uff0c$i,j,k$\u5747\u6307\u4efb\u4f55\u4e00\u4e2a\u539f\u4e32\u3002\n\n\u663e\u7136\uff0c\u4e0a\u9762\u7684\u8f6c\u79fb\u5f0f\u4e2d\uff0c$(1),(2)$\u662f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\uff1b$(3),(4)$\u7684\u610f\u4e49\u662f\u4e00\u4e2a\u4e32\u5df2\u7ecf\u88ab\u5168\u90e8\u62fc\u5b8c\u4e86\uff0c\u53c8\u63a5\u4e0a\u4e86\u53e6\u4e00\u4e2a\u4e32\uff1b$(5)$\u7684\u610f\u4e49\u662f$[l,r]$\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5219\u53ea\u8981\u5b83\u81ea\u5df1\u4e0d\u65ad\u62fc\u63a5\u4e0b\u53bb\uff0c\u56de\u6587\u4e32\u7684\u957f\u5ea6\u5c31\u662f\u65e0\u9650\u7684\uff0c\u56e0\u6b64\u7b54\u6848\u5c31\u662f$\\infty$\u3002\n\n------------\n\n\u663e\u7136\uff0c\u8fd9\u4e2aDP\u7684\u590d\u6742\u5ea6\u662f$O\\Big(n(\\sum|S|)^2\\Big)$\u7684\uff0c\u4e0d\u53ef\u80fd\u8dd1\u8fc7\u53bb\u3002\u5219\u6211\u4eec\u8003\u8651\u4f18\u5316\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u4e2a$f[l,r]$\uff0c\u53ea\u8981\u5b83\u4eec\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u78b0\u5230\u8fb9\u754c\uff0c\u5219$l$\u4f1a\u4e00\u76f4$-1$\uff0c$r$\u4f1a\u4e00\u76f4$+1$\uff1b\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\uff08\u4ee5$l$\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u5b50\u4e32\uff09\u540c\uff08\u4ee5$r$\u4e3a\u5f00\u5934\u7684\u6240\u6709\u5b50\u4e32\uff09\u4e2d\u6700\u957f\u7684\u76f8\u540c\u4e32\uff0c\u5373\u662f\u5b83\u4eec\u6700\u7ec8\u4f1a\u5ef6\u4f38\u5230\u7684\u957f\u5ea6\u3002\n\n\u56e0\u6b64\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u957f\u5ea6\u4e4b\u540e\uff0c$l$\u548c$r$\u5c31\u53ef\u4ee5\u76f4\u63a5\u5ef6\u4f38\u5230\u5bf9\u5e94\u7684\u5730\u65b9\u3002\u8bbe\u4e00\u4e2a\u5ef6\u4f38\u5230$L$\uff0c\u4e00\u4e2a\u5ef6\u4f38\u5230$R$\u3002\u5219\u6211\u4eec\u7167\u7740\u4e0a\u9762\u7684\u8f6c\u79fb\u5f0f\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u5219\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u628a\u7ef4\u6570\u6d88\u51cf\u6389\u4e00\u7ef4\u4e86\u3002\u6211\u4eec\u8bbe$f[x][0/1]$\u8868\u793a$x$\u662f$r/l$\uff0c\u4e14\u53e6\u5916\u4e00\u4e2a\u6307\u9488\u6307\u5230\u4e86\u67d0\u4e2a\u4e32\u7684\u7aef\u70b9\u5904\u65f6\uff0c\u5b83\u6700\u8fdc\u80fd\u5ef6\u4f38\u591a\u8fdc\u3002\n\n\u5219\u6211\u4eec\u5728\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u65b0\u62fc\u63a5\u4e0a\u7684\u90a3\u4e2a\u4e32\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u6c42\u51fa\u5b83\u6700\u7ec8\u5ef6\u4f38\u7684\u957f\u5ea6\u5373\u53ef\u8f6c\u79fb\u3002\n\n\u8fd9\u4e00\u6bb5\u662f\u4f7f\u7528**\u8bb0\u5fc6\u5316\u641c\u7d22**\u5b9e\u73b0\u7684DP\uff1a\n\n```cpp\nint dfs(int x,bool tp){//tp=0:x is the starting point of a suffix;tp=1:the ending point of a prefix.(can refer to PAL function)\n\tif(vis[x][tp]){puts(\"Infinity\");exit(0);}//a circle occurs, and the answer equals inf.\n\tif(f[x][tp]!=-1)return f[x][tp];//memorized searching\n\tvis[x][tp]=true;\n\tint &now=f[x][tp];now=0;\n\tif(!tp){\n\t\tfor(int i=1;i<=all;i++){//numerate the string we're going to concatenate.\n\t\t\tint len=PAL(x,ed[i]);//get the maximum palindrome length\n\t\t\tint L=ed[i]-len+1,R=x+len-1;\n\t\t\tif(L!=st[i]&&R!=ed[id[x]])now=max(now,len<<1);//no string can reach to the end,so k is the maximal parlindrome length\n\t\t\telse if(L==st[i])now=max(now,(len<<1)+dfs(R+1,false));//the whole string i is matched\n\t\t\telse if(R==ed[id[x]])now=max(now,(len<<1)+dfs(L-1,true));//the whole string id[x] is matched\n\t\t\telse{puts(\"Infinity\");exit(0);}//both strings are matched, which means there is a palindrome string, and the answer is inf.\n\t\t}\n\t}else{//similar to the above function\n\t\tfor(int i=1;i<=all;i++){\n\t\t\tint len=PAL(st[i],x);\n\t\t\tint L=x-len+1,R=st[i]+len-1;\n\t\t\tif(L!=st[id[x]]&&R!=ed[i])now=max(now,len<<1);\n\t\t\telse if(L==st[id[x]])now=max(now,(len<<1)+dfs(R+1,false));\n\t\t\telse if(R==ed[i])now=max(now,(len<<1)+dfs(L-1,true));\n\t\t\telse{puts(\"Infinity\");exit(0);}\n\t\t}\n\t}\n\tvis[x][tp]=false;\n\treturn now;\n}\n```\n\u9996\u5148\uff0c\u5982\u679c\u4f60\u5230\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u53d1\u73b0\u5b83\u6210\u73af\u4e86\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u73af\u4e0a\u4e0d\u505c\u5730\u7ed5\uff0c\u56de\u6587\u4e32\u7684\u957f\u5ea6\u5c31\u4f1a\u4e0d\u65ad\u589e\u52a0\uff0c\u56e0\u6b64\u7b54\u6848\u5c31\u662f$\\infty$\uff1b\u5426\u5219\uff0c\u6b63\u5e38\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u90a3\u4e2a```PAL(x,y)```\u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u6c42\u5f53$r=x,l=y$\u65f6\uff0c\u6700\u957f\u53ef\u4ee5\u5ef6\u4f38\u5230\u591a\u8fdc\u7684\u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528**\u540e\u7f00\u6570\u7ec4+ST\u8868**\u505a\u5230$O(n\\log n)$\u9884\u5904\u7406\uff0c$O(1)$\u56de\u7b54\u3002\u800c$id_x$\uff0c\u5219\u8868\u793a\u65b0\u4e32\u4e2d\u4f4d\u7f6e\u4e3a$x$\u7684\u90a3\u4e2a\u5b57\u7b26\u539f\u672c\u662f\u5728\u54ea\u4e2a\u539f\u4e32\u4e2d\u7684\u3002\n\n\u7136\u540e\u5728\u4e3b\u51fd\u6570\u91cc\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u5bf9\u79f0\u8f74\u5373\u53ef\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u5bf9\u79f0\u8f74\u6570\u91cf\u662f$O(\\sum|S|)$\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u679a\u4e3e\u3002\n\n\u5219\u603b\u590d\u6742\u5ea6\u4e3a$O\\Big(\\sum|S|\\big(n+\\log(sum|S|)\\big)\\Big)$\u3002\n\n\u4ee3\u7801\uff08\u9644\u8be6\u7ec6\u82f1\u6587\u7248\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200100;\nint all,st[110],ed[110],id[N],res;\nnamespace Suffix_Array{\n\tint x[N],y[N],buc[N],sa[N],ht[N],rk[N],n,m;\n\tchar s[N];\n\tbool mat(int a,int b,int k){\n\t\tif(y[a]!=y[b])return false;\n\t\tif((a+k<=n)^(b+k<=n))return false;\n\t\tif((a+k<=n)&&(b+k<=n))return y[a+k]==y[b+k];\n\t\treturn true;\n\t}\n\tvoid SA(){\n\t\tfor(int i=1;i<=n;i++)buc[x[i]=s[i]]++;\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\tfor(int i=n;i;i--)sa[buc[x[i]]--]=i;\n\t\tfor(int k=1;k<=n;k<<=1){\n\t\t\tint num=0;\n\t\t\tfor(int i=n-k+1;i<=n;i++)y[++num]=i;\n\t\t\tfor(int i=1;i<=n;i++)if(sa[i]>k)y[++num]=sa[i]-k;\n\t\t\tfor(int i=0;i<=m;i++)buc[i]=0;\n\t\t\tfor(int i=1;i<=n;i++)buc[x[y[i]]]++;\n\t\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\n\t\t\tfor(int i=n;i;i--)sa[buc[x[y[i]]]--]=y[i];\n\t\t\tswap(x,y);\n\t\t\tx[sa[1]]=num=1;\n\t\t\tfor(int i=2;i<=n;i++)x[sa[i]]=mat(sa[i],sa[i-1],k)?num:++num;\n\t\t\tif(n==num)break;\n\t\t\tm=num;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)rk[sa[i]]=i;\n\t\tfor(int i=1,k=0;i<=n;i++){\n\t\t\tif(rk[i]==1)continue;\n\t\t\tif(k)k--;\n\t\t\tint j=sa[rk[i]-1];\n\t\t\twhile(i+k<=n&&j+k<=n&&s[i+k]==s[j+k])k++;\n\t\t\tht[rk[i]]=k;\n\t\t}\n\t}\n}\nusing namespace Suffix_Array;\nnamespace Sparse_Table{\n\tint LG[N],mn[N][20];\n\tvoid ST(){\n\t\tfor(int i=2;i<=n;i++)LG[i]=LG[i>>1]+1;\n\t\tfor(int i=1;i<=n;i++)mn[i][0]=ht[i];\n\t\tfor(int j=1;j<=LG[n];j++)for(int i=1;i+(1<<j)-1<=n;i++)mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]);\n\t}\n\tint LCP(int x,int y){//ask the LCP of two suffixes\n\t\tif(x==y)return ed[id[x]]-st[id[x]]+1;//the LCP of two same strings is the string itself\n\t\tx=rk[x],y=rk[y];\n\t\tif(x>y)swap(x,y);\n\t\tx++;\n\t\tint k=LG[y-x+1];\n\t\treturn min(mn[x][k],mn[y-(1<<k)+1][k]);\n\t}\n\tint PAL(int x,int y){//return the maximal length of a common string that is both a suffix starting from index x and a prefix ending at index y\n\t\treturn min(LCP(x,n-y+1),min(ed[id[x]]-x+1,y-st[id[y]]+1));//can't go over the length of original strings\n\t} \n}\nusing namespace Sparse_Table;\nbool vis[N][2];//use the vis array to avoid circles\nint f[N][2];\nint dfs(int x,bool tp){//tp=0:x is the starting point of a suffix;tp=1:the ending point of a prefix.(can refer to PAL function)\n\tif(vis[x][tp]){puts(\"Infinity\");exit(0);}//a circle occurs, and the answer equals inf.\n\tif(f[x][tp]!=-1)return f[x][tp];//memorized searching\n\tvis[x][tp]=true;\n\tint &now=f[x][tp];now=0;\n\tif(!tp){\n\t\tfor(int i=1;i<=all;i++){//numerate the string we're going to concatenate.\n\t\t\tint len=PAL(x,ed[i]);//get the maximum palindrome length\n\t\t\tint L=ed[i]-len+1,R=x+len-1;\n\t\t\tif(L!=st[i]&&R!=ed[id[x]])now=max(now,len<<1);//no string can reach to the end,so k is the maximal parlindrome length\n\t\t\telse if(L==st[i])now=max(now,(len<<1)+dfs(R+1,false));//the whole string i is matched\n\t\t\telse if(R==ed[id[x]])now=max(now,(len<<1)+dfs(L-1,true));//the whole string id[x] is matched\n\t\t\telse{puts(\"Infinity\");exit(0);}//both strings are matched, which means there is a palindrome string, and the answer is inf.\n\t\t}\n\t}else{//similar to the above function\n\t\tfor(int i=1;i<=all;i++){\n\t\t\tint len=PAL(st[i],x);\n\t\t\tint L=x-len+1,R=st[i]+len-1;\n\t\t\tif(L!=st[id[x]]&&R!=ed[i])now=max(now,len<<1);\n\t\t\telse if(L==st[id[x]])now=max(now,(len<<1)+dfs(R+1,false));\n\t\t\telse if(R==ed[i])now=max(now,(len<<1)+dfs(L-1,true));\n\t\t\telse{puts(\"Infinity\");exit(0);}\n\t\t}\n\t}\n\tvis[x][tp]=false;\n\treturn now;\n}\nint main(){\n\tscanf(\"%d\",&all);\n\tfor(int i=1;i<=all;i++){\n\t\tscanf(\"%s\",s+n+1);\n\t\tm=strlen(s+n+1);\n\t\tst[i]=n+1;\n\t\tfor(int j=n+1;j<=n+m;j++)s[j]=s[j]-'a'+1,id[j]=i;\n\t\tn+=m;\n\t\ted[i]=n;//st is the starting index after concatenating all the strings,while ed is the ending index\n\t}\n\tfor(int i=1;i<=n;i++)s[2*n-i+1]=s[i];//reverse the string and concatenating it after the original string\n\tn<<=1,m=26,SA(),ST();\n//\tfor(int i=1;i<=all;i++)printf(\"(%d,%d)\",st[i],ed[i]);puts(\"\");\n//\tfor(int i=1;i<=n;i++)printf(\"%d \",s[i]);puts(\"\");\n//\tfor(int i=1;i<=n;i++)printf(\"%d \",rk[i]);puts(\"\");\n\tmemset(f,-1,sizeof(f));\n\tfor(int i=1;i<=all;i++){\n\t\tres=max(res,max(dfs(st[i],false),dfs(ed[i],true)));//palindromes that symmetrix axis is between two different strings\n\t\tfor(int j=st[i];j<=ed[i];j++){//palindromes that symmetric axis is a character\n\t\t\tint len=PAL(j,j);//the maximal palindrome length\n\t\t\tint L=j-len+1,R=j+len-1;\n\t\t\tif(L!=st[i]&&R!=ed[i])res=max(res,(len<<1)-1);//minus one, as the symmetrix axis is calculated twice\n\t\t\telse if(L==st[i])res=max(res,(len<<1)-1+dfs(R+1,false));\n\t\t\telse if(R==ed[i])res=max(res,(len<<1)-1+dfs(L-1,true));\n\t\t\telse{puts(\"Infinity\");exit(0);}\n\t\t}\n\t\tfor(int j=st[i];j<ed[i];j++){//palindromes that symmetric axis is the blank between two characters\n\t\t\tint len=PAL(j+1,j);\n\t\t\tint L=j-len+1,R=(j+1)+len-1;\n\t\t\tif(L!=st[i]&&R!=ed[i])res=max(res,len<<1);\n\t\t\telse if(L==st[i])res=max(res,(len<<1)+dfs(R+1,false));\n\t\t\telse if(R==ed[i])res=max(res,(len<<1)+dfs(L-1,true));\n\t\t\telse{puts(\"Infinity\");exit(0);}\t\t\t\n\t\t}\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n}\n```\n",
        "postTime": 1596171363,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3900 \u3010[\u6e56\u5357\u96c6\u8bad]\u56fe\u68ee\u3011"
    }
]