[
    {
        "content": "\u89c2\u5bdf\u5230 $m$ \u548c $q$ \u90fd\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u5728\u590d\u6742\u5ea6\u91cc\u5e26\u4e0a $m$\uff0c\u6bd4\u5982 $O(qm\\log n)$\u3002\n\n\u4e0d\u59a8\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u63cf\u8ff0\u7684\u662f $x$ \u5750\u6807\u5728 $[l,r]$ \u533a\u95f4\u5185\u7684\u6700\u5927\u6b63\u65b9\u5f62\u6709\u591a\u5927\u3002\n\n\u56e0\u4e3a\u7b2c\u4e8c\u79cd\u8be2\u95ee\u6d89\u53ca\u4e24\u7ef4\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $y$\uff0c**\u53f3\u8fb9\u754c\u843d\u5728 $y$ \u4e0a**\u7684\u6700\u5927\u6b63\u65b9\u5f62\u6709\u591a\u5927\uff0c\u8fd9\u6837\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e86 $m$ \u4e2a\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(4nm)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u8003\u8651\u600e\u4e48\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u7684\u662f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u8de8\u8fc7 $x=mid$ \u8fd9\u6761\u7ebf\u7684\u6b63\u65b9\u5f62\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u77e9\u9635\uff1a\n\n```\n--------------- x = r\n0 0 0 0 0 1 1 0\n1 0 1 1 0 1 1 0\n1 0 0 1 0 0 1 0\n1 1 1 1 1 1 1 1\n--------------- x = mid\n1 1 1 1 1 1 1 1\n1 1 1 1 0 1 0 1\n0 1 1 1 1 0 1 1\n1 0 0 0 1 0 0 1\n--------------- x = l\n```\n\n\u6ce8\u610f\u5230\u6211\u4eec**\u53ea\u9700\u8981**\u4ece $x=mid$ \u8fd9\u6761\u7ebf\u5411\u4e0a\u5411\u4e0b\u8d70\u8fde\u7eed\u7684 $1$ \u957f\u5ea6\uff0c\u5176\u4ed6\u7684 $1$ \u90fd\u662f\u6ca1\u7528\u7684\uff0c\u5148\u5c06\u8fd9\u4e9b\u6ca1\u7528\u7684 1 \u5220\u53bb\u3002\n\n```\n--------------- x = r\n0 0 0 0 0 0 1 0\n1 0 0 1 0 0 1 0\n1 0 0 1 0 0 1 0\n1 1 1 1 1 1 1 1\n--------------- x = mid\n1 1 1 1 1 1 1 1\n1 1 1 1 0 1 0 1\n0 1 1 1 0 0 0 1\n0 0 0 0 0 0 0 1\n--------------- x = l\n```\n\n\u7136\u540e\u5c06\u77e9\u9635\u53d8\u5f62\u4e3a\u957f\u5ea6\uff1a\n\n```\n--------------- x = r\n3 1 1 3 1 1 4 1\n--------------- x = mid\n2 3 3 3 1 2 1 4\n--------------- x = l\n```\n\n\u8bb0\u4e0a\u534a\u90e8\u5206\u7684\u957f\u5ea6\u6570\u7ec4\u4e3a $len1$\uff0c\u4e0b\u534a\u90e8\u5206\u7684\u957f\u5ea6\u6570\u7ec4\u4e3a $len2$\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a $y=p$ \u600e\u4e48\u6c42\u5f97\u7b54\u6848\uff1a\n\n\u6700\u7c97\u66b4\u7684\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u5de6\u7aef\u70b9 $q$\uff0c\u90a3\u4e48 $[q,p]$ \u4e4b\u95f4\u5b58\u5728\u5408\u6cd5\u6b63\u65b9\u5f62\u7684\u6761\u4ef6\u5c31\u662f $\\min_{q\\leq i\\leq p}\\{len1_i\\}+\\min_{q\\leq i\\leq p}\\{len2_i\\}\\geq p-q+1$\u3002\n\n\u4e8c\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u4f18\u79c0\u7684\uff0c\u4f46\u662f\u89c2\u5bdf\u5230\u968f\u7740 $y$ \u7684\u9012\u589e\u5de6\u7aef\u70b9\u4e5f\u4e00\u5b9a\u9012\u589e\uff0c\u6211\u4eec\u5c31\u80fd\u5c06\u8fd9\u4e2a\u4e8c\u5206\u5220\u6389\u4e86\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5de6\u7aef\u70b9\u5230\u5f53\u524d\u70b9\u4e4b\u95f4\u4e24\u4e2a\u957f\u5ea6\u6570\u7ec4\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u89e3\u51b3\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u5bf9\u7b54\u6848\u7684\u8ba1\u7b97\uff0c\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u51fa $len1$ \u548c $len2$ \u6570\u7ec4\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4 $up$ \u548c $down$ \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u5b50\u533a\u95f4\u5185\u4ece\u4e0a\u5f80\u4e0b\u6700\u957f\u7684\u8fde\u7eed $1$ \u957f\u5ea6\u548c\u4ece\u4e0b\u5f80\u4e0a\u6700\u957f\u7684\u8fde\u7eed $1$ \u957f\u5ea6\uff0c\u8fd9\u6837\u5728\u5408\u5e76\u7684\u65f6\u5019\u5de6\u513f\u5b50\u7684 $down$ \u5c31\u662f\u6211\u4eec\u4e0a\u534a\u7684 $len1$\uff0c\u53f3\u513f\u5b50\u7684 $up$ \u5c31\u662f\u6211\u4eec\u4e0b\u534a\u7684 $len2$\u3002\n\n$up$ \u548c $down$ \u7684\u5408\u5e76\u8f83\u4e3a\u7b80\u5355\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n,m;\n\nstruct Node\n{\n\tint val[16000050];\n\tint* operator [] (int x)\n\t{\n\t\treturn val + x * m;\n\t}\n}up,down,ans,M;\n\nint q1[2050],q2[2050];\nint head1,head2,tail1,tail2;\n\ninline void Merge(int rt,int ls,int rs,int L,int R)\n{\n\thead1 = 1,head2 = 1;\n\ttail1 = 0,tail2 = 0;\n\tfor(int i = 1,j = 1;i <= m; ++ i)\n\t{\n\t\twhile(head1 <= tail1 && down[ls][i] < down[ls][q1[tail1]]) tail1 --;\n\t\tq1[++ tail1] = i;\n\t\twhile(head2 <= tail2 && up[rs][i] < up[rs][q2[tail2]]) tail2 --;\n\t\tq2[++ tail2] = i;\n\t\twhile(j <= i && i - j + 1 > up[rs][q2[head2]] + down[ls][q1[head1]])\n\t\t{\n\t\t\tj ++;\n\t\t\tif(q2[head2] < j) head2 ++;\n\t\t\tif(q1[head1] < j) head1 ++;\n\t\t}\n\t\tans[rt][i] = max(ans[ls][i],max(ans[rs][i],i - j + 1));\n\t}\n\tfor(int i = 1;i <= m; ++ i)\n\t\tup[rt][i] = up[ls][i] + (up[ls][i] == L ? up[rs][i] : 0),\n\t\tdown[rt][i] = down[rs][i] + (down[rs][i] == R ? down[ls][i] : 0);\n}\n\nvoid Build(int rt,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tfor(int i = 1;i <= m; ++ i)\n\t\t\tup[rt][i] = down[rt][i] = ans[rt][i] = M[l][i];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tBuild(rt << 1,l,mid);\n\tBuild(rt << 1 | 1,mid + 1,r);\n\tMerge(rt,rt << 1,rt << 1 | 1,mid - l + 1,r - mid);\n}\n\nint pos,y;\n\nvoid Update(int rt,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tup[rt][y] = down[rt][y] = ans[rt][y] = (M[pos][y] ^ 1);\n\t\tM[pos][y] ^= 1;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(mid >= pos) Update(rt << 1,l,mid);\n\telse Update(rt << 1 | 1,mid + 1,r);\n\tMerge(rt,rt << 1,rt << 1 | 1,mid - l + 1,r - mid);\n}\n\nint ll,rr;\n\nvoid Query(int rt,int l,int r)\n{\n\tif(ll <= l && r <= rr)\n\t{\n\t\tMerge(0,0,rt,l - ll,r - l + 1);\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(mid >= ll) Query(rt << 1,l,mid);\n\tif(mid < rr) Query(rt << 1 | 1,mid + 1,r);\n}\n\ntemplate<class T> inline void read(T &x) {\n    x = 0; char c = getchar();\n    while (!isdigit(c)) c = getchar();\n    while (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n}\n\nint main()\n{\n\tint q;\n\tread(n); read(m); read(q);\n\tfor(int i = 1;i <= n; ++ i)\n\t\tfor(int j = 1;j <= m; ++ j)\n\t\t\tread(M[i][j]);\n\tBuild(1,1,n);\n\tfor(int i = 1;i <= q; ++ i)\n\t{\n\t\tint op; read(op);\n\t\tif(op == 0)\n\t\t{\n\t\t\tint x; read(x); read(y);\n\t\t\tpos = x;\n\t\t\tUpdate(1,1,n);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint l,s,r,t; read(l); read(s); read(r); read(t);\n\t\t\tll = l,rr = r;\n\t\t\tfor(int i = 1;i <= m; ++ i) up[0][i] = down[0][i] = ans[0][i] = 0;\n\t\t\tQuery(1,1,n); int as = 0;\n\t\t\tfor(int i = s;i <= t; ++ i) as = max(as,min(ans[0][i],i - s + 1));\n\t\t\tprintf(\"%d\\n\",as);\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1589858544,
        "uid": 25308,
        "name": "Wen_kr",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4259 \u3010[Code+#3]\u5bfb\u627e\u8f66\u4f4d\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u795e\u9898\u2026\u2026\u8fd9\u5e74\u5934\u597d\u50cf\u4ec0\u4e48\u4e1c\u897f\u90fd\u53ef\u4ee5\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u53bb\u8dd1\u4e00\u8dd1\u2026\u2026\n\n___________________\n\n## \u672c\u9898\u9898\u89e3\n\n\u9996\u5148\u9898\u76ee\u7684\u64cd\u4f5c\u6b21\u6570\u5341\u5206\u7684\u5c0f,q\u53ea\u67092000\u610f\u5473\u7740\u6211\u4eec\u53ea\u662f\u9700\u8981\u628a\u590d\u6742\u5ea6\u63a7\u5236\u5728\u8bf8\u5982$O(qmlogn)$\u7684\u590d\u6742\u5ea6\u5373\u53ef\u901a\u8fc7\u672c\u9898\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u4e8b\u5b9e\u4e0a\u5bf9\u4e8e\u9759\u6001\u7684\u95ee\u9898\u6765\u8bb2\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u9650\u662f$O(nm)$\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u81f3\u5c11\u9700\u8981\u628a\u6574\u4e2a\u77e9\u9635\u626b\u4e00\u904d\u624d\u80fd\u4e86\u89e3\u6700\u5927\u6b63\u65b9\u5f62\u7684\u4f4d\u7f6e\n\n\u90a3\u4e48\u52a8\u6001\u7684\u95ee\u9898\u663e\u7136\u4e0d\u80fd\u505a\u7684\u6bd4\u9759\u6001\u7684\u95ee\u9898\u66f4\u597d\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u662f\u5148\u505a\u4e00\u4e2a\u9884\u5904\u7406\u7136\u540e\u4f7f\u5f97\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u4fee\u6539\u7684\u90e8\u5206\u5c3d\u53ef\u80fd\u7684\u5c0f\u800c\u5df2\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5341\u5206\u4f18\u79c0\u7684\u5de5\u5177\uff0c\u7ebf\u6bb5\u6811\u7684\u5b58\u5728\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728\u5355\u70b9\u4fee\u6539\u7684\u65f6\u5019\u4e0d\u4f1a\u4fee\u6539\u8fc7\u591a\u7684\u8282\u70b9\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u6211\u4eec\u7684\u533a\u95f4\u67e5\u8be2\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5148\u53bb\u60f3\u4e00\u4e2a\u9759\u6001\u7684\u66b4\u529b\u89e3\u6cd5\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u66b4\u529b\u89e3\u6cd5\u642c\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u53bb\u505a\u4e00\u4e2a\u5feb\u901f\u7684\u66b4\u529b\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9053\u9898\u4e86\n____________________\n\n### \u66b4\u529b:\u5355\u8c03\u961f\u5217\n\n\u8ba9\u6211\u4eec\u6765\u60f3\u4e00\u4e2a\u5e73\u51e1\u7684\u66b4\u529b\n\n\u6211\u4eec\u9996\u5148$O(n)$\u7684\u679a\u4e3e\u6700\u5927\u6b63\u65b9\u5f62\u7684\u4e0a\u8fb9\u754c\uff0c\u7136\u540e\u6211\u4eec$O(m)$\u7684\u679a\u4e3e\u6700\u5927\u6b63\u65b9\u5f62\u53f3\u7aef\u70b9\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u627e\u5230\u6700\u4f18\u7684\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d1\u73b0\u968f\u7740\u53f3\u7aef\u70b9\u7684\u589e\u52a0\uff0c\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\u662f\u5355\u8c03\u4e0d\u51cf\u7684\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5904\u7406\u51fa\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u70b9\u5411\u4e0b\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76841\uff0c\u90a3\u4e48\u5de6\u53f3\u7aef\u70b9\u95f4\u7684\u533a\u95f4\u6700\u5c0f\u503c\u5c31\u662f\u8fd9\u4e2a\u6b63\u65b9\u5f62\u6700\u5927\u53ef\u80fd\u7684\u8fb9\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4e4b\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u53f3\u7aef\u70b9\u5224\u5b9a\u4e00\u4e0b\u533a\u95f4\u6700\u5c0f\u503c\u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u7684\u5de6\u53f3\u7aef\u70b9\u4e4b\u95f4\u7684\u957f\u5ea6\uff0c\u5982\u679c\u5c0f\u4e8e\u4e86\u5c31\u628a\u5de6\u7aef\u70b9\u5411\u5de6\u632a\u4e00\u683c\u7136\u540e\u7ee7\u7eed\u5224\u65ad\uff0c\u7136\u540e\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\u5373\u53ef(\u76f8\u4fe1\u6765\u770b\u8fd9\u7bc7\u9898\u89e3\u7684\u4eba\u5e94\u8be5\u90fd\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\u600e\u4e48\u505a)\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8981\u628a\u8fd9\u4e2a\u4e1c\u897f\u632a\u5230\u7ebf\u6bb5\u6811\u4e0a\u6765\u2026\u2026\n\n\u8be5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u4ec5\u4ec5\u5bf9\u4e8en\u8fd9\u4e00\u7ef4\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u77e9\u5f62\u9ad8\u5ea6\u5747\u4e3am\n\n\u6211\u4eec\u53d1\u73b0\u56e0\u4e3a\u590d\u6742\u5ea6\u4ec5\u4ec5\u8981\u6c42$O(mlogn)$\u56e0\u6b64\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u66b4\u529b\u7684\n\n\u6bd4\u5982\u8bf4\u679a\u4e3e\u4e0a\u8fb9\u754c\u8fd9\u4e2a\u66b4\u529b\u662f\u53ef\u4ee5\u4fdd\u7559\u4e0b\u6765\u7684\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5728\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u53bb\u679a\u4e3e\u4e0a\u8fb9\u754c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u4e0a\u8fb9\u754ci\u6c42\u51fa\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u533a\u95f4\u6700\u5927\u503c\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u7559\u7ed9\u6211\u4eec\u7684\u5c31\u53ea\u5269\u4e0b$O(logn)$\u7684\u590d\u6742\u5ea6\u4e86\n\n\u56e0\u6b64\u4e00\u5b9a\u662f\u4f7f\u7528\u7ebf\u6bb5\u6811\u5c06\u8fd9\u4e2a\u8be2\u95ee\u7684\u5b50\u77e9\u5f62\u5728n\u8fd9\u4e00\u7ef4\u5256\u5206\u6210$O(logn)$\u4e2a\u5b50\u77e9\u5f62\uff0c\u7136\u540e$O(1)$\u7684\u6c42\u51fa\u6bcf\u4e2a\u5b50\u77e9\u5f62\u5185\u90e8\u7684\u6700\u5927\u51681\u6b63\u65b9\u5f62\uff0c\u4e4b\u540e\u518d\u8003\u8651\u8de8\u8d8a\u51e0\u4e2a\u5b50\u77e9\u5f62\u4e4b\u95f4\u7684\u6700\u5927\u51681\u6b63\u65b9\u5f62\u4e86\n\n\u90a3\u4e48\u4e3a\u4e86$O(1)$\u7684\u63d0\u53d6\u4fe1\u606f\u6211\u4eec\u53ea\u53ef\u80fd\u518d\u7ebf\u6bb5\u6811\u4e0a\u5904\u7406\u51fa\u4e00\u4e2a$val$\u6570\u7ec4\uff0c$val_{i}$\u8868\u793a\u4e0a\u8fb9\u754c\u4e3ai\u65f6\u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u5b50\u77e9\u5f62\u4e2d\u7684\u6700\u5927\u51681\u6b63\u65b9\u5f62\u8fb9\u957f\uff0c\u8fd9\u6837\u7684\u8bdd$O(nm)$\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8003\u8651\u5982\u4f55\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6362\u53e5\u8bdd\u8bf4\u5176\u4ed6\u90fd\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\uff0c\u6211\u4eec\u552f\u4e00\u5728\u610f\u7684\u5c31\u662f\u8fd9\u4e2amerge\u51fd\u6570\u600e\u4e48\u5199\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e$val_{i}$\u6765\u8bb2\uff0c\u5b83\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u53d6\u4e24\u4e2a\u5b69\u5b50\u7684$val_{i}$\u7684max\u6765\u5f97\u5230\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5ffd\u7565\u4e86\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u5982\u4f55\u7b97\u51fa\u8de8\u8d8a\u4e24\u4e2a\u533a\u95f4\u7684\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u3002\n\n\u663e\u7136\u6211\u4eec\u8981\u6c42\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$val_{i}$\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0$O(1)$\u7684merge\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5747\u644a\u7684\u7b97\u6cd5\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u4f7f\u7528\u5747\u644a$O(1)$\u7684\u7b97\u6cd5\uff0c\u4e00\u53e3\u6c14\u4ece1\u5230mmerge\u5b8c\u6240\u6709\u7684$val_{i}$\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5982\u679c\u4ece1\u5230m\u679a\u4e3ei\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0a\u8fb9\u754ci\uff0c\u6c42\u51fa\u6765\u4e00\u4e2a\u6700\u4f18\u7684\u4e0b\u8fb9\u754cj\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e8b\u5b9e\u4e0a\u7740\u5bf9\u5e94\u7740\u6211\u4eec\u9759\u6001\u66b4\u529b\u65f6\u626b\u4e00\u8fb9\u53f3\u7aef\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6c42\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u5de6\u7aef\u70b9\u7684\u8fc7\u7a0b\n\n\u548c\u6211\u4eec\u7684\u9759\u6001\u66b4\u529b\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u5f53\u4e0a\u8fb9\u754ci\u589e\u957f\u7684\u65f6\u5019\u6700\u4f18\u4e0b\u8fb9\u754cj\u5355\u8c03\u4e0d\u51cf\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u53bb\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u95ee\u9898\u6765\u4e86\u7ef4\u62a4\u8c01\u7684\u533a\u95f4\u6700\u5c0f\u503c\uff1f\n\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u4e00\u5b9a\u8de8\u8d8a\u4e86\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8fb9\u754c\u7ebf\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4$lf$\u548c$rt$\u8868\u793ai\u8fd9\u4e00\u884c\u548c\u5de6\u8fb9\u754c\u76f8\u90bb\u7684\u51681\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u4ee5\u53ca\u548c\u53f3\u8fb9\u754c\u76f8\u90bb\u7684\u51681\u5e8f\u5217\u7684\u957f\u5ea6\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u53ea\u9700\u8981\u5206\u522b\u7528\u4e24\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5de6\u513f\u5b50\u7684rt\u6570\u7ec4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u53f3\u513f\u5b50\u7684lf\u6570\u7ec4\u533a\u95f4\u6700\u5c0f\u503c\u5373\u53ef\u4e86\uff0c\u6211\u4eec\u5224\u65ad\u8fd9\u4e2a\u4e0b\u8fb9\u754cj\u7684\u65b9\u5f0f\u5408\u4e0d\u5408\u6cd5\u7684\u65b9\u6cd5\u5c31\u662f\u5224\u65ad\u4e0a\u4e0b\u4e24\u4e2a\u8fb9\u754c\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u5927\u4e8e\u4e86lf\u548crt\u6570\u7ec4\u533a\u95f4\u6700\u5c0f\u503c\u7684\u548c\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5bf9\u6bcf\u4e00\u4e2a\u4e0a\u8fb9\u754ci\u4ee5\u5747\u644a$O(1)$\u7684\u4ee3\u4ef7\u6c42\u51fa\u4e86\u8de8\u8d8a\u4e24\u4e2a\u5b69\u5b50\u7684\u6700\u5927\u7684\u51681\u6b63\u65b9\u5f62\uff0c\u548c\u5728\u4e24\u4e2a\u5b69\u5b50\u5185\u90e8\u7684$val$\u503c\u53d6\u4e00\u4e0bmax\u5c31\u53ef\u4ee5\u6c42\u51fa$val_{i}$\u7684\u503c\u4e86\n\n\u7136\u540e\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u8fd8\u9700\u8981merge\u4e0b\u4e24\u4e2a\u5b69\u5b50\u7684lf\u548crt\u6570\u7ec4\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u989d\u5916\u5f00\u4e00\u4e2alen\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u77e9\u5f62\u7684\u5bbd\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u6c42lf\u7684\u65f6\u5019\u5224\u4e0b\u5de6\u513f\u5b50\u7684lf\u662f\u5426\u662f\u6ee1\u7684\uff0c\u4ee5\u51b3\u5b9a\u53f3\u513f\u5b50\u662f\u5426\u53ef\u4ee5\u63a5\u4e0a\u53bb\uff0c\u540c\u7406rt\u6570\u7ec4\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u7684\u6c42\u51fa\u4e86\n\n\u597d\u4e86\u90a3\u4e48\u6211\u4eec\u6109\u5feb\u7684merge\u4e86\u4e24\u4e2a\u5b69\u5b50\uff0c\u73b0\u5728\u6211\u4eec\u5176\u5b9e\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u5355\u70b9\u4fee\u6539\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u7684\u5355\u70b9\u6539\u7136\u540e\u4e00\u8defmerge\u4e0a\u53bb\u5373\u53ef\n\n\u95ee\u9898\u6765\u4e86\u5b50\u77e9\u5f62\u8be2\u95ee\u5462\uff1f\n\u3001\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u8de8\u8d8a\u4e86\u82e5\u5e72\u4e2a\u5b50\u77e9\u5f62\u7684\u7b54\u6848\u975e\u5e38\u597d\u6c42\uff0c\u6211\u4eec\u4ee50\u53f7\u8282\u70b9\u4e3a1\u4e2a\u4e2d\u95f4\u8282\u70b9\uff0c\u7136\u540e\u6309\u7167\u7ebf\u6bb5\u6811\u62c6\u5206\u7684\u987a\u5e8f\u4ece\u5de6\u5230\u53f3\u4e00\u8defmerge\u8fc7\u53bb\uff0c\u6ce8\u610fmerge\u7684\u65f6\u5019\u539f\u6765\u662f\u4ece1\u5230m\u7684\u679a\u4e3e\u4e0a\u8fb9\u754c\uff0c\u73b0\u5728\u662f\u4ece\u5b50\u77e9\u5f62\u7684\u4e0a\u8fb9\u754c\u5230\u4e0b\u8fb9\u754c\u679a\u4e3e\u4e0a\u8fb9\u754c\u4e86\n\n\u73b0\u5728\u8fd8\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u62c6\u5206\u51fa\u7684$O(logn)$\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5982\u4f55\u63d0\u53d6\u51fa\u5b83\u4eec\u7684\u7b54\u6848\uff1f\n\n\u7b54\u6848\u8fd8\u662f\u679a\u4e3e\u4e0a\u8fb9\u754c\uff0c\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u94a6\u5b9a\u7684\u4e0a\u8fb9\u754ci\uff0c\u6700\u5927\u6b63\u65b9\u5f62\u7684\u957f\u5ea6\u4e0d\u5f97\u8d85\u8fc7\u8fd9\u4e2a\u4e0a\u8fb9\u754c\u5230\u8be2\u95ee\u5b50\u77e9\u5f62\u4e0b\u8fb9\u754c\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u628a$val_{i}$\u548c\u8ddd\u79bb\u53d6\u4e2amin\u6700\u540e\u628a\u6240\u6709\u4e0a\u8fb9\u754c\u7684\u7b54\u6848\u53d6\u4e2amax\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5$O(m)$\u7684\u63d0\u53d6\u51fa\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u4e86\n\n\u5176\u5b9e\u4ee3\u7801\u8fd8\u662f\u8d85\u7ea7\u597d\u5199\u7684\uff0c\u5982\u679c\u4f60\u7684\u7ebf\u6bb5\u6811\u677f\u5b50\u51fd\u6570\u5206\u7684\u597d\u7684\u8bdd\uff0c\u4f60\u751a\u81f3\u53ea\u9700\u8981\u6539\u4e00\u4e2amerge\u51fd\u6570\u5c31\u884c\u4e86\n\n\u7136\u540e\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u6211\u4eec\u4f7f\u75281\u7ef4\u6570\u7ec4\u53bb\u52a8\u6001\u7684\u6a21\u62df\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6709\u4e00\u4e2a\u5c0ftrick\u662f\u53ef\u4ee5\u91cd\u8f7d\u4e00\u4e2a'\\[]'\u8fd0\u7b97\u7b26\u4ece\u800c\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u4e8c\u7ef4\u6570\u7ec4\u5199\u5c31\u884c\u4e86\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=4*1e6+10;\nint n;int m;int q;\nstruct mar {int f[4*N];inline int* operator [](int x){return f+x*m;}}mp;//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u65b9\u4fbf\u5199\u4ee3\u7801 \nstruct linetree\n{\n    mar v;mar lf;mar rt;int len[4*N];int ql[N];int qr[N];\n    int hd1;int tl1;int hd2;int tl2;\n    inline void merge(int p,int p1,int p2)//\u53cc\u6307\u9488\u626b\u4e00\u904d\u5904\u7406\u8282\u70b9\u5408\u5e76\u7684\u4fe1\u606f \n    {\n        hd1=hd2=1;tl1=tl2=0;\n        for(int i=1,j=1;i<=m;i++)\n        {\n            while(hd1<=tl1&&lf[p2][ql[tl1]]>lf[p2][i])tl1--;ql[++tl1]=i;//\u5355\u8c03\u961f\u5217\u63d2\u5165 \n            while(hd2<=tl2&&rt[p1][qr[tl2]]>rt[p1][i])tl2--;qr[++tl2]=i;\n            while(hd1<=tl1&&hd2<=tl2&&lf[p2][ql[hd1]]+rt[p1][qr[hd2]]<(i-j+1))\n            {if(ql[hd1]<=j){hd1++;}if(qr[hd2]<=j){hd2++;}j++;}\n            v[p][i]=max(v[p1][i],v[p2][i]);v[p][i]=max(v[p][i],(i-j+1));//\u5de6\u8fb9,\u53f3\u8fb9,\u4e2d\u95f4 \n        }\n        for(int i=1;i<=m;i++)lf[p][i]=(lf[p1][i]==len[p1])?lf[p1][i]+lf[p2][i]:lf[p1][i];//\u5408\u5e76lf \n        for(int i=1;i<=m;i++)rt[p][i]=(rt[p2][i]==len[p2])?rt[p2][i]+rt[p1][i]:rt[p2][i];//\u5408\u5e76rt \n    }\n    inline int merge(int p1,int p2,int l,int r)//\u6c42\u4e24\u4e2a\u8282\u70b9\u7684\u4ea4,\u8be2\u95ee\u65f6\u4f7f\u7528 \n    {\n        hd1=hd2=1;tl1=tl2=0;int ret=0;\n        for(int i=l,j=l;i<=r;i++)\n        {\n            while(hd1<=tl1&&lf[p2][ql[tl1]]>lf[p2][i])tl1--;ql[++tl1]=i;\n            while(hd2<=tl2&&rt[p1][qr[tl2]]>rt[p1][i])tl2--;qr[++tl2]=i;\n            while(hd1<=tl1&&hd2<=tl2&&lf[p2][ql[hd1]]+rt[p1][qr[hd2]]<(i-j+1))\n            {if(ql[hd1]==j){hd1++;}if(qr[hd2]==j){hd2++;}j++;}\n            ret=max(ret,(i-j+1));\n        }\n        for(int i=l;i<=r;i++)lf[p1][i]=(lf[p1][i]==len[p1])?lf[p1][i]+lf[p2][i]:lf[p1][i];\n        for(int i=l;i<=r;i++)rt[p1][i]=(rt[p2][i]==len[p2])?rt[p2][i]+rt[p1][i]:rt[p2][i];\n        len[p1]+=len[p2];return ret;\n    }\n    inline void modify(int p,int l,int r,int pos,int px)//\u4fee\u6539\u7684\u8bdd\u4e00\u8defmerge\u4e0a\u53bb\u5c31\u597d\u4e86 \n    {\n        if(r-l==1){v[p][px]=lf[p][px]=rt[p][px]=mp[r][px];return;}\n        int mid=(l+r)/2;\n        if(pos<=mid){modify(p<<1,l,mid,pos,px);}\n        else {modify(p<<1|1,mid,r,pos,px);}\n        merge(p,p<<1,p<<1|1);\n    }\n    inline int query(int p,int l,int r,int dl,int dr,int xl,int xr)//\u8be2\u95ee\u7684\u8bdd\u76f4\u63a5\u4e00\u8defmerge\u8fc7\u53bb\u5373\u53ef \n    {\n        if(dl==l&&dr==r)\n        {\n            int ret=merge(0,p,xl,xr);//\u63d0\u53d6\u4fe1\u606f \n\t\t\tfor(int i=xl;i<=xr;i++)ret=max(ret,min(v[p][i],i-xl+1));return ret;//\u6c42\u4ea4 \n        }int ret=0;int mid=(l+r)/2;\n        if(dl<mid)ret=max(ret,query(p<<1,l,mid,dl,min(dr,mid),xl,xr));\n        if(mid<dr)ret=max(ret,query(p<<1|1,mid,r,max(dl,mid),dr,xl,xr));\n        return ret;\n    }\n    inline int cquery(int dl,int dr,int xl,int xr)//\u8bb0\u5f97\u6e05\u7a7a\u4e2d\u95f4\u8282\u70b9 \n    {\n        for(int i=1;i<=m;i++)v[0][i]=lf[0][i]=rt[0][i]=0;len[0]=0;\n        return query(1,0,n,dl,dr,xl,xr);\n    }\n    inline void build(int p,int l,int r)//\u5efa\u6811\u7684\u65f6\u5019\u4e5f\u662f\u76f4\u63a5merge\u5c31\u597d\u4e86 \n    {\n        if(r-l==1){for(int i=1;i<=m;i++)lf[p][i]=rt[p][i]=v[p][i]=mp[r][i];len[p]=1;return;}\n        int mid=(l+r)/2;build(p<<1,l,mid);build(p<<1|1,mid,r);len[p]=len[p<<1]+len[p<<1|1];\n        merge(p,p<<1,p<<1|1);\n    }\n}lt;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=1;i<=n;i++)for(int j=1;j<=m;j++)scanf(\"%d\",&mp[i][j]);lt.build(1,0,n);\n    for(int i=1,t;i<=q;i++)\n    {\n        scanf(\"%d\",&t);\n        if(t==0){int x;int y;scanf(\"%d%d\",&x,&y);mp[x][y]^=1;lt.modify(1,0,n,x,y);}\n        else \n        {\n            int dl;int dr;int xl;int xr;scanf(\"%d%d%d%d\",&dl,&xl,&dr,&xr);\n            printf(\"%d\\n\",lt.cquery(dl-1,dr,xl,xr));\n        }\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n\n```",
        "postTime": 1526565717,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4259 \u3010[Code+#3]\u5bfb\u627e\u8f66\u4f4d\u3011"
    },
    {
        "content": "\u8003\u8651\u5bf9\u884c\u5efa\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u8bbe\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u4e3a $[l,r]$ \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 $m$ \u5217\u5728\u8fd9\u4e2a\u533a\u95f4\u7ef4\u62a4\u8d34\u7d27\u5de6\u3001\u53f3\u7aef\u70b9\u7684\u8fde\u7eed\u6bb5\u957f\u5ea6\u3002\u540c\u65f6\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u5217\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u80fd\u5f97\u5230\u7684\u6700\u5927\u7684\u53f3\u7aef\u70b9\u5728\u8fd9\u4e00\u5217\u7684\u6b63\u65b9\u5f62\u5927\u5c0f\u3002\n\n\u7531\u4e8e\u6211\u4eec\u7ef4\u62a4\u4e86\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5408\u5e76\u7684\u65f6\u5019\u5927\u6982\u5c31\u6709\u8fd9\u6837\u4e00\u4e2a\u56fe\uff1a\n\n![JGGNMM__S_4_@BCXJTV___H.png](https://i.loli.net/2020/05/19/cU56F9JwIoObL7M.png)\n\n\u9996\u5148\uff0c\u8fde\u7eed\u6bb5\u957f\u5ea6\u662f\u975e\u5e38\u597d\u5408\u5e76\u7684\u3002\n\n\u5408\u5e76\u65f6\uff0c\u53ea\u9700\u8981\u8003\u8651\u8de8\u8fc7\u4e86 $mid$ \u7684\u6b63\u65b9\u5f62\u3002\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u6bcf\u5217\u4f5c\u4e3a\u6b63\u65b9\u5f62\u7684\u53f3\u8fb9\u5728\u533a\u95f4\u80fd\u5f97\u5230\u7684\u6b63\u65b9\u5f62\u5927\u5c0f\u3002\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u679a\u4e3e\u53f3\u7aef\u70b9 $i$ \u3002\u5982\u679c\u5de6\u53f3\u7aef\u70b9\u56fa\u5b9a\uff0c\u90a3\u4e48\u7ad6\u76f4\u7684\u8fb9\u957f\u5c31\u662f\u5728\u533a\u95f4\u7684\u4e0a\u4e0b\u533a\u95f4\u5206\u522b\u7684\u6700\u5c0f\u503c\u7684\u5dee\u3002\u8003\u8651\u5de6\u7aef\u70b9\u53f3\u79fb\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u80fd\u6784\u6210\u7684\u6b63\u65b9\u5f62\u6700\u5927\u7684\u6c34\u5e73\u7684\u8fb9\u957f\u5728\u53d8\u5c0f\uff0c\u7ad6\u76f4\u7684\u8fb9\u957f\u5728\u53d8\u5927\uff08\u56e0\u4e3a\u533a\u95f4\u6700\u5c0f\u503c\u968f\u7740\u6570\u88ab\u5220\u9664\u53ea\u4f1a\u589e\u5927\uff09\u3002\u800c\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u65f6\uff0c\u7ad6\u76f4\u7684\u8fb9\u957f\u5728\u5355\u8c03\u53d8\u5c0f\uff0c\u6c34\u5e73\u7684\u8fb9\u957f\u589e\u52a0\u4e86 $1$ \u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u53f3\u7aef\u70b9\u5411\u53f3\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\u5de6\u7aef\u70b9\u662f\u5355\u8c03\u5411\u53f3\u79fb\u52a8\u7684\u3002\u5982\u679c\u53f3\u7aef\u70b9\u79fb\u52a8\u5bfc\u81f4\u5f53\u524d\u5de6\u53f3\u7aef\u70b9\u6784\u4e0d\u6210\u6b63\u65b9\u5f62\u4e86\uff0c\u4e5f\u5c31\u662f\u7ad6\u76f4\u7684\u8fb9\u957f\u88ab\u51cf\u5f97\u592a\u5c0f\u4e86\u6216\u8005\u6c34\u5e73\u7684\u8fb9\u957f\u592a\u957f\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5de6\u79fb\u5de6\u7aef\u70b9\u660e\u663e\u53ea\u4f1a\u8ba9\u7ad6\u76f4\u8fb9\u957f\u4e0e\u6c34\u5e73\u8fb9\u957f\u66f4\u52a3\u3002\n\n\u7ef4\u62a4\u4e0a\u4e0b\u533a\u95f4\u4e4b\u5185\u7684\u6700\u5c0f\u503c\u53ef\u4ee5\u4e0a\u4e0b\u5206\u522b\u7ef4\u62a4\u5355\u8c03\u961f\u5217\u89e3\u51b3\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u5f53\u524d\u6c34\u5e73\u7684\u957f\u5ea6\u8d85\u8fc7\u4e86\u4e0a\u4e0b\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5c31\u5de6\u79fb\u5de6\u7aef\u70b9\uff0c\u66f4\u65b0\u5355\u8c03\u961f\u5217\u5373\u53ef\u3002\n\n```cpp\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"cmath\"\n#include \"vector\"\n#include \"map\"\n#include \"set\"\n#include \"queue\"\nusing namespace std;\n#define MAXN 4000006\n//#define int long long\n#define rep(i, a, b) for (int i = (a), i##end = (b); i <= i##end; ++i)\n#define per(i, a, b) for (int i = (a), i##end = (b); i >= i##end; --i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define vi vector<int>\n#define all(x) (x).begin() , (x).end()\n#define mem( a ) memset( a , 0 , sizeof a )\ntypedef long long ll;\nint n , m , q;\n\nstruct poi {\n\tint a[MAXN * 4]; // a[SIZE/m][m]\n\tint* operator[] ( int x ) {\n\t\treturn a + x * m;\n\t}\n} up , dw , ans , G ;\n\nint q1[MAXN] , q2[MAXN] , hd1 , hd2 , tl1 , tl2;\n\ninline void merge( int rt , int ls , int rs , int llen , int rlen ) {\n\thd1 = hd2 = 0 , tl1 = tl2 = -1;\n\tint j = 1;\n\trep( i , 1 , m ) {\n\t\twhile( hd1 <= tl1 && up[rs][i] <= up[rs][q1[tl1]] ) -- tl1;\n\t\twhile( hd2 <= tl2 && dw[ls][i] <= dw[ls][q2[tl2]] ) -- tl2;\n\t\tq1[++ tl1] = i , q2[++ tl2] = i;\n\t\twhile( j <= i && i - j + 1 > up[rs][q1[hd1]] + dw[ls][q2[hd2]] ) {\n\t\t\t++ j;\n\t\t\twhile( hd1 <= tl1 && q1[hd1] < j ) ++ hd1;\n\t\t\twhile( hd2 <= tl2 && q2[hd2] < j ) ++ hd2;\n\t\t}\n\t\tans[rt][i] = max( i - j + 1 , max( ans[ls][i] , ans[rs][i] ) );\n\t}\n\trep( i , 1 , m ) {\n\t\tup[rt][i] = up[ls][i] + ( up[ls][i] == llen ? up[rs][i] : 0 );\n\t\tdw[rt][i] = dw[rs][i] + ( dw[rs][i] == rlen ? dw[ls][i] : 0 );\n\t}\n}\n\nvoid build( int rt , int l , int r ) {\n\tif( l == r ) {\n\t\trep( i , 1 , m ) up[rt][i] = dw[rt][i] = ans[rt][i] = G[l][i];\n\t\treturn;\n\t}\n\tint m = l + r >> 1 , len = r - l + 1;\n\tbuild( rt << 1 , l , m ) , build( rt << 1 | 1 , m + 1 , r );\n\tmerge( rt , rt << 1 , rt << 1 | 1 , len - ( len >> 1 ) , len >> 1 );\n}\n\nvoid flip( int rt , int l , int r , int p , int x ) {\n\tif( l == r ) {\n\t\tup[rt][x] ^= 1 , dw[rt][x] ^= 1 , ans[rt][x] ^= 1; return;\n\t}\n\tint m = l + r >> 1 , len = r - l + 1;\n\tif( p <= m ) flip( rt << 1 , l , m , p , x );\n\telse flip( rt << 1 | 1 , m + 1 , r , p , x );\n\tmerge( rt , rt << 1 , rt << 1 | 1 , len - ( len >> 1 ) , len >> 1 );\n}\n\nvoid que( int rt , int l , int r , int L , int R ) {\n\tif( L <= l && R >= r ) {\n\t\tmerge( 0 , 0 , rt , l - L , r - l + 1 );\n\t\treturn;\n\t}\n\tint m = l + r >> 1;\n\tif( L <= m ) que( rt << 1 , l , m , L , R );\n\tif( R > m ) que( rt << 1 | 1 , m + 1 , r , L , R );\n}\n\nnamespace IO {\nconst int MAXSIZE = 1 << 20;\nchar buf[MAXSIZE], *p1, *p2;\n#define gc()                                                               \\\n  (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) \\\n       ? EOF                                                               \\\n       : *p1++)\ninline int rd() {\n  int x = 0, f = 1;\n  char c = gc();\n  while (!isdigit(c)) {\n    if (c == '-') f = -1;\n    c = gc();\n  }\n  while (isdigit(c)) x = x * 10 + (c ^ 48), c = gc();\n  return x * f;\n}\nchar pbuf[1 << 20], *pp = pbuf;\ninline void push(const char &c) {\n  if (pp - pbuf == 1 << 20) fwrite(pbuf, 1, 1 << 20, stdout), pp = pbuf;\n  *pp++ = c;\n}\ninline void write(int x) {\n  static int sta[35];\n  int top = 0;\n  do {\n    sta[top++] = x % 10, x /= 10;\n  } while (x);\n  while (top) push(sta[--top] + '0');\n  push( 10 );\n}\n}\n\nvoid solve() {\n\tusing namespace IO;\n\tcin >> n >> m >> q;\n\trep( i , 1 , n ) rep( j , 1 , m ) G[i][j] = rd();\n\tbuild( 1 , 1 , n );\n\tint op , x , y , xx , yy , re;\n\trep( i , 1 , q ) {\n\t\top = rd() , x = rd() , y = rd();\n\t\tif( op == 0 ) \n\t\t\tflip( 1 , 1 , n , x , y ) , G[x][y] ^= 1;\n\t\telse {\n\t\t\txx = rd() , yy = rd();\n\t\t\trep( i , 1 , m ) up[0][i] = dw[0][i] = ans[0][i] = 0;\n\t\t\tque( 1 , 1 , n , x , xx );\n//\t\t\trep( i , 1 , m ) printf(\"%d\\n\",ans[0][i]);\n\t\t\tre = 0;\n\t\t\trep( i , y , yy ) re = max( re , min( i - y + 1 , ans[0][i] ) );\n\t\t\twrite( re );\n\t\t}\n\t}\n\tfwrite( pbuf , 1 , pp - pbuf , stdout );\n}\n\nsigned main() {\n//    int T;cin >> T;while( T-- ) solve();\n    solve();\n}\n\n```\n\n",
        "postTime": 1589867419,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4259 \u3010[Code+#3]\u5bfb\u627e\u8f66\u4f4d\u3011"
    }
]