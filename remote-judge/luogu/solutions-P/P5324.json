[
    {
        "content": "[%%yyb](https://www.cnblogs.com/cjyyb/p/10750238.html#4238627)\n\n\u8fd9\u91cc\u8bf4\u8be6\u7ec6\u4e00\u4e9b\n\n**\u63a8\u6027\u8d28+\u731c\u7ed3\u8bba**\n\n\u8003\u8651\u6ca1\u6709\u4fee\u6539\u3002\u5982\u4f55\u5feb\u901f\u7b97\u51fa\u3002\u518d\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4fee\u6539\u4ec0\u4e48\u7684\n\n\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u7b54\u6848\u548c\u6570\u5217\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u53ea\u548c\u51fa\u73b0\u7684\u6570\u6709\u5173\n\n\u5982\u679c\u5f00\u4e00\u4e2a\u6876\uff0c\u628a\u6bcf\u4e2a\u6570\u645e\u6210\u82e5\u5e72\u4e2a\u67f1\u5b50\uff0c\u7136\u540e\u5f80\u5de6\u63a8\u5012\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f[1,n]\u4e2d\u672a\u88ab\u8986\u76d6\u7684\u4e2a\u6570\u3002\n\n\u8bc1\u660e\uff1a\n\n1.\u9996\u5148\u8fd9\u662f\u7b54\u6848\u7684\u4e0b\u754c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7a7a\u4f4d\uff0c\u6bd4\u5b83\u5927\u7684\u67f1\u5b50\u5220\u6389\u4e4b\u540e\u4e0d\u80fd\u8de8\u8d8a\u5b83\uff0c\u6bd4\u5b83\u5c0f\u7684\u67f1\u5b50\u53c8\u4e0d\u80fd\u63d0\u524d\u5220\u6389\u3002\u6240\u4ee5\u5fc5\u987b\u53d8\u52a8\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u91cc\u88ab\u906e\u76d6\u4e0a\u3002\n\n2.\u53ef\u4ee5\u6784\u9020\u51fa\u81f3\u5c11\u4e00\u79cd\u65b9\u6848\u8fbe\u5230\u8fd9\u4e2a\u4e0b\u754c\u3002\u603b\u6570\u662fn\uff0c\u90a3\u4e48\u6709k\u4e2a\u7a7a\u4f4d\uff0c\u5c31\u5fc5\u7136\u6709k\u4e2a\u91cd\u53e0\u7684\u4f4d\u7f6e\u3002\u628a\u8fd9\u4e9b\u67f1\u5b50\u6d88\u6389\u4e00\u4e9b\uff0c\u653e\u5230\u7a7a\u4f4d\u4e0a\uff0c\u663e\u7136\u6ca1\u6709\u95ee\u9898\u3002\n\n\u8003\u8651\u7ef4\u62a4\n\n1.\u53ea\u6709p>0\uff0c\u5c31\u662f\u5355\u70b9\u9ad8\u5ea6\u4fee\u6539\u4e86\uff0c\u7528\u4e2a\u6876\u5c31\u53ef\u4ee5O(m)\u505a\n\n2.\u8fd8\u6709p=0\u7684\u6574\u4f53\u64cd\u4f5c\uff0c\u53d1\u73b0\uff0c\u5c31\u662f\u67e5\u8be2\u533a\u95f4\u8fdb\u884c\u4e86\u5e73\u79fb\uff01\u7528\u4e00\u4e2a\u53d8\u91cfst\u8bb0\u5f55\u5f53\u524d0\u7684\u4f4d\u7f6e\uff0c\u79fb\u52a8\u65f6\u5019\u76f4\u63a5--st\u6216\u8005++st\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u88ab\u8986\u76d6\u7684\u60c5\u51b5\n\n\u4f46\u662f\uff0c\u5f53\u4e00\u4e2a\u67f1\u5b50\u6ca1\u6709\u843d\u5230[st+1,st+n]\u7684\u533a\u95f4\u4e0a\uff0c\u5e76\u4e14>st+n\uff0c\u8fd9\u6837\u7684\u67f1\u5b50\u5e76\u4e0d\u80fd\u8d21\u732e\u8986\u76d6\u7684\uff0c\u4e00\u5b9a\u662f\u4e4b\u540e\u9700\u8981\u4fee\u6539\u7684\u7d2f\u8d58\u3002\n\n\u6240\u4ee5\uff0c\u5f53st--\u65f6\u5019\uff0c\u5bf9\u4e8e\u539f\u6765\u7684\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff0c\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u67f1\u5b50\u5bf9[p-buc+1,p]\u7684\u8d21\u732e\u51cf\u63891\u3002++st\u65f6\u5019\u8fd8\u539f\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff1a\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u6700\u5c0f\u503c\u51fa\u73b0\u6b21\u6570\uff0c0\u7684\u4e2a\u6570\uff0c\u52a0\u6cd5\u6807\u8bb0\n\n\u8fd9\u6837\uff0c\u67e5\u8be2\u65f6\u5019\u76f4\u63a5\u533a\u95f4\u67e5\u8be20\u4e2a\u6570\u5373\u53ef\n\n\u6ce8\u610f\uff0c\u5355\u70b9\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u5224\u65ad\u662f\u5426<=st+n\n\n```cpp\n#include<bits/stdc++.h>\n#define reg register int\n#define il inline\n#define fi first\n#define se second\n#define mk(a,b) make_pair(a,b)\n#define numb (ch^'0')\nusing namespace std;\ntypedef long long ll;\ntemplate<class T>il void rd(T &x){\n    char ch;x=0;bool fl=false;\n    while(!isdigit(ch=getchar()))(ch=='-')&&(fl=true);\n    for(x=numb;isdigit(ch=getchar());x=x*10+numb);\n    (fl==true)&&(x=-x);\n}\ntemplate<class T>il void output(T x){if(x/10)output(x/10);putchar(x%10+'0');}\ntemplate<class T>il void ot(T x){if(x<0) putchar('-'),x=-x;output(x);putchar(' ');}\ntemplate<class T>il void prt(T a[],int st,int nd){for(reg i=st;i<=nd;++i) ot(a[i]);putchar('\\n');}\n\nnamespace Miracle{\nconst int N=150000*3+10;\n#define mid ((l+r)>>1)\n#define ls (x<<1)\n#define rs (x<<1|1)\nint n,m;\nstruct node{\n    int mi,cnt;\n    int ans,ad;\n}t[4*N];\nint a[N],buc[N];\nint st,lim;\nvoid pushup(int x){\n    t[x].mi=min(t[ls].mi,t[rs].mi);\n    t[x].cnt=(t[ls].mi==t[x].mi?t[ls].cnt:0)+(t[rs].mi==t[x].mi?t[rs].cnt:0);\n    t[x].ans=t[ls].ans+t[rs].ans;\n}\nvoid tag(int x,int c){\n    t[x].mi+=c;\n    t[x].ans=(t[x].mi==0)?t[x].cnt:0;\n    t[x].ad+=c;\n}\nvoid pushdown(int x){\n    if(t[x].ad){\n        tag(ls,t[x].ad);tag(rs,t[x].ad);\n        t[x].ad=0;\n    }\n}\nvoid build(int x,int l,int r){\n    if(l==r){\n        t[x].cnt=1;t[x].ans=1;\n        return;\n    }\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    pushup(x);\n}\nvoid upda(int x,int l,int r,int L,int R,int c){\n    if(L<=l&&r<=R){\n        tag(x,c);return;\n    }\n    pushdown(x);\n    if(L<=mid) upda(ls,l,mid,L,R,c);\n    if(mid<R) upda(rs,mid+1,r,L,R,c);\n    pushup(x);\n}\nint query(int x,int l,int r,int L,int R){\n    if(L<=l&&r<=R) return t[x].ans;\n    pushdown(x);\n    if(R<=mid) return query(ls,l,mid,L,R);\n    if(mid<L) return query(rs,mid+1,r,L,R);\n    return query(ls,l,mid,L,R)+query(rs,mid+1,r,L,R);\n}\nvoid chan(int x,int c){\n    int k=x-buc[x]+1-(c>0);\n    upda(1,1,lim,k,k,c);\n    buc[x]+=c;\n}\nint main(){\n    rd(n);rd(m);\n    st=150000+1,lim=450000+5;//\u5f00\u59cb0\u4f4d\u7f6e\u548c\u7ebf\u6bb5\u6811\u4e0a\u754c\n    build(1,1,lim);\n    for(reg i=1;i<=n;++i){\n        rd(a[i]);a[i]+=st;chan(a[i],1);\n    }\n    int p,x;\n    while(m--){\n        rd(p);rd(x);\n        if(p>0){//\u5355\u70b9\u4fee\u6539\n            if(a[p]<=st+n){\n                chan(a[p],-1);\n            }else{//\u5224\u65ad\u662f\u5426<=st+n\n                --buc[a[p]];\n            }\n            a[p]=st+x;\n            if(a[p]<=st+n){\n                chan(a[p],1);\n            }else{//\u5224\u65ad\u662f\u5426<=st+n\n                ++buc[a[p]];\n            }\n        }else if(x>0){\n            int pos=st+n;\n            if(buc[pos]) upda(1,1,lim,pos-buc[pos]+1,pos,-1);//\u6e05\u9664\u8d21\u732e\n            --st;\n        }else{\n            ++st;\n            int pos=st+n;\n            if(buc[pos]) upda(1,1,lim,pos-buc[pos]+1,pos,1);//\u52a0\u4e0a\u8d21\u732e\n        }\n        printf(\"%d\\n\",query(1,1,lim,st+1,st+n));\n    }\n    return 0;\n}\n\n}\nsigned main(){\n\tMiracle::main();\n\treturn 0;\n}\n\n/*\n   Author: *Miracle*\n*/\n\n\n```\n\n\n\n\n\n",
        "postTime": 1556106593,
        "uid": 56672,
        "name": "\u67ab\u6797\u665a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019] \u5220\u6570\u3011"
    },
    {
        "content": "### \u8f6c\u6362\u9898\u610f+\u7ebf\u6bb5\u6811\n\n\n\n------------\n\n\u524d\u8a00\uff1a\u505a\u6cd5\u662f\u5b66\u4e60\u6d1b\u8c37\u9898\u89e3\u533a\u67ab\u6797\u665a\u5927\u4f6c\u7684\uff0c\u8865\u5145\u4e86\u4e00\u4e9b\u5185\u5bb9\uff0c\u7528\u81ea\u5df1\u7684\u7406\u89e3\u548c\u8868\u8ff0\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u80fd\u8bb2\u6e05\u695a\u3002 \n\n------------\n\n\n\u9898\u76ee\u7684\u63cf\u8ff0\u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\uff0c\u9996\u5148\u80af\u5b9a\u662f\u8981\u627e\u5230\u5220\u7a7a\u7684\u5145\u8981\u6761\u4ef6\uff0c\u7136\u540e\u624d\u80fd\u8003\u8651\u7ef4\u62a4\u3002\n\n#### \u7ed3\u8bba\uff1a\n\n\u6570\u5b57 $i$ \u6709 $cnt[i]$ \u4e2a\uff0c\u5219\u8986\u76d6\u533a\u95f4 $[i-cnt[i]+1,i]$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $[1,n]$ \u4e2d\u672a\u88ab\u8986\u76d6\u7684\u4e2a\u6570\u3002\n\n\n\n#### \u8bc1\u660e\uff1a\n$1$. \u6b63\u786e\u7b54\u6848 $\\geqslant$ \u8fd9\u4e2a\u7b54\u6848\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6570\uff0c\u6bd4\u5b83\u5927\u7684\u6570\u5220\u6389\u4e4b\u540e\u4e0d\u80fd\u5230\u8fbe\u5b83\uff0c\u6bd4\u5b83\u5c0f\u7684\u6570\u53c8\u4e0d\u80fd\u63d0\u524d\u5220\u6389\u3002\u6240\u4ee5\u5fc5\u987b\u53d8\u52a8\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u91cc\u88ab\u8986\u76d6\u3002\n\n\n$2$. \u53ef\u4ee5\u6784\u9020\u51fa\u53d6\u7b49\u53f7\u7684\u65b9\u6848\u3002\u603b\u6570\u662f $n$\uff0c\u90a3\u4e48\u6709 $k$ \u4e2a\u7a7a\u4f4d\uff0c\u5c31\u5fc5\u7136\u6709 $k$ \u4e2a\u91cd\u53e0\u6216\u4e0d\u5728\u8be5\u8303\u56f4\u7684\u4f4d\u7f6e\u3002\u628a\u8fd9\u4e9b\u6570\u6539\u5230\u7a7a\u4f4d\u4e0a\u540e\u4e00\u5b9a\u80fd\u628a\u7a7a\u4f4d\u586b\u6ee1\u3002\n\n\n#### \u64cd\u4f5c\uff1a\n$1$. \u5355\u70b9\u4fee\u6539\u5c31\u662f\u5220\u9664\u539f\u672c\u7684\u8d21\u732e\uff0c\u52a0\u4e0a\u65b0\u7684\u8d21\u732e\u3002\n\n\n\u7ec6\u8282\u4e0a\u6ce8\u610f\u4fee\u6539\u7684\u70b9\u662f\u5426\u5728\u5f53\u524d\u7684 $[start+1,up]$ \u4e4b\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\u5c31\u4e0d\u4fee\u6539\n\u3002\uff08\u56e0\u4e3a\u5f53 $i$ \u4e0d\u5728\u8fd9\u4e2a\u8303\u56f4\u7684\u65f6\u5019\uff0c\u53ef\u80fd $(i-cnt[i]+1)$ \u4f1a\u5728\uff0c\u4f46\u5176\u5b9e\u5b83\u7684\u8d21\u732e\u662f\u4e0d\u80fd\u7b97\u7684\uff0c\u56de\u5230\u9898\u76ee\u672c\u8eab\u7684\u610f\u601d\u5c31\u53ef\u4ee5\u7406\u89e3\uff09\uff0c\u8fd8\u6709\u589e\u52a0\u51cf\u5c11\u6539\u53d8\u7684\u662f $cnt[i]$\uff0c\u6240\u4ee5\u4fee\u6539\u7684\u4f4d\u7f6e\u662f $(i-cnt[i]+1)$ \u4e0d\u662f $i$\u3002\n\n\n$2$. \u533a\u95f4 $+1/\\!-\\!1$ \u5176\u5b9e\u5c31\u662f\u628a\u524d\u9762\u8bf4\u7684\u8986\u76d6\u533a\u95f4\u5168\u90e8\u5411\u53f3\u5e73\u79fb\u3002\n\n\n\u5e73\u79fb\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf\uff08\u53ef\u4ee5\u7406\u89e3\u6210\u5168\u5c40\u61d2\u6807\u8bb0\uff09\u5b9e\u73b0\uff0c\u7528\u53d8\u91cf $start$ \u7ef4\u62a4\uff0c\u8868\u793a\u67e5\u8be2\u7684\u662f $[start+1,up]$ \u4e2d $0$ \u7684\u4e2a\u6570\u3002\u6bcf\u6b21\u533a\u95f4 $+1$ \u5c31\u662f $start-1$\uff0c\u533a\u95f4 $-1$ \u5c31\u662f $start+1$\uff0c\u7ec6\u8282\u4e0a\u6ce8\u610f $start$ \u521d\u503c\u4e0d\u662f $0$\uff0c\u5426\u5219\u6ca1\u6709\u51cf\u7684\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u6bcf\u6b21\u6539\u53d8 $start$ \u5c31\u4f1a\u6709\u4e00\u4e2a\u6570\u79fb\u51fa\u6216\u79fb\u5165\u8fb9\u754c\uff08\u53ea\u9700\u8981\u8003\u8651\u4e0d\u8ba9 $i>up$ \u9020\u6210\u8d21\u732e\uff0c\u56e0\u4e3a $i < start+1$ \u7684\u60c5\u51b5 $[i-cnt[i]+1,i]$ \u4e00\u5b9a\u4e0d\u4f1a\u6709\u8d21\u732e\uff0c\u5168\u4f1a\u5728 $start+1$ \u5de6\u8fb9\uff09\uff0c\u6240\u4ee5\u9700\u8981\u4fee\u6539 $[up+cnt[up]+1,up]$\u3002\n\n\n$3$. \u67e5\u8be2\u5c31\u67e5\u8be2 $[start+1,up]$ \u4e2d $0$ \u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\n#### \u7ef4\u62a4\uff1a\n\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\uff08\u6709\u6ce8\u91ca\uff09\u3002\n\n#### \u4ee3\u7801\uff1a\n\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define up start+n\nconst int N1=150010,N2=N1*3+10;\n//\u6ce8\u610f\u662f3\u500d\uff0c\u672c\u8eabstart+/-\u662f\u4e24\u500d(\u5411\u4e0an\u5411\u4e0bn)\uff0c\u4f46\u662f\u533a\u95f4\u662f[(i-cnt[i]+1),i]\uff0c\u5f53i=1\u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u5411\u524dn\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u662f3\u500d\ninline int read()\n{\n    int res=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    } \n    while(isdigit(ch)) \n    {\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res*f;\n}\nint n,m,start=N1,a[N1];\nint cnt[N2];\nstruct node\n{\n    int cnt0;//0\u7684\u4e2a\u6570\uff0c\u5373\u7b54\u6848\n    int add;//\u52a0\u6cd5\u61d2\u6807\u8bb0\n    int mn;//\u6700\u5c0f\u503c\uff0c\u8f85\u52a9\u6c42\u51fa0\u7684\u4e2a\u6570\uff08\u6700\u5c0f\u503c>=0,\u5982\u679c\u662f0\u5b83\u7684\u4e2a\u6570\u5c31\u662f\u7b54\u6848\uff09\n    int cnt_mn;//\u6700\u5c0f\u503c\u4e2a\u6570\n    //\u9700\u8981\u6c42\u51fa\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u4e2a\u6570\u662f\u56e0\u4e3a\u4f1a\u6709\u61d2\u6807\u8bb0\uff0c\u4e0d\u77e5\u9053\u8fd9\u4e24\u4e2a\u503c\u7684\u8bdd\u4e00\u65e6\u6709add\u7684\u4fee\u6539\u5c31\u53ef\u80fd\u4e0d\u80fd\u5728\u4e0d\u9012\u5f52\u7684\u60c5\u51b5\u4e0b\u6c42\u51facnt0\n}tr[N2<<2];\ninline void pushup(int u)\n{\n    tr[u].mn=min(tr[u<<1].mn,tr[u<<1|1].mn);\n    tr[u].cnt_mn=0;\n    if(tr[u].mn==tr[u<<1].mn) tr[u].cnt_mn=tr[u<<1].cnt_mn;\n    if(tr[u].mn==tr[u<<1|1].mn) tr[u].cnt_mn+=tr[u<<1|1].cnt_mn;\n    tr[u].cnt0=tr[u<<1].cnt0+tr[u<<1|1].cnt0;\n}\ninline void Add(int u,int v)\n{\n    tr[u].mn+=v;\n    tr[u].add+=v;\n    tr[u].cnt0=(tr[u].mn==0)?tr[u].cnt_mn:0;\n}\ninline void pushdown(int u)\n{\n    if(!tr[u].add) return;\n    Add(u<<1,tr[u].add); Add(u<<1|1,tr[u].add);\n    tr[u].add=0;\n}\nvoid build(int u,int l,int r)\n{\n    if(l==r) \n    {\n        tr[u]={1,0,0,1};\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(u<<1,l,mid); build(u<<1|1,mid+1,r);\n    pushup(u);\n}\nvoid modify(int u,int l,int r,int ml,int mr,int v)\n{\n    if(ml<=l&&r<=mr) {Add(u,v); return;}\n    pushdown(u);\n    int mid=(l+r)>>1;\n    if(ml<=mid) modify(u<<1,l,mid,ml,mr,v);\n    if(mr>mid) modify(u<<1|1,mid+1,r,ml,mr,v);\n    pushup(u);\n}\nint query(int u,int l,int r,int ql,int qr)\n{\n    if(ql<=l&&r<=qr) return tr[u].cnt0;\n    pushdown(u);\n    int mid=(l+r)>>1,res=0;\n    if(ql<=mid) res=query(u<<1,l,mid,ql,qr);\n    if(qr>mid) res+=query(u<<1|1,mid+1,r,ql,qr);\n    return res;\n}\nint main()\n{\n    build(1,1,N1*3);//\u521d\u59cb\u5168\u662f0\uff0c\u6240\u4ee5\u8981build()\u6765\u521d\u59cb\u5316cnt0\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) \n        a[i]=read()+start,cnt[a[i]]++;\n    for(int i=start+1;i<=up;i++) \n        if(cnt[i])\n            modify(1,1,N1*3,i-cnt[i]+1,i,1);\n    while(m--)\n    {\n        int p=read(),x=read();\n        if(p)\n        {\n            if(a[p]<=up) modify(1,1,N1*3,a[p]-cnt[a[p]]+1,a[p]-cnt[a[p]]+1,-1);\n            cnt[a[p]]--;\n            a[p]=start+x;//!!!start+x not x\n            cnt[a[p]]++;\n            if(a[p]<=up) modify(1,1,N1*3,a[p]-cnt[a[p]]+1,a[p]-cnt[a[p]]+1,1);\n        }//\u6ce8\u610f\u8fd9\u91cc\u662f\u5355\u70b9\u4fee\u6539\uff0c\u56e0\u4e3acnt[]\u53ea\u53d8\u5316\u4e861\n        else\n        {\n            if(x==1)\n            {\n                if(cnt[up]) \n                    modify(1,1,N1*3,up-cnt[up]+1,up,-1);\n                start--;\n            }\n            else\n            {\n                start++;\n                if(cnt[up]) \n                    modify(1,1,N1*3,up-cnt[up]+1,up,1);\n            }\n        }\n        printf(\"%d\\n\",query(1,1,N1*3,start+1,start+n));\n    }\n    return 0;\n}\n```",
        "postTime": 1663761869,
        "uid": 546246,
        "name": "E_huan",
        "ccfLevel": 8,
        "title": "P5324 \u9898\u89e3"
    },
    {
        "content": "\u4e07\u80fd\u7684\u7ebf\u6bb5\u6811 QwQ\n\n\u9996\u5148\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u5982\u679c\u8fd9\u4e2a\u5e8f\u5217\u91cc\u9762\u6709 $k_1$ \u4e2a $n$\uff0c$k_2$ \u4e2a $n-k_1$\uff0c$k_3$ \u4e2a $n-k_1-k_2$\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1b\u5982\u679c\u8fd9\u4e2a\u5e8f\u5217\u53ef\u4ee5\u5220\u7a7a\uff0c\u5219\u4e00\u5b9a\u6709 $\\sum k=n$ \u6210\u7acb\u3002\n\n\u6240\u4ee5\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\u5982\u4f55\u5feb\u901f\u8ba1\u7b97 $n - \\sum k$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u7684\u503c\u57df\u5f88\u5c0f\uff0c\u662f $O(n+m)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6570\u8f74\uff0c\u5982\u679c\u6570 $x$ \u51fa\u73b0\u4e86 $c_x$ \u6b21\uff0c\u90a3\u4e48\u5728\u6570\u8f74\u4e0a\u9762 $[x-c_x+1,x]$ \u5c31\u90fd\u662f $1$\u3002\n\n\u8fd9\u6837\u5355\u70b9\u4fee\u6539\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u6570\u8f74\u4e0a\u505a $O(\\log n)$ \u7684\u5355\u70b9\u4fee\u6539\u4e86~\n\n\u540c\u65f6\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u6307\u9488 $p_0$\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u8f74\u4e0a $0$ \u7684\u4f4d\u7f6e\uff0c\u5373\u6570\u8f74 $x$ \u4f4d\u7f6e\u5bf9\u5e94\u7684\u5b9e\u9645\u503c\u662f $x-p_0$\u3002\n\n\u8fd9\u6837\u6574\u4f53\u4fee\u6539\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u76f4\u63a5 $O(1)$ \u5e73\u79fb $p_0$ \u4e86~\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8d85\u8fc7 $p_0+n$ \u7684\u503c\u4e0d\u80fd\u6709\u8d21\u732e\uff08\u5c0f\u4e8e $p_0+1$ \u7684\u503c\u53ef\u4ee5\u5728\u67e5\u8be2\u7684\u65f6\u5019\u6392\u9664\u6389\uff09\uff1b\u6240\u4ee5\u5728\u6574\u4f53\u52a0/\u51cf\u64cd\u4f5c\u4e2d\u5e73\u79fb $p_0$ \u7684\u65f6\u5019\u5728\u6570\u8f74\u4e0a\u505a\u533a\u95f4\u4fee\u6539\u5c31\u597d\u4e86~\n\n\u6bcf\u6b21\u67e5\u8be2\u65f6\u53ea\u9700\u8981\u67e5\u8be2 $[p_0+1,p_0+n]$ \u4e2d $0$ \u7684\u6570\u91cf\u5c31\u53ef\u4ee5\u4e86~\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86~\n\n\u590d\u6742\u5ea6\u662f $O((n+m)\\log n)$\u3002\n\n\u6ce8\u610f\u56e0\u4e3a $p_0$ \u53ef\u4ee5\u5e73\u79fb\u5230\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u5bf9\u6240\u6709\u6570\u90fd\u52a0\u4e0a $1.5\\times 10^5$\uff0c\u8fd9\u6837\u5c31\u6ca1\u6709\u8d1f\u6570\u7684\u95ee\u9898\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nstruct Segtree {\n\tint minv[2000005], minvcnt[2000005], tag[2000005];\n\tinline void Pushup(int p) {\n\t\tminv[p] = Min(minv[p << 1], minv[p << 1 | 1]);\n\t\tminvcnt[p] = 0;\n\t\tif (minv[p << 1] == minv[p]) minvcnt[p] += minvcnt[p << 1];\n\t\tif (minv[p << 1 | 1] == minv[p]) minvcnt[p] += minvcnt[p << 1 | 1];\n\t\treturn;\n\t}\n\tinline void Pushdown(int p, int pl, int pr) {\n\t\tif (pl == pr || !tag[p]) return;\n\t\ttag[p << 1] += tag[p];\n\t\tminv[p << 1] += tag[p];\n\t\ttag[p << 1 | 1] += tag[p];\n\t\tminv[p << 1 | 1] += tag[p];\n\t\ttag[p] = 0;\n\t}\n\tinline void Build(int p, int pl, int pr) {\n\t\tif (pl == pr) {\n\t\t\tminv[p] = 0;\n\t\t\tminvcnt[p] = 1;\n\t\t\treturn;\n\t\t}\n\t\tregister int mid = pl + pr >> 1;\n\t\tBuild(p << 1, pl, mid); Build(p << 1 | 1, mid + 1, pr);\n\t\tPushup(p);\n\t}\n\tinline void Modify(int p, int pl, int pr, int l, int r, int v) {\n\t\tif (l > r) return;\n\t\tif (pl == l && pr == r) {\n\t\t\ttag[p] += v;\n\t\t\tminv[p] += v;\n\t\t\treturn;\n\t\t}\n\t\tPushdown(p, pl, pr);\n\t\tregister int mid = pl + pr >> 1;\n\t\tif (mid >= r) Modify(p << 1, pl, mid, l, r, v);\n\t\telse if (mid + 1 <= l) Modify(p << 1 | 1, mid + 1, pr, l, r, v);\n\t\telse {\n\t\t\tModify(p << 1, pl, mid, l, mid, v);\n\t\t\tModify(p << 1 | 1, mid + 1, pr, mid + 1, r, v);\n\t\t}\n\t\tPushup(p);\n\t}\n\tinline pair <int, int> Query(int p, int pl, int pr, int l, int r) {\n\t\tif (pl == l && pr == r) return make_pair(minv[p], minvcnt[p]);\n\t\tPushdown(p, pl, pr);\n\t\tregister int mid = pl + pr >> 1;\n\t\tif (mid >= r) return Query(p << 1, pl, mid, l, r);\n\t\telse if (mid + 1 <= l) return Query(p << 1 | 1, mid + 1, pr, l, r);\n\t\telse {\n\t\t\tpair <int, int> ans1 = Query(p << 1, pl, mid, l, mid);\n\t\t\tpair <int, int> ans2 = Query(p << 1 | 1, mid + 1, pr, mid + 1, r);\n\t\t\tpair <int, int> ans3 = make_pair(0, 0);\n\t\t\tans3.first = Min(ans1.first, ans2.first);\n\t\t\tif (ans1.first == ans3.first) ans3.second += ans1.second;\n\t\t\tif (ans2.first == ans3.first) ans3.second += ans2.second;\n\t\t\treturn ans3;\n\t\t}\n\t}\n};\nSegtree sgt;\n\nint n, a[150005], cnt[450020], m, zero = 150005, maxv = 450015;\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) a[i] = qread() + zero;\n}\n\ninline void Add(int x) {\n\tif (x <= zero + n) sgt.Modify(1, 1, maxv, x - cnt[x], x - cnt[x], 1);\n\tcnt[x]++;\n}\n\ninline void Del(int x) {\n\tcnt[x]--;\n\tif (x <= zero + n) sgt.Modify(1, 1, maxv, x - cnt[x], x - cnt[x], -1);\n}\n\ninline void Addall(int x) {\n\tsgt.Modify(1, 1, maxv, x - cnt[x] + 1, x, 1);\n}\n\ninline void Delall(int x) {\n\tsgt.Modify(1, 1, maxv, x - cnt[x] + 1, x, -1);\n}\n\ninline void Solve() {\n\tsgt.Build(1, 1, maxv);\n\tfor (register int i = 1;i <= n;i++) {\n\t\tAdd(a[i]);\n\t}\n\tpair <int, int> ans = sgt.Query(1, 1, maxv, zero + 1, zero + n);\n\t//printf(\"%d %d\\n\", ans.first, ans.second);\n\twhile (m--) {\n\t\tregister int p = qread(), x = qread();\n\t\tif (p) {\n\t\t\tx += zero;\n\t\t\tDel(a[p]);\n\t\t\tAdd(x);\n\t\t\ta[p] = x;\n\t\t} else if (~x) {\n\t\t\tDelall(zero + n);\n\t\t\tzero--;\n\t\t} else {\n\t\t\tzero++;\n\t\t\tAddall(zero + n);\n\t\t}\n\t\tpair <int, int> ans = sgt.Query(1, 1, maxv, zero + 1, zero + n);\n\t\tif (ans.first) puts(\"0\");\n\t\telse printf(\"%d\\n\", ans.second);\n\t}\n}\n\nint main() {\n\tRead();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```\n\n",
        "postTime": 1587911515,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019]\u5220\u6570\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n### [\u849f\u84bb\u306eblog](https://loj.ac/problem/3094)\n\n# \u601d\u8def\n\n## dp\u90e8\u5206\n\n\u4ee5\u4e0b\u79f0**\u5408\u6cd5\u5e8f\u5217**\u4e3a\u539f\u9898\u9762\u4e2d**\u53ef\u4ee5\u5220\u7a7a\u7684\u5e8f\u5217**\n\n\u8fd9\u4e2a\u662f\u6211\u5728\u6a21\u62df\u8003\u573a\u4e0a\u7684\u601d\u8def\n\n\u4e00\u5f00\u59cb\u6211\u662f\u89c9\u5f97\uff0c\u8fd9\u4e2a\u9996\u5148\u53ef\u4ee5\u5199\u6210\u4e00\u4e2adp\u7684\u5f62\u5f0f\uff1a$dp[i][j]$\u8868\u793a\u7528$j$\u4e2a\u6570\u5b57\u586b\u6ee1\u4e86\u76ee\u6807\u5e8f\u5217\u7684\u524d$i$\u9700\u8981\u7684\u6b65\u6570\n\n\u7136\u540e\uff0c\u53d1\u73b0\u53ea\u6709$dp[i][i]$\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u4f18\u5316\u4e3a$dp[i]$\u8868\u793a\u8fbe\u6210\u4e86\u6784\u6210\u957f\u5ea6\u4e3a$i$\u7684\u5e8f\u5217\u9700\u8981\u7684\u6700\u5c0f\u6b65\u6570\n\n\u731c\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a$dp[i]=min_{j\\in[1,i-1]}(dp[j]+max(0,(i-j)-num[i])$\n\n\u8fd9\u91cc$num[i]$\u8868\u793a\u5f53\u524d\u8be2\u95ee\u7684\u5e8f\u5217\u4e2d\u6570\u5b57$i$\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5c31\u662f\u4e00\u4e2a\u6876\n\n\u8f6c\u79fb\u65b9\u7a0b\u7684\u610f\u4e49\u5c31\u662f\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a$j$\u7684\u5408\u6cd5\u5e8f\u5217\uff08\u4e0b\u79f0$j$\u5e8f\u5217\uff09\u540e\u9762\u63a5\u4e0a$i-j$\u4e2a$i$\n\n\u6b63\u786e\u6027\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u5e8f\u5217\u4e2d\u6240\u6709\u7b49\u4e8e$i$\u7684\u6570\u5b57\u76f4\u63a5\u7528\u4e0a\uff0c\u591f\u4e86\u5c31\u4e0d\u7528\u53d8\u65b0\u7684\uff0c\u4e0d\u591f\u4e86\u5c31\u4ece\u522b\u7684\u6570\u5b57\u90a3\u91cc\u62ff\u4e00\u4e9b\u53d8\u8fc7\u6765\u8865\u4e0a\n\n\u95ee\u9898\uff1a\u5982\u4f55\u786e\u5b9a\u6570\u5b57\u7b49\u4e8e$i$\u7684\u6ca1\u6709\u5728\u524d\u9762\u7684$j$\u5e8f\u5217\u4e2d\u88ab\u8f6c\u79fb\u8fc7\u53bb\uff1f\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc**\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u79cd\u60c5\u51b5**\uff1a\u8f6c\u79fb\u8fc7\u53bb\u7684\u53ea\u9700\u8981\u662f\u548c\u5728\u524d\u9762\u9700\u8981\u7684\u6570\u5927\u5c0f\u4e0d\u4e00\u6837\u7684\uff0c\u800c$i$\u663e\u7136\u4e0d\u548c$j$\u5e8f\u5217\u4e2d**\u4efb\u4f55\u4e00\u4e2a\u6570\u76f8\u7b49**\uff0c\u6240\u4ee5\u5373\u4f7f\u7528\u8fc7\u4e86$i$\uff0c\u4e5f\u53ef\u4ee5\u968f\u4fbf**\u6311\u4e00\u4e2a$i$\u4ee5\u5916**\u7684\u4ee3\u66ff$i$\u8fdb\u53bb\u524d\u9762\n\n\u7136\u540e\u56e0\u4e3a\u6700\u7ec8\u4e00\u5171$n$\u4e2a\u6570\u586b\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\uff0c\u6570\u603b\u662f\u591f\u7528\u7684\uff0c\u6240\u4ee5\u8fd9\u5c31\u5b8c\u6210\u4e86$dp$\u8f6c\u79fb\u6b63\u786e\u6027\u7684\u8bc1\u660e\n\n\u8fd9\u6837\u53ef\u4ee5\u83b7\u5f97**47\u5206**\u7684subtask\uff08\u6d1b\u8c37\u4e0a\u6ca1\u6709subtask\uff0c\u662f34\u5206\uff09\n\n## \u8d2a\u5fc3\u90e8\u5206\n\n\u4e0a\u9762\u90a3\u4e2a\u7ed3\u8bba\u5176\u5b9e\u8fd8\u6709\u7528\u5904\uff1a\u5b83\u662f\u8d2a\u5fc3\u505a\u6cd5\u7684\u57fa\u7840\n\n\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u5728$[1,n]$\u533a\u95f4\u5185\u7684\u6570\u662f\u201c\u6709\u7528\u201d\uff0c\u5373\u6709\u53ef\u80fd\u4e0d\u9700\u8981\u6539\u53d8\u5c31\u53ef\u4ee5\u653e\u8fdb\u5408\u6cd5\u5e8f\u5217\u91cc\u7684\n\n\u6211\u4eec\u8003\u8651\u8fd9\u4e9b\u6570\u7684\u201c\u6709\u7528\u6027\u201d\uff0c\u53d1\u73b0\uff1a\u5bf9\u4e8e$j$\u4e2a$i$,\u91cc\u9762\u6700\u591a\u6709$i$\u4e2a\u662f\u6709\u7528\u7684\n\n\u540c\u65f6\uff0c\u5982\u679c\u6709\u4e24\u79cd\u6570$i<j$\uff0c\u4ee4$k=j-i$\uff0c\u82e5\u503c\u4e3a$j$\u7684\u6570\u7684\u6570\u91cf\u5927\u4e8e$k$\uff0c\u90a3\u4e48\u8fd9\u91cc$j$\u548c$i$\u5c31\u4f1a\u201c\u51b2\u7a81\u201d\uff0c\u4e5f\u5c31\u662f$i$\u548c\u4ee5\u4e0b\u7684\u4e00\u5c0f\u6bb5\u4f4d\u7f6e\u53ea\u6709\u4e00\u79cd\u6570\u53ef\u4ee5\u4e0d\u4fee\u6539\u653e\u8fdb\u53bb\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u7528\u533a\u95f4\u8986\u76d6\u7684\u65b9\u5f0f\u6765\u786e\u5b9a\u201c\u6709\u7528\u201d\u7684\u4f4d\u7f6e\n\n**\u5f62\u5f0f\u5316\u5730\u6765\u8bf4\uff0c\u8bbe\u503c\u4e3a$i$\u7684\u6570\u5b57\u6709$cnt[i]$\u4e2a\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u8986\u76d6\u533a\u95f4$[i-cnt[i]+1,i]$**\n\n\u663e\u7136\uff0c\u533a\u95f4$[1,n]$\u5185\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u4f4d\u7f6e\u603b\u6570\uff0c\u5c31\u662f\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\n\n## \u6570\u636e\u7ed3\u6784\u4f18\u5316\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u4e2a\u6570\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n\n\u8003\u8651\u4e24\u79cd\u4fee\u6539\n\n\u7b2c\u4e00\u79cd\u4fee\u6539\u662f\u4fee\u6539\u4e24\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u5c31\u662f\u4e24\u6b21\u5355\u70b9\u4fee\u6539\u800c\u5df2\n\n\u7b2c\u4e8c\u79cd\u4fee\u6539\u53ef\u4ee5\u76f8\u5f53\u4e8e\u5e73\u79fb\u8be2\u95ee\u533a\u95f4\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\uff1a**\u53ea\u6709\u503c\u5728\u8be2\u95ee\u533a\u95f4\u91cc\u7684\u4f4d\u7f6e\u624d\u80fd\u5f80\u524d\u8986\u76d6**\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u6211\u8be2\u95ee\u7684\u662f$[2,5]$\uff0c\u539f\u5e8f\u5217\u91cc\u9762\u6709$3$\u4e2a$6$\uff0c\u90a3\u8fd9\u4e9b6\u90fd\u6ca1\u6709\u7528\n\n\u6240\u4ee5\u9700\u8981\u5728\u7b2c\u4e8c\u79cd\u4fee\u6539\u7684\u65f6\u5019\u770b\u770b\u4f1a\u4e0d\u4f1a\u52a0\u5165or\u5220\u9664\u6574\u4e2a\u533a\u95f4\n\n\u5b9e\u73b0\u4e0a\u56e0\u4e3a\u53ef\u80fd\u4f1a\u51cf\u5230\u8d1f\u6570\uff0c\u8d1f\u6570\u8fd8\u80fd\u5f80\u4e0b\u8986\u76d6\uff0c\u6240\u4ee5\u4e00\u5171\u5f00\u957f\u5ea6\u4e3a$2n+2m$\u7684\u7ebf\u6bb5\u6811\uff0c\u521d\u59cb0\u4f4d\u7f6e$n+m$\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cassert>\n#define ll long long\nusing namespace std;\ninline int read(){\n\tint re=0,flag=1;char ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') flag=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)) re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n\treturn re*flag;\n}\nint n,m,a[1000010],cnt[1000010],ori[1000010],pos;\nstruct ele{//\u5408\u5e76\u7528\u7684\u7ebf\u6bb5\u6811\u5143\u7d20\uff0cquery\u7684\u65f6\u5019\u5f88\u65b9\u4fbf\uff0cmerge\u5c31\u597d\u4e86\n\tint minn,cnt;\n\tele(int mm=0,int cc=0){minn=mm;cnt=cc;}\n\tfriend inline ele merge(const ele &a,const ele &b){\n\t\tele re;re.minn=min(a.minn,b.minn);\n\t\tif(re.minn==a.minn) re.cnt+=a.cnt;\n\t\tif(re.minn==b.minn) re.cnt+=b.cnt;\n\t\tassert(re.minn>=0);\n\t\treturn re;\n\t}\n}seg[2000010];int tag[2000010];//\u6709\u533a\u95f4\u4fee\u6539\uff0c\u52a0lazytag\ninline void pushtag(int num,int w){seg[num].minn+=w;tag[num]+=w;assert(seg[num].minn>=0);}\ninline void push(int l,int r,int num){\n\tif(l==r||!tag[num]) return;\n\tpushtag(num<<1,tag[num]);\n\tpushtag(num<<1|1,tag[num]);\n\ttag[num]=0;\n}\ninline void build(int l,int r,int num){\n\tif(l==r){seg[num]=ele(ori[l],1);return;}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,num<<1);build(mid+1,r,num<<1|1);\n\tseg[num]=merge(seg[num<<1],seg[num<<1|1]);\n}\ninline void change(int l,int r,int num,int pos,int w){\n\tif(l==r){seg[num].minn+=w;return;}\n\tint mid=(l+r)>>1;push(l,r,num);\n\tif(mid>=pos) change(l,mid,num<<1,pos,w);\n\telse change(mid+1,r,num<<1|1,pos,w);\n\tseg[num]=merge(seg[num<<1],seg[num<<1|1]);\n}\ninline void add(int l,int r,int ql,int qr,int num,int w){\n\tif(l>=ql&&r<=qr){pushtag(num,w);return;}\n\tint mid=(l+r)>>1;push(l,r,num);\n\tif(mid>=ql) add(l,mid,ql,qr,num<<1,w);\n\tif(mid<qr) add(mid+1,r,ql,qr,num<<1|1,w);\n\tseg[num]=merge(seg[num<<1],seg[num<<1|1]);\n}\ninline ele query(int l,int r,int ql,int qr,int num){\n\tif(l>=ql&&r<=qr) return seg[num];\n\tint mid=(l+r)>>1;ele re(2e9,0);push(l,r,num);\n\tif(mid>=ql) re=merge(re,query(l,mid,ql,qr,num<<1));\n\tif(mid<qr) re=merge(re,query(mid+1,r,ql,qr,num<<1|1));\n\treturn re;\n}\nint main(){\n\tn=read();m=read();int i,t1,t2,j,tot=n+n+m+m;ele ans;\n\tpos=n+m;\n\tfor(i=1;i<=n;i++) cnt[(a[i]=read()+pos)]++;\n\tfor(i=1;i<=tot;i++) if(cnt[i])\n\t\tfor(j=i;j>i-cnt[i];j--) ori[j]++;\n\tbuild(1,tot,1);\n\twhile(m--){\n\t\tt1=read();t2=read();\n\t\tif(t1){\n\t\t\t//\u76f4\u63a5\u7ef4\u62a4\uff0c\u6ce8\u610f\u4e0d\u5728\u76ee\u524d\u8303\u56f4\u5185\u7684\u4f4d\u7f6e\u4e0d\u8981change\uff01\uff01\uff01\n\t\t\tt2+=pos;\n\t\t\tcnt[a[t1]]--;ori[a[t1]-cnt[a[t1]]]--;\n\t\t\tif(a[t1]<=pos+n&&a[t1]>pos) change(1,tot,1,a[t1]-cnt[a[t1]],-1);\n\t\t\ta[t1]=t2;\n\t\t\tif(a[t1]<=pos+n&&a[t1]>pos) change(1,tot,1,a[t1]-cnt[a[t1]],1);\n\t\t\tori[a[t1]-cnt[a[t1]]]++;cnt[a[t1]]++;\n\t\t}\n\t\telse{\n\t\t\t//\u67e5\u770b\u662f\u5426\u6709\u533a\u95f4\u9700\u8981\u52a0\u5165or\u5220\u9664\uff01\uff01\uff01\n\t\t\tif(~t2){\n\t\t\t\tpos--;\n\t\t\t\tif(cnt[pos+n+1]) add(1,tot,pos+n+1-cnt[pos+n+1]+1,pos+n+1,1,-1);\n\t\t\t\tif(cnt[pos+1]) add(1,tot,pos+1-cnt[pos+1]+1,pos+1,1,1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tpos++;\n\t\t\t\tif(cnt[pos+n]) add(1,tot,pos+n-cnt[pos+n]+1,pos+n,1,1);\n\t\t\t\tif(cnt[pos]) add(1,tot,pos-cnt[pos]+1,pos,1,-1);\n\t\t\t}\n\t\t}\n\t\tans=query(1,tot,pos+1,pos+n,1);\n\t\tif(ans.minn) puts(\"0\");\n\t\telse printf(\"%d\\n\",ans.cnt);\n\t}\n}\n```",
        "postTime": 1557396550,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019] \u5220\u6570\u3011"
    },
    {
        "content": "\u5148\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u80fd\u4f7f\u5176\u53ef\u4ee5\u5220\u7a7a\u7684\u7684\u4fee\u6539\u6b21\u6570\u3002\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5e8f\u5217\u7684\u6392\u5217\u987a\u5e8f\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u6240\u6709\u6570\u653e\u5230\u6876\u91cc\u6765\u5904\u7406\u3002\n\n\u5c1d\u8bd5\u5bf9\u4e00\u4e2a\u6ca1\u6709\u7ecf\u8fc7\u4fee\u6539\u7684\u53ef\u4ee5\u5220\u7a7a\u7684\u5e8f\u5217\u6765\u8fdb\u884c\u5220\u6570\uff0c\u4e00\u5f00\u59cb\u5220\u53bb\u6240\u6709\u7684$n$\uff0c\u7136\u540e\u5e8f\u5217\u957f\u5ea6\u53d8\u4e3a$x_1$\uff0c\u5220\u53bb\u6240\u6709\u7684$x_1$\uff0c\u7136\u540e\u5e8f\u5217\u957f\u5ea6\u53d8\u4e3a$x_2$\uff0c\u5220\u53bb\u6240\u6709\u7684$x_2$\u2026\u2026\u76f4\u5230\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a$x_i$\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u6ca1\u6709$x_i$\u8fd9\u4e2a\u6570\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u8981\u5bf9\u5e8f\u5217\u6267\u884c\u4fee\u6539\u64cd\u4f5c\u4e86\u3002\n\n\u8003\u8651\u8fc7\u7a0b\uff0c\u5f53\u4e0d\u80fd\u8fde\u7eed\u7684\u5220\u6570\u65f6\uff0c\u5c31\u9700\u8981\u901a\u8fc7\u4fee\u6539\u6765\u586b\u8865\u7a7a\u7f3a\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9$[1,n]$\u505a\u524d\u7f00\u548c\uff0c\u5b58\u5728\u6570\u5b57\u7684\u4f4d\u7f6e\u9700\u6ee1\u8db3\u8be5\u4f4d\u7f6e\u7684\u503c\u7b49\u4e8e\u8be5\u4f4d\u7f6e\u7684\u4e0b\u6807\uff0c\u4e0d\u7136\u5c31\u9700\u8fdb\u884c\u4fee\u6539\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e$[1,n]$\u7684\u6bcf\u4e2a\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u4ece\u5176\u5f80\u524d\u8986\u76d6\u4e00\u6761\u957f\u5ea6\u4e3a\u8be5\u6570\u51fa\u73b0\u6b21\u6570\u7684\u7ebf\u6bb5\uff0c\u533a\u95f4$[1,n]$\u672a\u88ab\u8986\u76d6\u7684\u4f4d\u7f6e\u4e2a\u6570\u5373\u4e3a\u9700\u8981\u4fee\u6539\u7684\u6b21\u6570\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u6765\u7edf\u8ba1\u672a\u88ab\u8986\u76d6\u7684\u4f4d\u7f6e\u4e2a\u6570\u3002\n\n\u8003\u8651\u52a0\u4e0a\u4fee\u6539\u64cd\u4f5c\uff0c\u5355\u70b9\u4fee\u6539\u76f4\u63a5\u6539\u4fee\u6539\u524d\u540e\u4e24\u4e2a\u6570\u7684\u8d21\u732e\u5373\u53ef\uff0c\u6574\u4f53\u52a0\u51cf\u53ef\u4ee5\u5bf9\u7ebf\u6bb5\u6811\u7684\u8be2\u95ee\u52a0\u4e0a\u504f\u79fb\u91cf\uff0c\u6bd4\u5982\u5f53\u6574\u4f53\u52a0\u4e00\u65f6\uff0c\u504f\u79fb\u91cf\u51cf\u4e00\uff0c\u8be2\u95ee\u7684\u533a\u95f4\u5411\u5de6\u79fb\u52a8\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e9b\u4e0d\u5728\u5f53\u524d\u8be2\u95ee\u533a\u95f4\u7684\u6570\u5b57\u7684\u8d21\u732e\u9700\u8981\u5ffd\u7565\uff0c\u6211\u7684\u5904\u7406\u662f\u5728\u8be2\u95ee\u533a\u95f4\u53f3\u8fb9\u7684\u6570\u5b57\u5c31\u4e0d\u518d\u8ba1\u7b97\u8d21\u732e\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 2000010\n#define all 450000\n#define ls (cur<<1)\n#define rs (cur<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,root=1,delta=150000;\nint a[maxn],cnt[maxn],add[maxn];\nstruct node\n{\n    int mi,cnt;\n}t[maxn];\nnode operator +(const node &a,const node &b)\n{\n    if(a.mi<b.mi) return a;\n    if(a.mi>b.mi) return b;\n    return (node){a.mi,a.cnt+b.cnt};\n}\nvoid pushadd(int cur,int v)\n{\n    t[cur].mi+=v,add[cur]+=v;\n}\nvoid pushdown(int cur)\n{\n    if(!add[cur]) return;\n    pushadd(ls,add[cur]),pushadd(rs,add[cur]),add[cur]=0;\n}\nvoid build(int l,int r,int cur)\n{\n    if(l==r)\n    {\n        t[cur]=(node){0,1};\n        return;\n    }\n    build(l,mid,ls),build(mid+1,r,rs),t[cur]=t[ls]+t[rs];\n}\nvoid modify(int L,int R,int l,int r,int v,int cur)\n{\n    if(L>R) return;\n    if(L<=l&&R>=r)\n    {\n        pushadd(cur,v);\n        return;\n    }\n    pushdown(cur);\n    if(L<=mid) modify(L,R,l,mid,v,ls);\n    if(R>mid) modify(L,R,mid+1,r,v,rs);\n    t[cur]=t[ls]+t[rs];\n}\nnode query(int L,int R,int l,int r,int cur)\n{\n    if(L<=l&&R>=r) return t[cur];\n    pushdown(cur);\n    if(R<=mid) return query(L,R,l,mid,ls);\n    if(L>mid) return query(L,R,mid+1,r,rs);\n    return query(L,R,l,mid,ls)+query(L,R,mid+1,r,rs);\n}\nint main()\n{\n    read(n),read(m),build(1,all,root);\n    for(int i=1;i<=n;++i)\n        read(a[i]),a[i]+=delta,cnt[a[i]]++;\n    for(int i=1+delta;i<=n+delta;++i)\n        modify(i-cnt[i]+1,i,1,all,1,root);\n    while(m--)\n    {\n        int p,x;\n        read(p),read(x);\n        if(p)\n        {\n            if(a[p]<=n+delta) modify(a[p]-cnt[a[p]]+1,a[p]-cnt[a[p]]+1,1,all,-1,root);\n            cnt[a[p]]--,x+=delta,cnt[x]++,a[p]=x;\n            if(x<=n+delta) modify(x-cnt[x]+1,x-cnt[x]+1,1,all,1,root);\n        }\n        else\n        {\n            if(x==1) p=n+delta,modify(p-cnt[p]+1,p,1,all,-1,root),delta--;\n            else delta++,p=n+delta,modify(p-cnt[p]+1,p,1,all,1,root);\n        }\n        node q=query(1+delta,n+delta,1,all,root);\n        if(q.mi) puts(\"0\");\n        else printf(\"%d\\n\",q.cnt);\n    }\n    return 0;\n}\n```",
        "postTime": 1594050660,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019]\u5220\u6570\u3011"
    },
    {
        "content": "\u90a3\u4e48\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6700\u540e\u7684\u7b54\u6848\u548c\u6570\u5b57\u7684\u987a\u5e8f\u662f\u65e0\u5173\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u7684\u6570\u964d\u5e8f\u6392\u5217\n\n\u6bd4\u5982\u5bf9\u4e8e\u6392\u5e8f\u5b8c\u7684\u53c8\u4e00\u4e2a\u8fd9\u6837\u7684\u6570\u5217\n\n10 10 10 7 7 7 7 3 3 3\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5e8f\u5217\u663e\u7136\u662f\u53ef\u4ee5\u6d88\u6389\u7684\uff0c\u5148\u628a10\u5220\u6389\uff0c\u7136\u540e\u76f8\u5e94\u76847,3\u90fd\u4f1a\u5220\u6389\n\n\u90a3\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u6570\u5217\u6362\u4e00\u4e0b\uff0c\u53d8\u6210\n\n10 10 10 6 6 6 6 3 3 3\n\n\u90a3\u4e48\u8fd9\u4e2a\u4e1c\u897f\u5c31\u6d88\u4e0d\u6389\u4e86\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u5f5310\u5168\u90e8\u88ab\u5220\u6389\u4e4b\u540e\uff0c\u6211\u4eec\u5e8f\u5217\u91cc\u8fd8\u67097\u4e2a\u6570\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u5220\u63896\uff0c\u76f8\u5f53\u4e8e\u4e2d\u95f4\u7a7a\u51fa\u6765\u4e00\u4e2a\u683c\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u5fc5\u987b\u4ece\u540e\u9762\u62ff\u4e00\u4e2a\u8865\u8fc7\u6765\n\n\u4ece\u54ea\u91cc\u62ff\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a3\u6216\u8005\u4e00\u4e2a6\u53d8\u62107\u5c31\u53ef\u4ee5\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570$i$\u6709$cnt_i$\u4e2a\uff0c\u90a3\u4e48\u5168\u90e8\u7684$i-cnt_i$\u4e00\u5b9a\u662f\u53ef\u4ee5\u6d88\u6389\u7684\n\n\u5982\u679c\u6ca1\u6709$i-cnt_i$\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4ece\u540e\u9762\u62ff\u4e00\u4e2a\u8fc7\u6765\n\n****\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u9898\u76ee\u4e2d\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u6a21\u578b\n\n\u6211\u4eec\u4ece\u6700\u5927\u7684\u5730\u65b9\u63a8\u5012\uff0c\u7136\u540e\u5982\u679c\u6709\u7a7a\u683c\uff0c\u5c31\u4ece\u540e\u9762\u4e00\u4e2a\u91cd\u590d\u7684\u5730\u65b9\u62ff\u4e00\u4e2a\u7f13\u8fc7\u6765\n\n\u56e0\u4e3a\u6240\u6709\u6570\u7684\u6570\u91cf\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u91cc\u7a7a\u4e86\u4e00\u4e2a\u540e\u9762\u4e00\u5b9a\u8fd8\u6709\u4e00\u4e2a\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5b8c\u6210\u533a\u95f4\u52a0\u51cf\u548c\u67e5\u8be2\u533a\u95f4$0$\u7684\u4e2a\u6570\n\n\u5bf9\u4e8e\u533a\u95f4$+1,-1$\u7684\u64cd\u4f5c\uff0c\u5c31\u662f\u628a\u533a\u95f4\u8fdb\u884c\u4e86\u4e00\u4e0b\u5e73\u79fb\n\n****\n\n\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u548c\u626b\u63cf\u7ebf\u5f88\u50cf\uff0c\u5728\u6c42\u9762\u79ef\u5e76\u7684\u65f6\u5019\u6211\u4eec\u5c31\u662f\u7ef4\u62a4\u4e86\u533a\u95f4\u88ab\u8986\u76d6\u8fc7\u5f97\u957f\u5ea6\n\n\u6240\u4ee5\u6211\u4eec~~\u7c98\u4e2a\u4ee3\u7801\u4ea4\u4e0a\u53bb\u5c31\u597d\u4e86~~\n\n\u4e8e\u662f\u6210\u529f\u7684\u62ff\u5230\u4e86$34$\u5206\u7684\u597d\u6210\u7ee9\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u5728\u7ef4\u62a4\u626b\u63cf\u7ebf\u7684\u65f6\u5019\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u6c42\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6574\u4f53\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8282\u70b9$1$\u5904\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u5f88\u591a\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u6b63\u5e38\u4e0a\u4f20\u7b54\u6848\u5c31\u53ef\u4ee5\n\n\u4f46\u662f\u8fd9\u91cc\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u6211\u4eec\u5f53\u65f6\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u6389\u7684\uff0c\u663e\u7136\u4e0d\u592a\u597d\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6362\u7528\u53e6\u4e00\u79cd\u7ef4\u62a4\u65b9\u6cd5 ~~\u5927\u6982\u53ea\u6709\u6211\u8fd9\u4e48\u83dc\u7684\u624d\u4f1a\u8fd9\u4e48\u60f3~~\n\n\u6211\u4eec\u7ef4\u62a4\u4e09\u4e2a\u91cf\uff0c$min$\u8868\u793a\u533a\u95f4$0$\u7684\u4e2a\u6570\uff0c$sum$\u8868\u793a\u6700\u5c0f\u503c\u4e2a\u4e2a\u6570\uff0c$cnt$\u8868\u793a$0$\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f88\u597d\u8fdb\u884c\u66f4\u65b0\u4e86\n\n****\n\n\u518d\u4ea4\u4e0a\u53bb\uff0c\u53c8WA\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u6bd4\u5982\u8bf4$n=5$\u7684\u65f6\u5019\uff0c$a_i=\\{1,3,3,4,5\\}$\uff0c\u7136\u540e\u533a\u95f4$+1$\u4e4b\u540e\uff0c$a_i=\\{2,4,4,5,6\\}$\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53d1\u73b0\uff0c$6$\u662f\u65e0\u8bba\u5982\u4f55\u4e5f\u63a8\u4e0d\u5012\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u4ece$n$\u5f00\u59cb\u63a8\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u628a$[i-cnt_i+1,i],i>n$\u7684\u533a\u95f4\u7b97\u8fdb\u53bb\n\n\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u5728\u533a\u95f4\u5de6\u79fb\u53f3\u79fb\u7684\u65f6\u5019\u5355\u72ec\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u4ed6\u6ea2\u51fa\u4e86\u8fd9\u4e2a\u8303\u56f4\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u6574\u4f53\u5220\u6389\uff0c\u5982\u679c\u4ed6\u56de\u6765\u4e86\uff0c\u518d\u52a0\u56de\u6765\n\n\u76f8\u5e94\u7684\uff0c\u6211\u4eec\u5728\u5355\u70b9\u4fee\u6539\u7684\u65f6\u5019\u4e5f\u8981\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\n\n\u7136\u540e\u5c31\u662f\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=6e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m;\nint a[N],cnt[N];\nint delta;\n\nstruct node{\n    int l,r;\n    int min,sum,cnt;//min,sum of min,cnt of 0\n    int tag;\n}seg[N<<2];\n\n# define lc (u<<1)\n# define rc (u<<1|1)\n\nvoid pushup(int u){\n    seg[u].min=min(seg[lc].min,seg[rc].min);\n    seg[u].sum=seg[lc].sum*(seg[u].min==seg[lc].min)+seg[rc].sum*(seg[u].min==seg[rc].min);\n    seg[u].cnt=seg[lc].cnt+seg[rc].cnt;\n}\n\nvoid renew(int u,int k){\n    seg[u].min+=k;\n    seg[u].cnt=(!seg[u].min)?seg[u].sum:0;\n    seg[u].tag+=k;\n}\n\nvoid pushdown(int u){\n    renew(lc,seg[u].tag);\n    renew(rc,seg[u].tag);\n    seg[u].tag=0;\n}\n\nvoid build(int u,int l,int r){\n    seg[u].l=l,seg[u].r=r;\n    if(l==r){\n        seg[u].sum=seg[u].cnt=1;\n        return;\n    }\n    int mid=l+r>>1;\n    build(lc,l,mid);\n    build(rc,mid+1,r);\n    pushup(u);\n}\n\nvoid update(int u,int l,int r,int k){\n    if(l>r)return;\n    if(seg[u].l>=l&&seg[u].r<=r){\n        renew(u,k);\n        return;\n    }\n    if(seg[u].tag)pushdown(u);\n    int mid=seg[u].l+seg[u].r>>1;\n    if(l<=mid)update(lc,l,r,k);\n    if(r>mid)update(rc,l,r,k);\n    pushup(u);\n}\n\nint query(int u,int l,int r){\n    if(seg[u].l>=l&&seg[u].r<=r)return seg[u].cnt;\n    if(seg[u].tag)pushdown(u);\n    int mid=seg[u].l+seg[u].r>>1;\n    int res=0;\n    if(l<=mid)res+=query(lc,l,r);\n    if(r>mid)res+=query(rc,l,r);\n    return res;\n}\n\nint main()\n{\n    read(n),read(m);\n    delta=200000;\n    Rep(i,1,n)read(a[i]),a[i]+=delta,cnt[a[i]]++;\n    build(1,1,6e5);\n    Rep(i,delta+1,delta+n)update(1,i-cnt[i]+1,i,1);\n    Rep(i,1,m){\n        int p,x;\n        read(p),read(x);\n        if(!p){\n            if(x>0){\n                int pos=delta+n;\n                update(1,pos-cnt[pos]+1,pos,-1);\n                delta--;\n            }\n            else{\n                delta++;\n                int pos=delta+n;\n                update(1,pos-cnt[pos]+1,pos,1);\n            }\n        }\n        else{\n            if(a[p]<=n+delta){\n                update(1,a[p]-cnt[a[p]]+1,a[p],-1);\n                cnt[a[p]]--;\n                update(1,a[p]-cnt[a[p]]+1,a[p],1);\n            }\n            else cnt[a[p]]--;\n            a[p]=delta+x;\n            if(a[p]<=n+delta){\n                update(1,a[p]-cnt[a[p]]+1,a[p],-1);\n                cnt[a[p]]++;\n                update(1,a[p]-cnt[a[p]]+1,a[p],1);\n            }\n            else cnt[a[p]]++;\n        }\n        printf(\"%d\\n\",query(1,delta+1,delta+n));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1588245961,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019]\u5220\u6570\u3011"
    },
    {
        "content": "### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5324)\n\n### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10902621.html)\n\n#### \u6613\u77e5\u8fd9\u4e2a\u6570\u5217\u7684\u987a\u5e8f\u662f\u4e0d\u7528\u8003\u8651\u7684\n\n#### \u6211\u4eec\u770b\u4e24\u4e2a\u6570\u5217 $1,2,3$\u548c$3,3,3$\u90fd\u80fd\u5220\u5b8c\uff0c\u518d\u770b\u4e24\u4e2a\u6570\u5217$1,2,3,4$\u548c$2,2,4,4$\uff0c\u4e5f\u90fd\u80fd\u5220\u5b8c\n\n#### \u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u73c2\u4ee5\u628a\u8fd9\u4e9b\u6570\u5b57\u585e\u8fdb\u6876\u4e2d\uff0c\u8bb0$cnt_i$\u8868\u793a\u6570\u5b57$i$\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$i$\uff0c\u5728\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u628a\u533a\u95f4$[i-cnt_i+1,i]$\u8d4b\u503c\u62101\uff08\u56e0\u4e3a\u4e00\u6b21\u5220$cnt_i$\u4e2a\u73c2\u4ee5\u8f6c\u5316\u6210\u6bcf\u6b21\u5220$1$\u4e2a\uff0c\u503c\u4ece\u5927\u5411\u5c0f\u9012\u51cf\uff09\uff0c\u6700\u540e\u770b[1,n]\u4e0a\u6709\u51e0\u4e2a\u70b9\u4e0d\u662f1\uff0c\u8fd9\u5c31\u662f\u9898\u76ee\u6240\u6c42\u7684\u7b54\u6848\n\n#### \u5355\u70b9\u4fee\u6539\u5c31\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u52a0\u51cf\u5b9e\u9645\u5c31\u76f8\u5f53\u4e8e\u7ebf\u6bb5\u6811\u503c\u57df\u5e73\u79fb\uff0c\u4f46\u8fd9\u4e2a\u5b9e\u5728\u592a\u9ebb\u70e6\uff0c\u76f8\u5bf9\u7684\uff0c\u6211\u4eec\u73c2\u4ee5\u5e73\u79fb\u67e5\u8be2\u533a\u95f4\n\n#### \u6211\u4eec\u73c2\u4ee5\u4e00\u5f00\u59cb\u5c31\u628a$1$\u8bbe\u4e3a$Max(n,m)+1$\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u8d1f\u6570\u7684\u95ee\u9898\u4e86\n\n#### \u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(m\\log (2*Max(n,m)+n))$\n\n#### ~~\u5047\u00b7\u5b8c\u6574\u4ee3\u7801\uff08\u8fd9\u4e2a\u662f\u5047\u7b97\u6cd5\uff09~~\n\n```cpp\n#include <bits/stdc++.h>\n#define N 450005 \n#define M 150005\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\nint n,m,a[M],lim,cnt[N],w;\nint tr[N<<3],sum[N];\ninline void modify(register int x,register int l,register int r,register int pos,register int val)\n{\n    if(l==r)\n    {\n        tr[x]=val;\n        return;\n    }\n    int mid=l+r>>1;\n    if(pos<=mid)\n        modify(x<<1,l,mid,pos,val);\n    else\n        modify(x<<1|1,mid+1,r,pos,val);\n    tr[x]=tr[x<<1]+tr[x<<1|1];\n}\ninline int query(register int x,register int l,register int r,register int L,register int R)\n{\n    if(L<=l&&r<=R)\n        return tr[x];\n    int mid=l+r>>1,res=0;\n    if(L<=mid)\n        res+=query(x<<1,l,mid,L,R);\n    if(R>mid)\n        res+=query(x<<1|1,mid+1,r,L,R);\n    return res;\n}\nint main()\n{\n    n=read(),m=read();\n    lim=m+n*2;\n    memset(cnt,0,sizeof(cnt));\n    memset(sum,0,sizeof(sum));\n    for(register int i=1;i<=n;++i)\n    {\n        a[i]=read();\n        if((++sum[n+a[i]-cnt[a[i]+m]])==1)\n            modify(1,1,lim,n+a[i]-cnt[a[i]+m],1);\n        ++cnt[a[i]+m];\n    }\n    for(register int i=1;i<=m;++i)\n    {\n        int opt=read(),x=read();\n        if(opt)\n        {\n            x-=w;\n            --cnt[a[opt]+m];\n            if((--sum[n+a[opt]-cnt[a[opt]+m]])==0)\n                modify(1,1,lim,n+a[opt]-cnt[a[opt]+m],0);\n            a[opt]=x;\n            if((++sum[n+a[opt]-cnt[a[opt]+m]])==1)\n                modify(1,1,lim,n+a[opt]-cnt[a[opt]+m],1);\n            ++cnt[a[opt]+m];\n        }\n        else\n            w+=x;\n        write(n-query(1,1,lim,n+1-w,n+n-w)),puts(\"\");\n    }\n    return 0;\n}\n```\n\n#### \u4ea4\u4e00\u53d1\uff0c\u53d1\u73b0\u4f1aWA46\n\n#### \u5b9e\u9645\u56e0\u4e3a\u6211\u4eec\u6709\u79cd\u60c5\u51b5\u6ca1\u6709\u8003\u8651\uff1a\u5f53$val>n$\u65f6\uff0c\u6240\u6709\u7684\u90fd\u8981\u4fee\u6539\uff0c\u7136\u800c\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u53d8\u6210\u4e86\u4e00\u6bb5\u533a\u95f4\uff0c\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\n\n#### \u6211\u4eec\u53ea\u9700\u8981\u52a8\u6001\u63d2\u5165/\u5220\u9664\u533a\u95f4\u5373\u53ef\uff0c\u8fd9\u6837\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u53ca\u5176\u4e2a\u6570\n\n#### \u771f\u00b7\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define N 450005 \n#define M 150005\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline int Max(register int a,register int b)\n{\n    return a>b?a:b;\n}\nint n,m,a[M],b[N],cnt[N],c,ql,qr,lim;\nint minn[N<<3],sum[N<<3],tag[N<<3];\ninline void pushup(register int x)\n{\n    int ls=x<<1,rs=x<<1|1;\n    minn[x]=minn[ls],sum[x]=sum[ls];\n    if(minn[rs]<minn[x])\n        minn[x]=minn[rs],sum[x]=sum[rs];\n    else if(minn[rs]==minn[x])\n        sum[x]+=sum[rs];\n}\ninline void build(register int x,register int l,register int r)\n{\n    if(l==r)\n    {\n        minn[x]=b[l];\n        sum[x]=1;\n        return;\n    }\n    int mid=l+r>>1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    pushup(x);\n}\ninline void pushdown(register int x)\n{\n    if(tag[x])\n    {\n        int ls=x<<1,rs=x<<1|1;\n        tag[ls]+=tag[x],tag[rs]+=tag[x];\n        minn[ls]+=tag[x],minn[rs]+=tag[x];\n        tag[x]=0;\n    }\n}\ninline void modify(register int x,register int l,register int r,register int L,register int R,register int val)\n{\n    if(L<=l&&r<=R)\n    {\n        minn[x]+=val;\n        tag[x]+=val;\n        return;\n    }\n    int mid=l+r>>1;\n    pushdown(x);\n    if(L<=mid)\n        modify(x<<1,l,mid,L,R,val);\n    if(R>mid)\n        modify(x<<1|1,mid+1,r,L,R,val);\n    pushup(x);\n}\ninline int query(register int x,register int l,register int r,register int L,register int R)\n{\n    if(L<=l&&r<=R)\n        return minn[x]?0:sum[x];\n    int mid=l+r>>1,res=0;\n    pushdown(x);\n    if(L<=mid)\n        res+=query(x<<1,l,mid,L,R);\n    if(R>mid)\n        res+=query(x<<1|1,mid+1,r,L,R);\n    return res;\n}\nint main()\n{\n    n=read(),m=read();\n    c=Max(n,m);\n    for(register int i=1;i<=n;++i)\n    {\n        a[i]=read();\n        ++cnt[a[i]+=c];\n    }\n    ql=c+1,qr=c+n,lim=c*2+n;\n    for(register int i=m+1;i<=qr;++i)\n        ++b[i-cnt[i]+1],--b[i+1];\n    for(register int i=2;i<=qr+1;++i)\n        b[i]+=b[i-1];\n    build(1,1,lim);\n    for(register int i=1;i<=m;++i)\n    {\n        int opt=read(),x=read();\n        if(opt)\n        {\n            --cnt[a[opt]];\n            if(a[opt]<=qr)\n                modify(1,1,lim,a[opt]-cnt[a[opt]],a[opt]-cnt[a[opt]],-1);\n            a[opt]=x+ql-1;\n            modify(1,1,lim,a[opt]-cnt[a[opt]],a[opt]-cnt[a[opt]],1);\n            ++cnt[a[opt]];\n        }\n        else\n        {\n            if(x==1)\n            {\n                if(cnt[qr])\n                    modify(1,1,lim,qr-cnt[qr]+1,qr,-1);\n                --ql,--qr;\n            }\n            else\n            {\n                ++ql,++qr;\n                if(cnt[qr])\n                    modify(1,1,lim,qr-cnt[qr]+1,qr,1);\n            }\n        }\n        write(query(1,1,lim,ql,qr)),puts(\"\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1558450067,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019]\u5220\u6570\u3011"
    },
    {
        "content": "\u5148\u8003\u8651\u4e0d\u5e26\u4fee\u6539\u600e\u4e48\u505a\u3002\n\n\u4e0d\u5e26\u4fee\u6539\u7684\u7248\u672c\u663e\u7136\u662f\u9053\u539f\u9898\uff0c\u6839\u636e\u539f\u9898\u7684\u505a\u6cd5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u662f\u7ed9\u533a\u95f4 $[i-cnt_i+1,i]$ \u8986\u76d6\u4e00\u6b21\uff0c\u7136\u540e\u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u70b9\u6ca1\u6709\u88ab\u8986\u76d6\u3002\u8fd9\u53ef\u4ee5\u8f6c\u6362\u6210\u533a\u95f4\u52a0 $1$ \uff0c\u7136\u540e\u8be2\u95ee\u533a\u95f4 $0$ \u4e2a\u6570\u3002\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u53ca\u5176\u4e2a\u6570\u6765\u5b9e\u73b0\u3002\n\n\u7136\u540e\u5e26\u4fee\u6539\u7684\u8bdd\uff0c\u53ef\u4ee5\u5355\u70b9\u4fee\u6539\u6bcf\u6b21\u53ea\u4f1a\u4fee\u6539\u4e24\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u800c\u533a\u95f4\u5e73\u79fb\u53ef\u4ee5\u76f4\u63a5\u5c06\u67e5\u8be2\u533a\u95f4\u4ece $[1,n]$ \u53d8\u6210 $[0,n-1]$ \u6216\u8005 $[2,n+1]$ \u3002\u4e3a\u4e86\u65b9\u4fbf\u4e00\u5f00\u59cb\u5c31\u5c06\u5750\u6807\u5411\u53f3\u5e73\u79fb $\\max(n,m)$ \uff0c\u540c\u65f6\u7ed9\u53f3\u8fb9\u9884\u7559 $\\max(n,m)$ \u7684\u4f4d\u7f6e\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log (n+m))$ \u3002\n\n\u4ee3\u7801:\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#include<queue>\n#include<iostream>\n#include<climits>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<(b);++i)\n#define pb push_back\n#define mp make_pair\n#define mx(a,b) (a>b?a:b)\n#define mn(a,b) (a<b?a:b)\ntypedef unsigned long long uint64;\ntypedef unsigned int uint32;\ntypedef long long ll;\nusing namespace std;\n\nnamespace IO\n{\n\tconst uint32 Buffsize=1<<15,Output=1<<24;\n\tstatic char Ch[Buffsize],*S=Ch,*T=Ch;\n\tinline char getc()\n\t{\n\t\treturn((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n\t}\n\tstatic char Out[Output],*nowps=Out;\n\t\n\tinline void flush(){fwrite(Out,1,nowps-Out,stdout);nowps=Out;}\n\n\ttemplate<typename T>inline void read(T&x)\n\t{\n\t\tx=0;static char ch;T f=1;\n\t\tfor(ch=getc();!isdigit(ch);ch=getc())if(ch=='-')f=-1;\n\t\tfor(;isdigit(ch);ch=getc())x=x*10+(ch^48);\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write(T x,char ch='\\n')\n\t{\n\t\tif(!x)*nowps++='0';\n\t\tif(x<0)*nowps++='-',x=-x;\n\t\tstatic uint32 sta[111],tp;\n\t\tfor(tp=0;x;x/=10)sta[++tp]=x%10;\n\t\tfor(;tp;*nowps++=sta[tp--]^48);\n\t\t*nowps++=ch;\n\t\tif(nowps-Out>=1<<23)flush();\n\t}\n\n\tinline void getstr(char*q)\n\t{\n\t\tregister char ch;\n\t\tfor(ch=getc();!isgraph(ch);ch=getc());\n\t\tfor(;isgraph(ch);ch=getc())*q++=ch;\n\t\t*q='\\0';\n\t}\n\n\tinline void getwd(char&x){for(x=getc();!isupper(x);x=getc());}\n}\nusing namespace IO;\n\nvoid file()\n{\n#ifndef ONLINE_JUDGE\n\tFILE*DSD=freopen(\"water.in\",\"r\",stdin);\n\tFILE*CSC=freopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\ninline void Chkmin(int&u,int v){u>v?u=v:0;}\n\ninline void Chkmax(int&u,int v){u<v?u=v:0;}\n\ninline void Chkmax(double&u,double v){u<v?u=v:0;}\n\ninline void Chkmax(ll&u,ll v){u<v?u=v:0;}\n\ninline void Chkmin(ll&u,ll v){u>v?u=v:0;}\n\nconst int MAXN=4.5e5+7;\n\nstatic int n,m,a[MAXN],cnt[MAXN];\n\ninline void init()\n{\n\tread(n),read(m);\n\tRep(i,1,n)read(a[i]),++cnt[a[i]+=max(m,n)];\n}\n\nstatic int cl[MAXN];\n\nnamespace Segment_Tree\n{\n\tstatic int p[MAXN<<2],cn[MAXN<<2],tg[MAXN<<2];\n\n\tinline void pushup(int u)\n\t{\n\t\tp[u]=p[u<<1],cn[u]=cn[u<<1];\n\t\tif(p[u<<1|1]<p[u])p[u]=p[u<<1|1],cn[u]=cn[u<<1|1];\n\t\telse if(p[u<<1|1]==p[u])cn[u]+=cn[u<<1|1];\n\t}\n\n\tinline void pushdown(int u)\n\t{\n\t\tif(tg[u])\n\t\t{\n\t\t\ttg[u<<1]+=tg[u],tg[u<<1|1]+=tg[u];\n\t\t\tp[u<<1]+=tg[u],p[u<<1|1]+=tg[u];\n\t\t\ttg[u]=0;\n\t\t}\n\t}\n\n\tvoid build_tree(int h,int l,int r)\n\t{\n\t\tif(l==r){p[h]=cl[l],cn[h]=1;return;}\n\t\tint md=(l+r)>>1;\n\t\tbuild_tree(h<<1,l,md),build_tree(h<<1|1,md+1,r);\n\t\tpushup(h);\n\t}\n\n\tvoid modify(int h,int l,int r,int x,int y,int dt)\n\t{\n\t\tif(l>=x&&r<=y){p[h]+=dt,tg[h]+=dt;return;}\n\t\tint md=(l+r)>>1;pushdown(h);\n\t\tif(x<=md)modify(h<<1,l,md,x,y,dt);\n\t\tif(y>md)modify(h<<1|1,md+1,r,x,y,dt);\n\t\tpushup(h);\n\t}\n\n\tint query(int h,int l,int r,int x,int y)\n\t{\n\t\tif(l>=x&&r<=y)return p[h]?0:cn[h];\n\t\tint md=(l+r)>>1,sm=0;pushdown(h);\n\t\tif(x<=md)sm=query(h<<1,l,md,x,y);\n\t\tif(y>md)sm+=query(h<<1|1,md+1,r,x,y);\n\t\treturn sm;\n\t}\n}\nusing namespace Segment_Tree;\n\nint ln;\n\ninline void solve()\n{\n\tstatic int op,x;\n\tstatic int l=max(m,n)+1,r=l+n-1;\n\tint ln=r+max(m,n);\n\tRep(i,m+1,r)++cl[i-cnt[i]+1],--cl[i+1];\n\tRep(i,2,r+1)cl[i]+=cl[i-1];\n\tbuild_tree(1,1,ln);\n\tRep(i,1,m)\n\t{\n\t\tread(op),read(x);\n\t\tif(!op)\n\t\t{\n\t\t\tif(x==1)\n\t\t\t{\n\t\t\t\tif(cnt[r])modify(1,1,ln,r-cnt[r]+1,r,-1);\n\t\t\t\t--l,--r;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++l,++r;\n\t\t\t\tif(cnt[r])modify(1,1,ln,r-cnt[r]+1,r,1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(a[op]<=r)\n\t\tmodify(1,1,ln,a[op]-cnt[a[op]]+1,a[op]-cnt[a[op]]+1,-1);\n\t\t\t--cnt[a[op]];\n\t\t\ta[op]=x+l-1;\n\t\t\t++cnt[x+l-1];\n\t\t\tmodify(1,1,ln,a[op]-cnt[a[op]]+1,a[op]-cnt[a[op]]+1,1);\n\t\t}\n\t\twrite(query(1,1,ln,l,r));\n\t}\n\tflush();\n}\n\nint main()\n{\n\tfile();\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1555941590,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5324 \u3010[BJOI2019] \u5220\u6570\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u6709\u610f\u601d\u7684\u9898\u76ee\u3002\u800c\u4e14\u65b9\u6cd5\u4e0d\u5f53\u7684\u8bdd\u4f1a\u89c9\u5f97\u975e\u5e38\u9ebb\u70e6\u3002\n\n## \u9898\u89e3\n\n\u6309\u7167\u503c\u57df\u6211\u4eec\u628a\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u753b\u6210\u4e00\u6839\u6839\u7684\u67f1\u5b50\uff0c\u7136\u540e\u628a\u67f1\u5b50\u5411\u5de6\u63a8\u5bfc\uff0c$[1,n]$\u4e2d\u672a\u88ab\u8986\u76d6\u7684\u533a\u95f4\u957f\u5ea6\u5c31\u662f\u7b54\u6848\u3002\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\u5355\u70b9\u4fee\u6539\u503c\uff0c\u5373\u4fee\u6539\u4e24\u6839\u67f1\u5b50\u7684\u957f\u5ea6\u3002\u5168\u4f53\u4fee\u6539\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u8be2\u95ee\u533a\u95f4\u7684\u5e73\u79fb\u3002\u90a3\u4e48\u53ea\u9700\u8981\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u5c31\u884c\u4e86\u3002\u2014\u2014\u6458\u81eayyb\u7684\u535a\u5ba2\n\n\u8865\u5145\u4e00\u4e0b\u5982\u4f55\u7ef4\u62a4\u3002\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u88ab\u8986\u76d6\u7684\u6b21\u6570\u548c\u533a\u95f4\u8986\u76d6\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e0e\u6700\u5c0f\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u67e5\u8be20\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n\n[code](https://loj.ac/submission/731382)\n\n~~\u4ee3\u7801\u4e5f\u662f\u5bf9\u7740yyb\u7684\u4ee3\u7801\u5199\u7684~~\n\n## \u5c0f\u95ee\u9898\n\n+ \u5728\u6574\u4f53\u5e73\u79fb\u7684\u65f6\u5019\u9700\u8981\u770b\u662f\u4e0d\u662f\u6709\u4e9b\u70b9\u4ece\u5916\u9762\u5e73\u79fb\u5230\u91cc\u9762\u6216\u8005\u4ece\u91cc\u9762\u5e73\u79fb\u5230\u5916\u9762\uff08\u6307\u7684\u662f\u533a\u95f4$[1,n]$\u7684\u91cc\u9762\u548c\u5916\u9762\uff09\u3002\u5e73\u79fb\u5230\u5916\u9762\u7684\u5c31\u4e0d\u80fd\u7b97\u4e86\u3002\n\n## \u4e00\u4e9b\u601d\u8003\n\n\u5f00\u59cb\u8fd9\u9053\u9898\u6211\u60f3\u7684\u662f\u7528\u7ebf\u6bb5\u6811\u5b8c\u6210\u8986\u76d6\u95ee\u9898\u3002\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u4e0d\u4f46\u8981\u52a0\u533a\u95f4\uff0c\u8fd8\u8981\u5220\u533a\u95f4\uff0c\u5c31\u53ea\u80fd\u7edf\u8ba1\u6b21\u6570\u4e86\uff0c\u4e0d\u80fd\u8986\u76d6\u4e86\u3002\u5728\u6ca1\u6709\u610f\u8bc6\u5230\u90a3\u4e2a\u5c0f\u95ee\u9898\u4e4b\u524d\u5176\u5b9e\u662f\u53ef\u4ee5\u7528\u533a\u95f4\u8986\u76d6\u7684\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u518d\u8bb0\u5f55\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e\u4e3a\u7ec8\u70b9\u7684\u533a\u95f4\u8d77\u59cb\u70b9\uff0c\u5982\u679c\u533a\u95f4\u7684\u957f\u5ea6\u53d8\u77ed1\u4e2a\u7684\u8bdd\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\u521a\u597d\u8986\u76d6\u4e0d\u5230\u7684\u90a3\u4e2a\u70b9\uff0c\u5373\u539f\u672c\u8986\u76d6\u5f97\u5230\u540e\u6765\u8986\u76d6\u4e0d\u5230\u7684\u70b9\u80fd\u4e0d\u80fd\u88ab\u5176\u4ed6\u533a\u95f4\u8986\u76d6\u5230\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u540e\u9762\u7684\u6240\u6709\u70b9\u7684\u5de6\u7aef\u70b9\u6700\u5c0f\u503c\u5b8c\u6210\uff0c\u4f46\u6539\u6210\u4e86\u5220\u533a\u95f4\uff0c\u4e00\u6b21\u51cf\u5c11\u4e00\u4e2a\u533a\u95f4\u800c\u4e0d\u662f\u4e00\u4e2a\u70b9\uff0c\u5c31\u65e0\u6cd5\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u6cd5\u5b8c\u6210\u4e86\u3002\n\n## \u77e5\u8bc6\u70b9\n\n+ \u9700\u8981\u5220\u9664\u7684\u533a\u95f4\u8986\u76d6\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u8986\u76d6\u6b21\u6570\u5b8c\u6210\u3002\uff08\u5f53\u65f6\u8111\u5b50\u83ab\u540d\u574f\u6389\u5bfc\u81f4\u5fd8\u8bb0\u8fd9\u4ef6\u4e8b......\uff09\n+ \u5f00\u59cb\u7684\u601d\u7ef4\u90e8\u5206\uff0c\u60f3\u8c61\u6210\u5f62\u8c61\u7684\u67f1\u5b50\u63a8\u5012\u5176\u5b9e\u8fd8\u633a\u5f62\u8c61\u7684\uff08\u5176\u5b9e\u5c31\u662f\u8986\u76d6\u524d\u9762\u4e00\u6bb5\u533a\u95f4\uff09\u3002",
        "postTime": 1580132929,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[BJOI 2019]\u5220\u6570(\u7ebf\u6bb5\u6811\uff0c\u601d\u7ef4)"
    },
    {
        "content": "## \u524d\u8a00\n\n\u597d\u6076\u5fc3\u7684\u4e00\u9898\u3002\u3002\u3002\n\n\u7ec6\u8282\u5b9e\u5728\u592a\u591a\u4e86\u3002\u3002\u3002\n\n## \u601d\u8def\n\n\u8fd9\u9898\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u7684\u3002\n\n\u6700\u7ec8\u5e8f\u5217\u6ee1\u8db3\u4ece $n$ \u9700\u8981\u5f00\u59cb\u5220\u6570\u4e00\u76f4\u80fd\u5220\u4e0b\u53bb\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u6570\u8981\u5220\u7684\u6570\u91cf\u8f6c\u6210\u4e00\u4e2a\u533a\u95f4 $[x-cnt_x+1,x]$\uff0c\u5f53\u4e24\u4e2a\u533a\u95f4\u4e2d\u95f4\u9694\u7740\u4e00\u4e9b\u7a7a\u9699\u65f6\uff0c\u5c31\u9700\u8981\u586b\u8865\u5b83\uff0c\u5426\u5219\u7684\u8bdd\u5220\u5b8c\u8fd9\u4e2a\u533a\u95f4\u5c31\u6ca1\u529e\u6cd5\u518d\u5220\u4e0b\u53bb\u4e86\u3002\n\n\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\uff0c\u7b54\u6848\u5373\u4e3a\u6574\u4e2a\u533a\u95f4 $[1,n]$ \u4e2d\u6240\u6709\u7a7a\u9699\uff0c\u5373 $0$ \u7684\u6570\u91cf\u3002\n\n\u4e24\u4e2a\u533a\u95f4\u91cd\u53e0\u600e\u4e48\u529e\uff1f\u5f88\u7b80\u5355\uff1a\u53ea\u6709 $n$ \u4e2a\u6570\uff0c\u6240\u4ee5\u6bcf\u591a\u91cd\u53e0\u4e00\u5757\u5730\u65b9\uff0c\u5c31\u4f1a\u6709\u4e00\u5757\u5730\u65b9\u6ca1\u6709\u88ab\u8986\u76d6\u3002\n\n$0$ \u7684\u6570\u91cf\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\u53ef\u4ee5\u7528\u533a\u95f4\u6700\u5c0f\u503c\u7ef4\u62a4\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u56db\u4e2a\u4e1c\u897f\uff1a\n\n$tag$ \u8868\u793a\u52a0\u6cd5\u61d2\u6807\u8bb0\uff0c$c0$ \u8868\u793a $0$ \u7684\u6570\u91cf\uff0c$mi$ \u8868\u793a\u533a\u95f4\u6700\u5c0f\u503c\uff0c$cnt$ \u8868\u793a\u6700\u5c0f\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u5982\u679c\u7ecf\u5386\u4fee\u6539\u540e\u6700\u5c0f\u503c\u4e3a $0$\uff0c\u5c31\u628a $cnt\\to c0$\uff0c\u5426\u5219 $0\\to c0$\u3002\n\n**\u6ce8\u610f\uff1a\u53ea\u8981\u533a\u95f4\u6709\u4fee\u6539\uff0c\u9664\u4e86 `push_down` \u53ea\u4f20\u9012 `tag` \u4ee5\u5916\uff0c\u4e00\u5b9a\u8981\u66f4\u65b0 `cnt` \u548c `c0`\uff01**\n\n\u7ebf\u6bb5\u6811\u90e8\u5206\u8fd8\u7b97\u6bd4\u8f83\u7b80\u5355\u3002\n\n\u64cd\u4f5c\u90e8\u5206\u7684\u8bdd\uff0c$p>0$ \u65f6\u5c31\u662f\u7f29\u77ed\u539f\u6765\u503c\u7684\u533a\u95f4\uff0c\u589e\u957f\u5f53\u524d\u503c\u7684\u533a\u95f4\u3002\n\n$p=0$ \u7684\u8bdd\uff0c\u5176\u5b9e\u5c31\u662f\u5e73\u79fb\u6574\u5f20\u56fe\uff0c\u62ff\u4e00\u4e2a\u504f\u79fb\u91cf\u8868\u793a\u5f53\u524d\u5e73\u79fb\u4e86\u591a\u5c11\u683c\u5373\u53ef\u3002\n\n\u53e6\u5916\uff0c\u8d1f\u6570\u7684\u8bdd\u4e5f\u662f\u8981\u4fdd\u5b58\u7684\u3002\u6bd4\u5982 $-5$\uff0c\u5728\u7ecf\u5386\u4e86 $6$ \u6b21\u6574\u4f53\u52a0\u4e00\u540e\u5c31\u4f1a\u88ab\u79fb\u5230 $[1,n]$ \u4e2d\u3002\n\n\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u76f4\u63a5\u627e\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570 $D$\uff0c\u7136\u540e\u7ed9\u6240\u6709\u6570\u90fd\u52a0\u4e0a $D$ \u5373\u53ef\u3002\n\n~~\u4f3c\u4e4e\u53ef\u4ee5\u66f4\u6bd2\u7624\u4e00\u70b9\uff0c\u6269\u5927\u503c\u57df\uff0c\u53ea\u6709\u4e3b\u5e2d\u6811\u80fd\u8fc7~~\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 6e5 + 5;\nconst int D = 3e5;\ntypedef long long ll;\nint n, m, num[N], a[N];\nstruct SegTree\n{\n    int tag[N << 3], c0[N << 3], mi[N << 3], cnt[N << 3];\n    inline int ls(int p)\n    {\n        return p << 1;\n    }\n    inline int rs(int p)\n    {\n        return p << 1 | 1;\n    }\n    inline void push_up(int p)\n    {\n        mi[p] = min(mi[ls(p)], mi[rs(p)]);\n        cnt[p] = 0;\n        if (mi[p] == mi[ls(p)])\n            cnt[p] += cnt[ls(p)];\n        if (mi[p] == mi[rs(p)])\n            cnt[p] += cnt[rs(p)];\n        c0[p] = mi[p] ? 0 : cnt[p];\n    }\n    inline void push_down(int p)\n    {\n        mi[ls(p)] += tag[p];\n        c0[ls(p)] = mi[ls(p)] ? 0 : cnt[ls(p)];\n        mi[rs(p)] += tag[p];\n        c0[rs(p)] = mi[rs(p)] ? 0 : cnt[rs(p)];\n        tag[ls(p)] += tag[p];\n        tag[rs(p)] += tag[p];\n        tag[p] = 0;\n    }\n    inline void build(int p, int l, int r)\n    {\n        if (l == r)\n        {\n            mi[p] = 0;\n            c0[p] = cnt[p] = r - l + 1;\n            return;\n        }\n        int mid = l + r >> 1;\n        build(ls(p), l, mid);\n        build(rs(p), mid + 1, r);\n        push_up(p);\n    }\n    inline void update(int p, int l, int r, int dl, int dr, int k)\n    {\n        if (dl <= l && r <= dr)\n        {\n            mi[p] += k;\n            tag[p] += k;\n            c0[p] = mi[p] ? 0 : cnt[p];\n            // cout << l << ' ' << r << ' ' << mi[p] << ' ' << cnt[p] << ' ' << c0[p] << '\\n';\n            return;\n        }\n        push_down(p);\n        int mid = l + r >> 1;\n        if (dl <= mid)\n            update(ls(p), l, mid, dl, dr, k);\n        if (mid < dr)\n            update(rs(p), mid + 1, r, dl, dr, k);\n        push_up(p);\n    }\n    inline int query(int p, int l, int r, int qx, int qy)\n    {\n        if (qx <= l && r <= qy)\n            return c0[p];\n        push_down(p);\n        int mid = l + r >> 1, res = 0;\n        if (qx <= mid)\n            res += query(ls(p), l, mid, qx, qy);\n        if (mid < qy)\n            res += query(rs(p), mid + 1, r, qx, qy);\n        return res;\n    }\n} tr;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++)\n        cin >> num[i], num[i] += D, a[num[i]]++;\n    int st = 0;\n    tr.build(1, 1, N);\n    for (int i = D + 1; i <= D + n; i++)\n        tr.update(1, 1, N, i - a[i] + 1, i, 1);\n    while (m--)\n    {\n        int x, k;\n        cin >> x >> k;\n        if (x)\n        {\n            k = k + D - st;\n            int last = num[x];\n            if (last <= D + n - st)\n                tr.update(1, 1, N, last - a[last] + 1, last - a[last] + 1, -1);\n            a[last]--;\n            a[k]++;\n            if (k <= D + n - st)\n                tr.update(1, 1, N, k - a[k] + 1, k - a[k] + 1, 1);\n            num[x] = k;\n        }\n        else\n        {\n            if (k == 1)\n            {\n                int p = D + n - st;\n                tr.update(1, 1, N, p - a[p] + 1, p, -1);\n                st++;\n            }\n            else\n            {\n                st--;\n                int p = D + n - st;\n                tr.update(1, 1, N, p - a[p] + 1, p, 1);\n            }\n        }\n        cout << tr.query(1, 1, N, D + 1 - st, D + n - st) << '\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1672683857,
        "uid": 576378,
        "name": "creation_hy",
        "ccfLevel": 5,
        "title": "P5324 \u9898\u89e3"
    }
]