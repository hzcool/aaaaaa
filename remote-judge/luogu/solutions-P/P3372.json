[
    {
        "content": "# \u4e00\u3001\u7b80\u4ecb\u7ebf\u6bb5\u6811\n\nps:  \u6b64\u5904\u4ee5\u8be2\u95ee\u533a\u95f4\u548c\u4e3a\u4f8b\u3002\u5b9e\u9645\u4e0a\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5904\u7406\u5f88\u591a**\u7b26\u5408\u7ed3\u5408\u5f8b**\u7684\u64cd\u4f5c\u3002\n\n\u6bd4\u5982\u8bf4\u52a0\u6cd5\uff0c`a[1]+a[2]+a[3]+a[4]=(a[1]+a[2])+(a[3]+a[4])` \u3002\n\n\u7ebf\u6bb5\u6811\u4e4b\u6240\u4ee5\u79f0\u4e3a\u201c\u6811\u201d\uff0c\u662f\u56e0\u4e3a\u5176\u5177\u6709\u6811\u7684\u7ed3\u6784\u7279\u6027\u3002\u7ebf\u6bb5\u6811\u7531\u4e8e\u672c\u8eab\u662f\u4e13\u95e8\u7528\u6765\u5904\u7406\u533a\u95f4\u95ee\u9898\u7684\uff08\u5305\u62ec RMQ\u3001RSQ \u95ee\u9898\u7b49\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u800c\u8a00\uff0c\u90fd\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u4e2d\u7684\u4e00\u6bb5\u5b50\u533a\u95f4\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u800c\u8a00\uff0c\u90fd\u8868\u793a\u5e8f\u5217\u4e2d\u7684\u5355\u4e2a\u5143\u7d20\u4fe1\u606f\uff1b\u5b50\u8282\u70b9\u4e0d\u65ad\u5411\u81ea\u5df1\u7684\u7236\u4eb2\u8282\u70b9\u4f20\u9012\u4fe1\u606f\uff0c\u800c\u7236\u8282\u70b9\u5b58\u50a8\u7684\u4fe1\u606f\u5219\u662f\u4ed6\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u4fe1\u606f\u7684\u6574\u5408\u3002\n\n\u6709\u6ca1\u6709\u89c9\u5f97\u5f88\u719f\u6089\uff1f\u5bf9\uff0c**\u7ebf\u6bb5\u6811\u5c31\u662f\u5206\u5757\u601d\u60f3\u7684\u6811\u5316\uff0c\u6216\u8005\u8bf4\u662f\u5bf9\u4e8e\u4fe1\u606f\u5904\u7406\u7684\u4e8c\u8fdb\u5236\u5316**\u2014\u2014\u7528\u4e8e\u8fbe\u5230 $O(\\log n)$ \u7ea7\u522b\u7684\u5904\u7406\u901f\u5ea6\uff0c$\\log$ \u4ee5 $2$ \u4e3a\u5e95\u3002\uff08\u5176\u5b9e\u4ee5\u51e0\u4e3a\u5e95\u90fd\u53ea\u4e0d\u8fc7\u662f\u4e2a\u5e38\u6570\uff0c\u53ef\u5ffd\u7565)\u3002\u800c\u5206\u5757\u7684\u601d\u60f3\uff0c\u5219\u662f\u53ef\u4ee5\u7528\u4e00\u53e5\u8bdd\u603b\u7ed3\u4e3a\uff1a**\u901a\u8fc7\u5c06\u6574\u4e2a\u5e8f\u5217\u5206\u4e3a\u6709\u7a77\u4e2a\u5c0f\u5757\uff0c\u5bf9\u4e8e\u8981\u67e5\u8be2\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u603b\u662f\u53ef\u4ee5\u6574\u5408\u6210 $k$ \u4e2a\u6240\u5206\u5757\u4e0e $m$ \u4e2a\u5355\u4e2a\u5143\u7d20\u7684\u4fe1\u606f\u7684\u5e76** $(0\\leq k,m\\leq \\sqrt{n})$\u3002\u4f46\u666e\u901a\u7684\u5206\u5757\u4e0d\u80fd\u9ad8\u6548\u7387\u5730\u89e3\u51b3\u5f88\u591a\u95ee\u9898\uff0c\u6240\u4ee5\u4f5c\u4e3a $\\log$ \u7ea7\u522b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ebf\u6bb5\u6811\u5e94\u8fd0\u800c\u751f\u3002\n\n____\n\n$\\mathcal{Extra \\ \\ Tips}$\n\n\u5176\u5b9e\uff0c\u867d\u7136\u7ebf\u6bb5\u6811\u7684\u65f6\u95f4\u6548\u7387\u8981\u9ad8\u4e8e\u5206\u5757\u4f46\u662f\u5b9e\u9645\u4e0a\u5206\u5757\u7684\u603b\u5408\u5e76\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt{n}$ \u4f46\u662f\u7ebf\u6bb5\u6811\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u5408\u5e76\u6b21\u6570\u663e\u7136\u662f\u8981\u5927\u4e8e\u8fd9\u4e2a\u65f6\u95f4\u6548\u7387\u7684\u3002\n\n~~\u4f46\u662f\u6bd5\u7adf\u4e5f\u53ea\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u5e38\u6570\u800c\u5df2\u3002~~\n\nHowever\uff0c\u867d\u8bf4\u5982\u6b64\uff0c\u5206\u5757\u7684\u5e94\u7528\u8303\u56f4\u8fd8\u662f\u8981\u5e7f\u4e8e\u7ebf\u6bb5\u6811\u7684\uff0c\u56e0\u4e3a\u867d\u7136\u7ebf\u6bb5\u6811\u597d\u50cf\u5f88\u5feb\uff0c\u4f46\u662f\u5b83\u53ea\u80fd\u7ef4\u62a4\u5e26\u6709\u7ed3\u5408\u5f8b\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u533a\u95f4 $\\max/\\min$\u3001$\\sum$\u3001$\\rm xor$ \u4e4b\u7c7b\u7684\uff0c\u4f46\u662f\u4e0d\u5e26\u6709\u7ed3\u5408\u5f8b\u7684\u4fe1\u606f\u5c31\u4e0d\u80fd\u7ef4\u62a4\uff08\u4e14\u770b\u4e0b\u6587\u5206\u89e3\uff09\uff1b\u800c\u5206\u5757\u5219\u7075\u6d3b\u5f97\u591a\uff0c\u53ef\u4ee5\u7ef4\u62a4\u5f88\u591a\u522b\u7684\u4e1c\u897f,\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5206\u5757\u7684\u672c\u8d28\u5c31\u662f**\u4f18\u96c5\u7684\u66b4\u529b**\u3002\n\n\u5176\u5b9e\u8d8a\u66b4\u529b\u7684\u7b97\u6cd5\u53ef\u4ee5\u652f\u6301\u7684\u64cd\u4f5c\u5c31\u8d8a\u591a\u3001\u529f\u80fd\u6027\u5c31\u8d8a\u5f3a\uff01~~\u4f60\u770b $n^2$ \u7684\u66b4\u529b\u51e0\u4e4e\u4ec0\u4e48\u90fd\u53ef\u4ee5\u7ef4\u62a4\u3002~~\n\n____\n\n# \u4e8c\u3001\u9010\u6b65\u5206\u6790\u7ebf\u6bb5\u6811\u7684\u6784\u9020\u5b9e\u73b0\n\n## 1\u3001\u5efa\u6811\u4e0e\u7ef4\u62a4\n   \n\u7531\u4e8e\u4e8c\u53c9\u6811\u7684\u81ea\u8eab\u7279\u6027\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7 $i$\uff0c\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u7684\u7f16\u53f7\u5206\u522b\u662f $2i$ \u548c $2i+1$\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5199\u4e24\u4e2a $O(1)$ \u7684\u53d6\u513f\u5b50\u51fd\u6570\uff1a\n\n```cpp\n    int n;\n\tint ans[MAXN*4];\n\t\n\tinline int ls(int p){return p<<1;}//\u5de6\u513f\u5b50 \n\tinline int rs(int p){return p<<1|1;}//\u53f3\u513f\u5b50 \n```\n___\n\n$\\mathcal{Extra \\ \\ Tips}$\n\n1\u3001\u6b64\u5904\u7684 `inline` \u53ef\u4ee5\u6709\u6548\u9632\u6b62\u65e0\u9700\u5165\u6808\u7684\u4fe1\u606f\u5165\u6808\uff0c\u8282\u7701\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\n\n2\u3001\u4e8c\u8fdb\u5236\u4f4d\u5de6\u79fb\u4e00\u4f4d\u4ee3\u8868\u7740\u6570\u503c $\\times 2$\uff0c\u800c\u5982\u679c\u5de6\u79fb\u5b8c\u4e4b\u540e\u518d\u6216\u4e0a $1$\uff0c\u7531\u4e8e\u5de6\u79fb\u5b8c\u4e4b\u540e\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u4e00\u5b9a\u4f1a\u662f $0$ \uff0c\u6240\u4ee5 $|1$ \u7b49\u4ef7\u4e8e $+1$ \u3002\u8fd9\u4e2a\u5730\u65b9\u66f4\u591a\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u901f\u5ea6\u65b9\u9762\u7406\u8bba\u4e0a\u662f\u8981\u6bd4 $+1$ \u5feb\uff0c\u4f46\u5176\u5b9e\u7f16\u8bd1\u5668\u4f1a\u5e2e\u4f60\u4e3b\u52a8\u5e72\u8fd9\u4ef6\u4e8b\u3002\n___\n\n  \u90a3\u4e48\u6839\u636e\u7ebf\u6bb5\u6811\u7684\u670d\u52a1\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5f97\u5230\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4:\n\n```cpp\n    void push_up_sum(int p){\n\t\tt[p]=t[lc(p)]+t[rc(p)];\n    }//\t\u5411\u4e0a\u4e0d\u65ad\u7ef4\u62a4\u533a\u95f4\u64cd\u4f5c \n\t\n\tvoid push_up_min(int p){//max and min\n\t t[p]=min(t[lc(p)],t[rc(p)]);\n     //t[p]=max(t[lc(p)],t[rc(p)]);             \n    }\n```\n\n\u6b64\u5904\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c`push up` \u64cd\u4f5c\u7684\u76ee\u7684\u662f\u4e3a\u4e86**\u7ef4\u62a4\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb**\u3002\u5f53\u6211\u4eec\u9012\u5f52\u5efa\u6811\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u6211\u4eec\u90fd\u9700\u8981\u904d\u5386\u4e00\u904d\uff0c\u5e76\u4e14\u7535\u8111\u4e2d\u7684**\u9012\u5f52\u5b9e\u9645\u610f\u4e49\u662f\u5148\u5411\u5e95\u5c42\u9012\u5f52\uff0c\u7136\u540e\u4ece\u5e95\u5c42\u5411\u4e0a\u56de\u6eaf**\uff0c\u6240\u4ee5\u5f00\u59cb\u9012\u5f52\u4e4b\u540e\u5fc5\u7136\u662f**\u5148\u53bb\u6574\u5408\u5b50\u8282\u70b9\u7684\u4fe1\u606f**\uff0c\u518d\u5411\u5b83\u4eec\u7684\u7956\u5148\u56de\u6eaf\u6574\u5408\u4e4b\u540e\u7684\u4fe1\u606f\u3002(\u8fd9\u5176\u5b9e\u662f\u6b63\u786e\u6027\u7684\u8bc1\u660e\u5566)\u3002\n   \n\u5450\uff0c\u6211\u4eec\u5728\u8fd9\u513f\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u5b9e\u9645\u4e0a `push_up` \u662f\u5728\u5408\u5e76\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u9700\u8981\u4fe1\u606f\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff01\n   \n\u90a3\u4e48\u5bf9\u4e8e\u5efa\u6811\uff0c\u7531\u4e8e\u4e8c\u53c9\u6811\u81ea\u8eab\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u53ef\u4f20\u9012\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u9012\u5f52\u5efa\u6811\uff08emmmm \u4e4b\u524d\u597d\u50cf\u4e0d\u5c0f\u5fc3\u5267\u900f\u4e86 qwq\uff09\uff0c\u5e76\u4e14\u5728\u5efa\u6811\u7684\u540c\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u7ef4\u62a4\u7236\u5b50\u8282\u70b9\u7684\u5173\u7cfb\uff1a\n   \n  ```cpp\nvoid build(ll p,ll l,ll r)\n{\n\tif(l==r){ans[p]=a[l];return ;}\n    //\u5982\u679c\u5de6\u53f3\u533a\u95f4\u76f8\u540c\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u53f6\u5b50\u8282\u70b9\u5566\uff0c\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u662f\u88ab\u771f\u5b9e\u8d4b\u503c\u7684\n\tll mid=(l+r)>>1;\n\tbuild(ls(p),l,mid);\n\tbuild(rs(p),mid+1,r);\n//\u6b64\u5904\u7531\u4e8e\u6211\u4eec\u91c7\u7528\u7684\u662f\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6574\u4e2a\u7ed3\u6784\u6765\u8bf4\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u6765\u964d\u4f4e\u590d\u6742\u5ea6\uff0c\u5426\u5219\u6811\u5f62\u7ed3\u6784\u5219\u6ca1\u6709\u4ec0\u4e48\u660e\u663e\u7684\u4f18\u5316\n\tpush_up(p);\n//\u6b64\u5904\u7531\u4e8e\u6211\u4eec\u662f\u8981\u901a\u8fc7\u5b50\u8282\u70b9\u6765\u7ef4\u62a4\u7236\u4eb2\u8282\u70b9\uff0c\u6240\u4ee5pushup\u7684\u4f4d\u7f6e\u5e94\u5f53\u662f\u5728\u56de\u6eaf\u65f6\u3002\n} \n```\n  \n## 2\u3001\u63a5\u4e0b\u6765\u8c08\u533a\u95f4\u4fee\u6539\n\n\u4e3a\u4ec0\u4e48\u4e0d\u8ba8\u8bba\u5355\u70b9\u4fee\u6539\u5462 \uff1f\u56e0\u4e3a\u5176\u5b9e\u5f88\u663e\u7136\uff0c\u5355\u70b9\u4fee\u6539\u5c31\u662f\u533a\u95f4\u4fee\u6539\u7684\u4e00\u4e2a\u5b50\u95ee\u9898\u800c\u5df2\uff0c\u5373\u533a\u95f4\u957f\u5ea6\u4e3a$1$\u65f6\u8fdb\u884c\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u7f62\u4e86 qwq\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u5f15\u5165\u4e00\u4e2a\u540d\u53eb\u201c $\\rm lazy~tag$ \u201d\uff08\u61d2\u6807\u8bb0\uff09\u7684\u4e1c\u897f\u2014\u2014\u4e4b\u6240\u4ee5\u79f0\u5176\u201c$\\rm lazy$\u201d\uff0c\u662f\u56e0\u4e3a\u539f\u672c\u533a\u95f4\u4fee\u6539\u9700\u8981\u901a\u8fc7\u5148\u6539\u53d8\u53f6\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u4e0d\u65ad\u5730\u5411\u4e0a\u9012\u5f52\u4fee\u6539\u7956\u5148\u8282\u70b9\u76f4\u81f3\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe $O(n\\log n)$ \u7684\u7ea7\u522b\u3002\u4f46\u5f53\u6211\u4eec\u5f15\u5165\u4e86\u61d2\u6807\u8bb0\u4e4b\u540e\uff0c\u533a\u95f4\u66f4\u65b0\u7684\u671f\u671b\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86 $O(\\log n)$ \u7684\u7ea7\u522b\u4e14\u751a\u81f3\u4f1a\u66f4\u4f4e.\n\n\n### \uff081\uff09\u9996\u5148\u5148\u6765\u4ece\u5206\u5757\u601d\u60f3\u4e0a\u89e3\u91ca\u5982\u4f55\u533a\u95f4\u4fee\u6539\uff1a\n\n\u5206\u5757\u7684\u601d\u60f3\u662f\u901a\u8fc7\u5c06\u6574\u4e2a\u5e8f\u5217\u5206\u4e3a\u6709\u7a77\u4e2a\u5c0f\u5757\uff0c\u5bf9\u4e8e\u8981\u67e5\u8be2\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u603b\u662f\u53ef\u4ee5\u6574\u5408\u6210 $k$ \u4e2a\u6240\u5206\u5757\u4e0e $m$ \u4e2a\u5355\u4e2a\u5143\u7d20\u7684\u4fe1\u606f\u7684\u5e76 $(0\\leq k,m\\leq \\log n)$(\u5c0f\u5c0f\u4fee\u6539\u4e86\u4e00\u4e0b\u7684\u4e0a\u9762\u7684\u524d\u8a00 qwq )\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53cd\u8fc7\u6765\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u8981\u4fee\u6539\u7684\u3001\u957f\u5ea6\u4e3a $l$ \u7684\u533a\u95f4\u6765\u8bf4\uff0c\u603b\u662f\u53ef\u4ee5\u770b\u505a\u7531\u4e00\u4e2a\u957f\u5ea6\u4e3a $2^{\\log(\\lfloor{n}\\rfloor)}$ \u548c\u5269\u4e0b\u7684\u5143\u7d20\uff08\u6216\u8005\u5c0f\u533a\u95f4\u7ec4\u6210\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u5c06\u5176\u62c6\u5206\u6210\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u6240\u793a\u7684\u533a\u95f4\uff0c\u4e4b\u540e\u5206\u5f00\u5904\u7406\uff1a\n\n _**\u5982\u679c\u5355\u4e2a\u5143\u7d20\u88ab\u5305\u542b\u5c31\u53ea\u6539\u53d8\u81ea\u5df1\uff0c\u5982\u679c\u6574\u4e2a\u533a\u95f4\u88ab\u5305\u542b\u5c31\u4fee\u6539\u6574\u4e2a\u533a\u95f4\u3002**_ \n \n \u5176\u5b9e\u597d\u50cf\u8fd9\u4e2a\u5728\u5206\u5757\u91cc\u4e0d\u662f\u7279\u522b\u7b80\u5355\u5730\u5b9e\u73b0\uff0c\u4f46\u662f\u5728\u7ebf\u6bb5\u6811\u91cc\uff0c\u65e0\u8bba\u662f\u5143\u7d20\u8fd8\u662f\u533a\u95f4\u90fd\u662f\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c**\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u533a\u5206\u533a\u95f4\u8fd8\u662f\u5143\u7d20**\uff0c\u52a0\u4e2a\u5224\u65ad\u5c31\u597d\u3002\n \n ### \uff082\uff09\u61d2\u6807\u8bb0\u7684\u6b63\u786e\u6253\u5f00\u65b9\u5f0f\n \n\u9996\u5148\uff0c\u61d2\u6807\u8bb0\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u6bcf\u6b21\u3001\u6bcf\u4e2a\u8282\u70b9\u8981\u66f4\u65b0\u7684\u503c\uff0c\u4e5f\u5c31\u662f $\\Delta$\u3002\u4f46\u7ebf\u6bb5\u6811\u7684\u4f18\u70b9\u4e0d\u5728\u4e8e\u5168\u8bb0\u5f55\uff08\u5168\u8bb0\u5f55\u4f9d\u7136\u5f88\u6162 qwq\uff09\uff0c\u800c\u5728\u4e8e\u4f20\u9012\u5f0f\u8bb0\u5f55\uff1a\n \n**\u6574\u4e2a\u533a\u95f4\u90fd\u88ab\u64cd\u4f5c\uff0c\u8bb0\u5f55\u5728\u516c\u5171\u7956\u5148\u8282\u70b9\u4e0a\uff1b\u53ea\u4fee\u6539\u4e86\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u5728\u8fd9\u90e8\u5206\u7684\u516c\u5171\u7956\u5148\u4e0a\uff1b\u5982\u679c\u56db\u73af\u4ee5\u5185\u53ea\u4fee\u6539\u4e86\u81ea\u5df1\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u6539\u53d8\u81ea\u5df1\u3002**\n\nAfter that\uff0c\u5982\u679c\u6211\u4eec\u91c7\u7528\u4e0a\u8ff0\u7684\u4f18\u5316\u65b9\u5f0f\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u6bcf\u6b21\u533a\u95f4\u7684\u67e5\u8be2\u4fee\u6539\u65f6 `push_down` \u4e00\u6b21\uff0c\u4ee5\u514d\u91cd\u590d\u6216\u8005\u51b2\u7a81\u6216\u8005\u7206\u70b8 qwq\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e `push_down` \u800c\u8a00\uff0c\u5176\u5b9e\u5c31\u662f\u7eaf\u7cb9\u7684 `push_up` \u7684\u9006\u5411\u601d\u7ef4(\u4f46\u4e0d\u662f\u9006\u5411\u64cd\u4f5c)\uff1a\n\u56e0\u4e3a\u4fee\u6539\u4fe1\u606f\u5b58\u5728\u7236\u8282\u70b9\u4e0a\uff0c\u6240\u4ee5\u8981\u7531\u7236\u8282\u70b9\u5411\u4e0b\u4f20\u5bfc $\\rm lazy~tag$ \u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a\u600e\u4e48\u4f20\u5bfc `push_down` \u5462\uff1f\u8fd9\u91cc\u5f88\u6709\u610f\u601d\uff0c\u5f00\u59cb\u56de\u6eaf\u65f6\u6267\u884c `push_up`\uff0c\u56e0\u4e3a\u662f\u5411\u4e0a\u4f20\u5bfc\u4fe1\u606f\uff1b\u90a3\u6211\u4eec\u5982\u679c\u8981\u8ba9\u5b83\u5411\u4e0b\u66f4\u65b0\uff0c\u5c31\u8c03\u6574\u987a\u5e8f\uff0c\u5728\u5411\u4e0b\u9012\u5f52\u7684\u65f6\u5019 `push_down` \u4e0d\u5c31\u597d\u60f9~ qwq\uff1a\n\n ```cpp\ninline void f(ll p,ll l,ll r,ll k)\n{\n\ttag[p]=tag[p]+k;\n\tans[p]=ans[p]+k*(r-l+1);\n\t//\u7531\u4e8e\u662f\u8fd9\u4e2a\u533a\u95f4\u7edf\u4e00\u6539\u53d8\uff0c\u6240\u4ee5ans\u6570\u7ec4\u8981\u52a0\u5143\u7d20\u4e2a\u6570\u6b21\u5566 \n}\n//\u6211\u4eec\u53ef\u4ee5\u8ba4\u8bc6\u5230\uff0cf\u51fd\u6570\u7684\u552f\u4e00\u76ee\u7684\uff0c\u5c31\u662f\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4 \ninline void push_down(ll p,ll l,ll r)\n{\n\tll mid=(l+r)>>1;\n\tf(ls(p),l,mid,tag[p]);\n\tf(rs(p),mid+1,r,tag[p]);\n\ttag[p]=0;\n\t//\u6bcf\u6b21\u66f4\u65b0\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u3002\u4ee5\u6b64\u4e0d\u65ad\u5411\u4e0b\u4f20\u9012 \n}\ninline void update(ll nl,ll nr,ll l,ll r,ll p,ll k)\n{\n\t//nl,nr\u4e3a\u8981\u4fee\u6539\u7684\u533a\u95f4\n\t//l,r,p\u4e3a\u5f53\u524d\u8282\u70b9\u6240\u5b58\u50a8\u7684\u533a\u95f4\u4ee5\u53ca\u8282\u70b9\u7684\u7f16\u53f7 \n\tif(nl<=l&&r<=nr)\n\t{\n\t\tans[p]+=k*(r-l+1);\n\t\ttag[p]+=k;\n\t\treturn ;\n\t}\n\tpush_down(p,l,r);\n\t//\u56de\u6eaf\u4e4b\u524d\uff08\u4e5f\u53ef\u4ee5\u8bf4\u662f\u4e0b\u4e00\u6b21\u9012\u5f52\u4e4b\u524d\uff0c\u56e0\u4e3a\u6ca1\u6709\u9012\u5f52\u5c31\u6ca1\u6709\u56de\u6eaf\uff09 \n\t//\u7531\u4e8e\u662f\u5728\u56de\u6eaf\u4e4b\u524d\u4e0d\u65ad\u5411\u4e0b\u4f20\u9012\uff0c\u6240\u4ee5\u81ea\u7136\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u66f4\u65b0\u5230 \n\tll mid=(l+r)>>1;\n\tif(nl<=mid)update(nl,nr,l,mid,ls(p),k);\n\tif(nr>mid) update(nl,nr,mid+1,r,rs(p),k);\n\tpush_up(p);\n\t//\u56de\u6eaf\u4e4b\u540e \n}\n```\n\u5bf9\u4e8e\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u7531\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e0d\u8d85\u8fc7 $\\log n$\uff0c\u90a3\u4e48\u5355\u70b9\u4fee\u6539\u663e\u7136\u662f $O(\\log n)$ \u7684\uff0c\u533a\u95f4\u4fee\u6539\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u8fd9\u4e2a\u533a\u95f4\u81f3\u591a\u5206 $\\log n$ \u4e2a\u5b50\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u533a\u95f4\u7684\u67e5\u8be2\u662f $O(1)$ \u7684\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u81ea\u7136\u662f $O(\\log n)$~~\u4e0d\u8fc7\u5e26\u4e00\u70b9\u5e38\u6570~~\u3002\n\n## 3\u3001\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u67e5\u8be2\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7531\u4e8e\u662f\u4fe1\u606f\u7684\u6574\u5408\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u7528\u5230\u5206\u5757\u601d\u60f3\uff0c\u6211\u5b9e\u5728\u662f\u4e0d\u60f3\u518d\u7801\u4e00\u904d\u4e86 qwq\u3002\n\n```cpp\nll query(ll q_x,ll q_y,ll l,ll r,ll p)\n{\n\tll res=0;\n\tif(q_x<=l&&r<=q_y)return ans[p];\n\tll mid=(l+r)>>1;\n\tpush_down(p,l,r);\n\tif(q_x<=mid)res+=query(q_x,q_y,l,mid,ls(p));\n\tif(q_y>mid) res+=query(q_x,q_y,mid+1,r,rs(p));\n\treturn res;\n}\n```\n\n\u6700\u540e\u8d34~~\u9ad8\u6e05\u65e0\u7801\u7684~~\u6807\u7a0b\uff1a\n\n\uff08\u8fd8\u6709\uff0c\u8f93\u5165\u5927\u6570\u636e\u4e00\u5b9a\u4e0d\u8981\u7528\u4e0d\u52a0\u4f18\u5316\u7684 `cin/cout` \u554a\uff09\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define MAXN 1000001\n#define ll long long\nusing namespace std;\nunsigned ll n,m,a[MAXN],ans[MAXN<<2],tag[MAXN<<2];\ninline ll ls(ll x)\n{\n    return x<<1;\n}\ninline ll rs(ll x)\n{\n    return x<<1|1;\n}\nvoid scan()\n{\n    cin>>n>>m;\n    for(ll i=1;i<=n;i++)\n    scanf(\"%lld\",&a[i]);\n}\ninline void push_up(ll p)\n{\n    ans[p]=ans[ls(p)]+ans[rs(p)];\n}\nvoid build(ll p,ll l,ll r)\n{\n    tag[p]=0;\n    if(l==r){ans[p]=a[l];return ;}\n    ll mid=(l+r)>>1;\n    build(ls(p),l,mid);\n    build(rs(p),mid+1,r);\n    push_up(p);\n} \ninline void f(ll p,ll l,ll r,ll k)\n{\n    tag[p]=tag[p]+k;\n    ans[p]=ans[p]+k*(r-l+1);\n}\ninline void push_down(ll p,ll l,ll r)\n{\n    ll mid=(l+r)>>1;\n    f(ls(p),l,mid,tag[p]);\n    f(rs(p),mid+1,r,tag[p]);\n    tag[p]=0;\n}\ninline void update(ll nl,ll nr,ll l,ll r,ll p,ll k)\n{\n    if(nl<=l&&r<=nr)\n    {\n        ans[p]+=k*(r-l+1);\n        tag[p]+=k;\n        return ;\n    }\n    push_down(p,l,r);\n    ll mid=(l+r)>>1;\n    if(nl<=mid)update(nl,nr,l,mid,ls(p),k);\n    if(nr>mid) update(nl,nr,mid+1,r,rs(p),k);\n    push_up(p);\n}\nll query(ll q_x,ll q_y,ll l,ll r,ll p)\n{\n    ll res=0;\n    if(q_x<=l&&r<=q_y)return ans[p];\n    ll mid=(l+r)>>1;\n    push_down(p,l,r);\n    if(q_x<=mid)res+=query(q_x,q_y,l,mid,ls(p));\n    if(q_y>mid) res+=query(q_x,q_y,mid+1,r,rs(p));\n    return res;\n}\nint main()\n{\n    ll a1,b,c,d,e,f;\n    scan();\n    build(1,1,n);\n    while(m--)\n    {\n        scanf(\"%lld\",&a1);\n        switch(a1)\n        {\n            case 1:{\n                scanf(\"%lld%lld%lld\",&b,&c,&d);\n                update(b,c,1,n,1,d);\n                break;\n            }\n            case 2:{\n                scanf(\"%lld%lld\",&e,&f);\n                printf(\"%lld\\n\",query(e,f,1,n,1));\n                break;\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1518878156,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "Senior Data Structure \u00b7 \u6d45\u8c08\u7ebf\u6bb5\u6811\uff08Segment Tree\uff09"
    },
    {
        "content": "  # \u6765\u6c34\u4e00\u6ce2\u9898\u89e3\n------------------------------------------------------------\n\u6765\u9996\u5148\u7b80\u4ecb\u4e00\u4e0b\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u6bd4\u8f83~~niubi~~\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7c7b\u4f3c\u672c\u9898\uff0c\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u627e\u7b49\u64cd\u4f5c\uff0c\u5176\u4f59\u8fd8\u6709\u533a\u95f4\u4e58\uff0c\u533a\u95f4\u6700\u5927\u503c\uff0c\u751a\u81f3\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\u7b49\u7b49\u597d\u591a\u64cd\u4f5c\u2026\u2026\n\n\n---------------------------\n\n-------------------\n\n\u8c8c\u4f3c\u957f\u8fd9\u6837\uff1a\uff08\u56fe\u7247\u6765\u81ea\u4e92\u8054\u7f51\uff09\n![](http://p5.so.qhimgs1.com/t019e2060978883abeb.png)\n\n~~\u76ae~~\n\n\n-\u7ebf\u6bb5\u6811\u7684\u5b58\u50a8\n---\n\u7ebf\u6bb5\u6811\u8981\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\n```\nstruct tree{\n    int l,r;\n    long long pre,add;\n}t[4*maxn+2];\n```\npre\u4ee3\u8868\u8be5\u8282\u70b9\u7ef4\u62a4\u7684\u503c\uff0cl\uff0cr\u4ee3\u8868\u8be5\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u8303\u56f4\n\u81f3\u4e8eadd\u6d89\u53ca\u5230\u4e00\u4e2a\u53eb\u61d2\u6807\u8bb0\u7684\u4e1c\u897f\uff0c\u540e\u9762\u4f1a\u8bf4\u2026\u2026\n\n\n-\u5efa\u6811\n--\n\u6240\u8c13\u5efa\u6811\uff0c\u5c31\u662f\u628a\u6570\u7ec4a[1-n],\u653e\u5230\u7ebf\u6bb5\u6811\u4e2d\n\n\u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u4ece\u56fe\u91cc\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff08\u7f16\u53f7\u4e3ap\uff09\uff0c\u4ed6\u7684\u5de6\u513f\u5b50\u4e3a2*p\uff0c\u53f3\u513f\u5b50\u4e3a2*p+1\uff0cso\u4f1f\u5927\u7684\u5efa\u6811\u64cd\u4f5c\u5c31\u51fa\u73b0\u4e86\n```\nvoid bulid(int p,int l,int r){\n    t[p].l=l;t[p].r=r;//\u4ee5p\u4e3a\u7f16\u53f7\u7684\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u4e3al\u5230r\n    if(l==r){//l=r\u7684\u8bdd\uff0c\u8fd9\u4e2a\u533a\u95f4\u5c31\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u76f4\u63a5\u8ba9\u533a\u95f4\u7ef4\u62a4\u7684\u503c\u7b49\u4e8ea[i]\n        t[p].pre=a[l];\n        return;\n    }//\u5426\u5219\u7ef4\u62a4\u7684\u503c\u7b49\u4e8e\u5de6\u513f\u5b50\u52a0\u53f3\u513f\u5b50\n    int mid=l+r>>1;\n    bulid(p*2,l,mid);\n    bulid(p*2+1,mid+1,r);\n    t[p].pre=t[p*2].pre+t[p*2+1].pre;\n} \n```\n-\u61d2\u6807\u8bb0\n---\n~~\u61d2\u6807\u8bb0\u662f\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u4e3a\u4ec0\u4e48\u53eb\u61d2\u6807\u8bb0\uff0c\u56e0\u4e3a\u5b83\u6bd4\u8f83\u61d2~~\n\u61d2\u6807\u8bb0\u7684\u7cbe\u9ad3\u5c31\u662f\u6253\u6807\u8bb0\u548c\u4e0b\u4f20\u64cd\u4f5c\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u505a\u7684\u64cd\u4f5c\u662f\u533a\u95f4\u52a0\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5728\u533a\u95f4\u8fdb\u884c\u4fee\u6539\u65f6\u4e3a\u8be5\u533a\u95f4\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u5c31\u4e0d\u5fc5\u518d\u4fee\u6539\u4ed6\u7684\u513f\u5b50\u6240\u7ef4\u62a4\u533a\u95f4\uff0c\u7b49\u5230\u8981\u4f7f\u7528\u8be5\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u503c\u65f6\uff0c\u518d\u5c06\u61d2\u6807\u8bb0\u4e0b\u653e\u5373\u53ef\uff0c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u5c06\u61d2\u6807\u8bb0\u4e0b\u4f20\uff0c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\n```\nvoid spread(int p){\n    if(t[p].add){//\u5982\u679c\u61d2\u6807\u8bb0\u4e0d\u4e3a0\uff0c\u5c31\u5c06\u5176\u4e0b\u4f20\uff0c\u4fee\u6539\u5de6\u53f3\u513f\u5b50\u7ef4\u62a4\u7684\u503c\n        t[p*2].pre+=t[p].add*(t[p*2].r-t[p*2].l+1);\n        t[p*2+1].pre+=t[p].add*(t[p*2+1].r-t[p*2+1].l+1);\n        t[p*2].add+=t[p].add;//\u4e3a\u8be5\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u6253\u4e0a\u6807\u8bb0\n        t[p*2+1].add+=t[p].add;\n        t[p].add=0;//\u4e0b\u4f20\u4e4b\u540e\u5c06\u8be5\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u6e050\n    }\n}\n```\n\n-\u533a\u95f4\u4fee\u6539\n---\n\u8003\u8651\u5c06\u4e00\u4e2a\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6839\u8282\u70b9\u4e0d\u65ad\u5411\u4e0b\u67e5\u627e\uff0c\u5f53\u53d1\u73b0\u6211\u4eec\u8981\u4fee\u6539\u7684\u533a\u95f4\u8986\u76d6\u4e86\u5f53\u524d\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u7ed9\u4fee\u6539\uff0c\u5e76\u6253\u4e0a\u61d2\u6807\u8bb0\uff08\u7531\u4e8e\u61d2\u6807\u8bb0\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u4e0d\u5fc5\u518d\u4fee\u6539\u4ed6\u7684\u513f\u5b50\u8282\u70b9\uff09\uff0c\u5426\u5219\u4e0b\u4f20\u61d2\u6807\u8bb0\uff0c\u7ee7\u7eed\u5411\u4e0b\u627e\n```\nvoid change(int p,int x,int y,int z){\n    if(x<=t[p].l && y>=t[p].r){//\u88ab\u8986\u76d6\u7684\u8bdd\uff0c\u5c31\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\n        t[p].pre+=(long long)z*(t[p].r-t[p].l+1);\n        t[p].add+=z;//\u6253\u4e0a\u61d2\u6807\u8bb0\n        return;\n    }\n    spread(p);//\u5982\u679c\u53d1\u73b0\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u90a3\u5c31\u9700\u8981\u7ee7\u7eed\u5411\u4e0b\u627e\uff0c\u8003\u8651\u513f\u5b50\u6240\u7ef4\u62a4\u7684\u533a\u95f4\u53ef\u80fd\u56e0\u4e3a\u61d2\u6807\u8bb0\u7684\u5b58\u5728\u800c\u6ca1\u6709\u4fee\u6539\uff0c\u56e0\u6b64\u5c06\u61d2\u6807\u8bb0\u4e0b\u653e\n    int mid=t[p].l+t[p].r>>1;\n    if(x<=mid) change(p*2,x,y,z);//\u5982\u679c\u8981\u4fee\u6539\u7684\u533a\u95f4\u8986\u76d6\u4e86\u5de6\u513f\u5b50\uff0c\u5c31\u4fee\u6539\u5de6\u513f\u5b50\n    if(y>mid) change(p*2+1,x,y,z);//\u53f3\u513f\u5b50\u540c\u7406\n    t[p].pre=t[p*2].pre+t[p*2+1].pre;//\u6700\u7ec8\u7ef4\u62a4\u7684\u503c\u7b49\u4e8e\u5de6\u513f\u5b50\u7684\u503c+\u53f3\u513f\u5b50\u7684\u503c   \n}\n```\n-\u533a\u95f4\u67e5\u8be2\n---\n\u8003\u8651\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u4f9d\u65e7\u662f\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u67e5\u627e\uff0c\u5f53\u53d1\u73b0\u8be5\u8282\u70b9\u88ab\u8986\u76d6\u65f6\uff0c\u5c31\u8fd4\u56de\u7ef4\u62a4\u7684\u503c\uff0c\u5426\u5219\u4e0b\u4f20\u61d2\u6807\u8bb0\uff0c\u67e5\u8be2\u5de6\u53f3\u513f\u5b50\uff0c\u7d2f\u52a0\u7b54\u6848\n```\nlong long ask(int p,int x,int y){\n    if(x<=t[p].l && y>=t[p].r) return t[p].pre;//\u5982\u679c\u88ab\u8986\u76d6\uff0c\u5c31\u8fd4\u56de\u7ef4\u62a4\u7684\u503c\n    spread(p);//\u4e0b\u4f20\u61d2\u6807\u8bb0\uff0c\u5e76\u67e5\u8be2\u5de6\u53f3\u513f\u5b50\n    int mid=t[p].l+t[p].r>>1;\n    long long ans=0;\n    if(x<=mid) ans+=ask(p*2,x,y);\n    if(y>mid) ans+=ask(p*2+1,x,y);//\u7d2f\u52a0\u7b54\u6848\uff0c\u8fd4\u56de\u5de6\u53f3\u513f\u5b50\u7684\u548c\n    return ans;\n}\n```\n\nAC\u4ee3\u7801\u6765\u4e00\u6ce2\n```\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=100010;\n\nint a[maxn+2];\n\nstruct tree{\n    int l,r;\n    long long pre,add;\n}t[4*maxn+2];\n\nvoid bulid(int p,int l,int r){\n    t[p].l=l;t[p].r=r;\n    if(l==r){\n        t[p].pre=a[l];\n        return;\n    }\n    int mid=l+r>>1;\n    bulid(p*2,l,mid);\n    bulid(p*2+1,mid+1,r);\n    t[p].pre=t[p*2].pre+t[p*2+1].pre;\n} \n\nvoid spread(int p){\n    if(t[p].add){\n        t[p*2].pre+=t[p].add*(t[p*2].r-t[p*2].l+1);\n        t[p*2+1].pre+=t[p].add*(t[p*2+1].r-t[p*2+1].l+1);\n        t[p*2].add+=t[p].add;\n        t[p*2+1].add+=t[p].add;\n        t[p].add=0;\n    }\n}\n\nvoid change(int p,int x,int y,int z){\n    if(x<=t[p].l && y>=t[p].r){\n        t[p].pre+=(long long)z*(t[p].r-t[p].l+1);\n        t[p].add+=z;\n        return;\n    }\n    spread(p);\n    int mid=t[p].l+t[p].r>>1;\n    if(x<=mid) change(p*2,x,y,z);\n    if(y>mid) change(p*2+1,x,y,z);\n    t[p].pre=t[p*2].pre+t[p*2+1].pre;   \n}\n\nlong long ask(int p,int x,int y){\n    if(x<=t[p].l && y>=t[p].r) return t[p].pre;\n    spread(p);\n    int mid=t[p].l+t[p].r>>1;\n    long long ans=0;\n    if(x<=mid) ans+=ask(p*2,x,y);\n    if(y>mid) ans+=ask(p*2+1,x,y);\n    return ans;\n}\n\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d\",&a[i]);\n    bulid(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int q,x,y,z;\n        scanf(\"%d\",&q);\n        if(q==1){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            change(1,x,y,z);\n        }\n        else {\n            scanf(\"%d%d\",&x,&y);\n            cout<<ask(1,x,y)<<endl;\n        }\n    }\n    return 0;\n}\n```\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\uff1a\n![](https://www.luogu.org/images/congratulation.png)",
        "postTime": 1533114501,
        "uid": 74872,
        "name": "\u5f52\u892f\u96fe\u5d4a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "UPD1:\u4e4b\u524d\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u8bba\u8bc1\u6709\u4e9b\u7b14\u8bef\uff0c\u5df2\u4fee\u6539\u3002\n\nUPD2:\u6dfb\u52a0\u4e86\u5bf9\u4e8e\u6c42\u548c\u516c\u5f0f\u7684\u6ce8\u91ca\u3002\uff08\u539f\u6765\u7684\u4e00\u5927\u5806\u4ee3\u7801\uff0c\u770b\u8d77\u6765\u5f88\u8be1\u5f02\u2026\u2026\uff09\n\n---\n\n[\u7ebf\u6bb5\u6811\u6a21\u677f\uff081\uff09](https://www.luogu.org/problemnew/show/3372)\n\n\u9898\u610f\u8981\u6c42\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u3002\n\n\u5f53\u7136\uff0c\u9898\u76ee\u540d\u5b57\u544a\u8bc9\u6211\u4eec\u8981\u7528\u7ebf\u6bb5\u6811\u3002\u4f46\u662f\u7ebf\u6bb5\u6811\u5f88\u957f\uff0c\u5bb9\u6613\u51fa\u73b0\u95ee\u9898\uff0c\u800c\u4e14\u8dd1\u5f97\u7a0d\u6162\uff0c\u6240\u4ee5\u5c31\u6709dalao\u5f00\u59cbyy\uff1a\u53ef\u4e0d\u53ef\u4ee5\u8ba9\u6811\u72b6\u6570\u7ec4\u652f\u6301\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\u5462\uff1f\n\n\n## \u4e8e\u662f\u4f1f\u5927\u7684\u201c\u8d85\u7ea7\u6811\u72b6\u6570\u7ec4\u201d\u6a2a\u7a7a\u51fa\u4e16\u4e86\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u770b\u6811\u72b6\u6570\u7ec4\u662f\u5982\u4f55\u652f\u6301\u533a\u95f4\u4fee\u6539\u7684\uff1a\n\n\u8bbetree[i]=a[i]-a[i-1]\uff08\u5dee\u5206\uff09\uff0c\u90a3\u4e48\u5bb9\u6613\u5f97\u5230\uff1a\n\n***tree[1]+tree[2]+\u2026\u2026+tree[i]=a[i]***\u8fd9\u4e2a\u516c\u5f0f\n\n\u6240\u4ee5\uff0c\u53ea\u9700\u8981\u7ef4\u62a4tree\u6570\u7ec4\u5c31\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e86\u3002\n\n\n**\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u8fd9\u6837\uff0c\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u533a\u95f4\u67e5\u8be2\u5462\uff1f**\n\n\u6211\u4eec\u5df2\u7ecf\u63a8\u51fa\u4e86\u4e00\u4e2a\u516c\u5f0f\uff1a\n\n```cpp\ntree[1]+tree[2]+\u2026\u2026tree[i]=a[i]\n```\n\u90a3\u4e48\uff0c\u5bf9\u4e8e1\u5230r\u7684\u533a\u95f4\u548c\uff0c\u5373\u4e3a\uff1a\n\n```cpp\n a[1]+a[2]+\u2026\u2026+a[r-1]+a[r]\n//\u7528\u4e0a\u65b9\u516c\u5f0f\u63a8\u5bfc\u5f97\u51fa\n=tree[1]+(tree[1]+tree[2])+\u2026\u2026+(tree[1]+\u2026\u2026+tree[r])\n//\u6839\u636e\u52a0\u6cd5\u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b\uff1a\n=(tree[1]*(r))+(tree[2]*(r-1))+\u2026\u2026(tree[r]*1)\n//\u90a3\u4e48\uff1a\n=r*(tree[1]+tree[2]+\u2026\u2026+tree[r])-(tree[1]*0+tree[2]*1+\u2026\u2026+tree[r]*(r-1))\n```\n\u770b\u5230\u8fd9\u91cc\uff0c\u662f\u4e0d\u662f\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\u5462\uff1f\n\n\u5bf9\u4e8ea\u7684\u6811\u72b6\u6570\u7ec4(\u5dee\u5206)tree\uff0c\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u6811\u72b6\u6570\u7ec4tree1\u4f7f\u5f97\uff1a\n\n`tree1[i]=tree[i]*(i-1)`\n\n\u4e4b\u540e\uff0cx\u5230y\u7684\u533a\u95f4\u548c\u5373\u4e3a\uff1a\n\n`(y\\*getsum(tree,y)-(x-1)\\*getsum(tree,x-1))-(getsum(tree1,y)-getsum(tree1,x-1))`\n\n```\nTips:\n\u56e0\u4e3a\u6c42\u533a\u95f4\u548c\u6ee1\u8db3\u533a\u95f4\u52a0\u6cd5\uff0c\u6240\u4ee5Sum(L,R)=Sum(1,R)-Sum(1,L-1)\uff0c\u6240\u4ee5\u6709\u4e0a\u8ff0\u516c\u5f0f\u3002\n```\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u66f4\u65b0\u64cd\u4f5c\u4e5f\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u7ec6\u5fae\u8c03\u6574\uff0c\u8be6\u7ec6\u7684\u5c31\u770b\u4ee3\u7801\u5427\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,tree[100005],tree1[100005];//\u9898\u76ee\u8981\u6c42longlong\ninline void add(long long*z,long long x,long long num)\n{\n    while(x<=n)\n    {\n        z[x]+=num;\n        x+=x&(-x);\n    }\n}\ninline long long getsum(long long*z,long long x)\n{\n    long long sum=0;\n    while(x>0)\n    {\n        sum+=z[x];\n        x-=x&(-x);\n    }\n    return sum;\n}\nint main()\n{\n    cin.sync_with_stdio(false);\n    cin>>n>>m;\n    long long a,b=0;\n    for(long long i=1;i<=n;i++)\n    {\n        cin>>a;\n        b=a-b;\n        add(tree,i,b);\n        add(tree1,i,(i-1)*b);\n        b=a;\n    }\n    for(long long i=1;i<=m;i++)\n    {\n        int t,x,y,z;\n        cin>>t;\n        if (t==1)\n        {\n            cin>>x>>y>>z;\n            add(tree,x,z);\n            add(tree,y+1,-z);\n            add(tree1,x,z*(x-1));\n            add(tree1,y+1,-z*y);//\u6b64\u5904\u4e3a\u6838\u5fc3\uff0c\u8054\u7cfb\u4e0a\u65b9\u7684\u516c\u5f0f\uff0c\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4fee\u6539\u3002\n        }\n        else\n        {\n            cin>>x>>y;\n            cout<<(y*getsum(tree,y)-(x-1)*getsum(tree,x-1))-(getsum(tree1,y)-getsum(tree1,x-1))<<endl;\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1513254828,
        "uid": 41953,
        "name": "\u5188\u5d0e\u68a6\u7f8e",
        "ccfLevel": 0,
        "title": "Super Fenwick Tree"
    },
    {
        "content": "\u53bb\u4e86wc2019\u7684\u540c\u5b66\u5e94\u8be5\u5bf9 **\u6307\u4ee4\u96c6** \u6709\u4e9b\u5370\u8c61\uff0c\u6ca1\u53bb\u7684\u540c\u5b66 ( \u6bd4\u5982~~\u6211~~ ) \u53ef\u80fd\u4e5f\u901a\u8fc7\u4e00\u4e9b\u9014\u5f84\u4e86\u89e3\u5230\u4e86\u8fd9\u4e2a\u66b4\u529b\u8e29\u6807\u7a0b\u7684\u6bd2\u7624 ( \u636e\u8bf4\u73b0\u573a\u8e29 `Ynoi\u4e94\u5f69\u6591\u6593\u7684\u4e16\u754c`  ) \u3002\u4f46\u662f\u7531\u4e8e\u6211\u592a\u5f31\uff0c\u5b9e\u5728\u8fc7\u4e0d\u4e86\u90a3\u9053\u9898 **dllxl Orz** \uff0c\u6240\u4ee5\u6211\u5c31\u6765\u62ff\u8fd9\u9053\u9898\u7ec3\u624b\u4e86\u3002\n\n---\n\n## \u4e00\u3001\u6307\u4ee4\u96c6\u662f\u4ec0\u4e48\uff1f\n\n\u5176\u5b9e\u5c31\u662f\u538b\u4f4d\uff0c\u5e38\u7528\u7684\u662f\u538b256\u4f4d\u3002\u4e5f\u6709\u80fd\u538b512\u4f4d\u7684\uff0c\u4f46\u5927\u90e8\u5206\u60c5\u51b5\u4e0d\u652f\u6301 ( \u786c\u4ef6 + \u8f6f\u4ef6 ) \u3002\n\n## \u4e8c\u3001\u5b83\u4e3a\u4ec0\u4e48\u5feb\uff1f\n\n\u5c31\u50cf\u538b\u4f4d\u9ad8\u7cbe\u4f1a\u6bd4\u88f8\u9ad8\u7cbe\u5feb\uff0c `bitset` \u6bd4 `bool\u6570\u7ec4` \u5feb\u4e00\u6837\uff0c\u4f60\u628a8\u4e2a32\u4f4d\u7684 `int` \u538b\u6210\u4e00\u4e2a256\u4f4d\u7684\u73a9\u610f\u513f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u770b\u6210\u662f\u540c\u65f6\u5bf98\u4e2a `int` \u8fdb\u884c\u64cd\u4f5c ( \u4f46\u5176\u5b9e\u5e76\u4e0d\u662f\u8fd9\u6837 ) \uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u5e38\u6570\u4f1a\u662f\u539f\u6765\u7684 $\\frac{1}{8}$ ( \u4f46\u5176\u5b9e\u505a\u4e0d\u5230 $\\frac{1}{8}$ ) \u3002\n\n## \u4e09\u3001\u5b83\u8981\u600e\u4e48\u7528\uff1f\n\n~~\u8bf7\u81ea\u884c\u6478\u7d22~~\n\n\u9996\u5148\u4f60\u9700\u8981 `immintrin.h` \u5e93\uff0c~~\u91cc\u9762\u5565\u90fd\u6709~~\u7136\u540e\u518d\u5728\u7a0b\u5e8f\u524d\u52a0\u4e0a `#pragma GCC target(\"avx,avx2\")` \uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u628a\u4f60\u7684 `int` \u554a `long long` \u554a\u4ec0\u4e48\u7684\u538b\u6210 `__m256i` \uff0c\u628a `float` \u538b\u6210 `__m256` \uff0c\u8fd8\u80fd\u628a `double` \u538b\u6210 `__m256d` \u3002\n\n~~\u4ec0\u4e48\u4f60\u95ee\u6211\u5177\u4f53\u600e\u4e48\u505a\uff1f\u6211\u4e0d\u77e5\u9053\u554a.jpg~~\n\n---\n\n\u8fd9\u91cc\u662f\u8fde\u5feb\u8bfb\u90fd\u6ca1\u7528\u7684$O\\left(n^2\\right)$\u66b4\u529b[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16093890)\u3002\n\n\u6700\u540e\u9644\u4e0a\u8fd9\u9053\u9898\u7684\u7a0b\u5e8f\uff0c\u60f3\u5b66\u5b66\u6307\u4ee4\u96c6\u7684\u53ef\u4ee5\u770b\u770b\uff1a\n```cpp\n#pragma GCC optimize(\"Ofast,fast-math\")\n#pragma GCC target(\"avx,avx2\")\n#include <cstdio>\n#include <immintrin.h>\n\nint n,m,num,x[5],opt,p,q,k;\n__m256i a[25010];\n\ninline void add(int l,int r,int v)\n{\n    while(((l-1)&3)&&l<=r)((long long*)(a+(l>>2)+1))[(l&3)-1]+=v,++l;\n    if(l==r+1)return;\n    while((r&3)&&l<=r)((long long*)(a+(r>>2)+1))[(r&3)-1]+=v,--r;\n    if(l==r+1)return;\n    l=(l>>2)+1,r>>=2;\n    __m256i s=_mm256_set_epi64x(v,v,v,v);\n    while(l<=r)a[l]=_mm256_add_epi64(a[l],s),++l;\n}\n\ninline long long query(int l,int r)\n{\n    long long ans(0);\n    while(((l-1)&3)&&l<=r)ans+=((long long*)(a+(l>>2)+1))[(l&3)-1],++l;\n    if(l==r+1)return ans;\n    while((r&3)&&l<=r)ans+=((long long*)(a+(r>>2)+1))[(r&3)-1],--r;\n    if(l==r+1)return ans;\n    l=(l>>2)+1,r>>=2;\n    __m256i s=_mm256_set_epi64x(0,0,0,0);\n    while(l<=r)s=_mm256_add_epi64(a[l],s),++l;\n    for(int i=0;i<4;++i)\n        ans+=((long long*)&s)[i];\n    return ans;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);num=n>>2;\n    for(int i=1;i<=num;++i)\n    {\n        for(int j=1;j<=4;++j)\n            scanf(\"%d\",x+j);\n        a[i]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]);\n    }\n    for(int i=1;i<=(n&3);++i)\n        scanf(\"%d\",x+i);\n    a[++num]=_mm256_set_epi64x(x[4],x[3],x[2],x[1]);\n    \n    while(m--)\n    {\n        scanf(\"%d%d%d\",&opt,&p,&q);\n        if(opt==1)\n            scanf(\"%d\",&k),add(p,q,k);\n        else\n            printf(\"%lld\\n\",query(p,q));\n    }\n    return 0;\n}\n```\n\u8fd9\u9053\u9898\u8981\u5f00 `long long` \uff0c\u5982\u679c\u662f `int` \u7684\u8bdd\u7a0b\u5e8f\u7b2c\u4e00\u53e5\u7684 `Ofast` \u4f18\u5316\u53bb\u6389\u4e5f\u80fd\u8fc7\uff01\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u5982\u679c\u4f60\u4ece\u8fd9\u7bc7\u9898\u89e3\u4e2d\u5b66\u5230\u4e86\u4e9b\u4e1c\u897f\uff0c\u8bf7\u52a8\u52a8\u624b\u5e2e\u5fd9\u70b9\u8d5e\uff0c\u8c22\u8c22\u5566\uff01",
        "postTime": 1549460399,
        "uid": 126486,
        "name": "yurzhang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\n~~\u60f3\u8fb9\u542c\u6b4c\u8fb9\u770b\u7b97\u6cd5\u7684\u53ef\u4ee5\u53bb[\u8fd9\u91cc](https://www.cnblogs.com/jason2003/p/9676729.html)~~\n\n**\u7ebf\u6bb5\u6811\u662f\u4ec0\u4e48\uff1f\uff1f\u7ebf\u6bb5\u6811\u600e\u4e48\u5199\uff1f\uff1f**\n\n\u5982\u679c\u4f60\u5728\u8003\u63d0\u9ad8\u7ec4\u524d\u4e00\u5929\u8fd8\u5728\u95ee\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u4f1a\u4e0e\u4e00\u7b49\u5956\u5931\u4e4b\u4ea4\u81c2\uff1b\u5982\u679c\u4f60\u8fd8\u5728\u51b2\u51fb\u666e\u53ca\u7ec4\u4e00\u7b49\u5956\uff0c\u90a3\u4e48\u8fd9\u7bc7\u535a\u5ba2\u4f1a\u6d6a\u8d39\u4f60\u4eba\u751f\u4e2d\u5b9d\u8d35\u76845~20\u5206\u949f\u3002\n\n\u4e0a\u9762\u4e24\u53e5\u8bdd\u663e\u800c\u6613\u89c1\uff0c\u7ebf\u6bb5\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u4e00\u4e2a\u4ece\u840c\u65b0\u5230\u6b63\u5f0fOI\u9009\u624b\u7684\u8fc7\u6e21\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7b97\u6cd5\uff0c\u4e5f\u662f\u4e00\u4e2a\u5bf9\u4e8e\u840c\u65b0\u6765\u8bf4\u8f83\u96be\u7684\u7b97\u6cd5\u3002\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u6211\u5b66\u4e60\u4e86\u8fd9\u4e2a\u7b97\u6cd55\u904d\u5de6\u53f3\u624d\u6709\u52c7\u6c14\u5199\u7684\u8fd9\u7bc7\u535a\u5ba2\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8eOI\u6b63\u5f0f\u9009\u624b\u6765\u8bf4\uff0c\u7ebf\u6bb5\u6811\u4e0d\u662f\u7b97\u6cd5\uff0c\u5e94\u8be5\u662f\u4e00\u79cd\u5de5\u5177\u3002\u5979\u80fd\u628a\u4e00\u4e9b\u5bf9\u4e8e\u533a\u95f4\uff08\u6216\u8005\u7ebf\u6bb5\uff09\u7684\u4fee\u6539\u3001\u7ef4\u62a4\uff0c\u4eceO(N)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u6210O\uff08logN\uff09\u3002\n\n\u5e9f\u8bdd\u4e0d\u8bf4\uff0c\u8fd9\u7bc7\u535a\u5ba2\u4f1a\u5206\u4e3a\u56db\u90e8\uff1a\n\n**\u7b2c\u4e00\u90e8\uff1a\u7ebf\u6bb5\u6811\u6982\u5ff5\u5f15\u5165**\n\n**\u7b2c\u4e8c\u90e8\uff1a\u7b80\u5355(\u65e0pushdown\uff09\u7684\u7ebf\u6bb5\u6811**\n\n**\u7b2c\u4e09\u90e8\uff1a\u533a\u95f4+/-\u4fee\u6539\u4e0e\u67e5\u8be2**\n\n**\u7b2c\u56db\u90e8\uff1a\u533a\u95f4\u4e58\u9664\u4fee\u6539\u4e0e\u67e5\u8be2**\n\n **\u603b\u7ed3**\n\n**\u7b2c\u4e00\u90e8 \u6982\u5ff5\u5f15\u5165**\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u6211\u4eec\u4f1a\u7528\u4e00\u4e2a\u4e8c\u53c9\u6811\u6765\u8868\u793a\u3002\u6bd4\u5982\u8bf4\u4e00\u4e2a\u957f\u5ea6\u4e3a4\u7684\u7ebf\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837\uff1a\n\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180919200225625-1602154608.png)\n\n \n\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u5982\u679c\u4f60\u8981\u8868\u793a\u7ebf\u6bb5\u7684\u548c\uff0c\u90a3\u4e48\u6700\u4e0a\u9762\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u7ebf\u6bb51~4\u7684\u548c\u3002\u6839\u7684\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u7ebf\u6bb5\u4e2d1~2\u7684\u548c\uff0c\u4e0e2~3\u7684\u548c\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u7136\u540e\u6211\u4eec\u8fd8\u53ef\u4ee5\u7684\u5230\u4e00\u4e2a\u6027\u8d28\uff1a\u8282\u70b9i\u7684\u6743\u503c=\u5979\u7684\u5de6\u513f\u5b50\u6743\u503c+\u5979\u7684\u53f3\u513f\u5b50\u6743\u503c\u3002\u56e0\u4e3a1~4\u7684\u548c\u5c31\u662f\u7b49\u4e8e1~2\u7684\u548c+2~3\u7684\u548c\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u6811\u4e86\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u7ed3\u6784\u4f53tree\uff0ctree[i].l\u548ctree[i].r\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u70b9\u4ee3\u8868\u7684\u7ebf\u6bb5\u7684\u5de6\u53f3\u4e0b\u6807\uff0ctree[i].sum\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u7ebf\u6bb5\u548c\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5979\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7f16\u53f7\u5206\u522b\u662f\u5979*2\u548c\u5979*2+1\n\n\u518d\u6839\u636e\u521a\u624d\u7684\u6027\u8d28\uff0c\u5f97\u5230\u5f0f\u5b50\uff1atree[i].sum=tree[i*2].sum+tree[i*2+1].sum;\u5c31\u53ef\u4ee5\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\u4e86\uff01\u4ee3\u7801\u5982\u4e0b\uff1a\n```\ninline void build(int i,int l,int r){//\u9012\u5f52\u5efa\u6811\n    tree[i].l=l;tree[i].r=r;\n    if(l==r){//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\n        tree[i].sum=input[l];\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(i*2,l,mid);//\u5206\u522b\u6784\u9020\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n    build(i*2+1,mid+1,r);\n    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;//\u521a\u624d\u6211\u4eec\u53d1\u73b0\u7684\u6027\u8d28return ;\n}\n```\n\u55ef\uff0c\u8fd9\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u6784\u5efa\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\u4e3a\u4ec0\u4e48\u8981\u5f00\u597d\u51e0\u500d\u7684\u5185\u5b58\u53bb\u50a8\u5b58\u4e00\u6761\u7ebf\u6bb5\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u8ba9\u8fd9\u4e2a\u8fc7\u5927\u7684\u6570\u7ec4\u5e72\u4e00\u4e9b\u5b9e\u4e8b\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u5b9e\u4e8b\u5462\uff1f\u8ba9\u6211\u4eec\u8fdb\u5165\u4e0b\u4e00\u90e8\uff08\u5728\u4f60\u770b\u61c2\u8fd9\u4e00\u90e8\u7684\u60c5\u51b5\u4e0b\uff09\n\n**\u7b2c\u4e8c\u90e8 \u7b80\u5355\uff08\u65e0pushdown\uff09\u7684\u7ebf\u6bb5\u6811**\n\n1\u3001\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n\n\u5176\u5b9e\u8fd9\u4e00\u7ae0\u5f00\u59cb\u624d\u662f\u771f\u6b63\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u8981\u7528\u7ebf\u6bb5\u6811\u5e72\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\uff08\u6216\u8005\u533a\u95f4\uff09\uff0c\u6bd4\u5982\u4f60\u60f3\u6c42\u51fa\u4e00\u4e2a1~100\u533a\u95f4\u4e2d\uff0c4~67\u8fd9\u4e9b\u5143\u7d20\u7684\u548c\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f\u6734\u7d20\u7684\u505a\u6cd5\u662ffor(i=4;i<=67;i++)  sum+=a[i]\uff0c\u8fd9\u6837\u56fa\u7136\u597d\uff0c\u4f46\u662f\u7b97\u5f97\u592a\u6162\u4e86\u3002\n\n\u6211\u4eec\u60f3\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\uff0c\u5148\u60f3\u4e00\u4e2a\u6bd4\u8f83\u597d\u753b\u56fe\u7684\u6570\u636e\uff0c\u6bd4\u5982\u4e00\u4e2a\u957f\u5ea6\u4e3a4\u7684\u533a\u95f4\uff0c\u5206\u522b\u662f1\u30012\u30013\u30014,\u6211\u4eec\u60f3\u6c42\u51fa\u7b2c1~3\u9879\u7684\u548c\u3002\u6309\u7167\u4e0a\u4e00\u90e8\u8bf4\u7684\uff0c\u6211\u4eec\u8981\u5efa\u51fa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d\u70b9\u6743\uff08\u4e5f\u5c31\u662f\u7ea2\u8272\uff09\u8868\u793a\u548c\uff1a\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180919203745885-314299579.png)\n\n\u7136\u540e\u6211\u4eec\u8981\u6c421~3\u7684\u548c\uff0c\u6211\u4eec\u5148\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u67e5\u8be2\uff0c\u53d1\u73b0\u5979\u7684\u5de6\u513f\u5b501~2\u8fd9\u4e2a\u533a\u95f4\u548c\u7b54\u6848\u533a\u95f41~3\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u6211\u4eec\u8dd1\u5230\u5de6\u513f\u5b50\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u533a\u95f41~2\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u7b54\u6848\u533a\u95f41~3\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\uff0c\u90a3\u5c31\u628a\u5979\u7684\u503c3\u8fd4\u56de\u3002\n\n\u6211\u4eec\u56de\u5230\u4e861~4\u533a\u95f4\uff0c\u53d1\u73b0\u5979\u7684\u53f3\u513f\u5b503~4\u533a\u95f4\u548c\u7b54\u6848\u533a\u95f41~3\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u6211\u4eec\u8d70\u52303~4\u533a\u95f4\n\n\u5230\u4e863~4\u533a\u95f4\uff0c\u6211\u4eec\u53d1\u73b0\u5979\u5e76\u6ca1\u6709\u5b8c\u5168\u5305\u542b\u5728\u7b54\u6848\u533a\u95f41~3\u91cc\u9762\uff0c\u4f46\u53d1\u73b0\u5979\u7684\u5de6\u513f\u5b503~3\u533a\u95f4\u548c1~3\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u90a3\u4e48\u4e45\u8d70\u52303~3\u533a\u95f4\n\n\u5230\u4e863~3\u533a\u95f4\uff0c\u53d1\u73b0\u5176\u88ab\u7b54\u6848\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u5c31\u8fd4\u56de\u5979\u7684\u503c3\u4e00\u76f4\u5230\u6700\u5f00\u59cb\n\n3~3\u533a\u95f4\u76843+1~2\u533a\u95f4\u76843=6\uff0c\u6211\u4eec\u77e5\u9053\u4e861~3\u533a\u95f4\u548c\u4e3a6.\n\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u4f60\u8fd9\u6837\u662f\u4e0d\u662f\u75af\u4e86\uff0c\u6211\u90a3\u811a\u90fd\u80fd\u7b97\u51fa1+2+3=6\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u9ebb\u70e6\uff1f\uff01\n\n\u56e0\u4e3a\u8fd9\u624d\u51e0\u4e2a\u6570\uff0c\u5982\u679c\u4e00\u767e\u4e07\u4e2a\u6570\uff0c\u8fd9\u6837\u65f6\u95f4\u4f1a\u5927\u5927\u589e\u5feb\u3002\n\n\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff0c\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u65b9\u6cd5\uff1a\n\n1\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u503c\n\n2\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u5de6\u513f\u5b50\n\n3\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u53f3\u513f\u5b50\n\n\u5199\u6210\u4ee3\u7801\uff0c\u5c31\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a\n```\ninline int search(int i,int l,int r){\n    if(tree[i].l>=l && tree[i].r<=r)//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u503c\n        return tree[i].sum;\n    if(tree[i].r<l || tree[i].l>r)  return 0;//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u548c\u76ee\u6807\u533a\u95f4\u6beb\u4e0d\u76f8\u5e72\uff0c\u8fd4\u56de0\n    int s=0;\n    if(tree[i*2].r>=l)  s+=search(i*2,l,r);//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u5de6\u513f\u5b50\n    if(tree[i*2+1].l<=r)  s+=search(i*2+1,l,r);//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u53f3\u513f\u5b50\n    return s;\n}\n```\n\n**\u5173\u4e8e\u90a3\u51e0\u4e2aif\u7684\u6761\u4ef6\u4e00\u5b9a\u8981\u770b\u6e05\u695a\uff0c\u6700\u597d\u80cc\u4e0b\u6765\uff0c\u4ee5\u9632\u8003\u573a\u4e0a\u8111\u62bd\u63a8\u9519\u3002**\n\n\u7136\u540e,\u6211\u4eec\u600e\u4e48\u4fee\u6539\u8fd9\u4e2a\u533a\u95f4\u7684\u5355\u70b9\uff0c\u5176\u5b9e\u8fd9\u4e2a\u76f8\u5bf9\u7b80\u5355\u5f88\u591a\uff0c\u4f60\u8981\u628a\u533a\u95f4\u7684\u7b2cdis\u4f4d\u52a0\u4e0ak\u3002\n\n\u90a3\u4e48\u4f60\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u770b\u8fd9\u4e2adis\u662f\u5728\u5de6\u513f\u5b50\u8fd8\u662f\u5728\u53f3\u513f\u5b50\uff0c\u5728\u54ea\u5f80\u54ea\u8dd1\uff0c\n\n\u7136\u540e\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u6309\u7167tree[i].sum=tree[i*2].sum+tree[i*2+1].sum\u7684\u539f\u5219\uff0c\u66f4\u65b0\u6240\u6709\u8def\u8fc7\u7684\u70b9\n\n\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u6211\u8fd8\u662f\u753b\u4e2a\u56fe\u5427\uff0c\u5176\u4e2d\u6df1\u84dd\u8272\u662f\u53bb\u7684\u8def\u5f84\uff0c\u6d45\u84dd\u8272\u662f\u8fd4\u56de\u7684\u8def\u5f84\uff0c\u56de\u6765\u65f6\u5019\u7ea2\u8272\u7684+\u6807\u8bb0\u5c31\u662f\u628a\u8fd9\u4e2a\u70b9\u52a0\u4e0a\u8fd9\u4e2a\u503c\u3002\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180919205930637-1487496115.png)\n\n\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u6210\u4ee3\u7801\uff0c\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n```\ninline void add(int i,int dis,int k){\n    if(tree[i].l==tree[i].r){//\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u627e\u5230\u4e86\n        tree[i].sum+=k;\n        return ;\n    }\n    if(dis<=tree[i*2].r)  add(i*2,dis,k);//\u5728\u54ea\u5f80\u54ea\u8dd1\n    else  add(i*2+1,dis,k);\n    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;//\u8fd4\u56de\u66f4\u65b0\n    return ;\n}\n```\n\n2\u3001\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\n\n\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u6211\u4eec\u7684\u601d\u8def\u5c31\u53d8\u4e3a\uff1a\u5982\u679c\u628a\u8fd9\u4e2a\u533a\u95f4\u52a0\u4e0ak\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u533a\u95f4\u6d82\u4e0a\u4e00\u4e2ak\u7684\u6807\u8bb0\uff0c\u7136\u540e\u5355\u70b9\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5c31\u4ece\u4e0a\u8dd1\u9053\u4e0b\uff0c\u628a\u6cbf\u8def\u7684\u6807\u8bb0\u52a0\u8d77\u6765\u5c31\u597d\u3002\n\n\u8fd9\u91cc\u9762\u7ed9\u533a\u95f4\u8d34\u6807\u8bb0\u7684\u65b9\u5f0f\u4e0e\u4e0a\u9762\u7684\u533a\u95f4\u67e5\u627e\u7c7b\u4f3c\uff0c\u539f\u5219\u8fd8\u662f\u90a3\u4e09\u6761\uff0c\u53ea\u4e0d\u8fc7\u7b2c\u4e00\u6761\uff1a\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u503c\u53d8\u4e3a\u4e86\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u8bb2\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0k\n\n\u5177\u4f53\u505a\u6cd5\u5f88\u50cf\uff0c\u8fd9\u91cc\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n```\ninline void add(int i,int l,int r,int k){\n    if(tree[i].l>=l && tree[i].r<=r){//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u8bb2\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0k\n        tree[i].sum+=k;\n        return ;\n    }\n    if(tree[i*2].r>=l)\n        add(i*2,l,r,k);\n    if(tree[i*2+1].l<=r)\n        add(i*2+1,l,r,k);\n}\n```\n\n\n\u7136\u540e\u5c31\u662f\u5355\u70b9\u67e5\u8be2\u4e86\uff0c\u8fd9\u4e2a\u66f4\u597d\u7406\u89e3\u4e86\uff0c\u5c31\u662fdis\u5728\u54ea\u5f80\u54ea\u8dd1\uff0c\u628a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u6807\u4ef7\u52a0\u4e0a\u5c31\u597d\u4e86\uff1a\n\n```\nvoid search(int i,int dis){\n    ans+=tree[i].num;//\u4e00\u8def\u52a0\u8d77\u6765\n    if(tree[i].l==tree[i].r)\n        return ;\n    if(dis<=tree[i*2].r)\n        search(i*2,dis);\n    if(dis>=tree[i*2+1].l)\n        search(i*2+1,dis);\n}\n```\n\n\u4e0d\u77e5\u4e0d\u89c9\uff0c\u8fd9\u7b2c\u4e8c\u7ae0\u5df2\u7ecf\u7ed3\u675f\u3002\u8fd9\u6837\u7684\u7b80\u5355\uff08\u539f\u8c05\u6211\u7528\u8fd9\u4e2a\u8bcd\uff09\u7ebf\u6bb5\u6811\uff0c\u8fd8\u53ef\u9664\u4e86\u6c42\u548c\uff0c\u8fd8\u53ef\u4ee5\u6c42\u533a\u95f4\u6700\u5c0f\u6700\u5927\u503c\uff0c\u8fd8\u53ef\u4ee5\u533a\u95f4\u67d3\u8272\u3002\n\n\u4f46\u662f\uff01\u8fd9\u6837\u7684\u7ebf\u6bb5\u6811\u5c55\u73b0\u4e0d\u51fa\u6765\u5979\u7684\u9b45\u529b\uff0c\u56e0\u4e3a\u533a\u95f4\u6c42\u548c\uff0c\u6811\u72b6\u6570\u7ec4\u6bd4\u5979\u5c11\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u5e38\u719f\u3002\u4e8c\u533a\u95f4\u6700\u503c\uff0cST\u7684\u90a3\u795e\u4e4e\u5176\u6280\u7684O\uff08n\uff09\u67e5\u8be2\u4e5f\u80fd\u5b8c\u7206\u5979\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u9b45\u529b\u8fd8\u6ca1\u6709\u5c55\u73b0\u51fa\u6765\uff0c\u5979\u6700\u7f8e\u4e3d\u7684\u5730\u65b9\uff1apushdown\u8fd8\u672a\u5c55\u73b0\u4e8e\u4e16\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u5bf9\u8fd9\u4e00\u7ae0\u5145\u8db3\u7684\u4e86\u89e3\uff0c\u5e76\u4e14\u80fd\u4e0d\u770b\u535a\u5ba2\u628a\u6d1b\u8c37\u4e0a\u6811\u72b6\u6570\u7ec4\u6a21\u677f1\u30012\u90fd\u80fd\u5199\u51fa\u6765\uff0c\u90a3\u4e48\u8bf7\u4f60\u8fdb\u5165\u4e0b\u4e00\u90e8\u3002\n\n \n\n**\u7b2c\u4e09\u90e8 \u8fdb\u9636\u7ebf\u6bb5\u6811**\n\n\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff0c\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u628a\u4e0a\u4e00\u7ae0\u91cc\u9762\u7684\u8fd9\u4e24\u4e2a\u6a21\u5757\u52a0\u5728\u4e00\u8d77\u5c31\u597d\u4e86\uff0c\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u4f60\u5927\u9519\u7279\u9519\u3002\n\n\u56e0\u4e3a\u5982\u679c\u5bf9\u4e8e1~4\u8fd9\u4e2a\u533a\u95f4\uff0c\u4f60\u628a1~3\u533a\u95f4+1\uff0c\u76f8\u5f53\u4e8e\u628a\u8282\u70b91~2\u548c3\u6807\u8bb0\uff0c\u4f46\u662f\u5982\u679c\u4f60\u67e5\u8be22~4\u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u52a0\u7684\u65f6\u6ca1\u6709\u6807\u8bb0\u76842\u8282\u70b9\u548c\u6ca1\u6709\u6807\u8bb0\u76843~4\u8282\u70b9\u52a0\u4e0a\u53bb\uff0c\u7ed3\u679c\u5f53\u7136\u662f\u9519\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u5019pushdown\u7684\u4f5c\u7528\u5c31\u663e\u73b0\u51fa\u6765\u4e86\u3002\n\n\u4f60\u4f1a\u60f3\u5230\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u8981\u67e5\u76842\u8282\u70b9\u57281~2\u533a\u95f4\u7684\u91cc\u9762\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u628a1~2\u533a\u95f4\u6807\u8bb0\u7684\u90a3\u4e2a+1\u7ed9\u63a8\u4e0b\u53bb\u8fd9\u6837\u5c31\u80fd\u987a\u5229\u5730\u52a0\u4e0a\u4e86\u3002\n\u600e\u4e48\u8bb0\u5f55\u8fd9\u4e2a\u6807\u8bb0\u5462\uff1f\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u201c\u61d2\u6807\u8bb0\u201dlazytage\uff0c\u6765\u8bb0\u5f55\u8fd9\u4e2a\u533a\u95f4\n\n\u533a\u95f4\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u539f\u5219\uff1a\n\n1\u3001\u5982\u679c\u5f53\u524d\u533a\u95f4\u88ab\u5b8c\u5168\u8986\u76d6\u5728\u76ee\u6807\u533a\u95f4\u91cc\uff0c\u8bb2\u8fd9\u4e2a\u533a\u95f4\u7684sum+k*(tree[i].r-tree[i].l+1)\n\n2\u3001\u5982\u679c\u6ca1\u6709\u5b8c\u5168\u8986\u76d6\uff0c\u5219\u5148\u4e0b\u4f20\u61d2\u6807\u8bb0\n\n3\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u5de6\u513f\u5b50\n\n4\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u641c\u7d22\u53f3\u513f\u5b50\n\n\n \u7136\u540e\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5c06\u8fd9\u4e2a\u61d2\u6807\u8bb0\u4e0b\u4f20\u5c31\u597d\u4e86\uff0c\u4e0b\u9762\u56fe\u89e3\u4e00\u4e0b\uff1a\n\n\u5982\u56fe\uff0c\u533a\u95f41~4\u5206\u522b\u662f1\u30012\u30013\u30014\uff0c\u6211\u4eec\u8981\u628a1~3\u533a\u95f4+1\u3002\u56e0\u4e3a1~2\u533a\u95f4\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u6240\u4ee5\u5c06\u5176+2\uff0c\u5e76\u5c06\u7d2b\u8272\u7684lazytage+1\uff0c3\u533a\u95f4\u540c\u7406\n\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180920195821587-4845808.png)\n\n\u6ce8\u610f\u6211\u4eec\u5904\u7406\u5b8c\u8fd9\u4e9b\u4ee5\u540e\uff0c\u8fd8\u662f\u8981\u6309\u7167tree[i].sum=tree[i*2].sum+tree[i*2+1].sum\u7684\u539f\u5219\u8fd4\u56de\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nvoid add(int i,int l,int r,int k)\n{\n    if(tree[i].r<=r && tree[i].l>=l)//\u5982\u679c\u5f53\u524d\u533a\u95f4\u88ab\u5b8c\u5168\u8986\u76d6\u5728\u76ee\u6807\u533a\u95f4\u91cc\uff0c\u8bb2\u8fd9\u4e2a\u533a\u95f4\u7684sum+k*(tree[i].r-tree[i].l+1)\n    {\n        tree[i].sum+=k*(tree[i].r-tree[i].l+1);\n        tree[i].lz+=k;//\u8bb0\u5f55lazytage\n        return ;\n    }\n    push_down(i);//\u5411\u4e0b\u4f20\u9012\n    if(tree[i*2].r>=l)\n        add(i*2,l,r,k);\n    if(tree[i*2+1].l<=r)\n        add(i*2+1,l,r,k);\n    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;\n    return ;\n}\n```\n\n\u5176\u4e2d\u7684pushdown\uff0c\u5c31\u662f\u628a\u81ea\u5df1\u7684lazytage\u5f52\u96f6\uff0c\u5e76\u7ed9\u81ea\u5df1\u7684\u513f\u5b50\u52a0\u4e0a\uff0c\u5e76\u8ba9\u81ea\u5df1\u7684\u513f\u5b50\u52a0\u4e0ak*(r-l+1)\n```\nvoid push_down(int i)\n{\n    if(tree[i].lz!=0)\n    {\n        tree[i*2].lz+=tree[i].lz;//\u5de6\u53f3\u513f\u5b50\u5206\u522b\u52a0\u4e0a\u7236\u4eb2\u7684lz\n        tree[i*2+1].lz+=tree[i].lz;\n        init mid=(tree[i].l+tree[i].r)/2;\n        tree[i*2].data+=tree[i].lz*(mid-tree[i*2].l+1);//\u5de6\u53f3\u5206\u522b\u6c42\u548c\u52a0\u8d77\u6765\n        tree[i*2+1].data+=tree[i].lz*(tree[i*2+1].r-mid);\n        tree[i].lz=0;//\u7236\u4eb2lz\u5f52\u96f6\n    }\n    return ;\n}\n```\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u548c\u4e0a\u4e00\u7ae0\u7684\u51e0\u4e4e\u4e00\u6837\uff0c\u5c31\u662f\u4e5f\u8981\u50cf\u4fee\u6539\u4e00\u6837\u52a0\u5165pushdown\uff0c\u8fd9\u91cc\u7528\u56fe\u6a21\u62df\u4e00\u4e0b\u3002\u6211\u4eec\u8981\u67e5\u8be22~4\u533a\u95f4\u7684\u548c\uff0c\u8fd9\u662f\u67e5\u8be2\u524d\u7684\u60c5\u51b5\uff0c\u6240\u6709\u7d2b\u8272\u7684\u4ee3\u8868lazytage\n\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180921131618196-79075472.png)\n\n\u7136\u540e\uff0c\u6211\u4eec\u67e5\u5230\u533a\u95f41~2\u65f6\uff0c\u53d1\u73b0\u8fd9\u4e2a\u533a\u95f4\u5e76\u6ca1\u6709\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\uff0c\u4e8e\u662f\u6211\u4eec\u5c31pushdown\uff0clazytage\u4e0b\u4f20\uff0c\u5e76\u8ba9\u6bcf\u4e2a\u533a\u95f4sum\u52a0\u4e0a\uff08r-l\uff09*lazytage\u3002\n\n![](https://img2018.cnblogs.com/blog/987049/201809/987049-20180921132140938-396404765.png)\n\n\u7136\u540e\u67e5\u52302~2\u533a\u95f4\uff0c\u53d1\u73b0\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u6240\u4ee5\u5c31\u8fd43\uff0c\u518d\u641c\u7d22\u52303~4\u533a\u95f4\uff0c\u53d1\u73b0\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de8\uff0c\u6700\u540e3+8=11\u5c31\u662f\u7b54\u6848\n\n\u8fd9\u91cc\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```\ninline int search(int i,int l,int r){\n    if(tree[i].l>=l && tree[i].r<=r)\n        return tree[i].sum;\n    if(tree[i].r<l || tree[i].l>r)  return 0;\n    push_down(i);\n    int s=0;\n    if(tree[i*2].r>=l)  s+=search(i*2,l,r);\n    if(tree[i*2+1].l<=r)  s+=search(i*2+1,l,r);\n    return s;\n}\n```\n\n \u597d\u4e86\uff0c\u5230\u4e86\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u5b66\u4f1a\u4e86\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u52a0\u51cf\u64cd\u4f5c\uff0c\u5927\u5bb6\u53ef\u4ee5\u5b8c\u6210\u6d1b\u8c37\u7684\u7ebf\u6bb5\u6811\u6a21\u677f1\n \n 1\u3001\u4e58\u6cd5\u7ebf\u6bb5\u6811\n\n\u5982\u679c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u53ea\u6709\u4e58\u6cd5\uff0c\u90a3\u4e48\u76f4\u63a5\u52a0\u5165lazytage\u53d8\u6210\u4e58\uff0c\u7136\u540etree[i].sum*=k\u5c31\u597d\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f\u53c8\u52a0\u53c8\u4e58\uff0c\u90a3\u5c31\u4e0d\u4e00\u6837\u4e86\u3002\n\n\u5f53lazytage\u4e0b\u6807\u4f20\u9012\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\uff0c\u662f\u5148\u52a0\u518d\u4e58\u8fd8\u662f\u5148\u4e58\u518d\u52a0\u3002\u6211\u4eec\u53ea\u9700\u8981\u5bf9lazytage\u505a\u8fd9\u6837\u4e00\u4e2a\u5904\u7406\u3002\n\nlazytage\u5206\u4e3a\u4e24\u79cd\uff0c\u5206\u522b\u662f\u52a0\u6cd5\u7684plz\u548c\u4e58\u6cd5\u7684mlz\u3002\n\nmlz\u5f88\u7b80\u5355\u5904\u7406\uff0cpushdown\u65f6\u76f4\u63a5*\u7236\u4eb2\u7684\u5c31\u53ef\u4ee5\u4e86\uff0c\u90a3\u4e48\u52a0\u6cd5\u5462\uff1f\n\n\u6211\u4eec\u9700\u8981\u628a\u539f\u5148\u7684plz*\u7236\u4eb2\u7684mlz\u518d\u52a0\u4e0a\u7236\u4eb2\u7684plz.\n\n```\ninline void pushdown(long long i){//\u6ce8\u610f\u8fd9\u79cd\u7ea7\u522b\u7684\u6570\u636e\u4e00\u5b9a\u8981\u5f00long long\n    long long k1=tree[i].mlz,k2=tree[i].plz;\n    tree[i<<1].sum=(tree[i<<1].sum*k1+k2*(tree[i<<1].r-tree[i<<1].l+1))%p;//\n    tree[i<<1|1].sum=(tree[i<<1|1].sum*k1+k2*(tree[i<<1|1].r-tree[i<<1|1].l+1))%p;\n    tree[i<<1].mlz=(tree[i<<1].mlz*k1)%p;\n    tree[i<<1|1].mlz=(tree[i<<1|1].mlz*k1)%p;\n    tree[i<<1].plz=(tree[i<<1].plz*k1+k2)%p;\n    tree[i<<1|1].plz=(tree[i<<1|1].plz*k1+k2)%p;\n    tree[i].plz=0;\n    tree[i].mlz=1;\n    return ;\n}\n```\n\n\u7136\u540e\u52a0\u6cd5\u548c\u51cf\u6cd5\u7684\u51fd\u6570\u540c\u7406\uff0c\u7ef4\u62a4lazytage\u7684\u65f6\u5019\u52a0\u6cd5\u6807\u8bb0\u4e00\u5b9a\u8981\u8bb0\u5f97\u73b0\u4e58\u518d\u52a0\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8ba1\u7b97*2\u65f6\u4e00\u5b9a\u8981\u6539\u6210i<<1\u8fd9\u6837\u80fd\u89e3\u51b3\u5f88\u591a\u65f6\u95f4\uff0c\u8fd8\u6709\u8981\u5f00long long\uff0c\u8fd8\u6709\uff0c\u51fd\u6570\u524d\u9762\u8981\u52a0inline \u6211\u5728\u5176\u4ed6OJ\u4ea4\u8fd9\u9053\u9898\u65f6\uff0c\u5c31\u56e0\u4e3a\u6ca1\u52a0inline \u5c31\u88ab\u5361\u4e86\uff0c\u4ea4\u4e86\u5c31\u8fc7\u4e86\u3002\n\n2\u3001\u6839\u53f7\u7ebf\u6bb5\u6811\n\n\u5176\u5b9e\uff0c\u6839\u53f7\u7ebf\u6bb5\u6811\u548c\u9664\u6cd5\u7ebf\u6bb5\u6811\u4e00\u6837\u3002\u5979\u4eec\u4e4d\u773c\u4e00\u770b\u611f\u89c9\u76f4\u63a5\u7528lazytage\u6807\u8bb0\u9664\u4e86\u591a\u5c11\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u4f1a\u51fa\u73b0\u7cbe\u5ea6\u95ee\u9898\u3002\n\nc++\u7684\u9664\u6cd5\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u5f88\u660e\u663e\uff0c(a+b)/k\uff01=a/k+b/k\uff08\u5728\u5411\u4e0b\u53d6\u6574\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u800c\u6839\u53f7\uff0c\u5f88\u660e\u663e\u6839\u53f7\uff08a\uff09+\u6839\u53f7(b)!=\u6839\u53f7(a+b)\u90a3\u4e48\u600e\u4e48\u529e\uff1f\n\n\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u66b4\u529b\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8981\u6539\u52a8\u7684\u533a\u95f4l~r,\u628a\u91cc\u9762\u7684\u6bcf\u4e2a\u70b9\u90fd\u5355\u72ec\u9664\uff0c\u4f46\u8fd9\u6837\u5c31\u4f1a\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u5361\u5f97\u6bd4\u5927\u66b4\u529b\u90fd\u6162\uff08\u56e0\u4e3a\u591a\u4e2a\u5e38\u6570\uff09\uff0c\u6240\u4ee5\u600e\u4e48\u4f18\u5316\uff1f\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u7ef4\u62a4\u5979\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u6839\u53f7\u548c\u6700\u5c0f\u503c\u7684\u6839\u53f7\u4e00\u6837\uff0c\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u6574\u4f53\u6839\u53f7\u4e0d\u4f1a\u4ea7\u751f\u8bef\u5dee\uff0c\u5c31\u76f4\u63a5\u4fee\u6539\uff08\u9664\u6cd5\u540c\u7406\uff09\n\n\u5176\u4e2d\uff0clazytage\u628a\u9664\u6cd5\u5f53\u6210\u51cf\u6cd5\uff0c\u8bb0\u5f55\u7684\u662f\u8fd9\u4e2a\u533a\u95f4\u91cc\u6bcf\u4e2a\u5143\u7d20\u51cf\u53bb\u7684\u503c\u3002\n\n\u4e0b\u9762\u662f\u6839\u53f7\u7ebf\u6bb5\u6811\u7684\u4fee\u6539\u8fc7\u7a0b\uff1a\n```\ninline void Sqrt(int i,int l,int r){\n    if(tree[i].l>=l && tree[i].r<=r && (tree[i].minn-(long long)sqrt(tree[i].minn))==(tree[i].maxx-(long long)sqrt(tree[i].maxx))){//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u6700\u5c0f\u503c\u4e00\u6837\n        long long u=tree[i].minn-(long long)sqrt(tree[i].minn);//\u8ba1\u7b97\u533a\u95f4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u9700\u8981\u51cf\u53bb\u7684\n        tree[i].lz+=u;\n        tree[i].sum-=(tree[i].r-tree[i].l+1)*u;\n        tree[i].minn-=u;\n        tree[i].maxx-=u;\n            //cout<<\"i\"<<i<<\" \"<<tree[i].sum<<endl;\n        return ;\n    }\n    if(tree[i].r<l || tree[i].l>r)  return ;\n    push_down(i);\n    if(tree[i*2].r>=l)  Sqrt(i*2,l,r);\n    if(tree[i*2+1].l<=r)  Sqrt(i*2+1,l,r);\n    tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;\n    tree[i].minn=min(tree[i*2].minn,tree[i*2+1].minn);//\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n    tree[i].maxx=max(tree[i*2].maxx,tree[i*2+1].maxx);\n    //cout<<\"i\"<<i<<\" \"<<tree[i].sum<<endl;\n    return ;\n}\n```\n\n\u7136\u540epushdown\u6ca1\u4ec0\u4e48\u53d8\u5316\uff0c\u5c31\u662f\u8981\u8bb0\u5f97tree[i].minn\u3001tree[i].maxx\u4e5f\u8981\u8bb0\u5f97-lazytage\u3002\n\n**\u6a21\u677f\u9898\u4e0e\u4ee3\u7801\uff1a**\n\n\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff1a[\u6811\u72b6\u6570\u7ec4\u6a21\u677f1](https://www.luogu.org/problemnew/show/P3374)\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <stack>\n#include <vector>\nusing namespace std;\n#define MAXN 100010\n#define INF 10000009\n#define MOD 10000007\n#define LL long long\n#define in(a) a=read()\n#define REP(i,k,n) for(long long i=k;i<=n;i++)\n#define DREP(i,k,n) for(long long i=k;i>=n;i--)\n#define cl(a) memset(a,0,sizeof(a))\ninline long long read(){\n    long long x=0,f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n    return x*f;\n}\ninline void out(long long x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) out(x/10);\n    putchar(x%10+'0');\n}\nlong long n,m,p;\nlong long input[MAXN];\nstruct node{\n    long long l,r;\n    long long sum,mlz,plz;\n}tree[4*MAXN];\ninline void build(long long i,long long l,long long r){\n    tree[i].l=l;\n    tree[i].r=r;\n    tree[i].mlz=1;\n    if(l==r){\n        tree[i].sum=input[l]%p;\n        return ;\n    }\n    long long mid=(l+r)>>1;\n    build(i<<1,l,mid);\n    build(i<<1|1,mid+1,r);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline void pushdown(long long i){\n    long long k1=tree[i].mlz,k2=tree[i].plz;\n    tree[i<<1].sum=(tree[i<<1].sum*k1+k2*(tree[i<<1].r-tree[i<<1].l+1))%p;\n    tree[i<<1|1].sum=(tree[i<<1|1].sum*k1+k2*(tree[i<<1|1].r-tree[i<<1|1].l+1))%p;\n    tree[i<<1].mlz=(tree[i<<1].mlz*k1)%p;\n    tree[i<<1|1].mlz=(tree[i<<1|1].mlz*k1)%p;\n    tree[i<<1].plz=(tree[i<<1].plz*k1+k2)%p;\n    tree[i<<1|1].plz=(tree[i<<1|1].plz*k1+k2)%p;\n    tree[i].plz=0;\n    tree[i].mlz=1;\n    return ;\n}\ninline void mul(long long i,long long l,long long r,long long k){\n    if(tree[i].r<l || tree[i].l>r)  return ;\n    if(tree[i].l>=l && tree[i].r<=r){\n        tree[i].sum=(tree[i].sum*k)%p;\n        tree[i].mlz=(tree[i].mlz*k)%p;\n        tree[i].plz=(tree[i].plz*k)%p;\n        return ;\n    }\n    pushdown(i);\n    if(tree[i<<1].r>=l)  mul(i<<1,l,r,k);\n    if(tree[i<<1|1].l<=r)  mul(i<<1|1,l,r,k);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline void add(long long i,long long l,long long r,long long k){\n    if(tree[i].r<l || tree[i].l>r)  return ;\n    if(tree[i].l>=l && tree[i].r<=r){\n        tree[i].sum+=((tree[i].r-tree[i].l+1)*k)%p;\n        tree[i].plz=(tree[i].plz+k)%p;\n        return ;\n    }\n    pushdown(i);\n    if(tree[i<<1].r>=l)  add(i<<1,l,r,k);\n    if(tree[i<<1|1].l<=r)  add(i<<1|1,l,r,k);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline long long search(long long i,long long l,long long r){\n    if(tree[i].r<l || tree[i].l>r)  return 0;\n    if(tree[i].l>=l && tree[i].r<=r)\n        return tree[i].sum;\n    pushdown(i);\n    long long sum=0;\n    if(tree[i<<1].r>=l)  sum+=search(i<<1,l,r)%p;\n    if(tree[i<<1|1].l<=r)  sum+=search(i<<1|1,l,r)%p;\n    return sum%p;\n}\nint main(){\n    in(n);    in(m);in(p);\n    REP(i,1,n)  in(input[i]);\n    build(1,1,n); \n\n    REP(i,1,m){\n        long long fl,a,b,c;\n        in(fl);\n        if(fl==1){\n            in(a);in(b);in(c);\n            c%=p;\n            mul(1,a,b,c);\n        }\n        if(fl==2){\n            in(a);in(b);in(c);\n            c%=p;\n            add(1,a,b,c);\n        }\n        if(fl==3){\n            in(a);in(b);\n            printf(\"%lld\\n\",search(1,a,b));\n        }\n    }\n    return 0;\n}\n/*\n4 1000\n2 3 4 5\n1 5\n1 5 1\n1 5 2\n1 5\n*/\n```\n\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff1a[\u6811\u72b6\u6570\u7ec4\u6a21\u677f2](https://www.luogu.org/problemnew/show/P3368)\n\n```\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\nusing namespace std;\nint n,m;\nint ans;\nint input[500010];\nstruct node\n{\n    int left,right;\n    int num;\n}tree[2000010];\nvoid build(int left,int right,int index)\n{\n    tree[index].num=0;\n    tree[index].left=left;\n    tree[index].right=right;\n       if(left==right)\n        return ;\n    int mid=(right+left)/2;\n    build(left,mid,index*2);\n    build(mid+1,right,index*2+1);\n}\nvoid pls(int index,int l,int r,int k)\n{\n    if(tree[index].left>=l && tree[index].right<=r)\n    {\n        tree[index].num+=k;\n        return ;\n    }\n    if(tree[index*2].right>=l)\n       pls(index*2,l,r,k);\n    if(tree[index*2+1].left<=r)\n       pls(index*2+1,l,r,k);\n}\nvoid search(int index,int dis)\n{\n    ans+=tree[index].num;\n    if(tree[index].left==tree[index].right)\n        return ;\n    if(dis<=tree[index*2].right)\n        search(index*2,dis);\n    if(dis>=tree[index*2+1].left)\n        search(index*2+1,dis);\n}\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    build(1,n,1);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&input[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int a;\n        scanf(\"%d\",&a);\n        if(a==1)\n        {\n            int x,y,z;\n            scanf(\"%d%d%d\",&x,&y,&z);\n            pls(1,x,y,z);\n        }\n        if(a==2)\n        {\n            ans=0;\n            int x;\n            scanf(\"%d\",&x);\n            search(1,x);\n            printf(\"%d\\n\",ans+input[x]);\n        }\n    }\n}\n```\n\u533a\u95f4\u52a0\u51cf\uff0c\u533a\u95f4\u67e5\u8be2\uff1a[\u7ebf\u6bb5\u6811\u6a21\u677f1](https://www.luogu.org/problemnew/show/P3372)\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#define init long long\nusing namespace std;\ninit n,m;\nstruct node\n{\n    init l,r,data;\n    init lt;    \n}tree[1000010];\ninit arr[1000010];\nvoid build(init l,init r,init index,init arr[])\n{\n    tree[index].lt=0;\n    tree[index].l=l;\n    tree[index].r=r;\n    if(l==r)\n    {\n        tree[index].data=arr[l];\n        return ;\n    }\n    init mid=(l+r)/2;\n    build(l,mid,index*2,arr);\n    build(mid+1,r,index*2+1,arr);\n    tree[index].data=tree[index*2].data+tree[index*2+1].data;\n    return ;\n}\nvoid push_down(init index)\n{\n    if(tree[index].lt!=0)\n    {\n        tree[index*2].lt+=tree[index].lt;\n        tree[index*2+1].lt+=tree[index].lt;\n        init mid=(tree[index].l+tree[index].r)/2;\n        tree[index*2].data+=tree[index].lt*(mid-tree[index*2].l+1);\n        tree[index*2+1].data+=tree[index].lt*(tree[index*2+1].r-mid);\n        tree[index].lt=0;\n    }\n    return ;\n}\nvoid up_data(init index,init l,init r,init k)\n{\n    if(tree[index].r<=r && tree[index].l>=l)\n    {\n        tree[index].data+=k*(tree[index].r-tree[index].l+1);\n        tree[index].lt+=k;\n        return ;\n    }\n    push_down(index);\n    if(tree[index*2].r>=l)\n        up_data(index*2,l,r,k);\n    if(tree[index*2+1].l<=r)\n        up_data(index*2+1,l,r,k);\n    tree[index].data=tree[index*2].data+tree[index*2+1].data;\n    return ;\n}\ninit search(init index,init l,init r)\n{\n    if(tree[index].l>=l && tree[index].r<=r)\n        return tree[index].data;\n    push_down(index);\n    init num=0;\n    if(tree[index*2].r>=l)\n        num+=search(index*2,l,r);\n    if(tree[index*2+1].l<=r)\n        num+=search(index*2+1,l,r);\n    return num;\n}\nint main()\n{\n    cin>>n>>m;\n    for(init i=1;i<=n;i++)\n        cin>>arr[i];\n    build(1,n,1,arr);\n    for(init i=1;i<=m;i++)\n    {\n        init f;\n        cin>>f;\n        if(f==1)\n        {\n            init a,b,c;\n            cin>>a>>b>>c;\n            up_data(1,a,b,c);\n        }\n        if(f==2)\n        {\n            init a,b;\n            cin>>a>>b;\n            printf(\"%lld\\n\",search(1,a,b));\n        }\n    }\n}\n```\n\u533a\u95f4\u4e58\u6cd5\uff1a[\u7ebf\u6bb5\u6811\u6a21\u677f2](https://www.luogu.org/problemnew/show/P3373)\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <stack>\n#include <vector>\nusing namespace std;\n#define MAXN 100010\n#define INF 10000009\n#define MOD 10000007\n#define LL long long\n#define in(a) a=read()\n#define REP(i,k,n) for(long long i=k;i<=n;i++)\n#define DREP(i,k,n) for(long long i=k;i>=n;i--)\n#define cl(a) memset(a,0,sizeof(a))\ninline long long read(){\n    long long x=0,f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n    return x*f;\n}\ninline void out(long long x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) out(x/10);\n    putchar(x%10+'0');\n}\nlong long n,m,p;\nlong long input[MAXN];\nstruct node{\n    long long l,r;\n    long long sum,mlz,plz;\n}tree[4*MAXN];\ninline void build(long long i,long long l,long long r){\n    tree[i].l=l;\n    tree[i].r=r;\n    tree[i].mlz=1;\n    if(l==r){\n        tree[i].sum=input[l]%p;\n        return ;\n    }\n    long long mid=(l+r)>>1;\n    build(i<<1,l,mid);\n    build(i<<1|1,mid+1,r);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline void pushdown(long long i){\n    long long k1=tree[i].mlz,k2=tree[i].plz;\n    tree[i<<1].sum=(tree[i<<1].sum*k1+k2*(tree[i<<1].r-tree[i<<1].l+1))%p;\n    tree[i<<1|1].sum=(tree[i<<1|1].sum*k1+k2*(tree[i<<1|1].r-tree[i<<1|1].l+1))%p;\n    tree[i<<1].mlz=(tree[i<<1].mlz*k1)%p;\n    tree[i<<1|1].mlz=(tree[i<<1|1].mlz*k1)%p;\n    tree[i<<1].plz=(tree[i<<1].plz*k1+k2)%p;\n    tree[i<<1|1].plz=(tree[i<<1|1].plz*k1+k2)%p;\n    tree[i].plz=0;\n    tree[i].mlz=1;\n    return ;\n}\ninline void mul(long long i,long long l,long long r,long long k){\n    if(tree[i].r<l || tree[i].l>r)  return ;\n    if(tree[i].l>=l && tree[i].r<=r){\n        tree[i].sum=(tree[i].sum*k)%p;\n        tree[i].mlz=(tree[i].mlz*k)%p;\n        tree[i].plz=(tree[i].plz*k)%p;\n        return ;\n    }\n    pushdown(i);\n    if(tree[i<<1].r>=l)  mul(i<<1,l,r,k);\n    if(tree[i<<1|1].l<=r)  mul(i<<1|1,l,r,k);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline void add(long long i,long long l,long long r,long long k){\n    if(tree[i].r<l || tree[i].l>r)  return ;\n    if(tree[i].l>=l && tree[i].r<=r){\n        tree[i].sum+=((tree[i].r-tree[i].l+1)*k)%p;\n        tree[i].plz=(tree[i].plz+k)%p;\n        return ;\n    }\n    pushdown(i);\n    if(tree[i<<1].r>=l)  add(i<<1,l,r,k);\n    if(tree[i<<1|1].l<=r)  add(i<<1|1,l,r,k);\n    tree[i].sum=(tree[i<<1].sum+tree[i<<1|1].sum)%p;\n    return ;\n}\ninline long long search(long long i,long long l,long long r){\n    if(tree[i].r<l || tree[i].l>r)  return 0;\n    if(tree[i].l>=l && tree[i].r<=r)\n        return tree[i].sum;\n    pushdown(i);\n    long long sum=0;\n    if(tree[i<<1].r>=l)  sum+=search(i<<1,l,r)%p;\n    if(tree[i<<1|1].l<=r)  sum+=search(i<<1|1,l,r)%p;\n    return sum%p;\n}\nint main(){\n    in(n);    in(m);in(p);\n    REP(i,1,n)  in(input[i]);\n    build(1,1,n); \n\n    REP(i,1,m){\n        long long fl,a,b,c;\n        in(fl);\n        if(fl==1){\n            in(a);in(b);in(c);\n            c%=p;\n            mul(1,a,b,c);\n        }\n        if(fl==2){\n            in(a);in(b);in(c);\n            c%=p;\n            add(1,a,b,c);\n        }\n        if(fl==3){\n            in(a);in(b);\n            printf(\"%lld\\n\",search(1,a,b));\n        }\n    }\n    return 0;\n}\n/*\n4 1000\n2 3 4 5\n1 5\n1 5 1\n1 5 2\n1 5\n*/\n```",
        "postTime": 1540531680,
        "uid": 39942,
        "name": "TJor",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\uff0c\u4ece\u5165\u95e8\u5230\u8fdb\u9636"
    },
    {
        "content": "**\u7ebf\u6bb5\u6811\u6709\u4e2a\u5730\u65b9\u5199\u9519\u4e86\u3002\u3002\u3002\u6240\u4ee5\u91cd\u65b0\u5ba1\u6838\u4e00\u4e0b**\n\n\u6539\u4e0b\u9898\u89e3\u3002\n\n\u8fd9\u56de\u91cd\u65b0\u53d1\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u8be6\u89e3\uff08\u6307\u9488\u7248\uff09\n\n\u5148\u5b89\u5229[\u535a\u5ba2](https://www.cnblogs.com/TLE666/p/8857143.html)\n\n\n\n\u4eca\u5929\u6765\u4ed4\u7ec6\u5730\u8bf4\u4e00\u4e0b\u7ebf\u6bb5\u6811\n\n\u7ebf\u6bb5\u6811\u53ef\u4ee5\u9ad8\u6548\u7387\u5730\u89e3\u51b3\u8bb8\u8bb8\u591a\u591a\u7684**\u533a\u95f4\u64cd\u4f5c**\n\n\u6bd4\u5982\u533a\u95f4\u6c42\u548c\uff0c\u628a\u4e00\u4e2a\u533a\u95f4\u4e2d\u6240\u6709\u7684\u6570\u52a0\u4e0a\u5e38\u91cfk\uff0c\u533a\u95f4\u6c42\u6700\u5927\u503c\u6700\u5c0f\u503c\u7b49\u7b49\n\n#### \u5b9a\u4e49\n\n \n-  \u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\n\n- \u5b83\u5728\u5404\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u6761\u7ebf\u6bb5\uff08\u6570\u7ec4\u4e2d\u7684\u4e00\u6bb5\u5b50\u6570\u7ec4\uff09\n\n- \u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\n\n- **\u6027\u8d28\uff1a\u7236\u4eb2\u7684\u533a\u95f4\u662f[l,r],(m=(l+r)/2)\u5de6\u513f\u5b50\u7684\u533a\u95f4\u662f[l,m]\uff0c\u53f3\u513f\u5b50\u7684\u533a\u95f4\u662f[m+1,r]\uff0c\u7ebf\u6bb5\u6811\u9700\u8981\u7684\u7a7a\u95f4\u4e3a\u6570\u7ec4\u5927\u5c0f\u7684\u56db\u500d**\n\n\n#### \u57fa\u672c\u64cd\u4f5c\n\n\n\u8fd9\u91cc\u4e3e\u7684\u662f\u533a\u95f4\u52a0\u4e0e\u533a\u95f4\u6c42\u548c\u7684\u4f8b\u5b50\n\n\u5148\u5217\u51fa\u6765\n1. \u5efa\u7ebf\u6bb5\u6811\n2. \u533a\u95f4\u52a0\n3. \u533a\u95f4\u67e5\u8be2\u548c\n\n\n----------\n\n\n#### \u5efa\u6811\n\n- \u9996\u5148\uff0c\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u6765\u4fdd\u5b58\u4e00\u4e2a\u8282\u70b9\n\n\n```cpp\nstruct node\n{\n    int left, right;\n    //\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u80fd\u591f\u5728\u6570\u7ec4\u4e2d\u7ba1\u8f96\u7684\u7ebf\u6bb5\u7684\u8303\u56f4\u662f\u4eceleft\u5230right\n    \n    int s;\n    //\u8868\u793a\u8fd9\u6761\u7ebf\u6bb5\u7684\u533a\u95f4\u548c\n    \n    node *ch[2];\n    //\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\uff0cch[0]\u4e3a\u5de6\u5b69\u5b50\uff0cch[1]\u662f\u53f3\u5b69\u5b50\n}pool[MAXN], *root;//pool\u662f\u5185\u5b58\u6c60\uff0croot\u662f\u6839\u8282\u70b9\n```\n- \u8fd9\u6837\u5c31\u80fd\u591f\u7528node\u6765\u8868\u793a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\uff08\u4f46\u8fd9\u8fd8\u4e0d\u591f\uff0c\u8be6\u770b\u533a\u95f4\u52a0\uff09\n- \u63a5\u4e0b\u6765\u662f\u5efa\u6811\u64cd\u4f5c\n\n```cpp\nvoid Build_Tree(node *r, int left, int right)\n//\u9012\u5f52\u5efa\u6811\uff0c\u6307\u4ee5r\u4e3a\u6839\u8282\u70b9\u5efa\u7ebf\u6bb5\u4e3aleft\u81f3right\u7684\u5b50\u6811\n{\n    r->left = left;\n    r->right = right;\n    //\u5c06r->left\u66f4\u65b0\u4e3aleft\uff0cr->right\u66f4\u65b0\u4e3aright\n    if(left == right)\n    //\u5982\u679c\u9012\u5f52\u5230\u4e86\u53f6\u5b50\u8282\u70b9\n    {\n        r->s = a[left];\n        //\u5355\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u533a\u95f4\u548c\u5c31\u662f\u6570\u7ec4\u4e2d\u7684\u90a3\u4e2a\u503c\n        return ;\n    }\n    int mid = (left + right) / 2;//\u8be6\u89c1\u6027\u8d28\n    node *lson = &pool[++cnt];//\u7533\u8bf7\u7a7a\u95f4\n    node *rson = &pool[++cnt];//\u7533\u8bf7\u7a7a\u95f4\n    r->ch[0] = lson;//\u8ba9r\u7684\u5de6\u5b50\u6307\u5411lson\n    r->ch[1] = rson;//\u8ba9r\u7684\u53f3\u5b50\u6307\u5411rson\n    Build_Tree(lson, left, mid);     //\u9012\u5f52\u5efa\u6811\uff0c\u8be6\u89c1\u6027\u8d28\n    Build_Tree(rson, mid + 1, right);//\u9012\u5f52\u5efa\u6811\uff0c\u8be6\u89c1\u6027\u8d28\n    r->s = r->ch[0]->s + r->ch[1]->s;//\u7ef4\u62a4\u548c\n}\n```\n\n\n----------\n\n\n#### \u533a\u95f4\u52a0\n\n\u5373\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4left\uff0cright\u548c\u4e00\u4e2a\u9700\u8981\u52a0\u4e0a\u7684\u503c\n\u5b8c\u6210\u64cd\u4f5c\uff1a\u8ba9left ~ right\u7684\u6240\u6709\u6570\u52a0\u4e0a\u4e00\u4e2ad\n\n- \u66b4\u529b\u64cd\u4f5c\uff1a\u4e00\u4e2a\u4e00\u4e2a\u70b9\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u590d\u6742\u5ea6$O(n \\log ^ 2 n)$\n- \u663e\u7136\u590d\u6742\u5ea6\u4e0d\u6ee1\u8db3\u8981\u6c42\n- \u6240\u4ee5\uff0c\u6211\u4eec\u6362\u4e00\u79cd\u65b9\u5f0f\n- **\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e2d\u52a0\u5165\u4e00\u4e2a\u61d2\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2a\u6574\u4e2a\u533a\u95f4\u6bcf\u4e00\u4e2a\u6570\u9700\u8981\u52a0\u4e0a\u8fd9\u4e2a\u61d2\u6807\u8bb0**\n- \u6bd4\u5982\u8bf4\u8981\u7ed9$[1,4]$\u52a0\u4e0a$5$\uff0c\u90a3\u4e48\u5c31\u8ba9\u8868\u793a$[1,4]$\u7684\u533a\u95f4\u7684$lazy$(\u61d2\u6807\u8bb0)\u52a0\u4e0a$5$\n- \u6211\u4eec\u9700\u8981\u4e00\u4e2apushdown\u51fd\u6570\uff0c\u628a\u4e00\u4e2a\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u8f6c\u6362\u6210\u533a\u95f4\u548c\u5e76\u4e14\u4e0b\u53d1\u5230\u81ea\u5df1\u7684\u5de6\u53f3\u4e24\u5b50\n\npushdown:\n```cpp\ninline void Push(node *r)\n{\n    if(r->lazy == 0) return ; //\u6ca1\u6709\u9700\u8981\u52a0\u7684\u503c\u76f4\u63a5return\n    r->s += (r->right - r->left + 1) * r->lazy;\n    //\u533a\u95f4\u548c\u52a0\u4e0a\u533a\u95f4\u7684\u957f\u5ea6(right - left + 1)\u4e58\u4e0a\u6bcf\u4e2a\u6570\u9700\u8981\u52a0\u4e0a\u7684\u503clazy\n    if(r->ch[0]) r->ch[0]->lazy += r->lazy;\n    if(r->ch[1]) r->ch[1]->lazy += r->lazy;\n    //\u5de6\u53f3\u4e24\u5b50\u7684lazy\u52a0\u4e0a\u81ea\u5df1\u7684lazy\n    r->lazy = 0;\n}\n```\n\u4fee\u6539\u51fd\u6570:\n```cpp\nvoid change(node *r, int left, int right, int d)\n{\n    //d\u662f\u8981\u52a0\u4e0a\u7684\u6570\n    if(r->left == left && r->right == right)\n    //\u627e\u5230\u4e86\u8981\u4fee\u6539\u7684\u533a\u95f4\n    {\n        r->lazy += d;//\u628a\u6bcf\u4e2a\u6570\u8981\u52a0\u7684\u503clazy\u52a0\u4e0ad\n        return ;\n    }\n    Push(r);\n    //\u53d1\u653elazy\n    if(r->ch[0]->right >= right) change(r->ch[0], left, right, d);\n    //\u5982\u679c\u5de6\u5b50\u7684\u53f3\u7aef\u70b9\u6bd4\u8981\u67e5\u627e\u7684\u53f3\u7aef\u70b9\u5927\uff0c\u5219\u5728\u5de6\u5b50\u4e2d\u7ee7\u7eed\u4fee\u6539\n    else if(r->ch[1]->left <= left) change(r->ch[1], left, right, d);\n    //\u5982\u679c\u53f3\u5b50\u7684\u5de6\u7aef\u70b9\u6bd4\u8981\u67e5\u627e\u7684\u5de6\u7aef\u70b9\u5c0f\uff0c\u5219\u5728\u53f3\u5b50\u4e2d\u7ee7\u7eed\u4fee\u6539\n    {\n          change(r->ch[0], left, r->ch[0]->right, d);\n          change(r->ch[1], r->ch[1]->left, right, d);\n          //\u5426\u5219\u628a\u9700\u8981\u67e5\u627e\u7684\u533a\u95f4\u780d\u6210\u4e24\u534a\uff0c\u5206\u522b\u5728\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u4fee\u6539\n    }\n    Push(r->ch[0]), Push(r->ch[1]);\n    //\u91cd\u65b0\u53d1\u653elazy\uff08\u4e4b\u524d\u5c11\u4e86\u8fd9\u4e00\u6b65\u5e26\u6765\u4e86\u4e0d\u4fbf\uff09\n    r->s = r->ch[0]->s + r->ch[1]->s\n    //\u56e0\u4e3a\u4fee\u6539\u4e86\u503c\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u7ef4\u62a4s\n}\n```\n\n\n----------\n#### \u533a\u95f4\u548c\n- \u7ed9\u4f60\u4e00\u4e2a\u533a\u95f4$[left, right]$,\u6c42$\\displaystyle \\sum_{i=left}^{right} {a_i}$\n- \u4e0e\u533a\u95f4\u4fee\u6539\u76f8\u4f3c\uff0c\u7ed9\u4e00\u4e2a\u4ee3\u7801\n\n```cpp\nint query(node *r, int left, int right)\n{\n    Push(r);//\u6700\u5f00\u59cbPush\uff0c\u514d\u5f97\u8fd4\u56de\u65f6\u518d\u7b97\u4e00\u904d\n    if(r->left == left && r->right == right) return r->s;\n    if(r->ch[0]->right >= right) return query(r->ch[0], left, right);\n    else if(r->ch[1]->left <= left) return query(r->ch[1], left, right);\n    else\n        return query(r->ch[0], left, r->ch[0]->right) + \n               query(r->ch[1], r->ch[1]->left, right);\n               \n}\n```\n\n\u8fd9\u4e2a\u662f\u6307\u9488\u7248\u7684\u7ebf\u6bb5\u6811\u8be6\u89e3\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002\n\n------------\n\n\n------------\n\n\n------------\n\n\u6700\u540e\u518d\u6302\u4e00\u4e2a\u6570\u7ec4\u7248\n\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll n, m;\nll L = 1, a[100100];\nstruct st_n//SegmentTree node \u7ebf\u6bb5\u6811\u8282\u70b9 \n{\n    ll left, right;//\u6bcf\u4e2a\u8282\u70b9\u7684\u63a7\u5236\u8303\u56f4 \n    ll lazy, s;       //s\u8868\u793a\u548c \n}t[300005];\nvoid build_tree()//\u5efa\u7ebf\u6bb5\u6811 \n{\n    while(L < n) L *= 2;\n    for(ll i = 1; i <= n; i++) \n        t[i + L - 1].left = t[i + L - 1].right = i, \n        t[i + L - 1].s = a[i];//\u5c06\u6700\u540e\u4e00\u5c42\u8d4b\u503c \n    for(ll i = L + n;i < 2 * L;i++)\n        t[i].left = t[i].right = i - L + 1;\n    for(ll i = L - 1; i >= 1; i--)\n        t[i].left = t[2 * i].left,\n        t[i].right = t[2 * i + 1].right,\n        t[i].s += t[2 * i + 1].s + t[2 * i].s;\n        //\u5efa\u6811 \n}\n\nvoid push(ll id)//\u53d1\u653elazy\u503c\u7ed9\u5de6\u53f3\u5b50 \n{\n    t[2 * id].lazy += t[id].lazy;//\u5de6\u5b50 \n    t[2 * id + 1].lazy += t[id].lazy;//\u53f3\u5b50 \n    t[id].s += (t[id].right - t[id].left + 1) * t[id].lazy;//\u66f4\u65b0\u8282\u70b9\u7684\u503c \n    t[id].lazy = 0;\n}\n\n//\u533a\u95f4\u4fee\u6539 \nvoid change(ll id, ll left, ll right, ll d)\n{\n    if(t[id].left == left && t[id].right == right)//\u627e\u5230\u4e86 \n    {\n        t[id].lazy += d;\n        return ;\n    }\n    push(id);//\u53d1\u653elazy\u503c \n    if(t[2 * id].right >= right) change(2 * id, left, right, d);//\u5982\u679c\u5de6\u5b50\u7684\u53f3\u7ba1\u8f96\u8303\u56f4\u6bd4\u6240\u6c42\u5927\uff0c\u5219\u53ea\u5728\u5de6\u5b50\u4e2d\u7ee7\u7eedchange \n    else if(t[2 * id + 1].left <= left) change(2 * id + 1, left, right, d);//\u540c\u4e0a \n    else\n    {\n        change(2 * id, left, t[2 * id].right, d);\n        change(2 * id + 1, t[2 * id + 1].left, right, d);\n        //\u5de6\u53f3\u5b50\u5206\u522b\u67e5\u627e \n    }\n    t[id].s = t[2 * id].s + t[2 * id + 1].s \n            + (t[2 * id].right - t[2 * id].left + 1) * t[2 * id].lazy\n            + (t[2 * id + 1].right - t[2 * id + 1].left + 1) * t[2 * id + 1].lazy;\n    //\u4e0a\u9762\u8fd9\u6b65\u5f88\u91cd\u8981\uff0c\u5b83\u7684\u529f\u80fd\u4e5f\u662f\u66f4\u65b0\uff08\u5176\u5b9e\u6211\u539f\u672c\u60f3\u5199\u4e2a\u51fd\u6570\uff09 \n}\nll query(ll id, ll left, ll right)//\u67e5\u8be2 \n{\n    //\u4e0echange\u5f88\u50cf\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \n    if(t[id].left == left && t[id].right == right)\n        return t[id].s + (t[id].right - t[id].left + 1) * t[id].lazy;\n    push(id); \n    if(t[2 * id].right >= right) return query(2 * id, left, right);\n    else if(t[2 * id + 1].left <= left) return query(2 * id + 1, left, right);\n    else return query(2 * id, left, t[2 * id].right) + query(2 * id + 1, t[2 * id + 1].left, right);\n}\nint main(int argc, char *argv[])\n{\n    cin >> n >> m;\n    for(ll i = 1; i <= n; i++) cin >> a[i];\n    build_tree();//\u5efa\u6811 \n    for(ll i = 1;i <= m;i++)\n    {\n        ll p, x, y;\n        ll d;\n        cin >> p >> x >> y;\n        if(p == 1)\n        {\n            cin >> d;\n            change(1, x, y, d);\n        }\n        else\n            cout << query(1, x, y) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1508556395,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "[\u539f\u6587\u5730\u5740](https://tbr-blog.blog.luogu.org/solution-p3372\n)\n# \u4e00\u3001\u6982\u5ff5\n```\n\u7ebf\u6bb5\u6811\uff0c\u5728\u5404\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u6761\u7ebf\u6bb5\n\u53ef\u4ee5\u9ad8\u6548\u89e3\u51b3\u8fde\u7eed\u533a\u95f4\u7684\u4fee\u6539\u67e5\u8be2\u95ee\u9898\n\u7531\u4e8e\u4e8c\u53c9\u7ed3\u6784\u7684\u7279\u6027\n\u5b83\u6bcf\u6b21\u64cd\u4f5c\u80fd\u4fdd\u6301\u6bcf\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3aO(logn)\n\u7531\u4e8e\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\n\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u90fd\u4f1a\u88ablogn\u4e2a\u5de6\u53f3\u7684\u8282\u70b9\u8bb0\u5f55\n\u6240\u4ee5\u7a7a\u95f4\u6d88\u8017\u4e00\u822c\u8f83\u5927\uff08\u4e00\u822c\u662f4*n\uff09\n```\n# \u4e8c\u3001\u64cd\u4f5c\n## 1\u3001\u9884\u5904\u7406\n```\n\u6211\u4eec\u5148\u8003\u8651\u8282\u70b9\u4e2a\u6570\u662f2\u7684n\u6b21\u65b9\u7684\u4e00\u6bb5\u533a\u95f4\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\n\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\n\u6240\u4ee5\u5b83\u6bcf\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u90fd\u6709\u4e24\u4e2a\u513f\u5b50\n\u8fd9\u91cc\u53eb\u505a\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\n```\n![luogu](https://cdn.luogu.com.cn/upload/pic/28006.png)\n# ~~\u56fe\u597d\u50cf\u6709\u70b9\u4e11~~\n```\n\u6211\u4eec\u5148\u6765\u5206\u6790\u4e0b\u7ebf\u6bb5\u6811\u7684\u4e00\u4e9b\u6027\u8d28\n\u89c2\u5bdf\u8fd9\u5f20\u56fe\u4e0d\u96be\u53d1\u73b0\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u513f\u5b50\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u4e58\u4ee5\u4e8c\n\u53f3\u513f\u5b50\u4e5f\u662f\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\u4e58\u4ee5\u4e8c\u518d\u52a0\u4e00\n\u76f8\u53cd\uff0c\u5982\u679c\u6211\u4eec\u8981\u5bfb\u627e\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\n\u53ea\u9700\u8981\u5c06\u8282\u70b9\u6807\u53f7\u9664\u4ee5\u4e8c\u5373\u53ef\n\u518d\u8fdb\u884c\u63a8\u5e7f\uff0c\u53d1\u73b0\u5373\u4f7f\u8282\u70b9\u6570\u4e0d\u662f2\u7684n\u6b21\u65b9\n\u4ecd\u7136\u53ef\u4ee5\u7528\u4e0a\u8ff0\u65b9\u6cd5\u67e5\u8be2\u5de6\u53f3\u513f\u5b50\u6216\u8005\u662f\u7236\u4eb2\u8282\u70b9\n\n\u6240\u4ee5\u67e5\u8be2\u64cd\u4f5c\u5982\u4e0b\uff1a\n#define ls(k) (k)*2//\u627e\u5de6\u513f\u5b50\n#define rs(k) (k)*2+1//\u627e\u53f3\u513f\u5b50\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u6765\u4f18\u5316\uff0c\u601d\u8def\u5982\u4e0b\n#define ls(k) (k)<<1\n#define rs(k) (k)<<1|1\n```\n```\n\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u5efa\u6811\n\u5efa\u6811\u7684\u64cd\u4f5c\u5c31\u662f\u5c06\u4e00\u6bb5\u533a\u95f4\u4e0d\u65ad\u4e8c\u5206\n\u76f4\u5230\u904d\u5386\u5230\u53f6\u5b50\u8282\n\u5230\u53f6\u5b50\u8282\u70b9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u7ef4\u62a4\u6211\u4eec\u60f3\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\n\u5982\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u533a\u95f4\u548c\u7b49\n\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u56de\u6eaf\u4e0a\u53bb\uff0c\u628a\u5176\u4ed6\u8282\u70b9\u4e5f\u66f4\u65b0\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n```\n```cpp\ninline void build(int k,int l,int r)\n{\n    if(l==r)\n    {\n        sum[k]=a[l];//\u533a\u95f4\u548c\n        //min[k]=a[l];//\u533a\u95f4\u6700\u5c0f\u503c\n        //max[k]=a[l];//\u533a\u95f4\u6700\u5927\u503c\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(ls(k),l,mid);//\u904d\u5386\u5de6\u513f\u5b50\n    build(rs(k),mid+1,r);//\u904d\u5386\u53f3\u513f\u5b50\n    sum[k]=sum[ls(k)]+sum[rs(k)];//\u533a\u95f4\u548c\n    //\u533a\u95f4\u6700\u5c0f\u4e8e\u533a\u95f4\u6700\u5927\u4ee3\u7801\u7c7b\u4f3c\uff0c\u5728\u6b64\u4e0d\u505a\u8d58\u8ff0\n}\n```\n## 2\u3001\u533a\u95f4\u4fee\u6539\n```\n\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u7ef4\u62a4\u7684\u4fee\u6539\u64cd\u4f5c\u662f\u533a\u95f4\u52a0\n\u6211\u8ba4\u4e3a\u4fee\u6539\u64cd\u4f5c\u548c\u5efa\u6811\u7c7b\u4f3c\n\u4e5f\u662f\u5148\u4e0d\u65ad\u4e8c\u5206\n\u5982\u679c\u4fee\u6539\u7684\u533a\u95f4\u5305\u62ec\u76ee\u524d\u904d\u5386\u7684\u533a\u95f4\n\u90a3\u5c31\u56de\u6eaf\uff0c\u5426\u5219\u5c31\u7ee7\u7eed\u4e8c\u5206\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n```\n```cpp\ninline void ad(int k,int l,int r,int v)\n{\n    add[k]+=v;//\u61d2\u6807\u8bb0\uff0c\u4e4b\u540e\u4e5f\u4f1a\u8be6\u7ec6\u8bf4\u660e\n    sum[k]+=v*(r-l+1);\n}//\u628a\u88ab\u5305\u62ec\u7684\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\ninline void ADD(int k,int l,int r,int x,int y,int v)\n{\n    if(l>=x&&r<=y)\n    {\n        ad(k,l,r,v);\n        return;\n    }//\u5982\u679c\u5305\u62ec\u904d\u5386\u533a\u95f4\uff0c\u5c31\u76f4\u63a5\u52a0\n    int mid=(l+r)>>1;\n    pushdown(k,l,r,mid);//\u6807\u8bb0\u4e0b\u4f20\uff0c\u4e4b\u540e\u4f1a\u7ec6\u8bb2\n    if(x<=mid)\n    {\n        ADD(ls(k),l,mid,x,y,v);\n    }\n    if(mid<y)\n    {\n        ADD(rs(k),mid+1,r,x,y,v);\n    }\n    sum[k]=sum[ls(k)]+sum[rs(k)];\n    //\u548c\u5efa\u6811\u64cd\u4f5c\u7c7b\u4f3c\n}\n```\n## 3\u3001\u533a\u95f4\u67e5\u8be2\n```\n\u8fd9\u9053\u9898\u662f\u8981\u6211\u4eec\u7ef4\u62a4\u533a\u95f4\u548c\n\u90a3\u4e48\u548c\u533a\u95f4\u4fee\u6539\u4e00\u6837\n\u4e0d\u65ad\u4e8c\u5206\uff0c\u5982\u679c\u4fee\u6539\u7684\u533a\u95f4\u5305\u62ec\u76ee\u524d\u904d\u5386\u7684\u533a\u95f4\n\u90a3\u5c31\u8fd4\u56de\u8fd9\u4e00\u533a\u95f4\u7684\u533a\u95f4\u548c\n\u7136\u540e\u56de\u6eaf\n\u628a\u8be2\u95ee\u5230\u7684\u53f6\u5b50\u8282\u70b9\u6216\u88ab\u5305\u542b\u7684\u533a\u95f4\u76f8\u52a0\u5c31\u662f\u7b54\u6848\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n```cpp\ninline int check(int k,int l,int r,int x,int y)\n{\n    if(l>=x&&r<=y)\n    {\n        return sum[k];\n    }//\u4fee\u6539\u7684\u533a\u95f4\u5305\u62ec\u76ee\u524d\u904d\u5386\u7684\u533a\u95f4\uff0c\u5c31\u8fd4\u56de\u8fd9\u4e00\u533a\u95f4\u7684\u533a\u95f4\u548c\n    int mid=(l+r)>>1,ans=0;\n    pushdown(k,l,r,mid);//\u6807\u8bb0\u4e0b\u4f20\n    if(x<=mid)\n    {\n        ans=check(ls(k),l,mid,x,y);\n    }\n    if(mid<y)\n    {\n        ans+=check(rs(k),mid+1,r,x,y);\n    }//\u628a\u5de6\u53f3\u90e8\u5206\u7684\u503c\u5168\u90fd\u52a0\u4e0a\n    return ans;\n}\n```\n## 4\u3001\u61d2\u6807\u8bb0\u548c\u6807\u8bb0\u4e0b\u4f20\n```\n\u7ebf\u6bb5\u6811\u7684\u4f18\u70b9\u4e0d\u5728\u4e8e\u5168\u8bb0\u5f55\n\uff08\u90a3\u6837\u590d\u6742\u5ea6\u5c31\u4e0d\u662fO(logn)\u4e86\uff09\n\u800c\u5728\u4e8e\u4f20\u9012\u5f0f\u8bb0\u5f55\n\u5176\u5b9e\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u53eb\u505a\u6807\u8bb0\u6c38\u4e45\u5316\n\u4f46\u662f\u7531\u4e8e\u4f5c\u8005\u592a\u849f\uff0c\u6240\u4ee5\u5728\u6b64\u5c31\u4e0d\u4f5c\u4ecb\u7ecd\u4e86\n\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u6765\u5207\u4e00\u4e0b\u8fd9\u4e9b\u9898\u76ee\n```\n## [1st](https://www.luogu.org/problemnew/show/P3834) ~ [2nd](https://www.luogu.org/problemnew/show/P3919)\n```\n\u6807\u8bb0\u4e0b\u4f20\u7684\u672c\u8d28\u4e5f\u548c\u524d\u9762\u64cd\u4f5c\u4e00\u6837\n\u5982\u679c\u64cd\u4f5c\u4e00\u6bb5\u533a\u95f4\n\u90a3\u5c31\u53ea\u8981\u8bb0\u5f55\u5728\u8fd9\u6bb5\u533a\u95f4\u516c\u5171\u7956\u5148\u8282\u70b9\u4e0a\n\uff08\u5355\u70b9\u5176\u5b9e\u4e5f\u662f\u533a\u95f4\uff0c\u53ea\u4e0d\u8fc7\u957f\u5ea6\u4e3a1\u7f62\u4e86\uff09\n\u5f53\u6211\u4eec\u9700\u8981\u67e5\u8be2\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u7684\u65f6\u5019\u6211\u4eec\u518d\u8fdb\u884c\u66f4\u65b0\n\u4e5f\u5c31\u662f\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5c31\u4e0b\u4f20\u6807\u8bb0\n\u8981\u7528\u7684\u65f6\u5019\u5c31\u4f7f\u7528\u6807\u8bb0\n\u518d\u5c06\u4f7f\u7528\u7684\u6807\u8bb0\u6e05\u96f6\n\u6211\u4eec\u91c7\u7528\u4e0a\u8ff0\u65b9\u5f0f\n\u5c31\u53ea\u9700\u8981\u5728\u6bcf\u6b21\u64cd\u4f5c\u65f6\u4e0b\u4f20\u4e00\u6b21\u6807\u8bb0\u5373\u53ef\n\u5927\u5927\u8282\u7701\u4e86\u65f6\u95f4\n\u8fd9\u79cd\u4e0d\u4ec5\u7b80\u5355\u7c97\u66b4\uff0c\u8fd8\u5269\u65f6\u95f4\u7684\u65b9\u6cd5\n\u88ab\u79f0\u4e3a\u2014\u2014\u2014\u2014\u61d2\u6807\u8bb0\uff08lazy tag\uff09\n\u4f46\u662f\u5728\u8bbf\u95ee\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u65f6\n\u90fd\u9700\u8981\u4fdd\u8bc1\u8be5\u8282\u70b9\u7684\u7956\u5148\u6807\u8bb0\u90fd\u88ab\u6e05\u7a7a\n\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\n\n\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a\n```\n```cpp\ninline void pushdown(int k,int l,int r,int mid)\n{\n    if(!add[k])\n    {\n        return;\n    }\n    ad(ls(k),l,mid,add[k]);\n    ad(rs(k),mid+1,r,add[k]);\n    add[k]=0;\n} \n```\n# \u4e09\u3001\u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ls(k) (k)<<1\n#define rs(k) (k)<<1|1\n#define int long long\n#define maxn 100005\nint n,m,a[maxn],x,y,z,b,sum[maxn*4],add[maxn*4];\ninline void build(int k,int l,int r)\n{\n    if(l==r)\n    {\n        sum[k]=a[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(ls(k),l,mid);\n    build(rs(k),mid+1,r);\n    sum[k]=sum[ls(k)]+sum[rs(k)];\n}\ninline void ad(int k,int l,int r,int v)\n{\n    add[k]+=v;\n    sum[k]+=v*(r-l+1);\n}\ninline void pushdown(int k,int l,int r,int mid)\n{\n    if(!add[k])\n    {\n        return;\n    }\n    ad(ls(k),l,mid,add[k]);\n    ad(rs(k),mid+1,r,add[k]);\n    add[k]=0;\n} \ninline void ADD(int k,int l,int r,int x,int y,int v)\n{\n    if(l>=x&&r<=y)\n    {\n        ad(k,l,r,v);\n        return;\n    }\n    int mid=(l+r)>>1;\n    pushdown(k,l,r,mid);\n    if(x<=mid)\n    {\n        ADD(ls(k),l,mid,x,y,v);\n    }\n    if(mid<y)\n    {\n        ADD(rs(k),mid+1,r,x,y,v);\n    }\n    sum[k]=sum[ls(k)]+sum[rs(k)];\n}\ninline int check(int k,int l,int r,int x,int y)\n{\n    if(l>=x&&r<=y)\n    {\n        return sum[k];\n    }\n    int mid=(l+r)>>1,ans=0;\n    pushdown(k,l,r,mid);\n    if(x<=mid)\n    {\n        ans=check(ls(k),l,mid,x,y);\n    }\n    if(mid<y)\n    {\n        ans+=check(rs(k),mid+1,r,x,y);\n    }\n    return ans;\n}\nsigned main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i];\n    }\n    build(1,1,n);\n    while(m--)\n    {\n        cin>>b>>x>>y;\n        if(b==1)\n        {\n            cin>>z;\n            ADD(1,1,n,x,y,z);\n        }\n        else\n        {\n            cout<<check(1,1,n,x,y)<<endl;\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1533996745,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u6d45\u8c08\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2"
    },
    {
        "content": "# \u8fd9\u7bc7\u9898\u89e3\u8bf4\u4e86\u4ec0\u4e48\uff1f\r\n\r\n\u8fd9\u7bc7\u9898\u89e3\u5305\u62ec\u4e86\u4e09\u79cd\u89e3\u51b3 [P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.com.cn/problem/P3372) \u7684\u65b9\u6cd5\uff1a\r\n\r\n - \u7ebf\u6bb5\u6811 \uff08\u4ec5\u4ec5\u7ed9\u51fa\u4e86\u4ee3\u7801\uff09\r\n \r\n - \u5e73\u8861\u6811\r\n \r\n - CDQ\u5206\u6cbb\r\n \r\n\u9996\u5148\u58f0\u660e\uff1a\u8fd9\u7bc7\u9898\u89e3\u6240\u7528\u7684 **\u6709\u4e9b** \u7b97\u6cd5 **\u5e76\u4e0d\u662f** \u89e3\u51b3\u8fd9\u9053\u9898\u7684\u6b63\u786e\u7b97\u6cd5\u3002\u5982\u679c\u4f60\u60f3\u8981\u770b\u6b63\u786e\u7684 **\u7ebf\u6bb5\u6811** \uff0c\u5927\u53ef\u4e0d\u5fc5\u770b\u8fd9\u7247\u9898\u89e3\u3002\r\n\r\n\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\r\n\r\n ---------------\r\n\r\n\r\n## \u89e3\u6cd5\u4e00\uff1a \u7ebf\u6bb5\u6811\r\n\r\n\u8fd9\u9053\u9898\u7684\u6b63\u786e\u89e3\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\u3002\r\n\r\n\u4f46\u662f\uff0c\u6211\u5e76\u4e0d\u6253\u7b97\u5199\u7ebf\u6bb5\u6811\u7684\u5177\u4f53\u6784\u5efa\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5176\u4ed6\u7684\u9898\u89e3\u8bb2\u7684\u6bd4\u6211\u597d\u5f97\u591a\u3002\u5982\u679c\u60a8\u6253\u5f00\u9898\u89e3\u5c31\u662f\u4e3a\u4e86\u5b66\u4e60\u7ebf\u6bb5\u6811\uff0c ~~\u90a3\u4e5f\u53ef\u4ee5\u62ff\u6211\u7684\u4ee3\u7801\u770b\u770b\uff0c\u6bd5\u7adf\u6ce8\u91ca\u5199\u7684\u8fd8\u662f\u86ee\u591a\u7684~~ \r\n\r\n\u8fd9\u91cc\u8d34\u51fa\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include<iostream>\r\nusing namespace std;\r\nconst int N=100010;\r\ntypedef long long ll;\r\nll tree[N*4];\r\nll lazy[N*4];\r\nint a[N];\r\n#define lson ((root<<1))\r\n#define rson ((root<<1)+1)\r\n#define mid (l+r>>1)\r\nvoid build(int root,int l,int r){// O(n) \u5efa\u6811\r\n\tif(l==r){\r\n\t\ttree[root]=a[l];//\u5982\u679c\u9012\u5f52\u5230\u4e86\u6700\u5e95\u5c42\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r\n\t\treturn;\r\n\t}\r\n\tbuild(lson,l,mid);//\u5206\u522b\u9012\u5f52\u5de6\u53f3\u5b50\u6811\u3002\r\n\tbuild(rson,mid+1,r);\r\n\ttree[root]=tree[lson]+tree[rson];//\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u6240\u8986\u76d6\u7684\u5143\u7d20\u7684\u548c\u3002\r\n}\r\nvoid fun(int root,int l,int r,int v){//\u63a8\u6807\u8bb0\r\n\ttree[root]+=(r-l+1)*v;\r\n\tlazy[root]+=v;\r\n}\r\nvoid pushdown(int root,int l,int r){//\u653e\u6807\u8bb0\r\n\tfun(lson,l,mid,lazy[root]);\r\n\tfun(rson,mid+1,r,lazy[root]);\r\n\tlazy[root]=0;\r\n}\r\nvoid update(int root,int l,int r,int lr,int rr,int v){//\u66f4\u65b0\r\n\tif(r<lr||rr<l){//\u5982\u679c\u73b0\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u5b8c\u5168\u4e0d\u5728\u66f4\u65b0\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r\n\t\treturn ;\r\n\t}\r\n\tif(lr<=l&&r<=rr){//\u5982\u679c\u73b0\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u5b8c\u5168\u5728\u66f4\u65b0\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u76f4\u63a5\u63a8\u6807\u8bb0\u3002\r\n\t\tfun(root,l,r,v);\r\n\t\treturn;\r\n\t}\r\n\tpushdown(root,l,r);//\u4e0b\u653e\u6807\u8bb0\u3002\r\n\tupdate(lson,l,mid,lr,rr,v);\r\n\tupdate(rson,mid+1,r,lr,rr,v);\r\n\ttree[root]=tree[lson]+tree[rson];//\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u6240\u8986\u76d6\u7684\u5143\u7d20\u7684\u548c\u3002\r\n}\r\nll query(int root,int l,int r,int lr,int rr){//\u5dee\u4e0d\u591a\u548cupdate\u51fd\u6570\u4e00\u6837\u3002\r\n\tif(r<lr||rr<l){//\u5982\u679c\u73b0\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u5b8c\u5168\u4e0d\u5728\u67e5\u8be2\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r\n\t\treturn 0;\r\n\t}\r\n\tif(lr<=l&&r<=rr){//\u5982\u679c\u73b0\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u7ebf\u6bb5\u5b8c\u5168\u5728\u67e5\u8be2\u7684\u8303\u56f4\u4e4b\u5185\uff0c\u76f4\u63a5sum\u3002\r\n\t\treturn tree[root];\r\n\t}\r\n\tpushdown(root,l,r);//\u4e0b\u653e\u6807\u8bb0\r\n\treturn (ll)query(lson,l,mid,lr,rr)+(ll)query(rson,mid+1,r,lr,rr);\r\n}\r\nint n,m;\r\nint main(){\r\n\tcin>>n>>m;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tcin>>a[i];\r\n\t}\r\n\tbuild(1,1,n);\r\n\tfor(int a,b,c,d,i=1;i<=m;i++){\r\n\t\tcin>>a;\r\n\t\tif(a==1){\r\n\t\t\tcin>>b>>c>>d;\r\n\t\t\tupdate(1,1,n,b,c,d);\r\n\t\t}else{\r\n\t\t\tcin>>b>>c;\r\n\t\t\tcout<<(ll)query(1,1,n,b,c)<<endl;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5efa\u6811\u662f $O(n)$ \u7684\uff08\u76f4\u89c2\u611f\u53d7\u6765\u770b\uff0c\u5b83\u5f88\u5bb9\u6613\u88ab\u8ba4\u4e3a\u662f $O(n\\log n)$ \uff09\uff1a\r\n\r\n\u6839\u636e[\u4e3b\u5b9a\u7406](https://www.luogu.com.cn/blog/GJY-JURUO/master-theorem)\uff0c$T(n)=2T(\\dfrac{n}{2})+\\theta(1)=O(n)$\r\n\r\n\u5c3d\u7ba1\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u505a\u5230 $O(n)$ \uff0c\u4f46\u662f\u8ddf\u8fd9\u4e2a\u4ee3\u7801\u7684\u5176\u4ed6\u90e8\u5206\u6bd4\u8d77\u6765\uff0c\u8fd9\u53ea\u662f\u4f18\u5316\u4e86\u4e2a\u5e38\u6570\u3002\r\n\r\n## \u89e3\u6cd5\u4e8c\uff1a\u5e73\u8861\u6811\r\n\r\n\u5e73\u8861\u6811\u6240\u80fd\u7ef4\u62a4\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u52a8\u6001\u96c6\u5408\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u67d0\u4e9b\u5e8f\u5217\u533a\u95f4\u95ee\u9898\u3002\u4f46\u662f\u5982\u679c\u9700\u8981\u5b9e\u73b0\u533a\u95f4\u64cd\u4f5c\uff0c\u666e\u901a\u7684\u5e73\u8861\u6811\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u6700\u597d\u4f7f\u7528 **\u80fd\u591f\u652f\u6301\u5206\u88c2\u548c\u5408\u5e76** \u7684\u5e73\u8861\u6811\u3002\r\n\r\n**\u8be5\u89e3\u6cd5\u524d\u7f6e\u77e5\u8bc6\uff1a`Splay` \u6216\u662f `fhq-Treap` \u3002**\r\n\r\n\u8fd9\u7bc7\u9898\u89e3\u6240\u91c7\u7528\u7684\u5e73\u8861\u6811\u662f `fhq-Treap` \u3002\u5b83\u6613\u4e8e\u5b9e\u73b0\uff0c\u5e38\u6570\u4e5f\u4e0d\u9519\uff08\u867d\u7136\u8ddf\u7ebf\u6bb5\u6811\u6bd4\u8d77\u6765\u5c31\u5dee\u8fdc\u4e86\r\n\r\n\u4e0d\u540c\u4e8e\u6309\u7167\u503c\u6765\u8fdb\u884c\u6392\u5e8f\u7684\u5e73\u8861\u6811\uff0c\u8fd9\u68f5\u5e73\u8861\u6811\u662f **\u6309\u7167\u4e0b\u6807\u8fdb\u884c\u6392\u5e8f** \u7684\u3002\r\n\r\n\u4e0b\u56fe\u6f14\u793a\u4e86\u6309\u7167\u4e0b\u6807\u8fdb\u884c\u6392\u5e8f\u7684\u5e73\u8861\u6811\u548c\u6309\u7167\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u5e73\u8861\u6811\u7684\u533a\u522b\u3002\r\n\r\n![\u6f14\u793a\u56fe\u7247](https://cdn.luogu.com.cn/upload/image_hosting/ug7ssc0y.png?x-oss-process=image/resize,m_lfit,h_1700,w_605)\r\n\r\n~~\u8fd9\u4e2a\u5730\u65b9\u5e94\u8be5\u633a\u597d\u7406\u89e3\u5427~~\r\n\r\n\u90a3\u4e48\uff0c\u6784\u5efa\u4e86\u4e00\u68f5\u6309\u7167\u4e0b\u6807\u6392\u5e8f\u7684\u5e73\u8861\u6811\u4e4b\u540e\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f\r\n\r\n\u6211\u4eec\u5e94\u8be5\u8003\u8651\u53bb\u7ef4\u62a4 **\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u503c\u4e4b\u548c** \u3002\r\n\r\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5c06\u5bf9\u5e94\u7684\u5b50\u6811\u5206\u88c2\u51fa\u6765\uff0c\u7136\u540e\u67e5\u8be2\u8fd9\u4e2a\u88ab\u5206\u88c2\u51fa\u6765\u7684\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684 \u5b50\u6811\u4e4b\u548c \u5373\u53ef\u3002\r\n\r\n\u5b9e\u9645\u4e0a\u8fd9\u91cc\u662f\u5f88\u597d\u7ef4\u62a4\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 $sum$ \uff0c\u5f53\u8fd9\u68f5\u5e73\u8861\u6811\u5206\u88c2\u6216\u8005\u662f\u5408\u5e76\u7684\u65f6\u5019\u91cd\u65b0\u8ba1\u7b97\u53d7\u5230\u5f71\u54cd\u7684\u8282\u70b9\u7684 $sum$ \u5373\u53ef\uff0c\u4e5f\u5c31\u662f **\u5206\u88c2\u64cd\u4f5c\u6216\u8005\u662f\u5408\u5e76\u64cd\u4f5c\u6240\u7ecf\u8fc7\u7684\u8282\u70b9** \u3002\r\n\r\n\u90a3\u4e48\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a $lazy$ \uff0c\u5f53\u6211\u4eec\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e5f\u662f\u50cf\u67e5\u8be2\u4e00\u6837\uff0c\u5148\u628a\u6211\u4eec\u8981\u4fee\u6539\u7684\u8fd9\u68f5\u5b50\u6811\u5206\u88c2\u51fa\u6765\uff0c\u7136\u540e **\u7ed9\u6811\u6839\u6253\u4e0a\u4e00\u4e2a `lazy tag`** \u3002\r\n\r\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a `lazy tag` \u3002\u5176\u5b9e\u50cf $sum$ \u4e00\u6837\uff0c\u6211\u4eec\u6240\u8981\u505a\u7684\u5176\u5b9e\u5c31\u53ea\u662f **\u5728\u5206\u88c2\u64cd\u4f5c\u6216\u662f\u5408\u5e76\u64cd\u4f5c\u4e4b\u524d\u5c06 `lazy tag` \u4e0b\u653e** \u3002\r\n\r\n\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u5c31\u4e0d\u96be\u5199\u51fa\u6765\u4e86\u3002\r\n\r\n\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(m \\log n)$\r\n\r\n\u4e4b\u6240\u4ee5\u8fd9\u91cc\u7528\u7684\u662f\u201c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u201d\uff0c\u662f\u56e0\u4e3a `Treap` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u8d56\u4e8e\u968f\u673a\u51fa\u6765\u6570\u636e\u7684\u597d\u574f\u3002~~\u5b83\u662f\u4e2a\u968f\u673a\u5316\u7b97\u6cd5\u3002~~ \u4e0d\u8fc7\u8fd9\u5176\u5b9e\u4e0d\u5f71\u54cd\u4f60\u5728\u7ade\u8d5b\u7684\u65f6\u5019\u5199 `Treap` \uff0c\u8fd9\u662f\u56e0\u4e3a `Treap` \u56e0\u4e3a\u968f\u673a\u51fa\u6765\u6570\u636e\u4e0d\u597d\u800c\u5bfc\u81f4 `TLE` \u7684\u53ef\u80fd\u6027\u5fae\u4e4e\u5176\u5fae\u3002\r\n\r\n\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include<iostream>\r\n#include<cstdlib>\r\n#define int long long\r\nusing namespace std;\r\nconst int N=1e6;\r\nstruct treap{\r\n    int v,l,r,p,s,lz,su;\r\n}t[N];\r\n#define v(x) t[x].v //\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u3002\r\n#define ls(x) t[x].l //\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u513f\u5b50\u3002\r\n#define rs(x) t[x].r //\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u513f\u5b50\u3002\r\n#define p(x) t[x].p //\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u4f18\u5148\u7ea7\r\n#define s(x) t[x].s //\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\r\n#define lz(x) t[x].lz //lazy tag\r\n#define su(x) t[x].su //sum\r\nvoid pushup(int x,int v){//\u4e0a\u63a8\r\n    if(x==0)return;\r\n    v(x)+=v;\r\n    su(x)+=s(x)*v;\r\n    lz(x)+=v;\r\n}\r\nvoid pushdown(int x){//\u4e0b\u653e\r\n    pushup(ls(x),lz(x));\r\n    pushup(rs(x),lz(x));\r\n    lz(x)=0;\r\n}\r\nint merge(int x,int y){//\u5408\u5e76\u64cd\u4f5c\r\n    if(x==0||y==0)\r\n        return x+y;\r\n    if(p(x)<p(y)){\r\n        pushdown(x);//\u8fd9\u91cc\u662f\u5bf9\u4e8e lazy tag \u7684\u5904\u7406\uff1a\u5408\u5e76\u3001\u5206\u88c2\u4e4b\u524d\u5148\u4e0b\u653e\u3002\r\n        rs(x)=merge(rs(x),y);\r\n        s(x)=s(ls(x))+s(rs(x))+1;\r\n        su(x)=su(ls(x))+su(rs(x))+v(x);//\u8fd9\u91cc\u662f\u5bf9\u4e8e sum \u7684\u5904\u7406\uff1a\u5408\u5e76\u3001\u5206\u88c2\u4e4b\u540e\u66f4\u65b0 sum\r\n        return x;\r\n    }else{\r\n        pushdown(y);//\u8fd9\u91cc\u662f\u5bf9\u4e8e lazy tag \u7684\u5904\u7406\uff1a\u5408\u5e76\u3001\u5206\u88c2\u4e4b\u524d\u5148\u4e0b\u653e\u3002\r\n        ls(y)=merge(x,ls(y));\r\n        s(y)=s(ls(y))+s(rs(y))+1;\r\n        su(y)=su(ls(y))+su(rs(y))+v(y);\r\n        return y;\r\n    }\r\n}\r\nvoid split(int x,int& a,int& b,int siz){\r\n    if(x==0){\r\n        a=b=0;\r\n        return;\r\n    }\r\n    pushdown(x);//\u8fd9\u91cc\u662f\u5bf9\u4e8e lazy tag \u7684\u5904\u7406\uff1a\u5408\u5e76\u3001\u5206\u88c2\u4e4b\u524d\u5148\u4e0b\u653e\u3002\r\n    if(s(ls(x))<siz){\r\n        a=x;\r\n        split(rs(x),rs(x),b,siz-s(ls(x))-1);\r\n    }else{\r\n        b=x;\r\n        split(ls(x),a,ls(x),siz);\r\n    }\r\n    s(x)=s(ls(x))+s(rs(x))+1;\r\n    su(x)=su(ls(x))+su(rs(x))+v(x);//\u8fd9\u91cc\u662f\u5bf9\u4e8e sum \u7684\u5904\u7406\uff1a\u5408\u5e76\u3001\u5206\u88c2\u4e4b\u540e\u66f4\u65b0 sum\r\n}\r\nint cnt=0;\r\nint create(int x){\r\n    su(++cnt)=x;\r\n    v(cnt)=x;\r\n    s(cnt)=1;\r\n    p(cnt)=rand()+rand();\r\n    return cnt;\r\n}\r\nint root;\r\nint n,m;\r\nsigned main(){\r\n    cin>>n>>m;\r\n    for(int x,i=1;i<=n;i++){\r\n        cin>>x;\r\n        root=merge(root,create(x));//\u8bfb\u5165\u4e00\u4e2a\u6570\uff0c\u5e76\u76f4\u63a5\u5c06\u5b83\u5408\u5e76\u5230\u5e73\u8861\u6811\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53bb\u3002\r\n    }\r\n    int a,b,c;\r\n    for(int ty,l,r,x,i=1;i<=m;i++){\r\n        cin>>ty;\r\n        if(ty==1){\r\n            cin>>l>>r>>x;\r\n            split(root,a,b,l-1);\r\n            split(b,b,c,r-l+1);//\u5148\u5c06\u6240\u4fee\u6539\u7684\u5b50\u6811\u5206\u88c2\u51fa\u6765\r\n            pushup(b,x);//\u6253\u4e0a\u4e2alazy tag\r\n            root=merge(merge(a,b),c);//\u5408\u5e76\u56de\u53bb\r\n        }else{\r\n            cin>>l>>r;\r\n            split(root,a,b,l-1);\r\n            split(b,b,c,r-l+1);//\u5148\u5c06\u6240\u4fee\u6539\u7684\u5b50\u6811\u5206\u88c2\u51fa\u6765\r\n            cout<<su(b)<<endl;//\u67e5\u4e00\u4e0bsum\r\n            root=merge(merge(a,b),c);//\u5408\u5e76\u56de\u53bb\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## \u89e3\u6cd5\u4e09\uff1aCDQ \u5206\u6cbb\r\n\r\n\u8fd9\u624d\u662f\u8fd9\u7bc7\u9898\u89e3\u7684\u72ec\u7279\u4e4b\u5904\uff01\r\n\r\n**\u524d\u7f6e\u77e5\u8bc6\uff1aCDQ\u5206\u6cbb**\r\n\r\n\u5176\u5b9e\u4e0d\u4f1a CDQ \u5206\u6cbb\u4e5f\u53ef\u4ee5\u770b\u8fd9\u7bc7\u9898\u89e3\uff0c\u6bd5\u7adf CDQ \u5206\u6cbb\u53ea\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u5177\u4f53\u7684\u7b97\u6cd5\u3002\r\n\r\n----------------\r\n\r\n### \u5148\u5c06\u8fd9\u4e2a\u9898\u5dee\u5206\u5316\r\n\r\n\u5982\u679c\u6211\u4eec\u6765\u628a\u4e00\u4e2a\u4fee\u6539\u62c6\u5f00\uff0c\u53d8\u6210\u4e24\u4e2a\u4fee\u6539\uff0c\u5206\u522b\u4fee\u6539\u5f00\u5934\u548c\u672b\u5c3e\uff08\u4e5f\u5c31\u662f\u628a\u4e00\u4e2a\u539f\u672c\u662f $[l,r]+x$ \u7684\u4fee\u6539\u53d8\u6210 $[l,n]+x ;[r+1,n]-x$ \u7684\u4e24\u4e2a\u4fee\u6539\uff09\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u5dee\u5206\u3002\r\n\r\n\u6211\u4eec\u4e0d\u59a8\u4e5f\u628a\u539f\u672c\u7684\u6570\u7ec4\u4e5f\u8fd9\u6837\u5904\u7406\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $i \\in [1,n]$ \uff0c\u52a0\u5165\u4e24\u4e2a\u4fee\u6539\uff1a$[i,n]+a_i;[i+1,n]-a_i$ \u3002\uff08\u5176\u4e2d $a_i$ \u8868\u793a\u539f\u672c\u7684\u6570\u7ec4\u7684\u7b2c $i$ \u4e2a\u5143\u7d20\uff09\r\n\r\n\u65e2\u7136\u4fee\u6539\u90fd\u505a\u5230\u8fd9\u6837\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u67e5\u8be2\u8fd9\u4e48\u505a\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u67e5\u8be2 $[l,r]$ \uff0c\u6211\u4eec\u628a\u5b83\u62c6\u6210\u4e24\u4e2a\u67e5\u8be2 $[1,r];[1,l-1]$ \u3002\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u51cf\u53bb\u7b2c\u4e8c\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u5373\u53ef\u5f97\u5230\u539f\u672c\u7684\u67e5\u8be2\u7684\u7b54\u6848\u3002\r\n\r\n----------------\r\n\r\n### \u63a2\u7a76\u4e00\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u7684\u6784\u6210\u3002\r\n\r\n\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u67e5\u8be2 $[1,x]$ \u7684\u7b54\u6848\u662f\u600e\u4e48\u6784\u6210\u7684\uff1a\r\n\r\n\u9996\u5148\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u4fee\u6539$[y,n]+z$\uff0c\u5b83\u7684\u4f4d\u7f6e\u5728 $x$ \u4e4b\u524d \uff08\u4e5f\u5c31\u662f $y<=x$\uff09,\u5b83\u51fa\u73b0\u7684\u65f6\u95f4\u4e5f\u5728 $x$ \u4e4b\u524d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4fee\u6539\u4e00\u5b9a\u53ef\u4ee5\u5bf9\u67e5\u8be2 $[l,x]$ \u9020\u6210\u8d21\u732e\u3002\u90a3\u4e48\u8fd9\u4e2a\u8d21\u732e\u662f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u4fee\u6539\u5176\u5b9e\u76f8\u5f53\u4e8e\u628a\u533a\u95f4 $[y,x]$ \u4e4b\u95f4\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u9020\u6210\u4e86\u8d21\u732e $z$ ,\u6240\u4ee5\u8fd9\u4e2a\u4fee\u6539\u5bf9\u4e8e\u67e5\u8be2 $[1,x]$ \u7684\u8d21\u732e\u4e3a $(x-y+1)\\times z$ \u3002\r\n\r\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u641e\u660e\u767d\u4e86\u5982\u679c\u6709\u4e00\u4e2a\u4fee\u6539\u548c\u4e00\u4e2a\u67e5\u8be2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4fee\u6539\u4ec0\u4e48\u6761\u4ef6\u4e0b\u4f1a\u5bf9\u67e5\u8be2\u9020\u6210\u8d21\u732e\u4ee5\u53ca\u9020\u6210\u8d21\u732e\u7684\u91cf\u3002\u73b0\u5728\u6211\u4eec\u5c06\u8fd9\u4e2a\u7ed3\u8bba\u63a8\u5411\u591a\u4e2a\u4fee\u6539\u548c\u4e00\u4e2a\u67e5\u8be2\u3002\r\n\r\n\u6211\u4eec\u5148\u4e0d\u59a8\u8bbe $y_i$ \u4e3a\u7b2c $i$ \u4e2a\u8be2\u95ee\u7684 $y$ \uff0c $z_i$ \u4e3a\u7b2c $i$ \u4e2a\u8be2\u95ee\u7684 $z$ \u3002\r\n\r\n\u5982\u679c\u73b0\u5728\u6709 $s$ \u4e2a\u67e5\u8be2\u548c\u4e00\u4e2a\u4fee\u6539\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u67e5\u8be2\u90fd\u80fd\u5bf9\u8fd9\u4e2a\u4fee\u6539\u9020\u6210\u8d21\u732e\uff0c\uff0c\u90a3\u4e48\u8d21\u732e\u4e4b\u548c\u7406\u5e94\u662f\r\n\r\n$$\\sum_{i=1}^{s}z_i(x-y_i+1)=\\sum_{i=1}^{s}(z_ix-z_iy_i+z_i)=(x+1)\\sum_{i=1}^{s}z_i-\\sum_{i=1}^{s}z_iy_i$$\r\n\r\n--------------\r\n\r\n### \u5206\u6cbb\u7edf\u8ba1\u7b54\u6848\r\n\r\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u628a\u8fd9\u4e2a\u9898\u8f6c\u5316\u4e3a\u4e86\u5dee\u5206\u5f62\u5f0f\u548c\u641e\u660e\u767d\u4e86\u4e00\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u7684\u6784\u6210\u3002\u4f46\u662f\u77e5\u9053\u8fd9\u4e9b\u6709\u4ec0\u4e48\u7528\u5417\uff1f\u6211\u4eec\u600e\u4e48\u7528\u8fd9\u4e9b\u4fe1\u606f\u628a\u7b54\u6848\u7b97\u51fa\u6765\uff1f\r\n\r\n\u6211\u4eec\u5047\u8bbe\u6bcf\u4e00\u4e2a\u8be2\u95ee\u548c\u4fee\u6539\u73b0\u5728\u90fd\u88ab\u6211\u4eec\u653e\u5728\u4e00\u4e2a\u5e8f\u5217\u91cc\uff0c\u5b83\u4eec\u90fd\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a\r\n\r\n - $t$ \uff0c\u8868\u793a\u8fd9\u4e2a\u8be2\u95ee/\u4fee\u6539\u7684\u51fa\u73b0\u65f6\u95f4\u3002\r\n\r\n - $x$ \uff0c\u8868\u793a\u8fd9\u4e2a\u8be2\u95ee/\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\r\n \r\n - $y$ \uff0c\u5982\u679c\u8fd9\u662f\u4e2a\u4fee\u6539\u7684\u8bdd\u8868\u793a\u5b83\u6240\u52a0\u7684\u503c\uff1b\u5982\u679c\u8fd9\u662f\u4e2a\u67e5\u8be2\u7684\u8bdd\u4e3a $0$ \uff08\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6ca1\u6709\u5f71\u54cd\u7684\u4fee\u6539\uff09\u3002\r\n\r\n\u65e2\u7136\u5b83\u4eec\u7684\u5c5e\u6027\u57fa\u672c\u4e00\u81f4\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u4eec**\u8282\u70b9**\u597d\u4e86\u3002\r\n\r\n\u6211\u4eec\u91cd\u65b0\u6539\u5199\u9898\u610f\uff1a\u7ed9\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684 $t,x,y$ \uff0c\u7b97\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u83b7\u5f97\u7684\u8d21\u732e\u3002\r\n\r\n\u597d\u4e86\uff0c\u90a3\u4e48\uff0c\u73b0\u5728\u53c8\u600e\u4e48\u505a\uff1f\r\n\r\n\u5206\u6cbb\uff1f\r\n\r\n\u600e\u4e48\u5206\u6cbb\uff1f\r\n\r\n\u6211\u4eec\u8003\u8651\u5230\uff0c\u5982\u679c\u73b0\u5728\u4f60\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u8282\u70b9\uff08\u5e76\u4e14\u5b83\u4eec\u7684 $t$ \u662f\u4e00\u4e2a $[l,r]$ \u7684\u6392\u5217\uff09\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u628a\u5b83\u4eec\u5206\u4e3a\u4e24\u7c7b\uff1a\r\n\r\n 1. $t$ \u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e $\\dfrac{l+r}{2}$ \u7684\r\n\r\n 2. $t$ \u5927\u4e8e $\\dfrac{l+r}{2}$ \u7684\r\n\r\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u540c\u4e00\u7c7b\u8282\u70b9\u4e4b\u95f4\u9020\u6210\u7684\u8d21\u732e\uff0c\u6211\u4eec\u76f4\u63a5\u9012\u5f52\u4e0b\u53bb\u597d\u4e86\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u53ea\u662f\u4e0d\u540c\u7c7b\u8282\u70b9\u4e4b\u95f4\u9020\u6210\u7684\u8d21\u732e\uff0c\u800c\u4e14\uff0c**\u5982\u679c\u6709\u8d21\u732e\uff0c\u4e00\u5b9a\u662f\u7b2c\u4e00\u7c7b\u8282\u70b9\u5bf9\u7b2c\u4e8c\u7c7b\u8282\u70b9\u9020\u6210\u8d21\u732e**\u3002\r\n\r\n\u8fd9\u4e2a\u5176\u5b9e\u5f88\u663e\u7136\uff1a\u7b2c\u4e00\u7c7b\u8282\u70b9\u7684 $t$ \u90fd\u5c0f\u4e8e\u7b2c\u4e8c\u7c7b\u8282\u70b9\u7684 $t$ \uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u80fd\u8ba9\u540e\u6765\u8005\u5f71\u54cd\u5148\u6765\u8005\u3002\r\n\r\n\u4e8e\u662f\u8fd9\u5c31\u53d8\u6210\u4e86\u7b2c\u4e00\u7c7b\u8282\u70b9\u5355\u5411\u5bf9\u7b2c\u4e8c\u7c7b\u8282\u70b9\u9020\u6210\u8d21\u732e\u7684\u95ee\u9898\u3002\r\n\u90a3\u4e48\u600e\u4e48\u8ba1\u7b97\u8d21\u732e\u5462\uff1f\u6211\u4eec\u9996\u5148\u628a\u4e24\u7c7b\u8282\u70b9\u90fd\u4ee5 $x$ \u4e3a\u5173\u952e\u8bcd\u6392\u5e8f\uff0c\uff08\u56e0\u4e3a\u4e4b\u540e $x$ \u5c0f\u7684\u8282\u70b9\u80fd\u5bf9 $x$ \u5927\u7684\u8282\u70b9\u9020\u6210\u8d21\u732e\uff09\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6765\u7528\u53cc\u6307\u9488\u6cd5\u7b97\u8d21\u732e\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\uff1a\r\n\r\n**\u8bf7\u6ce8\u610f\uff1a\u539f\u6765\u7684\u8d21\u732e\u516c\u5f0f\u4e2d\uff0c$x ,y ,z$ \u7684\u5b9a\u4e49\u4e0e\u73b0\u5728\u7684\u5b9a\u4e49\u4e0d\u540c\uff0c\u8bf7\u52ff\u6df7\u6dc6\u3002**\r\n\r\n 1. \u521b\u5efa\u4e24\u4e2a\u53d8\u91cf `sum` \u548c `all` \uff0c\u5206\u522b\u8868\u793a\u5df2\u7ecf\u5904\u7406\u7684\u7b2c\u4e00\u7c7b\u8282\u70b9\u7684 $y$ \u4e4b\u503c \u548c \u5df2\u7ecf\u5904\u7406\u7684\u7b2c\u4e00\u7c7b\u8282\u70b9\u7684 $x$ \u4e0e $y$ \u7684\u4e58\u79ef\u4e4b\u548c\u3002\u8df3\u8f6c\u81f3\u7b2c 2 \u6b65\u3002\r\n\r\n 2. \u5982\u679c\u7b2c\u4e00\u7c7b\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684 $x$ \u6bd4 \u7b2c\u4e8c\u7c7b\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684 $x$ \u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u5904\u7406\u7b2c\u4e00\u7c7b\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u8df3\u8f6c\u81f3\u7b2c 3 \u6b65\uff1b\u5426\u5219\u6211\u4eec\u5c31\u5148\u5904\u7406\u7b2c\u4e8c\u7c7b\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u8f6c\u81f3\u7b2c 4 \u6b65\u3002\r\n \r\n 3. \u5c06\u7b2c\u4e00\u7c7b\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684 $y$ \u52a0\u5165 `sum` \uff0c\u5c06 $xy$ \u52a0\u5165 `all` \u3002\u5c06\u8fd9\u4e2a\u8282\u70b9\u201c\u5220\u6389\u201d\uff0c\u5e76\u8fd4\u56de\u5230\u7b2c\u4e8c\u6b65\u3002\uff08\u8ba9\u4e0b\u4e00\u4e2a\u8282\u70b9\u53d8\u6210\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\r\n \r\n 4. \u6309\u7167\u516c\u5f0f $\\text{contribution}=(x+1)\\sum_{i=1}^{s}y_i-\\sum_{i=1}^{s}x_iy_i=(x+1)sum + all$ \u7b97\u51fa\u8d21\u732e\uff0c\u5e76\u5c06\u5176\u52a0\u5165\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u603b\u8d21\u732e\u4e2d\u3002\u5c06\u8fd9\u4e2a\u8282\u70b9\u201c\u5220\u6389\u201d\uff0c\u5e76\u8fd4\u56de\u5230\u7b2c\u4e8c\u6b65\u3002\uff08\u8ba9\u4e0b\u4e00\u4e2a\u8282\u70b9\u53d8\u6210\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\r\n\r\n**\u8fd9\u91cc\u7684\u201c\u5220\u6389\u201d\u5e76\u4e0d\u662f\u771f\u7684\u5220\u6389**\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u8bf4\u660e\u539f\u7406\u800c\u5df2\u3002\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u5728\u8fd9\u4e2a\u7b97\u6cd5\u8fd0\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u7b2c\u4e8c\u7c7b\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u52a0\u4e0a\u4e86\u7b2c\u4e00\u7c7b\u8282\u70b9\u6240\u80fd\u9020\u6210\u7684\u8d21\u732e\u3002\r\n\r\n\u73b0\u5728\uff0c\u6211\u5df2\u7ecf\u5c06\u8fd9\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u8bf4\u660e\u5b8c\u6bd5\u3002\u5982\u679c\u4f60\u5728\u4e0a\u9762\u6ca1\u6709\u7406\u89e3\u660e\u767d\uff0c\u53ef\u4ee5\u5230\u4e0b\u9762\u53bb\u770b\u770b\u5177\u4f53\u5b9e\u73b0\u3002\r\n\r\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include<iostream>\r\n#include<algorithm>\r\nusing namespace std;\r\n#define int long long\r\nconst int N=1e6;\r\nint a[N];\r\nstruct query{//\u8282\u70b9\u7684\u7ed3\u6784\u4f53\u3002\r\n    int time,x,y;\r\n}p[N],temp[N];\r\nint cnt=0;\r\nvoid add(int x,int y){//\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\r\n    p[++cnt].time=cnt;\r\n    p[cnt].x=x;\r\n    p[cnt].y=y;\r\n}\r\nint ans[N];//a[x]\u7528\u6765\u5b58\u50a8t\u4e3ax\u7684\u8282\u70b9\u6240\u83b7\u5f97\u7684\u603b\u8d21\u732e\u3002\r\npair<int,int> qa[N];\r\nint n,m;\r\nbool cmp(query a,query b){//\u4e00\u4e2a\u6309\u7167 x \u6392\u5e8f\u7684 cmp \u51fd\u6570\u3002\r\n    if(a.x!=b.x)\r\n        return a.x<b.x;\r\n    return a.time<b.time;\r\n}\r\nvoid cdq(int l,int r){//\u73b0\u5728\u5728\u5904\u7406\u533a\u95f4 [l,r]\r\n    if(l==r)\r\n        return;//\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\r\n    int mid=(l+r)>>1,x=l,y=mid+1;\r\n    for(int i=l;i<=r;i++)\t\t//\u5148\u5c06\u533a\u95f4 [l,r] \u5206\u4e3a\u4e24\u7c7b\u8282\u70b9\r\n        if(p[i].time<=mid)\r\n            temp[x++]=p[i];\t//\u8fd9\u4e2a\u8282\u70b9\u5c5e\u4e8e\u7b2c\u4e00\u7c7b\r\n        else temp[y++]=p[i];  //\u8fd9\u4e2a\u8282\u70b9\u5c5e\u4e8e\u7b2c\u4e8c\u7c7b\r\n    for(int i=l;i<=r;i++)p[i]=temp[i];\t\r\n    cdq(l,mid);\t\t\t//\u5206\u6cbb\u7b2c\u4e00\u7c7b\u8282\u70b9\u4e4b\u95f4\u7684\u8d21\u732e\r\n    cdq(mid+1,r);\t\t//\u5206\u6cbb\u7b2c\u4e8c\u7c7b\u8282\u70b9\u4e4b\u95f4\u7684\u8d21\u732e\r\n    sort(p+l,p+mid+1,cmp);\t\t//\u6392\u5e8f\uff0c\u4f7f\u5f97\u5b83\u5bf9\u4e8e x \u6709\u5e8f\u3002\r\n    sort(p+mid+1,p+r+1,cmp);\r\n    x=l,y=mid+1;int sum=0,all=0;\r\n    while(x<=mid||y<=r)\t\t\t//\u53cc\u6307\u9488\u7b97\u6cd5\u3002\u5176\u4e2d x \u4ee3\u8868\u7b2c\u4e00\u7c7b\u5143\u7d20\u73b0\u5728\u7684\u4e0b\u6807\uff0cy \u4ee3\u8868\u7b2c\u4e8c\u7c7b\u5143\u7d20\u73b0\u5728\u7684\u4e0b\u6807\u3002\r\n        if(x<=mid&&(y>r||p[x].x<=p[y].x))                   //\u5982\u679c\u6211\u4eec\u8981\u5148\u5904\u7406\u7b2c\u4e00\u7c7b\u8282\u70b9\r\n            sum+=p[x].x*p[x].y,all+=p[x].y,x++;             //\u66f4\u65b0sum\u548call\r\n        else                                                //\u5426\u5219\u5904\u7406\u7b2c\u4e8c\u7c7b\u8282\u70b9\r\n        \t  ans[p[y].time]+=all*(p[y].x+1)-sum,y++;   //\u8ba1\u7b97\u8d21\u732e\r\n}\r\nsigned main(){\r\n    cin>>n>>m;\r\n    for(int i=1;i<=n;i++)\r\n        cin>>a[i];\r\n    for(int i=1;i<=n;i++)\r\n        add(i,a[i]-a[i-1]);\r\n    int qm=0;\r\n    for(int ty,l,r,x,i=1;i<=m;i++){\r\n        cin>>ty;\r\n        if(ty==1){//\u662f\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\r\n            cin>>l>>r>>x;\r\n            add(l,x);//\u8fdb\u884c\u5dee\u5206\r\n            add(r+1,-x);\r\n        }else{\r\n            cin>>l>>r;\r\n            add(l-1,0);\r\n            qa[++qm].first=cnt;//\u5b58\u4e0b\u6765\u8fd9\u4e2a\u8be2\u95ee\u5bf9\u5e94\u7740\u54ea\u4e24\u4e2a\u8be2\u95ee\uff0c\u65b9\u4fbf\u6700\u540e\u5904\u7406\u3002\r\n            add(r,0);\r\n            qa[qm].second=cnt;\r\n        }\r\n    }\r\n    cdq(1,cnt);\r\n    for(int i=1;i<=qm;i++)\r\n        cout<<ans[qa[i].second]-ans[qa[i].first]<<endl;\r\n}\r\n```\r\n\r\n\r\n------------------\r\n\r\n### \u590d\u6742\u5ea6\u5206\u6790\u548c\u4f18\u5316\r\n\r\n\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u6211\u4eec\u5199\u5b8c\u4e86\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4ec0\u4e48\u5462\uff1f\r\n\r\n\u5f88\u9057\u61be\uff0c $O(n \\log^2 n)$ \uff0c\u6bd4\u7ebf\u6bb5\u6811\u8981\u52a3\u3002\r\n\r\n\u6211\u4eec\u5148\u770b $O(n \\log^2 n)$ \u662f\u600e\u4e48\u6765\u7684\uff0c\u518d\u770b\u600e\u4e48\u628a\u5b83\u518d\u4f18\u5316\u3002\uff08\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u3002)\r\n\r\n\u6211\u4eec\u7528 $T(n)$ \u8868\u793a\u5206\u6cbb\u5b8c\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5757\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5f88\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4ee5\u4e0b\u5f0f\u5b50\uff1a\r\n\r\n$$T(n)=2T(\\dfrac{n}{2})+O(n \\log n)$$\r\n\r\n\uff08\u5176\u4e2d\u90a3\u4e2a $O(n\\log n)$ \u662f\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u53cc\u6307\u9488\u7b97\u6cd5\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u3002\uff09\r\n\r\n\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u4e3b\u5b9a\u7406\u63a8\u51fa\u6765 $T(n)= O(n\\log^2 n)$\r\n\r\n\u5982\u679c\u4f60\u6ca1\u6709\u5b66\u8fc7[\u4e3b\u5b9a\u7406](https://www.luogu.com.cn/blog/GJY-JURUO/master-theorem)\uff0c\u6b63\u597d\u53ef\u4ee5\u5b66\u5b66\uff08\r\n\r\n--------------\r\n\r\n\u590d\u6742\u5ea6\u5206\u6790\u6211\u4eec\u8bf4\u5b8c\u4e86\uff0c\u90a3\u4e48\u600e\u4e48\u4f18\u5316\u5462\uff1f\r\n\r\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5176\u5b9e\u5728\u5feb\u6392\u4e0a\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5feb\u6392\u53bb\u6389\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0 $O(n\\log n)$ \u7684\u4f18\u5f02\u590d\u6742\u5ea6\u3002\r\n\r\n\u6211\u4eec\u600e\u4e48\u4e0d\u7528\u5feb\u6392\u5462\uff1f\r\n\r\n\u4f60\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u6240\u6392\u5e8f\u7684\u4e1c\u897f\uff0c\u4e5f\u5c31\u662f\u4e0b\u4e00\u5c42\u5206\u6cbb\u7684\u533a\u95f4\uff0c\u88ab\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u4ed6\u4eec\u5206\u522b\u6709\u5e8f\u3002\r\n\r\n\u8bf4\u4eba\u8bdd\u5c31\u662f\u5047\u8bbe\u4f60\u73b0\u5728\u5728\u5904\u7406\u533a\u95f4 $[l,r]$ \uff0c\u8bbe $mid=\\dfrac{l+r}{2},lmid=\\dfrac{l+mid}{2}$\uff0c\u90a3\u4e48\u5176\u5b9e $[l,lmid]$\u662f\u6709\u5e8f\u7684\uff0c$[lmid+1,mid]$\u662f\u6709\u5e8f\u7684\u3002\u6211\u4eec\u65e0\u9700\u5feb\u6392\uff0c\u53ea\u9700\u8981\u5728 $\\text{cdq}(l,mid)$ \u4e4b\u540e\u518d\u7528\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u4e00\u6837\u7684\u4e1c\u897f\u5c31\u884c\u3002\r\n\r\n\u8fd9\u6bd4\u8f83\u4e0d\u597d\u63cf\u8ff0\uff0c\u4e0d\u8fc7\u4ee5\u4e0b\u7684\u4ee3\u7801\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002\r\n\r\n```cpp\r\nvoid cdq(int l,int r){\r\n    if(l==r)\r\n        return;\r\n    int mid=(l+r)>>1,x=l,y=mid+1;\r\n    for(int i=l;i<=r;i++)\r\n        if(p[i].time<=mid)\r\n            temp[x++]=p[i];\r\n        else temp[y++]=p[i];\r\n    for(int i=l;i<=r;i++)p[i]=temp[i];\r\n    cdq(l,mid);\r\n    cdq(mid+1,r);\r\n    x=l,y=mid+1;int sum=0,now=0,all=l;\r\n    //\u53cc\u6307\u9488\u7b97\u6cd5\r\n    while(x<=mid||y<=r)\r\n        if(x<=mid&&(y>r||p[x].x<=p[y].x))\r\n            sum+=p[x].x*p[x].y,now+=p[x].y,temp[all++]=p[x++];\r\n        else ans[p[y].time]+=now*p[y].x-sum,temp[all++]=p[y++];\r\n    for(int i=l;i<=r;i++)\r\n        p[i]=temp[i];\r\n}\r\n```\r\n\r\n\uff08\u56e0\u4e3a\u57fa\u672c\u4e0a\u53ea\u6709\u8fd9\u91cc\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u65e0\u9700\u628a\u6574\u4e2a\u4ee3\u7801\u642c\u8fc7\u6765\u3002\uff09\r\n\r\n\u5982\u679c\u4f60\u5199\u8fc7\u5f52\u5e76\u6392\u5e8f\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e1c\u897f\u5176\u5b9e\u5c31\u662f\u628a\u53cc\u6307\u9488\u7b97\u6cd5\u548c\u5f52\u5e76\u6392\u5e8f\u7684\u677f\u5b50\u63c9\u5728\u4e86\u4e00\u5757\uff0c\u6216\u8005\u8bf4\uff0c **\u5f52\u5e76\u6392\u5e8f\u7684\u5408\u5e76\u5b9e\u73b0\u5c31\u662f\u53cc\u6307\u9488\u7b97\u6cd5** \u3002\r\n\r\n\u5728\u53cc\u6307\u9488\u7b97\u6cd5\u6267\u884c\u5b8c\u4e86\u4e4b\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0 $p$ \u6570\u7ec4\u56de\u5230\u4e86 $x$ \u4e3a\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u6392\u5e8f\u7684\u72b6\u6001\u3002\r\n\r\n\u90a3\u4e48\uff0c\u6211\u4eec\u8fd9\u4e48\u6539\u4e86\u4e4b\u540e\uff0c\u590d\u6742\u5ea6\u53d8\u6210\u4e86\u4ec0\u4e48?\r\n\r\n$$T(n)=2T(\\dfrac{n}{2})+\\theta(n)=\\theta(n\\log n)$$\r\n\r\n\u8fd9\u6837\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u4e86\u3002\r\n\r\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include<iostream>\r\n#include<algorithm>\r\nusing namespace std;\r\n#define int long long\r\nconst int N=1e6;\r\nint a[N];\r\nstruct query{\r\n    int time,x,y;\r\n}p[N],temp[N];\r\nint cnt=0;\r\nvoid add(int x,int y){\r\n    p[++cnt].time=cnt;\r\n    p[cnt].x=x;\r\n    p[cnt].y=y;\r\n}\r\nint ans[N];\r\npair<int,int> qa[N];\r\nint n,m;\r\nvoid cdq(int l,int r){\r\n    if(l==r)\r\n        return;\r\n    int mid=(l+r)>>1,x=l,y=mid+1;\r\n    for(int i=l;i<=r;i++)\r\n        if(p[i].time<=mid)\r\n            temp[x++]=p[i];\r\n        else temp[y++]=p[i];\r\n    for(int i=l;i<=r;i++)p[i]=temp[i];\r\n    cdq(l,mid);\r\n    cdq(mid+1,r);\r\n    x=l,y=mid+1;int sum=0,now=0,all=l;\r\n    while(x<=mid||y<=r)\r\n        if(x<=mid&&(y>r||p[x].x<=p[y].x))\r\n            sum+=p[x].x*p[x].y,now+=p[x].y,temp[all++]=p[x++];\r\n        else ans[p[y].time]+=now*p[y].x-sum,temp[all++]=p[y++];\r\n    for(int i=l;i<=r;i++)\r\n        p[i]=temp[i];\r\n}\r\nbool cmp(query a,query b){\r\n    if(a.x!=b.x)\r\n    \t  return a.x<b.x;\r\n    return a.time<b.time;\r\n}\r\nsigned main(){\r\n    cin>>n>>m;\r\n    for(int i=1;i<=n;i++)\r\n        cin>>a[i];\r\n    for(int i=1;i<=n;i++)\r\n        add(i,a[i]-a[i-1]);\r\n    int qm=0;\r\n    for(int ty,l,r,x,i=1;i<=m;i++){\r\n        cin>>ty;\r\n        if(ty==1){//update\r\n            cin>>l>>r>>x;\r\n            add(l,x);\r\n            add(r+1,-x);\r\n        }else{\r\n            cin>>l>>r;\r\n            add(l,0);\r\n            qa[++qm].first=cnt;\r\n            add(r+1,0);\r\n            qa[qm].second=cnt;\r\n        }\r\n    }\r\n    sort(p+1,p+1+cnt,cmp);\r\n    cdq(1,cnt);\r\n    for(int i=1;i<=qm;i++)\r\n        cout<<ans[qa[i].second]-ans[qa[i].first]<<endl;\r\n}\r\n```\r\n\r\n\u5b8c\u7ed3\u6492\u82b1\uff01\uff08\uff08\uff08\r\n\r\n\u8fd9\u7bc7\u9898\u89e3\u96be\u514d\u4f1a\u6709\u4e00\u4e9b\u9519\u8bef\uff0c\u5982\u679c\u60a8\u53d1\u73b0\u4e86\u4e00\u4e9b\u9519\u8bef\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u8c22\u8c22\uff01\r\n\r\n## \u5f15\u7528\uff1a\r\n\r\n\u6d1b\u8c37\u7528\u6237\u201c`\u8fd9\u4eba\u592a\u83dc\u4e86`\u201d\u7684\u6d1b\u8c37\u65e5\u62a5\u535a\u5ba2\uff1a[https://www.luogu.com.cn/blog/GJY-JURUO/master-theorem](https://www.luogu.com.cn/blog/GJY-JURUO/master-theorem)\r\n\r\nOrz Orz %%%",
        "postTime": 1625131956,
        "uid": 82284,
        "name": "Echidna",
        "ccfLevel": 7,
        "title": "P3372 \u9898\u89e3"
    },
    {
        "content": "\u66f4\u65b0\uff1a\uff08\u4e4b\u524d\u56fe\u6302\u4e86\uff0c\u73b0\u5728\u91cd\u65b0\u4e0a\u4f20\u4e00\u4e0b\uff09\n\n\n\n------------\n\n\u4eca\u5929\u672c\u849f\u84bb\u7ec8\u4e8e\u5b66\u4e86\u7ebf\u6bb5\u6811\uff0c\u6211\u89c9\u5f97\u6709\u5fc5\u8981\u6765\u8bb2\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u6781\u597d~~\u6bd2\u7624~~\u7684\u7b97\u6cd5\u3002\n\n## \u90a3\u4e48\uff0c\u4ec0\u4e48\u662f\u7ebf\u6bb5\u6811\u5462\uff1f\n\n\u7ebf\u6bb5\u6811\uff08Interval Tree\uff09\u3002\u53c8\u540d\u4e3a\u533a\u95f4\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u5982\u56fe\u8868\u793a\u4e00\u4e2a1~10\u533a\u95f4\u7684\u7ebf\u6bb5\u6811\u7ed3\u6784\u3002\n![](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2676049308,1082598863&fm=26&gp=0.jpg)\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5b83\u53ef\u4ee5\u505a\uff1a\n\n1\u3001\u67e5\u8be2\u67d0\u4e2a\u533a\u95f4\n\n2\u3001\u4fee\u6539\u67d0\u4e2a\u533a\u95f4\u6216\u70b9\n\n\u662f\u4e0d\u662f\u89c9\u5f97\u53ef\u4ee5\u5e72\u7684\u4e8b\u5f88\u5c11\uff1f\n\n~~\uff08\u5176\u5b9e\u6211\u4e5f\u89c9\u5f97\uff09~~\n\nNO\uff01\u5b83\u7684\u7528\u5904\u5f88\u5927\uff0c\u5bf9\u4e8e\u6240\u6709\u533a\u95f4\u7684\u95ee\u9898\uff0c\u4ed6\u51e0\u4e4e\u90fd\u53ef\u4ee5\u89e3\u51b3\uff01\u5e76\u4e14\u8fd8\u633a\u5feb\u3002\n\n\u597d\u4e86\uff0c\u6211\u4eec\u5148\u6765\u5eb7\u5eb7\u8fd9\u4e2a\u9898\u3002\n\n[\u6d1b\u8c37P3372 \u7ebf\u6bb5\u6811\u6a21\u677f](https://www.luogu.org/problem/P3372)\n\n\u9996\u5148\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a\u9898\u76ee\u8981\u6c42\u6211\u4eec\u8fdb\u884c\u533a\u95f4\u4fee\u6539+\u533a\u95f4\u67e5\u8be2\uff0c\u770b\u770b\u4e0a\u9762\u7ebf\u6bb5\u6811\u7684\u56fe\uff0c\u662f\u4e0d\u662f\u89c9\u5f97\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u4e3a\u8fd9\u4e2a\u9898\u800c\u751f\u7684\uff1f\uff01\uff01\n\n~~\u4e0d\uff0c\u5176\u5b9e\u662f\u8fd9\u4e2a\u9898\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u800c\u751f\u7684~~\n\n\u90a3\u4e48\u7b2c\u4e00\u4e2a\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5efa\u6811\uff1f\u6211\u4eec\u53ef\u4ee5\u6e05\u695a\u5730\u901a\u8fc7\u4e0a\u56fe\u53d1\u73b0\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9\u90fd\u662f\u7531\u5b83\u7684\u7236\u4eb2\u8282\u70b9**\u4e8c\u5206**\u800c\u6765\u7684\uff0c\u518d\u901a\u8fc7\u4e8c\u53c9\u6811\u7684\u6027\u8d28\n\n**\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u7236\u8282\u70b9i\uff0c\u5b83\u7684\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u5206\u522b\u4e3ai\u4e58\u4ee52\uff0ci\u4e58\u4ee52+1**\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u7528\u6570\u7ec4\u6765\u6a21\u62df\u7ebf\u6bb5\u6811\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n```cpp\nvoid build(int id,int l,int r)\n{\n\ttree[id].l=l;\n\ttree[id].r=r;//l\uff0cr\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u3002\n\tif(l==r)\n\t{\n\t\ttree[id].sum=a[l];\n\t\treturn;\n\t}//l==r\u65f6\u8bf4\u660e\u5b83\u5c31\u662f\u6700\u4e0b\u5c42\u53f6\u5b50\u8282\u70b9\uff08\u53ea\u4ee3\u8868\u4e00\u4e2a\u6570\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5c31\u5c06a\u6570\u7ec4\uff08\u539f\u59cb\u6570\u5217\uff09\u7684\u7b2cl\uff08\u6216r\uff09\u4e2a\u5143\u7d20\u6620\u5c04\u4e0a\u53bb\u3002\n\tint mid=(l+r)/2;\n\tbuild(id*2,l,mid);\n\tbuild(id*2+1,mid+1,r);//\u4e8c\u5206\u5efa\u6811\n\ttree[id].sum=tree[id*2].sum+tree[id*2+1].sum;//sum\u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u7684\u533a\u95f4\u548c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8282\u70b9\u7684sum\u503c\u7b49\u4e8e\u5b83\u7684\u513f\u5b50\u8282\u70b9\u7684\u503c\u4e4b\u548c\u3002\n}\n```\n\n\u73b0\u5728\u5efa\u6811\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u90a3\u533a\u95f4\u66f4\u65b0\u600e\u4e48\u529e\u5462\uff1f\n\n\u73b0\u5728\u6211\u4eec\u601d\u8003\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u8981\u5bf9\u8fd9\u9897\u6811\u4e0a\u7684\u533a\u95f4\u52a0\u4e0av\uff0c\u662f\u4e0d\u662f\u53ea\u7528\u627e\u5230\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u7684\u8282\u70b9\uff08\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u8282\u70b9\uff0c\u4f8b\u5982[2,3]\u8fd9\u4e2a\u533a\u95f4\u5c31\u9700\u8981\u67e5\u627e[2,2]\u548c[3,3]\u8fd9\u4e24\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5c06\u4ed6\u4eec\u7684sum\u52a0\u8d77\u6765\uff09\uff0c\u7136\u540e**\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684sum\u503c\u52a0\u4e0av\u4e58\u4ee5\u8fd9\u4e2a\u533a\u95f4\u6240\u5305\u542b\u7684\u6570\u7684\u4e2a\u6570**\uff1f\u4e0b\u6b21\u8bbf\u95ee\u76f8\u540c\u7684\u533a\u95f4\u7684\u65f6\u5019\u76f4\u63a5\u5c06\u8fd9\u4e2a\u6570\u8fd4\u56de\u8fc7\u53bb\uff0c\u6839\u672c\u5c31\u4e0d\u7528\u518d\u5411\u4e0b\u904d\u5386\u4e86\u3002\n\n\u4f46\u662f\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u4e0a\u4e00\u6b21\u6211\u5bf9[1,2]\u8fd9\u4e2a\u533a\u95f4\u52a0\u4e86v\uff0c\u8fd9\u4e00\u6b21\u6211\u60f3\u77e5\u9053[2,3]\u7684\u533a\u95f4\u548c\u600e\u4e48\u529e\u5462\uff1f\u8981\u662f\u53ea\u7528\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684\u65b9\u6cd5\uff0c\u5f88\u660e\u663e\u904d\u5386\u5230[2,2]\u7684\u65f6\u5019\u8fd9\u4e2a\u70b9\u5e76\u6ca1\u6709\u52a0v\uff0c\u90a3\u8fd4\u56de\u65f6\u7b54\u6848\u5c31\u9519\u4e86\u5440\uff01\n\n\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u65f6\u5ef6\u8fdf\u6807\u8bb0\uff08lazy\uff09\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u5b83\u4ee3\u8868\u6211\u5bf9\u8fd9\u4e2a\u533a\u95f4\u7684\u6570\u52a0\u8fc7\u7684\u503c\uff0c\u6211\u4eec\u5728\u5bf9\u4e00\u4e2a\u533a\u95f4\u52a0\u4e86v\u4e4b\u540e\uff0c\u6211\u4eec\u5c06lazy\u7684\u503c\u4e5f\u52a0\u4e0a\u8fd9\u4e2av\uff0c\u540e\u6765\u6211\u4eec\u518d\u8bbf\u95ee\u8fd9\u4e2a\u533a\u95f4\u4f46\u53ea\u662f\u8bbf\u95ee\u8fd9\u4e2a\u533a\u95f4\u7684\u4e00\u90e8\u5206\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u7236\u8282\u70b9\u4e0b\u9762\u7684\u513f\u5b50\u8282\u70b9\u9700\u8981\u52a0\u4e0a\u591a\u5c11\u4e86\uff0c\u4f46\u6211\u4eec\u73b0\u5728\u4e0d\u7528\u6025\u7740\u5c06\u8fd9\u4e2alazy\u6807\u8bb0\u7ed9\u5b83\u7684\u513f\u5b50\u4eec\u52a0\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u5f88\u8d39\u65f6\uff0c\u5f53\u6211\u4eec\u4e0b\u6b21\u5c06\u8981\u8bbf\u95ee\u5b83\u7684\u513f\u5b50\u8282\u70b9\u65f6\u518d\u7ed9\u4ed6\u4eec\u52a0\u4e0alazy\u6807\u8bb0\uff0c\u6b64\u65f6\u8fd9\u4e2a\u7236\u8282\u70b9\u7684lazy\u503c\u5c31\u8981\u6e05\u96f6\uff0c\u6211\u4eec\u5c31\u79f0\u5176\u4e3a\u6807\u8bb0\u4e0b\u4f20\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u4eec\u5728\u8bbf\u95ee[2,3]\u65f6\uff0c\u6211\u4eec\u4f1a\u8bbf\u95ee[2,2]\u548c[3,3]\u8fd9\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u8981\u8bbf\u95ee[2,2]\u65f6\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u8bbf\u95ee[1,2]\u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u5728\u5411\u4e0b\u904d\u5386\u7684\u540c\u65f6\uff0c\u6211\u4eec\u5c31\u987a\u4fbf\u5c06lazy\u6807\u8bb0\u4e0b\u4f20\uff0c\u4e0b\u4f20\u65f6\u5c31\u628a\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684lazy\u52a0\u4e0a\u8fd9\u4e2a\u503c\uff0c\u518d\u6309\u4e4b\u524d\u8bf4\u5230\u7684\u65b9\u6cd5\u66f4\u65b0sum\u3002\u5982\u6b64\u53cd\u590d\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid down(int id)\n{\n\ttree[id*2].lazy+=tree[id].lazy;\n\ttree[id*2].sum+=(tree[id*2].r-tree[id*2].l+1)*tree[id].lazy;//\u4e0b\u4f20\u5de6\u513f\u5b50\u3002\n\ttree[id*2+1].lazy+=tree[id].lazy;\n\ttree[id*2+1].sum+=(tree[id*2+1].r-tree[id*2+1].l+1)*tree[id].lazy;//\u4e0b\u4f20\u53f3\u513f\u5b50\n\ttree[id].lazy=0;//\u5c06\u6807\u8bb0\u6e05\u96f6\n}\nvoid update(int id,int l,int r,int v)\n{\n\tif(tree[id].l>r || tree[id].r<l) return; //\u5982\u679c\u4f60\u8981\u8bbf\u95ee\u7684\u533a\u95f4\u548c\u4f60\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u533a\u95f4\u5b8c\u5168\u4e0d\u91cd\u5408\uff0c\u90a3\u4e48\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e\u526a\u679d\u3002\n\tif(tree[id].l>=l && tree[id].r<=r)\n\t{\n\t\ttree[id].lazy+=v;\n\t\ttree[id].sum+=(tree[id].r-tree[id].l+1)*v;\n\t\treturn;\n\t}//\u5982\u679c\u4f60\u8981\u8bbf\u95ee\u7684\u533a\u95f4\u548c\u5f53\u524d\u904d\u5386\u5230\u7684\u533a\u95f4\u91cd\u5408\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u628alazy\u548csum\u66f4\u65b0\uff0c\u7136\u540e\u8fd4\u56de\uff0c\u56e0\u4e3a\u6ca1\u5fc5\u8981\u518d\u5411\u4e0b\u4e86\uff01\n\tif(tree[id].lazy>0) down(id);//\u4e4b\u524d\u904d\u5386\u8fc7\uff0c\u6807\u8bb0\u4e0b\u4f20\u3002\n\tupdate(id*2,l,r,v);\n\tupdate(id*2+1,l,r,v);//\u9012\u5f52\u66f4\u65b0\u5de6\u53f3\u513f\u5b50\n\ttree[id].sum=tree[id*2].sum+tree[id*2+1].sum;//\u9012\u5f52\u56de\u6765\u540e\u5c06\u5de6\u53f3\u513f\u5b50\u7684sum\u52a0\u8d77\u6765\u8d4b\u7ed9\u7236\u4eb2\u7684sum\u3002\n}\n```\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5176\u5b9e\u5c31\u662f\u66f4\u65b0\u5c31\u5206\u4e3a\u8fd9\u4e48\u4e24\u5927\u6b65\uff1a\n\t\n    1.\u5224\u65ad\u8bbf\u95ee\u533a\u95f4\u548c\u904d\u5386\u533a\u95f4\u7684\u5173\u7cfb\uff08\u76f8\u79bb\uff0c\u90e8\u5206\u76f8\u4ea4\uff0c\u5b8c\u5168\u5305\u542b\uff09\n    \n    \u5982\u679c\u76f8\u79bb\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n   \n    \u5982\u679c\u90e8\u5206\u76f8\u4ea4\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u6807\u8bb0\u4e0b\u4f20\uff08\u5982\u679c\u6709\uff09\uff0c\u7136\u540e\u5411\u4e0b\u627e\u5b8c\u5168\u5305\u542b\u7684\u533a\u95f4\u3002\n    \n    \u5982\u679c\u5b8c\u5168\u5305\u542b\uff0c\u66f4\u65b0lazy\u6807\u8bb0\uff0c\u5e76\u4e14\u5c06sum\u66f4\u65b0\uff08\u56e0\u4e3a\u5f53\u524d\u4e0d\u4f1a\u518d\u5411\u4e0b\uff0c\u6240\u4ee5\u4e0d\u80fd\u901a\u8fc7\u5de6\u53f3\u513f\u5b50\u7684sum\u6765\u8ba1\u7b97\uff09\u8981\u6309\u4ee3\u7801\u90a3\u6837\u8ba1\u7b97\uff08\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684sum\u503c\u52a0\u4e0av * \u8fd9\u4e2a\u533a\u95f4\u6240\u5305\u542b\u7684\u6570\u7684\u4e2a\u6570\uff09\n    \n    \u5728\u8fd9\u91cc\uff0c\u6211\u63d0\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u8981\u5728\u66f4\u65b0\u65f6\u4e0b\u4f20\u6807\u8bb0\uff0c\u8c8c\u4f3c\u5b8c\u5168\u53ef\u4ee5\u5728\u67e5\u8be2\u5230\u8fd9\u4e2a\u8282\u70b9\u65f6\u4e0b\u4f20\u6807\u8bb0\u554a\uff0c\u7c97\u7565\u4e00\u60f3\uff0c\u8c8c\u4f3c\u633a\u6709\u9053\u7406\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u4ee3\u7801\u4e2d\uff0c\u4f60\u66f4\u65b0\u5b8c\u5de6\u53f3\u513f\u5b50\u56de\u6765\u540e\uff0c\u4f1a\u7ed9\u7236\u8282\u70b9\u7684sum\u503c\u8fdb\u884c\u66f4\u65b0\uff0c\u5982\u679c\u6309\u7167\u521a\u624d\u7684\u8bf4\u6cd5\uff0c\u90a3\u4e48\u4e4b\u524d\u4f60\u52a0\u8fc7\u7684\u90a3\u4e2a\u503c\u5c31\u6f0f\u4e86\uff0c\u6240\u4ee5\u5728\u66f4\u65b0\u65f6\u4e00\u5b9a\u8981\u6807\u8bb0\u4e0b\u4f20\uff01\n   \n   \n\t2.\u6807\u8bb0\u4e0b\u4f20 \n    \n    \u5148\u4e0b\u4f20\u5230\u5de6\u513f\u5b50\n    \n    \u518d\u4e0b\u4f20\u5230\u53f3\u513f\u5b50\n   \n    \u4e0b\u4f20\u65f6\u4f60\u9700\u8981\u66f4\u65b0\u513f\u5b50\u8282\u70b9\u7684lazy\uff08\u56e0\u4e3a\u5b83\u8fd8\u53ef\u80fd\u6709\u513f\u5b50\uff0c\u4e0b\u6b21\u904d\u5386\u5b83\u7684\u513f\u5b50\u65f6\u8981\u7ee7\u7eed\u4e0b\u4f20\uff09\u548c\u5b83\u7684sum\uff08\u4e0e1\u4e2d\u7684sum\u66f4\u65b0\u65b9\u6cd5\u76f8\u540c\uff09\n    \n    \u6700\u540e\uff0c\u5c06\u81ea\u5df1\u7684lazy\u6807\u8bb0\u6e05\u7a7a\uff08\u5426\u5219\u4f1a\u91cd\u590d\u4e0b\u4f20\uff0c\u9020\u6210\u7b54\u6848\u9519\u8bef\uff09\n\n\n\n------------\n\n\u5230\u4e86\u6700\u540e\u4e00\u6b65\u4e86\uff0c\u90a3\u5c31\u662f\u67e5\u8be2\uff0c\u5176\u5b9e\u67e5\u8be2\u548c\u66f4\u65b0\u5f88\u76f8\u4f3c\uff0c\u4e5f\u9700\u8981\u8ba8\u8bba\u6240\u67e5\u8be2\u7684\u533a\u95f4\u548c\u4f60\u73b0\u5728\u904d\u5386\u5230\u7684\u533a\u95f4\u7684\u5173\u7cfb\uff08\u76f8\u79bb\uff0c\u90e8\u5206\u76f8\u4ea4\uff0c\u5b8c\u5168\u5305\u542b\uff09\uff0c\u67e5\u8be2\u5230\u6709lazy\u6807\u8bb0\u65f6\u4e00\u6837\u8981\u4e0b\u4f20\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nlong long query(int id,int l,int r)\n{\n\tif(tree[id].l>r || tree[id].r<l) return 0;//\u76f8\u79bb\n\tif(tree[id].l>=l && tree[id].r<=r) return tree[id].sum;//\u5b8c\u5168\u5305\u542b\n\tif(tree[id].lazy>0) down(id);\n\treturn query(id*2,l,r)+query(id*2+1,l,r);//\u90e8\u5206\u5305\u542b\n}\n```\n\n\u8fd9\u5c31\u662f\u7ebf\u6bb5\u6811\u6700\u57fa\u7840\u7684\u5566\uff01\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,a[100010];\nstruct llk\n{\n\tlong long l,r,lazy,sum;\n}tree[500010];\nvoid build(int id,int l,int r)\n{\n\ttree[id].l=l;\n\ttree[id].r=r;\n\tif(l==r)\n\t{\n\t\ttree[id].sum=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(id*2,l,mid);\n\tbuild(id*2+1,mid+1,r);\n\ttree[id].sum=tree[id*2].sum+tree[id*2+1].sum;\n}\nvoid down(int id)\n{\n\ttree[id*2].lazy+=tree[id].lazy;\n\ttree[id*2].sum+=(tree[id*2].r-tree[id*2].l+1)*tree[id].lazy;\n\ttree[id*2+1].lazy+=tree[id].lazy;\n\ttree[id*2+1].sum+=(tree[id*2+1].r-tree[id*2+1].l+1)*tree[id].lazy;\n\ttree[id].lazy=0;\n}\nvoid update(int id,int l,int r,int v)\n{\n\tif(tree[id].l>r || tree[id].r<l) return;\n\tif(tree[id].l>=l && tree[id].r<=r)\n\t{\n\t\ttree[id].lazy+=v;\n\t\ttree[id].sum+=(tree[id].r-tree[id].l+1)*v;\n\t\treturn;\n\t}\n\tif(tree[id].lazy>0) down(id);\n\tupdate(id*2,l,r,v);\n\tupdate(id*2+1,l,r,v);\n\ttree[id].sum=tree[id*2].sum+tree[id*2+1].sum;\n}\nlong long query(int id,int l,int r)\n{\n\tif(tree[id].l>r || tree[id].r<l) return 0;\n\tif(tree[id].l>=l && tree[id].r<=r) return tree[id].sum;\n\tif(tree[id].lazy>0) down(id);\n\treturn query(id*2,l,r)+query(id*2+1,l,r);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint o,x,y;\n\t\tscanf(\"%d\",&o);\n\t\tif(o==1)\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&k);\n\t\t\tupdate(1,x,y,k);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",query(1,x,y));\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1570282390,
        "uid": 41177,
        "name": "\u6211\u6740\u6587\u5316\u8bfe",
        "ccfLevel": 4,
        "title": "\u7ebf\u6bb5\u6811"
    },
    {
        "content": "### \u8bf4\u8d77\u7ebf\u6bb5\u6811\u5927\u5bb6\u90fd\u4e0d\u964c\u751f\u3002\u90a3\u4e48\u4e0d\u4f1a\u7ebf\u6bb5\u6570\u7684\u4e00\u8d77\u8fdb\u5165\u4e3b\u9898\u5427\u3002\n\n\u73b0\u5728\u6211\u7ed9\u4f60\u4e00\u9053\u9898\u3002\n\n1\u3001\u4e00\u5171\u6709$n$\u4e2a\u6570\uff0c\u7ed9\u4f60$m$\u4e2a\u8303\u56f4\uff0c\u8ba9\u4f60\u6c42\u8303\u56f4\u5185\u7684\u6570\u548c\u3002\uff08$n \\leq 10^6$\uff09\n\n\u8fd9\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u4e0d\u662f\u5c0f\u5b66\u751f\u7684$OI$\u9898\u5417\uff1f\u524d\u7f00\u548c\uff0c\u641e\u5b9a\u3002\n\n\u518d\u52a0\u5f3a\uff1a\n\n2\u3001\u4e00\u5171\u6709$n$\u4e2a\u6570\uff0c\u7ed9\u4f60$k$\u4e2a\u64cd\u4f5c\uff0c\u8ba9\u4f60\u5728$l$\u548c$r$\u533a\u95f4\u5185\u52a0\u4e00\u4e2a\u6570\uff0c\u6216\u8ba9\u4f60\u6c42\u533a\u95f4\u5185\u7684\u548c\u3002\uff08$n \\leq 10^4$\uff09\n\nemm\u524d\u7f00\u548c\u65e0\u529b\u7ef4\u6301\u4e86\u3002\n\n\u518d\u52a0\u5f3a\uff1a\n\n2\u3001\u4e00\u5171\u6709$n$\u4e2a\u6570\uff0c\u7ed9\u4f60$k$\u4e2a\u64cd\u4f5c\uff0c\u8ba9\u4f60\u5728$l$\u548c$r$\u533a\u95f4\u5185\u52a0\u4e00\u4e2a\u6570\uff0c\u6216\u8ba9\u4f60\u6c42\u533a\u95f4\u5185\u7684\u548c\u3002\uff08$n \\leq 10^6$\uff09\n\n\u8fd9\u9700\u8981\u4e00\u79cd\u5f3a\u5927\u7684\u6570\u636e\u7ed3\u6784\u7ebf\u6bb5\u6811\n\n\u4e0b\u662f\u7b80\u56fe(\u5ea6\u5a18\u4e0a\u627e\u5230\u7684)\u3002\n\n![\u7ebf\u6bb5\u6811](https://images2015.cnblogs.com/blog/1056834/201701/1056834-20170105203630800-980605038.jpg)\n\n\n\n\u7ebf\u6bb5\u6811\uff0c\u7c7b\u4f3c\u533a\u95f4\u6811\uff0c\u5b83\u5728\u5404\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u6761\u7ebf\u6bb5\uff08\u6570\u7ec4\u4e2d\u7684\u4e00\u6bb5\u5b50\u6570\u7ec4\uff09\uff0c\u4e3b\u8981\u7528\u4e8e\u9ad8\u6548\u89e3\u51b3\u8fde\u7eed\u533a\u95f4\u7684\u52a8\u6001\u67e5\u8be2\u95ee\u9898\uff0c\n\n\u7531\u4e8e\u4e8c\u53c9\u7ed3\u6784\u7684\u7279\u6027\uff0c\u5b83\u57fa\u672c\u80fd\u4fdd\u6301\u6bcf\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a$O$($log$ $n$)\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u533a\u95f4\uff0c\n\n\u5b50\u8282\u70b9\u5219\u5206\u522b\u8868\u793a\u7236\u8282\u70b9\u7684\u5de6\u53f3\u534a\u533a\u95f4\uff0c\u4f8b\u5982\u7236\u4eb2\u7684\u533a\u95f4\u662f[$a$,$b$]\uff0c\u90a3\u4e48($c$=($a$+$b$)/$2$)\u5de6\u513f\u5b50\u7684\u533a\u95f4\u662f[$a$,$c$]\uff0c\u53f3\u513f\u5b50\u7684\u533a\u95f4\u662f[$c$+$1$,$b$]\u3002\n\n\u7531\u4e0a\u56fe\u53ef\u5f97\uff0c\n\n1\u3001\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u533a\u95f4\u8303\u56f4\u4e3a[$l$\uff0c$mid$]\uff0c\u53f3\u5b69\u5b50\u4e3a[$mid$+$1$,$r$]\n\n2\u3001\u5bf9\u4e8e\u7ed3\u70b9$k$\uff0c\u5de6\u5b69\u5b50\u7ed3\u70b9\u4e3a$2$*$k$\uff0c\u53f3\u5b69\u5b50\u4e3a$2$*$k$+$1$\uff0c\u8fd9\u7b26\u5408\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u3002\n\n\u7ebf\u6bb5\u6811\u652f\u6301\u4e94\u79cd\u79cd\u64cd\u4f5c\uff1a\u5efa\u6811\u3001\u5355\u70b9\u67e5\u8be2\u3001\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u3001\u533a\u95f4\u4fee\u6539\u3002\n\n\u5728\u5176\u4ed6\u5ef6\u7533\u91cc\u8fd8\u652f\u6301\u5982\u533a\u95f4\u6c42\u6700\u503c\u3002\n\n## 1\u3001\u5efa\u6811\n\n#### a\u3001\u5bf9\u4e8e\u4e8c\u5206\u5230\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7ed9\u5b83\u7684\u5de6\u53f3\u7aef\u70b9\u786e\u5b9a\u8303\u56f4\u3002\n\n#### b\u3001\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5b58\u50a8\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u518d\u56de\u5230\u7236\u8282\u70b9\u65f6\u7d2f\u8ba1\u5230\u7236\u8282\u70b9\u53bb\u3002\n\n#### c\u3001\u5408\u5e76\n\n### \u4ee3\u7801\n\n```\nvoid build(int k,int t,int w)\n{ int mid;\n\tif (t>w) return;\n\tif (t==w)\n\t  {\n\t  \ttree[k].l=t;tree[k].r=w;\n\t  \ttree[k].w=a[t];\n\t  \treturn;\n\t  }\n\tmid=(t+w)/2;\n\tbuild(k*2,t,mid);\n\tbuild(k*2+1,mid+1,w);\n\ttree[k].l=t;tree[k].r=w;\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\n```\n## \u5355\u70b9\u67e5\u8be2\n#### \u67e5\u8be2\u4e00\u4e2a\u70b9\u7684\u72b6\u6001\uff0c\u8bbe\u5f85\u67e5\u8be2\u70b9\u4e3ax\n#### a\u3001\u5982\u679c\u5f53\u524d\u679a\u4e3e\u7684\u70b9\u5de6\u53f3\u7aef\u70b9\u76f8\u7b49\uff0c\u5373\u53f6\u5b50\u8282\u70b9\uff0c\u5c31\u662f\u76ee\u6807\u8282\u70b9\u3002\n#### b\u3001\u5982\u679c\u4e0d\u662f\uff0c\u6240\u4ee5\u8bbe\u67e5\u8be2\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7ed3\u70b9\u533a\u95f4\u8303\u56f4\u4e3a\u4e86l\uff0cr\uff0c\u4e2d\u70b9\u4e3amid\u3002\n#### c\u3001\u5982\u679cx<=mid\uff0c\u5219\u9012\u5f52\u5b83\u7684\u5de6\u5b69\u5b50\uff0c\u5426\u5219\u9012\u5f52\u5b83\u7684\u53f3\u5b69\u5b50\n### \u4ee3\u7801\n```\nvoid ask(int k)\n{\n    if(tree[k].l==tree[k].r) //\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u53f3\u7aef\u70b9\u76f8\u7b49\uff0c\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u662f\u6700\u7ec8\u7b54\u6848 \n    {\n        ans=tree[k].w;\n        return ;\n    }\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) ask(k*2);//\u76ee\u6807\u4f4d\u7f6e\u6bd4\u4e2d\u70b9\u9760\u5de6\uff0c\u5c31\u9012\u5f52\u5de6\u5b69\u5b50 \n    else ask(k*2+1);//\u53cd\u4e4b\uff0c\u9012\u5f52\u53f3\u5b69\u5b50 \n}\n```\n\n## \u5355\u70b9\u4fee\u6539\n#### \u5373\u66f4\u6539\u67d0\u4e00\u4e2a\u70b9\u7684\u72b6\u6001\u3002\n#### \u7ed3\u5408\u5355\u70b9\u67e5\u8be2\u7684\u539f\u7406\uff0c\u627e\u5230x\u7684\u4f4d\u7f6e\uff1b\u6839\u636e\u5efa\u6811\u72b6\u6001\u5408\u5e76\u7684\u539f\u7406\uff0c\u4fee\u6539\u6bcf\u4e2a\u7ed3\u70b9\u7684\u72b6\u6001\u3002\n\n```\nvoid add(int k)\n{\n    if(tree[k].l==tree[k].r)//\u627e\u5230\u76ee\u6807\u4f4d\u7f6e \n    {\n        tree[k].w+=y;\n        return;\n    }\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) add(k*2);\n    else add(k*2+1);\n    tree[k].w=tree[k*2].w+tree[k*2+1].w;//\u6240\u6709\u5305\u542b\u7ed3\u70b9k\u7684\u7ed3\u70b9\u72b6\u6001\u66f4\u65b0 \n}\n```\n\n## \u533a\u95f4\u67e5\u8be2\n\n![\u7ebf\u6bb5\u68111](https://images2018.cnblogs.com/blog/1056834/201712/1056834-20171203210412804-1934571165.png)\n\n\n\u4ee3\u7801\n\n```\nvoid sum(int k)\n{\n    if(tree[k].l>=x&&tree[k].r<=y) \n    {\n        ans+=tree[k].w;\n        return;\n    }\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) sum(k*2);\n    if(y>m) sum(k*2+1);\n}\n```\n## \u533a\u95f4\u4fee\u6539\n\n\u540c\u7406\n\n#### \u6211\u4eec\u4e0d\u8981\u9012\u5f52\u5230\u6bcf\u4e2a\u8282\u70b9\u3002\u6240\u4ee5\u8981\u6709\u4e00\u4e2a\u65b0\u7684\u6982\u5ff5\uff1a\u61d2\u6807\u8bb0\u3002\n\n\u5c31\u50cf\u65b0\u5e74\u7684\u65f6\u5019\u7684\u538b\u5c81\u94b1\uff0c\u53ea\u6709\u8981\u7528\u7684\u65f6\u5019\u624d\u7528\uff0c\u4e0d\u8981\u7684\u76f4\u63a5\u7ed9\u7236\u6bcd\u4fdd\u7ba1\u3002\n\n\u6240\u4ee5\uff0c\u4f20\u4e0b\u6765\u7684\u66f4\u6539\u503c\u82e5\u5728\u4e00\u4e2a\u533a\u95f4\u91cc\uff0c\u5c31\u4e0d\u518d\u4e0b\u4f20\uff0c\u4fee\u6539\u5b8c\u8be5\u8282\u70b9\u4fe1\u606f\u540e\uff0c\u5728\u6b64\u8282\u7684\u61d2\u6807\u8bb0\u4e0a\u6253\u4e00\u4e2a\u66f4\u6539\u503c\u3002\n\n\u5f53\u9700\u8981\u9012\u5f52\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u65f6\uff0c\u6807\u8bb0\u4e0b\u4f20\u7ed9\u5b50\u8282\u70b9\u3002\u8fd9\u91cc\u4e0d\u5fc5\u7ba1\u7528\u54ea\u4e2a\u5b50\u8282\u70b9\uff0c\u4e24\u4e2a\u90fd\u4f20\u4e0b\u53bb\u3002\n\n\u2460\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u7d2f\u79ef\u5230\u5b50\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u4e2d\u3002\n\n\u2461\u4fee\u6539\u5b50\u8282\u70b9\u72b6\u6001\u3002\u5728\u5f15\u4f8b\u4e2d\uff0c\u5c31\u662f\u539f\u72b6\u6001+\u5b50\u8282\u70b9\u533a\u95f4\u70b9\u7684\u4e2a\u6570\u7236\u8282\u70b9\u4f20\u4e0b\u6765\u7684\u61d2\u6807\u8bb0\u3002\n\n\u2462\u7236\u8282\u70b9\u61d2\u6807\u8bb0\u6e050\u3002\u8fd9\u4e2a\u61d2\u6807\u8bb0\u5df2\u7ecf\u4f20\u4e0b\u53bb\u4e86\uff0c\u6b20\u503a\u8fd8\u6e05\uff0c\u4e0d\u7528\u518d\u8fd8\u4e86\u3002\n\n### \u4e0b\u4f20\u4ee3\u7801\n\n```\nvoid pushdown(int k)\n{\n\ttree[k*2].w+=((tree[k*2].r-tree[k*2].l+1)*tree[k].f);\n\ttree[k*2+1].w+=((tree[k*2+1].r-tree[k*2+1].l+1)*tree[k].f);\n\ttree[k*2].f+=tree[k].f;\n\ttree[k*2+1].f+=tree[k].f;\n\ttree[k].f=0;\n}\n```\n### \u533a\u95f4\u4fee\u6539\u4ee3\u7801\n\n```\nvoid add(int k,int t,int w)\n{ int mid;\nif (t>w) return;\n\tif (x<=t&&w<=y) \n\t  {\n\t  \ttree[k].w+=((w-t+1)*z);\n\t  \ttree[k].f+=z;\n\t  \treturn ;\n\t  }\n\tmid=(t+w)/2;\n\tif (tree[k].f) pushdown(k); \n\tif (x<=mid) add(k*2,t,mid);\n\tif (y>mid) add(k*2+1,mid+1,w);\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\n```\n\n### \u5355\u70b9\u67e5\u8be2\u4ee3\u7801\n\n```\n void ask(int k)//\u5355\u70b9\u67e5\u8be2\n{\n    if(tree[k].l==tree[k].r)\n    {\n        ans=tree[k].w;\n        return ;\n    }\n    if(tree[k].f) pushdown(k);//\u61d2\u6807\u8bb0\u4e0b\u4f20\uff0c\u552f\u4e00\u9700\u8981\u66f4\u6539\u7684\u5730\u65b9\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) ask(k*2);\n    else ask(k*2+1);\n}\n```\n### \u533a\u95f4\u67e5\u8be2\u4ee3\u7801\n```\nint ask(int k,int t,int w)\n{ int mid;\nif (t>w) return 0;\n\tif (x<=t&&w<=y)\n\t  {\n\t  \treturn tree[k].w;\n\t  }\n\tmid=(t+w)/2;\n\tif (tree[k].f) pushdown(k); \n\tint sum=0;\n\tif (x<=mid)sum+=ask(k*2,t,mid);\n\tif (y>mid)sum+=ask(k*2+1,mid+1,w);\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n\treturn sum;\n}\n```\n\n## \u603b\u7ed3\n```\n#include<cstdio>\nusing namespace std;\nint n,p,a,b,m,x,y,ans;\nstruct node\n{\n    int l,r,w,f;\n}tree[400001];\ninline void build(int k,int ll,int rr)//\u5efa\u6811 \n{\n    tree[k].l=ll,tree[k].r=rr;\n    if(tree[k].l==tree[k].r)\n    {\n        scanf(\"%d\",&tree[k].w);\n        return;\n    }\n    int m=(ll+rr)/2;\n    build(k*2,ll,m);\n    build(k*2+1,m+1,rr);\n    tree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\ninline void down(int k)//\u6807\u8bb0\u4e0b\u4f20 \n{\n    tree[k*2].f+=tree[k].f;\n    tree[k*2+1].f+=tree[k].f;\n    tree[k*2].w+=tree[k].f*(tree[k*2].r-tree[k*2].l+1);\n    tree[k*2+1].w+=tree[k].f*(tree[k*2+1].r-tree[k*2+1].l+1);\n    tree[k].f=0;\n}\ninline void ask_point(int k)//\u5355\u70b9\u67e5\u8be2\n{\n    if(tree[k].l==tree[k].r)\n    {\n        ans=tree[k].w;\n        return ;\n    }\n    if(tree[k].f) down(k);\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) ask_point(k*2);\n    else ask_point(k*2+1);\n}\ninline void change_point(int k)//\u5355\u70b9\u4fee\u6539 \n{\n    if(tree[k].l==tree[k].r)\n    {\n        tree[k].w+=y;\n        return;\n    }\n    if(tree[k].f) down(k);\n    int m=(tree[k].l+tree[k].r)/2;\n    if(x<=m) change_point(k*2);\n    else change_point(k*2+1);\n    tree[k].w=tree[k*2].w+tree[k*2+1].w; \n}\ninline void ask_interval(int k)//\u533a\u95f4\u67e5\u8be2 \n{\n    if(tree[k].l>=a&&tree[k].r<=b) \n    {\n        ans+=tree[k].w;\n        return;\n    }\n    if(tree[k].f) down(k);\n    int m=(tree[k].l+tree[k].r)/2;\n    if(a<=m) ask_interval(k*2);\n    if(b>m) ask_interval(k*2+1);\n}\ninline void change_interval(int k)//\u533a\u95f4\u4fee\u6539 \n{\n    if(tree[k].l>=a&&tree[k].r<=b)\n    {\n        tree[k].w+=(tree[k].r-tree[k].l+1)*y;\n        tree[k].f+=y;\n        return;\n    }\n    if(tree[k].f) down(k);\n    int m=(tree[k].l+tree[k].r)/2;\n    if(a<=m) change_interval(k*2);\n    if(b>m) change_interval(k*2+1);\n    tree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\nint main()\n{\n    scanf(\"%d\",&n);//n\u4e2a\u8282\u70b9 \n    build(1,1,n);//\u5efa\u6811 \n    scanf(\"%d\",&m);//m\u79cd\u64cd\u4f5c \n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&p);\n        ans=0;\n        if(p==1)\n        {\n            scanf(\"%d\",&x);\n            ask_point(1);//\u5355\u70b9\u67e5\u8be2,\u8f93\u51fa\u7b2cx\u4e2a\u6570 \n            printf(\"%d\",ans);\n        } \n        else if(p==2)\n        {\n            scanf(\"%d%d\",&x,&y);\n            change_point(1);//\u5355\u70b9\u4fee\u6539 \n        }\n        else if(p==3)\n        {\n            scanf(\"%d%d\",&a,&b);//\u533a\u95f4\u67e5\u8be2 \n            ask_interval(1);\n            printf(\"%d\\n\",ans);\n        }\n        else\n        {\n             scanf(\"%d%d%d\",&a,&b,&y);//\u533a\u95f4\u4fee\u6539 \n             change_interval(1);\n        }\n    }\n}\n```\n## \u4f8b\u9898\n\n### P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\n\n\u6a21\u677f\u9898\n\n```\n#include<bits/stdc++.h>\n#define N 100010\n#define int long long\nusing namespace std;\nstruct node{\n\tint l,r,w,f;\n}tree[N*4];\nint x,y,z,i,a[N],n,m;\nvoid build(int k,int t,int w)\n{ int mid;\n\tif (t>w) return;\n\tif (t==w)\n\t  {\n\t  \ttree[k].l=t;tree[k].r=w;\n\t  \ttree[k].w=a[t];\n\t  \treturn;\n\t  }\n\tmid=(t+w)/2;\n\tbuild(k*2,t,mid);\n\tbuild(k*2+1,mid+1,w);\n\ttree[k].l=t;tree[k].r=w;\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\nvoid pushdown(int k)\n{\n\ttree[k*2].w+=((tree[k*2].r-tree[k*2].l+1)*tree[k].f);\n\ttree[k*2+1].w+=((tree[k*2+1].r-tree[k*2+1].l+1)*tree[k].f);\n\ttree[k*2].f+=tree[k].f;\n\ttree[k*2+1].f+=tree[k].f;\n\ttree[k].f=0;\n}\nvoid add(int k,int t,int w)\n{ int mid;\nif (t>w) return;\n\tif (x<=t&&w<=y) \n\t  {\n\t  \ttree[k].w+=((w-t+1)*z);\n\t  \ttree[k].f+=z;\n\t  \treturn ;\n\t  }\n\tmid=(t+w)/2;\n\tif (tree[k].f) pushdown(k); \n\tif (x<=mid) add(k*2,t,mid);\n\tif (y>mid) add(k*2+1,mid+1,w);\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n}\nint ask(int k,int t,int w)\n{ int mid;\nif (t>w) return 0;\n\tif (x<=t&&w<=y)\n\t  {\n\t  \treturn tree[k].w;\n\t  }\n\tmid=(t+w)/2;\n\tif (tree[k].f) pushdown(k); \n\tint sum=0;\n\tif (x<=mid)sum+=ask(k*2,t,mid);\n\tif (y>mid)sum+=ask(k*2+1,mid+1,w);\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w;\n\treturn sum;\n}\nint read(int &x)\n{\n\tchar c=getchar();int f=1;\n\tx=0;\n\twhile (c<'0'||c>'9')\n\t  {\n\t  if (c=='-') f=-1;\n\t  c=getchar();\n      }\n\twhile (c>='0'&&c<='9')\n      {\n      \tx=x*10+(int)c-48;\n      \tc=getchar();\n\t  }\n\treturn x*f;\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(n);m=read(m);\n\tmemset(a,0,sizeof(a));\n\tfor (int i=1;i<=n;i++) a[i]=read(a[i]);\n\tbuild(1,1,n);\n\tfor (int j=1;j<=m;j++)\n\t  { int c;\n\t  \tc=read(c);x=read(x);y=read(y);\n\t  \tif (c==1) \n\t  \t  {\n\t  \t  \tz=read(z);\n\t  \t  \tadd(1,1,n);\n\t\t\t}\n\t  \telse printf(\"%lld\\n\",ask(1,1,n));\n\t  }\n\t\n}\n```\n### P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\n\n\u5957\u4e86\u4e58\u6cd5\uff0c\u6ce8\u610f\u6e051\u3002\n\n```\n#include <bits/stdc++.h>//\u533a\u95f4\n#define N 400001\n#define ll long long\nusing namespace std;\n\nstruct node{ll mul,add,val;} st[N];\nll n,m,k,c,x,y,z;\nll a[N];\n\nvoid build(ll x,ll l,ll r)\n{\n    st[x].mul=1;st[x].add=0;\n    if (l==r) {st[x].val=a[l];return;}\n    ll mid=l+r>>1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    st[x].val=(st[x<<1].val+st[x<<1|1].val)%k;\n}\n\nvoid pushdown(ll x,ll l,ll r)\n{\n    ll mid=l+r>>1;\n    st[x<<1].val=(st[x<<1].val*st[x].mul+st[x].add*(mid-l+1))%k;\n    st[x<<1].mul=(st[x<<1].mul*st[x].mul)%k;\n    st[x<<1].add=(st[x<<1].add*st[x].mul+st[x].add)%k;\n    st[x<<1|1].val=(st[x<<1|1].val*st[x].mul+st[x].add*(r-mid))%k;\n    st[x<<1|1].mul=(st[x<<1|1].mul*st[x].mul)%k;\n    st[x<<1|1].add=(st[x<<1|1].add*st[x].mul+st[x].add)%k;\n    st[x].mul=1;st[x].add=0;\n}\n\nvoid update_mul(ll x,ll l,ll r,ll ql,ll qr,ll mul)\n{\n    if (l>qr||ql>r) return;\n    if (l>=ql&&qr>=r)\n        {\n            st[x].val=(st[x].val*mul)%k;\n            st[x].mul=(st[x].mul*mul)%k;\n            st[x].add=(st[x].add*mul)%k;\n            return;\n        }\n    ll mid=l+r>>1;\n    pushdown(x,l,r);\n    update_mul(x<<1,l,mid,ql,qr,mul);\n    update_mul(x<<1|1,mid+1,r,ql,qr,mul);\n    st[x].val=(st[x<<1].val+st[x<<1|1].val)%k;\n}\n\nvoid update_add(ll x,ll l,ll r,ll ql,ll qr,ll add)\n{\n    if (l>qr||ql>r) return;\n    if (l>=ql&&qr>=r)\n        {\n            st[x].val=(st[x].val+add*(r-l+1))%k;\n            st[x].add=(st[x].add+add)%k;\n            return;\n        }\n    ll mid=l+r>>1;\n    pushdown(x,l,r);\n    update_add(x<<1,l,mid,ql,qr,add);\n    update_add(x<<1|1,mid+1,r,ql,qr,add);\n    st[x].val=(st[x<<1].val+st[x<<1|1].val)%k;\n}\n\nll query(ll x,ll l,ll r,ll ql,ll qr)\n{\n    if (l>qr||ql>r) return 0;\n    if (l>=ql&&qr>=r) return st[x].val;\n    ll mid=l+r>>1;\n    pushdown(x,l,r);\n    return (query(x<<1,l,mid,ql,qr)+query(x<<1|1,mid+1,r,ql,qr))%k;\n}\n\nint main()\n{\n    scanf(\"%lld%lld%lld\",&n,&m,&k);\n    for (int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n    build(1,1,n);\n    for (int i=1;i<=m;i++)\n        {\n            scanf(\"%lld%lld%lld\",&c,&x,&y);\n            if (c==1) scanf(\"%lld\",&z),update_mul(1,1,n,x,y,z);\n            if (c==2) scanf(\"%lld\",&z),update_add(1,1,n,x,y,z);\n            if (c==3) printf(\"%lld\\n\",query(1,1,n,x,y));\n        }\n    return 0;\n}\n```\n### P1440 \u6c42m\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\n\n\u53ef\u80fd\u7ebf\u6bb5\u6811\u4e0d\u662f\u6700\u4f18\uff0c\u4f46\u8981\u77e5\u9053\u7ebf\u6bb5\u4e5f\u652f\u6301\u8fd9\u4e2a\u64cd\u4f5c\n\n```\n#include<bits/stdc++.h>\n#define N 2000010\nusing namespace std;\nstruct node{\n\tint l,r,w,f;\n}tree[N*2+1];\nint x,y,z,i,a[N],n,m;\nvoid build(int k,int t,int w)\n{ int mid;\n\tif (t>w) return;\n\tif (t==w)\n\t  {\n\t  \ttree[k].l=t;tree[k].r=w;\n\t  \ttree[k].w=a[t];\n\t  \treturn;\n\t  }\n\tmid=(t+w)/2;\n\tbuild(k*2,t,mid);\n\tbuild(k*2+1,mid+1,w);\n\ttree[k].l=t;tree[k].r=w;\n\ttree[k].w=min(tree[k*2].w,tree[k*2+1].w);\n}\nint ask(int k,int t,int w)\n{ int mid;\nif (t>w) return 0;\n\tif (x<=t&&w<=y)\n\t  {\n\t  \treturn tree[k].w;\n\t  }\n\tmid=(t+w)/2;\n\tint sum=INT_MAX;\n\tif (x<=mid)sum=min(sum,ask(k*2,t,mid));\n\tif (y>mid)sum=min(sum,ask(k*2+1,mid+1,w));\n\treturn sum;\n}\nint read(int &x)\n{\n\tchar c=getchar();int f=1;\n\tx=0;\n\twhile (c<'0'||c>'9')\n\t  {\n\t  if (c=='-') f=-1;\n\t  c=getchar();\n      }\n\twhile (c>='0'&&c<='9')\n      {\n      \tx=x*10+(int)c-48;\n      \tc=getchar();\n\t  }\n\treturn x*f;\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(n);m=read(m);\n\tmemset(a,INT_MAX,sizeof(a));\n\tfor (int i=1;i<=n;i++) a[i]=read(a[i]);\n\tbuild(1,1,n);\n\tfor (int i=1;i<=n;i++)\n\t  { int c;\n\t  \tx=i-m;y=i-1;\n\t  \tif (x<=0) x=1;\n\t  \tif (x>y) \n\t  \t  {\n\t  \t  \tprintf(\"0\\n\");\n\t  \t  \tcontinue;\n\t\t\t}\n\t  \tprintf(\"%d\\n\",ask(1,1,n));\n\t  }\n\t\n}\n```\n",
        "postTime": 1543109272,
        "uid": 119685,
        "name": "Kevin_Wa",
        "ccfLevel": 6,
        "title": "\u6d45\u8c08\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5728\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u4e0a\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u662f\u6807\u8bb0\u4e0b\u4f20\uff0c\u4e8c\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u3002\u524d\u8005\u8bb8\u591a\u795e\u7287\u90fd\u53d1\u8fc7\u4e86\uff0c\u6211\u5c31\u6361\u4e2a\u6f0f\uff0c\u53d1\u4e00\u7bc7\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u9898\u89e3\u3002\n\n\u987e\u540d\u601d\u4e49\uff0c\u4e24\u8005\u7684\u533a\u522b\u5c31\u662f\u5728\u5904\u7406\u6807\u8bb0\u65f6\uff0c\u524d\u8005\u628a\u6807\u8bb0\u4e0b\u4f20\u5230\u4e24\u4e2a\u513f\u5b50\u8eab\u4e0a\u540c\u65f6\u81ea\u5df1\u6e05\u96f6\uff1b\u800c\u540e\u8005\u5219\u4e00\u6b65\u5904\u7406\u597d\u81ea\u5df1\u7684\u6807\u8bb0\u3002\u76f8\u5bf9\u800c\u8a00\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u4ee3\u7801\u66f4\u77ed\uff0c\u5728\u6811\u5957\u6811\u53ca\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u4e2d\u4f7f\u7528\u8f83\u4e3a\u65b9\u4fbf\uff0c\u4f46\u540c\u65f6\u64cd\u4f5c\u6280\u5de7\u8981\u6c42\u66f4\u9ad8\uff0c\u4e5f\u4e0d\u5bb9\u6613\u7406\u89e3\uff08\u6211\u5f53\u521d\u641e\u4e86\u4e24\u5929\uff09\uff0c\u5e0c\u671b\u6211\u7684\u7ecf\u9a8c\u80fd\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9qwq\u3002\n\n----------------------------------\n\n\u5148\u7533\u660e\u51e0\u4e2a\u53c2\u6570\uff1ak\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5e8f\u53f7\uff0cv\u8868\u793a\u8981\u589e\u52a0\u7684\u6570\uff08\u6839\u636e\u9898\u610f\uff0c\u8981\u7528 long long\uff09\uff0cl \u548c r \u8868\u793a\u5f53\u524d\u8282\u70b9\u6240\u7ba1\u8f96\u7684\u533a\u95f4\uff0cx \u548c y \u8868\u793a\u8981\u4fee\u6539\u6216\u8be2\u95ee\u7684\u533a\u95f4\u7684\u533a\u95f4\uff0c\u5176\u4ed6\u53c2\u6570\u90fd\u662f\u901a\u7528\u7684\u90a3\u4e2a\u610f\u601d\u4e86\u3002\n\n\u91cd\u70b9\u8bb2\u4fee\u6539\u548c\u67e5\u8be2\u7684\u4e24\u4e2a\u51fd\u6570\uff0c\u8bb2\u89e3\u7684\u6a21\u5f0f\u662f\u5148\u653e\u6574\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u5757\uff0c\u7136\u540e\u662f\u67d0\u4e00\u6b65\u7684\u4ee3\u7801\u5757\u53ca\u5176\u8bb2\u89e3\u3002\u67d0\u4e00\u6b65\u7684\u8bb2\u89e3\u4e5f\u53ef\u80fd\u5728\u4e0b\u6587\u6709\u8fdb\u4e00\u6b65\u8865\u5145\u3002\n\n\u672c\u4eba\u8bb2\u89e3\u96be\u514d\u4e0d\u6e05\uff0c\u5efa\u8bae\u8bfb\u8005\u8fb9\u770b\u8fb9\u753b\u56fe\u52a0\u6df1\u7406\u89e3\u3002\n\n### \u4fee\u6539\u51fd\u6570modify( )\n\n```cpp\nvoid modify(int k,ll v,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\tadd[k]+=v;\n\t\treturn; \n\t}\n\tsum[k]+=(min(r,y)-max(l,x)+1)*v;\n\tint mid=(l+r)/2;\n\tif(x<=mid) modify(k*2,v,l,mid,x,y);\n\tif(mid<y) modify(k*2+1,v,mid+1,r,x,y);\n}\n```\n\n##### \u9012\u5f52\u8fb9\u754c\uff1a\n\n```cpp\nif(x<=l&&r<=y)\n\t{\n\t\tadd[k]+=v;\n\t\treturn; \n\t}\n```\n\n\u8bd5\u60f3\uff0c\u5982\u679c\u5f53\u524d\u7684\u533a\u95f4\u88ab\u8981\u4fee\u6539\u7684\u533a\u95f4\u6240\u8986\u76d6\uff0c\u5c31\u610f\u5473\u7740\u5f53\u524d\u533a\u95f4\u5185\u6240\u6709\u7684\u5b50\u8282\u70b9\u90fd\u8981\u4fee\u6539\uff0c\u5c31\u6ca1\u5fc5\u8981\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\uff08\u8fd9\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u4f18\u52bf\uff09\uff0c\u76f4\u63a5\u6253\u4e0a\u6807\u8bb0\u884c\u4e86\uff0c\u800csum\u503c\u4e0d\u9700\u8981\u6539\u52a8\uff08\u6b64\u64cd\u4f5c\u5728\u4e0b\u6587\u6709\u7167\u5e94\uff09\u3002\n\n\n##### sum\u503c\u4fee\u6539\n```cpp\n\tsum[k]+=(min(r,y)-max(l,x)+1)*v;\n```\n\n\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u662f\u901a\u8fc7\u4e8c\u5206\u6765\u5206\u914d\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u8981\u4fee\u6539\u7684\u533a\u95f4\u5f80\u5f80\u662f\u7531\u67d0\u4e9b\u533a\u95f4\u7684\u5168\u90e8\u548c\u53e6\u5916\u4e00\u4e9b\u533a\u95f4\u7684\u4e00\u90e8\u5206\u7ec4\u6210\u7684\u3002\n\n\u8fd9\u5c31\u610f\u5473\u7740\u6709\u4e00\u4e9b\u533a\u95f4\u662f\u53ea\u6709\u4e00\u90e8\u5206\u8981\u4fee\u6539\uff0c\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539add\u6807\u8bb0\u4e86\uff0c\uff08\u56e0\u4e3a\u6807\u8bb0\u672c\u8eab\u65e0\u6cd5\u8bb0\u5f55\u5177\u4f53\u4f5c\u7528\u5728\u54ea\u4e2a\u90e8\u5206\u4e0a\uff09 \u53ea\u597d\u76f4\u63a5\u4fee\u6539sum\u503c\u3002\n\n\u90a3\u4e48\u8fd9\u4e00\u90e8\u5206\u662f\u600e\u4e48\u8ba1\u7b97\u5f97\u6765\u7684\u5462\uff1f\u6211\u4eec\u4e00\u53f3\u7aef\u70b9\u4e3a\u4f8b\uff0c\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1\u3001\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff08r\uff09\u5728\u4fee\u6539\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff08y\uff09\u7684\u5de6\u8fb9\uff08\u5373r<y\uff09\uff0c\u663e\u7136\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5185\uff08\u5373\u53f3\u7aef\u70b9\u5f80\u5de6\uff09\u7684\u90fd\u8981\u6539\uff0c\u4ee5\u5916\uff08\u5373\u5f80\u53f3\uff09\u7684\u5b83\u7ba1\u4e0d\u7740\u3002\u6240\u4ee5\u8981\u5904\u7406\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e3ar\uff1b\n\n2\u3001\u53cd\u4e4b\uff0c\u4fee\u6539\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff08y\uff09\u5728\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff08r\uff09\u7684\u5de6\u8fb9\uff08\u5373y<=r\uff09\uff0c\u5219\u4fee\u6539\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5185\u7684\u533a\u95f4\u663e\u7136\u90fd\u8981\u52a0\u4e0av\uff0c\u5219\u4fee\u6539\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5916\u7684\u533a\u95f4\u867d\u8bf4\u5f53\u524d\u8282\u70b9\u7ba1\u5f97\u7740\uff0c\u4f46\u5e76\u4e0d\u8981\u6c42\u8fd9\u90e8\u5206\u4fee\u6539\u3002\u6240\u4ee5\u8981\u5904\u7406\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u4e3ay\uff1b\n\n\u7efc\u4e0a\uff0c\u5c31\u6709\u4e86min ( r , y ) \u3002\n\n\u5de6\u7aef\u70b9\u540c\u7406\u3002\n\n##### \u9012\u5f52\u6761\u4ef6\u3002\n\n```cpp\n\tint mid=(l+r)/2;\n\tif(x<=mid) modify(k*2,v,l,mid,x,y);\n\tif(mid<y) modify(k*2+1,v,mid+1,r,x,y);\n```\n\n\u8fd9\u6b65\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u5982\u679c\u8981\u4fee\u6539\u7684\u533a\u95f4\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u6709\u4ea4\u96c6\uff08\u5373 x <= mid \uff09\uff0c\u624d\u9012\u5f52\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u540c\u7406\u3002\n\n### \u67e5\u8be2\u51fd\u6570query( )\n\n\u5f62\u5f0f\u4e0a\u548cmodify\u51fd\u6570\u5f88\u50cf\u3002\n\n```cpp\nll query(int k,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y) \n\t\treturn sum[k]+(r-l+1)*add[k];\n\tll res=(min(r,y)-max(l,x)+1)*add[k];\n\tint mid=(l+r)/2;\n\tif(x<=mid) res+=query(k*2,l,mid,x,y);\n\tif(mid<y)  res+=query(k*2+1,mid+1,r,x,y);\n\treturn res;\n}\n```\n##### \u8fd4\u56de\u503cres\u7684\u5904\u7406 1\n\n\u5e94\u8be5\u4f1a\u6709\u8bfb\u8005\u611f\u5230\u5947\u602a\uff08\u5305\u62ec\u5f53\u5e74\u7684\u6211\uff09\uff0c\u4e3a\u4ec0\u4e48\u53c8\u8981\u52a0add\u503c\uff0c\u53c8\u8981\u52a0sum\u503c\uff0c\u4f1a\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u5462\uff1f\u4f46\u53ea\u8981\u7406\u89e3\u4e86modify\u51fd\u6570\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u5f53\u524d\u533a\u95f4\uff0c\u6709\u53ef\u80fd\u53ea\u88ab\u4fee\u6539\u4e86\u4e00\u90e8\u5206\uff0c\u6709\u53ef\u80fd\u53ea\u8bd5\u8fc7\u6574\u4e2a\u533a\u95f4\u88ab\u4fee\u6539\uff0c\u4e5f\u53ef\u80fd\u540c\u65f6\u90fd\u6709\u6216\u90fd\u6ca1\u6709\u3002\u6211\u4eec\u4e0d\u59a8\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1\u3001\u82e5\u53ea\u88ab\u4fee\u6539\u8fc7\u4e00\u90e8\u5206\uff0c\u90a3\u4e48sum\u503c\u5df2\u7ecf\u628a\u8981\u4fee\u6539\u7684\u90e8\u5206\u52a0\u4e0a\u4e86\uff0c\u800c\u56e0\u4e3a\u4e0d\u66fe\u8bd5\u8fc7\u6574\u4e2a\u533a\u95f4\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5176add\u503c\u4e3a0\uff0c\u52a0\u4e0a\u4e5f\u65e0\u59a8\u3002\n\n\u6240\u4ee5\u8fd4\u56desum+add\uff1b \n\n2\u3001\u82e5\u53ea\u8bd5\u8fc7\u6574\u4e2a\u533a\u95f4\u88ab\u4fee\u6539\uff0c\u90a3\u4e48sum\u503c\u4e0d\u66fe\u88ab\u4fee\u6539\u8fc7\uff0c\u6807\u8bb0\u90fd\u6253\u5230add\u4e0a\u4e86\u3002\n\n\u6240\u4ee5\u8fd4\u56desum+add\uff1b\n\n3\u3001\u82e5\u4e24\u8005\u90fd\u66fe\u8bd5\u8fc7\uff0csum\u503c\u8d1f\u8d23\u52a0\u4e0a\u201c\u4e00\u90e8\u5206\u201d\u7684\u90a3\u4e9b\uff0cadd\u503c\u8d1f\u8d23\u52a0\u4e0a\u201c\u6574\u4e2a\u533a\u95f4\u201d\u7684\u90a3\u4e9b \u3002\n\n\u6240\u4ee5\u4e24\u4e2a\u90fd\u8981\u52a0\u4e0a\uff0c\u8fd4\u56desum+add\uff1b\n\n4\u3001\u82e5\u90fd\u6ca1\u8bd5\u8fc7\u00b7\u00b7\u00b7 \u7ed3\u5408\u4ee5\u4e0a\u51e0\u70b9\u611f\u6027\u6613\u8bc1\uff0c\u5e94\u8fd4\u56desum+add\u3002\n\n\u7efc\u4e0a\uff0c\u628asum\u548cadd\u90fd\u52a0\u4e0a\u5c31\u5bf9\u4e86\u3002\n\n\u53e6\u5916\uff0c\u5bf9\u4e8esum\u503c\uff0c\u7531\u4e8e\u5b83\u9488\u5bf9\u7684\u662f\u6574\u4e2a\u533a\u95f4\uff0c\u65e0\u6cd5\u5206\u5272\uff0c\u8fd9\u65e2\u5bfc\u81f4\u4e86\u5b83\u4e0d\u80fd\u7acb\u523b\u52a0\u4e0a\uff0c\u4f46\u4e5f\u4f7f\u5f97\u5b83\u5728\u9012\u5f52\u8fbe\u5230\u8fb9\u754c\u65f6\u6700\u7ec8\u4e00\u5b9a\u4f1a\u88ab\u8865\u4e0a\u3002\n\n\u7136\u540e\u518d\u5bf9\u6bcf\u4e00\u6b65\u8865\u5145\u4e00\u4e0b\u3002\n\n##### \u9012\u5f52\u8fb9\u754c\u3002\n\n```cpp\n\tif(x<=l&&r<=y) \n\t\treturn sum[k]+(r-l+1)*add[k];\n```\n\n\u5f88\u7b80\u5355\uff0c\u65e2\u7136\u5f53\u524d\u533a\u95f4\u90fd\u88ab\u67e5\u8be2\u533a\u95f4\u7ed9\u8986\u76d6\u4e86\uff0c\u90a3\u80af\u5b9asum\u548cadd\u90fd\u8981\u52a0\u4e0a\u5566~\n\n```cpp\n\tll res=(min(r,y)-max(l,x)+1)*add[k];\n```\n\n##### \u8fd4\u56de\u503cres\u7684\u5904\u7406 2\n\n\u6b64\u5904\u4e3a\u4ec0\u4e48\u53ea\u52a0add\u503c\u5462\uff1f\u90a3\u662f\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u5e76\u6ca1\u6709\u88ab\u67e5\u8be2\u533a\u95f4\u7ed9\u5b8c\u5168\u8986\u76d6\uff0c\u4e3a\u4ec0\u4e48\u8981\u52a0add\u503c\u548cadd\u503c\u9488\u5bf9\u7684\u533a\u95f4\u5373(min(r,y)-max(l,x)+1)\u7684\u7531\u6765\u524d\u6587\u5df2\u63d0\u3002\u81f3\u4e8esum\u503c\uff0c\u7531\u4e8e\u5b83\u9488\u5bf9\u7684\u662f\u6574\u4e2a\u533a\u95f4\uff0c\u65e0\u6cd5\u5206\u5272\uff0c\u8fd9\u65e2\u5bfc\u81f4\u4e86\u5b83\u4e0d\u80fd\u7acb\u523b\u52a0\u4e0a\uff0c\u4f46\u4e5f\u4f7f\u5f97\u5b83\u5728\u9012\u5f52\u65f6\u6700\u7ec8\u4e00\u5b9a\u4f1a\u88ab\u8865\u4e0a\u3002\n\n\u5f53\u7136res\u8fd8\u8981\u52a0\u4e0a\u4e24\u4e2a\u513f\u5b50\u7684\uff08\u5982\u679c\u6ee1\u8db3\u9012\u5f52\u6761\u4ef6\u7684\u8bdd\uff09\u3002\n\n\u81f3\u4e8e\u9012\u5f52\u6761\u4ef6\u4e0e\u524d\u6587\u76f8\u540c\uff0c\u6b64\u5904\u4fbf\u4e0d\u518d\u8d58\u8ff0\u3002\n\n---------------------\n\n\u7ec8\u4e8e\u2014\u2014\u5b8c\u6574\u7684AC\u4ee3\u7801\u6765\u4e86\uff0c\u4e00\u4e9b\u7ec6\u8282\u4e5f\u4f1a\u5728\u91cc\u9762\u8865\u5145\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#define ll long long\nusing namespace std;\nconst int M=100005;\nint n,m;\nll a[M],sum[M*4],add[M*4];\n//\u522b\u5fd8\u4e86\uff0c\u7ebf\u6bb5\u6811\u8981\u5f004\u500d\u5927\u5c0f\u7684\u6570\u7ec4\n//\u6839\u636e\u9898\u610f\uff0c\u8981\u7528long long ,\u88ab\u5751\u4e86\u597d\u51e0\u6b21\nvoid build(int k,int l,int r)//\u5efa\u6811\uff0c\u5f88\u7b80\u5355\n{\n\tif(l==r)\n\t{\n\t\tsum[k]=a[l];   //\u6211\u66fe\u624b\u6b8bsum[k]=l >_<\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;   //\u8fd9\u4e9b\u5730\u65b9\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n\tsum[k]=sum[k*2+1]+sum[k*2];\n\treturn;\n}\nvoid modify(int k,ll v,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\tadd[k]+=v;\n\t\treturn; \n\t}\n\tsum[k]+=(min(r,y)-max(l,x)+1)*v;\n\tint mid=(l+r)/2;\n\tif(x<=mid) modify(k*2,v,l,mid,x,y);\n\tif(mid<y)  modify(k*2+1,v,mid+1,r,x,y);\n}\nll query(int k,int l,int r,int x,int y)\n{\n\tif(x<=l&&r<=y) \n\t\treturn sum[k]+(r-l+1)*add[k];   //\u6211\u66fe\u53c8\u624b\u6b8bsum[k]+(r-l+1)*a[k] >_<\n\tll res=(min(r,y)-max(l,x)+1)*add[k];\n\tint mid=(l+r)/2;\n\tif(x<=mid) res+=query(k*2,l,mid,x,y);\n\tif(mid<y)  res+=query(k*2+1,mid+1,r,x,y);\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&a[i]);\n\tbuild(1,1,n);\n\tfor(int i=1,x,y;i<=m;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tif(x==1)\n\t\t{\n\t\t\tll z;   //\u6b64\u5904\u4e5f\u8981long long\n\t\t\tscanf(\"%d%d%lld\",&x,&y,&z);//\u8bfb\u5165\u65f6\u8981long long  >_<\n\t\t\tmodify(1,z,1,n,x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",query(1,1,n,x,y));//\u8f93\u51fa\u662f\u4e5f\u8981long long  >_<\n\t\t}\n\t}\n\treturn 0;\n } \n```\n\n------------\n\n\u5f53\u7136\uff0c\u4f60\u53ef\u80fd\u65e0\u6cd5\u9a6c\u4e0a\u7406\u89e3\uff0c\u4f46\u4f60\u53ef\u4ee5\u518d\u770b\u51e0\u6b21\uff0c\u518d\u753b\u51e0\u4e2a\u56fe\uff0c\u6216\u8005\u9694\u51e0\u5929\u518d\u60f3\u3002\u65e0\u8bba\u662f\u4e3a\u4e86\u7ebf\u6bb5\u6811\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u8fd8\u662f\u9676\u9189\u4e8e\u4fe1\u606f\u5b66\u672c\u8eab\u7684\u9b45\u529b\uff0c\u6211\u90fd\u8877\u5fc3\u5730\u795d\u613f\u6bcf\u4e00\u4e2a\u8bfb\u8005\u80fd\u7406\u89e3\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u5199\u6cd5\u3002\n\n\u6700\u540e\uff0c\u672c\u4eba\u6765\u53d1\u8868\u4e00\u4e0b\u611f\u8a00qwq\u3002\n\n1. \u611f\u8c22\u6d1b\u8c37\u63d0\u4f9b\u7684\u597d\u5e73\u53f0\uff1b\n\n2. \u611f\u8c22\u7ba1\u7406\u5458\u5927\u5927\u7684\u8f9b\u52e4\u4ed8\u51fa\uff1b\n\n3. \u611f\u8c22\u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u672c\u901a\u00b7\u63d0\u9ad8\u7bc7\u7684\u8be6\u7ec6\u8bb2\u89e3 ~~\u5176\u5b9e\u4e0d\u600e\u4e48\u8be6\u7ec6~~\uff1b\n\n4. \u611f\u8c22\u81ea\u5df1~~\u5165\u5751~~\u5b66\u4fe1\u7ade\u4ee5\u6765\u4e0d\u61c8\u7684\u52aa\u529b\uff1b\n\n5. \u611f\u8c22\u968f\u624b\u7559\u8d5e\u7684\u4f60\u3002",
        "postTime": 1564300118,
        "uid": 165692,
        "name": "ttjb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\uff08\u8fd9\u662f\u4e00\u7bc7\u8d70\u9519\u4e86\u7684\u9898\u89e3\uff09\n\n\u7ebf\u6bb5\u6811\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728\u5e73\u8861\u6811\u4e0a\u5b9e\u73b0\uff0c\u5e76\u4e14\u5e73\u8861\u6811\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u7ebf\u6bb5\u6811\u65e0\u6cd5\u8fbe\u5230\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u5206\u88c2\u3001\u5408\u5e76\u533a\u95f4\u3002\u867d\u7136\u5e38\u6570\u4f1a\u5927\u4e00\u4e9b\uff0c\u4f46\u662f\u663e\u7136\u7528\u5904\u66f4\u5e7f.\n\n\u5173\u4e8e\u66f4\u591a\u6709\u5173\u5e73\u8861\u6811\u7684\u64cd\u4f5c\uff0c\u8bf7\u8be6\u89c1 P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\n\n\u5728\u8fd9\u91cc\uff0csplay\u6392\u5e8f\u7684\u4f9d\u636e\u662f\u6570\u636e\u7684\u987a\u5e8f\u800c\u4e0d\u662f\u6570\u503c\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6309\u7167\u5148\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u8f93\u51fa\u539f\u5e8f\u5217\u7684\u6240\u6709\u6570\u3002\n\nSplay\u57fa\u4e8e\u4f38\u5c55\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u63d0\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u6765\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u7684pushdown\u64cd\u4f5c\u6709\u4e86\u65b0\u5199\u6cd5\uff1a\u5c06\u5de6\u533a\u95f4\u7aef\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\u65cb\u81f3\u6839\u8282\u70b9\uff0c\u5c06\u53f3\u533a\u95f4\u7684\u7aef\u70b9\u7684\u540e\u4e00\u4e2a\u70b9\u65cb\u8f6c\u81f3\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u5904\uff0c\u8fd9\u6837\u5b83\u7684\u5de6\u5b50\u6811\u5c31\u662f\u6211\u4eec\u60f3\u67e5\u8be2/\u66f4\u6539\u7684\u533a\u95f4\u4e86\uff0c\u53ea\u9700\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u800c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u8981\u65cb\u8f6c\u7b2c\u4e00\u4e2a\u8282\u70b9\u52bf\u5fc5\u4f1a\u5f15\u8d77\u51b2\u7a81\uff0c\u6240\u4ee5\u6211\u4eec\u63d2\u5165\u65f6\u4ece2\u5f00\u59cb\u63d2\u5165\u771f\u6b63\u7684\u6570\u503c\uff0c\u5c061\u548cn+2\u7559\u7a7a\u907f\u514dRE\u3002\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\u53ca\u6ce8\u91ca\uff1a\n\n  \n\n//============================================================================\n\n    \n```cpp\n    // Name        : splay_seg.cpp\n    // Author      : LPA\n    // Version     :\n    // Copyright   : All rights reserved\n    // Description : splay_tree to mock segment tree\n    //============================================================================\n    #include<cstdio>\n    #include<algorithm>\n    #include<cstdlib>\n    #include<cctype>\n    using namespace std;\n    #define gc getchar()\n    #define R register\n    #define W while\n    #define IN inline\n    int root;\n    int dot;\n    bool fu;\n    IN void in(int &x)//\u5feb\u8bfb\uff0c\u6ce8\u610f\u6709\u8d1f\u6570\n    {\n        fu=false;x=0;char c=gc;\n        W(!isdigit(c))\n        {\n            if(c=='-')fu=true;\n            c=gc;\n        }\n        W(isdigit(c))\n        {\n            x*=10;x+=c-48;c=gc;\n        }\n        if(fu)x=0-x;\n    }\n    struct Splay\n    {\n        int son[2],father,value,delta,below;\n        long long tot;//\u4e00\u5b9a\u8981\u5f00longlong\uff0c\u5426\u5219\u4f1a\u6ea2\u51fa\n    }tree[100005];\n    IN void maintain(int now)//\u7ef4\u62a4\uff0c\u4e5f\u5c31\u662fpushup\n    {\n        tree[now].tot=tree[now].value;\n        tree[now].tot+=tree[tree[now].son[0]].tot+tree[tree[now].son[1]].tot;\n        if(now!=1&&now!=dot+2)//\u6ce8\u610f\uff0c\u4e24\u4e2a\u865a\u62df\u8282\u70b9\u4e0d\u80fd\u5728\u5b50\u6811\u5927\u5c0f\u4e2d\u8ba1\u7b97\u81ea\u5df1\uff0c\u5426\u5219\u8f93\u51fa\u65f6\u4f1a\u591a\u7b97\n        tree[now].below=1;\n        tree[now].below+=tree[tree[now].son[0]].below+tree[tree[now].son [1]].below;\n    }\n    IN void ensure(int now)//\u4e3a\u4e86\u786e\u4fdd\u4e24\u4e2a\u865a\u62df\u8282\u70b9\u4e3a0\uff0c\u5728\u9012\u5f52\u5efa\u6811\u540e\u91cd\u65b0pushup\u4e00\u904d\n    {\n        tree[now].below=0;\n        tree[now].value=0;\n        tree[now].tot=0;\n        now=tree[now].father;\n        while(true)\n        {\n            maintain(now);\n            if(now==root)return;\n            now=tree[now].father;\n        }\n    }\n    IN void addit(int now,int val)//\u4e0b\u653e\u6807\u8bb0\uff0c\u6ce8\u610f\u8981\u7acb\u5373\u66f4\u6539\u5b50\u6811\u603b\u548c\u503c\uff0c\u5426\u5219\u82e5\u9a6c\u4e0a\u67e5\u8be2\u66f4\u6539\u533a\u95f4\u4f1a\u7ffb\u8f66\n    {\n        if(!now)return;\n        tree[now].tot+=tree[now].below*val;\n        tree[now].delta+=val;\n        tree[now].value+=val;\n    }\n    IN void pushdown(int now)\n    {\n        if(tree[now].delta)\n        {\n            addit(tree[now].son[0],tree[now].delta);\n            addit(tree[now].son[1],tree[now].delta);\n            tree[now].delta=0;\n        }\n    }\n    void build(int lef,int rig,int fa,bool typ)//\u5148\u5efa\u4e00\u68f5\u76f8\u5bf9\u5e73\u8861\u7684\u6811\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\n    {\n        if(lef>rig)return;\n        int mid=(lef+rig)>>1;\n        tree[mid].below=1;\n        tree[mid].father=fa;\n        tree[fa].son[typ]=mid;\n        tree[mid].tot=tree[mid].value;\n        build(lef,mid-1,mid,0);\n        build(mid+1,rig,mid,1);\n        maintain(mid);\n    }\n    IN bool get(int now)//\u83b7\u53d6\u81ea\u5df1\u548c\u7236\u4eb2\u8282\u70b9\u7684\u5173\u7cfb\uff1a0\u4ee3\u8868\u5de6\u513f\u5b50\uff0c1\u4ee3\u8868\u53f3\u513f\u5b50\n    {\n        if(tree[tree[now].father].son[0]==now)return 0;\n        return 1;\n    }\n    IN void rotate(int now)//splay\u7ecf\u5178\u65cb\u8f6c\u64cd\u4f5c\n    {\n        int fa=tree[now].father;int gra=tree[fa].father;\n        bool dir=get(now);\n        tree[fa].son[dir]=tree[now].son[dir^1];\n        tree[tree[now].son[dir^1]].father=fa;\n        if(gra)tree[gra].son[get(fa)]=now;\n        tree[now].father=gra;\n        tree[fa].father=now;\n        tree[now].son[dir^1]=fa;\n        maintain(fa);\n        maintain(now);\n    }\n    IN void updata(int now)//\u4fdd\u8bc1\u5728\u4f38\u5c55\u64cd\u4f5c\u4e4b\u524d\u6240\u6709\u6807\u8bb0\u90fd\u5df2\u4e0b\u4f20\n    {\n        int k=root;\n        W(233)\n        {\n            pushdown(k);\n            if(now==k)break;\n            if(now>k)k=tree[k].son[1];\n            else k=tree[k].son[0];\n        }\n    }\n    IN void splay(int now , bool typ)\n    {\n        updata(now);\n        if(!typ)//\u65cb\u81f3\u6839\u8282\u70b9\n        {\n            W(tree[now].father)\n            {\n                rotate(now);\n                root=now;\n            }\n            root=now;\n        }\n        else//\u65cb\u81f3\u6839\u8282\u70b9\u53f3\u513f\u5b50\n        {\n            W(tree[tree[now].father].father)\n            rotate(now);\n            tree[root].son[1]=now;\n        }\n    }\n    IN void change(int lef,int rig,int val)//\u66f4\u6539\u533a\u95f4\n    {\n        splay(lef,0);\n        splay(rig+2,1);\n        addit(tree[tree[root].son[1]].son[0],val);\n        maintain(tree[root].son[1]);//\u6ce8\u610f\u540c\u65f6\u4e5f\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9\u66f4\u65b0\u4e86\n        maintain(root);\n    }\n    IN void query(int lef,int rig)//\u5f88\u7b80\u6d01\u6709\u6728\u6709\n    {\n        splay(lef,0);\n        splay(rig+2,1);\n        printf(\"%lld\\n\",tree[tree[tree[root].son[1]].son[0]].tot);\n    }\n    int main(void)\n    {\n        int num,a,b,c,d;\n        in(dot),in(num);\n        for(R int i=2;i<=dot+1;++i)\n            {in(tree[i].value);}\n        build(1,dot+2,0,0);\n        root=(dot+3)>>1;\n        ensure(1);\n        ensure(dot+2);\n        while(num--)\n        {\n            in(a);\n            if(a==1)\n            {\n                in(b),in(c),in(d);\n                change(b,c,d);\n            }\n            else\n            {\n                in(b),in(c);\n                query(b,c);\n            }\n        }\n    }\n\n```",
        "postTime": 1515170795,
        "uid": 67492,
        "name": "LPA20020220",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "zkw~~(\u91cd\u53e3\u5473)~~\u7ebf\u6bb5\u6811\uff0c\u8be6\u89c1[zkw\u7684PPT](https://wenku.baidu.com/view/f27db60ee87101f69e319544.html)\n\nzkw\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u662f\u4ece\u4e0b\u5230\u4e0a\u7684\uff0c\u6ca1\u6709\u56de\u6eaf\uff0c\u7528\u5faa\u73af\u4ee3\u66ff\u3002\u5404\u79cd\u64cd\u4f5c\u7684\u601d\u60f3\u540c\u666e\u901a\u7ebf\u6bb5\u6811\u3002\n\n1.\u5f00long long\n\n\n\n2.lb-getlong(k) \u5b50\u6811\u4e2d\u53f6\u8282\u70b9\u4e2a\u6570\n\n3.\u5de6\u5b50\u6811a[i<<1]\uff0c\u53f3\u5b50\u6811a[i<<1|1]\n\n\n4.a[]\u8be5\u8282\u70b9\u5b50\u6811\u7684\u548c\uff0cmark[]\u8be5\u8282\u70b9\u88ab\u8986\u76d6\u6b21\u6570\n\n\n5.zkw\u7ebf\u6bb5\u6811\u53ea\u80fd\u67e5\u8be2(0,bit)\uff0c\u6240\u4ee5\u53ea\u6709bit-2\u4e2a\u53f6\u8282\u70b9\uff0cbit-2<n\u8981\u6269\u5927\n\n\n\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\nint n,m;\nll a[400005],mark[400005];\nll bit,lb;\ninline int getlong(int k)//\u67e5\u8be2\u7ed3\u70b9\u7b2c\u51e0\u5c42\n{\n    int i=0;\n    while(k>>=1)i++;\n    return i;\n}\ninline int put(int k,int t)//\u4fee\u6539\n{\n    int tmp=1<<(lb-getlong(k));\n    while(k>>=1)\n        a[k]+=t*tmp;\n    return 0;\n}\ninline ll get1(ll k)//\u67e5\u8be2\n{\n    ll tmp=1<<(lb-getlong(k));tmp\u6709\u591a\u5c11\u53f6\u8282\u70b9\u5c31\u52a0\u51e0\u500d\n    ll re=a[k]+mark[k]*tmp;\n    do\n    {\n        k>>=1;\n        re+=mark[k]*tmp;\n    }while(k);\n    return re;\n}\ninline ll get(ll s,ll t)//\u533a\u95f4\u67e5\u8be2\n{\n    ll re=0;\n    for(s=s+bit-1,t=t+bit+1;s^t^1;s>>=1,t>>=1)//s-1\u548ct+1\u53d8\u5f00\u533a\u95f4\uff0cs+bit\u548ct+bit\u5230\u5bf9\u5e94\u53f6\u8282\u70b9\n    {\n        if(!(s&1))\n            re+=get1(s^1);//*(1<<(lb-getlong(s)));\n        if(t&1)\n            re+=get1(t^1);//*(1<<(lb-getlong(t)));\n    }\n    return re;\n}\ninline int change(ll s,ll t,ll k)//\u533a\u95f4\u4fee\u6539\n{\n    for(s=s+bit-1,t=t+bit+1;s^t^1;s>>=1,t>>=1)\n    {\n        //int tmp;\n        if(!(s&1))\n        {\n            mark[s^1]+=k;//*(1<<(lb-getlong(s)));\n            put(s^1,k);\n        }\n        if(t&1)\n        {\n            mark[t^1]+=k;//*(1<<(lb-getlong(t)));\n            put(t^1,k);\n        }\n    }\n    return 0;\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(bit=1;bit-2<n;bit<<=1);\n    lb=getlong(bit);\n    for(int i=bit+1;i<=bit+n;i++)\n        cin>>a[i];\n    for(int i=bit-1;i;i--)\n    {\n        a[i]=a[i<<1]+a[i<<1|1];//( i*2==i<<1) , (i*2+1==i<<1|1)\n        //a[i<<1]-=a[i];a[i<<1|1]-=a[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        ll aa,b,c,d;\n        cin>>aa;\n        if(aa==2)\n        {\n            cin>>b>>c;//cout<<b<<' '<<c<<' '<<get(b,c)<<endl;\n            cout<<get(b,c)<<endl;\n            for(int i=1;i<=n+bit;i++)cout<<get1(i)<<' ';cout<<endl;\n        }\n        else\n        {\n            cin>>b>>c>>d;change(b,c,d);\n            //cout<<b<<' '<<c<<' '<<d<<endl;\n            for(int i=1;i<=n+bit;i++)cout<<get1(i)<<' ';cout<<endl;\n        }\n    }\n\n    //cout << \"Hello world!\" << endl;\n    return 0;\n}\n```",
        "postTime": 1503622277,
        "uid": 35143,
        "name": "PM250",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "> ## \u6d45\u8c08\u5206\u5757\n\n#### \u5206\u5757\u7684\u7528\u5904?\n\n\u5206\u5757\u53ef\u4ee5\u5904\u7406\u533a\u95f4\u7684\u95ee\u9898,\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u3002\n\n#### \u5206\u5757\u7684\u4f18\u7f3a\u70b9?\n\n$I.$\u5206\u5757\u7684\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4e0a\u754c\u4e3a$O(1)$,\u4e0b\u754c\u4e3a$O(sqrt(n))*3$,\u5e73\u5747\u662f$O(sqrt(n))$\u3002\u800c\u7ebf\u6bb5\u6811\u7684\u4e0a\u754c\u662f\u4e3a$O(1)$,\u4e0b\u754c\u662f\u4e3a$O(log\\ n)$,\u5e73\u5747\u4e5f\u662f$O(log\\ n)$\u3002\n\n$II.$\u4e0d\u8fc7\u5206\u5757\u5c31\u662f\u4e00\u4e2a\u6570\u7ec4,\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6bd4\u8f83\u7edd\u5bf9\u7684\u7ebf\u6027\u7684,\u7b97\u8d77\u6765\u5c31\u662f$sqrt(n)*2+n$,\u5c31\u662f$O(n)$\u3002\u800c\u7ebf\u6bb5\u6811\u662f$2*n$,\u867d\u7136\u662f$O(n)$,\u4e0d\u8fc7\u4e5f\u662f\u6709\u70b9\u5bb9\u6613\u88ab\u5361\u7684\u3002\n\n$III.$\u6700\u540e\u5206\u5757\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3,\u9002\u7528\u4e8e\u65b0\u624b\u3002\n\n> ### \u5206\u5757\u601d\u60f3:\u4f18\u96c5\u66b4\u529b\n\n\u6211\u4eec\u628a\u4e00\u4e2a\u6570\u7ec4(\u6570\u7684\u603b\u6570\u4e3a$n$),\u5206\u6210$k$\u5757,\u6bcf\u4e00\u5757\u6709$kk$\u4e2a\u6570\u3002\u600e\u4e48\u5206\u5462?\u544a\u8bc9\u4f60$kk$\u4e25\u683c\u7b49\u4e8e$sqrt(n)$,\u4e3a\u4ec0\u4e48?\u56e0\u4e3a\u8981\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u554a!(\u7406\u89e3\u4e00\u4e0b)\n\n\n\u90a3\u4e48$k$\u4e00\u5b9a\u6709$sqrt(n)$\u5757\u54af(\u56e0\u4e3a$sqrt(n)^2=n$)\u3002\u9519!\u5982\u679c$k^2<>n$(\u4e5f\u5c31\u662f$n$\u4e0d\u80fd\u88ab\u6574\u5f00\u65b9),$k+=1/inc(k)$\u3002(\u56e0\u4e3a$n$\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u5e73\u5206)\n\n\u597d\u4e86,\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5206\u597d\u5757\u4e86,\u6211\u4eec\u8981\u600e\u4e48\u77e5\u9053\u4e0b\u6807\u4e3a$n$\u7684\u5757\u662f\u7b2c\u51e0\u5757?\n\n$I.$\u5047\u5982$kk=4$\u3002\u90a3\u4e48$1-4$\u662f\u7b2c\u4e00\u5757,$5-8$\u662f\u7b2c\u4e8c\u5757,$9-12$\u662f\u7b2c\u4e09\u5757.....\n\n$II.$\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa,\u5982\u679c$n\\ mod\\ kk=0$,\u90a3\u4e48\u4e0b\u6807$n$\u7684\u5757\u5c31\u662f$n\\ div\\ kk$\u3002\u5426\u5219\u5c31\u662f$n\\ div\\ kk+1$\u3002\n\n```\n1 2 3 4 5 6 7 8 9 10\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0\n```\n$10$\u4e2a\u6570\u5206\u4e3a$4$\u5757,\u6bcf$1$\u5757$3$\u4e2a\u6570\u3002\n\n> ### \u5206\u5757\u600e\u4e48\u7528?\n\n\u6211\u4eec\u5206\u4e86\u5757\u4ee5\u540e,\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u3002\u9996\u5148\u5148\u58f0\u660e\u4e00\u4e9b\u53d8\u91cf:$intersum,interadd,num$,\u610f\u601d\u5206\u522b\u4e3a**\u4e00\u6574\u5757\u7684\u503c,\u6574\u4f53\u52a0\u4e86\u591a\u5c11,\u548c\u4e00\u5f00\u59cb\u7ed9\u7684\u503c**\u3002\n\n\u5047\u5982\u6211\u4eec\u8981\u628a\u533a\u95f4$l,r$\u5168\u90e8\u52a0\u4e0a$add$\u7684\u8bdd,\u6211\u4eec\u5c31\u770b\u8fd9\u4e2a\u533a\u95f4\u5185\u6700\u5de6\u8fb9\u7684\u5757\u7684\u5de6\u4e0b\u6807\u548c\u6700\u53f3\u8fb9\u7684\u5757\u7684\u53f3\u4e0b\u6807(\u4e3a\u4e86\u627e\u51fa\u4e2d\u95f4\u7684\u5757\u603b\u548c)\u3002\u7136\u540e\u6211\u4eec\u5c31\u5bf9\u6240\u6709\u4e2d\u95f4\u7684\u5757\u7684$intersum[i]+add$,\u800c\u591a\u51fa\u6765\u7684,\u5c31$num[j]+add$\u5c31\u53ef\u4ee5\u4e86(\u5f53\u7136$i$\u53ef\u4ee5\u91cd\u590d\u7528)\u3002\n\n\u4e5f\u5c31\u662f\u8fd9\u6837:\n\n```\n\u6211\u4fee\u6539(\u67e5\u8be2)\u533a\u95f43-10\u3002\n\n1 2 3 4 5 6 7 8 9 10\n\u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0 \u25a0\n\u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0 \u25a0\u25a0\u25a0\u25a0\u25a0\n    \u25c6 \u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 \u25c6\n```\n\n\u5176\u4e2d\u25c6\u5c31\u662f\u8981\u66b4\u529b$+add$\u7684,\u800c\u25a0\u5c31\u662f\u4e00\u5757\u4e00\u5757\u533a\u95f4\u52a0\u7684\u3002(\u8981\u6ce8\u610f\u503c\u6539\u53d8\u7684\u540c\u65f6,$intersum$\u4e5f\u8981\u52a0)\n\n\u65e0\u8bba\u662f\u533a\u95f4\u4fee\u6539\u64cd\u4f5c,\u8fd8\u662f\u533a\u95f4\u67e5\u8be2\u64cd\u4f5c,\u90fd\u53ef\u4ee5\u8fd9\u6837\u5f04\u3002\n\n> #### $Code$\n\n\u5982\u679c\u8981\u770b\u5b9e\u73b0\u8be6\u60c5\u548c\u7ec6\u8282,\u8bf7\u770b[\u526a\u8d34\u677f](https://www.luogu.org/paste/c914o3sg)\u3002\n\n\n> ### \u731c\u60f3\n\n\u6211\u4eec\u518d\u60f3\u4e00\u60f3,\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5e72\u4ec0\u4e48?\n\n\u7ebf\u6bb5\u6811\u53ef\u4ee5\u6c42\u533a\u95f4\u6700\u5927\u503c,\u5206\u5757\u53ef\u4ee5\u5417?\u5047\u5982\u6211\u4eec\u6709\u6570\u7ec4$intermax$\u5b58\u50a8\u7684\u662f\u533a\u95f4\u6700\u5927,\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9$l,r$\u533a\u95f4\u8fdb\u884c\u6700\u5927\u5757$max$,\u7136\u540e\u5bf9\u591a\u4f59\u7684\u8fdb\u884c\u5355\u4e2a\u6570$max$\u3002\u8fd9\u6837\u5b50\u5176\u5b9e\u5f88\u591a\u4f59,\u771f\u7684\u5c31\u4e0d\u5982$O(n\\ log\\ n)$\u6216\u8005$ST$\u8868\u3002(\u5206\u5757\u5b9e\u73b0\u4e0b\u754c\u662f$O(sqrt(n)*3)$)\u3002\n\n\u7ebf\u6bb5\u6811\u6709\u6743\u503c\u7ebf\u6bb5\u6811,\u5206\u5757\u53ef\u4ee5\u5b58\u50a8\u6743\u503c\u5417?\u5047\u5982\u6211\u4eec\u50cf\u6c42\u9006\u5e8f\u5bf9\u4e00\u6837,\u6bcf\u4e00\u4e2a\u6570(\u4e5f\u5c31\u6210\u4e86\u6876)\u90fd\u50a8\u5b58\u8fd9\u51fa\u73b0\u6b21\u6570\u3002\u6211\u4eec\u5bf9\u5176\u5206\u5757\u540e,\u60f3\u8981\u627e$a_i$\u7684\u9006\u5e8f\u5bf9,\u5c31\u76f4\u63a5\u5728\u533a\u95f4$l,i$\u533a\u95f4\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7ebf\u6bb5\u6811\u5206\u5272\u51fa\u6765\u4e3b\u5e2d\u6811,\u5206\u5757\u53c8\u80fd\u600e\u6837\u5347\u534e\u5462?\u90a3\u4e48\u672c\u4eba\u5f88\u5f31,\u5c31\u7559\u7ed9\u5927\u5bb6\u81ea\u5df1\u60f3\u5427\u3002\n\n> ### \u4f8b\u9898\n\n$I.$[\u7ebf\u6bb5\u68111](https://www.luogu.org/problemnew/show/P3372) [\u533a\u95f4\u548c](https://www.luogu.org/problemnew/show/P2068) \u968f\u4fbf\u641e\u4e00\u641e\u3002\n\n$II.$[\u7ebf\u6bb5\u68112](https://www.luogu.org/problemnew/show/P3373) \u4e5f\u662f\u968f\u4fbf\u641e\u4e00\u641e,\u7528\u5206\u5757\u53ef\u80fd\u4f1a\u6bd4\u7ebf\u6bb5\u6811\u6253\u61d2\u6807\u8bb0\u597d\u4e00\u4e9b\u3002\n\n\u611f\u8c22 @larryzhong \u5927\u4f6c,\u63a8\u8350\u4e86\u8fd9\u9053\u9898:[\u6559\u4e3b\u7684\u9b54\u6cd5](https://www.luogu.org/problemnew/show/P2801)\u3002\u8fd9\u9053\u9898\u5c31\u662f\u5178\u578b\u7684\u5206\u5757\u7684\u9898\u76ee\u3002\u4e3a\u4ec0\u4e48\u600e\u4e48\u4e86\u5bb9\u6613\u770b\u51fa?\n\n$N\\leq1000000$\u3002\u597d\u7684,\u8fd8\u4e0d\u4fe1\u8fd9\u9053\u9898\u4e00\u5b9a\u8981$O(n)$\u7684\u590d\u6742\u5ea6\u3002\u8981\u6ce8\u610f\u7ebf\u6bb5\u6811\u7684\u70b9\u6570\u662f$2*N-1$\u3002\u5982\u679c\u9047\u5230\u7684\u9898\u7a7a\u95f4\u5f88\u7d27,\u8bf7\u7528\u5206\u5757\u3002\n\n\n\u81f3\u4e8e\u533a\u95f4\u95ee\u9898,\u5206\u5757\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3\u7684\u5566\u3002\n\n(\u8ba4\u771f\u770b\u5b8c\u9898\u76ee\u56de\u6765\u53d1\u73b0\u8fd9\u9898\u8981\u7528\u4e3b\u5e2d\u6811qwq,\u662f\u6240\u4ee5\u8fd8\u662f\u6c34\u5206\u5757\u5427qwq)",
        "postTime": 1532569254,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u6d45\u8c08\u5206\u5757(\u7efc\u5408\u7bc7\u76ee)"
    },
    {
        "content": "# \u7b97\u6cd5\u540d\uff1a\u7ebf\u6bb5\u6811/Segment Tree\n\n\u5728\u5927\u5bb6\u505a\u9898\u7684\u65f6\u5019\n\n\u96be\u514d\u4f1a\u9047\u5230\u4e00\u4e9b\u8981\u6c42\u5355\u70b9/\u533a\u95f4\u67e5\u8be2/\u4fee\u6539\u7684\u95ee\u9898\n\n\u5176\u4e2d\u5355\u70b9\u64cd\u4f5c\u53ef\u4ee5\u7528\u6570\u7ec4$O(1)$\u5b9e\u73b0\n\n\u4f46\u662f\u533a\u95f4\u64cd\u4f5c\u7528\u6570\u7ec4\u9700\u8981$O(n)$\u7684\u590d\u6742\u5ea6\n\n\u8fd9\u6837\u7684\u4ee3\u4ef7\u662f\u975e\u5e38\u9ad8\u7684\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff1a\u7ebf\u6bb5\u6811\n\n\u5b83\u957f\u8fd9\u6837\uff1a\n\n![\u7ebf\u6bb5\u6811\u793a\u610f\u56fe](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_1.png)\n\n\u5728\u5efa\u6811\u7684\u65f6\u5019\uff0c\u6709\u4e24\u79cd\u5efa\u6811\u65b9\u6cd5\uff1a\n\n\u6309\u7167\u5df2\u6709\u6570\u7ec4\u5efa\u6811\uff0c\u6216\u52a8\u6001\u5f00\u70b9\n\n\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53ef\u80fd\u4f1aMLE\uff08\u5982\u679c\u9898\u76ee\u7ed9\u4f60\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u7ec4\u4f46\u53ea\u6709\u51e0\u4e2a\u6570\u5b57\u5df2\u77e5\u7684\u8bdd\uff09\n\n\u6240\u4ee5\u6211\u76f4\u63a5\u4ecb\u7ecd\u52a8\u6001\u5f00\u70b9\uff1a\uff08\u5176\u5b9e\u5c31\u662f\u5355\u70b9\u4fee\u6539\u7684\u8fc7\u7a0b\uff09\n\n## \u5355\u70b9\u4fee\u6539\n\n```cpp\n// root\u9700\u8981\u5f15\u7528\u4f20\u9012\uff0ct\u4e3a\u4fee\u6539\u7684\u53f6\u5b50\u8282\u70b9\u7f16\u53f7\uff08\u76f8\u5f53\u4e8e\u5bf9\u5e94\u7684\u6570\u7ec4\u7f16\u53f7\uff09\uff0cx\u4e3a\u589e\u52a0\u7684\u503c\nvoid Update(int &root, int l, int r, int t, int x) {\n  if (root == 0) root = ++cnt; // root\u548ccnt\u9884\u5904\u7406\u4e3a0\uff0c\u5f53\u8fd9\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\u65f6\u5c31\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\n  sum[root] += x; // sum[i]\u6570\u7ec4\u8868\u793a\u4ee5\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u4e3a\u6839\u7684\u6811\u7684\u53f6\u5b50\u8282\u70b9\u503c\u4e4b\u548c\n  if (l == r) return;\n  int mid = (l + r) >> 1;\n  if (t <= mid) Update(ll[root], l, mid, t, x);\n      // ll[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7\uff08\u9884\u5904\u7406\u4e3a0\uff09\n  else Update(rr[root], mid + 1, r, t, x);\n      // rr[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u7f16\u53f7\uff08\u9884\u5904\u7406\u4e3a0\uff09\n}\n```\n\n~~\u6211\u77e5\u9053\u6ca1\u6709\u56fe\u89e3\u4f60\u4eec\u662f\u770b\u4e0d\u61c2\u7684~~\n\n\u8fd9\u91cc\u4ee5\n\n```cpp\nUpdate(root, 1, 16, 5, 8);\nUpdate(root, 1, 16, 6, 7);\nUpdate(root, 1, 16, 10, 3);\n```\n\n\u4e3a\u4f8b\uff1a\n\n\u9996\u5148\u53d1\u73b0root\u4e3a0\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8fd9\u68f5\u6811\u8fd8\u6ca1\u6709\u5efa\n\n\u56e0\u6b64root\u53d8\u4e3a1\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e31](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_2.png)\n\n\u7136\u540e\u5411\u4e0b\u9012\u5f52\uff0c\u53d1\u73b0`5 <= mid`\u4e14`ll[1]`\u4e3a0\n\n\u56e0\u6b64\u5f00\u4e00\u4e2a\u70b9\uff08`ll[1] = 2`\uff09\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e32](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_3.png)\n\n\u7136\u540e\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`5 > mid`\u4e14`rr[2]`\u4e3a0\n\n\u56e0\u6b64\u5f00\u4e00\u4e2a\u70b9\uff08`rr[2] = 3`\uff09\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e33](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_4.png)\n\n\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`5 <= mid`\u4e14`ll[3]`\u4e3a0\n\n\u56e0\u6b64\u5f00\u4e00\u4e2a\u70b9\uff08`ll[3] = 4`\uff09\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e34](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_5.png)\n\n\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`5 <= mid`\u4e14`ll[4]`\u4e3a0\n\n\u56e0\u6b64\u5f00\u4e00\u4e2a\u70b9\uff08`ll[4] = 5`\uff09\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e35](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_6.png)\n\n\u7136\u540e\u53d1\u73b0`l == r`\uff0c\u56de\u6eaf\uff0c5\u53f7\u70b9\u63d2\u5165\u5b8c\u6bd5\n\n\u63a5\u4e0b\u6765\u662f\u7b2c\u4e8c\u4e2a\u70b9\n\n\u9996\u5148\u53d1\u73b0 `root == 1`\n\n\u56e0\u6b64\u76f4\u63a5\u4fee\u6539\u4e00\u53f7\u8282\u70b9\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e36](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_7.png)\n\n\u7136\u540e\u5411\u4e0b\u9012\u5f52\uff0c\u53d1\u73b0`6 <= mid`\u4e14`ll[1]`\u4e3a2\n\n\u56e0\u6b64\u76f4\u63a5\u4fee\u6539\u4e8c\u53f7\u8282\u70b9\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e37](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_8.png)\n\n\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`6 > mid`\u4e14`rr[2]`\u4e3a3\n\n\u56e0\u6b64\u76f4\u63a5\u4fee\u6539\u4e09\u53f7\u8282\u70b9\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e38](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_9.png)\n\n\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`6 <= mid`\u4e14`ll[3]`\u4e3a4\n\n\u56e0\u6b64\u76f4\u63a5\u4fee\u6539\u56db\u53f7\u8282\u70b9\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e39](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_10.png)\n\n\u7ee7\u7eed\u9012\u5f52\uff0c\u53d1\u73b0`6 > mid`\u4e14`rr[4]`\u4e3a0\n\n\u56e0\u6b64\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e310](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_11.png)\n\n\u7136\u540e\u662f\u7b2c\u4e09\u4e2a\uff0c\u4e0b\u6807\u4e3a10\uff0c\u589e\u52a03\n\n\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\u4e86\uff0c\u76f4\u63a5\u7ed9\u51fa\u7ed3\u679c\uff1a\n\n![\u7ebf\u6bb5\u6811\u56fe\u89e3\u6700\u7ec8\u7ed3\u679c](https://accept-auto-machine-picture.oss-cn-hongkong.aliyuncs.com/picture/Segment%20Tree_12.png)\n\n\u4f46\u6211\u76f8\u4fe1\u5927\u5bb6\u7ed3\u5408\u4ee3\u7801\u5e94\u8be5\u90fd\u770b\u61c2\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4ecb\u7ecd\u4e0b\u4e00\u79cd\u64cd\u4f5c\n\n## \u5355\u70b9/\u533a\u95f4\u67e5\u8be2\n\n\u9996\u5148\u8bf4**\u533a\u95f4\u67e5\u8be2**\n\n\u8fd9\u91cc\u5148\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n// \u5f53\u524d\u8282\u70b9\u662froot\uff0croot\u5bf9\u5e94\u7684\u533a\u95f4\u662f[l,r]\uff0c\u8981\u67e5[x,y]\u7684\u548c\nint Query(int root, int l, int r, int x, int y) {\n  if (l == x && r == y) return sum[root];\n      // \u5982\u679c\u67e5\u8be2\u533a\u95f4\u4e0e\u5df2\u77e5\u533a\u95f4\u543b\u5408\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u6bb5\u533a\u95f4\u7684\u548c\n  int mid = (l + r) >> 1, suml = 0, sumr = 0;\n  if (x <= mid) suml = Query(ll[root], l, mid, x, min(mid, y));\n      // \u8981\u67e5\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u88ab\u5de6\u513f\u5b50\u533a\u95f4\u5305\u542b\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u67e5\u7684\u533a\u95f4\u548c\u5de6\u513f\u5b50\u533a\u95f4\u6709\u4ea4\u96c6\n  if (y > mid) sumr = Query(rr[root], mid + 1, r, max(mid + 1, r), y);\n      // \u8981\u67e5\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u88ab\u53f3\u513f\u5b50\u533a\u95f4\u5305\u542b\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u67e5\u7684\u533a\u95f4\u548c\u53f3\u513f\u5b50\u533a\u95f4\u6709\u4ea4\u96c6\n  return suml + sumr;\n}\n```\n\n\u8fd9\u91cc\u5927\u5bb6\u53ef\u4ee5\u62ff\u5f20\u7eb8\u5bf9\u7740\u753b\u4e00\u4e0b\u3002~~\u5f53\u7136\u5982\u679c\u60a8\u591f\u5de8\u5e94\u8be5\u662f\u80fd\u76f4\u63a5\u770b\u61c2\u7684~~\n\n\u90a3\u4e48\u5355\u70b9\u67e5\u8be2\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6bd4\u5982\u8981\u67e55\u53f7\uff0c\u53ea\u9700\n\n```cpp\nQuery(root, 1, 16, 5, 5);\n```\n\n\u5c31\u662f\u8fd9\u6837\\~\n\n\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u8bb2\u7ebf\u6bb5\u6811\u7684\u4e13\u957f\uff1a\n\n## \u533a\u95f4\u4fee\u6539\n\n\u5bf9\u4e8e\u533a\u95f4\u4fee\u6539\uff0c\u6700\u66b4\u529b\u7684\u65b9\u6cd5\u5c31\u662f\u533a\u95f4\u5185\u6bcf\u4e2a\u70b9\u90fd\u6539\u4e00\u904d\n\n\u8fd9\u6837\u4e0b\u6765\u590d\u6742\u5ea6\u662f$O(n\\log{n})$\u7684\n\n\u5f88\u660e\u663e\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u9000\u5316\u4e86\n\n\u8fd9\u91cc\u6211\u4eec\u8bb2\u4e00\u4e2a\u53ebLazy Tag\uff08\u61d2\u6807\u8bb0\uff09\u7684\u4e1c\u897f\n\n\u5f53\u4fee\u6539\u533a\u95f4\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u548c\u539f\u533a\u95f4\u543b\u5408\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4fbf\u5728\u8be5\u8282\u70b9\u4e0a\u653e\u4e0a\u503c\u4e3a\u6240\u8981\u4fee\u6539\u7684\u503c\u7684\u6807\u8bb0\n\n\u7b49\u5c06\u6765\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u5019\u518d\u4e00\u8fb9\u9012\u5f52\u4e00\u8fb9\u4fee\u6539\n\n\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u4f18\u52bf\u5728\u4e8e\u5148\u8fdb\u884c\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\log{n})$\u7684\u6807\u8bb0\u8bbe\u7f6e\u64cd\u4f5c\n\n\u4f46\u6ca1\u6709\u76f4\u63a5\u5355\u72ec\u8fdb\u884c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log{n})$\u7684\u4e0b\u653e\u6807\u8bb0\u5e76\u4fee\u6539\u7684\u64cd\u4f5c\n\n\u800c\u662f\u5c06\u5176\u5d4c\u5165\u67e5\u8be2\u64cd\u4f5c\u4e2d\uff0c\u968f\u7740\u67e5\u8be2\u5c42\u6570\u7684\u6df1\u5165\u800c\u9010\u5c42\u4fee\u6539\u5e76\u4e0b\u653e\u6807\u8bb0\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4ecd\u662f$O(\\log {n})$\u7684\n\n\n\n\u90a3\u4e48\u4ee3\u7801\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u51fd\u6570\u91cd\u8f7d\u6765\u533a\u5206\u5355\u70b9\u4fee\u6539\u4e0e\u533a\u95f4\u4fee\u6539\n\n```cpp\n//\u5f53\u524d\u8282\u70b9\u7f16\u53f7\uff0c\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u8981\u4fee\u6539\u7684\u533a\u95f4\u7f16\u53f7\uff0c\u589e\u52a0\u7684\u503c\nvoid Update(int &root, int l, int r, int p, int q, int x) {\n  if (root == 0) root = ++cnt;\n  int num = min(r, q) - max(l, p) + 1; // \u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u4e0e\u67e5\u8be2\u533a\u95f4\u7684\u4ea4\u96c6\u7684\u957f\u5ea6\n  sum[root] += x * num;\n      // \u56e0\u4e3a\u4e0a\u8ff0\u4ea4\u96c6\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u8981\u52a0x\uff0c\u5171num\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5root\u7684sum\u8981\u8fd9\u6837\u52a0\n  if (l == p && r == q) { // \u6309\u4e0a\u6587\u6240\u8bf4\uff0c\u4e24\u533a\u95f4\u543b\u5408\u540e\u6267\u884c\u8bbe\u7f6e\u6807\u8bb0\u64cd\u4f5c\n    tag[root] += x;\n    return; // \u672c\u51fd\u6570\u5185\u4e0d\u518d\u6267\u884c\u66f4\u6df1\u7684\u64cd\u4f5c\uff0c\u76f4\u63a5\u56de\u6eaf\n  }\n  int mid = (l + r) >> 1;\n  if (p <= mid) Update(ll[root], l, mid, p, min(mid, q), x);\n  if (q > mid) Update(rr[root], mid + 1, r, max(mid + 1, p), q, x);\n      // \u8fd9\u4e24\u5904if\u7684\u4f5c\u7528\u662f\u9012\u5f52\u8fdb\u5165\u65f6\u786e\u4fdd\u4e24\u5b50\u533a\u95f4\u4e0e\u67e5\u8be2\u5b50\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u9632\u6b62num\u4e3a\u8d1f\n}\n```\n\n\u90a3\u4e48\u4e0b\u653e\u6807\u8bb0\u5e76\u4fee\u6539\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u8bf4\u4e86\uff0c\u8981\u5c06\u5b83\u5d4c\u5165\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u5728\u67e5\u8be2\u64cd\u4f5c\u51fd\u6570\u4e2d\u5728\u5206\u5b50\u533a\u95f4\u67e5\u8be2\u524d\u5148\u5c06\u6807\u8bb0\u4e0b\u653e\u5230\u4e24\u4e2a\u5b50\u533a\u95f4\u3002\n\n\u8be5\u51fd\u6570\u6539\u4e3a\u8fd9\u6837\uff1a\n\n```cpp\nint Query(int root, int l, int r, int x, int y) {\n  if (l == x && r == y) return sum[root];\n  // \u5728\u6211\u4e0b\u9762QwQ\n  Down(root, l, r);\n  // \u5728\u6211\u4e0a\u9762QWQ\n  int mid = (l + r) >> 1, suml = 0, sumr = 0;\n  if (x <= mid) suml = Query(ll[root], l, mid, x, min(mid, y));\n  if (y > mid) sumr = Query(rr[root], mid + 1, r, max(mid + 1, r), y);\n  return suml + sumr;\n}\n```\n\n\u5bf9\u5e94\u7684Down\u51fd\u6570\uff1a\n\n```cpp\ninline void Down(int root, int l, int r) {\n  if (ll[root] == 0) ll[root] = ++cnt;\n  if (rr[root] == 0) rr[root] = ++cnt;\n  tag[ll[root]] += tag[root], tag[rr[root]] += tag[root];\n      // \u5c06\u6807\u8bb0\u4e0b\u653e\u5230\u5b50\u533a\u95f4\n  int mid = (l + r) >> 1;\n  sum[ll[root]] += tag[root] * (mid - l + 1);\n      // \u5de6\u5b50\u533a\u95f4\u7684\u548c\u7684\u589e\u52a0\uff0c\u5373\u5bf9\u5e94\u6807\u8bb0\u7684\u503c\uff08\u8981\u4fee\u6539\u7684\u503c\uff09\u4e58\u5de6\u5b50\u533a\u95f4\u957f\u5ea6\n  sum[rr[root]] += tag[root] * (r - mid);\n      // \u53f3\u5b50\u533a\u95f4\u7684\u548c\u7684\u589e\u52a0\uff0c\u5373\u5bf9\u5e94\u6807\u8bb0\u7684\u503c\uff08\u8981\u4fee\u6539\u7684\u503c\uff09\u4e58\u53f3\u5b50\u533a\u95f4\u957f\u5ea6\n  tag[root] = 0; // \u5f53\u524d\u8282\u70b9\u64cd\u4f5c\u5b8c\u6bd5\uff0c\u91cd\u7f6e\u6807\u8bb0\u503c\n}\n```\n\n\u4ee5\u4e0a\u4fbf\u662f\u7ebf\u6bb5\u6811\u7684\u6240\u6709\u57fa\u7840\u64cd\u4f5c\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u7ed3\u5408\u5b9e\u73b0\uff1a\n\n## \u6d1b\u8c37 P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename T> inline T _max(const T &a, const T &b) {\n  return a > b ? a : b;\n}\ntemplate<typename T> inline T _min(const T &a, const T &b) {\n  return a < b ? a : b;\n}\ntemplate<typename T> T Read() {\n  int ch;\n  T ans = 0;\n  do {\n    ch = getchar();\n  } while (!isdigit(ch));\n  do {\n    ans = ans * 10 + (ch - '0');\n    ch = getchar();\n  } while (isdigit(ch));\n  return ans;\n}\ntemplate<typename T> void Write(T ans) {\n  if (ans < 0) {\n    putchar('-');\n    ans = -ans;\n  }\n  if (ans >= 10) {\n    Write(ans / 10);\n  }\n  putchar((int)(ans % 10) + '0');\n}\n#define MAX_N 400010\nint ll[MAX_N], rr[MAX_N];\nlong long sum[MAX_N], tag[MAX_N]; // \u9898\u76ee\u8981\u6c42\u5f00long long\nint cnt = 0;\nvoid Update(int &root, int l, int r, int t, long long x) {\n  if (root == 0) root = ++cnt;\n  sum[root] += x;\n  if (l == r) return;\n  int mid = (l + r) >> 1;\n  if (t <= mid) Update(ll[root], l, mid, t, x);\n  else Update(rr[root], mid + 1, r, t, x);\n}\ninline void Down(int root, int l, int r) {\n  if (ll[root] == 0) ll[root] = ++cnt;\n  if (rr[root] == 0) rr[root] = ++cnt;\n  tag[ll[root]] += tag[root], tag[rr[root]] += tag[root];\n  int mid = (l + r) >> 1;\n  sum[ll[root]] += tag[root] * (mid - l + 1);\n  sum[rr[root]] += tag[root] * (r - mid);\n  tag[root] = 0;\n}\nlong long Query(int root, int l, int r, int x, int y) {\n  if (l == x && r == y) return sum[root];\n  Down(root, l, r);\n  int mid = (l + r) >> 1;\n  long long suml = 0, sumr = 0;\n  if (x <= mid) suml = Query(ll[root], l, mid, x, _min(mid, y));\n  if (y > mid) sumr = Query(rr[root], mid + 1, r, _max(mid + 1, x), y);\n  return suml + sumr;\n}\nvoid Update(int &root, int l, int r, int p, int q, long long x) {\n  if (root == 0) root = ++cnt;\n  int num = _min(r, q) - _max(l, p) + 1;\n  sum[root] += x * num;\n  if (l == p && r == q) {\n    tag[root] += x;\n    return;\n  }\n  int mid = (l + r) >> 1;\n  if (p <= mid) Update(ll[root], l, mid, p, _min(mid, q), x);\n  if (q > mid) Update(rr[root], mid + 1, r, _max(mid + 1, p), q, x);\n}\nint main() {\n  int n = Read<int>(), m = Read<int>(), root = 0;\n  for (register int i = 1; i <= n; ++i) {\n    long long t = Read<long long>();\n    Update(root, 1, n, i, t);\n  }\n  for (register int i = 1; i <= m; ++i) {\n    int o = Read<int>();\n    if (o == 1) {\n      int x = Read<int>(), y = Read<int>();\n      long long k = Read<long long>();\n      Update(root, 1, n, x, y, k);\n    } else if (o == 2) {\n      int x = Read<int>(), y = Read<int>();\n      Write(Query(root, 1, n, x, y));\n      putchar('\\n');\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1548681359,
        "uid": 102080,
        "name": "Jaanai",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "**\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053fhq_treap\u6a21\u677f\u9898**\n\n\u4ec0\u4e48\u662ffhq_treap\u5462\uff1f~~\u76f8\u4fe1\u5728\u5750\u7684dalao\u4eec\u90fd\u77e5\u9053\uff0c\u5c31\u4e0d\u5728\u505a\u8d58\u8ff0~~\n\nfhq_treap\uff0c\u662f\u4e00\u4f4d\u540d\u53ebfhq\u7684\u795e\u7287\u60f3\u51fa\u6765\u7684\uff0c\u662f\u4e00\u79cd\u5e73\u8861\u6811\u6570\u636e\u7ed3\u6784\n\n\u5b83\u57fa\u672c\u4e0a\u80fd\u591f\u652f\u6301\u5927\u90e8\u5206splay\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u7801\u91cf\u9002\u4e2d\n\nfhq_treap\u7684\u7ef4\u62a4\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\uff1a**split**(\u5206\u79bb),**merge**(\u5408\u5e76)\n\n### **Split**:\n\n\u628a\u6811\u5206\u88c2\u6210\u4e24\u4e2a\u90e8\u5206\n\n### **Merge**:\n\n\u628a\u4e24\u9897\u6811\u5408\u5e76\n\n**\u600e\u4e48\u7528\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u63d2\u5165\u5462\uff1f**\n\n\u53ea\u8981\u628a1\u5230x-1(x\u662f\u63d2\u5165\u7684\u4f4d\u7f6e)\u5148\u4ece\u6811\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u7136\u540e\u628a\u8981\u63d2\u5165\u7684\u6570\u4e0e\u4e4b\u5408\u5e76\uff0c\u518d\u628a\u5f97\u5230\u7684\u6811\u4e0e\u539f\u6811\u5408\u5e76\u5373\u53ef\n\n\u56fe\u89e3\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/46013.png )\n\n\u533a\u95f4\u52a0\u4e5f\u662f\u540c\u7406\uff0c\u5206\u79bb\u51fa\u6765\u540e\u76f4\u63a5\u52a0\u5c31\u884c\u4e86\uff0c\u6807\u8bb0\u548c\u7ebf\u6bb5\u6811lazytag\u540c\u7406\n\n\u8be6\u7ec6\u89c1\u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\n#define inf 1926081700\n#define N 200001\n#define int long long\nusing namespace std;\nint n,m;\ntypedef pair<int,int> pii;\nstruct fhq_treap{\n    #define ls tree[q].son[0]\n    #define rs tree[q].son[1]\n    struct dqy{\n        int son[2];\n        int val,sum,key,size;\n        int add;\n    }tree[N];\n    int root,tot;\n    void update(int q){\n        tree[q].size=tree[ls].size+tree[rs].size+1;\n        tree[q].mx=min(tree[q].val,min(tree[ls].mx,tree[rs].mx));\n        tree[q].sum=tree[ls].sum+tree[rs].sum+tree[q].val;\n    }\n    int New(int v){\n        tree[++tot].size=1;\n        tree[tot].key=rand();\n        tree[tot].val=tree[tot].mx=v;\n        tree[tot].rev=tree[tot].add=0;\n        tree[tot].sum=v;\n        return tot;\n    }\n    void P_add(int q,int v){\n        tree[q].val+=v;tree[q].mx+=v;tree[q].add+=v;\n        tree[q].sum+=(tree[ls].size+tree[rs].size+1)*v;\n    }\n    void pushdown(int q){\n        if(tree[q].add){\n            if(ls)P_add(ls,tree[q].add);\n            if(rs)P_add(rs,tree[q].add);\n            tree[q].add=0;\n        }\n    }\n    pii split(int q,int rk){\n        if(!rk)return make_pair(0,q);\n        if(rk==tree[q].size)return make_pair(q,0);\n        pushdown(q);\n        if(tree[ls].size>=rk){\n            pii tmp=split(ls,rk);\n            ls=tmp.second;update(q);\n            return make_pair(tmp.first,q);\n        }\n        else {\n            pii tmp=split(rs,rk-tree[ls].size-1);\n            rs=tmp.first;update(q);\n            return make_pair(q,tmp.second);\n        }\n    }\n    int merge(int a,int b){\n        if(!a||!b)return a+b;\n        pushdown(a);pushdown(b);\n        if(tree[a].key>tree[b].key)return tree[a].son[1]=merge(tree[a].son[1],b),update(a),a;\n        else return tree[b].son[0]=merge(a,tree[b].son[0]),update(b),b;\n    }\n    void add(int l,int r,int v){\n        pii tmp1=split(root,r);\n        pii tmp2=split(tmp1.first,l-1);\n        P_add(tmp2.second,v);\n        root=merge(merge(tmp2.first,tmp2.second),tmp1.second);\n     }\n    void insert(int x,int v){\n        pii tmp1=split(root,x);\n        root=merge(merge(tmp1.first,New(v)),tmp1.second);\n        update(root);\n    }\n    int getsum(int l,int r){\n    \tpii tmp1=split(root,r);\n    \tpii tmp2=split(tmp1.first,l-1);\n    \tint sum=tree[tmp2.second].sum;\n    \troot=merge(merge(tmp2.first,tmp2.second),tmp1.second);\n    \treturn sum;\n\t}\n}T;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-f;ch=getchar();}\n    while(isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\nsigned main(){\n    n=read();m=read();\n    T.tree[0].mx=inf;\n    for(int i=1;i<=n;i++){\n        int x=read();\n        T.insert(i-1,x);\n    }\n    for(int i=1;i<=m;i++){\n        int opt=read();\n        int l=read(),r=read();\n        if(opt==1){\n        \tint v=read();T.add(l,r,v);\n        }\n        else printf(\"%lld\\n\",T.getsum(l,r));\n    }\n    return 0;\n}\n```",
        "postTime": 1544600442,
        "uid": 73702,
        "name": "DQYdqy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u53d1\u4e00\u7bc7\u4e0d\u9700\u8981O2\u5c31\u80fd\u8fc7\u7684\u5206\u5757\u3002\n\u57fa\u672c\u601d\u8def\uff1a\n\n\u5206\u5757\u7684\u601d\u8def\uff0c\u5927\u6bb5\u7ef4\u62a4\uff0c\u5c0f\u6bb5\u6734\u7d20\u3002\n\n\u7ef4\u62a4\u51e0\u4e2a\u6570\u7ec4\uff1a\n\n- \u533a\u5757$block[maxn]$\n- \u61d2\u6807\u8bb0$tag[maxn]$\n- \u771f\u5b9e\u6570\u636e$data[maxn]$\u3002\n\n\n### \u66f4\u65b0\u65f6\n\u5047\u8bbe\u6211\u4eec**\u6d89\u53ca**\u5230\u7684\u533a\u5757\u7684\u7f16\u53f7\u533a\u95f4\u662f$[lb,rb]$\uff0c**\u771f\u5b9e\u6570\u636e\u8303\u56f4\u4e3a**$[l,r]$\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5728**\u533a\u5757**\u7684$[lb+1,rb-1]$\u533a\u95f4\uff0c\u7ed9$block[i]$\u52a0\u4e0a$\\Delta k$ \u5e76\u4e14\u6253\u4e0a\u61d2\u6807\u8bb0 $=\\Delta k$\u3002\u5728\u771f\u5b9e\u6570\u636e\u7684$[l,lb\\times N]$\u548c$[rb\\times N-N+1,r]$\u533a\u95f4\u7684\u6bcf\u4e2a$data[i]$\u52a0\u4e0a$\\Delta k$\u3002\n\n### \u67e5\u8be2\u65f6\n\n\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u533a\u5757\u533a\u95f4$[lb+1,rb-1]$\u76f4\u63a5\u7d2f\u52a0\u5c31\u597d\uff0c\u5bf9\u4e8e$l b$\u533a\u95f4\u548c$rb$\u533a\u95f4\u5355\u72ec\u5904\u7406\u5373\u53ef\u3002\n\n\u4e0a\u4e11\u964b\u65e0\u6bd4\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u7279\u5224$l$\u548c$r$\u5728\u4e00\u4e2a\u533a\u5757\u533a\u95f4\u7684\u60c5\u51b5\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate< class ccf >inline ccf qr(ccf a) {\n    char c=getchar();\n    ccf x=0;\n    int q=1;\n    while(c<48||c>57)\n\tq=c==45?-1:q,c=getchar();\n    while(c>=48&&c<=57)\n\tx=x*10+c-48,c=getchar();\n    return q==-1?-x:x;\n}\nconst int maxn=100055;\ntypedef long long ll;\nll data[maxn];\nll tag[maxn];\nll blk[maxn];\nint n;\nint m;\nint N;\nint adj;\n#define RP(t,a,b) for(register int t=(a),edd=(b);t<=edd;t++)\nint t1,t2;\nll t3;\nint temp;\n\nvoid add(int l,int r,ll k) {\n    int lb=(l+N-1)/N;\n    int rb=(r+N-1)/N;\n    if(lb!=rb) {\n\n\tRP(t,l,N*lb)\n\t    data[t]+=k,blk[lb]+=k;\n\tRP(t,N*rb-N+1,r)\n\t    data[t]+=k,blk[rb]+=k;\n\tRP(t,lb+1,rb-1)\n\t    tag[t]+=k,blk[t]+=N*k;\n    } else\n\tRP(t,l,r)\n\t    data[t]+=k,blk[t]+=k;\n}\n\nll sum(int l,int r) {\n    ll ret=0;\n    int lb=(l+N-1)/N;\n    int rb=(r+N-1)/N;\n    RP(t,lb+1,rb-1)\n\tret+=blk[t];\n    if(tag[lb])\n\tRP(t,N*lb-N+1,N*lb)\n\t    data[t]+=tag[lb];\n    tag[lb]=0;\n    if(tag[rb])\n\tRP(t,N*rb-N+1,min(N*rb,n))\n\t    data[t]+=tag[rb];\n    tag[rb]=0;\n    if(lb!=rb) {\n\tRP(t,l,N*lb)\n\t    ret+=data[t];\n\tRP(t,N*rb-N+1,r)\n\t    ret+=data[t];\n    } else\n\tRP(t,l,r)\n\t    ret+=data[t];\n    return ret;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.in\",\"r\",stdin);\n    freopen(\"out.out\",\"w\",stdout);\n#endif\n    n=qr(1);\n    m=qr(1);\n    RP(t,1,n)\n\tdata[t]=qr(1ll);\n    N=sqrt(n);\n    RP(t,1,n/N)\n\tRP(i,1,N)\n\tblk[t]+=data[(t-1)*N+i];\n    RP(t,1,n%N)\n\tblk[n/N+1]+=data[(n/N)*N+t];\n    RP(t,1,m) {\n\ttemp=qr(1);\n\tif(temp==1) {\n\t    t1=qr(1);\n\t    t2=qr(1);\n\t    t3=qr(1ll);\n\t    add(t1,t2,t3);\n\t} else {\n\t    t1=qr(1);\n\t    t2=qr(1);\n\t    printf(\"%ld\\n\",sum(t1,t2));\n\t}\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1543076552,
        "uid": 113460,
        "name": "\u8c01\u662f\u9e3d\u738b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/P3372)\n\n\u521a\u521a\u5b66\u4e86\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u52a0\u6cd5\u548c\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\uff0c\u5c31\u7528\u6765\u6c34\u6389\u8fd9\u9898\u4e86\n\n\u672c\u7bc7\u9002\u5408\u5b66\u4f1a\u6811\u72b6\u6570\u7ec4\u7684\u4eba\u7fa4\n\n\u524d\u7f6e\u829d\u58eb\uff1a\n\n[\u666e\u901a\u6811\u72b6\u6570\u7ec4](https://www.luogu.com.cn/problem/P3374)\n\n[\u5dee\u5206\u6811\u72b6\u6570\u7ec4](https://www.luogu.com.cn/problem/P3368)\n\n---\n\n**\u3010\u5206\u6790\u3011**\n---\n\n\u5b66\u8fc7\u6811\u72b6\u6570\u7ec4\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fdb\u884c\u5904\u7406\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 $O(\\log n)$ \u7684\u65f6\u95f4\u5185\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u6c42\u548c\n\n\u5047\u8bbe\u5bf9\u4e8e\u6570\u7ec4 $a_n$ \uff0c\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7684\u65b9\u6cd5\u5904\u7406\u540e\uff0c\u5c31\u53ef\u4ee5\u5355\u70b9\u4fee\u6539\u4efb\u610f $a_i$ \u7684\u503c\uff0c\u6216\u8005\u6c42 $\\displaystyle \\sum_{i=l}^r a_n$\n\n\u5982\u679c\u6211\u4eec\u5dee\u5206\u4e00\u4e0b $a_n$ \uff0c\u8bbe $c_n=a_n-a_{n-1}$ \uff0c\u90a3\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2 $\\displaystyle a_n=\\sum_{i=1}^n c_i$\n\n---\n\n\u5728\u5dee\u5206\u7684\u57fa\u7840\u4e0b\uff0c\u6211\u4eec\u5982\u679c\u9700\u8981\u6c42\u533a\u95f4\u548c\uff0c\u5219\u5148\u76f8\u540c\u5730\uff1a\n\n$\\displaystyle \\sum_{i=l}^ra_i=\\sum_{i=1}^ra_i-\\sum_{i=1}^{l-1}a_i$\n\n\u6240\u4ee5\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u89e3 $\\displaystyle \\sum_{i=1}^k a_i$ \u5373\u53ef\u6c42\u89e3\u533a\u95f4\u6c42\u548c\u95ee\u9898\u4e86\n\n\u6211\u4eec\u53d8\u578b\u8fd9\u4e2a\u5f0f\u5b50\uff1a\n\n$\\displaystyle \\sum_{i=1}^k a_i=\\sum_{i=1}^k\\sum_{j=1}^ic_i=\\sum_{i=1}^k(k+1-i)c_i$\n\n\u8fd9\u73a9\u610f\u513f\u6ca1\u529e\u6cd5\u76f4\u63a5\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u5206\u5f00\u6765\uff1a\n\n$\\displaystyle \\sum_{i=1}^k a_i=(k+1)\\sum_{i=1}^k c_i-\\sum_{i=1}^k ic_i$\n\n\u8fd9\u6837\uff0c\u5c31\u80fd\u5206\u5f00\u6765\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u6c42\u548c\u4e86\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0 $c_n$ \u548c $nc_n$ \u7684\u6811\u72b6\u6570\u7ec4\uff0c\u5373\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u6c42\u548c\n\n\u5373\u524d\u8005\uff1a $c_n$ \u5dee\u5206\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u548c\uff0c\u4e58\u4e0a $(k+1)$ \uff0c\u51cf\u53bb\u540e\u8005\uff1a $nc_n$ \u5dee\u5206\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u548c\n\n---\n\n\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u5e94\u8003\u8651\u4fee\u6539\u5bf9\u5427\n\n\u5047\u8bbe\u4fee\u6539\u533a\u95f4 $[l,r]$ \u90fd\u52a0\u4e0a $a$\n\n\u9996\u5148\uff0c $c_n$ \u7684\u4fee\u6539\u80af\u5b9a\u662f\u6ca1\u95ee\u9898\u7684\uff1a$c_l+=a,c_{r+1}+=-a$\n\n\u5206\u89e3\u4e3a\u5dee\u5206\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539 $c_l$ \u548c $c_{r+1}$\n\n\u800c\u6211\u4eec\u5f88\u6e05\u695a\uff0c\u5047\u8bbe $c_i$ \u8f6c\u53d8\u4e3a $(c_i+a)$\n\n\u5219\u6709 $ic_i$ \u8f6c\u53d8\u4e3a $i(c_i+a)=ic_i+ia$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c$ic_i+=ia$ \uff0c\u800c $ic_i$ \u7684\u589e\u52a0\u5bf9\u672c\u8eab\u7d2f\u52a0\u4e86 $ic_i$ \u7684\u8d21\u732e\u90fd\u662f\u589e\u52a0 $ia$ \u7684\n\n\u6240\u4ee5\u53ea\u8981\u5728\u4fee\u6539 $c_i+=a$ \u7684\u65f6\u5019\uff0c\u987a\u4fbf\u4fee\u6539 $ic_i+=ia$ \u5373\u53ef\n\n---\n\n\u90a3\u672c\u849f\u84bb\u5c31\u653e ~~\u6211\u7801\u98ce\u6781\u4e11\u7684~~ \u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include<cstdio>\nusing namespace std;\n#define f(a,b,c,d) for(register int a=b,c=d;a<=c;a++)\n#define g(a,b,c,d) for(register int a=b,c=d;a>=c;a--)\n#define LOCAL\ntypedef int i32;\ntypedef unsigned int u32;\ntypedef long long int i64;\ntypedef unsigned long long int u64;\nconst i32 MAXN=1e5+10;\ntypedef i64 ar[MAXN];\n//\u4e00\u5806\u6761\u4ef6\u53cd\u5c04\u7684\u5b9a\u4e49\n\nnamespace HABIT{//\u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u800c\u5df2\uff0c\u76f4\u63a5\u8df3\u8fc7\u770b\u6b63\u6587\u5373\u53ef\n    #ifdef LOCAL\n        inline char gc() { return getchar(); }\n    #else\n        inline char gc() {\n            static char s[1<<20|1]={0},*p1=s,*p2=s;\n            return (p1==p2)&&(p2=(p1=s)+fread(s,1,1<<20,stdin),p1==p2)?EOF:*(p1++);\n        }\n    #endif\n    inline i32 read(){\n        register i32 ans=0;register char c=gc();register bool neg=0;\n        while(c<48||c>57) neg^=!(c^'-'),c=gc();\n        while(c>=48&&c<=57) ans=(ans<<3)+(ans<<1)+(c^48),c=gc();\n        return neg?-ans:ans;\n    }\n\n    char Output_Ans[1<<20|1],*Output_Cur=Output_Ans;\n    inline void output() { Output_Cur-=fwrite(Output_Ans,1,Output_Cur-Output_Ans,stdout); }\n    inline void print(char c){ if(Output_Cur-Output_Ans+1>>20) output(); *(Output_Cur++)=c; }\n    inline void print(char *s) { while(*s) print( *(s++) ); }\n    inline void print(u64 x){\n        if(!x) { print('0'); return ; }\n        char buf[30]={0},*p=buf+28;\n        while(x) *(p--)=x%10+48,x/=10;\n        print(p+1);\n    }\n    inline void print(i64 x){ if(x<0) print('-'),x=-x; print( (u64)x ); }\n}\nusing namespace HABIT;\n\n//\u6b63\u6587\u5f00\u59cb\ni32 d_N,d_M;\nar ar_d_iC,ar_d_C;\n\ninline void add(i32 pos,i64 a){\n    const i32 ia=a*pos;\n    for(i32 i=pos;i<=d_N;i+=(i&(-i)))//\u6811\u72b6\u6570\u7ec4\u57fa\u64cd\uff0c\u4e0d\u505c\u52a0 lowbit(i)\n        ar_d_iC[i]+=ia,ar_d_C[i]+=a;//ici+=ia,ci+=a\n}\ninline i64 sum(i32 pos){//(pos+1)*\u6c42\u548c ci -\u6c42\u548c ici\n    i64 d_Ans=0;\n    for(i32 i=pos;i;i-=(i&(-i))) d_Ans+=ar_d_C[i];\n    d_Ans*=(pos+1);\n    for(i32 i=pos;i;i-=(i&(-i))) d_Ans-=ar_d_iC[i];\n    return d_Ans;\n}\n\ninline void update(i32 h,i32 t,i64 a) { add(h,a); add(t+1,-a); }\ninline i64 query(i64 h,i64 t) { return sum(t)-sum(h-1); }\n\nint main(){\n    d_N=read(),d_M=read();\n    f(i,1,I,d_N) update(i,i,read());\n    f(i,1,I,d_M)\n        if(read()==1){\n            i32 h=read(),t=read();\n            update(h,t,read());\n        }\n        else{\n            i32 h=read(),t=read();\n            print(query(h,t)),print('\\n');\n        }\n    output();\n    return 0;\n}\n```\n\n\u6700\u540e\u5b89\u5229\u4ee5\u4e0b [\u672c\u849f\u84bb\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/JustinRochester/)",
        "postTime": 1575697946,
        "uid": 36031,
        "name": "JustinRochester",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "**\u6ce8\uff1a\u672c\u6587\u7ae0\u4e2d$/$\u5747\u4ee3\u8868\u5411\u4e0b\u53d6\u6574\u7684\u6574\u6570\u9664\u6cd5\u3002**\n\n\u7ebf\u6bb5\u6811\u7684\u5404\u79cd\u64cd\u4f5c\u522b\u7684\u9898\u89e3\u5df2\u7ecf\u8bb2\u7684\u5f88\u591a\u4e86\uff0c\u6211\u5728\u8fd9\u91cc\u5c06\u8bb2\u4e00\u79cd\u7279\u6b8a\u7684**\u7ed9\u533a\u95f4\u5f00\u70b9**\u7684\u65b9\u6cd5\u3002\n\n\u8bf7\u770b\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff1a\n```cpp\ninline int ID(int l,int r){return (l+r) | (l!=r);}\n```\n\n**~~\u8fd9\u662f\u5565\u7384\u5b66\u64cd\u4f5c~~**\n\n\u7b49\u7b49\uff0c\u8fd9\u79cd\u5f00\u70b9\u65b9\u5f0f\u6709\u4ec0\u4e48\u597d\u7684\uff0c\u533a\u95f4\u4e4b\u95f4\u7684\u6807\u53f7\u96be\u9053\u4e0d\u4f1a\u51b2\u7a81\u5417\uff1f\n\n\u7b54\uff1a\u8fd9\u6837\u5f00\u70b9\uff0c\u4f60\u7684\u7ebf\u6bb5\u6811\u53ea\u8981\u5f00**\u4e24\u500d\u7a7a\u95f4**\uff0c\u5e76\u4e14**\u4e0d\u4f1a\u51b2\u7a81**.\n\n### $why?$\n \n## \u8bc1\u660e\u5982\u4e0b\uff1a\n\u4ee4$f(x,y)=x+y$  \n\u8003\u8651\u4e00\u4e2a\u6839\u8282\u70b9,\u5b83\u6240\u4ee3\u8868\u7684\u533a\u95f4\u4e3a$[l,r]$  \n\u90a3\u5b83\u7684\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4\u4e3a$[l,(l+r)/2]$  \n\u53f3\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4\u4e3a\u4e3a$[(l+r)/2+1,r]$\n\n**\u6211\u4eec\u53d1\u73b0\uff1a**  \n\u8fd9\u4e2a\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u7684$f$\u503c\u80af\u5b9a\u4e0d\u4f1a\u7b49\u4e8e$f(l,r)$,\n\n\n\u56e0\u4e3a\uff1a\n\n**\u5f53$f(l,r)$\u4e3a\u5076\u6570\u65f6**\uff0c\u53f3\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f$f$\u503c\u4e3a\uff1a\n$(l+r)/2+1 + (l+r)/2+1 =l+r+2 \u2260 f(l,r) $\n\n**\u5f53$f(l,r)$\u4e3a\u5947\u6570\u65f6**\uff0c\u53f3\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f$f$\u503c\u4e3a\uff1a\n$(l+r)/2+1 + (l+r)/2+1 =l+r+1 \u2260 f(l,r) $\n\n------------\n\n\n \u540c\u6837\u7684\uff0c\u6211\u4eec\u8ba8\u8bba\u5de6\u5b50\u6811\uff1a\n\n\n**\u5f53$f(l,r)$\u4e3a\u5076\u6570\u65f6**\uff0c\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6700\u5927$f$\u503c\u4e3a\uff1a\n$(l+r)/2 + (l+r)/2 = l+r =f(l,r) $\n\n**\u5f53$f(l,r)$\u4e3a\u5947\u6570\u65f6**\uff0c\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6700\u5927$f$\u503c\u4e3a\uff1a\n$(l+r)/2 + (l+r)/2 =l+r-1 \u2260 f(l,r) $\n\n\u7efc\u4e0a\uff0c\u53ea\u6709\u5f53$f(l,r)$\u4e3a\u5076\u6570\u65f6\uff0c\u4f1a\u4e0e\u5de6\u5b50\u6811\u7684\u4e00\u4e2a\u8282\u70b9\uff08\u4e14\u4e00\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9\uff09\u7684$f$\u503c\u76f8\u540c\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u82e5$l+r$\u4e3a\u5076\u6570\uff0c\u5219\u5b83\u7684\u6807\u53f7\u4e3a$l+r+1$\u3002\n\u82e5$l+r$\u4e3a\u5947\u6570\uff0c\u5219\u5b83\u7684\u6807\u53f7\u4e3a$l+r$\u3002  \n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6240\u6709\u7684\u70b9\u7684\u6807\u53f7\u90fd\u4e0d\u4ea7\u751f\u51b2\u7a81\u4e86\u3002  \n\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u7684$f$\u503c\u4e00\u5b9a\u5c0f\u4e8e\u6240\u6709\u5b83\u53f3\u5b50\u6811\u7684$f$\u503c\uff0c  \n\u6240\u4ee5\uff0c\u6574\u68f5\u6811\u4e2d\u6240\u6709\u70b9\u6700\u5927\u7684\u6807\u53f7\u4e3a $n+n=2n$  \n\u56e0\u6b64\uff0c\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u53ea\u8981\u5f00**\u4e24\u500d**\u5373\u53ef\n\n\u6700\u540e\u9644\u4e0a\u672c\u9898AC\u4ee3\u7801\uff0c\u5404\u4f4d\u8bfb\u8005\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u6765\u5b66\u4f1a\u5982\u4f55\u8fd0\u7528\u8fd9\u6837\u7684\u5f00\u70b9\u65b9\u6cd5\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define N 100005\nusing namespace std;\nint n,m;\nll a[N];\nstruct data\n{\n\tll sum,lazy;\n\tdata(){sum=lazy=0;}\n}tree[N<<1];\ndata operator + (const data &x ,const data &y)\n{\n\tdata ret;\n\tret.sum=x.sum+y.sum;\n\treturn ret;\n}\ninline int ID(int l,int r){return (l+r) | (l!=r);}\nvoid push_down(int k,int l,int r)\n{\n\tint mid=l+r>>1,lson=ID(l,mid),rson=ID(mid+1,r);\n\tll Lazy=tree[k].lazy;\n\ttree[lson].sum+=Lazy*(mid-l+1);\n\ttree[lson].lazy+=Lazy;\n\ttree[rson].sum+=Lazy*(r-mid);\n\ttree[rson].lazy+=Lazy;\n\ttree[k].lazy=0;\n}\nvoid build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttree[k].sum=a[l];\n\t\ttree[k].lazy=0;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tint lson=ID(l,mid);\n\tint rson=ID(mid+1,r);\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\ttree[k]=tree[lson]+tree[rson];\n}\nvoid update(int k,int l,int r,int L,int R,ll v)\n{\n\t\n\tif(L<=l&&r<=R)\n\t{\n\t\ttree[k].lazy+=v;\n\t\ttree[k].sum+=v*(r-l+1);\n\t\treturn;\n\t}\n\tif(r<L||l>R)return;\n\tint mid=l+r>>1;\n\tpush_down(k,l,r);\n\tint lson=ID(l,mid),rson=ID(mid+1,r);\n\tupdate(lson,l,mid,L,R,v);\n\tupdate(rson,mid+1,r,L,R,v);\n\ttree[k]=tree[lson]+tree[rson];\n}\nll query(int k,int l,int r,int L,int R)\n{\n\tif(L<=l&&r<=R)return tree[k].sum;\n\tif(r<L||l>R)return 0;\n\tint mid=l+r>>1;\n\tpush_down(k,l,r);\n\tint lson=ID(l,mid),rson=ID(mid+1,r);\n\treturn query(lson,l,mid,L,R)+query(rson,mid+1,r,L,R);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%lld\",a+i);\n\tbuild(1,1,n);\n\twhile(m--)\n\t{\n\t\tint op,l,r;\n\t\tll v;\n\t\tscanf(\"%d%d%d\",&op,&l,&r);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%lld\",&v);\n\t\t\tupdate(ID(1,n),1,n,l,r,v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%lld\\n\",query(ID(1,n),1,n,l,r));\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\nupdate 2019.7.27:  \n\u5728\u7ba1\u7406\u5458\u4ee5\u53ca\u5de8\u4f6c@alpha1022\u7684\u63d0\u9192\u4e0b\uff0c\u5c06\u6587\u7ae0\u7684\u6392\u7248\u66f4\u52a0\u6574\u9f50\u5316\u3002\u5728\u6b64\u611f\u8c22\u4ed6\u4eec\u3002  \nupdate 2019.7.31  \n\u6587\u7ae0\u5185\u5bb9\u4e2d\u6709\u4e00\u5904\u5c0f\u9519\u8bef\uff0c\u73b0\u5df2\u66f4\u6b63\u3002",
        "postTime": 1564150090,
        "uid": 50010,
        "name": "mcqueen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7684\u9ad8\u7ea7\u5e94\u7528\u505a\u7684\n\u4e3b\u8981\u662f\u6570\u7ec4`c1[]` `c0[]` \u5206\u522b\u7ef4\u62a4\u539f\u6570\u7ec4`a[]`\u7684\u7684\u5dee\u5206\u6570\u7ec4`b[]`\uff0c\u548c`c0[i]*i`.\n\u7b80\u800c\u8a00\u4e4b\uff0c\u8bb0\u4f4f2\u4e2a\u6570\u7ec4\uff0c4\u4e2a\u51fd\u6570\n```cpp\n#include<cstdio>\n#define ll long long \n\nconst ll maxn = 100000+5 ;\nll n,m;\n\nnamespace bit{\n    ll c0[maxn],c1[maxn];\n    void add(ll *c,ll p, ll v){\n        for(;p<=n;p += p &-p) c[p] += v;\n    }\n    ll sum(ll *c,ll p){\n        ll t = 0;\n        for(;p; p -= p & -p) t +=c[p];\n        return t;\n    }\n    void addex(ll l, ll r, ll v){\n        add(c0,l,v);add(c0,r+1,-v);add(c1,l,(l-1)*v);add(c1,r+1,-r*v);\n    }\n  \n    ll sumex(ll l,ll r){\n        return sum(c0,r)*r - sum(c1,r) -sum(c0,l-1)*(l-1) + sum(c1,l-1);\n    }\n}\n\n\nvoid read(){\n    scanf(\"%lld%lld\",&n,&m);\n    ll v =0 ,last =0;\n    for(register ll i = 1; i<=n;i++){\n        scanf(\"%lld\",&v);\n        last = v-last;\n        bit::add(bit::c0,i,last);\n        bit::add(bit::c1,i,last*(i-1));\n        last = v;\n    }\n}\n\nvoid work(){\n    int op;\n    scanf(\"%d\",&op);\n    if (op == 1){\n        ll x,y,k;\n        scanf(\"%lld%lld%lld\",&x,&y,&k);\n        bit::addex(x,y,k);\n    }\n    else{\n        ll x,y;\n        scanf(\"%lld%lld\",&x,&y);\n        printf(\"%lld\\n\",bit::sumex(x,y));\n    }\n}\n\nint main(){\n    read();\n    while(m--) work();\n    return 0;\n}\n```",
        "postTime": 1533745003,
        "uid": 101957,
        "name": "shejian0702",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "## \u624d\u5b66\u7ebf\u6bb5\u6811\u4e0d\u4e45\uff0c\u5199\u4e00\u7bc7blog\u52a0\u5f3a\u5370\u8c61\n\n\u9996\u5148\u662f\u4ecb\u7ecd\u9898\u76ee\u4e2d\u9700\u8981\u4f7f\u7528\u7684\u7b97\u6cd5or\u6570\u636e\u7ed3\u6784$\\colorbox{white}{\\color{white}{\\text{\u4f46\u8fd9\u662f\u6a21\u677f\u9898\uff0c\u4e00\u773c\u7b97\u6cd5or\u6570\u636e\u7ed3\u6784}}}$\uff1a\u7ebf\u6bb5\u6811\n\n> \u7ebf\u6bb5\u6811(Segment Tree)\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\u2014\u2014\u5ea6\u5a18\n\n### \u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\uff1a\n![](https://s2.ax1x.com/2019/08/21/mtDIeg.png)\n\n#### \u7ebf\u6bb5\u6811\u7684\u7528\u5904\uff1a\n\u53ef\u4ee5\u5feb\u901f\u7ef4\u62a4\u51fa\u4e00\u6bb5\u533a\u95f4\u7684\u548c\u3001\u6700\u5927\u503c\uff0c\u5feb\u901f\u4fee\u6539\u4e00\u6bb5\u533a\u95f4\u6216\u4e00\u4e2a\u7ed3\u70b9\u3002\n\n\u672c\u9898\u7684\u9898\u610f\u662f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002\n\n## \u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff1a\n\u7ed3\u70b9$p$\u7684\u5de6\u513f\u5b50\u662f$p\\times 2$\uff0c\u53f3\u513f\u5b50\u662f$p\\times 2+1$\uff0c\u82e5\u7ed3\u70b9$p$\u6240\u4ee3\u8868\u7684\u533a\u95f4\u662f$[l,r]$\uff0c\u90a3\u4e48\u5de6\u513f\u5b50\u662f$[l,(l+r)\\div 2]$\uff0c\u53f3\u513f\u5b50\u662f$[(l+r)\\div 2 + 1,r]$\u3002\n\n\u5b58\u8d2e\u7ebf\u6bb5\u6811\u5355\u8282\u70b9\u7684\u7ed3\u6784\u4f53\uff1a\n```cpp\nstruct SegmentTree {\n\tint l, r;\n\tll sum, lazy;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define sum(x) tree[x].sum\n\t#define lazy(x) tree[x].lazy\n} tree[nn << 3];//8\u500d\u7a7a\u95f4\u771f\u662f\u597d\n```\n## \u5982\u4f55\u6784\u9020\u4e00\u68f5\u7ebf\u6bb5\u6811\uff1f\n\u9012\u5f52\u6784\u9020\u3002\u5f53\u8bbf\u95ee\u5230\u7ed3\u70b9$p$\u65f6\uff0c\u5411\u4e0b\u6784\u9020\u3002\n```cpp\nvoid build(int p, int l, int r) {//\u5f53\u524d\u6b63\u5728\u6784\u9020\u7ed3\u70b9p\uff0c\u8be5\u8282\u70b9\u9700\u8981\u4ee3\u8868\u7684\u533a\u95f4\u4e3a[l,r]\n\tl(p) = l, r(p) = r;\n\tif (l == r) {\n\t\tsum(p) = a[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);//\u5411\u4e0b\u6784\u9020\n\tbuild(p << 1 | 1, mid + 1, r);\n\tsum(p) = sum(p << 1) + sum(p << 1 | 1);\n}\n```\n\n## \u533a\u95f4\u67e5\u8be2\uff1a\n\u4ece\u6700\u5927\u7684\u533a\u95f4$[1,n]$\u5f00\u59cb\u67e5\u8be2\uff0c\u5982\u679c\u5f53\u524d\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u88ab\u6574\u4e2a\u67e5\u8be2\u533a\u95f4\u5305\u542b\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\uff0c\u800c\u4e0d\u7528\u67e5\u8be2\u5230\u5e95\u3002\u5982\u679c\u4e0d\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u5148\u5904\u7406$lazy$\u6807\u8bb0\uff0c\u7136\u540e\u5728\u5de6\u53f3\u513f\u5b50\u7ed3\u70b9\u7ee7\u7eed\u67e5\u8be2\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u79c0\uff0c\u5355\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4ec5$O(n\\ logn)$\u3002\n```cpp\nll ask(int p, int l, int r) {//\u5f53\u524d\u67e5\u8be2\u5230\u4e86p\u53f7\u7ed3\u70b9\n\tll ans = 0;\n\tif (l <= l(p) && r(p) <= r)\n\t\treturn sum(p);\n\tspread(p);//\u5904\u7406lazy\u7684\u51fd\u6570\n\tint mid = (l(p) + r(p)) >> 1;\n\tif (l <= mid)//\u8bbf\u95ee\u5de6\u53f3\u513f\u5b50\n\t\tans += ask(p << 1, l, r);\n\tif (mid < r)\n\t\tans += ask(p << 1 | 1, l, r);\n\treturn ans;\n}\n```\n## \u533a\u95f4\u4fee\u6539\uff1a\n\u4ece\u6700\u5927\u7684\u533a\u95f4$[1,n]$\u5f00\u59cb\u4fee\u6539\uff0c\u5982\u679c\u5f53\u524d\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u88ab\u6574\u4e2a\u4fee\u6539\u533a\u95f4\u5305\u542b\uff0c\u66f4\u65b0\uff0c\u6574\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u8bb0\u5f55$lazy$\u6807\u8bb0\uff0c\u7136\u540e\u7136\u8fd4\u56de\u3002\u5982\u679c\u4e0d\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u66f4\u65b0\u5f53\u524d$lazy$\u540e\u7ee7\u7eed\u5728\u5de6\u53f3\u513f\u5b50\u7ed3\u70b9\u4fee\u6539\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u79c0\uff0c\u5355\u6b21\u4fee\u6539\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4ec5$O(n\\ logn)$\u3002\n```cpp\nvoid change(int p, int l, int r, ll d) {//\u5f53\u524d\u4fee\u6539\u5230\u7ed3\u70b9p\uff0c\u9700\u8981\u5c06\u533a\u95f4[l,r]\u5168\u90e8\u589e\u52a0d\n\tif (l <= l(p) && r(p) <= r) {//\u88ab\u5b8c\u5168\u8986\u76d6\u5c31\u66f4\u65b0\u548c\u4e0elazy\u6807\u8bb0\n\t\tsum(p) += (r(p) - l(p) + 1) * d;\n\t\tlazy(p) += d;\n\t\treturn;\n\t}\n\tspread(p);//\u5904\u7406lazy\n\tint mid = (l(p) + r(p)) >> 1;\n\tif (l <= mid)//\u4fee\u6539\u5de6\u53f3\u513f\u5b50\n\t\tchange(p << 1, l, r, d);\n\tif (mid < r)\n\t\tchange(p << 1 | 1, l, r, d);\n\tsum(p) = sum(p << 1) + sum(p << 1 | 1);//\u66f4\u65b0\u548c\n\treturn;\n}\n```\n## $lazy$\u6807\u8bb0\u7684\u5904\u7406\uff08\u5212\u91cd\u70b9.exe\uff09\uff1a\n$lazy$\u6807\u8bb0\u7684\u542b\u4e49\u662f\uff1a\u8be5\u8282\u70b9\u7684\u548c\u5df2\u88ab\u66f4\u65b0\uff0c\u4f46\u5176\u5b50\u5b59\u7ed3\u70b9\u7684\u548c\u5c1a\u672a\u66f4\u65b0\uff0c\u5728\u67e5\u8be2\u65f6\uff0c\u6bcf\u6b21\u5411\u4e0b\u67e5\u8be2\u524d\uff0c\u5148\u5904\u7406$lazy$\u6807\u8bb0\uff0c\u7136\u540e\u67e5\u8be2\uff0c\u4ee5\u786e\u4fdd\u7b54\u6848\u7684\u6b63\u786e\u6027\u3002\n```cpp\nvoid spread(int p) {\n\tif (lazy(p)) {\n\t\tsum(p << 1) += lazy(p) * (r(p << 1) - l(p << 1) + 1);//\u4f4d\u8fd0\u7b97\u597d\uff0c\u652f\u6301\u88c5\u903c\u5e38\u6570\u5c0f\n\t\tsum(p << 1 | 1) += lazy(p) * (r(p << 1 | 1) - l(p << 1 | 1) + 1);\n\t\tlazy(p << 1) += lazy(p);\n\t\tlazy(p << 1 | 1) += lazy(p);\n\t\tlazy(p) = 0;\n\t}\n}\n```\n\n## \u4e3b\u51fd\u6570\uff1a\n```cpp\nint main() {\n\tscanf(\"%d %d\", &n, &m);//\u8bfb\u5165\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", a + i);//\u8bfb\u5165\n\tbuild(1, 1, n);//\u5efa\u6811\n\twhile (m--) {\n\t\tint op;\n\t\tint l, r;\n\t\tll d;\n\t\tscanf(\"%d %d %d\", &op, &l, &r);\n\t\tif (op == 2)\n\t\t\tprintf(\"%lld\\n\", ask(1, l, r));//\u6253\u5370\u7b54\u6848\n\t\telse {\n\t\t\tscanf(\"%lld\", &d);\n\t\t\tchange(1, l, r, d);//\u505a\u4fee\u6539\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### \u597d\u4e86\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u9644\u4e0a\u603b\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int nn = 1e5 + 5;\ntypedef long long ll;\nstruct SegmentTree {\n\tint l,r;\n\tll sum,lazy;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define sum(x) tree[x].sum\n\t#define lazy(x) tree[x].lazy\n} tree[nn<<3];\nint a[nn],n,m;\nvoid build(int p, int l, int r) {\n\tl(p) = l, r(p) = r;\n\tif (l == r) {\n\t\tsum(p) = a[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);\n\tbuild(p << 1 | 1, mid + 1, r);\n\tsum(p) = sum(p << 1) + sum(p << 1 | 1);\n}\nvoid spread(int p) {\n\tif (lazy(p)) {\n\t\tsum(p << 1) += lazy(p) * (r(p << 1) - l(p << 1) + 1);\n\t\tsum(p << 1 | 1) += lazy(p) * (r(p << 1 | 1) - l(p << 1 | 1) + 1);\n\t\tlazy(p << 1) += lazy(p);\n\t\tlazy(p << 1 | 1) += lazy(p);\n\t\tlazy(p) = 0;\n\t}\n}\nvoid change(int p, int l, int r, ll d) {\n\tif (l <= l(p) && r(p) <= r) {\n\t\tsum(p) += (r(p) - l(p) + 1) * d;\n\t\tlazy(p) += d;\n\t\treturn;\n\t}\n\tspread(p);\n\tint mid = (l(p) + r(p)) >> 1;\n\tif (l <= mid)\n\t\tchange(p << 1, l, r, d);\n\tif (mid < r)\n\t\tchange(p << 1 | 1, l, r, d);\n\tsum(p) = sum(p << 1) + sum(p << 1 | 1);\n\treturn;\n}\nll ask(int p, int l, int r) {\n\tll ans = 0;\n\tif (l <= l(p) && r(p) <= r)\n\t\treturn sum(p);\n\tspread(p);\n\tint mid = (l(p) + r(p)) >> 1;\n\tif (l <= mid)\n\t\tans += ask(p << 1, l, r);\n\tif (mid < r)\n\t\tans += ask(p << 1 | 1, l, r);\n\treturn ans;\n}\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", a + i);\n\tbuild(1, 1, n);\n\twhile (m--) {\n\t\tint op;\n\t\tint l, r;\n\t\tll d;\n\t\tscanf(\"%d %d %d\", &op, &l, &r);\n\t\tif (op == 2)\n\t\t\tprintf(\"%lld\\n\", ask(1, l, r));\n\t\telse {\n\t\t\tscanf(\"%lld\", &d);\n\t\t\tchange(1, l, r, d);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1566373963,
        "uid": 124683,
        "name": "Krystallos",
        "ccfLevel": 9,
        "title": "\u9898\u89e3P3372\u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u68111\u3011"
    },
    {
        "content": "# \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5343\u4e07\u4e0d\u8981\u5acc\u70e6\n\n\u7b2c\u4e00\u904d\u53ef\u4ee5\u6284\u4e00\u904d\u9898\u89e3\uff0c\u5927\u81f4\u4e86\u89e3\u65b9\u6cd5\uff1b\n\n\u7b2c\u4e8c\u904d\u534a\u770b\u534a\u6253\uff0c\u52a0\u6df1\u5370\u8c61\uff1b\n\n\u7b2c\u4e09\u904d\u5c31\u53ef\u4ee5\u5f00\u59cb\u81ea\u5df1\u6253\uff1b\n\n# \u7edd\u5bf9\u6709\u6548\n\n~~\u867d\u7136\u6211\u4e5f\u4e0d\u719f~~\n\n\n------------\n## \u5173\u4e8e\u7ebf\u6bb5\u6811\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5728\u8fd9\u91cc\u8bb2\u51e0\u4e2a\u849f\u84bb\u5bb9\u6613\u72af\u7684\u9519\u8bef(~~\u7ebf\u6bb5\u6811\u7684\u5751~~)\uff1a\n\n1. \u4e0d\u5f00**long long**\u89c1\u7956\u5b97\uff0c\u8981\u5f00**long long**\uff0c\u4e00\u5b9a\u8981\u5f00\n\n2. \u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u7684\u51fd\u6570\u4e2d\u4e00\u5b9a\u8981**\u660e\u786e\u51fa\u53e3**\uff08return\u4e0d\u80fd\u5c11\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\uff09\n\n3. \u8bb0\u5f55\u7ebf\u6bb5\u6811\u6570\u503c\u548c\u61d2\u6807\u8bb0\u7684**\u6570\u7ec4\u81f3\u5c11\u8981\u5f00n\u76844\u500d**\n\n4. \u6bcf\u6253\u5b8c\u4e00\u90e8\u5206\u5c31\u8981**\u68c0\u67e5**\uff0c\u5426\u5219\u4f60\u5c06\u4f1a\u732e\u51fa\u4e00\u4e0a\u5348\uff08~~\u5927\u4f6c\u8bf7\u5ffd\u7565\u6b64\u6761~~\uff09\n\n5. \u518d\u7801\u5b57\u9014\u4e2d\uff0c\u7ebf\u6bb5\u6811\u4f1a\u51fa\u73b0 int mid=(l+r)/2\u8fd9\u6837\u7684\u8bed\u53e5\uff0cmid\u4e5f\u6709\u7684\u5199\u6210m\uff0c\u6240\u4ee5\u8fd9\u65f6\u8981\u6ce8\u610f**\u5206\u6e05\u695a\u9898\u76ee\u4e2d\u7684m**(\u901a\u5e38\u662f\u64cd\u4f5c\u6b21\u6570)\u548cmid\n\n6. \u61d2\u6807\u8bb0\u8981\u4e0b\u4f20\n\n7. \u61d2\u6807\u8bb0\u4e00\u5b9a\u8981\u4e58\u533a\u95f4\u957f\u5ea6\uff0c\u5e76\u6ce8\u610f **\u5927\u51cf\u5c0f** (r-l)\uff0c\u53cd\u6b63\u8fd9\u662f\u6211\u72af\u7684\u4e00\u4e2aZZ\u9519\u8bef\n\n8. \u4e0d\u8981\u5fd8\u8bb0**\u8c03\u7528build()\u51fd\u6570**\uff08\u4e0d\u5f00\u73a9\u7b11\uff0c\u65b0\u624b\u7ecf\u5e38\u5fd8\uff09\n\n9. \u5f53\u8981\u8fdb\u884c\u533a\u95f4**\u4e58\u4e00\u4e2a\u6570\u64cd\u4f5c\u65f6\uff0c\u61d2\u6807\u8bb0\u521d\u59cb\u8981\u8bbe\u4e3a1**\uff0c(\u800c\u4e0d\u662f\u52a0\u6cd5\u61d2\u6807\u8bb0\u521d\u59cb\u4e3a0)\n\n10. \u5f53\u8fdb\u884c\u591a\u79cd\u8fd0\u7b97\u64cd\u4f5c\u662f\uff0c\u8981\u6ce8\u610f\u4fee\u6539\u987a\u5e8f\uff0c\u4e00\u822c\u662f**\u5148\u4e58\u9664\uff0c\u518d\u52a0\u51cf**\n\n11. \u7801\u5b57\u65f6\u53ef\u4ee5**\u5c3d\u91cf\u5199\u7684\u6563\u4e00\u4e9b**\uff0c\u53cd\u6b63\u5c31\u662f\u8981\u81ea\u5df1\u770b\u7740\u4e0d\u4f1a\u5934\u76ae\u53d1\u9ebb\uff0c\u8fd9\u6837\u68c0\u67e5\u65f6\u5f88\u7701\u4e8b\n\n\n\n------------\n\n\u9898\u76ee\u4f20\u9001\u95e8[P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problemnew/show/P3372)\n\n\n------------\n\n\n\u4ee3\u7801\u6765\u4e86\uff1a\n```cpp\n#include<bits/stdc++.h>//\u4ee3\u7801\u5199\u6563\uff0c\u53ef\u4ee5\u6309\u81ea\u5df1\u4e60\u60ef\u6765\uff0c\u600e\u4e48\u770b\u7740\u8212\u670d\u600e\u4e48\u6253\n#define ll long long//\u4e00\u5b9a\u8981\u5f00long long \n#define re register int//\u5e38\u6570\u4f18\u5316 \nusing namespace std;\nconst int N=100005;\n\ninline ll read()//\u5feb\u8bfb\n{\n\tll x=0,f=1;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n\treturn x*f;\n}\n\nint n,m;\nll ans[N<<2],tag[N<<2];//\u6570\u7ec4\u5f00\u56db\u500d \nint a[N];\n\ninline ll ls(int root)//\u5de6\u513f\u5b50 \n{return root<<1;}\n\ninline ll rs(int root)//\u53f3\u513f\u5b50 \n{return root<<1|1;}\n\ninline void push_up(int root)//\u5411\u7236\u8282\u70b9\u4f20\u4fee\u6539\u503c \n{ans[root]=ans[ls(root)]+ans[rs(root)];}\n\ninline void build(int root,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tans[root]=a[l];\n\t\treturn;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tbuild(ls(root),l,mid);\n\tbuild(rs(root),mid+1,r);\n\tpush_up(root);//\u5411\u7236\u8282\u70b9\u4f20\u4fee\u6539\u503c \n}\n\ninline void f(int root,int l,int r,ll k)\n{\n\ttag[root]+=k;\n\tans[root]+=k*(r-l+1); \n}\n\ninline void push_down(int root,int l,int r)//\u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0 \n{\n\tint mid=(l+r)>>1;\n\tf(ls(root),l,mid,tag[root]);\n\tf(rs(root),mid+1,r,tag[root]);\n\ttag[root]=0;\n}\n\ninline void add(int root,int nl,int nr,int l,int r,ll k)\n{\n\tif(nl<=l&&nr>=r)\n\t{\n\t\tans[root]+=k*(r-l+1);\n\t\ttag[root]+=k;\n\t\treturn;\n\t}\n\t\n\tpush_down(root,l,r);//\u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0 \n\tint mid=(l+r)>>1;\n\tif(nl<=mid)add(ls(root),nl,nr,l,mid,k);//\u4fee\u6539\u513f\u5b50\u7684\u503c \n\tif(nr>mid)add(rs(root),nl,nr,mid+1,r,k);\n\tpush_up(root);//\u5411\u7236\u8282\u70b9\u4f20\u4fee\u6539\u503c \n}\n\ninline ll query(int root,int nl,int nr,int l,int r)\n{\n\tll res=0;\n\tif(nr>=r&&nl<=l)return ans[root];\n\tint mid=(l+r)>>1;\n\tpush_down(root,l,r);//\u5411\u4e0b\u4f20\u9012\u61d2\u6807\u8bb0 \n\t\n\tif(nl<=mid)\n\t    res+=query(ls(root),nl,nr,l,mid);\n\t    \n\tif(nr>mid)\n\t    res+=query(rs(root),nl,nr,mid+1,r);\n\t    \n\treturn res; \n}\n\nint main()\n{\n\tn=read();m=read();\n\tfor(re i=1;i<=n;i++)a[i]=read();\n\tbuild(1,1,n);//\u4e0d\u8981\u4e22 \n\twhile(m--)\n\t{\n\t\tint x,y,cxk;//\u563b\u563b(\u25cf'\u25e1'\u25cf)\n                ll k;//k\u8981\u5f00long long \u5176\u4ed6\u7684\u65e0\u6240\u8c13 \n\t\tcxk=read();\n\t\tif(cxk==1)\n\t\t{\n\t\t\tx=read();y=read();k=read();\n\t\t\tadd(1,x,y,1,n,k); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=read();y=read();\n\t\t\tprintf(\"%lld\\n\",query(1,x,y,1,n));//\u8f93\u51fa\u4e5f\u8981 lld \n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u672c\u9898\u89e3\u501f\u9274\u90e8\u5206WTB%%%\u5927\u4f6c\u7684\u535a\u5ba2\uff0c[\u653e\u94fe\u63a5](https://www.luogu.org/blog/YogSothoth/)",
        "postTime": 1571570971,
        "uid": 198995,
        "name": "\u8001\u90e8\u957f",
        "ccfLevel": 4,
        "title": "\u7ebf\u6bb5\u6811\u8df3\u5751"
    },
    {
        "content": "Update1\uff1a\u66f4\u65b0\u4e86\u4e00\u5904\u4e0d\u51c6\u786e\u7684\u5730\u65b9\uff0c\u5c063.\u7ebf\u6bb5\u6811\u4e2d\u7684\u2460\u5efa\uff08\u4f2a\uff09\u6811\u4fee\u6539\u4e3a\u5efa\u6811\n\nUpdata2\uff1a\u53c8\u66f4\u65b0\u4e86\u4e00\u5904\u4e0d\u51c6\u786e\u7684\u5730\u65b9\n~~\uff08\u6240\u4ee5\u71ac\u591c\u809d\u9898\u89e3\u5bb3\u4eba\u4e0d\u6d45\uff09~~\uff0c\u5c06\u628aroot\u8bbe\u4e3a0\u6539\u4e3a\u628aroot\u8bbe\u4e3a1\n\n------\n\n# 1.\u5e8f\u8a00\n\n\u81ea\u5df1\u521a\u5b66\u4f1a\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\uff0c\u611f\u89c9\u5927\u4f6c\u4eec\u7684\u9898\u89e3\u7a0d\u5fae\u6709\u4e9b\u96be\u7406\u89e3\u3002\u3002\u3002\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u7136\u540e\u65b9\u4fbf\u4e00\u4e0b\u6211\u8fd9\u6837\u7684\u849f\u84bb\u7406\u89e3\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\n# 2.\u5f15\u5b50\n\n### \u76f8\u4fe1\u5404\u4f4d\u90fd\u77e5\u9053\u4e8c\u53c9\u6811\u53ed\uff1f\n\n> \u4e8c\u53c9\u6811\u662f\u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u6811\u7684\u6811\u7ed3\u6784\u3002\u901a\u5e38\u5b50\u6811\u88ab\u79f0\u4f5c\u201c\u5de6\u5b50\u6811\u201d\uff08left subtree\uff09\u548c\u201c\u53f3\u5b50\u6811\u201d\uff08right subtree\uff09\n> (\u8f6c\u81ea\u767e\u5ea6)\n                                    \n\uff08\u597d\u50cf\u5e76\u6ca1\u6709\u8fd9\u4e48\u590d\u6742\n\n~~\u5728\u6211\u770b\u6765\u4e8c\u53c9\u6811\u5c31\u662f\u6709\u4e24\u4e2a\u5206\u53c9\u7684\u4e00\u68f5\u6811~~\uff08\u4f46\u5f88\u663e\u7136\u6ca1\u6bdb\u75c5\uff09\n\n\u90a3\u4e48\u4e0b\u9762\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff1a\n\n![\u4e00\u68f5\u6781\u4e3a\u666e\u901a\u7684\u4e8c\u53c9\u6811](https://cdn.luogu.com.cn/upload/pic/64812.png \"\u8fd9\u5c31\u662f\u4e00\u68f5\u4e00\u822c\u7684\u4e8c\u53c9\u6811\")\n\n\u90a3\u4e48\u4e00\u822c\u6765\u8bb2\uff0c\u6211\u4eec\u4f1a\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5904\u9644\u4e0a\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff0c~~\u8fd9\u4e2a\u5e94\u8be5\u90fd\u4f1a\u77e5\u9053~~\n\n\u90a3\u4e48\u4e0b\u9762\u7ee7\u7eed\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\n\n***\u6ee1\u4e8c\u53c9\u6811***\n\n\u6ee1\u4e8c\u53c9\u6811\u662f\u6307\u53ea\u6709\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u65e0\u5b50\u8282\u70b9\uff0c\u6253\u6bd4\u65b9\u5c31\u662f\u8bf4\u4e00\u68f5\u5927\u6811\uff0c\u4e0a\u9762\u7684\u679d\u6761\u90fd\u662f\u4e00\u6837\u957f\u7684\uff0c\u5206\u53c9\u4e5f\u4e00\u6837\u591a\uff0c\u4f46\u662f\u6709\u7684\u679d\u6761\u4e0a\u6ca1\u53f6\u5b50\u3002~~\u7136\u800c\u8fd9\u5e76\u4e0d\u5f62\u8c61~~\n\n\u5728\u6ee1\u4e8c\u53c9\u6811\u4e2d\uff0c\u53c8\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u53eb\u505a\u2014\u2014\n\n***\u5b8c \u5168 \u4e8c \u53c9 \u6811***\n\n~~\u53ef\u4ee5\u7406\u89e3\u4e3a\u90a3\u68f5\u5927\u6811\u53ea\u79c3\u4e86\u53f3\u9762~~\n\n\u5728\u8fd9\u91cc\u9762\uff0c\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec~~\u53ef\u80fd~~\u4f1a\u7528\u5230\uff1a\n\n**\u57282 * i <= n && 2 * i + 1 <= n\u65f6\uff0ci\u7684\u5de6\u5b69\u5b50\u4e3a2 * i, \u53f3\u5b69\u5b50\u4e3a2 * i + 1\uff1b\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u6700\u591a\u67092 ^ j - 1\u4e2a\u8282\u70b9\uff08j\u4e3a\u5c42\u6570\uff0ci\u4e3a\u4efb\u610f\u8282\u70b9\uff09**\n\n\u56e0\u4e3a\u8fd9\u4e2a\u6027\u8d28\u5462\uff0c\u6211\u4eec\u5b58\u50a8\u4e00\u4e2a\u6ee1\u4e8c\u53c9\u6811\u7684\u65f6\u5019\u76f4\u63a5\u5f00\u6570\u7ec4\u4e5f\u5c31\u7528\u5f97\u66f4\u591a\u558f\uff01\n\n\uff08\u753b\u98ce\u7a81\u53d8\uff09\n\nA long long time ago...\n\n\u6211\u4eec~~\u53ef\u80fd~~\u5b66\u8fc7\u4e00\u4e2a\u597d\u4e1c\u897f\u53eb\u505a\n\n**\u524d \u7f00 \u548c \uff01**\n\n\u8fd9\u4e2a\u4e1c\u897f\u3002\u3002\u3002~~\u770b\u8d77\u6765\u5f88\u597d\u5403~~\u662f\u7528\u6765\u6c42\u533a\u95f4\u548c\u7684\n\n\u90a3\u4e48\u8054\u7cfb\u4e00\u4e0b\u4e0a\u9762\u6211\u4eec\u8bf4\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\n\n\u5047\u5982\u53ea\u7ed9\u4e86\u4f60\u4e00\u4e32\u6570\uff08\u60f3\u8c61\u6210\u53f6\u5b50\u7ed3\u70b9\u800c\u4e14\u80fd\u591f\u5efa\u6210\u4e00\u68f5\u6811\u3002\u3002\u3002\uff09\n\n\u90a3\u4e48\u5982\u679c\u8ba9\u4f60\u6765\u6c42\u8fd9\u4e32\u6570\u7684\u603b\u548c\u3002\u3002\u3002\n\n\u4f60\u5b8c\u5168\u53ef\u4ee5\u7528O(n)\u7684\u6734\u7d20\u7b97\u6cd5\u6c42\u51fa\u6765[\u51fa\u95e8\u53f3\u8f6c\u9694\u58c1\u4f60\u8c37\u6700\u96be](https://www.luogu.org/problemnew/show/P1001 \"\u5582\u5582\u5582\u522b\u8d70\u554a\u5582\")\n\n\u5f53\u7136\u4f60\u53ef\u4ee5\u4f5c\u6b7b\u5efa\u4e2a\u6811\u3002\u3002\u3002\n\n\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\n\n**\u4efb\u610f\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u503c\u4e3a\u5176\u5de6\u53f3\u5b69\u5b50\u7684\u548c\uff01**\n\n\u7136\u540e\u8f93\u51fa\u6839\u8282\u70b9\u7684\u503c\n\n# 3.\u7ebf\u6bb5\u6811\n\n\u521a\u624d\u8bf4\u7684\u90a3\u4e9b~~\u5176\u5b9e\u548c\u7ebf\u6bb5\u6811\u5e76\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb~~\u8ddf\u6211\u4eec\u73b0\u5728\u8981\u5b66\u7684\u7ebf\u6bb5\u6811\u5173\u7cfb\u5f88\u5927\n\n\u4f5c\u4e3a\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7ebf\u6bb5\u6811\u662f\u533a\u95f4\u67e5\u8be2\u7684\u4e00\u4e2a\u4f18\u5316\n\n\u7c7b\u578b\u5b9a\u4e49\uff1a\n```cpp\ntemplate<typename T1>\t\t//\u7528\u7684C++\u6a21\u677f\uff0c\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u53bb\u6389\u628a\u4e0b\u9762\u7684T1\u4ec0\u4e48\u7684\u9e2d\u6362\u6210int\nstruct LineTree{\n\tT1* datas;\t\t//\u7ebf\u6bb5\u6811\u672c\u6811\n\tT1* lazy_tag;\t//\u61d2\u6807\u8bb0\uff0c\u540e\u9762\u4f1a\u8bf4\u5230\n\tT1* in;\t\t\t//\u521d\u59cb\u7684\u6570\u7ec4\n\tint* size;\t\t//\u6570\u7ec4\u5927\u5c0f\uff0c\u5b58\u4e00\u4e0b\u540e\u9762\u65b9\u4fbf\u7528\n    //\u6211\u90fd\u662f\u7528\u7684\u6307\u9488\u6570\u7ec4\u3002\u3002\u3002\u76f4\u63a5\u7528\u9759\u6001\u6570\u7ec4\u4e5f\u662f\u53ef\u4ee5\u54d2\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u6ce8\u610f\u597d\u6570\u636e\u8303\u56f4\uff0c\u5f00\u6570\u7ec4\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5f00\u52304 * n\uff0c\u4ee5\u9632\u8d8a\u754cREorz\n\t\n\tLineTree(const int&);\n\t~LineTree();\t\t//\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5730\u65b9\u6211\u7528\u7684\u8fd8\u4e0d\u662f\u8bf4\u5f88\u6807\u51c6\uff0c\u56e0\u4e3a\u8fd9\u4fe9\u5bb6\u4f19\u662fclass\u91cc\u9762\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u5b9e\u9645\u7ade\u8d5b\u65f6\u662f\u4e0d\u8ba9\u7528clsss\u7684\uff0c\u56e0\u6b64\u6b64\u5904\u7528struct\u5373\u53ef\uff0c\u4e0d\u7528\u6307\u9488\u7684\u53ef\u4ee5\u5ffd\u7565\n\t\n\tvoid Build(int, int, int);\t\t//\u6784\u5efa\u51fd\u6570\n\tvoid Upgrade(int, T1, int, int, int);\n\tvoid Upgrade(int, int, T1, int, int, int);\t\t//\u4fee\u6539\u5355\u70b9\u3001\u533a\u95f4\uff0c\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\n\tvoid PushUp(int);\t//\u66f4\u65b0\u81ea\u5df1\n\tvoid PushDown(int, int, int);\t\t//\u66f4\u65b0\u7236\u8282\u70b9\n\tvoid In();\t\t//\u8f93\u5165\n\tT1 Sum(int, int, int, int, int);\t\t//\u533a\u95f4\u6c42\u548c\n};\n```\n\n\n## \u2460 \u5efa\u6811\n\n\u7ebf\u6bb5\u6811\u7684\u6784\u5efa\u5176\u5b9e\u548c\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5dee\u4e0d\u591a\u7684\u65b9\u6cd5\u3002\u3002\u3002~~\uff08\u5f53\u7136\u662f\u6109\u5feb\u7684\u66b4\u529b\u558f\uff09~~\n\u53ea\u4e0d\u8fc7\u662f\u8f93\u51fa\u5e8f\u5217\u662f\u8fdb\u884c\u4e00\u4e9b\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u662f\u6784\u5efa\u7f62\u4e86\uff08\u5176\u5b9e\u8fd8\u662f\u4e00\u6837\u7684\uff09\n\n\u56e0\u4e3a\u6211\u8fd9\u4e2a\u5730\u65b9\u8fd8\u9700\u8981\u6784\u5efa\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u6765\u7533\u8bf7\u548c\u91ca\u653e\u7a7a\u95f4\uff0c\u6240\u4ee5\u5c31\u548c\u5efa\u6811\u4e00\u5757\u653e\u4e0a\u53bb\u558f\n\n```cpp\ntemplate<typename T1>\t//\u6a21\u677f\u7c7b\u3001\u51fd\u6570\u524d\u4e00\u5b9a\u8981\u52a0\u4e0a\u8fd9\u4e32\u4e1c\u897f\uff08typename\u540e\u9762\u4e0d\u4e00\u5b9a\u53ebT1\uff0c\u5c31\u628a\u7c7b\u578b\u4e5f\u5f53\u505a\u53d8\u91cf\u7528\uff09\nLineTree<T1>::LineTree(const int& sz){\n\tthis->datas = new T1[4 * sz];\n\tthis->lazy_tag = new T1[4 * sz];\n\tthis->size = new int;\n\tthis->in = new T1[4 * sz];\n\t*this->size = sz;\t\t//\u4e00\u5806\u7533\u8bf7\u548c\u521d\u59cb\u5316\n    this->In();\n\tthis->Build(1, *this->size, 1);\t\t//\u5206\u522b\u662f\u8f93\u5165\u548c\u5efa\u6811\uff0c\u8f93\u5165\u5c31\u662ffor\u7136\u540ecin\u800c\u5df2\uff0c\u6240\u4ee5\u5c31\u4e0d\u653e\u558f\n}\n\ntemplate<typename T1>\nLineTree<T1>::~LineTree(){\n\tdelete[] this->datas;\n\tdelete[] this->lazy_tag;\n\tdelete this->size;\n\tdelete[] this->in;\t\t//\u9500\u6bc1\u7533\u8bf7\u7684\u7a7a\u95f4\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Build(int left, int right, int root){\t\t//\u6b63\u516b\u7ecf\u7684\u5efa\u6811\u558f\uff0cleft\u9ed8\u8ba4\u89811\uff0cright\u9ed8\u8ba4\u8981n\uff0croot\u9ed8\u8ba4\u89811\n\tthis->lazy_tag[root] = 0;\t\t//\u628a\u61d2\u6807\u7b7e\u5148\u8bbe\u4e3a\u9ed8\u8ba4\u76840\n\tif(left == right){\t//\u627e\u5230\u53f6\u8282\u70b9\uff0c\u5373\u5b83\u7684\u8303\u56f4\u91cc\u53ea\u6709\u5b83\u81ea\u5df1\n\t\tthis->datas[root] = this->in[left];\t\t//\u8fd9\u65f6\u5019\u7ed9\u8be5\u8282\u70b9\u8d4b\u503c\n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t//\u4e8c\u5206\u7ee7\u7eed\u66b4\u529b\n\t\tthis->Build(left, mid, root * 2);\t//\u66b4\u529b\u5de6\u5b50\u6811\n\t\tthis->Build(mid + 1, right, root * 2 + 1);\t//\u66b4\u529b\u53f3\u5b50\u6811 \n\t\tthis->PushUp(root);\t//\u56e0\u4e3a\u4e0d\u662f\u53f6\u8282\u70b9\uff0c\u56de\u6eaf\u66f4\u65b0\u81ea\u5df1\n\t}\n}\n```\n\n\u53ef\u80fd\u770b\u4ee3\u7801\u4f1a\u6709\u4e9b\u96be\u7406\u89e3\uff08\u9192\u9192\u5c31\u4f60\u4e00\u4e2a\u4e0d\u7406\u89e3\uff09\uff0c\u90a3\u6211\u4eec\u6765\u753b\u5f20\u56fe\uff1a\n\n![\u8fd9\u5c31\u662f\u521d\u59cb\u672a\u8d4b\u503c\u7684\u72b6\u6001](https://cdn.luogu.com.cn/upload/pic/64844.png \"i ~ j\u8868\u793a\u4ecei\u5230j\u7684\u533a\u95f4\")\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u4ece1 \u5230 n\uff08\u4e5f\u5c31\u662f\u6837\u4f8b\u4e2d\u76845\uff09\u5f00\u59cb\u66b4\u529b\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u65f6\u7684left\u5e76\u4e0d\u7b49\u4e8eright\uff0c\u56e0\u6b64\u4e8c\u5206mid=3\uff0c\u6240\u4ee5\u6211\u4eec\u9012\u5f52Build(1, 3, root * 2 = 2)\u4e5f\u5c31\u662f\u5de6\u5b50\u6811\uff0c\u8fd9\u65f6\u7684\u6839\u8282\u70b9\u53d8\u6210\u4e86\u5b83\u7684\u5de6\u5b50\u6811\u7684\u6839\u8282\u70b9root * 2 = 2\uff0c\u540c\u7406\u4e5f\u9012\u5f52\u53f3\u5b50\u6811Build(4, 6, root * 2 + 1 = 3)\uff0c\u56de\u6eaf\u66f4\u65b0\u7684\u8bdd\u5462\uff08\u6211\u597d\u60f3\u5fd8\u4e86\u7ed9\u4ee3\u7801\u558f\uff09\u5982\u4e0b\n\n\tthis->datas[root] = this->datas[root * 2] + this->datas[root * 2 + 1];\n\uff08\u4f46\u662f\u8fd9\u4e2a\u56de\u6eaf\u662f\u6700\u540e\u624d\u88ab\u66f4\u65b0\u7684\uff09\n\n\u90a3\u4e48Keep Going!\n\n\u6839\u636e\u539f\u7406\uff0c1\u8fd8\u662f\u4e0d\u7b49\u4e8e3\uff0c4\u8fd8\u662f\u4e0d\u7b49\u4e8e6\uff0c\u7ee7\u7eed\u4e8c\u5206\uff01\n\nMid(left) = 2\uff0c Mid(right) = 5\n\n\u90a3\u4e48\u5c31\u9012\u5f52\u51fa\u4e86\u56db\u4e2a\u51fd\u6570\uff1a\n\nBuild\uff08\u539f\u5de6\uff09(1, 2, root * 2 = 4)\uff0cBuild\uff08\u539f\u5de6\uff09(3, 4, root * 2 + 1 = 5)\uff0cBuild\uff08\u539f\u53f3\uff09(4, 5, root * 2 = 6)\uff0cBuild\uff08\u539f\u53f3\uff09(6, 6, root * 2 + 1 = 7)\n\n\u90a3\u4e48\u6211\u4eecBuild\u7684\u5de6\u5de6\uff0c\u5de6\u53f3\uff0c\u53f3\u5de6\u90fd\u8fd8\u662f\u6ca1\u6709\u8fbe\u5230\u6761\u4ef6\uff0c\u4f46\u662f\u6211\u4eec\u7684\u53f3\u53f3\u7684left\u5df2\u7ecf\u7b49\u4e8eright\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed9datas[root = 7]\u8d4b\u503c\u4e3ain[left = 6]\u4e5f\u5c31\u662f\u3002\u3002\u3002\n\n~~\uff08\u76ee\u524d\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff09~~\n\n\u90a3\u4e48\u7ed9\u5269\u4e0b\u7684\u4e09\u4e2a\u51fd\u6570\u7ee7\u7eed\u9012\u5f52\uff0c\u5de6\u5de6Mid = 1, \u5de6\u5de6\u5de6Build(1, 1, root * 2 = 8)\u3001\u5de6\u5de6\u53f3Build(2, 2, root * 2 + 1 = 9)\uff1b\u5de6\u53f3Mid = 3\uff0c\u5de6\u53f3\u5de6Build(3, 3, root * 2 = 10);\u5de6\u53f3\u53f3Build(4, 4, root * 2 + 1 = 11)\uff1b\u53f3\u5de6Mid = 4\uff0c\u53f3\u5de6\u5de6Build(4, 4, root * 2 = 12)\uff0c\u53f3\u5de6\u53f3Build(5, 5, root * 2 + 1 = 13)\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u628adatas[8]\u8d4b\u503c\u4e3ain[1] = 1,datas[9] = in[2] = 5, datas[10] = in[3] = 4, datas[11] = in[4] = 2, datas[12] = in[4] = 2, datas[13] = in[5] = 3\n\n\u6b64\u65f6\u5f00\u59cb\u56de\u6eaf\uff0c\u5de6\u5de6\u4e5f\u5c31\u662fdatas[4] = datas[8] + datas[9] = 6, datas[5] = datas[10] + datas[11] = 6, datas[6] = datas[12] + datas[13] = 5,\u800c\u6211\u4eec\u90a3\u53ef\u601c\u7684datas[7]\u8fd8\u662f\u6ca1\u6709\u503c\u3002\u3002\u3002\u6240\u4ee5\u5c31\u662f\u5f530\u4e5f\u5c31\u662f\u6ca1\u6709datas[7]\u8fd9\u4e2a\u8282\u70b9\n\n\u518d\u5411\u4e0a\u56de\u6eaf\uff0cdatas[2] = datas[4] + datas[5] = 12, datas[3] = datas[6] + datas[7] = 5\n\n\u56de\u6eaf\u5230\u6700\u9876\u5c42\uff0cdatas[1] = datas[2] + datas[3] = 17\n\n\uff08\u547c\n~~\uff0c\u624b\u6253\u9012\u5f52\u771f\u96be\u53d7~~\n\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5927\u6982\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u8fd9\u68f5\u6811\uff1a\n\n![\u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u6811](https://cdn.luogu.com.cn/upload/pic/64853.png \"\u624b\u52a8\u66b4\u529b\u771f\u7684\u7d2fQwQ\")\n\n## \u2461\u4fee\u6539\u5355\u70b9\n\n\u4fee\u6539\u5355\u70b9\u7684\u8bdd\u5462\u3002\u3002\u3002~~\u5176\u5b9e\u6bd4\u5efa\u6811\u8fd8\u8981\u7b80\u5355~~\n\n\u8fd8\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684dfs\u5e26\u4e8c\u5206\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u80fd\u628adatas\u770b\u505a\u4e00\u68f5\u6811\uff0c\u60f3\u8c61\u4f60\u5c31\u662f\u5728\u4e00\u4e2a\u7ebf\u6027\u7ed3\u6784\u91cc\u627e\u4e00\u4e2a\u503c\u3002\u3002\u3002\n\n\u4e0a\u4ee3\u7801\uff0c\u8fd9\u4e2a\u4e0d\u591a\u89e3\u91ca\n\n```cpp\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int point, T1 data, int left, int right, int root){\n\tif(left == right == point){\t\t//\u627e\u5230\u8be5\u8282\u70b9 \n\t\tthis->datas[root] += data;\t//\u66f4\u65b0 \n\t\treturn;\t//\u7ed3\u675f \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t \n\t\tif(point < mid){\n\t\t\tthis->Upgrade(point, data, mid + 1, right, root * 2 + 1);\n\t\t} \n\t\telse{\n\t\t\tthis->Upgrade(point, data, left, mid, root * 2);\n\t\t}\n\t\t//\u4e8c\u5206\u627e[point,point] \n\t\tthis->PushUp(root);\n\t\t//\u56de\u6eaf\uff0c\u66f4\u65b0\u7236\u8282\u70b9 \n\t}\n}\n```\n\n~~(\u7136\u9e45\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528~~\n\n## \u2462\u4fee\u6539\u533a\u95f4\n\n\u533a\u95f4\u7684\u4fee\u6539\u53ef\u4ee5\u8bf4\u662f\u7ebf\u6bb5\u6811 && \u6811\u72b6\u6570\u7ec4\u7684\u7cbe\u9ad3\u6240\u5728\u4e86\n\n\u4e0a\u4ee3\u7801\n\n```cpp\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int from, int to, T1 data, int left, int right, int root){\n\tif(from <= left && to >= right){\t//\u5728\u9700\u66f4\u65b0\u8303\u56f4\u5185 \n\t\tthis->datas[root] += (right - left + 1) * data;\t//\u66f4\u65b0\u603b\u7684\u533a\u95f4\u503c \n\t\tthis->lazy_tag[root] += data;\t//\u8bbe\u597dlazy_tag\uff0c\u8fc7\u540e\u518d\u6539 \n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\t//\u4e0b\u63a8root \n\t\tT1 mid = (left + right) / 2;\n\t\tif(from <= mid){\n\t\t\tthis->Upgrade(from, to, data, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tthis->Upgrade(from, to, data, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\tthis->PushUp(root);\n\t\t//\u8fd8\u662f\u4e8c\u5206\u56de\u6eaf \n\t}\n}\n```\n\n\u5982\u679c\u8bf4\u76f4\u63a5\u8fd9\u4e48\u4e0a\u4e00\u4e32\u4ee3\u7801\u3002\u3002\u3002\u6211\u76f8\u4fe1\u4e5f\u662f\u6bd4\u8f83\u96be\u53bb\u7406\u89e3\u7684\uff08\u9192\u9192\u5c31\u4f60\u4e00\u4e2a\u4e0d\u7406\u89e3\n\n~~\u90a3\u4e48\u6211\u4eec\u8fd8\u662f\u6765\u624b\u52a8\u6a21\u62df\u4e00\u4e0b~~\n\n\u5c31\u62ff\u6837\u4f8b\u91cc\u7684\u7b2c\u4e00\u4e2a\u4fee\u6539\u4e3e\u4f8b\uff08\u5212\u6389\n\n\u8981\u6c42\u662f\u8981\u4fee\u6539[2, 3]\u533a\u95f4\u7684\u503c\u3002\u3002\u3002\n\n\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u8fd9\u4e2aUpgrade()\u51fd\u6570\u7684\u53c2\u6570\u503c\u5c31\u662f(2, 3, 2, 1, 5, 1)\n\n\u90a3\u4e48\u8ddf\u7740\u4ee3\u7801\u8d70\uff1a\n\n\u56e0\u4e3a2 !<= 1\uff0c\u6240\u4ee5\u8fdbelse\n\n\u9996\u5148\u6211\u4eec\u5148\u628a\u5728root\u4e2d\u7684lazy_tag\u5411\u4e0b\u5206\u914d\u5230\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\n\n\u53ef\u662f\u3002\u3002\u3002\u95ee\u9898\u662f\u3002\u3002\u3002\n\n***lazy_tag\u662f\u4ec0\u4e48\uff1f\uff1f\uff1f***\n\n\u3002\n\n~~\u4f60\u731c~~lazy\u662f\u61d2\u7684\u610f\u601d\uff0ctag\u662f\u6807\u7b7e\u3002\u3002\u3002\u61d2\u6807\u7b7eqwq\u83ab\u4e0d\u662f\u6807\u8bb0\u4e0a\u61d2\u5f97\u66f4\u65b0\uff1f\uff1f\uff1f\n\n\u8fd8\u771f\u662f\uff08\u9003\n\nlazy_tag\u7684\u5b58\u5728\u5c31\u662f\u4f18\u5316\u590d\u6742\u5ea6\u7684\uff0c\u56e0\u4e3a\u6709\u7684\u4e00\u4e9b\u6570\u503c\u6211\u4eec\u662f\u5728\u67e5\u8be2\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u5c31\u6ca1\u5fc5\u8981\u7b97\u4ed6\u4eec\uff0c\u8bb0\u5f55\u4e0b\u6765\u77e5\u9053\u6709\u8fd9\u56de\u4e8b\u5c31\u597dawa\n\n\u5982\u679c\u8fd8\u4e0d\u591f\u5f62\u8c61\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6765\u6253\u4e2a\u6bd4\u65b9\n\n\uff08\u753b\u9762\u81ea\u884c\u8111\u8865\uff09\n\nAuAqwq\u5728\u67d0\u5929\u5750\u5728\u5bb6\u91cc\u770b\u756a\u5237B\u7ad9\uff0c\u6d3b\u8131\u4e00\u4e2a\u6b7b\u80a5\u5b85\uff08\u53ef\u6211\u771f\u7684\u4e0d\u80a5qwq\uff09\u7684\u6837\u5b50\u3002\u4fd7\u8bdd\u8bf4\u7684\u597d\uff0c\u6ca1\u6709\u53ef\u4e50\u7684\u80a5\u5b85\u751f\u6d3b\u662f\u7a7a\u4e4f\u7684\uff08\u6ca1\u9519\u6211\u81ea\u5df1\u7f16\u7684\uff09\u3002\u56e0\u6b64AuAqwq\u6253\u7b97\u53bb\u90a3\u51e0\u74f6\u53ef\u4e50\uff0c\u53ef\u662f\u51b0\u7bb1\u91cc\u6ca1\u6709\u4e86\uff0c\u4f46\u662fAuAqwq\u5e76\u4e0d\u6253\u7b97\u53bb\u4e70\uff0c\u56e0\u4e3a\u5916\u9762\u70ed\u8fbe0x3f3f3f3f\u2103\u800c\u4e14ikun\u4eec\u4e00\u76f4\u5728\u9ad8\u547c______\uff0c\u56e0\u6b64AuAqwq\u4e0d\u5230\u8feb\u4e0d\u5f97\u5df2\u662f\u4e0d\u4f1a\u51fa\u53bb\u4e70\uff08\u5bf9\u5e94\u67e5\u8be2\u64cd\u4f5c\uff09\u7684\u3002\u5f53AuAqwq\u6bcf\u770b\u5b8c\u4e00\u96c6\u5c31\u4f1a\u60f3\u4e70\u51e0\u74f6\u53ef\u4e50\uff0c\u800c\u4e14\u8981\u653e\u5728\u51b0\u7bb1\u8fde\u7740\u7684\u51e0\u5c42\u91cc\uff0c\u6bcf\u5c42\u653e\u7684\u6570\u91cf\u4e00\u6837\uff08\u5bf9\u5e94\u4fee\u6539\u64cd\u4f5c\uff09\n\n\u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u6837\uff0clazy_tag\u7684\u7528\u9014\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8eAuAqwq\u5728\u8111\u5b50\u4e2d\u8bb0\u5fc6\u8981\u4e70\u7684\u53ef\u4e50\uff0c\u5e76\u4e14\u4e70\u6765\u4ee5\u540e\u8fd8\u4e0d\u4e00\u5b9a\u653e\u8fdb\u53bb\uff08\u53ef\u80fd\u6bd4\u55bb\u4e0d\u662f\u5f88\u6070\u5f53\u3002\u3002\u3002\n\n\u54b3\u54b3\u54b3\u3002\u3002\u3002\n\n\u8ba9\u6211\u4eec\u7ee7\u7eed\u6765\u770b\u4e00\u4e0bPushDown\u51fd\u6570\u7684\u5b9a\u4e49\n\n```cpp\ntemplate<typename T1>\nvoid LineTree<T1>::PushDown(int root, int left, int right){\n\tT1 mid = (right + left) / 2;\n\tthis->lazy_tag[root * 2] += this->lazy_tag[root];\t//\u91cd\u70b91.0\n\tthis->datas[root * 2] += (mid - left + 1) * this->lazy_tag[root];\t//\u91cd\u70b92.0\n\tthis->lazy_tag[root * 2 + 1] += this->lazy_tag[root];\n\tthis->datas[root * 2 + 1] += (right - mid) * this->lazy_tag[root];\t//\u590d\u8bfb\u5de6\u8fb9\u76f8\u5f53\u4e8e\n\tthis->lazy_tag[root] = 0;\t//\u628a\u539f\u6765\u5b58\u5728root\u7684lazy_tag\u53bb\u6389\n}\n```\n\n### \u91cd\u70b91.0\n\u56de\u53bb\u7784\u4e00\u773c\u6211\u4eec\u7684Upgrade\u51fd\u6570\n\n\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684lazy_tag\u7684\u66f4\u65b0\u662f\u76f4\u63a5\u628a\u4fee\u6539\u7684\u5355\u4e2a\u503c\u52a0\u5728\u4e86\u4e0a\u9762\uff0c\u6240\u4ee5\u5de6\u53f3\u5b50\u8282\u70b9\u7684lazy_tag\u76f4\u63a5\u52a0\u7684\u5b83\u7684lazy_tag\u503c\n\n### \u91cd\u70b92.0\n\n\u8fd9\u4e2a\u5730\u65b9\u53ef\u80fd\u4f1a\u6709\u4e9b\u8270\u6da9\n\n\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5224\u65ad\u4ed6\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u8282\u70b9\uff08\u662f\u4e0d\u662f\u4e5f\u65e0\u6240\u8c13\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u8ba9\u4ed6\u628a\u4ed6\u5c0f\u5f1f\u7684\u4e5f\u90fd\u5e26\u4e0aqwq\n\n\u54b3\u54b3\uff0c\u8ba9\u6211\u4eec\u56de\u5230Upgrade\u51fd\u6570\u91cc\uff0c\u4e0b\u9762\u8fd8\u662f\u4e45\u8fdd\u7684\u4e8c\u5206\uff0c\u8303\u56f4\u76f8\u4fe1\u5404\u4f4d\u5946\u7287\u4e5f\u90fd\u80fd\u7406\u89e3qwq\uff08\u5047\u88c5\u5fd8\u6389\u4e0a\u9762\u8fd8\u5728\u4e3e\u4f8b\n\n\u6700\u540e\u7684\u56de\u6eaf\u4e3b\u8981\u662f\u4e3a\u4e86\u8ba9\u90a3\u7fa4~~\u5fd8\u6069\u8d1f\u4e49~~\u5b50\u8282\u70b9\u4e3a\u7236\u8282\u70b9\u66f4\u65b0\n\n## \u2463\u533a\u95f4\u67e5\u8be2\n\n\u5148\u4f9b\u4ee3\u7801\n\n```cpp\ntemplate<typename T1>\nT1 LineTree<T1>::Sum(int from, int to, int left, int right, int root){\n\tif(left >= from && right <= to){\n\t\treturn this->datas[root];\t//\u786e\u8ba4\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u503c\u4e86\uff0c\u7136\u540e\u8fd4\u56de\n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\n\t\tT1 mid = (right + left) / 2;\n\t\tT1 ans = 0;\n\t\tif(from <= mid){\n\t\t\tans += this->Sum(from, to, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tans += this->Sum(from, to, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\treturn ans;\t\t//\u548cUpgrade\u51e0\u4e4e\u4e00\u6837\uff0c\u52a0\u4e86\u4e2a\u8fd4\u56de\u503c\u800c\u5df2\u3002\u3002\u3002\n\t}\n}\n```\n\n\u76f8\u4fe1\u8fd9\u4e2a\u5927\u5bb6\u4e5f\u90fd\u660e\u767d\u4e86\uff0c\u4e0d\u660e\u767d\u7684\u8bdd\u3002\u3002\u3002\u81ea\u5df1\u624b\u7b97\uff08\u5212\u6389\n\n## \u2464\u7ebf\u6bb5\u6811\u603b\u7ed3\n\nSo\uff0c\u7ebf\u6bb5\u6811\u5c31\u8fd9\u4e48\u88ab\u6211\u4eec\u5b8c\u7f8e\uff08\u4e2a\u9b3c\uff09\u6572\u5b8c\u4e86\uff01\n\n\u4e0d\u5e26main\u7684\u4e07\u80fd\u7ebf\u6bb5\u6811\u6a21\u677f\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate<typename T1>\nstruct LineTree{\n\tT1* datas;\n\tT1* lazy_tag;\n\tT1* in;\n\tint* size;\n\t\n\tLineTree(const int&);\n\t~LineTree();\n\t\n\tvoid Build(int, int, int);\n\tvoid Upgrade(int, T1, int, int, int);\n\tvoid Upgrade(int, int, T1, int, int, int);\n\tvoid PushUp(int);\n\tvoid PushDown(int, int, int);\n\tvoid In();\n\tT1 Sum(int, int, int, int, int);\n};\n\ntemplate<typename T1>\nLineTree<T1>::LineTree(const int& sz){\n\tthis->datas = new T1[4 * sz];\n\tthis->lazy_tag = new T1[4 * sz];\n\tthis->size = new int;\n\tthis->in = new T1[4 * sz];\n\t*this->size = sz;\n\tthis->In();\n\tthis->Build(1, *this->size, 1);\n}\n\ntemplate<typename T1>\nLineTree<T1>::~LineTree(){\n\tdelete this->datas;\n\tdelete this->lazy_tag;\n\tdelete this->size;\n\tdelete this->in;\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Build(int left, int right, int root){\n\tthis->lazy_tag[root] = 0;\n\tif(left == right){\t//\u627e\u5230\u53f6\u8282\u70b9 \n\t\tthis->datas[root] = this->in[left];\n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t//\u4e8c\u5206 \n\t\tthis->Build(left, mid, root * 2);\t//\u5de6\u5b50\u6811 \n\t\tthis->Build(mid + 1, right, root * 2 + 1);\t//\u53f3\u5b50\u6811 \n\t\tthis->PushUp(root);\t//\u56de\u6eaf\u66f4\u65b0 \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int point, T1 data, int left, int right, int root){\n\tif(left == right == point){\t\t//\u627e\u5230\u8be5\u8282\u70b9 \n\t\tthis->datas[root] += data;\t//\u66f4\u65b0 \n\t\treturn;\t//\u7ed3\u675f \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t \n\t\tif(point < mid){\n\t\t\tthis->Upgrade(point, data, mid + 1, right, root * 2 + 1);\n\t\t} \n\t\telse{\n\t\t\tthis->Upgrade(point, data, left, mid, root * 2);\n\t\t}\n\t\t//\u4e8c\u5206\u627e[point,point] \n\t\tthis->PushUp(root);\n\t\t//\u56de\u6eaf\uff0c\u66f4\u65b0\u7236\u8282\u70b9 \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int from, int to, T1 data, int left, int right, int root){\n\tif(from <= left && to >= right){\t//\u5728\u9700\u66f4\u65b0\u8303\u56f4\u5185 \n\t\tthis->datas[root] += (right - left + 1) * data;\t//\u66f4\u65b0\u603b\u7684\u533a\u95f4\u503c \n\t\tthis->lazy_tag[root] += data;\t//\u8bbe\u597dlazy_tag\uff0c\u8fc7\u540e\u518d\u6539 \n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\t//\u4e0b\u63a8root \n\t\tT1 mid = (left + right) / 2;\n\t\tif(from <= mid){\n\t\t\tthis->Upgrade(from, to, data, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tthis->Upgrade(from, to, data, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\tthis->PushUp(root);\n\t\t//\u8fd8\u662f\u4e8c\u5206\u56de\u6eaf \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::PushUp(int root){\n\tthis->datas[root] = this->datas[root * 2] + this->datas[root * 2 + 1];\n} \n\ntemplate<typename T1>\nvoid LineTree<T1>::PushDown(int root, int left, int right){\n\tT1 mid = (right + left) / 2;\n\tthis->lazy_tag[root * 2] += this->lazy_tag[root];\n\tthis->datas[root * 2] += (mid - left + 1) * this->lazy_tag[root];\n\tthis->lazy_tag[root * 2 + 1] += this->lazy_tag[root];\n\tthis->datas[root * 2 + 1] += (right - mid) * this->lazy_tag[root];\n\tthis->lazy_tag[root] = 0;\n}\n\ntemplate<typename T1>\nT1 LineTree<T1>::Sum(int from, int to, int left, int right, int root){\n\tif(left >= from && right <= to){\n\t\treturn this->datas[root];\n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\n\t\tT1 mid = (right + left) / 2;\n\t\tT1 ans = 0;\n\t\tif(from <= mid){\n\t\t\tans += this->Sum(from, to, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tans += this->Sum(from, to, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\treturn ans;\n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::In(){\n\tfor(register int i = 1; i <= *size; i++){\n\t\tcin >> this->in[i];\n\t}\n}\n```\n\n\u98df\u7528\u65b9\u5f0f\uff1a\n\n\tLineTree<\u7c7b\u578b\u540d\u79f0> \u53d8\u91cf\u540d\u79f0(\u6570\u5217\u957f\u5ea6);\n\n\u672c\u9898AC\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate<typename T1>\nstruct LineTree{\n\tT1* datas;\n\tT1* lazy_tag;\n\tT1* in;\n\tint* size;\n\t\n\tLineTree(const int&);\n\t~LineTree();\n\t\n\tvoid Build(int, int, int);\n\tvoid Upgrade(int, T1, int, int, int);\n\tvoid Upgrade(int, int, T1, int, int, int);\n\tvoid PushUp(int);\n\tvoid PushDown(int, int, int);\n\tvoid In();\n\tT1 Sum(int, int, int, int, int);\n};\n\nint main(int argc, char* argv[]){\n\tregister int* n = new int;\n\tregister int* m = new int;\n\tcin >> *n >> *m;\n\tLineTree<long long> t(*n);\n\tregister long long* cmd = new long long;\n\tregister long long* x = new long long;\n\tregister long long* y = new long long;\n\tregister long long* k = new long long;\n\tfor(register long long i = 0; i < *m; i++){\n\t\tcin >> *cmd;\n\t\tif(*cmd & 1){\n\t\t\tcin >> *x >> *y >> *k;\n\t\t\tt.Upgrade(*x, *y, *k, 1, *n, 1);\n\t\t}\n\t\telse{\n\t\t\tcin >> *x >> *y;\n\t\t\tcout << t.Sum(*x, *y, 1, *n, 1) << endl;\n\t\t}\n\t\t*x = 0;\n\t\t*y = 0;\n\t\t*k = 0;\n\t}\n\tdelete n;\n\tdelete m;\n\tdelete cmd;\n\tdelete x;\n\tdelete y;\n\tdelete k;\n\treturn 0;\n} \n\ntemplate<typename T1>\nLineTree<T1>::LineTree(const int& sz){\n\tthis->datas = new T1[4 * sz];\n\tthis->lazy_tag = new T1[4 * sz];\n\tthis->size = new int;\n\tthis->in = new T1[4 * sz];\n\t*this->size = sz;\n\tthis->In();\n\tthis->Build(1, *this->size, 1);\n}\n\ntemplate<typename T1>\nLineTree<T1>::~LineTree(){\n\tdelete[] this->datas;\n\tdelete[] this->lazy_tag;\n\tdelete this->size;\n\tdelete[] this->in;\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Build(int left, int right, int root){\n\tthis->lazy_tag[root] = 0;\n\tif(left == right){\t//\u627e\u5230\u53f6\u8282\u70b9 \n\t\tthis->datas[root] = this->in[left];\n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t//\u4e8c\u5206 \n\t\tthis->Build(left, mid, root * 2);\t//\u5de6\u5b50\u6811 \n\t\tthis->Build(mid + 1, right, root * 2 + 1);\t//\u53f3\u5b50\u6811 \n\t\tthis->PushUp(root);\t//\u56de\u6eaf\u66f4\u65b0 \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int point, T1 data, int left, int right, int root){\n\tif(left == right == point){\t\t//\u627e\u5230\u8be5\u8282\u70b9 \n\t\tthis->datas[root] += data;\t//\u66f4\u65b0 \n\t\treturn;\t//\u7ed3\u675f \n\t}\n\telse{\n\t\tint mid = (right + left) / 2;\t \n\t\tif(point < mid){\n\t\t\tthis->Upgrade(point, data, mid + 1, right, root * 2 + 1);\n\t\t} \n\t\telse{\n\t\t\tthis->Upgrade(point, data, left, mid, root * 2);\n\t\t}\n\t\t//\u4e8c\u5206\u627e[point,point] \n\t\tthis->PushUp(root);\n\t\t//\u56de\u6eaf\uff0c\u66f4\u65b0\u7236\u8282\u70b9 \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::Upgrade(int from, int to, T1 data, int left, int right, int root){\n\tif(from <= left && to >= right){\t//\u5728\u9700\u66f4\u65b0\u8303\u56f4\u5185 \n\t\tthis->datas[root] += (right - left + 1) * data;\t//\u66f4\u65b0\u603b\u7684\u533a\u95f4\u503c \n\t\tthis->lazy_tag[root] += data;\t//\u8bbe\u597dlazy_tag\uff0c\u8fc7\u540e\u518d\u6539 \n\t\treturn;\t//\u9000\u51fa \n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\t//\u4e0b\u63a8root \n\t\tT1 mid = (left + right) / 2;\n\t\tif(from <= mid){\n\t\t\tthis->Upgrade(from, to, data, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tthis->Upgrade(from, to, data, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\tthis->PushUp(root);\n\t\t//\u8fd8\u662f\u4e8c\u5206\u56de\u6eaf \n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::PushUp(int root){\n\tthis->datas[root] = this->datas[root * 2] + this->datas[root * 2 + 1];\n} \n\ntemplate<typename T1>\nvoid LineTree<T1>::PushDown(int root, int left, int right){\n\tT1 mid = (right + left) / 2;\n\tthis->lazy_tag[root * 2] += this->lazy_tag[root];\n\tthis->datas[root * 2] += (mid - left + 1) * this->lazy_tag[root];\n\tthis->lazy_tag[root * 2 + 1] += this->lazy_tag[root];\n\tthis->datas[root * 2 + 1] += (right - mid) * this->lazy_tag[root];\n\tthis->lazy_tag[root] = 0;\n}\n\ntemplate<typename T1>\nT1 LineTree<T1>::Sum(int from, int to, int left, int right, int root){\n\tif(left >= from && right <= to){\n\t\treturn this->datas[root];\n\t}\n\telse{\n\t\tthis->PushDown(root, left, right);\n\t\tT1 mid = (right + left) / 2;\n\t\tT1 ans = 0;\n\t\tif(from <= mid){\n\t\t\tans += this->Sum(from, to, left, mid, root * 2);\n\t\t}\n\t\tif(to > mid){\n\t\t\tans += this->Sum(from, to, mid + 1, right, root * 2 + 1);\n\t\t}\n\t\treturn ans;\n\t}\n}\n\ntemplate<typename T1>\nvoid LineTree<T1>::In(){\n\tfor(register int i = 1; i <= *size; i++){\n\t\tcin >> this->in[i];\n\t}\n}\n```\n\n\u8fa3\u4e48\u7ebf\u6bb5\u6811\u5c31\u5230\u8fd9\u91ccrua\uff01\n\n# 4.\u6811\u72b6\u6570\u7ec4\n\n\u6ce5\u840c\u8bf4\u7684\u8fd9\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4ed6\u5389\u5bb3\u5417\uff1f\uff08\u6b63\u5f53AuAqwq\u5728\u8bb2\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u4eba\u7fa4\u91cc\u7a81\u7136\u5192\u51fa\u6765\u4e86\u8fd9\u4e00\u53e5\n\n\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u554a\u4ed6\u4e0d\u662f\u90a3\u79cd\u5389\u4e0d\u5389\u5bb3\u7684\u95ee\u9898\uff0c\u4ed6\u771f\u7684\u662f\u90a3\u79cd\u3002\u3002\u3002\u6ca1\u6709\u6811\u72b6\u6570\u7ec4\u8dd1\u5f97\u5feb\u7684\u90a3\u79cd\n\n~~\uff08\u4e0a\u9762\u90a3\u4e9b\u8bdd\u4f5c\u5e9fawa~~\n\n\u54b3\u54b3\u54b3\n\n\u90a3\u4e48\u5728\u505a\u8fd9\u79cd\u9898\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9664\u4e86\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u8fd8\u6709\u6ca1\u6709\u5176\u4ed6\u4ec0\u4e48\u66f4\u5feb\u7684\u5176\u4ed6\u64cd\u4f5c\u5462\uff1f\n\nThis is \u6811\u72b6\u6570\u7ec4~~\uff08\u5b9e\u5728\u4e0d\u77e5\u9053\u6811\u72b6\u6570\u7ec4\u5624\u6587\u54c8\u54c8\u54c8~~\n\n\u90a3\u4e48\u6811\u72b6\u6570\u7ec4\u5230\u5e95\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b57\u9762\u6765\u7406\u89e3\uff0c\u6811\u72b6\u7684\u6570\u7ec4\uff0c\u90a3\u5c31\u662f\u4e00\u79cd\u4ee5\u7c7b\u4f3c\u6811\u5f62\u7684\u6570\u7ec4\u3002\u3002\u3002\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7528\u6811\u7684\u6a21\u62df\u56fe\u6765\u8868\u793a\u51fa\u6765\u3002\u3002\u3002\n\n\u597d\u53ed\u4e0d\u5356\u5173\u5b50\u558f\uff0c\u6811\u72b6\u6570\u7ec4\u5c31\u662f\u8fd9\u4e2a\u4e1c\u897f\u2193\n\n![\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u4e00\u4e2an = 4\u7684\u6811\u72b6\u6570\u7ec4](https://cdn.luogu.com.cn/upload/pic/65182.png \"n = 4\u7684\u6811\u72b6\u6570\u7ec4\uff08\u9898\u76ee\u539f\u672c\u76845\u4e0d\u5927\u4f1a\u753bqwq\uff09\")\n\n\u8fa3\u4e48\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u6709\u4ec0\u4e48\u597d\u7684\u5462\uff1f\n\n\uff08\u556a\uff01\uff09\n\n\u54b3\u54b3\u54b3\uff0c\u597d\u5904\u5427\u3002\u3002\u3002\u6709\u3002\u3002\u3002\u8bf4\u4e0d\u6e05\u3002\u3002\u3002\uff08\u9010\u6e10\u626f\u8fdc\n\n\u6570\u7ec4A\u4e2d\u50a8\u5b58\u7684\u4e5f\u5c31\u662f\u6211\u4eec\u521d\u59cb\u7684\u4e00\u4e2a\u503c\n\n\u6570\u7ec4C\u4e2d\u50a8\u5b58\u7684\u662f\u5b83\u7684\u5de6\u53f3\u8282\u70b9\u7684\u548c\uff0c\u800c\u5728\u8fd9\u68f5\u5047\u7684\u6811\u4e2d\uff0c\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u503c\u90fd\u4e0eA\u4e2d\u7684\u503c\u76f8\u5bf9\u5e94\n\n\u5728\u6211\u4eecn = 4\u7684\u8fd9\u6837\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u4e2d\uff1a\n\nC[1] = A[1], C[2] = C[1] + A[2] = A[1] + A[2], C[3] = A[3], C[]4 = C[2] + C[3] + A[4] = A[1] + A{2] + A[3] + A[4];\n\n\u8fd9\u4e2a\u4f8b\u5b50\u662f\u4e0d\u662f\u8fd8\u4e0d\u591f\u660e\u663e\uff1f\u6211\u4eec\u518d\u6765\u770b\u770bn = 8\u7684\u6811\u72b6\u6570\u7ec4\n\n![n = 8\u7684\u6811\u72b6\u6570\u7ec4](https://cdn.luogu.com.cn/upload/pic/65241.png \"\u8fd9\u5c31\u662fn = 8\u7684\u6811\u72b6\u6570\u7ec4\")\n\n\u4eceC[1]~C[4]\u90fd\u662f\u548cn = 4\u4e00\u6837\uff0cC[5] = A[5], C[6] = C[5] + A[6], C[7] = A[7], C[8] = C[4] + C[6] + A[8] = A[1] + A[2] +... + A[8]\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6765\u89c2\u5bdf\u4e00\u4e0b\u89c4\u5f8b\uff1a\n\nindex\u4e3a\u5947\u6570\u7684C\u90fd\u4e0eA[index]\u76f8\u5bf9\u5e94\n\n\u800c\u53ea\u80fd\u9664\u4ee51\u6b212\u7684\u5219\u662f\u5728\u7b2c\u4e8c\u5c42\u7684\u4ece\u5de6\u6570\u7b2cindex / 2\u4e2a\uff0c\u5bf9\u5e94\u7740A[index - 1] + A[index]\n\n\u800c\u53ea\u80fd\u9664\u4ee52\u6b212\u7684\u5219\u662f\u5728\u7b2c\u4e09\u5c42\u7684\u4ece\u5de6\u6570\u7b2cindex / (2 * 2)\u4e2a\uff0c\u5bf9\u5e94\u7740C[index - 2] + C[index - 1] + A[index] = A[index - 3] + A[index - 2] + A[index - 2] + A[index]\n\n\u76f8\u4fe1\u6211\u4e0d\u7528\u8bf4\u5404\u4f4d\u5946\u7287\u4eec\u90fd\u80fd\u60f3\u7684\u51fa\u6765\u540e\u7ee7\u7684\u89c4\u5f8b\n\n\u5982\u679c\u6211\u4eec\u628aindex\u4e3a\u5947\u6570\u7684\u4e5f\u603b\u7ed3\u8fdb\u4e00\u822c\u89c4\u5f8b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u901a\u9879\u516c\u5f0f\uff1a\n\n$\n  \n\nC[i]=\n\n   i\n\n   \u03a3 A\n\ni-m\n\nm\u4e3ai\u80fd\u88ab2\u6574\u9664\u7684\u6b21\u6570\n$\n\n\u662f\u4e0d\u662f\u8fd8\u6709\u4e9b\u8270\u6da9\uff1f\u90a3\u4e48\u6211\u4eec\u7528\u7a0b\u5e8f\u5199\u51fa\u6765\n\n```cpp\nint m = 0\uff0c icpy = i;\nwhile (icpy % 2 == 0)\n{\n\tm += 1;\n\ticpy >> 1;  \\\\(icpy /= 2\u4e0e\u53f3\u79fb1\u4f4d\u6548\u679c\u4e00\u6837)\n} //\u8fd9\u6bb5\u5c31\u662f\u5728\u6c42m\n\nfor (register int j = i - m; j <= i; j++)\n{\n\tC[i] += A[j];\n}\n```\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u8ba9\u4ed6\u518d\u77ed\u4e00\u4e9b\u5462\uff1f\n\n\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8fd0\u7b97\u6bcf\u56de\u90fd\u662f\u75282\u8fdb\u884c\u64cd\u4f5c\u3002\u3002\u3002\n\n\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u6765\u89c2\u5bdf\u4e00\u4e0b\u4ed6\u4eec\u76842\u8fdb\u5236\uff1f\n\n4\u5c42\u6bcf\u5c42\u5404\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n(5)\u2081\u2080 = (0101)\u2082\n\n(2)\u2081\u2080 = (0010)\u2082\n\n(4)\u2081\u2080 = (0100)\u2082\n\n(8)\u2081\u2080 = (1000)\u2082\n\n\u90a3\u4e48\u6211\u4eec\u5728\u5206\u522b\u770b\u4e00\u4e0b\u4ed6\u4eec\u5bf9\u5e94\u7684A\uff1a\n\n(5)\u2081\u2080 = (0101)\u2082,(5)\u2081\u2080 = (0101)\u2082\n\n(2)\u2081\u2080 = (0010)\u2082,(1)\u2081\u2080 = (0001)\u2082,(2)\u2081\u2080 = (0010)\u2082\n\n(4)\u2081\u2080 = (0100)\u2082,(1)\u2081\u2080 = (0001)\u2082,(2)\u2081\u2080 = (0010)\u2082,(3)\u2081\u2080 = (0011)\u2082,(4)\u2081\u2080 = (0100)\u2082\n\n(8)\u2081\u2080 = (1000)\u2082,(1)\u2081\u2080 = (0001)\u2082,(2)\u2081\u2080 = (0010)\u2082,(3)\u2081\u2080 = (0011)\u2082,(4)\u2081\u2080 = (0100)\u2082,(5)\u2081\u2080 = (0101)\u2082,(6)\u2081\u2080 = (0110)\u2082,(7)\u2081\u2080 = (0111)\u2082,(8)\u2081\u2080 = (1000)\u2082\n\n\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u89c4\u5f8b\u3002\u3002\u3002\n\n\uff08\u556a\uff01\uff09\n\n\u54b3\u54b3\uff0c\u8fd9\u4e48\u770b\u5f53\u7136\u662f\u6ca1\u6709\u4ec0\u4e48\u89c4\u5f8b\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u522b\u7684\u65b9\u6cd5\u3002\u3002\u3002\n\n\u6bd4\u5982\u3002\u3002\u3002\n\n\ti&(-i)\n\n\u90a3\u4e48\u8fd9\u4e2a\u5bb6\u4f19\u7b97\u51fa\u6765\u662f\u4ec0\u4e48\u5462\n\n\u6211\u4eec\u77e5\u9053C++\u5728\u50a8\u5b58\u8d1f\u6570\u7684\u65f6\u5019\u662f\u6309\u7167\u8865\u7801\u5b58\u50a8\u7684\n\n\u4e3e\u4e2a\u6817\u5b50\uff0c(5)\u2081\u2080 = (0101)\u2082,\u90a3\u4e48(-5)\u2081\u2080 = (1011)\u2082\uff0c\u518d\u6309\u4f4d\u4e0e\u7684\u8bdd\uff0c\u7ed3\u679c\u5c31\u662f1\n\n\u540c\u7406(2)\u2081\u2080 = (0010)\u2082,\u5219(-2)\u2081\u2080 = (1110)\u2082,\u7ed3\u679c\u662f2\uff1b(4)\u2081\u2080 = (0100)\u2082,\u5219(-4)\u2081\u2080 = (1100)\u2082,\u7ed3\u679c\u662f3\uff1b(8)\u2081\u2080 = (1000)\u2082,\u5219(-8)\u2081\u2080 = (1000)\u2082,\u7ed3\u679c\u662f4\n\n\u800c\u89c2\u5bdf\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6b63\u597d\u662f\u4e4b\u524d\u7684m + 1\uff01\n\n~~\u53ef\u662f\u8fd9\u89c4\u5f8b\u76ee\u524d\u6ca1\u6709\u4ec0\u4e48\u7528~~\n\n\uff08\u556a\uff01\uff09\n\n## \u2460\u6784\u9020\n\n\u6ce8\u610f\u6211\u8fd9\u4e2a\u5730\u65b9\u6ca1\u6709\u8bf4\u5efa\u6811\uff0c\u662f\u56e0\u4e3a$\\color{red}\\text{\u6811\u72b6\u6570\u7ec4\u4e0d\u662f\u6811\u662f\u6570\u7ec4\uff01\uff01\uff01}$\n\n\u9996\u5148\u662f\u6211\u4eec\u7684\u7c7b\u578b\u5b9a\u4e49\uff1a\n\n```cpp\ntemplate <typename T1>\n\nclass TreeArray\t//\u8fd9\u4e2a\u5730\u65b9\u6211\u5c31\u662f\u7528\u7684class\u4e86\u3002\u3002\u3002\n{\n\tprivate:\n\t\t\n\t\tT1* array;\t\t//\u6570\u7ec4\u771f\u8eab\n\t\tint* size;\t\t//\u5927\u5c0f\u5b58\u597d\uff0c\u7528\u8d77\u6765\u65b9\u4fbf\n\t\t\n\t\tT1 LowerBit (const T1&);\t//LowerBit\u516c\u7528\u79c1\u6709\u65e0\u6240\u8c13\uff0c\u56e0\u4e3a\u7c7b\u5916\u6ca1\u6709\u9700\u8981\u5b83\u7684\u64cd\u4f5c\n\t\t\n\tpublic:\n\t\t\n\t\tTreeArray (const int&);\n\t\t~TreeArray ();\t//\u6784\u9020 && \u6790\u6784\u51fd\u6570\n\t\t\n\t\tvoid AddData (const int&, const T1&);\t//\u52a0\u503c\u7684\n\t\tT1 Insert(const int&);\t//\u67e5\u627e1 ~ k\u7684\u533a\u95f4\u548c\n\t\tT1 Insert(const int&, const int&);\t//\u67e5\u627el ~ r\u7684\u533a\u95f4\u548c\n};\n```\n\n\u8fd9\u4e2a\u6ca1\u6709\u53ef\u8bf4\u7684\u3002\u3002\u3002\u4e0b\u9762\u6784\u9020\u6811\u72b6\u6570\u7ec4\u7684\u90e8\u5206\n\n```cpp\ntemplate <typename T1>\n\nTreeArray <T1> :: TreeArray (const int& sz)\n{\n\tthis->array = new T1[sz + 1];\n\tthis->size = new int;\n\t*this->size = sz;\n\tT1* data = new T1;\t//\u7533\u8bf7\u7a7a\u95f4\u4ec0\u4e48\u7684\n\tfor (register int i = 1; i <= *this->size; i++)\n\t{\n\t\tcin >> *data;\t//\u8f93\u5165\u4e00\u4e2a\u503c\uff0c\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u5bf9\u7740\u8f93\u5165\n\t\tthis->AddData(i, *data);\t//\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u7684\u4e13\u5c5e\u52a0\u503c\u51fd\u6570\n\t} \n\tdelete data;\t//\u628adata\u5e9f\u6389\n}\n\ntemplate <typename T1>\n\nTreeArray <T1> :: ~TreeArray()\n{\n\tdelete[] this->array;\n\tdelete size;\t//\u9500\u6bc1\u7a7a\u95f4\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: LowerBit(const T1& t1)\n{\n\treturn t1 & (-t1);\t//\u6211\u4eec\u6240\u8bf4\u7684i&(-i)\n}\n\ntemplate <typename T1>\n\nvoid TreeArray <T1> :: AddData(const int& index, const T1& data)\n{\n\tfor (register int i = index; i <= *this->size; i += this->LowerBit(i))\t//\u6ce8\u610f\u5faa\u73af\u52a0\u7684\u503c\uff01\n\t{\n\t\tthis->array[i] += data;\n\t}\n}\n```\n\n\u8fd9\u91cc\u7684\u91cd\u70b9\u662f\u5728AddData\u51fd\u6570\u4e2d\u7684\u5faa\u73af\u8303\u56f4\u548c\u5faa\u73af\u52a0\u7684\u503c\uff01\n\n\u6211\u4eec\u4eceindex\u5f00\u59cb\uff0c\u56e0\u4e3a\u7528\u6bd4index\u5c0f\u7684\u503c\u4f5c\u4e0b\u6807\u65f6index\u4e0d\u53d7\u5f71\u54cd\uff0c~~\uff08\u53ef\u4ee5\u81ea\u5df1\u89c2\u5bdf\n\uff09~~\n\n\u800c+=LowerBit(i)\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u56de\u5230\u56fe\u4e2d\u89c2\u5bdf\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0eC[i]\u6240\u6709\u76f8\u5173\u7684C\u7684\u503c\uff0c\u6b63\u597d\u662f\u8fd9\u8d27\uff08\u5212\u6389\n\n\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u52a0\u7684LowerBit\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b65LowerBit(i)\u52a0\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4LowerBit\u6240\u52a0\u7684\u503c\u5e76\u4e0d\u4e00\u5b9a\n\n## \u2461\u67e5\u627e\n\n\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u67e5\u627e\u503c\u5c31\u4e0d\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u7b80\u5355\u4e86\u3002\u3002\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u6811\u72b6\u6570\u7ec4\u7684\u5047\u7684\u6811\u4e2d\u7684\u4e00\u4e9b\u8282\u70b9\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6c42i ~ j\u53ea\u80fd\u75281 ~ j\u51cf1 ~ i - 1\n\n\u90a3\u4e481 ~ j\u53c8\u600e\u4e48\u6c42\u5462\uff1f\n\n\uff08\u556a\uff01\uff09\n\n\u6839\u636e\u6211\u4eec\u5728\u4e0a\u9762\u52a0\u503c\u7684\u65f6\u5019\u7684\u4e00\u4e2a\u539f\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u4ece\u90a3\u4e2a\u539f\u7406\u4e0a\u9006\u63a8\uff0c\u4ece\u800c\u628a\u67e5\u8be21 ~ j\u8f6c\u5316\u6210\u67e5\u8be2\u5047\u7684\u8282\u70b9\u7684\u503c\n\n\u800c\u67e5\u8be2\u8fd9\u4e2a\u503c\u7684\u65f6\u5019\u6211\u4eec\u53c8\u4e0d\u5f97\u4e0d\u53bb\u67e5\u8be2\u4e0e\u5b83\u76f8\u5173\u7684\u5047\u7684\u8282\u70b9\u7684\u503c\n\n\u800c\u4e0e\u5b83\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u4f1a\u5f71\u54cd\u5b83\u7684\u503c\u7684\u8282\u70b9\uff0c\u5176\u5b9e\u5c31\u662f\u4e0d\u65ad\u5730\u5bf9\u4ed6-=LowerBit\uff0c\u4ece\u800c\u5f97\u51fa\u4ee3\u7801\n\n```cpp\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& index)\n{\n\tT1 ans = 0;\n\tint i = index;\n\twhile (i != 0)\n\t{\n\t\tans += this->array[i];\n\t\ti -= this->LowerBit(i);\n\t} \n\treturn ans;\n}\n```\n\n\u800c\u6211\u5728\u4e0a\u9762\u8bf4\u4e86\uff0ci ~ j\u7684\u503c\u5c31\u662f1 ~ j - 1 ~ i - 1\u7684\u503c\n\n\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u67e5\u8be2~~\uff08\u5176\u5b9e\u5c31\u662f\u6211\u61d2\u800c\u5df2~~\uff0c\u4e8e\u662f\u6211\u4eec\u518d\u91cd\u8f7d\u4e00\u4e0bInsert\n\n```cpp\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& from, const int& to)\n{\n\treturn this->Insert(to) - this->Insert(from - 1);\n}\n```\n\n\u7136\u540e\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u672c\u64cd\u4f5c\u5c31OK\u558f\uff01\n\n## \u2462\u6811\u72b6\u6570\u7ec4\u603b\u7ed3\n\n**\u6811\u72b6\u6570\u7ec4\u4e0d\u662f\u6811\u6811\u72b6\u6570\u7ec4\u4e0d\u662f\u6811\u6811\u72b6\u6570\u7ec4\u4e0d\u662f\u6811\uff01\uff01\uff01**\n\n\u4e0d\u5e26main\u7684\u4e07\u80fd\u6811\u72b6\u6570\u7ec4\u6a21\u677f\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T1>\n\nclass TreeArray\n{\n\tprivate:\n\t\t\n\t\tT1* array;\n\t\tint* size;\n\t\t\n\t\tT1 LowerBit (const T1&);\n\t\t\n\tpublic:\n\t\t\n\t\tTreeArray (const int&);\n\t\t~TreeArray ();\n\t\t\n\t\tvoid AddData (const int&, const T1&);\n\t\tT1 Insert(const int&);\n\t\tT1 Insert(const int&, const int&);\n};\n\ntemplate <typename T1>\n\nTreeArray <T1> :: TreeArray (const int& sz)\n{\n\tthis->array = new T1[sz + 1];\n\tthis->size = new int;\n\t*this->size = sz;\n\tT1* data = new T1;\n\tfor (register int i = 1; i <= *this->size; i++)\n\t{\n\t\tcin >> *data;\n\t\tthis->AddData(i, *data);\n\t} \n\tdelete data;\n}\n\ntemplate <typename T1>\n\nTreeArray <T1> :: ~TreeArray()\n{\n\tdelete[] this->array;\n\tdelete size;\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: LowerBit(const T1& t1)\n{\n\treturn t1 & (-t1);\n}\n\ntemplate <typename T1>\n\nvoid TreeArray <T1> :: AddData(const int& index, const T1& data)\n{\n\tfor (register int i = index; i <= *this->size; i += this->LowerBit(i))\n\t{\n\t\tthis->array[i] += data;\n\t}\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& index)\n{\n\tT1 ans = 0;\n\tint i = index;\n\twhile (i != 0)\n\t{\n\t\tans += this->array[i];\n\t\ti -= this->LowerBit(i);\n\t} \n\treturn ans;\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& from, const int& to)\n{\n\treturn this->Insert(to) - this->Insert(from - 1);\n}\n```\n\n\u98df\u7528\u65b9\u5f0f\uff1a\n\n\tTreeArray <\u7c7b\u578b\u540d> \u53d8\u91cf\u540d(n)\n\n\u5e26main\u51fd\u6570\u7684\u6811\u72b6\u6570\u7ec41 AC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T1>\n\nclass TreeArray\n{\n\tprivate:\n\t\t\n\t\tT1* array;\n\t\tint* size;\n\t\t\n\t\tT1 LowerBit (const T1&);\n\t\t\n\tpublic:\n\t\t\n\t\tTreeArray (const int&);\n\t\t~TreeArray ();\n\t\t\n\t\tvoid AddData (const int&, const T1&);\n\t\tT1 Insert(const int&);\n\t\tT1 Insert(const int&, const int&);\n};\n\nint main(int argc, char* argv[])\n{\n\tint n, m;\n\tcin >> n >> m;\n\tTreeArray <int> t(n);\n\tint cmd, x, y;\n\tfor (register int i = 0; i < m; i++)\n\t{\n\t\tcin >> cmd >> x >> y;\n\t\tif (cmd == 1)\n\t\t{\n\t\t\tt.AddData(x, y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << t.Insert(x, y) << endl;\n\t\t}\n\t} \n\treturn 0;\n}\n\ntemplate <typename T1>\n\nTreeArray <T1> :: TreeArray (const int& sz)\n{\n\tthis->array = new T1[sz + 1];\n\tthis->size = new int;\n\t*this->size = sz;\n\tT1* data = new T1;\n\tfor (register int i = 1; i <= *this->size; i++)\n\t{\n\t\tcin >> *data;\n\t\tthis->AddData(i, *data);\n\t} \n\tdelete data;\n}\n\ntemplate <typename T1>\n\nTreeArray <T1> :: ~TreeArray()\n{\n\tdelete[] this->array;\n\tdelete size;\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: LowerBit(const T1& t1)\n{\n\treturn t1 & (-t1);\n}\n\ntemplate <typename T1>\n\nvoid TreeArray <T1> :: AddData(const int& index, const T1& data)\n{\n\tfor (register int i = index; i <= *this->size; i += this->LowerBit(i))\n\t{\n\t\tthis->array[i] += data;\n\t}\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& index)\n{\n\tT1 ans = 0;\n\tint i = index;\n\twhile (i != 0)\n\t{\n\t\tans += this->array[i];\n\t\ti -= this->LowerBit(i);\n\t} \n\treturn ans;\n}\n\ntemplate <typename T1>\n\nT1 TreeArray <T1> :: Insert(const int& from, const int& to)\n{\n\treturn this->Insert(to) - this->Insert(from - 1);\n}\n```\n\n# \u2464\u603b\u7ed3\n\n\u8fd9\u4e24\u4e2a\u5bb6\u4f19\u5c31\u662f\u4e00\u822c\u7684\u533a\u95f4\u578b\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u8fa3~",
        "postTime": 1563866394,
        "uid": 213346,
        "name": "Null_Cat",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u5728\u5e8f\u5217\u4e0a\uff0c\u7b49\u4ef7\u4e8e\u5728\u94fe\u4e0a\u64cd\u4f5c\u3002  \n\u800c\u94fe\u5c31\u662f\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$\\texttt{Link-Cut Tree}$\u6765\u7ef4\u62a4\u3002  \n\u5bf9\u4e8e$\\texttt{access}$\u8fd9\u6837\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u5c31\u4e0d\u8bf4\u4e86\u3002  \n\u6211\u4eec\u8003\u8651\u600e\u4e48\u5b9e\u73b0\u94fe\u4e0a\u52a0\u4e00\u4e2a\u6570\u3002  \n\n\u6309\u7167\u5957\u8def\uff0c\u6211\u4eec\u8981\u7528\u4e00\u4e0b$\\texttt{split}$\u64cd\u4f5c\uff0c\u628a$u\\rightarrow v$\u7684\u8282\u70b9\u90fd\u641e\u5230\u4e00\u4e2a$\\texttt{splay}$\u91cc\u9762\u53bb\u3002  \n\u6b64\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728$v$\u8282\u70b9\u4e0a\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u64cd\u4f5c\u5c31\u7b97\u5b8c\u6210\u4e86\uff01\n\n\u4e3a\u4e86\u652f\u6301\u6253\u6807\u8bb0\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002  \n\u5728\u6bcf\u6b21$\\texttt{pushup}$\u65f6\uff0c\u5c06$u$\u7684\u5b50\u6811\u5927\u5c0f\u66f4\u65b0\u4e3a\u5176\u5de6\u53f3\u5b50\u6811\u4e4b\u548c\u518d$+1$\u5373\u53ef\u3002  \n\u6700\u540e\u5c31\u662f\u8981\u6ce8\u610f\uff0c\u5728$\\texttt{pushdown}$\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\u3002  \n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u505a\u5b8c\u5566qwq  \n\n$\\texttt{Code:}$\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#define N 100003\n#define int long long\n#define reg register\n#define ls son[u][0]\n#define rs son[u][1]\nusing namespace std;\n\nint a[N];\n\nstruct Link_Cut_Tree{\n    int fa[N],r[N],st[N],son[N][2];\n    int s[N],tag[N],size[N];\n    \n    inline bool notroot(int u){\n        return son[fa[u]][0]==u||son[fa[u]][1]==u;\n    }\n    \n    inline void pushup(int u){\n        s[u] = s[ls]+s[rs]+a[u];\n        size[u] = size[ls]+size[rs]+1;\n    }\n    \n    inline void pushr(int u){\n        swap(ls,rs);\n        r[u] ^= 1;\n    }\n    \n    inline void pusha(int u,int k){ //\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\n        a[u] += k;\n        s[u] += size[u]*k;\n        tag[u] += k;\n    }\n\n    inline void pushdown(int u){\n        if(tag[u]){\n            if(ls) pusha(ls,tag[u]);\n            if(rs) pusha(rs,tag[u]);\n            tag[u] = 0;\n        }\n        if(!r[u]) return;\n        if(ls) pushr(ls);\n        if(rs) pushr(rs);\n        r[u] = 0;\n    }\n    \n    inline void rotate(int x){\n        int y = fa[x],z = fa[y];\n        int k = son[y][1]==x,w = son[x][k^1];\n        if(notroot(y)) son[z][son[z][1]==y] = x;\n        son[x][k^1] = y;\n        son[y][k] = w;\n        if(w) fa[w] = y;\n        fa[y] = x,fa[x] = z;\n        pushup(y);\n    }\n    \n    inline void splay(int x){\n        int y = x,z = 0;\n        st[++z] = y;\n        while(notroot(y)) st[++z] = y = fa[y];\n        while(z) pushdown(st[z--]);\n        while(notroot(x)){\n            y = fa[x],z = fa[y];\n            if(notroot(y)){\n                if((son[y][1]==x)==(son[z][1]==y)) rotate(y);\n                else rotate(x);\n            }\n            rotate(x);\n        }\n        pushup(x);\n    }\n    \n    inline void access(int u){\n        for(int y=0;u;u=fa[u]){\n            splay(u);\n            rs = y;\n            pushup(u);\n            y = u;\n        }\n    }\n    \n    inline void makeroot(int u){\n        access(u),splay(u);\n        pushr(u);\n    }\n    \n    inline void split(int u,int v){\n        makeroot(u);\n        access(v),splay(v);\n    }\n    \n    inline void link(int u,int v){\n        makeroot(u);\n        fa[u] = v; //\u53ef\u4ee5\u4e0d\u7528\u5224,\u76f4\u63a5link\n    }\n    \n    inline int query(int u,int v){\n        split(u,v);\n        return s[v];\n    }\n    \n    inline void add(int u,int v,int k){\n        split(u,v);\n        pusha(v,k);\n    }\n}T;\n\nint n,q;\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\nsigned main(){\n    int op,u,v,k;\n    read(n),read(q);\n    for(reg int i=1;i<n;++i) T.link(i,i+1);\n    for(reg int i=1;i<=n;++i){\n        read(a[i]);\n        T.size[i] = 1; //\u6ce8\u610f\u521d\u59cb\u5316\u5b50\u6811\u5927\u5c0f\n    }\n    while(q--){\n        read(op),read(u),read(v);\n        if(op==1){\n            read(k);\n            T.add(u,v,k);\n        }else{\n            print(T.query(u,v));\n            putchar('\\n');\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1558247065,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "**upd 2019.05.25**\n\n\u672c\u6587\u6587\u5b57\u8f83\u591a\uff0c\u56fe\u7247\u6bd4\u8f83\u5c11  \n~~BTW\u7ebf\u6bb5\u6811\u672c\u8eab\u597d\u50cf\u662f\u4e2a\u6570\u636e\u7ed3\u6784~~  \n## 0.\u524d\u8a00  \n\u5f88\u591a\u4eba\u90fd\u662f\u5148\u5b66\u6811\u72b6\u6570\u7ec4\u518d\u5b66\u7ebf\u6bb5\u6811\u7684 \u5305\u62ec\u67d0\u672c\u901a\u4e5f\u628a\u6811\u72b6\u6570\u7ec4\u5199\u5728\u7ebf\u6bb5\u6811\u524d\u9762 \u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7b80\u5355\u800c\u4e14\u597d\u5199 \u786e\u5b9e \u4f46\u662f\u6211\u89c9\u5f97\u6811\u72b6\u6570\u7ec4\u7684\u601d\u60f3\u662f\u57fa\u4e8e\u7ebf\u6bb5\u6811\u7684 \u7ebf\u6bb5\u6811\u5176\u5b9e\u5e94\u8be5\u66f4\u57fa\u7840  \n## 1.\u6982\u5ff5\n~~\u5176\u5b9e\u8fd9\u4e2a\u6709\u70b9\u96be\u8bb2\u6e05\u695a~~  \n\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6709\u6839\u6811 \u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u70b9\u4fdd\u5b58\u7684\u662f\u4e00\u4e2a\u533a\u95f4 \u6839\u8282\u70b9\u7684\u533a\u95f4\u4e3a$[1,n]$  \n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 \u5b83\u53ef\u80fd\u662f\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00  \n- \u662f\u53f6\u5b50\u7ed3\u70b9  \n- \u67092\u4e2a\u513f\u5b50(\u5de6/\u53f3)  \n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \u82e5\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u4e3a$[l,r]$  \n- \u5f53$l==r$\u65f6 \u5b83\u662f\u53f6\u5b50\u7ed3\u70b9  \n- \u5426\u5219 \u8bbe\u533a\u95f4\u4e2d\u70b9\u4e3a$mid=(l+r)/2$ \u5b83\u7684\u5de6\u513f\u5b50\u533a\u95f4\u4e3a$[l,mid]$ \u53f3\u513f\u5b50\u533a\u95f4\u4e3a$[mid+1,r]$  \n**\u7ebf\u6bb5\u6811\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u6216\u8005\u6ee1\u4e8c\u53c9\u6811!**  \n\u4f46\u662f\u5b83\u4e00\u5b9a\u662f\u6ee1\u4e8c\u53c9\u6811\u7684\u4e00\u90e8\u5206 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u6ee1\u4e8c\u53c9\u6811\u6807\u8bb0\u70b9\u7684\u7f16\u53f7\u7684\u65b9\u6cd5  \n\u5373\u7f16\u53f7$id$\u7684\u8282\u70b9 \u5de6\u513f\u5b50\u7f16\u53f7$id*2$ \u53f3\u513f\u5b50\u7f16\u53f7$id*2+1$  \n\n\u4e0b\u9762\u662f\u4e00\u4e2an=6\u65f6\u7684\u7ebf\u6bb5\u6811 \u70b9\u7684\u7f16\u53f7\u5728\u70b9\u53f3\u8fb9  \n![](https://cdn.luogu.com.cn/upload/pic/58470.png)  \n\u533a\u95f4\u5bf9\u534a\u5206\u7684\u539f\u56e0 \u662f\u4e3a\u4e86\u4fdd\u8bc1\u6811\u9ad8\u5728$logn$\u7ea7\u522b\n\n## 2.\u5e94\u7528  \nwhat can it do  \n\u5728$logn$\u65f6\u95f4\u5185\n- \u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u7684\u4fe1\u606f(\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u6700\u5927\u503c,\u6700\u5c0f\u503c,\u548c)\n- \u4fee\u6539\u4e00\u4e2a\u533a\u95f4\u7684\u4fe1\u606f  \n\u5e76\u4e14\u53ef\u4ee5\u540c\u65f6\u7ef4\u62a4\u4e0d\u6b62\u4e00\u79cd\u4fe1\u606f\n\n## 3.\u5b9e\u73b0  \n\u5728\u8fd9\u91cc\u5b9e\u73b0\u7684\u662f\u533a\u95f4\u6c42\u548c\u529f\u80fd \u5176\u5b83\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u90e8\u5206\u51fd\u6570\u548c\u8bed\u53e5\u5b9e\u73b0 \u4f46\u662f\u6846\u67b6\u662f\u76f8\u540c\u7684  \n\n**\u8fd9\u91cc\u6211\u5148\u505a\u4e86\u4e09\u4e2adefine**  \n```cpp\n#define mid ((l + r) >> 1) // [l,r]\u4e2d\u70b9 \u5373 (l + r)/2\n#define lson (x << 1) // \u5de6\u513f\u5b50\u7f16\u53f7 x * 2 x\u4e3a\u5f85\u5904\u7406\u7ed3\u70b9\n#define rson ((x << 1) | 1) // \u53f3\u513f\u5b50\u7f16\u53f7 x * 2 + 1\n```\n\n### 1.\u5efa\u6811  \n\u4e8b\u5b9e\u4e0a\u5efa\u6811\u53ef\u4ee5\u88ab\u533a\u95f4\u4fee\u6539\u66ff\u4ee3 \u4f46\u662f\u8fd9\u6837\u4f1a\u6162\u5f88\u591a \u56e0\u4e3a\u5f80\u5168\u96f6\u7684\u6811\u4e0a\u4e00\u4e2a\u4e2a\u52a0\u6e7f$nlogn$\u7684  \n\u5efa\u6811build\u64cd\u4f5c\u5c31\u662f\u628a\u521d\u59cb\u6570\u7ec4\u653e\u5230\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\u91cc \u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u8ba1\u7b97\u51fa\u6765  \n\n\u5047\u8bbea\u6570\u7ec4\u662f\u539f\u6765\u6570\u7ec4  \n```cpp\nvoid build(int x,int l,int r){\n\tif(l == r){ val[x] = a[l]; return; }\n\tbuild(lson,l,mid); build(rson,mid + 1,r);\n\tval[x] = val[lson] + val[rson];\n}\n```  \n\u9012\u5f52\u76f4\u5230\u53f6\u5b50\u7ed3\u70b9 \u7136\u540e\u975e\u53f6\u5b50\u7ed3\u70b9 \u5148\u5904\u7406\u5de6\u53f3\u513f\u5b50 \u4e4b\u540e\u5b83\u7684\u503c\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u503c\u4e4b\u548c  \n**\u5176\u5b9e\u6700\u540e\u4e00\u53e5\u8bdd\u5e94\u8be5\u5199\u6210\u4e00\u4e2a\u51fd\u6570pushup(\u901a\u8fc7\u5de6\u53f3\u513f\u5b50\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u70b9\u4fe1\u606f) \u6211\u5728\u8fd9\u91cc\u6ca1\u6709\u5199\u51fd\u6570**\n### 2.\u533a\u95f4\u8be2\u95ee  \n\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u4e00\u4e2a\u533a\u95f4\u62c6\u6210\u4e00\u5b9a\u6570\u91cf\u7684\u533a\u95f4  \n\u6700\u540e\u7684\u7b54\u6848\u662f\u62c6\u6210\u7684\u533a\u95f4\u7684\u7b54\u6848\u4e4b\u548c  \n\u800c\u62c6\u6210\u7684\u6bcf\u4e00\u4e2a\u533a\u95f4\u662f\u7ebf\u6bb5\u6811\u67d0\u4e2a\u8282\u70b9\u7684\u8868\u793a\u7684\u8303\u56f4  \neg:  \n\u5f53n=6\u65f6\n```cpp\n[2,6]->[2,2]+[3,3]+[4,6]\n[1,5]->[1,3]+[4,5]\n```  \n\u62c6\u5b8c\u4ee5\u540e\u533a\u95f4\u6570\u91cf\u4e00\u5b9a\u662f\u81f3\u591a$logn$\u7ea7\u522b\u7684 \u8bc1\u660e\u5728\u540e\u9762  \n\n\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u5b9e\u73b0  \n\u4f46\u662f\u4e0d\u4e00\u5b9a\u662f\u5de6\u53f3\u513f\u5b50\u90fd\u8981\u7ee7\u7eed\u9012\u5f52  \n\u5047\u8bbe\u5e26\u67e5\u8be2\u533a\u95f4\u4e3a$[L,R]$\n- \u5982\u679c\u5f53\u524d\u5e26\u67e5\u8be2\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u5305\u542b\u5728\u5f85\u67e5\u8be2\u533a\u95f4\u5185 \u5b9a\u4e49\u8fd9\u4e2a\u8282\u70b9\u4e3a**\u5b8c\u6574\u8282\u70b9** \u5c06\u7b54\u6848\u52a0\u4e0a\u8be5\u5904\u7684\u503c \u4e0d\u7528\u7ee7\u7eed\u9012\u5f52\u4e86  \n- \u5982\u679c\u8be5\u8282\u70b9\u5de6\u513f\u5b50\u533a\u95f4\u548c$[L,R]$\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a \u5219\u9012\u5f52\u5de6\u5b50\u6811  \n- \u53f3\u513f\u5b50\u540c\u7406  \n\n\u4ee3\u7801:  \n```cpp\nLL query(int x,int l,int r,int L,int R){\n\t// l,r \u4e3ax\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u8303\u56f4 L,R\u4e3a\u5e26\u67e5\u8be2\u533a\u95f4\n\tif(L <= l && r <= R) return val[x];\n\tLL ret = 0; pushdown(x,l,r);\n\tif(L <= mid) ret += query(lson,l,mid,L,R);\n\tif(mid < R) ret += query(rson,mid + 1,r,L,R);\n\tval[x] = val[lson] + val[rson]; // \u5c31\u662fpushup\n\treturn ret;\n}\n```  \n**pushdown\u7684\u610f\u4e49\u4f1a\u5728\u4e0b\u6587\u4fee\u6539\u4e2d\u63d0\u5230**  \n\n\u590d\u6742\u5ea6\u8bc1\u660e(\u8fd9\u4e0d\u662f\u91cd\u70b9):  \n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u5c42\u81f3\u591a\u8bbf\u95ee4\u4e2a\u8282\u70b9  \n\u9996\u5148 \u53ea\u6709\u53ef\u80fd\u5728[L,R]\u7684\u4e24\u7aef\u51fa\u73b0\u975e\u5b8c\u6574\u8282\u70b9(\u5c31\u662f \u4e0d\u662f\u5b8c\u6574\u8282\u70b9\u7684\u70b9) \u6240\u4ee5\u6bcf\u4e00\u5c42\u81f3\u591a\u67092\u4e2a\u975e\u5b8c\u6574\u8282\u70b9  \n\u5b8c\u6574\u8282\u70b9\u4e00\u5b9a\u4e5f\u81f3\u591a\u53ea\u67092\u4e2a \u4e14\u4e3a\u975e\u5b8c\u6574\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9  \n\u5982\u679c\u5b58\u5728\u5176\u5b83\u7684\u5b8c\u6574\u8282\u70b9 \u5b83\u7684\u5144\u5f1f\u8282\u70b9\u4e5f\u4e00\u5b9a\u662f\u5b8c\u6574\u8282\u70b9  \n**\u8fd9\u6837\u7684\u8bdd\u8fd9\u4e24\u4e2a\u8282\u70b9\u5c31\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u5230 \u5b83\u4eec\u7684\u7236\u4eb2\u8282\u70b9\u5df2\u7ecf\u4e0d\u4f1a\u9012\u5f52\u4e0b\u53bb\u4e86**  \n\n~~\u4e8e\u662f\u7ebf\u6bb5\u6811\u5e38\u6570\u5c31\u5927\u4e86~~\n\n### 3.\u533a\u95f4\u4fee\u6539  \n\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u53eb\u505a\u6807\u8bb0(lazytag)\u7684\u4e1c\u897f  \n\u56e0\u4e3a\u533a\u95f4\u4fee\u6539\u662f\u9700\u8981\u4e00\u8def\u6539\u5230\u53f6\u5b50\u8282\u70b9\u7684 \u6240\u4ee5\u5982\u679c\u628a[1,n]\u4fee\u6539 **\u4f1a\u628a\u6574\u68f5\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u6539\u4e00\u904d** \u8fd9\u6837\u5c31\u65e0\u6cd5\u505a\u5230$logn$\u590d\u6742\u5ea6  \n\n\u6240\u4ee5 \u5f53\u6211\u4eec\u9762\u5bf9\u4e00\u4e2a\u5b8c\u6574\u8282\u70b9\u7684\u65f6\u5019 \u6211\u4eec\u53ef\u4ee5\u5148\u4fee\u6539\u8fd9\u4e2a\u5b8c\u6574\u8282\u70b9\u7684\u503c \u7136\u540e\u7ed9\u8fd9\u4e2a\u8282\u70b9**\u6253\u4e00\u4e2a\u6807\u8bb0** \u6807\u8bb0\u4ee3\u8868\u7684\u662f\u8fd9\u4e2a\u70b9\u7684**\u5de6\u53f3\u513f\u5b50\u9700\u8981\u4fee\u6539**\u7684\u91cf \u5c31\u662f\u8bf4\u5148\u6539\u4e86\u81ea\u5df1 \u7b49**\u8981\u7528\u5de6\u53f3\u513f\u5b50\u4e4b\u540e\u518d\u6539**\u5de6\u53f3\u513f\u5b50  \n\u6211\u4eec\u7ed9\u8fd9\u4e2a\u6807\u8bb0\u7684\u503c**\u52a0\u4e0a\u5f85\u4fee\u6539\u7684\u6570**(\u6bd4\u5982\u533a\u95f4+n\u5c31\u662f\u7ed9\u8fd9\u4e2a\u6807\u8bb0\u7684\u503c+n \u6807\u8bb0\u521d\u59cb\u503c\u4e3a0) \u7136\u540e\u4e0d\u9700\u8981\u518d\u9012\u5f52\u4e0b\u53bb \u5f53\u6211\u4eec\u4e0d\u53ef\u907f\u514d\u8981\u67e5\u8be2\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7684\u65f6\u5019 \u5c31\u628a\u8fd9\u4e2a\u6807\u8bb0\u901a\u8fc7\u4e00\u79cd\u65b9\u5f0f(pushdown\u51fd\u6570)\u4e0b\u4f20  \n\n\u6807\u8bb0\u610f\u4e49\u5728\u4e8e\u907f\u514d\u91cd\u590d\u8ba1\u7b97 \u53ef\u4ee5\u76f4\u63a5\u628a\u590d\u6742\u5ea6\u964d\u5230$logn$\u7ea7\u522b  \n\n\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u6216\u4fee\u6539\u8fd9\u4e2a\u70b9\u662f\u975e\u5b8c\u6574\u8282\u70b9 \u6211\u4eec\u9700\u8981\u6539\u5b83\u7684\u513f\u5b50\u8282\u70b9 \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981pushdown(\u6807\u8bb0\u4e0b\u4f20)\u4e86  \n\npushdown\u4e5f\u5f88\u7b80\u5355  \n\u5c31\u662f\u628atag\u4f20\u7ed9\u5de6\u53f3\u513f\u5b50 \u540c\u65f6\u6539\u6389\u5de6\u53f3\u513f\u5b50\u7684\u503c \u7136\u540e\u628a\u81ea\u5df1tag\u6e05\u6389  \npushdown\u7684\u5199\u6cd5\u5bf9\u4e8e\u4e0d\u540c\u7684\u9898\u76ee\u662f\u4e0d\u540c\u7684  \n\u5f53\u4e00\u4e2a\u8282\u70b9\u662f\u975e\u5b8c\u6574\u8282\u70b9\u65f6 \u5b83\u5c31\u5fc5\u987b\u4e0b\u4f20\u6807\u8bb0  \n\n\u4e3b\u4f53\u601d\u8def\u548c\u533a\u95f4\u67e5\u8be2\u4e00\u6837  \n\n```cpp\nvoid modify(int x,int l,int r,int L,int R,LL v){\n\tif(L <= l && r <= R){ apply(x,l,r,v); return; }\n    // \u5b8c\u6574\u8282\u70b9 \u4fee\u6539tag\u548c\u503c\n\tpushdown(x,l,r);\n\tif(L <= mid) modify(lson,l,mid,L,R,v);\n\tif(mid < R) modify(rson,mid + 1,r,L,R,v);\n\tval[x] = val[lson] + val[rson]; // \u8fd9\u662fpushup!!!\n}\n```  \napply\u51fd\u6570\u5373\u4e3a\u4fee\u6539\u8282\u70b9x  \n\u4fee\u6539\u7684\u65b9\u5f0f\u6839\u636e\u9898\u76ee\u800c\u5b9a  \n\n```cpp\nvoid apply(int x,int l,int r,int v){\n\tval[x] += (LL)(r - l + 1) * v; add[x] += v;\n}\n```\n\n\u653e\u4e0apushdown\u51fd\u6570  \n```cpp\nvoid pushdown(int x,int l,int r){\n\tif(!tag[x]) return;\n\tapply(lson,l,mid,tag[x]);\n\tapply(rson,mid + 1,r,tag[x]);\n\ttag[x] = 0;\n}\n```  \n\u4fee\u6539\u503c\u7684\u65f6\u5019 \u5c31\u662f\u52a0\u4e0a**\u6807\u8bb0\u6539\u53d8\u91cf**$*$**\u533a\u95f4\u957f\u5ea6**  \n### 4.\u603b\u7ed3  \n\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u6709\u53ef\u80fd\u6539\u52a8\u5de6\u53f3\u513f\u5b50\u503c(\u4efb\u4f55\u4fe1\u606f)\u7684\u64cd\u4f5c \u5728\u64cd\u4f5c\u7684\u6700\u540e\u90fd\u8981pushup(\u901a\u8fc7\u5de6\u53f3\u513f\u5b50\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u70b9\u4fe1\u606f)  \n\n**\u4ee3\u7801(P3372\u7ebf\u6bb5\u68111):**  \n\n\u91cc\u9762\u7684add\u5c31\u662ftag\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#define mid ((l + r) >> 1)\n#define lson (x << 1)\n#define rson ((x << 1) | 1)\nusing namespace std;\ntypedef long long LL;\n\nLL add[800005] = {0};\nLL val[800005] = {0};\nLL a[200005] = {0};\n\nvoid build(int x,int l,int r){\n\tif(l == r){ val[x] = a[l]; return; }\n\tbuild(lson,l,mid);\n\tbuild(rson,mid + 1,r);\n\tval[x] = val[lson] + val[rson];\n}\n\nvoid apply(int x,int l,int r,int v){\n\tval[x] += (LL)(r - l + 1) * v; add[x] += v;\n}\n\nvoid pushdown(int x,int l,int r){\n\tif(!add[x]) return;\n\tapply(lson,l,mid,add[x]);\n\tapply(rson,mid + 1,r,add[x]);\n\tadd[x] = 0;\n}\n\nvoid modify(int x,int l,int r,int L,int R,LL v){\n\tif(L <= l && r <= R){ apply(x,l,r,v); return; }\n\tpushdown(x,l,r);\n\tif(L <= mid) modify(lson,l,mid,L,R,v);\n\tif(R > mid) modify(rson,mid + 1,r,L,R,v);\n\tval[x] = val[lson] + val[rson];\n}\n\nint query(int x,int l,int r,int L,int R){\n\tif(L <= l && r <= R) return val[x];\n\tLL ret = 0;\n\tpushdown(x,l,r);\n\tif(L <= mid) ret += query(lson,l,mid,L,R);\n\tif(R > mid) ret += query(rson,mid + 1,r,L,R);\n\tval[x] = val[lson] + val[rson];\n\treturn ret;\n}\n\nint n,m,b,c,op;\nLL k;\n\nint main(){\n\tcin >> n >> m;\n\tfor(int i = 1;i <= n;i ++) cin >> a[i];\n\tbuild(1,1,n);\n\twhile(m --){\n\t\tcin >> op;\n\t\tif(op == 1){ cin >> b >> c >> k; modify(1,1,n,b,c,k); }\n\t\tif(op == 2){ cin >> b >> c; cout << query(1,1,n,b,c) << endl; }\n\t}\n\treturn 0;\n}\n```  \n## 4.\u603b\u7ed3  \n\u4e8b\u5b9e\u4e0a\u7ebf\u6bb5\u6811\u8981\u6539\u7684\u5c31apply\u548cpushup\n~~\u597d\u50cf\u6ca1\u4ec0\u4e48\u597d\u603b\u7ed3\u4e86~~  \n\u7ebf\u6bb5\u6811\u7684\u5e94\u7528\u8303\u56f4\u8fd8\u662f\u5f88\u5927\u7684 \u901a\u8fc7\u4fdd\u5b58\u4fe1\u606f \u4fe1\u606f\u4e0a\u4f20\u4e0b\u4f20\u7684\u4e0d\u540c\u5199\u6cd5 \u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u95ee\u9898  \n\u5e76\u4e14\u7ebf\u6bb5\u6811\u67e5\u8be2/\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a$logn$  \n\u7ebf\u6bb5\u6811\u7684\u5e94\u7528\u8303\u56f4\u4e0d\u5982\u5206\u5757\u5e7f \u4f46\u662f\u6bd4\u5206\u5757\u7684$n\\sqrt n$\u5feb  \n\u540c\u65f6\u7ebf\u6bb5\u6811\u4e8b\u5b9e\u4e0a\u5f88\u5bb9\u6613\u5b9e\u73b0  \n\u4e00\u822c\u591a\u6572\u51e0\u904d\u5c31\u53ef\u4ee5**5min**\u5de6\u53f3\u89e3\u51b3\u6a21\u677f  \n\u603b\u4e4b\u8fd8\u662f\u4e2a\u5f88\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784  \n\n\n\n\u597d\u7684 **\u6b64\u6587\u7ae0\u5b8c\u7ed3**",
        "postTime": 1557554556,
        "uid": 31440,
        "name": "installb",
        "ccfLevel": 8,
        "title": "[\u7b97\u6cd5\u7b14\u8bb0] \u7ebf\u6bb5\u6811"
    },
    {
        "content": "#### [P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problem/P3372)\n\n-------\n\n~~csp\u4e34\u8fd1\uff0c\u800c\u6211\u8fd8\u5728\u5b66\u7ebf\u6bb5\u6811\u2026\u2026~~\n\n\u5f88\u4e45\u4e4b\u524d\u5b66\u8fc7\u4e00\u6b21\uff0c\u4e0d\u80fd\u5b8c\u5168\u7406\u89e3\u3002\u8fd9\u6b21\u7ecf\u8fc7\u8001\u5e08\u548cGJC\u5927\u4f6c\u7684\u6307\u70b9\u7ec8\u4e8e\u7406\u89e3\u4e86\u3002\n\n\u5148\u95ee\u4e00\u4e2a\u95ee\u9898\uff1a\u4ec0\u4e48\u662f\u7ebf\u6bb5\u6811\uff1f\n\n#### \u7ebf\u6bb5 ![\u7ebf\u6bb5](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3940143960,214003229&fm=26&gp=0.jpg)\n\n#### \u6811\n![\u6811](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2530578244,2847401891&fm=26&gp=0.jpg)\n\n### \u4f5c\u7528\n\n\u5176\u5b9e\u7ebf\u6bb5\u6811\u5c31\u662f\u4e00\u4e2a\u9488\u5bf9\u533a\u95f4\u64cd\u4f5c\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5728\u73ed\u7ea7\u4e2d16\u523042\u53f7\u4e2d\uff0c\u8981\u627e\u51fa\u8eab\u9ad8\u6700\u9ad8\u7684\u4eba\u3002\u5982\u679c\u6709\u591a\u6b21\u8be2\u95ee\uff0c\u90a3\u4e48\u66b4\u529b\u660e\u663e\u662f\u8d85\u65f6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\u3002\n\n### \u5b9e\u73b0\n\n#### 1. \u6700\u7b80\u5355\u7684\u533a\u95f4\u6c42\u548c\n\n\u5148\u6765\u89e3\u51b3\u4e0b\u6700\u7b80\u5355\u7684\u533a\u95f4\u6c42\u548c\n\n\u7ebf\u6bb5\u6811\u5728\u8ba1\u7b97\u4e00\u4e2a\u533a\u95f4\u7684\u5408\u4e2d\uff0c\u91c7\u7528\u4e86\u4e00\u79cd\u4e8c\u5206\u7684\u601d\u60f3\u3002\u4e00\u4e2a\u533a\u95f4\uff0c\u5bf9\u534a\u5206\u4e3a\u4e24\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c06\u5de6\u533a\u95f4\u79f0\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\uff0c\u53f3\u533a\u95f4\u79f0\u4e3a\u53f3\u513f\u5b50\u3002\u8fd9\u4f4d\u53ef\u7231\u53ef\u4eb2\u7684\u7236\u4eb2\u7b49\u4e8e\u4ed6\u4e24\u4e2a\u513f\u5b50\u76f8\u52a0\u3002\n\n\u5f88\u4e0d\u5e78\uff0c\u4ed6\u7684\u513f\u5b50\u4eec\u592a\u5927\u4e86\uff0c\u8ba1\u7b97\u8d77\u6765\u7b80\u76f4\u548c\u4ed6\u4eec\u7684\u7236\u4eb2\u4e00\u6837\u56f0\u96be\u3002\u56e0\u6b64\u7ebf\u6bb5\u6811~~\u5f3a\u8feb~~\u4ed6\u4eec\u6bcf\u4eba\u518d\u5bf9\u534a\u5206\uff0c\u6bcf\u4eba\u53c8\u751f\u6210\u81ea\u5df1\u7684\u513f\u5b50\uff0c\u540c\u6837\u4ed6\u4eec\u90fd\u7b49\u4e8e\u81ea\u5df1\u7684\u4e24\u4e2a\u513f\u5b50\u76f8\u52a0\u3002\n\n\u5982\u6b64\u53cd\u590d\uff0c\u7ebf\u6bb5\u6811\u6e90\u8fdc\u6d41\u957f\uff0c\u751f\u751f\u4e0d\u606f\u3002\n\n\u4ee5\u6b64\uff0c\u751f\u6210\u4e00\u9897\u5bb6\u65cf\uff08\u7ebf\u6bb5\uff09\u6811\uff1a\n\n       1\n     /   \\\n    2     3\n   / \\   / \\\n  4   5 6   7\n  \n\u8fd9\u91cc\u6709\u4e24\u4e2a\u6027\u8d28\uff1a\n\n1.\u6bcf\u4e2a\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u7f16\u53f7\u3002\u8bbe\u4e00\u4e2a\u4eba\u7684\u7f16\u53f7\u4e3a n , \u4ed6\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7 2 * n , \u4ed6\u7684\u53f3\u513f\u5b50\u4e3a 2 * n + 1\n\n2.\u8f93\u5165\u65f6\uff0c\u8fd9\u9897\u6811\u6709\u70b9\u50cf\u5e7f\u641c\u7684\u987a\u5e8f\uff0c\u662f\u4e00\u5c42\u4e00\u5c42\u8f93\u5165\u8fdb\u53bb\u7684\uff0c\u4ee5\u6b64\u6211\u4eec\u53ea\u8981\u8bbe\u7f6e\u4e00\u4e2a tot \u53d8\u91cf\uff0c \u4ece 1 \u5f00\u59cb\u7ed9\u5bb6\u65cf\u7684\u65cf\u957f\uff0c\u7136\u540e\u6bcf\u6b21\u8f93\u5165 tot++ , \u4ee5\u6b64\u4f20\u4e0b\u53bb\u3002\n\n$\\mathfrak{Code}$ :\n\n```cpp\n\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint n,a[10004];\nint l,r,mid;\nint tot=0;\n\nstruct node \n{\n\tint l,r,v;   //\u5de6\u8fb9\u754c\u3001\u53f3\u8fb9\u754c\u3001\u81ea\u5df1\u7684\u7f16\u53f7 \n};\nnode e[40004];  //\u4e8c\u5206\u9700\u8981\u800c\u5916\u5f00\u56db\u500d\u7a7a\u95f4 \n\nvoid build(int root, int l, int r)\n{\n\te[root].l = l, e[root].r = r;\n\t\n\tif( l == r ) //\u5de6\u8fb9\u754c\u7b49\u4e8e\u53f3\u8fb9\u754c\uff0c\u8bf4\u660e\u4ed6\u6ca1\u6709\u513f\u5b50\uff0c\u56e0\u6b64\u8f93\u5165\u7ed9\u4ed6 \n\t{\n\t\te[root].v = a[++tot];   //\u8f93\u5165 \n\t\n\t\treturn;\n\t}\n\t\n\tint mid = (l+r)/2;   //\u533a\u5206\u5de6\u53f3\u513f\u5b50\u7684\u4e2d\u95f4\u63a5\u7ebf \n\t   \n\tbuild( 2*root, l, mid );   //\u5de6\u513f\u5b50 \n\t\n\tbuild( 2*root+1, mid+1, r );  //\u53f3\u513f\u5b50 \n\t\n\te[root].v = e[ 2*root ].v + e[ 2*root+1 ].v;  //\u6bcf\u4e2a\u4eba\u90fd\u7b49\u4e8e\u4ed6\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u76f8\u52a0 \n\t\n\t//cout << e[root].v << endl;\n}\n\nint find(int root, int l, int r)\n{\n\t//cout << root << \" \" << l <<\" \" << r <<endl;\n\t\n\tif( l>r ) return 0;   \n\t\n\tif( e[root].l == l && e[root].r == r ) return e[root].v;  //\u8bf4\u660e\u4ed6\u7684\u503c\u5df2\u7ecf\u7b97\u51fa\u6765\u4e86 \n\t\n\tint mid = ( e[root].l + e[root].r )/2;  //\u8fd9\u91cc\u5343\u4e07\u4e0d\u8981\u6253\u6210\u4e0a\u9762\u7684 int mid = (l+r)/2;\n\t\n\tif( r <= mid ) return find( root*2, l, r );   //\u8fd9\u91cc\u5f00\u59cb\u8ba1\u7b97 \n\t\n\telse if( mid < l ) return find( root*2+1, l, r );\n\t\n\telse\n\t{\n\t\treturn find( root*2, l, mid ) + find( root*2+1, mid+1, r );\n\t}\n}\n\nint main()\n{\n\tcin >> n;\n\t\n\tfor(int i=1; i<=n; i++) scanf( \"%d\", &a[i] );\n\t\n\tbuild(1, 1, n);\n\t\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tcin >> l >> r;\n\t\t\n\t\tcout << find( 1, l, r ) << endl;\n\t}\t\n\t\nreturn 0;\t\n}\n\n\n```\n\n\u6ce8\u610f\uff1a\n\n1. find \u51fd\u6570\u91cc int mid = ( e[root].l + e[root].r )/2;  //\u8fd9\u91cc\u5343\u4e07\u4e0d\u8981\u6253\u6210 build \u51fd\u6570\u91cc\u7684 int mid = (l+r)/2;\n\n2. \u8ba1\u7b97\u7684\u90e8\u5206\u5efa\u8bae\u624b\u753b\u4e00\u4e0b\n\n3. \u662f r <= mid \u800c\u4e0d\u662f r < mid\n\n\n#### 2. \u533a\u95f4\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u503c\n\n\u4e0e\u4e0a\u6587\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u533a\u95f4\u6c42\u548c\u6362\u6210\u627e\u51fa\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\n\n\n$\\mathfrak{Code}$:\n\n```cpp\n\n#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint n,Q;\nint a[50004];\nint l,r,mid;\nint tot=0;\n\nstruct node\n{\n\tint l,r,max_v,min_v;\n};\nnode e[200004];\n\nint find_max( int rt, int l, int r )\n{\n\tif( l>r ) return 0;\n\tif( e[rt].l == l && e[rt].r == r ) return e[rt].max_v;\n\t\n\tint mid = ( e[rt].l + e[rt].r )/2;\n\t\n\tif( r<=mid ) return find_max( rt*2, l, r );  \n\t\n\telse if( l>mid ) return find_max( rt*2+1, l, r );\n\t\n\telse return max( find_max( rt*2, l, mid ) , find_max( rt*2+1 , mid+1, r ) );\n}\n\nint find_min( int rt, int l, int r )\n{\n\tif( l>r ) return 0;\n\tif( e[rt].l == l && e[rt].r == r ) return e[rt].min_v;\n\t\n\tint mid = ( e[rt].l + e[rt].r )/2;\n\t\n\tif( r<=mid ) return find_min( rt*2, l, r );  \n\t\n\telse if( l>mid ) return find_min( rt*2+1, l, r );\n\t\n\telse return min( find_min( rt*2, l, mid ) , find_min( rt*2+1 , mid+1, r ) );\n}\n\nvoid build(int rt, int l, int r )\n{\n\tint mid = (l+r)/2;\n\te[rt].l = l, e[rt].r = r;\n\n\tif( l == r ) \n\t{\n\t\te[rt].max_v = a[++tot];\n\t\te[rt].min_v = e[rt].max_v;\n\t\treturn;\n\t}\n\t\n\tbuild( 2*rt, l, mid );\n\tbuild( 2*rt+1, mid+1, r );\n\t\n\te[rt].max_v = max( e[2*rt].max_v , e[2*rt+1].max_v );\n\te[rt].min_v = min( e[2*rt].min_v , e[2*rt+1].min_v );\n}\n\nint main()\n{\n\tcin >> n >> Q;\n\t\n\tfor(int i=1; i<=n; i++) scanf(\"%d\",&a[i]);\n\t\n\tbuild( 1, 1, n);\n\t\n\tfor(int i=1; i<=Q; i++)\n\t{\n\t\tscanf( \"%d%d\", &l,&r );\n\t\t\n\t\tprintf( \"%d\\n\",find_max(1,l,r) - find_min(1,l,r) );\n\t}\n\nreturn 0;\t\n}\n\n```\n------\n#### 3. \u8fd9\u9053\u9898\u76ee\u4e4b\u89e3\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u533a\u95f4\u6c42\u548c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u8bf4\u8bf4\u8f83\u96be\u7684\u533a\u95f4\u52a0\u3002\n\n\u5176\u5b9e\u91cd\u8981\u7684\u5c31\u4e24\u70b9\uff1a\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u6709n\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u90fd\u52a0k, \u90a3\u4e48\u6574\u4e2a\u533a\u95f4\u5c31\u52a0\u4e0a n*k\n\n2. \u8fd9\u4e2a\u7236\u4eb2\u52a0\u4e0a\u4e86\u591a\u5c11\u503c\uff0c\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u4f20\u7ed9\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\uff0c\u7136\u540e\u4ed6\u52a0\u7684\u503c\u6e05\u96f6\n\n\n$\\mathfrak{Code}$:\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring> \n# define ll long long \nusing namespace std;\n\nll n,a[100004],Q;\nll l,r,mid;\nll tot=0;\nll tem ,k;\n\nstruct node \n{\n\tll l,r,v;\n\tll jia;   //\u8fd9\u4e2a\u4e1c\u897f\u4ee3\u8868\u4ed6\u8981\u52a0\u7684\u503c \n};\nnode e[400004];\n\nvoid build(ll root, ll l, ll r)\n{\n\te[root].l = l, e[root].r = r;\n\t\n\tif( l == r ) \n\t{\n\t\te[root].v = a[++tot];\n\t\n\t\treturn;\n\t}\n\t\n\tll mid = (l+r)/2;\n\t\n\tbuild( 2*root, l, mid );\n\t\n\tbuild( 2*root+1, mid+1, r );\n\t\n\te[root].v = e[ 2*root ].v + e[ 2*root+1 ].v;\n\t\n\t//cout << e[root].v << endl;\n}\n\nvoid gengxin(ll root)\n{\n\tif( e[root].jia != 0 )\n\t{\n\t\te[root*2].v += (e[root*2].r - e[root*2].l + 1) * e[root].jia;\n\t\te[root*2+1].v += (e[root*2+1].r - e[root*2+1].l + 1) * e[root].jia;\n\t\t\n\t\te[root*2].jia += e[root].jia;    //\u8fd9\u4e2a\u7236\u4eb2\u52a0\u4e0a\u4e86\u591a\u5c11\u503c\uff0c\n\t\te[root*2+1].jia += e[root].jia;  //\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u4f20\u7ed9\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\n\t\te[root].jia = 0;                 //\u7136\u540e\u4ed6\u52a0\u7684\u503c\u6e05\u96f6\n\t}\n}\n\nvoid PLUS( ll root, ll l, ll r, ll k )\n{\n\t//cout << root << \" \" << l << \" \" << r << \"jhsdbfvhdsbhfdsbfb\";\n\t//cout << e[root].l << \" \" << e[root].r << endl;\n\tif( l>r ) return; \n\t\n\tif( e[root].l == l && e[root].r == r ) \n\t{\n\t\te[root].v += (e[root].r - e[root].l + 1) * k;\n\t\te[root].jia += k;\n\t\treturn;\n\t}\n\t\n\tgengxin( root );   //\u5b9e\u65f6\u66f4\u65b0 \n\t\n\tll mid = ( e[root].l + e[root].r )/2;\n\t\n\tif( r <= mid ) PLUS( root*2, l, r, k );\n\t\n\telse if( mid < l ) PLUS( root*2+1, l, r, k );\n\t\n\telse\n\t{\n\t\tPLUS( root*2, l, mid, k );\n\t\tPLUS( root*2+1, mid+1, r, k );\n\t}\n\t\n\te[root].v = e[root*2].v + e[root*2+1].v;\n}\n\nll find(ll root, ll l, ll r)\n{\n\t//cout << root << \" \" << l <<\" \" << r <<endl;\n\t\n\tif( l>r ) return 0;\n\t\n\tif( e[root].l == l && e[root].r == r ) \n\t{\n\t\treturn e[root].v;\n\t}\n\t\n\tgengxin( root );\n\t\n\tll mid = ( e[root].l + e[root].r )/2;\n\t\n\tif( r <= mid ) return find( root*2, l, r );\n\t\n\telse if( mid < l ) return find( root*2+1, l, r );\n\t\n\telse\n\t{\n\t\treturn find( root*2, l, mid ) + find( root*2+1, mid+1, r );\n\t}\n}\n\nint main()\n{\n\tcin >> n >> Q;\n\t\n\tfor(ll i=1; i<=n; i++) cin >> a[i];\n\t\n\tmemset( e, 0, sizeof(e) );\n\t\n\tbuild(1, 1, n );\n\t\n\tfor(ll i=1; i<=Q; i++)\n\t{\n\t\tcin >> tem;\n\t\t\n\t\tif( tem == 1 )\n\t\t{\n\t\t\tcin >> l >> r >> k;\n\t\t\t\n\t\t\tPLUS( 1, l, r, k ); \n\t\t}\n\t\t\n\t\telse if( tem == 2 )\n\t\t{\n\t\t\tcin >> l >> r;\n\t\t\tcout << find( 1, l, r ) << endl;\n\t\t}\n\t}\t\n\t\nreturn 0;\t\n}\n\n```\n----------\n\n\u52a0\u6cb9\u53ed\uff0c\u6ca1\u90a3\u4e48\u96be\u54d2\n\n\u6628\u5929\u51cc\u6668\u73a9\u4e09\u56fd\u6740\u88ab\u540c\u5b66\u4e3e\u62a5\uff0c\u660e\u5929\u53ef\u80fd\u8981\u5168\u6821\u51fa\u540d\uff0c\u5199\u7bc7\u9898\u89e3\u538b\u538b\u60ca\uff0c\u6c42\u8fc7QwQ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1573388739,
        "uid": 99403,
        "name": "\u4fe1\u8d56\u6ef4\u661f\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\uff08\u5bf9$Splay$\u8f7b\u8f66\u719f\u8def\u7684\u5404\u4f4d\u5927\u4f6c\u5c31\u53ef\u4ee5\u8df3\u8fc7\u672c\u5e16\u4e86\uff09  \n# \u524d\u7f6e\u77e5\u8bc6\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5982\u679c\u4e0d\u77e5\u9053$Splay$\u662f\u4ec0\u4e48\uff0c\u8bf7\u79fb\u6b65[\u6d1b\u8c37\u65e5\u62a5\u7b2c62\u671f](https://www.luogu.org/blog/wym483739/xue-tu-lun-ni-zhen-di-liao-xie-zui-duan-lu-ma-post)\u3002  \n# \u6b63\u6587\n  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f17\u6240\u5468\u77e5\uff08\u96fe\uff09\uff0c$Splay$\u6709\u7740\u5f3a\u5927\u7684\u5904\u7406\u533a\u95f4\u7684\u80fd\u529b\u3002\u7531\u6b64\u6211\u4eec\u5f88\u81ea\u7136\u5730\u60f3\u5230\u8ba9\u5b83\u6765\u5904\u7406\u7ecf\u5178\u7684$RSQ$\u95ee\u9898\uff08\u533a\u95f4\u548c\u95ee\u9898\uff09\u3002    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$Splay$\u8282\u70b9\u91cc\u9762**\u7ef4\u62a4**\u7684\u662f\u5b50\u6811\u7684\u6743\u503c\u548c\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\u6765\u8003\u8651\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u7b80\u5355\u6a21\u578b\uff1a  \n### \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4fee\u6539\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~~\u80a5\u80a0~~\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a\u5bf9\u5e94\u7684\u8282\u70b9\u62c9\u51fa\u6765~~\u4fee\u7406\u4e00\u901a~~\u4fee\u6539\u5b58\u7684\u6743\u503c\u5373\u53ef\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u67e5\u8be2\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4ee5\u4e0b\u5047\u8bbe\u8fd9\u4e2a\u67e5\u8be2\u7684\u533a\u95f4\u4e3a$[l,r](1\\leq l\\leq r\\leq n,l,r,n\\in N_+)$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5728\u5e8f\u5217\u4e0a\uff0c$[l,r]=(l-1,r+1)$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u5982\u6211\u4eec\u628a$l-1$$splay$\u5230\u6839\uff0c\u7136\u540e\u628a$r+1$$splay$\u5230\u6839\u7684\u513f\u5b50\uff0c\u8fd9\u6837$r+1$\u7684\u5de6\u513f\u5b50\u5c31\u5fc5\u7136\u662f\u533a\u95f4$[l,r]$\uff0c\u6240\u4ee5$r+1$\u7684\u5de6\u513f\u5b50\u7ef4\u62a4\u7684\u5b50\u6811\u6743\u503c\u548c\u4e5f\u5c31\u662f\u533a\u95f4\u548c\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u770b\u56fe\u8bf4\u660e\u4e00\u5207\uff08~~\u4e0d\u597d\u610f\u601d\u662f\u4ece\u6d1b\u8c37\u65e5\u62a5\u4e0a\u9762\u62a0\u4e0b\u6765\u7684~~\uff09\uff1a \n![Splay\u533a\u95f4](https://inf.tiger0132.tk/2018/07/19/splay-notes/reverse.svg)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u53e6\u5916\uff0c\u4e3a\u4e86\u907f\u514d\u5728\u5904\u7406\u533a\u95f4\u7684\u8fb9\u754c\u60c5\u51b5\u7684\u65f6\u5019\u7ffb\u8f66\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u65b0\u5efa\u4e24\u4e2a\u201c\u54e8\u5175\u201d\u8282\u70b9\uff08\u5c31\u50cf$zkw$\u7ebf\u6bb5\u6811\u4e00\u6837\uff09\uff0c\u6743\u503c\u5747\u4e3a$0$\u3002\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u8fb9\u754c\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5c31\u6b64\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\u5c31\u88ab\u6211\u4eec\u8f7b\u677e\u5730\u89e3\u51b3\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f8b\u9898\u89c1[P3372 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1](https://www.luogu.org/problem/P3374)  \u3002\uff08\u7531\u4e8e~~\u6211\u7684~~$Splay$\u6709\u5e38\u6570\u95ee\u9898\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u9700\u8981\u5f00$O2$\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4ee3\u7801\u5982\u4e0b\uff1a  \n```cpp\n#include <cstdio>\n\nconst int MAXN = 500005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nint ch[MAXN][2], par[MAXN], cnt[MAXN], s[MAXN], key[MAXN], val[MAXN];\nint N, M, rt = 0, len = 0;\n\nint chk( const int x )\n{\n\treturn ch[par[x]][1] == x;\n}\n\nvoid pushup( const int x )\n{\n\ts[x] = s[ch[x][0]] + s[ch[x][1]] + cnt[x] * val[x];\n}\n\nvoid rotate( const int x )\n{\n\tint y = par[x], z = par[y], side = chk( x ), son = ch[x][! side];\n\tif( y ) ch[y][side] = son;\n\tif( son ) par[son] = y;\n\tif( z ) ch[z][chk( y )] = x;\n\tif( x ) par[x] = z;\n\tif( x ) ch[x][! side] = y;\n\t par[y] = x;\n\tpushup( y ), pushup( x );\n}\n\nvoid splay( const int x, const int tar = 0 )\n{\n\tint y, z;\n\twhile( ( y = par[x] ) ^ tar )\n\t{\n\t\tz = par[y];\n\t\tif( z ^ tar )\n\t\t{\n\t\t\tif( chk( y ) == chk( x ) ) rotate( y );\n\t\t\telse rotate( x );\n\t\t}\n\t\trotate( x );\n\t}\n\tif( ! tar ) rt = x;\n}\n\nvoid find( const int nKey )\n{\n\tif( ! rt ) return;\n\tint p = rt;\n\twhile( ch[p][nKey > key[p]] && nKey ^ key[p] )\n\t{\n\t\tp = ch[p][nKey > key[p]];\n\t}\n\tsplay( p );\n\treturn;\n}\n\nvoid insert( const int nKey, const int nVal )\n{\n\tint p = rt, fa = 0;\n\twhile( p && nKey ^ key[p] )\n\t{\n\t\tfa = p;\n\t\tp = ch[p][nKey > key[p]];\n\t}\n\tif( p ) cnt[p] ++;\n\telse\n\t{\n\t\tp = ++len;\n\t\tif( p == 1 ) rt = p;\n\t\tif( fa ) par[p] = fa, ch[fa][nKey > key[fa]] = p;\n\t\tch[p][0] = ch[p][1] = 0;\n\t\tcnt[p] = 1, key[p] = nKey, val[p] = nVal;\n\t}\n\tpushup( p );\n\tsplay( p );\n}\n\n//\u6b63\u7d27\u7684Splay\n\nvoid update( const int nKey, const int addVal )\n{\n\tfind( nKey );\n\tif( key[rt] ^ nKey ) return;\n\tval[rt] += addVal;\n\tpushup( rt );\n}\n\nint query( const int segL, const int segR )\n{\n\tint ll = segL, rr = segR + 2;\n\tsplay( ll ), splay( rr, ll );\n\treturn s[ch[rr][! chk( rr )]];\n}\n\n//\u4fee\u6539\u4e0e\u67e5\u8be2\n\nint main()\n{\n\tint v;\n\tread( N ), read( M );\n\tinsert( 0, 0 );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tread( v );\n\t\tinsert( i, v );\n\t}\n\tinsert( N + 1, 0 );\n    //\u5728\u5faa\u73af\u5916\u7684insert\u5c31\u662f\u5728\u65b0\u5efa\u201c\u54e8\u5175\u201d\n\tint op, x, y;\n\twhile( M -- )\n\t{\n\t\tread( op );\n\t\tread( x ), read( y );\n\t\tif( op == 1 )\n\t\t{\n\t\t\tupdate( x, y );\n\t\t}\n\t\telse\n\t\t{\n\t\t\twrite( query( x, y ) ), putchar( '\\n' );\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7531\u4e8e\u8fd9\u4e2a\u7684\u95ee\u9898\u67e5\u8be2\u548c\u5355\u70b9\u4fee\u6539\u7684\u60c5\u51b5\u6ca1\u6709\u533a\u522b\uff0c\u6240\u4ee5\u67e5\u8be2\u90e8\u5206\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\u8fd9\u4e3b\u8c08\u4fee\u6539\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4fee\u6539\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\u6309\u7167\u67e5\u8be2\u7684\u65b9\u6cd5\u628a\u533a\u95f4\u7ed9$splay$\u51fa\u6765\u3002\u6a21\u4eff\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u533a\u95f4\u6253\u6807\u8bb0\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u600e\u4e48\u6253\u5462\uff1f  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u597d\u95ee\u9898\uff01\uff08\u5927\u96fe\uff09\u6211\u4eec\u5148\u5bf9\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u5b50\u6811\u7684\u6839\u4e0a\u6807\u8bb0\u3002\u5728\u4ec0\u4e48\u65f6\u5019\u4e0b\u4f20\u6807\u8bb0\u5462\uff1f\u8fd9\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff0c\u5373\u2014\u2014  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5f53\u7236\u5b50\u5173\u7cfb\u5373\u5c06\u6539\u53d8\u65f6\uff0c\u5c31\u4e00\u5b9a\u8981\u5148\u4e0b\u4f20\u7236\u4eb2\u4e0a\u9762\u7684\u61d2\u6807\u8bb0\uff01**  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~~\u7136\u540e\u9664\u4e86\u8fd9\u4e2a\u539f\u5219\uff0c\u5c31\u6ca1\u4ec0\u4e48\u53ef\u5199\u7684\u4e86~~  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u53e6\u5916\uff0c\u8bb0\u5f97\u5728$pushup$\u7684\u65f6\u5019\u4e5f\u8981\u6ce8\u610f\u4e00\u4e0b\u61d2\u6807\u8bb0\u7684\u5f71\u54cd\u54df\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f8b\u9898\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problem/P3372)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2](https://www.luogu.org/problem/P3373)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u53c2\u8003\u4ee3\u7801\uff1a\uff08\u53ea\u6709\u7b2c\u4e00\u9053\u4f8b\u9898\u7684\uff09  \n```cpp\n#include <cstdio>\n\ntypedef long long LL;\n\nconst int MAXN = 500005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nLL s[MAXN], val[MAXN], lazy[MAXN];\nint ch[MAXN][2], par[MAXN], cnt[MAXN], key[MAXN], siz[MAXN];\nint N, M, rt = 0, len = 0;\n\nint chk( const int x )\n{\n\treturn ch[par[x]][1] == x;\n}\n\nvoid pushup( const int x )\n{\n\tsiz[x] = siz[ch[x][0]] + siz[ch[x][1]] + cnt[x];\n\ts[x] = s[ch[x][0]] + s[ch[x][1]] + cnt[x] * val[x] + lazy[x] * siz[x];\n    //\u7528\u61d2\u6807\u8bb0\u4fee\u6b63\n}\n\nvoid pushdown( const int x )\n{\n\tif( x && lazy[x] )\n\t{\n\t\tval[x] += lazy[x];\n\t\tif( ch[x][0] ) lazy[ch[x][0]] += lazy[x];\n\t\tif( ch[x][1] ) lazy[ch[x][1]] += lazy[x];\n\t\tlazy[x] = 0;\n\t\tpushup( ch[x][0] );\n\t\tpushup( ch[x][1] );\n\t\tpushup( x );\n        //\u8bb0\u5f97\u968f\u65f6pushup\uff01\n\t}\n}\n\nvoid rotate( const int x )\n{\n\tint y = par[x], z = par[y], side = chk( x ), son = ch[x][! side];\n\tpushdown( z );\n\tpushdown( y );\n\tpushdown( x );\n    //\u5148pushdown\u518d\u65cb\u8f6c\n\tif( z ) ch[z][chk( y )] = x;\n\tif( y ) ch[y][side] = son, par[y] = x;\n\tif( son ) par[son] = y;\n\tpar[x] = z, ch[x][! side] = y;\n\tpushup( y );\n\tpushup( x );\n\tpushup( z );\n}\n\nvoid splay( const int x, const int tar = 0 )\n{\n\tint y, z;\n\twhile( ( y = par[x] ) ^ tar )\n\t{\n\t\tz = par[y];\n\t\tif( z ^ tar )\n\t\t{\n\t\t\tif( chk( y ) == chk( x ) ) rotate( y );\n\t\t\telse rotate( x );\n\t\t}\n\t\trotate( x );\n\t}\n\tif( ! tar ) rt = x;\n}\n\nvoid find( const int nKey )\n{\n\tif( ! rt ) return;\n\tint p = rt;\n\twhile( ch[p][nKey > key[p]] && nKey ^ key[p] )\n\t{\n\t\tp = ch[p][nKey > key[p]];\n\t}\n\tsplay( p );\n\treturn;\n}\n\nvoid insert( const int nKey, const int nVal )\n{\n\tint p = rt, fa = 0;\n\twhile( p && nKey ^ key[p] )\n\t{\n\t\tfa = p;\n\t\tp = ch[p][nKey > key[p]];\n\t}\n\tif( p ) cnt[p] ++;\n\telse\n\t{\n\t\tp = ++len;\n\t\tif( p == 1 ) rt = p;\n\t\tif( fa ) par[p] = fa, ch[fa][nKey > key[fa]] = p;\n\t\tch[p][0] = ch[p][1] = 0;\n\t\tcnt[p] = 1, key[p] = nKey, val[p] = nVal;\n\t}\n\tpushup( p );\n\tsplay( p );\n}\n\nvoid update( const int segL, const int segR, const LL addVal )\n{\n\tint ll = segL, rr = segR + 2;\n\tsplay( ll ), splay( rr, ll );\n\tlazy[ch[rr][! chk( rr )]] += addVal;\n\tpushup( ch[rr][! chk( rr )] );\n}\n\nLL query( const int segL, const int segR )\n{\n\tint ll = segL, rr = segR + 2;\n\tsplay( ll ), splay( rr, ll );\n\tpushup( ch[rr][! chk( rr )] );\n\treturn s[ch[rr][! chk( rr )]];\n}\n\nint main()\n{\n\tint v;\n\tread( N ), read( M );\n\tinsert( 0, 0 );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tread( v );\n\t\tinsert( i, v );\n\t}\n\tinsert( N + 1, 0 );\n\tint op, x, y;\n\twhile( M -- )\n\t{\n\t\tread( op );\n\t\tread( x ), read( y );\n\t\tif( op == 1 )\n\t\t{\n\t\t\tread( v );\n\t\t\tupdate( x, y, v );\n\t\t}\n\t\telse\n\t\t{\n\t\t\twrite( query( x, y ) ), putchar( '\\n' );\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1565244549,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "Splay\u8fd0\u7528\u2014\u2014\u533a\u95f4\u548c"
    },
    {
        "content": "## \u65b0\u4eba\u849f\u84bb\u524d\u6765\u6c34\u4e00\u6b21\u535a\u5ba2\nemmmmm\u7ebf\u6bb5\u6811\u771f\u662f\u4e2a~~\u8017\u5934\u53d1\u7684~~\u597d\u4e1c\u897f\u3002  \n\u8bdd\u4e0d\u591a\u8bf4\u4e0a\u4ee3\u7801\u3010\u8bed\u6587\u5dee\u7684555\u3011\t\n#### \u5934\u6587\u4ef6\u53ca\u5b9a\u4e49\u7b49\n```cpp\n//\u5176\u5b9e\u7528\u4e0d\u5230\u8fd9\u4e48\u591a\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<ctime>\n#define N 100010\nusing namespace std;\n#define ll  long long \n#define ill inline long long\nll n,m,a,b,c,f;//\u4e0d\u89e3\u91ca\nll tr[N<<1],//\u672c\u4f53\nR[N<<1],L[N<<1],//\u5de6\u53f3\u5b50\u6811\nLazy[N<<1],//\u61d2\u6807\ncnt,root,now;//\u8282\u70b9\u4e2a\u6570\uff0c\u6839\u8282\u70b9\uff0c\u5f53\u524d\u8282\u70b9\n//\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u4e00\u822c\u4e8c\u500d\u5373\u53ef\u3010\u542c\u8bf4\u9759\u6001\u5f00\u70b9\u8981\u56db\u500d\u3011\nll tp;//\u5b58\u50a8\u67d0\u4e9b\u4e34\u65f6\u53d8\u91cf\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700\n```\n#### \u5355\u70b9\u63d2\u5165\u3010\u53ef\u4ee5\u5f53\u505a\u5efa\u6811\u4f7f\u7528\u3011\uff08insert_single\uff09\n\t\t\u4ece\u4e0a\u5230\u4e0b\u6bcf\u4e00\u4e2a\u5305\u542b\u4fee\u6539\u503c\u7684\u533a\u95f4\u5747\u9700\u8981\u4fee\u6539\u3002\n```cpp\nill insert_sgl(ll &now,ll l,ll r,ll nu,ll po)\n//num(\u63d2\u5165\u503c),position(\u63d2\u5165\u4f4d\u7f6e)\n{\n    if(!now)now=++cnt;\n    tr[now]+=nu;if(!(r-l))return nu;\n    ll mid=(l+r)>>1;\n    if(po<=mid)return insert_sgl(L[now],l,mid,nu,po);\n    else return insert_sgl(R[now],mid+1,r,nu,po);\n}\n```\n#### \u533a\u95f4\u63d2\u5165\uff08insert_interval\uff09\n```cpp\nill insert_ivl(ll &now,ll l,ll r,ll nu,ll pl,ll pr)\n{\n    if(now==0)now=++cnt;\n    if(pl<=l&&pr>=r)//\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5c5e\u4e8e\u67e5\u8be2\u533a\u95f4\u65f6\n\t{tr[now]+=nu*(r-l+1);//\u533a\u95f4\u957f\u5ea6=\u53f3\u7aef\u70b9-\u5de6\u7aef\u7684+1\uff1b\n\tLazy[now]+=nu;//\u6253\u4e0alazytag\n    return nu;}\n\tpushdown(now,l,r);//\u987a\u624b\u4e0b\u63a8\n    ll mid=(l+r)>>1;\n    if(pl<=mid)  insert_ivl(L[now],l,mid,nu,pl,pr);\n    if(pr>mid) insert_ivl(R[now],mid+1,r,nu,pl,pr);\n    pushup(now);\n\treturn nu;\n}\n```\n## \u7ebf\u6bb5\u6811\u7684\u7cbe\u9ad3\u64cd\u4f5c\u6765\u4e86\uff01\n\n\u5148\u4ecb\u7ecd\u4e0b\u61d2\u4eba\u6807\u8bb0\uff1a\t\n\u6240\u8c13\u61d2\u4eba\u6807\u8bb0\u5176\u5b9e\u662f\u4e00\u79cd\u5ef6\u8fdf\u6027\u8d28\u7684\u64cd\u4f5c~~\u7528\u6765\u663e\u793a\u81ea\u5df1\u4e0e\u4f17\u4e0d\u540c~~ \uff0c\u628a\u6240\u6709\u7684\u4fee\u6539\u64cd\u4f5c\u5806\u79ef\u8d77\u6765\uff0c\u7b49\u5230\u67e5\u8be2\u7684\u65f6\u5019\u7edf\u4e00\u5b8c\u6210~~\u50cf\u4e0d\u50cf\u5f00\u5b66\u524d\u4e00\u665a\u4e0a\u7684\u4f60~~\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u8f85\uff08zhong\uff09\u52a9\uff08yao\uff09\u51fd\u6570\uff1a\u4e0b\u63a8\uff08pushdown\uff09,\u4e0a\u62c9\uff08pushup\uff09\u64cd\u4f5c;\t\n```cpp\nill pushdown(ll& now,ll l,ll r)//\u4e0b\u63a8\n//\u628a\u81ea\u5df1\u7684lazytag\u4e0b\u53d1\u7ed9\u5de6\u53f3\u513f\u5b50\uff0c\u5e76\u6e05\u9664\u6807\u8bb0\n{\n\tif(Lazy[now])\n\t{\n\t\tll mid=(l+r)>>1;\n\t\tif(L[now]==0)L[now]=++cnt;//\u52a8\u6001\u5f00\u70b9\u64cd\u4f5c\n        Lazy[L[now]]+=Lazy[now];\n\t\ttr[L[now]]+=Lazy[now]*(mid-l+1);\n        //\u6807\u8bb0\u6253\u5728\u54ea\uff0c\u533a\u95f4\u5c31\u66f4\u65b0\u5230\u54ea\n\t\tif(R[now]==0)R[now]=++cnt;\n        Lazy[R[now]]+=Lazy[now];\n\t\ttr[R[now]]+=Lazy[now]*(r-mid);\n        //\u6709\u6807\u8bb0\u7684\u533a\u95f4\u4e00\u5b9a\u662f\u8fd0\u7b97\u8fc7\u7684\n\t\tLazy[now]=0;\n\t}\n\treturn now;\n}\n\nill pushup(ll &now)\n{\n\treturn tr[now]=tr[L[now]]+tr[R[now]];\n} \n//\u4e2a\u4eba\u89c9\u5f97\u8fd9\u4e2a\u5b8c\u5168\u53ef\u4ee5\u5b8f\u5b9a\u4e49\u6216\u8005\u4e00\u884c\u4ee3\u7801\u5199\u5728\u7a0b\u5e8f\u540e\uff0c\n//\u4f46\u4e3a\u4e86\u4e0d\u8ba9\u4e0b\u63a8\u5355\u7740\u3010\u8bef\u3011\uff0c\u6545\u5199\u5728\u8fd9\u91cc\u535a\u541b\u4e00\u7b11\u3002\n```\npushdown\u64cd\u4f5c\u53d1\u751f\u5728\u4fee\u6539\u64cd\u4f5c\u6700\u524d\uff0cpushup\u64cd\u4f5c\u53d1\u751f\u5728\u4fee\u6539\u64cd\u4f5c\u6700\u540e\u3002\uff08\u6709\u70b9\u7c7b\u4f3c\u9006\u64cd\u4f5c\uff09\uff1f\n#### \u533a\u95f4\u67e5\u8be2\uff08query_interval\uff09\n\u67e5\u8be2\u65f6\u8bb0\u5f97\u8981\u987a\u624b\u4e0b\u63a8\u3002\n```cpp\nill query_ivl(ll &now,ll l,ll r,ll ql,ll qr)\n{\n    if(l>=ql&&r<=qr)return tr[now];\n    //\u5982\u679c\u533a\u95f4\u5b8c\u5168\u88ab\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\u5219\u5fc5\u7136\u88ab\u66f4\u65b0\u8fc7\uff0c\n    //\u53ef\u76f4\u63a5\u8fd4\u56de\n    pushdown(now,l,r);\n    ll mid=(l+r)>>1;\n    ll ls=0;\n    if(ql<=mid) ls+=query_ivl(L[now],l,mid,ql,qr);\n    if(qr>mid) ls+=query_ivl(R[now],mid+1,r,ql,qr);\n    return ls;\n}\n```\n#### \u4e3b\u7a0b\u5e8f\n```cpp\nint main()\n{\n    scanf(\"%lld%lld\",&n,&m);\n    for(ll i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&tp);\n        insert_sgl(root,1,n,tp,i);//\u4e00\u5207\u90fd\u8981\u4ece\u5934\u6765\n    }\n    for(ll i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&f);\n        if(f==1)\n        {\n            scanf(\"%lld%lld%lld\",&a,&b,&c);\n            insert_ivl(root,1,n,c,a,b);\n        }\n        if(f==2)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            printf(\"%lld\\n\",query_ivl(root,1,n,a,b));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1538659145,
        "uid": 113688,
        "name": "wcr20020327",
        "ccfLevel": 4,
        "title": "\u65b0\u4eba\u7684\u7b2c\u4e00\u6b21blog\u2014\u2014\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u662f\u53ef\u4ee5\u7528\u5206\u5757\u6c34\u8fc7\u53bb\u7684\n\n1.\u533a\u95f4\u548c\n\n\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u533a\u95f4[L,R]\n\n\u5047\u5982LR\u5728\u4e00\u4e2a\u5757\u5185\uff0c\u76f4\u63a5\u66b4\u529b\u52a0\n\n\u5047\u5982\u4e0d\u5728\u4e00\u4e2a\u5757\u5185\uff0c\u4f1a\u5206\u6210\u4e24\u79cd\u533a\u95f4\n\n ![](https://cdn.luogu.com.cn/upload/pic/4622.png) \n\n\u4e00\u79cd\u662f\u6a58\u8272\u7684\uff0c\u4e00\u79cd\u662f\u7ea2\u8272\u7684\u3002\n\n\u6a58\u8272\u7684\u76f4\u63a5\u66b4\u529b\uff01\n\n```cpp\nfor (int i=L;i<=r[belong[L]];i++)\n        ans+=a[i];\nfor (int i=l[belong[R]];i<=R;i++)\n        ans+=a[i];\n```\n\u7ea2\u8272\u7684\u7edf\u8ba1\u4e00\u4e0b\u5757\u503c\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\nfor (int i=belong[L]+1;i<belong[R];i++)\n        ans+=d[i];\n```\n2.\u533a\u95f4\u52a0\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u52a0\u4e0a\u4e00\u4e2amark\uff0c\u5047\u5982\u8981\u7528\u8fd9\u4e2a\u5757\u7684\u8bdd\uff0c\u5148\u628amark\u52a0\u4e0a\uff0c\u518d\u64cd\u4f5c\u3002\n\n\u60f3\u5b66\u4e60\u66f4\u591a\u5206\u5757\u59ff\u52bf\u53ef\u4ee5\u6765[\u6211\u7684blog](http://www.yhzq-blog.cc/\u5206\u5757\u7b97\u6cd5\u603b\u7ed3/)\n\n\n    \n    \n    \n    \n    \n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int maxn = 100010;\nint n,m,num,q,belong[maxn],block,l[maxn],r[maxn];\nLL a[maxn],mark[maxn],d[maxn],x,com,y,z;\nchar s[10];\nLL inline read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid debug()\n{\n    for (int i=1;i<=n;i++)\n        printf(\"%lld \",a[i]+mark[belong[i]]);\n    puts(\"\");\n    for (int i=1;i<=num;i++,puts(\"\"))\n        printf(\"Bolck%lld: l:%lld r:%lld sum:%lld\",i,l[i],r[i],d[i]+mark[i]*block);\n}\nvoid build()\n{\n    block=sqrt(n);\n    num=n/block;if (n%block) num++;\n    for (int i=1;i<=num;i++)\n        l[i]=(i-1)*block+1,r[i]=i*block;\n    for (int i=1;i<=n;i++)\n        belong[i]=(i-1)/block+1;\n    for (int i=1;i<=n;i++)\n        d[belong[i]]+=a[i];\n}\nvoid update(int L,int R,LL x)\n{\n    if (belong[L]==belong[R])\n    {\n        for (int i=l[belong[L]];i<=r[belong[R]];i++)\n            a[i]+=mark[belong[L]];\n        d[belong[L]]+=mark[belong[L]]*block;\n        mark[belong[L]]=0;\n        for (int i=L;i<=R;i++)\n            a[i]+=x;\n        d[belong[L]]+=(R-L+1)*x;\n        return;\n    }\n    for (int i=l[belong[L]];i<=r[belong[L]];i++)\n        a[i]+=mark[belong[L]];\n    d[belong[L]]+=mark[belong[L]]*block;\n    mark[belong[L]]=0;\n    for (int i=L;i<=r[belong[L]];i++)\n        a[i]+=x;\n    d[belong[L]]+=(r[belong[L]]-L+1)*x;\n    for (int i=l[belong[R]];i<=r[belong[R]];i++)\n        a[i]+=mark[belong[R]];\n    d[belong[R]]+=mark[belong[R]]*block;\n    mark[belong[R]]=0;\n    for (int i=l[belong[R]];i<=R;i++)\n        a[i]+=x;\n    d[belong[R]]+=(R-l[belong[R]]+1)*x;\n    for (int i=belong[L]+1;i<belong[R];i++)\n        mark[i]+=x;\n}\nvoid query(int L,int R)\n{\n    LL ans=0;\n    if (belong[L]==belong[R])\n    {\n        for (int i=L;i<=R;i++)\n            ans+=a[i];\n        printf(\"%lld\\n\",ans+(R-L+1)*mark[belong[R]]);\n        return;\n    }\n    for (int i=L;i<=r[belong[L]];i++)\n        ans+=a[i]+mark[belong[L]];\n    for (int i=l[belong[R]];i<=R;i++)\n        ans+=a[i]+mark[belong[R]];\n    for (int i=belong[L]+1;i<belong[R];i++)\n        ans+=d[i]+mark[i]*block;\n    printf(\"%lld\\n\",ans);\n}\nmain()\n{\n    n=read(),q=read();\n    for (int i=1;i<=n;i++)\n        a[i]=read();\n    build();\n    for (int i=1;i<=q;i++)\n    {\n        com=read(),x=read(),y=read();\n        if (com==2)\n            query(x,y);\n        else\n            z=read(),update(x,y,z);\n    }\n}\n```",
        "postTime": 1489710480,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u6807\u51c6\u7684\u677f\u5b50\uff0c\u6d89\u53ca\u5230\u7684\u53ea\u6709\u4e00\u4e2a\u53eb\u505a\u7ebf\u6bb5\u6811\u7684\u6570\u636e\u7ed3\u6784\n\n## First\uff1a\u7ebf\u6bb5\u6811\u662f\u4ec0\u4e48\uff1f\n\t\n\u7ebf\u6bb5\u6811\u5176\u5b9e\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5b83\u5c06\u4e00\u4e2a\u6570\u5217\u5206\u6210\u5c0f\u533a\u57df\uff0c\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u50a8\u5b58\u5176\u5bf9\u5e94\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u3002\n\n ![](https://img2018.cnblogs.com/i-beta/1765402/202001/1765402-20200118091831141-706623746.png)\n    \n\u5982\u56fe\uff0c\u8bbe\u6570\u7ec4 a[n] ,\u56fe\u4e2d [ i,j ] \u8868\u793a\u6bcf\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u6839\u8282\u70b9\u5bf9\u5e94\u7684\u662f\u6574\u4e2a\u533a\u95f4 [ 0,n-1 ] \u3002\u4e00\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u4e3a [ l,r ] \uff0c\u5f53l=r\u65f6\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6ca1\u6709\u5de6\u53f3\u513f\u5b50\uff1b\u5426\u5219\u5b83\u5c31\u4e00\u5b9a\u6709\u5de6\u53f3\u4e24\u4e2a\u513f\u5b50\uff0c\u5b58\u5728mid=( l+r )/2\uff0c\u5176\u5de6\u513f\u5b50\u4e3a[ l,mid ]\uff0c\u53f3\u513f\u5b50\u5bf9\u5e94\u533a\u95f4\u4e3a[ mid+1,r ]\u3002\n    \n###### \t\u6ce8\u610f\uff1a\u8fd9\u91cc\u5de6\u53f3\u513f\u5b50\u7684\u5206\u754c\u4e00\u5b9a\u8981\u6e05\u6670\u3001\u7edf\u4e00\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u533a\u95f4\u5212\u5206\u4e0d\u6e05\u695a\uff0c\u5c31\u4f1a\uff08~~\u50cf\u6211\u8001\u5e08\u90a3\u6837~~\uff09\u7ffb\u8f66\u3002\n    \n\u53ef\u4ee5\u770b\u51fa\uff0c\u4e8c\u53c9\u6811\u9ad8\u5ea6h\u7684\u590d\u6742\u5ea6\u53ea\u6709O( logn )\u7ea7\u522b\u3002\n    \n#####   \u53e6\u5916\u8865\u5145\u51e0\u70b9\uff1a\n##### \u4e0a\u9762\u56fe\u4e2d\u6570\u7ec4\u662f[0,n-1]\u533a\u95f4\u7684\uff0c\u800c\u4e0b\u9762\u6211\u7684\u4ee3\u7801\u533a\u95f4\u4e3a[1,n]\u3002\n#####    \t\u4e8c\u8fdb\u5236\u7684\u4f4d\u79fb\u8fd0\u7b97 a * 2 = a << 1 \uff0c\u8868\u793aa\u5728\u4e8c\u8fdb\u5236\u4e0b\u5411\u5de6\u79fb\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u4e58\u4e8c\u3002\u8fd9\u79cd\u8fd0\u7b97\u65b9\u5f0f\u4f1a\u6bd4\u666e\u901a\u7684 * 2 \u8981\u5feb\n\n \n## Second\uff1a\u53d8\u91cf\u6e05\u5355\n//\u4e2a\u4eba\u89c9\u5f97\u5199\u4e00\u4e2a\u6e05\u5355\u66f4\u6709\u5229\u4e8e\u5bf9\u4e8e\u7a0b\u5e8f\u7684\u89c4\u5212\uff0c\u6709\u8ba1\u5212\u603b\u6bd4\u6ca1\u6709\u5f3a\n\n\u53d8\u91cf\uff1a\t\u7ebf\u6bb5\u6811\u9009\u62e9\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\uff08t[ N ]\uff09\uff0c\u5185\u542b\u5bf9\u5e94\u5de6\u53f3\u7aef\u70b9\uff08l,r\uff09\uff0c\u5bf9\u5e94\u533a\u95f4\u7684\t\t\u533a\u95f4\u548c(sum)\uff0c\u4ee5\u53ca\u540e\u9762\u4f1a\u63d0\u5230\u7684\u61d2\u6807\u8bb0\u4e24\u4e2a(tag , tag_x)\u3002\n\n\u53e6\u5916\uff0c\u4ee3\u7801\u4e2d\u5927\u91cf\u51fa\u73b0\u5de6\u53f3\u513f\u5b50\uff0c\u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a\u6c42\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u7684\u51fd\u6570\u3002\n```cpp\n#define N 1000000+50//\u6570\u636e\u8fb9\u754c\nstruct tree{\n\tlong long l,r,sum,tag,tag_x;//l,r\u5de6\u53f3\u7aef\u70b9\uff0csum\u4e3a\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\uff0ctag\u4e3a\u52a0\u6cd5\u6807\u8bb0\uff0ctag_x\u4e3a\u4e58\u6cd5\u6807\u8bb0 \n}t[N];//\u7ebf\u6bb5\u6811 \nlong long a[N];//\u8f93\u5165\u7684\u6570\u5217(1~n) \nlong long m,n,p,k;//\u5982\u9898\u610f(k\u662f\u64cd\u4f5c\u79cd\u7c7b) \nlong long ls(long long rt){return rt<<1;}//\u5de6\u5b69\u5b50 \nlong long rs(long long rt){return rt<<1|1;}//\u53f3\u5b69\u5b50 \n```\n## Third\uff1a\u7ebf\u6bb5\u6811\u64cd\u4f5c\n### \u5efa\u6811\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u58f0\u660e\u51fd\u6570build\uff08rt,l,r\uff09,rt\u662f\u7ebf\u6bb5\u6811\u7684\u7ed3\u70b9\uff0cl,r \u662f\u8fd9\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u7684\u5de6\u53f3\u8fb9\u754c\u3002\u5982\u679c l=r\uff0c\u5c31\u662f\u5230\u8fbe\u4e86\u53f6\u8282\u70b9\uff0c\u5bf9\u5e94\u533a\u95f4\u548ct[rt] . sum\u7b49\u4e8ea[i]\u3002\u5982\u679c\u6ca1\u6709\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7build(ls(rt),l,mid)\u548cbuild(rs(rt),mid+1,r)\u9012\u5f52\u5206\u522b\u5efa\u7acb\u5de6\u53f3\u7ed3\u70b9\u3002\u6700\u540e\u66f4\u65b0rt\u7684sum(\u7ef4\u62a4\u533a\u95f4\u548c)\uff0c\u7b49\u4e8e\u5176\u5de6\u5b69\u5b50\u7684sum\u548c\u53f3\u5b69\u5b50\u7684sum\u76f8\u52a0\u4e4b\u548c\u3002\n```cpp\nvoid build(long long rt,long long l,long long r){\n\tt[rt].tag_x = 1; t[rt].tag = 0;//\u521d\u59cb\u5316\n\tt[rt].l = l,t[rt].r = r;//\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9\uff0c\u66f4\u65b0\u5de6\u53f3\u7aef\u70b9\u6807\u8bb0 \n\tif(l == r){ //\u5982\u679c\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9 \n\t\tt[rt].sum = a[l] % p; //\u4e0d\u8981\u5fd8\u8bb0\u53d6\u6a21\u64cd\u4f5c \n\t\treturn;\n\t}\n\tlong long mid = (l + r) >> 1; //\u4e2d\u95f4\u8282\u70b9 \n\tbuild(ls(rt),l,mid);\n\tbuild(rs(rt),mid+1,r); //\u5982\u679c\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c31\u5206\u522b\u5efa\u7acb\u5de6\u53f3\u5b69\u5b50 \n\tt[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; // \u66f4\u65b0sum \n}\n```\n### \u533a\u95f4\u4fee\u6539\uff08\u5212\u91cd\u70b9\uff09\n-  #### \u61d2\u6807\u8bb0 lazy_tag \n\u8fd9\u4e2a\u9898\u6765\u8bb2\uff0c\u6211\u4eec\u7684\u52a0\u51cf\u3001\u4e58\u9664\u90fd\u662f\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c\u5982\u679c\u5c06\u7ebf\u6bb5\u6811\u62c6\u5f00\u5728\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u4e0a\u9762\u8fdb\u884c\u4fee\u6539\u518d\u7ef4\u62a4\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u6211\u4eec\u4fee\u6539\u7684\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86O(mnlogn)\uff0c\u6bd4\u66b4\u529b\u8fd8\u6162\u3002\n\n\u6211\u4eec\u5f15\u5165\u61d2\u6807\u8bb0lazy_tag\u3002\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u7ed3\u70b9\u90fd\u4f1a\u6709\u4e00\u4e2a\u52a0\u6cd5\u7684tag\u548c\u4e58\u6cd5\u7684tag_x\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fee\u6539\u7684\u533a\u95f4\u8986\u76d6\u4e86\u7ed3\u70b9\u7684\u5bf9\u5e94\u533a\u95f4\uff0c\u6211\u4eec\u4e0d\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u4fee\u6539\uff0c\u800c\u662f\u53ea\u66f4\u65b0tag\u3001tag_x\u548csum\uff0c\u8fd9\u6837\u5c31\u5de7\u5999\u5730\u4f18\u5316\u4e86\u7a0b\u5e8f\u7684\u590d\u6742\u5ea6\u3002\n\nx\u957f\u5f97\u5f88\u50cf\u4e58\u53f7\uff0c\u6240\u4ee5tag_x\u5c31\u662f\u4e58\u6cd5\u7684\u61d2\u6807\u8bb0\uff08~~\u7279\u522b\u6709\u9053\u7406\u5bf9\u5427~~\uff09\u3002\n\n\u5f53\u7136\uff0c\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u4e5f\u9700\u8981\u5728\u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u5bf9\u4e00\u4e2a\u7ed3\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u5373\u628a\u7236\u4eb2\u8282\u70b9\uff08rt\uff09\u7684tag\u4e0b\u4f20\u5230\u513f\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u66f4\u65b0\u513f\u5b50\u7684sum\u3002\u5982\u679c\u53ea\u6709\u52a0\u6cd5\u8fd9\u4e2a\u4e8b\u60c5\u5c31\u7b80\u5355\u4e86\uff0c\u53ef\u662f\u73b0\u5728\u6211\u840c\u6709\u4e86\u4e58\u6cd5\uff0c\u90a3\u5c31\u8981\u8003\u8651\u4e00\u4e0b\u8fd0\u7b97\u987a\u5e8f\u7684\u95ee\u9898\u4e86\u3002\u56e0\u4e3a\u4e58\u6cd5\u7684\u8fd0\u7b97\u7ea7\u522b\u66f4\u9ad8\uff0c\u6240\u4ee5\u5148\u8fdb\u884c\u8ba1\u7b97\u3002 **\u6ce8\u610f\uff1a\u4e58\u6cd5\u61d2\u6807\u8bb0\u4e0d\u4ec5\u8981\u628asum\u6539\u6210sum * tag_x\uff0c\u800c\u4e14\uff0c\u52a0\u6cd5\u7684\u61d2\u6807\u8bb0tag\u4e5f\u8981\u6539\u6210tag * tag_x\uff0c\u56e0\u4e3a\u52a0\u6cd5tag\u4e5f\u662fsum\u7684\u4e00\u90e8\u5206\u3002** \u53e6\u5916\uff0c\u56e0\u4e3a\u7275\u626f\u5230tag\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4ee3\u7801\u91cc\u9762\u4fee\u6539\u7684\u8bed\u53e5\u4e5f\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\uff08tag_x\u9ad8\u4e8etag\uff0ctag\u9ad8\u4e8esum\uff09\u3002\u8fd9\u4e00\u5957\u64cd\u4f5c\u53eb**\u61d2\u6807\u8bb0\u4e0b\u4f20**\u3002\n\n```cpp\nvoid push_down(long long rt){\n    t[ls(rt)].tag_x = (t[ls(rt)].tag_x * t[rt].tag_x) % p;\n    t[rs(rt)].tag_x = (t[rs(rt)].tag_x * t[rt].tag_x) % p;//\u4e58\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0\u540e\u53d6\u6a21 \n\n    t[ls(rt)].tag = (t[ls(rt)].tag * t[rt].tag_x) % p;\n    t[rs(rt)].tag = (t[rs(rt)].tag * t[rt].tag_x) % p;//\u52a0\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0 \n\n    t[ls(rt)].sum = (t[ls(rt)].sum * t[rt].tag_x) % p;\n    t[rs(rt)].sum = (t[rs(rt)].sum * t[rt].tag_x) % p;//sum\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\u66f4\u65b0\n\n    t[rt].tag_x = 1; //\u7236\u4eb2\u7684\u6807\u8bb0\u5df2\u7ecf\u4e0b\u4f20\uff0c\u5c31\u5f52\u96f6\uff08\u56e0\u4e3a\u662f\u4e58\u6cd5\uff0c\u6240\u4ee5\u8981\u8c03\u52301\uff09 \n\t\t\n    t[ls(rt)].tag = (t[ls(rt)].tag + t[rt].tag) % p;\n    t[rs(rt)].tag = (t[rs(rt)].tag + t[rt].tag) % p;//\u52a0\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0 \n\t\n    t[ls(rt)].sum += (t[ls(rt)].r - t[ls(rt)].l + 1) * t[rt].tag;\n    t[rs(rt)].sum += (t[rs(rt)].r - t[rs(rt)].l + 1) * t[rt].tag;//sum\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\u66f4\u65b0\n    \n    t[rt].tag = 0;//\u7236\u4eb2\u7684\u6807\u8bb0\u5df2\u7ecf\u4e0b\u4f20\uff0c\u5c31\u5f52\u96f6 \n}\n```\n- #### \u6b63\u9898\uff1a\u533a\u95f4\u4fee\u6539\n\u61d2\u6807\u8bb0\u770b\u660e\u767d\uff0c\u533a\u95f4\u4fee\u6539\u5c31\u7b80\u5355\u4e86\u3002\u6211\u840c\u4ece\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u8981\u8fdb\u884c\u4fee\u6539\u7684\u533a\u95f4\u662f\u4e0d\u662f\u8986\u76d6\u4e86\u8fd9\u4e2a\u7ed3\u70b9\u7684\u533a\u95f4\uff0c\u5982\u679c\u8986\u76d6\uff0c\u76f4\u63a5\u4e00\u5957\u9a9a\u64cd\u4f5c\u628a\u8fd9\u4e2a\u70b9\u7684tag\u3001tag_x\u548csum\u6539\u6389\u3002\u5982\u679c\u6ca1\u6709\u8986\u76d6\uff0c\u5c31\u5f80\u8fd9\u4e2a\u8282\u70b9\u7684\u5b69\u5b50\u9012\u5f52\uff0c\u76f4\u5230\u627e\u5230\u88ab\u8986\u76d6\u7684\u533a\u95f4\u3002\n\u8fd9\u91cc\u5206\u52a0\u6cd5\u548c\u4e58\u6cd5\u7684\u533a\u95f4\u4fee\u6539\uff0c\u4f46\u662f\u601d\u8def\u76f8\u540c\u3002\u8fd8\u662f\u9700\u8981\u6ce8\u610f\u4e00\u4e0btag\u548ctag_x\u7684\u4fee\u6539\u987a\u5e8f\u3002\n\n\u52a0\u6cd5\n```cpp\nvoid change(long long rt,long long x,long long y,long long z){\n\tif(x <= t[rt].l && y >= t[rt].r){\n\t\tt[rt].tag = (t[rt].tag + z) % p;\n\t\tt[rt].sum = (t[rt].sum + (t[rt].r - t[rt].l + 1) * z) % p; //\u5982\u679c\u4fee\u6539\u533a\u95f4\u8986\u76d6\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\uff0c\u5c31\u66f4\u65b0 \n\t\treturn;\n\t}\n    if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);//\u8bbf\u95ee\u5b69\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u5148\u628a\u61d2\u6807\u8bb0 \u4f20\u4e0b\u53bb \n\tlong long mid = (t[rt].l + t[rt].r) >> 1;\n\tif(x <= mid){\n\t\tchange(ls(rt),x,y,z);\n\t}\n\tif(y > mid){\n\t\tchange(rs(rt),x,y,z);\n\t}\n\t//\u5206\u522b\u5f80\u5de6\u53f3\u513f\u5b50\u4f20 \n\t\n\tt[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; //\u7ef4\u62a4 \n}\n```\n\u4e58\u6cd5\n```cpp\nvoid change_x(long long rt,long long x,long long y,long long z){\n\t if(x <= t[rt].l && y >= t[rt].r){\n\t \tt[rt].tag_x = (t[rt].tag_x * z) % p;\n\t \tt[rt].sum = (t[rt].sum * z) % p;\n\t \tt[rt].tag = (t[rt].tag * z) % p;//\u5982\u679c\u4fee\u6539\u533a\u95f4\u8986\u76d6\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\uff0c\u5c31\u66f4\u65b0 \n\t \treturn;\n\t }\n\t if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);//\u8bbf\u95ee\u5b69\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u5148\u628a\u61d2\u6807\u8bb0 \u4f20\u4e0b\u53bb \n\t long long mid = (t[rt].l + t[rt].r) >> 1;\n\t if(x <= mid){\n\t \tchange_x(ls(rt),x,y,z);\n\t }\n\t if(y > mid){\n\t \tchange_x(rs(rt),x,y,z);\n\t }\n\t //\u5206\u522b\u5f80\u5de6\u53f3\u513f\u5b50\u4f20 \n\t t[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; //\u7ef4\u62a4\n}\n```\n\n### \u533a\u95f4\u67e5\u8be2\n\u601d\u8def\u548c\u533a\u95f4\u4fee\u6539\u76f8\u7c7b\u4f3c\uff0c\u4ece\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb \uff0c\u5982\u679c\u7ed3\u70b9\u88ab\u8986\u76d6\uff0c\u5c31\u8fd4\u56de\u5b83\u7ef4\u62a4\u7684\u533a\u95f4\u548csum\u3002\n\n```cpp\nlong long getsum(long long rt,long long x,long long y){\n\tlong long res = 0;\n\tif(x <= t[rt].l && y >= t[rt].r){\n\t\treturn t[rt].sum % p;\n\t}\n    if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);\n\tlong long mid = (t[rt].r + t[rt].l) >> 1;\n\tif(x <= mid){\n\t\tres += getsum(ls(rt),x,y);\n\t}\n\tif(y > mid){\n\t\tres += getsum(rs(rt),x,y);\n\t}\n\treturn res % p;\n}\n```\n## **\u8bb2\u5230\u8fd9\u91cc\uff0c\u7ebf\u6bb5\u6811\u5c31\u7ed3\u675f\u5566**\uff08\u8dd1\u56de\u53bb\u7ea0\u9519ing\uff09\n\n\u6765\u4e00\u6ce2AC\u4ee3\u7801\n\n\uff08\u6ce8\u91ca\u6389\u7684\u90e8\u5206\u662f\u7ebf\u6bb5\u68111\u7684\u4ee3\u7801\uff0c\u4e24\u4e2a\u9898\u57fa\u672c\u4e0a\u4e00\u6837\u7684\uff0c\u5c31\u5199\u5230\u4e00\u5757\u4e86\uff09\n```cpp\n#include \"bits/stdc++.h\"\n#define N 1000000+50\nusing namespace std;\n\nstruct tree{\n\tlong long l,r,sum,tag,tag_x;//l,r\u5de6\u53f3\u7aef\u70b9\uff0csum\u4e3a\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\uff0ctag\u4e3a\u52a0\u6cd5\u6807\u8bb0\uff0ctag_x\u4e3a\u4e58\u6cd5\u6807\u8bb0 \n}t[N];//\u7ebf\u6bb5\u6811 \nlong long a[N];//\u8f93\u5165\u7684\u6570\u5217(1~n) \nlong long m,n,p = 9223372036854775807,k;//\u5982\u9898\u610f(k\u662f\u64cd\u4f5c\u79cd\u7c7b) \nlong long ls(long long rt){return rt<<1;}//\u5de6\u5b69\u5b50 \nlong long rs(long long rt){return rt<<1|1;}//\u53f3\u5b69\u5b50 \n\nvoid build(long long rt,long long l,long long r){\n\tt[rt].tag_x = 1; t[rt].tag = 0;//\u521d\u59cb\u5316\n\tt[rt].l = l,t[rt].r = r;//\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9\uff0c\u66f4\u65b0\u5de6\u53f3\u7aef\u70b9\u6807\u8bb0 \n\tif(l == r){ //\u5982\u679c\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9 \n\t\tt[rt].sum = a[l] % p; //\u4e0d\u8981\u5fd8\u8bb0\u53d6\u6a21\u64cd\u4f5c \n\t\treturn;\n\t}\n\tlong long mid = (l + r) >> 1; //\u4e2d\u95f4\u8282\u70b9 \n\tbuild(ls(rt),l,mid);\n\tbuild(rs(rt),mid+1,r); //\u5982\u679c\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c31\u5206\u522b\u5efa\u7acb\u5de6\u53f3\u5b69\u5b50 \n\tt[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; // \u66f4\u65b0sum \n}\n\nvoid push_down(long long rt){\n    t[ls(rt)].tag_x = (t[ls(rt)].tag_x * t[rt].tag_x) % p;\n    t[rs(rt)].tag_x = (t[rs(rt)].tag_x * t[rt].tag_x) % p;//\u4e58\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0\u540e\u53d6\u6a21 \n\n    t[ls(rt)].tag = (t[ls(rt)].tag * t[rt].tag_x) % p;\n    t[rs(rt)].tag = (t[rs(rt)].tag * t[rt].tag_x) % p;//\u52a0\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0 \n\n    t[ls(rt)].sum = (t[ls(rt)].sum * t[rt].tag_x) % p;\n    t[rs(rt)].sum = (t[rs(rt)].sum * t[rt].tag_x) % p;//sum\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\u66f4\u65b0\n\n    t[rt].tag_x = 1; //\u7236\u4eb2\u7684\u6807\u8bb0\u5df2\u7ecf\u4e0b\u4f20\uff0c\u5c31\u5f52\u96f6\uff08\u56e0\u4e3a\u662f\u4e58\u6cd5\uff0c\u6240\u4ee5\u8981\u8c03\u52301\uff09 \n\t\t\n    t[ls(rt)].tag = (t[ls(rt)].tag + t[rt].tag) % p;\n    t[rs(rt)].tag = (t[rs(rt)].tag + t[rt].tag) % p;//\u52a0\u6cd5\u61d2\u6807\u8bb0\u66f4\u65b0 \n\t\n    t[ls(rt)].sum += (t[ls(rt)].r - t[ls(rt)].l + 1) * t[rt].tag;\n    t[rs(rt)].sum += (t[rs(rt)].r - t[rs(rt)].l + 1) * t[rt].tag;//sum\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u548c\u66f4\u65b0\n    \n    t[rt].tag = 0;//\u7236\u4eb2\u7684\u6807\u8bb0\u5df2\u7ecf\u4e0b\u4f20\uff0c\u5c31\u5f52\u96f6 \n}\n\nvoid change(long long rt,long long x,long long y,long long z){\n\tif(x <= t[rt].l && y >= t[rt].r){\n\t\tt[rt].tag = (t[rt].tag + z) % p;\n\t\tt[rt].sum = (t[rt].sum + (t[rt].r - t[rt].l + 1) * z) % p; //\u5982\u679c\u4fee\u6539\u533a\u95f4\u8986\u76d6\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\uff0c\u5c31\u66f4\u65b0 \n\t\treturn;\n\t}\n    if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);//\u8bbf\u95ee\u5b69\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u5148\u628a\u61d2\u6807\u8bb0 \u4f20\u4e0b\u53bb \n\tlong long mid = (t[rt].l + t[rt].r) >> 1;\n\tif(x <= mid){\n\t\tchange(ls(rt),x,y,z);\n\t}\n\tif(y > mid){\n\t\tchange(rs(rt),x,y,z);\n\t}\n\t//\u5206\u522b\u5f80\u5de6\u53f3\u513f\u5b50\u4f20 \n\t\n\tt[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; //\u7ef4\u62a4 \n}\n\nvoid change_x(long long rt,long long x,long long y,long long z){\n\t if(x <= t[rt].l && y >= t[rt].r){\n\t \tt[rt].tag_x = (t[rt].tag_x * z) % p;\n\t \tt[rt].sum = (t[rt].sum * z) % p;\n\t \tt[rt].tag = (t[rt].tag * z) % p;//\u5982\u679c\u4fee\u6539\u533a\u95f4\u8986\u76d6\u4e86\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\uff0c\u5c31\u66f4\u65b0 \n\t \treturn;\n\t }\n\t if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);//\u8bbf\u95ee\u5b69\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u5148\u628a\u61d2\u6807\u8bb0 \u4f20\u4e0b\u53bb \n\t long long mid = (t[rt].l + t[rt].r) >> 1;\n\t if(x <= mid){\n\t \tchange_x(ls(rt),x,y,z);\n\t }\n\t if(y > mid){\n\t \tchange_x(rs(rt),x,y,z);\n\t }\n\t //\u5206\u522b\u5f80\u5de6\u53f3\u513f\u5b50\u4f20 \n\t t[rt].sum = (t[ls(rt)].sum + t[rs(rt)].sum) % p; //\u7ef4\u62a4\n}\n\nlong long getsum(long long rt,long long x,long long y){\n\tlong long res = 0;\n\tif(x <= t[rt].l && y >= t[rt].r){\n\t\treturn t[rt].sum % p;\n\t}\n    if(t[rt].tag || t[rt].tag_x != 1) push_down(rt);\n\tlong long mid = (t[rt].r + t[rt].l) >> 1;\n\tif(x <= mid){\n\t\tres += getsum(ls(rt),x,y);\n\t}\n\tif(y > mid){\n\t\tres += getsum(rs(rt),x,y);\n\t}\n\treturn res % p;\n}\n\nint main(){\n\tlong long i,j,x,y,z;\n\tscanf(\"%lld%lld%lld\",&n,&m,&p);\n//    scanf(\"%lld%lld\",&n,&m); \n\tfor(i = 1;i <= n; i++){\n\t\t scanf(\"%lld\",&a[i]);\n\t}\n\tbuild(1,1,n);\n\tfor(i = 1;i <= m; i++){\n\t\tscanf(\"%lld\",&k);\n\t\t\n\t\tif(k == 1){\n\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\t\tchange_x(1,x,y,z);\n\t\t}else if(k == 2){\n\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\t\tchange(1,x,y,z);\n\t\t}else if(k == 3){\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",getsum(1,x,y));\n\t\t}\n\n//\t\tif(k == 1){\n//\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n//\t\t\tchange(1,x,y,z);\n//\t\t}else if(k == 2){\n//\t\t\tscanf(\"%lld%lld\",&x,&y);\n//\t\t\tprintf(\"%lld\\n\",getsum(1,x,y));\n//\t\t}\n\t\t\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1552985237,
        "uid": 136952,
        "name": "CYC\u7684\u5e78\u798f\u751f\u6d3b",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u5b66\u5b8c\u7ebf\u6bb5\u6811\uff0c\u5c34\u5c2c\u5730\u53d1\u73b0\u81ea\u5df1\u53ea\u4f1abiuld\uff0cupdate\uff0cquery\u7684\u6700\u7b80\u5355\u6a21\u677f\u3002\ndalao\uff1a\u8fd9\u4e2a\u6570\u636e\u89c4\u6a21%4^&43\uffe5%3\uffe55#@\u2026\u2026\u5f88\u7b80\u5355**\u52a8\u6001\u5f00\u70b9**\u3002\u55ef\u5bf9\u7136\u540e\u5c31A\u4e86\u3002\n##### ~~\u6211\uff1a\u55ef\u55ef\uff1f\uff1f\uff1f~~\n\u7136\u540e\u641c\u535a\u5ba2\uff1a\u5929\u54ea\uff0c\u8fd9\u90fd\u662f\u4ec0\u4e48\uff1f\u4e3b\u5e2d\u6811\uff1f\u597d\u5427\u672c\u849f\u84bb\u4e0d\u4f1a\uff0c~~\u53ea\u597d\u62ff\u7740\u677f\u5b50\u6c34\u4e00\u6ce2~~\n\n## \u8a00\u5f52\u6b63\u4f20\uff1a\n1. \u4ec0\u4e48\u662f\u52a8\u6001\u5f00\u70b9\uff1a\n   \u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u90fd\u662f\u4e00\u9897\u6ee1\u4e8c\u53c9\u6811\uff0c\u5806\u5f0f\u5b58\u50a8\u9700\u8981$N*4$\u7a7a\u95f4\uff0c\u5982\u679c\u4e00\u5f00\u59cb\u5c31biuld\uff0c\u6216\u8005N\u5f88\u5927\uff0c\u5f88\u5bb9\u6613MLE\uff0c\u52a8\u6001\u5f00\u70b9\u5c31\u662f\u6211\u4eec\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u4e34\u65f6\u7533\u8bf7\uff08\u5f53\u7136\u53ef\u80fd\u7684\u8be2\u95ee\u533a\u95f4\u8303\u56f4\u8981\u8f83\u5c0f\u4e00\u4e9b\uff0c\u8fd9\u6837\u9700\u8981\u5f00\u7684\u8282\u70b9\u624d\u4e0d\u4f1aMLE\uff09~~\u6240\u4ee5\u8bf4\u8fd9\u9898\u4e0d\u7528\u52a8\u6001\u5f00\u70b9\uff0c\u6211\u53ea\u662f\u6765\u6c34\u4e00\u4e0b\u7684\uff0c\u56e0\u4e3a\u597d\u50cf\u6ca1\u6709\u6700\u6734\u7d20\u7684\u6559\u7a0b~~\n1. \u5173\u952e\u90e8\u5206\uff1a\n   \u56e0\u4e3a\u968f\u7528\u968f\u5f00\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u5e76\u975e\u5982\u5806\u5f0f\u5b58\u50a8\u90a3\u6837$o<<1$,$o<<1|1$\u53ef\u4ee5\u8bbf\u95ee\u5b50\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8bb0\u5f55\u5b50\u6811\u4e0b\u6807\uff0c\u5e76\u4e14\u6bcf\u6b21\u5230\u4e00\u4e2a\u8282\u70b9\u90fd\u8981\u68c0\u67e5\u8be5\u8282\u70b9\u662f\u5426\u5df2\u5f00\u3002\n   #### \u7ed3\u6784\u4f53\u5b9a\u4e49\n   ```cpp\nstruct Leaf{\n    int ls,rs;  //\u4e24\u4e2a\u5b50\u6811\u7684\u4e0b\u6807\uff0c\u6ca1\u6709\u7684\u8bdd\u9ed8\u8ba40 \n    LL s;   //\u533a\u95f4\u548c\n    Leaf(){}\n    Leaf(int _,int __){ls=rs=0;s=pre[__]-pre[_-1];}\n}sg[maxn<<2];\n```\n#### \u65b0\u5efa\u8282\u70b9\n```cpp\ninline void newleaf(int &o ,int l,int r){\n    o=++id;\n    sg[o]=Leaf(l,r);\n}\n```\n\n#### \u4e3b\u4f53\u51fd\u6570\uff08\u4e3a\u4ec0\u4e48o\u662f\u5f15\u7528\uff1f\u60f3\u60f3\u5c31\u77e5\u9053\u4e86\uff09\n```cpp\ninline void pushdown(int &o,int l,int r){\n    if (tag[o]){   \n       if (l!=r){\n       \t int now=o;\n         if (!sg[now].ls) {newleaf(sg[o].ls,l,mid);}\n         if (!sg[now].rs) {newleaf(sg[o].rs,mid+1,r);}\n       \t tag[sg[now].ls]+=tag[now];\n       \t tag[sg[now].rs]+=tag[now];\n       \t sg[sg[now].ls].s+=(mid-l+1)*tag[now];\n       \t sg[sg[now].rs].s+=(r-mid)*tag[now];\n       }\n       tag[o]=0;\n    }\n}\n\ninline void pushup(int &o,int l,int r){\n    if (l!=r) {\n        if (!sg[o].ls) newleaf(sg[o].ls,l,mid);\n        if (!sg[o].rs) newleaf(sg[o].rs,mid+1,r);//\u5f00\u5b50\u8282\u70b9\uff0c\u9632\u6b62\u5b50\u8282\u70b9\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u672a\u521d\u59cb\u5316\u800c\u7b54\u6848\u9519\u8bef\n        sg[o].s=sg[sg[o].ls].s+sg[sg[o].rs].s;\n    }\n}\n\nvoid update(int &o,int l,int r,int k){  \n    if (!o){\n        newleaf(o,l,r);  //\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u904d\u5386\u8fc7\uff0c\u5c31\u5148\u5f00\u70b9\uff0c\u8981\u5728\u66f4\u65b0\u524d\u5f00\n    }\n    if (l>=L && r<=R) {\n        sg[o].s+=(r-l+1)*k;\n        tag[o]+=k;\t\t\n        return;\n    }\n    pushdown(o,l,r);\n    if (L<=mid) update(sg[o].ls,l,mid,k);\n    if (R>mid) update(sg[o].rs,mid+1,r,k);\n    pushup(o,l,r);\n}\n\nLL query(int &o,int l,int r){\n    if (!o){\n        newleaf(o,l,r);\n        if (l==r) {return sg[o].s;} //\u540c\u7406\n    }\n    if (l>=L && r<=R) {return sg[o].s;}                    \n    pushdown(o,l,r);\n    LL ans=0;\n    if (L<=mid) ans+=query(sg[o].ls,l,mid);\n    if (R>mid) ans+=query(sg[o].rs,mid+1,r); \n    pushup(o,l,r);\n    return ans;\n}\n```\n\u5176\u4f59\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\u3002\n\u53e6\u5916\uff1a\u56e0\u4e3a\u6bcf\u6b21\u8981\u5224\u65ad\uff0c\u65b0\u5efa\u8282\u70b9\u7b49\u7b49\uff0c\u52a8\u6001\u5f00\u70b9\u6bd4\u8f83\u6162\uff08576ms\uff09\n\u6211\u6253\u7684\u5783\u573e\u7ebf\u6bb5\u6811300ms\uff0c\u55ef\u55ef\u3002\u3002\u3002\n\n#### \u5168\u4ee3\u7801\uff08~~\u5de8\u4e11~~\uff09\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define mid (((l)+(r))>>1)\nusing namespace std;\ntypedef long long LL;\nconst int maxn=1e5+10;\n\nint n,m,id,o,L,R,op,k;\nLL a[maxn],pre[maxn],tag[maxn<<2];\n\nstruct Leaf{\n    int ls,rs;  //\u4e24\u4e2a\u5b50\u6811\u7684\u4e0b\u6807 \n    LL s;   //\u533a\u95f4\u548c\n    Leaf(){}\n    Leaf(int _,int __){ls=rs=0;s=pre[__]-pre[_-1];}//\u521d\u59cb\u5316\n}sg[maxn<<2];\n\ninline void newleaf(int &o ,int l,int r){\n    o=++id;\n    sg[o]=Leaf(l,r);\n}\n\ninline void pushdown(int &o,int l,int r){\n    if (tag[o]){   \n       if (l!=r){\n       \t int now=o;\n         if (!sg[now].ls) {newleaf(sg[o].ls,l,mid);}\n         if (!sg[now].rs) {newleaf(sg[o].rs,mid+1,r);}\n       \t tag[sg[now].ls]+=tag[now];\n       \t tag[sg[now].rs]+=tag[now];\n       \t sg[sg[now].ls].s+=(mid-l+1)*tag[now];\n       \t sg[sg[now].rs].s+=(r-mid)*tag[now];\n       }\n       tag[o]=0;\n    }\n}\n\ninline void pushup(int &o,int l,int r){\n    if (l!=r) {\n        if (!sg[o].ls) newleaf(sg[o].ls,l,mid);\n        if (!sg[o].rs) newleaf(sg[o].rs,mid+1,r);\n        sg[o].s=sg[sg[o].ls].s+sg[sg[o].rs].s;\n    }\n}\n\nvoid update(int &o,int l,int r,int k){  \n    if (!o){newleaf(o,l,r);\n  //\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u904d\u5386\u8fc7\uff0c\u5c31\u5148\u5f00\u70b9 }\n    if (l>=L && r<=R) {\n        sg[o].s+=(r-l+1)*k;\n        tag[o]+=k;\t\t\n        return;\n    }\n    pushdown(o,l,r);\n    if (L<=mid) update(sg[o].ls,l,mid,k);\n    if (R>mid) update(sg[o].rs,mid+1,r,k);\n    pushup(o,l,r);\n}\n\nLL query(int &o,int l,int r){\n    if (!o){\n        newleaf(o,l,r);\n        if (l==r) {return sg[o].s;}\n    }\n    if (l>=L && r<=R) {return sg[o].s;}                    \n    pushdown(o,l,r);\n    LL ans=0;\n    if (L<=mid) ans+=query(sg[o].ls,l,mid);\n    if (R>mid) ans+=query(sg[o].rs,mid+1,r); \n    pushup(o,l,r);\n    return ans;\n}\n\nint main(){\n    //freopen(\"haha.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++) scanf(\"%lld\",a+i);\n    for (int i=1;i<=maxn;i++) pre[i]=pre[i-1]+a[i];\t//\u524d\u7f00\u548c\u4f18\u5316\u521d\u59cb\u5316\u90e8\u5206\n    o=id=0;//\u8bb0\u5f55\u4e0b\u6807\n    for (int i=1;i<=m;i++){\n        scanf(\"%d\",&op);\n        switch (op){\n            case 1:{\n                scanf(\"%d%d%d\",&L,&R,&k);\n                update(o,1,maxn,k);\n                break;\n            }\n            case 2:{\n                scanf(\"%d%d\",&L,&R);\n                printf(\"%lld\\n\",query(o,1,maxn));\n                break;\n            }\n        }\n    }\t\n    return 0;\n}\n```\n",
        "postTime": 1538665811,
        "uid": 55389,
        "name": "\u9ad8\u5206\u5b50\u5408\u6210",
        "ccfLevel": 0,
        "title": "\u52a8\u6001\u5f00\u70b9"
    },
    {
        "content": "Changelog: \u8fdc\u53e4\u65f6\u4ee3\u5df2\u901a\u8fc7\u7684\u9898\u89e3\u7684\u8c03\u6574\uff0c\u52a0\u5165\u4e86 $\\LaTeX$\uff0c\u5220\u4e86\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u4e1c\u897f\uff0c\u91c7\u7528\u66f4\u5f62\u5f0f\u5316\u7684\u8868\u8ff0\uff0c\u5e76\u91c7\u7528\u66f4\u52a0\u5e38\u89c1\u7684\u4e00\u79cd\u7ebf\u6bb5\u6811\u8fdb\u884c\u89e3\u91ca\u3002\n\n---\n\n\u672c\u6587\u4e3b\u8981\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981\u5f00\u7ea6 $4n$ \u7a7a\u95f4\u3002\u4ee5\u6700\u5e38\u89c1\u7684\u4ece $1$ \u5f00\u59cb\u7f16\u53f7\u7684 $[l, r] \\rightarrow [l, m], [m + 1, r]$ \u8fd9\u79cd\u5199\u6cd5\u4e3a\u4f8b\u3002\u672c\u6587\u4e2d $m$ \u5747\u4e3a $\\lfloor \\frac {l + r} 2 \\rfloor$\uff0c$k$ \u5747\u4e3a\u6574\u6570\u3002\n\n---\n\n\u8bbe\u4e00\u68f5\u5927\u5c0f\u4e3a $n$ \u7684\u7ebf\u6bb5\u6811\uff0c\u9ad8\u5ea6\u4e3a $h(n)$\uff0c\u6700\u5927\u8282\u70b9\u7f16\u53f7\u4e3a $f(n)$\u3002\n\n$$\nh(n)=\\begin{cases}\n0 & (n = 1), \\cr\nh(\\lceil \\frac n 2 \\rceil) + 1 & \\operatorname{otherwise,}\n\\end{cases}\n$$\n\n\u6613\u5f97 $h(n) = \\lceil \\log_2 n \\rceil$\u3002\n\n---\n\n\u6211\u4eec\u8003\u8651\u5e38\u89c1\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7f16\u7801\u89c4\u5219\u3002\u8bbe\u4e00\u4e2a\u8282\u70b9 $x$ \u7684\u6df1\u5ea6\u4e3a $d_x$\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c$x$ \u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u7684 $1$ \u5fc5\u7136\u8868\u793a $2^{d_x}$\uff08\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a $0$\uff09\uff0c\u4e0b\u9762 $d_x$ \u4f4d\u5219\u8868\u793a\u4ece\u6839\u8282\u70b9\u4f9d\u6b21\u8d70\u5de6\u5b50\u6811\uff08$0$\uff09\u6216\u53f3\u5b50\u6811\uff08$1$\uff09\u53ef\u8fbe\u5230 $x$\u3002\n\n\u6bd4\u5982\u8282\u70b9 $10$\uff0c$1 \\rightarrow 2 \\rightarrow 5 \\rightarrow 10$\uff0c\u4e8c\u8fdb\u5236\u4e3a $(1010)_2$\uff0c\u8868\u793a $10$ \u7684\u6df1\u5ea6\u4e3a $3$\uff0c\u4f9d\u6b21\u8d70\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\u3001\u5de6\u5b50\u6811\u5230\u8fbe $x$\u3002\n\n---\n\n\u6211\u4eec\u8981\u627e\u5230\u88ab\u5927\u5c0f\u4e3a $n$ \u7684\u7ebf\u6bb5\u6811\u7528\u5230\u7684\u6700\u5927\u7f16\u53f7\uff0c\u663e\u7136\u5e94\u4f7f\u8fd9\u4e2a\u7f16\u53f7 $2$ \u8fdb\u5236\u4e0b\u7684\u4f4d\u6570\u6700\u5927\uff0c\u6613\u5f97\u8fd9\u4e2a\u6700\u5927\u4f4d\u6570\u4e3a $h(n) + 1$\u3002\n\n\u6211\u4eec\u8003\u8651\u4ece\u6839\u8282\u70b9\u8d70\u5230\u8fd9\u4e2a\u7f16\u53f7\u6700\u5927\u7684\u8282\u70b9\u3002\u5047\u8bbe\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u4e3a $x$\uff0c\u533a\u95f4\u4e3a $[l, r]$\u3002\n\n\u82e5\u5f53\u524d\u533a\u95f4\u957f\u5ea6\u4e3a\u5076\u6570\uff1a\u5219\u663e\u7136\u8d70\u5230\u53f3\u5b50\u6811\uff0c\u5373 $[m + 1, r]$\u3002\n\n\u82e5\u5f53\u524d\u533a\u95f4\u957f\u5ea6\u4e3a\u5947\u6570\uff1a\n\n> \u82e5\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u76f8\u540c\uff0c\u5219\u8d70\u5230\u53f3\u5b50\u6811\uff0c\u5426\u5219\u8d70\u5230\u5de6\u5b50\u6811\u3002\n>\n> \u9ad8\u5ea6\u76f8\u540c\uff0c\n>\n> \u5373 $h(\\frac {r - l + 1 + 1} 2) = h(\\frac {r - l + 1 - 1} 2)$\uff0c\u5373 $h(\\frac {r - l} 2) = h(\\frac {r - l} 2 + 1)$\uff0c\u5373 $\\lceil \\log_2 (\\frac {r - l} 2) \\rceil = \\lceil \\log_2 (\\frac {r - l} 2 + 1) \\rceil$\uff0c\u5373 $\\frac {r - l} 2$ \u4e0d\u4e3a $2$ \u7684\u6b63\u6574\u6570\u6b21\u5e42\uff0c\u5373 $r - l$ \u4e0d\u4e3a $2$ \u7684\u6b63\u6574\u6570\u6b21\u5e42\uff0c\u5373\u533a\u95f4\u957f\u5ea6\u4e0d\u4e3a $2^k + 1$\u3002\n>\n> \u82e5 $r - l$ \u4e3a $2$ \u7684\u6b63\u6574\u6570\u6b21\u5e42\uff0c\u5219\u6613\u5f97 $m - l$ \u4e5f\u4e3a $2$ \u7684\u975e\u8d1f\u6574\u6570\u6b21\u5e42\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u82e5\u4e00\u6b21\u8d70\u4e86\u5de6\u5b50\u6811\uff0c\u5219\u4ee5\u540e\u90fd\u8981\u8d70\u5de6\u5b50\u6811\uff0c\u76f4\u5230\u6700\u540e $r - l = 1$ \u65f6\u518d\u8d70\u4e00\u6b21\u53f3\u5b50\u6811\u3002\n\n---\n\n\u4e0d\u8003\u8651 $n = 1$ \u7684\u60c5\u51b5\u3002\n\n\u6613\u5f97\uff0c$f(n) - 2^{h(n)}$ \u5fc5\u7136\u5f62\u5982 $(1 \\cdots 10 \\cdots 01)_2$\u3002\n\n\u8003\u8651\u4e00\u4e0b $n$ \u7684\u4e8c\u8fdb\u5236\uff0c\u53ef\u5f97\u51fa $0$ \u7684\u6570\u91cf\u4e3a $n$ \u4e8c\u8fdb\u5236\u4e0b\u6700\u9ad8\u7684 $1$ \u4e0e\u6b21\u9ad8\u7684 $1$ \u4e4b\u95f4\u7684\u8ddd\u79bb $d(n)$\uff08\u82e5 $n$ \u4e3a $2$ \u7684\u6574\u6570\u6b21\u5e42\u5219 $d(n) = 0$\uff09\uff0c\u5219\u524d\u9762 $1$ \u7684\u6570\u91cf\u4e3a $h(n) - d(n) - 1$\u3002\u5219\u6709\n\n$$\\begin{aligned}\nf(n) &= 2^{\\lceil\\log_2 n\\rceil} + 2^{d(n) + 1} \\cdot (2^{\\lceil\\log_2 n\\rceil - d(n) - 1} - 1) + 1\\cr\n&= 2^{\\lceil\\log_2 n\\rceil + 1} - 2^{d(n) + 1} + 1\\cr\n\\end{aligned}$$\n\n\u82e5 $n = 2^k$\uff0c\u5219 $f(n) = 2^{k + 1} - 1 = 2n - 1$\u3002\n\n\u82e5 $n = 2^k + r(0 < r < 2^k)$\uff0c\u5219 $f(n) = 2^{k + 2} + 1 - 2^{d(n) + 1}$\uff0c\u8981\u4f7f $\\frac {f(n)}n$ \u53d6\u6700\u5927\u503c\uff0c\u5219 $f(n)$ \u5c3d\u91cf\u5927\uff0c$n$ \u5c3d\u91cf\u5c0f\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684 $d(n) = a(0 < a \\leqslant k)$\uff0c$f(n) = 2^{k + 2} - 2^{a + 1} + 1$\uff0c$n = 2^k + 2^{k - a}$\uff0c\n\n$$g(a) := \\frac{2^{k + 2} - 2^{a + 1} + 1}{2^k + 2^{k - a}},$$\n$$\\begin{aligned}\n&g(a) - g(a - 1) \\cr\n=& \\frac{2^{k + 2} - 2^{a + 1} + 1}{2^k + 2^{k - a}} - \\frac{2^{k + 2} - 2^a + 1}{2^k + 2^{k - a + 1}} \\cr\n=& \\frac{(2^{k + 2} - 2^{a + 1} + 1)(2^k + 2^{k - a + 1}) - (2^{k + 2} - 2^a + 1)(2^k + 2^{k - a})}{(2^k + 2^{k - a})(2^k + 2^{k - a + 1})} \\cr\n=& \\frac{2^k(2^{k - a + 2} + 2^{-a} - 2^a - 3)}{(2^k + 2^{k - a})(2^k + 2^{k - a + 1})}, \\cr\n\\end{aligned}$$\n$$\\begin{aligned}\n&g(a) - g(a - 1) > 0 \\cr\n\\iff& 2^{k - a + 2} + 2^{-a} \\geqslant 2^a + 3 \\cr\n\\iff& 2^{k - a + 2} \\geqslant 2^a + 3 \\cr\n\\iff& k - a + 2 > a \\cr\n\\iff& a < \\frac {k + 2} 2 \\cr\n\\iff& a < \\lceil \\frac k 2 \\rceil + 1 \\cr\n\\iff& a \\leqslant \\lceil \\frac k 2 \\rceil.\n\\end{aligned}$$\n\n\u5f53 $a$ \u53d6 $\\lceil \\frac k 2 \\rceil$ \u65f6\uff0c\n$$g(a) = \\frac{2^{k + 2} - 2^{\\lceil \\frac k 2 \\rceil + 1} + 1}{2^k + 2^{\\lfloor \\frac k 2 \\rfloor}},$$\n\n\u800c\n\n$$\n\\lim_{k \\rightarrow \\infty} \\frac{2^{k + 2} - 2^{\\lceil \\frac k 2 \\rceil + 1} + 1}{2^k + 2^{\\lfloor \\frac k 2 \\rfloor}} = 4.\n$$\n\n\u4e8e\u662f\u9700\u8981\u5f00\u56db\u500d\u7a7a\u95f4\u3002",
        "postTime": 1565507602,
        "uid": 236807,
        "name": "Mitama",
        "ccfLevel": 9,
        "title": "[Solution] P3372"
    },
    {
        "content": "~~\u8fd9\u4e0d\u662f\u5e73\u8861\u6811\u6a21\u677f\u9898\u5417~~\n\n\u5e73\u8861\u6811\u662f\u4e00\u4e2a\u6781\u5176\u4e07\u80fd\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u52a8\u6001\u63d2\u5165\u4e0e\u5220\u9664\u8282\u70b9\uff0c\u8fd8\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\uff0c\u4ee5\u53ca\u89e3\u51b3\u9ad8\u7ea7\u56fe\u8bba\u95ee\u9898\uff08$LCT$\uff09\u7b49\u3002\n\n\u672c\u9898\u53ef\u4f7f\u7528\u652f\u6301\u533a\u95f4\u64cd\u4f5c\u7684\u4e00\u79cd\u5e73\u8861\u6811\uff1a$FHQ\\space Treap$\u6765\u89e3\u51b3\u3002\u8fd8\u4e0d\u4f1a$FHQ\\space Treap$\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u4e00\u770b[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/Judge/p/9506980.html)\uff0c\u4e2a\u4eba\u89c9\u5f97\u8bb2\u7684\u6700\u6e05\u695a\u3002\u672c\u9898\u7684\u5927\u90e8\u5206\u601d\u60f3\u5747\u53ef\u53c2\u8003[\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09](https://www.luogu.org/problem/P3391)\u3002\n\n$FHQ\\space Treap$\u4e2d\u7684$split$\u64cd\u4f5c\u53ef\u4ee5\u5c06**\u4e00\u9897**\u5b8c\u6574\u7684\u5e73\u8861\u6811\u4ee5\u67d0\u4e2a\u503c\u4e3a\u8fb9\u754c\u5206\u6210**\u4e24\u9897**\u5e73\u8861\u6811\uff0c\u800c$merge$\u64cd\u4f5c\u5219\u53ef\u4ee5\u5c06**\u4e24\u9897**\u6709\u660e\u786e\u987a\u5e8f\u7684\u5e73\u8861\u6811\uff08\u4ee5\u67d0\u4e00\u503c\u4e3a\u5206\u754c\uff0c\u4e00\u9897\u5e73\u8861\u6811\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u7b49\u4e8e\u6b64\u503c\uff0c\u800c\u53e6\u4e00\u9897\u5e73\u8861\u6811\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u6b64\u503c\uff09\u5408\u5e76\u6210**\u4e00\u9897**\u5e73\u8861\u6811\u3002\n\n\u57fa\u4e8e\u4ee5\u4e0a\u4e24\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u533a\u95f4\u52a0\u548c\u533a\u95f4\u6c42\u503c\u3002\n\n\u6211\u4eec\u9700\u8981\u5c06\u5f85\u64cd\u4f5c\u533a\u95f4\u72ec\u7acb\u51fa\u6765\u3002\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5e8f\u5217\u5404\u6570\u4e4b\u95f4\u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u6574\u4e2a\u5e73\u8861\u6811\u8986\u76d6\u533a\u95f4$[1,n]$\u3002\u5047\u8bbe\u5f85\u64cd\u4f5c\u533a\u95f4\u4e3a$[l,r]$\uff0c\u6211\u4eec\u5148\u5c06\u5e73\u8861\u6811$split$\u6210$[1,r],[r+1,n]$\u4e24\u9897\u6811\uff0c\u7136\u540e\u518d\u5c06$[1,r]$\u5206\u6210$[1,l-1],[l,r]$\u4e24\u68f5\u6811\u3002\u4e8e\u662f\uff0c$[l,r]$\u533a\u95f4\u5c31\u88ab\u72ec\u7acb\u51fa\u6765\u4e86\u3002\n\n\u5148\u8003\u8651\u8be2\u95ee\u64cd\u4f5c\u3002\u6211\u4eec\u5728\u5e73\u8861\u6811\u6bcf\u4e2a\u8282\u70b9\u4e0a\u591a\u7ef4\u62a4\u4e00\u4e2a$sum$\u4fe1\u606f\uff0c\u8868\u793a\u5305\u542b\u5b83\u5728\u5185\u7684\u6574\u9897\u5b50\u6811\u7684\u8282\u70b9\u503c\u4e4b\u548c\uff08\u5728$update$\u7684\u65f6\u5019\u6ce8\u610f$sum$\u4e5f\u8981\u66f4\u65b0\uff09\u3002\u7531\u4e8e$[l,r]$\u5df2\u7ecf\u88ab\u72ec\u7acb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f93\u51fa\u8fd9\u6bb5\u5e73\u8861\u6811\u6839\u7684$sum$\u5373\u53ef\u3002\n\n\u7136\u540e\u662f\u4fee\u6539\u64cd\u4f5c\u3002\u5982\u679c\u66b4\u529b\u66f4\u65b0\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0$[l,r]$\u6574\u9897\u5e73\u8861\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u3002\u56de\u60f3\u8d77\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\uff0c\u518d\u7ed3\u5408\u6587\u827a\u5e73\u8861\u6811\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u5728$[l,r]$\u7684\u6839\u4e0a\u9762\u6253\u4e0a\u6807\u8bb0\uff08$lazy\\space tag$\uff09\u3002\u5728\u9700\u8981\u8bbf\u95ee$[l,r]$\u7684\u5b50\u8282\u70b9\u65f6\uff0c\u53ea\u9700\u5c06\u6839\u7684\u6807\u8bb0\u63a8\u5bfc\u5de6\u53f3\u513f\u5b50\u4e0a\uff0c\u540c\u65f6\u66f4\u65b0\u5de6\u53f3\u513f\u5b50\u7684\u503c\u5373\u53ef\u3002\n\n\u6700\u540e\u8bb0\u5f97\u5c06\u5206\u5f00\u7684\u51e0\u68f5\u6811\u518d$merge$\u8d77\u6765\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<vector>\nusing namespace std;\nint ch[200000][2],rnd[200000];\nlong long val[200000],sum[200000],tag[200000],sz[200000];\nint SJ=347,CS=233,JS=59,MOD=6662333;\nint root=0,cnt=0;\nint sj()\n{\n\tSJ=(SJ*CS+JS)%MOD;\n\treturn SJ;\n}\nvoid update(int node)\n{\n\tsz[node]=sz[ch[node][0]]+sz[ch[node][1]]+1;\n\tsum[node]=sum[ch[node][0]]+sum[ch[node][1]]+val[node];\n}\nint newnode(long long a)\n{\n\tsz[++cnt]=1;\n\trnd[cnt]=sj();\n\tval[cnt]=sum[cnt]=a;\n\treturn cnt;\n}\nvoid pushdown(int node)\n{\n\ttag[ch[node][0]]+=tag[node];\n\ttag[ch[node][1]]+=tag[node];\n\tval[ch[node][0]]+=tag[node];\n\tval[ch[node][1]]+=tag[node];\n\tsum[ch[node][0]]+=sz[ch[node][0]]*tag[node];\n\tsum[ch[node][1]]+=sz[ch[node][1]]*tag[node];\n\ttag[node]=0;\n}\nint merg(int x,int y)\n{\n\tif(!x||!y)return x+y;\n\tpushdown(x);pushdown(y);\n\tif(rnd[x]<rnd[y]){ch[x][1]=merg(ch[x][1],y);update(x);return x;}\n\telse{ch[y][0]=merg(x,ch[y][0]);update(y);return y;}\n}\nvoid split(int node,int k,int&x,int&y)\n{\n\tif(!node){x=y=0;return;}\n\tpushdown(node);\n\tif(k>=sz[ch[node][0]]+1){x=node;split(ch[node][1],k-(sz[ch[node][0]]+1),ch[node][1],y);}\n\telse{y=node;split(ch[node][0],k,x,ch[node][0]);}\n\tupdate(node);\n}\nint n,m;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tlong long a;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&a);\n\t\troot=merg(root,newnode(a));\n\t}\n\tint op,b,c,x,y,z;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&op,&b,&c);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%lld\",&a);\n\t\t\tsplit(root,c,y,z);split(y,b-1,x,y);\n\t\t\ttag[y]+=a;sum[y]+=sz[y]*a;val[y]+=a;\n\t\t\troot=merg(merg(x,y),z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsplit(root,c,y,z);split(y,b-1,x,y);\n\t\t\tprintf(\"%lld\\n\",sum[y]);\n\t\t\troot=merg(merg(x,y),z);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1564813063,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\n[\u4f20\u9001\u95e8 \u6d1b\u8c37P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u68111](https://www.luogu.org/problem/P3372)\n# \u5199\u5728\u524d\u9762\n\n\n#### \u7ebf\u6bb5\u6811\u4f5c\u4e3a\u4e00\u79cd\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728NOI\u7cfb\u5217\u7ade\u8d5b\u4e2d\u8003\u7684\u7279\u522b\u591a\uff0c\u5e94\u7528\u5341\u5206\u5e7f\u6cdb\u3002\u6211\u4f5c\u4e3a\u4e00\u4e2a\u521a\u5b66\u7ebf\u6bb5\u6811\u7684\u5c0f\u849f\u84bb\uff0c\u6211\u51b3\u5b9a\u5199\u4e00\u7bc7\u535a\u5ba2\u6765\u603b\u7ed3\u8be5\u77e5\u8bc6\u70b9\uff0c\u4ee5\u66f4\u597d\u7684\u638c\u63e1\u548c\u719f\u7ec3\u8fd0\u7528\u8be5\u77e5\u8bc6\u70b9\u3002\n\n\n------------\n\n# \u7b97\u6cd5\u5185\u5bb9\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u7ef4\u62a4**\u533a\u95f4\u4fe1\u606f**\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u7ef4\u62a4\u6240\u6709\u5177\u5907**\u533a\u95f4\u53ef\u52a0\u51cf\u6027**\u7684\u95ee\u9898\u3002\u6d1b\u8c37\u7684\u6a21\u677f$1$\u8981\u6c42\u4e00\u79cd\u652f\u6301**\u533a\u95f4\u4fee\u6539**\uff08\u52a0\u51cf\uff09\u548c**\u533a\u95f4\u8be2\u95ee**\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u7ebf\u6bb5\u6811\u53ef\u4ee5**\u5b8c\u7f8e**\u7684\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\u3002\u76f8\u6bd4\u4e8e~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a\u5199\uff08\u9003~~$treap$\u6765\u8bf4\uff0c\u7ebf\u6bb5\u6811**\u7801\u91cf\u5c0f\uff0c\u6613\u5b9e\u73b0\uff0c\u8c03\u8bd5\u96be\u5ea6\u4f4e**\uff0c\u662f\u50cf\u6211\u4e00\u6837**\u849f\u84bb**\u7684\u4eba\u7684\u4e0d\u4e8c\u9009\u62e9\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u8282\u70b9\u5305\u62ec\u51e0\u4e2a\u4fe1\u606f\uff1a\u533a\u95f4\u7684\u5de6\u53f3\u6807\u8bb0\u3001\u533a\u95f4\u7684\u6743\u503c\u548c\u4ee5\u53ca\u61d2\u6807\u8bb0\uff08\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u7684\u4f18\u5316\uff09\u3002\n\u50cf\u8fd9\u6837\uff1a\n```cpp\nstruct node{\n\tint l,r,w,lz;\n}t[4*100005];\n```\n\n------------\n\n### \u63a5\u4e0b\u6765\u8ba9\u6211\u7b80\u5355\u8bb2\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\uff1a\n#### $ $ $ $ $I$ $ $ $ $ $ $ \u5efa\u6811\u2014\u2014\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\n$1^o$ \u6807\u8bb0\u5de6\u53f3\u533a\u95f4\n\n$2^o$ \u5224\u65ad\u662f\u5426\u4e3a\u5355\u4e2a\u8282\u70b9\n\n$3^o$ \u9012\u5f52\u5efa\u7acb\u5de6\u53f3\u5b50\u6811\n\n$4^o$ \u7d2f\u52a0\u5de6\u53f3\u5b50\u8282\u70b9\u548c\n\n**\u4ee3\u7801\u5b9e\u73b0**\n```cpp\nvoid build(int p,int l,int r){\n\tt[p].l=l,t[p].r=r;\n\tif(l==r){\n\t\tt[p].w=a[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(2*p,l,mid);\n\tbuild(2*p+1,mid+1,r);\n\tt[p].w=t[2*p].w+t[2*p+1].w;\n}\n```\n\n------------\n\n#### $ $ $II$ $ $ \u61d2\u6807\u8bb0\u2014\u2014\u5c06\u4fee\u6539\u7684\u5185\u5bb9\u6682\u65f6\u4fdd\u5b58\u5728\u61d2\u6807\u8bb0\u4e2d\n$1^o$ \u5de6\u53f3\u5b50\u8282\u70b9\u6743\u503c\u52a0\u4e0a\u5de6\u53f3\u533a\u95f4\u957f\u5ea6\u4e58\u4ee5\u7236\u8282\u70b9\u61d2\u6807\u8bb0\n\n$2^o$ \u5c06\u7236\u8282\u70b9\u61d2\u6807\u8bb0\u7d2f\u52a0\u7ed9\u5de6\u53f3\u5b50\u8282\u70b9\n\n$3^o$ \u7236\u8282\u70b9\u61d2\u6807\u8bb0\u6e05\u96f6\n\n**\u4ee3\u7801\u5b9e\u73b0**\n```cpp\nvoid lazy(int p){\n\tif(t[p].lz){\n\t\tt[2*p].w+=t[p].lz*(t[2*p].r-t[2*p].l+1);\n\t\tt[2*p+1].w+=t[p].lz*(t[2*p+1].r-t[2*p+1].l+1);\n\t\tt[2*p].lz+=t[p].lz;\n\t\tt[2*p+1].lz+=t[p].lz;\n\t\tt[p].lz=0;\n\t}\n}\n```\n\n------------\n\n#### $III$ \u533a\u95f4\u4fee\u6539\n\u4e00\u3001\u4fee\u6539\u533a\u95f4\u5305\u542b\u5f53\u524d\u533a\u95f4\n\n$1^o$ \u5f53\u524d\u8282\u70b9\u6743\u503c\u52a0\u4e0a\u4fee\u6539\u6570\u503c\u4e58\u4ee5\u5f53\u524d\u533a\u95f4\u957f\u5ea6\n\n$2^o$ \u8282\u70b9\u61d2\u6807\u8bb0\u52a0\u4e0a\u4fee\u6539\u6570\u503c\n\n\u4e8c\u3001\u4fee\u6539\u533a\u95f4\u4e0d\u5305\u542b\u5f53\u524d\u533a\u95f4\n\n$1^o$ \u4e0b\u4f20\u61d2\u6807\u8bb0\n\n$2^o$ \u9012\u5f52\u4fee\u6539\u5de6\u53f3\u5b50\u8282\u70b9\n\n$3^o$ \u4fee\u6539\u7236\u8282\u70b9\u6743\u503c\u548c\u4e3a\u5de6\u53f3\u5b50\u8282\u70b9\u6743\u503c\u4e4b\u548c\n\n**\u4ee3\u7801\u5b9e\u73b0**\n```cpp\nvoid change(int p,int l,int r,int x){\n    if(t[p].l>=l&&t[p].r<=r){\n        t[p].w+=x*(t[p].r-t[p].l+1);\n        t[p].lz+=x;\n        return;\n    }\n    lazy(p);\n    int mid=t[p].r+t[p].l>>1;\n    if(l<=mid)\n        change(2*p,l,mid,x);\n    if(r>=mid+1)\n        change(2*p+1,mid+1,r,x);\n    t[p].w=t[2*p].w+t[2*p+1].w;\n}\n```\n\n------------\n\n#### $IV$ $ $ \u533a\u95f4\u67e5\u8be2\n\n\u4e00\u3001\u67e5\u8be2\u533a\u95f4\u5305\u542b\u5f53\u524d\u533a\u95f4\n\n$1^o$ \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u6743\u503c\n\n\u4e8c\u3001\u67e5\u8be2\u533a\u95f4\u4e0d\u5305\u542b\u5f53\u524d\u533a\u95f4\n\n$1^o$ \u4e0b\u4f20\u61d2\u6807\u8bb0\n\n$2^0$ \u7b54\u6848\u7d2f\u52a0\u5de6\u53f3\u5b50\u6811\u67e5\u8be2\u7ed3\u679c\n\n**\u4ee3\u7801\u5b9e\u73b0**\n```cpp\nint query(int p,int l,int r){\n    if(t[p].l>=l&&t[p].r<=r){\n        return t[p].w;\n    }\n    lazy(p);\n    int mid=t[p].r+t[p].l>>1,ans=0;\n    if(l<=mid)\n        ans+=query(2*p,l,mid);\n    if(r>=mid+1)\n        ans+=query(2*p+1,mid+1,r);\n    return ans;\n}\n```\n\n------------\n### \u4ee5\u4e0a\u5c31\u662f\u89e3\u51b3\u672c\u9898\u6240\u9700\u7684\u56db\u79cd\u57fa\u672c\u64cd\u4f5c\uff0c\u849f\u84bb\u4eec\u9700\u8981\u719f\u7ec3\u638c\u63e1\u4e0e\u8fd0\u7528\uff01\n\n\n------------\n# \u6587\u7ae0\u7ed3\u5c3e\n### \u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\n#### \u5927\u90e8\u5206\u7ec6\u8282\u5df2\u5728\u4e0a\u4e00\u90e8\u5206\u5b9e\u73b0\uff0c\u5c31\u4e0d\u5728\u4ee3\u7801\u4e2d\u518d\u8d58\u8ff0\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\n#define int long long \nusing namespace std;\nint n,m,a[100005],op;\nstruct node{\n    int l,r,w,lz;\n}t[4*100005];\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||'9'<ch){if(ch=='-')f=-1;ch=getchar();}\n    while('0'<=ch&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid build(int p,int l,int r){\n\tt[p].l=l,t[p].r=r;\n\tif(l==r){\n\t\tt[p].w=a[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(2*p,l,mid);\n\tbuild(2*p+1,mid+1,r);\n\tt[p].w=t[2*p].w+t[2*p+1].w;\n}\nvoid lazy(int p){\n\tif(t[p].lz){\n\t\tt[2*p].w+=t[p].lz*(t[2*p].r-t[2*p].l+1);\n\t\tt[2*p+1].w+=t[p].lz*(t[2*p+1].r-t[2*p+1].l+1);\n\t\tt[2*p].lz+=t[p].lz;\n\t\tt[2*p+1].lz+=t[p].lz;\n\t\tt[p].lz=0;\n\t}\n}\nvoid change(int p,int l,int r,int x){\n    if(t[p].l>=l&&t[p].r<=r){\n        t[p].w+=x*(t[p].r-t[p].l+1);\n        t[p].lz+=x;\n        return;\n    }\n    lazy(p);\n    int mid=t[p].r+t[p].l>>1;\n    if(l<=mid)\n        change(2*p,l,r,x);\n    if(r>=mid+1)\n        change(2*p+1,l,r,x);\n    t[p].w=t[2*p].w+t[2*p+1].w;\n}\nint query(int p,int l,int r){\n    if(t[p].l>=l&&t[p].r<=r){\n        return t[p].w;\n    }\n    lazy(p);\n    int mid=t[p].r+t[p].l>>1;\n    int ans=0;\n    if(l<=mid)\n        ans+=query(2*p,l,r);\n    if(r>=mid+1)\n        ans+=query(2*p+1,l,r);\n    return ans;\n}\nsigned main(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n        a[i]=read();\n    build(1,1,n);\n    while(m--){\n        op=read();\n        int x,y,z;\n        if(op==1){\n            x=read();y=read();z=read();\n            change(1,x,y,z);\n        }\n        else{\n            x=read(),y=read();\n            printf(\"%lld\\n\",query(1,x,y));\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1564811058,
        "uid": 62246,
        "name": "Del_Your_Heart",
        "ccfLevel": 0,
        "title": "\u6d45\u8c08\u7ebf\u6bb5\u6811"
    },
    {
        "content": "### \u524d\u8a00\n\n------------\n\n#### \u4e4b\u524d\u6253\u8fc7\u4e00\u6b21\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u4eca\u5929\u67e5\u6f0f\u8865\u7f3a\u65f6\u4e00\u770b\u6211\u90a3\u4e00\u4e1d\u6ce8\u91ca\u90fd\u6ca1\u6709\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u6211\u60ca\u5947\u7684\u53d1\u73b0\u6211\u7adf\u7136\u770b\u4e0d\u61c2\u6211\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u2026\u2026\u4e8e\u662f\u6211\u5c31\u8be6\u7ec6\u7684\u6253\u4e0a\u4e86\u6ce8\u91ca\u3002\u8ba9\u6211\u534a\u5e74\u540e\u4e00\u770b\u4e5f\u80fd\u660e\u767d\u6211\u6253\u7684\u662f\u4ec0\u4e48\u2026\u2026\n\n\n------------\n\n\u8fd9\u662f[P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problemnew/show/P3372)\uff08\u4e00\u9053\u6a21\u677f\u9898\uff09\u7684\u9898\u89e3\u3002~~\u6211\u80af\u5b9a\u662f\u75af\u6389\u4e86\uff0c\u5199\u8fd9\u4e48\u591a\u9898\u89e3\u7684\u9898\u7684\u9898\u89e3~~\u3002\n\n\n\u8fd9\u53ea\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u9898\u3002\u9898\u610f\u6ca1\u6709\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u53ea\u662f\u4ee3\u7801\u5b9e\u73b0\u548c\u8fc7\u7a0b\u7406\u89e3\u3002\n\n\u4ee3\u7801\u91cc\u6709\u5f88\u591a\u6ce8\u91ca\uff0c\u6253\u4e86\u6211\u534a\u5929\u5462\uff01\n\n## Code\n\n```cpp\n#include<cstdio>\nusing namespace std;\nlong long n,m,sign,x,y,k,d[1000010];\nstruct node\n{\n    long long val,l,r,tag;\n}tree[1000010];\nvoid build(long long point,long long l,long long r)\n{//point\u8868\u793a\u5f53\u524d\u67e5\u5230\u7684\u70b9\uff0cl\u548cr\u8868\u793a\u5f53\u524d\u5efa\u5230\u7684\u533a\u95f4 \n    tree[point].tag=0;//\u6e05\u7a7a\u5f53\u524d\u67e5\u5230\u7684\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u61d2\u6807\u8bb0 \n    if(l==r)//\u5982\u679c\u5f53\u524d\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u76f8\u7b49\uff0c\u8bf4\u660e\u5f53\u524d\u70b9\u6ca1\u6709\u5de6\u53f3\u513f\u5b50 \n    {//\u90a3\u5b83\u80af\u5b9a\u5c31\u662f\u53f6\u8282\u70b9\u5566 \n    \ttree[point].val=d[l];//\u76f4\u63a5\u8d4b\u503c \n        return;//\u6ca1\u6709\u513f\u5b50\u53ef\u4ee5\u4e3a\u5b83\u8d21\u732e\uff0c\u90a3\u5c31\u5230\u5b83\u4e3a\u5b83\u7236\u4eb2\u8d21\u732e\u4e86 \n    }//\u80fd\u8fd0\u884c\u5230\u8fd9\u91cc\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u662f\u7236\u4eb2\u8282\u70b9 \n    long long mid;//\u53d6\u4e00\u4e2a\u5f53\u524d\u533a\u95f4\u7684\u4e2d\u95f4\u503c \n    mid=(l+r)/2;//\u628a\u5b83\u81ea\u5df1\u7684\u533a\u95f4\u5206\u6210\u4e24\u534a\uff0c\u4e00\u534a\uff08l\u2014mid\uff09\u7ed9\u5de6\u513f\u5b50\uff0c\u53e6\u4e00\u534a\uff08mid+1\u2014r\uff09\u7ed9\u53f3\u513f\u5b50 \n    build(point*2,l,mid);//\u5efa\u4ee5\u5de6\u513f\u5b50\u4e3a\u6839\u8282\u70b9\u7684\u6811 \n    build(point*2+1,mid+1,r);//\u5efa\u4ee5\u53f3\u513f\u5b50\u4e3aroot\u7684\u6811 \n    tree[point].val=tree[point*2].val+tree[point*2+1].val;//\u5f53\u524d\u70b9\u7684\u8d21\u732e\u7b49\u4e8e\u5b83\u5de6\u513f\u5b50\u7684\u8d21\u732e\u52a0\u5b83\u53f3\u513f\u5b50\u7684\u8d21\u732e \n    return ;//\u5efa\u5b8c\u5f53\u524d\u8282\u70b9\uff0c\u56de\u6eaf \n}\nvoid push_down(long long point,long long l,long long r)\n{//point\u8868\u793a\u8981\u91ca\u653e\u61d2\u6807\u8bb0\u7684\u70b9\uff0cl\u548cr\u8868\u793apoint\u6240\u4ee3\u8868\u7684\u533a\u95f4 \n    long long mid;\n    mid=(l+r)/2;\n    tree[point*2].tag+=tree[point].tag;//\u5b83\u5de6\u513f\u5b50\u8981\u63a5\u4f4f\u5b83\u91ca\u653e\u51fa\u6765\u7684\u61d2\u6807\u8bb0\uff0c\u65b9\u4fbf\u5de6\u513f\u5b50\u81ea\u5df1\u91ca\u653e\u7ed9\u5de6\u513f\u5b50\u7684\u513f\u5b50\uff08\u6709\u70b9\u6655\u4e0d\uff1f\uff09 \n    tree[point*2].val+=tree[point].tag*(mid-l+1);//\u5de6\u513f\u5b50\u7684\u6743\u503c\u8981\u52a0\u4e0a\uff08\u4e0d\u662f\u7b49\u4e8e\uff09\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4\u5185\u7684\u70b9\u7684\u6570\u91cf\u7684\u61d2\u6807\u8bb0\uff0c\u56e0\u4e3a\u5b83\u81ea\u5df1\u7684\u6743\u503c\u7b49\u4e8e\u5b83\u513f\u5b50\u7684\u6743\u503c\n    tree[point*2+1].tag+=tree[point].tag;//\u65e2\u7136\u5b83\u7684\u513f\u5b50\u90fd\u8981\u52a0\u4e0a\u81ea\u5df1\u7684\u6743\u503c\uff0c\u90a3\u4e0d\u5c31\u7b49\u4e8e\u5b83\u52a0\u4e0a\u5b83\u513f\u5b50\u7684\u6570\u91cf\u7684\u61d2\u6807\u8bb0\u5417\uff1f \n    tree[point*2+1].val+=tree[point].tag*(r-mid);//\u8fd9\u53e5\u548c\u4e0a\u4e00\u53e5\u6ca1\u4ec0\u4e48\u4e0d\u540c\uff0c\u53ea\u662f\u5bf9\u53f3\u513f\u5b50\u7684\u91ca\u653e\u61d2\u6807\u8bb0\u64cd\u4f5c \n    tree[point].tag=0;//\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u91ca\u653e\u5b8c\u6bd5\uff08\u76ee\u7684\u5c31\u662f\u4f20\u7ed9\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\uff09\uff0c\u6240\u4ee5\u61d2\u6807\u8bb0\u6e050 \n}\nvoid update(long long nowl,long long nowr,long long l,long long r,long long point,long long num)\n{//nowl\u548cnowr\u5206\u522b\u8868\u793a\u5f53\u524d\u67e5\u8be2\u5230\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0cl\u548cr\u8868\u793a\u8981\u4fee\u6539\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0cpoint\u8868\u793a\u5f53\u524d\u67e5\u8be2\u5230\u7684\u70b9\uff0cnum\u8868\u793a\u8981\u5728\u76ee\u6807\u533a\u95f4\u52a0\u4e0a\u7684\u6570 \n    if(l<=nowl && r>=nowr)//\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6bd4\u76ee\u6807\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8981\u53f3\uff08\u5efa\u8bae\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n    {//\u800c\u4e14\uff08\u6ce8\u610f\"\u800c\u4e14\"\uff09\u53f3\u7aef\u70b9\u6bd4\u76ee\u6807\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u8981\u5de6\uff0c\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u88ab\u76ee\u6807\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u4e86\uff08\u5efa\u8bae\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n        tree[point].val+=num*(nowr-nowl+1);//\u5f53\u524d\u7684\u70b9\u7684\u6743\u503c\u8981\u52a0\u4e0a\u533a\u95f4\u5185\u7684\u70b9\u7684\u6570\u91cf\uff08nowr-nowl+1\uff09\u7684num \n        tree[point].tag+=num;//\u5f53\u524d\u70b9\u7684\u61d2\u6807\u8bb0\u8981\u52a0\u4e0anum\uff08\u8868\u793a\u5f53\u524d\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u8981\u52a0\u4e0a\u61d2\u6807\u8bb0\uff08\u4e5f\u5c31\u662fnum\uff09\uff09 \n        return ;//\u56de\u5230\u4e0a\u4e00\u5c42 \n    }\n    push_down(point,nowl,nowr);//\u80fd\u8fd0\u884c\u5230\u8fd9\u91cc\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u6ca1\u6709\u88ab\u76ee\u6807\u533a\u95f4\u5b8c\u5168\u8986\u76d6\uff0c\u90a3\u5c31\u91ca\u653e\u5f53\u524d\u7684\u61d2\u6807\u8bb0 \n    long long mid=(nowl+nowr)/2;//\u628a\u5f53\u524d\u533a\u95f4\u5288\u6210\u4e24\u534a \n    if(l<=mid)//\u5982\u679c\u76ee\u6807\u533a\u95f4\u5728\u5f53\u524d\u533a\u95f4\u7684\u4e00\u534a\u7684\u5de6\u8fb9\u65f6 \n        update(nowl,mid,l,r,point*2,num);//\u5c31\u53bb\u67e5\u627e\u5de6\u513f\u5b50\uff08\u76ee\u7684\u662f\u627e\u5230\u5e76\u4fee\u6539\u76ee\u6807\u533a\u95f4\uff09 \n    if(r>mid)//\u5bf9\u53f3\u513f\u5b50\u64cd\u4f5c\uff0c\u6b65\u9aa4\u76f8\u540c \n        update(mid+1,nowr,l,r,point*2+1,num);\n    tree[point].val=tree[point*2].val+tree[point*2+1].val;//\u7ef4\u62a4\u4fee\u6539\u540e\u7684\u70b9\u6743 \n    return ;\n}\nlong long query(long long nowl,long long nowr,long long l,long long r,long long point)\n{//nowl\u548cnowr\u5206\u522b\u8868\u793a\u5f53\u524d\u67e5\u8be2\u5230\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0cl\u548cr\u8868\u793a\u8981\u4fee\u6539\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0cpoint\u8868\u793a\u5f53\u524d\u67e5\u8be2\u5230\u7684\u70b9\n    long long sum=0;//\u533a\u95f4\u548c \n    if(nowl>r || nowr<l) //\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5728\u76ee\u6807\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u53f3\u8fb9\u6216\u8005\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5728\u76ee\u6807\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u5de6\u8fb9\u65f6 \n\t\treturn 0;//\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u548c\u76ee\u6807\u533a\u95f4\u6ca1\u6709\u4e00\u70b9\u91cd\u5408\u7684\u5730\u65b9\uff0c\u5f53\u524d\u533a\u95f4\u6ca1\u6709\u6211\u8981\u67e5\u8be2\u7684\u4e1c\u897f\uff0c\u8fd4\u56de0 \n    if(l<=nowl && r>=nowr)//\u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6bd4\u76ee\u6807\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8981\u53f3\u800c\u4e14\uff08\u6ce8\u610f\"\u800c\u4e14\"\uff09\u53f3\u7aef\u70b9\u6bd4\u76ee\u6807\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u8981\u5de6\n        return tree[point].val;//\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u88ab\u76ee\u6807\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u6743\u503c\uff08\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u7684\u70b9\u7684\u603b\u6743\u503c\uff09 \n    long long mid=(nowl+nowr)/2;//\u80fd\u8fd0\u884c\u5230\u8fd9\u91cc\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u548c\u76ee\u6807\u533a\u95f4\u6709\u91cd\u5408\u7684\u5730\u65b9 \n    push_down(point,nowl,nowr);//\u5148\u91ca\u653e\uff0c\u518d\u67e5\u8be2 \n    if(l<=mid)//\u5982\u679c\u76ee\u6807\u533a\u95f4\u5728\u5f53\u524d\u533a\u95f4\u7684\u4e00\u534a\u7684\u5de6\u8fb9\u65f6\uff0c\u533a\u95f4\u548c\u52a0\u4e0a\u67e5\u8be2\u5de6\u8fb9\u533a\u95f4\u4e2d\u76ee\u6807\u533a\u95f4\u7684\u548c\n        sum+=query(nowl,mid,l,r,point*2);//\u4e0d\u7528\u62c5\u5fc3\u4f1a\u52a0\u5230\u76ee\u6807\u533a\u95f4\u4ee5\u5916\u7684\u6570\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u76ee\u6807\u533a\u95f4\u4f1a\u8fd4\u56de0\n    if(r>mid)//\u76f8\u540c\u64cd\u4f5c\uff0c\u67e5\u8be2\u53f3\u8fb9 \n        sum+=query(mid+1,nowr,l,r,point*2+1);//\u52a0\u4e0a\u53f3\u8fb9\u76ee\u6807\u533a\u95f4\u7684\u6743\u503c \n    return sum;//\u56de\u6eaf\u533a\u95f4\u548c \n}\nint main()\n{\n    scanf(\"%lld %lld\",&n,&m);\n    for(long long i=1;i<=n;i++)\n    \tscanf(\"%lld\",&d[i]);\n    build(1,1,n);//\u5efa\u6811 \n    for(long long i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&sign);\n        if(sign==1)\n        {\n            scanf(\"%lld %lld %lld\",&x,&y,&k);\n            update(1,n,x,y,1,k);//\u533a\u95f4\u4fee\u6539 \n        }\n        else\n        {\n            scanf(\"%lld %lld\",&x,&y);\n            printf(\"%lld\\n\",query(1,n,x,y,1));//\u533a\u95f4\u67e5\u8be2 \n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1562984417,
        "uid": 110623,
        "name": "2018\u674e\u6cfd\u660e",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811"
    },
    {
        "content": "#### \u7ebf\u6bb5\u6811\u6a21\u677f\u9898\n\n## \u6240\u4ee5\uff0c\u6211\u504f\u4e0d\u7528\u7ebf\u6bb5\u6811\n\n~~\u5947\u4e86\u602a\u4e86~~\n\n### \u4e3b\u8981\u601d\u8def\uff1a\u5e73\u8861\u6811\u2014\u2014Splay\n\nSplay\u662f\u53ef\u4ee5\u5f88\u597d\u7684\u7ef4\u62a4\u533a\u95f4\u7684\u3002\n\n\u6211\u8fd9\u91cc\u4e3b\u8981\u8bb2\u5982\u4f55\u7528Splay\u7ef4\u62a4\u533a\u95f4\u3002\n\n\u6211\u4eec\u77e5\u9053Splay\u662f\u4e25\u683c\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u7684\uff0c\u7528rotate\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u6539\u53d8\u8fd9\u79cd\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u70b9\u3002\n\n\u5982\u679c\u6211\u4eec\u628a\u5de6\u7aef\u70b9splay\u5230\u6811\u6839\uff0c\u628a\u53f3\u7aef\u70b9splay\u5230\u6811\u6839\u7684\u53f3\u513f\u5b50\u4f4d\u7f6e\uff0c\u6211\u4eec\u518d\u505a\u4e0b\u4e2d\u5e8f\u904d\u5386\uff0c\uff0c\uff0c\uff08\u53ef\u4ee5\u81ea\u884c\u8111\u8865\uff09\n\n\u662f\u4e0d\u662f\u6839\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u7684\u4fe1\u606f\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u7684\u4fe1\u606f\uff1f\n\n\u6240\u4ee5\u6211\u4eec\u7528Splay\u7ef4\u62a4\u533a\u95f4\u65f6\u6211\u4eec\u662f\u63d0\u53d6\u533a\u95f4\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n#### \uff08\u798f\u5229\uff1a\u5176\u4e2d\u8fd8\u6709\u63d2\u5165\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u7b49\u64cd\u4f5c\u54e6QwQ\uff0c\u9644\u5e26\u8282\u70b9\u5783\u573e\u6876\uff0c\u53ef\u56de\u6536\u65e7\u7ed3\u70b9\uff09\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define ld long double\n#define fi first\n#define se second\n#define inf 1 << 30\n#define ll long long\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\ninline ll read()\n{\n    ll x = 0, f = 1;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n    {\n        if (ch == '-')\n            f = -f;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\nvector<int> ljt;\nstruct tree\n{\n    int ch[2], sze, fa;\n    ll w, sum, col;\n    tree(int _sze = 0, int _fa = 0, int _w = 0, int _sum = 0, int _col = 0)\n        : sze(_sze), fa(_fa), w(_w), sum(_sum), col(_col) { ch[1] = ch[0] = 0; }\n} z[mn];\nint n, m, tot, a[mn];\ninline int newnode(int v = 0)\n{\n    int rt;\n    if (ljt.empty())\n        rt = ++tot;\n    else\n        rt = ljt.back(), ljt.pop_back();\n    z[rt].fa = z[rt].ch[0] = z[rt].ch[1] = 0;\n    z[rt].sze = 1;\n    z[rt].w = z[rt].sum = v;\n    return rt;\n}\ninline void deletenode(int rt)\n{\n    z[rt].fa = z[rt].ch[0] = z[rt].ch[1] = z[rt].w = z[rt].sum = 0;\n    z[rt].sze = 1;\n    ljt.push_back(rt);\n}\ninline void update(int rt)\n{\n    z[rt].sum = z[rt].w, z[rt].sze = 1;\n    if(z[rt].ch[0])\n        z[rt].sum += z[z[rt].ch[0]].sum, z[rt].sze += z[z[rt].ch[0]].sze;\n    if(z[rt].ch[1])\n        z[rt].sum += z[z[rt].ch[1]].sum, z[rt].sze += z[z[rt].ch[1]].sze;\n}\ninline void push_col(int rt)\n{\n    if(z[rt].col)\n    {\n        z[z[rt].ch[0]].col += z[rt].col;\n        z[z[rt].ch[1]].col += z[rt].col;\n        z[z[rt].ch[0]].sum += z[z[rt].ch[0]].sze * z[rt].col;\n        z[z[rt].ch[1]].sum += z[z[rt].ch[1]].sze * z[rt].col;\n        z[z[rt].ch[0]].w += z[rt].col;\n        z[z[rt].ch[1]].w += z[rt].col;\n        z[rt].col = 0;\n    }\n}\ninline int iden(int rt)\n{\n    return z[z[rt].fa].ch[0] == rt ? 0 : 1;\n}\ninline void conn(int x, int y, int son)\n{\n    z[x].fa = y;\n    z[y].ch[son] = x;\n}\ninline void rotate(int x)//\u6572\u597d\u8bb0\u7684rotate\u51fd\u6570\uff01\n{\n    int y = z[x].fa;\n    int moot = z[y].fa;\n    int yson = iden(x);\n    int mootson = iden(y);\n    int B = z[x].ch[yson ^ 1];\n    conn(B, y, yson), conn(y, x, yson ^ 1), conn(x, moot, mootson);\n    update(y), update(x);\n}\ninline void splay(int x, int &k)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    if (x == k)\n        return;\n    int p = z[k].fa;\n    while (z[x].fa != p)\n    {\n        push_col(x);\n        int y = z[x].fa;\n        if (z[y].fa != p)\n            rotate(iden(y) ^ iden(x) ? x : y);\n        rotate(x);\n    }\n    k = x;\n}\ninline int findkth(int rt, int k)\n{\n    while (233)\n    {\n        push_col(rt);\n        if (z[rt].ch[0] && k <= z[z[rt].ch[0]].sze)\n            rt = z[rt].ch[0];\n        else\n        {\n            if (z[rt].ch[0])\n                k -= z[z[rt].ch[0]].sze;\n            if (!--k)\n                return rt;\n            rt = z[rt].ch[1];\n        }\n    }\n}\ninline void insert(int &rt, int p, int v)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    int x = findkth(rt, p);\n    splay(x, rt);\n    int y = findkth(rt, p + 1);\n    int ooo = z[rt].ch[1];\n    splay(y, ooo);\n    z[y].ch[0] = newnode(v);\n    z[z[y].ch[0]].fa = y;\n    update(z[y].ch[0]), update(y), update(x);\n}\ninline void erase(int &rt, int p)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    int y = findkth(rt, p);\n    splay(y, rt);\n    int x = findkth(rt, p + 1);\n    int ooo = z[rt].ch[1];\n    splay(x, ooo);\n    int oo = z[x].ch[1];\n    z[oo].fa = y;\n    z[y].ch[1] = oo;\n    deletenode(x);\n    update(y);\n}\ninline int getRange(int &rt, int l, int r)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    int x = findkth(rt, l);\n    splay(x, rt);\n    int y = findkth(rt, r + 2);\n    int ooo = z[rt].ch[1];\n    splay(y, ooo);\n    return z[y].ch[0];\n}\ninline void modify(int &rt, int l, int r, ll v)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    int x = getRange(rt, l, r);\n    z[x].col += v;\n    z[x].w += v;\n    z[x].sum += z[x].sze * v;\n    update(z[rt].ch[1]);\n    update(rt);\n}\ninline ll query(int &rt, int l, int r)//\u4f20\u5740\u8981\u6ce8\u610f\n{\n    int x = getRange(rt, l, r);\n    return z[x].sum;\n}\ninline void build(int rt, int l, int r)\n{\n    int m = (l + r) >> 1;\n    z[rt].w = a[m];\n    if (l <= m - 1)\n    {\n        z[rt].ch[0] = newnode();\n        z[z[rt].ch[0]].fa = rt;\n        build(z[rt].ch[0], l, m - 1);\n    }\n    if (m + 1 <= r)\n    {\n        z[rt].ch[1] = newnode();\n        z[z[rt].ch[1]].fa = rt;\n        build(z[rt].ch[1], m + 1, r);\n    }\n    update(rt);\n}\ninline void debug(int rt)//debug\u4e13\u7528\uff0c\u5229\u7528\u4e2d\u5e8f\u904d\u5386\n{\n    //if(!z[rt].ch[0] && !z[rt].ch[1])\n    //\treturn;\n    if (rt == 0)\n        return;\n    debug(z[rt].ch[0]);\n    printf(\"%d %d %d\\n\", z[rt].w, z[rt].sum, z[rt].sze);\n    debug(z[rt].ch[1]);\n}\nint main()\n{\n    n = read();\n    m = read();\n    go(i, 1, n, 1) a[i] = read();\n    int rot = ++tot;\n    build(rot, 0, n + 1);\n    //debug(rot);\n    //cout << query(rot, 1, n) << \"\\n\";\n    go(i, 1, m, 1)\n    {\n        int s = read(), x = read(), y = read();\n        if (s == 1)\n        {\n            int v = read();\n            modify(rot, x, y, v);\n        }\n        else\n        {\n            cout << query(rot, x, y) << \"\\n\";\n        }\n    }\n    return 0;\n}\n\n\n```\n\n#### \u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7Splay\u7684\u9898\u89e3\uff0c\u82e5\u6709\u4e0d\u6070\u5f53\u7684\u5730\u65b9\u8bf7\u5927\u5bb6\u6307\u6559",
        "postTime": 1537613600,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "###\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u9898\uff0c\u4f46\u662f\u7adf\u7136\u5927\u5bb6\u90fd\u53d1\u4e86\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\uff0c\u90a3\u6211\u5c31\u53d1\u4e00\u4efd\u6811\u72b6\u6570\u7ec4\u7684\u9898\u89e3\u5427###\n\n\uff08\u6811\u72b6\u6570\u7ec4\u80fd\u505a\u7684\uff0c\u7ebf\u6bb5\u6811\u4e00\u5b9a\u80fd\u505a;\u7ebf\u6bb5\u6811\u80fd\u505a\u7684\uff0c\u6811\u72b6\u6570\u7ec4\u4e0d\u4e00\u5b9a\u80fd\u505a\u3002\u4f46\u662f\u5404\u79cd\u65b9\u6cd5\u90fd\u503c\u5f97\u53bb\u5b66\u4e60\u4e0e\u638c\u63e1\uff0c\u5efa\u8bae\u65e2\u5199\u7ebf\u6bb5\u6811\u4e5f\u5199\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\u7684\u89e3\u6cd5\uff09\n\n##\u9996\u5148\u5927\u5bb6\u5fc5\u987b\u5f97\u719f\u6089\u6811\u72b6\u6570\u7ec4\u7684\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a##\n\n**1\u3001\u5355\u70b9\u4fee\u6539\uff1a**\n\n```cpp\nvoid update(int k,int num)     //k\u4e3a\u9700\u8981\u4fee\u6539\u7b2c\u51e0\u4e2a\u6570\uff0cnum\u4e3a\u589e\u91cf\n{\n    while(k<=n)\n    {\n        b[k]+=num;\n        k+=k&-k;\n    }\n}\n```\n**2\u3001\u533a\u95f4\u6c42\u548c\uff1a**\n\n```cpp\nint getsum(int k)             //\u6c42\u7b2c1\u9879\u5230\u7b2ck\u9879\u7684\u548c\n{\n    int sum=0;\n    while(k){sum+=b[k];k-=k&-k;}\n    return sum;\n}\n```\n\u6709\u4e86\u4ee5\u4e0a\u4e24\u4e2a\u64cd\u4f5c\uff0c\u518d\u52a0\u4e0a\u524d\u7f00\u548c\u7684\u77e5\u8bc6\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u7528\u6570\u5b66\u516c\u5f0f\u5de7\u89e3\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\u4e86\u3002\n\n##\u601d\u8def\uff1a##\n\n\uff08\u5f88\u6709\u8da3\u7684\u6570\u5b66\u5475\u5475\uff5e\uff09\u8bbe\u7f6eb[i]=a[i]-a[i-1]\uff0c\u5219\u6709\u7b49\u5f0f\uff1a\n\n\n**a[1]+a[2]+...+a[n]**\n\n\n**= (b[1]) + (b[1]+b[2]) + ... + (b[1]+b[2]+...+b[n])**\n\n**= n\\*b[1] + (n-1)\\*b[2] +... +b[n]**\n\n**= n \\* (b[1]+b[2]+...+b[n]) - (0\\*b[1]+1\\*b[2]+...+(n-1)\\*b[n])**\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4c[n]\uff0c\u5176\u4e2dc[i] = (i-1)\\*b[i],\u6bcf\u5f53\u4fee\u6539b\u7684\u65f6\u5019\uff0c\u5c31\u540c\u6b65\u4fee\u6539\u4e00\u4e0bc\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u4e0d\u4f1a\u6539\u53d8\u90a3\u4e48**\u539f\u5f0f=n\\*sigma(b,n) - sigma(c,n)**//sigma(b,n)\u8868\u793ab\u6570\u7ec4\u524dn\u4e2a\u6570\u7684\u548c\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3alog2n\uff09\n\n\u5b9e\u5728\u4e0d\u61c2\u6811\u72b6\u6570\u7ec4\u7684\u53ef\u4ee5\u53bb\u770b\u6211\u7684\u535a\u5ba2\uff1a[five20](http://www.cnblogs.com/five20/p/7544592.html)\n\n\u8fd9\u91cc\u4fbf\u53ef\u4ee5\u4e0a\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200005\nusing namespace std;\n#define ll long long\nll  a[maxn],b[maxn],c[maxn],n,m;\ninline ll getint()\n{\n    ll a=0;char x=getchar();bool f=0;\n    while((x<'0'||x>'9')&&x!='-')x=getchar();\n    if(x=='-')f=1,x=getchar();\n    while(x>='0'&&x<='9'){a=a*10+x-'0';x=getchar();}\n    return f?-a:a;\n}\nvoid update(ll *x,ll k,ll num)\n{\n    while(k<=n)\n    {\n        x[k]+=num;\n        k+=k&-k;\n    }\n}\nll read(ll *x,ll k)\n{\n    ll sum=0;\n    while(k){sum+=x[k];k-=k&-k;}\n    return sum;\n}\nint main()\n{\n    n=getint(),m=getint();\n    for(ll i=1;i<=n;i++){a[i]=getint();update(b,i,a[i]-a[i-1]);update(c,i,(i-1)*(a[i]-a[i-1]));}\n    while(m--)\n    {\n        ll x,y,z=getint(),q;\n        if(z==2){x=getint();y=getint();printf(\"%lld\\n\",y*read(b,y)-read(c,y)-(x-1)*read(b,x-1)+read(c,x-1));}\n        else {x=getint();y=getint();q=getint();update(b,x,q);update(b,y+1,-q);update(c,x,q*(x-1));update(c,y+1,-q*y);}\n    }\n    return 0;\n}\n```",
        "postTime": 1508067604,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "sgt\u8c03\u8d77\u6765\u5341\u5206\u82e6\u903c \u5f53\u5e74\u6211\u8c03\u4e861d \u7136\u800c\u6700\u8fd1\u53d1\u73b0\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u533a\u95f4\u4fee\u6539 \u5c31\u6c34\u4e86\u4e00\u53d1\u3002\u3002\u300226\u884c\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define LL long long\n#define MN 100500\nLL c1[MN],c2[MN];LL n,m;\nLL lb(LL x){return x&-x;}\nvoid addd(LL pos,LL data)\n{\n    for(LL i=pos;i<=n;i+=lb(i)) c1[i]+=data,c2[i]+=data*pos;\n}\nLL gsum(LL pos)\n{\n    LL ans=0;for(LL i=pos;i;i-=lb(i)) ans+=(pos+1)*c1[i]-c2[i];return ans;\n}\nint main()\n{\n    cin>>n>>m;for(LL i=1,_;i<=n;i++) cin>>_,addd(i,_),addd(i+1,-_);\n//    for(int i=1;i<=n;i++) cout<<\"#\"<<gsum(i)-gsum(i-1)<<\" \";cout<<endl;\n    for(LL i=1,_;i<=m;i++)\n    {\n        LL x,y,k;\n        cin>>_;if(_==1) cin>>x>>y>>k,addd(x,k),addd(y+1,-k);\n        if(_==2) cin>>x>>y,cout<<gsum(y)-gsum(x-1)<<endl;\n    }\n    //system(\"pause\");\n}\n```",
        "postTime": 1503710892,
        "uid": 19600,
        "name": "LittlePrincess",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "zkw\u7ebf\u6bb5\u6811 \uff08\u8868\u793a\u603b\u5171\u8dd1\u4e860.2s+\uff09\u786e\u5b9e\u5feb...\n\n\u8bb2\u89e3\u90fd\u5728\u6ce8\u91ca\u4e2d~\n\n\n\u6e90\u4ee3\u7801\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define lc d<<1\n#define rc d<<1|1\nusing namespace std;\nint n,m,M;\nstruct node{long long sum,lazy,num;}tr[1<<20];\nvoid build()\n{\n    for (M=1;M<=n;M<<=1);\n    for (int i=1;i<=n;i++) scanf(\"%lld\",&tr[i+M].sum),tr[i+M].num=1;\n    for (int d=M-1;d;d--) \n        tr[d].sum=tr[lc].sum+tr[rc].sum,tr[d].num=tr[lc].num+tr[rc].num;\n}\n//\u8fd9\u4e2a\u533a\u95f4\u4fee\u6539\u8ddf\u7f51\u4e0a\u7edd\u5927\u591a\u6570\u9898\u89e3\u4e0d\u540c,\u7f51\u4e0a\u9898\u89e3\u6709\u4ec0\u4e48\u524d\u7f00\u548c...\u8fd9\u91cc\u5c31\u662f\u6253\u6807\u8bb0,\u5411\u4e0a\u8d70\u7684\u65f6\u5019\u52a0\u4e0a\nvoid change(int x,int y,long long turnto)\n{\n    int numx=0,numy=0;//numx\u8868\u793a\u8d70\u5230x\u8fd9\u4e2a\u70b9,\u672c\u6b21\u4fee\u6539\u4e2d \u4e0b\u9762\u88ab\u4fee\u6539\u4e86\u591a\u5c11\u70b9(\u8fd9\u4e9b\u70b9\u90fd\u662fx\u63a7\u5236\u7684),numy\u540c\n    for (x+=M,y+=M;x^y^1;x>>=1,y>>=1)\n        {\n            tr[x].sum+=turnto*numx;//\u4e00\u5b9a\u8981 \u5148\u66f4\u65b0\u5f53\u524d\u8282\u70b9,\u518d\u8003\u8651x+1\u53f7\u8282\u70b9\n            if (!(x&1))  //\u7ed9x+1\u6253\u6807\u8bb0,\u5e76\u4e14\u66f4\u65b0tr[x+1].sum,numx\u4e5f\u8981\u66f4\u65b0...\u56e0\u4e3a\u5411\u4e0a\u8d70,x\u7684\u7236\u4eb2\u63a7\u5236\u7684 \u5728\u672c\u6b21\u64cd\u4f5c\u4e2d\u88ab\u4fee\u6539\u7684 \u70b9\u53d8\u591a\u4e86 \n                tr[x+1].lazy+=turnto,numx+=tr[x+1].num,tr[x+1].sum+=tr[x+1].num*turnto;\n            tr[y].sum+=turnto*numy;//\u540c\u4e0a \n            if ((y&1))\n                tr[y-1].lazy+=turnto,numy+=tr[y-1].num,tr[y-1].sum+=tr[y-1].num*turnto;\n        }\n    for (;x>=1&&y>=1;x>>=1,y>>=1)//\u6ce8\u610f\u8fd9\u91cc,\u6807\u8bb0\u5728\u4e0a\u9762\u6253\u5b8c\u4e86,\u4f46\u662f\u4fee\u6539sum\u8981\u5230\u9876...(\u663e\u7136\u5462...)\n        tr[x].sum+=turnto*numx,tr[y].sum+=turnto*numy;\n}\nlong long ask(int x,int y)\n{\n    long long rt=0,numx=0,numy=0;\n    for (x+=M,y+=M;x^y^1;x>>=1,y>>=1)\n        {\n            rt+=tr[x].lazy*numx+tr[y].lazy*numy;//\u5f53\u524dx\u70b9\u548cy\u70b9\u4e0b\u9762\u6709\u591a\u5c11\u70b9,\u5206\u522b\u4e58\u5404\u81ea\u7684lazy\u6807\u8bb0\n            if (!(x&1)) rt+=tr[x+1].sum,numx+=tr[x+1].num;\n            if (y&1) rt+=tr[y-1].sum,numy+=tr[y-1].num;\n        }\n    for (;x>=1&&y>=1;x>>=1,y>>=1)//x\u548cy\u53ca\u5176\u4e0a\u9762\u7684\u70b9 \u6709\u53ef\u80fd\u8fd8\u6709lazy\u6807\u8bb0,\u8981\u52a0\u4e0a...\n        rt+=tr[x].lazy*numx+tr[y].lazy*numy;    \n    return rt;\n}\nint main()\n{\n    int i,j,k,opp,x,y;long long z;\n    cin>>n;cin>>m;\n    build();\n    for (i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&opp,&x,&y);\n            if (opp==2)printf(\"%lld\\n\",ask(x-1,y+1));\n            else \n                {\n                    scanf(\"%lld\",&z);\n                    change(x-1,y+1,z);\n                }\n        }\n}\n\n```",
        "postTime": 1478689685,
        "uid": 18141,
        "name": "a41881147",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u697c\u4e0b\u6ca1\u6709c/c++\u7684\u6811\u72b6\u6570\u7ec4\u6765\u8865\u4e00\u4e2a\uff0c\u8fd9\u4e2a\u533a\u95f4\u4fee\u6539+\u533a\u95f4\u67e5\u8be2\u7684\u6811\u72b6\u6570\u7ec4\u8fd8\u662f\u5728\u65e5\u7167\u8ddf\u4e00\u4e2a\u5927\u795e\u5b66\u7684\u2026\u2026\n\n\u8fd8\u662f\u5dee\u5206\uff0c\u628aa\uff08\u539f\u59cb\u6570\u636e\uff09\u53d8\u6210b\uff08bi=ai-a(i-1)\uff09\uff0c\u7136\u540e\u5728\u5f04\u4e24\u4e2a\u6570\u7ec4c\u548cr\uff08\u56e0\u4e3a\u6700\u7ec8\u7b54\u6848\u7684\u516c\u5f0f\u91cc\u6709\u4e00\u4e8c\u6b21\u9879\uff0c\u6240\u4ee5\u7528\u4e24\u4e2a\u4fdd\u5b58\uff09\uff0c\u7edf\u8ba1\u4e00\u4e0b\u8d21\u732e\u624b\u7b97\u5373\u53ef\u3002\u516c\u5f0f\u592a\u9ebb\u70e6\uff0c\u849f\u84bb\u8868\u793a\u4e0d\u4f1a\u7f16\u8f91\n\n\u8c8c\u4f3c\u662f\u622a\u81f3\u76ee\u524d\uff082016-10-21\uff09\u7528\u65f6\u6700\u5c11\u7684rank1\u2026\u2026\uff08\u867d\u7136\u7528\u4e86\u8bfb\u4f18\uff09\n\n\u4e11\u964b\u7684\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define lowbit(x) ((x)&(-(x)))\nusing namespace std;\nlong long c[100010],r[100010],m,n;\nlong long get_sum_c(int x)\n{\n    long long sum=0;\n    for(;x>=1;x-=lowbit(x)) sum+=c[x];\n    return sum;\n}\nlong long get_sum_r(int x)\n{\n    long long sum=0;\n    for(;x>=1;x-=lowbit(x)) sum+=r[x];\n    return sum;\n}\nlong long get_num()\n{\n    long long num=0;\n    char ch;\n    bool flag=false;\n    while((ch=getchar())==' '||ch=='\\n'||ch=='\\r');\n    if(ch=='-') flag=true;\n    else num=ch-'0';\n    while(isdigit(ch=getchar()))\n        num=num*10+ch-'0';\n    return (flag?-1:1)*num;\n}\nint main()\n{\n    long long an,an_1,bn;\n    n=get_num();m=get_num();\n    an=an_1=0;\n    for(int i=1;i<=n;i++)\n    {\n        an=get_num();\n        c[i]=an-an_1;\n        an_1=an;\n        r[i]=c[i]*i;\n        c[i]+=get_sum_c(i-1)-get_sum_c(i-lowbit(i));\n        r[i]+=get_sum_r(i-1)-get_sum_r(i-lowbit(i));\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int opt;opt=get_num();\n        if(opt==1)\n        {\n            int s,t;long long x;\n            s=get_num();\n            t=get_num();\n            x=get_num();\n            for(int i=s;i<=n;i+=lowbit(i)) c[i]+=x;\n            for(int i=t+1;i<=n;i+=lowbit(i)) c[i]-=x;\n            for(int i=s;i<=n;i+=lowbit(i)) r[i]+=s*x;\n            for(int i=t+1;i<=n;i+=lowbit(i)) r[i]-=(t+1)*x;\n        }\n        else\n        {\n            int s,t;\n            s=get_num();\n            t=get_num();\n            long long ans=(long long)get_sum_c(s)*(t-s+1)-(get_sum_r(t)-get_sum_r(s))+(long long)(get_sum_c(t)-get_sum_c(s))*(t+1);\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1477058579,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "~~\u65e0\u52a9\u7684\u849f\u84bb\u5728\u5899\u89d2\u745f\u745f\u53d1\u6296\u5730%\u8d25\u5404\u4f4d\u5de8\u5f97\u65e0\u6cd5\u63cf\u8ff0\u7684\u5946\u4f6c~~\n\n## \u7ebf\u6bb5\u6811\n\n![\u56fe\u7247\u6765\u6e90\u4e8e\u7f51\u7edc](https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=0622b6a868600c33e474d69a7b253a6a/bd3eb13533fa828bcb5fe85ffe1f4134970a5a09.jpg)\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u533a\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN)\u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a2N\uff0c\u5b9e\u9645\u5e94\u7528\u65f6\u4e00\u822c\u8fd8\u8981\u5f004N\u7684\u6570\u7ec4\u4ee5\u514d\u8d8a\u754c\uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\n\n\u7ebf\u6bb5\u6811\u4f7f\u7528\u4e86\u5206\u6cbb\u601d\u60f3\uff0c\u5229\u7528\u4e86\u533a\u95f4\u5408\u5e76\u7684\u6027\u8d28\uff0c\u5de7\u5999\u5730\u89e3\u51b3\u4e86\u4e00\u7c7b\u533a\u95f4\u67e5\u627e\u7684\u9898\u76ee\uff0c\u4f46\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u8f83\u9ad8\uff0c\u56e0\u6b64\u4e0d\u88abOIer\u5e7f\u6cdb\u4f7f\u7528\u3002\n\n------------\n\n\u7ffb\u4e86\u597d\u4e45\u90fd\u6ca1\u6709\u770b\u89c1\u4e00\u7bc7\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u9898\u89e3\uff08\u8bdd\u8bf4\u6807\u8bb0\u4e0b\u4f20\u90a3\u4e48\u591a\u9898\u89e3\u662f\u600e\u4e48\u8fc7\u7684QAQ~~\u8fd9\u662f\u4eba\u6027\u7684\u626d\u66f2\u8fd8\u662f\u9053\u5fb7\u7684\u6ca6\u4e27\uff1f~~\uff09\n\n###### _\u4e8e\u662f\u5c31\u8ba9\u6700\u5f31\u7684\u849f\u84bb\u6765\u53d1\u4e00\u7bc7\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u9898\u89e3\u5427\uff01_\n\n### 1.\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3:\n\n\u6807\u8bb0\u6c38\u4e45\u5316\u662f\u5728\u8be2\u95ee\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u6bcf\u4e2a\u9047\u5230\u7684\u7ed3\u70b9\u5bf9\u5f53\u524d\u8be2\u95ee\u7684\u5f71\u54cd\u3002\u4e3a\u4e86\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5b50\u8282\u70b9\u7684\u5f71\u54cd\u9700\u8981\u5728modify\u4fee\u6539\u65f6\u5c31\u8ba1\u7b97\u597d\u3002\n\n\u4e0e\u6807\u8bb0\u4e0b\u4f20\u7c7b\u4f3c\uff0c\u6211\u4eec\u7528add\u6570\u7ec4\u6765\u5b58\u653e\u4e00\u4e2a\u533a\u95f4\u5185\u6bcf\u4e2a\u6570\u52a0\u7684\u503c\uff0c\u5e76\u8ba1\u7b97\u52a0\u4e0a\u7684\u6570v\u5bf9sum\u7684\u5f71\u54cd\u3002\u5728query\u8be2\u95ee\u65f6\uff0c\u76f4\u63a5\u8ba1\u7b97add\u6807\u8bb0\u7684\u5f71\u54cd\uff0c\u518d\u8be2\u95ee\u5b50\u8282\u70b9\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n\nvoid modify(ll k,ll l,ll r,ll x,ll y,ll v){   //\u4fee\u6539\n\tif(l>=x&&r<=y){\n\t\tadd[k]+=v;\n\t\treturn;\n\t}\n\tsum[k]+=(min(r,y)-max(l,x)+1)*v;   //\u8ba1\u7b97\u5b50\u7ed3\u70b9\u5bf9\u5f53\u524d\u7ed3\u70b9\u7684\u5f71\u54cd\n\tll mid=(l+r)/2;\n\tif(x<=mid){\n\t\tmodify(k*2,l,mid,x,y,v);\n\t}\n\tif(mid<y){\n\t\tmodify(k*2+1,mid+1,r,x,y,v);\n\t}\n\treturn;\n}\nll query(ll k,ll l,ll r,ll x,ll y){   //\u8be2\u95ee\n\tif(l>=x&&r<=y){\n\t\treturn sum[k]+(r-l+1)*add[k];\n\t}\n\tll mid=(l+r)/2,res=(min(r,y)-max(l,x)+1)*add[k];   //\u5148\u8ba1\u7b97\u6807\u8bb0\u5f71\u54cd\n\tif(x<=mid){\n\t\tres+=query(k*2,l,mid,x,y);   //\u518d\u8ba1\u7b97\u5de6\u53f3\u533a\u95f4\u7684\u8d21\u732e\n\t}\n\tif(mid<y){\n\t\tres+=query(k*2+1,mid+1,r,x,y);\n\t}\n\treturn res;\n}\n```\n\n------------\n\n### 2.\u5efa\u6811\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nvoid build(ll k,ll l,ll r){\n\tif(l==r){\n\t\tsum[k]=a[l];\n\t\treturn;\n\t}\n\tll mid=(l+r)/2;\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n\tsum[k]=sum[k*2]+sum[k*2+1];\n\treturn;\n}\n```\n\n------------\n\n## \u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll n,m,a[100005];\nll addsum[400005];\nll sum[400005];\nvoid init(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(ll i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\treturn;\n}\nvoid build(ll k,ll l,ll r){\n\tif(l==r){\n\t\tsum[k]=a[l];\n\t\treturn;\n\t}\n\tll mid=(l+r)/2;\n\tbuild(k*2,l,mid);\n\tbuild(k*2+1,mid+1,r);\n\tsum[k]=sum[k*2]+sum[k*2+1];\n\treturn;\n}\nvoid modify(ll k,ll l,ll r,ll x,ll y,ll v){\n\tif(l>=x&&r<=y){\n\t\taddsum[k]+=v;\n\t\treturn;\n\t}\n\tsum[k]+=(min(r,y)-max(l,x)+1)*v;\n\tll mid=(l+r)/2;\n\tif(x<=mid){\n\t\tmodify(k*2,l,mid,x,y,v);\n\t}\n\tif(mid<y){\n\t\tmodify(k*2+1,mid+1,r,x,y,v);\n\t}\n\treturn;\n}\nlong long query(ll k,ll l,ll r,ll x,ll y){\n\tif(l>=x&&r<=y){\n\t\treturn sum[k]+(r-l+1)*addsum[k];\n\t}\n\tll mid=(l+r)/2;\n\tlong long res=(min(r,y)-max(l,x)+1)*addsum[k];\n\tif(x<=mid){\n\t\tres+=query(k*2,l,mid,x,y);\n\t}\n\tif(mid<y){\n\t\tres+=query(k*2+1,mid+1,r,x,y);\n\t}\n\treturn res;\n}\nint main(){\n\tinit()\uff1b\n\tbuild(1,1,n)\uff1b\n\tfor(ll i=1;i<=m;i++){\n\t\tll does,a,b,c\uff1b\n\t\tscanf(\u201c%lld%lld%lld\u201d,&does,&a,&b)\uff1b\n\t\tif(does==1){\n\t\t\tscanf(\u201c%lld\u201d,&c)\uff1b\n\t\t\tmodify(1,1,n,a,b,c)\uff1b\n\t\t}\n\t\tif(does==2){\n\t\t\tprintf(\u201c%lld\\n\u201d,query(1,1,n,a,b))\uff1b\n\t\t}\n\t}\n\treturn 0\uff1b\n}   //\u62dc\u62dc\n```\n[blog\u63a8\u9500](https://www.luogu.org/blog/pidan12321/)",
        "postTime": 1570199745,
        "uid": 191538,
        "name": "pidan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "## \u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\n\u52a8\u6001\u5f00\u70b9\u7684\u8bdd\uff0c\u662f\u53ef\u4ee5\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6\u7684~~\u5c3d\u7ba1\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u6ca1\u4ec0\u4e48\u610f\u4e49~~\n\n\u5728\u4e00\u5f00\u59cb\u5efa\u6811\u7684\u65f6\u5019\u4e0d\u5148\u5efa\u51fa\u6574\u9897\u7ebf\u6bb5\u6811\uff0c\u800c\u662f\u53ea\u5efa\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u4ee3\u8868\u6574\u4e2a\u533a\u95f4\uff0c\u5f53\u9700\u8981\u8bbf\u95ee\u67d0\u4e2a\u5b50\u6811\u7684\u65f6\u5019\u518d\u5efa\u7acb\u4ee3\u8868\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u8282\u70b9\n\n\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\n```cpp\nvoid insert(ll &now,ll l1,ll r1,ll x,ll y)\n{\n    if(now==0)\n    now=++cnt;\n    t[now].sum+=y;\n}\n```\n\u5c31\u8fd9\u6837\u3002\n\n\u4f46\u662f\u6bcf\u4e00\u6b21\u8fdb\u884c\u63d2\u5165\u548c\u4fee\u6539\u4ee5\u53ca\u67e5\u8be2\u90fd\u8981\u8bb0\u5f97\u52a0\u8282\u70b9\u7684\u95ee\u9898\uff0c\u5426\u5219\u3002qwq\n\n\u4e00\u4e9b\u56e0\u4e3a\u592a\u957f\u6ca1\u6709\u5199\u8fdb\u6ce8\u91ca\u7684\u4e1c\u897f\n\n1\uff1a\n    \n    \u7531\u5e26\u6709~\\(\u2267\u25bd\u2266)/~\u7684\u90a3\u4e00\u6bb5\u6ce8\u91ca\u6613\u77e5 \u5982\u679c[p,q]\u5df2\u7ecf\u5305\u542b\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5168\u90e8\u8303\u56f4\uff0c\u90a3\u4e48\u5b83\u4ee5\u4e0b\u7684\u6240\u6709\u8282\u70b9\u6682\u65f6\u4e0d\u4e88\u5904\u7406\n    \n    \u800c\u540c\u6837\u6613\u77e5\u5b83\u53ca\u5b83\u4ee5\u4e0a\u7684\u8282\u70b9\u4e0d\u6539\u662f\u4e0d\u884c\u7684\u3002\n    \n    \u600e\u4e48\u6539\u5462\uff1f\uff1f\uff08\u5047\u88c5\u6c89\u601d\uff09\n    \n    \u56e0\u4e3a\u662f\u5b83\u53ca\u5b83\u4ee5\u4e0a\uff0c\u6240\u4ee5\u53ef\u80fd\u5927\u4e8e[p,q]\u4e5f\u53ef\u80fd\u5c0f\u4e8e\u7b49\u4e8e\n   \n   \u90a3\u4e48\u8fd9\u4e00\u6bb5\u7684\u503c\u603b\u5171\u8981\u52a0\u4e0a[l1,r1]\u4e0e[p,q]\u7684\uff08\u91cd\u5408\u90e8\u5206\u7684\u6570\u636e\u7684\u4e2a\u6570\uff09*\uff08\u6bcf\u4e2a\u6570\u8981\u52a0\u7684\u6570\uff08y\uff09\uff09\n    \n 2\n \t\n    \u4e0a\u9762\u90a3\u4e2a\u5e26O(\u2229_\u2229)O~\u7684\u95ee\u9898\u7684ans\n    \n    \u8fd9\u91cc\u6211\u4eec\u628a\u4e0b\u4e00\u5c42\u9012\u5f52\u91cc\u7684now\uff08\u4e5f\u5c31\u662f\u8fd9\u91cc\u7684\u5b50\u8282\u70b9\uff09\u7684\u503c\u5df2\u7ecf\u52a0\u597d\uff0c\u60f3\u7528\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u53d6\n    \n    \u800c\u7b2c\u4e00\u6b21\u8fdb\u5165\u8fd9\u4e2adfs\u65f6\u7684O(\u2229_\u2229)O~\u8bed\u53e5\uff0c\u5176\u533a\u95f4\u662f1\u5230n\uff0c\u662f\u80af\u5b9a\u5904\u7406\u597d\u4e86\u7684 \uff08\u539f\u56e0\u89c157\u523059\u884c\uff09 \n   \n   \u90a3\u4e48\u5982\u679c \u4e0b\u4e00\u5c42\u9012\u5f52\u91cc\u7684now\uff08\u4e5f\u5c31\u662f\u8fd9\u91cc\u7684\u5b50\u8282\u70b9\uff09\u5df2\u7ecf\u88ab\u6240\u6c42\u8282\u70b9\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u5b59\u8282\u70b9\u5c31\u6ca1\u5fc5\u8981\u6c42\u4e86\n \n 3\n \n \u7531\u4e0a\u9762\u7684\u64cd\u4f5c\u6613\u77e5\u5982\u679cnow\u5904\u6709lazy\uff0c\n \n \u90a3\u4e48\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u90fd\u4f1a\u6709\u4e00\u4e2a\uff08\u5b50\u8282\u70b9\u533a\u95f4\u5185\u6570\u636e\u4e2a\u6570*lazy\u503c\uff09\u7684\u503c\u8981\u52a0\uff0c\n \n \u6240\u4ee5\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u628a\u5b83\u52a0\u8fdb\u53bb\uff0c\u624d\u53ef\u4ee5\u8fdb\u5165\u4e0b\u4e00\u5c42\n        \n         \n \n\u5176\u4ed6\u7684\u6211\u89c9\u5f97\u6ce8\u91ca\u5f88\u8be6\u7ec6\u4e86qwq\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\nusing namespace std;\nstruct node{\n    long long l,r,sum;\n}t[10000050];\nvoid read(ll &x)\n{\n    int f=1;x=0;char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();} \n    while(c<='9'&&c>='0'){x=10*x+c-'0';c=getchar();} \n    x=x*f;\n} \nll cnt;ll now=0;\nll n,m;\nll lazy[10000050];\n\nvoid insert(ll &now,ll l1,ll r1,ll x,ll y)\n{\n    if(now==0)\n    now=++cnt;//\u8fd8\u6ca1\u6709\u8282\u70b9\uff0c\u8981\u65b0\u5efa\u4e00\u4e2a \n    t[now].sum+=y;//\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u542b\u6709\u7b2cx\u4f4d\u6570\uff0c\u6240\u4ee5\u5b83\u7684\u503c\uff08\u533a\u95f4\u548c\uff09\u52a0\u4e0a\u7b2cx\u4f4d\u6570\u4e5f\u5c31\u662fy \n    if(l1==r1)return;//\u5df2\u7ecf\u66f4\u65b0\u5230\u4e86\u5b50\u8282\u70b9\u4e8e\u662f\u7ed3\u675f \n    int mid=(l1+r1)/2;//\u5224\u65adx\u5728\u5f53\u524d\u8282\u70b9\u4e0b\u7684\u5de6\u5b50\u8282\u70b9\u8fd8\u662f\u53f3\u5b50\u8282\u70b9 \n    if(x<=mid)insert(t[now].l,l1,mid,x,y);//\u5728\u5de6\u5b50\u8282\u70b9\n    else insert(t[now].r,mid+1,r1,x,y); //\u53f3\u5b50\u8282\u70b9 \n}//\u5355\u70b9\u63d2\u5165&\u5efa\u6811\nll pd(ll l1,ll r1,ll p,ll q)\n{\n    ll r=min(r1,q);\n    ll l=max(l1,p);\n    return r-l+1;\n}\nvoid insert2(ll &now,ll l1,ll r1,ll p,ll q,ll y)\n{\n    if(now==0)\n    now=++cnt;//\u6ca1\u8282\u70b9\u52a0\u4e00\u4e2a\u8282\u70b9 \n    t[now].sum+=y*pd(l1,r1,p,q);//1\uff1a\u592a\u957f\u4e86\u5c31\u4e0d\u5728\u6ce8\u91ca\u91cc\u4e86\n    if(p<=l1&&q>=r1)\n    //\u5982\u679c[p,q]\u5df2\u7ecf\u5305\u542b\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5168\u90e8\u8303\u56f4 \u90a3\u4e48\u663e\u7136\u5f53\u524d\u8282\u70b9\u4e2d\u6bcf\u4e00\u4e2a\u503c\u90fd\u8981\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\u90fd\u6539\u3002\n    //\u800c\u6211\u4eec\u61d2\u5f97\u6539\uff08\u4f1aT\uff09\u6240\u4ee5\u5728\u8fd9\u4e2a\u8303\u56f4\u6700\u5927\u7684\u88ab\u5b8c\u5168\u5305\u542b\u7684\u8282\u70b9\u5904\u8bb0\u5f55lazy\n    //\u7136\u540e\u663e\u7136\u5c31\u4e0d\u9700\u8981\u518d\u6539\u4e0b\u9762\u7684\u4e86~\\(\u2267\u25bd\u2266)/~ \n    {\n        lazy[now]+=y;\n        return;\n    }\n    int mid=(l1+r1)/2;//\u5224\u65ad[p,q]\u5728\u5f53\u524d\u8282\u70b9\u4e0b\u7684\u5de6\u5b50\u8282\u70b9\u8fd8\u662f\u53f3\u5b50\u8282\u70b9 \n    if(p<=mid)insert2(t[now].l,l1,mid,p,q,y);//\u5de6 \n    if(q>mid)insert2(t[now].r,mid+1,r1,p,q,y); //\u53f3 \n    \n}\nll findd(ll now,ll l1,ll r1,ll x,ll y)\n{\n    if(l1>=x&&r1<=y)\n    {\n        return t[now].sum;\n    }//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4[l1,r1]\u5df2\u7ecf\u88ab\u6240\u6c42\u533a\u95f4[x,y]\u5305\u542b\uff0c\u90a3\u4e48\u6613\u77e5\u8fd9\u4e2a\u533a\u95f4[l1,r1]\u7684\u503c\uff08\u5373\u533a\u95f4\u5185\u6240\u6709\u7684\u6570\u503c\u7684\u548c\uff09\u662f[x,y]\u7684\u548c\u7684\u4e00\u90e8\u5206\n    //\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u52a0\u5165\u5230\u6240\u6c42\u7ed3\u679c\uff08[x,y]\u7684\u548c\uff09\u91cc\n    //\u00b72\uff1alazytag\u5462\uff1f\uff1f\u4e0b\u9762\u7684\u70b9\u5462\uff1fO(\u2229_\u2229)O~ \n    ll mid=(l1+r1)/2\uff1b\n    if(lazy[now])//\u5982\u679c\u5f53\u524d\u7684\u8fd9\u4e2a\u8282\u70b9\u4e0a\u6709lazy\u503c\n    {\n        if(!t[now].l)//\u56e0\u4e3a\u52a8\u6001\u5f00\u70b9\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u8fd9\u4e2a\u8282\u70b9\u6709lazy\u503c\uff0c\u4f46\u5b83\u6839\u672c\u6ca1\u6709\u5b50\u8282\u70b9 \n        t[now].l=++cnt;//\u9020\u4e00\u4e2a\n        lazy[t[now].l]+=lazy[now];//\u6709\u53ef\u80fd\u5b83\u4e4b\u524d\u5df2\u7ecf\u6709\u8fc7\u6709\u8fc7lazy\uff0c\u53c8\u4f20\u7ed9\u5b83\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u5bf9\u81ea\u5df1\u7684\u5b50\u5b59\u8282\u70b9\u7684\u5f71\u54cd\uff08lazy\uff09\u5c31\u662f\u4e8c\u6b21\u4e4b\u548c \n        t[t[now].l].sum+=lazy[now]*(mid-l1+1);//(mid-ll+1)\u662f\u6307\u5de6\u5b50\u8282\u70b9\u7684\u6570\u636e\u4e2a\u6570\u3002\n        //3\uff1a\u592a\u957f\u4e86\n        if(!t[now].r)\n        t[now].r=++cnt;\n        lazy[t[now].r]+=lazy[now];\n        t[t[now].r].sum+=lazy[now]*(r1-mid);//\u8fd9\u56db\u884c\u548c\u4e0a\u56db\u884c\u662f\u6ca1\u4ec0\u4e48\u533a\u522b\u7684\u56e0\u4e3a\u5c31\u8fde\u4ee3\u7801\u6211\u90fd\u662f\u590d\u5236\u7684qwq \n        lazy[now]=0;//now\u7684lazy\u5df2\u7ecf\u53d1\u4e0b\u53bb\u4e86\uff0c\u5c31\u628a\u5b83\u7684lazy\u6e05\u96f6\uff0c\u4e0d\u80fd\u518d\u53d1\u4e00\u6b21 \n    }\n    ll suml=0;//\u7531now\u5206\u51fa\u7684\u5de6\u8fb9\u7684\u503c\n    ll sumr=0;//\u53f3\u8fb9\n    if(x<=mid)suml=findd(t[now].l,l1,mid,x,min(mid,y)); \n    //\u5982\u679c\u6240\u6c42\u533a\u95f4\u7684\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8emid\u4e5f\u5c31\u662f\u5728now\u7684\u5de6\u5b50\u8282\u70b9\u6709\u4e00\u90e8\u5206\u503c\u5c31\u53bbdfs\u5de6\u5b50\u8282\u70b9\uff08\u4e0d\u7ba1\u53f3\u8fb9\u600e\u4e48\u6837\uff09 \n    //\u800c\u5f80\u5de6\u53f3\u5b50\u8282\u70b9\u5206\u7684\u65f6\u5019\u4ee5mid\u4e3a\u5206\u754c\u7ebf\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u5b50\u533a\u95f4\u53f3\u7aef\u70b9\u6700\u5927\u53ea\u80fd\u662fmid\uff08\u8981\u4e0d\u767d\u5206\u4e86\u554aqwq\uff09\n    //\u5f53\u7136\u5982\u679c\u6240\u6c42\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u6bd4mid\u5c0f\uff0c\u90a3\u80af\u5b9a\u4e0d\u80fd\u53d6mid\uff0c\u8981\u4e0d\u6240\u6c42\u533a\u95f4\u90fd\u53d8\u4e86 \uff0c\u6240\u4ee5\u53d6\u4e00\u4e2amin\u5c31\u53ef\u4ee5\u4e86 \n    if(y>mid)sumr=findd(t[now].r,mid+1,r1,max(mid+1,x),y);\n    //\u540c\u4e0a\n    //\u8fd9\u6837\u504f\u53f3\u90e8\u5206\u7684\u5f80\u53f3\u5b50\u5206\uff0c\u504f\u5de6\u7684 \u5f80\u5de6\u5b50\u5206\uff0c\u5206\u5206\u5206\u5206\uff0c\u7136\u540e\u628a\u548c\u5168\u52a0\u8d77\u6765\u5c31\u5b8c\u4e86\u3002 \n     return suml+sumr;//\u6492\u82b1~~ \n}\nint main()\n{\n    ll mm;\n    read(n);read(m);\n    ll root=0;\n    for(ll i=1;i<=n;i++)\n    {\n        read(mm);\n        insert(root,1,n,i,mm);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        ll o;\n        read(o);\n        if(o==1)\n        {\n            ll x;ll y;ll mmm;\n            read(x);read(y);read(mmm);\n            insert2(root,1,n,x,y,mmm);\n        }\n        if(o==2)\n        {\n            ll x;ll y;\n            int mmm;\n            read(x);read(y);\n            cout<<findd(root,1,n,x,y)<<endl;\n        }\n    }\n } \n```",
        "postTime": 1547360484,
        "uid": 45476,
        "name": "Wichiene",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u80cc\u666f\uff1a\u5728\u666e\u53ca\u6c34\u5230\u4e00\u7b49\uff0c\u63d0\u9ad8\u6c34\u5230\u4e8c\u7b49\u7684NOIp2018\u7ed3\u675f\u540e\uff0c\u6ed1\u7a3d\u7684\u5c0f\u5bab\u4e0d\u6ee1\u8db3\u4e8e\u7b80\u5355\u7684\u66b4\u641c\uff08\u7528\u66b4\u641c\u9a97\u4e86\u81f3\u5c11150\u5206\uff09\uff0c\u51b3\u5b9a\u5b66\u4e60\u66f4\u9ad8\u7ea7\u7684\u7b97\u6cd5\n# \u7ebf\u6bb5\u6811\uff08\u6c34\uff09\n\n\n------------\n\n\u8fd9\u662f\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u849f\u84bb\u8bed\u8bf4\uff0c\u5c31\u662f\u201c\u6811\u72b6\u533a\u95f4\u548c\u201d\uff0c\u5373\u5c06\u4e00\u4e2a\u4e8c\u5206\u8fc7\u7a0b\u8868\u73b0\u51fa\u6765\u3002\u901a\u8fc7\u6539\u53d8\u5927\u533a\u95f4\u7684\u503c\uff0c\u6765\u5b9e\u73b0\u77ed\u65f6\u533a\u95f4\u8ba1\u7b97\n```cpp\n\u5982\u56fe\uff1a\n\t    \t\t   1 - 8\n    \t\t\t /       \\\n \t\t  1  -  4          5  -  8\n  \t\t /      \\        /       \\\n      1-2      3 - 4      5-6       7-8\n    /    \\     /   \\     /   \\     /   \\\n  1-1   2-2  3-3   4-4  5-5  6-6  7-7  8-8 \n```\n### \u91cd\u70b9\u662f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709O(logn)\uff01\n\uff08\u849f\u84bb\u5f00\u59cb\u8003\u8651\u81ea\u5df1\u5df2\u7ecf\u591a\u4e45\u6ca1\u6709\u89c1\u8fc7logn\u7684\u7b97\u6cd5\u4e86\uff09\n## \u4e0d\u6c34\u4e86\uff0c\u8fdb\u5165\u6b63\u9898\n\n\n------------\n\n### \u4f17\u6240\u5468\u77e5\uff0c\u62ff\u6570\u7ec4\u5b58\u6811\u662f\u6709\u201c\u5de6\u53f3\u5b69\u5b50\u5b9a\u7406\u201d\u7684\u3002\n### \u56e0\u6b64\u901a\u8fc7\u67d0\u79cd~~\u9ad8\u5927\u4e0a~~\u6734\u7d20\u7684\u505a\u6cd5\u5c31\u53ef\u4ee5~~\u8f7b\u6613~~\u7e41\u7410\u5730\u6c42\u51fa\u5de6\u53f3\u5b69\u5b50\n\u5148\u5b9a\u4e49\n```cpp\n#include<cstdio>  \n#define left_son(x) (x<<1)//\u67d0\u79cd\u795e\u79d8\u65b9\u6cd5\n#define right_son(x) (x<<1|1)//\u67d0\u79cd\u795e\u79d8\u65b9\u6cd52\n#define ll long long\n```\n### ps\uff1a\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\u6211\u7528\u4e86\u5f88\u957f\u7684\u51fd\u6570\u548c\u6570\u7ec4\u540d\uff0c\u5bc6\u6050\u614e\u5165\n\n#### \u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6211\u4eec\u7528\u5230\u4e09\u4e2a\u4e3b\u8981\u51fd\u6570\uff1a\u5efa\u6811\u3001\u64cd\u4f5c\u3001\u67e5\u8be2\uff0c\u8fd8\u6709\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\u201c\u4e0b\u63a8\u201d\u3002\n#### \u6211\u5728\u8fd9\u91cc\u7528\u7684\u662f\u7ed3\u6784\u4f53\u505a\u6cd5\uff08\u5b9e\u9645\u662f\u56e0\u4e3a\u4e0d\u4f1a\u52a8\u6001\u5f00\u70b9\uff09\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u201cst\u201d\uff08segment tree\u7684\u7b80\u79f0\uff09\uff0c\u91cc\u9762\u5b58\u6709\u5b83\u7684\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u3001\u5f53\u524d\u503c\u548clazy\u6807\u8bb0\u3002\u6ce8\u610f\uff0c\u7a7a\u95f4\u8303\u56f4\u6700\u597d\u5f00\u5230n\u76844\u500d\uff08\u524d\u8f88\u7684\u7ecf\u9a8c\uff09\u3002\n\n### \u9996\u5148\u662f\u5efa\u6811\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u80fd\u5229\u7528\u9012\u5f52\u5efa\u6811\uff0c\u6bcf\u6b21\u4e8c\u5206\u5c31\u884c\u4e86\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u7ebf\u6bb5\u6811\u5c31\u662f\u8fd8\u539f\u4e86\u4e00\u4e2a\u4e8c\u5206\u7684\u8fc7\u7a0b\n### \u4e8c\u5206\u4ee3\u7801\uff1a\n```\n//\u6beb\u65e0\u4f5c\u7528\u7684\u4e8c\u5206\nvoid div\uff08int l,int r\uff09{\n\tif(l==r)return;\n    int mid=(l+r)/2;\n    div(l,mid);\n    div(mid+1,r);\n}\n```\n### \u5982\u679c\u60f3\u8981\u628a\u5b83\u53d8\u6210\u5efa\u6811\u64cd\u4f5c\uff0c\u8fd8\u9700\u8981\u52a0\u4e0a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\uff0c\u4ee5\u4fbf\u8d4b\u503c\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u7528\u90a3\u4e2a\u795e\u79d8\u7684\u627e\u5b69\u5b50\u51fd\u6570\u5b9e\u73b0\uff1a\n### \u62ff\u4e8c\u5206\u6539\u6210\u5efa\u6811\u51fd\u6570\u4ee3\u7801\uff1a\n```\nvoid build(ll x,ll li,ll ri){\n\tst[x].left_point=li;//\u5b9a\u4e49\u5de6\u5b69\u5b50\n\tst[x].right_point=ri;//\u5b9a\u4e49\u53f3\u5b69\u5b50\n\tif(li==ri){//\u82e5\u76f8\u540c\uff0c\u8bf4\u660e\u5df2\u7ecf\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\n\t\tst[x].sum=a[li];//\u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\u88ab\u771f\u5b9e\u8d4b\u503c\n\t\treturn;\n\t}\n    //\u5982\u679c\u6ca1\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c31\u7ee7\u7eed\u4e8c\u5206\n\tll mid=(li+ri)/2;\n\tbuild(left_son(x),li,mid);\n\tbuild(right_son(x),mid+1,ri);\n    //\u4e8c\u5206\u5b8c\u6bd5\uff0c\u5728\u8c03\u7528\u8fd4\u56de\u65f6\u628a\u4e2d\u95f4\u7ed3\u70b9\u7684\u503c\u7b97\u51fa\n\tst[x].sum=st[left_son(x)].sum+st[right_son(x)].sum;\n}\n```\n\u597d\u4e86\uff0c\u5148\u653e\u51fa\u4e0a\u9762\u7684\u90a3\u5f20\u56fe\n\n```cpp\n//\u6570\u5b57\u4e3a\u533a\u95f4\u7aef\u70b9\u4e0b\u6807\n\t    \t\t   1 - 8\n    \t\t\t /       \\\n \t\t  1  -  4          5  -  8\n  \t\t /     \\         /       \\\n      1-2       3-4       5-6       7-8\n    /    \\     /   \\     /   \\     /   \\\n  1-1   2-2  3-3   4-4  5-5  6-6  7-7  8-8 \n```\n\u6216\u8005\u662f\n```\n  |1              -                    16|\n  |1      -      8|9         -         16|\n  |1  -  4|5  -  8|9   -   12|13   -   16|\n  |1-2|3-4|5-6|7-8|9-10|11-12|13-14|15-16|\n  |1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|\n```\n\n### \u90a3\u4e48\u5982\u4f55\u4fee\u6539\u5143\u7d20\u5462\uff1f\u8fd9\u91cc\u7528\u52a0\u6cd5\u4e3e\u4e2a\u4f8b\u5b50\u3002\u6211\u7ee7\u7eed\u4f7f\u7528\u4e8c\u5206\uff0c\u4ece\u6839\u5f00\u59cb\uff0c\u5f80\u4e0b\u5206\u3002\u9898\u76ee\u4e2d\u4f1a\u7ed9\u51fa\u8981\u589e\u52a0\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u4e8c\u5206\u51fa\u4e86\u533a\u95f4\uff0c\u5c31\u4e0d\u7528\u7ba1\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e00\u90e8\u5206\u4e0d\u9700\u8981\u52a0\u4e0a\u6570\u3002\uff08\u6bd4\u5982\u6211\u8981\u57283-5\u533a\u95f4\u52a0\u6570\uff0c\u4f46\u662f\u4e8c\u5206\u5230\u4e861-2\u533a\u95f4\uff0c\u8fd9\u65f6\u5c31\u8981\u9000\u51fa\u4e86\uff0c\u53cd\u6b63\u6211\u4e5f\u4e0d\u52a0\uff09\u4f46\u662f\u5982\u679c\u662f\u4e00\u90e8\u5206\u6709\u4ea4\u96c6\u65f6\u600e\u4e48\u529e\uff08\u5982\u52a03-5\uff0c\u5206\u52301-4\uff09\uff1f\u8fd9\u65f6\u5c31\u8981\u6709\u4e00\u4e9b\u65b9\u6cd5\u4e86\u3002\u4e00\u8a00\u4ee5\u853d\u4e4b\uff1a\n# \u7ee7\u7eed\u5206\uff01\n\n### \u6211\u4eec\u4e00\u76f4\u5411\u4e0b\u5206\uff0c\u76f4\u5230\u5206\u5230\u5de6\u53f3\u7aef\u70b9\u90fd\u5728\u6240\u9700\u8303\u56f4\u4e4b\u4e2d\n```\nvoid plus(ll x,ll li,ll ri,ll v){\n\tif(st[x].left_point>ri||st[x].right_point<li)return;//\u51fa\u4e86\u8303\u56f4\uff0c\u8df3\u51fa\n\tif(st[x].left_point>=li&&st[x].right_point<=ri){//\u90fd\u5728\u8303\u56f4\u4e2d\n\t\tst[x].lazy+=v;//\u6682\u65f6\u5148\u5ffd\u7565\n\t\tst[x].sum+=(st[x].right_point-st[x].left_point+1)*v;//\u771f\u5b9e\u589e\u503c\n\t\treturn;\n\t}\n    push_down(x);//\u6682\u65f6\u5ffd\u7565\n\tplus(left_son(x),li,ri,v);//\u4e8c\u5206\n\tplus(right_son(x),li,ri,v);//\u4e8c\u5206\n\tst[x].sum=st[left_son(x)].sum+st[right_son(x)].sum;//\u5728\u9012\u5f52\u8c03\u7528\u8fd4\u56de\u65f6\u5c06\u7236\u8282\u70b9\u503c\u6539\u53d8\n}\n```\n### \u8fd9\u6837\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u6b21\u6dfb\u52a0\u670d\u52a1\u7684\u51fd\u6570\u5df2\u7ecf\u5199\u5b8c\u3002\u4f46\u662f\uff0c\u5df2\u4fee\u6539\u8282\u70b9\u7684\u7956\u5148\u4fee\u6539\u4e86\uff0c\u800c\u5b50\u5b59\u6ca1\u6709\u4fee\u6539\uff0c\u8fd9\u8be5\u600e\u4e48\u529e\u5462\uff1f\n### \u6709\u4eba\u8bf4\uff0c\u53ef\u4ee5\u4ece\u5df2\u4fee\u6539\u8282\u70b9\u5411\u4e0b\u9012\u5f52\uff0c\u628a\u4e0b\u9762\u8282\u70b9\u90fd\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u4f1a\u5230\u8fbenlogn\uff0c\u5f97\u4e0d\u507f\u5931\u3002\n### \u4e8e\u662f\uff0clazy\u6807\u8bb0\u5e94\u8fd0\u800c\u751f\u3002lazy\u662f\u7528\u6765\u6807\u8bc6\u5f53\u524d\u533a\u95f4\u6bcf\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u52a0\u4e0a\u7684\u503c\uff0c\u5f53\u518d\u8fdb\u884c\u64cd\u4f5c\u65f6\u7ecf\u8fc7\u67d0\u4e00\u70b9\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e00\u70b9\u7684lazy\u503c\u5f80\u4e0b\u63a8\uff0c\u4e00\u76f4\u5230\u53f6\u5b50\u8282\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(1)\u3002\n```\nvoid push_down(ll x){\n\tst[left_son(x)].sum+=(st[left_son(x)].right_point-st[left_son(x)].left_point+1)*st[x].lazy;\n    //\u5c06\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u7684sum\u503c\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u7684lazy\u4e58\u4e0a\u5de6\u5b69\u5b50\u7684\u533a\u95f4\u957f\u5ea6\n\tst[right_son(x)].sum+=(st[right_son(x)].right_point-st[right_son(x)].left_point+1)*st[x].lazy;\n    //\u5c06\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u7684sum\u503c\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u7684lazy\u4e58\u4e0a\u53f3\u5b69\u5b50\u7684\u533a\u95f4\u957f\u5ea6\n\tst[left_son(x)].lazy+=st[x].lazy;\n    //\u5c06lazy\u6807\u8bb0\u5411\u5de6\u4e0b\u63a8\n\tst[right_son(x)].lazy+=st[x].lazy;\n    //\u5c06lazy\u6807\u8bb0\u5411\u53f3\u4e0b\u63a8\n\tst[x].lazy=0;\n    //\u5df2\u7ecf\u52a0\u5b8c\uff0c\u5f52\u96f6\n}\n```\n\u5982\u56fe\uff1a\n### \u8fd9\u662flazy\u6807\u8bb0\u4e0b\u63a8\n![](https://cdn.luogu.com.cn/upload/pic/45943.png)\n### \u8fd9\u662fsum\u503c\u4e0b\u63a8\n![](https://s1.ax1x.com/2018/12/11/FYkMuD.png)\n### \u6240\u4ee5\u6211\u4eec\u5229\u7528lazy\u6807\u8bb0\u5c31\u89e3\u51b3\u4e86\u590d\u6742\u5ea6\u592a\u9ad8\u7684\u95ee\u9898\uff0c\u4e00\u53e5\u8bdd\u603b\u7ed3\uff0c\u5c31\u662f\uff1a\u5728\u9700\u8981\u5411\u4e0b\u641c\u7d22\u65f6\u518d\u628a\u503c\u5411\u4e0b\u63a8\uff0c\u4e0d\u7528\u5c31\u4e0d\u63a8\u3002\n### \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f53\u6211\u4eec\u9700\u8981\u67e5\u627e\u65f6\uff0c\u5c31\u7528\u4e00\u6837\u7684\u9053\u7406\n```cpp\nll find(ll x,ll li,ll ri){\n\tif(st[x].left_point>ri||st[x].right_point<li)return 0;\n    //\u5982\u679c\u641c\u7d22\u51fa\u8303\u56f4\u4e86\uff0c\u5c31\u505c\u6b62\n\tif(st[x].left_point>=li&&st[x].right_point<=ri){\n\t\treturn st[x].sum;//\u8fb9\u754c\uff0c\u641c\u7d22\u533a\u95f4\u5b8c\u5168\u5728\u8303\u56f4\u5185\uff0c\u8fd4\u56desum\u503c\n\t}\n\tpush_down(x);//\u522b\u5fd8\u4e86\u5728\u5411\u4e0b\u67e5\u627e\u4e4b\u524d\u4e0b\u63a8\n\treturn find(left_son(x),li,ri)+find(right_son(x),li,ri);//\u4e8c\u5206\u641c\u7d22\n}\n```\n## \u81f3\u6b64\uff0c\u6574\u4e2a\u7ebf\u6bb5\u6811\u6211\u4eec\u5c31\u5199\u5b8c\u4e86\uff08\u7701\u7565\u4e3b\u51fd\u6570\uff09\n### \u7ebf\u6bb5\u6811\u662f\u6211\u81ea\u5b66\u4e60OI\u4ee5\u6765\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u9ad8\u7ea7\u7b97\u6cd5\uff0c\u5fc3\u91cc\u8fd8\u662f\u5f88\u6fc0\u52a8\u7684\uff0c\u5c31\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\u6765\u8bb0\u5f55\u5b83\uff08\u4e5f\u662f\u6211\u76ee\u524d\u5199\u8fc7\u7684\u6700\u957f\u7684\u9898\u89e3\u4e86\uff09\n\n\n------------\n\n# \u5b8c\u6574\u4ee3\u7801\uff08P3372\uff09\n\n\n```cpp\n#include<cstdio>\n#define left_son(x) (x<<1)\n#define right_son(x) (x<<1|1)\n#define ll long long\nstruct segment_tree{\n\tll left_point,right_point,sum,lazy;\n}st[400010];\nll n,m,a[100010];\nvoid build(ll x,ll li,ll ri){\n\tst[x].left_point=li;\n\tst[x].right_point=ri;\n\tif(li==ri){\n\t\tst[x].sum=a[li];\n\t\treturn;\n\t}\n\tll mid=(li+ri)/2;\n\tbuild(left_son(x),li,mid);\n\tbuild(right_son(x),mid+1,ri);\n\tst[x].sum=st[left_son(x)].sum+st[right_son(x)].sum;\n}\nvoid push_down(ll x){\n\tst[left_son(x)].sum+=(st[left_son(x)].right_point-st[left_son(x)].left_point+1)*st[x].lazy;\n\tst[right_son(x)].sum+=(st[right_son(x)].right_point-st[right_son(x)].left_point+1)*st[x].lazy;\n\tst[left_son(x)].lazy+=st[x].lazy;\n\tst[right_son(x)].lazy+=st[x].lazy;\n\tst[x].lazy=0;\n}\nvoid plus(ll x,ll li,ll ri,ll v){\n\tif(st[x].left_point>ri||st[x].right_point<li)return;\n\tif(st[x].left_point>=li&&st[x].right_point<=ri){\n\t\tst[x].lazy+=v;\n\t\tst[x].sum+=(st[x].right_point-st[x].left_point+1)*v;\n\t\treturn;\n\t}\n\tpush_down(x);\n\tplus(left_son(x),li,ri,v);\n\tplus(right_son(x),li,ri,v);\n\tst[x].sum=st[left_son(x)].sum+st[right_son(x)].sum;\n}\nll find(ll x,ll li,ll ri){\n\tif(st[x].left_point>ri||st[x].right_point<li)return 0;\n\tif(st[x].left_point>=li&&st[x].right_point<=ri){\n\t\treturn st[x].sum;\n\t}\n\tpush_down(x);\n\treturn find(left_son(x),li,ri)+find(right_son(x),li,ri);\n}\nint main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tll sign,x,y,k;\n\t\tscanf(\"%lld\",&sign);\n\t\tif(sign==1){\n\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&k);\n\t\t\tplus(1,x,y,k);\n\t\t}else{\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",find(1,x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1544255238,
        "uid": 65743,
        "name": "\u6ed1\u7a3d\u7684\u5c0f\u5bab",
        "ccfLevel": 7,
        "title": "\u7ebf\u6bb5\u6811\u8be6\u89e3"
    },
    {
        "content": "**What the hell is that?**  \n\u7ebf\u6bb5\u6811\uff1a\u652f\u6301\u4efb\u4f55\u4f60\u60f3\u5f97\u5230\u505a\u5f97\u5230\u4ee5\u53ca\u60f3\u5f97\u5230\u505a\u4e0d\u5230\u4ee5\u53ca\u60f3\u4e0d\u5230\u505a\u5f97\u5230\u4ee5\u53ca\u60f3\u4e0d\u5230\u505a\u4e0d\u5230\u7684\u5751\u7239\u73a9\u610f\u3002  \n\u5982\u4f55\u5b58\u50a8\u7ebf\u6bb5\u6811\uff1f  \n\u5b9a\u4e49\u6570\u7ec4t,t\u7684\u7b2ci\u9879\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u533a\u95f4\u7684\u4e1c\u4e1c\u3002  \n\u56fe\u7247\uff1a  \n[\u7ebf\u6bb5\u6811](https://baike.baidu.com/pic/\u7ebf\u6bb5\u6811/10983506/0/bd3eb13533fa828bcb5fe85ffe1f4134970a5a09?fr=lemma&ct=single#aid=0&pic=0e2442a7d933c895d47476f7db1373f082020037)  \n\u6765\u770b\u4e2a\u4f8b\u9898\uff01  \n[\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u68111](https://www.luogu.org/problemnew/show/P3372)  \n\u66b4\u529b\uff1f  \n\u53bb\u5427\u76ae\u5361\u4e18\uff0c\u522b\u518d\u56de\u6765\u4e86\uff01  \n\u6709\u6ca1\u6709\u4ec0\u4e48\u597d\u66b4\u529b\uff1f  \n\u4f60\u8fd8\u60f3\u7528\u66b4\u529b\u5361\u8fc7\u53bb\uff01\uff1f  \n\u6811\u72b6\u6570\u7ec4\uff1f  \n\u4f60\u5f88\u68d2\uff0c\u6211\u4e0d\u4f1a\u3002  \n\u90a3\u7528\u4ec0\u4e48\uff1f  \n\u770b\u9898\u76ee\u5457\u3002  \n**\u7ebf\u6bb5\u6811**  \n\u90a3\u5c31\u7528\u7ebf\u6bb5\u6811\u4e86\u3002  \n\n------------\n\n\u5efa\u6811\uff1a   \n\u6bcf\u6b21\u9012\u5f52\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff0c\u518d\u53d6\u548c\uff1b\u82e5\u662f\u5355\u4e2a\u6570\uff0c\u76f4\u63a5\u53d6\u5f53\u524d\u6743\u503c\u3002  \n```cpp\nvoid build(int l,int r,int num)\n{\n    if(l==r)\n    {\n        t[num]=a[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(LB);\n    build(RB);\n    t[num]=t[num<<1]+t[num<<1|1];\n}\n```\n\n\u533a\u95f4\u4fee\u6539\uff1a  \n\u7b2c\u4e00\u79cd\uff1a\u4e00\u4e2a\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u8fc7\u6765\uff0c\u65f6\u95f4\u5f88\u6162\u3002  \n\u7b2c\u4e8c\u79cd\uff1a\u82e5\u5f53\u524d\u533a\u95f4\u5728\u76ee\u6807\u533a\u95f4\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u672c\u533a\u95f4\u7684\u503c\uff0c\u518d\u5c06\u4fee\u6539\u503c\u4f20\u7ed9\u513f\u5b50\uff1b\u5426\u5219\u9009\u62e9\u4e0e\u533a\u95f4\u6709\u4ea4\u96c6\u7684\u513f\u5b50\u4f20\u4fee\u6539\u503c\uff0c\u81ea\u5df1\u52a0\u4e0a\u4ea4\u96c6\u90e8\u5206\u3002  \n```cpp\nvoid index(int x,int y,int l,int r,int sum,int num)\n{ \n    int f=0;\n    if(l>y||r<x) return;\n    int e[5];\n    e[1]=x,e[2]=y,e[3]=l,e[4]=r;\n    sort(e+1,e+5);\n    f=e[3]-e[2]+1;\n    a[num]+=sum*f;\n    if(l==r) return;\n    index(x,y,l,(l+r)/2,sum,(num<<1));\n    index(x,y,(l+r)/2+1,r,sum,(num<<1)+1);\n}\n//\u7384\u5b66\u4ee3\u7801\n```\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff1a\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5783\u573e\u6b7b\u4e86\uff0c\u8fde\u7b97\u6cd5\u4e00\u90fd\u4e0d\u5982\u3002  \n\u6240\u4ee5\u6211\u4eec\u5f97\u52a0\u4e0a\u61d2\u6807\u8bb0\u3002  \n\u4f55\u8c13\u61d2\u6807\u8bb0\uff1f  \n\u5c31\u662f\u8981\u4f20\u5c31\u4f20\uff0c\u4e0d\u4f20\u62c9\u5012\u3002  \n\u533a\u95f4\u4fee\u6539\u4ee3\u7801\uff1a  \n```cpp\nvoid update(int l,int r,int num,int L,int R,ll SUM)\n{\n    if(L<=l&&R>=r)\n    {\n        laz[num]+=SUM;\n        t[num]+=SUM*(r-l+1);\n        return;\n    }\n    pushup(num,(r-l+1));\n    int mid=(l+r)>>1;\n    if(L<=mid) update(LB,L,R,SUM);\n    if(R>mid) update(RB,L,R,SUM);\n    t[num]=t[num<<1]+t[num<<1|1];\n}\n```\n\n\u61d2\u6807\u8bb0\u4e0b\u4f20\u4ee3\u7801\uff1a  \n```cpp\nvoid pushup(int num,int u)\n{\n    if(laz[num]!=0)\n    {\n        laz[num<<1]+=laz[num];\n        laz[num<<1|1]+=laz[num];\n        t[num<<1|1]+=(ll)(u>>1)*laz[num];\n        t[num<<1]+=(ll)(u-(u>>1))*laz[num];\n        laz[num]=0;\n    }\n}\n```\n\n\u533a\u95f4\u67e5\u8be2\uff1a  \n\u7b80\u5355\u591a\u4e86\u3002\n```cpp\nll serch(int l,int r,int num,int L,int R)\n{\n    \n    if(L<=l&&R>=r)\n    {\n        return t[num];\n    }\n    pushup(num,(r-l+1));\n    int mid=(l+r)>>1;\n    ll rep=0; \n    if(L<=mid) rep+=serch(LB,L,R);\n    if(R>mid) rep+=serch(RB,L,R);\n    return rep; \n}\n```\n\n\u4ec0\u4e48\uff1f\u4f60\u8981\u5b8c\u6574\u7684\u4ee3\u7801\uff1f\u4e0d\u884c\uff01  \n\n\u624d\u602a\u4e86\u3002  \nstd:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define LB l,mid,num<<1\n#define RB mid+1,r,num<<1|1\nconst int N=100005;\nint n,m;\nll a[N];\nll t[4*N]={0};\nll laz[4*N]={0};\nvoid pushup(int num,int u)\n{\n    if(laz[num]!=0)\n    {\n        laz[num<<1]+=laz[num];\n        laz[num<<1|1]+=laz[num];\n        t[num<<1|1]+=(ll)(u>>1)*laz[num];\n        t[num<<1]+=(ll)(u-(u>>1))*laz[num];\n        laz[num]=0;\n    }\n}\nvoid build(int l,int r,int num)\n{\n    if(l==r)\n    {\n        t[num]=a[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(LB);\n    build(RB);\n    t[num]=t[num<<1]+t[num<<1|1];\n}\nvoid update(int l,int r,int num,int L,int R,ll SUM)\n{\n    if(L<=l&&R>=r)\n    {\n        laz[num]+=SUM;\n        t[num]+=SUM*(r-l+1);\n        return;\n    }\n    pushup(num,(r-l+1));\n    int mid=(l+r)>>1;\n    if(L<=mid) update(LB,L,R,SUM);\n    if(R>mid) update(RB,L,R,SUM);\n    t[num]=t[num<<1]+t[num<<1|1];\n}\nll serch(int l,int r,int num,int L,int R)\n{\n    \n    if(L<=l&&R>=r)\n    {\n        return t[num];\n    }\n    pushup(num,(r-l+1));\n    int mid=(l+r)>>1;\n    ll rep=0; \n    if(L<=mid) rep+=serch(LB,L,R);\n    if(R>mid) rep+=serch(RB,L,R);\n    return rep; \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&a[i]); \n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        if(x==1)\n        {\n            int l,r;\n            ll k;\n            scanf(\"%d %d %lld\",&l,&r,&k);\n            update(1,n,1,l,r,k); \n        }\n        else\n        {\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            ll ans=serch(1,n,1,l,r);\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n} \n```\n",
        "postTime": 1534318087,
        "uid": 61757,
        "name": "Seanq",
        "ccfLevel": 0,
        "title": "\u6bcf\u65e5\u4e00scape\uff08escape\uff09:2018/8/13 \u7ebf\u6bb5\u6811"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdio> \nusing namespace std;\nconst int N=1e5+100;\nlong long tr[N*4],flag[N*4],ans;\nvoid built(int i,int l,int r,int x,long long val)//\n{\n    if(l==r)//\u627e\u5230\u4e86\u53f6\u5b50\u8282\u70b9 \n    {\n        tr[i]+=val;//\u628a\u53f6\u5b50\u8282\u70b9\u7684\u521d\u59cb\u66f4\u65b0 \n        return;\n    }\n    int mid=(l+r)/2;\n    if(x<=mid) built(i*2,l,mid,x,val);//\u5de6\u5b50\u6811 \n    if(x>mid) built(i*2+1,mid+1,r,x,val);//\u53f3\u5b50\u6811 \n    tr[i]=tr[i*2]+tr[i*2+1];//\u56de\u6eaf\u65f6\u66f4\u65b0\u8282\u70b9 \n    return;\n}\nvoid pushdown(int i,int l,int r)//lazy\u64cd\u4f5c,\u7528\u5230\u624d\u66f4\u65b0 \n{\n    int mid=(l+r)/2;\n    tr[i*2]+=flag[i]*(mid-l+1);//mid-l+1\u662f\u533a\u95f4\u5185\u5143\u7d20\u7684\u4e2a\u6570,flag[i]\u662f\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u4e0b\u7684\u8282\u70b9\u6bcf\u4e2a\u5143\u7d20\u5e94\u66f4\u65b0\u7684\u503c //\u5de6\u5b50\u6811 \n    tr[i*2+1]+=flag[i]*(r-mid);//\u672c\u662fr-(mid+1)+1,\u5316\u7b80\u540e\u662fr-mid//\u53f3\u5b50\u6811 \n\tflag[i*2]+=flag[i];\n\tflag[i*2+1]+=flag[i];//\u5e94\u4e3a\u6211\u4eec\u7528\u8fc7\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u6807\u8bb0\u8fc7,\u6240\u4ee5\u6807\u8bb0\u4e00\u4e0b \n    flag[i]=0;//\u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86,\u6e05\u7a7a\u6807\u8bb0 \n    return;\n}\nvoid update(int i,int l,int r,long long x,long long y,long long k)//\u66f4\u65b0//\u64cd\u4f5c\u4e00 \n{\n    if(l>=x&&r<=y)//\u5982\u679c(l,r)\u5728(x,y)//\u4f53\u4f1a\u4e00\u4e0b,\u4e5f\u4e0d\u77e5\u751f\u4e0d\u751f\u52a8{X(l,r)Y}//\u8868\u660e\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u70b9 \n    {\n        tr[i]+=k*(r-l+1);//\u56e0\u4e3alazy\u64cd\u4f5c,\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0\u6211\u4eec\u8981\u6c42\u7684\u70b9 ,\u6ca1\u66f4\u65b0\u7684\u7528\u5230\u624d\u66f4\u65b0 \n        flag[i]+=k;//\u6807\u8bb0\u5f53\u524d\u8282\u70b9\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6bcf\u4e2a\u503c\u90fd\u9700\u8981\u52a0\u4e0aflag[i],\u73b0\u5728\u4e0d\u52a0,\u8981\u7528\u5230\u624d\u66f4\u65b0 \n        return;\n    }\n    if(flag[i]>0) pushdown(i,l,r);//\u56e0\u4e3a\u4e48\u6709\u6ee1\u8db3if,\u8bf4\u660e\u8981\u7528\u5f53\u524d\u8282\u70b9\u4ee5\u53ca\u5b83\u7684\u5b50\u8282\u70b9,\u6240\u4ee5\u8981\u66f4\u65b0\n\t/*\u8fd9\u91cc\u53ef\u80fd\u4f1a\u770b\u4e0d\u61c2,\u5982\u679c\u7b2c\u4e00\u6b21\u6211\u4eec\u66f4\u65b0\u4e86(5,8)\u4f46\u5b83\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u66f4\u65b0,\u5982\u679c\u4e0b\u6b21\u8981\u66f4\u65b0(5,6),\u4f46\u539f\u6765(5,6)\u5c31\u6709\u503c\u6ca1\u66f4\u65b0\u6240\u4ee5\u4f1a\u5c11\u52a0,\u6240\u4ee5\u628a\u539f\u6765\n\t\u7684\u503c\u66f4\u65b0,\u518d\u66f4\u65b0\u5f53\u524d\u503c*/ \n    int mid=(l+r)/2;\n    if(mid>=x) update(i*2,l,mid,x,y,k);//\u4e00\u76f4dfs,\u76f4\u5230\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u503c//\u5de6\u5b50\u6811 \n    if(mid<y) update(i*2+1,mid+1,r,x,y,k);//\u53f3\u5b50\u6811 \n    tr[i]=tr[i*2]+tr[i*2+1];\n    return;\n}\nvoid query(int i,int l,int r,long long x,long long y)//\u64cd\u4f5c\u4e8c \n{\n    if(l>=x&&r<=y)//\u5982\u679c(l,r)\u5728(x,y)//\u4f53\u4f1a\u4e00\u4e0b,\u4e5f\u4e0d\u77e5\u751f\u4e0d\u751f\u52a8{X(l,r)Y}//\u8868\u660e\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u70b9(\u540c\u4e0aupdate\u867d\u7136\u8fd8\u662f\u6253\u4e86\u4e00\u904d) \n    {\n        ans+=tr[i];//\u66f4\u65b0ans\u628a\u533a\u95f4\u5185\u7684\u503c\u52a0\u4e0a \n        return;\n    }\n    if(flag[i]>0) pushdown(i,l,r);//\u56e0\u4e3alazy\u64cd\u4f5c,\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u66f4\u65b0,\u6240\u4ee5\u8981\u66f4\u65b0\u4e00\u904d \n    int mid=(l+r)/2;\n    if(mid>=x) query(i*2,l,mid,x,y);//\u4e00\u76f4dfs,\u76f4\u5230\u662f\u6211\u4eec\u8981\u52a0\u7684\u503c//\u5de6\u5b50\u6811 \n    if(mid<y) query(i*2+1,mid+1,r,x,y);//\u53f3\u5b50\u6811 \n}\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        long long x;//\u9898\u76ee\u8bf4\u4e86\u8981\u7528long long \n        cin>>x;\n        built(1,1,n,i,x);\n    }\n    while(m--)\n    {\n        int op;\n        cin>>op;\n        if(op==1)//\u64cd\u4f5c\u4e00 \n        {\n            long long x,y,k;\n            cin>>x>>y>>k;\n            update(1,1,n,x,y,k);\n        }\n       \tif(op==2)//\u64cd\u4f5c\u4e8c \n        {\n            long long x,y;\n            cin>>x>>y;\n            ans=0;\n            query(1,1,n,x,y);\n            cout<<ans<<endl;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1534078387,
        "uid": 107297,
        "name": "\u674eMY",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6ca1\u6709\u4eba\u5199**\u6807\u8bb0\u6c38\u4e45\u5316**\u7684\u7ebf\u6bb5\u6811\u554aqwq\n\n\u6240\u8c13\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5c31\u662f\u4e0b\u653e\u6807\u8bb0\u540e**\u4e0d\u53bbpushdown**\uff0c\u5728\u7edf\u8ba1\u7684\u65f6\u5019\u7ecf\u8fc7\u7ebf\u6bb5\u6811\u67d0\u8282\u70b9\u5c06\u8be5\u70b9add\u6807\u8bb0\u52a0\u5165\u8d21\u732e\u7684\u65b9\u6cd5\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u4ee3\u7801\u4e2d\u6709\n\n\u4e0a\u4ee3\u7801\u2193\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nlong long num[1<<18],add[1<<18];\nint n,m,p,l,r,x,a[1<<17];\n\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\tnum[k]=a[l];\n\t\treturn;\n\t}int i=k<<1,mid=(l+r)>>1;\n\tbuild(i,l,mid);\n\tbuild(i|1,mid+1,r);\n\tnum[k]=num[i]+num[i|1];\n}\n\nvoid cadd(int x,int k,int l,int r,int le,int ri){\n\tif(le<=l&&r<=ri){\n\t\tadd[k]+=x;\n\t\tnum[k]+=x*(r-l+1);\n\t\treturn;\n\t}int i=k<<1,mid=(l+r)>>1;\n\tif(le<=mid) cadd(x,i,l,mid,le,ri);\n\tif(mid<ri) cadd(x,i|1,mid+1,r,le,ri);\n\tnum[k]=num[i]+num[i|1]+add[k]*(r-l+1);\n}\n\nlong long ans(long long addx,int k,int l,int r,int le,int ri){\n\tif(le<=l&&r<=ri) return num[k]+addx*(r-l+1);\n\tint i=k<<1,mid=(l+r)>>1;\n\tlong long sum=0;\n\tif(le<=mid) sum+=ans(addx+add[k],i,l,mid,le,ri);\n\tif(mid<ri) sum+=ans(addx+add[k],i|1,mid+1,r,le,ri);\n\treturn sum;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a[i]);\n\t}build(1,1,n);\n\twhile(m--){\n\t\tscanf(\"%d%d%d\",&p,&l,&r);\n\t\tif(p==1){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tcadd(x,1,1,n,l,r);\n\t\t}else{\n\t\t\tprintf(\"%lld\\n\",ans(0,1,1,n,l,r));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1521032308,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7684\u539f\u7406\u6ca1\u4ec0\u4e48\u53ef\u8bf4\u7684\uff0c\u76f8\u4fe1\u4f60\u5728\u5176\u4ed6\u5730\u65b9\u4e00\u5b9a\u4e86\u89e3\u4e0d\u5c11\u3002\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u65b9\u6cd5\n\n1.addNode()\u51fd\u6570\uff1a\u4f5c\u7528\uff1a\u7ed9\u67d0\u4e2a\u8282\u70b9\u66f4\u65b0value\uff08value+=size\\*v\uff09\uff0c\u5e76\u4e14\u6253\u4e0a\u6807\u8bb0\uff08\u6ce8\u610f\u662f\u4e3a\u4e86\u5b83\u7684\u5b69\u5b50\u8ba4\u8bc6\u5b83\u6253\u7684\u6807\u8bb0\uff0c\u4ed6\u81ea\u5df1\u672c\u8eab\u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86\uff09\n\n2.pushUp()\u51fd\u6570\uff1a\u4f5c\u7528\uff1a\u6839\u636e\u5b69\u5b50\u7684\u4fe1\u606f\uff08\u672c\u9898\u4e3a'\u52a0\u548c'\uff09\u5411\u4e0a\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f\n\n3.pushDown()\u51fd\u6570\uff1a\u4f5c\u7528\uff1a\u61d2\u6807\u8bb0\u4e0b\u4f20\uff0c\u5c06\u6dfb\u52a0\u64cd\u4f5c'\u61d2\u5f97\u5411\u4e0b\u66f4\u65b0'\u7684\u8fd9\u4ef6\u4e8b'\u987a\u4fbf'\u505a\u4e86\uff0c\u56e0\u4e3a\u6709\u4e86addNode()\u6240\u4ee5\u5c31\u53ef\u4ee5\u76f4\u63a5addNode\u5de6\u513f\u5b50\uff0caddNode\u53f3\u513f\u5b50\u3002\n\n\n\u81f3\u4e8e\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\uff0c\u6709\u5341\u591a\u79cd\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e09\u79cd\u5199\u6cd5\uff1a\n\n1.\u6307\u9488\u7248\u7ebf\u6bb5\u6811\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    using namespace std;\n    #define LL long long\n    struct Node*null;//\u66ff\u4ee3NULL\u9632\u6b62RE\uff0c\u8be6\u89c1\u4e0b\u9762init()\n    struct Node{\n        Node* ch[2];\n        LL v,adds;int l,r,mid;\n        Node(int ll,int rr){l=ll,r=rr;ch[0]=ch[1]=null;}\n        inline void pushUp(){v=ch[0]->v+ch[1]->v;}\n        inline void addNode(LL x){adds+=x,v+=x*(r-l+1);}\n        inline void pushDown(){\n            if(adds){ch[0]->addNode(adds),ch[1]->addNode(adds);adds=0;}\n        }\n    }*root;\n    int n;\n    void build(Node*&k=root){\n        k->mid=(k->l+k->r)/2;\n        if(k->r==k->l){scanf(\"%d\",&k->v);return;}\n        build(k->ch[0]=new Node(k->l,k->mid));\n        build(k->ch[1]=new Node(k->mid+1,k->r));\n        k->pushUp();\n    }\n    LL query(int ql,int qr,Node*k=root){\n        if(ql>k->r||qr<k->l)return 0;\n        if(ql<=k->l&&qr>=k->r)return k->v;\n        k->pushDown();\n        return query(ql,qr,k->ch[0])+query(ql,qr,k->ch[1]);\n    }\n    void add(int ql,int qr,LL v,Node*k=root){\n        if(ql>k->r||qr<k->l)return;\n        if(ql<=k->l&&qr>=k->r){k->addNode(v);return;}//\u56e0\u4e3a\u6709\u4e86addNode\uff0c\u4ec0\u4e48\u90fd\u5f88\u65b9\u4fbf\n        k->pushDown();\n        add(ql,qr,v,k->ch[0]),add(ql,qr,v,k->ch[1]);\n        k->pushUp();\n    }\n    void init(){\n        null = new Node(0,0);\n        root=null->ch[0]=null->ch[1]=null;\n        null->adds=0;root=new Node(1,n);\n    }\n    int main(){\n        int m;scanf(\"%d%d\",&n,&m);\n        init();build();\n        while(m--){\n            int a,b,c,d;scanf(\"%d%d%d\",&a,&b,&c);\n            if(a==1)scanf(\"%d\",&d),add(b,c,d);\n            else printf(\"%lld\\n\",query(b,c));\n        }\n    }\n```\n\u76f8\u4fe1\u8fd9\u4efd\u4ee3\u7801\u5df2\u7ecf\u591f\u6e05\u6670\u4e86\uff0c\u4e00\u76ee\u4e86\u7136\n\u5982\u679c\u8fd8\u8981\u7ef4\u62a4\u5176\u4ed6\u7684\uff0c\u540c\u6837\u53ef\u4ee5\u5199\"~~~Node()\"\u6765\u7b80\u5316\u4ee3\u7801\n\n\n2.pushDown\u7248zkw\u7ebf\u6bb5\u6811\n\n\u7ebf\u6bb5\u6811\u81ea\u4e0b\u800c\u4e0a\u5806\u5f0f\u5efa\u7acb\u3001\u4fee\u6539\u3001\u67e5\u8be2\uff0c\u6280\u5de7\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u4e3b\u8981\u5c31\u662f\u601d\u8def\u4e0d\u540c\n\n\u8fd9\u91cc\u5728\u4ee3\u7801\u4e0a\u591a\u4e9b\u6ce8\u91ca\n\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    using namespace std;\n    #define LL long long\n    const int maxn = 1e5+5;\n    int n,m,M;\n    LL tree[maxn<<2],adds[maxn<<2],size[maxn<<2];\n    inline void pushUp(int x){\n        tree[x]=tree[x<<1]+tree[x<<1|1];//\u540c\u4e0a\n    }\n    void build(){//\u6574\u68f5\u6570\u662f\u4e2a\u5806\n        for(M=1;M<n+3;M<<=1);//M\u662f\u4ece\u6839\u5230\u5e95\u5c42\u4ee5\u524d\u7684\u8282\u70b9\u7684\u4e2a\u6570\n        for(register int i=1;i<=n;++i)scanf(\"%d\",&tree[i+M]);//\u8f93\u5165\u5806\u7684\u6700\u5e95\u5c42\u7684\u6570\n        for(register int i=M;i<=(M<<1);++i)size[i]=1;//\u521d\u59cb\u5316\u6700\u5e95\u5c42\u7684\u7ba1\u7406\u5927\u5c0f\n        for(register int i=M-1;i;--i)size[i]=size[i<<1]+size[i<<1|1],pushUp(i);//\u628a\u7ba1\u7406\u5927\u5c0f\u548c\u52a0\u548c\u540c\u65f6\u5411\u4e0a\u66f4\u65b0\n    }\n    inline void addNode(int x,int v){\n        adds[x]+=v;tree[x]+=size[x]*v;//\u540c\u4e0a\n    }\n    void pushDown(int x){\n        if(x^1)pushDown(x>>1);//\u5c06\u6807\u8bb0\u4e0b\u4f20\u505a\u6210\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u56e0\u4e3a\u67e5\u8be2\u3001\u4fee\u6539\u90fd\u662f\u5faa\u73af\uff0c\u65e0\u6cd5\u9012\u5f52\uff0c\u6240\u4ee5\u624b\u52a8\u9012\u5f52\n        if(adds[x])addNode(x<<1,adds[x]),addNode(x<<1|1,adds[x]);//\u540c\u4e0a\n        adds[x]=0;\n    }\n    void add(int l,int r,LL v){//\u81ea\u5e95\u800c\u4e0a\n        pushDown((l+=M-1)>>1),pushDown((r+=M+1)>>1);//\u5148\u9012\u5f52\u5230\u6839\u8282\u70b9\u4e0b\u4f20\u4e0b\u6765\n        for(;l^r^1;l>>=1,r>>=1){//\u4e00\u76f4\u5411\u4e0a\uff0c\u76f4\u5230\u76f8\u9047\uff08>>=1\u8868\u793a\u8df3\u5230\u7236\u4eb2\uff09\n            if(~l&1)addNode(l^1,v);if(r&1)addNode(r^1,v);//\u6a21\u62df\u4e00\u4e0b\u5c31\u660e\u767d\u4e86\n            pushUp(l>>1),pushUp(r>>1);\n        }for(l>>=1;l;l>>=1)pushUp(l);//\u63a5\u7740\u6ca1\u6709pushUp\u5b8c\u7684\u5730\u65b9\u7ee7\u7eed\n    }\n    LL query(int l,int r){LL ans=0;//\u540c\u4e0a\n        pushDown((l+=M-1)>>1),pushDown((r+=M+1)>>1);\n        for(;l^r^1;l>>=1,r>>=1){\n            if(~l&1)ans+=tree[l^1];if(r&1)ans+=tree[r^1];\n        }return ans;\n    }\n    int main(){\n        int m;scanf(\"%d%d\",&n,&m);\n        build();\n        while(m--){\n            int a,b,c,d;scanf(\"%d%d%d\",&a,&b,&c);\n            if(b>c)swap(b,c);\n            if(a==1)scanf(\"%d\",&d),add(b,c,d);\n            else printf(\"%lld\\n\",query(b,c));\n        }\n    }\n```\n3.\u5e73\u8861\u6811\uff08\u8fd9\u91cc\u7528splay\uff09\n\u6709\u4eba\u53ef\u80fd\u89c9\u5f97\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\uff0c\u6ca1\u6709\u610f\u4e49\u7684\u3002\n\n\u4f46\u662f\uff0c\u7528splay\u5b9e\u73b0\u7ebf\u6bb5\u6811\u7684\u529f\u80fd\uff0c\u4ecd\u80fd\u5e2e\u52a9\u7ec3\u4e60splay\u7ef4\u62a4\u533a\u95f4\n\n\u4e0b\u9762\u5c31\u4e0d\u8bb2\u89e3splay\u4e86\uff0c\u53ea\u8bf4\u8bf4\u5982\u4f55\u7ef4\u62a4'\u52a0\u548c'\uff08\u65e0\u7236splay\uff09\n\n```cpp\n    #include<cstdio>\n    #include<iostream>\n    #include<queue>\n    using namespace std;\n    #define LL long long int\n    const int inf = 0x7fffffff,maxn = 1e5+5;\n    int n;LL A[maxn];\n    struct Node *null;\n    struct Node{//\u7528\u533a\u95f4\u4e2d\u6240\u5728\u4e0b\u6807\u5efa\u7acbsplay\n        Node* ch[2];\n        int v,cnt,siz;LL val,adds;//\u7ef4\u62a4val,adds\n        Node(int v){ch[0]=ch[1]=null;this->v=v;cnt=siz=1;val=adds=0;}\n        inline int cmp(int x){return x<v?0:(x>v?1:-1);}\n        inline void pushUp(){siz=cnt+ch[0]->siz+ch[1]->siz,val=A[v]+ch[0]->val+ch[1]->val;}//\u6ce8\u610f\u4e00\u4e0b\uff0c\u987a\u4fbf\u4e5f\u8981\u66f4\u65b0val\u52a0\u548c\n        inline void addNode(LL x){if(this==null)return;val+=siz*x;adds+=x;A[v]+=x;}\n        inline void pushDown(){if(adds){ch[0]->addNode(adds),ch[1]->addNode(adds);adds=0;}}\n    }*root;\n    inline void rotate(Node*&k,int d){//\u65cb\u8f6c\n        Node *nn=k->ch[d^1];k->pushDown(),nn->pushDown();\n        k->ch[d^1]=nn->ch[d];nn->ch[d]=k;\n        k->pushUp(),nn->pushUp();k=nn;\n    }\n    inline void splay(int v,Node*&to=root){//\u9012\u5f52\u4f38\u5c55\n        int d1=to->cmp(v);\n        if(~d1&&to->ch[d1]!=null){\n            int d2=to->ch[d1]->cmp(v);\n            if(~d2&&to->ch[d1]->ch[d2]!=null){\n                splay(v,to->ch[d1]->ch[d2]);\n                if(d1==d2)rotate(to,d1^1);else rotate(to->ch[d1],d2^1);\n            }rotate(to,d1^1);\n        }\n    }\n    inline void init(){//\u521d\u59cb\u5316null\n        null=new Node(0);\n        root=null->ch[0]=null->ch[1]=null;\n        null->siz=null->cnt=null->adds=0;\n    }\n    void build(){\n        Node* temp=new Node(0);\n        for(register int i=1;i<=n;++i){\n            scanf(\"%d\",&A[i]);\n            Node* nd=new Node(i);nd->ch[0]=temp;temp=nd;temp->pushUp();\n        }root=temp;root->ch[1]=new Node(n+1);\n    }\n    void addInvl(int l, int r, LL v){//\u7ebf\u6bb5\u6811\uff1a\u533a\u95f4\u52a0\n        splay(l-1);splay(r+1,root->ch[1]);//\u628al\u524d\u9a71\u4f38\u5c55\u5230\u6839\u8282\u70b9\uff0c\u628ar\u540e\u7ee7\u4f38\u5c55\u5230\u6839\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u533a\u95f4\u5c31\u5728\u6839\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\n        root->ch[1]->ch[0]->addNode(v);\n        root->ch[1]->pushUp();\n        root->pushUp();\n    }\n    LL query(int l,int r){//\u7ebf\u6bb5\u6811\uff1a\u533a\u95f4\u67e5\u8be2\n        splay(l-1);splay(r+1,root->ch[1]);//\u540c\u7406\n        return root->ch[1]->ch[0]->val;\n    }\n    int main(){init();//\u5148\u521d\u59cb\u5316null\n        int m;scanf(\"%d%d\",&n,&m);\n        build();\n            while(m--){\n            int a,b,c,d;scanf(\"%d%d%d\",&a,&b,&c);\n            if(a==1){scanf(\"%d\",&d);addInvl(b,c,d);}\n            else printf(\"%lld\\n\",query(b,c));\n        }\n    }\n\n```",
        "postTime": 1515851768,
        "uid": 51189,
        "name": "Delva",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u5199\u4e86\u4e2a\u4e2a\u4eba\u611f\u89c9\u8fd8\u53ef\u4ee5\u7684\u6307\u9488\u7248\u7ebf\u6bb5\u6811\u677f\u5b50\n\n\u6ce8\uff1a\n- \u8be5\u677f\u5b50\u4e3a\u6307\u9488\u7248\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u7ebf\u6bb5\u6811\n\n- \u6240\u6709\u6d89\u53ca\u5230\u7684\u533a\u95f4\u5747\u4e3a**\u5de6\u95ed\u53f3\u5f00**\u533a\u95f4\n\n- \u8fd9\u91cc\u7684lazy\u88ab\u6253\u4e0a\u4e4b\u540e\u503c\u5df2\u7ecf\u88ab\u66f4\u65b0\u5b8c\u4e86\uff0c\u8fd9\u4e1c\u897f\u597d\u50cf\u6709\u4e2a\u540d\u5b57\u53eb\u524d\u6548\u6027\u8fd8\u662f\u975e\u540e\u6548\u6027\u8fd8\u662f\u5565\u5565\u5565\u6211\u4e5f\u5fd8\u4e86\uff0c\u603b\u4e4b\u611f\u89c9\u6bd4pushdown\u518d\u66f4\u65b0\u597d\u7528\u70b9\n\n- \u76f4\u63a5\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\u5e76**\u4e0d\u80fdAC**\uff0c\u9996\u5148\u9898\u5e72\u662flong long\u8303\u56f4\u7684\uff0c\u6211\u5c06\u5176\u6539\u6210\u4e86int\uff0c\u7136\u540e\u5c31\u662f\u53bb\u6389\u4e86\u4e00\u90e8\u5206\u5185\u5bb9\uff0c\u53ea\u7559\u4e0b\u7ebf\u6bb5\u6811\u677f\u5b50\n\n- \u4f60\u4eec\u8981\u662f\u4e0d\u4e60\u60efclass\u53ef\u4ee5\u6362\u6210struct\uff0c\u6548\u679c\u5dee\u4e0d\u591a\n\n- \u6211\u8bd5\u56fe\u6a21\u4eff\u8c37\u6b4c\u7f16\u7a0b\u89c4\u8303\u4e86\uff0c\u4f46\u662f\u53ef\u80fd\u8fd8\u662f\u4e0d\u591f\u5230\u4f4d\n\n- \u4f5c\u8005VCode\n\n```cpp\nconst int Len = 100000;\n\nclass Node {\n public:\n  Node(int, int);\n  void Build();\n  void Update(int, int, int);\n  int Query(int, int);\n private:\n  const int from;\n  const int to;\n  void PushDown();\n  int data;\n  int lazy;\n  int mid;//\u8fd9\u4e2amid\u533a\u57df\u5b8c\u5168\u53ef\u4ee5\u6ca1\u6709\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u8fd8\u662f\u52a0\u4e0a\u5b83\u6bd4\u8f83\u597d\n  Node *left;\n  Node *right;\n};\n\nint data[Len + 1];\n\nNode::Node(int from = 0, int to = 0) : left(NULL), right(NULL), lazy(0),\n                               from(from), to(to), data(0) {\n  this->mid = this->from + ((this->to - this->from) >> 1);//\u6309\u7167lrj\u7684\u5199\u6cd5\u5199\u7684\u6c42\u4e2d\u95f4\u503c\uff0c\u5b9e\u9645\u4e0a\u5de6\u95ed\u53f3\u5f00\u4e5f\u662f\u6309\u4ed6\u7684\u6765\u7684\n}\n\nvoid Node::Build() {//\u5efa\u6811\n  if(to - from == 1) {//\u5de6\u95ed\u53f3\u5f00\n    this->data = ::data[this->from];//\u4e24\u4e2a\u5192\u53f7\u662f\u4e3a\u4e86\u4e0ethis->data\u533a\u5206\uff0c\u6211\u76f8\u4fe1\u4f60\u4eec\u77e5\u9053\u6211\u5728\u8bf4\u4ec0\u4e48\n    return;\n  }\n  this->left = new Node(this->from, this->mid);\n  this->left->Build();//\u5efa\u5de6\u5b50\u6811\n  this->right = new Node(this->mid, this->to);\n  this->right->Build();//\u5efa\u53f3\u5b50\u6811\n  this->data = this->left->data + this->right->data;//\u6b64\u5904\u53ef\u66f4\u6539\uff0c\u4f7f\u4e4b\u6210\u4e3a\u5176\u4ed6\u7ebf\u6bb5\u6811\n  return;\n}\n\nvoid Node::PushDown() {//\u533a\u95f4\u4fee\u6539\u7684\u91cd\u70b9\uff0c\u7528\u4e8e\u8282\u7701\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\n  if(this->lazy) {\n    if(this->left != NULL) {\n      this->left->lazy += this->lazy;\n      this->left->data += this->lazy * (this->left->to - this->left->from);//\u6ce8\u610f\u8fd9\u91cc\u7684\u76f8\u51cf\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u5fd8\u4e58\u4e0a\u4e86\u7ed3\u679cdebug\u597d\u4e45\n    }\n    if(this->right != NULL) {\n      this->right->lazy += this->lazy;\n      this->right->data += this->lazy * (this->right->to - this->right->from);\n    }\n    this->lazy = 0;\n  }\n  return;\n}\n\nint Node::Query(int ask_from, int ask_to) {//\u67e5\u8be2\n  if(ask_from == this->from && ask_to == this->to) {//\u7b2c\u4e00\u4e2aif\u5224\u662f\u5426\u5168\u7b49\n    return this->data;\n  }\n  this->PushDown();//\u7b2c\u4e00\u4e2aif\u540epushdown\u4e00\u4e0b\n  if(ask_to <= this->mid) {//\u7b2c\u4e8c\u4e2aif\u5224\u662f\u5426\u5168\u5de6\uff0c\u6ce8\u610f\u5c0f\u4e8e\u7b49\u4e8e\n    return this->left->Query(ask_from, ask_to);\n  }\n  if(this->mid <= ask_from) {//\u7b2c\u4e09\u4e2aif\u5224\u662f\u5426\u5168\u53f3\uff0c\u6ce8\u610f\u5c0f\u4e8e\u7b49\u4e8e\n    return this->right->Query(ask_from, ask_to);\n  }\n  return this->left->Query(ask_from, this->mid) +\n         this->right->Query(this->mid, ask_to);//\u4e09\u4e2aif\u5931\u8d25\uff0c\u5219\u5de6\u53f3\u517c\u987e\n}\n\nvoid Node::Update(int ask_from, int ask_to, int value) {//\u533a\u95f4\u4fee\u6539\uff0c\u53ef\u4ee5\u590d\u5236\u533a\u95f4\u67e5\u8be2\u7136\u540e\u8fdb\u884c\u8c03\u6574\n  if(this->from == ask_from && this->to == ask_to) {//\u7b2c\u4e00\u4e2aif\u5224\u662f\u5426\u5168\u7b49\n    this->data += (ask_to - ask_from) * value;\n    this->lazy += value;\n    return;\n  }\n  this->data += (ask_to - ask_from) * value;//\u6ce8\u610f\u8fd9\u53e5\u8bdd\u5fc5\u987b\u52a0\n  if(ask_to <= this->mid) {//\u7b2c\u4e8c\u4e2aif\u5224\u662f\u5426\u5168\u5de6\n    this->left->Update(ask_from, ask_to, value);\n    return;\n  }\n  if(this->mid <= ask_from) {//\u7b2c\u4e09\u4e2aif\u5224\u662f\u5426\u5168\u53f3\n    this->right->Update(ask_from, ask_to, value);\n    return;\n  }\n  this->left->Update(ask_from, this->mid, value);//\u4e09\u4e2aif\u5931\u8d25\uff0c\u5219\u5de6\u53f3\u517c\u987e\n  this->right->Update(this->mid, ask_to, value);\n  return;\n}\n```",
        "postTime": 1509541462,
        "uid": 50165,
        "name": "VCode",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6ca1\u4eba\u653e\u9898\u89e3\u554a...\u6211\u505a\u7b2c\u4e00\u4e2a\n\n\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u6211\u4e5f\u662f\u521a\u63a5\u89e6\uff0c\u4e0d\u65b9\u4fbf\u63cf\u8ff0\uff0c\u6211\u80fd\u8bf4\u6e05\u695a\u7684\u5df2\u7ecf\u6ce8\u91ca\u4e86\uff0c~~\u771f\u662f\u4e2a\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784~~\n\n```cpp\n#include <iostream>\nusing namespace std;\n#define int long long\nstruct node\n{\n    int l,r,sum;\n}tree[300001];\nint a[100001],f[100001];\nint lazy[300001];//\u61d2\u64cd\u4f5c \nvoid buildTree(int x,int l,int r)\n{\n    tree[x].l=l;\n    tree[x].r=r;\n    if(l==r)\n    {\n        tree[x].sum=a[l];\n        return;\n    }\n    buildTree(x*2,l,(l+r)>>1);\n    buildTree(x*2+1,1+((l+r)>>1),r);\n    tree[x].sum=tree[x*2].sum+tree[x*2+1].sum;\n}\nvoid pushdown(int x)//\u628a\u7b2cx\u4e2a\u8282\u70b9\u7684\u61d2\u64cd\u4f5c\u91ca\u653e\uff0c\u5e76\u7ed9\u4ed6\u7684\u5b69\u5b50\u8bb0\u5f55\n{\n    int mid=(tree[x].l+tree[x].r)/2;\n    tree[x*2].sum+=(mid-tree[x].l+1)*lazy[x];\n    tree[x*2+1].sum+=(tree[x].r-mid)*lazy[x];\n    lazy[x*2]+=lazy[x];\n    lazy[x*2+1]+=lazy[x];\n    lazy[x]=0;\n}\nvoid update(int x,int l,int r,int k)//\u548cfor(int i=l;i<=r;i++)a[i]+=k;\u610f\u601d\u4e00\u6837\uff0c[x\u662f\u5f53\u524d\u641c\u5230\u7684\u7ebf\u6bb5\u6811\u8282\u70b9] \n{\n    if(tree[x].l>=l&&tree[x].r<=r)//\u5982\u679c\u662f\u5b8c\u5168\u6709\u5173\u533a\u95f4 \n    {\n        tree[x].sum+=(tree[x].r-tree[x].l+1)*k;\n        lazy[x]+=k;\n        return;\n    }\n    if(tree[x].l>r||tree[x].r<l)//\u5982\u679c\u662f\u5b8c\u5168\u65e0\u5173\u533a\u95f4\n        return;\n    int mid=(tree[x].r+tree[x].l)/2;\n    if(lazy[x])pushdown(x);\n    update(x*2,l,r,k);\n    update(x*2+1,l,r,k);\n    tree[x].sum=tree[x*2].sum+tree[x*2+1].sum;\n}\nint query(int x,int l,int r)//int ans=0;for(int i=l;i<=r;i++)ans+=a[i];return ans;[x\u662f\u5f53\u524d\u8282\u70b9\u7f16\u53f7]\n{\n    if(tree[x].l>=l&&tree[x].r<=r)//\u5982\u679c\u662f\u5b8c\u5168\u6709\u5173\u533a\u95f4 \n        return tree[x].sum;\n    if(tree[x].l>r||tree[x].r<l)//\u5982\u679c\u662f\u5b8c\u5168\u65e0\u5173\u533a\u95f4\n        return 0;\n    if(lazy[x])pushdown(x);\n    return query(x*2,l,r)+query(x*2+1,l,r);\n}\nsigned main()\n{\n    int n,m,t,x,y,z;\n    cin >> n >> m;\n    for(int i=1;i<=n;i++)\n        cin >> a[i];\n    buildTree(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        cin >> t >> x >> y;\n        if(t==1){cin >> z;update(1,x,y,z);}\n        else cout << query(1,x,y) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1474902415,
        "uid": 13091,
        "name": "ghj1222",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "# \u7ebf\u6bb5\u6811\n\u533a\u95f4\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u5728\u7ebf\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u4fe1\u606f\n\n\u652f\u6301\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u6c42\u548c\u7b49\u64cd\u4f5c\uff0c\u5355\u6b21\u64cd\u4f5c\u5927\u6982$O(depth)$\uff0c\u5373$O(log n)$ ~~\u53cd\u6b63\u662flog\u7ea7\u522b\u7684~~\n\n## \u7b80\u4ecb\n\u7ebf\u6bb5\u6811\u662f\u4e00\u8bfe\u4e8c\u53c9\u6811\uff0c\u5176\u6709\u4e00\u4e0b\u6027\u8d28\uff1a\n> \u6bcf\u4e2a\u8282\u70b9\uff08\u5305\u62ec\u53f6\u5b50\u8282\u70b9\uff09\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4$[n,m]$ \n\n> \u82e5\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u4e3a$[n,m]$,\u5176\u5de6\u5b69\u5b50\u5bf9\u5e94\u533a\u95f4\u4e3a$[n, \\frac{n+m}{2}]$,\u53f3\u5b69\u5b50\u4e3a$[\\frac{n+m}{2}+1,m]$\n\n> \u6839\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u4e3a$[1,n]$\n\n> \u6811\u9ad8\u4e3a$\\ulcorner{log n} \\urcorner$\uff0c\u5176\u4e2d$n$\u4e3a\u5143\u7d20\u4e2a\u6570\n\n~~\uff08\u4ee5\u4e0a\u6027\u8d28\u8bf7\u81ea\u8bc1\uff09~~\n\n> $\\color{red}\\text{\u7ebf\u6bb5\u6811\u4e0d\u662f\u52a8\u6001\u5f00\u70b9\u5c31\u9700\u89814\u500d\u5927\u5c0f\uff01\uff01\uff01}$\n\n# \u7ed3\u6784\u4f53\u7ebf\u6bb5\u6811\n\u7ed3\u6784\u4f53\u5b9a\u4e49\uff0c\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u4fe1\u606f\n```cpp\nconst int MAXN = 1e7 + 5;\n\nstruct SegmentTreeNode {\n  int left;\n  int right;\n  int sum; //\u533a\u95f4\u548c\n  int add; //lazy-tag\uff0c\u4e00\u4f1a\u518d\u8bf4\n};\n\nint n, num[MAXN];\nSegmentTreeNode tree[MAXN << 2];\n```\n## \u5efa\u6811\n\n\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4\n> 1. \u5224\u65ad\u533a\u95f4\u957f\u5ea6\u662f\u5426\u4e3a\n1\uff0c\u662f\u5219\u5c06$sum$\u8bbe\u6210$num_{i}$\uff0c\u9000\u51fa\n\n> 2. \u786e\u5b9a\u533a\u95f4\u4e2d\u503c\n\n> 3. \u786e\u5b9a\u5de6\u53f3\u5b69\u5b50\u533a\u95f4\n\n> 4. \u5de6\u53f3\u9012\u5f52\u5efa\u6811\n\n> 5. \u5c06\u5f53\u524d\u8282\u70b9\u7684$sum$\u8bbe\u6210$sum_{left}+sum_{right}$\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid BuildTree(int curParent) {\n  if(tree[curParent].left == tree[curParent].right) {\n    tree[curParent].sum = num[tree[curParent].left];\n    return;\n  }\n\n  int mid = (tree[curParent].left + tree[curParent].right) >> 1;\n\n  tree[curParent << 1].left = tree[curParent].left;\n  tree[curParent << 1].right = mid;\n\n  tree[curParent << 1 | 1].left = mid + 1;\n  tree[curParent << 1 | 1].right = tree[curParent].right;\n\n  BuildTree(curParent << 1);\n  BuildTree(curParent << 1 | 1);\n\n  tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n}\n```\n\n## \u67e5\u8be2\u533a\u95f4\u548c\n\u601d\u8def\uff1a\n>\u5982\u679c\u5f53\u524d\u533a\u95f4\u521a\u597d\u662f\u6240\u6c42\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u548c\n\n>\u5426\u5219\u8fd4\u56de\u5de6\u53f3\u9012\u5f52\u8c03\u7528\u5f97\u5230\u7684sum\u548c\n\n### \u65f6\u95f4\u590d\u6742\u5ea6:$O(logn)$\n\u8bc1\u660e\uff1a\n\n\u9012\u5f52\u5f97\u5230\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4\u53ea\u80fd\u662f\u533a\u95f4\u6700\u524d\u548c\u6700\u540e\uff0c\u5426\u5219\u4e00\u5b9a\u53ef\u4ee5\u8ddf\u5de6/\u53f3\u8282\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\u66f4\u957f\u7684\u533a\u95f4\n\n\u540c\u7406\uff0c\u6700\u591a\u67092\u4e2a\u957f\u5ea6\u4e3a2\u7684\u533a\u95f4\uff0c\u6700\u591a\u67092\u4e2a\u957f\u5ea6\u4e3a4\u7684\u533a\u95f4...\u6700\u591a\u67092\u4e2a\u957f\u5ea6\u4e3a$\\frac{n}{4}$\u7684\u533a\u95f4\uff0c\u6700\u591a\u67091\u4e2a$\\frac{n}{2}$\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f$O(logn)$\n\n\u4ee3\u7801\uff1a\n```cpp\nint QuerySum(int l, int r, int curParent) { //\u5728curParent\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u67e5\u8be2[l,r]\n  PushDown(curParent); //\u4e0b\u4f20lazy-tag\u6807\u8bb0\n\n  if(tree[curParent].left == l && tree[curParent].right == r) {\n    return tree[curParent].sum;\n  }\n\n  int mid = (tree[curParent].left + tree[curParent].right) >> 1;\n\n  if(l > mid) {\n    return QuerySum(l, r, curParent << 1 | 1);\n  }\n  if(r <= mid) {\n    return QuerySum(l, r, curParent << 1);\n  }\n  return QuerySum(l, mid, curParent << 1) + QuerySum(mid + 1, r, curParent << 1 | 1);\n}\n```\n\n## \u533a\u95f4\u64cd\u4f5c\u7684\u4f18\u5316\n\n### $\\text{lazy-tag}$ \u5ef6\u8fdf\u7b26\u53f7\n\n\u5ef6\u8fdf\u7b26\u53f7\u662f\u6253\u5728\u4e00\u6bb5\u533a\u95f4\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\uff09\u4e0a\u7684\u6807\u8bb0\uff0c\u53ea\u8981\u8fd9\u6bb5\u533a\u95f4\u6ca1\u88ab\u4f7f\u7528\uff0c\u6253\u4e0a$lazy-tag$\u540e\u5c31\u4e0d\u9700\u8981\u7ef4\u62a4\u5176$lazy-tag$\uff0c\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5982\u679c\u5bf9\u8fd9\u70b9\u533a\u95f4\u7684\u5b50\u533a\u95f4\u8fdb\u884c\u4e86\u64cd\u4f5c\uff0c\u5219\u9700\u8981**\u4e0b\u4f20\u6807\u8bb0```PushDown()```**\uff0c\u4fdd\u8bc1\u4e0b\u8fb9\u7684\u5b50\u533a\u95f4\u4e5f\u6709$lazy-tag$\u53ef\u4ee5\u4e0b\u4f20\u3001\u7ef4\u62a4\u5b50\u8282\u70b9\u7684\u4fe1\u606f\n\n\u6ce8\u610f\uff1a\u5728\u7ed9\u533a\u95f4\u6253\u4e0a\u6807\u8bb0\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u66f4\u65b0\u5176\u533a\u95f4\u548c\uff0c\u5373$sum+=lazy\\cdot(right-left+1)$\n\n### ```PushDown()```\u64cd\u4f5c\n```PushDown(int node)```\u8868\u793a\u4e0b\u4f20```node```\u7684$lazy$\u6807\u8bb0\uff08\u53ea\u8981```node```\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff09\uff0c\u6e05\u7a7a\u5f53\u524d\u6807\u8bb0\uff0c\u987a\u4fbf\u7ef4\u62a4\u5de6\u53f3\u5b69\u5b50\u7684\u533a\u95f4\u548c\n\n```cpp\nvoid PushDown(int node) {\n  if(tree[node].left == tree[node].right) { //\u662f\u53f6\u5b50\u8282\u70b9\n    tree[node].add = 0;\n    return;\n  }\n\n  tree[node << 1].add += tree[node].add;\n  tree[node << 1 | 1].add += tree[node].add;\n\n  tree[node << 1].sum += (tree[node << 1].right - tree[node << 1].left + 1) * tree[node].add;\n  tree[node << 1 | 1].sum += (tree[node << 1| 1].right - tree[node << 1 | 1].left + 1) * tree[node].add;\n  \n  tree[node].add = 0;\n}\n```\n\n## \u533a\u95f4\u52a0\n\u4e3b\u8981\u601d\u8def\u8ddf\u6c42\u548c\u4e00\u6837\uff0c\u627e\u5230\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u91cc\u7684\u5b50\u533a\u95f4\uff0c\u5728\u8be5\u8282\u70b9\u6253\u4e0a$lazy-tag$\u6807\u7b7e\uff0c\u66f4\u65b0\u8be5\u8282\u70b9sum\uff0c\u4ee5\u540e\u8bbf\u95ee\u8be5\u533a\u95f4\u65f6\u518d\u4e0b\u4f20\n\n\u6ce8\u610f\uff1a\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u9700\u8981\u6267\u884c```PushDown()```\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e0a\u8fb9\u539f\u6765\u7684\u6807\u8bb0\u80fd\u591f\u6b63\u5e38\u5728\u5b50\u533a\u95f4\u5185\u751f\u6548\n\n\u4e0e\u533a\u95f4\u548c\u540c\u7406\uff0c\u590d\u6742\u5ea6$O(logn)$\n\n\u4ee3\u7801\uff1a\n```cpp\nvoid Add(int l, int r, int add, int curParent) {\n  if(tree[curParent].left == l && tree[curParent].right == r) {\n    tree[curParent].add += add;\n    tree[curParent].sum += (r - l + 1) * add;\n    return;\n  }\n\n  PushDown(curParent);\n\n  int mid = (tree[curParent].left + tree[curParent].right) >> 1;\n\n  if(l > mid) {\n    Add(l, r, add, curParent << 1 | 1);\n    tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n    return;\n  }\n  if(r < mid + 1) {\n    Add(l, r, add, curParent << 1);\n    tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n    return;\n  }\n  Add(l, mid, add, curParent << 1);\n  Add(mid + 1, r, add, curParent << 1 | 1);\n  tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n}\n```\n\n## $\\text{AC Code}$\n```cpp\n#include <iostream>\n#include <fstream>\n\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 1e7 + 5;\n\nstruct TreeNode {\n  int left;\n  int right;\n  int sum;\n  int add;\n};\n\nstruct Quest {\n  int opt;\n  int left;\n  int right;\n  int data;\n};\n\nTreeNode tree[MAXN << 2];\nQuest quest[10005];\nint num[MAXN], n, m;\n\nvoid BuildTree(int curParent) {\n  if(tree[curParent].left == tree[curParent].right) {\n    tree[curParent].sum = num[tree[curParent].left];\n    return;\n  }\n\n  int mid = (tree[curParent].left + tree[curParent].right) >> 1;\n\n  tree[curParent << 1].left = tree[curParent].left;\n  tree[curParent << 1].right = mid;\n\n  tree[curParent << 1 | 1].left = mid + 1;\n  tree[curParent << 1 | 1].right = tree[curParent].right;\n\n  BuildTree(curParent << 1);\n  BuildTree(curParent << 1 | 1);\n\n  tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n}\n\nvoid PushDown(int node) {\n  if(!tree[node].left) {\n    return;\n  }\n\n  tree[node << 1].add += tree[node].add;\n  tree[node << 1 | 1].add += tree[node].add;\n\n  tree[node << 1].sum += (tree[node << 1].right - tree[node << 1].left + 1) * tree[node].add;\n  tree[node << 1 | 1].sum += (tree[node << 1| 1].right - tree[node << 1 | 1].left + 1) * tree[node].add;\n\n  //tree[node].sum = tree[node << 1].sum + tree[node << 1 | 1].sum;\n\n  tree[node].add = 0;\n}\n\n\nint QuerySum(int l, int r, int curParent) {\n  PushDown(curParent);\n\n  if(tree[curParent].left == l && tree[curParent].right == r) {\n    return tree[curParent].sum;\n  }\n\n  int mid = (tree[curParent].left + tree[curParent].right) >> 1;\n\n  if(l > mid) {\n    return QuerySum(l, r, curParent << 1 | 1);\n  }\n  if(r < mid + 1) {\n    return QuerySum(l, r, curParent << 1);\n  }\n  return QuerySum(l, mid, curParent << 1) + QuerySum(mid + 1, r, curParent << 1 | 1);\n}\n\nvoid Add(int l, int r, int add, int curParent) {\n  if(tree[curParent].left == l && tree[curParent].right == r) {\n    tree[curParent].add += add;\n    tree[curParent].sum += (r - l + 1) * add;\n    return;\n  }\n\n  PushDown(curParent);\n\n  int mid = (tree[curParent].left + tree[curParent].right) / 2;\n\n  if(l > mid) {\n    Add(l, r, add, curParent << 1 | 1);\n    tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n    return;\n  }\n  if(r < mid + 1) {\n    Add(l, r, add, curParent << 1);\n    tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n    return;\n  }\n  Add(l, mid, add, curParent << 1);\n  Add(mid + 1, r, add, curParent << 1 | 1);\n  tree[curParent].sum = tree[curParent << 1].sum + tree[curParent << 1 | 1].sum;\n}\n\nsigned main() {\n  cin >> n >> m;\n  for(int i = 1; i < n + 1; i++) {\n    cin >> num[i];\n  }\n  for(int i = 0; i < m; i++) {\n    cin >> quest[i].opt;\n    switch(quest[i].opt) {\n    case 1:\n      cin >> quest[i].left >> quest[i].right >> quest[i].data;\n      break;\n    case 2:\n      cin >> quest[i].left >> quest[i].right;\n      break;\n    }\n  }\n\n  tree[1].left = 1;\n  tree[1].right = n;\n  BuildTree(1);\n\n  for(int i = 0; i < m; i++) {\n    switch(quest[i].opt) {\n    case 1: \n      Add(quest[i].left, quest[i].right, quest[i].data, 1);\n      break;\n    case 2:\n      cout << QuerySum(quest[i].left, quest[i].right, 1) << endl;\n      break;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1573378346,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "\u7ebf\u6bb5\u6811\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "## \u7ebf\u6bb5\u6811\u6a21\u677f\n\u4e4b\u524d\u6211\u4eec\u7684\u67d0\u4f4d\u5927\u4f6c\uff0c\u5229\u7528\u4ed6\u65e0\u4e0e\u4f26\u6bd4\u7684\u624b\u901f\uff0c10\u5206\u949f\u5c31\u6572\u5b8c\u4e86\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u53ea\u80fd\u7528\u6211\u8fd9\u9f9f\u901f\u7684\u624b\u901f\u5199\u5b8c\u8fd9\u9898\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\u5e0c\u671b\u5927\u4f6c\u80fd\u559c\u6b22\u3002\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#define int long long\nusing namespace std;\ninline int gi(){int x;scanf(\"%lld\",&x);return x;}\nconst int N=100010;//\u5b9a\u4e49N\u4e3a\u7ebf\u6bb5\u6700\u5927\u957f\u5ea6\n 2 \nstruct node{\n\tint l,r,sum,tag;\t\n}t[N<<2];\u3000// t \u6570\u7ec4\u4e3a main \u51fd\u6570\u4e2d\u8bfb\u5165\u7684\u5185\u5bb9\nvoid pushup(int o){t[o].sum=(t[o<<1].sum+t[o<<1|1].sum);}\nvoid pushdown(int o){\n\tif(t[o].tag){\n\t\tt[o<<1].tag+=t[o].tag;\n\t\tt[o<<1|1].tag+=t[o].tag;\n\t\tt[o<<1].sum+=t[o].tag*(t[o<<1].r-t[o<<1].l+1);\n\t\tt[o<<1|1].sum+=t[o].tag*(t[o<<1|1].r-t[o<<1|1].l+1);\n\t\tt[o].tag=0;\n\t}\n}\nvoid build(int o,int l,int r)//\u7ebf\u6bb5\u6811\u4e3b\u8981\u7528\u4e8e\u533a\u95f4\u8bb0\u5f55\u4fe1\u606f\uff08\u5982\u533a\u95f4\u548c\u3001\u6700\u5927\u6700\u5c0f\u503c\u7b49\uff09\uff0c\u9996\u5148\u662f\u5efa\u6811\n{\n\tt[o].l=l;t[o].r=r;t[o].tag=0;\n\tif(l==r){t[o].sum=gi();return;}//\u5f53\u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9\u5373\u5efa\u7acb\u53f6\u5b50\u7ed3\u70b9\u65f6\uff0c\u76f4\u63a5\u7ed9\u6570\u7ec4\u4fe1\u606f\u8d4b\u503c\n\tint mid=(l+r)>>1;// mid \u4e3a\u4e2d\u95f4\u70b9\uff0c\u5de6\u513f\u5b50\u7ed3\u70b9\u4e3a [l,m] \uff0c\u53f3\u513f\u5b50\u7ed3\u70b9\u4e3a [m+1,r]\uff1b\n\tbuild(o<<1,l,mid);//\u6784\u5efa\u5de6\u513f\u5b50\u7ed3\u70b9\n    build(o<<1|1,mid+1,r);//\u6784\u5efa\u53f3\u513f\u5b50\u7ed3\u70b9\n\tpushup(o);\t\n}//\u4f20\u5165\u7684\u53c2\u6570\u4e3a o:\u5f53\u524d\u9700\u8981\u5efa\u7acb\u7684\u7ed3\u70b9\uff1bl\uff1a\u5f53\u524d\u9700\u8981\u5efa\u7acb\u7684\u5de6\u7aef\u70b9\uff1br\uff1a\u5f53\u524d\u9700\u8981\u5efa\u7acb\u7684\u53f3\u7aef\u70b9\nvoid modify(int o,int l,int r,int posl,int posr,int k)\n{\n\tif(posl<=l && r<=posr){t[o].tag+=k;t[o].sum+=k*(r-l+1);return;}\n\tint mid=(l+r)>>1;pushdown(o);\n\tif(posl<=mid)modify(o<<1,l,mid,posl,posr,k);\n\tif(mid<posr)modify(o<<1|1,mid+1,r,posl,posr,k);\n\tpushup(o);\n}\nint query(int o,int l,int r,int posl,int posr)//posl\u3001posr\u4e3a\u9700\u8981\u67e5\u8be2\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\n{\n\tif(posl<=l && r<=posr)return t[o].sum;\u3000//\u82e5\u5f53\u524d\u7ed3\u70b9\u548c\u9700\u8981\u67e5\u627e\u7684\u533a\u95f4\u4e0d\u76f8\u4ea4\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5bf9\u4e8e\u533a\u95f4\u67e5\u8be2\u65e0\u5173\u7684\u503c\uff08\u5982\u6c42\u548c\u65f6\u8fd4\u56de0\uff0c\u6c42\u6700\u5927\u503c\u65f6\u8fd4\u56de-1\u7b49\uff09\n\tint mid=(l+r)>>1,ret=0;pushdown(o);\n\tif(posl<=mid)ret+=query(o<<1,l,mid,posl,posr);\n\tif(mid<posr)ret+=query(o<<1|1,mid+1,r,posl,posr);\u3000//posl\u4e3a\u67e5\u8be2\u5de6\u513f\u5b50\u7ed3\u70b9\u5f97\u5230\u7684\u4fe1\u606f\uff0cposr\u4e3a\u67e5\u8be2\u53f3\u513f\u5b50\u7ed3\u70b9\u5f97\u5230\u7684\u4fe1\u606f\n\treturn ret;//\u7efc\u5408\u4e24\u4e2a\u513f\u5b50\u7ed3\u70b9\u7684\u4fe1\u606f\u5e76\u8fd4\u56de\n}\nsigned main()\n{\n\tint n=gi(),m=gi();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint opt=gi(),l=gi(),r=gi();\n\t\tif(opt==1)modify(1,1,n,l,r,gi());\n\t\telse printf(\"%lld\\n\",query(1,1,n,l,r));\n\t}\n}\n```\n\u5982\u679c\u5927\u4f6c\u6709\u66f4\u597d\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u6559\u6559\u849f\u84bb\u3002Thanks\u266a(\uff65\u03c9\uff65)\uff89",
        "postTime": 1571318380,
        "uid": 230323,
        "name": "\u10e6\ufe4f\ufeec\u5317\u2766\u6800",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u4e00\u7bc7\u4e0d\u7528PushDown\u7684\u9898\u89e3\n\n#### ~~\u4f46\u662f\u597d\u50cf\u53ea\u9002\u7528\u4e8e\u533a\u95f4\u548c~~\n\n\u6838\u5fc3\u601d\u60f3\uff1a\u5728\u6253\u4e0alazyTag\u4ee5\u540e\u53d1\u73b0\u53ef\u4ee5\u4e0d\u7528pushdown\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u6807\u8bb0\u5bf9\u5e94\u5f53\u524d\u7684\u533a\u95f4\u88ab\u52a0\u8fc7\u51e0\u6b21\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u9012\u5f52\u5411\u4e0b\u65f6\u5c06\u6bcf\u4e2a\u7ecf\u8fc7\u533a\u95f4\u7684Tag\u90fd\u52a0\u4e0a\uff0c\u5230\u4e00\u4e2a\u7ec8\u6b62\u8282\u70b9\uff08\u5c31\u662f\u4e00\u4e2a\u5728\u67e5\u8be2\u533a\u95f4\u5185\u7684\u6700\u5927\u533a\u95f4\uff09\u65f6\u7528\u9012\u5f52\u7684Tag\u4e58\u4ee5\u5f53\u524d\u533a\u95f4\u957f\u5ea6\u52a0\u4e0a\u533a\u95f4sum\u5c31\u597d\u4e86\u3002\n\n\u5728\u6b64\u5c06\u7ebf\u6bb5\u6811\u5c01\u88c5\u6210\u4e86\u7c7b\uff0c\u5c06\u9012\u5f52\u65f6\u7684\u8282\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5e76\u5728\u51fd\u6570\u4e2d\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528\u65f6\u8bf7\u5f00\u4e3a\u5168\u5c40\u53d8\u91cf\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace SegmentTree{\n\ttemplate <typename T>\n\tclass SegmentTree2{\n\t\t\tint _hot,size;\n\t\t\tT _tag;\n\t\t\tstruct Node{\n\t\t\t\tT key,lazyTag;\n\t\t\t}Tree[100005<<2];\n\t\t\tvoid update(int,int,int,int,T);\n\t\t\tT query(int,int,int,int);\n\t\tpublic:\n\t\t\tSegmentTree2(int);\n\t\t\tvoid update(int,T);\n\t\t\tvoid update(int,int,T);\n\t\t\tT query(int,int);\n\t};\n\ttemplate <typename T>\n\tvoid SegmentTree2<T>::update(int l,int r,int L,int R,T x){\n\t\tint tl,tr;\n\t\ttl=max(l,L);\n\t\ttr=min(r,R);\n\t\tTree[_hot].key+=(tr-tl+1)*x;\n\t\tif((L<=l)&&(r<=R)){\n\t\t\tTree[_hot].lazyTag+=x;\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+(r-l)/2;\n\t\tint _tmp=_hot;\n\t\tif(L<=mid){\n\t\t\t_hot=_tmp<<1;\n\t\t\tupdate(l,mid,L,R,x);\n\t\t}\n\t\tif(R>mid){\n\t\t\t_hot=_tmp<<1|1;\n\t\t\tupdate(mid+1,r,L,R,x);\n\t\t}\n\t}\n\ttemplate <typename T>\n\tT SegmentTree2<T>::query(int l,int r,int L,int R){\n\t\tif(L<=l&&r<=R){\n\t\t\treturn Tree[_hot].key+(r-l+1)*_tag;\n\t\t}\n\t\tT ans=0;\n\t\tint mid=l+(r-l)/2;\n\t\tint _tmp=_hot;\n\t\t_tag+=Tree[_hot].lazyTag;\n\t\tif(L<=mid){\n\t\t\t_hot=_tmp<<1;\n\t\t\tans+=query(l,mid,L,R);\n\t\t}\n\t\tif(R>mid){\n\t\t\t_hot=_tmp<<1|1;\n\t\t\tans+=query(mid+1,r,L,R);\n\t\t}\n\t\t_tag-=Tree[_tmp].lazyTag;\n\t\treturn ans;\n\t}\n\ttemplate <typename T>\n\tvoid SegmentTree2<T>::update(int l,int r,T x){\n\t\t_hot=1;\n\t\tupdate(1,size,l,r,x);\n\t}\n\ttemplate <typename T>\n\tvoid SegmentTree2<T>::update(int p,T x){\n\t\t_hot=1;\n\t\tupdate(1,size,p,p,x);\n\t}\n\ttemplate <typename T>\n\tT SegmentTree2<T>::query(int l,int r){\n\t\t_tag=0;\n\t\t_hot=1;\n\t\treturn query(1,size,l,r);\n\t}\n\ttemplate <typename T>\n\tSegmentTree2<T>::SegmentTree2(int s){\n\t\tsize=s;\n\t\tmemset(Tree,0,sizeof(Tree));\n\t}\n\n}\nusing namespace SegmentTree;\nSegmentTree1<long long> T(100005);\nint main(){\n\tint N,M;\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=1;i<=N;i++){\n\t\tlong long x;\n\t\tscanf(\"%lld\",&x);\n\t\tT.insert(i,x);\n\t}\n\twhile(M--){\n\t\tlong long op,l,r,x;\n\t\tscanf(\"%lld%lld%lld\",&op,&l,&r);\n\t\tif(op==1){\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tT.update(l,r,x);\n\t\t}else printf(\"%lld\\n\",T.querySum(l,r));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568288065,
        "uid": 62600,
        "name": "\u9f99\u5578\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u504f\u4e0d\u7528\u7ebf\u6bb5\u6811\u7cfb\u5217\uff08~~\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u849f\u84bb~~\uff09\n~~\u4e0d\u77e5\u9053\u4e3a\u5565\u7ebf\u6bb5\u6811\u7684\u9898\u76ee\u8fd8\u80fd\u7528\u6811\u72b6\u6570\u7ec4**\u6c34**\u8fc7\u53bb~~\n\n\u51e0\u5929\u524d\u6559\u7ec3\u8bb2\u4e86**\u6811\u72b6\u6570\u7ec4+\u5dee\u5206\u6570\u7ec4\u7684\u4f18\u5316**\uff0c\u53ef\u4ee5\u5904\u7406**\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2**\u548c**\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\u64cd\u4f5c\uff0c\u770b\u5230\u667a\u9893\u91cc\u6709\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u4e00\u770b\uff0c**\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\u4e8e\u662f\u611a\u8822\u7684\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff0c\u4f46\u770b\u5230**\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2**\uff0c\u5c31\u975e\u5e38~~\u667a\u969c~~\u7684\u628a\u4e24\u4efd\u4ee3\u7801\u4f55\u4e3a\u4e00\u4f53\uff01\uff01\uff01\n\n\u8fd9\u662f\u539f\u5148\u7684**\u667a\u969c**~~\u777f\u667a~~\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll n,m;\nll a[500005],C[500005];\nll lowbit(ll x){return (x&-x);};\nvoid modify(ll x,ll d){\n\tfor(ll i=x;i<=n;i+=lowbit(i))\n\t\tC[i]+=d;\n}\nll getSum(ll x){\n\tll Sum=0;\n\tfor(ll i=x;i;i-=lowbit(i))\n\t\tSum+=C[i];\n\treturn Sum2;\n}\nint main(){\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(ll i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t\tmodify(i,a[i]-a[i-1]);\n\t}\n\tfor(ll i=1;i<=m;i++){\n\t\tll type,l,r;\n\t\tll k;\n\t\tscanf(\"%lld\",&type);\n\t\tif(type==1){\n\t\t\tscanf(\"%lld %lld %lld\",&l,&r,&k);\n\t\t\tmodify(l,k);\n\t\t\tmodify(r+1,-k);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%lld %lld\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",getSum(r)-getSum(l-1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u7136\u540e\u5c31\u8dd1\u4e86\u904d\u6837\u4f8b\uff0c~~\u53d1\u73b0\u8f93\u51fa\u7684\u662f\u5565\u73a9\u610f~~\u3002\n**\u540e\u6765\u5206\u6790\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8fd9\u4e2agetSum\u662f\u6c42\u7684\u7b2ci\u4e2a\u6570\u7684\u503c\uff01\uff01\uff01**\n\n### \u65e2\u7136\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u4e0d\u884c\uff0c\u90a3\u5c31\u4e24\u4e2a\uff01\uff01\n\n\u8bbe\u6570\u7ec4$D[]$\uff0c$D[i]$ = $A[i] - A[i-1]$\uff0c\u90a3\u4e48$A[i] = D[1] + D[2] + .... + D[i]$\n**\u5219D\u4e3aA\u7684\u5dee\u5206\u6570\u7ec4\u3002**\n$A[1] + A[2] + A[3] + ... + A[k] = D[1] + D[1] + D[2] + D[1] + D[2] + D[3] + ... + D[1] + D[2] + D[3] + ... + D[k]$\n$= \u03a3{(k - i + 1)*D[i]}$ $(1<=i<=k)$ $=$ $(k+1)*\u03a3${$D[i]$} \u2013 $\u03a3${$i*D[i]$}\n\n**\u56e0\u4e3a$k+1$\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4$D[i]$\u7684\u524d\u7f00\u548c\u3002\u4e5f\u8981\u7ef4\u62a4$i*D[i]$\u7684\u524d\u7f00\u548c\u3002**\n## \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4$D[i]$\u7684\u524d\u7f00\u548c,\u4e00\u4e2a\u7ef4\u62a4$i*D[i]$\u7684\u524d\u7f00\u548c\n\n\u7136\u540e\u8fd9\u4e2a\u4ee3\u7801\u5c31\u5f88\u597d\u5199\u4e86\uff1a\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll n,m;\nll a[500005],C[500005],C2[500005];//C,C2\u4e24\u4e2a\u6570\u7ec4\u6570\u7ec4\nll lowbit(ll x){return (x&-x);};\nvoid modify(ll x,ll d){//\u4fee\u6539\u64cd\u4f5c\uff0c\u7ef4\u62a4D[i]\u548cx*D[i]\u7684\u524d\u7f00\u548c\n\tfor(ll i=x;i<=n;i+=lowbit(i))\n\t\tC[i]+=d,C2[i]+=x*d;\n}\nll getSum(ll x){//\u67e5\u8be2\u64cd\u4f5c\n//\u8ba1\u7b97A[1]+...+A[x]\n// (x+1)*\u03a3{D[i]}-\u03a3{i*D[i]}\n\tll Sum1=0;\n\tll Sum2=0;\n\tfor(ll i=x;i;i-=lowbit(i))\n\t\tSum1+=(x+1)*C[i],Sum2+=C2[i];\n\treturn Sum1-Sum2;\n}\nint main(){\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(ll i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t\tmodify(i,a[i]-a[i-1]);//\u5efa\u6811\n\t}\n\tfor(ll i=1;i<=m;i++){\n\t\tll type,l,r;\n\t\tll k;\n\t\tscanf(\"%lld\",&type);\n\t\tif(type==1){\n\t\t\tscanf(\"%lld %lld %lld\",&l,&r,&k);\n\t\t\tmodify(l,k);//\u4fee\u6539\n\t\t\tmodify(r+1,-k);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%lld %lld\",&l,&r);//\u67e5\u8be2\n\t\t\tprintf(\"%lld\\n\",getSum(r)-getSum(l-1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566356566,
        "uid": 156001,
        "name": "TheAutumnGlory",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "~~\u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u6587\u7ae0\u8d44\u74f7\u4e00\u4e0b\u4e0b\u5566~~~~~\n\n\u7ebf\u6bb5\u6811\u662f\u4eceOI\u840c\u65b0\u8f6c\u5411OI~~\u5927\u4f6c~~\u7684\u91cd\u8981\u7b97\u6cd5\n\n\u5728\u5b9e\u9645\u5e94\u7528\u4e5f\u662f\u53ef\u4ee5\u5c06O(N\uff09\u7684\u590d\u6742\u5ea6\u4f18\u5316\u5230O\uff08log N\uff09\u7684\u795e\u5947\u4e1c\u897f\n\n**\u8fdb\u5165\u6b63\u9898**\n\n**\u7b2c\u4e00\u90e8\u5206---\u7ebf\u6bb5\u6811\u6982\u5ff5\uff08\u5305\u62ec\u524d\u7f6e\u77e5\u8bc6\uff09**\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811,\u4e3e\u4e2a\u5c0f\u5c0fde\u6817\u5b50\n\n![](https://cdn.luogu.com.cn/upload/pic/71366.png)\n\n~~\u5176\u5b9e\u4ed6\u5c31\u662f\u4e2a\u4e8c\u5206\u7684\u8fc7\u7a0b~~\n\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u5982\u679c\u4f60\u8981\u8868\u793a\u7ebf\u6bb5\u7684\u548c\uff0c\u90a3\u4e48\u6700\u4e0a\u9762\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u7ebf\u6bb51~8\u7684\u548c\u3002\u6839\u7684\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u7ebf\u6bb5\u4e2d1~4\u7684\u548c\uff0c\u4e0e5~8\u7684\u548c\u3002\n\n~~\u5f53\u7136\u540e\u9762\u7684\u4e5f\u662f\u4e00\u6837~~\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9000\u51fa\u4e00\u4e2a\u6027\u8d28\n\n#### \u8282\u70b9i\u7684\u6743\u503c=\u5979\u7684\u5de6\u513f\u5b50\u6743\u503c+\u5979\u7684\u53f3\u513f\u5b50\u6743\u503c\n\n\u6211\u4eec\u518d\u6765\u4e00\u4e2a\u524d\u7f6e\u6027\u77e5\u8bc6\n\n\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\u4e3an\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7\u4e3an<<1 (2*n).\n\n\u81ea\u7136\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u4e3a(n<<1)|1(2*n+1)\n\n\u5343\u4e07\u8bb0\u4f4f\uff08\uff08n<<1\uff09|1\u8981\u52a0\u62ec\u53f7\uff0c\u4e0d\u7136\u4f1a\u5148\u7b971|1\uff0c\u518d\u7b97\u5de6\u79fb\uff01\uff01\uff01\uff09\n\nso\uff0c\u6211\u4eec\u53ef\u4ee5struct\u4e00\u4e2a\u7ed3\u6784\u4f53node.l\u8868\u793a\u5b83\u7684\u5de6\u513f\u5b50\uff0cnode.r\u8868\u793a\u5b83\u7684\u53f3\u513f\u5b50\uff0cnode.sum\u8868\u793a\u533a\u95f4\u548c\n\n\u7ed3\u5408\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;\n\n\u5c31\u6709\u4e86\u63a5\u4e0b\u6765\u7684\u4ee3\u7801:\n\n```cpp\ninline void build(int i,int l,int r)\n\t{//inline\u52a0\u901f\u7684\uff0c\u53ef\u4ee5\u4e0d\u52a0\n    node[i].l=l;node[i].r=r;\n    if(l==r)\n\t{//\u5de6\u53f3\u6307\u5411\u4e00\u4e2a\uff0c\u8bf4\u660e\u6b64\u65f6\u662f\u53f6\u5b50\u8282\u70b9\n        node[i].sum=input[l];\n        return ;\n    }\n    int mid=(l+r)>>1;//((l+r)/2)\n    build(i*2,l,mid);//\u5efa\u9020\u5de6\u5b50\u6811and\u53f3\u5b50\u6811\n    build(i*2+1,mid+1,r);\n    node[i].sum=node[i*2].sum+node[i*2+1].sum;\n\t//\u4e0a\u8ff0\u6027\u8d28\n\treturn ;\n}\n```\n**\u7b2c\u4e8c\u90e8\u5206---\u7ebf\u6bb5\u6811\u5165\u95e8**\n\n\u7ebf\u6bb5\u6811\u4e2d\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u822c\u6709:\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2.\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2.\u4ee5\u53ca\u5176\u884d\u751f\u51fa\u6765\u7684\u8bb8\u591a\u64cd\u4f5c\uff0c\u6211\u5728\u6b64\u53ea\u8bb2\u8fd9\u4e24\u4e2a\n\n**2.1** \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\n\n\u533a\u95f4\u4fee\u6539:\n\n\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5728l\u5230r\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u6570\u90fd\u52a0\u4e0ax\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u95f4\u7f6e\u4e0a\u6807\u8bb0\uff0c\u5728\u5355\u70b9\u67e5\u8be2\u662f\u5728\u5728\u8fd9\u6570\u7ec4\u4e0a\u9762\u628a\u6807\u8bb0\u52a0\u8d77\u6765\u5c31\u597d\n\n\u5177\u4f53\u505a\u6cd5\u5982\u601d\u8def\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801~~~\n\n```cpp\nvoid node_add(int i,int l,int r,int k)\n{\n\tif(node[i].l>=l && node[i].r<=r)\n\t{//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0k\n\t\tnode[i].sum+=k;\n\t\treturn ;\n\t}\n\tif(node[i*2].r>=l)\n\tnode_add(i*2,l,r,k);\n\tif(node[i*2+1].l<=r)\n\tnode_add(i*2+1,l,r,k);\n}\n```\n\u90a3\u4e48\u5355\u70b9\u67e5\u8be2\u4e48emm...\u90a3\u5c31\u66f4\u7b80\u5355\u4e86,\u76f4\u63a5\u65e0\u8111\u52a0\u6807\u8bb0\u5c31\u597d\u4e86\n\n```cpp\nvoid chazhao(int i,int k)\n{\n   ans+=node[i].num;//\u53c8\u662f\u65e0\u8111\u53e0\u52a0\n\tif(node[i].l==node[i].r)\n\treturn ;\n\tif(k<=node[i*2].r)\n   chazhao(i*2,dis);\n\tif(k>=node[i*2+1].l)\n\tchazhao(i*2+1,dis);\n}\n```\n**2.2** \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n\n\u6211\u4eec\u518d\u6b21\u7ffb\u51fa\u4e0a\u9762\u90a3\u5f20\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/71366.png)\n\n\u5047\u5b9a\u6211\u4eec\u8981\u6c421-5\u7684\u548c\uff0c\u6211\u4eec\u4ece\u6839\u5f00\u59cb\u770b\uff0c\u6839\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u533a\u95f4\uff0c\u5206\u522b\u662f**1-4**,**5-8**.\u4e0d\u96be\u53d1\u73b01-4\u8fd9\u4e2a\u533a\u95f4\u662f\u5b8c\u5168\u5728\u6211\u4eec\u9700\u8981\u67e5\u8be2\u76841-5\u4e4b\u95f4\u7684\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de1-4\u7684sum\uff0c\u518d\u770b5-8\uff0c\u518d\u88ab\u5206\u62105-6\u4e0e7-8,5-6\u4e0e\u8981\u67e5\u8be2\u76841-5\u6709\u4ea4\u96c6\uff0c\u6240\u4ee5\u7ee7\u7eed\u67e5\u8be25-6\uff0c\u6b64\u65f6\u88ab\u5206\u6210**5**and**6**\uff0c5\u5b8c\u5168\u57281-5\u4e4b\u5185\uff0c\u6240\u4ee5\u8fd4\u56de5\u7684sum.\n\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u4e86\uff0c\u8fd9\u4e2a\u6211\u7528\u811a\u6307\u5934\u90fd\u80fd\u7b97\u51fa\u6765\uff0c\u4e3a\u5565\u8fd8\u8981\u8fd9\u4e48\u9ebb\u70e6\uff1f~~\u597d\u50cf\u786e\u5b9e\u662f\u8fd9\u6837~~\n\n\u4f46\u4f60\u60f3\u8fc7\u5982\u679c100w\u4e2a\u6570\u9700\u8981\u67e5\u8be299w\u4e2a\u7684\u548c\u5462?\u6b64\u65f6\uff0c\u7ebf\u6bb5\u6811\u53c8\u7b80\u6d01\uff0c\u8fd8\u6bd4\u6734\u7d20\u7684\u7d2f\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u4f4e\u5f88\u591a\uff0c\u6240\u4ee5\u81ea\u7136\u662f\u6211\u4eec\u7684\u4e0d\u4e8c\u4e4b\u9009\u3002\n\n\u4e0b\u9762\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u5c31\u662f\u6240\u8bf4\u7684\u67e5\u8be2\u529f\u80fd\n\n```cpp\nint chazhao(int x,int l,int r)\n{\n\tif(node[x].l>=l && node[x].r<=r)\n\treturn node[x].sum;\n   //\u5982\u679c\u5b8c\u5168\u5305\u62ec\n\tif(node[x].r<l || node[x].l>r)\n\treturn 0;\n\t//\u5982\u679c\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\n\tint ans=0;\n\tif(node[x*2].r>=l)\n\tans+=chazhao(x*2,l,r);\n\t//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u5c31\u641c\u7d22\u5de6\u513f\u5b50\n\tif(node[x*2+1].l<=r) \t\t\t\t\t\tans+=chazhao(x*2+1,l,r);\n   //\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u5c31\u641c\u7d22\u53f3\u513f\u5b50\n    return ans;\n}\n```\n\n\u6211\u8eab\u8fb9\u7684OIer\u90fd\u76f4\u63a5\u5728\u65e0\u8111\u80cc\u8fd9\u4e2a\uff0c\u4f46\u6211\u8fd8\u662f\u89c9\u5f97\u7406\u89e3\u8bb0\u5fc6\u6bd4\u8f83\u597d\n~~\u4e0d\u7136\u5982\u679c\u5728\u8003\u573a\u4e0a\u5fd8\u4e86\uff0c\u6216\u8005\u8111\u62bd\u4e86~~\n\n\u54b3\u54b3\u54b3,\u56de\u5f52\u6b63\u9898.\n\n\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u4fee\u6539\u5355\u70b9\u5462?\n\n\u5176\u5b9e\u4e5f\u4e0d\u96be\n\n\u8fd8\u8bb0\u5f97\u6211\u4eec\u6700\u521d\u63a8\u51fa\u6765\u7684\u5b9a\u7406\u4e48node[i].sum=node[i*2].sum+node[i*2+1].sum\n\n\u6211\u518d\u4f7f\u7528\u4e00\u6b21\u90a3\u5f20\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/71391.png)\n\u5047\u5b9a\u6211\u4eec\u9700\u8981\u4fee\u6539\u7684\u662f\u539f\u56fe\u7684\u4e94\u53f7\u70b9\uff0c\u5176\u4e2d\u9ec4\u8272\u662f\u53bb\u7684\u8def\u5f84\uff0c\u7ea2\u8272\u662f\u8fd4\u56de\u7684\u8def\u5f84\uff0c\u56de\u6765\u65f6\u5019\u7ea2\u8272\u7684+\u6807\u8bb0\u5c31\u662f\u628a\u8fd9\u4e2a\u70b9\u52a0\u4e0a\u8fd9\u4e2a\u503c\u3002\n\n\u5982\u679c\u4f60\u8fd8\u662f\u4e0d\u61c2~~\u786e\u5b9e\u5f88\u96be~~\uff0c\u90a3\u4e48\u542c\u6211\u901a\u4fd7\u6765\u8bf4\n\n\u76f8\u5f53\u4e8e\u6211\u4eec\u57285\u53f7\u52a0\u4e0a\u4e86k,\u7136\u540e\u56e0\u4e3a\u9700\u8981\u6ee1\u8db3node[x].sum=node[(x<<1)|1].sum+node[(x<<1)].sum;\n\u6240\u4ee5\u5f80\u4e0a\u4f9d\u7167\u8fd9\u4e2a\u66f4\u65b0\u5c31\u884c\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n```cpp\nvoid add(int i,int y,int x)\n{\n    if(node[i].l==node[i].r)\n\t{//\u5982\u679c\u533a\u95f4\u53ea\u67091\u4e2a\u70b9\uff0c\u90a3\u5c31\u627e\u5230\u4e86\n        node[i].sum+=x;\n        return ;\n    }\n    if(y<=node[i*2].r)\n\tadd(i*2,y,x);\n   else  add(i*2+1,y,x); //\u5411\u5728\u7684\u65b9\u5411\u641c\n   tree[i].sum=node[i*2].sum+node[i*2+1].sum;\n   //\u7ef4\u62a4\u4e00\u4e0b\u4e0b\u5b9a\u7406 \n   return ;\n}\n```\n\n\u7ebf\u6bb5\u6811\u521d\u7ea7\u6559\u5b66 \u5b8c\u6bd5!\n\u5982\u679c\u4f60\u8ba4\u8ba4\u771f\u771f\u5b66\u5b8c\u4e86\uff0c\u800c\u4e14\u90fd\u4f1a\u4e86\uff0c\u4f60\u5c31\u5f97\u5230\u4e86\u4e0d\u9519\u7684\u5165\u95e8\n\n\u6211\u51c6\u5907\u51fa\u4e2a\u4e8c\u7ee7\u7eed\u6df1\u5165\u8bb2\u7ebf\u6bb5\u6811\uff0c\u7801\u5b57\u7ed8\u56fe\u90fd\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u8d70\u884c\u4e0d\u884c\n\n\u5982\u6709\u9519\u8bef\uff0c\u8bf7\u8054\u7cfb\u6211\u8ba2\u6b63",
        "postTime": 1565575685,
        "uid": 144821,
        "name": "_hyc_",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811---\u4ece\u5165\u95e8\u5230\u5165\u571f"
    },
    {
        "content": "## \u601d\u8def\n\n \u524d\u51e0\u5929\u5b66\u4e86\u7ebf\u6bb5\u6811\u7684\u6211\uff0c\u4eca\u5929\u53c8\u53bb\u505a\u4e86\u4e00\u904d\u7ebf\u6bb5\u6811\u3010\u6a21\u677f\u3011$1$\uff0c\u53d1\u73b0\u81ea\u5df1\u6253\u4ee3\u7801\u771f\u7684\u662f\u6f0f\u6d1e\u767e\u51fa\u554a\uff0c\u4e0d\u8fc7\u6700\u540e\u8fd8\u662f\u5bf9\u4e86\uff0c\u6240\u4ee5\u6765\u6c34\u4e00\u7bc7\u535a\u5ba2\n\n\u9996\u5148\uff0c\u8fd9\u9053\u6a21\u677f\u9898\u7684\u8981\u6c42\u5c31\u662f\uff1a\n\n> 1.\u533a\u95f4\u52a0\n  2.\u533a\u95f4\u6c42\u548c\n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u5c5e\u4e8e\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\n\n### \u524d\u7f6e\u2014\u2014\u5b8f\u5b9a\u4e49\n```cpp\n#define N 100011\n#define lson rt << 1\n#define rson rt << 1 | 1\n#define int long long\n```\n\u7531\u4e8e\u6211\u7279\u522b\u61d2\uff0c\u4e0d\u60f3\u5199\u4ec0\u4e48$rt << 1$\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u76f4\u63a5\u5b8f\u5b9a\u4e49\u5c31\u597d\u4e86\uff0c\u8fd8\u6709\uff0c\u4e3a\u4e86\u4e0d\u6539$int$\uff0c\u6211\u76f4\u63a5\u628a$int$\u5b8f\u5b9a\u4e49\u4e3a$long \\ long$\uff0c\u7701\u7684\u9ebb\u70e6~~\uff08\u6211\u771f\u7684\u662f\u61d2\u5230\u5bb6\u4e86\uff09~~\n\n### 1.\u5b9a\u4e49\n```cpp\nint sum[N << 2], lazy[N << 2], n, m;\n```\n\u4f17\u6240\u5468\u77e5\uff0c\u7ebf\u6bb5\u6811\u4e00\u822c\u8981\u5f00\u56db\u500d\u7a7a\u95f4\uff0c\u4e0d\u660e\u767d\u7684\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u9897\u7ebf\u6bb5\u6811\u6570\u4e00\u4e0b\uff0csum\u6570\u7ec4\u7ef4\u62a4\u533a\u95f4\u548c\uff0clazy\u662f\u61d2\u6807\u8bb0\n\n### 2.pushup\n```cpp\ninline void pushup(int rt) {\n\tsum[rt] = sum[lson] + sum[rson];\n}\n```\n\u8fd9\u662f\u4e00\u4e2a\u4e0a\u4f20\u7ed9\u7236\u4eb2\u7ed3\u70b9\u7684\u4fe1\u606f\u7684\u51fd\u6570\uff0c\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u548c\u5c31\u7b49\u4e8e\u5b83\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7684\u533a\u95f4\u548c\u4e4b\u548c\n\n### 3.\u5efa\u6811\n```cpp\nvoid build(int l, int r, int rt) {\n\tif(l == r) {\n\t\tsum[rt] = read();\n\t\treturn;\n\t}\n\tint m = (l + r) >> 1;\n\tbuild(l, m, lson);\n\tbuild(m + 1, r, rson);\n\tpushup(rt);\n}\n```\n\u4e0a\u9762\u662f\u5efa\u6811\u8fc7\u7a0b,$rt$\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0c$lson$\u662f\u5de6\u5b69\u5b50\uff0c$rson$\u662f\u53f3\u5b69\u5b50\n\n### 4.\u6807\u8bb0\u4e0b\u653e\n```cpp\ninline void pushdown(int l, int r, int rt) {\n\tif(!lazy[rt]) return;\n\tlazy[lson] += lazy[rt];\n\tlazy[rson] += lazy[rt];\n\tint m = (l + r) >> 1;\n\tsum[lson] += (m - l + 1) * lazy[rt];\n\tsum[rson] += (r - m) * lazy[rt];\n\tlazy[rt] = 0;\n\treturn;\n}\n```\n\npushdown\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\n\n1.\u7528lazy\u5b58\u50a8\u8fd9\u4e2a\u61d2\u6807\u8bb0\u3002\n\n2.\u9012\u5f52\u5230\u8fd9\u4e2a\u8282\u70b9\u65f6\uff0c\u53ea\u66f4\u65b0\u8fd9\u4e2a\u8282\u70b9\u7684\u72b6\u6001\uff0c\u5e76\u628a\u5f53\u524d\u7684\u66f4\u6539\u503c\u7d2f\u79ef\u5230\u6807\u8bb0\u4e2d\u3002\n\n\u4ec0\u4e48\u65f6\u5019\u624d\u7528\u5230\u8fd9\u4e2a\u61d2\u6807\u8bb0\uff1f\n\n\u5f53\u9700\u8981\u9012\u5f52\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u65f6\uff0c\u6807\u8bb0\u4e0b\u4f20\u7ed9\u5b50\u8282\u70b9\u3002\n\n3.\u4e0b\u653e\u64cd\u4f5c\uff1a\uff08\u4e09\u6b65\uff09\n\n\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u7d2f\u79ef\u5230\u5b50\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u4e2d\u3002\n\n\u4fee\u6539\u5b50\u8282\u70b9\u72b6\u6001\u3002\n\n\u7236\u8282\u70b9\u61d2\u6807\u8bb0\u6e050\u3002\n\n\n### 5.\u533a\u95f4\u4fee\u6539\n```cpp\nvoid update(int L, int R, int c, int l, int r, int rt) {\n\tif(L <= l && r <= R) {\n\t\tsum[rt] += c * (r - l + 1);\n\t\tlazy[rt] += c;\n\t\treturn;\n\t}\n\tpushdown(l, r, rt);\n\tint m = (l + r) >> 1;\n\tif(L <= m) update(L, R, c, l, m, lson);\n\tif(R > m) update(L, R, c, m + 1, r, rson);\n\tpushup(rt);\n}\n\n```\n\n### 6.\u533a\u95f4\u6c42\u548c\n```cpp\nint query(int L, int R, int l, int r, int rt) {\n\tif(L <= l && r <= R) return sum[rt];\n\tpushdown(l, r, rt);\n\tint m = (l + r) >> 1, ans = 0;\n\tif(L <= m) ans += query(L, R, l, m, lson);\n\tif(R > m) ans += query(L, R, m + 1, r, rson);\n\treturn ans;\n}\n```\n\n##\u4ee3\u7801\n\n\u4e0b\u9762\u4e0a\u4f20\u9ad8\u6e05~~\u65e0\u7801~~\u65e0\u6c34\u5370\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define N 100011\n#define lson rt << 1\n#define rson rt << 1 | 1\n#define int long long\nusing namespace std;\n\nint sum[N << 2], lazy[N << 2], n, m;\n\ninline int read() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\tfor( ; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor( ; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn x * f;\n}\n\ninline void pushup(int rt) {\n\tsum[rt] = sum[lson] + sum[rson];\n}\n\nvoid build(int l, int r, int rt) {\n\tif(l == r) {\n\t\tsum[rt] = read();\n\t\treturn;\n\t}\n\tint m = (l + r) >> 1;\n\tbuild(l, m, lson);\n\tbuild(m + 1, r, rson);\n\tpushup(rt);\n}\n\ninline void pushdown(int l, int r, int rt) {\n\tif(!lazy[rt]) return;\n\tlazy[lson] += lazy[rt];\n\tlazy[rson] += lazy[rt];\n\tint m = (l + r) >> 1;\n\tsum[lson] += (m - l + 1) * lazy[rt];\n\tsum[rson] += (r - m) * lazy[rt];\n\tlazy[rt] = 0;\n\treturn;\n}\n\nvoid update(int L, int R, int c, int l, int r, int rt) {\n\tif(L <= l && r <= R) {\n\t\tsum[rt] += c * (r - l + 1);\n\t\tlazy[rt] += c;\n\t\treturn;\n\t}\n\tpushdown(l, r, rt);\n\tint m = (l + r) >> 1;\n\tif(L <= m) update(L, R, c, l, m, lson);\n\tif(R > m) update(L, R, c, m + 1, r, rson);\n\tpushup(rt);\n}\n\nint query(int L, int R, int l, int r, int rt) {\n\tif(L <= l && r <= R) return sum[rt];\n\tpushdown(l, r, rt);\n\tint m = (l + r) >> 1, ans = 0;\n\tif(L <= m) ans += query(L, R, l, m, lson);\n\tif(R > m) ans += query(L, R, m + 1, r, rson);\n\treturn ans;\n}\n\nsigned main() {\n\tn = read(), m = read();\n\tbuild(1, n, 1);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint opt = read(), x = read(), y = read();\n\t\tif(opt == 1) {\n\t\t\tint k = read();\n\t\t\tupdate(x, y, k, 1, n, 1);\n\t\t}\n\t\tif(opt == 2) cout << query(x, y, 1, n, 1) << '\\n';\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1562889306,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "## \u5b9a\u4e49\n\n>\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9[a,b]\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u8868\u793a\u7684\u533a\u95f4\u4e3a[a,(a+b)/2]\uff0c\u53f3\u513f\u5b50\u8868\u793a\u7684\u533a\u95f4\u4e3a[(a+b)/2+1,b]\u3002\u56e0\u6b64\u7ebf\u6bb5\u6811\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6700\u540e\u7684\u5b50\u8282\u70b9\u6570\u76ee\u4e3aN\uff0c\u5373\u6574\u4e2a\u7ebf\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/pic/58127.png)\n\n## \u7ebf\u6bb5\u6811\u7684\u4f5c\u7528&\u53ef\u4ee5\u652f\u6301\u7684\u64cd\u4f5c\n\n#### \u4f5c\u7528:\n\n\t\u7406\u8bba\u4e0a\u6240\u6709\u7b26\u5408\u7ed3\u5408\u5f8b\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\t\u4f8b\u5982\uff0c\u533a\u95f4\u548c\uff0c\u533a\u95f4\u4e58\u79ef\uff0c\u533a\u95f4max/min\u503c\u2026\u2026\u8fd8\u6709\u5f88\u591a\u5f88\u5947\u602a\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n#### \u64cd\u4f5c\uff1a\n\n\t\u533a\u95f4\u4fee\u6539\u67e5\u8be2\uff0c\u5355\u70b9\u4fee\u6539\u67e5\u8be2\u3002\n    \n### \u6211\u4eec\u8fd9\u91cc\u4ee5\u533a\u95f4\u548c\u4e3a\u4f8b.\n\n    \n## 1.\u5efa\u6811\u4e0e\u7ef4\u62a4\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811,\u5219\u6709\u4e0b\u9762\u7684\u6027\u8d28:\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7$P$ ,\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u7684\u7f16\u53f7\u5206\u522b\u662f$2*P$\u548c$2*P+1$\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053 << \u4ee3\u8868\u7684\u662f\u4e8c\u8fdb\u5236\u4e0b\u5de6\u79fb\u4e00\u4f4d\uff0c\u76f8\u5f53\u4e8e$*2$.\n\n\u6240\u4ee5 \u5de6\u513f\u5b50 $= P*2 = P<<1;$\n\n\u7531\u4e8e $P<<1$ \u540e\u6700\u540e\u4e00\u4f4d\u7a7a\u51fa\uff0c\u4e3a0\uff0c\u5219 $P<<1|1$ \u5c31\u4ee3\u8868\u4e86$P*2 + 1$\uff1b\n\n\u7efc\u4e0a,\u6211\u4eec\u5bf9\u4e8e\u7ed3\u70b9$P$,\u4ed6\u7684\u5de6\u53f3\u513f\u5b50\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u8868\u793a\u4e3a\uff1a\t\t\t\t\t\n\n$lson(P) = P<<1$;\n\n$rson(P) = P<<1|1$;\n\n\u7528\u5b8f\u548c\u51fd\u6570\u90fd\u53ef\u4ee5.\t\n\n```cpp\ndefine lson(x) x<<1\ndefine rson(x) x<<1|1\n```\n\n\u6811\u7684\u5b58\u50a8:\n\n\u5b58\u50a8\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\n\n\t1.\u7ed3\u6784\u4f53\u5b58\u50a8\u3002\n\t2.\u7528\u6570\u7ec4\u76f4\u63a5\u5b58\u3002\n\n\u4e24\u79cd\u5b58\u50a8\u7684\u65b9\u5f0f\u6ca1\u6709\u672c\u8d28\u7684\u4e0d\u540c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4e0d\u8fc7\u6211\u6bd4\u8f83\u63a8\u8350\u5927\u5bb6\u7528\u7ed3\u6784\u4f53.\n\n\u4ee3\u7801\u5982\u4e0b:\n```cpp\nstruct _tree{\n    int l,r,add,pre;\n}tree[maxn << 2];\n```\n\n\u4ece\u7ebf\u6bb5\u6811\u7684\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u9664\u53f6\u5b50\u5916\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u90fd\u662f\u7531\u5b83\u7684\u5b50\u8282\u70b9\u5411\u4e0a\u5408\u5e76\u800c\u6765\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\uff1a\n\n```cpp\ninline void pushup(int x){\n    tree[x].pre = tree[lson(x)].pre + tree[rson(x)].pre;\n}\n```\n\n\u7b80\u5355\u7684\u6765\u8bf4\uff0c\u5c31\u662f\u628a\u5f53\u524d\u7ed3\u70b9\u5de6\u53f3\u513f\u5b50\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\u3002\n\n\u8fd9\u88ab\u6211\u4eec\u79f0\u4e3a pushup \u64cd\u4f5c\u3002\n\n\u6211\u4eec\u5728\u8fd9\u513f\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u5b9e\u9645\u4e0a pushup \u662f\u5728\u5408\u5e76\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\n\n\u6240\u4ee5\u9700\u8981\u4fe1\u606f\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff01\n\n### \u5c0f\u7ed3:\n\n\uff081\uff09 \u7ef4\u62a4\u7236\u5b50\u5173\u7cfb\u3002\n\t\t\n\u5bf9\u4e8e\u5efa\u6811\uff0c\u7531\u4e8e\u4e8c\u53c9\u6811\u81ea\u8eab\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u53ef\u4f20\u9012\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\t\u8003\u8651\u9012\u5f52\u5efa\u6811\u3002\u5728\u5efa\u6811\u7684\u540c\u65f6\u7ef4\u62a4\u7236\u5b50\u8282\u70b9\u5173\u7cfb\u3002\n\t\t\n\u7531\u4e8e\u6211\u4eec\u662f\u7528\u81ea\u5df1\u7684\u513f\u5b50\u6765\u66f4\u65b0\u81ea\u5df1\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u8981\u5728\u513f\u5b50\u66f4\u65b0\u4e4b\u540e\t\u518d\u5408\u5e76\u6210\u4e3a\u7236\u4eb2\u7684\u4fe1\u606f\u3002\n\t\t\n\u5bf9\u4e8e\u9012\u5f52\u6765\u8bf4\uff0c\u5c31\u5f88\u663e\u7136\u4e86\uff0c\u6211\u4eec\u9700\u8981\u518d\u56de\u6eaf\u7684\u65f6\u5019\u7528\u521a\u624d\u8bb2\u7684\tpushup \u64cd\u4f5c\u3002\n\n\uff082\uff09\u5206\u914d\u7ed3\u70b9\u6240\u6db5\u76d6\u7684\u533a\u95f4\u3002\n\n\u8fd8\u662f\u5bf9\u4e8e\u521a\u5f00\u59cb\u7684\u90a3\u4e2a\u56fe,\u4e24\u4e2a\u513f\u5b50\u7684\u533a\u95f4\u52a0\u5728\u4e00\u8d77\u4e3a\u7236\u4eb2\u7684\u533a\u95f4\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5728\u5efa\u6811\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u533a\u95f4\uff0c\u6211\u4eec\u627e\u5230\u4ed6\u7684mid ,\u5de6\u8fb9\t\u90e8\u5206\u5206\u914d\u7ed9\u5de6\u513f\u5b50\uff0c\u53f3\u8fb9\u90e8\u5206\u5206\u914d\u7ed9\u53f3\u513f\u5b50.\n\n\u6700\u540e\u5f53\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u628a\u5355\u4e2a\u7684\u7ed3\u70b9\u503c\u66f4\u65b0\uff0c\u56de\u6eaf\u65f6\u5411\u4e0a\t\tpushup,\u5408\u5e76\u533a\u95f4\u4fe1\u606f\u3002\n\n\u4ee3\u7801\u7684\u5177\u4f53\u5b9e\u73b0\u5728\u540e\u9762\u3002\n        \n```cpp\ninline void built(ll p,ll l,ll r){\n    tree[p].l=l,tree[p].r = r;\n    if(l==r){\n        tree[p].pre = a[r];\n        return;\n    }\n    ll mid = (l+r) >> 1;\n    built(lson(p),l,mid);\n    built(rson(p),mid+1,r);\n    \n    pushup(p);\n}\n```\n\u51e0\u4e2a\u5c0f\u7ec6\u8282\u3002\n\n\u7b2c\u4e09\u884c\uff1a if(l == r) \u7684\u610f\u601d\u662f\u5230\u8fbe\u4e86\u53f6\u5b50\u7ed3\u70b9\u3002(\u5373\u5305\u542b\u7684\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u70b9\u65f6)\n\n\u5230\u8fbe\u53f6\u5b50\u7ed3\u70b9\u7684\u65f6\u5019\u66f4\u65b0\u5355\u70b9\uff0c\u522b\u5fd8\u4e86\u5199return\n\n## 2.\u533a\u95f4\u67e5\u8be2\u3002\n\n#### Q:First ,\u4e3a\u5565\u4e0d\u5148\u8bb2\u5355\u70b9\u67e5\u8be2\uff1f\n\n#### A:\u56e0\u4e3a\u5355\u70b9\u67e5\u8be2\u65f6\u533a\u95f4\u67e5\u8be2\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u5566!\n\n\u7ecf\u8fc7\u524d\u9762\u5bf9\u7ebf\u6bb5\u6811\u7684\u7406\u89e3\uff0c\u76f8\u4fe1\u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u8fd9\u79cd\u64cd\u4f5c\u5bf9\u5927\u5bb6\u5df2\u7ecf\u4e0d\u662f\u4ec0\u4e48\u95ee\u9898\u3002\n\n\u539f\u7406\u5c31\u662f \u5982\u679c\u67e5\u5230\u7684\u5f53\u524d\u533a\u95f4\u88ab \u8981\u67e5\u8be2\u7684\u533a\u95f4 \u201c\u5b8c\u5168\u5305\u542b\u201d,\u5c31\u7528ans += \u5f53\u524d\u533a\u95f4\u7684\u503c,return;(\u4ee5\u7ef4\u62a4\u533a\u95f4\u548c\u4e3a\u4f8b\n\n```cpp\ninline ll ask(ll p,ll l,ll r){\n    if(l<=tree[p].l && r>=tree[p].r) return tree[p].pre;\n    pushdown(p);\n    ll mid = (tree[p].l + tree[p].r) >> 1;\n    ll sum = 0;\n    if(l <= mid) sum += ask(lson(p),l,r);\n    if(r > mid)\t sum += ask(rson(p),l,r);\n    return sum;\n}\n\n```\n\u6b38\uff1f\u91cc\u9762\u7684pushdown\u662f\u5565\u634f\uff1f\n\n\u522b\u614c\uff0c\u6211\u4eec\u63a5\u7740\u5c31\u4f1a\u8bb2.\n\n## 3.\u533a\u95f4\u4fee\u6539\n\u8fd9\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u96be\u70b9\uff0c\u4e5f\u662f\u4e00\u4e2a\u91cd\u70b9\u3002\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u4e0d\u52a0\u4efb\u4f55\u4f18\u5316\u7684\u66b4\u529b\u4fee\u6539\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/58127.png)\n\n\u4f9d\u65e7\u662f\u8fd9\u4e2a\u56fe\u3002\n\n\u5982\u679c\u6211\u4eec\u8981\u4fee\u6539\u533a\u95f4$[1,5]$,\u66b4\u529b\u4fee\u6539\u7684\u8bdd\u9700\u8981$O(9)$\u7684\u590d\u6742\u5ea6\u3002\n\n\u800c\u76f4\u63a5\u4fee\u6539\u53ea\u9700\u8981$O(5)$\u7684\u590d\u6742\u5ea6\uff0c\u5982\u679c\u8fd9\u6837\uff0c\u7ebf\u6bb5\u6811\u5c31\u6ca1\u6709\u4efb\u4f55\u4f18\u52bf\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u4e1c\u897f.\n\n## Lazy tag.\n\n\u4e4b\u6240\u4ee5\u79f0\u5176\u201clazy\u201d\uff0c\u662f\u56e0\u4e3a\u539f\u672c\u533a\u95f4\u4fee\u6539\u9700\u8981\u901a\u8fc7\u5148\u6539\u53d8\u53f6\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u4e0d\u65ad\u5730\u5411\u4e0a\u9012\u5f52\u4fee\u6539\u7956\u5148\u8282\u70b9\u76f4\u81f3\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe O(nlogn)  \u7684\u7ea7\u522b\u3002\u4f46\u5f53\u6211\u4eec\u5f15\u5165\u4e86\u61d2\u6807\u8bb0\u4e4b\u540e\uff0c\u533a\u95f4\u66f4\u65b0\u7684\u671f\u671b\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86O(logn) \u7684\u7ea7\u522b\u4e14\u751a\u81f3\u4f1a\u66f4\u4f4e.\n\n\u61d2\u6807\u8bb0\u7684\u601d\u60f3\u7cbe\u9ad3\u5728\u4e8e\u4e0b\u9762\u8fd9\u53e5\u8bdd(\u6211\u778ejier\u603b\u7ed3\u7684..\n\n#### \u6bcf\u6b21\u4fee\u6539\u53ea\u4fee\u6539\u516c\u5171\u7956\u5148\u3002\n\n#### \u6bcf\u6b21\u7528\u5230\u8be5\u70b9\u7684\u65f6\u5019\u4e0b\u653elazytag.\n\nso that \uff0c\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u4e0b\u653elazytag?\n\n\u4e0epushup\u76f8\u5bf9\u5e94 \uff0c \u6211\u4eec\u79f0\u4e3apushdown.\n\t\n\u6211\u4eec\u77e5\u9053 , pushup\u662f\u5408\u5e76\u4e24\u4e2a\u513f\u5b50\u7684\u4fe1\u606f\u7ed9\u7236\u4eb2\n\n\u76f8\u5bf9\u5e94\u7684 pushdown \u662f\u628a \u7236\u4eb2\u7684\u4fe1\u606f\u4f20\u9012\u7ed9\u513f\u5b50.\n\n\u4f20\u9012lazytag\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u628atag\u4f20\u9012\u7ed9\u513f\u5b50\uff0c\u8fd8\u8981\u8bb0\u5f97\u4fee\u6539\u513f\u5b50\u7684\u503c\u3002\n\n\u6211\u4eec\u8fd8\u662f\u4ee5\u7b80\u5355\u7684\u533a\u95f4\u548c\u4e3a\u4f8b\u5b50\u3002\n\n```cpp\ninline void pushdown(ll p){\n    if(tree[p].add!=0){\n        ll tot = tree[p].add;\n        tree[lson(p)].pre += tot*(tree[lson(p)].r-tree[lson(p)].l+1);\n        tree[rson(p)].pre += tot*(tree[rson(p)].r-tree[(rson(p))].l+1);\n        tree[lson(p)].add += tot;\n        tree[rson(p)].add += tot;\n        tree[p].add = 0; \n    }\n}\n```\n\n\u4f1a\u4e86lazy_tag\uff0c\u4f60\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u4e86\u2026\n\n(\u7ebf\u6bb5\u6811\u7684\u4e3b\u4f53\u57fa\u672c\u76f8\u540c\uff0c\u6bcf\u9053\u9898\u76ee\u7684\u4e0d\u540c\u4e4b\u5904\u4e3b\u8981\u662f\u5728\u4e8e pushup() \u548c \npushdown() \u51fd\u6570\u7684\u6784\u9020\u3002\n\n\u7ebf\u6bb5\u6811change \u4ee3\u7801\u5982\u4e0b:\n\n```cpp\ninline void change(ll p,ll l,ll r,ll w){\n    if(tree[p].l>=l && tree[p].r<=r){\n        tree[p].pre += w*(tree[p].r-tree[p].l+1);\n        tree[p].add += w;\n        return;\n    }\n    pushdown(p);\n    ll mid = (tree[p].l+tree[p].r) >> 1;\n    if(l<=mid) change(lson(p),l,r,w);\n    if(r>mid) change(rson(p),l,r,w);\n    pushup(p);\n}\n```\n\n\u6574\u4e2a\u4ee3\u7801:\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#define lson(x) x<<1 \n#define rson(x) x<<1|1\ntypedef long long ll;\nconst int maxn=100010;\nll a[maxn];\nll n,m,x,o,b,c,d;\n\nstruct _tree{\n    ll l,r,add,pre;\n}tree[maxn*4+5];\n\ninline void pushup(ll x){\n    tree[x].pre = tree[lson(x)].pre + tree[rson(x)].pre;\n}\n\ninline void built(ll p,ll l,ll r){\n    tree[p].l=l,tree[p].r = r;\n    if(l==r){\n        tree[p].pre = a[r];\n        return;\n    }\n    ll mid = (l+r) >> 1;\n    built(lson(p),l,mid);\n    built(rson(p),mid+1,r);\n    pushup(p);\n}\n\ninline void pushdown(ll p){\n    if(tree[p].add!=0){\n        ll tot = tree[p].add;\n        tree[lson(p)].pre += tot*(tree[lson(p)].r-tree[lson(p)].l+1);\n        tree[rson(p)].pre += tot*(tree[rson(p)].r-tree[(rson(p))].l+1);\n        tree[lson(p)].add += tot;\n        tree[rson(p)].add += tot;\n        tree[p].add = 0; \n    }\n}\n\ninline void change(ll p,ll l,ll r,ll w){\n    if(tree[p].l>=l && tree[p].r<=r){\n        tree[p].pre += w*(tree[p].r-tree[p].l+1);\n        tree[p].add += w;\n        return;\n    }\n    pushdown(p);\n    ll mid = (tree[p].l+tree[p].r) >> 1;\n    if(l<=mid) change(lson(p),l,r,w);\n    if(r>mid) change(rson(p),l,r,w);\n    pushup(p);\n}\n\ninline ll ask(ll p,ll l,ll r){\n    if(l<=tree[p].l && r>=tree[p].r) return tree[p].pre;\n    pushdown(p);\n    ll mid = (tree[p].l + tree[p].r) >> 1;\n    ll sum = 0;\n    if(l <= mid) sum += ask(lson(p),l,r);\n    if(r > mid)\t sum += ask(rson(p),l,r);\n    return sum;\n}\n\nint main (){\n    scanf(\"%lld%lld\",&n,&m);\n    \n    for(int i=1;i<=n;++i) \n        scanf(\"%lld\",&a[i]);\n        \n        built(1,1,n); \n    while(m--){\n        scanf(\"%lld\",&o);\n        if(o==1){\n            scanf(\"%d%d%d\",&b,&c,&d);\n            change(1,b,c,d);\n        }\n        if(o==2){\n            scanf(\"%d%d\",&b,&c);\n            ll ans = ask(1,b,c);\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n} \n```\n\u5e0c\u671b\u5927\u5bb6\u53ef\u4ee5\u63d0\u51fa\u4e0d\u8db3\uff01",
        "postTime": 1557068688,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u7ebf\u6bb5\u6811\u7b14\u8bb0"
    },
    {
        "content": "\u5176\u5b9e\u5462\uff0c\u6211\u770b\u8fd9\u9053\u9898\u7684\u9898\u89e3\u90fd\u5df2\u7ecf\u8bb2\u7684\u5f88\u8be6\u7ec6\u4e86\u3002\u4f46\u662f\uff0c\u6211\u8fd8\u662f\u8981\u6765\u8bf4\u8bf4\u6211\u7684\u4e00\u4e2a\u5c0f\u53d1\u73b0\u3002\u6240\u4ee5\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u4e2a\u5176\u5b9e\u4e0d\u7b97\u662f\u4e00\u7bc7\u9898\u89e3\uff0c\u4f46\u662f\u5b83\u548c\u7ebf\u6bb5\u6811\u6709\u5173\uff0c\u56e0\u6b64\u6211\u5c31\u628a\u5b83\u653e\u5728\u8fd9\u91cc\u4e86\uff0c\u4e5f\u5e0c\u671b\u5ba1\u6838\u80fd\u901a\u8fc7\u3002\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\uff0c\u6211\u53d1\u73b0\u4e4b\u524d\u7684\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u51e0\u4e4e\u6240\u6709\u5199\u6cd5\u90fd\u662f\u4e00\u79cd\uff08\u5177\u4f53\u4e0b\u9762\u4f1a\u8c08\u5230\uff09\uff1b\u4f46\u662f\u6211\u5b66\u4e60\u7684\u7ebf\u6bb5\u6811\u5374\u662f\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\u3002\u56e0\u6b64\uff0c\u5728\u5b66\u4e60\u8fd9\u4e2a\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e2a\u5dee\u522b\uff0c\u6211\u56f0\u60d1\u4e86\u5f88\u4e45\uff0c\u4e00\u76f4\u5199\u4e0d\u6765\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u3002\u7ffb\u4e86\u534a\u5929\u7684\u9898\u89e3\uff0c\u4e5f\u6ca1\u6709\u627e\u5230\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u76f8\u5173\u7684\u4fe1\u606f\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u53d1\u4e00\u7bc7\u9898\u89e3\u6765\u5e2e\u52a9\u548c\u6211\u4e00\u6837\u4e0d\u5e78\u7684\u4eba\u3002\n\n\u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0c\u8fd9\u91cc\u8bf4\u7684\u5199\u6cd5\u662f\u6307\u7ebf\u6bb5\u6811\u7684\u4e0d\u540c\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5e76\u4e0d\u662f\u4ec0\u4e48\u6bd4\u8f83\u6e05\u5947\u7684\u65b0\u601d\u8def\u3002\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\u7684\u524d\u7f6e\u77e5\u8bc6\uff0c\u6211\u8fd9\u91cc\u4e5f\u4e0d\u518d\u8d58\u8ff0\u3002\u4e4b\u524d\u6211\u4e5f\u63d0\u5230\u8fc7\uff0c\u6211\u8981\u8bf4\u7684\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u5199\u6cd5\u3002\u8fd9\u4e24\u79cd\u5199\u6cd5\u5728\u5efa\u6811$(build)$\u7684\u5199\u6cd5\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\uff0c\u5c31\u4e0d\u518d\u7ba1\u5b83\uff1b\u4e0d\u540c\u70b9\u5728\u4e8e\u533a\u95f4\u4fee\u6539\u4ee5\u53ca\u533a\u95f4\u7684\u8bbf\u95ee\u3002\u8fd9\u91cc\u4ee5\u533a\u95f4\u7684\u4fee\u6539\u4e3a\u4f8b\uff0c\u7ec6\u8bf4\u8fd9\u4e24\u79cd\u5199\u6cd5\u3002\n\n\u9996\u5148\u6765\u770b\u770b\u4ee3\u7801\uff1a\n\n1. \u5e38\u89c1\u5199\u6cd5\uff1a\n```cpp\nvoid change(int x,int y,int z,int id)\n{\n    int ls=tr[id].l,rs=tr[id].r;\n    if(ls>=x&&rs<=y)\n    {\n        tr[id].lazy+=z;\n        tr[id].sum+=z*len(id);\n        return;\n    }\n    down(id);\n    int mid=(ls+rs)>>1;\n    if(x<=mid)\n        change(x,y,z,ls(id));\n    if(y>mid)\n        change(x,y,z,rs(id));\n    tr[id].sum=tr[ls(id)].sum+tr[rs(id)].sum;\t\t\n} \n```\n\n2. \u5c11\u89c1\u5199\u6cd5\n```cpp\nvoid change(int x,int y,int z,int id)\n{\n    if(tr[id].l==x&&tr[id].r==y)\n    {\n        tr[id].lazy+=z;\n        tr[id].sum+=z*(y-x+1);\n        return;\n    }\n    down(id);\n    int mid=(tr[id].l+tr[id].r)>>1;\n    if(y<=mid)\n    {\n        change(x,y,z,ls(id));\n        upon(id);\n        return;\n    }\n    if(x>mid)\n    {\n        change(x,y,z,rs(id));\n        upon(id);\n        return;\n    }\n    change(x,mid,z,ls(id));\n    change(mid+1,y,z,rs(id));\n    upon(id);\n}\n```\n\u5f53\u7136\uff0c\u4ece\u8fd9\u91cc\u7684\u7801\u91cf\u5c31\u53ef\u4ee5\u660e\u663e\u7684\u770b\u51fa\u4e3a\u4ec0\u4e48\u4e0a\u9762\u90a3\u79cd\u5199\u6cd5\u66f4\u52a0\u5e38\u89c1\u4e86\u3002\n\n\u4e0d\u8fc7\uff0c\u5bf9\u4e8e\u77e5\u9053\u4efb\u610f\u4e00\u79cd\u5199\u6cd5\u7684\u540c\u5b66\u6765\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u4e0d\u77e5\u9053\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\uff0c\u90a3\u4e48\u5f53\u4ed6\u4eec\u5728\u770b\u53e6\u4e00\u79cd\u5199\u6cd5\u7684\u65f6\u5019\uff0c\u4f1a\u5f88\u7591\u60d1\uff1a\u8fd9\u600e\u4e48\u53ef\u80fd\u662f\u5bf9\u7684\uff1f~~\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u6211\u518d\u770b\u7b2c\u4e00\u79cd\u5199\u6cd5\u7684\u65f6\u5019\u5c31\u662f\u8fd9\u79cd\u60f3\u6cd5\uff09~~\n\n\u522b\u4eba\u8fd8\u771f\u662f\u5bf9\u7684\u3002\u6211\u4eec\u9996\u5148\u4ece\u770b\u8d77\u6765\u6700\u4e0d\u540c\u7684\u5730\u65b9\u8bf4\u8d77\u3002\n```cpp\n\t//\u5c11\u89c1\u5199\u6cd5 \n    if(tr[id].l==x&&tr[id].r==y)\n    //\u5e38\u89c1\u5199\u6cd5 \n    int ls=tr[id].l,rs=tr[id].r;\n    if(ls>=x&&rs<=y)\t \n```\n\u770b\u5230\u4e86\u5417\uff1f\u4e00\u79cd\u662f\u5f53\u8981\u4fee\u6539\u7684\u533a\u95f4$(x,y)$\u5305\u542b\u4e86\u5f53\u524d$id$\u6240\u7ba1\u7406\u7684\u533a\u95f4$(l,r)$\u5c31\u64cd\u4f5c\uff1b\u53e6\u4e00\u79cd\u5219\u662f\u5f53$(x,y)$\u548c$(l,r)$\u662f\u540c\u4e00\u4e2a\u533a\u95f4\u65f6\u624d\u64cd\u4f5c\u3002\u518d\u770b\u770b\u540e\u9762\u7684\u5404\u79cd$if$\u8bed\u53e5\uff0c\u5c31\u4f1a\u53d1\u73b0\uff1a\u5e38\u89c1\u5199\u6cd5\u7684$if$\u91cc\u662f\u6ca1\u6709$return$\u8bed\u53e5\u7684\uff0c\u4f46\u662f\u53e6\u4e00\u79cd\u5199\u6cd5\u91cc\u51e0\u4e4e\u6bcf\u4e2a$if$\u91cc\u90fd\u6709$return$\u8bed\u53e5\u3002\u7136\u540e\uff0c\u6211\u5c31\u610f\u8bc6\u5230\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u5c31\u6709\u5dee\u522b\u4e86\u3002\u5c11\u89c1\u5199\u6cd5\u662f\u8981**\u4fdd\u8bc1$(x,y)$\u662f$(l,r)$\u7684\u5b50\u96c6**\u7684\uff0c\u4f46\u662f\u5e38\u89c1\u5199\u6cd5\u5219\u4e0d\u7528\u3002\u7136\u540e\uff0c\u8fdb\u4e00\u6b65\u7684\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u7684\u542b\u4e49\u5176\u5b9e\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u53ea\u4e0d\u8fc7\u770b\u8d77\u6765\u662f\u4e00\u6837\u7684\u3002\u5e38\u89c1\u5199\u6cd5\u7684\u51fd\u6570\u7684\u610f\u4e49\u662f\u6307\uff0c\u5728\u533a\u95f4$(x,y)$**\u5728$(l,r)$\u7684\u90e8\u5206**\u589e\u52a0\u4e00\u4e2a\u503c$z$\uff0c\u5c11\u89c1\u5199\u6cd5\u5219\u662f\u6307**\u5728$(l,r)$\u7684\u8303\u56f4\u5185\u5bfb\u627e\u5230\u533a\u95f4$(x,y)$\uff0c\u5e76\u5bf9\u533a\u95f4\u589e\u52a0\u4e00\u4e2a\u503c$z$\u3002**\u7531\u6b64\u53ef\u89c1\uff0c\u867d\u7136\u4e24\u79cd\u5199\u6cd5\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u90a3\u5c31\u662f\u90fd\u80fd\u5b9e\u73b0\u628a\u533a\u95f4\u5212\u5206\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u5185\u5e76\u6253\u4e0a\u61d2\u6807\u8bb0\uff0c\u4f46\u662f\u4ece\u6839\u672c\u4e0a\u6765\u8bb2\uff0c\u4e24\u8005\u7684\u601d\u60f3\u8fc7\u7a0b\u662f\u4e0d\u540c\u7684\u3002\n\n\u4e0d\u8fc7\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u53d1\u73b0\u4e86\uff0c\u663e\u7136\u5e38\u89c1\u5199\u6cd5\u7684\u4ee3\u7801\u590d\u6742\u5ea6\u8981\u6bd4\u5c11\u89c1\u5199\u6cd5\u9ad8\u5f97\u591a\uff1b\u4e0d\u8fc7\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5c11\u89c1\u5199\u6cd5\u7684\u601d\u60f3\u8981\u66f4\u597d\u7406\u89e3\u4e00\u4e9b\u3002\u56e0\u6b64\uff0c\u5148\u5b66\u4e60\u5c11\u89c1\u5199\u6cd5\u7684\u601d\u8def\uff0c\u518d\u53bb\u5b66\u4e60\u5e38\u89c1\u5199\u6cd5\u7684\u6a21\u677f\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u662f\u6bd4\u8f83\u597d\u7684\u3002\n\n\u6700\u540e\uff0c\u65e2\u7136\u662f\u9898\u89e3\uff0c\u90a3\u6211\u5c31\u628a\u4e24\u79cd\u5199\u6cd5\u7684\u4ee3\u7801\u90fd\u5199\u5728\u4e0b\u9762\u5427\u3002\n```cpp\n//\u5e38\u89c1\u5199\u6cd5\n#include<bits/stdc++.h>\n#define LL long long\n#define ls(id) id<<1\n#define rs(id) id<<1|1//\u5077\u61d2\nusing namespace std;\ninline void read(int &x)//\u8bfb\u5165\u4f18\u5316\n{\n    bool w=x=0;\n    char ch=0;\n    while(!isdigit(ch))\n    {\n        w|=(ch=='-');\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        x=(x<<3)+(x<<1)+(ch^'0');\n        ch=getchar();\n    }\n    x=w?-x:x;\n}\nconst int N=1E5;\nstruct sgtr\n{\n    int l,r;\n    LL lazy,sum;\n}tr[N<<2]; //\u7ebf\u6bb5\u6811\nint n,m,num[N+1];\nint len(int id)//\u8fd4\u56deid\u4ee3\u8868\u7684\u533a\u95f4\u957f\u5ea6\n{\n    return tr[id].r-tr[id].l+1;\n}\nvoid build(int x,int y,int id)//\u5efa\u6811\n{\n    tr[id].l=x;\n    tr[id].r=y;\n    if(x==y)\n    {\n        tr[id].sum=num[x];\n        return;\n    }\n    int mid=(x+y)>>1;\n    build(x,mid,ls(id));\n    build(mid+1,y,rs(id));\n    tr[id].sum=tr[ls(id)].sum+tr[rs(id)].sum;\n}\nvoid down(int id)//\u6807\u8bb0\u4e0b\u4f20\n{\n    if(!tr[id].lazy)\n        return;\n    tr[ls(id)].lazy+=tr[id].lazy;\n    tr[rs(id)].lazy+=tr[id].lazy;\t\t\n    tr[ls(id)].sum+=tr[id].lazy*len(ls(id));\n    tr[rs(id)].sum+=tr[id].lazy*len(rs(id));\n    tr[id].lazy=0;\n}\nvoid change(int x,int y,int z,int id)//\u533a\u95f4\u4fee\u6539\n{\n    int ls=tr[id].l,rs=tr[id].r;\n    if(ls>=x&&rs<=y)\n    {\n        tr[id].lazy+=z;\n        tr[id].sum+=z*len(id);\n        return;\n    }\n    down(id);\n    int mid=(ls+rs)>>1;\n    if(x<=mid)\n        change(x,y,z,ls(id));\n    if(y>mid)\n        change(x,y,z,rs(id));\n    tr[id].sum=tr[ls(id)].sum+tr[rs(id)].sum;//push_up\t\t\n} \nLL addup(int x,int y,int id)//\u6c42\u548c\n{\n    int ls=tr[id].l,rs=tr[id].r;\n    if(ls>=x&&rs<=y)\n        return tr[id].sum;\n    down(id);\n    int mid=(ls+rs)>>1;\n    LL ans=0;\n    if(mid>=x)\n        ans+=addup(x,y,ls(id));\n    if(mid<y)\n        ans+=addup(x,y,rs(id));\n    return ans;\t\t\n}\nint main()\n{\n    read(n);\n    read(m);\n    for(int i=1;i<=n;i++)\n        read(num[i]);\n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n    {\n        int k,a,b,t;\n        read(k);\n        read(a);\n        read(b);\n        if(k==1)\n        {\n            read(t);\n            change(a,b,t,1);\n        }\n        else\n            printf(\"%lld\\n\",addup(a,b,1));\n    }\t\n    return 0;\n}\n```\n\u6ce8\u610f\uff0c\u4e0b\u9762\u7684\u5199\u6cd5\u7684\u4ee3\u7801\u957f\u5ea6\u662f\u6bd4\u4e0a\u9762\u5927\u7684\u591a\u7684\uff08$20$\u884c$^{+}$\uff09\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\ntemplate<class name>//\u4efb\u610f\u7c7b\u578b\u7684\u6a21\u677f\ninline void read(name &x)//\u8bfb\u5165\u4f18\u5316+\u6a21\u677f\n{\n    bool w=x=0;\n    char ch=0;\n    while(!isdigit(ch))\n    {\n        w|=(ch=='-');\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        x=(x<<3)+(x<<1)+(ch^'0');\n        ch=getchar();\n    }\n    x=w?-x:x;\n}\nconst int N=1E5;\nstruct sgtr\n{\n    int l,r;\n    LL lazy,sum;\n}tr[N<<2|1];//\u7ebf\u6bb5\u6811\nint n,m;\nLL num[N+1]; \nint ls(int x)//\u53e6\u5916\u4e00\u79cd\u5077\u61d2\u529e\u6cd5\n{\n    return x<<1;\n} \nint rs(int x)\n{\n    return x<<1|1;\n}\nvoid build(int x,int y,int id)//\u5efa\u6811\n{\n    tr[id].l=x;\n    tr[id].r=y;\n    if(x==y)\n    {\n        tr[id].sum=num[x];\n        return;\n    }\n    int mid=(x+y)>>1;\n    build(x,mid,ls(id));\n    build(mid+1,y,rs(id));\n    tr[id].sum=tr[ls(id)].sum+tr[rs(id)].sum;\n}\nvoid down(int id)//\u6807\u8bb0\u4e0b\u4f20\n{\n    if(!tr[id].lazy)\n        return; \n    tr[ls(id)].lazy+=tr[id].lazy;\n    tr[rs(id)].lazy+=tr[id].lazy;\n    tr[ls(id)].sum+=(tr[ls(id)].r-tr[ls(id)].l+1)*tr[id].lazy;  \n    tr[rs(id)].sum+=(tr[rs(id)].r-tr[rs(id)].l+1)*tr[id].lazy;\n    tr[id].lazy=0;\n}\nvoid upon(int id)//push_up\n{\n    tr[id].sum=tr[ls(id)].sum+tr[rs(id)].sum;\n}\nvoid change(int x,int y,int z,int id)//\u533a\u95f4\u4fee\u6539\n{\n    if(tr[id].l==x&&tr[id].r==y)\n    {\n        tr[id].lazy+=z;\n        tr[id].sum+=z*(y-x+1);\n        return;\n    }\n    down(id);\n    int mid=(tr[id].l+tr[id].r)>>1;\n    if(y<=mid)\n    {\n        change(x,y,z,ls(id));\n        upon(id);\n        return;\n    }\n    if(x>mid)\n    {\n        change(x,y,z,rs(id));\n        upon(id);\n        return;\n    }\n    change(x,mid,z,ls(id));//\u4fdd\u8bc1\u6240\u4fee\u6539\u7684\u533a\u95f4\u5728id\u7684\u7ba1\u8f96\u8303\u56f4\u4e4b\u5185\n    change(mid+1,y,z,rs(id));\n    upon(id);\n}\nLL addup(int x,int y,int id)//\u6c42\u548c\n{\n    if(tr[id].l==x&&tr[id].r==y)\n        return tr[id].sum;\n    down(id);\n    int mid=(tr[id].l+tr[id].r)>>1;\n    if(y<=mid)\n        return addup(x,y,ls(id));\n    if(x>mid)\n        return addup(x,y,rs(id));\n    return  addup(x,mid,ls(id))+addup(mid+1,y,rs(id));\n}\nint main()\n{\n    read(n);\n    read(m);\n    for(int i=1;i<=n;i++)\n        read(num[i]);\n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n    {\n        int k;\n        read(k);\n        if(k==1)\n        {\n            int a,b,c;\n            read(a);\n            read(b);\n            read(c);\n            change(a,b,c,1); \n        }\n        else\n        {\n            int a,b;\n            read(a);\n            read(b);\n            LL ans=addup(a,b,1);\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1554219773,
        "uid": 116293,
        "name": "SammyChu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u8bf7\u4f60\u7ef4\u62a4\u4e00\u4e2a\u6709n\u4e2a\u5143\u7d20\u7684\u6574\u6570\u5e8f\u5217\uff0c\u8981\u6c42\u652f\u6301**\u533a\u95f4\u67e5\u8be2&\u533a\u95f4\u4fee\u6539**\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c$1<=n<=10^5$\n\n## \u5206\u6790\n\n\u6b63\u5e38\u505a\u6cd5\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\uff0c\u4eca\u5929\u6211\u8981\u8bb2\u7684\u662f\u4e00\u79cd**\u66b4\u529b**\u505a\u6cd5\uff1a\u5206\u5757\n\n\u5206\u5757\u7684\u601d\u60f3\u5e76\u4e0d\u590d\u6742\uff0c\u5206\u5757\u628a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u533a\u95f4\u5206\u6210num\u6bb5\uff0c\u64cd\u4f5c\u65f6\u5982\u679c\u662f\u6574\u6bb5**\u7528\u6807\u8bb0\u4fee\u6539**\uff0c\u4e0d\u662f\u6574\u6bb5\u7684\u90e8\u5206**\u66b4\u529b\u4fee\u6539**\n\n\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5728\u8fd9\u9898\u4e2d\uff0c\u6bcf\u6bb5\u7684\u6807\u8bb0\u4fee\u6539\u662f$O(1)$\u7684\uff0c\u6700\u591a\u6709num\u6bb5\uff0c\u6574\u6bb5\u6807\u8bb0\u4fee\u6539\u6240\u7528\u65f6\u95f4\u662f$O(num)$\u7684\uff1b\u4e0d\u662f\u6574\u6bb5\u7684\u90e8\u5206\u6700\u591a\u6709$O(n/num)$\u4e2a\uff0c\u66b4\u529b\u4fee\u6539\u6240\u7528\u7684\u65f6\u95f4\u662f$O(n/num)$\u7684\uff1b\u6240\u4ee5\u603b\u65f6\u95f4\u662f$O(num+n/num)$\u3002\n\n\u6839\u636e*\u57fa\u672c\u4e0d\u7b49\u5f0f*\uff0cnum\u53d6$\\sqrt n$\u65f6\u8be5\u5f0f\u6709\u6700\u5c0f\u503c\uff1b\u6240\u4ee5num\u53d6$\\sqrt n$\u3002\n\n## \u5b9e\u73b0\n\n\u5206\u5757\u7684\u601d\u60f3\u5e76\u4e0d\u590d\u6742\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u7384\u5b66\uff0c\u4f46\u662f\u5b9e\u73b0\u8d77\u6765\u5e76\u4e0d\u65b9\u4fbf\uff08\u53ef\u80fd\u662f\u6211\u5f31\uff09\n\n\u5206\u5757\u7684\u4fee\u6539/\u67e5\u8be2\u90fd\u5206\u4e3a2\u90e8\u5206\uff1a\n1. \u6574\u5757\u7684\u4fee\u6539\n2. \u201c\u96f6\u5934\u201d\u7684\u4fee\u6539\n\n\u6574\u5757\u7684\u4fee\u6539\u662f\u5426\u7b80\u4fbf\uff1a`add[i] += val;`\n\u201c\u96f6\u5934\u201d\u7684\u4fee\u6539\u76f4\u63a5\u4fee\u6539\uff0c\u540c\u65f6\u4e0d\u8981\u5fd8\u4e86\u7ef4\u62a4\u6240\u5728\u5757\u7684\u4fe1\u606f\uff1a\n```c++\na[i] += val;\nsum[id[i]] += val;\n```\n\u4fee\u6539\u5c31\u6109\u5feb\u5730\u89e3\u51b3\u4e86\uff0c\u67e5\u8be2\u548c\u4fee\u6539\u5dee\u4e0d\u591a\u3002\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n\nconst int maxn = 100007;\nint n, m, num, id[maxn];\nlong long sum[1000], add[1000], a[maxn];\n\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tnum = sqrt(n);\n\tfor (int i = 1; i <= n; ++i){\n\t\tscanf(\"%lld\", &a[i]);\n\t\tid[i] = (i-1) / num;\n\t\tsum[id[i]] += a[i];\n\t}\n\n\twhile (m--){\n\t\tint d; scanf(\"%d\", &d);\n\t\tif (d==1){\n\t\t\tint x, y, C; scanf(\"%d%d%d\", &x, &y, &C);\n\t\t\tint Leftid = (x-1) / num + 1;\n\t\t\tint Rightid = (y-1) / num - 1;\n\n\t\t\tlong long res = 0;\n\t\t\tfor (int i = Leftid; i <= Rightid; ++i)\n\t\t\t\t add[i] += C;\n\n\t\t\tfor (int i = x; i <= Leftid * num; ++i)\n\t\t\t\ta[i] += C, sum[id[i]] += C;\n\n\t\t\tfor (int i = (Rightid+1)*num+1; i <= y; ++i)\n\t\t\t\ta[i] += C, sum[id[i]] += C;\n\t\t}else{\n\t\t\tint x, y; scanf(\"%d%d\", &x, &y);\n\t\t\tint Leftid = (x-1) / num + 1;\n\t\t\tint Rightid = (y-1) / num - 1;\n\n\t\t\tif (id[x] == id[y]){\n\t\t\t\tlong long res = 0;\n\t\t\t\tfor (int i = x; i <= y; ++i)\n\t\t\t\t\tres += a[i] + add[id[i]];\n\t\t\t\tprintf(\"%lld\\n\", res);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlong long res = 0;\n\t\t\tfor (int i = Leftid; i <= Rightid; ++i)\n\t\t\t\tres += sum[i] + add[i] * num;\n\n\t\t\tfor (int i = x; i <= Leftid * num; ++i)\n\t\t\t\tres += a[i] + add[Leftid-1];\n\n\t\t\tfor (int i = (Rightid+1)*num+1; i <= y; ++i)\n\t\t\t\tres += a[i] + add[Rightid+1];\n\n\t\t\tprintf(\"%lld\\n\", res);\n\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n\n",
        "postTime": 1538180495,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "luo3372\u7ebf\u6bb5\u6811\u6a21\u677f\u7684\u5206\u5757\u505a\u6cd5"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u6709\u4e00\u4e2apy\u9898\u89e3\u5462emmmmm\n\n\u521a\u5b66py\u4e24\u4e2a\u5c0f\u65f6\u8fc7\u6765\u4f5c\u6b7b\u7ed3\u679c\u5c45\u7136\u5bf9\u4e86\n\n\u4f46\u662f\u6bd5\u7adf\u8fd8\u662f\u6162\uff0cT\u4e863\u4e2a\u70b9\n\n\u4f46\u662f\u4ee3\u7801\u771f\u5fc3\u77ed\n\n\u8868\u793a\u6211\u5728\u8f93\u5165\u4e0a\u5c31\u5361\u4e8610\u5206\u949femmmm\n\n```python\na=[0]*1000000;tag=[0]*1000000;n=0;m=0;w=[0]*200000;io=[0]*200000;\n\ndef build(rot,lt,rt):\n\tif(lt==rt):\n\t\ta[rot]=w[lt];\n\t\treturn;\n\tmid=(lt+rt)>>1;\n\tbuild(rot<<1,lt,mid);build(rot<<1|1,mid+1,rt);\n\ta[rot]=a[rot<<1]+a[rot<<1|1];\n\ndef pushdown(rot,lt,rt):\n\tif(tag[rot]):\n\t\tt=tag[rot];tag[rot]=0;mid=(lt+rt)>>1;\n\t\ta[rot<<1]+=(mid-lt+1)*t;tag[rot<<1]+=t;\n\t\ta[rot<<1|1]+=(rt-mid)*t;tag[rot<<1|1]+=t;\n\t\ndef update(rot,lt,rt,lq,rq,w):\n\tif(lt>rq or rt<lq):return;\n\tif(lt>=lq and rt<=rq):\n\t\ta[rot]+=(rt-lt+1)*w;\n\t\ttag[rot]+=w;\n\t\treturn;\n\tpushdown(rot,lt,rt);\n\tmid=(lt+rt)>>1;\n\tupdate(rot<<1,lt,mid,lq,rq,w);\n\tupdate(rot<<1|1,mid+1,rt,lq,rq,w);\n\ta[rot]=a[rot<<1]+a[rot<<1|1];\n\t\ndef query(rot,lt,rt,lq,rq):\n\tif(lt>rq or rt<lq):return 0;\n\tif(lt>=lq and rt<=rq):return a[rot];\n\tpushdown(rot,lt,rt);\n\tmid=(lt+rt)>>1;\n\treturn query(rot<<1,lt,mid,lq,rq)+query(rot<<1|1,mid+1,rt,lq,rq);\n\t\nn,m=map(int,input().split());\ni=0;\nfor x in input().split():\n\ti=i+1;\n\tw[i]=int(x);\nbuild(1,1,n);\nfor i in range(1,m+1):\n\tj=0;\n\tfor x in input().split():\n\t\tj=j+1;\n\t\tio[j]=int(x);\n\tif(io[1]==1):update(1,1,n,io[2],io[3],io[4]);\n\telse:print(query(1,1,n,io[2],io[3]));\n```",
        "postTime": 1535116489,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u662f\u7ebf\u6bb5\u6811\uff0c\u800c\u4e14\u4e0d\u662f\u6700\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u6240\u4ee5\u4f60\u60f3\u505a\u8fd9\u9898\uff0c\u90a3\u5148\u8981\u5b66\u4f1a\n\n1.\u5355\u70b9\u589e\u52a0x\uff0c\u533a\u95f4\u6c42\u548c\n\n2.\u533a\u95f4\u589e\u52a0x\uff0c\u5355\u70b9\u6c42\u548c\n\n\u4ee5\u4e0a\u4e24\u4e2a\u624d\u662f\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u4f60\u5e94\u5728\u524d\u4e24\u9898\u7684\u57fa\u7840\u4e0a\u505a\n\n\u53e6\u5916\u518d\u8bf4\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u6211\u5b66\u4e60\u4e86\u7ebf\u6bb5\u6811\u540e\uff0c\u7528\u4e86\u6b63\u786e\u7684\u601d\u60f3\uff0c\u6253\u4e86\u4ee3\u7801\uff0c\u537470\u5206\n\n\u540e\u6765\u770b\u9898\u89e3\u624d\u77e5\u9053\u8981\u5f00long long \u3002\u3002\u3002\u3002\u3002\n\n\u4f46\u662f\u5f00\u4e86\u4e4b\u540e\u8fd8\u662f70........\u770b\u770b\u8f93\u51fa\u4e86\u8d1f\u6570\uff0c\u60f3\u5fc5\u662f\u7206\u53d8\u91cf\u4e86\uff0c\u4f46\u6211\u5f00long long\u4e86\u554a\n\n\u540e\u6765\u53d1\u73b0\u6211\u7528printf\u8f93\u51fa\u65f6\u6ca1\u5199long long\u7684\u683c\u5f0f............\n\n%I64d\u662fwindows  %lld\u662flinux\n\nc++\u8bed\u6cd5\u597d\u6df1\u5965\u554a\n\n------------------------------------------------------------------------------\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u533a\u95f4\u589e\u52a0\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u7528\u666e\u901a\u7684\u65b9\u6cd5\u90a3\u663e\u7136\u662f\u8d85\u65f6\u7684\n\n\u666e\u901a\u7684\u65b9\u6cd5\u5c31\u662f\u5728\u533a\u95f4\u589e\u52a0\u65f6\uff0c\u5927\u52301~n\u533a\u95f4\uff0c\u5c0f\u5230\u4e00\u4e2a\u70b9\uff0c\u90fd\u52a0\u4e0ax\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u8f93\u51fa\u533a\u95f4\u548c\u65f6\u4e0e\u57fa\u672c\u7ebf\u6bb5\u68111\u65f6\u4e00\u6837\u7684\uff0c\u4f46\u65f6\u5728\u533a\u95f4\u589e\u52a0\u65f6\u4f1a\u8d85\u65f6\n\n\u56e0\u4e3a\u57fa\u672c\u7ebf\u6bb5\u68111 \u5355\u70b9\u52a0\u503c\uff0c\u6211\u4eec\u53ea\u8981\u628a\u548c\u90a3\u4e2a\u70b9\u6709\u5173\u7684\u533a\u95f4\u52a0\u503c\u5c31\u53ef\u4ee5\u4e86\n\n\u800c\u533a\u95f4\u52a0\u65f6\u8981\u628a\u548c\u90a3\u4e2a\u533a\u95f4\u6709\u5173\u7684\u533a\u95f4\u5168\u90e8\u4ef7\u503c\uff0c\u4e0d\u7136\u4e0d\u914d\u5408\u8f93\u51fa\n\n\u8d85\u65f6\u4e86\u5c31\u8981\u4f18\u5316\u3002\n\n\u4f60\u60f3\u554a\uff0c\u867d\u7136x~y\u533a\u95f4\u8981\u589e\u52a0\u4e00\u4e2a\u503c\uff0c\u96be\u9053\u8fd9\u4e2a\u533a\u95f4\u5c31\u4e00\u5b9a\u8981\u7528\u5417\uff1f\n\n\u5982\u679c\u533a\u95f4\u503c\u589e\u52a0\u4e86\u4f46\u540e\u6765\u6ca1\u6709\u8be2\u95ee\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u4e3a\u4ec0\u4e48\u8981\u589e\u52a0\u5462\uff1f\n\n\u6b63\u5982\u80cc\u53e4\u6587\uff0c\u5982\u679c\u8003\u8bd5\u4e0d\u8003\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u80cc\u5462\uff1f\n\n\u6240\u4ee5lazy\u601d\u60f3\u5c31\u600e\u4e48\u4ea7\u751f\u4e86\u3002\n\nlazy\uff0c\u5c31\u662f\u61d2\u561b\uff0c\u5c31\u662f\u5148\u4e0d\u88ab\u53e4\u6587\uff0c\u7b49\u5230\u8003\u8bd5\u8981\u8003\u4e86\u518d\u53bb\u80cc\u561b\uff1b\n\n\u5148\u4e0d\u589e\u52a0\u533a\u95f4\uff0c\u7b49\u5230\u8be2\u95ee\u65f6\u5728\u53bb\u589e\u52a0\u561b\uff1b\n\n\n\u6211\u4eec\u53ef\u4ee5\u641e\u4e00\u4e2av\u6570\u7ec4\uff0c\u4e13\u95e8\u628a\u7f16\u53f7\u4e3anum\u7684\u533a\u95f4\u8981\u52a0\u7684\u503c\u8bb0\u5f55\u4e0b\u6765\n\n\u5982\u679c\u8981\u7528\u4e86\uff0c\u518d\u7ed9\u7ebf\u6bb5\u6811num\u52a0\u4e0av[num]\u7684\u503c\uff0c\u518d\u628av[num]\u4f20\u7ed9v[num\\*2]\u548cv[num\\*2+1];\u7136\u540ev[num]\u6e05\u96f6\n\n\u201c\u5982\u679c\u8981\u7528\u4e86\u201d\u8fd9\u4e00\u6b65\u7528\u4e00\u4e2aclean\u51fd\u6570\u5b9e\u73b0\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define LL long long\nusing namespace std;\nstruct cs{\n    LL ll,rr,vv;\n}T[824290];\nLL a[200005],v[824290];\nLL n,m,x,y,z,sum,N;\nvoid clean(LL x){\n    if(!v[x])return;v[x]\u4e3a0\u4e0d\u7528\u641e \n    T[x].vv+=(T[x].rr-T[x].ll+1)*v[x];\u6574\u4e2a\u533a\u95f4\u52a0\u503c \n    if(T[x].ll!=T[x].rr){\n        v[x*2]+=v[x];\u628av[x]\u4f20\u7ed9\u5b50\u6570\uff0c\u56e0\u4e3a\u6574\u4e2a\u533a\u95f4\u90fd\u8981\u52a0\uff0c\u90a3\u4e48\u5b83\u5b50\u6811\u7684\u6574\u4e2a\u533a\u95f4\u80af\u5b9a\u8981\u52a0 \n        v[x*2+1]+=v[x];\n    }\n    v[x]=0;\u52a0\u5b8c\u4e86\uff0c\u4e0b\u6b21\u4e0d\u7528\u52a0\u4e86 \n}\nvoid maketree(LL x,LL y,LL num){\n    T[num].ll=x;\n    T[num].rr=y;\n    if(x==y){\n        T[num].vv=a[x]; return;\n    }\n    maketree(x,(x+y)/2,num*2);\n    maketree((x+y)/2+1,y,num*2+1);\n    T[num].vv=T[num*2].vv+T[num*2+1].vv;\n}\nvoid inc(LL x,LL y,LL z,LL num){\n    clean(num);\u5982\u679c\u8981\u7528T[num]\u4e86\uff0c\u5148clean\u4e00\u4e0b \n    if(x<=T[num].ll&&T[num].rr<=y){\u5982\u679c\u6574\u4e2a\u533a\u95f4\u90fd\u8981\u52a0\u7684\u8bdd\uff0c\u90a3\u5148\u5b58\u4e0b\u6765 \n        v[num]+=z; return;\n    }\n    T[num].vv+=(min(y,T[num].rr)-max(x,T[num].ll)+1)*z;\u53ea\u662f\u533a\u95f4\u7684\u4e00\u90e8\u5206\u8981\u52a0\u7684\u8bdd\uff0c\u90a3\u53ea\u80fd\u5148\u52a0\u4e00\u90e8\u5206 \n    if(T[num].ll==T[num].rr) return;\n    int mid=(T[num].ll+T[num].rr)/2;\n    if(x>mid)inc(x,y,z,num*2+1);else\n    if(y<=mid)inc(x,y,z,num*2);else{\n        inc(x,y,z,num*2);\n        inc(x,y,z,num*2+1);\n    }\n}\nvoid out(int LL,int LL,LL num){\n    clean(num);\u5982\u679c\u8981\u7528T[num]\u4e86\uff0c\u5148clean\u4e00\u4e0b \n    if(x<=T[num].ll&&T[num].rr<=y){\n        sum+=T[num].vv; return;\n    }\n    int mid=(T[num].ll+T[num].rr)/2;\n    if(x>mid)out(x,y,num*2+1);else\n    if(y<=mid)out(x,y,num*2);else{\n        out(x,y,num*2);\n        out(x,y,num*2+1);\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&N);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    maketree(1,n,1);\n    for(int i=1;i<=N;i++){\n        scanf(\"%d%d%d\",&m,&x,&y);\n        if(m==1){\n            scanf(\"%d\",&z);\n            inc(x,y,z,1);\n        }\n        else{\n            sum=0;\n            out(x,y,1);\n            printf(\"%lld\\n\",sum);//\u7528cout\u8f93\u51fa\u4ec0\u4e48\u4e8b\u90fd\u6ca1\u6709 \n        }\n    }\n}\n```\n\u6211\u4eec\u518d\u6765\u8ba8\u8bba\u8ba8\u8bba\u5173\u4e8e\u6570\u7ec4\u7684\u95ee\u9898\n\u9996\u5148\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e0e\u6ee1\u4e8c\u53c9\u6811\u7684\u56fe\n\n\u8bfb\u5165n\u4e2a\u6570\uff0c\u8fd9\u68f5\u6811\u5b50\u8282\u70b9\u5fc5\u7136\u662fn\u4e2a\n\n\u800c\u6570\u7ec4\u5927\u5c0f\u5c31\u662f\u6574\u4e2a\u6811\u7684\u8282\u70b9\u4e2a\u6570\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u627e\u5230\u4e00\u4e2ak\n\n\u7528k\u53bb\u641e\u4e00\u4e2a\u6ee1\u4e8c\u53c9\u6811\n\n\u4f7f2^k>=n;\n\n\u5b66\u8fc7\u4e8c\u53c9\u6811\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u6ee1\u4e8c\u53c9\u6811\u53f6\u8282\u70b9\u662fm\u4e2a\uff0c\u8282\u70b9\u662fm\\*2-1\u4e2a\n\n\u6240\u4ee5\u6570\u7ec4\u5f002^k\\*2\u5c31\u597d\u4e86\n\n\u5982n=100000\n\n2^17=131072\n\n\u6240\u4ee5\u6570\u7ec4\u5f00\u5230131072\\*2=262144\u5c31\u597d\u4e86\n\n\u6b22\u8fce\u8ba8\u8bba\n",
        "postTime": 1484276185,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "//\uff01\uff01\u521d\u5b66\u8005\u9002\u7528\uff01\uff01\u4e3b\u8981\u8981\u6ce8\u610f\u6807\u8bb0\u7684\u5e94\u7528\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u5347\u901f\u5ea6\uff0c\u4e0d\u4e86\u89e3\u7684\u53ef\u4ee5\u53bb\u767e\u5ea6\u61d2\u6807\u8bb0/\u60f0\u6027\u6807\u8bb0\u3002\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\n    \n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\ntypedef long long Lovelive;//\u636e\u8bf4\u8fd9\u6837typedef long long\u4f1arp++\u3002>.< \nconst int maxx = (100000<<2)+10;\nint x,y,n,m,Flag,k;\nLovelive a[maxx],Add[maxx];//Add\u4ee3\u8868\u6bcf\u4e2a\u70b9\u7684\u6807\u8bb0 \nstruct Node\n{\n    int Left,Right;\n    Lovelive sum; \n}Node[maxx];//\u5b58\u6bcf\u4e2a\u7ed3\u70b9\u5de6\u53f3\u7aef\u70b9\u4ee5\u53ca\u503c\u3002 \nvoid Pushdown(int i,int l,int r);//\u4e0b\u653e\u6807\u8bb0 \nvoid Build_tree(int i,int l,int r);//\u5efa\u6811 \nvoid Update(int i,int l,int r,Lovelive k);//\u533a\u95f4\u4fee\u6539 \nLovelive Query(int i,int l,int r);//\u533a\u95f4\u67e5\u8be2 \n//void DeBug();\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&a[i]);\n    Build_tree(1,1,n);//\u8bb0\u5f97\u5efa\u6811 \n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&Flag);\n        if(Flag==1)\n        {\n            scanf(\"%d%d%lld\",&x,&y,&k);\n            Update(1,x,y,k);\n        }\n        if(Flag==2)\n        {\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%lld\\n\",Query(1,x,y));\n        }\n    }\n    return 0;\n}\nvoid Build_tree(int i,int l,int r)\n{\n    Node[i].Left = l;\n    Node[i].Right = r;\n    if(l==r) \n    {\n        Node[i].sum = a[l];\n        return;\n```\n}//\u5982\u679c\u662f\u53f6\u7ed3\u70b9\n    \n\n\n    \n    \n```cpp\n    int mid = (l+r) >> 1;\n    Build_tree( i<<1 , l , mid );\n    Build_tree( (i<<1)|1 , mid+1 , r );\n    Node[i].sum = Node[i<<1].sum+Node[(i<<1)+1].sum;\n}\nvoid Pushdown(int i)\n{\n    int lc = i<<1,rc = (i<<1)+1;\n    Node[lc].sum+=(Node[lc].Right-Node[lc].Left+1)*Add[i];\n    Node[rc].sum+=(Node[rc].Right-Node[rc].Left+1)*Add[i];\n    Add[lc]+=Add[i];\n    Add[rc]+=Add[i];\n    Add[i]=0;//\u4e0b\u653e\u6807\u8bb0 \n}\nvoid Update(int i,int x,int y,Lovelive k)\n{\n    int lc = i<<1,rc = (i<<1)|1;\n    if(Node[i].Left>y||Node[i].Right<x)\n        return;//\u5982\u679c\u662f\u5b8c\u5168\u65e0\u5173\u533a\u95f4 \n    if(x<=Node[i].Left&&Node[i].Right<=y)\n    {\n        Node[i].sum+=(Node[i].Right-Node[i].Left+1)*k;//\u52a0\u5230\u8fd9\u5c31\u4e0d\u5f80\u4e0b\u52a0\u4e86 \n        Add[i]+=k;//\u5b58\u6807\u8bb0 \n```\n}//\u5982\u679c\u662f\u5b8c\u5168\u6709\u5173\u533a\u95f4\n    \n```cpp\n    else\n    {\n        if(Add[i]) Pushdown(i);//\u4e0b\u653e\u6807\u8bb0 \n        Update(lc,x,y,k);\n        Update(rc,x,y,k);\n        Node[i].sum=Node[lc].sum+Node[rc].sum;\n```\n}//\u4e8c\u5206\u6dfb\u52a0\n\n```cpp\n}\nLovelive Query(int i,int x,int y)\n{\n    int lc = i<<1,rc = (i<<1)+1;\n    if(x<=Node[i].Left&&Node[i].Right<=y)\n        return Node[i].sum;\n    if(Node[i].Left>y||Node[i].Right<x)\n        return 0;\n    if(Add[i]) Pushdown(i);//\u4e0b\u653e\u6807\u8bb0 \n    return Query(lc,x,y)+Query(rc,x,y);\n}\n```",
        "postTime": 1483602781,
        "uid": 21673,
        "name": "Sor4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u5168\u662f\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u554a\uff0c\u6211\u6765\u4e2a\u4e0d\u4e00\u6837\u7684\n\n\u8fd9\u9898\u6211\u5148\u6253\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u8fc7\u4e86\n\n\u7136\u540e\u6211\u6253\u4e86\u4e2a\u5206\u5757\uff0c\u5c45\u7136\u4e5f\u6ee1\u5206\n\n\u65f6\u95f4\u590d\u6742\u5ea6n^1.5\uff0c\u4e0d\u8fc7\u8dd1\u8d77\u6765\u53ea\u6bd4\u7ebf\u6bb5\u6811\u6162\u4e00\u500d\uff08\u6700\u5927\u7684\u70b9\u53ea\u7528\u4e86200+ms\uff09\n\n\u5206\u5757\u5e38\u6570\u5c0f\u5f88\u591a\n\n\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8c03\u8bd5\u5bb9\u6613\u5f97\u591a\n\n```cpp\nprogram rrr(input,output);\nvar\n  a:array[0..100010]of int64;\n  idx:array[0..100010]of longint;    //idx[i]\u8868\u793aa[i]\u6240\u5c5e\u7684\u5206\u5757\n  sum,delta:array[0..1000]of int64;   //sum\u662f\u5206\u5757\u548c\uff0cdelta\u662f\u5206\u5757\u589e\u91cf\n  i,j,k,t,x,y,n,m,num,head,tail,tot:longint;\n  d,ans:int64;\nbegin\n   //assign(input,'r.in');assign(output,'r.out');reset(input);rewrite(output);\n   readln(n,m);\n   num:=trunc(sqrt(n));\n   j:=0;k:=1;\n   fillchar(sum,sizeof(sum),0);\n   fillchar(delta,sizeof(delta),0);\n   for i:=1 to n do\n       begin\n          read(a[i]);\n          inc(j);\n          if j>num then begin j:=1;inc(k); end;\n          idx[i]:=k;sum[k]:=sum[k]+a[i];\n       end;\n   tot:=k;\n   for i:=1 to m do\n       begin\n          read(t);\n          if t=1 then\n             begin\n                read(x,y,d);\n                if idx[x-1]=idx[x] then head:=idx[x]+1 else head:=idx[x];\n                if idx[y]=idx[y+1] then tail:=idx[y]-1 else tail:=idx[y];\n                for j:=head to tail do\n                    begin\n                       if j=tot then sum[j]:=sum[j]+d*(n-num*(tot-1)) else sum[j]:=sum[j]+d*num;\n                       delta[j]:=delta[j]+d;\n                    end;\n                if (head<>idx[x]) or (idx[x]=idx[y]) and (idx[y]<>tail) then\n                   begin\n                      j:=x;\n                      while (idx[j]=idx[x]) and (j<=y) do\n                          begin\n                             a[j]:=a[j]+d;\n                             sum[idx[x]]:=sum[idx[x]]+d;\n                             inc(j);\n                          end;\n                   end;\n                if (tail<>idx[y]) and (idx[y]<>idx[x]) then\n                    begin\n                       j:=y;\n                       while idx[j]=idx[y] do\n                           begin\n                              a[j]:=a[j]+d;\n                              sum[idx[y]]:=sum[idx[y]]+d;\n                              dec(j);\n                           end;\n                    end;\n             end\n          else\n              begin\n                read(x,y);\n                if idx[x-1]=idx[x] then head:=idx[x]+1 else head:=idx[x];\n                if idx[y]=idx[y+1] then tail:=idx[y]-1 else tail:=idx[y];\n                ans:=0;\n                for j:=head to tail do ans:=ans+sum[j];\n                if (head<>idx[x]) or (idx[x]=idx[y]) and (idx[y]<>tail) then\n                   begin\n                      j:=x;\n                      while (idx[j]=idx[x]) and (j<=y) do\n                          begin\n                             ans:=ans+a[j]+delta[idx[x]];\n                             inc(j);\n                          end;\n                   end;\n                if (tail<>idx[y]) and (idx[y]<>idx[x]) then\n                    begin\n                       j:=y;\n                       while idx[j]=idx[y] do\n                           begin\n                              ans:=ans+a[j]+delta[idx[y]];\n                              dec(j);\n                           end;\n                    end;\n                writeln(ans);\n              end;\n        end;\n   //close(input);close(output);\nend.\n\n```",
        "postTime": 1482662918,
        "uid": 28023,
        "name": "McGrady",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8868\u793a\u7528\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u65e2\u597d\u5199\u53c8\u5feb\u3002\u5f53\u7136\u6811\u72b6\u6570\u7ec4\u7684\u9002\u7528\u8303\u56f4\u5c0f\u5f88\u591a\uff0c\u4e0d\u8fc7\u5728\u67d0\u4e9b\u7279\u6b8a\u95ee\u9898\u4e0a\u8fd8\u662f\u5f88\u597d\u7528\u7684\u3002\n\n\u9996\u5148\u5c06\u6570\u5217\u5dee\u5206\u3002\u8bbe\u539f\u6570\u5217\u662fa\\_1,a\\_2\\cdots a\\_n\uff0c\u5b9a\u4e49d\\_i=a\\_i-a\\_{i-1}\u3002\u5219\u5728\u533a\u95f4[x,y]\u4e0a\u52a0k\u76f8\u5f53\u4e8ed\\_x+=k,d\\_{y+1}-=k\u3002\n\n\u8003\u8651\u4f4d\u7f6ep\u7684\u524d\u7f00\u548c\u3002\u5bf9\u4e8e1\\leq i\\leq p\uff0cd\\_i\u5bf9\u524d\u7f00\u548c\u7684\u8d21\u732e\u4e3ad\\_i\\times(p-i+1)\uff0c\u79fb\u9879\u6709(p+1)\\times d\\_i-i\\times d\\_i\u3002\u6240\u4ee5\u6211\u4eec\u5bf9d\\_i\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u5bf9i\\times d\\_i\u7ef4\u62a4\u524d\u7f00\u548c\u3002\u8fd9\u4e24\u4e2a\u90fd\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b8c\u6210\u3002\n\n\u8bb0\u5f97\u52a0long long\n\n```cpp\n#include<cstdio>\ntypedef long long ll;\nconst int maxn=100005;\nll d[maxn],id[maxn],s[maxn],k;\nint n,m,c,x,y;\nvoid add(ll*b,int p,ll v){for(;p<=n;p+=p&-p)b[p]+=v;}\nll ask(ll*b,int p)\n{\n    ll a=0;\n    for(;p;p-=p&-p)a+=b[p];\n    return a;\n}\nll ask(int p){return s[p]+(p+1)*ask(d,p)-ask(id,p);}\nvoid add(int x,int y,ll v)\n{\n    add(d,x,v);add(d,y+1,-v);\n    add(id,x,v*x);add(id,y+1,-v*(y+1));\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=n;++i)scanf(\"%lld\",s+i),s[i]+=s[i-1];\n    while(m--)\n    {\n        scanf(\"%d%d%d\",&c,&x,&y);\n        if(c==1)scanf(\"%lld\",&k),add(x,y,k);\n        else printf(\"%lld\\n\",ask(y)-ask(x-1));\n    }\n    return 0;\n}\n```",
        "postTime": 1480578175,
        "uid": 13180,
        "name": "amazingOZR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6211\u7684zkw\u795e\u5947\u7684\u5361\u8fdb\u4e86108ms\u3002\u3002\n\n\u4e0d\u8fc7\u7406\u8bba\u4e0azkw\u786e\u5b9e\u662f\u4f1a\u6bd4\u6811\u72b6\u6570\u7ec4\u5feb\u4e00\u70b9\u70b9\u3002\n\nzkw\u80fd\u89e3\u51b3\u53ef\u4ee5\u4e0d\u4e0b\u653e\u7684\uff0c\u81ea\u4e0b\u5411\u4e0a\u66f4\u65b0\u7684\u6807\u8bb0\uff0c\n\n\u4f46\u5982\u679c\u518d\u6709\u533a\u95f4\u4e58\u7684\u8bdd\uff0c\u4f3c\u4e4e\u5fc5\u987b\u8981\u5148\u4e0b\u653e\u6807\u8bb0\uff0c\u6240\u4ee5\u7528\u4e0d\u4e86zkw\u3002\n\n(\u8981\u662f\u6709\u5927\u795e\u4f1a\u4e00\u5b9a\u8981\u544a\u8bc9\u6211\u554a)\n\n\u4e0d\u4f1a\u7684\u540c\u5b66\u81ea\u5df1\u753b\u56fe\uff0c\u5bf9\u7740\u4ee3\u7801\u53c2\u900f\u5427\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nconst int max_n=100000+5;\n\nlong long a[max_n*3],s[max_n*3];int d,sz;\n//a\u662f\u52a0\u6cd5\u6807\u8bb0\uff0cs\u662f\u533a\u95f4\u548c \n#define upd(l) s[l]=s[l<<1]+s[l<<1|1]+(a[l]<<sz);\n#define _add(l) {a[l]+=x;s[l]+=(x<<sz);}\n#define SL (l^1)\n#define SR (r^1)\nlong long x;\nvoid add(int l,int r)\n{\n    l+=d;r+=d;\n    \n    sz=0;\n    _add(l)\n    if (l!=r)\n    {\n        _add(r)\n        while (SL!=r)\n        {\n            if (!(l&1)) _add(SL)\n            if (r&1)    _add(SR)\n            ++sz;\n            l>>=1;upd(l);\n            r>>=1;upd(r);\n        }\n    }\n    while (l>>=1)\n    {\n        ++sz;upd(l);\n    }\n}\n\nint numl,numr;\nlong long qiu(int l,int r)\n{\n     l+=d;r+=d;\n    x=s[l];numl=sz=1;\n    if (l!=r)\n    {\n        x+=s[r];numr=1;\n        while (SL!=r)\n        {\n            if (!(l&1)) { x+=s[SL]; numl+=sz; }\n            if (r&1) {  x+=s[SR]; numr+=sz; }\n            sz<<=1;\n            l>>=1;r>>=1;\n            x+=a[l]*numl+a[r]*numr;\n        }\n        numl+=numr;\n    }\n    while (l>>=1) x+=a[l]*numl;\n    \n    return x;\n}\n\nconst int top=10000000;\nchar ch[top];int now_r;\nvoid read(int &x)\n{\n    while (ch[now_r]<48) ++now_r;\n    for (x=ch[now_r]-48;ch[++now_r]>=48;)\n     x=(x<<1)+(x<<3)+ch[now_r]-48;\n}\nvoid readl(long long &x)\n{\n    while (ch[now_r]<48) ++now_r;\n    for (x=ch[now_r]-48;ch[++now_r]>=48;)\n     x=(x<<1)+(x<<3)+ch[now_r]-48;\n}\n\nint main()\n{ //freopen(\"1.in\",\"r\",stdin);\n  fread(ch,1,top,stdin);\n    int n,m,i;\n    read(n);read(m);\n    for (d=1;d<n;d<<=1);d-=1;\n    \n    for (i=1;i<=n;++i) readl(s[d+i]);\n    for (i=(n+d)>>1;i;--i) s[i]=s[i<<1]+s[i<<1|1];\n    //\u521d\u59cb\u5316 \n    \n    int c,l,r;\n    for (i=1;i<=m;++i)\n    {\n        read(c);read(l);read(r);\n        if (c==1)\n        {\n            readl(x);\n            add(l,r);\n        }\n        else printf(\"%lld\\n\",qiu(l,r));\n    }\n}\n```",
        "postTime": 1479340361,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "###\u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\n\n\u4f5c\u4e3a\u4f17\u591a\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u80a1\u6e05\uff08hong\uff09\u6d41\uff08shui\uff09\uff0c\u9ed8\u9ed8\u5730\u8ba9\u7ebf\u6bb5\u6811\u4f7f\u7528\u8005+1......\n\n\u5176\u5b9e\u5c31\u50cf\u535a\u5ba2\u91cc\u8bf4\u7684\uff0c\u6811\u72b6\u6570\u7ec4\u5728\u533a\u95f4\u6c42\u548c\u95ee\u9898\u4e0a\u6709\u5f88\u9ad8\u7684\u6548\u7387\uff0c\u5c24\u5176\u5728\u975e\u5e38\u56f0\u96be\u7684\u6bd4\u8d5b\u4e2d\uff08\u6570\u636e\u91cf\u5927\uff0c\u5bf9\u65f6\u95f4\u9650\u5236\u5f88\u4e25\u683c\u7684\u6bd4\u8d5b\uff09\u80fd\u53d1\u6325\u975e\u5e38\u5927\u7684\u4f5c\u7528\uff0c\u5176\u5404\u79cd\u590d\u6742\u5ea6\u90fd\u8981\u6bd4\u7ebf\u6bb5\u6811\u4f4e\u5f88\u591a\uff0c\u800c\u4e14\u5176\u4ee3\u7801\u7b80\u6d01\u4f18\u7f8e\u3002\n\n\u6211\u662f\u6df1\u53d7\u5468\u56f4\u4eba\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u770b\u89c1\u65e0\u6570\u6572\u7ebf\u6bb5\u6811\u7684\u7ae5\u978b\u56e0\u4e3a\u51e0\u4e2a\u5c0f\u95ee\u9898\u8c03\u8bd5\u4e86\u4e00\u6574\u5929\u3002\u3002\u3002\n\n```cpp\n<http://blog.csdn.net/tlonline/article/details/47010665>\n#include<iostream>\n#include<cstdio>\n#define maxn 200000+5\n#define ll long long\nusing namespace std;\nll m,n,k,a[maxn],c1[maxn],c2[maxn];\nll lowbit(ll x)\n{\n    return x&(-x);\n}\nvoid add(ll *q,ll x,ll val)\n{\n    for(ll i=x;i<=n;i+=lowbit(i)) q[i]+=val;\n}\nll getsum(ll *q,ll x)\n{\n    ll ans=0;\n    for(ll i=x;i>=1;i-=lowbit(i)) ans+=q[i];\n    return ans;\n}\nll sum(ll l,ll r)\n{\n    ll sum1=(l-1)*getsum(c1,l-1)-getsum(c2,l-1);\n    ll sum2=r*getsum(c1,r)-getsum(c2,r);\n    return sum2-sum1;\n}\nint main()\n{\n    cin>>n>>m;\n    for(ll i=1;i<=n;++i)\n    {\n        cin>>a[i];\n        add(c1,i,a[i]-a[i-1]);\n        add(c2,i,(i-1)*(a[i]-a[i-1]));\n    }\n    for(ll i=1,l,r,v;i<=m;++i)\n    {\n        cin>>k;\n        if(k==1)\n        {\n            cin>>l>>r>>v;\n            add(c1,l,v);add(c1,r+1,-v);\n            add(c2,l,v*(l-1));add(c2,r+1,-v*r);\n        }\n        else if(k==2)\n        {\n            cin>>l>>r;\n            cout<<sum(l,r)<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1478771218,
        "uid": 11295,
        "name": "2015wanghongyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4$a$\uff0c\u8981\u6c42\u5b9e\u73b0\u5bf9\u6570\u7ec4\u8fdb\u884c\u4e24\u7c7b\u64cd\u4f5c\uff1a\n\n\u7b2c\u4e00\u7c7b\uff0c\u7ed9\u51fa\u533a\u95f4$[x,y]$\uff0c\u5bf9\u533a\u95f4\u5185\u7684\u6bcf\u4e2a$a_i$\u52a0\u4e0a$z$/\u4e58$z$\u7b49\n\n\u7b2c\u4e8c\u7c7b\uff0c\u7ed9\u51fa\u533a\u95f4$[x,y]$\uff0c\u67e5\u8be2\u533a\u95f4\u5185\u6240\u6709\u5143\u7d20\u7684\u548c/\u6700\u5927\u503c/\u6700\u5c0f\u503c\u7b49\n\n\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5904\u7406\uff0c\u6bcf\u6b21\u5904\u7406\u590d\u6742\u5ea6$O(n)$\uff0c$n$\u6b21\u5904\u7406\u590d\u6742\u5ea6\u5c31\u662f$O(n^2)$\uff0c\u5982\u679c$n$\u7684\u8303\u56f4\u6269\u5927\u5230$1e5$\u4e43\u81f3$1e6$\uff0c\u8fd9\u6837\u7684\u901f\u5ea6\u663e\u7136\u662f\u6211\u4eec\u65e0\u6cd5\u627f\u53d7\u7684\n\n\u8fd8\u6709\u6ca1\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u529e\u6cd5\u5462\uff1f\n\n\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5462\uff1f\u5bf9\u4e8e\u533a\u95f4\u52a0\u4ee5\u53ca\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5199\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4eca\u5929\u6211\u4eec\u7528\u4e00\u79cd\u65b0\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u2014\u2014\n\n<center>\n <font size=\"6\" >\u7ebf\u6bb5\u6811\uff01\uff01</font>   \n</center>\n\n\u6240\u8c13\u7ebf\u6bb5\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u7531\u4e00\u6761\u6761\u7ebf\u6bb5\u7ec4\u6210\u7684\u6811\u3002\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6211\u4eec\u6765\u770b\u56fe\u3002\n\n![](https://i.loli.net/2019/09/21/8ZGMzeY14iLN2u3.png)\n\n\u8fd9\u4e2a\u56fe\u4ece\u4e0b\u5f80\u4e0a\u770b\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u521d\u7684\u4e00\u4e2a\u4e00\u4e2a\u70b9\u4e0d\u65ad\u5730\u4e24\u4e24\u5408\u5e76\u6700\u7ec8\u53d8\u6210\u4e86\u4e00\u6761\u957f\u7ebf\u6bb5\uff0c\u800c\u5982\u679c\u53ea\u6ce8\u610f\u7ea2\u7ebf\u7684\u8bdd\uff0c\u660e\u663e\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u800c\u4e14\u597d\u50cf\u5e94\u8be5\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u8fd9\u6837\u7684\u7ed3\u6784\u6765\u5b58\u50a8\u533a\u95f4\u548c\uff0c\u5f53\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u770b\u5f53\u524d\u533a\u95f4\u662f\u5426\u5c5e\u4e8e\u67e5\u8be2\u533a\u95f4\uff0c\u5c5e\u4e8e\u5219\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u82e5\u662f\u4e0d\u5c5e\u4e8e\uff0c\u6211\u4eec\u5c31\u67e5\u770b\u5b83\u7684\u5de6\u53f3\u533a\u95f4\uff0c\u5bf9\u4e8e\u8ddf\u67e5\u8be2\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22\uff0c\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u6700\u5dee\u662f$\\lg n$\u7684\uff08\u8bc1\u660e\u5c31\u7701\u7565\u4e86\uff0c\u5927\u5bb6\u4e5f\u77e5\u9053\uff0c\u6211\u4e0d\u64c5\u957f\u8bc1\u660e233\uff09\n\n\u90a3\u4e48\u8fd9\u6837\u7684\u4e00\u68f5\u6811\u7684\u521b\u5efa\u6211\u4eec\u5e94\u5f53\u5982\u4f55\u901a\u8fc7\u4ee3\u7801\u6765\u5b9e\u73b0\u5462\uff1f\u590d\u6742\u5ea6\uff1a$O(n)$\n\n```cpp\nvoid build(int p,int l,int r){ //p\u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\uff0cl,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u8bb0\u5f55\u7684\u662f\u533a\u95f4[l,r]\u7684\u4fe1\u606f\n\tif(l==r){t[p]=a[l];return;}  //\u5982\u679c\u533a\u95f4\u957f\u5ea6\u4e3a1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u6570\u7ec4\u7684\u503c\u5b58\u8fdb\u6765\uff0c\u7136\u540e\u8fd4\u56de\n\tint m=l+r>>1;  //\u8fd9\u91cc\u7684m\u662f\u4e8c\u5206\u6240\u7528\uff0c\u770b\u56fe\u5e94\u8be5\u4e5f\u80fd\u660e\u767d\n\tbuild(lc,l,m);build(rc,m+1,r);  //\u8fd9\u91cc\u7684lc\u548crc\u4ee3\u8868\u7684\u662fp\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u8ba9p\u7684\u5de6\u5b50\u8282\u70b9\u7f16\u53f7\u4e3ap\u76842\u500d\uff0c\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e3ap\u76842\u500d+1\u3002\u8fd9\u91cc\u7684\u64cd\u4f5c\u5c31\u662f\u521b\u5efa\u5de6\u53f3\u5b50\u6811\n\tpushup(p);  //\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u6839\u636e\u5de6\u53f3\u5b50\u6811\u6765\u4fee\u6539\u5f53\u524d\u8282\u70b9\u4fe1\u606f\u7684\u51fd\u6570\uff0c\u6839\u636e\u9898\u76ee\u8981\u6c42\u7684\u4e0d\u540c\uff0c\u5199\u6cd5\u4e5f\u4e0d\u540c\uff0c\u6211\u4eec\u4e0b\u9762\u4f1a\u63d0\u5230\uff0c\u8fd9\u91cc\u5148\u628a\u5b83\u5f53\u505a\u4e00\u4e2a\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u7cfb\u7edf\u81ea\u5e26\u51fd\u6570\u5373\u53ef\n}\n```\n\n<center>\uff08\u77ed\u77ed\u7684\u51e0\u884c\u4ee3\u7801\uff0c\u6d53\u7f29\u4e86\u5927\u91cf\u7684\u7cbe\u534e\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8ba4\u771f\u9605\u8bfb\u6211\u7684\u6ce8\u91ca\uff0c\u4e0d\u7136\u53ef\u80fd\u4e0d\u597d\u7406\u89e3\uff09</center>\n\n\u8fd9\u68f5\u6811\u88ab\u521b\u5efa\u597d\u4e86\uff0c\u67e5\u8be2\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u4f46\u662f\u4fee\u6539\u64cd\u4f5c\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6309\u7167\u521b\u5efa\u7684\u65b9\u6cd5\u6765\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(n)$\uff0c\u8fd9\u5c31\u53c8\u6210$n^2$\u7b97\u6cd5\u4e86\uff0c\u8d39\u534a\u5929\u52b2\u590d\u6742\u5ea6\u6ca1\u53d8\u5c82\u4e0d\u662f\u5f88\u4e8f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u3002\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u5927\u4f53\u4e0e\u67e5\u8be2\u64cd\u4f5c\u7684\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u5018\u82e5\u4e0d\u628a\u4fee\u6539\u8fdb\u884c\u5230\u5e95\uff0c\u4e0b\u6b21\u67e5\u8be2\u5230\u8fd9\u6b21\u4fee\u6539\u533a\u95f4\u7684\u5b50\u533a\u95f4\uff0c\u53ef\u80fd\u5c31\u4f1a\u8f93\u51fa\u672a\u4fee\u6539\u7684\u72b6\u6001\uff0c\u8fd9\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u8282\u70b9\u505a\u4e00\u4e2a\u61d2\u60f0\u6807\u8bb0\u3002\u4e3a\u4ec0\u4e48\u53eb\u61d2\u60f0\u6807\u8bb0\u5462\uff1f\u56e0\u4e3a\u5b83\u771f\u7684\u5f88\u61d2\u60f0\uff0c\u4f60\u8e39\u5b83\u4e00\u811a\u5b83\u632a\u4e00\u6b65\u3002\u5f53\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u8fdb\u884c\u5230\u5c5e\u4e8e\u4fee\u6539\u533a\u95f4\u7684\u533a\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u5b83\u7684\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\uff0c\u7136\u540e\u7528\u61d2\u60f0\u6807\u8bb0\u8bb0\u5f55\u4e0b\u6765\u4fee\u6539\u5185\u5bb9\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5f53\u540e\u9762\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u6216\u662f\u67e5\u8be2\u64cd\u4f5c\u8bbf\u95ee\u5230\u8fd9\u4e2a\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u5148\u5c06\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\uff08\u4e5f\u5c31\u662f\u7528\u61d2\u60f0\u6807\u8bb0\u4fee\u6539\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u628a\u61d2\u60f0\u6807\u8bb0\u4f20\u9012\u7ed9\u5b83\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u7136\u540e\u5220\u9664\u81ea\u5df1\u8eab\u4e0a\u7684\u61d2\u60f0\u6807\u8bb0\uff09\u7136\u540e\u518d\u7ee7\u7eed\u8fdb\u884c\u4e4b\u524d\u8981\u7ee7\u7eed\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u5c31\u4ece$O(n)$\u88ab\u4f18\u5316\u6210$O(n\\lg n)$\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u4ee5\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\u4e3a\u4f8b\uff09\n\n```cpp\nvoid update(int p,int l,int r,int L,int R,int z){  //L,R\u8868\u793a\u7684\u662f\u8981\u6c42\u4fee\u6539\u7684\u533a\u95f4\uff0cz\u8868\u793a\u8981\u6c42\u52a0\u4e0a\u7684\u6570\n\tif(l>R||r<L)return;  //\u5982\u679c\u6ca1\u6709\u4ea4\u96c6\u5c31\u76f4\u63a5\u9000\u51fa\uff0c\u8282\u7ea6\u65f6\u95f4\n\tif(L<=l&&r<=R){t[p].v+=(r-l+1)*z;t[p].lz+=z;return;}  //\u5982\u679c\u5c5e\u4e8e\u4fee\u6539\u533a\u95f4\u5c31\u4fee\u6539\u503c\uff0c\u4fee\u6539\u61d2\u60f0\u6807\u8bb0\uff0c\u8fd4\u56de\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);  //pushdown\u64cd\u4f5c\u662f\u7528\u6765\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\u7684\u51fd\u6570\uff0c\u4e0b\u9762\u4f1a\u63d0\u5230\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5148\u5f53\u6210\u4e00\u4e2a\u7cfb\u7edf\u81ea\u5e26\u7684\u51fd\u6570\n\tupdate(lc,l,m,L,R,z);update(rc,m+1,r,L,R,z);  //\u5148\u4fee\u6539\u5de6\u53f3\u5b50\u6811\n\tpushup(p);  //\u6839\u636e\u5de6\u53f3\u5b50\u6811\u4fee\u6539\u540e\u7684\u503c\u66f4\u65b0\u5f53\u524d\u8282\u70b9\n}\n```\n\n\u77e5\u9053\u4e86\u4fee\u6539\u64cd\u4f5c\u600e\u4e48\u5199\uff0c\u5176\u5b9e\u67e5\u8be2\u64cd\u4f5c\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\u5427(\u8fd8\u662f\u4ee5\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\u4e3a\u4f8b)\n\n```cpp\nint query(int p,int l,int r,int L,int R){  //\u5982\u4e0a\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;  //\u5982\u679c\u5f53\u524d\u533a\u95f4\u5c5e\u4e8e\u67e5\u8be2\u533a\u95f4\uff0c\u8fd4\u56de\u533a\u95f4\u548c\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);  //\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\n\treturn query(lc,l,m,L,R)+query(rc,m+1,r,L,R);  //\u4e0d\u65ad\u67e5\u8be2\u5de6\u53f3\u5b50\u6811\n}\n```\n\n\u4e0b\u9762\u5c31\u8be5\u8c08\u8c08\u6211\u4eec\u7684$pushup$\u51fd\u6570\u4e86\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u9700\u6c42\u5199\u6cd5\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5176\u5b9e\u4e00\u822c\u6765\u8bf4\u90fd\u5f88\u7b80\u5355\n\n```cpp\ninline void pushup(int p){  //\u533a\u95f4\u6c42\u548c\n\tt[p].v=t[lc].v+t[rc].v;\n}\ninline void pushup(int p){  //\u533a\u95f4\u6700\u503c\n\tt[p].v=min(t[lc].v,t[rc].v);\n}\ninline void pushup(int p){  //\u533a\u95f4\u79ef\uff08\u8fd9\u73a9\u610f\u4e00\u822c\u7528\u4e0d\u4e0a\uff0c\u56e0\u4e3a\u592a\u5927\u4e00\u822c\u9700\u8981\u53d6\u6a21\uff0c\u53bb\u819c\u540e\u9664\u6cd5\u8981\u53d8\u6210\u9006\u5143\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff09\n\tt[p].v=t[lc].v*t[rc].v;\n}\n```\n\n\u76f8\u6bd4\u4e8e$pushup$\u51fd\u6570\uff0c$pushdown$\u51fd\u6570\u8981\u9ebb\u70e6\u8bb8\u591a\n\n```cpp\ninline void pushdown(int p,int l,int r){  //\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\n\tint m=l+r>>1,&lz=t[p].lz;\n\tt[lc].v+=(m-l+1)*lz;t[lc].lz+=lz;\n\tt[rc].v+=(r-m)*lz;t[rc].lz+=lz;\n\tlz=0;\n}\ninline void pushdown(int p,int l,int r){  //\u533a\u95f4\u4e58\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\n\tint m=l+r>>1,&lz1=t[p].lz1,&lz2=t[p].lz2;\n\tif(t[p].lz1!=1){\n\t\tt[lc].v*=lz1,t[rc].v*=lz1;\n\t\tt[lc].lz1*=lz1,t[rc].lz1*=lz1;\n\t\tt[lc].lz2*=lz1,t[rc].lz2*=lz1;\n\t\tlz1=1;\n\t}\n\tif(t[p].lz2){\n\t\tt[lc].v+=(m-l+1)*lz2;t[lc].lz2+=lz2;\n\t\tt[rc].v+=(r-m)*lz2;t[rc].lz2+=lz2;\n\t\tlz2=0;\n\t}\n}\n```\n\n----\n\n\u7ebf\u6bb5\u6811\u7684\u5404\u90e8\u5206\u7ec4\u6210\u5927\u5bb6\u5df2\u7ecf\u90fd\u770b\u660e\u767d\u4e86\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u628a\u5b83\u8fde\u6210\u4e00\u4e2a\u6574\u4f53\n\n[\u6a21\u677f1](https://www.luogu.org/problem/P3372)\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc getchar\n#define maxn 100005\nusing namespace std;\n\ninline ll read(){\n\tll a=0;int f=0;char p=gc();\n\twhile(!isdigit(p)){f|=p=='-';p=gc();}\n\twhile(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n\treturn f?-a:a;\n}int n,m;\n\nstruct ahaha{\n\tll v,lz;\n}t[maxn<<2];\n#define lc p<<1\n#define rc p<<1|1\ninline void pushup(int p){\n\tt[p].v=t[lc].v+t[rc].v;\n}\ninline void pushdown(int p,int l,int r){\n\tint m=l+r>>1;ll &lz=t[p].lz;\n\tt[lc].v+=(m-l+1)*lz;t[lc].lz+=lz;\n\tt[rc].v+=(r-m)*lz;t[rc].lz+=lz;\n\tlz=0;\n}\nvoid build(int p,int l,int r){\n\tif(l==r){t[p].v=read();return;}\n\tint m=l+r>>1;\n\tbuild(lc,l,m);build(rc,m+1,r);\n\tpushup(p);\n}\nvoid update(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){t[p].v+=(r-l+1)*z;t[p].lz+=z;return;}\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);\n\tupdate(lc,l,m,L,R,z);update(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nll query(int p,int l,int r,int L,int R){\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);\n\treturn query(lc,l,m,L,R)+query(rc,m+1,r,L,R);\n}\n\ninline void solve_1(){\n\tint x=read(),y=read();ll z=read();\n\tupdate(1,1,n,x,y,z);\n}\ninline void solve_2(){\n\tint x=read(),y=read();\n\tprintf(\"%lld\\n\",query(1,1,n,x,y));\n}\n\nint main(){\n\tn=read();m=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint zz=read();\n\t\tswitch(zz){\n\t\t\tcase 1:solve_1();break;\n\t\t\tcase 2:solve_2();break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n[\u6a21\u677f2](https://www.luogu.org/problem/P3373)\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc getchar\n#define maxn 100005\nusing namespace std;\n\ninline ll read(){\n\tll a=0;int f=0;char p=gc();\n\twhile(!isdigit(p)){f|=p=='-';p=gc();}\n\twhile(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n\treturn f?-a:a;\n}int n,m;ll mo;\n\nstruct ahaha{\n\tll v,lz1=1,lz2;\n}t[maxn<<2];\n#define lc p<<1\n#define rc p<<1|1\ninline void pushup(int p){\n\tt[p].v=(t[lc].v+t[rc].v)%mo;\n}\ninline void pushdown(int p,int l,int r){\n\tint m=l+r>>1;ll &lz1=t[p].lz1,&lz2=t[p].lz2;\n\tif(lz1!=1){\n\t\tt[lc].lz2=t[lc].lz2*lz1%mo,t[rc].lz2=t[rc].lz2*lz1%mo;\n\t\tt[lc].lz1=t[lc].lz1*lz1%mo,t[rc].lz1=t[rc].lz1*lz1%mo;\n\t\tt[lc].v=t[lc].v*lz1%mo,t[rc].v=t[rc].v*lz1%mo;\n\t\tlz1=1;\n\t}\n\tif(lz2){\n\t\tt[lc].v=(t[lc].v+(m-l+1)*lz2)%mo,t[lc].lz2=(t[lc].lz2+lz2)%mo;\n\t\tt[rc].v=(t[rc].v+(r-m)*lz2)%mo,t[rc].lz2=(t[rc].lz2+lz2)%mo;\n\t\tlz2=0;\n\t}\n}\nvoid build(int p,int l,int r){\n\tif(l==r){t[p].v=read()%mo;return;}\n\tint m=l+r>>1;\n\tbuild(lc,l,m);build(rc,m+1,r);\n\tpushup(p);\n}\nvoid update1(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){\n\t\tt[p].lz1=t[p].lz1*z%mo;t[p].lz2=t[p].lz2*z%mo;\n\t\tt[p].v=t[p].v*z%mo;return;\n\t}\n\tint m=l+r>>1;pushdown(p,l,r);\n\tupdate1(lc,l,m,L,R,z);update1(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nvoid update2(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){t[p].lz2=(t[p].lz2+z)%mo;t[p].v=(t[p].v+(r-l+1)*z)%mo;return;}\n\tint m=l+r>>1;pushdown(p,l,r);\n\tupdate2(lc,l,m,L,R,z);update2(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nll query(int p,int l,int r,int L,int R){\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;\n\tint m=l+r>>1;pushdown(p,l,r);\n\treturn (query(lc,l,m,L,R)+query(rc,m+1,r,L,R))%mo;\n}\n\ninline void solve_1(){\n\tint x=read(),y=read();ll z=read();\n\tupdate1(1,1,n,x,y,z);\n}\ninline void solve_2(){\n\tint x=read(),y=read();ll z=read();\n\tupdate2(1,1,n,x,y,z);\n}\ninline void solve_3(){\n\tint x=read(),y=read();\n\tprintf(\"%lld\\n\",query(1,1,n,x,y));\n}\n\nint main(){\n\tn=read();m=read();mo=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint zz=read();\n\t\tswitch(zz){\n\t\t\tcase 1:solve_1();break;\n\t\t\tcase 2:solve_2();break;\n\t\t\tcase 3:solve_3();break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n----\n\n### \u9898\u76ee\u63a8\u8350\n\n[\u65b9\u5dee](https://www.luogu.org/problem/P1471)\n\n[\u8272\u6591\u6e38\u620f](https://www.luogu.org/problem/P1558)\n\n[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)\n\n[\u7ef4\u62a4\u5e8f\u5217](https://www.luogu.org/problem/P2023)\n\n[\u4f1a\u8bae\u4e2d\u5fc3](https://www.luogu.org/problem/P3626)\n\n[\u5e8f\u5217](https://www.luogu.org/problem/P3863)\n\n[\u7b7e\u5230\u9898IV](https://www.luogu.org/problem/P3794)\n\n\u4f60\u7406\u89e3\u7ebf\u6bb5\u6811\u4e86\u5417\uff1f\u5982\u679c\u8fd9\u7bc7\u535a\u5ba2\u80fd\u591f\u7ed9\u4f60\u4e9b\u8bb8\u5e2e\u52a9\u7684\u8bdd\uff0c\u4e0d\u59a8\u70b9\u4e2a\u63a8\u8350\u5427",
        "postTime": 1569072616,
        "uid": 34530,
        "name": "\u5b50\u8c26\u3002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ec8\u4e8e\u5b66\u4f1a\u7ebf\u6bb5\u6811\u8fa3\uff01\n\n\u867d\u7136\u5df2\u7ecf\u6709\u5f88\u591a\u5de8\u4f6c\u5df2\u7ecf\u53d1\u4e86\u9898\u89e3\uff0c\u4f46\u662f\u4ed6\u4eec\u592a\u5f3a\u4e86\u6240\u4ee5\u4e0d\u5c51\u4e8e\u8bb2\u4eba\u8bdd\uff0c\u7531\u6211\u6765\u7ffb\u8bd1\u4e00\u904d\n\n\u53cb\u60c5\u63d0\u793a:\u8fd9\u9898\u7206long long\n\nlazytag\uff1atag\u8bb0\u5f55\u7684\u662f\u6b64\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u9700\u8981\u4fee\u6539\u7684\u4e00\u4e2a\u503c\uff08\u8fd9\u9898\u662f\u52a0\uff09\n\n\u4e3e\u4e2a\u6817\u5b50\uff08\u771f\u9999\uff09\uff1a[2,8]\u8fd9\u4e2a\u533a\u95f4\u88ab+x,\u4e8e\u662f\u6211\u4eec\u5728\u8282\u70b92\uff08\u81ea\u5df1\u662f\u81ea\u5df1\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\u5bf9\u5e94\u7684tag\u4e0a\u8bb0\u5f55x\uff0c\u57283\u548c4\u7684\u7236\u8282\u70b9\uff08\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u7236\u8282\u70b9\uff09\u5bf9\u5e94\u7684tag\u4e0a\u4e5f\u8bb0\u5f55x\uff0c\u7136\u540e\u57285678\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e0a\u7684tag\u4e5f\u8bb0\u5f55x\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u662f\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u904d\u5386\u5c31\u597d\u4e86\uff0c\u4e0d\u9700\u8981\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\u7956\u5148\n\n\u7ebf\u6bb5\u6811\u7684\u4f18\u5316\u5c31\u5728\u4e8e\u5b83\u4e0d\u50cf\u66b4\u529b\u90a3\u6837\u6bcf\u6b21\u628a\u533a\u95f4\u6240\u6709\u8282\u70b9\u90fd\u4fee\u6539\uff0c\u7528\u4e8c\u5206\u53ea\u4fee\u6539\u9700\u8981\u4fee\u6539\u7684\uff08\u6bd4\u5982\u6211\u67e5\u8be2\u65f6\u53ea\u9700\u8981\u67e5\u51e0\u4e2a\u957f\u5ea62^n\u7684\u533a\u95f4\u7684\u548c\uff0c\u6211\u5e72\u561b\u8981\u52a0\u6bcf\u4e00\u4e2a\u8282\u70b9\uff1f\u9700\u8981\u65f6\u518d\u7ee7\u7eed\u5411\u4e0b\u904d\u5386\u4fee\u6539\u5c31\u597d\u4e86\uff09\uff0c\u6240\u4ee5\u5feb\u4e86\u4e00\u4e2alog\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 1000005\n#define MAXM 4000005\nusing namespace std;\nint a[MAXN],ans[MAXM],tag[MAXM];\nvoid build(int p,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tans[p]=a[l];\n\t\treturn;\n\t}\n\tint mid(l+r>>1);\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tans[p]=ans[p<<1]+ans[p<<1|1];\n} \ninline void f(int p,int l,int r,int num)\n{\n\ttag[p]=tag[p]+num;\n\tans[p]=ans[p]+num*(r-l+1);\n}\nint k,b,c;\ninline void update(int l,int r,int p)\n{\n\tif(b<=l&&r<=c)\n\t{\n\t\tans[p]+=k*(r-l+1);\n\t\ttag[p]+=k;\n\t\treturn;\n\t}\n\tint mid(l+r>>1);\n\tf(p<<1,l,mid,tag[p]);\n\tf(p<<1|1,mid+1,r,tag[p]);\n\ttag[p]=0;\n\tif(b<=mid)\n\tupdate(l,mid,p<<1);\n\tif(c>mid)\n\tupdate(mid+1,r,p<<1|1);\n\tans[p]=ans[p<<1]+ans[p<<1|1];\n}\nint query(int l,int r,int p)\n{\n\tint res(0);\n\tif(b<=l&&r<=c)\n\treturn ans[p];\n\tint mid(l+r>>1);\n\tf(p<<1,l,mid,tag[p]);\n\tf(p<<1|1,mid+1,r,tag[p]);\n\ttag[p]=0;\n\tif(b<=mid)\n\tres+=query(l,mid,p<<1);\n\tif(c>mid)\n\tres+=query(mid+1,r,p<<1|1);\n\treturn res;\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i(1);i<=n;++i)\n\tscanf(\"%intd\",&a[i]);\n\tbuild(1,1,n);\n\tfor(int i(1);i<=m;++i)\n\t{\n\t\tint a1;\n\t\tscanf(\"%d\",&a1);\n\t\tif(a1&1)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&b,&c,&k);\n\t\t\tupdate(1,n,1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d\",&b,&c);\n\t\t\tprintf(\"%d\\n\",query(1,n,1));\n\t\t}\n\t}\n}\n```\n~~\u53cd\u6b63\u524d\u9762\u5de8\u4f6c\u4ee3\u7801\u90fd\u6709\u4e86\uff0c\u5c31\u5077\u61d2\u4e0d\u5199\u4ee3\u7801\u6ce8\u91ca\u4e86~~\n\n\u7ed3\u5408\u524d\u9762\u7684\u5185\u5bb9\u5e94\u8be5\u80fd\u770b\u61c2\u5427\uff1f",
        "postTime": 1568033023,
        "uid": 111741,
        "name": "\u5854\u7f57\u5170",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u548c\u4f8b\u9898\u8bf7\u524d\u5f80\u535a\u5ba2](https://directional-foil.blog.luogu.org/post-shuo-ju-jie-gou-xian-duan-shu)\n# P3372 \u9898\u89e3\n**\u7ebf\u6bb5\u6811\u662f\u4ec0\u4e48\uff1f**\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd~~\u80fd\u8ba9\u4f60\u4ee3\u7801\u5f3a\u884c\u589e\u52a050\u884c\u7684\u6781\u5bb9\u6613\u7206\u70b8\u7684\u4e07\u91d1\u6cb9~~\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e~~\u4f18\u96c5~~\u66b4\u529b\u5730\u89e3\u51b3\u5bf9\u4e00\u4e2a\u533a\u95f4\u4e0a**\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\uff08\u5373\u53ef\u7531\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u4fe1\u606f\u5f97\u5230\u5f53\u524d\u533a\u95f4\u4fe1\u606f\uff09** \u7684 **\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2**\u95ee\u9898\u3002\n## \u7ed3\u6784\uff1a\n\u5c06\u533a\u95f4\u5212\u5206\u4e3a\u5de6\u7aef\u70b9\u5230\u4e2d\u70b9\uff08\u5373\u5de6\u5b50\u533a\u95f4\uff09\u548c\u4e2d\u70b9+1\u5230\u53f3\u7aef\u70b9\uff08\u5373\u53f3\u5b50\u533a\u95f4\uff09\u7684\u4e24\u4e2a\u5b50\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u5b50\u533a\u95f4\u7ee7\u7eed\u5212\u5206\uff0c\u76f4\u5230\u5212\u5206\u5230\u5355\u4e2a\u5143\u7d20\uff08\u5373\u5de6\u7aef\u70b9=\u53f3\u7aef\u70b9\uff09\n\n**\u793a\u610f\u56fe\uff1a**\n![c0dd297d009ddb5d3d37da29c291da7c07e3cb5a0c40b2ec.png](https://www.kanjiantu.com/images/2019/08/27/c0dd297d009ddb5d3d37da29c291da7c07e3cb5a0c40b2ec.png)\n\n\u4e0d\u96be\u770b\u51fa\u7ebf\u6bb5\u6811\u9664\u4e86\u6700\u4e0b\u9762\u4e00\u5c42\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u4e00\u9897**\u5b8c\u5168\u4e8c\u53c9\u6811**\uff0c\u8fd9\u610f\u5473\u7740\u6574\u68f5\u6811\u53ef\u4ee5\u4f7f\u7528\u201c\u7236\u5b50\u4e8c\u500d\u6cd5\u201d\uff08\u5de6\u513f\u5b50\u7f16\u53f7\u4e3a\u7236\u4eb2\u7f16\u53f7 $\\times$ 2\uff0c\u53f3\u513f\u5b50\u7f16\u53f7\u4e3a\u7236\u4eb2\u7f16\u53f7 $\\times$ 2 $+$ 1\uff09\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u8fd8\u8981\u8003\u8651\u5230\u6700\u540e\u4e00\u5c42\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u5e94\u5f00\u5230n $\\times$ 4\u5927\u5c0f\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\u5c31\u662f\u4e00\u68f5[1~n]\u7684\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\u6700\u5927\u4e3a $log_2  n+1$,\u8fd9\u4e5f\u610f\u5473\u7740\u7ebf\u6bb5\u6811\u53ef\u5728$O(logn)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u3002\n\n---\n\n## \u5b9e\u73b0\n\u4ee5[\u6d1b\u8c37P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problem/P3372)\u7684\u7ef4\u62a4\u6700\u5927\u503c\u4e3a\u4f8b\n\u9996\u5148\uff0c\u6211\u4eec\u7ed9\u7ebf\u6bb5\u6811\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4e00\u4e2asum\u53d8\u91cf\u5b58\u50a8\u8be5\u5143\u7d20\u4ee3\u8868\u533a\u95f4\u7684\u533a\u95f4\u548c\uff0c\u53f6\u5b50\u7ed3\u70b9\u7684sum\u662f\u539f\u6570\u7ec4\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u975e\u53f6\u8282\u70b9\u7684sum\u662f\u5176\u5de6\u53f3\u5b50\u8282\u70b9sum\u7684\u548c\uff0c\u5982\u5f53\u539f\u6570\u7ec4\u4e3a \n![3dd6bf7464e1e756f.png](https://www.kanjiantu.com/images/2019/08/27/3dd6bf7464e1e756f.png)\n\n\u65f6\uff0c\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e3a![2cd920dd97dbafe0d.png](https://www.kanjiantu.com/images/2019/08/27/2cd920dd97dbafe0d.png)\n\n\u8282\u70b9\u7ed3\u6784\u4f53\uff1a\n```cpp\n\nstruct segmenttree{\n  int l,r,sum,add;\n  #define l(x) tree[x].l; //\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u70b9\n  #define r(x) tree[x].r; //\u5f53\u524d\u533a\u95f4\u53f3\u7aef\u70b9\n  #define sum(x) tree[x].sum; //\u533a\u95f4\u548c\n  #define add(x) tree[x].add; //\u5ef6\u8fdf\u6807\u8bb0\uff08\u8fd9\u4e2a\u540e\u9762\u4f1a\u8bb2\uff09\n}tree[maxn];\n\n```\n\n---\n\n## \u64cd\u4f5c\n\u64cd\u4f5c\u6709\u9012\u5f52\u548c\u975e\u9012\u5f52\u4e24\u79cd\u5f62\u5f0f\uff0c\u9012\u5f52\u5f0f\u76f8\u5bf9\u4e8e\u975e\u9012\u5f52\u5f0f\u66f4\u76f4\u89c2\uff0c\u56e0\u6b64\u8fd9\u91cc\u8bb2\u89e3\u9012\u5f52\u5f0f\u3002\n\n\u975e\u9012\u5f52\u5f0f\u548c\u9012\u5f52\u5f0f\u672c\u540c\u672b\u5f02\uff0c\u8003\u8bd5\u65f6\u6309\u7167\u6570\u636e\u89c4\u6a21\u800c\u5b9a\u3002\n\n### \u5efa\u6811\uff1a\n\u6309\u7167\u4e4b\u524d\u63d0\u5230\u7684\u5b9a\u4e49\uff0c\u4ece\u6839\u8282\u70b9([1~n])\u5411\u5de6\u53f3\u4e24\u8fb9\u9012\u5f52\uff0c\u9012\u5f52\u5230\u53f6\u5b50\u7ed3\u70b9\u5c31\u5c06\u8be5\u8282\u70b9sum\u8bbe\u4e3a\u5176\u5728\u539f\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u503c\uff0c\u56de\u6eaf\u65f6\u5c06\u5f53\u524d\u8282\u70b9\u7684sum\u8bbe\u4e3a\u5176\u5de6\u53f3\u5b50\u8282\u70b9sum\u7684\u548c\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n\nvoid build(int p,int l,int r)\n{\n  l(p)=l;r(p)=r; //\u8bbe\u7f6e\u7aef\u70b9\n  if(l==r) { sum(p)=num[l]; return;} //\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\n  int mid=((l+r)>>1); //\u4f4d\u8fd0\u7b97\uff0c\u53f3\u79fb1\u4f4d\u76f8\u5f53\u4e8e/2\uff0c\u5de6\u79fb\u540c\u7406\n  build(p<<1,l,mid); //\u5411\u5de6\u9012\u5f52\n  build(p<<1|1,mid+1,r) //\u5411\u53f3\u9012\u5f52\uff0c\u4e00\u4e2a\u5076\u6570|1\u76f8\u5f53\u4e8e+1\n}\n\n```\n\u590d\u6742\u5ea6\u4e3a$O(nlogn)$\n\n### \u533a\u95f4\u67e5\u8be2\uff1a\n\u8bbe\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $l$,\u53f3\u7aef\u70b9\u4e3a $r$,\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $l_1$,\u53f3\u7aef\u70b9\u4e3a $r_1$,\u4e2d\u70b9\u4e3a$mid$ ,\u5219\n- \u5f53 $l \\leq l_1$ \u4e14 $r \\geq r_1$\u65f6 \u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684sum,\u56e0\u4e3a\u5f53\u524d\u533a\u95f4**\u5df2\u7ecf\u6db5\u76d6\u4e86\u5b50\u533a\u95f4\u7684\u5168\u90e8\u4fe1\u606f**\u3002\n- \u5f53 $l \\leq mid$\u65f6\uff0c\u5411\u5de6\u9012\u5f52\uff0c$r_1=mid$\uff08\u6b64\u65f6\u67e5\u8be2\u533a\u95f4\u4e00\u5b9a\u6db5\u76d6\u5de6\u5b50\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff09\n- \u5f53 $r > mid$\u65f6\uff0c\u5411\u53f3\u9012\u5f52\uff0c$l_1=mid+1$ \uff08\u6b64\u65f6\u67e5\u8be2\u533a\u95f4\u4e00\u5b9a\u6db5\u76d6\u53f3\u5b50\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\n\nint query(int p,int l,int r)\n{\n  if(l<=l(p) && r>=r(p)) return sum(p); //\u5b8c\u5168\u5305\u542b\n  int mid=((l(p)+r(p))>>1);\n  int ans=0;\n  if(l<=mid) ans+=query(p<<1,l,mid); //\u5411\u5de6\u9012\u5f52\uff0c\u7d2f\u52a0\u5de6\u5b50\u6811\u7b54\u6848\n  if(r>mid) ans+=query(p<<1|1,mid+1,r); //\u5411\u53f3\u9012\u5f52\uff0c\u7d2f\u52a0\u5de6\u5b50\u6811\u7b54\u6848\n  return ans;\n}\n\n```\n\u590d\u6742\u5ea6\u4e3a$O(logn)$\n\n### \u533a\u95f4\u4fee\u6539\u4e0e\u5ef6\u8fdf\u6807\u8bb0\uff1a\n\u5f53\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u65f6\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u8bbe\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $l$,\u53f3\u7aef\u70b9\u4e3a $r$,\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $l_1$,\u53f3\u7aef\u70b9\u4e3a $r_1$,\u4e2d\u70b9\u4e3a$mid$\uff0c\u540c\u65f6\u67e5\u8be2\u64cd\u4f5c\u4e5f\u6ee1\u8db3\u8fd9\u4e24\u6761\u6027\u8d28\uff1a\n- \u5f53 $l \\leq mid$\u65f6\uff0c\u5411\u5de6\u9012\u5f52\uff0c$r_1=mid$\uff08\u6b64\u65f6\u67e5\u8be2\u533a\u95f4\u4e00\u5b9a\u6db5\u76d6\u5de6\u5b50\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff09\n- \u5f53 $r > mid$\u65f6\uff0c\u5411\u53f3\u9012\u5f52\uff0c$l_1=mid+1$ \uff08\u6b64\u65f6\u67e5\u8be2\u533a\u95f4\u4e00\u5b9a\u6db5\u76d6\u53f3\u5b50\u533a\u95f4\u7684\u4e00\u90e8\u5206\uff09\n\n\u4f46\u5f53\u51fa\u73b0\u5b8c\u5168\u8986\u76d6\u7684\u60c5\u51b5\u65f6\uff0c\u4e8b\u60c5\u5c31\u53d8\u5f97\u4e0d\u90a3\u4e48\u7b80\u5355\u4e86\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6df1\u5165\u66f4\u65b0\u4f1a\u4f7f\u5355\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u9ad8\u8fbe $O(n)$,\u8fd9\u662f\u6211\u4eec\u6240\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u5f15\u5165**\u5ef6\u8fdf\u6807\u8bb0**\u3002\n\n\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u82b1\u8d39\u5f88\u5927\u7684\u4ee3\u4ef7\u66f4\u65b0\u4e86\u8282\u70b9p\u7684\u5b50\u6811\uff0c\u4f46\u5728\u4e4b\u540e\u7684\u67e5\u8be2\u4e2d\u5374\u6839\u672c\u6ca1\u6709\u8bbf\u95ee\u5230\u5b83\u4eec\uff0c\u90a3\u66f4\u65b0p\u7684\u5b50\u6811\u5c82\u4e0d\u662f\u767d\u8d39\u529b\u6c14\uff1f\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u533a\u95f4\u4fee\u6539\u51fa\u73b0\u201c\u5b8c\u5168\u8986\u76d6\u201d\u60c5\u51b5\u65f6\u4e5f\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u8981\u7ed9\u5f53\u524d\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u4ee3\u8868\u201c**\u5f53\u524d\u8282\u70b9\u5df2\u88ab\u66f4\u65b0\uff0c\u4f46\u5176\u5b50\u8282\u70b9\u5c1a\u672a\u88ab\u66f4\u65b0**\u201d\u7684\u5ef6\u8fdf\u6807\u8bb0\uff08\u8fd9\u91cc\u53d6\u540dadd\uff09\u3002\uff08\u5982\u679c\u64cd\u4f5c\u662f\u76f8\u5bb9\u7684\uff08\u5982\u52a0\u6cd5\uff09\uff0c\u90a3\u5728\u6253\u6807\u8bb0\u524d\u65e0\u9700\u4e0b\u4f20\u539f\u6765\u7684\u6807\u8bb0\u3002\u5982\u679c\u64cd\u4f5c\u662f\u4e0d\u76f8\u5bb9\u7684\uff08\u5982\u8d4b\u503c\uff09\uff0c\u90a3\u5728\u6253\u6807\u8bb0\u524d\u9700\u4e0b\u4f20\u539f\u6765\u7684\u6807\u8bb0\u3002\uff09\n\n\u5728\u4ee5\u540e\u7684\u67e5\u8be2\u64cd\u4f5c\u4e2d\uff0c\u5982\u679c\u9047\u5230\u4e86\u6709\u5ef6\u8fdf\u6807\u8bb0\u7684\u8282\u70b9\uff0c\u4fbf\u5c06\u5176\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u66f4\u65b0\u5e76\u6253\u4e0a\u5ef6\u8fdf\u6807\u8bb0\uff0c\u5e76\u64e6\u9664\u5f53\u524d\u8282\u70b9\u7684\u5ef6\u8fdf\u6807\u8bb0\uff08\u5373\u5c06\u5ef6\u8fdf\u6807\u8bb0**\u4e0b\u4f20\u4e00\u5c42**\uff09\uff0c\u8fd9\u6837\u5c31\u51cf\u5c11\u4e86\u5927\u91cf\u65e0\u7528\u7684\u66f4\u65b0\u64cd\u4f5c ~~\uff08\u867d\u7136\u672c\u8d28\u4e0a\u4f9d\u65e7\u662f\u66b4\u529b\uff09~~\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n\nvoid spread(int p) //\u4e0b\u4f20\u6807\u8bb0\n{\n  if(add(p))\n  {\n    add(p<<1)+=add(p);\n    add(p<<1|1)+=add(p);\n    sum(p<<1)+=add(p)*(r(p<<1)-l(p<<1)+1); //\u533a\u95f4\u548c\u589e\u91cf=\u6570\u503c\u589e\u91cf*\u533a\u95f4\u957f\n\t\tsum(p<<1|1)+=add(p)*(r(p<<1|1)-l(p<<1|1)+1); //\u533a\u95f4\u548c\u589e\u91cf=\u6570\u503c\u589e\u91cf*\u533a\u95f4\u957f\n    add(p)=0;\n  }\n}\n\nint query(int p,int l,int r) \n//\u66f4\u65b0\u540e\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u589e\u52a0\u4e86\u4e0b\u7a7f\u6807\u8bb0\u7684\u64cd\u4f5c\n{\n  if(l<=l(p) && r>=r(p)) return sum(p); //\u5b8c\u5168\u5305\u542b\n  spread(p);//\u4e0b\u4f20\u6807\u8bb0\n  int mid=((l(p)+r(p))>>1);\n  int ans=0;\n  if(l<=mid) ans+=query(p<<1,l,mid);\n  if(r>mid) ans+=query(p<<1|1,mid+1,r);\n  return ans;\n}\n\nvoid update(int p int l,int r,int c)\n{\n  if(l<=l(p) && r>=r(p)){\n\t\tsum(p)+=c*(r(p)-l(p)+1); //\u533a\u95f4\u548c\u589e\u91cf=\u6570\u503c\u589e\u91cf*\u533a\u95f4\u957f\n\t\tadd(p)+=c;\n\t\treturn;\n\t}\n\tspread(p);//\u4e0b\u4f20\u6807\u8bb0\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid) update(p<<1,l,r,c); //\u66f4\u65b0\u5de6\u5b50\u6811\n\tif(r>mid) update(p<<1|1,l,r,c); //\u66f4\u65b0\u53f3\u5b50\u6811\n\tsum(p)=sum(p<<1)+sum(p<<1|1); //\u66f4\u65b0\u5f53\u524d\u70b9\n}\n\n```\n\u590d\u6742\u5ea6\u4e3a$O(logn)$\n\nAC\u4ee3\u7801\uff1a\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100002;\ntypedef long long ll;\nstruct segmenttree{\n  int l,r,sum,add;\n  #define l(x) tree[x].l; //\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u70b9\n  #define r(x) tree[x].r; //\u5f53\u524d\u533a\u95f4\u53f3\u7aef\u70b9\n  #define sum(x) tree[x].sum; //\u533a\u95f4\u548c\n  #define add(x) tree[x].add; //\u5ef6\u8fdf\u6807\u8bb0\uff08\u8fd9\u4e2a\u540e\u9762\u4f1a\u8bb2\uff09\n};\nsegment_tree tree[maxn<<2];\nll read()//\u5feb\u8bfb\n{\n\tll s=0,w=1;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9'){\n\t\tif(c=='-') w=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0' && c<='9')\n\t{\n\t\ts=(s<<3)+(s<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn s*w;\n}\nvoid build(int p,int l,int r)\n{\n\tl(p)=l;\n\tr(p)=r;\n\tint mid=(l+r)>>1;\n\tif(l==r){\n\t\tsum(p)=read();\n\t\treturn;\n\t}\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tsum(p)=sum(p<<1)+sum(p<<1|1);\n}\nvoid spread(int p)\n{\n\tif(add(p))\n\t{\n\t\tsum(p<<1)+=add(p)*(r(p<<1)-l(p<<1)+1);\n\t\tsum(p<<1|1)+=add(p)*(r(p<<1|1)-l(p<<1|1)+1);\n\t\tadd(p<<1)+=add(p);\n\t\tadd(p<<1|1)+=add(p);\n\t\tadd(p)=0;\n\t}\n}\nlong long ask(int p,int l,int r)\n{\n\tif(l<=l(p) && r>=r(p)){\n\t\treturn sum(p);\n\t}\n\tspread(p);\n\tint mid=(l(p)+r(p))>>1;\n\tlong long v=0;\n\tif(l<=mid) v+=ask(p<<1,l,r);\n\tif(r>mid) v+=ask(p<<1|1,l,r);\n\treturn v;\n}\nvoid update(int p,int l,int r,long long c)\n{\n\tif(l<=l(p) && r>=r(p)){\n\t\tsum(p)+=c*(r(p)-l(p)+1);\n\t\tadd(p)+=c;\n\t\treturn;\n\t}\n\tspread(p);\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid) update(p<<1,l,r,c);\n\tif(r>mid) update(p<<1|1,l,r,c);\n\tsum(p)=sum(p<<1)+sum(p<<1|1);\n}\nll n,m;\nll a,b,c,d;\nint main()\n{\n\tn=read(),m=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\ta=read();\n\t\tif(a==1){\n\t\t\tb=read(),c=read(),d=read();\n\t\t\tupdate(1,b,c,d);\n\t\t}\n\t\telse {\n\t\t\tb=read();\n\t\t\tc=read();\n\t\t\tprintf(\"%ld\\n\",ask(1,b,c));\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1566912257,
        "uid": 155907,
        "name": "1379\u53f7\u76d1\u542c\u5458",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "~~\u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u6587\u7ae0\u8d44\u74f7\u4e00\u4e0b\u4e0b\u5566~~~~~\n\n\u7ebf\u6bb5\u6811\u662f\u4eceOI\u840c\u65b0\u8f6c\u5411OI~~\u5927\u4f6c~~\u7684\u91cd\u8981\u7b97\u6cd5\n\n\u5728\u5b9e\u9645\u5e94\u7528\u4e5f\u662f\u53ef\u4ee5\u5c06O(N\uff09\u7684\u590d\u6742\u5ea6\u4f18\u5316\u5230O\uff08log N\uff09\u7684\u795e\u5947\u4e1c\u897f\n\n**\u8fdb\u5165\u6b63\u9898**\n\n**\u7b2c\u4e00\u90e8\u5206---\u7ebf\u6bb5\u6811\u6982\u5ff5\uff08\u5305\u62ec\u524d\u7f6e\u77e5\u8bc6\uff09**\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811,\u4e3e\u4e2a\u5c0f\u5c0fde\u6817\u5b50\n\n![](https://cdn.luogu.com.cn/upload/pic/71366.png)\n\n~~\u5176\u5b9e\u4ed6\u5c31\u662f\u4e2a\u4e8c\u5206\u7684\u8fc7\u7a0b~~\n\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u5982\u679c\u4f60\u8981\u8868\u793a\u7ebf\u6bb5\u7684\u548c\uff0c\u90a3\u4e48\u6700\u4e0a\u9762\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u7ebf\u6bb51~8\u7684\u548c\u3002\u6839\u7684\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u7ebf\u6bb5\u4e2d1~4\u7684\u548c\uff0c\u4e0e5~8\u7684\u548c\u3002\n\n~~\u5f53\u7136\u540e\u9762\u7684\u4e5f\u662f\u4e00\u6837~~\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9000\u51fa\u4e00\u4e2a\u6027\u8d28\n\n#### \u8282\u70b9i\u7684\u6743\u503c=\u5979\u7684\u5de6\u513f\u5b50\u6743\u503c+\u5979\u7684\u53f3\u513f\u5b50\u6743\u503c\n\n\u6211\u4eec\u518d\u6765\u4e00\u4e2a\u524d\u7f6e\u6027\u77e5\u8bc6\n\n\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\u4e3an\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7\u4e3an<<1 (2*n).\n\n\u81ea\u7136\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u4e3a(n<<1)|1(2*n+1)\n\n\u5343\u4e07\u8bb0\u4f4f\uff08\uff08n<<1\uff09|1\u8981\u52a0\u62ec\u53f7\uff0c\u4e0d\u7136\u4f1a\u5148\u7b971|1\uff0c\u518d\u7b97\u5de6\u79fb\uff01\uff01\uff01\uff09\n\nso\uff0c\u6211\u4eec\u53ef\u4ee5struct\u4e00\u4e2a\u7ed3\u6784\u4f53node.l\u8868\u793a\u5b83\u7684\u5de6\u513f\u5b50\uff0cnode.r\u8868\u793a\u5b83\u7684\u53f3\u513f\u5b50\uff0cnode.sum\u8868\u793a\u533a\u95f4\u548c\n\n\u7ed3\u5408\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97tree[i].sum=tree[i*2].sum+tree[i*2+1].sum;\n\n\u5c31\u6709\u4e86\u63a5\u4e0b\u6765\u7684\u4ee3\u7801:\n\n```cpp\ninline void build(int i,int l,int r)\n\t{//inline\u52a0\u901f\u7684\uff0c\u53ef\u4ee5\u4e0d\u52a0\n    node[i].l=l;node[i].r=r;\n    if(l==r)\n\t{//\u5de6\u53f3\u6307\u5411\u4e00\u4e2a\uff0c\u8bf4\u660e\u6b64\u65f6\u662f\u53f6\u5b50\u8282\u70b9\n        node[i].sum=input[l];\n        return ;\n    }\n    int mid=(l+r)>>1;//((l+r)/2)\n    build(i*2,l,mid);//\u5efa\u9020\u5de6\u5b50\u6811and\u53f3\u5b50\u6811\n    build(i*2+1,mid+1,r);\n    node[i].sum=node[i*2].sum+node[i*2+1].sum;\n\t//\u4e0a\u8ff0\u6027\u8d28\n\treturn ;\n}\n```\n**\u7b2c\u4e8c\u90e8\u5206---\u7ebf\u6bb5\u6811\u5165\u95e8**\n\n\u7ebf\u6bb5\u6811\u4e2d\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u822c\u6709:\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2.\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2.\u4ee5\u53ca\u5176\u884d\u751f\u51fa\u6765\u7684\u8bb8\u591a\u64cd\u4f5c\uff0c\u6211\u5728\u6b64\u53ea\u8bb2\u8fd9\u4e24\u4e2a\n\n**2.1** \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\n\n\u533a\u95f4\u4fee\u6539:\n\n\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5728l\u5230r\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u6570\u90fd\u52a0\u4e0ax\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u95f4\u7f6e\u4e0a\u6807\u8bb0\uff0c\u5728\u5355\u70b9\u67e5\u8be2\u662f\u5728\u5728\u8fd9\u6570\u7ec4\u4e0a\u9762\u628a\u6807\u8bb0\u52a0\u8d77\u6765\u5c31\u597d\n\n\u5177\u4f53\u505a\u6cd5\u5982\u601d\u8def\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801~~~\n\n```cpp\nvoid node_add(int i,int l,int r,int k)\n{\n\tif(node[i].l>=l && node[i].r<=r)\n\t{//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u91cc\u9762\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u6807\u8bb0k\n\t\tnode[i].sum+=k;\n\t\treturn ;\n\t}\n\tif(node[i*2].r>=l)\n\tnode_add(i*2,l,r,k);\n\tif(node[i*2+1].l<=r)\n\tnode_add(i*2+1,l,r,k);\n}\n```\n\u90a3\u4e48\u5355\u70b9\u67e5\u8be2\u4e48emm...\u90a3\u5c31\u66f4\u7b80\u5355\u4e86,\u76f4\u63a5\u65e0\u8111\u52a0\u6807\u8bb0\u5c31\u597d\u4e86\n\n```cpp\nvoid chazhao(int i,int k)\n{\n   ans+=node[i].num;//\u53c8\u662f\u65e0\u8111\u53e0\u52a0\n\tif(node[i].l==node[i].r)\n\treturn ;\n\tif(k<=node[i*2].r)\n   chazhao(i*2,dis);\n\tif(k>=node[i*2+1].l)\n\tchazhao(i*2+1,dis);\n}\n```\n**2.2** \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n\n\u6211\u4eec\u518d\u6b21\u7ffb\u51fa\u4e0a\u9762\u90a3\u5f20\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/71366.png)\n\n\u5047\u5b9a\u6211\u4eec\u8981\u6c421-5\u7684\u548c\uff0c\u6211\u4eec\u4ece\u6839\u5f00\u59cb\u770b\uff0c\u6839\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u533a\u95f4\uff0c\u5206\u522b\u662f**1-4**,**5-8**.\u4e0d\u96be\u53d1\u73b01-4\u8fd9\u4e2a\u533a\u95f4\u662f\u5b8c\u5168\u5728\u6211\u4eec\u9700\u8981\u67e5\u8be2\u76841-5\u4e4b\u95f4\u7684\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de1-4\u7684sum\uff0c\u518d\u770b5-8\uff0c\u518d\u88ab\u5206\u62105-6\u4e0e7-8,5-6\u4e0e\u8981\u67e5\u8be2\u76841-5\u6709\u4ea4\u96c6\uff0c\u6240\u4ee5\u7ee7\u7eed\u67e5\u8be25-6\uff0c\u6b64\u65f6\u88ab\u5206\u6210**5**and**6**\uff0c5\u5b8c\u5168\u57281-5\u4e4b\u5185\uff0c\u6240\u4ee5\u8fd4\u56de5\u7684sum.\n\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u4e86\uff0c\u8fd9\u4e2a\u6211\u7528\u811a\u6307\u5934\u90fd\u80fd\u7b97\u51fa\u6765\uff0c\u4e3a\u5565\u8fd8\u8981\u8fd9\u4e48\u9ebb\u70e6\uff1f~~\u597d\u50cf\u786e\u5b9e\u662f\u8fd9\u6837~~\n\n\u4f46\u4f60\u60f3\u8fc7\u5982\u679c100w\u4e2a\u6570\u9700\u8981\u67e5\u8be299w\u4e2a\u7684\u548c\u5462?\u6b64\u65f6\uff0c\u7ebf\u6bb5\u6811\u53c8\u7b80\u6d01\uff0c\u8fd8\u6bd4\u6734\u7d20\u7684\u7d2f\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u4f4e\u5f88\u591a\uff0c\u6240\u4ee5\u81ea\u7136\u662f\u6211\u4eec\u7684\u4e0d\u4e8c\u4e4b\u9009\u3002\n\n\u4e0b\u9762\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u5c31\u662f\u6240\u8bf4\u7684\u67e5\u8be2\u529f\u80fd\n\n```cpp\nint chazhao(int x,int l,int r)\n{\n\tif(node[x].l>=l && node[x].r<=r)\n\treturn node[x].sum;\n   //\u5982\u679c\u5b8c\u5168\u5305\u62ec\n\tif(node[x].r<l || node[x].l>r)\n\treturn 0;\n\t//\u5982\u679c\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\n\tint ans=0;\n\tif(node[x*2].r>=l)\n\tans+=chazhao(x*2,l,r);\n\t//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u5c31\u641c\u7d22\u5de6\u513f\u5b50\n\tif(node[x*2+1].l<=r) \t\t\t\t\t\tans+=chazhao(x*2+1,l,r);\n   //\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u513f\u5b50\u548c\u76ee\u6807\u533a\u95f4\u53c8\u4ea4\u96c6\uff0c\u5c31\u641c\u7d22\u53f3\u513f\u5b50\n    return ans;\n}\n```\n\n\u6211\u8eab\u8fb9\u7684OIer\u90fd\u76f4\u63a5\u5728\u65e0\u8111\u80cc\u8fd9\u4e2a\uff0c\u4f46\u6211\u8fd8\u662f\u89c9\u5f97\u7406\u89e3\u8bb0\u5fc6\u6bd4\u8f83\u597d\n~~\u4e0d\u7136\u5982\u679c\u5728\u8003\u573a\u4e0a\u5fd8\u4e86\uff0c\u6216\u8005\u8111\u62bd\u4e86~~\n\n\u54b3\u54b3\u54b3,\u56de\u5f52\u6b63\u9898.\n\n\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u4fee\u6539\u5355\u70b9\u5462?\n\n\u5176\u5b9e\u4e5f\u4e0d\u96be\n\n\u8fd8\u8bb0\u5f97\u6211\u4eec\u6700\u521d\u63a8\u51fa\u6765\u7684\u5b9a\u7406\u4e48node[i].sum=node[i*2].sum+node[i*2+1].sum\n\n\u6211\u518d\u4f7f\u7528\u4e00\u6b21\u90a3\u5f20\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/71391.png)\n\u5047\u5b9a\u6211\u4eec\u9700\u8981\u4fee\u6539\u7684\u662f\u539f\u56fe\u7684\u4e94\u53f7\u70b9\uff0c\u5176\u4e2d\u9ec4\u8272\u662f\u53bb\u7684\u8def\u5f84\uff0c\u7ea2\u8272\u662f\u8fd4\u56de\u7684\u8def\u5f84\uff0c\u56de\u6765\u65f6\u5019\u7ea2\u8272\u7684+\u6807\u8bb0\u5c31\u662f\u628a\u8fd9\u4e2a\u70b9\u52a0\u4e0a\u8fd9\u4e2a\u503c\u3002\n\n\u5982\u679c\u4f60\u8fd8\u662f\u4e0d\u61c2~~\u786e\u5b9e\u5f88\u96be~~\uff0c\u90a3\u4e48\u542c\u6211\u901a\u4fd7\u6765\u8bf4\n\n\u76f8\u5f53\u4e8e\u6211\u4eec\u57285\u53f7\u52a0\u4e0a\u4e86k,\u7136\u540e\u56e0\u4e3a\u9700\u8981\u6ee1\u8db3node[x].sum=node[(x<<1)|1].sum+node[(x<<1)].sum;\n\u6240\u4ee5\u5f80\u4e0a\u4f9d\u7167\u8fd9\u4e2a\u66f4\u65b0\u5c31\u884c\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n```cpp\nvoid add(int i,int y,int x)\n{\n    if(node[i].l==node[i].r)\n\t{//\u5982\u679c\u533a\u95f4\u53ea\u67091\u4e2a\u70b9\uff0c\u90a3\u5c31\u627e\u5230\u4e86\n        node[i].sum+=x;\n        return ;\n    }\n    if(y<=node[i*2].r)\n\tadd(i*2,y,x);\n   else  add(i*2+1,y,x); //\u5411\u5728\u7684\u65b9\u5411\u641c\n   tree[i].sum=node[i*2].sum+node[i*2+1].sum;\n   //\u7ef4\u62a4\u4e00\u4e0b\u4e0b\u5b9a\u7406 \n   return ;\n}\n```\n\n\u7ebf\u6bb5\u6811\u521d\u7ea7\u6559\u5b66 \u5b8c\u6bd5!\n\u5982\u679c\u4f60\u8ba4\u8ba4\u771f\u771f\u5b66\u5b8c\u4e86\uff0c\u800c\u4e14\u90fd\u4f1a\u4e86\uff0c\u4f60\u5c31\u5f97\u5230\u4e86\u4e0d\u9519\u7684\u5165\u95e8\n\n\u6211\u51c6\u5907\u51fa\u4e2a\u4e8c\u7ee7\u7eed\u6df1\u5165\u8bb2\u7ebf\u6bb5\u6811\uff0c\u7801\u5b57\u7ed8\u56fe\u90fd\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u8d70\u884c\u4e0d\u884c\n\n\u5982\u6709\u9519\u8bef\uff0c\u8bf7\u8054\u7cfb\u6211\u8ba2\u6b63",
        "postTime": 1565837255,
        "uid": 144821,
        "name": "_hyc_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\uff0c\u4e00\u79cd\u53ef\u4ee5\u652f\u6301\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u4ed6\u53ef\u4ee5\u5728O(nlogn)\u7684\u65f6\u95f4\u5185\u5b9e\u73b0\u67e5\u8be2\u67d0\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u2026\u2026\u8fd8\u6709\u5f88\u591a\u795e\u5947\u7684\u5185\u5bb9\u3002\n\n\u73b0\u5728\uff0c\u5c31\u8ba9\u6211\u4eec\u8d70\u8fdb\u7ebf\u6bb5\u6811\u7684\u795e\u5947\u4e16\u754c\u5427\uff01\n\n\u6ce8\uff1a\u5168\u7bc7\u7ebf\u6bb5\u6811\u4ee5\u7ef4\u62a4\u533a\u95f4\u548c\u4e3a\u4f8b\u3002\n\n1.\u7ebf\u6bb5\u6811\u7684\u7279\u70b9\u53ca\u539f\u7406\n\n1\uff09\u7ebf\u6bb5\u6811\u8282\u70b9x\u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u4e3a2*x,2*x+1(\u5982\u56fe)\n\n2\uff09\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u7531\u5de6\u53f3\u513f\u5b50\u7ec4\u6210\u3002\n\n\u5176\u4e2d\u6700\u5e95\u5c42\u8282\u70b9\u7684\u533a\u95f4\u4e3a\u5b83\u672c\u8eab\uff08\u5982\u56fe\uff09\n\n3\uff09\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u533a\u95f4\u8fdb\u884c\u4fee\u6539\uff0c\u7ef4\u62a4\u3002\n\n![Segment Tree](https://cdn.luogu.com.cn/upload/pic/60174.png )\n\n2.\u5efa\u6811\n \n1\uff09\u7ebf\u6bb5\u6811\u5728\u5efa\u6811\u65f6\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u7a7a\u95f4\uff0c\u9700\u89814*n\u7684\u7a7a\u95f4\uff0c\u5426\u5219\u4f1aRE\n\n\u56e0\u6b64\uff0c\u672c\u7bc7\u91c7\u7528\u4e00\u79cd\u7701\u7a7a\u95f4\u7684\u65b9\u6cd5\n\n2)  \u7ebf\u6bb5\u6811\u5728\u5efa\u6811\u65f6\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5f80\u4e0b\u9012\u5f52\uff0c\u4e00\u65e6\u9047\u5230\u533a\u95f4\u4ec5\u4e3a\u4e00\u4e2a\u6570\uff0c\u4e3a\u53f6\u5b50\u8282\u70b9\uff08\u5373l==r\uff09\u5219\u8f93\u5165\u503c\uff0c\u5426\u5219\u5c31\u5de6\u53f3\u513f\u5b50\u5411\u4e0b\u9012\u5f52\u3002\n\n \n3)  \u7b80\u6d01\u7684\u5efa\u6811\u4ee3\u7801\n\n```\nstruct T{\n    int l,r,mid,v;//l\u8868\u793a\u533a\u95f4\u5de6\u7aef\u70b9\uff0cr\u8868\u793a\u533a\u95f4\u53f3\u7aef\u70b9\uff0cv\u4ee3\u8868\u6743\u503c \n}t[400005];\n\nvoid build(int root,int l,int r)\n{\n    int mid=(l+r)>>1;//\u6c42\u4e2d\u95f4\u503c \n    t[root].l=l,t[root].r=r,t[root].mid=mid;//\u4fdd\u5b58 \n    if(l==r)//\u5982\u679c\u8bbf\u95ee\u5230\u53f6\u5b50\u8282\u70b9 \n    {\n        t[root].v=read();//\u8f93\u5165 \n        return;\n    }\n    build(root<<1,l,mid);\n    build(root<<1|1,mid+1,r);//\u9012\u5f52\u5de6\u53f3\u513f\u5b50 \n    t[root].v=t[root<<1].v+t[root<<1|1].v;//\u6c42\u503c \n}//\u6ce8:(l+r)>>1==(l+r)/2,root<<1==root*2,root<<1|1==root*2+1(\u5bf9\u6b64\u4e0d\u61c2\uff0c\u53f3\u8f6c\u4f4d\u8fd0\u7b97<<,>>,|(https://en.wikipedia.org/wiki/Operator_associativity\u6216https://www.cnblogs.com/Robin20050901/articles/9869953.html))\n```\n \n3.\u4fee\u6539\n \n1\uff09\u627e\u5230\u5f85\u4fee\u6539\u70b9\uff0c\u5e76\u76f4\u63a5\u4fee\u6539\uff0c\u518d\u5f80\u4e0a\u9012\u5f52\n\n2\uff09\u4ee3\u7801\n\n```\n\nvoid add(int root,int x,int val)\n{\n    if(t[root].l==t[root].r)//\u627e\u5230\u8282\u70b9\n    {\n        t[root].v+=val;\n        return ;\n    }\n    if(x<=t[root].mid)add(root<<1,x,val);\n    else add(root<<1|1,x,val);//\u5de6\u53f3\u9012\u5f52\n    t[root].v=t[root<<1].v+t[root<<1|1].v;//\u6c42\u503c \n}\n```\n\n4.\u67e5\u8be2 \n\n1\uff09\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u9012\u5f52\uff0c\u5982\u679c\u627e\u5230\u6574\u6bb5\u533a\u95f4\uff0c\u5219\u8fd4\u56de\n\n2\uff09\u5982\u679c\u533a\u95f4\u5206\u6210\u4e24\u6bb5\uff0c\u5219\u5de6\u53f3\u5206\u522b\u8ba1\u7b97\uff0c\u8fd4\u56de\u603b\u548c\n\n3\uff09\u4ee3\u7801\n\n```\nint query(int root,int a,int b)\n{\n    int l=t[root].l,r=t[root].r,mid=t[root].mid;\n    if(a==l&&b==r)return t[root].v;\n    if(b<=mid)return query(root<<1,a,b);\n    else if(a>mid)return query(root<<1|1,a,b);\n    else return query(root<<1,a,mid)+query(root<<1|1,mid+1,b);    \n}\n```\n\n---\n\n\u5b66\u5b8c\u4e86\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u77e5\u8bc6\uff08\u5efa\u6811\uff0c\u4fee\u6539\uff0c\u67e5\u8be2\u7b49\u64cd\u4f5c\uff09\u540e\uff0c\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u9898\n\n[Link](https://www.luogu.org/problemnew/show/P3372)\n\n\u8bfb\u5b8c\u8fd9\u9898\uff0c\u662f\u4e0d\u662f\u6709\u8dc3\u8dc3\u6b32\u8bd5\u7684\u611f\u89c9\uff1f\n\n1\uff09\u67e5\u8be2\u533a\u95f4\u548c   \u7b80\u5355\n\n2\uff09\u533a\u95f4\u4fee\u6539\uff1f\uff1f\uff1f \n\n```\nfor(int i=l;i<=r;i++)add(1,i,val);\n```\n\n\u6240\u4ee5\uff0c\u667a\u969c\u7684\u6211\u5c31\u5199\u51fa\u4e86\u8fd9\u6837\u7684\u4ee3\u7801\n\n\u7136\u540e\uff0c\u7a33\u7a33\u7684TLE\n\n\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u4e0a\u8ff0\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n1. \u67e5\u8be2\u64cd\u4f5c O(nlogn)\n\n2. \u533a\u95f4\u4fee\u6539 \u6bcf\u4e00\u6b21\u5355\u70b9\u4fee\u6539O\uff08n\uff09,\u603b\u5171n\u6b21\uff0cO\uff08nlogn\uff09\n\n100000*100000*log(100000)  TLE!!!\n\n\u6240\u4ee5\uff0c\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u2014\u2014\n\n\u61d2\u6807\u8bb0\n\n1.\u61d2\u6807\u8bb0\u7528\u9014\n\n\u61d2\u6807\u8bb0\u7684\u4f5c\u7528\u662f\uff0c\u5728\u533a\u95f4\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u9700\u8981\u4fee\u6539\u7684\u533a\u95f4\u653e\u4e2a\u6807\u8bb0\uff0c\u4e0b\u6b21\u8981\u7528\u7684\u65f6\u5019\u518d\u6253\u5f00\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u628a\u533a\u95f4\u4fee\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3O(log(n\uff09)\n\n2.\u61d2\u6807\u8bb0\u7684\u5b9e\u73b0\n\n\u4e0a\u8ff0\u505a\u6cd5\u56fa\u7136\u89e3\u51b3\u4e86\u533a\u95f4\u4fee\u6539\u7684\u95ee\u9898\n\n\u4f46\u662f\u2014\u2014\n\n\u6211\u4eec\u8981\u67e5\u8be2\u7684\u65f6\u5019\u600e\u4e48\u529e\uff0c\u603b\u4e0d\u80fd\n\n```\ncout<<\"I can't do it\"<<endl;\n```\n\n\u6211\u4eec\u9700\u8981\u2014\u2014\n\n\u628a\u61d2\u6807\u8bb0\u62c6\u4e86\n\n```\nif(tree[root].l==l&&tree[root].r==r)// \u627e\u5230\u533a\u95f4\n        return tree[root].val+tree[root].tag*(r-l+1);// \u8ba1\u7b97\u5e76\u8fd4\u56de\u7b54\u6848\nif(tree[root].tag)//\u5982\u679c\u6709\u61d2\u6807\u8bb0\n{\n    tree[root*2].tag+=tree[root].tag; \n    tree[root*2+1].tag+=tree[root].tag;//\u4e0b\u4f20\u61d2\u6807\u8bb0\n    tree[root].val+=(tree[root].r-tree[root].l+1)*tree[root].tag;//\u8ba1\u7b97\u7b54\u6848\n    tree[root].tag=0;//\u6e05\u7a7a\u6807\u8bb0\n}\n```\n \n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u67e5\u8be2\u548c\u6e05\u9664\u61d2\u6807\u8bb0\u7684\u5de5\u4f5c\u3002\n\n\u56de\u8fc7\u5934\u8c08\u8c08\u4fee\u6539\n\n```\nvoid add(int root,int l,int r,int val)\n{\n    if(tree[root].l==l&&tree[root].r==r)\n    {\n        tree[root].tag+=val;\n        return;\n    }\n    tree[root].val+=(r-l+1)*val;\n    if(tree[root].mid>=r)add(root*2,l,r,val);\n    else if(tree[root].mid<l)add(root*2+1,l,r,val);\n    else add(root*2,l,tree[root].mid,val),add(root*2+1,tree[root].mid+1,r,val);\n}\n```\n\n\n\u627e\u5230\u533a\u95f4\u653e\u6807\u8bb0\uff0c\u56de\u5934\u518d\u6765\u67e5\u7b54\u6848",
        "postTime": 1559723919,
        "uid": 53807,
        "name": "Erusel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u7ebf\u6bb5\u6811 1\n\n\u7ef4\u62a4 \u533a\u95f4\u52a0 \u548c \u533a\u95f4\u6c42\u548c \u7684\u64cd\u4f5c\uff0c\u5c31\u8ba9\u6211\u4eec\u9009\u62e9~~\u7b80\u5355\u7684~~**\u6811\u72b6\u6570\u7ec4**\u6765\u505a\u8fd9\u9053\u9898\u5427\uff08\u5efa\u6811$O(n)$\uff0c\u67e5\u8be2$O(n\\log n)$\uff09\u3002\n\n\n\n\u5bf9\u4e8e**\u8d85\u7ea7\u6811\u72b6\u6570\u7ec4**\uff0c\u8bbe$d_i$\u4e3a\u5dee\u5206\u6570\u7ec4\uff0c\u5229\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u67e5\u8be21\u5230$n$\u7684\u524d\u7f00\u548c\uff1a\n\n\u200b    $\\sum_{i=1}^{n}(n-i+1)*d_i$\n\n$=\\sum_{i=1}^{n}(n+1)*d_i-\\sum_{i=1}^{n}d_i*i$\n\n\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u6709\u4e86\u8be6\u7ec6\u8bb2\u89e3\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a(\u6307\u9488)\n\n```cpp\n#define ll long long\n#define il inline\nenum{N=100023};\n\nll tr[N],tri[N];//(d[],d[]*i)\u7684\u6811\u72b6\u6570\u7ec4\n\nil int lowbit(int x){return x&-x;}\n//\u4f20\u5165\u6570\u7ec4\u6307\u9488\nil void add_(ll *tr,register int i,ll k){\n    for(;i<=n;i+=lowbit(i)) tr[i]+= k;\n}\nil ll query_(ll* tr,register int i){\n    register ll ans= 0;\n    for(;i;i-=lowbit(i)) ans+= tr[i];\n    return ans;\n}\n//\u533a\u95f4\u52a0\uff0c\u67e5\u8be2\u64cd\u4f5c\nil void add(int l,int r,ll k){\n    add_(tr,l,k);\n    add_(tr,r+1,-k);\n    add_(tri,l,l*k);\n    add_(tri,r+1,-k*(r+1));\n}\nil ll query(int l,int r){\n    return\n        (r+1)*query_(tr,r)-\n        query_(tri,r)-\n        (l*query_(tr,l-1)-\n        query_(tri,l-1));\n}\n```\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6781\u5feb\u7684\u65f6\u95f4\u4e2d\u5b8c\u6210\u8fd9\u9053\u9898\u4e86\u3002\n\n\u4f46\u662f\u6bd4\u8f83\u4e8e**\u7ebf\u6bb5\u6811**\u7684$O(n)$\u5efa\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u5efa\u6811\u5c31\u663e\u5f97\u76f8\u5bf9\u4e0d\u4f18\u7f8e\u3002\n\n\u7136\u540e\u6211\u5c31yy\u51fa\u6765\u4e86\u4e00\u4e2a$O(n)$\u5efa\u6811\u7684\u65b9\u6cd5\u3002\n\n\u51fa\u4e8e~~\u7f8e\u5316~~ \u5361\u5e38 \u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u7528**\u524d\u7f00\u548c**\u7684\u601d\u60f3\u6765\u5b9e\u73b0**\u6811\u72b6\u6570\u7ec4**\u7684$O(n)$\u5efa\u6811\u3002\uff08\u901a\u7528\u4e8e\u6240\u6709\u6811\u72b6\u6570\u7ec4\uff09\n\n- \u7528$a_x$\u8868\u793a\u539f\u6570\u7ec4\uff0c\u540c\u65f6$a_x$\u4e5f\u662f\u5dee\u5206\u6570\u7ec4$d_i$\u7684\u524d\u7f00\u548c\uff1b\n\n- \u6839\u636e\u6811\u72b6\u6570\u7ec4\u7684\u5b9a\u4e49\uff0c$tr_x$\u5c31\u7b49\u4e8e$a_x-a_{x-lowbit(x)}$\n\n- \u7c7b\u4f3c\u7684\uff0c\u7528$ai_x$\u8868\u793a\u5dee\u5206\u6570\u7ec4$d_i*i$\u7684\u524d\u7f00\u548c\uff0c\u5373\n\n  $ai_x= \\sum_{i=1}^{x}d_i*i=ai_{x-1}+d_i*i$\n\n- \u90a3\u4e48$tri_x= ai_x-ai_{x-lowbit(x)}$\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nil int read();//\u5feb\u8bfb\nll a[N],ai[N];\nil void build(){\n    n= read();\n    for(register int i=1;i<=n;i++){\n        a[i]= read();\n        ai[i]= ai[i-1]+(a[i]-a[i-1])*i;\n        tr[i]= a[i]-a[i-lowbit(i)];\n        tri[i]= ai[i]-ai[i-lowbit(i)];\n    }\n}\n```\n\ndiss\u7eaa\u5ff5\u3002\n\n*$tim:90ms\\text{ luogu-o2}$\n\n",
        "postTime": 1555666645,
        "uid": 127195,
        "name": "z7z_Eta",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "# \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\n## \u7ebf\u6bb5\u6811\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002**\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570**,_\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a **O(logN)**_ \u3002\u800c\u672a\u4f18\u5316\u7684 _\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a **2N**_ \uff0c\u5b9e\u9645\u5e94\u7528\u65f6\u4e00\u822c\u8fd8**\u8981\u5f004N\u7684\u6570\u7ec4\u4ee5\u514d\u8d8a\u754c**\uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\n\n\u7ebf\u6bb5\u6811\u662f\u5efa\u7acb\u5728\u7ebf\u6bb5\u7684\u57fa\u7840\u4e0a\uff0c**\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4ee3\u8868\u4e86\u4e00\u6761\u7ebf\u6bb5[a,b]**\u3002\u957f\u5ea6\u4e3a1\u7684\u7ebf\u6bb5\u79f0\u4e3a\u5143\u7ebf\u6bb5\u3002\u975e\u5143\u7ebf\u6bb5\u90fd\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9\uff0c**\u5de6\u7ed3\u70b9\u4ee3\u8868\u7684\u7ebf\u6bb5\u4e3a[a,(a + b) / 2]\uff0c\u53f3\u7ed3\u70b9\u4ee3\u8868\u7684\u7ebf\u6bb5\u4e3a[((a + b) / 2\uff09+1,b]**\u3002\n\n\n\u4e0b\u56fe\u5c31\u662f\u4e00\u68f5\u957f\u5ea6\u8303\u56f4\u4e3a[1,10]\u7684\u7ebf\u6bb5\u6811\u3002**\u957f\u5ea6\u8303\u56f4\u4e3a[1,L] \u7684\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\u4e3alog (L) + 1**\u3002\u8fd9\u4e2a\u663e\u7136\uff0c\u800c\u4e14\u5b58\u50a8\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(L\uff09\u3002\u7ebf\u6bb5\u6811\u652f\u6301\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u4e3a\u63d2\u5165\u548c\u5220\u9664\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u4e0b\u9762\u4ee5\u63d2\u5165\u4e3a\u4f8b\uff0c\u8be6\u7ec6\u53d9\u8ff0\uff0c\u5220\u9664\u7c7b\u4f3c\u3002**\u5c06\u4e00\u6761\u7ebf\u6bb5[a,b] \u63d2\u5165\u5230\u4ee3\u8868\u7ebf\u6bb5[l,r]\u7684\u7ed3\u70b9p\u4e2d\uff0c\u5982\u679cp\u4e0d\u662f\u5143\u7ebf\u6bb5\uff0c\u90a3\u4e48\u4ee4mid=\uff08l+r\uff09/2\u3002\u5982\u679cb<mid\uff0c\u90a3\u4e48\u5c06\u7ebf\u6bb5[a,b] \u4e5f\u63d2\u5165\u5230p\u7684\u5de6\u513f\u5b50\u7ed3\u70b9\u4e2d\uff0c\u5982\u679ca>mid\uff0c\u90a3\u4e48\u5c06\u7ebf\u6bb5[a,b] \u4e5f\u63d2\u5165\u5230p\u7684\u53f3\u513f\u5b50\u7ed3\u70b9\u4e2d\u3002\u63d2\u5165\uff08\u5220\u9664\uff09\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08logn\uff09\u3002**\n\n![\u7ebf\u6bb5\u6811](https://baike.baidu.com/pic/\u7ebf\u6bb5\u6811/10983506/0/bd3eb13533fa828bcb5fe85ffe1f4134970a5a09?fr=lemma&ct=single#aid=0&pic=bd3eb13533fa828bcb5fe85ffe1f4134970a5a09)\n\n------------\n\n## \u601d\u8def\u7b80\u6790\n### \u9996\u5148\uff0c\u6211\u4eec\u8981\u5c06\u7ebf\u6bb5\u8f6c\u5316\u6210\u4e00\u68f5\u6811\u7684\u5f62\u5f0f\u3002\n\u5bf9\u4e8e\u7b2c\u4e00\u6b21\u63a5\u89e6\u7ebf\u6bb5\u6811\u7684\u672c\u849f\u84bb\u6765\u8bf4\uff0c\u8fd9\u5c31\u9700\u8981\u4e00\u70b9~~\u52aa~~(zhi)~~\u529b~~(shang)\u4e86\u3002\n```cpp\nint buildtree(int o,int l,int r)//\u6839\uff0c\u5de6\u8282\u70b9\uff0c\u53f3\u8282\u70b9\n{\n\tif(l==r)\n\t{\n\t\ttr[o]=c[l];\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1/* (l+r)/2 */;\n\tbuildtree(o<<1/* o/2 */,l,mid);\n\tbuildtree(o<<1|1/* o/2+1 */,mid+1,r);\n\tpushup(o);\n}\n```\n### \u6811\u5efa\u8d77\u6765\u4ee5\u540e\uff0c\u8981\u80fd\u5c06\u6570\u636e\u4f20\u5165\u548c\u4f20\u51fa\n\u8fd9\u5c31\u9700\u8981\u7528\u5230\u4e0b\u9762\u7684\u4e09\u4e2a\u6838\u5fc3\u51fd\u6570\uff1a** _pushup\u3001pudown_ **\u548c** _update_ **\u4e86\n```cpp\nint pushup(int o)\n{\n\ttr[o]=tr[o<<1]+tr[o<<1|1];\n}\n```\n```cpp\nint pushdown(int o,int r,int l)\n{\n\tint mid=(l+r)>>1;\n\tPlus[o]=0;\n\tPlus[o<<1]+=Plus[o];\n\tPlus[o<<1|1]+=Plus[o];\n\ttr[o<<1]+=Plus[o]+(mid-l+1);\n\ttr[o<<1|1]+=Plus[o<<1|1]*(r-mid);\n}\n```\n```cpp\nint update(int o,int l,int r,int x,int y,int v)\n{\n\tif(x<=l&&y>=r)\n\t{\n\t\tPlus[o]+=v;\n\t\ttr[o]+=v*(r-l+1);\n\t\treturn 0;\n\t}\n\tpushdown(o,l,r);\n\tint mid(l+r)>>1;\n\tif(x<=mid)\n\t{\n\t\tupdate(o<<1,l,mid,x,y,v);\n\t}\n\tif(y>=mid)\n\t{\n\t\tupdate(o<<1|1,mid+1,r,x,y,v);\n\t}\n\tpushup(o);\n}\n```\n### \u6211\u4eec\u8fd8\u9700\u8981\u8ba1\u7b97\u89e3\n\u8fd9\u9700\u8981\u7528\u5230\u4e00\u4e2a\u5d4c\u5957\u578b\u7684\u51fd\u6570\u7528\u6765\u7edf\u8ba1\u6570\u636e\u5e76\u4f20\u51fa\n```cpp\nint query(int o,int l,int r,int x,int y)\n{\n\tif(x<=l&&y>=r)\n\t{\n\t\treturn tr[o];\n\t}\n\tpushdown(o,l,r);\n\tint ans=0;\n\tint mid=(l+r)>>1;\n\tif(x<=mid)\n\t{\n\t\tans+=query(o<<1,l,mid,x,y);\n\t}\n\tif(y>mid)\n\t{\n\t\tans+=query(o<<1|1,mid,r,x,y);\n\t}\n\treturn ans;\n}\n```\n\n------------\n\n\u6211\u4eec\u7684\u4e3b\u8981\u7ed3\u6784\u4e5f\u5c31\u5b8c\u6210\u4e86\uff0cAC\u4ee3\u7801\u5949\u4e0a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint tr[100010<<2],Plus[100010<<2],a[100010];\nlong long pushup(long long o)\n{\n    tr[o]=tr[o<<1]+tr[o<<1|1];\n}\nlong long build(long long o, long long l, long long r)\n{\n    if(l==r)\n    {\n        tr[o]=a[l];\n        return 0;\n    }\n    long long mid=(l+r)>>1;\n    build(o<<1,l,mid);\n    build(o<<1|1,mid+1,r);\n    pushup(o);\n}\nlong long pushdown(long long o,long long l, long long r)\n{\n    if(Plus[o]==0)\n\t{\n\t\treturn 0;\n\t}\n    long long mid=(l+r)>>1;\n    tr[o<<1]+=(mid-l+1)*Plus[o];\n    tr[o<<1|1]+=(r-mid)*Plus[o];\n    Plus[o<<1]+=Plus[o];\n    Plus[o<<1|1]+=Plus[o];\n    Plus[o]=0;\n}\nlong long update(long long o, long long l,long long r,long long x,long long y, long long pl)\n{\n    if(x<=l&&y>=r)\n    {\n        tr[o]+=(r-l+1)*pl;\n        Plus[o]+=pl;\n        return 0;\n    }\n    pushdown(o,l,r);\n    long long mid=(l+r)>>1;\n    if(x<=mid)\n\t{\n\t\tupdate(o<<1,l,mid,x,y,pl);\n\t}\n    if(y>mid)\n\t{\n\t\tupdate(o<<1|1,mid+1,r,x,y,pl);\n\t}\n    pushup(o);\n}\nlong long query(long long o,long long l,long long r,long long x,long long y)\n{\n    if(x<=l&&y>=r)\n    {\n        return tr[o];\n    }\n    pushdown(o,l,r);\n    long long ans=0;\n    long long mid=(l+r)>>1;\n    if(x<=mid)\n\t{\n\t\tans+=query(o<<1,l,mid,x,y);\n\t}\n    if(y>mid)\n\t{\n\t\tans+=query(o<<1|1,mid+1,r,x,y);\n\t}\n    return ans; \n}\nint main()\n{\n    long long n,m,b,c,d,i,x;\n    scanf(\"%lld%lld\",&n,&m);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&a[i]);\n    }\n    build(1,1,n);\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&x);\n        if(x==1)\n        {\n            scanf(\"%lld%lld%lld\",&b,&c,&d);\n            update(1,1,n,b,c,d);\n        }\n\t\telse\n        {\n            scanf(\"%lld%lld\",&b,&c);\n            printf(\"%lld\\n\",query(1,1,n,b,c));\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1538814021,
        "uid": 108750,
        "name": "quotient_0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u73c2\u6735\u8389\u6811\u505a\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u6bd4\u8f83\u4e0d\u968f\u673a\uff0c\u800c\u6211\u4e5f\u6ca1\u6709\u624b\u5199\u4e00\u9897\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u5c31\u88ab\u5361\u6389\u4e86\uff0c\u53ea\u62ff\u4e86[70\u5206](https://www.luogu.org/recordnew/show/11480432)\u3002\n\n------------\n\n\u73c2\u6735\u8389\u6811\u662f\u4e00\u79cd\u57fa\u4e8e\u5e73\u8861\u6811\u7684\uff08\u4f2a\uff09\u9ad8\u6548\u6570\u636e\u7ed3\u6784\u3002\n\n\u5b83\u7684\u6838\u5fc3\u64cd\u4f5c\u662f\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\u3002\n\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u628a\u4e4b\u524d\u7684\u96f6\u96f6\u788e\u788e\u7684\u90fd\u5e72\u6389\uff0c\u7528\u4e00\u4e2a\u7f8e\u800c\u9971\u6ee1\u7684\u5927\u533a\u95f4\u53d6\u4ee3\u3002\n\n\u7136\u540e\u6211\u4eec\u66f4\u65b0\u64cd\u4f5c\u548c\u67e5\u8be2\u64cd\u4f5c\u5c31\u66b4\u529b\u904d\u5386\u4e00\u904d\uff0c\u7edf\u8ba1\u4e00\u4e0b\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n------------\n\n### Split\u64cd\u4f5c\n\n```cpp\ninline set<node>::iterator split(int pos){\n\tset<node>::iterator it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos)return it;\n\t--it;\n\tint L=it->l,R=it->r;long long V=it->v;\n\ts.erase(it),s.insert(node(L,pos-1,V));\n\treturn s.insert(node(pos,R,V)).first;\n}\n```\n\nsplit\u64cd\u4f5c\u5c31\u662f\u83b7\u5f97\u533a\u95f4\u7684\u8fed\u4ee3\u5668\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5148\u627e\u5230pos\u5728\u54ea\u91cc\uff08\u4e5f\u5c31\u662fit\uff09\u3002\n\n\u7136\u540e\u628a\u5b83\u62c6\u6389\uff0c\u518d\u5408\u5728\u4e00\u8d77\u3002\n\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5c31\u53ef\u4ee5\u62ff\u5230\u8fed\u4ee3\u5668\u3002\uff08\u5e72\u4ec0\u4e48\u7b49\u4f1a\u8bf4\uff09\n\n------------\n\n### Update\u64cd\u4f5c\n\n```cpp\ninline void update(int l,int r,long long val=1){\n\tset<node>::iterator itl=split(l),itr=split(r+1);\n    for(;itl!=itr;++itl)itl->v+=val;\n}\n```\n\n\u73b0\u5728\u521a\u624d\u7684split\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\n\u6211\u4eec\u73b0\u5728\u76f8\u5f53\u4e8e\u662f\u83b7\u5f97\u4e86\u533a\u95f4\u7684\u4e24\u7aef\uff08\u4e5f\u662f\u533a\u95f4\uff09\u3002\n\n\u7136\u540e\u66b4\u529b\u904d\u5386\u4e00\u4e0b\uff0c\u7ed9\u6bcf\u4e2a\u533a\u95f4\u90fd\u6253\u4e00\u4e2a\u6807\u8bb0\u3002\n\n------------\n\n### Query\u64cd\u4f5c\n\n```cpp\ninline long long query(int l,int r){\n\tset<node>::iterator itl=split(l),itr=split(r+1);\n\tlong long ans=0;\n\tfor(;itl!=itr;++itl)ans+=(itl->r-itl->l+1)*itl->v;\n\treturn ans;\n}\n```\n\n\u6536\u96c6\u4e00\u4e0b\u6807\u8bb0\u52a0\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\uff0c\u601d\u8def\u548cupdate\u4e00\u6837\u3002\n\n------------\n\n70\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`3741ms 2368kb`\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO{\n\n\ttemplate<typename T>inline void read(T& x){\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor(;c<'0'||c>'9';c=getchar())if(c=='-')f=-1;\n\t\tfor(;c>='0'&&c<='9';c=getchar())x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write(T x){\n\t\tif(x<0)putchar('-'),x*=-1;\n\t\tif(x>=10)write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace ChthollyTree{\n\t\n\tstruct Tree{\n\t\tprivate:\n\t\t\tstruct node{\n\t\t\t\tint l,r;mutable long long v;\n\t\t\t\tnode(int L,int R=-1,long long V=0):l(L),r(R),v(V){}\n\t\t\t\tbool operator < (const node &o)const{\n\t\t\t\t\treturn l<o.l;\n\t\t\t\t} \n\t\t\t};\n\t\t\tset<node>s;\n\t\t\t\n\t\t\tinline set<node>::iterator split(int pos){\n\t\t\t\tset<node>::iterator it=s.lower_bound(node(pos));\n\t\t\t\tif(it!=s.end()&&it->l==pos)return it;\n\t\t\t\t--it;\n\t\t\t\tint L=it->l,R=it->r;long long V=it->v;\n\t\t\t\ts.erase(it),s.insert(node(L,pos-1,V));\n\t\t\t\treturn s.insert(node(pos,R,V)).first;\n\t\t\t}\n\t\t\t\n\t\t\tinline void update(int l,int r,long long val=1){\n\t\t\t\tset<node>::iterator itl=split(l),itr=split(r+1);\n\t\t\t\tfor(;itl!=itr;++itl)itl->v+=val;\n\t\t\t}\n\t\t\t\n\t\t\tinline long long query(int l,int r){\n\t\t\t\tset<node>::iterator itl=split(l),itr=split(r+1);\n\t\t\t\tlong long ans=0;\n\t\t\t\tfor(;itl!=itr;++itl)ans+=(itl->r-itl->l+1)*itl->v;\n\t\t\t\treturn ans;\n\t\t\t}\n\t\t\t\n\t\tpublic:\n\t\t\tTree(){}\n\t\t\t~Tree(){}\n\t\t\t\n\t\t\tinline void Init(int n){\n\t\t\t\ts.insert(node(1,n));\n\t\t\t}\n\t\t\t\n\t\t\tinline void Update(int l,int r,long long val){\n\t\t\t\tupdate(l,r,val);\n\t\t\t}\n\t\t\t\n\t\t\tinline int Query(int l,int r){\n\t\t\t\treturn query(l,r); \n\t\t\t}\n\t};\n\t\n}\n\nusing namespace ChthollyTree;\n\nnamespace Solve{\n\t\n\tconst int N=100100;\n\t\n\tint n,m;\n\tint sum[N];\n\tTree ljz;\n\t\n\tinline void solve(){\n\t\tread(n),read(m);\n\t\tljz.Init(n);\n\t\tfor(register int i=1;i<=n;++i){\n\t\t\tint tmp;read(tmp);\n\t\t\tsum[i]=sum[i-1]+tmp;\n\t\t} \n\t\twhile(m--){\n\t\t\tint op,x,y,z;\n\t\t\tread(op),read(x),read(y);\n\t\t\tif(op==1){\n\t\t\t\tread(z);\n\t\t\t\tljz.Update(x,y,z);\n\t\t\t}else{\n\t\t\t\twrite(ljz.Query(x,y)+sum[y]-sum[x-1]),putchar('\\n');\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nusing namespace Solve;\n\nint main(){\n\tsolve();\n}\n\n```",
        "postTime": 1538642140,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\n## \u7b80\u6d01\u800c\u4f18\u7f8e \u2014 \u6307\u9488Splay\n\nSplay\u4e0a\u53ef\u4ee5\u5b9e\u73b0\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5b9e\u73b0\u7684\u4e00\u5207\u64cd\u4f5c\uff0c\u867d\u7136\u5e38\u6570\u7565\u5927\uff0c\u4f46\u662f\u652f\u6301\u7684\u64cd\u4f5c\u66f4\u591a\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u5408\u5e76\uff0c\u5206\u88c2\u533a\u95f4\uff0c\u5bf9\u533a\u95f4\u7684\u64cd\u4f5c\u66f4\u52a0\u7075\u6d3b\u3002\n\n\u6240\u4ee5\u53ea\u4f1a\u5199P3369\u662f\u4e0d\u591f\u7684\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u5b83\u7684\u7f16\u53f7\u4e0e\u503c\u3002\n\n\u5bf9\u4e8e\u7f16\u53f7\uff0c\u4e2d\u5e8f\u904d\u5386\u4e3a1~n\n\n\u5bf9\u4e8e\u503c\uff0c\u4e2d\u5e8f\u904d\u5386\u4e3a\u539f\u5e8f\u5217\u3002\n\n\u6211\u4eec\u6309\u7f16\u53f7\u8fdb\u884c\u6bd4\u8f83\uff0c\u5176\u4ed6\u64cd\u4f5c\u57fa\u672c\u76f8\u540c\u3002pushdown\u4e0e\u7ebf\u6bb5\u6811\u5dee\u522b\u4e0d\u5927\n\n~~\u81ea\u8ba4\u4e3a\u7801\u98ce\u4e0d\u9519~~\n\n---\n\n## ~~\u8fd8\u4e0d\u4f1aSplay\u7684\u540c\u5b66\uff0c\u4f60\u4eec\u662f\u5426\u4e3a\u7f51\u4e0a\u535a\u5ba2\u4e2d\u90a3\u4e9b\u62bd\u8c61\u7684\u65cb\u8f6c\u3001\u4e0d\u660e\u6240\u4ee5\u7684zig,zag,\u53cc\u65cb\u5224\u65ad\uff0c\u590d\u6742\u7684\u6570\u7ec4\u5d4c\u5957\u800c\u611f\u5230\u56f0\u60d1\uff1f~~\n\n## ~~\u5df2\u7ecf\u4f1aSplay\u7684\u540c\u5b66\uff0c\u4f60\u4eec\u662f\u5426\u4e3a\u590d\u6742\u7684\u4ee3\u7801\uff0c\u7e41\u7410\u7684\u54e8\u5175\u8282\u70b9\u800c\u611f\u5230\u70e6\u8e81\uff1f~~\n\n## ~~Splay\uff0c\u672c\u8be5\u6709\u66f4\u52a0\u6e05\u6670\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u66f4\u52a0\u7b80\u6d01\u7684\u4ee3\u7801\u98ce\u683c\uff01\u800c\u7f51\u4e0a\u5e7f\u4e3a\u6d41\u4f20\u7684\u57fa\u4e8e\u6570\u7ec4\u4e0e\u54e8\u5175\u8282\u70b9\u7684Splay\uff0c\u5df2\u7136\u6210\u4e3a\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u6bd2\u7624\uff01~~\n### $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ By\\ Anson $\n\n\uff08\u5f15\u7528\uff0c\u4fb5\u5220\uff09\n\n---\n\n\u7b97\u4e86\u8fd8\u662f\u4e0d\u5f15\u6218\u4e86\uff0c\u63a5\u4e0b\u6765\u6f14\u793a\u57fa\u4e8e\u6307\u9488\uff0c\u4e0d\u63d2\u54e8\u5175\u8282\u70b9\u7684Splay\u662f\u600e\u4e48\u5199(ya)\u523080\u884c\u5de6\u53f3\u7684\n\n~~\u5176\u5b9e\u771f\u7684\u6ca1\u6709\u66b4\u529b\u538b\u884c~~\n\n```cpp\n/*\n@Date    : 2018-09-30 22:13:46\n@Author  : Adscn (1349957827@qq.com)\n@Link    : https://www.luogu.org/blog/LLCSBlog\n*/\n#include<bits/stdc++.h>\nusing namespace std;\n#define IL inline\n#define RG register\n#define gi getint()\n#define gc getchar()\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nIL int getint()\n{\n    RG int xi=0;\n    RG char ch=gc;\n    bool f=0;\n    while(ch<'0'|ch>'9')ch=='-'?f=1:f,ch=gc;\n    while(ch>='0'&ch<='9')xi=(xi<<1)+(xi<<3)+ch-48,ch=gc;\n    return f?-xi:xi;\n}\ntemplate<typename T>\nIL void pi(T k,char ch=0)\n{\n    if(k<0)k=-k,putchar('-');\n    if(k>=10)pi(k/10);\n    putchar(k%10+'0');\n    if(ch)putchar(ch);\n}\nconst int INF=2147483647;\nint n,m;\nstruct SplayTree{\n    typedef long long ll;\n    struct node;\n    typedef node* tree;\n    struct node{\n        int val,size,pos;\n        ll tot,lzy;\n        tree ch[2],par;\n        node(int v,int po,tree p){par=p,tot=val=v,pos=po,size=1,lzy=0;ch[0]=ch[1]=NULL;}\n    }*root;\n    SplayTree(){root=NULL;}\n    inline bool wson(tree s,tree p){if(!p)return 0;return p->ch[1]==s;}\n    inline void buildfather(tree s,tree p,bool which){s?(s->par=p):0,(p?p->ch[which]:root)=s;}\n    inline int size(tree x){return x?x->size:0;}\n    inline ll tot(tree x){return x?x->tot:0;}\n    inline void pushup(tree x){if(x)x->size=size(x->ch[0])+size(x->ch[1])+1,x->tot=tot(x->ch[0])+tot(x->ch[1])+x->val;}\n    inline void addlzy(tree x,ll lzy){if(x)x->lzy+=lzy,x->tot+=x->size*lzy,x->val+=lzy;}\n    inline void pushdown(tree x)\n    {\n        if(x&&x->lzy)\n        {\n            addlzy(x->ch[0],x->lzy),addlzy(x->ch[1],x->lzy);\n            x->lzy=0;\n        }\n    }\n    inline void rotate(tree x)\n    {\n        tree p=x->par,g=p->par;\n        bool r=wson(x,p);\n        buildfather(x,g,wson(p,g)),buildfather(x->ch[!r],p,r),buildfather(p,x,!r);\n        pushup(p);\n    }\n    inline void Splay(tree x,tree y)\n    {\n        if(!x)return;\n        pushdownall(x);\n        while(x->par!=y)\n        {\n            tree p=x->par,g=p->par;\n            if(g!=y)rotate(wson(x,p)^wson(p,g)?x:p);\n            rotate(x);\n        }\n        pushup(x);\n    }\n    inline void insert(int val,int pos)\n    {\n        if(!root){root=new node(val,pos,NULL);return;}\n        #define nxt (pos>x->pos)\n        for(tree x=root;x;x=x->ch[nxt])\n            if(!x->ch[nxt])\n            {\n                x->ch[nxt]=new node(val,pos,x);\n                Splay(x->ch[nxt],NULL);\n            }\n        #undef nxt\n    }\n    inline tree findkth(int k)\n    {\n        if(k<1||k>n)return NULL;\n        tree x=root;\n        while(1)\n        \tif(size(x->ch[0])>=k)x=x->ch[0];\n        \telse if(size(x->ch[0])+1==k)return x;\n        \telse k-=size(x->ch[0])+1,x=x->ch[1];\n    }\n    inline tree getinterval(int l,int r)\n    {\n        tree L=findkth(l-1),R=findkth(r+1);\n        Splay(L,NULL),Splay(R,L);\n        return l==1&&r==n?root:l==1?root->ch[0]:r==n?root->ch[1]:root->ch[1]->ch[0];\n    }\n    inline void pushdownall(tree k){tree x=root;do pushdown(x);while(x!=k&&(x=x->ch[k->pos>x->pos]));}\n    inline void add(int l,int r,int addv)\n    {\t\n        tree now=getinterval(l,r);\n        addlzy(now,addv);\n        pushup(now->par);if(now->par)pushup(now->par->par); \n    }\n    inline ll Query(int l,int r){ return getinterval(l,r)->tot;}\n}bt;\nint main(void)\n{\n    n=gi,m=gi;\n    for(int i=1;i<=n;i++)bt.insert(gi,i);\n    for(int i=1,l,r;i<=m;i++)\n        if(gi==1&&(l=gi)&&(r=gi))bt.add(l,r,gi);\n        else l=gi,r=gi,pi(bt.Query(l,r),'\\n');\n    return 0;\n}\n```",
        "postTime": 1538318507,
        "uid": 19607,
        "name": "ACA\u306d",
        "ccfLevel": 6,
        "title": "Splay-\u7ebf\u6bb5\u68111"
    },
    {
        "content": "# \u5b89\u5229\u6211\u7684[\u535a\u5ba2](https://www.cnblogs.com/ezoihy/p/8893615.html )\n\n## \u7ebf\u6bb5\u6811\uff1a\n\n#### \u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\n\n#### \u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN\uff09\u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a**2N**\uff0c\u5b9e\u9645\u5e94\u7528\u65f6\u4e00\u822c\u8fd8\u8981\u5f00**4N**\u7684\u6570\u7ec4\u4ee5\u514d\u8d8a\u754c\uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\n\n![](https://images2018.cnblogs.com/blog/1381936/201804/1381936-20180421091933658-1517198337.png)\n\n#### \u5148\u4e0a\u4e00\u4e2a\u70b9\u4fee\u6539\u7684\u6a21\u677f\n\n### \u5fe0\u8bda\u6539\n\n<span style=\"color: #ff0000;\"><del>tips\uff1a\u8fd9\u4e0d\u662f\u6d1b\u8c37P1816\u5594\uff08\u4f46\u662f\u7528\u90a3\u4e2a\u6d4b\u7a0b\u5e8f\u4e5f\u662f\u53ef\u4ee5\u7684</del></span>\n\n#### Time Limit: 1000 ms Memory Limit: 128 MB\n\n\u8001\u7ba1\u5bb6\u662f\u4e00\u4e2a\u806a\u660e\u80fd\u5e72\u7684\u4eba\u3002\u4ed6\u4e3a\u8d22\u4e3b\u5de5\u4f5c\u4e86\u6574\u657410\u5e74\uff0c\u8d22\u4e3b\u4e3a\u4e86\u8ba9\u81ea\u5df2\u8d26\u76ee\u66f4\u52a0\u6e05\u695a\u3002\u8981\u6c42\u7ba1\u5bb6\u6bcf\u5929\u8bb0k\u6b21\u8d26\uff0c\u7531\u4e8e\u7ba1\u5bb6\u806a\u660e\u80fd\u5e72\uff0c\u56e0\u800c\u7ba1\u5bb6\u603b\u662f\u8ba9\u8d22\u4e3b\u5341\u5206\u6ee1\u610f\u3002\u4f46\u662f\u7531\u4e8e\u4e00\u4e9b\u4eba\u7684\u6311\u62e8\uff0c\u8d22\u4e3b\u8fd8\u662f\u5bf9\u7ba1\u5bb6\u4ea7\u751f\u4e86\u6000\u7591\u3002\u4e8e\u662f\u4ed6\u51b3\u5b9a\u7528\u4e00\u79cd\u7279\u522b\u7684\u65b9\u6cd5\u6765\u5224\u65ad\u7ba1\u5bb6\u7684\u5fe0\u8bda\uff0c\u4ed6\u628a\u6bcf\u6b21\u7684\u8d26\u76ee\u63091\uff0c2\uff0c3&hellip;\u7f16\u53f7\uff0c\u7136\u540e\u4e0d\u5b9a\u65f6\u7684\u95ee\u7ba1\u5bb6\u95ee\u9898\uff0c\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff1a\u5728a\u5230b\u53f7\u8d26\u4e2d\u6700\u5c11\u7684\u4e00\u7b14\u662f\u591a\u5c11\uff1f\u4e3a\u4e86\u8ba9\u7ba1\u5bb6\u6ca1\u65f6\u95f4\u4f5c\u5047\u4ed6\u603b\u662f\u4e00\u6b21\u95ee\u591a\u4e2a\u95ee\u9898\u3002\n\n\u5728\u8be2\u95ee\u8fc7\u7a0b\u4e2d\u8d26\u672c\u7684\u5185\u5bb9\u53ef\u80fd\u4f1a\u88ab\u4fee\u6539\n\n#### Input\n\n\u8f93\u5165\u4e2d\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6570m,n\u8868\u793a\u6709m(m&lt;=100000)\u7b14\u8d26,n\u8868\u793a\u6709n\u4e2a\u95ee\u9898\uff0cn&lt;=100000\u3002\n\n\u63a5\u4e0b\u6765\u6bcf\u884c\u4e3a3\u4e2a\u6570\u5b57\uff0c\u7b2c\u4e00\u4e2ap\u4e3a\u6570\u5b571\u6216\u6570\u5b572\uff0c\u7b2c\u4e8c\u4e2a\u6570\u4e3ax\uff0c\u7b2c\u4e09\u4e2a\u6570\u4e3ay\n\n\u5f53p=1 \u5219\u67e5\u8be2x,y\u533a\u95f4\n\n\u5f53p=2 \u5219\u6539\u53d8\u7b2cx\u4e2a\u6570\u4e3ay\n\n#### Output\n\n\u8f93\u51fa\u6587\u4ef6\u4e2d\u4e3a\u6bcf\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u3002\u5177\u4f53\u67e5\u770b\u6837\u4f8b\u3002\n\n#### Sample Input\n\n10 3 \n\n1 2 3 4 5 6 7 8 9 10\n\n1 2 7 \n\n2 2 0 \n\n1 1 10\n\n#### Sample Output\n\n2 0 \n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n \nusing namespace std;\n \nint sum[10000001],n,m;\n \nvoid build(int l,int r,int o){\n    if(l==r){\n        int x;\n        scanf(\"%d\",&x);\n        sum[o]=x;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,o<<1);\n    build(mid+1,r,(o<<1)+1);\n    sum[o]=min(sum[o<<1],sum[(o<<1)+1]);\n}\n \nvoid insert(int l,int r,int x,int o,int v){\n    if(l==r){\n        sum[o]=v;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid)insert(l,mid,x,o<<1,v);\n    else insert(mid+1,r,x,(o<<1)+1,v);\n    sum[o]=min(sum[o<<1],sum[(o<<1)+1]);\n}\n \nint query(int l,int r,int x,int y,int o){\n    if(x<=l and r<=y){\n        return sum[o];\n    }\n    int mid=(l+r)>>1,ans=0x7fffffff;\n    if(x<=mid)ans=query(l,mid,x,y,o<<1);\n    if(y>mid) ans=min(ans,query(mid+1,r,x,y,(o<<1)+1));\n    return ans;\n}\n \nint main(){\n    scanf(\"%d%d\",&n,&m);\n    build(1,n,1);\n    for(int i=1;i<=m;i++){\n        int x;\n        scanf(\"%d\",&x);\n        if(x==1){\n            int y,z;\n            scanf(\"%d%d\",&y,&z);\n            printf(\"%d\\n\",query(1,n,y,z,1));\n        }else if(x==2){\n            int y,z;\n            scanf(\"%d%d\",&y,&z);\n            insert(1,n,y,1,z);\n        }\n    }\n    return 0;\n}\n```\n\n\u4ee5\u4e0a\u7684\u4ee3\u7801\u5341\u5206\uff08\u9003XDDD\n\n# **\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u662f\u5341\u5206\u7684\u7b80\uff08fu\uff09\u5355\uff08za\uff09\u7684**\n\n### \u5206\u522b\u6709\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570\uff1a\n\n### build:\u6784\u5efa\u6574\u68f5\u7ebf\u6bb5\u6811\n\n### pushup:\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u6c42\u7684\u7b54\u6848\u8fdb\u884c\u5f80\u4e0a\u66f4\u65b0\n\n### pushdown:lazy\u6807\u8bb0\u4e0b\u4f20\n\n### update:\u533a\u95f4\u4fee\u6539\uff08\u53ef\u4ee5\u5f53\u505a\u5355\u70b9\u4fee\u6539\u7528\uff09\n\n### query:\u533a\u95f4\u67e5\u8be2\uff08\u548c\uff0c\u6700\u503c\u7b49\uff09\n\n\u5148\u4e0a\u4e00\u4e2a\u4e11\u964b\u7684\u7ebf\u6bb5\u6811 \n![](https://images2018.cnblogs.com/blog/1381936/201804/1381936-20180421091947175-530394571.png)\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u989c\u8272\u7684\u65b9\u5757\uff0c\u5b83\u662f\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9 \n\n\u800c[x,y]\u5c31\u662fx\u5230y\u7684\u4e00\u4e2a\u95ed\u533a\u95f4\u3002\n\n## \u6240\u4ee5\u8fd9\u91cc\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u503c\uff08\u5982\u533a\u95f4\u6700\u503c\u3001\u548c\u7b49\n\n## \u6240\u4ee5\u6211\u4eec\u6b63\u5f0f\u6765\u5b66\u4e60\u4e00\u4e0b\u533a\u95f4\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\uff0c\u521a\u521a\u90a3\u662f\u70b9\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\uff0c\u5728oi\u4f7f\u7528\u4e2d\u7528\u5904\u5341\u5206\u6709\u9650\uff0c\u540c\u65f6\u4e5f\u53ef\u662f\u7528\u533a\u95f4\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u4ee3\u66ff\n\n### \u6240\u4ee5\n\n### \u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u5404\u4e2a\u51fd\u6570\u7684\u7528\u6cd5\uff1a\n\n#### build:\u6784\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\n\n#### update:\u4e0a\u4f20\uff08\u4fee\u6539\uff09\u4e00\u4e2a\u533a\u95f4\uff08\u70b9\uff09\u7684\u503c\uff0c\u53ef\u4ee5\u81f3\u6b64\u533a\u95f4\u52a0\u3001\u51cf\u3001set\u7b49\u64cd\u4f5c\n\n#### query:\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u503c\uff0c\u548c\u7b49\n\n#### pushdown:\u4e0b\u4f20lazytag\n\n## \u7b80\u8ff0\u4e00\u4e0blazytag\n\n\u6211\u4eec\u4e5f\u4f1a\u53d1\u73b0\u6709\u65f6\u5019\u6211\u4eec\u4fee\u6539\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u800c\u8fd9\u4e2a\u533a\u95f4\u5728\u7ebf\u6bb5\u6811\u4e0a\u6709\u4e00\u4e2a\u8282\u70b9\u521a\u597d\u88ab\u8fd9\u4e2a\u533a\u95f4\u6240\u5305\u62ec\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u6253\u6807\u8bb0\u4e5f\u5c31\u662flazytag\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u4e0b\u4f20\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7701\u4e0b\u5f88\u5927\u7684\u590d\u6742\u5ea6\u3002\u5f53\u7136\u6211\u4eec\u5728\u67e5\u8be2\u65f6\u4e5f\u8981\u4e0b\u653e\u6807\u8bb0\u3002\u4e5f\u5c31\u662f\u4e00\u4e2a\u61d2\u60f0\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u4e0b\u653e\u6807\u8bb0\uff0c\u5728\u9700\u8981\u4f7f\u7528\u65f6\u518d\u4e0b\u653e\u6807\u8bb0\u3002\n\n## \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5luogu P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 \u4e3a\u4f8b\n\n\u8fd9\u662f\u7ebf\u6bb5\u6811\u6700\u57fa\u7840\u7684\u4e00\u9898\n\n\u53ef\u80fd\u5927\u5bb6\u5bf9\u4e8elazytag\u8fd8\u662f\u6709\u4e00\u5b9a\u7684\u964c\u751f\uff0c\u4f46\u662f\u6162\u6162\u5c31\u4f1a\u719f\u6089\u7684\n```cpp\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nll a[100001],sum[400001],lazy[400001];\nint n,m;\n\nvoid pushdown(int o,int len){\n    if(lazy[o]){\n        int left=o<<1,right=left+1;\n        lazy[left]+=lazy[o],lazy[right]+=lazy[o];\n        sum[left]+=lazy[o]*(len-(len>>1));\n        sum[right]+=lazy[o]*(len>>1);\n        lazy[o]=0;\n    }\n}\n\nvoid build(int o,int l,int r){\n    if(l==r){\n        scanf(\"%d\",&sum[o]);\n        return;\n    }\n    int mid=(l+r)>>1,left=o<<1,right=left+1;\n    build(left,l,mid),build(right,mid+1,r);\n    sum[o]=sum[right]+sum[left];\n}\n\nvoid update(int o,int l,int r,int x,int y,int v){\n    if(x<=l and r<=y){\n        lazy[o]+=v;\n        sum[o]+=v*(r-l+1);\n        return;\n    }\n    int mid=(l+r)>>1,left=o<<1,right=left+1;\n    pushdown(o,r-l+1);\n    if(x<=mid)update(left,l,mid,x,y,v);\n    if(y>mid)update(right,mid+1,r,x,y,v);\n    sum[o]=sum[left]+sum[right];\n}\n\nll query(int o,int l,int r,int x,int y){\n    if(x<=l and r<=y){\n        return sum[o];\n    }\n    int mid=(l+r)>>1,left=o<<1,right=left+1;\n    ll m=0;\n    pushdown(o,r-l+1);\n    if(x<=mid)m+=query(left,l,mid,x,y);\n    if(mid+1<=y)m+=query(right,mid+1,r,x,y);\n    return m;\n}\n\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    build(1,1,n);\n    for(int i=1;i<=m;i++){\n        int x;\n        scanf(\"%d\",&x);\n        if(x==1){\n            int y,z,q;\n            scanf(\"%d%d%d\",&y,&z,&q);\n            update(1,1,n,y,z,q);\n        }\n        if(x==2){\n            int y,z,q;\n            scanf(\"%d%d\",&y,&z);\n            printf(\"%lld\\n\",query(1,1,n,y,z));\n        }\n    }\n    return 0;\n}\n```\n\n\u7ebf\u6bb5\u6811\u5176\u5b9e\u6211\u4eec\u8fd8\u6709\u522b\u7684\u64cd\u4f5c\uff0c\u5982\u533a\u95f4\u4e58\uff0cset\uff0clca\uff0cgcd\u7b49\u7b49\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bluogu\u7ebf\u6bb5\u68112\n\n\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#define ls o*2\n#define rs o*2+1\n\nusing namespace std;\nint n,m,Mod;\nlong long lazy1[500001],lazy2[500001],sum[500001],a[100001];\n\nvoid pushdown(int o,int l,int r){\n    if(lazy2[o]!=1){\n        int mid=(l+r)/2;\n        lazy2[ls]=(lazy2[ls]*lazy2[o])%Mod;\n        lazy2[rs]=(lazy2[rs]*lazy2[o])%Mod;\n        lazy1[ls]=(lazy1[ls]*lazy2[o])%Mod;\n        lazy1[rs]=(lazy1[rs]*lazy2[o])%Mod;\n        sum[ls]=(sum[ls]*lazy2[o])%Mod;\n        sum[rs]=(sum[rs]*lazy2[o])%Mod;\n        lazy2[o]=1;\n    }\n    if(lazy1[o]){\n        int mid=(l+r)/2;\n        lazy1[ls]=(lazy1[ls]+lazy1[o])%Mod;\n        lazy1[rs]=(lazy1[rs]+lazy1[o])%Mod;\n        sum[ls]=(sum[ls]+lazy1[o]*(mid-l+1))%Mod;\n        sum[rs]=(sum[rs]+lazy1[o]*(r-mid))%Mod;\n        lazy1[o]=0;\n    }\n}\n\nvoid build(int o,int l,int r){\n    lazy2[o]=1;\n    if(l==r){\n        sum[o]=a[l]%Mod;\n        return;\n    }\n    int mid=(l+r)/2;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    sum[o]=(sum[ls]+sum[rs])%Mod;\n}\n\nvoid update(int a,int b,int o,int l,int r,int x){\n    if(a<=l&&b>=r){\n//        pushdown(o,l,r);\n        sum[o]=(sum[o]+x*(r-l+1))%Mod;\n        lazy1[o]=(lazy1[o]+x)%Mod;\n        return;\n    }\n    pushdown(o,l,r);\n    int mid=(l+r)/2;\n    if(a<=mid) update(a,b,ls,l,mid,x);\n    if(b>mid) update(a,b,rs,mid+1,r,x);\n    sum[o]=(sum[ls]+sum[rs])%Mod;\n}\n\nvoid update2(int a,int b,int o,int l,int r,int x){\n    if(a<=l&&b>=r){\n//        pushdown(o,l,r);\n        sum[o]=(sum[o]*x)%Mod;\n        lazy2[o]=(lazy2[o]*x)%Mod;\n        lazy1[o]=(lazy1[o]*x)%Mod;\n        return;\n    }\n    pushdown(o,l,r);\n    int mid=(l+r)/2;\n    if(a<=mid) update2(a,b,ls,l,mid,x);\n    if(b>mid) update2(a,b,rs,mid+1,r,x);\n    sum[o]=(sum[ls]+sum[rs])%Mod;\n}\n\nlong long query(int a,int b,int o,int l,int r){\n    if(a<=l&&b>=r) return sum[o];\n    pushdown(o,l,r);\n    int mid=(l+r)/2;\n    long long qq=0;\n    if(a<=mid) qq=(qq+query(a,b,ls,l,mid))%Mod;\n    if(b>mid) qq=(qq+query(a,b,rs,mid+1,r))%Mod;\n    return qq%Mod;\n}\n\nint main(){\n//    freopen(\"testdata.in\",\"r\",stdin);\n//    freopen(\"hehe.txt\",\"w\",stdout);\n//    for(int i=1;i<500001;i++) lazy2[i]=1;\n    scanf(\"%d%d%d\",&n,&m,&Mod);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    build(1,1,n);\n    for(int i=1;i<=m;i++){\n        int id,x,y,z;\n        scanf(\"%d\",&id);\n        if(id==1){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            update2(x,y,1,1,n,z);\n        }else if(id==2){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            update(x,y,1,1,n,z);\n        }else{\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%lld\\n\",query(x,y,1,1,n));\n        }\n//        printf(\"No.%d %d\\n\",i,query(1,n,1,1,n));\n//        if(i==1) printf(\"checks:%d\\n\",query(1,5,1,1,n));\n    }\n}\n```\n\u3000\u3000\u6709\u65f6\u9891\u7e41\u7684\u6807\u8bb0\u4e0b\u653e\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u6781\u5927\u7684\u5e38\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u5f53\u7136\u521d\u5b66\u8005\u53ef\u4ee5\u5ffd\u7565\u4e0b\u9762\u7684\u5185\u5bb9\u3002\n\n## \u7ebf\u6bb5\u6811\u7684\u6807\u8bb0\u6c38\u4e45\u5316\n\n_\u5176\u5b9e\u7ebf\u6bb5\u6811\u7684\u6807\u8bb0\u6c38\u4e45\u5316\u662f\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u7684\u4e1c\u897f\uff0c\u5f80\u5f80\u6211\u4eec\u90fd\u4f1a\u5728\u533a\u95f4\u64cd\u4f5c\u65f6\u6253lazytag\uff0c\u4f46\u662f\u5728\u6807\u8bb0\u4e0b\u653e\u65f6\u4f1a\u8017\u8d39\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u5c31\u4e0d\u7528\u4e0b\u653e\u6807\u8bb0\uff0c\u540c\u65f6\u4ee3\u7801\u4e5f\u66f4\u52a0\u7b80\u6d01\uff0c\u56e0\u4e3a\u6211\u4eec\u5c11\u4e86\u4e00\u4e2apushdown\u51fd\u6570\uff0c\u540c\u65f6\u51fa\u9519\u7387\u4e5f\u4f1a\u5927\u5927\u964d\u4f4e\u3002\n\u5bf9\u4e8e\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5176\u5b9e\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u6bd4\u8d77\u6765\uff0c\u5176\u5b9e\u5dee\u4e0d\u591a\n_\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\n\ntypedef long long ll;\nint n,m;\nll sum[4000001],tag[4000001]; \n\n\nvoid pushup(int o){\n    sum[o]=sum[o<<1]+sum[o<<1|1]; \n}\n\nvoid build(int o,int l,int r){\n    if(l==r){\n        scanf(\"%lld\",&sum[o]);\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(o<<1,l,mid);\n    build(o<<1|1,mid+1,r);\n    pushup(o);\n}\n\nvoid update(int o,int l,int r,int x,int y,ll v){\n    sum[o]+=((ll)min(r,y)-(ll)max(x,l)+1)*v;\n    if(x<=l and r<=y){\n        tag[o]+=v;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid){\n        update(o<<1,l,mid,x,y,v);\n    }\n    if(y>mid){\n        update(o<<1|1,mid+1,r,x,y,v);\n    }\n}\n\nll query(int o,int l,int r,ll tg,int x,int y){\n    if(x<=l and r<=y){\n        return sum[o]+(ll)(min(r,y)-max(x,l)+1)*(tg);\n    }\n    int mid=(l+r)>>1;\n    ll ret=0;\n    if(x<=mid){\n        ret+=query(o<<1,l,mid,tg+tag[o],x,y);\n    }\n    if(y>mid){\n        ret+=query(o<<1|1,mid+1,r,tg+tag[o],x,y);\n    }\n    return ret;\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    build(1,1,n);\n    for(int i=1;i<=m;i++){\n        int opt;\n        scanf(\"%d\",&opt);\n        if(opt==1){\n            int x,y;\n            ll z;\n            scanf(\"%d%d%lld\",&x,&y,&z);\n            update(1,1,n,x,y,z);\n        }else{\n            int x,y;\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%lld\\n\",query(1,1,n,0,x,y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1533259808,
        "uid": 48146,
        "name": "ezoiHY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u4ec0\u4e48\uff1f\u4e00\u905351\u7bc7\u9898\u89e3\u7684\u6a21\u677f\u9898\u5c45\u7136\u53ea\u6709\u4e09\u7bc7pascal\uff0c\u6211P\u515a\u8868\u793a\u4e0d\u670d\uff01\n\n# \u89e3\u6cd5\uff1a\u6b63\u5b97\u7ebf\u6bb5\u6811\uff08\u533a\u95f4\u66f4\u65b0&\u533a\u95f4\u67e5\u8be2\uff09\n\n\u8be6\u89e3\uff1a\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u64cd\u4f5c\uff0c\u6211\u4eec\u8003\u8651\u5f15\u5165\u4e00\u4e2a\u540d\u53eb\u201c\u00a0lazy\u00a0tag\u00a0\u201d\uff08\u61d2\u6807\u8bb0\uff09\u7684\u4e1c\u897f\u2014\u2014\u4e4b\u6240\u4ee5\u79f0\u5176\u201c\u00a0lazy\u201d\uff0c\u662f\u56e0\u4e3a\u539f\u672c\u533a\u95f4\u4fee\u6539\u9700\u8981\u901a\u8fc7\u5148\u6539\u53d8\u53f6\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u4e0d\u65ad\u5730\u5411\u4e0a\u9012\u5f52\u4fee\u6539\u7956\u5148\u8282\u70b9\u76f4\u81f3\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u00a0O(nlogn) \u7684\u7ea7\u522b\u3002\u4f46\u5f53\u6211\u4eec\u5f15\u5165\u4e86\u61d2\u6807\u8bb0\u4e4b\u540e\uff0c\u533a\u95f4\u66f4\u65b0\u7684\u671f\u671b\u590d\u6742\u5ea6\u5c31\u964d\u5230\u4e86\u00a0O(logn) \u7684\u7ea7\u522b\u4e14\u751a\u81f3\u4f1a\u66f4\u4f4e.\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u5176\u62c6\u5206\u6210\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u6240\u793a\u7684\u533a\u95f4\uff0c\u4e4b\u540e\u5206\u5f00\u5904\u7406\uff1a\n\u5982\u679c\u5355\u4e2a\u5143\u7d20\u88ab\u5305\u542b\u5c31\u53ea\u6539\u53d8\u81ea\u5df1\uff0c\u5982\u679c\u6574\u4e2a\u533a\u95f4\u88ab\u5305\u542b\u5c31\u4fee\u6539\u6574\u4e2a\u533a\u95f4\n\u6210\u6bb5\u66f4\u65b0(\u901a\u5e38\u8fd9\u5bf9\u521d\u5b66\u8005\u6765\u8bf4\u662f\u4e00\u9053\u574e),\u9700\u8981\u7528\u5230\u61d2\u60f0\u6807\u8bb0,\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u4e0d\u8981\u66f4\u65b0\u5230\u5e95,\u7528\u5ef6\u8fdf\u6807\u8bb0\u4f7f\u5f97\u66f4\u65b0\u5ef6\u8fdf\u5230\u4e0b\u6b21\u9700\u8981\u66f4\u65b0or\u8be2\u95ee\u5230\u7684\u65f6\u5019\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\n\n\n\u4e2a\u4eba\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u8fd8\u662f\u633a\u597d\u770b\u7684\n\n```pascal\n//\u6ce8\u610f\uff01\u8fd9\u91cc\u4e00\u5b9a\u8981\u5f00INT64\uff0c\u88ab\u5751\u4e86\u597d\u51e0\u6b21\uff01\uff01\uff01\nvar a:array[1..100005]of int64;\n    sum,lazy:array[1..400005]of int64;\n    n,m,i,b,x,y,z:int64;\nprocedure pushup(rt:int64);//\u5b50\u8282\u70b9\u66f4\u65b0\uff0c\u7236\u8282\u70b9\u4e5f\u8981\u66f4\u65b0\nbegin\n sum[rt]:=sum[rt shl 1]+sum[(rt shl 1)or 1];\nend;\nprocedure build(l,r,rt:int64);//\u57fa\u7840\u7684\u5efa\u6811\nvar mid:int64;\nbegin\n if l=r then\n  begin\n   sum[rt]:=a[l];\n   exit;\n  end;\n mid:=(l+r) shr 1;\n build(l,mid,rt shl 1);\n build(mid+1,r,(rt shl 1)or 1);\n pushup(rt);\nend;\nprocedure pushdown(rt,ln,rn:int64);//\u61d2\u6807\u8bb0\u7684\u4e0b\u653e\nbegin\n if(lazy[rt]<>0)then\n  begin\n   lazy[rt shl 1]:=lazy[rt shl 1]+lazy[rt];\n   lazy[(rt shl 1)or 1]:=lazy[(rt shl 1)or 1]+lazy[rt];\n   sum[rt shl 1]:=sum[rt shl 1]+lazy[rt]*ln;\n   sum[(rt shl 1)or 1]:=sum[(rt shl 1) or 1]+lazy[rt]*rn;\n   lazy[rt]:=0;\n  end;\nend;\nprocedure update(x,y,c,l,r,rt:int64);//\u533a\u95f4\u66f4\u65b0\nvar mid:int64;\nbegin\n if(x<=l)and(r<=y)then\n  begin\n   sum[rt]:=sum[rt]+c*(r-l+1);\n   lazy[rt]:=lazy[rt]+c;\n   exit;\n  end;\n mid:=(l+r) shr 1;\n pushdown(rt,mid-l+1,r-mid);\n if x<=mid then update(x,y,c,l,mid,rt shl 1);\n if y>mid then update(x,y,c,mid+1,r,(rt shl 1)or 1);\n pushup(rt);\nend;\nfunction query(x,y,l,r,rt:int64):int64;//\u67e5\u8be2\u51fd\u6570\nvar mid,ans:int64;\nbegin\n if (x<=l)and(r<=y) then exit(sum[rt]);\n ans:=0;\n mid:=(l+r) shr 1;\n pushdown(rt,mid-l+1,r-mid);\n if (x<=mid) then ans:=ans+query(x,y,l,mid,rt shl 1);\n if (y>mid) then ans:=ans+query(x,y,mid+1,r,(rt shl 1)or 1);\n exit(ans);\n //\u8fd9\u91cc\u7684shr,shl,or \u90fd\u662f\u4f4d\u8fd0\u7b97\uff0c\u76f8\u5f53\u4e8ediv 2,*2,+1\nend;\nbegin\n readln(n,m);\n for i:=1 to n do\n  read(a[i]);\n build(1,n,1);\n for i:=1 to m do\n  begin\n   read(b);\n   if b=1 then\n    begin\n     readln(x,y,z);\n     update(x,y,z,1,n,1);\n    end\n   else\n    begin\n     read(x,y);\n     writeln(query(x,y,1,n,1));\n    end;\n  end;\nend.\n```\n\u90e8\u5206\u5185\u5bb9\u6458\u6284\u81ea\u7f51\u7edc&\u7801\u5b57\u7d2f\uff0c\u6c42\u901a\u8fc7\n",
        "postTime": 1532659532,
        "uid": 59364,
        "name": "\u571f\u95f4\u592a\u5e73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u4eca\u5929\u521a\u5b66\u4e86\u5206\u5757\uff0c\u5728\u8fd9\u91cc\u8bd5\u4e86\u4e00\u4e0b\n```cpp\n#include <bits/stdc++.h>\n#define N 100000+100\nusing namespace std;\nint n,blo,bl[N];\nlong long sum[N],atag[N],v[N];\nvoid updata(int x,int y,long long data)\n{\n    for (int i=x;i<=min(y,bl[x]*blo);++i)v[i]+=data,sum[bl[x]]+=data;/*\u5904\u7406x\u6240\u5728\u7684\u4e0d\u5b8c\u6574\u7684\u5757*/\n    if (bl[x]!=bl[y])\n        for (int i=(bl[y]-1)*blo+1;i<=y;++i)\n            v[i]+=data,sum[bl[y]]+=data;/*\u5982\u679cx\u4e0ey\u4e0d\u5728\u540c\u4e00\u4e2a\u5757\uff0c\u5904\u7406y\u6240\u5728\u7684\u4e0d\u5b8c\u6574\u7684\u5757*/\n    for (int i=bl[x]+1;i<bl[y];++i)atag[i]+=data;/*\u5904\u7406x\uff0cy\u4e4b\u95f4\u7684\u6574\u5757*/\n}\nlong long query(int x,int y)\n{\n//\u8ba1\u7b97\u533a\u95f4\u548c\uff0c\u4e0eupdata\u7684\u5904\u7406\u65b9\u6cd5\u76f8\u540c\uff0c\u5148\u5904\u7406\u4e0d\u5b8c\u6574\u5757\uff0c\u518d\u5904\u7406\u6574\u5757\n    long long ans=0;\n    for (int i=x;i<=min(bl[x]*blo,y);++i)ans+=v[i]+atag[bl[x]];\n    if (bl[x]!=bl[y])\n        for (int i=(bl[y]-1)*blo+1;i<=y;++i)\n           ans+=v[i]+atag[bl[y]];\n    for (int i=bl[x]+1;i<bl[y];++i)ans+=sum[i]+atag[i]*blo;\n    return ans;\n}\nint main(void)\n{\n    int m;\n    scanf(\"%d%d\",&n,&m);\n    blo=sqrt(n);//\u8bbe\u6709n\u4e2a\u70b9\uff0cm\u4e2a\u5757\uff0c\u5219\u590d\u6742\u5ea6\u4e3aO(n/m)+O(n)\uff0c\u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c\u53d6\u6839\u53f7n\u4e2a\u5757\u662f\u6700\u5feb\u7684\n    for (int i=1;i<=n;++i)bl[i]=(i-1)/blo+1;//i\u5bf9\u5e94\u7b2cbl[i]\u4e2a\u5757\n    for (int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",v+i);\n        sum[bl[i]]+=v[i];//\u9884\u5904\u7406\u7b2ci\u4e2a\u6574\u5757\u7684\u548c\n    }\n    for (int i=1;i<=m;++i)\n    {\n        int cz,a,b;\n        scanf(\"%d%d%d\",&cz,&a,&b);\n        if (cz==2)printf(\"%lld\\n\",query(a,b));\n        else\n        {\n            long long c;\n            scanf(\"%lld\",&c);\n            updata(a,b,c);\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1530755187,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u867d\u7136\u8fd9\u9053\u9898\u662f\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\uff0c\u7136\u800c\u6211\u53c8\u61d2\u5f97\u6253\u7ebf\u6bb5\u6811\u7684\u4ee3\u7801\uff0c\u51b5\u4e14\u6d1b\u8c37\u4e5f\u6ca1\u6709\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u6a21\u677f\u9898\uff0c\u4e8e\u662f\u6211\u5c31\u6765\u53d1\u4e2a\u6811\u72b6\u6570\u7ec4\u5427\uff01\uff08\u8fd9\u5c31\u662f\u4f60\u6c34\u9898\u7684\u7406\u7531\uff1f\uff1f\uff1f\uff09\n\u597d\u4e86\u8fdb\u5165\u6b63\u6587\u5427\n\n\n\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u5f88\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7528\u4e8e\u67e5\u8be2\u4efb\u610f\u4e24\u4f4d\u4e4b\u95f4\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u4f46\u662f\u6bcf\u6b21\u53ea\u80fd\u4fee\u6539\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff1b\u7ecf\u8fc7\u7b80\u5355\u4fee\u6539\u53ef\u4ee5\u5728log(n)\u7684\u590d\u6742\u5ea6\u4e0b\u8fdb\u884c\u8303\u56f4\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u65f6\u53ea\u80fd\u67e5\u8be2\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u503c(\u5982\u679c\u52a0\u5165\u591a\u4e2a\u8f85\u52a9\u6570\u7ec4\u5219\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2)\u3002\n\n\u63a5\u4e0b\u6765\u53d1\u4e2a\u56fe\u5427!![](http://s16.sinaimg.cn/middle/afe6bb33gc9f752512d9f&690)\n!\n\n\u5b9a\u4e49sum(i)=a[1]+a[2]+...+a[i]\n\n\u4e3a\u4e86\u5b9e\u73b0\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u5728\u6b64\u5f15\u5165\u5dee\u5206\u6570\u7ec4d[i]=a[i]-a[i-1],\u5728\u4fee\u6539\u533a\u95f4[l,r]\u65f6\u5c31\u53ea\u7528\u4fee\u6539d[l]\u548cd[r+1]\u5c31\u53ef\u4ee5\u4e86~\u6240\u4ee5sum(i)=d[1]+(d[1]+d[2])+(d[1]+d[2]+d[3])+...+(d[1]+d[2]+d[3]+...+d[i])\n\n\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0cc1\u8bb0\u5f55d[i],c2\u8bb0\u5f55(i-1)*d[i] (d[i]=a[i]-a[i-1])\n\nsum(n)=n*sum(c1,n)-sum(c2,n);\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```pascal\nvar\n c1,c2,d,a:array[0..100005]of int64;\n n,i,j,q,a1,b1,t,cz,x:longint;\nfunction lowbit(x:longint):longint;\nbegin\n exit(x and (-x));\nend;\nprocedure add(x,s:longint);//\u5c06a[x]\u52a0\u4e0as\nvar\n pre:longint;\nbegin\n pre:=x;\n while x<=n do\n begin\n  c1[x]:=c1[x]+s*(pre-1);\n  c2[x]:=c2[x]+s;\n  x:=x+lowbit(x);\n end;\nend;\nfunction sum(x:longint):int64;//\u89c1\u4e0a\nvar\n s,pre:int64;\nbegin\n s:=0;\n pre:=x;\n while x>0 do\n begin\n  s:=s-c1[x]+pre*c2[x];\n  x:=x-lowbit(x);\n end;\n exit(s);\nend;\nbegin\n readln(n,q);\n for i:=1 to n do\n begin\n  read(a[i]);\n  d[i]:=a[i]-a[i-1];//\u6c42\u51fa\u5dee\u5206\u6570\u7ec4\n  add(i,d[i]);//\u521d\u59cb\u5316\n end;\n for i:=1 to q do\n begin\n  read(cz);\n  if cz=1 then\n  begin\n   read(a1,b1,x);\n   add(a1,x);\n   add(b1+1,-x);//\u6267\u884c\u533a\u95f4\u4fee\u6539\n  end else\n  begin\n   read(a1,b1);\n   writeln(sum(b1)-sum(a1-1));//\u6c42\u548c\n  end;\n end;\nend.\n```",
        "postTime": 1528556338,
        "uid": 49498,
        "name": "Ritsuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "### \u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591a\u9898\u89e3\u6211\u8fd8\u8981\u53d1\u9898\u89e3\u5462\uff1f\n## \u56e0\u4e3a\u6211\u7528\u7684Java \u5bfc\u81f4\u4e86\u6211IO\u6210\u672c\u975e\u5e38\u9ad8\uff08p\u515a\uff0cjs\u4f60\u4eec\u4e5f\u4e00\u6837\uff09\n#### \u7ebf\u6bb5\u6811\u6a21\u677f+lazy\u6807\u8bb0\u697c\u4e0b\u5927\u4f6c\u7684\u9898\u89e3\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u8fd9\u91cc\u8bf4\u4e0b\u975eC/C++\u8bed\u8a00\u7684\u95ee\u9898\uff0c\u540e\u4e24\u4e2a\u70b9\u5bfc\u81f4\u4f60\u7684IO\u6210\u672c\u6025\u5267\u4e0a\u5347\u3002\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u91cc\u4ecb\u7ecdACM Java\u7ec4\u5fc5\u5907\u7684**StreamTokenizer\u7c7b**\n\uff08\u672c\u6765\u8fd9\u9053\u9898\u6211\u4ee5\u4e3a\u662f\u4e0d\u7528\u7684\uff0c\u7ed3\u679c2203ms\uff0c\u8138\u597d\u75db\u3002\u6548\u679c\u5b9e\u6d4b550ms\uff09\n\n\u7b80\u4ecb\uff1a\n\u51e0\u79cd\u57fa\u672c\u7684\u5e38\u91cf\u7528\u4e8e\u6807\u8bc6\u89e3\u6790\u8fc7\u7a0b\uff1aTT_EOF(\u6d41\u7ed3\u5c3e)\u3001TT_EOL(\u884c\u7ed3\u5c3e)\u3001TT_NUMBER(\u6570\u5b57\u7b26\u53f7, 0 1 2 3 4 5 6 7 8 9 . -\u90fd\u5c5e\u4e8e\u6570\u5b57\u8bed\u6cd5)\u3001TT_WORD(\u4e00\u4e2a\u5355\u8bcd)\u3002\n\n\u7279\u70b9\uff1a\n1\u3001\u7c7bjava.io.StreamTokenizer\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u6d41\u5e76\u5c06\u5176\u5206\u6790\u4e3aToken\uff08\u6807\u8bb0\uff09\u3002 \nStreamTokenizer\u7684nextToken\u65b9\u6cd5\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u6807\u8bb0 \n\n2\u3001\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cStreamTokenizer\u8ba4\u4e3a\u4e0b\u5217\u5185\u5bb9\u662fToken:\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u9664c\u548cc++\u6ce8\u91ca\u7b26\u53f7\u4ee5\u5916\u7684\u5176\u4ed6\u7b26\u53f7\u3002\n     \u5982\u7b26\u53f7\u201c/\u201d\u4e0d\u662fToken\uff0c\u6ce8\u91ca\u540e\u7684\u5185\u5bb9\u4e5f\u4e0d\u662f\uff0c\u800c\"/\"\u662fToken\u3002\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u4ee5\u53ca\u5176\u603b\u7684\u5185\u5bb9\uff0c\u53ea\u80fd\u7b97\u4e00\u4e2aToken\u3002 \n3\u3001\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u4f7f\u7528BufferedReader\uff0c\u5982\u4e0b\uff0c\u521b\u5efaStreamTokenizer\u5bf9\u8c61 \n\n\u4e0b\u9762\u8d34\u4ee3\u7801\n```java\npackage \u6d1b\u8c37;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.StreamTokenizer;\nimport java.util.Arrays;\n\npublic class P3372\u6a21\u677f\u7ebf\u6bb5\u68111\n{\n\tstatic final int MAX_SIZE = 1000001;\n\tstatic long tree[] = new long[MAX_SIZE << 2];// n*4\u5fc5\u5b9a\u4e0d\u8fc7\u754c\n\tstatic long lazyTag[] = new long[MAX_SIZE << 2];// \u61d2\u60f0\u6807\u8bb0\n\tstatic int a[] = new int[MAX_SIZE];// \u9700\u8981\u6784\u5efa\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\n\tstatic int N, M;// N\u5f53\u524d\u6570\u636e\u91cf M\u64cd\u4f5c\u6570\u4e2a\u6570\n\n\tstatic StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\tstatic PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n\tpublic static int nextInt() throws IOException\n\t{\n\t\tin.nextToken();\n\t\treturn (int) in.nval;\n\t}\n\n\tpublic static String next() throws IOException\n\t{\n\t\tin.nextToken();\n\t\treturn (String) in.sval;\n\t}\n\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\twhile (in.nextToken() != StreamTokenizer.TT_EOF)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tN = (int) in.nval;\n\t\tM = nextInt();\n\t\tfor (int i = 0; i < N; i++)\n\t\t{\n\t\t\ta[i + 1] = nextInt();\n\t\t}\n\t\tbuild(1, 1, N);\n\t\tfor (int i = 0; i < M; i++)\n\t\t{\n\t\t\tint opr = nextInt();\n\t\t\tif (opr == 1)\n\t\t\t{\n\t\t\t\tint x = nextInt();\n\t\t\t\tint y = nextInt();\n\t\t\t\tint k = nextInt();\n\t\t\t\tupdate(x, y, 1, 1, N, k);\n\t\t\t} else\n\t\t\t{\n\n\t\t\t\tint x = nextInt();\n\t\t\t\tint y = nextInt();\n\t\t\t\tout.println(query(x, y, 1, N, 1));\n\t\t\t}\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\n\t}\n\n\n\t/**\n\t * \u5de6\u5b69\u5b50\u7684\u7d22\u5f15\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @return\n\t */\n\tpublic static int leftChild(int p)\n\t{\n\t\treturn p << 1;// p*2\n\t}\n\n\t/**\n\t * \u53f3\u5b69\u5b50\u7684\u7d22\u5f15\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @return\n\t */\n\tpublic static int rightChild(int p)\n\t{\n\t\treturn (p << 1) | 1;// p*2+1\n\t}\n\n\t/**\n\t * \u5148\u53bb\u6574\u5408\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u518d\u5411\u5b83\u4eec\u7684\u7956\u5148\u56de\u6eaf\u6574\u5408\u4e4b\u540e\u7684\u4fe1\u606f \u5411\u4e0a\u4f20\u5bfc\u4fe1\u606f\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t */\n\tpublic static void pushUp(int p)\n\t{\n\t\ttree[p] = tree[leftChild(p)] + tree[rightChild(p)];\n\t}\n\n\t/**\n\t * \u5efa\u6811\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @param l\n\t *            \u5de6\u8fb9\u754c\n\t * @param r\n\t *            \u53f3\u8fb9\u754c\n\t */\n\tpublic static void build(int p, int l, int r)\n\t{\n\t\tlazyTag[p] = 0;\n\t\t// \u5982\u679c\u5de6\u53f3\u533a\u95f4\u76f8\u540c\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u53f6\u5b50\u8282\u70b9\u5566\uff0c\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u662f\u88ab\u771f\u5b9e\u8d4b\u503c\u7684\n\t\tif (l == r)\n\t\t{\n\t\t\ttree[p] = a[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;// /2\n\t\tbuild(leftChild(p), l, mid);\n\t\tbuild(rightChild(p), mid + 1, r);\n\t\tpushUp(p);\n\t}\n\n\t/**\n\t * \u533a\u95f4\u66f4\u65b0 \u5355\u70b9\u4fee\u6539\u5c31\u662f\u533a\u95f4\u66f4\u65b0\u7684\u7279\u4f8b\n\t * \n\t * @param needL\n\t *            \u9700\u8981\u4fee\u6539\u7684\u5de6\u8fb9\u754c\n\t * @param needR\n\t *            \u9700\u8981\u4fee\u6539\u7684\u53f3\u8fb9\u754c\n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @param l\n\t *            \u5f53\u524d\u8282\u70b9\u6240\u5b58\u50a8\u7684\u533a\u95f4\u7684\u5de6\u8fb9\u754c\n\t * @param r\n\t *            \u5f53\u524d\u8282\u70b9\u6240\u5b58\u50a8\u7684\u533a\u95f4\u7684\u53f3\u8fb9\u754c\n\t * @param k\n\t *            \u4fee\u6539\u7684\u503c\n\t */\n\tpublic static void update(int needL, int needR, int p, int l, int r, int k)\n\t{\n\n\t\tif (needL <= l && r <= needR)\n\t\t{\n\t\t\ttree[p] += k * (r - l + 1);\n\t\t\tlazyTag[p] += k;\n\t\t\treturn;\n\t\t}\n\n\t\tpushDown(p, l, r);\n\n\t\tint mid = (l + r) >> 1;// /2\n\n\t\tif (needL <= mid)\n\t\t{\n\t\t\tupdate(needL, needR, leftChild(p), l, mid, k);\n\t\t}\n\t\tif (needR > mid)\n\t\t{\n\t\t\tupdate(needL, needR, rightChild(p), mid + 1, r, k);\n\t\t}\n\t\t// \u66f4\u65b0\u5b8c\u5b50\u8282\u70b9\u540e\u66f4\u65b0\u81ea\u5df1\n\t\tpushUp(p);\n\t}\n\n\t/**\n\t * \u5411\u4e0b\u66f4\u65b0\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @param l\n\t *            \u5de6\u8fb9\u754c\n\t * @param r\n\t *            \u53f3\u8fb9\u754c\n\t */\n\tpublic static void pushDown(int p, int l, int r)\n\t{\n\t\tint mid = (l + r) >> 1;// /2\n\t\t// \u6bcf\u6b21\u66f4\u65b0\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\n\t\tf(leftChild(p), l, mid, lazyTag[p]);\n\t\tf(rightChild(p), mid + 1, r, lazyTag[p]);\n\t\tlazyTag[p] = 0;// \u672c\u8282\u70b9\u4e0d\u518dlazy\u4e86\n\t}\n\n\t/**\n\t * \u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\n\t * \n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t * @param l\n\t *            \u5de6\u8fb9\u754c\n\t * @param r\n\t *            \u53f3\u8fb9\u754c\n\t * @param k\n\t *            \u8981\u66f4\u65b0\u7684\u503c\n\t */\n\tpublic static void f(int p, int l, int r, long k)\n\t{\n\t\tlazyTag[p] = lazyTag[p] + k;\n\t\ttree[p] = tree[p] + k * (r - l + 1);// \u7531\u4e8e\u662f\u8fd9\u4e2a\u533a\u95f4\u7edf\u4e00\u6539\u53d8\u6545\u6539\u53d8\u591a\u5c11\uff0c\u5c31\u589e\u52a0\u591a\u5c11\n\t}\n\n\t/**\n\t * \u533a\u95f4\u67e5\u8be2\n\t * \n\t * @param queryX\n\t *            \u67e5\u8be2\u5de6\u8fb9\u754c\n\t * @param queryY\n\t *            \u67e5\u8be2\u53f3\u8fb9\u754c\n\t * @param l\n\t *            \u5de6\u8fb9\u754c\n\t * @param r\n\t *            \u53f3\u8fb9\u754c\n\t * @param p\n\t *            \u5f53\u524d\u8282\u70b9\n\t */\n\tpublic static long query(int queryX, int queryY, int l, int r, int p)\n\t{\n\t\tlong result = 0;\n\t\tif (queryX <= l && r <= queryY)\n\t\t{\n\t\t\treturn tree[p];\n\t\t}\n\t\tint mid = (l + r) >> 1;// /2\n\t\tpushDown(p, l, r);\n\t\tif (queryX <= mid)\n\t\t{\n\t\t\tresult += query(queryX, queryY, l, mid, leftChild(p));\n\t\t}\n\t\tif (queryY > mid)\n\t\t{\n\t\t\tresult += query(queryX, queryY, mid + 1, r, rightChild(p));\n\t\t}\n\t\treturn result;\n\t}\n}\n\n```",
        "postTime": 1526986544,
        "uid": 43671,
        "name": "\u5b64\u72ec\u7684\u89c2\u6d4b\u8005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "1. \u5c31\u88f8\u677f\u5b50\uff0c\u5f80\u719f\u4e86\u6253\u5457\n2. \u6ce8\u610f\u5f00long long\uff0c\u5426\u5219\u53ea\u670970\u5206\uff01\n3. \u5404\u79cd\u51fd\u6570\u7684\u53d8\u91cf\u987a\u5e8f\u4e00\u5b9a\u8981\u6709\u81ea\u5df1\u7684\u98ce\u683c\uff0c\u4e0d\u7136\u4e71\u5199\u7684\u8bdd\u975e\u5e38\u96be\u8c03\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n\n#define mid  (l+r)/2\n#define lson (pos<<1)\n#define rson ((pos<<1)|1)\n#define maxn 100007 //\u5143\u7d20\u4e2a\u6570\n\nll n,m;\nll root=1;\nll arr[maxn];\nll Lazy[maxn<<2];//\u533a\u95f4\u589e\u52a0\u7684lazy\u6807\u8bb0\n/*\u5176\u76ee\u7684\u662f\uff1a\n            \u4e3a\u9632\u6b62\u4fee\u6539\u533a\u95f4\u603b\u7ed3\u70b9\u5bf9\u6bcf\u4e2a\u5b50\u8282\u70b9\u90fd\u8981\u8fdb\u884c\u4fee\u6539\uff0c\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\n            \u6682\u65f6\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u533a\u95f4\u603b\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u6811\u90fd\u201c\u5f85\u4fee\u6539\u201d\n            \u5982\u679c\u7528\u5230\u4e0b\u9762\u7684\u5b50\u8282\u70b9\u5c31\u4fee\u6539\uff0c\u4e0b\u63a8lazy\u6807\u5fd7\uff0c\u7528\u4e0d\u5230\u5c31\u4e0d\u7ba1\n            \u4ee5\u6b64\u6765\u51cf\u5c11\u590d\u6742\u5ea6\n*/\nll sum[maxn<<2];//\u7ebf\u6bb5\u6811\u6c42\u548c\u6700\u591a\u5206\u62104\u4e2a\u5b50\u533a\u95f4\n\nvoid PushUp(long long pos)//\u6682\u65f6\u5199\u6210\u6c42\u548c\u51fd\u6570\uff0c\u53ef\u4ee5\u81ea\u7531\u53d8\u6362\n{\n    sum[pos]=sum[lson]+sum[rson];\n    //\u7528\u6570\u7ec4\u8868\u793a\u4e8c\u53c9\u6811:\u5047\u8bbe\u67d0\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u4e3av,\u90a3\u4e48\u5b83\u7684\u5de6\u5b50\u8282\u70b9\u7f16\u53f7\u4e3a2*v\uff0c\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e3a2*v+1,\u89c4\u5b9a\u6839\u8282\u70b9\u4e3a1\n    //\u901a\u5e382*v\u5199\u6210v<<1 , 2*v+1\u5199\u6210v<<1|1;\n}\n\nvoid PushDown(long long pos,long long l,long long r)//\u533a\u95f4\u67e5\u8be2\u7528\n{\n    //l,r\u4e3a\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u6570\u5b57\u533a\u95f4\n\tif(Lazy[pos])\n    {\n\t\t//\u4fee\u6539\u5b50\u8282\u70b9\u7684\u589e\u52a0\u6570 \n\t\tLazy[lson]+=Lazy[pos];\n\t\tLazy[rson]+=Lazy[pos];\n\t\t//\u4fee\u6539\u5b50\u8282\u70b9\u533a\u95f4\u7684sum\n\t\tsum[lson]+=Lazy[pos]*(mid-l+1);\n\t\tsum[rson]+=Lazy[pos]*(r-(mid+1)+1);\n\t\t//\u6e05\u9664\u672c\u8282\u70b9\u6807\u8bb0\n\t\tLazy[pos]=0;\n\t}\n}\n\nvoid UpZone(long long pos,long long l,long long r,long long L,long long R,long long C)//\u5bf9\u6574\u4e2a\u533a\u95f4\u8fdb\u884c\u4fee\u6539\n{\n    //L,R\u8868\u793a\u64cd\u4f5c\u533a\u95f4 , l,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u533a\u95f4 , pos\u8868\u793a\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n    if(L<=l && R>=r)//\u8282\u70b9\u533a\u95f4\u5728\u64cd\u4f5c\u533a\u95f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\n    {\n        sum[pos]+=C*(r-l+1);//\u8fd9\u4e2a\u70b9\u9700\u8981\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6*C\n        Lazy[pos]+=C;//\u7528Lazy\u6807\u8bb0\uff0c\u8868\u793a\u672c\u533a\u95f4\u7684Sum\u6b63\u786e\uff0c\u5b50\u533a\u95f4\u7684Sum\u4ecd\u9700\u8981\u6839\u636eAdd\u8c03\u6574\n        return;\n    }\n    PushDown(pos,l,r);//\u4e0b\u63a8\u6807\u8bb0\n    if(L<=mid) UpZone(lson,l,mid,L,R,C);\n    if(R>mid) UpZone(rson,mid+1,r,L,R,C);\n    PushUp(pos);\n}\n\nll Query(long long l,long long r,long long L,long long R,long long pos)\n{\n    //L,R\u8868\u793a\u64cd\u4f5c\u533a\u95f4 , l,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u533a\u95f4 , pos\u8868\u793a\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n    if(L<=l && R>=r)//\u8282\u70b9\u533a\u95f4\u5728\u64cd\u4f5c\u533a\u95f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\n    {\n        return sum[pos];\n    }\n    PushDown(pos,l,r);//\u4e0b\u63a8\u6807\u8bb0\uff0c\u5426\u5219sum\u53ef\u80fd\u4e0d\u6b63\u786e\n    \n    //\u7edf\u8ba1\u7b54\u6848\n    long long ans=0;\n    if(L<=mid) ans+=Query(l,mid,L,R,lson);\n    if(R>mid) ans+=Query(mid+1,r,L,R,rson);\n    PushUp(pos);\n    return ans;\n}\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        long long tmp;\n        cin>>tmp;\n        UpZone(root,1,n,i,i,tmp);\n    }\n    for(int j=1;j<=m;j++)\n    {\n        long long a,b,c,d;\n        cin>>a;\n        if(a==1)\n        {\n            cin>>b>>c>>d;\n            UpZone(root,1,n,b,c,d);\n        }\n        else\n        {\n            cin>>b>>c;\n            cout<<Query(1,n,b,c,root)<<endl;\n        }\n    }\n    return 0;\n}\n```\n\n------------\n\u8fa3\u9e21\u849f\u84bb\u518d\u6765\u4e00\u6ce2\u52a8\u6001\u5f00\u70b9\u7684\u6a21\u677f\uff0c\u867d\u7136\u5728\u8fd9\u4e2a\u9898\u4e0a\u8dd1\u7684\u4e0d\u5982\u9759\u6001\uff0c\u4e0d\u8fc7\u4eca\u540e\u4e00\u5b9a\u4f1a\u7528\u5230!!\nCAUTION\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n1. \u4e0d\u80fddefine  lson\uff0crson\uff0c\u4e5f\u4e0d\u80fd\u7528pos<<1\u548cpos<<1|1\uff0c\u5426\u5219\u5c31\u5931\u53bb\u4e86\u201c\u52a8\u6001\u5f00\u70b9\u201d\u7684\u610f\u4e49\n2. Get_Son\u548cUpZone\u8981&\u5f15\u7528\n3. \u5c3d\u91cf\u5f00long long\uff0c\u4e5f\u597d\u8c03\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n\n//\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n//Get_Son\u548cUpZone\u8981&\u5f15\u7528\n//\u4e0d\u80fddefine  lson\uff0crson\uff0c\u4e5f\u4e0d\u80fd\u7528pos<<1\u548cpos<<1|1\n//\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\n#define mid  (l+r)/2\n#define maxn 1000007 //\u5143\u7d20\u4e2a\u6570\n\nll n,m;\nll root=1,cnt=1;\nll lson[maxn],rson[maxn];\nll Lazy[maxn<<2];//\u533a\u95f4\u589e\u52a0\u7684lazy\u6807\u8bb0\n/*\u5176\u76ee\u7684\u662f\uff1a\n            \u4e3a\u9632\u6b62\u4fee\u6539\u533a\u95f4\u603b\u7ed3\u70b9\u5bf9\u6bcf\u4e2a\u5b50\u8282\u70b9\u90fd\u8981\u8fdb\u884c\u4fee\u6539\uff0c\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\n            \u6682\u65f6\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u533a\u95f4\u603b\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u6811\u90fd\u201c\u5f85\u4fee\u6539\u201d\n            \u5982\u679c\u7528\u5230\u4e0b\u9762\u7684\u5b50\u8282\u70b9\u5c31\u4fee\u6539\uff0c\u4e0b\u63a8lazy\u6807\u5fd7\uff0c\u7528\u4e0d\u5230\u5c31\u4e0d\u7ba1\n            \u4ee5\u6b64\u6765\u51cf\u5c11\u590d\u6742\u5ea6\n*/\nll sum[maxn<<2];//\u7ebf\u6bb5\u6811\u6c42\u548c\u6700\u591a\u5206\u62104\u4e2a\u5b50\u533a\u95f4\n\nll Get_Son(long long &pos)\n{\n    if(pos==0) pos=++cnt;\n    return pos;\n}\n\nvoid PushUp(long long pos)\n{\n    sum[pos]=sum[lson[pos]]+sum[rson[pos]];\n    //\u7528\u6570\u7ec4\u8868\u793a\u4e8c\u53c9\u6811:\u5047\u8bbe\u67d0\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u4e3av,\u90a3\u4e48\u5b83\u7684\u5de6\u5b50\u8282\u70b9\u7f16\u53f7\u4e3a2*v\uff0c\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e3a2*v+1,\u89c4\u5b9a\u6839\u8282\u70b9\u4e3a1\n    //\u901a\u5e382*v\u5199\u6210v<<1 , 2*v+1\u5199\u6210v<<1|1;\n}\n\nvoid PushDown(long long pos,long long l,long long r)//\u533a\u95f4\u67e5\u8be2\u7528\n{\n    //l,r\u4e3a\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u6570\u5b57\u533a\u95f4\n\n    // if(Lazy[pos]==0) return;\n    // if(r-l<=1) return;\n    // if(pos<<1!=0)\n    // {\n    //     pos<<1=++cnt;\n    //     sum[pos<<1]+=(mid-l+1)*Lazy[pos];\n    //     Lazy[pos<<1]+=Lazy[pos];\n    // }\n    // if(rson[pos]!=0)\n    // {\n    //     rson[pos]=++cnt;\n    //     sum[rson[pos]]+=(r-mid+1)*Lazy[pos];\n    //     Lazy[rson[pos]]+=Lazy[pos];\n    // }\n    sum[Get_Son(lson[pos])]+=(mid-l+1)*Lazy[pos];\n    sum[Get_Son(rson[pos])]+=(r-mid)*Lazy[pos];\n    Lazy[lson[pos]]+=Lazy[pos];\n    Lazy[rson[pos]]+=Lazy[pos];\n    Lazy[pos]=0;\n}\n\nvoid UpZone(long long &pos,long long l,long long r,long long L,long long R,long long C)\n{\n    //L,R\u8868\u793a\u64cd\u4f5c\u533a\u95f4 , l,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u533a\u95f4 , pos\u8868\u793a\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n    if(pos==0) pos=++cnt;\n    if(Lazy[pos]!=0) PushDown(pos,l,r);//\u4e0b\u63a8\u6807\u8bb0\n    \n    if(L<=l && R>=r)//\u8282\u70b9\u533a\u95f4\u5728\u64cd\u4f5c\u533a\u95f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\n    {\n        sum[pos]+=(r-l+1)*C;//\u8fd9\u4e2a\u70b9\u9700\u8981\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6*C\n        Lazy[pos]+=C;//\u7528Lazy\u6807\u8bb0\uff0c\u8868\u793a\u672c\u533a\u95f4\u7684Sum\u6b63\u786e\uff0c\u5b50\u533a\u95f4\u7684Sum\u4ecd\u9700\u8981\u6839\u636eLazy\u8c03\u6574\n        return;\n    }\n\n    if(L<=mid) UpZone(lson[pos],l,mid,L,R,C);\n    if(R>mid) UpZone(rson[pos],mid+1,r,L,R,C);\n    PushUp(pos);\n}\n\nll Query(long long pos,long long l,long long r,long long L,long long R)\n{\n    //L,R\u8868\u793a\u64cd\u4f5c\u533a\u95f4 , l,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u533a\u95f4 , pos\u8868\u793a\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n    if(pos==0) return 0;\n    if(Lazy[pos]) PushDown(pos,l,r);//\u4e0b\u63a8\u6807\u8bb0\uff0c\u5426\u5219sum\u53ef\u80fd\u4e0d\u6b63\u786e\n\n    if(L<=l && R>=r)//\u8282\u70b9\u533a\u95f4\u5728\u64cd\u4f5c\u533a\u95f4\u4e4b\u5185\uff0c\u76f4\u63a5\u8fd4\u56de\n    {\n        return sum[pos];\n    }\n    \n    //\u7edf\u8ba1\u7b54\u6848\n    long long ans=0;\n    if(L<=mid) ans+=Query(lson[pos],l,mid,L,R);\n    if(R>mid) ans+=Query(rson[pos],mid+1,r,L,R);\n    PushUp(pos);\n    return ans;\n}\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        int tmp;\n        cin>>tmp;\n        UpZone(root,1,n,i,i,tmp);\n    }\n    for(int j=1;j<=m;j++)\n    {\n        int a,b,c,d;\n        cin>>a;\n        if(a==1)\n        {\n            cin>>b>>c>>d;\n            UpZone(root,1,n,b,c,d);\n        }\n        else\n        {\n            cin>>b>>c;\n            cout<<Query(root,1,n,b,c)<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1523532679,
        "uid": 59783,
        "name": "Loccri2JE",
        "ccfLevel": 0,
        "title": "\u300cLuogu\u300dP3372 \u7ebf\u6bb5\u6811\u6a21\u677f(1)"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6211\u6ca1\u6709\u5f88\u5f3a\u7684\u5206\u5757\u79d1\u6280  \n\u9694\u58c1\u795e\u7287\u8981\u5199\u66f4\u5feb\u7684\u5206\u5757  \n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u589e\u52a0\u6807\u8bb0\uff08\u7528\u4e8e\u96f6\u6563\u70b9\u7684\u67e5\u8be2\uff09  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cctype>\n#include<cmath>\n#define MAXN 100010\n#define ll long long\n#define size(x) (r[x]-l[x]+1)\nusing namespace std;\ninline void read(ll &x)\n{\n\tll s=0,w=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')w=-1;c=getchar();}\n\twhile(isdigit(c)){s=(s<<3)+(s<<1)+c-'0';c=getchar();}\n\tx=s*w;\n}\ninline void write(ll x)\n{\n\tif(x<0)x=-x,putchar('-');\n\tif(x>9)write(x/10);\n\tputchar('0'+x%10);\n}\nll n,m,belong[MAXN],sum[MAXN],a[MAXN],l[MAXN],r[MAXN],sq,opt,x,y,k,j,mark[MAXN];\nint main()\n{\n\tread(n),read(m);\n\tsq=ceil(sqrt(n));\n\tfor(int i=1;i<=n;i++)read(a[i]),belong[i]=i/sq,sum[belong[i]]+=a[i];\n\tfor(int i=1;i<=n;i++)if(!l[belong[i]])l[belong[i]]=i;\n\tfor(int i=n;i;i--)if(!r[belong[i]])r[belong[i]]=i;\n\twhile(m--)\n\t{\n\t\tread(opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tread(x),read(y),read(k);\n\t\t\tfor(j=x;j<=y;j++)\n\t\t\t{\n\t\t\t\tif(l[belong[j]]==j)break;\n\t\t\t\ta[j]+=k,sum[belong[j]]+=k;\n\t\t\t}\n\t\t\tfor(;j<=y;j+=size(belong[j]))\n\t\t\t{\n\t\t\t\tif(r[belong[j]]>y)break;\n\t\t\t\tsum[belong[j]]+=k*size(belong[j]),mark[belong[j]]+=k;\n\t\t\t}\n\t\t\tfor(;j<=y;j++)\n\t\t\ta[j]+=k,sum[belong[j]]+=k;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tll ans=0;\n\t\t\tfor(j=x;j<=y;j++)\n\t\t\t{\n\t\t\t\tif(l[belong[j]]==j)break;\n\t\t\t\tans+=a[j]+mark[belong[j]];\n\t\t\t}\n\t\t\tfor(;j<=y;j+=size(belong[j]))\n\t\t\t{\n\t\t\t\tif(r[belong[j]]>y)break;\n\t\t\t\tans+=sum[belong[j]];\n\t\t\t}\n\t\t\tfor(;j<=y;j++)\n\t\t\tans+=a[j]+mark[belong[j]];\n\t\t\twrite(ans),putchar(10);\n\t\t}\n\t}\n}\n\n```\n\u6211\u771f\u662f\u592a\u5f31\u4e86",
        "postTime": 1519620143,
        "uid": 60462,
        "name": "sherlock55341",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "```cpp\n#include<cstdio>\n#define maxn 100000\n#define ll unsigned long long\nint n,m,x,y,k,i,cmd;\nnamespace lx{struct read{read(){scanf(\"%d%d\",&n,&m);}}read;}//\u7528\u6784\u9020\u51fd\u6570\u8f93\u5165\uff0c\u4e0d\u89e3\u91ca\u4e86\nstruct node{int l,r;ll d,s;};//\u7ebf\u6bb5\u6811\u7684\u8282\u70b9:l\u662f\u8986\u76d6\u7684\u6700\u5de6\u4f4d\u7f6e;r\u662f;\u662f\u8986\u76d6\u7684\u6700\u53f3\u4f4d\u7f6e;d\u662f\u6807\u8bb0;s\u662f\u672c\u533a\u95f4\u7684\u548c \nclass ST\n{\n    public:\n        node tree[maxn*4+10];//\u6ce8\u610f\u662fn*4,n*2\u4f1a\u70b8\uff0c\u56e0\u4e3a\u8fd8\u6709\u6700\u540e\u4e00\u5c42 \n        inline int lc(int a){return a<<1;}//\u6c42\u5de6\u5b69\u5b50 \n        inline int rc(int a){return (a<<1)+1;}//\u6c42\u53f3\u5b69\u5b50 \n        inline void update(int cur,int d=-1)//\u66f4\u65b0\u51fd\u6570 \n        {\n            if(d!=-1){if(tree[cur].l!=tree[cur].r)tree[cur].d+=d;tree[cur].s+=d*(tree[cur].r-tree[cur].l+1);}//\u52a0\u4e0a\u533a\u95f4\u8981\u52a0\u7684\u6570 \n            else{tree[cur].s=tree[lc(cur)].s+tree[rc(cur)].s;}//\u7528\u5de6\uff0c\u53f3\u5b69\u5b50\u7684\u4fe1\u606f\u6765\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u4fe1\u606f \n            return;\n        }\n        void build(int cur,int l,int r)//\u6784\u5efa\u6811\uff0c\u4e0d\u8bf4\u4e86 \n        {\n            if(l==r)\n            {\n                tree[cur].l=tree[cur].r=l;//\u7ec8\u7aef\u8282\u70b9 \n                tree[cur].d=tree[cur].s=0;\n                return;\n            }\n            else\n            {\n                int mid=(l+r)>>1;\n                tree[cur].l=l;tree[cur].r=r;\n                tree[cur].d=tree[cur].s=0;\n                build(lc(cur),l,mid);build(rc(cur),mid+1,r);\n                return;\n            }\n        }\n        ST(){build(1,1,n);}//\u7ebf\u6bb5\u6811\u7684\u6784\u9020\u51fd\u6570\uff0c\u76f4\u63a5\u5efa \n        void change(ll d,int cur,int l,int r)\n        {\n            if(l==r==tree[cur].l==tree[cur].r){tree[cur].s+=d;return;}//\u7ec8\u7aef\u8282\u70b9 \n            else if(tree[cur].l>=l&&tree[cur].r<=r){update(cur,d);return;}//\u66f4\u6539\u7684\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u8be5\u8282\u70b9 \n            else\n            {\n                if(tree[cur].d){update(lc(cur),tree[cur].d);update(rc(cur),tree[cur].d);tree[cur].d=0;}//\u5206\u89e3\u6807\u8bb0\uff0c\u5343\u4e07\u4e0d\u80fd\u6253\u6f0f \n                int mid=(tree[cur].l+tree[cur].r)>>1;\n                if(l<=mid)change(d,lc(cur),l,r);//\u66f4\u6539\u5b69\u5b50\u4fe1\u606f \n                if(r>mid)change(d,rc(cur),l,r);\n                update(cur);//\u66f4\u65b0 \n                return;\n            }\n        }\n        ll q(int cur,int l,int r)//\u67e5\u8be2 \n        {\n            if(tree[cur].l>=l&&tree[cur].r<=r)return tree[cur].s;\n            else\n            {\n                if(tree[cur].d){update(lc(cur),tree[cur].d);update(rc(cur),tree[cur].d);tree[cur].d=0;}//\u5206\u89e3\u6807\u8bb0\uff0c\u5343\u4e07\u4e0d\u80fd\u6253\u6f0f\n                ll ans=0;int mid=(tree[cur].l+tree[cur].r)>>1;\n                if(l<=mid)ans=q(lc(cur),l,r);//\u83b7\u5f97\u5b69\u5b50\u4fe1\u606f \n                if(r>mid)ans+=q(rc(cur),l,r);\n                return ans;\n            }\n        }\n        inline void init(int cur,int val){change(val,1,cur,cur);return;}//\u7528\u6765\u5bf9\u4ed8\u7b2c\u4e8c\u884c\u7684\u521d\u59cb\u5316 \n}st;\nnamespace lx\n{\n    struct work\n    {\n        work()//\u7528\u6784\u9020\u51fd\u6570\u64cd\u4f5c\uff0c\u4e0d\u89e3\u91ca\u4e86 \n        {\n            for(i=0;i<n;){scanf(\"%d\",&x);st.init(++i,x);}\n            for(i=0;i<m;i++)\n            {\n                scanf(\"%d%d%d\",&cmd,&x,&y);\n                if(cmd==1){scanf(\"%d\",&k);st.change(k,1,x,y);}\n                else{printf(\"%lld\\n\",st.q(1,x,y));}//\u6ce8\u610f\u662f\u957f\u6574\u578b \n            }\n        }\n    }work; \n}\nint main(){return 0;}//\u7279\u77ed\u7684\u4e3b\u51fd\u6570 \n```",
        "postTime": 1516968562,
        "uid": 47747,
        "name": "Tmper244",
        "ccfLevel": 0,
        "title": "P3372\u6709C++\u98ce\u683c\u7684\u9898\u89e3"
    },
    {
        "content": "# [p3372]\u7ebf\u6bb5\u6811\u6a21\u7248\n\n\u5982\u679c\u771f\u7684\u6bcd\u9e21\u6296\u7ebf\u6bb5\u6811\u7684\u53ef\u4ee5\u627e\u6211\u7684\u535a\u5ba2;\n\n\u770b\u89c1\u6ca1\u6709\u6015\u6b7b\u72d7\u7684\u9898\u89e3\u6211\u5c31\u6765\u6492\u4e00\u4e2a;\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n```cpp\n    var\n            tree,lazy,left,right:array[1..800002] of int64;//\u5206\u522b\u4e3atree\u4e0a\u7684\u503c,lazy\u6807\u8bb0,\u548c\u5de6\u53f3\u6307\u6807\n            n,m,k,l,r,x,y,find,srx,add:int64;\n            i:longint;\n    procedure make(l,r,k:int64);//\u5efa\u9020\u4e00\u68f5\u6811\n    var\n            mid:int64;\n    begin\n            lazy[k]:=0;\n            left[k]:=l;//\u6807\u8bb0\u5de6\u6307\u6807\n            right[k]:=r;//\u6807\u8bb0\u53f3\u6307\u6807\n            if l=r then\n            begin\n                    read(tree[k]);//\u76f4\u5230l=r\u624d\u8f93\u5165\n                    exit;\n            end;\n            mid:=(l+r) div 2;//\u4e2d\u5fc3\n            make(l,mid,k*2);//\u5f80\u4e0a\u9012\u5f52\n            make(mid+1,r,k*2+1);\n            tree[k]:=tree[k*2]+tree[k*2+1];\n    end;\n    procedure SUC(k:int64);//down,\u5f80\u4e0blazy\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50,\u5e76\u6e05\u7a7a\u81ea\u5df1\u7684lazy\n    var\n            l,r:int64;\n    begin\n            l:=k*2;\n            r:=k*2+1;\n            inc(lazy[l],lazy[k]);//\u6807\u8bb0lazy\n            inc(lazy[r],lazy[k]);//\u540c\u4e0a\n            inc(tree[l],lazy[k]*(right[l]-left[l]+1));//\u5206\u53d1\u7ed9\u5de6\u513f\u5b50\n            inc(tree[r],lazy[k]*(right[r]-left[r]+1));//\u5206\u53d1\u7ed9\u53f3\u513f\u5b50\n            lazy[k]:=0;\n    end;\n    procedure change(k:longint);//\u533a\u95f4\u4fee\u6539\n    var\n            mid:int64;\n    begin\n            if (left[k]>=x)and(right[k]<=y) then//\u5982\u679c\u9700\u8981\u6539\u53d8\n            begin\n                    inc(tree[k],add*(right[k]-left[k]+1));\n                    inc(lazy[k],add);//\u6807\u8bb0lazy\n                    exit;\n            end;\n            if lazy[k]>0 then\n                    SUC(k);//down\n            mid:=(left[k]+right[k]) div 2;\n            if x<=mid then//2\u8fb9\u67e5\u627e\n                    change(k*2);\n            if y>mid then\n                    change(k*2+1);\n            tree[k]:=tree[k*2]+tree[k*2+1];\n    end;\n    procedure look(k:longint);//\u533a\u95f4\u67e5\u8be2\n    var\n            mid:int64;\n    begin\n            if (left[k]>=x)and(right[k]<=y) then//\u5982\u679c\u5230\u4e86\u53f6\u5b50\u7ed3\u70b9\u5c31add\n            begin\n                    inc(find,tree[k]);\n                    exit;\n            end;\n            if lazy[k]>0 then//down\n                    SUC(k);\n            mid:=(left[k]+right[k]) div 2;//2\u8fb9\u627e\n            if x<=mid then\n                    look(k*2);\n            if y>mid then\n                    look(k*2+1);\n    end;\n    begin//\u4e3b\n            readln(n,m);\n            make(1,n,1);//\u5148\u5efa\u4e00\u68f5\u6811\n            for i:=1 to m do\n            begin\n                    read(srx,x,y);\n                    find:=0;\n                    if srx=1 then\n                    begin\n                            read(add);\n                            change(1);\n                    end;\n                    if srx=2 then\n                    begin\n                            look(1);\n                            writeln(find);\n                    end;\n            end;\nend.\n```",
        "postTime": 1514019756,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "[P3372]\u7ebf\u6bb5\u6811\u6a21\u7248"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u7528c++\u53d1\u9898\u89e3\uff0c\u90a3\u672c\u849f\u84bb\u5c31\u6765\u53d1\u4e00\u4e2aPascal\u7684\u9898\u89e3\u5427\n\n\u5f88\u88f8\u7684\u7ebf\u6bb5\u6811\u677f\u5b50\n\n\n```cpp\n type\n  node=record\n    l,r:longint;tag,num:int64;\n  end;\nvar\n  a:array[1..110000] of int64;\n  f:array[1..550000] of node;\n  n,m,i,x,y,delta:longint;\nPROCEDURE update(n:longint);\n  begin\n    inc(f[n*2].tag,f[n].tag);\n    inc(f[n*2+1].tag,f[n].tag);\n    inc(f[n*2].num,(f[n*2].r-f[n*2].l+1)*f[n].tag);\n    inc(f[n*2+1].num,(f[n*2+1].r-f[n*2+1].l+1)*f[n].tag);\n    f[n].tag:=0;\n  end;\nprocedure build(n,l,r:longint);\n  begin\n    f[n].l:=l;f[n].r:=r;\n    if l=r then begin f[n].num:=a[l];exit; end;\n    build(n*2,l,(l+r) div 2);\n    build(n*2+1,(l+r) div 2+1,r);\n    f[n].num:=f[n*2].num+f[n*2+1].num;\n  end;\nprocedure change(n,l,r,delta:longint);\n  begin\n    if (f[n].l>=l) and (f[n].r<=r)\n      then\n        begin\n          inc(f[n].tag,delta);\n          inc(f[n].num,(f[n].r-f[n].l+1)*delta);\n          exit;\n        end;\n    if (f[n].tag<>0) then update(n);\n    if (f[n*2].r>=l) then change(n*2,l,r,delta);\n    if (f[n*2+1].l<=r) then change(n*2+1,l,r,delta);\n    f[n].num:=f[n*2].num+f[n*2+1].num;\n  end;\nfunction cal(n,l,r:longint):int64;\n  begin\n    if (f[n].l>=l) and (f[n].r<=r) then exit(f[n].num);\n    if f[n].tag<>0 then update(n);\n    cal:=0;\n    if f[n*2].r>=l then inc(cal,cal(n*2,l,r));\n    if f[n*2+1].l<=r then inc(cal,cal(n*2+1,l,r));\n  end;\nbegin\n  readln(n,m);\n  fillchar(a,sizeof(a),0);\n  fillchar(f,sizeof(f),0);\n  for i:=1 to n do read(a[i]);\n  build(1,1,n);\n  for i:=1 to m do\n    begin\n      read(x);\n      if x=1\n        then begin readln(x,y,delta);change(1,x,y,delta);  end\n        else begin readln(x,y);writeln(cal(1,x,y)); end;\n    end;\nend.\nend.\n\n```",
        "postTime": 1509766749,
        "uid": 55895,
        "name": "wwwwxb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "#\u6ce8\u610f\uff01\uff01\u8fd9\u662f\u7ebf\u6bb5\u6811\u7ec3\u4e60\uff08\u7136\u800c\u90fd\u65e0\u89c6\u4e86\u3002\u3002\u3002\uff09\n\n\n-\u697c\u4e0b\u90fd\u6709\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u7684\u5199\u6cd5\uff0c\n\n-\u4e8e\u662f\u6211\u5c31\u53d1\u4e00\u7bc7\u5206\u5757\u7684\u9898\u89e3\uff08\u6ca1\u6709\u5361\u5206\u5757\u3002\u3002\u3002\u56e0\u4e3a\u5206\u5757\u7684\u590d\u6742\u5ea6\u662fn\\*\u6839\u53f7n\uff09\n\n\n1.\u628a\u6570\u7ec4\u5206\u4e3a\u6839\u53f7n\u5757\uff0c\u6c42\u51fa\u6bcf\u4e00\u5757\u7684\u548c\n\n2.\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u82e5l\uff0cr\u5728\u4e00\u4e2a\u5b8c\u6574\u7684\u5757\u4e2d\u5c31\u66b4\u529b\u6c42\u89e3\uff0c\u82e5\u4e0d\u5728\u540c\u4e00\u4e2a\u5757\u4e2d\u5c31\u628a\u5de6\u8fb9\u548c\u53f3\u8fb9\u6240\u5728\u7684\u4e0d\u5b8c\u6574\u5757\u7528\u66b4\u529b\u6c42\u89e3\uff0c\u4e2d\u95f4\u7684\u5b8c\u6574\u5757\u7528\u5ef6\u8fdf\u6807\u8bb0\u8d77\u6765\u3002\n\n\n\u5982\u679c\u60f3\u5b66\u5206\u5757\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b**\u795e\u725b\u9ec4\u5b66\u957f\u7684\u535a\u5ba2hzwer.com**\u6216\u5728b\u7ad9\u4e0a\u770bqscqesze(\u7535\u5b50\u79d1\u6280\u5927\u5b66ACM\u961f)\u7684\u89c6\u9891\uff08\u6709\u5f88\u591a\u7b97\u6cd5\uff09\n\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\n\n```cpp\n#include \"stdafx.h\"\n#include<iostream>\nusing namespace std;\n\nlong long n, m, flag, x, y, k, block, num;\nlong long a[100005], l[100005], r[100005], belong[100005], sum[100005], atag[100005];\n\ninline void build()\n{\n    block = sqrt(n);\n    num = n / block;\n\n    if (n%block)num += 1;\n\n    for (long long i = 1; i <= num; i++)\n        l[i] = (i - 1) * block + 1, r[i] = i*block;\n\n    r[num] = n;\n\n    for (long long i = 1; i <= n; i++)\n        {\n            belong[i] = (i - 1) / block + 1;\n            sum[belong[i]] += a[i];\n        }\n}\n\ninline void add(long long x, long long y, long long k)\n{\n    if (belong[x] == belong[y])\n        {\n            for (long long i = x; i <= y; i++)\n                a[i] += k;\n            return;\n        }\n\n    for (long long i = x; i <= r[ belong[x] ]; i++)\n        {\n            a[i] += k;\n            sum[belong[i]]+=k;\n        }\n    for (long long i = l[ belong[y] ]; i <= y; i++)\n        {\n            a[i] += k;\n            sum[belong[i]]+=k;\n        }\n    for (long long i = belong[x] + 1; i < belong[y]; i++)\n        {\n            sum[i] += k*block;\n            atag[i] += k;\n        }\n    return;\n}\n\ninline long long ask(long long x, long long y)\n{\n    long long ans = 0;\n\n    if (belong[x] == belong[y])\n        {\n            for (long long i = x; i <= y; i++)\n                ans += a[i] + atag[belong[i]];\n            return ans;\n        }\n    for (long long i = x; i <= r[ belong[x] ]; i++)\n        ans += a[i] + atag[ belong[i] ];\n    for (long long i = l[ belong[y] ]; i <= y; i++)\n        ans += a[i] + atag[ belong[i] ];\n    for (long long i = belong[x] + 1; i < belong[y]; i++)\n        ans += sum[i];\n    return ans;\n}\n\nint main()\n{\n    cin >> n >> m;\n    for (long long i = 1; i <= n; i++)\n        cin >> a[i];\n\n    build();\n\n    while (m--)\n        {\n            cin >> flag;\n            if (flag == 1)\n                {\n                    cin >> x >> y >> k;\n                    add(x, y, k);\n                }\n            else\n                {\n                    cin >> x >> y;\n                    cout << ask(x, y) << endl;\n                }\n        }\n    return 0;\n}\n```\n**VS2017**\n",
        "postTime": 1509696248,
        "uid": 55638,
        "name": "Adun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\uff0c144ms\n\n\u8be6\u7ec6\u89e3\u91ca\u89c1 \u94fe\u63a5: https://pan.baidu.com/s/1pKXUtGB \u5bc6\u7801: 6tb4\n\n\u4ee3\u7801\uff1a\uff08\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u662f\u6a21\u677f\uff01\uff09\n\n'''cpp\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long bit0[5000010],n,bit1[5000010],m;    //bit0\u548cbit1\u7684\u542b\u4e49\u5982\u56fe\u6240\u793a\nlong long sum(long long* bit,long long i){    //\u6c42\u548c\n    long long s=0;\n    for(;i;i^=i&-i) s+=bit[i];\n    return s;\n}\nvoid add(long long* bit,long long i,long long x){    //\u66f4\u65b0\n    for(;i<=n;i+=i&-i) bit[i]+=x;\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(long long i=1;i<=n;i++){\n        long long a;\n        scanf(\"%lld\",&a);\n        add(bit0,i,a);\n    }                                                         //\u521d\u59cb\u5316\n    for(long long i=1;i<=m;i++){\n        long long q,x,y;\n        scanf(\"%lld%lld%lld\",&q,&x,&y);\n        if(q==1){\n            long long k;\n            scanf(\"%lld\",&k);\n            //\u4ee5\u4e0b4\u884c\u662f\u4ee3\u7801\u7684\u6838\u5fc3\u90e8\u5206\n            add(bit0,x,-k*(x-1));\n            add(bit1,x,k);\n            add(bit0,y+1,y*k);\n            add(bit1,y+1,-k);\n        }\n        else{\n            long long ret=0;\n            //\u4ee5\u4e0b2\u884c\u4e5f\u5f88\u91cd\u8981\n            ret+=sum(bit1,y)*y+sum(bit0,y);\n            ret-=sum(bit1,x-1)*(x-1)+sum(bit0,x-1);\n            printf(\"%lld\\n\",ret);\n        }\n    }\n    return 0;\n}\n'''\n```",
        "postTime": 1509543008,
        "uid": 25279,
        "name": "\u5317\u6d77_Beihai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "**\u8fd9\u4e2a\u677f\u5b50\u6bd4\u8f83\u9002\u5408\u4e8e\u65b0\u624b\u7406\u89e3\u3002**\n\n\u767e\u5ea6\u4e0a\u6709\u4e00\u7bc7CSDN\u535a\u5ba2\uff1ahttp://www.cnblogs.com/TenosDoIt/p/3453089.html#c\uff0c\u53eb\u505a\u4e00\u6b65\u4e00\u6b65\u7406\u89e3\u7ebf\u6bb5\u6811\uff0c\u6211\u6839\u636e\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u6a21\u677f\u6539\u7f16\u4e86\u4e00\u4e0b\uff0c\u5e76\u901a\u8fc7\u697c\u4e0b @smd1121 \u5927\u4f6c\u548cwill\u5927\u4f6c\u6307\u51fa\u4e0d\u5f53\u4fee\u6539\u5b8c\u6210\u3002\n\n\u4e0b\u9762\u662fcode\uff1a\n\n\n        \n        \n\n\n        \n\n    \n\n            \n        \n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct node{\n    long long val,lazytag;\n}segTree[100000*4+5];\nlong long a[100005];\nint n,m,t,x,y,k;\nvoid build(int root,long long arr[],int istart,int iend){//\u5efa\u6811\n    segTree[root].lazytag=0;\n    if(istart==iend){\n        segTree[root].val=arr[istart];\n    }else{\n        int mid=(istart+iend)/2;\n        build(root*2,arr,istart,mid);\n        build(root*2+1,arr,mid+1,iend);\n        segTree[root].val=segTree[root*2].val+segTree[root*2+1].val;\n    }\n}\nvoid pushDown(int root,int start,int end){//\u63d2\u5165\u61d2\u6807\u8bb0\n    if(segTree[root].lazytag!=0){\n        segTree[root*2].lazytag+=segTree[root].lazytag;\n        segTree[root*2+1].lazytag+=segTree[root].lazytag;\n        int mid=(end+start)/2;\n        segTree[root*2].val+=segTree[root].lazytag*(mid-start+1);\n        segTree[root*2+1].val+=segTree[root].lazytag*(end-mid);\n        segTree[root].lazytag=0;\n    }\n}\nlong long query(int root,int nstart,int nend,int qstart,int qend){//\u67e5\u8be2\u533a\u95f4\n    if(qstart>nend||qend<nstart){\n        return 0; \n    }if(qstart<=nstart&&qend>=nend){\n        return segTree[root].val;\n    }\n    pushDown(root,nstart,nend);\n    int mid=(nstart+nend)/2;\n    return query(root*2,nstart,mid,qstart,qend)+query(root*2+1,mid+1,nend,qstart,qend);\n}\nvoid update(int root,int nstart,int nend,int ustart,int uend,int addval){//\u8d4b\u503c\n    if(ustart>nend||uend<nstart){\n        return;\n    }if(ustart<=nstart&&uend>=nend){\n        segTree[root].lazytag+=addval;\n        segTree[root].val+=addval*(nend-nstart+1);\n        return;\n    }\n    pushDown(root,nstart,nend);\n    int mid=(nstart+nend)/2;\n    update(root*2,nstart,mid,ustart,uend,addval);\n    update(root*2+1,mid+1,nend,ustart,uend,addval);\n    segTree[root].val=segTree[root*2].val+segTree[root*2+1].val;\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%lld\",&a[i]);\n    }\n    build(1,a,1,n);\n    for(int i=1;i<=m;i++){\n        scanf(\"%lld\",&t);\n        if(t==1){\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            update(1,1,n,x,y,k);\n        }if(t==2){\n            scanf(\"%lld%lld\",&x,&y);\n            printf(\"%lld\\n\",query(1,1,n,x,y));\n        }\n    }\n}\n```",
        "postTime": 1509465574,
        "uid": 20609,
        "name": "\u6e21\u6d77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u89e3\u76f4\u63a5\u590d\u5236\u4f1aWA\u7684\u54e6\uff08\u6bd5\u7adf\u8fde\u8f93\u51fa\u90fd\u6ca1\u5199\uff09\u3010\u624b\u52a8\u6ed1\u7a3d\u3011\n\n\u6ce8\u91ca\u5f88\u6e05\u695a\uff08\u81ea\u8ba4\u4e3a\uff09\uff0c\u770b\u61c2\u4e86\u81ea\u5df1\u6539\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n\n#define MAXN 500005\n\nusing namespace std;\n\nint a[MAXN],n;\n\nstruct node\n{\n    long long Left,Right,Value;                        //\u5206\u522b\u5b58\u50a8\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u548c\u533a\u95f4\u503c \n    long long Lazy_tag;                            //\u61d2\u6807\u8bb0 \n}Tree[MAXN*4];                                    //\u58f0\u660e\u4e00\u68f5\u7ebf\u6bb5\u6811  \u5f00\u56db\u500d\u5185\u5b58 \n\ninline void Lazy_tag_pushdown(int root)                //\u61d2\u6807\u8bb0\u4e0b\u4f20\n{\n    Tree[root<<1].Lazy_tag+=Tree[root].Lazy_tag;        //root<<1 \u7b49\u6548\u4e8e root*2\n    Tree[root<<1|1].Lazy_tag+=Tree[root].Lazy_tag;        //a|1 \u7b49\u6548\u4e8e a%2?a:a+1\n                                            //\u6b64\u5904\u53ef\u76f4\u63a5\u7406\u89e3\u4e3aroot*2+1 \n    Tree[root<<1].Value+=Tree[root].Lazy_tag*(Tree[root<<1].Right-Tree[root<<1].Left+1);\n    Tree[root<<1|1].Value+=Tree[root].Lazy_tag*(Tree[root<<1|1].Right-Tree[root<<1|1].Left+1);\n                                            //\u5f53\u524d\u533a\u95f4\u52a0\u4e0a\u61d2\u60f0\u6807\u8bb0\u65f6\u5e94\u8be5\u52a0\u7684\u662fLazy_tag*\u533a\u95f4\u957f\u5ea6\n    Tree[root].Lazy_tag=0;                        //\u5df2\u7ecf\u4e0b\u4f20\u8fc7\u4e86\uff0c\u6e05\u96f6\u61d2\u6807\u8bb0 \n}\n\ninline void build_tree(int l,int r,int root)            //\u5efa\u7acb\u7ebf\u6bb5\u6811 \u4e3b\u51fd\u6570\u5f15\u7528build_tree(1,n,1); \n{                                    //\u8be5\uff08\u5b50\uff09\u6811\u4ee5l\u4e3a\u5de6\u7aef\u70b9\uff0cr\u4e3a\u53f3\u7aef\u70b9\uff0croot\u4e3a\u6839\u8282\u70b9 \n    int mid=(l+r)>>1;                    //\u4f4d\u8fd0\u7b97\u8282\u7701\u65f6\u95f4 \u7b49\u6548\u4e8e (l+r)/2 \n    Tree[root].Left=l;\n    Tree[root].Right=r;                    //\u8bb0\u5f55\u533a\u95f4\u8303\u56f4\n    Tree[root].Lazy_tag=0;                //\u61d2\u6807\u8bb0\u521d\u59cb\u5316\u4e3a0 \n    if(l==r)                            //\u5982\u679c\u5230\u8fbe\u5e95\u7aef\uff0c\u8d4b\u503c\u3002\n        Tree[root].Value=a[l];\n    else                                //\u5426\u5219\u9012\u5f52\u5730\u6784\u9020\u5de6\u53f3\u5b50\u6811\n    {\n        build_tree(l,mid,root<<1);                        \n        build_tree(mid+1,r,root<<1|1);                     \n        Tree[root].Value=Tree[root<<1].Value+Tree[root<<1|1].Value;\n    }                                //\u66f4\u65b0\u6839\u8282\u70b9\u7684\u503c \n} \n\ninline long long enquire_point(int k,int x)                //\u8fd4\u56dea[x]\u7684\u503c \u4e3b\u51fd\u6570\u5f15\u7528enquire_point(1,x); k\u5c31\u662f\u5f53\u524d\u5904\u7406\u7684root \n{\n    if(Tree[k].Left==Tree[k].Right)                    //\u5f53\u524d\u8282\u70b9\u5de6\u53f3\u7aef\u70b9\u76f8\u7b49 \u5373\u4e3a\u6240\u6c42\n        return Tree[k].Value;\n    \n    int mid=(Tree[k].Left+Tree[k].Right)>>1;            //\u5426\u5219\uff0c\u9012\u5f52\u5730\u5411\u4e0b\u67e5\u8be2 \n    if(Tree[k].Lazy_tag)    Lazy_tag_pushdown(k);        //\u7528\u5230\u8fd9\u91cc\u7684\u8bdd\u8981\u4e0b\u4f20\u61d2\u6807\u8bb0 \n    if(x<=mid)    return enquire_point(k<<1,x);            //\u76ee\u6807\u4f4d\u7f6e\u5728\u4e2d\u70b9\u5de6\u8fb9\uff0c\u67e5\u8be2\u5de6\u513f\u5b50 \n    else        return enquire_point(k<<1|1,x);            //\u5426\u5219\uff0c\u67e5\u8be2\u53f3\u513f\u5b50 \n} \n\ninline void revise_point(int k,int x,int Add)            //\u6539\u53d8a[x]\u7684\u503c(\u6b64\u5904\u4e3a\u52a0\u4e0aAdd) \u4e3b\u51fd\u6570\u5f15\u7528revise_point(1,x,Add) \n{                                        //\u6b64\u90e8\u5206\u4e0e\u4e0a\u9762\u90e8\u5206\u76f8\u4f3c \n    if(Tree[k].Left==Tree[k].Right)\n    {\n        Tree[k].Value+=Add;\n        return;\n    }\n    int mid=(Tree[k].Left+Tree[k].Right)>>1;        //\u5426\u5219\uff0c\u9012\u5f52\u5730\u5411\u4e0b\u5bfb\u627e\u76ee\u6807\u70b9 \n    if(x<=mid)        revise_point(k<<1,x,Add);\n    else            revise_point(k<<1|1,x,Add);\n    \n    Tree[k].Value=Tree[k<<1].Value+Tree[k<<1|1].Value;    //\u9012\u5f52\u8fd4\u56de\u8fc7\u7a0b\u4e2d\uff0c\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c \n}\n\ninline long long enquire_tree(int l,int r,int root)        //\u8fd4\u56dea[l]\u5230a[r]\u7684\u603b\u548c \u4e3b\u51fd\u6570\u5f15\u7528enquire_tree(l,r,1) \n{\n    if(Tree[root].Left>r||Tree[root].Right<l)            //\u82e5\u4e24\u8005\u65e0\u4ea4\u96c6\uff0c\u8fd4\u56de0 \n        return 0;\n    if(Tree[root].Left>=l&&Tree[root].Right<=r)        //\u82e5\u5f53\u524d\u5b50\u6811\u88ab[l,r]\u5305\u542b\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u5b50\u6811\u7684\u503c\n        return Tree[root].Value;\n    Lazy_tag_pushdown(root);                    //\u5982\u679c\u8981\u7528\u8fd9\u4e2a\u5b50\u6811\u7684\u8bdd\u8981\u4e0b\u4f20\u61d2\u6807\u8bb0\n    return enquire_tree(l,r,root<<1)+enquire_tree(l,r,root<<1|1);\n                                        //\u5426\u5219\u5728\u4e24\u4e2a\u5b50\u6811\u4e2d\u67e5\u8be2 \n} \n\ninline void revise_tree(int l,int r,int Add,int root)    //\u6539\u53d8a[l]\u5230a[r]\u7684\u503c\uff08\u6b64\u5904\u4e3a\u52a0\u4e0aAdd\uff09\u4e3b\u51fd\u6570\u5f15\u7528revise_tree(l,r,Add,1) \n{\n    if(Tree[root].Left>r||Tree[root].Right<l)        //\u82e5\u4e24\u8005\u65e0\u4ea4\u96c6\uff0c\u76f4\u63a5\u8fd4\u56de \n        return;\n    if(Tree[root].Left>=l&&Tree[root].Right<=r)     //\u5982\u679c\u5f53\u524d\u5b50\u6811\u88ab[l,r]\u5305\u542b\n    {\n        Tree[root].Lazy_tag+=Add;\n        Tree[root].Value+=Add*(Tree[root].Right-Tree[root].Left+1);\n    } \n    else\n    {\n        if(Tree[root].Lazy_tag)        Lazy_tag_pushdown(root);\n                                            //\u5982\u679c\u6709\u61d2\u6807\u8bb0\uff0c\u5411\u4e0b\u4f20\u9012\n        int mid=(Tree[root].Left+Tree[root].Right)>>1;\n        if(l<=mid)    revise_tree(l,r,Add,root<<1);        //\u4fee\u6539\u5de6\u5b50\u6811 \n        if(r>mid)    revise_tree(l,r,Add,root<<1|1);        //\u4fee\u6539\u53f3\u5b50\u6811 \n        Tree[root].Value=Tree[root<<1].Value+Tree[root<<1|1].Value;    \n                                            //\u9012\u5f52\u5730\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684\u503c\n    } \n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n;\n    for(int i=1;i<=n;i++)\n        cin>>a[i];\n    build_tree(1,n,1);\n}\n```",
        "postTime": 1509414706,
        "uid": 37357,
        "name": "smd1121",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u521a\u5b66\u4f1a\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u6c42\u548c\uff0c\u5728\u7ebf\u6bb5\u6811\u6a21\u677f\u91cc\u7ec3\u4e86\u4e2a\u624b~~~\n\n\n\u5148\u8bb2\u8bb2\u6700\u666e\u901a\u7684\u5355\u70b9\u4fee\u6539+\u533a\u95f4\u6c42\u548c\n\n\n\u628aa[x]+y\uff0c\u5c31\u662fchange(x,y)\n\n\n\u6c42l~r\u7684\u548c\uff0c\u5c31\u662fgetsum(r)-getsum(l-1) //\u5c31\u662f\u524d\u7f00\u548c\n\n\n\u5177\u4f53\u4e0d\u5c55\u5f00\uff0c\u697c\u4e0b\u5df2\u63d0\u5230\uff0c\u4e0a\u9762\u8bb2\u7684\u662f\u6811\u72b6\u6570\u7ec4\u3010\u6a21\u677f1\u3011\n\n\n\u7136\u540e\u662f\u533a\u95f4\u4fee\u6539+\u5355\u70b9\u6c42\u548c\n\n\n\u96be\u5ea6\u63d0\u9ad8\u4e86\u4e00\u70b9\u70b9\uff0c\u9700\u8981\u7528\u5230\u5dee\u5206\n\n\n\u6240\u8c13\u5dee\u5206\uff0c\u6bd4\u5982\u6570\u5217a1,a2,a3,\u2026\u2026,an\n\n\n\u4ee4deltai=a[i]-a[i-1]\n\n\n\u90a3\u4e48a[i]=delta[1]+delta[2]+delta[3]+\u2026\u2026+delta[i]\n\n\n\u6240\u4ee5\uff0c\u8981\u628al~r\u90fd\u52a0\u4e0ax\uff0c\u53ea\u9700change(l,x);change(r+1,-x);\n\n\n\u7b97a[x]\u53ea\u9700getsum(x)\n\n\n\u96be\u5ea6\u5fae\u9ad8\u4e00\u70b9\u70b9\uff0c\u662f\u6811\u72b6\u6570\u7ec4\u3010\u6a21\u677f2\u3011\n\n\n\u63a5\u4e0b\u6765\u6b65\u5165\u6b63\u9898\uff0c\u5c31\u662f\u672c\u9898\u533a\u95f4\u4fee\u6539+\u533a\u95f4\u6c42\u548c\n\n\n\u5176\u5b9e\u5bf9\u7ebf\u6bb5\u6811\u6765\u8bf4\u662f\u6c34\u9898==\uff0c\u6211\u80fd\u8bf4\u6211\u7ebf\u6bb5\u6811\u4e0d\u719f\u7ec3\u5417\n\n\n\u4f9d\u7136\u7528\u5230\u5dee\u5206\uff0c\u4e0d\u8fc7\u9700\u8981\u8fdb\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u5bfc\uff1a\n\n\n1~i\u7684\u548c=sum[i]+i\\*delta[1]+(i-1)\\*delta[2]+\u2026\u2026+2\\*delta[i-1]+delta[i] //sum\u8868\u793a\u521d\u59cb\u6570\u636e\u7684\u524d\u7f00\u548c\n\n\n\n        =sum[i]+sigma(delta[x]\\*(i-x+1))\n\n        =sum[i]+(i+1)\\*sigma(delta[x])-sigma(delta[x]\\*x)\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4delta,delta1\uff0cdelta1[i]=delta[i]\\*i\n\n\n\u81f3\u4e8esum\uff0c\u4e00\u4e2a\u9884\u5904\u7406\u641e\u5b9a\n\n\n```cpp\ntype\n    ar=array[0..100000] of int64;\nvar\n    sum,delta,delta1:ar;\n    l,r,x,y,i,n,m:longint;\nfunction lowbit(x:int64):int64;\nbegin\n    exit(x and -x);\nend;\nprocedure change(var delta:ar;x,y:int64);\nbegin\n    while x<=n do\n        begin\n            inc(delta[x],y);\n            inc(x,lowbit(x));\n        end;\nend;\nfunction getsum(var delta:ar;x:int64):int64;\nbegin\n    getsum:=0;\n    while x>0 do\n        begin\n            inc(getsum,delta[x]);\n            dec(x,lowbit(x));\n        end;\nend;\nbegin\n    readln(n,m);\n    for i:=1 to n do\n        begin\n            read(x);\n            sum[i]:=sum[i-1]+x;\n        end;\n    for i:=1 to m do\n        begin\n            read(x);\n            if x=1 then\n                begin\n                    readln(l,r,x);\n                    change(delta,l,x);\n                    change(delta,r+1,-x); //delta\u7684\u5dee\u5206\n                    change(delta1,l,x*l);\n                    change(delta1,r+1,-x*(r+1));  //delta1\u7684\u5dee\u5206\n                end else\n                begin\n                    readln(l,r);\n                    writeln(sum[r]-sum[l-1]+(r+1)*getsum(delta,r)-l*getsum(delta,l-1)-getsum(delta1,r)+getsum(delta1,l-1));\n                end;\n        end;\nend.\n\u8bf4\u96be\u4e0d\u96be\uff0c\u7406\u89e3\u5c31\u884c\n```",
        "postTime": 1507634335,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u7528\u5206\u5757\u6c34\u8fc7\u53bb\uff0c\u5206\u5757\u6ca1\u6709\u7ebf\u6bb5\u6811\u597d\u5199QwQ\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u53ef\u4ee5\u5c06\u5176\u5206\u4e3asqrt\uff08n\uff09\u5757\uff0c\u6bcf\u5757\u90fd\u4e3asqrt\uff08n\uff09\n\n\u5206\u5757\u7684\u6709\u70b9\u5c31\u662f\u9700\u8981\u7684\u7a7a\u95f4\u5f88\u5c0f\u4e14\u4e0d\u9700\u8981\u9012\u5f52\uff0c\u5173\u952e\u662f\u597d\u60f3\u3002\n\n\u5206\u5757\u53ef\u4ee5\u7ef4\u62a4\u7684\u4e1c\u897f\u53ea\u8981\u7b26\u5408\u4e00\u4e2a\u6761\u4ef6\uff1a\u5982\u679c\u77e5\u9053\u67d0\u4e2a\u533a\u95f4\u3010l,r\u3011\u7684\u4fe1\u606f\u53ef\u4ee5O\uff081\uff09\u7684\u6c42\u51fa\u3010l,r+1\u3011\u3010l\uff0cr-1\u3011\u3010l-1\uff0cr\u3011\u3010l+1\uff0cr\u3011\n\n\u8fd9\u6837\u7684\u4e1c\u897f\u5982\u679c\u590d\u6742\u5ea6\u53ef\u4ee5\u627f\u53d7nsqrt\uff08n\uff09\u90a3\u4e48\u5c31\u53ef\u4ee5\u5927\u529b\u5206\u5757\u5199\n\n\u81ea\u4ece\u5b66\u4f1a\u4e86\u5206\u5757\u7ef4\u62a4\u5e8f\u5217\u7684\u9898\u90fd\u662f\u4e00\u987f\u4e71\u641e\uff0c\u5173\u952e\u5728\u4e8e\u9700\u8981\u7684\u5185\u5b58\u5c0f\n\n\u5bf9\u4e8e\u4e00\u4e9b\u5f00\u4e0d\u4e0b\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u7684\u9898\u53ef\u4ee5\u8003\u8651\u5206\u5757\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<utility>\n#include<algorithm>\n#include<iostream>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\ninline long long read()\n{\n    char ch='*';\n    long long f=1;\n    while(!isdigit(ch=getchar()))if(ch=='-') f=-1;\n    long long num=ch-'0';\n    while(isdigit(ch=getchar())) num=num*10+ch-'0';\n    return num*f;\n}\nconst int maxn=100005;\nlong long t[320];\nlong long block[320];\nlong long blockadd[320];\nlong long a[maxn];\nlong long n,m,l,r,x,k,op;\nint main()\n{\n    n=read();\n    m=read();\n    int ave=(int) sqrt(n);\n    for(int i=1;i<=n;i++)\n    {\n        a[i]=read();\n        block[i/ave]+=a[i];\n    }\n    int ans;\n    while(m--)\n    {\n        op=read();l=read();r=read();\n        ans=0;\n        if(op==1)\n        {    \n            x=read();\n            int ll=l/ave+1,rr=r/ave-1;\n            if(ll+1>=rr)\n            {\n                for(int i=l;i<=r;i++)                \n                    a[i]+=x,block[i/ave]+=x;                \n                continue;\n            }\n            else{\n                for(int i=ll;i<=rr;i++)\n                {\n                    block[i]+=ave*x;\n                    blockadd[i]+=x;\n                }\n                if(l%ave==0 ) {\n                    block[l/ave]+=ave*x;\n                    blockadd[l/ave]+=x;\n                }\n                else \n                for(int i=l;i%ave!=0;i++)\n                    a[i]+=x,block[l/ave]+=x;\n                if(r%ave==ave-1)\n                block[r/ave]+=ave*x,blockadd[r/ave]+=x;\n                else    for(int i=r;i%ave!=ave-1;i--)a[i]+=x,block[i/ave]+=x;                \n            }                \n        }\n        else{\n            int ll=l/ave+1,rr=r/ave-1;\n            if(ll+1>=rr)\n            {\n                for(int i=l;i<=r;i++)ans+=a[i]+blockadd[i/ave];\n                printf(\"%d\\n\",ans);\n                continue;\n            }\n            else{\n                for(int i=ll;i<=rr;i++)    ans+=block[i];\n                if(l%ave==0 )     ans+=block[l/ave];                \n                else     for(int i=l;i%ave!=0;i++)    ans+=blockadd[i/ave]+a[i];\n                if(r%ave==ave-1)    ans+=block[r/ave];\n                else    for(int i=r;i%ave!=ave-1;i--)ans+=a[i]+blockadd[i/ave];\n                printf(\"%d\\n\",ans);\n            }            \n        }                \n    }\n}\n\n```",
        "postTime": 1506942697,
        "uid": 36102,
        "name": "doge233",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7b80\u5355\u6a21\u677f\uff08lazytag\u90fd\u4e0d\u7528......\uff09\n\n\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u91cc\u4e86.....\n\n\u8bb0\u5f97\u5f00int64\uff08long long int\uff09....\n\nPS\uff1a\u53ef\u80fd\u5bf9\u9f50\u683c\u5f0f\u6709\u70b9\u4e71....\n\n\n\n```cpp\n{Beginner_df016}\nvar i,j,k,n,m,x,y,s,id,z:longint;\n      sum,add:array[0..400007]of int64;\n      treel,treer:array[0..400007]of longint;\n      //sum\u8bb0\u5f55\u4e0b\u6807\u8282\u70b9\u533a\u95f4\u548c\n      //add\u8bb0\u5f55\u4e0b\u6807\u8282\u70b9\u5b50\u8282\u70b9\u5f85\u66f4\u65b0\u503c\n      //treel,treer\u4e0b\u6807\u8282\u70b9\u533a\u95f4\u8fb9\u754c\nprocedure build(root,l,r:longint);//\u5efa\u6811\uff1b\nvar mid:longint;\nbegin\n    if l=r then\n         begin\n         read(x);  sum[root]:=x;\n         treel[root]:=l; treer[root]:=r;\n         exit;\n         end;\n    treel[root]:=l; treer[root]:=r;\n    mid:=(l+r)>>1;\n    build(root<<1,l,mid);\n    build((root<<1)+1,mid+1,r);\n    sum[root]:=sum[root<<1]+sum[root];\nend;\nprocedure update(root,l,r,x:longint);//\u66f4\u6539\nvar ll,rr,mid,len:longint; t:int64;\nbegin\n    ll:=treel[root]; rr:=treer[root];\n    if (ll>=l)and(rr<=r) then\n         begin\n         t:=x;\n         inc(sum[root],t*(rr-ll+1));\n         add[root]:=add[root]+x;\n         exit;\n         end;\n    if add[root]<>0 then\n         begin\n         inc(add[root<<1],add[root]);\n         inc(add[(root<<1)+1],add[root]);\n         t:=add[root]; len:=rr-ll+1;\n         inc(sum[root<<1],t*((len+1)div 2));\n         inc(sum[(root<<1)+1],t*(len div 2));\n         add[root]:=0;\n         end;\n    mid:=(ll+rr)>>1;\n    if mid>=l then update(root<<1,l,r,x);\n    if mid<r then update((root<<1)+1,l,r,x);\n    sum[root]:=sum[root<<1]+sum[(root<<1)+1];\nend;\nfunction query(root,l,r:longint):int64;//\u67e5\u8be2\u533a\u95f4\u548c\nvar ll,rr,mid,len:longint; t,joker:int64;\nbegin\n   ll:=treel[root]; rr:=treer[root];\n   if (ll>=l)and(rr<=r) then exit(sum[root]); //\u5f53\u524d\u533a\u95f4\u5305\u542b\u5728\u8981\u6c42\u533a\u95f4\u5185\u5219\u76f4\u63a5\u8fd4\u56de\n   if add[root]<>0 then              //\u5411\u4e0b\u66f4\u65b0\n         begin\n         inc(add[root<<1],add[root]);\n         inc(add[(root<<1)+1],add[root]);\n         len:=rr-ll+1; t:=add[root];\n         inc(sum[root<<1],t*((len+1) div 2));\n         inc(sum[(root<<1)+1],t*(len div 2));\n         add[root]:=0;\n         end;\n    mid:=(ll+rr)>>1;\n    joker:=0;\n    if mid>=l then inc(joker,query(root<<1,l,r));\n    if mid<r then inc(joker,query((root<<1)+1,l,r));\n    exit(joker);\nend;\nbegin\n    readln(n,m);\n    build(1,1,n);\n    for i:=1 to m do\n         begin\n         read(id);\n         case id of\n             1:begin readln(x,y,z); update(1,x,y,z); end;\n             2:begin readln(x,y); writeln(query(1,x,y)); end;\n             end;\n         end;\nend.\n```",
        "postTime": 1506069555,
        "uid": 24716,
        "name": "Beginner_df016",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "###\u6574\u7406\u642c\u8fd0\u81ea`NotOnlySuccess`\n\ndalao\u4e00\u53e3\u6c14\u5199\u4e86\u597d\u591a\u7247\u4ee3\u7801\n\n\u6211\u5c31\u627e\u4e86\u4e00\u7247\u5408\u9002\u7684\n\n\u52a0\u4e0a\u6ce8\u91ca\u5c31\u53d1\u6765\u5566\n\n###\u4e0d\u4ec5\u8dd1\u5f97\u5feb\uff0c\u800c\u4e14\u7a7a\u95f4\u5c0f\n\n#\u6ce8\u610f\u4e09\u70b9\uff1a\n\n###lazy tag\u603b\u662f\u5411\u4e0b\u7684\uff0c\u5bf9\u5f53\u524d\u8282\u70b9\u65e0\u6548\n\n###sum\u6570\u7ec4\u5c31\u662f\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6807\u662f\u6309\u7167\u4e8c\u53c9\u6811\u6765\u7684\n\n###\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u90fd\u662f\u7531\u4e0a\u4e00\u4e2a\u8282\u70b9\u63a8\u5f97\u5e76\u5411\u4e0b\u4f20\u9012\uff0c\u6240\u4ee5\u8d77\u59cb\u548c\u4f20\u9012\u65f6\u4e00\u5b9a\u4e0d\u8981\u51fa\u9519\n\n```cpp\n/***********************\n-NotOnlySuccess\u98d8\u9038\u5199\u6cd5-\n----\u533a\u95f4\u589e\u51cf\uff0c\u533a\u95f4\u67e5\u8be2----\n***********************/\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#define ls l,m,rt<<1//\u8868\u793a\u7684\u8303\u56f4\u53ca\u8282\u70b9\u7f16\u53f7\n#define rs m+1,r,rt<<1|1\n#define maxn 100009\n#define LL long long\nusing namespace std;\nLL sum[maxn<<2];////\u7ebf\u6bb5\u6811\u8282\u70b9*4\nLL add[maxn<<2];\nvoid getup(int rt){\n    sum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}//\u7528\u5b50\u8282\u70b9\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u8282\u70b9\uff08rt\uff0c\u7236\u8282\u70b9\uff09\nvoid build(int l,int r,int rt){\n    add[rt]=0;\n    if (l==r) {\n        scanf(\"%lld\",&sum[rt]);////rt\u662f\u8fd9\u4e2a\u957f\u5ea6\u4e3a1\u7684\u8282\u70b9\u7684\u7f16\u53f7\n        return;                 //\u800cl\uff0cr\u662f\u5176\u8868\u793a\u7684\u8303\u56f4\n    }\n    int m=(l+r)>>1;\n    build (ls);\n    build (rs);\n    getup(rt);\n    return;\n}\nvoid pushdown(int rt,int len){\n    if (add[rt]){\n        add[rt<<1]+=add[rt];\n        add[rt<<1|1]+=add[rt];\n        sum[rt<<1]+=add[rt]*(len-(len>>1));//add*\u5de6\u533a\u95f4\u957f\n        sum[rt<<1|1]+=add[rt]*(len>>1);//add*\u53f3\u533a\u95f4\u957f\n        add[rt]=0;\n    }\n}//\u6807\u8bb0\u4e0b\u653e\u65e0\u9700\u9012\u5f52\uff1a\uff1a\u80fd\u8986\u76d6\u7236\u533a\u95f4\u7684\u6807\u8bb0\u5fc5\u7136\u80fd\u8986\u76d6\u5b50\u533a\u95f4\nvoid update(int L,int R,int c,int l,int r,int rt){\n    if (L<=l&&r<=R){\n        add[rt]+=c;\n        sum[rt]+=(LL)c*(r-l+1);//\u4fdd\u8bc1\u4e86add\u53ea\u5bf9\u4e0b\u4e00\u8282\u70b9\u6709\u6548\n        return;                 //\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u66f4\u65b0\n    }\n    pushdown(rt,r-l+1);\n    int m=(l+r)>>1;\n    if (L<=m) update(L,R,c,ls);\n    if (m+1<=R) update(L,R,c,rs);  \n    getup(rt);\n    \n}\nLL query(int L,int R,int l,int r,int rt){\n    if (L<=l&&r<=R){\n        return sum[rt];\n    } \n    pushdown(rt,r-l+1);\n    LL tot=0;\n    int m=(l+r)>>1;\n    if (L<=m) tot+=query(L,R,ls);\n    if (m+1<=R) tot+=query(L,R,rs);\n    return tot;\n}\n\nint main(){\n    int n,m;\n    cin>>n>>m;\n    build(1,n,1);\n    int Q,a,b,c;\n    for (int i=1;i<=m;i++){\n        scanf(\"%d\",&Q);\n        if(Q==1){\n            scanf(\"%d%d%d\",&a,&b,&c);\n            update(a,b,c,1,n,1);\n            continue;\n        }\n        if(Q==2){\n            scanf(\"%d%d\",&a,&b);\n            printf(\"%lld\\n\",query(a,b,1,n,1));\n            continue;\n        }\n    }\n    system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1503389980,
        "uid": 19559,
        "name": "sun615",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6807\u51c6\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\u2014\u2014\u533a\u95f4\u66f4\u65b0\u3002\n\n\n#\u4e3b\u7a0b\u5e8f\u2014\u2014\u7b80\u5355\u5224\u65ad\n\n\u6bcf\u6b21\u8bfb\u5165\u7b2c\u4e00\u4e2a\u6570\uff0c\u82e5\u662f1\u66f4\u65b0\uff0c\u82e5\u662f2\u76f4\u63a5\u8f93\u51fa\u3002\uff08\u4e0d\u8bb2\u4e86\uff09\n\n\n#\u5173\u952e\u95ee\u9898\u2014\u2014\u4e94\u4e2a\u51fd\u6570\n\n\n##up(int p)\n\n\u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u66f4\u65b0\u5f53\u524d\u8282\u70b9p\u7684\u503c\u3002\n\n\u8282\u70b9p\u7684\u5b50\u8282\u70b9\u4e3a2p\u548c2p+1.\n\n\ns[p]=s[2p]+s[2p+1]\n\n##down(int p, int l, int r)\n\n\u9996\u5148\uff0c\u50a8\u5b58\u8282\u70b9p\u7684\u503c\u7684s[p]\u6307a[l]+...+a[r]\u7684\u6570\u5b57\u548c\u3002\n\n\u8fd9\u4e2a\u51fd\u6570\u7528\u4e8e\u4f20\u9012add[]\u6570\u7ec4\u7684\u91cf\u3002\n\n\u7531\u4e8e\u662f\u533a\u95f4\u66f4\u65b0\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf\u5355\u70b9\u66f4\u65b0\u4e00\u6837\u4e00\u4e2a\u4e00\u4e2a\u66f4\u65b0\uff0c\u800c\u662f\u8981\u5229\u7528add[]\u6765\u5b58\u653e\u66f4\u65b0\u7684\u91cf\u3002\n\n\u8fd9\u4e2a\u51fd\u65701. \u4e0b\u4f20add[p]: add[2p]+=add[p];add[2p+1]+=add[p];\n\n2. \u4fee\u6539\u5b50\u8282\u70b92p,2p+1\u7684\u503c\uff1as[2p]+=(m-l+1)add[p];s[2p+1]=(r-m)add[p];\n\n\u5176\u4e2dm=(l+r) div 2;\n\n\u8fd9\u91cc\u6ce8\u610f\u4e00\u4e0b\uff1aadd[p]\u6307l-r\u8fd9\u4e2a\u533a\u95f4\u5f53\u4e2d\uff1a\u4efb\u610fadd[i]\u90fd\u5e94\u8be5\u52a0add[p].\u5176\u4e2dl<=i<=r.\n\n\u6240\u4ee5\u6211\u4eec\u5728\u66f4\u65b0\u8282\u70b9\u65f6\uff0c\u8fd8\u8981\u7528add[p]\u4e58\u4ee5\u5b83\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662fs[2p]=(m-l+1)\\*add[p]\u4e86\u3002\n\n\u6700\u540e\u5c06add[p]=0;\n\n\n##build(int p, int l, int r)\n\np,l,r\u7684\u610f\u601d\u540c\u4e0a\u3002\n\n\u4ecep\u5f00\u59cb\u5efa\u6811\u3002\n\n\u5f53l==r\u65f6\uff1a\u5230\u4e86\u53f6\u5b50\u8282\u70b9\uff0c\u8bfb\u5165\u5176\u503c\u3002\n\n\u6ce8\u610f\uff1a\u5e94\u5728\u5f00\u59cb\u4e4b\u524d\uff1aadd[p]=0\uff08\u201c\u6d17\u7897\u201d\u64cd\u4f5c\u2014\u2014\u5f52\u96f6)\n\n\u7136\u540e\u5b9a\u4e49m=(l+r)/2;\u5206\u6210\u4e24\u8def\u66f4\u65b0\uff0c\u6700\u540eup(p);\n\n\n##update(int p, int l, int r, int x, int y, int v)\n\np,l,r\u610f\u601d\u540c\u4e0a\uff0cx,y,v\u8868\u793a[x,y]\u4e4b\u95f4\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u9700\u8981+v.\n\n\u6ce8\u610f\uff1aadd[p]\u4e0d\u9700\u8981\u7740\u6025\u4f20\u4e0b\u53bb\uff0c\u6211\u4eec\u5728\u67e5\u8be2query\u65f6\u4e5f\u4f1a\u4e0b\u4f20\u3002\n\n1. \u5f53x<=l and r<=y \u65f6\uff0c\u8bf4\u660e[l,r]\u533a\u95f4 \u5305\u542b\u4e8e[x,y]\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u3002\n\n\u6240\u4ee5\uff1aadd[p]+=v;s[p]+=(r-l+1)v;return;\n\n2. \u6b63\u5e38\u66f4\u65b0\u3002\u56e0\u4e3a\u8fd9\u662f\u533a\u95f4\u66f4\u65b0\uff0c\u6211\u4eec\u8981\u50cf\u7ebf\u6bb5\u6811\u70b9\u66f4\u65b0\u4e2d\u7684\u67e5\u8be2\u4e00\u6837\uff0c\u5206\u6210\u4e24\u8def\u8fdb\u884c\u66f4\u65b0\u3002\n\nif x<=m then update(...) //\u66f4\u65b02\\*p\u8282\u70b9\n\nif m<y then update(...) //\u66f4\u65b02p+1\u8282\u70b9\n\n\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u6709\u53ef\u80fd\u51fa\u73b0x<=m<=y\u7684\u60c5\u51b5\u3002[x,y]\u88abm\u5206\u5f00\uff0c\u6240\u4ee5\u5206\u5b50\u8282\u70b9\u66f4\u65b0\u3002\n\n\u6ce8\u610f\uff1a\u5728**\u66f4\u65b0\u524d**\u5e94\u5148\u4e0b\u4f20add:down(p,l,r).\n\n\u9632\u6b62\u4fe1\u606f\u7559\u5728p\u7684\u7236\u8282\u70b9p/2\u4e0a\u3002\n\n\u6700\u540e\u66f4\u65b0up(p);\n\n\n##query(int p, int l, int r, int x, int y)\n\n\u67e5\u8be2[x,y]\u533a\u95f4\u548c\u3002\n\n1. if x<= l && r<=y return s[p];\n\n\u5982\u679c[l,r]\u5305\u542b\u4e8e[x,y]\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b9e\u7528[l,r]\u533a\u95f4\u7684\u6570\u5b57\u548c\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n2. \u5206\u6210\u4e24\u8def\u67e5\u8be2\u3002\n\n\u5728\u67e5\u8be2\u4e4b\u524d\uff0c\u5e94\u518d\u6b21down(p,l,r)\uff0c\u7406\u7531\u540cupdate.\n\n\u7136\u540e\u5b9a\u4e49m=(l+r)/2;\n\nif x<=m ret+=query... //\u83b7\u5f97\u5bf9\u4e8e2\\*p\u53ca\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u67e5\u8be2\u7684\u503c\n\nif m<y ret+=query... //\u83b7\u5f97\u5bf92p+1\u53ca\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u67e5\u8be2\u7684\u503c\n\n\u6700\u540e\u8fd4\u56deret.\n\n\n\u6ce8\u610f\uff1a\n\n1. \u6570\u53ef\u80fd\u5f88\u5927\uff0c\u6570\u7ec4\u5b9a\u4e49\u4e3along long\u7c7b\u578b\uff08pascal\u4e2d\u7684int64);\n\n2. \u4e00\u5b9a\u8981\u5728update\u548cquery\u4e2ddown(p,l,r),\u53ca\u65f6\u4e0b\u4f20add[p]\u3002\n\n\n\u4e0b\u9762\u7ed9\u5b8c\u6574\u4ee3\u7801\uff1a\n\n\n```cpp\n//Luogu 3372\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nconst int MAXN=100000;\n\nint n, q;\nlong long add[4*MAXN+10], s[4*MAXN+10];\n\nvoid up(int p)\n{\n    s[p]=s[2*p]+s[2*p+1];\n    return;\n}\n\nvoid down(int p, int l, int r)\n{\n    if (add[p]) {\n        add[2*p]+=add[p];\n        add[2*p+1]+=add[p];\n        int m=(l+r)/2;\n        s[2*p]+=(m-l+1)*add[p];\n        s[2*p+1]+=(r-m)*add[p];\n        add[p]=0;\n    }\n    return;\n}\n\nvoid build(int p, int l, int r)\n{\n    add[p]=0;\n    if (l==r) {\n        scanf(\"%d\",&s[p]);\n        return;\n    }\n\n    int m=(l+r)/2;\n    build(2*p, l, m);\n    build(2*p+1, m+1, r);\n    up(p);\n    return;\n}\n\nvoid update(int p, int l, int r, int x, int y, int v)\n{\n    if (x<=l && r<=y) {\n        add[p]+=v;\n        s[p]+=(r-l+1)*v;\n        return;\n    }\n\n    down(p, l, r);\n    int m=(l+r)/2;\n    if (x<=m) update(2*p, l, m, x, y, v);\n    if (m<y) update(2*p+1, m+1, r, x, y, v);\n    up(p);\n    return;\n}\n\nlong long query(int p, int l, int r, int x, int y)\n{\n    if (x<=l && r<=y) {\n        return s[p];\n    }\n\n    down(p, l, r);\n    int m=(l+r)/2;\n    long long ret=0;\n    if (x<=m) ret+=query(2*p, l, m, x, y);\n    if (m<y) ret+=query(2*p+1, m+1, r, x, y);\n    return ret;\n}\n\nint main()\n{\n    cin >> n >> q;\n    build(1,1,n);\n    for (int i=1; i<=q; i++) {\n        int tmp, a, b, x;\n        scanf(\"%d\",&tmp);\n        if (tmp==1) {\n            scanf(\"%d%d%d\",&a,&b,&x);\n            update(1, 1, n, a, b, x);\n        }\n            else {\n                scanf(\"%d%d\",&a,&b);\n                cout << query(1, 1, n, a, b) << endl;\n            }\n    }\n    return 0;\n}\n```",
        "postTime": 1501815888,
        "uid": 31136,
        "name": "\u5408451518",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u63a8\u8350\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6216zkw\u7ebf\u6bb5\u6811\u3002\n\n\u6811\u72b6\u6570\u7ec4\uff0c\u5c31\u662f\u7528\u4e00\u500d\u7684\u7a7a\u95f4\uff0c\u533a\u95f4\u51cf\u6cd5\u7684\u601d\u60f3\uff0c\u5b8c\u6210\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u662f\u524d\u7f00\u548c\u6570\u7ec4\u548c\u666e\u901a\u6570\u7ec4\u4e4b\u524d\u7684\u6865\u6881\uff0c\u4fee\u6539\u548c\u67e5\u8be2\u590d\u6742\u5ea6\u90fd\u662fO($log_2 n$)\u3002\u8fd9\u91cc\u4e0d\u591a\u8bf4\uff0c\u8be6\u89c1\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u9898\u7684\u9898\u89e3\uff08\u8bdd\u8bf4\u90a3\u91cc\u597d\u591a\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u2026\u2026\uff09\u3002Cpp\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\nconst int MAX=100001;\nlong long d[MAX],id[MAX],s[MAX],k;\nint n,m,c,x,y;\nint lowbit(int x)\n{\n    return x&-x;\n}\nvoid add(long long *b,int p,long long v)\n{\n    for(;p<=n;p+=lowbit(p))\n        b[p]+=v;\n}\nlong long ask(long long*b,int p)\n{\n    long long a=0;\n    for(;p;p-=lowbit(p))\n        a+=b[p];\n    return a;\n}\nlong long query(int p)\n{\n    return s[p]+(p+1)*ask(d,p)-ask(id,p);\n}\nvoid add(int x,int y,long long v)\n{\n    add(d,x,v);\n    add(d,y+1,-v);\n    add(id,x,v*x);\n    add(id,y+1,-v*(y+1));\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&s[i]),s[i]+=s[i-1];\n    while(m--)\n    {\n        scanf(\"%d%d%d\",&c,&x,&y);\n        if(c==1)\n            scanf(\"%lld\",&k),add(x,y,k);\n        else\n            printf(\"%lld\\n\",query(y)-query(x-1));\n    }\n    return 0;\n}\n```\n\u7136\u540e\uff0c\u6211\u4eec\u8bb2zkw\u7ebf\u6bb5\u6811\u3002\n\nzkw\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u975e\u9012\u5f52\u5f0f\u7684\u7ebf\u6bb5\u6811\uff08\u4f5c\u8005\u662fTHU\u7684\u5f20\u6606\u73ae\uff0c\u53c2\u89c1\u4ed6\u81ea\u5df1\u7684PPT\u8bb2\u7a3f\u300a\u7edf\u8ba1\u7684\u529b\u91cf-\u7ebf\u6bb5\u6811\u300b\uff09\n\nzkw\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u51e0\u4e4e\u6ca1\u6709\u51fa\u73b0\u9012\u5f52\uff0c\u800c\u662f\u7528\u5faa\u73af\u4ee3\u66ff\u3002\u5404\u79cd\u64cd\u4f5c\u7684\u601d\u60f3\u540c\u666e\u901a\u7ebf\u6bb5\u6811\u3002\n\n\u90a3\u4e48\u4ed6\u6709\u4ec0\u4e48\u4f18\u70b9\u5462\uff1f\u4f18\u70b9\u5c31\u662f\uff0c\u5e38\u6570\u5c0f\u3002\u8fd9\u91cc\u5f00\u4e00\u4e2a\u6211\u4e11\u964b\u535a\u5ba2\u91cc[\u5173\u4e8ezkw\u7ebf\u6bb5\u6811\u7684\u7b80\u5355\u63cf\u8ff0](http://www.cnblogs.com/frankchenfu/p/7132445.html)\u3002\n\n\u4ee3\u7801\u8fd9\u91cc\u5c31\u4e0d\u63d0\u4f9b\u4e86\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\u3002\n",
        "postTime": 1499932763,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u603b\u7ed3\u4e86\u4e00\u4e0b\uff0c\u6807\u51c6\u7ebf\u6bb5\u6811\u533a\u95f4\u66f4\u6539\u7b80\u6d01\u5199\u6cd5\uff1f\n\n\u8fd9\u91cclazy\u6807\u8bb0\u5c24\u5176\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u2014\u2014\u8fd9\u79cd\u65b9\u6cd5\u4ece\u697c\u4e0b\u770b\u6765\u7684\uff0c\u611f\u89c9\u5f88\u795e\uff0c\u6b64\u5904\u52a0\u4ee5\u89e3\u91ca\uff1a\n\n1.update\u65f6lazy\u6807\u8bb0\u66f4\u65b0\u5148\u5c06\u8be5\u8282\u70b9\u8fd8\u539f\n\n2.lazy\u6807\u8bb0\u66f4\u65b0\u540e\uff0c\u5230\u6839\u90e8\u7684\u8def\u5f84\u5e94\u5e26\u4e0alazy\u6807\u8bb0\u66f4\u65b0\n\n3.\u82e5\u8be5\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\u65e0\u6cd5\u8fd8\u539f\uff0c\u5219\u76f4\u63a5\u5728sum\u4e0a\u4f5c\u6c38\u4e45\u66f4\u6539\n\n4.lazy\u6807\u8bb0\u4e0b\u653e\u65f6\uff0c\u56e0\u4e3a\u4e0b\u653e\u8282\u70b9\u6ca1\u6709\u7ecf\u8fc7\u76f4\u63a5\u66f4\u6539\uff0c\u65e0\u987b\u5728\u610f\u91cd\u590d\u76f8\u52a0\u60c5\u51b5\u3002\u540c\u65f6\uff0c\u82e5\u76f4\u63a5\u68c0\u67e5\u5230\u4e86\u5e26lazy\u6807\u8bb0\u7684\u8282\u70b9\uff0c\u6b64\u65f6lazy\u6807\u8bb0\u4e0d\u7b97\u505a\u4e0b\u653e\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u91cd\u590d\u8ba1\u7b97\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ls x<<1\n#define rs x<<1|1\nusing namespace std;\ntypedef long long ll;\nconst int N=300010;\nll a[N],sum[N];\nll addv[N];\n\nvoid build(int x,int l,int r){\n    if(l==r){sum[x]=a[l]; return;}\n    int mid=(l+r)>>1;\n    build(ls,l,mid),build(rs,mid+1,r);\n    sum[x]=sum[ls]+sum[rs];\n}\n\nvoid update(int x,int l,int r,int xl,int xr,int k){\n    if(xl<=l&&r<=xr){addv[x]+=k;}\n    else{\n        int mid=(l+r)>>1;\n        if(xr<=mid)update(ls,l,mid,xl,xr,k);\n        else if(xl>mid)update(rs,mid+1,r,xl,xr,k);\n        else update(ls,l,mid,xl,mid,k),update(rs,mid+1,r,mid+1,xr,k);\n    }\n    if(l<r)sum[x]=sum[ls]+sum[rs];//\u8fd9\u91cc\u590d\u539f\uff01 \n    if(l==r)sum[x]+=k;\n    else sum[x]+=addv[x]*(ll)(r-l+1);//\u518d\u52a0\u4e0alazy\u6807\u8bb0 \n}\n\nll check(int x,int l,int r,int xl,int xr,ll add){\n    if(xl<=l&&r<=xr)return sum[x]+add*(ll)(r-l+1);\n    int mid=(l+r)>>1;\n    if(xr<=mid)return check(ls,l,mid,xl,xr,add+addv[x]);\n    else if(xl>mid)return check(rs,mid+1,r,xl,xr,add+addv[x]);\n    else return check(ls,l,mid,xl,mid,add+addv[x])+check(rs,mid+1,r,mid+1,xr,add+addv[x]);\n}\n\nint main(){\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        cin>>a[i];\n    build(1,1,n);\n    int con,x,y,k;\n    for(int i=0;i<m;i++){\n        cin>>con>>x>>y;\n        if(con==1){\n            cin>>k;\n            update(1,1,n,x,y,k);\n        }\n        else if(con==2){\n            cout<<check(1,1,n,x,y,0)<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1499868115,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u53d7\u5230\u597d\u591a\u5927\u4f6c\u7684\u5f71\u54cd\uff0c\u840c\u65b0\u628a\u7ebf\u6bb5\u6811\u5c01\u5728\u4e86struct\u91cc\u9762\u3002\u3002\u3002\n\n\u8fdb\u5165\u6b63\u9898\uff1a\uff08\u4ee5\u4e0b\u5185\u5bb9\u5747\u5728\u7ed3\u6784\u4f53\u5185\uff09\n\n\n##\u53d8\u91cf\u5b9a\u4e49\uff1a\n\nsum[]\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u5143\u7d20\u603b\u548c\uff1b\n\naddv[]\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u7684\u5f85\u8ffd\u52a0\u503c\uff08\u61d2\u6807\u8bb0\uff09\uff0c\u521d\u503c\u5168\u90e8\u8bbe\u4e3a0\u3002\n\n\n##\u8fc7\u7a0b\u8bf4\u660e\uff1a\n\n#\u5efa\u6811\uff08Build\uff09\uff1a\n\n\u82e5\u5f53\u524d\u8282\u70b9\u4ec5\u5305\u542b\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u503c\uff0c\u5373L=R\uff0c\u5219\u76f4\u63a5\u8d4b\u503c\u4e3a\u5e8f\u5217\u4e2d\u8be5\u503c\uff0c\u5426\u5219\u9012\u5f52\u5efa\u7acb\u5de6\u53f3\u5b50\u6811\u540e\uff0c\u5c06\u5de6\u53f3\u5b50\u6811\u4fdd\u5b58\u7684sum\u503c\u76f8\u52a0\uff0c\u5373\u5f97\u5230\u5f53\u524d\u8282\u70b9\u7684sum\u503c\u3002\n\n\n#\u61d2\u6807\u8bb0\u4e0b\u653e\uff08Push\\_down\uff09\uff1a\n\n\u5c06\u5f53\u524d\u8282\u70b9\u7684addv\u503c\u4e0b\u653e\u5230\u5de6\u53f3\u5b50\u6811\u3002\n\n\u7ec6\u8282\u5b9e\u73b0\uff1a\n\n1.\u5b50\u6811\u7684addv\u503c\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u7684addv\u503c\uff1b\n\n2.\u5b50\u6811\u7684sum\u503c\u52a0\u4e0a\uff08\u5b50\u6811\u5305\u542b\u5143\u7d20\u6570\u91cf\\*\u5f53\u524d\u8282\u70b9\u7684addv\u503c\uff09\uff1b\n\n3.\u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684addv\u503c\uff0c\u5373\u8d4b\u503c\u4e3a0\u3002\n\n\u7279\u522b\u8bf4\u660e\uff1a\n\n1.\u4f7f\u7528\u524d\u5224\u65ad\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684addv\u503c\u4e3a0\u5219\u4e0d\u9700\u6267\u884c\u6b64\u4e0b\u653e\u51fd\u6570\u3002\u867d\u7136\u6267\u884c\u4e86\u4e5f\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u4f46\u6d6a\u8d39\u65f6\u95f4\u3002\n\n2.\u4e3a\u5c3d\u91cf\u8282\u7701\u65f6\u95f4\uff0c\u8981\u5c06\u5224\u65ad\u653e\u5728\u6b64\u51fd\u6570\u5916\u800c\u4e0d\u662f\u51fd\u6570\u5185\u3002\n\n\n#\u533a\u95f4\u52a0\uff08update\uff09\uff1a\n\n\u82e5\u5f53\u524d\u8282\u70b9\u5b8c\u5168\u5305\u542b\u5728\u5f85\u66f4\u65b0\u533a\u95f4\u5185\uff0c\u5219\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684addv\u503c\u548csum\u503c\u5373\u53ef\uff1b\n\n\u5426\u5219\uff1a\n\n1.\u82e5\u5f53\u524d\u8282\u70b9addv\u503c\u975e0\uff0c\u5219\u8fdb\u884c\u61d2\u6807\u8bb0\u4e0b\u653e\uff1b\n\n2.\u82e5\u5f85\u66f4\u65b0\u533a\u95f4\u4e0e\u5de6\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u5219\u9012\u5f52\u66f4\u65b0\u5de6\u5b50\u6811\uff0c\u540c\u7406\u5bf9\u53f3\u5b50\u6811\u4e5f\u6267\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002\n\n3.\u9012\u5f52\u66f4\u65b0\u5b50\u6811\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684sum\u503c\u3002\n\n\n#\u533a\u95f4\u67e5\u8be2\uff08query\uff09\uff1a\n\n\u82e5\u5f53\u524d\u8282\u70b9\u5b8c\u5168\u5305\u542b\u5728\u5f85\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684sum\u503c\uff1b\n\n\u5426\u5219\uff1a\n\n1.\u5b9a\u4e49\u5f53\u524d\u8282\u70b9\u7ed3\u679cans=0\uff1b\n\n2.\u82e5\u5f53\u524d\u8282\u70b9addv\u503c\u975e0\uff0c\u5219\u8fdb\u884c\u61d2\u6807\u8bb0\u4e0b\u653e\uff1b\n\n3.\u82e5\u5f85\u67e5\u8be2\u533a\u95f4\u4e0e\u5de6\u5b50\u6811\u5bf9\u5e94\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u5219\u9012\u5f52\u67e5\u8be2\u5de6\u5b50\u6811\uff0c\u5e76\u5c06\u6240\u5f97\u7ed3\u679c\u52a0\u7ed9ans\uff0c\u540c\u7406\u5bf9\u53f3\u5b50\u6811\u4e5f\u6267\u884c\u7c7b\u4f3c\u64cd\u4f5c\u3002\n\n4.\u9012\u5f52\u67e5\u8be2\u5b50\u6811\u5b8c\u6210\u540e\uff0c\u8fd4\u56de\u8ba1\u7b97\u597d\u7684ans\u503c\u3002\n\n\n##\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n    \n        \n        \n            \n            \n    \n        \n        \n    \n            \n            \n            \n    \n        \n            \n            \n            \n            \n\n\n\n    \n    \n    \n        \n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<string>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<map>\nusing namespace std;\nlong long c[2000010];\nstruct sgt{\n    long long sum[2000010];\n    long long addv[2000010];       \n    void build(int o,int l,int r){\n        addv[o]=0;\n        if(l==r)sum[o]=c[l];\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            build(lson,l,mid);\n            build(rson,mid+1,r);\n            sum[o]=sum[lson]+sum[rson];\n        }\n    }\n    void push_down(int o,int l,int r,int mid,int lson,int rson){\n        addv[lson]+=addv[o];\n        addv[rson]+=addv[o];\n        sum[lson]+=(mid-l+1)*addv[o];\n        sum[rson]+=(r-mid)*addv[o];\n        addv[o]=0;\n    }\n    void update(int o,int l,int r,int a,int b,int x){\n        if(l>=a && r<=b){\n            addv[o]+=x;\n            sum[o]+=(r-l+1)*x;\n            return;\n        }\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            if(addv[o])push_down(o,l,r,mid,lson,rson);\n            if(a<=mid)update(lson,l,mid,a,b,x);\n            if(b>mid)update(rson,mid+1,r,a,b,x);\n            sum[o]=sum[lson]+sum[rson];\n        }\n    }\n    long long query(int o,int l,int r,int a,int b){\n        if(l>=a && r<=b)return sum[o];\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            long long ans=0;\n            if(addv[o])push_down(o,l,r,mid,lson,rson);\n            if(a<=mid)ans+=query(lson,l,mid,a,b);\n            if(b>mid)ans+=query(rson,mid+1,r,a,b);\n            return ans;\n        }\n    }\n};\nsgt tree;\nint n,m,i,f;\nint x,y,k;\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)scanf(\"%d\",&c[i]);\n    tree.build(1,1,n);\n    for(i=1;i<=m;i++){\n        scanf(\"%d\",&f);\n        if(f&1){\n            scanf(\"%d%d%d\",&x,&y,&k);\n            tree.update(1,1,n,x,y,k);\n        }\n        else{\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%lld\\n\",tree.query(1,1,n,x,y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1495517904,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "```cpp\n//\u8fd9\u662f\u7ebf\u6bb5\u68112\u7684\u4ee3\u7801\u3002\u3002\u3002\n#pr\\//\u5176\u5b9e\u8fd9\u662f\nagma GCC optimize(\"O3\")//O3\u4f18\u5316\u3002\u3002\u3002\n//\u7ebf\u6bb5\u6811\u4e48\uff0c\u5efa\u6811\u7528\u4e8c\u5206\uff0c\u540c\u65f6\u52a0\u4e0a\u61d2\u60f0\u6807\u5fd7\uff1b\u4fee\u6539\u65f6\u5c3d\u91cf\u5f80\u61d2\u60f0\u6807\u8bb0\u4e0a\u9760\uff0c\u4e3e\u4e2a\u6700\u7b80\u5355\u7684//\u4f8b\u5b50:\u4e0d\u52a0\u61d2\u60f0\u6807\u8bb0\u5982\u679c\u6bcf\u6b21\u5747\u4fee\u6539\u6574\u4e2a\u533a\u95f4\u5c31\u51fa\u4e8b\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6n\u65b9logn\uff1b\u61d2\u60f0\u6807\u8bb0\u6700//\u574f\u60c5\u51b5\u4e0b\u4e3a\u4fee\u65391/2\u533a\u95f4+1/4\u533a\u95f4+1/8\u533a\u95f4+\u3002\u3002+\u4fee\u6539\u5230\u4e00\u4e2a\u70b9\uff08\u7c7b\u6bd4\u4e8e\u6811\u72b6\u6570\u7ec4\u90a3\u6837\u53ef//\u80fd\u5bb9\u6613\u7406\u89e3\uff09,\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a nlogn\uff08\u4e0d\u8fc7\u5fc5\u987b\u627f\u8ba4\uff0c\u5e38\u6570\u5927\u4e86\u5f88\u591a,\u6240\u4f9d\u8981\u6839\u636e\u9898\u76ee\u5224\u65ad\u662f\u5426\u52a0\u61d2\u60f0\u6807\u8bb0\uff09\n//\u6700\u540e\uff0c\u4e00\u4e2a\u5f69\u86cb\uff1a\u731c\u4e00\u4e0b\u8fd9\u4efd\u4ee3\u7801\u53ef\u5426\u901a\u8fc7\u7ebf\u6bb5\u68112\uff1f\n#include<stdio.h>\nusing namespace std;\nint n,m;\nlong long p,a[500010],vv[1000020],ll[2000050],rr[2000050],mm[2000050],k,jia[2000050],cheng[2000050];\nchar ch;\ninline void iin(int &kk){\n    ch=getchar();\n    for(;ch!='-'&&(ch<48||ch>57);){\n        ch=getchar();\n    }\n    if(ch=='-'){\n        ch=getchar();\n        for(;ch>=48&&ch<=57;){\n            kk=(kk<<1)+(kk<<3)+ch-48;\n            ch=getchar();\n        }\n        kk=-kk;\n        return;\n    }\n    for(;ch>=48&&ch<=57;){\n        kk=(kk<<1)+(kk<<3)+ch-48;\n        ch=getchar();\n    }\n}\ninline void lin(long long &kk){\n    ch=getchar();\n    for(;ch!='-'&&(ch<48||ch>57);){\n        ch=getchar();\n    }\n    if(ch=='-'){\n        ch=getchar();\n        for(;ch>=48&&ch<=57;){\n            kk=(kk<<1)+(kk<<3)+ch-48;\n            ch=getchar();\n        }\n        kk=-kk;\n        return;\n    }\n    for(;ch>=48&&ch<=57;){\n        kk=(kk<<1)+(kk<<3)+ch-48;\n        ch=getchar();\n    }\n}\nlong long build(int l,int r,int id){\n    if(l==r){\n        vv[id]=a[l]%p;\n        ll[id]=rr[id]=mm[id]=l;\n        return vv[id];\n    }\n    ll[id]=l;\n    rr[id]=r;\n    int mid=(l+r)>>1;\n    mm[id]=mid;\n    return vv[id]=build(l,mid,id<<1)+build(mid+1,r,(id<<1)|1);\n}\nlong long chengg(int l,int r,long long change,int id){\n//    printf(\"cheng%d %d %d %d\\n\",l,r,id,mm[id]);\n    int mmm=mm[id];\n    if(l==ll[id]&&r==rr[id]){\n        long long uu=cheng[id];\n        cheng[id]=(cheng[id]*change)%p;\n        long long u=jia[id];\n        jia[id]=(jia[id]*change)%p;\n        return (cheng[id]-uu)*vv[id]+(jia[id]-u)*(r-l+1);\n    }\n    if(mmm>=r){\n        long long u=chengg(l,r,change,id<<1);\n        u%=p;\n        vv[id]+=u;\n        return u;\n    }\n    if(mmm<l){\n        long long u=chengg(l,r,change,(id<<1)|1);\n        u%=p;\n        vv[id]+=u;\n        return u;\n    }\n    long long u=chengg(l,mmm,change,id<<1)+chengg(mmm+1,r,change,(id<<1)|1);\n    u%=p;\n    vv[id]+=u;\n    return u;\n}\nvoid jiaa(int l,int r,long long change,int id){\n    int lll=ll[id],rrr=rr[id];\n    if(l==lll&&r==rrr){\n        jia[id]=(jia[id]+change)%p;\n        return;\n    }\n    int mmm=mm[id];\n    vv[id]=(vv[id]+(r-l+1)*change)%p;\n//    printf(\"jia%d %d %d %d \",l,r,id,mm[id]);\n//    printf(\"%lld\\n\",vv[id]);\n    if(mmm>=r){\n        jiaa(l,r,change,id<<1);\n        return;\n    }\n    if(mmm<l){\n        jiaa(l,r,change,(id<<1)|1);\n        return;\n    }\n    jiaa(l,mmm,change,id<<1);\n    jiaa(mmm+1,r,change,(id<<1)|1);\n}\nlong long out(int l,int r,int id){\n//    printf(\"out%d %d %d\\n\",l,r,id);\n    vv[id]*=cheng[id];\n    vv[id]+=jia[id]*(rr[id]-ll[id]+1);\n    vv[id]%=p;\n    int lid=id<<1,rid=(id<<1)|1;\n    if(jia[id]){\n        jia[lid]+=jia[id],jia[lid]%=p;\n        jia[rid]+=jia[id],jia[rid]%=p;\n    }\n    if(cheng[id]>>1){\n        cheng[lid]*=cheng[id],cheng[lid]%=p;\n        cheng[rid]*=cheng[id],cheng[rid]%=p;\n    }\n//    printf(\"a%lld \",cheng[id]);\n//    printf(\"s%lld\\n\",jia[id]);\n    jia[id]=0,cheng[id]=1;\n//    printf(\"%d %d %d %d\\n\",l,r,id,vv[id]);\n    if(l==ll[id]&&r==rr[id]){\n        return vv[id];\n    }\n    int mid=mm[id];\n    if(mid>=r){\n        return out(l,r,lid);\n    }\n    if(mid<l){\n        return out(l,r,rid);\n    }\n    return out(l,mid,lid)+out(mid+1,r,rid);\n}\nint main(){\n    iin(n),iin(m);//iin(p);\n    p=2147483647000;\n    for(int i=1;i<=n;i++){\n        lin(a[i]);\n    }\n    for(int i=1;i<2000050;++i){\n        cheng[i]=1;\n    }\n    build(1,n,1);\n    int num=0,x=0,y=0;\n    for(int i=0;i<m;i++){\n        iin(num),iin(x),iin(y);\n        if(num>>1){\n//            if(num&1){\n                printf(\"%lld\\n\",out(x,y,1)%p);\n//            }\n//            else{\n//                lin(k);\n//                jiaa(x,y,k%p,1);\n//                k=0;\n//            }\n        }\n        else{\n            lin(k);\n            //chengg(x,y,k%p,1);\n            jiaa(x,y,k%p,1);\n            k=0;\n        }\n        num=x=y=0;\n    }\n    for(int i=1;i<=9;i++){\n//        printf(\"%lld \",vv[i]*cheng[i]+jia[i]*(rr[i]-ll[i]+1));\n    }\n    return 0;\n}\n```",
        "postTime": 1492432471,
        "uid": 27138,
        "name": "mrkrnblsa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "**\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u4e0e\u67e5\u8be2**\n\n\u6211\u7528\u7684\u662f\u4e00\u79cd\u5947\u8469\u7684\u5efa\u6811\u65b9\u5f0f\uff0c\u56e0\u6b64\u6811\u7684\u6700\u5927\u8282\u70b9\u6570\u4e3a\u4e0d\u5c0f\u4e8en\u76842\u7684\u5e42\u6b21\u65b9\n\n\u5bf9\u4e8e\u6bcf\u6b21\u7684\u533a\u95f4\u52a0\u6cd5\uff0c\u5bf9\u5f53\u524d\u8282\u70b9\u52a0\u4e0aadd\u6807\u8bb0\uff0c\u5e76\u7ef4\u62a4\u4fe1\u606f\n\n\u67e5\u8be2\u5c31\u53ea\u9700\u8ba1\u7b97\u67d0\u8282\u70b9\u4e0a\u7684sum(\u533a\u95f4\u548c)\u52a0\u4e0aadd\u4e58\u4ee5\u533a\u95f4\u957f\u5ea6\u5373\u53ef\n\n\u8be6\u60c5\u5728\u4ee3\u7801\u4e2d\u90fd\u6709\u8bf4\u660e\uff0c\u6211\u8dd1\u4e86900ms\u5728\u7ebf\u6bb5\u6811\u4e2d\u8fd8\u7b97\u5feb\u7684\uff0c\u5982\u679c\u7528\u8bfb\u5165\u4f18\u5316\u7684\u8bdd\u4f1a\u66f4\u5feb\u4e9b\n\n\u6ce8\u610f\u4f18\u5316\u5e38\u6570,\u5982\u6211\u7528\u4e86\u5f88\u591a\u4f4d\u8fd0\u7b97\uff1a( i\\*2=i<<1) ; (i\\*2+1=i<<1|1)\n\n\n\n\n\n    \n    \n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nll a[140000],k;\nint x,y;\nll sumv[300000],addv[300010];\nll _sum;\nvoid maintain(int o,int l,int r)//\u7ef4\u62a4\u8be5\u8282\u70b9\u4fe1\u606f \n{\n    int lc=(o<<1),rc=(o<<1|1);\n    if(l<r)\n    {\n        sumv[o]=sumv[lc]+sumv[rc];//\u82e5\u4e0d\u662f\u53f6\u8282\u70b9\u91cd\u65b0\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684sum\n    }\n    if(l==r)\n    {\n        sumv[o]+=k;\n        //\u82e5\u662f\u53f6\u8282\u70b9\u5c31\u4e0d\u4f1a\u8ba1\u7b97\u4e0a\u8ff0\u91cd\u65b0\u8ba1\u7b97,\u6545\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\u4f1a\u628a\u66fe\u7ecf\u52a0\u8fc7\u7684add\u518d\u52a0\n    }\n    else\n    {\n        sumv[o]+=addv[o]*(ll)(r-l+1);//\u6ce8\u610f\u8981\u4e58\u4ee5(r-l+1)\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u4e3a\u8fd9\u4e48\u591a \n        //\u4e0d\u662f\u53f6\u8282\u70b9\u91cd\u65b0\u8ba1\u7b97\u540e\u518d\u52a0\u5f53\u524d\u8282\u70b9\u7684\u66fe\u7ecf\u6240\u6709\u7684add\n    }\n}\nvoid update(int o,int l,int r)//\u4fee\u6539\u8282\u70b9\u4fe1\u606f \n{\n    int lc=(o<<1),rc=(o<<1|1);\n    if(x<=l&&r<=y)//\u82e5\u5f53\u524dupdate\u7684\u533a\u95f4\u5df2\u7ecf\u5728\u8981\u4fee\u6539\u7684\u533a\u95f4[x,y]\u5185\u4e86 \n    {\n        addv[o]+=k;\n    }\n    else\n    {//puts(\"lalala\");\n        int m=l+(r-l)/2;\n        if(x<=m) update(lc,l,m);\n        if(y>m) update(rc,m+1,r);\n    }\n    maintain(o,l,r);\n}\nvoid query(int o,int l,int r,int add)//\u67e5\u8be2\u64cd\u4f5c \n{\n    if(x<=l&&r<=y)//\u82e5\u5f53\u524dquery\u7684\u533a\u95f4\u5df2\u7ecf\u5728\u8981\u67e5\u8be2\u7684\u533a\u95f4[x,y]\u5185\u4e86 \n    {\n        _sum+=sumv[o]+add*(ll)(r-l+1);\n    }\n    else\n    {\n        int m=l+(r-l)/2;\n        if(x<=m) query(o*2,l,m,add+addv[o]);\n        if(y>m) query(o*2+1,m+1,r,add+addv[o]);\n    }\n}\nint main()\n{\n    int i,j,m,n,r,h,g,h0;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;++i) scanf(\"%lld\",&a[i]);\n    memset(addv,0,sizeof(addv));//\u8282\u70b9\u7684\u6807\u8bb0\u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u76ee\u524d\u52a0\u4e0a\u4e86\u591a\u5c11\u503c\n    //build(1,1,n);//\u9012\u5f52\u5efa\u6811\u89c1\u5e95\u4e0b\n    h=log(n)/log(2)+0.9999;//\u6811\u7684\u6df1\u5ea6\uff0c\u4ece0\u5c42\u5f00\u59cb \n    g=(1<<(h+1))-1;//\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7 \n    for(i=(1<<h);i<=g;++i)//\u81ea\u4e0b\u5411\u4e0a\u9012\u63a8\u5efa\u6811\uff0c\u8fd9\u6837\u4e2a\u4eba\u8ba4\u4e3a\u66f4\u6613\u7406\u89e3\u4e9b\uff0c\u5b83\u662f\u4e2a\u6ee1\u4e8c\u53c9\u6811\n    {\n        sumv[i]=a[i-(1<<h)+1];\n    }\n    for(i=(1<<h)-1;i>=1;--i)\n    {\n        sumv[i]=sumv[i<<1]+sumv[i<<1|1];\n```\n}//\u5230\u6b64\u4e3a\u6b62\u6811\u5df2\u7ecf\u5efa\u5b8c\u4e86\n    \n```cpp\n    for(i=1;i<=m;++i)\n    {\n        scanf(\"%d\",&r);\n        if(r==1)\n        {\n            scanf(\"%d%d%lld\",&x,&y,&k);\n            update(1,1,(1<<h));\n        }\n        if(r==2)\n        {\n            scanf(\"%d%d\",&x,&y);\n            query(1,1,(1<<h),0);//\u6ce8\u610f\u4ece1\u52301<<h\u624d\u662f\u6211\u7684\u7ebf\u6bb5\u6811\u957f\u5ea6\u4e3a\u4e00\u7684\u90a3\u4e9b\u533a\u95f4 \n            printf(\"%lld\\n\",_sum);\n            _sum=0;\n        }\n    }\n    return 0;\n}\n/*void build(int h,int l,int r)//\u53e6\u4e00\u79cd\u9012\u5f52\u5efa\u6811\u65b9\u5f0f\n{\n    if(l==r)\n    {\n        sumv[h]=a[l];\n        return;\n    }\n    int mid=l+r>>1;\n    build(h<<1,l,mid);\n    build(h<<1|1,mid+1,r);\n    sumv[h]=sumv[h<<1]+sumv[h<<1|1];\n}*/\n```",
        "postTime": 1491995773,
        "uid": 32776,
        "name": "BLMontgomery",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u5757\u72b6\u94fe\u8868\u3002\n\n\n\u7531\u4e8e\u6ca1\u6709\u63d2\u5165\u5220\u9664\u64cd\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u5757\u8fdb\u884c\u987a\u5e8f\u67e5\u627e\u3002\n\n\n\u6709\u70b9\u6162\uff0c1300+ms\uff0c\u4f46\u662f\u7b80\u5355\u6613\u61c2\u554a\u3002\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nconst int MAXN=1024;\nint l[MAXN],r[MAXN];\nLL sum[MAXN],lt[MAXN],num[MAXN*MAXN];\nint n,m,tot,siz;\nchar c;\ninline int read(){\n    c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    int p=0;\n    while(c>='0'&&c<='9') p=p*10+c-'0',c=getchar();\n    return p;\n}\ninline void push_down(int k){\n    if(!lt[k]) return;\n    for(int i=l[k];i<=r[k];i++) num[i]+=lt[k];\n    lt[k]=0;\n}\nint main(){\n    n=read();m=read();\n    siz=int(sqrt(n));\n    l[tot]=1;\n    for(int i=1,a;i<=n;i++){\n        num[i]=read();\n        r[tot]=i;\n        sum[tot]+=num[i];\n        a++;\n        if(a==siz&&i<n) l[++tot]=i+1,a=0;\n    }\n    for(int k=0,a,b,c,d;k<m;k++){\n        a=read();b=read();c=read();\n        if(a==1){\n            d=read();\n            for(int i=0;i<=tot;i++){\n                if(l[i]>=b&&r[i]<=c) sum[i]+=(r[i]-l[i]+1)*d,lt[i]+=d;\n                else if(l[i]<=b&&r[i]>=b){\n                    sum[i]+=(r[i]-b+1)*d;\n                    push_down(i);\n                    for(int j=b;j<=r[i];j++) num[j]+=d;\n                }\n                else if(l[i]<=c&&r[i]>=c){\n                    sum[i]+=(c-l[i]+1)*d;\n                    push_down(i);\n                    for(int j=l[i];j<=c;j++) num[j]+=d;\n                }\n            }\n        }\n        else{\n            LL ans=0;\n            for(int i=0;i<=tot;i++){\n                if(l[i]>=b&&r[i]<=c) ans+=sum[i];\n                else if(l[i]<=b&&r[i]>=b){\n                    push_down(i);\n                    for(int j=b;j<=r[i];j++) ans+=num[j];\n                }\n                else if(l[i]<=c&&r[i]>=c){\n                    push_down(i);\n                    for(int j=l[i];j<=c;j++) ans+=num[j];\n                }\n            }\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1484534945,
        "uid": 26393,
        "name": "\u6211\u7684\u59b9\u59b9syf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\n\n\u8bb0\u5f97\u5f00long long\n\n\u4ee5\u53ca\u4f4d\u8fd0\u7b97\u662f\u6bd4\u52a0\u51cf\u540e\u8fd0\u7b97\u7684\n\n\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\nstruct node\n{\n    int l,r;\n    long long sum,add;\n}    tr[400005];\ninline void build(int rt,int l,int r)\n{\n    tr[rt].l=l,tr[rt].r=r;\n    if(l==r)\n    {\n        long long x;\n        scanf(\"%lld\",&x);\n        tr[rt].sum=x;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(rt<<1,l,mid);\n    build(rt<<1|1,mid+1,r);\n    tr[rt].sum=tr[rt<<1].sum+tr[rt<<1|1].sum;\n}\ninline void update(int rt,int L,int R,int x)\n{\n    int l=tr[rt].l,r=tr[rt].r;\n    if(L<=l && r<=R)\n    {\n        tr[rt].sum=(long long)x*(r-l+1)+tr[rt].sum;\n        tr[rt].add+=x;\n        return;\n    }\n    int len=(r-l+1);\n    if(tr[rt].add)\n    {\n        tr[rt<<1].add+=tr[rt].add;\n        tr[rt<<1|1].add+=tr[rt].add;\n        tr[rt<<1].sum+=(long long)tr[rt].add*(len-(len>>1));\n        tr[rt<<1|1].sum+=(long long)tr[rt].add*(len>>1);\n        tr[rt].add=0;\n    }\n    int mid=(l+r)>>1;\n    if(L<=mid)    update(rt<<1,L,R,x);\n    if(R>mid)    update(rt<<1|1,L,R,x);\n    tr[rt].sum=tr[rt<<1].sum+tr[rt<<1|1].sum;\n}\ninline long long query(int rt,int L,int R)\n{\n    int l=tr[rt].l,r=tr[rt].r;\n    if(L<=l && r<=R)\n    {\n        return    tr[rt].sum;\n    }\n    int len=(r-l+1);\n    if(tr[rt].add)\n    {\n        tr[rt<<1].add+=tr[rt].add;\n        tr[rt<<1|1].add+=tr[rt].add;\n        tr[rt<<1].sum+=(long long)tr[rt].add*(len-(len>>1));\n        tr[rt<<1|1].sum+=(long long)tr[rt].add*(len>>1);\n        tr[rt].add=0;\n    };\n    long long ret=0;\n    int mid=(l+r)>>1;\n    if(L<=mid)    ret+=(long long)query(rt<<1,L,R);\n    if(R>mid)    ret+=(long long)query(rt<<1|1,L,R);\n    return ret;\n}\nint main()\n{\n    int n,m,op,x,y,L,R;\n    scanf(\"%d%d\",&n,&m);\n    build(1,1,n); \n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&op);\n        if(op==1)\n        {\n            scanf(\"%d%d%d\",&L,&R,&x);\n            update(1,L,R,x);\n        }\n        else\n        {\n            scanf(\"%d%d\",&L,&R);\n            printf(\"%lld\\n\",query(1,L,R));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1502551248,
        "uid": 44250,
        "name": "Zzh20011004",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "##\u7b2c\u4e00\u6b21\u5199\u7ebf\u6bb5\u6811\u4e0d\u8981\u770b\u8fd9\u7bc7\u9898\u89e3\n\n\u6307\u9488\u5165\u95e8\u6765\u5199\u4e00\u7bc7\u6307\u9488\u7ebf\u6bb5\u6811\n\n\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u4e00\u4e2a\u8282\u70b9\u7684\u6570\u636e\uff0cadd\u6807\u8bb0\n\n\u548c\u7236\u8282\u70b9\u5b50\u8282\u70b9\u7684\u6307\u9488\n\n\u5176\u4ed6\u64cd\u4f5c\u7c7b\u4f3c\u4e8e\u6807\u51c6\u7ebf\u6bb5\u6811\n\n\u5514 \u6bd4\u8f83\u597d\u901a\u8fc7\u753b\u56fe\u7406\u89e3\n\n~~\u5176\u5b9e\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f18\u70b9\u53ea\u662f\u6362\u4e2a\u65b9\u6cd5~~\n\n\u00b7\u00b7\u00b7\n```cpp\n#include<bits/stdc++.h>\n#define mid (ml+mr)/2\ntypedef long long int LL;\ntypedef struct node{\n    LL a,ad,sum;\n    node *f,*ls,*rs;\n}node;\nnode *root; \nvoid tree(LL n,node *fa,bool k)//\u9012\u5f52\u8c03\u7528\u5e76\u8bfb\u5165\u6570\u636e\n{\n    node *s=(node*)malloc(sizeof(node));\n    if(fa==NULL) root=s;\n    else\n    {\n        s->f=fa;\n        if(k) fa->ls=s;\n        else fa->rs=s;\n    }\n    s->ad=0;\n    s->sum=n;\n    if(n==1)\n    {\n        s->ls=NULL;\n        s->rs=NULL;\n        scanf(\"%lld\",&s->a);\n    } \n    else\n    {\n        tree((n+1)/2,s,1);\n        tree(n/2,s,0);\n        s->a=(s->ls)->a+(s->rs)->a;\n    }\n}\nvoid push(node *fa)//\u5c06ad\u6807\u8bb0\u63a8\u5230\u513f\u5b50\u8282\u70b9\u4e0a\n{\n    if(fa->ls!=NULL) (fa->ls)->ad+=fa->ad;\n    if(fa->rs!=NULL) (fa->rs)->ad+=fa->ad;\n    fa->a+=(fa->ad)*(fa->sum);\n    fa->ad=0;\n    return;\n}\nvoid add(LL ml,LL mr,LL p,LL l,LL r,node *z)//\u4e8c\u5206\u67e5\u627e\u533a\u95f4\u5e76\u505a\u533a\u95f4\u4fee\u6539\n{\n    if(ml==l&&mr==r) \n    {\n        z->ad+=p;\n        return;\n    }\n    if(r<=mid) \n    {\n        z->a+=p*(r-l+1);\n        add(ml,mid,p,l,r,z->ls);\n    }\n    else if(l>=mid+1)\n    {\n        z->a+=p*(r-l+1);\n        add(mid+1,mr,p,l,r,z->rs);\n    } \n    else \n    {\n        z->a+=p*(r-l+1);\n        add(ml,mid,p,l,mid,z->ls);\n        add(mid+1,mr,p,mid+1,r,z->rs);\n    }\n}\nLL getsum(LL ml,LL mr,LL l,LL r,node *z)//\u6c42\u548c\n{\n    if(z->ad) push(z);//\u6c42\u548c\u65f6\u5c06\u5bf9\u5e94\u4f4d\u7684ad\u6807\u8bb0\u63a8\u81f3\u4e0b\u4e00\u4f4d\n    if(ml==l&&mr==r) \n    {\n        return z->a;\n    }\n    if(r<=mid) return getsum(ml,mid,l,r,z->ls);\n    else if(l>=mid+1) return getsum(mid+1,mr,l,r,z->rs);\n    else \n    {\n        return getsum(ml,mid,l,mid,z->ls)+getsum(mid+1,mr,mid+1,r,z->rs);\n    }\n}\nvoid print(node *fa)//\u6d4b\u8bd5\u7528 \u7528\u4e8e\u540e\u5e8f\u904d\u5386\u6574\u4e2a\u7ebf\u6bb5\u6811\n{\n    if(fa->ls) print(fa->ls);\n    if(fa->rs) print(fa->rs);\n    printf(\"%lld %lld\\n\",fa->a,fa->ad);\n    return;\n}\nint main()\n{\n    LL n,m,l,x,y,k;\n    scanf(\"%lld%lld\",&n,&m);\n    tree(n,NULL,0);\n    for(LL i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&l);\n        if(l==1)\n        {\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            add(1,n,k,x,y,root);\n        }\n        else\n        {\n            scanf(\"%lld%lld\",&x,&y);\n            printf(\"%lld\\n\",getsum(1,n,x,y,root));\n        }\n    }\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1502421231,
        "uid": 19133,
        "name": "Purified",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    },
    {
        "content": "Lazy Tag\u6807\u8bb0\u601d\u60f3\n\n\u8fd9\u4e2a\u5c31\u662f\u6a21\u677f\uff0c\u54ea\u6653\u5f97\u8fd870\u5206\u4e86\u597d\u51e0\u6b21\u3002\n\n\u6ce8\u610f\u6570\u7ec4\u5f00\u5927\u70b9\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std ;\nconst ll maxn = 100010 ;\nll n, m, tree[maxn<<2], lzy[maxn<<2] ;\nbool Read ( ll &x ) {\n    bool f = 0 ; x = 0 ; char c = getchar() ; \n    while ( !isdigit(c) ) {\n        if ( c == '-' ) f = 1 ;\n        if ( c == EOF ) return false ;\n        c = getchar() ;\n    }\n    while ( isdigit(c) ) {\n        x = 10 * x + c - '0' ;\n        c = getchar() ;\n    }\n    if ( f ) x = -x ;\n    return true ;\n}\nvoid push_up ( ll h ) { tree[h] = tree[h<<1] + tree[h<<1|1] ; }\nvoid push_down ( ll h, ll lenth ) {\n    if ( lzy[h] ) {\n        lzy[h<<1] += lzy[h] ;\n        lzy[h<<1|1] += lzy[h] ;\n        tree[h<<1] += lzy[h]*(lenth-(lenth>>1)) ;\n        tree[h<<1|1] += lzy[h]*(lenth>>1) ;\n        lzy[h] = 0 ;\n    }\n}\nvoid create_tree ( ll h, ll l, ll r ) {\n    if ( l == r ) {\n        Read(h[tree]) ;\n        return ;\n    }\n    ll mid = l+r >> 1 ;\n    create_tree ( h<<1, l, mid ) ;\n    create_tree ( h<<1|1, mid+1, r ) ;\n    push_up(h) ;\n}\nll query ( ll h, ll l, ll r, ll x, ll y ) {\n    if ( x <= l && r <= y ) return h[tree] ;\n    push_down(h,r-l+1) ;\n    ll mid = l+r >> 1 ;\n    if ( y <= mid ) return query ( h<<1, l, mid, x, y ) ;\n    else if ( x > mid ) return query ( h<<1|1, mid+1, r, x, y ) ;\n    else return \n        query ( h<<1, l, mid, x, mid ) +\n        query ( h<<1|1, mid+1, r, mid+1, y ) ;\n}\nvoid update ( ll h, ll l, ll r, ll x, ll y, ll k ) {\n    if ( x <= l && r <= y ) {\n        lzy[h] += k ;\n        tree[h] += (r-l+1)*k ;\n        return ;\n    }\n    push_down(h,r-l+1) ;\n    ll mid = l+r >> 1; \n    if ( y <= mid ) update ( h<<1, l, mid, x, y, k ) ;\n    else if ( x > mid ) update ( h<<1|1, mid+1, r, x, y, k ) ;\n    else {\n        update ( h<<1, l, mid, x, mid, k ) ;\n        update ( h<<1|1, mid+1, r, mid+1, y, k ) ;\n    }\n    push_up(h) ;\n}\nint main() {\n    ll i, j, k, q, cmd, x, y, z ;\n    Read(n) ; Read(m) ;\n    create_tree ( 1, 1, n ) ;\n    while ( m-- ) {\n        Read(cmd) ; Read(x) ; Read(y) ;\n        if ( cmd == 1 ) {\n            Read(k) ;\n            update ( 1, 1, n, x, y, k ) ;\n        } else printf ( \"%lld\\n\", query ( 1, 1, n, x, y ) ) ;\n    }\n    return 0 ;\n}\n```",
        "postTime": 1486906751,
        "uid": 17941,
        "name": "Vasily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3372 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\u3011"
    }
]