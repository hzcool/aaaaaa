[
    {
        "content": "\u8fd9\u9898\u7684\u5efa\u6a21\u601d\u8def\u6709\u70b9\u795e\u4ed9...\n\n\u5982\u679c\u4e00\u67b6\u98de\u673a\u5728\u98de\u5b8c\u7b2c $i$ \u6761\u822a\u7ebf\u540e\uff0c\u80fd\u98de\u7b2c $j$ \u6761\u822a\u7ebf\uff0c\u5c31\u4ece $i$ \u5411 $j$ \u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u5bb9\u6613\u770b\u51fa\u8fd9\u4e2a\u56fe\u662f\u4e00\u5f20 DAG\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u98de\u673a\u98de\u5b8c\u6240\u6709\u822a\u7ebf\u3002\n\n\u8fd9\u662f\u4e00\u4e2a [DAG \u4e0a\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6](https://studyingfather.com/archives/2723) \u7684\u6a21\u578b\u3002\n\n\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5224\u65ad\u98de\u5b8c\u7b2c $i$ \u6761\u822a\u7ebf\u540e\uff0c\u662f\u5426\u80fd\u98de\u7b2c $j$ \u6761\u822a\u7ebf\u5462\uff1f\n\n\u5148\u9884\u5904\u7406\u4ece $i$ \u673a\u573a\u51fa\u53d1\uff0c\u5230 $j$ \u673a\u573a\u4e14\u5177\u5907\u8d77\u98de\u6761\u4ef6\u7684\u6700\u77ed\u65f6\u95f4 $f(i,j)$\u3002\u8fd9\u4e2a\u53ef\u4ee5\u8dd1\u4e00\u904d Floyd \u5b9e\u73b0\u3002\n\n\u8bbe\u7b2c $i$ \u6761\u822a\u7ebf\u7684\u8d77\u70b9\u4e3a $x_i$\uff0c\u7ec8\u70b9\u4e3a $y_i$\uff0c\u8d77\u98de\u65f6\u95f4\u4e3a $d_i$\uff0c\u5219\u540c\u4e00\u67b6\u98de\u673a\u98de\u5b8c\u7b2c $i$ \u6761\u822a\u7ebf\u540e\u80fd\u98de\u7b2c $j$ \u6761\u822a\u7ebf\uff0c\u5f53\u4e14\u4ec5\u5f53 $d_i+t(x_i,y_i)+p_{y_i}+f(y_i,x_j)\\leq d_j$\u3002\n\n```cpp\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct graph\n{\n struct edge\n {\n  int v,w,next;\n }e[1000005];\n int s,t,cnt;\n int head[1005],cur[1005],dis[1005],vis[1005];\n void addedge(int u,int v,int w)\n {\n  e[++cnt].v=v;\n  e[cnt].w=w;\n  e[cnt].next=head[u];\n  head[u]=cnt;\n }\n void init(int S,int T)\n {\n  s=S,t=T;\n  memset(head,0,sizeof(head));\n  cnt=1;\n }\n bool bfs()\n {\n  queue<int> q;\n  memset(dis,INF,sizeof(dis));\n  memcpy(cur,head,sizeof(cur));\n  dis[s]=0,vis[s]=1;\n  q.push(s);\n  while(!q.empty())\n  {\n   int u=q.front();\n   q.pop();\n   vis[u]=0;\n   for(int i=head[u];i;i=e[i].next)\n   {\n    int v=e[i].v;\n    if(e[i].w&&dis[v]>dis[u]+1)\n    {\n     dis[v]=dis[u]+1;\n     if(!vis[v])q.push(v),vis[v]=1;\n    }\n   }\n  }\n  return dis[t]!=INF;\n }\n int dfs(int u,int flow)\n {\n  if(u==t)return flow;\n  int used=0;\n  for(int i=cur[u];i;i=e[i].next)\n  {\n   int v=e[i].v;\n   cur[u]=i;\n   if(e[i].w&&dis[v]==dis[u]+1)\n   {\n    int f=dfs(v,min(flow-used,e[i].w));\n    e[i].w-=f;\n    e[i^1].w+=f;\n    used+=f;\n    if(used==flow)break;\n   }\n  }\n  return used;\n }\n int maxflow()\n {\n  int ans=0;\n  while(bfs())\n   ans+=dfs(s,INF);\n  return ans;\n }\n}g;\nstruct line\n{\n int x,y,d;\n}a[505];\nint p[505],T[505][505],f[505][505];\nint main()\n{\n int n,m;\n cin>>n>>m;\n int s=2*m+1,t=2*m+2;\n g.init(s,t);\n for(int i=1;i<=n;i++)\n  cin>>p[i];\n for(int i=1;i<=n;i++)\n  for(int j=1;j<=n;j++)\n   cin>>T[i][j];\n for(int i=1;i<=n;i++)\n  for(int j=1;j<=n;j++)\n   if(i!=j)f[i][j]=T[i][j]+p[j];\n for(int k=1;k<=n;k++)\n  for(int i=1;i<=n;i++)\n   for(int j=1;j<=n;j++)\n    f[i][j]=min(f[i][j],f[i][k]+f[k][j]);\n for(int i=1;i<=m;i++)\n {\n  cin>>a[i].x>>a[i].y>>a[i].d;\n  g.addedge(s,i,1),g.addedge(i,s,0);\n  g.addedge(i+m,t,1),g.addedge(t,i+m,0);\n }\n for(int i=1;i<=m;i++)\n  for(int j=1;j<=m;j++)\n  {\n   int u=a[i].x,v=a[i].y,w=a[j].x;\n   if(a[i].d+T[u][v]+p[v]+f[v][w]<=a[j].d)\n    g.addedge(i,j+m,1),g.addedge(j+m,i,0);\n  }\n cout<<m-g.maxflow()<<endl;\n return 0;\n}\n```\n",
        "postTime": 1582632278,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5769)\n\n\n\u795e\u4ed9\u5efa\u6a21\u9898\u3002\u6211\u4eec\u5982\u679c\u628a\u98de\u673a\u770b\u6210\u8def\u5f84\uff0c\u822a\u73ed\u770b\u6210\u8282\u70b9\uff0c\u5c31\u662f\u4e00\u4e2a `DAG` \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u7684\u95ee\u9898\uff08\u4e0b\u9762\u4f1a\u89e3\u91ca\uff09\u3002\n\n\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5efa\u8fb9\u3002 \n\n\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\u7684\u610f\u4e49\u3002\u82e5 $u$ \u548c $v$ \u4e4b\u95f4\u6709\u8fde\u8fb9\uff0c\u8bf4\u660e\u4e00\u6761\u8def\u5f84\u8986\u76d6\u4e86 $u$ \u5c31\u4e00\u5b9a\u53ef\u4ee5\u8986\u76d6 $v$\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u5c31\u662f\u4e00\u67b6\u98de\u673a\u98de\u4e86 $u$ \u822a\u73ed\uff0c\u5c31\u4e00\u5b9a\u53ef\u4ee5\u98de $v$ \u822a\u73ed\u3002\n\n\u663e\u7136\uff0c\u98de\u673a\u6bcf\u6b21\u98de\u884c\u53ef\u4ee5\u4e3a\u4e86\u8c03\u5ea6\u800c\u4e0d\u6267\u884c\u822a\u73ed\u4efb\u52a1\u3002\n\n\u90a3\u4e48\u5c31\u5f88\u660e\u786e\u4e86\u3002\u53ea\u9700\u8981\u77e5\u9053\u4e00\u67b6\u98de\u673a\u5728\u98de\u5b8c $u$ \u822a\u73ed\u540e\u80fd\u4e0d\u80fd\u5728 $v$ \u822a\u73ed\u7684\u8d77\u98de\u65f6\u95f4\u4e4b\u524d\u5230\u8fbe $v$ \u822a\u73ed\u7684\u8d77\u70b9\u673a\u573a\u3002\n\n\u6211\u4eec\u7528 $f_{i,j}$ \u8868\u793a\u4ece\u673a\u573a $i$ \u51fa\u53d1\u5230\u4ece\u673a\u573a $j$ \u51fa\u53d1\u6240\u7528\u7684\u6700\u77ed\u65f6\u95f4\u3002\u6ce8\u610f\uff0c\u662f**\u51fa\u53d1**\u800c\u4e0d\u662f\u5230\u8fbe\u3002\n\n\u9996\u5148\uff0c$f_{i,i}=0$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u72b6\u6001\u63cf\u8ff0\u7684\u662f\u53d1\u751f\u76f8\u540c\u7684\u4e8b\u60c5\u4e4b\u95f4\u7684\u65f6\u95f4\uff0c\u663e\u7136\uff0c\u76f8\u540c\u4e8b\u60c5\u65f6\u95f4\u76f8\u540c\uff0c\u65f6\u95f4\u5dee\u4e3a $0$\u3002\n\n\u5176\u6b21\uff0c$f_{i,j}=t_{i,j}+p_j\\,(i\\ne j)$\u3002\u8fd9\u662f\u521d\u59cb\u72b6\u6001\u3002\u56e0\u4e3a $t_{i,j}$ \u662f\u4ece $i$ \u8d77\u98de\u5230 $j$ \u964d\u843d\u6240\u9700\u7684\u65f6\u95f4\uff0c\u60f3\u8981\u518d\u6b21\u8d77\u98de\uff0c\u5fc5\u987b\u7ecf\u8fc7\u7ef4\u4fee\u3002\u56e0\u6b64\u6700\u77ed\u65f6\u95f4\u80af\u5b9a\u662f\u843d\u5730\u4e4b\u540e\u9a6c\u4e0a\u7ef4\u4fee\uff0c\u7ef4\u4fee\u5b8c\u9a6c\u4e0a\u8d77\u98de\uff0c\u8fd9\u6837\u51e0\u4e2a\u52a8\u4f5c\u4e4b\u95f4\u7684\u8854\u63a5\u4e0d\u82b1\u8d39\u65f6\u95f4\uff0c\u53ea\u9700\u8981\u52a0\u4e0a\u7ef4\u4fee\u7684\u65f6\u95f4\u5c31\u597d\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5 `Floyd` \u5904\u7406\u4efb\u610f\u4ece\u4e24\u673a\u573a\u51fa\u53d1\u4e4b\u95f4\u7684\u6700\u77ed\u65f6\u95f4\u3002\u4f46\u662f\u8fd9\u6837\u52a0\u4e86\u4e00\u4e2a\u7ef4\u4fee\u7684\u65f6\u95f4\uff0c\u96be\u514d\u8ba9\u4eba\u611f\u5230\u602a\u5f02\u3002\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\u3002\n\n\u6bd4\u5982 $f_{i,j}=f_{i,k}+f_{k,j}\\,(i\\ne j\\ne k)$\u3002\u5176\u4e2d $f_{i,k}$ \u8868\u793a\u98de\u673a\u4ece $i$ \u8d77\u98de\u5230 $k$ \u964d\u843d\uff0c\u7136\u540e\u5728 $k$ \u7ef4\u4fee\uff1b$f_{k,j}$ \u8868\u793a\u98de\u673a\u4ece $k$ \u8d77\u98de\u5230 $j$ \u964d\u843d\uff0c\u7136\u540e\u5728 $j$ \u7ef4\u4fee\u3002\u8fd9\u6837\u4e00\u6765\uff0c$f_{i,j}$ \u63cf\u8ff0\u7684\u5c31\u662f\u98de\u673a\u4ece $i$ \u8d77\u98de\u5230 $k$ \u964d\u843d\uff0c\u5728 $k$ \u7ef4\u4fee\u597d\u540e\u4ece $k$ \u8d77\u98de\u5230 $j$ \u964d\u843d\uff0c\u518d\u5728 $j$ \u7ef4\u4fee\u597d\u540e\u7acb\u9a6c\u8d77\u98de\u3002\u663e\u7136\u662f\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u98de\u884c\u6d41\u7a0b\u7684\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u822a\u73ed $a$ \u548c $b$\uff0c\u7528 $u$ \u8868\u793a\u8d77\u98de\u673a\u573a\uff0c$v$ \u8868\u793a\u964d\u843d\u673a\u573a\uff0c$w$ \u8868\u793a\u8d77\u98de\u65f6\u95f4\u3002\u5219\u5fc5\u987b\u6ee1\u8db3 $a_w+t_{a_u,a_v}+p_{a_v}+f_{a_v,b_u}\\le b_w$ \u65f6\uff0c\u4e24\u4e2a\u822a\u73ed\u4e4b\u95f4\u53ef\u4ee5\u8fde $a\\rightarrow b$ \u7684\u8fb9\uff08\u4ece $a$ \u822a\u73ed\u51fa\u53d1\u5f00\u59cb\u98de\uff0c\u5230\u8fbe $b$ \u822a\u73ed\u7ed3\u675f\uff09\u3002 \u4e0a\u9762\u7684\u5f0f\u5b50\u7684\u610f\u601d\u662f\uff1a\u4ece $a_u$ \u8d77\u98de\u5230 $a_v$ \u964d\u843d\u7136\u540e\u7ef4\u4fee\uff0c\u518d\u4ece $a_v$ \u8d77\u98de\u5230 $b_u$ \u964d\u843d\u7136\u540e\u7ef4\u4fee\uff08\u7ef4\u4fee\u7684\u65f6\u95f4\u5728 $f$ \u91cc\u90fd\u7b97\u4e86\uff09\uff0c\u6700\u7ec8\u5f97\u5230\u6700\u65e9\u7684\u53ef\u4ee5\u8d77\u98de\u7684\u65f6\u95f4\u3002\u5373\uff0c\u98de\u673a\u80fd\u5426\u5728\u822a\u73ed $b$ \u8d77\u98de\u4e4b\u524d\u5230\u8fbe $b_u$ \u5e76\u505a\u597d\u7ef4\u4fee\u5de5\u4f5c\u3002\n\n\u7531\u4e8e\u53ea\u53ef\u80fd\u662f\u8d77\u98de\u65e9\u7684\u822a\u73ed\u5411\u8d77\u98de\u665a\u7684\u822a\u73ed\u5efa\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u6784\u6210\u4e86\u4e00\u4e2a `DAG`\uff0c\u81f3\u6b64\u8f6c\u5316\u6210 `DAG` \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u7684\u6a21\u578b\uff08\u4e0d\u76f8\u4ea4\u662f\u56e0\u4e3a\u4e00\u4e2a\u822a\u73ed\u4e0d\u80fd\u7531\u591a\u67b6\u98de\u673a\u53bb\u98de\uff0c\u822a\u73ed\u98de\u5b8c\u4e86\u5c31\u6ca1\u6709\u8fd9\u4e2a\u822a\u73ed\u4e86\uff0c\u4e0d\u80fd\u8ba9\u98de\u673a\u5728\u673a\u573a\u4e3a\u4e86\u4e00\u4e2a\u5b8c\u6210\u7684\u822a\u73ed\u7a7a\u7b49\uff09\u3002\n\n\u5bf9\u4e8e `DAG` \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u95ee\u9898\uff0c\u6211\u4eec\u5c06 `DAG` \u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9 $u$ \u62c6\u6210 $u_1$ \u548c $u_2$\uff0c\u8868\u793a\u51fa\u53d1\u548c\u5230\u8fbe $u$\u3002\u5bf9\u4e8e `DAG` \u4e2d\u6240\u6709\u7684\u8fb9 $u\\rightarrow v$ \u5728\u6a21\u578b\u4e2d\u8fde $u_1\\rightarrow v_2$\uff0c\u8868\u793a\u4e00\u6761\u8def\u5f84\u4ece $u$ \u51fa\u53d1\u5c31\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe $v$\uff0c\u4ece\u800c\u8986\u76d6 $u,v$ \u4e24\u4e2a\u8282\u70b9\uff1b\u5373\u4e00\u67b6\u98de\u673a\u98de\u5b8c $u$ \u822a\u73ed\u4e00\u5b9a\u53ef\u4ee5\u98de $v$ \u822a\u73ed\uff0c\u4ece\u800c\u6267\u884c\u5b8c\u4e24\u4e2a\u822a\u73ed\u4efb\u52a1\u3002\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u95ee\u9898\u5b8c\u5168\u8f6c\u5316\u6210\u4e86\u6a21\u578b\uff0c\u76f4\u63a5\u7528\u516c\u5f0f\u8ba1\u7b97\uff1a\n\n`DAG` \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6 = \u539f\u56fe\u8282\u70b9\u6570 - \u62c6\u70b9\u56fe\u6700\u5927\u5339\u914d\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u662f\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u4e00\u4e2a\u5165\u70b9\u53ea\u80fd\u4e0e\u4e00\u4e2a\u51fa\u70b9\u5339\u914d\uff0c\u8f6c\u5316\u6210\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u3002\u53c8\u56e0\u4e3a\u589e\u52a0\u4e00\u6761\u5339\u914d $(u_1,v_2)$\uff0c\u5c31\u53ef\u4ee5\u5c06\u4ee5 $u$ \u4e3a\u7ed3\u5c3e\u7684\u8def\u5f84\u548c\u4ee5 $v$ \u4e3a\u5f00\u5934\u7684\u4e24\u6761\u8def\u5f84\u8fde\u6210\u4e00\u6761\u8def\u5f84\uff0c\u4ece\u800c\u4f7f\u7b54\u6848\u51cf\u4e00\u3002\u56e0\u6b64\u4efb\u610f\u4e00\u4e2a\u8def\u5f84\u8986\u76d6\u6570\u90fd\u53ef\u4ee5\u7528\u201c\u539f\u56fe\u70b9\u6570 - \u4efb\u610f\u62c6\u70b9\u56fe\u5339\u914d\u6570\u201d\u6765\u8868\u793a\u3002\u7531\u4e8e\u8981\u4f7f\u8def\u5f84\u8986\u76d6\u6570\u6700\u5c0f\uff0c\u6240\u4ee5\u51cf\u53bb\u7684\u8981\u5c3d\u91cf\u5927\uff08\u56e0\u4e3a\u539f\u56fe\u70b9\u6570\u662f\u5b9a\u503c\uff09\uff0c\u56e0\u6b64\u51cf\u53bb\u7684\u5339\u914d\u6570\u8981\u6700\u5927\uff0c\u5373\u51cf\u53bb\u6700\u5927\u5339\u914d\u3002\n\n\u6211\u4eec\u5c06\u6e90\u70b9 $S$ \u5411\u6240\u6709 $u_1$ \u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5c06\u6240\u6709 $u_2$ \u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5c06\u62c6\u70b9\u56fe\u4e2d\u7684\u6240\u6709 $u_1\\rightarrow v_2$ \u7684\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$\u3002\u8fd9\u6837\u8dd1\u51fa\u7684\u6700\u5927\u6d41\u5373\u4e3a\u6700\u5927\u5339\u914d\u3002\u56e0\u4e3a\u5728\u7f51\u7edc\u56fe\u4e2d\u6bcf\u4e00\u6761\u6d41\u90fd\u76f8\u5f53\u4e8e\u4e00\u6761\u5339\u914d\uff1a\u5339\u914d\u95ee\u9898\u4e2d\uff0c\u540c\u4e00\u4e2a\u70b9\u53ea\u80fd\u6839\u4e00\u4e2a\u70b9\u5339\u914d\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff1b\u7136\u800c\u6700\u5927\u6d41\u4e2d\uff0c\u82e5\u540c\u4e00\u4e2a\u70b9\uff08\u8868\u793a\u5230\u8fbe\u7684\u8282\u70b9\uff09\u6709\u5176\u5b83\u591a\u4e2a\u8282\u70b9\u6d41\u5165\u7684\u6d41\u91cf\uff0c\u7531\u4e8e\u81ea\u5df1\u5230\u6c47\u70b9 $T$ \u7684\u8fb9\u5bb9\u91cf\u4e3a $1$\uff0c\u6240\u4ee5\u4e5f\u53ea\u4f1a\u5c06\u4e00\u4e2a\u70b9\u6d41\u5165\u7684\u6d41\u91cf\u6d41\u5230\u6c47\u70b9\uff0c\u4ea7\u751f\u8d21\u732e\u3002\u56e0\u6b64\u6700\u5927\u6d41\u4e5f\u662f\u201c\u540c\u4e00\u4e2a\u70b9\u53ea\u80fd\u6839\u4e00\u4e2a\u70b9\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u201d\uff0c\u7b49\u4ef7\u4e8e\u6700\u5927\u5339\u914d\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7528\u6700\u5927\u6d41\u6c42\u51fa\u6700\u5927\u5339\u914d\u540e\uff0c\u7528\u539f\u56fe\u70b9\u6570\uff08\u822a\u73ed\u6570\uff09\u51cf\u53bb\u6700\u5927\u5339\u914d\uff0c\u5c31\u662f\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u2014\u2014\u8986\u76d6\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u6570\uff0c\u5373\u4e3a\u98de\u5b8c\u6240\u6709\u822a\u73ed\u7684\u6700\u5c11\u98de\u673a\u6570\uff0c\u4e3a\u9898\u6240\u6c42\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N = 1005, M = 6e5;\nint n, m, p[N], t[N][N], f[N][N], cnt = 1, q[M], l, r, d[N], hd[N], T, ans, now[N];\nstruct flight {\n\tint u, v, w;\n}a[N];\nstruct edge {\n\tint v, w, nxt;\n}e[M];\ninline void add(int u, int v, int w) {\n\te[++cnt] = edge{v, w, hd[u]};\n\thd[u] = cnt;\n}\ninline bool bfs() {\n\tfor (int i = 0; i <= T; ++i) {\n\t\tnow[i] = hd[i];\n\t\td[i] = 0;\n\t}\n\td[q[l = r = 1] = 0] = 1;\n\twhile (l <= r) {\n\t\tint x = q[l++];\n\t\tfor (int i = hd[x]; i; i = e[i].nxt) {\n\t\t\tif (e[i].w && !d[e[i].v]) {\n\t\t\t\td[q[++r] = e[i].v] = d[x] + 1;\n\t\t\t\tif (e[i].v == T) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x, int flow) {\n\tif (x == T) {\n\t\treturn flow;\n\t}\n\tint s = 0;\n\tfor (int i = now[x]; i; i = e[i].nxt) {\n\t\tif (e[i].w && d[e[i].v] == d[x] + 1) {\n\t\t\tint k = dfs(e[i].v, min(flow - s, e[i].w));\n\t\t\te[i].w -= k;\n\t\t\te[i ^ 1].w += k;\n\t\t\ts += k;\n\t\t\tif (s == flow) {\n\t\t\t\tnow[x] = i;\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\t}\n\td[x] = now[x] = 0;\n\treturn s;\n}\nsigned main(/*\u82a6\u8bed\u6668\u6211\u559c\u6b22\u4f60*/) {\n\tscanf(\"%lld%lld\", &n, &m);\n\tT = (m << 1) + 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%lld\", p + i);\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tscanf(\"%lld\", t[i] + j);\n\t\t\tif (i ^ j) {\n\t\t\t\tf[i][j] = p[j] + t[i][j];\n\t\t\t} else {\n\t\t\t\tf[i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%lld%lld%lld\", &a[i].u, &a[i].v, &a[i].w);\n\t\tadd(0, i, 1);\n\t\tadd(i, 0, 0);\n\t\tadd(i + m, T, 1);\n\t\tadd(T, i + m, 0);\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tfor (int k = 1; k <= n; ++k) {\n\t\t\t\tf[j][k] = min(f[j][k], f[j][i] + f[i][k]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tfor (int j = 1; j <= m; ++j) {\n\t\t\tif (i ^ j && a[i].w + t[a[i].u][a[i].v] + p[a[i].v] + f[a[i].v][a[j].u] <= a[j].w) {//\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u5c31\u662f\u539f\u56fe\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u5bf9\u5176\u62c6\u70b9\u5efa\u6a21\u5373\u53ef\n\t\t\t\tadd(i, j + m, 1);\n\t\t\t\tadd(j + m, i, 0);\n\t\t\t}\n\t\t}\n\t}\n\twhile (bfs()) {\n\t\tans += dfs(0, 1e18);\n\t}\n\tprintf(\"%lld\\n\", m - ans);\n} \n```\n",
        "postTime": 1661496972,
        "uid": 539211,
        "name": "\u849f\u84bb\u00b7\u5ed6\u5b50\u9633",
        "ccfLevel": 5,
        "title": "P5769"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://www.cmsblog.top/archives/jsoi2016-fei-ji-diao-du)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5769)\n\n## \u601d\u8def\n\n\u8fd9\u9053\u9898\u76ee\u8fd8\u662f\u633a\u677f\u7684\u4e00\u9053\u7f51\u7edc\u6d41\uff0c~~\u53ef\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 LOJ \u4e0a\u7684\u6807\u7b7e\u662f\u6700\u77ed\u8def~~\u3002\n\n\u9996\u5148 **\u6700\u5c11\u9700\u8981\u591a\u5c11\u67b6\u98de\u673a** \u53ef\u4ee5\u8f6c\u5316\u4e3a **\u6bcf\u67b6\u98de\u673a\u5c3d\u91cf\u7528\u66f4\u591a\u7684\u6b21\u6570**\u3002\n\n\u6240\u4ee5\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u67b6\u98de\u673a\u80fd\u591f\u5148\u98de\u8def\u7ebf $i$\uff0c\u518d\u98de\u8def\u7ebf $j$ \u7684\u6761\u4ef6\u3002\n\n\u5b9a\u4e49 $G_{i,j}$ \u8868\u793a\u673a\u573a $i$ \u5230\u673a\u573a $j$ \u5e76\u4e14\u5728\u673a\u573a $j$ \u7ef4\u4fee\u5b8c\u6bd5\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u6761\u4ef6\u662f\u663e\u7136\u7684\uff0c\u9700\u8981\u6ee1\u8db3\u4ece $X_i$ \u8d77\u98de\u5230 $Y_i$ \u518d\u5728 $Y_i$ \u4fee\u7406 $P_{Y_i}$ \u7684\u65f6\u95f4\u6700\u540e\u518d\u8d70 **$Y_i$ \u5230 $X_j$ \u7684\u6700\u77ed\u8def** \u7684\u603b\u65f6\u95f4\u8981\u65e9\u4e8e $D_j$\uff0c\u8fd9\u6837\u4e24\u4e2a\u673a\u573a\u5c31\u662f\u53ef\u4ee5\u7531\u4e00\u67b6\u98de\u673a\u8d70\u7684\uff0c\u5f62\u5f0f\u5316\u7684\u5c31\u662f\u5982\u4e0b\u4e0d\u7b49\u5f0f\uff1a\n\n$$D_i + T_{X_i,Y_i} + P_{Y_i} + G_{Y_i, X_j} \\le D_j$$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u822a\u7ebf\u6211\u4eec\u5c06\u5176\u62c6\u5206\u6210\u5de6\u822a\u7ebf\u548c\u53f3\u822a\u7ebf\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5efa\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\n\n1. \u5c06\u6240\u6709\u5de6\u822a\u7ebf\u548c\u6e90\u70b9\u8fde\u63a5\uff0c\u5bb9\u91cf\u4e3a $1$\uff1b\n\n2. \u5c06\u6240\u6709\u53f3\u822a\u7ebf\u548c\u6c47\u70b9\u8fde\u63a5\uff0c\u5bb9\u91cf\u4e3a $1$\uff1b\n\n3. \u5047\u8bbe\u4e00\u67b6\u98de\u673a\u53ef\u4ee5\u98de\u8def\u7ebf $i$ \u548c\u8def\u7ebf $j$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06 $i$ \u5bf9\u5e94\u7684\u5de6\u822a\u7ebf\u548c $j$ \u5bf9\u5e94\u7684\u53f3\u822a\u7ebf\u8fde\u63a5\uff0c\u5bb9\u91cf\u4e3a $\\infty$\u3002\n\n\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u6700\u5c11\u7684\u98de\u673a\u6765\u98de\u8fd9\u51e0\u6761\u822a\u7ebf\u5c31\u76f8\u5f53\u4e8e\u4f7f\u7528\u6700\u5c11\u7684\u8def\u5f84\u6765\u8986\u76d6\u8fd9\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\n\n\u7ed3\u8bba\uff1a\u7b54\u6848\u4e3a $M-\\text{\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d} = M - \\text{Max Flow}$\u3002\n\n\u7b80\u8bc1\uff1a\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u6a21\u578b\uff1a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\n\n\u9996\u5148\uff0c\u6bcf\u9009\u62e9\u4e00\u6761\u8fb9\u76f8\u5f53\u4e8e\u5408\u5e76\u4e24\u4e2a\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5c3d\u53ef\u80fd\u7684\u591a\u9009\u8fb9\uff0c\u9009\u7684\u8fb9\u6570\u6700\u591a\u4e3a \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\u90a3\u4e48\u5982\u679c\u4e0d\u5408\u5e76\u7684\u8bdd\u6bcf\u4e00\u4e2a\u822a\u7ebf\u90fd\u9700\u8981\u81ea\u5df1\u72ec\u7acb\u8dd1\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $M$\uff0c\u6240\u4ee5\u73b0\u5728\u7684\u7b54\u6848\u4e3a $M-\\text{\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d} = M - \\text{Max Flow}$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 500010;\n\nstruct _ {\n    int To, Next, Value;\n} G[MAXN << 1];\nint Head[MAXN], Cnt = 1;\n\nvoid _add(int u, int v, int w) {\n    G[++Cnt] = {v, Head[u], w};\n    Head[u] = Cnt;\n}\n\nvoid Add(int u, int v, int w) {\n    _add(u, v, w);\n    _add(v, u, 0);\n}\n\nint Depth[MAXN], Hash[MAXN], N, M, S, T;\n\nvoid BFS() {\n    memset(Depth, -1, sizeof Depth);\n    memset(Hash, 0, sizeof Hash);\n    queue<int> q;\n    q.push(T);\n    Depth[T] = 0;\n    Hash[0]++;\n\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n        for (int i = Head[u]; i; i = G[i].Next) {\n            int v = G[i].To;\n            if (Depth[v] != -1) continue;\n            Depth[v] = Depth[u] + 1;\n            Hash[Depth[v]]++;\n            q.push(v);\n        }\n    }\n}\n\nint Max_Flow;\n\nint DFS(int u, int flow) {\n    if (u == T) {\n        Max_Flow += flow;\n        return flow;\n    }\n    int used = 0;\n    for (int i = Head[u]; i; i = G[i].Next) {\n        int v = G[i].To;\n        if (G[i].Value && Depth[v] + 1 == Depth[u]) {\n            int Min = DFS(v, min(G[i].Value, flow - used));\n            if (Min) {\n                G[i].Value -= Min;\n                G[i ^ 1].Value += Min;\n                used += Min;\n            }\n            if (used == flow) {\n                return used;\n            }\n        }\n    }\n\n    Hash[Depth[u]]--;\n    if (Hash[Depth[u]] == 0) Depth[S] = MAXN - 5;\n    Depth[u]++;\n    Hash[Depth[u]]++;\n    return used;\n}\n\nint ISAP() {\n    Max_Flow = 0;\n    BFS();\n    while (Depth[S] < MAXN - 5) DFS(S, 0x3f3f3f3f);\n    return Max_Flow;\n}\n\nint Graph[510][510], X[510], Y[510], D[510], P[510], Cost[510][510];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin >> N >> M;\n    S = M * 2 + 1, T = M * 2 + 2;\n\n    for (int i = 1; i <= N; i++) {\n        cin >> P[i];\n    }\n\n    for (int i = 1; i <= N; i++) {\n        for (int j = 1; j <= N; j++) {\n            cin >> Graph[i][j];\n            Cost[i][j] = Graph[i][j];\n        }\n    }\n\n    for (int i = 1; i <= M; i++) {\n        cin >> X[i] >> Y[i] >> D[i];\n    }\n\n    for (int i = 1; i <= N; i++) {\n        for (int j = 1; j <= N; j++) {\n            if (i == j) continue;\n            Graph[i][j] = Cost[i][j] + P[j];\n        }\n    }\n\n    for (int k = 1; k <= N; k++) {\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                Graph[i][j] = min(Graph[i][j], Graph[i][k] + Graph[k][j]);\n            }\n        }\n    }\n\n    for (int i = 1; i <= M; i++) {\n        Add(S, i, 1);\n    }\n    for (int i = 1; i <= M; i++) {\n        Add(i + M, T, 1);\n    }\n    for (int i = 1; i <= M; i++) {\n        for (int j = 1; j <= M; j++) {\n            if (D[i] + Cost[X[i]][Y[i]] + P[Y[i]] + Graph[Y[i]][X[j]] <= D[j]) {\n                Add(i, j + M, 0x3f3f3f3f);\n            }\n        }\n    }\n\n    cout << M - ISAP() << endl;\n    return 0;\n}\n```",
        "postTime": 1659593465,
        "uid": 461426,
        "name": "CmsMartin",
        "ccfLevel": 6,
        "title": "[JSOI2016]\u98de\u673a\u8c03\u5ea6"
    },
    {
        "content": "# P5769 [JSOI2016]\u98de\u673a\u8c03\u5ea6 \u9898\u89e3\n\n## Link\n\n[P5769 [JSOI2016]\u98de\u673a\u8c03\u5ea6](https://www.luogu.com.cn/problem/P5769)\n\n## Solution\n\n\u5f88\u597d\u7684\u4e00\u9053\u9898\uff0c\u4e3b\u8981\u96be\u70b9\u5728\u4e8e\u5efa\u56fe\u548c\u95ee\u9898\u8f6c\u5316\u3002\n\n\u9996\u5148\u8bf4\u5efa\u56fe\uff1a\u601d\u8def\u662f\u5982\u679c\u7b2c $i$ \u6761\u822a\u7ebf  **\u80fd\u8854\u63a5** \u7b2c $j$ \u6761\u822a\u7ebf\uff0c\u5c31\u5728 $i,j$ \u4e4b\u95f4\u5efa\u8fb9\u3002\u8fd9\u91cc\uff0c\u80fd\u8854\u63a5\u6307\u7684\u662f\u7b2c $i$ \u6761\u822a\u7ebf\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u95f4\u52a0\u4e0a\u5728\u7ec8\u70b9\u7ef4\u62a4\u7684\u65f6\u95f4\u5728\u7b2c $j$ \u6761\u822a\u7ebf\u7684\u8d77\u98de\u65f6\u95f4\u4e4b\u524d\u3002\n\n\u8bfb\u5165\u7684\u65f6\u5019\u521d\u59cb\u5316\u6700\u77ed\u8def\uff1a\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = 1; j <= n; j++)\n    {\n        read(len[i][j]);\n        if (i != j)\n        {\n            mp[i][j] = len[i][j] + wit[j];\n        }\n        else\n        {\n            mp[i][j] = 0;\n        }\n    }\n}\n```\n\n\u4e3a\u4e86\u5224\u65ad\u662f\u5426\u80fd\u591f\u8854\u63a5\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u65f6\u95f4\uff0c\u6570\u636e\u8303\u56f4\u4e0d\u5927\uff0c\u76f4\u63a5\u5957\u5168\u5458\u6700\u77ed\u8def\u3002\n\n```cpp\nfor (int k = 1; k <= n; k++)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n        }\n    }\n}\n```\n\n\u5efa\u8fb9\u7684\u90e8\u5206\u4ee3\u7801\uff1a\u9700\u8981\u5c06\u6bcf\u6761\u822a\u7ebf\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5f00\u59cb\u65f6\u521d\u59cb\u5316\uff0c$SS$ \u8fde\u5411\u6bcf\u6761\u822a\u7ebf\uff0c\u6bcf\u6761\u822a\u7ebf\u8fde\u5411 $TT$\u3002\u6ee1\u8db3\u6709\u6e90\u6c47\u7f51\u7edc\u6d41\u7684\u683c\u5f0f\u3002\n\n- \u6e90\u70b9\u548c\u6c47\u70b9\u52a0\u8fb9\u3002\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n    add(SS, i);\n    add(i + m, TT);\n}\n```\n\n\u822a\u7ebf\u4e4b\u95f4\u6ee1\u8db3\u6761\u4ef6\u7684\u53ef\u4ee5\u52a0\u8fb9\uff0c\u6ce8\u610f\u5230\u8fbe\u7684\u70b9\u9700\u8981\u52a0 $m$\u3002\n\n- \u822a\u7ebf\u4e4b\u95f4\u52a0\u8fb9\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    for (int j = 1; j <= m; j++)\n    {\n        if (i == j)\n        {\n            continue;\n        }\n        /* \u5de6\u4fa7\u4f9d\u6b21\u4e3a: \n         * \u822a\u7ebf i \u8d77\u98de\u65f6\u95f4 \n         * \u822a\u7ebf i \u8def\u4e0a\u65f6\u95f4 \n         * \u822a\u7ebf i \u7ef4\u62a4\u65f6\u95f4 \n         * \u822a\u7ebf i \u7ec8\u70b9\u5230\u822a\u7ebf j \u8d77\u70b9\u6700\u77ed\u65f6\u95f4\n        */\n        if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n        {\n            add(i, j + m);\n        }\n    }\n}\n```\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u5efa\u51fa\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a**\u6709\u5411\u65e0\u73af\u56fe**\u3002\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5373\u53ef\u3002\n\n\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u5373\u53ef\uff0c\u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u4e00\u4e0b[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P2764)\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u89c1\u4e0b:\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_m 3000201\n#define max_n 5020\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to, nxt, val;\n} edge[max_m];\nstruct LINE\n{\n    int u, v, tim;\n} lines[max_n];\nint head[max_n], tot = 1;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = 1;\n    head[u] = tot;\n\n    edge[++tot].to = u;\n    edge[tot].nxt = head[v];\n    edge[tot].val = 0;\n    head[v] = tot;\n}\nint n, m;\nint wit[max_n];\nint len[max_n][max_n], mp[max_n][max_n];\nint SS, TT;\nint now[max_n], dep[max_n];\nbool bfs()\n{\n    memset(dep, 0x3f, (TT + 2) * (sizeof(int)));\n    memcpy(now, head, (TT + 2) * sizeof(int));\n    queue<int> que;\n    que.push(SS);\n    dep[SS] = 1;\n    while (!que.empty())\n    {\n        int u = que.front();\n        que.pop();\n        for (int i = head[u]; i; i = edge[i].nxt)\n        {\n            int v = edge[i].to;\n            if (edge[i].val && dep[v] >= INT_MAX / 2)\n            {\n                dep[v] = dep[u] + 1;\n                que.push(v);\n                if(v == TT)\n                {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int u, int sum)\n{\n    if (u == TT || sum == 0)\n    {\n        return sum;\n    }\n    int flow = 0, k;\n    for (int i = now[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        now[u] = i;\n        if (edge[i].val && dep[v] == dep[u] + 1)\n        {\n            k = dfs(v, min(sum, edge[i].val));\n            if (k)\n            {\n                edge[i].val -= k;\n                edge[i ^ 1].val += k;\n                flow += k;\n                sum -= k;\n            }\n        }\n    }\n    return flow;\n}\n\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m);\n    SS = (m << 1) + 2, TT = (m << 2) + 3;\n    for (int i = 1; i <= n; i++)\n    {\n        read(wit[i]);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            read(len[i][j]);\n            if (i != j)\n            {\n                mp[i][j] = len[i][j] + wit[j];\n            }\n            else\n            {\n                mp[i][j] = 0;\n            }\n        }\n    }\n    for (int k = 1; k <= n; k++)\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= n; j++)\n            {\n                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n            }\n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n        add(SS, i);\n        add(i + m, TT);\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n            if (i == j)\n            {\n                continue;\n            }\n            if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n            {\n                add(i, j + m);\n            }\n        }\n    }\n    int max_flow = 0;\n    while (bfs())\n    {\n        max_flow += dfs(SS, 0x7fffffffffff);\n    }\n    writeln(m - max_flow);\n    return 0;\n}\n```\n\n---\n\n## End\n\n[\u63d0\u4ea4\u8bb0\u5f55\uff0c\u6700\u4f18\u89e3\u7b2c\u4e00\u9875](https://www.luogu.com.cn/record/107790449)\n\n\u7b2c\u4e00\u6b21\u5199\u9ed1\u9898\u9898\u89e3\u3002\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg)](https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ \"Get your own page views count badge on badges.toozhao.com\")\n\n---\n",
        "postTime": 1681197041,
        "uid": 458193,
        "name": "cn_ryh",
        "ccfLevel": 4,
        "title": "P5769 [JSOI2016]\u98de\u673a\u8c03\u5ea6 \u9898\u89e3"
    },
    {
        "content": ">$n$ \u4e2a\u673a\u573a\uff0c\u7531 $i$ \u5230 $j$ \u65f6\u95f4\u4e3a $t_{i,j}$\u3002$m$ \u6761\u822a\u7ebf\uff0c\u7b2c $i$ \u6761\u822a\u7ebf $d_i$ \u65f6\u523b\u4ece $x_i$ \u673a\u573a\u8d77\u98de**\u76f4\u98de**\u5411 $y_i$ \u673a\u573a\u3002\u5f53\u98de\u673a\u964d\u843d\u5230 $k$ \u53f7\u673a\u573a\u540e\uff0c\u9700\u8981\u82b1\u8d39 $p_k$ \u65f6\u95f4\u624d\u80fd\u518d\u6b21\u8d77\u98de\u3002\n>\n>$0$ \u65f6\u523b\u53ef\u4ee5\u5728\u4efb\u610f\u673a\u573a\u5e03\u7f6e\u4efb\u610f\u591a\u67b6\u7ef4\u4fee\u5b8c\u6bd5\u7684\u98de\u673a\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u67b6\u98de\u673a\u3002\n>\n>$1\\le n,m\\le 500$\uff0c$0\\le p_i,t_{i,j}\\le 10^6$\uff0c$1\\le d_i\\le 10^6$\u3002\n\n\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u5c06\u6bcf\u4e00\u4e2a\u673a\u573a\u6bcf\u4e00\u65f6\u523b\u90fd\u62c6\u6210\u4e00\u4e2a\u70b9\uff0c\u4f46\u65f6\u523b\u592a\u591a\uff0c\u663e\u7136\u4e0d\u592a\u884c\u3002\n\n\u800c\u771f\u6b63\u6709\u610f\u4e49\u7684\u65f6\u95f4\u5176\u5b9e\u53ea\u6709\u6bcf\u6761\u822a\u7ebf\u7684\u8d77\u59cb\u65f6\u95f4\u548c\u7ec8\u6b62\u65f6\u95f4\u3002\u6211\u4eec\u4e0d\u59a8\u5c06\u6bcf\u6761\u822a\u7ebf\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8003\u8651\u5efa\u56fe\u3002\n\n\u53d1\u73b0\u6b64\u65f6\u95ee\u9898\u5df2\u7ecf\u88ab\u6211\u4eec\u8f6c\u5316\u4e3a\u4e86\u300c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u300d\uff0c\u4e24\u6761\u822a\u7ebf\u95f4\u6709\u8fb9\u5f53\u4e14\u4ec5\u5f53\u524d\u4e00\u6761\u822a\u7ebf\u7ed3\u675f\u540e\uff0c\u53ef\u4ee5\u8d76\u5728\u540e\u4e00\u6761\u822a\u7ebf\u5f00\u59cb\u4e4b\u524d\u5230\u8fbe\u8d77\u59cb\u4f4d\u7f6e\u5e76\u7ef4\u4fee\u5b8c\u6bd5\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5148\u505a Floyd\uff0c\u6c42\u51fa\u4efb\u610f\u4e24\u4e2a\u673a\u573a\u975e\u76f4\u98de\u72b6\u6001\u4e0b\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u5e26\u4e0a\u7ef4\u4fee\u65f6\u95f4\u540e\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8fde\u8fb9\u3002\n\n\u82e5\u53ef\u4ee5\u8fde\u8fb9\uff0c\u5c31\u4ece\u524d\u4e00\u4e2a\u822a\u7ebf\u7684\u7ec8\u6b62\u8282\u70b9\u5411\u540e\u4e00\u6761\u822a\u7ebf\u7684\u8d77\u59cb\u8282\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff1b\u7136\u540e\u6e90\u70b9\u5411\u6240\u6709\u7ec8\u6b62\u8282\u70b9\u8fde\u8fb9\uff0c\u8d77\u59cb\u8282\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u5e26\u4e0a\u6e90\u6c47\u70b9\uff0c\u8dd1\u4e00\u904d\u6700\u5c0f\u5272\u540e\uff0c$m-ans$ \u5373\u4e3a\u7b54\u6848\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=1005;\nconst int M=6e5+5;\nconst int K=505;\nconst int INF=1e9;\nint n,m,p[K],a[K][K],s,t,dep[N],cur[N],x[N],y[N],d[N],ans,dis[N][N];\nstruct node{\n\tint to[M],next[M],head[N],tot=1,val[M];\n\tvoid adde(int u,int v,int w){\n\t\tto[++tot]=v,next[tot]=head[u],val[tot]=w,head[u]=tot;\n\t\tto[++tot]=u,next[tot]=head[v],val[tot]=0,head[v]=tot;\n\t}\n}S;\nll read(){\n    ll w=0,f=1;\n    char ch=getchar();\n    while (ch>'9'||ch<'0') {\n        if (ch=='-') f=-1;\n        ch=getchar();\n    }\n    while (ch>='0'&&ch<='9') {\n        w=(w<<3)+(w<<1)+(ch^48);\n        ch=getchar();\n    }\n    return w*f;\n}\nqueue<int> q;\nbool bfs(){\n\tfor (int i=s;i<=t+1;i++) dep[i]=INF,cur[i]=S.head[i];\n\tdep[s]=0,q.push(s);\n\twhile (!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor (int i=S.head[u];i;i=S.next[i]){\n\t\t\tint v=S.to[i];\n\t\t\tif (S.val[i]&&dep[v]>dep[u]+1){\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif (dep[t]==INF) return 0;\n\treturn 1;\n}\nint dfs(int u,int flow){\n\tif (u==t) return flow;\n\tint used=0,rlow=0;\n\tfor (int i=cur[u];i;i=S.next[i]){\n\t\tcur[u]=i;\n\t\tint v=S.to[i];\n\t\tif (S.val[i]&&dep[v]==dep[u]+1){\n\t\t\tif (rlow=dfs(v,min(flow-used,S.val[i]))){\n\t\t\t\tS.val[i]-=rlow;\n\t\t\t\tS.val[i^1]+=rlow;\n\t\t\t\tused+=rlow;\n\t\t\t\tif (used==flow) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\nvoid dinic(){\n\tans=0;\n\twhile (bfs()){\n\t\tans+=dfs(s,INF);\n\t}\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"in.in\",\"r\",stdin);\n#endif\n    n=read(),m=read(),s=0,t=2*m+1;\n\tfor (int i=1;i<=n;i++) p[i]=read();\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tdis[i][j]=a[i][j]=read();\n\tfor (int k=1;k<=n;k++)\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tfor (int j=1;j<=n;j++)\n\t\t\t\ta[i][j]=min(a[i][j],a[i][k]+a[k][j]+p[k]);\n\tfor (int i=1;i<=m;i++){\n\t\tx[i]=read(),y[i]=read(),d[i]=read();\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tS.adde(s,i,1);\n\t}\n\tfor (int i=1;i<=m;i++)\n\t\tS.adde(i+m,t,1);\n\tfor (int i=1;i<=m;i++){\n\t\tfor (int j=1;j<=m;j++){\n\t\t\tif (i==j) continue;\n\t\t\tif (d[i]+dis[x[i]][y[i]]+(y[i]==x[j]?0:p[y[i]])+a[y[i]][x[j]]+p[x[j]]<=d[j]) S.adde(i,j+m,1);//cout<<i<<\" \"<<j+m<<\"\\n\";\n\t\t\t//cout<<d[i]<<\" \"<<a[x[i]][y[i]]<<\" \"<<p[y[i]]<<\" \"<<a[y[i]][x[j]]<<\" \"<<p[x[j]]<<\" \"<<d[j]<<'\\n';\n\t\t}\n\t}\n\tdinic();\n\tcout<<m-ans<<\"\\n\";\n    return 0;\n}\n```",
        "postTime": 1678159126,
        "uid": 257621,
        "name": "\u7ffc\u5fb7\u5929\u5c0a",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P5769 [JSOI2016]\u98de\u673a\u8c03\u5ea6"
    },
    {
        "content": "\u5efa\u8bae\u964d\u7d2b\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8981\u60f3\u7528\u7684\u98de\u673a\u6570\u5c11\u4e00\u70b9\uff0c\u5c31\u8981\u8ba9\u67d0\u4e9b\u98de\u673a\u5728\u98de\u5b8c\u4e00\u4e2a\u822a\u7ebf $X_i\\to Y_i$ \u4e4b\u540e\uff0c\u300c\u9a6c\u4e0d\u505c\u8e44\u300d\u5730\u8d76\u53bb\u67d0\u4e2a $X_j$\uff0c\u518d\u98de\u4e00\u6b21 $X_j\\to Y_j$\u3002\n\n\u98de\u5b8c $X_j\\to Y_j$ \u4e4b\u540e\u8fd9\u4e2a\u98de\u673a\u4e5f\u53ef\u80fd\u4f1a\u7ee7\u7eed\u53bb\u98de\u522b\u7684\u822a\u7ebf\uff0c\u53d1\u73b0\u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u300c\u80fd\u591f\u5728\u98de\u5b8c\u7b2c $i$ \u6761\u822a\u7ebf\u4e4b\u540e\u53ca\u65f6\u8d76\u8fc7\u53bb\u98de $j$ \u822a\u7ebf\u300d\u7684 $(i,j)$ \u8fde\u8fb9\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\u4e00\u5f20 DAG\uff0c\u4e00\u4e2a\u98de\u673a\u76f8\u5f53\u4e8e DAG \u4e0a\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f DAG \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\n\n\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u70b9\uff0c\u8bb8\u591a\u9898\u89e3\u6ca1\u6709\u63d0\u5230\uff0c\u5728\u5b9e\u9645\u7684\u65b9\u6848\u4e2d\uff0c\u67d0\u6761\u822a\u7ebf\u5b8c\u5168\u6709\u53ef\u80fd\u88ab\u591a\u6761\u98de\u673a\u7ecf\u8fc7\uff0c\u4f46\u4e3a\u4ec0\u4e48\u6211\u4eec\u4ecd\u7136\u53ea\u9700\u8981\u6c42\u6700\u5c0f\u4e0d\u4ea4\u8def\u5f84\u8986\u76d6\u5462\uff1f\u56de\u5fc6\u6700\u5c0f\u53ef\u4ea4\u8def\u5f84\u8986\u76d6\u7684\u505a\u6cd5\uff0c\u53d1\u73b0\u662f\u5148\u628a\u56fe\u505a\u4f20\u9012\u95ed\u5305\uff0c\u5728\u5f97\u5230\u7684\u65b0\u56fe\u4e0a\u505a\u6700\u5c0f\u4e0d\u4ea4\u8def\u5f84\u8986\u76d6\u3002\u800c\u5728\u672c\u9898\u4e2d\uff0c\u8d70\u5b8c $i$ \u80fd\u8d76\u5230 $j$\uff0c\u4e0e\u8d70\u5b8c $j$ \u80fd\u8d76\u5230 $k$\uff0c\u5b9e\u9645\u4e0a\u80fd\u591f\u63a8\u51fa\u8d70\u5b8c $i$ \u80fd\u8d76\u5230 $k$\u3002\u56e0\u6b64\uff0c\u8be5\u56fe\u7684\u4f20\u9012\u95ed\u5305\u5c31\u662f\u5b83\u672c\u8eab\uff0c\u6700\u5c0f\u4e0d\u4ea4\u8def\u5f84\u8986\u76d6\u7b49\u4e8e\u6700\u5c0f\u53ef\u4ea4\u8def\u5f84\u8986\u76d6\u3002\n\n\u67d0\u4e2a\u98de\u673a\u80fd\u591f\u5728\u98de\u5b8c $X_i\\to Y_i$ \u4e4b\u540e\u53ca\u65f6\u8d76\u5230 $X_j$ \u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a$D_i+w(X_i,Y_i)+\\text{dist}(Y_i,X_j)\\le D_j$\uff0c\u5176\u4e2d $\\text{dist}(u,v)$ \u8868\u793a $u\\to v$ \u7684\u6700\u77ed\u8def\uff0c\u4e14\u9700\u8981\u8ba1\u5165\u8def\u5f84\u4e0a\u6240\u6709\u70b9\uff08\u5305\u62ec $u,v$\uff09\u7684\u52a0\u6cb9\u4ee3\u4ef7\u3002\n\n\u4f7f\u7528 Floyd \u7b97\u6cd5\u6c42\u89e3\u6700\u77ed\u8def\uff0c\u63a5\u4e0b\u6765\u6c42\u89e3 DAG \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n>DAG \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u600e\u4e48\u505a\uff1f\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u5bf9 DAG \u4e2d\u6bcf\u6761\u8fb9 $(u,v)$\uff0c\u6211\u4eec\u5728\u65b0\u56fe\u4e2d\u8fde\u8fb9 $(u,v+n)$\u3002\u663e\u7136\u65b0\u56fe\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u7b54\u6848\u5373\u4e3a\u8fb9\u6570\u51cf\u53bb\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u503c\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define int long long\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int mod=1e9+7;\nint ksm(int x,int y,int p=mod){\n\tint ans=1;\n\tfor(int i=y;i;i>>=1,x=1ll*x*x%p)if(i&1)ans=1ll*ans*x%p;\n\treturn ans%p;\n}\nint inv(int x,int p=mod){return ksm(x,p-2,p)%p;}\nint randint(int l,int r){return rand()*rand()%(r-l+1)+l;}\n\nnamespace maxflow{\n\tconst int N=1e5+5;\n\tconst int M=5e5+5;\n\tint tot=1,head[N],nxt[M],edge[M],ver[M];\n\tvoid adde(int x,int y,int z){\n//\t\tcout<<x<<\" \"<<y<<\" \"<<z<<endl;\n\t\tnxt[++tot]=head[x],head[x]=tot,edge[tot]=z,ver[tot]=y;\n\t\tnxt[++tot]=head[y],head[y]=tot,edge[tot]=0,ver[tot]=x;\n\t}\n\t\n\tqueue<int>q;\n\tint n,m,d[N],s=0,t=N-1,cur[N];\n\tbool bfs(){\n\t\tmemset(d,0,sizeof(d)),memcpy(cur,head,sizeof(cur));\n\t\twhile(q.size())q.pop();\n\t\td[s]=1,q.push(s);while(q.size()){\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor(int i=head[x];i;i=nxt[i]){\n\t\t\t\tint y=ver[i];if(d[y]||(!edge[i]))continue;\n\t\t\t\td[y]=d[x]+1,q.push(y);if(y==t)return 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tint dinic(int x,int flow){\n\t\tif(x==t)return flow;\n\t\tint rest=flow;\n\t\tfor(int i=cur[x];i&&rest;i=nxt[i]){\n\t\t\tint y=ver[i];cur[x]=i;\n\t\t\tif((!edge[i])||(d[y]!=d[x]+1))continue;\n\t\t\tint k=dinic(y,min(rest,edge[i]));\n\t\t\tedge[i]-=k,edge[i^1]+=k,rest-=k;\n\t\t}\n\t\treturn flow-rest;\n\t}\n\tconst int INF=1e14;\n\tint Ans(){\n\t\tint ans=0,flow=0;\n\t\twhile(bfs()){\n\t\t\twhile(flow=dinic(s,INF))ans+=flow;\n\t\t}\n\t\treturn ans;\n\t}\n};\n\nusing maxflow::adde;\nusing maxflow::s;\nusing maxflow::t;\nconst int N=505;\nint f[N][N],n,p[N],m,st[N],ed[N],bg[N],a[N][N];\n\nsigned main(void){\n\n#ifdef YunQian\n\tfreopen(\"in.in\",\"r\",stdin);\n//\tfreopen(\"out.out\",\"w\",stdout);\n#endif\n\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)p[i]=read();\n\t\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)f[i][j]=a[i][j]=read();\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)if(i!=j)f[i][j]+=p[i];\n\tfor(int k=1;k<=n;k++)for(int i=1;i<=n;i++)for(int j=1;j<=n;j++)f[i][j]=min(f[i][j],f[i][k]+f[k][j]);\n\t\n\tfor(int i=1;i<=m;i++)st[i]=read(),ed[i]=read(),bg[i]=read();\n\tfor(int i=1;i<=m;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(i==j)continue;\n\t\t\tif(f[ed[i]][st[j]]+bg[i]+a[st[i]][ed[i]]+p[st[j]]<=bg[j])adde(i,j+m,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)adde(s,i,1),adde(i+m,t,1);\n\tcout<<m-maxflow::Ans()<<endl;\n\n\treturn 0;\n}\n\n```",
        "postTime": 1678097060,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "P5769"
    },
    {
        "content": "## \u9898\u89e3\uff1aP5769\n\n\n[\u9898\u76ee\u4f20\u9001\u95e8\uff1aP5769](https://www.luogu.com.cn/problem/P5769)\n\n[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.luogu.com.cn/blog/Miracle-Marta0512/solution-p5769)\n\n\u7ffb\u4e86\u7ffb\u9898\u89e3\uff0c\u53d1\u73b0\u90fd\u662f\u7f51\u7edc\u6d41\u7684\u89e3\u6cd5\uff0c\u4e8e\u662f\u6765\u8865\u4e00\u7bc7\u5308\u7259\u5229\u7684\u9898\u89e3\u3002\n\n\u8fd9\u9053\u9898\u5308\u7259\u5229\u76f8\u5bf9\u4e8e\u7f51\u7edc\u6d41\u7684\u4f18\u70b9\u5c31\u662f\u7801\u91cf\u5c0f\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u800c\u4e14\u8dd1\u5f97\u4e5f\u633a\u5feb\u7684\uff0c\u5438\u53e3\u6c27\u540e\u5c31\u6700\u4f18\u89e3\u7b2c\u4e00\u540d\u4e86\uff08\u622a\u81f32021\u5e7410\u67081\u65e5\uff09\u3002\n\n### \u9898\u76ee\u5206\u6790\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f[\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898](https://www.luogu.com.cn/problem/P2764)\u7684\u4e00\u4e2a\u53d8\u5f0f\u3002\n\n\u5148\u7528 ${\\rm{Floyd}}$ \u9884\u5904\u7406\u51fa\u4ece\u70b9 $i$ \u5230\u70b9 $j$ \u7684\u53ef\u4ee5\u76f4\u63a5\u8d77\u98de\u7684\u6700\u77ed\u8def\u5f84\u3002\u7136\u540e\u8003\u8651\u5bf9\u6bcf\u4e00\u8d9f\u822a\u7ebf\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f $D_i$ \u4fdd\u6301\u4e0d\u964d\u3002\n\n\u5bf9\u4e8e\u6392\u5e8f\u540e\u7684\u4e24\u6761\u822a\u7ebf $i$ \u548c $j$ $(i< j)$\uff0c\u53ef\u4ee5\u53d1\u73b0\u4f7f\u7528\u540c\u4e00\u67b6\u98de\u673a\u7684\u6761\u4ef6\u662f $f_{y_i,x_j} \\leq D_j-D_i-d_{x_i,y_i}-p_{x_j}$\u3002\n\n\u5176\u4e2d $d_{i,j}$ \u8868\u793a\u4ece\u70b9 $i$ \u76f4\u63a5\u98de\u5f80\u70b9 $j$ \u7684\u8def\u5f84\uff0c$f_{i,j}$ \u8868\u793a\u4ece\u70b9 $i$ \u5230\u70b9 $j$ \u7684\u53ef\u4ee5\u76f4\u63a5\u8d77\u98de\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u5982\u679c\u4e24\u6761\u822a\u7ebf\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u67b6\u98de\u673a\uff0c\u90a3\u4e48\u5c31\u4ece\u7f16\u53f7\u5c0f\u7684\u822a\u7ebf\u5411\u7f16\u53f7\u5927\u7684\u822a\u7ebf\u8fde\u4e00\u6761\u8fb9\uff0c\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u9053\u9898\u5b8c\u5168\u8f6c\u5316\u4e3a\u4e86[\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898](https://www.luogu.com.cn/problem/P2764)\u3002\n\n\u7136\u540e\u5c31\u662f\u62c6\u70b9\uff0c\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u4e86\uff0c\u6bcf\u6709\u4e00\u6761\u8fb9\u88ab\u5339\u914d\uff0c\u5c31\u8bf4\u660e\u6709\u4e24\u6761\u822a\u7ebf\u53ef\u4ee5\u5171\u7528\u4e00\u67b6\u98de\u673a\uff0c\u90a3\u4e48\u9700\u8981\u7684\u98de\u673a\u6570\u5c31\u4f1a\u51cf $1$\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a\u822a\u7ebf\u6570\u51cf\u6700\u5927\u5339\u914d\u6570\u3002\n\n\u4e0d\u4f1a\u505a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u7684\u53ef\u4ee5\u770b\u6211\u7684[\u7f51\u7edc\u6d4124\u9898\u9898\u89e3](https://www.luogu.com.cn/blog/Miracle-Marta0512/wang-lao-liu-24-ti)\u3002\n\n###  AC \u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nconst int N = 505;\nint p[N], match[N], f[N][N], d[N][N];\nbool vis[N];\n\nstruct plan  //\u5b9a\u4e49\u822a\u7ebf\u7684\u7ed3\u6784\u4f53\n{\n\tint u, v, t;\n} q[N];\n\nstd :: vector <int> g[N];  //\u8fd9\u4e2avector\u662f\u7528\u6765\u5b58\u4e8c\u5206\u56fe\u7684\n\ninline bool cmp (plan a, plan b)  //\u6bd4\u8f83\u51fd\u6570\uff0c\u4fdd\u8bc1\u6392\u5e8f\u540eD_i\u4e0d\u964d\n{\n\treturn a.t < b.t;\n}\n\ninline void Floyd ()  //Floyd\u5904\u7406\u6700\u77ed\u8def\u5f84\n{\n\tfor (int k = 1; k <= n; k++)\n\t{\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor (int j = 1; j <= n; j++)\n\t\t\t{\n\t\t\t\tf[i][j] = min (f[i][j], f[i][k] + f[k][j]);\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline int Dfs (int u)  //\u5308\u7259\u5229\u677f\u5b50\uff0c\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n{\n\tfor (int v, i = 0; i < g[u].size (); i++)\n\t{\n\t\tv = g[u][i];\n\t\tif (vis[v])  continue;\n\t\tvis[v] = true;\n\t\tif (! match[v] || Dfs (match[v]))\n\t\t{\n\t\t\tmatch[v] = u;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main(){\n\tscanf (\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; i++)  scanf (\"%d\", &p[i]);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tscanf (\"%d\", &d[i][j]);\n\t\t\tf[i][j] = d[i][j] + (i == j ? 0 : p[j]);\n\t\t}\n\t}\n\tFloyd ();\n\tfor (int i = 1; i <= m; i++)  scanf (\"%d%d%d\", &q[i].u, &q[i].v, &q[i].t);\n\tsort (q + 1, q + m + 1, cmp);  //\u5bf9\u822a\u7ebf\u8fdb\u884c\u6392\u5e8f\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tfor (int j = i + 1; j <= m; j++)\n\t\t{\n\t\t\tint t = q[j].t - q[i].t - d[q[i].u][q[i].v] - p[q[i].v];\n\t\t\tif (t >= f[q[i].v][q[j].u])  g[i].push_back (j);  //\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u4e24\u6761\u822a\u7ebf\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u4e8c\u5206\u56fe\u4e2d\u8fdb\u884c\u8fde\u8fb9\n\t\t}\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tmemset (vis, false, sizeof (vis));\n\t\tans += Dfs (i);\n\t}\n\treturn printf (\"%d\", m - ans), 0;\n}\n```",
        "postTime": 1633099714,
        "uid": 257560,
        "name": "Asphy7xia",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011 P5769 [JSOI2016]\u98de\u673a\u8c03\u5ea6"
    },
    {
        "content": "[\u7f51\u7edc\u6d4124\u9898](http://chihik.cf/post/wang-luo-liu-24-ti/)\n\n\u4e3a\u4e86\u4f7f\u98de\u673a\u6570\u91cf\u5c3d\u91cf\u5c11\uff0c\u4e00\u67b6\u98de\u673a\u5c3d\u91cf\u591a\u98de\u51e0\u8d9f\u822a\u73ed\u3002\n\n\u5c06\u822a\u73ed\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\n\n\u5982\u679c $i,j$ \u822a\u73ed\u53ef\u4ee5\u7531\u4e00\u67b6\u98de\u673a\u5148\u540e\u98de\u884c\uff0c\u90a3\u4e48\u5c06 $i,j$ \u8fde\u4e00\u6761\u8fb9\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u5224\u65ad\u53ef\u5148\u540e\u8fdb\u884c\u7684\u822a\u73ed\u3002\n\n\u53ef\u4ee5\u7528 $\\text{Floyd}$ \u5904\u7406\u7531\u673a\u573a $i$ \u5230 $j$ \uff0c\u4e14\u53ef\u4ee5\u7acb\u5373\u8d77\u98de\u7684\u6700\u77ed\u65f6\u95f4 $dis(i,j)$\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u6ee1\u8db3\uff1a\n\n$$d[i]+ T(x_i,y_i)+p_{y_i}+dis(y_i,x_j) \\le d[j]$$\n\n~~Dinic\u9700\u8981\u52a0\u5f53\u524d\u5f27\u4f18\u5316\u3002~~ \u5e94\u8be5\u90fd\u77e5\u9053\u5427\u3002\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define Inf 0x3f3f3f3f\n\ntemplate<typename _T>\nvoid Read( _T &x ) {\n\tx = 0; int f = 1;\n\tchar s = getchar( );\n\tfor( ; s < '0' || s > '9' ; s = getchar( ) ) f = s == '-' ? -f : f;\n\tfor( ; s >= '0' && s <= '9' ; s = getchar( ) ) x = x * 10 + s - '0';\n\tx *= f;\n}\ntemplate<typename _T>\nvoid Write( _T x ) {\n\tif( x < 0 ) putchar( '-' ) , x = -x;\n\tif( x >= 10 ) Write( x / 10 );\n\tputchar( x % 10 + '0' );\n}\n\nconst int MAXN = 500 , MAXM = 260000;\nstruct node {\n\tint v , flow , nxt;\n}Graph[ MAXM + 5 ];\nint tot = 1 , Head[ 2 * MAXN + 5 ];\nvoid Add_Edge( int u , int v , int f ) {\n\tGraph[ ++ tot ] = { v , f , Head[ u ] };\n\tHead[ u ] = tot;\n}\n\nint n , m , S , T , p[ MAXN + 5 ] , t[ MAXN + 5 ][ MAXN + 5 ] , dis[ MAXN + 5 ][ MAXN + 5 ];\nint x[ MAXN + 5 ] , y[ MAXN + 5 ] , tim[ MAXN + 5 ];\nint lev[ 2 * MAXN + 5 ] , cur[ 2 * MAXN + 5 ];\nbool Layering( int s , int t ) {\n    memset( lev , -1 , sizeof( lev ) );\n\tmemcpy( cur , Head , sizeof( Head ) );\n    queue< int > Que;\n    Que.push( s ) , lev[ s ] = 0;\n    while( !Que.empty( ) ) {\n        int u = Que.front( ); Que.pop( );\n        for( int i = Head[ u ] ; i ; i = Graph[ i ].nxt ) {\n            int v = Graph[ i ].v , flw = Graph[ i ].flow;\n            if( flw > 0 && lev[ v ] == -1 )\n                lev[ v ] = lev[ u ] + 1 , Que.push( v );\n        }\n    }\n    return lev[ t ] != -1;\n}\nint dfs( int u , int t , int f ) {\n\tif( u == t ) return f;\n\tfor( int i = cur[ u ] ; i ; i = Graph[ i ].nxt ) {\n\t\tint v = Graph[ i ].v , flw = Graph[ i ].flow;\n\t\tcur[ u ] = i;\n\t\tif( flw > 0 && lev[ v ] == lev[ u ] + 1 ) {\n\t\t\tint mf = dfs( v , t , min( f , flw ) );\n\t\t\tif( mf ) {\n\t\t\t\tGraph[ i ].flow -= mf; Graph[ i ^ 1 ].flow += mf;\n\t\t\t\treturn mf;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint Dinic( int s , int t ) {\n\tint Maxf = 0;\n\twhile( Layering( s , t ) ) for( int fl ; ( fl = dfs( s , t , Inf ) ) > 0 ; Maxf += fl );\n\treturn Maxf;\n}\nvoid MakeGraph( ) {\n\tS = 2 * m + 1 , T = 2 * m + 2;\n\tfor( int i = 1 ; i <= m ; i ++ )\n\t\tAdd_Edge( S , i , 1 ) , Add_Edge( i , S , 0 );\n\tfor( int i = 1 ; i <= m ; i ++ )\n\t\tAdd_Edge( i + m , T , 1 ) , Add_Edge( T , i + m , 0 );\n\tfor( int i = 1 ; i <= m ; i ++ )\n\t\tfor( int j = 1 ; j <= m ; j ++ )\n\t\t\tif( tim[ i ] + t[ x[ i ] ][ y[ i ] ] + p[ y[ i ] ] + dis[ y[ i ] ][ x[ j ] ] <= tim[ j ] )\n\t\t\t\tAdd_Edge( i , j + m , 1 ) , Add_Edge( j + m , i , 0 );\n}\n\nvoid Floyd( ) {\n\tfor( int i = 1 ; i <= n ; i ++ )\n\t\tfor( int j = 1 ; j <= n ; j ++ )\n\t\t\tif( i ^ j ) dis[ i ][ j ] = t[ i ][ j ] + p[ j ];\n\tfor( int k = 1 ; k <= n ; k ++ )\n\t\tfor( int i = 1 ; i <= n ; i ++ )\n\t\t\tfor( int j = 1 ; j <= n ; j ++ )\n\t\t\t\tif( dis[ i ][ j ] > dis[ i ][ k ] + dis[ k ][ j ] )\n\t\t\t\t\tdis[ i ][ j ] = dis[ i ][ k ] + dis[ k ][ j ];\n}\n\nint main( ) {\n\tRead( n ) , Read( m );\n\tfor( int i = 1 ; i <= n ; i ++ )\n\t\tRead( p[ i ] );\n\tfor( int i = 1 ; i <= n ; i ++ )\n\t\tfor( int j = 1 ; j <= n ; j ++ )\n\t\t\tRead( t[ i ][ j ] );\n\tfor( int i = 1 ; i <= m ; i ++ )\n\t\tRead( x[ i ] ) , Read( y[ i ] ) , Read( tim[ i ] );\n\t\n\tFloyd( );\n\tMakeGraph( );\n\tWrite( m - Dinic( S , T ) ) , putchar('\\n');\n\treturn 0; \n} \n```\n",
        "postTime": 1595164564,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011"
    },
    {
        "content": "## \u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011\n\n### \u3010[\u9898\u610f](https://www.luogu.com.cn/problem/P5769)\u3011\n\n\u6709 $n$ \u6761\u822a\u7ebf\uff0c\u95ee\u6700\u5c11\u8981\u7528\u591a\u5c11\u98de\u673a\u624d\u80fd\u98de\u5b8c\uff1f\n\n### \u3010\u5206\u6790\u3011\n\n**\u611f\u8c22** [ET2006\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/et2006/wang-lao-liu-hao-ti-ti-xie-hui-zong) **orz%%%**\n\n\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u7684\u8ba9\u540c\u4e00\u73ed\u98de\u673a\u8fde\u7eed\u7684\u98de\u82e5\u5e72\u822a\u7ebf\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u5982\u679c\u4e00\u67b6\u98de\u673a\u8981\u98de\u822a\u7ebf $i$ \u548c $j$\uff0c\u9700\u8981\u6ee1\u8db3\u54ea\u4e9b\u6761\u4ef6\uff1f\u5047\u8bbe\u822a\u7ebf $i$ \u5728 $j$ \u524d\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u98de\u673a\u98de\u5b8c $i$ \u540e\u518d\u5230 $j$ \u7684\u51fa\u53d1\u673a\u573a\u7684\u65f6\u95f4\uff0c\u65e9\u4e8e $d_j$\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe $g_{i,j}$ \u8868\u793a\u4ece\u673a\u573a $i$ \u5230 $j$ \u7684\u6700\u5c11\u82b1\u8d39\u3002\u521d\u59cb\u5316\u65f6\uff0c$g_{i,j} = t_{i,j}+p_j$\uff0c\u7279\u6b8a\u7684\uff0c$g_{i,i} = 0$\u3002\n\n\u6211\u4eec\u5728\u6765\u770b\u4e0a\u6587\u7684\u6761\u4ef6\uff0c\u5982\u679c\n\n$$d_i+t_{x_i,y_i}+p_{y_i}+g_{y_i,x_j} \\leq d_j$$\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u822a\u7ebf $i$ \u548c $j$ \u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u8868\u793a\u4e00\u67b6\u98de\u673a\u53ef\u4ee5\u98de\u5b8c\u822a\u7ebf $i$ \u548c $j$\u3002\u8fd9\u6837\uff0c\u6bcf\u4e00\u67b6\u98de\u673a\u7684\u822a\u7ebf\uff0c\u5c31\u662f\u8fd9\u5f20\u56fe\u91cc\u7684\u4e00\u6761\u8def\u5f84\u3002\u6211\u4eec\u8981\u7528\u6700\u5c11\u7684\u98de\u673a\uff0c\u76f8\u5f53\u4e8e\u7528\u6700\u5c11\u7684\u8def\u5f84\u8986\u76d6\u8fd9\u4e00\u5f20\u56fe\u3002\n\n**\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u88ab\u6211\u4eec\u8f6c\u5316\u6210\u4e86\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002**\n\n\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u5efa\u6a21\u65b9\u6cd5\uff1a\n\n1. \u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5728\u5efa\u7acb\u865a\u62df\u6e90\u6c47\uff0c\u8fd9\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u5f20\u4e8c\u5206\u56fe\uff1b\n\n2. \u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u8fb9 $x\\rightarrow y$\uff0c\u4ece $x$ \u7684\u5165\u70b9\u8fde\u5411 $y$ \u7684\u51fa\u70b9\uff1b\n\n3. \u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff1b\n\n4. \u7b54\u6848\u662f\u539f\u56fe\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u3002\n\n~~\u5728\u6b64\u5c31\u4e0d\u8bc1\u660e\u4e86\u3002~~\n\n\u4e0b\u9762\u662f AC \u4ee3\u7801\n\n```cpp\n/*\nluogu P5769\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 0x7f7f7f7f;\n\nint n,m,s,t,g[505][505],p[505],d[505],x[505],y[505],tim[505][505];\nint mxf=0;\nint ee=1,h[500005],nex[500005<<1],to[500005<<1],val[500005<<1];\nint dep[500005],gap[500005];\n\nvoid addedge(int x,int y,int z)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\tval[ee] = z;\n\th[x] = ee;\n}\n\nvoid bfs()\n{\n\tqueue<int> q;\n\tq.push(t);\n\tdep[t] = 1;\n\tgap[1] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i;i=nex[i])\n\t\t\tif(!dep[to[i]])\n\t\t\t{\n\t\t\t\tdep[to[i]] = dep[x]+1;\n\t\t\t\tgap[dep[to[i]]]++;\n\t\t\t\tq.push(to[i]);\n\t\t\t}\n\t}\n}\n\nint dfs(int x,int flow)\n{\n\tif(x==t)\n\t{\n\t\tmxf += flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(dep[to[i]]==dep[x]-1 && val[i]>0)\n\t\t{\n\t\t\tint d=dfs(to[i],min(val[i],flow-used));\n\t\t\tif(d)\n\t\t\t{\n\t\t\t\tval[i] -= d;\n\t\t\t\tval[i^1] += d;\n\t\t\t\tused += d;\n\t\t\t}\n\t\t\tif(used==flow)\n\t\t\t\treturn used;\n\t\t}\n\tgap[dep[x]]--;\n\tif(gap[dep[x]]==0)\n\t\tdep[s] = m*2+1;\n\tdep[x]++;\n\tgap[dep[x]]++;\n\treturn used;\n}\n\nvoid isap()\n{\n\tmxf = 0;\n\tbfs();\n\twhile(dep[s]<=m*2)\n\t\tdfs(s,INF);\n}\n\nvoid floyd()\n{\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tif(g[i][k]+g[k][j]<g[i][j])\n\t\t\t\t\tg[i][j] = g[i][k]+g[k][j];\n}\n\nint main()\n{\n\tcin>>n>>m;\n\ts = 0, t = m*2+1;\n\tfor(int i=1;i<=n;cin>>p[i++]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcin>>tim[i][j];\n\tfor(int i=1;i<=m;cin>>x[i]>>y[i]>>d[i],i++);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(i!=j)\n\t\t\t\tg[i][j] = tim[i][j]+p[j];\n\tfloyd();\n\tfor(int i=1;i<=m;i++)\n\t\taddedge(s,i,1), addedge(i,s,0);\n\tfor(int i=1;i<=m;i++)\n\t\taddedge(i+m,t,1), addedge(t,i+m,0);\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(d[i]+tim[x[i]][y[i]]+p[y[i]]+g[y[i]][x[j]]<=d[j])\n\t\t\t\taddedge(i,j+m,INF), addedge(j+m,i,0);\n\tisap();\n\tcout<<m-mxf<<endl;\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6 AC \u6109\u5feb\uff01",
        "postTime": 1583810823,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011"
    },
    {
        "content": "~~\u6211\u7231\u7f51\u7edc\u6d41~~\n\n\u521a\u770b\u5230\u8fd9\u9053\u9898\u4e00\u70b9\u601d\u8def\u4e5f\u6ca1\u6709\uff0c\u540e\u6765\u60f3\u4e00\u60f3\u5c31\u60f3\u660e\u767d\u4e86\u3002\n\n\u9996\u5148\uff0c\u4e3a\u4e86\u627e\u51fa\u6bcf\u4e2a\u822a\u73ed\u4e4b\u95f4\u80fd\u5426\u8f6c\u79fb\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a$dis_{i,j}$\u6570\u7ec4\uff0c\u8868\u793a\u4ece\u70b9$i$\u5230\u70b9$j$\u5e76\u80fd\u591f\u518d\u6b21\u8d77\u98de\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\u7531\u9898\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u521d\u59cb$dis_{i,j}=T_{i,j}+P_j$\uff0c\u8868\u793a\u4e00\u5f00\u59cb\u7684\u822a\u73ed\u90fd\u662f\u76f4\u98de\u7684\u3002\u53e6\u5916\uff0c\u5982\u679c$i=j$\uff0c\u5219\u5fc5\u6709$dis_{i,j}=0$\u3002\n\n\u7136\u540e\u5728$dis$\u4e0a\u8dd1$floyd$\u3002\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86$dis$\u6570\u7ec4\u7684\u6c42\u89e3\u3002\n\n\u5982\u679c\u5728\u4e00\u4e2a\u822a\u73ed\u7ed3\u675f\u540e\uff0c\u6309\u7167\u6700\u77ed\u8def\u5f84\uff08\u5373$dis$\uff09\uff0c\u80fd\u591f\u6309\u65f6\u8d76\u4e0a\u53e6\u4e00\u4e2a\u822a\u73ed\uff0c\u5219\u5b83\u4eec\u53ef\u4ee5\u8f6c\u79fb\u3002\n\n\u8bbe\u822a\u73ed$i$\u662f\u4ece\u70b9$x_i$\u5230\u70b9$y_i$\uff0c\u65f6\u95f4\u662f\u4ece$s_i$\u5230$t_i$\uff0c\u5219\u5982\u679c\u6709\uff1a\n\n$t_i+dis_{y_i,x_j}\\leq s_j$\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u8f6c\u79fb\u3002\n\n**\u53e6\uff0c$t_i=s_i+T_{x_i,y_i}+P_{y_i}$\uff0c\u800c\u4e0d\u662f$t_i=s_i+dis_{x_i,y_i}$\uff0c\u56e0\u4e3a\u822a\u73ed\u662f\u76f4\u98de\uff0c\u4e0d\u662f\u6309\u7167\u6700\u77ed\u8def\u5f84\u98de\uff01**~~\u6211\u4e3a\u4e86\u8fd9\u4e2a\u4e00\u76f4WA30\u3002~~\n\n\u5728\u8f6c\u79fb\u5173\u7cfb\u5efa\u597d\u4e4b\u540e\uff0c\u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u73b0\u5728\u7684\u72b6\u51b5\uff1a\n\n\u6211\u4eec\u6709$m$\u6761\u822a\u73ed\uff0c\u822a\u73ed\u4e4b\u95f4\u4e92\u6709\u6709\u5411\u7684\u8f6c\u79fb\u5173\u7cfb\uff0c\u4f46\u8f6c\u79fb\u5173\u7cfb\u4fdd\u8bc1\u65e0\u73af\uff08\u56e0\u4e3a\u6309\u65f6\u95f4\u8f6c\u79fb\uff09\u3002\n\n\u8fd9\u8ba9\u4eba\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n[\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898](https://www.luogu.com.cn/problem/P2764)\uff01\uff01\uff01\n\n~~\u4e0d\u4f1a\u7684\u4eba\uff0c\u63a8\u4e00\u4e0b\u6211\u7684[\u7f51\u7edc\u6d41blog](https://www.luogu.com.cn/blog/Troverld/wang-lao-liu-xue-xi-bi-ji)\u3002\u7b2c\u4e00\u9898\u5c31\u662f\u5b83\u3002~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,fix[510],dis[510][510],dd[510][510];\nstruct AirLine{\n\tint u,v,s,t;\n}a[510];\nint head[1010],cur[1010],dep[1010],cnt,S,T,res;\nstruct node{\n\tint to,next,val;\n}edge[4010000];\nvoid ae(int u,int v,int w){\n\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=0,head[v]=cnt++;\n}\nqueue<int>q;\ninline bool bfs(){\n\tmemset(dep,0,sizeof(dep)),q.push(S),dep[S]=1;\n\twhile(!q.empty()){\n\t\tregister int x=q.front();q.pop();\n\t\tfor(register int i=cur[x]=head[x];i!=-1;i=edge[i].next)if(edge[i].val&&!dep[edge[i].to])dep[edge[i].to]=dep[x]+1,q.push(edge[i].to);\n\t}\n\treturn dep[T]>0;\n}\nbool reach;\ninline int dfs(int x,int flow){\n\tif(x==T){\n\t\tres+=flow;\n\t\treach=true;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(register int &i=cur[x];i!=-1;i=edge[i].next){\n\t\tif(!edge[i].val||dep[edge[i].to]!=dep[x]+1)continue;\n\t\tregister int ff=dfs(edge[i].to,min(edge[i].val,flow-used));\n\t\tif(ff){\n\t\t\tedge[i].val-=ff;\n\t\t\tedge[i^1].val+=ff;\n\t\t\tused+=ff;\n\t\t\tif(used==flow)break;\n\t\t}\n\t}\n\treturn used;\n}\ninline void Dinic(){\n\twhile(bfs()){\n\t\treach=true;\n\t\twhile(reach)reach=false,dfs(S,0x3f3f3f3f);\n\t}\t\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m),memset(head,-1,sizeof(head)),S=2*m+1,T=2*m+2;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&fix[i]);\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)scanf(\"%d\",&dd[i][j]),dis[i][j]=(i==j?0:dd[i][j]+fix[j]);\n\tfor(int k=1;k<=n;k++)for(int i=1;i<=n;i++)for(int j=1;j<=n;j++)dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%d\",&a[i].u,&a[i].v,&a[i].s),a[i].t=a[i].s+dd[a[i].u][a[i].v]+fix[a[i].v];\n\tfor(int i=1;i<=m;i++)for(int j=1;j<=m;j++)if(a[i].t+dis[a[i].v][a[j].u]<=a[j].s)ae(i,j+m,1);\n\tfor(int i=1;i<=m;i++)ae(S,i,1),ae(i+m,T,1);\n\tDinic();\n\tprintf(\"%d\\n\",m-res);\n\treturn 0;\n}\n```\n",
        "postTime": 1579917201,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011"
    },
    {
        "content": "~~\u673a\u623f\u590d\u4e60\u6700\u77ed\u8def\u7684\u65f6\u5019\u5728\u4f5c\u4e1a\u91cc\u770b\u5230\u8fd9\u9898\u3002~~\n\n~~\u7f51\u7edc\u6d41\u4e5f\u5c31\u662f dfs \u548c bfs \u561b\u3002~~\n\n------------\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u98de\u673a\u98de\u5b8c\u54ea\u4e9b\u7ebf\u53ef\u4ee5\u63a5\u7740\u53bb\u98de\u53e6\u4e00\u6761\u7ebf\u5904\u7406\u51fa\u6765\uff0c\u8fd9\u4e2a\u8981\u7528\u5230\u5168\u6e90\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u5efa\u4e00\u4e2a\u56fe\uff08\u7a0b\u5e8f\u5b9e\u73b0\u6ca1\u5fc5\u8981\uff09\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u539f\u6765\u7684\u4e00\u4e2a\u822a\u7ebf\u3002\u5982\u679c\u98de\u673a\u98de\u5b8c\u4e00\u4e2a\u822a\u7ebf\u53ef\u4ee5\u53bb\u98de\u53e6\u4e00\u4e2a\uff0c\u5c31\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u4e2a\u56fe\u663e\u7136\u662f\u4e00\u4e2a DAG\uff0c\u56e0\u4e3a\u65f6\u95f4\u5355\u5411\u6d41\u901d\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u540c\u4e00\u67b6\u98de\u673a\u8fde\u98de\u4e86\u51e0\u4e2a\u822a\u7ebf\uff0c\u90a3\u4e48\u8fd9\u4e9b\u822a\u7ebf\u5728\u8fd9\u4e2a\u56fe\u4e0a\u4e00\u5b9a\u53cd\u6620\u4e3a\u4e00\u6761\u8def\u5f84\u3002\u6211\u4eec\u9700\u8981\u8ba9\u6240\u6709\u70b9\u90fd\u88ab\u98de\u5230\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e00\u4e2a DAG \u8def\u5f84\u8986\u76d6\u95ee\u9898\u3002\n\n\u4e0b\u9762\u8bf4\u8def\u5f84\u8986\u76d6\u7684\u89e3\u6cd5\uff1a\n\n\u628a\u6bcf\u4e2a\u70b9 $u$ \u62c6\u6210\u4e24\u4e2a\u70b9 $u_1$ \u548c $u_2$\uff0c\u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u8fb9 $<u,v>$\uff0c\u52a0\u4e00\u6761\u8fb9 $(u_1,v_2)$\u3002\u8fd9\u6837\u5f97\u5230\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u8dd1\u5b83\u7684\u6700\u5927\u5339\u914d\uff0c\u7136\u540e\u539f\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5c31\u662f\u539f\u56fe\u70b9\u6570\u51cf\u53bb\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u53e3\u80e1\u7684\u8bc1\u660e\uff0c\u611f\u6027\u7406\u89e3\u5373\u53ef\uff1a\n\n\u6700\u5f00\u59cb\u6240\u6709\u70b9\u662f\u5355\u72ec\u7684\u4e00\u6761\u8def\u5f84\uff0c\u7136\u540e\u6211\u4eec\u628a\u4e00\u6761\u5339\u914d\u8fb9 $(u_1,v_2)$ \u770b\u6210\u628a $u$ \u548c $v$ \u6240\u5728\u7684\u8def\u5f84\u8fde\u6210\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u6837\u6bcf\u4e00\u4e2a\u5339\u914d\u90fd\u5bf9\u5e94\u539f\u56fe\u7684\u4e00\u4e2a\u8def\u5f84\u8986\u76d6\uff0c\u6613\u8bc1\u5b83\u4eec\u76f8\u52a0\u7b49\u4e8e\u603b\u70b9\u6570\u3002\u6700\u5927\u5339\u914d\u5c31\u5bf9\u5e94\u6700\u5c0f\u8986\u76d6\u3002\n\n\u7a0b\u5e8f\u5b9e\u73b0\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5efa\u8fd9\u4e2a\u4e8c\u5206\u56fe\uff0c\u800c\u6ca1\u5fc5\u8981\u5efa\u90a3\u4e2a DAG\u3002\n\n~~\u5947\u4e11\u65e0\u6bd4\u7684~~\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=500+5;\nint n,m,x[maxn],y[maxn],dd[maxn],t[maxn][maxn],p[maxn];\nint dis[maxn][maxn];\nvoid floyd(){\n\tfor(int i=1;i<=n;i++) for(int j=1;j<=n;j++) for(int k=1;k<=n;k++)\n\t    dis[j][k]=min(dis[j][k],dis[j][i]+dis[i][k]);\n}\nstruct edge{\n\tint from,to,cap,flow;\n\tedge(int u,int v,int w):from(u),to(v),cap(w),flow(0){}\n};\nvector<edge> edges;\nvector<int> g[maxn*2];\nvoid add_edge(int u,int v,int w){\n\tg[u].push_back(edges.size());\n\tedges.push_back(edge(u,v,w));\n\tg[v].push_back(edges.size());\n\tedges.push_back(edge(v,u,0));\n}\nint d[maxn*2];\nbool bfs(){\n\tmemset(d,-1,sizeof(d));\n\tqueue<int> q;\n\tq.push(0);\n\td[0]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=0;i<g[u].size();i++){\n\t\t\tedge& e=edges[g[u][i]];\n\t\t\tif(e.flow>=e.cap||d[e.to]>=0) continue;\n\t\t\td[e.to]=d[u]+1;\n\t\t\tq.push(e.to);\n\t\t}\n\t}\n\treturn d[m*2+1]>=0;\n}\nint cur[maxn*2];\nconst int inf=2e9;\nint dfs(int u,int a){\n\tif(u==m*2+1) return a;\n\tint ans=0;\n\tfor(int& i=cur[u];i<g[u].size();i++){\n\t\tedge& e=edges[g[u][i]];\n\t\tif(e.flow>=e.cap||d[e.to]!=d[u]+1) continue;\n\t\tint f=dfs(e.to,e.cap==inf?a:min(a,e.cap-e.flow));\n\t\tif(a<inf) a-=f;\n\t\tans+=f;\n\t\te.flow+=f;\n\t\tedges[g[u][i]^1].flow-=f;\n\t\tif(a==0) break;\n\t}\n\treturn ans;\n}\nint dicnic(){\n\tint ans=0;\n\twhile(bfs()){\n\t\tmemset(cur,0,sizeof(cur));\n\t\tans+=dfs(0,inf);\n\t}\n\treturn ans;\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    m=readint();\n    for(int i=1;i<=n;i++) p[i]=readint();\n    for(int i=1;i<=n;i++) for(int j=1;j<=n;j++)\n    \tt[i][j]=readint();\n    for(int i=1;i<=n;i++) for(int j=1;j<=n;j++)\n    \tdis[i][j]=i==j?0:t[i][j]+p[j];\n    for(int i=1;i<=m;i++){\n    \tx[i]=readint();\n    \ty[i]=readint();\n    \tdd[i]=readint();\n\t}\n\tfloyd();\n\tfor(int i=1;i<=m;i++) for(int j=1;j<=m;j++)\n\t    if(dd[i]+t[x[i]][y[i]]+p[y[i]]+dis[y[i]][x[j]]<=dd[j])\n\t        add_edge(i,m+j,1);\n\tfor(int i=1;i<=m;i++) add_edge(0,i,1);\n\tfor(int i=1;i<=m;i++) add_edge(m+i,m*2+1,1);\n\tprintf(\"%d\\n\",m-dicnic());\n\treturn 0;\n}\n```\n",
        "postTime": 1579317010,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5769 \u3010[JSOI2016]\u98de\u673a\u8c03\u5ea6\u3011"
    }
]